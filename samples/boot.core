module 'boot' ['call_lambda'/0,
	       'do'/1,
	       'lambda'/1,
	       'module_info'/0,
	       'module_info'/1,
	       'start'/0]
    attributes []
'start'/0 =
    %% Line 8
    fun () ->
	let <X> =
	    %% Line 9
	    call 'random':'uniform'
		()
	in  let <_cor1> =
		%% Line 10
		apply 'call_lambda'/0
		    ()
	    in  let <Y> =
		    %% Line 10
		    call 'erlang':'+'
			(X, _cor1)
		in  %% Line 11
		    case apply 'return_tuple'/0
			     () of
		      <{'ok',Z}> when 'true' ->
			  let <_cor4> =
			      %% Line 12
			      call 'erlang':'+'
				  (Y, Z)
			  in  %% Line 12
			      call 'erlang':'display'
				  (_cor4)
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
'lambda'/1 =
    %% Line 14
    fun (_cor0) ->
	let <X> =
	    %% Line 15
	    call 'random':'uniform'
		()
	in  %% Line 16
	    ( fun (_cor3) ->
		  let <_cor2> =
		      %% Line 17
		      call 'erlang':'+'
			  (_cor0, X)
		  in  %% Line 17
		      call 'erlang':'+'
			  (_cor2, _cor3)
	      -| [{'id',{0,0,'-lambda/1-fun-0-'}}] )
'call_lambda'/0 =
    %% Line 20
    fun () ->
	let <L> =
	    %% Line 21
	    apply 'lambda'/1
		(1)
	in  %% Line 22
	    apply L
		(5)
'return_tuple'/0 =
    %% Line 24
    fun () ->
	let <_cor0> =
	    %% Line 25
	    call 'random':'uniform'
		()
	in  %% Line 25
	    {'ok',_cor0}
'do'/1 =
    %% Line 27
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 28
	    call 'random':'uniform'
		()
	in  %% Line 28
	    call 'erlang':'+'
		(_cor1, _cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('boot')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('boot', _cor0)
end