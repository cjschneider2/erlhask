module 'ose' ['attach'/2,
	      'close'/1,
	      'dehunt'/2,
	      'detach'/2,
	      'get_id'/1,
	      'get_name'/2,
	      'hunt'/2,
	      'listen'/2,
	      'module_info'/0,
	      'module_info'/1,
	      'open'/1,
	      'send'/4,
	      'send'/5]
    attributes [%% Line 52
		'opaque' =
		    %% Line 52
		    [{'mailbox',{'type',52,'port',[]},[]}],
		%% Line 55
		'opaque' =
		    %% Line 55
		    [{'mailbox_id',{'type',55,'integer',[]},[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{'message_number',{'type',59,'range',[{'integer',59,0}|[{'integer',59,4294967295}]]},[]}],
		%% Line 62
		'opaque' =
		    %% Line 62
		    [{'hunt_ref',{'type',62,'tuple',[{'type',62,'mailbox',[]}|[{'type',62,'integer',[]}]]},[]}],
		%% Line 66
		'opaque' =
		    %% Line 66
		    [{'attach_ref',{'type',66,'tuple',[{'type',66,'mailbox',[]}|[{'type',66,'integer',[]}]]},[]}],
		%% Line 70
		'export_type' =
		    %% Line 70
		    [{'mailbox_id',0}|[{'message_number',0}|[{'mailbox',0}|[{'hunt_ref',0}|[{'attach_ref',0}]]]]],
		%% Line 114
		'spec' =
		    %% Line 114
		    [{{'open',1},[{'type',114,'bounded_fun',[{'type',114,'fun',[{'type',114,'product',[{'var',114,'Name'}]}|[{'var',114,'Port'}]]}|[[{'type',115,'constraint',[{'atom',115,'is_subtype'}|[[{'var',115,'Name'}|[{'type',115,'iodata',[]}]]]]}|[{'type',116,'constraint',[{'atom',116,'is_subtype'}|[[{'var',116,'Port'}|[{'type',116,'mailbox',[]}]]]]}]]]]}]}],
		%% Line 147
		'spec' =
		    %% Line 147
		    [{{'close',1},[{'type',147,'bounded_fun',[{'type',147,'fun',[{'type',147,'product',[{'var',147,'Port'}]}|[{'atom',147,'ok'}]]}|[[{'type',148,'constraint',[{'atom',148,'is_subtype'}|[[{'var',148,'Port'}|[{'type',148,'mailbox',[]}]]]]}]]]}]}],
		%% Line 172
		'spec' =
		    %% Line 172
		    [{{'get_id',1},[{'type',172,'bounded_fun',[{'type',172,'fun',[{'type',172,'product',[{'var',172,'Port'}]}|[{'var',172,'Pid'}]]}|[[{'type',173,'constraint',[{'atom',173,'is_subtype'}|[[{'var',173,'Port'}|[{'type',173,'mailbox',[]}]]]]}|[{'type',174,'constraint',[{'atom',174,'is_subtype'}|[[{'var',174,'Pid'}|[{'type',174,'mailbox_id',[]}]]]]}]]]]}]}],
		%% Line 193
		'spec' =
		    %% Line 193
		    [{{'get_name',2},[{'type',193,'bounded_fun',[{'type',193,'fun',[{'type',193,'product',[{'var',193,'Port'}|[{'var',193,'Pid'}]]}|[{'type',193,'union',[{'var',193,'Name'}|[{'atom',193,'undefined'}]]}]]}|[[{'type',194,'constraint',[{'atom',194,'is_subtype'}|[[{'var',194,'Port'}|[{'type',194,'mailbox',[]}]]]]}|[{'type',195,'constraint',[{'atom',195,'is_subtype'}|[[{'var',195,'Pid'}|[{'type',195,'mailbox_id',[]}]]]]}|[{'type',196,'constraint',[{'atom',196,'is_subtype'}|[[{'var',196,'Name'}|[{'type',196,'binary',[]}]]]]}]]]]]}]}],
		%% Line 221
		'spec' =
		    %% Line 221
		    [{{'hunt',2},[{'type',221,'bounded_fun',[{'type',221,'fun',[{'type',221,'product',[{'var',221,'Port'}|[{'var',221,'HuntPath'}]]}|[{'var',221,'Ref'}]]}|[[{'type',222,'constraint',[{'atom',222,'is_subtype'}|[[{'var',222,'Port'}|[{'type',222,'mailbox',[]}]]]]}|[{'type',223,'constraint',[{'atom',223,'is_subtype'}|[[{'var',223,'HuntPath'}|[{'type',223,'iodata',[]}]]]]}|[{'type',224,'constraint',[{'atom',224,'is_subtype'}|[[{'var',224,'Ref'}|[{'type',224,'hunt_ref',[]}]]]]}]]]]]}]}],
		%% Line 251
		'spec' =
		    %% Line 251
		    [{{'dehunt',2},[{'type',251,'bounded_fun',[{'type',251,'fun',[{'type',251,'product',[{'var',251,'Port'}|[{'var',251,'Ref'}]]}|[{'atom',251,'ok'}]]}|[[{'type',252,'constraint',[{'atom',252,'is_subtype'}|[[{'var',252,'Port'}|[{'type',252,'mailbox',[]}]]]]}|[{'type',253,'constraint',[{'atom',253,'is_subtype'}|[[{'var',253,'Ref'}|[{'type',253,'hunt_ref',[]}]]]]}]]]]}]}],
		%% Line 288
		'spec' =
		    %% Line 288
		    [{{'attach',2},[{'type',288,'bounded_fun',[{'type',288,'fun',[{'type',288,'product',[{'var',288,'Port'}|[{'var',288,'Pid'}]]}|[{'var',288,'Ref'}]]}|[[{'type',289,'constraint',[{'atom',289,'is_subtype'}|[[{'var',289,'Port'}|[{'type',289,'mailbox',[]}]]]]}|[{'type',290,'constraint',[{'atom',290,'is_subtype'}|[[{'var',290,'Pid'}|[{'type',290,'mailbox_id',[]}]]]]}|[{'type',291,'constraint',[{'atom',291,'is_subtype'}|[[{'var',291,'Ref'}|[{'type',291,'attach_ref',[]}]]]]}]]]]]}]}],
		%% Line 321
		'spec' =
		    %% Line 321
		    [{{'detach',2},[{'type',321,'bounded_fun',[{'type',321,'fun',[{'type',321,'product',[{'var',321,'Port'}|[{'var',321,'Ref'}]]}|[{'atom',321,'ok'}]]}|[[{'type',322,'constraint',[{'atom',322,'is_subtype'}|[[{'var',322,'Port'}|[{'type',322,'mailbox',[]}]]]]}|[{'type',323,'constraint',[{'atom',323,'is_subtype'}|[[{'var',323,'Ref'}|[{'type',323,'attach_ref',[]}]]]]}]]]]}]}],
		%% Line 355
		'spec' =
		    %% Line 355
		    [{{'send',4},[{'type',355,'bounded_fun',[{'type',355,'fun',[{'type',355,'product',[{'var',355,'Port'}|[{'var',355,'Pid'}|[{'var',355,'SigNo'}|[{'var',355,'SigData'}]]]]}|[{'atom',355,'ok'}]]}|[[{'type',356,'constraint',[{'atom',356,'is_subtype'}|[[{'var',356,'Port'}|[{'type',356,'mailbox',[]}]]]]}|[{'type',357,'constraint',[{'atom',357,'is_subtype'}|[[{'var',357,'Pid'}|[{'type',357,'mailbox_id',[]}]]]]}|[{'type',358,'constraint',[{'atom',358,'is_subtype'}|[[{'var',358,'SigNo'}|[{'type',358,'message_number',[]}]]]]}|[{'type',359,'constraint',[{'atom',359,'is_subtype'}|[[{'var',359,'SigData'}|[{'type',359,'iodata',[]}]]]]}]]]]]]}]}],
		%% Line 380
		'spec' =
		    %% Line 380
		    [{{'send',5},[{'type',380,'bounded_fun',[{'type',380,'fun',[{'type',380,'product',[{'var',380,'Port'}|[{'var',380,'Pid'}|[{'var',380,'SenderPid'}|[{'var',380,'SigNo'}|[{'var',380,'SigData'}]]]]]}|[{'atom',380,'ok'}]]}|[[{'type',381,'constraint',[{'atom',381,'is_subtype'}|[[{'var',381,'Port'}|[{'type',381,'mailbox',[]}]]]]}|[{'type',382,'constraint',[{'atom',382,'is_subtype'}|[[{'var',382,'Pid'}|[{'type',382,'mailbox_id',[]}]]]]}|[{'type',383,'constraint',[{'atom',383,'is_subtype'}|[[{'var',383,'SenderPid'}|[{'type',383,'mailbox_id',[]}]]]]}|[{'type',384,'constraint',[{'atom',384,'is_subtype'}|[[{'var',384,'SigNo'}|[{'type',384,'message_number',[]}]]]]}|[{'type',385,'constraint',[{'atom',385,'is_subtype'}|[[{'var',385,'SigData'}|[{'type',385,'iodata',[]}]]]]}]]]]]]]}]}],
		%% Line 422
		'spec' =
		    %% Line 422
		    [{{'listen',2},[{'type',422,'bounded_fun',[{'type',422,'fun',[{'type',422,'product',[{'var',422,'Port'}|[{'var',422,'SigNos'}]]}|[{'atom',422,'ok'}]]}|[[{'type',423,'constraint',[{'atom',423,'is_subtype'}|[[{'var',423,'Port'}|[{'type',423,'mailbox',[]}]]]]}|[{'type',424,'constraint',[{'atom',424,'is_subtype'}|[[{'var',424,'SigNos'}|[{'type',424,'list',[{'type',424,'message_number',[]}]}]]]]}]]]]}]}]]
'open'/1 =
    %% Line 117
    fun (_cor0) ->
	%% Line 118
	try
	    call 'erlang':'open_port'
		({'spawn_driver',[111|[115|[101|[95|[115|[105|[103|[110|[97|[108|[95|[100|[114|[118]]]]]]]]]]]]]]}, ['binary'])
	of <_cor1> ->
	    %% Line 120
	    try
		call 'erlang':'port_command'
		    (_cor1, [200|[_cor0|[]]])
	    of <_cor2> ->
		case _cor2 of
		  %% Line 121
		  <'true'> when 'true' ->
		      %% Line 122
		      receive
			%% Line 123
			<{'ose_drv_reply',_cor12,{'error',Error}}>
			    when call 'erlang':'=:='
				  (_cor12,
				   _cor1) ->
			    do  %% Line 124
				apply 'close'/1
				    (_cor1)
				%% Line 125
				call 'erlang':'error'
				    (Error, [_cor0|[]])
			%% Line 126
			<{'ose_drv_reply',_cor13,'ok'}>
			    when call 'erlang':'=:='
				  (_cor13,
				   _cor1) ->
			    _cor1
		      after 'infinity' ->
			'true'
		  ( <_cor3> when 'true' ->
			primop 'match_fail'
			    ({'try_clause',_cor3})
		    -| ['compiler_generated'] )
		end
	    catch <_cor6,_cor5,_cor4> ->
		case <_cor6,_cor5,_cor4> of
		  %% Line 130
		  <'error','badarg',_cor14> when 'true' ->
		      do  apply 'close'/1
			      (_cor1)
			  call 'erlang':'error'
			      ('badarg', [_cor0|[]])
		  ( <_cor6,_cor5,_cor4> when 'true' ->
			primop 'raise'
			    (_cor4, _cor5)
		    -| ['compiler_generated'] )
		end
	catch <_cor10,_cor9,_cor8> ->
	    case <_cor10,_cor9,_cor8> of
	      %% Line 133
	      <'error','badarg',_cor15> when 'true' ->
		  call 'erlang':'error'
		      ('badarg', [_cor0|[]])
	      ( <_cor10,_cor9,_cor8> when 'true' ->
		    primop 'raise'
			(_cor8, _cor9)
		-| ['compiler_generated'] )
	    end
'close'/1 =
    %% Line 149
    fun (_cor0) ->
	case _cor0 of
	  <Port>
	      when call 'erlang':'is_port'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 151
		  call 'erlang':'self'
		      ()
	      in  %% Line 151
		  case call 'erlang':'process_info'
			   (_cor1, 'trap_exit') of
		    %% Line 152
		    <{'trap_exit','true'}> when 'true' ->
			do  %% Line 153
			    call 'erlang':'link'
				(Port)
			    do  catch
				    %% Line 154
				    call 'erlang':'port_close'
					(Port)
				%% Line 155
				receive
				  <{'EXIT',_cor4,_cor5}>
				      when call 'erlang':'=:='
					    (_cor4,
					     Port) ->
				      'ok'
				after 'infinity' ->
				  'true'
		    %% Line 156
		    <{'trap_exit','false'}> when 'true' ->
			do  catch
				%% Line 157
				call 'erlang':'port_close'
				    (Port)
			    %% Line 158
			    'ok'
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	  %% Line 160
	  <NotPort> when 'true' ->
	      %% Line 161
	      call 'erlang':'error'
		  ('badarg', [NotPort|[]])
	end
'get_id'/1 =
    %% Line 175
    fun (_cor0) ->
	%% Line 176
	try
	    call 'erlang':'port_control'
		(_cor0, 1, #{}#)
	of <_cor1> ->
	    case ( _cor1
		   -| ['reuse_for_context'] ) of
	      %% Line 177
	      <#{#<Spid>(32,1,'integer',['unsigned'|['big']])}#> when 'true' ->
		  Spid
	      ( <_cor2> when 'true' ->
		    do  primop 'bs_context_to_binary'
			    (_cor2)
			primop 'match_fail'
			    ({'try_clause',_cor2})
		-| ['compiler_generated'] )
	    end
	catch <_cor5,_cor4,_cor3> ->
	    case <_cor5,_cor4,_cor3> of
	      %% Line 178
	      <'error',_X_Error,_cor7> when 'true' ->
		  %% Line 179
		  call 'erlang':'error'
		      ('badarg', [_cor0|[]])
	      ( <_cor5,_cor4,_cor3> when 'true' ->
		    primop 'raise'
			(_cor3, _cor4)
		-| ['compiler_generated'] )
	    end
'get_name'/2 =
    %% Line 197
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Port,Pid>
	      when try
		    ( case <> of
			( <>
			      when call 'erlang':'is_integer'
				    (Pid) ->
			      ( case <> of
				  ( <>
					when call 'erlang':'>='
					      (Pid,
					       0) ->
					call 'erlang':'<'
					    (Pid, 4294967296)
				    -| ['compiler_generated'] )
				  ( <> when 'true' ->
					'false'
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      'false'
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 198
	      try
		  let <_cor8> =
		      #{#<Pid>(32,1,'integer',['unsigned'|['big']])}#
		  in  call 'erlang':'port_control'
			  (Port, 2, _cor8)
	      of <_cor9> ->
		  case _cor9 of
		    %% Line 199
		    <[]> when 'true' ->
			'undefined'
		    %% Line 200
		    <Res> when 'true' ->
			Res
		  end
	      catch <_cor13,_cor12,_cor11> ->
		  case <_cor13,_cor12,_cor11> of
		    %% Line 201
		    <'error',_X_Error,_cor16> when 'true' ->
			%% Line 202
			call 'erlang':'error'
			    ('badarg', [Port|[Pid|[]]])
		    ( <_cor13,_cor12,_cor11> when 'true' ->
			  primop 'raise'
			      (_cor11, _cor12)
		      -| ['compiler_generated'] )
		  end
	  %% Line 204
	  <Port,Pid> when 'true' ->
	      %% Line 205
	      call 'erlang':'error'
		  ('badarg', [Port|[Pid|[]]])
	end
'hunt'/2 =
    %% Line 225
    fun (_cor1,_cor0) ->
	%% Line 226
	try
	    call 'erlang':'port_command'
		(_cor1, [100|[_cor0|[]]])
	of <_cor2> ->
	    case _cor2 of
	      %% Line 227
	      <'true'> when 'true' ->
		  %% Line 228
		  receive
		    %% Line 229
		    <{'ose_drv_reply',_cor9,{'error',Error}}>
			when call 'erlang':'=:='
			      (_cor9,
			       _cor1) ->
			%% Line 230
			call 'erlang':'error'
			    (Error, [_cor1|[_cor0|[]]])
		    %% Line 231
		    <{'ose_drv_reply',_cor10,Ref}>
			when call 'erlang':'=:='
			      (_cor10,
			       _cor1) ->
			%% Line 232
			Ref
		  after 'infinity' ->
		    'true'
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'try_clause',_cor3})
		-| ['compiler_generated'] )
	    end
	catch <_cor6,_cor5,_cor4> ->
	    case <_cor6,_cor5,_cor4> of
	      %% Line 234
	      <'error',_X_Error,_cor11> when 'true' ->
		  %% Line 235
		  call 'erlang':'error'
		      ('badarg', [_cor1|[_cor0|[]]])
	      ( <_cor6,_cor5,_cor4> when 'true' ->
		    primop 'raise'
			(_cor4, _cor5)
		-| ['compiler_generated'] )
	    end
'dehunt'/2 =
    %% Line 254
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Port,{_cor16,Ref}>
	      when let <_cor17> =
		    call 'erlang':'=:='
			(_cor16, Port)
		in  let <_cor18> =
			try
			    ( case <> of
				( <>
				      when call 'erlang':'is_integer'
					    (Ref) ->
				      ( case <> of
					  ( <>
						when call 'erlang':'>='
						      (Ref,
						       0) ->
						call 'erlang':'<'
						    (Ref, 4294967296)
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						'false'
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <> when 'true' ->
				      'false'
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  call 'erlang':'and'
			    (_cor17, _cor18) ->
	      %% Line 255
	      try
		  let <_cor8> =
		      #{#<101>(8,1,'integer',['unsigned'|['big']]),
			#<Ref>(32,1,'integer',['unsigned'|['big']])}#
		  in  call 'erlang':'port_command'
			  (Port, _cor8)
	      of <_cor9> ->
		  case _cor9 of
		    %% Line 256
		    <'true'> when 'true' ->
			%% Line 257
			receive
			  %% Line 258
			  <{'ose_drv_reply',_cor19,{'error','enoent'}}>
			      when call 'erlang':'=:='
				    (_cor19,
				     Port) ->
			      %% Line 260
			      receive
				%% Line 261
				<{'mailbox_up',_cor20,{_cor21,_cor22},_cor23}>
				    when let <_cor26> =
					  call 'erlang':'=:='
					      (_cor20, Port)
				      in  let <_cor24> =
					      call 'erlang':'=:='
						  (_cor21, Port)
					  in  let <_cor25> =
						  call 'erlang':'=:='
						      (_cor22, Ref)
					      in  let <_cor27> =
						      call 'erlang':'and'
							  (_cor24, _cor25)
						  in  call 'erlang':'and'
							  (_cor26, _cor27) ->
				    %% Line 262
				    'ok'
			      after %% Line 263
				    0 ->
				%% Line 264
				'ok'
			  %% Line 266
			  <{'ose_drv_reply',_cor28,'ok'}>
			      when call 'erlang':'=:='
				    (_cor28,
				     Port) ->
			      %% Line 267
			      'ok'
			after 'infinity' ->
			  'true'
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'try_clause',_cor10})
		      -| ['compiler_generated'] )
		  end
	      catch <_cor13,_cor12,_cor11> ->
		  case <_cor13,_cor12,_cor11> of
		    %% Line 269
		    <'error',_X_Error,_cor29> when 'true' ->
			%% Line 270
			call 'erlang':'error'
			    ('badarg', [Port|[{Port,Ref}|[]]])
		    ( <_cor13,_cor12,_cor11> when 'true' ->
			  primop 'raise'
			      (_cor11, _cor12)
		      -| ['compiler_generated'] )
		  end
	  %% Line 272
	  <Port,Ref> when 'true' ->
	      %% Line 273
	      call 'erlang':'error'
		  ('badarg', [Port|[Ref|[]]])
	end
'attach'/2 =
    %% Line 292
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Port,Spid>
	      when try
		    ( case <> of
			( <>
			      when call 'erlang':'is_integer'
				    (Spid) ->
			      ( case <> of
				  ( <>
					when call 'erlang':'>='
					      (Spid,
					       0) ->
					call 'erlang':'<'
					    (Spid, 4294967296)
				    -| ['compiler_generated'] )
				  ( <> when 'true' ->
					'false'
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      'false'
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 293
	      try
		  let <_cor8> =
		      #{#<102>(8,1,'integer',['unsigned'|['big']]),
			#<Spid>(32,1,'integer',['unsigned'|['big']])}#
		  in  call 'erlang':'port_command'
			  (Port, _cor8)
	      of <_cor9> ->
		  case _cor9 of
		    %% Line 294
		    <'true'> when 'true' ->
			%% Line 295
			receive
			  %% Line 296
			  <{'ose_drv_reply',_cor16,{'error',Error}}>
			      when call 'erlang':'=:='
				    (_cor16,
				     Port) ->
			      %% Line 297
			      call 'erlang':'error'
				  (Error, [Port|[Spid|[]]])
			  %% Line 298
			  <{'ose_drv_reply',_cor17,Ref}>
			      when call 'erlang':'=:='
				    (_cor17,
				     Port) ->
			      %% Line 299
			      Ref
			after 'infinity' ->
			  'true'
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'try_clause',_cor10})
		      -| ['compiler_generated'] )
		  end
	      catch <_cor13,_cor12,_cor11> ->
		  case <_cor13,_cor12,_cor11> of
		    %% Line 301
		    <'error',_X_Error,_cor18> when 'true' ->
			%% Line 302
			call 'erlang':'error'
			    ('badarg', [Port|[Spid|[]]])
		    ( <_cor13,_cor12,_cor11> when 'true' ->
			  primop 'raise'
			      (_cor11, _cor12)
		      -| ['compiler_generated'] )
		  end
	  %% Line 304
	  <Port,Spid> when 'true' ->
	      %% Line 305
	      call 'erlang':'error'
		  ('badarg', [Port|[Spid|[]]])
	end
'detach'/2 =
    %% Line 324
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Port,{_cor16,Ref}>
	      when let <_cor17> =
		    call 'erlang':'=:='
			(_cor16, Port)
		in  let <_cor18> =
			try
			    ( case <> of
				( <>
				      when call 'erlang':'is_integer'
					    (Ref) ->
				      ( case <> of
					  ( <>
						when call 'erlang':'>='
						      (Ref,
						       0) ->
						call 'erlang':'<'
						    (Ref, 4294967296)
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						'false'
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <> when 'true' ->
				      'false'
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  call 'erlang':'and'
			    (_cor17, _cor18) ->
	      %% Line 325
	      try
		  let <_cor8> =
		      #{#<103>(8,1,'integer',['unsigned'|['big']]),
			#<Ref>(32,1,'integer',['unsigned'|['big']])}#
		  in  call 'erlang':'port_command'
			  (Port, _cor8)
	      of <_cor9> ->
		  case _cor9 of
		    %% Line 326
		    <'true'> when 'true' ->
			%% Line 327
			receive
			  %% Line 328
			  <{'ose_drv_reply',_cor19,{'error','enoent'}}>
			      when call 'erlang':'=:='
				    (_cor19,
				     Port) ->
			      %% Line 330
			      receive
				%% Line 331
				<{'mailbox_down',_cor20,{_cor21,_cor22},_cor23}>
				    when let <_cor26> =
					  call 'erlang':'=:='
					      (_cor20, Port)
				      in  let <_cor24> =
					      call 'erlang':'=:='
						  (_cor21, Port)
					  in  let <_cor25> =
						  call 'erlang':'=:='
						      (_cor22, Ref)
					      in  let <_cor27> =
						      call 'erlang':'and'
							  (_cor24, _cor25)
						  in  call 'erlang':'and'
							  (_cor26, _cor27) ->
				    %% Line 332
				    'ok'
			      after %% Line 333
				    0 ->
				%% Line 334
				'ok'
			  %% Line 336
			  <{'ose_drv_reply',_cor28,'ok'}>
			      when call 'erlang':'=:='
				    (_cor28,
				     Port) ->
			      %% Line 337
			      'ok'
			after 'infinity' ->
			  'true'
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'try_clause',_cor10})
		      -| ['compiler_generated'] )
		  end
	      catch <_cor13,_cor12,_cor11> ->
		  case <_cor13,_cor12,_cor11> of
		    %% Line 339
		    <'error',_X_Error,_cor29> when 'true' ->
			%% Line 340
			call 'erlang':'error'
			    ('badarg', [Port|[{Port,Ref}|[]]])
		    ( <_cor13,_cor12,_cor11> when 'true' ->
			  primop 'raise'
			      (_cor11, _cor12)
		      -| ['compiler_generated'] )
		  end
	  %% Line 342
	  <Port,Ref> when 'true' ->
	      %% Line 343
	      call 'erlang':'error'
		  ('badarg', [Port|[Ref|[]]])
	end
'send'/4 =
    %% Line 360
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Port,Spid,SigNo,SigData>
	      when try
		    ( let <_cor9> =
			  ( case <> of
			      ( <>
				    when ( call 'erlang':'is_integer'
					    (Spid)
					-| ['compiler_generated'] ) ->
				    ( case <> of
					( <>
					      when ( call 'erlang':'>='
						      (Spid,
						       0)
						  -| ['compiler_generated'] ) ->
					      ( call 'erlang':'<'
						    (Spid, 4294967296)
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      'false'
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    'false'
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      in  ( let <_cor16> =
				( case <> of
				    ( <>
					  when ( call 'erlang':'is_integer'
						  (SigNo)
					      -| ['compiler_generated'] ) ->
					  ( case <> of
					      ( <>
						    when ( call 'erlang':'>='
							    (SigNo,
							     0)
							-| ['compiler_generated'] ) ->
						    ( call 'erlang':'<'
							  (SigNo, 4294967296)
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <> when 'true' ->
						    'false'
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  'false'
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    in  ( call 'erlang':'and'
				      (( _cor9
					 -| ['compiler_generated'] ), ( _cor16
									-| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 361
	      try
		  let <_cor18> =
		      #{#<104>(8,1,'integer',['unsigned'|['big']]),
			#<Spid>(32,1,'integer',['unsigned'|['big']]),
			#<SigNo>(32,1,'integer',['unsigned'|['big']])}#
		  in  call 'erlang':'port_command'
			  (Port, [_cor18|[SigData|[]]])
	      of <_cor19> ->
		  case _cor19 of
		    %% Line 362
		    <'true'> when 'true' ->
			'ok'
		    ( <_cor20> when 'true' ->
			  primop 'match_fail'
			      ({'try_clause',_cor20})
		      -| ['compiler_generated'] )
		  end
	      catch <_cor23,_cor22,_cor21> ->
		  case <_cor23,_cor22,_cor21> of
		    %% Line 363
		    <'error',_X_Error,_cor28> when 'true' ->
			%% Line 364
			call 'erlang':'error'
			    ('badarg', [Port|[Spid|[SigNo|[SigData|[]]]]])
		    ( <_cor23,_cor22,_cor21> when 'true' ->
			  primop 'raise'
			      (_cor21, _cor22)
		      -| ['compiler_generated'] )
		  end
	  %% Line 366
	  <Port,Spid,SigNo,SigData> when 'true' ->
	      %% Line 367
	      call 'erlang':'error'
		  ('badarg', [Port|[Spid|[SigNo|[SigData|[]]]]])
	end
'send'/5 =
    %% Line 386
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Port,Spid,SenderPid,SigNo,SigData>
	      when %% Line 387
		try
		    ( let <_cor10> =
			  ( case <> of
			      ( <>
				    when ( call 'erlang':'is_integer'
					    (Spid)
					-| ['compiler_generated'] ) ->
				    ( case <> of
					( <>
					      when ( call 'erlang':'>='
						      (Spid,
						       0)
						  -| ['compiler_generated'] ) ->
					      ( call 'erlang':'<'
						    (Spid, 4294967296)
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      'false'
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    'false'
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      in  ( let <_cor17> =
				( case <> of
				    ( <>
					  when ( call 'erlang':'is_integer'
						  (SenderPid)
					      -| ['compiler_generated'] ) ->
					  ( case <> of
					      ( <>
						    when ( call 'erlang':'>='
							    (SenderPid,
							     0)
							-| ['compiler_generated'] ) ->
						    ( call 'erlang':'<'
							  (SenderPid, 4294967296)
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					      ( <> when 'true' ->
						    'false'
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  'false'
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    in  ( let <_cor24> =
				      ( case <> of
					  ( <>
						when ( call 'erlang':'is_integer'
							(SigNo)
						    -| ['compiler_generated'] ) ->
						( case <> of
						    ( <>
							  when ( call 'erlang':'>='
								  (SigNo,
								   0)
							      -| ['compiler_generated'] ) ->
							  ( call 'erlang':'<'
								(SigNo, 4294967296)
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						    ( <> when 'true' ->
							  'false'
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						'false'
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  in  let <_cor26> =
					  ( call 'erlang':'and'
						(( _cor17
						   -| ['compiler_generated'] ), ( _cor24
										  -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      in  ( call 'erlang':'and'
						(( _cor10
						   -| ['compiler_generated'] ), _cor26)
					    -| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 388
	      try
		  let <_cor27> =
		      #{#<105>(8,1,'integer',['unsigned'|['big']]),
			#<Spid>(32,1,'integer',['unsigned'|['big']]),
			#<SenderPid>(32,1,'integer',['unsigned'|['big']]),
			#<%% Line 389
			  SigNo>(%% Line 389
				 32,1,'integer',['unsigned'|['big']])}#
		  in  call 'erlang':'port_command'
			  (Port, [_cor27|%% Line 389
					 [SigData|[]]])
	      of <_cor28> ->
		  case _cor28 of
		    %% Line 390
		    <'true'> when 'true' ->
			'ok'
		    ( <_cor29> when 'true' ->
			  primop 'match_fail'
			      ({'try_clause',_cor29})
		      -| ['compiler_generated'] )
		  end
	      catch <_cor32,_cor31,_cor30> ->
		  case <_cor32,_cor31,_cor30> of
		    %% Line 391
		    <'error',_X_Error,_cor38> when 'true' ->
			%% Line 392
			call 'erlang':'error'
			    ('badarg', [Port|[Spid|[SenderPid|[SigNo|[SigData|[]]]]]])
		    ( <_cor32,_cor31,_cor30> when 'true' ->
			  primop 'raise'
			      (_cor30, _cor31)
		      -| ['compiler_generated'] )
		  end
	  %% Line 394
	  <Port,Spid,SenderPid,SigNo,SigData> when 'true' ->
	      %% Line 395
	      call 'erlang':'error'
		  ('badarg', [Port|[Spid|[SenderPid|[SigNo|[SigData|[]]]]]])
	end
'listen'/2 =
    %% Line 425
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Port,SigNos>
	      when call 'erlang':'is_list'
		    (SigNos) ->
	      let <USSigNos> =
		  %% Line 426
		  call 'lists':'usort'
		      (SigNos)
	      in  let <_cor22> =
		      %% Line 427
		      try
			  let <_cor3> =
			      primop 'bs_init_writable'
				  (256)
			  in  %% Line 428
			      ( letrec
				    'lbc$^0'/2 =
					fun (_cor16,_cor15) ->
					    case <_cor16,_cor15> of
					      <[%% Line 429
						SigNo|_cor5],_cor15> when 'true' ->
						  let <_cor12> =
						      %% Line 430
						      ( case <> of
							  ( <>
								when call 'erlang':'is_integer'
								      (SigNo) ->
								( case <> of
								    ( <>
									  when call 'erlang':'>='
										(SigNo,
										 0) ->
									  call 'erlang':'<'
									      (SigNo, 4294967296)
								      -| ['compiler_generated'] )
								    ( <> when 'true' ->
									  'false'
								      -| ['compiler_generated'] )
								  end
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							  ( <> when 'true' ->
								'false'
							    -| ['compiler_generated'] )
							end
							-| ['compiler_generated'] )
						  in  let <_cor14> =
							  %% Line 430
							  ( case _cor12 of
							      ( <( 'true'
								   -| ['compiler_generated'] )> when 'true' ->
								    'true'
								-| ['compiler_generated'] )
							      ( <( 'false'
								   -| ['compiler_generated'] )> when 'true' ->
								    call 'erlang':'error'
									('badarg')
								-| ['compiler_generated'] )
							      ( <_cor6> when 'true' ->
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'error'
													   -| ['compiler_generated'] )
									  (( {( 'badarg'
										-| ['compiler_generated'] ),_cor6}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
						      in  let <_cor15> =
							      %% Line 430
							      ( case _cor14 of
								  <'true'> when 'true' ->
								      ( #{#<_cor15>('all',1,'binary',[]),
									  #<SigNo>(32,1,'integer',['unsigned'|['big']])}#
									-| ['compiler_generated','single_use'] )
								  ( <'false'> when 'true' ->
									_cor15
								    -| ['compiler_generated'] )
								  ( <_cor17> when 'true' ->
									primop 'match_fail'
									    ({'case_clause',_cor17})
								    -| ['compiler_generated'] )
								end
								-| ['list_comprehension'] )
							  in  %% Line 429
							      apply 'lbc$^0'/2
								  (_cor5, _cor15)
					      <[],_cor15> when 'true' ->
						  _cor15
					      ( <_cor16,_cor15> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor16,_cor15})
						      -| [{'function_name',{'lbc$^0',2}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lbc$^0'/2
					(%% Line 429
					 USSigNos, _cor3)
				-| ['list_comprehension'] )
		      of <_cor18> ->
			  _cor18
		      catch <_cor21,_cor20,_cor19> ->
			  %% Line 433
			  call 'erlang':'error'
			      ('badarg', [Port|[SigNos|[]]])
		  in  %% Line 435
		      try
			  call 'erlang':'port_command'
			      (Port, [106|[_cor22|[]]])
		      of <_cor24> ->
			  case _cor24 of
			    %% Line 436
			    <'true'> when 'true' ->
				%% Line 437
				receive
				  %% Line 438
				  <{'ose_drv_reply',_cor34,{'error',Error}}>
				      when call 'erlang':'=:='
					    (_cor34,
					     Port) ->
				      %% Line 439
				      call 'erlang':'error'
					  (Error, [Port|[SigNos|[]]])
				  %% Line 440
				  <{'ose_drv_reply',_cor35,Else}>
				      when call 'erlang':'=:='
					    (_cor35,
					     Port) ->
				      %% Line 441
				      Else
				after 'infinity' ->
				  'true'
			    ( <_cor25> when 'true' ->
				  primop 'match_fail'
				      ({'try_clause',_cor25})
			      -| ['compiler_generated'] )
			  end
		      catch <_cor28,_cor27,_cor26> ->
			  case <_cor28,_cor27,_cor26> of
			    %% Line 443
			    <'error',_X_Error,_cor36> when 'true' ->
				%% Line 444
				call 'erlang':'error'
				    ('badarg', [Port|[SigNos|[]]])
			    ( <_cor28,_cor27,_cor26> when 'true' ->
				  primop 'raise'
				      (_cor26, _cor27)
			      -| ['compiler_generated'] )
			  end
	  %% Line 446
	  <Port,SigNos> when 'true' ->
	      %% Line 447
	      call 'erlang':'error'
		  ('badarg', [Port|[SigNos|[]]])
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('ose')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('ose', _cor0)
end