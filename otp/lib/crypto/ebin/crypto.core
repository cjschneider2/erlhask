module 'crypto' ['aes_cbc_128_decrypt'/3,
		 'aes_cbc_128_encrypt'/3,
		 'aes_cbc_256_decrypt'/3,
		 'aes_cbc_256_encrypt'/3,
		 'aes_cbc_ivec'/1,
		 'aes_cfb_128_decrypt'/3,
		 'aes_cfb_128_encrypt'/3,
		 'aes_ctr_decrypt'/3,
		 'aes_ctr_encrypt'/3,
		 'aes_ctr_stream_decrypt'/2,
		 'aes_ctr_stream_encrypt'/2,
		 'aes_ctr_stream_init'/2,
		 'block_decrypt'/3,
		 'block_decrypt'/4,
		 'block_encrypt'/3,
		 'block_encrypt'/4,
		 'blowfish_cbc_decrypt'/3,
		 'blowfish_cbc_encrypt'/3,
		 'blowfish_cfb64_decrypt'/3,
		 'blowfish_cfb64_encrypt'/3,
		 'blowfish_ecb_decrypt'/2,
		 'blowfish_ecb_encrypt'/2,
		 'blowfish_ofb64_encrypt'/3,
		 'bytes_to_integer'/1,
		 'compute_key'/4,
		 'des3_cbc_decrypt'/5,
		 'des3_cbc_encrypt'/5,
		 'des3_cfb_decrypt'/5,
		 'des3_cfb_encrypt'/5,
		 'des_cbc_decrypt'/3,
		 'des_cbc_encrypt'/3,
		 'des_cbc_ivec'/1,
		 'des_cfb_decrypt'/3,
		 'des_cfb_encrypt'/3,
		 'des_cfb_ivec'/2,
		 'des_ecb_decrypt'/2,
		 'des_ecb_encrypt'/2,
		 'des_ede3_cbc_decrypt'/5,
		 'des_ede3_cbc_encrypt'/5,
		 'dh_check'/1,
		 'dh_compute_key'/3,
		 'dh_generate_key'/1,
		 'dh_generate_key'/2,
		 'dh_generate_parameters'/2,
		 'dss_sign'/2,
		 'dss_sign'/3,
		 'dss_verify'/3,
		 'dss_verify'/4,
		 'ec_curve'/1,
		 'ec_curves'/0,
		 'erlint'/1,
		 'exor'/2,
		 'generate_key'/2,
		 'generate_key'/3,
		 'hash'/2,
		 'hash_final'/1,
		 'hash_init'/1,
		 'hash_update'/2,
		 'hmac'/3,
		 'hmac'/4,
		 'hmac_final'/1,
		 'hmac_final_n'/2,
		 'hmac_init'/2,
		 'hmac_update'/2,
		 'info'/0,
		 'info_lib'/0,
		 'md4'/1,
		 'md4_final'/1,
		 'md4_init'/0,
		 'md4_update'/2,
		 'md5'/1,
		 'md5_final'/1,
		 'md5_init'/0,
		 'md5_mac'/2,
		 'md5_mac_96'/2,
		 'md5_update'/2,
		 'mod_exp'/3,
		 'mod_pow'/3,
		 'module_info'/0,
		 'module_info'/1,
		 'mpint'/1,
		 'next_iv'/2,
		 'next_iv'/3,
		 'private_decrypt'/4,
		 'private_encrypt'/4,
		 'public_decrypt'/4,
		 'public_encrypt'/4,
		 'rand_bytes'/1,
		 'rand_bytes'/3,
		 'rand_seed'/1,
		 'rand_uniform'/2,
		 'rc2_40_cbc_decrypt'/3,
		 'rc2_40_cbc_encrypt'/3,
		 'rc2_cbc_decrypt'/3,
		 'rc2_cbc_encrypt'/3,
		 'rc4_encrypt'/2,
		 'rc4_encrypt_with_state'/2,
		 'rc4_set_key'/1,
		 'rsa_private_decrypt'/3,
		 'rsa_private_encrypt'/3,
		 'rsa_public_decrypt'/3,
		 'rsa_public_encrypt'/3,
		 'rsa_sign'/2,
		 'rsa_sign'/3,
		 'rsa_verify'/3,
		 'rsa_verify'/4,
		 'sha'/1,
		 'sha_final'/1,
		 'sha_init'/0,
		 'sha_mac'/2,
		 'sha_mac'/3,
		 'sha_mac_96'/2,
		 'sha_update'/2,
		 'sign'/4,
		 'start'/0,
		 'stop'/0,
		 'stream_decrypt'/2,
		 'stream_encrypt'/2,
		 'stream_init'/2,
		 'stream_init'/3,
		 'strong_rand_bytes'/1,
		 'strong_rand_mpint'/3,
		 'supports'/0,
		 'verify'/5,
		 'version'/0]
    attributes [%% Line 45
		'deprecated' =
		    %% Line 45
		    [{'md4',1,'next_major_release'}],
		%% Line 46
		'deprecated' =
		    %% Line 46
		    [{'md5',1,'next_major_release'}],
		%% Line 47
		'deprecated' =
		    %% Line 47
		    [{'sha',1,'next_major_release'}],
		%% Line 48
		'deprecated' =
		    %% Line 48
		    [{'md4_init',0,'next_major_release'}],
		%% Line 49
		'deprecated' =
		    %% Line 49
		    [{'md5_init',0,'next_major_release'}],
		%% Line 50
		'deprecated' =
		    %% Line 50
		    [{'sha_init',0,'next_major_release'}],
		%% Line 51
		'deprecated' =
		    %% Line 51
		    [{'md4_update',2,'next_major_release'}],
		%% Line 52
		'deprecated' =
		    %% Line 52
		    [{'md5_update',2,'next_major_release'}],
		%% Line 53
		'deprecated' =
		    %% Line 53
		    [{'sha_update',2,'next_major_release'}],
		%% Line 54
		'deprecated' =
		    %% Line 54
		    [{'md4_final',1,'next_major_release'}],
		%% Line 55
		'deprecated' =
		    %% Line 55
		    [{'md5_final',1,'next_major_release'}],
		%% Line 56
		'deprecated' =
		    %% Line 56
		    [{'sha_final',1,'next_major_release'}],
		%% Line 60
		'deprecated' =
		    %% Line 60
		    [{'md5_mac',2,'next_major_release'}],
		%% Line 61
		'deprecated' =
		    %% Line 61
		    [{'md5_mac_96',2,'next_major_release'}],
		%% Line 62
		'deprecated' =
		    %% Line 62
		    [{'sha_mac',2,'next_major_release'}],
		%% Line 63
		'deprecated' =
		    %% Line 63
		    [{'sha_mac',3,'next_major_release'}],
		%% Line 64
		'deprecated' =
		    %% Line 64
		    [{'sha_mac_96',2,'next_major_release'}],
		%% Line 69
		'deprecated' =
		    %% Line 69
		    [{'dss_verify',3,'next_major_release'}],
		%% Line 70
		'deprecated' =
		    %% Line 70
		    [{'dss_verify',4,'next_major_release'}],
		%% Line 71
		'deprecated' =
		    %% Line 71
		    [{'rsa_verify',3,'next_major_release'}],
		%% Line 72
		'deprecated' =
		    %% Line 72
		    [{'rsa_verify',4,'next_major_release'}],
		%% Line 73
		'deprecated' =
		    %% Line 73
		    [{'dss_sign',2,'next_major_release'}],
		%% Line 74
		'deprecated' =
		    %% Line 74
		    [{'dss_sign',3,'next_major_release'}],
		%% Line 75
		'deprecated' =
		    %% Line 75
		    [{'rsa_sign',2,'next_major_release'}],
		%% Line 76
		'deprecated' =
		    %% Line 76
		    [{'rsa_sign',3,'next_major_release'}],
		%% Line 80
		'deprecated' =
		    %% Line 80
		    [{'dh_generate_key',1,'next_major_release'}],
		%% Line 81
		'deprecated' =
		    %% Line 81
		    [{'dh_generate_key',2,'next_major_release'}],
		%% Line 82
		'deprecated' =
		    %% Line 82
		    [{'dh_compute_key',3,'next_major_release'}],
		%% Line 86
		'deprecated' =
		    %% Line 86
		    [{'mod_exp',3,'next_major_release'}],
		%% Line 87
		'deprecated' =
		    %% Line 87
		    [{'mpint',1,'next_major_release'}],
		%% Line 88
		'deprecated' =
		    %% Line 88
		    [{'erlint',1,'next_major_release'}],
		%% Line 89
		'deprecated' =
		    %% Line 89
		    [{'strong_rand_mpint',3,'next_major_release'}],
		%% Line 98
		'deprecated' =
		    %% Line 98
		    [{'des_cbc_encrypt',3,'next_major_release'}],
		%% Line 99
		'deprecated' =
		    %% Line 99
		    [{'des_cbc_decrypt',3,'next_major_release'}],
		%% Line 100
		'deprecated' =
		    %% Line 100
		    [{'des_cbc_ivec',1,'next_major_release'}],
		%% Line 101
		'deprecated' =
		    %% Line 101
		    [{'des3_cbc_encrypt',5,'next_major_release'}],
		%% Line 102
		'deprecated' =
		    %% Line 102
		    [{'des3_cbc_decrypt',5,'next_major_release'}],
		%% Line 103
		'deprecated' =
		    %% Line 103
		    [{'des_ecb_encrypt',2,'next_major_release'}],
		%% Line 104
		'deprecated' =
		    %% Line 104
		    [{'des_ecb_decrypt',2,'next_major_release'}],
		%% Line 105
		'deprecated' =
		    %% Line 105
		    [{'des_ede3_cbc_encrypt',5,'next_major_release'}],
		%% Line 106
		'deprecated' =
		    %% Line 106
		    [{'des_ede3_cbc_decrypt',5,'next_major_release'}],
		%% Line 107
		'deprecated' =
		    %% Line 107
		    [{'des_cfb_encrypt',3,'next_major_release'}],
		%% Line 108
		'deprecated' =
		    %% Line 108
		    [{'des_cfb_decrypt',3,'next_major_release'}],
		%% Line 109
		'deprecated' =
		    %% Line 109
		    [{'des_cfb_ivec',2,'next_major_release'}],
		%% Line 110
		'deprecated' =
		    %% Line 110
		    [{'des3_cfb_encrypt',5,'next_major_release'}],
		%% Line 111
		'deprecated' =
		    %% Line 111
		    [{'des3_cfb_decrypt',5,'next_major_release'}],
		%% Line 116
		'deprecated' =
		    %% Line 116
		    [{'blowfish_ecb_encrypt',2,'next_major_release'}],
		%% Line 117
		'deprecated' =
		    %% Line 117
		    [{'blowfish_ecb_decrypt',2,'next_major_release'}],
		%% Line 118
		'deprecated' =
		    %% Line 118
		    [{'blowfish_cbc_encrypt',3,'next_major_release'}],
		%% Line 119
		'deprecated' =
		    %% Line 119
		    [{'blowfish_cbc_decrypt',3,'next_major_release'}],
		%% Line 120
		'deprecated' =
		    %% Line 120
		    [{'blowfish_cfb64_encrypt',3,'next_major_release'}],
		%% Line 121
		'deprecated' =
		    %% Line 121
		    [{'blowfish_cfb64_decrypt',3,'next_major_release'}],
		%% Line 122
		'deprecated' =
		    %% Line 122
		    [{'blowfish_ofb64_encrypt',3,'next_major_release'}],
		%% Line 127
		'deprecated' =
		    %% Line 127
		    [{'aes_cfb_128_encrypt',3,'next_major_release'}],
		%% Line 128
		'deprecated' =
		    %% Line 128
		    [{'aes_cfb_128_decrypt',3,'next_major_release'}],
		%% Line 129
		'deprecated' =
		    %% Line 129
		    [{'aes_cbc_128_encrypt',3,'next_major_release'}],
		%% Line 130
		'deprecated' =
		    %% Line 130
		    [{'aes_cbc_128_decrypt',3,'next_major_release'}],
		%% Line 131
		'deprecated' =
		    %% Line 131
		    [{'aes_cbc_256_encrypt',3,'next_major_release'}],
		%% Line 132
		'deprecated' =
		    %% Line 132
		    [{'aes_cbc_256_decrypt',3,'next_major_release'}],
		%% Line 133
		'deprecated' =
		    %% Line 133
		    [{'aes_cbc_ivec',1,'next_major_release'}],
		%% Line 136
		'deprecated' =
		    %% Line 136
		    [{'rc2_cbc_encrypt',3,'next_major_release'}],
		%% Line 137
		'deprecated' =
		    %% Line 137
		    [{'rc2_cbc_decrypt',3,'next_major_release'}],
		%% Line 139
		'deprecated' =
		    %% Line 139
		    [{'rc2_40_cbc_encrypt',3,'next_major_release'}],
		%% Line 140
		'deprecated' =
		    %% Line 140
		    [{'rc2_40_cbc_decrypt',3,'next_major_release'}],
		%% Line 145
		'deprecated' =
		    %% Line 145
		    [{'aes_ctr_stream_init',2,'next_major_release'}],
		%% Line 146
		'deprecated' =
		    %% Line 146
		    [{'aes_ctr_stream_encrypt',2,'next_major_release'}],
		%% Line 147
		'deprecated' =
		    %% Line 147
		    [{'aes_ctr_stream_decrypt',2,'next_major_release'}],
		%% Line 148
		'deprecated' =
		    %% Line 148
		    [{'rc4_set_key',1,'next_major_release'}],
		%% Line 149
		'deprecated' =
		    %% Line 149
		    [{'rc4_encrypt_with_state',2,'next_major_release'}],
		%% Line 153
		'deprecated' =
		    %% Line 153
		    [{'aes_ctr_encrypt',3,'next_major_release'}],
		%% Line 154
		'deprecated' =
		    %% Line 154
		    [{'aes_ctr_decrypt',3,'next_major_release'}],
		%% Line 155
		'deprecated' =
		    %% Line 155
		    [{'rc4_encrypt',2,'next_major_release'}],
		%% Line 160
		'deprecated' =
		    %% Line 160
		    [{'rsa_public_encrypt',3,'next_major_release'}],
		%% Line 161
		'deprecated' =
		    %% Line 161
		    [{'rsa_private_decrypt',3,'next_major_release'}],
		%% Line 162
		'deprecated' =
		    %% Line 162
		    [{'rsa_public_decrypt',3,'next_major_release'}],
		%% Line 163
		'deprecated' =
		    %% Line 163
		    [{'rsa_private_encrypt',3,'next_major_release'}],
		%% Line 167
		'deprecated' =
		    %% Line 167
		    [{'info',0,'next_major_release'}],
		%% Line 172
		'type' =
		    %% Line 172
		    [{'mpint',{'type',172,'binary',[]},[]}],
		%% Line 173
		'type' =
		    %% Line 173
		    [{'rsa_digest_type',{'type',173,'union',[{'atom',173,'md5'}|[{'atom',173,'sha'}|[{'atom',173,'sha224'}|[{'atom',173,'sha256'}|[{'atom',173,'sha384'}|[{'atom',173,'sha512'}]]]]]]},[]}],
		%% Line 174
		'type' =
		    %% Line 174
		    [{'dss_digest_type',{'type',174,'union',[{'atom',174,'none'}|[{'atom',174,'sha'}]]},[]}],
		%% Line 176
		'type' =
		    %% Line 176
		    [{'data_or_digest',{'type',176,'union',[{'type',176,'binary',[]}|[{'type',176,'tuple',[{'atom',176,'digest'}|[{'type',176,'binary',[]}]]}]]},[]}],
		%% Line 177
		'type' =
		    %% Line 177
		    [{'crypto_integer',{'type',177,'union',[{'type',177,'binary',[]}|[{'type',177,'integer',[]}]]},[]}],
		%% Line 187
		'on_load' =
		    %% Line 187
		    [{'on_load',0}],
		%% Line 220
		'spec' =
		    %% Line 220
		    [{{'hash',2},[{'type',220,'fun',[{'type',220,'product',[{'var',220,'_'}|[{'type',220,'iodata',[]}]]}|[{'type',220,'binary',[]}]]}]}],
		%% Line 227
		'spec' =
		    %% Line 227
		    [{{'hash_init',1},[{'type',227,'fun',[{'type',227,'product',[{'type',227,'union',[{'atom',227,'md5'}|[{'atom',227,'md4'}|[{'atom',227,'ripemd160'}|[{'atom',228,'sha'}|[{'atom',228,'sha224'}|[{'atom',228,'sha256'}|[{'atom',228,'sha384'}|[{'atom',228,'sha512'}]]]]]]]]}]}|[{'type',228,'any',[]}]]}]}],
		%% Line 239
		'spec' =
		    %% Line 239
		    [{{'hash_update',2},[{'type',239,'fun',[{'type',239,'product',[{'var',239,'_'}|[{'type',239,'iodata',[]}]]}|[{'type',239,'any',[]}]]}]}],
		%% Line 246
		'spec' =
		    %% Line 246
		    [{{'hash_final',1},[{'type',246,'fun',[{'type',246,'product',[{'var',246,'_'}]}|[{'type',246,'binary',[]}]]}]}],
		%% Line 258
		'spec' =
		    %% Line 258
		    [{{'hmac',3},[{'type',258,'fun',[{'type',258,'product',[{'var',258,'_'}|[{'type',258,'iodata',[]}|[{'type',258,'iodata',[]}]]]}|[{'type',258,'binary',[]}]]}]}],
		%% Line 259
		'spec' =
		    %% Line 259
		    [{{'hmac',4},[{'type',259,'fun',[{'type',259,'product',[{'var',259,'_'}|[{'type',259,'iodata',[]}|[{'type',259,'iodata',[]}|[{'type',259,'integer',[]}]]]]}|[{'type',259,'binary',[]}]]}]}],
		%% Line 260
		'spec' =
		    %% Line 260
		    [{{'hmac_init',2},[{'type',260,'fun',[{'type',260,'product',[{'type',260,'atom',[]}|[{'type',260,'iodata',[]}]]}|[{'type',260,'binary',[]}]]}]}],
		%% Line 261
		'spec' =
		    %% Line 261
		    [{{'hmac_update',2},[{'type',261,'fun',[{'type',261,'product',[{'type',261,'binary',[]}|[{'type',261,'iodata',[]}]]}|[{'type',261,'binary',[]}]]}]}],
		%% Line 262
		'spec' =
		    %% Line 262
		    [{{'hmac_final',1},[{'type',262,'fun',[{'type',262,'product',[{'type',262,'binary',[]}]}|[{'type',262,'binary',[]}]]}]}],
		%% Line 263
		'spec' =
		    %% Line 263
		    [{{'hmac_final_n',2},[{'type',263,'fun',[{'type',263,'product',[{'type',263,'binary',[]}|[{'type',263,'integer',[]}]]}|[{'type',263,'binary',[]}]]}]}],
		%% Line 283
		'spec' =
		    %% Line 283
		    [{{'block_encrypt',4},[{'type',283,'fun',[{'type',283,'product',[{'type',283,'union',[{'atom',283,'des_cbc'}|[{'atom',283,'des_cfb'}|[{'atom',283,'des3_cbc'}|[{'atom',283,'des3_cbf'}|[{'atom',283,'des_ede3'}|[{'atom',283,'blowfish_cbc'}|[{'atom',284,'blowfish_cfb64'}|[{'atom',284,'aes_cbc128'}|[{'atom',284,'aes_cfb8'}|[{'atom',284,'aes_cfb128'}|[{'atom',284,'aes_cbc256'}|[{'atom',284,'rc2_cbc'}]]]]]]]]]]]]}|[{'ann_type',285,[{'var',285,'Key'}|[{'type',285,'iodata',[]}]]}|[{'ann_type',285,[{'var',285,'Ivec'}|[{'type',285,'binary',[]}]]}|[{'ann_type',285,[{'var',285,'Data'}|[{'type',285,'iodata',[]}]]}]]]]}|[{'type',285,'binary',[]}]]}]}],
		%% Line 316
		'spec' =
		    %% Line 316
		    [{{'block_decrypt',4},[{'type',316,'fun',[{'type',316,'product',[{'type',316,'union',[{'atom',316,'des_cbc'}|[{'atom',316,'des_cfb'}|[{'atom',316,'des3_cbc'}|[{'atom',316,'des3_cbf'}|[{'atom',316,'des_ede3'}|[{'atom',316,'blowfish_cbc'}|[{'atom',317,'blowfish_cfb64'}|[{'atom',317,'blowfish_ofb64'}|[{'atom',317,'aes_cbc128'}|[{'atom',317,'aes_cbc256'}|[{'atom',317,'aes_ige256'}|[{'atom',318,'aes_cfb8'}|[{'atom',318,'aes_cfb128'}|[{'atom',318,'rc2_cbc'}]]]]]]]]]]]]]]}|[{'ann_type',319,[{'var',319,'Key'}|[{'type',319,'iodata',[]}]]}|[{'ann_type',319,[{'var',319,'Ivec'}|[{'type',319,'binary',[]}]]}|[{'ann_type',319,[{'var',319,'Data'}|[{'type',319,'iodata',[]}]]}]]]]}|[{'type',319,'binary',[]}]]}]}],
		%% Line 350
		'spec' =
		    %% Line 350
		    [{{'block_encrypt',3},[{'type',350,'fun',[{'type',350,'product',[{'type',350,'union',[{'atom',350,'des_ecb'}|[{'atom',350,'blowfish_ecb'}]]}|[{'ann_type',350,[{'var',350,'Key'}|[{'type',350,'iodata',[]}]]}|[{'ann_type',350,[{'var',350,'Data'}|[{'type',350,'iodata',[]}]]}]]]}|[{'type',350,'binary',[]}]]}]}],
		%% Line 357
		'spec' =
		    %% Line 357
		    [{{'block_decrypt',3},[{'type',357,'fun',[{'type',357,'product',[{'type',357,'union',[{'atom',357,'des_ecb'}|[{'atom',357,'blowfish_ecb'}]]}|[{'ann_type',357,[{'var',357,'Key'}|[{'type',357,'iodata',[]}]]}|[{'ann_type',357,[{'var',357,'Data'}|[{'type',357,'iodata',[]}]]}]]]}|[{'type',357,'binary',[]}]]}]}],
		%% Line 364
		'spec' =
		    %% Line 364
		    [{{'next_iv',2},[{'type',364,'fun',[{'type',364,'product',[{'type',364,'union',[{'atom',364,'des_cbc'}|[{'atom',364,'des3_cbc'}|[{'atom',364,'aes_cbc'}|[{'atom',364,'aes_ige'}]]]]}|[{'ann_type',364,[{'var',364,'Data'}|[{'type',364,'iodata',[]}]]}]]}|[{'type',364,'binary',[]}]]}]}],
		%% Line 375
		'spec' =
		    %% Line 375
		    [{{'next_iv',3},[{'type',375,'fun',[{'type',375,'product',[{'atom',375,'des_cfb'}|[{'ann_type',375,[{'var',375,'Data'}|[{'type',375,'iodata',[]}]]}|[{'ann_type',375,[{'var',375,'Ivec'}|[{'type',375,'binary',[]}]]}]]]}|[{'type',375,'binary',[]}]]}]}],
		%% Line 400
		'spec' =
		    %% Line 400
		    [{{'rand_bytes',1},[{'type',400,'fun',[{'type',400,'product',[{'type',400,'non_neg_integer',[]}]}|[{'type',400,'binary',[]}]]}]}],
		%% Line 401
		'spec' =
		    %% Line 401
		    [{{'strong_rand_bytes',1},[{'type',401,'fun',[{'type',401,'product',[{'type',401,'non_neg_integer',[]}]}|[{'type',401,'binary',[]}]]}]}],
		%% Line 402
		'spec' =
		    %% Line 402
		    [{{'rand_uniform',2},[{'type',402,'fun',[{'type',402,'product',[{'type',402,'crypto_integer',[]}|[{'type',402,'crypto_integer',[]}]]}|[{'type',403,'crypto_integer',[]}]]}]}],
		%% Line 445
		'spec' =
		    %% Line 445
		    [{{'rand_seed',1},[{'type',445,'fun',[{'type',445,'product',[{'type',445,'binary',[]}]}|[{'atom',445,'ok'}]]}]}],
		%% Line 451
		'spec' =
		    %% Line 451
		    [{{'mod_pow',3},[{'type',451,'fun',[{'type',451,'product',[{'type',451,'union',[{'type',451,'binary',[]}|[{'type',451,'integer',[]}]]}|[{'type',451,'union',[{'type',451,'binary',[]}|[{'type',451,'integer',[]}]]}|[{'type',451,'union',[{'type',451,'binary',[]}|[{'type',451,'integer',[]}]]}]]]}|[{'type',451,'union',[{'type',451,'binary',[]}|[{'atom',451,'error'}]]}]]}]}],
		%% Line 493
		'spec' =
		    %% Line 493
		    [{{'public_encrypt',4},[{'type',493,'fun',[{'type',493,'product',[{'atom',493,'rsa'}|[{'type',493,'binary',[]}|[{'type',493,'list',[{'type',493,'binary',[]}]}|[{'type',493,'rsa_padding',[]}]]]]}|[{'type',494,'binary',[]}]]}]}],
		%% Line 495
		'spec' =
		    %% Line 495
		    [{{'public_decrypt',4},[{'type',495,'fun',[{'type',495,'product',[{'atom',495,'rsa'}|[{'type',495,'binary',[]}|[{'type',495,'list',[{'type',495,'union',[{'type',495,'integer',[]}|[{'type',495,'binary',[]}]]}]}|[{'type',495,'rsa_padding',[]}]]]]}|[{'type',496,'binary',[]}]]}]}],
		%% Line 497
		'spec' =
		    %% Line 497
		    [{{'private_encrypt',4},[{'type',497,'fun',[{'type',497,'product',[{'atom',497,'rsa'}|[{'type',497,'binary',[]}|[{'type',497,'list',[{'type',497,'union',[{'type',497,'integer',[]}|[{'type',497,'binary',[]}]]}]}|[{'type',497,'rsa_padding',[]}]]]]}|[{'type',498,'binary',[]}]]}]}],
		%% Line 499
		'spec' =
		    %% Line 499
		    [{{'private_decrypt',4},[{'type',499,'fun',[{'type',499,'product',[{'atom',499,'rsa'}|[{'type',499,'binary',[]}|[{'type',499,'list',[{'type',499,'union',[{'type',499,'integer',[]}|[{'type',499,'binary',[]}]]}]}|[{'type',499,'rsa_padding',[]}]]]]}|[{'type',500,'binary',[]}]]}]}],
		%% Line 539
		'spec' =
		    %% Line 539
		    [{{'exor',2},[{'type',539,'fun',[{'type',539,'product',[{'type',539,'iodata',[]}|[{'type',539,'iodata',[]}]]}|[{'type',539,'binary',[]}]]}]}],
		%% Line 737
		'spec' =
		    %% Line 737
		    [{{'md5',1},[{'type',737,'fun',[{'type',737,'product',[{'type',737,'iodata',[]}]}|[{'type',737,'binary',[]}]]}]}],
		%% Line 738
		'spec' =
		    %% Line 738
		    [{{'md5_init',0},[{'type',738,'fun',[{'type',738,'product',[]}|[{'type',738,'binary',[]}]]}]}],
		%% Line 739
		'spec' =
		    %% Line 739
		    [{{'md5_update',2},[{'type',739,'fun',[{'type',739,'product',[{'type',739,'binary',[]}|[{'type',739,'iodata',[]}]]}|[{'type',739,'binary',[]}]]}]}],
		%% Line 740
		'spec' =
		    %% Line 740
		    [{{'md5_final',1},[{'type',740,'fun',[{'type',740,'product',[{'type',740,'binary',[]}]}|[{'type',740,'binary',[]}]]}]}],
		%% Line 750
		'spec' =
		    %% Line 750
		    [{{'md4',1},[{'type',750,'fun',[{'type',750,'product',[{'type',750,'iodata',[]}]}|[{'type',750,'binary',[]}]]}]}],
		%% Line 751
		'spec' =
		    %% Line 751
		    [{{'md4_init',0},[{'type',751,'fun',[{'type',751,'product',[]}|[{'type',751,'binary',[]}]]}]}],
		%% Line 752
		'spec' =
		    %% Line 752
		    [{{'md4_update',2},[{'type',752,'fun',[{'type',752,'product',[{'type',752,'binary',[]}|[{'type',752,'iodata',[]}]]}|[{'type',752,'binary',[]}]]}]}],
		%% Line 753
		'spec' =
		    %% Line 753
		    [{{'md4_final',1},[{'type',753,'fun',[{'type',753,'product',[{'type',753,'binary',[]}]}|[{'type',753,'binary',[]}]]}]}],
		%% Line 764
		'spec' =
		    %% Line 764
		    [{{'ripemd160',1},[{'type',764,'fun',[{'type',764,'product',[{'type',764,'iodata',[]}]}|[{'type',764,'binary',[]}]]}]}],
		%% Line 765
		'spec' =
		    %% Line 765
		    [{{'ripemd160_init',0},[{'type',765,'fun',[{'type',765,'product',[]}|[{'type',765,'binary',[]}]]}]}],
		%% Line 766
		'spec' =
		    %% Line 766
		    [{{'ripemd160_update',2},[{'type',766,'fun',[{'type',766,'product',[{'type',766,'binary',[]}|[{'type',766,'iodata',[]}]]}|[{'type',766,'binary',[]}]]}]}],
		%% Line 767
		'spec' =
		    %% Line 767
		    [{{'ripemd160_final',1},[{'type',767,'fun',[{'type',767,'product',[{'type',767,'binary',[]}]}|[{'type',767,'binary',[]}]]}]}],
		%% Line 777
		'spec' =
		    %% Line 777
		    [{{'sha',1},[{'type',777,'fun',[{'type',777,'product',[{'type',777,'iodata',[]}]}|[{'type',777,'binary',[]}]]}]}],
		%% Line 778
		'spec' =
		    %% Line 778
		    [{{'sha_init',0},[{'type',778,'fun',[{'type',778,'product',[]}|[{'type',778,'binary',[]}]]}]}],
		%% Line 779
		'spec' =
		    %% Line 779
		    [{{'sha_update',2},[{'type',779,'fun',[{'type',779,'product',[{'type',779,'binary',[]}|[{'type',779,'iodata',[]}]]}|[{'type',779,'binary',[]}]]}]}],
		%% Line 780
		'spec' =
		    %% Line 780
		    [{{'sha_final',1},[{'type',780,'fun',[{'type',780,'product',[{'type',780,'binary',[]}]}|[{'type',780,'binary',[]}]]}]}],
		%% Line 790
		'spec' =
		    %% Line 790
		    [{{'sha224',1},[{'type',790,'fun',[{'type',790,'product',[{'type',790,'iodata',[]}]}|[{'type',790,'binary',[]}]]}]}],
		%% Line 791
		'spec' =
		    %% Line 791
		    [{{'sha224_init',0},[{'type',791,'fun',[{'type',791,'product',[]}|[{'type',791,'binary',[]}]]}]}],
		%% Line 792
		'spec' =
		    %% Line 792
		    [{{'sha224_update',2},[{'type',792,'fun',[{'type',792,'product',[{'type',792,'binary',[]}|[{'type',792,'iodata',[]}]]}|[{'type',792,'binary',[]}]]}]}],
		%% Line 793
		'spec' =
		    %% Line 793
		    [{{'sha224_final',1},[{'type',793,'fun',[{'type',793,'product',[{'type',793,'binary',[]}]}|[{'type',793,'binary',[]}]]}]}],
		%% Line 824
		'spec' =
		    %% Line 824
		    [{{'sha256',1},[{'type',824,'fun',[{'type',824,'product',[{'type',824,'iodata',[]}]}|[{'type',824,'binary',[]}]]}]}],
		%% Line 825
		'spec' =
		    %% Line 825
		    [{{'sha256_init',0},[{'type',825,'fun',[{'type',825,'product',[]}|[{'type',825,'binary',[]}]]}]}],
		%% Line 826
		'spec' =
		    %% Line 826
		    [{{'sha256_update',2},[{'type',826,'fun',[{'type',826,'product',[{'type',826,'binary',[]}|[{'type',826,'iodata',[]}]]}|[{'type',826,'binary',[]}]]}]}],
		%% Line 827
		'spec' =
		    %% Line 827
		    [{{'sha256_final',1},[{'type',827,'fun',[{'type',827,'product',[{'type',827,'binary',[]}]}|[{'type',827,'binary',[]}]]}]}],
		%% Line 858
		'spec' =
		    %% Line 858
		    [{{'sha384',1},[{'type',858,'fun',[{'type',858,'product',[{'type',858,'iodata',[]}]}|[{'type',858,'binary',[]}]]}]}],
		%% Line 859
		'spec' =
		    %% Line 859
		    [{{'sha384_init',0},[{'type',859,'fun',[{'type',859,'product',[]}|[{'type',859,'binary',[]}]]}]}],
		%% Line 860
		'spec' =
		    %% Line 860
		    [{{'sha384_update',2},[{'type',860,'fun',[{'type',860,'product',[{'type',860,'binary',[]}|[{'type',860,'iodata',[]}]]}|[{'type',860,'binary',[]}]]}]}],
		%% Line 861
		'spec' =
		    %% Line 861
		    [{{'sha384_final',1},[{'type',861,'fun',[{'type',861,'product',[{'type',861,'binary',[]}]}|[{'type',861,'binary',[]}]]}]}],
		%% Line 892
		'spec' =
		    %% Line 892
		    [{{'sha512',1},[{'type',892,'fun',[{'type',892,'product',[{'type',892,'iodata',[]}]}|[{'type',892,'binary',[]}]]}]}],
		%% Line 893
		'spec' =
		    %% Line 893
		    [{{'sha512_init',0},[{'type',893,'fun',[{'type',893,'product',[]}|[{'type',893,'binary',[]}]]}]}],
		%% Line 894
		'spec' =
		    %% Line 894
		    [{{'sha512_update',2},[{'type',894,'fun',[{'type',894,'product',[{'type',894,'binary',[]}|[{'type',894,'iodata',[]}]]}|[{'type',894,'binary',[]}]]}]}],
		%% Line 895
		'spec' =
		    %% Line 895
		    [{{'sha512_final',1},[{'type',895,'fun',[{'type',895,'product',[{'type',895,'binary',[]}]}|[{'type',895,'binary',[]}]]}]}],
		%% Line 976
		'spec' =
		    %% Line 976
		    [{{'md5_mac',2},[{'type',976,'fun',[{'type',976,'product',[{'type',976,'iodata',[]}|[{'type',976,'iodata',[]}]]}|[{'type',976,'binary',[]}]]}]}],
		%% Line 977
		'spec' =
		    %% Line 977
		    [{{'md5_mac_96',2},[{'type',977,'fun',[{'type',977,'product',[{'type',977,'iodata',[]}|[{'type',977,'iodata',[]}]]}|[{'type',977,'binary',[]}]]}]}],
		%% Line 990
		'spec' =
		    %% Line 990
		    [{{'sha_mac',2},[{'type',990,'fun',[{'type',990,'product',[{'type',990,'iodata',[]}|[{'type',990,'iodata',[]}]]}|[{'type',990,'binary',[]}]]}]}],
		%% Line 991
		'spec' =
		    %% Line 991
		    [{{'sha_mac_96',2},[{'type',991,'fun',[{'type',991,'product',[{'type',991,'iodata',[]}|[{'type',991,'iodata',[]}]]}|[{'type',991,'binary',[]}]]}]}],
		%% Line 1007
		'spec' =
		    %% Line 1007
		    [{{'sha224_mac',2},[{'type',1007,'fun',[{'type',1007,'product',[{'type',1007,'iodata',[]}|[{'type',1007,'iodata',[]}]]}|[{'type',1007,'binary',[]}]]}]}],
		%% Line 1023
		'spec' =
		    %% Line 1023
		    [{{'sha256_mac',2},[{'type',1023,'fun',[{'type',1023,'product',[{'type',1023,'iodata',[]}|[{'type',1023,'iodata',[]}]]}|[{'type',1023,'binary',[]}]]}]}],
		%% Line 1039
		'spec' =
		    %% Line 1039
		    [{{'sha384_mac',2},[{'type',1039,'fun',[{'type',1039,'product',[{'type',1039,'iodata',[]}|[{'type',1039,'iodata',[]}]]}|[{'type',1039,'binary',[]}]]}]}],
		%% Line 1055
		'spec' =
		    %% Line 1055
		    [{{'sha512_mac',2},[{'type',1055,'fun',[{'type',1055,'product',[{'type',1055,'iodata',[]}|[{'type',1055,'iodata',[]}]]}|[{'type',1055,'binary',[]}]]}]}],
		%% Line 1073
		'spec' =
		    %% Line 1073
		    [{{'des_ecb_encrypt',2},[{'type',1073,'fun',[{'type',1073,'product',[{'type',1073,'iodata',[]}|[{'type',1073,'iodata',[]}]]}|[{'type',1073,'binary',[]}]]}]}],
		%% Line 1074
		'spec' =
		    %% Line 1074
		    [{{'des_ecb_decrypt',2},[{'type',1074,'fun',[{'type',1074,'product',[{'type',1074,'iodata',[]}|[{'type',1074,'iodata',[]}]]}|[{'type',1074,'binary',[]}]]}]}],
		%% Line 1085
		'spec' =
		    %% Line 1085
		    [{{'des3_cbc_encrypt',5},[{'type',1085,'fun',[{'type',1085,'product',[{'type',1085,'iodata',[]}|[{'type',1085,'iodata',[]}|[{'type',1085,'iodata',[]}|[{'type',1085,'binary',[]}|[{'type',1085,'iodata',[]}]]]]]}|[{'type',1086,'binary',[]}]]}]}],
		%% Line 1087
		'spec' =
		    %% Line 1087
		    [{{'des3_cbc_decrypt',5},[{'type',1087,'fun',[{'type',1087,'product',[{'type',1087,'iodata',[]}|[{'type',1087,'iodata',[]}|[{'type',1087,'iodata',[]}|[{'type',1087,'binary',[]}|[{'type',1087,'iodata',[]}]]]]]}|[{'type',1088,'binary',[]}]]}]}],
		%% Line 1105
		'spec' =
		    %% Line 1105
		    [{{'des3_cfb_encrypt',5},[{'type',1105,'fun',[{'type',1105,'product',[{'type',1105,'iodata',[]}|[{'type',1105,'iodata',[]}|[{'type',1105,'iodata',[]}|[{'type',1105,'binary',[]}|[{'type',1105,'iodata',[]}]]]]]}|[{'type',1106,'binary',[]}]]}]}],
		%% Line 1107
		'spec' =
		    %% Line 1107
		    [{{'des3_cfb_decrypt',5},[{'type',1107,'fun',[{'type',1107,'product',[{'type',1107,'iodata',[]}|[{'type',1107,'iodata',[]}|[{'type',1107,'iodata',[]}|[{'type',1107,'binary',[]}|[{'type',1107,'iodata',[]}]]]]]}|[{'type',1108,'binary',[]}]]}]}],
		%% Line 1127
		'spec' =
		    %% Line 1127
		    [{{'blowfish_ecb_encrypt',2},[{'type',1127,'fun',[{'type',1127,'product',[{'type',1127,'iodata',[]}|[{'type',1127,'iodata',[]}]]}|[{'type',1127,'binary',[]}]]}]}],
		%% Line 1128
		'spec' =
		    %% Line 1128
		    [{{'blowfish_ecb_decrypt',2},[{'type',1128,'fun',[{'type',1128,'product',[{'type',1128,'iodata',[]}|[{'type',1128,'iodata',[]}]]}|[{'type',1128,'binary',[]}]]}]}],
		%% Line 1129
		'spec' =
		    %% Line 1129
		    [{{'blowfish_cbc_encrypt',3},[{'type',1129,'fun',[{'type',1129,'product',[{'type',1129,'iodata',[]}|[{'type',1129,'binary',[]}|[{'type',1129,'iodata',[]}]]]}|[{'type',1129,'binary',[]}]]}]}],
		%% Line 1130
		'spec' =
		    %% Line 1130
		    [{{'blowfish_cbc_decrypt',3},[{'type',1130,'fun',[{'type',1130,'product',[{'type',1130,'iodata',[]}|[{'type',1130,'binary',[]}|[{'type',1130,'iodata',[]}]]]}|[{'type',1130,'binary',[]}]]}]}],
		%% Line 1131
		'spec' =
		    %% Line 1131
		    [{{'blowfish_cfb64_encrypt',3},[{'type',1131,'fun',[{'type',1131,'product',[{'type',1131,'iodata',[]}|[{'type',1131,'binary',[]}|[{'type',1131,'iodata',[]}]]]}|[{'type',1131,'binary',[]}]]}]}],
		%% Line 1132
		'spec' =
		    %% Line 1132
		    [{{'blowfish_cfb64_decrypt',3},[{'type',1132,'fun',[{'type',1132,'product',[{'type',1132,'iodata',[]}|[{'type',1132,'binary',[]}|[{'type',1132,'iodata',[]}]]]}|[{'type',1132,'binary',[]}]]}]}],
		%% Line 1133
		'spec' =
		    %% Line 1133
		    [{{'blowfish_ofb64_encrypt',3},[{'type',1133,'fun',[{'type',1133,'product',[{'type',1133,'iodata',[]}|[{'type',1133,'binary',[]}|[{'type',1133,'iodata',[]}]]]}|[{'type',1133,'binary',[]}]]}]}],
		%% Line 1168
		'spec' =
		    %% Line 1168
		    [{{'aes_cfb_8_encrypt',3},[{'type',1168,'fun',[{'type',1168,'product',[{'type',1168,'iodata',[]}|[{'type',1168,'binary',[]}|[{'type',1168,'iodata',[]}]]]}|[{'type',1168,'binary',[]}]]}]}],
		%% Line 1169
		'spec' =
		    %% Line 1169
		    [{{'aes_cfb_8_decrypt',3},[{'type',1169,'fun',[{'type',1169,'product',[{'type',1169,'iodata',[]}|[{'type',1169,'binary',[]}|[{'type',1169,'iodata',[]}]]]}|[{'type',1169,'binary',[]}]]}]}],
		%% Line 1182
		'spec' =
		    %% Line 1182
		    [{{'aes_cfb_128_encrypt',3},[{'type',1182,'fun',[{'type',1182,'product',[{'type',1182,'iodata',[]}|[{'type',1182,'binary',[]}|[{'type',1182,'iodata',[]}]]]}|[{'type',1182,'binary',[]}]]}]}],
		%% Line 1183
		'spec' =
		    %% Line 1183
		    [{{'aes_cfb_128_decrypt',3},[{'type',1183,'fun',[{'type',1183,'product',[{'type',1183,'iodata',[]}|[{'type',1183,'binary',[]}|[{'type',1183,'iodata',[]}]]]}|[{'type',1183,'binary',[]}]]}]}],
		%% Line 1197
		'spec' =
		    %% Line 1197
		    [{{'des_cbc_encrypt',3},[{'type',1197,'fun',[{'type',1197,'product',[{'type',1197,'iodata',[]}|[{'type',1197,'binary',[]}|[{'type',1197,'iodata',[]}]]]}|[{'type',1197,'binary',[]}]]}]}],
		%% Line 1198
		'spec' =
		    %% Line 1198
		    [{{'des_cbc_decrypt',3},[{'type',1198,'fun',[{'type',1198,'product',[{'type',1198,'iodata',[]}|[{'type',1198,'binary',[]}|[{'type',1198,'iodata',[]}]]]}|[{'type',1198,'binary',[]}]]}]}],
		%% Line 1214
		'spec' =
		    %% Line 1214
		    [{{'des_cbc_ivec',1},[{'type',1214,'fun',[{'type',1214,'product',[{'type',1214,'iodata',[]}]}|[{'type',1214,'binary',[]}]]}]}],
		%% Line 1225
		'spec' =
		    %% Line 1225
		    [{{'des_cfb_encrypt',3},[{'type',1225,'fun',[{'type',1225,'product',[{'type',1225,'iodata',[]}|[{'type',1225,'binary',[]}|[{'type',1225,'iodata',[]}]]]}|[{'type',1225,'binary',[]}]]}]}],
		%% Line 1226
		'spec' =
		    %% Line 1226
		    [{{'des_cfb_decrypt',3},[{'type',1226,'fun',[{'type',1226,'product',[{'type',1226,'iodata',[]}|[{'type',1226,'binary',[]}|[{'type',1226,'iodata',[]}]]]}|[{'type',1226,'binary',[]}]]}]}],
		%% Line 1243
		'spec' =
		    %% Line 1243
		    [{{'des_cfb_ivec',2},[{'type',1243,'fun',[{'type',1243,'product',[{'type',1243,'iodata',[]}|[{'type',1243,'iodata',[]}]]}|[{'type',1243,'binary',[]}]]}]}],
		%% Line 1254
		'spec' =
		    %% Line 1254
		    [{{'aes_cbc_128_encrypt',3},[{'type',1254,'fun',[{'type',1254,'product',[{'type',1254,'iodata',[]}|[{'type',1254,'binary',[]}|[{'type',1254,'iodata',[]}]]]}|[{'type',1255,'binary',[]}]]}]}],
		%% Line 1256
		'spec' =
		    %% Line 1256
		    [{{'aes_cbc_128_decrypt',3},[{'type',1256,'fun',[{'type',1256,'product',[{'type',1256,'iodata',[]}|[{'type',1256,'binary',[]}|[{'type',1256,'iodata',[]}]]]}|[{'type',1257,'binary',[]}]]}]}],
		%% Line 1258
		'spec' =
		    %% Line 1258
		    [{{'aes_cbc_256_encrypt',3},[{'type',1258,'fun',[{'type',1258,'product',[{'type',1258,'iodata',[]}|[{'type',1258,'binary',[]}|[{'type',1258,'iodata',[]}]]]}|[{'type',1259,'binary',[]}]]}]}],
		%% Line 1260
		'spec' =
		    %% Line 1260
		    [{{'aes_cbc_256_decrypt',3},[{'type',1260,'fun',[{'type',1260,'product',[{'type',1260,'iodata',[]}|[{'type',1260,'binary',[]}|[{'type',1260,'iodata',[]}]]]}|[{'type',1261,'binary',[]}]]}]}],
		%% Line 1295
		'spec' =
		    %% Line 1295
		    [{{'aes_ige_256_decrypt',3},[{'type',1295,'fun',[{'type',1295,'product',[{'type',1295,'iodata',[]}|[{'type',1295,'binary',[]}|[{'type',1295,'iodata',[]}]]]}|[{'type',1296,'binary',[]}]]}]}],
		%% Line 1355
		'spec' =
		    %% Line 1355
		    [{{'aes_ctr_encrypt',3},[{'type',1355,'fun',[{'type',1355,'product',[{'type',1355,'iodata',[]}|[{'type',1355,'binary',[]}|[{'type',1355,'iodata',[]}]]]}|[{'type',1356,'binary',[]}]]}]}],
		%% Line 1357
		'spec' =
		    %% Line 1357
		    [{{'aes_ctr_decrypt',3},[{'type',1357,'fun',[{'type',1357,'product',[{'type',1357,'iodata',[]}|[{'type',1357,'binary',[]}|[{'type',1357,'iodata',[]}]]]}|[{'type',1358,'binary',[]}]]}]}],
		%% Line 1366
		'type' =
		    %% Line 1366
		    [{'ctr_state',{'type',1366,'tuple',[{'type',1366,'iodata',[]}|[{'type',1366,'binary',[]}|[{'type',1366,'binary',[]}|[{'type',1366,'integer',[]}]]]]},[]}],
		%% Line 1368
		'spec' =
		    %% Line 1368
		    [{{'aes_ctr_stream_init',2},[{'type',1368,'fun',[{'type',1368,'product',[{'type',1368,'iodata',[]}|[{'type',1368,'binary',[]}]]}|[{'type',1368,'ctr_state',[]}]]}]}],
		%% Line 1369
		'spec' =
		    %% Line 1369
		    [{{'aes_ctr_stream_encrypt',2},[{'type',1369,'fun',[{'type',1369,'product',[{'type',1369,'ctr_state',[]}|[{'type',1369,'binary',[]}]]}|[{'type',1370,'tuple',[{'type',1370,'ctr_state',[]}|[{'type',1370,'binary',[]}]]}]]}]}],
		%% Line 1371
		'spec' =
		    %% Line 1371
		    [{{'aes_ctr_stream_decrypt',2},[{'type',1371,'fun',[{'type',1371,'product',[{'type',1371,'ctr_state',[]}|[{'type',1371,'binary',[]}]]}|[{'type',1372,'tuple',[{'type',1372,'ctr_state',[]}|[{'type',1372,'binary',[]}]]}]]}]}],
		%% Line 1382
		'spec' =
		    %% Line 1382
		    [{{'rc4_encrypt',2},[{'type',1382,'fun',[{'type',1382,'product',[{'type',1382,'iodata',[]}|[{'type',1382,'iodata',[]}]]}|[{'type',1382,'binary',[]}]]}]}],
		%% Line 1504
		'spec' =
		    %% Line 1504
		    [{{'dh_generate_key',1},[{'type',1504,'fun',[{'type',1504,'product',[{'type',1504,'list',[{'type',1504,'binary',[]}]}]}|[{'type',1504,'tuple',[{'type',1504,'binary',[]}|[{'type',1504,'binary',[]}]]}]]}]}],
		%% Line 1505
		'spec' =
		    %% Line 1505
		    [{{'dh_generate_key',2},[{'type',1505,'fun',[{'type',1505,'product',[{'type',1505,'union',[{'type',1505,'binary',[]}|[{'atom',1505,'undefined'}]]}|[{'type',1505,'list',[{'type',1505,'binary',[]}]}]]}|[{'type',1506,'tuple',[{'type',1506,'binary',[]}|[{'type',1506,'binary',[]}]]}]]}]}],
		%% Line 1517
		'spec' =
		    %% Line 1517
		    [{{'dh_compute_key',3},[{'type',1517,'fun',[{'type',1517,'product',[{'type',1517,'binary',[]}|[{'type',1517,'binary',[]}|[{'type',1517,'list',[{'type',1517,'binary',[]}]}]]]}|[{'type',1517,'binary',[]}]]}]}],
		%% Line 1614
		'type' =
		    %% Line 1614
		    [{'rsa_padding',{'type',1614,'union',[{'atom',1614,'rsa_pkcs1_padding'}|[{'atom',1614,'rsa_pkcs1_oaep_padding'}|[{'atom',1614,'rsa_no_padding'}]]]},[]}],
		%% Line 1616
		'spec' =
		    %% Line 1616
		    [{{'rsa_public_encrypt',3},[{'type',1616,'fun',[{'type',1616,'product',[{'type',1616,'binary',[]}|[{'type',1616,'list',[{'type',1616,'binary',[]}]}|[{'type',1616,'rsa_padding',[]}]]]}|[{'type',1617,'binary',[]}]]}]}],
		%% Line 1618
		'spec' =
		    %% Line 1618
		    [{{'rsa_public_decrypt',3},[{'type',1618,'fun',[{'type',1618,'product',[{'type',1618,'binary',[]}|[{'type',1618,'list',[{'type',1618,'union',[{'type',1618,'integer',[]}|[{'type',1618,'mpint',[]}]]}]}|[{'type',1618,'rsa_padding',[]}]]]}|[{'type',1619,'binary',[]}]]}]}],
		%% Line 1620
		'spec' =
		    %% Line 1620
		    [{{'rsa_private_encrypt',3},[{'type',1620,'fun',[{'type',1620,'product',[{'type',1620,'binary',[]}|[{'type',1620,'list',[{'type',1620,'union',[{'type',1620,'integer',[]}|[{'type',1620,'mpint',[]}]]}]}|[{'type',1620,'rsa_padding',[]}]]]}|[{'type',1621,'binary',[]}]]}]}],
		%% Line 1622
		'spec' =
		    %% Line 1622
		    [{{'rsa_private_decrypt',3},[{'type',1622,'fun',[{'type',1622,'product',[{'type',1622,'binary',[]}|[{'type',1622,'list',[{'type',1622,'union',[{'type',1622,'integer',[]}|[{'type',1622,'mpint',[]}]]}]}|[{'type',1622,'rsa_padding',[]}]]]}|[{'type',1623,'binary',[]}]]}]}],
		%% Line 1669
		'spec' =
		    %% Line 1669
		    [{{'dss_sign',2},[{'type',1669,'fun',[{'type',1669,'product',[{'type',1669,'data_or_digest',[]}|[{'type',1669,'list',[{'type',1669,'binary',[]}]}]]}|[{'type',1669,'binary',[]}]]}]}],
		%% Line 1670
		'spec' =
		    %% Line 1670
		    [{{'dss_sign',3},[{'type',1670,'fun',[{'type',1670,'product',[{'type',1670,'dss_digest_type',[]}|[{'type',1670,'data_or_digest',[]}|[{'type',1670,'list',[{'type',1670,'binary',[]}]}]]]}|[{'type',1670,'binary',[]}]]}]}],
		%% Line 1671
		'spec' =
		    %% Line 1671
		    [{{'rsa_sign',2},[{'type',1671,'fun',[{'type',1671,'product',[{'type',1671,'data_or_digest',[]}|[{'type',1671,'list',[{'type',1671,'binary',[]}]}]]}|[{'type',1671,'binary',[]}]]}]}],
		%% Line 1672
		'spec' =
		    %% Line 1672
		    [{{'rsa_sign',3},[{'type',1672,'fun',[{'type',1672,'product',[{'type',1672,'rsa_digest_type',[]}|[{'type',1672,'data_or_digest',[]}|[{'type',1672,'list',[{'type',1672,'binary',[]}]}]]]}|[{'type',1672,'binary',[]}]]}]}],
		%% Line 1694
		'spec' =
		    %% Line 1694
		    [{{'dss_verify',3},[{'type',1694,'fun',[{'type',1694,'product',[{'type',1694,'data_or_digest',[]}|[{'type',1694,'binary',[]}|[{'type',1694,'list',[{'type',1694,'binary',[]}]}]]]}|[{'type',1694,'boolean',[]}]]}]}],
		%% Line 1695
		'spec' =
		    %% Line 1695
		    [{{'dss_verify',4},[{'type',1695,'fun',[{'type',1695,'product',[{'type',1695,'dss_digest_type',[]}|[{'type',1695,'data_or_digest',[]}|[{'type',1695,'binary',[]}|[{'type',1695,'list',[{'type',1695,'binary',[]}]}]]]]}|[{'type',1695,'boolean',[]}]]}]}],
		%% Line 1696
		'spec' =
		    %% Line 1696
		    [{{'rsa_verify',3},[{'type',1696,'fun',[{'type',1696,'product',[{'type',1696,'data_or_digest',[]}|[{'type',1696,'binary',[]}|[{'type',1696,'list',[{'type',1696,'binary',[]}]}]]]}|[{'type',1696,'boolean',[]}]]}]}],
		%% Line 1697
		'spec' =
		    %% Line 1697
		    [{{'rsa_verify',4},[{'type',1697,'fun',[{'type',1697,'product',[{'type',1697,'rsa_digest_type',[]}|[{'type',1697,'data_or_digest',[]}|[{'type',1697,'binary',[]}|[{'type',1697,'list',[{'type',1697,'binary',[]}]}]]]]}|[{'type',1698,'boolean',[]}]]}]}],
		%% Line 1717
		'spec' =
		    %% Line 1717
		    [{{'strong_rand_mpint',3},[{'type',1717,'fun',[{'type',1717,'product',[{'ann_type',1717,[{'var',1717,'Bits'}|[{'type',1717,'non_neg_integer',[]}]]}|[{'ann_type',1718,[{'var',1718,'Top'}|[{'type',1718,'range',[{'op',1718,'-',{'integer',1718,1}}|[{'integer',1718,1}]]}]]}|[{'ann_type',1719,[{'var',1719,'Bottom'}|[{'type',1719,'range',[{'integer',1719,0}|[{'integer',1719,1}]]}]]}]]]}|[{'type',1719,'binary',[]}]]}]}]]
'nif_stub_error'/1 =
    %% Line 191
    fun (_cor0) ->
	%% Line 192
	call 'erlang':'nif_error'
	    ({'nif_not_loaded','module','crypto','line',_cor0})
'version'/0 =
    %% Line 200
    fun () ->
	3.39999999999999991118e+00
'start'/0 =
    %% Line 202
    fun () ->
	%% Line 203
	call 'application':'start'
	    ('crypto')
'stop'/0 =
    %% Line 205
    fun () ->
	%% Line 206
	call 'application':'stop'
	    ('crypto')
'supports'/0 =
    %% Line 208
    fun () ->
	%% Line 209
	case apply 'algorithms'/0
		 () of
	  <{Hashs,PubKeys,Ciphers}> when 'true' ->
	      let <_cor1> =
		  %% Line 214
		  call 'erlang':'++'
		      (['des_cbc'|['des_cfb'|['des3_cbc'|['des_ede3'|['blowfish_cbc'|['blowfish_cfb64'|['blowfish_ofb64'|['blowfish_ecb'|['aes_cbc128'|['aes_cfb8'|['aes_cfb128'|['aes_cbc256'|['rc2_cbc'|['aes_ctr'|['rc4']]]]]]]]]]]]]]], Ciphers)
	      in  let <_cor2> =
		      %% Line 215
		      ['rsa'|['dss'|['dh'|['srp'|PubKeys]]]]
		  in  %% Line 211
		      [{'hashs',Hashs}|%% Line 212
				       [{'ciphers',_cor1}|%% Line 215
							  [{'public_keys',_cor2}|%% Line 216
										 []]]]
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor0})
	    -| ['compiler_generated'] )
	end
'info_lib'/0 =
    %% Line 218
    fun () ->
	apply 'nif_stub_error'/1
	    (218)
'hash'/2 =
    %% Line 222
    fun (_cor1,_cor0) ->
	let <Data> =
	    %% Line 223
	    call 'erlang':'iolist_to_binary'
		(_cor0)
	in  let <MaxByts> =
		%% Line 224
		apply 'max_bytes'/0
		    ()
	    in  let <_cor4> =
		    %% Line 225
		    call 'erlang':'byte_size'
			(Data)
		in  %% Line 225
		    apply 'hash'/5
			(_cor1, Data, _cor4, MaxByts, 'initial')
'hash_init'/1 =
    %% Line 230
    fun (_cor0) ->
	case _cor0 of
	  <'md5'> when 'true' ->
	      let <_cor1> =
		  apply 'md5_init'/0
		      ()
	      in  {'md5',_cor1}
	  %% Line 231
	  <'md4'> when 'true' ->
	      let <_cor2> =
		  apply 'md4_init'/0
		      ()
	      in  {'md4',_cor2}
	  %% Line 232
	  <'sha'> when 'true' ->
	      let <_cor3> =
		  apply 'sha_init'/0
		      ()
	      in  {'sha',_cor3}
	  %% Line 233
	  <'ripemd160'> when 'true' ->
	      let <_cor4> =
		  apply 'ripemd160_init'/0
		      ()
	      in  {'ripemd160',_cor4}
	  %% Line 234
	  <'sha224'> when 'true' ->
	      let <_cor5> =
		  apply 'sha224_init'/0
		      ()
	      in  {'sha224',_cor5}
	  %% Line 235
	  <'sha256'> when 'true' ->
	      let <_cor6> =
		  apply 'sha256_init'/0
		      ()
	      in  {'sha256',_cor6}
	  %% Line 236
	  <'sha384'> when 'true' ->
	      let <_cor7> =
		  apply 'sha384_init'/0
		      ()
	      in  {'sha384',_cor7}
	  %% Line 237
	  <'sha512'> when 'true' ->
	      let <_cor8> =
		  apply 'sha512_init'/0
		      ()
	      in  {'sha512',_cor8}
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'hash_init',1}}] )
	    -| ['compiler_generated'] )
	end
'hash_update'/2 =
    %% Line 241
    fun (_cor1,_cor0) ->
	let <Data> =
	    %% Line 242
	    call 'erlang':'iolist_to_binary'
		(_cor0)
	in  let <MaxBytes> =
		%% Line 243
		apply 'max_bytes'/0
		    ()
	    in  let <_cor4> =
		    %% Line 244
		    call 'erlang':'byte_size'
			(Data)
		in  %% Line 244
		    apply 'hash_update'/4
			(_cor1, Data, _cor4, MaxBytes)
'hash_final'/1 =
    %% Line 248
    fun (_cor0) ->
	case _cor0 of
	  <{'md5',Context}> when 'true' ->
	      apply 'md5_final'/1
		  (Context)
	  %% Line 249
	  <{'md4',Context}> when 'true' ->
	      apply 'md4_final'/1
		  (Context)
	  %% Line 250
	  <{'sha',Context}> when 'true' ->
	      apply 'sha_final'/1
		  (Context)
	  %% Line 251
	  <{'ripemd160',Context}> when 'true' ->
	      apply 'ripemd160_final'/1
		  (Context)
	  %% Line 252
	  <{'sha224',Context}> when 'true' ->
	      apply 'sha224_final'/1
		  (Context)
	  %% Line 253
	  <{'sha256',Context}> when 'true' ->
	      apply 'sha256_final'/1
		  (Context)
	  %% Line 254
	  <{'sha384',Context}> when 'true' ->
	      apply 'sha384_final'/1
		  (Context)
	  %% Line 255
	  <{'sha512',Context}> when 'true' ->
	      apply 'sha512_final'/1
		  (Context)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'hash_final',1}}] )
	    -| ['compiler_generated'] )
	end
'hmac'/3 =
    %% Line 265
    fun (_cor2,_cor1,_cor0) ->
	let <Data> =
	    %% Line 266
	    call 'erlang':'iolist_to_binary'
		(_cor0)
	in  let <_cor5> =
		%% Line 267
		call 'erlang':'byte_size'
		    (Data)
	    in  let <_cor4> =
		    %% Line 267
		    apply 'max_bytes'/0
			()
		in  %% Line 267
		    apply 'hmac'/7
			(_cor2, _cor1, Data, 'undefined', _cor5, _cor4, 'initial')
'hmac'/4 =
    %% Line 268
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Data> =
	    %% Line 269
	    call 'erlang':'iolist_to_binary'
		(_cor1)
	in  let <_cor6> =
		%% Line 270
		call 'erlang':'byte_size'
		    (Data)
	    in  let <_cor5> =
		    %% Line 270
		    apply 'max_bytes'/0
			()
		in  %% Line 270
		    apply 'hmac'/7
			(_cor3, _cor2, Data, _cor0, _cor6, _cor5, 'initial')
'hmac_init'/2 =
    %% Line 273
    fun (_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (273)
'hmac_update'/2 =
    %% Line 275
    fun (_cor1,_cor0) ->
	let <Data> =
	    %% Line 276
	    call 'erlang':'iolist_to_binary'
		(_cor0)
	in  let <_cor4> =
		%% Line 277
		call 'erlang':'byte_size'
		    (Data)
	    in  let <_cor3> =
		    %% Line 277
		    apply 'max_bytes'/0
			()
		in  %% Line 277
		    apply 'hmac_update'/4
			(_cor1, Data, _cor4, _cor3)
'hmac_final'/1 =
    %% Line 278
    fun (_cor0) ->
	apply 'nif_stub_error'/1
	    (278)
'hmac_final_n'/2 =
    %% Line 279
    fun (_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (279)
'block_encrypt'/4 =
    %% Line 287
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'des_cbc',Key,Ivec,Data> when 'true' ->
	      %% Line 288
	      apply 'des_cbc_encrypt'/3
		  (Key, Ivec, Data)
	  %% Line 289
	  <'des_cfb',Key,Ivec,Data> when 'true' ->
	      %% Line 290
	      apply 'des_cfb_encrypt'/3
		  (Key, Ivec, Data)
	  %% Line 291
	  <'des3_cbc',[Key1|[Key2|[Key3|[]]]],Ivec,Data> when 'true' ->
	      %% Line 292
	      apply 'des3_cbc_encrypt'/5
		  (Key1, Key2, Key3, Ivec, Data)
	  %% Line 293
	  <'des3_cbf',[Key1|[Key2|[Key3|[]]]],Ivec,Data> when 'true' ->
	      %% Line 294
	      apply 'des3_cfb_encrypt'/5
		  (Key1, Key2, Key3, Ivec, Data)
	  %% Line 295
	  <'des_ede3',[Key1|[Key2|[Key3|[]]]],Ivec,Data> when 'true' ->
	      %% Line 296
	      apply 'des_ede3_cbc_encrypt'/5
		  (Key1, Key2, Key3, Ivec, Data)
	  %% Line 297
	  <'blowfish_cbc',Key,Ivec,Data> when 'true' ->
	      %% Line 298
	      apply 'blowfish_cbc_encrypt'/3
		  (Key, Ivec, Data)
	  %% Line 299
	  <'blowfish_cfb64',Key,Ivec,Data> when 'true' ->
	      %% Line 300
	      apply 'blowfish_cfb64_encrypt'/3
		  (Key, Ivec, Data)
	  %% Line 301
	  <'blowfish_ofb64',Key,Ivec,Data> when 'true' ->
	      %% Line 302
	      apply 'blowfish_ofb64_encrypt'/3
		  (Key, Ivec, Data)
	  %% Line 303
	  <'aes_cbc128',Key,Ivec,Data> when 'true' ->
	      %% Line 304
	      apply 'aes_cbc_128_encrypt'/3
		  (Key, Ivec, Data)
	  %% Line 305
	  <'aes_cbc256',Key,Ivec,Data> when 'true' ->
	      %% Line 306
	      apply 'aes_cbc_256_encrypt'/3
		  (Key, Ivec, Data)
	  %% Line 307
	  <'aes_ige256',Key,Ivec,Data> when 'true' ->
	      %% Line 308
	      apply 'aes_ige_256_encrypt'/3
		  (Key, Ivec, Data)
	  %% Line 309
	  <'aes_cfb8',Key,Ivec,Data> when 'true' ->
	      %% Line 310
	      apply 'aes_cfb_8_encrypt'/3
		  (Key, Ivec, Data)
	  %% Line 311
	  <'aes_cfb128',Key,Ivec,Data> when 'true' ->
	      %% Line 312
	      apply 'aes_cfb_128_encrypt'/3
		  (Key, Ivec, Data)
	  %% Line 313
	  <'rc2_cbc',Key,Ivec,Data> when 'true' ->
	      %% Line 314
	      apply 'rc2_cbc_encrypt'/3
		  (Key, Ivec, Data)
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'block_encrypt',4}}] )
	    -| ['compiler_generated'] )
	end
'block_decrypt'/4 =
    %% Line 321
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'des_cbc',Key,Ivec,Data> when 'true' ->
	      %% Line 322
	      apply 'des_cbc_decrypt'/3
		  (Key, Ivec, Data)
	  %% Line 323
	  <'des_cfb',Key,Ivec,Data> when 'true' ->
	      %% Line 324
	      apply 'des_cfb_decrypt'/3
		  (Key, Ivec, Data)
	  %% Line 325
	  <'des3_cbc',[Key1|[Key2|[Key3|[]]]],Ivec,Data> when 'true' ->
	      %% Line 326
	      apply 'des3_cbc_decrypt'/5
		  (Key1, Key2, Key3, Ivec, Data)
	  %% Line 327
	  <'des3_cbf',[Key1|[Key2|[Key3|[]]]],Ivec,Data> when 'true' ->
	      %% Line 328
	      apply 'des3_cfb_decrypt'/5
		  (Key1, Key2, Key3, Ivec, Data)
	  %% Line 329
	  <'des_ede3',[Key1|[Key2|[Key3|[]]]],Ivec,Data> when 'true' ->
	      %% Line 330
	      apply 'des_ede3_cbc_decrypt'/5
		  (Key1, Key2, Key3, Ivec, Data)
	  %% Line 331
	  <'blowfish_cbc',Key,Ivec,Data> when 'true' ->
	      %% Line 332
	      apply 'blowfish_cbc_decrypt'/3
		  (Key, Ivec, Data)
	  %% Line 333
	  <'blowfish_cfb64',Key,Ivec,Data> when 'true' ->
	      %% Line 334
	      apply 'blowfish_cfb64_decrypt'/3
		  (Key, Ivec, Data)
	  %% Line 335
	  <'blowfish_ofb64',Key,Ivec,Data> when 'true' ->
	      %% Line 336
	      apply 'blowfish_ofb64_decrypt'/3
		  (Key, Ivec, Data)
	  %% Line 337
	  <'aes_cbc128',Key,Ivec,Data> when 'true' ->
	      %% Line 338
	      apply 'aes_cbc_128_decrypt'/3
		  (Key, Ivec, Data)
	  %% Line 339
	  <'aes_cbc256',Key,Ivec,Data> when 'true' ->
	      %% Line 340
	      apply 'aes_cbc_256_decrypt'/3
		  (Key, Ivec, Data)
	  %% Line 341
	  <'aes_ige256',Key,Ivec,Data> when 'true' ->
	      %% Line 342
	      apply 'aes_ige_256_decrypt'/3
		  (Key, Ivec, Data)
	  %% Line 343
	  <'aes_cfb8',Key,Ivec,Data> when 'true' ->
	      %% Line 344
	      apply 'aes_cfb_8_decrypt'/3
		  (Key, Ivec, Data)
	  %% Line 345
	  <'aes_cfb128',Key,Ivec,Data> when 'true' ->
	      %% Line 346
	      apply 'aes_cfb_128_decrypt'/3
		  (Key, Ivec, Data)
	  %% Line 347
	  <'rc2_cbc',Key,Ivec,Data> when 'true' ->
	      %% Line 348
	      apply 'rc2_cbc_decrypt'/3
		  (Key, Ivec, Data)
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'block_decrypt',4}}] )
	    -| ['compiler_generated'] )
	end
'block_encrypt'/3 =
    %% Line 352
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'des_ecb',Key,Data> when 'true' ->
	      %% Line 353
	      apply 'des_ecb_encrypt'/2
		  (Key, Data)
	  %% Line 354
	  <'blowfish_ecb',Key,Data> when 'true' ->
	      %% Line 355
	      apply 'blowfish_ecb_encrypt'/2
		  (Key, Data)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'block_encrypt',3}}] )
	    -| ['compiler_generated'] )
	end
'block_decrypt'/3 =
    %% Line 359
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'des_ecb',Key,Data> when 'true' ->
	      %% Line 360
	      apply 'des_ecb_decrypt'/2
		  (Key, Data)
	  %% Line 361
	  <'blowfish_ecb',Key,Data> when 'true' ->
	      %% Line 362
	      apply 'blowfish_ecb_decrypt'/2
		  (Key, Data)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'block_decrypt',3}}] )
	    -| ['compiler_generated'] )
	end
'next_iv'/2 =
    %% Line 366
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'des_cbc',Data> when 'true' ->
	      %% Line 367
	      apply 'des_cbc_ivec'/1
		  (Data)
	  %% Line 368
	  <'des3_cbc',Data> when 'true' ->
	      %% Line 369
	      apply 'des_cbc_ivec'/1
		  (Data)
	  %% Line 370
	  <'aes_cbc',Data> when 'true' ->
	      %% Line 371
	      apply 'aes_cbc_ivec'/1
		  (Data)
	  %% Line 372
	  <'aes_ige',Data> when 'true' ->
	      %% Line 373
	      apply 'aes_ige_ivec'/1
		  (Data)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'next_iv',2}}] )
	    -| ['compiler_generated'] )
	end
'next_iv'/3 =
    %% Line 377
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'des_cfb',Data,Ivec> when 'true' ->
	      %% Line 378
	      apply 'des_cfb_ivec'/2
		  (Ivec, Data)
	  %% Line 379
	  <Type,Data,_X_Ivec> when 'true' ->
	      %% Line 380
	      apply 'next_iv'/2
		  (Type, Data)
	end
'stream_init'/3 =
    %% Line 382
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'aes_ctr',Key,Ivec> when 'true' ->
	      let <_cor3> =
		  %% Line 383
		  apply 'aes_ctr_stream_init'/2
		      (Key, Ivec)
	      in  %% Line 383
		  {'aes_ctr',_cor3}
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'stream_init',3}}] )
	    -| ['compiler_generated'] )
	end
'stream_init'/2 =
    %% Line 384
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'rc4',Key> when 'true' ->
	      let <_cor2> =
		  %% Line 385
		  apply 'rc4_set_key'/1
		      (Key)
	      in  %% Line 385
		  {'rc4',_cor2}
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'stream_init',2}}] )
	    -| ['compiler_generated'] )
	end
'stream_encrypt'/2 =
    %% Line 387
    fun (_cor1,_cor0) ->
	let <Data> =
	    %% Line 388
	    call 'erlang':'iolist_to_binary'
		(_cor0)
	in  let <MaxByts> =
		%% Line 389
		apply 'max_bytes'/0
		    ()
	    in  let <_cor4> =
		    %% Line 390
		    call 'erlang':'byte_size'
			(Data)
		in  %% Line 390
		    apply 'stream_crypt'/6
			(( 'do_stream_encrypt'/2
			   -| [{'id',{0,0,'-stream_encrypt/2-fun-0-'}}] ), _cor1, Data, _cor4, MaxByts, [])
'stream_decrypt'/2 =
    %% Line 392
    fun (_cor1,_cor0) ->
	let <Data> =
	    %% Line 393
	    call 'erlang':'iolist_to_binary'
		(_cor0)
	in  let <MaxByts> =
		%% Line 394
		apply 'max_bytes'/0
		    ()
	    in  let <_cor4> =
		    %% Line 395
		    call 'erlang':'byte_size'
			(Data)
		in  %% Line 395
		    apply 'stream_crypt'/6
			(( 'do_stream_decrypt'/2
			   -| [{'id',{0,0,'-stream_decrypt/2-fun-0-'}}] ), _cor1, Data, _cor4, MaxByts, [])
'rand_bytes'/1 =
    %% Line 405
    fun (_cor0) ->
	apply 'nif_stub_error'/1
	    (405)
'strong_rand_bytes'/1 =
    %% Line 407
    fun (_cor0) ->
	%% Line 408
	case apply 'strong_rand_bytes_nif'/1
		 (_cor0) of
	  %% Line 409
	  <'false'> when 'true' ->
	      call 'erlang':'error'
		  ('low_entropy')
	  %% Line 410
	  <Bin> when 'true' ->
	      Bin
	end
'strong_rand_bytes_nif'/1 =
    %% Line 412
    fun (_cor0) ->
	apply 'nif_stub_error'/1
	    (412)
'rand_bytes'/3 =
    %% Line 414
    fun (_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (414)
'rand_uniform'/2 =
    %% Line 417
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <From,To>
	      when let <_cor2> =
		    call 'erlang':'is_binary'
			(From)
		in  let <_cor3> =
			call 'erlang':'is_binary'
			    (To)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 418
	      case apply 'rand_uniform_nif'/2
		       (From, To) of
		%% Line 419
		<#{#<Len>(32,1,'integer',['unsigned'|['big']]),
		   #<MSB>(8,1,'integer',['unsigned'|['big']]),
		   #<Rest>('all',8,'binary',['unsigned'|['big']])}#>
		    when call 'erlang':'>'
			  (MSB,
			   127) ->
		    let <_cor4> =
			%% Line 420
			call 'erlang':'+'
			    (Len, 1)
		    in  %% Line 420
			#{#<_cor4>(32,1,'integer',['unsigned'|['big']]),
			  #<0>(8,1,'integer',['unsigned'|['big']]),
			  #<MSB>(8,1,'integer',['unsigned'|['big']]),
			  #<Rest>('all',8,'binary',['unsigned'|['big']])}#
		%% Line 421
		<Whatever> when 'true' ->
		    %% Line 422
		    Whatever
	      end
	  %% Line 424
	  <From,To>
	      when let <_cor6> =
		    call 'erlang':'is_integer'
			(From)
		in  let <_cor7> =
			call 'erlang':'is_integer'
			    (To)
		    in  call 'erlang':'and'
			    (_cor6, _cor7) ->
	      %% Line 425
	      case <> of
		<>
		    when call 'erlang':'<'
			  (From,
			   0) ->
		    let <_cor8> =
			%% Line 426
			call 'erlang':'-'
			    (To, From)
		    in  let <_cor9> =
			    %% Line 426
			    apply 'rand_uniform_pos'/2
				(0, _cor8)
			in  %% Line 426
			    call 'erlang':'+'
				(_cor9, From)
		%% Line 427
		<> when 'true' ->
		    %% Line 428
		    apply 'rand_uniform_pos'/2
			(From, To)
	      end
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'rand_uniform',2}}] )
	    -| ['compiler_generated'] )
	end
'rand_uniform_pos'/2 =
    %% Line 431
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <From,To>
	      when call 'erlang':'<'
		    (From,
		     To) ->
	      let <BinFrom> =
		  %% Line 432
		  apply 'mpint'/1
		      (From)
	      in  let <BinTo> =
		      %% Line 433
		      apply 'mpint'/1
			  (To)
		  in  %% Line 434
		      case apply 'rand_uniform'/2
			       (BinFrom, BinTo) of
			%% Line 435
			<Result>
			    when call 'erlang':'is_binary'
				  (Result) ->
			    %% Line 436
			    apply 'erlint'/1
				(Result)
			%% Line 437
			<Other> when 'true' ->
			    %% Line 438
			    Other
		      end
	  %% Line 440
	  <_cor7,_cor8> when 'true' ->
	      %% Line 441
	      call 'erlang':'error'
		  ('badarg')
	end
'rand_uniform_nif'/2 =
    %% Line 443
    fun (_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (443)
'rand_seed'/1 =
    %% Line 446
    fun (_cor0) ->
	%% Line 447
	apply 'rand_seed_nif'/1
	    (_cor0)
'rand_seed_nif'/1 =
    %% Line 449
    fun (_cor0) ->
	apply 'nif_stub_error'/1
	    (449)
'mod_pow'/3 =
    %% Line 452
    fun (_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 453
	    apply 'ensure_int_as_bin'/1
		(_cor2)
	in  let <_cor4> =
		%% Line 453
		apply 'ensure_int_as_bin'/1
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 453
		    apply 'ensure_int_as_bin'/1
			(_cor0)
		in  %% Line 453
		    case apply 'mod_exp_nif'/4
			     (_cor5, _cor4, _cor3, 0) of
		      %% Line 454
		      <#{#<0>(8,1,'integer',['unsigned'|['big']])}#> when 'true' ->
			  'error'
		      %% Line 455
		      <R> when 'true' ->
			  R
		    end
'verify'/5 =
    %% Line 457
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <'dss','none',Data,Signature,Key>
	      when call 'erlang':'is_binary'
		    (Data) ->
	      %% Line 458
	      apply 'verify'/5
		  ('dss', 'sha', {'digest',Data}, Signature, Key)
	  %% Line 459
	  <Alg,Type,Data,Signature,Key>
	      when call 'erlang':'is_binary'
		    (Data) ->
	      let <_cor5> =
		  %% Line 460
		  apply 'hash'/2
		      (Type, Data)
	      in  %% Line 460
		  apply 'verify'/5
		      (Alg, Type, {'digest',_cor5}, Signature, Key)
	  %% Line 461
	  <'dss',Type,Data,Signature,Key> when 'true' ->
	      let <_cor6> =
		  %% Line 462
		  apply 'map_ensure_int_as_bin'/1
		      (Key)
	      in  %% Line 462
		  apply 'dss_verify_nif'/4
		      (Type, Data, Signature, _cor6)
	  %% Line 463
	  <'rsa',Type,DataOrDigest,Signature,Key> when 'true' ->
	      let <_cor7> =
		  %% Line 464
		  apply 'map_ensure_int_as_bin'/1
		      (Key)
	      in  %% Line 464
		  case apply 'rsa_verify_nif'/4
			   (Type, DataOrDigest, Signature, _cor7) of
		    %% Line 465
		    <'notsup'> when 'true' ->
			call 'erlang':'error'
			    ('notsup')
		    %% Line 466
		    <Bool> when 'true' ->
			Bool
		  end
	  %% Line 468
	  <'ecdsa',Type,DataOrDigest,Signature,[Key|[Curve|[]]]> when 'true' ->
	      let <_cor10> =
		  %% Line 469
		  apply 'nif_curve_params'/1
		      (Curve)
	      in  let <_cor9> =
		      %% Line 469
		      apply 'ensure_int_as_bin'/1
			  (Key)
		  in  %% Line 469
		      case apply 'ecdsa_verify_nif'/5
			       (Type, DataOrDigest, Signature, _cor10, _cor9) of
			%% Line 470
			<'notsup'> when 'true' ->
			    call 'erlang':'error'
				('notsup')
			%% Line 471
			<Bool> when 'true' ->
			    Bool
		      end
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'verify',5}}] )
	    -| ['compiler_generated'] )
	end
'sign'/4 =
    %% Line 473
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'dss','none',Data,Key>
	      when call 'erlang':'is_binary'
		    (Data) ->
	      %% Line 474
	      apply 'sign'/4
		  ('dss', 'sha', {'digest',Data}, Key)
	  %% Line 475
	  <Alg,Type,Data,Key>
	      when call 'erlang':'is_binary'
		    (Data) ->
	      let <_cor4> =
		  %% Line 476
		  apply 'hash'/2
		      (Type, Data)
	      in  %% Line 476
		  apply 'sign'/4
		      (Alg, Type, {'digest',_cor4}, Key)
	  %% Line 477
	  <'rsa',Type,DataOrDigest,Key> when 'true' ->
	      let <_cor5> =
		  %% Line 478
		  apply 'map_ensure_int_as_bin'/1
		      (Key)
	      in  %% Line 478
		  case apply 'rsa_sign_nif'/3
			   (Type, DataOrDigest, _cor5) of
		    %% Line 479
		    <'error'> when 'true' ->
			call 'erlang':'error'
			    ('badkey', [Type|[DataOrDigest|[Key|[]]]])
		    %% Line 480
		    <Sign> when 'true' ->
			Sign
		  end
	  %% Line 482
	  <'dss',Type,DataOrDigest,Key> when 'true' ->
	      let <_cor7> =
		  %% Line 483
		  apply 'map_ensure_int_as_bin'/1
		      (Key)
	      in  %% Line 483
		  case apply 'dss_sign_nif'/3
			   (Type, DataOrDigest, _cor7) of
		    %% Line 484
		    <'error'> when 'true' ->
			call 'erlang':'error'
			    ('badkey', [DataOrDigest|[Key|[]]])
		    %% Line 485
		    <Sign> when 'true' ->
			Sign
		  end
	  %% Line 487
	  <'ecdsa',Type,DataOrDigest,[Key|[Curve|[]]]> when 'true' ->
	      let <_cor10> =
		  %% Line 488
		  apply 'nif_curve_params'/1
		      (Curve)
	      in  let <_cor9> =
		      %% Line 488
		      apply 'ensure_int_as_bin'/1
			  (Key)
		  in  %% Line 488
		      case apply 'ecdsa_sign_nif'/4
			       (Type, DataOrDigest, _cor10, _cor9) of
			%% Line 489
			<'error'> when 'true' ->
			    call 'erlang':'error'
				('badkey', [Type|[DataOrDigest|[Key|[]]]])
			%% Line 490
			<Sign> when 'true' ->
			    Sign
		      end
	  ( <_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'sign',4}}] )
	    -| ['compiler_generated'] )
	end
'public_encrypt'/4 =
    %% Line 502
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'rsa',BinMesg,Key,Padding> when 'true' ->
	      let <_cor4> =
		  %% Line 503
		  apply 'map_ensure_int_as_bin'/1
		      (Key)
	      in  %% Line 503
		  case apply 'rsa_public_crypt'/4
			   (BinMesg, _cor4, Padding, 'true') of
		    %% Line 504
		    <'error'> when 'true' ->
			%% Line 505
			call 'erlang':'error'
			    ('encrypt_failed', [BinMesg|[Key|[Padding|[]]]])
		    %% Line 506
		    <Sign> when 'true' ->
			Sign
		  end
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'public_encrypt',4}}] )
	    -| ['compiler_generated'] )
	end
'private_decrypt'/4 =
    %% Line 510
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'rsa',BinMesg,Key,Padding> when 'true' ->
	      let <_cor4> =
		  %% Line 511
		  apply 'map_ensure_int_as_bin'/1
		      (Key)
	      in  %% Line 511
		  case apply 'rsa_private_crypt'/4
			   (BinMesg, _cor4, Padding, 'false') of
		    %% Line 512
		    <'error'> when 'true' ->
			%% Line 513
			call 'erlang':'error'
			    ('decrypt_failed', [BinMesg|[Key|[Padding|[]]]])
		    %% Line 514
		    <Sign> when 'true' ->
			Sign
		  end
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'private_decrypt',4}}] )
	    -| ['compiler_generated'] )
	end
'private_encrypt'/4 =
    %% Line 519
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'rsa',BinMesg,Key,Padding> when 'true' ->
	      let <_cor4> =
		  %% Line 520
		  apply 'map_ensure_int_as_bin'/1
		      (Key)
	      in  %% Line 520
		  case apply 'rsa_private_crypt'/4
			   (BinMesg, _cor4, Padding, 'true') of
		    %% Line 521
		    <'error'> when 'true' ->
			%% Line 522
			call 'erlang':'error'
			    ('encrypt_failed', [BinMesg|[Key|[Padding|[]]]])
		    %% Line 523
		    <Sign> when 'true' ->
			Sign
		  end
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'private_encrypt',4}}] )
	    -| ['compiler_generated'] )
	end
'public_decrypt'/4 =
    %% Line 527
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'rsa',BinMesg,Key,Padding> when 'true' ->
	      let <_cor4> =
		  %% Line 528
		  apply 'map_ensure_int_as_bin'/1
		      (Key)
	      in  %% Line 528
		  case apply 'rsa_public_crypt'/4
			   (BinMesg, _cor4, Padding, 'false') of
		    %% Line 529
		    <'error'> when 'true' ->
			%% Line 530
			call 'erlang':'error'
			    ('decrypt_failed', [BinMesg|[Key|[Padding|[]]]])
		    %% Line 531
		    <Sign> when 'true' ->
			Sign
		  end
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'public_decrypt',4}}] )
	    -| ['compiler_generated'] )
	end
'exor'/2 =
    %% Line 541
    fun (_cor1,_cor0) ->
	let <Data1> =
	    %% Line 542
	    call 'erlang':'iolist_to_binary'
		(_cor1)
	in  let <Data2> =
		%% Line 543
		call 'erlang':'iolist_to_binary'
		    (_cor0)
	    in  let <MaxBytes> =
		    %% Line 544
		    apply 'max_bytes'/0
			()
		in  let <_cor5> =
			%% Line 545
			call 'erlang':'byte_size'
			    (Data1)
		    in  %% Line 545
			apply 'exor'/5
			    (Data1, Data2, _cor5, MaxBytes, [])
'generate_key'/2 =
    %% Line 547
    fun (_cor1,_cor0) ->
	%% Line 548
	apply 'generate_key'/3
	    (_cor1, _cor0, 'undefined')
'generate_key'/3 =
    %% Line 550
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'dh',DHParameters,PrivateKey> when 'true' ->
	      let <_cor4> =
		  %% Line 551
		  apply 'ensure_int_as_bin'/1
		      (PrivateKey)
	      in  let <_cor3> =
		      %% Line 552
		      apply 'map_ensure_int_as_bin'/1
			  (DHParameters)
		  in  %% Line 551
		      apply 'dh_generate_key_nif'/3
			  (_cor4, _cor3, %% Line 552
					 0)
	  %% Line 554
	  <'srp',{'host',[Verifier|[Generator|[Prime|[Version|[]]]]]},PrivArg>
	      when %% Line 555
		try
		    let <_cor5> =
			call 'erlang':'is_binary'
			    (Verifier)
		    in  let <_cor6> =
			    call 'erlang':'is_binary'
				(Generator)
			in  let <_cor7> =
				call 'erlang':'is_binary'
				    (Prime)
			    in  let <_cor8> =
				    call 'erlang':'is_atom'
					(Version)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor12> =
		  %% Line 556
		  case PrivArg of
		    %% Line 557
		    <'undefined'> when 'true' ->
			apply 'random_bytes'/1
			    (32)
		    %% Line 558
		    <_cor25> when 'true' ->
			apply 'ensure_int_as_bin'/1
			    (PrivArg)
		  end
	      in  %% Line 560
		  apply 'host_srp_gen_key'/5
		      (_cor12, Verifier, Generator, Prime, Version)
	  %% Line 562
	  <'srp',{'user',[Generator|[Prime|[Version|[]]]]},PrivateArg>
	      when %% Line 563
		try
		    let <_cor14> =
			call 'erlang':'is_binary'
			    (Generator)
		    in  let <_cor15> =
			    call 'erlang':'is_binary'
				(Prime)
			in  let <_cor16> =
				call 'erlang':'is_atom'
				    (Version)
			    in  let <_cor17> =
				    call 'erlang':'and'
					(_cor15, _cor16)
				in  call 'erlang':'and'
					(_cor14, _cor17)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor19> =
		  %% Line 564
		  case PrivateArg of
		    %% Line 565
		    <'undefined'> when 'true' ->
			apply 'random_bytes'/1
			    (32)
		    %% Line 566
		    <_cor26> when 'true' ->
			PrivateArg
		  end
	      in  %% Line 568
		  apply 'user_srp_gen_key'/3
		      (_cor19, Generator, Prime)
	  %% Line 570
	  <'ecdh',Curve,'undefined'> when 'true' ->
	      let <_cor21> =
		  %% Line 571
		  apply 'nif_curve_params'/1
		      (Curve)
	      in  %% Line 571
		  apply 'ec_key_generate'/1
		      (_cor21)
	  ( <_cor24,_cor23,_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23,_cor22})
		  -| [{'function_name',{'generate_key',3}}] )
	    -| ['compiler_generated'] )
	end
'compute_key'/4 =
    %% Line 574
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'dh',OthersPublicKey,MyPrivateKey,DHParameters> when 'true' ->
	      let <_cor6> =
		  %% Line 575
		  apply 'ensure_int_as_bin'/1
		      (OthersPublicKey)
	      in  let <_cor5> =
		      %% Line 576
		      apply 'ensure_int_as_bin'/1
			  (MyPrivateKey)
		  in  let <_cor4> =
			  %% Line 577
			  apply 'map_ensure_int_as_bin'/1
			      (DHParameters)
		      in  %% Line 575
			  case apply 'dh_compute_key_nif'/3
				   (_cor6, _cor5, _cor4) of
			    %% Line 578
			    <'error'> when 'true' ->
				call 'erlang':'error'
				    ('computation_failed', %% Line 579
							   [OthersPublicKey|[MyPrivateKey|[DHParameters|[]]]])
			    %% Line 580
			    <Ret> when 'true' ->
				Ret
			  end
	  %% Line 583
	  <'srp',HostPublic,{UserPublic,UserPrivate},%% Line 584
						     {'user',[DerivedKey|[Prime|[Generator|[Version|ScramblerArg]]]]}>
	      when %% Line 585
		try
		    let <_cor8> =
			call 'erlang':'is_binary'
			    (Prime)
		    in  let <_cor9> =
			    %% Line 586
			    call 'erlang':'is_binary'
				(Generator)
			in  let <_cor10> =
				%% Line 587
				call 'erlang':'is_atom'
				    (Version)
			    in  let <_cor11> =
				    call 'erlang':'and'
					(_cor9, _cor10)
				in  call 'erlang':'and'
					(_cor8, _cor11)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <HostPubBin> =
		  %% Line 588
		  apply 'ensure_int_as_bin'/1
		      (HostPublic)
	      in  let <Multiplier> =
		      %% Line 589
		      apply 'srp_multiplier'/3
			  (Version, Generator, Prime)
		  in  let <_cor16> =
			  %% Line 590
			  case ScramblerArg of
			    %% Line 591
			    <[]> when 'true' ->
				let <_cor14> =
				    apply 'ensure_int_as_bin'/1
					(UserPublic)
				in  apply 'srp_scrambler'/4
					(Version, _cor14, %% Line 592
							  HostPubBin, %% Line 592
								      Prime)
			    %% Line 593
			    <[S|[]]> when 'true' ->
				S
			    ( <_cor15> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor15})
			      -| ['compiler_generated'] )
			  end
		      in  let <_cor18> =
			      %% Line 595
			      apply 'ensure_int_as_bin'/1
				  (UserPrivate)
			  in  %% Line 595
			      apply 'srp_user_secret_nif'/7
				  (_cor18, _cor16, HostPubBin, %% Line 596
							       Multiplier, %% Line 596
									   Generator, %% Line 596
										      DerivedKey, %% Line 596
												  Prime)
	  %% Line 598
	  <'srp',UserPublic,{HostPublic,HostPrivate},%% Line 599
						     {'host',[Verifier|[Prime|[Version|ScramblerArg]]]}>
	      when %% Line 600
		try
		    let <_cor19> =
			call 'erlang':'is_binary'
			    (Verifier)
		    in  let <_cor20> =
			    %% Line 601
			    call 'erlang':'is_binary'
				(Prime)
			in  let <_cor21> =
				%% Line 602
				call 'erlang':'is_atom'
				    (Version)
			    in  let <_cor22> =
				    call 'erlang':'and'
					(_cor20, _cor21)
				in  call 'erlang':'and'
					(_cor19, _cor22)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <UserPubBin> =
		  %% Line 603
		  apply 'ensure_int_as_bin'/1
		      (UserPublic)
	      in  let <_cor26> =
		      %% Line 604
		      case ScramblerArg of
			%% Line 605
			<[]> when 'true' ->
			    let <_cor24> =
				apply 'ensure_int_as_bin'/1
				    (HostPublic)
			    in  apply 'srp_scrambler'/4
				    (Version, UserPubBin, _cor24, Prime)
			%% Line 606
			<[S|[]]> when 'true' ->
			    S
			( <_cor25> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor25})
			  -| ['compiler_generated'] )
		      end
		  in  let <_cor28> =
			  %% Line 608
			  apply 'ensure_int_as_bin'/1
			      (HostPrivate)
		      in  %% Line 608
			  apply 'srp_host_secret_nif'/5
			      (Verifier, _cor28, _cor26, %% Line 609
							 UserPubBin, %% Line 609
								     Prime)
	  %% Line 611
	  <'ecdh',Others,My,Curve> when 'true' ->
	      let <_cor31> =
		  %% Line 612
		  apply 'ensure_int_as_bin'/1
		      (Others)
	      in  let <_cor30> =
		      %% Line 613
		      apply 'nif_curve_params'/1
			  (Curve)
		  in  let <_cor29> =
			  %% Line 614
			  apply 'ensure_int_as_bin'/1
			      (My)
		      in  %% Line 612
			  apply 'ecdh_compute_key_nif'/3
			      (_cor31, _cor30, _cor29)
	  ( <_cor35,_cor34,_cor33,_cor32> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor35,_cor34,_cor33,_cor32})
		  -| [{'function_name',{'compute_key',4}}] )
	    -| ['compiler_generated'] )
	end
'random_bytes'/1 =
    %% Line 617
    fun (_cor0) ->
	%% Line 618
	try
	    apply 'strong_rand_bytes'/1
		(_cor0)
	of <_cor1> ->
	    _cor1
	catch <_cor5,_cor4,_cor3> ->
	    case <_cor5,_cor4,_cor3> of
	      %% Line 622
	      <'error','low_entropy',_cor7> when 'true' ->
		  %% Line 623
		  apply 'rand_bytes'/1
		      (_cor0)
	      ( <_cor5,_cor4,_cor3> when 'true' ->
		    primop 'raise'
			(_cor3, _cor4)
		-| ['compiler_generated'] )
	    end
'on_load'/0 =
    %% Line 630
    fun () ->
	let <PrivDir> =
	    %% Line 632
	    call 'code':'priv_dir'
		('crypto')
	in  let <_cor17> =
		%% Line 633
		case call 'erlang':'system_info'
			 ('build_type') of
		  %% Line 634
		  <'opt'> when 'true' ->
		      [99|[114|[121|[112|[116|[111]]]]]]
		  %% Line 636
		  <Type> when 'true' ->
		      let <_cor2> =
			  %% Line 637
			  call 'erlang':'atom_to_list'
			      (Type)
		      in  let <_cor3> =
			      %% Line 637
			      [46|_cor2]
			  in  let <LibTypeName> =
				  %% Line 637
				  call 'erlang':'++'
				      ([99|[114|[121|[112|[116|[111]]]]]], _cor3)
			      in  let <_cor6> =
				      %% Line 642
				      call 'erlang':'++'
					  (LibTypeName, [42])
				  in  let <_cor7> =
					  %% Line 639
					  call 'filename':'join'
					      (%% Line 640
					       [PrivDir|%% Line 641
							[[108|[105|[98]]]|%% Line 642
									  [_cor6|[]]]])
				      in  let <_cor8> =
					      %% Line 638
					      call 'filelib':'wildcard'
						  (_cor7)
					  in  let <_cor14> =
						  %% Line 642
						  ( case <> of
						      ( <>
							    when call 'erlang':'=/='
								  (_cor8,
								   []) ->
							    'true'
							-| ['compiler_generated'] )
						      ( <> when 'true' ->
							    let <_cor9> =
								%% Line 647
								call 'erlang':'system_info'
								    ('system_architecture')
							    in  let <_cor10> =
								    %% Line 648
								    call 'erlang':'++'
									(LibTypeName, [42])
								in  let <_cor11> =
									%% Line 644
									call 'filename':'join'
									    (%% Line 645
									     [PrivDir|%% Line 646
										      [[108|[105|[98]]]|%% Line 647
													[_cor9|%% Line 648
													       [_cor10|[]]]]])
								    in  let <_cor12> =
									    %% Line 643
									    call 'filelib':'wildcard'
										(_cor11)
									in  %% Line 648
									    call 'erlang':'=/='
										(_cor12, [])
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      in  %% Line 638
						  case _cor14 of
						    %% Line 649
						    <'true'> when 'true' ->
							LibTypeName
						    %% Line 650
						    <'false'> when 'true' ->
							[99|[114|[121|[112|[116|[111]]]]]]
						    ( <_cor15> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor15})
						      -| ['compiler_generated'] )
						  end
		end
	    in  let <Lib> =
		    %% Line 653
		    call 'filename':'join'
			([PrivDir|[[108|[105|[98]]]|[_cor17|[]]]])
		in  let <_cor20> =
			%% Line 654
			apply 'path2bin'/1
			    (Lib)
		    in  let <_cor30> =
			    %% Line 654
			    case call 'erlang':'load_nif'
				     (Lib, {301,_cor20}) of
			      %% Line 655
			      <'ok'> when 'true' ->
				  'ok'
			      %% Line 656
			      <Error1 = {'error',{'load_failed',_cor33}}> when 'true' ->
				  let <_cor21> =
				      %% Line 659
				      call 'erlang':'system_info'
					  ('system_architecture')
				  in  let <ArchLibDir> =
					  %% Line 658
					  call 'filename':'join'
					      ([PrivDir|[[108|[105|[98]]]|%% Line 659
									  [_cor21|[]]]])
				      in  let <_cor23> =
					      %% Line 661
					      call 'erlang':'++'
						  (_cor17, [42])
					  in  let <_cor24> =
						  %% Line 661
						  call 'filename':'join'
						      ([ArchLibDir|[_cor23|[]]])
					      in  %% Line 662
						  case call 'filelib':'wildcard'
							   (_cor24) of
						    %% Line 663
						    <[]> when 'true' ->
							Error1
						    %% Line 664
						    <_cor34> when 'true' ->
							let <ArchLib> =
							    %% Line 665
							    call 'filename':'join'
								([ArchLibDir|[_cor17|[]]])
							in  let <_cor27> =
								%% Line 666
								apply 'path2bin'/1
								    (ArchLib)
							    in  %% Line 666
								call 'erlang':'load_nif'
								    (ArchLib, {301,_cor27})
						  end
			      %% Line 668
			      <Error1> when 'true' ->
				  Error1
			    end
			in  %% Line 670
			    case _cor30 of
			      %% Line 671
			      <'ok'> when 'true' ->
				  'ok'
			      %% Line 672
			      <{'error',{E,Str}}> when 'true' ->
				  do  %% Line 673
				      call 'error_logger':'error_msg'
					  ([85|[110|[97|[98|[108|[101|[32|[116|[111|[32|[108|[111|[97|[100|[32|[99|[114|[121|[112|[116|[111|[32|[108|[105|[98|[114|[97|[114|[121|[46|[32|[70|[97|[105|[108|[101|[100|[32|[119|[105|[116|[104|[32|[101|[114|[114|[111|[114|[58|[126|[110|[34|[126|[112|[44|[32|[126|[115|[34|[126|[110|[79|[112|[101|[110|[83|[83|[76|[32|[109|[105|[103|[104|[116|[32|[110|[111|[116|[32|[98|[101|[32|[105|[110|[115|[116|[97|[108|[108|[101|[100|[32|[111|[110|[32|[116|[104|[105|[115|[32|[115|[121|[115|[116|[101|[109|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 674
																																																																																		      [E|[Str|[]]])
				      _cor30
			      ( <_cor32> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor32})
				-| ['compiler_generated'] )
			    end
'path2bin'/1 =
    %% Line 678
    fun (_cor0) ->
	case _cor0 of
	  <Path>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <Encoding> =
		  %% Line 679
		  call 'file':'native_name_encoding'
		      ()
	      in  %% Line 680
		  case call 'unicode':'characters_to_binary'
			   (Path, Encoding, Encoding) of
		    %% Line 681
		    <Bin>
			when call 'erlang':'is_binary'
			      (Bin) ->
			%% Line 682
			Bin
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'path2bin',1}}] )
	    -| ['compiler_generated'] )
	end
'max_bytes'/0 =
    %% Line 688
    fun () ->
	%% Line 689
	20000
'hash'/5 =
    %% Line 692
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Hash,Data,Size,Max,'initial'>
	      when call 'erlang':'=<'
		    (Size,
		     Max) ->
	      %% Line 693
	      apply 'do_hash'/2
		  (Hash, Data)
	  %% Line 694
	  <State0,Data,Size,Max,'continue'>
	      when call 'erlang':'=<'
		    (Size,
		     Max) ->
	      let <State> =
		  %% Line 695
		  apply 'do_hash_update'/2
		      (State0, Data)
	      in  %% Line 696
		  apply 'hash_final'/1
		      (State)
	  %% Line 697
	  <Hash,Data,_X_Size,Max,'initial'> when 'true' ->
	      %% Line 698
	      case ( Data
		     -| ['reuse_for_context'] ) of
		<#{#<Increment>(Max,8,'binary',['unsigned'|['big']]),
		   #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <State0> =
			%% Line 699
			apply 'hash_init'/1
			    (Hash)
		    in  let <State> =
			    %% Line 700
			    apply 'do_hash_update'/2
				(State0, Increment)
			in  let <_cor10> =
				%% Line 701
				call 'erlang':'byte_size'
				    (Rest)
			    in  let <_cor9> =
				    %% Line 701
				    apply 'max_bytes'/0
					()
				in  %% Line 701
				    apply 'hash'/5
					(State, Rest, _cor10, _cor9, 'continue')
		( <_cor6> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor6)
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 702
	  <State0,Data,_X_Size,MaxByts,'continue'> when 'true' ->
	      %% Line 703
	      case ( Data
		     -| ['reuse_for_context'] ) of
		<#{#<Increment>(MaxByts,8,'binary',['unsigned'|['big']]),
		   #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <State> =
			%% Line 704
			apply 'do_hash_update'/2
			    (State0, Increment)
		    in  let <_cor14> =
			    %% Line 705
			    call 'erlang':'byte_size'
				(Rest)
			in  let <_cor13> =
				%% Line 705
				apply 'max_bytes'/0
				    ()
			    in  %% Line 705
				apply 'hash'/5
				    (State, Rest, _cor14, _cor13, 'continue')
		( <_cor11> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor11)
			  primop 'match_fail'
			      ({'badmatch',_cor11})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor19,_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'hash',5}}] )
	    -| ['compiler_generated'] )
	end
'do_hash'/2 =
    %% Line 707
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'md5',Data> when 'true' ->
	      apply 'md5'/1
		  (Data)
	  %% Line 708
	  <'md4',Data> when 'true' ->
	      apply 'md4'/1
		  (Data)
	  %% Line 709
	  <'sha',Data> when 'true' ->
	      apply 'sha'/1
		  (Data)
	  %% Line 710
	  <'ripemd160',Data> when 'true' ->
	      apply 'ripemd160'/1
		  (Data)
	  %% Line 711
	  <'sha224',Data> when 'true' ->
	      apply 'sha224'/1
		  (Data)
	  %% Line 712
	  <'sha256',Data> when 'true' ->
	      apply 'sha256'/1
		  (Data)
	  %% Line 713
	  <'sha384',Data> when 'true' ->
	      apply 'sha384'/1
		  (Data)
	  %% Line 714
	  <'sha512',Data> when 'true' ->
	      apply 'sha512'/1
		  (Data)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'do_hash',2}}] )
	    -| ['compiler_generated'] )
	end
'hash_update'/4 =
    %% Line 716
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <State,Data,Size,MaxBytes>
	      when call 'erlang':'=<'
		    (Size,
		     MaxBytes) ->
	      %% Line 717
	      apply 'do_hash_update'/2
		  (State, Data)
	  %% Line 718
	  <State0,Data,_cor11,MaxBytes> when 'true' ->
	      %% Line 719
	      case ( Data
		     -| ['reuse_for_context'] ) of
		<#{#<Increment>(MaxBytes,8,'binary',['unsigned'|['big']]),
		   #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <State> =
			%% Line 720
			apply 'do_hash_update'/2
			    (State0, Increment)
		    in  let <_cor6> =
			    %% Line 721
			    call 'erlang':'byte_size'
				(Rest)
			in  %% Line 721
			    apply 'hash_update'/4
				(State, Rest, _cor6, MaxBytes)
		( <_cor4> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor4)
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	end
'do_hash_update'/2 =
    %% Line 723
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'md5',Context},Data> when 'true' ->
	      let <_cor2> =
		  apply 'md5_update'/2
		      (Context, Data)
	      in  {'md5',_cor2}
	  %% Line 724
	  <{'md4',Context},Data> when 'true' ->
	      let <_cor3> =
		  apply 'md4_update'/2
		      (Context, Data)
	      in  {'md4',_cor3}
	  %% Line 725
	  <{'sha',Context},Data> when 'true' ->
	      let <_cor4> =
		  apply 'sha_update'/2
		      (Context, Data)
	      in  {'sha',_cor4}
	  %% Line 726
	  <{'ripemd160',Context},Data> when 'true' ->
	      let <_cor5> =
		  apply 'ripemd160_update'/2
		      (Context, Data)
	      in  {'ripemd160',_cor5}
	  %% Line 727
	  <{'sha224',Context},Data> when 'true' ->
	      let <_cor6> =
		  apply 'sha224_update'/2
		      (Context, Data)
	      in  {'sha224',_cor6}
	  %% Line 728
	  <{'sha256',Context},Data> when 'true' ->
	      let <_cor7> =
		  apply 'sha256_update'/2
		      (Context, Data)
	      in  {'sha256',_cor7}
	  %% Line 729
	  <{'sha384',Context},Data> when 'true' ->
	      let <_cor8> =
		  apply 'sha384_update'/2
		      (Context, Data)
	      in  {'sha384',_cor8}
	  %% Line 730
	  <{'sha512',Context},Data> when 'true' ->
	      let <_cor9> =
		  apply 'sha512_update'/2
		      (Context, Data)
	      in  {'sha512',_cor9}
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'do_hash_update',2}}] )
	    -| ['compiler_generated'] )
	end
'md5'/1 =
    %% Line 742
    fun (_cor0) ->
	apply 'nif_stub_error'/1
	    (742)
'md5_init'/0 =
    %% Line 743
    fun () ->
	apply 'nif_stub_error'/1
	    (743)
'md5_update'/2 =
    %% Line 744
    fun (_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (744)
'md5_final'/1 =
    %% Line 745
    fun (_cor0) ->
	apply 'nif_stub_error'/1
	    (745)
'md4'/1 =
    %% Line 755
    fun (_cor0) ->
	apply 'nif_stub_error'/1
	    (755)
'md4_init'/0 =
    %% Line 756
    fun () ->
	apply 'nif_stub_error'/1
	    (756)
'md4_update'/2 =
    %% Line 757
    fun (_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (757)
'md4_final'/1 =
    %% Line 758
    fun (_cor0) ->
	apply 'nif_stub_error'/1
	    (758)
'ripemd160'/1 =
    %% Line 769
    fun (_cor0) ->
	apply 'nif_stub_error'/1
	    (769)
'ripemd160_init'/0 =
    %% Line 770
    fun () ->
	apply 'nif_stub_error'/1
	    (770)
'ripemd160_update'/2 =
    %% Line 771
    fun (_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (771)
'ripemd160_final'/1 =
    %% Line 772
    fun (_cor0) ->
	apply 'nif_stub_error'/1
	    (772)
'sha'/1 =
    %% Line 782
    fun (_cor0) ->
	apply 'nif_stub_error'/1
	    (782)
'sha_init'/0 =
    %% Line 783
    fun () ->
	apply 'nif_stub_error'/1
	    (783)
'sha_update'/2 =
    %% Line 784
    fun (_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (784)
'sha_final'/1 =
    %% Line 785
    fun (_cor0) ->
	apply 'nif_stub_error'/1
	    (785)
'sha224'/1 =
    %% Line 795
    fun (_cor0) ->
	%% Line 796
	case apply 'sha224_nif'/1
		 (_cor0) of
	  %% Line 797
	  <'notsup'> when 'true' ->
	      call 'erlang':'error'
		  ('notsup')
	  %% Line 798
	  <Bin> when 'true' ->
	      Bin
	end
'sha224_init'/0 =
    %% Line 800
    fun () ->
	%% Line 801
	case apply 'sha224_init_nif'/0
		 () of
	  %% Line 802
	  <'notsup'> when 'true' ->
	      call 'erlang':'error'
		  ('notsup')
	  %% Line 803
	  <Bin> when 'true' ->
	      Bin
	end
'sha224_update'/2 =
    %% Line 805
    fun (_cor1,_cor0) ->
	%% Line 806
	case apply 'sha224_update_nif'/2
		 (_cor1, _cor0) of
	  %% Line 807
	  <'notsup'> when 'true' ->
	      call 'erlang':'error'
		  ('notsup')
	  %% Line 808
	  <Bin> when 'true' ->
	      Bin
	end
'sha224_final'/1 =
    %% Line 810
    fun (_cor0) ->
	%% Line 811
	case apply 'sha224_final_nif'/1
		 (_cor0) of
	  %% Line 812
	  <'notsup'> when 'true' ->
	      call 'erlang':'error'
		  ('notsup')
	  %% Line 813
	  <Bin> when 'true' ->
	      Bin
	end
'sha224_nif'/1 =
    %% Line 816
    fun (_cor0) ->
	apply 'nif_stub_error'/1
	    (816)
'sha224_init_nif'/0 =
    %% Line 817
    fun () ->
	apply 'nif_stub_error'/1
	    (817)
'sha224_update_nif'/2 =
    %% Line 818
    fun (_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (818)
'sha224_final_nif'/1 =
    %% Line 819
    fun (_cor0) ->
	apply 'nif_stub_error'/1
	    (819)
'sha256'/1 =
    %% Line 829
    fun (_cor0) ->
	%% Line 830
	case apply 'sha256_nif'/1
		 (_cor0) of
	  %% Line 831
	  <'notsup'> when 'true' ->
	      call 'erlang':'error'
		  ('notsup')
	  %% Line 832
	  <Bin> when 'true' ->
	      Bin
	end
'sha256_init'/0 =
    %% Line 834
    fun () ->
	%% Line 835
	case apply 'sha256_init_nif'/0
		 () of
	  %% Line 836
	  <'notsup'> when 'true' ->
	      call 'erlang':'error'
		  ('notsup')
	  %% Line 837
	  <Bin> when 'true' ->
	      Bin
	end
'sha256_update'/2 =
    %% Line 839
    fun (_cor1,_cor0) ->
	%% Line 840
	case apply 'sha256_update_nif'/2
		 (_cor1, _cor0) of
	  %% Line 841
	  <'notsup'> when 'true' ->
	      call 'erlang':'error'
		  ('notsup')
	  %% Line 842
	  <Bin> when 'true' ->
	      Bin
	end
'sha256_final'/1 =
    %% Line 844
    fun (_cor0) ->
	%% Line 845
	case apply 'sha256_final_nif'/1
		 (_cor0) of
	  %% Line 846
	  <'notsup'> when 'true' ->
	      call 'erlang':'error'
		  ('notsup')
	  %% Line 847
	  <Bin> when 'true' ->
	      Bin
	end
'sha256_nif'/1 =
    %% Line 850
    fun (_cor0) ->
	apply 'nif_stub_error'/1
	    (850)
'sha256_init_nif'/0 =
    %% Line 851
    fun () ->
	apply 'nif_stub_error'/1
	    (851)
'sha256_update_nif'/2 =
    %% Line 852
    fun (_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (852)
'sha256_final_nif'/1 =
    %% Line 853
    fun (_cor0) ->
	apply 'nif_stub_error'/1
	    (853)
'sha384'/1 =
    %% Line 863
    fun (_cor0) ->
	%% Line 864
	case apply 'sha384_nif'/1
		 (_cor0) of
	  %% Line 865
	  <'notsup'> when 'true' ->
	      call 'erlang':'error'
		  ('notsup')
	  %% Line 866
	  <Bin> when 'true' ->
	      Bin
	end
'sha384_init'/0 =
    %% Line 868
    fun () ->
	%% Line 869
	case apply 'sha384_init_nif'/0
		 () of
	  %% Line 870
	  <'notsup'> when 'true' ->
	      call 'erlang':'error'
		  ('notsup')
	  %% Line 871
	  <Bin> when 'true' ->
	      Bin
	end
'sha384_update'/2 =
    %% Line 873
    fun (_cor1,_cor0) ->
	%% Line 874
	case apply 'sha384_update_nif'/2
		 (_cor1, _cor0) of
	  %% Line 875
	  <'notsup'> when 'true' ->
	      call 'erlang':'error'
		  ('notsup')
	  %% Line 876
	  <Bin> when 'true' ->
	      Bin
	end
'sha384_final'/1 =
    %% Line 878
    fun (_cor0) ->
	%% Line 879
	case apply 'sha384_final_nif'/1
		 (_cor0) of
	  %% Line 880
	  <'notsup'> when 'true' ->
	      call 'erlang':'error'
		  ('notsup')
	  %% Line 881
	  <Bin> when 'true' ->
	      Bin
	end
'sha384_nif'/1 =
    %% Line 884
    fun (_cor0) ->
	apply 'nif_stub_error'/1
	    (884)
'sha384_init_nif'/0 =
    %% Line 885
    fun () ->
	apply 'nif_stub_error'/1
	    (885)
'sha384_update_nif'/2 =
    %% Line 886
    fun (_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (886)
'sha384_final_nif'/1 =
    %% Line 887
    fun (_cor0) ->
	apply 'nif_stub_error'/1
	    (887)
'sha512'/1 =
    %% Line 897
    fun (_cor0) ->
	%% Line 898
	case apply 'sha512_nif'/1
		 (_cor0) of
	  %% Line 899
	  <'notsup'> when 'true' ->
	      call 'erlang':'error'
		  ('notsup')
	  %% Line 900
	  <Bin> when 'true' ->
	      Bin
	end
'sha512_init'/0 =
    %% Line 902
    fun () ->
	%% Line 903
	case apply 'sha512_init_nif'/0
		 () of
	  %% Line 904
	  <'notsup'> when 'true' ->
	      call 'erlang':'error'
		  ('notsup')
	  %% Line 905
	  <Bin> when 'true' ->
	      Bin
	end
'sha512_update'/2 =
    %% Line 907
    fun (_cor1,_cor0) ->
	%% Line 908
	case apply 'sha512_update_nif'/2
		 (_cor1, _cor0) of
	  %% Line 909
	  <'notsup'> when 'true' ->
	      call 'erlang':'error'
		  ('notsup')
	  %% Line 910
	  <Bin> when 'true' ->
	      Bin
	end
'sha512_final'/1 =
    %% Line 912
    fun (_cor0) ->
	%% Line 913
	case apply 'sha512_final_nif'/1
		 (_cor0) of
	  %% Line 914
	  <'notsup'> when 'true' ->
	      call 'erlang':'error'
		  ('notsup')
	  %% Line 915
	  <Bin> when 'true' ->
	      Bin
	end
'sha512_nif'/1 =
    %% Line 918
    fun (_cor0) ->
	apply 'nif_stub_error'/1
	    (918)
'sha512_init_nif'/0 =
    %% Line 919
    fun () ->
	apply 'nif_stub_error'/1
	    (919)
'sha512_update_nif'/2 =
    %% Line 920
    fun (_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (920)
'sha512_final_nif'/1 =
    %% Line 921
    fun (_cor0) ->
	apply 'nif_stub_error'/1
	    (921)
'hmac'/7 =
    %% Line 925
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Type,Key,Data,MacSize,Size,MaxBytes,'initial'>
	      when call 'erlang':'=<'
		    (Size,
		     MaxBytes) ->
	      %% Line 926
	      case MacSize of
		%% Line 927
		<'undefined'> when 'true' ->
		    %% Line 928
		    apply 'do_hmac'/3
			(Type, Key, Data)
		%% Line 929
		<_cor20> when 'true' ->
		    %% Line 930
		    apply 'do_hmac'/4
			(Type, Key, Data, MacSize)
	      end
	  %% Line 932
	  <Type,Key,Data,MacSize,_cor21,MaxBytes,'initial'> when 'true' ->
	      %% Line 933
	      case ( Data
		     -| ['reuse_for_context'] ) of
		<#{#<Increment>(MaxBytes,8,'binary',['unsigned'|['big']]),
		   #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <State0> =
			%% Line 934
			apply 'hmac_init'/2
			    (Type, Key)
		    in  let <State> =
			    %% Line 935
			    apply 'hmac_update'/2
				(State0, Increment)
			in  let <_cor12> =
				%% Line 936
				call 'erlang':'byte_size'
				    (Rest)
			    in  let <_cor11> =
				    %% Line 936
				    apply 'max_bytes'/0
					()
				in  %% Line 936
				    apply 'hmac'/6
					(State, Rest, MacSize, _cor12, _cor11, 'continue')
		( <_cor8> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor8)
			  primop 'match_fail'
			      ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'hmac',7}}] )
	    -| ['compiler_generated'] )
	end
'hmac'/6 =
    %% Line 937
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <State0,Data,MacSize,Size,MaxBytes,'continue'>
	      when call 'erlang':'=<'
		    (Size,
		     MaxBytes) ->
	      let <State> =
		  %% Line 938
		  apply 'hmac_update'/2
		      (State0, Data)
	      in  %% Line 939
		  case MacSize of
		    %% Line 940
		    <'undefined'> when 'true' ->
			%% Line 941
			apply 'hmac_final'/1
			    (State)
		    %% Line 942
		    <_cor18> when 'true' ->
			%% Line 943
			apply 'hmac_final_n'/2
			    (State, MacSize)
		  end
	  %% Line 945
	  <State0,Data,MacSize,_X_Size,MaxBytes,'continue'> when 'true' ->
	      %% Line 946
	      case ( Data
		     -| ['reuse_for_context'] ) of
		<#{#<Increment>(MaxBytes,8,'binary',['unsigned'|['big']]),
		   #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <State> =
			%% Line 947
			apply 'hmac_update'/2
			    (State0, Increment)
		    in  let <_cor11> =
			    %% Line 948
			    call 'erlang':'byte_size'
				(Rest)
			in  let <_cor10> =
				%% Line 948
				apply 'max_bytes'/0
				    ()
			    in  %% Line 948
				apply 'hmac'/6
				    (State, Rest, MacSize, _cor11, _cor10, 'continue')
		( <_cor8> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor8)
			  primop 'match_fail'
			      ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor17,_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'hmac',6}}] )
	    -| ['compiler_generated'] )
	end
'hmac_update'/4 =
    %% Line 950
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <State,Data,Size,MaxBytes>
	      when call 'erlang':'=<'
		    (Size,
		     MaxBytes) ->
	      %% Line 951
	      apply 'do_hmac_update'/2
		  (State, Data)
	  %% Line 952
	  <State0,Data,_cor11,MaxBytes> when 'true' ->
	      %% Line 953
	      case ( Data
		     -| ['reuse_for_context'] ) of
		<#{#<Increment>(MaxBytes,8,'binary',['unsigned'|['big']]),
		   #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <State> =
			%% Line 954
			apply 'do_hmac_update'/2
			    (State0, Increment)
		    in  let <_cor6> =
			    %% Line 955
			    call 'erlang':'byte_size'
				(Rest)
			in  %% Line 955
			    apply 'hmac_update'/4
				(State, Rest, _cor6, MaxBytes)
		( <_cor4> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor4)
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	end
'do_hmac'/3 =
    %% Line 957
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'md5',Key,Data> when 'true' ->
	      apply 'md5_mac'/2
		  (Key, Data)
	  %% Line 958
	  <'sha',Key,Data> when 'true' ->
	      apply 'sha_mac'/2
		  (Key, Data)
	  %% Line 959
	  <'sha224',Key,Data> when 'true' ->
	      apply 'sha224_mac'/2
		  (Key, Data)
	  %% Line 960
	  <'sha256',Key,Data> when 'true' ->
	      apply 'sha256_mac'/2
		  (Key, Data)
	  %% Line 961
	  <'sha384',Key,Data> when 'true' ->
	      apply 'sha384_mac'/2
		  (Key, Data)
	  %% Line 962
	  <'sha512',Key,Data> when 'true' ->
	      apply 'sha512_mac'/2
		  (Key, Data)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'do_hmac',3}}] )
	    -| ['compiler_generated'] )
	end
'do_hmac'/4 =
    %% Line 964
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'md5',Key,Data,Size> when 'true' ->
	      apply 'md5_mac_n'/3
		  (Key, Data, Size)
	  %% Line 965
	  <'sha',Key,Data,Size> when 'true' ->
	      apply 'sha_mac_n'/3
		  (Key, Data, Size)
	  %% Line 966
	  <'sha224',Key,Data,Size> when 'true' ->
	      apply 'sha224_mac'/3
		  (Key, Data, Size)
	  %% Line 967
	  <'sha256',Key,Data,Size> when 'true' ->
	      apply 'sha256_mac'/3
		  (Key, Data, Size)
	  %% Line 968
	  <'sha384',Key,Data,Size> when 'true' ->
	      apply 'sha384_mac'/3
		  (Key, Data, Size)
	  %% Line 969
	  <'sha512',Key,Data,Size> when 'true' ->
	      apply 'sha512_mac'/3
		  (Key, Data, Size)
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'do_hmac',4}}] )
	    -| ['compiler_generated'] )
	end
'do_hmac_update'/2 =
    %% Line 971
    fun (_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (971)
'md5_mac'/2 =
    %% Line 979
    fun (_cor1,_cor0) ->
	%% Line 980
	apply 'md5_mac_n'/3
	    (_cor1, _cor0, 16)
'md5_mac_96'/2 =
    %% Line 982
    fun (_cor1,_cor0) ->
	%% Line 983
	apply 'md5_mac_n'/3
	    (_cor1, _cor0, 12)
'md5_mac_n'/3 =
    %% Line 985
    fun (_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (985)
'sha_mac'/2 =
    %% Line 993
    fun (_cor1,_cor0) ->
	%% Line 994
	apply 'sha_mac_n'/3
	    (_cor1, _cor0, 20)
'sha_mac'/3 =
    %% Line 996
    fun (_cor2,_cor1,_cor0) ->
	%% Line 997
	apply 'sha_mac_n'/3
	    (_cor2, _cor1, _cor0)
'sha_mac_96'/2 =
    %% Line 999
    fun (_cor1,_cor0) ->
	%% Line 1000
	apply 'sha_mac_n'/3
	    (_cor1, _cor0, 12)
'sha_mac_n'/3 =
    %% Line 1002
    fun (_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1002)
'sha224_mac'/2 =
    %% Line 1009
    fun (_cor1,_cor0) ->
	%% Line 1010
	apply 'sha224_mac'/3
	    (_cor1, _cor0, 28)
'sha224_mac'/3 =
    %% Line 1012
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1013
	case apply 'sha224_mac_nif'/3
		 (_cor2, _cor1, _cor0) of
	  %% Line 1014
	  <'notsup'> when 'true' ->
	      call 'erlang':'error'
		  ('notsup')
	  %% Line 1015
	  <Bin> when 'true' ->
	      Bin
	end
'sha224_mac_nif'/3 =
    %% Line 1018
    fun (_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1018)
'sha256_mac'/2 =
    %% Line 1025
    fun (_cor1,_cor0) ->
	%% Line 1026
	apply 'sha256_mac'/3
	    (_cor1, _cor0, 32)
'sha256_mac'/3 =
    %% Line 1028
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1029
	case apply 'sha256_mac_nif'/3
		 (_cor2, _cor1, _cor0) of
	  %% Line 1030
	  <'notsup'> when 'true' ->
	      call 'erlang':'error'
		  ('notsup')
	  %% Line 1031
	  <Bin> when 'true' ->
	      Bin
	end
'sha256_mac_nif'/3 =
    %% Line 1034
    fun (_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1034)
'sha384_mac'/2 =
    %% Line 1041
    fun (_cor1,_cor0) ->
	%% Line 1042
	apply 'sha384_mac'/3
	    (_cor1, _cor0, 48)
'sha384_mac'/3 =
    %% Line 1044
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1045
	case apply 'sha384_mac_nif'/3
		 (_cor2, _cor1, _cor0) of
	  %% Line 1046
	  <'notsup'> when 'true' ->
	      call 'erlang':'error'
		  ('notsup')
	  %% Line 1047
	  <Bin> when 'true' ->
	      Bin
	end
'sha384_mac_nif'/3 =
    %% Line 1050
    fun (_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1050)
'sha512_mac'/2 =
    %% Line 1057
    fun (_cor1,_cor0) ->
	%% Line 1058
	apply 'sha512_mac'/3
	    (_cor1, _cor0, 64)
'sha512_mac'/3 =
    %% Line 1060
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1061
	case apply 'sha512_mac_nif'/3
		 (_cor2, _cor1, _cor0) of
	  %% Line 1062
	  <'notsup'> when 'true' ->
	      call 'erlang':'error'
		  ('notsup')
	  %% Line 1063
	  <Bin> when 'true' ->
	      Bin
	end
'sha512_mac_nif'/3 =
    %% Line 1066
    fun (_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1066)
'des_ecb_encrypt'/2 =
    %% Line 1076
    fun (_cor1,_cor0) ->
	%% Line 1077
	apply 'des_ecb_crypt'/3
	    (_cor1, _cor0, 'true')
'des_ecb_decrypt'/2 =
    %% Line 1078
    fun (_cor1,_cor0) ->
	%% Line 1079
	apply 'des_ecb_crypt'/3
	    (_cor1, _cor0, 'false')
'des_ecb_crypt'/3 =
    %% Line 1080
    fun (_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1080)
'des3_cbc_encrypt'/5 =
    %% Line 1090
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1091
	apply 'des_ede3_cbc_crypt'/6
	    (_cor4, _cor3, _cor2, _cor1, _cor0, 'true')
'des_ede3_cbc_encrypt'/5 =
    %% Line 1092
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1093
	apply 'des_ede3_cbc_crypt'/6
	    (_cor4, _cor3, _cor2, _cor1, _cor0, 'true')
'des3_cbc_decrypt'/5 =
    %% Line 1095
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1096
	apply 'des_ede3_cbc_crypt'/6
	    (_cor4, _cor3, _cor2, _cor1, _cor0, 'false')
'des_ede3_cbc_decrypt'/5 =
    %% Line 1097
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1098
	apply 'des_ede3_cbc_crypt'/6
	    (_cor4, _cor3, _cor2, _cor1, _cor0, 'false')
'des_ede3_cbc_crypt'/6 =
    %% Line 1100
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1100)
'des3_cfb_encrypt'/5 =
    %% Line 1110
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1111
	apply 'des_ede3_cfb_crypt'/6
	    (_cor4, _cor3, _cor2, _cor1, _cor0, 'true')
'des3_cfb_decrypt'/5 =
    %% Line 1113
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1114
	apply 'des_ede3_cfb_crypt'/6
	    (_cor4, _cor3, _cor2, _cor1, _cor0, 'false')
'des_ede3_cfb_crypt'/6 =
    %% Line 1116
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1117
	case apply 'des_ede3_cfb_crypt_nif'/6
		 (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0) of
	  %% Line 1118
	  <'notsup'> when 'true' ->
	      call 'erlang':'error'
		  ('notsup')
	  %% Line 1119
	  <Bin> when 'true' ->
	      Bin
	end
'des_ede3_cfb_crypt_nif'/6 =
    %% Line 1122
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1122)
'blowfish_ecb_encrypt'/2 =
    %% Line 1135
    fun (_cor1,_cor0) ->
	%% Line 1136
	apply 'bf_ecb_crypt'/3
	    (_cor1, _cor0, 'true')
'blowfish_ecb_decrypt'/2 =
    %% Line 1138
    fun (_cor1,_cor0) ->
	%% Line 1139
	apply 'bf_ecb_crypt'/3
	    (_cor1, _cor0, 'false')
'bf_ecb_crypt'/3 =
    %% Line 1141
    fun (_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1141)
'blowfish_cbc_encrypt'/3 =
    %% Line 1143
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1144
	apply 'bf_cbc_crypt'/4
	    (_cor2, _cor1, _cor0, 'true')
'blowfish_cbc_decrypt'/3 =
    %% Line 1146
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1147
	apply 'bf_cbc_crypt'/4
	    (_cor2, _cor1, _cor0, 'false')
'bf_cbc_crypt'/4 =
    %% Line 1149
    fun (_cor3,_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1149)
'blowfish_cfb64_encrypt'/3 =
    %% Line 1151
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1152
	apply 'bf_cfb64_crypt'/4
	    (_cor2, _cor1, _cor0, 'true')
'blowfish_cfb64_decrypt'/3 =
    %% Line 1154
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1155
	apply 'bf_cfb64_crypt'/4
	    (_cor2, _cor1, _cor0, 'false')
'bf_cfb64_crypt'/4 =
    %% Line 1157
    fun (_cor3,_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1157)
'blowfish_ofb64_decrypt'/3 =
    %% Line 1159
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1160
	apply 'blowfish_ofb64_encrypt'/3
	    (_cor2, _cor1, _cor0)
'blowfish_ofb64_encrypt'/3 =
    %% Line 1162
    fun (_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1162)
'aes_cfb_8_encrypt'/3 =
    %% Line 1171
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1172
	apply 'aes_cfb_8_crypt'/4
	    (_cor2, _cor1, _cor0, 'true')
'aes_cfb_8_decrypt'/3 =
    %% Line 1174
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1175
	apply 'aes_cfb_8_crypt'/4
	    (_cor2, _cor1, _cor0, 'false')
'aes_cfb_8_crypt'/4 =
    %% Line 1177
    fun (_cor3,_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1177)
'aes_cfb_128_encrypt'/3 =
    %% Line 1185
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1186
	apply 'aes_cfb_128_crypt'/4
	    (_cor2, _cor1, _cor0, 'true')
'aes_cfb_128_decrypt'/3 =
    %% Line 1188
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1189
	apply 'aes_cfb_128_crypt'/4
	    (_cor2, _cor1, _cor0, 'false')
'aes_cfb_128_crypt'/4 =
    %% Line 1191
    fun (_cor3,_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1191)
'des_cbc_encrypt'/3 =
    %% Line 1200
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1201
	apply 'des_cbc_crypt'/4
	    (_cor2, _cor1, _cor0, 'true')
'des_cbc_decrypt'/3 =
    %% Line 1203
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1204
	apply 'des_cbc_crypt'/4
	    (_cor2, _cor1, _cor0, 'false')
'des_cbc_crypt'/4 =
    %% Line 1206
    fun (_cor3,_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1206)
'des_cbc_ivec'/1 =
    %% Line 1216
    fun (_cor0) ->
	case _cor0 of
	  <Data>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 1217
		  call 'erlang':'size'
		      (Data)
	      in  let <_cor2> =
		      %% Line 1217
		      call 'erlang':'-'
			  (_cor1, 8)
		  in  %% Line 1217
		      case call 'erlang':'split_binary'
			       (Data, _cor2) of
			<{_cor6,IVec}> when 'true' ->
			    %% Line 1218
			    IVec
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor3})
			  -| ['compiler_generated'] )
		      end
	  %% Line 1219
	  <Data>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor4> =
		  %% Line 1220
		  call 'erlang':'list_to_binary'
		      (Data)
	      in  %% Line 1220
		  apply 'des_cbc_ivec'/1
		      (_cor4)
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'des_cbc_ivec',1}}] )
	    -| ['compiler_generated'] )
	end
'des_cfb_encrypt'/3 =
    %% Line 1228
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1229
	apply 'des_cfb_crypt'/4
	    (_cor2, _cor1, _cor0, 'true')
'des_cfb_decrypt'/3 =
    %% Line 1231
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1232
	apply 'des_cfb_crypt'/4
	    (_cor2, _cor1, _cor0, 'false')
'des_cfb_crypt'/4 =
    %% Line 1234
    fun (_cor3,_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1234)
'des_cfb_ivec'/2 =
    %% Line 1245
    fun (_cor1,_cor0) ->
	let <IVecAndData> =
	    %% Line 1246
	    call 'erlang':'list_to_binary'
		([_cor1|[_cor0|[]]])
	in  let <_cor3> =
		%% Line 1247
		call 'erlang':'byte_size'
		    (IVecAndData)
	    in  let <_cor4> =
		    %% Line 1247
		    call 'erlang':'-'
			(_cor3, 8)
		in  %% Line 1247
		    case call 'erlang':'split_binary'
			     (IVecAndData, _cor4) of
		      <{_cor8,NewIVec}> when 'true' ->
			  %% Line 1248
			  NewIVec
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor5})
			-| ['compiler_generated'] )
		    end
'aes_cbc_128_encrypt'/3 =
    %% Line 1263
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1264
	apply 'aes_cbc_crypt'/4
	    (_cor2, _cor1, _cor0, 'true')
'aes_cbc_128_decrypt'/3 =
    %% Line 1266
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1267
	apply 'aes_cbc_crypt'/4
	    (_cor2, _cor1, _cor0, 'false')
'aes_cbc_256_encrypt'/3 =
    %% Line 1269
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1270
	apply 'aes_cbc_crypt'/4
	    (_cor2, _cor1, _cor0, 'true')
'aes_cbc_256_decrypt'/3 =
    %% Line 1272
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1273
	apply 'aes_cbc_crypt'/4
	    (_cor2, _cor1, _cor0, 'false')
'aes_cbc_crypt'/4 =
    %% Line 1275
    fun (_cor3,_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1275)
'aes_cbc_ivec'/1 =
    %% Line 1284
    fun (_cor0) ->
	case _cor0 of
	  <Data>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 1285
		  call 'erlang':'size'
		      (Data)
	      in  let <_cor2> =
		      %% Line 1285
		      call 'erlang':'-'
			  (_cor1, 16)
		  in  %% Line 1285
		      case call 'erlang':'split_binary'
			       (Data, _cor2) of
			<{_cor6,IVec}> when 'true' ->
			    %% Line 1286
			    IVec
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor3})
			  -| ['compiler_generated'] )
		      end
	  %% Line 1287
	  <Data>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor4> =
		  %% Line 1288
		  call 'erlang':'list_to_binary'
		      (Data)
	      in  %% Line 1288
		  apply 'aes_cbc_ivec'/1
		      (_cor4)
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'aes_cbc_ivec',1}}] )
	    -| ['compiler_generated'] )
	end
'aes_ige_256_encrypt'/3 =
    %% Line 1298
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1299
	apply 'aes_ige_crypt'/4
	    (_cor2, _cor1, _cor0, 'true')
'aes_ige_256_decrypt'/3 =
    %% Line 1301
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1302
	apply 'aes_ige_crypt'/4
	    (_cor2, _cor1, _cor0, 'false')
'aes_ige_crypt'/4 =
    %% Line 1304
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1305
	case apply 'aes_ige_crypt_nif'/4
		 (_cor3, _cor2, _cor1, _cor0) of
	  %% Line 1306
	  <'notsup'> when 'true' ->
	      call 'erlang':'error'
		  ('notsup')
	  %% Line 1307
	  <Bin> when 'true' ->
	      Bin
	end
'aes_ige_crypt_nif'/4 =
    %% Line 1310
    fun (_cor3,_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1310)
'aes_ige_ivec'/1 =
    %% Line 1319
    fun (_cor0) ->
	case _cor0 of
	  <Data>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 1320
		  call 'erlang':'size'
		      (Data)
	      in  let <_cor2> =
		      %% Line 1320
		      call 'erlang':'-'
			  (_cor1, 32)
		  in  %% Line 1320
		      case call 'erlang':'split_binary'
			       (Data, _cor2) of
			<{_cor6,IVec}> when 'true' ->
			    %% Line 1321
			    IVec
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor3})
			  -| ['compiler_generated'] )
		      end
	  %% Line 1322
	  <Data>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor4> =
		  %% Line 1323
		  call 'erlang':'list_to_binary'
		      (Data)
	      in  %% Line 1323
		  apply 'aes_ige_ivec'/1
		      (_cor4)
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'aes_ige_ivec',1}}] )
	    -| ['compiler_generated'] )
	end
'stream_crypt'/6 =
    %% Line 1328
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Fun,State,Data,Size,MaxByts,[]>
	      when call 'erlang':'=<'
		    (Size,
		     MaxByts) ->
	      %% Line 1329
	      apply Fun
		  (State, Data)
	  %% Line 1330
	  <Fun,State0,Data,Size,MaxByts,Acc>
	      when call 'erlang':'=<'
		    (Size,
		     MaxByts) ->
	      %% Line 1331
	      case apply Fun
		       (State0, Data) of
		<{State,Cipher}> when 'true' ->
		    let <_cor7> =
			%% Line 1332
			call 'lists':'reverse'
			    ([Cipher|Acc])
		    in  let <_cor8> =
			    %% Line 1332
			    call 'erlang':'list_to_binary'
				(_cor7)
			in  %% Line 1332
			    {State,_cor8}
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1333
	  <Fun,State0,Data,_cor18,MaxByts,Acc> when 'true' ->
	      %% Line 1334
	      case ( Data
		     -| ['reuse_for_context'] ) of
		<#{#<Increment>(MaxByts,8,'binary',['unsigned'|['big']]),
		   #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 1335
		    case apply Fun
			     (State0, Increment) of
		      <{State,CipherText}> when 'true' ->
			  let <_cor11> =
			      %% Line 1336
			      call 'erlang':'byte_size'
				  (Rest)
			  in  %% Line 1336
			      apply 'stream_crypt'/6
				  (Fun, State, Rest, _cor11, MaxByts, [CipherText|Acc])
		      ( <_cor10> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor10})
			-| ['compiler_generated'] )
		    end
		( <_cor9> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor9)
			  primop 'match_fail'
			      ({'badmatch',_cor9})
		  -| ['compiler_generated'] )
	      end
	end
'do_stream_encrypt'/2 =
    %% Line 1338
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'aes_ctr',State0},Data> when 'true' ->
	      %% Line 1339
	      case apply 'aes_ctr_stream_encrypt'/2
		       (State0, Data) of
		<{State,Cipher}> when 'true' ->
		    %% Line 1340
		    {{'aes_ctr',State},Cipher}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1341
	  <{'rc4',State0},Data> when 'true' ->
	      %% Line 1342
	      case apply 'rc4_encrypt_with_state'/2
		       (State0, Data) of
		<{State,Cipher}> when 'true' ->
		    %% Line 1343
		    {{'rc4',State},Cipher}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'do_stream_encrypt',2}}] )
	    -| ['compiler_generated'] )
	end
'do_stream_decrypt'/2 =
    %% Line 1345
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'aes_ctr',State0},Data> when 'true' ->
	      %% Line 1346
	      case apply 'aes_ctr_stream_decrypt'/2
		       (State0, Data) of
		<{State,Text}> when 'true' ->
		    %% Line 1347
		    {{'aes_ctr',State},Text}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1348
	  <{'rc4',State0},Data> when 'true' ->
	      %% Line 1349
	      case apply 'rc4_encrypt_with_state'/2
		       (State0, Data) of
		<{State,Text}> when 'true' ->
		    %% Line 1350
		    {{'rc4',State},Text}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'do_stream_decrypt',2}}] )
	    -| ['compiler_generated'] )
	end
'aes_ctr_encrypt'/3 =
    %% Line 1360
    fun (_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1360)
'aes_ctr_decrypt'/3 =
    %% Line 1361
    fun (_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1361)
'aes_ctr_stream_init'/2 =
    %% Line 1374
    fun (_cor1,_cor0) ->
	%% Line 1375
	{_cor1,_cor0,#{#<0>(8,1,'integer',['unsigned'|['big']]),
		       #<0>(8,1,'integer',['unsigned'|['big']]),
		       #<0>(8,1,'integer',['unsigned'|['big']]),
		       #<0>(8,1,'integer',['unsigned'|['big']]),
		       #<0>(8,1,'integer',['unsigned'|['big']]),
		       #<0>(8,1,'integer',['unsigned'|['big']]),
		       #<0>(8,1,'integer',['unsigned'|['big']]),
		       #<0>(8,1,'integer',['unsigned'|['big']]),
		       #<0>(8,1,'integer',['unsigned'|['big']]),
		       #<0>(8,1,'integer',['unsigned'|['big']]),
		       #<0>(8,1,'integer',['unsigned'|['big']]),
		       #<0>(8,1,'integer',['unsigned'|['big']]),
		       #<0>(8,1,'integer',['unsigned'|['big']]),
		       #<0>(8,1,'integer',['unsigned'|['big']]),
		       #<0>(8,1,'integer',['unsigned'|['big']]),
		       #<0>(8,1,'integer',['unsigned'|['big']])}#,0}
'aes_ctr_stream_encrypt'/2 =
    %% Line 1376
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_State = {_X_Key,_X_IVec,_X_ECount,_X_Num},_X_Data> when 'true' ->
	      apply 'nif_stub_error'/1
		  (1376)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'aes_ctr_stream_encrypt',2}}] )
	    -| ['compiler_generated'] )
	end
'aes_ctr_stream_decrypt'/2 =
    %% Line 1377
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_State = {_X_Key,_X_IVec,_X_ECount,_X_Num},_X_Cipher> when 'true' ->
	      apply 'nif_stub_error'/1
		  (1377)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'aes_ctr_stream_decrypt',2}}] )
	    -| ['compiler_generated'] )
	end
'rc4_encrypt'/2 =
    %% Line 1384
    fun (_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1384)
'rc4_set_key'/1 =
    %% Line 1385
    fun (_cor0) ->
	apply 'nif_stub_error'/1
	    (1385)
'rc4_encrypt_with_state'/2 =
    %% Line 1386
    fun (_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1386)
'rc2_cbc_encrypt'/3 =
    %% Line 1391
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1392
	apply 'rc2_cbc_crypt'/4
	    (_cor2, _cor1, _cor0, 'true')
'rc2_cbc_decrypt'/3 =
    %% Line 1394
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1395
	apply 'rc2_cbc_crypt'/4
	    (_cor2, _cor1, _cor0, 'false')
'rc2_cbc_crypt'/4 =
    %% Line 1397
    fun (_cor3,_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1397)
'rc2_40_cbc_encrypt'/3 =
    %% Line 1402
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Key,IVec,Data>
	      when try
		    let <_cor3> =
			call 'erlang':'byte_size'
			    (Key)
		    in  call 'erlang':'=='
			    (_cor3, 5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1403
	      apply 'rc2_cbc_crypt'/4
		  (Key, IVec, Data, 'true')
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'rc2_40_cbc_encrypt',3}}] )
	    -| ['compiler_generated'] )
	end
'rc2_40_cbc_decrypt'/3 =
    %% Line 1405
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Key,IVec,Data>
	      when try
		    let <_cor3> =
			call 'erlang':'byte_size'
			    (Key)
		    in  call 'erlang':'=='
			    (_cor3, 5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1406
	      apply 'rc2_cbc_crypt'/4
		  (Key, IVec, Data, 'false')
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'rc2_40_cbc_decrypt',3}}] )
	    -| ['compiler_generated'] )
	end
'user_srp_gen_key'/3 =
    %% Line 1411
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1412
	case apply 'mod_pow'/3
		 (_cor1, _cor2, _cor0) of
	  %% Line 1413
	  <'error'> when 'true' ->
	      %% Line 1414
	      'error'
	  %% Line 1415
	  <Public> when 'true' ->
	      %% Line 1416
	      {Public,_cor2}
	end
'host_srp_gen_key'/5 =
    %% Line 1419
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Multiplier> =
	    %% Line 1420
	    apply 'srp_multiplier'/3
		(_cor0, _cor2, _cor1)
	in  %% Line 1421
	    case apply 'srp_value_B_nif'/5
		     (Multiplier, _cor3, _cor2, _cor4, _cor1) of
	      %% Line 1422
	      <'error'> when 'true' ->
		  %% Line 1423
		  'error'
	      %% Line 1424
	      <Public> when 'true' ->
		  %% Line 1425
		  {Public,_cor4}
	    end
'srp_multiplier'/3 =
    %% Line 1428
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'6a',Generator,Prime> when 'true' ->
	      let <C0> =
		  %% Line 1430
		  apply 'sha_init'/0
		      ()
	      in  let <C1> =
		      %% Line 1431
		      apply 'sha_update'/2
			  (C0, Prime)
		  in  let <_cor5> =
			  %% Line 1432
			  call 'erlang':'byte_size'
			      (Prime)
		      in  let <_cor6> =
			      %% Line 1432
			      apply 'srp_pad_to'/2
				  (_cor5, Generator)
			  in  let <C2> =
				  %% Line 1432
				  apply 'sha_update'/2
				      (C1, _cor6)
			      in  %% Line 1433
				  apply 'sha_final'/1
				      (C2)
	  %% Line 1434
	  <'6',_cor11,_cor12> when 'true' ->
	      %% Line 1435
	      #{#<3>(8,1,'integer',['unsigned'|['big']])}#
	  %% Line 1436
	  <'3',_cor13,_cor14> when 'true' ->
	      %% Line 1437
	      #{#<1>(8,1,'integer',['unsigned'|['big']])}#
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'srp_multiplier',3}}] )
	    -| ['compiler_generated'] )
	end
'srp_scrambler'/4 =
    %% Line 1439
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Version,UserPublic,HostPublic,Prime>
	      when let <_cor4> =
		    call 'erlang':'=:='
			(Version, '6')
		in  let <_cor5> =
			call 'erlang':'=:='
			    (Version, '6a')
		    in  call 'erlang':'or'
			    (_cor4, _cor5) ->
	      let <PadLength> =
		  %% Line 1441
		  call 'erlang':'byte_size'
		      (Prime)
	      in  let <C0> =
		      %% Line 1442
		      apply 'sha_init'/0
			  ()
		  in  let <_cor8> =
			  %% Line 1443
			  apply 'srp_pad_to'/2
			      (PadLength, UserPublic)
		      in  let <C1> =
			      %% Line 1443
			      apply 'sha_update'/2
				  (C0, _cor8)
			  in  let <_cor10> =
				  %% Line 1444
				  apply 'srp_pad_to'/2
				      (PadLength, HostPublic)
			      in  let <C2> =
				      %% Line 1444
				      apply 'sha_update'/2
					  (C1, _cor10)
				  in  %% Line 1445
				      apply 'sha_final'/1
					  (C2)
	  %% Line 1446
	  <'3',_cor17,HostPublic,_X_Prime> when 'true' ->
	      %% Line 1449
	      case apply 'sha'/1
		       (HostPublic) of
		<#{#<U>(32,1,'binary',['unsigned'|['big']]),
		   #<_cor18>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 1450
		    U
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor12})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'srp_scrambler',4}}] )
	    -| ['compiler_generated'] )
	end
'srp_pad_length'/2 =
    %% Line 1452
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1453
	    call 'erlang':'rem'
		(_cor0, _cor1)
	in  let <_cor3> =
		%% Line 1453
		call 'erlang':'-'
		    (_cor1, _cor2)
	    in  %% Line 1453
		call 'erlang':'rem'
		    (_cor3, _cor1)
'srp_pad_to'/2 =
    %% Line 1455
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1456
	    call 'erlang':'size'
		(_cor0)
	in  %% Line 1456
	    case apply 'srp_pad_length'/2
		     (_cor1, _cor2) of
	      %% Line 1457
	      <0> when 'true' ->
		  _cor0
	      %% Line 1458
	      <N> when 'true' ->
		  let <_cor3> =
		      call 'erlang':'*'
			  (N, 8)
		  in  #{#<0>(_cor3,1,'integer',['unsigned'|['big']]),
			#<_cor0>('all',8,'binary',['unsigned'|['big']])}#
	    end
'srp_host_secret_nif'/5 =
    %% Line 1461
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1461)
'srp_user_secret_nif'/7 =
    %% Line 1463
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1463)
'srp_value_B_nif'/5 =
    %% Line 1465
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1465)
'rsa_sign_nif'/3 =
    %% Line 1469
    fun (_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1469)
'dss_sign_nif'/3 =
    %% Line 1470
    fun (_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1470)
'ecdsa_sign_nif'/4 =
    %% Line 1471
    fun (_cor3,_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1471)
'dss_verify_nif'/4 =
    %% Line 1473
    fun (_cor3,_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1473)
'rsa_verify_nif'/4 =
    %% Line 1474
    fun (_cor3,_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1474)
'ecdsa_verify_nif'/5 =
    %% Line 1475
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1475)
'dh_generate_parameters'/2 =
    %% Line 1490
    fun (_cor1,_cor0) ->
	%% Line 1491
	case apply 'dh_generate_parameters_nif'/2
		 (_cor1, _cor0) of
	  %% Line 1492
	  <'error'> when 'true' ->
	      call 'erlang':'error'
		  ('generation_failed', [_cor1|[_cor0|[]]])
	  %% Line 1493
	  <Ret> when 'true' ->
	      Ret
	end
'dh_generate_parameters_nif'/2 =
    %% Line 1496
    fun (_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1496)
'dh_check'/1 =
    %% Line 1500
    fun (_cor0) ->
	case _cor0 of
	  <[_X_Prime|[_X_Gen|[]]]> when 'true' ->
	      apply 'nif_stub_error'/1
		  (1500)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'dh_check',1}}] )
	    -| ['compiler_generated'] )
	end
'dh_generate_key'/1 =
    %% Line 1508
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1509
	    apply 'map_mpint_to_bin'/1
		(_cor0)
	in  %% Line 1509
	    apply 'dh_generate_key_nif'/3
		('undefined', _cor1, 4)
'dh_generate_key'/2 =
    %% Line 1510
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1511
	    apply 'mpint_to_bin'/1
		(_cor1)
	in  let <_cor2> =
		%% Line 1511
		apply 'map_mpint_to_bin'/1
		    (_cor0)
	    in  %% Line 1511
		apply 'dh_generate_key_nif'/3
		    (_cor3, _cor2, 4)
'dh_generate_key_nif'/3 =
    %% Line 1513
    fun (_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1513)
'dh_compute_key'/3 =
    %% Line 1519
    fun (_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 1520
	    apply 'mpint_to_bin'/1
		(_cor2)
	in  let <_cor4> =
		%% Line 1520
		apply 'mpint_to_bin'/1
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 1521
		    apply 'map_mpint_to_bin'/1
			(_cor0)
		in  %% Line 1520
		    apply 'compute_key'/4
			('dh', _cor5, _cor4, _cor3)
'dh_compute_key_nif'/3 =
    %% Line 1524
    fun (_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1524)
'ec_key_generate'/1 =
    %% Line 1526
    fun (_cor0) ->
	apply 'nif_stub_error'/1
	    (1526)
'ecdh_compute_key_nif'/3 =
    %% Line 1528
    fun (_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1528)
'ec_curves'/0 =
    %% Line 1530
    fun () ->
	%% Line 1531
	call 'crypto_ec_curves':'curves'
	    ()
'ec_curve'/1 =
    %% Line 1533
    fun (_cor0) ->
	%% Line 1534
	call 'crypto_ec_curves':'curve'
	    (_cor0)
'term_to_nif_prime'/1 =
    %% Line 1540
    fun (_cor0) ->
	case _cor0 of
	  <{'prime_field',Prime}> when 'true' ->
	      let <_cor1> =
		  %% Line 1541
		  apply 'ensure_int_as_bin'/1
		      (Prime)
	      in  %% Line 1541
		  {'prime_field',_cor1}
	  %% Line 1542
	  <PrimeField> when 'true' ->
	      %% Line 1543
	      PrimeField
	end
'term_to_nif_curve'/1 =
    %% Line 1544
    fun (_cor0) ->
	case _cor0 of
	  <{A,B,Seed}> when 'true' ->
	      let <_cor2> =
		  %% Line 1545
		  apply 'ensure_int_as_bin'/1
		      (A)
	      in  let <_cor1> =
		      %% Line 1545
		      apply 'ensure_int_as_bin'/1
			  (B)
		  in  %% Line 1545
		      {_cor2,_cor1,Seed}
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'term_to_nif_curve',1}}] )
	    -| ['compiler_generated'] )
	end
'nif_curve_params'/1 =
    %% Line 1546
    fun (_cor0) ->
	case _cor0 of
	  <{PrimeField,Curve,BasePoint,Order,CoFactor}> when 'true' ->
	      let <_cor5> =
		  %% Line 1547
		  apply 'term_to_nif_prime'/1
		      (PrimeField)
	      in  let <_cor4> =
		      %% Line 1547
		      apply 'term_to_nif_curve'/1
			  (Curve)
		  in  let <_cor3> =
			  %% Line 1547
			  apply 'ensure_int_as_bin'/1
			      (BasePoint)
		      in  let <_cor2> =
			      %% Line 1547
			      apply 'ensure_int_as_bin'/1
				  (Order)
			  in  let <_cor1> =
				  %% Line 1547
				  apply 'ensure_int_as_bin'/1
				      (CoFactor)
			      in  %% Line 1547
				  {_cor5,_cor4,_cor3,_cor2,_cor1}
	  %% Line 1548
	  <Curve>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 1550
	      call 'crypto_ec_curves':'curve'
		  (Curve)
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'nif_curve_params',1}}] )
	    -| ['compiler_generated'] )
	end
'exor'/5 =
    %% Line 1555
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Data1,Data2,Size,MaxByts,[]>
	      when call 'erlang':'=<'
		    (Size,
		     MaxByts) ->
	      %% Line 1556
	      apply 'do_exor'/2
		  (Data1, Data2)
	  %% Line 1557
	  <Data1,Data2,Size,MaxByts,Acc>
	      when call 'erlang':'=<'
		    (Size,
		     MaxByts) ->
	      let <Result> =
		  %% Line 1558
		  apply 'do_exor'/2
		      (Data1, Data2)
	      in  let <_cor6> =
		      %% Line 1559
		      call 'lists':'reverse'
			  ([Result|Acc])
		  in  %% Line 1559
		      call 'erlang':'list_to_binary'
			  (_cor6)
	  %% Line 1560
	  <Data1,Data2,_X_Size,MaxByts,Acc> when 'true' ->
	      %% Line 1561
	      case ( Data1
		     -| ['reuse_for_context'] ) of
		<#{#<Increment1>(MaxByts,8,'binary',['unsigned'|['big']]),
		   #<Rest1>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 1562
		    case ( Data2
			   -| ['reuse_for_context'] ) of
		      <#{#<Increment2>(MaxByts,8,'binary',['unsigned'|['big']]),
			 #<Rest2>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			  let <Result> =
			      %% Line 1563
			      apply 'do_exor'/2
				  (Increment1, Increment2)
			  in  let <_cor10> =
				  %% Line 1564
				  call 'erlang':'byte_size'
				      (Rest1)
			      in  %% Line 1564
				  apply 'exor'/5
				      (Rest1, Rest2, _cor10, MaxByts, [Result|Acc])
		      ( <_cor8> when 'true' ->
			    do  primop 'bs_context_to_binary'
				    (_cor8)
				primop 'match_fail'
				    ({'badmatch',_cor8})
			-| ['compiler_generated'] )
		    end
		( <_cor7> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor7)
			  primop 'match_fail'
			      ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	end
'do_exor'/2 =
    %% Line 1566
    fun (_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1566)
'algorithms'/0 =
    %% Line 1568
    fun () ->
	apply 'nif_stub_error'/1
	    (1568)
'int_to_bin'/1 =
    %% Line 1570
    fun (_cor0) ->
	case _cor0 of
	  <X>
	      when call 'erlang':'<'
		    (_cor0,
		     0) ->
	      apply 'int_to_bin_neg'/2
		  (X, [])
	  %% Line 1571
	  <X> when 'true' ->
	      apply 'int_to_bin_pos'/2
		  (X, [])
	end
'int_to_bin_pos'/2 =
    %% Line 1573
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,Ds = [_cor6|_cor7]> when 'true' ->
	      %% Line 1574
	      call 'erlang':'list_to_binary'
		  (Ds)
	  %% Line 1575
	  <X,Ds> when 'true' ->
	      let <_cor3> =
		  %% Line 1576
		  call 'erlang':'bsr'
		      (X, 8)
	      in  let <_cor2> =
		      %% Line 1576
		      call 'erlang':'band'
			  (X, 255)
		  in  %% Line 1576
		      apply 'int_to_bin_pos'/2
			  (_cor3, [_cor2|Ds])
	end
'int_to_bin_neg'/2 =
    %% Line 1578
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <-1,Ds = [MSB|_cor6]>
	      when call 'erlang':'>='
		    (MSB,
		     128) ->
	      %% Line 1579
	      call 'erlang':'list_to_binary'
		  (Ds)
	  %% Line 1580
	  <X,Ds> when 'true' ->
	      let <_cor3> =
		  %% Line 1581
		  call 'erlang':'bsr'
		      (X, 8)
	      in  let <_cor2> =
		      %% Line 1581
		      call 'erlang':'band'
			  (X, 255)
		  in  %% Line 1581
		      apply 'int_to_bin_neg'/2
			  (_cor3, [_cor2|Ds])
	end
'bytes_to_integer'/1 =
    %% Line 1583
    fun (_cor0) ->
	%% Line 1584
	apply 'bin_to_int'/1
	    (_cor0)
'bin_to_int'/1 =
    %% Line 1586
    fun (_cor0) ->
	case _cor0 of
	  <Bin>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      let <Bits> =
		  %% Line 1587
		  call 'erlang':'bit_size'
		      (Bin)
	      in  %% Line 1588
		  case ( Bin
			 -| ['reuse_for_context'] ) of
		    <#{#<Integer>(Bits,1,'integer',['unsigned'|['big']])}#> when 'true' ->
			%% Line 1589
			Integer
		    ( <_cor2> when 'true' ->
			  do  primop 'bs_context_to_binary'
				  (_cor2)
			      primop 'match_fail'
				  ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1590
	  <'undefined'> when 'true' ->
	      %% Line 1591
	      'undefined'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'bin_to_int',1}}] )
	    -| ['compiler_generated'] )
	end
'map_ensure_int_as_bin'/1 =
    %% Line 1593
    fun (_cor0) ->
	case _cor0 of
	  <List = [H|_cor5]>
	      when call 'erlang':'is_integer'
		    (H) ->
	      let <_cor3> =
		  %% Line 1594
		  ( fun (_cor1) ->
			apply 'int_to_bin'/1
			    (_cor1)
		    -| [{'id',{0,0,'-map_ensure_int_as_bin/1-fun-0-'}}] )
	      in  %% Line 1594
		  call 'lists':'map'
		      (_cor3, List)
	  %% Line 1595
	  <List> when 'true' ->
	      %% Line 1596
	      List
	end
'ensure_int_as_bin'/1 =
    %% Line 1598
    fun (_cor0) ->
	case _cor0 of
	  <Int>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 1599
	      apply 'int_to_bin'/1
		  (Int)
	  %% Line 1600
	  <Bin> when 'true' ->
	      %% Line 1601
	      Bin
	end
'map_to_norm_bin'/1 =
    %% Line 1603
    fun (_cor0) ->
	case _cor0 of
	  <List = [H|_cor8]>
	      when call 'erlang':'is_integer'
		    (H) ->
	      let <_cor3> =
		  %% Line 1604
		  ( fun (_cor1) ->
			apply 'int_to_bin'/1
			    (_cor1)
		    -| [{'id',{0,0,'-map_to_norm_bin/1-fun-0-'}}] )
	      in  %% Line 1604
		  call 'lists':'map'
		      (_cor3, List)
	  %% Line 1605
	  <List> when 'true' ->
	      let <_cor6> =
		  %% Line 1606
		  ( fun (_cor4) ->
			apply 'mpint_to_bin'/1
			    (_cor4)
		    -| [{'id',{0,0,'-map_to_norm_bin/1-fun-1-'}}] )
	      in  %% Line 1606
		  call 'lists':'map'
		      (_cor6, List)
	end
'rsa_public_encrypt'/3 =
    %% Line 1626
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1627
	    apply 'map_to_norm_bin'/1
		(_cor1)
	in  %% Line 1627
	    case apply 'rsa_public_crypt'/4
		     (_cor2, _cor3, _cor0, 'true') of
	      %% Line 1628
	      <'error'> when 'true' ->
		  %% Line 1629
		  call 'erlang':'error'
		      ('encrypt_failed', [_cor2|[_cor1|[_cor0|[]]]])
	      %% Line 1630
	      <Sign> when 'true' ->
		  Sign
	    end
'rsa_public_crypt'/4 =
    %% Line 1633
    fun (_cor3,_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1633)
'rsa_private_decrypt'/3 =
    %% Line 1636
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1637
	    apply 'map_to_norm_bin'/1
		(_cor1)
	in  %% Line 1637
	    case apply 'rsa_private_crypt'/4
		     (_cor2, _cor3, _cor0, 'false') of
	      %% Line 1638
	      <'error'> when 'true' ->
		  %% Line 1639
		  call 'erlang':'error'
		      ('decrypt_failed', [_cor2|[_cor1|[_cor0|[]]]])
	      %% Line 1640
	      <Sign> when 'true' ->
		  Sign
	    end
'rsa_private_crypt'/4 =
    %% Line 1643
    fun (_cor3,_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1643)
'rsa_private_encrypt'/3 =
    %% Line 1647
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1648
	    apply 'map_to_norm_bin'/1
		(_cor1)
	in  %% Line 1648
	    case apply 'rsa_private_crypt'/4
		     (_cor2, _cor3, _cor0, 'true') of
	      %% Line 1649
	      <'error'> when 'true' ->
		  %% Line 1650
		  call 'erlang':'error'
		      ('encrypt_failed', [_cor2|[_cor1|[_cor0|[]]]])
	      %% Line 1651
	      <Sign> when 'true' ->
		  Sign
	    end
'rsa_public_decrypt'/3 =
    %% Line 1655
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1656
	    apply 'map_to_norm_bin'/1
		(_cor1)
	in  %% Line 1656
	    case apply 'rsa_public_crypt'/4
		     (_cor2, _cor3, _cor0, 'false') of
	      %% Line 1657
	      <'error'> when 'true' ->
		  %% Line 1658
		  call 'erlang':'error'
		      ('decrypt_failed', [_cor2|[_cor1|[_cor0|[]]]])
	      %% Line 1659
	      <Sign> when 'true' ->
		  Sign
	    end
'map_mpint_to_bin'/1 =
    %% Line 1662
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 1663
	    ( fun (_cor1) ->
		  apply 'mpint_to_bin'/1
		      (_cor1)
	      -| [{'id',{0,0,'-map_mpint_to_bin/1-fun-0-'}}] )
	in  %% Line 1663
	    call 'lists':'map'
		(_cor3, _cor0)
'dss_sign'/2 =
    %% Line 1674
    fun (_cor1,_cor0) ->
	%% Line 1675
	apply 'dss_sign'/3
	    ('sha', _cor1, _cor0)
'dss_sign'/3 =
    %% Line 1676
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Type,Data,Key>
	      when let <_cor3> =
		    call 'erlang':'is_binary'
			(Data)
		in  let <_cor4> =
			call 'erlang':'=/='
			    (Type, 'none')
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      let <_cor6> =
		  %% Line 1677
		  apply 'mpint_to_bin'/1
		      (Data)
	      in  let <_cor5> =
		      %% Line 1677
		      apply 'map_mpint_to_bin'/1
			  (Key)
		  in  %% Line 1677
		      apply 'sign'/4
			  ('dss', Type, _cor6, _cor5)
	  %% Line 1678
	  <Type,Digest,Key> when 'true' ->
	      let <_cor7> =
		  %% Line 1679
		  apply 'map_mpint_to_bin'/1
		      (Key)
	      in  %% Line 1679
		  apply 'sign'/4
		      ('dss', Type, Digest, _cor7)
	end
'rsa_sign'/2 =
    %% Line 1683
    fun (_cor1,_cor0) ->
	%% Line 1684
	apply 'rsa_sign'/3
	    ('sha', _cor1, _cor0)
'rsa_sign'/3 =
    %% Line 1686
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Type,Data,Key>
	      when call 'erlang':'is_binary'
		    (Data) ->
	      let <_cor4> =
		  %% Line 1687
		  apply 'mpint_to_bin'/1
		      (Data)
	      in  let <_cor3> =
		      %% Line 1687
		      apply 'map_mpint_to_bin'/1
			  (Key)
		  in  %% Line 1687
		      apply 'sign'/4
			  ('rsa', Type, _cor4, _cor3)
	  %% Line 1688
	  <Type,Digest,Key> when 'true' ->
	      let <_cor5> =
		  %% Line 1689
		  apply 'map_mpint_to_bin'/1
		      (Key)
	      in  %% Line 1689
		  apply 'sign'/4
		      ('rsa', Type, Digest, _cor5)
	end
'dss_verify'/3 =
    %% Line 1701
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1702
	apply 'dss_verify'/4
	    ('sha', _cor2, _cor1, _cor0)
'dss_verify'/4 =
    %% Line 1704
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Type,Data,Signature,Key>
	      when let <_cor4> =
		    call 'erlang':'is_binary'
			(Data)
		in  let <_cor5> =
			call 'erlang':'=/='
			    (Type, 'none')
		    in  call 'erlang':'and'
			    (_cor4, _cor5) ->
	      let <_cor8> =
		  %% Line 1705
		  apply 'mpint_to_bin'/1
		      (Data)
	      in  let <_cor7> =
		      %% Line 1705
		      apply 'mpint_to_bin'/1
			  (Signature)
		  in  let <_cor6> =
			  %% Line 1705
			  apply 'map_mpint_to_bin'/1
			      (Key)
		      in  %% Line 1705
			  apply 'verify'/5
			      ('dss', Type, _cor8, _cor7, _cor6)
	  %% Line 1706
	  <Type,Digest,Signature,Key> when 'true' ->
	      let <_cor10> =
		  %% Line 1707
		  apply 'mpint_to_bin'/1
		      (Signature)
	      in  let <_cor9> =
		      %% Line 1707
		      apply 'map_mpint_to_bin'/1
			  (Key)
		  in  %% Line 1707
		      apply 'verify'/5
			  ('dss', Type, Digest, _cor10, _cor9)
	end
'rsa_verify'/3 =
    %% Line 1710
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1711
	apply 'rsa_verify'/4
	    ('sha', _cor2, _cor1, _cor0)
'rsa_verify'/4 =
    %% Line 1712
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Type,Data,Signature,Key>
	      when call 'erlang':'is_binary'
		    (Data) ->
	      let <_cor6> =
		  %% Line 1713
		  apply 'mpint_to_bin'/1
		      (Data)
	      in  let <_cor5> =
		      %% Line 1713
		      apply 'mpint_to_bin'/1
			  (Signature)
		  in  let <_cor4> =
			  %% Line 1713
			  apply 'map_mpint_to_bin'/1
			      (Key)
		      in  %% Line 1713
			  apply 'verify'/5
			      ('rsa', Type, _cor6, _cor5, _cor4)
	  %% Line 1714
	  <Type,Digest,Signature,Key> when 'true' ->
	      let <_cor8> =
		  %% Line 1715
		  apply 'mpint_to_bin'/1
		      (Signature)
	      in  let <_cor7> =
		      %% Line 1715
		      apply 'map_mpint_to_bin'/1
			  (Key)
		  in  %% Line 1715
		      apply 'verify'/5
			  ('rsa', Type, Digest, _cor8, _cor7)
	end
'strong_rand_mpint'/3 =
    %% Line 1721
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1722
	case apply 'strong_rand_mpint_nif'/3
		 (_cor2, _cor1, _cor0) of
	  %% Line 1723
	  <'false'> when 'true' ->
	      call 'erlang':'error'
		  ('low_entropy')
	  %% Line 1724
	  <Bin> when 'true' ->
	      Bin
	end
'strong_rand_mpint_nif'/3 =
    %% Line 1726
    fun (_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1726)
'mpint'/1 =
    %% Line 1731
    fun (_cor0) ->
	case _cor0 of
	  <X>
	      when call 'erlang':'<'
		    (_cor0,
		     0) ->
	      apply 'mpint_neg'/1
		  (X)
	  %% Line 1732
	  <X> when 'true' ->
	      apply 'mpint_pos'/1
		  (X)
	end
'mpint_neg'/1 =
    %% Line 1737
    fun (_cor0) ->
	let <Bin> =
	    %% Line 1738
	    apply 'int_to_bin_neg'/2
		(_cor0, [])
	in  let <Sz> =
		%% Line 1739
		call 'erlang':'byte_size'
		    (Bin)
	    in  %% Line 1740
		#{#<Sz>(32,1,'integer',['unsigned'|['big']]),
		  #<Bin>('all',8,'binary',['unsigned'|['big']])}#
'mpint_pos'/1 =
    %% Line 1742
    fun (_cor0) ->
	let <Bin> =
	    %% Line 1743
	    apply 'int_to_bin_pos'/2
		(_cor0, [])
	in  %% Line 1744
	    case Bin of
	      <#{#<MSB>(8,1,'integer',['unsigned'|['big']]),
		 #<_cor7>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		  let <Sz> =
		      %% Line 1745
		      call 'erlang':'byte_size'
			  (Bin)
		  in  %% Line 1746
		      case <> of
			<>
			    when try
				  let <_cor4> =
				      call 'erlang':'band'
					  (MSB, 128)
				  in  call 'erlang':'=='
					  (_cor4, 128)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    let <_cor5> =
				%% Line 1747
				call 'erlang':'+'
				    (Sz, 1)
			    in  %% Line 1747
				#{#<_cor5>(32,1,'integer',['unsigned'|['big']]),
				  #<0>(8,1,'integer',['unsigned'|['big']]),
				  #<Bin>('all',8,'binary',['unsigned'|['big']])}#
			%% Line 1748
			<> when 'true' ->
			    %% Line 1749
			    #{#<Sz>(32,1,'integer',['unsigned'|['big']]),
			      #<Bin>('all',8,'binary',['unsigned'|['big']])}#
		      end
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor2})
		-| ['compiler_generated'] )
	    end
'erlint'/1 =
    %% Line 1753
    fun (_cor0) ->
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <#{#<MPIntSize>(32,1,'integer',['unsigned'|['big']]),
	     #<MPIntValue>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      let <Bits> =
		  %% Line 1754
		  call 'erlang':'*'
		      (MPIntSize, 8)
	      in  %% Line 1755
		  case ( MPIntValue
			 -| ['reuse_for_context'] ) of
		    <#{#<Integer>(Bits,1,'integer',['unsigned'|['big']])}#> when 'true' ->
			%% Line 1756
			Integer
		    ( <_cor2> when 'true' ->
			  do  primop 'bs_context_to_binary'
				  (_cor2)
			      primop 'match_fail'
				  ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor3)
		    ( primop 'match_fail'
			  ({'function_clause',_cor3})
		      -| [{'function_name',{'erlint',1}}] )
	    -| ['compiler_generated'] )
	end
'mpint_to_bin'/1 =
    %% Line 1758
    fun (_cor0) ->
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <#{#<Len>(32,1,'integer',['unsigned'|['big']]),
	     #<Bin>(Len,8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 1759
	      Bin
	  ( <_cor1> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor1)
		    ( primop 'match_fail'
			  ({'function_clause',_cor1})
		      -| [{'function_name',{'mpint_to_bin',1}}] )
	    -| ['compiler_generated'] )
	end
'mod_exp'/3 =
    %% Line 1764
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Base,Exponent,Modulo>
	      when %% Line 1765
		try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (Base)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(Exponent)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (Modulo)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor9> =
		  %% Line 1766
		  apply 'int_to_bin'/1
		      (Base)
	      in  let <_cor8> =
		      %% Line 1766
		      apply 'int_to_bin'/1
			  (Exponent)
		  in  let <_cor7> =
			  %% Line 1766
			  apply 'int_to_bin'/1
			      (Modulo)
		      in  let <_cor10> =
			      %% Line 1766
			      apply 'mod_exp_nif'/4
				  (_cor9, _cor8, _cor7, 0)
			  in  %% Line 1766
			      apply 'bin_to_int'/1
				  (_cor10)
	  %% Line 1768
	  <Base,Exponent,Modulo> when 'true' ->
	      let <_cor13> =
		  %% Line 1769
		  apply 'mpint_to_bin'/1
		      (Base)
	      in  let <_cor12> =
		      %% Line 1769
		      apply 'mpint_to_bin'/1
			  (Exponent)
		  in  let <_cor11> =
			  %% Line 1769
			  apply 'mpint_to_bin'/1
			      (Modulo)
		      in  %% Line 1769
			  apply 'mod_exp_nif'/4
			      (_cor13, _cor12, _cor11, 4)
	end
'mod_exp_nif'/4 =
    %% Line 1771
    fun (_cor3,_cor2,_cor1,_cor0) ->
	apply 'nif_stub_error'/1
	    (1771)
'info'/0 =
    %% Line 1828
    fun () ->
	%% Line 1829
	['hash'|['hash_init'|['hash_update'|['hash_final'|['hmac'|['hmac_init'|['hmac_update'|['hmac_final'|['hmac_final_n'|['md4'|['md4_init'|['md4_update'|['md4_final'|['md5'|['md5_init'|['md5_update'|['md5_final'|['sha'|['sha_init'|['sha_update'|['sha_final'|['md5_mac'|['md5_mac_96'|['sha_mac'|['sha_mac_96'|['block_encrypt'|['block_decrypt'|['des_cbc_encrypt'|['des_cbc_decrypt'|['des_cfb_encrypt'|['des_cfb_decrypt'|['des_ecb_encrypt'|['des_ecb_decrypt'|['des3_cbc_encrypt'|['des3_cbc_decrypt'|['des3_cfb_encrypt'|['des3_cfb_decrypt'|['aes_cfb_128_encrypt'|['aes_cfb_128_decrypt'|['rc2_cbc_encrypt'|['rc2_cbc_decrypt'|['rc2_40_cbc_encrypt'|['rc2_40_cbc_decrypt'|['aes_cbc_128_encrypt'|['aes_cbc_128_decrypt'|['aes_cbc_256_encrypt'|['aes_cbc_256_decrypt'|['blowfish_cbc_encrypt'|['blowfish_cbc_decrypt'|['blowfish_cfb64_encrypt'|['blowfish_cfb64_decrypt'|['blowfish_ecb_encrypt'|['blowfish_ecb_decrypt'|['blowfish_ofb64_encrypt'|['rand_bytes'|['strong_rand_bytes'|['rand_uniform'|['rand_seed'|['mod_pow'|['exor'|['mod_exp'|['strong_rand_mpint'|['erlint'|['mpint'|['sign'|['verify'|['generate_key'|['compute_key'|['dss_verify'|['dss_sign'|['rsa_verify'|['rsa_sign'|['rsa_public_encrypt'|['rsa_private_decrypt'|['rsa_private_encrypt'|['rsa_public_decrypt'|['dh_generate_key'|['dh_compute_key'|['stream_init'|['stream_encrypt'|['stream_decrypt'|['rc4_encrypt'|['rc4_set_key'|['rc4_encrypt_with_state'|['aes_ctr_encrypt'|['aes_ctr_decrypt'|['aes_ctr_stream_init'|['aes_ctr_stream_encrypt'|['aes_ctr_stream_decrypt'|['next_iv'|['aes_cbc_ivec'|['des_cbc_ivec'|['des_cfb_ivec'|['info'|['info_lib'|['supports']]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('crypto')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('crypto', _cor0)
end