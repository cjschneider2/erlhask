module 'dialyzer_cl' ['module_info'/0,
		      'module_info'/1,
		      'start'/1]
    attributes [%% Line 33
		'type' =
		    %% Line 33
		    [{'dial_ret',{'type',33,'union',[{'integer',33,0}|[{'integer',34,1}|[{'integer',35,2}]]]},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'dial_warn_tag',{'type',68,'union',[{'atom',68,'warn_return_no_exit'}|[{'atom',68,'warn_return_only_exit'}|[{'atom',69,'warn_not_called'}|[{'atom',69,'warn_non_proper_list'}|[{'atom',70,'warn_matching'}|[{'atom',70,'warn_opaque'}|[{'atom',70,'warn_fun_app'}|[{'atom',71,'warn_failing_call'}|[{'atom',71,'warn_bin_construction'}|[{'atom',72,'warn_contract_types'}|[{'atom',72,'warn_contract_syntax'}|[{'atom',73,'warn_contract_not_equal'}|[{'atom',73,'warn_contract_subtype'}|[{'atom',74,'warn_contract_supertype'}|[{'atom',74,'warn_callgraph'}|[{'atom',75,'warn_umatched_return'}|[{'atom',75,'warn_race_condition'}|[{'atom',76,'warn_behaviour'}|[{'atom',76,'warn_contract_range'}|[{'atom',77,'warn_undefined_callbacks'}|[{'atom',77,'warn_unknown'}]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'file_line',{'type',83,'tuple',[{'remote_type',83,[{'atom',83,'file'}|[{'atom',83,'filename'}|[[]]]]}|[{'type',83,'non_neg_integer',[]}]]},[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{'dial_warning',{'type',84,'tuple',[{'type',84,'dial_warn_tag',[]}|[{'type',84,'file_line',[]}|[{'type',84,'tuple',[{'type',84,'atom',[]}|[{'type',84,'list',[{'type',84,'term',[]}]}]]}]]]},[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{'dial_error',{'type',89,'any',[]},[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{'anal_type',{'type',96,'union',[{'atom',96,'succ_typings'}|[{'atom',96,'plt_build'}]]},[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{'anal_type1',{'type',97,'union',[{'type',97,'anal_type',[]}|[{'atom',97,'plt_add'}|[{'atom',97,'plt_check'}|[{'atom',97,'plt_remove'}]]]]},[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{'contr_constr',{'type',98,'tuple',[{'atom',98,'subtype'}|[{'remote_type',98,[{'atom',98,'erl_types'}|[{'atom',98,'erl_type'}|[[]]]]}|[{'remote_type',98,[{'atom',98,'erl_types'}|[{'atom',98,'erl_type'}|[[]]]]}]]]},[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{'contract_pair',{'type',99,'tuple',[{'remote_type',99,[{'atom',99,'erl_types'}|[{'atom',99,'erl_type'}|[[]]]]}|[{'type',99,'list',[{'type',99,'contr_constr',[]}]}]]},[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{'dial_define',{'type',100,'tuple',[{'type',100,'atom',[]}|[{'type',100,'term',[]}]]},[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{'dial_option',{'type',101,'tuple',[{'type',101,'atom',[]}|[{'type',101,'term',[]}]]},[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{'dial_options',{'type',102,'list',[{'type',102,'dial_option',[]}]},[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{'fopt',{'type',103,'union',[{'atom',103,'basename'}|[{'atom',103,'fullpath'}]]},[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{'format',{'type',104,'union',[{'atom',104,'formatted'}|[{'atom',104,'raw'}]]},[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{'label',{'type',105,'non_neg_integer',[]},[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{'rep_mode',{'type',106,'union',[{'atom',106,'quiet'}|[{'atom',106,'normal'}|[{'atom',106,'verbose'}]]]},[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{'start_from',{'type',107,'union',[{'atom',107,'byte_code'}|[{'atom',107,'src_code'}]]},[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{'mfa_or_funlbl',{'type',108,'union',[{'type',108,'label',[]}|[{'type',108,'mfa',[]}]]},[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{'solver',{'type',109,'union',[{'atom',109,'v1'}|[{'atom',109,'v2'}]]},[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{{'record','analysis'},[{'typed_record_field',{'record_field',115,{'atom',115,'analysis_pid'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'pid',[]}]]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'type'},{'atom',116,'succ_typings'}},{'type',116,'anal_type',[]}}|[{'typed_record_field',{'record_field',117,{'atom',117,'defines'},{'nil',117}},{'type',117,'list',[{'type',117,'dial_define',[]}]}}|[{'typed_record_field',{'record_field',118,{'atom',118,'doc_plt'}},{'type',118,'union',[{'atom',118,'undefined'}|[{'remote_type',118,[{'atom',118,'dialyzer_plt'}|[{'atom',118,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',119,{'atom',119,'files'},{'nil',119}},{'type',119,'list',[{'remote_type',119,[{'atom',119,'file'}|[{'atom',119,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'include_dirs'},{'nil',120}},{'type',120,'list',[{'remote_type',120,[{'atom',120,'file'}|[{'atom',120,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',121,{'atom',121,'start_from'},{'atom',121,'byte_code'}},{'type',121,'start_from',[]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'plt'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'remote_type',122,[{'atom',122,'dialyzer_plt'}|[{'atom',122,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'use_contracts'},{'atom',123,'true'}},{'type',123,'boolean',[]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'race_detection'},{'atom',124,'false'}},{'type',124,'boolean',[]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'behaviours_chk'},{'atom',125,'false'}},{'type',125,'boolean',[]}}|[{'typed_record_field',{'record_field',126,{'atom',126,'timing'},{'atom',126,'false'}},{'type',126,'union',[{'type',126,'boolean',[]}|[{'atom',126,'debug'}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'timing_server'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'remote_type',127,[{'atom',127,'dialyzer_timing'}|[{'atom',127,'timing_server'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'callgraph_file'},{'string',128,[]}},{'remote_type',128,[{'atom',128,'file'}|[{'atom',128,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'solvers'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'list',[{'type',129,'solver',[]}]}]]}}]]]]]]]]]]]]]]],[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{{'record','options'},[{'typed_record_field',{'record_field',131,{'atom',131,'files'},{'nil',131}},{'type',131,'list',[{'remote_type',131,[{'atom',131,'file'}|[{'atom',131,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'files_rec'},{'nil',132}},{'type',132,'list',[{'remote_type',132,[{'atom',132,'file'}|[{'atom',132,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',133,{'atom',133,'analysis_type'},{'atom',133,'succ_typings'}},{'type',133,'anal_type1',[]}}|[{'typed_record_field',{'record_field',134,{'atom',134,'timing'},{'atom',134,'false'}},{'type',134,'union',[{'type',134,'boolean',[]}|[{'atom',134,'debug'}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'defines'},{'nil',135}},{'type',135,'list',[{'type',135,'dial_define',[]}]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'from'},{'atom',136,'byte_code'}},{'type',136,'start_from',[]}}|[{'typed_record_field',{'record_field',137,{'atom',137,'get_warnings'},{'atom',137,'maybe'}},{'type',137,'union',[{'type',137,'boolean',[]}|[{'atom',137,'maybe'}]]}}|[{'typed_record_field',{'record_field',138,{'atom',138,'init_plts'},{'nil',138}},{'type',138,'list',[{'remote_type',138,[{'atom',138,'file'}|[{'atom',138,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',139,{'atom',139,'include_dirs'},{'nil',139}},{'type',139,'list',[{'remote_type',139,[{'atom',139,'file'}|[{'atom',139,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'output_plt'},{'atom',140,'none'}},{'type',140,'union',[{'atom',140,'none'}|[{'remote_type',140,[{'atom',140,'file'}|[{'atom',140,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',141,{'atom',141,'legal_warnings'},{'call',141,{'remote',141,{'atom',141,'ordsets'},{'atom',141,'new'}},[]}},{'remote_type',141,[{'atom',141,'ordsets'}|[{'atom',141,'ordset'}|[[{'type',141,'dial_warn_tag',[]}]]]]}}|[{'typed_record_field',{'record_field',142,{'atom',142,'report_mode'},{'atom',142,'normal'}},{'type',142,'rep_mode',[]}}|[{'typed_record_field',{'record_field',143,{'atom',143,'erlang_mode'},{'atom',143,'false'}},{'type',143,'boolean',[]}}|[{'typed_record_field',{'record_field',144,{'atom',144,'use_contracts'},{'atom',144,'true'}},{'type',144,'boolean',[]}}|[{'typed_record_field',{'record_field',145,{'atom',145,'output_file'},{'atom',145,'none'}},{'type',145,'union',[{'atom',145,'none'}|[{'remote_type',145,[{'atom',145,'file'}|[{'atom',145,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',146,{'atom',146,'output_format'},{'atom',146,'formatted'}},{'type',146,'format',[]}}|[{'typed_record_field',{'record_field',147,{'atom',147,'filename_opt'},{'atom',147,'basename'}},{'type',147,'fopt',[]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'callgraph_file'},{'string',148,[]}},{'remote_type',148,[{'atom',148,'file'}|[{'atom',148,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'check_plt'},{'atom',149,'true'}},{'type',149,'boolean',[]}}|[{'typed_record_field',{'record_field',150,{'atom',150,'solvers'},{'nil',150}},{'type',150,'list',[{'type',150,'solver',[]}]}}]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 152
		'type' =
		    %% Line 152
		    [{{'record','contract'},[{'typed_record_field',{'record_field',152,{'atom',152,'contracts'},{'nil',152}},{'type',152,'list',[{'type',152,'contract_pair',[]}]}}|[{'typed_record_field',{'record_field',153,{'atom',153,'args'},{'nil',153}},{'type',153,'list',[{'remote_type',153,[{'atom',153,'erl_types'}|[{'atom',153,'erl_type'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',154,{'atom',154,'forms'},{'nil',154}},{'type',154,'list',[{'type',154,'tuple',[{'var',154,'_'}|[{'var',154,'_'}]]}]}}]]],[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}],
		%% Line 37
		'type' =
		    %% Line 37
		    [{{'record','cl_state'},[{'typed_record_field',{'record_field',38,{'atom',38,'backend_pid'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'pid',[]}]]}}|[{'typed_record_field',{'record_field',39,{'atom',39,'erlang_mode'},{'atom',39,'false'}},{'type',39,'boolean',[]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'external_calls'},{'nil',40}},{'type',40,'list',[{'type',40,'mfa',[]}]}}|[{'typed_record_field',{'record_field',41,{'atom',41,'external_types'},{'nil',41}},{'type',41,'list',[{'type',41,'mfa',[]}]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'legal_warnings'},{'call',42,{'remote',42,{'atom',42,'ordsets'},{'atom',42,'new'}},[]}},{'type',42,'list',[{'type',42,'dial_warn_tag',[]}]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'mod_deps'},{'call',43,{'remote',43,{'atom',43,'dict'},{'atom',43,'new'}},[]}},{'remote_type',43,[{'atom',43,'dialyzer_callgraph'}|[{'atom',43,'mod_deps'}|[[]]]]}}|[{'typed_record_field',{'record_field',44,{'atom',44,'output'},{'atom',44,'standard_io'}},{'remote_type',44,[{'atom',44,'io'}|[{'atom',44,'device'}|[[]]]]}}|[{'typed_record_field',{'record_field',45,{'atom',45,'output_format'},{'atom',45,'formatted'}},{'type',45,'format',[]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'filename_opt'},{'atom',46,'basename'}},{'type',46,'fopt',[]}}|[{'typed_record_field',{'record_field',47,{'atom',47,'output_plt'},{'atom',47,'none'}},{'type',47,'union',[{'atom',47,'none'}|[{'remote_type',47,[{'atom',47,'file'}|[{'atom',47,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',48,{'atom',48,'plt_info'},{'atom',48,'none'}},{'type',48,'union',[{'atom',48,'none'}|[{'remote_type',48,[{'atom',48,'dialyzer_plt'}|[{'atom',48,'plt_info'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',49,{'atom',49,'report_mode'},{'atom',49,'normal'}},{'type',49,'rep_mode',[]}}|[{'typed_record_field',{'record_field',50,{'atom',50,'return_status'},{'integer',50,0}},{'type',50,'dial_ret',[]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'stored_warnings'},{'nil',51}},{'type',51,'list',[{'type',51,'dial_warning',[]}]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'unknown_behaviours'},{'nil',52}},{'type',52,'list',[{'remote_type',52,[{'atom',52,'dialyzer_behaviours'}|[{'atom',52,'behaviour'}|[[]]]]}]}}]]]]]]]]]]]]]]],[]}],
		%% Line 57
		'spec' =
		    %% Line 57
		    [{{'start',1},[{'type',57,'fun',[{'type',57,'product',[{'type',57,'record',[{'atom',57,'options'}]}]}|[{'type',57,'tuple',[{'type',57,'dial_ret',[]}|[{'type',57,'list',[{'type',57,'dial_warning',[]}]}]]}]]}]}],
		%% Line 494
		'spec' =
		    %% Line 494
		    [{{'hipe_compile',2},[{'type',494,'fun',[{'type',494,'product',[{'type',494,'list',[{'remote_type',494,[{'atom',494,'file'}|[{'atom',494,'filename'}|[[]]]]}]}|[{'type',494,'record',[{'atom',494,'options'}]}]]}|[{'atom',494,'ok'}]]}]}],
		%% Line 562
		'spec' =
		    %% Line 562
		    [{{'maybe_close_output_file',1},[{'type',562,'fun',[{'type',562,'product',[{'type',562,'record',[{'atom',562,'cl_state'}]}]}|[{'atom',562,'ok'}]]}]}],
		%% Line 613
		'spec' =
		    %% Line 613
		    [{{'failed_anal_msg',2},[{'type',613,'fun',[{'type',613,'product',[{'type',613,'string',[]}|[{'type',613,'list',[{'var',613,'_'}]}]]}|[{'type',613,'nonempty_string',[]}]]}]}],
		%% Line 630
		'spec' =
		    %% Line 630
		    [{{'store_warnings',2},[{'type',630,'fun',[{'type',630,'product',[{'type',630,'record',[{'atom',630,'cl_state'}]}|[{'type',630,'list',[{'type',630,'dial_warning',[]}]}]]}|[{'type',630,'record',[{'atom',630,'cl_state'}]}]]}]}],
		%% Line 635
		'spec' =
		    %% Line 635
		    [{{'store_unknown_behaviours',2},[{'type',635,'fun',[{'type',635,'product',[{'type',635,'record',[{'atom',635,'cl_state'}]}|[{'type',635,'list',[{'remote_type',635,[{'atom',635,'dialyzer_behaviours'}|[{'atom',635,'behaviour'}|[[]]]]}]}]]}|[{'type',635,'record',[{'atom',635,'cl_state'}]}]]}]}],
		%% Line 640
		'spec' =
		    %% Line 640
		    [{{'cl_error',1},[{'type',640,'fun',[{'type',640,'product',[{'type',640,'string',[]}]}|[{'type',640,'no_return',[]}]]}]}],
		%% Line 645
		'spec' =
		    %% Line 645
		    [{{'cl_error',2},[{'type',645,'fun',[{'type',645,'product',[{'type',645,'record',[{'atom',645,'cl_state'}]}|[{'type',645,'string',[]}]]}|[{'type',645,'no_return',[]}]]}]}],
		%% Line 825
		'spec' =
		    %% Line 825
		    [{{'process_warnings',1},[{'type',825,'fun',[{'type',825,'product',[{'type',825,'list',[{'type',825,'dial_warning',[]}]}]}|[{'type',825,'list',[{'type',825,'dial_warning',[]}]}]]}]}],
		%% Line 874
		'spec' =
		    %% Line 874
		    [{{'start_analysis',2},[{'type',874,'fun',[{'type',874,'product',[{'type',874,'record',[{'atom',874,'cl_state'}]}|[{'type',874,'record',[{'atom',874,'analysis'}]}]]}|[{'type',874,'record',[{'atom',874,'cl_state'}]}]]}]}]]
'start'/1 =
    %% Line 59
    fun (_cor0) ->
	case _cor0 of
	  <Options = {'options',_cor3,_cor4,AnalysisType,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}> when 'true' ->
	      do  %% Line 60
		  call 'erlang':'process_flag'
		      ('trap_exit', 'true')
		  %% Line 61
		  case AnalysisType of
		    %% Line 62
		    <'plt_check'> when 'true' ->
			apply 'check_plt'/1
			    (Options)
		    %% Line 63
		    <'plt_build'> when 'true' ->
			apply 'build_plt'/1
			    (Options)
		    %% Line 64
		    <'plt_add'> when 'true' ->
			apply 'add_to_plt'/1
			    (Options)
		    %% Line 65
		    <'plt_remove'> when 'true' ->
			apply 'remove_from_plt'/1
			    (Options)
		    %% Line 66
		    <'succ_typings'> when 'true' ->
			apply 'do_analysis'/1
			    (Options)
		    ( <_cor1> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor1})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'start',1}}] )
	    -| ['compiler_generated'] )
	end
'build_plt'/1 =
    %% Line 71
    fun (_cor0) ->
	let <Opts1> =
	    %% Line 72
	    apply 'init_opts_for_build'/1
		(_cor0)
	in  let <Files> =
		%% Line 73
		apply 'get_files_from_opts'/1
		    (Opts1)
	    in  let <Md5> =
		    %% Line 74
		    call 'dialyzer_plt':'compute_md5_from_files'
			(Files)
		in  let <_cor4> =
			%% Line 75
			call 'dict':'new'
			    ()
		    in  let <PltInfo> = {%% Line 75
			     Md5,_cor4}
			in  let <_cor6> =
				%% Line 76
				call 'dialyzer_plt':'new'
				    ()
			    in  %% Line 76
				apply 'do_analysis'/4
				    (Files, Opts1, _cor6, PltInfo)
'init_opts_for_build'/1 =
    %% Line 78
    fun (_cor0) ->
	%% Line 79
	( case _cor0 of
	    ( <( {'options',_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_rec0,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36}
		 -| ['compiler_generated'] )> when 'true' ->
		  case <> of
		    %% Line 80
		    <>
			when call 'erlang':'=:='
			      (_rec0,
			       'none') ->
			%% Line 81
			case _cor25 of
			  %% Line 82
			  <[]> when 'true' ->
			      let <_rec2> =
				  apply 'get_default_output_plt'/0
				      ()
			      in  call 'erlang':'setelement'
				      (11, _cor0, _rec2)
			  %% Line 83
			  <[Plt|[]]> when 'true' ->
			      let <_cor9> =
				  call 'erlang':'setelement'
				      (11, _cor0, Plt)
			      in  call 'erlang':'setelement'
				      (9, _cor9, [])
			  %% Line 84
			  <Plts> when 'true' ->
			      let <_cor11> =
				  %% Line 86
				  apply 'format_plts'/1
				      (Plts)
			      in  let <Msg> =
				      %% Line 85
				      call 'io_lib':'format'
					  ([67|[111|[117|[108|[100|[32|[110|[111|[116|[32|[98|[117|[105|[108|[100|[32|[109|[117|[108|[116|[105|[112|[108|[101|[32|[80|[76|[84|[32|[102|[105|[108|[101|[115|[58|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 86
																																	 [_cor11|[]])
				  in  %% Line 87
				      apply 'cl_error'/1
					  (Msg)
			end
		    %% Line 89
		    <> when 'true' ->
			call 'erlang':'setelement'
			    (9, _cor0, [])
		  end
	      -| ['compiler_generated'] )
	    ( <_cor37> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','options'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'add_to_plt'/1 =
    %% Line 94
    fun (_cor0) ->
	let <Opts1> =
	    %% Line 95
	    apply 'init_opts_for_add'/1
		(_cor0)
	in  let <AddFiles> =
		%% Line 96
		apply 'get_files_from_opts'/1
		    (Opts1)
	    in  %% Line 97
		apply 'plt_common'/3
		    (Opts1, [], AddFiles)
'init_opts_for_add'/1 =
    %% Line 99
    fun (_cor0) ->
	%% Line 100
	( case _cor0 of
	    ( <( {'options',_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_rec6,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41}
		 -| ['compiler_generated'] )> when 'true' ->
		  case <> of
		    %% Line 101
		    <>
			when call 'erlang':'=:='
			      (_rec6,
			       'none') ->
			%% Line 102
			case _cor30 of
			  %% Line 103
			  <[]> when 'true' ->
			      let <_rec8> =
				  apply 'get_default_output_plt'/0
				      ()
			      in  let <_rec9> =
				      %% Line 104
				      apply 'get_default_init_plt'/0
					  ()
				  in  let <_cor8> =
					  call 'erlang':'setelement'
					      (11, _cor0, _rec8)
				      in  %% Line 104
					  call 'erlang':'setelement'
					      (9, _cor8, _rec9)
			  %% Line 105
			  <[Plt|[]]> when 'true' ->
			      call 'erlang':'setelement'
				  (11, _cor0, Plt)
			  %% Line 106
			  <Plts> when 'true' ->
			      let <_cor12> =
				  %% Line 108
				  apply 'format_plts'/1
				      (Plts)
			      in  let <Msg> =
				      %% Line 107
				      call 'io_lib':'format'
					  ([67|[111|[117|[108|[100|[32|[110|[111|[116|[32|[97|[100|[100|[32|[116|[111|[32|[109|[117|[108|[116|[105|[112|[108|[101|[32|[80|[76|[84|[32|[102|[105|[108|[101|[115|[58|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 108
																																	      [_cor12|[]])
				  in  %% Line 109
				      apply 'cl_error'/1
					  (Msg)
			end
		    %% Line 111
		    <> when 'true' ->
			%% Line 112
			case <> of
			  %% Line 113
			  <>
			      when call 'erlang':'=:='
				    (_cor30,
				     []) ->
			      let <_rec13> =
				  apply 'get_default_init_plt'/0
				      ()
			      in  call 'erlang':'setelement'
				      (9, _cor0, _rec13)
			  %% Line 114
			  <> when 'true' ->
			      _cor0
			end
		  end
	      -| ['compiler_generated'] )
	    ( <_cor42> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','options'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'check_plt'/1 =
    %% Line 120
    fun (_cor0) ->
	case _cor0 of
	  <Opts = {'options',_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,[],_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}> when 'true' ->
	      let <Opts1> =
		  %% Line 121
		  apply 'init_opts_for_check'/1
		      (Opts)
	      in  do  %% Line 122
		      apply 'report_check'/1
			  (Opts1)
		      %% Line 123
		      apply 'plt_common'/3
			  (Opts1, [], [])
	  %% Line 124
	  <Opts = {'options',_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,Plts,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40}> when 'true' ->
	      %% Line 125
	      apply 'check_plt_aux'/2
		  (Plts, Opts)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'check_plt',1}}] )
	    -| ['compiler_generated'] )
	end
'check_plt_aux'/2 =
    %% Line 127
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Plt = [_cor12|[]],Opts> when 'true' ->
	      %% Line 128
	      case Opts of
		<{'options',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32}> when 'true' ->
		    let <_cor4> =
			call 'erlang':'setelement'
			    (9, Opts, Plt)
		    in  let <Opts2> =
			    %% Line 129
			    apply 'init_opts_for_check'/1
				(_cor4)
			in  do  %% Line 130
				apply 'report_check'/1
				    (Opts2)
				%% Line 131
				apply 'plt_common'/3
				    (Opts2, [], [])
		( <_cor33> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','options'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 132
	  <[Plt|Plts],Opts> when 'true' ->
	      %% Line 133
	      case apply 'check_plt_aux'/2
		       ([Plt|[]], Opts) of
		%% Line 134
		<{0,[]}> when 'true' ->
		    apply 'check_plt_aux'/2
			(Plts, Opts)
		%% Line 135
		<{2,Warns}> when 'true' ->
		    %% Line 136
		    case apply 'check_plt_aux'/2
			     (Plts, Opts) of
		      <{_X_RET,MoreWarns}> when 'true' ->
			  let <_cor8> =
			      %% Line 137
			      call 'erlang':'++'
				  (Warns, MoreWarns)
			  in  %% Line 137
			      {2,_cor8}
		      ( <_cor7> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor7})
			-| ['compiler_generated'] )
		    end
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'check_plt_aux',2}}] )
	    -| ['compiler_generated'] )
	end
'init_opts_for_check'/1 =
    %% Line 140
    fun (_cor0) ->
	%% Line 142
	( case _cor0 of
	    ( <( {'options',_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_rec16,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor4> =
		      case _rec16 of
			%% Line 143
			<[]> when 'true' ->
			    apply 'get_default_init_plt'/0
				()
			%% Line 144
			<Plt> when 'true' ->
			    Plt
		      end
		  in  %% Line 146
		      case _cor4 of
			<[OutputPlt|[]]> when 'true' ->
			    let <_cor8> =
				%% Line 155
				call 'erlang':'setelement'
				    (15, _cor0, 'true')
			    in  let <_cor9> =
				    %% Line 154
				    call 'erlang':'setelement'
					(11, _cor8, OutputPlt)
				in  let <_cor10> =
					%% Line 153
					call 'erlang':'setelement'
					    (10, _cor9, [])
				    in  let <_cor11> =
					    %% Line 152
					    call 'erlang':'setelement'
						(9, _cor10, _cor4)
					in  let <_cor12> =
						%% Line 151
						call 'erlang':'setelement'
						    (7, _cor11, 'byte_code')
					    in  let <_cor13> =
						    %% Line 150
						    call 'erlang':'setelement'
							(6, _cor12, [])
						in  let <_cor14> =
							%% Line 149
							call 'erlang':'setelement'
							    (4, _cor13, 'plt_check')
						    in  let <_cor15> =
							    %% Line 148
							    call 'erlang':'setelement'
								(3, _cor14, [])
							in  %% Line 147
							    call 'erlang':'setelement'
								(2, _cor15, [])
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_cor37> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','options'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'remove_from_plt'/1 =
    %% Line 160
    fun (_cor0) ->
	let <Opts1> =
	    %% Line 161
	    apply 'init_opts_for_remove'/1
		(_cor0)
	in  let <Files> =
		%% Line 162
		apply 'get_files_from_opts'/1
		    (Opts1)
	    in  %% Line 163
		apply 'plt_common'/3
		    (Opts1, Files, [])
'init_opts_for_remove'/1 =
    %% Line 165
    fun (_cor0) ->
	%% Line 166
	( case _cor0 of
	    ( <( {'options',_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_rec18,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41}
		 -| ['compiler_generated'] )> when 'true' ->
		  case <> of
		    %% Line 167
		    <>
			when call 'erlang':'=:='
			      (_rec18,
			       'none') ->
			%% Line 168
			case _cor30 of
			  %% Line 169
			  <[]> when 'true' ->
			      let <_rec20> =
				  apply 'get_default_output_plt'/0
				      ()
			      in  let <_rec21> =
				      %% Line 170
				      apply 'get_default_init_plt'/0
					  ()
				  in  let <_cor8> =
					  call 'erlang':'setelement'
					      (11, _cor0, _rec20)
				      in  %% Line 170
					  call 'erlang':'setelement'
					      (9, _cor8, _rec21)
			  %% Line 171
			  <[Plt|[]]> when 'true' ->
			      call 'erlang':'setelement'
				  (11, _cor0, Plt)
			  %% Line 172
			  <Plts> when 'true' ->
			      let <_cor12> =
				  %% Line 174
				  apply 'format_plts'/1
				      (Plts)
			      in  let <Msg> =
				      %% Line 173
				      call 'io_lib':'format'
					  ([67|[111|[117|[108|[100|[32|[110|[111|[116|[32|[114|[101|[109|[111|[118|[101|[32|[102|[114|[111|[109|[32|[109|[117|[108|[116|[105|[112|[108|[101|[32|[80|[76|[84|[32|[102|[105|[108|[101|[115|[58|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 174
																																					     [_cor12|[]])
				  in  %% Line 175
				      apply 'cl_error'/1
					  (Msg)
			end
		    %% Line 177
		    <> when 'true' ->
			%% Line 178
			case <> of
			  %% Line 179
			  <>
			      when call 'erlang':'=:='
				    (_cor30,
				     []) ->
			      let <_rec25> =
				  apply 'get_default_init_plt'/0
				      ()
			      in  call 'erlang':'setelement'
				      (9, _cor0, _rec25)
			  %% Line 180
			  <> when 'true' ->
			      _cor0
			end
		  end
	      -| ['compiler_generated'] )
	    ( <_cor42> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','options'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'plt_common'/3 =
    %% Line 186
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Opts = {'options',_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,[InitPlt|[]],_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54},RemoveFiles,AddFiles> when 'true' ->
	      %% Line 187
	      case apply 'check_plt'/3
		       (Opts, RemoveFiles, AddFiles) of
		%% Line 188
		<'ok'> when 'true' ->
		    do  %% Line 189
			case _cor44 of
			  %% Line 190
			  <'none'> when 'true' ->
			      'ok'
			  %% Line 191
			  <_cor75>
			      when call 'erlang':'=:='
				    (_cor44,
				     InitPlt) ->
			      'ok'
			  %% Line 192
			  <OutPlt> when 'true' ->
			      %% Line 193
			      case call 'file':'read_file'
				       (InitPlt) of
				<{'ok',Binary}> when 'true' ->
				    %% Line 194
				    case call 'file':'write_file'
					     (OutPlt, Binary) of
				      <'ok'> when 'true' ->
					  'ok'
				      ( <_cor6> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor6})
					-| ['compiler_generated'] )
				    end
				( <_cor5> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor5})
				  -| ['compiler_generated'] )
			      end
			end
			do  %% Line 196
			    case _cor46 of
			      %% Line 197
			      <'quiet'> when 'true' ->
				  'ok'
			      %% Line 198
			      <_cor97> when 'true' ->
				  call 'io':'put_chars'
				      ([32|[121|[101|[115|[10]]]]])
			    end
			    %% Line 200
			    {0,[]}
		%% Line 201
		<{'old_version',Md5}> when 'true' ->
		    let <_cor11> =
			%% Line 202
			call 'dict':'new'
			    ()
		    in  let <PltInfo> = {%% Line 202
			     Md5,_cor11}
			in  let <_cor17> =
				%% Line 203
				( letrec
				      'lc$^0'/1 =
					  fun (_cor15) ->
					      case _cor15 of
						<[{F,_cor98}|_cor14]> when 'true' ->
						    let <_cor16> =
							apply 'lc$^0'/1
							    (_cor14)
						    in  ( [F|_cor16]
							  -| ['compiler_generated'] )
						( <[_cor13|_cor14]> when 'true' ->
						      apply 'lc$^0'/1
							  (_cor14)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor15> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor15})
							-| [{'function_name',{'lc$^0',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^0'/1
					  (Md5)
				  -| ['list_comprehension'] )
			    in  let <_cor19> =
				    %% Line 204
				    call 'dialyzer_plt':'new'
					()
				in  %% Line 204
				    apply 'do_analysis'/4
					(_cor17, Opts, _cor19, PltInfo)
		%% Line 205
		<{'differ',Md5,DiffMd5,ModDeps}> when 'true' ->
		    do  %% Line 206
			apply 'report_failed_plt_check'/2
			    (Opts, DiffMd5)
			%% Line 207
			case %% Line 208
			     apply 'expand_dependent_modules'/3
				 (Md5, DiffMd5, ModDeps) of
			  <{AnalFiles,RemovedMods,ModDeps1}> when 'true' ->
			      let <Plt> =
				  %% Line 209
				  apply 'clean_plt'/2
				      (InitPlt, RemovedMods)
			      in  %% Line 210
				  case <> of
				    %% Line 211
				    <>
					when call 'erlang':'=:='
					      (AnalFiles,
					       []) ->
					do  %% Line 213
					    call 'dialyzer_plt':'to_file'
						(_cor44, Plt, ModDeps, %% Line 214
								       {Md5,ModDeps})
					    %% Line 215
					    {0,[]}
				    %% Line 216
				    <> when 'true' ->
					%% Line 217
					apply 'do_analysis'/4
					    (AnalFiles, Opts, Plt, {Md5,ModDeps1})
				  end
			  ( <_cor20> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor20})
			    -| ['compiler_generated'] )
			end
		%% Line 219
		<{'error','no_such_file'}> when 'true' ->
		    let <_cor25> =
			%% Line 221
			apply 'default_plt_error_msg'/0
			    ()
		    in  let <Msg> =
			    %% Line 220
			    call 'io_lib':'format'
				([67|[111|[117|[108|[100|[32|[110|[111|[116|[32|[102|[105|[110|[100|[32|[116|[104|[101|[32|[80|[76|[84|[58|[32|[126|[115|[10|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 221
																								     [InitPlt|[_cor25|[]]])
			in  %% Line 222
			    apply 'cl_error'/1
				(Msg)
		%% Line 223
		<{'error','not_valid'}> when 'true' ->
		    let <_cor27> =
			%% Line 225
			apply 'default_plt_error_msg'/0
			    ()
		    in  let <Msg> =
			    %% Line 224
			    call 'io_lib':'format'
				([84|[104|[101|[32|[102|[105|[108|[101|[58|[32|[126|[115|[32|[105|[115|[32|[110|[111|[116|[32|[97|[32|[118|[97|[108|[105|[100|[32|[80|[76|[84|[32|[102|[105|[108|[101|[10|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 225
																															    [InitPlt|[_cor27|[]]])
			in  %% Line 226
			    apply 'cl_error'/1
				(Msg)
		%% Line 227
		<{'error','read_error'}> when 'true' ->
		    let <_cor29> =
			%% Line 229
			apply 'default_plt_error_msg'/0
			    ()
		    in  let <Msg> =
			    %% Line 228
			    call 'io_lib':'format'
				([67|[111|[117|[108|[100|[32|[110|[111|[116|[32|[114|[101|[97|[100|[32|[116|[104|[101|[32|[80|[76|[84|[58|[32|[126|[115|[10|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 229
																								    [InitPlt|[_cor29|[]]])
			in  %% Line 230
			    apply 'cl_error'/1
				(Msg)
		%% Line 231
		<{'error',{'no_file_to_remove',F}}> when 'true' ->
		    let <Msg> =
			%% Line 232
			call 'io_lib':'format'
			    ([67|[111|[117|[108|[100|[32|[110|[111|[116|[32|[114|[101|[109|[111|[118|[101|[32|[116|[104|[101|[32|[102|[105|[108|[101|[32|[126|[115|[32|[102|[114|[111|[109|[32|[116|[104|[101|[32|[80|[76|[84|[58|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 233
																																				   [F|[InitPlt|[]]])
		    in  %% Line 234
			apply 'cl_error'/1
			    (Msg)
		( <_cor32> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor32})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor35,_cor34,_cor33> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor35,_cor34,_cor33})
		  -| [{'function_name',{'plt_common',3}}] )
	    -| ['compiler_generated'] )
	end
'default_plt_error_msg'/0 =
    %% Line 237
    fun () ->
	%% Line 238
	[85|[115|[101|[32|[116|[104|[101|[32|[111|[112|[116|[105|[111|[110|[115|[58|[10|[32|[32|[32|[45|[45|[98|[117|[105|[108|[100|[95|[112|[108|[116|[32|[32|[32|[116|[111|[32|[98|[117|[105|[108|[100|[32|[97|[32|[110|[101|[119|[32|[80|[76|[84|[59|[32|[111|[114|[10|[32|[32|[32|[45|[45|[97|[100|[100|[95|[116|[111|[95|[112|[108|[116|[32|[32|[116|[111|[32|[97|[100|[100|[32|[116|[111|[32|[97|[110|[32|[101|[120|[105|[115|[116|[105|[110|[103|[32|[80|[76|[84|[10|[10|[70|[111|[114|[32|[101|[120|[97|[109|[112|[108|[101|[44|[32|[117|[115|[101|[32|[97|[32|[99|[111|[109|[109|[97|[110|[100|[32|[108|[105|[107|[101|[32|[116|[104|[101|[32|[102|[111|[108|[108|[111|[119|[105|[110|[103|[58|[10|[32|[32|[32|[100|[105|[97|[108|[121|[122|[101|[114|[32|[45|[45|[98|[117|[105|[108|[100|[95|[112|[108|[116|[32|[45|[45|[97|[112|[112|[115|[32|[101|[114|[116|[115|[32|[107|[101|[114|[110|[101|[108|[32|[115|[116|[100|[108|[105|[98|[32|[109|[110|[101|[115|[105|[97|[10|[78|[111|[116|[101|[32|[116|[104|[97|[116|[32|[98|[117|[105|[108|[100|[105|[110|[103|[32|[97|[32|[80|[76|[84|[32|[115|[117|[99|[104|[32|[97|[115|[32|[116|[104|[101|[32|[97|[98|[111|[118|[101|[32|[109|[97|[121|[32|[116|[97|[107|[101|[32|[50|[48|[32|[109|[105|[110|[115|[32|[111|[114|[32|[115|[111|[10|[10|[73|[102|[32|[121|[111|[117|[32|[108|[97|[116|[101|[114|[32|[110|[101|[101|[100|[32|[105|[110|[102|[111|[114|[109|[97|[116|[105|[111|[110|[32|[97|[98|[111|[117|[116|[32|[111|[116|[104|[101|[114|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[115|[44|[32|[115|[97|[121|[32|[99|[114|[121|[112|[116|[111|[44|[10|[121|[111|[117|[32|[99|[97|[110|[32|[101|[120|[116|[101|[110|[100|[32|[116|[104|[101|[32|[80|[76|[84|[32|[98|[121|[32|[116|[104|[101|[32|[99|[111|[109|[109|[97|[110|[100|[58|[10|[32|[32|[100|[105|[97|[108|[121|[122|[101|[114|[32|[45|[45|[97|[100|[100|[95|[116|[111|[95|[112|[108|[116|[32|[45|[45|[97|[112|[112|[115|[32|[99|[114|[121|[112|[116|[111|[10|[70|[111|[114|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[115|[32|[116|[104|[97|[116|[32|[97|[114|[101|[32|[110|[111|[116|[32|[105|[110|[32|[69|[114|[108|[97|[110|[103|[47|[79|[84|[80|[32|[117|[115|[101|[32|[97|[110|[32|[97|[98|[115|[111|[108|[117|[116|[101|[32|[102|[105|[108|[101|[32|[110|[97|[109|[101|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
'check_plt'/3 =
    %% Line 253
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Opts = {'options',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,[Plt|[]],_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25},RemoveFiles,AddFiles> when 'true' ->
	      %% Line 254
	      case call 'dialyzer_plt':'check_plt'
		       (Plt, RemoveFiles, AddFiles) of
		%% Line 255
		<OldVersion = {'old_version',_X_MD5}> when 'true' ->
		    do  %% Line 256
			apply 'report_old_version'/1
			    (Opts)
			%% Line 257
			OldVersion
		%% Line 258
		<Differ = {'differ',_X_MD5,_X_DiffMd5,_X_ModDeps}> when 'true' ->
		    %% Line 259
		    Differ
		%% Line 260
		<'ok'> when 'true' ->
		    %% Line 261
		    'ok'
		%% Line 262
		<Error = {'error',_X_Reason}> when 'true' ->
		    %% Line 263
		    Error
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'check_plt',3}}] )
	    -| ['compiler_generated'] )
	end
'report_check'/1 =
    %% Line 268
    fun (_cor0) ->
	case _cor0 of
	  <{'options',_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,[InitPlt|[]],_cor10,_cor11,_cor12,ReportMode,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20}> when 'true' ->
	      %% Line 269
	      case ReportMode of
		%% Line 270
		<'quiet'> when 'true' ->
		    'ok'
		%% Line 271
		<_cor21> when 'true' ->
		    %% Line 272
		    call 'io':'format'
			([32|[32|[67|[104|[101|[99|[107|[105|[110|[103|[32|[119|[104|[101|[116|[104|[101|[114|[32|[116|[104|[101|[32|[80|[76|[84|[32|[126|[115|[32|[105|[115|[32|[117|[112|[45|[116|[111|[45|[100|[97|[116|[101|[46|[46|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [InitPlt|[]])
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'report_check',1}}] )
	    -| ['compiler_generated'] )
	end
'report_old_version'/1 =
    %% Line 275
    fun (_cor0) ->
	case _cor0 of
	  <{'options',_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,[InitPlt|[]],_cor10,_cor11,_cor12,ReportMode,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20}> when 'true' ->
	      %% Line 276
	      case ReportMode of
		%% Line 277
		<'quiet'> when 'true' ->
		    'ok'
		%% Line 278
		<_cor21> when 'true' ->
		    do  %% Line 279
			call 'io':'put_chars'
			    ([32|[110|[111|[10]]]])
			%% Line 280
			call 'io':'format'
			    ([32|[32|[32|[32|[40|[116|[104|[101|[32|[80|[76|[84|[32|[126|[115|[32|[119|[97|[115|[32|[98|[117|[105|[108|[116|[32|[119|[105|[116|[104|[32|[97|[110|[32|[111|[108|[100|[32|[118|[101|[114|[115|[105|[111|[110|[32|[111|[102|[32|[68|[105|[97|[108|[121|[122|[101|[114|[41|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 281
																																												       [InitPlt|[]])
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'report_old_version',1}}] )
	    -| ['compiler_generated'] )
	end
'report_failed_plt_check'/2 =
    %% Line 284
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'options',_cor6,_cor7,AnalType,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,%% Line 285
												 ReportMode,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23},%% Line 285
																				     DiffMd5> when 'true' ->
	      %% Line 286
	      case <> of
		%% Line 287
		<>
		    when call 'erlang':'=:='
			  (AnalType,
			   'plt_check') ->
		    %% Line 288
		    case ReportMode of
		      %% Line 289
		      <'quiet'> when 'true' ->
			  'ok'
		      %% Line 290
		      <'normal'> when 'true' ->
			  call 'io':'format'
			      ([32|[110|[111|[10]]]], [])
		      %% Line 291
		      <'verbose'> when 'true' ->
			  apply 'report_md5_diff'/1
			      (DiffMd5)
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 293
		<> when 'true' ->
		    'ok'
	      end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'report_failed_plt_check',2}}] )
	    -| ['compiler_generated'] )
	end
'report_analysis_start'/1 =
    %% Line 296
    fun (_cor0) ->
	case _cor0 of
	  <{'options',_cor8,_cor9,Type,_cor10,_cor11,_cor12,_cor13,%% Line 298
								   InitPlts,_cor14,%% Line 299
										   OutputPlt,_cor15,%% Line 297
												    ReportMode,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23}> when 'true' ->
	      %% Line 300
	      case ReportMode of
		%% Line 301
		<'quiet'> when 'true' ->
		    'ok'
		%% Line 302
		<_cor24> when 'true' ->
		    do  %% Line 303
			call 'io':'format'
			    ([32|[32]])
			%% Line 304
			case Type of
			  %% Line 305
			  <'plt_add'> when 'true' ->
			      %% Line 306
			      case InitPlts of
				<[InitPlt|[]]> when 'true' ->
				    %% Line 307
				    case <> of
				      %% Line 308
				      <>
					  when call 'erlang':'=:='
						(InitPlt,
						 OutputPlt) ->
					  call 'io':'format'
					      ([65|[100|[100|[105|[110|[103|[32|[105|[110|[102|[111|[114|[109|[97|[116|[105|[111|[110|[32|[116|[111|[32|[126|[115|[46|[46|[46]]]]]]]]]]]]]]]]]]]]]]]]]]], [OutputPlt|[]])
				      %% Line 309
				      <> when 'true' ->
					  call 'io':'format'
					      ([65|[100|[100|[105|[110|[103|[32|[105|[110|[102|[111|[114|[109|[97|[116|[105|[111|[110|[32|[102|[114|[111|[109|[32|[126|[115|[32|[116|[111|[32|[126|[115|[46|[46|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 310
																															[InitPlt|[OutputPlt|[]]])
				    end
				( <_cor1> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor1})
				  -| ['compiler_generated'] )
			      end
			  %% Line 312
			  <'plt_build'> when 'true' ->
			      %% Line 313
			      call 'io':'format'
				  ([67|[114|[101|[97|[116|[105|[110|[103|[32|[80|[76|[84|[32|[126|[115|[32|[46|[46|[46]]]]]]]]]]]]]]]]]]], [OutputPlt|[]])
			  %% Line 314
			  <'plt_check'> when 'true' ->
			      %% Line 315
			      call 'io':'format'
				  ([82|[101|[98|[117|[105|[108|[100|[105|[110|[103|[32|[116|[104|[101|[32|[105|[110|[102|[111|[114|[109|[97|[116|[105|[111|[110|[32|[105|[110|[32|[126|[115|[46|[46|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [OutputPlt|[]])
			  %% Line 316
			  <'plt_remove'> when 'true' ->
			      %% Line 317
			      case InitPlts of
				<[InitPlt|[]]> when 'true' ->
				    %% Line 318
				    case <> of
				      %% Line 319
				      <>
					  when call 'erlang':'=:='
						(InitPlt,
						 OutputPlt) ->
					  call 'io':'format'
					      ([82|[101|[109|[111|[118|[105|[110|[103|[32|[105|[110|[102|[111|[114|[109|[97|[116|[105|[111|[110|[32|[102|[114|[111|[109|[32|[126|[115|[46|[46|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [OutputPlt|[]])
				      %% Line 320
				      <> when 'true' ->
					  call 'io':'format'
					      ([82|[101|[109|[111|[118|[105|[110|[103|[32|[105|[110|[102|[111|[114|[109|[97|[116|[105|[111|[110|[32|[102|[114|[111|[109|[32|[126|[115|[32|[116|[111|[32|[126|[115|[46|[46|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 321
																																    [InitPlt|[OutputPlt|[]]])
				    end
				( <_cor3> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor3})
				  -| ['compiler_generated'] )
			      end
			  %% Line 323
			  <'succ_typings'> when 'true' ->
			      call 'io':'format'
				  ([80|[114|[111|[99|[101|[101|[100|[105|[110|[103|[32|[119|[105|[116|[104|[32|[97|[110|[97|[108|[121|[115|[105|[115|[46|[46|[46]]]]]]]]]]]]]]]]]]]]]]]]]]])
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor5})
			    -| ['compiler_generated'] )
			end
	      end
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'report_analysis_start',1}}] )
	    -| ['compiler_generated'] )
	end
'report_native_comp'/1 =
    %% Line 327
    fun (_cor0) ->
	case _cor0 of
	  <{'options',_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,ReportMode,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}> when 'true' ->
	      %% Line 328
	      case ReportMode of
		%% Line 329
		<'quiet'> when 'true' ->
		    'ok'
		%% Line 330
		<_cor22> when 'true' ->
		    call 'io':'format'
			([32|[32|[67|[111|[109|[112|[105|[108|[105|[110|[103|[32|[115|[111|[109|[101|[32|[107|[101|[121|[32|[109|[111|[100|[117|[108|[101|[115|[32|[116|[111|[32|[110|[97|[116|[105|[118|[101|[32|[99|[111|[100|[101|[46|[46|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'report_native_comp',1}}] )
	    -| ['compiler_generated'] )
	end
'report_elapsed_time'/3 =
    %% Line 333
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <T1,T2,{'options',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,ReportMode,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29}> when 'true' ->
	      %% Line 334
	      case ReportMode of
		%% Line 335
		<'quiet'> when 'true' ->
		    'ok'
		%% Line 336
		<_cor30> when 'true' ->
		    let <ElapsedTime> =
			%% Line 337
			call 'erlang':'-'
			    (T2, T1)
		    in  let <Mins> =
			    %% Line 338
			    call 'erlang':'div'
				(ElapsedTime, 60000)
			in  let <_cor5> =
				%% Line 339
				call 'erlang':'rem'
				    (ElapsedTime, 60000)
			    in  let <Secs> =
				    %% Line 339
				    call 'erlang':'/'
					(_cor5, 1000)
				in  %% Line 340
				    call 'io':'format'
					([32|[100|[111|[110|[101|[32|[105|[110|[32|[126|[119|[109|[126|[46|[50|[102|[115|[10]]]]]]]]]]]]]]]]]], [Mins|[Secs|[]]])
	      end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'report_elapsed_time',3}}] )
	    -| ['compiler_generated'] )
	end
'report_md5_diff'/1 =
    %% Line 343
    fun (_cor0) ->
	do  %% Line 344
	    call 'io':'format'
		([32|[32|[32|[32|[84|[104|[101|[32|[80|[76|[84|[32|[105|[110|[102|[111|[114|[109|[97|[116|[105|[111|[110|[32|[105|[115|[32|[110|[111|[116|[32|[117|[112|[32|[116|[111|[32|[100|[97|[116|[101|[58|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
	    let <_cor5> =
		%% Line 345
		( letrec
		      'lc$^0'/1 =
			  fun (_cor3) ->
			      case _cor3 of
				<[{'removed',Mod}|_cor2]> when 'true' ->
				    let <_cor4> =
					apply 'lc$^0'/1
					    (_cor2)
				    in  ( [Mod|_cor4]
					  -| ['compiler_generated'] )
				( <[_cor1|_cor2]> when 'true' ->
				      apply 'lc$^0'/1
					  (_cor2)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor3> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor3})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (_cor0)
		  -| ['list_comprehension'] )
	    in  do  %% Line 345
		    case _cor5 of
		      %% Line 346
		      <[]> when 'true' ->
			  'ok'
		      %% Line 347
		      <RemovedMods> when 'true' ->
			  call 'io':'format'
			      ([32|[32|[32|[32|[82|[101|[109|[111|[118|[101|[100|[32|[109|[111|[100|[117|[108|[101|[115|[58|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]], [RemovedMods|[]])
		    end
		    let <_cor11> =
			%% Line 349
			( letrec
			      'lc$^1'/1 =
				  fun (_cor9) ->
				      case _cor9 of
					<[{'differ',Mod}|_cor8]> when 'true' ->
					    let <_cor10> =
						apply 'lc$^1'/1
						    (_cor8)
					    in  ( [Mod|_cor10]
						  -| ['compiler_generated'] )
					( <[_cor7|_cor8]> when 'true' ->
					      apply 'lc$^1'/1
						  (_cor8)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor9> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor9})
						-| [{'function_name',{'lc$^1',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^1'/1
				  (_cor0)
			  -| ['list_comprehension'] )
		    in  %% Line 349
			case _cor11 of
			  %% Line 350
			  <[]> when 'true' ->
			      'ok'
			  %% Line 351
			  <ChangedMods> when 'true' ->
			      call 'io':'format'
				  ([32|[32|[32|[32|[67|[104|[97|[110|[103|[101|[100|[32|[109|[111|[100|[117|[108|[101|[115|[58|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]], [ChangedMods|[]])
			end
'get_default_init_plt'/0 =
    %% Line 356
    fun () ->
	let <_cor0> =
	    %% Line 357
	    call 'dialyzer_plt':'get_default_plt'
		()
	in  %% Line 357
	    [_cor0|[]]
'get_default_output_plt'/0 =
    %% Line 359
    fun () ->
	%% Line 360
	call 'dialyzer_plt':'get_default_plt'
	    ()
'format_plts'/1 =
    %% Line 364
    fun (_cor0) ->
	case _cor0 of
	  <[Plt|[]]> when 'true' ->
	      Plt
	  %% Line 365
	  <[Plt|Plts]> when 'true' ->
	      let <_cor1> =
		  %% Line 366
		  apply 'format_plts'/1
		      (Plts)
	      in  let <_cor2> =
		      %% Line 366
		      [44|[32|_cor1]]
		  in  %% Line 366
		      call 'erlang':'++'
			  (Plt, _cor2)
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'format_plts',1}}] )
	    -| ['compiler_generated'] )
	end
'do_analysis'/1 =
    %% Line 370
    fun (_cor0) ->
	let <Files> =
	    %% Line 371
	    apply 'get_files_from_opts'/1
		(_cor0)
	in  %% Line 372
	    ( case _cor0 of
		( <( {'options',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_rec30,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33}
		     -| ['compiler_generated'] )> when 'true' ->
		      case _rec30 of
			%% Line 373
			<[]> when 'true' ->
			    let <_cor4> =
				call 'dialyzer_plt':'new'
				    ()
			    in  apply 'do_analysis'/4
				    (Files, _cor0, _cor4, 'none')
			%% Line 374
			<PltFiles> when 'true' ->
			    let <_cor10> =
				%% Line 375
				( letrec
				      'lc$^0'/1 =
					  fun (_cor7) ->
					      case _cor7 of
						<[F|_cor6]> when 'true' ->
						    let <_cor8> =
							call 'dialyzer_plt':'from_file'
							    (F)
						    in  let <_cor9> =
							    apply 'lc$^0'/1
								(_cor6)
							in  ( [_cor8|_cor9]
							      -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor7> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor7})
							-| [{'function_name',{'lc$^0',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^0'/1
					  (PltFiles)
				  -| ['list_comprehension'] )
			    in  let <Plt> =
				    %% Line 376
				    call 'dialyzer_plt':'merge_plts_or_report_conflicts'
					(PltFiles, _cor10)
				in  %% Line 377
				    apply 'do_analysis'/4
					(Files, _cor0, Plt, 'none')
		      end
		  -| ['compiler_generated'] )
		( <_cor34> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','options'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'do_analysis'/4 =
    %% Line 380
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 381
	( case _cor2 of
	    ( <( {'options',_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_rec31,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74}
		 -| ['compiler_generated'] )> when 'true' ->
		  do  apply 'assert_writable'/1
			  (_rec31)
		      do  %% Line 382
			  apply 'hipe_compile'/2
			      (_cor3, _cor2)
			  do  %% Line 383
			      apply 'report_analysis_start'/1
				  (_cor2)
			      let <State0> =
				  %% Line 384
				  apply 'new_state'/0
				      ()
			      in  let <State1> =
				      %% Line 385
				      apply 'init_output'/2
					  (State0, _cor2)
				  in  %% Line 389
				      case State1 of
					<{'cl_state',_cor156,_cor157,_cor158,_cor159,_cor160,_cor161,_cor162,_cor163,_cor164,_cor165,_cor166,_cor167,_cor168,_cor169,_cor170}> when 'true' ->
					    let <_cor21> =
						%% Line 390
						call 'erlang':'setelement'
						    (13, State1, _cor66)
					    in  let <_cor22> =
						    call 'erlang':'setelement'
							(12, _cor21, _cor0)
						in  let <_cor23> =
							call 'erlang':'setelement'
							    (11, _cor22, _rec31)
						    in  let <_cor24> =
							    call 'erlang':'setelement'
								(6, _cor23, _cor65)
							in  let <_cor26> =
								call 'erlang':'setelement'
								    (3, _cor24, _cor67)
							    in  let <AnalysisType> =
								    %% Line 391
								    apply 'convert_analysis_type'/2
									(_cor58, _cor62)
								in  let <InitAnalysis> =
									%% Line 393
									{'analysis','undefined',AnalysisType,_cor60,'undefined',_cor3,_cor64,_cor61,_cor1,_cor68,'false','false',_cor59,'undefined',_cor72,_cor74}
								    in  let <State3> =
									    %% Line 403
									    apply 'start_analysis'/2
										(_cor26, InitAnalysis)
									in  %% Line 404
									    case call 'erlang':'statistics'
										     ('wall_clock') of
									      <{T1,_cor352}> when 'true' ->
										  let <Return> =
										      %% Line 405
										      apply 'cl_loop'/1
											  (State3)
										  in  %% Line 406
										      case call 'erlang':'statistics'
											       ('wall_clock') of
											<{T2,_cor353}> when 'true' ->
											    do  %% Line 407
												apply 'report_elapsed_time'/3
												    (T1, T2, _cor2)
												%% Line 408
												Return
											( <_cor51> when 'true' ->
											      primop 'match_fail'
												  ({'badmatch',_cor51})
											  -| ['compiler_generated'] )
										      end
									      ( <_cor49> when 'true' ->
										    primop 'match_fail'
											({'badmatch',_cor49})
										-| ['compiler_generated'] )
									    end
					( <_cor171> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','cl_state'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
	      -| ['compiler_generated'] )
	    ( <_cor75> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','options'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'convert_analysis_type'/2 =
    %% Line 410
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'plt_check','true'> when 'true' ->
	      'succ_typings'
	  %% Line 411
	  <'plt_check','false'> when 'true' ->
	      'plt_build'
	  %% Line 412
	  <'plt_add','true'> when 'true' ->
	      'succ_typings'
	  %% Line 413
	  <'plt_add','false'> when 'true' ->
	      'plt_build'
	  %% Line 414
	  <'plt_build','true'> when 'true' ->
	      'succ_typings'
	  %% Line 415
	  <'plt_build','false'> when 'true' ->
	      'plt_build'
	  %% Line 416
	  <'plt_remove','true'> when 'true' ->
	      'succ_typings'
	  %% Line 417
	  <'plt_remove','false'> when 'true' ->
	      'plt_build'
	  %% Line 418
	  <'succ_typings',_cor4> when 'true' ->
	      'succ_typings'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'convert_analysis_type',2}}] )
	    -| ['compiler_generated'] )
	end
'assert_writable'/1 =
    %% Line 422
    fun (_cor0) ->
	case _cor0 of
	  <'none'> when 'true' ->
	      %% Line 423
	      'ok'
	  %% Line 424
	  <PltFile> when 'true' ->
	      %% Line 425
	      case apply 'check_if_writable'/1
		       (PltFile) of
		%% Line 426
		<'true'> when 'true' ->
		    'ok'
		%% Line 427
		<'false'> when 'true' ->
		    let <Msg> =
			%% Line 428
			call 'io_lib':'format'
			    ([32|[32|[32|[32|[84|[104|[101|[32|[80|[76|[84|[32|[102|[105|[108|[101|[32|[126|[115|[32|[105|[115|[32|[110|[111|[116|[32|[119|[114|[105|[116|[97|[98|[108|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [PltFile|[]])
		    in  %% Line 429
			apply 'cl_error'/1
			    (Msg)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	end
'check_if_writable'/1 =
    %% Line 432
    fun (_cor0) ->
	%% Line 433
	case call 'filelib':'is_regular'
		 (_cor0) of
	  %% Line 434
	  <'true'> when 'true' ->
	      apply 'is_writable_file_or_dir'/1
		  (_cor0)
	  %% Line 435
	  <'false'> when 'true' ->
	      %% Line 436
	      case call 'filelib':'is_dir'
		       (_cor0) of
		%% Line 437
		<'true'> when 'true' ->
		    'false'
		%% Line 438
		<'false'> when 'true' ->
		    let <DirName> =
			%% Line 439
			call 'filename':'dirname'
			    (_cor0)
		    in  %% Line 440
			( case call 'filelib':'is_dir'
				   (DirName) of
			    ( <( 'true'
				 -| ['compiler_generated'] )> when 'true' ->
				  apply 'is_writable_file_or_dir'/1
				      (DirName)
			      -| ['compiler_generated'] )
			    ( <( 'false'
				 -| ['compiler_generated'] )> when 'true' ->
				  'false'
			      -| ['compiler_generated'] )
			    ( <_cor2> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {( 'badarg'
					      -| ['compiler_generated'] ),_cor2}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'is_writable_file_or_dir'/1 =
    %% Line 444
    fun (_cor0) ->
	%% Line 445
	case call 'file':'read_file_info'
		 (_cor0) of
	  %% Line 446
	  <{'ok',{'file_info',_cor5,_cor6,A,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16}}> when 'true' ->
	      %% Line 447
	      ( case <> of
		  ( <>
			when call 'erlang':'=:='
			      (A,
			       'write') ->
			'true'
		    -| ['compiler_generated'] )
		  ( <> when 'true' ->
			call 'erlang':'=:='
			    (A, 'read_write')
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 448
	  <{'error',_cor17}> when 'true' ->
	      %% Line 449
	      'false'
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'clean_plt'/2 =
    %% Line 454
    fun (_cor1,_cor0) ->
	let <Plt> =
	    %% Line 456
	    call 'dialyzer_plt':'from_file'
		(_cor1)
	in  let <_cor7> =
		%% Line 457
		( fun (_cor4,_cor3) ->
		      call 'dialyzer_plt':'delete_module'
			  (_cor3, _cor4)
		  -| [{'id',{0,0,'-clean_plt/2-fun-0-'}}] )
	    in  %% Line 457
		call 'sets':'fold'
		    (_cor7, %% Line 458
			    Plt, _cor0)
'expand_dependent_modules'/3 =
    %% Line 460
    fun (_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 461
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[{'differ',M}|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'lc$^0'/1
					(_cor4)
				in  ( [M|_cor6]
				      -| ['compiler_generated'] )
			    ( <[_cor3|_cor4]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor4)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor1)
	      -| ['list_comprehension'] )
	in  let <ChangedMods> =
		%% Line 461
		call 'sets':'from_list'
		    (_cor7)
	    in  let <_cor13> =
		    %% Line 462
		    ( letrec
			  'lc$^1'/1 =
			      fun (_cor11) ->
				  case _cor11 of
				    <[{'removed',M}|_cor10]> when 'true' ->
					let <_cor12> =
					    apply 'lc$^1'/1
						(_cor10)
					in  ( [M|_cor12]
					      -| ['compiler_generated'] )
				    ( <[_cor9|_cor10]> when 'true' ->
					  apply 'lc$^1'/1
					      (_cor10)
				      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor11> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor11})
					    -| [{'function_name',{'lc$^1',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lc$^1'/1
			      (_cor1)
		      -| ['list_comprehension'] )
		in  let <RemovedMods> =
			%% Line 462
			call 'sets':'from_list'
			    (_cor13)
		    in  let <BigSet> =
			    %% Line 463
			    call 'sets':'union'
				(ChangedMods, RemovedMods)
			in  let <BigList> =
				%% Line 464
				call 'sets':'to_list'
				    (BigSet)
			    in  let <ExpandedSet> =
				    %% Line 465
				    apply 'expand_dependent_modules_1'/3
					(BigList, BigSet, _cor0)
				in  let <NewModDeps> =
					%% Line 466
					call 'dialyzer_callgraph':'strip_module_deps'
					    (_cor0, BigSet)
				    in  let <AnalyzeMods> =
					    %% Line 467
					    call 'sets':'subtract'
						(ExpandedSet, RemovedMods)
					in  let <FilterFun> =
						%% Line 468
						( fun (_cor22) ->
						      let <_cor20> =
							  %% Line 469
							  call 'filename':'basename'
							      (_cor22, [46|[98|[101|[97|[109]]]]])
						      in  let <Mod> =
							      %% Line 469
							      call 'erlang':'list_to_atom'
								  (_cor20)
							  in  %% Line 470
							      call 'sets':'is_element'
								  (Mod, AnalyzeMods)
						  -| [{'id',{0,0,'-expand_dependent_modules/3-fun-0-'}}] )
					    in  let <_cor30> =
						    %% Line 472
						    ( letrec
							  'lc$^2'/1 =
							      fun (_cor27) ->
								  case _cor27 of
								    <[{F,_cor34}|_cor26]> when 'true' ->
									( case apply FilterFun
										   (F) of
									    <'true'> when 'true' ->
										let <_cor28> =
										    apply 'lc$^2'/1
											(_cor26)
										in  ( [F|_cor28]
										      -| ['compiler_generated'] )
									    ( <'false'> when 'true' ->
										  apply 'lc$^2'/1
										      (_cor26)
									      -| ['compiler_generated'] )
									    ( <_cor29> when 'true' ->
										  primop 'match_fail'
										      ({'case_clause',_cor29})
									      -| ['compiler_generated'] )
									  end
									  -| ['list_comprehension'] )
								    ( <[_cor25|_cor26]> when 'true' ->
									  apply 'lc$^2'/1
									      (_cor26)
								      -| ['compiler_generated'] )
								    <[]> when 'true' ->
									[]
								    ( <_cor27> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_cor27})
									    -| [{'function_name',{'lc$^2',1}}] )
								      -| ['compiler_generated'] )
								  end
						      in  apply 'lc$^2'/1
							      (_cor2)
						      -| ['list_comprehension'] )
						in  %% Line 472
						    {_cor30,RemovedMods,NewModDeps}
'expand_dependent_modules_1'/3 =
    %% Line 474
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Mod|Mods],Included,ModDeps> when 'true' ->
	      %% Line 475
	      case call 'dict':'find'
		       (Mod, ModDeps) of
		%% Line 476
		<{'ok',Deps}> when 'true' ->
		    let <_cor3> =
			%% Line 477
			call 'sets':'from_list'
			    (Deps)
		    in  let <NewDeps> =
			    %% Line 477
			    call 'sets':'subtract'
				(_cor3, Included)
			in  let <_cor5> =
				%% Line 478
				call 'sets':'size'
				    (NewDeps)
			    in  %% Line 478
				case <> of
				  %% Line 479
				  <>
				      when call 'erlang':'=:='
					    (_cor5,
					     0) ->
				      apply 'expand_dependent_modules_1'/3
					  (Mods, Included, ModDeps)
				  %% Line 480
				  <> when 'true' ->
				      let <NewIncluded> =
					  %% Line 481
					  call 'sets':'union'
					      (Included, NewDeps)
				      in  let <_cor7> =
					      %% Line 482
					      call 'sets':'to_list'
						  (NewDeps)
					  in  let <_cor8> =
						  %% Line 482
						  call 'erlang':'++'
						      (_cor7, Mods)
					      in  %% Line 482
						  apply 'expand_dependent_modules_1'/3
						      (_cor8, %% Line 483
							      NewIncluded, %% Line 483
									   ModDeps)
				end
		%% Line 485
		<'error'> when 'true' ->
		    %% Line 486
		    apply 'expand_dependent_modules_1'/3
			(Mods, Included, ModDeps)
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 488
	  <[],Included,_X_ModDeps> when 'true' ->
	      %% Line 489
	      Included
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'expand_dependent_modules_1',3}}] )
	    -| ['compiler_generated'] )
	end
'hipe_compile'/2 =
    %% Line 496
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Files,Options = {'options',_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,ErlangMode,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36}> when 'true' ->
	      let <_cor2> =
		  %% Line 497
		  call 'erlang':'get'
		      ('dialyzer_options_native')
	      in  let <NoNative> =
		      %% Line 497
		      call 'erlang':'=:='
			  (_cor2, 'false')
		  in  let <_cor4> =
			  %% Line 498
			  call 'erlang':'length'
			      (Files)
		      in  let <FewFiles> =
			      %% Line 498
			      call 'erlang':'<'
				  (_cor4, 20)
			  in  let <_cor10> =
				  %% Line 499
				  ( case NoNative of
				      ( <( 'true'
					   -| ['compiler_generated'] )> when 'true' ->
					    'true'
					-| ['compiler_generated'] )
				      ( <( 'false'
					   -| ['compiler_generated'] )> when 'true' ->
					    ( case FewFiles of
						( <( 'true'
						     -| ['compiler_generated'] )> when 'true' ->
						      'true'
						  -| ['compiler_generated'] )
						( <( 'false'
						     -| ['compiler_generated'] )> when 'true' ->
						      ErlangMode
						  -| ['compiler_generated'] )
						( <_cor7> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {( 'badarg'
								  -| ['compiler_generated'] ),_cor7}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <_cor6> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {( 'badarg'
							-| ['compiler_generated'] ),_cor6}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      in  %% Line 499
				  case _cor10 of
				    %% Line 500
				    <'true'> when 'true' ->
					'ok'
				    %% Line 501
				    <'false'> when 'true' ->
					%% Line 502
					case call 'erlang':'system_info'
						 ('hipe_architecture') of
					  %% Line 503
					  <'undefined'> when 'true' ->
					      'ok'
					  %% Line 504
					  <_cor37> when 'true' ->
					      do  %% Line 513
						  apply 'report_native_comp'/1
						      (Options)
						  %% Line 514
						  case call 'erlang':'statistics'
							   ('wall_clock') of
						    <{T1,_cor38}> when 'true' ->
							do  %% Line 515
							    apply 'native_compile'/1
								(['lists'|['dict'|['digraph'|['digraph_utils'|['ets'|['gb_sets'|['gb_trees'|['ordsets'|['sets'|['sofs'|['cerl'|['erl_types'|['cerl_trees'|['erl_bif_types'|['dialyzer_analysis_callgraph'|['dialyzer'|['dialyzer_behaviours'|['dialyzer_codeserver'|['dialyzer_contracts'|['dialyzer_coordinator'|['dialyzer_dataflow'|['dialyzer_dep'|['dialyzer_plt'|['dialyzer_succ_typings'|['dialyzer_typesig'|['dialyzer_worker']]]]]]]]]]]]]]]]]]]]]]]]]])
							    %% Line 516
							    case call 'erlang':'statistics'
								     ('wall_clock') of
							      <{T2,_cor39}> when 'true' ->
								  %% Line 517
								  apply 'report_elapsed_time'/3
								      (T1, T2, Options)
							      ( <_cor13> when 'true' ->
								    primop 'match_fail'
									({'badmatch',_cor13})
								-| ['compiler_generated'] )
							    end
						    ( <_cor12> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor12})
						      -| ['compiler_generated'] )
						  end
					end
				    ( <_cor15> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor15})
				      -| ['compiler_generated'] )
				  end
	  ( <_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16})
		  -| [{'function_name',{'hipe_compile',2}}] )
	    -| ['compiler_generated'] )
	end
'native_compile'/1 =
    %% Line 521
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 522
	    call 'dialyzer_utils':'parallelism'
		()
	in  %% Line 522
	    case <> of
	      %% Line 523
	      <>
		  when call 'erlang':'>'
			(_cor1,
			 7) ->
		  let <Parent> =
		      %% Line 524
		      call 'erlang':'self'
			  ()
		  in  let <_cor11> =
			  %% Line 525
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor5) ->
					case _cor5 of
					  <[M|_cor4]> when 'true' ->
					      let <_cor8> =
						  ( fun () ->
							let <_cor7> =
							    call 'erlang':'self'
								()
							in  let <_cor6> =
								apply 'hc'/1
								    (M)
							    in  call 'erlang':'!'
								    (Parent, {_cor7,_cor6})
						    -| [{'id',{0,0,'-native_compile/1-fun-0-'}}] )
					      in  let <_cor9> =
						      call 'erlang':'spawn'
							  (_cor8)
						  in  let <_cor10> =
							  apply 'lc$^0'/1
							      (_cor4)
						      in  ( [_cor9|_cor10]
							    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor5> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor5})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (_cor0)
			    -| ['list_comprehension'] )
		      in  let <_cor15> =
			      %% Line 526
			      ( fun (_cor13) ->
				    receive
				      <{_cor21,Res}>
					  when call 'erlang':'=:='
						(_cor21,
						 _cor13) ->
					  Res
				    after 'infinity' ->
				      'true'
				-| [{'id',{0,0,'-native_compile/1-fun-1-'}}] )
			  in  %% Line 526
			      call 'lists':'foreach'
				  (_cor15, _cor11)
	      %% Line 527
	      <> when 'true' ->
		  let <_cor18> =
		      %% Line 528
		      ( fun (_cor16) ->
			    apply 'hc'/1
				(_cor16)
			-| [{'id',{0,0,'-native_compile/1-fun-2-'}}] )
		  in  %% Line 528
		      call 'lists':'foreach'
			  (_cor18, _cor0)
	    end
'hc'/1 =
    %% Line 531
    fun (_cor0) ->
	%% Line 532
	case call 'code':'ensure_loaded'
		 (_cor0) of
	  <{'module',_cor5}>
	      when call 'erlang':'=:='
		    (_cor5,
		     _cor0) ->
	      %% Line 533
	      case call 'code':'is_module_native'
		       (_cor0) of
		%% Line 534
		<'true'> when 'true' ->
		    'ok'
		%% Line 535
		<'false'> when 'true' ->
		    %% Line 537
		    case call 'hipe':'c'
			     (_cor0) of
		      <{'ok',_cor6}>
			  when call 'erlang':'=:='
				(_cor6,
				 _cor0) ->
			  %% Line 538
			  'ok'
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'new_state'/0 =
    %% Line 541
    fun () ->
	let <_cor1> =
	    call 'ordsets':'new'
		()
	in  let <_cor0> =
		call 'dict':'new'
		    ()
	    in  %% Line 542
		{'cl_state','undefined','false',[],[],_cor1,_cor0,'standard_io','formatted','basename','none','none','normal',0,[],[]}
'init_output'/2 =
    %% Line 544
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <State0,{'options',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,OutFile,%% Line 545
																       OutFormat,%% Line 546
																		 FOpt,_cor29,_cor30,_cor31}> when 'true' ->
	      %% Line 547
	      case State0 of
		<{'cl_state',_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46}> when 'true' ->
		    let <_cor3> =
			call 'erlang':'setelement'
			    (10, State0, FOpt)
		    in  let <_cor5> =
			    call 'erlang':'setelement'
				(9, _cor3, OutFormat)
			in  %% Line 548
			    case <> of
			      %% Line 549
			      <>
				  when call 'erlang':'=:='
					(OutFile,
					 'none') ->
				  _cor5
			      %% Line 551
			      <> when 'true' ->
				  %% Line 552
				  case call 'file':'open'
					   (OutFile, ['write']) of
				    %% Line 553
				    <{'ok',File}> when 'true' ->
					%% Line 554
					case _cor5 of
					  <{'cl_state',_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62}> when 'true' ->
					      call 'erlang':'setelement'
						  (8, _cor5, File)
					  ( <_cor63> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','cl_state'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
				    %% Line 555
				    <{'error',Reason}> when 'true' ->
					let <Msg> =
					    %% Line 556
					    call 'io_lib':'format'
						([67|[111|[117|[108|[100|[32|[110|[111|[116|[32|[111|[112|[101|[110|[32|[111|[117|[116|[112|[117|[116|[32|[102|[105|[108|[101|[32|[126|[112|[44|[32|[82|[101|[97|[115|[111|[110|[58|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 557
																																				 [OutFile|[Reason|[]]])
					in  let <_cor10> =
						%% Line 558
						call 'lists':'flatten'
						    (Msg)
					    in  %% Line 558
						apply 'cl_error'/2
						    (_cor5, _cor10)
				    ( <_cor11> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor11})
				      -| ['compiler_generated'] )
				  end
			    end
		( <_cor47> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','cl_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'init_output',2}}] )
	    -| ['compiler_generated'] )
	end
'maybe_close_output_file'/1 =
    %% Line 564
    fun (_cor0) ->
	%% Line 565
	( case _cor0 of
	    ( <( {'cl_state',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_rec52,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}
		 -| ['compiler_generated'] )> when 'true' ->
		  case _rec52 of
		    %% Line 566
		    <'standard_io'> when 'true' ->
			'ok'
		    %% Line 567
		    <File> when 'true' ->
			let <_cor21> =
			    call 'file':'close'
				(File)
			in  case _cor21 of
			      <'ok'> when 'true' ->
				  ( _cor21
				    -| ['compiler_generated'] )
			      ( <_cor3> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor3})
				-| ['compiler_generated'] )
			    end
		  end
	      -| ['compiler_generated'] )
	    ( <_cor20> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cl_state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'cl_loop'/1 =
    %% Line 578
    fun (_cor0) ->
	%% Line 579
	apply 'cl_loop'/2
	    (_cor0, [])
'cl_loop'/2 =
    %% Line 581
    fun (_cor1,_cor0) ->
	%% Line 582
	( case _cor1 of
	    ( <( {'cl_state',_rec53,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 583
		  receive
		    %% Line 584
		    <{_cor38,'log',LogMsg}>
			when call 'erlang':'=:='
			      (_cor38,
			       _rec53) ->
			let <_cor5> =
			    %% Line 586
			    call 'lists':'sublist'
				([LogMsg|_cor0], 10)
			in  %% Line 586
			    apply 'cl_loop'/2
				(_cor1, _cor5)
		    %% Line 587
		    <{_cor39,'warnings',Warnings}>
			when call 'erlang':'=:='
			      (_cor39,
			       _rec53) ->
			let <NewState> =
			    %% Line 588
			    apply 'store_warnings'/2
				(_cor1, Warnings)
			in  %% Line 589
			    apply 'cl_loop'/2
				(NewState, _cor0)
		    %% Line 590
		    <{_cor40,'unknown_behaviours',Behaviours}>
			when call 'erlang':'=:='
			      (_cor40,
			       _rec53) ->
			let <NewState> =
			    %% Line 591
			    apply 'store_unknown_behaviours'/2
				(_cor1, Behaviours)
			in  %% Line 592
			    apply 'cl_loop'/2
				(NewState, _cor0)
		    %% Line 593
		    <{_cor41,'done',NewPlt,_X_NewDocPlt}>
			when call 'erlang':'=:='
			      (_cor41,
			       _rec53) ->
			%% Line 594
			apply 'return_value'/2
			    (_cor1, NewPlt)
		    %% Line 595
		    <{_cor42,'ext_calls',ExtCalls}>
			when call 'erlang':'=:='
			      (_cor42,
			       _rec53) ->
			let <_cor10> =
			    %% Line 596
			    call 'erlang':'setelement'
				(4, _cor1, ExtCalls)
			in  %% Line 596
			    apply 'cl_loop'/2
				(_cor10, _cor0)
		    %% Line 597
		    <{_cor59,'ext_types',ExtTypes}>
			when call 'erlang':'=:='
			      (_cor59,
			       _rec53) ->
			let <_cor13> =
			    %% Line 598
			    call 'erlang':'setelement'
				(5, _cor1, ExtTypes)
			in  %% Line 598
			    apply 'cl_loop'/2
				(_cor13, _cor0)
		    %% Line 599
		    <{_cor76,'mod_deps',ModDeps}>
			when call 'erlang':'=:='
			      (_cor76,
			       _rec53) ->
			let <_cor16> =
			    %% Line 600
			    call 'erlang':'setelement'
				(7, _cor1, ModDeps)
			in  %% Line 601
			    apply 'cl_loop'/2
				(_cor16, _cor0)
		    %% Line 602
		    <{'EXIT',_cor93,{'error',Reason}}>
			when call 'erlang':'=:='
			      (_cor93,
			       _rec53) ->
			let <Msg> =
			    %% Line 603
			    apply 'failed_anal_msg'/2
				(Reason, _cor0)
			in  %% Line 604
			    apply 'cl_error'/2
				(_cor1, Msg)
		    %% Line 605
		    <{'EXIT',_cor94,Reason}>
			when let <_cor95> =
			      call 'erlang':'=:='
				  (_cor94, _rec53)
			  in  let <_cor96> =
				  call 'erlang':'=/='
				      (Reason, 'normal')
			      in  call 'erlang':'and'
				      (_cor95, _cor96) ->
			let <_cor19> =
			    %% Line 606
			    call 'io_lib':'format'
				([126|[112]], [Reason|[]])
			in  let <Msg> =
				%% Line 606
				apply 'failed_anal_msg'/2
				    (_cor19, _cor0)
			    in  %% Line 607
				apply 'cl_error'/2
				    (_cor1, Msg)
		    %% Line 608
		    <_X_Other> when 'true' ->
			%% Line 610
			apply 'cl_loop'/2
			    (_cor1, _cor0)
		  after 'infinity' ->
		    'true'
	      -| ['compiler_generated'] )
	    ( <_cor37> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cl_state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'failed_anal_msg'/2 =
    %% Line 615
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 616
	    call 'lists':'flatten'
		(_cor1)
	in  let <_cor3> =
		%% Line 616
		call 'erlang':'++'
		    (_cor2, [10])
	    in  let <Msg> =
		    %% Line 616
		    call 'erlang':'++'
			([65|[110|[97|[108|[121|[115|[105|[115|[32|[102|[97|[105|[108|[101|[100|[32|[119|[105|[116|[104|[32|[101|[114|[114|[111|[114|[58|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]], _cor3)
		in  %% Line 617
		    case <> of
		      %% Line 618
		      <>
			  when call 'erlang':'=:='
				(_cor0,
				 []) ->
			  Msg
		      %% Line 619
		      <> when 'true' ->
			  let <_cor5> =
			      %% Line 620
			      apply 'format_log_cache'/1
				  (_cor0)
			  in  let <_cor6> =
				  %% Line 620
				  call 'erlang':'++'
				      ([76|[97|[115|[116|[32|[109|[101|[115|[115|[97|[103|[101|[115|[32|[105|[110|[32|[116|[104|[101|[32|[108|[111|[103|[32|[99|[97|[99|[104|[101|[58|[10|[32|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], _cor5)
			      in  %% Line 620
				  call 'erlang':'++'
				      (Msg, _cor6)
		    end
'format_log_cache'/1 =
    %% Line 626
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 627
	    call 'lists':'reverse'
		(_cor0)
	in  let <Str> =
		%% Line 627
		call 'lists':'append'
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 628
		    call 'string':'tokens'
			(Str, [10])
		in  %% Line 628
		    call 'string':'join'
			(_cor3, [10|[32|[32]]])
'store_warnings'/2 =
    %% Line 632
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <St = {'cl_state',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,StoredWarnings,_cor20},Warnings> when 'true' ->
	      let <_rec57> =
		  %% Line 633
		  call 'erlang':'++'
		      (StoredWarnings, Warnings)
	      in  %% Line 633
		  call 'erlang':'setelement'
		      (15, St, _rec57)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'store_warnings',2}}] )
	    -| ['compiler_generated'] )
	end
'store_unknown_behaviours'/2 =
    %% Line 637
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <St = {'cl_state',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,Behs},Beh> when 'true' ->
	      let <_rec59> =
		  %% Line 638
		  call 'erlang':'++'
		      (Beh, Behs)
	      in  %% Line 638
		  call 'erlang':'setelement'
		      (16, St, _rec59)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'store_unknown_behaviours',2}}] )
	    -| ['compiler_generated'] )
	end
'cl_error'/1 =
    %% Line 642
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 643
	    call 'lists':'flatten'
		(_cor0)
	in  %% Line 643
	    call 'erlang':'throw'
		({'dialyzer_error',_cor1})
'cl_error'/2 =
    %% Line 647
    fun (_cor1,_cor0) ->
	%% Line 648
	( case _cor1 of
	    ( <( {'cl_state',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_rec61,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}
		 -| ['compiler_generated'] )> when 'true' ->
		  do  case _rec61 of
			%% Line 649
			<'standard_io'> when 'true' ->
			    'ok'
			%% Line 650
			<Outfile> when 'true' ->
			    call 'io':'format'
				(Outfile, [10|[126|[115|[10]]]], [_cor0|[]])
		      end
		      do  %% Line 652
			  apply 'maybe_close_output_file'/1
			      (_cor1)
			  let <_cor5> =
			      %% Line 653
			      call 'lists':'flatten'
				  (_cor0)
			  in  %% Line 653
			      call 'erlang':'throw'
				  ({'dialyzer_error',_cor5})
	      -| ['compiler_generated'] )
	    ( <_cor22> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cl_state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'return_value'/2 =
    %% Line 655
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <State = {'cl_state',_cor28,ErlangMode,_cor29,_cor30,%% Line 660
							       LegalWarnings,%% Line 656
									     ModDeps,_cor31,_cor32,_cor33,%% Line 657
													  OutputPlt,%% Line 658
														    PltInfo,_cor34,_cor35,%% Line 659
																	  StoredWarnings,_cor36},%% Line 661
																				 Plt> when 'true' ->
	      do  %% Line 662
		  case <> of
		    %% Line 663
		    <>
			when call 'erlang':'=:='
			      (OutputPlt,
			       'none') ->
			'ok'
		    %% Line 664
		    <> when 'true' ->
			call 'dialyzer_plt':'to_file'
			    (OutputPlt, Plt, ModDeps, PltInfo)
		  end
		  let <_cor4> =
		      %% Line 667
		      case <> of
			%% Line 668
			<>
			    when call 'erlang':'=:='
				  (StoredWarnings,
				   []) ->
			    0
			%% Line 669
			<> when 'true' ->
			    2
		      end
		  in  %% Line 671
		      case ErlangMode of
			%% Line 672
			<'false'> when 'true' ->
			    do  %% Line 673
				apply 'print_warnings'/1
				    (State)
				do  %% Line 674
				    apply 'print_ext_calls'/1
					(State)
				    do  %% Line 675
					apply 'print_ext_types'/1
					    (State)
					do  %% Line 676
					    apply 'print_unknown_behaviours'/1
						(State)
					    do  %% Line 677
						apply 'maybe_close_output_file'/1
						    (State)
						%% Line 678
						{_cor4,[]}
			%% Line 679
			<'true'> when 'true' ->
			    let <_cor11> =
				%% Line 681
				case call 'ordsets':'is_element'
					 ('warn_unknown', LegalWarnings) of
				  %% Line 682
				  <'true'> when 'true' ->
				      let <_cor9> =
					  %% Line 683
					  apply 'unknown_functions'/1
					      (State)
				      in  let <_cor7> =
					      %% Line 684
					      apply 'unknown_types'/1
						  (State)
					  in  let <_cor6> =
						  %% Line 685
						  apply 'unknown_behaviours'/1
						      (State)
					      in  let <_cor8> =
						      %% Line 684
						      call 'erlang':'++'
							  (_cor7, _cor6)
						  in  %% Line 683
						      call 'erlang':'++'
							  (_cor9, _cor8)
				  %% Line 686
				  <'false'> when 'true' ->
				      []
				  ( <_cor10> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor10})
				    -| ['compiler_generated'] )
				end
			    in  let <_cor21> =
				    %% Line 689
				    ( letrec
					  'lc$^0'/1 =
					      fun (_cor15) ->
						  case _cor15 of
						    <[W|_cor14]> when 'true' ->
							let <_cor20> =
							    apply 'lc$^0'/1
								(_cor14)
							in  ( [{'warn_unknown',{[],0},W}|_cor20]
							      -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_cor15> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor15})
							    -| [{'function_name',{'lc$^0',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  apply 'lc$^0'/1
					      (_cor11)
				      -| ['list_comprehension'] )
				in  let <_cor23> =
					%% Line 691
					apply 'process_warnings'/1
					    (StoredWarnings)
				    in  let <AllWarnings> =
					    %% Line 691
					    call 'erlang':'++'
						(_cor21, _cor23)
					in  %% Line 692
					    {_cor4,AllWarnings}
			( <_cor25> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor25})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor27,_cor26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26})
		  -| [{'function_name',{'return_value',2}}] )
	    -| ['compiler_generated'] )
	end
'unknown_functions'/1 =
    %% Line 695
    fun (_cor0) ->
	case _cor0 of
	  <{'cl_state',_cor6,_cor7,Calls,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}> when 'true' ->
	      %% Line 696
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor3) ->
			    case _cor3 of
			      <[MFA|_cor2]> when 'true' ->
				  let <_cor4> =
				      apply 'lc$^0'/1
					  (_cor2)
				  in  ( [{'unknown_function',MFA}|_cor4]
					-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor3> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor3})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(Calls)
		-| ['list_comprehension'] )
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'unknown_functions',1}}] )
	    -| ['compiler_generated'] )
	end
'print_ext_calls'/1 =
    %% Line 698
    fun (_cor0) ->
	case _cor0 of
	  <{'cl_state',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,'quiet',_cor20,_cor21,_cor22}> when 'true' ->
	      %% Line 699
	      'ok'
	  %% Line 700
	  <{'cl_state',_cor23,_cor24,%% Line 701
				     Calls,_cor25,%% Line 704
						  LegalWarnings,_cor26,Output,%% Line 703
									      Format,_cor27,_cor28,_cor29,_cor30,_cor31,%% Line 702
															Warnings,_cor32}> when 'true' ->
	      let <_cor2> =
		  %% Line 705
		  call 'ordsets':'is_element'
		      ('warn_unknown', LegalWarnings)
	      in  let <_cor4> =
		      %% Line 706
		      ( case _cor2 of
			  ( <'false'> when 'true' ->
				'true'
			    -| ['compiler_generated'] )
			  ( <'true'> when 'true' ->
				call 'erlang':'=:='
				    (Calls, [])
			    -| ['compiler_generated'] )
			  ( <_cor_variable> when 'true' ->
				call 'erlang':'error'
				    ('badarg')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  in  %% Line 705
		      case _cor4 of
			%% Line 707
			<'true'> when 'true' ->
			    'ok'
			%% Line 708
			<'false'> when 'true' ->
			    do  %% Line 709
				case <> of
				  %% Line 710
				  <>
				      when call 'erlang':'=:='
					    (Warnings,
					     []) ->
				      call 'io':'nl'
					  (Output)
				  %% Line 711
				  <> when 'true' ->
				      'ok'
				end
				%% Line 713
				case Format of
				  %% Line 714
				  <'formatted'> when 'true' ->
				      do  %% Line 715
					  call 'io':'put_chars'
					      (Output, [85|[110|[107|[110|[111|[119|[110|[32|[102|[117|[110|[99|[116|[105|[111|[110|[115|[58|[10]]]]]]]]]]]]]]]]]]])
					  %% Line 716
					  apply 'do_print_ext_calls'/3
					      (Output, Calls, [32|[32]])
				  %% Line 717
				  <'raw'> when 'true' ->
				      do  %% Line 718
					  call 'io':'put_chars'
					      (Output, [37|[37|[32|[85|[110|[107|[110|[111|[119|[110|[32|[102|[117|[110|[99|[116|[105|[111|[110|[115|[58|[10]]]]]]]]]]]]]]]]]]]]]])
					  %% Line 719
					  apply 'do_print_ext_calls'/3
					      (Output, Calls, [37|[37|[32|[32]]]])
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor6})
				    -| ['compiler_generated'] )
				end
			( <_cor7> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor7})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8})
		  -| [{'function_name',{'print_ext_calls',1}}] )
	    -| ['compiler_generated'] )
	end
'do_print_ext_calls'/3 =
    %% Line 723
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Output,[{M,F,A}|T],Before> when 'true' ->
	      do  %% Line 724
		  call 'io':'format'
		      (Output, [126|[115|[126|[112|[58|[126|[112|[47|[126|[112|[10]]]]]]]]]]], [Before|[M|[F|[A|[]]]]])
		  %% Line 725
		  apply 'do_print_ext_calls'/3
		      (Output, T, Before)
	  %% Line 726
	  <_cor6,[],_cor7> when 'true' ->
	      %% Line 727
	      'ok'
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'do_print_ext_calls',3}}] )
	    -| ['compiler_generated'] )
	end
'unknown_types'/1 =
    %% Line 729
    fun (_cor0) ->
	case _cor0 of
	  <{'cl_state',_cor6,_cor7,_cor8,Types,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}> when 'true' ->
	      %% Line 730
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor3) ->
			    case _cor3 of
			      <[MFA|_cor2]> when 'true' ->
				  let <_cor4> =
				      apply 'lc$^0'/1
					  (_cor2)
				  in  ( [{'unknown_type',MFA}|_cor4]
					-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor3> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor3})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(Types)
		-| ['list_comprehension'] )
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'unknown_types',1}}] )
	    -| ['compiler_generated'] )
	end
'print_ext_types'/1 =
    %% Line 732
    fun (_cor0) ->
	case _cor0 of
	  <{'cl_state',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,'quiet',_cor23,_cor24,_cor25}> when 'true' ->
	      %% Line 733
	      'ok'
	  %% Line 734
	  <{'cl_state',_cor26,_cor27,%% Line 735
				     Calls,%% Line 736
					   Types,%% Line 739
						 LegalWarnings,_cor28,Output,%% Line 738
									     Format,_cor29,_cor30,_cor31,_cor32,_cor33,%% Line 737
														       Warnings,_cor34}> when 'true' ->
	      let <_cor2> =
		  %% Line 740
		  call 'ordsets':'is_element'
		      ('warn_unknown', LegalWarnings)
	      in  let <_cor4> =
		      %% Line 741
		      ( case _cor2 of
			  ( <'false'> when 'true' ->
				'true'
			    -| ['compiler_generated'] )
			  ( <'true'> when 'true' ->
				call 'erlang':'=:='
				    (Types, [])
			    -| ['compiler_generated'] )
			  ( <_cor_variable> when 'true' ->
				call 'erlang':'error'
				    ('badarg')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  in  %% Line 740
		      case _cor4 of
			%% Line 742
			<'true'> when 'true' ->
			    'ok'
			%% Line 743
			<'false'> when 'true' ->
			    let <_cor7> =
				%% Line 744
				( case <> of
				    ( <>
					  when call 'erlang':'=:='
						(Warnings,
						 []) ->
					  call 'erlang':'=:='
					      (Calls, [])
				      -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  'false'
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    in  do  %% Line 744
				    case _cor7 of
				      %% Line 745
				      <'true'> when 'true' ->
					  call 'io':'nl'
					      (Output)
				      %% Line 746
				      <'false'> when 'true' ->
					  'ok'
				      ( <_cor8> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor8})
					-| ['compiler_generated'] )
				    end
				    %% Line 748
				    case Format of
				      %% Line 749
				      <'formatted'> when 'true' ->
					  do  %% Line 750
					      call 'io':'put_chars'
						  (Output, [85|[110|[107|[110|[111|[119|[110|[32|[116|[121|[112|[101|[115|[58|[10]]]]]]]]]]]]]]])
					      %% Line 751
					      apply 'do_print_ext_types'/3
						  (Output, Types, [32|[32]])
				      %% Line 752
				      <'raw'> when 'true' ->
					  do  %% Line 753
					      call 'io':'put_chars'
						  (Output, [37|[37|[32|[85|[110|[107|[110|[111|[119|[110|[32|[116|[121|[112|[101|[115|[58|[10]]]]]]]]]]]]]]]]]])
					      %% Line 754
					      apply 'do_print_ext_types'/3
						  (Output, Types, [37|[37|[32|[32]]]])
				      ( <_cor9> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor9})
					-| ['compiler_generated'] )
				    end
			( <_cor10> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor10})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11})
		  -| [{'function_name',{'print_ext_types',1}}] )
	    -| ['compiler_generated'] )
	end
'do_print_ext_types'/3 =
    %% Line 758
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Output,[{M,F,A}|T],Before> when 'true' ->
	      do  %% Line 759
		  call 'io':'format'
		      (Output, [126|[115|[126|[112|[58|[126|[112|[47|[126|[112|[10]]]]]]]]]]], [Before|[M|[F|[A|[]]]]])
		  %% Line 760
		  apply 'do_print_ext_types'/3
		      (Output, T, Before)
	  %% Line 761
	  <_cor6,[],_cor7> when 'true' ->
	      %% Line 762
	      'ok'
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'do_print_ext_types',3}}] )
	    -| ['compiler_generated'] )
	end
'unknown_behaviours'/1 =
    %% Line 764
    fun (_cor0) ->
	case _cor0 of
	  <{'cl_state',_cor8,_cor9,_cor10,_cor11,%% Line 765
						 LegalWarnings,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,DupBehaviours}> when 'true' ->
	      %% Line 766
	      case call 'ordsets':'is_element'
		       ('warn_behaviour', LegalWarnings) of
		%% Line 767
		<'false'> when 'true' ->
		    []
		%% Line 768
		<'true'> when 'true' ->
		    let <Behaviours> =
			%% Line 769
			call 'lists':'usort'
			    (DupBehaviours)
		    in  %% Line 770
			( letrec
			      'lc$^0'/1 =
				  fun (_cor4) ->
				      case _cor4 of
					<[B|_cor3]> when 'true' ->
					    let <_cor5> =
						apply 'lc$^0'/1
						    (_cor3)
					    in  ( [{'unknown_behaviour',B}|_cor5]
						  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor4> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor4})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (Behaviours)
			  -| ['list_comprehension'] )
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'unknown_behaviours',1}}] )
	    -| ['compiler_generated'] )
	end
'print_unknown_behaviours'/1 =
    %% Line 775
    fun (_cor0) ->
	case _cor0 of
	  <{'cl_state',_cor16,_cor17,%% Line 776
				     Calls,%% Line 777
					   Types,%% Line 780
						 LegalWarnings,_cor18,Output,%% Line 781
									     Format,_cor19,_cor20,_cor21,_cor22,_cor23,%% Line 778
														       Warnings,%% Line 779
																DupBehaviours}> when 'true' ->
	      let <_cor3> =
		  %% Line 783
		  ( case call 'ordsets':'is_element'
			     ('warn_behaviour', LegalWarnings) of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    call 'erlang':'=/='
				(DupBehaviours, [])
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    'false'
			-| ['compiler_generated'] )
		      ( <_cor1> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_cor1}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      in  %% Line 782
		  case _cor3 of
		    %% Line 784
		    <'false'> when 'true' ->
			'ok'
		    %% Line 785
		    <'true'> when 'true' ->
			let <Behaviours> =
			    %% Line 786
			    call 'lists':'usort'
				(DupBehaviours)
			in  let <_cor9> =
				%% Line 787
				( case <> of
				    ( <>
					  when call 'erlang':'=:='
						(Warnings,
						 []) ->
					  ( case <> of
					      ( <>
						    when call 'erlang':'=:='
							  (Calls,
							   []) ->
						    call 'erlang':'=:='
							(Types, [])
						-| ['compiler_generated'] )
					      ( <> when 'true' ->
						    'false'
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  'false'
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    in  do  %% Line 787
				    case _cor9 of
				      %% Line 788
				      <'true'> when 'true' ->
					  call 'io':'nl'
					      (Output)
				      %% Line 789
				      <'false'> when 'true' ->
					  'ok'
				      ( <_cor10> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor10})
					-| ['compiler_generated'] )
				    end
				    let <Prompt,Prefix> =
					%% Line 792
					case Format of
					  %% Line 793
					  <'formatted'> when 'true' ->
					      <[85|[110|[107|[110|[111|[119|[110|[32|[98|[101|[104|[97|[118|[105|[111|[117|[114|[115|[58|[10]]]]]]]]]]]]]]]]]]]],[32|[32]]>
					  %% Line 794
					  <'raw'> when 'true' ->
					      <[37|[37|[32|[85|[110|[107|[110|[111|[119|[110|[32|[98|[101|[104|[97|[118|[105|[111|[117|[114|[115|[58|[10]]]]]]]]]]]]]]]]]]]]]]],[37|[37|[32|[32]]]]>
					  ( <_cor11> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor11})
					    -| ['compiler_generated'] )
					end
				    in  do  %% Line 796
					    call 'io':'put_chars'
						(Output, Prompt)
					    %% Line 797
					    apply 'do_print_unknown_behaviours'/3
						(Output, Behaviours, Prefix)
		    ( <_cor14> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor14})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15})
		  -| [{'function_name',{'print_unknown_behaviours',1}}] )
	    -| ['compiler_generated'] )
	end
'do_print_unknown_behaviours'/3 =
    %% Line 800
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Output,[B|T],Before> when 'true' ->
	      do  %% Line 801
		  call 'io':'format'
		      (Output, [126|[115|[126|[112|[10]]]]], [Before|[B|[]]])
		  %% Line 802
		  apply 'do_print_unknown_behaviours'/3
		      (Output, T, Before)
	  %% Line 803
	  <_cor6,[],_cor7> when 'true' ->
	      %% Line 804
	      'ok'
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'do_print_unknown_behaviours',3}}] )
	    -| ['compiler_generated'] )
	end
'print_warnings'/1 =
    %% Line 806
    fun (_cor0) ->
	case _cor0 of
	  <{'cl_state',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,[],_cor30}> when 'true' ->
	      %% Line 807
	      'ok'
	  %% Line 808
	  <{'cl_state',_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,Output,%% Line 809
									Format,%% Line 810
									       FOpt,_cor37,_cor38,_cor39,_cor40,%% Line 811
														Warnings,_cor41}> when 'true' ->
	      let <PrWarnings> =
		  %% Line 812
		  apply 'process_warnings'/1
		      (Warnings)
	      in  %% Line 813
		  case PrWarnings of
		    %% Line 814
		    <[]> when 'true' ->
			'ok'
		    %% Line 815
		    <[_cor42|_cor43]> when 'true' ->
			let <_cor13> =
			    %% Line 816
			    case Format of
			      %% Line 817
			      <'formatted'> when 'true' ->
				  %% Line 818
				  ( letrec
					'lc$^0'/1 =
					    fun (_cor4) ->
						case _cor4 of
						  <[W|_cor3]> when 'true' ->
						      let <_cor5> =
							  call 'dialyzer':'format_warning'
							      (W, FOpt)
						      in  let <_cor6> =
							      apply 'lc$^0'/1
								  (_cor3)
							  in  ( [_cor5|_cor6]
								-| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_cor4> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor4})
							  -| [{'function_name',{'lc$^0',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  apply 'lc$^0'/1
					    (PrWarnings)
				    -| ['list_comprehension'] )
			      %% Line 819
			      <'raw'> when 'true' ->
				  %% Line 820
				  ( letrec
					'lc$^1'/1 =
					    fun (_cor9) ->
						case _cor9 of
						  <[W|_cor8]> when 'true' ->
						      let <_cor10> =
							  call 'io_lib':'format'
							      ([126|[112|[46|[32|[10]]]]], [W|[]])
						      in  let <_cor11> =
							      apply 'lc$^1'/1
								  (_cor8)
							  in  ( [_cor10|_cor11]
								-| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_cor9> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor9})
							  -| [{'function_name',{'lc$^1',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  apply 'lc$^1'/1
					    (PrWarnings)
				    -| ['list_comprehension'] )
			      ( <_cor12> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor12})
				-| ['compiler_generated'] )
			    end
			in  %% Line 822
			    call 'io':'format'
				(Output, [10|[126|[115]]], [_cor13|[]])
		    ( <_cor15> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor15})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16})
		  -| [{'function_name',{'print_warnings',1}}] )
	    -| ['compiler_generated'] )
	end
'process_warnings'/1 =
    %% Line 827
    fun (_cor0) ->
	let <Warnings1> =
	    %% Line 828
	    call 'lists':'keysort'
		(2, _cor0)
	in  %% Line 829
	    apply 'remove_duplicate_warnings'/2
		(Warnings1, [])
'remove_duplicate_warnings'/2 =
    %% Line 831
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Duplicate|[_cor4|Left]],Acc>
	      when call 'erlang':'=:='
		    (_cor4,
		     Duplicate) ->
	      %% Line 832
	      apply 'remove_duplicate_warnings'/2
		  ([Duplicate|Left], Acc)
	  %% Line 833
	  <[NotDuplicate|Left],Acc> when 'true' ->
	      %% Line 834
	      apply 'remove_duplicate_warnings'/2
		  (Left, [NotDuplicate|Acc])
	  %% Line 835
	  <[],Acc> when 'true' ->
	      %% Line 836
	      call 'lists':'reverse'
		  (Acc)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'remove_duplicate_warnings',2}}] )
	    -| ['compiler_generated'] )
	end
'get_files_from_opts'/1 =
    %% Line 838
    fun (_cor0) ->
	%% Line 839
	( case _cor0 of
	    ( <( {'options',_cor11,_cor12,_cor13,_cor14,_cor15,_rec62,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <Files1> =
		      %% Line 840
		      apply 'add_files'/2
			  (_cor11, _rec62)
		  in  let <Files2> =
			  %% Line 841
			  apply 'add_files_rec'/2
			      (_cor12, _rec62)
		      in  %% Line 842
			  call 'ordsets':'union'
			      (Files1, Files2)
	      -| ['compiler_generated'] )
	    ( <_cor30> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','options'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'add_files_rec'/2 =
    %% Line 844
    fun (_cor1,_cor0) ->
	%% Line 845
	apply 'add_files'/3
	    (_cor1, _cor0, 'true')
'add_files'/2 =
    %% Line 847
    fun (_cor1,_cor0) ->
	%% Line 848
	apply 'add_files'/3
	    (_cor1, _cor0, 'false')
'add_files'/3 =
    %% Line 850
    fun (_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 851
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[F|_cor4]> when 'true' ->
				let <_cor6> =
				    call 'filename':'absname'
					(F)
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor2)
	      -| ['list_comprehension'] )
	in  let <Files2> =
		%% Line 852
		call 'ordsets':'from_list'
		    (_cor8)
	    in  let <_cor13> =
		    %% Line 853
		    ( fun (_cor11) ->
			  call 'filelib':'is_dir'
			      (_cor11)
		      -| [{'id',{0,0,'-add_files/3-fun-0-'}}] )
		in  let <Dirs> =
			%% Line 853
			call 'ordsets':'filter'
			    (_cor13, Files2)
		    in  let <Files3> =
			    %% Line 854
			    call 'ordsets':'subtract'
				(Files2, Dirs)
			in  let <_cor17> =
				%% Line 855
				case _cor1 of
				  %% Line 856
				  <'byte_code'> when 'true' ->
				      [46|[98|[101|[97|[109]]]]]
				  %% Line 857
				  <'src_code'> when 'true' ->
				      [46|[101|[114|[108]]]]
				  ( <_cor16> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor16})
				    -| ['compiler_generated'] )
				end
			    in  let <Fun> =
				    %% Line 859
				    apply 'add_file_fun'/1
					(_cor17)
				in  let <_cor24> =
					%% Line 860
					( fun (_cor21,_cor20) ->
					      %% Line 861
					      call 'filelib':'fold_files'
						  (_cor21, _cor17, _cor0, Fun, _cor20)
					  -| [{'id',{0,0,'-add_files/3-fun-1-'}}] )
				    in  %% Line 860
					call 'lists':'foldl'
					    (_cor24, %% Line 862
						     Files3, %% Line 862
							     Dirs)
'add_file_fun'/1 =
    %% Line 864
    fun (_cor0) ->
	%% Line 865
	( fun (_cor5,_cor4) ->
	      let <_cor1> =
		  %% Line 866
		  call 'filename':'extension'
		      (_cor5)
	      in  %% Line 866
		  case <> of
		    %% Line 867
		    <>
			when call 'erlang':'=:='
			      (_cor1,
			       _cor0) ->
			let <AbsName> =
			    %% Line 868
			    call 'filename':'absname'
				(_cor5)
			in  %% Line 869
			    call 'ordsets':'add_element'
				(AbsName, _cor4)
		    %% Line 870
		    <> when 'true' ->
			_cor4
		  end
	  -| [{'id',{0,0,'-add_file_fun/1-fun-0-'}}] )
'start_analysis'/2 =
    %% Line 876
    fun (_cor1,_cor0) ->
	let <Self> =
	    %% Line 877
	    call 'erlang':'self'
		()
	in  %% Line 878
	    ( case _cor1 of
		( <( {'cl_state',_cor12,_cor13,_cor14,_cor15,_rec65,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <Fun> =
			  %% Line 879
			  ( fun () ->
				%% Line 880
				call 'dialyzer_analysis_callgraph':'start'
				    (Self, _rec65, _cor0)
			    -| [{'id',{0,0,'-start_analysis/2-fun-0-'}}] )
		      in  let <BackendPid> =
			      %% Line 882
			      call 'erlang':'spawn_link'
				  (Fun)
			  in  %% Line 883
			      call 'erlang':'setelement'
				  (2, _cor1, BackendPid)
		  -| ['compiler_generated'] )
		( <_cor26> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','cl_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('dialyzer_cl')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('dialyzer_cl', _cor0)
end