module 'dialyzer_worker' ['launch'/4,
			  'module_info'/0,
			  'module_info'/1,
			  'sequential'/4]
    attributes [%% Line 25
		'export_type' =
		    %% Line 25
		    [{'worker',0}],
		%% Line 27
		'type' =
		    %% Line 27
		    [{'worker',{'type',27,'pid',[]},[]}],
		%% Line 29
		'type' =
		    %% Line 29
		    [{'mode',{'remote_type',29,[{'atom',29,'dialyzer_coordinator'}|[{'atom',29,'mode'}|[[]]]]},[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{'coordinator',{'remote_type',30,[{'atom',30,'dialyzer_coordinator'}|[{'atom',30,'coordinator'}|[[]]]]},[]}],
		%% Line 31
		'type' =
		    %% Line 31
		    [{'init_data',{'remote_type',31,[{'atom',31,'dialyzer_coordinator'}|[{'atom',31,'init_data'}|[[]]]]},[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{'result',{'remote_type',32,[{'atom',32,'dialyzer_coordinator'}|[{'atom',32,'result'}|[[]]]]},[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','state'},[{'typed_record_field',{'record_field',35,{'atom',35,'mode'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'mode',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'job'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'mfa_or_funlbl',[]}|[{'remote_type',36,[{'atom',36,'file'}|[{'atom',36,'filename'}|[[]]]]}]]]}}|[{'typed_record_field',{'record_field',37,{'atom',37,'coordinator'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'type',37,'coordinator',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'init_data'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'init_data',[]}]]}}|[{'typed_record_field',{'record_field',39,{'atom',39,'depends_on'},{'nil',39}},{'type',39,'list',[]}}]]]]],[]}],
		%% Line 33
		'type' =
		    %% Line 33
		    [{'dial_ret',{'type',33,'union',[{'integer',33,0}|[{'integer',34,1}|[{'integer',35,2}]]]},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'dial_warn_tag',{'type',68,'union',[{'atom',68,'warn_return_no_exit'}|[{'atom',68,'warn_return_only_exit'}|[{'atom',69,'warn_not_called'}|[{'atom',69,'warn_non_proper_list'}|[{'atom',70,'warn_matching'}|[{'atom',70,'warn_opaque'}|[{'atom',70,'warn_fun_app'}|[{'atom',71,'warn_failing_call'}|[{'atom',71,'warn_bin_construction'}|[{'atom',72,'warn_contract_types'}|[{'atom',72,'warn_contract_syntax'}|[{'atom',73,'warn_contract_not_equal'}|[{'atom',73,'warn_contract_subtype'}|[{'atom',74,'warn_contract_supertype'}|[{'atom',74,'warn_callgraph'}|[{'atom',75,'warn_umatched_return'}|[{'atom',75,'warn_race_condition'}|[{'atom',76,'warn_behaviour'}|[{'atom',76,'warn_contract_range'}|[{'atom',77,'warn_undefined_callbacks'}|[{'atom',77,'warn_unknown'}]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'file_line',{'type',83,'tuple',[{'remote_type',83,[{'atom',83,'file'}|[{'atom',83,'filename'}|[[]]]]}|[{'type',83,'non_neg_integer',[]}]]},[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{'dial_warning',{'type',84,'tuple',[{'type',84,'dial_warn_tag',[]}|[{'type',84,'file_line',[]}|[{'type',84,'tuple',[{'type',84,'atom',[]}|[{'type',84,'list',[{'type',84,'term',[]}]}]]}]]]},[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{'dial_error',{'type',89,'any',[]},[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{'anal_type',{'type',96,'union',[{'atom',96,'succ_typings'}|[{'atom',96,'plt_build'}]]},[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{'anal_type1',{'type',97,'union',[{'type',97,'anal_type',[]}|[{'atom',97,'plt_add'}|[{'atom',97,'plt_check'}|[{'atom',97,'plt_remove'}]]]]},[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{'contr_constr',{'type',98,'tuple',[{'atom',98,'subtype'}|[{'remote_type',98,[{'atom',98,'erl_types'}|[{'atom',98,'erl_type'}|[[]]]]}|[{'remote_type',98,[{'atom',98,'erl_types'}|[{'atom',98,'erl_type'}|[[]]]]}]]]},[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{'contract_pair',{'type',99,'tuple',[{'remote_type',99,[{'atom',99,'erl_types'}|[{'atom',99,'erl_type'}|[[]]]]}|[{'type',99,'list',[{'type',99,'contr_constr',[]}]}]]},[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{'dial_define',{'type',100,'tuple',[{'type',100,'atom',[]}|[{'type',100,'term',[]}]]},[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{'dial_option',{'type',101,'tuple',[{'type',101,'atom',[]}|[{'type',101,'term',[]}]]},[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{'dial_options',{'type',102,'list',[{'type',102,'dial_option',[]}]},[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{'fopt',{'type',103,'union',[{'atom',103,'basename'}|[{'atom',103,'fullpath'}]]},[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{'format',{'type',104,'union',[{'atom',104,'formatted'}|[{'atom',104,'raw'}]]},[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{'label',{'type',105,'non_neg_integer',[]},[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{'rep_mode',{'type',106,'union',[{'atom',106,'quiet'}|[{'atom',106,'normal'}|[{'atom',106,'verbose'}]]]},[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{'start_from',{'type',107,'union',[{'atom',107,'byte_code'}|[{'atom',107,'src_code'}]]},[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{'mfa_or_funlbl',{'type',108,'union',[{'type',108,'label',[]}|[{'type',108,'mfa',[]}]]},[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{'solver',{'type',109,'union',[{'atom',109,'v1'}|[{'atom',109,'v2'}]]},[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{{'record','analysis'},[{'typed_record_field',{'record_field',115,{'atom',115,'analysis_pid'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'pid',[]}]]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'type'},{'atom',116,'succ_typings'}},{'type',116,'anal_type',[]}}|[{'typed_record_field',{'record_field',117,{'atom',117,'defines'},{'nil',117}},{'type',117,'list',[{'type',117,'dial_define',[]}]}}|[{'typed_record_field',{'record_field',118,{'atom',118,'doc_plt'}},{'type',118,'union',[{'atom',118,'undefined'}|[{'remote_type',118,[{'atom',118,'dialyzer_plt'}|[{'atom',118,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',119,{'atom',119,'files'},{'nil',119}},{'type',119,'list',[{'remote_type',119,[{'atom',119,'file'}|[{'atom',119,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'include_dirs'},{'nil',120}},{'type',120,'list',[{'remote_type',120,[{'atom',120,'file'}|[{'atom',120,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',121,{'atom',121,'start_from'},{'atom',121,'byte_code'}},{'type',121,'start_from',[]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'plt'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'remote_type',122,[{'atom',122,'dialyzer_plt'}|[{'atom',122,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'use_contracts'},{'atom',123,'true'}},{'type',123,'boolean',[]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'race_detection'},{'atom',124,'false'}},{'type',124,'boolean',[]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'behaviours_chk'},{'atom',125,'false'}},{'type',125,'boolean',[]}}|[{'typed_record_field',{'record_field',126,{'atom',126,'timing'},{'atom',126,'false'}},{'type',126,'union',[{'type',126,'boolean',[]}|[{'atom',126,'debug'}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'timing_server'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'remote_type',127,[{'atom',127,'dialyzer_timing'}|[{'atom',127,'timing_server'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'callgraph_file'},{'string',128,[]}},{'remote_type',128,[{'atom',128,'file'}|[{'atom',128,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'solvers'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'list',[{'type',129,'solver',[]}]}]]}}]]]]]]]]]]]]]]],[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{{'record','options'},[{'typed_record_field',{'record_field',131,{'atom',131,'files'},{'nil',131}},{'type',131,'list',[{'remote_type',131,[{'atom',131,'file'}|[{'atom',131,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'files_rec'},{'nil',132}},{'type',132,'list',[{'remote_type',132,[{'atom',132,'file'}|[{'atom',132,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',133,{'atom',133,'analysis_type'},{'atom',133,'succ_typings'}},{'type',133,'anal_type1',[]}}|[{'typed_record_field',{'record_field',134,{'atom',134,'timing'},{'atom',134,'false'}},{'type',134,'union',[{'type',134,'boolean',[]}|[{'atom',134,'debug'}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'defines'},{'nil',135}},{'type',135,'list',[{'type',135,'dial_define',[]}]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'from'},{'atom',136,'byte_code'}},{'type',136,'start_from',[]}}|[{'typed_record_field',{'record_field',137,{'atom',137,'get_warnings'},{'atom',137,'maybe'}},{'type',137,'union',[{'type',137,'boolean',[]}|[{'atom',137,'maybe'}]]}}|[{'typed_record_field',{'record_field',138,{'atom',138,'init_plts'},{'nil',138}},{'type',138,'list',[{'remote_type',138,[{'atom',138,'file'}|[{'atom',138,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',139,{'atom',139,'include_dirs'},{'nil',139}},{'type',139,'list',[{'remote_type',139,[{'atom',139,'file'}|[{'atom',139,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'output_plt'},{'atom',140,'none'}},{'type',140,'union',[{'atom',140,'none'}|[{'remote_type',140,[{'atom',140,'file'}|[{'atom',140,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',141,{'atom',141,'legal_warnings'},{'call',141,{'remote',141,{'atom',141,'ordsets'},{'atom',141,'new'}},[]}},{'remote_type',141,[{'atom',141,'ordsets'}|[{'atom',141,'ordset'}|[[{'type',141,'dial_warn_tag',[]}]]]]}}|[{'typed_record_field',{'record_field',142,{'atom',142,'report_mode'},{'atom',142,'normal'}},{'type',142,'rep_mode',[]}}|[{'typed_record_field',{'record_field',143,{'atom',143,'erlang_mode'},{'atom',143,'false'}},{'type',143,'boolean',[]}}|[{'typed_record_field',{'record_field',144,{'atom',144,'use_contracts'},{'atom',144,'true'}},{'type',144,'boolean',[]}}|[{'typed_record_field',{'record_field',145,{'atom',145,'output_file'},{'atom',145,'none'}},{'type',145,'union',[{'atom',145,'none'}|[{'remote_type',145,[{'atom',145,'file'}|[{'atom',145,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',146,{'atom',146,'output_format'},{'atom',146,'formatted'}},{'type',146,'format',[]}}|[{'typed_record_field',{'record_field',147,{'atom',147,'filename_opt'},{'atom',147,'basename'}},{'type',147,'fopt',[]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'callgraph_file'},{'string',148,[]}},{'remote_type',148,[{'atom',148,'file'}|[{'atom',148,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'check_plt'},{'atom',149,'true'}},{'type',149,'boolean',[]}}|[{'typed_record_field',{'record_field',150,{'atom',150,'solvers'},{'nil',150}},{'type',150,'list',[{'type',150,'solver',[]}]}}]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 152
		'type' =
		    %% Line 152
		    [{{'record','contract'},[{'typed_record_field',{'record_field',152,{'atom',152,'contracts'},{'nil',152}},{'type',152,'list',[{'type',152,'contract_pair',[]}]}}|[{'typed_record_field',{'record_field',153,{'atom',153,'args'},{'nil',153}},{'type',153,'list',[{'remote_type',153,[{'atom',153,'erl_types'}|[{'atom',153,'erl_type'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',154,{'atom',154,'forms'},{'nil',154}},{'type',154,'list',[{'type',154,'tuple',[{'var',154,'_'}|[{'var',154,'_'}]]}]}}]]],[]}],
		%% Line 54
		'spec' =
		    %% Line 54
		    [{{'launch',4},[{'type',54,'fun',[{'type',54,'product',[{'type',54,'mode',[]}|[{'type',54,'list',[{'type',54,'mfa_or_funlbl',[]}]}|[{'type',54,'init_data',[]}|[{'type',54,'coordinator',[]}]]]]}|[{'type',54,'worker',[]}]]}]}],
		%% Line 174
		'type' =
		    %% Line 174
		    [{'extra',{'type',174,'union',[{'type',174,'label',[]}|[{'atom',174,'unused'}]]},[]}],
		%% Line 176
		'spec' =
		    %% Line 176
		    [{{'sequential',4},[{'type',176,'fun',[{'type',176,'product',[{'type',176,'mode',[]}|[{'type',176,'list',[{'type',176,'mfa_or_funlbl',[]}]}|[{'type',176,'init_data',[]}|[{'type',176,'extra',[]}]]]]}|[{'type',176,'result',[]}]]}]}]]
'launch'/4 =
    %% Line 56
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <State> =
	    %% Line 57
	    {'state',_cor3,_cor2,_cor0,_cor1,[]}
	in  let <_cor10> =
		%% Line 62
		case _cor3 of
		  %% Line 63
		  <X>
		      when let <_cor5> =
			    call 'erlang':'=:='
				(_cor3, 'typesig')
			in  let <_cor6> =
				call 'erlang':'=:='
				    (_cor3, 'dataflow')
			    in  call 'erlang':'or'
				    (_cor5, _cor6) ->
		      'initializing'
		  %% Line 64
		  <X>
		      when let <_cor7> =
			    call 'erlang':'=:='
				(_cor3, 'compile')
			in  let <_cor8> =
				call 'erlang':'=:='
				    (_cor3, 'warnings')
			    in  call 'erlang':'or'
				    (_cor7, _cor8) ->
		      'running'
		  ( <_cor9> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor9})
		    -| ['compiler_generated'] )
		end
	    in  let <_cor12> =
		    %% Line 66
		    ( fun () ->
			  apply 'loop'/2
			      (_cor10, State)
		      -| [{'id',{0,0,'-launch/4-fun-0-'}}] )
		in  %% Line 66
		    call 'erlang':'spawn_link'
			(_cor12)
'loop'/2 =
    %% Line 70
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'updating',State> when 'true' ->
	      let <_cor3> =
		  %% Line 73
		  case apply 'waits_more_success_typings'/1
			   (State) of
		    %% Line 74
		    <'true'> when 'true' ->
			'waiting'
		    %% Line 75
		    <'false'> when 'true' ->
			'running'
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 77
		  apply 'loop'/2
		      (_cor3, State)
	  %% Line 78
	  <'initializing',State = {'state',_cor21,SCC,_cor22,InitData,_cor23}> when 'true' ->
	      let <DependsOn> =
		  %% Line 79
		  call 'dialyzer_succ_typings':'find_depends_on'
		      (SCC, InitData)
	      in  let <_cor8> =
		      %% Line 81
		      call 'erlang':'setelement'
			  (6, State, DependsOn)
		  in  %% Line 81
		      apply 'loop'/2
			  ('updating', _cor8)
	  %% Line 82
	  <'waiting',State> when 'true' ->
	      let <NewState> =
		  %% Line 84
		  apply 'wait_for_success_typings'/1
		      (State)
	      in  %% Line 85
		  apply 'loop'/2
		      ('updating', NewState)
	  %% Line 86
	  <'running',State = {'state','compile',_cor30,_cor31,_cor32,_cor33}> when 'true' ->
	      do  %% Line 87
		  call 'dialyzer_coordinator':'wait_activation'
		      ()
		  let <_cor12> =
		      %% Line 90
		      case apply 'start_compilation'/1
			       (State) of
			%% Line 91
			<{'ok',EstimatedSize,Data}> when 'true' ->
			    let <Label> =
				%% Line 92
				apply 'ask_coordinator_for_label'/2
				    (EstimatedSize, State)
			    in  %% Line 93
				apply 'continue_compilation'/2
				    (Label, Data)
			%% Line 94
			<Error = {'error',_X_Reason}> when 'true' ->
			    %% Line 95
			    Error
			( <_cor11> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor11})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 97
		      apply 'report_to_coordinator'/2
			  (_cor12, State)
	  %% Line 98
	  <'running',State = {'state','warnings',_cor34,_cor35,_cor36,_cor37}> when 'true' ->
	      do  %% Line 99
		  call 'dialyzer_coordinator':'wait_activation'
		      ()
		  let <Result> =
		      %% Line 101
		      apply 'collect_warnings'/1
			  (State)
		  in  %% Line 102
		      apply 'report_to_coordinator'/2
			  (Result, State)
	  %% Line 103
	  <'running',State = {'state',Mode,_cor38,_cor39,_cor40,_cor41}>
	      when let <_cor15> =
		    %% Line 104
		    call 'erlang':'=:='
			(Mode, 'typesig')
		in  let <_cor16> =
			%% Line 104
			call 'erlang':'=:='
			    (Mode, 'dataflow')
		    in  %% Line 104
			call 'erlang':'or'
			    (_cor15, _cor16) ->
	      do  %% Line 105
		  apply 'request_activation'/1
		      (State)
		  let <NotFixpoint> =
		      %% Line 107
		      apply 'do_work'/1
			  (State)
		  in  %% Line 108
		      case apply 'broadcast_done'/1
			       (State) of
			<'ok'> when 'true' ->
			    %% Line 109
			    apply 'report_to_coordinator'/2
				(NotFixpoint, State)
			( <_cor18> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor18})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19})
		  -| [{'function_name',{'loop',2}}] )
	    -| ['compiler_generated'] )
	end
'waits_more_success_typings'/1 =
    %% Line 111
    fun (_cor0) ->
	case _cor0 of
	  <{'state',_cor2,_cor3,_cor4,_cor5,Depends}> when 'true' ->
	      %% Line 112
	      call 'erlang':'=/='
		  (Depends, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'waits_more_success_typings',1}}] )
	    -| ['compiler_generated'] )
	end
'broadcast_done'/1 =
    %% Line 114
    fun (_cor0) ->
	case _cor0 of
	  <{'state',_cor4,SCC,%% Line 115
			      Coordinator,InitData,_cor5}> when 'true' ->
	      let <RequiredBy> =
		  %% Line 116
		  call 'dialyzer_succ_typings':'find_required_by'
		      (SCC, InitData)
	      in  %% Line 117
		  case %% Line 118
		       call 'dialyzer_coordinator':'sccs_to_pids'
			   (RequiredBy, Coordinator) of
		    <{Callers,Unknown}> when 'true' ->
			do  %% Line 119
			    apply 'send_done'/2
				(Callers, SCC)
			    %% Line 120
			    apply 'continue_broadcast_done'/3
				(Unknown, SCC, Coordinator)
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'broadcast_done',1}}] )
	    -| ['compiler_generated'] )
	end
'send_done'/2 =
    %% Line 122
    fun (_cor1,_cor0) ->
	let <SendSTFun> =
	    %% Line 124
	    ( fun (_cor2) ->
		  call 'erlang':'!'
		      (_cor2, {'done',_cor0})
	      -| [{'id',{0,0,'-send_done/2-fun-0-'}}] )
	in  %% Line 125
	    call 'lists':'foreach'
		(SendSTFun, _cor1)
'continue_broadcast_done'/3 =
    %% Line 127
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_X_SCC,_X_Coordinator> when 'true' ->
	      'ok'
	  %% Line 128
	  <Rest,SCC,Coordinator> when 'true' ->
	      do  %% Line 131
		  call 'timer':'sleep'
		      (500)
		  %% Line 132
		  case call 'dialyzer_coordinator':'sccs_to_pids'
			   (Rest, Coordinator) of
		    <{Callers,Unknown}> when 'true' ->
			do  %% Line 133
			    apply 'send_done'/2
				(Callers, SCC)
			    %% Line 134
			    apply 'continue_broadcast_done'/3
				(Unknown, SCC, Coordinator)
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	end
'wait_for_success_typings'/1 =
    %% Line 136
    fun (_cor0) ->
	case _cor0 of
	  <State = {'state',_cor5,_cor6,_cor7,_cor8,DependsOn}> when 'true' ->
	      %% Line 137
	      receive
		%% Line 138
		<{'done',SCC}> when 'true' ->
		    let <_rec1> =
			%% Line 140
			call 'erlang':'--'
			    (DependsOn, [SCC|[]])
		    in  %% Line 140
			call 'erlang':'setelement'
			    (6, State, _rec1)
	      after %% Line 142
		    5000 ->
		%% Line 144
		State
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'wait_for_success_typings',1}}] )
	    -| ['compiler_generated'] )
	end
'request_activation'/1 =
    %% Line 147
    fun (_cor0) ->
	case _cor0 of
	  <{'state',_cor2,_cor3,Coordinator,_cor4,_cor5}> when 'true' ->
	      %% Line 148
	      call 'dialyzer_coordinator':'request_activation'
		  (Coordinator)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'request_activation',1}}] )
	    -| ['compiler_generated'] )
	end
'do_work'/1 =
    %% Line 150
    fun (_cor0) ->
	case _cor0 of
	  <{'state',Mode,Job,_cor3,InitData,_cor4}> when 'true' ->
	      %% Line 151
	      case Mode of
		%% Line 152
		<'typesig'> when 'true' ->
		    call 'dialyzer_succ_typings':'find_succ_types_for_scc'
			(Job, InitData)
		%% Line 153
		<'dataflow'> when 'true' ->
		    call 'dialyzer_succ_typings':'refine_one_module'
			(Job, InitData)
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'do_work',1}}] )
	    -| ['compiler_generated'] )
	end
'report_to_coordinator'/2 =
    %% Line 156
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Result,{'state',_cor4,Job,Coordinator,_cor5,_cor6}> when 'true' ->
	      %% Line 158
	      call 'dialyzer_coordinator':'job_done'
		  (Job, Result, Coordinator)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'report_to_coordinator',2}}] )
	    -| ['compiler_generated'] )
	end
'start_compilation'/1 =
    %% Line 160
    fun (_cor0) ->
	case _cor0 of
	  <{'state',_cor2,Job,_cor3,InitData,_cor4}> when 'true' ->
	      %% Line 161
	      call 'dialyzer_analysis_callgraph':'start_compilation'
		  (Job, InitData)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'start_compilation',1}}] )
	    -| ['compiler_generated'] )
	end
'ask_coordinator_for_label'/2 =
    %% Line 163
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <EstimatedSize,{'state',_cor4,_cor5,Coordinator,_cor6,_cor7}> when 'true' ->
	      %% Line 164
	      call 'dialyzer_coordinator':'get_next_label'
		  (EstimatedSize, Coordinator)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'ask_coordinator_for_label',2}}] )
	    -| ['compiler_generated'] )
	end
'continue_compilation'/2 =
    %% Line 166
    fun (_cor1,_cor0) ->
	%% Line 167
	call 'dialyzer_analysis_callgraph':'continue_compilation'
	    (_cor1, _cor0)
'collect_warnings'/1 =
    %% Line 169
    fun (_cor0) ->
	case _cor0 of
	  <{'state',_cor2,Job,_cor3,InitData,_cor4}> when 'true' ->
	      %% Line 170
	      call 'dialyzer_succ_typings':'collect_warnings'
		  (Job, InitData)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'collect_warnings',1}}] )
	    -| ['compiler_generated'] )
	end
'sequential'/4 =
    %% Line 178
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'compile',Job,InitData,Extra> when 'true' ->
	      %% Line 179
	      case call 'dialyzer_analysis_callgraph':'start_compilation'
		       (Job, InitData) of
		%% Line 180
		<{'ok',EstimatedSize,Data}> when 'true' ->
		    let <_cor4> =
			%% Line 181
			apply 'continue_compilation'/2
			    (Extra, Data)
		    in  %% Line 181
			{EstimatedSize,_cor4}
		%% Line 182
		<Error = {'error',_X_Reason}> when 'true' ->
		    {0,Error}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 184
	  <'typesig',Job,InitData,_X_Extra> when 'true' ->
	      %% Line 185
	      call 'dialyzer_succ_typings':'find_succ_types_for_scc'
		  (Job, InitData)
	  %% Line 186
	  <'dataflow',Job,InitData,_X_Extra> when 'true' ->
	      %% Line 187
	      call 'dialyzer_succ_typings':'refine_one_module'
		  (Job, InitData)
	  %% Line 188
	  <'warnings',Job,InitData,_X_Extra> when 'true' ->
	      %% Line 189
	      call 'dialyzer_succ_typings':'collect_warnings'
		  (Job, InitData)
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'sequential',4}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('dialyzer_worker')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('dialyzer_worker', _cor0)
end