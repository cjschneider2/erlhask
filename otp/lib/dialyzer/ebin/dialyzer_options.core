module 'dialyzer_options' ['build'/1,
			   'module_info'/0,
			   'module_info'/1]
    attributes [%% Line 33
		'type' =
		    %% Line 33
		    [{'dial_ret',{'type',33,'union',[{'integer',33,0}|[{'integer',34,1}|[{'integer',35,2}]]]},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'dial_warn_tag',{'type',68,'union',[{'atom',68,'warn_return_no_exit'}|[{'atom',68,'warn_return_only_exit'}|[{'atom',69,'warn_not_called'}|[{'atom',69,'warn_non_proper_list'}|[{'atom',70,'warn_matching'}|[{'atom',70,'warn_opaque'}|[{'atom',70,'warn_fun_app'}|[{'atom',71,'warn_failing_call'}|[{'atom',71,'warn_bin_construction'}|[{'atom',72,'warn_contract_types'}|[{'atom',72,'warn_contract_syntax'}|[{'atom',73,'warn_contract_not_equal'}|[{'atom',73,'warn_contract_subtype'}|[{'atom',74,'warn_contract_supertype'}|[{'atom',74,'warn_callgraph'}|[{'atom',75,'warn_umatched_return'}|[{'atom',75,'warn_race_condition'}|[{'atom',76,'warn_behaviour'}|[{'atom',76,'warn_contract_range'}|[{'atom',77,'warn_undefined_callbacks'}|[{'atom',77,'warn_unknown'}]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'file_line',{'type',83,'tuple',[{'remote_type',83,[{'atom',83,'file'}|[{'atom',83,'filename'}|[[]]]]}|[{'type',83,'non_neg_integer',[]}]]},[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{'dial_warning',{'type',84,'tuple',[{'type',84,'dial_warn_tag',[]}|[{'type',84,'file_line',[]}|[{'type',84,'tuple',[{'type',84,'atom',[]}|[{'type',84,'list',[{'type',84,'term',[]}]}]]}]]]},[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{'dial_error',{'type',89,'any',[]},[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{'anal_type',{'type',96,'union',[{'atom',96,'succ_typings'}|[{'atom',96,'plt_build'}]]},[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{'anal_type1',{'type',97,'union',[{'type',97,'anal_type',[]}|[{'atom',97,'plt_add'}|[{'atom',97,'plt_check'}|[{'atom',97,'plt_remove'}]]]]},[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{'contr_constr',{'type',98,'tuple',[{'atom',98,'subtype'}|[{'remote_type',98,[{'atom',98,'erl_types'}|[{'atom',98,'erl_type'}|[[]]]]}|[{'remote_type',98,[{'atom',98,'erl_types'}|[{'atom',98,'erl_type'}|[[]]]]}]]]},[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{'contract_pair',{'type',99,'tuple',[{'remote_type',99,[{'atom',99,'erl_types'}|[{'atom',99,'erl_type'}|[[]]]]}|[{'type',99,'list',[{'type',99,'contr_constr',[]}]}]]},[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{'dial_define',{'type',100,'tuple',[{'type',100,'atom',[]}|[{'type',100,'term',[]}]]},[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{'dial_option',{'type',101,'tuple',[{'type',101,'atom',[]}|[{'type',101,'term',[]}]]},[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{'dial_options',{'type',102,'list',[{'type',102,'dial_option',[]}]},[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{'fopt',{'type',103,'union',[{'atom',103,'basename'}|[{'atom',103,'fullpath'}]]},[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{'format',{'type',104,'union',[{'atom',104,'formatted'}|[{'atom',104,'raw'}]]},[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{'label',{'type',105,'non_neg_integer',[]},[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{'rep_mode',{'type',106,'union',[{'atom',106,'quiet'}|[{'atom',106,'normal'}|[{'atom',106,'verbose'}]]]},[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{'start_from',{'type',107,'union',[{'atom',107,'byte_code'}|[{'atom',107,'src_code'}]]},[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{'mfa_or_funlbl',{'type',108,'union',[{'type',108,'label',[]}|[{'type',108,'mfa',[]}]]},[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{'solver',{'type',109,'union',[{'atom',109,'v1'}|[{'atom',109,'v2'}]]},[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{{'record','analysis'},[{'typed_record_field',{'record_field',115,{'atom',115,'analysis_pid'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'pid',[]}]]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'type'},{'atom',116,'succ_typings'}},{'type',116,'anal_type',[]}}|[{'typed_record_field',{'record_field',117,{'atom',117,'defines'},{'nil',117}},{'type',117,'list',[{'type',117,'dial_define',[]}]}}|[{'typed_record_field',{'record_field',118,{'atom',118,'doc_plt'}},{'type',118,'union',[{'atom',118,'undefined'}|[{'remote_type',118,[{'atom',118,'dialyzer_plt'}|[{'atom',118,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',119,{'atom',119,'files'},{'nil',119}},{'type',119,'list',[{'remote_type',119,[{'atom',119,'file'}|[{'atom',119,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'include_dirs'},{'nil',120}},{'type',120,'list',[{'remote_type',120,[{'atom',120,'file'}|[{'atom',120,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',121,{'atom',121,'start_from'},{'atom',121,'byte_code'}},{'type',121,'start_from',[]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'plt'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'remote_type',122,[{'atom',122,'dialyzer_plt'}|[{'atom',122,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'use_contracts'},{'atom',123,'true'}},{'type',123,'boolean',[]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'race_detection'},{'atom',124,'false'}},{'type',124,'boolean',[]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'behaviours_chk'},{'atom',125,'false'}},{'type',125,'boolean',[]}}|[{'typed_record_field',{'record_field',126,{'atom',126,'timing'},{'atom',126,'false'}},{'type',126,'union',[{'type',126,'boolean',[]}|[{'atom',126,'debug'}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'timing_server'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'remote_type',127,[{'atom',127,'dialyzer_timing'}|[{'atom',127,'timing_server'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'callgraph_file'},{'string',128,[]}},{'remote_type',128,[{'atom',128,'file'}|[{'atom',128,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'solvers'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'list',[{'type',129,'solver',[]}]}]]}}]]]]]]]]]]]]]]],[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{{'record','options'},[{'typed_record_field',{'record_field',131,{'atom',131,'files'},{'nil',131}},{'type',131,'list',[{'remote_type',131,[{'atom',131,'file'}|[{'atom',131,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'files_rec'},{'nil',132}},{'type',132,'list',[{'remote_type',132,[{'atom',132,'file'}|[{'atom',132,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',133,{'atom',133,'analysis_type'},{'atom',133,'succ_typings'}},{'type',133,'anal_type1',[]}}|[{'typed_record_field',{'record_field',134,{'atom',134,'timing'},{'atom',134,'false'}},{'type',134,'union',[{'type',134,'boolean',[]}|[{'atom',134,'debug'}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'defines'},{'nil',135}},{'type',135,'list',[{'type',135,'dial_define',[]}]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'from'},{'atom',136,'byte_code'}},{'type',136,'start_from',[]}}|[{'typed_record_field',{'record_field',137,{'atom',137,'get_warnings'},{'atom',137,'maybe'}},{'type',137,'union',[{'type',137,'boolean',[]}|[{'atom',137,'maybe'}]]}}|[{'typed_record_field',{'record_field',138,{'atom',138,'init_plts'},{'nil',138}},{'type',138,'list',[{'remote_type',138,[{'atom',138,'file'}|[{'atom',138,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',139,{'atom',139,'include_dirs'},{'nil',139}},{'type',139,'list',[{'remote_type',139,[{'atom',139,'file'}|[{'atom',139,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'output_plt'},{'atom',140,'none'}},{'type',140,'union',[{'atom',140,'none'}|[{'remote_type',140,[{'atom',140,'file'}|[{'atom',140,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',141,{'atom',141,'legal_warnings'},{'call',141,{'remote',141,{'atom',141,'ordsets'},{'atom',141,'new'}},[]}},{'remote_type',141,[{'atom',141,'ordsets'}|[{'atom',141,'ordset'}|[[{'type',141,'dial_warn_tag',[]}]]]]}}|[{'typed_record_field',{'record_field',142,{'atom',142,'report_mode'},{'atom',142,'normal'}},{'type',142,'rep_mode',[]}}|[{'typed_record_field',{'record_field',143,{'atom',143,'erlang_mode'},{'atom',143,'false'}},{'type',143,'boolean',[]}}|[{'typed_record_field',{'record_field',144,{'atom',144,'use_contracts'},{'atom',144,'true'}},{'type',144,'boolean',[]}}|[{'typed_record_field',{'record_field',145,{'atom',145,'output_file'},{'atom',145,'none'}},{'type',145,'union',[{'atom',145,'none'}|[{'remote_type',145,[{'atom',145,'file'}|[{'atom',145,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',146,{'atom',146,'output_format'},{'atom',146,'formatted'}},{'type',146,'format',[]}}|[{'typed_record_field',{'record_field',147,{'atom',147,'filename_opt'},{'atom',147,'basename'}},{'type',147,'fopt',[]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'callgraph_file'},{'string',148,[]}},{'remote_type',148,[{'atom',148,'file'}|[{'atom',148,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'check_plt'},{'atom',149,'true'}},{'type',149,'boolean',[]}}|[{'typed_record_field',{'record_field',150,{'atom',150,'solvers'},{'nil',150}},{'type',150,'list',[{'type',150,'solver',[]}]}}]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 152
		'type' =
		    %% Line 152
		    [{{'record','contract'},[{'typed_record_field',{'record_field',152,{'atom',152,'contracts'},{'nil',152}},{'type',152,'list',[{'type',152,'contract_pair',[]}]}}|[{'typed_record_field',{'record_field',153,{'atom',153,'args'},{'nil',153}},{'type',153,'list',[{'remote_type',153,[{'atom',153,'erl_types'}|[{'atom',153,'erl_type'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',154,{'atom',154,'forms'},{'nil',154}},{'type',154,'list',[{'type',154,'tuple',[{'var',154,'_'}|[{'var',154,'_'}]]}]}}]]],[]}],
		%% Line 37
		'spec' =
		    %% Line 37
		    [{{'build',1},[{'type',37,'fun',[{'type',37,'product',[{'type',37,'dial_options',[]}]}|[{'type',37,'union',[{'type',37,'record',[{'atom',37,'options'}]}|[{'type',37,'tuple',[{'atom',37,'error'}|[{'type',37,'string',[]}]]}]]}]]}]}],
		%% Line 117
		'spec' =
		    %% Line 117
		    [{{'bad_option',2},[{'type',117,'fun',[{'type',117,'product',[{'type',117,'string',[]}|[{'type',117,'term',[]}]]}|[{'type',117,'no_return',[]}]]}]}],
		%% Line 273
		'spec' =
		    %% Line 273
		    [{{'build_warnings',2},[{'type',273,'fun',[{'type',273,'product',[{'type',273,'list',[{'type',273,'atom',[]}]}|[{'type',273,'list',[{'type',273,'dial_warning',[]}]}]]}|[{'type',273,'list',[{'type',273,'dial_warning',[]}]}]]}]}]]
'build'/1 =
    %% Line 39
    fun (_cor0) ->
	let <DefaultWarns1> =
	    %% Line 56
	    call 'ordsets':'from_list'
		(['warn_return_no_exit'|['warn_not_called'|['warn_non_proper_list'|['warn_fun_app'|['warn_matching'|['warn_opaque'|['warn_callgraph'|['warn_failing_call'|['warn_bin_construction'|['warn_callgraph'|['warn_contract_range'|['warn_contract_types'|['warn_contract_syntax'|['warn_behaviour'|['warn_undefined_callbacks'|['warn_unknown']]]]]]]]]]]]]]]])
	in  let <InitPlt> =
		%% Line 57
		call 'dialyzer_plt':'get_default_plt'
		    ()
	    in  let <_cor4> =
		    %% Line 141
		    call 'ordsets':'new'
			()
		in  let <DefaultOpts> =
			%% Line 58
			{'options',%% Line 131
				   [],%% Line 132
				      [],%% Line 133
					 'succ_typings',%% Line 134
							'false',%% Line 135
								[],%% Line 136
								   'byte_code',%% Line 137
									       'maybe',%% Line 138
										       [],%% Line 139
											  [],%% Line 140
											     'none',_cor4,%% Line 142
													  'normal',%% Line 143
														   'false',%% Line 144
															   'true',%% Line 145
																  'none',%% Line 146
																	 'formatted',%% Line 147
																		     'basename',%% Line 148
																				[],%% Line 149
																				   'true',%% Line 150
																					  []}
		    in  let <_rec0> =
			    %% Line 60
			    [InitPlt|[]]
			in  %% Line 60
			    case DefaultOpts of
			      <{'options',_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38}> when 'true' ->
				  let <_cor8> =
				      call 'erlang':'setelement'
					  (12, DefaultOpts, DefaultWarns1)
				  in  let <_cor10> =
					  call 'erlang':'setelement'
					      (9, _cor8, _rec0)
				      in  %% Line 61
					  try
					      let <Opts1> =
						  %% Line 62
						  apply 'preprocess_opts'/1
						      (_cor0)
					      in  let <NewOpts> =
						      %% Line 63
						      apply 'build_options'/2
							  (Opts1, _cor10)
						  in  %% Line 64
						      apply 'postprocess_opts'/1
							  (NewOpts)
					  of <_cor14> ->
					      _cor14
					  catch <_cor17,_cor16,_cor15> ->
					      case <_cor17,_cor16,_cor15> of
						%% Line 66
						<'throw',{'dialyzer_options_error',Msg},_cor40> when 'true' ->
						    {'error',Msg}
						( <_cor17,_cor16,_cor15> when 'true' ->
						      primop 'raise'
							  (_cor15, _cor16)
						  -| ['compiler_generated'] )
					      end
			      ( <_cor39> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','options'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
'preprocess_opts'/1 =
    %% Line 69
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      []
	  %% Line 70
	  <[{'init_plt',File}|Opts]> when 'true' ->
	      let <_cor1> =
		  %% Line 71
		  apply 'preprocess_opts'/1
		      (Opts)
	      in  %% Line 71
		  [{'plts',[File|[]]}|_cor1]
	  %% Line 72
	  <[Opt|Opts]> when 'true' ->
	      let <_cor2> =
		  %% Line 73
		  apply 'preprocess_opts'/1
		      (Opts)
	      in  %% Line 73
		  [Opt|_cor2]
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'preprocess_opts',1}}] )
	    -| ['compiler_generated'] )
	end
'postprocess_opts'/1 =
    %% Line 75
    fun (_cor0) ->
	case _cor0 of
	  <Opts = {'options',_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22}> when 'true' ->
	      let <Opts1> =
		  %% Line 76
		  apply 'check_output_plt'/1
		      (Opts)
	      in  %% Line 77
		  apply 'adapt_get_warnings'/1
		      (Opts1)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'postprocess_opts',1}}] )
	    -| ['compiler_generated'] )
	end
'check_output_plt'/1 =
    %% Line 79
    fun (_cor0) ->
	case _cor0 of
	  <Opts = {'options',_cor8,_cor9,Mode,_cor10,_cor11,From,_cor12,_cor13,_cor14,%% Line 80
										      OutPLT,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24}> when 'true' ->
	      %% Line 81
	      case apply 'is_plt_mode'/1
		       (Mode) of
		%% Line 82
		<'true'> when 'true' ->
		    %% Line 83
		    case <> of
		      %% Line 84
		      <>
			  when call 'erlang':'=:='
				(From,
				 'byte_code') ->
			  Opts
		      %% Line 85
		      <> when 'true' ->
			  %% Line 87
			  call 'erlang':'throw'
			      ({'dialyzer_error',[66|[121|[116|[101|[32|[99|[111|[100|[101|[32|[99|[111|[109|[112|[105|[108|[101|[100|[32|[119|[105|[116|[104|[32|[100|[101|[98|[117|[103|[95|[105|[110|[102|[111|[32|[105|[115|[32|[110|[101|[101|[100|[101|[100|[32|[116|[111|[32|[98|[117|[105|[108|[100|[32|[116|[104|[101|[32|[80|[76|[84]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]})
		    end
		%% Line 89
		<'false'> when 'true' ->
		    %% Line 90
		    case <> of
		      %% Line 91
		      <>
			  when call 'erlang':'=:='
				(OutPLT,
				 'none') ->
			  Opts
		      %% Line 92
		      <> when 'true' ->
			  let <Msg> =
			      %% Line 93
			      call 'io_lib':'format'
				  ([79|[117|[116|[112|[117|[116|[32|[80|[76|[84|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[115|[112|[101|[99|[105|[102|[105|[101|[100|[32|[105|[110|[32|[97|[110|[97|[108|[121|[115|[105|[115|[32|[109|[111|[100|[101|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 94
																																							      [Mode|[]])
			  in  let <_cor4> =
				  %% Line 95
				  call 'lists':'flatten'
				      (Msg)
			      in  %% Line 95
				  call 'erlang':'throw'
				      ({'dialyzer_error',_cor4})
		    end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'check_output_plt',1}}] )
	    -| ['compiler_generated'] )
	end
'adapt_get_warnings'/1 =
    %% Line 99
    fun (_cor0) ->
	case _cor0 of
	  <Opts = {'options',_cor9,_cor10,Mode,_cor11,_cor12,_cor13,%% Line 100
								    Warns,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26}> when 'true' ->
	      %% Line 104
	      case apply 'is_plt_mode'/1
		       (Mode) of
		%% Line 105
		<'true'> when 'true' ->
		    %% Line 106
		    case <> of
		      %% Line 107
		      <>
			  when call 'erlang':'=:='
				(Warns,
				 'maybe') ->
			  call 'erlang':'setelement'
			      (8, Opts, 'false')
		      %% Line 108
		      <> when 'true' ->
			  Opts
		    end
		%% Line 110
		<'false'> when 'true' ->
		    %% Line 111
		    case <> of
		      %% Line 112
		      <>
			  when call 'erlang':'=:='
				(Warns,
				 'maybe') ->
			  call 'erlang':'setelement'
			      (8, Opts, 'true')
		      %% Line 113
		      <> when 'true' ->
			  Opts
		    end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8})
		  -| [{'function_name',{'adapt_get_warnings',1}}] )
	    -| ['compiler_generated'] )
	end
'bad_option'/2 =
    %% Line 119
    fun (_cor1,_cor0) ->
	let <Msg> =
	    %% Line 120
	    call 'io_lib':'format'
		([126|[115|[58|[32|[126|[80]]]]]], [_cor1|[_cor0|[25]]])
	in  let <_cor3> =
		%% Line 121
		call 'lists':'flatten'
		    (Msg)
	    in  %% Line 121
		call 'erlang':'throw'
		    ({'dialyzer_options_error',_cor3})
'build_options'/2 =
    %% Line 123
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{OptName,'undefined'}|Rest],Options>
	      when call 'erlang':'is_atom'
		    (OptName) ->
	      %% Line 124
	      apply 'build_options'/2
		  (Rest, Options)
	  %% Line 125
	  <[Term = {OptionName,Value}|Rest],Options> when 'true' ->
	      %% Line 126
	      case OptionName of
		%% Line 127
		<'apps'> when 'true' ->
		    %% Line 128
		    ( case Options of
			( <( {'options',_cor102,_rec4,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <AppDirs> =
				  %% Line 129
				  apply 'get_app_dirs'/1
				      (Value)
			      in  do  %% Line 130
				      apply 'assert_filenames'/2
					  (Term, AppDirs)
				      let <_rec5> =
					  %% Line 131
					  call 'erlang':'++'
					      (AppDirs, _rec4)
				      in  let <_cor9> =
					      %% Line 131
					      call 'erlang':'setelement'
						  (3, Options, _rec5)
					  in  %% Line 131
					      apply 'build_options'/2
						  (Rest, _cor9)
			  -| ['compiler_generated'] )
			( <_cor121> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','options'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 132
		<'files'> when 'true' ->
		    do  %% Line 133
			apply 'assert_filenames'/2
			    (Term, Value)
			%% Line 134
			case Options of
			  <{'options',_cor143,_cor144,_cor145,_cor146,_cor147,_cor148,_cor149,_cor150,_cor151,_cor152,_cor153,_cor154,_cor155,_cor156,_cor157,_cor158,_cor159,_cor160,_cor161,_cor162}> when 'true' ->
			      let <_cor12> =
				  call 'erlang':'setelement'
				      (2, Options, Value)
			      in  apply 'build_options'/2
				      (Rest, _cor12)
			  ( <_cor163> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','options'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		%% Line 135
		<'files_rec'> when 'true' ->
		    %% Line 136
		    ( case Options of
			( <( {'options',_cor164,_rec8,_cor165,_cor166,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181,_cor182}
			     -| ['compiler_generated'] )> when 'true' ->
			      do  %% Line 137
				  apply 'assert_filenames'/2
				      (Term, Value)
				  let <_rec9> =
				      %% Line 138
				      call 'erlang':'++'
					  (Value, _rec8)
				  in  let <_cor19> =
					  %% Line 138
					  call 'erlang':'setelement'
					      (3, Options, _rec9)
				      in  %% Line 138
					  apply 'build_options'/2
					      (Rest, _cor19)
			  -| ['compiler_generated'] )
			( <_cor183> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','options'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 139
		<'analysis_type'> when 'true' ->
		    let <_cor31> =
			%% Line 141
			case Value of
			  %% Line 142
			  <'succ_typings'> when 'true' ->
			      case Options of
				<{'options',_cor205,_cor206,_cor207,_cor208,_cor209,_cor210,_cor211,_cor212,_cor213,_cor214,_cor215,_cor216,_cor217,_cor218,_cor219,_cor220,_cor221,_cor222,_cor223,_cor224}> when 'true' ->
				    call 'erlang':'setelement'
					(4, Options, Value)
				( <_cor225> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','options'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  %% Line 143
			  <'plt_add'> when 'true' ->
			      case Options of
				<{'options',_cor226,_cor227,_cor228,_cor229,_cor230,_cor231,_cor232,_cor233,_cor234,_cor235,_cor236,_cor237,_cor238,_cor239,_cor240,_cor241,_cor242,_cor243,_cor244,_cor245}> when 'true' ->
				    call 'erlang':'setelement'
					(4, Options, Value)
				( <_cor246> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','options'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  %% Line 144
			  <'plt_build'> when 'true' ->
			      case Options of
				<{'options',_cor247,_cor248,_cor249,_cor250,_cor251,_cor252,_cor253,_cor254,_cor255,_cor256,_cor257,_cor258,_cor259,_cor260,_cor261,_cor262,_cor263,_cor264,_cor265,_cor266}> when 'true' ->
				    call 'erlang':'setelement'
					(4, Options, Value)
				( <_cor267> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','options'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  %% Line 145
			  <'plt_check'> when 'true' ->
			      case Options of
				<{'options',_cor268,_cor269,_cor270,_cor271,_cor272,_cor273,_cor274,_cor275,_cor276,_cor277,_cor278,_cor279,_cor280,_cor281,_cor282,_cor283,_cor284,_cor285,_cor286,_cor287}> when 'true' ->
				    call 'erlang':'setelement'
					(4, Options, Value)
				( <_cor288> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','options'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  %% Line 146
			  <'plt_remove'> when 'true' ->
			      case Options of
				<{'options',_cor289,_cor290,_cor291,_cor292,_cor293,_cor294,_cor295,_cor296,_cor297,_cor298,_cor299,_cor300,_cor301,_cor302,_cor303,_cor304,_cor305,_cor306,_cor307,_cor308}> when 'true' ->
				    call 'erlang':'setelement'
					(4, Options, Value)
				( <_cor309> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','options'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  %% Line 147
			  <'dataflow'> when 'true' ->
			      apply 'bad_option'/2
				  ([65|[110|[97|[108|[121|[115|[105|[115|[32|[116|[121|[112|[101|[32|[105|[115|[32|[110|[111|[32|[108|[111|[110|[103|[101|[114|[32|[115|[117|[112|[112|[111|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], Term)
			  %% Line 148
			  <'old_style'> when 'true' ->
			      apply 'bad_option'/2
				  ([65|[110|[97|[108|[121|[115|[105|[115|[32|[116|[121|[112|[101|[32|[105|[115|[32|[110|[111|[32|[108|[111|[110|[103|[101|[114|[32|[115|[117|[112|[112|[111|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], Term)
			  %% Line 149
			  <Other> when 'true' ->
			      apply 'bad_option'/2
				  ([85|[110|[107|[110|[111|[119|[110|[32|[97|[110|[97|[108|[121|[115|[105|[115|[32|[116|[121|[112|[101]]]]]]]]]]]]]]]]]]]]], Other)
			end
		    in  do  %% Line 151
			    apply 'assert_plt_op'/2
				(Options, _cor31)
			    %% Line 152
			    apply 'build_options'/2
				(Rest, _cor31)
		%% Line 153
		<'check_plt'>
		    when call 'erlang':'is_boolean'
			  (Value) ->
		    %% Line 154
		    case Options of
		      <{'options',_cor310,_cor311,_cor312,_cor313,_cor314,_cor315,_cor316,_cor317,_cor318,_cor319,_cor320,_cor321,_cor322,_cor323,_cor324,_cor325,_cor326,_cor327,_cor328,_cor329}> when 'true' ->
			  let <_cor35> =
			      call 'erlang':'setelement'
				  (20, Options, Value)
			  in  apply 'build_options'/2
				  (Rest, _cor35)
		      ( <_cor330> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','options'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 155
		<'defines'> when 'true' ->
		    do  %% Line 156
			apply 'assert_defines'/2
			    (Term, Value)
			%% Line 157
			( case Options of
			    ( <( {'options',_cor331,_cor332,_cor333,_cor334,_rec17,_cor335,_cor336,_cor337,_cor338,_cor339,_cor340,_cor341,_cor342,_cor343,_cor344,_cor345,_cor346,_cor347,_cor348,_cor349}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor39> =
				      %% Line 158
				      call 'ordsets':'from_list'
					  (Value)
				  in  let <NewVal> =
					  %% Line 158
					  call 'ordsets':'union'
					      (_cor39, _rec17)
				      in  let <_cor43> =
					      %% Line 159
					      call 'erlang':'setelement'
						  (6, Options, NewVal)
					  in  %% Line 159
					      apply 'build_options'/2
						  (Rest, _cor43)
			      -| ['compiler_generated'] )
			    ( <_cor350> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','options'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		%% Line 160
		<'from'>
		    when let <_cor44> =
			  call 'erlang':'=:='
			      (Value, 'byte_code')
		      in  let <_cor45> =
			      call 'erlang':'=:='
				  (Value, 'src_code')
			  in  call 'erlang':'or'
				  (_cor44, _cor45) ->
		    %% Line 161
		    case Options of
		      <{'options',_cor372,_cor373,_cor374,_cor375,_cor376,_cor377,_cor378,_cor379,_cor380,_cor381,_cor382,_cor383,_cor384,_cor385,_cor386,_cor387,_cor388,_cor389,_cor390,_cor391}> when 'true' ->
			  let <_cor48> =
			      call 'erlang':'setelement'
				  (7, Options, Value)
			  in  apply 'build_options'/2
				  (Rest, _cor48)
		      ( <_cor392> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','options'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 162
		<'get_warnings'> when 'true' ->
		    %% Line 163
		    case Options of
		      <{'options',_cor393,_cor394,_cor395,_cor396,_cor397,_cor398,_cor399,_cor400,_cor401,_cor402,_cor403,_cor404,_cor405,_cor406,_cor407,_cor408,_cor409,_cor410,_cor411,_cor412}> when 'true' ->
			  let <_cor51> =
			      call 'erlang':'setelement'
				  (8, Options, Value)
			  in  apply 'build_options'/2
				  (Rest, _cor51)
		      ( <_cor413> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','options'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 164
		<'plts'> when 'true' ->
		    do  %% Line 165
			apply 'assert_filenames'/2
			    (Term, Value)
			%% Line 166
			case Options of
			  <{'options',_cor414,_cor415,_cor416,_cor417,_cor418,_cor419,_cor420,_cor421,_cor422,_cor423,_cor424,_cor425,_cor426,_cor427,_cor428,_cor429,_cor430,_cor431,_cor432,_cor433}> when 'true' ->
			      let <_cor54> =
				  call 'erlang':'setelement'
				      (9, Options, Value)
			      in  apply 'build_options'/2
				      (Rest, _cor54)
			  ( <_cor434> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','options'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		%% Line 167
		<'include_dirs'> when 'true' ->
		    do  %% Line 168
			apply 'assert_filenames'/2
			    (Term, Value)
			%% Line 169
			( case Options of
			    ( <( {'options',_cor435,_cor436,_cor437,_cor438,_cor439,_cor440,_cor441,_cor442,_rec22,_cor443,_cor444,_cor445,_cor446,_cor447,_cor448,_cor449,_cor450,_cor451,_cor452,_cor453}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor58> =
				      %% Line 170
				      call 'ordsets':'from_list'
					  (Value)
				  in  let <NewVal> =
					  %% Line 170
					  call 'ordsets':'union'
					      (_cor58, _rec22)
				      in  let <_cor62> =
					      %% Line 171
					      call 'erlang':'setelement'
						  (10, Options, NewVal)
					  in  %% Line 171
					      apply 'build_options'/2
						  (Rest, _cor62)
			      -| ['compiler_generated'] )
			    ( <_cor454> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','options'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		%% Line 172
		<'use_spec'> when 'true' ->
		    %% Line 173
		    case Options of
		      <{'options',_cor476,_cor477,_cor478,_cor479,_cor480,_cor481,_cor482,_cor483,_cor484,_cor485,_cor486,_cor487,_cor488,_cor489,_cor490,_cor491,_cor492,_cor493,_cor494,_cor495}> when 'true' ->
			  let <_cor65> =
			      call 'erlang':'setelement'
				  (15, Options, Value)
			  in  apply 'build_options'/2
				  (Rest, _cor65)
		      ( <_cor496> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','options'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 174
		<'old_style'> when 'true' ->
		    %% Line 175
		    apply 'bad_option'/2
			([65|[110|[97|[108|[121|[115|[105|[115|[32|[116|[121|[112|[101|[32|[105|[115|[32|[110|[111|[32|[108|[111|[110|[103|[101|[114|[32|[115|[117|[112|[112|[111|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], 'old_style')
		%% Line 176
		<'output_file'> when 'true' ->
		    do  %% Line 177
			apply 'assert_filename'/1
			    (Value)
			%% Line 178
			case Options of
			  <{'options',_cor497,_cor498,_cor499,_cor500,_cor501,_cor502,_cor503,_cor504,_cor505,_cor506,_cor507,_cor508,_cor509,_cor510,_cor511,_cor512,_cor513,_cor514,_cor515,_cor516}> when 'true' ->
			      let <_cor68> =
				  call 'erlang':'setelement'
				      (16, Options, Value)
			      in  apply 'build_options'/2
				      (Rest, _cor68)
			  ( <_cor517> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','options'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		%% Line 179
		<'output_format'> when 'true' ->
		    do  %% Line 180
			apply 'assert_output_format'/1
			    (Value)
			%% Line 181
			case Options of
			  <{'options',_cor518,_cor519,_cor520,_cor521,_cor522,_cor523,_cor524,_cor525,_cor526,_cor527,_cor528,_cor529,_cor530,_cor531,_cor532,_cor533,_cor534,_cor535,_cor536,_cor537}> when 'true' ->
			      let <_cor71> =
				  call 'erlang':'setelement'
				      (17, Options, Value)
			      in  apply 'build_options'/2
				      (Rest, _cor71)
			  ( <_cor538> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','options'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		%% Line 182
		<'filename_opt'> when 'true' ->
		    do  %% Line 183
			apply 'assert_filename_opt'/1
			    (Value)
			%% Line 184
			case Options of
			  <{'options',_cor539,_cor540,_cor541,_cor542,_cor543,_cor544,_cor545,_cor546,_cor547,_cor548,_cor549,_cor550,_cor551,_cor552,_cor553,_cor554,_cor555,_cor556,_cor557,_cor558}> when 'true' ->
			      let <_cor74> =
				  call 'erlang':'setelement'
				      (18, Options, Value)
			      in  apply 'build_options'/2
				      (Rest, _cor74)
			  ( <_cor559> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','options'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		%% Line 185
		<'output_plt'> when 'true' ->
		    do  %% Line 186
			apply 'assert_filename'/1
			    (Value)
			%% Line 187
			case Options of
			  <{'options',_cor560,_cor561,_cor562,_cor563,_cor564,_cor565,_cor566,_cor567,_cor568,_cor569,_cor570,_cor571,_cor572,_cor573,_cor574,_cor575,_cor576,_cor577,_cor578,_cor579}> when 'true' ->
			      let <_cor77> =
				  call 'erlang':'setelement'
				      (11, Options, Value)
			      in  apply 'build_options'/2
				      (Rest, _cor77)
			  ( <_cor580> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','options'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		%% Line 188
		<'report_mode'> when 'true' ->
		    %% Line 189
		    case Options of
		      <{'options',_cor581,_cor582,_cor583,_cor584,_cor585,_cor586,_cor587,_cor588,_cor589,_cor590,_cor591,_cor592,_cor593,_cor594,_cor595,_cor596,_cor597,_cor598,_cor599,_cor600}> when 'true' ->
			  let <_cor80> =
			      call 'erlang':'setelement'
				  (13, Options, Value)
			  in  apply 'build_options'/2
				  (Rest, _cor80)
		      ( <_cor601> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','options'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 190
		<'erlang_mode'> when 'true' ->
		    %% Line 191
		    case Options of
		      <{'options',_cor602,_cor603,_cor604,_cor605,_cor606,_cor607,_cor608,_cor609,_cor610,_cor611,_cor612,_cor613,_cor614,_cor615,_cor616,_cor617,_cor618,_cor619,_cor620,_cor621}> when 'true' ->
			  let <_cor83> =
			      call 'erlang':'setelement'
				  (14, Options, 'true')
			  in  apply 'build_options'/2
				  (Rest, _cor83)
		      ( <_cor622> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','options'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 192
		<'warnings'> when 'true' ->
		    %% Line 193
		    ( case Options of
			( <( {'options',_cor623,_cor624,_cor625,_cor626,_cor627,_cor628,_cor629,_cor630,_cor631,_cor632,_rec31,_cor633,_cor634,_cor635,_cor636,_cor637,_cor638,_cor639,_cor640,_cor641}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <NewWarnings> =
				  apply 'build_warnings'/2
				      (Value, _rec31)
			      in  let <_cor89> =
				      %% Line 194
				      call 'erlang':'setelement'
					  (12, Options, NewWarnings)
				  in  %% Line 194
				      apply 'build_options'/2
					  (Rest, _cor89)
			  -| ['compiler_generated'] )
			( <_cor642> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','options'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 195
		<'callgraph_file'> when 'true' ->
		    do  %% Line 196
			apply 'assert_filename'/1
			    (Value)
			%% Line 197
			case Options of
			  <{'options',_cor664,_cor665,_cor666,_cor667,_cor668,_cor669,_cor670,_cor671,_cor672,_cor673,_cor674,_cor675,_cor676,_cor677,_cor678,_cor679,_cor680,_cor681,_cor682,_cor683}> when 'true' ->
			      let <_cor92> =
				  call 'erlang':'setelement'
				      (19, Options, Value)
			      in  apply 'build_options'/2
				      (Rest, _cor92)
			  ( <_cor684> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','options'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		%% Line 198
		<'timing'> when 'true' ->
		    %% Line 199
		    case Options of
		      <{'options',_cor685,_cor686,_cor687,_cor688,_cor689,_cor690,_cor691,_cor692,_cor693,_cor694,_cor695,_cor696,_cor697,_cor698,_cor699,_cor700,_cor701,_cor702,_cor703,_cor704}> when 'true' ->
			  let <_cor95> =
			      call 'erlang':'setelement'
				  (5, Options, Value)
			  in  apply 'build_options'/2
				  (Rest, _cor95)
		      ( <_cor705> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','options'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 200
		<'solvers'> when 'true' ->
		    do  %% Line 201
			apply 'assert_solvers'/1
			    (Value)
			%% Line 202
			case Options of
			  <{'options',_cor706,_cor707,_cor708,_cor709,_cor710,_cor711,_cor712,_cor713,_cor714,_cor715,_cor716,_cor717,_cor718,_cor719,_cor720,_cor721,_cor722,_cor723,_cor724,_cor725}> when 'true' ->
			      let <_cor98> =
				  call 'erlang':'setelement'
				      (21, Options, Value)
			      in  apply 'build_options'/2
				      (Rest, _cor98)
			  ( <_cor726> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','options'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		%% Line 203
		<_cor727> when 'true' ->
		    %% Line 204
		    apply 'bad_option'/2
			([85|[110|[107|[110|[111|[119|[110|[32|[100|[105|[97|[108|[121|[122|[101|[114|[32|[99|[111|[109|[109|[97|[110|[100|[32|[108|[105|[110|[101|[32|[111|[112|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], Term)
	      end
	  %% Line 206
	  <[],Options> when 'true' ->
	      %% Line 207
	      Options
	  ( <_cor101,_cor100> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor101,_cor100})
		  -| [{'function_name',{'build_options',2}}] )
	    -| ['compiler_generated'] )
	end
'get_app_dirs'/1 =
    %% Line 209
    fun (_cor0) ->
	case _cor0 of
	  <Apps>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor6> =
		  %% Line 210
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor3) ->
				case _cor3 of
				  <[A|_cor2]> when 'true' ->
				      let <_cor4> =
					  call 'erlang':'atom_to_list'
					      (A)
				      in  let <_cor5> =
					      apply 'lc$^0'/1
						  (_cor2)
					  in  ( [_cor4|_cor5]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor3> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor3})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Apps)
		    -| ['list_comprehension'] )
	      in  %% Line 210
		  call 'dialyzer_cl_parse':'get_lib_dir'
		      (_cor6)
	  %% Line 211
	  <Apps> when 'true' ->
	      %% Line 212
	      apply 'bad_option'/2
		  ([85|[115|[101|[32|[97|[32|[108|[105|[115|[116|[32|[111|[102|[32|[111|[116|[112|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], Apps)
	end
'assert_filenames'/2 =
    %% Line 214
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Term,[FileName|Left]>
	      when try
		    let <_cor2> =
			call 'erlang':'length'
			    (FileName)
		    in  call 'erlang':'>='
			    (_cor2, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor5> =
		  %% Line 215
		  ( case call 'filelib':'is_file'
			     (FileName) of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    'true'
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    call 'filelib':'is_dir'
				(FileName)
			-| ['compiler_generated'] )
		      ( <_cor3> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_cor3}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      in  do  %% Line 215
		      case _cor5 of
			%% Line 216
			<'true'> when 'true' ->
			    'ok'
			%% Line 217
			<'false'> when 'true' ->
			    apply 'bad_option'/2
				([78|[111|[32|[115|[117|[99|[104|[32|[102|[105|[108|[101|[44|[32|[100|[105|[114|[101|[99|[116|[111|[114|[121|[32|[111|[114|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], FileName)
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor6})
			  -| ['compiler_generated'] )
		      end
		      %% Line 219
		      apply 'assert_filenames'/2
			  (Term, Left)
	  %% Line 220
	  <_X_Term,[]> when 'true' ->
	      %% Line 221
	      'ok'
	  %% Line 222
	  <Term,[_cor9|_cor10]> when 'true' ->
	      %% Line 223
	      apply 'bad_option'/2
		  ([77|[97|[108|[102|[111|[114|[109|[101|[100|[32|[111|[114|[32|[110|[111|[110|[45|[101|[120|[105|[115|[116|[105|[110|[103|[32|[102|[105|[108|[101|[110|[97|[109|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], Term)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'assert_filenames',2}}] )
	    -| ['compiler_generated'] )
	end
'assert_filename'/1 =
    %% Line 225
    fun (_cor0) ->
	case _cor0 of
	  <FileName>
	      when try
		    let <_cor1> =
			call 'erlang':'length'
			    (_cor0)
		    in  call 'erlang':'>='
			    (_cor1, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 226
	      'ok'
	  %% Line 227
	  <FileName> when 'true' ->
	      %% Line 228
	      apply 'bad_option'/2
		  ([77|[97|[108|[102|[111|[114|[109|[101|[100|[32|[111|[114|[32|[110|[111|[110|[45|[101|[120|[105|[115|[116|[105|[110|[103|[32|[102|[105|[108|[101|[110|[97|[109|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], FileName)
	end
'assert_defines'/2 =
    %% Line 230
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Term,[{Macro,_X_Value}|Defs]>
	      when call 'erlang':'is_atom'
		    (Macro) ->
	      %% Line 231
	      apply 'assert_defines'/2
		  (Term, Defs)
	  %% Line 232
	  <_X_Term,[]> when 'true' ->
	      %% Line 233
	      'ok'
	  %% Line 234
	  <Term,[_cor4|_cor5]> when 'true' ->
	      %% Line 235
	      apply 'bad_option'/2
		  ([77|[97|[108|[102|[111|[114|[109|[101|[100|[32|[100|[101|[102|[105|[110|[101]]]]]]]]]]]]]]]], Term)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'assert_defines',2}}] )
	    -| ['compiler_generated'] )
	end
'assert_output_format'/1 =
    %% Line 237
    fun (_cor0) ->
	case _cor0 of
	  <'raw'> when 'true' ->
	      %% Line 238
	      'ok'
	  %% Line 239
	  <'formatted'> when 'true' ->
	      %% Line 240
	      'ok'
	  %% Line 241
	  <Term> when 'true' ->
	      %% Line 242
	      apply 'bad_option'/2
		  ([73|[108|[108|[101|[103|[97|[108|[32|[118|[97|[108|[117|[101|[32|[102|[111|[114|[32|[111|[117|[116|[112|[117|[116|[95|[102|[111|[114|[109|[97|[116]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], Term)
	end
'assert_filename_opt'/1 =
    %% Line 244
    fun (_cor0) ->
	case _cor0 of
	  <'basename'> when 'true' ->
	      %% Line 245
	      'ok'
	  %% Line 246
	  <'fullpath'> when 'true' ->
	      %% Line 247
	      'ok'
	  %% Line 248
	  <Term> when 'true' ->
	      %% Line 249
	      apply 'bad_option'/2
		  ([73|[108|[108|[101|[103|[97|[108|[32|[118|[97|[108|[117|[101|[32|[102|[111|[114|[32|[102|[105|[108|[101|[110|[97|[109|[101|[95|[111|[112|[116]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], Term)
	end
'assert_plt_op'/2 =
    %% Line 251
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'options',_cor8,_cor9,OldVal,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26},%% Line 252
																				 {'options',_cor27,_cor28,NewVal,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45}> when 'true' ->
	      let <_cor4> =
		  %% Line 253
		  ( case apply 'is_plt_mode'/1
			     (OldVal) of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    apply 'is_plt_mode'/1
				(NewVal)
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    'false'
			-| ['compiler_generated'] )
		      ( <_cor2> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_cor2}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      in  %% Line 253
		  case _cor4 of
		    %% Line 254
		    <'true'> when 'true' ->
			apply 'bad_option'/2
			    ([79|[112|[116|[105|[111|[110|[115|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[99|[111|[109|[98|[105|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]], [OldVal|[NewVal|[]]])
		    %% Line 255
		    <'false'> when 'true' ->
			'ok'
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'assert_plt_op',2}}] )
	    -| ['compiler_generated'] )
	end
'is_plt_mode'/1 =
    %% Line 258
    fun (_cor0) ->
	case _cor0 of
	  <'plt_add'> when 'true' ->
	      'true'
	  %% Line 259
	  <'plt_build'> when 'true' ->
	      'true'
	  %% Line 260
	  <'plt_remove'> when 'true' ->
	      'true'
	  %% Line 261
	  <'plt_check'> when 'true' ->
	      'true'
	  %% Line 262
	  <'succ_typings'> when 'true' ->
	      'false'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'is_plt_mode',1}}] )
	    -| ['compiler_generated'] )
	end
'assert_solvers'/1 =
    %% Line 264
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 265
	      'ok'
	  %% Line 266
	  <['v1'|Terms]> when 'true' ->
	      %% Line 267
	      apply 'assert_solvers'/1
		  (Terms)
	  %% Line 268
	  <['v2'|Terms]> when 'true' ->
	      %% Line 269
	      apply 'assert_solvers'/1
		  (Terms)
	  %% Line 270
	  <[Term|_cor2]> when 'true' ->
	      %% Line 271
	      apply 'bad_option'/2
		  ([73|[108|[108|[101|[103|[97|[108|[32|[118|[97|[108|[117|[101|[32|[102|[111|[114|[32|[115|[111|[108|[118|[101|[114]]]]]]]]]]]]]]]]]]]]]]]], Term)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'assert_solvers',1}}] )
	    -| ['compiler_generated'] )
	end
'build_warnings'/2 =
    %% Line 275
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Opt|Opts],Warnings> when 'true' ->
	      let <_cor5> =
		  %% Line 277
		  case Opt of
		    %% Line 278
		    <'no_return'> when 'true' ->
			%% Line 279
			call 'ordsets':'del_element'
			    ('warn_return_no_exit', Warnings)
		    %% Line 280
		    <'no_unused'> when 'true' ->
			%% Line 281
			call 'ordsets':'del_element'
			    ('warn_not_called', Warnings)
		    %% Line 282
		    <'no_improper_lists'> when 'true' ->
			%% Line 283
			call 'ordsets':'del_element'
			    ('warn_non_proper_list', Warnings)
		    %% Line 284
		    <'no_fun_app'> when 'true' ->
			%% Line 285
			call 'ordsets':'del_element'
			    ('warn_fun_app', Warnings)
		    %% Line 286
		    <'no_match'> when 'true' ->
			%% Line 287
			call 'ordsets':'del_element'
			    ('warn_matching', Warnings)
		    %% Line 288
		    <'no_opaque'> when 'true' ->
			%% Line 289
			call 'ordsets':'del_element'
			    ('warn_opaque', Warnings)
		    %% Line 290
		    <'no_fail_call'> when 'true' ->
			%% Line 291
			call 'ordsets':'del_element'
			    ('warn_failing_call', Warnings)
		    %% Line 292
		    <'no_contracts'> when 'true' ->
			let <Warnings1> =
			    %% Line 293
			    call 'ordsets':'del_element'
				('warn_contract_syntax', Warnings)
			in  %% Line 294
			    call 'ordsets':'del_element'
				('warn_contract_types', Warnings1)
		    %% Line 295
		    <'no_behaviours'> when 'true' ->
			%% Line 296
			call 'ordsets':'del_element'
			    ('warn_behaviour', Warnings)
		    %% Line 297
		    <'no_undefined_callbacks'> when 'true' ->
			%% Line 298
			call 'ordsets':'del_element'
			    ('warn_undefined_callbacks', Warnings)
		    %% Line 299
		    <'unmatched_returns'> when 'true' ->
			%% Line 300
			call 'ordsets':'add_element'
			    ('warn_umatched_return', Warnings)
		    %% Line 301
		    <'error_handling'> when 'true' ->
			%% Line 302
			call 'ordsets':'add_element'
			    ('warn_return_only_exit', Warnings)
		    %% Line 303
		    <'race_conditions'> when 'true' ->
			%% Line 304
			call 'ordsets':'add_element'
			    ('warn_race_condition', Warnings)
		    %% Line 305
		    <'specdiffs'> when 'true' ->
			let <S> =
			    %% Line 306
			    call 'ordsets':'from_list'
				(['warn_contract_subtype'|['warn_contract_supertype'|['warn_contract_not_equal']]])
			in  %% Line 309
			    call 'ordsets':'union'
				(S, Warnings)
		    %% Line 310
		    <'overspecs'> when 'true' ->
			%% Line 311
			call 'ordsets':'add_element'
			    ('warn_contract_subtype', Warnings)
		    %% Line 312
		    <'underspecs'> when 'true' ->
			%% Line 313
			call 'ordsets':'add_element'
			    ('warn_contract_supertype', Warnings)
		    %% Line 314
		    <'no_unknown'> when 'true' ->
			%% Line 315
			call 'ordsets':'del_element'
			    ('warn_unknown', Warnings)
		    %% Line 316
		    <OtherAtom> when 'true' ->
			%% Line 317
			apply 'bad_option'/2
			    ([85|[110|[107|[110|[111|[119|[110|[32|[100|[105|[97|[108|[121|[122|[101|[114|[32|[119|[97|[114|[110|[105|[110|[103|[32|[111|[112|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], OtherAtom)
		  end
	      in  %% Line 319
		  apply 'build_warnings'/2
		      (Opts, _cor5)
	  %% Line 320
	  <[],Warnings> when 'true' ->
	      %% Line 321
	      Warnings
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'build_warnings',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('dialyzer_options')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('dialyzer_options', _cor0)
end