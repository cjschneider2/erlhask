module 'dialyzer_behaviours' ['check_callbacks'/5,
			      'module_info'/0,
			      'module_info'/1]
    attributes [%% Line 33
		'export_type' =
		    %% Line 33
		    [{'behaviour',0}],
		%% Line 33
		'type' =
		    %% Line 33
		    [{'dial_ret',{'type',33,'union',[{'integer',33,0}|[{'integer',34,1}|[{'integer',35,2}]]]},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'dial_warn_tag',{'type',68,'union',[{'atom',68,'warn_return_no_exit'}|[{'atom',68,'warn_return_only_exit'}|[{'atom',69,'warn_not_called'}|[{'atom',69,'warn_non_proper_list'}|[{'atom',70,'warn_matching'}|[{'atom',70,'warn_opaque'}|[{'atom',70,'warn_fun_app'}|[{'atom',71,'warn_failing_call'}|[{'atom',71,'warn_bin_construction'}|[{'atom',72,'warn_contract_types'}|[{'atom',72,'warn_contract_syntax'}|[{'atom',73,'warn_contract_not_equal'}|[{'atom',73,'warn_contract_subtype'}|[{'atom',74,'warn_contract_supertype'}|[{'atom',74,'warn_callgraph'}|[{'atom',75,'warn_umatched_return'}|[{'atom',75,'warn_race_condition'}|[{'atom',76,'warn_behaviour'}|[{'atom',76,'warn_contract_range'}|[{'atom',77,'warn_undefined_callbacks'}|[{'atom',77,'warn_unknown'}]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'file_line',{'type',83,'tuple',[{'remote_type',83,[{'atom',83,'file'}|[{'atom',83,'filename'}|[[]]]]}|[{'type',83,'non_neg_integer',[]}]]},[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{'dial_warning',{'type',84,'tuple',[{'type',84,'dial_warn_tag',[]}|[{'type',84,'file_line',[]}|[{'type',84,'tuple',[{'type',84,'atom',[]}|[{'type',84,'list',[{'type',84,'term',[]}]}]]}]]]},[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{'dial_error',{'type',89,'any',[]},[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{'anal_type',{'type',96,'union',[{'atom',96,'succ_typings'}|[{'atom',96,'plt_build'}]]},[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{'anal_type1',{'type',97,'union',[{'type',97,'anal_type',[]}|[{'atom',97,'plt_add'}|[{'atom',97,'plt_check'}|[{'atom',97,'plt_remove'}]]]]},[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{'contr_constr',{'type',98,'tuple',[{'atom',98,'subtype'}|[{'remote_type',98,[{'atom',98,'erl_types'}|[{'atom',98,'erl_type'}|[[]]]]}|[{'remote_type',98,[{'atom',98,'erl_types'}|[{'atom',98,'erl_type'}|[[]]]]}]]]},[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{'contract_pair',{'type',99,'tuple',[{'remote_type',99,[{'atom',99,'erl_types'}|[{'atom',99,'erl_type'}|[[]]]]}|[{'type',99,'list',[{'type',99,'contr_constr',[]}]}]]},[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{'dial_define',{'type',100,'tuple',[{'type',100,'atom',[]}|[{'type',100,'term',[]}]]},[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{'dial_option',{'type',101,'tuple',[{'type',101,'atom',[]}|[{'type',101,'term',[]}]]},[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{'dial_options',{'type',102,'list',[{'type',102,'dial_option',[]}]},[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{'fopt',{'type',103,'union',[{'atom',103,'basename'}|[{'atom',103,'fullpath'}]]},[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{'format',{'type',104,'union',[{'atom',104,'formatted'}|[{'atom',104,'raw'}]]},[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{'label',{'type',105,'non_neg_integer',[]},[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{'rep_mode',{'type',106,'union',[{'atom',106,'quiet'}|[{'atom',106,'normal'}|[{'atom',106,'verbose'}]]]},[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{'start_from',{'type',107,'union',[{'atom',107,'byte_code'}|[{'atom',107,'src_code'}]]},[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{'mfa_or_funlbl',{'type',108,'union',[{'type',108,'label',[]}|[{'type',108,'mfa',[]}]]},[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{'solver',{'type',109,'union',[{'atom',109,'v1'}|[{'atom',109,'v2'}]]},[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{{'record','analysis'},[{'typed_record_field',{'record_field',115,{'atom',115,'analysis_pid'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'pid',[]}]]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'type'},{'atom',116,'succ_typings'}},{'type',116,'anal_type',[]}}|[{'typed_record_field',{'record_field',117,{'atom',117,'defines'},{'nil',117}},{'type',117,'list',[{'type',117,'dial_define',[]}]}}|[{'typed_record_field',{'record_field',118,{'atom',118,'doc_plt'}},{'type',118,'union',[{'atom',118,'undefined'}|[{'remote_type',118,[{'atom',118,'dialyzer_plt'}|[{'atom',118,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',119,{'atom',119,'files'},{'nil',119}},{'type',119,'list',[{'remote_type',119,[{'atom',119,'file'}|[{'atom',119,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'include_dirs'},{'nil',120}},{'type',120,'list',[{'remote_type',120,[{'atom',120,'file'}|[{'atom',120,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',121,{'atom',121,'start_from'},{'atom',121,'byte_code'}},{'type',121,'start_from',[]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'plt'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'remote_type',122,[{'atom',122,'dialyzer_plt'}|[{'atom',122,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'use_contracts'},{'atom',123,'true'}},{'type',123,'boolean',[]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'race_detection'},{'atom',124,'false'}},{'type',124,'boolean',[]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'behaviours_chk'},{'atom',125,'false'}},{'type',125,'boolean',[]}}|[{'typed_record_field',{'record_field',126,{'atom',126,'timing'},{'atom',126,'false'}},{'type',126,'union',[{'type',126,'boolean',[]}|[{'atom',126,'debug'}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'timing_server'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'remote_type',127,[{'atom',127,'dialyzer_timing'}|[{'atom',127,'timing_server'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'callgraph_file'},{'string',128,[]}},{'remote_type',128,[{'atom',128,'file'}|[{'atom',128,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'solvers'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'list',[{'type',129,'solver',[]}]}]]}}]]]]]]]]]]]]]]],[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{{'record','options'},[{'typed_record_field',{'record_field',131,{'atom',131,'files'},{'nil',131}},{'type',131,'list',[{'remote_type',131,[{'atom',131,'file'}|[{'atom',131,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'files_rec'},{'nil',132}},{'type',132,'list',[{'remote_type',132,[{'atom',132,'file'}|[{'atom',132,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',133,{'atom',133,'analysis_type'},{'atom',133,'succ_typings'}},{'type',133,'anal_type1',[]}}|[{'typed_record_field',{'record_field',134,{'atom',134,'timing'},{'atom',134,'false'}},{'type',134,'union',[{'type',134,'boolean',[]}|[{'atom',134,'debug'}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'defines'},{'nil',135}},{'type',135,'list',[{'type',135,'dial_define',[]}]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'from'},{'atom',136,'byte_code'}},{'type',136,'start_from',[]}}|[{'typed_record_field',{'record_field',137,{'atom',137,'get_warnings'},{'atom',137,'maybe'}},{'type',137,'union',[{'type',137,'boolean',[]}|[{'atom',137,'maybe'}]]}}|[{'typed_record_field',{'record_field',138,{'atom',138,'init_plts'},{'nil',138}},{'type',138,'list',[{'remote_type',138,[{'atom',138,'file'}|[{'atom',138,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',139,{'atom',139,'include_dirs'},{'nil',139}},{'type',139,'list',[{'remote_type',139,[{'atom',139,'file'}|[{'atom',139,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'output_plt'},{'atom',140,'none'}},{'type',140,'union',[{'atom',140,'none'}|[{'remote_type',140,[{'atom',140,'file'}|[{'atom',140,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',141,{'atom',141,'legal_warnings'},{'call',141,{'remote',141,{'atom',141,'ordsets'},{'atom',141,'new'}},[]}},{'remote_type',141,[{'atom',141,'ordsets'}|[{'atom',141,'ordset'}|[[{'type',141,'dial_warn_tag',[]}]]]]}}|[{'typed_record_field',{'record_field',142,{'atom',142,'report_mode'},{'atom',142,'normal'}},{'type',142,'rep_mode',[]}}|[{'typed_record_field',{'record_field',143,{'atom',143,'erlang_mode'},{'atom',143,'false'}},{'type',143,'boolean',[]}}|[{'typed_record_field',{'record_field',144,{'atom',144,'use_contracts'},{'atom',144,'true'}},{'type',144,'boolean',[]}}|[{'typed_record_field',{'record_field',145,{'atom',145,'output_file'},{'atom',145,'none'}},{'type',145,'union',[{'atom',145,'none'}|[{'remote_type',145,[{'atom',145,'file'}|[{'atom',145,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',146,{'atom',146,'output_format'},{'atom',146,'formatted'}},{'type',146,'format',[]}}|[{'typed_record_field',{'record_field',147,{'atom',147,'filename_opt'},{'atom',147,'basename'}},{'type',147,'fopt',[]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'callgraph_file'},{'string',148,[]}},{'remote_type',148,[{'atom',148,'file'}|[{'atom',148,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'check_plt'},{'atom',149,'true'}},{'type',149,'boolean',[]}}|[{'typed_record_field',{'record_field',150,{'atom',150,'solvers'},{'nil',150}},{'type',150,'list',[{'type',150,'solver',[]}]}}]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 152
		'type' =
		    %% Line 152
		    [{{'record','contract'},[{'typed_record_field',{'record_field',152,{'atom',152,'contracts'},{'nil',152}},{'type',152,'list',[{'type',152,'contract_pair',[]}]}}|[{'typed_record_field',{'record_field',153,{'atom',153,'args'},{'nil',153}},{'type',153,'list',[{'remote_type',153,[{'atom',153,'erl_types'}|[{'atom',153,'erl_type'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',154,{'atom',154,'forms'},{'nil',154}},{'type',154,'list',[{'type',154,'tuple',[{'var',154,'_'}|[{'var',154,'_'}]]}]}}]]],[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{'behaviour',{'type',41,'atom',[]},[]}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{'rectab',{'remote_type',43,[{'atom',43,'erl_types'}|[{'atom',43,'type_table'}|[[]]]]},[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{{'record','state'},[{'typed_record_field',{'record_field',45,{'atom',45,'plt'}},{'type',45,'union',[{'atom',45,'undefined'}|[{'remote_type',45,[{'atom',45,'dialyzer_plt'}|[{'atom',45,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'codeserver'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'remote_type',46,[{'atom',46,'dialyzer_codeserver'}|[{'atom',46,'codeserver'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',47,{'atom',47,'filename'}},{'type',47,'union',[{'atom',47,'undefined'}|[{'remote_type',47,[{'atom',47,'file'}|[{'atom',47,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',48,{'atom',48,'behlines'}},{'type',48,'union',[{'atom',48,'undefined'}|[{'type',48,'list',[{'type',48,'tuple',[{'type',48,'behaviour',[]}|[{'type',48,'non_neg_integer',[]}]]}]}]]}}|[{'typed_record_field',{'record_field',49,{'atom',49,'records'}},{'type',49,'union',[{'atom',49,'undefined'}|[{'type',49,'rectab',[]}]]}}]]]]],[]}],
		%% Line 53
		'spec' =
		    %% Line 53
		    [{{'check_callbacks',5},[{'type',53,'fun',[{'type',53,'product',[{'type',53,'module',[]}|[{'type',53,'list',[{'type',53,'tuple',[{'remote_type',53,[{'atom',53,'cerl'}|[{'atom',53,'cerl'}|[[]]]]}|[{'remote_type',53,[{'atom',53,'cerl'}|[{'atom',53,'cerl'}|[[]]]]}]]}]}|[{'type',53,'rectab',[]}|[{'remote_type',54,[{'atom',54,'dialyzer_plt'}|[{'atom',54,'plt'}|[[]]]]}|[{'remote_type',55,[{'atom',55,'dialyzer_codeserver'}|[{'atom',55,'codeserver'}|[[]]]]}]]]]]}|[{'type',55,'list',[{'type',55,'dial_warning',[]}]}]]}]}]]
'check_callbacks'/5 =
    %% Line 57
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 58
	case apply 'get_behaviours'/1
		 (_cor3) of
	  <{Behaviours,BehLines}> when 'true' ->
	      %% Line 59
	      case Behaviours of
		%% Line 60
		<[]> when 'true' ->
		    []
		%% Line 61
		<_cor23> when 'true' ->
		    let <MFA> = {_cor4,%% Line 62
			       'module_info',%% Line 62
					     0}
		    in  %% Line 63
			case call 'dialyzer_codeserver':'lookup_mfa_code'
				 (MFA, _cor0) of
			  <{_X_Var,Code}> when 'true' ->
			      let <_cor8> =
				  %% Line 64
				  call 'cerl':'get_ann'
				      (Code)
			      in  let <File> =
				      %% Line 64
				      apply 'get_file'/1
					  (_cor8)
				  in  let <State> =
					  %% Line 65
					  {'state',_cor1,_cor0,File,BehLines,_cor2}
				      in  let <Warnings> =
					      %% Line 67
					      apply 'get_warnings'/3
						  (_cor4, Behaviours, State)
					  in  %% Line 68
					      ( letrec
						    'lc$^0'/1 =
							fun (_cor14) ->
							    case _cor14 of
							      <[W|_cor13]> when 'true' ->
								  let <_cor15> =
								      apply 'add_tag_file_line'/3
									  (_cor4, W, State)
								  in  let <_cor16> =
									  apply 'lc$^0'/1
									      (_cor13)
								      in  ( [_cor15|_cor16]
									    -| ['compiler_generated'] )
							      <[]> when 'true' ->
								  []
							      ( <_cor14> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_cor14})
								      -| [{'function_name',{'lc$^0',1}}] )
								-| ['compiler_generated'] )
							    end
						in  apply 'lc$^0'/1
							(Warnings)
						-| ['list_comprehension'] )
			  ( <_cor7> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor7})
			    -| ['compiler_generated'] )
			end
	      end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'get_behaviours'/1 =
    %% Line 73
    fun (_cor0) ->
	let <_cor16> =
	    %% Line 75
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor8) ->
			  case _cor8 of
			    <[%% Line 76
			      {L1,L2}|_cor2]> when 'true' ->
				%% Line 76
				( case call 'cerl':'is_literal'
					   (L1) of
				    <'true'> when 'true' ->
					%% Line 77
					( case call 'cerl':'is_literal'
						   (L2) of
					    <'true'> when 'true' ->
						let <_cor4> =
						    call 'cerl':'concrete'
							(L1)
						in  let <_cor7> =
							( case <> of
							    ( <>
								  when call 'erlang':'=:='
									(_cor4,
									 'behaviour') ->
								  'true'
							      -| ['compiler_generated'] )
							    ( <> when 'true' ->
								  let <_cor5> =
								      %% Line 78
								      call 'cerl':'concrete'
									  (L1)
								  in  %% Line 78
								      call 'erlang':'=:='
									  (_cor5, 'behavior')
							      -| ['compiler_generated'] )
							  end
							  -| ['compiler_generated'] )
						    in  ( case _cor7 of
							    <'true'> when 'true' ->
								let <_cor11> =
								    call 'cerl':'concrete'
									(L2)
								in  let <_cor9> =
									call 'cerl':'get_ann'
									    (L2)
								    in  let <_cor10> =
									    call 'erlang':'hd'
										(_cor9)
									in  let <_cor12> =
										apply 'lc$^0'/1
										    (_cor2)
									    in  ( [{_cor11,_cor10}|_cor12]
										  -| ['compiler_generated'] )
							    ( <'false'> when 'true' ->
								  apply 'lc$^0'/1
								      (_cor2)
							      -| ['compiler_generated'] )
							    ( <_cor13> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_cor13})
							      -| ['compiler_generated'] )
							  end
							  -| ['list_comprehension'] )
					    ( <'false'> when 'true' ->
						  apply 'lc$^0'/1
						      (_cor2)
					      -| ['compiler_generated'] )
					    ( <_cor14> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor14})
					      -| ['compiler_generated'] )
					  end
					  -| ['list_comprehension'] )
				    ( <'false'> when 'true' ->
					  apply 'lc$^0'/1
					      (_cor2)
				      -| ['compiler_generated'] )
				    ( <_cor15> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor15})
				      -| ['compiler_generated'] )
				  end
				  -| ['list_comprehension'] )
			    ( <[_cor1|_cor2]> when 'true' ->
				  %% Line 76
				  apply 'lc$^0'/1
				      (_cor2)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor8> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor8})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  let <_cor22> =
		%% Line 79
		( letrec
		      'lc$^1'/1 =
			  fun (_cor20) ->
			      case _cor20 of
				<[{Behs,_cor34}|_cor19]> when 'true' ->
				    let <_cor21> =
					apply 'lc$^1'/1
					    (_cor19)
				    in  ( [Behs|_cor21]
					  -| ['compiler_generated'] )
				( <[_cor18|_cor19]> when 'true' ->
				      apply 'lc$^1'/1
					  (_cor19)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor20> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor20})
					-| [{'function_name',{'lc$^1',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^1'/1
			  (_cor16)
		  -| ['list_comprehension'] )
	    in  let <Behaviours> =
		    %% Line 79
		    call 'lists':'append'
			(_cor22)
		in  let <_cor31> =
			%% Line 80
			( letrec
			      'lc$^2'/1 =
				  fun (_cor28) ->
				      case _cor28 of
					<[{L1,L}|_cor25]> when 'true' ->
					    ( letrec
						  'lc$^3'/1 =
						      fun (_cor29) ->
							  case _cor29 of
							    <[B|_cor27]> when 'true' ->
								let <_cor30> =
								    apply 'lc$^3'/1
									(_cor27)
								in  ( [{B,L}|_cor30]
								      -| ['compiler_generated'] )
							    <[]> when 'true' ->
								apply 'lc$^2'/1
								    (_cor25)
							    ( <_cor29> when 'true' ->
								  ( primop 'match_fail'
									({'function_clause',_cor29})
								    -| [{'function_name',{'lc$^3',1}}] )
							      -| ['compiler_generated'] )
							  end
					      in  apply 'lc$^3'/1
						      (L1)
					      -| ['list_comprehension'] )
					( <[_cor24|_cor25]> when 'true' ->
					      apply 'lc$^2'/1
						  (_cor25)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor28> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor28})
						-| [{'function_name',{'lc$^2',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^2'/1
				  (_cor16)
			  -| ['list_comprehension'] )
		    in  %% Line 81
			{Behaviours,_cor31}
'get_warnings'/3 =
    %% Line 83
    fun (_cor2,_cor1,_cor0) ->
	%% Line 84
	apply 'get_warnings'/4
	    (_cor2, _cor1, _cor0, [])
'get_warnings'/4 =
    %% Line 86
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_cor9,[],_cor10,Acc> when 'true' ->
	      %% Line 87
	      Acc
	  %% Line 88
	  <Module,[Behaviour|Rest],State,Acc> when 'true' ->
	      let <NewAcc> =
		  %% Line 89
		  apply 'check_behaviour'/4
		      (Module, Behaviour, State, Acc)
	      in  %% Line 90
		  apply 'get_warnings'/4
		      (Module, Rest, State, NewAcc)
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'get_warnings',4}}] )
	    -| ['compiler_generated'] )
	end
'check_behaviour'/4 =
    %% Line 92
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Module,Behaviour,State = {'state',Plt,_cor9,_cor10,_cor11,_cor12},Acc> when 'true' ->
	      %% Line 93
	      case call 'dialyzer_plt':'lookup_callbacks'
		       (Plt, Behaviour) of
		%% Line 94
		<'none'> when 'true' ->
		    [{'callback_info_missing',[Behaviour|[]]}|Acc]
		%% Line 95
		<{'value',Callbacks}> when 'true' ->
		    %% Line 96
		    apply 'check_all_callbacks'/5
			(Module, Behaviour, Callbacks, State, Acc)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'check_behaviour',4}}] )
	    -| ['compiler_generated'] )
	end
'check_all_callbacks'/5 =
    %% Line 99
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Module,_X_Behaviour,[],_X_State,Acc> when 'true' ->
	      %% Line 100
	      Acc
	  %% Line 101
	  <Module,Behaviour,[Cb|Rest],State = %% Line 102
					      {'state',Plt,Codeserver,_cor52,_cor53,%% Line 103
										    Records},%% Line 103
											     Acc> when 'true' ->
	      %% Line 105
	      case Cb of
		<{{_cor54,Function,Arity},{{_X_BehFile,_X_BehLine},Callback}}>
		    when call 'erlang':'=:='
			  (_cor54,
			   Behaviour) ->
		    let <CbMFA> = {%% Line 106
			 Module,%% Line 106
				Function,%% Line 106
					 Arity}
		    in  let <CbReturnType> =
			    %% Line 107
			    call 'dialyzer_contracts':'get_contract_return'
				(Callback)
			in  let <CbArgTypes> =
				%% Line 108
				call 'dialyzer_contracts':'get_contract_args'
				    (Callback)
			    in  let <_cor22> =
				    %% Line 111
				    case call 'dialyzer_plt':'lookup'
					     (Plt, CbMFA) of
				      %% Line 112
				      <'none'> when 'true' ->
					  [{'callback_missing',[Behaviour|[Function|[Arity|[]]]]}|Acc]
				      %% Line 113
				      <{'value',RetArgTypes}> when 'true' ->
					  %% Line 115
					  case RetArgTypes of
					    <{ReturnType,ArgTypes}> when 'true' ->
						let <_cor17> =
						    %% Line 117
						    case call 'erl_types':'t_is_subtype'
							     (ReturnType, CbReturnType) of
						      %% Line 118
						      <'true'> when 'true' ->
							  Acc
						      %% Line 119
						      <'false'> when 'true' ->
							  let <_cor12> =
							      %% Line 121
							      call 'erl_types':'t_inf'
								  (ReturnType, CbReturnType)
							  in  %% Line 120
							      case call 'erl_types':'t_is_none'
								       (_cor12) of
								%% Line 122
								<'false'> when 'true' ->
								    Acc
								%% Line 123
								<'true'> when 'true' ->
								    let <_cor13> =
									%% Line 126
									call 'erl_types':'t_to_string'
									    (ReturnType, Records)
								    in  let <_cor14> =
									    %% Line 127
									    call 'erl_types':'t_to_string'
										(CbReturnType, Records)
									in  %% Line 124
									    [{'callback_type_mismatch',%% Line 125
												       [Behaviour|[Function|[Arity|%% Line 126
																   [_cor13|%% Line 127
																	   [_cor14|[]]]]]]}|Acc]
								( <_cor15> when 'true' ->
								      primop 'match_fail'
									  ({'case_clause',_cor15})
								  -| ['compiler_generated'] )
							      end
						      ( <_cor16> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_cor16})
							-| ['compiler_generated'] )
						    end
						in  let <_cor19> =
							%% Line 130
							call 'erl_types':'t_inf_lists'
							    (ArgTypes, CbArgTypes)
						    in  %% Line 130
							case call 'erl_types':'any_none'
								 (_cor19) of
							  %% Line 131
							  <'false'> when 'true' ->
							      _cor17
							  %% Line 132
							  <'true'> when 'true' ->
							      %% Line 133
							      apply 'find_mismatching_args'/9
								  ('type', ArgTypes, CbArgTypes, Behaviour, %% Line 134
													    Function, %% Line 134
														      Arity, %% Line 134
															     Records, %% Line 134
																      1, _cor17)
							  ( <_cor20> when 'true' ->
								primop 'match_fail'
								    ({'case_clause',_cor20})
							    -| ['compiler_generated'] )
							end
					    ( <_cor11> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor11})
					      -| ['compiler_generated'] )
					  end
				      ( <_cor21> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor21})
					-| ['compiler_generated'] )
				    end
				in  let <_cor44> =
					%% Line 138
					case call 'dialyzer_codeserver':'lookup_mfa_contract'
						 (CbMFA, Codeserver) of
					  %% Line 139
					  <'error'> when 'true' ->
					      _cor22
					  %% Line 140
					  <{'ok',{{File,Line},Contract}}> when 'true' ->
					      let <SpecReturnType0> =
						  %% Line 142
						  call 'dialyzer_contracts':'get_contract_return'
						      (Contract)
					      in  let <SpecArgTypes0> =
						      %% Line 143
						      call 'dialyzer_contracts':'get_contract_args'
							  (Contract)
						  in  let <SpecReturnType> =
							  %% Line 144
							  call 'erl_types':'subst_all_vars_to_any'
							      (SpecReturnType0)
						      in  let <_cor33> =
							      %% Line 146
							      ( letrec
								    'lc$^0'/1 =
									fun (_cor30) ->
									    case _cor30 of
									      <[ArgT0|_cor29]> when 'true' ->
										  let <_cor31> =
										      call 'erl_types':'subst_all_vars_to_any'
											  (ArgT0)
										  in  let <_cor32> =
											  apply 'lc$^0'/1
											      (_cor29)
										      in  ( [_cor31|_cor32]
											    -| ['compiler_generated'] )
									      <[]> when 'true' ->
										  []
									      ( <_cor30> when 'true' ->
										    ( primop 'match_fail'
											  ({'function_clause',_cor30})
										      -| [{'function_name',{'lc$^0',1}}] )
										-| ['compiler_generated'] )
									    end
								in  apply 'lc$^0'/1
									(SpecArgTypes0)
								-| ['list_comprehension'] )
							  in  let <_cor39> =
								  %% Line 148
								  case call 'erl_types':'t_is_subtype'
									   (SpecReturnType, CbReturnType) of
								    %% Line 149
								    <'true'> when 'true' ->
									_cor22
								    %% Line 150
								    <'false'> when 'true' ->
									let <ExtraType> =
									    %% Line 151
									    call 'erl_types':'t_subtract'
										(SpecReturnType, CbReturnType)
									in  let <_cor36> =
										%% Line 154
										call 'erl_types':'t_to_string'
										    (ExtraType, Records)
									    in  let <_cor37> =
										    %% Line 155
										    call 'erl_types':'t_to_string'
											(CbReturnType, Records)
										in  %% Line 152
										    [{'callback_spec_type_mismatch',%% Line 153
														    [File|[Line|[Behaviour|[Function|[Arity|%% Line 154
																			    [_cor36|%% Line 155
																				    [_cor37|[]]]]]]]]}|_cor22]
								    ( <_cor38> when 'true' ->
									  primop 'match_fail'
									      ({'case_clause',_cor38})
								      -| ['compiler_generated'] )
								  end
							      in  let <_cor41> =
								      %% Line 158
								      call 'erl_types':'t_inf_lists'
									  (_cor33, CbArgTypes)
								  in  %% Line 157
								      case call 'erl_types':'any_none'
									       (_cor41) of
									%% Line 159
									<'false'> when 'true' ->
									    _cor39
									%% Line 160
									<'true'> when 'true' ->
									    %% Line 161
									    apply 'find_mismatching_args'/9
										({'spec',File,Line}, _cor33, %% Line 162
													     CbArgTypes, %% Line 162
															 Behaviour, %% Line 162
																    Function, %% Line 163
																	      Arity, %% Line 163
																		     Records, %% Line 163
																			      1, _cor39)
									( <_cor42> when 'true' ->
									      primop 'match_fail'
										  ({'case_clause',_cor42})
									  -| ['compiler_generated'] )
								      end
					  ( <_cor43> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor43})
					    -| ['compiler_generated'] )
					end
				    in  %% Line 167
					apply 'check_all_callbacks'/5
					    (Module, Behaviour, Rest, State, _cor44)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor51,_cor50,_cor49,_cor48,_cor47> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor51,_cor50,_cor49,_cor48,_cor47})
		  -| [{'function_name',{'check_all_callbacks',5}}] )
	    -| ['compiler_generated'] )
	end
'find_mismatching_args'/9 =
    %% Line 169
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_cor28,[],[],_X_Beh,_X_Function,_X_Arity,_X_Records,_X_N,Acc> when 'true' ->
	      %% Line 170
	      Acc
	  %% Line 171
	  <Kind,[Type|Rest],[CbType|CbRest],Behaviour,%% Line 172
						      Function,%% Line 172
							       Arity,%% Line 172
								     Records,%% Line 172
									     N,%% Line 172
									       Acc> when 'true' ->
	      let <_cor9> =
		  %% Line 173
		  call 'erl_types':'t_inf'
		      (Type, CbType)
	      in  %% Line 173
		  case call 'erl_types':'t_is_none'
			   (_cor9) of
		    %% Line 174
		    <'false'> when 'true' ->
			let <_cor10> =
			    %% Line 176
			    call 'erlang':'+'
				(N, 1)
			in  %% Line 175
			    apply 'find_mismatching_args'/9
				(Kind, Rest, CbRest, Behaviour, Function, %% Line 176
									  Arity, %% Line 176
										 Records, _cor10, %% Line 176
												  Acc)
		    %% Line 177
		    <'true'> when 'true' ->
			let <_cor11> =
			    %% Line 180
			    call 'erl_types':'t_to_string'
				(Type, Records)
			in  let <_cor12> =
				%% Line 181
				call 'erl_types':'t_to_string'
				    (CbType, Records)
			    in  let <Info> =
				    %% Line 179
				    [Behaviour|[Function|[Arity|[N|%% Line 180
								   [_cor11|%% Line 181
									   [_cor12|[]]]]]]]
				in  let <_cor15> =
					%% Line 183
					case Kind of
					  %% Line 184
					  <'type'> when 'true' ->
					      {'callback_arg_type_mismatch',Info}
					  %% Line 185
					  <{'spec',File,Line}> when 'true' ->
					      %% Line 186
					      {'callback_spec_arg_type_mismatch',[File|[Line|Info]]}
					  ( <_cor14> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor14})
					    -| ['compiler_generated'] )
					end
				    in  let <NewAcc> =
					    %% Line 183
					    [_cor15|%% Line 187
						    Acc]
					in  let <_cor17> =
						%% Line 189
						call 'erlang':'+'
						    (N, 1)
					    in  %% Line 188
						apply 'find_mismatching_args'/9
						    (Kind, Rest, CbRest, Behaviour, Function, %% Line 189
											      Arity, %% Line 189
												     Records, _cor17, %% Line 189
														      NewAcc)
		    ( <_cor18> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor18})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor27,_cor26,_cor25,_cor24,_cor23,_cor22,_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25,_cor24,_cor23,_cor22,_cor21,_cor20,_cor19})
		  -| [{'function_name',{'find_mismatching_args',9}}] )
	    -| ['compiler_generated'] )
	end
'add_tag_file_line'/3 =
    %% Line 192
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Module,Warn = {Tag,[B|_X_R]},State>
	      when let <_cor3> =
		    %% Line 193
		    call 'erlang':'=:='
			(Tag, 'callback_missing')
		in  let <_cor4> =
			%% Line 194
			call 'erlang':'=:='
			    (Tag, 'callback_info_missing')
		    in  %% Line 193
			call 'erlang':'or'
			    (_cor3, _cor4) ->
	      %% Line 195
	      ( case State of
		  ( <( {'state',_cor25,_cor26,_cor27,_rec0,_cor28}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'lists':'keyfind'
				 (B, 1, _rec0) of
			  <{_cor30,Line}>
			      when call 'erlang':'=:='
				    (_cor30,
				     B) ->
			      let <_cor9> =
				  %% Line 197
				  case Tag of
				    %% Line 198
				    <'callback_missing'> when 'true' ->
					'warn_behaviour'
				    %% Line 199
				    <'callback_info_missing'> when 'true' ->
					'warn_undefined_callbacks'
				    ( <_cor8> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor8})
				      -| ['compiler_generated'] )
				  end
			      in  %% Line 201
				  {_cor9,{_cor27,Line},Warn}
			  ( <_cor7> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor7})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor29> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 202
	  <_X_Module,{Tag,[File|[Line|R]]},_X_State>
	      when let <_cor13> =
		    %% Line 203
		    call 'erlang':'=:='
			(Tag, 'callback_spec_type_mismatch')
		in  let <_cor14> =
			%% Line 204
			call 'erlang':'=:='
			    (Tag, 'callback_spec_arg_type_mismatch')
		    in  %% Line 203
			call 'erlang':'or'
			    (_cor13, _cor14) ->
	      %% Line 205
	      {'warn_behaviour',{File,Line},{Tag,R}}
	  %% Line 206
	  <Module,Warn = {_X_Tag,[_X_B|[Fun|[Arity|_X_R]]]},State> when 'true' ->
	      %% Line 209
	      ( case State of
		  ( <( {'state',_cor36,_rec2,_cor37,_cor38,_cor39}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'dialyzer_codeserver':'lookup_mfa_code'
				 ({Module,Fun,Arity}, _rec2) of
			  <{_X_A,FunCode}> when 'true' ->
			      let <Anns> =
				  %% Line 210
				  call 'cerl':'get_ann'
				      (FunCode)
			      in  let <_cor20> =
				      %% Line 211
				      apply 'get_file'/1
					  (Anns)
				  in  let <_cor19> =
					  %% Line 211
					  apply 'get_line'/1
					      (Anns)
				      in  let <FileLine> = {_cor20,_cor19}
					  in  %% Line 212
					      {'warn_behaviour',FileLine,Warn}
			  ( <_cor17> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor17})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor40> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor24,_cor23,_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23,_cor22})
		  -| [{'function_name',{'add_tag_file_line',3}}] )
	    -| ['compiler_generated'] )
	end
'get_line'/1 =
    %% Line 214
    fun (_cor0) ->
	case _cor0 of
	  <[Line|_cor2]>
	      when call 'erlang':'is_integer'
		    (Line) ->
	      Line
	  %% Line 215
	  <[_cor3|Tail]> when 'true' ->
	      apply 'get_line'/1
		  (Tail)
	  %% Line 216
	  <[]> when 'true' ->
	      -1
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_line',1}}] )
	    -| ['compiler_generated'] )
	end
'get_file'/1 =
    %% Line 218
    fun (_cor0) ->
	case _cor0 of
	  <[{'file',File}|_cor2]> when 'true' ->
	      File
	  %% Line 219
	  <[_cor3|Tail]> when 'true' ->
	      apply 'get_file'/1
		  (Tail)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_file',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('dialyzer_behaviours')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('dialyzer_behaviours', _cor0)
end