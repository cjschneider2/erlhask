module 'dialyzer_analysis_callgraph' ['add_to_result'/4,
				      'compile_init_result'/0,
				      'continue_compilation'/2,
				      'module_info'/0,
				      'module_info'/1,
				      'start'/3,
				      'start_compilation'/2]
    attributes [%% Line 38
		'export_type' =
		    %% Line 38
		    [{'compile_init_data',0}|[{'one_file_result',0}|[{'compile_result',0}]]],
		%% Line 42
		'export_type' =
		    %% Line 42
		    [{'no_warn_unused',0}],
		%% Line 33
		'type' =
		    %% Line 33
		    [{'dial_ret',{'type',33,'union',[{'integer',33,0}|[{'integer',34,1}|[{'integer',35,2}]]]},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'dial_warn_tag',{'type',68,'union',[{'atom',68,'warn_return_no_exit'}|[{'atom',68,'warn_return_only_exit'}|[{'atom',69,'warn_not_called'}|[{'atom',69,'warn_non_proper_list'}|[{'atom',70,'warn_matching'}|[{'atom',70,'warn_opaque'}|[{'atom',70,'warn_fun_app'}|[{'atom',71,'warn_failing_call'}|[{'atom',71,'warn_bin_construction'}|[{'atom',72,'warn_contract_types'}|[{'atom',72,'warn_contract_syntax'}|[{'atom',73,'warn_contract_not_equal'}|[{'atom',73,'warn_contract_subtype'}|[{'atom',74,'warn_contract_supertype'}|[{'atom',74,'warn_callgraph'}|[{'atom',75,'warn_umatched_return'}|[{'atom',75,'warn_race_condition'}|[{'atom',76,'warn_behaviour'}|[{'atom',76,'warn_contract_range'}|[{'atom',77,'warn_undefined_callbacks'}|[{'atom',77,'warn_unknown'}]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'file_line',{'type',83,'tuple',[{'remote_type',83,[{'atom',83,'file'}|[{'atom',83,'filename'}|[[]]]]}|[{'type',83,'non_neg_integer',[]}]]},[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{'dial_warning',{'type',84,'tuple',[{'type',84,'dial_warn_tag',[]}|[{'type',84,'file_line',[]}|[{'type',84,'tuple',[{'type',84,'atom',[]}|[{'type',84,'list',[{'type',84,'term',[]}]}]]}]]]},[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{'dial_error',{'type',89,'any',[]},[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{'anal_type',{'type',96,'union',[{'atom',96,'succ_typings'}|[{'atom',96,'plt_build'}]]},[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{'anal_type1',{'type',97,'union',[{'type',97,'anal_type',[]}|[{'atom',97,'plt_add'}|[{'atom',97,'plt_check'}|[{'atom',97,'plt_remove'}]]]]},[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{'contr_constr',{'type',98,'tuple',[{'atom',98,'subtype'}|[{'remote_type',98,[{'atom',98,'erl_types'}|[{'atom',98,'erl_type'}|[[]]]]}|[{'remote_type',98,[{'atom',98,'erl_types'}|[{'atom',98,'erl_type'}|[[]]]]}]]]},[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{'contract_pair',{'type',99,'tuple',[{'remote_type',99,[{'atom',99,'erl_types'}|[{'atom',99,'erl_type'}|[[]]]]}|[{'type',99,'list',[{'type',99,'contr_constr',[]}]}]]},[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{'dial_define',{'type',100,'tuple',[{'type',100,'atom',[]}|[{'type',100,'term',[]}]]},[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{'dial_option',{'type',101,'tuple',[{'type',101,'atom',[]}|[{'type',101,'term',[]}]]},[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{'dial_options',{'type',102,'list',[{'type',102,'dial_option',[]}]},[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{'fopt',{'type',103,'union',[{'atom',103,'basename'}|[{'atom',103,'fullpath'}]]},[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{'format',{'type',104,'union',[{'atom',104,'formatted'}|[{'atom',104,'raw'}]]},[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{'label',{'type',105,'non_neg_integer',[]},[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{'rep_mode',{'type',106,'union',[{'atom',106,'quiet'}|[{'atom',106,'normal'}|[{'atom',106,'verbose'}]]]},[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{'start_from',{'type',107,'union',[{'atom',107,'byte_code'}|[{'atom',107,'src_code'}]]},[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{'mfa_or_funlbl',{'type',108,'union',[{'type',108,'label',[]}|[{'type',108,'mfa',[]}]]},[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{'solver',{'type',109,'union',[{'atom',109,'v1'}|[{'atom',109,'v2'}]]},[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{{'record','analysis'},[{'typed_record_field',{'record_field',115,{'atom',115,'analysis_pid'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'pid',[]}]]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'type'},{'atom',116,'succ_typings'}},{'type',116,'anal_type',[]}}|[{'typed_record_field',{'record_field',117,{'atom',117,'defines'},{'nil',117}},{'type',117,'list',[{'type',117,'dial_define',[]}]}}|[{'typed_record_field',{'record_field',118,{'atom',118,'doc_plt'}},{'type',118,'union',[{'atom',118,'undefined'}|[{'remote_type',118,[{'atom',118,'dialyzer_plt'}|[{'atom',118,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',119,{'atom',119,'files'},{'nil',119}},{'type',119,'list',[{'remote_type',119,[{'atom',119,'file'}|[{'atom',119,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'include_dirs'},{'nil',120}},{'type',120,'list',[{'remote_type',120,[{'atom',120,'file'}|[{'atom',120,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',121,{'atom',121,'start_from'},{'atom',121,'byte_code'}},{'type',121,'start_from',[]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'plt'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'remote_type',122,[{'atom',122,'dialyzer_plt'}|[{'atom',122,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'use_contracts'},{'atom',123,'true'}},{'type',123,'boolean',[]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'race_detection'},{'atom',124,'false'}},{'type',124,'boolean',[]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'behaviours_chk'},{'atom',125,'false'}},{'type',125,'boolean',[]}}|[{'typed_record_field',{'record_field',126,{'atom',126,'timing'},{'atom',126,'false'}},{'type',126,'union',[{'type',126,'boolean',[]}|[{'atom',126,'debug'}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'timing_server'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'remote_type',127,[{'atom',127,'dialyzer_timing'}|[{'atom',127,'timing_server'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'callgraph_file'},{'string',128,[]}},{'remote_type',128,[{'atom',128,'file'}|[{'atom',128,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'solvers'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'list',[{'type',129,'solver',[]}]}]]}}]]]]]]]]]]]]]]],[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{{'record','options'},[{'typed_record_field',{'record_field',131,{'atom',131,'files'},{'nil',131}},{'type',131,'list',[{'remote_type',131,[{'atom',131,'file'}|[{'atom',131,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'files_rec'},{'nil',132}},{'type',132,'list',[{'remote_type',132,[{'atom',132,'file'}|[{'atom',132,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',133,{'atom',133,'analysis_type'},{'atom',133,'succ_typings'}},{'type',133,'anal_type1',[]}}|[{'typed_record_field',{'record_field',134,{'atom',134,'timing'},{'atom',134,'false'}},{'type',134,'union',[{'type',134,'boolean',[]}|[{'atom',134,'debug'}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'defines'},{'nil',135}},{'type',135,'list',[{'type',135,'dial_define',[]}]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'from'},{'atom',136,'byte_code'}},{'type',136,'start_from',[]}}|[{'typed_record_field',{'record_field',137,{'atom',137,'get_warnings'},{'atom',137,'maybe'}},{'type',137,'union',[{'type',137,'boolean',[]}|[{'atom',137,'maybe'}]]}}|[{'typed_record_field',{'record_field',138,{'atom',138,'init_plts'},{'nil',138}},{'type',138,'list',[{'remote_type',138,[{'atom',138,'file'}|[{'atom',138,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',139,{'atom',139,'include_dirs'},{'nil',139}},{'type',139,'list',[{'remote_type',139,[{'atom',139,'file'}|[{'atom',139,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'output_plt'},{'atom',140,'none'}},{'type',140,'union',[{'atom',140,'none'}|[{'remote_type',140,[{'atom',140,'file'}|[{'atom',140,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',141,{'atom',141,'legal_warnings'},{'call',141,{'remote',141,{'atom',141,'ordsets'},{'atom',141,'new'}},[]}},{'remote_type',141,[{'atom',141,'ordsets'}|[{'atom',141,'ordset'}|[[{'type',141,'dial_warn_tag',[]}]]]]}}|[{'typed_record_field',{'record_field',142,{'atom',142,'report_mode'},{'atom',142,'normal'}},{'type',142,'rep_mode',[]}}|[{'typed_record_field',{'record_field',143,{'atom',143,'erlang_mode'},{'atom',143,'false'}},{'type',143,'boolean',[]}}|[{'typed_record_field',{'record_field',144,{'atom',144,'use_contracts'},{'atom',144,'true'}},{'type',144,'boolean',[]}}|[{'typed_record_field',{'record_field',145,{'atom',145,'output_file'},{'atom',145,'none'}},{'type',145,'union',[{'atom',145,'none'}|[{'remote_type',145,[{'atom',145,'file'}|[{'atom',145,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',146,{'atom',146,'output_format'},{'atom',146,'formatted'}},{'type',146,'format',[]}}|[{'typed_record_field',{'record_field',147,{'atom',147,'filename_opt'},{'atom',147,'basename'}},{'type',147,'fopt',[]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'callgraph_file'},{'string',148,[]}},{'remote_type',148,[{'atom',148,'file'}|[{'atom',148,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'check_plt'},{'atom',149,'true'}},{'type',149,'boolean',[]}}|[{'typed_record_field',{'record_field',150,{'atom',150,'solvers'},{'nil',150}},{'type',150,'list',[{'type',150,'solver',[]}]}}]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 152
		'type' =
		    %% Line 152
		    [{{'record','contract'},[{'typed_record_field',{'record_field',152,{'atom',152,'contracts'},{'nil',152}},{'type',152,'list',[{'type',152,'contract_pair',[]}]}}|[{'typed_record_field',{'record_field',153,{'atom',153,'args'},{'nil',153}},{'type',153,'list',[{'remote_type',153,[{'atom',153,'erl_types'}|[{'atom',153,'erl_type'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',154,{'atom',154,'forms'},{'nil',154}},{'type',154,'list',[{'type',154,'tuple',[{'var',154,'_'}|[{'var',154,'_'}]]}]}}]]],[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{{'record','analysis_state'},[{'typed_record_field',{'record_field',48,{'atom',48,'codeserver'}},{'type',48,'union',[{'atom',48,'undefined'}|[{'remote_type',48,[{'atom',48,'dialyzer_codeserver'}|[{'atom',48,'codeserver'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',49,{'atom',49,'analysis_type'},{'atom',49,'succ_typings'}},{'type',49,'anal_type',[]}}|[{'typed_record_field',{'record_field',50,{'atom',50,'defines'},{'nil',50}},{'type',50,'list',[{'type',50,'dial_define',[]}]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'doc_plt'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'remote_type',51,[{'atom',51,'dialyzer_plt'}|[{'atom',51,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'include_dirs'},{'nil',52}},{'type',52,'list',[{'remote_type',52,[{'atom',52,'file'}|[{'atom',52,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'no_warn_unused'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'no_warn_unused',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'parent'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'pid',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'plt'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'remote_type',55,[{'atom',55,'dialyzer_plt'}|[{'atom',55,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',56,{'atom',56,'start_from'},{'atom',56,'byte_code'}},{'type',56,'start_from',[]}}|[{'typed_record_field',{'record_field',57,{'atom',57,'use_contracts'},{'atom',57,'true'}},{'type',57,'boolean',[]}}|[{'typed_record_field',{'record_field',58,{'atom',58,'timing_server'}},{'type',58,'union',[{'atom',58,'undefined'}|[{'remote_type',58,[{'atom',58,'dialyzer_timing'}|[{'atom',58,'timing_server'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',59,{'atom',59,'solvers'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'list',[{'type',59,'solver',[]}]}]]}}]]]]]]]]]]]],[]}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{{'record','server_state'},[{'typed_record_field',{'record_field',62,{'atom',62,'parent'}},{'type',62,'union',[{'atom',62,'undefined'}|[{'type',62,'pid',[]}]]}}|[{'typed_record_field',{'record_field',62,{'atom',62,'legal_warnings'}},{'type',62,'union',[{'atom',62,'undefined'}|[{'type',62,'list',[{'type',62,'dial_warn_tag',[]}]}]]}}]],[]}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{'no_warn_unused',{'remote_type',64,[{'atom',64,'sets'}|[{'atom',64,'set'}|[[{'type',64,'mfa',[]}]]]]},[]}],
		%% Line 70
		'spec' =
		    %% Line 70
		    [{{'start',3},[{'type',70,'fun',[{'type',70,'product',[{'type',70,'pid',[]}|[{'type',70,'list',[{'type',70,'dial_warn_tag',[]}]}|[{'type',70,'record',[{'atom',70,'analysis'}]}]]]}|[{'atom',70,'ok'}]]}]}],
		%% Line 227
		'type' =
		    %% Line 227
		    [{{'record','compile_init'},[{'typed_record_field',{'record_field',228,{'atom',228,'callgraph'}},{'type',228,'union',[{'atom',228,'undefined'}|[{'remote_type',228,[{'atom',228,'dialyzer_callgraph'}|[{'atom',228,'callgraph'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',229,{'atom',229,'codeserver'}},{'type',229,'union',[{'atom',229,'undefined'}|[{'remote_type',229,[{'atom',229,'dialyzer_codeserver'}|[{'atom',229,'codeserver'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',230,{'atom',230,'defines'},{'nil',230}},{'type',230,'list',[{'type',230,'dial_define',[]}]}}|[{'typed_record_field',{'record_field',231,{'atom',231,'include_dirs'},{'nil',231}},{'type',231,'list',[{'remote_type',231,[{'atom',231,'file'}|[{'atom',231,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',232,{'atom',232,'start_from'},{'atom',232,'byte_code'}},{'type',232,'start_from',[]}}|[{'typed_record_field',{'record_field',233,{'atom',233,'use_contracts'},{'atom',233,'true'}},{'type',233,'boolean',[]}}]]]]]],[]}],
		%% Line 286
		'type' =
		    %% Line 286
		    [{'compile_init_data',{'type',286,'record',[{'atom',286,'compile_init'}]},[]}],
		%% Line 287
		'type' =
		    %% Line 287
		    [{'error_reason',{'type',287,'string',[]},[]}],
		%% Line 288
		'type' =
		    %% Line 288
		    [{'compile_result',{'type',288,'tuple',[{'type',288,'list',[{'type',288,'tuple',[{'remote_type',288,[{'atom',288,'file'}|[{'atom',288,'filename'}|[[]]]]}|[{'type',288,'error_reason',[]}]]}]}|[{'type',288,'list',[{'type',288,'mfa',[]}]}|[{'type',289,'list',[{'type',289,'module',[]}]}]]]},[]}],
		%% Line 290
		'type' =
		    %% Line 290
		    [{'one_file_result',{'type',290,'union',[{'type',290,'tuple',[{'atom',290,'error'}|[{'type',290,'error_reason',[]}]]}|[{'type',291,'tuple',[{'atom',291,'ok'}|[{'type',291,'list',[{'remote_type',291,[{'atom',291,'dialyzer_callgraph'}|[{'atom',291,'callgraph_edge'}|[[]]]]}]}|[{'type',292,'list',[{'type',292,'mfa_or_funlbl',[]}]}|[{'type',292,'list',[{'type',292,'mfa',[]}]}|[{'type',292,'module',[]}]]]]]}]]},[]}],
		%% Line 293
		'type' =
		    %% Line 293
		    [{'compile_mid_data',{'type',293,'tuple',[{'type',293,'module',[]}|[{'remote_type',293,[{'atom',293,'cerl'}|[{'atom',293,'cerl'}|[[]]]]}|[{'type',293,'list',[{'type',293,'mfa',[]}]}|[{'remote_type',294,[{'atom',294,'dialyzer_callgraph'}|[{'atom',294,'callgraph'}|[[]]]]}|[{'remote_type',295,[{'atom',295,'dialyzer_codeserver'}|[{'atom',295,'codeserver'}|[[]]]]}]]]]]},[]}],
		%% Line 297
		'spec' =
		    %% Line 297
		    [{{'compile_init_result',0},[{'type',297,'fun',[{'type',297,'product',[]}|[{'type',297,'compile_result',[]}]]}]}],
		%% Line 301
		'spec' =
		    %% Line 301
		    [{{'add_to_result',4},[{'type',301,'fun',[{'type',301,'product',[{'remote_type',301,[{'atom',301,'file'}|[{'atom',301,'filename'}|[[]]]]}|[{'type',301,'one_file_result',[]}|[{'type',301,'compile_result',[]}|[{'type',302,'compile_init_data',[]}]]]]}|[{'type',302,'compile_result',[]}]]}]}],
		%% Line 314
		'spec' =
		    %% Line 314
		    [{{'start_compilation',2},[{'type',314,'fun',[{'type',314,'product',[{'remote_type',314,[{'atom',314,'file'}|[{'atom',314,'filename'}|[[]]]]}|[{'type',314,'compile_init_data',[]}]]}|[{'type',315,'union',[{'type',315,'tuple',[{'atom',315,'error'}|[{'type',315,'error_reason',[]}]]}|[{'type',315,'tuple',[{'atom',315,'ok'}|[{'type',315,'integer',[]}|[{'type',315,'compile_mid_data',[]}]]]}]]}]]}]}],
		%% Line 415
		'spec' =
		    %% Line 415
		    [{{'continue_compilation',2},[{'type',415,'fun',[{'type',415,'product',[{'type',415,'integer',[]}|[{'type',415,'compile_mid_data',[]}]]}|[{'type',415,'one_file_result',[]}]]}]}],
		%% Line 615
		'spec' =
		    %% Line 615
		    [{{'dump_callgraph',3},[{'type',615,'fun',[{'type',615,'product',[{'remote_type',615,[{'atom',615,'dialyzer_callgraph'}|[{'atom',615,'callgraph'}|[[]]]]}|[{'type',615,'record',[{'atom',615,'analysis_state'}]}|[{'type',615,'record',[{'atom',615,'analysis'}]}]]]}|[{'atom',616,'ok'}]]}]}]]
'start'/3 =
    %% Line 72
    fun (_cor2,_cor1,_cor0) ->
	%% Line 73
	( case _cor0 of
	    ( <( {'analysis',_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_rec0,_cor29,_cor30,_cor31}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <TimingServer> =
		      call 'dialyzer_timing':'init'
			  (_rec0)
		  in  let <RacesOn> =
			  %% Line 74
			  call 'ordsets':'is_element'
			      ('warn_race_condition', _cor1)
		      in  let <_cor8> =
			      %% Line 76
			      call 'erlang':'setelement'
				  (14, _cor0, TimingServer)
			  in  let <_cor10> =
				  %% Line 76
				  call 'erlang':'setelement'
				      (11, _cor8, RacesOn)
			      in  let <Analysis1> =
				      %% Line 77
				      apply 'expand_files'/1
					  (_cor10)
				  in  let <Analysis2> =
					  %% Line 78
					  apply 'run_analysis'/1
					      (Analysis1)
				      in  let <State> = {%% Line 79
					       'server_state',_cor2,_cor1}
					  in  do  %% Line 80
						  apply 'loop'/3
						      (State, Analysis2, 'none')
						  %% Line 81
						  call 'dialyzer_timing':'stop'
						      (TimingServer)
	      -| ['compiler_generated'] )
	    ( <_cor32> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','analysis'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'run_analysis'/1 =
    %% Line 83
    fun (_cor0) ->
	let <Self> =
	    %% Line 84
	    call 'erlang':'self'
		()
	in  let <Fun> =
		%% Line 85
		( fun () ->
		      apply 'analysis_start'/2
			  (Self, _cor0)
		  -| [{'id',{0,0,'-run_analysis/1-fun-0-'}}] )
	    in  let <_rec2> =
		    %% Line 86
		    call 'erlang':'spawn_link'
			(Fun)
		in  %% Line 86
		    case _cor0 of
		      <{'analysis',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}> when 'true' ->
			  call 'erlang':'setelement'
			      (2, _cor0, _rec2)
		      ( <_cor22> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','analysis'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
'loop'/3 =
    %% Line 88
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <State = {'server_state',Parent,LegalWarnings},Analysis = %% Line 89
								    {'analysis',AnalPid,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21},%% Line 89
																							 ExtCalls> when 'true' ->
	      %% Line 90
	      receive
		%% Line 91
		<{_cor22,'log',LogMsg}>
		    when call 'erlang':'=:='
			  (_cor22,
			   AnalPid) ->
		    do  %% Line 92
			apply 'send_log'/2
			    (Parent, LogMsg)
			%% Line 93
			apply 'loop'/3
			    (State, Analysis, ExtCalls)
		%% Line 94
		<{_cor23,'warnings',Warnings}>
		    when call 'erlang':'=:='
			  (_cor23,
			   AnalPid) ->
		    do  %% Line 95
			case apply 'filter_warnings'/2
				 (LegalWarnings, Warnings) of
			  %% Line 96
			  <[]> when 'true' ->
			      'ok'
			  %% Line 97
			  <SendWarnings> when 'true' ->
			      %% Line 98
			      apply 'send_warnings'/2
				  (Parent, SendWarnings)
			end
			%% Line 100
			apply 'loop'/3
			    (State, Analysis, ExtCalls)
		%% Line 101
		<{_cor24,'cserver',CServer,Plt}>
		    when call 'erlang':'=:='
			  (_cor24,
			   AnalPid) ->
		    do  %% Line 102
			apply 'send_codeserver_plt'/3
			    (Parent, CServer, Plt)
			%% Line 103
			apply 'loop'/3
			    (State, Analysis, ExtCalls)
		%% Line 104
		<{_cor25,'done',Plt,DocPlt}>
		    when call 'erlang':'=:='
			  (_cor25,
			   AnalPid) ->
		    %% Line 105
		    case <> of
		      %% Line 106
		      <>
			  when call 'erlang':'=:='
				(ExtCalls,
				 'none') ->
			  %% Line 107
			  apply 'send_analysis_done'/3
			      (Parent, Plt, DocPlt)
		      %% Line 108
		      <> when 'true' ->
			  do  %% Line 109
			      apply 'send_ext_calls'/2
				  (Parent, ExtCalls)
			      %% Line 110
			      apply 'send_analysis_done'/3
				  (Parent, Plt, DocPlt)
		    end
		%% Line 112
		<{_cor26,'ext_calls',NewExtCalls}>
		    when call 'erlang':'=:='
			  (_cor26,
			   AnalPid) ->
		    %% Line 113
		    apply 'loop'/3
			(State, Analysis, NewExtCalls)
		%% Line 114
		<{_cor27,'ext_types',ExtTypes}>
		    when call 'erlang':'=:='
			  (_cor27,
			   AnalPid) ->
		    do  %% Line 115
			apply 'send_ext_types'/2
			    (Parent, ExtTypes)
			%% Line 116
			apply 'loop'/3
			    (State, Analysis, ExtCalls)
		%% Line 117
		<{_cor28,'unknown_behaviours',UnknownBehaviour}>
		    when call 'erlang':'=:='
			  (_cor28,
			   AnalPid) ->
		    do  %% Line 118
			apply 'send_unknown_behaviours'/2
			    (Parent, UnknownBehaviour)
			%% Line 119
			apply 'loop'/3
			    (State, Analysis, ExtCalls)
		%% Line 120
		<{_cor29,'mod_deps',ModDeps}>
		    when call 'erlang':'=:='
			  (_cor29,
			   AnalPid) ->
		    do  %% Line 121
			apply 'send_mod_deps'/2
			    (Parent, ModDeps)
			%% Line 122
			apply 'loop'/3
			    (State, Analysis, ExtCalls)
		%% Line 123
		<{_cor30,'stop'}>
		    when call 'erlang':'=:='
			  (_cor30,
			   Parent) ->
		    do  %% Line 124
			call 'erlang':'exit'
			    (AnalPid, 'kill')
			%% Line 125
			'ok'
	      after 'infinity' ->
		'true'
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'loop',3}}] )
	    -| ['compiler_generated'] )
	end
'analysis_start'/2 =
    %% Line 132
    fun (_cor1,_cor0) ->
	let <CServer> =
	    %% Line 133
	    call 'dialyzer_codeserver':'new'
		()
	in  %% Line 134
	    ( case _cor0 of
		( <( {'analysis',_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_rec4,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <State> =
			  %% Line 135
			  {'analysis_state',CServer,_cor101,_cor102,_cor103,_cor105,'undefined',_cor1,_rec4,_cor106,_cor107,_cor111,_cor113}
		      in  let <Files> =
			      %% Line 147
			      call 'ordsets':'from_list'
				  (_cor104)
			  in  %% Line 148
			      case apply 'compile_and_store'/2
				       (Files, State) of
				<{Callgraph,NoWarn,TmpCServer0}> when 'true' ->
				    let <_cor58> =
					%% Line 151
					try
					    let <NewRecords> =
						%% Line 152
						call 'dialyzer_codeserver':'get_temp_records'
						    (TmpCServer0)
					    in  let <NewExpTypes> =
						    %% Line 153
						    call 'dialyzer_codeserver':'get_temp_exported_types'
							(TmpCServer0)
						in  let <OldRecords> =
							%% Line 154
							call 'dialyzer_plt':'get_types'
							    (_rec4)
						    in  let <OldExpTypes0> =
							    %% Line 155
							    call 'dialyzer_plt':'get_exported_types'
								(_rec4)
							in  let <MergedRecords> =
								%% Line 156
								call 'dialyzer_utils':'merge_records'
								    (NewRecords, OldRecords)
							    in  let <_cor42> =
								    %% Line 158
								    ( letrec
									  'lc$^0'/1 =
									      fun (_cor34) ->
										  case _cor34 of
										    <[%% Line 161
										      F|_cor33]> when 'true' ->
											let <_cor40> =
											    case _cor106 of
											      %% Line 159
											      <'byte_code'> when 'true' ->
												  let <_cor37> =
												      call 'filename':'basename'
													  (F, [46|[98|[101|[97|[109]]]]])
												  in  call 'erlang':'list_to_atom'
													  (_cor37)
											      %% Line 160
											      <'src_code'> when 'true' ->
												  let <_cor38> =
												      call 'filename':'basename'
													  (F, [46|[101|[114|[108]]]])
												  in  call 'erlang':'list_to_atom'
													  (_cor38)
											      ( <_cor39> when 'true' ->
												    primop 'match_fail'
													({'case_clause',_cor39})
												-| ['compiler_generated'] )
											    end
											in  let <_cor41> =
												%% Line 161
												apply 'lc$^0'/1
												    (_cor33)
											    in  ( [_cor40|_cor41]
												  -| ['compiler_generated'] )
										    <[]> when 'true' ->
											[]
										    ( <_cor34> when 'true' ->
											  ( primop 'match_fail'
												({'function_clause',_cor34})
											    -| [{'function_name',{'lc$^0',1}}] )
										      -| ['compiler_generated'] )
										  end
								      in  apply 'lc$^0'/1
									      (%% Line 161
									       Files)
								      -| ['list_comprehension'] )
								in  let <OldExpTypes1> =
									%% Line 162
									call 'dialyzer_utils':'sets_filter'
									    (_cor42, OldExpTypes0)
								    in  let <MergedExpTypes> =
									    %% Line 163
									    call 'sets':'union'
										(NewExpTypes, OldExpTypes1)
									in  let <TmpCServer1> =
										%% Line 164
										call 'dialyzer_codeserver':'set_temp_records'
										    (MergedRecords, TmpCServer0)
									    in  let <TmpCServer2> =
										    %% Line 166
										    call 'dialyzer_codeserver':'insert_temp_exported_types'
											(MergedExpTypes, %% Line 167
													 TmpCServer1)
										in  let <TmpCServer3> =
											%% Line 168
											call 'dialyzer_utils':'process_record_remote_types'
											    (TmpCServer2)
										    in  %% Line 169
											( case State of
											    ( <( {'analysis_state',_cor265,_cor266,_cor267,_cor268,_cor269,_cor270,_cor271,_cor272,_cor273,_cor274,_rec15,_cor275}
												 -| ['compiler_generated'] )> when 'true' ->
												  do  call 'dialyzer_timing':'start_stamp'
													  (_rec15, [114|[101|[109|[111|[116|[101]]]]]])
												      let <_X_T> =
													  %% Line 170
													  call 'dialyzer_contracts':'process_contract_remote_types'
													      (TmpCServer3)
												      in  do  %% Line 170
													      call 'dialyzer_timing':'end_stamp'
														  (_rec15)
													      _X_T
											      -| ['compiler_generated'] )
											    ( <_cor276> when 'true' ->
												  ( call ( 'erlang'
													   -| ['compiler_generated'] ):( 'error'
																	 -| ['compiler_generated'] )
													(( {'badrecord','analysis_state'}
													   -| ['compiler_generated'] ))
												    -| ['compiler_generated'] )
											      -| ['compiler_generated'] )
											  end
											  -| ['compiler_generated'] )
					of <_cor54> ->
					    _cor54
					catch <_cor57,_cor56,_cor55> ->
					    case <_cor57,_cor56,_cor55> of
					      %% Line 172
					      <'throw',Error = {'error',_X_ErrorMsg},_cor289> when 'true' ->
						  call 'erlang':'exit'
						      (Error)
					      ( <_cor57,_cor56,_cor55> when 'true' ->
						    primop 'raise'
							(_cor55, _cor56)
						-| ['compiler_generated'] )
					    end
				    in  let <_cor60> =
					    %% Line 174
					    call 'dialyzer_codeserver':'get_records'
						(_cor58)
					in  let <NewPlt0> =
						%% Line 174
						call 'dialyzer_plt':'insert_types'
						    (_rec4, _cor60)
					    in  let <ExpTypes> =
						    %% Line 175
						    call 'dialyzer_codeserver':'get_exported_types'
							(_cor58)
						in  let <NewPlt1> =
							%% Line 176
							call 'dialyzer_plt':'insert_exported_types'
							    (NewPlt0, ExpTypes)
						    in  %% Line 177
							case State of
							  <{'analysis_state',_cor290,_cor291,_cor292,_cor293,_cor294,_cor295,_cor296,_cor297,_cor298,_cor299,_cor300,_cor301}> when 'true' ->
							      let <_cor66> =
								  call 'erlang':'setelement'
								      (9, State, NewPlt1)
							      in  do  %% Line 178
								      apply 'dump_callgraph'/3
									  (Callgraph, _cor66, _cor0)
								      %% Line 179
								      case _cor66 of
									<{'analysis_state',_cor303,_cor304,_cor305,_cor306,_cor307,_cor308,_cor309,_cor310,_cor311,_cor312,_cor313,_cor314}> when 'true' ->
									    let <_cor70> =
										call 'erlang':'setelement'
										    (2, _cor66, _cor58)
									    in  %% Line 180
										case _cor70 of
										  <{'analysis_state',_cor316,_cor317,_cor318,_cor319,_cor320,_cor321,_cor322,_cor323,_cor324,_cor325,_cor326,_cor327}> when 'true' ->
										      let <_cor74> =
											  call 'erlang':'setelement'
											      (7, _cor70, NoWarn)
										      in  let <AllNodes> =
											      %% Line 182
											      call 'dialyzer_callgraph':'all_nodes'
												  (Callgraph)
											  in  let <Plt1> =
												  %% Line 183
												  call 'dialyzer_plt':'delete_list'
												      (NewPlt1, AllNodes)
											      in  let <Exports> =
												      %% Line 184
												      call 'dialyzer_codeserver':'get_exports'
													  (_cor58)
												  in  let <_cor82> =
													  %% Line 186
													  case _cor108 of
													    %% Line 187
													    <'true'> when 'true' ->
														call 'dialyzer_callgraph':'put_race_detection'
														    ('true', Callgraph)
													    %% Line 188
													    <'false'> when 'true' ->
														Callgraph
													    ( <_cor81> when 'true' ->
														  primop 'match_fail'
														      ({'case_clause',_cor81})
													      -| ['compiler_generated'] )
													  end
												      in  %% Line 190
													  case _cor74 of
													    <{'analysis_state',_cor344,_cor345,_cor346,_cor347,_cor348,_cor349,_cor350,_cor351,_cor352,_cor353,_cor354,_cor355}> when 'true' ->
														let <_cor86> =
														    call 'erlang':'setelement'
															(9, _cor74, Plt1)
														in  let <State3> =
															apply 'analyze_callgraph'/2
															    (_cor82, _cor86)
														    in  do  %% Line 191
															    call 'dialyzer_callgraph':'dispose_race_server'
																(_cor82)
															    do  %% Line 192
																apply 'rcv_and_send_ext_types'/1
																    (_cor1)
																let <_cor88> =
																    %% Line 193
																    call 'sets':'from_list'
																	(AllNodes)
																in  let <NonExports> =
																	%% Line 193
																	call 'sets':'subtract'
																	    (_cor88, Exports)
																    in  let <NonExportsList> =
																	    %% Line 194
																	    call 'sets':'to_list'
																		(NonExports)
																	in  %% Line 195
																	    ( case State3 of
																		( <( {'analysis_state',_cor357,_cor358,_cor359,_cor360,_cor361,_cor362,_cor363,_rec22,_cor364,_cor365,_cor366,_cor367}
																		     -| ['compiler_generated'] )> when 'true' ->
																		      let <Plt2> =
																			  call 'dialyzer_plt':'delete_list'
																			      (_rec22, NonExportsList)
																		      in  do  %% Line 196
																			      apply 'send_codeserver_plt'/3
																				  (_cor1, CServer, _rec22)
																			      %% Line 197
																			      apply 'send_analysis_done'/3
																				  (_cor1, Plt2, _cor360)
																		  -| ['compiler_generated'] )
																		( <_cor368> when 'true' ->
																		      ( call ( 'erlang'
																			       -| ['compiler_generated'] ):( 'error'
																							     -| ['compiler_generated'] )
																			    (( {'badrecord','analysis_state'}
																			       -| ['compiler_generated'] ))
																			-| ['compiler_generated'] )
																		  -| ['compiler_generated'] )
																	      end
																	      -| ['compiler_generated'] )
													    ( <_cor356> when 'true' ->
														  ( call ( 'erlang'
															   -| ['compiler_generated'] ):( 'error'
																			 -| ['compiler_generated'] )
															(( {'badrecord','analysis_state'}
															   -| ['compiler_generated'] ))
														    -| ['compiler_generated'] )
													      -| ['compiler_generated'] )
													  end
										  ( <_cor328> when 'true' ->
											( call ( 'erlang'
												 -| ['compiler_generated'] ):( 'error'
															       -| ['compiler_generated'] )
											      (( {'badrecord','analysis_state'}
												 -| ['compiler_generated'] ))
											  -| ['compiler_generated'] )
										    -| ['compiler_generated'] )
										end
									( <_cor315> when 'true' ->
									      ( call ( 'erlang'
										       -| ['compiler_generated'] ):( 'error'
														     -| ['compiler_generated'] )
										    (( {'badrecord','analysis_state'}
										       -| ['compiler_generated'] ))
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								      end
							  ( <_cor302> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {'badrecord','analysis_state'}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
				( <_cor26> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor26})
				  -| ['compiler_generated'] )
			      end
		  -| ['compiler_generated'] )
		( <_cor114> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','analysis'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'analyze_callgraph'/2 =
    %% Line 199
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Callgraph,State = {'analysis_state',Codeserver,_cor22,_cor23,%% Line 200
									DocPlt,_cor24,_cor25,%% Line 202
											     Parent,_cor26,_cor27,_cor28,%% Line 201
															 TimingServer,%% Line 203
																      Solvers}> when 'true' ->
	      let <Plt> =
		  %% Line 204
		  call 'dialyzer_plt':'insert_callbacks'
		      (_cor26, Codeserver)
	      in  let <NewPlt,NewDocPlt> =
		      %% Line 206
		      case _cor22 of
			%% Line 207
			<'plt_build'> when 'true' ->
			    let <NewPlt0> =
				%% Line 209
				call 'dialyzer_succ_typings':'analyze_callgraph'
				    (Callgraph, Plt, Codeserver, %% Line 210
								 TimingServer, %% Line 210
									       Solvers, %% Line 210
											Parent)
			    in  %% Line 211
				<NewPlt0,DocPlt>
			%% Line 212
			<'succ_typings'> when 'true' ->
			    %% Line 214
			    case %% Line 215
				 call 'dialyzer_succ_typings':'get_warnings'
				     (Callgraph, Plt, DocPlt, Codeserver, _cor25, %% Line 216
										  TimingServer, %% Line 216
												Solvers, %% Line 216
													 Parent) of
			      <{Warnings,NewPlt0,NewDocPlt0}> when 'true' ->
				  do  %% Line 217
				      apply 'send_warnings'/2
					  (Parent, Warnings)
				      %% Line 218
				      <NewPlt0,NewDocPlt0>
			      ( <_cor11> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor11})
				-| ['compiler_generated'] )
			    end
			( <_cor14> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor14})
			  -| ['compiler_generated'] )
		      end
		  in  do  %% Line 220
			  call 'dialyzer_callgraph':'delete'
			      (Callgraph)
			  let <_cor18> =
			      %% Line 221
			      call 'erlang':'setelement'
				  (9, State, NewPlt)
			  in  %% Line 221
			      call 'erlang':'setelement'
				  (5, _cor18, NewDocPlt)
	  ( <_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20})
		  -| [{'function_name',{'analyze_callgraph',2}}] )
	    -| ['compiler_generated'] )
	end
'make_compile_init'/2 =
    %% Line 236
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'analysis_state',Codeserver,_cor14,%% Line 237
					       Defs,_cor15,%% Line 238
							   Dirs,_cor16,_cor17,_cor18,%% Line 240
										     StartFrom,%% Line 239
											       UseContracts,_cor19,_cor20},%% Line 240
															   Callgraph> when 'true' ->
	      let <_cor11> =
		  %% Line 243
		  ( letrec
			'lc$^1'/1 =
			    fun (_cor9) ->
				case _cor9 of
				  <[{Macro,Val}|_cor8]> when 'true' ->
				      let <_cor10> =
					  apply 'lc$^1'/1
					      (_cor8)
				      in  ( [{'d',Macro,Val}|_cor10]
					    -| ['compiler_generated'] )
				  ( <[_cor7|_cor8]> when 'true' ->
					apply 'lc$^1'/1
					    (_cor8)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor9> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor9})
					  -| [{'function_name',{'lc$^1',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^1'/1
			    (Defs)
		    -| ['list_comprehension'] )
	      in  let <_cor6> =
		      %% Line 244
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor4) ->
				    case _cor4 of
				      <[D|_cor3]> when 'true' ->
					  let <_cor5> =
					      apply 'lc$^0'/1
						  (_cor3)
					  in  ( [{'i',D}|_cor5]
						-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor4> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor4})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(Dirs)
			-| ['list_comprehension'] )
		  in  %% Line 241
		      {'compile_init',Callgraph,%% Line 242
						Codeserver,_cor11,_cor6,%% Line 246
									StartFrom,%% Line 245
										  UseContracts}
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'make_compile_init',2}}] )
	    -| ['compiler_generated'] )
	end
'compile_and_store'/2 =
    %% Line 248
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Files,State = {'analysis_state',CServer,_cor38,_cor39,_cor40,_cor41,_cor42,%% Line 250
										      Parent,_cor43,_cor44,_cor45,%% Line 249
														  Timing,_cor46}> when 'true' ->
	      do  %% Line 251
		  apply 'send_log'/2
		      (Parent, [82|[101|[97|[100|[105|[110|[103|[32|[102|[105|[108|[101|[115|[32|[97|[110|[100|[32|[99|[111|[109|[112|[117|[116|[105|[110|[103|[32|[99|[97|[108|[108|[103|[114|[97|[112|[104|[46|[46|[46|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
		  %% Line 252
		  case call 'erlang':'statistics'
			   ('wall_clock') of
		    <{T1,_cor47}> when 'true' ->
			let <Callgraph> =
			    %% Line 253
			    call 'dialyzer_callgraph':'new'
				()
			in  let <CompileInit> =
				%% Line 254
				apply 'make_compile_init'/2
				    (State, Callgraph)
			    in  do  %% Line 256
				    call 'dialyzer_timing':'start_stamp'
					(Timing, [99|[111|[109|[112|[105|[108|[101]]]]]]])
				    let <_X_C1> =
					%% Line 257
					call 'dialyzer_coordinator':'parallel_job'
					    ('compile', Files, %% Line 258
							       CompileInit, %% Line 258
									    Timing)
				    in  do  %% Line 258
					    call 'dialyzer_timing':'end_stamp'
						(Timing)
					    %% Line 255
					    case %% Line 256
						 _X_C1 of
					      <{{Failed,NoWarn,Modules},NextLabel}> when 'true' ->
						  let <CServer2> =
						      %% Line 259
						      call 'dialyzer_codeserver':'set_next_core_label'
							  (NextLabel, CServer)
						  in  do  %% Line 260
							  case <> of
							    %% Line 261
							    <>
								when call 'erlang':'=:='
								      (Failed,
								       []) ->
								let <_cor16> =
								    %% Line 263
								    ( fun (_cor13,_cor12) ->
									  let <_cor9> =
									      %% Line 264
									      call 'filename':'split'
										  (_cor13)
									  in  let <ModFile> =
										  %% Line 264
										  call 'lists':'last'
										      (_cor9)
									      in  let <Mod> =
										      %% Line 265
										      call 'filename':'basename'
											  (ModFile, [46|[98|[101|[97|[109]]]]])
										  in  %% Line 266
										      call 'dict':'append'
											  (Mod, _cor13, _cor12)
								      -| [{'id',{0,0,'-compile_and_store/2-fun-0-'}}] )
								in  let <_cor8> =
									%% Line 268
									call 'dict':'new'
									    ()
								    in  let <ModDict> =
									    %% Line 263
									    call 'lists':'foldl'
										(_cor16, _cor8, %% Line 268
												Files)
									in  %% Line 269
									    apply 'check_for_duplicate_modules'/1
										(ModDict)
							    %% Line 270
							    <> when 'true' ->
								let <_cor22> =
								    %% Line 272
								    ( letrec
									  'lc$^0'/1 =
									      fun (_cor20) ->
										  case _cor20 of
										    <[{_X_Filename,Reason}|_cor19]> when 'true' ->
											let <_cor21> =
											    apply 'lc$^0'/1
												(_cor19)
											in  ( [Reason|_cor21]
											      -| ['compiler_generated'] )
										    ( <[_cor18|_cor19]> when 'true' ->
											  apply 'lc$^0'/1
											      (_cor19)
										      -| ['compiler_generated'] )
										    <[]> when 'true' ->
											[]
										    ( <_cor20> when 'true' ->
											  ( primop 'match_fail'
												({'function_clause',_cor20})
											    -| [{'function_name',{'lc$^0',1}}] )
										      -| ['compiler_generated'] )
										  end
								      in  apply 'lc$^0'/1
									      (Failed)
								      -| ['list_comprehension'] )
								in  let <Msg> =
									%% Line 271
									call 'io_lib':'format'
									    ([67|[111|[117|[108|[100|[32|[110|[111|[116|[32|[115|[99|[97|[110|[32|[116|[104|[101|[32|[102|[111|[108|[108|[111|[119|[105|[110|[103|[32|[102|[105|[108|[101|[40|[115|[41|[58|[126|[110|[126|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 272
																																							 [_cor22|[]])
								    in  %% Line 273
									call 'erlang':'exit'
									    ({'error',Msg})
							  end
							  %% Line 275
							  case call 'erlang':'statistics'
								   ('wall_clock') of
							    <{T2,_cor48}> when 'true' ->
								let <_cor26> =
								    %% Line 276
								    call 'erlang':'-'
									(T2, T1)
								in  let <_cor27> =
									%% Line 276
									call 'erlang':'/'
									    (_cor26, 1000)
								    in  let <Msg1> =
									    %% Line 276
									    call 'io_lib':'format'
										([100|[111|[110|[101|[32|[105|[110|[32|[126|[46|[50|[102|[32|[115|[101|[99|[115|[10|[82|[101|[109|[111|[118|[105|[110|[103|[32|[101|[100|[103|[101|[115|[46|[46|[46|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor27|[]])
									in  do  %% Line 277
										apply 'send_log'/2
										    (Parent, Msg1)
										do  %% Line 279
										    call 'dialyzer_timing':'start_stamp'
											(Timing, [99|[108|[101|[97|[110]]]]])
										    let <_X_C2> =
											%% Line 280
											apply 'cleanup_callgraph'/4
											    (State, CServer2, Callgraph, Modules)
										    in  do  %% Line 280
											    call 'dialyzer_timing':'end_stamp'
												(Timing)
											    %% Line 278
											    case %% Line 279
												 _X_C2 of
											      <_cor49>
												  when call 'erlang':'=:='
													(%% Line 279
													 _X_C2,
													 Callgraph) ->
												  %% Line 281
												  case call 'erlang':'statistics'
													   ('wall_clock') of
												    <{T3,_cor50}> when 'true' ->
													let <_cor32> =
													    %% Line 282
													    call 'erlang':'-'
														(T3, T2)
													in  let <_cor33> =
														%% Line 282
														call 'erlang':'/'
														    (_cor32, 1000)
													    in  let <Msg2> =
														    %% Line 282
														    call 'io_lib':'format'
															([100|[111|[110|[101|[32|[105|[110|[32|[126|[46|[50|[102|[32|[115|[101|[99|[115|[10]]]]]]]]]]]]]]]]]], [_cor33|[]])
														in  do  %% Line 283
															apply 'send_log'/2
															    (Parent, Msg2)
															let <_cor35> =
															    %% Line 284
															    call 'sets':'from_list'
																(NoWarn)
															in  %% Line 284
															    {Callgraph,_cor35,CServer2}
												    ( <_cor31> when 'true' ->
													  primop 'match_fail'
													      ({'badmatch',_cor31})
												      -| ['compiler_generated'] )
												  end
											      ( <_cor30> when 'true' ->
												    primop 'match_fail'
													({'badmatch',_cor30})
												-| ['compiler_generated'] )
											    end
							    ( <_cor25> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_cor25})
							      -| ['compiler_generated'] )
							  end
					      ( <_cor6> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor6})
						-| ['compiler_generated'] )
					    end
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor37,_cor36> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor37,_cor36})
		  -| [{'function_name',{'compile_and_store',2}}] )
	    -| ['compiler_generated'] )
	end
'compile_init_result'/0 =
    %% Line 299
    fun () ->
	{[],[],[]}
'add_to_result'/4 =
    %% Line 304
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <File,NewData,{Failed,NoWarn,Mods},InitData> when 'true' ->
	      %% Line 305
	      case NewData of
		%% Line 306
		<{'error',Reason}> when 'true' ->
		    %% Line 307
		    {[{File,Reason}|Failed],NoWarn,Mods}
		%% Line 308
		<{'ok',V,E,NewNoWarn,Mod}> when 'true' ->
		    %% Line 309
		    ( case InitData of
			( <( {'compile_init',_rec30,_cor13,_cor14,_cor15,_cor16,_cor17}
			     -| ['compiler_generated'] )> when 'true' ->
			      do  %% Line 310
				  call 'dialyzer_callgraph':'add_edges'
				      (E, V, _rec30)
				  let <_cor7> =
				      %% Line 311
				      call 'erlang':'++'
					  (NewNoWarn, NoWarn)
				  in  %% Line 311
				      {Failed,_cor7,[Mod|Mods]}
			  -| ['compiler_generated'] )
			( <_cor18> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','compile_init'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'add_to_result',4}}] )
	    -| ['compiler_generated'] )
	end
'start_compilation'/2 =
    %% Line 317
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <File,%% Line 318
		{'compile_init',Callgraph,Codeserver,%% Line 319
						     Defines,%% Line 319
							     IncludeD,%% Line 321
								      StartFrom,%% Line 320
										UseContracts}> when 'true' ->
	      %% Line 322
	      case StartFrom of
		%% Line 323
		<'src_code'> when 'true' ->
		    %% Line 324
		    apply 'compile_src'/6
			(File, IncludeD, Defines, Callgraph, Codeserver, UseContracts)
		%% Line 325
		<'byte_code'> when 'true' ->
		    %% Line 326
		    apply 'compile_byte'/4
			(File, Callgraph, Codeserver, UseContracts)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'start_compilation',2}}] )
	    -| ['compiler_generated'] )
	end
'cleanup_callgraph'/4 =
    %% Line 329
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'analysis_state',%% Line 330
			     CodeServer,_cor42,_cor43,_cor44,_cor45,_cor46,Parent,InitPlt,_cor47,_cor48,_cor49,_cor50},%% Line 332
														       CServer,%% Line 332
															       Callgraph,%% Line 332
																	 Modules> when 'true' ->
	      let <ModuleDeps> =
		  %% Line 333
		  call 'dialyzer_callgraph':'module_deps'
		      (Callgraph)
	      in  do  %% Line 334
		      apply 'send_mod_deps'/2
			  (Parent, ModuleDeps)
		      %% Line 335
		      case call 'dialyzer_callgraph':'remove_external'
			       (Callgraph) of
			<{Callgraph1,ExtCalls}> when 'true' ->
			    let <_cor12> =
				%% Line 336
				( letrec
				      'lc$^0'/1 =
					  fun (_cor9) ->
					      case _cor9 of
						<[Call = {_X_From,To}|_cor7]> when 'true' ->
						    %% Line 337
						    ( case call 'dialyzer_plt':'contains_mfa'
							       (InitPlt, To) of
							<'false'> when 'true' ->
							    let <_cor10> =
								apply 'lc$^0'/1
								    (_cor7)
							    in  ( [Call|_cor10]
								  -| ['compiler_generated'] )
							( <'true'> when 'true' ->
							      apply 'lc$^0'/1
								  (_cor7)
							  -| ['compiler_generated'] )
							( <_cor_variable> when 'true' ->
							      call 'erlang':'error'
								  ('badarg')
							  -| ['compiler_generated'] )
						      end
						      -| ['list_comprehension'] )
						( <[_cor6|_cor7]> when 'true' ->
						      apply 'lc$^0'/1
							  (_cor7)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor9> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor9})
							-| [{'function_name',{'lc$^0',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^0'/1
					  (ExtCalls)
				  -| ['list_comprehension'] )
			    in  let <_cor20> =
				    %% Line 339
				    case <> of
				      <>
					  when call 'erlang':'=:='
						(_cor12,
						 []) ->
					  {[],[]}
				      %% Line 340
				      <> when 'true' ->
					  let <ModuleSet> =
					      %% Line 341
					      call 'sets':'from_list'
						  (Modules)
					  in  let <PltModuleSet> =
						  %% Line 342
						  call 'dialyzer_plt':'all_modules'
						      (InitPlt)
					      in  let <AllModules> =
						      %% Line 343
						      call 'sets':'union'
							  (ModuleSet, PltModuleSet)
						  in  let <Pred> =
							  %% Line 344
							  ( fun (_cor17) ->
								case _cor17 of
								  <{_X_From,{M,_X_F,_X_A}}> when 'true' ->
								      call 'sets':'is_element'
									  (M, AllModules)
								  ( <_cor18> when 'true' ->
									( primop 'match_fail'
									      ({'function_clause',_cor18})
									  -| [{'function_name',{'-cleanup_callgraph/4-fun-0-',1}}] )
								    -| ['compiler_generated'] )
								end
							    -| [{'id',{0,0,'-cleanup_callgraph/4-fun-0-'}}] )
						      in  %% Line 345
							  call 'lists':'partition'
							      (Pred, _cor12)
				    end
				in  %% Line 338
				    case _cor20 of
				      <{BadCalls1,RealExtCalls}> when 'true' ->
					  let <NonLocalCalls> =
					      %% Line 347
					      call 'dialyzer_callgraph':'non_local_calls'
						  (Callgraph1)
					  in  let <_cor29> =
						  %% Line 348
						  ( letrec
							'lc$^1'/1 =
							    fun (_cor26) ->
								case _cor26 of
								  <[Call = {_X_From,To}|_cor24]> when 'true' ->
								      %% Line 349
								      ( case call 'dialyzer_codeserver':'is_exported'
										 (To, CServer) of
									  <'false'> when 'true' ->
									      let <_cor27> =
										  apply 'lc$^1'/1
										      (_cor24)
									      in  ( [Call|_cor27]
										    -| ['compiler_generated'] )
									  ( <'true'> when 'true' ->
										apply 'lc$^1'/1
										    (_cor24)
									    -| ['compiler_generated'] )
									  ( <_cor_variable> when 'true' ->
										call 'erlang':'error'
										    ('badarg')
									    -| ['compiler_generated'] )
									end
									-| ['list_comprehension'] )
								  ( <[_cor23|_cor24]> when 'true' ->
									apply 'lc$^1'/1
									    (_cor24)
								    -| ['compiler_generated'] )
								  <[]> when 'true' ->
								      []
								  ( <_cor26> when 'true' ->
									( primop 'match_fail'
									      ({'function_clause',_cor26})
									  -| [{'function_name',{'lc$^1',1}}] )
								    -| ['compiler_generated'] )
								end
						    in  apply 'lc$^1'/1
							    (NonLocalCalls)
						    -| ['list_comprehension'] )
					      in  do  %% Line 350
						      case call 'erlang':'++'
							       (BadCalls1, _cor29) of
							%% Line 351
							<[]> when 'true' ->
							    'ok'
							%% Line 352
							<BadCalls> when 'true' ->
							    apply 'send_bad_calls'/3
								(Parent, BadCalls, CodeServer)
						      end
						      do  %% Line 354
							  case <> of
							    <>
								when call 'erlang':'=:='
								      (RealExtCalls,
								       []) ->
								'ok'
							    %% Line 355
							    <> when 'true' ->
								let <_cor36> =
								    %% Line 356
								    ( letrec
									  'lc$^2'/1 =
									      fun (_cor34) ->
										  case _cor34 of
										    <[{_X_From,To}|_cor33]> when 'true' ->
											let <_cor35> =
											    apply 'lc$^2'/1
												(_cor33)
											in  ( [To|_cor35]
											      -| ['compiler_generated'] )
										    ( <[_cor32|_cor33]> when 'true' ->
											  apply 'lc$^2'/1
											      (_cor33)
										      -| ['compiler_generated'] )
										    <[]> when 'true' ->
											[]
										    ( <_cor34> when 'true' ->
											  ( primop 'match_fail'
												({'function_clause',_cor34})
											    -| [{'function_name',{'lc$^2',1}}] )
										      -| ['compiler_generated'] )
										  end
								      in  apply 'lc$^2'/1
									      (RealExtCalls)
								      -| ['list_comprehension'] )
								in  let <_cor37> =
									%% Line 356
									call 'lists':'usort'
									    (_cor36)
								    in  %% Line 356
									apply 'send_ext_calls'/2
									    (Parent, _cor37)
							  end
							  %% Line 358
							  Callgraph1
				      ( <_cor21> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor21})
					-| ['compiler_generated'] )
				    end
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor5})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor41,_cor40,_cor39,_cor38> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor41,_cor40,_cor39,_cor38})
		  -| [{'function_name',{'cleanup_callgraph',4}}] )
	    -| ['compiler_generated'] )
	end
'compile_src'/6 =
    %% Line 360
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 361
	    call 'filename':'dirname'
		(_cor5)
	in  let <DefaultIncludes> =
		%% Line 361
		apply 'default_includes'/1
		    (_cor6)
	    in  let <SrcCompOpts> =
		    %% Line 362
		    call 'dialyzer_utils':'src_compiler_opts'
			()
		in  let <_cor9> =
			%% Line 363
			call 'erlang':'++'
			    (_cor3, DefaultIncludes)
		    in  let <_cor10> =
			    %% Line 363
			    call 'erlang':'++'
				(_cor4, _cor9)
			in  let <CompOpts> =
				%% Line 363
				call 'erlang':'++'
				    (SrcCompOpts, _cor10)
			    in  %% Line 364
				case call 'dialyzer_utils':'get_abstract_code_from_src'
					 (_cor5, CompOpts) of
				  %% Line 365
				  <Error = {'error',_X_Msg}> when 'true' ->
				      Error
				  %% Line 366
				  <{'ok',AbstrCode}> when 'true' ->
				      %% Line 367
				      apply 'compile_common'/6
					  (_cor5, AbstrCode, CompOpts, _cor2, _cor1, _cor0)
				  ( <_cor12> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor12})
				    -| ['compiler_generated'] )
				end
'compile_byte'/4 =
    %% Line 370
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 371
	case call 'dialyzer_utils':'get_abstract_code_from_beam'
		 (_cor3) of
	  %% Line 372
	  <'error'> when 'true' ->
	      let <_cor5> =
		  %% Line 373
		  call 'erlang':'++'
		      (_cor3, [10|[32|[32|[82|[101|[99|[111|[109|[112|[105|[108|[101|[32|[119|[105|[116|[104|[32|[43|[100|[101|[98|[117|[103|[95|[105|[110|[102|[111|[32|[111|[114|[32|[97|[110|[97|[108|[121|[122|[101|[32|[115|[116|[97|[114|[116|[105|[110|[103|[32|[102|[114|[111|[109|[32|[115|[111|[117|[114|[99|[101|[32|[99|[111|[100|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	      in  let <_cor6> =
		      %% Line 373
		      call 'erlang':'++'
			  ([32|[32|[67|[111|[117|[108|[100|[32|[110|[111|[116|[32|[103|[101|[116|[32|[97|[98|[115|[116|[114|[97|[99|[116|[32|[99|[111|[100|[101|[32|[102|[111|[114|[58|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], _cor5)
		  in  %% Line 373
		      {'error',_cor6}
	  %% Line 375
	  <{'ok',AbstrCode}> when 'true' ->
	      %% Line 376
	      apply 'compile_common'/6
		  (_cor3, AbstrCode, [], _cor2, _cor1, _cor0)
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'compile_common'/6 =
    %% Line 379
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 380
	case call 'dialyzer_utils':'get_core_from_abstract_code'
		 (_cor4, _cor3) of
	  %% Line 381
	  <'error'> when 'true' ->
	      let <_cor6> =
		  call 'erlang':'++'
		      ([32|[32|[67|[111|[117|[108|[100|[32|[110|[111|[116|[32|[103|[101|[116|[32|[99|[111|[114|[101|[32|[69|[114|[108|[97|[110|[103|[32|[99|[111|[100|[101|[32|[102|[111|[114|[58|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], _cor5)
	      in  {'error',_cor6}
	  %% Line 382
	  <{'ok',Core}> when 'true' ->
	      let <_cor7> =
		  %% Line 383
		  call 'cerl':'module_name'
		      (Core)
	      in  let <Mod> =
		      %% Line 383
		      call 'cerl':'concrete'
			  (_cor7)
		  in  let <NoWarn> =
			  %% Line 384
			  apply 'abs_get_nowarn'/2
			      (_cor4, Mod)
		      in  %% Line 385
			  case call 'dialyzer_utils':'get_record_and_type_info'
				   (_cor4) of
			    %% Line 386
			    <Error = {'error',_cor22}> when 'true' ->
				Error
			    %% Line 387
			    <{'ok',RecInfo}> when 'true' ->
				let <CServer1> =
				    %% Line 389
				    call 'dialyzer_codeserver':'store_temp_records'
					(Mod, RecInfo, _cor1)
				in  %% Line 390
				    case _cor0 of
				      %% Line 391
				      <'true'> when 'true' ->
					  %% Line 392
					  case call 'dialyzer_utils':'get_spec_info'
						   (Mod, _cor4, RecInfo) of
					    %% Line 393
					    <Error = {'error',_cor23}> when 'true' ->
						Error
					    %% Line 394
					    <{'ok',SpecInfo,CallbackInfo}> when 'true' ->
						let <CServer2> =
						    %% Line 396
						    call 'dialyzer_codeserver':'store_temp_contracts'
							(Mod, SpecInfo, %% Line 397
									CallbackInfo, %% Line 398
										      CServer1)
						in  %% Line 399
						    apply 'store_core'/5
							(Mod, Core, NoWarn, _cor2, CServer2)
					    ( <_cor12> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor12})
					      -| ['compiler_generated'] )
					  end
				      %% Line 401
				      <'false'> when 'true' ->
					  %% Line 402
					  apply 'store_core'/5
					      (Mod, Core, NoWarn, _cor2, CServer1)
				      ( <_cor13> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor13})
					-| ['compiler_generated'] )
				    end
			    ( <_cor14> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor14})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor15> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor15})
	    -| ['compiler_generated'] )
	end
'store_core'/5 =
    %% Line 407
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Exp> =
	    %% Line 408
	    apply 'get_exports_from_core'/1
		(_cor3)
	in  let <ExpTypes> =
		%% Line 409
		apply 'get_exported_types_from_core'/1
		    (_cor3)
	    in  %% Line 410
		case call 'dialyzer_codeserver':'insert_exports'
			 (Exp, _cor0) of
		  <_cor16>
		      when call 'erlang':'=:='
			    (_cor16,
			     _cor0) ->
		      %% Line 411
		      case call 'dialyzer_codeserver':'insert_temp_exported_types'
			       (ExpTypes, _cor0) of
			<_cor17>
			    when call 'erlang':'=:='
				  (_cor17,
				   _cor0) ->
			    let <CoreTree> =
				%% Line 412
				call 'cerl':'from_records'
				    (_cor3)
			    in  let <_cor10> =
				    %% Line 413
				    call 'cerl_trees':'size'
					(CoreTree)
				in  %% Line 413
				    {'ok',_cor10,{_cor4,CoreTree,_cor2,_cor1,_cor0}}
			( <_cor8> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor8})
			  -| ['compiler_generated'] )
		      end
		  ( <_cor7> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor7})
		    -| ['compiler_generated'] )
		end
'continue_compilation'/2 =
    %% Line 417
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <NextLabel,{Mod,CoreTree,NoWarn,Callgraph,CServer}> when 'true' ->
	      %% Line 418
	      case call 'cerl_trees':'label'
		       (CoreTree, NextLabel) of
		<{LabeledTree,_X_NewNextLabel}> when 'true' ->
		    let <LabeledCore> =
			%% Line 419
			call 'cerl':'to_records'
			    (LabeledTree)
		    in  %% Line 420
			apply 'store_code_and_build_callgraph'/5
			    (Mod, LabeledCore, Callgraph, NoWarn, CServer)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'continue_compilation',2}}] )
	    -| ['compiler_generated'] )
	end
'abs_get_nowarn'/2 =
    %% Line 422
    fun (_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 423
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[{'attribute',_cor24,'compile',C}|_cor3]> when 'true' ->
				let <_cor5> =
				    apply 'lc$^0'/1
					(_cor3)
				in  ( [C|_cor5]
				      -| ['compiler_generated'] )
			    ( <[_cor2|_cor3]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor3)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor1)
	      -| ['list_comprehension'] )
	in  let <Opts> =
		%% Line 423
		call 'lists':'flatten'
		    (_cor6)
	    in  %% Line 426
		case call 'erl_lint':'bool_option'
			 ('warn_unused_function', 'nowarn_unused_function', 'true', Opts) of
		  %% Line 427
		  <'false'> when 'true' ->
		      %% Line 428
		      ( letrec
			    'lc$^1'/1 =
				fun (_cor11) ->
				    case _cor11 of
				      <[{'function',_cor25,F,A,_cor26}|_cor10]> when 'true' ->
					  let <_cor12> =
					      apply 'lc$^1'/1
						  (_cor10)
					  in  ( [{_cor0,F,A}|_cor12]
						-| ['compiler_generated'] )
				      ( <[_cor9|_cor10]> when 'true' ->
					    apply 'lc$^1'/1
						(_cor10)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor11> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor11})
					      -| [{'function_name',{'lc$^1',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^1'/1
				(_cor1)
			-| ['list_comprehension'] )
		  %% Line 429
		  <'true'> when 'true' ->
		      %% Line 430
		      ( letrec
			    'lc$^2'/1 =
				fun (_cor18) ->
				    case _cor18 of
				      <[{'nowarn_unused_function',FAs}|_cor14]> when 'true' ->
					  ( letrec
						'lc$^3'/1 =
						    fun (_cor19) ->
							case _cor19 of
							  <[%% Line 431
							    {F,A}|_cor16]> when 'true' ->
							      let <_cor20> =
								  %% Line 431
								  apply 'lc$^3'/1
								      (_cor16)
							      in  ( [{_cor0,F,A}|_cor20]
								    -| ['compiler_generated'] )
							  ( <[_cor15|_cor16]> when 'true' ->
								%% Line 431
								apply 'lc$^3'/1
								    (_cor16)
							    -| ['compiler_generated'] )
							  <[]> when 'true' ->
							      apply 'lc$^2'/1
								  (_cor14)
							  ( <_cor19> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor19})
								  -| [{'function_name',{'lc$^3',1}}] )
							    -| ['compiler_generated'] )
							end
					    in  let <_cor17> =
						    %% Line 431
						    call 'lists':'flatten'
							([FAs|[]])
						in  apply 'lc$^3'/1
							(_cor17)
					    -| ['list_comprehension'] )
				      ( <[_cor13|_cor14]> when 'true' ->
					    apply 'lc$^2'/1
						(_cor14)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor18> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor18})
					      -| [{'function_name',{'lc$^2',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^2'/1
				(Opts)
			-| ['list_comprehension'] )
		  ( <_cor21> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor21})
		    -| ['compiler_generated'] )
		end
'get_exported_types_from_core'/1 =
    %% Line 434
    fun (_cor0) ->
	let <Attrs> =
	    %% Line 435
	    call 'cerl':'module_attrs'
		(_cor0)
	in  let <_cor11> =
		%% Line 436
		( letrec
		      'lc$^0'/1 =
			  fun (_cor5) ->
			      case _cor5 of
				<[{L1,L2}|_cor3]> when 'true' ->
				    ( case call 'cerl':'is_literal'
					       (L1) of
					<'true'> when 'true' ->
					    %% Line 437
					    ( case call 'cerl':'is_literal'
						       (L2) of
						<'true'> when 'true' ->
						    let <_cor4> =
							%% Line 438
							call 'cerl':'concrete'
							    (L1)
						    in  %% Line 438
							( case <> of
							    <>
								when call 'erlang':'=:='
								      (_cor4,
								       'export_type') ->
								let <_cor6> =
								    call 'cerl':'concrete'
									(L2)
								in  let <_cor7> =
									apply 'lc$^0'/1
									    (_cor3)
								    in  ( [_cor6|_cor7]
									  -| ['compiler_generated'] )
							    ( <> when 'true' ->
								  apply 'lc$^0'/1
								      (_cor3)
							      -| ['compiler_generated'] )
							  end
							  -| ['list_comprehension'] )
						( <'false'> when 'true' ->
						      apply 'lc$^0'/1
							  (_cor3)
						  -| ['compiler_generated'] )
						( <_cor9> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor9})
						  -| ['compiler_generated'] )
					      end
					      -| ['list_comprehension'] )
					( <'false'> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor3)
					  -| ['compiler_generated'] )
					( <_cor10> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor10})
					  -| ['compiler_generated'] )
				      end
				      -| ['list_comprehension'] )
				( <[_cor2|_cor3]> when 'true' ->
				      apply 'lc$^0'/1
					  (_cor3)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor5> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor5})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (Attrs)
		  -| ['list_comprehension'] )
	    in  let <ExpTypes2> =
		    %% Line 439
		    call 'lists':'flatten'
			(_cor11)
		in  let <_cor14> =
			%% Line 440
			call 'cerl':'module_name'
			    (_cor0)
		    in  let <M> =
			    %% Line 440
			    call 'cerl':'atom_val'
				(_cor14)
			in  let <_cor20> =
				%% Line 441
				( letrec
				      'lc$^1'/1 =
					  fun (_cor18) ->
					      case _cor18 of
						<[{F,A}|_cor17]> when 'true' ->
						    let <_cor19> =
							apply 'lc$^1'/1
							    (_cor17)
						    in  ( [{M,F,A}|_cor19]
							  -| ['compiler_generated'] )
						( <[_cor16|_cor17]> when 'true' ->
						      apply 'lc$^1'/1
							  (_cor17)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor18> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor18})
							-| [{'function_name',{'lc$^1',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^1'/1
					  (ExpTypes2)
				  -| ['list_comprehension'] )
			    in  %% Line 441
				call 'sets':'from_list'
				    (_cor20)
'get_exports_from_core'/1 =
    %% Line 443
    fun (_cor0) ->
	let <Tree> =
	    %% Line 444
	    call 'cerl':'from_records'
		(_cor0)
	in  let <Exports1> =
		%% Line 445
		call 'cerl':'module_exports'
		    (Tree)
	    in  let <_cor8> =
		    %% Line 446
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor5) ->
				  case _cor5 of
				    <[V|_cor4]> when 'true' ->
					let <_cor6> =
					    call 'cerl':'var_name'
						(V)
					in  let <_cor7> =
						apply 'lc$^0'/1
						    (_cor4)
					    in  ( [_cor6|_cor7]
						  -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor5> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor5})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lc$^0'/1
			      (Exports1)
		      -| ['list_comprehension'] )
		in  let <_cor10> =
			%% Line 447
			call 'cerl':'module_name'
			    (Tree)
		    in  let <M> =
			    %% Line 447
			    call 'cerl':'atom_val'
				(_cor10)
			in  %% Line 448
			    ( letrec
				  'lc$^1'/1 =
				      fun (_cor14) ->
					  case _cor14 of
					    <[{F,A}|_cor13]> when 'true' ->
						let <_cor15> =
						    apply 'lc$^1'/1
							(_cor13)
						in  ( [{M,F,A}|_cor15]
						      -| ['compiler_generated'] )
					    ( <[_cor12|_cor13]> when 'true' ->
						  apply 'lc$^1'/1
						      (_cor13)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor14> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor14})
						    -| [{'function_name',{'lc$^1',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^1'/1
				      (_cor8)
			      -| ['list_comprehension'] )
'store_code_and_build_callgraph'/5 =
    %% Line 450
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <CoreTree> =
	    %% Line 451
	    call 'cerl':'from_records'
		(_cor3)
	in  %% Line 452
	    case call 'dialyzer_callgraph':'scan_core_tree'
		     (CoreTree, _cor2) of
	      <{Vertices,Edges}> when 'true' ->
		  %% Line 453
		  case call 'dialyzer_codeserver':'insert'
			   (_cor4, CoreTree, _cor0) of
		    <_cor13>
			when call 'erlang':'=:='
			      (_cor13,
			       _cor0) ->
			%% Line 454
			{'ok',Vertices,Edges,_cor1,_cor4}
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor7})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor6})
		-| ['compiler_generated'] )
	    end
'expand_files'/1 =
    %% Line 460
    fun (_cor0) ->
	case _cor0 of
	  <Analysis = {'analysis',_cor13,_cor14,_cor15,_cor16,Files,_cor17,StartFrom,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25}> when 'true' ->
	      let <_cor2> =
		  %% Line 461
		  case StartFrom of
		    %% Line 462
		    <'byte_code'> when 'true' ->
			[46|[98|[101|[97|[109]]]]]
		    %% Line 463
		    <'src_code'> when 'true' ->
			[46|[101|[114|[108]]]]
		    ( <_cor1> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor1})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 465
		  case apply 'expand_files'/3
			   (Files, _cor2, []) of
		    %% Line 466
		    <[]> when 'true' ->
			let <_cor5> =
			    %% Line 468
			    case StartFrom of
			      %% Line 469
			      <'byte_code'> when 'true' ->
				  [32|[40|[110|[111|[32|[45|[45|[115|[114|[99|[32|[115|[112|[101|[99|[105|[102|[105|[101|[100|[63|[41]]]]]]]]]]]]]]]]]]]]]]
			      %% Line 470
			      <'src_code'> when 'true' ->
				  []
			      ( <_cor4> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor4})
				-| ['compiler_generated'] )
			    end
			in  let <_cor6> =
				%% Line 467
				call 'erlang':'++'
				    ([32|[102|[105|[108|[101|[115|[32|[116|[111|[32|[97|[110|[97|[108|[121|[122|[101]]]]]]]]]]]]]]]]], _cor5)
			    in  let <_cor7> =
				    %% Line 467
				    call 'erlang':'++'
					(_cor2, _cor6)
				in  let <Msg> =
					%% Line 467
					[78|[111|[32|_cor7]]]
				    in  %% Line 472
					call 'erlang':'exit'
					    ({'error',Msg})
		    %% Line 473
		    <NewFiles> when 'true' ->
			%% Line 474
			call 'erlang':'setelement'
			    (6, Analysis, NewFiles)
		  end
	  ( <_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12})
		  -| [{'function_name',{'expand_files',1}}] )
	    -| ['compiler_generated'] )
	end
'expand_files'/3 =
    %% Line 477
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[File|Left],Ext,FileAcc> when 'true' ->
	      %% Line 478
	      case call 'filelib':'is_dir'
		       (File) of
		%% Line 479
		<'true'> when 'true' ->
		    %% Line 480
		    case call 'file':'list_dir'
			     (File) of
		      <{'ok',List}> when 'true' ->
			  let <_cor11> =
			      %% Line 481
			      ( fun (_cor8,_cor7) ->
				    let <_cor4> =
					%% Line 482
					call 'filename':'extension'
					    (_cor8)
				    in  %% Line 482
					case <> of
					  %% Line 483
					  <>
					      when call 'erlang':'=:='
						    (_cor4,
						     Ext) ->
					      let <_cor5> =
						  call 'filename':'join'
						      (File, _cor8)
					      in  [_cor5|_cor7]
					  %% Line 484
					  <> when 'true' ->
					      _cor7
					end
				-| [{'id',{0,0,'-expand_files/3-fun-0-'}}] )
			  in  let <NewFiles> =
				  %% Line 481
				  call 'lists':'foldl'
				      (_cor11, %% Line 486
					       FileAcc, %% Line 486
							List)
			      in  %% Line 487
				  apply 'expand_files'/3
				      (Left, Ext, NewFiles)
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		%% Line 488
		<'false'> when 'true' ->
		    %% Line 489
		    apply 'expand_files'/3
			(Left, Ext, [File|FileAcc])
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 491
	  <[],_X_Ext,FileAcc> when 'true' ->
	      %% Line 492
	      FileAcc
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'expand_files',3}}] )
	    -| ['compiler_generated'] )
	end
'check_for_duplicate_modules'/1 =
    %% Line 494
    fun (_cor0) ->
	let <_cor5> =
	    %% Line 495
	    ( fun (_cor2,_cor1) ->
		  case <_cor2,_cor1> of
		    <_cor18,[_cor19|[]]> when 'true' ->
			'false'
		    %% Line 496
		    <_cor20,_X_Files> when 'true' ->
			'true'
		  end
	      -| [{'id',{0,0,'-check_for_duplicate_modules/1-fun-0-'}}] )
	in  let <Duplicates> =
		%% Line 495
		call 'dict':'filter'
		    (_cor5, _cor0)
	    in  let <_cor7> =
		    %% Line 498
		    call 'dict':'size'
			(Duplicates)
		in  %% Line 498
		    case <> of
		      %% Line 499
		      <>
			  when call 'erlang':'=:='
				(_cor7,
				 0) ->
			  %% Line 500
			  'ok'
		      %% Line 501
		      <> when 'true' ->
			  let <_cor13> =
			      %% Line 502
			      ( letrec
				    'lc$^0'/1 =
					fun (_cor11) ->
					    case _cor11 of
					      <[{_cor21,X}|_cor9]> when 'true' ->
						  let <_cor12> =
						      apply 'lc$^0'/1
							  (_cor9)
						  in  ( [X|_cor12]
							-| ['compiler_generated'] )
					      ( <[_cor8|_cor9]> when 'true' ->
						    apply 'lc$^0'/1
							(_cor9)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor11> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor11})
						      -| [{'function_name',{'lc$^0',1}}] )
						-| ['compiler_generated'] )
					    end
				in  let <_cor10> =
					call 'dict':'to_list'
					    (Duplicates)
				    in  apply 'lc$^0'/1
					    (_cor10)
				-| ['list_comprehension'] )
			  in  let <Msg> =
				  %% Line 503
				  call 'io_lib':'format'
				      ([68|[117|[112|[108|[105|[99|[97|[116|[101|[32|[109|[111|[100|[117|[108|[101|[115|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]], [_cor13|[]])
			      in  %% Line 504
				  call 'erlang':'exit'
				      ({'error',Msg})
		    end
'default_includes'/1 =
    %% Line 507
    fun (_cor0) ->
	%% Line 509
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[X|_cor3]> when 'true' ->
			    let <_cor5> =
				call 'filename':'join'
				    (_cor0, X)
			    in  let <_cor6> =
				    apply 'lc$^0'/1
					(_cor3)
				in  ( [{'i',_cor5}|_cor6]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  ([[46|[46]]|[[46|[46|[47|[105|[110|[99|[108]]]]]]]|[[46|[46|[47|[105|[110|[99]]]]]]|[[46|[46|[47|[105|[110|[99|[108|[117|[100|[101]]]]]]]]]]]]]])
	  -| ['list_comprehension'] )
'rcv_and_send_ext_types'/1 =
    %% Line 515
    fun (_cor0) ->
	let <Self> =
	    %% Line 516
	    call 'erlang':'self'
		()
	in  do  %% Line 517
		call 'erlang':'!'
		    (Self, {Self,'done'})
		%% Line 518
		case apply 'rcv_ext_types'/2
			 (Self, []) of
		  %% Line 519
		  <[]> when 'true' ->
		      'ok'
		  %% Line 520
		  <ExtTypes> when 'true' ->
		      do  %% Line 521
			  call 'erlang':'!'
			      (_cor0, {Self,'ext_types',ExtTypes})
			  %% Line 522
			  'ok'
		end
'rcv_ext_types'/2 =
    %% Line 525
    fun (_cor1,_cor0) ->
	%% Line 526
	receive
	  %% Line 527
	  <{_cor4,'ext_types',ExtType}>
	      when call 'erlang':'=:='
		    (_cor4,
		     _cor1) ->
	      %% Line 528
	      apply 'rcv_ext_types'/2
		  (_cor1, [ExtType|_cor0])
	  %% Line 529
	  <{_cor5,'done'}>
	      when call 'erlang':'=:='
		    (_cor5,
		     _cor1) ->
	      call 'lists':'usort'
		  (_cor0)
	after 'infinity' ->
	  'true'
'send_log'/2 =
    %% Line 532
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 533
	    call 'erlang':'self'
		()
	in  do  %% Line 533
		call 'erlang':'!'
		    (_cor1, {_cor2,'log',_cor0})
		%% Line 534
		'ok'
'send_warnings'/2 =
    %% Line 536
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Parent,[]> when 'true' ->
	      %% Line 537
	      'ok'
	  %% Line 538
	  <Parent,Warnings> when 'true' ->
	      let <_cor2> =
		  %% Line 539
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 539
		      call 'erlang':'!'
			  (Parent, {_cor2,'warnings',Warnings})
		      %% Line 540
		      'ok'
	end
'filter_warnings'/2 =
    %% Line 542
    fun (_cor1,_cor0) ->
	%% Line 543
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[TIW = {Tag,_X_Id,_X_Warning}|_cor3]> when 'true' ->
			    %% Line 544
			    ( case call 'ordsets':'is_element'
				       (Tag, _cor1) of
				<'true'> when 'true' ->
				    let <_cor5> =
					apply 'lc$^0'/1
					    (_cor3)
				    in  ( [TIW|_cor5]
					  -| ['compiler_generated'] )
				( <'false'> when 'true' ->
				      apply 'lc$^0'/1
					  (_cor3)
				  -| ['compiler_generated'] )
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor6})
				  -| ['compiler_generated'] )
			      end
			      -| ['list_comprehension'] )
			( <[_cor2|_cor3]> when 'true' ->
			      apply 'lc$^0'/1
				  (_cor3)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'send_analysis_done'/3 =
    %% Line 546
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 547
	    call 'erlang':'self'
		()
	in  do  %% Line 547
		call 'erlang':'!'
		    (_cor2, {_cor3,'done',_cor1,_cor0})
		%% Line 548
		'ok'
'send_ext_calls'/2 =
    %% Line 550
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 551
	    call 'erlang':'self'
		()
	in  do  %% Line 551
		call 'erlang':'!'
		    (_cor1, {_cor2,'ext_calls',_cor0})
		%% Line 552
		'ok'
'send_ext_types'/2 =
    %% Line 554
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 555
	    call 'erlang':'self'
		()
	in  do  %% Line 555
		call 'erlang':'!'
		    (_cor1, {_cor2,'ext_types',_cor0})
		%% Line 556
		'ok'
'send_unknown_behaviours'/2 =
    %% Line 558
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 559
	    call 'erlang':'self'
		()
	in  do  %% Line 559
		call 'erlang':'!'
		    (_cor1, {_cor2,'unknown_behaviours',_cor0})
		%% Line 560
		'ok'
'send_codeserver_plt'/3 =
    %% Line 562
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 563
	    call 'erlang':'self'
		()
	in  do  %% Line 563
		call 'erlang':'!'
		    (_cor2, {_cor3,'cserver',_cor1,_cor0})
		%% Line 564
		'ok'
'send_bad_calls'/3 =
    %% Line 566
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 567
	    apply 'format_bad_calls'/3
		(_cor1, _cor0, [])
	in  %% Line 567
	    apply 'send_warnings'/2
		(_cor2, _cor3)
'send_mod_deps'/2 =
    %% Line 569
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 570
	    call 'erlang':'self'
		()
	in  do  %% Line 570
		call 'erlang':'!'
		    (_cor1, {_cor2,'mod_deps',_cor0})
		%% Line 571
		'ok'
'format_bad_calls'/3 =
    %% Line 573
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{{_cor12,_cor13,_cor14},{_cor15,'module_info',A}}|Left],CodeServer,Acc>
	      when let <_cor3> =
		    %% Line 574
		    call 'erlang':'=:='
			(A, 0)
		in  let <_cor4> =
			%% Line 574
			call 'erlang':'=:='
			    (A, 1)
		    in  %% Line 574
			call 'erlang':'or'
			    (_cor3, _cor4) ->
	      %% Line 575
	      apply 'format_bad_calls'/3
		  (Left, CodeServer, Acc)
	  %% Line 576
	  <[{FromMFA,To = {M,F,A}}|Left],CodeServer,Acc> when 'true' ->
	      %% Line 577
	      case call 'dialyzer_codeserver':'lookup_mfa_code'
		       (FromMFA, CodeServer) of
		<{_X_Var,FunCode}> when 'true' ->
		    let <Msg> =
			%% Line 578
			{'call_to_missing',[M|[F|[A|[]]]]}
		    in  let <FileLine> =
			    %% Line 579
			    apply 'find_call_file_and_line'/2
				(FunCode, To)
			in  let <NewAcc> =
				%% Line 580
				[{'warn_callgraph',FileLine,Msg}|Acc]
			    in  %% Line 581
				apply 'format_bad_calls'/3
				    (Left, CodeServer, NewAcc)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 582
	  <[],_X_CodeServer,Acc> when 'true' ->
	      %% Line 583
	      Acc
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'format_bad_calls',3}}] )
	    -| ['compiler_generated'] )
	end
'find_call_file_and_line'/2 =
    %% Line 585
    fun (_cor1,_cor0) ->
	let <Fun> =
	    %% Line 587
	    ( fun (_cor17,_cor16) ->
		  %% Line 588
		  case call 'cerl':'is_c_call'
			   (_cor17) of
		    %% Line 589
		    <'true'> when 'true' ->
			let <M> =
			    %% Line 590
			    call 'cerl':'call_module'
				(_cor17)
			in  let <F> =
				%% Line 591
				call 'cerl':'call_name'
				    (_cor17)
			    in  let <A> =
				    %% Line 592
				    call 'cerl':'call_arity'
					(_cor17)
				in  let <_cor7> =
					%% Line 593
					( case call 'cerl':'is_c_atom'
						   (M) of
					    ( <( 'true'
						 -| ['compiler_generated'] )> when 'true' ->
						  call 'cerl':'is_c_atom'
						      (F)
					      -| ['compiler_generated'] )
					    ( <( 'false'
						 -| ['compiler_generated'] )> when 'true' ->
						  'false'
					      -| ['compiler_generated'] )
					    ( <_cor5> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {( 'badarg'
							      -| ['compiler_generated'] ),_cor5}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    in  %% Line 593
					case _cor7 of
					  %% Line 594
					  <'true'> when 'true' ->
					      let <_cor9> =
						  %% Line 595
						  call 'cerl':'concrete'
						      (M)
					      in  let <_cor8> =
						      %% Line 595
						      call 'cerl':'concrete'
							  (F)
						  in  %% Line 595
						      case <_cor9,_cor8,A> of
							%% Line 596
							<_fol698,_fol699,_fol700>
							    when let <_cor24> = {_fol698,_fol699,_fol700}
							      in  call 'erlang':'=:='
								      (_cor24, _cor0) ->
							    let <Ann> =
								%% Line 597
								call 'cerl':'get_ann'
								    (_cor17)
							    in  let <_cor12> =
								    %% Line 598
								    apply 'get_file'/1
									(Ann)
								in  let <_cor11> =
									%% Line 598
									apply 'get_line'/1
									    (Ann)
								    in  %% Line 598
									[{_cor12,_cor11}|_cor16]
							%% Line 599
							<_fol701,_fol702,_fol703> when 'true' ->
							    _cor16
						      end
					  %% Line 601
					  <'false'> when 'true' ->
					      _cor16
					  ( <_cor14> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor14})
					    -| ['compiler_generated'] )
					end
		    %% Line 603
		    <'false'> when 'true' ->
			_cor16
		    ( <_cor15> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor15})
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-find_call_file_and_line/2-fun-0-'}}] )
	in  let <_cor21> =
		%% Line 606
		call 'cerl_trees':'fold'
		    (Fun, [], _cor1)
	    in  %% Line 606
		call 'erlang':'hd'
		    (_cor21)
'get_line'/1 =
    %% Line 608
    fun (_cor0) ->
	case _cor0 of
	  <[Line|_cor2]>
	      when call 'erlang':'is_integer'
		    (Line) ->
	      Line
	  %% Line 609
	  <[_cor3|Tail]> when 'true' ->
	      apply 'get_line'/1
		  (Tail)
	  %% Line 610
	  <[]> when 'true' ->
	      -1
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_line',1}}] )
	    -| ['compiler_generated'] )
	end
'get_file'/1 =
    %% Line 612
    fun (_cor0) ->
	case _cor0 of
	  <[{'file',File}|_cor2]> when 'true' ->
	      File
	  %% Line 613
	  <[_cor3|Tail]> when 'true' ->
	      apply 'get_file'/1
		  (Tail)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_file',1}}] )
	    -| ['compiler_generated'] )
	end
'dump_callgraph'/3 =
    %% Line 618
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_CallGraph,_X_State,{'analysis',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,[],_cor30}> when 'true' ->
	      'ok'
	  %% Line 619
	  <CallGraph,State,Analysis = {'analysis',_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,File,_cor44}> when 'true' ->
	      let <Extension> =
		  %% Line 620
		  call 'filename':'extension'
		      (File)
	      in  let <Start_Msg> =
		      %% Line 621
		      call 'io_lib':'format'
			  ([68|[117|[109|[112|[105|[110|[103|[32|[116|[104|[101|[32|[99|[97|[108|[108|[103|[114|[97|[112|[104|[46|[46|[46|[32]]]]]]]]]]]]]]]]]]]]]]]]], [])
		  in  %% Line 622
		      ( case State of
			  ( <( {'analysis_state',_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_rec32,_cor51,_cor52,_cor53,_cor54,_cor55}
			       -| ['compiler_generated'] )> when 'true' ->
				do  apply 'send_log'/2
					(_rec32, Start_Msg)
				    %% Line 623
				    case call 'erlang':'statistics'
					     ('wall_clock') of
				      <{T1,_cor57}> when 'true' ->
					  do  %% Line 624
					      apply 'dump_callgraph'/4
						  (CallGraph, State, Analysis, Extension)
					      %% Line 625
					      case call 'erlang':'statistics'
						       ('wall_clock') of
						<{T2,_cor58}> when 'true' ->
						    let <_cor9> =
							%% Line 626
							call 'erlang':'-'
							    (T2, T1)
						    in  let <_cor10> =
							    %% Line 626
							    call 'erlang':'/'
								(_cor9, 1000)
							in  let <Finish_Msg> =
								%% Line 626
								call 'io_lib':'format'
								    ([100|[111|[110|[101|[32|[105|[110|[32|[126|[50|[102|[32|[115|[101|[99|[115|[10]]]]]]]]]]]]]]]]], [_cor10|[]])
							    in  do  %% Line 627
								    apply 'send_log'/2
									(_rec32, Finish_Msg)
								    %% Line 628
								    'ok'
						( <_cor8> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor8})
						  -| ['compiler_generated'] )
					      end
				      ( <_cor7> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor7})
					-| ['compiler_generated'] )
				    end
			    -| ['compiler_generated'] )
			  ( <_cor56> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','analysis_state'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'dump_callgraph',3}}] )
	    -| ['compiler_generated'] )
	end
'dump_callgraph'/4 =
    %% Line 630
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <CallGraph,_X_State,{'analysis',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,File,_cor27},[46|[100|[111|[116]]]]> when 'true' ->
	      %% Line 631
	      call 'dialyzer_callgraph':'to_dot'
		  (CallGraph, File)
	  %% Line 632
	  <CallGraph,_X_State,{'analysis',_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,File,_cor41},[46|[112|[115]]]> when 'true' ->
	      %% Line 634
	      call 'dialyzer_callgraph':'to_ps'
		  (CallGraph, File, [45|[71|[114|[97|[116|[105|[111|[61|[99|[111|[109|[112|[114|[101|[115|[115|[32|[45|[71|[115|[105|[122|[101|[61|[34|[49|[48|[48|[44|[49|[48|[48|[34]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	  %% Line 635
	  <CallGraph,State,{'analysis',_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,File,_cor55},_X_Ext> when 'true' ->
	      %% Line 636
	      case call 'file':'open'
		       (File, ['write']) of
		%% Line 637
		<{'ok',Fd}> when 'true' ->
		    do  %% Line 638
			call 'io':'format'
			    (Fd, [126|[112]], [CallGraph|[]])
			let <_cor56> =
			    %% Line 639
			    call 'file':'close'
				(Fd)
			in  %% Line 639
			    case _cor56 of
			      <'ok'> when 'true' ->
				  ( _cor56
				    -| ['compiler_generated'] )
			      ( <_cor5> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor5})
				-| ['compiler_generated'] )
			    end
		%% Line 640
		<{'error',Reason}> when 'true' ->
		    let <Msg> =
			%% Line 641
			call 'io_lib':'format'
			    ([67|[111|[117|[108|[100|[32|[110|[111|[116|[32|[111|[112|[101|[110|[32|[111|[117|[116|[112|[117|[116|[32|[102|[105|[108|[101|[32|[126|[112|[44|[32|[82|[101|[97|[115|[111|[110|[58|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 642
																																	     [File|[Reason|[]]])
		    in  %% Line 643
			( case State of
			    ( <( {'analysis_state',_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_rec34,_cor63,_cor64,_cor65,_cor66,_cor67}
				 -| ['compiler_generated'] )> when 'true' ->
				  apply 'send_log'/2
				      (_rec34, Msg)
			      -| ['compiler_generated'] )
			    ( <_cor68> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','analysis_state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'dump_callgraph',4}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('dialyzer_analysis_callgraph')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('dialyzer_analysis_callgraph', _cor0)
end