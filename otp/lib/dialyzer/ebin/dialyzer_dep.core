module 'dialyzer_dep' ['analyze'/1,
		       'module_info'/0,
		       'module_info'/1]
    attributes [%% Line 33
		'type' =
		    %% Line 33
		    [{'dial_ret',{'type',33,'union',[{'integer',33,0}|[{'integer',34,1}|[{'integer',35,2}]]]},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'dial_warn_tag',{'type',68,'union',[{'atom',68,'warn_return_no_exit'}|[{'atom',68,'warn_return_only_exit'}|[{'atom',69,'warn_not_called'}|[{'atom',69,'warn_non_proper_list'}|[{'atom',70,'warn_matching'}|[{'atom',70,'warn_opaque'}|[{'atom',70,'warn_fun_app'}|[{'atom',71,'warn_failing_call'}|[{'atom',71,'warn_bin_construction'}|[{'atom',72,'warn_contract_types'}|[{'atom',72,'warn_contract_syntax'}|[{'atom',73,'warn_contract_not_equal'}|[{'atom',73,'warn_contract_subtype'}|[{'atom',74,'warn_contract_supertype'}|[{'atom',74,'warn_callgraph'}|[{'atom',75,'warn_umatched_return'}|[{'atom',75,'warn_race_condition'}|[{'atom',76,'warn_behaviour'}|[{'atom',76,'warn_contract_range'}|[{'atom',77,'warn_undefined_callbacks'}|[{'atom',77,'warn_unknown'}]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'file_line',{'type',83,'tuple',[{'remote_type',83,[{'atom',83,'file'}|[{'atom',83,'filename'}|[[]]]]}|[{'type',83,'non_neg_integer',[]}]]},[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{'dial_warning',{'type',84,'tuple',[{'type',84,'dial_warn_tag',[]}|[{'type',84,'file_line',[]}|[{'type',84,'tuple',[{'type',84,'atom',[]}|[{'type',84,'list',[{'type',84,'term',[]}]}]]}]]]},[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{'dial_error',{'type',89,'any',[]},[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{'anal_type',{'type',96,'union',[{'atom',96,'succ_typings'}|[{'atom',96,'plt_build'}]]},[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{'anal_type1',{'type',97,'union',[{'type',97,'anal_type',[]}|[{'atom',97,'plt_add'}|[{'atom',97,'plt_check'}|[{'atom',97,'plt_remove'}]]]]},[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{'contr_constr',{'type',98,'tuple',[{'atom',98,'subtype'}|[{'remote_type',98,[{'atom',98,'erl_types'}|[{'atom',98,'erl_type'}|[[]]]]}|[{'remote_type',98,[{'atom',98,'erl_types'}|[{'atom',98,'erl_type'}|[[]]]]}]]]},[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{'contract_pair',{'type',99,'tuple',[{'remote_type',99,[{'atom',99,'erl_types'}|[{'atom',99,'erl_type'}|[[]]]]}|[{'type',99,'list',[{'type',99,'contr_constr',[]}]}]]},[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{'dial_define',{'type',100,'tuple',[{'type',100,'atom',[]}|[{'type',100,'term',[]}]]},[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{'dial_option',{'type',101,'tuple',[{'type',101,'atom',[]}|[{'type',101,'term',[]}]]},[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{'dial_options',{'type',102,'list',[{'type',102,'dial_option',[]}]},[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{'fopt',{'type',103,'union',[{'atom',103,'basename'}|[{'atom',103,'fullpath'}]]},[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{'format',{'type',104,'union',[{'atom',104,'formatted'}|[{'atom',104,'raw'}]]},[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{'label',{'type',105,'non_neg_integer',[]},[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{'rep_mode',{'type',106,'union',[{'atom',106,'quiet'}|[{'atom',106,'normal'}|[{'atom',106,'verbose'}]]]},[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{'start_from',{'type',107,'union',[{'atom',107,'byte_code'}|[{'atom',107,'src_code'}]]},[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{'mfa_or_funlbl',{'type',108,'union',[{'type',108,'label',[]}|[{'type',108,'mfa',[]}]]},[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{'solver',{'type',109,'union',[{'atom',109,'v1'}|[{'atom',109,'v2'}]]},[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{{'record','analysis'},[{'typed_record_field',{'record_field',115,{'atom',115,'analysis_pid'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'pid',[]}]]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'type'},{'atom',116,'succ_typings'}},{'type',116,'anal_type',[]}}|[{'typed_record_field',{'record_field',117,{'atom',117,'defines'},{'nil',117}},{'type',117,'list',[{'type',117,'dial_define',[]}]}}|[{'typed_record_field',{'record_field',118,{'atom',118,'doc_plt'}},{'type',118,'union',[{'atom',118,'undefined'}|[{'remote_type',118,[{'atom',118,'dialyzer_plt'}|[{'atom',118,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',119,{'atom',119,'files'},{'nil',119}},{'type',119,'list',[{'remote_type',119,[{'atom',119,'file'}|[{'atom',119,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'include_dirs'},{'nil',120}},{'type',120,'list',[{'remote_type',120,[{'atom',120,'file'}|[{'atom',120,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',121,{'atom',121,'start_from'},{'atom',121,'byte_code'}},{'type',121,'start_from',[]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'plt'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'remote_type',122,[{'atom',122,'dialyzer_plt'}|[{'atom',122,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'use_contracts'},{'atom',123,'true'}},{'type',123,'boolean',[]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'race_detection'},{'atom',124,'false'}},{'type',124,'boolean',[]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'behaviours_chk'},{'atom',125,'false'}},{'type',125,'boolean',[]}}|[{'typed_record_field',{'record_field',126,{'atom',126,'timing'},{'atom',126,'false'}},{'type',126,'union',[{'type',126,'boolean',[]}|[{'atom',126,'debug'}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'timing_server'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'remote_type',127,[{'atom',127,'dialyzer_timing'}|[{'atom',127,'timing_server'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'callgraph_file'},{'string',128,[]}},{'remote_type',128,[{'atom',128,'file'}|[{'atom',128,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'solvers'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'list',[{'type',129,'solver',[]}]}]]}}]]]]]]]]]]]]]]],[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{{'record','options'},[{'typed_record_field',{'record_field',131,{'atom',131,'files'},{'nil',131}},{'type',131,'list',[{'remote_type',131,[{'atom',131,'file'}|[{'atom',131,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'files_rec'},{'nil',132}},{'type',132,'list',[{'remote_type',132,[{'atom',132,'file'}|[{'atom',132,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',133,{'atom',133,'analysis_type'},{'atom',133,'succ_typings'}},{'type',133,'anal_type1',[]}}|[{'typed_record_field',{'record_field',134,{'atom',134,'timing'},{'atom',134,'false'}},{'type',134,'union',[{'type',134,'boolean',[]}|[{'atom',134,'debug'}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'defines'},{'nil',135}},{'type',135,'list',[{'type',135,'dial_define',[]}]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'from'},{'atom',136,'byte_code'}},{'type',136,'start_from',[]}}|[{'typed_record_field',{'record_field',137,{'atom',137,'get_warnings'},{'atom',137,'maybe'}},{'type',137,'union',[{'type',137,'boolean',[]}|[{'atom',137,'maybe'}]]}}|[{'typed_record_field',{'record_field',138,{'atom',138,'init_plts'},{'nil',138}},{'type',138,'list',[{'remote_type',138,[{'atom',138,'file'}|[{'atom',138,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',139,{'atom',139,'include_dirs'},{'nil',139}},{'type',139,'list',[{'remote_type',139,[{'atom',139,'file'}|[{'atom',139,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'output_plt'},{'atom',140,'none'}},{'type',140,'union',[{'atom',140,'none'}|[{'remote_type',140,[{'atom',140,'file'}|[{'atom',140,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',141,{'atom',141,'legal_warnings'},{'call',141,{'remote',141,{'atom',141,'ordsets'},{'atom',141,'new'}},[]}},{'remote_type',141,[{'atom',141,'ordsets'}|[{'atom',141,'ordset'}|[[{'type',141,'dial_warn_tag',[]}]]]]}}|[{'typed_record_field',{'record_field',142,{'atom',142,'report_mode'},{'atom',142,'normal'}},{'type',142,'rep_mode',[]}}|[{'typed_record_field',{'record_field',143,{'atom',143,'erlang_mode'},{'atom',143,'false'}},{'type',143,'boolean',[]}}|[{'typed_record_field',{'record_field',144,{'atom',144,'use_contracts'},{'atom',144,'true'}},{'type',144,'boolean',[]}}|[{'typed_record_field',{'record_field',145,{'atom',145,'output_file'},{'atom',145,'none'}},{'type',145,'union',[{'atom',145,'none'}|[{'remote_type',145,[{'atom',145,'file'}|[{'atom',145,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',146,{'atom',146,'output_format'},{'atom',146,'formatted'}},{'type',146,'format',[]}}|[{'typed_record_field',{'record_field',147,{'atom',147,'filename_opt'},{'atom',147,'basename'}},{'type',147,'fopt',[]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'callgraph_file'},{'string',148,[]}},{'remote_type',148,[{'atom',148,'file'}|[{'atom',148,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'check_plt'},{'atom',149,'true'}},{'type',149,'boolean',[]}}|[{'typed_record_field',{'record_field',150,{'atom',150,'solvers'},{'nil',150}},{'type',150,'list',[{'type',150,'solver',[]}]}}]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 152
		'type' =
		    %% Line 152
		    [{{'record','contract'},[{'typed_record_field',{'record_field',152,{'atom',152,'contracts'},{'nil',152}},{'type',152,'list',[{'type',152,'contract_pair',[]}]}}|[{'typed_record_field',{'record_field',153,{'atom',153,'args'},{'nil',153}},{'type',153,'list',[{'remote_type',153,[{'atom',153,'erl_types'}|[{'atom',153,'erl_type'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',154,{'atom',154,'forms'},{'nil',154}},{'type',154,'list',[{'type',154,'tuple',[{'var',154,'_'}|[{'var',154,'_'}]]}]}}]]],[]}],
		%% Line 61
		'spec' =
		    %% Line 61
		    [{{'analyze',1},[{'type',61,'fun',[{'type',61,'product',[{'remote_type',61,[{'atom',61,'cerl'}|[{'atom',61,'c_module'}|[[]]]]}]}|[{'type',62,'tuple',[{'remote_type',62,[{'atom',62,'dict'}|[{'atom',62,'dict'}|[[]]]]}|[{'remote_type',62,[{'atom',62,'ordsets'}|[{'atom',62,'ordset'}|[[{'type',62,'union',[{'atom',62,'external'}|[{'type',62,'label',[]}]]}]]]]}|[{'remote_type',62,[{'atom',62,'dict'}|[{'atom',62,'dict'}|[[]]]]}|[{'remote_type',62,[{'atom',62,'dict'}|[{'atom',62,'dict'}|[[]]]]}]]]]}]]}]}],
		%% Line 314
		'type' =
		    %% Line 314
		    [{{'record','set'},[{'typed_record_field',{'record_field',314,{'atom',314,'set'}},{'type',314,'union',[{'atom',314,'undefined'}|[{'remote_type',314,[{'atom',314,'sets'}|[{'atom',314,'set'}|[[]]]]}]]}}],[]}],
		%% Line 348
		'type' =
		    %% Line 348
		    [{{'record','output'},[{'typed_record_field',{'record_field',348,{'atom',348,'type'}},{'type',348,'union',[{'atom',348,'undefined'}|[{'atom',348,'single'}|[{'atom',348,'list'}]]]}}|[{'typed_record_field',{'record_field',349,{'atom',349,'content'}},{'type',349,'union',[{'atom',349,'undefined'}|[{'atom',349,'none'}|[{'type',349,'record',[{'atom',349,'set'}]}|[{'type',349,'list',[{'type',349,'record',[{'atom',349,'output'}]}]}]]]]}}]],[]}],
		%% Line 481
		'type' =
		    %% Line 481
		    [{'local_set',{'type',481,'union',[{'atom',481,'none'}|[{'type',481,'record',[{'atom',481,'set'}]}]]},[]}],
		%% Line 483
		'type' =
		    %% Line 483
		    [{{'record','state'},[{'typed_record_field',{'record_field',483,{'atom',483,'deps'}},{'type',483,'union',[{'atom',483,'undefined'}|[{'remote_type',483,[{'atom',483,'dict'}|[{'atom',483,'dict'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',484,{'atom',484,'esc'}},{'type',484,'union',[{'atom',484,'undefined'}|[{'type',484,'local_set',[]}]]}}|[{'typed_record_field',{'record_field',485,{'atom',485,'call'}},{'type',485,'union',[{'atom',485,'undefined'}|[{'remote_type',485,[{'atom',485,'dict'}|[{'atom',485,'dict'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',486,{'atom',486,'arities'}},{'type',486,'union',[{'atom',486,'undefined'}|[{'remote_type',486,[{'atom',486,'dict'}|[{'atom',486,'dict'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',487,{'atom',487,'letrecs'}},{'type',487,'union',[{'atom',487,'undefined'}|[{'remote_type',487,[{'atom',487,'dict'}|[{'atom',487,'dict'}|[[]]]]}]]}}]]]]],[]}]]
'analyze'/1 =
    %% Line 64
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 66
	    apply 'map__new'/0
		()
	in  let <_cor1> =
		%% Line 66
		apply 'state__new'/1
		    (_cor0)
	    in  %% Line 66
		case apply 'traverse'/4
			 (_cor0, _cor2, _cor1, 'top') of
		  <{_cor14,State}> when 'true' ->
		      let <Esc> =
			  %% Line 67
			  apply 'state__esc'/1
			      (State)
		      in  let <_cor5> =
			      %% Line 69
			      apply 'output'/1
				  (Esc)
			  in  let <State1> =
				  %% Line 69
				  apply 'state__add_deps'/3
				      ('external', _cor5, State)
			      in  let <Deps> =
				      %% Line 70
				      apply 'state__deps'/1
					  (State1)
				  in  let <Calls> =
					  %% Line 71
					  apply 'state__calls'/1
					      (State1)
				      in  let <Letrecs> =
					      %% Line 72
					      apply 'state__letrecs'/1
						  (State1)
					  in  let <_cor12> =
						  %% Line 73
						  apply 'map__finalize'/1
						      (Deps)
					      in  let <_cor11> =
						      %% Line 73
						      apply 'set__to_ordsets'/1
							  (Esc)
						  in  let <_cor10> =
							  %% Line 73
							  apply 'map__finalize'/1
							      (Calls)
						      in  %% Line 73
							  {_cor12,_cor11,_cor10,Letrecs}
		  ( <_cor3> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor3})
		    -| ['compiler_generated'] )
		end
'traverse'/4 =
    %% Line 75
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 77
	case call 'cerl':'type'
		 (_cor3) of
	  %% Line 78
	  <'apply'> when 'true' ->
	      let <Op> =
		  %% Line 79
		  call 'cerl':'apply_op'
		      (_cor3)
	      in  let <Args> =
		      %% Line 80
		      call 'cerl':'apply_args'
			  (_cor3)
		  in  let <_cor6> =
			  %% Line 83
			  call 'cerl':'type'
			      (Op)
		      in  do  %% Line 83
			      case <> of
				%% Line 85
				<>
				    when call 'erlang':'=:='
					  ('var',
					   _cor6) ->
				    'ok'
				%% Line 84
				<> when 'true' ->
				    let <_cor7> =
					call 'cerl':'type'
					    (Op)
				    in  call 'erlang':'error'
					    ({'apply_op_not_a_variable',_cor7})
			      end
			      let <_cor9> =
				  %% Line 87
				  call 'cerl_trees':'get_label'
				      (Op)
			      in  let <_cor11> =
				      %% Line 87
				      case apply 'map__lookup'/2
					       (_cor9, _cor2) of
					%% Line 88
					<'none'> when 'true' ->
					    apply 'output'/1
						('none')
					%% Line 89
					<{'value',OF}> when 'true' ->
					    OF
					( <_cor10> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor10})
					  -| ['compiler_generated'] )
				      end
				  in  %% Line 91
				      case apply 'traverse_list'/4
					       (Args, _cor2, _cor1, _cor0) of
					<{ArgFuns,State2}> when 'true' ->
					    let <_cor14> =
						%% Line 92
						apply 'merge_outs'/1
						    (ArgFuns)
					    in  let <State3> =
						    %% Line 92
						    apply 'state__add_esc'/2
							(_cor14, State2)
						in  let <State4> =
							%% Line 93
							apply 'state__add_deps'/3
							    (_cor0, _cor11, State3)
						    in  let <_cor18> =
							    %% Line 94
							    call 'cerl_trees':'get_label'
								(_cor3)
							in  let <_cor17> =
								%% Line 95
								call 'erlang':'length'
								    (Args)
							    in  let <State5> =
								    %% Line 94
								    apply 'state__store_callsite'/4
									(_cor18, _cor11, _cor17, %% Line 95
												 State4)
								in  let <_cor20> =
									%% Line 96
									apply 'set__singleton'/1
									    ('external')
								    in  let <_cor21> =
									    %% Line 96
									    apply 'output'/1
										(_cor20)
									in  %% Line 96
									    {_cor21,State5}
					( <_cor13> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor13})
					  -| ['compiler_generated'] )
				      end
	  %% Line 97
	  <'binary'> when 'true' ->
	      let <_cor22> =
		  %% Line 98
		  apply 'output'/1
		      ('none')
	      in  %% Line 98
		  {_cor22,_cor1}
	  %% Line 99
	  <'case'> when 'true' ->
	      let <Arg> =
		  %% Line 100
		  call 'cerl':'case_arg'
		      (_cor3)
	      in  %% Line 101
		  case apply 'traverse'/4
			   (Arg, _cor2, _cor1, _cor0) of
		    <{Funs,NewState}> when 'true' ->
			let <Clauses> =
			    %% Line 102
			    call 'cerl':'case_clauses'
				(_cor3)
			in  %% Line 103
			    apply 'traverse_clauses'/5
				(Clauses, Funs, _cor2, NewState, _cor0)
		    ( <_cor24> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor24})
		      -| ['compiler_generated'] )
		  end
	  %% Line 104
	  <'call'> when 'true' ->
	      let <Args> =
		  %% Line 105
		  call 'cerl':'call_args'
		      (_cor3)
	      in  %% Line 106
		  case apply 'traverse_list'/4
			   (Args, _cor2, _cor1, _cor0) of
		    <{ArgFuns,State1}> when 'true' ->
			let <_cor28> =
			    %% Line 107
			    apply 'merge_outs'/1
				(ArgFuns)
			in  %% Line 107
			    apply 'remote_call'/3
				(_cor3, _cor28, State1)
		    ( <_cor27> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor27})
		      -| ['compiler_generated'] )
		  end
	  %% Line 108
	  <'catch'> when 'true' ->
	      let <_cor29> =
		  %% Line 109
		  call 'cerl':'catch_body'
		      (_cor3)
	      in  %% Line 109
		  apply 'traverse'/4
		      (_cor29, _cor2, _cor1, _cor0)
	  %% Line 110
	  <'cons'> when 'true' ->
	      let <_cor30> =
		  %% Line 111
		  call 'cerl':'cons_hd'
		      (_cor3)
	      in  %% Line 111
		  case apply 'traverse'/4
			   (_cor30, _cor2, _cor1, _cor0) of
		    <{HdFuns,State1}> when 'true' ->
			let <_cor32> =
			    %% Line 112
			    call 'cerl':'cons_tl'
				(_cor3)
			in  %% Line 112
			    case apply 'traverse'/4
				     (_cor32, _cor2, State1, _cor0) of
			      <{TlFuns,State2}> when 'true' ->
				  let <_cor34> =
				      %% Line 113
				      apply 'merge_outs'/1
					  ([HdFuns|[TlFuns|[]]])
				  in  %% Line 113
				      {_cor34,State2}
			      ( <_cor33> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor33})
				-| ['compiler_generated'] )
			    end
		    ( <_cor31> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor31})
		      -| ['compiler_generated'] )
		  end
	  %% Line 114
	  <'fun'> when 'true' ->
	      let <Body> =
		  %% Line 116
		  call 'cerl':'fun_body'
		      (_cor3)
	      in  let <Label> =
		      %% Line 117
		      call 'cerl_trees':'get_label'
			  (_cor3)
		  in  let <_cor44> =
			  %% Line 119
			  case <> of
			    <>
				when call 'erlang':'=:='
				      (_cor0,
				       'top') ->
				let <_cor37> =
				    %% Line 120
				    apply 'set__singleton'/1
					(Label)
				in  let <_cor38> =
					%% Line 120
					apply 'output'/1
					    (_cor37)
				    in  %% Line 120
					apply 'state__add_deps'/3
					    ('top', _cor38, _cor1)
			    %% Line 121
			    <> when 'true' ->
				let <_cor39> =
				    %% Line 122
				    apply 'set__singleton'/1
					(_cor0)
				in  let <O1> =
					%% Line 122
					apply 'output'/1
					    (_cor39)
				    in  let <_cor41> =
					    %% Line 123
					    apply 'set__singleton'/1
						(Label)
					in  let <O2> =
						%% Line 123
						apply 'output'/1
						    (_cor41)
					    in  let <TmpState> =
						    %% Line 124
						    apply 'state__add_deps'/3
							(Label, O1, _cor1)
						in  %% Line 125
						    apply 'state__add_deps'/3
							(_cor0, O2, TmpState)
			  end
		      in  let <Vars> =
			      %% Line 127
			      call 'cerl':'fun_vars'
				  (_cor3)
			  in  let <_cor47> =
				  %% Line 128
				  apply 'set__singleton'/1
				      ('external')
			      in  let <_cor48> =
				      %% Line 128
				      apply 'output'/1
					  (_cor47)
				  in  let <Out1> =
					  %% Line 128
					  apply 'bind_single'/3
					      (Vars, _cor48, _cor2)
				      in  let <_cor50> =
					      %% Line 130
					      call 'cerl_trees':'get_label'
						  (_cor3)
					  in  %% Line 129
					      case %% Line 130
						   apply 'traverse'/4
						       (Body, Out1, _cor44, _cor50) of
						<{BodyFuns,State2}> when 'true' ->
						    let <_cor53> =
							%% Line 131
							apply 'set__singleton'/1
							    (Label)
						    in  let <_cor54> =
							    %% Line 131
							    apply 'output'/1
								(_cor53)
							in  let <_cor52> =
								%% Line 131
								apply 'state__add_esc'/2
								    (BodyFuns, State2)
							    in  %% Line 131
								{_cor54,_cor52}
						( <_cor51> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor51})
						  -| ['compiler_generated'] )
					      end
	  %% Line 132
	  <'let'> when 'true' ->
	      let <Vars> =
		  %% Line 133
		  call 'cerl':'let_vars'
		      (_cor3)
	      in  let <Arg> =
		      %% Line 134
		      call 'cerl':'let_arg'
			  (_cor3)
		  in  let <Body> =
			  %% Line 135
			  call 'cerl':'let_body'
			      (_cor3)
		      in  %% Line 136
			  case apply 'traverse'/4
				   (Arg, _cor2, _cor1, _cor0) of
			    <{ArgFuns,State1}> when 'true' ->
				let <Out1> =
				    %% Line 137
				    apply 'bind_list'/3
					(Vars, ArgFuns, _cor2)
				in  %% Line 138
				    apply 'traverse'/4
					(Body, Out1, State1, _cor0)
			    ( <_cor58> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor58})
			      -| ['compiler_generated'] )
			  end
	  %% Line 139
	  <'letrec'> when 'true' ->
	      let <Defs> =
		  %% Line 140
		  call 'cerl':'letrec_defs'
		      (_cor3)
	      in  let <Body> =
		      %% Line 141
		      call 'cerl':'letrec_body'
			  (_cor3)
		  in  let <_cor68> =
			  %% Line 142
			  ( fun (_cor65,_cor64) ->
				case <_cor65,_cor64> of
				  <{Var,Fun},Acc> when 'true' ->
				      let <_cor63> =
					  %% Line 143
					  call 'cerl_trees':'get_label'
					      (Var)
				      in  let <_cor62> =
					      %% Line 143
					      call 'cerl_trees':'get_label'
						  (Fun)
					  in  %% Line 143
					      apply 'state__add_letrecs'/3
						  (_cor63, _cor62, Acc)
				  ( <_cor67,_cor66> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor67,_cor66})
					  -| [{'function_name',{'-traverse/4-fun-0-',2}}] )
				    -| ['compiler_generated'] )
				end
			    -| [{'id',{0,0,'-traverse/4-fun-0-'}}] )
		      in  let <State1> =
			      %% Line 142
			      call 'lists':'foldl'
				  (_cor68, _cor1, %% Line 144
						  Defs)
			  in  let <Out1> =
				  %% Line 145
				  apply 'bind_defs'/2
				      (Defs, _cor2)
			      in  let <State2> =
				      %% Line 146
				      apply 'traverse_defs'/4
					  (Defs, Out1, State1, _cor0)
				  in  %% Line 147
				      apply 'traverse'/4
					  (Body, Out1, State2, _cor0)
	  %% Line 148
	  <'literal'> when 'true' ->
	      let <_cor72> =
		  %% Line 149
		  apply 'output'/1
		      ('none')
	      in  %% Line 149
		  {_cor72,_cor1}
	  %% Line 150
	  <'module'> when 'true' ->
	      let <Defs> =
		  %% Line 151
		  call 'cerl':'module_defs'
		      (_cor3)
	      in  let <Out1> =
		      %% Line 152
		      apply 'bind_defs'/2
			  (Defs, _cor2)
		  in  let <State1> =
			  %% Line 153
			  apply 'traverse_defs'/4
			      (Defs, Out1, _cor1, _cor0)
		      in  let <_cor76> =
			      %% Line 154
			      apply 'output'/1
				  ('none')
			  in  %% Line 154
			      {_cor76,State1}
	  %% Line 155
	  <'primop'> when 'true' ->
	      let <Args> =
		  %% Line 156
		  call 'cerl':'primop_args'
		      (_cor3)
	      in  %% Line 157
		  case apply 'traverse_list'/4
			   (Args, _cor2, _cor1, _cor0) of
		    <{ArgFuns,State1}> when 'true' ->
			let <_cor79> =
			    %% Line 158
			    apply 'merge_outs'/1
				(ArgFuns)
			in  %% Line 158
			    apply 'primop'/3
				(_cor3, _cor79, State1)
		    ( <_cor78> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor78})
		      -| ['compiler_generated'] )
		  end
	  %% Line 159
	  <'receive'> when 'true' ->
	      let <Clauses> =
		  %% Line 160
		  call 'cerl':'receive_clauses'
		      (_cor3)
	      in  let <TimeOut> =
		      %% Line 161
		      call 'cerl':'receive_timeout'
			  (_cor3)
		  in  let <Action> =
			  %% Line 162
			  call 'cerl':'receive_action'
			      (_cor3)
		      in  let <_cor83> =
			      %% Line 164
			      apply 'output'/1
				  ('none')
			  in  %% Line 163
			      case %% Line 164
				   apply 'traverse_clauses'/5
				       (Clauses, _cor83, _cor2, _cor1, _cor0) of
				<{ClauseFuns,State1}> when 'true' ->
				    %% Line 165
				    case apply 'traverse'/4
					     (TimeOut, _cor2, State1, _cor0) of
				      <{_cor125,State2}> when 'true' ->
					  %% Line 166
					  case apply 'traverse'/4
						   (Action, _cor2, State2, _cor0) of
					    <{ActionFuns,State3}> when 'true' ->
						let <_cor87> =
						    %% Line 167
						    apply 'merge_outs'/1
							([ClauseFuns|[ActionFuns|[]]])
						in  %% Line 167
						    {_cor87,State3}
					    ( <_cor86> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor86})
					      -| ['compiler_generated'] )
					  end
				      ( <_cor85> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor85})
					-| ['compiler_generated'] )
				    end
				( <_cor84> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor84})
				  -| ['compiler_generated'] )
			      end
	  %% Line 168
	  <'seq'> when 'true' ->
	      let <_cor88> =
		  %% Line 169
		  call 'cerl':'seq_arg'
		      (_cor3)
	      in  %% Line 169
		  case apply 'traverse'/4
			   (_cor88, _cor2, _cor1, _cor0) of
		    <{_cor126,State1}> when 'true' ->
			let <_cor90> =
			    %% Line 170
			    call 'cerl':'seq_body'
				(_cor3)
			in  %% Line 170
			    apply 'traverse'/4
				(_cor90, _cor2, State1, _cor0)
		    ( <_cor89> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor89})
		      -| ['compiler_generated'] )
		  end
	  %% Line 171
	  <'try'> when 'true' ->
	      let <Arg> =
		  %% Line 172
		  call 'cerl':'try_arg'
		      (_cor3)
	      in  let <Body> =
		      %% Line 173
		      call 'cerl':'try_body'
			  (_cor3)
		  in  let <Vars> =
			  %% Line 174
			  call 'cerl':'try_vars'
			      (_cor3)
		      in  let <EVars> =
			      %% Line 175
			      call 'cerl':'try_evars'
				  (_cor3)
			  in  let <Handler> =
				  %% Line 176
				  call 'cerl':'try_handler'
				      (_cor3)
			      in  %% Line 177
				  case apply 'traverse'/4
					   (Arg, _cor2, _cor1, _cor0) of
				    <{ArgFuns,State1}> when 'true' ->
					let <Out1> =
					    %% Line 178
					    apply 'bind_list'/3
						(Vars, ArgFuns, _cor2)
					in  %% Line 179
					    case apply 'traverse'/4
						     (Body, Out1, State1, _cor0) of
					      <{BodyFuns,State2}> when 'true' ->
						  let <_cor99> =
						      %% Line 180
						      apply 'set__singleton'/1
							  ('external')
						  in  let <_cor100> =
							  %% Line 180
							  apply 'output'/1
							      (_cor99)
						      in  let <Out2> =
							      %% Line 180
							      apply 'bind_single'/3
								  (EVars, _cor100, _cor2)
							  in  %% Line 181
							      case apply 'traverse'/4
								       (Handler, Out2, State2, _cor0) of
								<{HandlerFuns,State3}> when 'true' ->
								    let <_cor103> =
									%% Line 182
									apply 'merge_outs'/1
									    ([BodyFuns|[HandlerFuns|[]]])
								    in  %% Line 182
									{_cor103,State3}
								( <_cor102> when 'true' ->
								      primop 'match_fail'
									  ({'badmatch',_cor102})
								  -| ['compiler_generated'] )
							      end
					      ( <_cor98> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor98})
						-| ['compiler_generated'] )
					    end
				    ( <_cor96> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor96})
				      -| ['compiler_generated'] )
				  end
	  %% Line 183
	  <'tuple'> when 'true' ->
	      let <Args> =
		  %% Line 184
		  call 'cerl':'tuple_es'
		      (_cor3)
	      in  %% Line 185
		  case apply 'traverse_list'/4
			   (Args, _cor2, _cor1, _cor0) of
		    <{List,State1}> when 'true' ->
			let <_cor106> =
			    %% Line 186
			    apply 'merge_outs'/1
				(List)
			in  %% Line 186
			    {_cor106,State1}
		    ( <_cor105> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor105})
		      -| ['compiler_generated'] )
		  end
	  %% Line 187
	  <'map'> when 'true' ->
	      let <Args> =
		  %% Line 188
		  call 'cerl':'map_es'
		      (_cor3)
	      in  %% Line 189
		  case apply 'traverse_list'/4
			   (Args, _cor2, _cor1, _cor0) of
		    <{List,State1}> when 'true' ->
			let <_cor109> =
			    %% Line 190
			    apply 'merge_outs'/1
				(List)
			in  %% Line 190
			    {_cor109,State1}
		    ( <_cor108> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor108})
		      -| ['compiler_generated'] )
		  end
	  %% Line 191
	  <'map_pair'> when 'true' ->
	      let <Key> =
		  %% Line 192
		  call 'cerl':'map_pair_key'
		      (_cor3)
	      in  let <Val> =
		      %% Line 193
		      call 'cerl':'map_pair_val'
			  (_cor3)
		  in  %% Line 194
		      case apply 'traverse_list'/4
			       ([Key|[Val|[]]], _cor2, _cor1, _cor0) of
			<{List,State1}> when 'true' ->
			    let <_cor113> =
				%% Line 195
				apply 'merge_outs'/1
				    (List)
			    in  %% Line 195
				{_cor113,State1}
			( <_cor112> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor112})
			  -| ['compiler_generated'] )
		      end
	  %% Line 196
	  <'values'> when 'true' ->
	      let <_cor114> =
		  %% Line 197
		  call 'cerl':'values_es'
		      (_cor3)
	      in  %% Line 197
		  apply 'traverse_list'/4
		      (_cor114, _cor2, _cor1, _cor0)
	  %% Line 198
	  <'var'> when 'true' ->
	      let <_cor115> =
		  %% Line 199
		  call 'cerl_trees':'get_label'
		      (_cor3)
	      in  %% Line 199
		  case apply 'map__lookup'/2
			   (_cor115, _cor2) of
		    %% Line 200
		    <'none'> when 'true' ->
			let <_cor116> =
			    apply 'output'/1
				('none')
			in  {_cor116,_cor1}
		    %% Line 201
		    <{'value',Val}> when 'true' ->
			%% Line 202
			case apply 'is_only_external'/1
				 (Val) of
			  %% Line 203
			  <'true'> when 'true' ->
			      %% Line 205
			      {Val,_cor1}
			  %% Line 206
			  <'false'> when 'true' ->
			      let <_cor117> =
				  %% Line 208
				  apply 'state__add_deps'/3
				      (_cor0, Val, _cor1)
			      in  %% Line 208
				  {Val,_cor117}
			  ( <_cor118> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor118})
			    -| ['compiler_generated'] )
			end
		    ( <_cor119> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor119})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor120> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor120})
	    -| ['compiler_generated'] )
	end
'traverse_list'/4 =
    %% Line 213
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 214
	apply 'traverse_list'/5
	    (_cor3, _cor2, _cor1, _cor0, [])
'traverse_list'/5 =
    %% Line 216
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Tree|Left],Out,State,CurrentFun,Acc> when 'true' ->
	      %% Line 217
	      case apply 'traverse'/4
		       (Tree, Out, State, CurrentFun) of
		<{X,State1}> when 'true' ->
		    %% Line 218
		    apply 'traverse_list'/5
			(Left, Out, State1, CurrentFun, [X|Acc])
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 219
	  <[],_X_Out,State,_X_CurrentFun,Acc> when 'true' ->
	      let <_cor6> =
		  %% Line 220
		  call 'lists':'reverse'
		      (Acc)
	      in  let <_cor7> =
		      %% Line 220
		      apply 'output'/1
			  (_cor6)
		  in  %% Line 220
		      {_cor7,State}
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'traverse_list',5}}] )
	    -| ['compiler_generated'] )
	end
'traverse_defs'/4 =
    %% Line 222
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{_cor9,Fun}|Left],Out,State,CurrentFun> when 'true' ->
	      %% Line 223
	      case apply 'traverse'/4
		       (Fun, Out, State, CurrentFun) of
		<{_cor10,State1}> when 'true' ->
		    %% Line 224
		    apply 'traverse_defs'/4
			(Left, Out, State1, CurrentFun)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 225
	  <[],_X_Out,State,_X_CurrentFun> when 'true' ->
	      %% Line 226
	      State
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'traverse_defs',4}}] )
	    -| ['compiler_generated'] )
	end
'traverse_clauses'/5 =
    %% Line 228
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 229
	case apply 'filter_match_fail'/1
		 (_cor4) of
	  %% Line 230
	  <[]> when 'true' ->
	      let <_cor5> =
		  %% Line 232
		  apply 'output'/1
		      ('none')
	      in  %% Line 232
		  {_cor5,_cor1}
	  %% Line 233
	  <Clauses1> when 'true' ->
	      %% Line 234
	      apply 'traverse_clauses'/6
		  (Clauses1, _cor3, _cor2, _cor1, _cor0, [])
	end
'traverse_clauses'/6 =
    %% Line 237
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Clause|Left],ArgFuns,Out,State,CurrentFun,Acc> when 'true' ->
	      let <Pats> =
		  %% Line 238
		  call 'cerl':'clause_pats'
		      (Clause)
	      in  let <Guard> =
		      %% Line 239
		      call 'cerl':'clause_guard'
			  (Clause)
		  in  let <Body> =
			  %% Line 240
			  call 'cerl':'clause_body'
			      (Clause)
		      in  let <Out1> =
			      %% Line 241
			      apply 'bind_pats_list'/3
				  (Pats, ArgFuns, Out)
			  in  %% Line 242
			      case apply 'traverse'/4
				       (Guard, Out1, State, CurrentFun) of
				<{_cor19,State2}> when 'true' ->
				    %% Line 243
				    case apply 'traverse'/4
					     (Body, Out1, State2, CurrentFun) of
				      <{BodyFuns,State3}> when 'true' ->
					  %% Line 244
					  apply 'traverse_clauses'/6
					      (Left, ArgFuns, Out, State3, CurrentFun, [BodyFuns|Acc])
				      ( <_cor11> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor11})
					-| ['compiler_generated'] )
				    end
				( <_cor10> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor10})
				  -| ['compiler_generated'] )
			      end
	  %% Line 245
	  <[],_X_ArgFuns,_X_Out,State,_X_CurrentFun,Acc> when 'true' ->
	      let <_cor12> =
		  %% Line 246
		  apply 'merge_outs'/1
		      (Acc)
	      in  %% Line 246
		  {_cor12,State}
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'traverse_clauses',6}}] )
	    -| ['compiler_generated'] )
	end
'filter_match_fail'/1 =
    %% Line 248
    fun (_cor0) ->
	case _cor0 of
	  <[Clause|[]]> when 'true' ->
	      let <Body> =
		  %% Line 249
		  call 'cerl':'clause_body'
		      (Clause)
	      in  %% Line 250
		  case call 'cerl':'type'
			   (Body) of
		    %% Line 251
		    <'primop'> when 'true' ->
			let <_cor2> =
			    %% Line 252
			    call 'cerl':'primop_name'
				(Body)
			in  %% Line 252
			    case call 'cerl':'atom_val'
				     (_cor2) of
			      %% Line 253
			      <'match_fail'> when 'true' ->
				  []
			      %% Line 254
			      <'raise'> when 'true' ->
				  []
			      %% Line 255
			      <_cor7> when 'true' ->
				  [Clause|[]]
			    end
		    %% Line 257
		    <_cor8> when 'true' ->
			[Clause|[]]
		  end
	  %% Line 259
	  <[H|T]> when 'true' ->
	      let <_cor5> =
		  %% Line 260
		  apply 'filter_match_fail'/1
		      (T)
	      in  %% Line 260
		  [H|_cor5]
	  %% Line 261
	  <[]> when 'true' ->
	      %% Line 264
	      []
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'filter_match_fail',1}}] )
	    -| ['compiler_generated'] )
	end
'remote_call'/3 =
    %% Line 266
    fun (_cor2,_cor1,_cor0) ->
	let <M> =
	    %% Line 267
	    call 'cerl':'call_module'
		(_cor2)
	in  let <F> =
		%% Line 268
		call 'cerl':'call_name'
		    (_cor2)
	    in  let <_cor5> =
		    %% Line 269
		    call 'cerl':'call_args'
			(_cor2)
		in  let <A> =
			%% Line 269
			call 'erlang':'length'
			    (_cor5)
		    in  let <_cor9> =
			    %% Line 270
			    ( case call 'cerl':'is_c_atom'
				       (M) of
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      call 'cerl':'is_c_atom'
					  (F)
				  -| ['compiler_generated'] )
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      'false'
				  -| ['compiler_generated'] )
				( <_cor7> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {( 'badarg'
						  -| ['compiler_generated'] ),_cor7}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			in  %% Line 270
			    case _cor9 of
			      %% Line 271
			      <'false'> when 'true' ->
				  let <_cor11> =
				      %% Line 273
				      apply 'set__singleton'/1
					  ('external')
				  in  let <_cor12> =
					  %% Line 273
					  apply 'output'/1
					      (_cor11)
				      in  let <_cor10> =
					      %% Line 273
					      apply 'state__add_esc'/2
						  (_cor1, _cor0)
					  in  %% Line 273
					      {_cor12,_cor10}
			      %% Line 274
			      <'true'> when 'true' ->
				  let <M1> =
				      %% Line 275
				      call 'cerl':'atom_val'
					  (M)
				  in  let <F1> =
					  %% Line 276
					  call 'cerl':'atom_val'
					      (F)
				      in  let <Literal> =
					      %% Line 277
					      call 'cerl_closurean':'is_literal_op'
						  (M1, F1, A)
					  in  %% Line 278
					      case call 'erl_bifs':'is_pure'
						       (M1, F1, A) of
						%% Line 279
						<'true'> when 'true' ->
						    %% Line 280
						    case Literal of
						      %% Line 281
						      <'true'> when 'true' ->
							  let <_cor16> =
							      %% Line 282
							      apply 'output'/1
								  ('none')
							  in  %% Line 282
							      {_cor16,_cor0}
						      %% Line 283
						      <'false'> when 'true' ->
							  let <_cor18> =
							      %% Line 284
							      apply 'set__singleton'/1
								  ('external')
							  in  let <_cor19> =
								  %% Line 284
								  apply 'output'/1
								      (_cor18)
							      in  let <_cor17> =
								      %% Line 284
								      apply 'state__add_esc'/2
									  (_cor1, _cor0)
								  in  %% Line 284
								      {_cor19,_cor17}
						      ( <_cor20> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_cor20})
							-| ['compiler_generated'] )
						    end
						%% Line 286
						<'false'> when 'true' ->
						    let <_cor22> =
							%% Line 287
							case call 'cerl_closurean':'is_escape_op'
								 (M1, F1, A) of
							  %% Line 288
							  <'true'> when 'true' ->
							      apply 'state__add_esc'/2
								  (_cor1, _cor0)
							  %% Line 289
							  <'false'> when 'true' ->
							      _cor0
							  ( <_cor21> when 'true' ->
								primop 'match_fail'
								    ({'case_clause',_cor21})
							    -| ['compiler_generated'] )
							end
						    in  %% Line 291
							case Literal of
							  %% Line 292
							  <'true'> when 'true' ->
							      let <_cor24> =
								  apply 'output'/1
								      ('none')
							      in  {_cor24,_cor22}
							  %% Line 293
							  <'false'> when 'true' ->
							      let <_cor25> =
								  apply 'add_external'/1
								      (_cor1)
							      in  {_cor25,_cor22}
							  ( <_cor26> when 'true' ->
								primop 'match_fail'
								    ({'case_clause',_cor26})
							    -| ['compiler_generated'] )
							end
						( <_cor27> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor27})
						  -| ['compiler_generated'] )
					      end
			      ( <_cor28> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor28})
				-| ['compiler_generated'] )
			    end
'primop'/3 =
    %% Line 298
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 299
	    call 'cerl':'primop_name'
		(_cor2)
	in  let <F> =
		%% Line 299
		call 'cerl':'atom_val'
		    (_cor3)
	    in  let <_cor5> =
		    %% Line 300
		    call 'cerl':'primop_args'
			(_cor2)
		in  let <A> =
			%% Line 300
			call 'erlang':'length'
			    (_cor5)
		    in  let <_cor8> =
			    %% Line 301
			    case call 'cerl_closurean':'is_escape_op'
				     (F, A) of
			      %% Line 302
			      <'true'> when 'true' ->
				  apply 'state__add_esc'/2
				      (_cor1, _cor0)
			      %% Line 303
			      <'false'> when 'true' ->
				  _cor0
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor7})
				-| ['compiler_generated'] )
			    end
			in  %% Line 305
			    case call 'cerl_closurean':'is_literal_op'
				     (F, A) of
			      %% Line 306
			      <'true'> when 'true' ->
				  let <_cor10> =
				      apply 'output'/1
					  ('none')
				  in  {_cor10,_cor8}
			      %% Line 307
			      <'false'> when 'true' ->
				  {_cor1,_cor8}
			      ( <_cor11> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor11})
				-| ['compiler_generated'] )
			    end
'set__singleton'/1 =
    %% Line 316
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 317
	    call 'sets':'new'
		()
	in  let <_cor2> =
		%% Line 317
		call 'sets':'add_element'
		    (_cor0, _cor1)
	    in  %% Line 317
		{'set',_cor2}
'set__from_list'/1 =
    %% Line 319
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 320
	    call 'sets':'from_list'
		(_cor0)
	in  %% Line 320
	    {'set',_cor1}
'set__is_element'/2 =
    %% Line 322
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_El,'none'> when 'true' ->
	      %% Line 323
	      'false'
	  %% Line 324
	  <El,{'set',Set}> when 'true' ->
	      %% Line 325
	      call 'sets':'is_element'
		  (El, Set)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'set__is_element',2}}] )
	    -| ['compiler_generated'] )
	end
'set__union'/2 =
    %% Line 327
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'none',Set> when 'true' ->
	      Set
	  %% Line 328
	  <Set,'none'> when 'true' ->
	      Set
	  %% Line 329
	  <{'set',S1},{'set',S2}> when 'true' ->
	      let <_cor2> =
		  call 'sets':'union'
		      (S1, S2)
	      in  {'set',_cor2}
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'set__union',2}}] )
	    -| ['compiler_generated'] )
	end
'set__to_ordsets'/1 =
    %% Line 331
    fun (_cor0) ->
	case _cor0 of
	  <'none'> when 'true' ->
	      []
	  %% Line 332
	  <{'set',Set}> when 'true' ->
	      let <_cor1> =
		  call 'sets':'to_list'
		      (Set)
	      in  call 'ordsets':'from_list'
		      (_cor1)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'set__to_ordsets',1}}] )
	    -| ['compiler_generated'] )
	end
'set__size'/1 =
    %% Line 334
    fun (_cor0) ->
	case _cor0 of
	  <'none'> when 'true' ->
	      0
	  %% Line 335
	  <{'set',Set}> when 'true' ->
	      call 'sets':'size'
		  (Set)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'set__size',1}}] )
	    -| ['compiler_generated'] )
	end
'set__filter'/2 =
    %% Line 337
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'set',Set},Fun> when 'true' ->
	      let <NewSet> =
		  %% Line 338
		  call 'sets':'filter'
		      (Fun, Set)
	      in  let <_cor3> =
		      %% Line 339
		      call 'sets':'size'
			  (NewSet)
		  in  %% Line 339
		      case <> of
			%% Line 340
			<>
			    when call 'erlang':'=:='
				  (_cor3,
				   0) ->
			    'none'
			%% Line 341
			<> when 'true' ->
			    {'set',NewSet}
		      end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'set__filter',2}}] )
	    -| ['compiler_generated'] )
	end
'output'/1 =
    %% Line 351
    fun (_cor0) ->
	case _cor0 of
	  <'none'> when 'true' ->
	      {'output','single','none'}
	  %% Line 352
	  <S = {'set',_cor2}> when 'true' ->
	      {'output','single',S}
	  %% Line 353
	  <List>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      {'output','list',List}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'output',1}}] )
	    -| ['compiler_generated'] )
	end
'merge_outs'/1 =
    %% Line 355
    fun (_cor0) ->
	case _cor0 of
	  <[H|T]> when 'true' ->
	      %% Line 356
	      apply 'merge_outs'/2
		  (T, H)
	  %% Line 357
	  <{'output','list',[H|T]}> when 'true' ->
	      %% Line 358
	      apply 'merge_outs'/2
		  (T, H)
	  %% Line 359
	  <{'output','list',[]}> when 'true' ->
	      %% Line 360
	      apply 'output'/1
		  ('none')
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'merge_outs',1}}] )
	    -| ['compiler_generated'] )
	end
'merge_outs'/2 =
    %% Line 362
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'output',_cor15,'none'}|Left],O> when 'true' ->
	      %% Line 363
	      apply 'merge_outs'/2
		  (Left, O)
	  %% Line 364
	  <[O|Left],{'output',_cor16,'none'}> when 'true' ->
	      %% Line 365
	      apply 'merge_outs'/2
		  (Left, O)
	  %% Line 366
	  <[{'output','single',S1}|Left],%% Line 367
					 {'output','single',S2}> when 'true' ->
	      let <_cor2> =
		  %% Line 368
		  apply 'set__union'/2
		      (S1, S2)
	      in  let <_cor3> =
		      %% Line 368
		      apply 'output'/1
			  (_cor2)
		  in  %% Line 368
		      apply 'merge_outs'/2
			  (Left, _cor3)
	  %% Line 369
	  <[{'output','list',L1}|Left],%% Line 370
				       {'output','list',L2}> when 'true' ->
	      let <_cor10> =
		  %% Line 371
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor7) ->
				case _cor7 of
				  <[{X,Y}|_cor5]> when 'true' ->
				      let <_cor8> =
					  apply 'merge_outs'/1
					      ([X|[Y|[]]])
				      in  let <_cor9> =
					      apply 'lc$^0'/1
						  (_cor5)
					  in  ( [_cor8|_cor9]
						-| ['compiler_generated'] )
				  ( <[_cor4|_cor5]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor5)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor7> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor7})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor6> =
			    call 'lists':'zip'
				(L1, L2)
			in  apply 'lc$^0'/1
				(_cor6)
		    -| ['list_comprehension'] )
	      in  let <_cor12> =
		      %% Line 372
		      apply 'output'/1
			  (_cor10)
		  in  %% Line 372
		      apply 'merge_outs'/2
			  (Left, _cor12)
	  %% Line 373
	  <[],Res> when 'true' ->
	      %% Line 374
	      Res
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'merge_outs',2}}] )
	    -| ['compiler_generated'] )
	end
'filter_outs'/2 =
    %% Line 376
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'output','single',S},Fun> when 'true' ->
	      let <_cor2> =
		  %% Line 377
		  apply 'set__filter'/2
		      (S, Fun)
	      in  %% Line 377
		  apply 'output'/1
		      (_cor2)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'filter_outs',2}}] )
	    -| ['compiler_generated'] )
	end
'add_external'/1 =
    %% Line 379
    fun (_cor0) ->
	case _cor0 of
	  <{'output','single',Set}> when 'true' ->
	      let <_cor1> =
		  %% Line 380
		  apply 'set__singleton'/1
		      ('external')
	      in  let <_cor2> =
		      %% Line 380
		      apply 'set__union'/2
			  (Set, _cor1)
		  in  %% Line 380
		      apply 'output'/1
			  (_cor2)
	  %% Line 381
	  <{'output','list',List}> when 'true' ->
	      let <_cor8> =
		  %% Line 382
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor5) ->
				case _cor5 of
				  <[O|_cor4]> when 'true' ->
				      let <_cor6> =
					  apply 'add_external'/1
					      (O)
				      in  let <_cor7> =
					      apply 'lc$^0'/1
						  (_cor4)
					  in  ( [_cor6|_cor7]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor5> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor5})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (List)
		    -| ['list_comprehension'] )
	      in  %% Line 382
		  apply 'output'/1
		      (_cor8)
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'add_external',1}}] )
	    -| ['compiler_generated'] )
	end
'is_only_external'/1 =
    %% Line 384
    fun (_cor0) ->
	case _cor0 of
	  <{'output','single',Set}> when 'true' ->
	      %% Line 385
	      ( case apply 'set__is_element'/2
			 ('external', Set) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor2> =
			    apply 'set__size'/1
				(Set)
			in  call 'erlang':'=:='
				(_cor2, 1)
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			'false'
		    -| ['compiler_generated'] )
		  ( <_cor1> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_cor1}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'is_only_external',1}}] )
	    -| ['compiler_generated'] )
	end
'map__new'/0 =
    %% Line 391
    fun () ->
	%% Line 392
	call 'dict':'new'
	    ()
'map__add'/3 =
    %% Line 394
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Label,'none',Map> when 'true' ->
	      %% Line 395
	      Map
	  %% Line 396
	  <Label,Set,Map> when 'true' ->
	      %% Line 397
	      case apply 'map__lookup'/2
		       (Label, Map) of
		%% Line 398
		<{'value',OldSet}> when 'true' ->
		    let <NewSet> =
			%% Line 399
			apply 'set__union'/2
			    (OldSet, Set)
		    in  %% Line 400
			apply 'map__store'/3
			    (Label, NewSet, Map)
		%% Line 401
		<'none'> when 'true' ->
		    %% Line 402
		    apply 'map__store'/3
			(Label, Set, Map)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	end
'map__store'/3 =
    %% Line 405
    fun (_cor2,_cor1,_cor0) ->
	%% Line 406
	call 'dict':'store'
	    (_cor2, _cor1, _cor0)
'map__lookup'/2 =
    %% Line 408
    fun (_cor1,_cor0) ->
	%% Line 409
	case call 'dict':'find'
		 (_cor1, _cor0) of
	  %% Line 410
	  <{'ok',Val}> when 'true' ->
	      {'value',Val}
	  %% Line 411
	  <'error'> when 'true' ->
	      'none'
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'map__finalize'/1 =
    %% Line 414
    fun (_cor0) ->
	let <_cor5> =
	    %% Line 415
	    ( fun (_cor2,_cor1) ->
		  case <_cor2,_cor1> of
		    <_X_Key,Set = {'set',_cor7}> when 'true' ->
			apply 'set__to_ordsets'/1
			    (Set)
		    %% Line 416
		    <_X_Key,{'output','single',Set}> when 'true' ->
			%% Line 417
			apply 'set__to_ordsets'/1
			    (Set)
		    ( <_cor4,_cor3> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor4,_cor3})
			    -| [{'function_name',{'-map__finalize/1-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-map__finalize/1-fun-0-'}}] )
	in  %% Line 415
	    call 'dict':'map'
		(_cor5, _cor0)
'bind_pats_list'/3 =
    %% Line 424
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Pats,{'output',_cor15,'none'},Map> when 'true' ->
	      %% Line 425
	      Map
	  %% Line 426
	  <[Pat|[]],O = {'output','single',_cor16},Map> when 'true' ->
	      let <_cor3> =
		  %% Line 427
		  apply 'all_vars'/1
		      (Pat)
	      in  %% Line 427
		  apply 'bind_single'/3
		      (_cor3, O, Map)
	  %% Line 428
	  <Pats,{'output','list',List},Map> when 'true' ->
	      %% Line 429
	      apply 'bind_pats_list'/3
		  (Pats, List, Map)
	  %% Line 430
	  <[Pat|PatLeft],%% Line 431
			 [O = {'output','single',_cor17}|SetLeft],%% Line 431
								  Map> when 'true' ->
	      let <_cor4> =
		  %% Line 432
		  apply 'all_vars'/1
		      (Pat)
	      in  let <Map1> =
		      %% Line 432
		      apply 'bind_single'/3
			  (_cor4, O, Map)
		  in  %% Line 433
		      apply 'bind_pats_list'/3
			  (PatLeft, SetLeft, Map1)
	  %% Line 434
	  <[Pat|PatLeft],%% Line 435
			 [{'output','list',List}|SetLeft],%% Line 435
							  Map> when 'true' ->
	      let <_cor10> =
		  %% Line 436
		  case call 'cerl':'is_c_values'
			   (Pat) of
		    %% Line 437
		    <'true'> when 'true' ->
			let <_cor6> =
			    call 'cerl':'values_es'
				(Pat)
			in  apply 'bind_pats_list'/3
				(_cor6, List, Map)
		    %% Line 438
		    <'false'> when 'true' ->
			let <_cor8> =
			    apply 'all_vars'/1
				(Pat)
			in  let <_cor7> =
				apply 'merge_outs'/1
				    (List)
			    in  apply 'bind_single'/3
				    (_cor8, _cor7, Map)
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor9})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 440
		  apply 'bind_pats_list'/3
		      (PatLeft, SetLeft, _cor10)
	  %% Line 441
	  <[],[],Map> when 'true' ->
	      %% Line 442
	      Map
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'bind_pats_list',3}}] )
	    -| ['compiler_generated'] )
	end
'bind_single'/3 =
    %% Line 444
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Var|Left],O,Map> when 'true' ->
	      let <_cor3> =
		  %% Line 445
		  call 'cerl_trees':'get_label'
		      (Var)
	      in  let <_cor4> =
		      %% Line 445
		      apply 'map__store'/3
			  (_cor3, O, Map)
		  in  %% Line 445
		      apply 'bind_single'/3
			  (Left, O, _cor4)
	  %% Line 446
	  <[],_X_O,Map> when 'true' ->
	      %% Line 447
	      Map
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'bind_single',3}}] )
	    -| ['compiler_generated'] )
	end
'bind_list'/3 =
    %% Line 449
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <List,O = {'output','single',_cor6},Map> when 'true' ->
	      %% Line 450
	      apply 'bind_single'/3
		  (List, O, Map)
	  %% Line 451
	  <List1,{'output','list',List2},Map> when 'true' ->
	      %% Line 452
	      apply 'bind_list1'/3
		  (List1, List2, Map)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'bind_list',3}}] )
	    -| ['compiler_generated'] )
	end
'bind_list1'/3 =
    %% Line 454
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Var|VarLeft],[O|OLeft],Map> when 'true' ->
	      let <_cor3> =
		  %% Line 455
		  call 'cerl_trees':'get_label'
		      (Var)
	      in  let <_cor4> =
		      %% Line 455
		      apply 'map__store'/3
			  (_cor3, O, Map)
		  in  %% Line 455
		      apply 'bind_list1'/3
			  (VarLeft, OLeft, _cor4)
	  %% Line 456
	  <[],[],Map> when 'true' ->
	      %% Line 457
	      Map
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'bind_list1',3}}] )
	    -| ['compiler_generated'] )
	end
'bind_defs'/2 =
    %% Line 459
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Var,Fun}|Left],Map> when 'true' ->
	      let <_cor2> =
		  %% Line 460
		  call 'cerl_trees':'get_label'
		      (Fun)
	      in  let <_cor3> =
		      %% Line 460
		      apply 'set__singleton'/1
			  (_cor2)
		  in  let <O> =
			  %% Line 460
			  apply 'output'/1
			      (_cor3)
		      in  let <_cor5> =
			      %% Line 461
			      call 'cerl_trees':'get_label'
				  (Var)
			  in  let <Map1> =
				  %% Line 461
				  apply 'map__store'/3
				      (_cor5, O, Map)
			      in  %% Line 462
				  apply 'bind_defs'/2
				      (Left, Map1)
	  %% Line 463
	  <[],Map> when 'true' ->
	      %% Line 464
	      Map
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'bind_defs',2}}] )
	    -| ['compiler_generated'] )
	end
'all_vars'/1 =
    %% Line 466
    fun (_cor0) ->
	%% Line 467
	apply 'all_vars'/2
	    (_cor0, [])
'all_vars'/2 =
    %% Line 469
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 470
	    ( fun (_cor4,_cor3) ->
		  %% Line 471
		  case call 'cerl':'is_c_var'
			   (_cor4) of
		    %% Line 472
		    <'true'> when 'true' ->
			[_cor4|_cor3]
		    %% Line 473
		    <'false'> when 'true' ->
			_cor3
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-all_vars/2-fun-0-'}}] )
	in  %% Line 470
	    call 'cerl_trees':'fold'
		(_cor7, _cor0, _cor1)
'state__new'/1 =
    %% Line 489
    fun (_cor0) ->
	let <_cor6> =
	    %% Line 490
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[X|_cor2]> when 'true' ->
				let <_cor5> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [X|_cor5]
				      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  let <_cor3> =
		      call 'cerl':'module_exports'
			  (_cor0)
		  in  apply 'lc$^0'/1
			  (_cor3)
	      -| ['list_comprehension'] )
	in  let <Exports> =
		%% Line 490
		apply 'set__from_list'/1
		    (_cor6)
	    in  let <_cor15> =
		    %% Line 492
		    ( letrec
			  'lc$^1'/1 =
			      fun (_cor11) ->
				  case _cor11 of
				    <[{Var,Fun}|_cor9]> when 'true' ->
					%% Line 493
					( case apply 'set__is_element'/2
						   (Var, Exports) of
					    <'true'> when 'true' ->
						let <_cor12> =
						    call 'cerl_trees':'get_label'
							(Fun)
						in  let <_cor13> =
							apply 'lc$^1'/1
							    (_cor9)
						    in  ( [_cor12|_cor13]
							  -| ['compiler_generated'] )
					    ( <'false'> when 'true' ->
						  apply 'lc$^1'/1
						      (_cor9)
					      -| ['compiler_generated'] )
					    ( <_cor14> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor14})
					      -| ['compiler_generated'] )
					  end
					  -| ['list_comprehension'] )
				    ( <[_cor8|_cor9]> when 'true' ->
					  apply 'lc$^1'/1
					      (_cor9)
				      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor11> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor11})
					    -| [{'function_name',{'lc$^1',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor10> =
			      call 'cerl':'module_defs'
				  (_cor0)
			  in  apply 'lc$^1'/1
				  (_cor10)
		      -| ['list_comprehension'] )
		in  let <_cor25> =
			%% Line 496
			( letrec
			      'lc$^2'/1 =
				  fun (_cor21) ->
				      case _cor21 of
					<[%% Line 497
					  {Attr,Args}|_cor18]> when 'true' ->
					    let <_cor20> =
						%% Line 498
						call 'cerl':'atom_val'
						    (Attr)
					    in  %% Line 498
						( case <> of
						    <>
							when call 'erlang':'=:='
							      (_cor20,
							       'on_load') ->
							let <_cor22> =
							    call 'cerl':'atom_val'
								(Args)
							in  let <_cor23> =
								apply 'lc$^2'/1
								    (_cor18)
							    in  ( [_cor22|_cor23]
								  -| ['compiler_generated'] )
						    ( <> when 'true' ->
							  apply 'lc$^2'/1
							      (_cor18)
						      -| ['compiler_generated'] )
						  end
						  -| ['list_comprehension'] )
					( <[_cor17|_cor18]> when 'true' ->
					      %% Line 497
					      apply 'lc$^2'/1
						  (_cor18)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor21> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor21})
						-| [{'function_name',{'lc$^2',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  let <_cor19> =
				  %% Line 497
				  call 'cerl':'module_attrs'
				      (_cor0)
			      in  apply 'lc$^2'/1
				      (_cor19)
			  -| ['list_comprehension'] )
		    in  let <OnLoadFAs> =
			    %% Line 496
			    call 'lists':'flatten'
				(_cor25)
			in  let <_cor35> =
				%% Line 499
				( letrec
				      'lc$^3'/1 =
					  fun (_cor31) ->
					      case _cor31 of
						<[%% Line 500
						  {Var,Fun}|_cor28]> when 'true' ->
						    let <_cor30> =
							%% Line 501
							call 'cerl':'var_name'
							    (Var)
						    in  %% Line 501
							( case call 'lists':'member'
								   (_cor30, OnLoadFAs) of
							    <'true'> when 'true' ->
								let <_cor32> =
								    call 'cerl_trees':'get_label'
									(Fun)
								in  let <_cor33> =
									apply 'lc$^3'/1
									    (_cor28)
								    in  ( [_cor32|_cor33]
									  -| ['compiler_generated'] )
							    ( <'false'> when 'true' ->
								  apply 'lc$^3'/1
								      (_cor28)
							      -| ['compiler_generated'] )
							    ( <_cor34> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_cor34})
							      -| ['compiler_generated'] )
							  end
							  -| ['list_comprehension'] )
						( <[_cor27|_cor28]> when 'true' ->
						      %% Line 500
						      apply 'lc$^3'/1
							  (_cor28)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor31> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor31})
							-| [{'function_name',{'lc$^3',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  let <_cor29> =
					  %% Line 500
					  call 'cerl':'module_defs'
					      (_cor0)
				      in  apply 'lc$^3'/1
					      (_cor29)
				  -| ['list_comprehension'] )
			    in  let <_cor37> =
				    %% Line 503
				    call 'erlang':'++'
					(_cor35, _cor15)
				in  let <InitEsc> =
					%% Line 503
					apply 'set__from_list'/1
					    (_cor37)
				    in  let <_cor39> =
					    %% Line 504
					    call 'dict':'new'
						()
					in  let <Arities> =
						%% Line 504
						call 'cerl_trees':'fold'
						    (( 'find_arities'/2
						       -| [{'id',{0,0,'-state__new/1-fun-0-'}}] ), _cor39, _cor0)
					    in  let <_cor43> =
						    %% Line 505
						    apply 'map__new'/0
							()
						in  let <_cor42> =
							%% Line 505
							apply 'map__new'/0
							    ()
						    in  let <_cor41> =
							    %% Line 506
							    apply 'map__new'/0
								()
							in  %% Line 505
							    {'state',_cor43,InitEsc,_cor42,%% Line 506
											   Arities,_cor41}
'find_arities'/2 =
    %% Line 508
    fun (_cor1,_cor0) ->
	%% Line 509
	case call 'cerl':'is_c_fun'
		 (_cor1) of
	  %% Line 510
	  <'true'> when 'true' ->
	      let <Label> =
		  %% Line 511
		  call 'cerl_trees':'get_label'
		      (_cor1)
	      in  let <Arity> =
		      %% Line 512
		      call 'cerl':'fun_arity'
			  (_cor1)
		  in  %% Line 513
		      call 'dict':'store'
			  (Label, Arity, _cor0)
	  %% Line 514
	  <'false'> when 'true' ->
	      _cor0
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'state__add_deps'/3 =
    %% Line 518
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_From,{'output',_cor9,'none'},State> when 'true' ->
	      %% Line 519
	      State
	  %% Line 520
	  <From,{'output','single',To},State = %% Line 521
					       {'state',Map,_cor10,_cor11,_cor12,_cor13}> when 'true' ->
	      let <_rec0> =
		  %% Line 523
		  apply 'map__add'/3
		      (From, To, Map)
	      in  %% Line 523
		  call 'erlang':'setelement'
		      (2, State, _rec0)
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'state__add_deps',3}}] )
	    -| ['compiler_generated'] )
	end
'state__add_letrecs'/3 =
    %% Line 525
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Var,Fun,State = {'state',_cor9,_cor10,_cor11,_cor12,Map}> when 'true' ->
	      let <_rec2> =
		  %% Line 526
		  apply 'map__store'/3
		      (Var, Fun, Map)
	      in  %% Line 526
		  call 'erlang':'setelement'
		      (6, State, _rec2)
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'state__add_letrecs',3}}] )
	    -| ['compiler_generated'] )
	end
'state__deps'/1 =
    %% Line 528
    fun (_cor0) ->
	case _cor0 of
	  <{'state',Deps,_cor2,_cor3,_cor4,_cor5}> when 'true' ->
	      %% Line 529
	      Deps
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'state__deps',1}}] )
	    -| ['compiler_generated'] )
	end
'state__letrecs'/1 =
    %% Line 531
    fun (_cor0) ->
	case _cor0 of
	  <{'state',_cor2,_cor3,_cor4,_cor5,Letrecs}> when 'true' ->
	      %% Line 532
	      Letrecs
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'state__letrecs',1}}] )
	    -| ['compiler_generated'] )
	end
'state__add_esc'/2 =
    %% Line 534
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'output',_cor7,'none'},State> when 'true' ->
	      %% Line 535
	      State
	  %% Line 536
	  <{'output','single',Set},State = %% Line 537
					   {'state',_cor8,Esc,_cor9,_cor10,_cor11}> when 'true' ->
	      let <_rec4> =
		  %% Line 538
		  apply 'set__union'/2
		      (Set, Esc)
	      in  %% Line 538
		  call 'erlang':'setelement'
		      (3, State, _rec4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'state__add_esc',2}}] )
	    -| ['compiler_generated'] )
	end
'state__esc'/1 =
    %% Line 540
    fun (_cor0) ->
	case _cor0 of
	  <{'state',_cor2,Esc,_cor3,_cor4,_cor5}> when 'true' ->
	      %% Line 541
	      Esc
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'state__esc',1}}] )
	    -| ['compiler_generated'] )
	end
'state__store_callsite'/4 =
    %% Line 543
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_X_From,{'output',_cor16,'none'},_X_CallArity,State> when 'true' ->
	      %% Line 544
	      State
	  %% Line 545
	  <From,To,CallArity,State = %% Line 546
				     {'state',_cor17,_cor18,Calls,Arities,_cor19}> when 'true' ->
	      let <Filter> =
		  %% Line 547
		  ( fun (_cor5) ->
			case _cor5 of
			  <'external'> when 'true' ->
			      'true'
			  %% Line 548
			  <Fun> when 'true' ->
			      let <_cor4> =
				  call 'dict':'fetch'
				      (Fun, Arities)
			      in  call 'erlang':'=:='
				      (CallArity, _cor4)
			end
		    -| [{'id',{0,0,'-state__store_callsite/4-fun-0-'}}] )
	      in  %% Line 550
		  case apply 'filter_outs'/2
			   (To, Filter) of
		    %% Line 551
		    <{'output',_cor20,'none'}> when 'true' ->
			State
		    %% Line 552
		    <To1> when 'true' ->
			let <_rec6> =
			    apply 'map__store'/3
				(From, To1, Calls)
			in  call 'erlang':'setelement'
				(4, State, _rec6)
		  end
	  ( <_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'state__store_callsite',4}}] )
	    -| ['compiler_generated'] )
	end
'state__calls'/1 =
    %% Line 555
    fun (_cor0) ->
	case _cor0 of
	  <{'state',_cor2,_cor3,Calls,_cor4,_cor5}> when 'true' ->
	      %% Line 556
	      Calls
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'state__calls',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('dialyzer_dep')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('dialyzer_dep', _cor0)
end