module 'dialyzer_dataflow' ['dispose_state'/1,
			    'format_args'/3,
			    'get_fun_types'/4,
			    'get_warnings'/5,
			    'module_info'/0,
			    'module_info'/1,
			    'state__add_warning'/2,
			    'state__cleanup'/1,
			    'state__duplicate'/1,
			    'state__get_callgraph'/1,
			    'state__get_races'/1,
			    'state__get_records'/1,
			    'state__put_callgraph'/2,
			    'state__put_races'/2,
			    'state__records_only'/1]
    attributes [%% Line 40
		'export_type' =
		    %% Line 40
		    [{'state',0}],
		%% Line 33
		'type' =
		    %% Line 33
		    [{'dial_ret',{'type',33,'union',[{'integer',33,0}|[{'integer',34,1}|[{'integer',35,2}]]]},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'dial_warn_tag',{'type',68,'union',[{'atom',68,'warn_return_no_exit'}|[{'atom',68,'warn_return_only_exit'}|[{'atom',69,'warn_not_called'}|[{'atom',69,'warn_non_proper_list'}|[{'atom',70,'warn_matching'}|[{'atom',70,'warn_opaque'}|[{'atom',70,'warn_fun_app'}|[{'atom',71,'warn_failing_call'}|[{'atom',71,'warn_bin_construction'}|[{'atom',72,'warn_contract_types'}|[{'atom',72,'warn_contract_syntax'}|[{'atom',73,'warn_contract_not_equal'}|[{'atom',73,'warn_contract_subtype'}|[{'atom',74,'warn_contract_supertype'}|[{'atom',74,'warn_callgraph'}|[{'atom',75,'warn_umatched_return'}|[{'atom',75,'warn_race_condition'}|[{'atom',76,'warn_behaviour'}|[{'atom',76,'warn_contract_range'}|[{'atom',77,'warn_undefined_callbacks'}|[{'atom',77,'warn_unknown'}]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'file_line',{'type',83,'tuple',[{'remote_type',83,[{'atom',83,'file'}|[{'atom',83,'filename'}|[[]]]]}|[{'type',83,'non_neg_integer',[]}]]},[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{'dial_warning',{'type',84,'tuple',[{'type',84,'dial_warn_tag',[]}|[{'type',84,'file_line',[]}|[{'type',84,'tuple',[{'type',84,'atom',[]}|[{'type',84,'list',[{'type',84,'term',[]}]}]]}]]]},[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{'dial_error',{'type',89,'any',[]},[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{'anal_type',{'type',96,'union',[{'atom',96,'succ_typings'}|[{'atom',96,'plt_build'}]]},[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{'anal_type1',{'type',97,'union',[{'type',97,'anal_type',[]}|[{'atom',97,'plt_add'}|[{'atom',97,'plt_check'}|[{'atom',97,'plt_remove'}]]]]},[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{'contr_constr',{'type',98,'tuple',[{'atom',98,'subtype'}|[{'remote_type',98,[{'atom',98,'erl_types'}|[{'atom',98,'erl_type'}|[[]]]]}|[{'remote_type',98,[{'atom',98,'erl_types'}|[{'atom',98,'erl_type'}|[[]]]]}]]]},[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{'contract_pair',{'type',99,'tuple',[{'remote_type',99,[{'atom',99,'erl_types'}|[{'atom',99,'erl_type'}|[[]]]]}|[{'type',99,'list',[{'type',99,'contr_constr',[]}]}]]},[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{'dial_define',{'type',100,'tuple',[{'type',100,'atom',[]}|[{'type',100,'term',[]}]]},[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{'dial_option',{'type',101,'tuple',[{'type',101,'atom',[]}|[{'type',101,'term',[]}]]},[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{'dial_options',{'type',102,'list',[{'type',102,'dial_option',[]}]},[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{'fopt',{'type',103,'union',[{'atom',103,'basename'}|[{'atom',103,'fullpath'}]]},[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{'format',{'type',104,'union',[{'atom',104,'formatted'}|[{'atom',104,'raw'}]]},[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{'label',{'type',105,'non_neg_integer',[]},[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{'rep_mode',{'type',106,'union',[{'atom',106,'quiet'}|[{'atom',106,'normal'}|[{'atom',106,'verbose'}]]]},[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{'start_from',{'type',107,'union',[{'atom',107,'byte_code'}|[{'atom',107,'src_code'}]]},[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{'mfa_or_funlbl',{'type',108,'union',[{'type',108,'label',[]}|[{'type',108,'mfa',[]}]]},[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{'solver',{'type',109,'union',[{'atom',109,'v1'}|[{'atom',109,'v2'}]]},[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{{'record','analysis'},[{'typed_record_field',{'record_field',115,{'atom',115,'analysis_pid'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'pid',[]}]]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'type'},{'atom',116,'succ_typings'}},{'type',116,'anal_type',[]}}|[{'typed_record_field',{'record_field',117,{'atom',117,'defines'},{'nil',117}},{'type',117,'list',[{'type',117,'dial_define',[]}]}}|[{'typed_record_field',{'record_field',118,{'atom',118,'doc_plt'}},{'type',118,'union',[{'atom',118,'undefined'}|[{'remote_type',118,[{'atom',118,'dialyzer_plt'}|[{'atom',118,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',119,{'atom',119,'files'},{'nil',119}},{'type',119,'list',[{'remote_type',119,[{'atom',119,'file'}|[{'atom',119,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'include_dirs'},{'nil',120}},{'type',120,'list',[{'remote_type',120,[{'atom',120,'file'}|[{'atom',120,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',121,{'atom',121,'start_from'},{'atom',121,'byte_code'}},{'type',121,'start_from',[]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'plt'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'remote_type',122,[{'atom',122,'dialyzer_plt'}|[{'atom',122,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'use_contracts'},{'atom',123,'true'}},{'type',123,'boolean',[]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'race_detection'},{'atom',124,'false'}},{'type',124,'boolean',[]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'behaviours_chk'},{'atom',125,'false'}},{'type',125,'boolean',[]}}|[{'typed_record_field',{'record_field',126,{'atom',126,'timing'},{'atom',126,'false'}},{'type',126,'union',[{'type',126,'boolean',[]}|[{'atom',126,'debug'}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'timing_server'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'remote_type',127,[{'atom',127,'dialyzer_timing'}|[{'atom',127,'timing_server'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'callgraph_file'},{'string',128,[]}},{'remote_type',128,[{'atom',128,'file'}|[{'atom',128,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'solvers'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'list',[{'type',129,'solver',[]}]}]]}}]]]]]]]]]]]]]]],[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{{'record','options'},[{'typed_record_field',{'record_field',131,{'atom',131,'files'},{'nil',131}},{'type',131,'list',[{'remote_type',131,[{'atom',131,'file'}|[{'atom',131,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'files_rec'},{'nil',132}},{'type',132,'list',[{'remote_type',132,[{'atom',132,'file'}|[{'atom',132,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',133,{'atom',133,'analysis_type'},{'atom',133,'succ_typings'}},{'type',133,'anal_type1',[]}}|[{'typed_record_field',{'record_field',134,{'atom',134,'timing'},{'atom',134,'false'}},{'type',134,'union',[{'type',134,'boolean',[]}|[{'atom',134,'debug'}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'defines'},{'nil',135}},{'type',135,'list',[{'type',135,'dial_define',[]}]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'from'},{'atom',136,'byte_code'}},{'type',136,'start_from',[]}}|[{'typed_record_field',{'record_field',137,{'atom',137,'get_warnings'},{'atom',137,'maybe'}},{'type',137,'union',[{'type',137,'boolean',[]}|[{'atom',137,'maybe'}]]}}|[{'typed_record_field',{'record_field',138,{'atom',138,'init_plts'},{'nil',138}},{'type',138,'list',[{'remote_type',138,[{'atom',138,'file'}|[{'atom',138,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',139,{'atom',139,'include_dirs'},{'nil',139}},{'type',139,'list',[{'remote_type',139,[{'atom',139,'file'}|[{'atom',139,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'output_plt'},{'atom',140,'none'}},{'type',140,'union',[{'atom',140,'none'}|[{'remote_type',140,[{'atom',140,'file'}|[{'atom',140,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',141,{'atom',141,'legal_warnings'},{'call',141,{'remote',141,{'atom',141,'ordsets'},{'atom',141,'new'}},[]}},{'remote_type',141,[{'atom',141,'ordsets'}|[{'atom',141,'ordset'}|[[{'type',141,'dial_warn_tag',[]}]]]]}}|[{'typed_record_field',{'record_field',142,{'atom',142,'report_mode'},{'atom',142,'normal'}},{'type',142,'rep_mode',[]}}|[{'typed_record_field',{'record_field',143,{'atom',143,'erlang_mode'},{'atom',143,'false'}},{'type',143,'boolean',[]}}|[{'typed_record_field',{'record_field',144,{'atom',144,'use_contracts'},{'atom',144,'true'}},{'type',144,'boolean',[]}}|[{'typed_record_field',{'record_field',145,{'atom',145,'output_file'},{'atom',145,'none'}},{'type',145,'union',[{'atom',145,'none'}|[{'remote_type',145,[{'atom',145,'file'}|[{'atom',145,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',146,{'atom',146,'output_format'},{'atom',146,'formatted'}},{'type',146,'format',[]}}|[{'typed_record_field',{'record_field',147,{'atom',147,'filename_opt'},{'atom',147,'basename'}},{'type',147,'fopt',[]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'callgraph_file'},{'string',148,[]}},{'remote_type',148,[{'atom',148,'file'}|[{'atom',148,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'check_plt'},{'atom',149,'true'}},{'type',149,'boolean',[]}}|[{'typed_record_field',{'record_field',150,{'atom',150,'solvers'},{'nil',150}},{'type',150,'list',[{'type',150,'solver',[]}]}}]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 152
		'type' =
		    %% Line 152
		    [{{'record','contract'},[{'typed_record_field',{'record_field',152,{'atom',152,'contracts'},{'nil',152}},{'type',152,'list',[{'type',152,'contract_pair',[]}]}}|[{'typed_record_field',{'record_field',153,{'atom',153,'args'},{'nil',153}},{'type',153,'list',[{'remote_type',153,[{'atom',153,'erl_types'}|[{'atom',153,'erl_type'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',154,{'atom',154,'forms'},{'nil',154}},{'type',154,'list',[{'type',154,'tuple',[{'var',154,'_'}|[{'var',154,'_'}]]}]}}]]],[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{'type',{'remote_type',89,[{'atom',89,'erl_types'}|[{'atom',89,'erl_type'}|[[]]]]},[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{'types',{'remote_type',90,[{'atom',90,'erl_types'}|[{'atom',90,'type_table'}|[[]]]]},[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{{'record','state'},[{'typed_record_field',{'record_field',96,{'atom',96,'callgraph'}},{'type',96,'union',[{'atom',96,'undefined'}|[{'remote_type',96,[{'atom',96,'dialyzer_callgraph'}|[{'atom',96,'callgraph'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',97,{'atom',97,'envs'}},{'type',97,'union',[{'atom',97,'undefined'}|[{'type',97,'env_tab',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'fun_tab'}},{'type',98,'union',[{'atom',98,'undefined'}|[{'type',98,'fun_tab',[]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'plt'}},{'type',99,'union',[{'atom',99,'undefined'}|[{'remote_type',99,[{'atom',99,'dialyzer_plt'}|[{'atom',99,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',100,{'atom',100,'opaques'}},{'type',100,'union',[{'atom',100,'undefined'}|[{'type',100,'list',[{'type',100,'type',[]}]}]]}}|[{'typed_record_field',{'record_field',101,{'atom',101,'races'},{'call',101,{'remote',101,{'atom',101,'dialyzer_races'},{'atom',101,'new'}},[]}},{'remote_type',101,[{'atom',101,'dialyzer_races'}|[{'atom',101,'races'}|[[]]]]}}|[{'typed_record_field',{'record_field',102,{'atom',102,'records'},{'call',102,{'remote',102,{'atom',102,'dict'},{'atom',102,'new'}},[]}},{'type',102,'types',[]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'tree_map'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'remote_type',103,[{'atom',103,'dict'}|[{'atom',103,'dict'}|[[{'type',103,'label',[]}|[{'remote_type',103,[{'atom',103,'cerl'}|[{'atom',103,'cerl'}|[[]]]]}]]]]]}]]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'warning_mode'},{'atom',104,'false'}},{'type',104,'boolean',[]}}|[{'typed_record_field',{'record_field',105,{'atom',105,'warnings'},{'nil',105}},{'type',105,'list',[{'type',105,'dial_warning',[]}]}}|[{'typed_record_field',{'record_field',106,{'atom',106,'work'}},{'type',106,'union',[{'atom',106,'undefined'}|[{'type',106,'tuple',[{'type',106,'list',[{'var',106,'_'}]}|[{'type',106,'list',[{'var',106,'_'}]}|[{'remote_type',106,[{'atom',106,'sets'}|[{'atom',106,'set'}|[[]]]]}]]]}]]}}|[{'typed_record_field',{'record_field',107,{'atom',107,'module'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'type',107,'module',[]}]]}}]]]]]]]]]]]],[]}],
		%% Line 110
		'type' =
		    %% Line 110
		    [{{'record','map'},[{'typed_record_field',{'record_field',110,{'atom',110,'dict'},{'call',110,{'remote',110,{'atom',110,'dict'},{'atom',110,'new'}},[]}},{'type',110,'type_tab',[]}}|[{'typed_record_field',{'record_field',111,{'atom',111,'subst'},{'call',111,{'remote',111,{'atom',111,'dict'},{'atom',111,'new'}},[]}},{'type',111,'subst_tab',[]}}|[{'typed_record_field',{'record_field',112,{'atom',112,'modified'},{'nil',112}},{'type',112,'list',[{'ann_type',112,[{'var',112,'Key'}|[{'type',112,'term',[]}]]}]}}|[{'typed_record_field',{'record_field',113,{'atom',113,'modified_stack'},{'nil',113}},{'type',113,'list',[{'type',113,'tuple',[{'type',113,'list',[{'ann_type',113,[{'var',113,'Key'}|[{'type',113,'term',[]}]]}]}|[{'type',113,'reference',[]}]]}]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'ref'},{'atom',114,'undefined'}},{'type',114,'union',[{'type',114,'reference',[]}|[{'atom',114,'undefined'}]]}}]]]]],[]}],
		%% Line 116
		'type' =
		    %% Line 116
		    [{'nowarn',{'remote_type',116,[{'atom',116,'dialyzer_analysis_callgraph'}|[{'atom',116,'no_warn_unused'}|[[]]]]},[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{'env_tab',{'remote_type',117,[{'atom',117,'dict'}|[{'atom',117,'dict'}|[[{'type',117,'label',[]}|[{'type',117,'record',[{'atom',117,'map'}]}]]]]]},[]}],
		%% Line 118
		'type' =
		    %% Line 118
		    [{'fun_entry',{'type',118,'tuple',[{'ann_type',118,[{'var',118,'Args'}|[{'type',118,'list',[{'type',118,'type',[]}]}]]}|[{'ann_type',118,[{'var',118,'RetType'}|[{'type',118,'type',[]}]]}]]},[]}],
		%% Line 119
		'type' =
		    %% Line 119
		    [{'fun_tab',{'remote_type',119,[{'atom',119,'dict'}|[{'atom',119,'dict'}|[[{'type',119,'union',[{'atom',119,'top'}|[{'type',119,'label',[]}]]}|[{'type',120,'union',[{'type',120,'tuple',[{'atom',120,'not_handled'}|[{'type',120,'fun_entry',[]}]]}|[{'type',120,'fun_entry',[]}]]}]]]]]},[]}],
		%% Line 121
		'type' =
		    %% Line 121
		    [{'key',{'type',121,'union',[{'type',121,'label',[]}|[{'remote_type',121,[{'atom',121,'cerl'}|[{'atom',121,'cerl'}|[[]]]]}]]},[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{'type_tab',{'remote_type',122,[{'atom',122,'dict'}|[{'atom',122,'dict'}|[[{'type',122,'key',[]}|[{'type',122,'type',[]}]]]]]},[]}],
		%% Line 123
		'type' =
		    %% Line 123
		    [{'subst_tab',{'remote_type',123,[{'atom',123,'dict'}|[{'atom',123,'dict'}|[[{'type',123,'key',[]}|[{'remote_type',123,[{'atom',123,'cerl'}|[{'atom',123,'cerl'}|[[]]]]}]]]]]},[]}],
		%% Line 127
		'opaque' =
		    %% Line 127
		    [{'state',{'type',127,'record',[{'atom',127,'state'}]},[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{'fun_types',{'remote_type',131,[{'atom',131,'dict'}|[{'atom',131,'dict'}|[[{'type',131,'label',[]}|[{'type',131,'type',[]}]]]]]},[]}],
		%% Line 133
		'spec' =
		    %% Line 133
		    [{{'get_warnings',5},[{'type',133,'fun',[{'type',133,'product',[{'remote_type',133,[{'atom',133,'cerl'}|[{'atom',133,'c_module'}|[[]]]]}|[{'remote_type',133,[{'atom',133,'dialyzer_plt'}|[{'atom',133,'plt'}|[[]]]]}|[{'remote_type',134,[{'atom',134,'dialyzer_callgraph'}|[{'atom',134,'callgraph'}|[[]]]]}|[{'type',134,'types',[]}|[{'type',134,'nowarn',[]}]]]]]}|[{'type',135,'tuple',[{'type',135,'list',[{'type',135,'dial_warning',[]}]}|[{'type',135,'fun_types',[]}]]}]]}]}],
		%% Line 144
		'spec' =
		    %% Line 144
		    [{{'get_fun_types',4},[{'type',144,'fun',[{'type',144,'product',[{'remote_type',144,[{'atom',144,'cerl'}|[{'atom',144,'c_module'}|[[]]]]}|[{'remote_type',144,[{'atom',144,'dialyzer_plt'}|[{'atom',144,'plt'}|[[]]]]}|[{'remote_type',145,[{'atom',145,'dialyzer_callgraph'}|[{'atom',145,'callgraph'}|[[]]]]}|[{'type',146,'types',[]}]]]]}|[{'type',146,'fun_types',[]}]]}]}],
		%% Line 1640
		'spec' =
		    %% Line 1640
		    [{{'bind_opaque_pats',4},[{'type',1640,'fun',[{'type',1640,'product',[{'type',1640,'type',[]}|[{'type',1640,'type',[]}|[{'remote_type',1640,[{'atom',1640,'cerl'}|[{'atom',1640,'c_literal'}|[[]]]]}|[{'type',1640,'state',[]}]]]]}|[{'type',1641,'no_return',[]}]]}]}],
		%% Line 2323
		'type' =
		    %% Line 2323
		    [{'eval',{'type',2323,'union',[{'atom',2323,'pos'}|[{'atom',2323,'neg'}|[{'atom',2323,'dont_know'}]]]},[]}],
		%% Line 2325
		'spec' =
		    %% Line 2325
		    [{{'signal_guard_fail',4},[{'type',2325,'fun',[{'type',2325,'product',[{'type',2325,'eval',[]}|[{'remote_type',2325,[{'atom',2325,'cerl'}|[{'atom',2325,'c_call'}|[[]]]]}|[{'type',2325,'list',[{'type',2325,'type',[]}]}|[{'type',2326,'state',[]}]]]]}|[{'type',2326,'no_return',[]}]]}]}],
		%% Line 2331
		'spec' =
		    %% Line 2331
		    [{{'signal_guard_fatal_fail',4},[{'type',2331,'fun',[{'type',2331,'product',[{'type',2331,'eval',[]}|[{'remote_type',2331,[{'atom',2331,'cerl'}|[{'atom',2331,'c_call'}|[[]]]]}|[{'type',2331,'list',[{'remote_type',2331,[{'atom',2331,'erl_types'}|[{'atom',2331,'erl_type'}|[[]]]]}]}|[{'type',2332,'state',[]}]]]]}|[{'type',2332,'no_return',[]}]]}]}],
		%% Line 2823
		'spec' =
		    %% Line 2823
		    [{{'state__add_warning',2},[{'type',2823,'fun',[{'type',2823,'product',[{'type',2823,'dial_warning',[]}|[{'type',2823,'state',[]}]]}|[{'type',2823,'state',[]}]]}]}],
		%% Line 3158
		'spec' =
		    %% Line 3158
		    [{{'state__cleanup',1},[{'type',3158,'fun',[{'type',3158,'product',[{'type',3158,'state',[]}]}|[{'type',3158,'state',[]}]]}]}],
		%% Line 3167
		'spec' =
		    %% Line 3167
		    [{{'state__duplicate',1},[{'type',3167,'fun',[{'type',3167,'product',[{'type',3167,'state',[]}]}|[{'type',3167,'state',[]}]]}]}],
		%% Line 3172
		'spec' =
		    %% Line 3172
		    [{{'dispose_state',1},[{'type',3172,'fun',[{'type',3172,'product',[{'type',3172,'state',[]}]}|[{'atom',3172,'ok'}]]}]}],
		%% Line 3177
		'spec' =
		    %% Line 3177
		    [{{'state__get_callgraph',1},[{'type',3177,'fun',[{'type',3177,'product',[{'type',3177,'state',[]}]}|[{'remote_type',3177,[{'atom',3177,'dialyzer_callgraph'}|[{'atom',3177,'callgraph'}|[[]]]]}]]}]}],
		%% Line 3182
		'spec' =
		    %% Line 3182
		    [{{'state__get_races',1},[{'type',3182,'fun',[{'type',3182,'product',[{'type',3182,'state',[]}]}|[{'remote_type',3182,[{'atom',3182,'dialyzer_races'}|[{'atom',3182,'races'}|[[]]]]}]]}]}],
		%% Line 3187
		'spec' =
		    %% Line 3187
		    [{{'state__get_records',1},[{'type',3187,'fun',[{'type',3187,'product',[{'type',3187,'state',[]}]}|[{'type',3187,'types',[]}]]}]}],
		%% Line 3192
		'spec' =
		    %% Line 3192
		    [{{'state__put_callgraph',2},[{'type',3192,'fun',[{'type',3192,'product',[{'remote_type',3192,[{'atom',3192,'dialyzer_callgraph'}|[{'atom',3192,'callgraph'}|[[]]]]}|[{'type',3192,'state',[]}]]}|[{'type',3193,'state',[]}]]}]}],
		%% Line 3198
		'spec' =
		    %% Line 3198
		    [{{'state__put_races',2},[{'type',3198,'fun',[{'type',3198,'product',[{'remote_type',3198,[{'atom',3198,'dialyzer_races'}|[{'atom',3198,'races'}|[[]]]]}|[{'type',3198,'state',[]}]]}|[{'type',3198,'state',[]}]]}]}],
		%% Line 3203
		'spec' =
		    %% Line 3203
		    [{{'state__records_only',1},[{'type',3203,'fun',[{'type',3203,'product',[{'type',3203,'state',[]}]}|[{'type',3203,'state',[]}]]}]}],
		%% Line 3290
		'spec' =
		    %% Line 3290
		    [{{'format_args',3},[{'type',3290,'fun',[{'type',3290,'product',[{'type',3290,'list',[{'remote_type',3290,[{'atom',3290,'cerl'}|[{'atom',3290,'cerl'}|[[]]]]}]}|[{'type',3290,'list',[{'type',3290,'type',[]}]}|[{'type',3290,'state',[]}]]]}|[{'type',3291,'nonempty_string',[]}]]}]}],
		%% Line 3326
		'spec' =
		    %% Line 3326
		    [{{'format_type',2},[{'type',3326,'fun',[{'type',3326,'product',[{'type',3326,'type',[]}|[{'type',3326,'state',[]}]]}|[{'type',3326,'string',[]}]]}]}],
		%% Line 3331
		'spec' =
		    %% Line 3331
		    [{{'format_field_diffs',2},[{'type',3331,'fun',[{'type',3331,'product',[{'type',3331,'type',[]}|[{'type',3331,'state',[]}]]}|[{'type',3331,'string',[]}]]}]}],
		%% Line 3336
		'spec' =
		    %% Line 3336
		    [{{'format_sig_args',2},[{'type',3336,'fun',[{'type',3336,'product',[{'type',3336,'type',[]}|[{'type',3336,'state',[]}]]}|[{'type',3336,'string',[]}]]}]}]]
'get_warnings'/5 =
    %% Line 137
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <State1> =
	    %% Line 138
	    apply 'analyze_module'/5
		(_cor4, _cor3, _cor2, _cor1, 'true')
	in  let <_cor6> =
		%% Line 140
		apply 'state__get_warnings'/2
		    (State1, _cor0)
	    in  let <State2> =
		    %% Line 140
		    apply 'state__renew_warnings'/2
			(_cor6, State1)
		in  let <State3> =
			%% Line 141
			apply 'state__get_race_warnings'/1
			    (State2)
		    in  %% Line 142
			( case State3 of
			    ( <( {'state',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_rec0,_cor26,_cor27}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor9> =
				      apply 'state__all_fun_types'/1
					  (State3)
				  in  {_rec0,_cor9}
			      -| ['compiler_generated'] )
			    ( <_cor28> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
'get_fun_types'/4 =
    %% Line 148
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <State> =
	    %% Line 149
	    apply 'analyze_module'/5
		(_cor3, _cor2, _cor1, _cor0, 'false')
	in  %% Line 150
	    apply 'state__all_fun_types'/1
		(State)
'analyze_module'/5 =
    %% Line 158
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 159
	    apply 'debug_pp'/2
		(_cor4, 'false')
	    let <_cor5> =
		%% Line 160
		call 'cerl':'module_name'
		    (_cor4)
	    in  let <Module> =
		    %% Line 160
		    call 'cerl':'atom_val'
			(_cor5)
		in  let <TopFun> =
			%% Line 161
			call 'cerl':'ann_c_fun'
			    ([{'label','top'}], [], _cor4)
		    in  let <State> =
			    %% Line 162
			    apply 'state__new'/5
				(_cor2, TopFun, _cor3, Module, _cor1)
			in  let <_cor9> =
				%% Line 163
				call 'erlang':'not'
				    (_cor0)
			    in  let <State1> =
				    %% Line 163
				    apply 'state__race_analysis'/2
					(_cor9, State)
				in  let <State2> =
					%% Line 164
					apply 'analyze_loop'/1
					    (State1)
				    in  %% Line 165
					case _cor0 of
					  %% Line 166
					  <'true'> when 'true' ->
					      let <State3> =
						  %% Line 167
						  apply 'state__set_warning_mode'/1
						      (State2)
					      in  let <State4> =
						      %% Line 168
						      apply 'analyze_loop'/1
							  (State3)
						  in  %% Line 169
						      call 'dialyzer_races':'race'
							  (State4)
					  %% Line 170
					  <'false'> when 'true' ->
					      %% Line 171
					      State2
					  ( <_cor14> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor14})
					    -| ['compiler_generated'] )
					end
'analyze_loop'/1 =
    %% Line 174
    fun (_cor0) ->
	%% Line 175
	case apply 'state__get_work'/1
		 (_cor0) of
	  %% Line 176
	  <'none'> when 'true' ->
	      _cor0
	  %% Line 177
	  <{Fun,NewState1}> when 'true' ->
	      %% Line 178
	      case apply 'state__get_args_and_status'/2
		       (Fun, NewState1) of
		<{ArgTypes,IsCalled}> when 'true' ->
		    %% Line 179
		    case IsCalled of
		      %% Line 180
		      <'false'> when 'true' ->
			  %% Line 184
			  apply 'analyze_loop'/1
			      (NewState1)
		      %% Line 185
		      <'true'> when 'true' ->
			  %% Line 186
			  case apply 'state__fun_env'/2
				   (Fun, NewState1) of
			    %% Line 187
			    <'none'> when 'true' ->
				%% Line 191
				apply 'analyze_loop'/1
				    (NewState1)
			    %% Line 192
			    <Map> when 'true' ->
				let <Vars> =
				    %% Line 196
				    call 'cerl':'fun_vars'
					(Fun)
				in  let <Map1> =
					%% Line 197
					apply 'enter_type_lists'/3
					    (Vars, ArgTypes, Map)
				    in  let <Body> =
					    %% Line 198
					    call 'cerl':'fun_body'
						(Fun)
					in  let <FunLabel> =
						%% Line 199
						apply 'get_label'/1
						    (Fun)
					    in  let <IsRaceAnalysisEnabled> =
						    %% Line 200
						    apply 'is_race_analysis_enabled'/1
							(_cor0)
						in  let <_cor10> =
							%% Line 202
							case IsRaceAnalysisEnabled of
							  %% Line 203
							  <'true'> when 'true' ->
							      let <_cor7> =
								  %% Line 205
								  apply 'state__lookup_name'/2
								      (FunLabel, NewState1)
							      in  let <NewState2> =
								      %% Line 204
								      apply 'state__renew_curr_fun'/3
									  (_cor7, %% Line 205
										  FunLabel, %% Line 206
											    NewState1)
								  in  %% Line 207
								      apply 'state__renew_race_list'/3
									  ([], 0, NewState2)
							  %% Line 208
							  <'false'> when 'true' ->
							      NewState1
							  ( <_cor9> when 'true' ->
								primop 'match_fail'
								    ({'case_clause',_cor9})
							    -| ['compiler_generated'] )
							end
						    in  %% Line 210
							case %% Line 211
							     apply 'traverse'/3
								 (Body, Map1, _cor10) of
							  <{NewState4,_X_Map2,BodyType}> when 'true' ->
							      let <_cor14> =
								  %% Line 216
								  case IsRaceAnalysisEnabled of
								    %% Line 217
								    <'true'> when 'true' ->
									apply 'renew_race_code'/1
									    (NewState4)
								    %% Line 218
								    <'false'> when 'true' ->
									NewState4
								    ( <_cor13> when 'true' ->
									  primop 'match_fail'
									      ({'case_clause',_cor13})
								      -| ['compiler_generated'] )
								  end
							      in  let <NewState6> =
								      %% Line 221
								      apply 'state__update_fun_entry'/4
									  (Fun, ArgTypes, BodyType, _cor14)
								  in  %% Line 224
								      apply 'analyze_loop'/1
									  (NewState6)
							  ( <_cor12> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_cor12})
							    -| ['compiler_generated'] )
							end
			  end
		      ( <_cor_variable> when 'true' ->
			    call 'erlang':'error'
				('badarg')
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor19> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor19})
	    -| ['compiler_generated'] )
	end
'traverse'/3 =
    %% Line 229
    fun (_cor2,_cor1,_cor0) ->
	%% Line 232
	case call 'cerl':'type'
		 (_cor2) of
	  %% Line 233
	  <'alias'> when 'true' ->
	      let <_cor3> =
		  %% Line 236
		  call 'cerl':'alias_pat'
		      (_cor2)
	      in  %% Line 236
		  apply 'traverse'/3
		      (_cor3, _cor1, _cor0)
	  %% Line 237
	  <'apply'> when 'true' ->
	      %% Line 238
	      apply 'handle_apply'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 239
	  <'binary'> when 'true' ->
	      let <Segs> =
		  %% Line 240
		  call 'cerl':'binary_segments'
		      (_cor2)
	      in  %% Line 241
		  case apply 'traverse_list'/3
			   (Segs, _cor1, _cor0) of
		    <{State1,Map1,SegTypes}> when 'true' ->
			let <_cor6> =
			    %% Line 242
			    call 'erl_types':'t_bitstr_concat'
				(SegTypes)
			in  %% Line 242
			    {State1,Map1,_cor6}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  %% Line 243
	  <'bitstr'> when 'true' ->
	      %% Line 244
	      apply 'handle_bitstr'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 245
	  <'call'> when 'true' ->
	      %% Line 246
	      apply 'handle_call'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 247
	  <'case'> when 'true' ->
	      %% Line 248
	      apply 'handle_case'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 249
	  <'catch'> when 'true' ->
	      let <_cor7> =
		  %% Line 250
		  call 'cerl':'catch_body'
		      (_cor2)
	      in  %% Line 250
		  case apply 'traverse'/3
			   (_cor7, _cor1, _cor0) of
		    <{State1,_X_Map1,_cor54}> when 'true' ->
			let <_cor9> =
			    %% Line 251
			    call 'erl_types':'t_any'
				()
			in  %% Line 251
			    {State1,_cor1,_cor9}
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor8})
		      -| ['compiler_generated'] )
		  end
	  %% Line 252
	  <'cons'> when 'true' ->
	      %% Line 253
	      apply 'handle_cons'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 254
	  <'fun'> when 'true' ->
	      let <Type> =
		  %% Line 255
		  apply 'state__fun_type'/2
		      (_cor2, _cor0)
	      in  %% Line 256
		  case apply 'state__warning_mode'/1
			   (_cor0) of
		    %% Line 257
		    <'true'> when 'true' ->
			{_cor0,_cor1,Type}
		    %% Line 258
		    <'false'> when 'true' ->
			let <_cor11> =
			    %% Line 259
			    apply 'get_label'/1
				(_cor2)
			in  let <State2> =
				%% Line 259
				apply 'state__add_work'/2
				    (_cor11, _cor0)
			    in  let <State3> =
				    %% Line 260
				    apply 'state__update_fun_env'/3
					(_cor2, _cor1, State2)
				in  %% Line 261
				    {State3,_cor1,Type}
		    ( <_cor14> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor14})
		      -| ['compiler_generated'] )
		  end
	  %% Line 263
	  <'let'> when 'true' ->
	      %% Line 264
	      apply 'handle_let'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 265
	  <'letrec'> when 'true' ->
	      let <Defs> =
		  %% Line 266
		  call 'cerl':'letrec_defs'
		      (_cor2)
	      in  let <Body> =
		      %% Line 267
		      call 'cerl':'letrec_body'
			  (_cor2)
		  in  let <FoldFun> =
			  %% Line 270
			  ( fun (_cor20,_cor19) ->
				case <_cor20,_cor19> of
				  <{Var,Fun},{AccState,AccMap}> when 'true' ->
				      %% Line 271
				      case %% Line 272
					   apply 'traverse'/3
					       (Fun, AccMap, AccState) of
					<{NewAccState,NewAccMap0,FunType}> when 'true' ->
					    let <NewAccMap> =
						%% Line 273
						apply 'enter_type'/3
						    (Var, FunType, NewAccMap0)
					    in  %% Line 274
						{NewAccState,NewAccMap}
					( <_cor17> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor17})
					  -| ['compiler_generated'] )
				      end
				  ( <_cor22,_cor21> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor22,_cor21})
					  -| [{'function_name',{'-traverse/3-fun-0-',2}}] )
				    -| ['compiler_generated'] )
				end
			    -| [{'id',{0,0,'-traverse/3-fun-0-'}}] )
		      in  %% Line 276
			  case call 'lists':'foldl'
				   (FoldFun, {_cor0,_cor1}, Defs) of
			    <{State1,Map1}> when 'true' ->
				%% Line 277
				apply 'traverse'/3
				    (Body, Map1, State1)
			    ( <_cor24> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor24})
			      -| ['compiler_generated'] )
			  end
	  %% Line 278
	  <'literal'> when 'true' ->
	      let <Type> =
		  %% Line 279
		  apply 'literal_type'/1
		      (_cor2)
	      in  %% Line 280
		  {_cor0,_cor1,Type}
	  %% Line 281
	  <'module'> when 'true' ->
	      %% Line 282
	      apply 'handle_module'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 283
	  <'primop'> when 'true' ->
	      let <_cor26> =
		  %% Line 285
		  call 'cerl':'primop_name'
		      (_cor2)
	      in  let <_cor28> =
		      %% Line 285
		      case call 'cerl':'atom_val'
			       (_cor26) of
			%% Line 286
			<'match_fail'> when 'true' ->
			    call 'erl_types':'t_none'
				()
			%% Line 287
			<'raise'> when 'true' ->
			    call 'erl_types':'t_none'
				()
			%% Line 288
			<'bs_init_writable'> when 'true' ->
			    call 'erl_types':'t_from_term'
				(#{}#)
			%% Line 289
			<Other> when 'true' ->
			    call 'erlang':'error'
				({'Unsupported primop',Other})
		      end
		  in  %% Line 291
		      {_cor0,_cor1,_cor28}
	  %% Line 292
	  <'receive'> when 'true' ->
	      %% Line 293
	      apply 'handle_receive'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 294
	  <'seq'> when 'true' ->
	      let <Arg> =
		  %% Line 295
		  call 'cerl':'seq_arg'
		      (_cor2)
	      in  let <Body> =
		      %% Line 296
		      call 'cerl':'seq_body'
			  (_cor2)
		  in  %% Line 297
		      case apply 'traverse'/3
			       (Arg, _cor1, _cor0) of
			<SMA = {State1,Map1,ArgType}> when 'true' ->
			    %% Line 298
			    case call 'erl_types':'t_is_none_or_unit'
				     (ArgType) of
			      %% Line 299
			      <'true'> when 'true' ->
				  %% Line 300
				  SMA
			      %% Line 301
			      <'false'> when 'true' ->
				  let <_cor39> =
				      %% Line 305
				      ( case call 'erl_types':'t_is_any'
						 (ArgType) of
					  ( <( 'true'
					       -| ['compiler_generated'] )> when 'true' ->
						'true'
					    -| ['compiler_generated'] )
					  ( <( 'false'
					       -| ['compiler_generated'] )> when 'true' ->
						%% Line 306
						( case apply 't_is_simple'/2
							   (ArgType, _cor0) of
						    ( <( 'true'
							 -| ['compiler_generated'] )> when 'true' ->
							  'true'
						      -| ['compiler_generated'] )
						    ( <( 'false'
							 -| ['compiler_generated'] )> when 'true' ->
							  %% Line 307
							  ( case apply 'is_call_to_send'/1
								     (Arg) of
							      ( <( 'true'
								   -| ['compiler_generated'] )> when 'true' ->
								    'true'
								-| ['compiler_generated'] )
							      ( <( 'false'
								   -| ['compiler_generated'] )> when 'true' ->
								    apply 'is_lc_simple_list'/3
									(Arg, ArgType, _cor0)
								-| ['compiler_generated'] )
							      ( <_cor35> when 'true' ->
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'error'
													   -| ['compiler_generated'] )
									  (( {( 'badarg'
										-| ['compiler_generated'] ),_cor35}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						    ( <_cor34> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {( 'badarg'
								      -| ['compiler_generated'] ),_cor34}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <_cor33> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {( 'badarg'
							    -| ['compiler_generated'] ),_cor33}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  in  let <_cor42> =
					  %% Line 303
					  case _cor39 of
					    %% Line 309
					    <'true'> when 'true' ->
						%% Line 310
						State1
					    %% Line 311
					    <'false'> when 'true' ->
						let <_cor40> =
						    %% Line 314
						    apply 'format_type'/2
							(ArgType, State1)
						in  %% Line 312
						    apply 'state__add_warning'/4
							(State1, 'warn_umatched_return', Arg, %% Line 313
											      {'unmatched_return',%% Line 314
														  [_cor40|[]]})
					    ( <_cor41> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor41})
					      -| ['compiler_generated'] )
					  end
				      in  %% Line 316
					  apply 'traverse'/3
					      (Body, Map1, _cor42)
			      ( <_cor44> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor44})
				-| ['compiler_generated'] )
			    end
			( <_cor32> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor32})
			  -| ['compiler_generated'] )
		      end
	  %% Line 318
	  <'try'> when 'true' ->
	      %% Line 319
	      apply 'handle_try'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 320
	  <'tuple'> when 'true' ->
	      %% Line 321
	      apply 'handle_tuple'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 322
	  <'map'> when 'true' ->
	      %% Line 323
	      apply 'handle_map'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 324
	  <'map_pair'> when 'true' ->
	      %% Line 325
	      apply 'handle_map_pair'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 326
	  <'values'> when 'true' ->
	      let <Elements> =
		  %% Line 327
		  call 'cerl':'values_es'
		      (_cor2)
	      in  %% Line 328
		  case apply 'traverse_list'/3
			   (Elements, _cor1, _cor0) of
		    <{State1,Map1,EsType}> when 'true' ->
			let <Type> =
			    %% Line 329
			    call 'erl_types':'t_product'
				(EsType)
			in  %% Line 330
			    {State1,Map1,Type}
		    ( <_cor46> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor46})
		      -| ['compiler_generated'] )
		  end
	  %% Line 331
	  <'var'> when 'true' ->
	      %% Line 333
	      case apply 'state__lookup_type_for_letrec'/2
		       (_cor2, _cor0) of
		%% Line 334
		<'error'> when 'true' ->
		    let <LType> =
			%% Line 335
			apply 'lookup_type'/2
			    (_cor2, _cor1)
		    in  %% Line 336
			{_cor0,_cor1,LType}
		%% Line 337
		<{'ok',Type}> when 'true' ->
		    {_cor0,_cor1,Type}
		( <_cor49> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor49})
		  -| ['compiler_generated'] )
	      end
	  %% Line 339
	  <Other> when 'true' ->
	      %% Line 340
	      call 'erlang':'error'
		  ({'Unsupported type',Other})
	end
'traverse_list'/3 =
    %% Line 343
    fun (_cor2,_cor1,_cor0) ->
	%% Line 344
	apply 'traverse_list'/4
	    (_cor2, _cor1, _cor0, [])
'traverse_list'/4 =
    %% Line 346
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Tree|Tail],Map,State,Acc> when 'true' ->
	      %% Line 347
	      case apply 'traverse'/3
		       (Tree, Map, State) of
		<{State1,Map1,Type}> when 'true' ->
		    %% Line 348
		    apply 'traverse_list'/4
			(Tail, Map1, State1, [Type|Acc])
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 349
	  <[],Map,State,Acc> when 'true' ->
	      let <_cor5> =
		  %% Line 350
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 350
		  {State,Map,_cor5}
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'traverse_list',4}}] )
	    -| ['compiler_generated'] )
	end
'handle_apply'/3 =
    %% Line 357
    fun (_cor2,_cor1,_cor0) ->
	let <Args> =
	    %% Line 358
	    call 'cerl':'apply_args'
		(_cor2)
	in  let <Op> =
		%% Line 359
		call 'cerl':'apply_op'
		    (_cor2)
	    in  %% Line 360
		case apply 'traverse_list'/3
			 (Args, _cor1, _cor0) of
		  <{State0,Map1,ArgTypes}> when 'true' ->
		      %% Line 361
		      case apply 'traverse'/3
			       (Op, Map1, State0) of
			<{State1,Map2,OpType}> when 'true' ->
			    %% Line 362
			    case call 'erl_types':'any_none'
				     (ArgTypes) of
			      %% Line 363
			      <'true'> when 'true' ->
				  let <_cor7> =
				      %% Line 364
				      call 'erl_types':'t_none'
					  ()
				  in  %% Line 364
				      {State1,Map2,_cor7}
			      %% Line 365
			      <'false'> when 'true' ->
				  let <_cor9> =
				      %% Line 367
				      case apply 'state__lookup_call_site'/2
					       (_cor2, _cor0) of
					%% Line 368
					<'error'> when 'true' ->
					    ['external']
					%% Line 369
					<{'ok',List}> when 'true' ->
					    List
					( <_cor8> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor8})
					  -| ['compiler_generated'] )
				      end
				  in  let <_cor16> =
					  %% Line 371
					  ( letrec
						'lc$^0'/1 =
						    fun (_cor13) ->
							case _cor13 of
							  <[Fun|_cor12]> when 'true' ->
							      let <_cor14> =
								  apply 'state__fun_info'/2
								      (Fun, _cor0)
							      in  let <_cor15> =
								      apply 'lc$^0'/1
									  (_cor12)
								  in  ( [{'local',_cor14}|_cor15]
									-| ['compiler_generated'] )
							  <[]> when 'true' ->
							      []
							  ( <_cor13> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor13})
								  -| [{'function_name',{'lc$^0',1}}] )
							    -| ['compiler_generated'] )
							end
					    in  apply 'lc$^0'/1
						    (_cor9)
					    -| ['list_comprehension'] )
				      in  %% Line 372
					  case %% Line 373
					       apply 'handle_apply_or_call'/6
						   (_cor16, Args, ArgTypes, Map2, _cor2, State1) of
					    %% Line 375
					    <{'had_external',State2}> when 'true' ->
						let <Arity> =
						    %% Line 378
						    call 'erlang':'length'
							(Args)
						in  let <_cor19> =
							%% Line 379
							call 'erl_types':'t_any'
							    ()
						    in  let <_cor20> =
							    %% Line 379
							    call 'erl_types':'t_fun'
								(Arity, _cor19)
							in  let <OpType1> =
								%% Line 379
								call 'erl_types':'t_inf'
								    (OpType, _cor20)
							    in  %% Line 380
								case call 'erl_types':'t_is_none'
									 (OpType1) of
								  %% Line 381
								  <'true'> when 'true' ->
								      let <_cor22> =
									  %% Line 383
									  apply 'format_cerl'/1
									      (Op)
								      in  let <_cor23> =
									      %% Line 383
									      apply 'format_type'/2
										  (OpType, State2)
									  in  let <Msg> =
										  %% Line 382
										  {'fun_app_no_fun',%% Line 383
												    [_cor22|[_cor23|[Arity|[]]]]}
									      in  let <State3> =
										      %% Line 384
										      apply 'state__add_warning'/4
											  (State2, 'warn_failing_call', _cor2, %% Line 385
															       Msg)
										  in  let <_cor26> =
											  %% Line 386
											  call 'erl_types':'t_none'
											      ()
										      in  %% Line 386
											  {State3,Map2,_cor26}
								  %% Line 387
								  <'false'> when 'true' ->
								      let <_cor27> =
									  %% Line 389
									  call 'erl_types':'t_fun_args'
									      (OpType1, 'universe')
								      in  let <NewArgs> =
									      %% Line 388
									      call 'erl_types':'t_inf_lists'
										  (ArgTypes, _cor27)
									  in  %% Line 390
									      case call 'erl_types':'any_none'
										       (NewArgs) of
										%% Line 391
										<'true'> when 'true' ->
										    let <_cor29> =
											%% Line 393
											apply 'format_args'/3
											    (Args, ArgTypes, _cor0)
										    in  let <_cor30> =
											    %% Line 394
											    apply 'format_type'/2
												(OpType, _cor0)
											in  let <Msg> =
												%% Line 392
												{'fun_app_args',%% Line 393
														[_cor29|%% Line 394
															[_cor30|[]]]}
											    in  let <State3> =
												    %% Line 395
												    apply 'state__add_warning'/4
													(State2, 'warn_failing_call', _cor2, %% Line 396
																	     Msg)
												in  let <_cor34> =
													%% Line 397
													apply 'enter_type'/3
													    (Op, OpType1, Map2)
												    in  let <_cor33> =
													    %% Line 397
													    call 'erl_types':'t_none'
														()
													in  %% Line 397
													    {State3,_cor34,_cor33}
										%% Line 398
										<'false'> when 'true' ->
										    let <Map3> =
											%% Line 399
											apply 'enter_type_lists'/3
											    (Args, NewArgs, Map2)
										    in  let <Range0> =
											    %% Line 400
											    call 'erl_types':'t_fun_range'
												(OpType1, 'universe')
											in  let <_cor38> =
												%% Line 402
												case call 'erl_types':'t_is_unit'
													 (Range0) of
												  %% Line 403
												  <'true'> when 'true' ->
												      call 'erl_types':'t_none'
													  ()
												  %% Line 404
												  <'false'> when 'true' ->
												      Range0
												  ( <_cor37> when 'true' ->
													primop 'match_fail'
													    ({'case_clause',_cor37})
												    -| ['compiler_generated'] )
												end
											    in  let <_cor40> =
												    %% Line 406
												    apply 'enter_type'/3
													(Op, OpType1, Map3)
												in  %% Line 406
												    {State2,_cor40,_cor38}
										( <_cor41> when 'true' ->
										      primop 'match_fail'
											  ({'case_clause',_cor41})
										  -| ['compiler_generated'] )
									      end
								  ( <_cor42> when 'true' ->
									primop 'match_fail'
									    ({'case_clause',_cor42})
								    -| ['compiler_generated'] )
								end
					    %% Line 409
					    <Normal> when 'true' ->
						Normal
					  end
			      ( <_cor44> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor44})
				-| ['compiler_generated'] )
			    end
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
		  ( <_cor5> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor5})
		    -| ['compiler_generated'] )
		end
'handle_apply_or_call'/6 =
    %% Line 413
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <None> =
	    %% Line 414
	    call 'erl_types':'t_none'
		()
	in  let <_cor11> =
		%% Line 416
		( letrec
		      'lc$^0'/1 =
			  fun (_cor9) ->
			      case _cor9 of
				<[_cor18|_cor8]> when 'true' ->
				    let <_cor10> =
					apply 'lc$^0'/1
					    (_cor8)
				    in  ( [None|_cor10]
					  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor9> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor9})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (_cor3)
		  -| ['list_comprehension'] )
	    in  %% Line 415
		apply 'handle_apply_or_call'/9
		    (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0, _cor11, %% Line 416
								       None, %% Line 416
									     'false')
'handle_apply_or_call'/9 =
    %% Line 418
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{'local','external'}|Left],Args,ArgTypes,Map,Tree,State,%% Line 419
								    _X_AccArgTypes,%% Line 419
										   _X_AccRet,%% Line 419
											     _X_HadExternal> when 'true' ->
	      let <_cor9> =
		  %% Line 421
		  call 'erl_types':'t_any'
		      ()
	      in  %% Line 420
		  apply 'handle_apply_or_call'/9
		      (Left, Args, ArgTypes, Map, Tree, State, %% Line 421
							       ArgTypes, _cor9, %% Line 421
										'true')
	  %% Line 422
	  <[{TypeOfApply,{Fun,Sig,Contr,LocalRet}}|Left],%% Line 423
							 Args,%% Line 423
							      ArgTypes,%% Line 423
								       Map,%% Line 423
									   Tree,State = %% Line 424
											{'state',_cor137,_cor138,_cor139,_cor140,Opaques,_cor141,_cor142,_cor143,_cor144,_cor145,_cor146,_cor147},%% Line 425
																								  AccArgTypes,%% Line 425
																									      AccRet,%% Line 425
																										     HadExternal> when 'true' ->
	      let <Any> =
		  %% Line 426
		  call 'erl_types':'t_any'
		      ()
	      in  let <_cor15> =
		      %% Line 427
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor13) ->
				    case _cor13 of
				      <[_cor148|_cor12]> when 'true' ->
					  let <_cor14> =
					      apply 'lc$^0'/1
						  (_cor12)
					  in  ( [Any|_cor14]
						-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor13> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor13})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(Args)
			-| ['list_comprehension'] )
		  in  let <_cor19> =
			  %% Line 428
			  ( fun (_cor17) ->
				call 'erl_types':'t_any'
				    ()
			    -| [{'id',{0,0,'-handle_apply_or_call/9-fun-0-'}}] )
		      in  let <GenSig> = {_cor15,_cor19}
			  in  let <_cor25> =
				  %% Line 430
				  case Contr of
				    %% Line 431
				    <{'value',C = {'contract',_cor150,As,_cor151}}> when 'true' ->
					let <_cor23> =
					    %% Line 432
					    ( fun (_cor21) ->
						  %% Line 433
						  call 'dialyzer_contracts':'get_contract_return'
						      (C, _cor21)
					      -| [{'id',{0,0,'-handle_apply_or_call/9-fun-1-'}}] )
					in  %% Line 432
					    {As,_cor23}
				    %% Line 435
				    <'none'> when 'true' ->
					GenSig
				    ( <_cor24> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor24})
				      -| ['compiler_generated'] )
				  end
			      in  %% Line 429
				  case _cor25 of
				    <{CArgs,CRange}> when 'true' ->
					let <_cor34> =
					    %% Line 438
					    case TypeOfApply of
					      %% Line 439
					      <'remote'> when 'true' ->
						  %% Line 440
						  case Fun of
						    <{M,F,A}> when 'true' ->
							%% Line 441
							case call 'erl_bif_types':'is_known'
								 (M, F, A) of
							  %% Line 442
							  <'true'> when 'true' ->
							      let <BArgs> =
								  %% Line 443
								  call 'erl_bif_types':'arg_types'
								      (M, F, A)
							      in  let <BRange> =
								      %% Line 445
								      ( fun (_cor29) ->
									    %% Line 446
									    call 'erl_bif_types':'type'
										(M, F, A, _cor29, Opaques)
									-| [{'id',{0,0,'-handle_apply_or_call/9-fun-2-'}}] )
								  in  %% Line 448
								      {BArgs,BRange}
							  %% Line 449
							  <'false'> when 'true' ->
							      %% Line 450
							      GenSig
							  ( <_cor32> when 'true' ->
								primop 'match_fail'
								    ({'case_clause',_cor32})
							    -| ['compiler_generated'] )
							end
						    ( <_cor27> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor27})
						      -| ['compiler_generated'] )
						  end
					      %% Line 452
					      <'local'> when 'true' ->
						  GenSig
					      ( <_cor33> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor33})
						-| ['compiler_generated'] )
					    end
					in  %% Line 437
					    case _cor34 of
					      <{BifArgs,BifRange}> when 'true' ->
						  let <SigArgs,SigRange> =
						      %% Line 455
						      case Sig of
							%% Line 456
							<{'value',{SR,SA}}> when 'true' ->
							    <SA,SR>
							%% Line 457
							<'none'> when 'true' ->
							    let <_cor36> =
								call 'erl_types':'t_any'
								    ()
							    in  <_cor15,_cor36>
							( <_cor37> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_cor37})
							  -| ['compiler_generated'] )
						      end
						  in  let <NewArgsSig> =
							  %% Line 467
							  call 'erl_types':'t_inf_lists'
							      (SigArgs, ArgTypes, Opaques)
						      in  let <NewArgsContract> =
							      %% Line 470
							      call 'erl_types':'t_inf_lists'
								  (CArgs, ArgTypes, Opaques)
							  in  let <NewArgsBif> =
								  %% Line 473
								  call 'erl_types':'t_inf_lists'
								      (BifArgs, ArgTypes, Opaques)
							      in  let <NewArgTypes0> =
								      %% Line 475
								      call 'erl_types':'t_inf_lists'
									  (NewArgsSig, NewArgsContract)
								  in  let <NewArgTypes> =
									  %% Line 476
									  call 'erl_types':'t_inf_lists'
									      (NewArgTypes0, NewArgsBif, Opaques)
								      in  let <BifRet> =
									      %% Line 480
									      apply BifRange
										  (NewArgTypes)
									  in  let <ContrRet> =
										  %% Line 481
										  apply CRange
										      (NewArgTypes)
									      in  let <RetWithoutContr> =
										      %% Line 482
										      call 'erl_types':'t_inf'
											  (SigRange, BifRet)
										  in  let <RetWithoutLocal> =
											  %% Line 483
											  call 'erl_types':'t_inf'
											      (ContrRet, RetWithoutContr)
										      in  let <_cor54> =
											      %% Line 493
											      case apply 'is_race_analysis_enabled'/1
												       (State) of
												%% Line 494
												<'true'> when 'true' ->
												    let <Ann> =
													%% Line 495
													call 'cerl':'get_ann'
													    (Tree)
												    in  let <File> =
													    %% Line 496
													    apply 'get_file'/1
														(Ann)
													in  let <_cor51> =
														%% Line 497
														apply 'get_line'/1
														    (Ann)
													    in  let <Line> =
														    %% Line 497
														    call 'erlang':'abs'
															(_cor51)
														in  %% Line 498
														    call 'dialyzer_races':'store_race_call'
															(Fun, ArgTypes, Args, %% Line 499
																	      {File,Line}, %% Line 499
																			   State)
												%% Line 500
												<'false'> when 'true' ->
												    State
												( <_cor53> when 'true' ->
												      primop 'match_fail'
													  ({'case_clause',_cor53})
												  -| ['compiler_generated'] )
											      end
											  in  let <FailedConj> =
												  %% Line 502
												  call 'erl_types':'any_none'
												      ([RetWithoutLocal|NewArgTypes])
											      in  let <_cor57> =
												      %% Line 503
												      apply BifRange
													  (BifArgs)
												  in  let <IsFailBif> =
													  %% Line 503
													  call 'erl_types':'t_is_none'
													      (_cor57)
												      in  let <IsFailSig> =
													      %% Line 504
													      call 'erl_types':'t_is_none'
														  (SigRange)
													  in  let <_cor65> =
														  %% Line 509
														  ( case FailedConj of
														      ( <( 'true'
															   -| ['compiler_generated'] )> when 'true' ->
															    let <_cor63> =
																( case IsFailBif of
																    ( <( 'true'
																	 -| ['compiler_generated'] )> when 'true' ->
																	  'true'
																      -| ['compiler_generated'] )
																    ( <( 'false'
																	 -| ['compiler_generated'] )> when 'true' ->
																	  IsFailSig
																      -| ['compiler_generated'] )
																    ( <_cor61> when 'true' ->
																	  ( call ( 'erlang'
																		   -| ['compiler_generated'] ):( 'error'
																						 -| ['compiler_generated'] )
																		(( {( 'badarg'
																		      -| ['compiler_generated'] ),_cor61}
																		   -| ['compiler_generated'] ))
																	    -| ['compiler_generated'] )
																      -| ['compiler_generated'] )
																  end
																  -| ['compiler_generated'] )
															    in  call 'erlang':'not'
																    (_cor63)
															-| ['compiler_generated'] )
														      ( <( 'false'
															   -| ['compiler_generated'] )> when 'true' ->
															    'false'
															-| ['compiler_generated'] )
														      ( <_cor60> when 'true' ->
															    ( call ( 'erlang'
																     -| ['compiler_generated'] ):( 'error'
																				   -| ['compiler_generated'] )
																  (( {( 'badarg'
																	-| ['compiler_generated'] ),_cor60}
																     -| ['compiler_generated'] ))
															      -| ['compiler_generated'] )
															-| ['compiler_generated'] )
														    end
														    -| ['compiler_generated'] )
													      in  let <_cor97> =
														      %% Line 509
														      case _cor65 of
															%% Line 510
															<'true'> when 'true' ->
															    let <_cor72> =
																%% Line 511
																( case call 'erl_types':'t_is_none'
																	   (RetWithoutLocal) of
																    ( <( 'true'
																	 -| ['compiler_generated'] )> when 'true' ->
																	  %% Line 512
																	  ( case call 'erl_types':'t_is_none'
																		     (RetWithoutContr) of
																	      ( <'false'> when 'true' ->
																		    let <_cor69> =
																			%% Line 513
																			call 'erl_types':'any_none'
																			    (NewArgTypes)
																		    in  %% Line 513
																			call 'erlang':'not'
																			    (_cor69)
																		-| ['compiler_generated'] )
																	      ( <'true'> when 'true' ->
																		    'false'
																		-| ['compiler_generated'] )
																	      ( <_cor_variable> when 'true' ->
																		    call 'erlang':'error'
																			('badarg')
																		-| ['compiler_generated'] )
																	    end
																	    -| ['compiler_generated'] )
																      -| ['compiler_generated'] )
																    ( <( 'false'
																	 -| ['compiler_generated'] )> when 'true' ->
																	  'false'
																      -| ['compiler_generated'] )
																    ( <_cor66> when 'true' ->
																	  ( call ( 'erlang'
																		   -| ['compiler_generated'] ):( 'error'
																						 -| ['compiler_generated'] )
																		(( {( 'badarg'
																		      -| ['compiler_generated'] ),_cor66}
																		   -| ['compiler_generated'] ))
																	    -| ['compiler_generated'] )
																      -| ['compiler_generated'] )
																  end
																  -| ['compiler_generated'] )
															    in  %% Line 511
																case _cor72 of
																  %% Line 514
																  <'true'> when 'true' ->
																      %% Line 515
																      case Contr of
																	<{'value',C1}> when 'true' ->
																	    let <Contract> =
																		%% Line 516
																		call 'dialyzer_contracts':'contract_to_string'
																		    (C1)
																	    in  %% Line 517
																		case apply 'state__lookup_name'/2
																			 (Fun, State) of
																		  <{M1,F1,A1}> when 'true' ->
																		      let <ArgStrings> =
																			  %% Line 518
																			  apply 'format_args'/3
																			      (Args, ArgTypes, State)
																		      in  let <CRet> =
																			      %% Line 519
																			      call 'erl_types':'t_to_string'
																				  (RetWithoutContr)
																			  in  let <Msg> =
																				  %% Line 522
																				  {'contract_range',[Contract|[M1|[F1|[A1|[ArgStrings|[CRet|[]]]]]]]}
																			      in  %% Line 523
																				  apply 'state__add_warning'/4
																				      (_cor54, 'warn_contract_range', Tree, Msg)
																		  ( <_cor75> when 'true' ->
																			primop 'match_fail'
																			    ({'badmatch',_cor75})
																		    -| ['compiler_generated'] )
																		end
																	( <_cor73> when 'true' ->
																	      primop 'match_fail'
																		  ({'badmatch',_cor73})
																	  -| ['compiler_generated'] )
																      end
																  %% Line 524
																  <'false'> when 'true' ->
																      let <FailedSig> =
																	  %% Line 525
																	  call 'erl_types':'any_none'
																	      (NewArgsSig)
																      in  let <_cor80> =
																	      %% Line 527
																	      apply CRange
																		  (NewArgsContract)
																	  in  let <FailedContract> =
																		  %% Line 527
																		  call 'erl_types':'any_none'
																		      ([_cor80|NewArgsContract])
																	      in  let <_cor82> =
																		      %% Line 528
																		      apply BifRange
																			  (NewArgsBif)
																		  in  let <FailedBif> =
																			  %% Line 528
																			  call 'erl_types':'any_none'
																			      ([_cor82|NewArgsBif])
																		      in  let <_cor86> =
																			      %% Line 529
																			      call 'erl_types':'t_fun'
																				  (SigArgs, SigRange)
																			  in  let <_cor84> =
																				  %% Line 530
																				  apply BifRange
																				      (BifArgs)
																			      in  let <_cor85> =
																				      %% Line 530
																				      call 'erl_types':'t_fun'
																					  (BifArgs, _cor84)
																				  in  let <InfSig> =
																					  %% Line 529
																					  call 'erl_types':'t_inf'
																					      (_cor86, _cor85)
																				      in  let <FailReason> =
																					      %% Line 532
																					      apply 'apply_fail_reason'/3
																						  (FailedSig, FailedBif, FailedContract)
																					  in  let <Msg> =
																						  %% Line 533
																						  apply 'get_apply_fail_msg'/10
																						      (Fun, Args, ArgTypes, NewArgTypes, InfSig, %% Line 534
																												 Contr, %% Line 534
																													CArgs, _cor54, %% Line 534
																														       FailReason, %% Line 534
																																   Opaques)
																					      in  let <_cor91> =
																						      %% Line 535
																						      case Msg of
																							%% Line 536
																							<{'call',_cor152}> when 'true' ->
																							    'warn_failing_call'
																							%% Line 537
																							<{'apply',_cor153}> when 'true' ->
																							    'warn_failing_call'
																							%% Line 538
																							<{'call_with_opaque',_cor154}> when 'true' ->
																							    'warn_opaque'
																							%% Line 539
																							<{'call_without_opaque',_cor155}> when 'true' ->
																							    'warn_opaque'
																							%% Line 540
																							<{'opaque_type_test',_cor156}> when 'true' ->
																							    'warn_opaque'
																							( <_cor90> when 'true' ->
																							      primop 'match_fail'
																								  ({'case_clause',_cor90})
																							  -| ['compiler_generated'] )
																						      end
																						  in  let <_cor93> =
																							  %% Line 542
																							  apply 'state__lookup_name'/2
																							      (Fun, State)
																						      in  let <Frc> =
																							      %% Line 542
																							      call 'erlang':'=:='
																								  ({'erlang','is_record',3}, _cor93)
																							  in  %% Line 543
																							      apply 'state__add_warning'/5
																								  (_cor54, _cor91, Tree, Msg, Frc)
																  ( <_cor95> when 'true' ->
																	primop 'match_fail'
																	    ({'case_clause',_cor95})
																    -| ['compiler_generated'] )
																end
															%% Line 545
															<'false'> when 'true' ->
															    _cor54
															( <_cor96> when 'true' ->
															      primop 'match_fail'
																  ({'case_clause',_cor96})
															  -| ['compiler_generated'] )
														      end
														  in  let <_cor108> =
															  %% Line 548
															  case TypeOfApply of
															    %% Line 549
															    <'local'> when 'true' ->
																%% Line 550
																case apply 'state__is_escaping'/2
																	 (Fun, _cor97) of
																  %% Line 551
																  <'true'> when 'true' ->
																      _cor97
																  %% Line 552
																  <'false'> when 'true' ->
																      let <_cor104> =
																	  %% Line 553
																	  ( letrec
																		'lc$^1'/1 =
																		    fun (_cor101) ->
																			case _cor101 of
																			  <[X|_cor100]> when 'true' ->
																			      let <_cor102> =
																				  call 'erl_types':'t_limit'
																				      (X, 3)
																			      in  let <_cor103> =
																				      apply 'lc$^1'/1
																					  (_cor100)
																				  in  ( [_cor102|_cor103]
																					-| ['compiler_generated'] )
																			  <[]> when 'true' ->
																			      []
																			  ( <_cor101> when 'true' ->
																				( primop 'match_fail'
																				      ({'function_clause',_cor101})
																				  -| [{'function_name',{'lc$^1',1}}] )
																			    -| ['compiler_generated'] )
																			end
																	    in  apply 'lc$^1'/1
																		    (ArgTypes)
																	    -| ['list_comprehension'] )
																      in  %% Line 554
																	  apply 'forward_args'/3
																	      (Fun, _cor104, _cor97)
																  ( <_cor106> when 'true' ->
																	primop 'match_fail'
																	    ({'case_clause',_cor106})
																    -| ['compiler_generated'] )
																end
															    %% Line 556
															    <'remote'> when 'true' ->
																%% Line 557
																apply 'add_bif_warnings'/4
																    (Fun, NewArgTypes, Tree, _cor97)
															    ( <_cor107> when 'true' ->
																  primop 'match_fail'
																      ({'case_clause',_cor107})
															      -| ['compiler_generated'] )
															  end
														      in  let <_cor117> =
															      %% Line 560
															      case FailedConj of
																%% Line 561
																<'true'> when 'true' ->
																    AccArgTypes
																%% Line 562
																<'false'> when 'true' ->
																    ( letrec
																	  'lc$^2'/1 =
																	      fun (_cor113) ->
																		  case _cor113 of
																		    <[{X,Y}|_cor111]> when 'true' ->
																			let <_cor114> =
																			    call 'erl_types':'t_sup'
																				(X, Y)
																			in  let <_cor115> =
																				apply 'lc$^2'/1
																				    (_cor111)
																			    in  ( [_cor114|_cor115]
																				  -| ['compiler_generated'] )
																		    ( <[_cor110|_cor111]> when 'true' ->
																			  apply 'lc$^2'/1
																			      (_cor111)
																		      -| ['compiler_generated'] )
																		    <[]> when 'true' ->
																			[]
																		    ( <_cor113> when 'true' ->
																			  ( primop 'match_fail'
																				({'function_clause',_cor113})
																			    -| [{'function_name',{'lc$^2',1}}] )
																		      -| ['compiler_generated'] )
																		  end
																      in  let <_cor112> =
																	      call 'lists':'zip'
																		  (NewArgTypes, AccArgTypes)
																	  in  apply 'lc$^2'/1
																		  (_cor112)
																      -| ['list_comprehension'] )
																( <_cor116> when 'true' ->
																      primop 'match_fail'
																	  ({'case_clause',_cor116})
																  -| ['compiler_generated'] )
															      end
															  in  let <_cor121> =
																  %% Line 565
																  ( case call 'erl_types':'t_is_none'
																	     (LocalRet) of
																      ( <( 'true'
																	   -| ['compiler_generated'] )> when 'true' ->
																	    call 'erl_types':'t_is_unit'
																		(RetWithoutLocal)
																	-| ['compiler_generated'] )
																      ( <( 'false'
																	   -| ['compiler_generated'] )> when 'true' ->
																	    'false'
																	-| ['compiler_generated'] )
																      ( <_cor119> when 'true' ->
																	    ( call ( 'erlang'
																		     -| ['compiler_generated'] ):( 'error'
																						   -| ['compiler_generated'] )
																		  (( {( 'badarg'
																			-| ['compiler_generated'] ),_cor119}
																		     -| ['compiler_generated'] ))
																	      -| ['compiler_generated'] )
																	-| ['compiler_generated'] )
																    end
																    -| ['compiler_generated'] )
															      in  let <_cor123> =
																      %% Line 565
																      case _cor121 of
																	%% Line 566
																	<'true'> when 'true' ->
																	    RetWithoutLocal
																	%% Line 567
																	<'false'> when 'true' ->
																	    call 'erl_types':'t_inf'
																		(RetWithoutLocal, LocalRet)
																	( <_cor122> when 'true' ->
																	      primop 'match_fail'
																		  ({'case_clause',_cor122})
																	  -| ['compiler_generated'] )
																      end
																  in  let <NewAccRet> =
																	  %% Line 569
																	  call 'erl_types':'t_sup'
																	      (AccRet, _cor123)
																      in  %% Line 571
																	  apply 'handle_apply_or_call'/9
																	      (Left, Args, ArgTypes, Map, Tree, _cor108, _cor117, %% Line 572
																								  NewAccRet, %% Line 572
																									     HadExternal)
					      ( <_cor35> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor35})
						-| ['compiler_generated'] )
					    end
				    ( <_cor26> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor26})
				      -| ['compiler_generated'] )
				  end
	  %% Line 573
	  <[],Args,_X_ArgTypes,Map,_X_Tree,State,%% Line 574
						 AccArgTypes,%% Line 574
							     AccRet,%% Line 574
								    HadExternal> when 'true' ->
	      %% Line 575
	      case HadExternal of
		%% Line 576
		<'false'> when 'true' ->
		    let <NewMap> =
			%% Line 577
			apply 'enter_type_lists'/3
			    (Args, AccArgTypes, Map)
		    in  %% Line 578
			{State,NewMap,AccRet}
		%% Line 579
		<'true'> when 'true' ->
		    %% Line 580
		    {'had_external',State}
		( <_cor127> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor127})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor136,_cor135,_cor134,_cor133,_cor132,_cor131,_cor130,_cor129,_cor128> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor136,_cor135,_cor134,_cor133,_cor132,_cor131,_cor130,_cor129,_cor128})
		  -| [{'function_name',{'handle_apply_or_call',9}}] )
	    -| ['compiler_generated'] )
	end
'apply_fail_reason'/3 =
    %% Line 583
    fun (_cor2,_cor1,_cor0) ->
	%% Line 584
	case <> of
	  %% Line 585
	  <>
	      when try
		    let <_cor6> =
			( case _cor2 of
			    ( <( 'true'
				 -| ['compiler_generated'] )> when 'true' ->
				  'true'
			      -| ['compiler_generated'] )
			    ( <( 'false'
				 -| ['compiler_generated'] )> when 'true' ->
				  _cor1
			      -| ['compiler_generated'] )
			    ( <_cor4> when 'true' ->
				  _cor4
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    in  ( let <_cor8> =
			      ( case _cor6 of
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					call 'erlang':'not'
					    (_cor0)
				    -| ['compiler_generated'] )
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					'false'
				    -| ['compiler_generated'] )
				  ( <_cor3> when 'true' ->
					_cor3
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  in  ( call ( 'erlang'
				       -| ['compiler_generated'] ):( '=:='
								     -| ['compiler_generated'] )
				    (( _cor8
				       -| ['compiler_generated'] ), ( 'true'
								      -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      'only_sig'
	  %% Line 586
	  <>
	      when try
		    ( let <_cor14> =
			  ( case _cor0 of
			      ( <( 'true'
				   -| ['compiler_generated'] )> when 'true' ->
				    let <_cor12> =
					( case _cor2 of
					    ( <( 'true'
						 -| ['compiler_generated'] )> when 'true' ->
						  'true'
					      -| ['compiler_generated'] )
					    ( <( 'false'
						 -| ['compiler_generated'] )> when 'true' ->
						  _cor1
					      -| ['compiler_generated'] )
					    ( <_cor10> when 'true' ->
						  _cor10
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    in  call 'erlang':'not'
					    (_cor12)
				-| ['compiler_generated'] )
			      ( <( 'false'
				   -| ['compiler_generated'] )> when 'true' ->
				    'false'
				-| ['compiler_generated'] )
			      ( <_cor9> when 'true' ->
				    _cor9
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      in  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( '=:='
								 -| ['compiler_generated'] )
				(( _cor14
				   -| ['compiler_generated'] ), ( 'true'
								  -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      'only_contract'
	  %% Line 587
	  <> when 'true' ->
	      'both'
	end
'get_apply_fail_msg'/10 =
    %% Line 590
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <ArgStrings> =
	    %% Line 592
	    apply 'format_args'/3
		(_cor8, _cor7, _cor2)
	in  let <_cor14> =
		%% Line 594
		case _cor4 of
		  %% Line 595
		  <{'value',C = {'contract',_cor58,_cor59,_cor60}}> when 'true' ->
		      let <_cor12> =
			  %% Line 596
			  call 'dialyzer_contracts':'is_overloaded'
			      (C)
		      in  let <_cor11> =
			      %% Line 597
			      call 'dialyzer_contracts':'contract_to_string'
				  (C)
			  in  %% Line 596
			      {_cor12,_cor11}
		  %% Line 598
		  <'none'> when 'true' ->
		      {'false','none'}
		  ( <_cor13> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor13})
		    -| ['compiler_generated'] )
		end
	    in  let <_cor16> =
		    %% Line 600
		    call 'erlang':'length'
			(_cor6)
		in  let <_cor17> =
			%% Line 600
			call 'lists':'seq'
			    (1, _cor16)
		    in  let <EnumArgTypes> =
			    %% Line 600
			    call 'lists':'zip'
				(_cor17, _cor6)
			in  let <_cor24> =
				%% Line 601
				( letrec
				      'lc$^0'/1 =
					  fun (_cor21) ->
					      case _cor21 of
						<[{Arg,Type}|_cor20]> when 'true' ->
						    ( case call 'erl_types':'t_is_none'
							       (Type) of
							<'true'> when 'true' ->
							    let <_cor22> =
								apply 'lc$^0'/1
								    (_cor20)
							    in  ( [Arg|_cor22]
								  -| ['compiler_generated'] )
							( <'false'> when 'true' ->
							      apply 'lc$^0'/1
								  (_cor20)
							  -| ['compiler_generated'] )
							( <_cor23> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_cor23})
							  -| ['compiler_generated'] )
						      end
						      -| ['list_comprehension'] )
						( <[_cor19|_cor20]> when 'true' ->
						      apply 'lc$^0'/1
							  (_cor20)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor21> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor21})
							-| [{'function_name',{'lc$^0',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^0'/1
					  (EnumArgTypes)
				  -| ['list_comprehension'] )
			    in  %% Line 602
				case apply 'state__lookup_name'/2
					 (_cor9, _cor2) of
				  %% Line 603
				  <{M,F,A}> when 'true' ->
				      %% Line 604
				      case apply 'is_opaque_type_test_problem'/4
					       (_cor9, _cor8, _cor6, _cor2) of
					%% Line 605
					<{'yes',Arg,ArgType}> when 'true' ->
					    let <_cor26> =
						%% Line 606
						call 'erlang':'atom_to_list'
						    (F)
					    in  let <_cor27> =
						    %% Line 607
						    apply 'format_arg'/1
							(Arg)
						in  let <_cor28> =
							%% Line 607
							apply 'format_type'/2
							    (ArgType, _cor2)
						    in  %% Line 606
							{'opaque_type_test',[_cor26|[ArgStrings|%% Line 607
												[_cor27|[_cor28|[]]]]]}
					%% Line 608
					<'no'> when 'true' ->
					    let <SigArgs> =
						%% Line 609
						call 'erl_types':'t_fun_args'
						    (_cor5)
					    in  let <BadOpaque> =
						    %% Line 611
						    apply 'opaque_problems'/4
							([SigArgs|[_cor3|[]]], _cor7, _cor0, _cor24)
						in  %% Line 614
						    case call 'lists':'keyfind'
							     ('decl', 1, BadOpaque) of
						      %% Line 615
						      <{'decl',BadArgs}> when 'true' ->
							  let <_cor32> =
							      %% Line 618
							      case _cor1 of
								%% Line 619
								<'only_sig'> when 'true' ->
								    apply 'expected_arg_triples'/3
									(BadArgs, SigArgs, _cor2)
								%% Line 620
								<_cor61> when 'true' ->
								    apply 'expected_arg_triples'/3
									(BadArgs, _cor3, _cor2)
							      end
							  in  %% Line 622
							      {'call_without_opaque',[M|[F|[ArgStrings|[_cor32|[]]]]]}
						      %% Line 623
						      <'false'> when 'true' ->
							  %% Line 624
							  case call 'lists':'keyfind'
								   ('use', 1, BadOpaque) of
							    %% Line 625
							    <{'use',BadArgs}> when 'true' ->
								let <_cor35> =
								    %% Line 628
								    case _cor1 of
								      %% Line 629
								      <'only_sig'> when 'true' ->
									  SigArgs
								      %% Line 630
								      <_cor62> when 'true' ->
									  _cor3
								    end
								in  %% Line 632
								    {'call_with_opaque',[M|[F|[ArgStrings|[BadArgs|[_cor35|[]]]]]]}
							    %% Line 633
							    <'false'> when 'true' ->
								%% Line 634
								case %% Line 635
								     call 'erl_bif_types':'opaque_args'
									 (M, F, A, _cor7, _cor0) of
								  %% Line 637
								  <[]> when 'true' ->
								      let <_cor37> =
									  %% Line 640
									  apply 'format_sig_args'/2
									      (_cor5, _cor2)
								      in  let <_cor38> =
									      %% Line 641
									      call 'erl_types':'t_fun_range'
										  (_cor5)
									  in  let <_cor39> =
										  %% Line 641
										  apply 'format_type'/2
										      (_cor38, _cor2)
									      in  %% Line 638
										  {'call',[M|[F|[ArgStrings|%% Line 639
													    [_cor24|[_cor1|%% Line 640
															   [_cor37|%% Line 641
																   [_cor39|%% Line 642
																	   [_cor14|[]]]]]]]]]}
								  %% Line 643
								  <Ns> when 'true' ->
								      %% Line 644
								      {'call_with_opaque',[M|[F|[ArgStrings|[Ns|[_cor3|[]]]]]]}
								end
							    ( <_cor41> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_cor41})
							      -| ['compiler_generated'] )
							  end
						      ( <_cor42> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_cor42})
							-| ['compiler_generated'] )
						    end
					( <_cor43> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor43})
					  -| ['compiler_generated'] )
				      end
				  %% Line 649
				  <Label>
				      when call 'erlang':'is_integer'
					    (Label) ->
				      let <_cor44> =
					  %% Line 652
					  apply 'format_sig_args'/2
					      (_cor5, _cor2)
				      in  let <_cor45> =
					      %% Line 653
					      call 'erl_types':'t_fun_range'
						  (_cor5)
					  in  let <_cor46> =
						  %% Line 653
						  apply 'format_type'/2
						      (_cor45, _cor2)
					      in  %% Line 650
						  {'apply',[ArgStrings|%% Line 651
								       [_cor24|[_cor1|%% Line 652
										      [_cor44|%% Line 653
											      [_cor46|%% Line 654
												      [_cor14|[]]]]]]]}
				  ( <_cor47> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor47})
				    -| ['compiler_generated'] )
				end
'opaque_problems'/4 =
    %% Line 659
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <ArgElementList> =
	    %% Line 660
	    apply 'find_unknown'/4
		(_cor3, _cor2, _cor1, _cor0)
	in  let <F> =
		%% Line 661
		( fun (_cor5) ->
		      case _cor5 of
			<1> when 'true' ->
			    'decl'
			<2> when 'true' ->
			    'use'
			( <_cor6> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor6})
				-| [{'function_name',{'-opaque_problems/4-fun-0-',1}}] )
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-opaque_problems/4-fun-0-'}}] )
	    in  %% Line 662
		( letrec
		      'lc$^1'/1 =
			  fun (_cor16) ->
			      case _cor16 of
				<[%% Line 664
				  ElementI|_cor9]> when 'true' ->
				    let <_cor23> =
					apply F
					    (ElementI)
				    in  let <_cor21> =
					    ( letrec
						  'lc$^2'/1 =
						      fun (_cor19) ->
							  case _cor19 of
							    <[{ArgN,EI}|_cor18]>
								when %% Line 663
								  call 'erlang':'=:='
								      (EI,
								       ElementI) ->
								let <_cor20> =
								    apply 'lc$^2'/1
									(_cor18)
								in  ( [ArgN|_cor20]
								      -| ['compiler_generated'] )
							    ( <[_cor17|_cor18]> when 'true' ->
								  apply 'lc$^2'/1
								      (_cor18)
							      -| ['compiler_generated'] )
							    <[]> when 'true' ->
								[]
							    ( <_cor19> when 'true' ->
								  ( primop 'match_fail'
									({'function_clause',_cor19})
								    -| [{'function_name',{'lc$^2',1}}] )
							      -| ['compiler_generated'] )
							  end
					      in  apply 'lc$^2'/1
						      (ArgElementList)
					      -| ['list_comprehension'] )
					in  let <_cor22> =
						call 'lists':'usort'
						    (_cor21)
					    in  let <_cor24> =
						    %% Line 664
						    apply 'lc$^1'/1
							(_cor9)
						in  ( [{_cor23,_cor22}|_cor24]
						      -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor16> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor16})
					-| [{'function_name',{'lc$^1',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  let <_cor14> =
			  %% Line 664
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor12) ->
					case _cor12 of
					  <[{_cor29,EI}|_cor11]> when 'true' ->
					      let <_cor13> =
						  apply 'lc$^0'/1
						      (_cor11)
					      in  ( [EI|_cor13]
						    -| ['compiler_generated'] )
					  ( <[_cor10|_cor11]> when 'true' ->
						apply 'lc$^0'/1
						    (_cor11)
					    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor12> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor12})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (ArgElementList)
			    -| ['list_comprehension'] )
		      in  let <_cor15> =
			      %% Line 664
			      call 'lists':'usort'
				  (_cor14)
			  in  apply 'lc$^1'/1
				  (_cor15)
		  -| ['list_comprehension'] )
'find_unknown'/4 =
    %% Line 670
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 671
	    call 'erlang':'length'
		(_cor2)
	in  let <ArgNs> =
		%% Line 671
		call 'lists':'seq'
		    (1, _cor4)
	    in  %% Line 672
		( letrec
		      'lc$^0'/1 =
			  fun (_cor14) ->
			      case _cor14 of
				<[%% Line 673
				  ContractOrSig|_cor7]> when 'true' ->
				    ( letrec
					  'lc$^1'/1 =
					      fun (_cor15) ->
						  case _cor15 of
						    <[%% Line 674
						      {E1,E2,ArgN}|_cor9]> when 'true' ->
							%% Line 675
							( case call 'lists':'member'
								   (ArgN, _cor0) of
							    <'true'> when 'true' ->
								( letrec
								      'lc$^2'/1 =
									  fun (_cor16) ->
									      case _cor16 of
										<[%% Line 676
										  ElementI|_cor12]> when 'true' ->
										    let <_cor17> =
											%% Line 676
											apply 'lc$^2'/1
											    (_cor12)
										    in  ( [{ArgN,ElementI}|_cor17]
											  -| ['compiler_generated'] )
										<[]> when 'true' ->
										    apply 'lc$^1'/1
											(_cor9)
										( <_cor16> when 'true' ->
										      ( primop 'match_fail'
											    ({'function_clause',_cor16})
											-| [{'function_name',{'lc$^2',1}}] )
										  -| ['compiler_generated'] )
									      end
								  in  let <_cor13> =
									  %% Line 676
									  call 'erl_types':'t_find_unknown_opaque'
									      (E1, E2, _cor1)
								      in  apply 'lc$^2'/1
									      (_cor13)
								  -| ['list_comprehension'] )
							    ( <'false'> when 'true' ->
								  apply 'lc$^1'/1
								      (_cor9)
							      -| ['compiler_generated'] )
							    ( <_cor18> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_cor18})
							      -| ['compiler_generated'] )
							  end
							  -| ['list_comprehension'] )
						    ( <[_cor8|_cor9]> when 'true' ->
							  %% Line 674
							  apply 'lc$^1'/1
							      (_cor9)
						      -| ['compiler_generated'] )
						    <[]> when 'true' ->
							%% Line 673
							apply 'lc$^0'/1
							    (_cor7)
						    ( <_cor15> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor15})
							    -| [{'function_name',{'lc$^1',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  let <_cor10> =
					      %% Line 674
					      call 'lists':'zip3'
						  (ContractOrSig, _cor2, ArgNs)
					  in  apply 'lc$^1'/1
						  (_cor10)
				      -| ['list_comprehension'] )
				<[]> when 'true' ->
				    []
				( <_cor14> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor14})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (_cor3)
		  -| ['list_comprehension'] )
'is_opaque_type_test_problem'/4 =
    %% Line 678
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 679
	case _cor3 of
	  %% Line 680
	  <{'erlang',FN,1}>
	      when let <_cor4> =
		    call 'erlang':'=:='
			(FN, 'is_atom')
		in  let <_cor5> =
			call 'erlang':'=:='
			    (FN, 'is_boolean')
		    in  let <_cor6> =
			    %% Line 681
			    call 'erlang':'=:='
				(FN, 'is_binary')
			in  let <_cor7> =
				%% Line 681
				call 'erlang':'=:='
				    (FN, 'is_bitstring')
			    in  let <_cor8> =
				    %% Line 682
				    call 'erlang':'=:='
					(FN, 'is_float')
				in  let <_cor9> =
					%% Line 682
					call 'erlang':'=:='
					    (FN, 'is_function')
				    in  let <_cor10> =
					    %% Line 683
					    call 'erlang':'=:='
						(FN, 'is_integer')
					in  let <_cor11> =
						%% Line 683
						call 'erlang':'=:='
						    (FN, 'is_list')
					    in  let <_cor12> =
						    %% Line 684
						    call 'erlang':'=:='
							(FN, 'is_number')
						in  let <_cor13> =
							%% Line 684
							call 'erlang':'=:='
							    (FN, 'is_pid')
						    in  let <_cor14> =
							    %% Line 684
							    call 'erlang':'=:='
								(FN, 'is_port')
							in  let <_cor15> =
								%% Line 685
								call 'erlang':'=:='
								    (FN, 'is_reference')
							    in  let <_cor16> =
								    %% Line 685
								    call 'erlang':'=:='
									(FN, 'is_tuple')
								in  let <_cor17> =
									%% Line 686
									call 'erlang':'=:='
									    (FN, 'is_map')
								    in  let <_cor18> =
									    %% Line 685
									    call 'erlang':'or'
										(_cor16, _cor17)
									in  let <_cor19> =
										%% Line 685
										call 'erlang':'or'
										    (_cor15, _cor18)
									    in  let <_cor20> =
										    %% Line 684
										    call 'erlang':'or'
											(_cor14, _cor19)
										in  let <_cor21> =
											%% Line 684
											call 'erlang':'or'
											    (_cor13, _cor20)
										    in  let <_cor22> =
											    %% Line 684
											    call 'erlang':'or'
												(_cor12, _cor21)
											in  let <_cor23> =
												%% Line 683
												call 'erlang':'or'
												    (_cor11, _cor22)
											    in  let <_cor24> =
												    %% Line 683
												    call 'erlang':'or'
													(_cor10, _cor23)
												in  let <_cor25> =
													%% Line 682
													call 'erlang':'or'
													    (_cor9, _cor24)
												    in  let <_cor26> =
													    %% Line 682
													    call 'erlang':'or'
														(_cor8, _cor25)
													in  let <_cor27> =
														%% Line 681
														call 'erlang':'or'
														    (_cor7, _cor26)
													    in  let <_cor28> =
														    %% Line 681
														    call 'erlang':'or'
															(_cor6, _cor27)
														in  let <_cor29> =
															call 'erlang':'or'
															    (_cor5, _cor28)
														    in  call 'erlang':'or'
															    (_cor4, _cor29) ->
	      %% Line 687
	      ( case _cor0 of
		  ( <( {'state',_cor39,_cor40,_cor41,_cor42,_rec1,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49}
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'type_test_opaque_arg'/3
			    (_cor2, _cor1, _rec1)
		    -| ['compiler_generated'] )
		  ( <_cor50> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 688
	  <{'erlang',FN,2}>
	      when call 'erlang':'=:='
		    (FN,
		     'is_function') ->
	      %% Line 689
	      ( case _cor0 of
		  ( <( {'state',_cor51,_cor52,_cor53,_cor54,_rec2,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61}
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'type_test_opaque_arg'/3
			    (_cor2, _cor1, _rec2)
		    -| ['compiler_generated'] )
		  ( <_cor62> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 690
	  <_cor63> when 'true' ->
	      'no'
	end
'type_test_opaque_arg'/3 =
    %% Line 693
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],[],_X_Opaques> when 'true' ->
	      %% Line 694
	      'no'
	  %% Line 695
	  <[Arg|Args],[ArgType|ArgTypes],Opaques> when 'true' ->
	      %% Line 696
	      case call 'erl_types':'t_has_opaque_subtype'
		       (ArgType, Opaques) of
		%% Line 697
		<'true'> when 'true' ->
		    {'yes',Arg,ArgType}
		%% Line 698
		<'false'> when 'true' ->
		    apply 'type_test_opaque_arg'/3
			(Args, ArgTypes, Opaques)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'type_test_opaque_arg',3}}] )
	    -| ['compiler_generated'] )
	end
'expected_arg_triples'/3 =
    %% Line 701
    fun (_cor2,_cor1,_cor0) ->
	%% Line 702
	( letrec
	      'lc$^0'/1 =
		  fun (_cor5) ->
		      case _cor5 of
			<[%% Line 705
			  N|_cor4]> when 'true' ->
			    let <Arg> =
				%% Line 703
				call 'lists':'nth'
				    (N, _cor1)
			    in  let <_cor7> =
				    %% Line 704
				    apply 'format_type'/2
					(Arg, _cor0)
				in  let <_cor8> =
					%% Line 705
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [%% Line 704
					   {N,Arg,_cor7}|_cor8]
					  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor5> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor5})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor2)
	  -| ['list_comprehension'] )
'add_bif_warnings'/4 =
    %% Line 707
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'erlang',Op,2},Ts = [T1|[T2|[]]],Tree,State>
	      when let <_cor4> =
		    %% Line 708
		    call 'erlang':'=:='
			(Op, '=:=')
		in  let <_cor5> =
			%% Line 708
			call 'erlang':'=:='
			    (Op, '==')
		    in  %% Line 708
			call 'erlang':'or'
			    (_cor4, _cor5) ->
	      %% Line 709
	      ( case State of
		  ( <( {'state',_cor38,_cor39,_cor40,_cor41,_rec3,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Inf> =
			    %% Line 710
			    call 'erl_types':'t_inf'
				(T1, T2, _rec3)
			in  let <_cor16> =
				%% Line 712
				( case call 'erl_types':'t_is_none'
					   (Inf) of
				    ( <( 'true'
					 -| ['compiler_generated'] )> when 'true' ->
					  %% Line 713
					  ( case call 'erl_types':'any_none'
						     (Ts) of
					      ( <'false'> when 'true' ->
						    let <_cor13> =
							apply 'is_int_float_eq_comp'/4
							    (T1, Op, T2, _rec3)
						    in  call 'erlang':'not'
							    (_cor13)
						-| ['compiler_generated'] )
					      ( <'true'> when 'true' ->
						    'false'
						-| ['compiler_generated'] )
					      ( <_cor_variable> when 'true' ->
						    call 'erlang':'error'
							('badarg')
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <( 'false'
					 -| ['compiler_generated'] )> when 'true' ->
					  'false'
				      -| ['compiler_generated'] )
				    ( <_cor10> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {( 'badarg'
						      -| ['compiler_generated'] ),_cor10}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    in  %% Line 711
				case _cor16 of
				  %% Line 715
				  <'true'> when 'true' ->
				      %% Line 717
				      case call 'erl_types':'t_find_unknown_opaque'
					       (T1, T2, _rec3) of
					%% Line 718
					<[]> when 'true' ->
					    let <Args> =
						%% Line 719
						apply 'comp_format_args'/5
						    ([], T1, Op, T2, State)
					    in  %% Line 720
						apply 'state__add_warning'/4
						    (State, 'warn_matching', Tree, {'exact_eq',Args})
					%% Line 721
					<Ns> when 'true' ->
					    let <Args> =
						%% Line 722
						apply 'comp_format_args'/5
						    (Ns, T1, Op, T2, State)
					    in  %% Line 723
						apply 'state__add_warning'/4
						    (State, 'warn_opaque', Tree, {'opaque_eq',Args})
				      end
				  %% Line 725
				  <'false'> when 'true' ->
				      %% Line 726
				      State
				  ( <_cor20> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor20})
				    -| ['compiler_generated'] )
				end
		    -| ['compiler_generated'] )
		  ( <_cor49> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 728
	  <{'erlang',Op,2},Ts = [T1|[T2|[]]],Tree,State>
	      when let <_cor21> =
		    %% Line 729
		    call 'erlang':'=:='
			(Op, '=/=')
		in  let <_cor22> =
			%% Line 729
			call 'erlang':'=:='
			    (Op, '/=')
		    in  %% Line 729
			call 'erlang':'or'
			    (_cor21, _cor22) ->
	      %% Line 730
	      ( case State of
		  ( <( {'state',_cor50,_cor51,_cor52,_cor53,_rec4,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor27> =
			    %% Line 732
			    call 'erl_types':'any_none'
				(Ts)
			in  let <_cor30> =
				%% Line 733
				( case _cor27 of
				    ( <'false'> when 'true' ->
					  let <_cor28> =
					      apply 'is_int_float_eq_comp'/4
						  (T1, Op, T2, _rec4)
					  in  call 'erlang':'not'
						  (_cor28)
				      -| ['compiler_generated'] )
				    ( <'true'> when 'true' ->
					  'false'
				      -| ['compiler_generated'] )
				    ( <_cor_variable> when 'true' ->
					  call 'erlang':'error'
					      ('badarg')
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    in  %% Line 731
				case _cor30 of
				  %% Line 735
				  <'true'> when 'true' ->
				      %% Line 736
				      case call 'erl_types':'t_find_unknown_opaque'
					       (T1, T2, _rec4) of
					%% Line 737
					<[]> when 'true' ->
					    State
					%% Line 738
					<Ns> when 'true' ->
					    let <Args> =
						%% Line 739
						apply 'comp_format_args'/5
						    (Ns, T1, Op, T2, State)
					    in  %% Line 740
						apply 'state__add_warning'/4
						    (State, 'warn_opaque', Tree, {'opaque_neq',Args})
				      end
				  %% Line 742
				  <'false'> when 'true' ->
				      %% Line 743
				      State
				  ( <_cor33> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor33})
				    -| ['compiler_generated'] )
				end
		    -| ['compiler_generated'] )
		  ( <_cor61> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 745
	  <_cor62,_cor63,_cor64,State> when 'true' ->
	      %% Line 746
	      State
	end
'is_int_float_eq_comp'/4 =
    %% Line 748
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 749
	    ( case <> of
		( <>
		      when call 'erlang':'=:='
			    (_cor2,
			     '==') ->
		      'true'
		  -| ['compiler_generated'] )
		( <> when 'true' ->
		      call 'erlang':'=:='
			  (_cor2, '/=')
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
	in  %% Line 749
	    ( case _cor7 of
		( <( 'true'
		     -| ['compiler_generated'] )> when 'true' ->
		      let <_cor11> =
			  %% Line 751
			  ( case call 'erl_types':'t_is_float'
				     (_cor3, _cor0) of
			      ( <( 'true'
				   -| ['compiler_generated'] )> when 'true' ->
				    call 'erl_types':'t_is_integer'
					(_cor1, _cor0)
				-| ['compiler_generated'] )
			      ( <( 'false'
				   -| ['compiler_generated'] )> when 'true' ->
				    'false'
				-| ['compiler_generated'] )
			      ( <_cor9> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {( 'badarg'
						-| ['compiler_generated'] ),_cor9}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      in  %% Line 751
			  ( case _cor11 of
			      ( <( 'true'
				   -| ['compiler_generated'] )> when 'true' ->
				    'true'
				-| ['compiler_generated'] )
			      ( <( 'false'
				   -| ['compiler_generated'] )> when 'true' ->
				    %% Line 753
				    ( case call 'erl_types':'t_is_integer'
					       (_cor3, _cor0) of
					( <( 'true'
					     -| ['compiler_generated'] )> when 'true' ->
					      call 'erl_types':'t_is_float'
						  (_cor1, _cor0)
					  -| ['compiler_generated'] )
					( <( 'false'
					     -| ['compiler_generated'] )> when 'true' ->
					      'false'
					  -| ['compiler_generated'] )
					( <_cor12> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {( 'badarg'
							  -| ['compiler_generated'] ),_cor12}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <_cor8> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {( 'badarg'
						-| ['compiler_generated'] ),_cor8}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		  -| ['compiler_generated'] )
		( <( 'false'
		     -| ['compiler_generated'] )> when 'true' ->
		      'false'
		  -| ['compiler_generated'] )
		( <_cor4> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {( 'badarg'
				  -| ['compiler_generated'] ),_cor4}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'comp_format_args'/5 =
    %% Line 755
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[1|_cor14],T1,Op,T2,State> when 'true' ->
	      let <_cor5> =
		  %% Line 756
		  apply 'format_type'/2
		      (T2, State)
	      in  let <_cor6> =
		      %% Line 756
		      apply 'format_type'/2
			  (T1, State)
		  in  %% Line 756
		      [_cor5|[Op|[_cor6|[]]]]
	  %% Line 757
	  <_cor15,T1,Op,T2,State> when 'true' ->
	      let <_cor7> =
		  %% Line 758
		  apply 'format_type'/2
		      (T1, State)
	      in  let <_cor8> =
		      %% Line 758
		      apply 'format_type'/2
			  (T2, State)
		  in  %% Line 758
		      [_cor7|[Op|[_cor8|[]]]]
	end
'handle_bitstr'/3 =
    %% Line 762
    fun (_cor2,_cor1,_cor0) ->
	let <Size> =
	    %% Line 764
	    call 'cerl':'bitstr_size'
		(_cor2)
	in  let <Val> =
		%% Line 765
		call 'cerl':'bitstr_val'
		    (_cor2)
	    in  let <_cor5> =
		    %% Line 766
		    call 'cerl':'bitstr_type'
			(_cor2)
		in  let <BitstrType> =
			%% Line 766
			call 'cerl':'concrete'
			    (_cor5)
		    in  %% Line 767
			case apply 'traverse'/3
				 (Size, _cor1, _cor0) of
			  <{State1,Map1,SizeType0}> when 'true' ->
			      %% Line 768
			      case apply 'traverse'/3
				       (Val, Map1, State1) of
				<{State2,Map2,ValType0}> when 'true' ->
				    %% Line 769
				    case call 'cerl':'bitstr_bitsize'
					     (_cor2) of
				      %% Line 770
				      <BitSz>
					  when try
						( case <> of
						    ( <>
							  when call 'erlang':'=:='
								(BitSz,
								 'all') ->
							  'true'
						      -| ['compiler_generated'] )
						    ( <> when 'true' ->
							  call 'erlang':'=:='
							      (BitSz, 'utf')
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false' ->
					  let <_cor17> =
					      %% Line 772
					      case BitSz of
						%% Line 773
						<'all'> when 'true' ->
						    %% Line 774
						    case call 'erlang':'=:='
							     (BitstrType, 'binary') of
						      <'true'> when 'true' ->
							  let <_cor13> =
							      %% Line 775
							      call 'erl_types':'t_bitstr'
								  ()
							  in  %% Line 775
							      call 'erl_types':'t_inf'
								  (ValType0, _cor13)
						      ( <_cor12> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor12})
							-| ['compiler_generated'] )
						    end
						%% Line 776
						<'utf'> when 'true' ->
						    %% Line 777
						    case call 'lists':'member'
							     (BitstrType, ['utf8'|['utf16'|['utf32']]]) of
						      <'true'> when 'true' ->
							  let <_cor15> =
							      %% Line 778
							      call 'erl_types':'t_integer'
								  ()
							  in  %% Line 778
							      call 'erl_types':'t_inf'
								  (ValType0, _cor15)
						      ( <_cor14> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor14})
							-| ['compiler_generated'] )
						    end
						( <_cor16> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor16})
						  -| ['compiler_generated'] )
					      end
					  in  let <Map3> =
						  %% Line 780
						  apply 'enter_type'/3
						      (Val, _cor17, Map2)
					      in  %% Line 781
						  case call 'erl_types':'t_is_none'
							   (_cor17) of
						    %% Line 782
						    <'true'> when 'true' ->
							let <_cor20> =
							    %% Line 784
							    apply 'format_cerl'/1
								(Val)
							in  let <_cor21> =
								%% Line 784
								apply 'format_cerl'/1
								    (_cor2)
							    in  let <_cor22> =
								    %% Line 785
								    apply 'format_type'/2
									(ValType0, State2)
								in  let <Msg> =
									%% Line 783
									{'bin_construction',[[118|[97|[108|[117|[101]]]]]|%% Line 784
															  [_cor20|[_cor21|%% Line 785
																	  [_cor22|[]]]]]}
								    in  let <State3> =
									    %% Line 786
									    apply 'state__add_warning'/4
										(State2, 'warn_bin_construction', Val, Msg)
									in  let <_cor25> =
										%% Line 787
										call 'erl_types':'t_none'
										    ()
									    in  %% Line 787
										{State3,Map3,_cor25}
						    %% Line 788
						    <'false'> when 'true' ->
							let <_cor26> =
							    %% Line 789
							    call 'erl_types':'t_bitstr'
								()
							in  %% Line 789
							    {State2,Map3,_cor26}
						    ( <_cor27> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor27})
						      -| ['compiler_generated'] )
						  end
				      %% Line 791
				      <BitSz>
					  when try
						( case <> of
						    ( <>
							  when call 'erlang':'is_integer'
								(BitSz) ->
							  'true'
						      -| ['compiler_generated'] )
						    ( <> when 'true' ->
							  call 'erlang':'=:='
							      (BitSz, 'any')
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false' ->
					  let <_cor31> =
					      %% Line 792
					      call 'erl_types':'t_non_neg_integer'
						  ()
					  in  let <SizeType> =
						  %% Line 792
						  call 'erl_types':'t_inf'
						      (SizeType0, _cor31)
					      in  let <_cor37> =
						      %% Line 794
						      case BitstrType of
							%% Line 795
							<'binary'> when 'true' ->
							    let <_cor33> =
								call 'erl_types':'t_bitstr'
								    ()
							    in  call 'erl_types':'t_inf'
								    (ValType0, _cor33)
							%% Line 796
							<'float'> when 'true' ->
							    let <_cor34> =
								call 'erl_types':'t_number'
								    ()
							    in  call 'erl_types':'t_inf'
								    (ValType0, _cor34)
							%% Line 797
							<'integer'> when 'true' ->
							    let <_cor35> =
								call 'erl_types':'t_integer'
								    ()
							    in  call 'erl_types':'t_inf'
								    (ValType0, _cor35)
							( <_cor36> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_cor36})
							  -| ['compiler_generated'] )
						      end
						  in  %% Line 799
						      case call 'erl_types':'any_none'
							       ([SizeType|[_cor37|[]]]) of
							%% Line 800
							<'true'> when 'true' ->
							    let <Msg,Offending> =
								%% Line 802
								case call 'erl_types':'t_is_none'
									 (SizeType) of
								  %% Line 803
								  <'true'> when 'true' ->
								      let <_cor39> =
									  %% Line 805
									  apply 'format_cerl'/1
									      (Size)
								      in  let <_cor40> =
									      %% Line 805
									      apply 'format_cerl'/1
										  (_cor2)
									  in  let <_cor41> =
										  %% Line 806
										  apply 'format_type'/2
										      (SizeType0, State2)
									      in  %% Line 804
										  <{'bin_construction',%% Line 805
												       [[115|[105|[122|[101]]]]|[_cor39|[_cor40|%% Line 806
																		[_cor41|[]]]]]},%% Line 807
																				Size>
								  %% Line 808
								  <'false'> when 'true' ->
								      let <_cor42> =
									  %% Line 810
									  apply 'format_cerl'/1
									      (Val)
								      in  let <_cor43> =
									      %% Line 810
									      apply 'format_cerl'/1
										  (_cor2)
									  in  let <_cor44> =
										  %% Line 811
										  apply 'format_type'/2
										      (ValType0, State2)
									      in  %% Line 809
										  <{'bin_construction',%% Line 810
												       [[118|[97|[108|[117|[101]]]]]|[_cor42|[_cor43|%% Line 811
																		     [_cor44|[]]]]]},%% Line 812
																				     Val>
								  ( <_cor45> when 'true' ->
									primop 'match_fail'
									    ({'case_clause',_cor45})
								    -| ['compiler_generated'] )
								end
							    in  let <State3> =
								    %% Line 814
								    apply 'state__add_warning'/4
									(State2, 'warn_bin_construction', %% Line 815
													  Offending, %% Line 815
														     Msg)
								in  let <_cor49> =
									%% Line 816
									call 'erl_types':'t_none'
									    ()
								    in  %% Line 816
									{State3,Map2,_cor49}
							%% Line 817
							<'false'> when 'true' ->
							    let <_cor50> =
								%% Line 818
								call 'cerl':'bitstr_unit'
								    (_cor2)
							    in  let <UnitVal> =
								    %% Line 818
								    call 'cerl':'concrete'
									(_cor50)
								in  %% Line 819
								    ( case State2 of
									( <( {'state',_cor77,_cor78,_cor79,_cor80,_rec5,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87}
									     -| ['compiler_generated'] )> when 'true' ->
									      let <NumberVals> =
										  %% Line 820
										  call 'erl_types':'t_number_vals'
										      (SizeType, _rec5)
									      in  let <State3,Type> =
										      %% Line 822
										      case call 'erl_types':'t_contains_opaque'
											       (SizeType, _rec5) of
											%% Line 823
											<'true'> when 'true' ->
											    let <_cor56> =
												%% Line 824
												apply 'format_type'/2
												    (SizeType, State2)
											    in  let <_cor57> =
												    %% Line 825
												    apply 'format_cerl'/1
													(Size)
												in  let <Msg> =
													%% Line 824
													{'opaque_size',[_cor56|%% Line 825
															       [_cor57|[]]]}
												    in  let <_cor60> =
													    %% Line 826
													    apply 'state__add_warning'/4
														(State2, 'warn_opaque', Size, Msg)
													in  let <_cor59> =
														%% Line 827
														call 'erl_types':'t_none'
														    ()
													    in  <_cor60,_cor59>
											%% Line 828
											<'false'> when 'true' ->
											    %% Line 829
											    case NumberVals of
											      %% Line 830
											      <[OneSize|[]]> when 'true' ->
												  let <_cor61> =
												      call 'erlang':'*'
													  (OneSize, UnitVal)
												  in  let <_cor62> =
													  call 'erl_types':'t_bitstr'
													      (0, _cor61)
												      in  <State2,_cor62>
											      %% Line 831
											      <'unknown'> when 'true' ->
												  let <_cor63> =
												      call 'erl_types':'t_bitstr'
													  ()
												  in  <State2,_cor63>
											      %% Line 832
											      <_cor89> when 'true' ->
												  let <MinSize> =
												      %% Line 833
												      call 'erl_types':'number_min'
													  (SizeType, _rec5)
												  in  let <_cor65> =
													  %% Line 834
													  call 'erlang':'*'
													      (UnitVal, MinSize)
												      in  let <_cor66> =
													      %% Line 834
													      call 'erl_types':'t_bitstr'
														  (UnitVal, _cor65)
													  in  %% Line 834
													      <State2,_cor66>
											    end
											( <_cor68> when 'true' ->
											      primop 'match_fail'
												  ({'case_clause',_cor68})
											  -| ['compiler_generated'] )
										      end
										  in  let <Map3> =
											  %% Line 837
											  apply 'enter_type_lists'/3
											      ([Val|[Size|[_cor2|[]]]], %% Line 838
															[_cor37|[SizeType|[Type|[]]]], %% Line 838
																		       Map2)
										      in  %% Line 839
											  {State3,Map3,Type}
									  -| ['compiler_generated'] )
									( <_cor88> when 'true' ->
									      ( call ( 'erlang'
										       -| ['compiler_generated'] ):( 'error'
														     -| ['compiler_generated'] )
										    (( {'badrecord','state'}
										       -| ['compiler_generated'] ))
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								      end
								      -| ['compiler_generated'] )
							( <_cor72> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_cor72})
							  -| ['compiler_generated'] )
						      end
				      ( <_cor73> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor73})
					-| ['compiler_generated'] )
				    end
				( <_cor8> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor8})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor7> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor7})
			    -| ['compiler_generated'] )
			end
'handle_call'/3 =
    %% Line 845
    fun (_cor2,_cor1,_cor0) ->
	let <M> =
	    %% Line 846
	    call 'cerl':'call_module'
		(_cor2)
	in  let <F> =
		%% Line 847
		call 'cerl':'call_name'
		    (_cor2)
	    in  let <Args> =
		    %% Line 848
		    call 'cerl':'call_args'
			(_cor2)
		in  let <MFAList> =
			%% Line 849
			[M|[F|Args]]
		    in  %% Line 850
			case apply 'traverse_list'/3
				 (MFAList, _cor1, _cor0) of
			  <{State1,Map1,[MType0|[FType0|As]]}> when 'true' ->
			      %% Line 851
			      ( case _cor0 of
				  ( <( {'state',_cor70,_cor71,_cor72,_cor73,_rec6,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_cor11> =
					    %% Line 852
					    call 'erl_types':'t_module'
						()
					in  let <MType> =
						%% Line 852
						call 'erl_types':'t_inf'
						    (_cor11, MType0, _rec6)
					    in  let <_cor13> =
						    %% Line 853
						    call 'erl_types':'t_atom'
							()
						in  let <FType> =
							%% Line 853
							call 'erl_types':'t_inf'
							    (_cor13, FType0, _rec6)
						    in  let <Map2> =
							    %% Line 854
							    apply 'enter_type_lists'/3
								([M|[F|[]]], [MType|[FType|[]]], Map1)
							in  let <_cor19> =
								%% Line 855
								( case call 'erl_types':'t_is_none'
									   (MType) of
								    ( <( 'true'
									 -| ['compiler_generated'] )> when 'true' ->
									  let <_cor17> =
									      call 'erl_types':'t_is_none'
										  (MType0)
									  in  call 'erlang':'not'
										  (_cor17)
								      -| ['compiler_generated'] )
								    ( <( 'false'
									 -| ['compiler_generated'] )> when 'true' ->
									  'false'
								      -| ['compiler_generated'] )
								    ( <_cor16> when 'true' ->
									  ( call ( 'erlang'
										   -| ['compiler_generated'] ):( 'error'
														 -| ['compiler_generated'] )
										(( {( 'badarg'
										      -| ['compiler_generated'] ),_cor16}
										   -| ['compiler_generated'] ))
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								  end
								  -| ['compiler_generated'] )
							    in  let <_cor24> =
								    %% Line 856
								    ( case call 'erl_types':'t_is_none'
									       (FType) of
									( <( 'true'
									     -| ['compiler_generated'] )> when 'true' ->
									      let <_cor22> =
										  call 'erl_types':'t_is_none'
										      (FType0)
									      in  call 'erlang':'not'
										      (_cor22)
									  -| ['compiler_generated'] )
									( <( 'false'
									     -| ['compiler_generated'] )> when 'true' ->
									      'false'
									  -| ['compiler_generated'] )
									( <_cor21> when 'true' ->
									      ( call ( 'erlang'
										       -| ['compiler_generated'] ):( 'error'
														     -| ['compiler_generated'] )
										    (( {( 'badarg'
											  -| ['compiler_generated'] ),_cor21}
										       -| ['compiler_generated'] ))
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								      end
								      -| ['compiler_generated'] )
								in  %% Line 857
								    case call 'erl_types':'any_none'
									     ([MType|[FType|As]]) of
								      %% Line 858
								      <'true'> when 'true' ->
									  let <_cor54> =
									      %% Line 860
									      case <> of
										%% Line 861
										<>
										    when _cor19 ->
										    let <MS> =
											%% Line 862
											apply 'format_cerl'/1
											    (M)
										    in  let <_cor27> =
											    %% Line 863
											    call 'erl_types':'t_module'
												()
											in  let <_cor28> =
												%% Line 863
												call 'erl_types':'t_inf'
												    (_cor27, MType0)
											    in  %% Line 863
												case call 'erl_types':'t_is_none'
													 (_cor28) of
												  %% Line 864
												  <'true'> when 'true' ->
												      let <_cor29> =
													  %% Line 865
													  apply 'format_cerl'/1
													      (F)
												      in  let <_cor30> =
													      %% Line 866
													      apply 'format_args'/3
														  (Args, As, State1)
													  in  let <_cor31> =
														  %% Line 867
														  call 'erl_types':'t_module'
														      ()
													      in  let <_cor32> =
														      %% Line 867
														      apply 'format_type'/2
															  (_cor31, State1)
														  in  let <_cor33> =
															  %% Line 868
															  apply 'format_type'/2
															      (MType0, State1)
														      in  let <Msg> =
															      %% Line 865
															      {'app_call',[MS|[_cor29|%% Line 866
																		      [_cor30|%% Line 867
																			      [MS|[_cor32|%% Line 868
																					  [_cor33|[]]]]]]]}
															  in  %% Line 869
															      apply 'state__add_warning'/4
																  (State1, 'warn_failing_call', _cor2, Msg)
												  %% Line 870
												  <'false'> when 'true' ->
												      let <_cor35> =
													  %% Line 871
													  apply 'format_cerl'/1
													      (F)
												      in  let <_cor36> =
													      %% Line 872
													      apply 'format_args'/3
														  (Args, As, State1)
													  in  let <_cor37> =
														  %% Line 873
														  apply 'format_type'/2
														      (MType0, State1)
													      in  let <Msg> =
														      %% Line 871
														      {'opaque_call',[MS|[_cor35|%% Line 872
																		 [_cor36|%% Line 873
																			 [MS|[_cor37|[]]]]]]}
														  in  %% Line 874
														      apply 'state__add_warning'/4
															  (State1, 'warn_failing_call', _cor2, Msg)
												  ( <_cor39> when 'true' ->
													primop 'match_fail'
													    ({'case_clause',_cor39})
												    -| ['compiler_generated'] )
												end
										%% Line 876
										<>
										    when _cor24 ->
										    let <FS> =
											%% Line 877
											apply 'format_cerl'/1
											    (F)
										    in  let <_cor41> =
											    %% Line 878
											    call 'erl_types':'t_atom'
												()
											in  let <_cor42> =
												%% Line 878
												call 'erl_types':'t_inf'
												    (_cor41, FType0)
											    in  %% Line 878
												case call 'erl_types':'t_is_none'
													 (_cor42) of
												  %% Line 879
												  <'true'> when 'true' ->
												      let <_cor43> =
													  %% Line 880
													  apply 'format_cerl'/1
													      (M)
												      in  let <_cor44> =
													      %% Line 881
													      apply 'format_args'/3
														  (Args, As, State1)
													  in  let <_cor45> =
														  %% Line 882
														  call 'erl_types':'t_atom'
														      ()
													      in  let <_cor46> =
														      %% Line 882
														      apply 'format_type'/2
															  (_cor45, State1)
														  in  let <_cor47> =
															  %% Line 883
															  apply 'format_type'/2
															      (FType0, State1)
														      in  let <Msg> =
															      %% Line 880
															      {'app_call',[_cor43|[FS|%% Line 881
																		      [_cor44|%% Line 882
																			      [FS|[_cor46|%% Line 883
																					  [_cor47|[]]]]]]]}
															  in  %% Line 884
															      apply 'state__add_warning'/4
																  (State1, 'warn_failing_call', _cor2, Msg)
												  %% Line 885
												  <'false'> when 'true' ->
												      let <_cor49> =
													  %% Line 886
													  apply 'format_cerl'/1
													      (M)
												      in  let <_cor50> =
													      %% Line 887
													      apply 'format_args'/3
														  (Args, As, State1)
													  in  let <_cor51> =
														  %% Line 888
														  apply 'format_type'/2
														      (FType0, State1)
													      in  let <Msg> =
														      %% Line 886
														      {'opaque_call',[_cor49|[FS|%% Line 887
																		 [_cor50|%% Line 888
																			 [FS|[_cor51|[]]]]]]}
														  in  %% Line 889
														      apply 'state__add_warning'/4
															  (State1, 'warn_failing_call', _cor2, Msg)
												  ( <_cor53> when 'true' ->
													primop 'match_fail'
													    ({'case_clause',_cor53})
												    -| ['compiler_generated'] )
												end
										%% Line 891
										<> when 'true' ->
										    State1
									      end
									  in  let <_cor56> =
										  %% Line 893
										  call 'erl_types':'t_none'
										      ()
									      in  %% Line 893
										  {_cor54,Map2,_cor56}
								      %% Line 894
								      <'false'> when 'true' ->
									  %% Line 895
									  case call 'erl_types':'t_is_atom'
										   (MType) of
									    %% Line 896
									    <'true'> when 'true' ->
										let <_cor58> =
										    %% Line 898
										    call 'erl_types':'t_atom_vals'
											(MType)
										in  let <_cor57> =
											%% Line 898
											call 'erl_types':'t_atom_vals'
											    (FType)
										    in  %% Line 898
											case <_cor58,_cor57> of
											  %% Line 899
											  <[MAtom|[]],[FAtom|[]]> when 'true' ->
											      let <_cor59> =
												  %% Line 900
												  call 'erlang':'length'
												      (Args)
											      in  let <_cor60> =
												      %% Line 900
												      apply 'state__fun_info'/2
													  ({MAtom,FAtom,_cor59}, %% Line 901
																 State1)
												  in  let <FunInfo> =
													  %% Line 900
													  [{'remote',_cor60}|%% Line 901
															     []]
												      in  %% Line 902
													  apply 'handle_apply_or_call'/6
													      (FunInfo, Args, As, Map2, _cor2, State1)
											  %% Line 903
											  <_X_MAtoms,_X_FAtoms> when 'true' ->
											      let <_cor62> =
												  %% Line 904
												  call 'erl_types':'t_any'
												      ()
											      in  %% Line 904
												  {State1,Map2,_cor62}
											end
									    %% Line 906
									    <'false'> when 'true' ->
										let <_cor64> =
										    %% Line 907
										    call 'erl_types':'t_any'
											()
										in  %% Line 907
										    {State1,Map2,_cor64}
									    ( <_cor65> when 'true' ->
										  primop 'match_fail'
										      ({'case_clause',_cor65})
									      -| ['compiler_generated'] )
									  end
								      ( <_cor66> when 'true' ->
									    primop 'match_fail'
										({'case_clause',_cor66})
									-| ['compiler_generated'] )
								    end
				    -| ['compiler_generated'] )
				  ( <_cor81> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','state'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  ( <_cor7> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor7})
			    -| ['compiler_generated'] )
			end
'handle_case'/3 =
    %% Line 913
    fun (_cor2,_cor1,_cor0) ->
	let <Arg> =
	    %% Line 914
	    call 'cerl':'case_arg'
		(_cor2)
	in  let <_cor4> =
		%% Line 915
		call 'cerl':'case_clauses'
		    (_cor2)
	    in  let <Clauses> =
		    %% Line 915
		    apply 'filter_match_fail'/1
			(_cor4)
		in  %% Line 916
		    case apply 'traverse'/3
			     (Arg, _cor1, _cor0) of
		      <SMA = {State1,Map1,ArgType}> when 'true' ->
			  %% Line 917
			  case call 'erl_types':'t_is_none_or_unit'
				   (ArgType) of
			    %% Line 918
			    <'true'> when 'true' ->
				SMA
			    %% Line 919
			    <'false'> when 'true' ->
				let <_cor10> =
				    %% Line 921
				    case apply 'is_race_analysis_enabled'/1
					     (_cor0) of
				      %% Line 922
				      <'true'> when 'true' ->
					  %% Line 923
					  case apply 'get_race_list_and_size'/1
						   (State1) of
					    <{RaceList,RaceListSize}> when 'true' ->
						let <_cor8> =
						    %% Line 925
						    call 'erlang':'+'
							(RaceListSize, 1)
						in  %% Line 924
						    apply 'state__renew_race_list'/3
							(['beg_case'|RaceList], _cor8, %% Line 925
										       State1)
					    ( <_cor7> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor7})
					      -| ['compiler_generated'] )
					  end
				      %% Line 926
				      <'false'> when 'true' ->
					  State1
				      ( <_cor9> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor9})
					-| ['compiler_generated'] )
				    end
				in  let <Map2> =
					%% Line 928
					apply 'join_maps_begin'/1
					    (Map1)
				    in  %% Line 929
					case %% Line 930
					     apply 'handle_clauses'/9
						 (Clauses, Arg, ArgType, ArgType, _cor10, %% Line 931
											  [], %% Line 931
											      Map2, %% Line 931
												    [], %% Line 931
													[]) of
					  <{MapList,State3,Type}> when 'true' ->
					      let <Map3> =
						  %% Line 932
						  apply 'join_maps_end'/2
						      (MapList, Map2)
					      in  do  %% Line 933
						      apply 'debug_pp_map'/1
							  (Map3)
						      %% Line 934
						      {State3,Map3,Type}
					  ( <_cor13> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor13})
					    -| ['compiler_generated'] )
					end
			    ( <_cor15> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor15})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
'handle_cons'/3 =
    %% Line 939
    fun (_cor2,_cor1,_cor0) ->
	let <Hd> =
	    %% Line 940
	    call 'cerl':'cons_hd'
		(_cor2)
	in  let <Tl> =
		%% Line 941
		call 'cerl':'cons_tl'
		    (_cor2)
	    in  %% Line 942
		case apply 'traverse'/3
			 (Hd, _cor1, _cor0) of
		  <{State1,Map1,HdType}> when 'true' ->
		      %% Line 943
		      case apply 'traverse'/3
			       (Tl, Map1, State1) of
			<{State2,Map2,TlType}> when 'true' ->
			    let <_cor9> =
				%% Line 945
				call 'erl_types':'t_list'
				    ()
			    in  %% Line 945
				( case State2 of
				    ( <( {'state',_cor20,_cor21,_cor22,_cor23,_rec7,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <_cor10> =
					      call 'erl_types':'t_inf'
						  (TlType, _cor9, _rec7)
					  in  let <_cor14> =
						  case call 'erl_types':'t_is_none'
							   (_cor10) of
						    %% Line 946
						    <'true'> when 'true' ->
							let <_cor11> =
							    %% Line 947
							    apply 'format_type'/2
								(TlType, State2)
							in  let <Msg> =
								%% Line 947
								{'improper_list_constr',[_cor11|[]]}
							    in  %% Line 948
								apply 'state__add_warning'/4
								    (State2, 'warn_non_proper_list', _cor2, Msg)
						    %% Line 949
						    <'false'> when 'true' ->
							%% Line 950
							State2
						    ( <_cor13> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor13})
						      -| ['compiler_generated'] )
						  end
					      in  let <Type> =
						      %% Line 952
						      call 'erl_types':'t_cons'
							  (HdType, TlType)
						  in  %% Line 953
						      {_cor14,Map2,Type}
				      -| ['compiler_generated'] )
				    ( <_cor31> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','state'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
		  ( <_cor5> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor5})
		    -| ['compiler_generated'] )
		end
'handle_let'/3 =
    %% Line 957
    fun (_cor2,_cor1,_cor0) ->
	let <IsRaceAnalysisEnabled> =
	    %% Line 958
	    apply 'is_race_analysis_enabled'/1
		(_cor0)
	in  let <Arg> =
		%% Line 959
		call 'cerl':'let_arg'
		    (_cor2)
	    in  let <Vars> =
		    %% Line 960
		    call 'cerl':'let_vars'
			(_cor2)
		in  let <Map0,State0> =
			%% Line 962
			case call 'cerl':'is_c_var'
				 (Arg) of
			  %% Line 963
			  <'true'> when 'true' ->
			      %% Line 964
			      case Vars of
				<[Var|[]]> when 'true' ->
				    let <_cor12> =
					%% Line 965
					apply 'enter_subst'/3
					    (Var, Arg, _cor1)
				    in  let <_cor11> =
					    %% Line 966
					    case IsRaceAnalysisEnabled of
					      %% Line 967
					      <'true'> when 'true' ->
						  %% Line 968
						  case apply 'get_race_list_and_size'/1
							   (_cor0) of
						    <{RaceList,RaceListSize}> when 'true' ->
							let <_cor9> =
							    %% Line 970
							    call 'dialyzer_races':'let_tag_new'
								(Var, Arg)
							in  let <_cor8> =
								%% Line 971
								call 'erlang':'+'
								    (RaceListSize, 1)
							    in  %% Line 969
								apply 'state__renew_race_list'/3
								    (%% Line 970
								     [_cor9|RaceList], _cor8, _cor0)
						    ( <_cor7> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor7})
						      -| ['compiler_generated'] )
						  end
					      %% Line 972
					      <'false'> when 'true' ->
						  _cor0
					      ( <_cor10> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor10})
						-| ['compiler_generated'] )
					    end
					in  <_cor12,_cor11>
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor6})
				  -| ['compiler_generated'] )
			      end
			  %% Line 974
			  <'false'> when 'true' ->
			      <_cor1,_cor0>
			  ( <_cor13> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor13})
			    -| ['compiler_generated'] )
			end
		    in  let <Body> =
			    %% Line 976
			    call 'cerl':'let_body'
				(_cor2)
			in  %% Line 977
			    case apply 'traverse'/3
				     (Arg, Map0, State0) of
			      <SMA = {State1,Map1,ArgTypes}> when 'true' ->
				  let <_cor20> =
				      %% Line 979
				      ( case IsRaceAnalysisEnabled of
					  ( <( 'true'
					       -| ['compiler_generated'] )> when 'true' ->
						call 'cerl':'is_c_call'
						    (Arg)
					    -| ['compiler_generated'] )
					  ( <( 'false'
					       -| ['compiler_generated'] )> when 'true' ->
						'false'
					    -| ['compiler_generated'] )
					  ( <_cor18> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {( 'badarg'
							    -| ['compiler_generated'] ),_cor18}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  in  let <_cor34> =
					  %% Line 979
					  case _cor20 of
					    %% Line 980
					    <'true'> when 'true' ->
						let <Mod> =
						    %% Line 981
						    call 'cerl':'call_module'
							(Arg)
						in  let <Name> =
							%% Line 982
							call 'cerl':'call_name'
							    (Arg)
						    in  let <_cor31> =
							    %% Line 983
							    ( case call 'cerl':'is_literal'
								       (Mod) of
								( <( 'true'
								     -| ['compiler_generated'] )> when 'true' ->
								      let <_cor25> =
									  %% Line 984
									  call 'cerl':'concrete'
									      (Mod)
								      in  %% Line 984
									  ( case <> of
									      ( <>
										    when call 'erlang':'=:='
											  (_cor25,
											   'ets') ->
										    %% Line 985
										    ( case call 'cerl':'is_literal'
											       (Name) of
											( <( 'true'
											     -| ['compiler_generated'] )> when 'true' ->
											      let <_cor27> =
												  %% Line 986
												  call 'cerl':'concrete'
												      (Name)
											      in  %% Line 986
												  call 'erlang':'=:='
												      (_cor27, 'new')
											  -| ['compiler_generated'] )
											( <( 'false'
											     -| ['compiler_generated'] )> when 'true' ->
											      'false'
											  -| ['compiler_generated'] )
											( <_cor26> when 'true' ->
											      ( call ( 'erlang'
												       -| ['compiler_generated'] ):( 'error'
																     -| ['compiler_generated'] )
												    (( {( 'badarg'
													  -| ['compiler_generated'] ),_cor26}
												       -| ['compiler_generated'] ))
												-| ['compiler_generated'] )
											  -| ['compiler_generated'] )
										      end
										      -| ['compiler_generated'] )
										-| ['compiler_generated'] )
									      ( <> when 'true' ->
										    'false'
										-| ['compiler_generated'] )
									    end
									    -| ['compiler_generated'] )
								  -| ['compiler_generated'] )
								( <( 'false'
								     -| ['compiler_generated'] )> when 'true' ->
								      'false'
								  -| ['compiler_generated'] )
								( <_cor23> when 'true' ->
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'error'
													     -| ['compiler_generated'] )
									    (( {( 'badarg'
										  -| ['compiler_generated'] ),_cor23}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							      -| ['compiler_generated'] )
							in  %% Line 983
							    case _cor31 of
							      %% Line 987
							      <'true'> when 'true' ->
								  apply 'renew_race_public_tables'/2
								      (Vars, State1)
							      %% Line 988
							      <'false'> when 'true' ->
								  State1
							      ( <_cor32> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_cor32})
								-| ['compiler_generated'] )
							    end
					    %% Line 990
					    <'false'> when 'true' ->
						State1
					    ( <_cor33> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor33})
					      -| ['compiler_generated'] )
					  end
				      in  %% Line 992
					  case call 'erl_types':'t_is_none_or_unit'
						   (ArgTypes) of
					    %% Line 993
					    <'true'> when 'true' ->
						SMA
					    %% Line 994
					    <'false'> when 'true' ->
						let <_cor36> =
						    %% Line 995
						    call 'erl_types':'t_to_tlist'
							(ArgTypes)
						in  let <Map2> =
							%% Line 995
							apply 'enter_type_lists'/3
							    (Vars, _cor36, Map1)
						    in  %% Line 996
							apply 'traverse'/3
							    (Body, Map2, _cor34)
					    ( <_cor38> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor38})
					      -| ['compiler_generated'] )
					  end
			      ( <_cor17> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor17})
				-| ['compiler_generated'] )
			    end
'handle_module'/3 =
    %% Line 1001
    fun (_cor2,_cor1,_cor0) ->
	let <Defs> =
	    %% Line 1004
	    call 'cerl':'module_defs'
		(_cor2)
	in  let <PartFun> =
		%% Line 1005
		( fun (_cor5) ->
		      case _cor5 of
			<{_X_Var,Fun}> when 'true' ->
			    let <_cor4> =
				%% Line 1006
				apply 'get_label'/1
				    (Fun)
			    in  %% Line 1006
				apply 'state__is_escaping'/2
				    (_cor4, _cor0)
			( <_cor6> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor6})
				-| [{'function_name',{'-handle_module/3-fun-0-',1}}] )
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-handle_module/3-fun-0-'}}] )
	    in  %% Line 1008
		case call 'lists':'partition'
			 (PartFun, Defs) of
		  <{Defs1,Defs2}> when 'true' ->
		      let <_cor9> =
			  %% Line 1009
			  call 'cerl':'c_int'
			      (42)
		      in  let <Letrec> =
			      %% Line 1009
			      call 'cerl':'c_letrec'
				  (Defs1, _cor9)
			  in  %% Line 1010
			      case apply 'traverse'/3
				       (Letrec, _cor1, _cor0) of
				<{State1,Map1,_X_FunTypes}> when 'true' ->
				    let <_cor17> =
					%% Line 1012
					( letrec
					      'lc$^0'/1 =
						  fun (_cor14) ->
						      case _cor14 of
							<[{Var,Fun}|_cor13]> when 'true' ->
							    let <_cor15> =
								apply 'state__fun_type'/2
								    (Fun, State1)
							    in  let <_cor16> =
								    apply 'lc$^0'/1
									(_cor13)
								in  ( [{Var,_cor15}|_cor16]
								      -| ['compiler_generated'] )
							( <[_cor12|_cor13]> when 'true' ->
							      apply 'lc$^0'/1
								  (_cor13)
							  -| ['compiler_generated'] )
							<[]> when 'true' ->
							    []
							( <_cor14> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_cor14})
								-| [{'function_name',{'lc$^0',1}}] )
							  -| ['compiler_generated'] )
						      end
					  in  apply 'lc$^0'/1
						  (Defs)
					  -| ['list_comprehension'] )
				    in  let <EnvMap> =
					    %% Line 1013
					    apply 'enter_type_list'/2
						(_cor17, _cor1)
					in  let <FoldFun> =
						%% Line 1014
						( fun (_cor21,_cor20) ->
						      case <_cor21,_cor20> of
							<{_X_Var,Fun},AccState> when 'true' ->
							    %% Line 1015
							    apply 'state__update_fun_env'/3
								(Fun, EnvMap, AccState)
							( <_cor23,_cor22> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_cor23,_cor22})
								-| [{'function_name',{'-handle_module/3-fun-1-',2}}] )
							  -| ['compiler_generated'] )
						      end
						  -| [{'id',{0,0,'-handle_module/3-fun-1-'}}] )
					    in  let <State2> =
						    %% Line 1017
						    call 'lists':'foldl'
							(FoldFun, State1, Defs2)
						in  let <_cor26> =
							%% Line 1018
							call 'erl_types':'t_any'
							    ()
						    in  %% Line 1018
							{State2,Map1,_cor26}
				( <_cor11> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor11})
				  -| ['compiler_generated'] )
			      end
		  ( <_cor8> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor8})
		    -| ['compiler_generated'] )
		end
'handle_receive'/3 =
    %% Line 1022
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1023
	    call 'cerl':'receive_clauses'
		(_cor2)
	in  let <Clauses> =
		%% Line 1023
		apply 'filter_match_fail'/1
		    (_cor3)
	    in  let <Timeout> =
		    %% Line 1024
		    call 'cerl':'receive_timeout'
			(_cor2)
		in  let <_cor9> =
			%% Line 1026
			case apply 'is_race_analysis_enabled'/1
				 (_cor0) of
			  %% Line 1027
			  <'true'> when 'true' ->
			      %% Line 1028
			      case apply 'get_race_list_and_size'/1
				       (_cor0) of
				<{RaceList,RaceListSize}> when 'true' ->
				    let <_cor7> =
					%% Line 1030
					call 'erlang':'+'
					    (RaceListSize, 1)
				    in  %% Line 1029
					apply 'state__renew_race_list'/3
					    (['beg_case'|RaceList], _cor7, _cor0)
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor6})
				  -| ['compiler_generated'] )
			      end
			  %% Line 1031
			  <'false'> when 'true' ->
			      _cor0
			  ( <_cor8> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor8})
			    -| ['compiler_generated'] )
			end
		    in  let <_cor12> =
			    %% Line 1034
			    call 'erl_types':'t_any'
				()
			in  let <_cor11> =
				%% Line 1034
				call 'erl_types':'t_any'
				    ()
			    in  %% Line 1033
				case %% Line 1034
				     apply 'handle_clauses'/9
					 (Clauses, 'no_arg', _cor12, _cor11, _cor9, [], _cor1, %% Line 1035
											       [], %% Line 1035
												   []) of
				  <{MapList,State2,ReceiveType}> when 'true' ->
				      let <Map1> =
					  %% Line 1036
					  apply 'join_maps'/2
					      (MapList, _cor1)
				      in  %% Line 1037
					  case apply 'traverse'/3
						   (Timeout, Map1, State2) of
					    <{State3,Map2,TimeoutType}> when 'true' ->
						%% Line 1038
						( case State3 of
						    ( <( {'state',_cor31,_cor32,_cor33,_cor34,_rec8,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41}
							 -| ['compiler_generated'] )> when 'true' ->
							  let <_cor22> =
							      %% Line 1039
							      ( case call 'erl_types':'t_is_atom'
									 (TimeoutType, _rec8) of
								  ( <( 'true'
								       -| ['compiler_generated'] )> when 'true' ->
									let <_cor20> =
									    %% Line 1040
									    call 'erl_types':'t_atom_vals'
										(TimeoutType, _rec8)
									in  %% Line 1040
									    call 'erlang':'=:='
										(_cor20, ['infinity'])
								    -| ['compiler_generated'] )
								  ( <( 'false'
								       -| ['compiler_generated'] )> when 'true' ->
									'false'
								    -| ['compiler_generated'] )
								  ( <_cor19> when 'true' ->
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'error'
													       -| ['compiler_generated'] )
									      (( {( 'badarg'
										    -| ['compiler_generated'] ),_cor19}
										 -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								end
								-| ['compiler_generated'] )
							  in  %% Line 1039
							      case _cor22 of
								%% Line 1041
								<'true'> when 'true' ->
								    %% Line 1042
								    {State3,Map2,ReceiveType}
								%% Line 1043
								<'false'> when 'true' ->
								    let <Action> =
									%% Line 1044
									call 'cerl':'receive_action'
									    (_cor2)
								    in  %% Line 1045
									case apply 'traverse'/3
										 (Action, _cor1, State3) of
									  <{State4,Map3,ActionType}> when 'true' ->
									      let <Map4> =
										  %% Line 1046
										  apply 'join_maps'/2
										      ([Map3|[Map1|[]]], _cor1)
									      in  let <Type> =
										      %% Line 1047
										      call 'erl_types':'t_sup'
											  (ReceiveType, ActionType)
										  in  %% Line 1048
										      {State4,Map4,Type}
									  ( <_cor24> when 'true' ->
										primop 'match_fail'
										    ({'badmatch',_cor24})
									    -| ['compiler_generated'] )
									end
								( <_cor27> when 'true' ->
								      primop 'match_fail'
									  ({'case_clause',_cor27})
								  -| ['compiler_generated'] )
							      end
						      -| ['compiler_generated'] )
						    ( <_cor42> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','state'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    ( <_cor15> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor15})
					      -| ['compiler_generated'] )
					  end
				  ( <_cor13> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor13})
				    -| ['compiler_generated'] )
				end
'handle_try'/3 =
    %% Line 1053
    fun (_cor2,_cor1,_cor0) ->
	let <Arg> =
	    %% Line 1054
	    call 'cerl':'try_arg'
		(_cor2)
	in  let <EVars> =
		%% Line 1055
		call 'cerl':'try_evars'
		    (_cor2)
	    in  let <Vars> =
		    %% Line 1056
		    call 'cerl':'try_vars'
			(_cor2)
		in  let <Body> =
			%% Line 1057
			call 'cerl':'try_body'
			    (_cor2)
		    in  let <Handler> =
			    %% Line 1058
			    call 'cerl':'try_handler'
				(_cor2)
			in  %% Line 1059
			    case apply 'traverse'/3
				     (Arg, _cor1, _cor0) of
			      <{State1,Map1,ArgType}> when 'true' ->
				  let <Map2> =
				      %% Line 1060
				      apply 'mark_as_fresh'/2
					  (Vars, Map1)
				  in  let <_cor10> =
					  %% Line 1062
					  call 'erl_types':'t_to_tlist'
					      (ArgType)
				      in  let <_cor18> =
					      %% Line 1062
					      case apply 'bind_pat_vars'/5
						       (Vars, _cor10, [], Map2, State1) of
						%% Line 1063
						<{'error',_cor27,_cor28,_cor29,_cor30}> when 'true' ->
						    let <_cor12> =
							%% Line 1064
							apply 'map__new'/0
							    ()
						    in  let <_cor11> =
							    %% Line 1064
							    call 'erl_types':'t_none'
								()
							in  %% Line 1064
							    {State1,_cor12,_cor11}
						%% Line 1065
						<{SuccMap1,VarTypes}> when 'true' ->
						    let <_cor13> =
							%% Line 1069
							call 'erl_types':'t_product'
							    (VarTypes)
						    in  let <_cor15> =
							    %% Line 1069
							    case apply 'bind_pat_vars_reverse'/5
								     ([Arg|[]], [_cor13|[]], [], %% Line 1070
												 SuccMap1, %% Line 1070
													   State1) of
							      %% Line 1071
							      <{'error',_cor31,_cor32,_cor33,_cor34}> when 'true' ->
								  SuccMap1
							      %% Line 1072
							      <{SM,_cor35}> when 'true' ->
								  SM
							      ( <_cor14> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_cor14})
								-| ['compiler_generated'] )
							    end
							in  %% Line 1074
							    apply 'traverse'/3
								(Body, _cor15, State1)
						( <_cor17> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor17})
						  -| ['compiler_generated'] )
					      end
					  in  %% Line 1061
					      case _cor18 of
						<{SuccState,SuccMap,SuccType}> when 'true' ->
						    let <ExcMap1> =
							%% Line 1076
							apply 'mark_as_fresh'/2
							    (EVars, _cor1)
						    in  %% Line 1077
							case apply 'traverse'/3
								 (Handler, ExcMap1, SuccState) of
							  <{State2,ExcMap2,HandlerType}> when 'true' ->
							      let <TryType> =
								  %% Line 1078
								  call 'erl_types':'t_sup'
								      (SuccType, HandlerType)
							      in  let <_cor23> =
								      %% Line 1079
								      apply 'join_maps'/2
									  ([ExcMap2|[SuccMap|[]]], Map1)
								  in  %% Line 1079
								      {State2,_cor23,TryType}
							  ( <_cor21> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_cor21})
							    -| ['compiler_generated'] )
							end
						( <_cor19> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor19})
						  -| ['compiler_generated'] )
					      end
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
'handle_map'/3 =
    %% Line 1083
    fun (_cor2,_cor1,_cor0) ->
	let <Pairs> =
	    %% Line 1084
	    call 'cerl':'map_es'
		(_cor2)
	in  %% Line 1085
	    case apply 'traverse_list'/3
		     (Pairs, _cor1, _cor0) of
	      <{State1,Map1,TypePairs}> when 'true' ->
		  let <_cor5> =
		      %% Line 1086
		      call 'erl_types':'t_map'
			  (TypePairs)
		  in  %% Line 1086
		      {State1,Map1,_cor5}
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor4})
		-| ['compiler_generated'] )
	    end
'handle_map_pair'/3 =
    %% Line 1088
    fun (_cor2,_cor1,_cor0) ->
	let <Key> =
	    %% Line 1089
	    call 'cerl':'map_pair_key'
		(_cor2)
	in  let <Val> =
		%% Line 1090
		call 'cerl':'map_pair_val'
		    (_cor2)
	    in  %% Line 1091
		case apply 'traverse_list'/3
			 ([Key|[Val|[]]], _cor1, _cor0) of
		  <{State1,Map1,[K|[V|[]]]}> when 'true' ->
		      %% Line 1092
		      {State1,Map1,{K,V}}
		  ( <_cor5> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor5})
		    -| ['compiler_generated'] )
		end
'handle_tuple'/3 =
    %% Line 1096
    fun (_cor2,_cor1,_cor0) ->
	let <Elements> =
	    %% Line 1097
	    call 'cerl':'tuple_es'
		(_cor2)
	in  %% Line 1098
	    case apply 'traverse_list'/3
		     (Elements, _cor1, _cor0) of
	      <{State1,Map1,EsType}> when 'true' ->
		  let <TupleType> =
		      %% Line 1099
		      call 'erl_types':'t_tuple'
			  (EsType)
		  in  %% Line 1100
		      case call 'erl_types':'t_is_none'
			       (TupleType) of
			%% Line 1101
			<'true'> when 'true' ->
			    let <_cor6> =
				%% Line 1102
				call 'erl_types':'t_none'
				    ()
			    in  %% Line 1102
				{State1,Map1,_cor6}
			%% Line 1103
			<'false'> when 'true' ->
			    %% Line 1105
			    case Elements of
			      %% Line 1106
			      <[Tag|Left]> when 'true' ->
				  let <_cor9> =
				      %% Line 1107
				      ( case call 'cerl':'is_c_atom'
						 (Tag) of
					  ( <( 'true'
					       -| ['compiler_generated'] )> when 'true' ->
						apply 'is_literal_record'/1
						    (_cor2)
					    -| ['compiler_generated'] )
					  ( <( 'false'
					       -| ['compiler_generated'] )> when 'true' ->
						'false'
					    -| ['compiler_generated'] )
					  ( <_cor7> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {( 'badarg'
							    -| ['compiler_generated'] ),_cor7}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  in  %% Line 1107
				      case _cor9 of
					%% Line 1108
					<'true'> when 'true' ->
					    let <TagVal> =
						%% Line 1109
						call 'cerl':'atom_val'
						    (Tag)
					    in  let <_cor11> =
						    %% Line 1110
						    call 'erlang':'length'
							(Left)
						in  %% Line 1110
						    case apply 'state__lookup_record'/3
							     (TagVal, _cor11, State1) of
						      %% Line 1111
						      <'error'> when 'true' ->
							  {State1,Map1,TupleType}
						      %% Line 1112
						      <{'ok',RecType}> when 'true' ->
							  let <InfTupleType> =
							      %% Line 1113
							      call 'erl_types':'t_inf'
								  (RecType, TupleType)
							  in  %% Line 1114
							      case call 'erl_types':'t_is_none'
								       (InfTupleType) of
								%% Line 1115
								<'true'> when 'true' ->
								    let <RecC> =
									%% Line 1116
									apply 'format_type'/2
									    (TupleType, State1)
								    in  let <FieldDiffs> =
									    %% Line 1117
									    apply 'format_field_diffs'/2
										(TupleType, State1)
									in  let <Msg> =
										%% Line 1118
										{'record_constr',[RecC|[FieldDiffs|[]]]}
									    in  let <State2> =
										    %% Line 1119
										    apply 'state__add_warning'/4
											(State1, 'warn_matching', _cor2, %% Line 1120
															 Msg)
										in  let <_cor17> =
											%% Line 1121
											call 'erl_types':'t_none'
											    ()
										    in  %% Line 1121
											{State2,Map1,_cor17}
								%% Line 1122
								<'false'> when 'true' ->
								    let <_cor18> =
									%% Line 1123
									call 'erl_types':'t_tuple_args'
									    (RecType)
								    in  %% Line 1123
									case apply 'bind_pat_vars'/5
										 (Elements, _cor18, %% Line 1124
												    [], %% Line 1124
													Map1, %% Line 1124
													      State1) of
									  %% Line 1125
									  <{'error','bind',ErrorPat,ErrorType,_cor42}> when 'true' ->
									      let <_cor19> =
										  %% Line 1127
										  apply 'format_patterns'/1
										      (ErrorPat)
									      in  let <_cor20> =
										      %% Line 1128
										      apply 'format_type'/2
											  (ErrorType, State1)
										  in  let <Msg> =
											  %% Line 1126
											  {'record_constr',%% Line 1127
													   [TagVal|[_cor19|%% Line 1128
															   [_cor20|[]]]]}
										      in  let <State2> =
											      %% Line 1129
											      apply 'state__add_warning'/4
												  (State1, 'warn_matching', _cor2, %% Line 1130
																   Msg)
											  in  let <_cor23> =
												  %% Line 1131
												  call 'erl_types':'t_none'
												      ()
											      in  %% Line 1131
												  {State2,Map1,_cor23}
									  %% Line 1132
									  <{'error','opaque',ErrorPat,ErrorType,OpaqueType}> when 'true' ->
									      let <_cor24> =
										  %% Line 1134
										  apply 'format_patterns'/1
										      (ErrorPat)
									      in  let <_cor25> =
										      %% Line 1135
										      apply 'format_type'/2
											  (ErrorType, State1)
										  in  let <_cor26> =
											  %% Line 1136
											  apply 'format_type'/2
											      (OpaqueType, State1)
										      in  let <Msg> =
											      %% Line 1133
											      {'opaque_match',%% Line 1134
													      [_cor24|%% Line 1135
														      [_cor25|%% Line 1136
															      [_cor26|[]]]]}
											  in  let <State2> =
												  %% Line 1137
												  apply 'state__add_warning'/4
												      (State1, 'warn_opaque', _cor2, %% Line 1138
																     Msg)
											      in  let <_cor29> =
												      %% Line 1139
												      call 'erl_types':'t_none'
													  ()
												  in  %% Line 1139
												      {State2,Map1,_cor29}
									  %% Line 1140
									  <{Map2,ETypes}> when 'true' ->
									      let <_cor30> =
										  %% Line 1141
										  call 'erl_types':'t_tuple'
										      (ETypes)
									      in  %% Line 1141
										  {State1,Map2,_cor30}
									  ( <_cor31> when 'true' ->
										primop 'match_fail'
										    ({'case_clause',_cor31})
									    -| ['compiler_generated'] )
									end
								( <_cor32> when 'true' ->
								      primop 'match_fail'
									  ({'case_clause',_cor32})
								  -| ['compiler_generated'] )
							      end
						      ( <_cor33> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_cor33})
							-| ['compiler_generated'] )
						    end
					%% Line 1145
					<'false'> when 'true' ->
					    let <_cor34> =
						%% Line 1146
						call 'erl_types':'t_tuple'
						    (EsType)
					    in  %% Line 1146
						{State1,Map1,_cor34}
					( <_cor35> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor35})
					  -| ['compiler_generated'] )
				      end
			      %% Line 1148
			      <[]> when 'true' ->
				  let <_cor36> =
				      %% Line 1149
				      call 'erl_types':'t_tuple'
					  ([])
				  in  %% Line 1149
				      {State1,Map1,_cor36}
			      ( <_cor37> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor37})
				-| ['compiler_generated'] )
			    end
			( <_cor38> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor38})
			  -| ['compiler_generated'] )
		      end
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor4})
		-| ['compiler_generated'] )
	    end
'handle_clauses'/9 =
    %% Line 1156
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[C|Left],Arg,ArgType,OrigArgType,State,CaseTypes,MapIn,%% Line 1157
								  Acc,%% Line 1157
								      ClauseAcc> when 'true' ->
	      let <IsRaceAnalysisEnabled> =
		  %% Line 1158
		  apply 'is_race_analysis_enabled'/1
		      (State)
	      in  let <_cor16> =
		      %% Line 1160
		      case IsRaceAnalysisEnabled of
			%% Line 1161
			<'true'> when 'true' ->
			    %% Line 1162
			    case apply 'get_race_list_and_size'/1
				     (State) of
			      <{RaceList,RaceListSize}> when 'true' ->
				  let <_cor13> =
				      %% Line 1164
				      call 'cerl':'clause_pats'
					  (C)
				  in  let <_cor12> =
					  %% Line 1165
					  call 'cerl':'clause_guard'
					      (C)
				      in  let <_cor14> =
					      %% Line 1164
					      call 'dialyzer_races':'beg_clause_new'
						  (Arg, _cor13, _cor12)
					  in  let <_cor11> =
						  %% Line 1166
						  call 'erlang':'+'
						      (RaceListSize, 1)
					      in  %% Line 1163
						  apply 'state__renew_race_list'/3
						      (%% Line 1164
						       [_cor14|%% Line 1166
							       RaceList], _cor11, %% Line 1167
										  State)
			      ( <_cor10> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor10})
				-| ['compiler_generated'] )
			    end
			%% Line 1168
			<'false'> when 'true' ->
			    State
			( <_cor15> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor15})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 1170
		      case %% Line 1171
			   apply 'do_clause'/6
			       (C, Arg, ArgType, OrigArgType, MapIn, _cor16) of
			<{State2,ClauseMap,BodyType,NewArgType}> when 'true' ->
			    let <NewClauseAcc,State3> =
				%% Line 1173
				case IsRaceAnalysisEnabled of
				  %% Line 1174
				  <'true'> when 'true' ->
				      %% Line 1175
				      case apply 'get_race_list_and_size'/1
					       (State2) of
					<{RaceList1,RaceListSize1}> when 'true' ->
					    let <_cor21> =
						%% Line 1176
						call 'cerl':'clause_pats'
						    (C)
					    in  let <_cor20> =
						    %% Line 1177
						    call 'cerl':'clause_guard'
							(C)
						in  let <EndClause> =
							%% Line 1176
							call 'dialyzer_races':'end_clause_new'
							    (Arg, _cor21, _cor20)
						    in  let <_cor23> =
							    %% Line 1180
							    call 'erlang':'+'
								(RaceListSize1, 1)
							in  let <_cor24> =
								%% Line 1179
								apply 'state__renew_race_list'/3
								    ([EndClause|RaceList1], _cor23, %% Line 1180
												    State2)
							    in  %% Line 1178
								<[EndClause|ClauseAcc],_cor24>
					( <_cor19> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor19})
					  -| ['compiler_generated'] )
				      end
				  %% Line 1181
				  <'false'> when 'true' ->
				      <ClauseAcc,State2>
				  ( <_cor25> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor25})
				    -| ['compiler_generated'] )
				end
			    in  let <NewCaseTypes,NewAcc> =
				    %% Line 1184
				    case call 'erl_types':'t_is_none'
					     (BodyType) of
				      %% Line 1185
				      <'true'> when 'true' ->
					  <CaseTypes,Acc>
				      %% Line 1186
				      <'false'> when 'true' ->
					  <[BodyType|CaseTypes],[ClauseMap|Acc]>
				      ( <_cor28> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor28})
					-| ['compiler_generated'] )
				    end
				in  %% Line 1188
				    apply 'handle_clauses'/9
					(Left, Arg, NewArgType, OrigArgType, State3, %% Line 1189
										     NewCaseTypes, %% Line 1189
												   MapIn, %% Line 1189
													  NewAcc, %% Line 1189
														  NewClauseAcc)
			( <_cor18> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor18})
			  -| ['compiler_generated'] )
		      end
	  %% Line 1190
	  <[],_X_Arg,_X_ArgType,_X_OrigArgType,State,CaseTypes,_X_MapIn,Acc,%% Line 1191
									    ClauseAcc> when 'true' ->
	      let <_cor35> =
		  %% Line 1193
		  case apply 'is_race_analysis_enabled'/1
			   (State) of
		    %% Line 1194
		    <'true'> when 'true' ->
			%% Line 1195
			case apply 'get_race_list_and_size'/1
				 (State) of
			  <{RaceList,RaceListSize}> when 'true' ->
			      let <_cor33> =
				  %% Line 1197
				  call 'dialyzer_races':'end_case_new'
				      (ClauseAcc)
			      in  let <_cor32> =
				      %% Line 1198
				      call 'erlang':'+'
					  (RaceListSize, 1)
				  in  %% Line 1196
				      apply 'state__renew_race_list'/3
					  (%% Line 1197
					   [_cor33|RaceList], _cor32, %% Line 1198
								      State)
			  ( <_cor31> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor31})
			    -| ['compiler_generated'] )
			end
		    %% Line 1199
		    <'false'> when 'true' ->
			State
		    ( <_cor34> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor34})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor38> =
		      %% Line 1201
		      call 'lists':'reverse'
			  (Acc)
		  in  let <_cor37> =
			  %% Line 1201
			  call 'erl_types':'t_sup'
			      (CaseTypes)
		      in  %% Line 1201
			  {_cor38,_cor35,_cor37}
	  ( <_cor47,_cor46,_cor45,_cor44,_cor43,_cor42,_cor41,_cor40,_cor39> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor47,_cor46,_cor45,_cor44,_cor43,_cor42,_cor41,_cor40,_cor39})
		  -| [{'function_name',{'handle_clauses',9}}] )
	    -| ['compiler_generated'] )
	end
'do_clause'/6 =
    %% Line 1203
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Pats> =
	    %% Line 1204
	    call 'cerl':'clause_pats'
		(_cor5)
	in  let <Guard> =
		%% Line 1205
		call 'cerl':'clause_guard'
		    (_cor5)
	    in  let <Body> =
		    %% Line 1206
		    call 'cerl':'clause_body'
			(_cor5)
		in  let <_cor10> =
			%% Line 1208
			case apply 'is_race_analysis_enabled'/1
				 (_cor0) of
			  %% Line 1209
			  <'true'> when 'true' ->
			      %% Line 1210
			      apply 'state__renew_fun_args'/2
				  (Pats, _cor0)
			  %% Line 1211
			  <'false'> when 'true' ->
			      _cor0
			  ( <_cor9> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor9})
			    -| ['compiler_generated'] )
			end
		    in  let <Map0> =
			    %% Line 1213
			    apply 'mark_as_fresh'/2
				(Pats, _cor1)
			in  let <_cor13> =
				%% Line 1214
				case <> of
				  <>
				      when call 'erlang':'=:='
					    (_cor4,
					     'no_arg') ->
				      Map0
				  %% Line 1215
				  <> when 'true' ->
				      apply 'bind_subst'/3
					  (_cor4, Pats, Map0)
				end
			    in  let <_cor23> =
				    %% Line 1218
				    case call 'erl_types':'t_is_none'
					     (_cor3) of
				      %% Line 1219
				      <'true'> when 'true' ->
					  %% Line 1220
					  {'error','bind',Pats,_cor3,_cor3}
				      %% Line 1221
				      <'false'> when 'true' ->
					  let <_cor20> =
					      %% Line 1223
					      case call 'erl_types':'t_is_any'
						       (_cor3) of
						%% Line 1224
						<'true'> when 'true' ->
						    ( letrec
							  'lc$^0'/1 =
							      fun (_cor17) ->
								  case _cor17 of
								    <[_cor125|_cor16]> when 'true' ->
									let <_cor18> =
									    apply 'lc$^0'/1
										(_cor16)
									in  ( [_cor3|_cor18]
									      -| ['compiler_generated'] )
								    <[]> when 'true' ->
									[]
								    ( <_cor17> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_cor17})
									    -| [{'function_name',{'lc$^0',1}}] )
								      -| ['compiler_generated'] )
								  end
						      in  apply 'lc$^0'/1
							      (Pats)
						      -| ['list_comprehension'] )
						%% Line 1225
						<'false'> when 'true' ->
						    call 'erl_types':'t_to_tlist'
							(_cor3)
						( <_cor19> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor19})
						  -| ['compiler_generated'] )
					      end
					  in  %% Line 1227
					      apply 'bind_pat_vars'/5
						  (Pats, _cor20, [], _cor13, _cor10)
				      ( <_cor22> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor22})
					-| ['compiler_generated'] )
				    end
				in  %% Line 1229
				    case _cor23 of
				      %% Line 1230
				      <{'error',ErrorType,NewPats,Type,OpaqueTerm}> when 'true' ->
					  %% Line 1233
					  case apply 'state__warning_mode'/1
						   (_cor10) of
					    %% Line 1234
					    <'false'> when 'true' ->
						let <_cor25> =
						    %% Line 1235
						    call 'erl_types':'t_none'
							()
						in  %% Line 1235
						    {_cor10,_cor1,_cor25,_cor3}
					    %% Line 1236
					    <'true'> when 'true' ->
						let <Msg,Force> =
						    %% Line 1238
						    case call 'erl_types':'t_is_none'
							     (_cor3) of
						      %% Line 1239
						      <'true'> when 'true' ->
							  let <PatString> =
							      %% Line 1240
							      apply 'format_patterns'/1
								  (Pats)
							  in  let <_cor27> =
								  %% Line 1241
								  apply 'format_type'/2
								      (_cor2, _cor10)
							      in  let <PatTypes> =
								      %% Line 1241
								      [PatString|[_cor27|[]]]
								  in  let <_cor35> =
									  %% Line 1245
									  case call 'erl_types':'t_is_any'
										   (_cor2) of
									    %% Line 1246
									    <'true'> when 'true' ->
										let <Any> =
										    call 'erl_types':'t_any'
											()
										in  ( letrec
											  'lc$^1'/1 =
											      fun (_cor32) ->
												  case _cor32 of
												    <[_cor126|_cor31]> when 'true' ->
													let <_cor33> =
													    apply 'lc$^1'/1
														(_cor31)
													in  ( [Any|_cor33]
													      -| ['compiler_generated'] )
												    <[]> when 'true' ->
													[]
												    ( <_cor32> when 'true' ->
													  ( primop 'match_fail'
														({'function_clause',_cor32})
													    -| [{'function_name',{'lc$^1',1}}] )
												      -| ['compiler_generated'] )
												  end
										      in  apply 'lc$^1'/1
											      (Pats)
										      -| ['list_comprehension'] )
									    %% Line 1247
									    <'false'> when 'true' ->
										call 'erl_types':'t_to_tlist'
										    (_cor2)
									    ( <_cor34> when 'true' ->
										  primop 'match_fail'
										      ({'case_clause',_cor34})
									      -| ['compiler_generated'] )
									  end
								      in  let <_cor38> =
									      %% Line 1250
									      case apply 'bind_pat_vars'/5
										       (Pats, _cor35, [], _cor13, _cor10) of
										%% Line 1251
										<{'error','bind',_cor127,_cor128,_cor129}> when 'true' ->
										    'pattern_match'
										%% Line 1252
										<{'error','record',_cor130,_cor131,_cor132}> when 'true' ->
										    'record_match'
										%% Line 1253
										<{'error','opaque',_cor133,_cor134,_cor135}> when 'true' ->
										    'opaque_match'
										%% Line 1254
										<{_cor136,_cor137}> when 'true' ->
										    'pattern_match_cov'
										( <_cor37> when 'true' ->
										      primop 'match_fail'
											  ({'case_clause',_cor37})
										  -| ['compiler_generated'] )
									      end
									  in  %% Line 1256
									      <{_cor38,PatTypes},'false'>
						      %% Line 1257
						      <'false'> when 'true' ->
							  let <_cor40> =
							      %% Line 1261
							      call 'cerl':'get_ann'
								  (_cor5)
							  in  let <_cor67> =
								  %% Line 1261
								  case apply 'is_compiler_generated'/1
									   (_cor40) of
								    %% Line 1262
								    <'true'> when 'true' ->
									%% Line 1263
									case Pats of
									  %% Line 1264
									  <[Pat|[]]> when 'true' ->
									      %% Line 1265
									      case call 'cerl':'is_c_cons'
										       (Pat) of
										%% Line 1266
										<'true'> when 'true' ->
										    let <_cor42> =
											%% Line 1267
											call 'cerl':'cons_hd'
											    (Pat)
										    in  let <_cor50> =
											    %% Line 1267
											    ( case call 'cerl':'is_c_var'
												       (_cor42) of
												( <( 'true'
												     -| ['compiler_generated'] )> when 'true' ->
												      let <_cor44> =
													  %% Line 1268
													  call 'cerl':'cons_tl'
													      (Pat)
												      in  %% Line 1268
													  ( case call 'cerl':'is_c_var'
														     (_cor44) of
													      ( <( 'true'
														   -| ['compiler_generated'] )> when 'true' ->
														    %% Line 1269
														    ( case call 'cerl':'is_literal'
															       (Guard) of
															( <( 'true'
															     -| ['compiler_generated'] )> when 'true' ->
															      let <_cor46> =
																  %% Line 1270
																  call 'cerl':'concrete'
																      (Guard)
															      in  %% Line 1270
																  call 'erlang':'=:='
																      (_cor46, 'true')
															  -| ['compiler_generated'] )
															( <( 'false'
															     -| ['compiler_generated'] )> when 'true' ->
															      'false'
															  -| ['compiler_generated'] )
															( <_cor45> when 'true' ->
															      ( call ( 'erlang'
																       -| ['compiler_generated'] ):( 'error'
																				     -| ['compiler_generated'] )
																    (( {( 'badarg'
																	  -| ['compiler_generated'] ),_cor45}
																       -| ['compiler_generated'] ))
																-| ['compiler_generated'] )
															  -| ['compiler_generated'] )
														      end
														      -| ['compiler_generated'] )
														-| ['compiler_generated'] )
													      ( <( 'false'
														   -| ['compiler_generated'] )> when 'true' ->
														    'false'
														-| ['compiler_generated'] )
													      ( <_cor43> when 'true' ->
														    ( call ( 'erlang'
															     -| ['compiler_generated'] ):( 'error'
																			   -| ['compiler_generated'] )
															  (( {( 'badarg'
																-| ['compiler_generated'] ),_cor43}
															     -| ['compiler_generated'] ))
														      -| ['compiler_generated'] )
														-| ['compiler_generated'] )
													    end
													    -| ['compiler_generated'] )
												  -| ['compiler_generated'] )
												( <( 'false'
												     -| ['compiler_generated'] )> when 'true' ->
												      'false'
												  -| ['compiler_generated'] )
												( <_cor41> when 'true' ->
												      ( call ( 'erlang'
													       -| ['compiler_generated'] ):( 'error'
																	     -| ['compiler_generated'] )
													    (( {( 'badarg'
														  -| ['compiler_generated'] ),_cor41}
													       -| ['compiler_generated'] ))
													-| ['compiler_generated'] )
												  -| ['compiler_generated'] )
											      end
											      -| ['compiler_generated'] )
											in  %% Line 1267
											    call 'erlang':'not'
												(_cor50)
										%% Line 1271
										<'false'> when 'true' ->
										    %% Line 1272
										    'true'
										( <_cor51> when 'true' ->
										      primop 'match_fail'
											  ({'case_clause',_cor51})
										  -| ['compiler_generated'] )
									      end
									  %% Line 1274
									  <[Pat0|[Pat1|[]]]> when 'true' ->
									      %% Line 1275
									      case call 'cerl':'is_c_cons'
										       (Pat0) of
										%% Line 1276
										<'true'> when 'true' ->
										    let <_cor53> =
											%% Line 1277
											call 'cerl':'cons_hd'
											    (Pat0)
										    in  let <_cor63> =
											    %% Line 1277
											    ( case call 'cerl':'is_c_var'
												       (_cor53) of
												( <( 'true'
												     -| ['compiler_generated'] )> when 'true' ->
												      let <_cor55> =
													  %% Line 1278
													  call 'cerl':'cons_tl'
													      (Pat0)
												      in  %% Line 1278
													  ( case call 'cerl':'is_c_var'
														     (_cor55) of
													      ( <( 'true'
														   -| ['compiler_generated'] )> when 'true' ->
														    %% Line 1279
														    ( case call 'cerl':'is_c_var'
															       (Pat1) of
															( <( 'true'
															     -| ['compiler_generated'] )> when 'true' ->
															      %% Line 1280
															      ( case call 'cerl':'is_literal'
																	 (Guard) of
																  ( <( 'true'
																       -| ['compiler_generated'] )> when 'true' ->
																	let <_cor58> =
																	    %% Line 1281
																	    call 'cerl':'concrete'
																		(Guard)
																	in  %% Line 1281
																	    call 'erlang':'=:='
																		(_cor58, 'true')
																    -| ['compiler_generated'] )
																  ( <( 'false'
																       -| ['compiler_generated'] )> when 'true' ->
																	'false'
																    -| ['compiler_generated'] )
																  ( <_cor57> when 'true' ->
																	( call ( 'erlang'
																		 -| ['compiler_generated'] ):( 'error'
																					       -| ['compiler_generated'] )
																	      (( {( 'badarg'
																		    -| ['compiler_generated'] ),_cor57}
																		 -| ['compiler_generated'] ))
																	  -| ['compiler_generated'] )
																    -| ['compiler_generated'] )
																end
																-| ['compiler_generated'] )
															  -| ['compiler_generated'] )
															( <( 'false'
															     -| ['compiler_generated'] )> when 'true' ->
															      'false'
															  -| ['compiler_generated'] )
															( <_cor56> when 'true' ->
															      ( call ( 'erlang'
																       -| ['compiler_generated'] ):( 'error'
																				     -| ['compiler_generated'] )
																    (( {( 'badarg'
																	  -| ['compiler_generated'] ),_cor56}
																       -| ['compiler_generated'] ))
																-| ['compiler_generated'] )
															  -| ['compiler_generated'] )
														      end
														      -| ['compiler_generated'] )
														-| ['compiler_generated'] )
													      ( <( 'false'
														   -| ['compiler_generated'] )> when 'true' ->
														    'false'
														-| ['compiler_generated'] )
													      ( <_cor54> when 'true' ->
														    ( call ( 'erlang'
															     -| ['compiler_generated'] ):( 'error'
																			   -| ['compiler_generated'] )
															  (( {( 'badarg'
																-| ['compiler_generated'] ),_cor54}
															     -| ['compiler_generated'] ))
														      -| ['compiler_generated'] )
														-| ['compiler_generated'] )
													    end
													    -| ['compiler_generated'] )
												  -| ['compiler_generated'] )
												( <( 'false'
												     -| ['compiler_generated'] )> when 'true' ->
												      'false'
												  -| ['compiler_generated'] )
												( <_cor52> when 'true' ->
												      ( call ( 'erlang'
													       -| ['compiler_generated'] ):( 'error'
																	     -| ['compiler_generated'] )
													    (( {( 'badarg'
														  -| ['compiler_generated'] ),_cor52}
													       -| ['compiler_generated'] ))
													-| ['compiler_generated'] )
												  -| ['compiler_generated'] )
											      end
											      -| ['compiler_generated'] )
											in  %% Line 1277
											    call 'erlang':'not'
												(_cor63)
										%% Line 1282
										<'false'> when 'true' ->
										    %% Line 1283
										    'true'
										( <_cor64> when 'true' ->
										      primop 'match_fail'
											  ({'case_clause',_cor64})
										  -| ['compiler_generated'] )
									      end
									  %% Line 1285
									  <_cor138> when 'true' ->
									      'true'
									end
								    %% Line 1287
								    <'false'> when 'true' ->
									%% Line 1288
									'true'
								    ( <_cor66> when 'true' ->
									  primop 'match_fail'
									      ({'case_clause',_cor66})
								      -| ['compiler_generated'] )
								  end
							      in  let <_cor70> =
								      %% Line 1291
								      case ErrorType of
									%% Line 1292
									<'bind'> when 'true' ->
									    apply 'format_patterns'/1
										(Pats)
									%% Line 1293
									<'record'> when 'true' ->
									    apply 'format_patterns'/1
										(NewPats)
									%% Line 1294
									<'opaque'> when 'true' ->
									    apply 'format_patterns'/1
										(NewPats)
									( <_cor69> when 'true' ->
									      primop 'match_fail'
										  ({'case_clause',_cor69})
									  -| ['compiler_generated'] )
								      end
								  in  let <_cor77> =
									  %% Line 1296
									  case ErrorType of
									    %% Line 1297
									    <'bind'> when 'true' ->
										let <_cor72> =
										    apply 'format_type'/2
											(_cor3, _cor10)
										in  [_cor70|[_cor72|[]]]
									    %% Line 1298
									    <'record'> when 'true' ->
										let <_cor73> =
										    apply 'format_type'/2
											(Type, _cor10)
										in  [_cor70|[_cor73|[]]]
									    %% Line 1299
									    <'opaque'> when 'true' ->
										let <_cor74> =
										    apply 'format_type'/2
											(Type, _cor10)
										in  let <_cor75> =
											%% Line 1300
											apply 'format_type'/2
											    (OpaqueTerm, _cor10)
										    in  [_cor70|[_cor74|%% Line 1300
													[_cor75|[]]]]
									    ( <_cor76> when 'true' ->
										  primop 'match_fail'
										      ({'case_clause',_cor76})
									      -| ['compiler_generated'] )
									  end
								      in  let <_cor80> =
									      %% Line 1302
									      case ErrorType of
										%% Line 1303
										<'bind'> when 'true' ->
										    'pattern_match'
										%% Line 1304
										<'record'> when 'true' ->
										    'record_match'
										%% Line 1305
										<'opaque'> when 'true' ->
										    'opaque_match'
										( <_cor79> when 'true' ->
										      primop 'match_fail'
											  ({'case_clause',_cor79})
										  -| ['compiler_generated'] )
									      end
									  in  %% Line 1307
									      <{_cor80,_cor77},_cor67>
						      ( <_cor82> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_cor82})
							-| ['compiler_generated'] )
						    end
						in  let <_cor86> =
							%% Line 1309
							case Msg of
							  %% Line 1310
							  <{'opaque_match',_cor139}> when 'true' ->
							      'warn_opaque'
							  %% Line 1311
							  <{'pattern_match',_cor140}> when 'true' ->
							      'warn_matching'
							  %% Line 1312
							  <{'record_match',_cor141}> when 'true' ->
							      'warn_matching'
							  %% Line 1313
							  <{'pattern_match_cov',_cor142}> when 'true' ->
							      'warn_matching'
							  ( <_cor85> when 'true' ->
								primop 'match_fail'
								    ({'case_clause',_cor85})
							    -| ['compiler_generated'] )
							end
						    in  let <_cor89> =
							    %% Line 1315
							    apply 'state__add_warning'/5
								(_cor10, _cor86, _cor5, Msg, Force)
							in  let <_cor88> =
								%% Line 1316
								call 'erl_types':'t_none'
								    ()
							    in  %% Line 1315
								{_cor89,_cor1,_cor88,_cor3}
					    ( <_cor90> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor90})
					      -| ['compiler_generated'] )
					  end
				      %% Line 1318
				      <{Map2,PatTypes}> when 'true' ->
					  let <_cor94> =
					      %% Line 1320
					      case <> of
						%% Line 1321
						<>
						    when call 'erlang':'=:='
							  (_cor4,
							   'no_arg') ->
						    Map2
						%% Line 1322
						<> when 'true' ->
						    let <_cor91> =
							%% Line 1325
							call 'erl_types':'t_product'
							    (PatTypes)
						    in  %% Line 1325
							case apply 'bind_pat_vars_reverse'/5
								 ([_cor4|[]], [_cor91|[]], %% Line 1326
											   [], %% Line 1326
											       Map2, _cor10) of
							  %% Line 1327
							  <{'error',_cor143,_cor144,_cor145,_cor146}> when 'true' ->
							      Map2
							  %% Line 1328
							  <{NewMap,_cor147}> when 'true' ->
							      NewMap
							  ( <_cor92> when 'true' ->
								primop 'match_fail'
								    ({'case_clause',_cor92})
							    -| ['compiler_generated'] )
							end
					      end
					  in  let <_cor100> =
						  %% Line 1332
						  case <> of
						    %% Line 1333
						    <>
							when call 'erlang':'=:='
							      (_cor4,
							       'no_arg') ->
							_cor3
						    %% Line 1334
						    <> when 'true' ->
							let <GenType> =
							    %% Line 1335
							    call 'dialyzer_typesig':'get_safe_underapprox'
								(Pats, Guard)
							in  let <_cor97> =
								%% Line 1336
								call 'erl_types':'t_to_tlist'
								    (_cor3)
							    in  let <_cor98> =
								    %% Line 1336
								    call 'erl_types':'t_product'
									(_cor97)
								in  %% Line 1336
								    call 'erl_types':'t_subtract'
									(_cor98, GenType)
						  end
					      in  %% Line 1338
						  case apply 'bind_guard'/3
							   (Guard, _cor94, _cor10) of
						    %% Line 1339
						    <{'error',Reason}> when 'true' ->
							let <PatString> =
							    %% Line 1342
							    apply 'format_patterns'/1
								(Pats)
							in  let <_cor105> =
								%% Line 1344
								case <> of
								  %% Line 1345
								  <>
								      when call 'erlang':'=:='
									    (Pats,
									     []) ->
								      {'guard_fail',[]}
								  %% Line 1346
								  <> when 'true' ->
								      let <_cor103> =
									  %% Line 1347
									  apply 'format_type'/2
									      (_cor3, _cor10)
								      in  %% Line 1347
									  {'guard_fail_pat',[PatString|[_cor103|[]]]}
								end
							    in  let <_cor113> =
								    %% Line 1350
								    case Reason of
								      %% Line 1351
								      <'none'> when 'true' ->
									  apply 'state__add_warning'/4
									      (_cor10, 'warn_matching', _cor5, _cor105)
								      %% Line 1352
								      <{FailGuard,Msg}> when 'true' ->
									  let <_cor107> =
									      %% Line 1353
									      call 'cerl':'get_ann'
										  (FailGuard)
									  in  %% Line 1353
									      case apply 'is_compiler_generated'/1
										       (_cor107) of
										%% Line 1354
										<'false'> when 'true' ->
										    let <_cor109> =
											%% Line 1355
											case Msg of
											  %% Line 1356
											  <{'guard_fail',_cor148}> when 'true' ->
											      'warn_matching'
											  %% Line 1357
											  <{'neg_guard_fail',_cor149}> when 'true' ->
											      'warn_matching'
											  %% Line 1358
											  <{'opaque_guard',_cor150}> when 'true' ->
											      'warn_opaque'
											  ( <_cor108> when 'true' ->
												primop 'match_fail'
												    ({'case_clause',_cor108})
											    -| ['compiler_generated'] )
											end
										    in  %% Line 1360
											apply 'state__add_warning'/4
											    (_cor10, _cor109, FailGuard, Msg)
										%% Line 1361
										<'true'> when 'true' ->
										    %% Line 1362
										    apply 'state__add_warning'/4
											(_cor10, 'warn_matching', _cor5, Msg)
										( <_cor111> when 'true' ->
										      primop 'match_fail'
											  ({'case_clause',_cor111})
										  -| ['compiler_generated'] )
									      end
								      ( <_cor112> when 'true' ->
									    primop 'match_fail'
										({'case_clause',_cor112})
									-| ['compiler_generated'] )
								    end
								in  let <_cor115> =
									%% Line 1365
									call 'erl_types':'t_none'
									    ()
								    in  %% Line 1365
									{_cor113,_cor1,_cor115,_cor100}
						    %% Line 1366
						    <Map4> when 'true' ->
							%% Line 1367
							case apply 'traverse'/3
								 (Body, Map4, _cor10) of
							  <{RetState,RetMap,BodyType}> when 'true' ->
							      %% Line 1368
							      {RetState,RetMap,BodyType,_cor100}
							  ( <_cor116> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_cor116})
							    -| ['compiler_generated'] )
							end
						  end
				      ( <_cor118> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor118})
					-| ['compiler_generated'] )
				    end
'bind_subst'/3 =
    %% Line 1372
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1373
	case call 'cerl':'type'
		 (_cor2) of
	  %% Line 1374
	  <'values'> when 'true' ->
	      let <_cor3> =
		  %% Line 1375
		  call 'cerl':'values_es'
		      (_cor2)
	      in  %% Line 1375
		  apply 'bind_subst_list'/3
		      (_cor3, _cor1, _cor0)
	  %% Line 1376
	  <'var'> when 'true' ->
	      %% Line 1377
	      case _cor1 of
		<[Pat|[]]> when 'true' ->
		    %% Line 1378
		    apply 'enter_subst'/3
			(_cor2, Pat, _cor0)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1379
	  <_cor9> when 'true' ->
	      _cor0
	end
'bind_subst_list'/3 =
    %% Line 1383
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Arg|ArgLeft],[Pat|PatLeft],Map> when 'true' ->
	      let <_cor4> =
		  %% Line 1385
		  call 'cerl':'type'
		      (Arg)
	      in  let <_cor3> =
		      %% Line 1385
		      call 'cerl':'type'
			  (Pat)
		  in  let <_cor11> =
			  %% Line 1385
			  case <_cor4,_cor3> of
			    %% Line 1386
			    <'var','var'> when 'true' ->
				apply 'enter_subst'/3
				    (Arg, Pat, Map)
			    %% Line 1387
			    <'var','alias'> when 'true' ->
				let <_cor5> =
				    call 'cerl':'alias_pat'
					(Pat)
				in  apply 'enter_subst'/3
					(Arg, _cor5, Map)
			    %% Line 1388
			    <'literal','literal'> when 'true' ->
				Map
			    %% Line 1389
			    <T,_cor16>
				when call 'erlang':'=:='
				      (_cor16,
				       T) ->
				let <_cor8> =
				    call 'cerl':'subtrees'
					(Arg)
				in  let <_cor9> =
					call 'lists':'flatten'
					    (_cor8)
				    in  let <_cor6> =
					    %% Line 1390
					    call 'cerl':'subtrees'
						(Pat)
					in  let <_cor7> =
						%% Line 1390
						call 'lists':'flatten'
						    (_cor6)
					    in  apply 'bind_subst_list'/3
						    (_cor9, _cor7, %% Line 1391
								   Map)
			    %% Line 1392
			    <_fol109,_fol110> when 'true' ->
				Map
			  end
		      in  %% Line 1394
			  apply 'bind_subst_list'/3
			      (ArgLeft, PatLeft, _cor11)
	  %% Line 1395
	  <[],[],Map> when 'true' ->
	      %% Line 1396
	      Map
	  ( <_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13})
		  -| [{'function_name',{'bind_subst_list',3}}] )
	    -| ['compiler_generated'] )
	end
'bind_pat_vars'/5 =
    %% Line 1402
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1403
	try
	    %% Line 1404
	    apply 'bind_pat_vars'/6
		(_cor4, _cor3, _cor2, _cor1, _cor0, 'false')
	of <_cor5> ->
	    _cor5
	catch <_cor8,_cor7,_cor6> ->
	    case <_cor8,_cor7,_cor6> of
	      %% Line 1406
	      <'throw',Error,_cor14> when 'true' ->
		  %% Line 1408
		  Error
	      ( <_cor8,_cor7,_cor6> when 'true' ->
		    primop 'raise'
			(_cor6, _cor7)
		-| ['compiler_generated'] )
	    end
'bind_pat_vars_reverse'/5 =
    %% Line 1411
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1412
	try
	    %% Line 1413
	    apply 'bind_pat_vars'/6
		(_cor4, _cor3, _cor2, _cor1, _cor0, 'true')
	of <_cor5> ->
	    _cor5
	catch <_cor8,_cor7,_cor6> ->
	    case <_cor8,_cor7,_cor6> of
	      %% Line 1415
	      <'throw',Error,_cor14> when 'true' ->
		  %% Line 1417
		  Error
	      ( <_cor8,_cor7,_cor6> when 'true' ->
		    primop 'raise'
			(_cor6, _cor7)
		-| ['compiler_generated'] )
	    end
'bind_pat_vars'/6 =
    %% Line 1420
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Pat|PatLeft],[Type|TypeLeft],Acc,Map,State,Rev> when 'true' ->
	      %% Line 1423
	      ( case State of
		  ( <( {'state',_cor125,_cor126,_cor127,_cor128,_rec9,_cor129,_cor130,_cor131,_cor132,_cor133,_cor134,_cor135}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor116> =
			    %% Line 1425
			    case call 'cerl':'type'
				     (Pat) of
			      %% Line 1426
			      <'alias'> when 'true' ->
				  let <AliasPat> =
				      %% Line 1427
				      call 'cerl':'alias_pat'
					  (Pat)
				  in  let <Var> =
					  %% Line 1428
					  call 'cerl':'alias_var'
					      (Pat)
				      in  let <Map1> =
					      %% Line 1429
					      apply 'enter_subst'/3
						  (Var, AliasPat, Map)
					  in  %% Line 1430
					      case apply 'bind_pat_vars'/6
						       ([AliasPat|[]], [Type|[]], [], %% Line 1431
										      Map1, %% Line 1431
											    State, %% Line 1431
												   Rev) of
						<{Map2,[PatType|[]]}> when 'true' ->
						    let <_cor13> =
							%% Line 1432
							apply 'enter_type'/3
							    (Var, PatType, Map2)
						    in  %% Line 1432
							{_cor13,PatType}
						( <_cor12> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor12})
						  -| ['compiler_generated'] )
					      end
			      %% Line 1433
			      <'binary'> when 'true' ->
				  %% Line 1436
				  case Rev of
				    %% Line 1437
				    <'true'> when 'true' ->
					let <_cor14> =
					    call 'erl_types':'t_bitstr'
						()
					in  {Map,_cor14}
				    %% Line 1438
				    <'false'> when 'true' ->
					let <_cor15> =
					    %% Line 1439
					    call 'erl_types':'t_bitstr'
						()
					in  let <BinType> =
						%% Line 1439
						call 'erl_types':'t_inf'
						    (_cor15, Type, _rec9)
					    in  %% Line 1440
						case call 'erl_types':'t_is_none'
							 (BinType) of
						  %% Line 1441
						  <'true'> when 'true' ->
						      let <_cor17> =
							  %% Line 1442
							  call 'erl_types':'t_bitstr'
							      ()
						      in  %% Line 1442
							  case call 'erl_types':'t_find_opaque_mismatch'
								   (_cor17, Type, _rec9) of
							    %% Line 1443
							    <{'ok',T1,T2}> when 'true' ->
								%% Line 1444
								apply 'bind_error'/4
								    ([Pat|[]], T1, T2, 'opaque')
							    %% Line 1445
							    <'error'> when 'true' ->
								let <_cor18> =
								    %% Line 1446
								    call 'erl_types':'t_none'
									()
								in  %% Line 1446
								    apply 'bind_error'/4
									([Pat|[]], Type, _cor18, 'bind')
							    ( <_cor19> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_cor19})
							      -| ['compiler_generated'] )
							  end
						  %% Line 1448
						  <'false'> when 'true' ->
						      let <Segs> =
							  %% Line 1449
							  call 'cerl':'binary_segments'
							      (Pat)
						      in  %% Line 1450
							  case apply 'bind_bin_segs'/4
								   (Segs, BinType, Map, State) of
							    <{Map1,SegTypes}> when 'true' ->
								let <_cor22> =
								    %% Line 1451
								    call 'erl_types':'t_bitstr_concat'
									(SegTypes)
								in  %% Line 1451
								    {Map1,_cor22}
							    ( <_cor21> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_cor21})
							      -| ['compiler_generated'] )
							  end
						  ( <_cor23> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor23})
						    -| ['compiler_generated'] )
						end
				    ( <_cor24> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor24})
				      -| ['compiler_generated'] )
				  end
			      %% Line 1454
			      <'cons'> when 'true' ->
				  let <_cor25> =
				      %% Line 1455
				      call 'erl_types':'t_cons'
					  ()
				  in  let <Cons> =
					  %% Line 1455
					  call 'erl_types':'t_inf'
					      (Type, _cor25, _rec9)
				      in  %% Line 1456
					  case call 'erl_types':'t_is_none'
						   (Cons) of
					    %% Line 1457
					    <'true'> when 'true' ->
						let <_cor27> =
						    %% Line 1458
						    call 'erl_types':'t_cons'
							()
						in  %% Line 1458
						    apply 'bind_opaque_pats'/4
							(_cor27, Type, Pat, State)
					    %% Line 1459
					    <'false'> when 'true' ->
						let <_cor30> =
						    %% Line 1461
						    call 'cerl':'cons_hd'
							(Pat)
						in  let <_cor31> =
							%% Line 1461
							call 'cerl':'cons_tl'
							    (Pat)
						    in  let <_cor28> =
							    %% Line 1462
							    call 'erl_types':'t_cons_hd'
								(Cons, _rec9)
							in  let <_cor29> =
								%% Line 1463
								call 'erl_types':'t_cons_tl'
								    (Cons, _rec9)
							    in  %% Line 1460
								case %% Line 1461
								     apply 'bind_pat_vars'/6
									 ([_cor30|[_cor31|[]]], %% Line 1462
												[_cor28|%% Line 1463
													[_cor29|[]]], %% Line 1464
														      [], %% Line 1464
															  Map, %% Line 1464
															       State, %% Line 1464
																      Rev) of
								  <{Map1,[HdType|[TlType|[]]]}> when 'true' ->
								      let <_cor33> =
									  %% Line 1465
									  call 'erl_types':'t_cons'
									      (HdType, TlType)
								      in  %% Line 1465
									  {Map1,_cor33}
								  ( <_cor32> when 'true' ->
									primop 'match_fail'
									    ({'badmatch',_cor32})
								    -| ['compiler_generated'] )
								end
					    ( <_cor34> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor34})
					      -| ['compiler_generated'] )
					  end
			      %% Line 1467
			      <'literal'> when 'true' ->
				  let <Literal> =
				      %% Line 1468
				      apply 'literal_type'/1
					  (Pat)
				  in  let <_cor36> =
					  %% Line 1469
					  call 'erl_types':'t_inf'
					      (Literal, Type, _rec9)
				      in  %% Line 1469
					  case call 'erl_types':'t_is_none'
						   (_cor36) of
					    %% Line 1470
					    <'true'> when 'true' ->
						%% Line 1471
						apply 'bind_opaque_pats'/4
						    (Literal, Type, Pat, State)
					    %% Line 1472
					    <'false'> when 'true' ->
						{Map,Literal}
					    ( <_cor37> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor37})
					      -| ['compiler_generated'] )
					  end
			      %% Line 1474
			      <'map'> when 'true' ->
				  let <_cor38> =
				      %% Line 1475
				      call 'erl_types':'t_map'
					  ([])
				  in  %% Line 1475
				      {Map,_cor38}
			      %% Line 1476
			      <'tuple'> when 'true' ->
				  let <Es> =
				      %% Line 1477
				      call 'cerl':'tuple_es'
					  (Pat)
				  in  let <TypedRecord,Prototype> =
					  %% Line 1479
					  case Es of
					    %% Line 1480
					    <[]> when 'true' ->
						let <_cor40> =
						    call 'erl_types':'t_tuple'
							([])
						in  <'false',_cor40>
					    %% Line 1481
					    <[Tag|Left]> when 'true' ->
						let <_cor43> =
						    %% Line 1482
						    ( case call 'cerl':'is_c_atom'
							       (Tag) of
							( <( 'true'
							     -| ['compiler_generated'] )> when 'true' ->
							      apply 'is_literal_record'/1
								  (Pat)
							  -| ['compiler_generated'] )
							( <( 'false'
							     -| ['compiler_generated'] )> when 'true' ->
							      'false'
							  -| ['compiler_generated'] )
							( <_cor41> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {( 'badarg'
									  -| ['compiler_generated'] ),_cor41}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						      -| ['compiler_generated'] )
						in  %% Line 1482
						    case _cor43 of
						      %% Line 1483
						      <'true'> when 'true' ->
							  let <TagAtom> =
							      %% Line 1484
							      call 'cerl':'atom_val'
								  (Tag)
							  in  let <_cor45> =
								  %% Line 1485
								  call 'erlang':'length'
								      (Left)
							      in  %% Line 1485
								  case apply 'state__lookup_record'/3
									   (TagAtom, _cor45, State) of
								    %% Line 1486
								    <'error'> when 'true' ->
									let <_cor46> =
									    call 'erlang':'length'
										(Es)
									in  let <_cor47> =
										call 'erl_types':'t_tuple'
										    (_cor46)
									    in  <'false',_cor47>
								    %% Line 1487
								    <{'ok',Record}> when 'true' ->
									let <_cor53> =
									    %% Line 1488
									    ( letrec
										  'lc$^0'/1 =
										      fun (_cor50) ->
											  case _cor50 of
											    <[_cor137|_cor49]> when 'true' ->
												let <_cor51> =
												    call 'erl_types':'t_any'
													()
												in  let <_cor52> =
													apply 'lc$^0'/1
													    (_cor49)
												    in  ( [_cor51|_cor52]
													  -| ['compiler_generated'] )
											    <[]> when 'true' ->
												[]
											    ( <_cor50> when 'true' ->
												  ( primop 'match_fail'
													({'function_clause',_cor50})
												    -| [{'function_name',{'lc$^0',1}}] )
											      -| ['compiler_generated'] )
											  end
									      in  apply 'lc$^0'/1
										      (Es)
									      -| ['list_comprehension'] )
									in  %% Line 1488
									    case _cor53 of
									      <[_X_Head|AnyTail]> when 'true' ->
										  let <_cor55> =
										      %% Line 1489
										      call 'erl_types':'t_atom'
											  (TagAtom)
										  in  let <UntypedRecord> =
											  %% Line 1489
											  call 'erl_types':'t_tuple'
											      ([_cor55|AnyTail])
										      in  let <_cor57> =
											      %% Line 1490
											      call 'erl_types':'t_is_equal'
												  (Record, UntypedRecord)
											  in  let <_cor58> =
												  %% Line 1490
												  call 'erlang':'not'
												      (_cor57)
											      in  <_cor58,%% Line 1490
													  Record>
									      ( <_cor54> when 'true' ->
										    primop 'match_fail'
											({'badmatch',_cor54})
										-| ['compiler_generated'] )
									    end
								    ( <_cor59> when 'true' ->
									  primop 'match_fail'
									      ({'case_clause',_cor59})
								      -| ['compiler_generated'] )
								  end
						      %% Line 1492
						      <'false'> when 'true' ->
							  let <_cor60> =
							      call 'erlang':'length'
								  (Es)
							  in  let <_cor61> =
								  call 'erl_types':'t_tuple'
								      (_cor60)
							      in  <'false',_cor61>
						      ( <_cor62> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_cor62})
							-| ['compiler_generated'] )
						    end
					    ( <_cor63> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor63})
					      -| ['compiler_generated'] )
					  end
				      in  let <Tuple> =
					      %% Line 1495
					      call 'erl_types':'t_inf'
						  (Prototype, Type, _rec9)
					  in  %% Line 1496
					      case call 'erl_types':'t_is_none'
						       (Tuple) of
						%% Line 1497
						<'true'> when 'true' ->
						    %% Line 1498
						    apply 'bind_opaque_pats'/4
							(Prototype, Type, Pat, State)
						%% Line 1499
						<'false'> when 'true' ->
						    let <SubTuples> =
							%% Line 1500
							call 'erl_types':'t_tuple_subtypes'
							    (Tuple, _rec9)
						    in  let <MapJ> =
							    %% Line 1502
							    apply 'join_maps_begin'/1
								(Map)
							in  let <_cor82> =
								%% Line 1504
								case Rev of
								  %% Line 1505
								  <'true'> when 'true' ->
								      %% Line 1506
								      ( letrec
									    'lc$^1'/1 =
										fun (_cor71) ->
										    case _cor71 of
										      <[%% Line 1508
											SubTuple|_cor70]> when 'true' ->
											  let <_cor72> =
											      call 'erl_types':'t_tuple_args'
												  (SubTuple, _rec9)
											  in  let <_cor73> =
												  apply 'bind_pat_vars_reverse'/5
												      (Es, _cor72, %% Line 1507
														   [], %% Line 1507
														       MapJ, %% Line 1507
															     State)
											      in  let <_cor74> =
												      %% Line 1508
												      apply 'lc$^1'/1
													  (_cor70)
												  in  ( [_cor73|_cor74]
													-| ['compiler_generated'] )
										      <[]> when 'true' ->
											  []
										      ( <_cor71> when 'true' ->
											    ( primop 'match_fail'
												  ({'function_clause',_cor71})
											      -| [{'function_name',{'lc$^1',1}}] )
											-| ['compiler_generated'] )
										    end
									in  apply 'lc$^1'/1
										(%% Line 1508
										 SubTuples)
									-| ['list_comprehension'] )
								  %% Line 1509
								  <'false'> when 'true' ->
								      %% Line 1510
								      ( letrec
									    'lc$^2'/1 =
										fun (_cor77) ->
										    case _cor77 of
										      <[%% Line 1512
											SubTuple|_cor76]> when 'true' ->
											  let <_cor78> =
											      call 'erl_types':'t_tuple_args'
												  (SubTuple, _rec9)
											  in  let <_cor79> =
												  apply 'bind_pat_vars'/5
												      (Es, _cor78, [], %% Line 1511
														       MapJ, %% Line 1511
															     State)
											      in  let <_cor80> =
												      %% Line 1512
												      apply 'lc$^2'/1
													  (_cor76)
												  in  ( [_cor79|_cor80]
													-| ['compiler_generated'] )
										      <[]> when 'true' ->
											  []
										      ( <_cor77> when 'true' ->
											    ( primop 'match_fail'
												  ({'function_clause',_cor77})
											      -| [{'function_name',{'lc$^2',1}}] )
											-| ['compiler_generated'] )
										    end
									in  apply 'lc$^2'/1
										(%% Line 1512
										 SubTuples)
									-| ['list_comprehension'] )
								  ( <_cor81> when 'true' ->
									primop 'match_fail'
									    ({'case_clause',_cor81})
								    -| ['compiler_generated'] )
								end
							    in  %% Line 1514
								case call 'lists':'keyfind'
									 ('opaque', 2, _cor82) of
								  %% Line 1515
								  <{'error','opaque',_X_PatList,_X_Type,Opaque}> when 'true' ->
								      %% Line 1516
								      apply 'bind_error'/4
									  ([Pat|[]], Tuple, Opaque, 'opaque')
								  %% Line 1517
								  <'false'> when 'true' ->
								      let <_cor88> =
									  %% Line 1518
									  ( letrec
										'lc$^3'/1 =
										    fun (_cor86) ->
											case _cor86 of
											  <[{M,_cor138}|_cor85]>
											      when call 'erlang':'=/='
												    (M,
												     'error') ->
											      let <_cor87> =
												  apply 'lc$^3'/1
												      (_cor85)
											      in  ( [M|_cor87]
												    -| ['compiler_generated'] )
											  ( <[_cor84|_cor85]> when 'true' ->
												apply 'lc$^3'/1
												    (_cor85)
											    -| ['compiler_generated'] )
											  <[]> when 'true' ->
											      []
											  ( <_cor86> when 'true' ->
												( primop 'match_fail'
												      ({'function_clause',_cor86})
												  -| [{'function_name',{'lc$^3',1}}] )
											    -| ['compiler_generated'] )
											end
									    in  apply 'lc$^3'/1
										    (_cor82)
									    -| ['list_comprehension'] )
								      in  %% Line 1518
									  case _cor88 of
									    %% Line 1519
									    <[]> when 'true' ->
										%% Line 1520
										case TypedRecord of
										  %% Line 1521
										  <'true'> when 'true' ->
										      apply 'bind_error'/4
											  ([Pat|[]], Tuple, Prototype, 'record')
										  %% Line 1522
										  <'false'> when 'true' ->
										      let <_cor89> =
											  call 'erl_types':'t_none'
											      ()
										      in  apply 'bind_error'/4
											      ([Pat|[]], Tuple, _cor89, 'bind')
										  ( <_cor90> when 'true' ->
											primop 'match_fail'
											    ({'case_clause',_cor90})
										    -| ['compiler_generated'] )
										end
									    %% Line 1524
									    <Maps> when 'true' ->
										let <Map1> =
										    %% Line 1525
										    apply 'join_maps_end'/2
											(Maps, MapJ)
										in  let <_cor97> =
											%% Line 1526
											( letrec
											      'lc$^4'/1 =
												  fun (_cor94) ->
												      case _cor94 of
													<[%% Line 1527
													  {M,EsTypes}|_cor93]>
													    when %% Line 1527
													      call 'erlang':'=/='
														  (M,
														   'error') ->
													    let <_cor95> =
														call 'erl_types':'t_tuple'
														    (EsTypes)
													    in  let <_cor96> =
														    %% Line 1527
														    apply 'lc$^4'/1
															(_cor93)
														in  ( [_cor95|_cor96]
														      -| ['compiler_generated'] )
													( <[_cor92|_cor93]> when 'true' ->
													      %% Line 1527
													      apply 'lc$^4'/1
														  (_cor93)
													  -| ['compiler_generated'] )
													<[]> when 'true' ->
													    []
													( <_cor94> when 'true' ->
													      ( primop 'match_fail'
														    ({'function_clause',_cor94})
														-| [{'function_name',{'lc$^4',1}}] )
													  -| ['compiler_generated'] )
												      end
											  in  apply 'lc$^4'/1
												  (_cor82)
											  -| ['list_comprehension'] )
										    in  let <TupleType> =
											    %% Line 1526
											    call 'erl_types':'t_sup'
												(_cor97)
											in  %% Line 1528
											    {Map1,TupleType}
									  end
								  ( <_cor100> when 'true' ->
									primop 'match_fail'
									    ({'case_clause',_cor100})
								    -| ['compiler_generated'] )
								end
						( <_cor101> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor101})
						  -| ['compiler_generated'] )
					      end
			      %% Line 1532
			      <'values'> when 'true' ->
				  let <Es> =
				      %% Line 1533
				      call 'cerl':'values_es'
					  (Pat)
				  in  let <_cor103> =
					  %% Line 1535
					  call 'erl_types':'t_to_tlist'
					      (Type)
				      in  %% Line 1534
					  case %% Line 1535
					       apply 'bind_pat_vars'/6
						   (Es, _cor103, [], Map, State, Rev) of
					    <{Map1,EsTypes}> when 'true' ->
						let <_cor105> =
						    %% Line 1536
						    call 'erl_types':'t_product'
							(EsTypes)
						in  %% Line 1536
						    {Map1,_cor105}
					    ( <_cor104> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor104})
					      -| ['compiler_generated'] )
					  end
			      %% Line 1537
			      <'var'> when 'true' ->
				  let <_cor107> =
				      %% Line 1539
				      case apply 'state__lookup_type_for_letrec'/2
					       (Pat, State) of
					%% Line 1540
					<'error'> when 'true' ->
					    apply 'lookup_type'/2
						(Pat, Map)
					%% Line 1541
					<{'ok',RecType}> when 'true' ->
					    RecType
					( <_cor106> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor106})
					  -| ['compiler_generated'] )
				      end
				  in  let <VarType2> =
					  %% Line 1544
					  call 'erl_types':'t_inf'
					      (_cor107, Type, _rec9)
				      in  %% Line 1545
					  case call 'erl_types':'t_is_none'
						   (VarType2) of
					    %% Line 1546
					    <'true'> when 'true' ->
						%% Line 1547
						case call 'erl_types':'t_find_opaque_mismatch'
							 (_cor107, Type, _rec9) of
						  %% Line 1548
						  <{'ok',T1,T2}> when 'true' ->
						      %% Line 1549
						      apply 'bind_error'/4
							  ([Pat|[]], T1, T2, 'opaque')
						  %% Line 1550
						  <'error'> when 'true' ->
						      let <_cor110> =
							  %% Line 1551
							  call 'erl_types':'t_none'
							      ()
						      in  %% Line 1551
							  apply 'bind_error'/4
							      ([Pat|[]], Type, _cor110, 'bind')
						  ( <_cor111> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor111})
						    -| ['compiler_generated'] )
						end
					    %% Line 1553
					    <'false'> when 'true' ->
						let <Map1> =
						    %% Line 1554
						    apply 'enter_type'/3
							(Pat, VarType2, Map)
						in  %% Line 1555
						    {Map1,VarType2}
					    ( <_cor113> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor113})
					      -| ['compiler_generated'] )
					  end
			      %% Line 1557
			      <_X_Other> when 'true' ->
				  let <_cor114> =
				      %% Line 1560
				      call 'erl_types':'t_none'
					  ()
				  in  %% Line 1560
				      apply 'bind_error'/4
					  ([Pat|[]], Type, _cor114, 'bind')
			    end
			in  %% Line 1424
			    case _cor116 of
			      <{NewMap,TypeOut}> when 'true' ->
				  %% Line 1562
				  apply 'bind_pat_vars'/6
				      (PatLeft, TypeLeft, [TypeOut|Acc], NewMap, State, Rev)
			      ( <_cor117> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor117})
				-| ['compiler_generated'] )
			    end
		    -| ['compiler_generated'] )
		  ( <_cor136> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1563
	  <[],[],Acc,Map,_X_State,_X_Rev> when 'true' ->
	      let <_cor118> =
		  %% Line 1564
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 1564
		  {Map,_cor118}
	  ( <_cor124,_cor123,_cor122,_cor121,_cor120,_cor119> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor124,_cor123,_cor122,_cor121,_cor120,_cor119})
		  -| [{'function_name',{'bind_pat_vars',6}}] )
	    -| ['compiler_generated'] )
	end
'bind_bin_segs'/4 =
    %% Line 1566
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1567
	apply 'bind_bin_segs'/5
	    (_cor3, _cor2, [], _cor1, _cor0)
'bind_bin_segs'/5 =
    %% Line 1569
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Seg|Segs],BinType,Acc,Map,State> when 'true' ->
	      let <Val> =
		  %% Line 1570
		  call 'cerl':'bitstr_val'
		      (Seg)
	      in  let <_cor6> =
		      %% Line 1571
		      call 'cerl':'bitstr_type'
			  (Seg)
		  in  let <SegType> =
			  %% Line 1571
			  call 'cerl':'concrete'
			      (_cor6)
		      in  let <_cor8> =
			      %% Line 1572
			      call 'cerl':'bitstr_unit'
				  (Seg)
			  in  let <UnitVal> =
				  %% Line 1572
				  call 'cerl':'concrete'
				      (_cor8)
			      in  %% Line 1573
				  case call 'cerl':'bitstr_bitsize'
					   (Seg) of
				    %% Line 1574
				    <'all'> when 'true' ->
					%% Line 1575
					case SegType of
					  <'binary'> when 'true' ->
					      case Segs of
						<[]> when 'true' ->
						    let <_cor12> =
							%% Line 1576
							call 'erl_types':'t_bitstr'
							    (UnitVal, 0)
						    in  let <T> =
							    %% Line 1576
							    call 'erl_types':'t_inf'
								(_cor12, BinType)
							in  %% Line 1577
							    case apply 'bind_pat_vars'/6
								     ([Val|[]], [T|[]], [], Map, State, 'false') of
							      <{Map1,[Type|[]]}> when 'true' ->
								  %% Line 1578
								  ( case State of
								      ( <( {'state',_cor69,_cor70,_cor71,_cor72,_rec10,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79}
									   -| ['compiler_generated'] )> when 'true' ->
									    let <Type1> =
										apply 'remove_local_opaque_types'/2
										    (Type, _rec10)
									    in  let <_cor18> =
										    %% Line 1579
										    call 'erl_types':'t_bitstr'
											(0, 0)
										in  %% Line 1579
										    apply 'bind_bin_segs'/5
											(Segs, _cor18, [Type1|Acc], Map1, State)
									-| ['compiler_generated'] )
								      ( <_cor80> when 'true' ->
									    ( call ( 'erlang'
										     -| ['compiler_generated'] ):( 'error'
														   -| ['compiler_generated'] )
										  (( {'badrecord','state'}
										     -| ['compiler_generated'] ))
									      -| ['compiler_generated'] )
									-| ['compiler_generated'] )
								    end
								    -| ['compiler_generated'] )
							      ( <_cor14> when 'true' ->
								    primop 'match_fail'
									({'badmatch',_cor14})
								-| ['compiler_generated'] )
							    end
						( <_cor11> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor11})
						  -| ['compiler_generated'] )
					      end
					  ( <_cor10> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor10})
					    -| ['compiler_generated'] )
					end
				    %% Line 1580
				    <'utf'> when 'true' ->
					%% Line 1581
					case call 'lists':'member'
						 (SegType, ['utf8'|['utf16'|['utf32']]]) of
					  <'true'> when 'true' ->
					      let <_cor20> =
						  %% Line 1582
						  call 'erl_types':'t_integer'
						      ()
					      in  %% Line 1582
						  case apply 'bind_pat_vars'/6
							   ([Val|[]], [_cor20|[]], [], Map, State, 'false') of
						    <{Map1,[_cor81|[]]}> when 'true' ->
							let <Type> =
							    %% Line 1583
							    call 'erl_types':'t_binary'
								()
							in  %% Line 1584
							    apply 'bind_bin_segs'/5
								(Segs, BinType, [Type|Acc], Map1, State)
						    ( <_cor21> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor21})
						      -| ['compiler_generated'] )
						  end
					  ( <_cor19> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor19})
					    -| ['compiler_generated'] )
					end
				    %% Line 1585
				    <BitSz>
					when try
					      ( case <> of
						  ( <>
							when call 'erlang':'is_integer'
							      (BitSz) ->
							'true'
						    -| ['compiler_generated'] )
						  ( <> when 'true' ->
							call 'erlang':'=:='
							    (BitSz, 'any')
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					  of <Try> ->
					      Try
					  catch <T,R> ->
					      'false' ->
					let <Size> =
					    %% Line 1586
					    call 'cerl':'bitstr_size'
						(Seg)
					in  let <_cor27> =
						%% Line 1588
						call 'erl_types':'t_non_neg_integer'
						    ()
					    in  %% Line 1587
						case %% Line 1588
						     apply 'bind_pat_vars'/6
							 ([Size|[]], [_cor27|[]], [], Map, State, 'false') of
						  <{Map1,[SizeType|[]]}> when 'true' ->
						      %% Line 1589
						      ( case State of
							  ( <( {'state',_cor82,_cor83,_cor84,_cor85,_rec11,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92}
							       -| ['compiler_generated'] )> when 'true' ->
								let <NumberVals> =
								    %% Line 1590
								    call 'erl_types':'t_number_vals'
									(SizeType, _rec11)
								in  do  %% Line 1591
									case call 'erl_types':'t_contains_opaque'
										 (SizeType, _rec11) of
									  %% Line 1592
									  <'true'> when 'true' ->
									      let <_cor33> =
										  call 'erl_types':'t_none'
										      ()
									      in  apply 'bind_error'/4
										      ([Seg|[]], SizeType, _cor33, 'opaque')
									  %% Line 1593
									  <'false'> when 'true' ->
									      'ok'
									  ( <_cor34> when 'true' ->
										primop 'match_fail'
										    ({'case_clause',_cor34})
									    -| ['compiler_generated'] )
									end
									let <_cor39> =
									    %% Line 1596
									    case NumberVals of
									      %% Line 1597
									      <[OneSize|[]]> when 'true' ->
										  let <_cor35> =
										      call 'erlang':'*'
											  (UnitVal, OneSize)
										  in  call 'erl_types':'t_bitstr'
											  (0, _cor35)
									      %% Line 1598
									      <_cor94> when 'true' ->
										  let <MinSize> =
										      %% Line 1599
										      call 'erl_types':'number_min'
											  (SizeType, _rec11)
										  in  let <_cor37> =
											  %% Line 1600
											  call 'erlang':'*'
											      (UnitVal, MinSize)
										      in  %% Line 1600
											  call 'erl_types':'t_bitstr'
											      (UnitVal, _cor37)
									    end
									in  let <_cor56> =
										%% Line 1603
										case SegType of
										  %% Line 1604
										  <'binary'> when 'true' ->
										      _cor39
										  %% Line 1605
										  <'float'> when 'true' ->
										      call 'erl_types':'t_float'
											  ()
										  %% Line 1606
										  <'integer'> when 'true' ->
										      %% Line 1607
										      case NumberVals of
											%% Line 1608
											<'unknown'> when 'true' ->
											    call 'erl_types':'t_integer'
												()
											%% Line 1609
											<List> when 'true' ->
											    let <SizeVal> =
												%% Line 1610
												call 'lists':'max'
												    (List)
											    in  let <_cor42> =
												    %% Line 1611
												    call 'cerl':'bitstr_flags'
													(Seg)
												in  let <Flags> =
													%% Line 1611
													call 'cerl':'concrete'
													    (_cor42)
												    in  let <N> =
													    %% Line 1612
													    call 'erlang':'*'
														(SizeVal, UnitVal)
													in  %% Line 1613
													    case call 'lists':'member'
														     ('signed', Flags) of
													      %% Line 1614
													      <'true'> when 'true' ->
														  let <_cor48> =
														      call 'erlang':'-'
															  (N, 1)
														  in  let <_cor49> =
															  call 'erlang':'bsl'
															      (1, _cor48)
														      in  let <_cor50> =
															      call 'erlang':'-'
																  (_cor49)
															  in  let <_cor45> =
																  call 'erlang':'-'
																      (N, 1)
															      in  let <_cor46> =
																      call 'erlang':'bsl'
																	  (1, _cor45)
																  in  let <_cor47> =
																	  call 'erlang':'-'
																	      (_cor46, 1)
																      in  call 'erl_types':'t_from_range'
																	      (_cor50, _cor47)
													      %% Line 1615
													      <'false'> when 'true' ->
														  let <_cor51> =
														      call 'erlang':'bsl'
															  (1, N)
														  in  let <_cor52> =
															  call 'erlang':'-'
															      (_cor51, 1)
														      in  call 'erl_types':'t_from_range'
															      (0, _cor52)
													      ( <_cor53> when 'true' ->
														    primop 'match_fail'
															({'case_clause',_cor53})
														-| ['compiler_generated'] )
													    end
										      end
										  ( <_cor55> when 'true' ->
											primop 'match_fail'
											    ({'case_clause',_cor55})
										    -| ['compiler_generated'] )
										end
									    in  %% Line 1619
										case apply 'bind_pat_vars'/6
											 ([Val|[]], [_cor56|[]], [], Map1, State, 'false') of
										  <{Map2,[_cor95|[]]}> when 'true' ->
										      let <NewBinType> =
											  %% Line 1620
											  call 'erl_types':'t_bitstr_match'
											      (_cor39, BinType)
										      in  %% Line 1621
											  case call 'erl_types':'t_is_none'
												   (NewBinType) of
											    %% Line 1622
											    <'true'> when 'true' ->
												let <_cor60> =
												    call 'erl_types':'t_none'
													()
												in  apply 'bind_error'/4
													([Seg|[]], BinType, _cor60, 'bind')
											    %% Line 1623
											    <'false'> when 'true' ->
												apply 'bind_bin_segs'/5
												    (Segs, NewBinType, [_cor39|Acc], Map2, State)
											    ( <_cor61> when 'true' ->
												  primop 'match_fail'
												      ({'case_clause',_cor61})
											      -| ['compiler_generated'] )
											  end
										  ( <_cor58> when 'true' ->
											primop 'match_fail'
											    ({'badmatch',_cor58})
										    -| ['compiler_generated'] )
										end
							    -| ['compiler_generated'] )
							  ( <_cor93> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {'badrecord','state'}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
							-| ['compiler_generated'] )
						  ( <_cor28> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor28})
						    -| ['compiler_generated'] )
						end
				    ( <_cor62> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor62})
				      -| ['compiler_generated'] )
				  end
	  %% Line 1626
	  <[],_X_BinType,Acc,Map,_X_State> when 'true' ->
	      let <_cor63> =
		  %% Line 1627
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 1627
		  {Map,_cor63}
	  ( <_cor68,_cor67,_cor66,_cor65,_cor64> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor68,_cor67,_cor66,_cor65,_cor64})
		  -| [{'function_name',{'bind_bin_segs',5}}] )
	    -| ['compiler_generated'] )
	end
'bind_error'/4 =
    %% Line 1629
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 1630
	    case <_cor0,_cor3> of
	      %% Line 1631
	      <'bind',[Pat|[]]> when 'true' ->
		  %% Line 1632
		  case apply 'is_literal_record'/1
			   (Pat) of
		    %% Line 1633
		    <'true'> when 'true' ->
			'record'
		    %% Line 1634
		    <'false'> when 'true' ->
			_cor0
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	      %% Line 1636
	      <_fol127,_fol128> when 'true' ->
		  _cor0
	    end
	in  %% Line 1638
	    call 'erlang':'throw'
		({'error',_cor6,_cor3,_cor2,_cor1})
'bind_opaque_pats'/4 =
    %% Line 1643
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1644
	( case _cor0 of
	    ( <( {'state',_cor12,_cor13,_cor14,_cor15,_rec12,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'erl_types':'t_find_opaque_mismatch'
			   (_cor3, _cor2, _rec12) of
		    %% Line 1645
		    <{'ok',T1,T2}> when 'true' ->
			%% Line 1646
			apply 'bind_error'/4
			    ([_cor1|[]], T1, T2, 'opaque')
		    %% Line 1647
		    <'error'> when 'true' ->
			let <_cor6> =
			    %% Line 1648
			    call 'erl_types':'t_none'
				()
			in  %% Line 1648
			    apply 'bind_error'/4
				([_cor1|[]], _cor2, _cor6, 'bind')
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor23> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'bind_guard'/3 =
    %% Line 1655
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1656
	try
	    let <_cor3> =
		call 'dict':'new'
		    ()
	    in  apply 'bind_guard'/5
		    (_cor2, _cor1, _cor3, 'pos', _cor0)
	of <_cor4> ->
	    case _cor4 of
	      %% Line 1657
	      <{Map1,_X_Type}> when 'true' ->
		  Map1
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'try_clause',_cor5})
		-| ['compiler_generated'] )
	    end
	catch <_cor8,_cor7,_cor6> ->
	    case <_cor8,_cor7,_cor6> of
	      %% Line 1659
	      <'throw',{'fail',Warning},_cor12> when 'true' ->
		  {'error',Warning}
	      %% Line 1660
	      <'throw',{'fatal_fail',Warning},_cor13> when 'true' ->
		  {'error',Warning}
	      ( <_cor8,_cor7,_cor6> when 'true' ->
		    primop 'raise'
			(_cor6, _cor7)
		-| ['compiler_generated'] )
	    end
'bind_guard'/5 =
    %% Line 1663
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1666
	case call 'cerl':'type'
		 (_cor4) of
	  %% Line 1667
	  <'binary'> when 'true' ->
	      let <_cor5> =
		  %% Line 1668
		  call 'erl_types':'t_binary'
		      ()
	      in  %% Line 1668
		  {_cor3,_cor5}
	  %% Line 1669
	  <'case'> when 'true' ->
	      let <Arg> =
		  %% Line 1670
		  call 'cerl':'case_arg'
		      (_cor4)
	      in  let <Clauses> =
		      %% Line 1671
		      call 'cerl':'case_clauses'
			  (_cor4)
		  in  %% Line 1672
		      apply 'bind_guard_case_clauses'/6
			  (Arg, Clauses, _cor3, _cor2, _cor1, _cor0)
	  %% Line 1673
	  <'cons'> when 'true' ->
	      let <Hd> =
		  %% Line 1674
		  call 'cerl':'cons_hd'
		      (_cor4)
	      in  let <Tl> =
		      %% Line 1675
		      call 'cerl':'cons_tl'
			  (_cor4)
		  in  %% Line 1676
		      case apply 'bind_guard'/5
			       (Hd, _cor3, _cor2, 'dont_know', _cor0) of
			<{Map1,HdType}> when 'true' ->
			    %% Line 1677
			    case apply 'bind_guard'/5
				     (Tl, Map1, _cor2, 'dont_know', _cor0) of
			      <{Map2,TlType}> when 'true' ->
				  let <_cor12> =
				      %% Line 1678
				      call 'erl_types':'t_cons'
					  (HdType, TlType)
				  in  %% Line 1678
				      {Map2,_cor12}
			      ( <_cor11> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor11})
				-| ['compiler_generated'] )
			    end
			( <_cor10> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor10})
			  -| ['compiler_generated'] )
		      end
	  %% Line 1679
	  <'literal'> when 'true' ->
	      let <_cor13> =
		  %% Line 1680
		  apply 'literal_type'/1
		      (_cor4)
	      in  %% Line 1680
		  {_cor3,_cor13}
	  %% Line 1681
	  <'try'> when 'true' ->
	      let <Arg> =
		  %% Line 1682
		  call 'cerl':'try_arg'
		      (_cor4)
	      in  %% Line 1683
		  case call 'cerl':'try_vars'
			   (_cor4) of
		    <[Var|[]]> when 'true' ->
			let <_cor16> =
			    %% Line 1685
			    apply 'get_label'/1
				(Var)
			in  let <NewEnv> =
				%% Line 1685
				call 'dict':'store'
				    (_cor16, Arg, _cor2)
			    in  let <_cor18> =
				    %% Line 1686
				    call 'cerl':'try_body'
					(_cor4)
				in  %% Line 1686
				    apply 'bind_guard'/5
					(_cor18, _cor3, NewEnv, _cor1, _cor0)
		    ( <_cor15> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor15})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1687
	  <'tuple'> when 'true' ->
	      let <Es0> =
		  %% Line 1688
		  call 'cerl':'tuple_es'
		      (_cor4)
	      in  %% Line 1689
		  case apply 'bind_guard_list'/5
			   (Es0, _cor3, _cor2, 'dont_know', _cor0) of
		    <{Map1,Es}> when 'true' ->
			let <_cor21> =
			    %% Line 1690
			    call 'erl_types':'t_tuple'
				(Es)
			in  %% Line 1690
			    {Map1,_cor21}
		    ( <_cor20> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor20})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1691
	  <'map'> when 'true' ->
	      let <_cor22> =
		  %% Line 1692
		  call 'erl_types':'t_map'
		      ([])
	      in  %% Line 1692
		  {_cor3,_cor22}
	  %% Line 1693
	  <'let'> when 'true' ->
	      let <Arg> =
		  %% Line 1694
		  call 'cerl':'let_arg'
		      (_cor4)
	      in  %% Line 1695
		  case call 'cerl':'let_vars'
			   (_cor4) of
		    <[Var|[]]> when 'true' ->
			let <_cor25> =
			    %% Line 1697
			    apply 'get_label'/1
				(Var)
			in  let <NewEnv> =
				%% Line 1697
				call 'dict':'store'
				    (_cor25, Arg, _cor2)
			    in  let <_cor27> =
				    %% Line 1698
				    call 'cerl':'let_body'
					(_cor4)
				in  %% Line 1698
				    apply 'bind_guard'/5
					(_cor27, _cor3, NewEnv, _cor1, _cor0)
		    ( <_cor24> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor24})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1699
	  <'values'> when 'true' ->
	      let <Es> =
		  %% Line 1700
		  call 'cerl':'values_es'
		      (_cor4)
	      in  let <_cor34> =
		      %% Line 1701
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor31) ->
				    case _cor31 of
				      <[V|_cor30]> when 'true' ->
					  let <_cor32> =
					      apply 'bind_guard'/5
						  (V, _cor3, _cor2, 'dont_know', _cor0)
					  in  let <_cor33> =
						  apply 'lc$^0'/1
						      (_cor30)
					      in  ( [_cor32|_cor33]
						    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor31> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor31})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(Es)
			-| ['list_comprehension'] )
		  in  let <_cor40> =
			  %% Line 1702
			  ( letrec
				'lc$^1'/1 =
				    fun (_cor38) ->
					case _cor38 of
					  <[{_cor58,T}|_cor37]> when 'true' ->
					      let <_cor39> =
						  apply 'lc$^1'/1
						      (_cor37)
					      in  ( [T|_cor39]
						    -| ['compiler_generated'] )
					  ( <[_cor36|_cor37]> when 'true' ->
						apply 'lc$^1'/1
						    (_cor37)
					    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor38> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor38})
						  -| [{'function_name',{'lc$^1',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^1'/1
				    (_cor34)
			    -| ['list_comprehension'] )
		      in  let <Type> =
			      %% Line 1702
			      call 'erl_types':'t_product'
				  (_cor40)
			  in  %% Line 1703
			      {_cor3,Type}
	  %% Line 1704
	  <'var'> when 'true' ->
	      let <_cor42> =
		  %% Line 1706
		  apply 'get_label'/1
		      (_cor4)
	      in  %% Line 1706
		  case call 'dict':'find'
			   (_cor42, _cor2) of
		    %% Line 1707
		    <'error'> when 'true' ->
			let <Type> =
			    %% Line 1709
			    apply 'lookup_type'/2
				(_cor4, _cor3)
			in  let <_cor45> =
				%% Line 1711
				case _cor1 of
				  %% Line 1712
				  <'pos'> when 'true' ->
				      call 'erl_types':'t_atom'
					  ('true')
				  %% Line 1713
				  <'neg'> when 'true' ->
				      call 'erl_types':'t_atom'
					  ('false')
				  %% Line 1714
				  <'dont_know'> when 'true' ->
				      Type
				  ( <_cor44> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor44})
				    -| ['compiler_generated'] )
				end
			    in  let <Inf> =
				    %% Line 1716
				    call 'erl_types':'t_inf'
					(_cor45, Type)
				in  let <_cor48> =
					%% Line 1717
					apply 'enter_type'/3
					    (_cor4, Inf, _cor3)
				    in  %% Line 1717
					{_cor48,Inf}
		    %% Line 1718
		    <{'ok',Tree}> when 'true' ->
			%% Line 1720
			case apply 'bind_guard'/5
				 (Tree, _cor3, _cor2, _cor1, _cor0) of
			  <{Map1,Type}> when 'true' ->
			      let <_cor50> =
				  %% Line 1721
				  apply 'enter_type'/3
				      (_cor4, Type, Map1)
			      in  %% Line 1721
				  {_cor50,Type}
			  ( <_cor49> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor49})
			    -| ['compiler_generated'] )
			end
		    ( <_cor51> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor51})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1723
	  <'call'> when 'true' ->
	      %% Line 1724
	      apply 'handle_guard_call'/5
		  (_cor4, _cor3, _cor2, _cor1, _cor0)
	  ( <_cor52> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor52})
	    -| ['compiler_generated'] )
	end
'handle_guard_call'/5 =
    %% Line 1727
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 1728
	    call 'cerl':'call_module'
		(_cor4)
	in  let <_cor9> =
		%% Line 1728
		call 'cerl':'atom_val'
		    (_cor8)
	    in  let <_cor6> =
		    %% Line 1729
		    call 'cerl':'call_name'
			(_cor4)
		in  let <_cor7> =
			%% Line 1729
			call 'cerl':'atom_val'
			    (_cor6)
		    in  let <_cor5> =
			    %% Line 1730
			    call 'cerl':'call_arity'
				(_cor4)
			in  let <MFA> = {_cor9,_cor7,_cor5}
			    in  %% Line 1731
				case MFA of
				  %% Line 1732
				  <{'erlang',F,1}>
				      when let <_cor11> =
					    call 'erlang':'=:='
						(F, 'is_atom')
					in  let <_cor12> =
						call 'erlang':'=:='
						    (F, 'is_boolean')
					    in  let <_cor13> =
						    %% Line 1733
						    call 'erlang':'=:='
							(F, 'is_binary')
						in  let <_cor14> =
							%% Line 1733
							call 'erlang':'=:='
							    (F, 'is_bitstring')
						    in  let <_cor15> =
							    %% Line 1734
							    call 'erlang':'=:='
								(F, 'is_float')
							in  let <_cor16> =
								%% Line 1734
								call 'erlang':'=:='
								    (F, 'is_function')
							    in  let <_cor17> =
								    %% Line 1735
								    call 'erlang':'=:='
									(F, 'is_integer')
								in  let <_cor18> =
									%% Line 1735
									call 'erlang':'=:='
									    (F, 'is_list')
								    in  let <_cor19> =
									    %% Line 1736
									    call 'erlang':'=:='
										(F, 'is_number')
									in  let <_cor20> =
										%% Line 1736
										call 'erlang':'=:='
										    (F, 'is_pid')
									    in  let <_cor21> =
										    %% Line 1736
										    call 'erlang':'=:='
											(F, 'is_port')
										in  let <_cor22> =
											%% Line 1737
											call 'erlang':'=:='
											    (F, 'is_reference')
										    in  let <_cor23> =
											    %% Line 1737
											    call 'erlang':'=:='
												(F, 'is_tuple')
											in  let <_cor24> =
												%% Line 1737
												call 'erlang':'or'
												    (_cor22, _cor23)
											    in  let <_cor25> =
												    %% Line 1736
												    call 'erlang':'or'
													(_cor21, _cor24)
												in  let <_cor26> =
													%% Line 1736
													call 'erlang':'or'
													    (_cor20, _cor25)
												    in  let <_cor27> =
													    %% Line 1736
													    call 'erlang':'or'
														(_cor19, _cor26)
													in  let <_cor28> =
														%% Line 1735
														call 'erlang':'or'
														    (_cor18, _cor27)
													    in  let <_cor29> =
														    %% Line 1735
														    call 'erlang':'or'
															(_cor17, _cor28)
														in  let <_cor30> =
															%% Line 1734
															call 'erlang':'or'
															    (_cor16, _cor29)
														    in  let <_cor31> =
															    %% Line 1734
															    call 'erlang':'or'
																(_cor15, _cor30)
															in  let <_cor32> =
																%% Line 1733
																call 'erlang':'or'
																    (_cor14, _cor31)
															    in  let <_cor33> =
																    %% Line 1733
																    call 'erlang':'or'
																	(_cor13, _cor32)
																in  let <_cor34> =
																	call 'erlang':'or'
																	    (_cor12, _cor33)
																    in  call 'erlang':'or'
																	    (_cor11, _cor34) ->
				      %% Line 1738
				      apply 'handle_guard_type_test'/6
					  (_cor4, F, _cor3, _cor2, _cor1, _cor0)
				  %% Line 1739
				  <{'erlang','is_function',2}> when 'true' ->
				      %% Line 1740
				      apply 'handle_guard_is_function'/5
					  (_cor4, _cor3, _cor2, _cor1, _cor0)
				  %% Line 1741
				  <_cor49>
				      when let <_cor35> =
					    call 'erlang':'=:='
						(MFA, {'erlang','internal_is_record',3})
					in  let <_cor36> =
						%% Line 1742
						call 'erlang':'=:='
						    (MFA, {'erlang','is_record',3})
					    in  call 'erlang':'or'
						    (_cor35, _cor36) ->
				      %% Line 1743
				      apply 'handle_guard_is_record'/5
					  (_cor4, _cor3, _cor2, _cor1, _cor0)
				  %% Line 1744
				  <{'erlang','=:=',2}> when 'true' ->
				      %% Line 1745
				      apply 'handle_guard_eqeq'/5
					  (_cor4, _cor3, _cor2, _cor1, _cor0)
				  %% Line 1746
				  <{'erlang','==',2}> when 'true' ->
				      %% Line 1747
				      apply 'handle_guard_eq'/5
					  (_cor4, _cor3, _cor2, _cor1, _cor0)
				  %% Line 1748
				  <{'erlang','and',2}> when 'true' ->
				      %% Line 1749
				      apply 'handle_guard_and'/5
					  (_cor4, _cor3, _cor2, _cor1, _cor0)
				  %% Line 1750
				  <{'erlang','or',2}> when 'true' ->
				      %% Line 1751
				      apply 'handle_guard_or'/5
					  (_cor4, _cor3, _cor2, _cor1, _cor0)
				  %% Line 1752
				  <{'erlang','not',1}> when 'true' ->
				      %% Line 1753
				      apply 'handle_guard_not'/5
					  (_cor4, _cor3, _cor2, _cor1, _cor0)
				  %% Line 1754
				  <{'erlang',Comp,2}>
				      when let <_cor37> =
					    call 'erlang':'=:='
						(Comp, '<')
					in  let <_cor38> =
						call 'erlang':'=:='
						    (Comp, '=<')
					    in  let <_cor39> =
						    %% Line 1755
						    call 'erlang':'=:='
							(Comp, '>')
						in  let <_cor40> =
							%% Line 1755
							call 'erlang':'=:='
							    (Comp, '>=')
						    in  let <_cor41> =
							    %% Line 1755
							    call 'erlang':'or'
								(_cor39, _cor40)
							in  let <_cor42> =
								call 'erlang':'or'
								    (_cor38, _cor41)
							    in  call 'erlang':'or'
								    (_cor37, _cor42) ->
				      %% Line 1756
				      apply 'handle_guard_comp'/6
					  (_cor4, Comp, _cor3, _cor2, _cor1, _cor0)
				  %% Line 1757
				  <_cor52> when 'true' ->
				      %% Line 1758
				      apply 'handle_guard_gen_fun'/6
					  (MFA, _cor4, _cor3, _cor2, _cor1, _cor0)
				end
'handle_guard_gen_fun'/6 =
    %% Line 1761
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{M,F,A},Guard,Map,Env,Eval,State> when 'true' ->
	      let <Args> =
		  %% Line 1762
		  call 'cerl':'call_args'
		      (Guard)
	      in  %% Line 1763
		  case apply 'bind_guard_list'/5
			   (Args, Map, Env, 'dont_know', State) of
		    <{Map1,As}> when 'true' ->
			%% Line 1764
			( case State of
			    ( <( {'state',_cor31,_cor32,_cor33,_cor34,_rec13,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <BifRet> =
				      %% Line 1765
				      call 'erl_bif_types':'type'
					  (M, F, A, As, _rec13)
				  in  %% Line 1766
				      case call 'erl_types':'t_is_none'
					       (BifRet) of
					%% Line 1767
					<'true'> when 'true' ->
					    let <_cor12> =
						%% Line 1769
						call 'erl_bif_types':'type'
						    (M, F, A)
					    in  %% Line 1769
						case call 'erl_types':'t_is_none'
							 (_cor12) of
						  %% Line 1770
						  <'true'> when 'true' ->
						      apply 'signal_guard_fail'/4
							  (Eval, Guard, As, State)
						  %% Line 1771
						  <'false'> when 'true' ->
						      apply 'signal_guard_fatal_fail'/4
							  (Eval, Guard, As, State)
						  ( <_cor13> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor13})
						    -| ['compiler_generated'] )
						end
					%% Line 1773
					<'false'> when 'true' ->
					    let <BifArgs> =
						%% Line 1774
						apply 'bif_args'/3
						    (M, F, A)
					    in  let <_cor15> =
						    %% Line 1775
						    call 'erl_types':'t_inf_lists'
							(BifArgs, As, _rec13)
						in  let <Map2> =
							%% Line 1775
							apply 'enter_type_lists'/3
							    (Args, _cor15, Map1)
						    in  let <_cor20> =
							    %% Line 1777
							    case Eval of
							      %% Line 1778
							      <'pos'> when 'true' ->
								  let <_cor17> =
								      call 'erl_types':'t_atom'
									  ('true')
								  in  call 'erl_types':'t_inf'
									  (_cor17, BifRet)
							      %% Line 1779
							      <'neg'> when 'true' ->
								  let <_cor18> =
								      call 'erl_types':'t_atom'
									  ('false')
								  in  call 'erl_types':'t_inf'
									  (_cor18, BifRet)
							      %% Line 1780
							      <'dont_know'> when 'true' ->
								  BifRet
							      ( <_cor19> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_cor19})
								-| ['compiler_generated'] )
							    end
							in  %% Line 1782
							    case call 'erl_types':'t_is_none'
								     (_cor20) of
							      %% Line 1783
							      <'true'> when 'true' ->
								  %% Line 1784
								  case <> of
								    %% Line 1785
								    <>
									when call 'erlang':'=:='
									      (Eval,
									       'pos') ->
									apply 'signal_guard_fail'/4
									    (Eval, Guard, As, State)
								    %% Line 1786
								    <> when 'true' ->
									call 'erlang':'throw'
									    ({'fail','none'})
								  end
							      %% Line 1788
							      <'false'> when 'true' ->
								  {Map2,_cor20}
							      ( <_cor23> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_cor23})
								-| ['compiler_generated'] )
							    end
					( <_cor24> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor24})
					  -| ['compiler_generated'] )
				      end
			      -| ['compiler_generated'] )
			    ( <_cor42> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor7})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor30,_cor29,_cor28,_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor30,_cor29,_cor28,_cor27,_cor26,_cor25})
		  -| [{'function_name',{'handle_guard_gen_fun',6}}] )
	    -| ['compiler_generated'] )
	end
'handle_guard_type_test'/6 =
    %% Line 1792
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1793
	case call 'cerl':'call_args'
		 (_cor5) of
	  <[Arg|[]]> when 'true' ->
	      %% Line 1794
	      case apply 'bind_guard'/5
		       (Arg, _cor3, _cor2, 'dont_know', _cor0) of
		<{Map1,ArgType}> when 'true' ->
		    %% Line 1795
		    case apply 'bind_type_test'/4
			     (_cor1, _cor4, ArgType, _cor0) of
		      %% Line 1796
		      <'error'> when 'true' ->
			  %% Line 1798
			  apply 'signal_guard_fail'/4
			      (_cor1, _cor5, [ArgType|[]], _cor0)
		      %% Line 1799
		      <{'ok',NewArgType,Ret}> when 'true' ->
			  let <_cor8> =
			      %% Line 1802
			      apply 'enter_type'/3
				  (Arg, NewArgType, Map1)
			  in  %% Line 1802
			      {_cor8,Ret}
		      ( <_cor9> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor9})
			-| ['compiler_generated'] )
		    end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'bind_type_test'/4 =
    %% Line 1805
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 1806
	    case _cor2 of
	      %% Line 1807
	      <'is_atom'> when 'true' ->
		  call 'erl_types':'t_atom'
		      ()
	      %% Line 1808
	      <'is_boolean'> when 'true' ->
		  call 'erl_types':'t_boolean'
		      ()
	      %% Line 1809
	      <'is_binary'> when 'true' ->
		  call 'erl_types':'t_binary'
		      ()
	      %% Line 1810
	      <'is_bitstring'> when 'true' ->
		  call 'erl_types':'t_bitstr'
		      ()
	      %% Line 1811
	      <'is_float'> when 'true' ->
		  call 'erl_types':'t_float'
		      ()
	      %% Line 1812
	      <'is_function'> when 'true' ->
		  call 'erl_types':'t_fun'
		      ()
	      %% Line 1813
	      <'is_integer'> when 'true' ->
		  call 'erl_types':'t_integer'
		      ()
	      %% Line 1814
	      <'is_list'> when 'true' ->
		  call 'erl_types':'t_maybe_improper_list'
		      ()
	      %% Line 1815
	      <'is_number'> when 'true' ->
		  call 'erl_types':'t_number'
		      ()
	      %% Line 1816
	      <'is_pid'> when 'true' ->
		  call 'erl_types':'t_pid'
		      ()
	      %% Line 1817
	      <'is_port'> when 'true' ->
		  call 'erl_types':'t_port'
		      ()
	      %% Line 1818
	      <'is_reference'> when 'true' ->
		  call 'erl_types':'t_reference'
		      ()
	      %% Line 1819
	      <'is_tuple'> when 'true' ->
		  call 'erl_types':'t_tuple'
		      ()
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor4})
		-| ['compiler_generated'] )
	    end
	in  %% Line 1821
	    case _cor3 of
	      %% Line 1822
	      <'pos'> when 'true' ->
		  %% Line 1823
		  ( case _cor0 of
		      ( <( {'state',_cor21,_cor22,_cor23,_cor24,_rec14,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <Inf> =
				call 'erl_types':'t_inf'
				    (_cor5, _cor1, _rec14)
			    in  %% Line 1824
				case call 'erl_types':'t_is_none'
					 (Inf) of
				  %% Line 1825
				  <'true'> when 'true' ->
				      'error'
				  %% Line 1826
				  <'false'> when 'true' ->
				      let <_cor10> =
					  call 'erl_types':'t_atom'
					      ('true')
				      in  {'ok',Inf,_cor10}
				  ( <_cor11> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor11})
				    -| ['compiler_generated'] )
				end
			-| ['compiler_generated'] )
		      ( <_cor32> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 1828
	      <'neg'> when 'true' ->
		  let <Sub> =
		      %% Line 1829
		      call 'erl_types':'t_subtract'
			  (_cor1, _cor5)
		  in  %% Line 1830
		      case call 'erl_types':'t_is_none'
			       (Sub) of
			%% Line 1831
			<'true'> when 'true' ->
			    'error'
			%% Line 1832
			<'false'> when 'true' ->
			    let <_cor13> =
				call 'erl_types':'t_atom'
				    ('false')
			    in  {'ok',Sub,_cor13}
			( <_cor14> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor14})
			  -| ['compiler_generated'] )
		      end
	      %% Line 1834
	      <'dont_know'> when 'true' ->
		  let <_cor15> =
		      %% Line 1835
		      call 'erl_types':'t_boolean'
			  ()
		  in  %% Line 1835
		      {'ok',_cor1,_cor15}
	      ( <_cor16> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor16})
		-| ['compiler_generated'] )
	    end
'handle_guard_comp'/6 =
    %% Line 1838
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Args> =
	    %% Line 1839
	    call 'cerl':'call_args'
		(_cor5)
	in  %% Line 1840
	    case Args of
	      <[Arg1|[Arg2|[]]]> when 'true' ->
		  %% Line 1841
		  case apply 'bind_guard_list'/5
			   (Args, _cor3, _cor2, 'dont_know', _cor0) of
		    <{Map1,ArgTypes}> when 'true' ->
			%% Line 1842
			( case _cor0 of
			    ( <( {'state',_cor47,_cor48,_cor49,_cor50,_rec15,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57}
				 -| ['compiler_generated'] )> when 'true' ->
				  %% Line 1843
				  case ArgTypes of
				    <[Type1|[Type2|[]]]> when 'true' ->
					let <IsInt1> =
					    %% Line 1844
					    call 'erl_types':'t_is_integer'
						(Type1, _rec15)
					in  let <IsInt2> =
						%% Line 1845
						call 'erl_types':'t_is_integer'
						    (Type2, _rec15)
					    in  let <_cor16> =
						    %% Line 1846
						    apply 'type'/1
							(Arg1)
						in  let <_cor15> =
							%% Line 1846
							apply 'type'/1
							    (Arg2)
						    in  %% Line 1846
							case <_cor16,_cor15> of
							  %% Line 1847
							  <{'literal',Lit1},{'literal',Lit2}> when 'true' ->
							      let <_cor18> =
								  %% Line 1848
								  call 'cerl':'concrete'
								      (Lit1)
							      in  let <_cor17> =
								      %% Line 1848
								      call 'cerl':'concrete'
									  (Lit2)
								  in  %% Line 1848
								      case call 'erlang':_cor4
									       (_cor18, _cor17) of
									%% Line 1849
									<'true'>
									    when call 'erlang':'=:='
										  (_cor1,
										   'pos') ->
									    let <_cor19> =
										call 'erl_types':'t_atom'
										    ('true')
									    in  {_cor3,_cor19}
									%% Line 1850
									<'true'>
									    when call 'erlang':'=:='
										  (_cor1,
										   'dont_know') ->
									    let <_cor20> =
										call 'erl_types':'t_atom'
										    ('true')
									    in  {_cor3,_cor20}
									%% Line 1851
									<'true'>
									    when call 'erlang':'=:='
										  (_cor1,
										   'neg') ->
									    let <_cor21> =
										call 'erl_types':'t_atom'
										    ('true')
									    in  {_cor3,_cor21}
									%% Line 1852
									<'false'>
									    when call 'erlang':'=:='
										  (_cor1,
										   'pos') ->
									    %% Line 1853
									    apply 'signal_guard_fail'/4
										(_cor1, _cor5, ArgTypes, _cor0)
									%% Line 1854
									<'false'>
									    when call 'erlang':'=:='
										  (_cor1,
										   'dont_know') ->
									    let <_cor22> =
										call 'erl_types':'t_atom'
										    ('false')
									    in  {_cor3,_cor22}
									%% Line 1855
									<'false'>
									    when call 'erlang':'=:='
										  (_cor1,
										   'neg') ->
									    let <_cor23> =
										call 'erl_types':'t_atom'
										    ('false')
									    in  {_cor3,_cor23}
									( <_cor24> when 'true' ->
									      primop 'match_fail'
										  ({'case_clause',_cor24})
									  -| ['compiler_generated'] )
								      end
							  %% Line 1857
							  <{'literal',Lit1},'var'>
							      when try
								    ( let <_cor29> =
									  ( case IsInt1 of
									      ( <( 'true'
										   -| ['compiler_generated'] )> when 'true' ->
										    ( case IsInt2 of
											( <( 'true'
											     -| ['compiler_generated'] )> when 'true' ->
											      call 'erlang':'=:='
												  (_cor1, 'pos')
											  -| ['compiler_generated'] )
											( <( 'false'
											     -| ['compiler_generated'] )> when 'true' ->
											      'false'
											  -| ['compiler_generated'] )
											( <_cor26> when 'true' ->
											      _cor26
											  -| ['compiler_generated'] )
										      end
										      -| ['compiler_generated'] )
										-| ['compiler_generated'] )
									      ( <( 'false'
										   -| ['compiler_generated'] )> when 'true' ->
										    'false'
										-| ['compiler_generated'] )
									      ( <_cor25> when 'true' ->
										    _cor25
										-| ['compiler_generated'] )
									    end
									    -| ['compiler_generated'] )
								      in  ( call ( 'erlang'
										   -| ['compiler_generated'] ):( '=:='
														 -| ['compiler_generated'] )
										(( _cor29
										   -| ['compiler_generated'] ), ( 'true'
														  -| ['compiler_generated'] ))
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								of <Try> ->
								    Try
								catch <T,R> ->
								    'false' ->
							      %% Line 1858
							      case apply 'bind_comp_literal_var'/6
								       (Lit1, Arg2, Type2, _cor4, Map1, _rec15) of
								%% Line 1859
								<'error'> when 'true' ->
								    apply 'signal_guard_fail'/4
									(_cor1, _cor5, ArgTypes, _cor0)
								%% Line 1860
								<{'ok',NewMap}> when 'true' ->
								    let <_cor30> =
									call 'erl_types':'t_atom'
									    ('true')
								    in  {NewMap,_cor30}
								( <_cor31> when 'true' ->
								      primop 'match_fail'
									  ({'case_clause',_cor31})
								  -| ['compiler_generated'] )
							      end
							  %% Line 1862
							  <'var',{'literal',Lit2}>
							      when try
								    ( let <_cor36> =
									  ( case IsInt1 of
									      ( <( 'true'
										   -| ['compiler_generated'] )> when 'true' ->
										    ( case IsInt2 of
											( <( 'true'
											     -| ['compiler_generated'] )> when 'true' ->
											      call 'erlang':'=:='
												  (_cor1, 'pos')
											  -| ['compiler_generated'] )
											( <( 'false'
											     -| ['compiler_generated'] )> when 'true' ->
											      'false'
											  -| ['compiler_generated'] )
											( <_cor33> when 'true' ->
											      _cor33
											  -| ['compiler_generated'] )
										      end
										      -| ['compiler_generated'] )
										-| ['compiler_generated'] )
									      ( <( 'false'
										   -| ['compiler_generated'] )> when 'true' ->
										    'false'
										-| ['compiler_generated'] )
									      ( <_cor32> when 'true' ->
										    _cor32
										-| ['compiler_generated'] )
									    end
									    -| ['compiler_generated'] )
								      in  ( call ( 'erlang'
										   -| ['compiler_generated'] ):( '=:='
														 -| ['compiler_generated'] )
										(( _cor36
										   -| ['compiler_generated'] ), ( 'true'
														  -| ['compiler_generated'] ))
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								of <Try> ->
								    Try
								catch <T,R> ->
								    'false' ->
							      let <_cor37> =
								  %% Line 1863
								  apply 'invert_comp'/1
								      (_cor4)
							      in  %% Line 1863
								  case apply 'bind_comp_literal_var'/6
									   (Lit2, Arg1, Type1, _cor37, %% Line 1864
												       Map1, _rec15) of
								    %% Line 1865
								    <'error'> when 'true' ->
									apply 'signal_guard_fail'/4
									    (_cor1, _cor5, ArgTypes, _cor0)
								    %% Line 1866
								    <{'ok',NewMap}> when 'true' ->
									let <_cor38> =
									    call 'erl_types':'t_atom'
										('true')
									in  {NewMap,_cor38}
								    ( <_cor39> when 'true' ->
									  primop 'match_fail'
									      ({'case_clause',_cor39})
								      -| ['compiler_generated'] )
								  end
							  %% Line 1868
							  <_cor59,_cor60> when 'true' ->
							      %% Line 1869
							      apply 'handle_guard_gen_fun'/6
								  ({'erlang',_cor4,2}, _cor5, _cor3, _cor2, _cor1, _cor0)
							end
				    ( <_cor12> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor12})
				      -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			    ( <_cor58> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor8})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor7> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor7})
		-| ['compiler_generated'] )
	    end
'invert_comp'/1 =
    %% Line 1872
    fun (_cor0) ->
	case _cor0 of
	  <'=<'> when 'true' ->
	      '>='
	  %% Line 1873
	  <'<'> when 'true' ->
	      '>'
	  %% Line 1874
	  <'>='> when 'true' ->
	      '=<'
	  %% Line 1875
	  <'>'> when 'true' ->
	      '<'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'invert_comp',1}}] )
	    -| ['compiler_generated'] )
	end
'bind_comp_literal_var'/6 =
    %% Line 1877
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <LitVal> =
	    %% Line 1878
	    call 'cerl':'concrete'
		(_cor5)
	in  let <_cor20> =
		%% Line 1880
		case call 'erl_types':'t_number_vals'
			 (_cor3, _cor0) of
		  %% Line 1881
		  <'unknown'> when 'true' ->
		      let <_cor10> =
			  %% Line 1883
			  case _cor2 of
			    %% Line 1884
			    <'=<'> when 'true' ->
				call 'erl_types':'t_from_range'
				    (LitVal, 'pos_inf')
			    %% Line 1885
			    <'<'> when 'true' ->
				let <_cor7> =
				    call 'erlang':'+'
					(LitVal, 1)
				in  call 'erl_types':'t_from_range'
					(_cor7, 'pos_inf')
			    %% Line 1886
			    <'>='> when 'true' ->
				call 'erl_types':'t_from_range'
				    ('neg_inf', LitVal)
			    %% Line 1887
			    <'>'> when 'true' ->
				let <_cor8> =
				    call 'erlang':'-'
					(LitVal, 1)
				in  call 'erl_types':'t_from_range'
					('neg_inf', _cor8)
			    ( <_cor9> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor9})
			      -| ['compiler_generated'] )
			  end
		      in  %% Line 1889
			  call 'erl_types':'t_inf'
			      (_cor10, _cor3, _cor0)
		  %% Line 1890
		  <NumberVals> when 'true' ->
		      let <_cor17> =
			  %% Line 1891
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor14) ->
					case _cor14 of
					  <[X|_cor13]> when 'true' ->
					      ( case call 'erlang':_cor2
							 (LitVal, X) of
						  <'true'> when 'true' ->
						      let <_cor15> =
							  apply 'lc$^0'/1
							      (_cor13)
						      in  ( [X|_cor15]
							    -| ['compiler_generated'] )
						  ( <'false'> when 'true' ->
							apply 'lc$^0'/1
							    (_cor13)
						    -| ['compiler_generated'] )
						  ( <_cor16> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor16})
						    -| ['compiler_generated'] )
						end
						-| ['list_comprehension'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor14> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor14})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (NumberVals)
			    -| ['list_comprehension'] )
		      in  %% Line 1892
			  call 'erl_types':'t_integers'
			      (_cor17)
		end
	    in  %% Line 1894
		case call 'erl_types':'t_is_none'
			 (_cor20) of
		  %% Line 1895
		  <'true'> when 'true' ->
		      'error'
		  %% Line 1896
		  <'false'> when 'true' ->
		      let <_cor22> =
			  apply 'enter_type'/3
			      (_cor4, _cor20, _cor1)
		      in  {'ok',_cor22}
		  ( <_cor23> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor23})
		    -| ['compiler_generated'] )
		end
'handle_guard_is_function'/5 =
    %% Line 1899
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Args> =
	    %% Line 1900
	    call 'cerl':'call_args'
		(_cor4)
	in  %% Line 1901
	    case apply 'bind_guard_list'/5
		     (Args, _cor3, _cor2, 'dont_know', _cor0) of
	      <{Map1,ArgTypes0}> when 'true' ->
		  %% Line 1902
		  case ArgTypes0 of
		    <[FunType0|[ArityType0|[]]]> when 'true' ->
			%% Line 1903
			( case _cor0 of
			    ( <( {'state',_cor43,_cor44,_cor45,_cor46,_rec16,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor11> =
				      %% Line 1904
				      call 'erl_types':'t_integer'
					  ()
				  in  let <ArityType> =
					  %% Line 1904
					  call 'erl_types':'t_inf'
					      (ArityType0, _cor11, _rec16)
				      in  %% Line 1905
					  case call 'erl_types':'t_is_none'
						   (ArityType) of
					    %% Line 1906
					    <'true'> when 'true' ->
						apply 'signal_guard_fail'/4
						    (_cor1, _cor4, ArgTypes0, _cor0)
					    %% Line 1907
					    <'false'> when 'true' ->
						let <_cor25> =
						    %% Line 1909
						    case call 'erl_types':'t_number_vals'
							     (ArityType, _rec16) of
						      %% Line 1910
						      <'unknown'> when 'true' ->
							  call 'erl_types':'t_fun'
							      ()
						      %% Line 1911
						      <Vals> when 'true' ->
							  let <_cor23> =
							      %% Line 1912
							      ( letrec
								    'lc$^0'/1 =
									fun (_cor17) ->
									    case _cor17 of
									      <[X|_cor16]> when 'true' ->
										  let <_cor19> =
										      call 'erl_types':'t_any'
											  ()
										  in  let <_cor20> =
											  call 'lists':'duplicate'
											      (X, _cor19)
										      in  let <_cor18> =
											      call 'erl_types':'t_any'
												  ()
											  in  let <_cor21> =
												  call 'erl_types':'t_fun'
												      (_cor20, _cor18)
											      in  let <_cor22> =
												      apply 'lc$^0'/1
													  (_cor16)
												  in  ( [_cor21|_cor22]
													-| ['compiler_generated'] )
									      <[]> when 'true' ->
										  []
									      ( <_cor17> when 'true' ->
										    ( primop 'match_fail'
											  ({'function_clause',_cor17})
										      -| [{'function_name',{'lc$^0',1}}] )
										-| ['compiler_generated'] )
									    end
								in  apply 'lc$^0'/1
									(Vals)
								-| ['list_comprehension'] )
							  in  %% Line 1912
							      call 'erl_types':'t_sup'
								  (_cor23)
						    end
						in  let <FunType> =
							%% Line 1914
							call 'erl_types':'t_inf'
							    (FunType0, _cor25, _rec16)
						    in  %% Line 1915
							case call 'erl_types':'t_is_none'
								 (FunType) of
							  %% Line 1916
							  <'true'> when 'true' ->
							      %% Line 1917
							      case _cor1 of
								%% Line 1918
								<'pos'> when 'true' ->
								    apply 'signal_guard_fail'/4
									(_cor1, _cor4, ArgTypes0, _cor0)
								%% Line 1919
								<'neg'> when 'true' ->
								    let <_cor28> =
									call 'erl_types':'t_atom'
									    ('false')
								    in  {Map1,_cor28}
								%% Line 1920
								<'dont_know'> when 'true' ->
								    let <_cor29> =
									call 'erl_types':'t_atom'
									    ('false')
								    in  {Map1,_cor29}
								( <_cor30> when 'true' ->
								      primop 'match_fail'
									  ({'case_clause',_cor30})
								  -| ['compiler_generated'] )
							      end
							  %% Line 1922
							  <'false'> when 'true' ->
							      %% Line 1923
							      case _cor1 of
								%% Line 1924
								<'pos'> when 'true' ->
								    let <_cor32> =
									apply 'enter_type_lists'/3
									    (Args, [FunType|[ArityType|[]]], Map1)
								    in  let <_cor31> =
									    %% Line 1925
									    call 'erl_types':'t_atom'
										('true')
									in  {_cor32,_cor31}
								%% Line 1926
								<'neg'> when 'true' ->
								    let <_cor33> =
									call 'erl_types':'t_atom'
									    ('false')
								    in  {Map1,_cor33}
								%% Line 1927
								<'dont_know'> when 'true' ->
								    let <_cor34> =
									call 'erl_types':'t_boolean'
									    ()
								    in  {Map1,_cor34}
								( <_cor35> when 'true' ->
								      primop 'match_fail'
									  ({'case_clause',_cor35})
								  -| ['compiler_generated'] )
							      end
							  ( <_cor36> when 'true' ->
								primop 'match_fail'
								    ({'case_clause',_cor36})
							    -| ['compiler_generated'] )
							end
					    ( <_cor37> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor37})
					      -| ['compiler_generated'] )
					  end
			      -| ['compiler_generated'] )
			    ( <_cor54> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor7})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor6})
		-| ['compiler_generated'] )
	    end
'handle_guard_is_record'/5 =
    %% Line 1932
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1934
	case call 'cerl':'call_args'
		 (_cor4) of
	  <[Rec|[Tag0|[Arity0|[]]]]> when 'true' ->
	      let <Tag> =
		  %% Line 1935
		  call 'cerl':'atom_val'
		      (Tag0)
	      in  let <Arity> =
		      %% Line 1936
		      call 'cerl':'int_val'
			  (Arity0)
		  in  %% Line 1937
		      case apply 'bind_guard'/5
			       (Rec, _cor3, _cor2, 'dont_know', _cor0) of
			<{Map1,RecType}> when 'true' ->
			    let <ArityMin1> =
				%% Line 1938
				call 'erlang':'-'
				    (Arity, 1)
			    in  %% Line 1939
				( case _cor0 of
				    ( <( {'state',_cor48,_cor49,_cor50,_cor51,_rec18,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <_cor14> =
					      %% Line 1940
					      call 'erl_types':'t_atom'
						  (Tag)
					  in  let <_cor15> =
						  %% Line 1940
						  call 'erl_types':'t_any'
						      ()
					      in  let <_cor16> =
						      %% Line 1940
						      call 'lists':'duplicate'
							  (ArityMin1, _cor15)
						  in  let <Tuple> =
							  %% Line 1940
							  call 'erl_types':'t_tuple'
							      ([_cor14|_cor16])
						      in  let <_cor18> =
							      %% Line 1941
							      call 'erl_types':'t_inf'
								  (Tuple, RecType, _rec18)
							  in  %% Line 1941
							      case call 'erl_types':'t_is_none'
								       (_cor18) of
								%% Line 1942
								<'true'> when 'true' ->
								    %% Line 1943
								    case call 'erl_types':'t_has_opaque_subtype'
									     (RecType, _rec18) of
								      %% Line 1944
								      <'true'> when 'true' ->
									  let <_cor19> =
									      %% Line 1946
									      call 'erl_types':'t_from_term'
										  (Tag)
									  in  let <_cor20> =
										  %% Line 1947
										  call 'erl_types':'t_from_term'
										      (Arity)
									      in  %% Line 1945
										  apply 'signal_guard_fail'/4
										      (_cor1, _cor4, %% Line 1946
												     [RecType|[_cor19|%% Line 1947
														      [_cor20|[]]]], _cor0)
								      %% Line 1949
								      <'false'> when 'true' ->
									  %% Line 1950
									  case _cor1 of
									    %% Line 1951
									    <'pos'> when 'true' ->
										let <_cor21> =
										    %% Line 1952
										    call 'erl_types':'t_from_term'
											(Tag)
										in  let <_cor22> =
											%% Line 1953
											call 'erl_types':'t_from_term'
											    (Arity)
										    in  apply 'signal_guard_fail'/4
											    (_cor1, _cor4, %% Line 1952
													   [RecType|[_cor21|%% Line 1953
															    [_cor22|[]]]], _cor0)
									    %% Line 1955
									    <'neg'> when 'true' ->
										let <_cor23> =
										    call 'erl_types':'t_atom'
											('false')
										in  {Map1,_cor23}
									    %% Line 1956
									    <'dont_know'> when 'true' ->
										let <_cor24> =
										    call 'erl_types':'t_atom'
											('false')
										in  {Map1,_cor24}
									    ( <_cor25> when 'true' ->
										  primop 'match_fail'
										      ({'case_clause',_cor25})
									      -| ['compiler_generated'] )
									  end
								      ( <_cor26> when 'true' ->
									    primop 'match_fail'
										({'case_clause',_cor26})
									-| ['compiler_generated'] )
								    end
								%% Line 1959
								<'false'> when 'true' ->
								    let <_cor28> =
									%% Line 1961
									case apply 'state__lookup_record'/3
										 (Tag, ArityMin1, _cor0) of
									  %% Line 1962
									  <'error'> when 'true' ->
									      Tuple
									  %% Line 1963
									  <{'ok',Prototype}> when 'true' ->
									      Prototype
									  ( <_cor27> when 'true' ->
										primop 'match_fail'
										    ({'case_clause',_cor27})
									    -| ['compiler_generated'] )
									end
								    in  let <Type> =
									    %% Line 1965
									    call 'erl_types':'t_inf'
										(_cor28, RecType, _rec18)
									in  %% Line 1966
									    case call 'erl_types':'t_is_none'
										     (Type) of
									      %% Line 1967
									      <'true'> when 'true' ->
										  let <_cor33> =
										      %% Line 1969
										      apply 'format_type'/2
											  (RecType, _cor0)
										  in  let <FArgs> =
											  %% Line 1969
											  call 'erlang':'++'
											      ([114|[101|[99|[111|[114|[100|[32]]]]]]], _cor33)
										      in  let <Msg> =
											      %% Line 1970
											      {'record_matching',[FArgs|[Tag|[]]]}
											  in  %% Line 1971
											      call 'erlang':'throw'
												  ({'fail',{_cor4,Msg}})
									      %% Line 1972
									      <'false'> when 'true' ->
										  %% Line 1973
										  case _cor1 of
										    %% Line 1974
										    <'pos'> when 'true' ->
											let <_cor37> =
											    apply 'enter_type'/3
												(Rec, Type, Map1)
											in  let <_cor36> =
												call 'erl_types':'t_atom'
												    ('true')
											    in  {_cor37,_cor36}
										    %% Line 1975
										    <'neg'> when 'true' ->
											let <_cor38> =
											    call 'erl_types':'t_atom'
												('false')
											in  {Map1,_cor38}
										    %% Line 1976
										    <'dont_know'> when 'true' ->
											let <_cor39> =
											    call 'erl_types':'t_boolean'
												()
											in  {Map1,_cor39}
										    ( <_cor40> when 'true' ->
											  primop 'match_fail'
											      ({'case_clause',_cor40})
										      -| ['compiler_generated'] )
										  end
									      ( <_cor41> when 'true' ->
										    primop 'match_fail'
											({'case_clause',_cor41})
										-| ['compiler_generated'] )
									    end
								( <_cor42> when 'true' ->
								      primop 'match_fail'
									  ({'case_clause',_cor42})
								  -| ['compiler_generated'] )
							      end
				      -| ['compiler_generated'] )
				    ( <_cor59> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','state'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			( <_cor9> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor9})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'handle_guard_eq'/5 =
    %% Line 1981
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1982
	case call 'cerl':'call_args'
		 (_cor4) of
	  <[Arg1|[Arg2|[]]]> when 'true' ->
	      let <_cor7> =
		  %% Line 1983
		  apply 'type'/1
		      (Arg1)
	      in  let <_cor6> =
		      %% Line 1983
		      apply 'type'/1
			  (Arg2)
		  in  %% Line 1983
		      case <_cor7,_cor6> of
			%% Line 1984
			<{'literal',Lit1},{'literal',Lit2}> when 'true' ->
			    let <_cor9> =
				%% Line 1985
				call 'cerl':'concrete'
				    (Lit1)
			    in  let <_cor8> =
				    %% Line 1985
				    call 'cerl':'concrete'
					(Lit2)
				in  %% Line 1985
				    case <> of
				      %% Line 1986
				      <>
					  when call 'erlang':'=:='
						(_cor9,
						 _cor8) ->
					  %% Line 1987
					  case <> of
					    %% Line 1988
					    <>
						when call 'erlang':'=:='
						      (_cor1,
						       'pos') ->
						let <_cor10> =
						    call 'erl_types':'t_atom'
							('true')
						in  {_cor3,_cor10}
					    %% Line 1989
					    <>
						when call 'erlang':'=:='
						      (_cor1,
						       'neg') ->
						let <_cor11> =
						    %% Line 1990
						    call 'cerl':'concrete'
							(Lit1)
						in  let <_cor12> =
							%% Line 1990
							call 'erl_types':'t_from_term'
							    (_cor11)
						    in  let <_cor13> =
							    %% Line 1991
							    call 'cerl':'concrete'
								(Lit2)
							in  let <_cor14> =
								%% Line 1991
								call 'erl_types':'t_from_term'
								    (_cor13)
							    in  let <ArgTypes> =
								    %% Line 1990
								    [_cor12|%% Line 1991
									    [_cor14|[]]]
								in  %% Line 1992
								    apply 'signal_guard_fail'/4
									(_cor1, _cor4, ArgTypes, _cor0)
					    %% Line 1993
					    <>
						when call 'erlang':'=:='
						      (_cor1,
						       'dont_know') ->
						let <_cor16> =
						    call 'erl_types':'t_atom'
							('true')
						in  {_cor3,_cor16}
					    ( <> when 'true' ->
						  primop 'match_fail'
						      ('if_clause')
					      -| ['compiler_generated'] )
					  end
				      %% Line 1995
				      <> when 'true' ->
					  %% Line 1996
					  case <> of
					    %% Line 1997
					    <>
						when call 'erlang':'=:='
						      (_cor1,
						       'neg') ->
						let <_cor17> =
						    call 'erl_types':'t_atom'
							('false')
						in  {_cor3,_cor17}
					    %% Line 1998
					    <>
						when call 'erlang':'=:='
						      (_cor1,
						       'dont_know') ->
						let <_cor18> =
						    call 'erl_types':'t_atom'
							('false')
						in  {_cor3,_cor18}
					    %% Line 1999
					    <>
						when call 'erlang':'=:='
						      (_cor1,
						       'pos') ->
						let <_cor19> =
						    %% Line 2000
						    call 'cerl':'concrete'
							(Lit1)
						in  let <_cor20> =
							%% Line 2000
							call 'erl_types':'t_from_term'
							    (_cor19)
						    in  let <_cor21> =
							    %% Line 2001
							    call 'cerl':'concrete'
								(Lit2)
							in  let <_cor22> =
								%% Line 2001
								call 'erl_types':'t_from_term'
								    (_cor21)
							    in  let <ArgTypes> =
								    %% Line 2000
								    [_cor20|%% Line 2001
									    [_cor22|[]]]
								in  %% Line 2002
								    apply 'signal_guard_fail'/4
									(_cor1, _cor4, ArgTypes, _cor0)
					    ( <> when 'true' ->
						  primop 'match_fail'
						      ('if_clause')
					      -| ['compiler_generated'] )
					  end
				    end
			%% Line 2005
			<{'literal',Lit1},_cor33>
			    when call 'erlang':'=:='
				  (_cor1,
				   'pos') ->
			    %% Line 2006
			    case call 'cerl':'concrete'
				     (Lit1) of
			      %% Line 2007
			      <Atom>
				  when call 'erlang':'is_atom'
					(Atom) ->
				  %% Line 2008
				  apply 'bind_eqeq_guard_lit_other'/6
				      (_cor4, Lit1, Arg2, _cor3, _cor2, _cor0)
			      %% Line 2009
			      <[]> when 'true' ->
				  %% Line 2010
				  apply 'bind_eqeq_guard_lit_other'/6
				      (_cor4, Lit1, Arg2, _cor3, _cor2, _cor0)
			      %% Line 2011
			      <_cor34> when 'true' ->
				  %% Line 2012
				  apply 'bind_eq_guard'/7
				      (_cor4, Lit1, Arg2, _cor3, _cor2, _cor1, _cor0)
			    end
			%% Line 2014
			<_cor35,{'literal',Lit2}>
			    when call 'erlang':'=:='
				  (_cor1,
				   'pos') ->
			    %% Line 2015
			    case call 'cerl':'concrete'
				     (Lit2) of
			      %% Line 2016
			      <Atom>
				  when call 'erlang':'is_atom'
					(Atom) ->
				  %% Line 2017
				  apply 'bind_eqeq_guard_lit_other'/6
				      (_cor4, Lit2, Arg1, _cor3, _cor2, _cor0)
			      %% Line 2018
			      <[]> when 'true' ->
				  %% Line 2019
				  apply 'bind_eqeq_guard_lit_other'/6
				      (_cor4, Lit2, Arg1, _cor3, _cor2, _cor0)
			      %% Line 2020
			      <_cor36> when 'true' ->
				  %% Line 2021
				  apply 'bind_eq_guard'/7
				      (_cor4, Arg1, Lit2, _cor3, _cor2, _cor1, _cor0)
			    end
			%% Line 2023
			<_cor37,_cor38> when 'true' ->
			    %% Line 2024
			    apply 'bind_eq_guard'/7
				(_cor4, Arg1, Arg2, _cor3, _cor2, _cor1, _cor0)
		      end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'bind_eq_guard'/7 =
    %% Line 2027
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2028
	case apply 'bind_guard'/5
		 (_cor5, _cor3, _cor2, 'dont_know', _cor0) of
	  <{Map1,Type1}> when 'true' ->
	      %% Line 2029
	      case apply 'bind_guard'/5
		       (_cor4, Map1, _cor2, 'dont_know', _cor0) of
		<{Map2,Type2}> when 'true' ->
		    %% Line 2030
		    ( case _cor0 of
			( <( {'state',_cor33,_cor34,_cor35,_cor36,_rec20,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_cor18> =
				  %% Line 2032
				  ( case call 'erl_types':'t_is_nil'
					     (Type1, _rec20) of
				      ( <( 'true'
					   -| ['compiler_generated'] )> when 'true' ->
					    'true'
					-| ['compiler_generated'] )
				      ( <( 'false'
					   -| ['compiler_generated'] )> when 'true' ->
					    %% Line 2033
					    ( case call 'erl_types':'t_is_nil'
						       (Type2, _rec20) of
						( <( 'true'
						     -| ['compiler_generated'] )> when 'true' ->
						      'true'
						  -| ['compiler_generated'] )
						( <( 'false'
						     -| ['compiler_generated'] )> when 'true' ->
						      ( case call 'erl_types':'t_is_atom'
								 (Type1, _rec20) of
							  ( <( 'true'
							       -| ['compiler_generated'] )> when 'true' ->
								'true'
							    -| ['compiler_generated'] )
							  ( <( 'false'
							       -| ['compiler_generated'] )> when 'true' ->
								call 'erl_types':'t_is_atom'
								    (Type2, _rec20)
							    -| ['compiler_generated'] )
							  ( <_cor14> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {( 'badarg'
									    -| ['compiler_generated'] ),_cor14}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						( <_cor13> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {( 'badarg'
								  -| ['compiler_generated'] ),_cor13}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <_cor12> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {( 'badarg'
							-| ['compiler_generated'] ),_cor12}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      in  %% Line 2031
				  case _cor18 of
				    %% Line 2035
				    <'true'> when 'true' ->
					apply 'bind_eqeq_guard'/7
					    (_cor6, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
				    %% Line 2036
				    <'false'> when 'true' ->
					let <OpArgs> =
					    %% Line 2038
					    call 'erl_types':'t_find_unknown_opaque'
						(Type1, Type2, _rec20)
					in  %% Line 2039
					    case <> of
					      %% Line 2040
					      <>
						  when call 'erlang':'=:='
							(OpArgs,
							 []) ->
						  %% Line 2041
						  case _cor1 of
						    %% Line 2042
						    <'pos'> when 'true' ->
							let <_cor20> =
							    call 'erl_types':'t_atom'
								('true')
							in  {Map2,_cor20}
						    %% Line 2043
						    <'neg'> when 'true' ->
							let <_cor21> =
							    call 'erl_types':'t_atom'
								('false')
							in  {Map2,_cor21}
						    %% Line 2044
						    <'dont_know'> when 'true' ->
							let <_cor22> =
							    call 'erl_types':'t_boolean'
								()
							in  {Map2,_cor22}
						    ( <_cor23> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor23})
						      -| ['compiler_generated'] )
						  end
					      %% Line 2046
					      <> when 'true' ->
						  %% Line 2047
						  apply 'signal_guard_fail'/4
						      (_cor1, _cor6, [Type1|[Type2|[]]], _cor0)
					    end
				    ( <_cor25> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor25})
				      -| ['compiler_generated'] )
				  end
			  -| ['compiler_generated'] )
			( <_cor44> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor7})
	    -| ['compiler_generated'] )
	end
'handle_guard_eqeq'/5 =
    %% Line 2051
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2052
	case call 'cerl':'call_args'
		 (_cor4) of
	  <[Arg1|[Arg2|[]]]> when 'true' ->
	      let <_cor7> =
		  %% Line 2053
		  apply 'type'/1
		      (Arg1)
	      in  let <_cor6> =
		      %% Line 2053
		      apply 'type'/1
			  (Arg2)
		  in  %% Line 2053
		      case <_cor7,_cor6> of
			%% Line 2054
			<{'literal',Lit1},{'literal',Lit2}> when 'true' ->
			    let <_cor9> =
				%% Line 2056
				call 'cerl':'concrete'
				    (Lit1)
			    in  let <_cor8> =
				    %% Line 2056
				    call 'cerl':'concrete'
					(Lit2)
				in  %% Line 2056
				    case <> of
				      %% Line 2057
				      <>
					  when call 'erlang':'=:='
						(_cor9,
						 _cor8) ->
					  %% Line 2058
					  case <> of
					    <>
						when call 'erlang':'=:='
						      (_cor1,
						       'neg') ->
						let <_cor10> =
						    %% Line 2059
						    call 'cerl':'concrete'
							(Lit1)
						in  let <_cor11> =
							%% Line 2059
							call 'erl_types':'t_from_term'
							    (_cor10)
						    in  let <_cor12> =
							    %% Line 2060
							    call 'cerl':'concrete'
								(Lit2)
							in  let <_cor13> =
								%% Line 2060
								call 'erl_types':'t_from_term'
								    (_cor12)
							    in  let <ArgTypes> =
								    %% Line 2059
								    [_cor11|%% Line 2060
									    [_cor13|[]]]
								in  %% Line 2061
								    apply 'signal_guard_fail'/4
									(_cor1, _cor4, ArgTypes, _cor0)
					    %% Line 2062
					    <>
						when call 'erlang':'=:='
						      (_cor1,
						       'pos') ->
						let <_cor15> =
						    call 'erl_types':'t_atom'
							('true')
						in  {_cor3,_cor15}
					    %% Line 2063
					    <>
						when call 'erlang':'=:='
						      (_cor1,
						       'dont_know') ->
						let <_cor16> =
						    call 'erl_types':'t_atom'
							('true')
						in  {_cor3,_cor16}
					    ( <> when 'true' ->
						  primop 'match_fail'
						      ('if_clause')
					      -| ['compiler_generated'] )
					  end
				      %% Line 2065
				      <> when 'true' ->
					  %% Line 2066
					  case <> of
					    <>
						when call 'erlang':'=:='
						      (_cor1,
						       'neg') ->
						let <_cor17> =
						    call 'erl_types':'t_atom'
							('false')
						in  {_cor3,_cor17}
					    %% Line 2067
					    <>
						when call 'erlang':'=:='
						      (_cor1,
						       'dont_know') ->
						let <_cor18> =
						    call 'erl_types':'t_atom'
							('false')
						in  {_cor3,_cor18}
					    %% Line 2068
					    <>
						when call 'erlang':'=:='
						      (_cor1,
						       'pos') ->
						let <_cor19> =
						    %% Line 2069
						    call 'cerl':'concrete'
							(Lit1)
						in  let <_cor20> =
							%% Line 2069
							call 'erl_types':'t_from_term'
							    (_cor19)
						    in  let <_cor21> =
							    %% Line 2070
							    call 'cerl':'concrete'
								(Lit2)
							in  let <_cor22> =
								%% Line 2070
								call 'erl_types':'t_from_term'
								    (_cor21)
							    in  let <ArgTypes> =
								    %% Line 2069
								    [_cor20|%% Line 2070
									    [_cor22|[]]]
								in  %% Line 2071
								    apply 'signal_guard_fail'/4
									(_cor1, _cor4, ArgTypes, _cor0)
					    ( <> when 'true' ->
						  primop 'match_fail'
						      ('if_clause')
					      -| ['compiler_generated'] )
					  end
				    end
			%% Line 2074
			<{'literal',Lit1},_cor31>
			    when call 'erlang':'=:='
				  (_cor1,
				   'pos') ->
			    %% Line 2075
			    apply 'bind_eqeq_guard_lit_other'/6
				(_cor4, Lit1, Arg2, _cor3, _cor2, _cor0)
			%% Line 2076
			<_cor32,{'literal',Lit2}>
			    when call 'erlang':'=:='
				  (_cor1,
				   'pos') ->
			    %% Line 2077
			    apply 'bind_eqeq_guard_lit_other'/6
				(_cor4, Lit2, Arg1, _cor3, _cor2, _cor0)
			%% Line 2078
			<_cor33,_cor34> when 'true' ->
			    %% Line 2079
			    apply 'bind_eqeq_guard'/7
				(_cor4, Arg1, Arg2, _cor3, _cor2, _cor1, _cor0)
		      end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'bind_eqeq_guard'/7 =
    %% Line 2082
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2083
	case apply 'bind_guard'/5
		 (_cor5, _cor3, _cor2, 'dont_know', _cor0) of
	  <{Map1,Type1}> when 'true' ->
	      %% Line 2084
	      case apply 'bind_guard'/5
		       (_cor4, Map1, _cor2, 'dont_know', _cor0) of
		<{Map2,Type2}> when 'true' ->
		    %% Line 2087
		    ( case _cor0 of
			( <( {'state',_cor40,_cor41,_cor42,_cor43,_rec21,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <Inf> =
				  %% Line 2088
				  call 'erl_types':'t_inf'
				      (Type1, Type2, _rec21)
			      in  %% Line 2089
				  case call 'erl_types':'t_is_none'
					   (Inf) of
				    %% Line 2090
				    <'true'> when 'true' ->
					let <OpArgs> =
					    %% Line 2091
					    call 'erl_types':'t_find_unknown_opaque'
						(Type1, Type2, _rec21)
					in  %% Line 2092
					    case <> of
					      %% Line 2093
					      <>
						  when call 'erlang':'=:='
							(OpArgs,
							 []) ->
						  %% Line 2094
						  case _cor1 of
						    %% Line 2095
						    <'neg'> when 'true' ->
							let <_cor14> =
							    call 'erl_types':'t_atom'
								('false')
							in  {Map2,_cor14}
						    %% Line 2096
						    <'dont_know'> when 'true' ->
							let <_cor15> =
							    call 'erl_types':'t_atom'
								('false')
							in  {Map2,_cor15}
						    %% Line 2097
						    <'pos'> when 'true' ->
							apply 'signal_guard_fail'/4
							    (_cor1, _cor6, [Type1|[Type2|[]]], _cor0)
						    ( <_cor16> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor16})
						      -| ['compiler_generated'] )
						  end
					      %% Line 2099
					      <> when 'true' ->
						  %% Line 2100
						  apply 'signal_guard_fail'/4
						      (_cor1, _cor6, [Type1|[Type2|[]]], _cor0)
					    end
				    %% Line 2102
				    <'false'> when 'true' ->
					%% Line 2103
					case _cor1 of
					  %% Line 2104
					  <'pos'> when 'true' ->
					      let <_cor19> =
						  %% Line 2105
						  call 'cerl':'type'
						      (_cor5)
					      in  let <_cor18> =
						      %% Line 2105
						      call 'cerl':'type'
							  (_cor4)
						  in  %% Line 2105
						      case <_cor19,_cor18> of
							%% Line 2106
							<'var','var'> when 'true' ->
							    let <Map3> =
								%% Line 2107
								apply 'enter_subst'/3
								    (_cor5, _cor4, Map2)
							    in  let <Map4> =
								    %% Line 2108
								    apply 'enter_type'/3
									(_cor4, Inf, Map3)
								in  let <_cor22> =
									%% Line 2109
									call 'erl_types':'t_atom'
									    ('true')
								    in  %% Line 2109
									{Map4,_cor22}
							%% Line 2110
							<'var',_cor52> when 'true' ->
							    let <Map3> =
								%% Line 2111
								apply 'enter_type'/3
								    (_cor5, Inf, Map2)
							    in  let <_cor24> =
								    %% Line 2112
								    call 'erl_types':'t_atom'
									('true')
								in  %% Line 2112
								    {Map3,_cor24}
							%% Line 2113
							<_cor53,'var'> when 'true' ->
							    let <Map3> =
								%% Line 2114
								apply 'enter_type'/3
								    (_cor4, Inf, Map2)
							    in  let <_cor26> =
								    %% Line 2115
								    call 'erl_types':'t_atom'
									('true')
								in  %% Line 2115
								    {Map3,_cor26}
							%% Line 2116
							<_cor54,_cor55> when 'true' ->
							    let <_cor27> =
								%% Line 2117
								call 'erl_types':'t_atom'
								    ('true')
							    in  %% Line 2117
								{Map2,_cor27}
						      end
					  %% Line 2119
					  <'neg'> when 'true' ->
					      let <_cor29> =
						  %% Line 2120
						  call 'erl_types':'t_atom'
						      ('false')
					      in  %% Line 2120
						  {Map2,_cor29}
					  %% Line 2121
					  <'dont_know'> when 'true' ->
					      let <_cor30> =
						  %% Line 2122
						  call 'erl_types':'t_boolean'
						      ()
					      in  %% Line 2122
						  {Map2,_cor30}
					  ( <_cor31> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor31})
					    -| ['compiler_generated'] )
					end
				    ( <_cor32> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor32})
				      -| ['compiler_generated'] )
				  end
			  -| ['compiler_generated'] )
			( <_cor51> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor7})
	    -| ['compiler_generated'] )
	end
'bind_eqeq_guard_lit_other'/6 =
    %% Line 2126
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2128
	( case _cor0 of
	    ( <( {'state',_cor33,_cor34,_cor35,_cor36,_rec22,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 2129
		  case call 'cerl':'concrete'
			   (_cor4) of
		    %% Line 2130
		    <'true'> when 'true' ->
			%% Line 2131
			case apply 'bind_guard'/5
				 (_cor3, _cor2, _cor1, 'pos', _cor0) of
			  <MT = {_cor45,Type}> when 'true' ->
			      %% Line 2132
			      case call 'erl_types':'t_is_any_atom'
				       ('true', Type, _rec22) of
				%% Line 2133
				<'true'> when 'true' ->
				    MT
				%% Line 2134
				<'false'> when 'true' ->
				    %% Line 2135
				    case apply 'bind_guard'/5
					     (_cor3, _cor2, _cor1, 'dont_know', _cor0) of
				      <{_cor46,Type0}> when 'true' ->
					  let <_cor12> =
					      %% Line 2136
					      call 'erl_types':'t_atom'
						  ('true')
					  in  %% Line 2136
					      apply 'signal_guard_fail'/4
						  ('dont_know', _cor5, [Type0|[_cor12|[]]], _cor0)
				      ( <_cor11> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor11})
					-| ['compiler_generated'] )
				    end
				( <_cor13> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor13})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor10> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor10})
			    -| ['compiler_generated'] )
			end
		    %% Line 2138
		    <'false'> when 'true' ->
			%% Line 2139
			case apply 'bind_guard'/5
				 (_cor3, _cor2, _cor1, 'neg', _cor0) of
			  <{Map1,Type}> when 'true' ->
			      %% Line 2140
			      case call 'erl_types':'t_is_any_atom'
				       ('false', Type, _rec22) of
				%% Line 2141
				<'true'> when 'true' ->
				    let <_cor15> =
					call 'erl_types':'t_atom'
					    ('true')
				    in  {Map1,_cor15}
				%% Line 2142
				<'false'> when 'true' ->
				    %% Line 2143
				    case apply 'bind_guard'/5
					     (_cor3, _cor2, _cor1, 'dont_know', _cor0) of
				      <{_cor47,Type0}> when 'true' ->
					  let <_cor17> =
					      %% Line 2144
					      call 'erl_types':'t_atom'
						  ('false')
					  in  %% Line 2144
					      apply 'signal_guard_fail'/4
						  ('dont_know', _cor5, [Type0|[_cor17|[]]], _cor0)
				      ( <_cor16> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor16})
					-| ['compiler_generated'] )
				    end
				( <_cor18> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor18})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor14> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor14})
			    -| ['compiler_generated'] )
			end
		    %% Line 2146
		    <Term> when 'true' ->
			let <LitType> =
			    %% Line 2147
			    call 'erl_types':'t_from_term'
				(Term)
			in  %% Line 2148
			    case apply 'bind_guard'/5
				     (_cor3, _cor2, _cor1, 'dont_know', _cor0) of
			      <{Map1,Type}> when 'true' ->
				  %% Line 2149
				  case call 'erl_types':'t_is_subtype'
					   (LitType, Type) of
				    %% Line 2150
				    <'false'> when 'true' ->
					apply 'signal_guard_fail'/4
					    ('dont_know', _cor5, [Type|[LitType|[]]], _cor0)
				    %% Line 2151
				    <'true'> when 'true' ->
					%% Line 2152
					case call 'cerl':'is_c_var'
						 (_cor3) of
					  %% Line 2153
					  <'true'> when 'true' ->
					      let <_cor22> =
						  apply 'enter_type'/3
						      (_cor3, LitType, Map1)
					      in  let <_cor21> =
						      call 'erl_types':'t_atom'
							  ('true')
						  in  {_cor22,_cor21}
					  %% Line 2154
					  <'false'> when 'true' ->
					      let <_cor23> =
						  call 'erl_types':'t_atom'
						      ('true')
					      in  {Map1,_cor23}
					  ( <_cor24> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor24})
					    -| ['compiler_generated'] )
					end
				    ( <_cor25> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor25})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor20> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor20})
				-| ['compiler_generated'] )
			    end
		  end
	      -| ['compiler_generated'] )
	    ( <_cor44> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'handle_guard_and'/5 =
    %% Line 2159
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2160
	case call 'cerl':'call_args'
		 (_cor4) of
	  <[Arg1|[Arg2|[]]]> when 'true' ->
	      %% Line 2161
	      ( case _cor0 of
		  ( <( {'state',_cor57,_cor58,_cor59,_cor60,_rec23,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 2162
			case _cor1 of
			  %% Line 2163
			  <'pos'> when 'true' ->
			      %% Line 2164
			      case apply 'bind_guard'/5
				       (Arg1, _cor3, _cor2, _cor1, _cor0) of
				<{Map1,Type1}> when 'true' ->
				    %% Line 2165
				    case call 'erl_types':'t_is_any_atom'
					     ('true', Type1, _rec23) of
				      %% Line 2166
				      <'false'> when 'true' ->
					  let <_cor10> =
					      call 'erl_types':'t_any'
						  ()
					  in  apply 'signal_guard_fail'/4
						  (_cor1, _cor4, [Type1|[_cor10|[]]], _cor0)
				      %% Line 2167
				      <'true'> when 'true' ->
					  %% Line 2168
					  case apply 'bind_guard'/5
						   (Arg2, Map1, _cor2, _cor1, _cor0) of
					    <{Map2,Type2}> when 'true' ->
						%% Line 2169
						case call 'erl_types':'t_is_any_atom'
							 ('true', Type2, _rec23) of
						  %% Line 2170
						  <'false'> when 'true' ->
						      apply 'signal_guard_fail'/4
							  (_cor1, _cor4, [Type1|[Type2|[]]], _cor0)
						  %% Line 2171
						  <'true'> when 'true' ->
						      let <_cor12> =
							  call 'erl_types':'t_atom'
							      ('true')
						      in  {Map2,_cor12}
						  ( <_cor13> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor13})
						    -| ['compiler_generated'] )
						end
					    ( <_cor11> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor11})
					      -| ['compiler_generated'] )
					  end
				      ( <_cor14> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor14})
					-| ['compiler_generated'] )
				    end
				( <_cor9> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor9})
				  -| ['compiler_generated'] )
			      end
			  %% Line 2174
			  <'neg'> when 'true' ->
			      let <MapJ> =
				  %% Line 2175
				  apply 'join_maps_begin'/1
				      (_cor3)
			      in  let <_cor20> =
				      %% Line 2177
				      try
					  apply 'bind_guard'/5
					      (Arg1, MapJ, _cor2, 'neg', _cor0)
				      of <_cor16> ->
					  _cor16
				      catch <_cor19,_cor18,_cor17> ->
					  case <_cor19,_cor18,_cor17> of
					    %% Line 2178
					    <'throw',{'fail',_cor69},_cor70> when 'true' ->
						apply 'bind_guard'/5
						    (Arg2, MapJ, _cor2, 'pos', _cor0)
					    ( <_cor19,_cor18,_cor17> when 'true' ->
						  primop 'raise'
						      (_cor17, _cor18)
					      -| ['compiler_generated'] )
					  end
				  in  %% Line 2176
				      case _cor20 of
					<{Map1,Type1}> when 'true' ->
					    let <_cor26> =
						%% Line 2181
						try
						    apply 'bind_guard'/5
							(Arg2, MapJ, _cor2, 'neg', _cor0)
						of <_cor22> ->
						    _cor22
						catch <_cor25,_cor24,_cor23> ->
						    case <_cor25,_cor24,_cor23> of
						      %% Line 2182
						      <'throw',{'fail',_cor71},_cor72> when 'true' ->
							  apply 'bind_guard'/5
							      (Arg1, MapJ, _cor2, 'pos', _cor0)
						      ( <_cor25,_cor24,_cor23> when 'true' ->
							    primop 'raise'
								(_cor23, _cor24)
							-| ['compiler_generated'] )
						    end
					    in  %% Line 2180
						case _cor26 of
						  <{Map2,Type2}> when 'true' ->
						      let <_cor30> =
							  %% Line 2186
							  ( case call 'erl_types':'t_is_any_atom'
								     ('false', Type1, _rec23) of
							      ( <( 'true'
								   -| ['compiler_generated'] )> when 'true' ->
								    'true'
								-| ['compiler_generated'] )
							      ( <( 'false'
								   -| ['compiler_generated'] )> when 'true' ->
								    call 'erl_types':'t_is_any_atom'
									('false', Type2, _rec23)
								-| ['compiler_generated'] )
							      ( <_cor28> when 'true' ->
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'error'
													   -| ['compiler_generated'] )
									  (( {( 'badarg'
										-| ['compiler_generated'] ),_cor28}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
						      in  %% Line 2184
							  case _cor30 of
							    %% Line 2188
							    <'true'> when 'true' ->
								let <_cor32> =
								    apply 'join_maps_end'/2
									([Map1|[Map2|[]]], MapJ)
								in  let <_cor31> =
									call 'erl_types':'t_atom'
									    ('false')
								    in  {_cor32,_cor31}
							    %% Line 2189
							    <'false'> when 'true' ->
								apply 'signal_guard_fail'/4
								    (_cor1, _cor4, [Type1|[Type2|[]]], _cor0)
							    ( <_cor33> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_cor33})
							      -| ['compiler_generated'] )
							  end
						  ( <_cor27> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor27})
						    -| ['compiler_generated'] )
						end
					( <_cor21> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor21})
					  -| ['compiler_generated'] )
				      end
			  %% Line 2191
			  <'dont_know'> when 'true' ->
			      let <MapJ> =
				  %% Line 2192
				  apply 'join_maps_begin'/1
				      (_cor3)
			      in  %% Line 2193
				  case apply 'bind_guard'/5
					   (Arg1, MapJ, _cor2, 'dont_know', _cor0) of
				    <{Map1,Type1}> when 'true' ->
					%% Line 2194
					case apply 'bind_guard'/5
						 (Arg2, MapJ, _cor2, 'dont_know', _cor0) of
					  <{Map2,Type2}> when 'true' ->
					      let <_cor37> =
						  %% Line 2195
						  call 'erl_types':'t_boolean'
						      ()
					      in  let <Bool1> =
						      %% Line 2195
						      call 'erl_types':'t_inf'
							  (Type1, _cor37)
						  in  let <_cor39> =
							  %% Line 2196
							  call 'erl_types':'t_boolean'
							      ()
						      in  let <Bool2> =
							      %% Line 2196
							      call 'erl_types':'t_inf'
								  (Type2, _cor39)
							  in  let <_cor43> =
								  %% Line 2197
								  ( case call 'erl_types':'t_is_none'
									     (Bool1) of
								      ( <( 'true'
									   -| ['compiler_generated'] )> when 'true' ->
									    'true'
									-| ['compiler_generated'] )
								      ( <( 'false'
									   -| ['compiler_generated'] )> when 'true' ->
									    call 'erl_types':'t_is_none'
										(Bool2)
									-| ['compiler_generated'] )
								      ( <_cor41> when 'true' ->
									    ( call ( 'erlang'
										     -| ['compiler_generated'] ):( 'error'
														   -| ['compiler_generated'] )
										  (( {( 'badarg'
											-| ['compiler_generated'] ),_cor41}
										     -| ['compiler_generated'] ))
									      -| ['compiler_generated'] )
									-| ['compiler_generated'] )
								    end
								    -| ['compiler_generated'] )
							      in  %% Line 2197
								  case _cor43 of
								    %% Line 2198
								    <'true'> when 'true' ->
									call 'erlang':'throw'
									    ({'fatal_fail','none'})
								    %% Line 2199
								    <'false'> when 'true' ->
									let <NewMap> =
									    %% Line 2200
									    apply 'join_maps_end'/2
										([Map1|[Map2|[]]], MapJ)
									in  let <_cor46> =
										%% Line 2202
										call 'erl_types':'t_atom_vals'
										    (Bool1, _rec23)
									    in  let <_cor45> =
										    %% Line 2202
										    call 'erl_types':'t_atom_vals'
											(Bool2, _rec23)
										in  let <_cor48> =
											%% Line 2202
											case <_cor46,_cor45> of
											  %% Line 2203
											  <['true'],['true']> when 'true' ->
											      call 'erl_types':'t_atom'
												  ('true')
											  %% Line 2204
											  <['false'],_cor73> when 'true' ->
											      call 'erl_types':'t_atom'
												  ('false')
											  %% Line 2205
											  <_cor74,['false']> when 'true' ->
											      call 'erl_types':'t_atom'
												  ('false')
											  %% Line 2206
											  <'unknown',_cor75> when 'true' ->
											      %% Line 2207
											      apply 'signal_guard_fail'/4
												  (_cor1, _cor4, [Type1|[Type2|[]]], _cor0)
											  %% Line 2208
											  <_cor76,'unknown'> when 'true' ->
											      %% Line 2209
											      apply 'signal_guard_fail'/4
												  (_cor1, _cor4, [Type1|[Type2|[]]], _cor0)
											  %% Line 2210
											  <_cor77,_cor78> when 'true' ->
											      call 'erl_types':'t_boolean'
												  ()
											end
										    in  %% Line 2213
											{NewMap,_cor48}
								    ( <_cor50> when 'true' ->
									  primop 'match_fail'
									      ({'case_clause',_cor50})
								      -| ['compiler_generated'] )
								  end
					  ( <_cor36> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor36})
					    -| ['compiler_generated'] )
					end
				    ( <_cor35> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor35})
				      -| ['compiler_generated'] )
				  end
			  ( <_cor51> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor51})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor68> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'handle_guard_or'/5 =
    %% Line 2217
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2218
	case call 'cerl':'call_args'
		 (_cor4) of
	  <[Arg1|[Arg2|[]]]> when 'true' ->
	      %% Line 2219
	      ( case _cor0 of
		  ( <( {'state',_cor62,_cor63,_cor64,_cor65,_rec24,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 2220
			case _cor1 of
			  %% Line 2221
			  <'pos'> when 'true' ->
			      let <MapJ> =
				  %% Line 2222
				  apply 'join_maps_begin'/1
				      (_cor3)
			      in  let <_cor14> =
				      %% Line 2224
				      try
					  apply 'bind_guard'/5
					      (Arg1, MapJ, _cor2, 'pos', _cor0)
				      of <_cor10> ->
					  _cor10
				      catch <_cor13,_cor12,_cor11> ->
					  case <_cor13,_cor12,_cor11> of
					    %% Line 2226
					    <'throw',{'fail',_cor74},_cor75> when 'true' ->
						apply 'bind_guard'/5
						    (Arg1, MapJ, _cor2, 'dont_know', _cor0)
					    ( <_cor13,_cor12,_cor11> when 'true' ->
						  primop 'raise'
						      (_cor11, _cor12)
					      -| ['compiler_generated'] )
					  end
				  in  %% Line 2223
				      case _cor14 of
					<{Map1,Bool1}> when 'true' ->
					    let <_cor20> =
						%% Line 2229
						try
						    apply 'bind_guard'/5
							(Arg2, MapJ, _cor2, 'pos', _cor0)
						of <_cor16> ->
						    _cor16
						catch <_cor19,_cor18,_cor17> ->
						    case <_cor19,_cor18,_cor17> of
						      %% Line 2231
						      <'throw',{'fail',_cor76},_cor77> when 'true' ->
							  apply 'bind_guard'/5
							      (Arg2, MapJ, _cor2, 'dont_know', _cor0)
						      ( <_cor19,_cor18,_cor17> when 'true' ->
							    primop 'raise'
								(_cor17, _cor18)
							-| ['compiler_generated'] )
						    end
					    in  %% Line 2228
						case _cor20 of
						  <{Map2,Bool2}> when 'true' ->
						      let <_cor25> =
							  %% Line 2235
							  ( case call 'erl_types':'t_is_any_atom'
								     ('true', Bool1, _rec24) of
							      ( <( 'true'
								   -| ['compiler_generated'] )> when 'true' ->
								    call 'erl_types':'t_is_boolean'
									(Bool2, _rec24)
								-| ['compiler_generated'] )
							      ( <( 'false'
								   -| ['compiler_generated'] )> when 'true' ->
								    'false'
								-| ['compiler_generated'] )
							      ( <_cor23> when 'true' ->
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'error'
													   -| ['compiler_generated'] )
									  (( {( 'badarg'
										-| ['compiler_generated'] ),_cor23}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
						      in  let <_cor29> =
							      %% Line 2236
							      ( case _cor25 of
								  ( <( 'true'
								       -| ['compiler_generated'] )> when 'true' ->
									'true'
								    -| ['compiler_generated'] )
								  ( <( 'false'
								       -| ['compiler_generated'] )> when 'true' ->
									%% Line 2238
									( case call 'erl_types':'t_is_any_atom'
										   ('true', Bool2, _rec24) of
									    ( <( 'true'
										 -| ['compiler_generated'] )> when 'true' ->
										  call 'erl_types':'t_is_boolean'
										      (Bool1, _rec24)
									      -| ['compiler_generated'] )
									    ( <( 'false'
										 -| ['compiler_generated'] )> when 'true' ->
										  'false'
									      -| ['compiler_generated'] )
									    ( <_cor26> when 'true' ->
										  ( call ( 'erlang'
											   -| ['compiler_generated'] ):( 'error'
															 -| ['compiler_generated'] )
											(( {( 'badarg'
											      -| ['compiler_generated'] ),_cor26}
											   -| ['compiler_generated'] ))
										    -| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									  end
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								  ( <_cor22> when 'true' ->
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'error'
													       -| ['compiler_generated'] )
									      (( {( 'badarg'
										    -| ['compiler_generated'] ),_cor22}
										 -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								end
								-| ['compiler_generated'] )
							  in  %% Line 2233
							      case _cor29 of
								%% Line 2240
								<'true'> when 'true' ->
								    let <_cor31> =
									apply 'join_maps_end'/2
									    ([Map1|[Map2|[]]], MapJ)
								    in  let <_cor30> =
									    call 'erl_types':'t_atom'
										('true')
									in  {_cor31,_cor30}
								%% Line 2241
								<'false'> when 'true' ->
								    apply 'signal_guard_fail'/4
									(_cor1, _cor4, [Bool1|[Bool2|[]]], _cor0)
								( <_cor32> when 'true' ->
								      primop 'match_fail'
									  ({'case_clause',_cor32})
								  -| ['compiler_generated'] )
							      end
						  ( <_cor21> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor21})
						    -| ['compiler_generated'] )
						end
					( <_cor15> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor15})
					  -| ['compiler_generated'] )
				      end
			  %% Line 2243
			  <'neg'> when 'true' ->
			      %% Line 2244
			      case apply 'bind_guard'/5
				       (Arg1, _cor3, _cor2, 'neg', _cor0) of
				<{Map1,Type1}> when 'true' ->
				    %% Line 2245
				    case call 'erl_types':'t_is_any_atom'
					     ('false', Type1, _rec24) of
				      %% Line 2246
				      <'false'> when 'true' ->
					  let <_cor34> =
					      call 'erl_types':'t_any'
						  ()
					  in  apply 'signal_guard_fail'/4
						  (_cor1, _cor4, [Type1|[_cor34|[]]], _cor0)
				      %% Line 2247
				      <'true'> when 'true' ->
					  %% Line 2248
					  case apply 'bind_guard'/5
						   (Arg2, Map1, _cor2, 'neg', _cor0) of
					    <{Map2,Type2}> when 'true' ->
						%% Line 2249
						case call 'erl_types':'t_is_any_atom'
							 ('false', Type2, _rec24) of
						  %% Line 2250
						  <'false'> when 'true' ->
						      apply 'signal_guard_fail'/4
							  (_cor1, _cor4, [Type1|[Type2|[]]], _cor0)
						  %% Line 2251
						  <'true'> when 'true' ->
						      let <_cor36> =
							  call 'erl_types':'t_atom'
							      ('false')
						      in  {Map2,_cor36}
						  ( <_cor37> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor37})
						    -| ['compiler_generated'] )
						end
					    ( <_cor35> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor35})
					      -| ['compiler_generated'] )
					  end
				      ( <_cor38> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor38})
					-| ['compiler_generated'] )
				    end
				( <_cor33> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor33})
				  -| ['compiler_generated'] )
			      end
			  %% Line 2254
			  <'dont_know'> when 'true' ->
			      let <MapJ> =
				  %% Line 2255
				  apply 'join_maps_begin'/1
				      (_cor3)
			      in  %% Line 2256
				  case apply 'bind_guard'/5
					   (Arg1, MapJ, _cor2, 'dont_know', _cor0) of
				    <{Map1,Type1}> when 'true' ->
					%% Line 2257
					case apply 'bind_guard'/5
						 (Arg2, MapJ, _cor2, 'dont_know', _cor0) of
					  <{Map2,Type2}> when 'true' ->
					      let <_cor42> =
						  %% Line 2258
						  call 'erl_types':'t_boolean'
						      ()
					      in  let <Bool1> =
						      %% Line 2258
						      call 'erl_types':'t_inf'
							  (Type1, _cor42)
						  in  let <_cor44> =
							  %% Line 2259
							  call 'erl_types':'t_boolean'
							      ()
						      in  let <Bool2> =
							      %% Line 2259
							      call 'erl_types':'t_inf'
								  (Type2, _cor44)
							  in  let <_cor48> =
								  %% Line 2260
								  ( case call 'erl_types':'t_is_none'
									     (Bool1) of
								      ( <( 'true'
									   -| ['compiler_generated'] )> when 'true' ->
									    'true'
									-| ['compiler_generated'] )
								      ( <( 'false'
									   -| ['compiler_generated'] )> when 'true' ->
									    call 'erl_types':'t_is_none'
										(Bool2)
									-| ['compiler_generated'] )
								      ( <_cor46> when 'true' ->
									    ( call ( 'erlang'
										     -| ['compiler_generated'] ):( 'error'
														   -| ['compiler_generated'] )
										  (( {( 'badarg'
											-| ['compiler_generated'] ),_cor46}
										     -| ['compiler_generated'] ))
									      -| ['compiler_generated'] )
									-| ['compiler_generated'] )
								    end
								    -| ['compiler_generated'] )
							      in  %% Line 2260
								  case _cor48 of
								    %% Line 2261
								    <'true'> when 'true' ->
									call 'erlang':'throw'
									    ({'fatal_fail','none'})
								    %% Line 2262
								    <'false'> when 'true' ->
									let <NewMap> =
									    %% Line 2263
									    apply 'join_maps_end'/2
										([Map1|[Map2|[]]], MapJ)
									in  let <_cor51> =
										%% Line 2265
										call 'erl_types':'t_atom_vals'
										    (Bool1, _rec24)
									    in  let <_cor50> =
										    %% Line 2265
										    call 'erl_types':'t_atom_vals'
											(Bool2, _rec24)
										in  let <_cor53> =
											%% Line 2265
											case <_cor51,_cor50> of
											  %% Line 2266
											  <['false'],['false']> when 'true' ->
											      call 'erl_types':'t_atom'
												  ('false')
											  %% Line 2267
											  <['true'],_cor78> when 'true' ->
											      call 'erl_types':'t_atom'
												  ('true')
											  %% Line 2268
											  <_cor79,['true']> when 'true' ->
											      call 'erl_types':'t_atom'
												  ('true')
											  %% Line 2269
											  <'unknown',_cor80> when 'true' ->
											      %% Line 2270
											      apply 'signal_guard_fail'/4
												  (_cor1, _cor4, [Type1|[Type2|[]]], _cor0)
											  %% Line 2271
											  <_cor81,'unknown'> when 'true' ->
											      %% Line 2272
											      apply 'signal_guard_fail'/4
												  (_cor1, _cor4, [Type1|[Type2|[]]], _cor0)
											  %% Line 2273
											  <_cor82,_cor83> when 'true' ->
											      call 'erl_types':'t_boolean'
												  ()
											end
										    in  %% Line 2275
											{NewMap,_cor53}
								    ( <_cor55> when 'true' ->
									  primop 'match_fail'
									      ({'case_clause',_cor55})
								      -| ['compiler_generated'] )
								  end
					  ( <_cor41> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor41})
					    -| ['compiler_generated'] )
					end
				    ( <_cor40> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor40})
				      -| ['compiler_generated'] )
				  end
			  ( <_cor56> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor56})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor73> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'handle_guard_not'/5 =
    %% Line 2279
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2280
	case call 'cerl':'call_args'
		 (_cor4) of
	  <[Arg|[]]> when 'true' ->
	      %% Line 2281
	      ( case _cor0 of
		  ( <( {'state',_cor30,_cor31,_cor32,_cor33,_rec25,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 2282
			case _cor1 of
			  %% Line 2283
			  <'neg'> when 'true' ->
			      %% Line 2284
			      case apply 'bind_guard'/5
				       (Arg, _cor3, _cor2, 'pos', _cor0) of
				<{Map1,Type}> when 'true' ->
				    %% Line 2285
				    case call 'erl_types':'t_is_any_atom'
					     ('true', Type, _rec25) of
				      %% Line 2286
				      <'true'> when 'true' ->
					  let <_cor10> =
					      call 'erl_types':'t_atom'
						  ('false')
					  in  {Map1,_cor10}
				      %% Line 2287
				      <'false'> when 'true' ->
					  %% Line 2288
					  case apply 'bind_guard'/5
						   (Arg, _cor3, _cor2, _cor1, _cor0) of
					    <{_cor42,Type0}> when 'true' ->
						%% Line 2289
						apply 'signal_guard_fail'/4
						    (_cor1, _cor4, [Type0|[]], _cor0)
					    ( <_cor11> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor11})
					      -| ['compiler_generated'] )
					  end
				      ( <_cor12> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor12})
					-| ['compiler_generated'] )
				    end
				( <_cor9> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor9})
				  -| ['compiler_generated'] )
			      end
			  %% Line 2291
			  <'pos'> when 'true' ->
			      %% Line 2292
			      case apply 'bind_guard'/5
				       (Arg, _cor3, _cor2, 'neg', _cor0) of
				<{Map1,Type}> when 'true' ->
				    %% Line 2293
				    case call 'erl_types':'t_is_any_atom'
					     ('false', Type, _rec25) of
				      %% Line 2294
				      <'true'> when 'true' ->
					  let <_cor14> =
					      call 'erl_types':'t_atom'
						  ('true')
					  in  {Map1,_cor14}
				      %% Line 2295
				      <'false'> when 'true' ->
					  %% Line 2296
					  case apply 'bind_guard'/5
						   (Arg, _cor3, _cor2, _cor1, _cor0) of
					    <{_cor43,Type0}> when 'true' ->
						%% Line 2297
						apply 'signal_guard_fail'/4
						    (_cor1, _cor4, [Type0|[]], _cor0)
					    ( <_cor15> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor15})
					      -| ['compiler_generated'] )
					  end
				      ( <_cor16> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor16})
					-| ['compiler_generated'] )
				    end
				( <_cor13> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor13})
				  -| ['compiler_generated'] )
			      end
			  %% Line 2299
			  <'dont_know'> when 'true' ->
			      %% Line 2300
			      case apply 'bind_guard'/5
				       (Arg, _cor3, _cor2, 'dont_know', _cor0) of
				<{Map1,Type}> when 'true' ->
				    let <_cor18> =
					%% Line 2301
					call 'erl_types':'t_boolean'
					    ()
				    in  let <Bool> =
					    %% Line 2301
					    call 'erl_types':'t_inf'
						(Type, _cor18)
					in  %% Line 2302
					    case call 'erl_types':'t_is_none'
						     (Bool) of
					      %% Line 2303
					      <'true'> when 'true' ->
						  call 'erlang':'throw'
						      ({'fatal_fail','none'})
					      %% Line 2304
					      <'false'> when 'true' ->
						  %% Line 2305
						  case call 'erl_types':'t_atom_vals'
							   (Bool, _rec25) of
						    %% Line 2306
						    <['true']> when 'true' ->
							let <_cor20> =
							    call 'erl_types':'t_atom'
								('false')
							in  {Map1,_cor20}
						    %% Line 2307
						    <['false']> when 'true' ->
							let <_cor21> =
							    call 'erl_types':'t_atom'
								('true')
							in  {Map1,_cor21}
						    %% Line 2308
						    <[_cor44|[_cor45|[]]]> when 'true' ->
							{Map1,Bool}
						    %% Line 2309
						    <'unknown'> when 'true' ->
							apply 'signal_guard_fail'/4
							    (_cor1, _cor4, [Type|[]], _cor0)
						    ( <_cor22> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor22})
						      -| ['compiler_generated'] )
						  end
					      ( <_cor23> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor23})
						-| ['compiler_generated'] )
					    end
				( <_cor17> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor17})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor24> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor24})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor41> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'bind_guard_list'/5 =
    %% Line 2314
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2315
	apply 'bind_guard_list'/6
	    (_cor4, _cor3, _cor2, _cor1, _cor0, [])
'bind_guard_list'/6 =
    %% Line 2317
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[G|Gs],Map,Env,Eval,State,Acc> when 'true' ->
	      %% Line 2318
	      case apply 'bind_guard'/5
		       (G, Map, Env, Eval, State) of
		<{Map1,T}> when 'true' ->
		    %% Line 2319
		    apply 'bind_guard_list'/6
			(Gs, Map1, Env, Eval, State, [T|Acc])
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2320
	  <[],Map,_X_Env,_X_Eval,_X_State,Acc> when 'true' ->
	      let <_cor7> =
		  %% Line 2321
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 2321
		  {Map,_cor7}
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'bind_guard_list',6}}] )
	    -| ['compiler_generated'] )
	end
'signal_guard_fail'/4 =
    %% Line 2328
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2329
	apply 'signal_guard_failure'/5
	    (_cor3, _cor2, _cor1, 'fail', _cor0)
'signal_guard_fatal_fail'/4 =
    %% Line 2334
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2335
	apply 'signal_guard_failure'/5
	    (_cor3, _cor2, _cor1, 'fatal_fail', _cor0)
'signal_guard_failure'/5 =
    %% Line 2337
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Args> =
	    %% Line 2338
	    call 'cerl':'call_args'
		(_cor3)
	in  let <_cor6> =
		%% Line 2339
		call 'cerl':'call_name'
		    (_cor3)
	    in  let <F> =
		    %% Line 2339
		    call 'cerl':'atom_val'
			(_cor6)
		in  let <_cor9> =
			%% Line 2340
			call 'cerl':'call_module'
			    (_cor3)
		    in  let <_cor10> =
			    %% Line 2340
			    call 'cerl':'atom_val'
				(_cor9)
			in  let <_cor8> =
				%% Line 2340
				call 'erlang':'length'
				    (Args)
			    in  %% Line 2340
				case <_cor10,F,_cor8> of
				  <M,_cor35,A>
				      when call 'erlang':'=:='
					    (_cor35,
					     F) ->
				      let <MFA> = {M,_cor35,A}
				      in  %% Line 2341
					  ( case _cor0 of
					      ( <( {'state',_cor36,_cor37,_cor38,_cor39,_rec26,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46}
						   -| ['compiler_generated'] )> when 'true' ->
						    let <Kind,XInfo> =
							%% Line 2343
							case call 'erl_bif_types':'opaque_args'
								 (M, F, A, _cor2, _rec26) of
							  %% Line 2344
							  <[]> when 'true' ->
							      let <_cor16> =
								  %% Line 2345
								  case _cor4 of
								    %% Line 2346
								    <'neg'> when 'true' ->
									'neg_guard_fail'
								    %% Line 2347
								    <'pos'> when 'true' ->
									'guard_fail'
								    %% Line 2348
								    <'dont_know'> when 'true' ->
									'guard_fail'
								    ( <_cor15> when 'true' ->
									  primop 'match_fail'
									      ({'case_clause',_cor15})
								      -| ['compiler_generated'] )
								  end
							      in  <_cor16,%% Line 2350
									  []>
							  %% Line 2351
							  <Ns> when 'true' ->
							      <'opaque_guard',[Ns|[]]>
							end
						    in  let <_cor27> =
							    %% Line 2354
							    case apply 'is_infix_op'/1
								     (MFA) of
							      %% Line 2355
							      <'true'> when 'true' ->
								  %% Line 2356
								  case _cor2 of
								    <[ArgType1|[ArgType2|[]]]> when 'true' ->
									%% Line 2357
									case Args of
									  <[Arg1|[Arg2|[]]]> when 'true' ->
									      let <_cor22> =
										  %% Line 2358
										  apply 'format_args_1'/3
										      ([Arg1|[]], [ArgType1|[]], _cor0)
									      in  let <_cor23> =
										      %% Line 2359
										      call 'erlang':'atom_to_list'
											  (F)
										  in  let <_cor24> =
											  %% Line 2360
											  apply 'format_args_1'/3
											      ([Arg2|[]], [ArgType2|[]], _cor0)
										      in  %% Line 2358
											  [_cor22|%% Line 2359
												  [_cor23|%% Line 2360
													  [_cor24|XInfo]]]
									  ( <_cor21> when 'true' ->
										primop 'match_fail'
										    ({'badmatch',_cor21})
									    -| ['compiler_generated'] )
									end
								    ( <_cor20> when 'true' ->
									  primop 'match_fail'
									      ({'badmatch',_cor20})
								      -| ['compiler_generated'] )
								  end
							      %% Line 2361
							      <'false'> when 'true' ->
								  let <_cor25> =
								      %% Line 2362
								      apply 'format_args'/3
									  (Args, _cor2, _cor0)
								  in  %% Line 2362
								      [F|[_cor25|[]]]
							      ( <_cor26> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_cor26})
								-| ['compiler_generated'] )
							    end
							in  let <Msg> = {%% Line 2364
								 Kind,_cor27}
							    in  %% Line 2365
								call 'erlang':'throw'
								    ({_cor1,{_cor3,Msg}})
						-| ['compiler_generated'] )
					      ( <_cor47> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','state'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				  ( <_fol304,_fol305,_fol306> when 'true' ->
					let <_cor11> = {_fol304,_fol305,_fol306}
					in  primop 'match_fail'
						({'badmatch',_cor11})
				    -| ['compiler_generated'] )
				end
'is_infix_op'/1 =
    %% Line 2367
    fun (_cor0) ->
	case _cor0 of
	  <{'erlang','=:=',2}> when 'true' ->
	      'true'
	  %% Line 2368
	  <{'erlang','==',2}> when 'true' ->
	      'true'
	  %% Line 2369
	  <{'erlang','=/=',2}> when 'true' ->
	      'true'
	  %% Line 2370
	  <{'erlang','=/',2}> when 'true' ->
	      'true'
	  %% Line 2371
	  <{'erlang','<',2}> when 'true' ->
	      'true'
	  %% Line 2372
	  <{'erlang','=<',2}> when 'true' ->
	      'true'
	  %% Line 2373
	  <{'erlang','>',2}> when 'true' ->
	      'true'
	  %% Line 2374
	  <{'erlang','>=',2}> when 'true' ->
	      'true'
	  %% Line 2375
	  <{M,F,A}>
	      when try
		    let <_cor1> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor2> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor3> =
				%% Line 2376
				call 'erlang':'is_integer'
				    (A)
			    in  let <_cor4> =
				    %% Line 2376
				    call 'erlang':'=<'
					(0, A)
				in  let <_cor5> =
					%% Line 2376
					call 'erlang':'=<'
					    (A, 255)
				    in  let <_cor6> =
					    call 'erlang':'and'
						(_cor4, _cor5)
					in  let <_cor7> =
						call 'erlang':'and'
						    (_cor3, _cor6)
					    in  let <_cor8> =
						    call 'erlang':'and'
							(_cor2, _cor7)
						in  call 'erlang':'and'
							(_cor1, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2376
	      'false'
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'is_infix_op',1}}] )
	    -| ['compiler_generated'] )
	end
'bif_args'/3 =
    %% Line 2378
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2379
	case call 'erl_bif_types':'arg_types'
		 (_cor2, _cor1, _cor0) of
	  %% Line 2380
	  <'unknown'> when 'true' ->
	      let <_cor3> =
		  call 'erl_types':'t_any'
		      ()
	      in  call 'lists':'duplicate'
		      (_cor0, _cor3)
	  %% Line 2381
	  <List> when 'true' ->
	      List
	end
'bind_guard_case_clauses'/6 =
    %% Line 2384
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Clauses1> =
	    %% Line 2385
	    apply 'filter_fail_clauses'/1
		(_cor4)
	in  let <Map> =
		%% Line 2386
		apply 'join_maps_begin'/1
		    (_cor3)
	    in  %% Line 2387
		case apply 'bind_guard'/5
			 (_cor5, Map, _cor2, 'dont_know', _cor0) of
		  <{GenMap,GenArgType}> when 'true' ->
		      let <_cor9> =
			  %% Line 2389
			  call 'erl_types':'t_none'
			      ()
		      in  %% Line 2388
			  apply 'bind_guard_case_clauses'/10
			      (GenArgType, GenMap, _cor5, Clauses1, Map, _cor2, _cor1, _cor9, %% Line 2389
											      [], _cor0)
		  ( <_cor8> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor8})
		    -| ['compiler_generated'] )
		end
'filter_fail_clauses'/1 =
    %% Line 2391
    fun (_cor0) ->
	case _cor0 of
	  <[Clause|Left]> when 'true' ->
	      let <_cor1> =
		  %% Line 2392
		  call 'cerl':'clause_pats'
		      (Clause)
	      in  %% Line 2392
		  case <> of
		    %% Line 2393
		    <>
			when call 'erlang':'=:='
			      (_cor1,
			       []) ->
			let <Body> =
			    %% Line 2394
			    call 'cerl':'clause_body'
				(Clause)
			in  let <_cor6> =
				%% Line 2395
				( case call 'cerl':'is_literal'
					   (Body) of
				    ( <( 'true'
					 -| ['compiler_generated'] )> when 'true' ->
					  let <_cor4> =
					      call 'cerl':'concrete'
						  (Body)
					  in  call 'erlang':'=:='
						  (_cor4, 'fail')
				      -| ['compiler_generated'] )
				    ( <( 'false'
					 -| ['compiler_generated'] )> when 'true' ->
					  'false'
				      -| ['compiler_generated'] )
				    ( <_cor3> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {( 'badarg'
						      -| ['compiler_generated'] ),_cor3}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    in  %% Line 2395
				case _cor6 of
				  %% Line 2396
				  <'true'> when 'true' ->
				      apply 'filter_fail_clauses'/1
					  (Left)
				  %% Line 2397
				  <'false'> when 'true' ->
				      let <_cor7> =
					  apply 'filter_fail_clauses'/1
					      (Left)
				      in  [Clause|_cor7]
				  ( <_cor8> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor8})
				    -| ['compiler_generated'] )
				end
		    %% Line 2399
		    <> when 'true' ->
			let <_cor9> =
			    %% Line 2400
			    apply 'filter_fail_clauses'/1
				(Left)
			in  %% Line 2400
			    [Clause|_cor9]
		  end
	  %% Line 2402
	  <[]> when 'true' ->
	      %% Line 2403
	      []
	  ( <_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11})
		  -| [{'function_name',{'filter_fail_clauses',1}}] )
	    -| ['compiler_generated'] )
	end
'bind_guard_case_clauses'/10 =
    %% Line 2405
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <GenArgType,GenMap,ArgExpr,[Clause|Left],%% Line 2406
						   Map,%% Line 2406
						       Env,%% Line 2406
							   Eval,%% Line 2406
								AccType,%% Line 2406
									AccMaps,%% Line 2406
										State> when 'true' ->
	      let <Pats> =
		  %% Line 2407
		  call 'cerl':'clause_pats'
		      (Clause)
	      in  let <_cor18> =
		      %% Line 2409
		      case Pats of
			%% Line 2410
			<[Pat|[]]> when 'true' ->
			    %% Line 2411
			    case call 'cerl':'is_literal'
				     (Pat) of
			      %% Line 2412
			      <'true'> when 'true' ->
				  %% Line 2413
				  try
				      %% Line 2414
				      case call 'cerl':'concrete'
					       (Pat) of
					%% Line 2415
					<'true'> when 'true' ->
					    apply 'bind_guard'/5
						(ArgExpr, Map, Env, 'pos', State)
					%% Line 2416
					<'false'> when 'true' ->
					    apply 'bind_guard'/5
						(ArgExpr, Map, Env, 'neg', State)
					%% Line 2417
					<_cor71> when 'true' ->
					    {GenMap,GenArgType}
				      end
				  of <_cor12> ->
				      _cor12
				  catch <_cor15,_cor14,_cor13> ->
				      case <_cor15,_cor14,_cor13> of
					%% Line 2420
					<'throw',{'fail',_cor72},_cor73> when 'true' ->
					    {'none',GenArgType}
					( <_cor15,_cor14,_cor13> when 'true' ->
					      primop 'raise'
						  (_cor13, _cor14)
					  -| ['compiler_generated'] )
				      end
			      %% Line 2422
			      <'false'> when 'true' ->
				  %% Line 2423
				  {GenMap,GenArgType}
			      ( <_cor16> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor16})
				-| ['compiler_generated'] )
			    end
			%% Line 2425
			<_cor74> when 'true' ->
			    {GenMap,GenArgType}
		      end
		  in  %% Line 2408
		      case _cor18 of
			<{NewMap0,ArgType}> when 'true' ->
			    let <_cor31> =
				%% Line 2428
				case <> of
				  %% Line 2429
				  <>
				      when call 'erlang':'=:='
					    (Pats,
					     []) ->
				      NewMap0
				  %% Line 2430
				  <> when 'true' ->
				      %% Line 2431
				      case call 'erl_types':'t_is_none'
					       (ArgType) of
					%% Line 2432
					<'true'> when 'true' ->
					    'none'
					%% Line 2433
					<'false'> when 'true' ->
					    let <_cor26> =
						%% Line 2434
						case call 'erl_types':'t_is_any'
							 (ArgType) of
						  %% Line 2435
						  <'true'> when 'true' ->
						      let <Any> =
							  call 'erl_types':'t_any'
							      ()
						      in  ( letrec
								'lc$^0'/1 =
								    fun (_cor23) ->
									case _cor23 of
									  <[_cor75|_cor22]> when 'true' ->
									      let <_cor24> =
										  apply 'lc$^0'/1
										      (_cor22)
									      in  ( [Any|_cor24]
										    -| ['compiler_generated'] )
									  <[]> when 'true' ->
									      []
									  ( <_cor23> when 'true' ->
										( primop 'match_fail'
										      ({'function_clause',_cor23})
										  -| [{'function_name',{'lc$^0',1}}] )
									    -| ['compiler_generated'] )
									end
							    in  apply 'lc$^0'/1
								    (Pats)
							    -| ['list_comprehension'] )
						  %% Line 2436
						  <'false'> when 'true' ->
						      call 'erl_types':'t_to_tlist'
							  (ArgType)
						  ( <_cor25> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor25})
						    -| ['compiler_generated'] )
						end
					    in  %% Line 2438
						case apply 'bind_pat_vars'/5
							 (Pats, _cor26, [], NewMap0, State) of
						  %% Line 2439
						  <{'error',_cor76,_cor77,_cor78,_cor79}> when 'true' ->
						      'none'
						  %% Line 2440
						  <{PatMap,_X_PatTypes}> when 'true' ->
						      PatMap
						  ( <_cor28> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor28})
						    -| ['compiler_generated'] )
						end
					( <_cor29> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor29})
					  -| ['compiler_generated'] )
				      end
				end
			    in  let <Guard> =
				    %% Line 2444
				    call 'cerl':'clause_guard'
					(Clause)
				in  let <GenPatType> =
					%% Line 2445
					call 'dialyzer_typesig':'get_safe_underapprox'
					    (Pats, Guard)
				    in  let <NewGenArgType> =
					    %% Line 2446
					    call 'erl_types':'t_subtract'
						(GenArgType, GenPatType)
					in  let <_cor38> =
						%% Line 2447
						( case <> of
						    ( <>
							  when call 'erlang':'=:='
								(_cor31,
								 'none') ->
							  'true'
						      -| ['compiler_generated'] )
						    ( <> when 'true' ->
							  call 'erl_types':'t_is_none'
							      (GenArgType)
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    in  %% Line 2447
						case _cor38 of
						  %% Line 2448
						  <'true'> when 'true' ->
						      %% Line 2449
						      apply 'bind_guard_case_clauses'/10
							  (NewGenArgType, GenMap, ArgExpr, Left, Map, Env, %% Line 2450
													   Eval, %% Line 2450
														 AccType, %% Line 2450
															  AccMaps, %% Line 2450
																   State)
						  %% Line 2451
						  <'false'> when 'true' ->
						      let <_cor56> =
							  %% Line 2453
							  try
							      %% Line 2454
							      case apply 'bind_guard'/5
								       (Guard, _cor31, Env, 'pos', State) of
								<{NewMap2,GuardType}> when 'true' ->
								    let <_cor40> =
									%% Line 2455
									call 'erl_types':'t_atom'
									    ('true')
								    in  let <_cor41> =
									    %% Line 2455
									    call 'erl_types':'t_inf'
										(_cor40, GuardType)
									in  do  %% Line 2455
										case call 'erl_types':'t_is_none'
											 (_cor41) of
										  %% Line 2456
										  <'true'> when 'true' ->
										      call 'erlang':'throw'
											  ({'fail','none'})
										  %% Line 2457
										  <'false'> when 'true' ->
										      'ok'
										  ( <_cor42> when 'true' ->
											primop 'match_fail'
											    ({'case_clause',_cor42})
										    -| ['compiler_generated'] )
										end
										let <_cor43> =
										    %% Line 2459
										    call 'cerl':'clause_body'
											(Clause)
										in  %% Line 2459
										    case apply 'bind_guard'/5
											     (_cor43, NewMap2, %% Line 2460
													       Env, %% Line 2460
														    Eval, %% Line 2460
															  State) of
										      <{NewMap3,CType}> when 'true' ->
											  %% Line 2461
											  ( case State of
											      ( <( {'state',_cor80,_cor81,_cor82,_cor83,_rec27,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90}
												   -| ['compiler_generated'] )> when 'true' ->
												    do  %% Line 2462
													case Eval of
													  %% Line 2463
													  <'pos'> when 'true' ->
													      %% Line 2464
													      case call 'erl_types':'t_is_any_atom'
														       ('true', CType, _rec27) of
														%% Line 2465
														<'true'> when 'true' ->
														    'ok'
														%% Line 2466
														<'false'> when 'true' ->
														    call 'erlang':'throw'
															({'fail','none'})
														( <_cor48> when 'true' ->
														      primop 'match_fail'
															  ({'case_clause',_cor48})
														  -| ['compiler_generated'] )
													      end
													  %% Line 2468
													  <'neg'> when 'true' ->
													      %% Line 2469
													      case call 'erl_types':'t_is_any_atom'
														       ('false', CType, _rec27) of
														%% Line 2470
														<'true'> when 'true' ->
														    'ok'
														%% Line 2471
														<'false'> when 'true' ->
														    call 'erlang':'throw'
															({'fail','none'})
														( <_cor49> when 'true' ->
														      primop 'match_fail'
															  ({'case_clause',_cor49})
														  -| ['compiler_generated'] )
													      end
													  %% Line 2473
													  <'dont_know'> when 'true' ->
													      'ok'
													  ( <_cor50> when 'true' ->
														primop 'match_fail'
														    ({'case_clause',_cor50})
													    -| ['compiler_generated'] )
													end
													let <_cor51> =
													    %% Line 2476
													    call 'erl_types':'t_sup'
														(AccType, CType)
													in  %% Line 2476
													    {_cor51,[NewMap3|AccMaps]}
												-| ['compiler_generated'] )
											      ( <_cor91> when 'true' ->
												    ( call ( 'erlang'
													     -| ['compiler_generated'] ):( 'error'
																	   -| ['compiler_generated'] )
													  (( {'badrecord','state'}
													     -| ['compiler_generated'] ))
												      -| ['compiler_generated'] )
												-| ['compiler_generated'] )
											    end
											    -| ['compiler_generated'] )
										      ( <_cor44> when 'true' ->
											    primop 'match_fail'
												({'badmatch',_cor44})
											-| ['compiler_generated'] )
										    end
								( <_cor39> when 'true' ->
								      primop 'match_fail'
									  ({'badmatch',_cor39})
								  -| ['compiler_generated'] )
							      end
							  of <_cor52> ->
							      _cor52
							  catch <_cor55,_cor54,_cor53> ->
							      case <_cor55,_cor54,_cor53> of
								%% Line 2478
								<'throw',{'fail',_X_What},_cor92> when 'true' ->
								    {AccType,AccMaps}
								( <_cor55,_cor54,_cor53> when 'true' ->
								      primop 'raise'
									  (_cor53, _cor54)
								  -| ['compiler_generated'] )
							      end
						      in  %% Line 2452
							  case _cor56 of
							    <{NewAccType,NewAccMaps}> when 'true' ->
								%% Line 2480
								apply 'bind_guard_case_clauses'/10
								    (NewGenArgType, GenMap, ArgExpr, Left, Map, Env, %% Line 2481
														     Eval, %% Line 2481
															   NewAccType, %% Line 2481
																       NewAccMaps, %% Line 2481
																		   State)
							    ( <_cor57> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_cor57})
							      -| ['compiler_generated'] )
							  end
						  ( <_cor58> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor58})
						    -| ['compiler_generated'] )
						end
			( <_cor19> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor19})
			  -| ['compiler_generated'] )
		      end
	  %% Line 2483
	  <_X_GenArgType,_X_GenMap,_X_ArgExpr,[],Map,_X_Env,_X_Eval,%% Line 2484
								    AccType,%% Line 2484
									    AccMaps,%% Line 2484
										    _X_State> when 'true' ->
	      %% Line 2485
	      case call 'erl_types':'t_is_none'
		       (AccType) of
		%% Line 2486
		<'true'> when 'true' ->
		    call 'erlang':'throw'
			({'fail','none'})
		%% Line 2487
		<'false'> when 'true' ->
		    let <_cor59> =
			apply 'join_maps_end'/2
			    (AccMaps, Map)
		    in  {_cor59,AccType}
		( <_cor60> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor60})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor70,_cor69,_cor68,_cor67,_cor66,_cor65,_cor64,_cor63,_cor62,_cor61> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor70,_cor69,_cor68,_cor67,_cor66,_cor65,_cor64,_cor63,_cor62,_cor61})
		  -| [{'function_name',{'bind_guard_case_clauses',10}}] )
	    -| ['compiler_generated'] )
	end
'map__new'/0 =
    %% Line 2496
    fun () ->
	let <_cor1> =
	    call 'dict':'new'
		()
	in  let <_cor0> =
		call 'dict':'new'
		    ()
	    in  %% Line 2497
		{'map',_cor1,_cor0,[],[],'undefined'}
'join_maps_begin'/1 =
    %% Line 2502
    fun (_cor0) ->
	case _cor0 of
	  <Map = {'map',_cor6,_cor7,M,S,Ref}> when 'true' ->
	      let <_rec28> =
		  %% Line 2503
		  call 'erlang':'make_ref'
		      ()
	      in  let <_rec29> =
		      %% Line 2503
		      [{M,Ref}|S]
		  in  %% Line 2503
		      {'map',_cor6,_cor7,[],_rec29,_rec28}
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'join_maps_begin',1}}] )
	    -| ['compiler_generated'] )
	end
'join_maps_end'/2 =
    %% Line 2505
    fun (_cor1,_cor0) ->
	%% Line 2506
	case _cor0 of
	  <{'map',_cor39,_cor40,_cor41,[{M1,R1}|S],Ref}> when 'true' ->
	      let <_cor7> =
		  %% Line 2507
		  ( fun (_cor5) ->
			( case _cor5 of
			    ( <( {'map',_cor42,_cor43,_cor44,_cor45,_rec36}
				 -| ['compiler_generated'] )> when 'true' ->
				  call 'erlang':'=:='
				      (_rec36, Ref)
			      -| ['compiler_generated'] )
			    ( <_cor46> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','map'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| [{'id',{0,0,'-join_maps_end/2-fun-0-'}}] )
	      in  %% Line 2507
		  case call 'lists':'all'
			   (_cor7, _cor1) of
		    <'true'> when 'true' ->
			let <_cor15> =
			    %% Line 2508
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor11) ->
					  case _cor11 of
					    <[M|_cor10]> when 'true' ->
						( case M of
						    ( <( {'map',_cor47,_cor48,_rec37,_cor49,_cor50}
							 -| ['compiler_generated'] )> when 'true' ->
							  let <_cor14> =
							      apply 'lc$^0'/1
								  (_cor10)
							  in  ( [_rec37|_cor14]
								-| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						    ( <_cor51> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','map'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor11> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor11})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (_cor1)
			      -| ['list_comprehension'] )
			in  let <_cor16> =
				%% Line 2508
				call 'lists':'append'
				    (_cor15)
			    in  let <Keys0> =
				    %% Line 2508
				    call 'lists':'usort'
					(_cor16)
				in  let <_cor27> =
					%% Line 2510
					( letrec
					      'lc$^1'/1 =
						  fun (_cor24) ->
						      case _cor24 of
							<[%% Line 2511
							  Key|_cor20]> when 'true' ->
							    let <_cor23> =
								%% Line 2512
								( case call 'dict':'is_key'
									   (Key, _cor39) of
								    ( <( 'true'
									 -| ['compiler_generated'] )> when 'true' ->
									  'true'
								      -| ['compiler_generated'] )
								    ( <( 'false'
									 -| ['compiler_generated'] )> when 'true' ->
									  call 'dict':'is_key'
									      (Key, _cor40)
								      -| ['compiler_generated'] )
								    ( <_cor21> when 'true' ->
									  ( call ( 'erlang'
										   -| ['compiler_generated'] ):( 'error'
														 -| ['compiler_generated'] )
										(( {( 'badarg'
										      -| ['compiler_generated'] ),_cor21}
										   -| ['compiler_generated'] ))
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								  end
								  -| ['compiler_generated'] )
							    in  %% Line 2512
								( case _cor23 of
								    <'true'> when 'true' ->
									let <_cor25> =
									    apply 'lc$^1'/1
										(_cor20)
									in  ( [Key|_cor25]
									      -| ['compiler_generated'] )
								    ( <'false'> when 'true' ->
									  apply 'lc$^1'/1
									      (_cor20)
								      -| ['compiler_generated'] )
								    ( <_cor26> when 'true' ->
									  primop 'match_fail'
									      ({'case_clause',_cor26})
								      -| ['compiler_generated'] )
								  end
								  -| ['list_comprehension'] )
							<[]> when 'true' ->
							    []
							( <_cor24> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_cor24})
								-| [{'function_name',{'lc$^1',1}}] )
							  -| ['compiler_generated'] )
						      end
					  in  apply 'lc$^1'/1
						  (%% Line 2511
						   Keys0)
					  -| ['list_comprehension'] )
				    in  let <_cor30> =
					    %% Line 2513
					    case _cor1 of
					      %% Line 2514
					      <[]> when 'true' ->
						  apply 'join_maps'/2
						      (_cor1, _cor0)
					      %% Line 2515
					      <_cor55> when 'true' ->
						  apply 'join_maps'/3
						      (_cor27, _cor1, _cor0)
					    end
					in  do  %% Line 2517
						apply 'debug_join_check'/3
						    (_cor1, _cor0, _cor30)
						%% Line 2519
						( case _cor30 of
						    ( <( {'map',_cor56,_cor57,_rec45,_cor58,_cor59}
							 -| ['compiler_generated'] )> when 'true' ->
							  let <_rec38> =
							      call 'erlang':'++'
								  (_rec45, M1)
							  in  %% Line 2520
							      {'map',_cor56,_cor57,_rec38,S,R1}
						      -| ['compiler_generated'] )
						    ( <_cor60> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','map'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor8})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'join_maps'/2 =
    %% Line 2522
    fun (_cor1,_cor0) ->
	%% Line 2523
	case _cor0 of
	  <{'map',Dict,Subst,_cor9,_cor10,_cor11}> when 'true' ->
	      let <_cor4> =
		  %% Line 2524
		  call 'dict':'fetch_keys'
		      (Dict)
	      in  let <_cor3> =
		      %% Line 2524
		      call 'dict':'fetch_keys'
			  (Subst)
		  in  let <_cor5> =
			  %% Line 2524
			  call 'erlang':'++'
			      (_cor4, _cor3)
		      in  let <Keys> =
			      %% Line 2524
			      call 'ordsets':'from_list'
				  (_cor5)
			  in  %% Line 2525
			      apply 'join_maps'/3
				  (Keys, _cor1, _cor0)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'join_maps'/3 =
    %% Line 2527
    fun (_cor2,_cor1,_cor0) ->
	let <KTs> =
	    %% Line 2528
	    apply 'join_maps_collect'/3
		(_cor2, _cor1, _cor0)
	in  let <_cor8> =
		%% Line 2529
		( fun (_cor5,_cor4) ->
		      case <_cor5,_cor4> of
			<{K,T},M> when 'true' ->
			    apply 'enter_type'/3
				(K, T, M)
			( <_cor7,_cor6> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor7,_cor6})
				-| [{'function_name',{'-join_maps/3-fun-0-',2}}] )
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-join_maps/3-fun-0-'}}] )
	    in  %% Line 2529
		call 'lists':'foldl'
		    (_cor8, _cor0, KTs)
'join_maps_collect'/3 =
    %% Line 2531
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Key|Left],Maps,MapOut> when 'true' ->
	      let <_cor3> =
		  %% Line 2532
		  call 'erl_types':'t_none'
		      ()
	      in  let <Type> =
		      %% Line 2532
		      apply 'join_maps_one_key'/3
			  (Maps, Key, _cor3)
		  in  let <_cor5> =
			  %% Line 2533
			  apply 'lookup_type'/2
			      (Key, MapOut)
		      in  %% Line 2533
			  case call 'erl_types':'t_is_equal'
				   (_cor5, Type) of
			    %% Line 2534
			    <'true'> when 'true' ->
				apply 'join_maps_collect'/3
				    (Left, Maps, MapOut)
			    %% Line 2535
			    <'false'> when 'true' ->
				let <_cor6> =
				    apply 'join_maps_collect'/3
					(Left, Maps, MapOut)
				in  [{Key,Type}|_cor6]
			    ( <_cor7> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor7})
			      -| ['compiler_generated'] )
			  end
	  %% Line 2537
	  <[],_X_Maps,_X_MapOut> when 'true' ->
	      %% Line 2538
	      []
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'join_maps_collect',3}}] )
	    -| ['compiler_generated'] )
	end
'join_maps_one_key'/3 =
    %% Line 2540
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Map|Left],Key,AccType> when 'true' ->
	      %% Line 2541
	      case call 'erl_types':'t_is_any'
		       (AccType) of
		%% Line 2542
		<'true'> when 'true' ->
		    %% Line 2544
		    AccType
		%% Line 2545
		<'false'> when 'true' ->
		    let <_cor3> =
			%% Line 2546
			apply 'lookup_type'/2
			    (Key, Map)
		    in  let <_cor4> =
			    %% Line 2546
			    call 'erl_types':'t_sup'
				(_cor3, AccType)
			in  %% Line 2546
			    apply 'join_maps_one_key'/3
				(Left, Key, _cor4)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2548
	  <[],_X_Key,AccType> when 'true' ->
	      %% Line 2549
	      AccType
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'join_maps_one_key',3}}] )
	    -| ['compiler_generated'] )
	end
'debug_join_check'/3 =
    %% Line 2559
    fun (_cor2,_cor1,_cor0) ->
	'ok'
'enter_type_lists'/3 =
    %% Line 2562
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Key|KeyTail],[Val|ValTail],Map> when 'true' ->
	      let <Map1> =
		  %% Line 2563
		  apply 'enter_type'/3
		      (Key, Val, Map)
	      in  %% Line 2564
		  apply 'enter_type_lists'/3
		      (KeyTail, ValTail, Map1)
	  %% Line 2565
	  <[],[],Map> when 'true' ->
	      %% Line 2566
	      Map
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'enter_type_lists',3}}] )
	    -| ['compiler_generated'] )
	end
'enter_type_list'/2 =
    %% Line 2568
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Key,Val}|Left],Map> when 'true' ->
	      let <Map1> =
		  %% Line 2569
		  apply 'enter_type'/3
		      (Key, Val, Map)
	      in  %% Line 2570
		  apply 'enter_type_list'/2
		      (Left, Map1)
	  %% Line 2571
	  <[],Map> when 'true' ->
	      %% Line 2572
	      Map
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'enter_type_list',2}}] )
	    -| ['compiler_generated'] )
	end
'enter_type'/3 =
    %% Line 2574
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2575
	case call 'cerl':'is_literal'
		 (_cor2) of
	  %% Line 2576
	  <'true'> when 'true' ->
	      _cor0
	  %% Line 2577
	  <'false'> when 'true' ->
	      %% Line 2578
	      case call 'cerl':'is_c_values'
		       (_cor2) of
		%% Line 2579
		<'true'> when 'true' ->
		    let <Keys> =
			%% Line 2580
			call 'cerl':'values_es'
			    (_cor2)
		    in  let <_cor6> =
			    %% Line 2581
			    ( case call 'erl_types':'t_is_any'
				       (_cor1) of
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      'true'
				  -| ['compiler_generated'] )
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      call 'erl_types':'t_is_none'
					  (_cor1)
				  -| ['compiler_generated'] )
				( <_cor4> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {( 'badarg'
						  -| ['compiler_generated'] ),_cor4}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			in  %% Line 2581
			    case _cor6 of
			      %% Line 2582
			      <'true'> when 'true' ->
				  let <_cor11> =
				      %% Line 2583
				      ( letrec
					    'lc$^0'/1 =
						fun (_cor9) ->
						    case _cor9 of
						      <[_cor24|_cor8]> when 'true' ->
							  let <_cor10> =
							      apply 'lc$^0'/1
								  (_cor8)
							  in  ( [_cor1|_cor10]
								-| ['compiler_generated'] )
						      <[]> when 'true' ->
							  []
						      ( <_cor9> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor9})
							      -| [{'function_name',{'lc$^0',1}}] )
							-| ['compiler_generated'] )
						    end
					in  apply 'lc$^0'/1
						(Keys)
					-| ['list_comprehension'] )
				  in  %% Line 2583
				      apply 'enter_type_lists'/3
					  (Keys, _cor11, _cor0)
			      %% Line 2584
			      <'false'> when 'true' ->
				  let <_cor12> =
				      %% Line 2585
				      call 'erl_types':'t_to_tlist'
					  (_cor1)
				  in  %% Line 2585
				      apply 'enter_type_lists'/3
					  (Keys, _cor12, _cor0)
			      ( <_cor13> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor13})
				-| ['compiler_generated'] )
			    end
		%% Line 2587
		<'false'> when 'true' ->
		    %% Line 2588
		    case _cor0 of
		      <{'map',Dict,Subst,_cor25,_cor26,_cor27}> when 'true' ->
			  let <KeyLabel> =
			      %% Line 2589
			      apply 'get_label'/1
				  (_cor2)
			  in  %% Line 2590
			      case call 'dict':'find'
				       (KeyLabel, Subst) of
				%% Line 2591
				<{'ok',NewKey}> when 'true' ->
				    %% Line 2593
				    apply 'enter_type'/3
					(NewKey, _cor1, _cor0)
				%% Line 2594
				<'error'> when 'true' ->
				    %% Line 2596
				    case call 'dict':'find'
					     (KeyLabel, Dict) of
				      %% Line 2597
				      <{'ok',Value}> when 'true' ->
					  %% Line 2598
					  case call 'erl_types':'t_is_equal'
						   (_cor1, Value) of
					    %% Line 2599
					    <'true'> when 'true' ->
						_cor0
					    %% Line 2600
					    <'false'> when 'true' ->
						apply 'store_map'/3
						    (KeyLabel, _cor1, _cor0)
					    ( <_cor16> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor16})
					      -| ['compiler_generated'] )
					  end
				      %% Line 2602
				      <'error'> when 'true' ->
					  apply 'store_map'/3
					      (KeyLabel, _cor1, _cor0)
				      ( <_cor17> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor17})
					-| ['compiler_generated'] )
				    end
				( <_cor18> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor18})
				  -| ['compiler_generated'] )
			      end
		      ( <_cor14> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor14})
			-| ['compiler_generated'] )
		    end
		( <_cor19> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor19})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor20> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor20})
	    -| ['compiler_generated'] )
	end
'store_map'/3 =
    %% Line 2608
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Key,Val,Map = {'map',Dict,_cor14,_cor15,_cor16,'undefined'}> when 'true' ->
	      let <_rec46> =
		  %% Line 2609
		  call 'dict':'store'
		      (Key, Val, Dict)
	      in  %% Line 2609
		  call 'erlang':'setelement'
		      (2, Map, _rec46)
	  %% Line 2610
	  <Key,Val,Map = {'map',Dict,_cor23,Mod,_cor24,_cor25}> when 'true' ->
	      let <_rec48> =
		  %% Line 2611
		  call 'dict':'store'
		      (Key, Val, Dict)
	      in  let <_rec49> =
		      %% Line 2611
		      [Key|Mod]
		  in  let <_cor9> =
			  %% Line 2611
			  call 'erlang':'setelement'
			      (4, Map, _rec49)
		      in  %% Line 2611
			  call 'erlang':'setelement'
			      (2, _cor9, _rec48)
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'store_map',3}}] )
	    -| ['compiler_generated'] )
	end
'enter_subst'/3 =
    %% Line 2613
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Key,Val,MS = {'map',_cor12,Subst,_cor13,_cor14,_cor15}> when 'true' ->
	      let <KeyLabel> =
		  %% Line 2614
		  apply 'get_label'/1
		      (Key)
	      in  %% Line 2615
		  case call 'cerl':'is_literal'
			   (Val) of
		    %% Line 2616
		    <'true'> when 'true' ->
			let <_cor4> =
			    %% Line 2617
			    apply 'literal_type'/1
				(Val)
			in  %% Line 2617
			    apply 'store_map'/3
				(KeyLabel, _cor4, MS)
		    %% Line 2618
		    <'false'> when 'true' ->
			%% Line 2619
			case call 'cerl':'is_c_var'
				 (Val) of
			  %% Line 2620
			  <'false'> when 'true' ->
			      MS
			  %% Line 2621
			  <'true'> when 'true' ->
			      let <ValLabel> =
				  %% Line 2622
				  apply 'get_label'/1
				      (Val)
			      in  %% Line 2623
				  case call 'dict':'find'
					   (ValLabel, Subst) of
				    %% Line 2624
				    <{'ok',NewVal}> when 'true' ->
					%% Line 2625
					apply 'enter_subst'/3
					    (Key, NewVal, MS)
				    %% Line 2626
				    <'error'> when 'true' ->
					%% Line 2627
					case <> of
					  <>
					      when call 'erlang':'=:='
						    (KeyLabel,
						     ValLabel) ->
					      MS
					  %% Line 2628
					  <> when 'true' ->
					      %% Line 2630
					      apply 'store_subst'/3
						  (KeyLabel, ValLabel, MS)
					end
				    ( <_cor6> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor6})
				      -| ['compiler_generated'] )
				  end
			  ( <_cor7> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor7})
			    -| ['compiler_generated'] )
			end
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor8})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'enter_subst',3}}] )
	    -| ['compiler_generated'] )
	end
'store_subst'/3 =
    %% Line 2636
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Key,Val,Map = {'map',_cor14,S,_cor15,_cor16,'undefined'}> when 'true' ->
	      let <_rec51> =
		  %% Line 2637
		  call 'dict':'store'
		      (Key, Val, S)
	      in  %% Line 2637
		  call 'erlang':'setelement'
		      (3, Map, _rec51)
	  %% Line 2638
	  <Key,Val,Map = {'map',_cor23,S,Mod,_cor24,_cor25}> when 'true' ->
	      let <_rec53> =
		  %% Line 2639
		  call 'dict':'store'
		      (Key, Val, S)
	      in  let <_rec54> =
		      %% Line 2639
		      [Key|Mod]
		  in  let <_cor9> =
			  %% Line 2639
			  call 'erlang':'setelement'
			      (4, Map, _rec54)
		      in  %% Line 2639
			  call 'erlang':'setelement'
			      (3, _cor9, _rec53)
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'store_subst',3}}] )
	    -| ['compiler_generated'] )
	end
'lookup_type'/2 =
    %% Line 2641
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,{'map',Dict,Subst,_cor5,_cor6,_cor7}> when 'true' ->
	      let <_cor2> =
		  %% Line 2642
		  call 'erl_types':'t_none'
		      ()
	      in  %% Line 2642
		  apply 'lookup'/4
		      (Key, Dict, Subst, _cor2)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'lookup_type',2}}] )
	    -| ['compiler_generated'] )
	end
'lookup'/4 =
    %% Line 2644
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2645
	case call 'cerl':'is_literal'
		 (_cor3) of
	  %% Line 2646
	  <'true'> when 'true' ->
	      apply 'literal_type'/1
		  (_cor3)
	  %% Line 2647
	  <'false'> when 'true' ->
	      let <Label> =
		  %% Line 2648
		  apply 'get_label'/1
		      (_cor3)
	      in  %% Line 2649
		  case call 'dict':'find'
			   (Label, _cor1) of
		    %% Line 2650
		    <{'ok',NewKey}> when 'true' ->
			apply 'lookup'/4
			    (NewKey, _cor2, _cor1, _cor0)
		    %% Line 2651
		    <'error'> when 'true' ->
			%% Line 2652
			case call 'dict':'find'
				 (Label, _cor2) of
			  %% Line 2653
			  <{'ok',Val}> when 'true' ->
			      Val
			  %% Line 2654
			  <'error'> when 'true' ->
			      _cor0
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor5})
			    -| ['compiler_generated'] )
			end
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'lookup_fun_sig'/3 =
    %% Line 2659
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 2661
	    case call 'dialyzer_callgraph':'lookup_name'
		     (_cor2, _cor1) of
	      %% Line 2662
	      <'error'> when 'true' ->
		  _cor2
	      %% Line 2663
	      <{'ok',MFA}> when 'true' ->
		  MFA
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor3})
		-| ['compiler_generated'] )
	    end
	in  %% Line 2665
	    call 'dialyzer_plt':'lookup'
		(_cor0, _cor4)
'literal_type'/1 =
    %% Line 2667
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2668
	    call 'cerl':'concrete'
		(_cor0)
	in  %% Line 2668
	    call 'erl_types':'t_from_term'
		(_cor1)
'mark_as_fresh'/2 =
    %% Line 2670
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Tree|Left],Map> when 'true' ->
	      let <_cor2> =
		  %% Line 2671
		  call 'cerl':'subtrees'
		      (Tree)
	      in  let <SubTrees1> =
		      %% Line 2671
		      call 'lists':'append'
			  (_cor2)
		  in  let <SubTrees2,Map1> =
			  %% Line 2673
			  case call 'cerl':'type'
				   (Tree) of
			    %% Line 2674
			    <'bitstr'> when 'true' ->
				let <_cor4> =
				    %% Line 2676
				    call 'cerl':'bitstr_size'
					(Tree)
				in  let <_cor5> =
					%% Line 2676
					call 'erlang':'--'
					    (SubTrees1, [_cor4|[]])
				    in  <_cor5,%% Line 2676
					       Map>
			    %% Line 2677
			    <'var'> when 'true' ->
				let <_cor6> =
				    %% Line 2678
				    call 'erl_types':'t_any'
					()
				in  let <_cor7> =
					%% Line 2678
					apply 'enter_type'/3
					    (Tree, _cor6, Map)
				    in  %% Line 2678
					<SubTrees1,_cor7>
			    %% Line 2679
			    <_cor14> when 'true' ->
				%% Line 2680
				<SubTrees1,Map>
			  end
		      in  let <_cor11> =
			      %% Line 2682
			      call 'erlang':'++'
				  (SubTrees2, Left)
			  in  %% Line 2682
			      apply 'mark_as_fresh'/2
				  (_cor11, Map1)
	  %% Line 2683
	  <[],Map> when 'true' ->
	      %% Line 2684
	      Map
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'mark_as_fresh',2}}] )
	    -| ['compiler_generated'] )
	end
'debug_pp_map'/1 =
    %% Line 2696
    fun (_cor0) ->
	'ok'
'get_label'/1 =
    %% Line 2705
    fun (_cor0) ->
	case _cor0 of
	  <L>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 2706
	      L
	  %% Line 2707
	  <T> when 'true' ->
	      %% Line 2708
	      call 'cerl_trees':'get_label'
		  (T)
	end
't_is_simple'/2 =
    %% Line 2710
    fun (_cor1,_cor0) ->
	%% Line 2711
	( case _cor0 of
	    ( <( {'state',_cor17,_cor18,_cor19,_cor20,_rec56,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 2712
		  ( case call 'erl_types':'t_is_atom'
			     (_cor1, _rec56) of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    'true'
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    %% Line 2713
			    ( case call 'erl_types':'t_is_number'
				       (_cor1, _rec56) of
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      'true'
				  -| ['compiler_generated'] )
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      %% Line 2714
				      ( case call 'erl_types':'t_is_port'
						 (_cor1, _rec56) of
					  ( <( 'true'
					       -| ['compiler_generated'] )> when 'true' ->
						'true'
					    -| ['compiler_generated'] )
					  ( <( 'false'
					       -| ['compiler_generated'] )> when 'true' ->
						( case call 'erl_types':'t_is_pid'
							   (_cor1, _rec56) of
						    ( <( 'true'
							 -| ['compiler_generated'] )> when 'true' ->
							  'true'
						      -| ['compiler_generated'] )
						    ( <( 'false'
							 -| ['compiler_generated'] )> when 'true' ->
							  %% Line 2715
							  ( case call 'erl_types':'t_is_reference'
								     (_cor1, _rec56) of
							      ( <( 'true'
								   -| ['compiler_generated'] )> when 'true' ->
								    'true'
								-| ['compiler_generated'] )
							      ( <( 'false'
								   -| ['compiler_generated'] )> when 'true' ->
								    call 'erl_types':'t_is_nil'
									(_cor1, _rec56)
								-| ['compiler_generated'] )
							      ( <_cor9> when 'true' ->
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'error'
													   -| ['compiler_generated'] )
									  (( {( 'badarg'
										-| ['compiler_generated'] ),_cor9}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						    ( <_cor8> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {( 'badarg'
								      -| ['compiler_generated'] ),_cor8}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <_cor7> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {( 'badarg'
							    -| ['compiler_generated'] ),_cor7}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <_cor6> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {( 'badarg'
						  -| ['compiler_generated'] ),_cor6}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <_cor5> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_cor5}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor28> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'remove_local_opaque_types'/2 =
    %% Line 2717
    fun (_cor1,_cor0) ->
	%% Line 2718
	call 'erl_types':'t_unopaque'
	    (_cor1, _cor0)
'is_call_to_send'/1 =
    %% Line 2728
    fun (_cor0) ->
	%% Line 2729
	case call 'cerl':'is_c_call'
		 (_cor0) of
	  %% Line 2730
	  <'false'> when 'true' ->
	      'false'
	  %% Line 2731
	  <'true'> when 'true' ->
	      let <Mod> =
		  %% Line 2732
		  call 'cerl':'call_module'
		      (_cor0)
	      in  let <Name> =
		      %% Line 2733
		      call 'cerl':'call_name'
			  (_cor0)
		  in  let <Arity> =
			  %% Line 2734
			  call 'cerl':'call_arity'
			      (_cor0)
		      in  %% Line 2736
			  ( case call 'cerl':'is_c_atom'
				     (Mod) of
			      ( <( 'true'
				   -| ['compiler_generated'] )> when 'true' ->
				    %% Line 2737
				    ( case call 'cerl':'is_c_atom'
					       (Name) of
					( <( 'true'
					     -| ['compiler_generated'] )> when 'true' ->
					      let <_cor7> =
						  call 'cerl':'atom_val'
						      (Name)
					      in  %% Line 2738
						  ( case <> of
						      ( <>
							    when call 'erlang':'=:='
								  (_cor7,
								   '!') ->
							    let <_cor9> =
								call 'cerl':'atom_val'
								    (Mod)
							    in  %% Line 2739
								( case <> of
								    ( <>
									  when call 'erlang':'=:='
										(_cor9,
										 'erlang') ->
									  call 'erlang':'=:='
									      (Arity, 2)
								      -| ['compiler_generated'] )
								    ( <> when 'true' ->
									  'false'
								      -| ['compiler_generated'] )
								  end
								  -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						      ( <> when 'true' ->
							    'false'
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					  -| ['compiler_generated'] )
					( <( 'false'
					     -| ['compiler_generated'] )> when 'true' ->
					      'false'
					  -| ['compiler_generated'] )
					( <_cor5> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {( 'badarg'
							  -| ['compiler_generated'] ),_cor5}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <( 'false'
				   -| ['compiler_generated'] )> when 'true' ->
				    'false'
				-| ['compiler_generated'] )
			      ( <_cor4> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {( 'badarg'
						-| ['compiler_generated'] ),_cor4}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
	  ( <_cor14> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor14})
	    -| ['compiler_generated'] )
	end
'is_lc_simple_list'/3 =
    %% Line 2742
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2743
	( case _cor0 of
	    ( <( {'state',_cor15,_cor16,_cor17,_cor18,_rec57,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <Ann> =
		      %% Line 2744
		      call 'cerl':'get_ann'
			  (_cor2)
		  in  %% Line 2746
		      ( case call 'lists':'member'
				 ('list_comprehension', Ann) of
			  ( <( 'true'
			       -| ['compiler_generated'] )> when 'true' ->
				%% Line 2747
				( case call 'erl_types':'t_is_list'
					   (_cor1) of
				    ( <( 'true'
					 -| ['compiler_generated'] )> when 'true' ->
					  let <_cor9> =
					      call 'erl_types':'t_list_elements'
						  (_cor1, _rec57)
					  in  apply 't_is_simple'/2
						  (_cor9, _cor0)
				      -| ['compiler_generated'] )
				    ( <( 'false'
					 -| ['compiler_generated'] )> when 'true' ->
					  'false'
				      -| ['compiler_generated'] )
				    ( <_cor8> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {( 'badarg'
						      -| ['compiler_generated'] ),_cor8}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <( 'false'
			       -| ['compiler_generated'] )> when 'true' ->
				'false'
			    -| ['compiler_generated'] )
			  ( <_cor7> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {( 'badarg'
					    -| ['compiler_generated'] ),_cor7}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor26> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'filter_match_fail'/1 =
    %% Line 2749
    fun (_cor0) ->
	case _cor0 of
	  <Cls = [Clause|[]]> when 'true' ->
	      let <Body> =
		  %% Line 2750
		  call 'cerl':'clause_body'
		      (Clause)
	      in  %% Line 2751
		  case call 'cerl':'type'
			   (Body) of
		    %% Line 2752
		    <'primop'> when 'true' ->
			let <_cor2> =
			    %% Line 2753
			    call 'cerl':'primop_name'
				(Body)
			in  %% Line 2753
			    case call 'cerl':'atom_val'
				     (_cor2) of
			      %% Line 2754
			      <'match_fail'> when 'true' ->
				  []
			      %% Line 2755
			      <'raise'> when 'true' ->
				  []
			      %% Line 2756
			      <_cor7> when 'true' ->
				  Cls
			    end
		    %% Line 2758
		    <_cor8> when 'true' ->
			Cls
		  end
	  %% Line 2760
	  <[H|T]> when 'true' ->
	      let <_cor5> =
		  %% Line 2761
		  apply 'filter_match_fail'/1
		      (T)
	      in  %% Line 2761
		  [H|_cor5]
	  %% Line 2762
	  <[]> when 'true' ->
	      %% Line 2765
	      []
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'filter_match_fail',1}}] )
	    -| ['compiler_generated'] )
	end
'state__new'/5 =
    %% Line 2773
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 2774
	    call 'erl_types':'module_builtin_opaques'
		(_cor1)
	in  let <_cor5> =
		%% Line 2775
		call 'erl_types':'t_opaque_from_records'
		    (_cor0)
	    in  let <Opaques> =
		    %% Line 2774
		    call 'erlang':'++'
			(_cor6, _cor5)
		in  let <TreeMap> =
			%% Line 2776
			apply 'build_tree_map'/1
			    (_cor3)
		    in  let <Funs> =
			    %% Line 2777
			    call 'dict':'fetch_keys'
				(TreeMap)
			in  let <_cor10> =
				%% Line 2778
				call 'dict':'new'
				    ()
			    in  let <FunTab> =
				    %% Line 2778
				    apply 'init_fun_tab'/5
					(Funs, _cor10, TreeMap, _cor4, _cor2)
				in  let <_cor18> =
					%% Line 2780
					( letrec
					      'lc$^0'/1 =
						  fun (_cor15) ->
						      case _cor15 of
							<[Fun|_cor13]> when 'true' ->
							    ( case call 'dialyzer_callgraph':'is_escaping'
								       (Fun, _cor4) of
								<'true'> when 'true' ->
								    let <_cor16> =
									apply 'lc$^0'/1
									    (_cor13)
								    in  ( [Fun|_cor16]
									  -| ['compiler_generated'] )
								( <'false'> when 'true' ->
								      apply 'lc$^0'/1
									  (_cor13)
								  -| ['compiler_generated'] )
								( <_cor17> when 'true' ->
								      primop 'match_fail'
									  ({'case_clause',_cor17})
								  -| ['compiler_generated'] )
							      end
							      -| ['list_comprehension'] )
							<[]> when 'true' ->
							    []
							( <_cor15> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_cor15})
								-| [{'function_name',{'lc$^0',1}}] )
							  -| ['compiler_generated'] )
						      end
					  in  let <_cor14> =
						  call 'erlang':'--'
						      (Funs, ['top'])
					      in  apply 'lc$^0'/1
						      (_cor14)
					  -| ['list_comprehension'] )
				    in  let <Work> =
					    %% Line 2781
					    apply 'init_work'/1
						(_cor18)
					in  let <_cor27> =
						%% Line 2782
						( fun (_cor24,_cor23) ->
						      let <_cor22> =
							  apply 'map__new'/0
							      ()
						      in  call 'dict':'store'
							      (_cor24, _cor22, _cor23)
						  -| [{'id',{0,0,'-state__new/5-fun-0-'}}] )
					    in  let <_cor21> =
						    %% Line 2783
						    call 'dict':'new'
							()
						in  let <Env> =
							%% Line 2782
							call 'lists':'foldl'
							    (_cor27, _cor21, %% Line 2783
									     Funs)
						    in  let <_cor29> =
							    %% Line 2785
							    call 'dialyzer_races':'new'
								()
							in  %% Line 2784
							    {'state',_cor4,Env,FunTab,_cor2,Opaques,_cor29,_cor0,%% Line 2786
														 TreeMap,%% Line 2786
															 'false',%% Line 2786
																 [],%% Line 2786
																    Work,_cor1}
'state__warning_mode'/1 =
    %% Line 2789
    fun (_cor0) ->
	case _cor0 of
	  <{'state',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,WM,_cor10,_cor11,_cor12}> when 'true' ->
	      %% Line 2790
	      WM
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'state__warning_mode',1}}] )
	    -| ['compiler_generated'] )
	end
'state__set_warning_mode'/1 =
    %% Line 2792
    fun (_cor0) ->
	case _cor0 of
	  <State = {'state',_cor11,_cor12,FunTab,_cor13,_cor14,%% Line 2793
							       Races,_cor15,TreeMap,_cor16,_cor17,_cor18,_cor19}> when 'true' ->
	      let <Funs> =
		  %% Line 2795
		  call 'dict':'fetch_keys'
		      (TreeMap)
	      in  let <_cor2> =
		      %% Line 2796
		      call 'erlang':'--'
			  (Funs, ['top'])
		  in  let <_rec58> =
			  %% Line 2796
			  apply 'init_work'/1
			      (['top'|_cor2])
		      in  let <_rec59> =
			      %% Line 2798
			      call 'dialyzer_races':'put_race_analysis'
				  ('true', Races)
			  in  let <_cor6> =
				  %% Line 2796
				  call 'erlang':'setelement'
				      (12, State, _rec58)
			      in  let <_cor7> =
				      %% Line 2797
				      call 'erlang':'setelement'
					  (10, _cor6, 'true')
				  in  let <_cor8> =
					  %% Line 2798
					  call 'erlang':'setelement'
					      (7, _cor7, _rec59)
				      in  %% Line 2797
					  call 'erlang':'setelement'
					      (4, _cor8, FunTab)
	  ( <_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10})
		  -| [{'function_name',{'state__set_warning_mode',1}}] )
	    -| ['compiler_generated'] )
	end
'state__race_analysis'/2 =
    %% Line 2800
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Analysis,State = {'state',_cor7,_cor8,_cor9,_cor10,_cor11,Races,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17}> when 'true' ->
	      let <_rec61> =
		  %% Line 2801
		  call 'dialyzer_races':'put_race_analysis'
		      (Analysis, Races)
	      in  %% Line 2801
		  call 'erlang':'setelement'
		      (7, State, _rec61)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'state__race_analysis',2}}] )
	    -| ['compiler_generated'] )
	end
'state__renew_curr_fun'/3 =
    %% Line 2803
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <CurrFun,CurrFunLabel,State = %% Line 2804
					{'state',_cor9,_cor10,_cor11,_cor12,_cor13,Races,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}> when 'true' ->
	      let <_rec63> =
		  %% Line 2805
		  call 'dialyzer_races':'put_curr_fun'
		      (CurrFun, CurrFunLabel, %% Line 2806
					      Races)
	      in  %% Line 2805
		  call 'erlang':'setelement'
		      (7, State, _rec63)
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'state__renew_curr_fun',3}}] )
	    -| ['compiler_generated'] )
	end
'state__renew_fun_args'/2 =
    %% Line 2808
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Args,State = {'state',_cor8,_cor9,_cor10,_cor11,_cor12,Races,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18}> when 'true' ->
	      %% Line 2809
	      case apply 'state__warning_mode'/1
		       (State) of
		%% Line 2810
		<'true'> when 'true' ->
		    State
		%% Line 2811
		<'false'> when 'true' ->
		    let <_rec65> =
			%% Line 2812
			call 'dialyzer_races':'put_fun_args'
			    (Args, Races)
		    in  %% Line 2812
			call 'erlang':'setelement'
			    (7, State, _rec65)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'state__renew_fun_args',2}}] )
	    -| ['compiler_generated'] )
	end
'state__renew_race_list'/3 =
    %% Line 2815
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <RaceList,RaceListSize,State = %% Line 2816
					 {'state',_cor9,_cor10,_cor11,_cor12,_cor13,Races,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}> when 'true' ->
	      let <_rec67> =
		  %% Line 2817
		  call 'dialyzer_races':'put_race_list'
		      (RaceList, RaceListSize, %% Line 2818
					       Races)
	      in  %% Line 2817
		  call 'erlang':'setelement'
		      (7, State, _rec67)
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'state__renew_race_list',3}}] )
	    -| ['compiler_generated'] )
	end
'state__renew_warnings'/2 =
    %% Line 2820
    fun (_cor1,_cor0) ->
	%% Line 2821
	case _cor0 of
	  <{'state',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17}> when 'true' ->
	      call 'erlang':'setelement'
		  (11, _cor0, _cor1)
	  ( <_cor18> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','state'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'state__add_warning'/2 =
    %% Line 2825
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Warn,State = {'state',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,Warnings,_cor16,_cor17}> when 'true' ->
	      let <_rec70> =
		  %% Line 2826
		  [Warn|Warnings]
	      in  %% Line 2826
		  call 'erlang':'setelement'
		      (11, State, _rec70)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'state__add_warning',2}}] )
	    -| ['compiler_generated'] )
	end
'state__add_warning'/4 =
    %% Line 2828
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2829
	apply 'state__add_warning'/5
	    (_cor3, _cor2, _cor1, _cor0, 'false')
'state__add_warning'/5 =
    %% Line 2831
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <State = {'state',_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,'false',_cor34,_cor35,_cor36},_cor37,_cor38,_cor39,_cor40> when 'true' ->
	      %% Line 2832
	      State
	  %% Line 2833
	  <State = {'state',_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,'true',Warnings,_cor49,_cor50},%% Line 2834
														   Tag,%% Line 2834
														       Tree,%% Line 2834
															    Msg,%% Line 2834
																Force> when 'true' ->
	      let <Ann> =
		  %% Line 2835
		  call 'cerl':'get_ann'
		      (Tree)
	      in  %% Line 2836
		  case Force of
		    %% Line 2837
		    <'true'> when 'true' ->
			let <_cor8> =
			    %% Line 2838
			    apply 'get_file'/1
				(Ann)
			in  let <_cor6> =
				%% Line 2838
				apply 'get_line'/1
				    (Ann)
			    in  let <_cor7> =
				    %% Line 2838
				    call 'erlang':'abs'
					(_cor6)
				in  let <Warn> = {%% Line 2838
					 Tag,%% Line 2838
					     {_cor8,_cor7},%% Line 2838
							   Msg}
				    in  let <_rec72> =
					    %% Line 2840
					    [Warn|Warnings]
					in  %% Line 2840
					    call 'erlang':'setelement'
						(11, State, _rec72)
		    %% Line 2841
		    <'false'> when 'true' ->
			%% Line 2842
			case apply 'is_compiler_generated'/1
				 (Ann) of
			  %% Line 2843
			  <'true'> when 'true' ->
			      State
			  %% Line 2844
			  <'false'> when 'true' ->
			      let <_cor14> =
				  %% Line 2845
				  apply 'get_file'/1
				      (Ann)
			      in  let <_cor13> =
				      %% Line 2845
				      apply 'get_line'/1
					  (Ann)
				  in  let <Warn> = {%% Line 2845
					   Tag,%% Line 2845
					       {_cor14,_cor13},%% Line 2845
							       Msg}
				      in  let <_rec74> =
					      %% Line 2847
					      [Warn|Warnings]
					  in  %% Line 2847
					      call 'erlang':'setelement'
						  (11, State, _rec74)
			  ( <_cor19> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor19})
			    -| ['compiler_generated'] )
			end
		    ( <_cor20> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor20})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor25,_cor24,_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23,_cor22,_cor21})
		  -| [{'function_name',{'state__add_warning',5}}] )
	    -| ['compiler_generated'] )
	end
'state__get_race_warnings'/1 =
    %% Line 2851
    fun (_cor0) ->
	case _cor0 of
	  <State = {'state',_cor5,_cor6,_cor7,_cor8,_cor9,Races,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15}> when 'true' ->
	      %% Line 2852
	      case call 'dialyzer_races':'get_race_warnings'
		       (Races, State) of
		<{Races1,State1}> when 'true' ->
		    %% Line 2853
		    case State1 of
		      <{'state',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27}> when 'true' ->
			  call 'erlang':'setelement'
			      (7, State1, Races1)
		      ( <_cor28> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'state__get_race_warnings',1}}] )
	    -| ['compiler_generated'] )
	end
'state__get_warnings'/2 =
    %% Line 2855
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <State = {'state',%% Line 2856
			    Callgraph,_cor39,FunTab,%% Line 2856
						    Plt,_cor40,_cor41,_cor42,TreeMap,_cor43,_cor44,_cor45,_cor46},%% Line 2857
														  NoWarnUnused> when 'true' ->
	      let <FoldFun> =
		  %% Line 2859
		  ( fun (_cor31,_cor30) ->
			case <_cor31,_cor30> of
			  <{'top',_cor47},AccState> when 'true' ->
			      AccState
			  %% Line 2860
			  <{FunLbl,Fun},AccState> when 'true' ->
			      let <_cor2> =
				  %% Line 2862
				  apply 'get_label'/1
				      (Fun)
			      in  let <NotCalled,Ret> =
				      %% Line 2862
				      case call 'dict':'fetch'
					       (_cor2, FunTab) of
					%% Line 2863
					<{'not_handled',{_X_Args0,Ret0}}> when 'true' ->
					    <'true',Ret0>
					%% Line 2864
					<{_X_Args0,Ret0}> when 'true' ->
					    <'false',Ret0>
					( <_cor3> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor3})
					  -| ['compiler_generated'] )
				      end
				  in  %% Line 2866
				      case NotCalled of
					%% Line 2867
					<'true'> when 'true' ->
					    let <Warn,Msg> =
						%% Line 2869
						case call 'dialyzer_callgraph':'lookup_name'
							 (FunLbl, Callgraph) of
						  %% Line 2870
						  <'error'> when 'true' ->
						      <'false',{}>
						  %% Line 2871
						  <{'ok',MFA = {_X_M,F,A}}> when 'true' ->
						      let <_cor6> =
							  %% Line 2872
							  call 'sets':'is_element'
							      (MFA, NoWarnUnused)
						      in  let <_cor7> =
							      %% Line 2872
							      call 'erlang':'not'
								  (_cor6)
							  in  <_cor7,%% Line 2873
								     {'unused_fun',[F|[A|[]]]}>
						  ( <_cor8> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor8})
						    -| ['compiler_generated'] )
						end
					    in  %% Line 2875
						case Warn of
						  %% Line 2876
						  <'true'> when 'true' ->
						      apply 'state__add_warning'/4
							  (AccState, 'warn_not_called', Fun, Msg)
						  %% Line 2877
						  <'false'> when 'true' ->
						      AccState
						  ( <_cor11> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor11})
						    -| ['compiler_generated'] )
						end
					%% Line 2879
					<'false'> when 'true' ->
					    let <Name,Contract> =
						%% Line 2881
						case call 'dialyzer_callgraph':'lookup_name'
							 (FunLbl, Callgraph) of
						  %% Line 2882
						  <'error'> when 'true' ->
						      <[],'none'>
						  %% Line 2883
						  <{'ok',MFA = {_X_M,F,A}}> when 'true' ->
						      let <_cor12> =
							  %% Line 2884
							  call 'dialyzer_plt':'lookup_contract'
							      (Plt, MFA)
						      in  %% Line 2884
							  <[F|[A|[]]],_cor12>
						  ( <_cor13> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor13})
						    -| ['compiler_generated'] )
						end
					    in  %% Line 2886
						case call 'erl_types':'t_is_none'
							 (Ret) of
						  %% Line 2887
						  <'true'> when 'true' ->
						      let <_cor20> =
							  %% Line 2890
							  case Contract of
							    %% Line 2891
							    <'none'> when 'true' ->
								let <_cor16> =
								    apply 'parent_allows_this'/2
									(FunLbl, State)
								in  call 'erlang':'not'
									(_cor16)
							    %% Line 2892
							    <{'value',C}> when 'true' ->
								let <GenRet> =
								    %% Line 2893
								    call 'dialyzer_contracts':'get_contract_return'
									(C)
								in  let <_cor18> =
									%% Line 2894
									call 'erl_types':'t_is_unit'
									    (GenRet)
								    in  %% Line 2894
									call 'erlang':'not'
									    (_cor18)
							    ( <_cor19> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_cor19})
							      -| ['compiler_generated'] )
							  end
						      in  %% Line 2896
							  case _cor20 of
							    %% Line 2897
							    <'true'> when 'true' ->
								%% Line 2898
								case apply 'classify_returns'/1
									 (Fun) of
								  %% Line 2899
								  <'no_match'> when 'true' ->
								      let <Msg> =
									  %% Line 2900
									  {'no_return',['no_match'|Name]}
								      in  %% Line 2901
									  apply 'state__add_warning'/4
									      (AccState, 'warn_return_no_exit', %% Line 2902
														Fun, %% Line 2902
														     Msg)
								  %% Line 2903
								  <'only_explicit'> when 'true' ->
								      let <Msg> =
									  %% Line 2904
									  {'no_return',['only_explicit'|Name]}
								      in  %% Line 2905
									  apply 'state__add_warning'/4
									      (AccState, 'warn_return_only_exit', %% Line 2906
														  Fun, %% Line 2906
														       Msg)
								  %% Line 2907
								  <'only_normal'> when 'true' ->
								      let <Msg> =
									  %% Line 2908
									  {'no_return',['only_normal'|Name]}
								      in  %% Line 2909
									  apply 'state__add_warning'/4
									      (AccState, 'warn_return_no_exit', %% Line 2910
														Fun, %% Line 2910
														     Msg)
								  %% Line 2911
								  <'both'> when 'true' ->
								      let <Msg> =
									  %% Line 2912
									  {'no_return',['both'|Name]}
								      in  %% Line 2913
									  apply 'state__add_warning'/4
									      (AccState, 'warn_return_no_exit', %% Line 2914
														Fun, %% Line 2914
														     Msg)
								  ( <_cor26> when 'true' ->
									primop 'match_fail'
									    ({'case_clause',_cor26})
								    -| ['compiler_generated'] )
								end
							    %% Line 2916
							    <'false'> when 'true' ->
								%% Line 2917
								AccState
							    ( <_cor27> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_cor27})
							      -| ['compiler_generated'] )
							  end
						  %% Line 2919
						  <'false'> when 'true' ->
						      %% Line 2920
						      AccState
						  ( <_cor28> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor28})
						    -| ['compiler_generated'] )
						end
					( <_cor29> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor29})
					  -| ['compiler_generated'] )
				      end
			  ( <_cor33,_cor32> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor33,_cor32})
				  -| [{'function_name',{'-state__get_warnings/2-fun-0-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-state__get_warnings/2-fun-0-'}}] )
	      in  let <_cor35> =
		      %% Line 2924
		      call 'dict':'to_list'
			  (TreeMap)
		  in  %% Line 2924
		      case call 'lists':'foldl'
			       (FoldFun, State, _cor35) of
			<{'state',_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,Warn,_cor57,_cor58}> when 'true' ->
			    %% Line 2925
			    Warn
			( <_cor36> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor36})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor38,_cor37> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor38,_cor37})
		  -| [{'function_name',{'state__get_warnings',2}}] )
	    -| ['compiler_generated'] )
	end
'state__is_escaping'/2 =
    %% Line 2927
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Fun,{'state',Callgraph,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14}> when 'true' ->
	      %% Line 2928
	      call 'dialyzer_callgraph':'is_escaping'
		  (Fun, Callgraph)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'state__is_escaping',2}}] )
	    -| ['compiler_generated'] )
	end
'state__lookup_type_for_letrec'/2 =
    %% Line 2930
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Var,State = {'state',Callgraph,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17}> when 'true' ->
	      let <Label> =
		  %% Line 2931
		  apply 'get_label'/1
		      (Var)
	      in  %% Line 2932
		  case call 'dialyzer_callgraph':'lookup_letrec'
			   (Label, Callgraph) of
		    %% Line 2933
		    <'error'> when 'true' ->
			'error'
		    %% Line 2934
		    <{'ok',FunLabel}> when 'true' ->
			let <_cor3> =
			    %% Line 2935
			    apply 'state__fun_type'/2
				(FunLabel, State)
			in  %% Line 2935
			    {'ok',_cor3}
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'state__lookup_type_for_letrec',2}}] )
	    -| ['compiler_generated'] )
	end
'state__lookup_name'/2 =
    %% Line 2938
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <MFA = {_cor5,_cor6,_cor7},{'state',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}> when 'true' ->
	      %% Line 2939
	      MFA
	  %% Line 2940
	  <'top',{'state',_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31}> when 'true' ->
	      %% Line 2941
	      'top'
	  %% Line 2942
	  <Fun,{'state',Callgraph,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42}> when 'true' ->
	      %% Line 2943
	      case call 'dialyzer_callgraph':'lookup_name'
		       (Fun, Callgraph) of
		%% Line 2944
		<{'ok',MFA}> when 'true' ->
		    MFA
		%% Line 2945
		<'error'> when 'true' ->
		    Fun
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'state__lookup_name',2}}] )
	    -| ['compiler_generated'] )
	end
'state__lookup_record'/3 =
    %% Line 2948
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Tag,Arity,{'state',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,Records,_cor20,_cor21,_cor22,_cor23,_cor24}> when 'true' ->
	      %% Line 2949
	      case call 'erl_types':'lookup_record'
		       (Tag, Arity, Records) of
		%% Line 2950
		<{'ok',Fields}> when 'true' ->
		    let <_cor3> =
			%% Line 2951
			call 'erl_types':'t_atom'
			    (Tag)
		    in  let <_cor8> =
			    %% Line 2952
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor6) ->
					  case _cor6 of
					    <[{_X_FieldName,FieldType}|_cor5]> when 'true' ->
						let <_cor7> =
						    apply 'lc$^0'/1
							(_cor5)
						in  ( [FieldType|_cor7]
						      -| ['compiler_generated'] )
					    ( <[_cor4|_cor5]> when 'true' ->
						  apply 'lc$^0'/1
						      (_cor5)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor6> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor6})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (Fields)
			      -| ['list_comprehension'] )
			in  let <_cor9> =
				%% Line 2951
				call 'erl_types':'t_tuple'
				    ([_cor3|_cor8])
			    in  %% Line 2951
				{'ok',_cor9}
		%% Line 2953
		<'error'> when 'true' ->
		    %% Line 2954
		    'error'
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'state__lookup_record',3}}] )
	    -| ['compiler_generated'] )
	end
'state__get_args_and_status'/2 =
    %% Line 2957
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Tree,{'state',_cor6,_cor7,FunTab,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16}> when 'true' ->
	      let <Fun> =
		  %% Line 2958
		  apply 'get_label'/1
		      (Tree)
	      in  %% Line 2959
		  case call 'dict':'find'
			   (Fun, FunTab) of
		    %% Line 2960
		    <{'ok',{'not_handled',{ArgTypes,_cor17}}}> when 'true' ->
			{ArgTypes,'false'}
		    %% Line 2961
		    <{'ok',{ArgTypes,_cor18}}> when 'true' ->
			{ArgTypes,'true'}
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'state__get_args_and_status',2}}] )
	    -| ['compiler_generated'] )
	end
'build_tree_map'/1 =
    %% Line 2964
    fun (_cor0) ->
	let <Fun> =
	    %% Line 2966
	    ( fun (_cor4,_cor3) ->
		  %% Line 2967
		  case call 'cerl':'is_c_fun'
			   (_cor4) of
		    %% Line 2968
		    <'true'> when 'true' ->
			let <_cor1> =
			    %% Line 2969
			    apply 'get_label'/1
				(_cor4)
			in  %% Line 2969
			    call 'dict':'store'
				(_cor1, _cor4, _cor3)
		    %% Line 2970
		    <'false'> when 'true' ->
			_cor3
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-build_tree_map/1-fun-0-'}}] )
	in  let <_cor8> =
		%% Line 2974
		call 'dict':'new'
		    ()
	    in  %% Line 2974
		call 'cerl_trees':'fold'
		    (Fun, _cor8, _cor0)
'init_fun_tab'/5 =
    %% Line 2976
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <['top'|Left],Dict,TreeMap,Callgraph,Plt> when 'true' ->
	      let <_cor5> =
		  %% Line 2977
		  call 'erl_types':'t_none'
		      ()
	      in  let <NewDict> =
		      %% Line 2977
		      call 'dict':'store'
			  ('top', {[],_cor5}, Dict)
		  in  %% Line 2978
		      apply 'init_fun_tab'/5
			  (Left, NewDict, TreeMap, Callgraph, Plt)
	  %% Line 2979
	  <[Fun|Left],Dict,TreeMap,Callgraph,Plt> when 'true' ->
	      let <_cor7> =
		  %% Line 2980
		  call 'dict':'fetch'
		      (Fun, TreeMap)
	      in  let <Arity> =
		      %% Line 2980
		      call 'cerl':'fun_arity'
			  (_cor7)
		  in  let <_cor20> =
			  %% Line 2982
			  case call 'dialyzer_callgraph':'is_escaping'
				   (Fun, Callgraph) of
			    %% Line 2983
			    <'true'> when 'true' ->
				let <_cor9> =
				    %% Line 2984
				    call 'erl_types':'t_any'
					()
				in  let <Args> =
					%% Line 2984
					call 'lists':'duplicate'
					    (Arity, _cor9)
				    in  %% Line 2985
					case apply 'lookup_fun_sig'/3
						 (Fun, Callgraph, Plt) of
					  %% Line 2986
					  <'none'> when 'true' ->
					      let <_cor11> =
						  call 'erl_types':'t_unit'
						      ()
					      in  {Args,_cor11}
					  %% Line 2987
					  <{'value',{RetType,_cor28}}> when 'true' ->
					      %% Line 2988
					      case call 'erl_types':'t_is_none'
						       (RetType) of
						%% Line 2989
						<'true'> when 'true' ->
						    let <_cor12> =
							call 'erl_types':'t_none'
							    ()
						    in  {Args,_cor12}
						%% Line 2990
						<'false'> when 'true' ->
						    let <_cor13> =
							call 'erl_types':'t_unit'
							    ()
						    in  {Args,_cor13}
						( <_cor14> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor14})
						  -| ['compiler_generated'] )
					      end
					  ( <_cor15> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor15})
					    -| ['compiler_generated'] )
					end
			    %% Line 2993
			    <'false'> when 'true' ->
				let <_cor17> =
				    call 'erl_types':'t_none'
					()
				in  let <_cor18> =
					call 'lists':'duplicate'
					    (Arity, _cor17)
				    in  let <_cor16> =
					    call 'erl_types':'t_unit'
						()
					in  {'not_handled',{_cor18,_cor16}}
			    ( <_cor19> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor19})
			      -| ['compiler_generated'] )
			  end
		      in  let <NewDict> =
			      %% Line 2995
			      call 'dict':'store'
				  (Fun, _cor20, Dict)
			  in  %% Line 2996
			      apply 'init_fun_tab'/5
				  (Left, NewDict, TreeMap, Callgraph, Plt)
	  %% Line 2997
	  <[],Dict,_X_TreeMap,_X_Callgraph,_X_Plt> when 'true' ->
	      %% Line 2999
	      Dict
	  ( <_cor27,_cor26,_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25,_cor24,_cor23})
		  -| [{'function_name',{'init_fun_tab',5}}] )
	    -| ['compiler_generated'] )
	end
'state__update_fun_env'/3 =
    %% Line 3001
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Tree,Map,State = {'state',_cor10,Envs,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20}> when 'true' ->
	      let <_cor3> =
		  %% Line 3002
		  apply 'get_label'/1
		      (Tree)
	      in  let <NewEnvs> =
		      %% Line 3002
		      call 'dict':'store'
			  (_cor3, Map, Envs)
		  in  %% Line 3003
		      call 'erlang':'setelement'
			  (3, State, NewEnvs)
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'state__update_fun_env',3}}] )
	    -| ['compiler_generated'] )
	end
'state__fun_env'/2 =
    %% Line 3005
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Tree,{'state',_cor6,Envs,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16}> when 'true' ->
	      let <Fun> =
		  %% Line 3006
		  apply 'get_label'/1
		      (Tree)
	      in  %% Line 3007
		  case call 'dict':'find'
			   (Fun, Envs) of
		    %% Line 3008
		    <'error'> when 'true' ->
			'none'
		    %% Line 3009
		    <{'ok',Map}> when 'true' ->
			Map
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'state__fun_env',2}}] )
	    -| ['compiler_generated'] )
	end
'state__clean_not_called'/1 =
    %% Line 3012
    fun (_cor0) ->
	case _cor0 of
	  <State = {'state',_cor11,_cor12,FunTab,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}> when 'true' ->
	      let <_cor6> =
		  %% Line 3014
		  ( fun (_cor3,_cor2) ->
			case <_cor3,_cor2> of
			  <'top',Entry> when 'true' ->
			      Entry
			  %% Line 3015
			  <_X_Fun,{'not_handled',{Args,_cor22}}> when 'true' ->
			      let <_cor1> =
				  call 'erl_types':'t_none'
				      ()
			      in  {Args,_cor1}
			  %% Line 3016
			  <_X_Fun,Entry> when 'true' ->
			      Entry
			end
		    -| [{'id',{0,0,'-state__clean_not_called/1-fun-0-'}}] )
	      in  let <NewFunTab> =
		      %% Line 3014
		      call 'dict':'map'
			  (_cor6, %% Line 3017
				  FunTab)
		  in  %% Line 3018
		      call 'erlang':'setelement'
			  (4, State, NewFunTab)
	  ( <_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10})
		  -| [{'function_name',{'state__clean_not_called',1}}] )
	    -| ['compiler_generated'] )
	end
'state__all_fun_types'/1 =
    %% Line 3020
    fun (_cor0) ->
	%% Line 3021
	case apply 'state__clean_not_called'/1
		 (_cor0) of
	  <{'state',_cor9,_cor10,FunTab,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}> when 'true' ->
	      let <Tab1> =
		  %% Line 3022
		  call 'dict':'erase'
		      ('top', FunTab)
	      in  let <_cor7> =
		      %% Line 3023
		      ( fun (_cor4,_cor3) ->
			    case <_cor4,_cor3> of
			      <_X_Fun,{Args,Ret}> when 'true' ->
				  call 'erl_types':'t_fun'
				      (Args, Ret)
			      ( <_cor6,_cor5> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor6,_cor5})
				      -| [{'function_name',{'-state__all_fun_types/1-fun-0-',2}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-state__all_fun_types/1-fun-0-'}}] )
		  in  %% Line 3023
		      call 'dict':'map'
			  (_cor7, Tab1)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'state__fun_type'/2 =
    %% Line 3025
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Fun,{'state',_cor8,_cor9,FunTab,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18}> when 'true' ->
	      let <_cor2> =
		  %% Line 3027
		  case <> of
		    <>
			when call 'erlang':'is_integer'
			      (Fun) ->
			Fun
		    %% Line 3028
		    <> when 'true' ->
			apply 'get_label'/1
			    (Fun)
		  end
	      in  %% Line 3032
		  case call 'dict':'find'
			   (_cor2, FunTab) of
		    %% Line 3033
		    <{'ok',{'not_handled',{A,R}}}> when 'true' ->
			%% Line 3034
			call 'erl_types':'t_fun'
			    (A, R)
		    %% Line 3035
		    <{'ok',{A,R}}> when 'true' ->
			%% Line 3036
			call 'erl_types':'t_fun'
			    (A, R)
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'state__fun_type',2}}] )
	    -| ['compiler_generated'] )
	end
'state__update_fun_entry'/4 =
    %% Line 3039
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Tree,ArgTypes,Out0,State = %% Line 3040
				      {'state',CG,_cor28,FunTab,Plt,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36}> when 'true' ->
	      let <Fun> =
		  %% Line 3041
		  apply 'get_label'/1
		      (Tree)
	      in  let <_cor6> =
		      %% Line 3043
		      case <> of
			<>
			    when call 'erlang':'=:='
				  (Fun,
				   'top') ->
			    Out0
			%% Line 3044
			<> when 'true' ->
			    %% Line 3045
			    case apply 'lookup_fun_sig'/3
				     (Fun, CG, Plt) of
			      %% Line 3046
			      <{'value',{SigRet,_cor37}}> when 'true' ->
				  call 'erl_types':'t_inf'
				      (SigRet, Out0)
			      %% Line 3047
			      <'none'> when 'true' ->
				  Out0
			      ( <_cor5> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor5})
				-| ['compiler_generated'] )
			    end
		      end
		  in  let <Out> =
			  %% Line 3050
			  call 'erl_types':'t_limit'
			      (_cor6, 3)
		      in  %% Line 3051
			  case call 'dict':'find'
				   (Fun, FunTab) of
			    <{'ok',{OldArgTypes,OldOut}}> when 'true' ->
				let <_cor13> =
				    %% Line 3052
				    ( fun (_cor11) ->
					  case _cor11 of
					    <{A,B}> when 'true' ->
						call 'erl_types':'t_is_equal'
						    (A, B)
					    ( <_cor12> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor12})
						    -| [{'function_name',{'-state__update_fun_entry/4-fun-0-',1}}] )
					      -| ['compiler_generated'] )
					  end
				      -| [{'id',{0,0,'-state__update_fun_entry/4-fun-0-'}}] )
				in  let <_cor10> =
					%% Line 3053
					call 'lists':'zip'
					    (OldArgTypes, ArgTypes)
				    in  let <SameArgs> =
					    %% Line 3052
					    call 'lists':'all'
						(_cor13, _cor10)
					in  let <SameOut> =
						%% Line 3054
						call 'erl_types':'t_is_equal'
						    (OldOut, Out)
					    in  %% Line 3055
						case <> of
						  %% Line 3056
						  <>
						      when let <_cor16> =
							    call 'erlang':'=:='
								(SameArgs, 'true')
							in  let <_cor17> =
								call 'erlang':'=:='
								    (SameOut, 'true')
							    in  call 'erlang':'and'
								    (_cor16, _cor17) ->
						      %% Line 3060
						      State
						  %% Line 3061
						  <> when 'true' ->
						      let <NewEntry> = {%% Line 3063
							   OldArgTypes,%% Line 3063
								       Out}
						      in  let <NewFunTab> =
							      %% Line 3067
							      call 'dict':'store'
								  (Fun, NewEntry, FunTab)
							  in  let <_cor22> =
								  %% Line 3068
								  call 'erlang':'setelement'
								      (4, State, NewFunTab)
							      in  %% Line 3069
								  apply 'state__add_work_from_fun'/2
								      (Tree, _cor22)
						end
			    ( <_cor9> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor9})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor27,_cor26,_cor25,_cor24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25,_cor24})
		  -| [{'function_name',{'state__update_fun_entry',4}}] )
	    -| ['compiler_generated'] )
	end
'state__add_work_from_fun'/2 =
    %% Line 3072
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Tree,State = {'state',_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,'true',_cor33,_cor34,_cor35}> when 'true' ->
	      %% Line 3073
	      State
	  %% Line 3074
	  <Tree,State = {'state',Callgraph,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,%% Line 3075
										     TreeMap,_cor42,_cor43,_cor44,_cor45}> when 'true' ->
	      %% Line 3076
	      case apply 'get_label'/1
		       (Tree) of
		%% Line 3077
		<'top'> when 'true' ->
		    State
		%% Line 3078
		<Label>
		    when call 'erlang':'is_integer'
			  (Label) ->
		    %% Line 3079
		    case call 'dialyzer_callgraph':'in_neighbours'
			     (Label, Callgraph) of
		      %% Line 3080
		      <'none'> when 'true' ->
			  State
		      %% Line 3081
		      <MFAList> when 'true' ->
			  let <_cor7> =
			      %% Line 3082
			      ( letrec
				    'lc$^0'/1 =
					fun (_cor4) ->
					    case _cor4 of
					      <[%% Line 3083
						MFA|_cor3]> when 'true' ->
						  let <_cor5> =
						      call 'dialyzer_callgraph':'lookup_label'
							  (MFA, Callgraph)
						  in  let <_cor6> =
							  %% Line 3083
							  apply 'lc$^0'/1
							      (_cor3)
						      in  ( [_cor5|_cor6]
							    -| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor4> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor4})
						      -| [{'function_name',{'lc$^0',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^0'/1
					(%% Line 3083
					 MFAList)
				-| ['list_comprehension'] )
			  in  let <_cor14> =
				  %% Line 3085
				  ( letrec
					'lc$^1'/1 =
					    fun (_cor11) ->
						case _cor11 of
						  <[{'ok',L}|_cor10]> when 'true' ->
						      ( case call 'dict':'is_key'
								 (L, TreeMap) of
							  <'true'> when 'true' ->
							      let <_cor12> =
								  apply 'lc$^1'/1
								      (_cor10)
							      in  ( [L|_cor12]
								    -| ['compiler_generated'] )
							  ( <'false'> when 'true' ->
								apply 'lc$^1'/1
								    (_cor10)
							    -| ['compiler_generated'] )
							  ( <_cor13> when 'true' ->
								primop 'match_fail'
								    ({'case_clause',_cor13})
							    -| ['compiler_generated'] )
							end
							-| ['list_comprehension'] )
						  ( <[_cor9|_cor10]> when 'true' ->
							apply 'lc$^1'/1
							    (_cor10)
						    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_cor11> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor11})
							  -| [{'function_name',{'lc$^1',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  apply 'lc$^1'/1
					    (_cor7)
				    -| ['list_comprehension'] )
			      in  let <_cor20> =
				      %% Line 3088
				      ( fun (_cor17,_cor16) ->
					    %% Line 3089
					    apply 'state__add_work'/2
						(_cor17, _cor16)
					-| [{'id',{0,0,'-state__add_work_from_fun/2-fun-0-'}}] )
				  in  %% Line 3088
				      call 'lists':'foldl'
					  (_cor20, %% Line 3090
						   State, _cor14)
		    end
		( <_cor22> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor22})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23})
		  -| [{'function_name',{'state__add_work_from_fun',2}}] )
	    -| ['compiler_generated'] )
	end
'state__add_work'/2 =
    %% Line 3094
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'external',State> when 'true' ->
	      %% Line 3095
	      State
	  %% Line 3096
	  <'top',State> when 'true' ->
	      %% Line 3097
	      State
	  %% Line 3098
	  <Fun,State = {'state',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,Work,_cor17}> when 'true' ->
	      let <NewWork> =
		  %% Line 3099
		  apply 'add_work'/2
		      (Fun, Work)
	      in  %% Line 3100
		  call 'erlang':'setelement'
		      (12, State, NewWork)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'state__add_work',2}}] )
	    -| ['compiler_generated'] )
	end
'state__get_work'/1 =
    %% Line 3102
    fun (_cor0) ->
	case _cor0 of
	  <State = {'state',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,TreeMap,_cor14,_cor15,Work,_cor16}> when 'true' ->
	      %% Line 3103
	      case apply 'get_work'/1
		       (Work) of
		%% Line 3104
		<'none'> when 'true' ->
		    'none'
		%% Line 3105
		<{Fun,NewWork}> when 'true' ->
		    let <_cor4> =
			%% Line 3106
			call 'dict':'fetch'
			    (Fun, TreeMap)
		    in  let <_cor3> =
			    %% Line 3106
			    call 'erlang':'setelement'
				(12, State, NewWork)
			in  %% Line 3106
			    {_cor4,_cor3}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'state__get_work',1}}] )
	    -| ['compiler_generated'] )
	end
'state__lookup_call_site'/2 =
    %% Line 3109
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Tree,{'state',Callgraph,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15}> when 'true' ->
	      let <Label> =
		  %% Line 3110
		  apply 'get_label'/1
		      (Tree)
	      in  %% Line 3111
		  call 'dialyzer_callgraph':'lookup_call_site'
		      (Label, Callgraph)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'state__lookup_call_site',2}}] )
	    -| ['compiler_generated'] )
	end
'state__fun_info'/2 =
    %% Line 3113
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'external',{'state',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27}> when 'true' ->
	      %% Line 3114
	      'external'
	  %% Line 3115
	  <MFA = {_cor28,_cor29,_cor30},{'state',_cor31,_cor32,_cor33,PLT,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41}> when 'true' ->
	      let <_cor4> =
		  %% Line 3117
		  call 'dialyzer_plt':'lookup'
		      (PLT, MFA)
	      in  let <_cor3> =
		      %% Line 3118
		      call 'dialyzer_plt':'lookup_contract'
			  (PLT, MFA)
		  in  let <_cor2> =
			  %% Line 3119
			  call 'erl_types':'t_any'
			      ()
		      in  %% Line 3116
			  {MFA,_cor4,_cor3,_cor2}
	  %% Line 3120
	  <Fun,{'state',CG,_cor42,FunTab,PLT,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50}> when 'true' ->
	      let <Sig,Contract> =
		  %% Line 3122
		  case call 'dialyzer_callgraph':'lookup_name'
			   (Fun, CG) of
		    %% Line 3123
		    <'error'> when 'true' ->
			let <_cor5> =
			    %% Line 3124
			    call 'dialyzer_plt':'lookup'
				(PLT, Fun)
			in  <_cor5,%% Line 3124
				   'none'>
		    %% Line 3125
		    <{'ok',MFA}> when 'true' ->
			let <_cor7> =
			    %% Line 3126
			    call 'dialyzer_plt':'lookup'
				(PLT, MFA)
			in  let <_cor6> =
				%% Line 3126
				call 'dialyzer_plt':'lookup_contract'
				    (PLT, MFA)
			    in  <_cor7,_cor6>
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor8})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor12> =
		      %% Line 3129
		      case call 'dict':'fetch'
			       (Fun, FunTab) of
			%% Line 3130
			<{'not_handled',{_X_Args,Ret}}> when 'true' ->
			    Ret
			%% Line 3131
			<{_X_Args,Ret}> when 'true' ->
			    Ret
			( <_cor11> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor11})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 3134
		      {Fun,Sig,Contract,_cor12}
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'state__fun_info',2}}] )
	    -| ['compiler_generated'] )
	end
'forward_args'/3 =
    %% Line 3136
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Fun,ArgTypes,State = {'state',_cor26,_cor27,FunTab,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,Work,_cor35}> when 'true' ->
	      let <OldArgTypes,OldOut,Fixpoint> =
		  %% Line 3138
		  case call 'dict':'find'
			   (Fun, FunTab) of
		    %% Line 3139
		    <{'ok',{'not_handled',{OldArgTypes0,OldOut0}}}> when 'true' ->
			%% Line 3140
			<OldArgTypes0,OldOut0,'false'>
		    %% Line 3141
		    <{'ok',{OldArgTypes0,OldOut0}}> when 'true' ->
			let <_cor4> =
			    %% Line 3143
			    call 'erl_types':'t_product'
				(ArgTypes)
			in  let <_cor3> =
				%% Line 3143
				call 'erl_types':'t_product'
				    (OldArgTypes0)
			    in  let <_cor5> =
				    %% Line 3143
				    call 'erl_types':'t_is_subtype'
					(_cor4, _cor3)
				in  %% Line 3142
				    <OldArgTypes0,OldOut0,_cor5>
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 3145
		  case Fixpoint of
		    %% Line 3146
		    <'true'> when 'true' ->
			State
		    %% Line 3147
		    <'false'> when 'true' ->
			let <_cor15> =
			    %% Line 3148
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor12) ->
					  case _cor12 of
					    <[%% Line 3149
					      {X,Y}|_cor10]> when 'true' ->
						let <_cor13> =
						    call 'erl_types':'t_sup'
							(X, Y)
						in  let <_cor14> =
							%% Line 3149
							apply 'lc$^0'/1
							    (_cor10)
						    in  ( [_cor13|_cor14]
							  -| ['compiler_generated'] )
					    ( <[_cor9|_cor10]> when 'true' ->
						  %% Line 3149
						  apply 'lc$^0'/1
						      (_cor10)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor12> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor12})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  let <_cor11> =
				      %% Line 3149
				      call 'lists':'zip'
					  (ArgTypes, OldArgTypes)
				  in  apply 'lc$^0'/1
					  (_cor11)
			      -| ['list_comprehension'] )
			in  let <NewWork> =
				%% Line 3150
				apply 'add_work'/2
				    (Fun, Work)
			    in  let <NewFunTab> =
				    %% Line 3154
				    call 'dict':'store'
					(Fun, {_cor15,OldOut}, FunTab)
				in  let <_cor20> =
					%% Line 3155
					call 'erlang':'setelement'
					    (12, State, NewWork)
				    in  %% Line 3155
					call 'erlang':'setelement'
					    (4, _cor20, NewFunTab)
		    ( <_cor22> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor22})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23})
		  -| [{'function_name',{'forward_args',3}}] )
	    -| ['compiler_generated'] )
	end
'state__cleanup'/1 =
    %% Line 3160
    fun (_cor0) ->
	case _cor0 of
	  <{'state',Callgraph,_cor4,_cor5,_cor6,_cor7,%% Line 3161
						      Races,%% Line 3162
							    Records,_cor8,_cor9,_cor10,_cor11,_cor12}> when 'true' ->
	      let <_cor2> =
		  %% Line 3163
		  call 'dialyzer_callgraph':'cleanup'
		      (Callgraph)
	      in  let <_cor1> =
		      %% Line 3164
		      call 'dialyzer_races':'cleanup'
			  (Races)
		  in  %% Line 3163
		      {'state',_cor2,'undefined','undefined','undefined','undefined',_cor1,%% Line 3165
											   Records,'undefined','false',[],'undefined','undefined'}
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'state__cleanup',1}}] )
	    -| ['compiler_generated'] )
	end
'state__duplicate'/1 =
    %% Line 3169
    fun (_cor0) ->
	case _cor0 of
	  <State = {'state',Callgraph,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15}> when 'true' ->
	      let <_rec83> =
		  %% Line 3170
		  call 'dialyzer_callgraph':'duplicate'
		      (Callgraph)
	      in  %% Line 3170
		  call 'erlang':'setelement'
		      (2, State, _rec83)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'state__duplicate',1}}] )
	    -| ['compiler_generated'] )
	end
'dispose_state'/1 =
    %% Line 3174
    fun (_cor0) ->
	case _cor0 of
	  <{'state',Callgraph,_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12}> when 'true' ->
	      %% Line 3175
	      call 'dialyzer_callgraph':'dispose_race_server'
		  (Callgraph)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'dispose_state',1}}] )
	    -| ['compiler_generated'] )
	end
'state__get_callgraph'/1 =
    %% Line 3179
    fun (_cor0) ->
	case _cor0 of
	  <{'state',Callgraph,_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12}> when 'true' ->
	      %% Line 3180
	      Callgraph
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'state__get_callgraph',1}}] )
	    -| ['compiler_generated'] )
	end
'state__get_races'/1 =
    %% Line 3184
    fun (_cor0) ->
	case _cor0 of
	  <{'state',_cor2,_cor3,_cor4,_cor5,_cor6,Races,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12}> when 'true' ->
	      %% Line 3185
	      Races
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'state__get_races',1}}] )
	    -| ['compiler_generated'] )
	end
'state__get_records'/1 =
    %% Line 3189
    fun (_cor0) ->
	case _cor0 of
	  <{'state',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,Records,_cor8,_cor9,_cor10,_cor11,_cor12}> when 'true' ->
	      %% Line 3190
	      Records
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'state__get_records',1}}] )
	    -| ['compiler_generated'] )
	end
'state__put_callgraph'/2 =
    %% Line 3195
    fun (_cor1,_cor0) ->
	%% Line 3196
	case _cor0 of
	  <{'state',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17}> when 'true' ->
	      call 'erlang':'setelement'
		  (2, _cor0, _cor1)
	  ( <_cor18> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','state'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'state__put_races'/2 =
    %% Line 3200
    fun (_cor1,_cor0) ->
	%% Line 3201
	case _cor0 of
	  <{'state',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17}> when 'true' ->
	      call 'erlang':'setelement'
		  (7, _cor0, _cor1)
	  ( <_cor18> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','state'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'state__records_only'/1 =
    %% Line 3205
    fun (_cor0) ->
	case _cor0 of
	  <{'state',_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,Records,_cor9,_cor10,_cor11,_cor12,_cor13}> when 'true' ->
	      let <_cor1> =
		  call 'dialyzer_races':'new'
		      ()
	      in  %% Line 3206
		  {'state','undefined','undefined','undefined','undefined','undefined',_cor1,Records,'undefined','false',[],'undefined','undefined'}
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'state__records_only',1}}] )
	    -| ['compiler_generated'] )
	end
'is_race_analysis_enabled'/1 =
    %% Line 3214
    fun (_cor0) ->
	case _cor0 of
	  <{'state',Callgraph,_cor6,_cor7,_cor8,_cor9,Races,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15}> when 'true' ->
	      let <RaceDetection> =
		  %% Line 3215
		  call 'dialyzer_callgraph':'get_race_detection'
		      (Callgraph)
	      in  let <RaceAnalysis> =
		      %% Line 3216
		      call 'dialyzer_races':'get_race_analysis'
			  (Races)
		  in  %% Line 3217
		      ( case RaceDetection of
			  ( <( 'true'
			       -| ['compiler_generated'] )> when 'true' ->
				RaceAnalysis
			    -| ['compiler_generated'] )
			  ( <( 'false'
			       -| ['compiler_generated'] )> when 'true' ->
				'false'
			    -| ['compiler_generated'] )
			  ( <_cor3> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {( 'badarg'
					    -| ['compiler_generated'] ),_cor3}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'is_race_analysis_enabled',1}}] )
	    -| ['compiler_generated'] )
	end
'get_race_list_and_size'/1 =
    %% Line 3219
    fun (_cor0) ->
	case _cor0 of
	  <{'state',_cor2,_cor3,_cor4,_cor5,_cor6,Races,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12}> when 'true' ->
	      %% Line 3220
	      call 'dialyzer_races':'get_race_list_and_size'
		  (Races)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_race_list_and_size',1}}] )
	    -| ['compiler_generated'] )
	end
'renew_race_code'/1 =
    %% Line 3222
    fun (_cor0) ->
	case _cor0 of
	  <State = {'state',Callgraph,_cor6,_cor7,_cor8,_cor9,Races,_cor10,_cor11,%% Line 3223
										  WarningMode,_cor12,_cor13,_cor14}> when 'true' ->
	      %% Line 3224
	      case WarningMode of
		%% Line 3225
		<'true'> when 'true' ->
		    State
		%% Line 3226
		<'false'> when 'true' ->
		    let <NewCallgraph> =
			%% Line 3227
			call 'dialyzer_callgraph':'renew_race_code'
			    (Races, Callgraph)
		    in  %% Line 3228
			call 'erlang':'setelement'
			    (2, State, NewCallgraph)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'renew_race_code',1}}] )
	    -| ['compiler_generated'] )
	end
'renew_race_public_tables'/2 =
    %% Line 3231
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Var|[]],State = {'state',Callgraph,_cor11,_cor12,_cor13,_cor14,Races,_cor15,_cor16,%% Line 3232
											       WarningMode,_cor17,_cor18,_cor19}> when 'true' ->
	      %% Line 3233
	      case WarningMode of
		%% Line 3234
		<'true'> when 'true' ->
		    State
		%% Line 3235
		<'false'> when 'true' ->
		    %% Line 3237
		    case call 'dialyzer_races':'get_new_table'
			     (Races) of
		      %% Line 3238
		      <'no_t'> when 'true' ->
			  State
		      %% Line 3239
		      <_X_Other> when 'true' ->
			  let <VarLabel> =
			      %% Line 3240
			      apply 'get_label'/1
				  (Var)
			  in  let <NewCallgraph> =
				  %% Line 3242
				  call 'dialyzer_callgraph':'renew_race_public_tables'
				      (VarLabel, Callgraph)
			      in  %% Line 3243
				  call 'erlang':'setelement'
				      (2, State, NewCallgraph)
		    end
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'renew_race_public_tables',2}}] )
	    -| ['compiler_generated'] )
	end
'init_work'/1 =
    %% Line 3253
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 3254
	    call 'sets':'from_list'
		(_cor0)
	in  %% Line 3254
	    {_cor0,[],_cor1}
'get_work'/1 =
    %% Line 3256
    fun (_cor0) ->
	case _cor0 of
	  <{[],[],_X_Set}> when 'true' ->
	      %% Line 3257
	      'none'
	  %% Line 3258
	  <{[H|T],Rev,Set}> when 'true' ->
	      let <_cor1> =
		  %% Line 3259
		  call 'sets':'del_element'
		      (H, Set)
	      in  %% Line 3259
		  {H,{T,Rev,_cor1}}
	  %% Line 3260
	  <{[],Rev,Set}> when 'true' ->
	      let <_cor2> =
		  %% Line 3261
		  call 'lists':'reverse'
		      (Rev)
	      in  %% Line 3261
		  apply 'get_work'/1
		      ({_cor2,[],Set})
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'get_work',1}}] )
	    -| ['compiler_generated'] )
	end
'add_work'/2 =
    %% Line 3263
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <New,Work = {List,Rev,Set}> when 'true' ->
	      %% Line 3264
	      case call 'sets':'is_element'
		       (New, Set) of
		%% Line 3265
		<'true'> when 'true' ->
		    Work
		%% Line 3266
		<'false'> when 'true' ->
		    let <_cor2> =
			call 'sets':'add_element'
			    (New, Set)
		    in  {List,[New|Rev],_cor2}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'add_work',2}}] )
	    -| ['compiler_generated'] )
	end
'get_line'/1 =
    %% Line 3275
    fun (_cor0) ->
	case _cor0 of
	  <[Line|_cor2]>
	      when call 'erlang':'is_integer'
		    (Line) ->
	      Line
	  %% Line 3276
	  <[_cor3|Tail]> when 'true' ->
	      apply 'get_line'/1
		  (Tail)
	  %% Line 3277
	  <[]> when 'true' ->
	      -1
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_line',1}}] )
	    -| ['compiler_generated'] )
	end
'get_file'/1 =
    %% Line 3279
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      []
	  %% Line 3280
	  <[{'file',File}|_cor2]> when 'true' ->
	      File
	  %% Line 3281
	  <[_cor3|Tail]> when 'true' ->
	      apply 'get_file'/1
		  (Tail)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_file',1}}] )
	    -| ['compiler_generated'] )
	end
'is_compiler_generated'/1 =
    %% Line 3283
    fun (_cor0) ->
	%% Line 3284
	( case call 'lists':'member'
		   ('compiler_generated', _cor0) of
	    ( <( 'true'
		 -| ['compiler_generated'] )> when 'true' ->
		  'true'
	      -| ['compiler_generated'] )
	    ( <( 'false'
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor2> =
		      apply 'get_line'/1
			  (_cor0)
		  in  call 'erlang':'<'
			  (_cor2, 1)
	      -| ['compiler_generated'] )
	    ( <_cor1> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {( 'badarg'
			      -| ['compiler_generated'] ),_cor1}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'is_literal_record'/1 =
    %% Line 3286
    fun (_cor0) ->
	let <Ann> =
	    %% Line 3287
	    call 'cerl':'get_ann'
		(_cor0)
	in  %% Line 3288
	    call 'lists':'member'
		('record', Ann)
'format_args'/3 =
    %% Line 3293
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],[],_X_State> when 'true' ->
	      %% Line 3294
	      [40|[41]]
	  %% Line 3295
	  <ArgList0,TypeList,State> when 'true' ->
	      let <ArgList> =
		  %% Line 3296
		  apply 'fold_literals'/1
		      (ArgList0)
	      in  let <_cor4> =
		      %% Line 3297
		      apply 'format_args_1'/3
			  (ArgList, TypeList, State)
		  in  let <_cor5> =
			  %% Line 3297
			  call 'erlang':'++'
			      (_cor4, [41])
		      in  %% Line 3297
			  [40|_cor5]
	end
'format_args_1'/3 =
    %% Line 3299
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Arg|[]],[Type|[]],State> when 'true' ->
	      let <_cor4> =
		  %% Line 3300
		  apply 'format_arg'/1
		      (Arg)
	      in  let <_cor3> =
		      %% Line 3300
		      apply 'format_type'/2
			  (Type, State)
		  in  %% Line 3300
		      call 'erlang':'++'
			  (_cor4, _cor3)
	  %% Line 3301
	  <[Arg|Args],[Type|Types],State> when 'true' ->
	      let <_cor8> =
		  %% Line 3303
		  case call 'cerl':'is_literal'
			   (Arg) of
		    %% Line 3304
		    <'true'> when 'true' ->
			apply 'format_cerl'/1
			    (Arg)
		    %% Line 3305
		    <'false'> when 'true' ->
			let <_cor6> =
			    apply 'format_arg'/1
				(Arg)
			in  let <_cor5> =
				apply 'format_type'/2
				    (Type, State)
			    in  call 'erlang':'++'
				    (_cor6, _cor5)
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor10> =
		      %% Line 3307
		      apply 'format_args_1'/3
			  (Args, Types, State)
		  in  let <_cor11> =
			  %% Line 3307
			  [44|_cor10]
		      in  %% Line 3307
			  call 'erlang':'++'
			      (_cor8, _cor11)
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'format_args_1',3}}] )
	    -| ['compiler_generated'] )
	end
'format_arg'/1 =
    %% Line 3309
    fun (_cor0) ->
	%% Line 3311
	case call 'cerl':'is_c_var'
		 (_cor0) of
	  %% Line 3312
	  <'true'> when 'true' ->
	      %% Line 3313
	      case call 'cerl':'var_name'
		       (_cor0) of
		%% Line 3314
		<Atom>
		    when call 'erlang':'is_atom'
			  (Atom) ->
		    %% Line 3315
		    case call 'erlang':'atom_to_list'
			     (Atom) of
		      %% Line 3316
		      <[99|[111|[114|_cor6]]]> when 'true' ->
			  []
		      %% Line 3317
		      <[114|[101|[99|_cor7]]]> when 'true' ->
			  []
		      %% Line 3318
		      <Name> when 'true' ->
			  call 'erlang':'++'
			      (Name, [58|[58]])
		    end
		%% Line 3320
		<_X_What> when 'true' ->
		    []
	      end
	  %% Line 3322
	  <'false'> when 'true' ->
	      []
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'format_type'/2 =
    %% Line 3328
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Type,{'state',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,R,_cor10,_cor11,_cor12,_cor13,_cor14}> when 'true' ->
	      %% Line 3329
	      call 'erl_types':'t_to_string'
		  (Type, R)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'format_type',2}}] )
	    -| ['compiler_generated'] )
	end
'format_field_diffs'/2 =
    %% Line 3333
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <RecConstruction,{'state',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,R,_cor10,_cor11,_cor12,_cor13,_cor14}> when 'true' ->
	      %% Line 3334
	      call 'erl_types':'record_field_diffs_to_string'
		  (RecConstruction, R)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'format_field_diffs',2}}] )
	    -| ['compiler_generated'] )
	end
'format_sig_args'/2 =
    %% Line 3338
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Type,State = {'state',_cor16,_cor17,_cor18,_cor19,Opaques,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26}> when 'true' ->
	      %% Line 3340
	      case call 'erl_types':'t_fun_args'
		       (Type, Opaques) of
		%% Line 3341
		<[]> when 'true' ->
		    [40|[41]]
		%% Line 3342
		<[SArg|SArgs]> when 'true' ->
		    let <_cor10> =
			%% Line 3343
			apply 'format_type'/2
			    (SArg, State)
		    in  let <_cor9> =
			    %% Line 3344
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor5) ->
					  case _cor5 of
					    <[T|_cor4]> when 'true' ->
						let <_cor6> =
						    apply 'format_type'/2
							(T, State)
						in  let <_cor7> =
							[44|_cor6]
						    in  let <_cor8> =
							    apply 'lc$^0'/1
								(_cor4)
							in  ( [_cor7|_cor8]
							      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[41]
					    ( <_cor5> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor5})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (SArgs)
			      -| ['list_comprehension'] )
			in  let <_cor11> =
				%% Line 3344
				call 'erlang':'++'
				    (_cor10, _cor9)
			    in  let <_cor12> =
				    %% Line 3343
				    [40|_cor11]
				in  %% Line 3343
				    call 'lists':'flatten'
					(_cor12)
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor13})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'format_sig_args',2}}] )
	    -| ['compiler_generated'] )
	end
'format_cerl'/1 =
    %% Line 3347
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 3348
	    call 'cerl':'set_ann'
		(_cor0, [])
	in  let <_cor1> =
		%% Line 3349
		call 'dialyzer_utils':'pp_hook'
		    ()
	    in  %% Line 3348
		call 'cerl_prettypr':'format'
		    (_cor2, %% Line 3349
			    [{'hook',_cor1}|%% Line 3350
					    [{'noann','true'}|[{'paper',100000}|[{'ribbon',100000}]]]])
'format_patterns'/1 =
    %% Line 3355
    fun (_cor0) ->
	let <Pats> =
	    %% Line 3356
	    apply 'fold_literals'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 3357
		call 'cerl':'c_values'
		    (Pats)
	    in  let <NewPats> =
		    %% Line 3357
		    apply 'map_pats'/1
			(_cor2)
		in  let <String> =
			%% Line 3358
			apply 'format_cerl'/1
			    (NewPats)
		    in  %% Line 3359
			case Pats of
			  %% Line 3360
			  <[PosVar|[]]> when 'true' ->
			      let <_cor8> =
				  %% Line 3361
				  ( case call 'cerl':'is_c_var'
					     (PosVar) of
				      ( <( 'true'
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_cor6> =
						call 'cerl':'var_name'
						    (PosVar)
					    in  call 'erlang':'=/='
						    (_cor6, '')
					-| ['compiler_generated'] )
				      ( <( 'false'
					   -| ['compiler_generated'] )> when 'true' ->
					    'false'
					-| ['compiler_generated'] )
				      ( <_cor5> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {( 'badarg'
							-| ['compiler_generated'] ),_cor5}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      in  %% Line 3361
				  case _cor8 of
				    %% Line 3362
				    <'true'> when 'true' ->
					call 'erlang':'++'
					    ([118|[97|[114|[105|[97|[98|[108|[101|[32]]]]]]]]], String)
				    %% Line 3363
				    <'false'> when 'true' ->
					call 'erlang':'++'
					    ([112|[97|[116|[116|[101|[114|[110|[32]]]]]]]], String)
				    ( <_cor9> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor9})
				      -| ['compiler_generated'] )
				  end
			  %% Line 3365
			  <_cor12> when 'true' ->
			      %% Line 3366
			      call 'erlang':'++'
				  ([112|[97|[116|[116|[101|[114|[110|[32]]]]]]]], String)
			end
'map_pats'/1 =
    %% Line 3369
    fun (_cor0) ->
	let <Fun> =
	    %% Line 3370
	    ( fun (_cor4) ->
		  %% Line 3371
		  case call 'cerl':'is_c_var'
			   (_cor4) of
		    %% Line 3372
		    <'true'> when 'true' ->
			%% Line 3373
			case call 'cerl':'var_name'
				 (_cor4) of
			  %% Line 3374
			  <Atom>
			      when call 'erlang':'is_atom'
				    (Atom) ->
			      %% Line 3375
			      case call 'erlang':'atom_to_list'
				       (Atom) of
				%% Line 3376
				<[99|[111|[114|_cor8]]]> when 'true' ->
				    call 'cerl':'c_var'
					('')
				%% Line 3377
				<[114|[101|[99|_cor9]]]> when 'true' ->
				    call 'cerl':'c_var'
					('')
				%% Line 3378
				<_cor10> when 'true' ->
				    call 'cerl':'set_ann'
					(_cor4, [])
			      end
			  %% Line 3380
			  <_X_What> when 'true' ->
			      call 'cerl':'c_var'
				  ('')
			end
		    %% Line 3382
		    <'false'> when 'true' ->
			%% Line 3383
			call 'cerl':'set_ann'
			    (_cor4, [])
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-map_pats/1-fun-0-'}}] )
	in  %% Line 3386
	    call 'cerl_trees':'map'
		(Fun, _cor0)
'fold_literals'/1 =
    %% Line 3388
    fun (_cor0) ->
	%% Line 3389
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[Tree|_cor2]> when 'true' ->
			    let <_cor4> =
				call 'cerl':'fold_literal'
				    (Tree)
			    in  let <_cor5> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [_cor4|_cor5]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'type'/1 =
    %% Line 3391
    fun (_cor0) ->
	let <Folded> =
	    %% Line 3392
	    call 'cerl':'fold_literal'
		(_cor0)
	in  %% Line 3393
	    case call 'cerl':'type'
		     (Folded) of
	      %% Line 3394
	      <'literal'> when 'true' ->
		  {'literal',Folded}
	      %% Line 3395
	      <Type> when 'true' ->
		  Type
	    end
'is_literal'/1 =
    %% Line 3398
    fun (_cor0) ->
	let <Folded> =
	    %% Line 3399
	    call 'cerl':'fold_literal'
		(_cor0)
	in  %% Line 3400
	    case call 'cerl':'is_literal'
		     (Folded) of
	      %% Line 3401
	      <'true'> when 'true' ->
		  {'yes',Folded}
	      %% Line 3402
	      <'false'> when 'true' ->
		  'no'
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
'parent_allows_this'/2 =
    %% Line 3405
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <FunLbl,State = {'state',Callgraph,_cor12,_cor13,Plt,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}> when 'true' ->
	      %% Line 3406
	      case apply 'state__is_escaping'/2
		       (FunLbl, State) of
		%% Line 3407
		<'false'> when 'true' ->
		    'false'
		%% Line 3408
		<'true'> when 'true' ->
		    %% Line 3409
		    case apply 'state__lookup_name'/2
			     (FunLbl, State) of
		      %% Line 3410
		      <{_X_M,_X_F,_X_A}> when 'true' ->
			  'false'
		      %% Line 3411
		      <_cor22> when 'true' ->
			  %% Line 3412
			  case call 'dialyzer_callgraph':'in_neighbours'
				   (FunLbl, Callgraph) of
			    %% Line 3413
			    <[Parent|[]]> when 'true' ->
				%% Line 3414
				case apply 'state__lookup_name'/2
					 (Parent, State) of
				  %% Line 3415
				  <PMFA = {_X_M,_X_F,_X_A}> when 'true' ->
				      %% Line 3416
				      case call 'dialyzer_plt':'lookup_contract'
					       (Plt, PMFA) of
					%% Line 3417
					<'none'> when 'true' ->
					    'false'
					%% Line 3418
					<{'value',C}> when 'true' ->
					    let <GenRet> =
						%% Line 3419
						call 'dialyzer_contracts':'get_contract_return'
						    (C)
					    in  %% Line 3420
						case call 'erl_types':'t_is_fun'
							 (GenRet) of
						  %% Line 3421
						  <'false'> when 'true' ->
						      'false'
						  %% Line 3422
						  <'true'> when 'true' ->
						      let <_cor3> =
							  call 'erl_types':'t_fun_range'
							      (GenRet)
						      in  call 'erl_types':'t_is_unit'
							      (_cor3)
						  ( <_cor4> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor4})
						    -| ['compiler_generated'] )
						end
					( <_cor5> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor5})
					  -| ['compiler_generated'] )
				      end
				  %% Line 3425
				  <_cor23> when 'true' ->
				      'false'
				end
			    %% Line 3427
			    <_cor24> when 'true' ->
				'false'
			  end
		    end
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'parent_allows_this',2}}] )
	    -| ['compiler_generated'] )
	end
'classify_returns'/1 =
    %% Line 3432
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 3433
	    call 'cerl':'fun_body'
		(_cor0)
	in  %% Line 3433
	    case apply 'find_terminals'/1
		     (_cor1) of
	      %% Line 3434
	      <{'false','false'}> when 'true' ->
		  'no_match'
	      %% Line 3435
	      <{'true','false'}> when 'true' ->
		  'only_explicit'
	      %% Line 3436
	      <{'false','true'}> when 'true' ->
		  'only_normal'
	      %% Line 3437
	      <{'true','true'}> when 'true' ->
		  'both'
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
'find_terminals'/1 =
    %% Line 3440
    fun (_cor0) ->
	%% Line 3441
	case call 'cerl':'type'
		 (_cor0) of
	  %% Line 3442
	  <'apply'> when 'true' ->
	      {'false','true'}
	  %% Line 3443
	  <'binary'> when 'true' ->
	      {'false','true'}
	  %% Line 3444
	  <'bitstr'> when 'true' ->
	      {'false','true'}
	  %% Line 3445
	  <'call'> when 'true' ->
	      let <M0> =
		  %% Line 3446
		  call 'cerl':'call_module'
		      (_cor0)
	      in  let <F0> =
		      %% Line 3447
		      call 'cerl':'call_name'
			  (_cor0)
		  in  let <_cor3> =
			  %% Line 3448
			  call 'cerl':'call_args'
			      (_cor0)
		      in  let <A> =
			      %% Line 3448
			      call 'erlang':'length'
				  (_cor3)
			  in  let <_cor6> =
				  %% Line 3449
				  apply 'is_literal'/1
				      (M0)
			      in  let <_cor5> =
				      %% Line 3449
				      apply 'is_literal'/1
					  (F0)
				  in  %% Line 3449
				      case <_cor6,_cor5> of
					%% Line 3450
					<{'yes',LitM},{'yes',LitF}> when 'true' ->
					    let <M> =
						%% Line 3451
						call 'cerl':'concrete'
						    (LitM)
					    in  let <F> =
						    %% Line 3452
						    call 'cerl':'concrete'
							(LitF)
						in  let <_cor12> =
							%% Line 3454
							( case call 'erl_bif_types':'is_known'
								   (M, F, A) of
							    ( <( 'true'
								 -| ['compiler_generated'] )> when 'true' ->
								  let <_cor10> =
								      call 'erl_bif_types':'type'
									  (M, F, A)
								  in  call 'erl_types':'t_is_none'
									  (_cor10)
							      -| ['compiler_generated'] )
							    ( <( 'false'
								 -| ['compiler_generated'] )> when 'true' ->
								  'false'
							      -| ['compiler_generated'] )
							    ( <_cor9> when 'true' ->
								  ( call ( 'erlang'
									   -| ['compiler_generated'] ):( 'error'
													 -| ['compiler_generated'] )
									(( {( 'badarg'
									      -| ['compiler_generated'] ),_cor9}
									   -| ['compiler_generated'] ))
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							  end
							  -| ['compiler_generated'] )
						    in  %% Line 3453
							case _cor12 of
							  %% Line 3455
							  <'true'> when 'true' ->
							      {'true','false'}
							  %% Line 3456
							  <'false'> when 'true' ->
							      {'false','true'}
							  ( <_cor13> when 'true' ->
								primop 'match_fail'
								    ({'case_clause',_cor13})
							    -| ['compiler_generated'] )
							end
					%% Line 3458
					<_fol1120,_fol1121> when 'true' ->
					    %% Line 3460
					    {'true','true'}
				      end
	  %% Line 3462
	  <'case'> when 'true' ->
	      let <_cor15> =
		  call 'cerl':'case_clauses'
		      (_cor0)
	      in  apply 'find_terminals_list'/1
		      (_cor15)
	  %% Line 3463
	  <'catch'> when 'true' ->
	      let <_cor16> =
		  call 'cerl':'catch_body'
		      (_cor0)
	      in  apply 'find_terminals'/1
		      (_cor16)
	  %% Line 3464
	  <'clause'> when 'true' ->
	      let <_cor17> =
		  call 'cerl':'clause_body'
		      (_cor0)
	      in  apply 'find_terminals'/1
		      (_cor17)
	  %% Line 3465
	  <'cons'> when 'true' ->
	      {'false','true'}
	  %% Line 3466
	  <'fun'> when 'true' ->
	      {'false','true'}
	  %% Line 3467
	  <'let'> when 'true' ->
	      let <_cor18> =
		  call 'cerl':'let_body'
		      (_cor0)
	      in  apply 'find_terminals'/1
		      (_cor18)
	  %% Line 3468
	  <'letrec'> when 'true' ->
	      let <_cor19> =
		  call 'cerl':'letrec_body'
		      (_cor0)
	      in  apply 'find_terminals'/1
		      (_cor19)
	  %% Line 3469
	  <'literal'> when 'true' ->
	      {'false','true'}
	  %% Line 3470
	  <'primop'> when 'true' ->
	      {'false','false'}
	  %% Line 3471
	  <'receive'> when 'true' ->
	      let <Timeout> =
		  %% Line 3472
		  call 'cerl':'receive_timeout'
		      (_cor0)
	      in  let <Clauses> =
		      %% Line 3473
		      call 'cerl':'receive_clauses'
			  (_cor0)
		  in  let <_cor25> =
			  %% Line 3474
			  ( case call 'cerl':'is_literal'
				     (Timeout) of
			      ( <( 'true'
				   -| ['compiler_generated'] )> when 'true' ->
				    let <_cor23> =
					%% Line 3475
					call 'cerl':'concrete'
					    (Timeout)
				    in  %% Line 3475
					call 'erlang':'=:='
					    (_cor23, 'infinity')
				-| ['compiler_generated'] )
			      ( <( 'false'
				   -| ['compiler_generated'] )> when 'true' ->
				    'false'
				-| ['compiler_generated'] )
			      ( <_cor22> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {( 'badarg'
						-| ['compiler_generated'] ),_cor22}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      in  %% Line 3474
			  case _cor25 of
			    %% Line 3476
			    <'true'> when 'true' ->
				%% Line 3477
				case <> of
				  <>
				      when call 'erlang':'=:='
					    (Clauses,
					     []) ->
				      {'false','true'}
				  %% Line 3478
				  <> when 'true' ->
				      apply 'find_terminals_list'/1
					  (Clauses)
				end
			    %% Line 3480
			    <'false'> when 'true' ->
				let <_cor26> =
				    call 'cerl':'receive_action'
					(_cor0)
				in  apply 'find_terminals_list'/1
					([_cor26|Clauses])
			    ( <_cor27> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor27})
			      -| ['compiler_generated'] )
			  end
	  %% Line 3482
	  <'seq'> when 'true' ->
	      let <_cor28> =
		  call 'cerl':'seq_body'
		      (_cor0)
	      in  apply 'find_terminals'/1
		      (_cor28)
	  %% Line 3483
	  <'try'> when 'true' ->
	      let <_cor29> =
		  %% Line 3484
		  call 'cerl':'try_handler'
		      (_cor0)
	      in  let <_cor30> =
		      %% Line 3484
		      call 'cerl':'try_body'
			  (_cor0)
		  in  %% Line 3484
		      apply 'find_terminals_list'/1
			  ([_cor29|[_cor30|[]]])
	  %% Line 3485
	  <'tuple'> when 'true' ->
	      {'false','true'}
	  %% Line 3486
	  <'values'> when 'true' ->
	      {'false','true'}
	  %% Line 3487
	  <'var'> when 'true' ->
	      {'false','true'}
	  ( <_cor31> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor31})
	    -| ['compiler_generated'] )
	end
'find_terminals_list'/1 =
    %% Line 3490
    fun (_cor0) ->
	%% Line 3491
	apply 'find_terminals_list'/3
	    (_cor0, 'false', 'false')
'find_terminals_list'/3 =
    %% Line 3493
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Tree|Left],Explicit1,Normal1> when 'true' ->
	      %% Line 3494
	      case apply 'find_terminals'/1
		       (Tree) of
		<{Explicit2,Normal2}> when 'true' ->
		    let <_cor5> =
			%% Line 3495
			call 'erlang':'or'
			    (Explicit1, Explicit2)
		    in  let <_cor4> =
			    %% Line 3495
			    call 'erlang':'or'
				(Normal1, Normal2)
			in  %% Line 3495
			    case <_cor5,_cor4> of
			      %% Line 3496
			      <'true','true'> when 'true' ->
				  ( {'true','true'}
				    -| ['compiler_generated'] )
			      %% Line 3497
			      <NewExplicit,NewNormal> when 'true' ->
				  %% Line 3498
				  apply 'find_terminals_list'/3
				      (Left, NewExplicit, NewNormal)
			    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3500
	  <[],Explicit,Normal> when 'true' ->
	      %% Line 3501
	      {Explicit,Normal}
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'find_terminals_list',3}}] )
	    -| ['compiler_generated'] )
	end
'debug_pp'/2 =
    %% Line 3530
    fun (_cor1,_cor0) ->
	%% Line 3531
	'ok'
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('dialyzer_dataflow')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('dialyzer_dataflow', _cor0)
end