module 'dialyzer_callgraph' ['add_edges'/2,
			     'add_edges'/3,
			     'all_nodes'/1,
			     'cleanup'/1,
			     'delete'/1,
			     'dispose_race_server'/1,
			     'duplicate'/1,
			     'finalize'/1,
			     'get_behaviour_api_calls'/1,
			     'get_depends_on'/2,
			     'get_digraph'/1,
			     'get_named_tables'/1,
			     'get_public_tables'/1,
			     'get_race_code'/1,
			     'get_race_detection'/1,
			     'get_required_by'/2,
			     'in_neighbours'/2,
			     'is_escaping'/2,
			     'is_self_rec'/2,
			     'lookup_call_site'/2,
			     'lookup_label'/2,
			     'lookup_letrec'/2,
			     'lookup_name'/2,
			     'lookup_rec_var'/2,
			     'module_deps'/1,
			     'module_info'/0,
			     'module_info'/1,
			     'module_postorder_from_funs'/2,
			     'modules'/1,
			     'new'/0,
			     'non_local_calls'/1,
			     'put_behaviour_api_calls'/2,
			     'put_digraph'/2,
			     'put_named_tables'/2,
			     'put_public_tables'/2,
			     'put_race_code'/2,
			     'put_race_detection'/2,
			     'race_code_new'/1,
			     'remove_external'/1,
			     'renew_race_code'/2,
			     'renew_race_info'/4,
			     'renew_race_public_tables'/2,
			     'reset_from_funs'/2,
			     'scan_core_tree'/2,
			     'strip_module_deps'/2,
			     'to_dot'/2,
			     'to_ps'/3]
    attributes [%% Line 67
		'export_type' =
		    %% Line 67
		    [{'callgraph',0}|[{'mfa_or_funlbl',0}|[{'callgraph_edge',0}|[{'mod_deps',0}]]]],
		%% Line 33
		'type' =
		    %% Line 33
		    [{'dial_ret',{'type',33,'union',[{'integer',33,0}|[{'integer',34,1}|[{'integer',35,2}]]]},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'dial_warn_tag',{'type',68,'union',[{'atom',68,'warn_return_no_exit'}|[{'atom',68,'warn_return_only_exit'}|[{'atom',69,'warn_not_called'}|[{'atom',69,'warn_non_proper_list'}|[{'atom',70,'warn_matching'}|[{'atom',70,'warn_opaque'}|[{'atom',70,'warn_fun_app'}|[{'atom',71,'warn_failing_call'}|[{'atom',71,'warn_bin_construction'}|[{'atom',72,'warn_contract_types'}|[{'atom',72,'warn_contract_syntax'}|[{'atom',73,'warn_contract_not_equal'}|[{'atom',73,'warn_contract_subtype'}|[{'atom',74,'warn_contract_supertype'}|[{'atom',74,'warn_callgraph'}|[{'atom',75,'warn_umatched_return'}|[{'atom',75,'warn_race_condition'}|[{'atom',76,'warn_behaviour'}|[{'atom',76,'warn_contract_range'}|[{'atom',77,'warn_undefined_callbacks'}|[{'atom',77,'warn_unknown'}]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'file_line',{'type',83,'tuple',[{'remote_type',83,[{'atom',83,'file'}|[{'atom',83,'filename'}|[[]]]]}|[{'type',83,'non_neg_integer',[]}]]},[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{'dial_warning',{'type',84,'tuple',[{'type',84,'dial_warn_tag',[]}|[{'type',84,'file_line',[]}|[{'type',84,'tuple',[{'type',84,'atom',[]}|[{'type',84,'list',[{'type',84,'term',[]}]}]]}]]]},[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{'dial_error',{'type',89,'any',[]},[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{'anal_type',{'type',96,'union',[{'atom',96,'succ_typings'}|[{'atom',96,'plt_build'}]]},[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{'anal_type1',{'type',97,'union',[{'type',97,'anal_type',[]}|[{'atom',97,'plt_add'}|[{'atom',97,'plt_check'}|[{'atom',97,'plt_remove'}]]]]},[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{'contr_constr',{'type',98,'tuple',[{'atom',98,'subtype'}|[{'remote_type',98,[{'atom',98,'erl_types'}|[{'atom',98,'erl_type'}|[[]]]]}|[{'remote_type',98,[{'atom',98,'erl_types'}|[{'atom',98,'erl_type'}|[[]]]]}]]]},[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{'contract_pair',{'type',99,'tuple',[{'remote_type',99,[{'atom',99,'erl_types'}|[{'atom',99,'erl_type'}|[[]]]]}|[{'type',99,'list',[{'type',99,'contr_constr',[]}]}]]},[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{'dial_define',{'type',100,'tuple',[{'type',100,'atom',[]}|[{'type',100,'term',[]}]]},[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{'dial_option',{'type',101,'tuple',[{'type',101,'atom',[]}|[{'type',101,'term',[]}]]},[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{'dial_options',{'type',102,'list',[{'type',102,'dial_option',[]}]},[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{'fopt',{'type',103,'union',[{'atom',103,'basename'}|[{'atom',103,'fullpath'}]]},[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{'format',{'type',104,'union',[{'atom',104,'formatted'}|[{'atom',104,'raw'}]]},[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{'label',{'type',105,'non_neg_integer',[]},[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{'rep_mode',{'type',106,'union',[{'atom',106,'quiet'}|[{'atom',106,'normal'}|[{'atom',106,'verbose'}]]]},[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{'start_from',{'type',107,'union',[{'atom',107,'byte_code'}|[{'atom',107,'src_code'}]]},[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{'mfa_or_funlbl',{'type',108,'union',[{'type',108,'label',[]}|[{'type',108,'mfa',[]}]]},[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{'solver',{'type',109,'union',[{'atom',109,'v1'}|[{'atom',109,'v2'}]]},[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{{'record','analysis'},[{'typed_record_field',{'record_field',115,{'atom',115,'analysis_pid'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'pid',[]}]]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'type'},{'atom',116,'succ_typings'}},{'type',116,'anal_type',[]}}|[{'typed_record_field',{'record_field',117,{'atom',117,'defines'},{'nil',117}},{'type',117,'list',[{'type',117,'dial_define',[]}]}}|[{'typed_record_field',{'record_field',118,{'atom',118,'doc_plt'}},{'type',118,'union',[{'atom',118,'undefined'}|[{'remote_type',118,[{'atom',118,'dialyzer_plt'}|[{'atom',118,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',119,{'atom',119,'files'},{'nil',119}},{'type',119,'list',[{'remote_type',119,[{'atom',119,'file'}|[{'atom',119,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'include_dirs'},{'nil',120}},{'type',120,'list',[{'remote_type',120,[{'atom',120,'file'}|[{'atom',120,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',121,{'atom',121,'start_from'},{'atom',121,'byte_code'}},{'type',121,'start_from',[]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'plt'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'remote_type',122,[{'atom',122,'dialyzer_plt'}|[{'atom',122,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'use_contracts'},{'atom',123,'true'}},{'type',123,'boolean',[]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'race_detection'},{'atom',124,'false'}},{'type',124,'boolean',[]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'behaviours_chk'},{'atom',125,'false'}},{'type',125,'boolean',[]}}|[{'typed_record_field',{'record_field',126,{'atom',126,'timing'},{'atom',126,'false'}},{'type',126,'union',[{'type',126,'boolean',[]}|[{'atom',126,'debug'}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'timing_server'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'remote_type',127,[{'atom',127,'dialyzer_timing'}|[{'atom',127,'timing_server'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'callgraph_file'},{'string',128,[]}},{'remote_type',128,[{'atom',128,'file'}|[{'atom',128,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'solvers'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'list',[{'type',129,'solver',[]}]}]]}}]]]]]]]]]]]]]]],[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{{'record','options'},[{'typed_record_field',{'record_field',131,{'atom',131,'files'},{'nil',131}},{'type',131,'list',[{'remote_type',131,[{'atom',131,'file'}|[{'atom',131,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'files_rec'},{'nil',132}},{'type',132,'list',[{'remote_type',132,[{'atom',132,'file'}|[{'atom',132,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',133,{'atom',133,'analysis_type'},{'atom',133,'succ_typings'}},{'type',133,'anal_type1',[]}}|[{'typed_record_field',{'record_field',134,{'atom',134,'timing'},{'atom',134,'false'}},{'type',134,'union',[{'type',134,'boolean',[]}|[{'atom',134,'debug'}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'defines'},{'nil',135}},{'type',135,'list',[{'type',135,'dial_define',[]}]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'from'},{'atom',136,'byte_code'}},{'type',136,'start_from',[]}}|[{'typed_record_field',{'record_field',137,{'atom',137,'get_warnings'},{'atom',137,'maybe'}},{'type',137,'union',[{'type',137,'boolean',[]}|[{'atom',137,'maybe'}]]}}|[{'typed_record_field',{'record_field',138,{'atom',138,'init_plts'},{'nil',138}},{'type',138,'list',[{'remote_type',138,[{'atom',138,'file'}|[{'atom',138,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',139,{'atom',139,'include_dirs'},{'nil',139}},{'type',139,'list',[{'remote_type',139,[{'atom',139,'file'}|[{'atom',139,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'output_plt'},{'atom',140,'none'}},{'type',140,'union',[{'atom',140,'none'}|[{'remote_type',140,[{'atom',140,'file'}|[{'atom',140,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',141,{'atom',141,'legal_warnings'},{'call',141,{'remote',141,{'atom',141,'ordsets'},{'atom',141,'new'}},[]}},{'remote_type',141,[{'atom',141,'ordsets'}|[{'atom',141,'ordset'}|[[{'type',141,'dial_warn_tag',[]}]]]]}}|[{'typed_record_field',{'record_field',142,{'atom',142,'report_mode'},{'atom',142,'normal'}},{'type',142,'rep_mode',[]}}|[{'typed_record_field',{'record_field',143,{'atom',143,'erlang_mode'},{'atom',143,'false'}},{'type',143,'boolean',[]}}|[{'typed_record_field',{'record_field',144,{'atom',144,'use_contracts'},{'atom',144,'true'}},{'type',144,'boolean',[]}}|[{'typed_record_field',{'record_field',145,{'atom',145,'output_file'},{'atom',145,'none'}},{'type',145,'union',[{'atom',145,'none'}|[{'remote_type',145,[{'atom',145,'file'}|[{'atom',145,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',146,{'atom',146,'output_format'},{'atom',146,'formatted'}},{'type',146,'format',[]}}|[{'typed_record_field',{'record_field',147,{'atom',147,'filename_opt'},{'atom',147,'basename'}},{'type',147,'fopt',[]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'callgraph_file'},{'string',148,[]}},{'remote_type',148,[{'atom',148,'file'}|[{'atom',148,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'check_plt'},{'atom',149,'true'}},{'type',149,'boolean',[]}}|[{'typed_record_field',{'record_field',150,{'atom',150,'solvers'},{'nil',150}},{'type',150,'list',[{'type',150,'solver',[]}]}}]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 152
		'type' =
		    %% Line 152
		    [{{'record','contract'},[{'typed_record_field',{'record_field',152,{'atom',152,'contracts'},{'nil',152}},{'type',152,'list',[{'type',152,'contract_pair',[]}]}}|[{'typed_record_field',{'record_field',153,{'atom',153,'args'},{'nil',153}},{'type',153,'list',[{'remote_type',153,[{'atom',153,'erl_types'}|[{'atom',153,'erl_type'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',154,{'atom',154,'forms'},{'nil',154}},{'type',154,'list',[{'type',154,'tuple',[{'var',154,'_'}|[{'var',154,'_'}]]}]}}]]],[]}],
		%% Line 73
		'type' =
		    %% Line 73
		    [{'scc',{'type',73,'list',[{'type',73,'mfa_or_funlbl',[]}]},[]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{'mfa_call',{'type',74,'tuple',[{'type',74,'mfa_or_funlbl',[]}|[{'type',74,'mfa_or_funlbl',[]}]]},[]}],
		%% Line 75
		'type' =
		    %% Line 75
		    [{'mfa_calls',{'type',75,'list',[{'type',75,'mfa_call',[]}]},[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{'mod_deps',{'remote_type',76,[{'atom',76,'dict'}|[{'atom',76,'dict'}|[[{'type',76,'module',[]}|[{'type',76,'list',[{'type',76,'module',[]}]}]]]]]},[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','callgraph'},[{'typed_record_field',{'record_field',98,{'atom',98,'digraph'},{'call',98,{'remote',98,{'atom',98,'digraph'},{'atom',98,'new'}},[]}},{'remote_type',98,[{'atom',98,'digraph'}|[{'atom',98,'graph'}|[[]]]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'active_digraph'}},{'type',99,'union',[{'atom',99,'undefined'}|[{'type',99,'active_digraph',[]}]]}}|[{'typed_record_field',{'record_field',100,{'atom',100,'esc'}},{'type',100,'union',[{'atom',100,'undefined'}|[{'remote_type',100,[{'atom',100,'ets'}|[{'atom',100,'tid'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',101,{'atom',101,'letrec_map'}},{'type',101,'union',[{'atom',101,'undefined'}|[{'remote_type',101,[{'atom',101,'ets'}|[{'atom',101,'tid'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',102,{'atom',102,'name_map'}},{'type',102,'union',[{'atom',102,'undefined'}|[{'remote_type',102,[{'atom',102,'ets'}|[{'atom',102,'tid'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'rev_name_map'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'remote_type',103,[{'atom',103,'ets'}|[{'atom',103,'tid'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'rec_var_map'}},{'type',104,'union',[{'atom',104,'undefined'}|[{'remote_type',104,[{'atom',104,'ets'}|[{'atom',104,'tid'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',105,{'atom',105,'self_rec'}},{'type',105,'union',[{'atom',105,'undefined'}|[{'remote_type',105,[{'atom',105,'ets'}|[{'atom',105,'tid'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',106,{'atom',106,'calls'}},{'type',106,'union',[{'atom',106,'undefined'}|[{'remote_type',106,[{'atom',106,'ets'}|[{'atom',106,'tid'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',107,{'atom',107,'race_detection'},{'atom',107,'false'}},{'type',107,'boolean',[]}}|[{'typed_record_field',{'record_field',108,{'atom',108,'race_data_server'},{'call',108,{'atom',108,'new_race_data_server'},[]}},{'type',108,'pid',[]}}]]]]]]]]]]],[]}],
		%% Line 110
		'type' =
		    %% Line 110
		    [{{'record','race_data_state'},[{'typed_record_field',{'record_field',110,{'atom',110,'race_code'},{'call',110,{'remote',110,{'atom',110,'dict'},{'atom',110,'new'}},[]}},{'remote_type',110,[{'atom',110,'dict'}|[{'atom',110,'dict'}|[[]]]]}}|[{'typed_record_field',{'record_field',111,{'atom',111,'public_tables'},{'nil',111}},{'type',111,'list',[{'type',111,'label',[]}]}}|[{'typed_record_field',{'record_field',112,{'atom',112,'named_tables'},{'nil',112}},{'type',112,'list',[{'type',112,'string',[]}]}}|[{'typed_record_field',{'record_field',113,{'atom',113,'beh_api_calls'},{'nil',113}},{'type',113,'list',[{'type',113,'tuple',[{'type',113,'mfa',[]}|[{'type',113,'mfa',[]}]]}]}}]]]],[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{'callgraph',{'type',117,'record',[{'atom',117,'callgraph'}]},[]}],
		%% Line 119
		'type' =
		    %% Line 119
		    [{'active_digraph',{'type',119,'union',[{'type',119,'tuple',[{'atom',119,'d'}|[{'remote_type',119,[{'atom',119,'digraph'}|[{'atom',119,'graph'}|[[]]]]}]]}|[{'type',119,'tuple',[{'atom',119,'e'}|[{'remote_type',119,[{'atom',119,'ets'}|[{'atom',119,'tid'}|[[]]]]}|[{'remote_type',119,[{'atom',119,'ets'}|[{'atom',119,'tid'}|[[]]]]}]]]}]]},[]}],
		%% Line 123
		'spec' =
		    %% Line 123
		    [{{'new',0},[{'type',123,'fun',[{'type',123,'product',[]}|[{'type',123,'callgraph',[]}]]}]}],
		%% Line 138
		'spec' =
		    %% Line 138
		    [{{'delete',1},[{'type',138,'fun',[{'type',138,'product',[{'type',138,'callgraph',[]}]}|[{'atom',138,'true'}]]}]}],
		%% Line 143
		'spec' =
		    %% Line 143
		    [{{'all_nodes',1},[{'type',143,'fun',[{'type',143,'product',[{'type',143,'callgraph',[]}]}|[{'type',143,'list',[{'type',143,'mfa',[]}]}]]}]}],
		%% Line 148
		'spec' =
		    %% Line 148
		    [{{'lookup_rec_var',2},[{'type',148,'fun',[{'type',148,'product',[{'type',148,'label',[]}|[{'type',148,'callgraph',[]}]]}|[{'type',148,'union',[{'atom',148,'error'}|[{'type',148,'tuple',[{'atom',148,'ok'}|[{'type',148,'mfa',[]}]]}]]}]]}]}],
		%% Line 154
		'spec' =
		    %% Line 154
		    [{{'lookup_letrec',2},[{'type',154,'fun',[{'type',154,'product',[{'type',154,'label',[]}|[{'type',154,'callgraph',[]}]]}|[{'type',154,'union',[{'atom',154,'error'}|[{'type',154,'tuple',[{'atom',154,'ok'}|[{'type',154,'label',[]}]]}]]}]]}]}],
		%% Line 160
		'spec' =
		    %% Line 160
		    [{{'lookup_call_site',2},[{'type',160,'fun',[{'type',160,'product',[{'type',160,'label',[]}|[{'type',160,'callgraph',[]}]]}|[{'type',160,'union',[{'atom',160,'error'}|[{'type',160,'tuple',[{'atom',160,'ok'}|[{'type',160,'list',[{'var',160,'_'}]}]]}]]}]]}]}],
		%% Line 166
		'spec' =
		    %% Line 166
		    [{{'lookup_name',2},[{'type',166,'fun',[{'type',166,'product',[{'type',166,'label',[]}|[{'type',166,'callgraph',[]}]]}|[{'type',166,'union',[{'atom',166,'error'}|[{'type',166,'tuple',[{'atom',166,'ok'}|[{'type',166,'mfa',[]}]]}]]}]]}]}],
		%% Line 172
		'spec' =
		    %% Line 172
		    [{{'lookup_label',2},[{'type',172,'fun',[{'type',172,'product',[{'type',172,'mfa_or_funlbl',[]}|[{'type',172,'callgraph',[]}]]}|[{'type',172,'union',[{'atom',172,'error'}|[{'type',172,'tuple',[{'atom',172,'ok'}|[{'type',172,'integer',[]}]]}]]}]]}]}],
		%% Line 179
		'spec' =
		    %% Line 179
		    [{{'in_neighbours',2},[{'type',179,'fun',[{'type',179,'product',[{'type',179,'mfa_or_funlbl',[]}|[{'type',179,'callgraph',[]}]]}|[{'type',179,'union',[{'atom',179,'none'}|[{'type',179,'nonempty_list',[{'type',179,'mfa_or_funlbl',[]}]}]]}]]}]}],
		%% Line 191
		'spec' =
		    %% Line 191
		    [{{'is_self_rec',2},[{'type',191,'fun',[{'type',191,'product',[{'type',191,'mfa_or_funlbl',[]}|[{'type',191,'callgraph',[]}]]}|[{'type',191,'boolean',[]}]]}]}],
		%% Line 196
		'spec' =
		    %% Line 196
		    [{{'is_escaping',2},[{'type',196,'fun',[{'type',196,'product',[{'type',196,'label',[]}|[{'type',196,'callgraph',[]}]]}|[{'type',196,'boolean',[]}]]}]}],
		%% Line 201
		'type' =
		    %% Line 201
		    [{'callgraph_edge',{'type',201,'tuple',[{'type',201,'mfa_or_funlbl',[]}|[{'type',201,'mfa_or_funlbl',[]}]]},[]}],
		%% Line 202
		'spec' =
		    %% Line 202
		    [{{'add_edges',2},[{'type',202,'fun',[{'type',202,'product',[{'type',202,'list',[{'type',202,'callgraph_edge',[]}]}|[{'type',202,'callgraph',[]}]]}|[{'atom',202,'ok'}]]}]}],
		%% Line 209
		'spec' =
		    %% Line 209
		    [{{'add_edges',3},[{'type',209,'fun',[{'type',209,'product',[{'type',209,'list',[{'type',209,'callgraph_edge',[]}]}|[{'type',209,'list',[{'type',209,'mfa_or_funlbl',[]}]}|[{'type',209,'callgraph',[]}]]]}|[{'atom',209,'ok'}]]}]}],
		%% Line 215
		'spec' =
		    %% Line 215
		    [{{'remove_external',1},[{'type',215,'fun',[{'type',215,'product',[{'type',215,'callgraph',[]}]}|[{'type',215,'tuple',[{'type',215,'callgraph',[]}|[{'type',215,'list',[{'type',215,'tuple','any'}]}]]}]]}]}],
		%% Line 221
		'spec' =
		    %% Line 221
		    [{{'non_local_calls',1},[{'type',221,'fun',[{'type',221,'product',[{'type',221,'callgraph',[]}]}|[{'type',221,'mfa_calls',[]}]]}]}],
		%% Line 227
		'type' =
		    %% Line 227
		    [{'call_tab',{'remote_type',227,[{'atom',227,'sets'}|[{'atom',227,'set'}|[[{'type',227,'mfa_call',[]}]]]]},[]}],
		%% Line 229
		'spec' =
		    %% Line 229
		    [{{'find_non_local_calls',2},[{'type',229,'fun',[{'type',229,'product',[{'type',229,'list',[{'type',229,'tuple',[{'type',229,'mfa_or_funlbl',[]}|[{'type',229,'mfa_or_funlbl',[]}]]}]}|[{'type',229,'call_tab',[]}]]}|[{'type',230,'mfa_calls',[]}]]}]}],
		%% Line 246
		'spec' =
		    %% Line 246
		    [{{'get_depends_on',2},[{'type',246,'fun',[{'type',246,'product',[{'type',246,'union',[{'type',246,'scc',[]}|[{'type',246,'module',[]}]]}|[{'type',246,'callgraph',[]}]]}|[{'type',246,'list',[{'type',246,'scc',[]}]}]]}]}],
		%% Line 256
		'spec' =
		    %% Line 256
		    [{{'get_required_by',2},[{'type',256,'fun',[{'type',256,'product',[{'type',256,'union',[{'type',256,'scc',[]}|[{'type',256,'module',[]}]]}|[{'type',256,'callgraph',[]}]]}|[{'type',256,'list',[{'type',256,'scc',[]}]}]]}]}],
		%% Line 270
		'spec' =
		    %% Line 270
		    [{{'modules',1},[{'type',270,'fun',[{'type',270,'product',[{'type',270,'callgraph',[]}]}|[{'type',270,'list',[{'type',270,'module',[]}]}]]}]}],
		%% Line 275
		'spec' =
		    %% Line 275
		    [{{'module_postorder',1},[{'type',275,'fun',[{'type',275,'product',[{'type',275,'callgraph',[]}]}|[{'type',275,'tuple',[{'type',275,'list',[{'type',275,'module',[]}]}|[{'type',275,'tuple',[{'atom',275,'d'}|[{'remote_type',275,[{'atom',275,'digraph'}|[{'atom',275,'graph'}|[[]]]]}]]}]]}]]}]}],
		%% Line 295
		'spec' =
		    %% Line 295
		    [{{'module_deps',1},[{'type',295,'fun',[{'type',295,'product',[{'type',295,'callgraph',[]}]}|[{'type',295,'mod_deps',[]}]]}]}],
		%% Line 309
		'spec' =
		    %% Line 309
		    [{{'strip_module_deps',2},[{'type',309,'fun',[{'type',309,'product',[{'type',309,'mod_deps',[]}|[{'remote_type',309,[{'atom',309,'sets'}|[{'atom',309,'set'}|[[{'type',309,'module',[]}]]]]}]]}|[{'type',309,'mod_deps',[]}]]}]}],
		%% Line 318
		'spec' =
		    %% Line 318
		    [{{'finalize',1},[{'type',318,'fun',[{'type',318,'product',[{'type',318,'callgraph',[]}]}|[{'type',318,'tuple',[{'type',318,'list',[{'type',318,'scc',[]}]}|[{'type',318,'callgraph',[]}]]}]]}]}],
		%% Line 324
		'spec' =
		    %% Line 324
		    [{{'reset_from_funs',2},[{'type',324,'fun',[{'type',324,'product',[{'type',324,'list',[{'type',324,'mfa_or_funlbl',[]}]}|[{'type',324,'callgraph',[]}]]}|[{'type',324,'tuple',[{'type',324,'list',[{'type',324,'scc',[]}]}|[{'type',324,'callgraph',[]}]]}]]}]}],
		%% Line 333
		'spec' =
		    %% Line 333
		    [{{'module_postorder_from_funs',2},[{'type',333,'fun',[{'type',333,'product',[{'type',333,'list',[{'type',333,'mfa_or_funlbl',[]}]}|[{'type',333,'callgraph',[]}]]}|[{'type',334,'tuple',[{'type',334,'list',[{'type',334,'module',[]}]}|[{'type',334,'callgraph',[]}]]}]]}]}],
		%% Line 362
		'spec' =
		    %% Line 362
		    [{{'scan_core_tree',2},[{'type',362,'fun',[{'type',362,'product',[{'remote_type',362,[{'atom',362,'cerl'}|[{'atom',362,'c_module'}|[[]]]]}|[{'type',362,'callgraph',[]}]]}|[{'type',363,'tuple',[{'type',363,'list',[{'type',363,'mfa_or_funlbl',[]}]}|[{'type',363,'list',[{'type',363,'callgraph_edge',[]}]}]]}]]}]}],
		%% Line 583
		'spec' =
		    %% Line 583
		    [{{'renew_race_info',4},[{'type',583,'fun',[{'type',583,'product',[{'type',583,'callgraph',[]}|[{'remote_type',583,[{'atom',583,'dict'}|[{'atom',583,'dict'}|[[]]]]}|[{'type',583,'list',[{'type',583,'label',[]}]}|[{'type',583,'list',[{'type',583,'string',[]}]}]]]]}|[{'type',584,'callgraph',[]}]]}]}],
		%% Line 599
		'spec' =
		    %% Line 599
		    [{{'renew_race_code',2},[{'type',599,'fun',[{'type',599,'product',[{'remote_type',599,[{'atom',599,'dialyzer_races'}|[{'atom',599,'races'}|[[]]]]}|[{'type',599,'callgraph',[]}]]}|[{'type',599,'callgraph',[]}]]}]}],
		%% Line 614
		'spec' =
		    %% Line 614
		    [{{'renew_race_public_tables',2},[{'type',614,'fun',[{'type',614,'product',[{'type',614,'label',[]}|[{'type',614,'callgraph',[]}]]}|[{'type',614,'callgraph',[]}]]}]}],
		%% Line 627
		'spec' =
		    %% Line 627
		    [{{'cleanup',1},[{'type',627,'fun',[{'type',627,'product',[{'type',627,'callgraph',[]}]}|[{'type',627,'callgraph',[]}]]}]}],
		%% Line 638
		'spec' =
		    %% Line 638
		    [{{'duplicate',1},[{'type',638,'fun',[{'type',638,'product',[{'type',638,'callgraph',[]}]}|[{'type',638,'callgraph',[]}]]}]}],
		%% Line 644
		'spec' =
		    %% Line 644
		    [{{'dispose_race_server',1},[{'type',644,'fun',[{'type',644,'product',[{'type',644,'callgraph',[]}]}|[{'atom',644,'ok'}]]}]}],
		%% Line 649
		'spec' =
		    %% Line 649
		    [{{'get_digraph',1},[{'type',649,'fun',[{'type',649,'product',[{'type',649,'callgraph',[]}]}|[{'remote_type',649,[{'atom',649,'digraph'}|[{'atom',649,'graph'}|[[]]]]}]]}]}],
		%% Line 654
		'spec' =
		    %% Line 654
		    [{{'get_named_tables',1},[{'type',654,'fun',[{'type',654,'product',[{'type',654,'callgraph',[]}]}|[{'type',654,'list',[{'type',654,'string',[]}]}]]}]}],
		%% Line 659
		'spec' =
		    %% Line 659
		    [{{'get_public_tables',1},[{'type',659,'fun',[{'type',659,'product',[{'type',659,'callgraph',[]}]}|[{'type',659,'list',[{'type',659,'label',[]}]}]]}]}],
		%% Line 664
		'spec' =
		    %% Line 664
		    [{{'get_race_code',1},[{'type',664,'fun',[{'type',664,'product',[{'type',664,'callgraph',[]}]}|[{'remote_type',664,[{'atom',664,'dict'}|[{'atom',664,'dict'}|[[]]]]}]]}]}],
		%% Line 669
		'spec' =
		    %% Line 669
		    [{{'get_race_detection',1},[{'type',669,'fun',[{'type',669,'product',[{'type',669,'callgraph',[]}]}|[{'type',669,'boolean',[]}]]}]}],
		%% Line 674
		'spec' =
		    %% Line 674
		    [{{'get_behaviour_api_calls',1},[{'type',674,'fun',[{'type',674,'product',[{'type',674,'callgraph',[]}]}|[{'type',674,'list',[{'type',674,'tuple',[{'type',674,'mfa',[]}|[{'type',674,'mfa',[]}]]}]}]]}]}],
		%% Line 679
		'spec' =
		    %% Line 679
		    [{{'race_code_new',1},[{'type',679,'fun',[{'type',679,'product',[{'type',679,'callgraph',[]}]}|[{'type',679,'callgraph',[]}]]}]}],
		%% Line 685
		'spec' =
		    %% Line 685
		    [{{'put_digraph',2},[{'type',685,'fun',[{'type',685,'product',[{'remote_type',685,[{'atom',685,'digraph'}|[{'atom',685,'graph'}|[[]]]]}|[{'type',685,'callgraph',[]}]]}|[{'type',685,'callgraph',[]}]]}]}],
		%% Line 690
		'spec' =
		    %% Line 690
		    [{{'put_race_code',2},[{'type',690,'fun',[{'type',690,'product',[{'remote_type',690,[{'atom',690,'dict'}|[{'atom',690,'dict'}|[[]]]]}|[{'type',690,'callgraph',[]}]]}|[{'type',690,'callgraph',[]}]]}]}],
		%% Line 696
		'spec' =
		    %% Line 696
		    [{{'put_race_detection',2},[{'type',696,'fun',[{'type',696,'product',[{'type',696,'boolean',[]}|[{'type',696,'callgraph',[]}]]}|[{'type',696,'callgraph',[]}]]}]}],
		%% Line 701
		'spec' =
		    %% Line 701
		    [{{'put_named_tables',2},[{'type',701,'fun',[{'type',701,'product',[{'type',701,'list',[{'type',701,'string',[]}]}|[{'type',701,'callgraph',[]}]]}|[{'type',701,'callgraph',[]}]]}]}],
		%% Line 708
		'spec' =
		    %% Line 708
		    [{{'put_public_tables',2},[{'type',708,'fun',[{'type',708,'product',[{'type',708,'list',[{'type',708,'label',[]}]}|[{'type',708,'callgraph',[]}]]}|[{'type',708,'callgraph',[]}]]}]}],
		%% Line 715
		'spec' =
		    %% Line 715
		    [{{'put_behaviour_api_calls',2},[{'type',715,'fun',[{'type',715,'product',[{'type',715,'list',[{'type',715,'tuple',[{'type',715,'mfa',[]}|[{'type',715,'mfa',[]}]]}]}|[{'type',715,'callgraph',[]}]]}|[{'type',715,'callgraph',[]}]]}]}],
		%% Line 781
		'spec' =
		    %% Line 781
		    [{{'to_dot',2},[{'type',781,'fun',[{'type',781,'product',[{'type',781,'callgraph',[]}|[{'remote_type',781,[{'atom',781,'file'}|[{'atom',781,'filename'}|[[]]]]}]]}|[{'atom',781,'ok'}]]}]}],
		%% Line 795
		'spec' =
		    %% Line 795
		    [{{'to_ps',3},[{'type',795,'fun',[{'type',795,'product',[{'type',795,'callgraph',[]}|[{'remote_type',795,[{'atom',795,'file'}|[{'atom',795,'filename'}|[[]]]]}|[{'type',795,'string',[]}]]]}|[{'atom',795,'ok'}]]}]}]]
'new'/0 =
    %% Line 125
    fun () ->
	let <_cor5> =
	    %% Line 127
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor2) ->
			  case _cor2 of
			    <[%% Line 128
			      N|_cor1]> when 'true' ->
				let <_cor3> =
				    call 'ets':'new'
					(N, ['public'|[{'read_concurrency','true'}]])
				in  let <_cor4> =
					%% Line 128
					apply 'lc$^0'/1
					    (_cor1)
				    in  ( [_cor3|_cor4]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor2> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor2})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (%% Line 128
		       ['callgraph_esc'|['callgraph_name_map'|['callgraph_rev_name_map'|['callgraph_rec_var_map'|['callgraph_letrec_map'|['callgraph_self_rec'|['callgraph_calls']]]]]]])
	      -| ['list_comprehension'] )
	in  %% Line 126
	    case _cor5 of
	      <[ETSEsc|[ETSNameMap|[ETSRevNameMap|[ETSRecVarMap|[ETSLetrecMap|[ETSSelfRec|[ETSCalls|[]]]]]]]]> when 'true' ->
		  let <_cor8> =
		      call 'digraph':'new'
			  ()
		  in  let <_cor7> =
			  apply 'new_race_data_server'/0
			      ()
		      in  %% Line 130
			  {'callgraph',_cor8,'undefined',ETSEsc,%% Line 131
								ETSLetrecMap,%% Line 132
									     ETSNameMap,%% Line 133
											ETSRevNameMap,%% Line 134
												      ETSRecVarMap,%% Line 135
														   ETSSelfRec,%% Line 136
															      ETSCalls,'false',_cor7}
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor6})
		-| ['compiler_generated'] )
	    end
'delete'/1 =
    %% Line 140
    fun (_cor0) ->
	case _cor0 of
	  <{'callgraph',Digraph,_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11}> when 'true' ->
	      %% Line 141
	      apply 'digraph_delete'/1
		  (Digraph)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'delete',1}}] )
	    -| ['compiler_generated'] )
	end
'all_nodes'/1 =
    %% Line 145
    fun (_cor0) ->
	case _cor0 of
	  <{'callgraph',DG,_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11}> when 'true' ->
	      %% Line 146
	      apply 'digraph_vertices'/1
		  (DG)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'all_nodes',1}}] )
	    -| ['compiler_generated'] )
	end
'lookup_rec_var'/2 =
    %% Line 150
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Label,{'callgraph',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,RecVarMap,_cor10,_cor11,_cor12,_cor13}>
	      when %% Line 151
		call 'erlang':'is_integer'
		    (Label) ->
	      %% Line 152
	      apply 'ets_lookup_dict'/2
		  (Label, RecVarMap)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'lookup_rec_var',2}}] )
	    -| ['compiler_generated'] )
	end
'lookup_letrec'/2 =
    %% Line 156
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Label,{'callgraph',_cor4,_cor5,_cor6,LetrecMap,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13}>
	      when %% Line 157
		call 'erlang':'is_integer'
		    (Label) ->
	      %% Line 158
	      apply 'ets_lookup_dict'/2
		  (Label, LetrecMap)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'lookup_letrec',2}}] )
	    -| ['compiler_generated'] )
	end
'lookup_call_site'/2 =
    %% Line 162
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Label,{'callgraph',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,Calls,_cor12,_cor13}>
	      when %% Line 163
		call 'erlang':'is_integer'
		    (Label) ->
	      %% Line 164
	      apply 'ets_lookup_dict'/2
		  (Label, Calls)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'lookup_call_site',2}}] )
	    -| ['compiler_generated'] )
	end
'lookup_name'/2 =
    %% Line 168
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Label,{'callgraph',_cor4,_cor5,_cor6,_cor7,NameMap,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13}>
	      when %% Line 169
		call 'erlang':'is_integer'
		    (Label) ->
	      %% Line 170
	      apply 'ets_lookup_dict'/2
		  (Label, NameMap)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'lookup_name',2}}] )
	    -| ['compiler_generated'] )
	end
'lookup_label'/2 =
    %% Line 174
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <MFA = {_cor4,_cor5,_cor6},{'callgraph',_cor7,_cor8,_cor9,_cor10,_cor11,RevNameMap,_cor12,_cor13,_cor14,_cor15,_cor16}> when 'true' ->
	      %% Line 175
	      apply 'ets_lookup_dict'/2
		  (MFA, RevNameMap)
	  %% Line 176
	  <Label,{'callgraph',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27}>
	      when call 'erlang':'is_integer'
		    (Label) ->
	      %% Line 177
	      {'ok',Label}
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'lookup_label',2}}] )
	    -| ['compiler_generated'] )
	end
'in_neighbours'/2 =
    %% Line 181
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Label,CG = {'callgraph',Digraph,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16}>
	      when %% Line 182
		call 'erlang':'is_integer'
		    (Label) ->
	      let <_cor3> =
		  %% Line 183
		  case apply 'lookup_name'/2
			   (Label, CG) of
		    %% Line 184
		    <{'ok',Val}> when 'true' ->
			Val
		    %% Line 185
		    <'error'> when 'true' ->
			Label
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 187
		  apply 'digraph_in_neighbours'/2
		      (_cor3, Digraph)
	  %% Line 188
	  <MFA = {_cor17,_cor18,_cor19},{'callgraph',Digraph,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29}> when 'true' ->
	      %% Line 189
	      apply 'digraph_in_neighbours'/2
		  (MFA, Digraph)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'in_neighbours',2}}] )
	    -| ['compiler_generated'] )
	end
'is_self_rec'/2 =
    %% Line 193
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <MfaOrLabel,{'callgraph',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,SelfRecs,_cor11,_cor12,_cor13}> when 'true' ->
	      %% Line 194
	      apply 'ets_lookup_set'/2
		  (MfaOrLabel, SelfRecs)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'is_self_rec',2}}] )
	    -| ['compiler_generated'] )
	end
'is_escaping'/2 =
    %% Line 198
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Label,{'callgraph',_cor4,_cor5,Esc,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13}>
	      when call 'erlang':'is_integer'
		    (Label) ->
	      %% Line 199
	      apply 'ets_lookup_set'/2
		  (Label, Esc)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'is_escaping',2}}] )
	    -| ['compiler_generated'] )
	end
'add_edges'/2 =
    %% Line 204
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_X_CG> when 'true' ->
	      %% Line 205
	      'ok'
	  %% Line 206
	  <Edges,{'callgraph',Digraph,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13}> when 'true' ->
	      %% Line 207
	      apply 'digraph_add_edges'/2
		  (Edges, Digraph)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'add_edges',2}}] )
	    -| ['compiler_generated'] )
	end
'add_edges'/3 =
    %% Line 211
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Edges,MFAs,CG = {'callgraph',DG,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15}> when 'true' ->
	      do  %% Line 212
		  apply 'digraph_confirm_vertices'/2
		      (MFAs, DG)
		  %% Line 213
		  apply 'add_edges'/2
		      (Edges, CG)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'add_edges',3}}] )
	    -| ['compiler_generated'] )
	end
'remove_external'/1 =
    %% Line 217
    fun (_cor0) ->
	case _cor0 of
	  <CG = {'callgraph',DG,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12}> when 'true' ->
	      %% Line 218
	      case apply 'digraph_remove_external'/1
		       (DG) of
		<{_cor13,External}>
		    when call 'erlang':'=:='
			  (_cor13,
			   DG) ->
		    %% Line 219
		    {CG,External}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'remove_external',1}}] )
	    -| ['compiler_generated'] )
	end
'non_local_calls'/1 =
    %% Line 223
    fun (_cor0) ->
	case _cor0 of
	  <{'callgraph',DG,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13}> when 'true' ->
	      let <Edges> =
		  %% Line 224
		  apply 'digraph_edges'/1
		      (DG)
	      in  let <_cor2> =
		      %% Line 225
		      call 'sets':'new'
			  ()
		  in  %% Line 225
		      apply 'find_non_local_calls'/2
			  (Edges, _cor2)
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'non_local_calls',1}}] )
	    -| ['compiler_generated'] )
	end
'find_non_local_calls'/2 =
    %% Line 232
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{{M,_cor7,_cor8},{_cor9,_cor10,_cor11}}|Left],Set>
	      when call 'erlang':'=:='
		    (_cor9,
		     M) ->
	      %% Line 233
	      apply 'find_non_local_calls'/2
		  (Left, Set)
	  %% Line 234
	  <[Edge = {{M1,_cor12,_cor13},{M2,_cor14,_cor15}}|Left],Set>
	      when call 'erlang':'=/='
		    (M1,
		     M2) ->
	      let <_cor2> =
		  %% Line 235
		  call 'sets':'add_element'
		      (Edge, Set)
	      in  %% Line 235
		  apply 'find_non_local_calls'/2
		      (Left, _cor2)
	  %% Line 236
	  <[{{_cor16,_cor17,_cor18},Label}|Left],Set>
	      when call 'erlang':'is_integer'
		    (Label) ->
	      %% Line 237
	      apply 'find_non_local_calls'/2
		  (Left, Set)
	  %% Line 238
	  <[{Label,{_cor19,_cor20,_cor21}}|Left],Set>
	      when call 'erlang':'is_integer'
		    (Label) ->
	      %% Line 239
	      apply 'find_non_local_calls'/2
		  (Left, Set)
	  %% Line 240
	  <[{Label1,Label2}|Left],Set>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(Label1)
		in  let <_cor4> =
			%% Line 241
			call 'erlang':'is_integer'
			    (Label2)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 242
	      apply 'find_non_local_calls'/2
		  (Left, Set)
	  %% Line 243
	  <[],Set> when 'true' ->
	      %% Line 244
	      call 'sets':'to_list'
		  (Set)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'find_non_local_calls',2}}] )
	    -| ['compiler_generated'] )
	end
'get_depends_on'/2 =
    %% Line 248
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <SCC,{'callgraph',_cor5,{'e',Out,_X_In},_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14}> when 'true' ->
	      %% Line 249
	      case apply 'ets_lookup_dict'/2
		       (SCC, Out) of
		%% Line 250
		<{'ok',Value}> when 'true' ->
		    Value
		%% Line 251
		<'error'> when 'true' ->
		    []
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 253
	  <SCC,{'callgraph',_cor15,{'d',DG},_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24}> when 'true' ->
	      %% Line 254
	      call 'digraph':'out_neighbours'
		  (DG, SCC)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'get_depends_on',2}}] )
	    -| ['compiler_generated'] )
	end
'get_required_by'/2 =
    %% Line 258
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <SCC,{'callgraph',_cor5,{'e',_X_Out,In},_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14}> when 'true' ->
	      %% Line 259
	      case apply 'ets_lookup_dict'/2
		       (SCC, In) of
		%% Line 260
		<{'ok',Value}> when 'true' ->
		    Value
		%% Line 261
		<'error'> when 'true' ->
		    []
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 263
	  <SCC,{'callgraph',_cor15,{'d',DG},_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24}> when 'true' ->
	      %% Line 264
	      call 'digraph':'in_neighbours'
		  (DG, SCC)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'get_required_by',2}}] )
	    -| ['compiler_generated'] )
	end
'modules'/1 =
    %% Line 272
    fun (_cor0) ->
	case _cor0 of
	  <{'callgraph',DG,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17}> when 'true' ->
	      let <_cor6> =
		  %% Line 273
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[{M,_X_F,_X_A}|_cor2]> when 'true' ->
				      let <_cor5> =
					  apply 'lc$^0'/1
					      (_cor2)
				      in  ( [M|_cor5]
					    -| ['compiler_generated'] )
				  ( <[_cor1|_cor2]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor2)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor3> =
			    apply 'digraph_vertices'/1
				(DG)
			in  apply 'lc$^0'/1
				(_cor3)
		    -| ['list_comprehension'] )
	      in  %% Line 273
		  call 'ordsets':'from_list'
		      (_cor6)
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'modules',1}}] )
	    -| ['compiler_generated'] )
	end
'module_postorder'/1 =
    %% Line 277
    fun (_cor0) ->
	case _cor0 of
	  <{'callgraph',DG,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28}> when 'true' ->
	      let <_cor2> =
		  %% Line 278
		  call 'sets':'new'
		      ()
	      in  let <_cor1> =
		      %% Line 278
		      apply 'digraph_edges'/1
			  (DG)
		  in  let <Edges> =
			  %% Line 278
			  call 'lists':'foldl'
			      (( 'edge_fold'/2
				 -| [{'id',{0,0,'-module_postorder/1-fun-0-'}}] ), _cor2, _cor1)
		      in  let <_cor9> =
			      %% Line 279
			      ( letrec
				    'lc$^0'/1 =
					fun (_cor7) ->
					    case _cor7 of
					      <[{M,_X_F,_X_A}|_cor5]> when 'true' ->
						  let <_cor8> =
						      apply 'lc$^0'/1
							  (_cor5)
						  in  ( [M|_cor8]
							-| ['compiler_generated'] )
					      ( <[_cor4|_cor5]> when 'true' ->
						    apply 'lc$^0'/1
							(_cor5)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor7> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor7})
						      -| [{'function_name',{'lc$^0',1}}] )
						-| ['compiler_generated'] )
					    end
				in  let <_cor6> =
					apply 'digraph_vertices'/1
					    (DG)
				    in  apply 'lc$^0'/1
					    (_cor6)
				-| ['list_comprehension'] )
			  in  let <Nodes> =
				  %% Line 279
				  call 'sets':'from_list'
				      (_cor9)
			      in  let <MDG> =
				      %% Line 280
				      call 'digraph':'new'
					  (['acyclic'])
				  in  let <_cor12> =
					  %% Line 281
					  call 'sets':'to_list'
					      (Nodes)
				      in  do  %% Line 281
					      apply 'digraph_confirm_vertices'/2
						  (_cor12, MDG)
					      let <Foreach> =
						  %% Line 282
						  ( fun (_cor13) ->
							case _cor13 of
							  <{M1,M2}> when 'true' ->
							      call 'digraph':'add_edge'
								  (MDG, M1, M2)
							  ( <_cor14> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor14})
								  -| [{'function_name',{'-module_postorder/1-fun-1-',1}}] )
							    -| ['compiler_generated'] )
							end
						    -| [{'id',{0,0,'-module_postorder/1-fun-1-'}}] )
					      in  let <_cor16> =
						      %% Line 283
						      call 'sets':'to_list'
							  (Edges)
						  in  do  %% Line 283
							  call 'lists':'foreach'
							      (Foreach, _cor16)
							  let <_cor17> =
							      %% Line 284
							      call 'digraph_utils':'topsort'
								  (MDG)
							  in  %% Line 284
							      {_cor17,{'d',MDG}}
	  ( <_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18})
		  -| [{'function_name',{'module_postorder',1}}] )
	    -| ['compiler_generated'] )
	end
'edge_fold'/2 =
    %% Line 286
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{{M1,_cor5,_cor6},{M2,_cor7,_cor8}},Set> when 'true' ->
	      %% Line 287
	      case <> of
		%% Line 288
		<>
		    when call 'erlang':'=/='
			  (M1,
			   M2) ->
		    call 'sets':'add_element'
			({M1,M2}, Set)
		%% Line 289
		<> when 'true' ->
		    Set
	      end
	  %% Line 291
	  <_cor9,Set> when 'true' ->
	      Set
	end
'module_deps'/1 =
    %% Line 297
    fun (_cor0) ->
	case _cor0 of
	  <{'callgraph',DG,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36}> when 'true' ->
	      let <_cor2> =
		  %% Line 298
		  call 'sets':'new'
		      ()
	      in  let <_cor1> =
		      %% Line 298
		      apply 'digraph_edges'/1
			  (DG)
		  in  let <Edges> =
			  %% Line 298
			  call 'lists':'foldl'
			      (( 'edge_fold'/2
				 -| [{'id',{0,0,'-module_deps/1-fun-0-'}}] ), _cor2, _cor1)
		      in  let <_cor9> =
			      %% Line 299
			      ( letrec
				    'lc$^0'/1 =
					fun (_cor7) ->
					    case _cor7 of
					      <[{M,_X_F,_X_A}|_cor5]> when 'true' ->
						  let <_cor8> =
						      apply 'lc$^0'/1
							  (_cor5)
						  in  ( [M|_cor8]
							-| ['compiler_generated'] )
					      ( <[_cor4|_cor5]> when 'true' ->
						    apply 'lc$^0'/1
							(_cor5)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor7> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor7})
						      -| [{'function_name',{'lc$^0',1}}] )
						-| ['compiler_generated'] )
					    end
				in  let <_cor6> =
					apply 'digraph_vertices'/1
					    (DG)
				    in  apply 'lc$^0'/1
					    (_cor6)
				-| ['list_comprehension'] )
			  in  let <Nodes> =
				  %% Line 299
				  call 'sets':'from_list'
				      (_cor9)
			      in  let <MDG> =
				      %% Line 300
				      call 'digraph':'new'
					  ()
				  in  let <_cor12> =
					  %% Line 301
					  call 'sets':'to_list'
					      (Nodes)
				      in  do  %% Line 301
					      apply 'digraph_confirm_vertices'/2
						  (_cor12, MDG)
					      let <Foreach> =
						  %% Line 302
						  ( fun (_cor13) ->
							case _cor13 of
							  <{M1,M2}> when 'true' ->
							      call 'digraph':'add_edge'
								  (MDG, M1, M2)
							  ( <_cor14> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor14})
								  -| [{'function_name',{'-module_deps/1-fun-1-',1}}] )
							    -| ['compiler_generated'] )
							end
						    -| [{'id',{0,0,'-module_deps/1-fun-1-'}}] )
					      in  let <_cor16> =
						      %% Line 303
						      call 'sets':'to_list'
							  (Edges)
						  in  do  %% Line 303
							  call 'lists':'foreach'
							      (Foreach, _cor16)
							  let <_cor24> =
							      %% Line 304
							      ( letrec
								    'lc$^1'/1 =
									fun (_cor20) ->
									    case _cor20 of
									      <[%% Line 305
										N|_cor18]> when 'true' ->
										  let <_cor21> =
										      call 'digraph':'in_neighbours'
											  (MDG, N)
										  in  let <_cor22> =
											  call 'ordsets':'from_list'
											      (_cor21)
										      in  let <_cor23> =
											      %% Line 305
											      apply 'lc$^1'/1
												  (_cor18)
											  in  ( [{N,_cor22}|_cor23]
												-| ['compiler_generated'] )
									      <[]> when 'true' ->
										  []
									      ( <_cor20> when 'true' ->
										    ( primop 'match_fail'
											  ({'function_clause',_cor20})
										      -| [{'function_name',{'lc$^1',1}}] )
										-| ['compiler_generated'] )
									    end
								in  let <_cor19> =
									%% Line 305
									call 'sets':'to_list'
									    (Nodes)
								    in  apply 'lc$^1'/1
									    (_cor19)
								-| ['list_comprehension'] )
							  in  do  %% Line 306
								  apply 'digraph_delete'/1
								      (MDG)
								  %% Line 307
								  call 'dict':'from_list'
								      (_cor24)
	  ( <_cor26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26})
		  -| [{'function_name',{'module_deps',1}}] )
	    -| ['compiler_generated'] )
	end
'strip_module_deps'/2 =
    %% Line 311
    fun (_cor1,_cor0) ->
	let <FilterFun1> =
	    %% Line 312
	    ( fun (_cor3) ->
		  let <_cor2> =
		      call 'sets':'is_element'
			  (_cor3, _cor0)
		  in  call 'erlang':'not'
			  (_cor2)
	      -| [{'id',{0,0,'-strip_module_deps/2-fun-0-'}}] )
	in  let <MapFun> =
		%% Line 313
		( fun (_cor7,_cor6) ->
		      call 'ordsets':'filter'
			  (FilterFun1, _cor6)
		  -| [{'id',{0,0,'-strip_module_deps/2-fun-1-'}}] )
	    in  let <ModDeps1> =
		    %% Line 314
		    call 'dict':'map'
			(MapFun, _cor1)
		in  let <FilterFun2> =
			%% Line 315
			( fun (_cor13,_cor12) ->
			      call 'erlang':'=/='
				  (_cor12, [])
			  -| [{'id',{0,0,'-strip_module_deps/2-fun-2-'}}] )
		    in  %% Line 316
			call 'dict':'filter'
			    (FilterFun2, ModDeps1)
'finalize'/1 =
    %% Line 320
    fun (_cor0) ->
	case _cor0 of
	  <CG = {'callgraph',DG,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15}> when 'true' ->
	      %% Line 321
	      case apply 'condensation'/1
		       (DG) of
		<{ActiveDG,Postorder}> when 'true' ->
		    let <_cor4> =
			%% Line 322
			call 'erlang':'setelement'
			    (3, CG, ActiveDG)
		    in  %% Line 322
			{Postorder,_cor4}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'finalize',1}}] )
	    -| ['compiler_generated'] )
	end
'reset_from_funs'/2 =
    %% Line 326
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Funs,CG = {'callgraph',DG,ADG,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17}> when 'true' ->
	      do  %% Line 327
		  apply 'active_digraph_delete'/1
		      (ADG)
		  let <SubGraph> =
		      %% Line 328
		      apply 'digraph_reaching_subgraph'/2
			  (Funs, DG)
		  in  %% Line 329
		      case apply 'condensation'/1
			       (SubGraph) of
			<{NewActiveDG,Postorder}> when 'true' ->
			    do  %% Line 330
				apply 'digraph_delete'/1
				    (SubGraph)
				let <_cor6> =
				    %% Line 331
				    call 'erlang':'setelement'
					(3, CG, NewActiveDG)
				in  %% Line 331
				    {Postorder,_cor6}
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor3})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'reset_from_funs',2}}] )
	    -| ['compiler_generated'] )
	end
'module_postorder_from_funs'/2 =
    %% Line 336
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Funs,CG = {'callgraph',DG,%% Line 337
				     ADG,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20}> when 'true' ->
	      do  %% Line 338
		  apply 'active_digraph_delete'/1
		      (ADG)
		  let <SubGraph> =
		      %% Line 339
		      apply 'digraph_reaching_subgraph'/2
			  (Funs, DG)
		  in  let <_cor5> =
			  %% Line 340
			  call 'erlang':'setelement'
			      (2, CG, SubGraph)
		      in  %% Line 340
			  case apply 'module_postorder'/1
				   (_cor5) of
			    <{PO,Active}> when 'true' ->
				do  %% Line 341
				    apply 'digraph_delete'/1
					(SubGraph)
				    let <_cor9> =
					%% Line 342
					call 'erlang':'setelement'
					    (3, CG, Active)
				    in  %% Line 342
					{PO,_cor9}
			    ( <_cor6> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor6})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'module_postorder_from_funs',2}}] )
	    -| ['compiler_generated'] )
	end
'ets_lookup_dict'/2 =
    %% Line 344
    fun (_cor1,_cor0) ->
	%% Line 345
	try
	    call 'ets':'lookup_element'
		(_cor0, _cor1, 2)
	of <_cor2> ->
	    %% Line 346
	    {'ok',_cor2}
	catch <_cor6,_cor5,_cor4> ->
	    %% Line 348
	    'error'
'ets_lookup_set'/2 =
    %% Line 351
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 352
	    call 'ets':'lookup'
		(_cor0, _cor1)
	in  %% Line 352
	    call 'erlang':'=/='
		(_cor2, [])
'scan_core_tree'/2 =
    %% Line 365
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Tree,{'callgraph',_cor56,_cor57,%% Line 366
					   ETSEsc,%% Line 367
						  ETSLetrecMap,%% Line 368
							       ETSNameMap,%% Line 370
									  ETSRevNameMap,%% Line 369
											ETSRecVarMap,%% Line 371
												     ETSSelfRec,ETSCalls,_cor58,_cor59}> when 'true' ->
	      do  %% Line 373
		  apply 'build_maps'/5
		      (Tree, ETSRecVarMap, ETSNameMap, ETSRevNameMap, ETSLetrecMap)
		  %% Line 376
		  case call 'dialyzer_dep':'analyze'
			   (Tree) of
		    <{Deps0,EscapingFuns,Calls,Letrecs}> when 'true' ->
			let <_cor3> =
			    %% Line 377
			    call 'dict':'to_list'
				(Calls)
			in  %% Line 377
			    case call 'ets':'insert'
				     (ETSCalls, _cor3) of
			      <'true'> when 'true' ->
				  let <_cor5> =
				      %% Line 378
				      call 'dict':'to_list'
					  (Letrecs)
				  in  %% Line 378
				      case call 'ets':'insert'
					       (ETSLetrecMap, _cor5) of
					<'true'> when 'true' ->
					    let <_cor11> =
						%% Line 379
						( letrec
						      'lc$^0'/1 =
							  fun (_cor9) ->
							      case _cor9 of
								<[E|_cor8]> when 'true' ->
								    let <_cor10> =
									apply 'lc$^0'/1
									    (_cor8)
								    in  ( [{E}|_cor10]
									  -| ['compiler_generated'] )
								<[]> when 'true' ->
								    []
								( <_cor9> when 'true' ->
								      ( primop 'match_fail'
									    ({'function_clause',_cor9})
									-| [{'function_name',{'lc$^0',1}}] )
								  -| ['compiler_generated'] )
							      end
						  in  apply 'lc$^0'/1
							  (EscapingFuns)
						  -| ['list_comprehension'] )
					    in  %% Line 379
						case call 'ets':'insert'
							 (ETSEsc, _cor11) of
						  <'true'> when 'true' ->
						      let <LabelEdges> =
							  %% Line 381
							  apply 'get_edges_from_deps'/1
							      (Deps0)
						      in  let <_cor19> =
							      %% Line 385
							      ( fun (_cor16,_cor15) ->
								    case <_cor16,_cor15> of
								      <{Key,_cor60},Acc>
									  when call 'erlang':'=:='
										(_cor60,
										 Key) ->
									  %% Line 386
									  case apply 'ets_lookup_dict'/2
										   (Key, ETSNameMap) of
									    %% Line 387
									    <'error'> when 'true' ->
										[Key|Acc]
									    %% Line 388
									    <{'ok',Name}> when 'true' ->
										[Key|[Name|Acc]]
									    ( <_cor14> when 'true' ->
										  primop 'match_fail'
										      ({'case_clause',_cor14})
									      -| ['compiler_generated'] )
									  end
								      %% Line 390
								      <_cor61,Acc> when 'true' ->
									  Acc
								    end
								-| [{'id',{0,0,'-scan_core_tree/2-fun-0-'}}] )
							  in  let <SelfRecs0> =
								  %% Line 385
								  call 'lists':'foldl'
								      (_cor19, %% Line 391
									       [], %% Line 391
										   LabelEdges)
							      in  let <_cor25> =
								      %% Line 392
								      ( letrec
									    'lc$^1'/1 =
										fun (_cor23) ->
										    case _cor23 of
										      <[S|_cor22]> when 'true' ->
											  let <_cor24> =
											      apply 'lc$^1'/1
												  (_cor22)
											  in  ( [{S}|_cor24]
												-| ['compiler_generated'] )
										      <[]> when 'true' ->
											  []
										      ( <_cor23> when 'true' ->
											    ( primop 'match_fail'
												  ({'function_clause',_cor23})
											      -| [{'function_name',{'lc$^1',1}}] )
											-| ['compiler_generated'] )
										    end
									in  apply 'lc$^1'/1
										(SelfRecs0)
									-| ['list_comprehension'] )
								  in  %% Line 392
								      case call 'ets':'insert'
									       (ETSSelfRec, _cor25) of
									<'true'> when 'true' ->
									    let <NamedEdges1> =
										%% Line 394
										apply 'name_edges'/2
										    (LabelEdges, ETSNameMap)
									    in  let <NamedEdges2> =
										    %% Line 400
										    apply 'scan_core_funs'/1
											(Tree)
										in  let <_cor33> =
											%% Line 403
											( letrec
											      'lc$^2'/1 =
												  fun (_cor31) ->
												      case _cor31 of
													<[{X,Y}|_cor30]> when 'true' ->
													    let <_cor32> =
														apply 'lc$^2'/1
														    (_cor30)
													    in  ( [[X|[Y|[]]]|_cor32]
														  -| ['compiler_generated'] )
													( <[_cor29|_cor30]> when 'true' ->
													      apply 'lc$^2'/1
														  (_cor30)
													  -| ['compiler_generated'] )
													<[]> when 'true' ->
													    []
													( <_cor31> when 'true' ->
													      ( primop 'match_fail'
														    ({'function_clause',_cor31})
														-| [{'function_name',{'lc$^2',1}}] )
													  -| ['compiler_generated'] )
												      end
											  in  apply 'lc$^2'/1
												  (NamedEdges1)
											  -| ['list_comprehension'] )
										    in  let <Names1> =
											    %% Line 403
											    call 'lists':'append'
												(_cor33)
											in  let <Names2> =
												%% Line 404
												call 'ordsets':'from_list'
												    (Names1)
											    in  let <Names3> =
												    %% Line 407
												    call 'ordsets':'del_element'
													('top', Names2)
												in  let <_cor43> =
													%% Line 409
													( letrec
													      'lc$^3'/1 =
														  fun (_cor41) ->
														      case _cor41 of
															<[E = {From,To}|_cor38]>
															    when let <_cor39> =
																  call 'erlang':'=/='
																      (From, 'top')
															      in  let <_cor40> =
																      call 'erlang':'=/='
																	  (To, 'top')
																  in  call 'erlang':'and'
																	  (_cor39, _cor40) ->
															    let <_cor42> =
																apply 'lc$^3'/1
																    (_cor38)
															    in  ( [E|_cor42]
																  -| ['compiler_generated'] )
															( <[_cor37|_cor38]> when 'true' ->
															      apply 'lc$^3'/1
																  (_cor38)
															  -| ['compiler_generated'] )
															<[]> when 'true' ->
															    []
															( <_cor41> when 'true' ->
															      ( primop 'match_fail'
																    ({'function_clause',_cor41})
																-| [{'function_name',{'lc$^3',1}}] )
															  -| ['compiler_generated'] )
														      end
													  in  apply 'lc$^3'/1
														  (NamedEdges2)
													  -| ['list_comprehension'] )
												    in  let <_cor51> =
													    %% Line 411
													    ( letrec
														  'lc$^4'/1 =
														      fun (_cor49) ->
															  case _cor49 of
															    <[E = {From,To}|_cor46]>
																when let <_cor47> =
																      call 'erlang':'=/='
																	  (From, 'top')
																  in  let <_cor48> =
																	  call 'erlang':'=/='
																	      (To, 'top')
																      in  call 'erlang':'and'
																	      (_cor47, _cor48) ->
																let <_cor50> =
																    apply 'lc$^4'/1
																	(_cor46)
																in  ( [E|_cor50]
																      -| ['compiler_generated'] )
															    ( <[_cor45|_cor46]> when 'true' ->
																  apply 'lc$^4'/1
																      (_cor46)
															      -| ['compiler_generated'] )
															    <[]> when 'true' ->
																[]
															    ( <_cor49> when 'true' ->
																  ( primop 'match_fail'
																	({'function_clause',_cor49})
																    -| [{'function_name',{'lc$^4',1}}] )
															      -| ['compiler_generated'] )
															  end
													      in  apply 'lc$^4'/1
														      (NamedEdges1)
													      -| ['list_comprehension'] )
													in  let <NamedEdges3> =
														%% Line 412
														call 'erlang':'++'
														    (_cor51, _cor43)
													    in  %% Line 413
														{Names3,NamedEdges3}
									( <_cor26> when 'true' ->
									      primop 'match_fail'
										  ({'badmatch',_cor26})
									  -| ['compiler_generated'] )
								      end
						  ( <_cor12> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor12})
						    -| ['compiler_generated'] )
						end
					( <_cor6> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor6})
					  -| ['compiler_generated'] )
				      end
			      ( <_cor4> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor4})
				-| ['compiler_generated'] )
			    end
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor55,_cor54> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor55,_cor54})
		  -| [{'function_name',{'scan_core_tree',2}}] )
	    -| ['compiler_generated'] )
	end
'build_maps'/5 =
    %% Line 415
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Defs> =
	    %% Line 418
	    call 'cerl':'module_defs'
		(_cor4)
	in  let <_cor6> =
		%% Line 419
		call 'cerl':'module_name'
		    (_cor4)
	    in  let <Mod> =
		    %% Line 419
		    call 'cerl':'atom_val'
			(_cor6)
		in  let <Fun> =
			%% Line 421
			( fun (_cor17) ->
			      case _cor17 of
				<{Var,Function}> when 'true' ->
				    let <FunName> =
					%% Line 422
					call 'cerl':'fname_id'
					    (Var)
				    in  let <Arity> =
					    %% Line 423
					    call 'cerl':'fname_arity'
						(Var)
					in  let <MFA> = {%% Line 424
						 Mod,%% Line 424
						     FunName,%% Line 424
							     Arity}
					    in  let <FunLabel> =
						    %% Line 425
						    apply 'get_label'/1
							(Function)
						in  let <VarLabel> =
							%% Line 426
							apply 'get_label'/1
							    (Var)
						    in  %% Line 427
							case call 'ets':'insert'
								 (_cor0, {VarLabel,FunLabel}) of
							  <'true'> when 'true' ->
							      %% Line 428
							      case call 'ets':'insert'
								       (_cor2, {FunLabel,MFA}) of
								<'true'> when 'true' ->
								    %% Line 429
								    case call 'ets':'insert'
									     (_cor1, {MFA,FunLabel}) of
								      <'true'> when 'true' ->
									  let <_cor25> =
									      %% Line 430
									      call 'ets':'insert'
										  (_cor3, {VarLabel,MFA})
									  in  %% Line 430
									      case _cor25 of
										<'true'> when 'true' ->
										    ( _cor25
										      -| ['compiler_generated'] )
										( <_cor16> when 'true' ->
										      primop 'match_fail'
											  ({'badmatch',_cor16})
										  -| ['compiler_generated'] )
									      end
								      ( <_cor15> when 'true' ->
									    primop 'match_fail'
										({'badmatch',_cor15})
									-| ['compiler_generated'] )
								    end
								( <_cor14> when 'true' ->
								      primop 'match_fail'
									  ({'badmatch',_cor14})
								  -| ['compiler_generated'] )
							      end
							  ( <_cor13> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_cor13})
							    -| ['compiler_generated'] )
							end
				( <_cor18> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor18})
					-| [{'function_name',{'-build_maps/5-fun-0-',1}}] )
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-build_maps/5-fun-0-'}}] )
		    in  %% Line 432
			call 'lists':'foreach'
			    (Fun, Defs)
'get_edges_from_deps'/1 =
    %% Line 434
    fun (_cor0) ->
	let <_cor12> =
	    %% Line 438
	    ( fun (_cor8,_cor7,_cor6) ->
		  case <_cor8,_cor7,_cor6> of
		    <'external',_X_Set,Acc> when 'true' ->
			Acc
		    %% Line 439
		    <Caller,Set,Acc> when 'true' ->
			let <_cor5> =
			    %% Line 440
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor3) ->
					  case _cor3 of
					    <[Callee|_cor2]>
						when %% Line 441
						  call 'erlang':'=/='
						      (Callee,
						       'external') ->
						let <_cor4> =
						    apply 'lc$^0'/1
							(_cor2)
						in  ( [{Caller,Callee}|_cor4]
						      -| ['compiler_generated'] )
					    ( <[Callee|_cor2]> when 'true' ->
						  apply 'lc$^0'/1
						      (_cor2)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor3> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor3})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (Set)
			      -| ['list_comprehension'] )
			in  %% Line 440
			    [_cor5|%% Line 441
				   Acc]
		  end
	      -| [{'id',{0,0,'-get_edges_from_deps/1-fun-0-'}}] )
	in  let <Edges> =
		%% Line 438
		call 'dict':'fold'
		    (_cor12, %% Line 442
			     [], _cor0)
	    in  %% Line 443
		call 'lists':'flatten'
		    (Edges)
'name_edges'/2 =
    %% Line 445
    fun (_cor1,_cor0) ->
	let <MapFun> =
	    %% Line 448
	    ( fun (_cor3) ->
		  %% Line 449
		  case apply 'ets_lookup_dict'/2
			   (_cor3, _cor0) of
		    %% Line 450
		    <'error'> when 'true' ->
			_cor3
		    %% Line 451
		    <{'ok',MFA}> when 'true' ->
			MFA
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-name_edges/2-fun-0-'}}] )
	in  %% Line 454
	    apply 'name_edges'/3
		(_cor1, MapFun, [])
'name_edges'/3 =
    %% Line 456
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{From,To}|Left],MapFun,Acc> when 'true' ->
	      let <NewFrom> =
		  %% Line 457
		  apply MapFun
		      (From)
	      in  let <NewTo> =
		      %% Line 458
		      apply MapFun
			  (To)
		  in  %% Line 459
		      apply 'name_edges'/3
			  (Left, MapFun, [{NewFrom,NewTo}|Acc])
	  %% Line 460
	  <[],_X_MapFun,Acc> when 'true' ->
	      %% Line 461
	      Acc
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'name_edges',3}}] )
	    -| ['compiler_generated'] )
	end
'scan_core_funs'/1 =
    %% Line 463
    fun (_cor0) ->
	let <Defs> =
	    %% Line 464
	    call 'cerl':'module_defs'
		(_cor0)
	in  let <_cor2> =
		%% Line 465
		call 'cerl':'module_name'
		    (_cor0)
	    in  let <Mod> =
		    %% Line 465
		    call 'cerl':'atom_val'
			(_cor2)
		in  let <_cor12> =
			%% Line 466
			( fun (_cor9,_cor8) ->
			      case <_cor9,_cor8> of
				<{Var,Function},Edges> when 'true' ->
				    let <FunName> =
					%% Line 467
					call 'cerl':'fname_id'
					    (Var)
				    in  let <Arity> =
					    %% Line 468
					    call 'cerl':'fname_arity'
						(Var)
					in  let <MFA> = {%% Line 469
						 Mod,%% Line 469
						     FunName,%% Line 469
							     Arity}
					    in  let <_cor7> =
						    %% Line 470
						    apply 'scan_one_core_fun'/2
							(Function, MFA)
						in  %% Line 470
						    [_cor7|Edges]
				( <_cor11,_cor10> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor11,_cor10})
					-| [{'function_name',{'-scan_core_funs/1-fun-0-',2}}] )
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-scan_core_funs/1-fun-0-'}}] )
		    in  let <DeepEdges> =
			    %% Line 466
			    call 'lists':'foldl'
				(_cor12, %% Line 471
					 [], %% Line 471
					     Defs)
			in  %% Line 472
			    call 'lists':'flatten'
				(DeepEdges)
'scan_one_core_fun'/2 =
    %% Line 474
    fun (_cor1,_cor0) ->
	let <FoldFun> =
	    %% Line 475
	    ( fun (_cor15,_cor14) ->
		  %% Line 476
		  case call 'cerl':'type'
			   (_cor15) of
		    %% Line 477
		    <'call'> when 'true' ->
			let <CalleeM> =
			    %% Line 478
			    call 'cerl':'call_module'
				(_cor15)
			in  let <CalleeF> =
				%% Line 479
				call 'cerl':'call_name'
				    (_cor15)
			    in  let <_cor4> =
				    %% Line 480
				    call 'cerl':'call_args'
					(_cor15)
				in  let <A> =
					%% Line 480
					call 'erlang':'length'
					    (_cor4)
				    in  let <_cor8> =
					    %% Line 481
					    ( case call 'cerl':'is_c_atom'
						       (CalleeM) of
						( <( 'true'
						     -| ['compiler_generated'] )> when 'true' ->
						      %% Line 482
						      call 'cerl':'is_c_atom'
							  (CalleeF)
						  -| ['compiler_generated'] )
						( <( 'false'
						     -| ['compiler_generated'] )> when 'true' ->
						      'false'
						  -| ['compiler_generated'] )
						( <_cor6> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {( 'badarg'
								  -| ['compiler_generated'] ),_cor6}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					in  %% Line 481
					    case _cor8 of
					      %% Line 483
					      <'true'> when 'true' ->
						  let <M> =
						      %% Line 484
						      call 'cerl':'atom_val'
							  (CalleeM)
						  in  let <F> =
							  %% Line 485
							  call 'cerl':'atom_val'
							      (CalleeF)
						      in  %% Line 486
							  case call 'erl_bif_types':'is_known'
								   (M, F, A) of
							    %% Line 487
							    <'true'> when 'true' ->
								_cor14
							    %% Line 488
							    <'false'> when 'true' ->
								[{_cor0,{M,F,A}}|_cor14]
							    ( <_cor11> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_cor11})
							      -| ['compiler_generated'] )
							  end
					      %% Line 490
					      <'false'> when 'true' ->
						  _cor14
					      ( <_cor12> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor12})
						-| ['compiler_generated'] )
					    end
		    %% Line 494
		    <_cor21> when 'true' ->
			_cor14
		  end
	      -| [{'id',{0,0,'-scan_one_core_fun/2-fun-0-'}}] )
	in  %% Line 499
	    call 'cerl_trees':'fold'
		(FoldFun, [], _cor1)
'get_label'/1 =
    %% Line 501
    fun (_cor0) ->
	%% Line 502
	case call 'cerl':'get_ann'
		 (_cor0) of
	  %% Line 503
	  <[{'label',L}|_cor3]>
	      when call 'erlang':'is_integer'
		    (L) ->
	      L
	  %% Line 504
	  <_cor4> when 'true' ->
	      call 'erlang':'error'
		  ({'missing_label',_cor0})
	end
'digraph_add_edges'/2 =
    %% Line 511
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{From,To}|Left],DG> when 'true' ->
	      do  %% Line 512
		  apply 'digraph_add_edge'/3
		      (From, To, DG)
		  %% Line 513
		  apply 'digraph_add_edges'/2
		      (Left, DG)
	  %% Line 514
	  <[],_X_DG> when 'true' ->
	      %% Line 515
	      'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'digraph_add_edges',2}}] )
	    -| ['compiler_generated'] )
	end
'digraph_add_edge'/3 =
    %% Line 517
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 518
	    case call 'digraph':'vertex'
		     (_cor0, _cor2) of
	      %% Line 519
	      <'false'> when 'true' ->
		  call 'digraph':'add_vertex'
		      (_cor0, _cor2)
	      %% Line 520
	      <{_cor8,_cor9}>
		  when call 'erlang':'=:='
			(_cor8,
			 _cor2) ->
		  'ok'
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor3})
		-| ['compiler_generated'] )
	    end
	    do  %% Line 522
		case call 'digraph':'vertex'
			 (_cor0, _cor1) of
		  %% Line 523
		  <'false'> when 'true' ->
		      call 'digraph':'add_vertex'
			  (_cor0, _cor1)
		  %% Line 524
		  <{_cor10,_cor11}>
		      when call 'erlang':'=:='
			    (_cor10,
			     _cor1) ->
		      'ok'
		  ( <_cor4> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor4})
		    -| ['compiler_generated'] )
		end
		do  %% Line 526
		    call 'digraph':'add_edge'
			(_cor0, {_cor2,_cor1}, _cor2, _cor1, [])
		    %% Line 527
		    'ok'
'digraph_confirm_vertices'/2 =
    %% Line 529
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[MFA|Left],DG> when 'true' ->
	      do  %% Line 530
		  call 'digraph':'add_vertex'
		      (DG, MFA, 'confirmed')
		  %% Line 531
		  apply 'digraph_confirm_vertices'/2
		      (Left, DG)
	  %% Line 532
	  <[],_X_DG> when 'true' ->
	      %% Line 533
	      'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'digraph_confirm_vertices',2}}] )
	    -| ['compiler_generated'] )
	end
'digraph_remove_external'/1 =
    %% Line 535
    fun (_cor0) ->
	let <Vertices> =
	    %% Line 536
	    call 'digraph':'vertices'
		(_cor0)
	in  let <Unconfirmed> =
		%% Line 537
		apply 'remove_unconfirmed'/2
		    (Vertices, _cor0)
	    in  %% Line 538
		{_cor0,Unconfirmed}
'remove_unconfirmed'/2 =
    %% Line 540
    fun (_cor1,_cor0) ->
	%% Line 541
	apply 'remove_unconfirmed'/3
	    (_cor1, _cor0, [])
'remove_unconfirmed'/3 =
    %% Line 543
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[V|Left],DG,Unconfirmed> when 'true' ->
	      %% Line 544
	      case call 'digraph':'vertex'
		       (DG, V) of
		%% Line 545
		<{_cor15,'confirmed'}>
		    when call 'erlang':'=:='
			  (_cor15,
			   V) ->
		    apply 'remove_unconfirmed'/3
			(Left, DG, Unconfirmed)
		%% Line 546
		<{_cor16,[]}>
		    when call 'erlang':'=:='
			  (_cor16,
			   V) ->
		    apply 'remove_unconfirmed'/3
			(Left, DG, [V|Unconfirmed])
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 548
	  <[],DG,Unconfirmed> when 'true' ->
	      let <_cor9> =
		  %% Line 549
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor6) ->
				case _cor6 of
				  <[V|_cor5]> when 'true' ->
				      let <_cor7> =
					  call 'digraph':'in_edges'
					      (DG, V)
				      in  let <_cor8> =
					      apply 'lc$^0'/1
						  (_cor5)
					  in  ( [_cor7|_cor8]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor6> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor6})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Unconfirmed)
		    -| ['list_comprehension'] )
	      in  let <BadCalls> =
		      %% Line 549
		      call 'lists':'append'
			  (_cor9)
		  in  let <BadCallsSorted> =
			  %% Line 550
			  call 'lists':'keysort'
			      (1, BadCalls)
		      in  do  %% Line 551
			      call 'digraph':'del_vertices'
				  (DG, Unconfirmed)
			      %% Line 552
			      BadCallsSorted
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'remove_unconfirmed',3}}] )
	    -| ['compiler_generated'] )
	end
'digraph_delete'/1 =
    %% Line 554
    fun (_cor0) ->
	%% Line 555
	call 'digraph':'delete'
	    (_cor0)
'active_digraph_delete'/1 =
    %% Line 557
    fun (_cor0) ->
	case _cor0 of
	  <{'d',DG}> when 'true' ->
	      %% Line 558
	      call 'digraph':'delete'
		  (DG)
	  %% Line 559
	  <{'e',Out,In}> when 'true' ->
	      do  %% Line 560
		  call 'ets':'delete'
		      (Out)
		  %% Line 561
		  call 'ets':'delete'
		      (In)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'active_digraph_delete',1}}] )
	    -| ['compiler_generated'] )
	end
'digraph_edges'/1 =
    %% Line 563
    fun (_cor0) ->
	%% Line 564
	call 'digraph':'edges'
	    (_cor0)
'digraph_vertices'/1 =
    %% Line 566
    fun (_cor0) ->
	%% Line 567
	call 'digraph':'vertices'
	    (_cor0)
'digraph_in_neighbours'/2 =
    %% Line 569
    fun (_cor1,_cor0) ->
	%% Line 570
	case call 'digraph':'in_neighbours'
		 (_cor0, _cor1) of
	  %% Line 571
	  <[]> when 'true' ->
	      'none'
	  %% Line 572
	  <List> when 'true' ->
	      List
	end
'digraph_reaching_subgraph'/2 =
    %% Line 575
    fun (_cor1,_cor0) ->
	let <Vertices> =
	    %% Line 576
	    call 'digraph_utils':'reaching'
		(_cor1, _cor0)
	in  %% Line 577
	    call 'digraph_utils':'subgraph'
		(_cor0, Vertices)
'renew_race_info'/4 =
    %% Line 586
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <CG = {'callgraph',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,RaceDataServer},%% Line 587
														  RaceCode,%% Line 587
															   PublicTables,%% Line 587
																	NamedTables> when 'true' ->
	      %% Line 588
	      case apply 'race_data_server_cast'/2
		       (%% Line 589
			{'renew_race_info',{RaceCode,PublicTables,NamedTables}}, %% Line 590
										 RaceDataServer) of
		<'ok'> when 'true' ->
		    %% Line 591
		    CG
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'renew_race_info',4}}] )
	    -| ['compiler_generated'] )
	end
'renew_race_info'/2 =
    %% Line 593
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{RaceCode,PublicTables,NamedTables},State = %% Line 594
						       {'race_data_state',_cor6,_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 597
	      {'race_data_state',RaceCode,PublicTables,NamedTables,_cor9}
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'renew_race_info',2}}] )
	    -| ['compiler_generated'] )
	end
'renew_race_code'/2 =
    %% Line 601
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Races,CG = {'callgraph',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,RaceDataServer}> when 'true' ->
	      let <Fun> =
		  %% Line 602
		  call 'dialyzer_races':'get_curr_fun'
		      (Races)
	      in  let <FunArgs> =
		      %% Line 603
		      call 'dialyzer_races':'get_curr_fun_args'
			  (Races)
		  in  let <_cor4> =
			  %% Line 604
			  call 'dialyzer_races':'get_race_list'
			      (Races)
		      in  let <Code> =
			      %% Line 604
			      call 'lists':'reverse'
				  (_cor4)
			  in  %% Line 605
			      case apply 'race_data_server_cast'/2
				       (%% Line 606
					{'renew_race_code',{Fun,FunArgs,Code}}, %% Line 607
										RaceDataServer) of
				<'ok'> when 'true' ->
				    %% Line 608
				    CG
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor6})
				  -| ['compiler_generated'] )
			      end
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'renew_race_code',2}}] )
	    -| ['compiler_generated'] )
	end
'renew_race_code_handler'/2 =
    %% Line 610
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Fun,FunArgs,Code},State = %% Line 611
				      {'race_data_state',RaceCode,_cor7,_cor8,_cor9}> when 'true' ->
	      let <_rec9> =
		  %% Line 612
		  call 'dict':'store'
		      (Fun, [FunArgs|[Code|[]]], RaceCode)
	      in  %% Line 612
		  call 'erlang':'setelement'
		      (2, State, _rec9)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'renew_race_code_handler',2}}] )
	    -| ['compiler_generated'] )
	end
'renew_race_public_tables'/2 =
    %% Line 616
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <VarLabel,CG = %% Line 617
			 {'callgraph',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,RaceDataServer}> when 'true' ->
	      %% Line 618
	      case %% Line 619
		   apply 'race_data_server_cast'/2
		       ({'renew_race_public_tables',VarLabel}, RaceDataServer) of
		<'ok'> when 'true' ->
		    %% Line 620
		    CG
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'renew_race_public_tables',2}}] )
	    -| ['compiler_generated'] )
	end
'renew_race_public_tables_handler'/2 =
    %% Line 622
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <VarLabel,State = %% Line 623
			    {'race_data_state',_cor7,PT,_cor8,_cor9}> when 'true' ->
	      let <_rec11> =
		  %% Line 625
		  call 'ordsets':'add_element'
		      (VarLabel, PT)
	      in  %% Line 625
		  call 'erlang':'setelement'
		      (3, State, _rec11)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'renew_race_public_tables_handler',2}}] )
	    -| ['compiler_generated'] )
	end
'cleanup'/1 =
    %% Line 629
    fun (_cor0) ->
	case _cor0 of
	  <{'callgraph',Digraph,_cor3,_cor4,_cor5,%% Line 630
						  NameMap,%% Line 631
							  RevNameMap,_cor6,_cor7,_cor8,_cor9,%% Line 632
											     RaceDataServer}> when 'true' ->
	      let <_cor1> =
		  %% Line 636
		  apply 'race_data_server_call'/2
		      ('dup', RaceDataServer)
	      in  %% Line 633
		  {'callgraph',Digraph,'undefined','undefined','undefined',%% Line 634
									   NameMap,%% Line 635
										   RevNameMap,'undefined','undefined','undefined','false',_cor1}
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'cleanup',1}}] )
	    -| ['compiler_generated'] )
	end
'duplicate'/1 =
    %% Line 640
    fun (_cor0) ->
	case _cor0 of
	  <Callgraph = {'callgraph',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,RaceDataServer}> when 'true' ->
	      let <_rec13> =
		  %% Line 642
		  apply 'race_data_server_call'/2
		      ('dup', RaceDataServer)
	      in  %% Line 642
		  call 'erlang':'setelement'
		      (12, Callgraph, _rec13)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'duplicate',1}}] )
	    -| ['compiler_generated'] )
	end
'dispose_race_server'/1 =
    %% Line 646
    fun (_cor0) ->
	case _cor0 of
	  <{'callgraph',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,RaceDataServer}> when 'true' ->
	      %% Line 647
	      apply 'race_data_server_cast'/2
		  ('stop', RaceDataServer)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'dispose_race_server',1}}] )
	    -| ['compiler_generated'] )
	end
'get_digraph'/1 =
    %% Line 651
    fun (_cor0) ->
	case _cor0 of
	  <{'callgraph',Digraph,_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11}> when 'true' ->
	      %% Line 652
	      Digraph
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_digraph',1}}] )
	    -| ['compiler_generated'] )
	end
'get_named_tables'/1 =
    %% Line 656
    fun (_cor0) ->
	case _cor0 of
	  <{'callgraph',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,RaceDataServer}> when 'true' ->
	      %% Line 657
	      apply 'race_data_server_call'/2
		  ('get_named_tables', RaceDataServer)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_named_tables',1}}] )
	    -| ['compiler_generated'] )
	end
'get_public_tables'/1 =
    %% Line 661
    fun (_cor0) ->
	case _cor0 of
	  <{'callgraph',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,RaceDataServer}> when 'true' ->
	      %% Line 662
	      apply 'race_data_server_call'/2
		  ('get_public_tables', RaceDataServer)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_public_tables',1}}] )
	    -| ['compiler_generated'] )
	end
'get_race_code'/1 =
    %% Line 666
    fun (_cor0) ->
	case _cor0 of
	  <{'callgraph',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,RaceDataServer}> when 'true' ->
	      %% Line 667
	      apply 'race_data_server_call'/2
		  ('get_race_code', RaceDataServer)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_race_code',1}}] )
	    -| ['compiler_generated'] )
	end
'get_race_detection'/1 =
    %% Line 671
    fun (_cor0) ->
	case _cor0 of
	  <{'callgraph',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,RD,_cor11}> when 'true' ->
	      %% Line 672
	      RD
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_race_detection',1}}] )
	    -| ['compiler_generated'] )
	end
'get_behaviour_api_calls'/1 =
    %% Line 676
    fun (_cor0) ->
	case _cor0 of
	  <{'callgraph',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,RaceDataServer}> when 'true' ->
	      %% Line 677
	      apply 'race_data_server_call'/2
		  ('get_behaviour_api_calls', RaceDataServer)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_behaviour_api_calls',1}}] )
	    -| ['compiler_generated'] )
	end
'race_code_new'/1 =
    %% Line 681
    fun (_cor0) ->
	case _cor0 of
	  <CG = {'callgraph',_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,RaceDataServer}> when 'true' ->
	      %% Line 682
	      case apply 'race_data_server_cast'/2
		       ('race_code_new', RaceDataServer) of
		<'ok'> when 'true' ->
		    %% Line 683
		    CG
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'race_code_new',1}}] )
	    -| ['compiler_generated'] )
	end
'put_digraph'/2 =
    %% Line 687
    fun (_cor1,_cor0) ->
	%% Line 688
	case _cor0 of
	  <{'callgraph',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16}> when 'true' ->
	      call 'erlang':'setelement'
		  (2, _cor0, _cor1)
	  ( <_cor17> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','callgraph'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'put_race_code'/2 =
    %% Line 692
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <RaceCode,CG = {'callgraph',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,RaceDataServer}> when 'true' ->
	      %% Line 693
	      case apply 'race_data_server_cast'/2
		       ({'put_race_code',RaceCode}, RaceDataServer) of
		<'ok'> when 'true' ->
		    %% Line 694
		    CG
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'put_race_code',2}}] )
	    -| ['compiler_generated'] )
	end
'put_race_detection'/2 =
    %% Line 698
    fun (_cor1,_cor0) ->
	%% Line 699
	case _cor0 of
	  <{'callgraph',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16}> when 'true' ->
	      call 'erlang':'setelement'
		  (11, _cor0, _cor1)
	  ( <_cor17> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','callgraph'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'put_named_tables'/2 =
    %% Line 703
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <NamedTables,CG = %% Line 704
			    {'callgraph',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,RaceDataServer}> when 'true' ->
	      %% Line 705
	      case apply 'race_data_server_cast'/2
		       ({'put_named_tables',NamedTables}, RaceDataServer) of
		<'ok'> when 'true' ->
		    %% Line 706
		    CG
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'put_named_tables',2}}] )
	    -| ['compiler_generated'] )
	end
'put_public_tables'/2 =
    %% Line 710
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <PublicTables,CG = %% Line 711
			     {'callgraph',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,RaceDataServer}> when 'true' ->
	      %% Line 712
	      case apply 'race_data_server_cast'/2
		       ({'put_public_tables',PublicTables}, RaceDataServer) of
		<'ok'> when 'true' ->
		    %% Line 713
		    CG
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'put_public_tables',2}}] )
	    -| ['compiler_generated'] )
	end
'put_behaviour_api_calls'/2 =
    %% Line 717
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Calls,CG = %% Line 718
		      {'callgraph',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,RaceDataServer}> when 'true' ->
	      %% Line 719
	      case apply 'race_data_server_cast'/2
		       ({'put_behaviour_api_calls',Calls}, RaceDataServer) of
		<'ok'> when 'true' ->
		    %% Line 720
		    CG
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'put_behaviour_api_calls',2}}] )
	    -| ['compiler_generated'] )
	end
'new_race_data_server'/0 =
    %% Line 723
    fun () ->
	let <_cor1> =
	    %% Line 724
	    ( fun () ->
		  let <_cor0> =
		      call 'dict':'new'
			  ()
		  in  apply 'race_data_server_loop'/1
			  ({'race_data_state',_cor0,[],[],[]})
	      -| [{'id',{0,0,'-new_race_data_server/0-fun-0-'}}] )
	in  %% Line 724
	    call 'erlang':'spawn_link'
		(_cor1)
'race_data_server_loop'/1 =
    %% Line 726
    fun (_cor0) ->
	%% Line 727
	receive
	  %% Line 728
	  <{'call',From,Ref,Query}> when 'true' ->
	      let <Reply> =
		  %% Line 729
		  apply 'race_data_server_handle_call'/2
		      (Query, _cor0)
	      in  do  %% Line 730
		      call 'erlang':'!'
			  (From, {Ref,Reply})
		      %% Line 731
		      apply 'race_data_server_loop'/1
			  (_cor0)
	  %% Line 732
	  <{'cast','stop'}> when 'true' ->
	      %% Line 733
	      'ok'
	  %% Line 734
	  <{'cast',Message}> when 'true' ->
	      let <NewState> =
		  %% Line 735
		  apply 'race_data_server_handle_cast'/2
		      (Message, _cor0)
	      in  %% Line 736
		  apply 'race_data_server_loop'/1
		      (NewState)
	after 'infinity' ->
	  'true'
'race_data_server_call'/2 =
    %% Line 739
    fun (_cor1,_cor0) ->
	let <Ref> =
	    %% Line 740
	    call 'erlang':'make_ref'
		()
	in  let <_cor3> =
		%% Line 741
		call 'erlang':'self'
		    ()
	    in  do  %% Line 741
		    call 'erlang':'!'
			(_cor0, {'call',_cor3,Ref,_cor1})
		    %% Line 742
		    receive
		      %% Line 743
		      <{_cor6,Reply}>
			  when call 'erlang':'=:='
				(_cor6,
				 Ref) ->
			  Reply
		    after 'infinity' ->
		      'true'
'race_data_server_cast'/2 =
    %% Line 746
    fun (_cor1,_cor0) ->
	do  %% Line 747
	    call 'erlang':'!'
		(_cor0, {'cast',_cor1})
	    %% Line 748
	    'ok'
'race_data_server_handle_cast'/2 =
    %% Line 750
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'race_code_new',State> when 'true' ->
	      let <_rec17> =
		  %% Line 751
		  call 'dict':'new'
		      ()
	      in  %% Line 751
		  case State of
		    <{'race_data_state',_cor16,_cor17,_cor18,_cor19}> when 'true' ->
			call 'erlang':'setelement'
			    (2, State, _rec17)
		    ( <_cor20> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','race_data_state'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 752
	  <{Tag,Data},State> when 'true' ->
	      %% Line 753
	      case Tag of
		%% Line 754
		<'renew_race_info'> when 'true' ->
		    apply 'renew_race_info'/2
			(Data, State)
		%% Line 755
		<'renew_race_code'> when 'true' ->
		    apply 'renew_race_code_handler'/2
			(Data, State)
		%% Line 756
		<'renew_race_public_tables'> when 'true' ->
		    apply 'renew_race_public_tables_handler'/2
			(Data, State)
		%% Line 757
		<'put_race_code'> when 'true' ->
		    case State of
		      <{'race_data_state',_cor21,_cor22,_cor23,_cor24}> when 'true' ->
			  call 'erlang':'setelement'
			      (2, State, Data)
		      ( <_cor25> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','race_data_state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 758
		<'put_public_tables'> when 'true' ->
		    case State of
		      <{'race_data_state',_cor26,_cor27,_cor28,_cor29}> when 'true' ->
			  call 'erlang':'setelement'
			      (3, State, Data)
		      ( <_cor30> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','race_data_state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 759
		<'put_named_tables'> when 'true' ->
		    case State of
		      <{'race_data_state',_cor31,_cor32,_cor33,_cor34}> when 'true' ->
			  call 'erlang':'setelement'
			      (4, State, Data)
		      ( <_cor35> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','race_data_state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 760
		<'put_behaviour_api_calls'> when 'true' ->
		    case State of
		      <{'race_data_state',_cor36,_cor37,_cor38,_cor39}> when 'true' ->
			  call 'erlang':'setelement'
			      (5, State, Data)
		      ( <_cor40> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','race_data_state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor13})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'race_data_server_handle_cast',2}}] )
	    -| ['compiler_generated'] )
	end
'race_data_server_handle_call'/2 =
    %% Line 763
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Query,State = %% Line 764
			 {'race_data_state',RaceCode,%% Line 765
						     PublicTables,%% Line 766
								  NamedTables,%% Line 767
									      BehApiCalls}> when 'true' ->
	      %% Line 769
	      case Query of
		%% Line 770
		<'dup'> when 'true' ->
		    let <_cor2> =
			( fun () ->
			      apply 'race_data_server_loop'/1
				  (State)
			  -| [{'id',{0,0,'-race_data_server_handle_call/2-fun-0-'}}] )
		    in  call 'erlang':'spawn_link'
			    (_cor2)
		%% Line 771
		<'get_race_code'> when 'true' ->
		    RaceCode
		%% Line 772
		<'get_public_tables'> when 'true' ->
		    PublicTables
		%% Line 773
		<'get_named_tables'> when 'true' ->
		    NamedTables
		%% Line 774
		<'get_behaviour_api_calls'> when 'true' ->
		    BehApiCalls
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'race_data_server_handle_call',2}}] )
	    -| ['compiler_generated'] )
	end
'to_dot'/2 =
    %% Line 783
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <CG = {'callgraph',DG,_cor22,Esc,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30},File> when 'true' ->
	      let <Fun> =
		  %% Line 784
		  ( fun (_cor3) ->
			%% Line 785
			case apply 'lookup_name'/2
				 (_cor3, CG) of
			  %% Line 786
			  <'error'> when 'true' ->
			      _cor3
			  %% Line 787
			  <{'ok',Name}> when 'true' ->
			      Name
			  ( <_cor2> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor2})
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-to_dot/2-fun-0-'}}] )
	      in  let <_cor17> =
		      %% Line 790
		      ( letrec
			    'lc$^1'/1 =
				fun (_cor14) ->
				    case _cor14 of
				      <[%% Line 791
					L|_cor7]>
					  when %% Line 791
					    call 'erlang':'=/='
						(L,
						 'external') ->
					  let <_cor15> =
					      apply Fun
						  (L)
					  in  let <_cor16> =
						  %% Line 791
						  apply 'lc$^1'/1
						      (_cor7)
					      in  ( [{_cor15,{'color','red'}}|_cor16]
						    -| ['compiler_generated'] )
				      ( <[%% Line 791
					  L|_cor7]> when 'true' ->
					    %% Line 791
					    apply 'lc$^1'/1
						(_cor7)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor14> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor14})
					      -| [{'function_name',{'lc$^1',1}}] )
					-| ['compiler_generated'] )
				    end
			in  let <_cor13> =
				%% Line 791
				( letrec
				      'lc$^0'/1 =
					  fun (_cor11) ->
					      case _cor11 of
						<[{E}|_cor9]> when 'true' ->
						    let <_cor12> =
							apply 'lc$^0'/1
							    (_cor9)
						    in  ( [E|_cor12]
							  -| ['compiler_generated'] )
						( <[_cor8|_cor9]> when 'true' ->
						      apply 'lc$^0'/1
							  (_cor9)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor11> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor11})
							-| [{'function_name',{'lc$^0',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  let <_cor10> =
					  call 'ets':'tab2list'
					      (Esc)
				      in  apply 'lc$^0'/1
					      (_cor10)
				  -| ['list_comprehension'] )
			    in  apply 'lc$^1'/1
				    (_cor13)
			-| ['list_comprehension'] )
		  in  let <Vertices> =
			  %% Line 792
			  apply 'digraph_edges'/1
			      (DG)
		      in  %% Line 793
			  call 'hipe_dot':'translate_list'
			      (Vertices, File, [67|[71]], _cor17)
	  ( <_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20})
		  -| [{'function_name',{'to_dot',2}}] )
	    -| ['compiler_generated'] )
	end
'to_ps'/3 =
    %% Line 797
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <CG = {'callgraph',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20},File,Args> when 'true' ->
	      let <_cor3> =
		  %% Line 798
		  call 'filename':'rootname'
		      (File)
	      in  let <Dot_File> =
		      %% Line 798
		      call 'erlang':'++'
			  (_cor3, [46|[100|[111|[116]]]])
		  in  do  %% Line 799
			  apply 'to_dot'/2
			      (CG, Dot_File)
			  let <Command> =
			      %% Line 800
			      call 'io_lib':'format'
				  ([100|[111|[116|[32|[45|[84|[112|[115|[32|[126|[115|[32|[45|[111|[32|[126|[115|[32|[126|[115]]]]]]]]]]]]]]]]]]]], [Args|[File|[Dot_File|[]]]])
			  in  do  %% Line 801
				  ( call 'os':'cmd'
					(Command)
				    -| ['result_not_wanted'] )
				  %% Line 802
				  'ok'
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'to_ps',3}}] )
	    -| ['compiler_generated'] )
	end
'condensation'/1 =
    %% Line 804
    fun (_cor0) ->
	let <SCs> =
	    %% Line 805
	    call 'digraph_utils':'strong_components'
		(_cor0)
	in  let <V2I> =
		%% Line 806
		call 'ets':'new'
		    ('condensation_v2i', [])
	    in  let <I2C> =
		    %% Line 807
		    call 'ets':'new'
			('condensation_i2c', [])
		in  let <I2I> =
			%% Line 808
			call 'ets':'new'
			    ('condensation_i2i', ['bag'])
		    in  let <CFun> =
			    %% Line 810
			    ( fun (_cor11,_cor10) ->
				  let <_cor8> =
				      %% Line 811
				      ( fun (_cor6) ->
					    let <_cor45> =
						call 'ets':'insert'
						    (V2I, {_cor6,_cor10})
					    in  case _cor45 of
						  <'true'> when 'true' ->
						      ( _cor45
							-| ['compiler_generated'] )
						  ( <_cor5> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor5})
						    -| ['compiler_generated'] )
						end
					-| [{'id',{0,0,'-condensation/1-fun-0-'}}] )
				  in  do  %% Line 811
					  call 'lists':'foreach'
					      (_cor8, _cor11)
					  %% Line 812
					  case call 'ets':'insert'
						   (I2C, {_cor10,_cor11}) of
					    <'true'> when 'true' ->
						%% Line 813
						call 'erlang':'+'
						    (_cor10, 1)
					    ( <_cor9> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor9})
					      -| ['compiler_generated'] )
					  end
			      -| [{'id',{0,0,'-condensation/1-fun-1-'}}] )
			in  do  %% Line 815
				call 'lists':'foldl'
				    (CFun, 1, SCs)
				let <Fun1> =
				    %% Line 817
				    ( fun (_cor19) ->
					  case _cor19 of
					    <{V1,V2}> when 'true' ->
						let <I1> =
						    %% Line 818
						    call 'ets':'lookup_element'
							(V2I, V1, 2)
						in  let <I2> =
							%% Line 819
							call 'ets':'lookup_element'
							    (V2I, V2, 2)
						    in  %% Line 820
							( case <> of
							    ( <>
								  when call 'erlang':'=:='
									(I1,
									 I2) ->
								  'true'
							      -| ['compiler_generated'] )
							    ( <> when 'true' ->
								  call 'ets':'insert'
								      (I2I, {I1,I2})
							      -| ['compiler_generated'] )
							  end
							  -| ['compiler_generated'] )
					    ( <_cor20> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor20})
						    -| [{'function_name',{'-condensation/1-fun-2-',1}}] )
					      -| ['compiler_generated'] )
					  end
				      -| [{'id',{0,0,'-condensation/1-fun-2-'}}] )
				in  let <_cor22> =
					%% Line 822
					call 'digraph':'edges'
					    (_cor0)
				    in  do  %% Line 822
					    call 'lists':'foreach'
						(Fun1, _cor22)
					    let <Fun3> =
						%% Line 824
						( fun (_cor28,_cor27) ->
						      case <_cor28,_cor27> of
							<{I1,I2},{Out,In}> when 'true' ->
							    let <SC1> =
								%% Line 825
								call 'ets':'lookup_element'
								    (I2C, I1, 2)
							    in  let <SC2> =
								    %% Line 826
								    call 'ets':'lookup_element'
									(I2C, I2, 2)
								in  let <_cor26> =
									%% Line 827
									call 'dict':'append'
									    (SC1, SC2, Out)
								    in  let <_cor25> =
									    %% Line 827
									    call 'dict':'append'
										(SC2, SC1, In)
									in  %% Line 827
									    {_cor26,_cor25}
							( <_cor30,_cor29> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_cor30,_cor29})
								-| [{'function_name',{'-condensation/1-fun-3-',2}}] )
							  -| ['compiler_generated'] )
						      end
						  -| [{'id',{0,0,'-condensation/1-fun-3-'}}] )
					    in  let <_cor33> =
						    %% Line 829
						    call 'dict':'new'
							()
						in  let <_cor32> =
							%% Line 829
							call 'dict':'new'
							    ()
						    in  %% Line 829
							case call 'ets':'foldl'
								 (Fun3, {_cor33,_cor32}, I2I) of
							  <{OutDict,InDict}> when 'true' ->
							      let <_cor40> =
								  %% Line 831
								  ( letrec
									'lc$^0'/1 =
									    fun (_cor37) ->
										case _cor37 of
										  <[%% Line 832
										    Name|_cor36]> when 'true' ->
										      let <_cor38> =
											  call 'ets':'new'
											      (Name, [{'read_concurrency','true'}])
										      in  let <_cor39> =
											      %% Line 832
											      apply 'lc$^0'/1
												  (_cor36)
											  in  ( [_cor38|_cor39]
												-| ['compiler_generated'] )
										  <[]> when 'true' ->
										      []
										  ( <_cor37> when 'true' ->
											( primop 'match_fail'
											      ({'function_clause',_cor37})
											  -| [{'function_name',{'lc$^0',1}}] )
										    -| ['compiler_generated'] )
										end
								    in  apply 'lc$^0'/1
									    (%% Line 832
									     ['callgraph_deps_out'|['callgraph_deps_in']])
								    -| ['list_comprehension'] )
							      in  %% Line 830
								  case _cor40 of
								    <[OutETS|[InETS|[]]]> when 'true' ->
									let <_cor42> =
									    %% Line 833
									    call 'dict':'to_list'
										(OutDict)
									in  do  %% Line 833
										call 'ets':'insert'
										    (OutETS, _cor42)
										let <_cor43> =
										    %% Line 834
										    call 'dict':'to_list'
											(InDict)
										in  do  %% Line 834
											call 'ets':'insert'
											    (InETS, _cor43)
											do  %% Line 835
											    call 'ets':'delete'
												(V2I)
											    do  %% Line 836
												call 'ets':'delete'
												    (I2C)
												do  %% Line 837
												    call 'ets':'delete'
													(I2I)
												    %% Line 838
												    {{'e',OutETS,InETS},SCs}
								    ( <_cor41> when 'true' ->
									  primop 'match_fail'
									      ({'badmatch',_cor41})
								      -| ['compiler_generated'] )
								  end
							  ( <_cor34> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_cor34})
							    -| ['compiler_generated'] )
							end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('dialyzer_callgraph')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('dialyzer_callgraph', _cor0)
end