module 'dialyzer_typesig' ['analyze_scc'/6,
			   'get_safe_underapprox'/2,
			   'module_info'/0,
			   'module_info'/1]
    attributes [%% Line 33
		'type' =
		    %% Line 33
		    [{'dial_ret',{'type',33,'union',[{'integer',33,0}|[{'integer',34,1}|[{'integer',35,2}]]]},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'dial_warn_tag',{'type',68,'union',[{'atom',68,'warn_return_no_exit'}|[{'atom',68,'warn_return_only_exit'}|[{'atom',69,'warn_not_called'}|[{'atom',69,'warn_non_proper_list'}|[{'atom',70,'warn_matching'}|[{'atom',70,'warn_opaque'}|[{'atom',70,'warn_fun_app'}|[{'atom',71,'warn_failing_call'}|[{'atom',71,'warn_bin_construction'}|[{'atom',72,'warn_contract_types'}|[{'atom',72,'warn_contract_syntax'}|[{'atom',73,'warn_contract_not_equal'}|[{'atom',73,'warn_contract_subtype'}|[{'atom',74,'warn_contract_supertype'}|[{'atom',74,'warn_callgraph'}|[{'atom',75,'warn_umatched_return'}|[{'atom',75,'warn_race_condition'}|[{'atom',76,'warn_behaviour'}|[{'atom',76,'warn_contract_range'}|[{'atom',77,'warn_undefined_callbacks'}|[{'atom',77,'warn_unknown'}]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'file_line',{'type',83,'tuple',[{'remote_type',83,[{'atom',83,'file'}|[{'atom',83,'filename'}|[[]]]]}|[{'type',83,'non_neg_integer',[]}]]},[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{'dial_warning',{'type',84,'tuple',[{'type',84,'dial_warn_tag',[]}|[{'type',84,'file_line',[]}|[{'type',84,'tuple',[{'type',84,'atom',[]}|[{'type',84,'list',[{'type',84,'term',[]}]}]]}]]]},[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{'dial_error',{'type',89,'any',[]},[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{'anal_type',{'type',96,'union',[{'atom',96,'succ_typings'}|[{'atom',96,'plt_build'}]]},[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{'anal_type1',{'type',97,'union',[{'type',97,'anal_type',[]}|[{'atom',97,'plt_add'}|[{'atom',97,'plt_check'}|[{'atom',97,'plt_remove'}]]]]},[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{'contr_constr',{'type',98,'tuple',[{'atom',98,'subtype'}|[{'remote_type',98,[{'atom',98,'erl_types'}|[{'atom',98,'erl_type'}|[[]]]]}|[{'remote_type',98,[{'atom',98,'erl_types'}|[{'atom',98,'erl_type'}|[[]]]]}]]]},[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{'contract_pair',{'type',99,'tuple',[{'remote_type',99,[{'atom',99,'erl_types'}|[{'atom',99,'erl_type'}|[[]]]]}|[{'type',99,'list',[{'type',99,'contr_constr',[]}]}]]},[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{'dial_define',{'type',100,'tuple',[{'type',100,'atom',[]}|[{'type',100,'term',[]}]]},[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{'dial_option',{'type',101,'tuple',[{'type',101,'atom',[]}|[{'type',101,'term',[]}]]},[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{'dial_options',{'type',102,'list',[{'type',102,'dial_option',[]}]},[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{'fopt',{'type',103,'union',[{'atom',103,'basename'}|[{'atom',103,'fullpath'}]]},[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{'format',{'type',104,'union',[{'atom',104,'formatted'}|[{'atom',104,'raw'}]]},[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{'label',{'type',105,'non_neg_integer',[]},[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{'rep_mode',{'type',106,'union',[{'atom',106,'quiet'}|[{'atom',106,'normal'}|[{'atom',106,'verbose'}]]]},[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{'start_from',{'type',107,'union',[{'atom',107,'byte_code'}|[{'atom',107,'src_code'}]]},[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{'mfa_or_funlbl',{'type',108,'union',[{'type',108,'label',[]}|[{'type',108,'mfa',[]}]]},[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{'solver',{'type',109,'union',[{'atom',109,'v1'}|[{'atom',109,'v2'}]]},[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{{'record','analysis'},[{'typed_record_field',{'record_field',115,{'atom',115,'analysis_pid'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'pid',[]}]]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'type'},{'atom',116,'succ_typings'}},{'type',116,'anal_type',[]}}|[{'typed_record_field',{'record_field',117,{'atom',117,'defines'},{'nil',117}},{'type',117,'list',[{'type',117,'dial_define',[]}]}}|[{'typed_record_field',{'record_field',118,{'atom',118,'doc_plt'}},{'type',118,'union',[{'atom',118,'undefined'}|[{'remote_type',118,[{'atom',118,'dialyzer_plt'}|[{'atom',118,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',119,{'atom',119,'files'},{'nil',119}},{'type',119,'list',[{'remote_type',119,[{'atom',119,'file'}|[{'atom',119,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'include_dirs'},{'nil',120}},{'type',120,'list',[{'remote_type',120,[{'atom',120,'file'}|[{'atom',120,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',121,{'atom',121,'start_from'},{'atom',121,'byte_code'}},{'type',121,'start_from',[]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'plt'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'remote_type',122,[{'atom',122,'dialyzer_plt'}|[{'atom',122,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'use_contracts'},{'atom',123,'true'}},{'type',123,'boolean',[]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'race_detection'},{'atom',124,'false'}},{'type',124,'boolean',[]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'behaviours_chk'},{'atom',125,'false'}},{'type',125,'boolean',[]}}|[{'typed_record_field',{'record_field',126,{'atom',126,'timing'},{'atom',126,'false'}},{'type',126,'union',[{'type',126,'boolean',[]}|[{'atom',126,'debug'}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'timing_server'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'remote_type',127,[{'atom',127,'dialyzer_timing'}|[{'atom',127,'timing_server'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'callgraph_file'},{'string',128,[]}},{'remote_type',128,[{'atom',128,'file'}|[{'atom',128,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'solvers'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'list',[{'type',129,'solver',[]}]}]]}}]]]]]]]]]]]]]]],[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{{'record','options'},[{'typed_record_field',{'record_field',131,{'atom',131,'files'},{'nil',131}},{'type',131,'list',[{'remote_type',131,[{'atom',131,'file'}|[{'atom',131,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'files_rec'},{'nil',132}},{'type',132,'list',[{'remote_type',132,[{'atom',132,'file'}|[{'atom',132,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',133,{'atom',133,'analysis_type'},{'atom',133,'succ_typings'}},{'type',133,'anal_type1',[]}}|[{'typed_record_field',{'record_field',134,{'atom',134,'timing'},{'atom',134,'false'}},{'type',134,'union',[{'type',134,'boolean',[]}|[{'atom',134,'debug'}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'defines'},{'nil',135}},{'type',135,'list',[{'type',135,'dial_define',[]}]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'from'},{'atom',136,'byte_code'}},{'type',136,'start_from',[]}}|[{'typed_record_field',{'record_field',137,{'atom',137,'get_warnings'},{'atom',137,'maybe'}},{'type',137,'union',[{'type',137,'boolean',[]}|[{'atom',137,'maybe'}]]}}|[{'typed_record_field',{'record_field',138,{'atom',138,'init_plts'},{'nil',138}},{'type',138,'list',[{'remote_type',138,[{'atom',138,'file'}|[{'atom',138,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',139,{'atom',139,'include_dirs'},{'nil',139}},{'type',139,'list',[{'remote_type',139,[{'atom',139,'file'}|[{'atom',139,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'output_plt'},{'atom',140,'none'}},{'type',140,'union',[{'atom',140,'none'}|[{'remote_type',140,[{'atom',140,'file'}|[{'atom',140,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',141,{'atom',141,'legal_warnings'},{'call',141,{'remote',141,{'atom',141,'ordsets'},{'atom',141,'new'}},[]}},{'remote_type',141,[{'atom',141,'ordsets'}|[{'atom',141,'ordset'}|[[{'type',141,'dial_warn_tag',[]}]]]]}}|[{'typed_record_field',{'record_field',142,{'atom',142,'report_mode'},{'atom',142,'normal'}},{'type',142,'rep_mode',[]}}|[{'typed_record_field',{'record_field',143,{'atom',143,'erlang_mode'},{'atom',143,'false'}},{'type',143,'boolean',[]}}|[{'typed_record_field',{'record_field',144,{'atom',144,'use_contracts'},{'atom',144,'true'}},{'type',144,'boolean',[]}}|[{'typed_record_field',{'record_field',145,{'atom',145,'output_file'},{'atom',145,'none'}},{'type',145,'union',[{'atom',145,'none'}|[{'remote_type',145,[{'atom',145,'file'}|[{'atom',145,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',146,{'atom',146,'output_format'},{'atom',146,'formatted'}},{'type',146,'format',[]}}|[{'typed_record_field',{'record_field',147,{'atom',147,'filename_opt'},{'atom',147,'basename'}},{'type',147,'fopt',[]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'callgraph_file'},{'string',148,[]}},{'remote_type',148,[{'atom',148,'file'}|[{'atom',148,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'check_plt'},{'atom',149,'true'}},{'type',149,'boolean',[]}}|[{'typed_record_field',{'record_field',150,{'atom',150,'solvers'},{'nil',150}},{'type',150,'list',[{'type',150,'solver',[]}]}}]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 152
		'type' =
		    %% Line 152
		    [{{'record','contract'},[{'typed_record_field',{'record_field',152,{'atom',152,'contracts'},{'nil',152}},{'type',152,'list',[{'type',152,'contract_pair',[]}]}}|[{'typed_record_field',{'record_field',153,{'atom',153,'args'},{'nil',153}},{'type',153,'list',[{'remote_type',153,[{'atom',153,'erl_types'}|[{'atom',153,'erl_type'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',154,{'atom',154,'forms'},{'nil',154}},{'type',154,'list',[{'type',154,'tuple',[{'var',154,'_'}|[{'var',154,'_'}]]}]}}]]],[]}],
		%% Line 66
		'type' =
		    %% Line 66
		    [{'dep',{'type',66,'integer',[]},[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{'type_var',{'remote_type',67,[{'atom',67,'erl_types'}|[{'atom',67,'erl_type'}|[[]]]]},[]}],
		%% Line 69
		'type' =
		    %% Line 69
		    [{{'record','fun_var'},[{'typed_record_field',{'record_field',69,{'atom',69,'fun'}},{'type',69,'union',[{'atom',69,'undefined'}|[{'type',69,'fun',[{'type',69,'product',[{'var',69,'_'}]}|[{'remote_type',69,[{'atom',69,'erl_types'}|[{'atom',69,'erl_type'}|[[]]]]}]]}]]}}|[{'typed_record_field',{'record_field',69,{'atom',69,'deps'}},{'type',69,'union',[{'atom',69,'undefined'}|[{'type',69,'list',[{'type',69,'dep',[]}]}]]}}|[{'typed_record_field',{'record_field',70,{'atom',70,'origin'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'integer',[]}]]}}]]],[]}],
		%% Line 72
		'type' =
		    %% Line 72
		    [{'constr_op',{'type',72,'union',[{'atom',72,'eq'}|[{'atom',72,'sub'}]]},[]}],
		%% Line 73
		'type' =
		    %% Line 73
		    [{'fvar_or_type',{'type',73,'union',[{'type',73,'record',[{'atom',73,'fun_var'}]}|[{'remote_type',73,[{'atom',73,'erl_types'}|[{'atom',73,'erl_type'}|[[]]]]}]]},[]}],
		%% Line 75
		'type' =
		    %% Line 75
		    [{{'record','constraint'},[{'typed_record_field',{'record_field',75,{'atom',75,'lhs'}},{'type',75,'union',[{'atom',75,'undefined'}|[{'remote_type',75,[{'atom',75,'erl_types'}|[{'atom',75,'erl_type'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',76,{'atom',76,'op'}},{'type',76,'union',[{'atom',76,'undefined'}|[{'type',76,'constr_op',[]}]]}}|[{'typed_record_field',{'record_field',77,{'atom',77,'rhs'}},{'type',77,'union',[{'atom',77,'undefined'}|[{'type',77,'fvar_or_type',[]}]]}}|[{'typed_record_field',{'record_field',78,{'atom',78,'deps'}},{'type',78,'union',[{'atom',78,'undefined'}|[{'type',78,'list',[{'type',78,'dep',[]}]}]]}}]]]],[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{'constraint',{'type',80,'record',[{'atom',80,'constraint'}]},[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{{'record','constraint_list'},[{'typed_record_field',{'record_field',82,{'atom',82,'type'}},{'type',82,'union',[{'atom',82,'undefined'}|[{'atom',82,'conj'}|[{'atom',82,'disj'}]]]}}|[{'typed_record_field',{'record_field',83,{'atom',83,'list'}},{'type',83,'union',[{'atom',83,'undefined'}|[{'type',83,'list',[{'type',83,'constr',[]}]}]]}}|[{'typed_record_field',{'record_field',84,{'atom',84,'deps'}},{'type',84,'union',[{'atom',84,'undefined'}|[{'type',84,'list',[{'type',84,'dep',[]}]}]]}}|[{'typed_record_field',{'record_field',85,{'atom',85,'masks'}},{'type',85,'union',[{'atom',85,'undefined'}|[{'type',85,'list',[{'type',85,'tuple',[{'type',85,'dep',[]}|[{'type',85,'list',[{'type',85,'non_neg_integer',[]}]}]]}]}|[{'type',86,'tuple',[{'atom',86,'d'}|[{'remote_type',86,[{'atom',86,'dict'}|[{'atom',86,'dict'}|[[{'type',86,'dep',[]}|[{'type',86,'list',[{'type',86,'non_neg_integer',[]}]}]]]]]}]]}]]]}}|[{'typed_record_field',{'record_field',87,{'atom',87,'id'}},{'type',87,'union',[{'atom',87,'undefined'}|[{'type',87,'tuple',[{'atom',87,'list'}|[{'type',87,'dep',[]}]]}]]}}]]]]],[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{'constraint_list',{'type',89,'record',[{'atom',89,'constraint_list'}]},[]}],
		%% Line 91
		'type' =
		    %% Line 91
		    [{{'record','constraint_ref'},[{'typed_record_field',{'record_field',91,{'atom',91,'id'}},{'type',91,'union',[{'atom',91,'undefined'}|[{'type',91,'type_var',[]}]]}}|[{'typed_record_field',{'record_field',91,{'atom',91,'deps'}},{'type',91,'union',[{'atom',91,'undefined'}|[{'type',91,'list',[{'type',91,'dep',[]}]}]]}}]],[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{'constraint_ref',{'type',93,'record',[{'atom',93,'constraint_ref'}]},[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{'constr',{'type',95,'union',[{'type',95,'constraint',[]}|[{'type',95,'constraint_list',[]}|[{'type',95,'constraint_ref',[]}]]]},[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{'types',{'remote_type',97,[{'atom',97,'erl_types'}|[{'atom',97,'type_table'}|[[]]]]},[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{'typesig_scc',{'type',99,'list',[{'type',99,'tuple',[{'type',99,'mfa',[]}|[{'type',99,'tuple',[{'remote_type',99,[{'atom',99,'cerl'}|[{'atom',99,'c_var'}|[[]]]]}|[{'remote_type',99,[{'atom',99,'cerl'}|[{'atom',99,'c_fun'}|[[]]]]}]]}|[{'type',99,'types',[]}]]]}]},[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{'typesig_funmap',{'type',100,'list',[{'type',100,'tuple',[{'type',100,'type_var',[]}|[{'type',100,'type_var',[]}]]}]},[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{'prop_types',{'remote_type',102,[{'atom',102,'dict'}|[{'atom',102,'dict'}|[[{'type',102,'label',[]}|[{'type',102,'types',[]}]]]]]},[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{'dict_or_ets',{'type',104,'union',[{'type',104,'tuple',[{'atom',104,'d'}|[{'type',104,'prop_types',[]}]]}|[{'type',104,'tuple',[{'atom',104,'e'}|[{'remote_type',104,[{'atom',104,'ets'}|[{'atom',104,'tid'}|[[]]]]}]]}]]},[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','state'},[{'typed_record_field',{'record_field',106,{'atom',106,'callgraph'}},{'type',106,'union',[{'atom',106,'undefined'}|[{'remote_type',106,[{'atom',106,'dialyzer_callgraph'}|[{'atom',106,'callgraph'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',107,{'atom',107,'cs'},{'nil',107}},{'type',107,'list',[{'type',107,'constr',[]}]}}|[{'typed_record_field',{'record_field',108,{'atom',108,'cmap'},{'tuple',108,[{'atom',108,'d'}|[{'call',108,{'remote',108,{'atom',108,'dict'},{'atom',108,'new'}},[]}]]}},{'type',108,'dict_or_ets',[]}}|[{'typed_record_field',{'record_field',109,{'atom',109,'fun_map'},{'nil',109}},{'type',109,'typesig_funmap',[]}}|[{'typed_record_field',{'record_field',110,{'atom',110,'fun_arities'},{'call',110,{'remote',110,{'atom',110,'dict'},{'atom',110,'new'}},[]}},{'remote_type',110,[{'atom',110,'dict'}|[{'atom',110,'dict'}|[[{'type',110,'type_var',[]}|[{'type',110,'arity',[]}]]]]]}}|[{'typed_record_field',{'record_field',111,{'atom',111,'in_match'},{'atom',111,'false'}},{'type',111,'boolean',[]}}|[{'typed_record_field',{'record_field',112,{'atom',112,'in_guard'},{'atom',112,'false'}},{'type',112,'boolean',[]}}|[{'typed_record_field',{'record_field',113,{'atom',113,'module'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'module',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'name_map'},{'call',114,{'remote',114,{'atom',114,'dict'},{'atom',114,'new'}},[]}},{'remote_type',114,[{'atom',114,'dict'}|[{'atom',114,'dict'}|[[{'type',114,'mfa',[]}|[{'remote_type',115,[{'atom',115,'cerl'}|[{'atom',115,'c_fun'}|[[]]]]}]]]]]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'next_label'},{'integer',116,0}},{'type',116,'label',[]}}|[{'typed_record_field',{'record_field',117,{'atom',117,'self_rec'}},{'type',117,'union',[{'atom',117,'undefined'}|[{'atom',117,'false'}|[{'remote_type',117,[{'atom',117,'erl_types'}|[{'atom',117,'erl_type'}|[[]]]]}]]]}}|[{'typed_record_field',{'record_field',118,{'atom',118,'plt'}},{'type',118,'union',[{'atom',118,'undefined'}|[{'remote_type',118,[{'atom',118,'dialyzer_plt'}|[{'atom',118,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',119,{'atom',119,'prop_types'},{'tuple',119,[{'atom',119,'d'}|[{'call',119,{'remote',119,{'atom',119,'dict'},{'atom',119,'new'}},[]}]]}},{'type',119,'dict_or_ets',[]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'records'},{'call',120,{'remote',120,{'atom',120,'dict'},{'atom',120,'new'}},[]}},{'type',120,'types',[]}}|[{'typed_record_field',{'record_field',121,{'atom',121,'scc'},{'nil',121}},{'type',121,'list',[{'type',121,'type_var',[]}]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'mfas'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'type',122,'list',[{'type',122,'tuple','any'}]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'solvers'},{'nil',123}},{'type',123,'list',[{'type',123,'solver',[]}]}}]]]]]]]]]]]]]]]]],[]}],
		%% Line 173
		'spec' =
		    %% Line 173
		    [{{'analyze_scc',6},[{'type',173,'fun',[{'type',173,'product',[{'type',173,'typesig_scc',[]}|[{'type',173,'label',[]}|[{'remote_type',174,[{'atom',174,'dialyzer_callgraph'}|[{'atom',174,'callgraph'}|[[]]]]}|[{'remote_type',175,[{'atom',175,'dialyzer_plt'}|[{'atom',175,'plt'}|[[]]]]}|[{'type',175,'prop_types',[]}|[{'type',175,'list',[{'type',175,'solver',[]}]}]]]]]]}|[{'type',175,'prop_types',[]}]]}]}],
		%% Line 820
		'spec' =
		    %% Line 820
		    [{{'get_safe_underapprox',2},[{'type',820,'fun',[{'type',820,'product',[{'type',820,'list',[{'remote_type',820,[{'atom',820,'cerl'}|[{'atom',820,'c_values'}|[[]]]]}]}|[{'remote_type',820,[{'atom',820,'cerl'}|[{'atom',820,'cerl'}|[[]]]]}]]}|[{'remote_type',820,[{'atom',820,'erl_types'}|[{'atom',820,'erl_type'}|[[]]]]}]]}]}],
		%% Line 1896
		'type' =
		    %% Line 1896
		    [{{'record','v2_state'},[{'typed_record_field',{'record_field',1896,{'atom',1896,'constr_data'},{'call',1896,{'remote',1896,{'atom',1896,'dict'},{'atom',1896,'new'}},[]}},{'remote_type',1896,[{'atom',1896,'dict'}|[{'atom',1896,'dict'}|[[]]]]}}|[{'typed_record_field',{'record_field',1897,{'atom',1897,'state'}},{'type',1897,'union',[{'atom',1897,'undefined'}|[{'type',1897,'record',[{'atom',1897,'state'}]}]]}}]],[]}],
		%% Line 2878
		'spec' =
		    %% Line 2878
		    [{{'mk_constraint',3},[{'type',2878,'fun',[{'type',2878,'product',[{'remote_type',2878,[{'atom',2878,'erl_types'}|[{'atom',2878,'erl_type'}|[[]]]]}|[{'type',2879,'constr_op',[]}|[{'type',2880,'fvar_or_type',[]}]]]}|[{'type',2880,'record',[{'atom',2880,'constraint'}]}]]}]}],
		%% Line 2910
		'spec' =
		    %% Line 2910
		    [{{'constraint_opnd_is_any',1},[{'type',2910,'fun',[{'type',2910,'product',[{'type',2910,'fvar_or_type',[]}]}|[{'type',2910,'boolean',[]}]]}]}],
		%% Line 2927
		'spec' =
		    %% Line 2927
		    [{{'mk_fun_var',2},[{'type',2927,'fun',[{'type',2927,'product',[{'type',2927,'fun',[{'type',2927,'product',[{'var',2927,'_'}]}|[{'remote_type',2927,[{'atom',2927,'erl_types'}|[{'atom',2927,'erl_type'}|[[]]]]}]]}|[{'type',2927,'list',[{'remote_type',2927,[{'atom',2927,'erl_types'}|[{'atom',2927,'erl_type'}|[[]]]]}]}]]}|[{'type',2927,'record',[{'atom',2927,'fun_var'}]}]]}]}],
		%% Line 2935
		'spec' =
		    %% Line 2935
		    [{{'get_deps',1},[{'type',2935,'fun',[{'type',2935,'product',[{'type',2935,'constr',[]}]}|[{'type',2935,'list',[{'type',2935,'dep',[]}]}]]}]}],
		%% Line 2941
		'spec' =
		    %% Line 2941
		    [{{'find_constraint_deps',1},[{'type',2941,'fun',[{'type',2941,'product',[{'type',2941,'list',[{'type',2941,'fvar_or_type',[]}]}]}|[{'type',2941,'list',[{'type',2941,'dep',[]}]}]]}]}]]
'analyze_scc'/6 =
    %% Line 177
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Solvers> =
	    %% Line 178
	    apply 'solvers'/1
		(_cor0)
	in  do  %% Line 179
		apply 'assert_format_of_scc'/1
		    (_cor5)
		let <State1> =
		    %% Line 180
		    apply 'new_state'/6
			(_cor5, _cor4, _cor3, _cor2, _cor1, Solvers)
		in  let <_cor13> =
			%% Line 181
			( letrec
			      'lc$^0'/1 =
				  fun (_cor11) ->
				      case _cor11 of
					<[{_X_MFA,{Var,_X_Fun},_X_Rec}|_cor10]> when 'true' ->
					    let <_cor12> =
						apply 'lc$^0'/1
						    (_cor10)
					    in  ( [Var|_cor12]
						  -| ['compiler_generated'] )
					( <[_cor9|_cor10]> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor10)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor11> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor11})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (_cor5)
			  -| ['list_comprehension'] )
		    in  let <_cor8> =
			    %% Line 181
			    call 'sets':'new'
				()
			in  let <DefSet> =
				%% Line 181
				apply 'add_def_list'/2
				    (_cor13, _cor8)
			    in  let <State2> =
				    %% Line 182
				    apply 'traverse_scc'/3
					(_cor5, DefSet, State1)
				in  let <State3> =
					%% Line 183
					apply 'state__finalize'/1
					    (State2)
				    in  let <Funs> =
					    %% Line 184
					    apply 'state__scc'/1
						(State3)
					in  do  %% Line 185
						apply 'pp_constrs_scc'/2
						    (Funs, State3)
						do  %% Line 186
						    apply 'constraints_to_dot_scc'/2
							(Funs, State3)
						    %% Line 187
						    apply 'solve'/2
							(Funs, State3)
'assert_format_of_scc'/1 =
    %% Line 189
    fun (_cor0) ->
	case _cor0 of
	  <[{_X_MFA,{_X_Var,_X_Fun},_X_Records}|Left]> when 'true' ->
	      %% Line 190
	      apply 'assert_format_of_scc'/1
		  (Left)
	  %% Line 191
	  <[]> when 'true' ->
	      %% Line 192
	      'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'assert_format_of_scc',1}}] )
	    -| ['compiler_generated'] )
	end
'solvers'/1 =
    %% Line 194
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      ['v2']
	  %% Line 195
	  <Solvers> when 'true' ->
	      Solvers
	end
'traverse_scc'/3 =
    %% Line 203
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{_X_MFA,Def,Rec}|Left],DefSet,AccState> when 'true' ->
	      let <TmpState1> =
		  %% Line 204
		  apply 'state__set_rec_dict'/2
		      (AccState, Rec)
	      in  let <_cor4> =
		      %% Line 205
		      call 'cerl':'c_atom'
			  ('foo')
		  in  let <DummyLetrec> =
			  %% Line 205
			  call 'cerl':'c_letrec'
			      ([Def|[]], _cor4)
		      in  %% Line 206
			  case apply 'traverse'/3
				   (DummyLetrec, DefSet, TmpState1) of
			    <{NewAccState,_cor10}> when 'true' ->
				%% Line 207
				apply 'traverse_scc'/3
				    (Left, DefSet, NewAccState)
			    ( <_cor6> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor6})
			      -| ['compiler_generated'] )
			  end
	  %% Line 208
	  <[],_X_DefSet,AccState> when 'true' ->
	      %% Line 209
	      AccState
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'traverse_scc',3}}] )
	    -| ['compiler_generated'] )
	end
'traverse'/3 =
    %% Line 211
    fun (_cor2,_cor1,_cor0) ->
	%% Line 213
	case call 'cerl':'type'
		 (_cor2) of
	  %% Line 214
	  <'alias'> when 'true' ->
	      let <Var> =
		  %% Line 215
		  call 'cerl':'alias_var'
		      (_cor2)
	      in  let <Pat> =
		      %% Line 216
		      call 'cerl':'alias_pat'
			  (_cor2)
		  in  let <DefinedVars1> =
			  %% Line 217
			  apply 'add_def'/2
			      (Var, _cor1)
		      in  %% Line 218
			  case apply 'traverse'/3
				   (Pat, DefinedVars1, _cor0) of
			    <{State1,PatVar}> when 'true' ->
				let <_cor7> =
				    %% Line 219
				    apply 'mk_var'/1
					(Var)
				in  let <State2> =
					%% Line 219
					apply 'state__store_conj'/4
					    (_cor7, 'eq', PatVar, State1)
				    in  %% Line 220
					{State2,PatVar}
			    ( <_cor6> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor6})
			      -| ['compiler_generated'] )
			  end
	  %% Line 221
	  <'apply'> when 'true' ->
	      let <Args> =
		  %% Line 222
		  call 'cerl':'apply_args'
		      (_cor2)
	      in  let <Arity> =
		      %% Line 223
		      call 'erlang':'length'
			  (Args)
		  in  let <Op> =
			  %% Line 224
			  call 'cerl':'apply_op'
			      (_cor2)
		      in  %% Line 225
			  case apply 'traverse_list'/3
				   (Args, _cor1, _cor0) of
			    <{State0,ArgTypes}> when 'true' ->
				%% Line 226
				case apply 'traverse'/3
					 (Op, _cor1, State0) of
				  <{State1,OpType}> when 'true' ->
				      %% Line 227
				      case apply 'state__get_fun_prototype'/3
					       (OpType, Arity, State1) of
					<{State2,FunType}> when 'true' ->
					    let <State3> =
						%% Line 228
						apply 'state__store_conj'/4
						    (FunType, 'eq', OpType, State2)
					    in  let <_cor17> =
						    %% Line 229
						    apply 'mk_var'/1
							(_cor2)
						in  let <_cor16> =
							%% Line 229
							call 'erl_types':'t_fun_range'
							    (FunType)
						    in  let <State4> =
							    %% Line 229
							    apply 'state__store_conj'/4
								(_cor17, 'sub', _cor16, %% Line 230
											State3)
							in  let <_cor19> =
								%% Line 231
								call 'erl_types':'t_fun_args'
								    (FunType)
							    in  let <State5> =
								    %% Line 231
								    apply 'state__store_conj_lists'/4
									(ArgTypes, 'sub', _cor19, %% Line 232
												  State4)
								in  %% Line 233
								    case apply 'state__lookup_apply'/2
									     (_cor2, _cor0) of
								      %% Line 234
								      <'unknown'> when 'true' ->
									  let <_cor21> =
									      %% Line 235
									      apply 'mk_var'/1
										  (_cor2)
									  in  %% Line 235
									      {State5,_cor21}
								      %% Line 236
								      <FunLabels> when 'true' ->
									  let <_cor22> =
									      %% Line 237
									      apply 'mk_var'/1
										  (_cor2)
									  in  %% Line 237
									      case apply 'get_apply_constr'/4
										       (FunLabels, _cor22, ArgTypes, State5) of
										%% Line 238
										<'error'> when 'true' ->
										    let <_cor23> =
											apply 'mk_var'/1
											    (_cor2)
										    in  {State5,_cor23}
										%% Line 239
										<{'ok',State6}> when 'true' ->
										    let <_cor24> =
											apply 'mk_var'/1
											    (_cor2)
										    in  {State6,_cor24}
										( <_cor25> when 'true' ->
										      primop 'match_fail'
											  ({'case_clause',_cor25})
										  -| ['compiler_generated'] )
									      end
								    end
					( <_cor14> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor14})
					  -| ['compiler_generated'] )
				      end
				  ( <_cor13> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor13})
				    -| ['compiler_generated'] )
				end
			    ( <_cor12> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor12})
			      -| ['compiler_generated'] )
			  end
	  %% Line 242
	  <'binary'> when 'true' ->
	      let <_cor27> =
		  %% Line 243
		  call 'cerl':'binary_segments'
		      (_cor2)
	      in  %% Line 243
		  case apply 'traverse_list'/3
			   (_cor27, _cor1, _cor0) of
		    <{State1,SegTypes}> when 'true' ->
			let <_cor32> =
			    %% Line 245
			    ( fun (_cor30) ->
				  let <TmpSegTypes> =
				      %% Line 246
				      apply 'lookup_type_list'/2
					  (SegTypes, _cor30)
				  in  %% Line 247
				      call 'erl_types':'t_bitstr_concat'
					  (TmpSegTypes)
			      -| [{'id',{0,0,'-traverse/3-fun-0-'}}] )
			in  let <Type> =
				%% Line 245
				apply 'mk_fun_var'/2
				    (_cor32, %% Line 248
					     SegTypes)
			    in  let <_cor35> =
				    %% Line 249
				    apply 'mk_var'/1
					(_cor2)
				in  let <_cor36> =
					%% Line 249
					apply 'state__store_conj'/4
					    (_cor35, 'sub', Type, State1)
				    in  let <_cor34> =
					    %% Line 249
					    apply 'mk_var'/1
						(_cor2)
					in  %% Line 249
					    {_cor36,_cor34}
		    ( <_cor28> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor28})
		      -| ['compiler_generated'] )
		  end
	  %% Line 250
	  <'bitstr'> when 'true' ->
	      let <Size> =
		  %% Line 251
		  call 'cerl':'bitstr_size'
		      (_cor2)
	      in  let <_cor38> =
		      %% Line 252
		      call 'cerl':'bitstr_unit'
			  (_cor2)
		  in  let <UnitVal> =
			  %% Line 252
			  call 'cerl':'int_val'
			      (_cor38)
		      in  let <Val> =
			      %% Line 253
			      call 'cerl':'bitstr_val'
				  (_cor2)
			  in  %% Line 254
			      case %% Line 255
				   apply 'traverse_list'/3
				       ([Size|[Val|[]]], _cor1, _cor0) of
				<{State1,[SizeType|[ValType|[]]]}> when 'true' ->
				    let <State2,TypeConstr,BinValTypeConstr> =
					%% Line 257
					case call 'cerl':'bitstr_bitsize'
						 (_cor2) of
					  %% Line 258
					  <'all'> when 'true' ->
					      let <T> =
						  %% Line 259
						  call 'erl_types':'t_bitstr'
						      (UnitVal, 0)
					      in  %% Line 260
						  <State1,T,T>
					  %% Line 261
					  <'utf'> when 'true' ->
					      let <T> =
						  %% Line 263
						  call 'erl_types':'t_binary'
						      ()
					      in  %% Line 264
						  <State1,T,T>
					  %% Line 265
					  <N>
					      when call 'erlang':'is_integer'
						    (N) ->
					      let <_cor45> =
						  %% Line 266
						  call 'erl_types':'t_bitstr'
						      (0, N)
					      in  let <_cor44> =
						      %% Line 266
						      call 'erl_types':'t_bitstr'
							  (1, N)
						  in  %% Line 266
						      <State1,_cor45,_cor44>
					  %% Line 267
					  <'any'> when 'true' ->
					      let <_cor46> =
						  %% Line 268
						  apply 'bitstr_constr'/2
						      (SizeType, UnitVal)
					      in  let <T1> =
						      %% Line 268
						      apply 'mk_fun_var'/2
							  (_cor46, [SizeType|[]])
						  in  let <_cor48> =
							  %% Line 270
							  apply 'bitstr_constr'/3
							      (SizeType, UnitVal, 'match')
						      in  let <T2> =
							      %% Line 270
							      apply 'mk_fun_var'/2
								  (_cor48, [SizeType|[]])
							  in  let <_cor50> =
								  %% Line 271
								  call 'erl_types':'t_non_neg_integer'
								      ()
							      in  let <_cor51> =
								      %% Line 271
								      apply 'state__store_conj'/4
									  (SizeType, 'sub', _cor50, State1)
								  in  <_cor51,%% Line 272
									      T1,%% Line 272
										 T2>
					  ( <_cor52> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor52})
					    -| ['compiler_generated'] )
					end
				    in  let <_cor55> =
					    %% Line 275
					    call 'cerl':'bitstr_type'
						(_cor2)
					in  let <_cor62> =
						%% Line 275
						case call 'cerl':'concrete'
							 (_cor55) of
						  %% Line 276
						  <'binary'> when 'true' ->
						      BinValTypeConstr
						  %% Line 277
						  <'float'> when 'true' ->
						      %% Line 278
						      case apply 'state__is_in_match'/1
							       (State1) of
							%% Line 279
							<'true'> when 'true' ->
							    call 'erl_types':'t_float'
								()
							%% Line 280
							<'false'> when 'true' ->
							    call 'erl_types':'t_number'
								()
							( <_cor56> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_cor56})
							  -| ['compiler_generated'] )
						      end
						  %% Line 282
						  <'integer'> when 'true' ->
						      %% Line 283
						      case apply 'state__is_in_match'/1
							       (State1) of
							%% Line 284
							<'true'> when 'true' ->
							    let <_cor57> =
								%% Line 285
								call 'cerl':'bitstr_flags'
								    (_cor2)
							    in  let <Flags> =
								    %% Line 285
								    call 'cerl':'concrete'
									(_cor57)
								in  let <_cor59> =
									%% Line 286
									apply 'bitstr_val_constr'/3
									    (SizeType, UnitVal, Flags)
								    in  %% Line 286
									apply 'mk_fun_var'/2
									    (_cor59, %% Line 287
										     [SizeType|[]])
							%% Line 288
							<'false'> when 'true' ->
							    call 'erl_types':'t_integer'
								()
							( <_cor60> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_cor60})
							  -| ['compiler_generated'] )
						      end
						  %% Line 290
						  <'utf8'> when 'true' ->
						      call 'erl_types':'t_integer'
							  ()
						  %% Line 291
						  <'utf16'> when 'true' ->
						      call 'erl_types':'t_integer'
							  ()
						  %% Line 292
						  <'utf32'> when 'true' ->
						      call 'erl_types':'t_integer'
							  ()
						  ( <_cor61> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor61})
						    -| ['compiler_generated'] )
						end
					    in  let <State3> =
						    %% Line 294
						    apply 'state__store_conj'/4
							(ValType, 'sub', _cor62, State2)
						in  let <_cor65> =
							%% Line 295
							apply 'mk_var'/1
							    (_cor2)
						    in  let <State4> =
							    %% Line 295
							    apply 'state__store_conj'/4
								(_cor65, 'sub', TypeConstr, State3)
							in  let <_cor67> =
								%% Line 296
								apply 'mk_var'/1
								    (_cor2)
							    in  %% Line 296
								{State4,_cor67}
				( <_cor41> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor41})
				  -| ['compiler_generated'] )
			      end
	  %% Line 297
	  <'case'> when 'true' ->
	      let <Arg> =
		  %% Line 298
		  call 'cerl':'case_arg'
		      (_cor2)
	      in  let <_cor69> =
		      %% Line 299
		      call 'cerl':'case_clauses'
			  (_cor2)
		  in  let <Clauses> =
			  %% Line 299
			  apply 'filter_match_fail'/1
			      (_cor69)
		      in  %% Line 300
			  case apply 'traverse'/3
				   (Arg, _cor1, _cor0) of
			    <{State1,ArgVar}> when 'true' ->
				let <_cor72> =
				    %% Line 301
				    apply 'mk_var'/1
					(_cor2)
				in  %% Line 301
				    apply 'handle_clauses'/5
					(Clauses, _cor72, ArgVar, _cor1, State1)
			    ( <_cor71> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor71})
			      -| ['compiler_generated'] )
			  end
	  %% Line 302
	  <'call'> when 'true' ->
	      %% Line 303
	      apply 'handle_call'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 304
	  <'catch'> when 'true' ->
	      let <_cor73> =
		  %% Line 306
		  apply 'mk_var'/1
		      (_cor2)
	      in  %% Line 306
		  {_cor0,_cor73}
	  %% Line 307
	  <'cons'> when 'true' ->
	      let <Hd> =
		  %% Line 308
		  call 'cerl':'cons_hd'
		      (_cor2)
	      in  let <Tl> =
		      %% Line 309
		      call 'cerl':'cons_tl'
			  (_cor2)
		  in  %% Line 310
		      case apply 'traverse_list'/3
			       ([Hd|[Tl|[]]], _cor1, _cor0) of
			<{State1,[HdVar|[TlVar|[]]]}> when 'true' ->
			    let <_cor77> =
				%% Line 311
				call 'cerl':'fold_literal'
				    (_cor2)
			    in  %% Line 311
				case call 'cerl':'is_literal'
					 (_cor77) of
				  %% Line 312
				  <'true'> when 'true' ->
				      let <_cor78> =
					  %% Line 314
					  call 'erl_types':'t_cons'
					      (HdVar, TlVar)
				      in  %% Line 314
					  {_cor0,_cor78}
				  %% Line 315
				  <'false'> when 'true' ->
				      let <ConsVar> =
					  %% Line 316
					  apply 'mk_var'/1
					      (_cor2)
				      in  let <_cor84> =
					      %% Line 317
					      ( fun (_cor82) ->
						    let <_cor81> =
							%% Line 318
							apply 'lookup_type'/2
							    (HdVar, _cor82)
						    in  let <_cor80> =
							    %% Line 319
							    apply 'lookup_type'/2
								(TlVar, _cor82)
							in  %% Line 318
							    call 'erl_types':'t_cons'
								(_cor81, _cor80)
						-| [{'id',{0,0,'-traverse/3-fun-1-'}}] )
					  in  let <ConsType> =
						  %% Line 317
						  apply 'mk_fun_var'/2
						      (_cor84, %% Line 320
							       [HdVar|[TlVar|[]]])
					      in  let <_cor90> =
						      %% Line 321
						      ( fun (_cor88) ->
							    let <Cons> =
								%% Line 322
								apply 'lookup_type'/2
								    (ConsVar, _cor88)
							    in  %% Line 323
								case call 'erl_types':'t_is_cons'
									 (Cons) of
								  %% Line 324
								  <'false'> when 'true' ->
								      call 'erl_types':'t_any'
									  ()
								  %% Line 325
								  <'true'> when 'true' ->
								      call 'erl_types':'t_cons_hd'
									  (Cons)
								  ( <_cor87> when 'true' ->
									primop 'match_fail'
									    ({'case_clause',_cor87})
								    -| ['compiler_generated'] )
								end
							-| [{'id',{0,0,'-traverse/3-fun-2-'}}] )
						  in  let <HdType> =
							  %% Line 321
							  apply 'mk_fun_var'/2
							      (_cor90, %% Line 327
								       [ConsVar|[]])
						      in  let <_cor96> =
							      %% Line 328
							      ( fun (_cor94) ->
								    let <Cons> =
									%% Line 329
									apply 'lookup_type'/2
									    (ConsVar, _cor94)
								    in  %% Line 330
									case call 'erl_types':'t_is_cons'
										 (Cons) of
									  %% Line 331
									  <'false'> when 'true' ->
									      call 'erl_types':'t_any'
										  ()
									  %% Line 332
									  <'true'> when 'true' ->
									      call 'erl_types':'t_cons_tl'
										  (Cons)
									  ( <_cor93> when 'true' ->
										primop 'match_fail'
										    ({'case_clause',_cor93})
									    -| ['compiler_generated'] )
									end
								-| [{'id',{0,0,'-traverse/3-fun-3-'}}] )
							  in  let <TlType> =
								  %% Line 328
								  apply 'mk_fun_var'/2
								      (_cor96, %% Line 334
									       [ConsVar|[]])
							      in  let <State2> =
								      %% Line 335
								      apply 'state__store_conj_lists'/4
									  ([HdVar|[TlVar|[ConsVar|[]]]], 'sub', %% Line 336
														[HdType|[TlType|[ConsType|[]]]], %% Line 337
																		 State1)
								  in  %% Line 338
								      {State2,ConsVar}
				  ( <_cor99> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor99})
				    -| ['compiler_generated'] )
				end
			( <_cor76> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor76})
			  -| ['compiler_generated'] )
		      end
	  %% Line 340
	  <'fun'> when 'true' ->
	      let <Body> =
		  %% Line 341
		  call 'cerl':'fun_body'
		      (_cor2)
	      in  let <Vars> =
		      %% Line 342
		      call 'cerl':'fun_vars'
			  (_cor2)
		  in  let <DefinedVars1> =
			  %% Line 343
			  apply 'add_def_list'/2
			      (Vars, _cor1)
		      in  let <State0> =
			      %% Line 344
			      apply 'state__new_constraint_context'/1
				  (_cor0)
			  in  let <_cor104> =
				  %% Line 346
				  call 'cerl_trees':'get_label'
				      (_cor2)
			      in  let <_cor109> =
				      %% Line 346
				      case apply 'state__prop_domain'/2
					       (_cor104, State0) of
					%% Line 347
					<'error'> when 'true' ->
					    let <_cor106> =
						call 'erlang':'length'
						    (Vars)
					    in  let <_cor105> =
						    call 'erl_types':'t_none'
							()
						in  call 'erl_types':'t_fun'
							(_cor106, _cor105)
					%% Line 348
					<{'ok',Dom}> when 'true' ->
					    let <_cor107> =
						call 'erl_types':'t_none'
						    ()
					    in  call 'erl_types':'t_fun'
						    (Dom, _cor107)
					( <_cor108> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor108})
					  -| ['compiler_generated'] )
				      end
				  in  let <TreeVar> =
					  %% Line 350
					  apply 'mk_var'/1
					      (_cor2)
				      in  let <_cor122> =
					      %% Line 352
					      try
						  let <_cor113> =
						      %% Line 353
						      case apply 'state__add_prop_constrs'/2
							       (_cor2, State0) of
							%% Line 354
							<'not_called'> when 'true' ->
							    State0
							%% Line 355
							<PropState> when 'true' ->
							    PropState
						      end
						  in  %% Line 357
						      case apply 'traverse'/3
							       (Body, DefinedVars1, _cor113) of
							<{BodyState,BodyVar}> when 'true' ->
							    let <_cor116> =
								%% Line 359
								apply 'mk_var_list'/1
								    (Vars)
							    in  let <_cor117> =
								    %% Line 359
								    call 'erl_types':'t_fun'
									(_cor116, BodyVar)
								in  %% Line 358
								    apply 'state__store_conj'/4
									(TreeVar, 'eq', _cor117, %% Line 359
												 BodyState)
							( <_cor115> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor115})
							  -| ['compiler_generated'] )
						      end
					      of <_cor118> ->
						  _cor118
					      catch <_cor121,_cor120,_cor119> ->
						  case <_cor121,_cor120,_cor119> of
						    %% Line 361
						    <'throw','error',_cor251> when 'true' ->
							%% Line 362
							apply 'state__store_conj'/4
							    (TreeVar, 'eq', _cor109, State0)
						    ( <_cor121,_cor120,_cor119> when 'true' ->
							  primop 'raise'
							      (_cor119, _cor120)
						      -| ['compiler_generated'] )
						  end
					  in  let <Cs> =
						  %% Line 364
						  apply 'state__cs'/1
						      (_cor122)
					      in  let <State3> =
						      %% Line 365
						      apply 'state__store_constrs'/3
							  (TreeVar, Cs, _cor122)
						  in  let <_cor126> =
							  %% Line 366
							  apply 'get_deps'/1
							      (Cs)
						      in  let <Ref> =
							      %% Line 366
							      apply 'mk_constraint_ref'/2
								  (TreeVar, _cor126)
							  in  let <OldCs> =
								  %% Line 367
								  apply 'state__cs'/1
								      (_cor0)
							      in  let <State4> =
								      %% Line 368
								      apply 'state__new_constraint_context'/1
									  (State3)
								  in  let <State5> =
									  %% Line 369
									  apply 'state__store_conj_list'/2
									      ([OldCs|[Ref|[]]], State4)
								      in  let <State6> =
									      %% Line 370
									      apply 'state__store_fun_arity'/2
										  (_cor2, State5)
									  in  let <State7> =
										  %% Line 371
										  apply 'state__add_fun_to_scc'/2
										      (TreeVar, State6)
									      in  %% Line 372
										  {State7,TreeVar}
	  %% Line 373
	  <'let'> when 'true' ->
	      let <Vars> =
		  %% Line 374
		  call 'cerl':'let_vars'
		      (_cor2)
	      in  let <Arg> =
		      %% Line 375
		      call 'cerl':'let_arg'
			  (_cor2)
		  in  let <Body> =
			  %% Line 376
			  call 'cerl':'let_body'
			      (_cor2)
		      in  %% Line 377
			  case apply 'traverse'/3
				   (Arg, _cor1, _cor0) of
			    <{State1,ArgVars}> when 'true' ->
				let <_cor137> =
				    %% Line 378
				    apply 'mk_var_list'/1
					(Vars)
				in  let <_cor138> =
					%% Line 378
					call 'erl_types':'t_product'
					    (_cor137)
				    in  let <State2> =
					    %% Line 378
					    apply 'state__store_conj'/4
						(_cor138, 'eq', %% Line 379
								ArgVars, %% Line 379
									 State1)
					in  let <DefinedVars1> =
						%% Line 380
						apply 'add_def_list'/2
						    (Vars, _cor1)
					    in  %% Line 381
						apply 'traverse'/3
						    (Body, DefinedVars1, State2)
			    ( <_cor136> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor136})
			      -| ['compiler_generated'] )
			  end
	  %% Line 382
	  <'letrec'> when 'true' ->
	      let <Defs> =
		  %% Line 383
		  call 'cerl':'letrec_defs'
		      (_cor2)
	      in  let <Body> =
		      %% Line 384
		      call 'cerl':'letrec_body'
			  (_cor2)
		  in  let <_cor147> =
			  %% Line 385
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor145) ->
					case _cor145 of
					  <[{_X_Var,Fun}|_cor144]> when 'true' ->
					      let <_cor146> =
						  apply 'lc$^0'/1
						      (_cor144)
					      in  ( [Fun|_cor146]
						    -| ['compiler_generated'] )
					  ( <[_cor143|_cor144]> when 'true' ->
						apply 'lc$^0'/1
						    (_cor144)
					    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor145> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor145})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (Defs)
			    -| ['list_comprehension'] )
		      in  let <_cor153> =
			      %% Line 386
			      ( letrec
				    'lc$^1'/1 =
					fun (_cor151) ->
					    case _cor151 of
					      <[{Var,_X_Fun}|_cor150]> when 'true' ->
						  let <_cor152> =
						      apply 'lc$^1'/1
							  (_cor150)
						  in  ( [Var|_cor152]
							-| ['compiler_generated'] )
					      ( <[_cor149|_cor150]> when 'true' ->
						    apply 'lc$^1'/1
							(_cor150)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor151> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor151})
						      -| [{'function_name',{'lc$^1',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^1'/1
					(Defs)
				-| ['list_comprehension'] )
			  in  let <State1> =
				  %% Line 387
				  apply 'state__store_funs'/3
				      (_cor153, _cor147, _cor0)
			      in  let <DefinedVars1> =
				      %% Line 388
				      apply 'add_def_list'/2
					  (_cor153, _cor1)
				  in  %% Line 389
				      case apply 'traverse_list'/3
					       (_cor147, DefinedVars1, State1) of
					<{State2,_cor252}> when 'true' ->
					    %% Line 390
					    apply 'traverse'/3
						(Body, DefinedVars1, State2)
					( <_cor157> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor157})
					  -| ['compiler_generated'] )
				      end
	  %% Line 391
	  <'literal'> when 'true' ->
	      let <_cor158> =
		  %% Line 392
		  call 'cerl':'concrete'
		      (_cor2)
	      in  let <Type> =
		      %% Line 392
		      call 'erl_types':'t_from_term'
			  (_cor158)
		  in  %% Line 393
		      {_cor0,Type}
	  %% Line 394
	  <'module'> when 'true' ->
	      let <Defs> =
		  %% Line 395
		  call 'cerl':'module_defs'
		      (_cor2)
	      in  let <_cor165> =
		      %% Line 396
		      ( letrec
			    'lc$^2'/1 =
				fun (_cor163) ->
				    case _cor163 of
				      <[{_X_Var,Fun}|_cor162]> when 'true' ->
					  let <_cor164> =
					      apply 'lc$^2'/1
						  (_cor162)
					  in  ( [Fun|_cor164]
						-| ['compiler_generated'] )
				      ( <[_cor161|_cor162]> when 'true' ->
					    apply 'lc$^2'/1
						(_cor162)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor163> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor163})
					      -| [{'function_name',{'lc$^2',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^2'/1
				(Defs)
			-| ['list_comprehension'] )
		  in  let <_cor171> =
			  %% Line 397
			  ( letrec
				'lc$^3'/1 =
				    fun (_cor169) ->
					case _cor169 of
					  <[{Var,_X_Fun}|_cor168]> when 'true' ->
					      let <_cor170> =
						  apply 'lc$^3'/1
						      (_cor168)
					      in  ( [Var|_cor170]
						    -| ['compiler_generated'] )
					  ( <[_cor167|_cor168]> when 'true' ->
						apply 'lc$^3'/1
						    (_cor168)
					    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor169> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor169})
						  -| [{'function_name',{'lc$^3',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^3'/1
				    (Defs)
			    -| ['list_comprehension'] )
		      in  let <DefinedVars1> =
			      %% Line 398
			      apply 'add_def_list'/2
				  (_cor171, _cor1)
			  in  let <State1> =
				  %% Line 399
				  apply 'state__store_funs'/3
				      (_cor171, _cor165, _cor0)
			      in  let <FoldFun> =
				      %% Line 400
				      ( fun (_cor178,_cor177) ->
					    let <_cor175> =
						%% Line 402
						apply 'state__new_constraint_context'/1
						    (_cor177)
					    in  %% Line 401
						case apply 'traverse'/3
							 (_cor178, DefinedVars1, _cor175) of
						  <{S,_cor253}> when 'true' ->
						      %% Line 403
						      S
						  ( <_cor176> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor176})
						    -| ['compiler_generated'] )
						end
					-| [{'id',{0,0,'-traverse/3-fun-4-'}}] )
				  in  %% Line 405
				      call 'lists':'foldl'
					  (FoldFun, State1, _cor165)
	  %% Line 406
	  <'primop'> when 'true' ->
	      let <_cor182> =
		  %% Line 407
		  call 'cerl':'primop_name'
		      (_cor2)
	      in  %% Line 407
		  case call 'cerl':'atom_val'
			   (_cor182) of
		    %% Line 408
		    <'match_fail'> when 'true' ->
			call 'erlang':'throw'
			    ('error')
		    %% Line 409
		    <'raise'> when 'true' ->
			call 'erlang':'throw'
			    ('error')
		    %% Line 410
		    <'bs_init_writable'> when 'true' ->
			let <_cor183> =
			    call 'erl_types':'t_from_term'
				(#{}#)
			in  {_cor0,_cor183}
		    %% Line 411
		    <Other> when 'true' ->
			call 'erlang':'error'
			    ({'Unsupported primop',Other})
		  end
	  %% Line 413
	  <'receive'> when 'true' ->
	      let <_cor185> =
		  %% Line 414
		  call 'cerl':'receive_clauses'
		      (_cor2)
	      in  let <Clauses> =
		      %% Line 414
		      apply 'filter_match_fail'/1
			  (_cor185)
		  in  let <Timeout> =
			  %% Line 415
			  call 'cerl':'receive_timeout'
			      (_cor2)
		      in  let <_cor191> =
			      %% Line 416
			      ( case call 'cerl':'is_c_atom'
					 (Timeout) of
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					let <_cor189> =
					    %% Line 417
					    call 'cerl':'atom_val'
						(Timeout)
					in  %% Line 417
					    call 'erlang':'=:='
						(_cor189, 'infinity')
				    -| ['compiler_generated'] )
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					'false'
				    -| ['compiler_generated'] )
				  ( <_cor188> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {( 'badarg'
						    -| ['compiler_generated'] ),_cor188}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  in  %% Line 416
			      case _cor191 of
				%% Line 418
				<'true'> when 'true' ->
				    let <_cor192> =
					%% Line 419
					apply 'mk_var'/1
					    (_cor2)
				    in  %% Line 419
					apply 'handle_clauses'/5
					    (Clauses, _cor192, [], _cor1, _cor0)
				%% Line 420
				<'false'> when 'true' ->
				    let <Action> =
					%% Line 421
					call 'cerl':'receive_action'
					    (_cor2)
				    in  %% Line 422
					case apply 'traverse'/3
						 (Timeout, _cor1, _cor0) of
					  <{State1,TimeoutVar}> when 'true' ->
					      let <_cor195> =
						  %% Line 423
						  call 'erl_types':'t_timeout'
						      ()
					      in  let <State2> =
						      %% Line 423
						      apply 'state__store_conj'/4
							  (TimeoutVar, 'sub', _cor195, State1)
						  in  let <_cor197> =
							  %% Line 424
							  apply 'mk_var'/1
							      (_cor2)
						      in  %% Line 424
							  apply 'handle_clauses'/6
							      (Clauses, _cor197, [], Action, _cor1, State2)
					  ( <_cor194> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor194})
					    -| ['compiler_generated'] )
					end
				( <_cor198> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor198})
				  -| ['compiler_generated'] )
			      end
	  %% Line 426
	  <'seq'> when 'true' ->
	      let <Body> =
		  %% Line 427
		  call 'cerl':'seq_body'
		      (_cor2)
	      in  let <Arg> =
		      %% Line 428
		      call 'cerl':'seq_arg'
			  (_cor2)
		  in  %% Line 429
		      case apply 'traverse'/3
			       (Arg, _cor1, _cor0) of
			<{State1,_cor254}> when 'true' ->
			    %% Line 430
			    apply 'traverse'/3
				(Body, _cor1, State1)
			( <_cor201> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor201})
			  -| ['compiler_generated'] )
		      end
	  %% Line 431
	  <'try'> when 'true' ->
	      %% Line 432
	      apply 'handle_try'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 433
	  <'tuple'> when 'true' ->
	      let <Elements> =
		  %% Line 434
		  call 'cerl':'tuple_es'
		      (_cor2)
	      in  %% Line 435
		  case apply 'traverse_list'/3
			   (Elements, _cor1, _cor0) of
		    <{State1,EVars}> when 'true' ->
			let <_cor204> =
			    %% Line 437
			    call 'cerl':'fold_literal'
				(_cor2)
			in  let <State2,TupleType> =
				%% Line 437
				case call 'cerl':'is_literal'
					 (_cor204) of
				  %% Line 438
				  <'true'> when 'true' ->
				      let <_cor205> =
					  %% Line 440
					  call 'erl_types':'t_tuple'
					      (EVars)
				      in  %% Line 440
					  <_cor0,_cor205>
				  %% Line 441
				  <'false'> when 'true' ->
				      let <Fun> =
					  %% Line 445
					  ( fun (_cor210,_cor209) ->
						%% Line 446
						case call 'erl_types':'t_has_var'
							 (_cor210) of
						  %% Line 447
						  <'true'> when 'true' ->
						      %% Line 448
						      case apply 'state__mk_var'/1
							       (_cor209) of
							<{AccState1,NewVar}> when 'true' ->
							    let <_cor207> =
								%% Line 450
								apply 'state__store_conj'/4
								    (_cor210, 'eq', NewVar, AccState1)
							    in  %% Line 449
								{NewVar,_cor207}
							( <_cor206> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor206})
							  -| ['compiler_generated'] )
						      end
						  %% Line 451
						  <'false'> when 'true' ->
						      %% Line 452
						      {_cor210,_cor209}
						  ( <_cor208> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor208})
						    -| ['compiler_generated'] )
						end
					    -| [{'id',{0,0,'-traverse/3-fun-5-'}}] )
				      in  %% Line 455
					  case call 'lists':'mapfoldl'
						   (Fun, State1, EVars) of
					    <{NewEvars,TmpState}> when 'true' ->
						let <_cor215> =
						    %% Line 456
						    call 'erl_types':'t_tuple'
							(NewEvars)
						in  %% Line 456
						    <TmpState,_cor215>
					    ( <_cor214> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor214})
					      -| ['compiler_generated'] )
					  end
				  ( <_cor216> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor216})
				    -| ['compiler_generated'] )
				end
			    in  %% Line 458
				case Elements of
				  %% Line 459
				  <[Tag|Fields]> when 'true' ->
				      let <_cor221> =
					  %% Line 460
					  ( case call 'cerl':'is_c_atom'
						     (Tag) of
					      ( <( 'true'
						   -| ['compiler_generated'] )> when 'true' ->
						    apply 'is_literal_record'/1
							(_cor2)
						-| ['compiler_generated'] )
					      ( <( 'false'
						   -| ['compiler_generated'] )> when 'true' ->
						    'false'
						-| ['compiler_generated'] )
					      ( <_cor219> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {( 'badarg'
								-| ['compiler_generated'] ),_cor219}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      in  %% Line 460
					  case _cor221 of
					    %% Line 461
					    <'true'> when 'true' ->
						let <Arity> =
						    %% Line 463
						    call 'erlang':'length'
							(Fields)
						in  %% Line 464
						    ( case State2 of
							( <( {'state',_cor255,_cor256,_cor257,_cor258,_cor259,_cor260,_cor261,_cor262,_cor263,_cor264,_cor265,_cor266,_cor267,_rec0,_cor268,_cor269,_cor270}
							     -| ['compiler_generated'] )> when 'true' ->
							      let <_cor226> =
								  %% Line 465
								  call 'cerl':'atom_val'
								      (Tag)
							      in  %% Line 465
								  case apply 'lookup_record'/3
									   (_rec0, _cor226, Arity) of
								    %% Line 466
								    <'error'> when 'true' ->
									{State2,TupleType}
								    %% Line 467
								    <{'ok',RecType}> when 'true' ->
									let <State3> =
									    %% Line 468
									    apply 'state__store_conj'/4
										(TupleType, 'sub', RecType, State2)
									in  %% Line 469
									    {State3,TupleType}
								    ( <_cor228> when 'true' ->
									  primop 'match_fail'
									      ({'case_clause',_cor228})
								      -| ['compiler_generated'] )
								  end
							  -| ['compiler_generated'] )
							( <_cor271> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {'badrecord','state'}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						      -| ['compiler_generated'] )
					    %% Line 471
					    <'false'> when 'true' ->
						{State2,TupleType}
					    ( <_cor229> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor229})
					      -| ['compiler_generated'] )
					  end
				  %% Line 473
				  <[]> when 'true' ->
				      {State2,TupleType}
				  ( <_cor230> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor230})
				    -| ['compiler_generated'] )
				end
		    ( <_cor203> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor203})
		      -| ['compiler_generated'] )
		  end
	  %% Line 475
	  <'map'> when 'true' ->
	      let <_cor231> =
		  %% Line 476
		  call 'erl_types':'t_map'
		      ([])
	      in  %% Line 476
		  {_cor0,_cor231}
	  %% Line 477
	  <'values'> when 'true' ->
	      let <Elements> =
		  %% Line 484
		  call 'cerl':'values_es'
		      (_cor2)
	      in  %% Line 485
		  case apply 'traverse_list'/3
			   (Elements, _cor1, _cor0) of
		    <{State1,EVars}> when 'true' ->
			let <Arity> =
			    %% Line 486
			    call 'erlang':'length'
				(EVars)
			in  let <_cor235> =
				%% Line 487
				call 'ordsets':'from_list'
				    (EVars)
			    in  let <Unique> =
				    %% Line 487
				    call 'erlang':'length'
					(_cor235)
				in  %% Line 488
				    case <> of
				      %% Line 489
				      <>
					  when call 'erlang':'=:='
						(Arity,
						 Unique) ->
					  let <_cor237> =
					      call 'erl_types':'t_product'
						  (EVars)
					  in  {State1,_cor237}
				      %% Line 490
				      <> when 'true' ->
					  %% Line 491
					  case apply 'state__mk_vars'/2
						   (Arity, State1) of
					    <{State2,Vars}> when 'true' ->
						let <State3> =
						    %% Line 492
						    apply 'state__store_conj_lists'/4
							(Vars, 'eq', EVars, State2)
						in  let <_cor240> =
							%% Line 493
							call 'erl_types':'t_product'
							    (Vars)
						    in  %% Line 493
							{State3,_cor240}
					    ( <_cor238> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor238})
					      -| ['compiler_generated'] )
					  end
				    end
		    ( <_cor233> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor233})
		      -| ['compiler_generated'] )
		  end
	  %% Line 495
	  <'var'> when 'true' ->
	      %% Line 496
	      case apply 'is_def'/2
		       (_cor2, _cor1) of
		%% Line 497
		<'true'> when 'true' ->
		    let <_cor242> =
			apply 'mk_var'/1
			    (_cor2)
		    in  {_cor0,_cor242}
		%% Line 498
		<'false'> when 'true' ->
		    %% Line 500
		    case apply 'state__lookup_undef_var'/2
			     (_cor2, _cor0) of
		      %% Line 501
		      <'error'> when 'true' ->
			  call 'erlang':'error'
			      ({'Undefined variable',_cor2})
		      %% Line 502
		      <{'ok',Type}> when 'true' ->
			  %% Line 503
			  case apply 'state__mk_var'/1
				   (_cor0) of
			    <{State1,NewVar}> when 'true' ->
				let <_cor244> =
				    %% Line 504
				    apply 'state__store_conj'/4
					(NewVar, 'sub', Type, State1)
				in  %% Line 504
				    {_cor244,NewVar}
			    ( <_cor243> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor243})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor245> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor245})
			-| ['compiler_generated'] )
		    end
		( <_cor246> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor246})
		  -| ['compiler_generated'] )
	      end
	  %% Line 507
	  <Other> when 'true' ->
	      %% Line 508
	      call 'erlang':'error'
		  ({'Unsupported type',Other})
	end
'traverse_list'/3 =
    %% Line 511
    fun (_cor2,_cor1,_cor0) ->
	%% Line 512
	apply 'traverse_list'/4
	    (_cor2, _cor1, _cor0, [])
'traverse_list'/4 =
    %% Line 514
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Tree|Tail],DefinedVars,State,Acc> when 'true' ->
	      %% Line 515
	      case apply 'traverse'/3
		       (Tree, DefinedVars, State) of
		<{State1,Var}> when 'true' ->
		    %% Line 516
		    apply 'traverse_list'/4
			(Tail, DefinedVars, State1, [Var|Acc])
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 517
	  <[],_X_DefinedVars,State,Acc> when 'true' ->
	      let <_cor5> =
		  %% Line 518
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 518
		  {State,_cor5}
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'traverse_list',4}}] )
	    -| ['compiler_generated'] )
	end
'add_def'/2 =
    %% Line 520
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 521
	    call 'cerl_trees':'get_label'
		(_cor1)
	in  %% Line 521
	    call 'sets':'add_element'
		(_cor2, _cor0)
'add_def_list'/2 =
    %% Line 523
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Set> when 'true' ->
	      let <_cor2> =
		  %% Line 524
		  apply 'add_def'/2
		      (H, Set)
	      in  %% Line 524
		  apply 'add_def_list'/2
		      (T, _cor2)
	  %% Line 525
	  <[],Set> when 'true' ->
	      %% Line 526
	      Set
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'add_def_list',2}}] )
	    -| ['compiler_generated'] )
	end
'add_def_from_tree'/2 =
    %% Line 528
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 529
	    ( fun (_cor4,_cor3) ->
		  %% Line 530
		  case call 'cerl':'is_c_var'
			   (_cor4) of
		    %% Line 531
		    <'true'> when 'true' ->
			[_cor4|_cor3]
		    %% Line 532
		    <'false'> when 'true' ->
			_cor3
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-add_def_from_tree/2-fun-0-'}}] )
	in  let <Vars> =
		%% Line 529
		call 'cerl_trees':'fold'
		    (_cor7, %% Line 534
			    [], _cor1)
	    in  %% Line 535
		apply 'add_def_list'/2
		    (Vars, _cor0)
'add_def_from_tree_list'/2 =
    %% Line 537
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],DefinedVars> when 'true' ->
	      let <_cor2> =
		  %% Line 538
		  apply 'add_def_from_tree'/2
		      (H, DefinedVars)
	      in  %% Line 538
		  apply 'add_def_from_tree_list'/2
		      (T, _cor2)
	  %% Line 539
	  <[],DefinedVars> when 'true' ->
	      %% Line 540
	      DefinedVars
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'add_def_from_tree_list',2}}] )
	    -| ['compiler_generated'] )
	end
'is_def'/2 =
    %% Line 542
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 543
	    call 'cerl_trees':'get_label'
		(_cor1)
	in  %% Line 543
	    call 'sets':'is_element'
		(_cor2, _cor0)
'handle_try'/3 =
    %% Line 549
    fun (_cor2,_cor1,_cor0) ->
	let <Arg> =
	    %% Line 550
	    call 'cerl':'try_arg'
		(_cor2)
	in  let <Vars> =
		%% Line 551
		call 'cerl':'try_vars'
		    (_cor2)
	    in  let <EVars> =
		    %% Line 552
		    call 'cerl':'try_evars'
			(_cor2)
		in  let <Body> =
			%% Line 553
			call 'cerl':'try_body'
			    (_cor2)
		    in  let <Handler> =
			    %% Line 554
			    call 'cerl':'try_handler'
				(_cor2)
			in  let <State1> =
				%% Line 555
				apply 'state__new_constraint_context'/1
				    (_cor0)
			    in  let <_cor20> =
				    %% Line 557
				    try
					%% Line 558
					case apply 'traverse'/3
						 (Arg, _cor1, State1) of
					  <{State2,ArgVar}> when 'true' ->
					      let <DefinedVars1> =
						  %% Line 559
						  apply 'add_def_list'/2
						      (Vars, _cor1)
					      in  %% Line 560
						  case apply 'traverse'/3
							   (Body, DefinedVars1, State2) of
						    <{State3,BodyVar1}> when 'true' ->
							let <_cor12> =
							    %% Line 561
							    apply 'mk_var_list'/1
								(Vars)
							in  let <_cor13> =
								%% Line 561
								call 'erl_types':'t_product'
								    (_cor12)
							    in  let <State4> =
								    %% Line 561
								    apply 'state__store_conj'/4
									(_cor13, 'eq', ArgVar, %% Line 562
											       State3)
								in  %% Line 563
								    {State4,BodyVar1}
						    ( <_cor11> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor11})
						      -| ['compiler_generated'] )
						  end
					  ( <_cor9> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor9})
					    -| ['compiler_generated'] )
					end
				    of <_cor15> ->
					_cor15
				    catch <_cor18,_cor17,_cor16> ->
					case <_cor18,_cor17,_cor16> of
					  %% Line 565
					  <'throw','error',_cor69> when 'true' ->
					      let <_cor19> =
						  %% Line 566
						  call 'erl_types':'t_none'
						      ()
					      in  %% Line 566
						  {State1,_cor19}
					  ( <_cor18,_cor17,_cor16> when 'true' ->
						primop 'raise'
						    (_cor16, _cor17)
					    -| ['compiler_generated'] )
					end
				in  %% Line 556
				    case _cor20 of
				      <{ArgBodyState,BodyVar}> when 'true' ->
					  let <State6> =
					      %% Line 568
					      apply 'state__new_constraint_context'/1
						  (ArgBodyState)
					  in  let <_cor35> =
						  %% Line 570
						  try
						      let <_cor28> =
							  %% Line 571
							  ( letrec
								'lc$^0'/1 =
								    fun (_cor25) ->
									case _cor25 of
									  <[X|_cor24]> when 'true' ->
									      ( case call 'cerl':'is_c_var'
											 (X) of
										  <'true'> when 'true' ->
										      let <_cor26> =
											  apply 'lc$^0'/1
											      (_cor24)
										      in  ( [X|_cor26]
											    -| ['compiler_generated'] )
										  ( <'false'> when 'true' ->
											apply 'lc$^0'/1
											    (_cor24)
										    -| ['compiler_generated'] )
										  ( <_cor27> when 'true' ->
											primop 'match_fail'
											    ({'case_clause',_cor27})
										    -| ['compiler_generated'] )
										end
										-| ['list_comprehension'] )
									  <[]> when 'true' ->
									      []
									  ( <_cor25> when 'true' ->
										( primop 'match_fail'
										      ({'function_clause',_cor25})
										  -| [{'function_name',{'lc$^0',1}}] )
									    -| ['compiler_generated'] )
									end
							    in  apply 'lc$^0'/1
								    (EVars)
							    -| ['list_comprehension'] )
						      in  let <DefinedVars2> =
							      %% Line 571
							      apply 'add_def_list'/2
								  (_cor28, _cor1)
							  in  %% Line 573
							      apply 'traverse'/3
								  (Handler, DefinedVars2, State6)
						  of <_cor30> ->
						      _cor30
						  catch <_cor33,_cor32,_cor31> ->
						      case <_cor33,_cor32,_cor31> of
							%% Line 575
							<'throw','error',_cor70> when 'true' ->
							    let <_cor34> =
								%% Line 576
								call 'erl_types':'t_none'
								    ()
							    in  %% Line 576
								{State6,_cor34}
							( <_cor33,_cor32,_cor31> when 'true' ->
							      primop 'raise'
								  (_cor31, _cor32)
							  -| ['compiler_generated'] )
						      end
					      in  %% Line 569
						  case _cor35 of
						    <{HandlerState,HandlerVar}> when 'true' ->
							let <ArgBodyCs> =
							    %% Line 578
							    apply 'state__cs'/1
								(ArgBodyState)
							in  let <HandlerCs> =
								%% Line 579
								apply 'state__cs'/1
								    (HandlerState)
							    in  let <TreeVar> =
								    %% Line 580
								    apply 'mk_var'/1
									(_cor2)
								in  let <OldCs> =
									%% Line 581
									apply 'state__cs'/1
									    (_cor0)
								    in  %% Line 582
									case apply 'state__is_in_guard'/1
										 (_cor0) of
									  %% Line 583
									  <'true'> when 'true' ->
									      let <_cor41> =
										  %% Line 585
										  apply 'mk_constraint'/3
										      (BodyVar, %% Line 586
												'eq', %% Line 587
												      TreeVar)
									      in  let <Conj1> =
										      %% Line 584
										      apply 'mk_conj_constraint_list'/1
											  ([ArgBodyCs|%% Line 585
												      [_cor41|%% Line 587
													      []]])
										  in  let <_cor43> =
											  %% Line 589
											  apply 'mk_constraint'/3
											      (HandlerVar, %% Line 590
													   'eq', %% Line 591
														 TreeVar)
										      in  let <Disj> =
											      %% Line 588
											      apply 'mk_disj_constraint_list'/1
												  ([Conj1|%% Line 589
													  [_cor43|%% Line 591
														  []]])
											  in  let <NewState1> =
												  %% Line 592
												  apply 'state__new_constraint_context'/1
												      (HandlerState)
											      in  let <Conj2> =
												      %% Line 593
												      apply 'mk_conj_constraint_list'/1
													  ([OldCs|[Disj|[]]])
												  in  let <NewState2> =
													  %% Line 594
													  apply 'state__store_conj'/2
													      (Conj2, NewState1)
												      in  %% Line 595
													  {NewState2,TreeVar}
									  %% Line 596
									  <'false'> when 'true' ->
									      let <_cor49> =
										  %% Line 598
										  call 'erl_types':'t_is_none'
										      (BodyVar)
									      in  let <_cor48> =
										      %% Line 598
										      call 'erl_types':'t_is_none'
											  (HandlerVar)
										  in  let <NewCs,ReturnVar> =
											  %% Line 598
											  case <_cor49,_cor48> of
											    %% Line 599
											    <'false','false'> when 'true' ->
												let <_cor50> =
												    %% Line 602
												    apply 'mk_constraint'/3
													(TreeVar, %% Line 603
														  'eq', %% Line 604
															BodyVar)
												in  let <Conj1> =
													%% Line 601
													apply 'mk_conj_constraint_list'/1
													    ([ArgBodyCs|%% Line 602
															[_cor50|%% Line 604
																[]]])
												    in  let <_cor52> =
													    %% Line 607
													    apply 'mk_constraint'/3
														(TreeVar, %% Line 608
															  'eq', %% Line 609
																HandlerVar)
													in  let <Conj2> =
														%% Line 606
														apply 'mk_conj_constraint_list'/1
														    ([HandlerCs|%% Line 607
																[_cor52|%% Line 609
																	[]]])
													    in  let <Disj> =
														    %% Line 610
														    apply 'mk_disj_constraint_list'/1
															([Conj1|[Conj2|[]]])
														in  %% Line 611
														    <Disj,TreeVar>
											    %% Line 612
											    <'false','true'> when 'true' ->
												let <_cor55> =
												    %% Line 614
												    apply 'mk_constraint'/3
													(TreeVar, %% Line 615
														  'eq', %% Line 616
															BodyVar)
												in  let <_cor56> =
													%% Line 613
													apply 'mk_conj_constraint_list'/1
													    ([ArgBodyCs|%% Line 614
															[_cor55|%% Line 616
																[]]])
												    in  <_cor56,%% Line 617
														BodyVar>
											    %% Line 618
											    <'true','false'> when 'true' ->
												let <_cor57> =
												    %% Line 620
												    apply 'mk_constraint'/3
													(TreeVar, %% Line 621
														  'eq', %% Line 622
															HandlerVar)
												in  let <_cor58> =
													%% Line 619
													apply 'mk_conj_constraint_list'/1
													    ([HandlerCs|%% Line 620
															[_cor57|%% Line 622
																[]]])
												    in  <_cor58,%% Line 623
														HandlerVar>
											    %% Line 624
											    <'true','true'> when 'true' ->
												%% Line 626
												call 'erlang':'throw'
												    ('error')
											    ( <_fol28,_fol29> when 'true' ->
												  let <_cor59> = {_fol28,_fol29}
												  in  primop 'match_fail'
													  ({'case_clause',_cor59})
											      -| ['compiler_generated'] )
											  end
										      in  let <Conj> =
											      %% Line 628
											      apply 'mk_conj_constraint_list'/1
												  ([OldCs|[NewCs|[]]])
											  in  let <NewState1> =
												  %% Line 629
												  apply 'state__new_constraint_context'/1
												      (HandlerState)
											      in  let <NewState2> =
												      %% Line 630
												      apply 'state__store_conj'/2
													  (Conj, NewState1)
												  in  %% Line 631
												      {NewState2,ReturnVar}
									  ( <_cor65> when 'true' ->
										primop 'match_fail'
										    ({'case_clause',_cor65})
									    -| ['compiler_generated'] )
									end
						    ( <_cor36> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor36})
						      -| ['compiler_generated'] )
						  end
				      ( <_cor21> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor21})
					-| ['compiler_generated'] )
				    end
'handle_call'/3 =
    %% Line 638
    fun (_cor2,_cor1,_cor0) ->
	let <Args> =
	    %% Line 639
	    call 'cerl':'call_args'
		(_cor2)
	in  let <Mod> =
		%% Line 640
		call 'cerl':'call_module'
		    (_cor2)
	    in  let <Fun> =
		    %% Line 641
		    call 'cerl':'call_name'
			(_cor2)
		in  let <Dst> =
			%% Line 642
			apply 'mk_var'/1
			    (_cor2)
		    in  let <_cor9> =
			    %% Line 643
			    ( case call 'cerl':'is_c_atom'
				       (Mod) of
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      call 'cerl':'is_c_atom'
					  (Fun)
				  -| ['compiler_generated'] )
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      'false'
				  -| ['compiler_generated'] )
				( <_cor7> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {( 'badarg'
						  -| ['compiler_generated'] ),_cor7}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			in  %% Line 643
			    case _cor9 of
			      %% Line 644
			      <'true'> when 'true' ->
				  let <M> =
				      %% Line 645
				      call 'cerl':'atom_val'
					  (Mod)
				  in  let <F> =
					  %% Line 646
					  call 'cerl':'atom_val'
					      (Fun)
				      in  let <A> =
					      %% Line 647
					      call 'erlang':'length'
						  (Args)
					  in  let <MFA> = {%% Line 648
						   M,%% Line 648
						     F,%% Line 648
						       A}
					      in  %% Line 649
						  case apply 'traverse_list'/3
							   (Args, _cor1, _cor0) of
						    <{State1,ArgVars}> when 'true' ->
							%% Line 650
							case apply 'state__lookup_rec_var_in_scope'/2
								 (MFA, _cor0) of
							  %% Line 651
							  <'error'> when 'true' ->
							      %% Line 652
							      case apply 'get_bif_constr'/4
								       (MFA, Dst, ArgVars, State1) of
								%% Line 653
								<'none'> when 'true' ->
								    let <_cor15> =
									%% Line 654
									apply 'get_plt_constr'/4
									    (MFA, Dst, ArgVars, State1)
								    in  %% Line 654
									{_cor15,Dst}
								%% Line 655
								<C> when 'true' ->
								    let <_cor16> =
									%% Line 656
									apply 'state__store_conj'/2
									    (C, State1)
								    in  %% Line 656
									{_cor16,Dst}
							      end
							  %% Line 658
							  <{'ok',Var}> when 'true' ->
							      let <Label> =
								  %% Line 662
								  call 'cerl_trees':'get_label'
								      (_cor2)
							      in  let <Apply> =
								      %% Line 663
								      call 'cerl':'ann_c_apply'
									  ([{'label',Label}|[]], Var, Args)
								  in  %% Line 664
								      apply 'traverse'/3
									  (Apply, _cor1, _cor0)
							  ( <_cor20> when 'true' ->
								primop 'match_fail'
								    ({'case_clause',_cor20})
							    -| ['compiler_generated'] )
							end
						    ( <_cor14> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor14})
						      -| ['compiler_generated'] )
						  end
			      %% Line 666
			      <'false'> when 'true' ->
				  %% Line 667
				  case apply 'traverse_list'/3
					   ([Mod|[Fun|[]]], _cor1, _cor0) of
				    <{State1,MF}> when 'true' ->
					let <_cor22> =
					    %% Line 668
					    call 'erl_types':'t_module'
						()
					in  let <_cor23> =
						%% Line 668
						call 'erl_types':'t_atom'
						    ()
					    in  let <_cor24> =
						    %% Line 668
						    apply 'state__store_conj_lists'/4
							(MF, 'sub', [_cor22|[_cor23|[]]], State1)
						in  %% Line 668
						    {_cor24,Dst}
				    ( <_cor21> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor21})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor25> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor25})
				-| ['compiler_generated'] )
			    end
'get_plt_constr'/4 =
    %% Line 671
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Plt> =
	    %% Line 672
	    apply 'state__plt'/1
		(_cor0)
	in  let <PltRes> =
		%% Line 673
		call 'dialyzer_plt':'lookup'
		    (Plt, _cor3)
	    in  %% Line 674
		( case _cor0 of
		    ( <( {'state',_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_rec1,_cor54}
			 -| ['compiler_generated'] )> when 'true' ->
			  let <_cor10> =
			      %% Line 676
			      case call 'lists':'member'
				       (_cor3, _rec1) of
				%% Line 677
				<'true'> when 'true' ->
				    'none'
				%% Line 678
				<'false'> when 'true' ->
				    call 'dialyzer_plt':'lookup_contract'
					(Plt, _cor3)
				( <_cor9> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor9})
				  -| ['compiler_generated'] )
			      end
			  in  %% Line 680
			      case _cor10 of
				%% Line 681
				<'none'> when 'true' ->
				    %% Line 682
				    case PltRes of
				      %% Line 683
				      <'none'> when 'true' ->
					  _cor0
				      %% Line 684
				      <{'value',{PltRetType,PltArgTypes}}> when 'true' ->
					  %% Line 685
					  apply 'state__store_conj_lists'/4
					      ([_cor2|_cor1], 'sub', %% Line 686
								     [PltRetType|PltArgTypes], _cor0)
				      ( <_cor12> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor12})
					-| ['compiler_generated'] )
				    end
				%% Line 688
				<{'value',C = {'contract',_cor56,GenArgs,_cor57}}> when 'true' ->
				    let <RetType,ArgCs> =
					%% Line 690
					case PltRes of
					  %% Line 691
					  <'none'> when 'true' ->
					      let <_cor16> =
						  %% Line 692
						  ( fun (_cor14) ->
							let <ArgTypes> =
							    %% Line 693
							    apply 'lookup_type_list'/2
								(_cor1, _cor14)
							in  %% Line 694
							    apply 'get_contract_return'/2
								(C, ArgTypes)
						    -| [{'id',{0,0,'-get_plt_constr/4-fun-0-'}}] )
					      in  let <_cor17> =
						      %% Line 692
						      apply 'mk_fun_var'/2
							  (_cor16, _cor1)
						  in  <_cor17,%% Line 695
							      GenArgs>
					  %% Line 696
					  <{'value',{PltRetType,PltArgTypes}}> when 'true' ->
					      let <_cor29> =
						  %% Line 699
						  ( fun (_cor27) ->
							let <ArgTypes> =
							    %% Line 700
							    apply 'lookup_type_list'/2
								(_cor1, _cor27)
							in  let <CRet> =
								%% Line 701
								apply 'get_contract_return'/2
								    (C, ArgTypes)
							    in  %% Line 702
								call 'erl_types':'t_inf'
								    (CRet, PltRetType)
						    -| [{'id',{0,0,'-get_plt_constr/4-fun-1-'}}] )
					      in  let <_cor30> =
						      %% Line 698
						      apply 'mk_fun_var'/2
							  (_cor29, _cor1)
						  in  let <_cor24> =
							  %% Line 704
							  ( letrec
								'lc$^0'/1 =
								    fun (_cor21) ->
									case _cor21 of
									  <[{X,Y}|_cor19]> when 'true' ->
									      let <_cor22> =
										  call 'erl_types':'t_inf'
										      (X, Y)
									      in  let <_cor23> =
										      apply 'lc$^0'/1
											  (_cor19)
										  in  ( [_cor22|_cor23]
											-| ['compiler_generated'] )
									  ( <[_cor18|_cor19]> when 'true' ->
										apply 'lc$^0'/1
										    (_cor19)
									    -| ['compiler_generated'] )
									  <[]> when 'true' ->
									      []
									  ( <_cor21> when 'true' ->
										( primop 'match_fail'
										      ({'function_clause',_cor21})
										  -| [{'function_name',{'lc$^0',1}}] )
									    -| ['compiler_generated'] )
									end
							    in  let <_cor20> =
								    call 'lists':'zip'
									(GenArgs, PltArgTypes)
								in  apply 'lc$^0'/1
									(_cor20)
							    -| ['list_comprehension'] )
						      in  <_cor30,_cor24>
					  ( <_cor31> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor31})
					    -| ['compiler_generated'] )
					end
				    in  %% Line 706
					apply 'state__store_conj_lists'/4
					    ([_cor2|_cor1], 'sub', [RetType|ArgCs], _cor0)
				( <_cor34> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor34})
				  -| ['compiler_generated'] )
			      end
		      -| ['compiler_generated'] )
		    ( <_cor55> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','state'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
'get_contract_return'/2 =
    %% Line 709
    fun (_cor1,_cor0) ->
	%% Line 710
	call 'dialyzer_contracts':'get_contract_return'
	    (_cor1, _cor0)
'filter_match_fail'/1 =
    %% Line 712
    fun (_cor0) ->
	case _cor0 of
	  <Cls = [Clause|[]]> when 'true' ->
	      let <Body> =
		  %% Line 713
		  call 'cerl':'clause_body'
		      (Clause)
	      in  %% Line 714
		  case call 'cerl':'type'
			   (Body) of
		    %% Line 715
		    <'primop'> when 'true' ->
			let <_cor2> =
			    %% Line 716
			    call 'cerl':'primop_name'
				(Body)
			in  %% Line 716
			    case call 'cerl':'atom_val'
				     (_cor2) of
			      %% Line 717
			      <'match_fail'> when 'true' ->
				  []
			      %% Line 718
			      <'raise'> when 'true' ->
				  []
			      %% Line 719
			      <_cor7> when 'true' ->
				  Cls
			    end
		    %% Line 721
		    <_cor8> when 'true' ->
			Cls
		  end
	  %% Line 723
	  <[H|T]> when 'true' ->
	      let <_cor5> =
		  %% Line 724
		  apply 'filter_match_fail'/1
		      (T)
	      in  %% Line 724
		  [H|_cor5]
	  %% Line 725
	  <[]> when 'true' ->
	      %% Line 728
	      []
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'filter_match_fail',1}}] )
	    -| ['compiler_generated'] )
	end
'handle_clauses'/5 =
    %% Line 737
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 738
	apply 'handle_clauses'/6
	    (_cor4, _cor3, _cor2, 'none', _cor1, _cor0)
'handle_clauses'/6 =
    %% Line 740
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_cor31,_cor32,Action,DefinedVars,State>
	      when call 'erlang':'=/='
		    (Action,
		     'none') ->
	      %% Line 742
	      apply 'traverse'/3
		  (Action, DefinedVars, State)
	  %% Line 743
	  <Clauses,TopVar,Arg,Action,DefinedVars,State> when 'true' ->
	      let <_cor7> =
		  %% Line 745
		  case <> of
		    <>
			when try
			      let <_cor6> =
				  call 'erlang':'length'
				      (Clauses)
			      in  call 'erlang':'>'
				      (_cor6, 15)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			'overflow'
		    %% Line 746
		    <> when 'true' ->
			[]
		  end
	      in  %% Line 748
		  case apply 'handle_clauses_1'/7
			   (Clauses, TopVar, Arg, DefinedVars, %% Line 749
							       State, _cor7, %% Line 749
									     []) of
		    <{State1,CList}> when 'true' ->
			let <_cor19> =
			    %% Line 751
			    case Action of
			      %% Line 752
			      <'none'> when 'true' ->
				  %% Line 753
				  case <> of
				    <>
					when call 'erlang':'=:='
					      (CList,
					       []) ->
					call 'erlang':'throw'
					    ('error')
				    %% Line 754
				    <> when 'true' ->
					{CList,State1}
				  end
			      %% Line 756
			      <_cor33> when 'true' ->
				  %% Line 757
				  try
				      %% Line 758
				      case apply 'traverse'/3
					       (Action, DefinedVars, State1) of
					<{State2,ActionVar}> when 'true' ->
					    let <TmpC> =
						%% Line 759
						apply 'mk_constraint'/3
						    (TopVar, 'eq', ActionVar)
					    in  let <_cor12> =
						    %% Line 760
						    apply 'state__cs'/1
							(State2)
						in  let <ActionCs> =
							%% Line 760
							apply 'mk_conj_constraint_list'/1
							    ([_cor12|[TmpC|[]]])
						    in  %% Line 761
							{[ActionCs|CList],State2}
					( <_cor10> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor10})
					  -| ['compiler_generated'] )
				      end
				  of <_cor14> ->
				      _cor14
				  catch <_cor17,_cor16,_cor15> ->
				      case <_cor17,_cor16,_cor15> of
					%% Line 763
					<'throw','error',_cor34> when 'true' ->
					    %% Line 764
					    case <> of
					      <>
						  when call 'erlang':'=:='
							(CList,
							 []) ->
						  call 'erlang':'throw'
						      ('error')
					      %% Line 765
					      <> when 'true' ->
						  {CList,State1}
					    end
					( <_cor17,_cor16,_cor15> when 'true' ->
					      primop 'raise'
						  (_cor15, _cor16)
					  -| ['compiler_generated'] )
				      end
			    end
			in  %% Line 750
			    case _cor19 of
			      <{NewCs,NewState}> when 'true' ->
				  let <OldCs> =
				      %% Line 769
				      apply 'state__cs'/1
					  (State)
				  in  let <NewCList> =
					  %% Line 770
					  apply 'mk_disj_constraint_list'/1
					      (NewCs)
				      in  let <FinalState> =
					      %% Line 771
					      apply 'state__new_constraint_context'/1
						  (NewState)
					  in  let <_cor24> =
						  %% Line 772
						  apply 'state__store_conj_list'/2
						      ([OldCs|[NewCList|[]]], FinalState)
					      in  %% Line 772
						  {_cor24,TopVar}
			      ( <_cor20> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor20})
				-| ['compiler_generated'] )
			    end
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor9})
		      -| ['compiler_generated'] )
		  end
	end
'handle_clauses_1'/7 =
    %% Line 774
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Clause|Tail],TopVar,Arg,DefinedVars,%% Line 775
						State,%% Line 775
						      SubtrTypes,%% Line 775
								 Acc> when 'true' ->
	      let <State0> =
		  %% Line 776
		  apply 'state__new_constraint_context'/1
		      (State)
	      in  let <Pats> =
		      %% Line 777
		      call 'cerl':'clause_pats'
			  (Clause)
		  in  let <Guard> =
			  %% Line 778
			  call 'cerl':'clause_guard'
			      (Clause)
		      in  let <Body> =
			      %% Line 779
			      call 'cerl':'clause_body'
				  (Clause)
			  in  let <_cor13> =
				  %% Line 781
				  case <> of
				    %% Line 782
				    <>
					when call 'erlang':'=:='
					      (SubtrTypes,
					       'overflow') ->
					'overflow'
				    %% Line 783
				    <> when 'true' ->
					let <_cor11> =
					    %% Line 784
					    apply 'get_safe_underapprox'/2
						(Pats, Guard)
					in  %% Line 784
					    call 'ordsets':'add_element'
						(_cor11, SubtrTypes)
				  end
			      in  %% Line 786
				  try
				      let <DefinedVars1> =
					  %% Line 787
					  apply 'add_def_from_tree_list'/2
					      (Pats, DefinedVars)
				      in  let <State1> =
					      %% Line 788
					      apply 'state__set_in_match'/2
						  (State0, 'true')
					  in  %% Line 789
					      case apply 'traverse_list'/3
						       (Pats, DefinedVars1, State1) of
						<{State2,PatVars}> when 'true' ->
						    let <_cor27> =
							%% Line 791
							case <> of
							  %% Line 792
							  <>
							      when call 'erlang':'=:='
								    (Arg,
								     []) ->
							      State2
							  %% Line 793
							  <> when 'true' ->
							      let <_cor18> =
								  %% Line 794
								  call 'erl_types':'t_product'
								      (PatVars)
							      in  let <S> =
								      %% Line 794
								      apply 'state__store_conj'/4
									  (Arg, 'eq', _cor18, State2)
								  in  %% Line 795
								      case <> of
									%% Line 796
									<>
									    when call 'erlang':'=:='
										  (SubtrTypes,
										   'overflow') ->
									    S
									%% Line 797
									<> when 'true' ->
									    let <_cor23> =
										%% Line 798
										( fun (_cor21) ->
										      let <TmpType> =
											  %% Line 799
											  apply 'lookup_type'/2
											      (Arg, _cor21)
										      in  %% Line 800
											  call 'erl_types':'t_subtract_list'
											      (TmpType, SubtrTypes)
										  -| [{'id',{0,0,'-handle_clauses_1/7-fun-0-'}}] )
									    in  let <SubtrPatVar> =
										    %% Line 798
										    apply 'mk_fun_var'/2
											(_cor23, %% Line 801
												 [Arg|[]])
										in  %% Line 802
										    apply 'state__store_conj'/4
											(Arg, 'sub', SubtrPatVar, S)
								      end
							end
						    in  let <State4> =
							    %% Line 805
							    apply 'handle_guard'/3
								(Guard, DefinedVars1, _cor27)
							in  let <_cor30> =
								%% Line 807
								apply 'state__set_in_match'/2
								    (State4, 'false')
							    in  %% Line 806
								case apply 'traverse'/3
									 (Body, DefinedVars1, _cor30) of
								  <{State5,BodyVar}> when 'true' ->
								      let <State6> =
									  %% Line 808
									  apply 'state__store_conj'/4
									      (TopVar, 'eq', BodyVar, State5)
								      in  let <Cs> =
									      %% Line 809
									      apply 'state__cs'/1
										  (State6)
									  in  %% Line 810
									      apply 'handle_clauses_1'/7
										  (Tail, TopVar, Arg, DefinedVars, State6, _cor13, %% Line 811
																   [Cs|Acc])
								  ( <_cor31> when 'true' ->
									primop 'match_fail'
									    ({'badmatch',_cor31})
								    -| ['compiler_generated'] )
								end
						( <_cor17> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor17})
						  -| ['compiler_generated'] )
					      end
				  of <_cor34> ->
				      _cor34
				  catch <_cor37,_cor36,_cor35> ->
				      case <_cor37,_cor36,_cor35> of
					%% Line 813
					<'throw','error',_cor46> when 'true' ->
					    %% Line 814
					    apply 'handle_clauses_1'/7
						(Tail, TopVar, Arg, DefinedVars, %% Line 815
										 State, _cor13, %% Line 815
												Acc)
					( <_cor37,_cor36,_cor35> when 'true' ->
					      primop 'raise'
						  (_cor35, _cor36)
					  -| ['compiler_generated'] )
				      end
	  %% Line 817
	  <[],_X_TopVar,_X_Arg,_X_DefinedVars,State,_X_SubtrType,Acc> when 'true' ->
	      let <_cor38> =
		  %% Line 818
		  apply 'state__new_constraint_context'/1
		      (State)
	      in  %% Line 818
		  {_cor38,Acc}
	  ( <_cor45,_cor44,_cor43,_cor42,_cor41,_cor40,_cor39> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor45,_cor44,_cor43,_cor42,_cor41,_cor40,_cor39})
		  -| [{'function_name',{'handle_clauses_1',7}}] )
	    -| ['compiler_generated'] )
	end
'get_safe_underapprox'/2 =
    %% Line 822
    fun (_cor1,_cor0) ->
	%% Line 823
	try
	    let <_cor11> =
		%% Line 824
		( fun (_cor8,_cor7) ->
		      %% Line 825
		      case call 'cerl':'is_c_var'
			       (_cor8) of
			%% Line 826
			<'true'> when 'true' ->
			    let <_cor5> =
				%% Line 827
				call 'cerl_trees':'get_label'
				    (_cor8)
			    in  let <_cor4> =
				    %% Line 827
				    call 'erl_types':'t_any'
					()
				in  %% Line 827
				    call 'dict':'store'
					(_cor5, _cor4, _cor7)
			%% Line 829
			<'false'> when 'true' ->
			    _cor7
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor6})
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-get_safe_underapprox/2-fun-0-'}}] )
	    in  let <_cor3> =
		    %% Line 831
		    call 'dict':'new'
			()
		in  let <_cor2> =
			%% Line 831
			call 'cerl':'c_values'
			    (_cor1)
		    in  let <Map1> =
			    %% Line 824
			    call 'cerl_trees':'fold'
				(_cor11, _cor3, _cor2)
			in  %% Line 832
			    case apply 'get_underapprox_from_guard'/2
				     (_cor0, Map1) of
			      <{Type,Map2}> when 'true' ->
				  let <_cor14> =
				      %% Line 833
				      call 'erl_types':'t_from_term'
					  ('true')
				  in  let <_cor15> =
					  %% Line 833
					  call 'erl_types':'t_inf'
					      (_cor14, Type)
				      in  let <_cor20> =
					      %% Line 833
					      case call 'erl_types':'t_is_none'
						       (_cor15) of
						%% Line 834
						<'true'> when 'true' ->
						    call 'erlang':'throw'
							('dont_know')
						%% Line 835
						<'false'> when 'true' ->
						    %% Line 836
						    case call 'cerl':'is_c_var'
							     (_cor0) of
						      %% Line 837
						      <'false'> when 'true' ->
							  Map2
						      %% Line 838
						      <'true'> when 'true' ->
							  let <_cor17> =
							      %% Line 839
							      call 'cerl_trees':'get_label'
								  (_cor0)
							  in  let <_cor16> =
								  %% Line 840
								  call 'erl_types':'t_from_term'
								      ('true')
							      in  %% Line 839
								  call 'dict':'store'
								      (_cor17, _cor16, %% Line 840
										       Map2)
						      ( <_cor18> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_cor18})
							-| ['compiler_generated'] )
						    end
						( <_cor19> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor19})
						  -| ['compiler_generated'] )
					      end
					  in  %% Line 843
					      case apply 'get_safe_underapprox_1'/3
						       (_cor1, [], _cor20) of
						<{Ts,_X_Map4}> when 'true' ->
						    %% Line 844
						    call 'erl_types':'t_product'
							(Ts)
						( <_cor22> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor22})
						  -| ['compiler_generated'] )
					      end
			      ( <_cor13> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor13})
				-| ['compiler_generated'] )
			    end
	of <_cor23> ->
	    _cor23
	catch <_cor26,_cor25,_cor24> ->
	    case <_cor26,_cor25,_cor24> of
	      %% Line 846
	      <'throw','dont_know',_cor29> when 'true' ->
		  call 'erl_types':'t_none'
		      ()
	      ( <_cor26,_cor25,_cor24> when 'true' ->
		    primop 'raise'
			(_cor24, _cor25)
		-| ['compiler_generated'] )
	    end
'get_underapprox_from_guard'/2 =
    %% Line 849
    fun (_cor1,_cor0) ->
	let <True> =
	    %% Line 850
	    call 'erl_types':'t_from_term'
		('true')
	in  %% Line 851
	    case call 'cerl':'type'
		     (_cor1) of
	      %% Line 852
	      <'call'> when 'true' ->
		  let <_cor7> =
		      %% Line 853
		      call 'cerl':'call_module'
			  (_cor1)
		  in  let <_cor8> =
			  %% Line 853
			  call 'cerl':'concrete'
			      (_cor7)
		      in  let <_cor5> =
			      %% Line 854
			      call 'cerl':'call_name'
				  (_cor1)
			  in  let <_cor6> =
				  %% Line 854
				  call 'cerl':'concrete'
				      (_cor5)
			      in  let <_cor3> =
				      %% Line 855
				      call 'cerl':'call_args'
					  (_cor1)
				  in  let <_cor4> =
					  %% Line 855
					  call 'erlang':'length'
					      (_cor3)
				      in  %% Line 853
					  case <_cor8,_cor6,_cor4> of
					    %% Line 856
					    <'erlang','is_function',2> when 'true' ->
						%% Line 857
						case call 'cerl':'call_args'
							 (_cor1) of
						  <[Fun|[Arity|[]]]> when 'true' ->
						      %% Line 858
						      case call 'cerl':'is_c_int'
							       (Arity) of
							%% Line 859
							<'false'> when 'true' ->
							    call 'erlang':'throw'
								('dont_know')
							%% Line 860
							<'true'> when 'true' ->
							    %% Line 861
							    case apply 'get_underapprox_from_guard'/2
								     (Fun, _cor0) of
							      <{FunType,Map1}> when 'true' ->
								  let <_cor12> =
								      %% Line 862
								      call 'cerl':'int_val'
									  (Arity)
								  in  let <_cor11> =
									  %% Line 862
									  call 'erl_types':'t_any'
									      ()
								      in  let <_cor13> =
									      %% Line 862
									      call 'erl_types':'t_fun'
										  (_cor12, _cor11)
									  in  let <Inf> =
										  %% Line 862
										  call 'erl_types':'t_inf'
										      (FunType, _cor13)
									      in  %% Line 863
										  case call 'erl_types':'t_is_none'
											   (Inf) of
										    %% Line 864
										    <'true'> when 'true' ->
											call 'erlang':'throw'
											    ('dont_know')
										    %% Line 865
										    <'false'> when 'true' ->
											let <_cor15> =
											    %% Line 866
											    call 'cerl_trees':'get_label'
												(Fun)
											in  let <_cor16> =
												%% Line 866
												call 'dict':'store'
												    (_cor15, Inf, Map1)
											    in  %% Line 866
												{True,_cor16}
										    ( <_cor17> when 'true' ->
											  primop 'match_fail'
											      ({'case_clause',_cor17})
										      -| ['compiler_generated'] )
										  end
							      ( <_cor10> when 'true' ->
								    primop 'match_fail'
									({'badmatch',_cor10})
								-| ['compiler_generated'] )
							    end
							( <_cor18> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_cor18})
							  -| ['compiler_generated'] )
						      end
						  ( <_cor9> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor9})
						    -| ['compiler_generated'] )
						end
					    %% Line 869
					    <_fol54,_fol55,_fol56> when 'true' ->
						%% Line 870
						let <MFA> = {_fol54,_fol55,_fol56}
						in  case apply 'get_type_test'/1
							     (MFA) of
						      %% Line 871
						      <{'ok',Type}> when 'true' ->
							  %% Line 872
							  case call 'cerl':'call_args'
								   (_cor1) of
							    <[Arg0|[]]> when 'true' ->
								let <Arg> =
								    %% Line 873
								    call 'cerl':'fold_literal'
									(Arg0)
								in  %% Line 874
								    case apply 'get_underapprox_from_guard'/2
									     (Arg, _cor0) of
								      <{ArgType,Map1}> when 'true' ->
									  let <Inf> =
									      %% Line 875
									      call 'erl_types':'t_inf'
										  (Type, ArgType)
									  in  %% Line 876
									      case call 'erl_types':'t_is_none'
										       (Inf) of
										%% Line 877
										<'true'> when 'true' ->
										    call 'erlang':'throw'
											('dont_know')
										%% Line 878
										<'false'> when 'true' ->
										    %% Line 879
										    case call 'cerl':'is_literal'
											     (Arg) of
										      %% Line 880
										      <'true'> when 'true' ->
											  {True,Map1}
										      %% Line 881
										      <'false'> when 'true' ->
											  let <_cor23> =
											      %% Line 882
											      call 'cerl_trees':'get_label'
												  (Arg)
											  in  let <_cor24> =
												  %% Line 882
												  call 'dict':'store'
												      (_cor23, Inf, Map1)
											      in  %% Line 882
												  {True,_cor24}
										      ( <_cor25> when 'true' ->
											    primop 'match_fail'
												({'case_clause',_cor25})
											-| ['compiler_generated'] )
										    end
										( <_cor26> when 'true' ->
										      primop 'match_fail'
											  ({'case_clause',_cor26})
										  -| ['compiler_generated'] )
									      end
								      ( <_cor21> when 'true' ->
									    primop 'match_fail'
										({'badmatch',_cor21})
									-| ['compiler_generated'] )
								    end
							    ( <_cor19> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_cor19})
							      -| ['compiler_generated'] )
							  end
						      %% Line 885
						      <'error'> when 'true' ->
							  %% Line 886
							  case MFA of
							    %% Line 887
							    <{'erlang','=:=',2}> when 'true' ->
								call 'erlang':'throw'
								    ('dont_know')
							    %% Line 888
							    <{'erlang','==',2}> when 'true' ->
								call 'erlang':'throw'
								    ('dont_know')
							    %% Line 889
							    <{'erlang','and',2}> when 'true' ->
								%% Line 890
								case call 'cerl':'call_args'
									 (_cor1) of
								  <[Arg1_0|[Arg2_0|[]]]> when 'true' ->
								      let <Arg1> =
									  %% Line 891
									  call 'cerl':'fold_literal'
									      (Arg1_0)
								      in  let <Arg2> =
									      %% Line 892
									      call 'cerl':'fold_literal'
										  (Arg2_0)
									  in  let <_cor33> =
										  %% Line 893
										  ( case call 'cerl':'is_c_var'
											     (Arg1) of
										      ( <( 'true'
											   -| ['compiler_generated'] )> when 'true' ->
											    'true'
											-| ['compiler_generated'] )
										      ( <( 'false'
											   -| ['compiler_generated'] )> when 'true' ->
											    call 'cerl':'is_literal'
												(Arg1)
											-| ['compiler_generated'] )
										      ( <_cor31> when 'true' ->
											    ( call ( 'erlang'
												     -| ['compiler_generated'] ):( 'error'
																   -| ['compiler_generated'] )
												  (( {( 'badarg'
													-| ['compiler_generated'] ),_cor31}
												     -| ['compiler_generated'] ))
											      -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										    end
										    -| ['compiler_generated'] )
									      in  let <_cor37> =
										      %% Line 894
										      ( case _cor33 of
											  ( <( 'true'
											       -| ['compiler_generated'] )> when 'true' ->
												%% Line 895
												( case call 'cerl':'is_c_var'
													   (Arg2) of
												    ( <( 'true'
													 -| ['compiler_generated'] )> when 'true' ->
													  'true'
												      -| ['compiler_generated'] )
												    ( <( 'false'
													 -| ['compiler_generated'] )> when 'true' ->
													  call 'cerl':'is_literal'
													      (Arg2)
												      -| ['compiler_generated'] )
												    ( <_cor34> when 'true' ->
													  ( call ( 'erlang'
														   -| ['compiler_generated'] ):( 'error'
																		 -| ['compiler_generated'] )
														(( {( 'badarg'
														      -| ['compiler_generated'] ),_cor34}
														   -| ['compiler_generated'] ))
													    -| ['compiler_generated'] )
												      -| ['compiler_generated'] )
												  end
												  -| ['compiler_generated'] )
											    -| ['compiler_generated'] )
											  ( <( 'false'
											       -| ['compiler_generated'] )> when 'true' ->
												'false'
											    -| ['compiler_generated'] )
											  ( <_cor30> when 'true' ->
												( call ( 'erlang'
													 -| ['compiler_generated'] ):( 'error'
																       -| ['compiler_generated'] )
												      (( {( 'badarg'
													    -| ['compiler_generated'] ),_cor30}
													 -| ['compiler_generated'] ))
												  -| ['compiler_generated'] )
											    -| ['compiler_generated'] )
											end
											-| ['compiler_generated'] )
										  in  %% Line 893
										      case _cor37 of
											%% Line 896
											<'true'> when 'true' ->
											    %% Line 897
											    case apply 'get_underapprox_from_guard'/2
												     (Arg1, _cor0) of
											      <{Arg1Type,_cor59}> when 'true' ->
												  %% Line 898
												  case apply 'get_underapprox_from_guard'/2
													   (Arg2, _cor0) of
												    <{Arg2Type,_cor60}> when 'true' ->
													let <_cor42> =
													    %% Line 899
													    ( case call 'erl_types':'t_is_equal'
														       (True, Arg1Type) of
														( <( 'true'
														     -| ['compiler_generated'] )> when 'true' ->
														      %% Line 900
														      call 'erl_types':'t_is_equal'
															  (True, Arg2Type)
														  -| ['compiler_generated'] )
														( <( 'false'
														     -| ['compiler_generated'] )> when 'true' ->
														      'false'
														  -| ['compiler_generated'] )
														( <_cor40> when 'true' ->
														      ( call ( 'erlang'
															       -| ['compiler_generated'] ):( 'error'
																			     -| ['compiler_generated'] )
															    (( {( 'badarg'
																  -| ['compiler_generated'] ),_cor40}
															       -| ['compiler_generated'] ))
															-| ['compiler_generated'] )
														  -| ['compiler_generated'] )
													      end
													      -| ['compiler_generated'] )
													in  %% Line 899
													    case _cor42 of
													      %% Line 901
													      <'true'> when 'true' ->
														  {True,_cor0}
													      %% Line 902
													      <'false'> when 'true' ->
														  call 'erlang':'throw'
														      ('dont_know')
													      ( <_cor43> when 'true' ->
														    primop 'match_fail'
															({'case_clause',_cor43})
														-| ['compiler_generated'] )
													    end
												    ( <_cor39> when 'true' ->
													  primop 'match_fail'
													      ({'badmatch',_cor39})
												      -| ['compiler_generated'] )
												  end
											      ( <_cor38> when 'true' ->
												    primop 'match_fail'
													({'badmatch',_cor38})
												-| ['compiler_generated'] )
											    end
											%% Line 904
											<'false'> when 'true' ->
											    %% Line 905
											    call 'erlang':'throw'
												('dont_know')
											( <_cor44> when 'true' ->
											      primop 'match_fail'
												  ({'case_clause',_cor44})
											  -| ['compiler_generated'] )
										      end
								  ( <_cor27> when 'true' ->
									primop 'match_fail'
									    ({'badmatch',_cor27})
								    -| ['compiler_generated'] )
								end
							    %% Line 907
							    <{'erlang','or',2}> when 'true' ->
								call 'erlang':'throw'
								    ('dont_know')
							    %% Line 908
							    <_cor61> when 'true' ->
								call 'erlang':'throw'
								    ('dont_know')
							  end
						      ( <_cor46> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_cor46})
							-| ['compiler_generated'] )
						    end
					  end
	      %% Line 912
	      <'var'> when 'true' ->
		  let <_cor48> =
		      %% Line 914
		      call 'cerl_trees':'get_label'
			  (_cor1)
		  in  let <_cor50> =
			  %% Line 914
			  case call 'dict':'find'
				   (_cor48, _cor0) of
			    %% Line 915
			    <'error'> when 'true' ->
				call 'erlang':'throw'
				    ('dont_know')
			    %% Line 916
			    <{'ok',T}> when 'true' ->
				T
			    ( <_cor49> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor49})
			      -| ['compiler_generated'] )
			  end
		      in  %% Line 918
			  {_cor50,_cor0}
	      %% Line 919
	      <'literal'> when 'true' ->
		  %% Line 920
		  case call 'cerl':'unfold_literal'
			   (_cor1) of
		    %% Line 921
		    <_cor62>
			when call 'erlang':'=:='
			      (_cor62,
			       _cor1) ->
			let <_cor53> =
			    %% Line 923
			    case call 'cerl':'concrete'
				     (_cor1) of
			      %% Line 924
			      <Int>
				  when call 'erlang':'is_integer'
					(Int) ->
				  call 'erl_types':'t_from_term'
				      (Int)
			      %% Line 925
			      <Atom>
				  when call 'erlang':'is_atom'
					(Atom) ->
				  call 'erl_types':'t_from_term'
				      (Atom)
			      %% Line 926
			      <_X_Other> when 'true' ->
				  call 'erlang':'throw'
				      ('dont_know')
			    end
			in  %% Line 928
			    {_cor53,_cor0}
		    %% Line 929
		    <OtherTree> when 'true' ->
			%% Line 930
			apply 'get_underapprox_from_guard'/2
			    (OtherTree, _cor0)
		  end
	      %% Line 932
	      <_cor63> when 'true' ->
		  %% Line 933
		  call 'erlang':'throw'
		      ('dont_know')
	    end
'get_type_test'/1 =
    %% Line 940
    fun (_cor0) ->
	case _cor0 of
	  <{'erlang','is_atom',1}> when 'true' ->
	      let <_cor1> =
		  call 'erl_types':'t_atom'
		      ()
	      in  {'ok',_cor1}
	  %% Line 941
	  <{'erlang','is_boolean',1}> when 'true' ->
	      let <_cor2> =
		  call 'erl_types':'t_boolean'
		      ()
	      in  {'ok',_cor2}
	  %% Line 942
	  <{'erlang','is_binary',1}> when 'true' ->
	      let <_cor3> =
		  call 'erl_types':'t_binary'
		      ()
	      in  {'ok',_cor3}
	  %% Line 943
	  <{'erlang','is_bitstring',1}> when 'true' ->
	      let <_cor4> =
		  call 'erl_types':'t_bitstr'
		      ()
	      in  {'ok',_cor4}
	  %% Line 944
	  <{'erlang','is_float',1}> when 'true' ->
	      let <_cor5> =
		  call 'erl_types':'t_float'
		      ()
	      in  {'ok',_cor5}
	  %% Line 945
	  <{'erlang','is_function',1}> when 'true' ->
	      let <_cor6> =
		  call 'erl_types':'t_fun'
		      ()
	      in  {'ok',_cor6}
	  %% Line 946
	  <{'erlang','is_integer',1}> when 'true' ->
	      let <_cor7> =
		  call 'erl_types':'t_integer'
		      ()
	      in  {'ok',_cor7}
	  %% Line 947
	  <{'erlang','is_list',1}> when 'true' ->
	      let <_cor8> =
		  call 'erl_types':'t_list'
		      ()
	      in  {'ok',_cor8}
	  %% Line 948
	  <{'erlang','is_number',1}> when 'true' ->
	      let <_cor9> =
		  call 'erl_types':'t_number'
		      ()
	      in  {'ok',_cor9}
	  %% Line 949
	  <{'erlang','is_pid',1}> when 'true' ->
	      let <_cor10> =
		  call 'erl_types':'t_pid'
		      ()
	      in  {'ok',_cor10}
	  %% Line 950
	  <{'erlang','is_port',1}> when 'true' ->
	      let <_cor11> =
		  call 'erl_types':'t_port'
		      ()
	      in  {'ok',_cor11}
	  %% Line 953
	  <{'erlang','is_reference',1}> when 'true' ->
	      let <_cor12> =
		  call 'erl_types':'t_reference'
		      ()
	      in  {'ok',_cor12}
	  %% Line 954
	  <{'erlang','is_tuple',1}> when 'true' ->
	      let <_cor13> =
		  call 'erl_types':'t_tuple'
		      ()
	      in  {'ok',_cor13}
	  %% Line 955
	  <{M,F,A}>
	      when try
		    let <_cor14> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor15> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor16> =
				call 'erlang':'is_integer'
				    (A)
			    in  let <_cor17> =
				    call 'erlang':'and'
					(_cor15, _cor16)
				in  call 'erlang':'and'
					(_cor14, _cor17)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      'error'
	  ( <_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18})
		  -| [{'function_name',{'get_type_test',1}}] )
	    -| ['compiler_generated'] )
	end
'bitstr_constr'/2 =
    %% Line 957
    fun (_cor1,_cor0) ->
	%% Line 958
	apply 'bitstr_constr'/3
	    (_cor1, _cor0, 'construct')
'bitstr_constr'/3 =
    %% Line 960
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 962
	    case _cor0 of
	      %% Line 963
	      <'construct'> when 'true' ->
		  0
	      %% Line 964
	      <'match'> when 'true' ->
		  1
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor3})
		-| ['compiler_generated'] )
	    end
	in  %% Line 966
	    ( fun (_cor13) ->
		  let <TmpSizeType> =
		      %% Line 967
		      apply 'lookup_type'/2
			  (_cor2, _cor13)
		  in  let <_cor7> =
			  %% Line 968
			  call 'erl_types':'t_non_neg_integer'
			      ()
		      in  %% Line 968
			  case call 'erl_types':'t_is_subtype'
				   (TmpSizeType, _cor7) of
			    %% Line 969
			    <'true'> when 'true' ->
				%% Line 970
				case call 'erl_types':'t_number_vals'
					 (TmpSizeType) of
				  %% Line 971
				  <[OneSize|[]]> when 'true' ->
				      let <_cor8> =
					  call 'erlang':'*'
					      (OneSize, _cor1)
				      in  call 'erl_types':'t_bitstr'
					      (_cor4, _cor8)
				  %% Line 972
				  <_cor18> when 'true' ->
				      let <MinSize> =
					  %% Line 973
					  call 'erl_types':'number_min'
					      (TmpSizeType)
				      in  let <_cor10> =
					      %% Line 974
					      call 'erlang':'*'
						  (MinSize, _cor1)
					  in  %% Line 974
					      call 'erl_types':'t_bitstr'
						  (_cor1, _cor10)
				end
			    %% Line 976
			    <'false'> when 'true' ->
				%% Line 977
				call 'erl_types':'t_bitstr'
				    (_cor1, 0)
			    ( <_cor12> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor12})
			      -| ['compiler_generated'] )
			  end
	      -| [{'id',{0,0,'-bitstr_constr/3-fun-0-'}}] )
'bitstr_val_constr'/3 =
    %% Line 981
    fun (_cor2,_cor1,_cor0) ->
	%% Line 982
	( fun (_cor21) ->
	      let <TmpSizeType> =
		  %% Line 983
		  apply 'lookup_type'/2
		      (_cor2, _cor21)
	      in  let <_cor4> =
		      %% Line 984
		      call 'erl_types':'t_non_neg_integer'
			  ()
		  in  %% Line 984
		      case call 'erl_types':'t_is_subtype'
			       (TmpSizeType, _cor4) of
			%% Line 985
			<'true'> when 'true' ->
			    %% Line 986
			    case call 'erl_types':'number_max'
				     (TmpSizeType) of
			      %% Line 987
			      <N>
				  when let <_cor5> =
					call 'erlang':'is_integer'
					    (N)
				    in  let <_cor6> =
					    call 'erlang':'<'
						(N, 128)
					in  call 'erlang':'and'
						(_cor5, _cor6) ->
				  let <TotalSizeVal> =
				      %% Line 988
				      call 'erlang':'*'
					  (N, _cor1)
				  in  let <RangeMin,RangeMax> =
					  %% Line 990
					  case call 'lists':'member'
						   ('signed', _cor0) of
					    %% Line 991
					    <'true'> when 'true' ->
						let <_cor11> =
						    call 'erlang':'-'
							(TotalSizeVal, 1)
						in  let <_cor12> =
							call 'erlang':'bsl'
							    (1, _cor11)
						    in  let <_cor13> =
							    call 'erlang':'-'
								(_cor12)
							in  let <_cor8> =
								%% Line 992
								call 'erlang':'-'
								    (TotalSizeVal, 1)
							    in  let <_cor9> =
								    %% Line 992
								    call 'erlang':'bsl'
									(1, _cor8)
								in  let <_cor10> =
									%% Line 992
									call 'erlang':'-'
									    (_cor9, 1)
								    in  <_cor13,_cor10>
					    %% Line 993
					    <'false'> when 'true' ->
						let <_cor14> =
						    call 'erlang':'bsl'
							(1, TotalSizeVal)
						in  let <_cor15> =
							call 'erlang':'-'
							    (_cor14, 1)
						    in  <0,_cor15>
					    ( <_cor16> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor16})
					      -| ['compiler_generated'] )
					  end
				      in  %% Line 995
					  call 'erl_types':'t_from_range'
					      (RangeMin, RangeMax)
			      %% Line 996
			      <_cor26> when 'true' ->
				  %% Line 997
				  call 'erl_types':'t_integer'
				      ()
			    end
			%% Line 999
			<'false'> when 'true' ->
			    %% Line 1000
			    call 'erl_types':'t_integer'
				()
			( <_cor20> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor20})
			  -| ['compiler_generated'] )
		      end
	  -| [{'id',{0,0,'-bitstr_val_constr/3-fun-0-'}}] )
'get_safe_underapprox_1'/3 =
    %% Line 1004
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Pat|Left],Acc,Map> when 'true' ->
	      %% Line 1005
	      case call 'cerl':'type'
		       (Pat) of
		%% Line 1006
		<'alias'> when 'true' ->
		    let <APat> =
			%% Line 1007
			call 'cerl':'alias_pat'
			    (Pat)
		    in  let <AVar> =
			    %% Line 1008
			    call 'cerl':'alias_var'
				(Pat)
			in  %% Line 1009
			    case apply 'get_safe_underapprox_1'/3
				     ([AVar|[]], [], Map) of
			      <{[VarType|[]],Map1}> when 'true' ->
				  %% Line 1010
				  case apply 'get_safe_underapprox_1'/3
					   ([APat|[]], [], Map1) of
				    <{[PatType|[]],Map2}> when 'true' ->
					let <Inf> =
					    %% Line 1011
					    call 'erl_types':'t_inf'
						(VarType, PatType)
					in  %% Line 1012
					    case call 'erl_types':'t_is_none'
						     (Inf) of
					      %% Line 1013
					      <'true'> when 'true' ->
						  call 'erlang':'throw'
						      ('dont_know')
					      %% Line 1014
					      <'false'> when 'true' ->
						  let <_cor8> =
						      %% Line 1015
						      call 'cerl_trees':'get_label'
							  (AVar)
						  in  let <Map3> =
							  %% Line 1015
							  call 'dict':'store'
							      (_cor8, Inf, Map2)
						      in  %% Line 1016
							  apply 'get_safe_underapprox_1'/3
							      (Left, [Inf|Acc], Map3)
					      ( <_cor10> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor10})
						-| ['compiler_generated'] )
					    end
				    ( <_cor6> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor6})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor5> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor5})
				-| ['compiler_generated'] )
			    end
		%% Line 1018
		<'binary'> when 'true' ->
		    %% Line 1020
		    call 'erlang':'throw'
			('dont_know')
		%% Line 1021
		<'cons'> when 'true' ->
		    let <_cor11> =
			%% Line 1023
			call 'cerl':'cons_hd'
			    (Pat)
		    in  let <_cor12> =
			    %% Line 1023
			    call 'cerl':'cons_tl'
				(Pat)
			in  %% Line 1022
			    case %% Line 1023
				 apply 'get_safe_underapprox_1'/3
				     ([_cor11|[_cor12|[]]], [], Map) of
			      <{[Hd|[Tl|[]]],Map1}> when 'true' ->
				  %% Line 1024
				  case call 'erl_types':'t_is_any'
					   (Tl) of
				    %% Line 1025
				    <'true'> when 'true' ->
					let <_cor14> =
					    call 'erl_types':'t_nonempty_list'
						(Hd)
					in  apply 'get_safe_underapprox_1'/3
						(Left, [_cor14|Acc], Map1)
				    %% Line 1026
				    <'false'> when 'true' ->
					call 'erlang':'throw'
					    ('dont_know')
				    ( <_cor15> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor15})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor13> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor13})
				-| ['compiler_generated'] )
			    end
		%% Line 1028
		<'literal'> when 'true' ->
		    %% Line 1029
		    case call 'cerl':'unfold_literal'
			     (Pat) of
		      %% Line 1030
		      <_cor33>
			  when call 'erlang':'=:='
				(_cor33,
				 Pat) ->
			  let <_cor17> =
			      %% Line 1032
			      case call 'cerl':'concrete'
				       (Pat) of
				%% Line 1033
				<Int>
				    when call 'erlang':'is_integer'
					  (Int) ->
				    call 'erl_types':'t_from_term'
					(Int)
				%% Line 1034
				<Atom>
				    when call 'erlang':'is_atom'
					  (Atom) ->
				    call 'erl_types':'t_from_term'
					(Atom)
				%% Line 1035
				<[]> when 'true' ->
				    call 'erl_types':'t_from_term'
					([])
				%% Line 1036
				<_X_Other> when 'true' ->
				    call 'erlang':'throw'
					('dont_know')
			      end
			  in  %% Line 1038
			      apply 'get_safe_underapprox_1'/3
				  (Left, [_cor17|Acc], Map)
		      %% Line 1039
		      <OtherPat> when 'true' ->
			  %% Line 1040
			  apply 'get_safe_underapprox_1'/3
			      ([OtherPat|Left], Acc, Map)
		    end
		%% Line 1042
		<'tuple'> when 'true' ->
		    let <Es> =
			%% Line 1043
			call 'cerl':'tuple_es'
			    (Pat)
		    in  %% Line 1044
			case apply 'get_safe_underapprox_1'/3
				 (Es, [], Map) of
			  <{Ts,Map1}> when 'true' ->
			      let <Type> =
				  %% Line 1045
				  call 'erl_types':'t_tuple'
				      (Ts)
			      in  %% Line 1046
				  apply 'get_safe_underapprox_1'/3
				      (Left, [Type|Acc], Map1)
			  ( <_cor21> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor21})
			    -| ['compiler_generated'] )
			end
		%% Line 1047
		<'map'> when 'true' ->
		    %% Line 1049
		    call 'erlang':'throw'
			('dont_know')
		%% Line 1050
		<'values'> when 'true' ->
		    let <Es> =
			%% Line 1051
			call 'cerl':'values_es'
			    (Pat)
		    in  %% Line 1052
			case apply 'get_safe_underapprox_1'/3
				 (Es, [], Map) of
			  <{Ts,Map1}> when 'true' ->
			      let <Type> =
				  %% Line 1053
				  call 'erl_types':'t_product'
				      (Ts)
			      in  %% Line 1054
				  apply 'get_safe_underapprox_1'/3
				      (Left, [Type|Acc], Map1)
			  ( <_cor24> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor24})
			    -| ['compiler_generated'] )
			end
		%% Line 1055
		<'var'> when 'true' ->
		    let <_cor26> =
			%% Line 1056
			call 'cerl_trees':'get_label'
			    (Pat)
		    in  %% Line 1056
			case call 'dict':'find'
				 (_cor26, Map) of
			  %% Line 1057
			  <'error'> when 'true' ->
			      call 'erlang':'throw'
				  ('dont_know')
			  %% Line 1058
			  <{'ok',VarType}> when 'true' ->
			      apply 'get_safe_underapprox_1'/3
				  (Left, [VarType|Acc], Map)
			  ( <_cor27> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor27})
			    -| ['compiler_generated'] )
			end
		( <_cor28> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor28})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1061
	  <[],Acc,Map> when 'true' ->
	      let <_cor29> =
		  %% Line 1062
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 1062
		  {_cor29,Map}
	  ( <_cor32,_cor31,_cor30> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor32,_cor31,_cor30})
		  -| [{'function_name',{'get_safe_underapprox_1',3}}] )
	    -| ['compiler_generated'] )
	end
'handle_guard'/3 =
    %% Line 1068
    fun (_cor2,_cor1,_cor0) ->
	let <True> =
	    %% Line 1069
	    call 'erl_types':'t_from_term'
		('true')
	in  let <State1> =
		%% Line 1070
		apply 'state__set_in_guard'/2
		    (_cor0, 'true')
	    in  let <State2> =
		    %% Line 1071
		    apply 'state__new_constraint_context'/1
			(State1)
		in  %% Line 1072
		    case apply 'traverse'/3
			     (_cor2, _cor1, State2) of
		      <{State3,Return}> when 'true' ->
			  let <State4> =
			      %% Line 1073
			      apply 'state__store_conj'/4
				  (Return, 'eq', True, State3)
			  in  let <Cs> =
				  %% Line 1074
				  apply 'state__cs'/1
				      (State4)
			      in  let <NewCs> =
				      %% Line 1075
				      apply 'mk_disj_norm_form'/1
					  (Cs)
				  in  let <OldCs> =
					  %% Line 1076
					  apply 'state__cs'/1
					      (_cor0)
				      in  let <_cor11> =
					      %% Line 1077
					      apply 'state__is_in_guard'/1
						  (_cor0)
					  in  let <State5> =
						  %% Line 1077
						  apply 'state__set_in_guard'/2
						      (State4, _cor11)
					      in  let <State6> =
						      %% Line 1078
						      apply 'state__new_constraint_context'/1
							  (State5)
						  in  let <_cor14> =
							  %% Line 1079
							  apply 'mk_conj_constraint_list'/1
							      ([OldCs|[NewCs|[]]])
						      in  %% Line 1079
							  apply 'state__store_conj'/2
							      (_cor14, State6)
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
'get_bif_constr'/4 =
    %% Line 1087
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'erlang',Op,2},Dst,Args = [Arg1|[Arg2|[]]],_X_State>
	      when let <_cor4> =
		    %% Line 1088
		    call 'erlang':'=:='
			(Op, '+')
		in  let <_cor5> =
			%% Line 1088
			call 'erlang':'=:='
			    (Op, '-')
		    in  let <_cor6> =
			    %% Line 1088
			    call 'erlang':'=:='
				(Op, '*')
			in  let <_cor7> =
				%% Line 1088
				call 'erlang':'or'
				    (_cor5, _cor6)
			    in  %% Line 1088
				call 'erlang':'or'
				    (_cor4, _cor7) ->
	      let <_cor11> =
		  %% Line 1089
		  ( fun (_cor9) ->
			let <TmpArgTypes> =
			    %% Line 1090
			    apply 'lookup_type_list'/2
				(Args, _cor9)
			in  %% Line 1091
			    apply 'bif_return'/4
				('erlang', Op, 2, TmpArgTypes)
		    -| [{'id',{0,0,'-get_bif_constr/4-fun-0-'}}] )
	      in  let <ReturnType> =
		      %% Line 1089
		      apply 'mk_fun_var'/2
			  (_cor11, %% Line 1092
				   Args)
		  in  let <ArgFun> =
			  %% Line 1094
			  ( fun (_cor23,_cor22) ->
				let <F> =
				    %% Line 1096
				    ( fun (_cor19) ->
					  let <DstType> =
					      %% Line 1097
					      apply 'lookup_type'/2
						  (Dst, _cor19)
					  in  let <AType> =
						  %% Line 1098
						  apply 'lookup_type'/2
						      (_cor23, _cor19)
					      in  %% Line 1099
						  case call 'erl_types':'t_is_integer'
							   (DstType) of
						    %% Line 1100
						    <'true'> when 'true' ->
							%% Line 1101
							case call 'erl_types':'t_is_integer'
								 (AType) of
							  %% Line 1102
							  <'true'> when 'true' ->
							      %% Line 1103
							      apply 'eval_inv_arith'/4
								  (Op, _cor22, DstType, AType)
							  %% Line 1104
							  <'false'> when 'true' ->
							      %% Line 1106
							      call 'erl_types':'t_integer'
								  ()
							  ( <_cor15> when 'true' ->
								primop 'match_fail'
								    ({'case_clause',_cor15})
							    -| ['compiler_generated'] )
							end
						    %% Line 1108
						    <'false'> when 'true' ->
							%% Line 1109
							case call 'erl_types':'t_is_float'
								 (DstType) of
							  %% Line 1110
							  <'true'> when 'true' ->
							      %% Line 1111
							      case call 'erl_types':'t_is_integer'
								       (AType) of
								%% Line 1112
								<'true'> when 'true' ->
								    call 'erl_types':'t_float'
									()
								%% Line 1113
								<'false'> when 'true' ->
								    call 'erl_types':'t_number'
									()
								( <_cor16> when 'true' ->
								      primop 'match_fail'
									  ({'case_clause',_cor16})
								  -| ['compiler_generated'] )
							      end
							  %% Line 1115
							  <'false'> when 'true' ->
							      %% Line 1116
							      call 'erl_types':'t_number'
								  ()
							  ( <_cor17> when 'true' ->
								primop 'match_fail'
								    ({'case_clause',_cor17})
							    -| ['compiler_generated'] )
							end
						    ( <_cor18> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor18})
						      -| ['compiler_generated'] )
						  end
				      -| [{'id',{0,0,'-get_bif_constr/4-fun-1-'}}] )
				in  %% Line 1120
				    apply 'mk_fun_var'/2
					(F, [Dst|[_cor23|[]]])
			    -| [{'id',{0,0,'-get_bif_constr/4-fun-2-'}}] )
		      in  let <Arg1FunVar> =
			      %% Line 1122
			      apply ArgFun
				  (Arg2, 2)
			  in  let <Arg2FunVar> =
				  %% Line 1123
				  apply ArgFun
				      (Arg1, 1)
			      in  let <_cor29> =
				      %% Line 1124
				      apply 'mk_constraint'/3
					  (Dst, 'sub', ReturnType)
				  in  let <_cor30> =
					  %% Line 1125
					  apply 'mk_constraint'/3
					      (Arg1, 'sub', Arg1FunVar)
				      in  let <_cor31> =
					      %% Line 1126
					      apply 'mk_constraint'/3
						  (Arg2, 'sub', Arg2FunVar)
					  in  %% Line 1124
					      apply 'mk_conj_constraint_list'/1
						  ([_cor29|%% Line 1125
							   [_cor30|%% Line 1126
								   [_cor31|[]]]])
	  %% Line 1127
	  <{'erlang',Op,2},Dst,Args = [Arg1|[Arg2|[]]],_X_State>
	      when let <_cor32> =
		    %% Line 1128
		    call 'erlang':'=:='
			(Op, '<')
		in  let <_cor33> =
			%% Line 1128
			call 'erlang':'=:='
			    (Op, '=<')
		    in  let <_cor34> =
			    %% Line 1128
			    call 'erlang':'=:='
				(Op, '>')
			in  let <_cor35> =
				%% Line 1128
				call 'erlang':'=:='
				    (Op, '>=')
			    in  let <_cor36> =
				    %% Line 1128
				    call 'erlang':'or'
					(_cor34, _cor35)
				in  let <_cor37> =
					%% Line 1128
					call 'erlang':'or'
					    (_cor33, _cor36)
				    in  %% Line 1128
					call 'erlang':'or'
					    (_cor32, _cor37) ->
	      let <ArgFun> =
		  %% Line 1130
		  ( fun (_cor64,_cor63,_cor62) ->
			%% Line 1131
			( fun (_cor60) ->
			      let <DstType> =
				  %% Line 1132
				  apply 'lookup_type'/2
				      (Dst, _cor60)
			      in  let <IsTrue> =
				      %% Line 1133
				      call 'erl_types':'t_is_any_atom'
					  ('true', DstType)
				  in  let <IsFalse> =
					  %% Line 1134
					  call 'erl_types':'t_is_any_atom'
					      ('false', DstType)
				      in  let <_cor43> =
					      %% Line 1135
					      ( case IsTrue of
						  ( <( 'true'
						       -| ['compiler_generated'] )> when 'true' ->
							'true'
						    -| ['compiler_generated'] )
						  ( <( 'false'
						       -| ['compiler_generated'] )> when 'true' ->
							IsFalse
						    -| ['compiler_generated'] )
						  ( <_cor41> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {( 'badarg'
								    -| ['compiler_generated'] ),_cor41}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					  in  %% Line 1135
					      case _cor43 of
						%% Line 1136
						<'true'> when 'true' ->
						    let <Arg1Type> =
							%% Line 1137
							apply 'lookup_type'/2
							    (_cor64, _cor60)
						    in  let <Arg2Type> =
							    %% Line 1138
							    apply 'lookup_type'/2
								(_cor63, _cor60)
							in  let <_cor48> =
								%% Line 1139
								( case call 'erl_types':'t_is_integer'
									   (Arg1Type) of
								    ( <( 'true'
									 -| ['compiler_generated'] )> when 'true' ->
									  call 'erl_types':'t_is_integer'
									      (Arg2Type)
								      -| ['compiler_generated'] )
								    ( <( 'false'
									 -| ['compiler_generated'] )> when 'true' ->
									  'false'
								      -| ['compiler_generated'] )
								    ( <_cor46> when 'true' ->
									  ( call ( 'erlang'
										   -| ['compiler_generated'] ):( 'error'
														 -| ['compiler_generated'] )
										(( {( 'badarg'
										      -| ['compiler_generated'] ),_cor46}
										   -| ['compiler_generated'] ))
									    -| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								  end
								  -| ['compiler_generated'] )
							    in  %% Line 1139
								case _cor48 of
								  %% Line 1140
								  <'true'> when 'true' ->
								      let <Max1> =
									  %% Line 1141
									  call 'erl_types':'number_max'
									      (Arg1Type)
								      in  let <Min1> =
									      %% Line 1142
									      call 'erl_types':'number_min'
										  (Arg1Type)
									  in  let <Max2> =
										  %% Line 1143
										  call 'erl_types':'number_max'
										      (Arg2Type)
									      in  let <Min2> =
										      %% Line 1144
										      call 'erl_types':'number_min'
											  (Arg2Type)
										  in  %% Line 1145
										      case _cor62 of
											%% Line 1146
											<'=<'> when 'true' ->
											    %% Line 1147
											    case <> of
											      <>
												  when call 'erlang':'=:='
													(IsTrue,
													 'true') ->
												  call 'erl_types':'t_from_range'
												      (Min1, Max2)
											      %% Line 1148
											      <>
												  when call 'erlang':'=:='
													(IsFalse,
													 'true') ->
												  let <_cor53> =
												      apply 'range_inc'/1
													  (Min2)
												  in  call 'erl_types':'t_from_range'
													  (_cor53, Max1)
											      ( <> when 'true' ->
												    primop 'match_fail'
													('if_clause')
												-| ['compiler_generated'] )
											    end
											%% Line 1150
											<'<'> when 'true' ->
											    %% Line 1151
											    case <> of
											      <>
												  when call 'erlang':'=:='
													(IsTrue,
													 'true') ->
												  let <_cor54> =
												      apply 'range_dec'/1
													  (Max2)
												  in  call 'erl_types':'t_from_range'
													  (Min1, _cor54)
											      %% Line 1152
											      <>
												  when call 'erlang':'=:='
													(IsFalse,
													 'true') ->
												  call 'erl_types':'t_from_range'
												      (Min2, Max1)
											      ( <> when 'true' ->
												    primop 'match_fail'
													('if_clause')
												-| ['compiler_generated'] )
											    end
											%% Line 1154
											<'>='> when 'true' ->
											    %% Line 1155
											    case <> of
											      <>
												  when call 'erlang':'=:='
													(IsTrue,
													 'true') ->
												  call 'erl_types':'t_from_range'
												      (Min2, Max1)
											      %% Line 1156
											      <>
												  when call 'erlang':'=:='
													(IsFalse,
													 'true') ->
												  let <_cor55> =
												      apply 'range_dec'/1
													  (Max2)
												  in  call 'erl_types':'t_from_range'
													  (Min1, _cor55)
											      ( <> when 'true' ->
												    primop 'match_fail'
													('if_clause')
												-| ['compiler_generated'] )
											    end
											%% Line 1158
											<'>'> when 'true' ->
											    %% Line 1159
											    case <> of
											      <>
												  when call 'erlang':'=:='
													(IsTrue,
													 'true') ->
												  let <_cor56> =
												      apply 'range_inc'/1
													  (Min2)
												  in  call 'erl_types':'t_from_range'
													  (_cor56, Max1)
											      %% Line 1160
											      <>
												  when call 'erlang':'=:='
													(IsFalse,
													 'true') ->
												  call 'erl_types':'t_from_range'
												      (Min1, Max2)
											      ( <> when 'true' ->
												    primop 'match_fail'
													('if_clause')
												-| ['compiler_generated'] )
											    end
											( <_cor57> when 'true' ->
											      primop 'match_fail'
												  ({'case_clause',_cor57})
											  -| ['compiler_generated'] )
										      end
								  %% Line 1163
								  <'false'> when 'true' ->
								      call 'erl_types':'t_any'
									  ()
								  ( <_cor58> when 'true' ->
									primop 'match_fail'
									    ({'case_clause',_cor58})
								    -| ['compiler_generated'] )
								end
						%% Line 1165
						<'false'> when 'true' ->
						    call 'erl_types':'t_any'
							()
						( <_cor59> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor59})
						  -| ['compiler_generated'] )
					      end
			  -| [{'id',{0,0,'-get_bif_constr/4-fun-3-'}}] )
		    -| [{'id',{0,0,'-get_bif_constr/4-fun-4-'}}] )
	      in  let <Arg1Fun,Arg2Fun> =
		      %% Line 1170
		      case Op of
			%% Line 1171
			<'<'> when 'true' ->
			    let <_cor70> =
				apply ArgFun
				    (Arg1, Arg2, '<')
			    in  let <_cor69> =
				    apply ArgFun
					(Arg2, Arg1, '>=')
				in  <_cor70,_cor69>
			%% Line 1172
			<'=<'> when 'true' ->
			    let <_cor72> =
				apply ArgFun
				    (Arg1, Arg2, '=<')
			    in  let <_cor71> =
				    apply ArgFun
					(Arg2, Arg1, '>=')
				in  <_cor72,_cor71>
			%% Line 1173
			<'>'> when 'true' ->
			    let <_cor74> =
				apply ArgFun
				    (Arg1, Arg2, '>')
			    in  let <_cor73> =
				    apply ArgFun
					(Arg2, Arg1, '<')
				in  <_cor74,_cor73>
			%% Line 1174
			<'>='> when 'true' ->
			    let <_cor76> =
				apply ArgFun
				    (Arg1, Arg2, '>=')
			    in  let <_cor75> =
				    apply ArgFun
					(Arg2, Arg1, '=<')
				in  <_cor76,_cor75>
			( <_cor77> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor77})
			  -| ['compiler_generated'] )
		      end
		  in  let <DstArgs> =
			  %% Line 1176
			  [Dst|[Arg1|[Arg2|[]]]]
		      in  let <Arg1Var> =
			      %% Line 1177
			      apply 'mk_fun_var'/2
				  (Arg1Fun, DstArgs)
			  in  let <Arg2Var> =
				  %% Line 1178
				  apply 'mk_fun_var'/2
				      (Arg2Fun, DstArgs)
			      in  let <_cor86> =
				      %% Line 1179
				      ( fun (_cor84) ->
					    let <TmpArgTypes> =
						%% Line 1180
						apply 'lookup_type_list'/2
						    (Args, _cor84)
					    in  %% Line 1181
						apply 'bif_return'/4
						    ('erlang', Op, 2, TmpArgTypes)
					-| [{'id',{0,0,'-get_bif_constr/4-fun-5-'}}] )
				  in  let <DstVar> =
					  %% Line 1179
					  apply 'mk_fun_var'/2
					      (_cor86, %% Line 1182
						       Args)
				      in  let <_cor88> =
					      %% Line 1183
					      apply 'mk_constraint'/3
						  (Dst, 'sub', DstVar)
					  in  let <_cor89> =
						  %% Line 1184
						  apply 'mk_constraint'/3
						      (Arg1, 'sub', Arg1Var)
					      in  let <_cor90> =
						      %% Line 1185
						      apply 'mk_constraint'/3
							  (Arg2, 'sub', Arg2Var)
						  in  %% Line 1183
						      apply 'mk_conj_constraint_list'/1
							  ([_cor88|%% Line 1184
								   [_cor89|%% Line 1185
									   [_cor90|[]]]])
	  %% Line 1186
	  <{'erlang','++',2},Dst,Args = [Hd|[Tl|[]]],_X_State> when 'true' ->
	      let <HdFun> =
		  %% Line 1187
		  ( fun (_cor97) ->
			let <DstType> =
			    %% Line 1188
			    apply 'lookup_type'/2
				(Dst, _cor97)
			in  %% Line 1189
			    case call 'erl_types':'t_is_cons'
				     (DstType) of
			      %% Line 1190
			      <'true'> when 'true' ->
				  let <_cor92> =
				      call 'erl_types':'t_cons_hd'
					  (DstType)
				  in  call 'erl_types':'t_list'
					  (_cor92)
			      %% Line 1191
			      <'false'> when 'true' ->
				  %% Line 1192
				  case call 'erl_types':'t_is_list'
					   (DstType) of
				    %% Line 1193
				    <'true'> when 'true' ->
					%% Line 1194
					case call 'erl_types':'t_is_nil'
						 (DstType) of
					  %% Line 1195
					  <'true'> when 'true' ->
					      DstType
					  %% Line 1196
					  <'false'> when 'true' ->
					      let <_cor93> =
						  call 'erl_types':'t_list_elements'
						      (DstType)
					      in  call 'erl_types':'t_list'
						      (_cor93)
					  ( <_cor94> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor94})
					    -| ['compiler_generated'] )
					end
				    %% Line 1198
				    <'false'> when 'true' ->
					call 'erl_types':'t_list'
					    ()
				    ( <_cor95> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor95})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor96> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor96})
				-| ['compiler_generated'] )
			    end
		    -| [{'id',{0,0,'-get_bif_constr/4-fun-6-'}}] )
	      in  let <TlFun> =
		      %% Line 1202
		      ( fun (_cor106) ->
			    let <DstType> =
				%% Line 1203
				apply 'lookup_type'/2
				    (Dst, _cor106)
			    in  %% Line 1204
				case call 'erl_types':'t_is_cons'
					 (DstType) of
				  %% Line 1205
				  <'true'> when 'true' ->
				      let <_cor101> =
					  call 'erl_types':'t_cons_tl'
					      (DstType)
				      in  call 'erl_types':'t_sup'
					      (_cor101, DstType)
				  %% Line 1206
				  <'false'> when 'true' ->
				      %% Line 1207
				      case call 'erl_types':'t_is_list'
					       (DstType) of
					%% Line 1208
					<'true'> when 'true' ->
					    %% Line 1209
					    case call 'erl_types':'t_is_nil'
						     (DstType) of
					      %% Line 1210
					      <'true'> when 'true' ->
						  DstType
					      %% Line 1211
					      <'false'> when 'true' ->
						  let <_cor102> =
						      call 'erl_types':'t_list_elements'
							  (DstType)
						  in  call 'erl_types':'t_list'
							  (_cor102)
					      ( <_cor103> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor103})
						-| ['compiler_generated'] )
					    end
					%% Line 1213
					<'false'> when 'true' ->
					    call 'erl_types':'t_any'
						()
					( <_cor104> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor104})
					  -| ['compiler_generated'] )
				      end
				  ( <_cor105> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor105})
				    -| ['compiler_generated'] )
				end
			-| [{'id',{0,0,'-get_bif_constr/4-fun-7-'}}] )
		  in  let <DstL> =
			  %% Line 1217
			  [Dst|[]]
		      in  let <HdVar> =
			      %% Line 1218
			      apply 'mk_fun_var'/2
				  (HdFun, DstL)
			  in  let <TlVar> =
				  %% Line 1219
				  apply 'mk_fun_var'/2
				      (TlFun, DstL)
			      in  let <ArgTypes> =
				      %% Line 1220
				      call 'erl_bif_types':'arg_types'
					  ('erlang', '++', 2)
				  in  let <_cor116> =
					  %% Line 1221
					  ( fun (_cor114) ->
						let <TmpArgTypes> =
						    %% Line 1222
						    apply 'lookup_type_list'/2
							(Args, _cor114)
						in  %% Line 1223
						    apply 'bif_return'/4
							('erlang', '++', 2, TmpArgTypes)
					    -| [{'id',{0,0,'-get_bif_constr/4-fun-8-'}}] )
				      in  let <ReturnType> =
					      %% Line 1221
					      apply 'mk_fun_var'/2
						  (_cor116, %% Line 1224
							    Args)
					  in  let <Cs> =
						  %% Line 1225
						  apply 'mk_constraints'/3
						      (Args, 'sub', ArgTypes)
					      in  let <_cor119> =
						      %% Line 1226
						      apply 'mk_constraint'/3
							  (Dst, 'sub', ReturnType)
						  in  let <_cor120> =
							  %% Line 1227
							  apply 'mk_constraint'/3
							      (Hd, 'sub', HdVar)
						      in  let <_cor121> =
							      %% Line 1228
							      apply 'mk_constraint'/3
								  (Tl, 'sub', TlVar)
							  in  %% Line 1226
							      apply 'mk_conj_constraint_list'/1
								  ([_cor119|%% Line 1227
									    [_cor120|%% Line 1228
										     [_cor121|%% Line 1229
											      Cs]]])
	  %% Line 1230
	  <{'erlang','is_atom',1},Dst,[Arg|[]],State> when 'true' ->
	      let <_cor122> =
		  %% Line 1231
		  call 'erl_types':'t_atom'
		      ()
	      in  %% Line 1231
		  apply 'get_bif_test_constr'/4
		      (Dst, Arg, _cor122, State)
	  %% Line 1232
	  <{'erlang','is_binary',1},Dst,[Arg|[]],State> when 'true' ->
	      let <_cor123> =
		  %% Line 1233
		  call 'erl_types':'t_binary'
		      ()
	      in  %% Line 1233
		  apply 'get_bif_test_constr'/4
		      (Dst, Arg, _cor123, State)
	  %% Line 1234
	  <{'erlang','is_bitstring',1},Dst,[Arg|[]],State> when 'true' ->
	      let <_cor124> =
		  %% Line 1235
		  call 'erl_types':'t_bitstr'
		      ()
	      in  %% Line 1235
		  apply 'get_bif_test_constr'/4
		      (Dst, Arg, _cor124, State)
	  %% Line 1236
	  <{'erlang','is_boolean',1},Dst,[Arg|[]],State> when 'true' ->
	      let <_cor125> =
		  %% Line 1237
		  call 'erl_types':'t_boolean'
		      ()
	      in  %% Line 1237
		  apply 'get_bif_test_constr'/4
		      (Dst, Arg, _cor125, State)
	  %% Line 1238
	  <{'erlang','is_float',1},Dst,[Arg|[]],State> when 'true' ->
	      let <_cor126> =
		  %% Line 1239
		  call 'erl_types':'t_float'
		      ()
	      in  %% Line 1239
		  apply 'get_bif_test_constr'/4
		      (Dst, Arg, _cor126, State)
	  %% Line 1240
	  <{'erlang','is_function',1},Dst,[Arg|[]],State> when 'true' ->
	      let <_cor127> =
		  %% Line 1241
		  call 'erl_types':'t_fun'
		      ()
	      in  %% Line 1241
		  apply 'get_bif_test_constr'/4
		      (Dst, Arg, _cor127, State)
	  %% Line 1242
	  <{'erlang','is_function',2},Dst,[Fun|[Arity|[]]],_X_State> when 'true' ->
	      let <ArgFun> =
		  %% Line 1243
		  ( fun (_cor139) ->
			let <DstType> =
			    %% Line 1244
			    apply 'lookup_type'/2
				(Dst, _cor139)
			in  %% Line 1245
			    case call 'erl_types':'t_is_any_atom'
				     ('true', DstType) of
			      %% Line 1246
			      <'true'> when 'true' ->
				  let <ArityType> =
				      %% Line 1247
				      apply 'lookup_type'/2
					  (Arity, _cor139)
				  in  %% Line 1248
				      case call 'erl_types':'t_number_vals'
					       (ArityType) of
					%% Line 1249
					<'unknown'> when 'true' ->
					    call 'erl_types':'t_fun'
						()
					%% Line 1250
					<Vals> when 'true' ->
					    let <_cor136> =
						( letrec
						      'lc$^0'/1 =
							  fun (_cor132) ->
							      case _cor132 of
								<[X|_cor131]> when 'true' ->
								    let <_cor133> =
									call 'erl_types':'t_any'
									    ()
								    in  let <_cor134> =
									    call 'erl_types':'t_fun'
										(X, _cor133)
									in  let <_cor135> =
										apply 'lc$^0'/1
										    (_cor131)
									    in  ( [_cor134|_cor135]
										  -| ['compiler_generated'] )
								<[]> when 'true' ->
								    []
								( <_cor132> when 'true' ->
								      ( primop 'match_fail'
									    ({'function_clause',_cor132})
									-| [{'function_name',{'lc$^0',1}}] )
								  -| ['compiler_generated'] )
							      end
						  in  apply 'lc$^0'/1
							  (Vals)
						  -| ['list_comprehension'] )
					    in  call 'erl_types':'t_sup'
						    (_cor136)
				      end
			      %% Line 1252
			      <'false'> when 'true' ->
				  call 'erl_types':'t_any'
				      ()
			      ( <_cor138> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor138})
				-| ['compiler_generated'] )
			    end
		    -| [{'id',{0,0,'-get_bif_constr/4-fun-9-'}}] )
	      in  let <ArgV> =
		      %% Line 1255
		      apply 'mk_fun_var'/2
			  (ArgFun, [Dst|[Arity|[]]])
		  in  let <_cor143> =
			  %% Line 1256
			  call 'erl_types':'t_boolean'
			      ()
		      in  let <_cor144> =
			      %% Line 1256
			      apply 'mk_constraint'/3
				  (Dst, 'sub', _cor143)
			  in  let <_cor145> =
				  %% Line 1257
				  call 'erl_types':'t_integer'
				      ()
			      in  let <_cor146> =
				      %% Line 1257
				      apply 'mk_constraint'/3
					  (Arity, 'sub', _cor145)
				  in  let <_cor147> =
					  %% Line 1258
					  apply 'mk_constraint'/3
					      (Fun, 'sub', ArgV)
				      in  %% Line 1256
					  apply 'mk_conj_constraint_list'/1
					      ([_cor144|%% Line 1257
							[_cor146|%% Line 1258
								 [_cor147|[]]]])
	  %% Line 1259
	  <{'erlang','is_integer',1},Dst,[Arg|[]],State> when 'true' ->
	      let <_cor148> =
		  %% Line 1260
		  call 'erl_types':'t_integer'
		      ()
	      in  %% Line 1260
		  apply 'get_bif_test_constr'/4
		      (Dst, Arg, _cor148, State)
	  %% Line 1261
	  <{'erlang','is_list',1},Dst,[Arg|[]],State> when 'true' ->
	      let <_cor149> =
		  %% Line 1262
		  call 'erl_types':'t_maybe_improper_list'
		      ()
	      in  %% Line 1262
		  apply 'get_bif_test_constr'/4
		      (Dst, Arg, _cor149, State)
	  %% Line 1263
	  <{'erlang','is_number',1},Dst,[Arg|[]],State> when 'true' ->
	      let <_cor150> =
		  %% Line 1264
		  call 'erl_types':'t_number'
		      ()
	      in  %% Line 1264
		  apply 'get_bif_test_constr'/4
		      (Dst, Arg, _cor150, State)
	  %% Line 1265
	  <{'erlang','is_pid',1},Dst,[Arg|[]],State> when 'true' ->
	      let <_cor151> =
		  %% Line 1266
		  call 'erl_types':'t_pid'
		      ()
	      in  %% Line 1266
		  apply 'get_bif_test_constr'/4
		      (Dst, Arg, _cor151, State)
	  %% Line 1267
	  <{'erlang','is_port',1},Dst,[Arg|[]],State> when 'true' ->
	      let <_cor152> =
		  %% Line 1268
		  call 'erl_types':'t_port'
		      ()
	      in  %% Line 1268
		  apply 'get_bif_test_constr'/4
		      (Dst, Arg, _cor152, State)
	  %% Line 1269
	  <{'erlang','is_reference',1},Dst,[Arg|[]],State> when 'true' ->
	      let <_cor153> =
		  %% Line 1270
		  call 'erl_types':'t_reference'
		      ()
	      in  %% Line 1270
		  apply 'get_bif_test_constr'/4
		      (Dst, Arg, _cor153, State)
	  %% Line 1271
	  <{'erlang','is_record',2},Dst,Args = [Var|[Tag|[]]],_X_State> when 'true' ->
	      let <ArgFun> =
		  %% Line 1272
		  ( fun (_cor156) ->
			let <_cor154> =
			    %% Line 1273
			    apply 'lookup_type'/2
				(Dst, _cor156)
			in  %% Line 1273
			    case call 'erl_types':'t_is_any_atom'
				     ('true', _cor154) of
			      %% Line 1274
			      <'true'> when 'true' ->
				  call 'erl_types':'t_tuple'
				      ()
			      %% Line 1275
			      <'false'> when 'true' ->
				  call 'erl_types':'t_any'
				      ()
			      ( <_cor155> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor155})
				-| ['compiler_generated'] )
			    end
		    -| [{'id',{0,0,'-get_bif_constr/4-fun-10-'}}] )
	      in  let <ArgV> =
		      %% Line 1278
		      apply 'mk_fun_var'/2
			  (ArgFun, [Dst|[]])
		  in  let <DstFun> =
			  %% Line 1279
			  ( fun (_cor161) ->
				let <TmpArgTypes> =
				    %% Line 1280
				    apply 'lookup_type_list'/2
					(Args, _cor161)
				in  %% Line 1281
				    apply 'bif_return'/4
					('erlang', 'is_record', 2, TmpArgTypes)
			    -| [{'id',{0,0,'-get_bif_constr/4-fun-11-'}}] )
		      in  let <DstV> =
			      %% Line 1283
			      apply 'mk_fun_var'/2
				  (DstFun, Args)
			  in  let <_cor165> =
				  %% Line 1284
				  apply 'mk_constraint'/3
				      (Dst, 'sub', DstV)
			      in  let <_cor166> =
				      %% Line 1285
				      call 'erl_types':'t_atom'
					  ()
				  in  let <_cor167> =
					  %% Line 1285
					  apply 'mk_constraint'/3
					      (Tag, 'sub', _cor166)
				      in  let <_cor168> =
					      %% Line 1286
					      apply 'mk_constraint'/3
						  (Var, 'sub', ArgV)
					  in  %% Line 1284
					      apply 'mk_conj_constraint_list'/1
						  ([_cor165|%% Line 1285
							    [_cor167|%% Line 1286
								     [_cor168|[]]]])
	  %% Line 1287
	  <{'erlang','is_record',3},Dst,Args = [Var|[Tag|[Arity|[]]]],State> when 'true' ->
	      %% Line 1289
	      ( case State of
		  ( <( {'state',_cor382,_cor383,_cor384,_cor385,_cor386,_cor387,_cor388,_cor389,_cor390,_cor391,_cor392,_cor393,_cor394,_rec2,_cor395,_cor396,_cor397}
		       -| ['compiler_generated'] )> when 'true' ->
			let <ArgFun> =
			    %% Line 1291
			    ( fun (_cor186) ->
				  let <_cor172> =
				      %% Line 1292
				      apply 'lookup_type'/2
					  (Dst, _cor186)
				  in  %% Line 1292
				      case call 'erl_types':'t_is_any_atom'
					       ('true', _cor172) of
					%% Line 1293
					<'true'> when 'true' ->
					    let <ArityType> =
						%% Line 1294
						apply 'lookup_type'/2
						    (Arity, _cor186)
					    in  %% Line 1295
						case call 'erl_types':'t_is_integer'
							 (ArityType) of
						  %% Line 1296
						  <'true'> when 'true' ->
						      %% Line 1297
						      case call 'erl_types':'t_number_vals'
							       (ArityType) of
							%% Line 1298
							<[ArityVal|[]]> when 'true' ->
							    let <TagType> =
								%% Line 1299
								apply 'lookup_type'/2
								    (Tag, _cor186)
							    in  %% Line 1300
								case call 'erl_types':'t_is_atom'
									 (TagType) of
								  %% Line 1301
								  <'true'> when 'true' ->
								      let <_cor176> =
									  %% Line 1302
									  call 'erlang':'-'
									      (ArityVal, 1)
								      in  let <_cor175> =
									      %% Line 1302
									      call 'erl_types':'t_any'
										  ()
									  in  let <AnyElems> =
										  %% Line 1302
										  call 'lists':'duplicate'
										      (_cor176, _cor175)
									      in  let <GenRecord> =
										      %% Line 1303
										      call 'erl_types':'t_tuple'
											  ([TagType|AnyElems])
										  in  %% Line 1304
										      case call 'erl_types':'t_atom_vals'
											       (TagType) of
											%% Line 1305
											<[TagVal|[]]> when 'true' ->
											    let <_cor179> =
												%% Line 1306
												call 'erlang':'-'
												    (ArityVal, 1)
											    in  %% Line 1306
												case apply 'lookup_record'/3
													 (_rec2, TagVal, _cor179) of
												  %% Line 1307
												  <{'ok',Type}> when 'true' ->
												      %% Line 1308
												      Type
												  %% Line 1309
												  <'error'> when 'true' ->
												      GenRecord
												  ( <_cor180> when 'true' ->
													primop 'match_fail'
													    ({'case_clause',_cor180})
												    -| ['compiler_generated'] )
												end
											%% Line 1311
											<_cor399> when 'true' ->
											    GenRecord
										      end
								  %% Line 1313
								  <'false'> when 'true' ->
								      call 'erl_types':'t_tuple'
									  (ArityVal)
								  ( <_cor182> when 'true' ->
									primop 'match_fail'
									    ({'case_clause',_cor182})
								    -| ['compiler_generated'] )
								end
							%% Line 1315
							<_cor400> when 'true' ->
							    call 'erl_types':'t_tuple'
								()
						      end
						  %% Line 1317
						  <'false'> when 'true' ->
						      call 'erl_types':'t_tuple'
							  ()
						  ( <_cor184> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor184})
						    -| ['compiler_generated'] )
						end
					%% Line 1319
					<'false'> when 'true' ->
					    call 'erl_types':'t_any'
						()
					( <_cor185> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor185})
					  -| ['compiler_generated'] )
				      end
			      -| [{'id',{0,0,'-get_bif_constr/4-fun-12-'}}] )
			in  let <ArgV> =
				%% Line 1322
				apply 'mk_fun_var'/2
				    (ArgFun, [Tag|[Arity|[Dst|[]]]])
			    in  let <DstFun> =
				    %% Line 1323
				    ( fun (_cor192) ->
					  %% Line 1324
					  case apply 'lookup_type_list'/2
						   (Args, _cor192) of
					    <[TmpVar|[TmpTag|[TmpArity|[]]]]> when 'true' ->
						let <TmpArgTypes> =
						    %% Line 1325
						    [TmpVar|[TmpTag|[TmpArity|[]]]]
						in  %% Line 1326
						    apply 'bif_return'/4
							('erlang', 'is_record', 3, TmpArgTypes)
					    ( <_cor190> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor190})
					      -| ['compiler_generated'] )
					  end
				      -| [{'id',{0,0,'-get_bif_constr/4-fun-13-'}}] )
				in  let <DstV> =
					%% Line 1328
					apply 'mk_fun_var'/2
					    (DstFun, Args)
				    in  let <_cor196> =
					    %% Line 1329
					    apply 'mk_constraint'/3
						(Dst, 'sub', DstV)
					in  let <_cor197> =
						%% Line 1330
						call 'erl_types':'t_integer'
						    ()
					    in  let <_cor198> =
						    %% Line 1330
						    apply 'mk_constraint'/3
							(Arity, 'sub', _cor197)
						in  let <_cor199> =
							%% Line 1331
							call 'erl_types':'t_atom'
							    ()
						    in  let <_cor200> =
							    %% Line 1331
							    apply 'mk_constraint'/3
								(Tag, 'sub', _cor199)
							in  let <_cor201> =
								%% Line 1332
								apply 'mk_constraint'/3
								    (Var, 'sub', ArgV)
							    in  %% Line 1329
								apply 'mk_conj_constraint_list'/1
								    ([_cor196|%% Line 1330
									      [_cor198|%% Line 1331
										       [_cor200|%% Line 1332
												[_cor201|[]]]]])
		    -| ['compiler_generated'] )
		  ( <_cor398> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1333
	  <{'erlang','is_tuple',1},Dst,[Arg|[]],State> when 'true' ->
	      let <_cor202> =
		  %% Line 1334
		  call 'erl_types':'t_tuple'
		      ()
	      in  %% Line 1334
		  apply 'get_bif_test_constr'/4
		      (Dst, Arg, _cor202, State)
	  %% Line 1335
	  <{'erlang','and',2},Dst,Args = [Arg1|[Arg2|[]]],_X_State> when 'true' ->
	      let <True> =
		  %% Line 1336
		  call 'erl_types':'t_from_term'
		      ('true')
	      in  let <False> =
		      %% Line 1337
		      call 'erl_types':'t_from_term'
			  ('false')
		  in  let <ArgFun> =
			  %% Line 1338
			  ( fun (_cor212) ->
				%% Line 1339
				( fun (_cor210) ->
				      let <DstType> =
					  %% Line 1340
					  apply 'lookup_type'/2
					      (Dst, _cor210)
				      in  %% Line 1341
					  case call 'erl_types':'t_is_any_atom'
						   ('true', DstType) of
					    %% Line 1342
					    <'true'> when 'true' ->
						True
					    %% Line 1343
					    <'false'> when 'true' ->
						%% Line 1344
						case call 'erl_types':'t_is_any_atom'
							 ('false', DstType) of
						  %% Line 1345
						  <'true'> when 'true' ->
						      let <_cor206> =
							  %% Line 1347
							  apply 'lookup_type'/2
							      (_cor212, _cor210)
						      in  %% Line 1346
							  case %% Line 1347
							       call 'erl_types':'t_is_any_atom'
								   ('true', _cor206) of
							    %% Line 1349
							    <'true'> when 'true' ->
								False
							    %% Line 1350
							    <'false'> when 'true' ->
								call 'erl_types':'t_boolean'
								    ()
							    ( <_cor207> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_cor207})
							      -| ['compiler_generated'] )
							  end
						  %% Line 1352
						  <'false'> when 'true' ->
						      %% Line 1353
						      call 'erl_types':'t_boolean'
							  ()
						  ( <_cor208> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor208})
						    -| ['compiler_generated'] )
						end
					    ( <_cor209> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor209})
					      -| ['compiler_generated'] )
					  end
				  -| [{'id',{0,0,'-get_bif_constr/4-fun-14-'}}] )
			    -| [{'id',{0,0,'-get_bif_constr/4-fun-15-'}}] )
		      in  let <DstFun> =
			      %% Line 1358
			      ( fun (_cor223) ->
				    let <Arg1Type> =
					%% Line 1359
					apply 'lookup_type'/2
					    (Arg1, _cor223)
				    in  %% Line 1360
					case call 'erl_types':'t_is_any_atom'
						 ('false', Arg1Type) of
					  %% Line 1361
					  <'true'> when 'true' ->
					      False
					  %% Line 1362
					  <'false'> when 'true' ->
					      let <Arg2Type> =
						  %% Line 1363
						  apply 'lookup_type'/2
						      (Arg2, _cor223)
					      in  %% Line 1364
						  case call 'erl_types':'t_is_any_atom'
							   ('false', Arg2Type) of
						    %% Line 1365
						    <'true'> when 'true' ->
							False
						    %% Line 1366
						    <'false'> when 'true' ->
							let <_cor219> =
							    %% Line 1368
							    ( case call 'erl_types':'t_is_any_atom'
								       ('true', Arg1Type) of
								( <( 'true'
								     -| ['compiler_generated'] )> when 'true' ->
								      call 'erl_types':'t_is_any_atom'
									  ('true', Arg2Type)
								  -| ['compiler_generated'] )
								( <( 'false'
								     -| ['compiler_generated'] )> when 'true' ->
								      'false'
								  -| ['compiler_generated'] )
								( <_cor217> when 'true' ->
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'error'
													     -| ['compiler_generated'] )
									    (( {( 'badarg'
										  -| ['compiler_generated'] ),_cor217}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							      -| ['compiler_generated'] )
							in  %% Line 1367
							    case _cor219 of
							      %% Line 1369
							      <'true'> when 'true' ->
								  True
							      %% Line 1370
							      <'false'> when 'true' ->
								  call 'erl_types':'t_boolean'
								      ()
							      ( <_cor220> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_cor220})
								-| ['compiler_generated'] )
							    end
						    ( <_cor221> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor221})
						      -| ['compiler_generated'] )
						  end
					  ( <_cor222> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor222})
					    -| ['compiler_generated'] )
					end
				-| [{'id',{0,0,'-get_bif_constr/4-fun-16-'}}] )
			  in  let <_cor226> =
				  %% Line 1375
				  apply ArgFun
				      (Arg2)
			      in  let <ArgV1> =
				      %% Line 1375
				      apply 'mk_fun_var'/2
					  (_cor226, [Arg2|[Dst|[]]])
				  in  let <_cor228> =
					  %% Line 1376
					  apply ArgFun
					      (Arg1)
				      in  let <ArgV2> =
					      %% Line 1376
					      apply 'mk_fun_var'/2
						  (_cor228, [Arg1|[Dst|[]]])
					  in  let <DstV> =
						  %% Line 1377
						  apply 'mk_fun_var'/2
						      (DstFun, Args)
					      in  let <_cor231> =
						      %% Line 1378
						      apply 'mk_constraint'/3
							  (Dst, 'sub', DstV)
						  in  let <_cor232> =
							  %% Line 1379
							  apply 'mk_constraint'/3
							      (Arg1, 'sub', ArgV1)
						      in  let <_cor233> =
							      %% Line 1380
							      apply 'mk_constraint'/3
								  (Arg2, 'sub', ArgV2)
							  in  %% Line 1378
							      apply 'mk_conj_constraint_list'/1
								  ([_cor231|%% Line 1379
									    [_cor232|%% Line 1380
										     [_cor233|[]]]])
	  %% Line 1381
	  <{'erlang','or',2},Dst,Args = [Arg1|[Arg2|[]]],_X_State> when 'true' ->
	      let <True> =
		  %% Line 1382
		  call 'erl_types':'t_from_term'
		      ('true')
	      in  let <False> =
		      %% Line 1383
		      call 'erl_types':'t_from_term'
			  ('false')
		  in  let <ArgFun> =
			  %% Line 1384
			  ( fun (_cor243) ->
				%% Line 1385
				( fun (_cor241) ->
				      let <DstType> =
					  %% Line 1386
					  apply 'lookup_type'/2
					      (Dst, _cor241)
				      in  %% Line 1387
					  case call 'erl_types':'t_is_any_atom'
						   ('false', DstType) of
					    %% Line 1388
					    <'true'> when 'true' ->
						False
					    %% Line 1389
					    <'false'> when 'true' ->
						%% Line 1390
						case call 'erl_types':'t_is_any_atom'
							 ('true', DstType) of
						  %% Line 1391
						  <'true'> when 'true' ->
						      let <_cor237> =
							  %% Line 1393
							  apply 'lookup_type'/2
							      (_cor243, _cor241)
						      in  %% Line 1392
							  case %% Line 1393
							       call 'erl_types':'t_is_any_atom'
								   ('false', _cor237) of
							    %% Line 1395
							    <'true'> when 'true' ->
								True
							    %% Line 1396
							    <'false'> when 'true' ->
								call 'erl_types':'t_boolean'
								    ()
							    ( <_cor238> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_cor238})
							      -| ['compiler_generated'] )
							  end
						  %% Line 1398
						  <'false'> when 'true' ->
						      %% Line 1399
						      call 'erl_types':'t_boolean'
							  ()
						  ( <_cor239> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor239})
						    -| ['compiler_generated'] )
						end
					    ( <_cor240> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor240})
					      -| ['compiler_generated'] )
					  end
				  -| [{'id',{0,0,'-get_bif_constr/4-fun-17-'}}] )
			    -| [{'id',{0,0,'-get_bif_constr/4-fun-18-'}}] )
		      in  let <DstFun> =
			      %% Line 1404
			      ( fun (_cor254) ->
				    let <Arg1Type> =
					%% Line 1405
					apply 'lookup_type'/2
					    (Arg1, _cor254)
				    in  %% Line 1406
					case call 'erl_types':'t_is_any_atom'
						 ('true', Arg1Type) of
					  %% Line 1407
					  <'true'> when 'true' ->
					      True
					  %% Line 1408
					  <'false'> when 'true' ->
					      let <Arg2Type> =
						  %% Line 1409
						  apply 'lookup_type'/2
						      (Arg2, _cor254)
					      in  %% Line 1410
						  case call 'erl_types':'t_is_any_atom'
							   ('true', Arg2Type) of
						    %% Line 1411
						    <'true'> when 'true' ->
							True
						    %% Line 1412
						    <'false'> when 'true' ->
							let <_cor250> =
							    %% Line 1414
							    ( case call 'erl_types':'t_is_any_atom'
								       ('false', Arg1Type) of
								( <( 'true'
								     -| ['compiler_generated'] )> when 'true' ->
								      call 'erl_types':'t_is_any_atom'
									  ('false', Arg2Type)
								  -| ['compiler_generated'] )
								( <( 'false'
								     -| ['compiler_generated'] )> when 'true' ->
								      'false'
								  -| ['compiler_generated'] )
								( <_cor248> when 'true' ->
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'error'
													     -| ['compiler_generated'] )
									    (( {( 'badarg'
										  -| ['compiler_generated'] ),_cor248}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							      -| ['compiler_generated'] )
							in  %% Line 1413
							    case _cor250 of
							      %% Line 1415
							      <'true'> when 'true' ->
								  False
							      %% Line 1416
							      <'false'> when 'true' ->
								  call 'erl_types':'t_boolean'
								      ()
							      ( <_cor251> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_cor251})
								-| ['compiler_generated'] )
							    end
						    ( <_cor252> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor252})
						      -| ['compiler_generated'] )
						  end
					  ( <_cor253> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor253})
					    -| ['compiler_generated'] )
					end
				-| [{'id',{0,0,'-get_bif_constr/4-fun-19-'}}] )
			  in  let <_cor257> =
				  %% Line 1421
				  apply ArgFun
				      (Arg2)
			      in  let <ArgV1> =
				      %% Line 1421
				      apply 'mk_fun_var'/2
					  (_cor257, [Arg2|[Dst|[]]])
				  in  let <_cor259> =
					  %% Line 1422
					  apply ArgFun
					      (Arg1)
				      in  let <ArgV2> =
					      %% Line 1422
					      apply 'mk_fun_var'/2
						  (_cor259, [Arg1|[Dst|[]]])
					  in  let <DstV> =
						  %% Line 1423
						  apply 'mk_fun_var'/2
						      (DstFun, Args)
					      in  let <F> =
						      %% Line 1424
						      ( fun (_cor267) ->
							    %% Line 1425
							    try
								let <_cor262> =
								    apply 'mk_constraint'/3
									(_cor267, 'sub', True)
								in  [_cor262|[]]
							    of <_cor263> ->
								_cor263
							    catch <_cor266,_cor265,_cor264> ->
								case <_cor266,_cor265,_cor264> of
								  %% Line 1426
								  <'throw','error',_cor401> when 'true' ->
								      []
								  ( <_cor266,_cor265,_cor264> when 'true' ->
									primop 'raise'
									    (_cor264, _cor265)
								    -| ['compiler_generated'] )
								end
							-| [{'id',{0,0,'-get_bif_constr/4-fun-20-'}}] )
						  in  let <_cor271> =
							  %% Line 1429
							  apply F
							      (Arg1)
						      in  let <_cor270> =
							      %% Line 1429
							      apply F
								  (Arg2)
							  in  let <Constrs> =
								  %% Line 1429
								  call 'erlang':'++'
								      (_cor271, _cor270)
							      in  let <_cor273> =
								      %% Line 1430
								      apply 'mk_constraint'/3
									  (Dst, 'sub', False)
								  in  let <Disj> =
									  %% Line 1430
									  apply 'mk_disj_constraint_list'/1
									      ([_cor273|Constrs])
								      in  let <_cor275> =
									      %% Line 1431
									      apply 'mk_constraint'/3
										  (Dst, 'sub', DstV)
									  in  let <_cor276> =
										  %% Line 1432
										  apply 'mk_constraint'/3
										      (Arg1, 'sub', ArgV1)
									      in  let <_cor277> =
										      %% Line 1433
										      apply 'mk_constraint'/3
											  (Arg2, 'sub', ArgV2)
										  in  %% Line 1431
										      apply 'mk_conj_constraint_list'/1
											  ([_cor275|%% Line 1432
												    [_cor276|%% Line 1433
													     [_cor277|%% Line 1434
														      [Disj|[]]]]])
	  %% Line 1435
	  <{'erlang','not',1},Dst,Args = [Arg|[]],_X_State> when 'true' ->
	      let <True> =
		  %% Line 1436
		  call 'erl_types':'t_from_term'
		      ('true')
	      in  let <False> =
		      %% Line 1437
		      call 'erl_types':'t_from_term'
			  ('false')
		  in  let <Fun> =
			  %% Line 1438
			  ( fun (_cor285) ->
				%% Line 1439
				( fun (_cor283) ->
				      let <Type> =
					  %% Line 1440
					  apply 'lookup_type'/2
					      (_cor285, _cor283)
				      in  %% Line 1441
					  case call 'erl_types':'t_is_any_atom'
						   ('true', Type) of
					    %% Line 1442
					    <'true'> when 'true' ->
						False
					    %% Line 1443
					    <'false'> when 'true' ->
						%% Line 1444
						case call 'erl_types':'t_is_any_atom'
							 ('false', Type) of
						  %% Line 1445
						  <'true'> when 'true' ->
						      True
						  %% Line 1446
						  <'false'> when 'true' ->
						      call 'erl_types':'t_boolean'
							  ()
						  ( <_cor281> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor281})
						    -| ['compiler_generated'] )
						end
					    ( <_cor282> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor282})
					      -| ['compiler_generated'] )
					  end
				  -| [{'id',{0,0,'-get_bif_constr/4-fun-21-'}}] )
			    -| [{'id',{0,0,'-get_bif_constr/4-fun-22-'}}] )
		      in  let <_cor288> =
			      %% Line 1451
			      apply Fun
				  (Dst)
			  in  let <ArgV> =
				  %% Line 1451
				  apply 'mk_fun_var'/2
				      (_cor288, [Dst|[]])
			      in  let <_cor290> =
				      %% Line 1452
				      apply Fun
					  (Arg)
				  in  let <DstV> =
					  %% Line 1452
					  apply 'mk_fun_var'/2
					      (_cor290, Args)
				      in  let <_cor292> =
					      %% Line 1453
					      apply 'mk_constraint'/3
						  (Arg, 'sub', ArgV)
					  in  let <_cor293> =
						  %% Line 1454
						  apply 'mk_constraint'/3
						      (Dst, 'sub', DstV)
					      in  %% Line 1453
						  apply 'mk_conj_constraint_list'/1
						      ([_cor292|%% Line 1454
								[_cor293|[]]])
	  %% Line 1455
	  <{'erlang','=:=',2},Dst,Args = [Arg1|[Arg2|[]]],_X_State> when 'true' ->
	      let <ArgFun> =
		  %% Line 1457
		  ( fun (_cor303,_cor302) ->
			%% Line 1458
			( fun (_cor300) ->
			      let <DstType> =
				  %% Line 1459
				  apply 'lookup_type'/2
				      (Dst, _cor300)
			      in  let <OtherVarType> =
				      %% Line 1460
				      apply 'lookup_type'/2
					  (_cor302, _cor300)
				  in  %% Line 1461
				      case call 'erl_types':'t_is_any_atom'
					       ('true', DstType) of
					%% Line 1462
					<'true'> when 'true' ->
					    OtherVarType
					%% Line 1463
					<'false'> when 'true' ->
					    %% Line 1464
					    case call 'erl_types':'t_is_any_atom'
						     ('false', DstType) of
					      %% Line 1465
					      <'true'> when 'true' ->
						  %% Line 1466
						  case apply 'is_singleton_type'/1
							   (OtherVarType) of
						    %% Line 1467
						    <'true'> when 'true' ->
							let <_cor296> =
							    apply 'lookup_type'/2
								(_cor303, _cor300)
							in  call 'erl_types':'t_subtract'
								(_cor296, OtherVarType)
						    %% Line 1468
						    <'false'> when 'true' ->
							call 'erl_types':'t_any'
							    ()
						    ( <_cor297> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor297})
						      -| ['compiler_generated'] )
						  end
					      %% Line 1470
					      <'false'> when 'true' ->
						  %% Line 1471
						  call 'erl_types':'t_any'
						      ()
					      ( <_cor298> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor298})
						-| ['compiler_generated'] )
					    end
					( <_cor299> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor299})
					  -| ['compiler_generated'] )
				      end
			  -| [{'id',{0,0,'-get_bif_constr/4-fun-23-'}}] )
		    -| [{'id',{0,0,'-get_bif_constr/4-fun-24-'}}] )
	      in  let <DstFun> =
		      %% Line 1476
		      ( fun (_cor311) ->
			    let <ArgType1> =
				%% Line 1477
				apply 'lookup_type'/2
				    (Arg1, _cor311)
			    in  let <ArgType2> =
				    %% Line 1478
				    apply 'lookup_type'/2
					(Arg2, _cor311)
				in  let <_cor309> =
					%% Line 1479
					call 'erl_types':'t_inf'
					    (ArgType1, ArgType2)
				    in  %% Line 1479
					case call 'erl_types':'t_is_none'
						 (_cor309) of
					  %% Line 1480
					  <'true'> when 'true' ->
					      call 'erl_types':'t_from_term'
						  ('false')
					  %% Line 1481
					  <'false'> when 'true' ->
					      call 'erl_types':'t_boolean'
						  ()
					  ( <_cor310> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor310})
					    -| ['compiler_generated'] )
					end
			-| [{'id',{0,0,'-get_bif_constr/4-fun-25-'}}] )
		  in  let <DstArgs> =
			  %% Line 1484
			  [Dst|[Arg1|[Arg2|[]]]]
		      in  let <_cor315> =
			      %% Line 1485
			      apply ArgFun
				  (Arg1, Arg2)
			  in  let <ArgV1> =
				  %% Line 1485
				  apply 'mk_fun_var'/2
				      (_cor315, DstArgs)
			      in  let <_cor317> =
				      %% Line 1486
				      apply ArgFun
					  (Arg2, Arg1)
				  in  let <ArgV2> =
					  %% Line 1486
					  apply 'mk_fun_var'/2
					      (_cor317, DstArgs)
				      in  let <DstV> =
					      %% Line 1487
					      apply 'mk_fun_var'/2
						  (DstFun, Args)
					  in  let <_cor320> =
						  %% Line 1488
						  apply 'mk_constraint'/3
						      (Dst, 'sub', DstV)
					      in  let <_cor321> =
						      %% Line 1489
						      apply 'mk_constraint'/3
							  (Arg1, 'sub', ArgV1)
						  in  let <_cor322> =
							  %% Line 1490
							  apply 'mk_constraint'/3
							      (Arg2, 'sub', ArgV2)
						      in  %% Line 1488
							  apply 'mk_conj_constraint_list'/1
							      ([_cor320|%% Line 1489
									[_cor321|%% Line 1490
										 [_cor322|[]]]])
	  %% Line 1491
	  <{'erlang','==',2},Dst,Args = [Arg1|[Arg2|[]]],_X_State> when 'true' ->
	      let <DstFun> =
		  %% Line 1492
		  ( fun (_cor324) ->
			let <TmpArgTypes> =
			    %% Line 1493
			    apply 'lookup_type_list'/2
				(Args, _cor324)
			in  %% Line 1494
			    apply 'bif_return'/4
				('erlang', '==', 2, TmpArgTypes)
		    -| [{'id',{0,0,'-get_bif_constr/4-fun-26-'}}] )
	      in  let <ArgFun> =
		      %% Line 1497
		      ( fun (_cor339,_cor338) ->
			    %% Line 1498
			    ( fun (_cor336) ->
				  let <VarType> =
				      %% Line 1499
				      apply 'lookup_type'/2
					  (_cor339, _cor336)
				  in  let <DstType> =
					  %% Line 1500
					  apply 'lookup_type'/2
					      (Dst, _cor336)
				      in  %% Line 1501
					  case apply 'is_singleton_non_number_type'/1
						   (VarType) of
					    %% Line 1502
					    <'true'> when 'true' ->
						%% Line 1503
						case call 'erl_types':'t_is_any_atom'
							 ('true', DstType) of
						  %% Line 1504
						  <'true'> when 'true' ->
						      VarType
						  %% Line 1505
						  <'false'> when 'true' ->
						      %% Line 1506
						      case call 'erl_types':'t_is_any_atom'
							       ('false', DstType) of
							%% Line 1507
							<'true'> when 'true' ->
							    let <_cor329> =
								apply 'lookup_type'/2
								    (_cor338, _cor336)
							    in  call 'erl_types':'t_subtract'
								    (_cor329, VarType)
							%% Line 1508
							<'false'> when 'true' ->
							    call 'erl_types':'t_any'
								()
							( <_cor330> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_cor330})
							  -| ['compiler_generated'] )
						      end
						  ( <_cor331> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor331})
						    -| ['compiler_generated'] )
						end
					    %% Line 1511
					    <'false'> when 'true' ->
						%% Line 1512
						case call 'erl_types':'t_is_any_atom'
							 ('true', DstType) of
						  %% Line 1513
						  <'true'> when 'true' ->
						      %% Line 1514
						      case call 'erl_types':'t_is_number'
							       (VarType) of
							%% Line 1515
							<'true'> when 'true' ->
							    call 'erl_types':'t_number'
								()
							%% Line 1516
							<'false'> when 'true' ->
							    %% Line 1517
							    case call 'erl_types':'t_is_atom'
								     (VarType) of
							      %% Line 1518
							      <'true'> when 'true' ->
								  VarType
							      %% Line 1519
							      <'false'> when 'true' ->
								  call 'erl_types':'t_any'
								      ()
							      ( <_cor332> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_cor332})
								-| ['compiler_generated'] )
							    end
							( <_cor333> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_cor333})
							  -| ['compiler_generated'] )
						      end
						  %% Line 1522
						  <'false'> when 'true' ->
						      %% Line 1523
						      call 'erl_types':'t_any'
							  ()
						  ( <_cor334> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor334})
						    -| ['compiler_generated'] )
						end
					    ( <_cor335> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor335})
					      -| ['compiler_generated'] )
					  end
			      -| [{'id',{0,0,'-get_bif_constr/4-fun-27-'}}] )
			-| [{'id',{0,0,'-get_bif_constr/4-fun-28-'}}] )
		  in  let <DstV> =
			  %% Line 1528
			  apply 'mk_fun_var'/2
			      (DstFun, Args)
		      in  let <ArgL> =
			      %% Line 1529
			      [Arg1|[Arg2|[Dst|[]]]]
			  in  let <_cor345> =
				  %% Line 1530
				  apply ArgFun
				      (Arg2, Arg1)
			      in  let <ArgV1> =
				      %% Line 1530
				      apply 'mk_fun_var'/2
					  (_cor345, ArgL)
				  in  let <_cor347> =
					  %% Line 1531
					  apply ArgFun
					      (Arg1, Arg2)
				      in  let <ArgV2> =
					      %% Line 1531
					      apply 'mk_fun_var'/2
						  (_cor347, ArgL)
					  in  let <_cor349> =
						  %% Line 1532
						  apply 'mk_constraint'/3
						      (Dst, 'sub', DstV)
					      in  let <_cor350> =
						      %% Line 1533
						      apply 'mk_constraint'/3
							  (Arg1, 'sub', ArgV1)
						  in  let <_cor351> =
							  %% Line 1534
							  apply 'mk_constraint'/3
							      (Arg2, 'sub', ArgV2)
						      in  %% Line 1532
							  apply 'mk_conj_constraint_list'/1
							      ([_cor349|%% Line 1533
									[_cor350|%% Line 1534
										 [_cor351|[]]]])
	  %% Line 1535
	  <_X_BIF = {'erlang','element',2},Dst,Args,%% Line 1536
						    {'state',_cor402,Constrs,_cor403,_cor404,_cor405,_cor406,_cor407,_cor408,_cor409,_cor410,_cor411,_cor412,_cor413,_cor414,_cor415,_cor416,_cor417}> when 'true' ->
	      let <GenType> =
		  %% Line 1537
		  call 'erl_bif_types':'type'
		      ('erlang', 'element', 2)
	      in  %% Line 1538
		  case call 'erl_types':'t_is_none'
			   (GenType) of
		    %% Line 1539
		    <'true'> when 'true' ->
			call 'erlang':'throw'
			    ('error')
		    %% Line 1540
		    <'false'> when 'true' ->
			let <Fun> =
			    %% Line 1541
			    ( fun (_cor354) ->
				  let <ATs2> =
				      %% Line 1542
				      apply 'lookup_type_list'/2
					  (Args, _cor354)
				  in  %% Line 1543
				      apply 'bif_return'/4
					  ('erlang', 'element', 2, ATs2)
			      -| [{'id',{0,0,'-get_bif_constr/4-fun-29-'}}] )
			in  let <ReturnType> =
				%% Line 1545
				apply 'mk_fun_var'/2
				    (Fun, Args)
			    in  let <ArgTypes> =
				    %% Line 1546
				    call 'erl_bif_types':'arg_types'
					('erlang', 'element', 2)
				in  let <Cs> =
					%% Line 1547
					apply 'mk_constraints'/3
					    (Args, 'sub', ArgTypes)
				    in  let <_cor362> =
					    %% Line 1549
					    case apply 'find_element'/2
						     (Args, Constrs) of
					      %% Line 1550
					      <'unknown'> when 'true' ->
						  Cs
					      %% Line 1551
					      <Elem> when 'true' ->
						  let <_cor360> =
						      apply 'mk_constraint'/3
							  (Dst, 'eq', Elem)
						  in  [_cor360|Cs]
					    end
					in  let <_cor364> =
						%% Line 1553
						apply 'mk_constraint'/3
						    (Dst, 'sub', ReturnType)
					    in  %% Line 1553
						apply 'mk_conj_constraint_list'/1
						    ([_cor364|_cor362])
		    ( <_cor365> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor365})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1555
	  <_X_BIF = {M,F,A},Dst,Args,_X_State> when 'true' ->
	      let <GenType> =
		  %% Line 1556
		  call 'erl_bif_types':'type'
		      (M, F, A)
	      in  %% Line 1557
		  case call 'erl_types':'t_is_none'
			   (GenType) of
		    %% Line 1558
		    <'true'> when 'true' ->
			call 'erlang':'throw'
			    ('error')
		    %% Line 1559
		    <'false'> when 'true' ->
			let <_cor370> =
			    %% Line 1560
			    ( fun (_cor368) ->
				  let <TmpArgTypes> =
				      %% Line 1561
				      apply 'lookup_type_list'/2
					  (Args, _cor368)
				  in  %% Line 1562
				      apply 'bif_return'/4
					  (M, F, A, TmpArgTypes)
			      -| [{'id',{0,0,'-get_bif_constr/4-fun-30-'}}] )
			in  let <ReturnType> =
				%% Line 1560
				apply 'mk_fun_var'/2
				    (_cor370, %% Line 1563
					      Args)
			    in  %% Line 1564
				case call 'erl_bif_types':'is_known'
					 (M, F, A) of
				  %% Line 1565
				  <'false'> when 'true' ->
				      %% Line 1566
				      case call 'erl_types':'t_is_any'
					       (GenType) of
					%% Line 1567
					<'true'> when 'true' ->
					    %% Line 1568
					    'none'
					%% Line 1569
					<'false'> when 'true' ->
					    %% Line 1570
					    apply 'mk_constraint'/3
						(Dst, 'sub', ReturnType)
					( <_cor372> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor372})
					  -| ['compiler_generated'] )
				      end
				  %% Line 1572
				  <'true'> when 'true' ->
				      let <ArgTypes> =
					  %% Line 1573
					  call 'erl_bif_types':'arg_types'
					      (M, F, A)
				      in  let <Cs> =
					      %% Line 1574
					      apply 'mk_constraints'/3
						  (Args, 'sub', ArgTypes)
					  in  let <_cor375> =
						  %% Line 1575
						  apply 'mk_constraint'/3
						      (Dst, 'sub', ReturnType)
					      in  %% Line 1575
						  apply 'mk_conj_constraint_list'/1
						      ([_cor375|Cs])
				  ( <_cor376> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor376})
				    -| ['compiler_generated'] )
				end
		    ( <_cor377> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor377})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor381,_cor380,_cor379,_cor378> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor381,_cor380,_cor379,_cor378})
		  -| [{'function_name',{'get_bif_constr',4}}] )
	    -| ['compiler_generated'] )
	end
'eval_inv_arith'/4 =
    %% Line 1579
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'+',_X_Pos,Dst,Arg> when 'true' ->
	      %% Line 1580
	      apply 'bif_return'/4
		  ('erlang', '-', 2, [Dst|[Arg|[]]])
	  %% Line 1581
	  <'*',_X_Pos,Dst,Arg> when 'true' ->
	      %% Line 1582
	      case call 'erl_types':'t_number_vals'
		       (Arg) of
		%% Line 1583
		<[0]> when 'true' ->
		    call 'erl_types':'t_integer'
			()
		%% Line 1584
		<_cor12> when 'true' ->
		    let <TmpRet> =
			%% Line 1585
			apply 'bif_return'/4
			    ('erlang', 'div', 2, [Dst|[Arg|[]]])
		    in  let <Zero> =
			    %% Line 1586
			    call 'erl_types':'t_from_term'
				(0)
			in  %% Line 1588
			    case call 'erl_types':'t_is_subtype'
				     (Zero, Dst) of
			      %% Line 1589
			      <'false'> when 'true' ->
				  call 'erl_types':'t_subtract'
				      (TmpRet, Zero)
			      %% Line 1590
			      <'true'> when 'true' ->
				  TmpRet
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor6})
				-| ['compiler_generated'] )
			    end
	      end
	  %% Line 1593
	  <'-',1,Dst,Arg> when 'true' ->
	      %% Line 1594
	      apply 'bif_return'/4
		  ('erlang', '-', 2, [Arg|[Dst|[]]])
	  %% Line 1595
	  <'-',2,Dst,Arg> when 'true' ->
	      %% Line 1596
	      apply 'bif_return'/4
		  ('erlang', '+', 2, [Arg|[Dst|[]]])
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'eval_inv_arith',4}}] )
	    -| ['compiler_generated'] )
	end
'range_inc'/1 =
    %% Line 1598
    fun (_cor0) ->
	case _cor0 of
	  <'neg_inf'> when 'true' ->
	      'neg_inf'
	  %% Line 1599
	  <'pos_inf'> when 'true' ->
	      'pos_inf'
	  %% Line 1600
	  <Int>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      call 'erlang':'+'
		  (Int, 1)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'range_inc',1}}] )
	    -| ['compiler_generated'] )
	end
'range_dec'/1 =
    %% Line 1602
    fun (_cor0) ->
	case _cor0 of
	  <'neg_inf'> when 'true' ->
	      'neg_inf'
	  %% Line 1603
	  <'pos_inf'> when 'true' ->
	      'pos_inf'
	  %% Line 1604
	  <Int>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      call 'erlang':'-'
		  (Int, 1)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'range_dec',1}}] )
	    -| ['compiler_generated'] )
	end
'get_bif_test_constr'/4 =
    %% Line 1606
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <ArgFun> =
	    %% Line 1607
	    ( fun (_cor6) ->
		  let <DstType> =
		      %% Line 1608
		      apply 'lookup_type'/2
			  (_cor3, _cor6)
		  in  %% Line 1609
		      case call 'erl_types':'t_is_any_atom'
			       ('true', DstType) of
			%% Line 1610
			<'true'> when 'true' ->
			    _cor1
			%% Line 1611
			<'false'> when 'true' ->
			    call 'erl_types':'t_any'
				()
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor5})
			  -| ['compiler_generated'] )
		      end
	      -| [{'id',{0,0,'-get_bif_test_constr/4-fun-0-'}}] )
	in  let <ArgV> =
		%% Line 1614
		apply 'mk_fun_var'/2
		    (ArgFun, [_cor3|[]])
	    in  let <DstFun> =
		    %% Line 1615
		    ( fun (_cor14) ->
			  let <ArgType> =
			      %% Line 1616
			      apply 'lookup_type'/2
				  (_cor2, _cor14)
			  in  let <_cor11> =
				  %% Line 1617
				  call 'erl_types':'t_inf'
				      (ArgType, _cor1)
			      in  %% Line 1617
				  case call 'erl_types':'t_is_none'
					   (_cor11) of
				    %% Line 1618
				    <'true'> when 'true' ->
					%% Line 1619
					call 'erl_types':'t_from_term'
					    ('false')
				    %% Line 1620
				    <'false'> when 'true' ->
					%% Line 1621
					case call 'erl_types':'t_is_subtype'
						 (ArgType, _cor1) of
					  %% Line 1622
					  <'true'> when 'true' ->
					      call 'erl_types':'t_from_term'
						  ('true')
					  %% Line 1623
					  <'false'> when 'true' ->
					      call 'erl_types':'t_boolean'
						  ()
					  ( <_cor12> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor12})
					    -| ['compiler_generated'] )
					end
				    ( <_cor13> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor13})
				      -| ['compiler_generated'] )
				  end
		      -| [{'id',{0,0,'-get_bif_test_constr/4-fun-1-'}}] )
		in  let <DstV> =
			%% Line 1627
			apply 'mk_fun_var'/2
			    (DstFun, [_cor2|[]])
		    in  let <_cor18> =
			    %% Line 1628
			    apply 'mk_constraint'/3
				(_cor3, 'sub', DstV)
			in  let <_cor19> =
				%% Line 1629
				apply 'mk_constraint'/3
				    (_cor2, 'sub', ArgV)
			    in  %% Line 1628
				apply 'mk_conj_constraint_list'/1
				    ([_cor18|%% Line 1629
					     [_cor19|[]]])
'solve'/2 =
    %% Line 1637
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Fun|[]],State> when 'true' ->
	      let <_cor2> =
		  %% Line 1640
		  apply 'map_new'/0
		      ()
	      in  %% Line 1640
		  apply 'solve_fun'/3
		      (Fun, _cor2, State)
	  %% Line 1641
	  <SCC = [_cor10|_cor11],State> when 'true' ->
	      let <Parallel,NewState> =
		  %% Line 1645
		  case apply 'parallel_split'/1
			   (SCC) of
		    %% Line 1646
		    <'false'> when 'true' ->
			<'false',State>
		    %% Line 1647
		    <SplitSCC> when 'true' ->
			let <_cor3> =
			    apply 'minimize_state'/1
				(State)
			in  <SplitSCC,_cor3>
		  end
	      in  let <_cor7> =
		      %% Line 1649
		      apply 'map_new'/0
			  ()
		  in  %% Line 1649
		      apply 'solve_scc'/5
			  (SCC, Parallel, _cor7, NewState, 'false')
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'solve',2}}] )
	    -| ['compiler_generated'] )
	end
'solve_fun'/3 =
    %% Line 1651
    fun (_cor2,_cor1,_cor0) ->
	let <Cs> =
	    %% Line 1652
	    apply 'state__get_cs'/2
		(_cor2, _cor0)
	in  let <Deps> =
		%% Line 1653
		apply 'get_deps'/1
		    (Cs)
	    in  let <Ref> =
		    %% Line 1654
		    apply 'mk_constraint_ref'/2
			(_cor2, Deps)
		in  let <NewMap> =
			%% Line 1656
			apply 'solve'/4
			    (_cor2, Ref, _cor1, _cor0)
		    in  let <NewType> =
			    %% Line 1657
			    apply 'lookup_type'/2
				(_cor2, NewMap)
			in  let <_cor9> =
				%% Line 1658
				case apply 'state__get_rec_var'/2
					 (_cor2, _cor0) of
				  %% Line 1659
				  <'error'> when 'true' ->
				      _cor1
				  %% Line 1660
				  <{'ok',Var}> when 'true' ->
				      apply 'enter_type'/3
					  (Var, NewType, _cor1)
				  ( <_cor8> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor8})
				    -| ['compiler_generated'] )
				end
			    in  %% Line 1662
				apply 'enter_type'/3
				    (_cor2, NewType, _cor9)
'solve_scc'/5 =
    %% Line 1664
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 1665
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor7) ->
			  case _cor7 of
			    <[Fun|_cor6]> when 'true' ->
				let <_cor8> =
				    apply 'state__get_rec_var'/2
					(Fun, _cor1)
				in  let <_cor9> =
					apply 'lc$^0'/1
					    (_cor6)
				    in  ( [{Fun,_cor8}|_cor9]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor7> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor7})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor4)
	      -| ['list_comprehension'] )
	in  let <_cor16> =
		%% Line 1666
		( letrec
		      'lc$^1'/1 =
			  fun (_cor14) ->
			      case _cor14 of
				<[{_cor80,{'ok',Var}}|_cor13]> when 'true' ->
				    let <_cor15> =
					apply 'lc$^1'/1
					    (_cor13)
				    in  ( [Var|_cor15]
					  -| ['compiler_generated'] )
				( <[_cor12|_cor13]> when 'true' ->
				      apply 'lc$^1'/1
					  (_cor13)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor14> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor14})
					-| [{'function_name',{'lc$^1',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^1'/1
			  (_cor10)
		  -| ['list_comprehension'] )
	    in  let <_cor22> =
		    %% Line 1667
		    ( letrec
			  'lc$^2'/1 =
			      fun (_cor20) ->
				  case _cor20 of
				    <[{Fun,{'ok',_cor81}}|_cor19]> when 'true' ->
					let <_cor21> =
					    apply 'lc$^2'/1
						(_cor19)
					in  ( [Fun|_cor21]
					      -| ['compiler_generated'] )
				    ( <[_cor18|_cor19]> when 'true' ->
					  apply 'lc$^2'/1
					      (_cor19)
				      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor20> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor20})
					    -| [{'function_name',{'lc$^2',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lc$^2'/1
			      (_cor10)
		      -| ['list_comprehension'] )
		in  let <Types> =
			%% Line 1668
			apply 'unsafe_lookup_type_list'/2
			    (_cor22, _cor2)
		    in  let <_cor30> =
			    %% Line 1669
			    ( letrec
				  'lc$^3'/1 =
				      fun (_cor27) ->
					  case _cor27 of
					    <[Type|_cor26]> when 'true' ->
						let <_cor28> =
						    call 'erl_types':'t_limit'
							(Type, 4)
						in  let <_cor29> =
							apply 'lc$^3'/1
							    (_cor26)
						    in  ( [_cor28|_cor29]
							  -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor27> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor27})
						    -| [{'function_name',{'lc$^3',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^3'/1
				      (Types)
			      -| ['list_comprehension'] )
			in  let <_cor37> =
				%% Line 1670
				( fun (_cor34,_cor33) ->
				      let <_cor32> =
					  %% Line 1671
					  call 'erl_types':'t_var_name'
					      (_cor34)
				      in  %% Line 1671
					  apply 'erase_type'/2
					      (_cor32, _cor33)
				  -| [{'id',{0,0,'-solve_scc/5-fun-0-'}}] )
			    in  let <CleanMap> =
				    %% Line 1670
				    call 'lists':'foldl'
					(_cor37, _cor2, _cor4)
				in  let <Map1> =
					%% Line 1673
					apply 'enter_type_lists'/3
					    (_cor16, _cor30, CleanMap)
				    in  let <_cor45> =
					    %% Line 1675
					    ( letrec
						  'lc$^4'/1 =
						      fun (_cor42) ->
							  case _cor42 of
							    <[F|_cor41]> when 'true' ->
								let <_cor43> =
								    call 'erl_types':'t_var_name'
									(F)
								in  let <_cor44> =
									apply 'lc$^4'/1
									    (_cor41)
								    in  ( [_cor43|_cor44]
									  -| ['compiler_generated'] )
							    <[]> when 'true' ->
								[]
							    ( <_cor42> when 'true' ->
								  ( primop 'match_fail'
									({'function_clause',_cor42})
								    -| [{'function_name',{'lc$^4',1}}] )
							      -| ['compiler_generated'] )
							  end
					      in  apply 'lc$^4'/1
						      (_cor4)
					      -| ['list_comprehension'] )
					in  let <FunSet> =
						%% Line 1675
						call 'ordsets':'from_list'
						    (_cor45)
					    in  let <_cor48> =
						    %% Line 1677
						    case _cor3 of
						      %% Line 1678
						      <'false'> when 'true' ->
							  apply 'solve_whole_scc'/3
							      (_cor4, Map1, _cor1)
						      %% Line 1679
						      <SplitSCC> when 'true' ->
							  apply 'solve_whole_scc_parallel'/3
							      (SplitSCC, Map1, _cor1)
						    end
						in  %% Line 1681
						    case apply 'maps_are_equal'/3
							     (_cor48, _cor2, FunSet) of
						      %% Line 1682
						      <'true'> when 'true' ->
							  let <NewTypes> =
							      %% Line 1684
							      apply 'unsafe_lookup_type_list'/2
								  (_cor22, _cor48)
							  in  let <_cor57> =
								  %% Line 1685
								  ( letrec
									'lc$^5'/1 =
									    fun (_cor54) ->
										case _cor54 of
										  <[T|_cor53]> when 'true' ->
										      let <_cor55> =
											  call 'erl_types':'t_fun_range'
											      (T)
										      in  let <_cor56> =
											      apply 'lc$^5'/1
												  (_cor53)
											  in  ( [_cor55|_cor56]
												-| ['compiler_generated'] )
										  <[]> when 'true' ->
										      []
										  ( <_cor54> when 'true' ->
											( primop 'match_fail'
											      ({'function_clause',_cor54})
											  -| [{'function_name',{'lc$^5',1}}] )
										    -| ['compiler_generated'] )
										end
								    in  apply 'lc$^5'/1
									    (NewTypes)
								    -| ['list_comprehension'] )
							      in  let <_cor59> =
								      %% Line 1686
								      ( case call 'erl_types':'any_none'
										 (_cor57) of
									  ( <( 'true'
									       -| ['compiler_generated'] )> when 'true' ->
										call 'erlang':'=:='
										    (_cor0, 'false')
									    -| ['compiler_generated'] )
									  ( <( 'false'
									       -| ['compiler_generated'] )> when 'true' ->
										'false'
									    -| ['compiler_generated'] )
									  ( <_cor51> when 'true' ->
										( call ( 'erlang'
											 -| ['compiler_generated'] ):( 'error'
														       -| ['compiler_generated'] )
										      (( {( 'badarg'
											    -| ['compiler_generated'] ),_cor51}
											 -| ['compiler_generated'] ))
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
									end
									-| ['compiler_generated'] )
								  in  %% Line 1685
								      case _cor59 of
									%% Line 1687
									<'true'> when 'true' ->
									    let <_cor69> =
										%% Line 1689
										( letrec
										      'lc$^6'/1 =
											  fun (_cor62) ->
											      case _cor62 of
												<[%% Line 1692
												  T|_cor61]> when 'true' ->
												    let <_cor63> =
													call 'erl_types':'t_fun_range'
													    (T)
												    in  let <_cor67> =
													    case call 'erl_types':'t_is_none'
														     (_cor63) of
													      %% Line 1690
													      <'false'> when 'true' ->
														  T
													      %% Line 1691
													      <'true'> when 'true' ->
														  let <_cor65> =
														      call 'erl_types':'t_fun_args'
															  (T)
														  in  let <_cor64> =
															  call 'erl_types':'t_unit'
															      ()
														      in  call 'erl_types':'t_fun'
															      (_cor65, _cor64)
													      ( <_cor66> when 'true' ->
														    primop 'match_fail'
															({'case_clause',_cor66})
														-| ['compiler_generated'] )
													    end
													in  let <_cor68> =
														%% Line 1692
														apply 'lc$^6'/1
														    (_cor61)
													    in  ( [_cor67|_cor68]
														  -| ['compiler_generated'] )
												<[]> when 'true' ->
												    []
												( <_cor62> when 'true' ->
												      ( primop 'match_fail'
													    ({'function_clause',_cor62})
													-| [{'function_name',{'lc$^6',1}}] )
												  -| ['compiler_generated'] )
											      end
										  in  apply 'lc$^6'/1
											  (%% Line 1692
											   NewTypes)
										  -| ['list_comprehension'] )
									    in  let <Map3> =
										    %% Line 1693
										    apply 'enter_type_lists'/3
											(_cor22, _cor69, _cor48)
										in  %% Line 1694
										    apply 'solve_scc'/5
											(_cor4, _cor3, Map3, _cor1, 'true')
									%% Line 1695
									<'false'> when 'true' ->
									    do  %% Line 1696
										case _cor3 of
										  %% Line 1697
										  <'false'> when 'true' ->
										      'ok'
										  %% Line 1698
										  <_cor82> when 'true' ->
										      apply 'dispose_state'/1
											  (_cor1)
										end
										_cor48
									( <_cor73> when 'true' ->
									      primop 'match_fail'
										  ({'case_clause',_cor73})
									  -| ['compiler_generated'] )
								      end
						      %% Line 1702
						      <'false'> when 'true' ->
							  %% Line 1704
							  apply 'solve_scc'/5
							      (_cor4, _cor3, _cor48, _cor1, _cor0)
						      ( <_cor74> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_cor74})
							-| ['compiler_generated'] )
						    end
'solve_whole_scc'/3 =
    %% Line 1707
    fun (_cor2,_cor1,_cor0) ->
	let <SolveFun> =
	    %% Line 1708
	    ( fun (_cor4,_cor3) ->
		  apply 'scc_fold_fun'/3
		      (_cor4, _cor3, _cor0)
	      -| [{'id',{0,0,'-solve_whole_scc/3-fun-0-'}}] )
	in  %% Line 1709
	    call 'lists':'foldl'
		(SolveFun, _cor1, _cor2)
'parallel_split'/1 =
    %% Line 1715
    fun (_cor0) ->
	let <Length> =
	    %% Line 1716
	    call 'erlang':'length'
		(_cor0)
	in  %% Line 1717
	    case <> of
	      %% Line 1719
	      <>
		  when call 'erlang':'>'
			(Length,
			 84) ->
		  let <_cor3> =
		      %% Line 1720
		      call 'dialyzer_utils':'parallelism'
			  ()
		  in  %% Line 1720
		      case call 'erlang':'min'
			       (_cor3, 8) of
			%% Line 1721
			<1> when 'true' ->
			    'false'
			%% Line 1722
			<CPUs> when 'true' ->
			    let <_cor4> =
				%% Line 1723
				call 'erlang':'div'
				    (Length, CPUs)
			    in  let <FullShare> =
				    %% Line 1723
				    call 'erlang':'+'
					(_cor4, 1)
				in  let <Unit> =
					%% Line 1724
					call 'erlang':'max'
					    (FullShare, 42)
				    in  %% Line 1725
					apply 'split'/3
					    (_cor0, Unit, [])
		      end
	      %% Line 1718
	      <> when 'true' ->
		  'false'
	    end
'minimize_state'/1 =
    %% Line 1729
    fun (_cor0) ->
	case _cor0 of
	  <{'state',_cor11,_cor12,%% Line 1730
				  {'d',CMap},%% Line 1731
					     FunMap,%% Line 1732
						    FunArities,_cor13,_cor14,_cor15,_cor16,_cor17,%% Line 1733
												  SelfRec,_cor18,%% Line 1734
														 {'d',PropTypes},_cor19,_cor20,_cor21,%% Line 1735
																		      Solvers}> when 'true' ->
	      let <ETSCMap> =
		  %% Line 1738
		  call 'ets':'new'
		      ('cmap', [{'read_concurrency','true'}])
	      in  let <ETSPropTypes> =
		      %% Line 1739
		      call 'ets':'new'
			  ('prop_types', [{'read_concurrency','true'}])
		  in  let <_cor4> =
			  %% Line 1740
			  call 'dict':'to_list'
			      (CMap)
		      in  %% Line 1740
			  case call 'ets':'insert'
				   (ETSCMap, _cor4) of
			    <'true'> when 'true' ->
				let <_cor6> =
				    %% Line 1741
				    call 'dict':'to_list'
					(PropTypes)
				in  %% Line 1741
				    case call 'ets':'insert'
					     (ETSPropTypes, _cor6) of
				      <'true'> when 'true' ->
					  let <_cor9> =
					      call 'dict':'new'
						  ()
					  in  let <_cor8> =
						  call 'dict':'new'
						      ()
					      in  %% Line 1742
						  {'state','undefined',[],%% Line 1743
									  {'e',ETSCMap},%% Line 1744
											FunMap,%% Line 1745
											       FunArities,'false','false','undefined',_cor9,0,%% Line 1746
																	      SelfRec,'undefined',%% Line 1747
																				  {'e',ETSPropTypes},_cor8,[],'undefined',%% Line 1748
																									  Solvers}
				      ( <_cor7> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor7})
					-| ['compiler_generated'] )
				    end
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10})
		  -| [{'function_name',{'minimize_state',1}}] )
	    -| ['compiler_generated'] )
	end
'dispose_state'/1 =
    %% Line 1751
    fun (_cor0) ->
	case _cor0 of
	  <{'state',_cor4,_cor5,{'e',ETSCMap},_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,%% Line 1752
													 {'e',ETSPropTypes},_cor15,_cor16,_cor17,_cor18}> when 'true' ->
	      %% Line 1753
	      case call 'ets':'delete'
		       (ETSCMap) of
		<'true'> when 'true' ->
		    let <_cor19> =
			%% Line 1754
			call 'ets':'delete'
			    (ETSPropTypes)
		    in  %% Line 1754
			case _cor19 of
			  <'true'> when 'true' ->
			      ( _cor19
				-| ['compiler_generated'] )
			  ( <_cor2> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor2})
			    -| ['compiler_generated'] )
			end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'dispose_state',1}}] )
	    -| ['compiler_generated'] )
	end
'solve_whole_scc_parallel'/3 =
    %% Line 1756
    fun (_cor2,_cor1,_cor0) ->
	let <Workers> =
	    %% Line 1757
	    apply 'spawn_workers'/3
		(_cor2, _cor1, _cor0)
	in  let <_cor4> =
		%% Line 1758
		apply 'fold_res_fun'/1
		    (_cor0)
	    in  %% Line 1758
		apply 'wait_results'/3
		    (Workers, _cor1, _cor4)
'spawn_workers'/3 =
    %% Line 1760
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1761
	    call 'erlang':'self'
		()
	in  let <Spawner> =
		%% Line 1761
		apply 'solve_scc_spawner'/3
		    (_cor3, _cor1, _cor0)
	    in  do  %% Line 1762
		    call 'lists':'foreach'
			(Spawner, _cor2)
		    %% Line 1763
		    call 'erlang':'length'
			(_cor2)
'wait_results'/3 =
    %% Line 1765
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <0,Map,_X_FoldResFun> when 'true' ->
	      %% Line 1766
	      Map
	  %% Line 1767
	  <Pending,Map,FoldResFun> when 'true' ->
	      let <Res> =
		  %% Line 1768
		  apply 'receive_scc_result'/0
		      ()
	      in  let <NewMap> =
		      %% Line 1769
		      call 'lists':'foldl'
			  (FoldResFun, Map, Res)
		  in  let <_cor5> =
			  %% Line 1770
			  call 'erlang':'-'
			      (Pending, 1)
		      in  %% Line 1770
			  apply 'wait_results'/3
			      (_cor5, NewMap, FoldResFun)
	end
'solve_scc_spawner'/3 =
    %% Line 1772
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1773
	( fun (_cor4) ->
	      let <_cor3> =
		  %% Line 1774
		  ( fun () ->
			apply 'solve_scc_worker'/4
			    (_cor2, _cor4, _cor1, _cor0)
		    -| [{'id',{0,0,'-solve_scc_spawner/3-fun-0-'}}] )
	      in  %% Line 1774
		  call 'erlang':'spawn_link'
		      (_cor3)
	  -| [{'id',{0,0,'-solve_scc_spawner/3-fun-1-'}}] )
'split'/3 =
    %% Line 1777
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_X_Unit,Acc> when 'true' ->
	      %% Line 1778
	      Acc
	  %% Line 1779
	  <List,Unit,Acc> when 'true' ->
	      let <_cor7> =
		  %% Line 1781
		  try
		      %% Line 1782
		      call 'lists':'split'
			  (Unit, List)
		  of <_cor3> ->
		      _cor3
		  catch <_cor6,_cor5,_cor4> ->
		      %% Line 1784
		      {List,[]}
	      in  %% Line 1780
		  case _cor7 of
		    <{Taken,Rest}> when 'true' ->
			%% Line 1786
			apply 'split'/3
			    (Rest, Unit, [Taken|Acc])
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor8})
		      -| ['compiler_generated'] )
		  end
	end
'solve_scc_worker'/4 =
    %% Line 1788
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <SolveFun> =
	    %% Line 1789
	    ( fun (_cor5,_cor4) ->
		  apply 'scc_fold_fun'/3
		      (_cor5, _cor4, _cor0)
	      -| [{'id',{0,0,'-solve_scc_worker/4-fun-0-'}}] )
	in  let <FinalMap> =
		%% Line 1790
		call 'lists':'foldl'
		    (SolveFun, _cor1, _cor2)
	    in  let <_cor16> =
		    %% Line 1792
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor12) ->
				  case _cor12 of
				    <[%% Line 1793
				      F|_cor11]> when 'true' ->
					let <_cor13> =
					    apply 'unsafe_lookup_type'/2
						(F, FinalMap)
					in  let <_cor14> =
						call 'erl_types':'t_limit'
						    (_cor13, 4)
					    in  let <_cor15> =
						    %% Line 1793
						    apply 'lc$^0'/1
							(_cor11)
						in  ( [{F,_cor14}|_cor15]
						      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor12> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor12})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lc$^0'/1
			      (_cor2)
		      -| ['list_comprehension'] )
		in  %% Line 1794
		    apply 'send_scc_result'/2
			(_cor3, _cor16)
'fold_res_fun'/1 =
    %% Line 1796
    fun (_cor0) ->
	%% Line 1797
	( fun (_cor4,_cor3) ->
	      case <_cor4,_cor3> of
		<{F,Type},Map> when 'true' ->
		    %% Line 1798
		    case apply 'state__get_rec_var'/2
			     (F, _cor0) of
		      %% Line 1799
		      <{'ok',R}> when 'true' ->
			  let <_cor1> =
			      %% Line 1800
			      apply 'enter_type'/3
				  (F, Type, Map)
			  in  %% Line 1800
			      apply 'enter_type'/3
				  (R, Type, _cor1)
		      %% Line 1801
		      <'error'> when 'true' ->
			  %% Line 1802
			  apply 'enter_type'/3
			      (F, Type, Map)
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor6,_cor5> when 'true' ->
		      ( primop 'match_fail'
			    ({'function_clause',_cor6,_cor5})
			-| [{'function_name',{'-fold_res_fun/1-fun-0-',2}}] )
		  -| ['compiler_generated'] )
	      end
	  -| [{'id',{0,0,'-fold_res_fun/1-fun-0-'}}] )
'receive_scc_result'/0 =
    %% Line 1806
    fun () ->
	%% Line 1807
	receive
	  %% Line 1808
	  <{'scc_fun',Res}> when 'true' ->
	      Res
	after 'infinity' ->
	  'true'
'send_scc_result'/2 =
    %% Line 1811
    fun (_cor1,_cor0) ->
	%% Line 1812
	call 'erlang':'!'
	    (_cor1, {'scc_fun',_cor0})
'scc_fold_fun'/3 =
    %% Line 1816
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1817
	    apply 'state__get_cs'/2
		(_cor2, _cor0)
	in  let <Deps> =
		%% Line 1817
		apply 'get_deps'/1
		    (_cor3)
	    in  let <Cs> =
		    %% Line 1818
		    apply 'mk_constraint_ref'/2
			(_cor2, Deps)
		in  let <Map> =
			%% Line 1820
			apply 'solve'/4
			    (_cor2, Cs, _cor1, _cor0)
		    in  let <NewType0> =
			    %% Line 1821
			    apply 'unsafe_lookup_type'/2
				(_cor2, Map)
			in  let <NewType> =
				%% Line 1822
				call 'erl_types':'t_limit'
				    (NewType0, 4)
			    in  %% Line 1823
				case apply 'state__get_rec_var'/2
					 (_cor2, _cor0) of
				  %% Line 1824
				  <{'ok',R}> when 'true' ->
				      let <_cor9> =
					  %% Line 1825
					  apply 'enter_type'/3
					      (_cor2, NewType, _cor1)
				      in  %% Line 1825
					  apply 'enter_type'/3
					      (R, NewType, _cor9)
				  %% Line 1826
				  <'error'> when 'true' ->
				      %% Line 1827
				      apply 'enter_type'/3
					  (_cor2, NewType, _cor1)
				  ( <_cor10> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor10})
				    -| ['compiler_generated'] )
				end
'solve'/4 =
    %% Line 1833
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1834
	( case _cor0 of
	    ( <( {'state',_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_rec3}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor13> =
		      %% Line 1835
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor9) ->
				    case _cor9 of
				      <[S|_cor8]> when 'true' ->
					  let <_cor10> =
					      apply 'solve_fun'/5
						  (S, _cor3, _cor2, _cor1, _cor0)
					  in  let <_cor11> =
						  apply 'solver'/2
						      (S, _cor10)
					      in  let <_cor12> =
						      apply 'lc$^0'/1
							  (_cor8)
						  in  ( [_cor11|_cor12]
							-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor9> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor9})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(_rec3)
			-| ['list_comprehension'] )
		  in  %% Line 1836
		      apply 'check_solutions'/4
			  (_cor13, _cor3, 'no_solver', 'no_map')
	      -| ['compiler_generated'] )
	    ( <_cor35> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'solver'/2 =
    %% Line 1838
    fun (_cor1,_cor0) ->
	%% Line 1840
	try
	    call 'timer':'tc'
		(_cor0)
	of <_cor2> ->
	    case _cor2 of
	      %% Line 1841
	      <{Time,{'ok',Map}}> when 'true' ->
		  %% Line 1843
		  {_cor1,Map,Time}
	      %% Line 1844
	      <{_cor10,_X_R}> when 'true' ->
		  %% Line 1847
		  call 'erlang':'throw'
		      ('error')
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'try_clause',_cor3})
		-| ['compiler_generated'] )
	    end
	catch <_cor6,_cor5,_cor4> ->
	    let <_cor7> =
		%% Line 1850
		call 'erlang':'get_stacktrace'
		    ()
	    in  do  %% Line 1849
		    call 'io':'format'
			([83|[111|[108|[118|[101|[114|[32|[126|[119|[32|[102|[97|[105|[108|[101|[100|[58|[32|[126|[119|[58|[126|[112|[10|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1850
																							[_cor1|[_cor6|[_cor5|[_cor7|[]]]]])
		    %% Line 1851
		    call 'erlang':'throw'
			('error')
'solve_fun'/5 =
    %% Line 1854
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <'v1',_X_Fun,Cs,FunMap,State> when 'true' ->
	      %% Line 1855
	      ( fun () ->
		    let <_cor5> =
			%% Line 1856
			call 'dict':'new'
			    ()
		    in  %% Line 1856
			case apply 'solve_ref_or_list'/4
				 (Cs, FunMap, _cor5, State) of
			  <{'ok',_X_MapDict,NewMap}> when 'true' ->
			      %% Line 1857
			      {'ok',NewMap}
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		-| [{'id',{0,0,'-solve_fun/5-fun-0-'}}] )
	  %% Line 1859
	  <'v2',Fun,_X_Cs,FunMap,State> when 'true' ->
	      %% Line 1860
	      ( fun () ->
		    apply 'v2_solve_ref'/3
			(Fun, FunMap, State)
		-| [{'id',{0,0,'-solve_fun/5-fun-1-'}}] )
	  ( <_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'solve_fun',5}}] )
	    -| ['compiler_generated'] )
	end
'check_solutions'/4 =
    %% Line 1862
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_Fun,_X_S,Map> when 'true' ->
	      %% Line 1863
	      Map
	  %% Line 1864
	  <[{S1,Map1,_X_Time1}|Maps],Fun,S,Map> when 'true' ->
	      let <_cor6> =
		  %% Line 1866
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Map,
				   'no_map') ->
			    'true'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    apply 'sane_maps'/5
				(Map, Map1, [Fun|[]], S, S1)
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      in  %% Line 1866
		  case _cor6 of
		    %% Line 1867
		    <'true'> when 'true' ->
			%% Line 1868
			apply 'check_solutions'/4
			    (Maps, Fun, S1, Map1)
		    %% Line 1869
		    <'false'> when 'true' ->
			let <_cor7> =
			    %% Line 1871
			    call 'erlang':'atom_to_list'
				(S)
			in  do  %% Line 1871
				apply 'pp_map'/2
				    (_cor7, Map)
				let <_cor8> =
				    %% Line 1872
				    call 'erlang':'atom_to_list'
					(S1)
				in  do  %% Line 1872
					apply 'pp_map'/2
					    (_cor8, Map1)
					do  %% Line 1873
					    call 'io':'format'
						([65|[32|[98|[117|[103|[32|[119|[97|[115|[32|[102|[111|[117|[110|[100|[46|[32|[80|[108|[101|[97|[115|[101|[32|[114|[101|[112|[111|[114|[116|[32|[105|[116|[44|[32|[97|[110|[100|[32|[117|[115|[101|[32|[116|[104|[101|[32|[111|[112|[116|[105|[111|[110|[32|[96|[45|[45|[115|[111|[108|[118|[101|[114|[32|[118|[49|[39|[32|[117|[110|[116|[105|[108|[32|[116|[104|[101|[32|[98|[117|[103|[32|[104|[97|[115|[32|[98|[101|[101|[110|[32|[102|[105|[120|[101|[100|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
					    %% Line 1875
					    call 'erlang':'throw'
						('error')
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor9})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'check_solutions',4}}] )
	    -| ['compiler_generated'] )
	end
'sane_maps'/5 =
    %% Line 1878
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 1879
	    ( fun (_cor8) ->
		  let <V1> =
		      %% Line 1880
		      apply 'unsafe_lookup_type'/2
			  (_cor8, _cor4)
		  in  let <V2> =
			  %% Line 1881
			  apply 'unsafe_lookup_type'/2
			      (_cor8, _cor3)
		      in  %% Line 1882
			  case call 'erl_types':'t_is_equal'
				   (V1, V2) of
			    %% Line 1883
			    <'true'> when 'true' ->
				'true'
			    %% Line 1884
			    <'false'> when 'true' ->
				%% Line 1890
				'false'
			    ( <_cor7> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor7})
			      -| ['compiler_generated'] )
			  end
	      -| [{'id',{0,0,'-sane_maps/5-fun-0-'}}] )
	in  %% Line 1879
	    call 'lists':'all'
		(_cor10, _cor2)
'v2_solve_ref'/3 =
    %% Line 1899
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    call 'dict':'new'
		()
	in  let <V2State> = {%% Line 1900
		 'v2_state',_cor3,_cor0}
	    in  %% Line 1901
		case apply 'v2_solve_reference'/3
			 (_cor2, _cor1, V2State) of
		  <{'ok',NewMap,_cor9,_cor10}> when 'true' ->
		      %% Line 1902
		      {'ok',NewMap}
		  ( <_cor5> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor5})
		    -| ['compiler_generated'] )
		end
'v2_solve'/3 =
    %% Line 1904
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <C = {'constraint',_cor7,_cor8,_cor9,_cor10},Map,V2State> when 'true' ->
	      %% Line 1905
	      case apply 'solve_one_c'/2
		       (C, Map) of
		%% Line 1906
		<'error'> when 'true' ->
		    do  %% Line 1907
			apply 'report_failed_constraint'/2
			    (C, Map)
			%% Line 1908
			{'error',V2State}
		%% Line 1909
		<{'ok',{NewMap,U}}> when 'true' ->
		    %% Line 1910
		    {'ok',NewMap,V2State,U}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1912
	  <C = {'constraint_list','disj',_cor11,_cor12,_cor13,_cor14},Map,V2State> when 'true' ->
	      %% Line 1913
	      apply 'v2_solve_disjunct'/3
		  (C, Map, V2State)
	  %% Line 1914
	  <C = {'constraint_list','conj',_cor15,_cor16,_cor17,_cor18},Map,V2State> when 'true' ->
	      %% Line 1915
	      apply 'v2_solve_conjunct'/3
		  (C, Map, V2State)
	  %% Line 1916
	  <{'constraint_ref',Id,_cor19},Map,V2State> when 'true' ->
	      %% Line 1917
	      apply 'v2_solve_reference'/3
		  (Id, Map, V2State)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'v2_solve',3}}] )
	    -| ['compiler_generated'] )
	end
'v2_solve_reference'/3 =
    %% Line 1919
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 1921
	    apply 'pp_map'/2
		([77|[97|[112]]], _cor1)
	    do  %% Line 1922
		apply 'pp_constr_data'/2
		    ([115|[111|[108|[118|[101|[95|[114|[101|[102]]]]]]]]], _cor0)
		let <Map1> =
		    %% Line 1923
		    apply 'restore_local_map'/3
			(_cor0, _cor2, _cor1)
		in  %% Line 1924
		    ( case _cor0 of
			( <( {'v2_state',_cor32,_rec4}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <Cs> =
				  %% Line 1925
				  apply 'state__get_cs'/2
				      (_cor2, _rec4)
			      in  let <_cor10> =
				      %% Line 1927
				      case apply 'state__is_self_rec'/2
					       (_cor2, _rec4) of
					%% Line 1928
					<'true'> when 'true' ->
					    let <_cor8> =
						call 'erl_types':'t_none'
						    ()
					    in  apply 'v2_solve_self_recursive'/5
						    (Cs, Map1, _cor2, _cor8, _cor0)
					%% Line 1929
					<'false'> when 'true' ->
					    apply 'v2_solve'/3
						(Cs, Map1, _cor0)
					( <_cor9> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor9})
					  -| ['compiler_generated'] )
				      end
				  in  let <FunType,V2State> =
					  %% Line 1932
					  case _cor10 of
					    %% Line 1933
					    <{'error',V2State1}> when 'true' ->
						let <Arity> =
						    %% Line 1935
						    apply 'state__fun_arity'/2
							(_cor2, _rec4)
						in  let <_cor13> =
							%% Line 1937
							call 'erl_types':'t_var_name'
							    (_cor2)
						    in  let <_cor17> =
							    %% Line 1937
							    case apply 'state__prop_domain'/2
								     (_cor13, _rec4) of
							      %% Line 1938
							      <'error'> when 'true' ->
								  let <_cor14> =
								      call 'erl_types':'t_none'
									  ()
								  in  call 'erl_types':'t_fun'
									  (Arity, _cor14)
							      %% Line 1939
							      <{'ok',Dom}> when 'true' ->
								  let <_cor15> =
								      call 'erl_types':'t_none'
									  ()
								  in  call 'erl_types':'t_fun'
									  (Dom, _cor15)
							      ( <_cor16> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_cor16})
								-| ['compiler_generated'] )
							    end
							in  <_cor17,%% Line 1941
								    V2State1>
					    %% Line 1942
					    <{'ok',NewMap,V2State1,U}> when 'true' ->
						let <FunType0> =
						    %% Line 1944
						    apply 'lookup_type'/2
							(_cor2, NewMap)
						in  let <V2State2> =
							%% Line 1945
							apply 'save_local_map'/4
							    (V2State1, _cor2, U, NewMap)
						    in  %% Line 1946
							<FunType0,V2State2>
					    ( <_cor21> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor21})
					      -| ['compiler_generated'] )
					  end
				      in  %% Line 1949
					  case apply 'enter_var_type'/3
						   (_cor2, FunType, _cor1) of
					    <{NewMap1,U1}> when 'true' ->
						let <_cor26> =
						    %% Line 1951
						    case apply 'state__get_rec_var'/2
							     (_cor2, _rec4) of
						      %% Line 1952
						      <{'ok',Var}> when 'true' ->
							  apply 'enter_var_type'/3
							      (Var, FunType, NewMap1)
						      %% Line 1953
						      <'error'> when 'true' ->
							  {NewMap1,[]}
						      ( <_cor25> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_cor25})
							-| ['compiler_generated'] )
						    end
						in  %% Line 1950
						    case _cor26 of
						      <{NewMap2,U2}> when 'true' ->
							  let <_cor28> =
							      %% Line 1955
							      call 'lists':'umerge'
								  (U1, U2)
							  in  %% Line 1955
							      {'ok',NewMap2,V2State,_cor28}
						      ( <_cor27> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor27})
							-| ['compiler_generated'] )
						    end
					    ( <_cor24> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor24})
					      -| ['compiler_generated'] )
					  end
			  -| ['compiler_generated'] )
			( <_cor33> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','v2_state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
'v2_solve_self_recursive'/5 =
    %% Line 1957
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1959
	( case _cor0 of
	    ( <( {'v2_state',_cor28,_rec5}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 1960
		  case apply 'state__get_rec_var'/2
			   (_cor2, _rec5) of
		    <{'ok',RecVar}> when 'true' ->
			let <RecType> =
			    %% Line 1962
			    call 'erl_types':'t_limit'
				(_cor1, 4)
			in  %% Line 1963
			    case apply 'enter_var_type'/3
				     (RecVar, RecType, _cor3) of
			      <{Map1,U0}> when 'true' ->
				  let <V2State1> =
				      %% Line 1964
				      apply 'save_updated_vars1'/3
					  (_cor0, _cor4, U0)
				  in  %% Line 1965
				      case apply 'v2_solve'/3
					       (_cor4, Map1, V2State1) of
					%% Line 1966
					<Error = {'error',_X_V2State}> when 'true' ->
					    %% Line 1967
					    case call 'erl_types':'t_is_none'
						     (_cor1) of
					      %% Line 1968
					      <'true'> when 'true' ->
						  let <Arity> =
						      %% Line 1970
						      apply 'state__fun_arity'/2
							  (_cor2, _rec5)
						  in  let <_cor14> =
							  %% Line 1971
							  call 'erl_types':'t_any'
							      ()
						      in  let <_cor15> =
							      %% Line 1971
							      call 'lists':'duplicate'
								  (Arity, _cor14)
							  in  let <_cor13> =
								  %% Line 1971
								  call 'erl_types':'t_unit'
								      ()
							      in  let <NewRecType> =
								      %% Line 1971
								      call 'erl_types':'t_fun'
									  (_cor15, _cor13)
								  in  %% Line 1972
								      apply 'v2_solve_self_recursive'/5
									  (_cor4, _cor3, _cor2, NewRecType, _cor0)
					      %% Line 1973
					      <'false'> when 'true' ->
						  %% Line 1974
						  Error
					      ( <_cor17> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor17})
						-| ['compiler_generated'] )
					    end
					%% Line 1976
					<{'ok',NewMap,V2State,U}> when 'true' ->
					    do  %% Line 1977
						apply 'pp_map'/2
						    ([114|[101|[99|[117|[114|[115|[105|[118|[101|[32|[102|[105|[110|[105|[115|[104|[101|[100]]]]]]]]]]]]]]]]]], NewMap)
						let <NewRecType> =
						    %% Line 1978
						    apply 'unsafe_lookup_type'/2
							(_cor2, NewMap)
						in  %% Line 1979
						    case apply 'is_equal'/2
							     (NewRecType, _cor1) of
						      %% Line 1980
						      <'true'> when 'true' ->
							  %% Line 1981
							  case apply 'enter_var_type'/3
								   (RecVar, NewRecType, NewMap) of
							    <{NewMap2,U1}> when 'true' ->
								let <_cor20> =
								    %% Line 1982
								    call 'lists':'umerge'
									(U, U1)
								in  %% Line 1982
								    {'ok',NewMap2,V2State,_cor20}
							    ( <_cor19> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_cor19})
							      -| ['compiler_generated'] )
							  end
						      %% Line 1983
						      <'false'> when 'true' ->
							  %% Line 1984
							  apply 'v2_solve_self_recursive'/5
							      (_cor4, _cor3, _cor2, NewRecType, _cor0)
						      ( <_cor21> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_cor21})
							-| ['compiler_generated'] )
						    end
					( <_cor22> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor22})
					  -| ['compiler_generated'] )
				      end
			      ( <_cor10> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor10})
				-| ['compiler_generated'] )
			    end
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor8})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor29> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','v2_state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'enter_var_type'/3 =
    %% Line 1988
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1989
	case apply 'enter_type2'/3
		 (_cor2, _cor1, _cor0) of
	  <{Map,Vs}> when 'true' ->
	      let <_cor9> =
		  %% Line 1990
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor6) ->
				case _cor6 of
				  <[V|_cor5]> when 'true' ->
				      let <_cor7> =
					  call 'erl_types':'t_var_name'
					      (V)
				      in  let <_cor8> =
					      apply 'lc$^0'/1
						  (_cor5)
					  in  ( [_cor7|_cor8]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor6> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor6})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Vs)
		    -| ['list_comprehension'] )
	      in  %% Line 1990
		  {Map,_cor9}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'v2_solve_disjunct'/3 =
    %% Line 1992
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1993
	case _cor2 of
	  <{'constraint_list','disj',Cs,_cor33,Masks,_X_Id}> when 'true' ->
	      do  %% Line 1995
		  apply 'pp_map'/2
		      ([77|[97|[112]]], _cor1)
		  do  %% Line 1996
		      apply 'pp_constr_data'/2
			  ([100|[105|[115|[106|[117|[110|[99|[116]]]]]]]], _cor0)
		      %% Line 1997
		      case apply 'get_flags'/2
			       (_cor0, _cor2) of
			%% Line 1998
			<{V2State1,'failed_list'}> when 'true' ->
			    {'error',V2State1}
			%% Line 1999
			<{V2State1,Flags}>
			    when call 'erlang':'=/='
				  (Flags,
				   []) ->
			    %% Line 2000
			    case %% Line 2001
				 apply 'v2_solve_disj'/10
				     (Flags, Cs, 1, _cor1, V2State1, [], [], [], [], 'false') of
			      <{'ok',V2State,Eval,UL,MapL0,Uneval,Failed}> when 'true' ->
				  %% Line 2004
				  case <> of
				    <>
					when let <_cor5> =
					      call 'erlang':'=:='
						  (Eval, [])
					  in  let <_cor6> =
						  call 'erlang':'=:='
						      (Uneval, [])
					      in  call 'erlang':'and'
						      (_cor5, _cor6) ->
					let <_cor7> =
					    %% Line 2005
					    apply 'failed_list'/2
						(_cor2, _cor0)
					in  %% Line 2005
					    {'error',_cor7}
				    %% Line 2006
				    <> when 'true' ->
					%% Line 2007
					case call 'lists':'unzip'
						 (Uneval) of
					  <{Is0,UnIds}> when 'true' ->
					      let <_cor14> =
						  %% Line 2008
						  ( letrec
							'lc$^0'/1 =
							    fun (_cor11) ->
								case _cor11 of
								  <[%% Line 2009
								    Id|_cor10]> when 'true' ->
								      let <_cor12> =
									  apply 'restore_local_map'/3
									      (V2State, Id, _cor1)
								      in  let <_cor13> =
									      %% Line 2009
									      apply 'lc$^0'/1
										  (_cor10)
									  in  ( [_cor12|_cor13]
										-| ['compiler_generated'] )
								  <[]> when 'true' ->
								      %% Line 2009
								      MapL0
								  ( <_cor11> when 'true' ->
									( primop 'match_fail'
									      ({'function_clause',_cor11})
									  -| [{'function_name',{'lc$^0',1}}] )
								    -| ['compiler_generated'] )
								end
						    in  apply 'lc$^0'/1
							    (%% Line 2009
							     UnIds)
						    -| ['list_comprehension'] )
					      in  let <_cor17> =
						      %% Line 2013
						      case Failed of
							%% Line 2014
							<'false'> when 'true' ->
							    call 'lists':'umerge'
								(UL)
							%% Line 2015
							<'true'> when 'true' ->
							    apply 'constrained_keys'/1
								(_cor14)
							( <_cor16> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_cor16})
							  -| ['compiler_generated'] )
						      end
						  in  %% Line 2017
						      case <> of
							<>
							    when call 'erlang':'=:='
								  (_cor17,
								   []) ->
							    {'ok',_cor1,V2State,[]}
							%% Line 2018
							<> when 'true' ->
							    let <NotFailed> =
								%% Line 2019
								call 'lists':'umerge'
								    (Is0, Eval)
							    in  let <_cor25> =
								    %% Line 2020
								    ( letrec
									  'lc$^1'/1 =
									      fun (_cor22) ->
										  case _cor22 of
										    <[V|_cor21]> when 'true' ->
											%% Line 2021
											( case apply 'var_occurs_everywhere'/3
												   (V, Masks, NotFailed) of
											    <'true'> when 'true' ->
												let <_cor23> =
												    apply 'lc$^1'/1
													(_cor21)
												in  ( [V|_cor23]
												      -| ['compiler_generated'] )
											    ( <'false'> when 'true' ->
												  apply 'lc$^1'/1
												      (_cor21)
											      -| ['compiler_generated'] )
											    ( <_cor24> when 'true' ->
												  primop 'match_fail'
												      ({'case_clause',_cor24})
											      -| ['compiler_generated'] )
											  end
											  -| ['list_comprehension'] )
										    <[]> when 'true' ->
											[]
										    ( <_cor22> when 'true' ->
											  ( primop 'match_fail'
												({'function_clause',_cor22})
											    -| [{'function_name',{'lc$^1',1}}] )
										      -| ['compiler_generated'] )
										  end
								      in  apply 'lc$^1'/1
									      (_cor17)
								      -| ['list_comprehension'] )
								in  let <NewMap> =
									%% Line 2022
									apply 'join_maps'/3
									    (_cor25, _cor14, _cor1)
								    in  do  %% Line 2023
									    apply 'pp_map'/2
										([78|[101|[119|[77|[97|[112]]]]]], NewMap)
									    let <U> =
										%% Line 2024
										apply 'updated_vars_only'/3
										    (_cor25, _cor1, NewMap)
									    in  %% Line 2026
										{'ok',NewMap,V2State,U}
						      end
					  ( <_cor8> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor8})
					    -| ['compiler_generated'] )
					end
				  end
			      ( <_cor4> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor4})
				-| ['compiler_generated'] )
			    end
			( <_cor29> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor29})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'var_occurs_everywhere'/3 =
    %% Line 2031
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 2032
	    apply 'get_mask'/2
		(_cor2, _cor1)
	in  %% Line 2032
	    call 'ordsets':'is_subset'
		(_cor0, _cor3)
'v2_solve_disj'/10 =
    %% Line 2034
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[I|Is],[C|Cs],_cor42,Map0,V2State0,UL,MapL,Eval,Uneval,%% Line 2035
								  Failed0>
	      when call 'erlang':'=:='
		    (_cor42,
		     I) ->
	      %% Line 2036
	      ( case C of
		  ( <( {'constraint_list',_cor43,_cor44,_cor45,_cor46,_rec6}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Map1> =
			    %% Line 2037
			    apply 'restore_local_map'/3
				(V2State0, _rec6, Map0)
			in  %% Line 2038
			    case apply 'v2_solve'/3
				     (C, Map1, V2State0) of
			      %% Line 2039
			      <{'error',V2State}> when 'true' ->
				  let <_cor17> =
				      %% Line 2041
				      ( case Failed0 of
					  ( <( 'true'
					       -| ['compiler_generated'] )> when 'true' ->
						'true'
					    -| ['compiler_generated'] )
					  ( <( 'false'
					       -| ['compiler_generated'] )> when 'true' ->
						let <_cor15> =
						    apply 'is_failed_list'/2
							(C, V2State0)
						in  call 'erlang':'not'
							(_cor15)
					    -| ['compiler_generated'] )
					  ( <_cor14> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {( 'badarg'
							    -| ['compiler_generated'] ),_cor14}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  in  let <_cor19> =
					  %% Line 2042
					  call 'erlang':'+'
					      (I, 1)
				      in  %% Line 2042
					  apply 'v2_solve_disj'/10
					      (Is, Cs, _cor19, Map0, V2State, UL, MapL, Eval, Uneval, _cor17)
			      %% Line 2043
			      <{'ok',Map,V2State1,U}> when 'true' ->
				  let <V2State> =
				      %% Line 2045
				      apply 'save_local_map'/4
					  (V2State1, _rec6, U, Map)
				  in  do  %% Line 2046
					  apply 'pp_map'/2
					      ([68|[77|[97|[112]]]], Map)
					  let <_cor21> =
					      %% Line 2047
					      call 'erlang':'+'
						  (I, 1)
					  in  %% Line 2047
					      apply 'v2_solve_disj'/10
						  (Is, Cs, _cor21, Map0, V2State, [U|UL], [Map|MapL], %% Line 2048
												      [I|Eval], %% Line 2048
														Uneval, %% Line 2048
															Failed0)
			      ( <_cor22> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor22})
				-| ['compiler_generated'] )
			    end
		    -| ['compiler_generated'] )
		  ( <_cor47> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','constraint_list'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 2050
	  <[],[],_X_I,_X_Map,V2State,UL,MapL,Eval,Uneval,Failed> when 'true' ->
	      let <_cor24> =
		  %% Line 2051
		  call 'lists':'reverse'
		      (Eval)
	      in  let <_cor23> =
		      %% Line 2051
		      call 'lists':'reverse'
			  (Uneval)
		  in  %% Line 2051
		      {'ok',V2State,_cor24,UL,MapL,_cor23,Failed}
	  %% Line 2052
	  <Is,[C|Cs],I,Map,V2State,UL,MapL,Eval,Uneval0,Failed> when 'true' ->
	      let <_cor25> =
		  %% Line 2054
		  apply 'is_failed_list'/2
		      (C, V2State)
	      in  let <_cor29> =
		      %% Line 2054
		      ( case _cor25 of
			  <'false'> when 'true' ->
			      ( case C of
				  ( <( {'constraint_list',_cor48,_cor49,_cor50,_cor51,_rec7}
				       -| ['compiler_generated'] )> when 'true' ->
					( [{I,_rec7}|Uneval0]
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <_cor52> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','constraint_list'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  ( <'true'> when 'true' ->
				Uneval0
			    -| ['compiler_generated'] )
			  ( <_cor_variable> when 'true' ->
				call 'erlang':'error'
				    ('badarg')
			    -| ['compiler_generated'] )
			end
			-| ['list_comprehension'] )
		  in  let <_cor31> =
			  %% Line 2055
			  call 'erlang':'+'
			      (I, 1)
		      in  %% Line 2055
			  apply 'v2_solve_disj'/10
			      (Is, Cs, _cor31, Map, V2State, UL, MapL, Eval, _cor29, Failed)
	  ( <_cor41,_cor40,_cor39,_cor38,_cor37,_cor36,_cor35,_cor34,_cor33,_cor32> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor41,_cor40,_cor39,_cor38,_cor37,_cor36,_cor35,_cor34,_cor33,_cor32})
		  -| [{'function_name',{'v2_solve_disj',10}}] )
	    -| ['compiler_generated'] )
	end
'save_local_map'/4 =
    %% Line 2057
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <V2State = {'v2_state',ConData,_cor26},Id,U,Map> when 'true' ->
	      let <_cor9> =
		  %% Line 2058
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor6) ->
				case _cor6 of
				  <[V|_cor5]> when 'true' ->
				      let <_cor7> =
					  call 'dict':'fetch'
					      (V, Map)
				      in  let <_cor8> =
					      apply 'lc$^0'/1
						  (_cor5)
					  in  ( [{V,_cor7}|_cor8]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor6> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor6})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (U)
		    -| ['list_comprehension'] )
	      in  let <_cor12> =
		      %% Line 2060
		      case call 'dict':'find'
			       (Id, ConData) of
			%% Line 2061
			<'error'> when 'true' ->
			    []
			%% Line 2062
			<{'ok',{Part2,[]}}> when 'true' ->
			    Part2
			( <_cor11> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor11})
			  -| ['compiler_generated'] )
		      end
		  in  let <_cor14> =
			  %% Line 2065
			  call 'lists':'keysort'
			      (1, _cor9)
		      in  let <Part> =
			      %% Line 2065
			      call 'lists':'ukeymerge'
				  (1, _cor14, _cor12)
			  in  let <_cor16> =
				  %% Line 2066
				  call 'dict':'from_list'
				      (_cor9)
			      in  do  %% Line 2066
				      apply 'pp_map'/2
					  ([78|[101|[119|[32|[80|[97|[114|[116]]]]]]]], _cor16)
				      let <_cor17> =
					  %% Line 2067
					  call 'dict':'from_list'
					      (_cor12)
				      in  do  %% Line 2067
					      apply 'pp_map'/2
						  ([79|[108|[100|[32|[80|[97|[114|[116]]]]]]]], _cor17)
					      let <_cor18> =
						  %% Line 2068
						  call 'dict':'from_list'
						      (Part)
					      in  do  %% Line 2068
						      apply 'pp_map'/2
							  ([32|[61|[62|[32|[80|[97|[114|[116]]]]]]]], _cor18)
						      let <_rec8> =
							  %% Line 2069
							  call 'dict':'store'
							      (Id, {Part,[]}, ConData)
						      in  %% Line 2069
							  call 'erlang':'setelement'
							      (2, V2State, _rec8)
	  ( <_cor25,_cor24,_cor23,_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23,_cor22})
		  -| [{'function_name',{'save_local_map',4}}] )
	    -| ['compiler_generated'] )
	end
'restore_local_map'/3 =
    %% Line 2071
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'v2_state',ConData,_cor22},Id,Map0> when 'true' ->
	      %% Line 2072
	      case call 'dict':'find'
		       (Id, ConData) of
		%% Line 2073
		<'error'> when 'true' ->
		    Map0
		%% Line 2074
		<{'ok','failed'}> when 'true' ->
		    Map0
		%% Line 2075
		<{'ok',{[],_cor23}}> when 'true' ->
		    Map0
		%% Line 2076
		<{'ok',{Part0,U}}> when 'true' ->
		    let <_cor9> =
			%% Line 2077
			( letrec
			      'lc$^0'/1 =
				  fun (_cor6) ->
				      case _cor6 of
					<[KV = {K,_X_V}|_cor4]> when 'true' ->
					    ( case call 'lists':'member'
						       (K, U) of
						<'false'> when 'true' ->
						    let <_cor7> =
							apply 'lc$^0'/1
							    (_cor4)
						    in  ( [KV|_cor7]
							  -| ['compiler_generated'] )
						( <'true'> when 'true' ->
						      apply 'lc$^0'/1
							  (_cor4)
						  -| ['compiler_generated'] )
						( <_cor_variable> when 'true' ->
						      call 'erlang':'error'
							  ('badarg')
						  -| ['compiler_generated'] )
					      end
					      -| ['list_comprehension'] )
					( <[_cor3|_cor4]> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor4)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor6> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor6})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (Part0)
			  -| ['list_comprehension'] )
		    in  let <_cor11> =
			    %% Line 2079
			    call 'dict':'from_list'
				(_cor9)
			in  do  %% Line 2079
				apply 'pp_map'/2
				    ([80|[97|[114|[116]]]], _cor11)
				do  %% Line 2080
				    apply 'pp_map'/2
					([77|[97|[112|[48]]]], Map0)
				    let <_cor16> =
					%% Line 2081
					( fun (_cor13,_cor12) ->
					      case <_cor13,_cor12> of
						<{K,V},D> when 'true' ->
						    call 'dict':'store'
							(K, V, D)
						( <_cor15,_cor14> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor15,_cor14})
							-| [{'function_name',{'-restore_local_map/3-fun-0-',2}}] )
						  -| ['compiler_generated'] )
					      end
					  -| [{'id',{0,0,'-restore_local_map/3-fun-0-'}}] )
				    in  let <Map> =
					    %% Line 2081
					    call 'lists':'foldl'
						(_cor16, Map0, _cor9)
					in  do  %% Line 2082
						apply 'pp_map'/2
						    ([77|[97|[112]]], Map)
						%% Line 2083
						Map
		( <_cor18> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor18})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19})
		  -| [{'function_name',{'restore_local_map',3}}] )
	    -| ['compiler_generated'] )
	end
'v2_solve_conjunct'/3 =
    %% Line 2086
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2087
	case _cor2 of
	  <{'constraint_list','conj',Cs,_cor11,_cor12,_cor13}> when 'true' ->
	      let <_cor5> =
		  %% Line 2089
		  case Cs of
		    <[{'constraint',_cor14,_cor15,_cor16,_cor17}|_cor18]> when 'true' ->
			'true'
		    <_cor19> when 'true' ->
			'false'
		  end
	      in  %% Line 2090
		  case apply 'get_flags'/2
			   (_cor0, _cor2) of
		    %% Line 2091
		    <{V2State,'failed_list'}> when 'true' ->
			{'error',V2State}
		    %% Line 2092
		    <{V2State,Flags}> when 'true' ->
			%% Line 2093
			apply 'v2_solve_conj'/12
			    (Flags, Cs, 1, _cor1, _cor2, _cor5, V2State, [], [], [], _cor1, %% Line 2094
											    Flags)
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'v2_solve_conj'/12 =
    %% Line 2098
    fun (_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[I|Is],[Cs|Tail],_cor61,Map0,Conj,IsFlat,V2State0,%% Line 2099
							     UL,%% Line 2099
								NewFs0,%% Line 2099
								       VarsUp,%% Line 2099
									      LastMap,%% Line 2099
										      LastFlags>
	      when call 'erlang':'=:='
		    (_cor61,
		     I) ->
	      let <_cor13> =
		  %% Line 2101
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'is_record'
							 -| ['compiler_generated'] )
			(Cs, 'constraint', 5)
		    -| ['compiler_generated'] )
	      in  %% Line 2101
		  case call 'erlang':'=:='
			   (IsFlat, _cor13) of
		    <'true'> when 'true' ->
			do  %% Line 2102
			    apply 'pp_constr_data'/2
				([99|[111|[110|[106]]]], V2State0)
			    %% Line 2103
			    case apply 'v2_solve'/3
				     (Cs, Map0, V2State0) of
			      %% Line 2104
			      <{'error',V2State1}> when 'true' ->
				  let <_cor15> =
				      apply 'failed_list'/2
					  (Conj, V2State1)
				  in  {'error',_cor15}
			      %% Line 2105
			      <{'ok',Map,V2State1,[]}> when 'true' ->
				  let <_cor16> =
				      %% Line 2106
				      call 'erlang':'+'
					  (I, 1)
				  in  %% Line 2106
				      apply 'v2_solve_conj'/12
					  (Is, Tail, _cor16, Map, Conj, IsFlat, V2State1, %% Line 2107
											  UL, %% Line 2107
											      NewFs0, %% Line 2107
												      VarsUp, %% Line 2107
													      LastMap, %% Line 2107
														       LastFlags)
			      %% Line 2108
			      <{'ok',Map,V2State1,U}>
				  when call 'erlang':'=:='
					(IsFlat,
					 'true') ->
				  let <_cor24> =
				      %% Line 2113
				      ( letrec
					    'lc$^0'/1 =
						fun (_cor19) ->
						    case _cor19 of
						      <[V|_cor18]> when 'true' ->
							  ( case Conj of
							      ( <( {'constraint_list',_cor62,_cor63,_cor64,_rec11,_cor65}
								   -| ['compiler_generated'] )> when 'true' ->
								    let <_cor22> =
									apply 'get_mask'/2
									    (V, _rec11)
								    in  let <_cor23> =
									    apply 'lc$^0'/1
										(_cor18)
									in  ( [_cor22|_cor23]
									      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							      ( <_cor66> when 'true' ->
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'error'
													   -| ['compiler_generated'] )
									  (( {'badrecord','constraint_list'}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
						      <[]> when 'true' ->
							  []
						      ( <_cor19> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor19})
							      -| [{'function_name',{'lc$^0',1}}] )
							-| ['compiler_generated'] )
						    end
					in  apply 'lc$^0'/1
						(U)
					-| ['list_comprehension'] )
				  in  let <Mask> =
					  %% Line 2113
					  call 'lists':'umerge'
					      (_cor24)
				      in  %% Line 2114
					  case apply 'add_mask_to_flags'/4
						   (Is, Mask, I, []) of
					    <{Is1,NewF}> when 'true' ->
						let <NewFs> =
						    %% Line 2115
						    [NewF|NewFs0]
						in  let <_cor28> =
							%% Line 2116
							call 'erlang':'+'
							    (I, 1)
						    in  %% Line 2116
							apply 'v2_solve_conj'/12
							    (Is1, Tail, _cor28, Map, Conj, IsFlat, V2State1, %% Line 2117
													     [U|UL], %% Line 2117
														     NewFs, %% Line 2117
															    VarsUp, %% Line 2117
																    LastMap, %% Line 2117
																	     LastFlags)
					    ( <_cor26> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor26})
					      -| ['compiler_generated'] )
					  end
			      %% Line 2118
			      <{'ok',Map,V2State1,U}> when 'true' ->
				  %% Line 2119
				  case Conj of
				    <{'constraint_list',_cor67,AllCs,_cor68,Masks,_cor69}> when 'true' ->
					let <_cor30> =
					    %% Line 2120
					    apply 'vars_per_child'/2
						(U, Masks)
					in  let <M> =
						%% Line 2120
						call 'lists':'keydelete'
						    (I, 1, _cor30)
					    in  %% Line 2121
						case apply 'save_updated_vars_list'/3
							 (AllCs, M, V2State1) of
						  <{V2State2,NewF0}> when 'true' ->
						      let <_cor35> =
							  %% Line 2122
							  ( fun (_cor33) ->
								call 'erlang':'<'
								    (_cor33, I)
							    -| [{'id',{0,0,'-v2_solve_conj/12-fun-0-'}}] )
						      in  %% Line 2122
							  case call 'lists':'splitwith'
								   (_cor35, NewF0) of
							    <{NewF,F}> when 'true' ->
								let <Is1> =
								    %% Line 2123
								    call 'lists':'umerge'
									(Is, F)
								in  let <NewFs> =
									%% Line 2124
									[NewF|NewFs0]
								    in  let <_cor39> =
									    %% Line 2125
									    call 'erlang':'+'
										(I, 1)
									in  %% Line 2125
									    apply 'v2_solve_conj'/12
										(Is1, Tail, _cor39, Map, Conj, IsFlat, V2State2, %% Line 2126
																 [U|UL], %% Line 2126
																	 NewFs, %% Line 2126
																		VarsUp, %% Line 2126
																			LastMap, %% Line 2126
																				 LastFlags)
							    ( <_cor36> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_cor36})
							      -| ['compiler_generated'] )
							  end
						  ( <_cor32> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor32})
						    -| ['compiler_generated'] )
						end
				    ( <_cor29> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor29})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor40> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor40})
				-| ['compiler_generated'] )
			    end
		    ( <_cor14> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor14})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2128
	  <[],_X_Cs,_X_I,Map,Conj,IsFlat,V2State,UL,NewFs,VarsUp,%% Line 2129
								 LastMap,%% Line 2129
									 LastFlags> when 'true' ->
	      let <U> =
		  %% Line 2130
		  call 'lists':'umerge'
		      (UL)
	      in  %% Line 2131
		  case call 'lists':'umerge'
			   (NewFs) of
		    %% Line 2132
		    <[]> when 'true' ->
			let <_cor42> =
			    %% Line 2134
			    call 'lists':'umerge'
				([U|VarsUp])
			in  %% Line 2134
			    {'ok',Map,V2State,_cor42}
		    %% Line 2135
		    <NewFlags>
			when let <_cor43> =
			      call 'erlang':'=:='
				  (NewFlags, LastFlags)
			  in  let <_cor44> =
				  call 'erlang':'=:='
				      (Map, LastMap)
			      in  call 'erlang':'and'
				      (_cor43, _cor44) ->
			do  %% Line 2138
			    apply 'report_detected_loop'/1
				(Conj)
			    let <_cor45> =
				%% Line 2139
				call 'lists':'umerge'
				    ([U|VarsUp])
			    in  %% Line 2139
				{'ok',Map,V2State,_cor45}
		    %% Line 2140
		    <NewFlags> when 'true' ->
			%% Line 2141
			case Conj of
			  <{'constraint_list','conj',Cs,_cor70,_cor71,_cor72}> when 'true' ->
			      %% Line 2142
			      apply 'v2_solve_conj'/12
				  (NewFlags, Cs, 1, Map, Conj, IsFlat, V2State, %% Line 2143
										[], %% Line 2143
										    [], %% Line 2143
											[U|VarsUp], %% Line 2143
												    Map, %% Line 2143
													 NewFlags)
			  ( <_cor46> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor46})
			    -| ['compiler_generated'] )
			end
		  end
	  %% Line 2145
	  <Is,[_cor73|Tail],I,Map,Conj,IsFlat,V2State,UL,NewFs,VarsUp,%% Line 2146
								      LastMap,%% Line 2146
									      LastFlags> when 'true' ->
	      let <_cor48> =
		  %% Line 2147
		  call 'erlang':'+'
		      (I, 1)
	      in  %% Line 2147
		  apply 'v2_solve_conj'/12
		      (Is, Tail, _cor48, Map, Conj, IsFlat, V2State, UL, NewFs, VarsUp, %% Line 2148
											LastMap, %% Line 2148
												 LastFlags)
	  ( <_cor60,_cor59,_cor58,_cor57,_cor56,_cor55,_cor54,_cor53,_cor52,_cor51,_cor50,_cor49> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor60,_cor59,_cor58,_cor57,_cor56,_cor55,_cor54,_cor53,_cor52,_cor51,_cor50,_cor49})
		  -| [{'function_name',{'v2_solve_conj',12}}] )
	    -| ['compiler_generated'] )
	end
'report_detected_loop'/1 =
    %% Line 2154
    fun (_cor0) ->
	%% Line 2155
	'ok'
'add_mask_to_flags'/4 =
    %% Line 2158
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Flags,[Im|M],I,L>
	      when call 'erlang':'>'
		    (I,
		     Im) ->
	      %% Line 2159
	      apply 'add_mask_to_flags'/4
		  (Flags, M, I, [Im|L])
	  %% Line 2160
	  <Flags,[_cor10|M],_X_I,L> when 'true' ->
	      let <_cor5> =
		  %% Line 2161
		  call 'lists':'umerge'
		      (Flags, M)
	      in  let <_cor4> =
		      %% Line 2161
		      call 'lists':'reverse'
			  (L)
		  in  %% Line 2161
		      {_cor5,_cor4}
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'add_mask_to_flags',4}}] )
	    -| ['compiler_generated'] )
	end
'get_mask'/2 =
    %% Line 2163
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <V,{'d',Masks}> when 'true' ->
	      %% Line 2164
	      case call 'dict':'find'
		       (V, Masks) of
		%% Line 2165
		<'error'> when 'true' ->
		    []
		%% Line 2166
		<{'ok',M}> when 'true' ->
		    M
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2168
	  <V,Masks> when 'true' ->
	      %% Line 2169
	      case call 'lists':'keyfind'
		       (V, 1, Masks) of
		%% Line 2170
		<'false'> when 'true' ->
		    []
		%% Line 2171
		<{_cor6,M}>
		    when call 'erlang':'=:='
			  (_cor6,
			   V) ->
		    M
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	end
'get_flags'/2 =
    %% Line 2174
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <V2State0 = {'v2_state',ConData,_cor19},C> when 'true' ->
	      %% Line 2175
	      case C of
		<{'constraint_list',_cor20,Cs,_cor21,Masks,Id}> when 'true' ->
		    %% Line 2176
		    case call 'dict':'find'
			     (Id, ConData) of
		      %% Line 2177
		      <'error'> when 'true' ->
			  let <_rec12> =
			      %% Line 2179
			      call 'dict':'store'
				  (Id, {[],[]}, ConData)
			  in  let <_cor6> =
				  %% Line 2179
				  call 'erlang':'setelement'
				      (2, V2State0, _rec12)
			      in  let <_cor8> =
				      %% Line 2180
				      call 'erlang':'length'
					  (Cs)
				  in  let <_cor9> =
					  %% Line 2180
					  call 'lists':'seq'
					      (1, _cor8)
				      in  %% Line 2180
					  {_cor6,_cor9}
		      %% Line 2181
		      <{'ok','failed'}> when 'true' ->
			  %% Line 2182
			  {V2State0,'failed_list'}
		      %% Line 2183
		      <{'ok',{Part,U}}>
			  when call 'erlang':'=/='
				(U,
				 []) ->
			  let <_rec14> =
			      %% Line 2185
			      call 'dict':'store'
				  (Id, {Part,[]}, ConData)
			  in  let <_cor13> =
				  %% Line 2185
				  call 'erlang':'setelement'
				      (2, V2State0, _rec14)
			      in  let <_cor15> =
				      %% Line 2186
				      apply 'vars_per_child'/2
					  (U, Masks)
				  in  %% Line 2186
				      apply 'save_updated_vars_list'/3
					  (Cs, _cor15, _cor13)
		      ( <_cor16> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor16})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17})
		  -| [{'function_name',{'get_flags',2}}] )
	    -| ['compiler_generated'] )
	end
'vars_per_child'/2 =
    %% Line 2189
    fun (_cor1,_cor0) ->
	let <_cor11> =
	    %% Line 2190
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor8) ->
			  case _cor8 of
			    <[V|_cor3]> when 'true' ->
				( letrec
				      'lc$^1'/1 =
					  fun (_cor9) ->
					      case _cor9 of
						<[I|_cor6]> when 'true' ->
						    let <_cor10> =
							apply 'lc$^1'/1
							    (_cor6)
						    in  ( [{I,V}|_cor10]
							  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    apply 'lc$^0'/1
							(_cor3)
						( <_cor9> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor9})
							-| [{'function_name',{'lc$^1',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  let <_cor7> =
					  apply 'get_mask'/2
					      (V, _cor0)
				      in  apply 'lc$^1'/1
					      (_cor7)
				  -| ['list_comprehension'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor8> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor8})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  let <_cor4> =
		      call 'lists':'usort'
			  (_cor1)
		  in  apply 'lc$^0'/1
			  (_cor4)
	      -| ['list_comprehension'] )
	in  %% Line 2190
	    apply 'family'/1
		(_cor11)
'save_updated_vars_list'/3 =
    %% Line 2192
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2193
	apply 'save_updated_vars_list1'/5
	    (_cor2, _cor1, _cor0, 1, [])
'save_updated_vars_list1'/5 =
    %% Line 2195
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[C|Cs],[{I,U}|IU],V2State0,_cor14,Is>
	      when call 'erlang':'=:='
		    (_cor14,
		     I) ->
	      let <V2State> =
		  %% Line 2196
		  apply 'save_updated_vars'/3
		      (C, U, V2State0)
	      in  let <_cor6> =
		      %% Line 2197
		      call 'erlang':'+'
			  (I, 1)
		  in  %% Line 2197
		      apply 'save_updated_vars_list1'/5
			  (Cs, IU, V2State, _cor6, [I|Is])
	  %% Line 2198
	  <[],[],V2State,_X_I,Is> when 'true' ->
	      let <_cor7> =
		  %% Line 2199
		  call 'lists':'reverse'
		      (Is)
	      in  %% Line 2199
		  {V2State,_cor7}
	  %% Line 2200
	  <[_cor15|Cs],IU,V2State,I,Is> when 'true' ->
	      let <_cor8> =
		  %% Line 2201
		  call 'erlang':'+'
		      (I, 1)
	      in  %% Line 2201
		  apply 'save_updated_vars_list1'/5
		      (Cs, IU, V2State, _cor8, Is)
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'save_updated_vars_list1',5}}] )
	    -| ['compiler_generated'] )
	end
'save_updated_vars'/3 =
    %% Line 2203
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'constraint',_cor9,_cor10,_cor11,_cor12},_cor13,V2State> when 'true' ->
	      %% Line 2204
	      V2State
	  %% Line 2205
	  <C = {'constraint_list',_cor14,_cor15,_cor16,_cor17,_cor18},U,V2State0> when 'true' ->
	      %% Line 2206
	      apply 'save_updated_vars1'/3
		  (V2State0, C, U)
	  %% Line 2207
	  <{'constraint_ref',Id,_cor19},U,V2State> when 'true' ->
	      %% Line 2208
	      ( case V2State of
		  ( <( {'v2_state',_cor20,_rec16}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Cs> =
			    apply 'state__get_cs'/2
				(Id, _rec16)
			in  %% Line 2209
			    apply 'save_updated_vars'/3
				(Cs, U, V2State)
		    -| ['compiler_generated'] )
		  ( <_cor21> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','v2_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'save_updated_vars',3}}] )
	    -| ['compiler_generated'] )
	end
'save_updated_vars1'/3 =
    %% Line 2211
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2212
	case _cor2 of
	  <{'v2_state',ConData,_cor13}> when 'true' ->
	      %% Line 2213
	      case _cor1 of
		<{'constraint_list',_cor14,_cor15,_cor16,_cor17,Id}> when 'true' ->
		    %% Line 2214
		    case call 'dict':'find'
			     (Id, ConData) of
		      %% Line 2215
		      <'error'> when 'true' ->
			  _cor2
		      %% Line 2216
		      <{'ok','failed'}> when 'true' ->
			  _cor2
		      %% Line 2217
		      <{'ok',{Part,U0}}> when 'true' ->
			  let <U1> =
			      %% Line 2219
			      call 'erlang':'++'
				  (_cor0, U0)
			  in  let <_rec17> =
				  %% Line 2220
				  call 'dict':'store'
				      (Id, {Part,U1}, ConData)
			      in  %% Line 2220
				  call 'erlang':'setelement'
				      (2, _cor2, _rec17)
		      ( <_cor9> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor9})
			-| ['compiler_generated'] )
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'pp_constr_data'/2 =
    %% Line 2239
    fun (_cor1,_cor0) ->
	%% Line 2240
	'ok'
'failed_list'/2 =
    %% Line 2243
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'constraint_list',_cor7,_cor8,_cor9,_cor10,Id},V2State = {'v2_state',D,_cor11}> when 'true' ->
	      let <_rec19> =
		  %% Line 2245
		  call 'dict':'store'
		      (Id, 'failed', D)
	      in  %% Line 2245
		  call 'erlang':'setelement'
		      (2, V2State, _rec19)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'failed_list',2}}] )
	    -| ['compiler_generated'] )
	end
'is_failed_list'/2 =
    %% Line 2247
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'constraint_list',_cor5,_cor6,_cor7,_cor8,Id},{'v2_state',D,_cor9}> when 'true' ->
	      let <_cor2> =
		  %% Line 2248
		  call 'dict':'find'
		      (Id, D)
	      in  %% Line 2248
		  call 'erlang':'=:='
		      (_cor2, {'ok','failed'})
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'is_failed_list',2}}] )
	    -| ['compiler_generated'] )
	end
'solve_ref_or_list'/4 =
    %% Line 2252
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'constraint_ref',Id,Deps},%% Line 2253
				      Map,%% Line 2253
					  MapDict,%% Line 2253
						  State> when 'true' ->
	      let <OldLocalMap,Check> =
		  %% Line 2255
		  case call 'dict':'find'
			   (Id, MapDict) of
		    %% Line 2256
		    <'error'> when 'true' ->
			let <_cor4> =
			    apply 'map_new'/0
				()
			in  <_cor4,'false'>
		    %% Line 2257
		    <{'ok',M}> when 'true' ->
			<M,'true'>
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor8> =
		      %% Line 2264
		      call 'erl_types':'t_var_name'
			  (Id)
		  in  let <CheckDeps> =
			  %% Line 2264
			  call 'ordsets':'del_element'
			      (_cor8, Deps)
		      in  %% Line 2265
			  case call 'erlang':'=:='
				   (CheckDeps, Deps) of
			    <'true'> when 'true' ->
				let <_cor13> =
				    %% Line 2266
				    ( case Check of
					( <( 'true'
					     -| ['compiler_generated'] )> when 'true' ->
					      apply 'maps_are_equal'/3
						  (OldLocalMap, Map, CheckDeps)
					  -| ['compiler_generated'] )
					( <( 'false'
					     -| ['compiler_generated'] )> when 'true' ->
					      'false'
					  -| ['compiler_generated'] )
					( <_cor11> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {( 'badarg'
							  -| ['compiler_generated'] ),_cor11}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				in  %% Line 2266
				    case _cor13 of
				      %% Line 2267
				      <'true'> when 'true' ->
					  %% Line 2269
					  {'ok',MapDict,Map}
				      %% Line 2270
				      <'false'> when 'true' ->
					  let <Cs> =
					      %% Line 2272
					      apply 'state__get_cs'/2
						  (Id, State)
					  in  let <_cor17> =
						  %% Line 2274
						  case apply 'state__is_self_rec'/2
							   (Id, State) of
						    %% Line 2275
						    <'true'> when 'true' ->
							let <_cor15> =
							    call 'erl_types':'t_none'
								()
							in  apply 'solve_self_recursive'/6
								(Cs, Map, MapDict, Id, _cor15, State)
						    %% Line 2276
						    <'false'> when 'true' ->
							apply 'solve_ref_or_list'/4
							    (Cs, Map, MapDict, State)
						    ( <_cor16> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor16})
						      -| ['compiler_generated'] )
						  end
					      in  let <NewMapDict,FunType> =
						      %% Line 2279
						      case _cor17 of
							%% Line 2280
							<{'error',NewMapDict0}> when 'true' ->
							    let <Arity> =
								%% Line 2282
								apply 'state__fun_arity'/2
								    (Id, State)
							    in  let <_cor20> =
								    %% Line 2284
								    call 'erl_types':'t_var_name'
									(Id)
								in  let <_cor24> =
									%% Line 2284
									case apply 'state__prop_domain'/2
										 (_cor20, State) of
									  %% Line 2285
									  <'error'> when 'true' ->
									      let <_cor21> =
										  call 'erl_types':'t_none'
										      ()
									      in  call 'erl_types':'t_fun'
										      (Arity, _cor21)
									  %% Line 2286
									  <{'ok',Dom}> when 'true' ->
									      let <_cor22> =
										  call 'erl_types':'t_none'
										      ()
									      in  call 'erl_types':'t_fun'
										      (Dom, _cor22)
									  ( <_cor23> when 'true' ->
										primop 'match_fail'
										    ({'case_clause',_cor23})
									    -| ['compiler_generated'] )
									end
								    in  %% Line 2288
									<NewMapDict0,_cor24>
							%% Line 2289
							<{'ok',NewMapDict0,NewMap}> when 'true' ->
							    let <FunType0> =
								%% Line 2291
								apply 'lookup_type'/2
								    (Id, NewMap)
							    in  %% Line 2292
								<NewMapDict0,FunType0>
							( <_cor27> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_cor27})
							  -| ['compiler_generated'] )
						      end
						  in  let <NewMap1> =
							  %% Line 2295
							  apply 'enter_type'/3
							      (Id, FunType, Map)
						      in  let <_cor32> =
							      %% Line 2297
							      case apply 'state__get_rec_var'/2
								       (Id, State) of
								%% Line 2298
								<{'ok',Var}> when 'true' ->
								    apply 'enter_type'/3
									(Var, FunType, NewMap1)
								%% Line 2299
								<'error'> when 'true' ->
								    NewMap1
								( <_cor31> when 'true' ->
								      primop 'match_fail'
									  ({'case_clause',_cor31})
								  -| ['compiler_generated'] )
							      end
							  in  let <_cor34> =
								  %% Line 2301
								  call 'dict':'store'
								      (Id, _cor32, NewMapDict)
							      in  %% Line 2301
								  {'ok',_cor34,_cor32}
				      ( <_cor35> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor35})
					-| ['compiler_generated'] )
				    end
			    ( <_cor10> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor10})
			      -| ['compiler_generated'] )
			  end
	  %% Line 2303
	  <{'constraint_list',Type,Cs,Deps,_cor48,Id},%% Line 2304
						      Map,%% Line 2304
							  MapDict,%% Line 2304
								  State> when 'true' ->
	      let <OldLocalMap,Check> =
		  %% Line 2306
		  case call 'dict':'find'
			   (Id, MapDict) of
		    %% Line 2307
		    <'error'> when 'true' ->
			let <_cor36> =
			    apply 'map_new'/0
				()
			in  <_cor36,'false'>
		    %% Line 2308
		    <{'ok',M}> when 'true' ->
			<M,'true'>
		    ( <_cor37> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor37})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 2311
		  case <> of
		    %% Line 2312
		    <>
			when call 'erlang':'=:='
			      (OldLocalMap,
			       'error') ->
			{'error',MapDict}
		    %% Line 2313
		    <> when 'true' ->
			let <_cor42> =
			    %% Line 2314
			    ( case Check of
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      apply 'maps_are_equal'/3
					  (OldLocalMap, Map, Deps)
				  -| ['compiler_generated'] )
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      'false'
				  -| ['compiler_generated'] )
				( <_cor40> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {( 'badarg'
						  -| ['compiler_generated'] ),_cor40}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			in  %% Line 2314
			    case _cor42 of
			      %% Line 2315
			      <'true'> when 'true' ->
				  %% Line 2317
				  {'ok',MapDict,Map}
			      %% Line 2318
			      <'false'> when 'true' ->
				  %% Line 2320
				  apply 'solve_clist'/7
				      (Cs, Type, Id, Deps, MapDict, Map, State)
			      ( <_cor43> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor43})
				-| ['compiler_generated'] )
			    end
		  end
	  ( <_cor47,_cor46,_cor45,_cor44> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor47,_cor46,_cor45,_cor44})
		  -| [{'function_name',{'solve_ref_or_list',4}}] )
	    -| ['compiler_generated'] )
	end
'solve_self_recursive'/6 =
    %% Line 2324
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2326
	case apply 'state__get_rec_var'/2
		 (_cor2, _cor0) of
	  <{'ok',RecVar}> when 'true' ->
	      let <RecType> =
		  %% Line 2328
		  call 'erl_types':'t_limit'
		      (_cor1, 4)
	      in  let <_cor8> =
		      %% Line 2329
		      call 'erl_types':'t_var_name'
			  (_cor2)
		  in  let <_cor9> =
			  %% Line 2329
			  apply 'erase_type'/2
			      (_cor8, _cor4)
		      in  let <Map1> =
			      %% Line 2329
			      apply 'enter_type'/3
				  (RecVar, RecType, _cor9)
			  in  do  %% Line 2330
				  apply 'pp_map'/2
				      ([77|[97|[112|[49]]]], Map1)
				  %% Line 2331
				  case apply 'solve_ref_or_list'/4
					   (_cor5, Map1, _cor3, _cor0) of
				    %% Line 2332
				    <Error = {'error',_cor27}> when 'true' ->
					%% Line 2333
					case call 'erl_types':'t_is_none'
						 (_cor1) of
					  %% Line 2334
					  <'true'> when 'true' ->
					      let <Arity> =
						  %% Line 2336
						  apply 'state__fun_arity'/2
						      (_cor2, _cor0)
					      in  let <_cor13> =
						      %% Line 2337
						      call 'erl_types':'t_any'
							  ()
						  in  let <_cor14> =
							  %% Line 2337
							  call 'lists':'duplicate'
							      (Arity, _cor13)
						      in  let <_cor12> =
							      %% Line 2337
							      call 'erl_types':'t_unit'
								  ()
							  in  let <NewRecType> =
								  %% Line 2337
								  call 'erl_types':'t_fun'
								      (_cor14, _cor12)
							      in  %% Line 2338
								  apply 'solve_self_recursive'/6
								      (_cor5, _cor4, _cor3, _cor2, NewRecType, _cor0)
					  %% Line 2339
					  <'false'> when 'true' ->
					      %% Line 2340
					      Error
					  ( <_cor16> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor16})
					    -| ['compiler_generated'] )
					end
				    %% Line 2342
				    <{'ok',NewMapDict,NewMap}> when 'true' ->
					do  %% Line 2343
					    apply 'pp_map'/2
						([78|[101|[119|[77|[97|[112]]]]]], NewMap)
					    let <NewRecType> =
						%% Line 2344
						apply 'unsafe_lookup_type'/2
						    (_cor2, NewMap)
					    in  %% Line 2345
						case apply 'is_equal'/2
							 (NewRecType, _cor1) of
						  %% Line 2346
						  <'true'> when 'true' ->
						      let <_cor18> =
							  %% Line 2347
							  apply 'enter_type'/3
							      (RecVar, NewRecType, NewMap)
						      in  %% Line 2347
							  {'ok',NewMapDict,_cor18}
						  %% Line 2348
						  <'false'> when 'true' ->
						      %% Line 2349
						      apply 'solve_self_recursive'/6
							  (_cor5, _cor4, _cor3, _cor2, NewRecType, _cor0)
						  ( <_cor19> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor19})
						    -| ['compiler_generated'] )
						end
				    ( <_cor20> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor20})
				      -| ['compiler_generated'] )
				  end
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'solve_clist'/7 =
    %% Line 2353
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Cs,'conj',Id,Deps,MapDict,Map,State> when 'true' ->
	      %% Line 2354
	      case apply 'solve_cs'/4
		       (Cs, Map, MapDict, State) of
		%% Line 2355
		<{'error',NewMapDict}> when 'true' ->
		    let <_cor7> =
			%% Line 2356
			call 'dict':'store'
			    (Id, 'error', NewMapDict)
		    in  %% Line 2356
			{'error',_cor7}
		%% Line 2357
		<Ret = {'ok',NewMapDict,NewMap}> when 'true' ->
		    %% Line 2358
		    case Cs of
		      %% Line 2359
		      <[_cor35|[]]> when 'true' ->
			  %% Line 2361
			  Ret
		      %% Line 2362
		      <_cor36> when 'true' ->
			  %% Line 2363
			  case apply 'maps_are_equal'/3
				   (Map, NewMap, Deps) of
			    %% Line 2364
			    <'true'> when 'true' ->
				let <_cor8> =
				    call 'dict':'store'
					(Id, NewMap, NewMapDict)
				in  {'ok',_cor8,NewMap}
			    %% Line 2365
			    <'false'> when 'true' ->
				apply 'solve_clist'/7
				    (Cs, 'conj', Id, Deps, NewMapDict, NewMap, State)
			    ( <_cor9> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor9})
			      -| ['compiler_generated'] )
			  end
		    end
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor11})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2369
	  <Cs,'disj',Id,_X_Deps,MapDict,Map,State> when 'true' ->
	      let <Fun> =
		  %% Line 2370
		  ( fun (_cor14,_cor13) ->
			%% Line 2371
			case apply 'solve_ref_or_list'/4
				 (_cor14, Map, _cor13, State) of
			  %% Line 2372
			  <{'ok',NewDict,NewMap}> when 'true' ->
			      {{'ok',NewMap},NewDict}
			  %% Line 2373
			  <Error = {'error',_X_NewDict}> when 'true' ->
			      Error
			  ( <_cor12> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor12})
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-solve_clist/7-fun-0-'}}] )
	      in  %% Line 2376
		  case call 'lists':'mapfoldl'
			   (Fun, MapDict, Cs) of
		    <{Maps,NewMapDict}> when 'true' ->
			let <_cor23> =
			    %% Line 2377
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor21) ->
					  case _cor21 of
					    <[{'ok',X}|_cor20]> when 'true' ->
						let <_cor22> =
						    apply 'lc$^0'/1
							(_cor20)
						in  ( [X|_cor22]
						      -| ['compiler_generated'] )
					    ( <[_cor19|_cor20]> when 'true' ->
						  apply 'lc$^0'/1
						      (_cor20)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor21> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor21})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (Maps)
			      -| ['list_comprehension'] )
			in  %% Line 2377
			    case _cor23 of
			      %% Line 2378
			      <[]> when 'true' ->
				  let <_cor24> =
				      call 'dict':'store'
					  (Id, 'error', NewMapDict)
				  in  {'error',_cor24}
			      %% Line 2379
			      <MapList> when 'true' ->
				  let <NewMap> =
				      %% Line 2380
				      apply 'join_maps'/1
					  (MapList)
				  in  let <_cor26> =
					  %% Line 2381
					  call 'dict':'store'
					      (Id, NewMap, NewMapDict)
				      in  %% Line 2381
					  {'ok',_cor26,NewMap}
			    end
		    ( <_cor18> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor18})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor34,_cor33,_cor32,_cor31,_cor30,_cor29,_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor34,_cor33,_cor32,_cor31,_cor30,_cor29,_cor28})
		  -| [{'function_name',{'solve_clist',7}}] )
	    -| ['compiler_generated'] )
	end
'solve_cs'/4 =
    %% Line 2384
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[C = {'constraint_ref',_cor11,_cor12}|Tail],Map,MapDict,State> when 'true' ->
	      %% Line 2385
	      case apply 'solve_ref_or_list'/4
		       (C, Map, MapDict, State) of
		%% Line 2386
		<{'ok',NewMapDict,Map1}> when 'true' ->
		    apply 'solve_cs'/4
			(Tail, Map1, NewMapDict, State)
		%% Line 2387
		<Error = {'error',_X_NewMapDict}> when 'true' ->
		    Error
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2389
	  <[C = {'constraint_list',_cor13,_cor14,_cor15,_cor16,_cor17}|Tail],Map,MapDict,State> when 'true' ->
	      %% Line 2390
	      case apply 'solve_ref_or_list'/4
		       (C, Map, MapDict, State) of
		%% Line 2391
		<{'ok',NewMapDict,Map1}> when 'true' ->
		    apply 'solve_cs'/4
			(Tail, Map1, NewMapDict, State)
		%% Line 2392
		<Error = {'error',_X_NewMapDict}> when 'true' ->
		    Error
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2394
	  <[C = {'constraint',_cor18,_cor19,_cor20,_cor21}|Tail],Map,MapDict,State> when 'true' ->
	      %% Line 2395
	      case apply 'solve_one_c'/2
		       (C, Map) of
		%% Line 2396
		<'error'> when 'true' ->
		    do  %% Line 2397
			apply 'report_failed_constraint'/2
			    (C, Map)
			%% Line 2398
			{'error',MapDict}
		%% Line 2399
		<{'ok',{NewMap,_X_U}}> when 'true' ->
		    %% Line 2400
		    apply 'solve_cs'/4
			(Tail, NewMap, MapDict, State)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2402
	  <[],Map,MapDict,_X_State> when 'true' ->
	      %% Line 2403
	      {'ok',MapDict,Map}
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'solve_cs',4}}] )
	    -| ['compiler_generated'] )
	end
'solve_one_c'/2 =
    %% Line 2405
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'constraint',Lhs,Op,Rhs,_cor12},Map> when 'true' ->
	      let <LhsType> =
		  %% Line 2406
		  apply 'lookup_type'/2
		      (Lhs, Map)
	      in  let <RhsType> =
		      %% Line 2407
		      apply 'lookup_type'/2
			  (Rhs, Map)
		  in  let <Inf> =
			  %% Line 2408
			  call 'erl_types':'t_inf'
			      (LhsType, RhsType)
		      in  %% Line 2412
			  case call 'erl_types':'t_is_none'
				   (Inf) of
			    %% Line 2413
			    <'true'> when 'true' ->
				'error'
			    %% Line 2414
			    <'false'> when 'true' ->
				%% Line 2415
				case Op of
				  %% Line 2416
				  <'sub'> when 'true' ->
				      apply 'solve_subtype'/3
					  (Lhs, Inf, Map)
				  %% Line 2417
				  <'eq'> when 'true' ->
				      %% Line 2418
				      case apply 'solve_subtype'/3
					       (Lhs, Inf, Map) of
					%% Line 2419
					<'error'> when 'true' ->
					    'error'
					%% Line 2420
					<{'ok',{Map1,U1}}> when 'true' ->
					    %% Line 2421
					    case apply 'solve_subtype'/3
						     (Rhs, Inf, Map1) of
					      %% Line 2422
					      <'error'> when 'true' ->
						  'error'
					      %% Line 2423
					      <{'ok',{Map2,U2}}> when 'true' ->
						  let <_cor5> =
						      call 'lists':'umerge'
							  (U1, U2)
						  in  {'ok',{Map2,_cor5}}
					      ( <_cor6> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor6})
						-| ['compiler_generated'] )
					    end
					( <_cor7> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor7})
					  -| ['compiler_generated'] )
				      end
				  ( <_cor8> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor8})
				    -| ['compiler_generated'] )
				end
			    ( <_cor9> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor9})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'solve_one_c',2}}] )
	    -| ['compiler_generated'] )
	end
'solve_subtype'/3 =
    %% Line 2429
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2437
	try
	    call 'erl_types':'t_unify'
		(_cor2, _cor1)
	of <_cor3> ->
	    case _cor3 of
	      %% Line 2438
	      <{_cor12,List}> when 'true' ->
		  let <_cor4> =
		      apply 'enter_type_list'/2
			  (List, _cor0)
		  in  {'ok',_cor4}
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'try_clause',_cor5})
		-| ['compiler_generated'] )
	    end
	catch <_cor8,_cor7,_cor6> ->
	    case <_cor8,_cor7,_cor6> of
	      %% Line 2440
	      <'throw',{'mismatch',_X_T1,_X_T2},_cor13> when 'true' ->
		  %% Line 2443
		  'error'
	      ( <_cor8,_cor7,_cor6> when 'true' ->
		    primop 'raise'
			(_cor6, _cor7)
		-| ['compiler_generated'] )
	    end
'report_failed_constraint'/2 =
    %% Line 2447
    fun (_cor1,_cor0) ->
	%% Line 2448
	'ok'
'map_new'/0 =
    %% Line 2461
    fun () ->
	%% Line 2462
	call 'dict':'new'
	    ()
'join_maps'/1 =
    %% Line 2464
    fun (_cor0) ->
	case _cor0 of
	  <[Map|[]]> when 'true' ->
	      %% Line 2465
	      Map
	  %% Line 2466
	  <Maps> when 'true' ->
	      let <Keys> =
		  %% Line 2467
		  apply 'constrained_keys'/1
		      (Maps)
	      in  let <_cor2> =
		      %% Line 2468
		      apply 'map_new'/0
			  ()
		  in  %% Line 2468
		      apply 'join_maps'/3
			  (Keys, Maps, _cor2)
	end
'constrained_keys'/1 =
    %% Line 2470
    fun (_cor0) ->
	let <_cor13> =
	    %% Line 2471
	    ( fun (_cor10,_cor9) ->
		  %% Line 2472
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor6) ->
				case _cor6 of
				  <[Key|_cor5]> when 'true' ->
				      ( case call 'dict':'is_key'
						 (Key, _cor10) of
					  <'true'> when 'true' ->
					      let <_cor7> =
						  apply 'lc$^0'/1
						      (_cor5)
					      in  ( [Key|_cor7]
						    -| ['compiler_generated'] )
					  ( <'false'> when 'true' ->
						apply 'lc$^0'/1
						    (_cor5)
					    -| ['compiler_generated'] )
					  ( <_cor8> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor8})
					    -| ['compiler_generated'] )
					end
					-| ['list_comprehension'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor6> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor6})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (_cor9)
		    -| ['list_comprehension'] )
	      -| [{'id',{0,0,'-constrained_keys/1-fun-0-'}}] )
	in  let <_cor2> =
		%% Line 2474
		call 'erlang':'hd'
		    (_cor0)
	    in  let <_cor3> =
		    %% Line 2474
		    call 'dict':'fetch_keys'
			(_cor2)
		in  let <_cor1> =
			%% Line 2474
			call 'erlang':'tl'
			    (_cor0)
		    in  %% Line 2471
			call 'lists':'foldl'
			    (_cor13, _cor3, _cor1)
'join_maps'/3 =
    %% Line 2476
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Key|Left],Maps = [Map|MapsLeft],AccMap> when 'true' ->
	      let <_cor3> =
		  %% Line 2477
		  apply 'lookup_type'/2
		      (Key, Map)
	      in  let <NewType> =
		      %% Line 2477
		      apply 'join_one_key'/3
			  (Key, MapsLeft, _cor3)
		  in  let <NewAccMap> =
			  %% Line 2478
			  apply 'enter_type'/3
			      (Key, NewType, AccMap)
		      in  %% Line 2479
			  apply 'join_maps'/3
			      (Left, Maps, NewAccMap)
	  %% Line 2480
	  <[],_X_Maps,AccMap> when 'true' ->
	      %% Line 2481
	      AccMap
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'join_maps',3}}] )
	    -| ['compiler_generated'] )
	end
'join_one_key'/3 =
    %% Line 2483
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Key,[Map|Maps],Type> when 'true' ->
	      %% Line 2484
	      case call 'erl_types':'t_is_any'
		       (Type) of
		%% Line 2485
		<'true'> when 'true' ->
		    Type
		%% Line 2486
		<'false'> when 'true' ->
		    let <NewType> =
			%% Line 2487
			apply 'lookup_type'/2
			    (Key, Map)
		    in  %% Line 2488
			case apply 'is_equal'/2
				 (NewType, Type) of
			  %% Line 2489
			  <'true'> when 'true' ->
			      apply 'join_one_key'/3
				  (Key, Maps, Type)
			  %% Line 2490
			  <'false'> when 'true' ->
			      let <_cor4> =
				  call 'erl_types':'t_sup'
				      (NewType, Type)
			      in  apply 'join_one_key'/3
				      (Key, Maps, _cor4)
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor5})
			    -| ['compiler_generated'] )
			end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2493
	  <_X_Key,[],Type> when 'true' ->
	      %% Line 2494
	      Type
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'join_one_key',3}}] )
	    -| ['compiler_generated'] )
	end
'maps_are_equal'/3 =
    %% Line 2496
    fun (_cor2,_cor1,_cor0) ->
	let <NewDeps> =
	    %% Line 2497
	    apply 'prune_keys'/3
		(_cor2, _cor1, _cor0)
	in  %% Line 2498
	    apply 'maps_are_equal_1'/3
		(_cor2, _cor1, NewDeps)
'maps_are_equal_1'/3 =
    %% Line 2500
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Map1,Map2,[H|Tail]> when 'true' ->
	      let <T1> =
		  %% Line 2501
		  apply 'lookup_type'/2
		      (H, Map1)
	      in  let <T2> =
		      %% Line 2502
		      apply 'lookup_type'/2
			  (H, Map2)
		  in  %% Line 2503
		      case apply 'is_equal'/2
			       (T1, T2) of
			%% Line 2504
			<'true'> when 'true' ->
			    apply 'maps_are_equal_1'/3
				(Map1, Map2, Tail)
			%% Line 2505
			<'false'> when 'true' ->
			    %% Line 2507
			    'false'
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor5})
			  -| ['compiler_generated'] )
		      end
	  %% Line 2509
	  <_X_Map1,_X_Map2,[]> when 'true' ->
	      %% Line 2510
	      'true'
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'maps_are_equal_1',3}}] )
	    -| ['compiler_generated'] )
	end
'prune_keys'/3 =
    %% Line 2514
    fun (_cor2,_cor1,_cor0) ->
	let <NofDeps> =
	    %% Line 2517
	    call 'erlang':'length'
		(_cor0)
	in  %% Line 2518
	    case <> of
	      %% Line 2519
	      <>
		  when call 'erlang':'>'
			(NofDeps,
			 100) ->
		  let <Keys1> =
		      %% Line 2520
		      call 'dict':'fetch_keys'
			  (_cor2)
		  in  let <_cor5> =
			  %% Line 2521
			  call 'erlang':'length'
			      (Keys1)
		      in  %% Line 2521
			  case <> of
			    %% Line 2522
			    <>
				when call 'erlang':'>'
				      (_cor5,
				       NofDeps) ->
				let <Set1> =
				    %% Line 2523
				    call 'lists':'sort'
					(Keys1)
				in  let <_cor7> =
					%% Line 2524
					call 'dict':'fetch_keys'
					    (_cor1)
				    in  let <Set2> =
					    %% Line 2524
					    call 'lists':'sort'
						(_cor7)
					in  let <_cor9> =
						%% Line 2525
						call 'ordsets':'union'
						    (Set1, Set2)
					    in  %% Line 2525
						call 'ordsets':'intersection'
						    (_cor9, _cor0)
			    %% Line 2526
			    <> when 'true' ->
				_cor0
			  end
	      %% Line 2529
	      <> when 'true' ->
		  _cor0
	    end
'enter_type'/3 =
    %% Line 2533
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Key,Val,Map>
	      when call 'erlang':'is_integer'
		    (Key) ->
	      let <_cor3> =
		  %% Line 2536
		  call 'erl_types':'t_any'
		      ()
	      in  %% Line 2536
		  case apply 'is_equal'/2
			   (Val, _cor3) of
		    %% Line 2537
		    <'true'> when 'true' ->
			%% Line 2538
			apply 'erase_type'/2
			    (Key, Map)
		    %% Line 2539
		    <'false'> when 'true' ->
			let <LimitedVal> =
			    %% Line 2540
			    call 'erl_types':'t_limit'
				(Val, 5)
			in  do  %% Line 2541
				case apply 'is_equal'/2
					 (LimitedVal, Val) of
				  %% Line 2542
				  <'true'> when 'true' ->
				      'ok'
				  %% Line 2543
				  <'false'> when 'true' ->
				      'ok'
				  ( <_cor5> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor5})
				    -| ['compiler_generated'] )
				end
				%% Line 2545
				case call 'dict':'find'
					 (Key, Map) of
				  %% Line 2546
				  <{'ok',Value}> when 'true' ->
				      %% Line 2547
				      case apply 'is_equal'/2
					       (Value, LimitedVal) of
					%% Line 2548
					<'true'> when 'true' ->
					    Map
					%% Line 2549
					<'false'> when 'true' ->
					    apply 'map_store'/3
						(Key, LimitedVal, Map)
					( <_cor6> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor6})
					  -| ['compiler_generated'] )
				      end
				  %% Line 2551
				  <'error'> when 'true' ->
				      apply 'map_store'/3
					  (Key, LimitedVal, Map)
				  ( <_cor7> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor7})
				    -| ['compiler_generated'] )
				end
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor8})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2554
	  <Key,Val,Map> when 'true' ->
	      let <KeyName> =
		  %% Line 2555
		  call 'erl_types':'t_var_name'
		      (Key)
	      in  %% Line 2556
		  apply 'enter_type'/3
		      (KeyName, Val, Map)
	end
'enter_type_lists'/3 =
    %% Line 2558
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Key|KeyTail],[Val|ValTail],Map> when 'true' ->
	      let <Map1> =
		  %% Line 2559
		  apply 'enter_type'/3
		      (Key, Val, Map)
	      in  %% Line 2560
		  apply 'enter_type_lists'/3
		      (KeyTail, ValTail, Map1)
	  %% Line 2561
	  <[],[],Map> when 'true' ->
	      %% Line 2562
	      Map
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'enter_type_lists',3}}] )
	    -| ['compiler_generated'] )
	end
'enter_type_list'/2 =
    %% Line 2564
    fun (_cor1,_cor0) ->
	%% Line 2565
	apply 'enter_type_list'/3
	    (_cor1, _cor0, [])
'enter_type_list'/3 =
    %% Line 2567
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{Key,Val}|Tail],Map,U0> when 'true' ->
	      %% Line 2568
	      case apply 'enter_type2'/3
		       (Key, Val, Map) of
		<{Map1,U1}> when 'true' ->
		    let <_cor4> =
			%% Line 2569
			call 'erlang':'++'
			    (U1, U0)
		    in  %% Line 2569
			apply 'enter_type_list'/3
			    (Tail, Map1, _cor4)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2570
	  <[],Map,U> when 'true' ->
	      let <_cor5> =
		  %% Line 2571
		  call 'ordsets':'from_list'
		      (U)
	      in  %% Line 2571
		  {Map,_cor5}
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enter_type_list',3}}] )
	    -| ['compiler_generated'] )
	end
'enter_type2'/3 =
    %% Line 2573
    fun (_cor2,_cor1,_cor0) ->
	let <Map1> =
	    %% Line 2574
	    apply 'enter_type'/3
		(_cor2, _cor1, _cor0)
	in  let <_cor4> =
		%% Line 2575
		apply 'is_same'/3
		    (_cor2, _cor0, Map1)
	    in  let <_cor6> =
		    %% Line 2575
		    ( case _cor4 of
			<'false'> when 'true' ->
			    ( [_cor2|[]]
			      -| ['compiler_generated'] )
			( <'true'> when 'true' ->
			      []
			  -| ['compiler_generated'] )
			( <_cor_variable> when 'true' ->
			      call 'erlang':'error'
				  ('badarg')
			  -| ['compiler_generated'] )
		      end
		      -| ['list_comprehension'] )
		in  %% Line 2575
		    {Map1,_cor6}
'map_store'/3 =
    %% Line 2577
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2579
	call 'dict':'store'
	    (_cor2, _cor1, _cor0)
'erase_type'/2 =
    %% Line 2581
    fun (_cor1,_cor0) ->
	%% Line 2582
	call 'dict':'erase'
	    (_cor1, _cor0)
'lookup_type_list'/2 =
    %% Line 2584
    fun (_cor1,_cor0) ->
	%% Line 2585
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[X|_cor3]> when 'true' ->
			    let <_cor5> =
				apply 'lookup_type'/2
				    (X, _cor0)
			    in  let <_cor6> =
				    apply 'lc$^0'/1
					(_cor3)
				in  ( [_cor5|_cor6]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor1)
	  -| ['list_comprehension'] )
'unsafe_lookup_type'/2 =
    %% Line 2587
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2588
	    call 'erl_types':'t_var_name'
		(_cor1)
	in  %% Line 2588
	    case call 'dict':'find'
		     (_cor2, _cor0) of
	      %% Line 2589
	      <{'ok',Type}> when 'true' ->
		  Type
	      %% Line 2590
	      <'error'> when 'true' ->
		  call 'erl_types':'t_none'
		      ()
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor3})
		-| ['compiler_generated'] )
	    end
'unsafe_lookup_type_list'/2 =
    %% Line 2593
    fun (_cor1,_cor0) ->
	%% Line 2594
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[X|_cor3]> when 'true' ->
			    let <_cor5> =
				apply 'unsafe_lookup_type'/2
				    (X, _cor0)
			    in  let <_cor6> =
				    apply 'lc$^0'/1
					(_cor3)
				in  ( [_cor5|_cor6]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor1)
	  -| ['list_comprehension'] )
'lookup_type'/2 =
    %% Line 2596
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,Map>
	      when call 'erlang':'is_integer'
		    (Key) ->
	      %% Line 2597
	      case call 'dict':'find'
		       (Key, Map) of
		%% Line 2598
		<'error'> when 'true' ->
		    call 'erl_types':'t_any'
			()
		%% Line 2599
		<{'ok',Val}> when 'true' ->
		    Val
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2601
	  <{'fun_var',Fun,_cor5,_cor6},Map> when 'true' ->
	      %% Line 2602
	      apply Fun
		  (Map)
	  %% Line 2603
	  <Key,Map> when 'true' ->
	      %% Line 2608
	      call 'erl_types':'t_subst'
		  (Key, Map)
	end
'mk_var'/1 =
    %% Line 2611
    fun (_cor0) ->
	%% Line 2612
	case call 'cerl':'is_literal'
		 (_cor0) of
	  %% Line 2613
	  <'true'> when 'true' ->
	      _cor0
	  %% Line 2614
	  <'false'> when 'true' ->
	      %% Line 2615
	      case call 'cerl':'is_c_values'
		       (_cor0) of
		%% Line 2616
		<'true'> when 'true' ->
		    let <_cor1> =
			call 'cerl':'values_es'
			    (_cor0)
		    in  let <_cor2> =
			    apply 'mk_var_no_lit_list'/1
				(_cor1)
			in  call 'erl_types':'t_product'
				(_cor2)
		%% Line 2617
		<'false'> when 'true' ->
		    let <_cor3> =
			call 'cerl_trees':'get_label'
			    (_cor0)
		    in  call 'erl_types':'t_var'
			    (_cor3)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'mk_var_list'/1 =
    %% Line 2621
    fun (_cor0) ->
	%% Line 2622
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[X|_cor2]> when 'true' ->
			    let <_cor4> =
				apply 'mk_var'/1
				    (X)
			    in  let <_cor5> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [_cor4|_cor5]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'mk_var_no_lit'/1 =
    %% Line 2624
    fun (_cor0) ->
	%% Line 2625
	case call 'cerl':'is_literal'
		 (_cor0) of
	  %% Line 2626
	  <'true'> when 'true' ->
	      let <_cor1> =
		  call 'cerl':'concrete'
		      (_cor0)
	      in  call 'erl_types':'t_from_term'
		      (_cor1)
	  %% Line 2627
	  <'false'> when 'true' ->
	      apply 'mk_var'/1
		  (_cor0)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'mk_var_no_lit_list'/1 =
    %% Line 2630
    fun (_cor0) ->
	%% Line 2631
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[X|_cor2]> when 'true' ->
			    let <_cor4> =
				apply 'mk_var_no_lit'/1
				    (X)
			    in  let <_cor5> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [_cor4|_cor5]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'updated_vars_only'/3 =
    %% Line 2633
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2634
	( letrec
	      'lc$^0'/1 =
		  fun (_cor6) ->
		      case _cor6 of
			<[V|_cor4]> when 'true' ->
			    ( case apply 'is_same'/3
				       (V, _cor1, _cor0) of
				<'false'> when 'true' ->
				    let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [V|_cor7]
					  -| ['compiler_generated'] )
				( <'true'> when 'true' ->
				      apply 'lc$^0'/1
					  (_cor4)
				  -| ['compiler_generated'] )
				( <_cor_variable> when 'true' ->
				      call 'erlang':'error'
					  ('badarg')
				  -| ['compiler_generated'] )
			      end
			      -| ['list_comprehension'] )
			<[]> when 'true' ->
			    []
			( <_cor6> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor6})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor2)
	  -| ['list_comprehension'] )
'is_same'/3 =
    %% Line 2636
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 2637
	    apply 'lookup_type'/2
		(_cor2, _cor1)
	in  let <_cor3> =
		%% Line 2637
		apply 'lookup_type'/2
		    (_cor2, _cor0)
	    in  %% Line 2637
		apply 'is_equal'/2
		    (_cor4, _cor3)
'is_equal'/2 =
    %% Line 2639
    fun (_cor1,_cor0) ->
	%% Line 2640
	call 'erl_types':'t_is_equal'
	    (_cor1, _cor0)
'pp_map'/2 =
    %% Line 2642
    fun (_cor1,_cor0) ->
	%% Line 2643
	'ok'
'new_state'/6 =
    %% Line 2653
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 2654
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor8) ->
			  case _cor8 of
			    <[{MFA,{Var,_X_Fun},_X_Rec}|_cor7]> when 'true' ->
				let <_cor9> =
				    apply 'lc$^0'/1
					(_cor7)
				in  ( [{MFA,Var}|_cor9]
				      -| ['compiler_generated'] )
			    ( <[_cor6|_cor7]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor7)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor8> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor8})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor5)
	      -| ['list_comprehension'] )
	in  let <NameMap> =
		%% Line 2655
		call 'dict':'from_list'
		    (_cor10)
	    in  let <_cor17> =
		    %% Line 2656
		    ( letrec
			  'lc$^1'/1 =
			      fun (_cor15) ->
				  case _cor15 of
				    <[{MFA,_X_Var}|_cor14]> when 'true' ->
					let <_cor16> =
					    apply 'lc$^1'/1
						(_cor14)
					in  ( [MFA|_cor16]
					      -| ['compiler_generated'] )
				    ( <[_cor13|_cor14]> when 'true' ->
					  apply 'lc$^1'/1
					      (_cor14)
				      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor15> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor15})
					    -| [{'function_name',{'lc$^1',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lc$^1'/1
			      (_cor10)
		      -| ['list_comprehension'] )
		in  let <_cor24> =
			%% Line 2657
			( letrec
			      'lc$^2'/1 =
				  fun (_cor21) ->
				      case _cor21 of
					<[{_X_MFA,{_X_Var,Fun},_X_Rec}|_cor20]> when 'true' ->
					    let <_cor22> =
						apply 'mk_var'/1
						    (Fun)
					    in  let <_cor23> =
						    apply 'lc$^2'/1
							(_cor20)
						in  ( [_cor22|_cor23]
						      -| ['compiler_generated'] )
					( <[_cor19|_cor20]> when 'true' ->
					      apply 'lc$^2'/1
						  (_cor20)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor21> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor21})
						-| [{'function_name',{'lc$^2',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^2'/1
				  (_cor5)
			  -| ['list_comprehension'] )
		    in  let <_cor29> =
			    %% Line 2659
			    case _cor24 of
			      %% Line 2660
			      <[OneF|[]]> when 'true' ->
				  let <Label> =
				      %% Line 2661
				      call 'erl_types':'t_var_name'
					  (OneF)
				  in  %% Line 2662
				      case call 'dialyzer_callgraph':'is_self_rec'
					       (Label, _cor3) of
					%% Line 2663
					<'true'> when 'true' ->
					    OneF
					%% Line 2664
					<'false'> when 'true' ->
					    'false'
					( <_cor27> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor27})
					  -| ['compiler_generated'] )
				      end
			      %% Line 2666
			      <_X_Many> when 'true' ->
				  'false'
			    end
			in  let <_cor34> =
				call 'dict':'new'
				    ()
			    in  let <_cor33> =
				    call 'dict':'new'
					()
				in  let <_cor32> =
					call 'dict':'new'
					    ()
				    in  let <_cor31> =
					    %% Line 2669
					    call 'ordsets':'from_list'
						(_cor24)
					in  %% Line 2668
					    {'state',_cor3,[],{'d',_cor34},[],_cor33,'false','false','undefined',NameMap,_cor4,_cor29,_cor2,%% Line 2669
																	    {'d',_cor1},_cor32,_cor31,_cor17,_cor0}
'state__set_rec_dict'/2 =
    %% Line 2672
    fun (_cor1,_cor0) ->
	%% Line 2673
	case _cor1 of
	  <{'state',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22}> when 'true' ->
	      call 'erlang':'setelement'
		  (15, _cor1, _cor0)
	  ( <_cor23> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','state'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'state__set_in_match'/2 =
    %% Line 2675
    fun (_cor1,_cor0) ->
	%% Line 2676
	case _cor1 of
	  <{'state',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22}> when 'true' ->
	      call 'erlang':'setelement'
		  (7, _cor1, _cor0)
	  ( <_cor23> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','state'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'state__is_in_match'/1 =
    %% Line 2678
    fun (_cor0) ->
	case _cor0 of
	  <{'state',_cor2,_cor3,_cor4,_cor5,_cor6,Bool,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17}> when 'true' ->
	      %% Line 2679
	      Bool
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'state__is_in_match',1}}] )
	    -| ['compiler_generated'] )
	end
'state__set_in_guard'/2 =
    %% Line 2681
    fun (_cor1,_cor0) ->
	%% Line 2682
	case _cor1 of
	  <{'state',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22}> when 'true' ->
	      call 'erlang':'setelement'
		  (8, _cor1, _cor0)
	  ( <_cor23> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','state'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'state__is_in_guard'/1 =
    %% Line 2684
    fun (_cor0) ->
	case _cor0 of
	  <{'state',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,Bool,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17}> when 'true' ->
	      %% Line 2685
	      Bool
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'state__is_in_guard',1}}] )
	    -| ['compiler_generated'] )
	end
'state__get_fun_prototype'/3 =
    %% Line 2687
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2688
	case call 'erl_types':'t_is_fun'
		 (_cor2) of
	  %% Line 2689
	  <'true'> when 'true' ->
	      {_cor0,_cor2}
	  %% Line 2690
	  <'false'> when 'true' ->
	      let <_cor3> =
		  %% Line 2691
		  call 'erlang':'+'
		      (_cor1, 1)
	      in  %% Line 2691
		  case apply 'state__mk_vars'/2
			   (_cor3, _cor0) of
		    <{State1,[Ret|Args]}> when 'true' ->
			let <Fun> =
			    %% Line 2692
			    call 'erl_types':'t_fun'
				(Args, Ret)
			in  %% Line 2693
			    {State1,Fun}
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'state__lookup_rec_var_in_scope'/2 =
    %% Line 2696
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <MFA,{'state',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,NameMap,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}> when 'true' ->
	      %% Line 2697
	      call 'dict':'find'
		  (MFA, NameMap)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'state__lookup_rec_var_in_scope',2}}] )
	    -| ['compiler_generated'] )
	end
'state__store_fun_arity'/2 =
    %% Line 2699
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Tree,State = {'state',_cor10,_cor11,_cor12,_cor13,Map,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25}> when 'true' ->
	      let <_cor2> =
		  %% Line 2700
		  call 'cerl':'fun_vars'
		      (Tree)
	      in  let <Arity> =
		      %% Line 2700
		      call 'erlang':'length'
			  (_cor2)
		  in  let <Id> =
			  %% Line 2701
			  apply 'mk_var'/1
			      (Tree)
		      in  let <_rec24> =
			      %% Line 2702
			      call 'dict':'store'
				  (Id, Arity, Map)
			  in  %% Line 2702
			      call 'erlang':'setelement'
				  (6, State, _rec24)
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'state__store_fun_arity',2}}] )
	    -| ['compiler_generated'] )
	end
'state__fun_arity'/2 =
    %% Line 2704
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Id,{'state',_cor4,_cor5,_cor6,_cor7,Map,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}> when 'true' ->
	      %% Line 2705
	      call 'dict':'fetch'
		  (Id, Map)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'state__fun_arity',2}}] )
	    -| ['compiler_generated'] )
	end
'state__lookup_undef_var'/2 =
    %% Line 2707
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Tree,{'state',CG,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,Plt,_cor18,_cor19,_cor20,_cor21,_cor22}> when 'true' ->
	      let <Label> =
		  %% Line 2708
		  call 'cerl_trees':'get_label'
		      (Tree)
	      in  %% Line 2709
		  case call 'dialyzer_callgraph':'lookup_rec_var'
			   (Label, CG) of
		    %% Line 2710
		    <'error'> when 'true' ->
			'error'
		    %% Line 2711
		    <{'ok',MFA}> when 'true' ->
			%% Line 2712
			case call 'dialyzer_plt':'lookup'
				 (Plt, MFA) of
			  %% Line 2713
			  <'none'> when 'true' ->
			      'error'
			  %% Line 2714
			  <{'value',{RetType,ArgTypes}}> when 'true' ->
			      let <_cor3> =
				  %% Line 2715
				  call 'erl_types':'t_fun'
				      (ArgTypes, RetType)
			      in  %% Line 2715
				  {'ok',_cor3}
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor4})
			    -| ['compiler_generated'] )
			end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'state__lookup_undef_var',2}}] )
	    -| ['compiler_generated'] )
	end
'state__lookup_apply'/2 =
    %% Line 2719
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Tree,{'state',Callgraph,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22}> when 'true' ->
	      let <Apply> =
		  %% Line 2720
		  call 'cerl_trees':'get_label'
		      (Tree)
	      in  %% Line 2721
		  case call 'dialyzer_callgraph':'lookup_call_site'
			   (Apply, Callgraph) of
		    %% Line 2722
		    <'error'> when 'true' ->
			%% Line 2723
			'unknown'
		    %% Line 2724
		    <{'ok',List}> when 'true' ->
			%% Line 2725
			case call 'lists':'member'
				 ('external', List) of
			  %% Line 2726
			  <'true'> when 'true' ->
			      'unknown'
			  %% Line 2727
			  <'false'> when 'true' ->
			      List
			  ( <_cor3> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor3})
			    -| ['compiler_generated'] )
			end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'state__lookup_apply',2}}] )
	    -| ['compiler_generated'] )
	end
'get_apply_constr'/4 =
    %% Line 2731
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <FunLabels,Dst,ArgTypes,State = {'state',CG,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52}> when 'true' ->
	      let <_cor9> =
		  %% Line 2732
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor6) ->
				case _cor6 of
				  <[Label|_cor5]> when 'true' ->
				      let <_cor7> =
					  call 'dialyzer_callgraph':'lookup_name'
					      (Label, CG)
				      in  let <_cor8> =
					      apply 'lc$^0'/1
						  (_cor5)
					  in  ( [_cor7|_cor8]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor6> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor6})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (FunLabels)
		    -| ['list_comprehension'] )
	      in  %% Line 2733
		  case call 'lists':'member'
			   ('error', _cor9) of
		    %% Line 2734
		    <'true'> when 'true' ->
			'error'
		    %% Line 2735
		    <'false'> when 'true' ->
			let <_cor22> =
			    %% Line 2737
			    ( letrec
				  'lc$^1'/1 =
				      fun (_cor13) ->
					  case _cor13 of
					    <[%% Line 2744
					      {'ok',MFA}|_cor12]> when 'true' ->
						let <State1> =
						    %% Line 2738
						    apply 'state__new_constraint_context'/1
							(State)
						in  let <_cor20> =
							%% Line 2739
							try
							    apply 'get_plt_constr'/4
								(MFA, Dst, ArgTypes, State1)
							of <_cor15> ->
							    %% Line 2740
							    apply 'state__cs'/1
								(_cor15)
							catch <_cor19,_cor18,_cor17> ->
							    case <_cor19,_cor18,_cor17> of
							      %% Line 2742
							      <'throw','error',_cor53> when 'true' ->
								  'error'
							      ( <_cor19,_cor18,_cor17> when 'true' ->
								    primop 'raise'
									(_cor17, _cor18)
								-| ['compiler_generated'] )
							    end
						    in  let <_cor21> =
							    %% Line 2744
							    apply 'lc$^1'/1
								(_cor12)
							in  ( [_cor20|_cor21]
							      -| ['compiler_generated'] )
					    ( <[_cor11|_cor12]> when 'true' ->
						  %% Line 2744
						  apply 'lc$^1'/1
						      (_cor12)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor13> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor13})
						    -| [{'function_name',{'lc$^1',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^1'/1
				      (_cor9)
			      -| ['list_comprehension'] )
			in  let <_cor28> =
				%% Line 2745
				( letrec
				      'lc$^2'/1 =
					  fun (_cor26) ->
					      case _cor26 of
						<[C|_cor25]>
						    when call 'erlang':'=/='
							  (C,
							   'error') ->
						    let <_cor27> =
							apply 'lc$^2'/1
							    (_cor25)
						    in  ( [C|_cor27]
							  -| ['compiler_generated'] )
						( <[C|_cor25]> when 'true' ->
						      apply 'lc$^2'/1
							  (_cor25)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor26> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor26})
							-| [{'function_name',{'lc$^2',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^2'/1
					  (_cor22)
				  -| ['list_comprehension'] )
			    in  %% Line 2745
				case _cor28 of
				  %% Line 2746
				  <[]> when 'true' ->
				      call 'erlang':'throw'
					  ('error')
				  %% Line 2747
				  <Constrs> when 'true' ->
				      let <ApplyConstr> =
					  %% Line 2748
					  apply 'mk_disj_constraint_list'/1
					      (Constrs)
				      in  let <_cor30> =
					      %% Line 2749
					      apply 'state__store_conj'/2
						  (ApplyConstr, State)
					  in  %% Line 2749
					      {'ok',_cor30}
				end
		    ( <_cor32> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor32})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor36,_cor35,_cor34,_cor33> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor36,_cor35,_cor34,_cor33})
		  -| [{'function_name',{'get_apply_constr',4}}] )
	    -| ['compiler_generated'] )
	end
'state__scc'/1 =
    %% Line 2753
    fun (_cor0) ->
	case _cor0 of
	  <{'state',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,SCC,_cor16,_cor17}> when 'true' ->
	      %% Line 2754
	      SCC
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'state__scc',1}}] )
	    -| ['compiler_generated'] )
	end
'state__add_fun_to_scc'/2 =
    %% Line 2756
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Fun,State = {'state',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,SCC,_cor21,_cor22}> when 'true' ->
	      let <_rec26> =
		  %% Line 2757
		  call 'ordsets':'add_element'
		      (Fun, SCC)
	      in  %% Line 2757
		  call 'erlang':'setelement'
		      (16, State, _rec26)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'state__add_fun_to_scc',2}}] )
	    -| ['compiler_generated'] )
	end
'state__plt'/1 =
    %% Line 2759
    fun (_cor0) ->
	case _cor0 of
	  <{'state',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,PLT,_cor13,_cor14,_cor15,_cor16,_cor17}> when 'true' ->
	      %% Line 2760
	      PLT
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'state__plt',1}}] )
	    -| ['compiler_generated'] )
	end
'state__new_constraint_context'/1 =
    %% Line 2762
    fun (_cor0) ->
	%% Line 2763
	case _cor0 of
	  <{'state',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20}> when 'true' ->
	      call 'erlang':'setelement'
		  (3, _cor0, [])
	  ( <_cor21> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','state'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'state__prop_domain'/2 =
    %% Line 2765
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <FunLabel,{'state',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,{'e',ETSPropTypes},_cor24,_cor25,_cor26,_cor27}> when 'true' ->
	      %% Line 2766
	      try
		  call 'ets':'lookup_element'
		      (ETSPropTypes, FunLabel, 2)
	      of <_cor2> ->
		  case _cor2 of
		    %% Line 2767
		    <{_X_Range_Fun,Dom}> when 'true' ->
			{'ok',Dom}
		    %% Line 2768
		    <FunType> when 'true' ->
			let <_cor3> =
			    call 'erl_types':'t_fun_args'
				(FunType)
			in  {'ok',_cor3}
		  end
	      catch <_cor7,_cor6,_cor5> ->
		  %% Line 2770
		  'error'
	  %% Line 2772
	  <FunLabel,{'state',_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,{'d',PropTypes},_cor43,_cor44,_cor45,_cor46}> when 'true' ->
	      %% Line 2773
	      case call 'dict':'find'
		       (FunLabel, PropTypes) of
		%% Line 2774
		<'error'> when 'true' ->
		    'error'
		%% Line 2775
		<{'ok',{_X_Range_Fun,Dom}}> when 'true' ->
		    {'ok',Dom}
		%% Line 2776
		<{'ok',FunType}> when 'true' ->
		    let <_cor8> =
			call 'erl_types':'t_fun_args'
			    (FunType)
		    in  {'ok',_cor8}
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'state__prop_domain',2}}] )
	    -| ['compiler_generated'] )
	end
'state__add_prop_constrs'/2 =
    %% Line 2779
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Tree,State = {'state',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,{'d',PropTypes},_cor21,_cor22,_cor23,_cor24}> when 'true' ->
	      let <Label> =
		  %% Line 2780
		  call 'cerl_trees':'get_label'
		      (Tree)
	      in  %% Line 2781
		  case call 'dict':'find'
			   (Label, PropTypes) of
		    %% Line 2782
		    <'error'> when 'true' ->
			State
		    %% Line 2783
		    <{'ok',FunType}> when 'true' ->
			%% Line 2784
			case call 'erl_types':'t_fun_args'
				 (FunType) of
			  %% Line 2785
			  <'unknown'> when 'true' ->
			      State
			  %% Line 2786
			  <ArgTypes> when 'true' ->
			      %% Line 2787
			      case call 'erl_types':'any_none'
				       (ArgTypes) of
				%% Line 2788
				<'true'> when 'true' ->
				    'not_called'
				%% Line 2789
				<'false'> when 'true' ->
				    let <FunVar> =
					%% Line 2792
					apply 'mk_var'/1
					    (Tree)
				    in  %% Line 2793
					apply 'state__store_conj'/4
					    (FunVar, 'sub', FunType, State)
				( <_cor4> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor4})
				  -| ['compiler_generated'] )
			      end
			end
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'state__add_prop_constrs',2}}] )
	    -| ['compiler_generated'] )
	end
'state__cs'/1 =
    %% Line 2798
    fun (_cor0) ->
	case _cor0 of
	  <{'state',_cor2,Cs,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17}> when 'true' ->
	      %% Line 2799
	      apply 'mk_conj_constraint_list'/1
		  (Cs)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'state__cs',1}}] )
	    -| ['compiler_generated'] )
	end
'state__store_conj'/2 =
    %% Line 2801
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <C,State = {'state',_cor7,Cs,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22}> when 'true' ->
	      let <_rec29> =
		  %% Line 2802
		  [C|Cs]
	      in  %% Line 2802
		  call 'erlang':'setelement'
		      (3, State, _rec29)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'state__store_conj',2}}] )
	    -| ['compiler_generated'] )
	end
'state__store_conj_list'/2 =
    %% Line 2804
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],State> when 'true' ->
	      let <State1> =
		  %% Line 2805
		  apply 'state__store_conj'/2
		      (H, State)
	      in  %% Line 2806
		  apply 'state__store_conj_list'/2
		      (T, State1)
	  %% Line 2807
	  <[],State> when 'true' ->
	      %% Line 2808
	      State
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'state__store_conj_list',2}}] )
	    -| ['compiler_generated'] )
	end
'state__store_conj'/4 =
    %% Line 2810
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Lhs,Op,Rhs,State = {'state',_cor12,Cs,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27}> when 'true' ->
	      let <_cor4> =
		  %% Line 2811
		  apply 'mk_constraint'/3
		      (Lhs, Op, Rhs)
	      in  let <_rec31> =
		      %% Line 2811
		      [_cor4|Cs]
		  in  %% Line 2811
		      call 'erlang':'setelement'
			  (3, State, _rec31)
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'state__store_conj',4}}] )
	    -| ['compiler_generated'] )
	end
'state__store_conj_lists'/4 =
    %% Line 2813
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2814
	case apply 'strip_of_any_constrs'/2
		 (_cor3, _cor1) of
	  <{NewList1,NewList2}> when 'true' ->
	      %% Line 2815
	      apply 'state__store_conj_lists_1'/4
		  (NewList1, _cor2, NewList2, _cor0)
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'strip_of_any_constrs'/2 =
    %% Line 2817
    fun (_cor1,_cor0) ->
	%% Line 2818
	apply 'strip_of_any_constrs'/4
	    (_cor1, _cor0, [], [])
'strip_of_any_constrs'/4 =
    %% Line 2820
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[T1|Left1],[T2|Left2],Acc1,Acc2> when 'true' ->
	      let <_cor6> =
		  %% Line 2821
		  ( case call 'erl_types':'t_is_any'
			     (T1) of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    'true'
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    apply 'constraint_opnd_is_any'/1
				(T2)
			-| ['compiler_generated'] )
		      ( <_cor4> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_cor4}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      in  %% Line 2821
		  case _cor6 of
		    %% Line 2822
		    <'true'> when 'true' ->
			apply 'strip_of_any_constrs'/4
			    (Left1, Left2, Acc1, Acc2)
		    %% Line 2823
		    <'false'> when 'true' ->
			apply 'strip_of_any_constrs'/4
			    (Left1, Left2, [T1|Acc1], [T2|Acc2])
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2825
	  <[],[],Acc1,Acc2> when 'true' ->
	      %% Line 2826
	      {Acc1,Acc2}
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'strip_of_any_constrs',4}}] )
	    -| ['compiler_generated'] )
	end
'state__store_conj_lists_1'/4 =
    %% Line 2828
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Arg1|Arg1Tail],Op,[Arg2|Arg2Tail],State> when 'true' ->
	      let <State1> =
		  %% Line 2829
		  apply 'state__store_conj'/4
		      (Arg1, Op, Arg2, State)
	      in  %% Line 2830
		  apply 'state__store_conj_lists_1'/4
		      (Arg1Tail, Op, Arg2Tail, State1)
	  %% Line 2831
	  <[],_X_Op,[],State> when 'true' ->
	      %% Line 2832
	      State
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'state__store_conj_lists_1',4}}] )
	    -| ['compiler_generated'] )
	end
'state__mk_var'/1 =
    %% Line 2834
    fun (_cor0) ->
	case _cor0 of
	  <State = {'state',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,NL,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22}> when 'true' ->
	      let <_rec33> =
		  %% Line 2835
		  call 'erlang':'+'
		      (NL, 1)
	      in  let <_cor5> =
		      %% Line 2835
		      call 'erlang':'setelement'
			  (11, State, _rec33)
		  in  let <_cor1> =
			  %% Line 2835
			  call 'erl_types':'t_var'
			      (NL)
		      in  %% Line 2835
			  {_cor5,_cor1}
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'state__mk_var',1}}] )
	    -| ['compiler_generated'] )
	end
'state__mk_vars'/2 =
    %% Line 2837
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <N,State = {'state',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,NL,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32}> when 'true' ->
	      let <NewLabel> =
		  %% Line 2838
		  call 'erlang':'+'
		      (NL, N)
	      in  let <_cor10> =
		      %% Line 2839
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor7) ->
				    case _cor7 of
				      <[X|_cor4]> when 'true' ->
					  let <_cor8> =
					      call 'erl_types':'t_var'
						  (X)
					  in  let <_cor9> =
						  apply 'lc$^0'/1
						      (_cor4)
					      in  ( [_cor8|_cor9]
						    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor7> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor7})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  let <_cor5> =
				call 'erlang':'-'
				    (NewLabel, 1)
			    in  let <_cor6> =
				    call 'lists':'seq'
					(NL, _cor5)
				in  apply 'lc$^0'/1
					(_cor6)
			-| ['list_comprehension'] )
		  in  let <_cor14> =
			  %% Line 2840
			  call 'erlang':'setelement'
			      (11, State, NewLabel)
		      in  %% Line 2840
			  {_cor14,_cor10}
	  ( <_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15})
		  -| [{'function_name',{'state__mk_vars',2}}] )
	    -| ['compiler_generated'] )
	end
'state__store_constrs'/3 =
    %% Line 2842
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Id,Cs,State = {'state',_cor10,_cor11,{'d',Dict},_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25}> when 'true' ->
	      let <NewDict> =
		  %% Line 2843
		  call 'dict':'store'
		      (Id, Cs, Dict)
	      in  let <_rec36> = {%% Line 2844
		       'd',%% Line 2844
			   NewDict}
		  in  %% Line 2844
		      call 'erlang':'setelement'
			  (4, State, _rec36)
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'state__store_constrs',3}}] )
	    -| ['compiler_generated'] )
	end
'state__get_cs'/2 =
    %% Line 2846
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Var,{'state',_cor4,_cor5,{'e',ETSDict},_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}> when 'true' ->
	      %% Line 2847
	      call 'ets':'lookup_element'
		  (ETSDict, Var, 2)
	  %% Line 2848
	  <Var,{'state',_cor20,_cor21,{'d',Dict},_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35}> when 'true' ->
	      %% Line 2849
	      call 'dict':'fetch'
		  (Var, Dict)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'state__get_cs',2}}] )
	    -| ['compiler_generated'] )
	end
'state__is_self_rec'/2 =
    %% Line 2851
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Fun,{'state',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,SelfRec,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22}> when 'true' ->
	      %% Line 2852
	      ( case <> of
		  ( <>
			when call 'erlang':'=:='
			      (SelfRec,
			       'false') ->
			'false'
		    -| ['compiler_generated'] )
		  ( <> when 'true' ->
			apply 'is_equal'/2
			    (Fun, SelfRec)
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'state__is_self_rec',2}}] )
	    -| ['compiler_generated'] )
	end
'state__store_funs'/3 =
    %% Line 2854
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Vars0,Funs0,State = {'state',_cor17,_cor18,_cor19,Map,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32}> when 'true' ->
	      do  %% Line 2855
		  apply 'debug_make_name_map'/2
		      (Vars0, Funs0)
		  let <Vars> =
		      %% Line 2856
		      apply 'mk_var_list'/1
			  (Vars0)
		  in  let <Funs> =
			  %% Line 2857
			  apply 'mk_var_list'/1
			      (Funs0)
		      in  let <_cor10> =
			      %% Line 2858
			      ( fun (_cor7,_cor6) ->
				    case <_cor7,_cor6> of
				      <{Var,Fun},MP> when 'true' ->
					  call 'orddict':'store'
					      (Var, Fun, MP)
				      ( <_cor9,_cor8> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor9,_cor8})
					      -| [{'function_name',{'-state__store_funs/3-fun-0-',2}}] )
					-| ['compiler_generated'] )
				    end
				-| [{'id',{0,0,'-state__store_funs/3-fun-0-'}}] )
			  in  let <_cor5> =
				  %% Line 2859
				  call 'lists':'zip'
				      (Vars, Funs)
			      in  let <NewMap> =
				      %% Line 2858
				      call 'lists':'foldl'
					  (_cor10, %% Line 2859
						   Map, _cor5)
				  in  %% Line 2860
				      call 'erlang':'setelement'
					  (5, State, NewMap)
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'state__store_funs',3}}] )
	    -| ['compiler_generated'] )
	end
'state__get_rec_var'/2 =
    %% Line 2862
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Fun,{'state',_cor10,_cor11,_cor12,Map,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25}> when 'true' ->
	      let <_cor6> =
		  %% Line 2863
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[{V,FV}|_cor3]>
				      when call 'erlang':'=:='
					    (FV,
					     Fun) ->
				      let <_cor5> =
					  apply 'lc$^0'/1
					      (_cor3)
				      in  ( [V|_cor5]
					    -| ['compiler_generated'] )
				  ( <[_cor2|_cor3]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor3)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Map)
		    -| ['list_comprehension'] )
	      in  %% Line 2863
		  case _cor6 of
		    %% Line 2864
		    <[Var|[]]> when 'true' ->
			{'ok',Var}
		    %% Line 2865
		    <[]> when 'true' ->
			'error'
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'state__get_rec_var',2}}] )
	    -| ['compiler_generated'] )
	end
'state__finalize'/1 =
    %% Line 2868
    fun (_cor0) ->
	let <State1> =
	    %% Line 2869
	    apply 'enumerate_constraints'/1
		(_cor0)
	in  %% Line 2870
	    apply 'order_fun_constraints'/1
		(State1)
'mk_constraint'/3 =
    %% Line 2882
    fun (_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 2883
	    ( case call 'erl_types':'t_is_any'
		       (_cor2) of
		( <( 'true'
		     -| ['compiler_generated'] )> when 'true' ->
		      'true'
		  -| ['compiler_generated'] )
		( <( 'false'
		     -| ['compiler_generated'] )> when 'true' ->
		      apply 'constraint_opnd_is_any'/1
			  (_cor0)
		  -| ['compiler_generated'] )
		( <_cor3> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {( 'badarg'
				  -| ['compiler_generated'] ),_cor3}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
	in  %% Line 2883
	    case _cor5 of
	      %% Line 2884
	      <'false'> when 'true' ->
		  let <Deps> =
		      %% Line 2885
		      apply 'find_constraint_deps'/1
			  ([_cor2|[_cor0|[]]])
		  in  let <C0> =
			  %% Line 2886
			  apply 'mk_constraint_1'/3
			      (_cor2, _cor1, _cor0)
		      in  %% Line 2887
			  case C0 of
			    <{'constraint',_cor19,_cor20,_cor21,_cor22}> when 'true' ->
				let <_cor10> =
				    call 'erlang':'setelement'
					(5, C0, Deps)
				in  %% Line 2888
				    case <> of
				      %% Line 2889
				      <>
					  when call 'erlang':'=:='
						(Deps,
						 []) ->
					  let <_cor12> =
					      %% Line 2891
					      apply 'map_new'/0
						  ()
					  in  %% Line 2891
					      case apply 'solve_one_c'/2
						       (_cor10, _cor12) of
						%% Line 2892
						<'error'> when 'true' ->
						    call 'erlang':'throw'
							('error')
						%% Line 2893
						<_X_R> when 'true' ->
						    _cor10
					      end
				      %% Line 2897
				      <> when 'true' ->
					  _cor10
				    end
			    ( <_cor23> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','constraint'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
	      %% Line 2900
	      <'true'> when 'true' ->
		  %% Line 2901
		  apply 'mk_constraint_any'/1
		      (_cor1)
	      ( <_cor15> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor15})
		-| ['compiler_generated'] )
	    end
'mk_constraint_any'/1 =
    %% Line 2904
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 2905
	    call 'erl_types':'t_any'
		()
	in  let <_cor1> =
		%% Line 2905
		call 'erl_types':'t_any'
		    ()
	    in  let <C> =
		    %% Line 2905
		    apply 'mk_constraint_1'/3
			(_cor2, _cor0, _cor1)
		in  %% Line 2906
		    case C of
		      <{'constraint',_cor7,_cor8,_cor9,_cor10}> when 'true' ->
			  call 'erlang':'setelement'
			      (5, C, [])
		      ( <_cor11> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','constraint'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
'constraint_opnd_is_any'/1 =
    %% Line 2912
    fun (_cor0) ->
	case _cor0 of
	  <{'fun_var',_cor2,_cor3,_cor4}> when 'true' ->
	      'false'
	  %% Line 2913
	  <Type> when 'true' ->
	      call 'erl_types':'t_is_any'
		  (Type)
	end
'mk_fun_var'/2 =
    %% Line 2929
    fun (_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 2930
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor6) ->
			  case _cor6 of
			    <[Var|_cor3]> when 'true' ->
				let <_cor7> =
				    call 'erl_types':'t_var_name'
					(Var)
				in  let <_cor8> =
					apply 'lc$^0'/1
					    (_cor3)
				    in  ( [_cor7|_cor8]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor6> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor6})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  let <_cor4> =
		      call 'erl_types':'t_product'
			  (_cor0)
		  in  let <_cor5> =
			  call 'erl_types':'t_collect_vars'
			      (_cor4)
		      in  apply 'lc$^0'/1
			      (_cor5)
	      -| ['list_comprehension'] )
	in  let <_cor11> =
		%% Line 2931
		call 'ordsets':'from_list'
		    (_cor9)
	    in  %% Line 2931
		{'fun_var',_cor1,_cor11,'undefined'}
'get_deps'/1 =
    %% Line 2937
    fun (_cor0) ->
	case _cor0 of
	  <{'constraint',_cor2,_cor3,_cor4,D}> when 'true' ->
	      D
	  %% Line 2938
	  <{'constraint_list',_cor5,_cor6,D,_cor7,_cor8}> when 'true' ->
	      D
	  %% Line 2939
	  <{'constraint_ref',_cor9,D}> when 'true' ->
	      D
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_deps',1}}] )
	    -| ['compiler_generated'] )
	end
'find_constraint_deps'/1 =
    %% Line 2943
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2944
	    apply 'find_constraint_deps'/2
		(_cor0, [])
	in  %% Line 2944
	    call 'ordsets':'from_list'
		(_cor1)
'find_constraint_deps'/2 =
    %% Line 2946
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'fun_var',_cor12,Deps,_cor13}|Tail],Acc> when 'true' ->
	      %% Line 2947
	      apply 'find_constraint_deps'/2
		  (Tail, [Deps|Acc])
	  %% Line 2948
	  <[Type|Tail],Acc> when 'true' ->
	      let <_cor8> =
		  %% Line 2949
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor5) ->
				case _cor5 of
				  <[D|_cor3]> when 'true' ->
				      let <_cor6> =
					  call 'erl_types':'t_var_name'
					      (D)
				      in  let <_cor7> =
					      apply 'lc$^0'/1
						  (_cor3)
					  in  ( [_cor6|_cor7]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor5> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor5})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor4> =
			    call 'erl_types':'t_collect_vars'
				(Type)
			in  apply 'lc$^0'/1
				(_cor4)
		    -| ['list_comprehension'] )
	      in  let <NewAcc> =
		      %% Line 2949
		      [_cor8|Acc]
		  in  %% Line 2950
		      apply 'find_constraint_deps'/2
			  (Tail, NewAcc)
	  %% Line 2951
	  <[],Acc> when 'true' ->
	      %% Line 2952
	      call 'lists':'flatten'
		  (Acc)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'find_constraint_deps',2}}] )
	    -| ['compiler_generated'] )
	end
'mk_constraint_1'/3 =
    %% Line 2954
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Lhs,'eq',Rhs>
	      when call 'erlang':'<'
		    (Lhs,
		     Rhs) ->
	      %% Line 2955
	      {'constraint',Lhs,'eq',Rhs,'undefined'}
	  %% Line 2956
	  <Lhs,'eq',Rhs> when 'true' ->
	      %% Line 2957
	      {'constraint',Rhs,'eq',Lhs,'undefined'}
	  %% Line 2958
	  <Lhs,Op,Rhs> when 'true' ->
	      %% Line 2959
	      {'constraint',Lhs,Op,Rhs,'undefined'}
	end
'mk_constraints'/3 =
    %% Line 2961
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Lhs|LhsTail],Op,[Rhs|RhsTail]> when 'true' ->
	      let <_cor3> =
		  %% Line 2962
		  apply 'mk_constraint'/3
		      (Lhs, Op, Rhs)
	      in  let <_cor4> =
		      %% Line 2963
		      apply 'mk_constraints'/3
			  (LhsTail, Op, RhsTail)
		  in  %% Line 2962
		      [_cor3|_cor4]
	  %% Line 2964
	  <[],_X_Op,[]> when 'true' ->
	      %% Line 2965
	      []
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'mk_constraints',3}}] )
	    -| ['compiler_generated'] )
	end
'mk_constraint_ref'/2 =
    %% Line 2967
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2969
	    call 'erl_types':'t_var_name'
		(_cor1)
	in  let <Ds> =
		%% Line 2969
		call 'ordsets':'del_element'
		    (_cor2, _cor0)
	    in  %% Line 2970
		{'constraint_ref',_cor1,Ds}
'mk_constraint_list'/2 =
    %% Line 2972
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2973
	    apply 'lift_lists'/2
		(_cor1, _cor0)
	in  let <List1> =
		%% Line 2973
		call 'ordsets':'from_list'
		    (_cor2)
	    in  let <_cor7> =
		    %% Line 2974
		    ( fun (_cor5) ->
			  let <_cor4> =
			      apply 'get_deps'/1
				  (_cor5)
			  in  call 'erlang':'=/='
				  (_cor4, [])
		      -| [{'id',{0,0,'-mk_constraint_list/2-fun-0-'}}] )
		in  let <List2> =
			%% Line 2974
			call 'ordsets':'filter'
			    (_cor7, List1)
		    in  let <Deps> =
			    %% Line 2975
			    apply 'calculate_deps'/1
				(List2)
			in  %% Line 2976
			    case <> of
			      %% Line 2977
			      <>
				  when call 'erlang':'=:='
					(Deps,
					 []) ->
				  let <_cor10> =
				      %% Line 2978
				      apply 'mk_constraint_any'/1
					  ('eq')
				  in  {'constraint_list','conj',%% Line 2978
								[_cor10|[]],%% Line 2979
									    [],'undefined','undefined'}
			      %% Line 2980
			      <> when 'true' ->
				  {'constraint_list',_cor1,List2,Deps,'undefined','undefined'}
			    end
'lift_lists'/2 =
    %% Line 2983
    fun (_cor1,_cor0) ->
	%% Line 2984
	apply 'lift_lists'/3
	    (_cor1, _cor0, [])
'lift_lists'/3 =
    %% Line 2986
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Type,[{'constraint_list',_cor7,List,_cor8,_cor9,_cor10}|Tail],Acc>
	      when call 'erlang':'=:='
		    (_cor7,
		     Type) ->
	      let <_cor3> =
		  %% Line 2987
		  call 'erlang':'++'
		      (List, Acc)
	      in  %% Line 2987
		  apply 'lift_lists'/3
		      (Type, Tail, _cor3)
	  %% Line 2988
	  <Type,[C|Tail],Acc> when 'true' ->
	      %% Line 2989
	      apply 'lift_lists'/3
		  (Type, Tail, [C|Acc])
	  %% Line 2990
	  <_X_Type,[],Acc> when 'true' ->
	      %% Line 2991
	      Acc
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'lift_lists',3}}] )
	    -| ['compiler_generated'] )
	end
'update_constraint_list'/2 =
    %% Line 2993
    fun (_cor1,_cor0) ->
	%% Line 2994
	case _cor1 of
	  <{'constraint_list',_cor6,_cor7,_cor8,_cor9,_cor10}> when 'true' ->
	      call 'erlang':'setelement'
		  (3, _cor1, _cor0)
	  ( <_cor11> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','constraint_list'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'mk_disj_norm_form'/1 =
    %% Line 3021
    fun (_cor0) ->
	case _cor0 of
	  <CL = {'constraint_list',_cor7,_cor8,_cor9,_cor10,_cor11}> when 'true' ->
	      %% Line 3022
	      try
		  let <List1> =
		      %% Line 3023
		      apply 'expand_to_conjunctions'/1
			  (CL)
		  in  %% Line 3024
		      apply 'mk_disj_constraint_list'/1
			  (List1)
	      of <_cor2> ->
		  _cor2
	      catch <_cor5,_cor4,_cor3> ->
		  case <_cor5,_cor4,_cor3> of
		    %% Line 3026
		    <'throw','too_many_disj',_cor12> when 'true' ->
			CL
		    ( <_cor5,_cor4,_cor3> when 'true' ->
			  primop 'raise'
			      (_cor3, _cor4)
		      -| ['compiler_generated'] )
		  end
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'mk_disj_norm_form',1}}] )
	    -| ['compiler_generated'] )
	end
'expand_to_conjunctions'/1 =
    %% Line 3029
    fun (_cor0) ->
	case _cor0 of
	  <{'constraint_list','conj',List,_cor47,_cor48,_cor49}> when 'true' ->
	      let <_cor6> =
		  %% Line 3030
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor3) ->
				case _cor3 of
				  <[C|_cor2]> when 'true' ->
				      ( case apply 'is_simple_constraint'/1
						 (C) of
					  <'true'> when 'true' ->
					      let <_cor4> =
						  apply 'lc$^0'/1
						      (_cor2)
					      in  ( [C|_cor4]
						    -| ['compiler_generated'] )
					  ( <'false'> when 'true' ->
						apply 'lc$^0'/1
						    (_cor2)
					    -| ['compiler_generated'] )
					  ( <_cor5> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor5})
					    -| ['compiler_generated'] )
					end
					-| ['list_comprehension'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor3> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor3})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (List)
		    -| ['list_comprehension'] )
	      in  let <_cor13> =
		      %% Line 3031
		      ( letrec
			    'lc$^1'/1 =
				fun (_cor10) ->
				    case _cor10 of
				      <[C = {'constraint_list',_cor50,_cor51,_cor52,_cor53,_cor54}|_cor9]> when 'true' ->
					  let <_cor11> =
					      apply 'expand_to_conjunctions'/1
						  (C)
					  in  let <_cor12> =
						  apply 'lc$^1'/1
						      (_cor9)
					      in  ( [_cor11|_cor12]
						    -| ['compiler_generated'] )
				      ( <[_cor8|_cor9]> when 'true' ->
					    apply 'lc$^1'/1
						(_cor9)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor10> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor10})
					      -| [{'function_name',{'lc$^1',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^1'/1
				(List)
			-| ['list_comprehension'] )
		  in  %% Line 3032
		      case <> of
			%% Line 3033
			<>
			    when call 'erlang':'=:='
				  (_cor13,
				   []) ->
			    let <_cor15> =
				apply 'mk_conj_constraint_list'/1
				    (_cor6)
			    in  [_cor15|[]]
			%% Line 3034
			<> when 'true' ->
			    %% Line 3035
			    case _cor13 of
			      %% Line 3036
			      <[JustOneList|[]]> when 'true' ->
				  %% Line 3037
				  ( letrec
					'lc$^2'/1 =
					    fun (_cor18) ->
						case _cor18 of
						  <[L|_cor17]> when 'true' ->
						      let <_cor19> =
							  apply 'mk_conj_constraint_list'/1
							      ([L|_cor6])
						      in  let <_cor20> =
							      apply 'lc$^2'/1
								  (_cor17)
							  in  ( [_cor19|_cor20]
								-| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_cor18> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor18})
							  -| [{'function_name',{'lc$^2',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  apply 'lc$^2'/1
					    (JustOneList)
				    -| ['list_comprehension'] )
			      %% Line 3038
			      <_cor55> when 'true' ->
				  %% Line 3039
				  apply 'combine_conj_lists'/2
				      (_cor13, _cor6)
			    end
		      end
	  %% Line 3042
	  <{'constraint_list','disj',List,_cor56,_cor57,_cor58}> when 'true' ->
	      do  %% Line 3043
		  case <> of
		    <>
			when try
			      let <_cor23> =
				  call 'erlang':'length'
				      (List)
			      in  call 'erlang':'>'
				      (_cor23, 28)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			call 'erlang':'throw'
			    ('too_many_disj')
		    %% Line 3044
		    <> when 'true' ->
			'ok'
		  end
		  let <_cor29> =
		      %% Line 3046
		      ( letrec
			    'lc$^3'/1 =
				fun (_cor26) ->
				    case _cor26 of
				      <[C|_cor25]> when 'true' ->
					  ( case apply 'is_simple_constraint'/1
						     (C) of
					      <'true'> when 'true' ->
						  let <_cor27> =
						      apply 'lc$^3'/1
							  (_cor25)
						  in  ( [C|_cor27]
							-| ['compiler_generated'] )
					      ( <'false'> when 'true' ->
						    apply 'lc$^3'/1
							(_cor25)
						-| ['compiler_generated'] )
					      ( <_cor28> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor28})
						-| ['compiler_generated'] )
					    end
					    -| ['list_comprehension'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor26> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor26})
					      -| [{'function_name',{'lc$^3',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^3'/1
				(List)
			-| ['list_comprehension'] )
		  in  let <_cor35> =
			  %% Line 3048
			  ( letrec
				'lc$^4'/1 =
				    fun (_cor33) ->
					case _cor33 of
					  <[C = {'constraint',_cor59,_cor60,_cor61,_cor62}|_cor32]> when 'true' ->
					      let <_cor34> =
						  apply 'lc$^4'/1
						      (_cor32)
					      in  ( [C|_cor34]
						    -| ['compiler_generated'] )
					  ( <[_cor31|_cor32]> when 'true' ->
						apply 'lc$^4'/1
						    (_cor32)
					    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor33> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor33})
						  -| [{'function_name',{'lc$^4',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^4'/1
				    (_cor29)
			    -| ['list_comprehension'] )
		      in  %% Line 3048
			  case _cor35 of
			    <[]> when 'true' ->
				let <_cor42> =
				    %% Line 3049
				    ( letrec
					  'lc$^5'/1 =
					      fun (_cor39) ->
						  case _cor39 of
						    <[C = %% Line 3050
							  {'constraint_list',_cor63,_cor64,_cor65,_cor66,_cor67}|_cor38]> when 'true' ->
							let <_cor40> =
							    apply 'expand_to_conjunctions'/1
								(C)
							in  let <_cor41> =
								%% Line 3050
								apply 'lc$^5'/1
								    (_cor38)
							    in  ( [_cor40|_cor41]
								  -| ['compiler_generated'] )
						    ( <[_cor37|_cor38]> when 'true' ->
							  %% Line 3050
							  apply 'lc$^5'/1
							      (_cor38)
						      -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_cor39> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor39})
							    -| [{'function_name',{'lc$^5',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  apply 'lc$^5'/1
					      (%% Line 3050
					       List)
				      -| ['list_comprehension'] )
				in  let <Expanded> =
					%% Line 3049
					call 'lists':'flatten'
					    (_cor42)
				    in  let <ReturnList> =
					    %% Line 3051
					    call 'erlang':'++'
						(Expanded, _cor29)
					in  %% Line 3052
					    case <> of
					      <>
						  when try
							let <_cor45> =
							    call 'erlang':'length'
								(ReturnList)
							in  call 'erlang':'>'
								(_cor45, 28)
						    of <Try> ->
							Try
						    catch <T,R> ->
							'false' ->
						  call 'erlang':'throw'
						      ('too_many_disj')
					      %% Line 3053
					      <> when 'true' ->
						  ReturnList
					    end
			    ( <_cor36> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor36})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor46> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor46})
		  -| [{'function_name',{'expand_to_conjunctions',1}}] )
	    -| ['compiler_generated'] )
	end
'is_simple_constraint'/1 =
    %% Line 3056
    fun (_cor0) ->
	case _cor0 of
	  <{'constraint',_cor2,_cor3,_cor4,_cor5}> when 'true' ->
	      'true'
	  %% Line 3057
	  <{'constraint_ref',_cor6,_cor7}> when 'true' ->
	      'true'
	  %% Line 3058
	  <{'constraint_list',_cor8,_cor9,_cor10,_cor11,_cor12}> when 'true' ->
	      'false'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'is_simple_constraint',1}}] )
	    -| ['compiler_generated'] )
	end
'combine_conj_lists'/2 =
    %% Line 3060
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[List1|[List2|Left]],Prefix> when 'true' ->
	      let <_cor10> =
		  %% Line 3061
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor6) ->
				case _cor6 of
				  <[L1|_cor3]> when 'true' ->
				      ( letrec
					    'lc$^1'/1 =
						fun (_cor7) ->
						    case _cor7 of
						      <[L2|_cor5]> when 'true' ->
							  let <_cor8> =
							      apply 'mk_conj_constraint_list'/1
								  ([L1|[L2|[]]])
							  in  let <_cor9> =
								  apply 'lc$^1'/1
								      (_cor5)
							      in  ( [_cor8|_cor9]
								    -| ['compiler_generated'] )
						      <[]> when 'true' ->
							  apply 'lc$^0'/1
							      (_cor3)
						      ( <_cor7> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor7})
							      -| [{'function_name',{'lc$^1',1}}] )
							-| ['compiler_generated'] )
						    end
					in  apply 'lc$^1'/1
						(List2)
					-| ['list_comprehension'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor6> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor6})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (List1)
		    -| ['list_comprehension'] )
	      in  do  %% Line 3062
		      case <> of
			<>
			    when try
				  let <_cor12> =
				      call 'erlang':'length'
					  (_cor10)
				  in  call 'erlang':'>'
					  (_cor12, 28)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    call 'erlang':'throw'
				('too_many_disj')
			%% Line 3063
			<> when 'true' ->
			    'ok'
		      end
		      %% Line 3065
		      apply 'combine_conj_lists'/2
			  ([_cor10|Left], Prefix)
	  %% Line 3066
	  <[List|[]],Prefix> when 'true' ->
	      %% Line 3067
	      ( letrec
		    'lc$^2'/1 =
			fun (_cor15) ->
			    case _cor15 of
			      <[L|_cor14]> when 'true' ->
				  let <_cor16> =
				      apply 'mk_conj_constraint_list'/1
					  (Prefix)
				  in  let <_cor17> =
					  apply 'mk_conj_constraint_list'/1
					      ([_cor16|[L|[]]])
				      in  let <_cor18> =
					      apply 'lc$^2'/1
						  (_cor14)
					  in  ( [_cor17|_cor18]
						-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor15> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor15})
				      -| [{'function_name',{'lc$^2',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^2'/1
			(List)
		-| ['list_comprehension'] )
	  ( <_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19})
		  -| [{'function_name',{'combine_conj_lists',2}}] )
	    -| ['compiler_generated'] )
	end
'calculate_deps'/1 =
    %% Line 3069
    fun (_cor0) ->
	%% Line 3070
	apply 'calculate_deps'/2
	    (_cor0, [])
'calculate_deps'/2 =
    %% Line 3072
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|Tail],Acc> when 'true' ->
	      let <Deps> =
		  %% Line 3073
		  apply 'get_deps'/1
		      (H)
	      in  %% Line 3074
		  apply 'calculate_deps'/2
		      (Tail, [Deps|Acc])
	  %% Line 3075
	  <[],Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 3076
		  call 'lists':'flatten'
		      (Acc)
	      in  %% Line 3076
		  call 'ordsets':'from_list'
		      (_cor3)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'calculate_deps',2}}] )
	    -| ['compiler_generated'] )
	end
'mk_conj_constraint_list'/1 =
    %% Line 3078
    fun (_cor0) ->
	%% Line 3079
	apply 'mk_constraint_list'/2
	    ('conj', _cor0)
'mk_disj_constraint_list'/1 =
    %% Line 3081
    fun (_cor0) ->
	case _cor0 of
	  <[NotReallyAList|[]]> when 'true' ->
	      %% Line 3082
	      NotReallyAList
	  %% Line 3083
	  <List> when 'true' ->
	      let <_cor6> =
		  %% Line 3086
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor3) ->
				case _cor3 of
				  <[C|_cor2]> when 'true' ->
				      let <_cor4> =
					  apply 'wrap_simple_constr'/1
					      (C)
				      in  let <_cor5> =
					      apply 'lc$^0'/1
						  (_cor2)
					  in  ( [_cor4|_cor5]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor3> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor3})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (List)
		    -| ['list_comprehension'] )
	      in  %% Line 3087
		  apply 'mk_constraint_list'/2
		      ('disj', _cor6)
	end
'wrap_simple_constr'/1 =
    %% Line 3089
    fun (_cor0) ->
	case _cor0 of
	  <C = {'constraint',_cor2,_cor3,_cor4,_cor5}> when 'true' ->
	      apply 'mk_conj_constraint_list'/1
		  ([C|[]])
	  %% Line 3090
	  <C = {'constraint_list',_cor6,_cor7,_cor8,_cor9,_cor10}> when 'true' ->
	      C
	  %% Line 3091
	  <C = {'constraint_ref',_cor11,_cor12}> when 'true' ->
	      C
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'wrap_simple_constr',1}}] )
	    -| ['compiler_generated'] )
	end
'enumerate_constraints'/1 =
    %% Line 3093
    fun (_cor0) ->
	let <_cor9> =
	    %% Line 3094
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[%% Line 3095
			      Id|_cor2]> when 'true' ->
				let <_cor5> =
				    apply 'state__get_cs'/2
					(Id, _cor0)
				in  let <_cor6> =
					apply 'get_deps'/1
					    (_cor5)
				    in  let <_cor7> =
					    apply 'mk_constraint_ref'/2
						(Id, _cor6)
					in  let <_cor8> =
						%% Line 3095
						apply 'lc$^0'/1
						    (_cor2)
					    in  ( [_cor7|_cor8]
						  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  let <_cor3> =
		      %% Line 3095
		      apply 'state__scc'/1
			  (_cor0)
		  in  apply 'lc$^0'/1
			  (_cor3)
	      -| ['list_comprehension'] )
	in  %% Line 3096
	    case apply 'enumerate_constraints'/4
		     (_cor9, 0, [], _cor0) of
	      <{_cor13,_cor14,NewState}> when 'true' ->
		  %% Line 3097
		  NewState
	      ( <_cor11> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor11})
		-| ['compiler_generated'] )
	    end
'enumerate_constraints'/4 =
    %% Line 3099
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[C = {'constraint_ref',Id,_cor42}|Tail],N,Acc,State> when 'true' ->
	      let <Cs> =
		  %% Line 3100
		  apply 'state__get_cs'/2
		      (Id, State)
	      in  %% Line 3101
		  case apply 'enumerate_constraints'/4
			   ([Cs|[]], N, [], State) of
		    <{[NewCs|[]],NewN,NewState1}> when 'true' ->
			let <NewState2> =
			    %% Line 3102
			    apply 'state__store_constrs'/3
				(Id, NewCs, NewState1)
			in  let <_cor7> =
				%% Line 3103
				call 'erlang':'+'
				    (NewN, 1)
			    in  %% Line 3103
				apply 'enumerate_constraints'/4
				    (Tail, _cor7, [C|Acc], NewState2)
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3104
	  <[C = {'constraint_list','conj',List,_cor43,_cor44,_cor45}|Tail],%% Line 3105
									   N,%% Line 3105
									     Acc,%% Line 3105
										 State> when 'true' ->
	      let <_cor10> =
		  %% Line 3108
		  ( fun (_cor8) ->
			case _cor8 of
			  <{'constraint',_cor46,_cor47,_cor48,_cor49}> when 'true' ->
			      'true'
			  %% Line 3109
			  <{'constraint_list',_cor50,_cor51,_cor52,_cor53,_cor54}> when 'true' ->
			      'false'
			  %% Line 3110
			  <{'constraint_ref',_cor55,_cor56}> when 'true' ->
			      'false'
			  ( <_cor9> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor9})
				  -| [{'function_name',{'-enumerate_constraints/4-fun-0-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-enumerate_constraints/4-fun-0-'}}] )
	      in  %% Line 3108
		  case call 'lists':'partition'
			   (_cor10, %% Line 3111
				    List) of
		    <{Flat,Deep}> when 'true' ->
			%% Line 3112
			case apply 'enumerate_constraints'/4
				 (Flat, N, [], State) of
			  <{NewFlat,N1,State1}> when 'true' ->
			      %% Line 3113
			      case apply 'enumerate_constraints'/4
				       (Deep, N1, [], State1) of
				<{NewDeep,N2,State2}> when 'true' ->
				    let <NewList,N3> =
					%% Line 3115
					case <> of
					  %% Line 3116
					  <>
					      when call 'erlang':'=:='
						    (NewFlat,
						     []) ->
					      <NewDeep,N2>
					  %% Line 3117
					  <>
					      when call 'erlang':'=:='
						    (NewDeep,
						     []) ->
					      <NewFlat,N2>
					  %% Line 3118
					  <> when 'true' ->
					      let <TmpCList> =
						  %% Line 3119
						  apply 'mk_conj_constraint_list'/1
						      (NewFlat)
					      in  let <_rec42> = {%% Line 3120
						       'list',%% Line 3120
							      N2}
						  in  %% Line 3120
						      case TmpCList of
							<{'constraint_list',_cor57,_cor58,_cor59,_cor60,_cor61}> when 'true' ->
							    let <_cor19> =
								call 'erlang':'setelement'
								    (6, TmpCList, _rec42)
							    in  let <_cor15> =
								    %% Line 3121
								    call 'erlang':'+'
									(N2, 1)
								in  <[_cor19|NewDeep],_cor15>
							( <_cor62> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {'badrecord','constraint_list'}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
					end
				    in  let <_rec44> = {%% Line 3123
					     'list',%% Line 3123
						    N3}
					in  let <_cor24> =
						%% Line 3123
						call 'erlang':'setelement'
						    (6, C, _rec44)
					    in  let <_cor26> =
						    %% Line 3123
						    call 'erlang':'setelement'
							(3, _cor24, NewList)
						in  let <NewAcc> =
							%% Line 3123
							[_cor26|Acc]
						    in  let <_cor28> =
							    %% Line 3124
							    call 'erlang':'+'
								(N3, 1)
							in  %% Line 3124
							    apply 'enumerate_constraints'/4
								(Tail, _cor28, NewAcc, State2)
				( <_cor13> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor13})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor12> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor12})
			    -| ['compiler_generated'] )
			end
		    ( <_cor11> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor11})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3125
	  <[C = {'constraint_list','disj',List,_cor69,_cor70,_cor71}|Tail],%% Line 3126
									   N,%% Line 3126
									     Acc,%% Line 3126
										 State> when 'true' ->
	      %% Line 3127
	      case apply 'enumerate_constraints'/4
		       (List, N, [], State) of
		<{NewList,NewN,NewState}> when 'true' ->
		    let <_rec46> = {%% Line 3128
			 'list',%% Line 3128
				NewN}
		    in  let <_cor32> =
			    %% Line 3128
			    call 'erlang':'setelement'
				(6, C, _rec46)
			in  let <_cor34> =
				%% Line 3128
				call 'erlang':'setelement'
				    (3, _cor32, NewList)
			    in  let <NewAcc> =
				    %% Line 3128
				    [_cor34|Acc]
				in  let <_cor36> =
					%% Line 3129
					call 'erlang':'+'
					    (NewN, 1)
				    in  %% Line 3129
					apply 'enumerate_constraints'/4
					    (Tail, _cor36, NewAcc, NewState)
		( <_cor29> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor29})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3130
	  <[C = {'constraint',_cor78,_cor79,_cor80,_cor81}|Tail],N,Acc,State> when 'true' ->
	      %% Line 3131
	      apply 'enumerate_constraints'/4
		  (Tail, N, [C|Acc], State)
	  %% Line 3132
	  <[],N,Acc,State> when 'true' ->
	      let <_cor37> =
		  %% Line 3133
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 3133
		  {_cor37,N,State}
	  ( <_cor41,_cor40,_cor39,_cor38> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor41,_cor40,_cor39,_cor38})
		  -| [{'function_name',{'enumerate_constraints',4}}] )
	    -| ['compiler_generated'] )
	end
'order_fun_constraints'/1 =
    %% Line 3137
    fun (_cor0) ->
	let <_cor9> =
	    %% Line 3138
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[%% Line 3139
			      Id|_cor2]> when 'true' ->
				let <_cor5> =
				    apply 'state__get_cs'/2
					(Id, _cor0)
				in  let <_cor6> =
					apply 'get_deps'/1
					    (_cor5)
				    in  let <_cor7> =
					    apply 'mk_constraint_ref'/2
						(Id, _cor6)
					in  let <_cor8> =
						%% Line 3139
						apply 'lc$^0'/1
						    (_cor2)
					    in  ( [_cor7|_cor8]
						  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  let <_cor3> =
		      %% Line 3139
		      apply 'state__scc'/1
			  (_cor0)
		  in  apply 'lc$^0'/1
			  (_cor3)
	      -| ['list_comprehension'] )
	in  %% Line 3140
	    apply 'order_fun_constraints'/2
		(_cor9, _cor0)
'order_fun_constraints'/2 =
    %% Line 3142
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'constraint_ref',Id,_cor7}|Tail],State> when 'true' ->
	      let <Cs> =
		  %% Line 3143
		  apply 'state__get_cs'/2
		      (Id, State)
	      in  %% Line 3144
		  case apply 'order_fun_constraints'/4
			   ([Cs|[]], [], [], State) of
		    <{[NewCs|[]],State1}> when 'true' ->
			let <NewState> =
			    %% Line 3145
			    apply 'state__store_constrs'/3
				(Id, NewCs, State1)
			in  %% Line 3146
			    apply 'order_fun_constraints'/2
				(Tail, NewState)
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3147
	  <[],State> when 'true' ->
	      %% Line 3148
	      State
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'order_fun_constraints',2}}] )
	    -| ['compiler_generated'] )
	end
'order_fun_constraints'/4 =
    %% Line 3150
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[C = {'constraint_ref',_cor24,_cor25}|Tail],Funs,Acc,State> when 'true' ->
	      %% Line 3151
	      apply 'order_fun_constraints'/4
		  (Tail, [C|Funs], Acc, State)
	  %% Line 3152
	  <[C = {'constraint_list',Type,List,_cor26,_cor27,_cor28}|Tail],%% Line 3153
									 Funs,%% Line 3153
									      Acc,%% Line 3153
										  State> when 'true' ->
	      let <_cor11> =
		  %% Line 3155
		  case Type of
		    %% Line 3156
		    <'conj'> when 'true' ->
			apply 'order_fun_constraints'/4
			    (List, [], [], State)
		    %% Line 3157
		    <'disj'> when 'true' ->
			let <FoldFun> =
			    %% Line 3158
			    ( fun (_cor6,_cor5) ->
				  %% Line 3159
				  case %% Line 3160
				       apply 'order_fun_constraints'/4
					   ([_cor6|[]], [], [], _cor5) of
				    <{[NewX|[]],NewAccState}> when 'true' ->
					%% Line 3161
					{NewX,NewAccState}
				    ( <_cor4> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor4})
				      -| ['compiler_generated'] )
				  end
			      -| [{'id',{0,0,'-order_fun_constraints/4-fun-0-'}}] )
			in  %% Line 3163
			    call 'lists':'mapfoldl'
				(FoldFun, State, List)
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor10})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 3154
		  case _cor11 of
		    <{NewList,NewState}> when 'true' ->
			let <C1> =
			    %% Line 3165
			    apply 'update_constraint_list'/2
				(C, NewList)
			in  let <Masks> =
				%% Line 3166
				apply 'calculate_masks'/3
				    (NewList, 1, [])
			    in  let <_cor15> =
				    %% Line 3167
				    apply 'update_masks'/2
					(C1, Masks)
				in  let <NewAcc> =
					%% Line 3167
					[_cor15|Acc]
				    in  %% Line 3168
					apply 'order_fun_constraints'/4
					    (Tail, Funs, NewAcc, NewState)
		    ( <_cor12> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor12})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3169
	  <[C = {'constraint',_cor29,_cor30,_cor31,_cor32}|Tail],Funs,Acc,State> when 'true' ->
	      %% Line 3170
	      apply 'order_fun_constraints'/4
		  (Tail, Funs, [C|Acc], State)
	  %% Line 3171
	  <[],Funs,Acc,State> when 'true' ->
	      let <NewState> =
		  %% Line 3172
		  apply 'order_fun_constraints'/2
		      (Funs, State)
	      in  let <_cor18> =
		      %% Line 3173
		      call 'lists':'reverse'
			  (Acc)
		  in  let <_cor19> =
			  %% Line 3173
			  call 'erlang':'++'
			      (_cor18, Funs)
		      in  %% Line 3173
			  {_cor19,NewState}
	  ( <_cor23,_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21,_cor20})
		  -| [{'function_name',{'order_fun_constraints',4}}] )
	    -| ['compiler_generated'] )
	end
'update_masks'/2 =
    %% Line 3175
    fun (_cor1,_cor0) ->
	%% Line 3176
	case _cor1 of
	  <{'constraint_list',_cor6,_cor7,_cor8,_cor9,_cor10}> when 'true' ->
	      call 'erlang':'setelement'
		  (5, _cor1, _cor0)
	  ( <_cor11> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','constraint_list'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'calculate_masks'/3 =
    %% Line 3180
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[C|Cs],I,L0> when 'true' ->
	      let <_cor9> =
		  %% Line 3181
		  call 'erlang':'+'
		      (I, 1)
	      in  let <_cor8> =
		      %% Line 3181
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor6) ->
				    case _cor6 of
				      <[V|_cor4]> when 'true' ->
					  let <_cor7> =
					      apply 'lc$^0'/1
						  (_cor4)
					  in  ( [{V,I}|_cor7]
						-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  L0
				      ( <_cor6> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor6})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  let <_cor5> =
				apply 'get_deps'/1
				    (C)
			    in  apply 'lc$^0'/1
				    (_cor5)
			-| ['list_comprehension'] )
		  in  %% Line 3181
		      apply 'calculate_masks'/3
			  (Cs, _cor9, _cor8)
	  %% Line 3182
	  <[],_X_I,L> when 'true' ->
	      let <M> =
		  %% Line 3183
		  apply 'family'/1
		      (L)
	      in  let <_cor11> =
		      %% Line 3184
		      call 'erlang':'length'
			  (M)
		  in  %% Line 3184
		      case <> of
			%% Line 3185
			<>
			    when call 'erlang':'>'
				  (_cor11,
				   50) ->
			    let <_cor12> =
				%% Line 3186
				call 'dict':'from_list'
				    (M)
			    in  %% Line 3186
				{'d',_cor12}
			%% Line 3187
			<> when 'true' ->
			    %% Line 3188
			    M
		      end
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'calculate_masks',3}}] )
	    -| ['compiler_generated'] )
	end
'bif_return'/4 =
    %% Line 3197
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 3198
	call 'erl_bif_types':'type'
	    (_cor3, _cor2, _cor1, _cor0)
'is_singleton_non_number_type'/1 =
    %% Line 3200
    fun (_cor0) ->
	%% Line 3201
	case call 'erl_types':'t_is_number'
		 (_cor0) of
	  %% Line 3202
	  <'true'> when 'true' ->
	      'false'
	  %% Line 3203
	  <'false'> when 'true' ->
	      apply 'is_singleton_type'/1
		  (_cor0)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'is_singleton_type'/1 =
    %% Line 3206
    fun (_cor0) ->
	%% Line 3207
	case call 'erl_types':'t_is_atom'
		 (_cor0) of
	  %% Line 3208
	  <'true'> when 'true' ->
	      %% Line 3209
	      case call 'erl_types':'t_atom_vals'
		       (_cor0) of
		%% Line 3210
		<'unknown'> when 'true' ->
		    'false'
		%% Line 3211
		<[_cor6|[]]> when 'true' ->
		    'true'
		%% Line 3212
		<[_cor7|_cor8]> when 'true' ->
		    'false'
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3214
	  <'false'> when 'true' ->
	      %% Line 3215
	      case call 'erl_types':'t_is_integer'
		       (_cor0) of
		%% Line 3216
		<'true'> when 'true' ->
		    %% Line 3217
		    case call 'erl_types':'t_number_vals'
			     (_cor0) of
		      %% Line 3218
		      <'unknown'> when 'true' ->
			  'false'
		      %% Line 3219
		      <[_cor9|[]]> when 'true' ->
			  'true'
		      %% Line 3220
		      <[_cor10|_cor11]> when 'true' ->
			  'false'
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 3222
		<'false'> when 'true' ->
		    %% Line 3223
		    call 'erl_types':'t_is_nil'
			(_cor0)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'find_element'/2 =
    %% Line 3227
    fun (_cor1,_cor0) ->
	%% Line 3228
	case _cor1 of
	  <[Pos|[Tuple|[]]]> when 'true' ->
	      %% Line 3229
	      case call 'erl_types':'t_is_number'
		       (Pos) of
		%% Line 3230
		<'true'> when 'true' ->
		    %% Line 3231
		    case call 'erl_types':'t_number_vals'
			     (Pos) of
		      %% Line 3232
		      <'unknown'> when 'true' ->
			  'unknown'
		      %% Line 3233
		      <[I|[]]> when 'true' ->
			  %% Line 3234
			  case apply 'find_constraint'/2
				   (Tuple, _cor0) of
			    %% Line 3235
			    <'unknown'> when 'true' ->
				'unknown'
			    %% Line 3236
			    <{'constraint',ExTuple,_cor12,_cor13,_cor14}> when 'true' ->
				%% Line 3237
				case call 'erl_types':'t_is_tuple'
					 (ExTuple) of
				  %% Line 3238
				  <'true'> when 'true' ->
				      let <Elems> =
					  %% Line 3239
					  call 'erl_types':'t_tuple_args'
					      (ExTuple)
				      in  let <Elem> =
					      %% Line 3240
					      call 'lists':'nth'
						  (I, Elems)
					  in  %% Line 3241
					      case call 'erl_types':'t_is_var'
						       (Elem) of
						%% Line 3242
						<'true'> when 'true' ->
						    Elem
						%% Line 3243
						<'false'> when 'true' ->
						    'unknown'
						( <_cor5> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor5})
						  -| ['compiler_generated'] )
					      end
				  %% Line 3245
				  <'false'> when 'true' ->
				      'unknown'
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor6})
				    -| ['compiler_generated'] )
				end
			    ( <_cor7> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor7})
			      -| ['compiler_generated'] )
			  end
		      %% Line 3248
		      <_cor15> when 'true' ->
			  'unknown'
		    end
		%% Line 3250
		<'false'> when 'true' ->
		    'unknown'
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'find_constraint'/2 =
    %% Line 3253
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Tuple,[]> when 'true' ->
	      %% Line 3254
	      'unknown'
	  %% Line 3255
	  <Tuple,[C = {'constraint',_cor5,'eq',_cor6,_cor7}|_cor8]>
	      when call 'erlang':'=:='
		    (_cor6,
		     Tuple) ->
	      %% Line 3256
	      C
	  %% Line 3257
	  <Tuple,[{'constraint_list',_cor9,List,_cor10,_cor11,_cor12}|Cs]> when 'true' ->
	      let <_cor2> =
		  %% Line 3258
		  call 'erlang':'++'
		      (List, Cs)
	      in  %% Line 3258
		  apply 'find_constraint'/2
		      (Tuple, _cor2)
	  %% Line 3259
	  <Tuple,[_cor13|Cs]> when 'true' ->
	      %% Line 3260
	      apply 'find_constraint'/2
		  (Tuple, Cs)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'find_constraint',2}}] )
	    -| ['compiler_generated'] )
	end
'lookup_record'/3 =
    %% Line 3262
    fun (_cor2,_cor1,_cor0) ->
	%% Line 3263
	case call 'erl_types':'lookup_record'
		 (_cor1, _cor0, _cor2) of
	  %% Line 3264
	  <{'ok',Fields}> when 'true' ->
	      let <_cor3> =
		  %% Line 3266
		  call 'erl_types':'t_from_term'
		      (_cor1)
	      in  let <_cor8> =
		      %% Line 3267
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor6) ->
				    case _cor6 of
				      <[{_X_FieldName,FieldType}|_cor5]> when 'true' ->
					  let <_cor7> =
					      apply 'lc$^0'/1
						  (_cor5)
					  in  ( [FieldType|_cor7]
						-| ['compiler_generated'] )
				      ( <[_cor4|_cor5]> when 'true' ->
					    apply 'lc$^0'/1
						(_cor5)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor6> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor6})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(Fields)
			-| ['list_comprehension'] )
		  in  let <RecType> =
			  %% Line 3266
			  call 'erl_types':'t_tuple'
			      ([_cor3|_cor8])
		      in  %% Line 3268
			  {'ok',RecType}
	  %% Line 3269
	  <'error'> when 'true' ->
	      %% Line 3270
	      'error'
	  ( <_cor10> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor10})
	    -| ['compiler_generated'] )
	end
'is_literal_record'/1 =
    %% Line 3273
    fun (_cor0) ->
	let <Ann> =
	    %% Line 3274
	    call 'cerl':'get_ann'
		(_cor0)
	in  %% Line 3275
	    call 'lists':'member'
		('record', Ann)
'family'/1 =
    %% Line 3277
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 3278
	    call 'sofs':'relation'
		(_cor0)
	in  let <_cor2> =
		%% Line 3278
		call 'sofs':'rel2fam'
		    (_cor1)
	    in  %% Line 3278
		call 'sofs':'to_external'
		    (_cor2)
'debug_make_name_map'/2 =
    %% Line 3331
    fun (_cor1,_cor0) ->
	%% Line 3332
	'ok'
'pp_constrs_scc'/2 =
    %% Line 3383
    fun (_cor1,_cor0) ->
	%% Line 3384
	'ok'
'constraints_to_dot_scc'/2 =
    %% Line 3447
    fun (_cor1,_cor0) ->
	%% Line 3448
	'ok'
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('dialyzer_typesig')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('dialyzer_typesig', _cor0)
end