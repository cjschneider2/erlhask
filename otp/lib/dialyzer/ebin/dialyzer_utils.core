module 'dialyzer_utils' ['format_sig'/1,
			 'format_sig'/2,
			 'get_abstract_code_from_beam'/1,
			 'get_abstract_code_from_src'/1,
			 'get_abstract_code_from_src'/2,
			 'get_core_from_abstract_code'/1,
			 'get_core_from_abstract_code'/2,
			 'get_core_from_src'/1,
			 'get_core_from_src'/2,
			 'get_record_and_type_info'/1,
			 'get_spec_info'/3,
			 'merge_records'/2,
			 'module_info'/0,
			 'module_info'/1,
			 'parallelism'/0,
			 'pp_hook'/0,
			 'process_record_remote_types'/1,
			 'sets_filter'/2,
			 'src_compiler_opts'/0]
    attributes [%% Line 33
		'type' =
		    %% Line 33
		    [{'dial_ret',{'type',33,'union',[{'integer',33,0}|[{'integer',34,1}|[{'integer',35,2}]]]},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'dial_warn_tag',{'type',68,'union',[{'atom',68,'warn_return_no_exit'}|[{'atom',68,'warn_return_only_exit'}|[{'atom',69,'warn_not_called'}|[{'atom',69,'warn_non_proper_list'}|[{'atom',70,'warn_matching'}|[{'atom',70,'warn_opaque'}|[{'atom',70,'warn_fun_app'}|[{'atom',71,'warn_failing_call'}|[{'atom',71,'warn_bin_construction'}|[{'atom',72,'warn_contract_types'}|[{'atom',72,'warn_contract_syntax'}|[{'atom',73,'warn_contract_not_equal'}|[{'atom',73,'warn_contract_subtype'}|[{'atom',74,'warn_contract_supertype'}|[{'atom',74,'warn_callgraph'}|[{'atom',75,'warn_umatched_return'}|[{'atom',75,'warn_race_condition'}|[{'atom',76,'warn_behaviour'}|[{'atom',76,'warn_contract_range'}|[{'atom',77,'warn_undefined_callbacks'}|[{'atom',77,'warn_unknown'}]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'file_line',{'type',83,'tuple',[{'remote_type',83,[{'atom',83,'file'}|[{'atom',83,'filename'}|[[]]]]}|[{'type',83,'non_neg_integer',[]}]]},[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{'dial_warning',{'type',84,'tuple',[{'type',84,'dial_warn_tag',[]}|[{'type',84,'file_line',[]}|[{'type',84,'tuple',[{'type',84,'atom',[]}|[{'type',84,'list',[{'type',84,'term',[]}]}]]}]]]},[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{'dial_error',{'type',89,'any',[]},[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{'anal_type',{'type',96,'union',[{'atom',96,'succ_typings'}|[{'atom',96,'plt_build'}]]},[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{'anal_type1',{'type',97,'union',[{'type',97,'anal_type',[]}|[{'atom',97,'plt_add'}|[{'atom',97,'plt_check'}|[{'atom',97,'plt_remove'}]]]]},[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{'contr_constr',{'type',98,'tuple',[{'atom',98,'subtype'}|[{'remote_type',98,[{'atom',98,'erl_types'}|[{'atom',98,'erl_type'}|[[]]]]}|[{'remote_type',98,[{'atom',98,'erl_types'}|[{'atom',98,'erl_type'}|[[]]]]}]]]},[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{'contract_pair',{'type',99,'tuple',[{'remote_type',99,[{'atom',99,'erl_types'}|[{'atom',99,'erl_type'}|[[]]]]}|[{'type',99,'list',[{'type',99,'contr_constr',[]}]}]]},[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{'dial_define',{'type',100,'tuple',[{'type',100,'atom',[]}|[{'type',100,'term',[]}]]},[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{'dial_option',{'type',101,'tuple',[{'type',101,'atom',[]}|[{'type',101,'term',[]}]]},[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{'dial_options',{'type',102,'list',[{'type',102,'dial_option',[]}]},[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{'fopt',{'type',103,'union',[{'atom',103,'basename'}|[{'atom',103,'fullpath'}]]},[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{'format',{'type',104,'union',[{'atom',104,'formatted'}|[{'atom',104,'raw'}]]},[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{'label',{'type',105,'non_neg_integer',[]},[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{'rep_mode',{'type',106,'union',[{'atom',106,'quiet'}|[{'atom',106,'normal'}|[{'atom',106,'verbose'}]]]},[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{'start_from',{'type',107,'union',[{'atom',107,'byte_code'}|[{'atom',107,'src_code'}]]},[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{'mfa_or_funlbl',{'type',108,'union',[{'type',108,'label',[]}|[{'type',108,'mfa',[]}]]},[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{'solver',{'type',109,'union',[{'atom',109,'v1'}|[{'atom',109,'v2'}]]},[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{{'record','analysis'},[{'typed_record_field',{'record_field',115,{'atom',115,'analysis_pid'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'pid',[]}]]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'type'},{'atom',116,'succ_typings'}},{'type',116,'anal_type',[]}}|[{'typed_record_field',{'record_field',117,{'atom',117,'defines'},{'nil',117}},{'type',117,'list',[{'type',117,'dial_define',[]}]}}|[{'typed_record_field',{'record_field',118,{'atom',118,'doc_plt'}},{'type',118,'union',[{'atom',118,'undefined'}|[{'remote_type',118,[{'atom',118,'dialyzer_plt'}|[{'atom',118,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',119,{'atom',119,'files'},{'nil',119}},{'type',119,'list',[{'remote_type',119,[{'atom',119,'file'}|[{'atom',119,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'include_dirs'},{'nil',120}},{'type',120,'list',[{'remote_type',120,[{'atom',120,'file'}|[{'atom',120,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',121,{'atom',121,'start_from'},{'atom',121,'byte_code'}},{'type',121,'start_from',[]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'plt'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'remote_type',122,[{'atom',122,'dialyzer_plt'}|[{'atom',122,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'use_contracts'},{'atom',123,'true'}},{'type',123,'boolean',[]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'race_detection'},{'atom',124,'false'}},{'type',124,'boolean',[]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'behaviours_chk'},{'atom',125,'false'}},{'type',125,'boolean',[]}}|[{'typed_record_field',{'record_field',126,{'atom',126,'timing'},{'atom',126,'false'}},{'type',126,'union',[{'type',126,'boolean',[]}|[{'atom',126,'debug'}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'timing_server'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'remote_type',127,[{'atom',127,'dialyzer_timing'}|[{'atom',127,'timing_server'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'callgraph_file'},{'string',128,[]}},{'remote_type',128,[{'atom',128,'file'}|[{'atom',128,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'solvers'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'list',[{'type',129,'solver',[]}]}]]}}]]]]]]]]]]]]]]],[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{{'record','options'},[{'typed_record_field',{'record_field',131,{'atom',131,'files'},{'nil',131}},{'type',131,'list',[{'remote_type',131,[{'atom',131,'file'}|[{'atom',131,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'files_rec'},{'nil',132}},{'type',132,'list',[{'remote_type',132,[{'atom',132,'file'}|[{'atom',132,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',133,{'atom',133,'analysis_type'},{'atom',133,'succ_typings'}},{'type',133,'anal_type1',[]}}|[{'typed_record_field',{'record_field',134,{'atom',134,'timing'},{'atom',134,'false'}},{'type',134,'union',[{'type',134,'boolean',[]}|[{'atom',134,'debug'}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'defines'},{'nil',135}},{'type',135,'list',[{'type',135,'dial_define',[]}]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'from'},{'atom',136,'byte_code'}},{'type',136,'start_from',[]}}|[{'typed_record_field',{'record_field',137,{'atom',137,'get_warnings'},{'atom',137,'maybe'}},{'type',137,'union',[{'type',137,'boolean',[]}|[{'atom',137,'maybe'}]]}}|[{'typed_record_field',{'record_field',138,{'atom',138,'init_plts'},{'nil',138}},{'type',138,'list',[{'remote_type',138,[{'atom',138,'file'}|[{'atom',138,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',139,{'atom',139,'include_dirs'},{'nil',139}},{'type',139,'list',[{'remote_type',139,[{'atom',139,'file'}|[{'atom',139,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'output_plt'},{'atom',140,'none'}},{'type',140,'union',[{'atom',140,'none'}|[{'remote_type',140,[{'atom',140,'file'}|[{'atom',140,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',141,{'atom',141,'legal_warnings'},{'call',141,{'remote',141,{'atom',141,'ordsets'},{'atom',141,'new'}},[]}},{'remote_type',141,[{'atom',141,'ordsets'}|[{'atom',141,'ordset'}|[[{'type',141,'dial_warn_tag',[]}]]]]}}|[{'typed_record_field',{'record_field',142,{'atom',142,'report_mode'},{'atom',142,'normal'}},{'type',142,'rep_mode',[]}}|[{'typed_record_field',{'record_field',143,{'atom',143,'erlang_mode'},{'atom',143,'false'}},{'type',143,'boolean',[]}}|[{'typed_record_field',{'record_field',144,{'atom',144,'use_contracts'},{'atom',144,'true'}},{'type',144,'boolean',[]}}|[{'typed_record_field',{'record_field',145,{'atom',145,'output_file'},{'atom',145,'none'}},{'type',145,'union',[{'atom',145,'none'}|[{'remote_type',145,[{'atom',145,'file'}|[{'atom',145,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',146,{'atom',146,'output_format'},{'atom',146,'formatted'}},{'type',146,'format',[]}}|[{'typed_record_field',{'record_field',147,{'atom',147,'filename_opt'},{'atom',147,'basename'}},{'type',147,'fopt',[]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'callgraph_file'},{'string',148,[]}},{'remote_type',148,[{'atom',148,'file'}|[{'atom',148,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'check_plt'},{'atom',149,'true'}},{'type',149,'boolean',[]}}|[{'typed_record_field',{'record_field',150,{'atom',150,'solvers'},{'nil',150}},{'type',150,'list',[{'type',150,'solver',[]}]}}]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 152
		'type' =
		    %% Line 152
		    [{{'record','contract'},[{'typed_record_field',{'record_field',152,{'atom',152,'contracts'},{'nil',152}},{'type',152,'list',[{'type',152,'contract_pair',[]}]}}|[{'typed_record_field',{'record_field',153,{'atom',153,'args'},{'nil',153}},{'type',153,'list',[{'remote_type',153,[{'atom',153,'erl_types'}|[{'atom',153,'erl_type'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',154,{'atom',154,'forms'},{'nil',154}},{'type',154,'list',[{'type',154,'tuple',[{'var',154,'_'}|[{'var',154,'_'}]]}]}}]]],[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{'abstract_code',{'type',80,'list',[{'type',80,'tuple','any'}]},[]}],
		%% Line 81
		'type' =
		    %% Line 81
		    [{'comp_options',{'type',81,'list',[{'remote_type',81,[{'atom',81,'compile'}|[{'atom',81,'option'}|[[]]]]}]},[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'mod_or_fname',{'type',82,'union',[{'type',82,'atom',[]}|[{'remote_type',82,[{'atom',82,'file'}|[{'atom',82,'filename'}|[[]]]]}]]},[]}],
		%% Line 90
		'spec' =
		    %% Line 90
		    [{{'get_abstract_code_from_src',1},[{'type',90,'fun',[{'type',90,'product',[{'type',90,'mod_or_fname',[]}]}|[{'type',91,'union',[{'type',91,'tuple',[{'atom',91,'ok'}|[{'type',91,'abstract_code',[]}]]}|[{'type',91,'tuple',[{'atom',91,'error'}|[{'type',91,'list',[{'type',91,'string',[]}]}]]}]]}]]}]}],
		%% Line 96
		'spec' =
		    %% Line 96
		    [{{'get_abstract_code_from_src',2},[{'type',96,'fun',[{'type',96,'product',[{'type',96,'mod_or_fname',[]}|[{'type',96,'comp_options',[]}]]}|[{'type',97,'union',[{'type',97,'tuple',[{'atom',97,'ok'}|[{'type',97,'abstract_code',[]}]]}|[{'type',97,'tuple',[{'atom',97,'error'}|[{'type',97,'list',[{'type',97,'string',[]}]}]]}]]}]]}]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{'get_core_from_src_ret',{'type',106,'union',[{'type',106,'tuple',[{'atom',106,'ok'}|[{'remote_type',106,[{'atom',106,'cerl'}|[{'atom',106,'c_module'}|[[]]]]}]]}|[{'type',106,'tuple',[{'atom',106,'error'}|[{'type',106,'string',[]}]]}]]},[]}],
		%% Line 108
		'spec' =
		    %% Line 108
		    [{{'get_core_from_src',1},[{'type',108,'fun',[{'type',108,'product',[{'remote_type',108,[{'atom',108,'file'}|[{'atom',108,'filename'}|[[]]]]}]}|[{'type',108,'get_core_from_src_ret',[]}]]}]}],
		%% Line 113
		'spec' =
		    %% Line 113
		    [{{'get_core_from_src',2},[{'type',113,'fun',[{'type',113,'product',[{'remote_type',113,[{'atom',113,'file'}|[{'atom',113,'filename'}|[[]]]]}|[{'type',113,'comp_options',[]}]]}|[{'type',113,'get_core_from_src_ret',[]}]]}]}],
		%% Line 125
		'spec' =
		    %% Line 125
		    [{{'get_abstract_code_from_beam',1},[{'type',125,'fun',[{'type',125,'product',[{'remote_type',125,[{'atom',125,'file'}|[{'atom',125,'filename'}|[[]]]]}]}|[{'type',125,'union',[{'atom',125,'error'}|[{'type',125,'tuple',[{'atom',125,'ok'}|[{'type',125,'abstract_code',[]}]]}]]}]]}]}],
		%% Line 139
		'type' =
		    %% Line 139
		    [{'get_core_from_abs_ret',{'type',139,'union',[{'type',139,'tuple',[{'atom',139,'ok'}|[{'remote_type',139,[{'atom',139,'cerl'}|[{'atom',139,'c_module'}|[[]]]]}]]}|[{'atom',139,'error'}]]},[]}],
		%% Line 141
		'spec' =
		    %% Line 141
		    [{{'get_core_from_abstract_code',1},[{'type',141,'fun',[{'type',141,'product',[{'type',141,'abstract_code',[]}]}|[{'type',141,'get_core_from_abs_ret',[]}]]}]}],
		%% Line 146
		'spec' =
		    %% Line 146
		    [{{'get_core_from_abstract_code',2},[{'type',146,'fun',[{'type',146,'product',[{'type',146,'abstract_code',[]}|[{'type',146,'comp_options',[]}]]}|[{'type',146,'get_core_from_abs_ret',[]}]]}]}],
		%% Line 166
		'spec' =
		    %% Line 166
		    [{{'get_record_and_type_info',1},[{'type',166,'fun',[{'type',166,'product',[{'type',166,'abstract_code',[]}]}|[{'type',167,'union',[{'type',167,'tuple',[{'atom',167,'ok'}|[{'remote_type',167,[{'atom',167,'dict'}|[{'atom',167,'dict'}|[[]]]]}]]}|[{'type',167,'tuple',[{'atom',167,'error'}|[{'type',167,'string',[]}]]}]]}]]}]}],
		%% Line 173
		'spec' =
		    %% Line 173
		    [{{'get_record_and_type_info',3},[{'type',173,'fun',[{'type',173,'product',[{'type',173,'abstract_code',[]}|[{'type',173,'module',[]}|[{'remote_type',173,[{'atom',173,'dict'}|[{'atom',173,'dict'}|[[]]]]}]]]}|[{'type',174,'union',[{'type',174,'tuple',[{'atom',174,'ok'}|[{'remote_type',174,[{'atom',174,'dict'}|[{'atom',174,'dict'}|[[]]]]}]]}|[{'type',174,'tuple',[{'atom',174,'error'}|[{'type',174,'string',[]}]]}]]}]]}]}],
		%% Line 280
		'spec' =
		    %% Line 280
		    [{{'process_record_remote_types',1},[{'type',280,'fun',[{'type',280,'product',[{'remote_type',280,[{'atom',280,'dialyzer_codeserver'}|[{'atom',280,'codeserver'}|[[]]]]}]}|[{'remote_type',280,[{'atom',280,'dialyzer_codeserver'}|[{'atom',280,'codeserver'}|[[]]]]}]]}]}],
		%% Line 307
		'spec' =
		    %% Line 307
		    [{{'merge_records',2},[{'type',307,'fun',[{'type',307,'product',[{'remote_type',307,[{'atom',307,'dict'}|[{'atom',307,'dict'}|[[]]]]}|[{'remote_type',307,[{'atom',307,'dict'}|[{'atom',307,'dict'}|[[]]]]}]]}|[{'remote_type',307,[{'atom',307,'dict'}|[{'atom',307,'dict'}|[[]]]]}]]}]}],
		%% Line 318
		'type' =
		    %% Line 318
		    [{'spec_dict',{'remote_type',318,[{'atom',318,'dict'}|[{'atom',318,'dict'}|[[]]]]},[]}],
		%% Line 319
		'type' =
		    %% Line 319
		    [{'callback_dict',{'remote_type',319,[{'atom',319,'dict'}|[{'atom',319,'dict'}|[[]]]]},[]}],
		%% Line 321
		'spec' =
		    %% Line 321
		    [{{'get_spec_info',3},[{'type',321,'fun',[{'type',321,'product',[{'type',321,'atom',[]}|[{'type',321,'abstract_code',[]}|[{'remote_type',321,[{'atom',321,'dict'}|[{'atom',321,'dict'}|[[]]]]}]]]}|[{'type',322,'union',[{'type',322,'tuple',[{'atom',322,'ok'}|[{'type',322,'spec_dict',[]}|[{'type',322,'callback_dict',[]}]]]}|[{'type',322,'tuple',[{'atom',322,'error'}|[{'type',322,'string',[]}]]}]]}]]}]}],
		%% Line 386
		'spec' =
		    %% Line 386
		    [{{'sets_filter',2},[{'type',386,'fun',[{'type',386,'product',[{'type',386,'list',[{'type',386,'module',[]}]}|[{'remote_type',386,[{'atom',386,'sets'}|[{'atom',386,'set'}|[[]]]]}]]}|[{'remote_type',386,[{'atom',386,'sets'}|[{'atom',386,'set'}|[[]]]]}]]}]}],
		%% Line 400
		'spec' =
		    %% Line 400
		    [{{'src_compiler_opts',0},[{'type',400,'fun',[{'type',400,'product',[]}|[{'type',400,'nonempty_list',[{'remote_type',400,[{'atom',400,'compile'}|[{'atom',400,'option'}|[[]]]]}]}]]}]}],
		%% Line 407
		'spec' =
		    %% Line 407
		    [{{'get_module',1},[{'type',407,'fun',[{'type',407,'product',[{'type',407,'abstract_code',[]}]}|[{'type',407,'module',[]}]]}]}],
		%% Line 413
		'spec' =
		    %% Line 413
		    [{{'cleanup_parse_transforms',1},[{'type',413,'fun',[{'type',413,'product',[{'type',413,'abstract_code',[]}]}|[{'type',413,'abstract_code',[]}]]}]}],
		%% Line 422
		'spec' =
		    %% Line 422
		    [{{'format_errors',1},[{'type',422,'fun',[{'type',422,'product',[{'type',422,'list',[{'type',422,'tuple',[{'type',422,'module',[]}|[{'type',422,'string',[]}]]}]}]}|[{'type',422,'list',[{'type',422,'string',[]}]}]]}]}],
		%% Line 432
		'spec' =
		    %% Line 432
		    [{{'format_sig',1},[{'type',432,'fun',[{'type',432,'product',[{'remote_type',432,[{'atom',432,'erl_types'}|[{'atom',432,'erl_type'}|[[]]]]}]}|[{'type',432,'string',[]}]]}]}],
		%% Line 437
		'spec' =
		    %% Line 437
		    [{{'format_sig',2},[{'type',437,'fun',[{'type',437,'product',[{'remote_type',437,[{'atom',437,'erl_types'}|[{'atom',437,'erl_type'}|[[]]]]}|[{'remote_type',437,[{'atom',437,'dict'}|[{'atom',437,'dict'}|[[]]]]}]]}|[{'type',437,'string',[]}]]}]}],
		%% Line 453
		'spec' =
		    %% Line 453
		    [{{'pp_hook',0},[{'type',453,'fun',[{'type',453,'product',[]}|[{'type',453,'fun',[{'type',453,'product',[{'remote_type',453,[{'atom',453,'cerl'}|[{'atom',453,'cerl'}|[[]]]]}|[{'var',453,'_'}|[{'var',453,'_'}]]]}|[{'type',453,'term',[]}]]}]]}]}],
		%% Line 545
		'spec' =
		    %% Line 545
		    [{{'parallelism',0},[{'type',545,'fun',[{'type',545,'product',[]}|[{'type',545,'integer',[]}]]}]}]]
'get_abstract_code_from_src'/1 =
    %% Line 93
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 94
	    apply 'src_compiler_opts'/0
		()
	in  %% Line 94
	    apply 'get_abstract_code_from_src'/2
		(_cor0, _cor1)
'get_abstract_code_from_src'/2 =
    %% Line 99
    fun (_cor1,_cor0) ->
	%% Line 100
	case call 'compile':'file'
		 (_cor1, ['to_pp'|['binary'|_cor0]]) of
	  %% Line 101
	  <'error'> when 'true' ->
	      {'error',[]}
	  %% Line 102
	  <{'error',Errors,_cor6}> when 'true' ->
	      let <_cor2> =
		  apply 'format_errors'/1
		      (Errors)
	      in  {'error',_cor2}
	  %% Line 103
	  <{'ok',_cor7,AbstrCode}> when 'true' ->
	      {'ok',AbstrCode}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'get_core_from_src'/1 =
    %% Line 110
    fun (_cor0) ->
	%% Line 111
	apply 'get_core_from_src'/2
	    (_cor0, [])
'get_core_from_src'/2 =
    %% Line 115
    fun (_cor1,_cor0) ->
	%% Line 116
	case apply 'get_abstract_code_from_src'/2
		 (_cor1, _cor0) of
	  %% Line 117
	  <Error = {'error',_cor6}> when 'true' ->
	      Error
	  %% Line 118
	  <{'ok',AbstrCode}> when 'true' ->
	      %% Line 119
	      case apply 'get_core_from_abstract_code'/2
		       (AbstrCode, _cor0) of
		%% Line 120
		<'error'> when 'true' ->
		    {'error',[32|[32|[67|[111|[117|[108|[100|[32|[110|[111|[116|[32|[103|[101|[116|[32|[67|[111|[114|[101|[32|[69|[114|[108|[97|[110|[103|[32|[99|[111|[100|[101|[32|[102|[114|[111|[109|[32|[97|[98|[115|[116|[114|[97|[99|[116|[32|[99|[111|[100|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}
		%% Line 121
		<C = {'ok',_X_Core}> when 'true' ->
		    C
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'get_abstract_code_from_beam'/1 =
    %% Line 127
    fun (_cor0) ->
	%% Line 128
	case call 'beam_lib':'chunks'
		 (_cor0, ['abstract_code']) of
	  %% Line 129
	  <{'ok',{_cor4,List}}> when 'true' ->
	      %% Line 130
	      case call 'lists':'keyfind'
		       ('abstract_code', 1, List) of
		%% Line 131
		<{'abstract_code',{'raw_abstract_v1',Abstr}}> when 'true' ->
		    {'ok',Abstr}
		%% Line 132
		<_cor5> when 'true' ->
		    'error'
	      end
	  %% Line 134
	  <_cor6> when 'true' ->
	      %% Line 136
	      'error'
	end
'get_core_from_abstract_code'/1 =
    %% Line 143
    fun (_cor0) ->
	%% Line 144
	apply 'get_core_from_abstract_code'/2
	    (_cor0, [])
'get_core_from_abstract_code'/2 =
    %% Line 148
    fun (_cor1,_cor0) ->
	let <AbstrCode1> =
	    %% Line 152
	    apply 'cleanup_parse_transforms'/1
		(_cor1)
	in  %% Line 153
	    try
		let <_cor3> =
		    apply 'src_compiler_opts'/0
			()
		in  let <_cor4> =
			call 'erlang':'++'
			    (_cor0, _cor3)
		    in  call 'compile':'forms'
			    (AbstrCode1, _cor4)
	    of <_cor5> ->
		case _cor5 of
		  %% Line 154
		  <{'ok',_cor12,Core}> when 'true' ->
		      {'ok',Core}
		  %% Line 155
		  <_X_What> when 'true' ->
		      'error'
		end
	    catch <_cor9,_cor8,_cor7> ->
		case <_cor9,_cor8,_cor7> of
		  %% Line 157
		  <'error',_cor13,_cor14> when 'true' ->
		      'error'
		  ( <_cor9,_cor8,_cor7> when 'true' ->
			primop 'raise'
			    (_cor7, _cor8)
		    -| ['compiler_generated'] )
		end
'get_record_and_type_info'/1 =
    %% Line 169
    fun (_cor0) ->
	let <Module> =
	    %% Line 170
	    apply 'get_module'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 171
		call 'dict':'new'
		    ()
	    in  %% Line 171
		apply 'get_record_and_type_info'/3
		    (_cor0, Module, _cor2)
'get_record_and_type_info'/3 =
    %% Line 176
    fun (_cor2,_cor1,_cor0) ->
	%% Line 177
	apply 'get_record_and_type_info'/4
	    (_cor2, _cor1, [], _cor0)
'get_record_and_type_info'/4 =
    %% Line 179
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'attribute',_cor31,'record',{Name,Fields0}}|Left],%% Line 180
							       Module,%% Line 180
								      Records,%% Line 180
									      RecDict> when 'true' ->
	      %% Line 181
	      case apply 'get_record_fields'/2
		       (Fields0, RecDict) of
		<{'ok',Fields}> when 'true' ->
		    let <Arity> =
			%% Line 182
			call 'erlang':'length'
			    (Fields)
		    in  let <NewRecDict> =
			    %% Line 183
			    call 'dict':'store'
				({'record',Name}, [{Arity,Fields}|[]], RecDict)
			in  %% Line 184
			    apply 'get_record_and_type_info'/4
				(Left, Module, [{'record',Name}|Records], NewRecDict)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 185
	  <[{'attribute',_cor32,'type',{{'record',Name},Fields0,[]}}|%% Line 186
								     Left],%% Line 186
									   Module,%% Line 186
										  Records,%% Line 186
											  RecDict> when 'true' ->
	      %% Line 188
	      case apply 'get_record_fields'/2
		       (Fields0, RecDict) of
		<{'ok',Fields}> when 'true' ->
		    let <Arity> =
			%% Line 189
			call 'erlang':'length'
			    (Fields)
		    in  let <NewRecDict> =
			    %% Line 190
			    call 'dict':'store'
				({'record',Name}, [{Arity,Fields}|[]], RecDict)
			in  %% Line 191
			    apply 'get_record_and_type_info'/4
				(Left, Module, Records, NewRecDict)
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 192
	  <[{'attribute',_cor33,Attr,{Name,TypeForm}}|Left],%% Line 193
							    Module,%% Line 193
								   Records,%% Line 193
									   RecDict>
	      when let <_cor10> =
		    %% Line 193
		    call 'erlang':'=:='
			(Attr, 'type')
		in  let <_cor11> =
			%% Line 194
			call 'erlang':'=:='
			    (Attr, 'opaque')
		    in  %% Line 193
			call 'erlang':'or'
			    (_cor10, _cor11) ->
	      %% Line 195
	      try
		  let <NewRecDict> =
		      %% Line 196
		      apply 'add_new_type'/6
			  (Attr, Name, TypeForm, [], Module, RecDict)
		  in  %% Line 197
		      apply 'get_record_and_type_info'/4
			  (Left, Module, Records, NewRecDict)
	      of <_cor13> ->
		  _cor13
	      catch <_cor16,_cor15,_cor14> ->
		  case <_cor16,_cor15,_cor14> of
		    %% Line 199
		    <'throw',Error = {'error',_cor34},_cor35> when 'true' ->
			Error
		    ( <_cor16,_cor15,_cor14> when 'true' ->
			  primop 'raise'
			      (_cor14, _cor15)
		      -| ['compiler_generated'] )
		  end
	  %% Line 201
	  <[{'attribute',_cor36,Attr,{Name,TypeForm,Args}}|Left],%% Line 202
								 Module,%% Line 202
									Records,%% Line 202
										RecDict>
	      when let <_cor17> =
		    %% Line 202
		    call 'erlang':'=:='
			(Attr, 'type')
		in  let <_cor18> =
			%% Line 203
			call 'erlang':'=:='
			    (Attr, 'opaque')
		    in  %% Line 202
			call 'erlang':'or'
			    (_cor17, _cor18) ->
	      %% Line 204
	      try
		  let <NewRecDict> =
		      %% Line 205
		      apply 'add_new_type'/6
			  (Attr, Name, TypeForm, Args, Module, RecDict)
		  in  %% Line 206
		      apply 'get_record_and_type_info'/4
			  (Left, Module, Records, NewRecDict)
	      of <_cor20> ->
		  _cor20
	      catch <_cor23,_cor22,_cor21> ->
		  case <_cor23,_cor22,_cor21> of
		    %% Line 208
		    <'throw',Error = {'error',_cor37},_cor38> when 'true' ->
			Error
		    ( <_cor23,_cor22,_cor21> when 'true' ->
			  primop 'raise'
			      (_cor21, _cor22)
		      -| ['compiler_generated'] )
		  end
	  %% Line 210
	  <[_X_Other|Left],Module,Records,RecDict> when 'true' ->
	      %% Line 211
	      apply 'get_record_and_type_info'/4
		  (Left, Module, Records, RecDict)
	  %% Line 212
	  <[],_X_Module,Records,RecDict> when 'true' ->
	      let <_cor24> =
		  %% Line 213
		  call 'lists':'reverse'
		      (Records)
	      in  %% Line 213
		  case apply 'type_record_fields'/2
			   (_cor24, RecDict) of
		    %% Line 214
		    <Ok = {'ok',_X_NewRecDict}> when 'true' ->
			%% Line 216
			Ok
		    %% Line 217
		    <{'error',Name,Error}> when 'true' ->
			let <_cor25> =
			    %% Line 218
			    apply 'flat_format'/2
				([32|[32|[69|[114|[114|[111|[114|[32|[119|[104|[105|[108|[101|[32|[112|[97|[114|[115|[105|[110|[103|[32|[35|[126|[119|[123|[125|[58|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Name|[Error|[]]])
			in  %% Line 218
			    {'error',_cor25}
		    ( <_cor26> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor26})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor30,_cor29,_cor28,_cor27> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor30,_cor29,_cor28,_cor27})
		  -| [{'function_name',{'get_record_and_type_info',4}}] )
	    -| ['compiler_generated'] )
	end
'add_new_type'/6 =
    %% Line 221
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Arity> =
	    %% Line 222
	    call 'erlang':'length'
		(_cor2)
	in  %% Line 223
	    case call 'erl_types':'type_is_defined'
		     (_cor5, _cor4, Arity, _cor0) of
	      %% Line 224
	      <'true'> when 'true' ->
		  let <Msg> =
		      %% Line 225
		      apply 'flat_format'/2
			  ([84|[121|[112|[101|[32|[126|[115|[47|[126|[119|[32|[97|[108|[114|[101|[97|[100|[121|[32|[100|[101|[102|[105|[110|[101|[100|[10]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor4|[Arity|[]]])
		  in  %% Line 226
		      call 'erlang':'throw'
			  ({'error',Msg})
	      %% Line 227
	      <'false'> when 'true' ->
		  let <_cor13> =
		      %% Line 228
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor10) ->
				    case _cor10 of
				      <[X|_cor9]> when 'true' ->
					  let <_cor11> =
					      call 'erl_types':'t_from_form'
						  (X)
					  in  let <_cor12> =
						  apply 'lc$^0'/1
						      (_cor9)
					      in  ( [_cor11|_cor12]
						    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor10> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor10})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(_cor2)
			-| ['list_comprehension'] )
		  in  let <_cor15> =
			  %% Line 229
			  call 'erlang':'make_fun'
			      ('erl_types', 't_is_var', 1)
		      in  %% Line 229
			  case call 'lists':'all'
				   (_cor15, _cor13) of
			    %% Line 230
			    <'true'> when 'true' ->
				let <_cor21> =
				    %% Line 231
				    ( letrec
					  'lc$^1'/1 =
					      fun (_cor18) ->
						  case _cor18 of
						    <[X|_cor17]> when 'true' ->
							let <_cor19> =
							    call 'erl_types':'t_var_name'
								(X)
							in  let <_cor20> =
								apply 'lc$^1'/1
								    (_cor17)
							    in  ( [_cor19|_cor20]
								  -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_cor18> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor18})
							    -| [{'function_name',{'lc$^1',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  apply 'lc$^1'/1
					      (_cor13)
				      -| ['list_comprehension'] )
				in  %% Line 232
				    call 'dict':'store'
					({_cor5,_cor4,Arity}, %% Line 233
							      {_cor1,_cor3,_cor21}, _cor0)
			    %% Line 234
			    <'false'> when 'true' ->
				let <_cor23> =
				    %% Line 235
				    apply 'flat_format'/2
					([84|[121|[112|[101|[32|[100|[101|[99|[108|[97|[114|[97|[116|[105|[111|[110|[32|[102|[111|[114|[32|[126|[119|[32|[100|[111|[101|[115|[32|[110|[111|[116|[32|[104|[97|[118|[101|[32|[118|[97|[114|[105|[97|[98|[108|[101|[115|[32|[97|[115|[32|[112|[97|[114|[97|[109|[101|[116|[101|[114|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 236
																																																    [_cor4|[]])
				in  %% Line 235
				    call 'erlang':'throw'
					({'error',_cor23})
			    ( <_cor24> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor24})
			      -| ['compiler_generated'] )
			  end
	      ( <_cor25> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor25})
		-| ['compiler_generated'] )
	    end
'get_record_fields'/2 =
    %% Line 240
    fun (_cor1,_cor0) ->
	%% Line 241
	apply 'get_record_fields'/3
	    (_cor1, _cor0, [])
'get_record_fields'/3 =
    %% Line 243
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'typed_record_field',OrdRecField,TypeForm}|Left],%% Line 244
							      RecDict,%% Line 244
								      Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 246
		  case OrdRecField of
		    %% Line 247
		    <{'record_field',_X_Line,Name0}> when 'true' ->
			call 'erl_parse':'normalise'
			    (Name0)
		    %% Line 248
		    <{'record_field',_X_Line,Name0,_X_Init}> when 'true' ->
			call 'erl_parse':'normalise'
			    (Name0)
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 250
		  apply 'get_record_fields'/3
		      (Left, RecDict, [{_cor4,TypeForm}|Acc])
	  %% Line 251
	  <[{'record_field',_X_Line,Name}|Left],RecDict,Acc> when 'true' ->
	      let <_cor7> =
		  %% Line 252
		  call 'erl_parse':'normalise'
		      (Name)
	      in  let <NewAcc> =
		      %% Line 252
		      [{_cor7,{'var',-1,'_'}}|Acc]
		  in  %% Line 253
		      apply 'get_record_fields'/3
			  (Left, RecDict, NewAcc)
	  %% Line 254
	  <[{'record_field',_X_Line,Name,_X_Init}|Left],RecDict,Acc> when 'true' ->
	      let <_cor10> =
		  %% Line 255
		  call 'erl_parse':'normalise'
		      (Name)
	      in  let <NewAcc> =
		      %% Line 255
		      [{_cor10,{'var',-1,'_'}}|Acc]
		  in  %% Line 256
		      apply 'get_record_fields'/3
			  (Left, RecDict, NewAcc)
	  %% Line 257
	  <[],_X_RecDict,Acc> when 'true' ->
	      let <_cor12> =
		  %% Line 258
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 258
		  {'ok',_cor12}
	  ( <_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13})
		  -| [{'function_name',{'get_record_fields',3}}] )
	    -| ['compiler_generated'] )
	end
'type_record_fields'/2 =
    %% Line 260
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],RecDict> when 'true' ->
	      %% Line 261
	      {'ok',RecDict}
	  %% Line 262
	  <[RecKey|Recs],RecDict> when 'true' ->
	      %% Line 263
	      case call 'dict':'find'
		       (RecKey, RecDict) of
		<{'ok',[{Arity,Fields}|[]]}> when 'true' ->
		    %% Line 264
		    try
			let <_cor8> =
			    %% Line 266
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor5) ->
					  case _cor5 of
					    <[%% Line 267
					      {FieldName,FieldTypeForm}|_cor4]> when 'true' ->
						let <_cor6> =
						    call 'erl_types':'t_from_form'
							(FieldTypeForm, RecDict)
						in  let <_cor7> =
							%% Line 267
							apply 'lc$^0'/1
							    (_cor4)
						    in  ( [{FieldName,_cor6}|_cor7]
							  -| ['compiler_generated'] )
					    ( <[_cor3|_cor4]> when 'true' ->
						  %% Line 267
						  apply 'lc$^0'/1
						      (_cor4)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor5> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor5})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (%% Line 267
				       Fields)
			      -| ['list_comprehension'] )
			in  let <RecDict1> =
				%% Line 268
				call 'dict':'store'
				    (RecKey, [{Arity,_cor8}|[]], RecDict)
			    in  let <Fun> =
				    %% Line 269
				    ( fun (_cor11) ->
					  %% Line 270
					  call 'orddict':'store'
					      (Arity, _cor8, _cor11)
				      -| [{'id',{0,0,'-type_record_fields/2-fun-0-'}}] )
				in  let <RecDict2> =
					%% Line 272
					call 'dict':'update'
					    (RecKey, Fun, RecDict1)
				    in  %% Line 273
					apply 'type_record_fields'/2
					    (Recs, RecDict2)
		    of <_cor15> ->
			_cor15
		    catch <_cor18,_cor17,_cor16> ->
			case <_cor18,_cor17,_cor16> of
			  %% Line 275
			  <'throw',{'error',Error},_cor22> when 'true' ->
			      %% Line 276
			      case RecKey of
				<{'record',Name}> when 'true' ->
				    %% Line 277
				    {'error',Name,Error}
				( <_cor19> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor19})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor18,_cor17,_cor16> when 'true' ->
				primop 'raise'
				    (_cor16, _cor17)
			    -| ['compiler_generated'] )
			end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20})
		  -| [{'function_name',{'type_record_fields',2}}] )
	    -| ['compiler_generated'] )
	end
'process_record_remote_types'/1 =
    %% Line 282
    fun (_cor0) ->
	let <TempRecords> =
	    %% Line 283
	    call 'dialyzer_codeserver':'get_temp_records'
		(_cor0)
	in  let <TempExpTypes> =
		%% Line 284
		call 'dialyzer_codeserver':'get_temp_exported_types'
		    (_cor0)
	    in  let <RecordFun> =
		    %% Line 286
		    ( fun (_cor15,_cor14) ->
			  %% Line 287
			  case _cor15 of
			    %% Line 288
			    <{'record',_X_Name}> when 'true' ->
				let <FieldFun> =
				    %% Line 290
				    ( fun (_cor9,_cor8) ->
					  %% Line 291
					  ( letrec
						'lc$^0'/1 =
						    fun (_cor5) ->
							case _cor5 of
							  <[%% Line 293
							    {Name,Field}|_cor4]> when 'true' ->
							      let <_cor6> =
								  call 'erl_types':'t_solve_remote'
								      (Field, TempExpTypes, %% Line 292
											    TempRecords)
							      in  let <_cor7> =
								      %% Line 293
								      apply 'lc$^0'/1
									  (_cor4)
								  in  ( [{Name,_cor6}|_cor7]
									-| ['compiler_generated'] )
							  ( <[_cor3|_cor4]> when 'true' ->
								%% Line 293
								apply 'lc$^0'/1
								    (_cor4)
							    -| ['compiler_generated'] )
							  <[]> when 'true' ->
							      []
							  ( <_cor5> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor5})
								  -| [{'function_name',{'lc$^0',1}}] )
							    -| ['compiler_generated'] )
							end
					    in  apply 'lc$^0'/1
						    (_cor8)
					    -| ['list_comprehension'] )
				      -| [{'id',{0,0,'-process_record_remote_types/1-fun-0-'}}] )
				in  %% Line 295
				    call 'orddict':'map'
					(FieldFun, _cor14)
			    %% Line 296
			    <_X_Other> when 'true' ->
				_cor14
			  end
		      -| [{'id',{0,0,'-process_record_remote_types/1-fun-1-'}}] )
		in  let <ModuleFun> =
			%% Line 300
			( fun (_cor20,_cor19) ->
			      %% Line 301
			      call 'dict':'map'
				  (RecordFun, _cor19)
			  -| [{'id',{0,0,'-process_record_remote_types/1-fun-2-'}}] )
		    in  let <NewRecords> =
			    %% Line 303
			    call 'dict':'map'
				(ModuleFun, TempRecords)
			in  let <CServer1> =
				%% Line 304
				call 'dialyzer_codeserver':'finalize_records'
				    (NewRecords, _cor0)
			    in  %% Line 305
				call 'dialyzer_codeserver':'finalize_exported_types'
				    (TempExpTypes, CServer1)
'merge_records'/2 =
    %% Line 309
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 310
	    ( fun (_cor4,_cor3,_cor2) ->
		  _cor3
	      -| [{'id',{0,0,'-merge_records/2-fun-0-'}}] )
	in  %% Line 310
	    call 'dict':'merge'
		(_cor8, _cor1, _cor0)
'get_spec_info'/3 =
    %% Line 324
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 325
	    call 'dict':'new'
		()
	in  let <_cor3> =
		%% Line 325
		call 'dict':'new'
		    ()
	    in  %% Line 325
		apply 'get_spec_info'/6
		    (_cor1, _cor4, _cor3, _cor0, _cor2, %% Line 326
							[110|[111|[102|[105|[108|[101]]]]]])
'get_spec_info'/6 =
    %% Line 334
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{'attribute',Ln,Contract,{Id,TypeSpec}}|Left],%% Line 335
							  SpecDict,%% Line 335
								   CallbackDict,%% Line 335
										RecordsDict,%% Line 335
											    ModName,%% Line 335
												    File>
	      when %% Line 336
		try
		    let <_cor6> =
			call 'erlang':'=:='
			    (Contract, 'spec')
		    in  let <_cor7> =
			    call 'erlang':'=:='
				(Contract, 'callback')
			in  let <_cor8> =
				call 'erlang':'or'
				    (_cor6, _cor7)
			    in  let <_cor9> =
				    %% Line 337
				    call 'erlang':'is_list'
					(TypeSpec)
				in  call 'erlang':'and'
					(_cor8, _cor9)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor11> =
		  %% Line 338
		  case Id of
		    %% Line 339
		    <T = {_cor34,_cor35,_cor36}> when 'true' ->
			T
		    %% Line 340
		    <{F,A}> when 'true' ->
			{ModName,F,A}
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor10})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor14> =
		      %% Line 343
		      case Contract of
			%% Line 344
			<'spec'> when 'true' ->
			    SpecDict
			%% Line 345
			<'callback'> when 'true' ->
			    CallbackDict
			( <_cor13> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor13})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 347
		      try
			  call 'dict':'find'
			      (_cor11, _cor14)
		      of <_cor16> ->
			  case _cor16 of
			    %% Line 348
			    <'error'> when 'true' ->
				let <NewActiveDict> =
				    %% Line 350
				    call 'dialyzer_contracts':'store_tmp_contract'
					(_cor11, {File,Ln}, TypeSpec, _cor14, %% Line 351
									      RecordsDict)
				in  let <NewSpecDict,NewCallbackDict> =
					%% Line 353
					case Contract of
					  %% Line 354
					  <'spec'> when 'true' ->
					      <NewActiveDict,CallbackDict>
					  %% Line 355
					  <'callback'> when 'true' ->
					      <SpecDict,NewActiveDict>
					  ( <_cor18> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor18})
					    -| ['compiler_generated'] )
					end
				    in  %% Line 357
					apply 'get_spec_info'/6
					    (Left, NewSpecDict, NewCallbackDict, %% Line 358
										 RecordsDict, %% Line 358
											      ModName, %% Line 358
												       File)
			    %% Line 359
			    <{'ok',{{OtherFile,L},_X_C}}> when 'true' ->
				%% Line 360
				case _cor11 of
				  <{Mod,Fun,Arity}> when 'true' ->
				      let <Msg> =
					  %% Line 361
					  apply 'flat_format'/2
					      ([32|[32|[67|[111|[110|[116|[114|[97|[99|[116|[47|[99|[97|[108|[108|[98|[97|[99|[107|[32|[102|[111|[114|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[119|[58|[126|[119|[47|[126|[119|[32|[97|[108|[114|[101|[97|[100|[121|[32|[100|[101|[102|[105|[110|[101|[100|[32|[105|[110|[32|[126|[115|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 363
																																																					 [Mod|[Fun|[Arity|[OtherFile|[L|[]]]]]])
				      in  %% Line 364
					  call 'erlang':'throw'
					      ({'error',Msg})
				  ( <_cor21> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor21})
				    -| ['compiler_generated'] )
				end
			    ( <_cor23> when 'true' ->
				  primop 'match_fail'
				      ({'try_clause',_cor23})
			      -| ['compiler_generated'] )
			  end
		      catch <_cor26,_cor25,_cor24> ->
			  case <_cor26,_cor25,_cor24> of
			    %% Line 366
			    <'throw',{'error',Error},_cor37> when 'true' ->
				let <_cor27> =
				    %% Line 367
				    apply 'flat_format'/2
					([32|[32|[69|[114|[114|[111|[114|[32|[119|[104|[105|[108|[101|[32|[112|[97|[114|[115|[105|[110|[103|[32|[99|[111|[110|[116|[114|[97|[99|[116|[32|[105|[110|[32|[108|[105|[110|[101|[32|[126|[119|[58|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 368
																																					      [Ln|[Error|[]]])
				in  %% Line 367
				    {'error',_cor27}
			    ( <_cor26,_cor25,_cor24> when 'true' ->
				  primop 'raise'
				      (_cor24, _cor25)
			      -| ['compiler_generated'] )
			  end
	  %% Line 370
	  <[{'attribute',_cor38,'file',{IncludeFile,_cor39}}|Left],%% Line 371
								   SpecDict,%% Line 371
									    CallbackDict,%% Line 371
											 RecordsDict,%% Line 371
												     ModName,%% Line 371
													     _X_File> when 'true' ->
	      %% Line 372
	      apply 'get_spec_info'/6
		  (Left, SpecDict, CallbackDict, %% Line 373
						 RecordsDict, %% Line 373
							      ModName, %% Line 373
								       IncludeFile)
	  %% Line 374
	  <[_X_Other|Left],SpecDict,CallbackDict,%% Line 375
						 RecordsDict,%% Line 375
							     ModName,%% Line 375
								     File> when 'true' ->
	      %% Line 376
	      apply 'get_spec_info'/6
		  (Left, SpecDict, CallbackDict, RecordsDict, ModName, File)
	  %% Line 377
	  <[],SpecDict,CallbackDict,_X_RecordsDict,_X_ModName,_X_File> when 'true' ->
	      %% Line 378
	      {'ok',SpecDict,CallbackDict}
	  ( <_cor33,_cor32,_cor31,_cor30,_cor29,_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor33,_cor32,_cor31,_cor30,_cor29,_cor28})
		  -| [{'function_name',{'get_spec_info',6}}] )
	    -| ['compiler_generated'] )
	end
'sets_filter'/2 =
    %% Line 388
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],ExpTypes> when 'true' ->
	      %% Line 389
	      ExpTypes
	  %% Line 390
	  <[Mod|Mods],ExpTypes> when 'true' ->
	      let <_cor4> =
		  %% Line 391
		  ( fun (_cor2) ->
			case _cor2 of
			  <{M,_X_F,_X_A}> when 'true' ->
			      call 'erlang':'=/='
				  (M, Mod)
			  ( <_cor3> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor3})
				  -| [{'function_name',{'-sets_filter/2-fun-0-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-sets_filter/2-fun-0-'}}] )
	      in  let <NewExpTypes> =
		      %% Line 391
		      call 'sets':'filter'
			  (_cor4, ExpTypes)
		  in  %% Line 392
		      apply 'sets_filter'/2
			  (Mods, NewExpTypes)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'sets_filter',2}}] )
	    -| ['compiler_generated'] )
	end
'src_compiler_opts'/0 =
    %% Line 402
    fun () ->
	%% Line 403
	['no_copt'|['to_core'|['binary'|['return_errors'|['no_inline'|['strict_record_tests'|['strict_record_updates'|['dialyzer']]]]]]]]
'get_module'/1 =
    %% Line 409
    fun (_cor0) ->
	case _cor0 of
	  <[{'attribute',_cor2,'module',{M,_X_As}}|_cor3]> when 'true' ->
	      M
	  %% Line 410
	  <[{'attribute',_cor4,'module',M}|_cor5]> when 'true' ->
	      M
	  %% Line 411
	  <[_cor6|Rest]> when 'true' ->
	      apply 'get_module'/1
		  (Rest)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_module',1}}] )
	    -| ['compiler_generated'] )
	end
'cleanup_parse_transforms'/1 =
    %% Line 415
    fun (_cor0) ->
	case _cor0 of
	  <[{'attribute',_cor3,'compile',{'parse_transform',_cor4}}|Left]> when 'true' ->
	      %% Line 416
	      apply 'cleanup_parse_transforms'/1
		  (Left)
	  %% Line 417
	  <[Other|Left]> when 'true' ->
	      let <_cor1> =
		  %% Line 418
		  apply 'cleanup_parse_transforms'/1
		      (Left)
	      in  %% Line 418
		  [Other|_cor1]
	  %% Line 419
	  <[]> when 'true' ->
	      %% Line 420
	      []
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'cleanup_parse_transforms',1}}] )
	    -| ['compiler_generated'] )
	end
'format_errors'/1 =
    %% Line 424
    fun (_cor0) ->
	case _cor0 of
	  <[{Mod,Errors}|Left]> when 'true' ->
	      let <_cor7> =
		  %% Line 426
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor3) ->
				case _cor3 of
				  <[%% Line 427
				    {Line,M,Desc}|_cor2]> when 'true' ->
				      let <_cor4> =
					  call M:'format_error'
					      (Desc)
				      in  let <_cor5> =
					      call 'io_lib':'format'
						  ([126|[115|[58|[126|[119|[58|[32|[126|[115|[10]]]]]]]]]], [Mod|[Line|[_cor4|[]]]])
					  in  let <_cor6> =
						  %% Line 427
						  apply 'lc$^0'/1
						      (_cor2)
					      in  ( [_cor5|_cor6]
						    -| ['compiler_generated'] )
				  ( <[_cor1|_cor2]> when 'true' ->
					%% Line 427
					apply 'lc$^0'/1
					    (_cor2)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor3> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor3})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (%% Line 427
			     Errors)
		    -| ['list_comprehension'] )
	      in  let <_cor9> =
		      %% Line 428
		      call 'lists':'flatten'
			  (_cor7)
		  in  let <_cor10> =
			  %% Line 428
			  apply 'format_errors'/1
			      (Left)
		      in  %% Line 428
			  [_cor9|_cor10]
	  %% Line 429
	  <[]> when 'true' ->
	      %% Line 430
	      []
	  ( <_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11})
		  -| [{'function_name',{'format_errors',1}}] )
	    -| ['compiler_generated'] )
	end
'format_sig'/1 =
    %% Line 434
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 435
	    call 'dict':'new'
		()
	in  %% Line 435
	    apply 'format_sig'/2
		(_cor0, _cor1)
'format_sig'/2 =
    %% Line 439
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 440
	    call 'erl_types':'t_to_string'
		(_cor1, _cor0)
	in  %% Line 440
	    case call 'lists':'flatten'
		     (_cor2) of
	      <[102|[117|[110|[40|Sig]]]]> when 'true' ->
		  %% Line 441
		  case call 'lists':'reverse'
			   (Sig) of
		    <[41|RevSig]> when 'true' ->
			%% Line 442
			call 'lists':'reverse'
			    (RevSig)
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'flat_format'/2 =
    %% Line 444
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 445
	    call 'io_lib':'format'
		(_cor1, _cor0)
	in  %% Line 445
	    call 'lists':'flatten'
		(_cor2)
'pp_hook'/0 =
    %% Line 454
    fun () ->
	%% Line 455
	( 'pp_hook'/3
	  -| [{'id',{0,0,'-pp_hook/0-fun-0-'}}] )
'pp_hook'/3 =
    %% Line 457
    fun (_cor2,_cor1,_cor0) ->
	%% Line 458
	case call 'cerl':'type'
		 (_cor2) of
	  %% Line 459
	  <'binary'> when 'true' ->
	      %% Line 460
	      apply 'pp_binary'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 461
	  <'bitstr'> when 'true' ->
	      %% Line 462
	      apply 'pp_segment'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 463
	  <_cor7> when 'true' ->
	      %% Line 464
	      apply _cor0
		  (_cor2, _cor1)
	end
'pp_binary'/3 =
    %% Line 467
    fun (_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 468
	    call 'prettypr':'text'
		([60|[60]])
	in  let <_cor4> =
		%% Line 469
		call 'cerl':'binary_segments'
		    (_cor2)
	    in  let <_cor5> =
		    %% Line 469
		    apply 'pp_segments'/3
			(_cor4, _cor1, _cor0)
		in  let <_cor3> =
			%% Line 471
			call 'prettypr':'text'
			    ([62|[62]])
		    in  let <_cor6> =
			    %% Line 469
			    call 'prettypr':'beside'
				(_cor5, _cor3)
			in  %% Line 468
			    call 'prettypr':'beside'
				(_cor7, _cor6)
'pp_segments'/3 =
    %% Line 473
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Seg|[]],Ctxt,Cont> when 'true' ->
	      %% Line 474
	      apply 'pp_segment'/3
		  (Seg, Ctxt, Cont)
	  %% Line 475
	  <[],_X_Ctxt,_X_Cont> when 'true' ->
	      %% Line 476
	      call 'prettypr':'text'
		  ([])
	  %% Line 477
	  <[Seg|Rest],Ctxt,Cont> when 'true' ->
	      let <_cor6> =
		  %% Line 478
		  apply 'pp_segment'/3
		      (Seg, Ctxt, Cont)
	      in  let <_cor4> =
		      %% Line 479
		      call 'prettypr':'text'
			  ([44])
		  in  let <_cor3> =
			  %% Line 480
			  apply 'pp_segments'/3
			      (Rest, Ctxt, Cont)
		      in  let <_cor5> =
			      %% Line 479
			      call 'prettypr':'beside'
				  (_cor4, _cor3)
			  in  %% Line 478
			      call 'prettypr':'beside'
				  (_cor6, _cor5)
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'pp_segments',3}}] )
	    -| ['compiler_generated'] )
	end
'pp_segment'/3 =
    %% Line 482
    fun (_cor2,_cor1,_cor0) ->
	let <Val> =
	    %% Line 483
	    call 'cerl':'bitstr_val'
		(_cor2)
	in  let <Size> =
		%% Line 484
		call 'cerl':'bitstr_size'
		    (_cor2)
	    in  let <Unit> =
		    %% Line 485
		    call 'cerl':'bitstr_unit'
			(_cor2)
		in  let <Type> =
			%% Line 486
			call 'cerl':'bitstr_type'
			    (_cor2)
		    in  let <Flags> =
			    %% Line 487
			    call 'cerl':'bitstr_flags'
				(_cor2)
			in  let <_cor13> =
				%% Line 488
				apply _cor0
				    (Val, _cor1)
			    in  let <_cor11> =
				    %% Line 489
				    apply 'pp_size'/3
					(Size, _cor1, _cor0)
				in  let <_cor9> =
					%% Line 490
					apply 'pp_opts'/2
					    (Type, Flags)
				    in  let <_cor8> =
					    %% Line 491
					    apply 'pp_unit'/3
						(Unit, _cor1, _cor0)
					in  let <_cor10> =
						%% Line 490
						call 'prettypr':'beside'
						    (_cor9, _cor8)
					    in  let <_cor12> =
						    %% Line 489
						    call 'prettypr':'beside'
							(_cor11, _cor10)
						in  %% Line 488
						    call 'prettypr':'beside'
							(_cor13, _cor12)
'pp_size'/3 =
    %% Line 493
    fun (_cor2,_cor1,_cor0) ->
	%% Line 494
	case call 'cerl':'is_c_atom'
		 (_cor2) of
	  %% Line 495
	  <'true'> when 'true' ->
	      %% Line 496
	      call 'prettypr':'text'
		  ([])
	  %% Line 497
	  <'false'> when 'true' ->
	      let <_cor4> =
		  %% Line 498
		  call 'prettypr':'text'
		      ([58])
	      in  let <_cor3> =
		      %% Line 498
		      apply _cor0
			  (_cor2, _cor1)
		  in  %% Line 498
		      call 'prettypr':'beside'
			  (_cor4, _cor3)
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'pp_opts'/2 =
    %% Line 501
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 503
	    case call 'cerl':'atom_val'
		     (_cor1) of
	      %% Line 504
	      <'binary'> when 'true' ->
		  []
	      %% Line 505
	      <'float'> when 'true' ->
		  let <_cor2> =
		      call 'cerl':'concrete'
			  (_cor0)
		  in  apply 'keep_endian'/1
			  (_cor2)
	      %% Line 506
	      <'integer'> when 'true' ->
		  let <_cor3> =
		      call 'cerl':'concrete'
			  (_cor0)
		  in  apply 'keep_all'/1
			  (_cor3)
	      %% Line 507
	      <'utf8'> when 'true' ->
		  []
	      %% Line 508
	      <'utf16'> when 'true' ->
		  []
	      %% Line 509
	      <'utf32'> when 'true' ->
		  []
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor4})
		-| ['compiler_generated'] )
	    end
	in  let <_cor10> =
		%% Line 511
		call 'prettypr':'text'
		    ([47])
	    in  let <_cor8> =
		    %% Line 512
		    apply 'pp_atom'/1
			(_cor1)
		in  let <_cor7> =
			%% Line 513
			apply 'pp_flags'/1
			    (_cor5)
		    in  let <_cor9> =
			    %% Line 512
			    call 'prettypr':'beside'
				(_cor8, _cor7)
			in  %% Line 511
			    call 'prettypr':'beside'
				(_cor10, _cor9)
'pp_flags'/1 =
    %% Line 515
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 516
	      call 'prettypr':'text'
		  ([])
	  %% Line 517
	  <[Flag|Flags]> when 'true' ->
	      let <_cor4> =
		  %% Line 518
		  call 'prettypr':'text'
		      ([45])
	      in  let <_cor2> =
		      %% Line 519
		      apply 'pp_atom'/1
			  (Flag)
		  in  let <_cor1> =
			  %% Line 520
			  apply 'pp_flags'/1
			      (Flags)
		      in  let <_cor3> =
			      %% Line 519
			      call 'prettypr':'beside'
				  (_cor2, _cor1)
			  in  %% Line 518
			      call 'prettypr':'beside'
				  (_cor4, _cor3)
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'pp_flags',1}}] )
	    -| ['compiler_generated'] )
	end
'keep_endian'/1 =
    %% Line 522
    fun (_cor0) ->
	%% Line 523
	( letrec
	      'lc$^0'/1 =
		  fun (_cor5) ->
		      case _cor5 of
			<[X|_cor2]>
			    when let <_cor3> =
				  call 'erlang':'=:='
				      (X, 'little')
			      in  let <_cor4> =
				      call 'erlang':'=:='
					  (X, 'native')
				  in  call 'erlang':'or'
					  (_cor3, _cor4) ->
			    let <_cor6> =
				call 'cerl':'c_atom'
				    (X)
			    in  let <_cor7> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [_cor6|_cor7]
				      -| ['compiler_generated'] )
			( <[X|_cor2]> when 'true' ->
			      apply 'lc$^0'/1
				  (_cor2)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor5> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor5})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'keep_all'/1 =
    %% Line 525
    fun (_cor0) ->
	%% Line 526
	( letrec
	      'lc$^0'/1 =
		  fun (_cor7) ->
		      case _cor7 of
			<[X|_cor2]>
			    when %% Line 527
			      try
				  let <_cor3> =
				      call 'erlang':'=:='
					  (X, 'little')
				  in  let <_cor4> =
					  call 'erlang':'=:='
					      (X, 'native')
				      in  let <_cor5> =
					      call 'erlang':'or'
						  (_cor3, _cor4)
					  in  let <_cor6> =
						  call 'erlang':'=:='
						      (X, 'signed')
					      in  call 'erlang':'or'
						      (_cor5, _cor6)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    let <_cor8> =
				call 'cerl':'c_atom'
				    (X)
			    in  let <_cor9> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [_cor8|_cor9]
				      -| ['compiler_generated'] )
			( <[X|_cor2]> when 'true' ->
			      apply 'lc$^0'/1
				  (_cor2)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor7> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor7})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'pp_unit'/3 =
    %% Line 529
    fun (_cor2,_cor1,_cor0) ->
	%% Line 530
	case call 'cerl':'concrete'
		 (_cor2) of
	  %% Line 531
	  <N>
	      when call 'erlang':'is_integer'
		    (N) ->
	      let <_cor6> =
		  %% Line 532
		  call 'prettypr':'text'
		      ([45])
	      in  let <_cor4> =
		      %% Line 533
		      call 'prettypr':'text'
			  ([117|[110|[105|[116|[58]]]]])
		  in  let <_cor3> =
			  %% Line 534
			  apply _cor0
			      (_cor2, _cor1)
		      in  let <_cor5> =
			      %% Line 533
			      call 'prettypr':'beside'
				  (_cor4, _cor3)
			  in  %% Line 532
			      call 'prettypr':'beside'
				  (_cor6, _cor5)
	  %% Line 535
	  <_cor11> when 'true' ->
	      %% Line 536
	      call 'prettypr':'text'
		  ([])
	end
'pp_atom'/1 =
    %% Line 539
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 540
	    call 'cerl':'atom_val'
		(_cor0)
	in  let <String> =
		%% Line 540
		call 'erlang':'atom_to_list'
		    (_cor1)
	    in  %% Line 541
		call 'prettypr':'text'
		    (String)
'parallelism'/0 =
    %% Line 547
    fun () ->
	let <CPUs> =
	    %% Line 548
	    call 'erlang':'system_info'
		('logical_processors_available')
	in  let <Schedulers> =
		%% Line 549
		call 'erlang':'system_info'
		    ('schedulers')
	    in  %% Line 550
		call 'erlang':'min'
		    (CPUs, Schedulers)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('dialyzer_utils')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('dialyzer_utils', _cor0)
end