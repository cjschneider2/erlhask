module 'dialyzer_codeserver' ['delete'/1,
			      'finalize_contracts'/3,
			      'finalize_exported_types'/2,
			      'finalize_records'/2,
			      'get_callbacks'/1,
			      'get_contracts'/1,
			      'get_exported_types'/1,
			      'get_exports'/1,
			      'get_next_core_label'/1,
			      'get_records'/1,
			      'get_temp_contracts'/1,
			      'get_temp_exported_types'/1,
			      'get_temp_records'/1,
			      'insert'/3,
			      'insert_exports'/2,
			      'insert_temp_exported_types'/2,
			      'is_exported'/2,
			      'lookup_mfa_code'/2,
			      'lookup_mfa_contract'/2,
			      'lookup_mod_code'/2,
			      'lookup_mod_contracts'/2,
			      'lookup_mod_records'/2,
			      'module_info'/0,
			      'module_info'/1,
			      'new'/0,
			      'set_next_core_label'/2,
			      'set_temp_records'/2,
			      'store_temp_contracts'/4,
			      'store_temp_records'/3]
    attributes [%% Line 58
		'export_type' =
		    %% Line 58
		    [{'codeserver',0}],
		%% Line 33
		'type' =
		    %% Line 33
		    [{'dial_ret',{'type',33,'union',[{'integer',33,0}|[{'integer',34,1}|[{'integer',35,2}]]]},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'dial_warn_tag',{'type',68,'union',[{'atom',68,'warn_return_no_exit'}|[{'atom',68,'warn_return_only_exit'}|[{'atom',69,'warn_not_called'}|[{'atom',69,'warn_non_proper_list'}|[{'atom',70,'warn_matching'}|[{'atom',70,'warn_opaque'}|[{'atom',70,'warn_fun_app'}|[{'atom',71,'warn_failing_call'}|[{'atom',71,'warn_bin_construction'}|[{'atom',72,'warn_contract_types'}|[{'atom',72,'warn_contract_syntax'}|[{'atom',73,'warn_contract_not_equal'}|[{'atom',73,'warn_contract_subtype'}|[{'atom',74,'warn_contract_supertype'}|[{'atom',74,'warn_callgraph'}|[{'atom',75,'warn_umatched_return'}|[{'atom',75,'warn_race_condition'}|[{'atom',76,'warn_behaviour'}|[{'atom',76,'warn_contract_range'}|[{'atom',77,'warn_undefined_callbacks'}|[{'atom',77,'warn_unknown'}]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'file_line',{'type',83,'tuple',[{'remote_type',83,[{'atom',83,'file'}|[{'atom',83,'filename'}|[[]]]]}|[{'type',83,'non_neg_integer',[]}]]},[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{'dial_warning',{'type',84,'tuple',[{'type',84,'dial_warn_tag',[]}|[{'type',84,'file_line',[]}|[{'type',84,'tuple',[{'type',84,'atom',[]}|[{'type',84,'list',[{'type',84,'term',[]}]}]]}]]]},[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{'dial_error',{'type',89,'any',[]},[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{'anal_type',{'type',96,'union',[{'atom',96,'succ_typings'}|[{'atom',96,'plt_build'}]]},[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{'anal_type1',{'type',97,'union',[{'type',97,'anal_type',[]}|[{'atom',97,'plt_add'}|[{'atom',97,'plt_check'}|[{'atom',97,'plt_remove'}]]]]},[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{'contr_constr',{'type',98,'tuple',[{'atom',98,'subtype'}|[{'remote_type',98,[{'atom',98,'erl_types'}|[{'atom',98,'erl_type'}|[[]]]]}|[{'remote_type',98,[{'atom',98,'erl_types'}|[{'atom',98,'erl_type'}|[[]]]]}]]]},[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{'contract_pair',{'type',99,'tuple',[{'remote_type',99,[{'atom',99,'erl_types'}|[{'atom',99,'erl_type'}|[[]]]]}|[{'type',99,'list',[{'type',99,'contr_constr',[]}]}]]},[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{'dial_define',{'type',100,'tuple',[{'type',100,'atom',[]}|[{'type',100,'term',[]}]]},[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{'dial_option',{'type',101,'tuple',[{'type',101,'atom',[]}|[{'type',101,'term',[]}]]},[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{'dial_options',{'type',102,'list',[{'type',102,'dial_option',[]}]},[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{'fopt',{'type',103,'union',[{'atom',103,'basename'}|[{'atom',103,'fullpath'}]]},[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{'format',{'type',104,'union',[{'atom',104,'formatted'}|[{'atom',104,'raw'}]]},[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{'label',{'type',105,'non_neg_integer',[]},[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{'rep_mode',{'type',106,'union',[{'atom',106,'quiet'}|[{'atom',106,'normal'}|[{'atom',106,'verbose'}]]]},[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{'start_from',{'type',107,'union',[{'atom',107,'byte_code'}|[{'atom',107,'src_code'}]]},[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{'mfa_or_funlbl',{'type',108,'union',[{'type',108,'label',[]}|[{'type',108,'mfa',[]}]]},[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{'solver',{'type',109,'union',[{'atom',109,'v1'}|[{'atom',109,'v2'}]]},[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{{'record','analysis'},[{'typed_record_field',{'record_field',115,{'atom',115,'analysis_pid'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'pid',[]}]]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'type'},{'atom',116,'succ_typings'}},{'type',116,'anal_type',[]}}|[{'typed_record_field',{'record_field',117,{'atom',117,'defines'},{'nil',117}},{'type',117,'list',[{'type',117,'dial_define',[]}]}}|[{'typed_record_field',{'record_field',118,{'atom',118,'doc_plt'}},{'type',118,'union',[{'atom',118,'undefined'}|[{'remote_type',118,[{'atom',118,'dialyzer_plt'}|[{'atom',118,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',119,{'atom',119,'files'},{'nil',119}},{'type',119,'list',[{'remote_type',119,[{'atom',119,'file'}|[{'atom',119,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'include_dirs'},{'nil',120}},{'type',120,'list',[{'remote_type',120,[{'atom',120,'file'}|[{'atom',120,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',121,{'atom',121,'start_from'},{'atom',121,'byte_code'}},{'type',121,'start_from',[]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'plt'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'remote_type',122,[{'atom',122,'dialyzer_plt'}|[{'atom',122,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'use_contracts'},{'atom',123,'true'}},{'type',123,'boolean',[]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'race_detection'},{'atom',124,'false'}},{'type',124,'boolean',[]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'behaviours_chk'},{'atom',125,'false'}},{'type',125,'boolean',[]}}|[{'typed_record_field',{'record_field',126,{'atom',126,'timing'},{'atom',126,'false'}},{'type',126,'union',[{'type',126,'boolean',[]}|[{'atom',126,'debug'}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'timing_server'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'remote_type',127,[{'atom',127,'dialyzer_timing'}|[{'atom',127,'timing_server'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'callgraph_file'},{'string',128,[]}},{'remote_type',128,[{'atom',128,'file'}|[{'atom',128,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'solvers'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'list',[{'type',129,'solver',[]}]}]]}}]]]]]]]]]]]]]]],[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{{'record','options'},[{'typed_record_field',{'record_field',131,{'atom',131,'files'},{'nil',131}},{'type',131,'list',[{'remote_type',131,[{'atom',131,'file'}|[{'atom',131,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'files_rec'},{'nil',132}},{'type',132,'list',[{'remote_type',132,[{'atom',132,'file'}|[{'atom',132,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',133,{'atom',133,'analysis_type'},{'atom',133,'succ_typings'}},{'type',133,'anal_type1',[]}}|[{'typed_record_field',{'record_field',134,{'atom',134,'timing'},{'atom',134,'false'}},{'type',134,'union',[{'type',134,'boolean',[]}|[{'atom',134,'debug'}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'defines'},{'nil',135}},{'type',135,'list',[{'type',135,'dial_define',[]}]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'from'},{'atom',136,'byte_code'}},{'type',136,'start_from',[]}}|[{'typed_record_field',{'record_field',137,{'atom',137,'get_warnings'},{'atom',137,'maybe'}},{'type',137,'union',[{'type',137,'boolean',[]}|[{'atom',137,'maybe'}]]}}|[{'typed_record_field',{'record_field',138,{'atom',138,'init_plts'},{'nil',138}},{'type',138,'list',[{'remote_type',138,[{'atom',138,'file'}|[{'atom',138,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',139,{'atom',139,'include_dirs'},{'nil',139}},{'type',139,'list',[{'remote_type',139,[{'atom',139,'file'}|[{'atom',139,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'output_plt'},{'atom',140,'none'}},{'type',140,'union',[{'atom',140,'none'}|[{'remote_type',140,[{'atom',140,'file'}|[{'atom',140,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',141,{'atom',141,'legal_warnings'},{'call',141,{'remote',141,{'atom',141,'ordsets'},{'atom',141,'new'}},[]}},{'remote_type',141,[{'atom',141,'ordsets'}|[{'atom',141,'ordset'}|[[{'type',141,'dial_warn_tag',[]}]]]]}}|[{'typed_record_field',{'record_field',142,{'atom',142,'report_mode'},{'atom',142,'normal'}},{'type',142,'rep_mode',[]}}|[{'typed_record_field',{'record_field',143,{'atom',143,'erlang_mode'},{'atom',143,'false'}},{'type',143,'boolean',[]}}|[{'typed_record_field',{'record_field',144,{'atom',144,'use_contracts'},{'atom',144,'true'}},{'type',144,'boolean',[]}}|[{'typed_record_field',{'record_field',145,{'atom',145,'output_file'},{'atom',145,'none'}},{'type',145,'union',[{'atom',145,'none'}|[{'remote_type',145,[{'atom',145,'file'}|[{'atom',145,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',146,{'atom',146,'output_format'},{'atom',146,'formatted'}},{'type',146,'format',[]}}|[{'typed_record_field',{'record_field',147,{'atom',147,'filename_opt'},{'atom',147,'basename'}},{'type',147,'fopt',[]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'callgraph_file'},{'string',148,[]}},{'remote_type',148,[{'atom',148,'file'}|[{'atom',148,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'check_plt'},{'atom',149,'true'}},{'type',149,'boolean',[]}}|[{'typed_record_field',{'record_field',150,{'atom',150,'solvers'},{'nil',150}},{'type',150,'list',[{'type',150,'solver',[]}]}}]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 152
		'type' =
		    %% Line 152
		    [{{'record','contract'},[{'typed_record_field',{'record_field',152,{'atom',152,'contracts'},{'nil',152}},{'type',152,'list',[{'type',152,'contract_pair',[]}]}}|[{'typed_record_field',{'record_field',153,{'atom',153,'args'},{'nil',153}},{'type',153,'list',[{'remote_type',153,[{'atom',153,'erl_types'}|[{'atom',153,'erl_type'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',154,{'atom',154,'forms'},{'nil',154}},{'type',154,'list',[{'type',154,'tuple',[{'var',154,'_'}|[{'var',154,'_'}]]}]}}]]],[]}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{'dict_ets',{'remote_type',64,[{'atom',64,'ets'}|[{'atom',64,'tid'}|[[]]]]},[]}],
		%% Line 65
		'type' =
		    %% Line 65
		    [{'set_ets',{'remote_type',65,[{'atom',65,'ets'}|[{'atom',65,'tid'}|[[]]]]},[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{'types',{'remote_type',67,[{'atom',67,'erl_types'}|[{'atom',67,'type_table'}|[[]]]]},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'mod_records',{'remote_type',68,[{'atom',68,'dict'}|[{'atom',68,'dict'}|[[{'type',68,'module',[]}|[{'type',68,'types',[]}]]]]]},[]}],
		%% Line 70
		'type' =
		    %% Line 70
		    [{'contracts',{'remote_type',70,[{'atom',70,'dict'}|[{'atom',70,'dict'}|[[{'type',70,'mfa',[]}|[{'remote_type',70,[{'atom',70,'dialyzer_contracts'}|[{'atom',70,'file_contract'}|[[]]]]}]]]]]},[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{'mod_contracts',{'remote_type',71,[{'atom',71,'dict'}|[{'atom',71,'dict'}|[[{'type',71,'module',[]}|[{'type',71,'contracts',[]}]]]]]},[]}],
		%% Line 73
		'type' =
		    %% Line 73
		    [{{'record','codeserver'},[{'typed_record_field',{'record_field',73,{'atom',73,'next_core_label'},{'integer',73,0}},{'type',73,'label',[]}}|[{'typed_record_field',{'record_field',74,{'atom',74,'code'}},{'type',74,'union',[{'atom',74,'undefined'}|[{'type',74,'dict_ets',[]}]]}}|[{'typed_record_field',{'record_field',75,{'atom',75,'exported_types'}},{'type',75,'union',[{'atom',75,'undefined'}|[{'type',75,'set_ets',[]}]]}}|[{'typed_record_field',{'record_field',76,{'atom',76,'records'}},{'type',76,'union',[{'atom',76,'undefined'}|[{'type',76,'dict_ets',[]}]]}}|[{'typed_record_field',{'record_field',77,{'atom',77,'contracts'}},{'type',77,'union',[{'atom',77,'undefined'}|[{'type',77,'dict_ets',[]}]]}}|[{'typed_record_field',{'record_field',78,{'atom',78,'callbacks'}},{'type',78,'union',[{'atom',78,'undefined'}|[{'type',78,'dict_ets',[]}]]}}|[{'typed_record_field',{'record_field',79,{'atom',79,'exports'}},{'type',79,'union',[{'atom',79,'undefined'}|[{'atom',79,'clean'}|[{'type',79,'set_ets',[]}]]]}}|[{'typed_record_field',{'record_field',80,{'atom',80,'temp_exported_types'}},{'type',80,'union',[{'atom',80,'undefined'}|[{'atom',80,'clean'}|[{'type',80,'set_ets',[]}]]]}}|[{'typed_record_field',{'record_field',81,{'atom',81,'temp_records'}},{'type',81,'union',[{'atom',81,'undefined'}|[{'atom',81,'clean'}|[{'type',81,'dict_ets',[]}]]]}}|[{'typed_record_field',{'record_field',82,{'atom',82,'temp_contracts'}},{'type',82,'union',[{'atom',82,'undefined'}|[{'atom',82,'clean'}|[{'type',82,'dict_ets',[]}]]]}}|[{'typed_record_field',{'record_field',83,{'atom',83,'temp_callbacks'}},{'type',83,'union',[{'atom',83,'undefined'}|[{'atom',83,'clean'}|[{'type',83,'dict_ets',[]}]]]}}]]]]]]]]]]],[]}],
		%% Line 86
		'opaque' =
		    %% Line 86
		    [{'codeserver',{'type',86,'record',[{'atom',86,'codeserver'}]},[]}],
		%% Line 126
		'spec' =
		    %% Line 126
		    [{{'new',0},[{'type',126,'fun',[{'type',126,'product',[]}|[{'type',126,'codeserver',[]}]]}]}],
		%% Line 145
		'spec' =
		    %% Line 145
		    [{{'delete',1},[{'type',145,'fun',[{'type',145,'product',[{'type',145,'codeserver',[]}]}|[{'atom',145,'ok'}]]}]}],
		%% Line 153
		'spec' =
		    %% Line 153
		    [{{'insert',3},[{'type',153,'fun',[{'type',153,'product',[{'type',153,'atom',[]}|[{'remote_type',153,[{'atom',153,'cerl'}|[{'atom',153,'c_module'}|[[]]]]}|[{'type',153,'codeserver',[]}]]]}|[{'type',153,'codeserver',[]}]]}]}],
		%% Line 169
		'spec' =
		    %% Line 169
		    [{{'get_temp_exported_types',1},[{'type',169,'fun',[{'type',169,'product',[{'type',169,'codeserver',[]}]}|[{'remote_type',169,[{'atom',169,'sets'}|[{'atom',169,'set'}|[[{'type',169,'mfa',[]}]]]]}]]}]}],
		%% Line 174
		'spec' =
		    %% Line 174
		    [{{'insert_temp_exported_types',2},[{'type',174,'fun',[{'type',174,'product',[{'remote_type',174,[{'atom',174,'sets'}|[{'atom',174,'set'}|[[{'type',174,'mfa',[]}]]]]}|[{'type',174,'codeserver',[]}]]}|[{'type',174,'codeserver',[]}]]}]}],
		%% Line 181
		'spec' =
		    %% Line 181
		    [{{'insert_exports',2},[{'type',181,'fun',[{'type',181,'product',[{'type',181,'list',[{'type',181,'mfa',[]}]}|[{'type',181,'codeserver',[]}]]}|[{'type',181,'codeserver',[]}]]}]}],
		%% Line 187
		'spec' =
		    %% Line 187
		    [{{'is_exported',2},[{'type',187,'fun',[{'type',187,'product',[{'type',187,'mfa',[]}|[{'type',187,'codeserver',[]}]]}|[{'type',187,'boolean',[]}]]}]}],
		%% Line 192
		'spec' =
		    %% Line 192
		    [{{'get_exported_types',1},[{'type',192,'fun',[{'type',192,'product',[{'type',192,'codeserver',[]}]}|[{'remote_type',192,[{'atom',192,'sets'}|[{'atom',192,'set'}|[[{'type',192,'mfa',[]}]]]]}]]}]}],
		%% Line 197
		'spec' =
		    %% Line 197
		    [{{'get_exports',1},[{'type',197,'fun',[{'type',197,'product',[{'type',197,'codeserver',[]}]}|[{'remote_type',197,[{'atom',197,'sets'}|[{'atom',197,'set'}|[[{'type',197,'mfa',[]}]]]]}]]}]}],
		%% Line 202
		'spec' =
		    %% Line 202
		    [{{'finalize_exported_types',2},[{'type',202,'fun',[{'type',202,'product',[{'remote_type',202,[{'atom',202,'sets'}|[{'atom',202,'set'}|[[{'type',202,'mfa',[]}]]]]}|[{'type',202,'codeserver',[]}]]}|[{'type',202,'codeserver',[]}]]}]}],
		%% Line 211
		'spec' =
		    %% Line 211
		    [{{'lookup_mod_code',2},[{'type',211,'fun',[{'type',211,'product',[{'type',211,'atom',[]}|[{'type',211,'codeserver',[]}]]}|[{'remote_type',211,[{'atom',211,'cerl'}|[{'atom',211,'c_module'}|[[]]]]}]]}]}],
		%% Line 216
		'spec' =
		    %% Line 216
		    [{{'lookup_mfa_code',2},[{'type',216,'fun',[{'type',216,'product',[{'type',216,'mfa',[]}|[{'type',216,'codeserver',[]}]]}|[{'type',216,'tuple',[{'remote_type',216,[{'atom',216,'cerl'}|[{'atom',216,'c_var'}|[[]]]]}|[{'remote_type',216,[{'atom',216,'cerl'}|[{'atom',216,'c_fun'}|[[]]]]}]]}]]}]}],
		%% Line 221
		'spec' =
		    %% Line 221
		    [{{'get_next_core_label',1},[{'type',221,'fun',[{'type',221,'product',[{'type',221,'codeserver',[]}]}|[{'type',221,'label',[]}]]}]}],
		%% Line 226
		'spec' =
		    %% Line 226
		    [{{'set_next_core_label',2},[{'type',226,'fun',[{'type',226,'product',[{'type',226,'label',[]}|[{'type',226,'codeserver',[]}]]}|[{'type',226,'codeserver',[]}]]}]}],
		%% Line 231
		'spec' =
		    %% Line 231
		    [{{'lookup_mod_records',2},[{'type',231,'fun',[{'type',231,'product',[{'type',231,'atom',[]}|[{'type',231,'codeserver',[]}]]}|[{'type',231,'types',[]}]]}]}],
		%% Line 239
		'spec' =
		    %% Line 239
		    [{{'get_records',1},[{'type',239,'fun',[{'type',239,'product',[{'type',239,'codeserver',[]}]}|[{'type',239,'mod_records',[]}]]}]}],
		%% Line 244
		'spec' =
		    %% Line 244
		    [{{'store_temp_records',3},[{'type',244,'fun',[{'type',244,'product',[{'type',244,'module',[]}|[{'type',244,'types',[]}|[{'type',244,'codeserver',[]}]]]}|[{'type',244,'codeserver',[]}]]}]}],
		%% Line 253
		'spec' =
		    %% Line 253
		    [{{'get_temp_records',1},[{'type',253,'fun',[{'type',253,'product',[{'type',253,'codeserver',[]}]}|[{'type',253,'mod_records',[]}]]}]}],
		%% Line 258
		'spec' =
		    %% Line 258
		    [{{'set_temp_records',2},[{'type',258,'fun',[{'type',258,'product',[{'type',258,'mod_records',[]}|[{'type',258,'codeserver',[]}]]}|[{'type',258,'codeserver',[]}]]}]}],
		%% Line 266
		'spec' =
		    %% Line 266
		    [{{'finalize_records',2},[{'type',266,'fun',[{'type',266,'product',[{'type',266,'mod_records',[]}|[{'type',266,'codeserver',[]}]]}|[{'type',266,'codeserver',[]}]]}]}],
		%% Line 274
		'spec' =
		    %% Line 274
		    [{{'lookup_mod_contracts',2},[{'type',274,'fun',[{'type',274,'product',[{'type',274,'atom',[]}|[{'type',274,'codeserver',[]}]]}|[{'type',274,'contracts',[]}]]}]}],
		%% Line 287
		'spec' =
		    %% Line 287
		    [{{'lookup_mfa_contract',2},[{'type',287,'fun',[{'type',287,'product',[{'type',287,'mfa',[]}|[{'type',287,'codeserver',[]}]]}|[{'type',288,'union',[{'atom',288,'error'}|[{'type',288,'tuple',[{'atom',288,'ok'}|[{'remote_type',288,[{'atom',288,'dialyzer_contracts'}|[{'atom',288,'file_contract'}|[[]]]]}]]}]]}]]}]}],
		%% Line 293
		'spec' =
		    %% Line 293
		    [{{'get_contracts',1},[{'type',293,'fun',[{'type',293,'product',[{'type',293,'codeserver',[]}]}|[{'type',293,'mod_contracts',[]}]]}]}],
		%% Line 298
		'spec' =
		    %% Line 298
		    [{{'get_callbacks',1},[{'type',298,'fun',[{'type',298,'product',[{'type',298,'codeserver',[]}]}|[{'type',298,'list',[]}]]}]}],
		%% Line 303
		'spec' =
		    %% Line 303
		    [{{'store_temp_contracts',4},[{'type',303,'fun',[{'type',303,'product',[{'type',303,'module',[]}|[{'type',303,'contracts',[]}|[{'type',303,'contracts',[]}|[{'type',303,'codeserver',[]}]]]]}|[{'type',304,'codeserver',[]}]]}]}],
		%% Line 322
		'spec' =
		    %% Line 322
		    [{{'get_temp_contracts',1},[{'type',322,'fun',[{'type',322,'product',[{'type',322,'codeserver',[]}]}|[{'type',322,'tuple',[{'type',322,'mod_contracts',[]}|[{'type',322,'mod_contracts',[]}]]}]]}]}],
		%% Line 328
		'spec' =
		    %% Line 328
		    [{{'finalize_contracts',3},[{'type',328,'fun',[{'type',328,'product',[{'type',328,'mod_contracts',[]}|[{'type',328,'mod_contracts',[]}|[{'type',328,'codeserver',[]}]]]}|[{'type',329,'codeserver',[]}]]}]}]]
'ets_dict_find'/2 =
    %% Line 90
    fun (_cor1,_cor0) ->
	%% Line 91
	try
	    call 'ets':'lookup_element'
		(_cor0, _cor1, 2)
	of <_cor2> ->
	    %% Line 92
	    {'ok',_cor2}
	catch <_cor6,_cor5,_cor4> ->
	    %% Line 94
	    'error'
'ets_dict_store'/3 =
    %% Line 97
    fun (_cor2,_cor1,_cor0) ->
	%% Line 98
	case call 'ets':'insert'
		 (_cor0, {_cor2,_cor1}) of
	  <'true'> when 'true' ->
	      _cor0
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'ets_dict_store_dict'/2 =
    %% Line 101
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 102
	    call 'dict':'to_list'
		(_cor1)
	in  let <_cor6> =
		%% Line 102
		call 'ets':'insert'
		    (_cor0, _cor2)
	    in  %% Line 102
		case _cor6 of
		  <'true'> when 'true' ->
		      ( _cor6
			-| ['compiler_generated'] )
		  ( <_cor3> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor3})
		    -| ['compiler_generated'] )
		end
'ets_dict_to_dict'/1 =
    %% Line 104
    fun (_cor0) ->
	let <Fold> =
	    %% Line 105
	    ( fun (_cor2,_cor1) ->
		  case <_cor2,_cor1> of
		    <{Key,Value},Dict> when 'true' ->
			call 'dict':'store'
			    (Key, Value, Dict)
		    ( <_cor4,_cor3> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor4,_cor3})
			    -| [{'function_name',{'-ets_dict_to_dict/1-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-ets_dict_to_dict/1-fun-0-'}}] )
	in  let <_cor6> =
		%% Line 106
		call 'dict':'new'
		    ()
	    in  %% Line 106
		call 'ets':'foldl'
		    (Fold, _cor6, _cor0)
'ets_set_is_element'/2 =
    %% Line 108
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 109
	    call 'ets':'lookup'
		(_cor0, _cor1)
	in  %% Line 109
	    call 'erlang':'=/='
		(_cor2, [])
'ets_set_insert_set'/2 =
    %% Line 111
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 112
	    call 'sets':'to_list'
		(_cor1)
	in  %% Line 112
	    apply 'ets_set_insert_list'/2
		(_cor2, _cor0)
'ets_set_insert_list'/2 =
    %% Line 114
    fun (_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 115
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[E|_cor3]> when 'true' ->
				let <_cor5> =
				    apply 'lc$^0'/1
					(_cor3)
				in  ( [{E}|_cor5]
				      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor1)
	      -| ['list_comprehension'] )
	in  let <_cor10> =
		%% Line 115
		call 'ets':'insert'
		    (_cor0, _cor6)
	    in  %% Line 115
		case _cor10 of
		  <'true'> when 'true' ->
		      ( _cor10
			-| ['compiler_generated'] )
		  ( <_cor7> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor7})
		    -| ['compiler_generated'] )
		end
'ets_set_to_set'/1 =
    %% Line 117
    fun (_cor0) ->
	let <Fold> =
	    %% Line 118
	    ( fun (_cor2,_cor1) ->
		  case <_cor2,_cor1> of
		    <{E},Set> when 'true' ->
			call 'sets':'add_element'
			    (E, Set)
		    ( <_cor4,_cor3> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor4,_cor3})
			    -| [{'function_name',{'-ets_set_to_set/1-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-ets_set_to_set/1-fun-0-'}}] )
	in  let <_cor6> =
		%% Line 119
		call 'sets':'new'
		    ()
	    in  %% Line 119
		call 'ets':'foldl'
		    (Fold, _cor6, _cor0)
'ets_read_concurrent_table'/1 =
    %% Line 121
    fun (_cor0) ->
	%% Line 122
	call 'ets':'new'
	    (_cor0, [{'read_concurrency','true'}])
'new'/0 =
    %% Line 128
    fun () ->
	let <Code> =
	    %% Line 130
	    call 'ets':'new'
		('dialyzer_codeserver_code', ['compressed'|['public'|[{'read_concurrency','true'}]]])
	in  let <_cor8> =
		%% Line 133
		( letrec
		      'lc$^0'/1 =
			  fun (_cor5) ->
			      case _cor5 of
				<[%% Line 134
				  Name|_cor4]> when 'true' ->
				    let <_cor6> =
					call 'ets':'new'
					    (Name, ['public'|[{'write_concurrency','true'}]])
				    in  let <_cor7> =
					    %% Line 134
					    apply 'lc$^0'/1
						(_cor4)
					in  ( [_cor6|_cor7]
					      -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor5> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor5})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (%% Line 135
			   ['dialyzer_codeserver_exports'|['dialyzer_codeserver_temp_exported_types'|['dialyzer_codeserver_temp_records'|['dialyzer_codeserver_temp_contracts'|['dialyzer_codeserver_temp_callbacks']]]]])
		  -| ['list_comprehension'] )
	    in  %% Line 132
		case _cor8 of
		  <[Exports|[TempExportedTypes|[TempRecords|[TempContracts|[TempCallbacks|[]]]]]]> when 'true' ->
		      %% Line 138
		      {'codeserver',0,Code,'undefined','undefined','undefined','undefined',%% Line 139
											   Exports,%% Line 140
												   TempExportedTypes,%% Line 141
														     TempRecords,%% Line 142
																 TempContracts,%% Line 143
																	       TempCallbacks}
		  ( <_cor9> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor9})
		    -| ['compiler_generated'] )
		end
'delete'/1 =
    %% Line 147
    fun (_cor0) ->
	case _cor0 of
	  <{'codeserver',_cor3,Code,ExportedTypes,%% Line 148
						  Records,%% Line 148
							  Contracts,%% Line 149
								    Callbacks,_cor4,_cor5,_cor6,_cor7,_cor8}> when 'true' ->
	      let <_cor1> =
		  %% Line 150
		  call 'erlang':'make_fun'
		      ('ets', 'delete', 1)
	      in  %% Line 150
		  call 'lists':'foreach'
		      (_cor1, %% Line 151
			      [Code|[ExportedTypes|[Records|[Contracts|[Callbacks|[]]]]]])
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'delete',1}}] )
	    -| ['compiler_generated'] )
	end
'insert'/3 =
    %% Line 155
    fun (_cor2,_cor1,_cor0) ->
	let <Name> =
	    %% Line 156
	    call 'cerl':'module_name'
		(_cor1)
	in  let <Exports> =
		%% Line 157
		call 'cerl':'module_exports'
		    (_cor1)
	    in  let <Attrs> =
		    %% Line 158
		    call 'cerl':'module_attrs'
			(_cor1)
		in  let <Defs> =
			%% Line 159
			call 'cerl':'module_defs'
			    (_cor1)
		    in  let <As> =
			    %% Line 160
			    call 'cerl':'get_ann'
				(_cor1)
			in  let <_cor14> =
				%% Line 162
				( letrec
				      'lc$^0'/1 =
					  fun (_cor10) ->
					      case _cor10 of
						<[Val = %% Line 163
							{Var,_X_Fun}|_cor9]> when 'true' ->
						    let <_cor12> =
							call 'cerl':'fname_id'
							    (Var)
						    in  let <_cor11> =
							    call 'cerl':'fname_arity'
								(Var)
							in  let <_cor13> =
								%% Line 163
								apply 'lc$^0'/1
								    (_cor9)
							    in  ( [{{_cor2,_cor12,_cor11},%% Line 163
											  Val}|_cor13]
								  -| ['compiler_generated'] )
						( <[_cor8|_cor9]> when 'true' ->
						      %% Line 163
						      apply 'lc$^0'/1
							  (_cor9)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor10> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor10})
							-| [{'function_name',{'lc$^0',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^0'/1
					  (%% Line 163
					   Defs)
				  -| ['list_comprehension'] )
			    in  let <_cor20> =
				    %% Line 164
				    ( letrec
					  'lc$^1'/1 =
					      fun (_cor18) ->
						  case _cor18 of
						    <[{Key,_X_Value}|_cor17]> when 'true' ->
							let <_cor19> =
							    apply 'lc$^1'/1
								(_cor17)
							in  ( [Key|_cor19]
							      -| ['compiler_generated'] )
						    ( <[_cor16|_cor17]> when 'true' ->
							  apply 'lc$^1'/1
							      (_cor17)
						      -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_cor18> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor18})
							    -| [{'function_name',{'lc$^1',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  apply 'lc$^1'/1
					      (_cor14)
				      -| ['list_comprehension'] )
				in  let <ModEntry> =
					%% Line 165
					{_cor2,{Name,Exports,Attrs,_cor20,As}}
				    in  %% Line 166
					( case _cor0 of
					    ( <( {'codeserver',_cor29,_rec0,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38}
						 -| ['compiler_generated'] )> when 'true' ->
						  case call 'ets':'insert'
							   (_rec0, [ModEntry|_cor14]) of
						    <'true'> when 'true' ->
							_cor0
						    ( <_cor25> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor25})
						      -| ['compiler_generated'] )
						  end
					      -| ['compiler_generated'] )
					    ( <_cor39> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','codeserver'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
'get_temp_exported_types'/1 =
    %% Line 171
    fun (_cor0) ->
	case _cor0 of
	  <{'codeserver',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,TempExpTypes,_cor9,_cor10,_cor11}> when 'true' ->
	      %% Line 172
	      apply 'ets_set_to_set'/1
		  (TempExpTypes)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_temp_exported_types',1}}] )
	    -| ['compiler_generated'] )
	end
'insert_temp_exported_types'/2 =
    %% Line 176
    fun (_cor1,_cor0) ->
	%% Line 177
	( case _cor0 of
	    ( <( {'codeserver',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_rec1,_cor15,_cor16,_cor17}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 178
		  case apply 'ets_set_insert_set'/2
			   (_cor1, _rec1) of
		    <'true'> when 'true' ->
			_cor0
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor18> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','codeserver'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'insert_exports'/2 =
    %% Line 183
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <List,CS = {'codeserver',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,Exports,_cor11,_cor12,_cor13,_cor14}> when 'true' ->
	      %% Line 184
	      case apply 'ets_set_insert_list'/2
		       (List, Exports) of
		<'true'> when 'true' ->
		    %% Line 185
		    CS
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'insert_exports',2}}] )
	    -| ['compiler_generated'] )
	end
'is_exported'/2 =
    %% Line 189
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <MFA,{'codeserver',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,Exports,_cor10,_cor11,_cor12,_cor13}> when 'true' ->
	      %% Line 190
	      apply 'ets_set_is_element'/2
		  (MFA, Exports)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'is_exported',2}}] )
	    -| ['compiler_generated'] )
	end
'get_exported_types'/1 =
    %% Line 194
    fun (_cor0) ->
	case _cor0 of
	  <{'codeserver',_cor2,_cor3,ExpTypes,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11}> when 'true' ->
	      %% Line 195
	      apply 'ets_set_to_set'/1
		  (ExpTypes)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_exported_types',1}}] )
	    -| ['compiler_generated'] )
	end
'get_exports'/1 =
    %% Line 199
    fun (_cor0) ->
	case _cor0 of
	  <{'codeserver',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,Exports,_cor8,_cor9,_cor10,_cor11}> when 'true' ->
	      %% Line 200
	      apply 'ets_set_to_set'/1
		  (Exports)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_exports',1}}] )
	    -| ['compiler_generated'] )
	end
'finalize_exported_types'/2 =
    %% Line 204
    fun (_cor1,_cor0) ->
	let <ExportedTypes> =
	    %% Line 205
	    apply 'ets_read_concurrent_table'/1
		('dialyzer_codeserver_exported_types')
	in  %% Line 206
	    case apply 'ets_set_insert_set'/2
		     (_cor1, ExportedTypes) of
	      <'true'> when 'true' ->
		  %% Line 207
		  ( case _cor0 of
		      ( <( {'codeserver',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_rec2,_cor20,_cor21,_cor22}
			   -| ['compiler_generated'] )> when 'true' ->
			    %% Line 208
			    case call 'ets':'delete'
				     (_rec2) of
			      <'true'> when 'true' ->
				  let <_cor9> =
				      %% Line 209
				      call 'erlang':'setelement'
					  (9, _cor0, 'clean')
				  in  %% Line 209
				      call 'erlang':'setelement'
					  (4, _cor9, ExportedTypes)
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_cor23> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','codeserver'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'lookup_mod_code'/2 =
    %% Line 213
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Mod,CS>
	      when call 'erlang':'is_atom'
		    (Mod) ->
	      %% Line 214
	      ( case CS of
		  ( <( {'codeserver',_cor6,_rec4,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15}
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'table__lookup'/2
			    (_rec4, Mod)
		    -| ['compiler_generated'] )
		  ( <_cor16> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','codeserver'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'lookup_mod_code',2}}] )
	    -| ['compiler_generated'] )
	end
'lookup_mfa_code'/2 =
    %% Line 218
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <MFA = {_X_M,_X_F,_X_A},CS> when 'true' ->
	      %% Line 219
	      ( case CS of
		  ( <( {'codeserver',_cor6,_rec5,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15}
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'table__lookup'/2
			    (_rec5, MFA)
		    -| ['compiler_generated'] )
		  ( <_cor16> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','codeserver'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'lookup_mfa_code',2}}] )
	    -| ['compiler_generated'] )
	end
'get_next_core_label'/1 =
    %% Line 223
    fun (_cor0) ->
	case _cor0 of
	  <{'codeserver',NCL,_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11}> when 'true' ->
	      %% Line 224
	      NCL
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_next_core_label',1}}] )
	    -| ['compiler_generated'] )
	end
'set_next_core_label'/2 =
    %% Line 228
    fun (_cor1,_cor0) ->
	%% Line 229
	case _cor0 of
	  <{'codeserver',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16}> when 'true' ->
	      call 'erlang':'setelement'
		  (2, _cor0, _cor1)
	  ( <_cor17> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','codeserver'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'lookup_mod_records'/2 =
    %% Line 233
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Mod,{'codeserver',_cor5,_cor6,_cor7,RecDict,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14}>
	      when call 'erlang':'is_atom'
		    (Mod) ->
	      %% Line 234
	      case apply 'ets_dict_find'/2
		       (Mod, RecDict) of
		%% Line 235
		<'error'> when 'true' ->
		    call 'dict':'new'
			()
		%% Line 236
		<{'ok',Dict}> when 'true' ->
		    Dict
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'lookup_mod_records',2}}] )
	    -| ['compiler_generated'] )
	end
'get_records'/1 =
    %% Line 241
    fun (_cor0) ->
	case _cor0 of
	  <{'codeserver',_cor2,_cor3,_cor4,RecDict,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11}> when 'true' ->
	      %% Line 242
	      apply 'ets_dict_to_dict'/1
		  (RecDict)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_records',1}}] )
	    -| ['compiler_generated'] )
	end
'store_temp_records'/3 =
    %% Line 246
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Mod,Dict,CS = {'codeserver',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,TempRecDict,_cor19,_cor20}>
	      when %% Line 247
		call 'erlang':'is_atom'
		    (Mod) ->
	      let <_cor3> =
		  %% Line 248
		  call 'dict':'size'
		      (Dict)
	      in  %% Line 248
		  case <> of
		    %% Line 249
		    <>
			when call 'erlang':'=:='
			      (_cor3,
			       0) ->
			CS
		    %% Line 250
		    <> when 'true' ->
			let <_rec7> =
			    apply 'ets_dict_store'/3
				(Mod, Dict, TempRecDict)
			in  call 'erlang':'setelement'
				(10, CS, _rec7)
		  end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'store_temp_records',3}}] )
	    -| ['compiler_generated'] )
	end
'get_temp_records'/1 =
    %% Line 255
    fun (_cor0) ->
	case _cor0 of
	  <{'codeserver',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,TempRecDict,_cor10,_cor11}> when 'true' ->
	      %% Line 256
	      apply 'ets_dict_to_dict'/1
		  (TempRecDict)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_temp_records',1}}] )
	    -| ['compiler_generated'] )
	end
'set_temp_records'/2 =
    %% Line 260
    fun (_cor1,_cor0) ->
	%% Line 261
	( case _cor0 of
	    ( <( {'codeserver',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_rec9,_cor19,_cor20}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'ets':'delete'
			   (_rec9) of
		    <'true'> when 'true' ->
			let <TempRecords> =
			    %% Line 262
			    call 'ets':'new'
				('dialyzer_codeserver_temp_records', [])
			in  %% Line 263
			    case apply 'ets_dict_store_dict'/2
				     (_cor1, TempRecords) of
			      <'true'> when 'true' ->
				  %% Line 264
				  call 'erlang':'setelement'
				      (10, _cor0, TempRecords)
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor6})
				-| ['compiler_generated'] )
			    end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor21> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','codeserver'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'finalize_records'/2 =
    %% Line 268
    fun (_cor1,_cor0) ->
	%% Line 269
	( case _cor0 of
	    ( <( {'codeserver',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_rec11,_cor20,_cor21}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'ets':'delete'
			   (_rec11) of
		    <'true'> when 'true' ->
			let <Records> =
			    %% Line 270
			    apply 'ets_read_concurrent_table'/1
				('dialyzer_codeserver_records')
			in  %% Line 271
			    case apply 'ets_dict_store_dict'/2
				     (_cor1, Records) of
			      <'true'> when 'true' ->
				  let <_cor8> =
				      %% Line 272
				      call 'erlang':'setelement'
					  (10, _cor0, 'clean')
				  in  %% Line 272
				      call 'erlang':'setelement'
					  (5, _cor8, Records)
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor6})
				-| ['compiler_generated'] )
			    end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor22> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','codeserver'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'lookup_mod_contracts'/2 =
    %% Line 276
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Mod,{'codeserver',_cor11,_cor12,_cor13,_cor14,ContDict,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20}>
	      when %% Line 277
		call 'erlang':'is_atom'
		    (Mod) ->
	      %% Line 278
	      case apply 'ets_dict_find'/2
		       (Mod, ContDict) of
		%% Line 279
		<'error'> when 'true' ->
		    call 'dict':'new'
			()
		%% Line 280
		<{'ok',Keys}> when 'true' ->
		    let <_cor7> =
			%% Line 281
			( letrec
			      'lc$^0'/1 =
				  fun (_cor4) ->
				      case _cor4 of
					<[Key|_cor3]> when 'true' ->
					    let <_cor5> =
						apply 'get_contract_pair'/2
						    (Key, ContDict)
					    in  let <_cor6> =
						    apply 'lc$^0'/1
							(_cor3)
						in  ( [_cor5|_cor6]
						      -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor4> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor4})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (Keys)
			  -| ['list_comprehension'] )
		    in  %% Line 281
			call 'dict':'from_list'
			    (_cor7)
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'lookup_mod_contracts',2}}] )
	    -| ['compiler_generated'] )
	end
'get_contract_pair'/2 =
    %% Line 284
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 285
	    call 'ets':'lookup_element'
		(_cor0, _cor1, 2)
	in  %% Line 285
	    {_cor1,_cor2}
'lookup_mfa_contract'/2 =
    %% Line 290
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <MFA,{'codeserver',_cor4,_cor5,_cor6,_cor7,ContDict,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13}> when 'true' ->
	      %% Line 291
	      apply 'ets_dict_find'/2
		  (MFA, ContDict)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'lookup_mfa_contract',2}}] )
	    -| ['compiler_generated'] )
	end
'get_contracts'/1 =
    %% Line 295
    fun (_cor0) ->
	case _cor0 of
	  <{'codeserver',_cor2,_cor3,_cor4,_cor5,ContDict,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11}> when 'true' ->
	      %% Line 296
	      apply 'ets_dict_to_dict'/1
		  (ContDict)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_contracts',1}}] )
	    -| ['compiler_generated'] )
	end
'get_callbacks'/1 =
    %% Line 300
    fun (_cor0) ->
	case _cor0 of
	  <{'codeserver',_cor2,_cor3,_cor4,_cor5,_cor6,CallbDict,_cor7,_cor8,_cor9,_cor10,_cor11}> when 'true' ->
	      %% Line 301
	      call 'ets':'tab2list'
		  (CallbDict)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_callbacks',1}}] )
	    -| ['compiler_generated'] )
	end
'store_temp_contracts'/4 =
    %% Line 306
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Mod,SpecDict,CallbackDict,CS = %% Line 307
					  {'codeserver',_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,Cn,%% Line 308
															  Cb}>
	      when %% Line 309
		call 'erlang':'is_atom'
		    (Mod) ->
	      let <_cor4> =
		  %% Line 311
		  call 'dict':'size'
		      (SpecDict)
	      in  let <_cor9> =
		      %% Line 311
		      case <> of
			%% Line 312
			<>
			    when call 'erlang':'=:='
				  (_cor4,
				   0) ->
			    CS
			%% Line 313
			<> when 'true' ->
			    let <_rec13> =
				%% Line 314
				apply 'ets_dict_store'/3
				    (Mod, SpecDict, Cn)
			    in  %% Line 314
				call 'erlang':'setelement'
				    (11, CS, _rec13)
		      end
		  in  let <_cor11> =
			  %% Line 316
			  call 'dict':'size'
			      (CallbackDict)
		      in  %% Line 316
			  case <> of
			    %% Line 317
			    <>
				when call 'erlang':'=:='
				      (_cor11,
				       0) ->
				_cor9
			    %% Line 318
			    <> when 'true' ->
				let <_rec15> =
				    %% Line 319
				    apply 'ets_dict_store'/3
					(Mod, CallbackDict, Cb)
				in  %% Line 319
				    case _cor9 of
				      <{'codeserver',_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51}> when 'true' ->
					  call 'erlang':'setelement'
					      (12, _cor9, _rec15)
				      ( <_cor52> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','codeserver'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
			  end
	  ( <_cor19,_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17,_cor16})
		  -| [{'function_name',{'store_temp_contracts',4}}] )
	    -| ['compiler_generated'] )
	end
'get_temp_contracts'/1 =
    %% Line 324
    fun (_cor0) ->
	case _cor0 of
	  <{'codeserver',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,TempContDict,%% Line 325
											       TempCallDict}> when 'true' ->
	      let <_cor2> =
		  %% Line 326
		  apply 'ets_dict_to_dict'/1
		      (TempContDict)
	      in  let <_cor1> =
		      %% Line 326
		      apply 'ets_dict_to_dict'/1
			  (TempCallDict)
		  in  %% Line 326
		      {_cor2,_cor1}
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'get_temp_contracts',1}}] )
	    -| ['compiler_generated'] )
	end
'finalize_contracts'/3 =
    %% Line 331
    fun (_cor2,_cor1,_cor0) ->
	let <Contracts> =
	    %% Line 332
	    apply 'ets_read_concurrent_table'/1
		('dialyzer_codeserver_contracts')
	in  let <Callbacks> =
		%% Line 333
		apply 'ets_read_concurrent_table'/1
		    ('dialyzer_codeserver_callbacks')
	    in  %% Line 334
		case call 'dict':'fold'
			 (( 'decompose_spec_dict'/3
			    -| [{'id',{0,0,'-finalize_contracts/3-fun-0-'}}] ), Contracts, _cor2) of
		  <_cor15>
		      when call 'erlang':'=:='
			    (_cor15,
			     Contracts) ->
		      %% Line 335
		      case call 'dict':'fold'
			       (( 'decompose_cb_dict'/3
				  -| [{'id',{0,0,'-finalize_contracts/3-fun-1-'}}] ), Callbacks, _cor1) of
			<_cor16>
			    when call 'erlang':'=:='
				  (_cor16,
				   Callbacks) ->
			    %% Line 336
			    case _cor0 of
			      <{'codeserver',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27}> when 'true' ->
				  let <_cor8> =
				      %% Line 337
				      call 'erlang':'setelement'
					  (12, _cor0, 'clean')
				  in  let <_cor9> =
					  %% Line 337
					  call 'erlang':'setelement'
					      (11, _cor8, 'clean')
				      in  let <_cor10> =
					      call 'erlang':'setelement'
						  (7, _cor9, Callbacks)
					  in  call 'erlang':'setelement'
						  (6, _cor10, Contracts)
			      ( <_cor28> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','codeserver'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
		  ( <_cor5> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor5})
		    -| ['compiler_generated'] )
		end
'decompose_spec_dict'/3 =
    %% Line 339
    fun (_cor2,_cor1,_cor0) ->
	let <Keys> =
	    %% Line 340
	    call 'dict':'fetch_keys'
		(_cor1)
	in  let <_cor4> =
		%% Line 341
		call 'dict':'to_list'
		    (_cor1)
	    in  %% Line 341
		case call 'ets':'insert'
			 (_cor0, _cor4) of
		  <'true'> when 'true' ->
		      %% Line 342
		      case call 'ets':'insert'
			       (_cor0, {_cor2,Keys}) of
			<'true'> when 'true' ->
			    _cor0
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
		  ( <_cor5> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor5})
		    -| ['compiler_generated'] )
		end
'decompose_cb_dict'/3 =
    %% Line 345
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 346
	    call 'dict':'to_list'
		(_cor1)
	in  %% Line 346
	    case call 'ets':'insert'
		     (_cor0, _cor3) of
	      <'true'> when 'true' ->
		  _cor0
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor4})
		-| ['compiler_generated'] )
	    end
'table__lookup'/2 =
    %% Line 349
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <TablePid,M>
	      when call 'erlang':'is_atom'
		    (M) ->
	      %% Line 350
	      case call 'ets':'lookup_element'
		       (TablePid, M, 2) of
		<{Name,Exports,Attrs,Keys,As}> when 'true' ->
		    let <_cor8> =
			%% Line 351
			( letrec
			      'lc$^0'/1 =
				  fun (_cor5) ->
				      case _cor5 of
					<[Key|_cor4]> when 'true' ->
					    let <_cor6> =
						apply 'table__lookup'/2
						    (TablePid, Key)
					    in  let <_cor7> =
						    apply 'lc$^0'/1
							(_cor4)
						in  ( [_cor6|_cor7]
						      -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor5> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor5})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (Keys)
			  -| ['list_comprehension'] )
		    in  %% Line 352
			call 'cerl':'ann_c_module'
			    (As, Name, Exports, Attrs, _cor8)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 353
	  <TablePid,MFA> when 'true' ->
	      %% Line 354
	      call 'ets':'lookup_element'
		  (TablePid, MFA, 2)
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('dialyzer_codeserver')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('dialyzer_codeserver', _cor0)
end