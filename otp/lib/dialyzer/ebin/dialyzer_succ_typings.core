module 'dialyzer_succ_typings' ['analyze_callgraph'/3,
				'analyze_callgraph'/6,
				'collect_warnings'/2,
				'find_depends_on'/2,
				'find_required_by'/2,
				'find_succ_types_for_scc'/2,
				'get_warnings'/8,
				'lookup_names'/2,
				'module_info'/0,
				'module_info'/1,
				'refine_one_module'/2]
    attributes [%% Line 44
		'export_type' =
		    %% Line 44
		    [{'typesig_init_data',0}|[{'dataflow_init_data',0}|[{'warnings_init_data',0}]]],
		%% Line 33
		'type' =
		    %% Line 33
		    [{'dial_ret',{'type',33,'union',[{'integer',33,0}|[{'integer',34,1}|[{'integer',35,2}]]]},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'dial_warn_tag',{'type',68,'union',[{'atom',68,'warn_return_no_exit'}|[{'atom',68,'warn_return_only_exit'}|[{'atom',69,'warn_not_called'}|[{'atom',69,'warn_non_proper_list'}|[{'atom',70,'warn_matching'}|[{'atom',70,'warn_opaque'}|[{'atom',70,'warn_fun_app'}|[{'atom',71,'warn_failing_call'}|[{'atom',71,'warn_bin_construction'}|[{'atom',72,'warn_contract_types'}|[{'atom',72,'warn_contract_syntax'}|[{'atom',73,'warn_contract_not_equal'}|[{'atom',73,'warn_contract_subtype'}|[{'atom',74,'warn_contract_supertype'}|[{'atom',74,'warn_callgraph'}|[{'atom',75,'warn_umatched_return'}|[{'atom',75,'warn_race_condition'}|[{'atom',76,'warn_behaviour'}|[{'atom',76,'warn_contract_range'}|[{'atom',77,'warn_undefined_callbacks'}|[{'atom',77,'warn_unknown'}]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'file_line',{'type',83,'tuple',[{'remote_type',83,[{'atom',83,'file'}|[{'atom',83,'filename'}|[[]]]]}|[{'type',83,'non_neg_integer',[]}]]},[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{'dial_warning',{'type',84,'tuple',[{'type',84,'dial_warn_tag',[]}|[{'type',84,'file_line',[]}|[{'type',84,'tuple',[{'type',84,'atom',[]}|[{'type',84,'list',[{'type',84,'term',[]}]}]]}]]]},[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{'dial_error',{'type',89,'any',[]},[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{'anal_type',{'type',96,'union',[{'atom',96,'succ_typings'}|[{'atom',96,'plt_build'}]]},[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{'anal_type1',{'type',97,'union',[{'type',97,'anal_type',[]}|[{'atom',97,'plt_add'}|[{'atom',97,'plt_check'}|[{'atom',97,'plt_remove'}]]]]},[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{'contr_constr',{'type',98,'tuple',[{'atom',98,'subtype'}|[{'remote_type',98,[{'atom',98,'erl_types'}|[{'atom',98,'erl_type'}|[[]]]]}|[{'remote_type',98,[{'atom',98,'erl_types'}|[{'atom',98,'erl_type'}|[[]]]]}]]]},[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{'contract_pair',{'type',99,'tuple',[{'remote_type',99,[{'atom',99,'erl_types'}|[{'atom',99,'erl_type'}|[[]]]]}|[{'type',99,'list',[{'type',99,'contr_constr',[]}]}]]},[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{'dial_define',{'type',100,'tuple',[{'type',100,'atom',[]}|[{'type',100,'term',[]}]]},[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{'dial_option',{'type',101,'tuple',[{'type',101,'atom',[]}|[{'type',101,'term',[]}]]},[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{'dial_options',{'type',102,'list',[{'type',102,'dial_option',[]}]},[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{'fopt',{'type',103,'union',[{'atom',103,'basename'}|[{'atom',103,'fullpath'}]]},[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{'format',{'type',104,'union',[{'atom',104,'formatted'}|[{'atom',104,'raw'}]]},[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{'label',{'type',105,'non_neg_integer',[]},[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{'rep_mode',{'type',106,'union',[{'atom',106,'quiet'}|[{'atom',106,'normal'}|[{'atom',106,'verbose'}]]]},[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{'start_from',{'type',107,'union',[{'atom',107,'byte_code'}|[{'atom',107,'src_code'}]]},[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{'mfa_or_funlbl',{'type',108,'union',[{'type',108,'label',[]}|[{'type',108,'mfa',[]}]]},[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{'solver',{'type',109,'union',[{'atom',109,'v1'}|[{'atom',109,'v2'}]]},[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{{'record','analysis'},[{'typed_record_field',{'record_field',115,{'atom',115,'analysis_pid'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'pid',[]}]]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'type'},{'atom',116,'succ_typings'}},{'type',116,'anal_type',[]}}|[{'typed_record_field',{'record_field',117,{'atom',117,'defines'},{'nil',117}},{'type',117,'list',[{'type',117,'dial_define',[]}]}}|[{'typed_record_field',{'record_field',118,{'atom',118,'doc_plt'}},{'type',118,'union',[{'atom',118,'undefined'}|[{'remote_type',118,[{'atom',118,'dialyzer_plt'}|[{'atom',118,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',119,{'atom',119,'files'},{'nil',119}},{'type',119,'list',[{'remote_type',119,[{'atom',119,'file'}|[{'atom',119,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'include_dirs'},{'nil',120}},{'type',120,'list',[{'remote_type',120,[{'atom',120,'file'}|[{'atom',120,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',121,{'atom',121,'start_from'},{'atom',121,'byte_code'}},{'type',121,'start_from',[]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'plt'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'remote_type',122,[{'atom',122,'dialyzer_plt'}|[{'atom',122,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'use_contracts'},{'atom',123,'true'}},{'type',123,'boolean',[]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'race_detection'},{'atom',124,'false'}},{'type',124,'boolean',[]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'behaviours_chk'},{'atom',125,'false'}},{'type',125,'boolean',[]}}|[{'typed_record_field',{'record_field',126,{'atom',126,'timing'},{'atom',126,'false'}},{'type',126,'union',[{'type',126,'boolean',[]}|[{'atom',126,'debug'}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'timing_server'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'remote_type',127,[{'atom',127,'dialyzer_timing'}|[{'atom',127,'timing_server'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'callgraph_file'},{'string',128,[]}},{'remote_type',128,[{'atom',128,'file'}|[{'atom',128,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'solvers'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'list',[{'type',129,'solver',[]}]}]]}}]]]]]]]]]]]]]]],[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{{'record','options'},[{'typed_record_field',{'record_field',131,{'atom',131,'files'},{'nil',131}},{'type',131,'list',[{'remote_type',131,[{'atom',131,'file'}|[{'atom',131,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'files_rec'},{'nil',132}},{'type',132,'list',[{'remote_type',132,[{'atom',132,'file'}|[{'atom',132,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',133,{'atom',133,'analysis_type'},{'atom',133,'succ_typings'}},{'type',133,'anal_type1',[]}}|[{'typed_record_field',{'record_field',134,{'atom',134,'timing'},{'atom',134,'false'}},{'type',134,'union',[{'type',134,'boolean',[]}|[{'atom',134,'debug'}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'defines'},{'nil',135}},{'type',135,'list',[{'type',135,'dial_define',[]}]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'from'},{'atom',136,'byte_code'}},{'type',136,'start_from',[]}}|[{'typed_record_field',{'record_field',137,{'atom',137,'get_warnings'},{'atom',137,'maybe'}},{'type',137,'union',[{'type',137,'boolean',[]}|[{'atom',137,'maybe'}]]}}|[{'typed_record_field',{'record_field',138,{'atom',138,'init_plts'},{'nil',138}},{'type',138,'list',[{'remote_type',138,[{'atom',138,'file'}|[{'atom',138,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',139,{'atom',139,'include_dirs'},{'nil',139}},{'type',139,'list',[{'remote_type',139,[{'atom',139,'file'}|[{'atom',139,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'output_plt'},{'atom',140,'none'}},{'type',140,'union',[{'atom',140,'none'}|[{'remote_type',140,[{'atom',140,'file'}|[{'atom',140,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',141,{'atom',141,'legal_warnings'},{'call',141,{'remote',141,{'atom',141,'ordsets'},{'atom',141,'new'}},[]}},{'remote_type',141,[{'atom',141,'ordsets'}|[{'atom',141,'ordset'}|[[{'type',141,'dial_warn_tag',[]}]]]]}}|[{'typed_record_field',{'record_field',142,{'atom',142,'report_mode'},{'atom',142,'normal'}},{'type',142,'rep_mode',[]}}|[{'typed_record_field',{'record_field',143,{'atom',143,'erlang_mode'},{'atom',143,'false'}},{'type',143,'boolean',[]}}|[{'typed_record_field',{'record_field',144,{'atom',144,'use_contracts'},{'atom',144,'true'}},{'type',144,'boolean',[]}}|[{'typed_record_field',{'record_field',145,{'atom',145,'output_file'},{'atom',145,'none'}},{'type',145,'union',[{'atom',145,'none'}|[{'remote_type',145,[{'atom',145,'file'}|[{'atom',145,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',146,{'atom',146,'output_format'},{'atom',146,'formatted'}},{'type',146,'format',[]}}|[{'typed_record_field',{'record_field',147,{'atom',147,'filename_opt'},{'atom',147,'basename'}},{'type',147,'fopt',[]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'callgraph_file'},{'string',148,[]}},{'remote_type',148,[{'atom',148,'file'}|[{'atom',148,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'check_plt'},{'atom',149,'true'}},{'type',149,'boolean',[]}}|[{'typed_record_field',{'record_field',150,{'atom',150,'solvers'},{'nil',150}},{'type',150,'list',[{'type',150,'solver',[]}]}}]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 152
		'type' =
		    %% Line 152
		    [{{'record','contract'},[{'typed_record_field',{'record_field',152,{'atom',152,'contracts'},{'nil',152}},{'type',152,'list',[{'type',152,'contract_pair',[]}]}}|[{'typed_record_field',{'record_field',153,{'atom',153,'args'},{'nil',153}},{'type',153,'list',[{'remote_type',153,[{'atom',153,'erl_types'}|[{'atom',153,'erl_type'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',154,{'atom',154,'forms'},{'nil',154}},{'type',154,'list',[{'type',154,'tuple',[{'var',154,'_'}|[{'var',154,'_'}]]}]}}]]],[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'parent',{'type',63,'union',[{'atom',63,'none'}|[{'type',63,'pid',[]}]]},[]}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{'typesig_init_data',{'type',64,'term',[]},[]}],
		%% Line 65
		'type' =
		    %% Line 65
		    [{'dataflow_init_data',{'type',65,'term',[]},[]}],
		%% Line 66
		'type' =
		    %% Line 66
		    [{'warnings_init_data',{'type',66,'term',[]},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'fixpoint_init_data',{'type',68,'union',[{'type',68,'typesig_init_data',[]}|[{'type',68,'dataflow_init_data',[]}]]},[]}],
		%% Line 70
		'type' =
		    %% Line 70
		    [{'scc',{'type',70,'union',[{'type',70,'list',[{'type',70,'mfa_or_funlbl',[]}]}|[{'type',70,'list',[{'type',70,'module',[]}]}]]},[]}],
		%% Line 73
		'type' =
		    %% Line 73
		    [{{'record','st'},[{'typed_record_field',{'record_field',73,{'atom',73,'callgraph'}},{'type',73,'union',[{'atom',73,'undefined'}|[{'remote_type',73,[{'atom',73,'dialyzer_callgraph'}|[{'atom',73,'callgraph'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',74,{'atom',74,'codeserver'}},{'type',74,'union',[{'atom',74,'undefined'}|[{'remote_type',74,[{'atom',74,'dialyzer_codeserver'}|[{'atom',74,'codeserver'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',75,{'atom',75,'no_warn_unused'}},{'type',75,'union',[{'atom',75,'undefined'}|[{'remote_type',75,[{'atom',75,'sets'}|[{'atom',75,'set'}|[[{'type',75,'mfa',[]}]]]]}]]}}|[{'typed_record_field',{'record_field',76,{'atom',76,'parent'},{'atom',76,'none'}},{'type',76,'parent',[]}}|[{'typed_record_field',{'record_field',77,{'atom',77,'timing_server'}},{'type',77,'union',[{'atom',77,'undefined'}|[{'remote_type',77,[{'atom',77,'dialyzer_timing'}|[{'atom',77,'timing_server'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',78,{'atom',78,'solvers'}},{'type',78,'union',[{'atom',78,'undefined'}|[{'type',78,'list',[{'type',78,'solver',[]}]}]]}}|[{'typed_record_field',{'record_field',79,{'atom',79,'plt'}},{'type',79,'union',[{'atom',79,'undefined'}|[{'remote_type',79,[{'atom',79,'dialyzer_plt'}|[{'atom',79,'plt'}|[[]]]]}]]}}]]]]]]],[]}],
		%% Line 83
		'spec' =
		    %% Line 83
		    [{{'analyze_callgraph',3},[{'type',83,'fun',[{'type',83,'product',[{'remote_type',83,[{'atom',83,'dialyzer_callgraph'}|[{'atom',83,'callgraph'}|[[]]]]}|[{'remote_type',83,[{'atom',83,'dialyzer_plt'}|[{'atom',83,'plt'}|[[]]]]}|[{'remote_type',84,[{'atom',84,'dialyzer_codeserver'}|[{'atom',84,'codeserver'}|[[]]]]}]]]}|[{'remote_type',85,[{'atom',85,'dialyzer_plt'}|[{'atom',85,'plt'}|[[]]]]}]]}]}],
		%% Line 90
		'spec' =
		    %% Line 90
		    [{{'analyze_callgraph',6},[{'type',90,'fun',[{'type',90,'product',[{'remote_type',90,[{'atom',90,'dialyzer_callgraph'}|[{'atom',90,'callgraph'}|[[]]]]}|[{'remote_type',90,[{'atom',90,'dialyzer_plt'}|[{'atom',90,'plt'}|[[]]]]}|[{'remote_type',91,[{'atom',91,'dialyzer_codeserver'}|[{'atom',91,'codeserver'}|[[]]]]}|[{'remote_type',92,[{'atom',92,'dialyzer_timing'}|[{'atom',92,'timing_server'}|[[]]]]}|[{'type',93,'list',[{'type',93,'solver',[]}]}|[{'type',93,'parent',[]}]]]]]]}|[{'remote_type',94,[{'atom',94,'dialyzer_plt'}|[{'atom',94,'plt'}|[[]]]]}]]}]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{'doc_plt',{'type',138,'union',[{'atom',138,'undefined'}|[{'remote_type',138,[{'atom',138,'dialyzer_plt'}|[{'atom',138,'plt'}|[[]]]]}]]},[]}],
		%% Line 139
		'spec' =
		    %% Line 139
		    [{{'get_warnings',8},[{'type',139,'fun',[{'type',139,'product',[{'remote_type',139,[{'atom',139,'dialyzer_callgraph'}|[{'atom',139,'callgraph'}|[[]]]]}|[{'remote_type',139,[{'atom',139,'dialyzer_plt'}|[{'atom',139,'plt'}|[[]]]]}|[{'type',140,'doc_plt',[]}|[{'remote_type',140,[{'atom',140,'dialyzer_codeserver'}|[{'atom',140,'codeserver'}|[[]]]]}|[{'remote_type',140,[{'atom',140,'sets'}|[{'atom',140,'set'}|[[{'type',140,'mfa',[]}]]]]}|[{'remote_type',141,[{'atom',141,'dialyzer_timing'}|[{'atom',141,'timing_server'}|[[]]]]}|[{'type',141,'list',[{'type',141,'solver',[]}]}|[{'type',141,'pid',[]}]]]]]]]]}|[{'type',142,'tuple',[{'type',142,'list',[{'type',142,'dial_warning',[]}]}|[{'remote_type',142,[{'atom',142,'dialyzer_plt'}|[{'atom',142,'plt'}|[[]]]]}|[{'type',142,'doc_plt',[]}]]]}]]}]}],
		%% Line 171
		'spec' =
		    %% Line 171
		    [{{'collect_warnings',2},[{'type',171,'fun',[{'type',171,'product',[{'type',171,'module',[]}|[{'type',171,'warnings_init_data',[]}]]}|[{'type',171,'list',[{'type',171,'dial_warning',[]}]}]]}]}],
		%% Line 242
		'spec' =
		    %% Line 242
		    [{{'find_depends_on',2},[{'type',242,'fun',[{'type',242,'product',[{'type',242,'union',[{'type',242,'scc',[]}|[{'type',242,'module',[]}]]}|[{'type',242,'fixpoint_init_data',[]}]]}|[{'type',242,'list',[{'type',242,'scc',[]}]}]]}]}],
		%% Line 247
		'spec' =
		    %% Line 247
		    [{{'find_required_by',2},[{'type',247,'fun',[{'type',247,'product',[{'type',247,'union',[{'type',247,'scc',[]}|[{'type',247,'module',[]}]]}|[{'type',247,'fixpoint_init_data',[]}]]}|[{'type',247,'list',[{'type',247,'scc',[]}]}]]}]}],
		%% Line 252
		'spec' =
		    %% Line 252
		    [{{'lookup_names',2},[{'type',252,'fun',[{'type',252,'product',[{'type',252,'list',[{'type',252,'label',[]}]}|[{'type',252,'fixpoint_init_data',[]}]]}|[{'type',252,'list',[{'type',252,'mfa_or_funlbl',[]}]}]]}]}],
		%% Line 257
		'spec' =
		    %% Line 257
		    [{{'refine_one_module',2},[{'type',257,'fun',[{'type',257,'product',[{'type',257,'module',[]}|[{'type',257,'dataflow_init_data',[]}]]}|[{'type',257,'list',[{'type',257,'label',[]}]}]]}]}],
		%% Line 351
		'spec' =
		    %% Line 351
		    [{{'find_succ_types_for_scc',2},[{'type',351,'fun',[{'type',351,'product',[{'type',351,'scc',[]}|[{'type',351,'typesig_init_data',[]}]]}|[{'type',351,'list',[{'type',351,'mfa_or_funlbl',[]}]}]]}]}]]
'analyze_callgraph'/3 =
    %% Line 87
    fun (_cor2,_cor1,_cor0) ->
	%% Line 88
	apply 'analyze_callgraph'/6
	    (_cor2, _cor1, _cor0, 'none', [], 'none')
'analyze_callgraph'/6 =
    %% Line 96
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 100
	( case apply 'init_state_and_get_success_typings'/6
		   (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0) of
	    ( <( {'st',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_rec0}
		 -| ['compiler_generated'] )> when 'true' ->
		  call 'dialyzer_plt':'restore_full_plt'
		      (_rec0, _cor4)
	      -| ['compiler_generated'] )
	    ( <_cor21> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','st'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'init_state_and_get_success_typings'/6 =
    %% Line 104
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 107
	    call 'dialyzer_timing':'start_stamp'
		(_cor2, [111|[114|[100|[101|[114]]]]])
	    let <_X_T> =
		%% Line 107
		call 'dialyzer_callgraph':'finalize'
		    (_cor5)
	    in  do  %% Line 107
		    call 'dialyzer_timing':'end_stamp'
			(_cor2)
		    %% Line 106
		    case %% Line 107
			 _X_T of
		      <{SCCs,Callgraph1}> when 'true' ->
			  let <_cor8> =
			      %% Line 108
			      call 'dialyzer_plt':'get_mini_plt'
				  (_cor4)
			  in  let <State> =
				  %% Line 108
				  {'st',Callgraph1,_cor3,'undefined',_cor0,_cor2,_cor1,_cor8}
			      in  %% Line 111
				  apply 'get_refined_success_typings'/2
				      (SCCs, State)
		      ( <_cor7> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor7})
			-| ['compiler_generated'] )
		    end
'get_refined_success_typings'/2 =
    %% Line 113
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <SCCs,State = {'st',Callgraph,_cor18,_cor19,_cor20,%% Line 114
							     TimingServer,_cor21,_cor22}> when 'true' ->
	      %% Line 115
	      case apply 'find_succ_typings'/2
		       (SCCs, State) of
		%% Line 116
		<{'fixpoint',State1}> when 'true' ->
		    State1
		%% Line 117
		<{'not_fixpoint',NotFixpoint1,State1}> when 'true' ->
		    do  %% Line 119
			call 'dialyzer_timing':'start_stamp'
			    (%% Line 120
			     TimingServer, %% Line 120
					   [111|[114|[100|[101|[114]]]]])
			let <_X_C1> =
			    %% Line 121
			    call 'dialyzer_callgraph':'module_postorder_from_funs'
				(NotFixpoint1, %% Line 122
					       Callgraph)
			in  do  %% Line 122
				call 'dialyzer_timing':'end_stamp'
				    (TimingServer)
				%% Line 118
				case %% Line 120
				     _X_C1 of
				  <{ModulePostorder,ModCallgraph}> when 'true' ->
				      %% Line 123
				      case State1 of
					<{'st',_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29}> when 'true' ->
					    let <_cor6> =
						call 'erlang':'setelement'
						    (2, State1, ModCallgraph)
					    in  %% Line 124
						case apply 'refine_succ_typings'/2
							 (ModulePostorder, _cor6) of
						  %% Line 125
						  <{'fixpoint',State2}> when 'true' ->
						      %% Line 126
						      State2
						  %% Line 127
						  <{'not_fixpoint',NotFixpoint2,State2}> when 'true' ->
						      do  %% Line 130
							  call 'dialyzer_timing':'start_stamp'
							      (TimingServer, [111|[114|[100|[101|[114]]]]])
							  let <_X_C2> =
							      %% Line 131
							      call 'dialyzer_callgraph':'reset_from_funs'
								  (NotFixpoint2, %% Line 132
										 ModCallgraph)
							  in  do  %% Line 132
								  call 'dialyzer_timing':'end_stamp'
								      (TimingServer)
								  %% Line 129
								  case %% Line 130
								       _X_C2 of
								    <{NewSCCs,Callgraph2}> when 'true' ->
									%% Line 133
									case State2 of
									  <{'st',_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37}> when 'true' ->
									      let <_cor12> =
										  call 'erlang':'setelement'
										      (2, State2, Callgraph2)
									      in  %% Line 134
										  apply 'get_refined_success_typings'/2
										      (NewSCCs, _cor12)
									  ( <_cor38> when 'true' ->
										( call ( 'erlang'
											 -| ['compiler_generated'] ):( 'error'
														       -| ['compiler_generated'] )
										      (( {'badrecord','st'}
											 -| ['compiler_generated'] ))
										  -| ['compiler_generated'] )
									    -| ['compiler_generated'] )
									end
								    ( <_cor9> when 'true' ->
									  primop 'match_fail'
									      ({'badmatch',_cor9})
								      -| ['compiler_generated'] )
								  end
						  ( <_cor14> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor14})
						    -| ['compiler_generated'] )
						end
					( <_cor30> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','st'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				  ( <_cor3> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor3})
				    -| ['compiler_generated'] )
				end
		( <_cor15> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor15})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16})
		  -| [{'function_name',{'get_refined_success_typings',2}}] )
	    -| ['compiler_generated'] )
	end
'get_warnings'/8 =
    %% Line 144
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <InitState> =
	    %% Line 147
	    apply 'init_state_and_get_success_typings'/6
		(_cor7, _cor6, _cor4, _cor2, _cor1, _cor0)
	in  %% Line 149
	    case InitState of
	      <{'st',_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42}> when 'true' ->
		  let <_cor11> =
		      call 'erlang':'setelement'
			  (4, InitState, _cor3)
		  in  %% Line 150
		      ( case _cor11 of
			  ( <( {'st',_rec4,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49}
			       -| ['compiler_generated'] )> when 'true' ->
				let <Mods> =
				    call 'dialyzer_callgraph':'modules'
					(_rec4)
				in  let <FindOpaques> =
					%% Line 152
					apply 'lookup_and_find_opaques_fun'/1
					    (_cor4)
				    in  let <CWarns> =
					    %% Line 154
					    call 'dialyzer_contracts':'get_invalid_contract_warnings'
						(Mods, _cor4, _cor49, %% Line 155
								      FindOpaques)
					in  let <MiniDocPlt> =
						%% Line 156
						call 'dialyzer_plt':'get_mini_plt'
						    (_cor5)
					    in  do  %% Line 158
						    call 'dialyzer_timing':'start_stamp'
							(_cor2, [119|[97|[114|[110|[105|[110|[103]]]]]]])
						    let <_X_T> =
							%% Line 159
							apply 'get_warnings_from_modules'/3
							    (Mods, _cor11, MiniDocPlt)
						    in  do  %% Line 159
							    call 'dialyzer_timing':'end_stamp'
								(_cor2)
							    let <_cor26> =
								%% Line 160
								call 'erlang':'++'
								    (CWarns, _X_T)
							    in  let <_cor27> =
								    %% Line 160
								    apply 'postprocess_warnings'/2
									(_cor26, _cor4)
								in  let <_cor25> =
									%% Line 161
									call 'dialyzer_plt':'restore_full_plt'
									    (_cor49, _cor6)
								    in  let <_cor24> =
									    %% Line 162
									    call 'dialyzer_plt':'restore_full_plt'
										(MiniDocPlt, _cor5)
									in  %% Line 160
									    {_cor27,_cor25,_cor24}
			    -| ['compiler_generated'] )
			  ( <_cor50> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','st'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	      ( <_cor43> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','st'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
'get_warnings_from_modules'/3 =
    %% Line 164
    fun (_cor2,_cor1,_cor0) ->
	%% Line 167
	case _cor1 of
	  <{'st',Callgraph,Codeserver,NoWarnUnused,_cor8,TimingServer,_cor9,Plt}> when 'true' ->
	      let <Init> =
		  %% Line 168
		  {Codeserver,Callgraph,NoWarnUnused,Plt,_cor0}
	      in  %% Line 169
		  call 'dialyzer_coordinator':'parallel_job'
		      ('warnings', _cor2, Init, TimingServer)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'collect_warnings'/2 =
    %% Line 173
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <M,{Codeserver,Callgraph,NoWarnUnused,Plt,DocPlt}> when 'true' ->
	      let <ModCode> =
		  %% Line 174
		  call 'dialyzer_codeserver':'lookup_mod_code'
		      (M, Codeserver)
	      in  let <Records> =
		      %% Line 175
		      call 'dialyzer_codeserver':'lookup_mod_records'
			  (M, Codeserver)
		  in  let <Contracts> =
			  %% Line 176
			  call 'dialyzer_codeserver':'lookup_mod_contracts'
			      (M, Codeserver)
		      in  let <AllFuns> =
			      %% Line 177
			      apply 'collect_fun_info'/1
				  ([ModCode|[]])
			  in  let <Warnings1> =
				  %% Line 180
				  call 'dialyzer_contracts':'contracts_without_fun'
				      (Contracts, AllFuns, Callgraph)
			      in  %% Line 181
				  case %% Line 182
				       call 'dialyzer_dataflow':'get_warnings'
					   (ModCode, Plt, Callgraph, %% Line 183
								     Records, %% Line 183
									      NoWarnUnused) of
				    <{Warnings2,FunTypes}> when 'true' ->
					let <Attrs> =
					    %% Line 184
					    call 'cerl':'module_attrs'
						(ModCode)
					in  let <Warnings3> =
						%% Line 186
						call 'dialyzer_behaviours':'check_callbacks'
						    (M, Attrs, Records, Plt, Codeserver)
					    in  %% Line 187
						case apply 'insert_into_doc_plt'/3
							 (FunTypes, Callgraph, DocPlt) of
						  <_cor13>
						      when call 'erlang':'=:='
							    (_cor13,
							     DocPlt) ->
						      %% Line 188
						      call 'lists':'flatten'
							  ([Warnings1|[Warnings2|[Warnings3|[]]]])
						  ( <_cor10> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor10})
						    -| ['compiler_generated'] )
						end
				    ( <_cor7> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor7})
				      -| ['compiler_generated'] )
				  end
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11})
		  -| [{'function_name',{'collect_warnings',2}}] )
	    -| ['compiler_generated'] )
	end
'postprocess_warnings'/2 =
    %% Line 190
    fun (_cor1,_cor0) ->
	let <Pred> =
	    %% Line 192
	    ( fun (_cor2) ->
		  case _cor2 of
		    <{'warn_contract_range',_cor8,_cor9}> when 'true' ->
			'true'
		    %% Line 193
		    <_cor10> when 'true' ->
			'false'
		  end
	      -| [{'id',{0,0,'-postprocess_warnings/2-fun-0-'}}] )
	in  %% Line 195
	    case call 'lists':'partition'
		     (Pred, _cor1) of
	      <{CRWarns,NonCRWarns}> when 'true' ->
		  %% Line 196
		  apply 'postprocess_dataflow_warns'/4
		      (CRWarns, _cor0, NonCRWarns, [])
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor5})
		-| ['compiler_generated'] )
	    end
'postprocess_dataflow_warns'/4 =
    %% Line 198
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_Callgraph,WAcc,Acc> when 'true' ->
	      %% Line 199
	      call 'lists':'reverse'
		  (Acc, WAcc)
	  %% Line 200
	  <[{'warn_contract_range',{CallF,CallL},Msg}|Rest],%% Line 201
							    Codeserver,%% Line 201
								       WAcc,%% Line 201
									    Acc> when 'true' ->
	      %% Line 202
	      case Msg of
		<{'contract_range',[Contract|[M|[F|[A|[ArgStrings|[CRet|[]]]]]]]}> when 'true' ->
		    %% Line 203
		    case call 'dialyzer_codeserver':'lookup_mfa_contract'
			     ({M,F,A}, Codeserver) of
		      %% Line 204
		      <{'ok',{FileLine = {ContrF,_X_ContrL},_X_C}}> when 'true' ->
			  %% Line 205
			  case <> of
			    %% Line 206
			    <>
				when call 'erlang':'=:='
				      (CallF,
				       ContrF) ->
				let <NewMsg> =
				    %% Line 207
				    {'contract_range',[Contract|[M|[F|[ArgStrings|[CallL|[CRet|[]]]]]]]}
				in  let <W> = {%% Line 208
					 'warn_contract_range',%% Line 208
							       FileLine,%% Line 208
									NewMsg}
				    in  let <Filter> =
					    %% Line 210
					    ( fun (_cor7) ->
						  case _cor7 of
						    <{'warn_contract_types',FL,_cor19}>
							when call 'erlang':'=:='
							      (FL,
							       FileLine) ->
							'false'
						    %% Line 211
						    <_cor20> when 'true' ->
							'true'
						  end
					      -| [{'id',{0,0,'-postprocess_dataflow_warns/4-fun-0-'}}] )
					in  let <FilterWAcc> =
						%% Line 213
						call 'lists':'filter'
						    (Filter, WAcc)
					    in  %% Line 214
						apply 'postprocess_dataflow_warns'/4
						    (Rest, Codeserver, FilterWAcc, [W|Acc])
			    %% Line 215
			    <> when 'true' ->
				%% Line 216
				apply 'postprocess_dataflow_warns'/4
				    (Rest, Codeserver, WAcc, Acc)
			  end
		      %% Line 218
		      <'error'> when 'true' ->
			  let <NewMsg> =
			      %% Line 221
			      {'contract_range',[Contract|[M|[F|[ArgStrings|[CallL|[CRet|[]]]]]]]}
			  in  let <W> = {%% Line 222
				   'warn_contract_range',%% Line 222
							 {CallF,CallL},%% Line 222
								       NewMsg}
			      in  %% Line 223
				  apply 'postprocess_dataflow_warns'/4
				      (Rest, Codeserver, WAcc, [W|Acc])
		      ( <_cor14> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor14})
			-| ['compiler_generated'] )
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'postprocess_dataflow_warns',4}}] )
	    -| ['compiler_generated'] )
	end
'refine_succ_typings'/2 =
    %% Line 226
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Modules,State = {'st',%% Line 227
				 Callgraph,Codeserver,_cor8,_cor9,%% Line 229
								  Timing,%% Line 230
									 Solvers,%% Line 228
										 Plt}> when 'true' ->
	      let <Init> =
		  %% Line 232
		  {Codeserver,Callgraph,Plt,Solvers}
	      in  do  %% Line 234
		      call 'dialyzer_timing':'start_stamp'
			  (Timing, [114|[101|[102|[105|[110|[101]]]]]])
		      let <_X_T> =
			  %% Line 235
			  call 'dialyzer_coordinator':'parallel_job'
			      ('dataflow', Modules, Init, Timing)
		      in  do  %% Line 235
			      call 'dialyzer_timing':'end_stamp'
				  (Timing)
			      %% Line 237
			      case <> of
				%% Line 238
				<>
				    when call 'erlang':'=:='
					  (_X_T,
					   []) ->
				    {'fixpoint',State}
				%% Line 239
				<> when 'true' ->
				    {'not_fixpoint',_X_T,State}
			      end
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'refine_succ_typings',2}}] )
	    -| ['compiler_generated'] )
	end
'find_depends_on'/2 =
    %% Line 244
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <SCC,{_X_Codeserver,Callgraph,_X_Plt,_X_Solvers}> when 'true' ->
	      %% Line 245
	      call 'dialyzer_callgraph':'get_depends_on'
		  (SCC, Callgraph)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'find_depends_on',2}}] )
	    -| ['compiler_generated'] )
	end
'find_required_by'/2 =
    %% Line 249
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <SCC,{_X_Codeserver,Callgraph,_X_Plt,_X_Solvers}> when 'true' ->
	      %% Line 250
	      call 'dialyzer_callgraph':'get_required_by'
		  (SCC, Callgraph)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'find_required_by',2}}] )
	    -| ['compiler_generated'] )
	end
'lookup_names'/2 =
    %% Line 254
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Labels,{_X_Codeserver,Callgraph,_X_Plt,_X_Solvers}> when 'true' ->
	      %% Line 255
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor4) ->
			    case _cor4 of
			      <[F|_cor3]> when 'true' ->
				  let <_cor5> =
				      apply 'lookup_name'/2
					  (F, Callgraph)
				  in  let <_cor6> =
					  apply 'lc$^0'/1
					      (_cor3)
				      in  ( [_cor5|_cor6]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor4> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor4})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(Labels)
		-| ['list_comprehension'] )
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'lookup_names',2}}] )
	    -| ['compiler_generated'] )
	end
'refine_one_module'/2 =
    %% Line 259
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <M,{CodeServer,Callgraph,Plt,_X_Solvers}> when 'true' ->
	      let <ModCode> =
		  %% Line 260
		  call 'dialyzer_codeserver':'lookup_mod_code'
		      (M, CodeServer)
	      in  let <AllFuns> =
		      %% Line 261
		      apply 'collect_fun_info'/1
			  ([ModCode|[]])
		  in  let <Records> =
			  %% Line 262
			  call 'dialyzer_codeserver':'lookup_mod_records'
			      (M, CodeServer)
		      in  let <FunTypes> =
			      %% Line 263
			      apply 'get_fun_types_from_plt'/3
				  (AllFuns, Callgraph, Plt)
			  in  let <NewFunTypes> =
				  %% Line 265
				  call 'dialyzer_dataflow':'get_fun_types'
				      (ModCode, Plt, Callgraph, Records)
			      in  let <Contracts1> =
				      %% Line 266
				      call 'dialyzer_codeserver':'lookup_mod_contracts'
					  (M, CodeServer)
				  in  let <_cor8> =
					  %% Line 267
					  call 'dict':'to_list'
					      (Contracts1)
				      in  let <Contracts> =
					      %% Line 267
					      call 'orddict':'from_list'
						  (_cor8)
					  in  let <FindOpaques> =
						  %% Line 268
						  apply 'find_opaques_fun'/1
						      (Records)
					      in  let <DecoratedFunTypes> =
						      %% Line 270
						      apply 'decorate_succ_typings'/4
							  (Contracts, Callgraph, NewFunTypes, FindOpaques)
						  in  do  %% Line 273
							  apply 'debug_pp_functions'/4
							      ([82|[101|[102|[105|[110|[101]]]]]], NewFunTypes, DecoratedFunTypes, Callgraph)
							  %% Line 275
							  case apply 'reached_fixpoint'/2
								   (FunTypes, DecoratedFunTypes) of
							    %% Line 276
							    <'true'> when 'true' ->
								[]
							    %% Line 277
							    <{'false',NotFixpoint}> when 'true' ->
								let <_cor12> =
								    %% Line 279
								    call 'dict':'from_list'
									(NotFixpoint)
								in  %% Line 279
								    case apply 'insert_into_plt'/3
									     (_cor12, Callgraph, Plt) of
								      <_cor21>
									  when call 'erlang':'=:='
										(_cor21,
										 Plt) ->
									  %% Line 280
									  ( letrec
										'lc$^0'/1 =
										    fun (_cor16) ->
											case _cor16 of
											  <[{FunLbl,_X_Type}|_cor15]> when 'true' ->
											      let <_cor17> =
												  apply 'lc$^0'/1
												      (_cor15)
											      in  ( [FunLbl|_cor17]
												    -| ['compiler_generated'] )
											  ( <[_cor14|_cor15]> when 'true' ->
												apply 'lc$^0'/1
												    (_cor15)
											    -| ['compiler_generated'] )
											  <[]> when 'true' ->
											      []
											  ( <_cor16> when 'true' ->
												( primop 'match_fail'
												      ({'function_clause',_cor16})
												  -| [{'function_name',{'lc$^0',1}}] )
											    -| ['compiler_generated'] )
											end
									    in  apply 'lc$^0'/1
										    (NotFixpoint)
									    -| ['list_comprehension'] )
								      ( <_cor13> when 'true' ->
									    primop 'match_fail'
										({'badmatch',_cor13})
									-| ['compiler_generated'] )
								    end
							    ( <_cor18> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_cor18})
							      -| ['compiler_generated'] )
							  end
	  ( <_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19})
		  -| [{'function_name',{'refine_one_module',2}}] )
	    -| ['compiler_generated'] )
	end
'reached_fixpoint'/2 =
    %% Line 283
    fun (_cor1,_cor0) ->
	%% Line 284
	apply 'reached_fixpoint'/3
	    (_cor1, _cor0, 'false')
'reached_fixpoint_strict'/2 =
    %% Line 286
    fun (_cor1,_cor0) ->
	%% Line 287
	case apply 'reached_fixpoint'/3
		 (_cor1, _cor0, 'true') of
	  %% Line 288
	  <'true'> when 'true' ->
	      'true'
	  %% Line 289
	  <{'false',_cor5}> when 'true' ->
	      'false'
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'reached_fixpoint'/3 =
    %% Line 292
    fun (_cor2,_cor1,_cor0) ->
	let <MapFun> =
	    %% Line 293
	    ( fun (_cor5,_cor4) ->
		  %% Line 294
		  case apply 'is_failed_or_not_called_fun'/1
			   (_cor4) of
		    %% Line 295
		    <'true'> when 'true' ->
			'failed_fun'
		    %% Line 296
		    <'false'> when 'true' ->
			call 'erl_types':'t_limit'
			    (_cor4, 4)
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-reached_fixpoint/3-fun-0-'}}] )
	in  let <OldTypes> =
		%% Line 299
		call 'dict':'map'
		    (MapFun, _cor2)
	    in  let <NewTypes> =
		    %% Line 300
		    call 'dict':'map'
			(MapFun, _cor1)
		in  %% Line 301
		    apply 'compare_types'/3
			(OldTypes, NewTypes, _cor0)
'is_failed_or_not_called_fun'/1 =
    %% Line 303
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 304
	    call 'erl_types':'t_fun_range'
		(_cor0)
	in  let <_cor2> =
		%% Line 304
		call 'erl_types':'t_fun_args'
		    (_cor0)
	    in  %% Line 304
		call 'erl_types':'any_none'
		    ([_cor1|_cor2])
'compare_types'/3 =
    %% Line 306
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 307
	    call 'dict':'to_list'
		(_cor2)
	in  let <List1> =
		%% Line 307
		call 'lists':'keysort'
		    (1, _cor3)
	    in  let <_cor5> =
		    %% Line 308
		    call 'dict':'to_list'
			(_cor1)
		in  let <List2> =
			%% Line 308
			call 'lists':'keysort'
			    (1, _cor5)
		    in  %% Line 309
			apply 'compare_types_1'/4
			    (List1, List2, _cor0, [])
'compare_types_1'/4 =
    %% Line 311
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{X,_X_Type1}|Left1],[{_cor13,'failed_fun'}|Left2],%% Line 312
							      Strict,%% Line 312
								     NotFixpoint>
	      when call 'erlang':'=:='
		    (_cor13,
		     X) ->
	      %% Line 313
	      apply 'compare_types_1'/4
		  (Left1, Left2, Strict, NotFixpoint)
	  %% Line 314
	  <[{X,'failed_fun'}|Left1],[{_cor14,_X_Type2}|Left2],%% Line 315
							      Strict,%% Line 315
								     NotFixpoint>
	      when call 'erlang':'=:='
		    (_cor14,
		     X) ->
	      %% Line 316
	      apply 'compare_types_1'/4
		  (Left1, Left2, Strict, NotFixpoint)
	  %% Line 317
	  <[{X,Type1}|Left1],[{_cor15,Type2}|Left2],Strict,NotFixpoint>
	      when call 'erlang':'=:='
		    (_cor15,
		     X) ->
	      let <_cor5> =
		  %% Line 318
		  case Strict of
		    %% Line 319
		    <'true'> when 'true' ->
			call 'erl_types':'t_is_equal'
			    (Type1, Type2)
		    %% Line 320
		    <'false'> when 'true' ->
			call 'erl_types':'t_is_subtype'
			    (Type1, Type2)
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 322
		  case _cor5 of
		    %% Line 323
		    <'true'> when 'true' ->
			apply 'compare_types_1'/4
			    (Left1, Left2, Strict, NotFixpoint)
		    %% Line 324
		    <'false'> when 'true' ->
			%% Line 327
			apply 'compare_types_1'/4
			    (Left1, Left2, Strict, [{X,Type2}|NotFixpoint])
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
	  %% Line 329
	  <[_cor16|Left1],List2,Strict,NotFixpoint> when 'true' ->
	      %% Line 331
	      apply 'compare_types_1'/4
		  (Left1, List2, Strict, NotFixpoint)
	  %% Line 332
	  <[],[],_X_Strict,NotFixpoint> when 'true' ->
	      %% Line 333
	      case <> of
		%% Line 334
		<>
		    when call 'erlang':'=:='
			  (NotFixpoint,
			   []) ->
		    'true'
		%% Line 335
		<> when 'true' ->
		    {'false',NotFixpoint}
	      end
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'compare_types_1',4}}] )
	    -| ['compiler_generated'] )
	end
'find_succ_typings'/2 =
    %% Line 338
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <SCCs,State = {'st',Callgraph,Codeserver,_cor8,_cor9,%% Line 339
							       Timing,%% Line 340
								      Solvers,%% Line 339
									      Plt}> when 'true' ->
	      let <Init> =
		  %% Line 341
		  {Codeserver,Callgraph,Plt,Solvers}
	      in  do  %% Line 343
		      call 'dialyzer_timing':'start_stamp'
			  (Timing, [116|[121|[112|[101|[115|[105|[103]]]]]]])
		      let <_X_T> =
			  %% Line 344
			  call 'dialyzer_coordinator':'parallel_job'
			      ('typesig', SCCs, Init, Timing)
		      in  do  %% Line 344
			      call 'dialyzer_timing':'end_stamp'
				  (Timing)
			      %% Line 346
			      case <> of
				%% Line 347
				<>
				    when call 'erlang':'=:='
					  (_X_T,
					   []) ->
				    {'fixpoint',State}
				%% Line 348
				<> when 'true' ->
				    {'not_fixpoint',_X_T,State}
			      end
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'find_succ_typings',2}}] )
	    -| ['compiler_generated'] )
	end
'find_succ_types_for_scc'/2 =
    %% Line 353
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <SCC,{Codeserver,Callgraph,Plt,Solvers}> when 'true' ->
	      let <_cor8> =
		  %% Line 354
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[MFA = %% Line 357
					  {M,_cor65,_cor66}|_cor3]> when 'true' ->
				      let <_cor6> =
					  %% Line 355
					  call 'dialyzer_codeserver':'lookup_mfa_code'
					      (MFA, Codeserver)
				      in  let <_cor5> =
					      %% Line 356
					      call 'dialyzer_codeserver':'lookup_mod_records'
						  (M, Codeserver)
					  in  let <_cor7> =
						  %% Line 357
						  apply 'lc$^0'/1
						      (_cor3)
					      in  ( [{MFA,_cor6,_cor5}|_cor7]
						    -| ['compiler_generated'] )
				  ( <[_cor2|_cor3]> when 'true' ->
					%% Line 357
					apply 'lc$^0'/1
					    (_cor3)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (%% Line 357
			     SCC)
		    -| ['list_comprehension'] )
	      in  let <_cor15> =
		      %% Line 358
		      ( letrec
			    'lc$^1'/1 =
				fun (_cor12) ->
				    case _cor12 of
				      <[MFA = %% Line 359
					      {_cor67,_cor68,_cor69}|_cor11]> when 'true' ->
					  let <_cor13> =
					      call 'dialyzer_codeserver':'lookup_mfa_contract'
						  (MFA, Codeserver)
					  in  let <_cor14> =
						  %% Line 359
						  apply 'lc$^1'/1
						      (_cor11)
					      in  ( [{MFA,_cor13}|_cor14]
						    -| ['compiler_generated'] )
				      ( <[_cor10|_cor11]> when 'true' ->
					    %% Line 359
					    apply 'lc$^1'/1
						(_cor11)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor12> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor12})
					      -| [{'function_name',{'lc$^1',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^1'/1
				(%% Line 359
				 SCC)
			-| ['list_comprehension'] )
		  in  let <_cor21> =
			  %% Line 360
			  ( letrec
				'lc$^2'/1 =
				    fun (_cor19) ->
					case _cor19 of
					  <[{MFA,{'ok',Contract}}|_cor18]> when 'true' ->
					      let <_cor20> =
						  apply 'lc$^2'/1
						      (_cor18)
					      in  ( [{MFA,Contract}|_cor20]
						    -| ['compiler_generated'] )
					  ( <[_cor17|_cor18]> when 'true' ->
						apply 'lc$^2'/1
						    (_cor18)
					    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor19> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor19})
						  -| [{'function_name',{'lc$^2',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^2'/1
				    (_cor15)
			    -| ['list_comprehension'] )
		      in  let <Contracts3> =
			      %% Line 361
			      call 'orddict':'from_list'
				  (_cor21)
			  in  let <Label> =
				  %% Line 362
				  call 'dialyzer_codeserver':'get_next_core_label'
				      (Codeserver)
			      in  let <_cor29> =
				      %% Line 363
				      ( letrec
					    'lc$^3'/1 =
						fun (_cor27) ->
						    case _cor27 of
						      <[{_X_MFA,{_X_Var,Fun},_X_Rec}|_cor26]> when 'true' ->
							  let <_cor28> =
							      apply 'lc$^3'/1
								  (_cor26)
							  in  ( [Fun|_cor28]
								-| ['compiler_generated'] )
						      ( <[_cor25|_cor26]> when 'true' ->
							    apply 'lc$^3'/1
								(_cor26)
							-| ['compiler_generated'] )
						      <[]> when 'true' ->
							  []
						      ( <_cor27> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor27})
							      -| [{'function_name',{'lc$^3',1}}] )
							-| ['compiler_generated'] )
						    end
					in  apply 'lc$^3'/1
						(_cor8)
					-| ['list_comprehension'] )
				  in  let <AllFuns> =
					  %% Line 363
					  apply 'collect_fun_info'/1
					      (_cor29)
				      in  let <PropTypes> =
					      %% Line 364
					      apply 'get_fun_types_from_plt'/3
						  (AllFuns, Callgraph, Plt)
					  in  let <FunTypes> =
						  %% Line 366
						  call 'dialyzer_typesig':'analyze_scc'
						      (_cor8, Label, Callgraph, %% Line 367
										Plt, %% Line 367
										     PropTypes, %% Line 367
												Solvers)
					      in  let <_cor37> =
						      %% Line 368
						      ( letrec
							    'lc$^4'/1 =
								fun (_cor35) ->
								    case _cor35 of
								      <[{X,_cor70}|_cor34]> when 'true' ->
									  let <_cor36> =
									      apply 'lc$^4'/1
										  (_cor34)
									  in  ( [X|_cor36]
										-| ['compiler_generated'] )
								      ( <[_cor33|_cor34]> when 'true' ->
									    apply 'lc$^4'/1
										(_cor34)
									-| ['compiler_generated'] )
								      <[]> when 'true' ->
									  []
								      ( <_cor35> when 'true' ->
									    ( primop 'match_fail'
										  ({'function_clause',_cor35})
									      -| [{'function_name',{'lc$^4',1}}] )
									-| ['compiler_generated'] )
								    end
							in  apply 'lc$^4'/1
								(AllFuns)
							-| ['list_comprehension'] )
						  in  let <AllFunSet> =
							  %% Line 368
							  call 'sets':'from_list'
							      (_cor37)
						      in  let <_cor43> =
							      %% Line 370
							      ( fun (_cor40,_cor39) ->
								    call 'sets':'is_element'
									(_cor40, AllFunSet)
								-| [{'id',{0,0,'-find_succ_types_for_scc/2-fun-0-'}}] )
							  in  let <FilteredFunTypes> =
								  %% Line 370
								  call 'dict':'filter'
								      (_cor43, FunTypes)
							      in  let <FindOpaques> =
								      %% Line 371
								      apply 'lookup_and_find_opaques_fun'/1
									  (Codeserver)
								  in  let <DecoratedFunTypes> =
									  %% Line 373
									  apply 'decorate_succ_typings'/4
									      (Contracts3, Callgraph, FilteredFunTypes, FindOpaques)
								      in  let <PltContracts> =
									      %% Line 376
									      call 'dialyzer_contracts':'check_contracts'
										  (Contracts3, Callgraph, %% Line 377
													  DecoratedFunTypes, %% Line 377
															     FindOpaques)
									  in  do  %% Line 380
										  apply 'debug_pp_functions'/4
										      ([83|[67|[67]]], FilteredFunTypes, DecoratedFunTypes, Callgraph)
										  let <_cor51> =
										      %% Line 382
										      ( fun (_cor49) ->
											    case _cor49 of
											      <{MFA,_X_C}> when 'true' ->
												  %% Line 384
												  case call 'dialyzer_plt':'lookup_contract'
													   (Plt, MFA) of
												    %% Line 385
												    <'none'> when 'true' ->
													'false'
												    %% Line 386
												    <{'value',_cor72}> when 'true' ->
													'true'
												    ( <_cor48> when 'true' ->
													  primop 'match_fail'
													      ({'case_clause',_cor48})
												      -| ['compiler_generated'] )
												  end
											      ( <_cor50> when 'true' ->
												    ( primop 'match_fail'
													  ({'function_clause',_cor50})
												      -| [{'function_name',{'-find_succ_types_for_scc/2-fun-1-',1}}] )
												-| ['compiler_generated'] )
											    end
											-| [{'id',{0,0,'-find_succ_types_for_scc/2-fun-1-'}}] )
										  in  let <ContractFixpoint> =
											  %% Line 382
											  call 'lists':'all'
											      (_cor51, %% Line 388
												       PltContracts)
										      in  %% Line 389
											  case apply 'insert_into_plt'/3
												   (DecoratedFunTypes, Callgraph, Plt) of
											    <_cor73>
												when call 'erlang':'=:='
												      (_cor73,
												       Plt) ->
												%% Line 390
												case call 'dialyzer_plt':'insert_contract_list'
													 (Plt, PltContracts) of
												  <_cor74>
												      when call 'erlang':'=:='
													    (_cor74,
													     Plt) ->
												      let <_cor57> =
													  %% Line 391
													  ( case ContractFixpoint of
													      ( <( 'true'
														   -| ['compiler_generated'] )> when 'true' ->
														    %% Line 392
														    apply 'reached_fixpoint_strict'/2
															(PropTypes, DecoratedFunTypes)
														-| ['compiler_generated'] )
													      ( <( 'false'
														   -| ['compiler_generated'] )> when 'true' ->
														    'false'
														-| ['compiler_generated'] )
													      ( <_cor55> when 'true' ->
														    ( call ( 'erlang'
															     -| ['compiler_generated'] ):( 'error'
																			   -| ['compiler_generated'] )
															  (( {( 'badarg'
																-| ['compiler_generated'] ),_cor55}
															     -| ['compiler_generated'] ))
														      -| ['compiler_generated'] )
														-| ['compiler_generated'] )
													    end
													    -| ['compiler_generated'] )
												      in  %% Line 391
													  case _cor57 of
													    %% Line 393
													    <'true'> when 'true' ->
														[]
													    %% Line 394
													    <'false'> when 'true' ->
														%% Line 396
														( letrec
														      'lc$^5'/1 =
															  fun (_cor60) ->
															      case _cor60 of
																<[{Fun,_X_Arity}|_cor59]> when 'true' ->
																    let <_cor61> =
																	apply 'lc$^5'/1
																	    (_cor59)
																    in  ( [Fun|_cor61]
																	  -| ['compiler_generated'] )
																( <[_cor58|_cor59]> when 'true' ->
																      apply 'lc$^5'/1
																	  (_cor59)
																  -| ['compiler_generated'] )
																<[]> when 'true' ->
																    []
																( <_cor60> when 'true' ->
																      ( primop 'match_fail'
																	    ({'function_clause',_cor60})
																	-| [{'function_name',{'lc$^5',1}}] )
																  -| ['compiler_generated'] )
															      end
														  in  apply 'lc$^5'/1
															  (AllFuns)
														  -| ['list_comprehension'] )
													    ( <_cor62> when 'true' ->
														  primop 'match_fail'
														      ({'case_clause',_cor62})
													      -| ['compiler_generated'] )
													  end
												  ( <_cor54> when 'true' ->
													primop 'match_fail'
													    ({'badmatch',_cor54})
												    -| ['compiler_generated'] )
												end
											    ( <_cor53> when 'true' ->
												  primop 'match_fail'
												      ({'badmatch',_cor53})
											      -| ['compiler_generated'] )
											  end
	  ( <_cor64,_cor63> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor64,_cor63})
		  -| [{'function_name',{'find_succ_types_for_scc',2}}] )
	    -| ['compiler_generated'] )
	end
'decorate_succ_typings'/4 =
    %% Line 399
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <F> =
	    %% Line 400
	    ( fun (_cor12,_cor11) ->
		  %% Line 401
		  case call 'dialyzer_callgraph':'lookup_name'
			   (_cor12, _cor2) of
		    %% Line 402
		    <{'ok',MFA}> when 'true' ->
			%% Line 403
			case call 'orddict':'find'
				 (MFA, _cor3) of
			  %% Line 404
			  <{'ok',{_X_FileLine,Contract}}> when 'true' ->
			      let <Args> =
				  %% Line 405
				  call 'dialyzer_contracts':'get_contract_args'
				      (Contract)
			      in  let <Ret> =
				      %% Line 406
				      call 'dialyzer_contracts':'get_contract_return'
					  (Contract)
				  in  let <C> =
					  %% Line 407
					  call 'erl_types':'t_fun'
					      (Args, Ret)
				      in  %% Line 408
					  case MFA of
					    <{M,_cor20,_cor21}> when 'true' ->
						let <Opaques> =
						    %% Line 409
						    apply _cor0
							(M)
						in  %% Line 410
						    call 'erl_types':'t_decorate_with_opaque'
							(_cor11, C, Opaques)
					    ( <_cor7> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor7})
					      -| ['compiler_generated'] )
					  end
			  %% Line 411
			  <'error'> when 'true' ->
			      _cor11
			  ( <_cor9> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor9})
			    -| ['compiler_generated'] )
			end
		    %% Line 413
		    <'error'> when 'true' ->
			_cor11
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor10})
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-decorate_succ_typings/4-fun-0-'}}] )
	in  %% Line 416
	    call 'dict':'map'
		(F, _cor1)
'lookup_and_find_opaques_fun'/1 =
    %% Line 418
    fun (_cor0) ->
	%% Line 419
	( fun (_cor3) ->
	      let <Records> =
		  %% Line 420
		  call 'dialyzer_codeserver':'lookup_mod_records'
		      (_cor3, _cor0)
	      in  let <_cor2> =
		      %% Line 421
		      apply 'find_opaques_fun'/1
			  (Records)
		  in  %% Line 421
		      apply _cor2
			  (_cor3)
	  -| [{'id',{0,0,'-lookup_and_find_opaques_fun/1-fun-0-'}}] )
'find_opaques_fun'/1 =
    %% Line 424
    fun (_cor0) ->
	%% Line 425
	( fun (_cor3) ->
	      let <_cor2> =
		  %% Line 426
		  call 'erl_types':'module_builtin_opaques'
		      (_cor3)
	      in  let <_cor1> =
		      %% Line 427
		      call 'erl_types':'t_opaque_from_records'
			  (_cor0)
		  in  %% Line 426
		      call 'erlang':'++'
			  (_cor2, _cor1)
	  -| [{'id',{0,0,'-find_opaques_fun/1-fun-0-'}}] )
'get_fun_types_from_plt'/3 =
    %% Line 430
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 431
	    call 'dict':'new'
		()
	in  %% Line 431
	    apply 'get_fun_types_from_plt'/4
		(_cor2, _cor1, _cor0, _cor3)
'get_fun_types_from_plt'/4 =
    %% Line 433
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{FunLabel,Arity}|Left],Callgraph,Plt,Map> when 'true' ->
	      let <Type> =
		  %% Line 434
		  apply 'lookup_fun_type'/4
		      (FunLabel, Arity, Callgraph, Plt)
	      in  let <_cor5> =
		      %% Line 435
		      call 'dict':'store'
			  (FunLabel, Type, Map)
		  in  %% Line 435
		      apply 'get_fun_types_from_plt'/4
			  (Left, Callgraph, Plt, _cor5)
	  %% Line 436
	  <[],_X_Callgraph,_X_Plt,Map> when 'true' ->
	      %% Line 437
	      Map
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'get_fun_types_from_plt',4}}] )
	    -| ['compiler_generated'] )
	end
'collect_fun_info'/1 =
    %% Line 439
    fun (_cor0) ->
	%% Line 440
	apply 'collect_fun_info'/2
	    (_cor0, [])
'collect_fun_info'/2 =
    %% Line 442
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Tree|Trees],List> when 'true' ->
	      let <Fun> =
		  %% Line 443
		  ( fun (_cor6,_cor5) ->
			%% Line 444
			case call 'cerl':'is_c_fun'
				 (_cor6) of
			  %% Line 445
			  <'true'> when 'true' ->
			      let <_cor3> =
				  %% Line 446
				  call 'cerl_trees':'get_label'
				      (_cor6)
			      in  let <_cor2> =
				      %% Line 446
				      call 'cerl':'fun_arity'
					  (_cor6)
				  in  %% Line 446
				      [{_cor3,_cor2}|_cor5]
			  %% Line 447
			  <'false'> when 'true' ->
			      _cor5
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor4})
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-collect_fun_info/2-fun-0-'}}] )
	      in  let <_cor10> =
		      %% Line 450
		      call 'cerl_trees':'fold'
			  (Fun, List, Tree)
		  in  %% Line 450
		      apply 'collect_fun_info'/2
			  (Trees, _cor10)
	  %% Line 451
	  <[],List> when 'true' ->
	      %% Line 452
	      List
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11})
		  -| [{'function_name',{'collect_fun_info',2}}] )
	    -| ['compiler_generated'] )
	end
'lookup_fun_type'/4 =
    %% Line 454
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <ID> =
	    %% Line 455
	    apply 'lookup_name'/2
		(_cor3, _cor1)
	in  %% Line 456
	    case call 'dialyzer_plt':'lookup'
		     (_cor0, ID) of
	      %% Line 457
	      <'none'> when 'true' ->
		  let <_cor5> =
		      call 'erl_types':'t_any'
			  ()
		  in  call 'erl_types':'t_fun'
			  (_cor2, _cor5)
	      %% Line 458
	      <{'value',{RetT,ArgT}}> when 'true' ->
		  call 'erl_types':'t_fun'
		      (ArgT, RetT)
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor6})
		-| ['compiler_generated'] )
	    end
'insert_into_doc_plt'/3 =
    %% Line 461
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_FunTypes,_X_Callgraph,'undefined'> when 'true' ->
	      %% Line 462
	      'undefined'
	  %% Line 463
	  <FunTypes,Callgraph,DocPlt> when 'true' ->
	      let <SuccTypes> =
		  %% Line 464
		  apply 'format_succ_types'/2
		      (FunTypes, Callgraph)
	      in  %% Line 465
		  call 'dialyzer_plt':'insert_list'
		      (DocPlt, SuccTypes)
	end
'insert_into_plt'/3 =
    %% Line 467
    fun (_cor2,_cor1,_cor0) ->
	let <SuccTypes> =
	    %% Line 468
	    apply 'format_succ_types'/2
		(_cor2, _cor1)
	in  do  %% Line 469
		apply 'debug_pp_succ_typings'/1
		    (SuccTypes)
		%% Line 470
		call 'dialyzer_plt':'insert_list'
		    (_cor0, SuccTypes)
'format_succ_types'/2 =
    %% Line 472
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 473
	    call 'dict':'to_list'
		(_cor1)
	in  %% Line 473
	    apply 'format_succ_types'/3
		(_cor2, _cor0, [])
'format_succ_types'/3 =
    %% Line 475
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{Label,Type0}|Left],Callgraph,Acc> when 'true' ->
	      let <Type> =
		  %% Line 476
		  call 'erl_types':'t_limit'
		      (Type0, 5)
	      in  let <Id> =
		      %% Line 477
		      apply 'lookup_name'/2
			  (Label, Callgraph)
		  in  let <_cor7> =
			  %% Line 478
			  call 'erl_types':'t_fun_range'
			      (Type)
		      in  let <_cor6> =
			      %% Line 478
			      call 'erl_types':'t_fun_args'
				  (Type)
			  in  let <NewTuple> = {%% Line 478
				   Id,%% Line 478
				      {_cor7,_cor6}}
			      in  %% Line 479
				  apply 'format_succ_types'/3
				      (Left, Callgraph, [NewTuple|Acc])
	  %% Line 480
	  <[],_X_Callgraph,Acc> when 'true' ->
	      %% Line 481
	      Acc
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'format_succ_types',3}}] )
	    -| ['compiler_generated'] )
	end
'debug_pp_succ_typings'/1 =
    %% Line 514
    fun (_cor0) ->
	%% Line 515
	'ok'
'debug_pp_functions'/4 =
    %% Line 517
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 518
	'ok'
'lookup_name'/2 =
    %% Line 521
    fun (_cor1,_cor0) ->
	%% Line 522
	case call 'dialyzer_callgraph':'lookup_name'
		 (_cor1, _cor0) of
	  %% Line 523
	  <'error'> when 'true' ->
	      _cor1
	  %% Line 524
	  <{'ok',Name}> when 'true' ->
	      Name
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('dialyzer_succ_typings')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('dialyzer_succ_typings', _cor0)
end