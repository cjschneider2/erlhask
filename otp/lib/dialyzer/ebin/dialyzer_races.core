module 'dialyzer_races' ['beg_clause_new'/3,
			 'cleanup'/1,
			 'end_case_new'/1,
			 'end_clause_new'/3,
			 'format_args'/4,
			 'get_curr_fun'/1,
			 'get_curr_fun_args'/1,
			 'get_new_table'/1,
			 'get_race_analysis'/1,
			 'get_race_list'/1,
			 'get_race_list_and_size'/1,
			 'get_race_list_size'/1,
			 'get_race_warnings'/2,
			 'let_tag_new'/2,
			 'module_info'/0,
			 'module_info'/1,
			 'new'/0,
			 'put_curr_fun'/3,
			 'put_fun_args'/2,
			 'put_race_analysis'/2,
			 'put_race_list'/3,
			 'race'/1,
			 'store_race_call'/5]
    attributes [%% Line 43
		'export_type' =
		    %% Line 43
		    [{'races',0}|[{'core_vars',0}]],
		%% Line 33
		'type' =
		    %% Line 33
		    [{'dial_ret',{'type',33,'union',[{'integer',33,0}|[{'integer',34,1}|[{'integer',35,2}]]]},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'dial_warn_tag',{'type',68,'union',[{'atom',68,'warn_return_no_exit'}|[{'atom',68,'warn_return_only_exit'}|[{'atom',69,'warn_not_called'}|[{'atom',69,'warn_non_proper_list'}|[{'atom',70,'warn_matching'}|[{'atom',70,'warn_opaque'}|[{'atom',70,'warn_fun_app'}|[{'atom',71,'warn_failing_call'}|[{'atom',71,'warn_bin_construction'}|[{'atom',72,'warn_contract_types'}|[{'atom',72,'warn_contract_syntax'}|[{'atom',73,'warn_contract_not_equal'}|[{'atom',73,'warn_contract_subtype'}|[{'atom',74,'warn_contract_supertype'}|[{'atom',74,'warn_callgraph'}|[{'atom',75,'warn_umatched_return'}|[{'atom',75,'warn_race_condition'}|[{'atom',76,'warn_behaviour'}|[{'atom',76,'warn_contract_range'}|[{'atom',77,'warn_undefined_callbacks'}|[{'atom',77,'warn_unknown'}]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'file_line',{'type',83,'tuple',[{'remote_type',83,[{'atom',83,'file'}|[{'atom',83,'filename'}|[[]]]]}|[{'type',83,'non_neg_integer',[]}]]},[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{'dial_warning',{'type',84,'tuple',[{'type',84,'dial_warn_tag',[]}|[{'type',84,'file_line',[]}|[{'type',84,'tuple',[{'type',84,'atom',[]}|[{'type',84,'list',[{'type',84,'term',[]}]}]]}]]]},[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{'dial_error',{'type',89,'any',[]},[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{'anal_type',{'type',96,'union',[{'atom',96,'succ_typings'}|[{'atom',96,'plt_build'}]]},[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{'anal_type1',{'type',97,'union',[{'type',97,'anal_type',[]}|[{'atom',97,'plt_add'}|[{'atom',97,'plt_check'}|[{'atom',97,'plt_remove'}]]]]},[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{'contr_constr',{'type',98,'tuple',[{'atom',98,'subtype'}|[{'remote_type',98,[{'atom',98,'erl_types'}|[{'atom',98,'erl_type'}|[[]]]]}|[{'remote_type',98,[{'atom',98,'erl_types'}|[{'atom',98,'erl_type'}|[[]]]]}]]]},[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{'contract_pair',{'type',99,'tuple',[{'remote_type',99,[{'atom',99,'erl_types'}|[{'atom',99,'erl_type'}|[[]]]]}|[{'type',99,'list',[{'type',99,'contr_constr',[]}]}]]},[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{'dial_define',{'type',100,'tuple',[{'type',100,'atom',[]}|[{'type',100,'term',[]}]]},[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{'dial_option',{'type',101,'tuple',[{'type',101,'atom',[]}|[{'type',101,'term',[]}]]},[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{'dial_options',{'type',102,'list',[{'type',102,'dial_option',[]}]},[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{'fopt',{'type',103,'union',[{'atom',103,'basename'}|[{'atom',103,'fullpath'}]]},[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{'format',{'type',104,'union',[{'atom',104,'formatted'}|[{'atom',104,'raw'}]]},[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{'label',{'type',105,'non_neg_integer',[]},[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{'rep_mode',{'type',106,'union',[{'atom',106,'quiet'}|[{'atom',106,'normal'}|[{'atom',106,'verbose'}]]]},[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{'start_from',{'type',107,'union',[{'atom',107,'byte_code'}|[{'atom',107,'src_code'}]]},[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{'mfa_or_funlbl',{'type',108,'union',[{'type',108,'label',[]}|[{'type',108,'mfa',[]}]]},[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{'solver',{'type',109,'union',[{'atom',109,'v1'}|[{'atom',109,'v2'}]]},[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{{'record','analysis'},[{'typed_record_field',{'record_field',115,{'atom',115,'analysis_pid'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'pid',[]}]]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'type'},{'atom',116,'succ_typings'}},{'type',116,'anal_type',[]}}|[{'typed_record_field',{'record_field',117,{'atom',117,'defines'},{'nil',117}},{'type',117,'list',[{'type',117,'dial_define',[]}]}}|[{'typed_record_field',{'record_field',118,{'atom',118,'doc_plt'}},{'type',118,'union',[{'atom',118,'undefined'}|[{'remote_type',118,[{'atom',118,'dialyzer_plt'}|[{'atom',118,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',119,{'atom',119,'files'},{'nil',119}},{'type',119,'list',[{'remote_type',119,[{'atom',119,'file'}|[{'atom',119,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'include_dirs'},{'nil',120}},{'type',120,'list',[{'remote_type',120,[{'atom',120,'file'}|[{'atom',120,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',121,{'atom',121,'start_from'},{'atom',121,'byte_code'}},{'type',121,'start_from',[]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'plt'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'remote_type',122,[{'atom',122,'dialyzer_plt'}|[{'atom',122,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'use_contracts'},{'atom',123,'true'}},{'type',123,'boolean',[]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'race_detection'},{'atom',124,'false'}},{'type',124,'boolean',[]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'behaviours_chk'},{'atom',125,'false'}},{'type',125,'boolean',[]}}|[{'typed_record_field',{'record_field',126,{'atom',126,'timing'},{'atom',126,'false'}},{'type',126,'union',[{'type',126,'boolean',[]}|[{'atom',126,'debug'}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'timing_server'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'remote_type',127,[{'atom',127,'dialyzer_timing'}|[{'atom',127,'timing_server'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'callgraph_file'},{'string',128,[]}},{'remote_type',128,[{'atom',128,'file'}|[{'atom',128,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'solvers'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'list',[{'type',129,'solver',[]}]}]]}}]]]]]]]]]]]]]]],[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{{'record','options'},[{'typed_record_field',{'record_field',131,{'atom',131,'files'},{'nil',131}},{'type',131,'list',[{'remote_type',131,[{'atom',131,'file'}|[{'atom',131,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'files_rec'},{'nil',132}},{'type',132,'list',[{'remote_type',132,[{'atom',132,'file'}|[{'atom',132,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',133,{'atom',133,'analysis_type'},{'atom',133,'succ_typings'}},{'type',133,'anal_type1',[]}}|[{'typed_record_field',{'record_field',134,{'atom',134,'timing'},{'atom',134,'false'}},{'type',134,'union',[{'type',134,'boolean',[]}|[{'atom',134,'debug'}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'defines'},{'nil',135}},{'type',135,'list',[{'type',135,'dial_define',[]}]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'from'},{'atom',136,'byte_code'}},{'type',136,'start_from',[]}}|[{'typed_record_field',{'record_field',137,{'atom',137,'get_warnings'},{'atom',137,'maybe'}},{'type',137,'union',[{'type',137,'boolean',[]}|[{'atom',137,'maybe'}]]}}|[{'typed_record_field',{'record_field',138,{'atom',138,'init_plts'},{'nil',138}},{'type',138,'list',[{'remote_type',138,[{'atom',138,'file'}|[{'atom',138,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',139,{'atom',139,'include_dirs'},{'nil',139}},{'type',139,'list',[{'remote_type',139,[{'atom',139,'file'}|[{'atom',139,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'output_plt'},{'atom',140,'none'}},{'type',140,'union',[{'atom',140,'none'}|[{'remote_type',140,[{'atom',140,'file'}|[{'atom',140,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',141,{'atom',141,'legal_warnings'},{'call',141,{'remote',141,{'atom',141,'ordsets'},{'atom',141,'new'}},[]}},{'remote_type',141,[{'atom',141,'ordsets'}|[{'atom',141,'ordset'}|[[{'type',141,'dial_warn_tag',[]}]]]]}}|[{'typed_record_field',{'record_field',142,{'atom',142,'report_mode'},{'atom',142,'normal'}},{'type',142,'rep_mode',[]}}|[{'typed_record_field',{'record_field',143,{'atom',143,'erlang_mode'},{'atom',143,'false'}},{'type',143,'boolean',[]}}|[{'typed_record_field',{'record_field',144,{'atom',144,'use_contracts'},{'atom',144,'true'}},{'type',144,'boolean',[]}}|[{'typed_record_field',{'record_field',145,{'atom',145,'output_file'},{'atom',145,'none'}},{'type',145,'union',[{'atom',145,'none'}|[{'remote_type',145,[{'atom',145,'file'}|[{'atom',145,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',146,{'atom',146,'output_format'},{'atom',146,'formatted'}},{'type',146,'format',[]}}|[{'typed_record_field',{'record_field',147,{'atom',147,'filename_opt'},{'atom',147,'basename'}},{'type',147,'fopt',[]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'callgraph_file'},{'string',148,[]}},{'remote_type',148,[{'atom',148,'file'}|[{'atom',148,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'check_plt'},{'atom',149,'true'}},{'type',149,'boolean',[]}}|[{'typed_record_field',{'record_field',150,{'atom',150,'solvers'},{'nil',150}},{'type',150,'list',[{'type',150,'solver',[]}]}}]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 152
		'type' =
		    %% Line 152
		    [{{'record','contract'},[{'typed_record_field',{'record_field',152,{'atom',152,'contracts'},{'nil',152}},{'type',152,'list',[{'type',152,'contract_pair',[]}]}}|[{'typed_record_field',{'record_field',153,{'atom',153,'args'},{'nil',153}},{'type',153,'list',[{'remote_type',153,[{'atom',153,'erl_types'}|[{'atom',153,'erl_type'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',154,{'atom',154,'forms'},{'nil',154}},{'type',154,'list',[{'type',154,'tuple',[{'var',154,'_'}|[{'var',154,'_'}]]}]}}]]],[]}],
		%% Line 70
		'type' =
		    %% Line 70
		    [{'label_type',{'type',70,'union',[{'type',70,'label',[]}|[{'type',70,'list',[{'type',70,'label',[]}]}|[{'type',70,'tuple',[{'type',70,'label',[]}]}|[{'atom',70,'no_label'}]]]]},[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{'args',{'type',71,'list',[{'type',71,'union',[{'type',71,'label_type',[]}|[{'type',71,'list',[{'type',71,'string',[]}]}]]}]},[]}],
		%% Line 72
		'type' =
		    %% Line 72
		    [{'core_vars',{'type',72,'union',[{'remote_type',72,[{'atom',72,'cerl'}|[{'atom',72,'cerl'}|[[]]]]}|[{'atom',72,'no_arg'}|[{'atom',72,'bypassed'}]]]},[]}],
		%% Line 73
		'type' =
		    %% Line 73
		    [{'var_to_map1',{'type',73,'union',[{'type',73,'core_vars',[]}|[{'type',73,'list',[{'remote_type',73,[{'atom',73,'cerl'}|[{'atom',73,'cerl'}|[[]]]]}]}]]},[]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{'var_to_map2',{'type',74,'union',[{'remote_type',74,[{'atom',74,'cerl'}|[{'atom',74,'cerl'}|[[]]]]}|[{'type',74,'list',[{'remote_type',74,[{'atom',74,'cerl'}|[{'atom',74,'cerl'}|[[]]]]}]}|[{'atom',74,'bypassed'}]]]},[]}],
		%% Line 75
		'type' =
		    %% Line 75
		    [{'core_args',{'type',75,'union',[{'type',75,'list',[{'type',75,'core_vars',[]}]}|[{'atom',75,'empty'}]]},[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{'op',{'type',76,'union',[{'atom',76,'bind'}|[{'atom',76,'unbind'}]]},[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{'dep_calls',{'type',78,'union',[{'atom',78,'whereis'}|[{'atom',78,'ets_lookup'}|[{'atom',78,'mnesia_dirty_read'}]]]},[]}],
		%% Line 79
		'type' =
		    %% Line 79
		    [{'warn_calls',{'type',79,'union',[{'atom',79,'register'}|[{'atom',79,'unregister'}|[{'atom',79,'ets_insert'}|[{'atom',80,'mnesia_dirty_write'}]]]]},[]}],
		%% Line 81
		'type' =
		    %% Line 81
		    [{'call',{'type',81,'union',[{'atom',81,'whereis'}|[{'atom',81,'register'}|[{'atom',81,'unregister'}|[{'atom',81,'ets_new'}|[{'atom',82,'ets_lookup'}|[{'atom',82,'ets_insert'}|[{'atom',82,'mnesia_dirty_read1'}|[{'atom',83,'mnesia_dirty_read2'}|[{'atom',83,'mnesia_dirty_write1'}|[{'atom',84,'mnesia_dirty_write2'}|[{'atom',84,'function_call'}]]]]]]]]]]]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{'race_tag',{'type',85,'union',[{'atom',85,'whereis_register'}|[{'atom',85,'whereis_unregister'}|[{'atom',86,'ets_lookup_insert'}|[{'atom',86,'mnesia_dirty_read_write'}]]]]},[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{'dial_race_warning',{'type',90,'tuple',[{'type',90,'race_warn_tag',[]}|[{'type',90,'file_line',[]}|[{'type',90,'tuple',[{'type',90,'atom',[]}|[{'type',90,'list',[{'type',90,'term',[]}]}]]}]]]},[]}],
		%% Line 91
		'type' =
		    %% Line 91
		    [{'race_warn_tag',{'type',91,'union',[{'atom',91,'warn_whereis_register'}|[{'atom',91,'warn_whereis_unregister'}|[{'atom',92,'warn_ets_lookup_insert'}|[{'atom',92,'warn_mnesia_dirty_read_write'}]]]]},[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{{'record','beg_clause'},[{'typed_record_field',{'record_field',94,{'atom',94,'arg'}},{'type',94,'union',[{'atom',94,'undefined'}|[{'type',94,'var_to_map1',[]}]]}}|[{'typed_record_field',{'record_field',95,{'atom',95,'pats'}},{'type',95,'union',[{'atom',95,'undefined'}|[{'type',95,'var_to_map1',[]}]]}}|[{'typed_record_field',{'record_field',96,{'atom',96,'guard'}},{'type',96,'union',[{'atom',96,'undefined'}|[{'remote_type',96,[{'atom',96,'cerl'}|[{'atom',96,'cerl'}|[[]]]]}]]}}]]],[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','end_clause'},[{'typed_record_field',{'record_field',97,{'atom',97,'arg'}},{'type',97,'union',[{'atom',97,'undefined'}|[{'type',97,'var_to_map1',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'pats'}},{'type',98,'union',[{'atom',98,'undefined'}|[{'type',98,'var_to_map1',[]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'guard'}},{'type',99,'union',[{'atom',99,'undefined'}|[{'remote_type',99,[{'atom',99,'cerl'}|[{'atom',99,'cerl'}|[[]]]]}]]}}]]],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{{'record','end_case'},[{'typed_record_field',{'record_field',100,{'atom',100,'clauses'}},{'type',100,'union',[{'atom',100,'undefined'}|[{'type',100,'list',[{'type',100,'record',[{'atom',100,'end_clause'}]}]}]]}}],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','curr_fun'},[{'typed_record_field',{'record_field',101,{'atom',101,'status'}},{'type',101,'union',[{'atom',101,'undefined'}|[{'atom',101,'in'}|[{'atom',101,'out'}]]]}}|[{'typed_record_field',{'record_field',102,{'atom',102,'mfa'}},{'type',102,'union',[{'atom',102,'undefined'}|[{'remote_type',102,[{'atom',102,'dialyzer_callgraph'}|[{'atom',102,'mfa_or_funlbl'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'label'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'label',[]}]]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'def_vars'}},{'type',104,'union',[{'atom',104,'undefined'}|[{'type',104,'list',[{'type',104,'core_vars',[]}]}]]}}|[{'typed_record_field',{'record_field',105,{'atom',105,'arg_types'}},{'type',105,'union',[{'atom',105,'undefined'}|[{'type',105,'list',[{'remote_type',105,[{'atom',105,'erl_types'}|[{'atom',105,'erl_type'}|[[]]]]}]}]]}}|[{'typed_record_field',{'record_field',106,{'atom',106,'call_vars'}},{'type',106,'union',[{'atom',106,'undefined'}|[{'type',106,'list',[{'type',106,'core_vars',[]}]}]]}}|[{'typed_record_field',{'record_field',107,{'atom',107,'var_map'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'remote_type',107,[{'atom',107,'dict'}|[{'atom',107,'dict'}|[[]]]]}]]}}]]]]]]],[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{{'record','dep_call'},[{'typed_record_field',{'record_field',108,{'atom',108,'call_name'}},{'type',108,'union',[{'atom',108,'undefined'}|[{'type',108,'dep_calls',[]}]]}}|[{'typed_record_field',{'record_field',109,{'atom',109,'args'}},{'type',109,'union',[{'atom',109,'undefined'}|[{'type',109,'args',[]}]]}}|[{'typed_record_field',{'record_field',110,{'atom',110,'arg_types'}},{'type',110,'union',[{'atom',110,'undefined'}|[{'type',110,'list',[{'remote_type',110,[{'atom',110,'erl_types'}|[{'atom',110,'erl_type'}|[[]]]]}]}]]}}|[{'typed_record_field',{'record_field',111,{'atom',111,'vars'}},{'type',111,'union',[{'atom',111,'undefined'}|[{'type',111,'list',[{'type',111,'core_vars',[]}]}]]}}|[{'typed_record_field',{'record_field',112,{'atom',112,'state'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'remote_type',112,[{'atom',112,'dialyzer_dataflow'}|[{'atom',112,'state'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',113,{'atom',113,'file_line'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'file_line',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'var_map'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'remote_type',114,[{'atom',114,'dict'}|[{'atom',114,'dict'}|[[]]]]}]]}}]]]]]]],[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{{'record','fun_call'},[{'typed_record_field',{'record_field',115,{'atom',115,'caller'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'remote_type',115,[{'atom',115,'dialyzer_callgraph'}|[{'atom',115,'mfa_or_funlbl'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'callee'}},{'type',116,'union',[{'atom',116,'undefined'}|[{'remote_type',116,[{'atom',116,'dialyzer_callgraph'}|[{'atom',116,'mfa_or_funlbl'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',117,{'atom',117,'arg_types'}},{'type',117,'union',[{'atom',117,'undefined'}|[{'type',117,'list',[{'remote_type',117,[{'atom',117,'erl_types'}|[{'atom',117,'erl_type'}|[[]]]]}]}]]}}|[{'typed_record_field',{'record_field',118,{'atom',118,'vars'}},{'type',118,'union',[{'atom',118,'undefined'}|[{'type',118,'list',[{'type',118,'core_vars',[]}]}]]}}]]]],[]}],
		%% Line 119
		'type' =
		    %% Line 119
		    [{{'record','let_tag'},[{'typed_record_field',{'record_field',119,{'atom',119,'var'}},{'type',119,'union',[{'atom',119,'undefined'}|[{'type',119,'var_to_map1',[]}]]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'arg'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'var_to_map1',[]}]]}}]],[]}],
		%% Line 121
		'type' =
		    %% Line 121
		    [{{'record','warn_call'},[{'typed_record_field',{'record_field',121,{'atom',121,'call_name'}},{'type',121,'union',[{'atom',121,'undefined'}|[{'type',121,'warn_calls',[]}]]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'args'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'type',122,'args',[]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'var_map'}},{'type',123,'union',[{'atom',123,'undefined'}|[{'remote_type',123,[{'atom',123,'dict'}|[{'atom',123,'dict'}|[[]]]]}]]}}]]],[]}],
		%% Line 125
		'type' =
		    %% Line 125
		    [{'case_tags',{'type',125,'union',[{'atom',125,'beg_case'}|[{'type',125,'record',[{'atom',125,'beg_clause'}]}|[{'type',125,'record',[{'atom',125,'end_clause'}]}|[{'type',125,'record',[{'atom',125,'end_case'}]}]]]]},[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{'code',{'type',126,'list',[{'type',126,'union',[{'type',126,'record',[{'atom',126,'dep_call'}]}|[{'type',126,'record',[{'atom',126,'fun_call'}]}|[{'type',126,'record',[{'atom',126,'warn_call'}]}|[{'type',127,'record',[{'atom',127,'curr_fun'}]}|[{'type',127,'record',[{'atom',127,'let_tag'}]}|[{'type',127,'case_tags',[]}|[{'type',127,'race_tag',[]}]]]]]]]}]},[]}],
		%% Line 129
		'type' =
		    %% Line 129
		    [{'table_var',{'type',129,'union',[{'type',129,'label',[]}|[{'atom',129,'no_label'}]]},[]}],
		%% Line 130
		'type' =
		    %% Line 130
		    [{'table',{'type',130,'union',[{'type',130,'tuple',[{'atom',130,'named'}|[{'type',130,'table_var',[]}|[{'type',130,'list',[{'type',130,'string',[]}]}]]]}|[{'atom',130,'other'}|[{'atom',130,'no_t'}]]]},[]}],
		%% Line 132
		'type' =
		    %% Line 132
		    [{{'record','race_fun'},[{'typed_record_field',{'record_field',132,{'atom',132,'mfa'}},{'type',132,'union',[{'atom',132,'undefined'}|[{'type',132,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',133,{'atom',133,'args'}},{'type',133,'union',[{'atom',133,'undefined'}|[{'type',133,'args',[]}]]}}|[{'typed_record_field',{'record_field',134,{'atom',134,'arg_types'}},{'type',134,'union',[{'atom',134,'undefined'}|[{'type',134,'list',[{'remote_type',134,[{'atom',134,'erl_types'}|[{'atom',134,'erl_type'}|[[]]]]}]}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'vars'}},{'type',135,'union',[{'atom',135,'undefined'}|[{'type',135,'list',[{'type',135,'core_vars',[]}]}]]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'file_line'}},{'type',136,'union',[{'atom',136,'undefined'}|[{'type',136,'file_line',[]}]]}}|[{'typed_record_field',{'record_field',137,{'atom',137,'index'}},{'type',137,'union',[{'atom',137,'undefined'}|[{'type',137,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',138,{'atom',138,'fun_mfa'}},{'type',138,'union',[{'atom',138,'undefined'}|[{'remote_type',138,[{'atom',138,'dialyzer_callgraph'}|[{'atom',138,'mfa_or_funlbl'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',139,{'atom',139,'fun_label'}},{'type',139,'union',[{'atom',139,'undefined'}|[{'type',139,'label',[]}]]}}]]]]]]]],[]}],
		%% Line 141
		'type' =
		    %% Line 141
		    [{{'record','races'},[{'typed_record_field',{'record_field',141,{'atom',141,'curr_fun'}},{'type',141,'union',[{'atom',141,'undefined'}|[{'remote_type',141,[{'atom',141,'dialyzer_callgraph'}|[{'atom',141,'mfa_or_funlbl'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',142,{'atom',142,'curr_fun_label'}},{'type',142,'union',[{'atom',142,'undefined'}|[{'type',142,'label',[]}]]}}|[{'typed_record_field',{'record_field',143,{'atom',143,'curr_fun_args'},{'atom',143,'empty'}},{'type',143,'core_args',[]}}|[{'typed_record_field',{'record_field',144,{'atom',144,'new_table'},{'atom',144,'no_t'}},{'type',144,'table',[]}}|[{'typed_record_field',{'record_field',145,{'atom',145,'race_list'},{'nil',145}},{'type',145,'code',[]}}|[{'typed_record_field',{'record_field',146,{'atom',146,'race_list_size'},{'integer',146,0}},{'type',146,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',147,{'atom',147,'race_tags'},{'nil',147}},{'type',147,'list',[{'type',147,'record',[{'atom',147,'race_fun'}]}]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'race_analysis'},{'atom',149,'false'}},{'type',149,'boolean',[]}}|[{'typed_record_field',{'record_field',150,{'atom',150,'race_warnings'},{'nil',150}},{'type',150,'list',[{'type',150,'dial_race_warning',[]}]}}]]]]]]]]],[]}],
		%% Line 158
		'opaque' =
		    %% Line 158
		    [{'races',{'type',158,'record',[{'atom',158,'races'}]},[]}],
		%% Line 166
		'spec' =
		    %% Line 166
		    [{{'store_race_call',5},[{'type',166,'fun',[{'type',166,'product',[{'remote_type',166,[{'atom',166,'dialyzer_callgraph'}|[{'atom',166,'mfa_or_funlbl'}|[[]]]]}|[{'type',167,'list',[{'remote_type',167,[{'atom',167,'erl_types'}|[{'atom',167,'erl_type'}|[[]]]]}]}|[{'type',167,'list',[{'type',167,'core_vars',[]}]}|[{'type',168,'file_line',[]}|[{'remote_type',168,[{'atom',168,'dialyzer_dataflow'}|[{'atom',168,'state'}|[[]]]]}]]]]]}|[{'remote_type',169,[{'atom',169,'dialyzer_dataflow'}|[{'atom',169,'state'}|[[]]]]}]]}]}],
		%% Line 283
		'spec' =
		    %% Line 283
		    [{{'race',1},[{'type',283,'fun',[{'type',283,'product',[{'remote_type',283,[{'atom',283,'dialyzer_dataflow'}|[{'atom',283,'state'}|[[]]]]}]}|[{'remote_type',283,[{'atom',283,'dialyzer_dataflow'}|[{'atom',283,'state'}|[[]]]]}]]}]}],
		%% Line 1568
		'spec' =
		    %% Line 1568
		    [{{'bind_dict_vars',3},[{'type',1568,'fun',[{'type',1568,'product',[{'type',1568,'label',[]}|[{'type',1568,'label',[]}|[{'remote_type',1568,[{'atom',1568,'dict'}|[{'atom',1568,'dict'}|[[]]]]}]]]}|[{'remote_type',1568,[{'atom',1568,'dict'}|[{'atom',1568,'dict'}|[[]]]]}]]}]}],
		%% Line 1754
		'spec' =
		    %% Line 1754
		    [{{'compare_var_list',3},[{'type',1754,'fun',[{'type',1754,'product',[{'type',1754,'label_type',[]}|[{'type',1754,'list',[{'type',1754,'label_type',[]}]}|[{'remote_type',1754,[{'atom',1754,'dict'}|[{'atom',1754,'dict'}|[[]]]]}]]]}|[{'type',1754,'boolean',[]}]]}]}],
		%% Line 1866
		'spec' =
		    %% Line 1866
		    [{{'format_args',4},[{'type',1866,'fun',[{'type',1866,'product',[{'type',1866,'list',[{'type',1866,'core_vars',[]}]}|[{'type',1866,'list',[{'remote_type',1866,[{'atom',1866,'erl_types'}|[{'atom',1866,'erl_type'}|[[]]]]}]}|[{'remote_type',1867,[{'atom',1867,'dialyzer_dataflow'}|[{'atom',1867,'state'}|[[]]]]}|[{'type',1867,'call',[]}]]]]}|[{'type',1868,'args',[]}]]}]}],
		%% Line 1960
		'spec' =
		    %% Line 1960
		    [{{'race_var_map',4},[{'type',1960,'fun',[{'type',1960,'product',[{'type',1960,'var_to_map1',[]}|[{'type',1960,'var_to_map2',[]}|[{'remote_type',1960,[{'atom',1960,'dict'}|[{'atom',1960,'dict'}|[[]]]]}|[{'type',1960,'op',[]}]]]]}|[{'remote_type',1961,[{'atom',1961,'dict'}|[{'atom',1961,'dict'}|[[]]]]}]]}]}],
		%% Line 2316
		'spec' =
		    %% Line 2316
		    [{{'get_race_warnings',2},[{'type',2316,'fun',[{'type',2316,'product',[{'type',2316,'races',[]}|[{'remote_type',2316,[{'atom',2316,'dialyzer_dataflow'}|[{'atom',2316,'state'}|[[]]]]}]]}|[{'type',2317,'tuple',[{'type',2317,'races',[]}|[{'remote_type',2317,[{'atom',2317,'dialyzer_dataflow'}|[{'atom',2317,'state'}|[[]]]]}]]}]]}]}],
		%% Line 2395
		'spec' =
		    %% Line 2395
		    [{{'beg_clause_new',3},[{'type',2395,'fun',[{'type',2395,'product',[{'type',2395,'var_to_map1',[]}|[{'type',2395,'var_to_map1',[]}|[{'remote_type',2395,[{'atom',2395,'cerl'}|[{'atom',2395,'cerl'}|[[]]]]}]]]}|[{'type',2396,'record',[{'atom',2396,'beg_clause'}]}]]}]}],
		%% Line 2401
		'spec' =
		    %% Line 2401
		    [{{'cleanup',1},[{'type',2401,'fun',[{'type',2401,'product',[{'type',2401,'races',[]}]}|[{'type',2401,'races',[]}]]}]}],
		%% Line 2406
		'spec' =
		    %% Line 2406
		    [{{'end_case_new',1},[{'type',2406,'fun',[{'type',2406,'product',[{'type',2406,'list',[{'type',2406,'record',[{'atom',2406,'end_clause'}]}]}]}|[{'type',2406,'record',[{'atom',2406,'end_case'}]}]]}]}],
		%% Line 2411
		'spec' =
		    %% Line 2411
		    [{{'end_clause_new',3},[{'type',2411,'fun',[{'type',2411,'product',[{'type',2411,'var_to_map1',[]}|[{'type',2411,'var_to_map1',[]}|[{'remote_type',2411,[{'atom',2411,'cerl'}|[{'atom',2411,'cerl'}|[[]]]]}]]]}|[{'type',2412,'record',[{'atom',2412,'end_clause'}]}]]}]}],
		%% Line 2417
		'spec' =
		    %% Line 2417
		    [{{'get_curr_fun',1},[{'type',2417,'fun',[{'type',2417,'product',[{'type',2417,'races',[]}]}|[{'remote_type',2417,[{'atom',2417,'dialyzer_callgraph'}|[{'atom',2417,'mfa_or_funlbl'}|[[]]]]}]]}]}],
		%% Line 2422
		'spec' =
		    %% Line 2422
		    [{{'get_curr_fun_args',1},[{'type',2422,'fun',[{'type',2422,'product',[{'type',2422,'races',[]}]}|[{'type',2422,'core_args',[]}]]}]}],
		%% Line 2427
		'spec' =
		    %% Line 2427
		    [{{'get_new_table',1},[{'type',2427,'fun',[{'type',2427,'product',[{'type',2427,'races',[]}]}|[{'type',2427,'table',[]}]]}]}],
		%% Line 2432
		'spec' =
		    %% Line 2432
		    [{{'get_race_analysis',1},[{'type',2432,'fun',[{'type',2432,'product',[{'type',2432,'races',[]}]}|[{'type',2432,'boolean',[]}]]}]}],
		%% Line 2437
		'spec' =
		    %% Line 2437
		    [{{'get_race_list',1},[{'type',2437,'fun',[{'type',2437,'product',[{'type',2437,'races',[]}]}|[{'type',2437,'code',[]}]]}]}],
		%% Line 2442
		'spec' =
		    %% Line 2442
		    [{{'get_race_list_size',1},[{'type',2442,'fun',[{'type',2442,'product',[{'type',2442,'races',[]}]}|[{'type',2442,'non_neg_integer',[]}]]}]}],
		%% Line 2447
		'spec' =
		    %% Line 2447
		    [{{'get_race_list_and_size',1},[{'type',2447,'fun',[{'type',2447,'product',[{'type',2447,'races',[]}]}|[{'type',2447,'tuple',[{'type',2447,'code',[]}|[{'type',2447,'non_neg_integer',[]}]]}]]}]}],
		%% Line 2453
		'spec' =
		    %% Line 2453
		    [{{'let_tag_new',2},[{'type',2453,'fun',[{'type',2453,'product',[{'type',2453,'var_to_map1',[]}|[{'type',2453,'var_to_map1',[]}]]}|[{'type',2453,'record',[{'atom',2453,'let_tag'}]}]]}]}],
		%% Line 2458
		'spec' =
		    %% Line 2458
		    [{{'new',0},[{'type',2458,'fun',[{'type',2458,'product',[]}|[{'type',2458,'races',[]}]]}]}],
		%% Line 2462
		'spec' =
		    %% Line 2462
		    [{{'put_curr_fun',3},[{'type',2462,'fun',[{'type',2462,'product',[{'remote_type',2462,[{'atom',2462,'dialyzer_callgraph'}|[{'atom',2462,'mfa_or_funlbl'}|[[]]]]}|[{'type',2462,'label',[]}|[{'type',2462,'races',[]}]]]}|[{'type',2463,'races',[]}]]}]}],
		%% Line 2470
		'spec' =
		    %% Line 2470
		    [{{'put_fun_args',2},[{'type',2470,'fun',[{'type',2470,'product',[{'type',2470,'core_args',[]}|[{'type',2470,'races',[]}]]}|[{'type',2470,'races',[]}]]}]}],
		%% Line 2478
		'spec' =
		    %% Line 2478
		    [{{'put_race_analysis',2},[{'type',2478,'fun',[{'type',2478,'product',[{'type',2478,'boolean',[]}|[{'type',2478,'races',[]}]]}|[{'type',2479,'races',[]}]]}]}],
		%% Line 2484
		'spec' =
		    %% Line 2484
		    [{{'put_race_list',3},[{'type',2484,'fun',[{'type',2484,'product',[{'type',2484,'code',[]}|[{'type',2484,'non_neg_integer',[]}|[{'type',2484,'races',[]}]]]}|[{'type',2485,'races',[]}]]}]}]]
'store_race_call'/5 =
    %% Line 171
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 173
	( case call 'dialyzer_dataflow':'state__get_races'
		   (_cor0) of
	    ( <( {'races',_rec0,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <CleanState> =
		      %% Line 176
		      call 'dialyzer_dataflow':'state__records_only'
			  (_cor0)
		  in  let <NewRaceList,NewRaceListSize,NewRaceTags,NewTable> =
			  %% Line 178
			  case _rec0 of
			    %% Line 179
			    <{_X_Module,'module_info',A}>
				when try
				      ( case <> of
					  ( <>
						when call 'erlang':'=:='
						      (A,
						       0) ->
						'true'
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						call 'erlang':'=:='
						    (A, 1)
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false' ->
				%% Line 180
				<[],0,_cor81,'no_t'>
			    %% Line 181
			    <_X_Thing> when 'true' ->
				%% Line 184
				case _cor4 of
				  %% Line 185
				  <{'erlang','get_module_info',A}>
				      when try
					    ( case <> of
						( <>
						      when call 'erlang':'=:='
							    (A,
							     1) ->
						      'true'
						  -| ['compiler_generated'] )
						( <> when 'true' ->
						      call 'erlang':'=:='
							  (A, 2)
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					of <Try> ->
					    Try
					catch <T,R> ->
					    'false' ->
				      %% Line 186
				      <[],0,_cor81,'no_t'>
				  %% Line 187
				  <{'erlang','register',2}> when 'true' ->
				      let <VarArgs> =
					  %% Line 188
					  apply 'format_args'/4
					      (_cor2, _cor3, CleanState, 'register')
				      in  let <RaceFun> =
					      %% Line 189
					      {'race_fun',_cor4,VarArgs,_cor3,_cor2,_cor1,_cor80,_rec0,_cor76}
					  in  let <_cor30> =
						  %% Line 194
						  call 'erlang':'+'
						      (_cor80, 1)
					      in  %% Line 193
						  <[{'warn_call','register',VarArgs,'undefined'}|_cor79],_cor30,%% Line 194
														[RaceFun|_cor81],%% Line 194
																 'no_t'>
				  %% Line 195
				  <{'erlang','unregister',1}> when 'true' ->
				      let <VarArgs> =
					  %% Line 196
					  apply 'format_args'/4
					      (_cor2, _cor3, CleanState, 'unregister')
				      in  let <RaceFun> =
					      %% Line 197
					      {'race_fun',_cor4,VarArgs,_cor3,_cor2,_cor1,_cor80,_rec0,_cor76}
					  in  let <_cor33> =
						  %% Line 202
						  call 'erlang':'+'
						      (_cor80, 1)
					      in  %% Line 201
						  <[{'warn_call','unregister',VarArgs,'undefined'}|_cor79],_cor33,%% Line 202
														  [RaceFun|_cor81],%% Line 202
																   'no_t'>
				  %% Line 203
				  <{'erlang','whereis',1}> when 'true' ->
				      let <VarArgs> =
					  %% Line 204
					  apply 'format_args'/4
					      (_cor2, _cor3, CleanState, 'whereis')
				      in  let <_cor35> =
					      %% Line 208
					      call 'erlang':'+'
						  (_cor80, 1)
					  in  %% Line 205
					      <[{'dep_call','whereis',VarArgs,_cor3,_cor2,%% Line 207
											  CleanState,_cor1,'undefined'}|_cor79],_cor35,_cor81,%% Line 208
																	      'no_t'>
				  %% Line 209
				  <{'ets','insert',2}> when 'true' ->
				      let <VarArgs> =
					  %% Line 210
					  apply 'format_args'/4
					      (_cor2, _cor3, CleanState, 'ets_insert')
				      in  let <RaceFun> =
					      %% Line 211
					      {'race_fun',_cor4,VarArgs,_cor3,_cor2,_cor1,_cor80,_rec0,_cor76}
					  in  let <_cor38> =
						  %% Line 216
						  call 'erlang':'+'
						      (_cor80, 1)
					      in  %% Line 215
						  <[{'warn_call','ets_insert',VarArgs,'undefined'}|_cor79],_cor38,%% Line 216
														  [RaceFun|_cor81],%% Line 216
																   'no_t'>
				  %% Line 217
				  <{'ets','lookup',2}> when 'true' ->
				      let <VarArgs> =
					  %% Line 218
					  apply 'format_args'/4
					      (_cor2, _cor3, CleanState, 'ets_lookup')
				      in  let <_cor40> =
					      %% Line 222
					      call 'erlang':'+'
						  (_cor80, 1)
					  in  %% Line 219
					      <[{'dep_call','ets_lookup',VarArgs,_cor3,_cor2,%% Line 221
											     CleanState,_cor1,'undefined'}|_cor79],_cor40,_cor81,%% Line 222
																		 'no_t'>
				  %% Line 223
				  <{'ets','new',2}> when 'true' ->
				      %% Line 225
				      case apply 'format_args'/4
					       (_cor2, _cor3, CleanState, 'ets_new') of
					<[VarArgs1|[VarArgs2|[_cor121|[Options|[]]]]]> when 'true' ->
					    let <_cor45> =
						%% Line 227
						case call 'lists':'member'
							 ([39|[112|[117|[98|[108|[105|[99|[39]]]]]]]], Options) of
						  %% Line 228
						  <'true'> when 'true' ->
						      %% Line 229
						      case call 'lists':'member'
							       ([39|[110|[97|[109|[101|[100|[95|[116|[97|[98|[108|[101|[39]]]]]]]]]]]]], Options) of
							%% Line 230
							<'true'> when 'true' ->
							    %% Line 231
							    {'named',VarArgs1,VarArgs2}
							%% Line 232
							<'false'> when 'true' ->
							    'other'
							( <_cor43> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_cor43})
							  -| ['compiler_generated'] )
						      end
						  %% Line 234
						  <'false'> when 'true' ->
						      'no_t'
						  ( <_cor44> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor44})
						    -| ['compiler_generated'] )
						end
					    in  <_cor79,_cor80,_cor81,_cor45>
					( <_cor42> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor42})
					  -| ['compiler_generated'] )
				      end
				  %% Line 237
				  <{'mnesia','dirty_read',A}>
				      when try
					    ( case <> of
						( <>
						      when call 'erlang':'=:='
							    (A,
							     1) ->
						      'true'
						  -| ['compiler_generated'] )
						( <> when 'true' ->
						      call 'erlang':'=:='
							  (A, 2)
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					of <Try> ->
					    Try
					catch <T,R> ->
					    'false' ->
				      let <_cor51> =
					  %% Line 239
					  case A of
					    %% Line 240
					    <1> when 'true' ->
						%% Line 241
						apply 'format_args'/4
						    (_cor2, _cor3, CleanState, 'mnesia_dirty_read1')
					    %% Line 242
					    <2> when 'true' ->
						%% Line 243
						apply 'format_args'/4
						    (_cor2, _cor3, CleanState, 'mnesia_dirty_read2')
					    ( <_cor50> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor50})
					      -| ['compiler_generated'] )
					  end
				      in  let <_cor53> =
					      %% Line 248
					      call 'erlang':'+'
						  (_cor80, 1)
					  in  %% Line 245
					      <[{'dep_call','mnesia_dirty_read',_cor51,_cor3,_cor2,%% Line 247
												   CleanState,_cor1,'undefined'}|_cor79],_cor53,_cor81,%% Line 248
																		       'no_t'>
				  %% Line 249
				  <{'mnesia','dirty_write',A}>
				      when try
					    ( case <> of
						( <>
						      when call 'erlang':'=:='
							    (A,
							     1) ->
						      'true'
						  -| ['compiler_generated'] )
						( <> when 'true' ->
						      call 'erlang':'=:='
							  (A, 2)
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					of <Try> ->
					    Try
					catch <T,R> ->
					    'false' ->
				      let <_cor58> =
					  %% Line 251
					  case A of
					    %% Line 252
					    <1> when 'true' ->
						%% Line 253
						apply 'format_args'/4
						    (_cor2, _cor3, CleanState, 'mnesia_dirty_write1')
					    %% Line 254
					    <2> when 'true' ->
						%% Line 255
						apply 'format_args'/4
						    (_cor2, _cor3, CleanState, 'mnesia_dirty_write2')
					    ( <_cor57> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor57})
					      -| ['compiler_generated'] )
					  end
				      in  let <RaceFun> =
					      %% Line 257
					      {'race_fun',_cor4,_cor58,_cor3,_cor2,_cor1,_cor80,_rec0,_cor76}
					  in  let <_cor61> =
						  %% Line 263
						  call 'erlang':'+'
						      (_cor80, 1)
					      in  %% Line 261
						  <[{'warn_call','mnesia_dirty_write',_cor58,'undefined'}|_cor79],_cor61,%% Line 263
															 [RaceFun|_cor81],%% Line 263
																	  'no_t'>
				  %% Line 264
				  <Int>
				      when call 'erlang':'is_integer'
					    (_cor4) ->
				      let <_cor62> =
					  %% Line 267
					  call 'erlang':'+'
					      (_cor80, 1)
				      in  %% Line 265
					  <[{'fun_call',_rec0,Int,_cor3,_cor2}|_cor79],_cor62,_cor81,%% Line 267
												     'no_t'>
				  %% Line 268
				  <_X_Other> when 'true' ->
				      let <Callgraph> =
					  %% Line 269
					  call 'dialyzer_dataflow':'state__get_callgraph'
					      (_cor0)
				      in  let <_cor64> =
					      %% Line 270
					      call 'dialyzer_callgraph':'get_digraph'
						  (Callgraph)
					  in  %% Line 270
					      case call 'digraph':'vertex'
						       (_cor64, _cor4) of
						%% Line 272
						<{_cor122,'confirmed'}>
						    when call 'erlang':'=:='
							  (_cor122,
							   _cor4) ->
						    let <_cor65> =
							%% Line 275
							call 'erlang':'+'
							    (_cor80, 1)
						    in  %% Line 273
							<[{'fun_call',_rec0,_cor4,_cor3,_cor2}|_cor79],_cor65,_cor81,%% Line 275
														     'no_t'>
						%% Line 276
						<'false'> when 'true' ->
						    <_cor79,_cor80,_cor81,%% Line 277
									  'no_t'>
						( <_cor66> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor66})
						  -| ['compiler_generated'] )
					      end
				end
			  end
		      in  %% Line 281
			  apply 'state__renew_info'/5
			      (NewRaceList, NewRaceListSize, NewRaceTags, NewTable, _cor0)
	      -| ['compiler_generated'] )
	    ( <_cor84> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','races'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'race'/1 =
    %% Line 285
    fun (_cor0) ->
	%% Line 287
	( case call 'dialyzer_dataflow':'state__get_races'
		   (_cor0) of
	    ( <( {'races',_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_rec5,_cor32,_cor33}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor23> =
		      %% Line 289
		      case _rec5 of
			%% Line 290
			<[]> when 'true' ->
			    _cor0
			%% Line 291
			<[{'race_fun',Fun,%% Line 292
					  VarArgs,%% Line 292
						  ArgTypes,%% Line 293
							   Args,%% Line 293
								FileLine,%% Line 294
									 Index,%% Line 294
									       CurrFun,%% Line 295
										       CurrFunLabel}|%% Line 295
												     T]> when 'true' ->
			    let <Callgraph> =
				%% Line 296
				call 'dialyzer_dataflow':'state__get_callgraph'
				    (_cor0)
			    in  let <_cor6> =
				    %% Line 298
				    call 'dialyzer_callgraph':'get_race_code'
					(Callgraph)
				in  %% Line 297
				    case %% Line 298
					 call 'dict':'find'
					     (CurrFun, _cor6) of
				      <{'ok',[_X_Args|[Code|[]]]}> when 'true' ->
					  let <RaceList> =
					      %% Line 299
					      call 'lists':'reverse'
						  (Code)
					  in  let <_cor10> =
						  %% Line 301
						  case Fun of
						    %% Line 302
						    <{'erlang','register',2}> when 'true' ->
							'warn_whereis_register'
						    %% Line 303
						    <{'erlang','unregister',1}> when 'true' ->
							'warn_whereis_unregister'
						    %% Line 304
						    <{'ets','insert',2}> when 'true' ->
							'warn_ets_lookup_insert'
						    %% Line 305
						    <{'mnesia','dirty_write',_X_A}> when 'true' ->
							'warn_mnesia_dirty_read_write'
						    ( <_cor9> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor9})
						      -| ['compiler_generated'] )
						  end
					      in  let <_cor12> =
						      %% Line 310
						      call 'erlang':'length'
							  (RaceList)
						  in  let <_cor13> =
							  %% Line 310
							  call 'erlang':'-'
							      (_cor12, Index)
						      in  let <_cor14> =
							      %% Line 310
							      call 'lists':'nthtail'
								  (_cor13, %% Line 311
									   RaceList)
							  in  let <_cor15> =
								  %% Line 310
								  apply 'state__renew_race_list'/2
								      (_cor14, _cor0)
							      in  let <_cor16> =
								      %% Line 309
								      apply 'state__renew_curr_fun_label'/2
									  (CurrFunLabel, _cor15)
								  in  let <State1> =
									  %% Line 308
									  apply 'state__renew_curr_fun'/2
									      (CurrFun, _cor16)
								      in  let <DepList> =
									      %% Line 312
									      apply 'fixup_race_list'/3
										  (_cor10, VarArgs, State1)
									  in  %% Line 313
									      case %% Line 314
										   apply 'get_race_warn'/5
										       (Fun, Args, ArgTypes, DepList, _cor0) of
										<{State2,RaceWarn}> when 'true' ->
										    let <_cor20> =
											%% Line 317
											apply 'state__renew_race_tags'/2
											    (T, State2)
										    in  let <_cor21> =
											    %% Line 316
											    apply 'state__add_race_warning'/4
												(_cor20, %% Line 317
													 RaceWarn, _cor10, %% Line 318
															   FileLine)
											in  %% Line 315
											    apply 'race'/1
												(_cor21)
										( <_cor19> when 'true' ->
										      primop 'match_fail'
											  ({'badmatch',_cor19})
										  -| ['compiler_generated'] )
									      end
				      ( <_cor7> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor7})
					-| ['compiler_generated'] )
				    end
			( <_cor22> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor22})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 320
		      apply 'state__renew_race_tags'/2
			  ([], _cor23)
	      -| ['compiler_generated'] )
	    ( <_cor34> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','races'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'fixup_race_list'/3 =
    %% Line 322
    fun (_cor2,_cor1,_cor0) ->
	%% Line 324
	( case call 'dialyzer_dataflow':'state__get_races'
		   (_cor0) of
	    ( <( {'races',_rec6,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <Callgraph> =
		      %% Line 327
		      call 'dialyzer_dataflow':'state__get_callgraph'
			  (_cor0)
		  in  let <Digraph> =
			  %% Line 328
			  call 'dialyzer_callgraph':'get_digraph'
			      (Callgraph)
		      in  let <Calls> =
			      %% Line 329
			      call 'digraph':'edges'
				  (Digraph)
			  in  let <_cor17> =
				  %% Line 331
				  case _cor2 of
				    %% Line 332
				    <'warn_whereis_register'> when 'true' ->
					'whereis_register'
				    %% Line 333
				    <'warn_whereis_unregister'> when 'true' ->
					'whereis_unregister'
				    %% Line 334
				    <'warn_ets_lookup_insert'> when 'true' ->
					'ets_lookup_insert'
				    %% Line 335
				    <'warn_mnesia_dirty_read_write'> when 'true' ->
					'mnesia_dirty_read_write'
				    ( <_cor16> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor16})
				      -| ['compiler_generated'] )
				  end
			      in  let <NewRaceList> =
				      %% Line 337
				      [_cor17|_cor41]
				  in  let <CleanState> =
					  %% Line 338
					  call 'dialyzer_dataflow':'state__cleanup'
					      (_cor0)
				      in  let <NewState> =
					      %% Line 339
					      apply 'state__renew_race_list'/2
						  (NewRaceList, CleanState)
					  in  let <_cor24> =
						  %% Line 342
						  call 'lists':'reverse'
						      (NewRaceList)
					      in  let <_cor23> =
						      %% Line 343
						      call 'dict':'new'
							  ()
						  in  let <DepList1> =
							  %% Line 341
							  apply 'fixup_race_forward_pullout'/14
							      (_rec6, _cor38, Calls, _cor24, %% Line 342
											     [], _rec6, _cor1, _cor2, _cor23, %% Line 344
															      [], %% Line 344
																  [], %% Line 344
																      [], 10, %% Line 344
																	      NewState)
						      in  let <Parents> =
							      %% Line 345
							      apply 'fixup_race_backward'/5
								  (_rec6, Calls, Calls, [], 5)
							  in  let <UParents> =
								  %% Line 346
								  call 'lists':'usort'
								      (Parents)
							      in  let <Filtered> =
								      %% Line 347
								      apply 'filter_parents'/3
									  (UParents, UParents, Digraph)
								  in  let <_cor30> =
									  %% Line 349
									  case call 'lists':'member'
										   (_rec6, Filtered) of
									    %% Line 350
									    <'true'> when 'true' ->
										Filtered
									    %% Line 351
									    <'false'> when 'true' ->
										[_rec6|Filtered]
									    ( <_cor29> when 'true' ->
										  primop 'match_fail'
										      ({'case_clause',_cor29})
									      -| ['compiler_generated'] )
									  end
								      in  let <DepList2> =
									      %% Line 354
									      apply 'fixup_race_list_helper'/6
										  (_cor30, Calls, _rec6, _cor1, _cor2, %% Line 355
														       NewState)
									  in  do  %% Line 356
										  call 'dialyzer_dataflow':'dispose_state'
										      (CleanState)
										  let <_cor33> =
										      %% Line 357
										      call 'erlang':'++'
											  (DepList1, DepList2)
										  in  let <_cor34> =
											  %% Line 357
											  apply 'cleanup_dep_calls'/1
											      (_cor33)
										      in  %% Line 357
											  call 'lists':'usort'
											      (_cor34)
	      -| ['compiler_generated'] )
	    ( <_cor46> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','races'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'fixup_race_list_helper'/6 =
    %% Line 359
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 361
	case _cor5 of
	  %% Line 362
	  <[]> when 'true' ->
	      []
	  %% Line 363
	  <[Head|Tail]> when 'true' ->
	      let <Callgraph> =
		  %% Line 364
		  call 'dialyzer_dataflow':'state__get_callgraph'
		      (_cor0)
	      in  let <_cor7> =
		      %% Line 366
		      call 'dialyzer_callgraph':'get_race_code'
			  (Callgraph)
		  in  let <_cor9> =
			  %% Line 366
			  case call 'dict':'find'
				   (Head, _cor7) of
			    %% Line 367
			    <'error'> when 'true' ->
				[]
			    %% Line 368
			    <{'ok',[_X_A|[C|[]]]}> when 'true' ->
				C
			    ( <_cor8> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor8})
			      -| ['compiler_generated'] )
			  end
		      in  %% Line 370
			  case call 'dialyzer_callgraph':'lookup_label'
				   (Head, Callgraph) of
			    <{'ok',FunLabel}> when 'true' ->
				let <_cor13> =
				    %% Line 373
				    call 'dict':'new'
					()
				in  let <DepList1> =
					%% Line 372
					apply 'fixup_race_forward_pullout'/14
					    (Head, FunLabel, _cor4, _cor9, [], _cor3, _cor2, _cor1, _cor13, %% Line 374
													    [], %% Line 374
														[], %% Line 374
														    [], 10, _cor0)
				    in  let <DepList2> =
					    %% Line 376
					    apply 'fixup_race_list_helper'/6
						(Tail, _cor4, _cor3, _cor2, _cor1, _cor0)
					in  %% Line 378
					    call 'erlang':'++'
						(DepList1, DepList2)
			    ( <_cor11> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor11})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor16> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor16})
	    -| ['compiler_generated'] )
	end
'fixup_race_forward_pullout'/14 =
    %% Line 387
    fun (_cor13,_cor12,_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <TState> =
	    %% Line 391
	    call 'dialyzer_dataflow':'state__duplicate'
		(_cor0)
	in  let <_cor15> =
		%% Line 398
		apply 'cleanup_race_code'/1
		    (TState)
	    in  %% Line 394
		case %% Line 395
		     apply 'fixup_race_forward'/14
			 (_cor13, _cor12, _cor11, _cor10, _cor9, _cor8, _cor7, _cor6, _cor5, _cor4, _cor3, _cor2, _cor1, _cor15) of
		  <{DepList,NewCurrFun,NewCurrFunLabel,NewCalls,NewCode,NewRaceList,NewRaceVarMap,NewFunDefVars,NewFunCallVars,NewFunArgTypes,NewNestingLevel}> when 'true' ->
		      do  %% Line 399
			  call 'dialyzer_dataflow':'dispose_state'
			      (TState)
			  %% Line 400
			  case NewCode of
			    %% Line 401
			    <[]> when 'true' ->
				DepList
			    %% Line 402
			    <[{'fun_call',_cor52,Call,FunTypes,%% Line 403
							       FunArgs}|%% Line 403
									Tail]>
				when call 'erlang':'=:='
				      (_cor52,
				       NewCurrFun) ->
				let <Callgraph> =
				    %% Line 404
				    call 'dialyzer_dataflow':'state__get_callgraph'
					(_cor0)
				in  let <OkCall> = {%% Line 405
					 'ok',%% Line 405
					      Call}
				    in  let <Name,Label> =
					    %% Line 407
					    case <> of
					      %% Line 408
					      <>
						  when call 'erlang':'is_integer'
							(Call) ->
						  %% Line 409
						  case call 'dialyzer_callgraph':'lookup_name'
							   (Call, Callgraph) of
						    %% Line 410
						    <'error'> when 'true' ->
							<OkCall,OkCall>
						    %% Line 411
						    <N> when 'true' ->
							<N,OkCall>
						  end
					      %% Line 413
					      <> when 'true' ->
						  let <_cor20> =
						      %% Line 414
						      call 'dialyzer_callgraph':'lookup_label'
							  (Call, Callgraph)
						  in  %% Line 414
						      <OkCall,_cor20>
					    end
					in  let <NewCurrFun1,NewCurrFunLabel1,NewCalls1,NewCode1,NewRaceList1,NewRaceVarMap1,NewFunDefVars1,NewFunCallVars1,NewFunArgTypes1,NewNestingLevel1> =
						%% Line 419
						case <> of
						  %% Line 420
						  <>
						      when call 'erlang':'=:='
							    (Label,
							     'error') ->
						      %% Line 421
						      <NewCurrFun,NewCurrFunLabel,NewCalls,Tail,NewRaceList,%% Line 422
													    NewRaceVarMap,%% Line 422
															  NewFunDefVars,%% Line 422
																	NewFunCallVars,%% Line 422
																		       NewFunArgTypes,%% Line 423
																				      NewNestingLevel>
						  %% Line 424
						  <> when 'true' ->
						      %% Line 425
						      case Name of
							<{'ok',Fun}> when 'true' ->
							    %% Line 426
							    case Label of
							      <{'ok',Int}> when 'true' ->
								  let <_cor26> =
								      %% Line 427
								      call 'dialyzer_callgraph':'get_race_code'
									  (Callgraph)
								  in  %% Line 427
								      case call 'dict':'find'
									       (Fun, _cor26) of
									%% Line 428
									<'error'> when 'true' ->
									    %% Line 429
									    <NewCurrFun,NewCurrFunLabel,NewCalls,Tail,NewRaceList,%% Line 430
																  NewRaceVarMap,%% Line 430
																		NewFunDefVars,%% Line 430
																			      NewFunCallVars,%% Line 430
																					     NewFunArgTypes,%% Line 431
																							    NewNestingLevel>
									%% Line 432
									<{'ok',[Args|[CodeB|[]]]}> when 'true' ->
									    %% Line 449
									    ( case call 'dialyzer_dataflow':'state__get_races'
										       (_cor0) of
										( <( {'races',_cor53,_cor54,_cor55,_cor56,_rec9,_cor57,_cor58,_cor59,_cor60}
										     -| ['compiler_generated'] )> when 'true' ->
										      case apply 'fixup_race_forward_helper'/20
											       (NewCurrFun, NewCurrFunLabel, Fun, Int, NewCalls, NewCalls, [{'curr_fun','out',NewCurrFun,NewCurrFunLabel,NewFunDefVars,NewFunArgTypes,NewFunCallVars,NewRaceVarMap}|Tail], NewRaceList, _cor8, FunArgs, FunTypes, _cor6, NewRaceVarMap, NewFunDefVars, NewFunCallVars, NewFunArgTypes, NewNestingLevel, Args, CodeB, _rec9) of
											<{RetCurrFun,RetCurrFunLabel,RetCalls,RetCode,RetRaceList,RetRaceVarMap,RetFunDefVars,RetFunCallVars,RetFunArgTypes,RetNestingLevel}> when 'true' ->
											    %% Line 450
											    case RetCode of
											      %% Line 451
											      <[{'curr_fun',_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68}|_X_CodeTail]> when 'true' ->
												  %% Line 452
												  <NewCurrFun,NewCurrFunLabel,RetCalls,RetCode,%% Line 453
																	       RetRaceList,%% Line 453
																			   NewRaceVarMap,%% Line 453
																					 NewFunDefVars,%% Line 454
																						       NewFunCallVars,%% Line 454
																								      NewFunArgTypes,%% Line 454
																										     RetNestingLevel>
											      %% Line 455
											      <_X_Else> when 'true' ->
												  %% Line 456
												  <RetCurrFun,RetCurrFunLabel,RetCalls,RetCode,%% Line 457
																	       RetRaceList,%% Line 457
																			   RetRaceVarMap,%% Line 457
																					 RetFunDefVars,%% Line 458
																						       RetFunCallVars,%% Line 458
																								      RetFunArgTypes,%% Line 458
																										     RetNestingLevel>
											    end
											( <_cor30> when 'true' ->
											      primop 'match_fail'
												  ({'badmatch',_cor30})
											  -| ['compiler_generated'] )
										      end
										  -| ['compiler_generated'] )
										( <_cor61> when 'true' ->
										      ( call ( 'erlang'
											       -| ['compiler_generated'] ):( 'error'
															     -| ['compiler_generated'] )
											    (( {'badrecord','races'}
											       -| ['compiler_generated'] ))
											-| ['compiler_generated'] )
										  -| ['compiler_generated'] )
									      end
									      -| ['compiler_generated'] )
									( <_cor32> when 'true' ->
									      primop 'match_fail'
										  ({'case_clause',_cor32})
									  -| ['compiler_generated'] )
								      end
							      ( <_cor25> when 'true' ->
								    primop 'match_fail'
									({'badmatch',_cor25})
								-| ['compiler_generated'] )
							    end
							( <_cor24> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor24})
							  -| ['compiler_generated'] )
						      end
						end
					    in  let <_cor36> =
						    %% Line 463
						    apply 'fixup_race_forward_pullout'/14
							(NewCurrFun1, NewCurrFunLabel1, NewCalls1, %% Line 464
												   NewCode1, %% Line 464
													     NewRaceList1, _cor8, _cor7, _cor6, %% Line 465
																		NewRaceVarMap1, %% Line 465
																				NewFunDefVars1, %% Line 466
																						NewFunCallVars1, %% Line 466
																								 NewFunArgTypes1, %% Line 467
																										  NewNestingLevel1, _cor0)
						in  %% Line 462
						    call 'erlang':'++'
							(DepList, _cor36)
			    ( <_cor37> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor37})
			      -| ['compiler_generated'] )
			  end
		  ( <_cor16> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor16})
		    -| ['compiler_generated'] )
		end
'fixup_race_forward'/14 =
    %% Line 470
    fun (_cor13,_cor12,_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 474
	case _cor10 of
	  %% Line 475
	  <[]> when 'true' ->
	      %% Line 476
	      {[],_cor13,_cor12,_cor11,_cor10,_cor9,_cor5,_cor4,_cor3,_cor2,_cor1}
	  %% Line 478
	  <[Head|Tail]> when 'true' ->
	      let <Callgraph> =
		  %% Line 479
		  call 'dialyzer_dataflow':'state__get_callgraph'
		      (_cor0)
	      in  let <NewRL,DepList,NewNL,Return> =
		      %% Line 481
		      case Head of
			%% Line 482
			<{'dep_call','whereis',_cor110,_cor111,_cor112,_cor113,_cor114,_cor115}> when 'true' ->
			    %% Line 483
			    case _cor6 of
			      %% Line 484
			      <WarnWhereis>
				  when try
					( case <> of
					    ( <>
						  when call 'erlang':'=:='
							(_cor6,
							 'warn_whereis_register') ->
						  'true'
					      -| ['compiler_generated'] )
					    ( <> when 'true' ->
						  %% Line 485
						  call 'erlang':'=:='
						      (_cor6, 'warn_whereis_unregister')
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  let <_cor20> =
				      %% Line 486
				      call 'erlang':'setelement'
					  (8, Head, _cor5)
				  in  %% Line 486
				      <[_cor20|_cor9],%% Line 487
						      [],_cor1,%% Line 487
							       'false'>
			      %% Line 488
			      <_X_Other> when 'true' ->
				  %% Line 489
				  <_cor9,[],_cor1,'false'>
			    end
			%% Line 491
			<{'dep_call','ets_lookup',_cor124,_cor125,_cor126,_cor127,_cor128,_cor129}> when 'true' ->
			    %% Line 492
			    case _cor6 of
			      %% Line 493
			      <'warn_ets_lookup_insert'> when 'true' ->
				  let <_cor24> =
				      %% Line 494
				      call 'erlang':'setelement'
					  (8, Head, _cor5)
				  in  %% Line 494
				      <[_cor24|_cor9],%% Line 495
						      [],_cor1,%% Line 495
							       'false'>
			      %% Line 496
			      <_X_Other> when 'true' ->
				  %% Line 497
				  <_cor9,[],_cor1,'false'>
			    end
			%% Line 499
			<{'dep_call','mnesia_dirty_read',_cor138,_cor139,_cor140,_cor141,_cor142,_cor143}> when 'true' ->
			    %% Line 500
			    case _cor6 of
			      %% Line 501
			      <'warn_mnesia_dirty_read_write'> when 'true' ->
				  let <_cor28> =
				      %% Line 502
				      call 'erlang':'setelement'
					  (8, Head, _cor5)
				  in  %% Line 502
				      <[_cor28|_cor9],%% Line 503
						      [],_cor1,%% Line 503
							       'false'>
			      %% Line 504
			      <_X_Other> when 'true' ->
				  %% Line 505
				  <_cor9,[],_cor1,'false'>
			    end
			%% Line 507
			<{'warn_call',RegCall,_cor152,_cor153}>
			    when try
				  ( case <> of
				      ( <>
					    when call 'erlang':'=:='
						  (RegCall,
						   'register') ->
					    'true'
					-| ['compiler_generated'] )
				      ( <> when 'true' ->
					    %% Line 508
					    call 'erlang':'=:='
						(RegCall, 'unregister')
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    %% Line 509
			    case _cor6 of
			      %% Line 510
			      <WarnWhereis>
				  when try
					( case <> of
					    ( <>
						  when call 'erlang':'=:='
							(_cor6,
							 'warn_whereis_register') ->
						  'true'
					      -| ['compiler_generated'] )
					    ( <> when 'true' ->
						  %% Line 511
						  call 'erlang':'=:='
						      (_cor6, 'warn_whereis_unregister')
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  let <_cor38> =
				      %% Line 512
				      call 'erlang':'setelement'
					  (4, Head, _cor5)
				  in  %% Line 512
				      <[_cor38|_cor9],%% Line 513
						      [],_cor1,%% Line 513
							       'false'>
			      %% Line 514
			      <_X_Other> when 'true' ->
				  %% Line 515
				  <_cor9,[],_cor1,'false'>
			    end
			%% Line 517
			<{'warn_call','ets_insert',_cor158,_cor159}> when 'true' ->
			    %% Line 518
			    case _cor6 of
			      %% Line 519
			      <'warn_ets_lookup_insert'> when 'true' ->
				  let <_cor42> =
				      %% Line 520
				      call 'erlang':'setelement'
					  (4, Head, _cor5)
				  in  %% Line 520
				      <[_cor42|_cor9],%% Line 521
						      [],_cor1,%% Line 521
							       'false'>
			      %% Line 522
			      <_X_Other> when 'true' ->
				  %% Line 523
				  <_cor9,[],_cor1,'false'>
			    end
			%% Line 525
			<{'warn_call','mnesia_dirty_write',_cor164,_cor165}> when 'true' ->
			    %% Line 526
			    case _cor6 of
			      %% Line 527
			      <'warn_mnesia_dirty_read_write'> when 'true' ->
				  let <_cor46> =
				      %% Line 528
				      call 'erlang':'setelement'
					  (4, Head, _cor5)
				  in  %% Line 528
				      <[_cor46|_cor9],%% Line 529
						      [],_cor1,%% Line 529
							       'false'>
			      %% Line 530
			      <_X_Other> when 'true' ->
				  %% Line 531
				  <_cor9,[],_cor1,'false'>
			    end
			%% Line 533
			<{'fun_call',_cor170,_cor171,_cor172,_cor173}>
			    when let <_cor174> =
				  call 'erlang':'=:='
				      (_cor170, _cor13)
			      in  let <_cor175> =
				      call 'erlang':'=:='
					  (_cor171, _cor8)
				  in  call 'erlang':'and'
					  (_cor174, _cor175) ->
			    %% Line 534
			    <_cor9,[],_cor1,'false'>
			%% Line 535
			<{'fun_call',_cor176,_cor177,_cor178,_cor179}>
			    when call 'erlang':'=:='
				  (_cor176,
				   _cor13) ->
			    let <_cor48> =
				%% Line 536
				call 'erlang':'-'
				    (_cor1, 1)
			    in  %% Line 536
				<_cor9,[],_cor48,'false'>
			%% Line 537
			<'beg_case'> when 'true' ->
			    %% Line 538
			    <[Head|_cor9],[],_cor1,'false'>
			%% Line 539
			<{'beg_clause',_cor180,_cor181,_cor182}> when 'true' ->
			    %% Line 540
			    <[{'beg_clause','undefined','undefined','undefined'}|_cor9],[],_cor1,'false'>
			%% Line 541
			<{'end_clause',_cor183,_cor184,_cor185}> when 'true' ->
			    %% Line 542
			    <[{'end_clause','undefined','undefined','undefined'}|_cor9],[],_cor1,'false'>
			%% Line 543
			<{'end_case',_cor186}> when 'true' ->
			    %% Line 544
			    <[Head|_cor9],[],_cor1,'false'>
			%% Line 545
			<{'let_tag',_cor187,_cor188}> when 'true' ->
			    %% Line 546
			    <_cor9,[],_cor1,'false'>
			%% Line 547
			<{'curr_fun','in',_cor189,%% Line 548
						  _X_InitFunLabel,%% Line 549
								  NewFDV,%% Line 550
									 _X_NewFAT,%% Line 549
										   NewFCV,%% Line 548
											  _X_NewRVM}>
			    when call 'erlang':'=:='
				  (_cor189,
				   _cor8) ->
			    let <_cor49> =
				%% Line 553
				call 'erlang':'-'
				    (_cor1, 1)
			    in  %% Line 551
				<[{'curr_fun','out','undefined','undefined',%% Line 552
									    NewFDV,'undefined',%% Line 552
											       NewFCV,_cor5}|_cor9],%% Line 553
														    [],_cor49,%% Line 553
															      'false'>
			%% Line 554
			<{'curr_fun','in',_cor190,_cor191,NewFDV,_cor192,%% Line 555
									 NewFCV,_cor193}> when 'true' ->
			    let <_cor50> =
				%% Line 559
				call 'erlang':'-'
				    (_cor1, 1)
			    in  %% Line 556
				<[{'curr_fun','out','undefined','undefined',%% Line 557
									    NewFDV,'undefined',%% Line 557
											       NewFCV,_cor5}|_cor9],%% Line 559
														    [],_cor50,%% Line 559
															      'false'>
			%% Line 560
			<{'curr_fun','out',_cor194,_cor195,_cor196,_cor197,_cor198,_cor199}> when 'true' ->
			    let <_cor51> =
				%% Line 562
				call 'erlang':'+'
				    (_cor1, 1)
			    in  %% Line 561
				<[{'curr_fun','in','undefined','undefined','undefined','undefined','undefined',_cor5}|_cor9],[],_cor51,%% Line 562
																       'false'>
			%% Line 563
			<RaceTag> when 'true' ->
			    let <PublicTables> =
				%% Line 564
				call 'dialyzer_callgraph':'get_public_tables'
				    (Callgraph)
			    in  let <NamedTables> =
				    %% Line 565
				    call 'dialyzer_callgraph':'get_named_tables'
					(Callgraph)
				in  let <_cor54> =
					%% Line 569
					call 'dialyzer_dataflow':'state__records_only'
					    (_cor0)
				    in  let <WarnVarArgs1> =
					    %% Line 567
					    apply 'var_type_analysis'/6
						(_cor4, _cor2, _cor7, _cor6, _cor5, _cor54)
					in  %% Line 570
					    case %% Line 571
						 apply 'get_deplist_paths'/7
						     (_cor9, WarnVarArgs1, _cor6, _cor5, %% Line 572
											 0, %% Line 572
											    PublicTables, %% Line 572
													  NamedTables) of
					      <{NewDepList,IsPublic,_X_Return}> when 'true' ->
						  let <NewHead,NewDepList1> =
						      %% Line 574
						      case RaceTag of
							%% Line 575
							<'whereis_register'> when 'true' ->
							    %% Line 576
							    <[{'warn_call','register',_cor7,_cor5}|%% Line 577
												   []],%% Line 578
												       NewDepList>
							%% Line 579
							<'whereis_unregister'> when 'true' ->
							    %% Line 580
							    <[{'warn_call','unregister',_cor7,_cor5}|%% Line 581
												     []],%% Line 582
													 NewDepList>
							%% Line 583
							<'ets_lookup_insert'> when 'true' ->
							    let <NewWarnCall> =
								%% Line 585
								[{'warn_call','ets_insert',_cor7,_cor5}|%% Line 586
													[]]
							    in  %% Line 587
								case _cor7 of
								  <[Tab|[Names|[_cor200|[_cor201|[]]]]]> when 'true' ->
								      let <_cor66> =
									  %% Line 588
									  ( case IsPublic of
									      ( <( 'true'
										   -| ['compiler_generated'] )> when 'true' ->
										    'true'
										-| ['compiler_generated'] )
									      ( <( 'false'
										   -| ['compiler_generated'] )> when 'true' ->
										    %% Line 590
										    ( case apply 'compare_var_list'/3
											       (Tab, PublicTables, _cor5) of
											( <( 'true'
											     -| ['compiler_generated'] )> when 'true' ->
											      'true'
											  -| ['compiler_generated'] )
											( <( 'false'
											     -| ['compiler_generated'] )> when 'true' ->
											      let <_cor62> =
												  %% Line 591
												  call 'erlang':'--'
												      (Names, NamedTables)
											      in  let <_cor63> =
												      %% Line 591
												      call 'erlang':'length'
													  (_cor62)
												  in  let <_cor61> =
													  %% Line 591
													  call 'erlang':'length'
													      (Names)
												      in  %% Line 591
													  call 'erlang':'<'
													      (_cor63, _cor61)
											  -| ['compiler_generated'] )
											( <_cor60> when 'true' ->
											      ( call ( 'erlang'
												       -| ['compiler_generated'] ):( 'error'
																     -| ['compiler_generated'] )
												    (( {( 'badarg'
													  -| ['compiler_generated'] ),_cor60}
												       -| ['compiler_generated'] ))
												-| ['compiler_generated'] )
											  -| ['compiler_generated'] )
										      end
										      -| ['compiler_generated'] )
										-| ['compiler_generated'] )
									      ( <_cor59> when 'true' ->
										    ( call ( 'erlang'
											     -| ['compiler_generated'] ):( 'error'
															   -| ['compiler_generated'] )
											  (( {( 'badarg'
												-| ['compiler_generated'] ),_cor59}
											     -| ['compiler_generated'] ))
										      -| ['compiler_generated'] )
										-| ['compiler_generated'] )
									    end
									    -| ['compiler_generated'] )
								      in  %% Line 588
									  case _cor66 of
									    %% Line 592
									    <'true'> when 'true' ->
										%% Line 593
										<NewWarnCall,NewDepList>
									    %% Line 594
									    <'false'> when 'true' ->
										<NewWarnCall,[]>
									    ( <_cor67> when 'true' ->
										  primop 'match_fail'
										      ({'case_clause',_cor67})
									      -| ['compiler_generated'] )
									  end
								  ( <_cor58> when 'true' ->
									primop 'match_fail'
									    ({'badmatch',_cor58})
								    -| ['compiler_generated'] )
								end
							%% Line 596
							<'mnesia_dirty_read_write'> when 'true' ->
							    %% Line 597
							    <[{'warn_call','mnesia_dirty_write',_cor7,_cor5}|%% Line 598
													     []],%% Line 599
														 NewDepList>
							( <_cor68> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_cor68})
							  -| ['compiler_generated'] )
						      end
						  in  let <_cor72> =
							  %% Line 601
							  call 'erlang':'++'
							      (NewHead, _cor9)
						      in  let <_cor71> =
							      %% Line 602
							      apply 'is_last_race'/4
								  (RaceTag, _cor8, Tail, Callgraph)
							  in  <_cor72,%% Line 601
								      NewDepList1,_cor1,_cor71>
					      ( <_cor56> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor56})
						-| ['compiler_generated'] )
					    end
		      end
		  in  let <NewCurrFun,NewCurrFunLabel,NewCode,NewRaceList,NewRaceVarMap,NewFunDefVars,NewFunCallVars,NewFunArgTypes,NewNestingLevel,PullOut> =
			  %% Line 607
			  case Head of
			    %% Line 608
			    <{'fun_call',_cor202,_cor203,_cor204,_cor205}>
				when call 'erlang':'=:='
				      (_cor202,
				       _cor13) ->
				%% Line 609
				case <> of
				  %% Line 610
				  <>
				      when call 'erlang':'=:='
					    (NewNL,
					     0) ->
				      %% Line 611
				      <_cor13,_cor12,Tail,NewRL,_cor5,_cor4,_cor3,_cor2,%% Line 612
											NewNL,%% Line 612
											      'false'>
				  %% Line 613
				  <> when 'true' ->
				      %% Line 614
				      <_cor13,_cor12,_cor10,NewRL,_cor5,_cor4,_cor3,_cor2,%% Line 615
											  NewNL,%% Line 615
												'true'>
				end
			    %% Line 617
			    <{'beg_clause',Arg,Pats,Guard}> when 'true' ->
				%% Line 618
				case %% Line 619
				     apply 'race_var_map_guard'/5
					 (Arg, Pats, Guard, _cor5, 'bind') of
				  <{RaceVarMap1,RemoveClause}> when 'true' ->
				      %% Line 620
				      case RemoveClause of
					%% Line 621
					<'true'> when 'true' ->
					    %% Line 626
					    case %% Line 627
						 apply 'remove_clause'/4
						     (NewRL, %% Line 628
							     {'curr_fun','undefined',_cor13,_cor12,_cor4,_cor2,_cor3,%% Line 629
														     RaceVarMap1}, %% Line 633
																   Tail, %% Line 633
																	 NewNL) of
					      <{RaceList2,{'curr_fun',_cor206,CurrFun2,CurrFunLabel2,FunDefVars2,FunArgTypes2,FunCallVars2,RaceVarMap2},Code2,NestingLevel2}> when 'true' ->
						  %% Line 634
						  <CurrFun2,CurrFunLabel2,Code2,RaceList2,%% Line 635
											  RaceVarMap2,%% Line 635
												      FunDefVars2,%% Line 635
														  FunCallVars2,%% Line 635
															       FunArgTypes2,%% Line 636
																	    NestingLevel2,%% Line 636
																			  'false'>
					      ( <_cor78> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor78})
						-| ['compiler_generated'] )
					    end
					%% Line 637
					<'false'> when 'true' ->
					    %% Line 638
					    <_cor13,_cor12,Tail,NewRL,RaceVarMap1,_cor4,_cor3,_cor2,%% Line 639
												    NewNL,%% Line 639
													  'false'>
					( <_cor79> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor79})
					  -| ['compiler_generated'] )
				      end
				  ( <_cor77> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor77})
				    -| ['compiler_generated'] )
				end
			    %% Line 641
			    <{'end_clause',Arg,Pats,Guard}> when 'true' ->
				%% Line 642
				case %% Line 643
				     apply 'race_var_map_guard'/5
					 (Arg, Pats, Guard, _cor5, 'unbind') of
				  <{RaceVarMap1,_X_RemoveClause}> when 'true' ->
				      %% Line 644
				      <_cor13,_cor12,Tail,NewRL,RaceVarMap1,_cor4,_cor3,_cor2,%% Line 645
											      NewNL,%% Line 646
												    'false'>
				  ( <_cor80> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor80})
				    -| ['compiler_generated'] )
				end
			    %% Line 647
			    <{'end_case',Clauses}> when 'true' ->
				let <RaceVarMap1> =
				    %% Line 649
				    apply 'race_var_map_clauses'/2
					(Clauses, _cor5)
				in  %% Line 650
				    <_cor13,_cor12,Tail,NewRL,RaceVarMap1,_cor4,_cor3,_cor2,%% Line 651
											    NewNL,%% Line 652
												  'false'>
			    %% Line 653
			    <{'let_tag',Var,Arg}> when 'true' ->
				let <_cor82> =
				    %% Line 655
				    apply 'race_var_map'/4
					(Var, Arg, _cor5, 'bind')
				in  %% Line 654
				    <_cor13,_cor12,Tail,NewRL,_cor82,_cor4,_cor3,_cor2,%% Line 656
										       NewNL,%% Line 656
											     'false'>
			    %% Line 657
			    <{'curr_fun',_cor207,CurrFun1,CurrFunLabel1,%% Line 658
									FunDefVars1,%% Line 659
										    FunArgTypes1,%% Line 659
												 FunCallVars1,%% Line 658
													      RaceVarMap1}> when 'true' ->
				%% Line 660
				case <> of
				  %% Line 661
				  <>
				      when call 'erlang':'=:='
					    (NewNL,
					     0) ->
				      let <_cor83> =
					  %% Line 663
					  apply 'remove_nonlocal_functions'/2
					      (Tail, 1)
				      in  %% Line 662
					  <_cor13,_cor12,_cor83,%% Line 663
								NewRL,_cor5,_cor4,_cor3,_cor2,%% Line 664
											      NewNL,%% Line 664
												    'false'>
				  %% Line 665
				  <> when 'true' ->
				      %% Line 666
				      <CurrFun1,CurrFunLabel1,Tail,NewRL,RaceVarMap1,%% Line 667
										     FunDefVars1,%% Line 667
												 FunCallVars1,%% Line 667
													      FunArgTypes1,%% Line 667
															   NewNL,%% Line 667
																 'false'>
				end
			    %% Line 669
			    <_X_Thing> when 'true' ->
				%% Line 670
				<_cor13,_cor12,Tail,NewRL,_cor5,_cor4,_cor3,_cor2,%% Line 671
										  NewNL,%% Line 671
											'false'>
			  end
		      in  %% Line 673
			  case Return of
			    %% Line 674
			    <'true'> when 'true' ->
				%% Line 675
				{DepList,NewCurrFun,NewCurrFunLabel,_cor11,%% Line 676
									   [],%% Line 676
									      NewRaceList,%% Line 676
											  NewRaceVarMap,%% Line 676
													NewFunDefVars,%% Line 677
														      NewFunCallVars,%% Line 677
																     NewFunArgTypes,%% Line 677
																		    NewNestingLevel}
			    %% Line 678
			    <'false'> when 'true' ->
				let <_cor89> =
				    %% Line 680
				    case <> of
				      %% Line 681
				      <>
					  when call 'erlang':'=:='
						(NewNestingLevel,
						 0) ->
					  call 'erlang':'+'
					      (NewNestingLevel, 1)
				      %% Line 682
				      <> when 'true' ->
					  NewNestingLevel
				    end
				in  %% Line 684
				    case PullOut of
				      %% Line 685
				      <'true'> when 'true' ->
					  %% Line 686
					  {DepList,NewCurrFun,NewCurrFunLabel,_cor11,%% Line 687
										     NewCode,%% Line 687
											     NewRaceList,%% Line 687
													 NewRaceVarMap,%% Line 687
														       NewFunDefVars,%% Line 688
																     NewFunCallVars,%% Line 688
																		    NewFunArgTypes,_cor89}
				      %% Line 689
				      <'false'> when 'true' ->
					  %% Line 692
					  case %% Line 693
					       apply 'fixup_race_forward'/14
						   (NewCurrFun, NewCurrFunLabel, _cor11, %% Line 694
											 NewCode, %% Line 694
												  NewRaceList, _cor8, _cor7, _cor6, %% Line 695
																    NewRaceVarMap, %% Line 695
																		   NewFunDefVars, %% Line 696
																				  NewFunCallVars, %% Line 696
																						  NewFunArgTypes, _cor89, _cor0) of
					    <{RetDepList,NewCurrFun1,NewCurrFunLabel1,NewCalls1,NewCode1,NewRaceList1,NewRaceVarMap1,NewFunDefVars1,NewFunCallVars1,NewFunArgTypes1,NewNestingLevel2}> when 'true' ->
						let <_cor92> =
						    %% Line 698
						    call 'erlang':'++'
							(DepList, RetDepList)
						in  %% Line 698
						    {_cor92,NewCurrFun1,NewCurrFunLabel1,%% Line 699
											 NewCalls1,%% Line 699
												   NewCode1,%% Line 699
													    NewRaceList1,%% Line 699
															 NewRaceVarMap1,%% Line 700
																	NewFunDefVars1,%% Line 700
																		       NewFunCallVars1,%% Line 700
																				       NewFunArgTypes1,%% Line 701
																						       NewNestingLevel2}
					    ( <_cor91> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor91})
					      -| ['compiler_generated'] )
					  end
				      ( <_cor93> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor93})
					-| ['compiler_generated'] )
				    end
			    ( <_cor94> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor94})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor95> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor95})
	    -| ['compiler_generated'] )
	end
'get_deplist_paths'/7 =
    %% Line 706
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 708
	case _cor6 of
	  %% Line 709
	  <[]> when 'true' ->
	      {[],'false','true'}
	  %% Line 710
	  <[Head|Tail]> when 'true' ->
	      %% Line 711
	      case Head of
		%% Line 712
		<{'end_case',_cor111}> when 'true' ->
		    %% Line 713
		    case %% Line 714
			 apply 'handle_case'/7
			     (Tail, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0) of
		      <{RaceList1,DepList1,IsPublic1,Continue1}> when 'true' ->
			  %% Line 716
			  case Continue1 of
			    %% Line 717
			    <'true'> when 'true' ->
				%% Line 718
				case %% Line 719
				     apply 'get_deplist_paths'/7
					 (RaceList1, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0) of
				  <{DepList2,IsPublic2,Continue2}> when 'true' ->
				      let <_cor12> =
					  %% Line 722
					  call 'erlang':'++'
					      (DepList1, DepList2)
				      in  let <_cor11> =
					      %% Line 722
					      ( case IsPublic1 of
						  ( <( 'true'
						       -| ['compiler_generated'] )> when 'true' ->
							'true'
						    -| ['compiler_generated'] )
						  ( <( 'false'
						       -| ['compiler_generated'] )> when 'true' ->
							IsPublic2
						    -| ['compiler_generated'] )
						  ( <_cor9> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {( 'badarg'
								    -| ['compiler_generated'] ),_cor9}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					  in  %% Line 722
					      {_cor12,_cor11,Continue2}
				  ( <_cor8> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor8})
				    -| ['compiler_generated'] )
				end
			    %% Line 723
			    <'false'> when 'true' ->
				{DepList1,IsPublic1,'false'}
			    ( <_cor13> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor13})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor7> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor7})
			-| ['compiler_generated'] )
		    end
		%% Line 725
		<{'beg_clause',_cor112,_cor113,_cor114}> when 'true' ->
		    let <_cor14> =
			%% Line 726
			apply 'fixup_before_case_path'/1
			    (Tail)
		    in  %% Line 726
			apply 'get_deplist_paths'/7
			    (_cor14, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
		%% Line 729
		<{'curr_fun','in',_cor115,_cor116,_cor117,_cor118,_cor119,RaceVarMap1}> when 'true' ->
		    let <_cor15> =
			%% Line 732
			call 'erlang':'+'
			    (_cor2, 1)
		    in  %% Line 730
			case %% Line 731
			     apply 'get_deplist_paths'/7
				 (Tail, _cor5, _cor4, _cor3, _cor15, _cor1, _cor0) of
			  <{DepList,IsPublic,Continue}> when 'true' ->
			      let <_cor29> =
				  %% Line 734
				  case _cor4 of
				    %% Line 735
				    <'warn_ets_lookup_insert'> when 'true' ->
					%% Line 736
					case _cor5 of
					  <[Tabs|[Names|[_cor120|[_cor121|[]]]]]> when 'true' ->
					      %% Line 737
					      ( case IsPublic of
						  ( <( 'true'
						       -| ['compiler_generated'] )> when 'true' ->
							'true'
						    -| ['compiler_generated'] )
						  ( <( 'false'
						       -| ['compiler_generated'] )> when 'true' ->
							let <_cor22> =
							    %% Line 739
							    ( fun (_cor20) ->
								  %% Line 740
								  apply 'compare_var_list'/3
								      (_cor20, _cor1, RaceVarMap1)
							      -| [{'id',{0,0,'-get_deplist_paths/7-fun-0-'}}] )
							in  %% Line 742
							    ( case call 'lists':'any'
								       (_cor22, Tabs) of
								( <( 'true'
								     -| ['compiler_generated'] )> when 'true' ->
								      'true'
								  -| ['compiler_generated'] )
								( <( 'false'
								     -| ['compiler_generated'] )> when 'true' ->
								      let <_cor24> =
									  %% Line 743
									  call 'erlang':'--'
									      (Names, _cor0)
								      in  let <_cor25> =
									      %% Line 743
									      call 'erlang':'length'
										  (_cor24)
									  in  let <_cor23> =
										  %% Line 743
										  call 'erlang':'length'
										      (Names)
									      in  %% Line 743
										  call 'erlang':'<'
										      (_cor25, _cor23)
								  -| ['compiler_generated'] )
								( <_cor19> when 'true' ->
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'error'
													     -| ['compiler_generated'] )
									    (( {( 'badarg'
										  -| ['compiler_generated'] ),_cor19}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							      -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						  ( <_cor18> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {( 'badarg'
								    -| ['compiler_generated'] ),_cor18}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					  ( <_cor17> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor17})
					    -| ['compiler_generated'] )
					end
				    %% Line 744
				    <_cor122> when 'true' ->
					'true'
				  end
			      in  %% Line 746
				  {DepList,_cor29,Continue}
			  ( <_cor16> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor16})
			    -| ['compiler_generated'] )
			end
		%% Line 747
		<{'curr_fun','out',_cor123,_cor124,FunDefVars,_cor125,%% Line 748
								      FunCallVars,RaceVarMap1}> when 'true' ->
		    let <_cor42> =
			%% Line 750
			( letrec
			      'lc$^1'/1 =
				  fun (_cor39) ->
				      case _cor39 of
					<[DefVar|_cor38]> when 'true' ->
					    let <_cor40> =
						apply 'format_arg'/1
						    (DefVar)
					    in  let <_cor41> =
						    apply 'lc$^1'/1
							(_cor38)
						in  ( [_cor40|_cor41]
						      -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor39> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor39})
						-| [{'function_name',{'lc$^1',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^1'/1
				  (FunDefVars)
			  -| ['list_comprehension'] )
		    in  let <_cor36> =
			    %% Line 751
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor33) ->
					  case _cor33 of
					    <[CallVar|_cor32]> when 'true' ->
						let <_cor34> =
						    apply 'format_arg'/1
							(CallVar)
						in  let <_cor35> =
							apply 'lc$^0'/1
							    (_cor32)
						    in  ( [_cor34|_cor35]
							  -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor33> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor33})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (FunCallVars)
			      -| ['list_comprehension'] )
			in  let <WarnVarArgs1> =
				%% Line 750
				apply 'var_analysis'/4
				    (_cor42, _cor36, _cor5, _cor4)
			    in  let <WarnVarArgs2,Stop> =
				    %% Line 754
				    case _cor4 of
				      %% Line 755
				      <'warn_whereis_register'> when 'true' ->
					  %% Line 756
					  case WarnVarArgs1 of
					    <[WVA1|[WVA2|[WVA3|[WVA4|[]]]]]> when 'true' ->
						let <_cor50> =
						    %% Line 759
						    ( letrec
							  'lc$^2'/1 =
							      fun (_cor47) ->
								  case _cor47 of
								    <[V|_cor46]> when 'true' ->
									let <_cor48> =
									    apply 'find_all_bound_vars'/2
										(V, RaceVarMap1)
									in  let <_cor49> =
										apply 'lc$^2'/1
										    (_cor46)
									    in  ( [_cor48|_cor49]
										  -| ['compiler_generated'] )
								    <[]> when 'true' ->
									[]
								    ( <_cor47> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_cor47})
									    -| [{'function_name',{'lc$^2',1}}] )
								      -| ['compiler_generated'] )
								  end
						      in  apply 'lc$^2'/1
							      (WVA1)
						      -| ['list_comprehension'] )
						in  let <Vars> =
							%% Line 758
							call 'lists':'flatten'
							    (_cor50)
						    in  %% Line 760
							case <Vars,_cor2> of
							  %% Line 761
							  <[],0> when 'true' ->
							      %% Line 762
							      <_cor5,'true'>
							  %% Line 763
							  <[],_cor126> when 'true' ->
							      %% Line 764
							      <_cor5,'false'>
							  %% Line 765
							  <_fol219,_fol220> when 'true' ->
							      %% Line 766
							      <[Vars|[WVA2|[WVA3|[WVA4|[]]]]],'false'>
							end
					    ( <_cor44> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor44})
					      -| ['compiler_generated'] )
					  end
				      %% Line 768
				      <'warn_whereis_unregister'> when 'true' ->
					  %% Line 769
					  case WarnVarArgs1 of
					    <[WVA1|[WVA2|[]]]> when 'true' ->
						let <_cor59> =
						    %% Line 772
						    ( letrec
							  'lc$^3'/1 =
							      fun (_cor56) ->
								  case _cor56 of
								    <[V|_cor55]> when 'true' ->
									let <_cor57> =
									    apply 'find_all_bound_vars'/2
										(V, RaceVarMap1)
									in  let <_cor58> =
										apply 'lc$^3'/1
										    (_cor55)
									    in  ( [_cor57|_cor58]
										  -| ['compiler_generated'] )
								    <[]> when 'true' ->
									[]
								    ( <_cor56> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_cor56})
									    -| [{'function_name',{'lc$^3',1}}] )
								      -| ['compiler_generated'] )
								  end
						      in  apply 'lc$^3'/1
							      (WVA1)
						      -| ['list_comprehension'] )
						in  let <Vars> =
							%% Line 771
							call 'lists':'flatten'
							    (_cor59)
						    in  %% Line 773
							case <Vars,_cor2> of
							  %% Line 774
							  <[],0> when 'true' ->
							      %% Line 775
							      <_cor5,'true'>
							  %% Line 776
							  <[],_cor128> when 'true' ->
							      %% Line 777
							      <_cor5,'false'>
							  %% Line 778
							  <_fol223,_fol224> when 'true' ->
							      %% Line 779
							      <[Vars|[WVA2|[]]],'false'>
							end
					    ( <_cor53> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor53})
					      -| ['compiler_generated'] )
					  end
				      %% Line 781
				      <'warn_ets_lookup_insert'> when 'true' ->
					  %% Line 782
					  case WarnVarArgs1 of
					    <[WVA1|[WVA2|[WVA3|[WVA4|[]]]]]> when 'true' ->
						let <_cor68> =
						    %% Line 785
						    ( letrec
							  'lc$^4'/1 =
							      fun (_cor65) ->
								  case _cor65 of
								    <[V1|_cor64]> when 'true' ->
									let <_cor66> =
									    apply 'find_all_bound_vars'/2
										(V1, RaceVarMap1)
									in  let <_cor67> =
										apply 'lc$^4'/1
										    (_cor64)
									    in  ( [_cor66|_cor67]
										  -| ['compiler_generated'] )
								    <[]> when 'true' ->
									[]
								    ( <_cor65> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_cor65})
									    -| [{'function_name',{'lc$^4',1}}] )
								      -| ['compiler_generated'] )
								  end
						      in  apply 'lc$^4'/1
							      (WVA1)
						      -| ['list_comprehension'] )
						in  let <Vars1> =
							%% Line 784
							call 'lists':'flatten'
							    (_cor68)
						    in  let <_cor75> =
							    %% Line 788
							    ( letrec
								  'lc$^5'/1 =
								      fun (_cor72) ->
									  case _cor72 of
									    <[V2|_cor71]> when 'true' ->
										let <_cor73> =
										    apply 'find_all_bound_vars'/2
											(V2, RaceVarMap1)
										in  let <_cor74> =
											apply 'lc$^5'/1
											    (_cor71)
										    in  ( [_cor73|_cor74]
											  -| ['compiler_generated'] )
									    <[]> when 'true' ->
										[]
									    ( <_cor72> when 'true' ->
										  ( primop 'match_fail'
											({'function_clause',_cor72})
										    -| [{'function_name',{'lc$^5',1}}] )
									      -| ['compiler_generated'] )
									  end
							      in  apply 'lc$^5'/1
								      (WVA3)
							      -| ['list_comprehension'] )
							in  let <Vars2> =
								%% Line 787
								call 'lists':'flatten'
								    (_cor75)
							    in  %% Line 789
								case <Vars1,Vars2,_cor2> of
								  %% Line 790
								  <[],_cor130,0> when 'true' ->
								      %% Line 791
								      <_cor5,'true'>
								  %% Line 792
								  <[],_cor131,_cor132> when 'true' ->
								      %% Line 793
								      <_cor5,'false'>
								  %% Line 794
								  <_cor133,[],0> when 'true' ->
								      %% Line 795
								      <_cor5,'true'>
								  %% Line 796
								  <_cor134,[],_cor135> when 'true' ->
								      %% Line 797
								      <_cor5,'false'>
								  %% Line 798
								  <_fol227,_fol228,_fol229> when 'true' ->
								      %% Line 799
								      <[Vars1|[WVA2|[Vars2|[WVA4|[]]]]],'false'>
								end
					    ( <_cor62> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor62})
					      -| ['compiler_generated'] )
					  end
				      %% Line 801
				      <'warn_mnesia_dirty_read_write'> when 'true' ->
					  %% Line 802
					  case WarnVarArgs1 of
					    <[WVA1|[WVA2|T]]> when 'true' ->
						let <_cor84> =
						    %% Line 805
						    ( letrec
							  'lc$^6'/1 =
							      fun (_cor81) ->
								  case _cor81 of
								    <[V|_cor80]> when 'true' ->
									let <_cor82> =
									    apply 'find_all_bound_vars'/2
										(V, RaceVarMap1)
									in  let <_cor83> =
										apply 'lc$^6'/1
										    (_cor80)
									    in  ( [_cor82|_cor83]
										  -| ['compiler_generated'] )
								    <[]> when 'true' ->
									[]
								    ( <_cor81> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_cor81})
									    -| [{'function_name',{'lc$^6',1}}] )
								      -| ['compiler_generated'] )
								  end
						      in  apply 'lc$^6'/1
							      (WVA1)
						      -| ['list_comprehension'] )
						in  let <Vars> =
							%% Line 804
							call 'lists':'flatten'
							    (_cor84)
						    in  %% Line 806
							case <Vars,_cor2> of
							  %% Line 807
							  <[],0> when 'true' ->
							      %% Line 808
							      <_cor5,'true'>
							  %% Line 809
							  <[],_cor137> when 'true' ->
							      %% Line 810
							      <_cor5,'false'>
							  %% Line 811
							  <_fol233,_fol234> when 'true' ->
							      %% Line 812
							      <[Vars|[WVA2|T]],'false'>
							end
					    ( <_cor78> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor78})
					      -| ['compiler_generated'] )
					  end
				      ( <_cor87> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor87})
					-| ['compiler_generated'] )
				    end
				in  %% Line 815
				    case Stop of
				      %% Line 816
				      <'true'> when 'true' ->
					  {[],'false','false'}
				      %% Line 817
				      <'false'> when 'true' ->
					  let <_cor91> =
					      %% Line 819
					      case _cor2 of
						%% Line 820
						<0> when 'true' ->
						    _cor2
						%% Line 821
						<_cor139> when 'true' ->
						    call 'erlang':'-'
							(_cor2, 1)
					      end
					  in  %% Line 823
					      apply 'get_deplist_paths'/7
						  (Tail, WarnVarArgs2, _cor4, RaceVarMap1, _cor91, _cor1, _cor0)
				      ( <_cor93> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor93})
					-| ['compiler_generated'] )
				    end
		%% Line 826
		<{'warn_call',RegCall,WarnVarArgs1,%% Line 827
						   RaceVarMap1}>
		    when %% Line 827
		      try
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (RegCall,
					   'register') ->
				    'true'
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    %% Line 828
				    call 'erlang':'=:='
					(RegCall, 'unregister')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 829
		    case apply 'compare_first_arg'/3
			     (_cor5, WarnVarArgs1, RaceVarMap1) of
		      %% Line 830
		      <'true'> when 'true' ->
			  {[],'false','false'}
		      %% Line 831
		      <NewWarnVarArgs> when 'true' ->
			  %% Line 832
			  apply 'get_deplist_paths'/7
			      (Tail, NewWarnVarArgs, _cor4, _cor3, _cor2, _cor1, _cor0)
		    end
		%% Line 835
		<{'warn_call','ets_insert',WarnVarArgs1,%% Line 836
							RaceVarMap1}> when 'true' ->
		    %% Line 837
		    case apply 'compare_ets_insert'/3
			     (_cor5, WarnVarArgs1, RaceVarMap1) of
		      %% Line 838
		      <'true'> when 'true' ->
			  {[],'false','false'}
		      %% Line 839
		      <NewWarnVarArgs> when 'true' ->
			  %% Line 840
			  apply 'get_deplist_paths'/7
			      (Tail, NewWarnVarArgs, _cor4, _cor3, _cor2, _cor1, _cor0)
		    end
		%% Line 843
		<{'warn_call','mnesia_dirty_write',WarnVarArgs1,%% Line 844
								RaceVarMap1}> when 'true' ->
		    %% Line 845
		    case apply 'compare_first_arg'/3
			     (_cor5, WarnVarArgs1, RaceVarMap1) of
		      %% Line 846
		      <'true'> when 'true' ->
			  {[],'false','false'}
		      %% Line 847
		      <NewWarnVarArgs> when 'true' ->
			  %% Line 848
			  apply 'get_deplist_paths'/7
			      (Tail, NewWarnVarArgs, _cor4, _cor3, _cor2, _cor1, _cor0)
		    end
		%% Line 851
		<{'dep_call',_cor140,_cor141,_cor142,_cor143,_cor144,_cor145,RaceVarMap1}> when 'true' ->
		    %% Line 852
		    case %% Line 853
			 apply 'get_deplist_paths'/7
			     (Tail, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0) of
		      <{DepList,IsPublic,Continue}> when 'true' ->
			  let <_cor101> =
			      %% Line 855
			      apply 'refine_race'/5
				  (Head, _cor5, _cor4, DepList, RaceVarMap1)
			  in  %% Line 855
			      {_cor101,%% Line 856
				       IsPublic,%% Line 856
						Continue}
		      ( <_cor100> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor100})
			-| ['compiler_generated'] )
		    end
		( <_cor102> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor102})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor103> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor103})
	    -| ['compiler_generated'] )
	end
'handle_case'/7 =
    %% Line 860
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 862
	case _cor6 of
	  %% Line 863
	  <[]> when 'true' ->
	      {[],[],'false','true'}
	  %% Line 864
	  <[Head|Tail]> when 'true' ->
	      %% Line 865
	      case Head of
		%% Line 866
		<{'end_clause',_cor25,_cor26,_cor27}> when 'true' ->
		    %% Line 867
		    case %% Line 868
			 apply 'do_clause'/7
			     (Tail, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0) of
		      <{RestRaceList,DepList1,IsPublic1,Continue1}> when 'true' ->
			  %% Line 870
			  case %% Line 871
			       apply 'handle_case'/7
				   (RestRaceList, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0) of
			    <{RetRaceList,DepList2,IsPublic2,Continue2}> when 'true' ->
				let <_cor15> =
				    %% Line 873
				    call 'erlang':'++'
					(DepList1, DepList2)
				in  let <_cor14> =
					%% Line 873
					( case IsPublic1 of
					    ( <( 'true'
						 -| ['compiler_generated'] )> when 'true' ->
						  'true'
					      -| ['compiler_generated'] )
					    ( <( 'false'
						 -| ['compiler_generated'] )> when 'true' ->
						  IsPublic2
					      -| ['compiler_generated'] )
					    ( <_cor12> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {( 'badarg'
							      -| ['compiler_generated'] ),_cor12}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    in  let <_cor11> =
					    %% Line 874
					    ( case Continue1 of
						( <( 'true'
						     -| ['compiler_generated'] )> when 'true' ->
						      'true'
						  -| ['compiler_generated'] )
						( <( 'false'
						     -| ['compiler_generated'] )> when 'true' ->
						      Continue2
						  -| ['compiler_generated'] )
						( <_cor9> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {( 'badarg'
								  -| ['compiler_generated'] ),_cor9}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					in  %% Line 873
					    {RetRaceList,_cor15,_cor14,_cor11}
			    ( <_cor8> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor8})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor7> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor7})
			-| ['compiler_generated'] )
		    end
		%% Line 875
		<'beg_case'> when 'true' ->
		    {Tail,[],'false','false'}
		( <_cor16> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor16})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor17> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor17})
	    -| ['compiler_generated'] )
	end
'do_clause'/7 =
    %% Line 879
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 882
	    apply 'fixup_case_path'/2
		(_cor6, 0)
	in  %% Line 881
	    case %% Line 882
		 apply 'get_deplist_paths'/7
		     (_cor7, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0) of
	      <{DepList,IsPublic,Continue}> when 'true' ->
		  let <_cor9> =
		      %% Line 885
		      apply 'fixup_case_rest_paths'/2
			  (_cor6, 0)
		  in  %% Line 885
		      {_cor9,DepList,IsPublic,Continue}
	      ( <_cor8> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor8})
		-| ['compiler_generated'] )
	    end
'fixup_case_path'/2 =
    %% Line 887
    fun (_cor1,_cor0) ->
	%% Line 888
	case _cor1 of
	  %% Line 889
	  <[]> when 'true' ->
	      []
	  %% Line 890
	  <[Head|Tail]> when 'true' ->
	      let <NewNestingLevel,Return> =
		  %% Line 892
		  case Head of
		    %% Line 893
		    <'beg_case'> when 'true' ->
			let <_cor2> =
			    call 'erlang':'-'
				(_cor0, 1)
			in  <_cor2,'false'>
		    %% Line 894
		    <{'end_case',_cor13}> when 'true' ->
			let <_cor3> =
			    call 'erlang':'+'
				(_cor0, 1)
			in  <_cor3,'false'>
		    %% Line 895
		    <{'beg_clause',_cor14,_cor15,_cor16}> when 'true' ->
			%% Line 896
			case <> of
			  %% Line 897
			  <>
			      when call 'erlang':'=:='
				    (_cor0,
				     0) ->
			      <_cor0,'true'>
			  %% Line 898
			  <> when 'true' ->
			      <_cor0,'false'>
			end
		    %% Line 900
		    <_X_Other> when 'true' ->
			<_cor0,'false'>
		  end
	      in  %% Line 902
		  case Return of
		    %% Line 903
		    <'true'> when 'true' ->
			[]
		    %% Line 904
		    <'false'> when 'true' ->
			let <_cor8> =
			    apply 'fixup_case_path'/2
				(Tail, NewNestingLevel)
			in  [Head|_cor8]
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor9})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor10> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor10})
	    -| ['compiler_generated'] )
	end
'fixup_before_case_path'/1 =
    %% Line 909
    fun (_cor0) ->
	%% Line 910
	case _cor0 of
	  %% Line 911
	  <[]> when 'true' ->
	      []
	  %% Line 912
	  <[Head|Tail]> when 'true' ->
	      %% Line 913
	      case Head of
		%% Line 914
		<{'end_clause',_cor5,_cor6,_cor7}> when 'true' ->
		    let <_cor1> =
			%% Line 915
			apply 'fixup_case_rest_paths'/2
			    (Tail, 0)
		    in  %% Line 915
			apply 'fixup_before_case_path'/1
			    (_cor1)
		%% Line 916
		<'beg_case'> when 'true' ->
		    Tail
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'fixup_case_rest_paths'/2 =
    %% Line 920
    fun (_cor1,_cor0) ->
	%% Line 921
	case _cor1 of
	  %% Line 922
	  <[]> when 'true' ->
	      []
	  %% Line 923
	  <[Head|Tail]> when 'true' ->
	      let <NewNestingLevel,Return> =
		  %% Line 925
		  case Head of
		    %% Line 926
		    <'beg_case'> when 'true' ->
			let <_cor2> =
			    call 'erlang':'-'
				(_cor0, 1)
			in  <_cor2,'false'>
		    %% Line 927
		    <{'end_case',_cor12}> when 'true' ->
			let <_cor3> =
			    call 'erlang':'+'
				(_cor0, 1)
			in  <_cor3,'false'>
		    %% Line 928
		    <{'beg_clause',_cor13,_cor14,_cor15}> when 'true' ->
			%% Line 929
			case <> of
			  %% Line 930
			  <>
			      when call 'erlang':'=:='
				    (_cor0,
				     0) ->
			      <_cor0,'true'>
			  %% Line 931
			  <> when 'true' ->
			      <_cor0,'false'>
			end
		    %% Line 933
		    <_X_Other> when 'true' ->
			<_cor0,'false'>
		  end
	      in  %% Line 935
		  case Return of
		    %% Line 936
		    <'true'> when 'true' ->
			Tail
		    %% Line 937
		    <'false'> when 'true' ->
			apply 'fixup_case_rest_paths'/2
			    (Tail, NewNestingLevel)
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor8})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor9> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor9})
	    -| ['compiler_generated'] )
	end
'fixup_race_forward_helper'/20 =
    %% Line 941
    fun (_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13,_cor12,_cor11,_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 947
	case _cor15 of
	  %% Line 948
	  <[]> when 'true' ->
	      %% Line 953
	      case %% Line 954
		   apply 'remove_clause'/4
		       (_cor12, %% Line 955
				{'curr_fun','undefined',_cor19,_cor18,_cor6,_cor4,_cor5,_cor7}, _cor13, _cor3) of
		<{NewRaceList,{'curr_fun',_cor65,NewCurrFun,NewCurrFunLabel,NewFunDefVars,NewFunArgTypes,NewFunCallVars,NewRaceVarMap},NewCode,NewNestingLevel}> when 'true' ->
		    %% Line 959
		    {NewCurrFun,NewCurrFunLabel,_cor14,NewCode,NewRaceList,%% Line 960
									   NewRaceVarMap,%% Line 960
											 NewFunDefVars,%% Line 960
												       NewFunCallVars,%% Line 960
														      NewFunArgTypes,%% Line 961
																     NewNestingLevel}
		( <_cor20> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor20})
		  -| ['compiler_generated'] )
	      end
	  %% Line 962
	  <[Head|Tail]> when 'true' ->
	      %% Line 963
	      case Head of
		%% Line 964
		<{_cor66,_cor67}>
		    when let <_cor70> =
			  call 'erlang':'=:='
			      (_cor66, _cor11)
		      in  let <_cor68> =
			      call 'erlang':'=:='
				  (_cor67, _cor11)
			  in  let <_cor21> =
				  call 'erlang':'=:='
				      (_cor19, _cor11)
			      in  let <_cor22> =
				      call 'erlang':'=:='
					  (_cor17, _cor11)
				  in  let <_cor69> =
					  call 'erlang':'and'
					      (_cor21, _cor22)
				      in  let <_cor71> =
					      call 'erlang':'and'
						  (_cor68, _cor69)
					  in  call 'erlang':'and'
						  (_cor70, _cor71) ->
		    let <NewCallsToAnalyze> =
			%% Line 965
			call 'lists':'delete'
			    (Head, _cor14)
		    in  let <NewRaceVarMap> =
			    %% Line 967
			    apply 'race_var_map'/4
				(_cor2, _cor10, _cor7, 'bind')
			in  let <_cor25> =
				%% Line 970
				call 'erlang':'++'
				    (_cor1, %% Line 971
					    [{'curr_fun','out',_cor11,_cor18,_cor6,_cor4,_cor5,_cor7}|%% Line 974
												      []])
			    in  let <RetC> =
				    %% Line 969
				    apply 'fixup_all_calls'/7
					(_cor11, _cor11, _cor16, _cor2, _cor25, _cor13, _cor7)
				in  let <_cor29> =
					%% Line 978
					call 'erlang':'++'
					    (_cor1, %% Line 979
						    [{'curr_fun','out',_cor11,_cor18,_cor2,_cor9,_cor10,%% Line 980
													NewRaceVarMap}|%% Line 982
														       []])
				    in  let <_cor27> =
					    %% Line 987
					    call 'lists':'reverse'
						(_cor0)
					in  let <_cor28> =
						%% Line 983
						[{'curr_fun','in',_cor17,_cor16,_cor2,_cor9,_cor10,%% Line 984
												   NewRaceVarMap}|%% Line 987
														  call 'erlang':'++'
														      (_cor27, %% Line 988
															       RetC)]
					    in  let <NewCode> =
						    %% Line 977
						    apply 'fixup_all_calls'/7
							(_cor11, _cor11, _cor16, _cor2, _cor29, _cor28, %% Line 988
													NewRaceVarMap)
						in  %% Line 989
						    {_cor11,_cor16,NewCallsToAnalyze,NewCode,_cor12,%% Line 990
												    NewRaceVarMap,_cor2,_cor10,_cor9,_cor3}
		%% Line 991
		<{_cor72,_cor73}>
		    when let <_cor74> =
			  call 'erlang':'=:='
			      (_cor72, _cor19)
		      in  let <_cor75> =
			      call 'erlang':'=:='
				  (_cor73, _cor17)
			  in  call 'erlang':'and'
				  (_cor74, _cor75) ->
		    let <NewCallsToAnalyze> =
			%% Line 992
			call 'lists':'delete'
			    (Head, _cor14)
		    in  let <NewRaceVarMap> =
			    %% Line 993
			    apply 'race_var_map'/4
				(_cor2, _cor10, _cor7, 'bind')
			in  let <_cor37> =
				%% Line 995
				case _cor17 of
				  %% Line 996
				  <_cor76>
				      when call 'erlang':'=:='
					    (_cor17,
					     _cor11) ->
				      let <_cor33> =
					  %% Line 998
					  call 'lists':'reverse'
					      (_cor0)
				      in  let <_cor34> =
					      %% Line 998
					      call 'erlang':'++'
						  (_cor33, %% Line 999
							   [{'curr_fun','out',_cor19,_cor18,_cor6,_cor4,_cor5,_cor7}|%% Line 1002
														     []])
					  in  %% Line 997
					      apply 'fixup_all_calls'/7
						  (_cor19, _cor17, _cor16, _cor2, _cor34, _cor13, _cor7)
				  %% Line 1004
				  <_X_Other1> when 'true' ->
				      let <_cor35> =
					  %% Line 1006
					  call 'erlang':'++'
					      (_cor1, %% Line 1007
						      [{'curr_fun','out',_cor19,_cor18,_cor6,_cor4,_cor5,_cor7}|%% Line 1010
														[]])
				      in  %% Line 1005
					  apply 'fixup_all_calls'/7
					      (_cor19, _cor17, _cor16, _cor2, _cor35, _cor13, _cor7)
				end
			    in  let <_cor41> =
				    %% Line 1014
				    case _cor17 of
				      %% Line 1015
				      <_cor77>
					  when call 'erlang':'=:='
						(_cor17,
						 _cor11) ->
					  let <_cor39> =
					      %% Line 1020
					      call 'lists':'reverse'
						  (_cor0)
					  in  %% Line 1016
					      [{'curr_fun','in',_cor17,_cor16,_cor2,_cor9,_cor10,%% Line 1017
												 NewRaceVarMap}|%% Line 1020
														call 'erlang':'++'
														    (_cor39, _cor37)]
				      %% Line 1021
				      <_cor78> when 'true' ->
					  %% Line 1022
					  [{'curr_fun','in',_cor17,_cor16,_cor2,_cor9,_cor10,%% Line 1023
											     NewRaceVarMap}|%% Line 1025
													    call 'erlang':'++'
														(_cor1, _cor37)]
				    end
				in  %% Line 1028
				    {_cor17,_cor16,NewCallsToAnalyze,_cor41,_cor12,NewRaceVarMap,_cor2,_cor10,_cor9,_cor3}
		%% Line 1030
		<{_X_TupleA,_X_TupleB}> when 'true' ->
		    %% Line 1031
		    apply 'fixup_race_forward_helper'/20
			(_cor19, _cor18, _cor17, _cor16, %% Line 1032
							 Tail, _cor14, _cor13, _cor12, _cor11, _cor10, _cor9, _cor8, _cor7, _cor6, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
		( <_cor43> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor43})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor44> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor44})
	    -| ['compiler_generated'] )
	end
'fixup_race_backward'/5 =
    %% Line 1044
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1045
	case <> of
	  %% Line 1046
	  <>
	      when call 'erlang':'=:='
		    (_cor0,
		     0) ->
	      _cor1
	  %% Line 1047
	  <> when 'true' ->
	      %% Line 1048
	      case _cor3 of
		%% Line 1049
		<[]> when 'true' ->
		    let <_cor7> =
			%% Line 1050
			( case <> of
			    ( <>
				  when call 'erlang':'is_integer'
					(_cor4) ->
				  'true'
			      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  call 'lists':'member'
				      (_cor4, _cor1)
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    in  %% Line 1050
			case _cor7 of
			  %% Line 1051
			  <'true'> when 'true' ->
			      _cor1
			  %% Line 1052
			  <'false'> when 'true' ->
			      [_cor4|_cor1]
			  ( <_cor8> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor8})
			    -| ['compiler_generated'] )
			end
		%% Line 1054
		<[Head|Tail]> when 'true' ->
		    %% Line 1055
		    case Head of
		      <{Parent,TupleB}> when 'true' ->
			  %% Line 1056
			  case <> of
			    %% Line 1057
			    <>
				when call 'erlang':'=:='
				      (TupleB,
				       _cor4) ->
				let <NewCallsToAnalyze> =
				    %% Line 1058
				    call 'lists':'delete'
					(Head, _cor2)
				in  let <_cor11> =
					%% Line 1061
					call 'erlang':'-'
					    (_cor0, 1)
				    in  let <NewParents> =
					    %% Line 1060
					    apply 'fixup_race_backward'/5
						(Parent, NewCallsToAnalyze, %% Line 1061
									    NewCallsToAnalyze, _cor1, _cor11)
					in  %% Line 1062
					    apply 'fixup_race_backward'/5
						(_cor4, Tail, NewCallsToAnalyze, NewParents, _cor0)
			    %% Line 1064
			    <> when 'true' ->
				%% Line 1065
				apply 'fixup_race_backward'/5
				    (_cor4, Tail, _cor2, _cor1, _cor0)
			  end
		      ( <_cor9> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor9})
			-| ['compiler_generated'] )
		    end
		( <_cor14> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor14})
		  -| ['compiler_generated'] )
	      end
	end
'are_bound_labels'/3 =
    %% Line 1077
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1078
	case call 'dict':'find'
		 (_cor2, _cor0) of
	  %% Line 1079
	  <'error'> when 'true' ->
	      'false'
	  %% Line 1080
	  <{'ok',Labels}> when 'true' ->
	      %% Line 1081
	      ( case call 'lists':'member'
			 (_cor1, Labels) of
		  ( <( 'true'
		       -| ['compiler_generated'] )> when 'true' ->
			'true'
		    -| ['compiler_generated'] )
		  ( <( 'false'
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 1082
			apply 'are_bound_labels_helper'/4
			    (Labels, _cor2, _cor1, _cor0)
		    -| ['compiler_generated'] )
		  ( <_cor3> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),_cor3}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'are_bound_labels_helper'/4 =
    %% Line 1085
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1086
	case call 'dict':'size'
		 (_cor0) of
	  %% Line 1087
	  <0> when 'true' ->
	      'false'
	  %% Line 1088
	  <_cor13> when 'true' ->
	      %% Line 1089
	      case _cor3 of
		%% Line 1090
		<[]> when 'true' ->
		    'false'
		%% Line 1091
		<[Head|Tail]> when 'true' ->
		    let <NewRaceVarMap> =
			%% Line 1092
			call 'dict':'erase'
			    (_cor2, _cor0)
		    in  %% Line 1093
			( case apply 'are_bound_labels'/3
				   (Head, _cor1, NewRaceVarMap) of
			    ( <( 'true'
				 -| ['compiler_generated'] )> when 'true' ->
				  'true'
			      -| ['compiler_generated'] )
			    ( <( 'false'
				 -| ['compiler_generated'] )> when 'true' ->
				  %% Line 1094
				  apply 'are_bound_labels_helper'/4
				      (Tail, Head, _cor1, NewRaceVarMap)
			      -| ['compiler_generated'] )
			    ( <_cor5> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {( 'badarg'
					      -| ['compiler_generated'] ),_cor5}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	end
'are_bound_vars'/3 =
    %% Line 1098
    fun (_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 1099
	    ( case <> of
		( <>
		      when call 'erlang':'is_list'
			    (_cor2) ->
		      call 'erlang':'is_list'
			  (_cor1)
		  -| ['compiler_generated'] )
		( <> when 'true' ->
		      'false'
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
	in  %% Line 1099
	    case _cor5 of
	      %% Line 1100
	      <'true'> when 'true' ->
		  %% Line 1101
		  case _cor2 of
		    %% Line 1102
		    <[]> when 'true' ->
			'false'
		    %% Line 1103
		    <[AHead|ATail]> when 'true' ->
			%% Line 1104
			case _cor1 of
			  %% Line 1105
			  <[]> when 'true' ->
			      'false'
			  %% Line 1106
			  <[PHead|PTail]> when 'true' ->
			      %% Line 1107
			      ( case apply 'are_bound_vars'/3
					 (AHead, PHead, _cor0) of
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					%% Line 1108
					apply 'are_bound_vars'/3
					    (ATail, PTail, _cor0)
				    -| ['compiler_generated'] )
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					'false'
				    -| ['compiler_generated'] )
				  ( <_cor6> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {( 'badarg'
						    -| ['compiler_generated'] ),_cor6}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  ( <_cor8> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor8})
			    -| ['compiler_generated'] )
			end
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor9})
		      -| ['compiler_generated'] )
		  end
	      %% Line 1111
	      <'false'> when 'true' ->
		  let <NewVars1,NewVars2,IsList> =
		      %% Line 1113
		      case <> of
			%% Line 1114
			<>
			    when call 'erlang':'is_list'
				  (_cor2) ->
			    %% Line 1115
			    case _cor2 of
			      %% Line 1116
			      <[Var1|[]]> when 'true' ->
				  <Var1,_cor1,'true'>
			      %% Line 1117
			      <_X_Thing> when 'true' ->
				  <_cor2,_cor1,'false'>
			    end
			%% Line 1119
			<> when 'true' ->
			    %% Line 1120
			    case <> of
			      %% Line 1121
			      <>
				  when call 'erlang':'is_list'
					(_cor1) ->
				  %% Line 1122
				  case _cor1 of
				    %% Line 1123
				    <[Var2|[]]> when 'true' ->
					<_cor2,Var2,'true'>
				    %% Line 1124
				    <_X_Thing> when 'true' ->
					<_cor2,_cor1,'false'>
				  end
			      %% Line 1126
			      <> when 'true' ->
				  <_cor2,_cor1,'true'>
			    end
		      end
		  in  %% Line 1129
		      case IsList of
			%% Line 1130
			<'true'> when 'true' ->
			    %% Line 1131
			    case call 'cerl':'type'
				     (NewVars1) of
			      %% Line 1132
			      <'var'> when 'true' ->
				  %% Line 1133
				  case call 'cerl':'type'
					   (NewVars2) of
				    %% Line 1134
				    <'var'> when 'true' ->
					let <ALabel> =
					    %% Line 1135
					    call 'cerl_trees':'get_label'
						(NewVars1)
					in  let <PLabel> =
						%% Line 1136
						call 'cerl_trees':'get_label'
						    (NewVars2)
					    in  %% Line 1137
						( case apply 'are_bound_labels'/3
							   (ALabel, PLabel, _cor0) of
						    ( <( 'true'
							 -| ['compiler_generated'] )> when 'true' ->
							  'true'
						      -| ['compiler_generated'] )
						    ( <( 'false'
							 -| ['compiler_generated'] )> when 'true' ->
							  %% Line 1138
							  apply 'are_bound_labels'/3
							      (PLabel, ALabel, _cor0)
						      -| ['compiler_generated'] )
						    ( <_cor18> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {( 'badarg'
								      -| ['compiler_generated'] ),_cor18}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
				    %% Line 1139
				    <'alias'> when 'true' ->
					let <_cor20> =
					    %% Line 1140
					    call 'cerl':'alias_var'
						(NewVars2)
					in  %% Line 1140
					    apply 'are_bound_vars'/3
						(NewVars1, _cor20, _cor0)
				    %% Line 1142
				    <'values'> when 'true' ->
					let <_cor21> =
					    %% Line 1143
					    call 'cerl':'values_es'
						(NewVars2)
					in  %% Line 1143
					    apply 'are_bound_vars'/3
						(NewVars1, _cor21, _cor0)
				    %% Line 1145
				    <_X_Other> when 'true' ->
					'false'
				  end
			      %% Line 1147
			      <'tuple'> when 'true' ->
				  %% Line 1148
				  case call 'cerl':'type'
					   (NewVars2) of
				    %% Line 1149
				    <'tuple'> when 'true' ->
					let <_cor24> =
					    %% Line 1150
					    call 'cerl':'tuple_es'
						(NewVars1)
					in  let <_cor23> =
						%% Line 1151
						call 'cerl':'tuple_es'
						    (NewVars2)
					    in  %% Line 1150
						apply 'are_bound_vars'/3
						    (_cor24, _cor23, _cor0)
				    %% Line 1152
				    <'alias'> when 'true' ->
					let <_cor25> =
					    %% Line 1153
					    call 'cerl':'alias_var'
						(NewVars2)
					in  %% Line 1153
					    apply 'are_bound_vars'/3
						(NewVars1, _cor25, _cor0)
				    %% Line 1155
				    <'values'> when 'true' ->
					let <_cor26> =
					    %% Line 1156
					    call 'cerl':'values_es'
						(NewVars2)
					in  %% Line 1156
					    apply 'are_bound_vars'/3
						(NewVars1, _cor26, _cor0)
				    %% Line 1158
				    <_X_Other> when 'true' ->
					'false'
				  end
			      %% Line 1160
			      <'cons'> when 'true' ->
				  %% Line 1161
				  case call 'cerl':'type'
					   (NewVars2) of
				    %% Line 1162
				    <'cons'> when 'true' ->
					let <_cor30> =
					    %% Line 1163
					    call 'cerl':'cons_hd'
						(NewVars1)
					in  let <_cor29> =
						%% Line 1164
						call 'cerl':'cons_hd'
						    (NewVars2)
					    in  %% Line 1165
						( case apply 'are_bound_vars'/3
							   (_cor30, _cor29, _cor0) of
						    ( <( 'true'
							 -| ['compiler_generated'] )> when 'true' ->
							  let <_cor32> =
							      %% Line 1166
							      call 'cerl':'cons_tl'
								  (NewVars1)
							  in  let <_cor31> =
								  %% Line 1167
								  call 'cerl':'cons_tl'
								      (NewVars2)
							      in  %% Line 1166
								  apply 'are_bound_vars'/3
								      (_cor32, _cor31, _cor0)
						      -| ['compiler_generated'] )
						    ( <( 'false'
							 -| ['compiler_generated'] )> when 'true' ->
							  'false'
						      -| ['compiler_generated'] )
						    ( <_cor28> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {( 'badarg'
								      -| ['compiler_generated'] ),_cor28}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
				    %% Line 1168
				    <'alias'> when 'true' ->
					let <_cor34> =
					    %% Line 1169
					    call 'cerl':'alias_var'
						(NewVars2)
					in  %% Line 1169
					    apply 'are_bound_vars'/3
						(NewVars1, _cor34, _cor0)
				    %% Line 1171
				    <'values'> when 'true' ->
					let <_cor35> =
					    %% Line 1172
					    call 'cerl':'values_es'
						(NewVars2)
					in  %% Line 1172
					    apply 'are_bound_vars'/3
						(NewVars1, _cor35, _cor0)
				    %% Line 1174
				    <_X_Other> when 'true' ->
					'false'
				  end
			      %% Line 1176
			      <'alias'> when 'true' ->
				  %% Line 1177
				  case call 'cerl':'type'
					   (NewVars2) of
				    %% Line 1178
				    <'alias'> when 'true' ->
					let <_cor38> =
					    %% Line 1179
					    call 'cerl':'alias_var'
						(NewVars1)
					in  let <_cor37> =
						%% Line 1180
						call 'cerl':'alias_var'
						    (NewVars2)
					    in  %% Line 1179
						apply 'are_bound_vars'/3
						    (_cor38, _cor37, _cor0)
				    %% Line 1181
				    <_X_Other> when 'true' ->
					let <_cor39> =
					    %% Line 1182
					    call 'cerl':'alias_var'
						(NewVars1)
					in  %% Line 1182
					    apply 'are_bound_vars'/3
						(_cor39, %% Line 1183
							 NewVars2, _cor0)
				  end
			      %% Line 1185
			      <'values'> when 'true' ->
				  %% Line 1186
				  case call 'cerl':'type'
					   (NewVars2) of
				    %% Line 1187
				    <'values'> when 'true' ->
					let <_cor42> =
					    %% Line 1188
					    call 'cerl':'values_es'
						(NewVars1)
					in  let <_cor41> =
						%% Line 1189
						call 'cerl':'values_es'
						    (NewVars2)
					    in  %% Line 1188
						apply 'are_bound_vars'/3
						    (_cor42, _cor41, _cor0)
				    %% Line 1190
				    <_X_Other> when 'true' ->
					let <_cor43> =
					    %% Line 1191
					    call 'cerl':'values_es'
						(NewVars1)
					in  %% Line 1191
					    apply 'are_bound_vars'/3
						(_cor43, %% Line 1192
							 NewVars2, _cor0)
				  end
			      %% Line 1194
			      <_X_Other> when 'true' ->
				  'false'
			    end
			%% Line 1196
			<'false'> when 'true' ->
			    'false'
			( <_cor46> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor46})
			  -| ['compiler_generated'] )
		      end
	      ( <_cor47> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor47})
		-| ['compiler_generated'] )
	    end
'callgraph__renew_tables'/2 =
    %% Line 1200
    fun (_cor1,_cor0) ->
	%% Line 1201
	case _cor1 of
	  %% Line 1202
	  <{'named',NameLabel,Names}> when 'true' ->
	      let <_cor3> =
		  %% Line 1204
		  case NameLabel of
		    %% Line 1205
		    <'no_label'> when 'true' ->
			[]
		    %% Line 1206
		    <_X_Other> when 'true' ->
			[NameLabel|[]]
		  end
	      in  let <NamesToAdd> =
		      %% Line 1208
		      apply 'filter_named_tables'/1
			  (Names)
		  in  let <PTables> =
			  %% Line 1209
			  call 'dialyzer_callgraph':'get_public_tables'
			      (_cor0)
		      in  let <NTables> =
			      %% Line 1210
			      call 'dialyzer_callgraph':'get_named_tables'
				  (_cor0)
			  in  let <_cor10> =
				  %% Line 1212
				  call 'erlang':'++'
				      (_cor3, PTables)
			      in  let <_cor11> =
				      %% Line 1212
				      call 'lists':'usort'
					  (_cor10)
				  in  let <_cor8> =
					  %% Line 1214
					  call 'erlang':'++'
					      (NamesToAdd, NTables)
				      in  let <_cor9> =
					      %% Line 1213
					      call 'dialyzer_callgraph':'put_named_tables'
						  (_cor8, _cor0)
					  in  %% Line 1211
					      call 'dialyzer_callgraph':'put_public_tables'
						  (_cor11, _cor9)
	  %% Line 1215
	  <_X_Other> when 'true' ->
	      _cor0
	end
'cleanup_clause_code'/4 =
    %% Line 1219
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <CurrTuple = {'curr_fun',_cor19,CurrFun,_cor20,_cor21,_cor22,_cor23,_cor24},Code,%% Line 1220
											   NestingLevel,%% Line 1220
													LocalNestingLevel> when 'true' ->
	      %% Line 1221
	      case Code of
		%% Line 1222
		<[]> when 'true' ->
		    {CurrTuple,[]}
		%% Line 1223
		<[Head|Tail]> when 'true' ->
		    let <NewLocalNestingLevel,NewNestingLevel,NewCurrTuple,Return> =
			%% Line 1225
			case Head of
			  %% Line 1226
			  <'beg_case'> when 'true' ->
			      let <_cor4> =
				  %% Line 1227
				  call 'erlang':'+'
				      (NestingLevel, 1)
			      in  %% Line 1227
				  <LocalNestingLevel,_cor4,CurrTuple,'false'>
			  %% Line 1228
			  <{'end_case',_cor25}> when 'true' ->
			      let <_cor5> =
				  %% Line 1229
				  call 'erlang':'-'
				      (NestingLevel, 1)
			      in  %% Line 1229
				  <LocalNestingLevel,_cor5,CurrTuple,'false'>
			  %% Line 1230
			  <{'end_clause',_cor26,_cor27,_cor28}> when 'true' ->
			      %% Line 1231
			      case <> of
				%% Line 1232
				<>
				    when call 'erlang':'=:='
					  (NestingLevel,
					   0) ->
				    %% Line 1233
				    <LocalNestingLevel,NestingLevel,CurrTuple,'true'>
				%% Line 1234
				<> when 'true' ->
				    %% Line 1235
				    <LocalNestingLevel,NestingLevel,CurrTuple,'false'>
			      end
			  %% Line 1237
			  <{'fun_call',_cor29,_cor30,_cor31,_cor32}>
			      when call 'erlang':'=:='
				    (_cor29,
				     CurrFun) ->
			      let <_cor7> =
				  %% Line 1238
				  call 'erlang':'-'
				      (LocalNestingLevel, 1)
			      in  <_cor7,%% Line 1238
					 NestingLevel,%% Line 1238
						      CurrTuple,%% Line 1238
								'false'>
			  %% Line 1239
			  <{'curr_fun','in',_cor33,_cor34,_cor35,_cor36,_cor37,_cor38}> when 'true' ->
			      let <_cor8> =
				  %% Line 1240
				  call 'erlang':'-'
				      (LocalNestingLevel, 1)
			      in  <_cor8,%% Line 1240
					 NestingLevel,%% Line 1240
						      Head,%% Line 1240
							   'false'>
			  %% Line 1241
			  <{'curr_fun','out',_cor39,_cor40,_cor41,_cor42,_cor43,_cor44}> when 'true' ->
			      let <_cor9> =
				  %% Line 1242
				  call 'erlang':'+'
				      (LocalNestingLevel, 1)
			      in  <_cor9,%% Line 1242
					 NestingLevel,%% Line 1242
						      Head,%% Line 1242
							   'false'>
			  %% Line 1243
			  <Other>
			      when call 'erlang':'=/='
				    (Head,
				     {'fun_call','undefined','undefined','undefined','undefined'}) ->
			      %% Line 1244
			      <LocalNestingLevel,NestingLevel,CurrTuple,'false'>
			  ( <_cor10> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor10})
			    -| ['compiler_generated'] )
			end
		    in  %% Line 1246
			case Return of
			  %% Line 1247
			  <'true'> when 'true' ->
			      {NewCurrTuple,Tail}
			  %% Line 1248
			  <'false'> when 'true' ->
			      %% Line 1249
			      apply 'cleanup_clause_code'/4
				  (NewCurrTuple, Tail, NewNestingLevel, %% Line 1250
									NewLocalNestingLevel)
			  ( <_cor13> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor13})
			    -| ['compiler_generated'] )
			end
		( <_cor14> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor14})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'cleanup_clause_code',4}}] )
	    -| ['compiler_generated'] )
	end
'cleanup_dep_calls'/1 =
    %% Line 1254
    fun (_cor0) ->
	%% Line 1255
	case _cor0 of
	  %% Line 1256
	  <[]> when 'true' ->
	      []
	  %% Line 1257
	  <[{'dep_call',CallName,_cor4,ArgTypes,%% Line 1258
						Vars,%% Line 1258
						     State,%% Line 1258
							   FileLine,_cor5}|%% Line 1258
									   T]> when 'true' ->
	      let <_cor1> =
		  %% Line 1261
		  apply 'cleanup_dep_calls'/1
		      (T)
	      in  %% Line 1259
		  [{'dep_call',CallName,'undefined',ArgTypes,%% Line 1260
							     Vars,%% Line 1260
								  State,%% Line 1260
									FileLine,'undefined'}|_cor1]
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'cleanup_race_code'/1 =
    %% Line 1264
    fun (_cor0) ->
	let <Callgraph> =
	    %% Line 1265
	    call 'dialyzer_dataflow':'state__get_callgraph'
		(_cor0)
	in  let <_cor2> =
		%% Line 1267
		call 'dialyzer_callgraph':'race_code_new'
		    (Callgraph)
	    in  %% Line 1266
		call 'dialyzer_dataflow':'state__put_callgraph'
		    (_cor2, _cor0)
'filter_named_tables'/1 =
    %% Line 1269
    fun (_cor0) ->
	%% Line 1270
	case _cor0 of
	  %% Line 1271
	  <[]> when 'true' ->
	      []
	  %% Line 1272
	  <[Head|Tail]> when 'true' ->
	      let <_cor2> =
		  %% Line 1274
		  case call 'string':'rstr'
			   (Head, [40|[41]]) of
		    %% Line 1275
		    <0> when 'true' ->
			[Head|[]]
		    %% Line 1276
		    <_X_Other> when 'true' ->
			[]
		  end
	      in  let <_cor4> =
		      %% Line 1278
		      apply 'filter_named_tables'/1
			  (Tail)
		  in  %% Line 1278
		      call 'erlang':'++'
			  (_cor2, _cor4)
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'filter_parents'/3 =
    %% Line 1281
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1282
	case _cor2 of
	  %% Line 1283
	  <[]> when 'true' ->
	      _cor1
	  %% Line 1284
	  <[Head|Tail]> when 'true' ->
	      let <NewParents1> =
		  %% Line 1285
		  apply 'filter_parents_helper1'/4
		      (Head, Tail, _cor1, _cor0)
	      in  %% Line 1286
		  apply 'filter_parents'/3
		      (Tail, NewParents1, _cor0)
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'filter_parents_helper1'/4 =
    %% Line 1289
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1290
	case _cor2 of
	  %% Line 1291
	  <[]> when 'true' ->
	      _cor1
	  %% Line 1292
	  <[Head|Tail]> when 'true' ->
	      let <NewParents1> =
		  %% Line 1293
		  apply 'filter_parents_helper2'/4
		      (_cor3, Head, _cor1, _cor0)
	      in  %% Line 1294
		  apply 'filter_parents_helper1'/4
		      (_cor3, Tail, NewParents1, _cor0)
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'filter_parents_helper2'/4 =
    %% Line 1297
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1298
	case call 'digraph':'get_path'
		 (_cor0, _cor3, _cor2) of
	  %% Line 1299
	  <'false'> when 'true' ->
	      %% Line 1300
	      case call 'digraph':'get_path'
		       (_cor0, _cor2, _cor3) of
		%% Line 1301
		<'false'> when 'true' ->
		    _cor1
		%% Line 1302
		<_X_Vertices> when 'true' ->
		    call 'erlang':'--'
			(_cor1, [_cor3|[]])
	      end
	  %% Line 1304
	  <_X_Vertices> when 'true' ->
	      call 'erlang':'--'
		  (_cor1, [_cor2|[]])
	end
'find_all_bound_vars'/2 =
    %% Line 1307
    fun (_cor1,_cor0) ->
	%% Line 1308
	case call 'dict':'find'
		 (_cor1, _cor0) of
	  %% Line 1309
	  <'error'> when 'true' ->
	      [_cor1|[]]
	  %% Line 1310
	  <{'ok',Labels}> when 'true' ->
	      let <_cor2> =
		  %% Line 1312
		  apply 'find_all_bound_vars_helper'/3
		      (Labels, _cor1, _cor0)
	      in  let <_cor3> =
		      %% Line 1311
		      call 'erlang':'++'
			  (Labels, _cor2)
		  in  %% Line 1311
		      call 'lists':'usort'
			  (_cor3)
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'find_all_bound_vars_helper'/3 =
    %% Line 1315
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1316
	case call 'dict':'size'
		 (_cor0) of
	  %% Line 1317
	  <0> when 'true' ->
	      []
	  %% Line 1318
	  <_cor11> when 'true' ->
	      %% Line 1319
	      case _cor2 of
		%% Line 1320
		<[]> when 'true' ->
		    []
		%% Line 1321
		<[Head|Tail]> when 'true' ->
		    let <NewRaceVarMap> =
			%% Line 1322
			call 'dict':'erase'
			    (_cor1, _cor0)
		    in  let <_cor5> =
			    %% Line 1323
			    apply 'find_all_bound_vars'/2
				(Head, NewRaceVarMap)
			in  let <_cor4> =
				%% Line 1324
				apply 'find_all_bound_vars_helper'/3
				    (Tail, Head, NewRaceVarMap)
			    in  %% Line 1323
				call 'erlang':'++'
				    (_cor5, _cor4)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	end
'fixup_all_calls'/7 =
    %% Line 1328
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1330
	case _cor1 of
	  %% Line 1331
	  <[]> when 'true' ->
	      []
	  %% Line 1332
	  <[Head|Tail]> when 'true' ->
	      let <_cor12> =
		  %% Line 1334
		  case Head of
		    %% Line 1335
		    <{'fun_call',_cor23,Callee,%% Line 1336
					       FunArgTypes,%% Line 1336
							   FunArgs}>
			when let <_cor24> =
			      call 'erlang':'=:='
				  (_cor23, _cor6)
			  in  let <_cor25> =
				  %% Line 1337
				  try
				      ( case <> of
					  ( <>
						when call 'erlang':'=:='
						      (Callee,
						       _cor5) ->
						'true'
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						call 'erlang':'=:='
						    (Callee, _cor4)
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false'
			      in  call 'erlang':'and'
				      (_cor24, _cor25) ->
			let <RaceVarMap1> =
			    %% Line 1338
			    apply 'race_var_map'/4
				(_cor3, FunArgs, _cor0, 'bind')
			in  %% Line 1339
			    [{'curr_fun','in',_cor5,_cor4,_cor3,%% Line 1341
								FunArgTypes,%% Line 1341
									    FunArgs,%% Line 1340
										    RaceVarMap1}|_cor2]
		    %% Line 1343
		    <_X_Other> when 'true' ->
			[Head|[]]
		  end
	      in  let <RetCode> =
		      %% Line 1346
		      apply 'fixup_all_calls'/7
			  (_cor6, _cor5, _cor4, _cor3, _cor2, %% Line 1347
							      Tail, _cor0)
		  in  %% Line 1348
		      call 'erlang':'++'
			  (_cor12, RetCode)
	  ( <_cor15> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor15})
	    -| ['compiler_generated'] )
	end
'is_last_race'/4 =
    %% Line 1351
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1352
	case _cor1 of
	  %% Line 1353
	  <[]> when 'true' ->
	      'true'
	  %% Line 1354
	  <[Head|Tail]> when 'true' ->
	      %% Line 1355
	      case Head of
		%% Line 1356
		<_cor19>
		    when call 'erlang':'=:='
			  (Head,
			   _cor3) ->
		    'false'
		%% Line 1357
		<{'fun_call',_cor20,Fun,_cor21,_cor22}> when 'true' ->
		    let <_cor6> =
			%% Line 1359
			case <> of
			  %% Line 1360
			  <>
			      when call 'erlang':'is_integer'
				    (Fun) ->
			      %% Line 1361
			      case call 'dialyzer_callgraph':'lookup_name'
				       (Fun, _cor0) of
				%% Line 1362
				<'error'> when 'true' ->
				    Fun
				%% Line 1363
				<{'ok',Name}> when 'true' ->
				    Name
				( <_cor4> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor4})
				  -| ['compiler_generated'] )
			      end
			  %% Line 1365
			  <> when 'true' ->
			      Fun
			end
		    in  let <Digraph> =
			    %% Line 1367
			    call 'dialyzer_callgraph':'get_digraph'
				(_cor0)
			in  let <_cor11> =
				%% Line 1368
				( case <> of
				    ( <>
					  when call 'erlang':'=:='
						(_cor6,
						 _cor2) ->
					  'true'
				      -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  %% Line 1369
					  call 'digraph':'get_path'
					      (Digraph, _cor6, _cor2)
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    in  %% Line 1368
				case _cor11 of
				  %% Line 1370
				  <'false'> when 'true' ->
				      apply 'is_last_race'/4
					  (_cor3, _cor2, Tail, _cor0)
				  %% Line 1371
				  <_X_Vertices> when 'true' ->
				      'false'
				end
		%% Line 1373
		<_X_Other> when 'true' ->
		    apply 'is_last_race'/4
			(_cor3, _cor2, Tail, _cor0)
	      end
	  ( <_cor14> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor14})
	    -| ['compiler_generated'] )
	end
'lists_key_member'/3 =
    %% Line 1377
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Member,List,N>
	      when call 'erlang':'is_integer'
		    (Member) ->
	      %% Line 1378
	      case List of
		%% Line 1379
		<[]> when 'true' ->
		    0
		%% Line 1380
		<[Head|Tail]> when 'true' ->
		    let <NewN> =
			%% Line 1381
			call 'erlang':'+'
			    (N, 1)
		    in  %% Line 1382
			case Head of
			  %% Line 1383
			  <_cor9>
			      when call 'erlang':'=:='
				    (Head,
				     Member) ->
			      NewN
			  %% Line 1384
			  <_X_Other> when 'true' ->
			      apply 'lists_key_member'/3
				  (Member, Tail, NewN)
			end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1387
	  <_X_M,_X_L,_X_N> when 'true' ->
	      %% Line 1388
	      0
	end
'lists_key_member_lists'/2 =
    %% Line 1390
    fun (_cor1,_cor0) ->
	%% Line 1391
	case _cor1 of
	  %% Line 1392
	  <[]> when 'true' ->
	      0
	  %% Line 1393
	  <[Head|Tail]> when 'true' ->
	      %% Line 1394
	      case apply 'lists_key_member'/3
		       (Head, _cor0, 0) of
		%% Line 1395
		<0> when 'true' ->
		    apply 'lists_key_member_lists'/2
			(Tail, _cor0)
		%% Line 1396
		<Other> when 'true' ->
		    Other
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'lists_key_members_lists'/2 =
    %% Line 1400
    fun (_cor1,_cor0) ->
	%% Line 1401
	case _cor1 of
	  %% Line 1402
	  <[]> when 'true' ->
	      []
	  %% Line 1403
	  <[Head|Tail]> when 'true' ->
	      let <_cor3> =
		  %% Line 1405
		  apply 'lists_key_members_lists_helper'/3
		      (Head, _cor0, 1)
	      in  let <_cor2> =
		      %% Line 1406
		      apply 'lists_key_members_lists'/2
			  (Tail, _cor0)
		  in  let <_cor4> =
			  %% Line 1405
			  call 'erlang':'++'
			      (_cor3, _cor2)
		      in  %% Line 1404
			  call 'lists':'usort'
			      (_cor4)
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'lists_key_members_lists_helper'/3 =
    %% Line 1409
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Elem,List,N>
	      when call 'erlang':'is_integer'
		    (Elem) ->
	      %% Line 1410
	      case List of
		%% Line 1411
		<[]> when 'true' ->
		    []
		%% Line 1412
		<[Head|Tail]> when 'true' ->
		    let <_cor4> =
			%% Line 1414
			case <> of
			  %% Line 1415
			  <>
			      when call 'erlang':'=:='
				    (Head,
				     Elem) ->
			      [N|[]]
			  %% Line 1416
			  <> when 'true' ->
			      []
			end
		    in  let <_cor6> =
			    %% Line 1418
			    call 'erlang':'+'
				(N, 1)
			in  let <_cor7> =
				%% Line 1418
				apply 'lists_key_members_lists_helper'/3
				    (Elem, Tail, _cor6)
			    in  %% Line 1418
				call 'erlang':'++'
				    (_cor4, _cor7)
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1420
	  <_X_Elem,_X_List,_X_N> when 'true' ->
	      %% Line 1421
	      [0]
	end
'lists_key_replace'/3 =
    %% Line 1423
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1424
	    call 'erlang':'-'
		(_cor2, 1)
	in  %% Line 1424
	    case call 'lists':'split'
		     (_cor3, _cor1) of
	      <{Before,[_cor8|After]}> when 'true' ->
		  %% Line 1425
		  call 'erlang':'++'
		      (Before, [_cor0|After])
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor4})
		-| ['compiler_generated'] )
	    end
'lists_get'/2 =
    %% Line 1427
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,_X_List> when 'true' ->
	      'no_label'
	  %% Line 1428
	  <N,List> when 'true' ->
	      call 'lists':'nth'
		  (N, List)
	end
'refine_race'/5 =
    %% Line 1430
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1431
	case _cor2 of
	  %% Line 1432
	  <WarnWhereis>
	      when try
		    ( case <> of
			( <>
			      when call 'erlang':'=:='
				    (_cor2,
				     'warn_whereis_register') ->
			      'true'
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      %% Line 1433
			      call 'erlang':'=:='
				  (_cor2, 'warn_whereis_unregister')
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1434
	      case _cor4 of
		%% Line 1435
		<{'dep_call','ets_lookup',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22}> when 'true' ->
		    _cor1
		%% Line 1437
		<{'dep_call','mnesia_dirty_read',_cor23,_cor24,_cor25,_cor26,_cor27,_cor28}> when 'true' ->
		    _cor1
		%% Line 1439
		<{'dep_call','whereis',VarArgs,_cor29,_cor30,_cor31,_cor32,_cor33}> when 'true' ->
		    %% Line 1440
		    apply 'refine_race_helper'/6
			(_cor4, VarArgs, _cor3, _cor2, _cor1, _cor0)
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1443
	  <'warn_ets_lookup_insert'> when 'true' ->
	      %% Line 1444
	      case _cor4 of
		%% Line 1445
		<{'dep_call','whereis',_cor34,_cor35,_cor36,_cor37,_cor38,_cor39}> when 'true' ->
		    _cor1
		%% Line 1447
		<{'dep_call','mnesia_dirty_read',_cor40,_cor41,_cor42,_cor43,_cor44,_cor45}> when 'true' ->
		    _cor1
		%% Line 1449
		<{'dep_call','ets_lookup',VarArgs,_cor46,_cor47,_cor48,_cor49,_cor50}> when 'true' ->
		    %% Line 1450
		    apply 'refine_race_helper'/6
			(_cor4, VarArgs, _cor3, _cor2, _cor1, _cor0)
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1453
	  <'warn_mnesia_dirty_read_write'> when 'true' ->
	      %% Line 1454
	      case _cor4 of
		%% Line 1455
		<{'dep_call','whereis',_cor51,_cor52,_cor53,_cor54,_cor55,_cor56}> when 'true' ->
		    _cor1
		%% Line 1457
		<{'dep_call','ets_lookup',_cor57,_cor58,_cor59,_cor60,_cor61,_cor62}> when 'true' ->
		    _cor1
		%% Line 1459
		<{'dep_call','mnesia_dirty_read',VarArgs,_cor63,_cor64,_cor65,_cor66,_cor67}> when 'true' ->
		    %% Line 1460
		    apply 'refine_race_helper'/6
			(_cor4, VarArgs, _cor3, _cor2, _cor1, _cor0)
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor11})
	    -| ['compiler_generated'] )
	end
'refine_race_helper'/6 =
    %% Line 1465
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1467
	case apply 'compare_types'/4
		 (_cor4, _cor3, _cor2, _cor0) of
	  %% Line 1468
	  <'true'> when 'true' ->
	      [_cor5|_cor1]
	  %% Line 1469
	  <'false'> when 'true' ->
	      _cor1
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'remove_clause'/4 =
    %% Line 1472
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <NewRaceList> =
	    %% Line 1473
	    apply 'fixup_case_rest_paths'/2
		(_cor3, 0)
	in  %% Line 1474
	    case %% Line 1475
		 apply 'cleanup_clause_code'/4
		     (_cor2, _cor1, 0, _cor0) of
	      <{NewCurrTuple,NewCode}> when 'true' ->
		  let <ReturnTuple> =
		      %% Line 1476
		      {NewRaceList,NewCurrTuple,NewCode,_cor0}
		  in  %% Line 1477
		      case NewRaceList of
			%% Line 1478
			<['beg_case'|RTail]> when 'true' ->
			    %% Line 1479
			    case NewCode of
			      %% Line 1480
			      <[{'end_case',_cor13}|CTail]> when 'true' ->
				  %% Line 1481
				  apply 'remove_clause'/4
				      (RTail, NewCurrTuple, CTail, _cor0)
			      %% Line 1482
			      <_X_Other> when 'true' ->
				  ReturnTuple
			    end
			%% Line 1484
			<_X_Else> when 'true' ->
			    ReturnTuple
		      end
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor5})
		-| ['compiler_generated'] )
	    end
'remove_nonlocal_functions'/2 =
    %% Line 1487
    fun (_cor1,_cor0) ->
	%% Line 1488
	case _cor1 of
	  %% Line 1489
	  <[]> when 'true' ->
	      []
	  %% Line 1490
	  <[H|T]> when 'true' ->
	      let <_cor3> =
		  %% Line 1492
		  case H of
		    %% Line 1493
		    <{'curr_fun','in',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14}> when 'true' ->
			%% Line 1494
			call 'erlang':'+'
			    (_cor0, 1)
		    %% Line 1495
		    <{'curr_fun','out',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20}> when 'true' ->
			%% Line 1496
			call 'erlang':'-'
			    (_cor0, 1)
		    %% Line 1497
		    <_X_Other> when 'true' ->
			_cor0
		  end
	      in  %% Line 1500
		  case <> of
		    %% Line 1501
		    <>
			when call 'erlang':'=:='
			      (_cor3,
			       0) ->
			T
		    %% Line 1502
		    <> when 'true' ->
			apply 'remove_nonlocal_functions'/2
			    (T, _cor3)
		  end
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'renew_curr_fun'/2 =
    %% Line 1506
    fun (_cor1,_cor0) ->
	%% Line 1507
	case _cor0 of
	  <{'races',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14}> when 'true' ->
	      call 'erlang':'setelement'
		  (2, _cor0, _cor1)
	  ( <_cor15> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','races'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'renew_curr_fun_label'/2 =
    %% Line 1509
    fun (_cor1,_cor0) ->
	%% Line 1510
	case _cor0 of
	  <{'races',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14}> when 'true' ->
	      call 'erlang':'setelement'
		  (3, _cor0, _cor1)
	  ( <_cor15> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','races'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'renew_race_list'/2 =
    %% Line 1512
    fun (_cor1,_cor0) ->
	%% Line 1513
	case _cor0 of
	  <{'races',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14}> when 'true' ->
	      call 'erlang':'setelement'
		  (6, _cor0, _cor1)
	  ( <_cor15> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','races'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'renew_race_list_size'/2 =
    %% Line 1515
    fun (_cor1,_cor0) ->
	%% Line 1516
	case _cor0 of
	  <{'races',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14}> when 'true' ->
	      call 'erlang':'setelement'
		  (7, _cor0, _cor1)
	  ( <_cor15> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','races'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'renew_race_tags'/2 =
    %% Line 1518
    fun (_cor1,_cor0) ->
	%% Line 1519
	case _cor0 of
	  <{'races',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14}> when 'true' ->
	      call 'erlang':'setelement'
		  (8, _cor0, _cor1)
	  ( <_cor15> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','races'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'renew_table'/2 =
    %% Line 1521
    fun (_cor1,_cor0) ->
	%% Line 1522
	case _cor0 of
	  <{'races',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14}> when 'true' ->
	      call 'erlang':'setelement'
		  (5, _cor0, _cor1)
	  ( <_cor15> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','races'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'state__renew_curr_fun'/2 =
    %% Line 1524
    fun (_cor1,_cor0) ->
	let <Races> =
	    %% Line 1525
	    call 'dialyzer_dataflow':'state__get_races'
		(_cor0)
	in  let <_cor3> =
		%% Line 1526
		apply 'renew_curr_fun'/2
		    (_cor1, Races)
	    in  %% Line 1526
		call 'dialyzer_dataflow':'state__put_races'
		    (_cor3, _cor0)
'state__renew_curr_fun_label'/2 =
    %% Line 1528
    fun (_cor1,_cor0) ->
	let <Races> =
	    %% Line 1529
	    call 'dialyzer_dataflow':'state__get_races'
		(_cor0)
	in  let <_cor3> =
		%% Line 1531
		apply 'renew_curr_fun_label'/2
		    (_cor1, Races)
	    in  %% Line 1530
		call 'dialyzer_dataflow':'state__put_races'
		    (_cor3, _cor0)
'state__renew_race_list'/2 =
    %% Line 1533
    fun (_cor1,_cor0) ->
	let <Races> =
	    %% Line 1534
	    call 'dialyzer_dataflow':'state__get_races'
		(_cor0)
	in  let <_cor3> =
		%% Line 1535
		apply 'renew_race_list'/2
		    (_cor1, Races)
	    in  %% Line 1535
		call 'dialyzer_dataflow':'state__put_races'
		    (_cor3, _cor0)
'state__renew_race_tags'/2 =
    %% Line 1537
    fun (_cor1,_cor0) ->
	let <Races> =
	    %% Line 1538
	    call 'dialyzer_dataflow':'state__get_races'
		(_cor0)
	in  let <_cor3> =
		%% Line 1539
		apply 'renew_race_tags'/2
		    (_cor1, Races)
	    in  %% Line 1539
		call 'dialyzer_dataflow':'state__put_races'
		    (_cor3, _cor0)
'state__renew_info'/5 =
    %% Line 1541
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Callgraph> =
	    %% Line 1542
	    call 'dialyzer_dataflow':'state__get_callgraph'
		(_cor0)
	in  let <Races> =
		%% Line 1543
		call 'dialyzer_dataflow':'state__get_races'
		    (_cor0)
	    in  let <_cor12> =
		    %% Line 1545
		    apply 'callgraph__renew_tables'/2
			(_cor1, Callgraph)
		in  let <_cor7> =
			%% Line 1550
			apply 'renew_race_tags'/2
			    (_cor2, Races)
		    in  let <_cor8> =
			    %% Line 1549
			    apply 'renew_race_list_size'/2
				(_cor3, _cor7)
			in  let <_cor9> =
				%% Line 1548
				apply 'renew_race_list'/2
				    (_cor4, _cor8)
			    in  let <_cor10> =
				    %% Line 1547
				    apply 'renew_table'/2
					(_cor1, _cor9)
				in  let <_cor11> =
					%% Line 1546
					call 'dialyzer_dataflow':'state__put_races'
					    (_cor10, _cor0)
				    in  %% Line 1544
					call 'dialyzer_dataflow':'state__put_callgraph'
					    (_cor12, _cor11)
'any_args'/1 =
    %% Line 1558
    fun (_cor0) ->
	%% Line 1559
	case _cor0 of
	  %% Line 1560
	  <[]> when 'true' ->
	      'false'
	  %% Line 1561
	  <[Head|Tail]> when 'true' ->
	      %% Line 1562
	      case call 'string':'rstr'
		       (Head, [40|[41]]) of
		%% Line 1563
		<0> when 'true' ->
		    apply 'any_args'/1
			(Tail)
		%% Line 1564
		<_X_Other> when 'true' ->
		    'true'
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'bind_dict_vars'/3 =
    %% Line 1570
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1571
	case <> of
	  %% Line 1572
	  <>
	      when call 'erlang':'=:='
		    (_cor2,
		     _cor1) ->
	      _cor0
	  %% Line 1573
	  <> when 'true' ->
	      %% Line 1574
	      case call 'dict':'find'
		       (_cor2, _cor0) of
		%% Line 1575
		<'error'> when 'true' ->
		    call 'dict':'store'
			(_cor2, [_cor1|[]], _cor0)
		%% Line 1576
		<{'ok',Labels}> when 'true' ->
		    %% Line 1577
		    case call 'lists':'member'
			     (_cor1, Labels) of
		      %% Line 1578
		      <'true'> when 'true' ->
			  _cor0
		      %% Line 1579
		      <'false'> when 'true' ->
			  call 'dict':'store'
			      (_cor2, [_cor1|Labels], _cor0)
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	end
'bind_dict_vars_list'/3 =
    %% Line 1584
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1585
	case _cor1 of
	  %% Line 1586
	  <[]> when 'true' ->
	      _cor0
	  %% Line 1587
	  <[Head|Tail]> when 'true' ->
	      let <_cor3> =
		  %% Line 1588
		  apply 'bind_dict_vars'/3
		      (_cor2, Head, _cor0)
	      in  %% Line 1588
		  apply 'bind_dict_vars_list'/3
		      (_cor2, Tail, _cor3)
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'compare_ets_insert'/3 =
    %% Line 1591
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1592
	case _cor2 of
	  <[Old1|[Old2|[Old3|[Old4|[]]]]]> when 'true' ->
	      %% Line 1593
	      case _cor1 of
		<[New1|[New2|[New3|[New4|[]]]]]> when 'true' ->
		    let <_cor9> =
			%% Line 1595
			case apply 'any_args'/1
				 (Old2) of
			  %% Line 1596
			  <'true'> when 'true' ->
			      apply 'compare_var_list'/3
				  (New1, Old1, _cor0)
			  %% Line 1597
			  <'false'> when 'true' ->
			      %% Line 1598
			      case apply 'any_args'/1
				       (New2) of
				%% Line 1599
				<'true'> when 'true' ->
				    apply 'compare_var_list'/3
					(New1, Old1, _cor0)
				%% Line 1600
				<'false'> when 'true' ->
				    %% Line 1601
				    ( case apply 'compare_var_list'/3
					       (New1, Old1, _cor0) of
					( <( 'true'
					     -| ['compiler_generated'] )> when 'true' ->
					      'true'
					  -| ['compiler_generated'] )
					( <( 'false'
					     -| ['compiler_generated'] )> when 'true' ->
					      call 'erlang':'=:='
						  (Old2, New2)
					  -| ['compiler_generated'] )
					( <_cor5> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {( 'badarg'
							  -| ['compiler_generated'] ),_cor5}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				( <_cor7> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor7})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor8> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor8})
			    -| ['compiler_generated'] )
			end
		    in  %% Line 1604
			case _cor9 of
			  %% Line 1605
			  <'true'> when 'true' ->
			      %% Line 1606
			      case apply 'any_args'/1
				       (Old4) of
				%% Line 1607
				<'true'> when 'true' ->
				    let <_cor11> =
					%% Line 1608
					apply 'ets_list_args'/1
					    (New3)
				    in  %% Line 1608
					case apply 'compare_list_vars'/4
						 (Old3, _cor11, [], _cor0) of
					  %% Line 1609
					  <'true'> when 'true' ->
					      'true'
					  %% Line 1610
					  <Args3> when 'true' ->
					      apply 'lists_key_replace'/3
						  (3, _cor2, Args3)
					end
				%% Line 1612
				<'false'> when 'true' ->
				    %% Line 1613
				    case apply 'any_args'/1
					     (New4) of
				      %% Line 1614
				      <'true'> when 'true' ->
					  let <_cor13> =
					      %% Line 1615
					      apply 'ets_list_args'/1
						  (New3)
					  in  %% Line 1615
					      case apply 'compare_list_vars'/4
						       (Old3, _cor13, [], _cor0) of
						%% Line 1617
						<'true'> when 'true' ->
						    'true'
						%% Line 1618
						<Args3> when 'true' ->
						    apply 'lists_key_replace'/3
							(3, _cor2, Args3)
					      end
				      %% Line 1620
				      <'false'> when 'true' ->
					  let <_cor15> =
					      %% Line 1621
					      apply 'ets_list_args'/1
						  (New3)
					  in  %% Line 1621
					      case apply 'compare_list_vars'/4
						       (Old3, _cor15, [], _cor0) of
						%% Line 1623
						<'true'> when 'true' ->
						    'true'
						%% Line 1624
						<Args3> when 'true' ->
						    let <_cor17> =
							%% Line 1626
							apply 'lists_key_replace'/3
							    (3, _cor2, Args3)
						    in  let <_cor16> =
							    %% Line 1626
							    call 'erlang':'--'
								(Old4, New4)
							in  %% Line 1625
							    apply 'lists_key_replace'/3
								(4, _cor17, _cor16)
					      end
				      ( <_cor19> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor19})
					-| ['compiler_generated'] )
				    end
				( <_cor20> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor20})
				  -| ['compiler_generated'] )
			      end
			  %% Line 1630
			  <'false'> when 'true' ->
			      _cor2
			  ( <_cor21> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor21})
			    -| ['compiler_generated'] )
			end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'compare_first_arg'/3 =
    %% Line 1633
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1634
	case _cor2 of
	  <[Old1|[Old2|_X_OldT]]> when 'true' ->
	      %% Line 1635
	      case _cor1 of
		<[New1|[New2|_X_NewT]]> when 'true' ->
		    %% Line 1636
		    case apply 'any_args'/1
			     (Old2) of
		      %% Line 1637
		      <'true'> when 'true' ->
			  %% Line 1638
			  case apply 'compare_var_list'/3
				   (New1, Old1, _cor0) of
			    %% Line 1639
			    <'true'> when 'true' ->
				'true'
			    %% Line 1640
			    <'false'> when 'true' ->
				_cor2
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor5})
			      -| ['compiler_generated'] )
			  end
		      %% Line 1642
		      <'false'> when 'true' ->
			  %% Line 1643
			  case apply 'any_args'/1
				   (New2) of
			    %% Line 1644
			    <'true'> when 'true' ->
				%% Line 1645
				case apply 'compare_var_list'/3
					 (New1, Old1, _cor0) of
				  %% Line 1646
				  <'true'> when 'true' ->
				      'true'
				  %% Line 1647
				  <'false'> when 'true' ->
				      _cor2
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor6})
				    -| ['compiler_generated'] )
				end
			    %% Line 1649
			    <'false'> when 'true' ->
				%% Line 1650
				case apply 'compare_var_list'/3
					 (New1, Old1, _cor0) of
				  %% Line 1651
				  <'true'> when 'true' ->
				      'true'
				  %% Line 1652
				  <'false'> when 'true' ->
				      let <_cor7> =
					  call 'erlang':'--'
					      (Old2, New2)
				      in  apply 'lists_key_replace'/3
					      (2, _cor2, _cor7)
				  ( <_cor8> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor8})
				    -| ['compiler_generated'] )
				end
			    ( <_cor9> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor9})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor10> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor10})
			-| ['compiler_generated'] )
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'compare_argtypes'/2 =
    %% Line 1657
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 1658
	    ( fun (_cor2) ->
		  call 'lists':'member'
		      (_cor2, _cor0)
	      -| [{'id',{0,0,'-compare_argtypes/2-fun-0-'}}] )
	in  %% Line 1658
	    call 'lists':'any'
		(_cor4, _cor1)
'compare_types'/4 =
    %% Line 1661
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1662
	case _cor1 of
	  %% Line 1663
	  <'warn_whereis_register'> when 'true' ->
	      %% Line 1664
	      case _cor3 of
		<[VA1|[VA2|[]]]> when 'true' ->
		    %% Line 1665
		    case _cor2 of
		      <[WVA1|[WVA2|[_cor41|[_cor42|[]]]]]> when 'true' ->
			  %% Line 1666
			  case apply 'any_args'/1
				   (VA2) of
			    %% Line 1667
			    <'true'> when 'true' ->
				apply 'compare_var_list'/3
				    (VA1, WVA1, _cor0)
			    %% Line 1668
			    <'false'> when 'true' ->
				%% Line 1669
				case apply 'any_args'/1
					 (WVA2) of
				  %% Line 1670
				  <'true'> when 'true' ->
				      apply 'compare_var_list'/3
					  (VA1, WVA1, _cor0)
				  %% Line 1671
				  <'false'> when 'true' ->
				      %% Line 1672
				      ( case apply 'compare_var_list'/3
						 (VA1, WVA1, _cor0) of
					  ( <( 'true'
					       -| ['compiler_generated'] )> when 'true' ->
						'true'
					    -| ['compiler_generated'] )
					  ( <( 'false'
					       -| ['compiler_generated'] )> when 'true' ->
						%% Line 1673
						apply 'compare_argtypes'/2
						    (VA2, WVA2)
					    -| ['compiler_generated'] )
					  ( <_cor6> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {( 'badarg'
							    -| ['compiler_generated'] ),_cor6}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  ( <_cor8> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor8})
				    -| ['compiler_generated'] )
				end
			    ( <_cor9> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor9})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor5})
			-| ['compiler_generated'] )
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1676
	  <'warn_whereis_unregister'> when 'true' ->
	      %% Line 1677
	      case _cor3 of
		<[VA1|[VA2|[]]]> when 'true' ->
		    %% Line 1678
		    case _cor2 of
		      <[WVA1|[WVA2|[]]]> when 'true' ->
			  %% Line 1679
			  case apply 'any_args'/1
				   (VA2) of
			    %% Line 1680
			    <'true'> when 'true' ->
				apply 'compare_var_list'/3
				    (VA1, WVA1, _cor0)
			    %% Line 1681
			    <'false'> when 'true' ->
				%% Line 1682
				case apply 'any_args'/1
					 (WVA2) of
				  %% Line 1683
				  <'true'> when 'true' ->
				      apply 'compare_var_list'/3
					  (VA1, WVA1, _cor0)
				  %% Line 1684
				  <'false'> when 'true' ->
				      %% Line 1685
				      ( case apply 'compare_var_list'/3
						 (VA1, WVA1, _cor0) of
					  ( <( 'true'
					       -| ['compiler_generated'] )> when 'true' ->
						'true'
					    -| ['compiler_generated'] )
					  ( <( 'false'
					       -| ['compiler_generated'] )> when 'true' ->
						%% Line 1686
						apply 'compare_argtypes'/2
						    (VA2, WVA2)
					    -| ['compiler_generated'] )
					  ( <_cor12> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {( 'badarg'
							    -| ['compiler_generated'] ),_cor12}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  ( <_cor14> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor14})
				    -| ['compiler_generated'] )
				end
			    ( <_cor15> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor15})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor11> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor11})
			-| ['compiler_generated'] )
		    end
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1689
	  <'warn_ets_lookup_insert'> when 'true' ->
	      %% Line 1690
	      case _cor3 of
		<[VA1|[VA2|[VA3|[VA4|[]]]]]> when 'true' ->
		    %% Line 1691
		    case _cor2 of
		      <[WVA1|[WVA2|[WVA3|[WVA4|[]]]]]> when 'true' ->
			  let <_cor22> =
			      %% Line 1693
			      case apply 'any_args'/1
				       (VA2) of
				%% Line 1694
				<'true'> when 'true' ->
				    apply 'compare_var_list'/3
					(VA1, WVA1, _cor0)
				%% Line 1695
				<'false'> when 'true' ->
				    %% Line 1696
				    case apply 'any_args'/1
					     (WVA2) of
				      %% Line 1697
				      <'true'> when 'true' ->
					  apply 'compare_var_list'/3
					      (VA1, WVA1, _cor0)
				      %% Line 1698
				      <'false'> when 'true' ->
					  %% Line 1699
					  ( case apply 'compare_var_list'/3
						     (VA1, WVA1, _cor0) of
					      ( <( 'true'
						   -| ['compiler_generated'] )> when 'true' ->
						    'true'
						-| ['compiler_generated'] )
					      ( <( 'false'
						   -| ['compiler_generated'] )> when 'true' ->
						    %% Line 1700
						    apply 'compare_argtypes'/2
							(VA2, WVA2)
						-| ['compiler_generated'] )
					      ( <_cor18> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {( 'badarg'
								-| ['compiler_generated'] ),_cor18}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      ( <_cor20> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor20})
					-| ['compiler_generated'] )
				    end
				( <_cor21> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor21})
				  -| ['compiler_generated'] )
			      end
			  in  %% Line 1703
			      ( case _cor22 of
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					%% Line 1704
					case apply 'any_args'/1
						 (VA4) of
					  %% Line 1705
					  <'true'> when 'true' ->
					      %% Line 1706
					      apply 'compare_var_list'/3
						  (VA3, WVA3, _cor0)
					  %% Line 1707
					  <'false'> when 'true' ->
					      %% Line 1708
					      case apply 'any_args'/1
						       (WVA4) of
						%% Line 1709
						<'true'> when 'true' ->
						    %% Line 1710
						    apply 'compare_var_list'/3
							(VA3, WVA3, _cor0)
						%% Line 1711
						<'false'> when 'true' ->
						    %% Line 1712
						    ( case apply 'compare_var_list'/3
							       (VA3, WVA3, _cor0) of
							( <( 'true'
							     -| ['compiler_generated'] )> when 'true' ->
							      'true'
							  -| ['compiler_generated'] )
							( <( 'false'
							     -| ['compiler_generated'] )> when 'true' ->
							      %% Line 1713
							      apply 'compare_argtypes'/2
								  (VA4, WVA4)
							  -| ['compiler_generated'] )
							( <_cor25> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {( 'badarg'
									  -| ['compiler_generated'] ),_cor25}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						      -| ['compiler_generated'] )
						( <_cor27> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor27})
						  -| ['compiler_generated'] )
					      end
					  ( <_cor28> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor28})
					    -| ['compiler_generated'] )
					end
				    -| ['compiler_generated'] )
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					'false'
				    -| ['compiler_generated'] )
				  ( <_cor24> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {( 'badarg'
						    -| ['compiler_generated'] ),_cor24}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
		      ( <_cor17> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor17})
			-| ['compiler_generated'] )
		    end
		( <_cor16> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor16})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1716
	  <'warn_mnesia_dirty_read_write'> when 'true' ->
	      %% Line 1717
	      case _cor3 of
		<[VA1|[VA2|_cor43]]> when 'true' ->
		    %% Line 1718
		    case _cor2 of
		      <[WVA1|[WVA2|_cor44]]> when 'true' ->
			  %% Line 1719
			  case apply 'any_args'/1
				   (VA2) of
			    %% Line 1720
			    <'true'> when 'true' ->
				apply 'compare_var_list'/3
				    (VA1, WVA1, _cor0)
			    %% Line 1721
			    <'false'> when 'true' ->
				%% Line 1722
				case apply 'any_args'/1
					 (WVA2) of
				  %% Line 1723
				  <'true'> when 'true' ->
				      apply 'compare_var_list'/3
					  (VA1, WVA1, _cor0)
				  %% Line 1724
				  <'false'> when 'true' ->
				      %% Line 1725
				      ( case apply 'compare_var_list'/3
						 (VA1, WVA1, _cor0) of
					  ( <( 'true'
					       -| ['compiler_generated'] )> when 'true' ->
						'true'
					    -| ['compiler_generated'] )
					  ( <( 'false'
					       -| ['compiler_generated'] )> when 'true' ->
						%% Line 1726
						apply 'compare_argtypes'/2
						    (VA2, WVA2)
					    -| ['compiler_generated'] )
					  ( <_cor32> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {( 'badarg'
							    -| ['compiler_generated'] ),_cor32}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  ( <_cor34> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor34})
				    -| ['compiler_generated'] )
				end
			    ( <_cor35> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor35})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor31> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor31})
			-| ['compiler_generated'] )
		    end
		( <_cor30> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor30})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor36> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor36})
	    -| ['compiler_generated'] )
	end
'compare_list_vars'/4 =
    %% Line 1731
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1732
	case _cor3 of
	  %% Line 1733
	  <[]> when 'true' ->
	      %% Line 1734
	      case _cor1 of
		%% Line 1735
		<[]> when 'true' ->
		    'true'
		%% Line 1736
		<_X_Other> when 'true' ->
		    _cor1
	      end
	  %% Line 1738
	  <[Head|Tail]> when 'true' ->
	      let <_cor6> =
		  %% Line 1740
		  case apply 'compare_var_list'/3
			   (Head, _cor2, _cor0) of
		    %% Line 1741
		    <'true'> when 'true' ->
			[]
		    %% Line 1742
		    <'false'> when 'true' ->
			[Head|[]]
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor8> =
		      %% Line 1744
		      call 'erlang':'++'
			  (_cor6, _cor1)
		  in  %% Line 1744
		      apply 'compare_list_vars'/4
			  (Tail, _cor2, _cor8, _cor0)
	  ( <_cor9> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor9})
	    -| ['compiler_generated'] )
	end
'compare_vars'/3 =
    %% Line 1747
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Var1,Var2,RaceVarMap>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(Var1)
		in  let <_cor4> =
			call 'erlang':'is_integer'
			    (Var2)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 1748
	      ( case <> of
		  ( <>
			when call 'erlang':'=:='
			      (Var1,
			       Var2) ->
			'true'
		    -| ['compiler_generated'] )
		  ( <> when 'true' ->
			%% Line 1749
			( case apply 'are_bound_labels'/3
				   (Var1, Var2, RaceVarMap) of
			    ( <( 'true'
				 -| ['compiler_generated'] )> when 'true' ->
				  'true'
			      -| ['compiler_generated'] )
			    ( <( 'false'
				 -| ['compiler_generated'] )> when 'true' ->
				  %% Line 1750
				  apply 'are_bound_labels'/3
				      (Var2, Var1, RaceVarMap)
			      -| ['compiler_generated'] )
			    ( <_cor6> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {( 'badarg'
					      -| ['compiler_generated'] ),_cor6}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1751
	  <_X_Var1,_X_Var2,_X_RaceVarMap> when 'true' ->
	      %% Line 1752
	      'false'
	end
'compare_var_list'/3 =
    %% Line 1756
    fun (_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 1757
	    ( fun (_cor3) ->
		  apply 'compare_vars'/3
		      (_cor2, _cor3, _cor0)
	      -| [{'id',{0,0,'-compare_var_list/3-fun-0-'}}] )
	in  %% Line 1757
	    call 'lists':'any'
		(_cor5, _cor1)
'ets_list_args'/1 =
    %% Line 1759
    fun (_cor0) ->
	%% Line 1760
	case <> of
	  %% Line 1761
	  <>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 1762
	      try
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor3) ->
				case _cor3 of
				  <[T|_cor2]> when 'true' ->
				      let <_cor4> =
					  apply 'ets_tuple_args'/1
					      (T)
				      in  let <_cor5> =
					      apply 'lc$^0'/1
						  (_cor2)
					  in  ( [_cor4|_cor5]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor3> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor3})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (_cor0)
		    -| ['list_comprehension'] )
	      of <_cor6> ->
		  _cor6
	      catch <_cor9,_cor8,_cor7> ->
		  %% Line 1763
		  ['no_label']
	  %% Line 1765
	  <> when 'true' ->
	      let <_cor10> =
		  apply 'ets_tuple_args'/1
		      (_cor0)
	      in  [_cor10|[]]
	end
'ets_list_argtypes'/1 =
    %% Line 1768
    fun (_cor0) ->
	let <ListStr1> =
	    %% Line 1769
	    call 'string':'strip'
		(_cor0, 'left', 91)
	in  let <ListStr2> =
		%% Line 1770
		call 'string':'strip'
		    (ListStr1, 'right', 93)
	    in  let <ListStr3> =
		    %% Line 1771
		    call 'string':'strip'
			(ListStr2, 'right', 46)
		in  %% Line 1772
		    call 'string':'strip'
			(ListStr3, 'right', 44)
'ets_tuple_args'/1 =
    %% Line 1774
    fun (_cor0) ->
	%% Line 1775
	case <> of
	  %% Line 1776
	  <>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      call 'erlang':'element'
		  (1, _cor0)
	  %% Line 1777
	  <> when 'true' ->
	      'no_label'
	end
'ets_tuple_argtypes2'/2 =
    %% Line 1780
    fun (_cor1,_cor0) ->
	%% Line 1781
	case _cor1 of
	  %% Line 1782
	  <[]> when 'true' ->
	      _cor0
	  %% Line 1783
	  <[H|T]> when 'true' ->
	      let <_cor2> =
		  %% Line 1785
		  apply 'ets_tuple_argtypes2_helper'/3
		      (H, [], 0)
	      in  let <_cor3> =
		      %% Line 1785
		      call 'erlang':'++'
			  (_cor2, _cor0)
		  in  %% Line 1784
		      apply 'ets_tuple_argtypes2'/2
			  (T, _cor3)
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'ets_tuple_argtypes2_helper'/3 =
    %% Line 1788
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1789
	case _cor2 of
	  %% Line 1790
	  <[]> when 'true' ->
	      []
	  %% Line 1791
	  <[H|T]> when 'true' ->
	      let <NewElemStr,NewNestingLevel,Return> =
		  %% Line 1793
		  case H of
		    %% Line 1794
		    <123>
			when call 'erlang':'=:='
			      (_cor0,
			       0) ->
			let <_cor3> =
			    %% Line 1795
			    call 'erlang':'+'
				(_cor0, 1)
			in  %% Line 1795
			    <_cor1,_cor3,'false'>
		    %% Line 1796
		    <123> when 'true' ->
			let <_cor4> =
			    %% Line 1797
			    call 'erlang':'+'
				(_cor0, 1)
			in  %% Line 1797
			    <[H|_cor1],_cor4,'false'>
		    %% Line 1798
		    <91> when 'true' ->
			let <_cor5> =
			    %% Line 1799
			    call 'erlang':'+'
				(_cor0, 1)
			in  %% Line 1799
			    <[H|_cor1],_cor5,'false'>
		    %% Line 1800
		    <40> when 'true' ->
			let <_cor6> =
			    %% Line 1801
			    call 'erlang':'+'
				(_cor0, 1)
			in  %% Line 1801
			    <[H|_cor1],_cor6,'false'>
		    %% Line 1802
		    <125> when 'true' ->
			let <_cor7> =
			    %% Line 1803
			    call 'erlang':'-'
				(_cor0, 1)
			in  %% Line 1803
			    <[H|_cor1],_cor7,'false'>
		    %% Line 1804
		    <93> when 'true' ->
			let <_cor8> =
			    %% Line 1805
			    call 'erlang':'-'
				(_cor0, 1)
			in  %% Line 1805
			    <[H|_cor1],_cor8,'false'>
		    %% Line 1806
		    <41> when 'true' ->
			let <_cor9> =
			    %% Line 1807
			    call 'erlang':'-'
				(_cor0, 1)
			in  %% Line 1807
			    <[H|_cor1],_cor9,'false'>
		    %% Line 1808
		    <44>
			when call 'erlang':'=:='
			      (_cor0,
			       1) ->
			let <_cor10> =
			    %% Line 1809
			    call 'lists':'reverse'
				(_cor1)
			in  <_cor10,_cor0,%% Line 1809
					  'true'>
		    %% Line 1810
		    <_X_Other> when 'true' ->
			%% Line 1811
			<[H|_cor1],_cor0,'false'>
		  end
	      in  %% Line 1813
		  case Return of
		    %% Line 1814
		    <'true'> when 'true' ->
			call 'string':'tokens'
			    (NewElemStr, [32|[124]])
		    %% Line 1815
		    <'false'> when 'true' ->
			%% Line 1816
			apply 'ets_tuple_argtypes2_helper'/3
			    (T, NewElemStr, NewNestingLevel)
		    ( <_cor14> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor14})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor15> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor15})
	    -| ['compiler_generated'] )
	end
'ets_tuple_argtypes1'/4 =
    %% Line 1820
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1821
	case _cor3 of
	  %% Line 1822
	  <[]> when 'true' ->
	      _cor1
	  %% Line 1823
	  <[H|T]> when 'true' ->
	      let <NewTuple,NewNestingLevel,Add> =
		  %% Line 1825
		  case H of
		    %% Line 1826
		    <123> when 'true' ->
			let <_cor4> =
			    %% Line 1827
			    call 'erlang':'+'
				(_cor0, 1)
			in  %% Line 1827
			    <[H|_cor2],_cor4,'false'>
		    %% Line 1828
		    <125> when 'true' ->
			%% Line 1829
			case _cor0 of
			  %% Line 1830
			  <1> when 'true' ->
			      let <_cor5> =
				  %% Line 1831
				  call 'erlang':'-'
				      (_cor0, 1)
			      in  %% Line 1831
				  <[H|_cor2],_cor5,'true'>
			  %% Line 1832
			  <_X_Else> when 'true' ->
			      let <_cor6> =
				  %% Line 1833
				  call 'erlang':'-'
				      (_cor0, 1)
			      in  %% Line 1833
				  <[H|_cor2],_cor6,'false'>
			end
		    %% Line 1835
		    <_X_Other1>
			when call 'erlang':'=:='
			      (_cor0,
			       0) ->
			%% Line 1836
			<_cor2,_cor0,'false'>
		    %% Line 1837
		    <_X_Other2> when 'true' ->
			%% Line 1838
			<[H|_cor2],_cor0,'false'>
		  end
	      in  %% Line 1840
		  case Add of
		    %% Line 1841
		    <'true'> when 'true' ->
			let <_cor11> =
			    %% Line 1843
			    call 'lists':'reverse'
				(NewTuple)
			in  %% Line 1842
			    apply 'ets_tuple_argtypes1'/4
				(T, [], %% Line 1843
					[_cor11|_cor1], %% Line 1844
							NewNestingLevel)
		    %% Line 1845
		    <'false'> when 'true' ->
			%% Line 1846
			apply 'ets_tuple_argtypes1'/4
			    (T, NewTuple, _cor1, NewNestingLevel)
		    ( <_cor12> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor12})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor13> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor13})
	    -| ['compiler_generated'] )
	end
'format_arg'/1 =
    %% Line 1850
    fun (_cor0) ->
	case _cor0 of
	  <'bypassed'> when 'true' ->
	      'no_label'
	  %% Line 1851
	  <Arg0> when 'true' ->
	      let <Arg> =
		  %% Line 1852
		  call 'cerl':'fold_literal'
		      (Arg0)
	      in  %% Line 1853
		  case call 'cerl':'type'
			   (Arg) of
		    %% Line 1854
		    <'var'> when 'true' ->
			call 'cerl_trees':'get_label'
			    (Arg)
		    %% Line 1855
		    <'tuple'> when 'true' ->
			let <_cor8> =
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor5) ->
					  case _cor5 of
					    <[A|_cor3]> when 'true' ->
						let <_cor6> =
						    apply 'format_arg'/1
							(A)
						in  let <_cor7> =
							apply 'lc$^0'/1
							    (_cor3)
						    in  ( [_cor6|_cor7]
							  -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor5> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor5})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  let <_cor4> =
				      call 'cerl':'tuple_es'
					  (Arg)
				  in  apply 'lc$^0'/1
					  (_cor4)
			      -| ['list_comprehension'] )
			in  call 'erlang':'list_to_tuple'
				(_cor8)
		    %% Line 1856
		    <'cons'> when 'true' ->
			let <_cor9> =
			    call 'cerl':'cons_hd'
				(Arg)
			in  let <_cor10> =
				apply 'format_arg'/1
				    (_cor9)
			    in  let <_cor11> =
				    call 'cerl':'cons_tl'
					(Arg)
				in  let <_cor12> =
					apply 'format_arg'/1
					    (_cor11)
				    in  [_cor10|_cor12]
		    %% Line 1857
		    <'alias'> when 'true' ->
			let <_cor13> =
			    call 'cerl':'alias_var'
				(Arg)
			in  apply 'format_arg'/1
				(_cor13)
		    %% Line 1858
		    <'literal'> when 'true' ->
			%% Line 1859
			case call 'cerl':'is_c_nil'
				 (Arg) of
			  %% Line 1860
			  <'true'> when 'true' ->
			      []
			  %% Line 1861
			  <'false'> when 'true' ->
			      'no_label'
			  ( <_cor14> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor14})
			    -| ['compiler_generated'] )
			end
		    %% Line 1863
		    <_X_Other> when 'true' ->
			'no_label'
		  end
	end
'format_args'/4 =
    %% Line 1870
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],[],_X_State,_X_Call> when 'true' ->
	      %% Line 1871
	      []
	  %% Line 1872
	  <ArgList,TypeList,CleanState,Call> when 'true' ->
	      let <_cor4> =
		  %% Line 1873
		  apply 'format_args_1'/3
		      (ArgList, TypeList, CleanState)
	      in  %% Line 1873
		  apply 'format_args_2'/2
		      (_cor4, Call)
	end
'format_args_1'/3 =
    %% Line 1875
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Arg|[]],[Type|[]],CleanState> when 'true' ->
	      let <_cor3> =
		  %% Line 1876
		  apply 'format_arg'/1
		      (Arg)
	      in  let <_cor4> =
		      %% Line 1876
		      apply 'format_type'/2
			  (Type, CleanState)
		  in  %% Line 1876
		      [_cor3|[_cor4|[]]]
	  %% Line 1877
	  <[Arg|Args],[Type|Types],CleanState> when 'true' ->
	      let <_cor12> =
		  %% Line 1879
		  case <> of
		    %% Line 1880
		    <>
			when call 'erlang':'=:='
			      (Arg,
			       'bypassed') ->
			let <_cor5> =
			    apply 'format_type'/2
				(Type, CleanState)
			in  ['no_label'|[_cor5|[]]]
		    %% Line 1881
		    <> when 'true' ->
			let <_cor6> =
			    %% Line 1882
			    call 'cerl':'fold_literal'
				(Arg)
			in  %% Line 1882
			    case call 'cerl':'is_literal'
				     (_cor6) of
			      %% Line 1883
			      <'true'> when 'true' ->
				  let <_cor7> =
				      apply 'format_cerl'/1
					  (Arg)
				  in  ['no_label'|[_cor7|[]]]
			      %% Line 1884
			      <'false'> when 'true' ->
				  let <_cor8> =
				      apply 'format_arg'/1
					  (Arg)
				  in  let <_cor9> =
					  apply 'format_type'/2
					      (Type, CleanState)
				      in  [_cor8|[_cor9|[]]]
			      ( <_cor10> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor10})
				-| ['compiler_generated'] )
			    end
		  end
	      in  let <_cor14> =
		      %% Line 1887
		      apply 'format_args_1'/3
			  (Args, Types, CleanState)
		  in  %% Line 1887
		      call 'erlang':'++'
			  (_cor12, _cor14)
	  ( <_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15})
		  -| [{'function_name',{'format_args_1',3}}] )
	    -| ['compiler_generated'] )
	end
'format_args_2'/2 =
    %% Line 1889
    fun (_cor1,_cor0) ->
	%% Line 1890
	case _cor0 of
	  %% Line 1891
	  <'whereis'> when 'true' ->
	      let <_cor2> =
		  %% Line 1893
		  call 'lists':'nth'
		      (2, _cor1)
	      in  let <_cor3> =
		      %% Line 1893
		      call 'string':'tokens'
			  (_cor2, [32|[124]])
		  in  %% Line 1892
		      apply 'lists_key_replace'/3
			  (2, _cor1, _cor3)
	  %% Line 1894
	  <'register'> when 'true' ->
	      let <_cor4> =
		  %% Line 1896
		  call 'lists':'nth'
		      (2, _cor1)
	      in  let <_cor5> =
		      %% Line 1896
		      call 'string':'tokens'
			  (_cor4, [32|[124]])
		  in  %% Line 1895
		      apply 'lists_key_replace'/3
			  (2, _cor1, _cor5)
	  %% Line 1897
	  <'unregister'> when 'true' ->
	      let <_cor6> =
		  %% Line 1899
		  call 'lists':'nth'
		      (2, _cor1)
	      in  let <_cor7> =
		      %% Line 1899
		      call 'string':'tokens'
			  (_cor6, [32|[124]])
		  in  %% Line 1898
		      apply 'lists_key_replace'/3
			  (2, _cor1, _cor7)
	  %% Line 1900
	  <'ets_new'> when 'true' ->
	      let <_cor8> =
		  %% Line 1902
		  call 'lists':'nth'
		      (2, _cor1)
	      in  let <_cor9> =
		      %% Line 1902
		      call 'string':'tokens'
			  (_cor8, [32|[124]])
		  in  let <StrArgList1> =
			  %% Line 1901
			  apply 'lists_key_replace'/3
			      (2, _cor1, _cor9)
		      in  let <_cor11> =
			      %% Line 1904
			      call 'lists':'nth'
				  (4, StrArgList1)
			  in  let <_cor12> =
				  %% Line 1904
				  apply 'ets_list_argtypes'/1
				      (_cor11)
			      in  let <_cor13> =
				      %% Line 1904
				      call 'string':'tokens'
					  (_cor12, [32|[124]])
				  in  %% Line 1903
				      apply 'lists_key_replace'/3
					  (4, StrArgList1, _cor13)
	  %% Line 1905
	  <'ets_lookup'> when 'true' ->
	      let <_cor14> =
		  %% Line 1907
		  call 'lists':'nth'
		      (2, _cor1)
	      in  let <_cor15> =
		      %% Line 1907
		      call 'string':'tokens'
			  (_cor14, [32|[124]])
		  in  let <StrArgList1> =
			  %% Line 1906
			  apply 'lists_key_replace'/3
			      (2, _cor1, _cor15)
		      in  let <_cor17> =
			      %% Line 1909
			      call 'lists':'nth'
				  (4, StrArgList1)
			  in  let <_cor18> =
				  %% Line 1909
				  call 'string':'tokens'
				      (_cor17, [32|[124]])
			      in  %% Line 1908
				  apply 'lists_key_replace'/3
				      (4, StrArgList1, _cor18)
	  %% Line 1910
	  <'ets_insert'> when 'true' ->
	      let <_cor19> =
		  %% Line 1912
		  call 'lists':'nth'
		      (2, _cor1)
	      in  let <_cor20> =
		      %% Line 1912
		      call 'string':'tokens'
			  (_cor19, [32|[124]])
		  in  let <StrArgList1> =
			  %% Line 1911
			  apply 'lists_key_replace'/3
			      (2, _cor1, _cor20)
		      in  let <_cor22> =
			      %% Line 1915
			      call 'lists':'nth'
				  (4, StrArgList1)
			  in  let <_cor23> =
				  %% Line 1915
				  apply 'ets_tuple_argtypes1'/4
				      (_cor22, [], [], 0)
			      in  let <_cor24> =
				      %% Line 1914
				      apply 'ets_tuple_argtypes2'/2
					  (_cor23, %% Line 1916
						   [])
				  in  %% Line 1913
				      apply 'lists_key_replace'/3
					  (4, StrArgList1, _cor24)
	  %% Line 1917
	  <'mnesia_dirty_read1'> when 'true' ->
	      let <_cor32> =
		  %% Line 1919
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor29) ->
				case _cor29 of
				  <[T|_cor26]> when 'true' ->
				      let <_cor30> =
					  apply 'mnesia_tuple_argtypes'/1
					      (T)
				      in  let <_cor31> =
					      apply 'lc$^0'/1
						  (_cor26)
					  in  ( [_cor30|_cor31]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor29> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor29})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor27> =
			    %% Line 1920
			    call 'lists':'nth'
				(2, _cor1)
			in  let <_cor28> =
				call 'string':'tokens'
				    (_cor27, %% Line 1920
					     [32|[124]])
			    in  apply 'lc$^0'/1
				    (_cor28)
		    -| ['list_comprehension'] )
	      in  %% Line 1918
		  apply 'lists_key_replace'/3
		      (2, _cor1, _cor32)
	  %% Line 1921
	  <'mnesia_dirty_read2'> when 'true' ->
	      let <_cor33> =
		  %% Line 1923
		  call 'lists':'nth'
		      (2, _cor1)
	      in  let <_cor34> =
		      %% Line 1923
		      call 'string':'tokens'
			  (_cor33, [32|[124]])
		  in  %% Line 1922
		      apply 'lists_key_replace'/3
			  (2, _cor1, _cor34)
	  %% Line 1924
	  <'mnesia_dirty_write1'> when 'true' ->
	      let <_cor42> =
		  %% Line 1926
		  ( letrec
			'lc$^1'/1 =
			    fun (_cor39) ->
				case _cor39 of
				  <[R|_cor36]> when 'true' ->
				      let <_cor40> =
					  apply 'mnesia_record_tab'/1
					      (R)
				      in  let <_cor41> =
					      apply 'lc$^1'/1
						  (_cor36)
					  in  ( [_cor40|_cor41]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor39> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor39})
					  -| [{'function_name',{'lc$^1',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor37> =
			    %% Line 1927
			    call 'lists':'nth'
				(2, _cor1)
			in  let <_cor38> =
				call 'string':'tokens'
				    (_cor37, %% Line 1927
					     [32|[124]])
			    in  apply 'lc$^1'/1
				    (_cor38)
		    -| ['list_comprehension'] )
	      in  %% Line 1925
		  apply 'lists_key_replace'/3
		      (2, _cor1, _cor42)
	  %% Line 1928
	  <'mnesia_dirty_write2'> when 'true' ->
	      let <_cor43> =
		  %% Line 1930
		  call 'lists':'nth'
		      (2, _cor1)
	      in  let <_cor44> =
		      %% Line 1930
		      call 'string':'tokens'
			  (_cor43, [32|[124]])
		  in  %% Line 1929
		      apply 'lists_key_replace'/3
			  (2, _cor1, _cor44)
	  %% Line 1931
	  <'function_call'> when 'true' ->
	      _cor1
	  ( <_cor45> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor45})
	    -| ['compiler_generated'] )
	end
'format_cerl'/1 =
    %% Line 1934
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 1935
	    call 'cerl':'set_ann'
		(_cor0, [])
	in  let <_cor1> =
		%% Line 1936
		call 'dialyzer_utils':'pp_hook'
		    ()
	    in  %% Line 1935
		call 'cerl_prettypr':'format'
		    (_cor2, %% Line 1936
			    [{'hook',_cor1}|%% Line 1937
					    [{'noann','true'}|[{'paper',100000}|[{'ribbon',100000}]]]])
'format_type'/2 =
    %% Line 1942
    fun (_cor1,_cor0) ->
	let <R> =
	    %% Line 1943
	    call 'dialyzer_dataflow':'state__get_records'
		(_cor0)
	in  %% Line 1944
	    call 'erl_types':'t_to_string'
		(_cor1, R)
'mnesia_record_tab'/1 =
    %% Line 1946
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1947
	    call 'string':'str'
		(_cor0, [35])
	in  %% Line 1947
	    case <> of
	      %% Line 1948
	      <>
		  when call 'erlang':'=:='
			(_cor1,
			 1) ->
		  let <_cor2> =
		      %% Line 1950
		      call 'string':'str'
			  (_cor0, [123])
		  in  let <_cor3> =
			  %% Line 1950
			  call 'erlang':'-'
			      (_cor2, 1)
		      in  let <_cor4> =
			      %% Line 1950
			      call 'string':'sub_string'
				  (_cor0, 2, _cor3)
			  in  let <_cor5> =
				  %% Line 1950
				  call 'erlang':'++'
				      (_cor4, %% Line 1951
					      [39])
			      in  %% Line 1949
				  [39|_cor5]
	      %% Line 1952
	      <> when 'true' ->
		  _cor0
	    end
'mnesia_tuple_argtypes'/1 =
    %% Line 1955
    fun (_cor0) ->
	let <TupleStr1> =
	    %% Line 1956
	    call 'string':'strip'
		(_cor0, 'left', 123)
	in  %% Line 1957
	    case call 'string':'tokens'
		     (TupleStr1, [32|[44]]) of
	      <[TupleStr2|_X_T]> when 'true' ->
		  let <_cor3> =
		      %% Line 1958
		      call 'string':'tokens'
			  (TupleStr2, [32|[124]])
		  in  %% Line 1958
		      call 'lists':'flatten'
			  (_cor3)
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor2})
		-| ['compiler_generated'] )
	    end
'race_var_map'/4 =
    %% Line 1963
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 1964
	    ( case <> of
		( <>
		      when call 'erlang':'=:='
			    (_cor3,
			     'no_arg') ->
		      'true'
		  -| ['compiler_generated'] )
		( <> when 'true' ->
		      %% Line 1965
		      ( case <> of
			  ( <>
				when call 'erlang':'=:='
				      (_cor3,
				       'bypassed') ->
				'true'
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				call 'erlang':'=:='
				    (_cor2, 'bypassed')
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
	in  %% Line 1964
	    case _cor8 of
	      %% Line 1966
	      <'true'> when 'true' ->
		  _cor1
	      %% Line 1967
	      <'false'> when 'true' ->
		  let <_cor11> =
		      %% Line 1968
		      ( case <> of
			  ( <>
				when call 'erlang':'is_list'
				      (_cor3) ->
				call 'erlang':'is_list'
				    (_cor2)
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				'false'
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  in  %% Line 1968
		      case _cor11 of
			%% Line 1969
			<'true'> when 'true' ->
			    %% Line 1970
			    case _cor3 of
			      %% Line 1971
			      <[]> when 'true' ->
				  _cor1
			      %% Line 1972
			      <[AHead|ATail]> when 'true' ->
				  %% Line 1973
				  case _cor2 of
				    %% Line 1974
				    <[]> when 'true' ->
					_cor1
				    %% Line 1975
				    <[PHead|PTail]> when 'true' ->
					let <NewRaceVarMap> =
					    %% Line 1976
					    apply 'race_var_map'/4
						(AHead, PHead, _cor1, _cor0)
					in  %% Line 1977
					    apply 'race_var_map'/4
						(ATail, PTail, NewRaceVarMap, _cor0)
				    ( <_cor13> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor13})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor14> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor14})
				-| ['compiler_generated'] )
			    end
			%% Line 1980
			<'false'> when 'true' ->
			    let <NewVars1,NewVars2,Bool> =
				%% Line 1982
				case <> of
				  %% Line 1983
				  <>
				      when call 'erlang':'is_list'
					    (_cor3) ->
				      %% Line 1984
				      case _cor3 of
					%% Line 1985
					<[Var1|[]]> when 'true' ->
					    <Var1,_cor2,'true'>
					%% Line 1986
					<_X_Thing> when 'true' ->
					    <_cor3,_cor2,'false'>
				      end
				  %% Line 1988
				  <> when 'true' ->
				      %% Line 1989
				      case <> of
					%% Line 1990
					<>
					    when call 'erlang':'is_list'
						  (_cor2) ->
					    %% Line 1991
					    case _cor2 of
					      %% Line 1992
					      <[Var2|[]]> when 'true' ->
						  <_cor3,Var2,'true'>
					      %% Line 1993
					      <_X_Thing> when 'true' ->
						  <_cor3,_cor2,'false'>
					    end
					%% Line 1995
					<> when 'true' ->
					    <_cor3,_cor2,'true'>
				      end
				end
			    in  %% Line 1998
				case Bool of
				  %% Line 1999
				  <'true'> when 'true' ->
				      %% Line 2000
				      case call 'cerl':'type'
					       (NewVars1) of
					%% Line 2001
					<'var'> when 'true' ->
					    %% Line 2002
					    case call 'cerl':'type'
						     (NewVars2) of
					      %% Line 2003
					      <'var'> when 'true' ->
						  let <ALabel> =
						      %% Line 2004
						      call 'cerl_trees':'get_label'
							  (NewVars1)
						  in  let <PLabel> =
							  %% Line 2005
							  call 'cerl_trees':'get_label'
							      (NewVars2)
						      in  %% Line 2006
							  case _cor0 of
							    %% Line 2007
							    <'bind'> when 'true' ->
								let <TempRaceVarMap> =
								    %% Line 2009
								    apply 'bind_dict_vars'/3
									(ALabel, PLabel, _cor1)
								in  %% Line 2010
								    apply 'bind_dict_vars'/3
									(PLabel, ALabel, TempRaceVarMap)
							    %% Line 2011
							    <'unbind'> when 'true' ->
								let <TempRaceVarMap> =
								    %% Line 2013
								    apply 'unbind_dict_vars'/3
									(ALabel, PLabel, _cor1)
								in  %% Line 2014
								    apply 'unbind_dict_vars'/3
									(PLabel, ALabel, TempRaceVarMap)
							    ( <_cor25> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_cor25})
							      -| ['compiler_generated'] )
							  end
					      %% Line 2016
					      <'alias'> when 'true' ->
						  let <_cor26> =
						      %% Line 2017
						      call 'cerl':'alias_var'
							  (NewVars2)
						  in  %% Line 2017
						      apply 'race_var_map'/4
							  (NewVars1, _cor26, _cor1, _cor0)
					      %% Line 2019
					      <'values'> when 'true' ->
						  let <_cor27> =
						      %% Line 2020
						      call 'cerl':'values_es'
							  (NewVars2)
						  in  %% Line 2020
						      apply 'race_var_map'/4
							  (NewVars1, _cor27, _cor1, _cor0)
					      %% Line 2022
					      <_X_Other> when 'true' ->
						  _cor1
					    end
					%% Line 2024
					<'tuple'> when 'true' ->
					    %% Line 2025
					    case call 'cerl':'type'
						     (NewVars2) of
					      %% Line 2026
					      <'tuple'> when 'true' ->
						  let <_cor30> =
						      %% Line 2027
						      call 'cerl':'tuple_es'
							  (NewVars1)
						  in  let <_cor29> =
							  %% Line 2028
							  call 'cerl':'tuple_es'
							      (NewVars2)
						      in  %% Line 2027
							  apply 'race_var_map'/4
							      (_cor30, _cor29, _cor1, _cor0)
					      %% Line 2029
					      <'alias'> when 'true' ->
						  let <_cor31> =
						      %% Line 2030
						      call 'cerl':'alias_var'
							  (NewVars2)
						  in  %% Line 2030
						      apply 'race_var_map'/4
							  (NewVars1, _cor31, _cor1, _cor0)
					      %% Line 2032
					      <'values'> when 'true' ->
						  let <_cor32> =
						      %% Line 2033
						      call 'cerl':'values_es'
							  (NewVars2)
						  in  %% Line 2033
						      apply 'race_var_map'/4
							  (NewVars1, _cor32, _cor1, _cor0)
					      %% Line 2035
					      <_X_Other> when 'true' ->
						  _cor1
					    end
					%% Line 2037
					<'cons'> when 'true' ->
					    %% Line 2038
					    case call 'cerl':'type'
						     (NewVars2) of
					      %% Line 2039
					      <'cons'> when 'true' ->
						  let <_cor35> =
						      %% Line 2040
						      call 'cerl':'cons_hd'
							  (NewVars1)
						  in  let <_cor34> =
							  %% Line 2041
							  call 'cerl':'cons_hd'
							      (NewVars2)
						      in  let <NewRaceVarMap> =
							      %% Line 2040
							      apply 'race_var_map'/4
								  (_cor35, _cor34, _cor1, _cor0)
							  in  let <_cor38> =
								  %% Line 2042
								  call 'cerl':'cons_tl'
								      (NewVars1)
							      in  let <_cor37> =
								      %% Line 2043
								      call 'cerl':'cons_tl'
									  (NewVars2)
								  in  %% Line 2042
								      apply 'race_var_map'/4
									  (_cor38, _cor37, %% Line 2043
											   NewRaceVarMap, _cor0)
					      %% Line 2044
					      <'alias'> when 'true' ->
						  let <_cor39> =
						      %% Line 2045
						      call 'cerl':'alias_var'
							  (NewVars2)
						  in  %% Line 2045
						      apply 'race_var_map'/4
							  (NewVars1, _cor39, _cor1, _cor0)
					      %% Line 2047
					      <'values'> when 'true' ->
						  let <_cor40> =
						      %% Line 2048
						      call 'cerl':'values_es'
							  (NewVars2)
						  in  %% Line 2048
						      apply 'race_var_map'/4
							  (NewVars1, _cor40, _cor1, _cor0)
					      %% Line 2050
					      <_X_Other> when 'true' ->
						  _cor1
					    end
					%% Line 2052
					<'alias'> when 'true' ->
					    %% Line 2053
					    case call 'cerl':'type'
						     (NewVars2) of
					      %% Line 2054
					      <'alias'> when 'true' ->
						  let <_cor43> =
						      %% Line 2055
						      call 'cerl':'alias_var'
							  (NewVars1)
						  in  let <_cor42> =
							  %% Line 2056
							  call 'cerl':'alias_var'
							      (NewVars2)
						      in  %% Line 2055
							  apply 'race_var_map'/4
							      (_cor43, _cor42, _cor1, _cor0)
					      %% Line 2057
					      <_X_Other> when 'true' ->
						  let <_cor44> =
						      %% Line 2058
						      call 'cerl':'alias_var'
							  (NewVars1)
						  in  %% Line 2058
						      apply 'race_var_map'/4
							  (_cor44, %% Line 2059
								   NewVars2, _cor1, _cor0)
					    end
					%% Line 2061
					<'values'> when 'true' ->
					    %% Line 2062
					    case call 'cerl':'type'
						     (NewVars2) of
					      %% Line 2063
					      <'values'> when 'true' ->
						  let <_cor47> =
						      %% Line 2064
						      call 'cerl':'values_es'
							  (NewVars1)
						  in  let <_cor46> =
							  %% Line 2065
							  call 'cerl':'values_es'
							      (NewVars2)
						      in  %% Line 2064
							  apply 'race_var_map'/4
							      (_cor47, _cor46, _cor1, _cor0)
					      %% Line 2066
					      <_X_Other> when 'true' ->
						  let <_cor48> =
						      %% Line 2067
						      call 'cerl':'values_es'
							  (NewVars1)
						  in  %% Line 2067
						      apply 'race_var_map'/4
							  (_cor48, %% Line 2068
								   NewVars2, _cor1, _cor0)
					    end
					%% Line 2070
					<_X_Other> when 'true' ->
					    _cor1
				      end
				  %% Line 2072
				  <'false'> when 'true' ->
				      _cor1
				  ( <_cor51> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor51})
				    -| ['compiler_generated'] )
				end
			( <_cor52> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor52})
			  -| ['compiler_generated'] )
		      end
	      ( <_cor53> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor53})
		-| ['compiler_generated'] )
	    end
'race_var_map_clauses'/2 =
    %% Line 2077
    fun (_cor1,_cor0) ->
	%% Line 2078
	case _cor1 of
	  %% Line 2079
	  <[]> when 'true' ->
	      _cor0
	  %% Line 2080
	  <[{'end_clause',Arg,Pats,Guard}|T]> when 'true' ->
	      %% Line 2081
	      case %% Line 2082
		   apply 'race_var_map_guard'/5
		       (Arg, Pats, Guard, _cor0, 'bind') of
		<{RaceVarMap1,_X_RemoveClause}> when 'true' ->
		    %% Line 2083
		    apply 'race_var_map_clauses'/2
			(T, RaceVarMap1)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'race_var_map_guard'/5 =
    %% Line 2086
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <NewRaceVarMap,RemoveClause> =
	    %% Line 2088
	    case call 'cerl':'type'
		     (_cor2) of
	      %% Line 2089
	      <'call'> when 'true' ->
		  let <CallName> =
		      %% Line 2090
		      call 'cerl':'call_name'
			  (_cor2)
		  in  %% Line 2091
		      case call 'cerl':'is_literal'
			       (CallName) of
			%% Line 2092
			<'true'> when 'true' ->
			    %% Line 2093
			    case call 'cerl':'concrete'
				     (CallName) of
			      %% Line 2094
			      <'=:='> when 'true' ->
				  %% Line 2095
				  case call 'cerl':'call_args'
					   (_cor2) of
				    <[Arg1|[Arg2|[]]]> when 'true' ->
					let <_cor7> =
					    %% Line 2096
					    apply 'race_var_map'/4
						(Arg1, Arg2, _cor1, _cor0)
					in  <_cor7,%% Line 2096
						   'false'>
				    ( <_cor6> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor6})
				      -| ['compiler_generated'] )
				  end
			      %% Line 2097
			      <'=='> when 'true' ->
				  %% Line 2098
				  case call 'cerl':'call_args'
					   (_cor2) of
				    <[Arg1|[Arg2|[]]]> when 'true' ->
					let <_cor9> =
					    %% Line 2099
					    apply 'race_var_map'/4
						(Arg1, Arg2, _cor1, _cor0)
					in  <_cor9,%% Line 2099
						   'false'>
				    ( <_cor8> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor8})
				      -| ['compiler_generated'] )
				  end
			      %% Line 2100
			      <'=/='> when 'true' ->
				  %% Line 2101
				  case _cor0 of
				    %% Line 2102
				    <'bind'> when 'true' ->
					%% Line 2103
					case call 'cerl':'call_args'
						 (_cor2) of
					  <[Arg1|[Arg2|[]]]> when 'true' ->
					      let <_cor11> =
						  %% Line 2104
						  apply 'are_bound_vars'/3
						      (Arg1, Arg2, _cor1)
					      in  %% Line 2104
						  <_cor1,_cor11>
					  ( <_cor10> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor10})
					    -| ['compiler_generated'] )
					end
				    %% Line 2105
				    <'unbind'> when 'true' ->
					<_cor1,'false'>
				    ( <_cor12> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor12})
				      -| ['compiler_generated'] )
				  end
			      %% Line 2107
			      <_X_Other> when 'true' ->
				  <_cor1,'false'>
			    end
			%% Line 2109
			<'false'> when 'true' ->
			    <_cor1,'false'>
			( <_cor14> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor14})
			  -| ['compiler_generated'] )
		      end
	      %% Line 2111
	      <_X_Other> when 'true' ->
		  <_cor1,'false'>
	    end
	in  let <_cor18> =
		%% Line 2115
		apply 'race_var_map'/4
		    (_cor4, _cor3, NewRaceVarMap, _cor0)
	    in  %% Line 2113
		case %% Line 2114
		     apply 'race_var_map_guard_helper1'/4
			 (_cor4, _cor3, _cor18, _cor0) of
		  <{RaceVarMap1,RemoveClause1}> when 'true' ->
		      let <_cor22> =
			  %% Line 2116
			  ( case RemoveClause of
			      ( <( 'true'
				   -| ['compiler_generated'] )> when 'true' ->
				    'true'
				-| ['compiler_generated'] )
			      ( <( 'false'
				   -| ['compiler_generated'] )> when 'true' ->
				    RemoveClause1
				-| ['compiler_generated'] )
			      ( <_cor20> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {( 'badarg'
						-| ['compiler_generated'] ),_cor20}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      in  %% Line 2116
			  {RaceVarMap1,_cor22}
		  ( <_cor19> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor19})
		    -| ['compiler_generated'] )
		end
'race_var_map_guard_helper1'/4 =
    %% Line 2118
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 2119
	    ( case <> of
		( <>
		      when call 'erlang':'=:='
			    (_cor3,
			     'no_arg') ->
		      'true'
		  -| ['compiler_generated'] )
		( <> when 'true' ->
		      call 'erlang':'=:='
			  (_cor3, 'bypassed')
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
	in  %% Line 2119
	    case _cor6 of
	      %% Line 2120
	      <'true'> when 'true' ->
		  {_cor1,'false'}
	      %% Line 2121
	      <'false'> when 'true' ->
		  %% Line 2122
		  case call 'cerl':'type'
			   (_cor3) of
		    %% Line 2123
		    <'call'> when 'true' ->
			%% Line 2124
			case _cor2 of
			  %% Line 2125
			  <[NewPat|[]]> when 'true' ->
			      let <ModName> =
				  %% Line 2126
				  call 'cerl':'call_module'
				      (_cor3)
			      in  let <CallName> =
				      %% Line 2127
				      call 'cerl':'call_name'
					  (_cor3)
				  in  let <_cor11> =
					  %% Line 2128
					  ( case call 'cerl':'is_literal'
						     (ModName) of
					      ( <( 'true'
						   -| ['compiler_generated'] )> when 'true' ->
						    %% Line 2129
						    call 'cerl':'is_literal'
							(CallName)
						-| ['compiler_generated'] )
					      ( <( 'false'
						   -| ['compiler_generated'] )> when 'true' ->
						    'false'
						-| ['compiler_generated'] )
					      ( <_cor9> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {( 'badarg'
								-| ['compiler_generated'] ),_cor9}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      in  %% Line 2128
					  case _cor11 of
					    %% Line 2130
					    <'true'> when 'true' ->
						let <_cor13> =
						    %% Line 2131
						    call 'cerl':'concrete'
							(ModName)
						in  let <_cor12> =
							%% Line 2132
							call 'cerl':'concrete'
							    (CallName)
						    in  %% Line 2131
							case <_cor13,_cor12> of
							  %% Line 2133
							  <'erlang','=:='> when 'true' ->
							      %% Line 2134
							      apply 'race_var_map_guard_helper2'/5
								  (_cor3, NewPat, 'true', _cor1, _cor0)
							  %% Line 2136
							  <'erlang','=='> when 'true' ->
							      %% Line 2137
							      apply 'race_var_map_guard_helper2'/5
								  (_cor3, NewPat, 'true', _cor1, _cor0)
							  %% Line 2139
							  <'erlang','=/='> when 'true' ->
							      %% Line 2140
							      apply 'race_var_map_guard_helper2'/5
								  (_cor3, NewPat, 'false', _cor1, _cor0)
							  %% Line 2142
							  <_fol440,_fol441> when 'true' ->
							      {_cor1,'false'}
							end
					    %% Line 2144
					    <'false'> when 'true' ->
						{_cor1,'false'}
					    ( <_cor15> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor15})
					      -| ['compiler_generated'] )
					  end
			  %% Line 2146
			  <_X_Other> when 'true' ->
			      {_cor1,'false'}
			end
		    %% Line 2148
		    <_X_Other> when 'true' ->
			{_cor1,'false'}
		  end
	      ( <_cor18> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor18})
		-| ['compiler_generated'] )
	    end
'race_var_map_guard_helper2'/5 =
    %% Line 2152
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Pat> =
	    %% Line 2153
	    call 'cerl':'fold_literal'
		(_cor3)
	in  %% Line 2154
	    case call 'cerl':'type'
		     (Pat) of
	      %% Line 2155
	      <'literal'> when 'true' ->
		  %% Line 2156
		  case call 'cerl':'call_args'
			   (_cor4) of
		    <[Arg1|[Arg2|[]]]> when 'true' ->
			%% Line 2157
			case call 'cerl':'concrete'
				 (Pat) of
			  %% Line 2158
			  <_cor17>
			      when call 'erlang':'=:='
				    (_cor17,
				     _cor2) ->
			      let <_cor7> =
				  %% Line 2159
				  apply 'race_var_map'/4
				      (Arg1, Arg2, _cor1, _cor0)
			      in  %% Line 2159
				  {_cor7,'false'}
			  %% Line 2160
			  <_X_Else> when 'true' ->
			      %% Line 2161
			      case _cor0 of
				%% Line 2162
				<'bind'> when 'true' ->
				    let <_cor8> =
					%% Line 2163
					apply 'are_bound_vars'/3
					    (Arg1, Arg2, _cor1)
				    in  %% Line 2163
					{_cor1,_cor8}
				%% Line 2164
				<'unbind'> when 'true' ->
				    {_cor1,'false'}
				( <_cor9> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor9})
				  -| ['compiler_generated'] )
			      end
			end
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	      %% Line 2167
	      <_X_Else> when 'true' ->
		  {_cor1,'false'}
	    end
'unbind_dict_vars'/3 =
    %% Line 2170
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Var,_cor12,RaceVarMap>
	      when call 'erlang':'=:='
		    (_cor12,
		     Var) ->
	      %% Line 2171
	      RaceVarMap
	  %% Line 2172
	  <Var1,Var2,RaceVarMap> when 'true' ->
	      %% Line 2173
	      case call 'dict':'find'
		       (Var1, RaceVarMap) of
		%% Line 2174
		<'error'> when 'true' ->
		    RaceVarMap
		%% Line 2175
		<{'ok',Labels}> when 'true' ->
		    %% Line 2176
		    case Labels of
		      %% Line 2177
		      <[]> when 'true' ->
			  call 'dict':'erase'
			      (Var1, RaceVarMap)
		      %% Line 2178
		      <_X_Else> when 'true' ->
			  %% Line 2179
			  case call 'lists':'member'
				   (Var2, Labels) of
			    %% Line 2180
			    <'true'> when 'true' ->
				let <_cor4> =
				    %% Line 2182
				    call 'erlang':'--'
					(Labels, [Var2|[]])
				in  let <_cor3> =
					%% Line 2183
					call 'dict':'erase'
					    (Var1, RaceVarMap)
				    in  let <_cor5> =
					    %% Line 2182
					    apply 'bind_dict_vars_list'/3
						(Var1, _cor4, _cor3)
					in  %% Line 2181
					    apply 'unbind_dict_vars'/3
						(Var1, Var2, _cor5)
			    %% Line 2184
			    <'false'> when 'true' ->
				%% Line 2185
				apply 'unbind_dict_vars_helper'/4
				    (Labels, Var1, Var2, RaceVarMap)
			    ( <_cor6> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor6})
			      -| ['compiler_generated'] )
			  end
		    end
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	end
'unbind_dict_vars_helper'/4 =
    %% Line 2190
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2191
	case call 'dict':'size'
		 (_cor0) of
	  %% Line 2192
	  <0> when 'true' ->
	      _cor0
	  %% Line 2193
	  <_cor18> when 'true' ->
	      %% Line 2194
	      case _cor3 of
		%% Line 2195
		<[]> when 'true' ->
		    _cor0
		%% Line 2196
		<[Head|Tail]> when 'true' ->
		    let <_cor6> =
			%% Line 2198
			( case apply 'are_bound_labels'/3
				   (Head, _cor1, _cor0) of
			    ( <( 'true'
				 -| ['compiler_generated'] )> when 'true' ->
				  'true'
			      -| ['compiler_generated'] )
			    ( <( 'false'
				 -| ['compiler_generated'] )> when 'true' ->
				  %% Line 2199
				  apply 'are_bound_labels'/3
				      (_cor1, Head, _cor0)
			      -| ['compiler_generated'] )
			    ( <_cor4> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {( 'badarg'
					      -| ['compiler_generated'] ),_cor4}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    in  let <_cor10> =
			    %% Line 2198
			    case _cor6 of
			      %% Line 2200
			      <'true'> when 'true' ->
				  let <_cor8> =
				      %% Line 2201
				      call 'erlang':'--'
					  (_cor3, [Head|[]])
				  in  let <_cor7> =
					  %% Line 2202
					  call 'dict':'erase'
					      (_cor2, _cor0)
				      in  %% Line 2201
					  apply 'bind_dict_vars_list'/3
					      (_cor2, _cor8, _cor7)
			      %% Line 2203
			      <'false'> when 'true' ->
				  _cor0
			      ( <_cor9> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor9})
				-| ['compiler_generated'] )
			    end
			in  %% Line 2205
			    apply 'unbind_dict_vars_helper'/4
				(Tail, _cor2, _cor1, _cor10)
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor12})
		  -| ['compiler_generated'] )
	      end
	end
'var_analysis'/4 =
    %% Line 2209
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2210
	case _cor0 of
	  %% Line 2211
	  <'warn_whereis_register'> when 'true' ->
	      %% Line 2212
	      case _cor1 of
		<[WVA1|[WVA2|[WVA3|[WVA4|[]]]]]> when 'true' ->
		    let <ArgNos> =
			%% Line 2213
			apply 'lists_key_members_lists'/2
			    (WVA1, _cor3)
		    in  let <_cor11> =
			    %% Line 2214
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor8) ->
					  case _cor8 of
					    <[N|_cor7]> when 'true' ->
						let <_cor9> =
						    apply 'lists_get'/2
							(N, _cor2)
						in  let <_cor10> =
							apply 'lc$^0'/1
							    (_cor7)
						    in  ( [_cor9|_cor10]
							  -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor8> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor8})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (ArgNos)
			      -| ['list_comprehension'] )
			in  %% Line 2214
			    [_cor11|[WVA2|[WVA3|[WVA4|[]]]]]
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2215
	  <'warn_whereis_unregister'> when 'true' ->
	      %% Line 2216
	      case _cor1 of
		<[WVA1|[WVA2|[]]]> when 'true' ->
		    let <ArgNos> =
			%% Line 2217
			apply 'lists_key_members_lists'/2
			    (WVA1, _cor3)
		    in  let <_cor19> =
			    %% Line 2218
			    ( letrec
				  'lc$^1'/1 =
				      fun (_cor16) ->
					  case _cor16 of
					    <[N|_cor15]> when 'true' ->
						let <_cor17> =
						    apply 'lists_get'/2
							(N, _cor2)
						in  let <_cor18> =
							apply 'lc$^1'/1
							    (_cor15)
						    in  ( [_cor17|_cor18]
							  -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor16> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor16})
						    -| [{'function_name',{'lc$^1',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^1'/1
				      (ArgNos)
			      -| ['list_comprehension'] )
			in  %% Line 2218
			    [_cor19|[WVA2|[]]]
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2219
	  <'warn_ets_lookup_insert'> when 'true' ->
	      %% Line 2220
	      case _cor1 of
		<[WVA1|[WVA2|[WVA3|[WVA4|[]]]]]> when 'true' ->
		    let <ArgNos1> =
			%% Line 2221
			apply 'lists_key_members_lists'/2
			    (WVA1, _cor3)
		    in  let <ArgNos2> =
			    %% Line 2222
			    apply 'lists_key_members_lists'/2
				(WVA3, _cor3)
			in  let <_cor28> =
				%% Line 2223
				( letrec
				      'lc$^2'/1 =
					  fun (_cor25) ->
					      case _cor25 of
						<[N1|_cor24]> when 'true' ->
						    let <_cor26> =
							apply 'lists_get'/2
							    (N1, _cor2)
						    in  let <_cor27> =
							    apply 'lc$^2'/1
								(_cor24)
							in  ( [_cor26|_cor27]
							      -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor25> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor25})
							-| [{'function_name',{'lc$^2',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^2'/1
					  (ArgNos1)
				  -| ['list_comprehension'] )
			    in  let <_cor34> =
				    %% Line 2224
				    ( letrec
					  'lc$^3'/1 =
					      fun (_cor31) ->
						  case _cor31 of
						    <[N2|_cor30]> when 'true' ->
							let <_cor32> =
							    apply 'lists_get'/2
								(N2, _cor2)
							in  let <_cor33> =
								apply 'lc$^3'/1
								    (_cor30)
							    in  ( [_cor32|_cor33]
								  -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_cor31> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor31})
							    -| [{'function_name',{'lc$^3',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  apply 'lc$^3'/1
					      (ArgNos2)
				      -| ['list_comprehension'] )
				in  %% Line 2223
				    [_cor28|[WVA2|%% Line 2224
						  [_cor34|[WVA4|[]]]]]
		( <_cor20> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor20})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2225
	  <'warn_mnesia_dirty_read_write'> when 'true' ->
	      %% Line 2226
	      case _cor1 of
		<[WVA1|[WVA2|T]]> when 'true' ->
		    let <ArgNos> =
			%% Line 2227
			apply 'lists_key_members_lists'/2
			    (WVA1, _cor3)
		    in  let <_cor42> =
			    %% Line 2228
			    ( letrec
				  'lc$^4'/1 =
				      fun (_cor39) ->
					  case _cor39 of
					    <[N|_cor38]> when 'true' ->
						let <_cor40> =
						    apply 'lists_get'/2
							(N, _cor2)
						in  let <_cor41> =
							apply 'lc$^4'/1
							    (_cor38)
						    in  ( [_cor40|_cor41]
							  -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor39> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor39})
						    -| [{'function_name',{'lc$^4',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^4'/1
				      (ArgNos)
			      -| ['list_comprehension'] )
			in  %% Line 2228
			    [_cor42|[WVA2|T]]
		( <_cor35> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor35})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor43> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor43})
	    -| ['compiler_generated'] )
	end
'var_type_analysis'/6 =
    %% Line 2231
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <FunVarArgs> =
	    %% Line 2233
	    apply 'format_args'/4
		(_cor5, _cor4, _cor0, 'function_call')
	in  %% Line 2234
	    case _cor2 of
	      %% Line 2235
	      <'warn_whereis_register'> when 'true' ->
		  %% Line 2236
		  case _cor3 of
		    <[WVA1|[WVA2|[WVA3|[WVA4|[]]]]]> when 'true' ->
			let <Vars> =
			    %% Line 2237
			    apply 'find_all_bound_vars'/2
				(WVA1, _cor1)
			in  %% Line 2238
			    case apply 'lists_key_member_lists'/2
				     (Vars, FunVarArgs) of
			      %% Line 2239
			      <0> when 'true' ->
				  [Vars|[WVA2|[WVA3|[WVA4|[]]]]]
			      %% Line 2240
			      <N>
				  when call 'erlang':'is_integer'
					(N) ->
				  let <_cor9> =
				      %% Line 2241
				      call 'erlang':'+'
					  (N, 1)
				  in  let <_cor10> =
					  %% Line 2241
					  call 'lists':'nth'
					      (_cor9, FunVarArgs)
				      in  let <NewWVA2> =
					      %% Line 2241
					      call 'string':'tokens'
						  (_cor10, [32|[124]])
					  in  %% Line 2242
					      [Vars|[NewWVA2|[WVA3|[WVA4|[]]]]]
			      ( <_cor12> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor12})
				-| ['compiler_generated'] )
			    end
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor7})
		      -| ['compiler_generated'] )
		  end
	      %% Line 2244
	      <'warn_whereis_unregister'> when 'true' ->
		  %% Line 2245
		  case _cor3 of
		    <[WVA1|[WVA2|[]]]> when 'true' ->
			let <Vars> =
			    %% Line 2246
			    apply 'find_all_bound_vars'/2
				(WVA1, _cor1)
			in  %% Line 2247
			    case apply 'lists_key_member_lists'/2
				     (Vars, FunVarArgs) of
			      %% Line 2248
			      <0> when 'true' ->
				  [Vars|[WVA2|[]]]
			      %% Line 2249
			      <N>
				  when call 'erlang':'is_integer'
					(N) ->
				  let <_cor15> =
				      %% Line 2250
				      call 'erlang':'+'
					  (N, 1)
				  in  let <_cor16> =
					  %% Line 2250
					  call 'lists':'nth'
					      (_cor15, FunVarArgs)
				      in  let <NewWVA2> =
					      %% Line 2250
					      call 'string':'tokens'
						  (_cor16, [32|[124]])
					  in  %% Line 2251
					      [Vars|[NewWVA2|[]]]
			      ( <_cor18> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor18})
				-| ['compiler_generated'] )
			    end
		    ( <_cor13> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor13})
		      -| ['compiler_generated'] )
		  end
	      %% Line 2253
	      <'warn_ets_lookup_insert'> when 'true' ->
		  %% Line 2254
		  case _cor3 of
		    <[WVA1|[WVA2|[WVA3|[WVA4|[]]]]]> when 'true' ->
			let <Vars1> =
			    %% Line 2255
			    apply 'find_all_bound_vars'/2
				(WVA1, _cor1)
			in  let <_cor25> =
				%% Line 2257
				case apply 'lists_key_member_lists'/2
					 (Vars1, FunVarArgs) of
				  %% Line 2258
				  <0> when 'true' ->
				      [Vars1|[WVA2|[]]]
				  %% Line 2259
				  <N1>
				      when call 'erlang':'is_integer'
					    (N1) ->
				      let <_cor21> =
					  %% Line 2260
					  call 'erlang':'+'
					      (N1, 1)
				      in  let <_cor22> =
					      %% Line 2260
					      call 'lists':'nth'
						  (_cor21, FunVarArgs)
					  in  let <NewWVA2> =
						  %% Line 2260
						  call 'string':'tokens'
						      (_cor22, [32|[124]])
					      in  %% Line 2261
						  [Vars1|[NewWVA2|[]]]
				  ( <_cor24> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor24})
				    -| ['compiler_generated'] )
				end
			    in  let <_cor33> =
				    %% Line 2265
				    ( letrec
					  'lc$^0'/1 =
					      fun (_cor30) ->
						  case _cor30 of
						    <[A|_cor28]> when 'true' ->
							let <_cor31> =
							    apply 'find_all_bound_vars'/2
								(A, _cor1)
							in  let <_cor32> =
								apply 'lc$^0'/1
								    (_cor28)
							    in  ( [_cor31|_cor32]
								  -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_cor30> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor30})
							    -| [{'function_name',{'lc$^0',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  let <_cor29> =
					      apply 'ets_list_args'/1
						  (WVA3)
					  in  apply 'lc$^0'/1
						  (_cor29)
				      -| ['list_comprehension'] )
				in  let <Vars2> =
					%% Line 2264
					call 'lists':'flatten'
					    (_cor33)
				    in  %% Line 2266
					case apply 'lists_key_member_lists'/2
						 (Vars2, FunVarArgs) of
					  %% Line 2267
					  <0> when 'true' ->
					      call 'erlang':'++'
						  (_cor25, [Vars2|[WVA4|[]]])
					  %% Line 2268
					  <N2>
					      when call 'erlang':'is_integer'
						    (N2) ->
					      let <_cor35> =
						  %% Line 2271
						  call 'erlang':'+'
						      (N2, 1)
					      in  let <_cor36> =
						      %% Line 2271
						      call 'lists':'nth'
							  (_cor35, FunVarArgs)
						  in  let <_cor37> =
							  %% Line 2271
							  apply 'ets_tuple_argtypes1'/4
							      (_cor36, [], [], 0)
						      in  let <NewWVA4> =
							      %% Line 2270
							      apply 'ets_tuple_argtypes2'/2
								  (_cor37, %% Line 2272
									   [])
							  in  %% Line 2273
							      call 'erlang':'++'
								  (_cor25, [Vars2|[NewWVA4|[]]])
					  ( <_cor39> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor39})
					    -| ['compiler_generated'] )
					end
		    ( <_cor19> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor19})
		      -| ['compiler_generated'] )
		  end
	      %% Line 2276
	      <'warn_mnesia_dirty_read_write'> when 'true' ->
		  %% Line 2277
		  case _cor3 of
		    <[WVA1|[WVA2|T]]> when 'true' ->
			let <_cor42> =
			    %% Line 2279
			    case T of
			      %% Line 2280
			      <[]> when 'true' ->
				  1
			      %% Line 2281
			      <_X_Else> when 'true' ->
				  2
			    end
			in  let <Vars> =
				%% Line 2283
				apply 'find_all_bound_vars'/2
				    (WVA1, _cor1)
			    in  %% Line 2284
				case apply 'lists_key_member_lists'/2
					 (Vars, FunVarArgs) of
				  %% Line 2285
				  <0> when 'true' ->
				      [Vars|[WVA2|T]]
				  %% Line 2286
				  <N>
				      when call 'erlang':'is_integer'
					    (N) ->
				      let <_cor55> =
					  %% Line 2288
					  case _cor42 of
					    %% Line 2289
					    <1> when 'true' ->
						%% Line 2290
						( letrec
						      'lc$^1'/1 =
							  fun (_cor49) ->
							      case _cor49 of
								<[R|_cor46]> when 'true' ->
								    let <_cor50> =
									apply 'mnesia_record_tab'/1
									    (R)
								    in  let <_cor51> =
									    apply 'lc$^1'/1
										(_cor46)
									in  ( [_cor50|_cor51]
									      -| ['compiler_generated'] )
								<[]> when 'true' ->
								    []
								( <_cor49> when 'true' ->
								      ( primop 'match_fail'
									    ({'function_clause',_cor49})
									-| [{'function_name',{'lc$^1',1}}] )
								  -| ['compiler_generated'] )
							      end
						  in  let <_cor47> =
							  %% Line 2291
							  call 'lists':'nth'
							      (2, FunVarArgs)
						      in  let <_cor48> =
							      call 'string':'tokens'
								  (_cor47, %% Line 2291
									   [32|[124]])
							  in  apply 'lc$^1'/1
								  (_cor48)
						  -| ['list_comprehension'] )
					    %% Line 2292
					    <2> when 'true' ->
						let <_cor52> =
						    %% Line 2293
						    call 'erlang':'+'
							(N, 1)
						in  let <_cor53> =
							%% Line 2293
							call 'lists':'nth'
							    (_cor52, FunVarArgs)
						    in  %% Line 2293
							call 'string':'tokens'
							    (_cor53, [32|[124]])
					    ( <_cor54> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor54})
					      -| ['compiler_generated'] )
					  end
				      in  %% Line 2295
					  [Vars|[_cor55|T]]
				  ( <_cor57> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor57})
				    -| ['compiler_generated'] )
				end
		    ( <_cor40> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor40})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor58> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor58})
		-| ['compiler_generated'] )
	    end
'add_race_warning'/2 =
    %% Line 2305
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Warn,Races = {'races',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,Warns}> when 'true' ->
	      let <_rec22> =
		  %% Line 2306
		  [Warn|Warns]
	      in  %% Line 2306
		  call 'erlang':'setelement'
		      (10, Races, _rec22)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'add_race_warning',2}}] )
	    -| ['compiler_generated'] )
	end
'get_race_warn'/5 =
    %% Line 2308
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2309
	case _cor4 of
	  <{M,F,_X_A}> when 'true' ->
	      %% Line 2310
	      case _cor1 of
		%% Line 2311
		<[]> when 'true' ->
		    {_cor0,'no_race'}
		%% Line 2312
		<_X_Other> when 'true' ->
		    %% Line 2313
		    {_cor0,{'race_condition',[M|[F|[_cor3|[_cor2|[_cor0|[_cor1|[]]]]]]]}}
	      end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'get_race_warnings'/2 =
    %% Line 2319
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'races',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,RaceWarnings},State> when 'true' ->
	      %% Line 2320
	      apply 'get_race_warnings_helper'/2
		  (RaceWarnings, State)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'get_race_warnings',2}}] )
	    -| ['compiler_generated'] )
	end
'get_race_warnings_helper'/2 =
    %% Line 2322
    fun (_cor1,_cor0) ->
	%% Line 2323
	case _cor1 of
	  %% Line 2324
	  <[]> when 'true' ->
	      let <_cor2> =
		  %% Line 2325
		  call 'dialyzer_dataflow':'state__get_races'
		      (_cor0)
	      in  %% Line 2325
		  {_cor2,_cor0}
	  %% Line 2326
	  <[H|T]> when 'true' ->
	      %% Line 2327
	      case H of
		<{RaceWarnTag,FileLine,{'race_condition',[M|[F|[A|[AT|[S|[DepList|[]]]]]]]}}> when 'true' ->
		    let <_cor13> =
			%% Line 2329
			case RaceWarnTag of
			  %% Line 2330
			  <'warn_whereis_register'> when 'true' ->
			      let <_cor4> =
				  %% Line 2331
				  call 'lists':'keysort'
				      (7, DepList)
			      in  %% Line 2331
				  apply 'get_reason'/2
				      (_cor4, %% Line 2332
					      [109|[105|[103|[104|[116|[32|[102|[97|[105|[108|[32|[100|[117|[101|[32|[116|[111|[32|[97|[32|[112|[111|[115|[115|[105|[98|[108|[101|[32|[114|[97|[99|[101|[32|[99|[111|[110|[100|[105|[116|[105|[111|[110|[32|[99|[97|[117|[115|[101|[100|[32|[98|[121|[32|[105|[116|[115|[32|[99|[111|[109|[98|[105|[110|[97|[116|[105|[111|[110|[32|[119|[105|[116|[104|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
			  %% Line 2334
			  <'warn_whereis_unregister'> when 'true' ->
			      let <_cor5> =
				  %% Line 2335
				  call 'lists':'keysort'
				      (7, DepList)
			      in  %% Line 2335
				  apply 'get_reason'/2
				      (_cor5, %% Line 2336
					      [109|[105|[103|[104|[116|[32|[102|[97|[105|[108|[32|[100|[117|[101|[32|[116|[111|[32|[97|[32|[112|[111|[115|[115|[105|[98|[108|[101|[32|[114|[97|[99|[101|[32|[99|[111|[110|[100|[105|[116|[105|[111|[110|[32|[99|[97|[117|[115|[101|[100|[32|[98|[121|[32|[105|[116|[115|[32|[99|[111|[109|[98|[105|[110|[97|[116|[105|[111|[110|[32|[119|[105|[116|[104|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
			  %% Line 2338
			  <'warn_ets_lookup_insert'> when 'true' ->
			      let <_cor8> =
				  %% Line 2339
				  call 'lists':'keysort'
				      (7, DepList)
			      in  %% Line 2339
				  apply 'get_reason'/2
				      (_cor8, [109|[105|[103|[104|[116|[32|[104|[97|[118|[101|[32|[97|[110|[32|[117|[110|[105|[110|[116|[101|[110|[100|[101|[100|[32|[101|[102|[102|[101|[99|[116|[32|[100|[117|[101|[32|[116|[111|[32|[97|[32|[112|[111|[115|[115|[105|[98|[108|[101|[32|[114|[97|[99|[101|[32|[99|[111|[110|[100|[105|[116|[105|[111|[110|[32|[99|[97|[117|[115|[101|[100|[32|[98|[121|[32|[105|[116|[115|[32|[99|[111|[109|[98|[105|[110|[97|[116|[105|[111|[110|[32|[119|[105|[116|[104|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
			  %% Line 2343
			  <'warn_mnesia_dirty_read_write'> when 'true' ->
			      let <_cor11> =
				  %% Line 2344
				  call 'lists':'keysort'
				      (7, DepList)
			      in  %% Line 2344
				  apply 'get_reason'/2
				      (_cor11, [109|[105|[103|[104|[116|[32|[104|[97|[118|[101|[32|[97|[110|[32|[117|[110|[105|[110|[116|[101|[110|[100|[101|[100|[32|[101|[102|[102|[101|[99|[116|[32|[100|[117|[101|[32|[116|[111|[32|[97|[32|[112|[111|[115|[115|[105|[98|[108|[101|[32|[114|[97|[99|[101|[32|[99|[111|[110|[100|[105|[116|[105|[111|[110|[32|[99|[97|[117|[115|[101|[100|[32|[98|[121|[32|[105|[116|[115|[32|[99|[111|[109|[98|[105|[110|[97|[116|[105|[111|[110|[32|[119|[105|[116|[104|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
			  ( <_cor12> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor12})
			    -| ['compiler_generated'] )
			end
		    in  let <_cor15> =
			    %% Line 2352
			    call 'dialyzer_dataflow':'format_args'
				(A, AT, S)
			in  let <W> =
				%% Line 2350
				{'warn_race_condition',FileLine,%% Line 2351
								{'race_condition',%% Line 2352
										  [M|[F|[_cor15|[_cor13|[]]]]]}}
			    in  let <_cor17> =
				    %% Line 2354
				    call 'dialyzer_dataflow':'state__add_warning'
					(W, _cor0)
				in  %% Line 2353
				    apply 'get_race_warnings_helper'/2
					(T, _cor17)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor18> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor18})
	    -| ['compiler_generated'] )
	end
'get_reason'/2 =
    %% Line 2357
    fun (_cor1,_cor0) ->
	%% Line 2358
	case _cor1 of
	  %% Line 2359
	  <[]> when 'true' ->
	      []
	  %% Line 2360
	  <[{'dep_call',Call,_cor19,ArgTypes,Args,%% Line 2361
						  State,%% Line 2361
							{File,Line},_cor20}|%% Line 2361
									    T]> when 'true' ->
	      let <_cor11> =
		  %% Line 2364
		  case Call of
		    %% Line 2365
		    <'whereis'> when 'true' ->
			[116|[104|[101|[32|[101|[114|[108|[97|[110|[103|[58|[119|[104|[101|[114|[101|[105|[115]]]]]]]]]]]]]]]]]]
		    %% Line 2366
		    <'ets_lookup'> when 'true' ->
			[116|[104|[101|[32|[101|[116|[115|[58|[108|[111|[111|[107|[117|[112]]]]]]]]]]]]]]
		    %% Line 2367
		    <'mnesia_dirty_read'> when 'true' ->
			[116|[104|[101|[32|[109|[110|[101|[115|[105|[97|[58|[100|[105|[114|[116|[121|[95|[114|[101|[97|[100]]]]]]]]]]]]]]]]]]]]]
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor10})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor8> =
		      %% Line 2369
		      call 'dialyzer_dataflow':'format_args'
			  (Args, ArgTypes, State)
		  in  let <_cor5> =
			  %% Line 2371
			  call 'filename':'basename'
			      (File)
		      in  let <_cor2> =
			      %% Line 2373
			      call 'io_lib':'write'
				  (Line)
			  in  let <_cor3> =
				  %% Line 2373
				  call 'lists':'flatten'
				      (_cor2)
			      in  let <_cor4> =
				      %% Line 2372
				      call 'erlang':'++'
					  ([32|[111|[110|[32|[108|[105|[110|[101|[32]]]]]]]]], _cor3)
				  in  let <_cor6> =
					  %% Line 2371
					  call 'erlang':'++'
					      (_cor5, _cor4)
				      in  let <_cor7> =
					      %% Line 2370
					      call 'erlang':'++'
						  ([32|[99|[97|[108|[108|[32|[105|[110|[32]]]]]]]]], _cor6)
					  in  let <_cor9> =
						  %% Line 2369
						  call 'erlang':'++'
						      (_cor8, _cor7)
					      in  let <_cor12> =
						      %% Line 2368
						      call 'erlang':'++'
							  (_cor11, _cor9)
						  in  let <R> =
							  %% Line 2363
							  call 'erlang':'++'
							      (_cor0, _cor12)
						      in  %% Line 2374
							  case T of
							    %% Line 2375
							    <[]> when 'true' ->
								R
							    %% Line 2376
							    <_cor21> when 'true' ->
								let <_cor14> =
								    call 'erlang':'++'
									(R, [44|[32]])
								in  apply 'get_reason'/2
									(T, _cor14)
							  end
	  ( <_cor16> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor16})
	    -| ['compiler_generated'] )
	end
'state__add_race_warning'/4 =
    %% Line 2380
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2381
	case _cor2 of
	  %% Line 2382
	  <'no_race'> when 'true' ->
	      _cor3
	  %% Line 2383
	  <_X_Else> when 'true' ->
	      let <Races> =
		  %% Line 2384
		  call 'dialyzer_dataflow':'state__get_races'
		      (_cor3)
	      in  let <Warn> = {_cor1,_cor0,_cor2}
		  in  let <_cor6> =
			  %% Line 2386
			  apply 'add_race_warning'/2
			      (Warn, Races)
		      in  %% Line 2386
			  call 'dialyzer_dataflow':'state__put_races'
			      (_cor6, _cor3)
	end
'beg_clause_new'/3 =
    %% Line 2398
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2399
	{'beg_clause',_cor2,_cor1,_cor0}
'cleanup'/1 =
    %% Line 2403
    fun (_cor0) ->
	case _cor0 of
	  <{'races',_cor2,_cor3,_cor4,_cor5,RaceList,_cor6,_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 2404
	      {'races','undefined','undefined','empty','no_t',RaceList,0,[],'false',[]}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'cleanup',1}}] )
	    -| ['compiler_generated'] )
	end
'end_case_new'/1 =
    %% Line 2408
    fun (_cor0) ->
	%% Line 2409
	{'end_case',_cor0}
'end_clause_new'/3 =
    %% Line 2414
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2415
	{'end_clause',_cor2,_cor1,_cor0}
'get_curr_fun'/1 =
    %% Line 2419
    fun (_cor0) ->
	case _cor0 of
	  <{'races',CurrFun,_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 2420
	      CurrFun
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_curr_fun',1}}] )
	    -| ['compiler_generated'] )
	end
'get_curr_fun_args'/1 =
    %% Line 2424
    fun (_cor0) ->
	case _cor0 of
	  <{'races',_cor2,_cor3,CurrFunArgs,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 2425
	      CurrFunArgs
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_curr_fun_args',1}}] )
	    -| ['compiler_generated'] )
	end
'get_new_table'/1 =
    %% Line 2429
    fun (_cor0) ->
	case _cor0 of
	  <{'races',_cor2,_cor3,_cor4,Table,_cor5,_cor6,_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 2430
	      Table
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_new_table',1}}] )
	    -| ['compiler_generated'] )
	end
'get_race_analysis'/1 =
    %% Line 2434
    fun (_cor0) ->
	case _cor0 of
	  <{'races',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,RaceAnalysis,_cor9}> when 'true' ->
	      %% Line 2435
	      RaceAnalysis
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_race_analysis',1}}] )
	    -| ['compiler_generated'] )
	end
'get_race_list'/1 =
    %% Line 2439
    fun (_cor0) ->
	case _cor0 of
	  <{'races',_cor2,_cor3,_cor4,_cor5,RaceList,_cor6,_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 2440
	      RaceList
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_race_list',1}}] )
	    -| ['compiler_generated'] )
	end
'get_race_list_size'/1 =
    %% Line 2444
    fun (_cor0) ->
	case _cor0 of
	  <{'races',_cor2,_cor3,_cor4,_cor5,_cor6,RaceListSize,_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 2445
	      RaceListSize
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_race_list_size',1}}] )
	    -| ['compiler_generated'] )
	end
'get_race_list_and_size'/1 =
    %% Line 2449
    fun (_cor0) ->
	case _cor0 of
	  <{'races',_cor2,_cor3,_cor4,_cor5,RaceList,%% Line 2450
						     RaceListSize,_cor6,_cor7,_cor8}> when 'true' ->
	      %% Line 2451
	      {RaceList,RaceListSize}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_race_list_and_size',1}}] )
	    -| ['compiler_generated'] )
	end
'let_tag_new'/2 =
    %% Line 2455
    fun (_cor1,_cor0) ->
	%% Line 2456
	{'let_tag',_cor1,_cor0}
'new'/0 =
    %% Line 2460
    fun () ->
	{'races','undefined','undefined','empty','no_t',[],0,[],'false',[]}
'put_curr_fun'/3 =
    %% Line 2465
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2466
	case _cor0 of
	  <{'races',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18}> when 'true' ->
	      let <_cor4> =
		  %% Line 2468
		  call 'erlang':'setelement'
		      (4, _cor0, 'empty')
	      in  let <_cor5> =
		      %% Line 2467
		      call 'erlang':'setelement'
			  (3, _cor4, _cor1)
		  in  call 'erlang':'setelement'
			  (2, _cor5, _cor2)
	  ( <_cor19> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','races'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'put_fun_args'/2 =
    %% Line 2472
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Args,Races = {'races',_cor7,_cor8,CurrFunArgs,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14}> when 'true' ->
	      %% Line 2473
	      case CurrFunArgs of
		%% Line 2474
		<'empty'> when 'true' ->
		    call 'erlang':'setelement'
			(4, Races, Args)
		%% Line 2475
		<_X_Other> when 'true' ->
		    Races
	      end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'put_fun_args',2}}] )
	    -| ['compiler_generated'] )
	end
'put_race_analysis'/2 =
    %% Line 2481
    fun (_cor1,_cor0) ->
	%% Line 2482
	case _cor0 of
	  <{'races',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14}> when 'true' ->
	      call 'erlang':'setelement'
		  (9, _cor0, _cor1)
	  ( <_cor15> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','races'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'put_race_list'/3 =
    %% Line 2487
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2488
	case _cor0 of
	  <{'races',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17}> when 'true' ->
	      let <_cor4> =
		  call 'erlang':'setelement'
		      (7, _cor0, _cor1)
	      in  call 'erlang':'setelement'
		      (6, _cor4, _cor2)
	  ( <_cor18> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','races'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('dialyzer_races')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('dialyzer_races', _cor0)
end