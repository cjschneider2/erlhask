module 'dialyzer' ['format_warning'/1,
		   'format_warning'/2,
		   'gui'/0,
		   'gui'/1,
		   'module_info'/0,
		   'module_info'/1,
		   'plain_cl'/0,
		   'plt_info'/1,
		   'run'/1]
    attributes [%% Line 33
		'type' =
		    %% Line 33
		    [{'dial_ret',{'type',33,'union',[{'integer',33,0}|[{'integer',34,1}|[{'integer',35,2}]]]},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'dial_warn_tag',{'type',68,'union',[{'atom',68,'warn_return_no_exit'}|[{'atom',68,'warn_return_only_exit'}|[{'atom',69,'warn_not_called'}|[{'atom',69,'warn_non_proper_list'}|[{'atom',70,'warn_matching'}|[{'atom',70,'warn_opaque'}|[{'atom',70,'warn_fun_app'}|[{'atom',71,'warn_failing_call'}|[{'atom',71,'warn_bin_construction'}|[{'atom',72,'warn_contract_types'}|[{'atom',72,'warn_contract_syntax'}|[{'atom',73,'warn_contract_not_equal'}|[{'atom',73,'warn_contract_subtype'}|[{'atom',74,'warn_contract_supertype'}|[{'atom',74,'warn_callgraph'}|[{'atom',75,'warn_umatched_return'}|[{'atom',75,'warn_race_condition'}|[{'atom',76,'warn_behaviour'}|[{'atom',76,'warn_contract_range'}|[{'atom',77,'warn_undefined_callbacks'}|[{'atom',77,'warn_unknown'}]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'file_line',{'type',83,'tuple',[{'remote_type',83,[{'atom',83,'file'}|[{'atom',83,'filename'}|[[]]]]}|[{'type',83,'non_neg_integer',[]}]]},[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{'dial_warning',{'type',84,'tuple',[{'type',84,'dial_warn_tag',[]}|[{'type',84,'file_line',[]}|[{'type',84,'tuple',[{'type',84,'atom',[]}|[{'type',84,'list',[{'type',84,'term',[]}]}]]}]]]},[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{'dial_error',{'type',89,'any',[]},[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{'anal_type',{'type',96,'union',[{'atom',96,'succ_typings'}|[{'atom',96,'plt_build'}]]},[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{'anal_type1',{'type',97,'union',[{'type',97,'anal_type',[]}|[{'atom',97,'plt_add'}|[{'atom',97,'plt_check'}|[{'atom',97,'plt_remove'}]]]]},[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{'contr_constr',{'type',98,'tuple',[{'atom',98,'subtype'}|[{'remote_type',98,[{'atom',98,'erl_types'}|[{'atom',98,'erl_type'}|[[]]]]}|[{'remote_type',98,[{'atom',98,'erl_types'}|[{'atom',98,'erl_type'}|[[]]]]}]]]},[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{'contract_pair',{'type',99,'tuple',[{'remote_type',99,[{'atom',99,'erl_types'}|[{'atom',99,'erl_type'}|[[]]]]}|[{'type',99,'list',[{'type',99,'contr_constr',[]}]}]]},[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{'dial_define',{'type',100,'tuple',[{'type',100,'atom',[]}|[{'type',100,'term',[]}]]},[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{'dial_option',{'type',101,'tuple',[{'type',101,'atom',[]}|[{'type',101,'term',[]}]]},[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{'dial_options',{'type',102,'list',[{'type',102,'dial_option',[]}]},[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{'fopt',{'type',103,'union',[{'atom',103,'basename'}|[{'atom',103,'fullpath'}]]},[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{'format',{'type',104,'union',[{'atom',104,'formatted'}|[{'atom',104,'raw'}]]},[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{'label',{'type',105,'non_neg_integer',[]},[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{'rep_mode',{'type',106,'union',[{'atom',106,'quiet'}|[{'atom',106,'normal'}|[{'atom',106,'verbose'}]]]},[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{'start_from',{'type',107,'union',[{'atom',107,'byte_code'}|[{'atom',107,'src_code'}]]},[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{'mfa_or_funlbl',{'type',108,'union',[{'type',108,'label',[]}|[{'type',108,'mfa',[]}]]},[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{'solver',{'type',109,'union',[{'atom',109,'v1'}|[{'atom',109,'v2'}]]},[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{{'record','analysis'},[{'typed_record_field',{'record_field',115,{'atom',115,'analysis_pid'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'pid',[]}]]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'type'},{'atom',116,'succ_typings'}},{'type',116,'anal_type',[]}}|[{'typed_record_field',{'record_field',117,{'atom',117,'defines'},{'nil',117}},{'type',117,'list',[{'type',117,'dial_define',[]}]}}|[{'typed_record_field',{'record_field',118,{'atom',118,'doc_plt'}},{'type',118,'union',[{'atom',118,'undefined'}|[{'remote_type',118,[{'atom',118,'dialyzer_plt'}|[{'atom',118,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',119,{'atom',119,'files'},{'nil',119}},{'type',119,'list',[{'remote_type',119,[{'atom',119,'file'}|[{'atom',119,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'include_dirs'},{'nil',120}},{'type',120,'list',[{'remote_type',120,[{'atom',120,'file'}|[{'atom',120,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',121,{'atom',121,'start_from'},{'atom',121,'byte_code'}},{'type',121,'start_from',[]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'plt'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'remote_type',122,[{'atom',122,'dialyzer_plt'}|[{'atom',122,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'use_contracts'},{'atom',123,'true'}},{'type',123,'boolean',[]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'race_detection'},{'atom',124,'false'}},{'type',124,'boolean',[]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'behaviours_chk'},{'atom',125,'false'}},{'type',125,'boolean',[]}}|[{'typed_record_field',{'record_field',126,{'atom',126,'timing'},{'atom',126,'false'}},{'type',126,'union',[{'type',126,'boolean',[]}|[{'atom',126,'debug'}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'timing_server'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'remote_type',127,[{'atom',127,'dialyzer_timing'}|[{'atom',127,'timing_server'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'callgraph_file'},{'string',128,[]}},{'remote_type',128,[{'atom',128,'file'}|[{'atom',128,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'solvers'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'list',[{'type',129,'solver',[]}]}]]}}]]]]]]]]]]]]]]],[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{{'record','options'},[{'typed_record_field',{'record_field',131,{'atom',131,'files'},{'nil',131}},{'type',131,'list',[{'remote_type',131,[{'atom',131,'file'}|[{'atom',131,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'files_rec'},{'nil',132}},{'type',132,'list',[{'remote_type',132,[{'atom',132,'file'}|[{'atom',132,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',133,{'atom',133,'analysis_type'},{'atom',133,'succ_typings'}},{'type',133,'anal_type1',[]}}|[{'typed_record_field',{'record_field',134,{'atom',134,'timing'},{'atom',134,'false'}},{'type',134,'union',[{'type',134,'boolean',[]}|[{'atom',134,'debug'}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'defines'},{'nil',135}},{'type',135,'list',[{'type',135,'dial_define',[]}]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'from'},{'atom',136,'byte_code'}},{'type',136,'start_from',[]}}|[{'typed_record_field',{'record_field',137,{'atom',137,'get_warnings'},{'atom',137,'maybe'}},{'type',137,'union',[{'type',137,'boolean',[]}|[{'atom',137,'maybe'}]]}}|[{'typed_record_field',{'record_field',138,{'atom',138,'init_plts'},{'nil',138}},{'type',138,'list',[{'remote_type',138,[{'atom',138,'file'}|[{'atom',138,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',139,{'atom',139,'include_dirs'},{'nil',139}},{'type',139,'list',[{'remote_type',139,[{'atom',139,'file'}|[{'atom',139,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'output_plt'},{'atom',140,'none'}},{'type',140,'union',[{'atom',140,'none'}|[{'remote_type',140,[{'atom',140,'file'}|[{'atom',140,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',141,{'atom',141,'legal_warnings'},{'call',141,{'remote',141,{'atom',141,'ordsets'},{'atom',141,'new'}},[]}},{'remote_type',141,[{'atom',141,'ordsets'}|[{'atom',141,'ordset'}|[[{'type',141,'dial_warn_tag',[]}]]]]}}|[{'typed_record_field',{'record_field',142,{'atom',142,'report_mode'},{'atom',142,'normal'}},{'type',142,'rep_mode',[]}}|[{'typed_record_field',{'record_field',143,{'atom',143,'erlang_mode'},{'atom',143,'false'}},{'type',143,'boolean',[]}}|[{'typed_record_field',{'record_field',144,{'atom',144,'use_contracts'},{'atom',144,'true'}},{'type',144,'boolean',[]}}|[{'typed_record_field',{'record_field',145,{'atom',145,'output_file'},{'atom',145,'none'}},{'type',145,'union',[{'atom',145,'none'}|[{'remote_type',145,[{'atom',145,'file'}|[{'atom',145,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',146,{'atom',146,'output_format'},{'atom',146,'formatted'}},{'type',146,'format',[]}}|[{'typed_record_field',{'record_field',147,{'atom',147,'filename_opt'},{'atom',147,'basename'}},{'type',147,'fopt',[]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'callgraph_file'},{'string',148,[]}},{'remote_type',148,[{'atom',148,'file'}|[{'atom',148,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'check_plt'},{'atom',149,'true'}},{'type',149,'boolean',[]}}|[{'typed_record_field',{'record_field',150,{'atom',150,'solvers'},{'nil',150}},{'type',150,'list',[{'type',150,'solver',[]}]}}]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 152
		'type' =
		    %% Line 152
		    [{{'record','contract'},[{'typed_record_field',{'record_field',152,{'atom',152,'contracts'},{'nil',152}},{'type',152,'list',[{'type',152,'contract_pair',[]}]}}|[{'typed_record_field',{'record_field',153,{'atom',153,'args'},{'nil',153}},{'type',153,'list',[{'remote_type',153,[{'atom',153,'erl_types'}|[{'atom',153,'erl_type'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',154,{'atom',154,'forms'},{'nil',154}},{'type',154,'list',[{'type',154,'tuple',[{'var',154,'_'}|[{'var',154,'_'}]]}]}}]]],[]}],
		%% Line 57
		'spec' =
		    %% Line 57
		    [{{'plain_cl',0},[{'type',57,'fun',[{'type',57,'product',[]}|[{'type',57,'no_return',[]}]]}]}],
		%% Line 157
		'spec' =
		    %% Line 157
		    [{{'run',1},[{'type',157,'fun',[{'type',157,'product',[{'type',157,'dial_options',[]}]}|[{'type',157,'list',[{'type',157,'dial_warning',[]}]}]]}]}],
		%% Line 189
		'spec' =
		    %% Line 189
		    [{{'gui',0},[{'type',189,'fun',[{'type',189,'product',[]}|[{'atom',189,'ok'}]]}]}],
		%% Line 194
		'spec' =
		    %% Line 194
		    [{{'gui',1},[{'type',194,'fun',[{'type',194,'product',[{'type',194,'dial_options',[]}]}|[{'atom',194,'ok'}]]}]}],
		%% Line 225
		'spec' =
		    %% Line 225
		    [{{'plt_info',1},[{'type',225,'fun',[{'type',225,'product',[{'remote_type',225,[{'atom',225,'file'}|[{'atom',225,'filename'}|[[]]]]}]}|[{'type',226,'union',[{'type',226,'tuple',[{'atom',226,'ok'}|[{'type',226,'list',[{'type',226,'tuple',[{'atom',226,'files'}|[{'type',226,'list',[{'remote_type',226,[{'atom',226,'file'}|[{'atom',226,'filename'}|[[]]]]}]}]]}]}]]}|[{'type',226,'tuple',[{'atom',226,'error'}|[{'type',226,'atom',[]}]]}]]}]]}]}],
		%% Line 239
		'type' =
		    %% Line 239
		    [{'doit_ret',{'type',239,'union',[{'type',239,'tuple',[{'atom',239,'ok'}|[{'type',239,'dial_ret',[]}]]}|[{'type',239,'tuple',[{'atom',239,'error'}|[{'type',239,'string',[]}]]}]]},[]}],
		%% Line 249
		'spec' =
		    %% Line 249
		    [{{'cl_error',1},[{'type',249,'fun',[{'type',249,'product',[{'type',249,'string',[]}]}|[{'type',249,'no_return',[]}]]}]}],
		%% Line 254
		'spec' =
		    %% Line 254
		    [{{'gui_halt',2},[{'type',254,'fun',[{'type',254,'product',[{'type',254,'doit_ret',[]}|[{'type',254,'record',[{'atom',254,'options'}]}]]}|[{'type',254,'no_return',[]}]]}]}],
		%% Line 259
		'spec' =
		    %% Line 259
		    [{{'cl_halt',2},[{'type',259,'fun',[{'type',259,'product',[{'type',259,'doit_ret',[]}|[{'type',259,'record',[{'atom',259,'options'}]}]]}|[{'type',259,'no_return',[]}]]}]}],
		%% Line 278
		'spec' =
		    %% Line 278
		    [{{'cl_check_log',1},[{'type',278,'fun',[{'type',278,'product',[{'type',278,'union',[{'atom',278,'none'}|[{'remote_type',278,[{'atom',278,'file'}|[{'atom',278,'filename'}|[[]]]]}]]}]}|[{'atom',278,'ok'}]]}]}],
		%% Line 285
		'spec' =
		    %% Line 285
		    [{{'format_warning',1},[{'type',285,'fun',[{'type',285,'product',[{'type',285,'dial_warning',[]}]}|[{'type',285,'string',[]}]]}]}],
		%% Line 290
		'spec' =
		    %% Line 290
		    [{{'format_warning',2},[{'type',290,'fun',[{'type',290,'product',[{'type',290,'dial_warning',[]}|[{'type',290,'fopt',[]}]]}|[{'type',290,'string',[]}]]}]}]]
'plain_cl'/0 =
    %% Line 59
    fun () ->
	%% Line 60
	case call 'dialyzer_cl_parse':'start'
		 () of
	  %% Line 61
	  <{'check_init',Opts}> when 'true' ->
	      let <_cor0> =
		  %% Line 62
		  apply 'cl_check_init'/1
		      (Opts)
	      in  %% Line 62
		  apply 'cl_halt'/2
		      (_cor0, Opts)
	  %% Line 63
	  <{'plt_info',Opts}> when 'true' ->
	      let <_cor1> =
		  %% Line 64
		  apply 'cl_print_plt_info'/1
		      (Opts)
	      in  %% Line 64
		  apply 'cl_halt'/2
		      (_cor1, Opts)
	  %% Line 65
	  <{'gui',Opts}> when 'true' ->
	      do  %% Line 66
		  try
		      apply 'check_gui_options'/1
			  (Opts)
		  of <_cor2> ->
		      _cor2
		  catch <_cor5,_cor4,_cor3> ->
		      case <_cor5,_cor4,_cor3> of
			%% Line 67
			<'throw',{'dialyzer_error',Msg},_cor25> when 'true' ->
			    apply 'cl_error'/1
				(Msg)
			( <_cor5,_cor4,_cor3> when 'true' ->
			      primop 'raise'
				  (_cor3, _cor4)
			  -| ['compiler_generated'] )
		      end
		  %% Line 69
		  ( case Opts of
		      ( <( {'options',_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_rec0,_cor44}
			   -| ['compiler_generated'] )> when 'true' ->
			    case _rec0 of
			      %% Line 70
			      <'true'> when 'true' ->
				  let <_cor10> =
				      %% Line 71
				      call 'erlang':'setelement'
					  (8, Opts, 'false')
				  in  %% Line 71
				      case apply 'cl_check_init'/1
					       (_cor10) of
					%% Line 72
					<{'ok',_cor67}> when 'true' ->
					    let <_cor11> =
						apply 'internal_gui'/1
						    (Opts)
					    in  apply 'gui_halt'/2
						    (_cor11, Opts)
					%% Line 73
					<Error = {'error',_cor68}> when 'true' ->
					    apply 'cl_halt'/2
						(Error, Opts)
					( <_cor12> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor12})
					  -| ['compiler_generated'] )
				      end
			      %% Line 75
			      <'false'> when 'true' ->
				  let <_cor13> =
				      %% Line 76
				      apply 'internal_gui'/1
					  (Opts)
				  in  %% Line 76
				      apply 'gui_halt'/2
					  (_cor13, Opts)
			      ( <_cor14> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor14})
				-| ['compiler_generated'] )
			    end
			-| ['compiler_generated'] )
		      ( <_cor45> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','options'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 78
	  <{'cl',Opts}> when 'true' ->
	      %% Line 79
	      ( case Opts of
		  ( <( {'options',_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_rec2,_cor87}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec2 of
			  %% Line 80
			  <'true'> when 'true' ->
			      let <_cor19> =
				  %% Line 81
				  call 'erlang':'setelement'
				      (8, Opts, 'false')
			      in  %% Line 81
				  case apply 'cl_check_init'/1
					   (_cor19) of
				    %% Line 82
				    <Error = {'error',_cor110}> when 'true' ->
					apply 'cl_halt'/2
					    (Error, Opts)
				    %% Line 83
				    <{'ok',_cor111}> when 'true' ->
					let <_cor20> =
					    apply 'cl'/1
						(Opts)
					in  apply 'cl_halt'/2
						(_cor20, Opts)
				    ( <_cor21> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor21})
				      -| ['compiler_generated'] )
				  end
			  %% Line 85
			  <'false'> when 'true' ->
			      let <_cor22> =
				  %% Line 86
				  apply 'cl'/1
				      (Opts)
			      in  %% Line 86
				  apply 'cl_halt'/2
				      (_cor22, Opts)
			  ( <_cor23> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor23})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor88> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','options'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 88
	  <{'error',Msg}> when 'true' ->
	      %% Line 89
	      apply 'cl_error'/1
		  (Msg)
	  ( <_cor24> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor24})
	    -| ['compiler_generated'] )
	end
'cl_check_init'/1 =
    %% Line 92
    fun (_cor0) ->
	case _cor0 of
	  <Opts = {'options',_cor11,_cor12,AnalType,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29}> when 'true' ->
	      %% Line 93
	      case AnalType of
		%% Line 94
		<'plt_build'> when 'true' ->
		    {'ok',0}
		%% Line 95
		<'plt_add'> when 'true' ->
		    {'ok',0}
		%% Line 96
		<'plt_remove'> when 'true' ->
		    {'ok',0}
		%% Line 97
		<Other>
		    when let <_cor1> =
			  call 'erlang':'=:='
			      (AnalType, 'succ_typings')
		      in  let <_cor2> =
			      call 'erlang':'=:='
				  (AnalType, 'plt_check')
			  in  call 'erlang':'or'
				  (_cor1, _cor2) ->
		    let <F> =
			%% Line 98
			( fun () ->
			      let <_cor5> =
				  %% Line 99
				  call 'erlang':'setelement'
				      (4, Opts, 'plt_check')
			      in  %% Line 100
				  case call 'dialyzer_cl':'start'
					   (_cor5) of
				    <{Ret,_X_Warnings}> when 'true' ->
					%% Line 101
					Ret
				    ( <_cor7> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor7})
				      -| ['compiler_generated'] )
				  end
			  -| [{'id',{0,0,'-cl_check_init/1-fun-0-'}}] )
		    in  %% Line 103
			apply 'doit'/1
			    (F)
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10})
		  -| [{'function_name',{'cl_check_init',1}}] )
	    -| ['compiler_generated'] )
	end
'cl_print_plt_info'/1 =
    %% Line 106
    fun (_cor0) ->
	let <F> =
	    %% Line 107
	    ( fun () ->
		  %% Line 108
		  apply 'print_plt_info'/1
		      (_cor0)
	      -| [{'id',{0,0,'-cl_print_plt_info/1-fun-0-'}}] )
	in  %% Line 110
	    apply 'doit'/1
		(F)
'print_plt_info'/1 =
    %% Line 112
    fun (_cor0) ->
	case _cor0 of
	  <{'options',_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,PLTs,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,OutputFile,_cor16,_cor17,_cor18,_cor19,_cor20}> when 'true' ->
	      let <PLTInfo> =
		  %% Line 113
		  apply 'get_plt_info'/1
		      (PLTs)
	      in  %% Line 114
		  apply 'do_print_plt_info'/2
		      (PLTInfo, OutputFile)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'print_plt_info',1}}] )
	    -| ['compiler_generated'] )
	end
'get_plt_info'/1 =
    %% Line 116
    fun (_cor0) ->
	case _cor0 of
	  <[PLT|PLTs]> when 'true' ->
	      let <_cor4> =
		  %% Line 118
		  case call 'dialyzer_plt':'included_files'
			   (PLT) of
		    %% Line 119
		    <{'ok',Files}> when 'true' ->
			%% Line 120
			call 'io_lib':'format'
			    ([84|[104|[101|[32|[80|[76|[84|[32|[126|[115|[32|[105|[110|[99|[108|[117|[100|[101|[115|[32|[116|[104|[101|[32|[102|[111|[108|[108|[111|[119|[105|[110|[103|[32|[102|[105|[108|[101|[115|[58|[10|[126|[112|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 121
																																			     [PLT|[Files|[]]])
		    %% Line 122
		    <{'error','read_error'}> when 'true' ->
			let <Msg> =
			    %% Line 123
			    call 'io_lib':'format'
				([67|[111|[117|[108|[100|[32|[110|[111|[116|[32|[114|[101|[97|[100|[32|[116|[104|[101|[32|[80|[76|[84|[32|[102|[105|[108|[101|[32|[126|[112|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [PLT|[]])
			in  %% Line 124
			    call 'erlang':'throw'
				({'dialyzer_error',Msg})
		    %% Line 125
		    <{'error','no_such_file'}> when 'true' ->
			let <Msg> =
			    %% Line 126
			    call 'io_lib':'format'
				([84|[104|[101|[32|[80|[76|[84|[32|[102|[105|[108|[101|[32|[126|[112|[32|[100|[111|[101|[115|[32|[110|[111|[116|[32|[101|[120|[105|[115|[116|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [PLT|[]])
			in  %% Line 127
			    call 'erlang':'throw'
				({'dialyzer_error',Msg})
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor6> =
		      %% Line 129
		      apply 'get_plt_info'/1
			  (PLTs)
		  in  %% Line 129
		      call 'erlang':'++'
			  (_cor4, _cor6)
	  %% Line 130
	  <[]> when 'true' ->
	      []
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'get_plt_info',1}}] )
	    -| ['compiler_generated'] )
	end
'do_print_plt_info'/2 =
    %% Line 132
    fun (_cor1,_cor0) ->
	%% Line 133
	case <> of
	  %% Line 134
	  <>
	      when call 'erlang':'=:='
		    (_cor0,
		     'none') ->
	      do  %% Line 135
		  call 'io':'format'
		      ([126|[115]], [_cor1|[]])
		  %% Line 136
		  0
	  %% Line 137
	  <> when 'true' ->
	      %% Line 138
	      case call 'file':'open'
		       (_cor0, ['write']) of
		%% Line 139
		<{'ok',FileDesc}> when 'true' ->
		    do  %% Line 140
			call 'io':'format'
			    (FileDesc, [126|[115]], [_cor1|[]])
			%% Line 141
			case call 'file':'close'
				 (FileDesc) of
			  <'ok'> when 'true' ->
			      %% Line 142
			      0
			  ( <_cor2> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor2})
			    -| ['compiler_generated'] )
			end
		%% Line 143
		<{'error',Reason}> when 'true' ->
		    let <Msg1> =
			%% Line 144
			call 'io_lib':'format'
			    ([67|[111|[117|[108|[100|[32|[110|[111|[116|[32|[111|[112|[101|[110|[32|[111|[117|[116|[112|[117|[116|[32|[102|[105|[108|[101|[32|[126|[112|[44|[32|[82|[101|[97|[115|[111|[110|[58|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 145
																																	     [_cor0|[Reason|[]]])
		    in  %% Line 146
			call 'erlang':'throw'
			    ({'dialyzer_error',Msg1})
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	end
'cl'/1 =
    %% Line 150
    fun (_cor0) ->
	let <F> =
	    %% Line 151
	    ( fun () ->
		  %% Line 152
		  case call 'dialyzer_cl':'start'
			   (_cor0) of
		    <{Ret,_X_Warnings}> when 'true' ->
			%% Line 153
			Ret
		    ( <_cor1> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor1})
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-cl/1-fun-0-'}}] )
	in  %% Line 155
	    apply 'doit'/1
		(F)
'run'/1 =
    %% Line 159
    fun (_cor0) ->
	%% Line 160
	try
	    call 'dialyzer_options':'build'
		([{'report_mode','quiet'}|%% Line 161
					  [{'erlang_mode','true'}|_cor0]])
	of <_cor1> ->
	    case _cor1 of
	      %% Line 162
	      <{'error',Msg}> when 'true' ->
		  %% Line 163
		  call 'erlang':'throw'
		      ({'dialyzer_error',Msg})
	      %% Line 164
	      <OptsRecord> when 'true' ->
		  %% Line 165
		  ( case OptsRecord of
		      ( <( {'options',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_rec5,_cor31}
			   -| ['compiler_generated'] )> when 'true' ->
			    do  case _rec5 of
				  %% Line 166
				  <'true'> when 'true' ->
				      %% Line 167
				      case apply 'cl_check_init'/1
					       (OptsRecord) of
					%% Line 168
					<{'ok',0}> when 'true' ->
					    'ok'
					%% Line 169
					<{'error',ErrorMsg1}> when 'true' ->
					    call 'erlang':'throw'
						({'dialyzer_error',ErrorMsg1})
					( <_cor4> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor4})
					  -| ['compiler_generated'] )
				      end
				  %% Line 171
				  <'false'> when 'true' ->
				      'ok'
				  ( <_cor5> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor5})
				    -| ['compiler_generated'] )
				end
				%% Line 173
				case call 'dialyzer_cl':'start'
					 (OptsRecord) of
				  %% Line 174
				  <{2,Warnings}> when 'true' ->
				      Warnings
				  %% Line 175
				  <{0,_cor33}> when 'true' ->
				      []
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor6})
				    -| ['compiler_generated'] )
				end
			-| ['compiler_generated'] )
		      ( <_cor32> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','options'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	    end
	catch <_cor10,_cor9,_cor8> ->
	    case <_cor10,_cor9,_cor8> of
	      %% Line 178
	      <'throw',{'dialyzer_error',ErrorMsg},_cor34> when 'true' ->
		  let <_cor11> =
		      %% Line 179
		      call 'lists':'flatten'
			  (ErrorMsg)
		  in  %% Line 179
		      call 'erlang':'error'
			  ({'dialyzer_error',_cor11})
	      ( <_cor10,_cor9,_cor8> when 'true' ->
		    primop 'raise'
			(_cor8, _cor9)
		-| ['compiler_generated'] )
	    end
'internal_gui'/1 =
    %% Line 182
    fun (_cor0) ->
	let <F> =
	    %% Line 183
	    ( fun () ->
		  do  %% Line 184
		      call 'dialyzer_gui_wx':'start'
			  (_cor0)
		      %% Line 185
		      0
	      -| [{'id',{0,0,'-internal_gui/1-fun-0-'}}] )
	in  %% Line 187
	    apply 'doit'/1
		(F)
'gui'/0 =
    %% Line 191
    fun () ->
	%% Line 192
	apply 'gui'/1
	    ([])
'gui'/1 =
    %% Line 196
    fun (_cor0) ->
	%% Line 197
	try
	    call 'dialyzer_options':'build'
		([{'report_mode','quiet'}|_cor0])
	of <_cor1> ->
	    case _cor1 of
	      %% Line 198
	      <{'error',Msg}> when 'true' ->
		  %% Line 199
		  call 'erlang':'throw'
		      ({'dialyzer_error',Msg})
	      %% Line 200
	      <OptsRecord> when 'true' ->
		  %% Line 201
		  case apply 'check_gui_options'/1
			   (OptsRecord) of
		    <'ok'> when 'true' ->
			%% Line 202
			case apply 'cl_check_init'/1
				 (OptsRecord) of
			  %% Line 203
			  <{'ok',0}> when 'true' ->
			      let <F> =
				  %% Line 204
				  ( fun () ->
					%% Line 205
					call 'dialyzer_gui_wx':'start'
					    (OptsRecord)
				    -| [{'id',{0,0,'-gui/1-fun-0-'}}] )
			      in  %% Line 207
				  case apply 'doit'/1
					   (F) of
				    %% Line 208
				    <{'ok',_cor12}> when 'true' ->
					'ok'
				    %% Line 209
				    <{'error',Msg}> when 'true' ->
					call 'erlang':'throw'
					    ({'dialyzer_error',Msg})
				    ( <_cor4> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor4})
				      -| ['compiler_generated'] )
				  end
			  %% Line 211
			  <{'error',ErrorMsg1}> when 'true' ->
			      %% Line 212
			      call 'erlang':'throw'
				  ({'dialyzer_error',ErrorMsg1})
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor5})
			    -| ['compiler_generated'] )
			end
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	    end
	catch <_cor9,_cor8,_cor7> ->
	    case <_cor9,_cor8,_cor7> of
	      %% Line 215
	      <'throw',{'dialyzer_error',ErrorMsg},_cor13> when 'true' ->
		  let <_cor10> =
		      %% Line 216
		      call 'lists':'flatten'
			  (ErrorMsg)
		  in  %% Line 216
		      call 'erlang':'error'
			  ({'dialyzer_error',_cor10})
	      ( <_cor9,_cor8,_cor7> when 'true' ->
		    primop 'raise'
			(_cor7, _cor8)
		-| ['compiler_generated'] )
	    end
'check_gui_options'/1 =
    %% Line 219
    fun (_cor0) ->
	case _cor0 of
	  <{'options',_cor3,_cor4,'succ_typings',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}> when 'true' ->
	      %% Line 220
	      'ok'
	  %% Line 221
	  <{'options',_cor22,_cor23,Mode,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40}> when 'true' ->
	      let <Msg> =
		  %% Line 222
		  call 'io_lib':'format'
		      ([65|[110|[97|[108|[121|[115|[105|[115|[32|[109|[111|[100|[101|[32|[126|[119|[32|[105|[115|[32|[105|[108|[108|[101|[103|[97|[108|[32|[105|[110|[32|[71|[85|[73|[32|[109|[111|[100|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Mode|[]])
	      in  %% Line 223
		  call 'erlang':'throw'
		      ({'dialyzer_error',Msg})
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'check_gui_options',1}}] )
	    -| ['compiler_generated'] )
	end
'plt_info'/1 =
    %% Line 228
    fun (_cor0) ->
	%% Line 229
	case call 'dialyzer_plt':'included_files'
		 (_cor0) of
	  %% Line 230
	  <{'ok',Files}> when 'true' ->
	      {'ok',[{'files',Files}|[]]}
	  %% Line 231
	  <Error> when 'true' ->
	      Error
	end
'doit'/1 =
    %% Line 241
    fun (_cor0) ->
	%% Line 242
	try
	    let <_cor1> =
		%% Line 243
		apply _cor0
		    ()
	    in  %% Line 243
		{'ok',_cor1}
	of <_cor2> ->
	    _cor2
	catch <_cor5,_cor4,_cor3> ->
	    case <_cor5,_cor4,_cor3> of
	      %% Line 245
	      <'throw',{'dialyzer_error',Msg},_cor8> when 'true' ->
		  let <_cor6> =
		      %% Line 246
		      call 'lists':'flatten'
			  (Msg)
		  in  %% Line 246
		      {'error',_cor6}
	      ( <_cor5,_cor4,_cor3> when 'true' ->
		    primop 'raise'
			(_cor3, _cor4)
		-| ['compiler_generated'] )
	    end
'cl_error'/1 =
    %% Line 251
    fun (_cor0) ->
	let <_cor1> =
	    call 'ordsets':'new'
		()
	in  %% Line 252
	    apply 'cl_halt'/2
		({'error',_cor0}, {'options',[],[],'succ_typings','false',[],'byte_code','maybe',[],[],'none',_cor1,'normal','false','true','none','formatted','basename',[],'true',[]})
'gui_halt'/2 =
    %% Line 256
    fun (_cor1,_cor0) ->
	%% Line 257
	case _cor0 of
	  <{'options',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26}> when 'true' ->
	      let <_cor4> =
		  call 'erlang':'setelement'
		      (13, _cor0, 'quiet')
	      in  apply 'cl_halt'/2
		      (_cor1, _cor4)
	  ( <_cor27> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','options'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'cl_halt'/2 =
    %% Line 261
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'ok',R = 0},{'options',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,'quiet',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22}> when 'true' ->
	      %% Line 262
	      call 'erlang':'halt'
		  (R)
	  %% Line 263
	  <{'ok',R = 2},{'options',_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,'quiet',_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41}> when 'true' ->
	      %% Line 264
	      call 'erlang':'halt'
		  (R)
	  %% Line 265
	  <{'ok',R = 0},{'options',_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61}> when 'true' ->
	      do  %% Line 266
		  call 'io':'put_chars'
		      ([100|[111|[110|[101|[32|[40|[112|[97|[115|[115|[101|[100|[32|[115|[117|[99|[99|[101|[115|[115|[102|[117|[108|[108|[121|[41|[10]]]]]]]]]]]]]]]]]]]]]]]]]]])
		  %% Line 267
		  call 'erlang':'halt'
		      (R)
	  %% Line 268
	  <{'ok',R = 2},{'options',_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,Output,_cor76,_cor77,_cor78,_cor79,_cor80}> when 'true' ->
	      do  %% Line 269
		  call 'io':'put_chars'
		      ([100|[111|[110|[101|[32|[40|[119|[97|[114|[110|[105|[110|[103|[115|[32|[119|[101|[114|[101|[32|[101|[109|[105|[116|[116|[101|[100|[41|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
		  do  %% Line 270
		      apply 'cl_check_log'/1
			  (Output)
		      %% Line 271
		      call 'erlang':'halt'
			  (R)
	  %% Line 272
	  <{'error',Msg1},{'options',_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,Output,_cor95,_cor96,_cor97,_cor98,_cor99}> when 'true' ->
	      do  %% Line 274
		  call 'io':'format'
		      ([10|[100|[105|[97|[108|[121|[122|[101|[114|[58|[32|[126|[115|[10]]]]]]]]]]]]]], [Msg1|[]])
		  do  %% Line 275
		      apply 'cl_check_log'/1
			  (Output)
		      %% Line 276
		      call 'erlang':'halt'
			  (1)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'cl_halt',2}}] )
	    -| ['compiler_generated'] )
	end
'cl_check_log'/1 =
    %% Line 280
    fun (_cor0) ->
	case _cor0 of
	  <'none'> when 'true' ->
	      %% Line 281
	      'ok'
	  %% Line 282
	  <Output> when 'true' ->
	      %% Line 283
	      call 'io':'format'
		  ([32|[32|[67|[104|[101|[99|[107|[32|[111|[117|[116|[112|[117|[116|[32|[102|[105|[108|[101|[32|[96|[126|[115|[39|[32|[102|[111|[114|[32|[100|[101|[116|[97|[105|[108|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Output|[]])
	end
'format_warning'/1 =
    %% Line 287
    fun (_cor0) ->
	%% Line 288
	apply 'format_warning'/2
	    (_cor0, 'basename')
'format_warning'/2 =
    %% Line 292
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{_X_Tag,{File,Line},Msg},FOpt>
	      when let <_cor2> =
		    call 'erlang':'is_list'
			(File)
		in  let <_cor3> =
			%% Line 293
			call 'erlang':'is_integer'
			    (Line)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor5> =
		  %% Line 294
		  case FOpt of
		    %% Line 295
		    <'fullpath'> when 'true' ->
			File
		    %% Line 296
		    <'basename'> when 'true' ->
			call 'filename':'basename'
			    (File)
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor7> =
		      %% Line 298
		      apply 'message_to_string'/1
			  (Msg)
		  in  let <String> =
			  %% Line 298
			  call 'lists':'flatten'
			      (_cor7)
		      in  let <_cor9> =
			      %% Line 299
			      call 'io_lib':'format'
				  ([126|[115|[58|[126|[119|[58|[32|[126|[115]]]]]]]]], [_cor5|[Line|[String|[]]]])
			  in  %% Line 299
			      call 'lists':'flatten'
				  (_cor9)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'format_warning',2}}] )
	    -| ['compiler_generated'] )
	end
'message_to_string'/1 =
    %% Line 308
    fun (_cor0) ->
	case _cor0 of
	  <{'apply',[Args|[ArgNs|[FailReason|%% Line 309
					     [SigArgs|[SigRet|[Contract|[]]]]]]]}> when 'true' ->
	      let <_cor2> =
		  %% Line 310
		  call 'io_lib':'format'
		      ([70|[117|[110|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[119|[105|[116|[104|[32|[97|[114|[103|[117|[109|[101|[110|[116|[115|[32|[126|[115|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Args|[]])
	      in  let <_cor1> =
		      %% Line 311
		      apply 'call_or_apply_to_string'/5
			  (ArgNs, FailReason, SigArgs, SigRet, Contract)
		  in  %% Line 310
		      call 'erlang':'++'
			  (_cor2, _cor1)
	  %% Line 312
	  <{'app_call',[M|[F|[Args|[Culprit|[ExpectedType|[FoundType|[]]]]]]]}> when 'true' ->
	      %% Line 313
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[99|[97|[108|[108|[32|[126|[115|[58|[126|[115|[126|[115|[32|[114|[101|[113|[117|[105|[114|[101|[115|[32|[116|[104|[97|[116|[32|[126|[115|[32|[105|[115|[32|[111|[102|[32|[116|[121|[112|[101|[32|[126|[115|[32|[110|[111|[116|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 314
																																									     [M|[F|[Args|[Culprit|[ExpectedType|[FoundType|[]]]]]]])
	  %% Line 315
	  <{'bin_construction',[Culprit|[Size|[Seg|[Type|[]]]]]}> when 'true' ->
	      %% Line 316
	      call 'io_lib':'format'
		  ([66|[105|[110|[97|[114|[121|[32|[99|[111|[110|[115|[116|[114|[117|[99|[116|[105|[111|[110|[32|[119|[105|[108|[108|[32|[102|[97|[105|[108|[32|[115|[105|[110|[99|[101|[32|[116|[104|[101|[32|[126|[115|[32|[102|[105|[101|[108|[100|[32|[126|[115|[32|[105|[110|[32|[115|[101|[103|[109|[101|[110|[116|[32|[126|[115|[32|[104|[97|[115|[32|[116|[121|[112|[101|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 317
																																																										  [Culprit|[Size|[Seg|[Type|[]]]]])
	  %% Line 318
	  <{'call',[M|[F|[Args|[ArgNs|[FailReason|%% Line 319
						  [SigArgs|[SigRet|[Contract|[]]]]]]]]]}> when 'true' ->
	      let <_cor4> =
		  %% Line 320
		  call 'io_lib':'format'
		      ([84|[104|[101|[32|[99|[97|[108|[108|[32|[126|[119|[58|[126|[119|[126|[115|[32]]]]]]]]]]]]]]]]], [M|[F|[Args|[]]]])
	      in  let <_cor3> =
		      %% Line 321
		      apply 'call_or_apply_to_string'/5
			  (ArgNs, FailReason, SigArgs, SigRet, Contract)
		  in  %% Line 320
		      call 'erlang':'++'
			  (_cor4, _cor3)
	  %% Line 322
	  <{'call_to_missing',[M|[F|[A|[]]]]}> when 'true' ->
	      %% Line 323
	      call 'io_lib':'format'
		  ([67|[97|[108|[108|[32|[116|[111|[32|[109|[105|[115|[115|[105|[110|[103|[32|[111|[114|[32|[117|[110|[101|[120|[112|[111|[114|[116|[101|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[119|[58|[126|[119|[47|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [M|[F|[A|[]]]])
	  %% Line 324
	  <{'exact_eq',[Type1|[Op|[Type2|[]]]]}> when 'true' ->
	      %% Line 325
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[116|[101|[115|[116|[32|[126|[115|[32|[126|[115|[32|[126|[115|[32|[99|[97|[110|[32|[110|[101|[118|[101|[114|[32|[101|[118|[97|[108|[117|[97|[116|[101|[32|[116|[111|[32|[39|[116|[114|[117|[101|[39|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 326
																																			     [Type1|[Op|[Type2|[]]]])
	  %% Line 327
	  <{'fun_app_args',[Args|[Type|[]]]}> when 'true' ->
	      %% Line 328
	      call 'io_lib':'format'
		  ([70|[117|[110|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[119|[105|[116|[104|[32|[97|[114|[103|[117|[109|[101|[110|[116|[115|[32|[126|[115|[32|[119|[105|[108|[108|[32|[102|[97|[105|[108|[32|[115|[105|[110|[99|[101|[32|[116|[104|[101|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[104|[97|[115|[32|[116|[121|[112|[101|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 329
																																																								[Args|[Type|[]]])
	  %% Line 330
	  <{'fun_app_no_fun',[Op|[Type|[Arity|[]]]]}> when 'true' ->
	      %% Line 331
	      call 'io_lib':'format'
		  ([70|[117|[110|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[119|[105|[108|[108|[32|[102|[97|[105|[108|[32|[115|[105|[110|[99|[101|[32|[126|[115|[32|[58|[58|[32|[126|[115|[32|[105|[115|[32|[110|[111|[116|[32|[97|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[111|[102|[32|[97|[114|[105|[116|[121|[32|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 332
																																																				    [Op|[Type|[Arity|[]]]])
	  %% Line 333
	  <{'guard_fail',[]}> when 'true' ->
	      %% Line 334
	      [67|[108|[97|[117|[115|[101|[32|[103|[117|[97|[114|[100|[32|[99|[97|[110|[110|[111|[116|[32|[115|[117|[99|[99|[101|[101|[100|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 335
	  <{'guard_fail',[Arg1|[Infix|[Arg2|[]]]]}> when 'true' ->
	      %% Line 336
	      call 'io_lib':'format'
		  ([71|[117|[97|[114|[100|[32|[116|[101|[115|[116|[32|[126|[115|[32|[126|[115|[32|[126|[115|[32|[99|[97|[110|[32|[110|[101|[118|[101|[114|[32|[115|[117|[99|[99|[101|[101|[100|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Arg1|[Infix|[Arg2|[]]]])
	  %% Line 337
	  <{'neg_guard_fail',[Arg1|[Infix|[Arg2|[]]]]}> when 'true' ->
	      %% Line 338
	      call 'io_lib':'format'
		  ([71|[117|[97|[114|[100|[32|[116|[101|[115|[116|[32|[110|[111|[116|[40|[126|[115|[32|[126|[115|[32|[126|[115|[41|[32|[99|[97|[110|[32|[110|[101|[118|[101|[114|[32|[115|[117|[99|[99|[101|[101|[100|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 339
																																      [Arg1|[Infix|[Arg2|[]]]])
	  %% Line 340
	  <{'guard_fail',[Guard|[Args|[]]]}> when 'true' ->
	      %% Line 341
	      call 'io_lib':'format'
		  ([71|[117|[97|[114|[100|[32|[116|[101|[115|[116|[32|[126|[119|[126|[115|[32|[99|[97|[110|[32|[110|[101|[118|[101|[114|[32|[115|[117|[99|[99|[101|[101|[100|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Guard|[Args|[]]])
	  %% Line 342
	  <{'neg_guard_fail',[Guard|[Args|[]]]}> when 'true' ->
	      %% Line 343
	      call 'io_lib':'format'
		  ([71|[117|[97|[114|[100|[32|[116|[101|[115|[116|[32|[110|[111|[116|[40|[126|[119|[126|[115|[41|[32|[99|[97|[110|[32|[110|[101|[118|[101|[114|[32|[115|[117|[99|[99|[101|[101|[100|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Guard|[Args|[]]])
	  %% Line 344
	  <{'guard_fail_pat',[Pat|[Type|[]]]}> when 'true' ->
	      %% Line 345
	      call 'io_lib':'format'
		  ([67|[108|[97|[117|[115|[101|[32|[103|[117|[97|[114|[100|[32|[99|[97|[110|[110|[111|[116|[32|[115|[117|[99|[99|[101|[101|[100|[46|[32|[84|[104|[101|[32|[126|[115|[32|[119|[97|[115|[32|[109|[97|[116|[99|[104|[101|[100|[32|[97|[103|[97|[105|[110|[115|[116|[32|[116|[104|[101|[32|[116|[121|[112|[101|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 346
																																																		  [Pat|[Type|[]]])
	  %% Line 347
	  <{'improper_list_constr',[TlType|[]]}> when 'true' ->
	      %% Line 348
	      call 'io_lib':'format'
		  ([67|[111|[110|[115|[32|[119|[105|[108|[108|[32|[112|[114|[111|[100|[117|[99|[101|[32|[97|[110|[32|[105|[109|[112|[114|[111|[112|[101|[114|[32|[108|[105|[115|[116|[32|[115|[105|[110|[99|[101|[32|[105|[116|[115|[32|[50|[110|[100|[32|[97|[114|[103|[117|[109|[101|[110|[116|[32|[105|[115|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 349
																																																  [TlType|[]])
	  %% Line 350
	  <{'no_return',[Type|Name]}> when 'true' ->
	      let <_cor6> =
		  %% Line 352
		  case Name of
		    %% Line 353
		    <[]> when 'true' ->
			[84|[104|[101|[32|[99|[114|[101|[97|[116|[101|[100|[32|[102|[117|[110|[32]]]]]]]]]]]]]]]]
		    %% Line 354
		    <[F|[A|[]]]> when 'true' ->
			call 'io_lib':'format'
			    ([70|[117|[110|[99|[116|[105|[111|[110|[32|[126|[119|[47|[126|[119|[32]]]]]]]]]]]]]]], [F|[A|[]]])
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 356
		  case Type of
		    %% Line 357
		    <'no_match'> when 'true' ->
			call 'erlang':'++'
			    (_cor6, [104|[97|[115|[32|[110|[111|[32|[99|[108|[97|[117|[115|[101|[115|[32|[116|[104|[97|[116|[32|[119|[105|[108|[108|[32|[101|[118|[101|[114|[32|[109|[97|[116|[99|[104|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
		    %% Line 358
		    <'only_explicit'> when 'true' ->
			call 'erlang':'++'
			    (_cor6, [111|[110|[108|[121|[32|[116|[101|[114|[109|[105|[110|[97|[116|[101|[115|[32|[119|[105|[116|[104|[32|[101|[120|[112|[108|[105|[99|[105|[116|[32|[101|[120|[99|[101|[112|[116|[105|[111|[110|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
		    %% Line 359
		    <'only_normal'> when 'true' ->
			call 'erlang':'++'
			    (_cor6, [104|[97|[115|[32|[110|[111|[32|[108|[111|[99|[97|[108|[32|[114|[101|[116|[117|[114|[110|[10]]]]]]]]]]]]]]]]]]]])
		    %% Line 360
		    <'both'> when 'true' ->
			call 'erlang':'++'
			    (_cor6, [104|[97|[115|[32|[110|[111|[32|[108|[111|[99|[97|[108|[32|[114|[101|[116|[117|[114|[110|[10]]]]]]]]]]]]]]]]]]]])
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor8})
		      -| ['compiler_generated'] )
		  end
	  %% Line 362
	  <{'record_constr',[RecConstr|[FieldDiffs|[]]]}> when 'true' ->
	      %% Line 363
	      call 'io_lib':'format'
		  ([82|[101|[99|[111|[114|[100|[32|[99|[111|[110|[115|[116|[114|[117|[99|[116|[105|[111|[110|[32|[126|[115|[32|[118|[105|[111|[108|[97|[116|[101|[115|[32|[116|[104|[101|[32|[100|[101|[99|[108|[97|[114|[101|[100|[32|[116|[121|[112|[101|[32|[111|[102|[32|[102|[105|[101|[108|[100|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 364
																																														       [RecConstr|[FieldDiffs|[]]])
	  %% Line 365
	  <{'record_constr',[Name|[Field|[Type|[]]]]}> when 'true' ->
	      %% Line 366
	      call 'io_lib':'format'
		  ([82|[101|[99|[111|[114|[100|[32|[99|[111|[110|[115|[116|[114|[117|[99|[116|[105|[111|[110|[32|[118|[105|[111|[108|[97|[116|[101|[115|[32|[116|[104|[101|[32|[100|[101|[99|[108|[97|[114|[101|[100|[32|[116|[121|[112|[101|[32|[102|[111|[114|[32|[35|[126|[119|[123|[125|[32|[115|[105|[110|[99|[101|[32|[126|[115|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[111|[102|[32|[116|[121|[112|[101|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 367
																																																																   [Name|[Field|[Type|[]]]])
	  %% Line 368
	  <{'record_matching',[String|[Name|[]]]}> when 'true' ->
	      %% Line 369
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[126|[115|[32|[118|[105|[111|[108|[97|[116|[101|[115|[32|[116|[104|[101|[32|[100|[101|[99|[108|[97|[114|[101|[100|[32|[116|[121|[112|[101|[32|[102|[111|[114|[32|[35|[126|[119|[123|[125|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 370
																																	       [String|[Name|[]]])
	  %% Line 371
	  <{'record_match',[Pat|[Type|[]]]}> when 'true' ->
	      %% Line 372
	      call 'io_lib':'format'
		  ([77|[97|[116|[99|[104|[105|[110|[103|[32|[111|[102|[32|[126|[115|[32|[116|[97|[103|[103|[101|[100|[32|[119|[105|[116|[104|[32|[97|[32|[114|[101|[99|[111|[114|[100|[32|[110|[97|[109|[101|[32|[118|[105|[111|[108|[97|[116|[101|[115|[32|[116|[104|[101|[32|[100|[101|[99|[108|[97|[114|[101|[100|[32|[116|[121|[112|[101|[32|[111|[102|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 373
																																																							[Pat|[Type|[]]])
	  %% Line 374
	  <{'pattern_match',[Pat|[Type|[]]]}> when 'true' ->
	      %% Line 375
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[126|[115|[32|[99|[97|[110|[32|[110|[101|[118|[101|[114|[32|[109|[97|[116|[99|[104|[32|[116|[104|[101|[32|[116|[121|[112|[101|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Pat|[Type|[]]])
	  %% Line 376
	  <{'pattern_match_cov',[Pat|[Type|[]]]}> when 'true' ->
	      %% Line 377
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[126|[115|[32|[99|[97|[110|[32|[110|[101|[118|[101|[114|[32|[109|[97|[116|[99|[104|[32|[115|[105|[110|[99|[101|[32|[112|[114|[101|[118|[105|[111|[117|[115|[32|[99|[108|[97|[117|[115|[101|[115|[32|[99|[111|[109|[112|[108|[101|[116|[101|[108|[121|[32|[99|[111|[118|[101|[114|[101|[100|[32|[116|[104|[101|[32|[116|[121|[112|[101|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 379
																																																									   [Pat|[Type|[]]])
	  %% Line 380
	  <{'unmatched_return',[Type|[]]}> when 'true' ->
	      %% Line 381
	      call 'io_lib':'format'
		  ([69|[120|[112|[114|[101|[115|[115|[105|[111|[110|[32|[112|[114|[111|[100|[117|[99|[101|[115|[32|[97|[32|[118|[97|[108|[117|[101|[32|[111|[102|[32|[116|[121|[112|[101|[32|[126|[115|[44|[32|[98|[117|[116|[32|[116|[104|[105|[115|[32|[118|[97|[108|[117|[101|[32|[105|[115|[32|[117|[110|[109|[97|[116|[99|[104|[101|[100|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 382
																																																		       [Type|[]])
	  %% Line 383
	  <{'unused_fun',[F|[A|[]]]}> when 'true' ->
	      %% Line 384
	      call 'io_lib':'format'
		  ([70|[117|[110|[99|[116|[105|[111|[110|[32|[126|[119|[47|[126|[119|[32|[119|[105|[108|[108|[32|[110|[101|[118|[101|[114|[32|[98|[101|[32|[99|[97|[108|[108|[101|[100|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [F|[A|[]]])
	  %% Line 386
	  <{'contract_diff',[M|[F|[_X_A|[Contract|[Sig|[]]]]]]}> when 'true' ->
	      %% Line 387
	      call 'io_lib':'format'
		  ([84|[121|[112|[101|[32|[115|[112|[101|[99|[105|[102|[105|[99|[97|[116|[105|[111|[110|[32|[126|[119|[58|[126|[119|[126|[115|[32|[105|[115|[32|[110|[111|[116|[32|[101|[113|[117|[97|[108|[32|[116|[111|[32|[116|[104|[101|[32|[115|[117|[99|[99|[101|[115|[115|[32|[116|[121|[112|[105|[110|[103|[58|[32|[126|[119|[58|[126|[119|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 389
																																																					 [M|[F|[Contract|[M|[F|[Sig|[]]]]]]])
	  %% Line 390
	  <{'contract_subtype',[M|[F|[_X_A|[Contract|[Sig|[]]]]]]}> when 'true' ->
	      %% Line 391
	      call 'io_lib':'format'
		  ([84|[121|[112|[101|[32|[115|[112|[101|[99|[105|[102|[105|[99|[97|[116|[105|[111|[110|[32|[126|[119|[58|[126|[119|[126|[115|[32|[105|[115|[32|[97|[32|[115|[117|[98|[116|[121|[112|[101|[32|[111|[102|[32|[116|[104|[101|[32|[115|[117|[99|[99|[101|[115|[115|[32|[116|[121|[112|[105|[110|[103|[58|[32|[126|[119|[58|[126|[119|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 393
																																																					[M|[F|[Contract|[M|[F|[Sig|[]]]]]]])
	  %% Line 394
	  <{'contract_supertype',[M|[F|[_X_A|[Contract|[Sig|[]]]]]]}> when 'true' ->
	      %% Line 395
	      call 'io_lib':'format'
		  ([84|[121|[112|[101|[32|[115|[112|[101|[99|[105|[102|[105|[99|[97|[116|[105|[111|[110|[32|[126|[119|[58|[126|[119|[126|[115|[32|[105|[115|[32|[97|[32|[115|[117|[112|[101|[114|[116|[121|[112|[101|[32|[111|[102|[32|[116|[104|[101|[32|[115|[117|[99|[99|[101|[115|[115|[32|[116|[121|[112|[105|[110|[103|[58|[32|[126|[119|[58|[126|[119|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 397
																																																						     [M|[F|[Contract|[M|[F|[Sig|[]]]]]]])
	  %% Line 398
	  <{'contract_range',[Contract|[M|[F|[ArgStrings|[Line|[CRet|[]]]]]]]}> when 'true' ->
	      %% Line 399
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[99|[111|[110|[116|[114|[97|[99|[116|[32|[126|[119|[58|[126|[119|[126|[115|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[114|[105|[103|[104|[116|[32|[98|[101|[99|[97|[117|[115|[101|[32|[116|[104|[101|[32|[105|[110|[102|[101|[114|[114|[101|[100|[32|[114|[101|[116|[117|[114|[110|[32|[102|[111|[114|[32|[126|[119|[126|[115|[32|[111|[110|[32|[108|[105|[110|[101|[32|[126|[119|[32|[105|[115|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 401
																																																																			  [M|[F|[Contract|[F|[ArgStrings|[Line|[CRet|[]]]]]]]])
	  %% Line 402
	  <{'invalid_contract',[M|[F|[A|[Sig|[]]]]]}> when 'true' ->
	      %% Line 403
	      call 'io_lib':'format'
		  ([73|[110|[118|[97|[108|[105|[100|[32|[116|[121|[112|[101|[32|[115|[112|[101|[99|[105|[102|[105|[99|[97|[116|[105|[111|[110|[32|[102|[111|[114|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[119|[58|[126|[119|[47|[126|[119|[46|[32|[84|[104|[101|[32|[115|[117|[99|[99|[101|[115|[115|[32|[116|[121|[112|[105|[110|[103|[32|[105|[115|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 404
																																																							       [M|[F|[A|[Sig|[]]]]])
	  %% Line 405
	  <{'extra_range',[M|[F|[A|[ExtraRanges|[SigRange|[]]]]]]}> when 'true' ->
	      %% Line 406
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[115|[112|[101|[99|[105|[102|[105|[99|[97|[116|[105|[111|[110|[32|[102|[111|[114|[32|[126|[119|[58|[126|[119|[47|[126|[119|[32|[115|[116|[97|[116|[101|[115|[32|[116|[104|[97|[116|[32|[116|[104|[101|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[109|[105|[103|[104|[116|[32|[97|[108|[115|[111|[32|[114|[101|[116|[117|[114|[110|[32|[126|[115|[32|[98|[117|[116|[32|[116|[104|[101|[32|[105|[110|[102|[101|[114|[114|[101|[100|[32|[114|[101|[116|[117|[114|[110|[32|[105|[115|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 408
																																																																															 [M|[F|[A|[ExtraRanges|[SigRange|[]]]]]])
	  %% Line 409
	  <{'overlapping_contract',[M|[F|[A|[]]]]}> when 'true' ->
	      %% Line 410
	      call 'io_lib':'format'
		  ([79|[118|[101|[114|[108|[111|[97|[100|[101|[100|[32|[99|[111|[110|[116|[114|[97|[99|[116|[32|[102|[111|[114|[32|[126|[119|[58|[126|[119|[47|[126|[119|[32|[104|[97|[115|[32|[111|[118|[101|[114|[108|[97|[112|[112|[105|[110|[103|[32|[100|[111|[109|[97|[105|[110|[115|[59|[32|[115|[117|[99|[104|[32|[99|[111|[110|[116|[114|[97|[99|[116|[115|[32|[97|[114|[101|[32|[99|[117|[114|[114|[101|[110|[116|[108|[121|[32|[117|[110|[115|[117|[112|[112|[111|[114|[116|[101|[100|[32|[97|[110|[100|[32|[97|[114|[101|[32|[115|[105|[109|[112|[108|[121|[32|[105|[103|[110|[111|[114|[101|[100|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 412
																																																																																									     [M|[F|[A|[]]]])
	  %% Line 413
	  <{'spec_missing_fun',[M|[F|[A|[]]]]}> when 'true' ->
	      %% Line 414
	      call 'io_lib':'format'
		  ([67|[111|[110|[116|[114|[97|[99|[116|[32|[102|[111|[114|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[116|[104|[97|[116|[32|[100|[111|[101|[115|[32|[110|[111|[116|[32|[101|[120|[105|[115|[116|[58|[32|[126|[119|[58|[126|[119|[47|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 415
																																							    [M|[F|[A|[]]]])
	  %% Line 417
	  <{'call_with_opaque',[M|[F|[Args|[ArgNs|[ExpArgs|[]]]]]]}> when 'true' ->
	      let <_cor9> =
		  %% Line 419
		  apply 'form_positions'/1
		      (ArgNs)
	      in  let <_cor10> =
		      %% Line 419
		      apply 'form_expected'/1
			  (ExpArgs)
		  in  %% Line 418
		      call 'io_lib':'format'
			  ([84|[104|[101|[32|[99|[97|[108|[108|[32|[126|[119|[58|[126|[119|[126|[115|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[126|[115|[32|[119|[104|[101|[110|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 419
																													     [M|[F|[Args|[_cor9|[_cor10|[]]]]]])
	  %% Line 420
	  <{'call_without_opaque',[M|[F|[Args|[ExpectedTriples|[]]]]]}> when 'true' ->
	      let <_cor11> =
		  %% Line 422
		  apply 'form_expected_without_opaque'/1
		      (ExpectedTriples)
	      in  %% Line 421
		  call 'io_lib':'format'
		      ([84|[104|[101|[32|[99|[97|[108|[108|[32|[126|[119|[58|[126|[119|[126|[115|[32|[100|[111|[101|[115|[32|[110|[111|[116|[32|[104|[97|[118|[101|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 422
																											[M|[F|[Args|[_cor11|[]]]]])
	  %% Line 423
	  <{'opaque_eq',[Type|[_X_Op|[OpaqueType|[]]]]}> when 'true' ->
	      %% Line 424
	      call 'io_lib':'format'
		  ([65|[116|[116|[101|[109|[112|[116|[32|[116|[111|[32|[116|[101|[115|[116|[32|[102|[111|[114|[32|[101|[113|[117|[97|[108|[105|[116|[121|[32|[98|[101|[116|[119|[101|[101|[110|[32|[97|[32|[116|[101|[114|[109|[32|[111|[102|[32|[116|[121|[112|[101|[32|[126|[115|[32|[97|[110|[100|[32|[97|[32|[116|[101|[114|[109|[32|[111|[102|[32|[111|[112|[97|[113|[117|[101|[32|[116|[121|[112|[101|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 425
																																																														   [Type|[OpaqueType|[]]])
	  %% Line 426
	  <{'opaque_guard',[Arg1|[Infix|[Arg2|[ArgNs|[]]]]]}> when 'true' ->
	      let <_cor12> =
		  %% Line 428
		  apply 'form_positions'/1
		      (ArgNs)
	      in  %% Line 427
		  call 'io_lib':'format'
		      ([71|[117|[97|[114|[100|[32|[116|[101|[115|[116|[32|[126|[115|[32|[126|[115|[32|[126|[115|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 428
																									     [Arg1|[Infix|[Arg2|[_cor12|[]]]]])
	  %% Line 429
	  <{'opaque_guard',[Guard|[Args|[]]]}> when 'true' ->
	      %% Line 430
	      call 'io_lib':'format'
		  ([71|[117|[97|[114|[100|[32|[116|[101|[115|[116|[32|[126|[119|[126|[115|[32|[98|[114|[101|[97|[107|[115|[32|[116|[104|[101|[32|[111|[112|[97|[113|[117|[101|[110|[101|[115|[115|[32|[111|[102|[32|[105|[116|[115|[32|[97|[114|[103|[117|[109|[101|[110|[116|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 431
																																									 [Guard|[Args|[]]])
	  %% Line 432
	  <{'opaque_match',[Pat|[OpaqueType|[OpaqueTerm|[]]]]}> when 'true' ->
	      let <_cor13> =
		  %% Line 433
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (OpaqueType,
			       OpaqueTerm) ->
			[116|[104|[101|[32|[116|[101|[114|[109]]]]]]]]
		    %% Line 434
		    <> when 'true' ->
			OpaqueTerm
		  end
	      in  %% Line 436
		  call 'io_lib':'format'
		      ([84|[104|[101|[32|[97|[116|[116|[101|[109|[112|[116|[32|[116|[111|[32|[109|[97|[116|[99|[104|[32|[97|[32|[116|[101|[114|[109|[32|[111|[102|[32|[116|[121|[112|[101|[32|[126|[115|[32|[97|[103|[97|[105|[110|[115|[116|[32|[116|[104|[101|[32|[126|[115|[32|[98|[114|[101|[97|[107|[115|[32|[116|[104|[101|[32|[111|[112|[97|[113|[117|[101|[110|[101|[115|[115|[32|[111|[102|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 437
																																																													 [OpaqueType|[Pat|[_cor13|[]]]])
	  %% Line 438
	  <{'opaque_neq',[Type|[_X_Op|[OpaqueType|[]]]]}> when 'true' ->
	      %% Line 439
	      call 'io_lib':'format'
		  ([65|[116|[116|[101|[109|[112|[116|[32|[116|[111|[32|[116|[101|[115|[116|[32|[102|[111|[114|[32|[105|[110|[101|[113|[117|[97|[108|[105|[116|[121|[32|[98|[101|[116|[119|[101|[101|[110|[32|[97|[32|[116|[101|[114|[109|[32|[111|[102|[32|[116|[121|[112|[101|[32|[126|[115|[32|[97|[110|[100|[32|[97|[32|[116|[101|[114|[109|[32|[111|[102|[32|[111|[112|[97|[113|[117|[101|[32|[116|[121|[112|[101|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 440
																																																															       [Type|[OpaqueType|[]]])
	  %% Line 441
	  <{'opaque_type_test',[Fun|[Args|[Arg|[ArgType|[]]]]]}> when 'true' ->
	      %% Line 442
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[116|[121|[112|[101|[32|[116|[101|[115|[116|[32|[126|[115|[126|[115|[32|[98|[114|[101|[97|[107|[115|[32|[116|[104|[101|[32|[111|[112|[97|[113|[117|[101|[110|[101|[115|[115|[32|[111|[102|[32|[116|[104|[101|[32|[116|[101|[114|[109|[32|[126|[115|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 443
																																												 [Fun|[Args|[Arg|[ArgType|[]]]]])
	  %% Line 444
	  <{'opaque_size',[SizeType|[Size|[]]]}> when 'true' ->
	      %% Line 445
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[115|[105|[122|[101|[32|[126|[115|[32|[98|[114|[101|[97|[107|[115|[32|[116|[104|[101|[32|[111|[112|[97|[113|[117|[101|[110|[101|[115|[115|[32|[111|[102|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 446
																															[SizeType|[Size|[]]])
	  %% Line 447
	  <{'opaque_call',[M|[F|[Args|[Culprit|[OpaqueType|[]]]]]]}> when 'true' ->
	      %% Line 448
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[99|[97|[108|[108|[32|[126|[115|[58|[126|[115|[126|[115|[32|[98|[114|[101|[97|[107|[115|[32|[116|[104|[101|[32|[111|[112|[97|[113|[117|[101|[110|[101|[115|[115|[32|[111|[102|[32|[116|[104|[101|[32|[116|[101|[114|[109|[32|[126|[115|[32|[58|[58|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 449
																																												       [M|[F|[Args|[Culprit|[OpaqueType|[]]]]]])
	  %% Line 451
	  <{'race_condition',[M|[F|[Args|[Reason|[]]]]]}> when 'true' ->
	      %% Line 452
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[99|[97|[108|[108|[32|[126|[119|[58|[126|[119|[126|[115|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]], [M|[F|[Args|[Reason|[]]]]])
	  %% Line 454
	  <{'callback_type_mismatch',[B|[F|[A|[ST|[CT|[]]]]]]}> when 'true' ->
	      %% Line 455
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[105|[110|[102|[101|[114|[114|[101|[100|[32|[114|[101|[116|[117|[114|[110|[32|[116|[121|[112|[101|[32|[111|[102|[32|[126|[119|[47|[126|[119|[32|[40|[126|[115|[41|[32|[104|[97|[115|[32|[110|[111|[116|[104|[105|[110|[103|[32|[105|[110|[32|[99|[111|[109|[109|[111|[110|[32|[119|[105|[116|[104|[32|[126|[115|[44|[32|[119|[104|[105|[99|[104|[32|[105|[115|[32|[116|[104|[101|[32|[101|[120|[112|[101|[99|[116|[101|[100|[32|[114|[101|[116|[117|[114|[110|[32|[116|[121|[112|[101|[32|[102|[111|[114|[32|[116|[104|[101|[32|[99|[97|[108|[108|[98|[97|[99|[107|[32|[111|[102|[32|[126|[119|[32|[98|[101|[104|[97|[118|[105|[111|[117|[114|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 457
																																																																																																				 [F|[A|[ST|[CT|[B|[]]]]]])
	  %% Line 458
	  <{'callback_arg_type_mismatch',[B|[F|[A|[N|[ST|[CT|[]]]]]]]}> when 'true' ->
	      let <_cor15> =
		  %% Line 462
		  apply 'ordinal'/1
		      (N)
	      in  %% Line 459
		  call 'io_lib':'format'
		      ([84|[104|[101|[32|[105|[110|[102|[101|[114|[114|[101|[100|[32|[116|[121|[112|[101|[32|[102|[111|[114|[32|[116|[104|[101|[32|[126|[115|[32|[97|[114|[103|[117|[109|[101|[110|[116|[32|[111|[102|[32|[126|[119|[47|[126|[119|[32|[40|[126|[115|[41|[32|[105|[115|[32|[110|[111|[116|[32|[97|[32|[115|[117|[112|[101|[114|[116|[121|[112|[101|[32|[111|[102|[32|[126|[115|[44|[32|[119|[104|[105|[99|[104|[32|[105|[115|[32|[101|[120|[112|[101|[99|[116|[101|[100|[32|[116|[121|[112|[101|[32|[102|[111|[114|[32|[116|[104|[105|[115|[32|[97|[114|[103|[117|[109|[101|[110|[116|[32|[105|[110|[32|[116|[104|[101|[32|[99|[97|[108|[108|[98|[97|[99|[107|[32|[111|[102|[32|[116|[104|[101|[32|[126|[119|[32|[98|[101|[104|[97|[118|[105|[111|[117|[114|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 462
																																																																																																																	   [_cor15|[F|[A|[ST|[CT|[B|[]]]]]]])
	  %% Line 463
	  <{'callback_spec_type_mismatch',[B|[F|[A|[ST|[CT|[]]]]]]}> when 'true' ->
	      %% Line 464
	      call 'io_lib':'format'
		  ([84|[104|[101|[32|[114|[101|[116|[117|[114|[110|[32|[116|[121|[112|[101|[32|[126|[115|[32|[105|[110|[32|[116|[104|[101|[32|[115|[112|[101|[99|[105|[102|[105|[99|[97|[116|[105|[111|[110|[32|[111|[102|[32|[126|[119|[47|[126|[119|[32|[105|[115|[32|[110|[111|[116|[32|[97|[32|[115|[117|[98|[116|[121|[112|[101|[32|[111|[102|[32|[126|[115|[44|[32|[119|[104|[105|[99|[104|[32|[105|[115|[32|[116|[104|[101|[32|[101|[120|[112|[101|[99|[116|[101|[100|[32|[114|[101|[116|[117|[114|[110|[32|[116|[121|[112|[101|[32|[102|[111|[114|[32|[116|[104|[101|[32|[99|[97|[108|[108|[98|[97|[99|[107|[32|[111|[102|[32|[126|[119|[32|[98|[101|[104|[97|[118|[105|[111|[117|[114|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 466
																																																																																																						[ST|[F|[A|[CT|[B|[]]]]]])
	  %% Line 467
	  <{'callback_spec_arg_type_mismatch',[B|[F|[A|[N|[ST|[CT|[]]]]]]]}> when 'true' ->
	      let <_cor16> =
		  %% Line 471
		  apply 'ordinal'/1
		      (N)
	      in  %% Line 468
		  call 'io_lib':'format'
		      ([84|[104|[101|[32|[115|[112|[101|[99|[105|[102|[105|[101|[100|[32|[116|[121|[112|[101|[32|[102|[111|[114|[32|[116|[104|[101|[32|[126|[115|[32|[97|[114|[103|[117|[109|[101|[110|[116|[32|[111|[102|[32|[126|[119|[47|[126|[119|[32|[40|[126|[115|[41|[32|[105|[115|[32|[110|[111|[116|[32|[97|[32|[115|[117|[112|[101|[114|[116|[121|[112|[101|[32|[111|[102|[32|[126|[115|[44|[32|[119|[104|[105|[99|[104|[32|[105|[115|[32|[101|[120|[112|[101|[99|[116|[101|[100|[32|[116|[121|[112|[101|[32|[102|[111|[114|[32|[116|[104|[105|[115|[32|[97|[114|[103|[117|[109|[101|[110|[116|[32|[105|[110|[32|[116|[104|[101|[32|[99|[97|[108|[108|[98|[97|[99|[107|[32|[111|[102|[32|[116|[104|[101|[32|[126|[119|[32|[98|[101|[104|[97|[118|[105|[111|[117|[114|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 471
																																																																																																																		[_cor16|[F|[A|[ST|[CT|[B|[]]]]]]])
	  %% Line 472
	  <{'callback_missing',[B|[F|[A|[]]]]}> when 'true' ->
	      %% Line 473
	      call 'io_lib':'format'
		  ([85|[110|[100|[101|[102|[105|[110|[101|[100|[32|[99|[97|[108|[108|[98|[97|[99|[107|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[119|[47|[126|[119|[32|[40|[98|[101|[104|[97|[118|[105|[111|[117|[114|[32|[39|[126|[119|[39|[41|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 474
																																						  [F|[A|[B|[]]]])
	  %% Line 475
	  <{'callback_info_missing',[B|[]]}> when 'true' ->
	      %% Line 476
	      call 'io_lib':'format'
		  ([67|[97|[108|[108|[98|[97|[99|[107|[32|[105|[110|[102|[111|[32|[97|[98|[111|[117|[116|[32|[116|[104|[101|[32|[126|[119|[32|[98|[101|[104|[97|[118|[105|[111|[117|[114|[32|[105|[115|[32|[110|[111|[116|[32|[97|[118|[97|[105|[108|[97|[98|[108|[101|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [B|[]])
	  %% Line 478
	  <{'unknown_type',{M,F,A}}> when 'true' ->
	      %% Line 479
	      call 'io_lib':'format'
		  ([85|[110|[107|[110|[111|[119|[110|[32|[116|[121|[112|[101|[32|[126|[119|[58|[126|[119|[47|[126|[119]]]]]]]]]]]]]]]]]]]]], [M|[F|[A|[]]]])
	  %% Line 480
	  <{'unknown_function',{M,F,A}}> when 'true' ->
	      %% Line 481
	      call 'io_lib':'format'
		  ([85|[110|[107|[110|[111|[119|[110|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[119|[58|[126|[119|[47|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]], [M|[F|[A|[]]]])
	  %% Line 482
	  <{'unknown_behaviour',B}> when 'true' ->
	      %% Line 483
	      call 'io_lib':'format'
		  ([85|[110|[107|[110|[111|[119|[110|[32|[98|[101|[104|[97|[118|[105|[111|[117|[114|[32|[126|[119]]]]]]]]]]]]]]]]]]]], [B|[]])
	  ( <_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17})
		  -| [{'function_name',{'message_to_string',1}}] )
	    -| ['compiler_generated'] )
	end
'call_or_apply_to_string'/5 =
    %% Line 489
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <ArgNs,FailReason,SigArgs,SigRet,%% Line 490
					   {IsOverloaded,Contract}> when 'true' ->
	      let <PositionString> =
		  %% Line 491
		  apply 'form_position_string'/1
		      (ArgNs)
	      in  %% Line 492
		  case FailReason of
		    %% Line 493
		    <'only_sig'> when 'true' ->
			%% Line 494
			case <> of
			  %% Line 495
			  <>
			      when call 'erlang':'=:='
				    (ArgNs,
				     []) ->
			      %% Line 497
			      call 'io_lib':'format'
				  ([119|[105|[108|[108|[32|[110|[101|[118|[101|[114|[32|[114|[101|[116|[117|[114|[110|[32|[115|[105|[110|[99|[101|[32|[116|[104|[101|[32|[115|[117|[99|[99|[101|[115|[115|[32|[116|[121|[112|[105|[110|[103|[32|[97|[114|[103|[117|[109|[101|[110|[116|[115|[32|[97|[114|[101|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 498
																																															     [SigArgs|[]])
			  %% Line 499
			  <> when 'true' ->
			      %% Line 500
			      call 'io_lib':'format'
				  ([119|[105|[108|[108|[32|[110|[101|[118|[101|[114|[32|[114|[101|[116|[117|[114|[110|[32|[115|[105|[110|[99|[101|[32|[105|[116|[32|[100|[105|[102|[102|[101|[114|[115|[32|[105|[110|[32|[116|[104|[101|[32|[126|[115|[32|[97|[114|[103|[117|[109|[101|[110|[116|[32|[102|[114|[111|[109|[32|[116|[104|[101|[32|[115|[117|[99|[99|[101|[115|[115|[32|[116|[121|[112|[105|[110|[103|[32|[97|[114|[103|[117|[109|[101|[110|[116|[115|[58|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 502
																																																																						      [PositionString|[SigArgs|[]]])
			end
		    %% Line 504
		    <'only_contract'> when 'true' ->
			let <_cor9> =
			    %% Line 505
			    ( case <> of
				( <>
				      when call 'erlang':'=:='
					    (ArgNs,
					     []) ->
				      'true'
				  -| ['compiler_generated'] )
				( <> when 'true' ->
				      IsOverloaded
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			in  %% Line 505
			    case _cor9 of
			      %% Line 506
			      <'true'> when 'true' ->
				  %% Line 508
				  call 'io_lib':'format'
				      ([98|[114|[101|[97|[107|[115|[32|[116|[104|[101|[32|[99|[111|[110|[116|[114|[97|[99|[116|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]], [Contract|[]])
			      %% Line 509
			      <'false'> when 'true' ->
				  %% Line 510
				  call 'io_lib':'format'
				      ([98|[114|[101|[97|[107|[115|[32|[116|[104|[101|[32|[99|[111|[110|[116|[114|[97|[99|[116|[32|[126|[115|[32|[105|[110|[32|[116|[104|[101|[32|[126|[115|[32|[97|[114|[103|[117|[109|[101|[110|[116|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 511
																																		      [Contract|[PositionString|[]]])
			      ( <_cor10> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor10})
				-| ['compiler_generated'] )
			    end
		    %% Line 513
		    <'both'> when 'true' ->
			%% Line 514
			call 'io_lib':'format'
			    ([119|[105|[108|[108|[32|[110|[101|[118|[101|[114|[32|[114|[101|[116|[117|[114|[110|[32|[115|[105|[110|[99|[101|[32|[116|[104|[101|[32|[115|[117|[99|[99|[101|[115|[115|[32|[116|[121|[112|[105|[110|[103|[32|[105|[115|[32|[126|[115|[32|[45|[62|[32|[126|[115|[32|[97|[110|[100|[32|[116|[104|[101|[32|[99|[111|[110|[116|[114|[97|[99|[116|[32|[105|[115|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 515
																																																											 [SigArgs|[SigRet|[Contract|[]]]])
		    ( <_cor11> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor11})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'call_or_apply_to_string',5}}] )
	    -| ['compiler_generated'] )
	end
'form_positions'/1 =
    %% Line 518
    fun (_cor0) ->
	let <_cor6> =
	    %% Line 519
	    case _cor0 of
	      %% Line 520
	      <[_cor8|[]]> when 'true' ->
		  [97|[110|[32|[111|[112|[97|[113|[117|[101|[32|[116|[101|[114|[109|[32|[97|[115|[32]]]]]]]]]]]]]]]]]]
	      %% Line 521
	      <[_cor9|[_cor10|_cor11]]> when 'true' ->
		  [111|[112|[97|[113|[117|[101|[32|[116|[101|[114|[109|[115|[32|[97|[115|[32]]]]]]]]]]]]]]]]
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor5})
		-| ['compiler_generated'] )
	    end
	in  let <_cor3> =
		%% Line 522
		apply 'form_position_string'/1
		    (_cor0)
	    in  let <_cor2> =
		    %% Line 523
		    case _cor0 of
		      %% Line 524
		      <[_cor12|[]]> when 'true' ->
			  [32|[97|[114|[103|[117|[109|[101|[110|[116]]]]]]]]]
		      %% Line 525
		      <[_cor13|[_cor14|_cor15]]> when 'true' ->
			  [32|[97|[114|[103|[117|[109|[101|[110|[116|[115]]]]]]]]]]
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor1})
			-| ['compiler_generated'] )
		    end
		in  let <_cor4> =
			%% Line 522
			call 'erlang':'++'
			    (_cor3, _cor2)
		    in  %% Line 522
			call 'erlang':'++'
			    (_cor6, _cor4)
'form_expected_without_opaque'/1 =
    %% Line 530
    fun (_cor0) ->
	case _cor0 of
	  <[{N,T,TStr}|[]]> when 'true' ->
	      let <_cor4> =
		  %% Line 531
		  case call 'erl_types':'t_is_opaque'
			   (T) of
		    %% Line 532
		    <'true'> when 'true' ->
			%% Line 533
			call 'io_lib':'format'
			    ([97|[110|[32|[111|[112|[97|[113|[117|[101|[32|[116|[101|[114|[109|[32|[111|[102|[32|[116|[121|[112|[101|[32|[126|[115|[32|[97|[115|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [TStr|[]])
		    %% Line 534
		    <'false'> when 'true' ->
			%% Line 535
			call 'io_lib':'format'
			    ([97|[32|[116|[101|[114|[109|[32|[111|[102|[32|[116|[121|[112|[101|[32|[126|[115|[32|[40|[119|[105|[116|[104|[32|[111|[112|[97|[113|[117|[101|[32|[115|[117|[98|[116|[101|[114|[109|[115|[41|[32|[97|[115|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [TStr|[]])
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor1> =
		      %% Line 536
		      apply 'form_position_string'/1
			  ([N|[]])
		  in  let <_cor2> =
			  %% Line 536
			  call 'erlang':'++'
			      (_cor1, [32|[97|[114|[103|[117|[109|[101|[110|[116]]]]]]]]])
		      in  %% Line 536
			  call 'erlang':'++'
			      (_cor4, _cor2)
	  %% Line 537
	  <ExpectedTriples> when 'true' ->
	      %% Line 538
	      case call 'lists':'unzip3'
		       (ExpectedTriples) of
		<{ArgNs,_X_Ts,_X_TStrs}> when 'true' ->
		    let <_cor6> =
			%% Line 539
			apply 'form_position_string'/1
			    (ArgNs)
		    in  let <_cor7> =
			    %% Line 539
			    call 'erlang':'++'
				(_cor6, [32|[97|[114|[103|[117|[109|[101|[110|[116|[115]]]]]]]]]])
			in  %% Line 539
			    call 'erlang':'++'
				([111|[112|[97|[113|[117|[101|[32|[116|[101|[114|[109|[115|[32|[97|[115|[32]]]]]]]]]]]]]]]], _cor7)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	end
'form_expected'/1 =
    %% Line 541
    fun (_cor0) ->
	%% Line 542
	case _cor0 of
	  %% Line 543
	  <[T|[]]> when 'true' ->
	      let <TS> =
		  %% Line 544
		  call 'erl_types':'t_to_string'
		      (T)
	      in  %% Line 545
		  case call 'erl_types':'t_is_opaque'
			   (T) of
		    %% Line 546
		    <'true'> when 'true' ->
			call 'io_lib':'format'
			    ([97|[110|[32|[111|[112|[97|[113|[117|[101|[32|[116|[101|[114|[109|[32|[111|[102|[32|[116|[121|[112|[101|[32|[126|[115|[32|[105|[115|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [TS|[]])
		    %% Line 547
		    <'false'> when 'true' ->
			call 'io_lib':'format'
			    ([97|[32|[115|[116|[114|[117|[99|[116|[117|[114|[101|[100|[32|[116|[101|[114|[109|[32|[111|[102|[32|[116|[121|[112|[101|[32|[126|[115|[32|[105|[115|[32|[101|[120|[112|[101|[99|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [TS|[]])
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	  %% Line 549
	  <[_cor5|[_cor6|_cor7]]> when 'true' ->
	      [116|[101|[114|[109|[115|[32|[111|[102|[32|[100|[105|[102|[102|[101|[114|[101|[110|[116|[32|[116|[121|[112|[101|[115|[32|[97|[114|[101|[32|[101|[120|[112|[101|[99|[116|[101|[100|[32|[105|[110|[32|[116|[104|[101|[115|[101|[32|[112|[111|[115|[105|[116|[105|[111|[110|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'form_position_string'/1 =
    %% Line 552
    fun (_cor0) ->
	%% Line 553
	case _cor0 of
	  %% Line 554
	  <[]> when 'true' ->
	      []
	  %% Line 555
	  <[N1|[]]> when 'true' ->
	      apply 'ordinal'/1
		  (N1)
	  %% Line 556
	  <[_cor15|[_cor16|_cor17]]> when 'true' ->
	      %% Line 557
	      case call 'lists':'reverse'
		       (_cor0) of
		<[Last|Prevs]> when 'true' ->
		    let <_cor9> =
			%% Line 558
			( letrec
			      'lc$^0'/1 =
				  fun (_cor5) ->
				      case _cor5 of
					<[%% Line 559
					  N|_cor3]> when 'true' ->
					    let <_cor6> =
						apply 'ordinal'/1
						    (N)
					    in  let <_cor7> =
						    call 'io_lib':'format'
							([44|[32|[126|[115]]]], [_cor6|[]])
						in  let <_cor8> =
							%% Line 559
							apply 'lc$^0'/1
							    (_cor3)
						    in  ( [_cor7|_cor8]
							  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor5> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor5})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  let <_cor4> =
				  %% Line 559
				  call 'lists':'reverse'
				      (Prevs)
			      in  apply 'lc$^0'/1
				      (_cor4)
			  -| ['list_comprehension'] )
		    in  %% Line 558
			case call 'lists':'flatten'
				 (_cor9) of
			  <[44|[32|Head]]> when 'true' ->
			      let <_cor11> =
				  %% Line 560
				  apply 'ordinal'/1
				      (Last)
			      in  let <_cor12> =
				      %% Line 560
				      call 'erlang':'++'
					  ([32|[97|[110|[100|[32]]]]], _cor11)
				  in  %% Line 560
				      call 'erlang':'++'
					  (Head, _cor12)
			  ( <_cor10> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor10})
			    -| ['compiler_generated'] )
			end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor13> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor13})
	    -| ['compiler_generated'] )
	end
'ordinal'/1 =
    %% Line 563
    fun (_cor0) ->
	case _cor0 of
	  <1> when 'true' ->
	      [49|[115|[116]]]
	  %% Line 564
	  <2> when 'true' ->
	      [50|[110|[100]]]
	  %% Line 565
	  <3> when 'true' ->
	      [51|[114|[100]]]
	  %% Line 566
	  <N>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      call 'io_lib':'format'
		  ([126|[119|[116|[104]]]], [N|[]])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'ordinal',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('dialyzer')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('dialyzer', _cor0)
end