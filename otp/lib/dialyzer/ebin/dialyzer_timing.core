module 'dialyzer_timing' ['end_stamp'/1,
			  'init'/1,
			  'module_info'/0,
			  'module_info'/1,
			  'send_size_info'/3,
			  'start_stamp'/2,
			  'stop'/1]
    attributes [%% Line 31
		'export_type' =
		    %% Line 31
		    [{'timing_server',0}],
		%% Line 33
		'type' =
		    %% Line 33
		    [{'timing_server',{'type',33,'union',[{'type',33,'pid',[]}|[{'atom',33,'none'}]]},[]}],
		%% Line 35
		'spec' =
		    %% Line 35
		    [{{'init',1},[{'type',35,'fun',[{'type',35,'product',[{'type',35,'union',[{'type',35,'boolean',[]}|[{'atom',35,'debug'}]]}]}|[{'type',35,'timing_server',[]}]]}]}],
		%% Line 104
		'spec' =
		    %% Line 104
		    [{{'start_stamp',2},[{'type',104,'fun',[{'type',104,'product',[{'type',104,'timing_server',[]}|[{'type',104,'string',[]}]]}|[{'atom',104,'ok'}]]}]}],
		%% Line 111
		'spec' =
		    %% Line 111
		    [{{'end_stamp',1},[{'type',111,'fun',[{'type',111,'product',[{'type',111,'timing_server',[]}]}|[{'atom',111,'ok'}]]}]}],
		%% Line 118
		'spec' =
		    %% Line 118
		    [{{'send_size_info',3},[{'type',118,'fun',[{'type',118,'product',[{'type',118,'timing_server',[]}|[{'type',118,'integer',[]}|[{'type',118,'string',[]}]]]}|[{'atom',118,'ok'}]]}]}],
		%% Line 125
		'spec' =
		    %% Line 125
		    [{{'stop',1},[{'type',125,'fun',[{'type',125,'product',[{'type',125,'timing_server',[]}]}|[{'atom',125,'ok'}]]}]}]]
'init'/1 =
    %% Line 37
    fun (_cor0) ->
	%% Line 38
	case _cor0 of
	  %% Line 39
	  <'true'> when 'true' ->
	      do  %% Line 40
		  call 'io':'format'
		      ([10])
		  let <_cor2> =
		      %% Line 41
		      ( fun () ->
			    let <_cor1> =
				call 'erlang':'now'
				    ()
			    in  apply 'loop'/3
				    (_cor1, 0, [])
			-| [{'id',{0,0,'-init/1-fun-0-'}}] )
		  in  %% Line 41
		      call 'erlang':'spawn_link'
			  (_cor2)
	  %% Line 42
	  <'debug'> when 'true' ->
	      do  %% Line 43
		  call 'io':'format'
		      ([10])
		  let <_cor3> =
		      %% Line 44
		      ( fun () ->
			    apply 'debug_loop'/1
				([])
			-| [{'id',{0,0,'-init/1-fun-1-'}}] )
		  in  %% Line 44
		      call 'erlang':'spawn_link'
			  (_cor3)
	  %% Line 45
	  <'false'> when 'true' ->
	      'none'
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'loop'/3 =
    %% Line 48
    fun (_cor2,_cor1,_cor0) ->
	%% Line 49
	receive
	  %% Line 50
	  <{'stamp',Msg,Now}> when 'true' ->
	      let <_cor3> =
		  %% Line 51
		  apply 'diff'/2
		      (Now, _cor2)
	      in  do  %% Line 51
		      call 'io':'format'
			  ([32|[32|[32|[32|[126|[45|[49|[48|[115|[32|[40|[43|[126|[52|[46|[50|[102|[115|[41|[58]]]]]]]]]]]]]]]]]]]], [Msg|[_cor3|[]]])
		      %% Line 52
		      apply 'loop'/3
			  (Now, 0, [])
	  %% Line 53
	  <{'stamp',Now}> when 'true' ->
	      let <_cor6> =
		  %% Line 55
		  case _cor1 of
		    %% Line 56
		    <0> when 'true' ->
			[]
		    %% Line 57
		    <_cor13> when 'true' ->
			let <Data> =
			    %% Line 58
			    call 'io_lib':'format'
				([126|[112|[32|[126|[115]]]]], [_cor1|[_cor0|[]]])
			in  %% Line 59
			    call 'io_lib':'format'
				([32|[40|[126|[49|[50|[115|[41]]]]]]], [Data|[]])
		  end
	      in  let <_cor8> =
		      %% Line 61
		      apply 'diff'/2
			  (Now, _cor2)
		  in  do  %% Line 61
			  call 'io':'format'
			      ([126|[55|[46|[50|[102|[115|[126|[115|[10]]]]]]]]], [_cor8|[_cor6|[]]])
			  %% Line 62
			  apply 'loop'/3
			      (Now, 0, [])
	  %% Line 63
	  <{'size',NewSize,NewUnit}> when 'true' ->
	      %% Line 64
	      apply 'loop'/3
		  (_cor2, NewSize, NewUnit)
	  %% Line 65
	  <{Pid,'stop',Now}> when 'true' ->
	      let <_cor9> =
		  %% Line 66
		  apply 'diff'/2
		      (Now, _cor2)
	      in  do  %% Line 66
		      call 'io':'format'
			  ([32|[32|[32|[32|[126|[45|[57|[115|[32|[40|[43|[126|[53|[46|[50|[102|[115|[41|[10]]]]]]]]]]]]]]]]]]], [[]|[_cor9|[]]])
		      %% Line 67
		      call 'erlang':'!'
			  (Pid, 'ok')
	  %% Line 68
	  <{Pid,'stop'}> when 'true' ->
	      %% Line 69
	      call 'erlang':'!'
		  (Pid, 'ok')
	after 'infinity' ->
	  'true'
'debug_loop'/1 =
    %% Line 72
    fun (_cor0) ->
	%% Line 73
	receive
	  %% Line 74
	  <Message> when 'true' ->
	      %% Line 75
	      case call 'erlang':'statistics'
		       ('wall_clock') of
		<{Runtime,_cor11}> when 'true' ->
		    let <Procs> =
			%% Line 76
			call 'erlang':'system_info'
			    ('process_count')
		    in  let <ProcMem> =
			    %% Line 77
			    call 'erlang':'memory'
				('total')
			in  let <Status> =
				%% Line 78
				call 'io_lib':'format'
				    ([126|[49|[50|[119|[32|[126|[54|[119|[32|[126|[50|[48|[119]]]]]]]]]]]]], [Runtime|[Procs|[ProcMem|[]]]])
			    in  %% Line 79
				case Message of
				  %% Line 80
				  <{'stamp',Msg,_X_Now}> when 'true' ->
				      do  %% Line 81
					  call 'io':'format'
					      ([126|[115|[32|[126|[115|[95|[115|[116|[97|[114|[116|[10]]]]]]]]]]]], [Status|[Msg|[]]])
					  %% Line 82
					  apply 'debug_loop'/1
					      (Msg)
				  %% Line 83
				  <{'stamp',_X_Now}> when 'true' ->
				      do  %% Line 84
					  call 'io':'format'
					      ([126|[115|[32|[126|[115|[95|[115|[116|[111|[112|[10]]]]]]]]]]], [Status|[_cor0|[]]])
					  %% Line 85
					  apply 'debug_loop'/1
					      ([])
				  %% Line 86
				  <{Pid,'stop',_X_Now}> when 'true' ->
				      %% Line 87
				      call 'erlang':'!'
					  (Pid, 'ok')
				  %% Line 88
				  <{Pid,'stop'}> when 'true' ->
				      %% Line 89
				      call 'erlang':'!'
					  (Pid, 'ok')
				  %% Line 90
				  <_cor12> when 'true' ->
				      %% Line 91
				      apply 'debug_loop'/1
					  (_cor0)
				end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	after %% Line 94
	      50 ->
	  %% Line 95
	  case call 'erlang':'statistics'
		   ('wall_clock') of
	    <{Runtime,_cor13}> when 'true' ->
		let <Procs> =
		    %% Line 96
		    call 'erlang':'system_info'
			('process_count')
		in  let <ProcMem> =
			%% Line 97
			call 'erlang':'memory'
			    ('total')
		    in  let <Status> =
			    %% Line 98
			    call 'io_lib':'format'
				([126|[49|[50|[119|[32|[126|[54|[119|[32|[126|[50|[48|[119]]]]]]]]]]]]], [Runtime|[Procs|[ProcMem|[]]]])
			in  do  %% Line 99
				call 'io':'format'
				    ([126|[115|[10]]], [Status|[]])
				%% Line 100
				apply 'debug_loop'/1
				    (_cor0)
	    ( <_cor1> when 'true' ->
		  primop 'match_fail'
		      ({'badmatch',_cor1})
	      -| ['compiler_generated'] )
	  end
'start_stamp'/2 =
    %% Line 106
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'none',_cor5> when 'true' ->
	      'ok'
	  %% Line 107
	  <Pid,Msg> when 'true' ->
	      let <_cor2> =
		  %% Line 108
		  call 'erlang':'now'
		      ()
	      in  do  %% Line 108
		      call 'erlang':'!'
			  (Pid, {'stamp',Msg,_cor2})
		      %% Line 109
		      'ok'
	end
'end_stamp'/1 =
    %% Line 113
    fun (_cor0) ->
	case _cor0 of
	  <'none'> when 'true' ->
	      'ok'
	  %% Line 114
	  <Pid> when 'true' ->
	      let <_cor1> =
		  %% Line 115
		  call 'erlang':'now'
		      ()
	      in  do  %% Line 115
		      call 'erlang':'!'
			  (Pid, {'stamp',_cor1})
		      %% Line 116
		      'ok'
	end
'send_size_info'/3 =
    %% Line 120
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'none',_cor6,_cor7> when 'true' ->
	      'ok'
	  %% Line 121
	  <Pid,Size,Unit> when 'true' ->
	      do  %% Line 122
		  call 'erlang':'!'
		      (Pid, {'size',Size,Unit})
		  %% Line 123
		  'ok'
	end
'stop'/1 =
    %% Line 127
    fun (_cor0) ->
	case _cor0 of
	  <'none'> when 'true' ->
	      'ok'
	  %% Line 128
	  <Pid> when 'true' ->
	      let <_cor2> =
		  %% Line 129
		  call 'erlang':'self'
		      ()
	      in  let <_cor1> =
		      %% Line 129
		      call 'erlang':'now'
			  ()
		  in  do  %% Line 129
			  call 'erlang':'!'
			      (Pid, {_cor2,'stop',_cor1})
			  %% Line 130
			  receive
			    <'ok'> when 'true' ->
				'ok'
			  after 'infinity' ->
			    'true'
	end
'diff'/2 =
    %% Line 132
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 133
	    call 'timer':'now_diff'
		(_cor1, _cor0)
	in  %% Line 133
	    call 'erlang':'/'
		(_cor2, 1000000)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('dialyzer_timing')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('dialyzer_timing', _cor0)
end