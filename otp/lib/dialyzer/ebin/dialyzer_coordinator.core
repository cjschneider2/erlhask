module 'dialyzer_coordinator' ['get_next_label'/2,
			       'job_done'/3,
			       'module_info'/0,
			       'module_info'/1,
			       'parallel_job'/4,
			       'request_activation'/1,
			       'sccs_to_pids'/2,
			       'wait_activation'/0]
    attributes [%% Line 40
		'export_type' =
		    %% Line 40
		    [{'coordinator',0}|[{'mode',0}|[{'init_data',0}|[{'result',0}]]]],
		%% Line 44
		'type' =
		    %% Line 44
		    [{'collector',{'type',44,'pid',[]},[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'regulator',{'type',45,'pid',[]},[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{'scc_to_pid',{'type',46,'union',[{'remote_type',46,[{'atom',46,'ets'}|[{'atom',46,'tid'}|[[]]]]}|[{'atom',46,'unused'}]]},[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'coordinator',{'type',48,'tuple',[{'type',48,'collector',[]}|[{'type',48,'regulator',[]}|[{'type',48,'scc_to_pid',[]}]]]},[]}],
		%% Line 49
		'type' =
		    %% Line 49
		    [{'timing',{'remote_type',49,[{'atom',49,'dialyzer_timing'}|[{'atom',49,'timing_server'}|[[]]]]},[]}],
		%% Line 51
		'type' =
		    %% Line 51
		    [{'scc',{'type',51,'list',[{'type',51,'mfa_or_funlbl',[]}]},[]}],
		%% Line 52
		'type' =
		    %% Line 52
		    [{'mode',{'type',52,'union',[{'atom',52,'typesig'}|[{'atom',52,'dataflow'}|[{'atom',52,'compile'}|[{'atom',52,'warnings'}]]]]},[]}],
		%% Line 54
		'type' =
		    %% Line 54
		    [{'compile_jobs',{'type',54,'list',[{'remote_type',54,[{'atom',54,'file'}|[{'atom',54,'filename'}|[[]]]]}]},[]}],
		%% Line 55
		'type' =
		    %% Line 55
		    [{'typesig_jobs',{'type',55,'list',[{'type',55,'scc',[]}]},[]}],
		%% Line 56
		'type' =
		    %% Line 56
		    [{'dataflow_jobs',{'type',56,'list',[{'type',56,'module',[]}]},[]}],
		%% Line 57
		'type' =
		    %% Line 57
		    [{'warnings_jobs',{'type',57,'list',[{'type',57,'module',[]}]},[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{'compile_init_data',{'remote_type',59,[{'atom',59,'dialyzer_analysis_callgraph'}|[{'atom',59,'compile_init_data'}|[[]]]]},[]}],
		%% Line 60
		'type' =
		    %% Line 60
		    [{'typesig_init_data',{'remote_type',60,[{'atom',60,'dialyzer_succ_typings'}|[{'atom',60,'typesig_init_data'}|[[]]]]},[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{'dataflow_init_data',{'remote_type',61,[{'atom',61,'dialyzer_succ_typings'}|[{'atom',61,'dataflow_init_data'}|[[]]]]},[]}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{'warnings_init_data',{'remote_type',62,[{'atom',62,'dialyzer_succ_typings'}|[{'atom',62,'warnings_init_data'}|[[]]]]},[]}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{'compile_result',{'remote_type',64,[{'atom',64,'dialyzer_analysis_callgraph'}|[{'atom',64,'compile_result'}|[[]]]]},[]}],
		%% Line 65
		'type' =
		    %% Line 65
		    [{'typesig_result',{'type',65,'list',[{'type',65,'mfa_or_funlbl',[]}]},[]}],
		%% Line 66
		'type' =
		    %% Line 66
		    [{'dataflow_result',{'type',66,'list',[{'type',66,'mfa_or_funlbl',[]}]},[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{'warnings_result',{'type',67,'list',[{'type',67,'dial_warning',[]}]},[]}],
		%% Line 69
		'type' =
		    %% Line 69
		    [{'init_data',{'type',69,'union',[{'type',69,'compile_init_data',[]}|[{'type',69,'typesig_init_data',[]}|[{'type',70,'dataflow_init_data',[]}|[{'type',70,'warnings_init_data',[]}]]]]},[]}],
		%% Line 72
		'type' =
		    %% Line 72
		    [{'result',{'type',72,'union',[{'type',72,'compile_result',[]}|[{'type',72,'typesig_result',[]}|[{'type',73,'dataflow_result',[]}|[{'type',73,'warnings_result',[]}]]]]},[]}],
		%% Line 75
		'type' =
		    %% Line 75
		    [{'job',{'type',75,'union',[{'type',75,'scc',[]}|[{'type',75,'module',[]}|[{'remote_type',75,[{'atom',75,'file'}|[{'atom',75,'filename'}|[[]]]]}]]]},[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{'job_result',{'type',76,'union',[{'remote_type',76,[{'atom',76,'dialyzer_analysis_callgraph'}|[{'atom',76,'one_file_result'}|[[]]]]}|[{'type',77,'typesig_result',[]}|[{'type',77,'dataflow_result',[]}|[{'type',77,'warnings_result',[]}]]]]},[]}],
		%% Line 79
		'type' =
		    %% Line 79
		    [{{'record','state'},[{'typed_record_field',{'record_field',79,{'atom',79,'mode'}},{'type',79,'union',[{'atom',79,'undefined'}|[{'type',79,'mode',[]}]]}}|[{'typed_record_field',{'record_field',80,{'atom',80,'active'},{'integer',80,0}},{'type',80,'integer',[]}}|[{'typed_record_field',{'record_field',81,{'atom',81,'result'}},{'type',81,'union',[{'atom',81,'undefined'}|[{'type',81,'result',[]}]]}}|[{'typed_record_field',{'record_field',82,{'atom',82,'next_label'},{'integer',82,0}},{'type',82,'integer',[]}}|[{'typed_record_field',{'record_field',83,{'atom',83,'init_data'}},{'type',83,'union',[{'atom',83,'undefined'}|[{'type',83,'init_data',[]}]]}}|[{'typed_record_field',{'record_field',84,{'atom',84,'regulator'}},{'type',84,'union',[{'atom',84,'undefined'}|[{'type',84,'regulator',[]}]]}}|[{'typed_record_field',{'record_field',85,{'atom',85,'scc_to_pid'}},{'type',85,'union',[{'atom',85,'undefined'}|[{'type',85,'scc_to_pid',[]}]]}}]]]]]]],[]}],
		%% Line 33
		'type' =
		    %% Line 33
		    [{'dial_ret',{'type',33,'union',[{'integer',33,0}|[{'integer',34,1}|[{'integer',35,2}]]]},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'dial_warn_tag',{'type',68,'union',[{'atom',68,'warn_return_no_exit'}|[{'atom',68,'warn_return_only_exit'}|[{'atom',69,'warn_not_called'}|[{'atom',69,'warn_non_proper_list'}|[{'atom',70,'warn_matching'}|[{'atom',70,'warn_opaque'}|[{'atom',70,'warn_fun_app'}|[{'atom',71,'warn_failing_call'}|[{'atom',71,'warn_bin_construction'}|[{'atom',72,'warn_contract_types'}|[{'atom',72,'warn_contract_syntax'}|[{'atom',73,'warn_contract_not_equal'}|[{'atom',73,'warn_contract_subtype'}|[{'atom',74,'warn_contract_supertype'}|[{'atom',74,'warn_callgraph'}|[{'atom',75,'warn_umatched_return'}|[{'atom',75,'warn_race_condition'}|[{'atom',76,'warn_behaviour'}|[{'atom',76,'warn_contract_range'}|[{'atom',77,'warn_undefined_callbacks'}|[{'atom',77,'warn_unknown'}]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'file_line',{'type',83,'tuple',[{'remote_type',83,[{'atom',83,'file'}|[{'atom',83,'filename'}|[[]]]]}|[{'type',83,'non_neg_integer',[]}]]},[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{'dial_warning',{'type',84,'tuple',[{'type',84,'dial_warn_tag',[]}|[{'type',84,'file_line',[]}|[{'type',84,'tuple',[{'type',84,'atom',[]}|[{'type',84,'list',[{'type',84,'term',[]}]}]]}]]]},[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{'dial_error',{'type',89,'any',[]},[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{'anal_type',{'type',96,'union',[{'atom',96,'succ_typings'}|[{'atom',96,'plt_build'}]]},[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{'anal_type1',{'type',97,'union',[{'type',97,'anal_type',[]}|[{'atom',97,'plt_add'}|[{'atom',97,'plt_check'}|[{'atom',97,'plt_remove'}]]]]},[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{'contr_constr',{'type',98,'tuple',[{'atom',98,'subtype'}|[{'remote_type',98,[{'atom',98,'erl_types'}|[{'atom',98,'erl_type'}|[[]]]]}|[{'remote_type',98,[{'atom',98,'erl_types'}|[{'atom',98,'erl_type'}|[[]]]]}]]]},[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{'contract_pair',{'type',99,'tuple',[{'remote_type',99,[{'atom',99,'erl_types'}|[{'atom',99,'erl_type'}|[[]]]]}|[{'type',99,'list',[{'type',99,'contr_constr',[]}]}]]},[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{'dial_define',{'type',100,'tuple',[{'type',100,'atom',[]}|[{'type',100,'term',[]}]]},[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{'dial_option',{'type',101,'tuple',[{'type',101,'atom',[]}|[{'type',101,'term',[]}]]},[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{'dial_options',{'type',102,'list',[{'type',102,'dial_option',[]}]},[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{'fopt',{'type',103,'union',[{'atom',103,'basename'}|[{'atom',103,'fullpath'}]]},[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{'format',{'type',104,'union',[{'atom',104,'formatted'}|[{'atom',104,'raw'}]]},[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{'label',{'type',105,'non_neg_integer',[]},[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{'rep_mode',{'type',106,'union',[{'atom',106,'quiet'}|[{'atom',106,'normal'}|[{'atom',106,'verbose'}]]]},[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{'start_from',{'type',107,'union',[{'atom',107,'byte_code'}|[{'atom',107,'src_code'}]]},[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{'mfa_or_funlbl',{'type',108,'union',[{'type',108,'label',[]}|[{'type',108,'mfa',[]}]]},[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{'solver',{'type',109,'union',[{'atom',109,'v1'}|[{'atom',109,'v2'}]]},[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{{'record','analysis'},[{'typed_record_field',{'record_field',115,{'atom',115,'analysis_pid'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'pid',[]}]]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'type'},{'atom',116,'succ_typings'}},{'type',116,'anal_type',[]}}|[{'typed_record_field',{'record_field',117,{'atom',117,'defines'},{'nil',117}},{'type',117,'list',[{'type',117,'dial_define',[]}]}}|[{'typed_record_field',{'record_field',118,{'atom',118,'doc_plt'}},{'type',118,'union',[{'atom',118,'undefined'}|[{'remote_type',118,[{'atom',118,'dialyzer_plt'}|[{'atom',118,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',119,{'atom',119,'files'},{'nil',119}},{'type',119,'list',[{'remote_type',119,[{'atom',119,'file'}|[{'atom',119,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'include_dirs'},{'nil',120}},{'type',120,'list',[{'remote_type',120,[{'atom',120,'file'}|[{'atom',120,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',121,{'atom',121,'start_from'},{'atom',121,'byte_code'}},{'type',121,'start_from',[]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'plt'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'remote_type',122,[{'atom',122,'dialyzer_plt'}|[{'atom',122,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'use_contracts'},{'atom',123,'true'}},{'type',123,'boolean',[]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'race_detection'},{'atom',124,'false'}},{'type',124,'boolean',[]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'behaviours_chk'},{'atom',125,'false'}},{'type',125,'boolean',[]}}|[{'typed_record_field',{'record_field',126,{'atom',126,'timing'},{'atom',126,'false'}},{'type',126,'union',[{'type',126,'boolean',[]}|[{'atom',126,'debug'}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'timing_server'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'remote_type',127,[{'atom',127,'dialyzer_timing'}|[{'atom',127,'timing_server'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'callgraph_file'},{'string',128,[]}},{'remote_type',128,[{'atom',128,'file'}|[{'atom',128,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'solvers'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'list',[{'type',129,'solver',[]}]}]]}}]]]]]]]]]]]]]]],[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{{'record','options'},[{'typed_record_field',{'record_field',131,{'atom',131,'files'},{'nil',131}},{'type',131,'list',[{'remote_type',131,[{'atom',131,'file'}|[{'atom',131,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'files_rec'},{'nil',132}},{'type',132,'list',[{'remote_type',132,[{'atom',132,'file'}|[{'atom',132,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',133,{'atom',133,'analysis_type'},{'atom',133,'succ_typings'}},{'type',133,'anal_type1',[]}}|[{'typed_record_field',{'record_field',134,{'atom',134,'timing'},{'atom',134,'false'}},{'type',134,'union',[{'type',134,'boolean',[]}|[{'atom',134,'debug'}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'defines'},{'nil',135}},{'type',135,'list',[{'type',135,'dial_define',[]}]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'from'},{'atom',136,'byte_code'}},{'type',136,'start_from',[]}}|[{'typed_record_field',{'record_field',137,{'atom',137,'get_warnings'},{'atom',137,'maybe'}},{'type',137,'union',[{'type',137,'boolean',[]}|[{'atom',137,'maybe'}]]}}|[{'typed_record_field',{'record_field',138,{'atom',138,'init_plts'},{'nil',138}},{'type',138,'list',[{'remote_type',138,[{'atom',138,'file'}|[{'atom',138,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',139,{'atom',139,'include_dirs'},{'nil',139}},{'type',139,'list',[{'remote_type',139,[{'atom',139,'file'}|[{'atom',139,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'output_plt'},{'atom',140,'none'}},{'type',140,'union',[{'atom',140,'none'}|[{'remote_type',140,[{'atom',140,'file'}|[{'atom',140,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',141,{'atom',141,'legal_warnings'},{'call',141,{'remote',141,{'atom',141,'ordsets'},{'atom',141,'new'}},[]}},{'remote_type',141,[{'atom',141,'ordsets'}|[{'atom',141,'ordset'}|[[{'type',141,'dial_warn_tag',[]}]]]]}}|[{'typed_record_field',{'record_field',142,{'atom',142,'report_mode'},{'atom',142,'normal'}},{'type',142,'rep_mode',[]}}|[{'typed_record_field',{'record_field',143,{'atom',143,'erlang_mode'},{'atom',143,'false'}},{'type',143,'boolean',[]}}|[{'typed_record_field',{'record_field',144,{'atom',144,'use_contracts'},{'atom',144,'true'}},{'type',144,'boolean',[]}}|[{'typed_record_field',{'record_field',145,{'atom',145,'output_file'},{'atom',145,'none'}},{'type',145,'union',[{'atom',145,'none'}|[{'remote_type',145,[{'atom',145,'file'}|[{'atom',145,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',146,{'atom',146,'output_format'},{'atom',146,'formatted'}},{'type',146,'format',[]}}|[{'typed_record_field',{'record_field',147,{'atom',147,'filename_opt'},{'atom',147,'basename'}},{'type',147,'fopt',[]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'callgraph_file'},{'string',148,[]}},{'remote_type',148,[{'atom',148,'file'}|[{'atom',148,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'check_plt'},{'atom',149,'true'}},{'type',149,'boolean',[]}}|[{'typed_record_field',{'record_field',150,{'atom',150,'solvers'},{'nil',150}},{'type',150,'list',[{'type',150,'solver',[]}]}}]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 152
		'type' =
		    %% Line 152
		    [{{'record','contract'},[{'typed_record_field',{'record_field',152,{'atom',152,'contracts'},{'nil',152}},{'type',152,'list',[{'type',152,'contract_pair',[]}]}}|[{'typed_record_field',{'record_field',153,{'atom',153,'args'},{'nil',153}},{'type',153,'list',[{'remote_type',153,[{'atom',153,'erl_types'}|[{'atom',153,'erl_type'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',154,{'atom',154,'forms'},{'nil',154}},{'type',154,'list',[{'type',154,'tuple',[{'var',154,'_'}|[{'var',154,'_'}]]}]}}]]],[]}],
		%% Line 92
		'spec' =
		    %% Line 92
		    [{{'parallel_job',4},[{'type',92,'fun',[{'type',92,'product',[{'atom',92,'compile'}|[{'type',92,'compile_jobs',[]}|[{'type',92,'compile_init_data',[]}|[{'type',92,'timing',[]}]]]]}|[{'type',93,'tuple',[{'type',93,'compile_result',[]}|[{'type',93,'integer',[]}]]}]]}|[{'type',94,'fun',[{'type',94,'product',[{'atom',94,'typesig'}|[{'type',94,'typesig_jobs',[]}|[{'type',94,'typesig_init_data',[]}|[{'type',94,'timing',[]}]]]]}|[{'type',95,'typesig_result',[]}]]}|[{'type',96,'fun',[{'type',96,'product',[{'atom',96,'dataflow'}|[{'type',96,'dataflow_jobs',[]}|[{'type',96,'dataflow_init_data',[]}|[{'type',97,'timing',[]}]]]]}|[{'type',97,'dataflow_result',[]}]]}|[{'type',98,'fun',[{'type',98,'product',[{'atom',98,'warnings'}|[{'type',98,'warnings_jobs',[]}|[{'type',98,'warnings_init_data',[]}|[{'type',99,'timing',[]}]]]]}|[{'type',99,'warnings_result',[]}]]}]]]]}],
		%% Line 176
		'spec' =
		    %% Line 176
		    [{{'sccs_to_pids',2},[{'type',176,'fun',[{'type',176,'product',[{'type',176,'list',[{'type',176,'union',[{'type',176,'scc',[]}|[{'type',176,'module',[]}]]}]}|[{'type',176,'coordinator',[]}]]}|[{'type',177,'tuple',[{'type',177,'list',[{'remote_type',177,[{'atom',177,'dialyzer_worker'}|[{'atom',177,'worker'}|[[]]]]}]}|[{'type',177,'list',[{'type',177,'union',[{'type',177,'scc',[]}|[{'type',177,'module',[]}]]}]}]]}]]}]}],
		%% Line 190
		'spec' =
		    %% Line 190
		    [{{'job_done',3},[{'type',190,'fun',[{'type',190,'product',[{'type',190,'job',[]}|[{'type',190,'job_result',[]}|[{'type',190,'coordinator',[]}]]]}|[{'atom',190,'ok'}]]}]}],
		%% Line 197
		'spec' =
		    %% Line 197
		    [{{'get_next_label',2},[{'type',197,'fun',[{'type',197,'product',[{'type',197,'integer',[]}|[{'type',197,'coordinator',[]}]]}|[{'type',197,'integer',[]}]]}]}],
		%% Line 205
		'spec' =
		    %% Line 205
		    [{{'wait_activation',0},[{'type',205,'fun',[{'type',205,'product',[]}|[{'atom',205,'ok'}]]}]}],
		%% Line 213
		'spec' =
		    %% Line 213
		    [{{'request_activation',1},[{'type',213,'fun',[{'type',213,'product',[{'type',213,'coordinator',[]}]}|[{'atom',213,'ok'}]]}]}]]
'parallel_job'/4 =
    %% Line 101
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <State> =
	    %% Line 102
	    apply 'spawn_jobs'/4
		(_cor3, _cor2, _cor1, _cor0)
	in  %% Line 103
	    apply 'collect_result'/1
		(State)
'spawn_jobs'/4 =
    %% Line 105
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Collector> =
	    %% Line 106
	    call 'erlang':'self'
		()
	in  let <Regulator> =
		%% Line 107
		apply 'spawn_regulator'/0
		    ()
	    in  let <_cor8> =
		    %% Line 108
		    ( case <> of
			( <>
			      when call 'erlang':'=:='
				    (_cor3,
				     'typesig') ->
			      'true'
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      call 'erlang':'=:='
				  (_cor3, 'dataflow')
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		in  let <_cor11> =
			%% Line 110
			case _cor8 of
			  %% Line 111
			  <'true'> when 'true' ->
			      call 'ets':'new'
				  ('scc_to_pid', [{'read_concurrency','true'}])
			  %% Line 112
			  <'false'> when 'true' ->
			      'unused'
			  ( <_cor10> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor10})
			    -| ['compiler_generated'] )
			end
		    in  let <Coordinator> = {%% Line 114
			     Collector,%% Line 114
				       Regulator,_cor11}
			in  let <Fold> =
				%% Line 116
				( fun (_cor18,_cor17) ->
				      let <Pid> =
					  %% Line 117
					  call 'dialyzer_worker':'launch'
					      (_cor3, _cor18, _cor1, Coordinator)
				      in  do  %% Line 118
					      case _cor8 of
						%% Line 119
						<'true'> when 'true' ->
						    case call 'ets':'insert'
							     (_cor11, {_cor18,Pid}) of
						      <'true'> when 'true' ->
							  'ok'
						      ( <_cor15> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor15})
							-| ['compiler_generated'] )
						    end
						%% Line 120
						<'false'> when 'true' ->
						    apply 'request_activation'/2
							(Regulator, Pid)
						( <_cor16> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor16})
						  -| ['compiler_generated'] )
					      end
					      %% Line 122
					      call 'erlang':'+'
						  (_cor17, 1)
				  -| [{'id',{0,0,'-spawn_jobs/4-fun-0-'}}] )
			    in  let <JobCount> =
				    %% Line 124
				    call 'lists':'foldl'
					(Fold, 0, _cor2)
				in  let <_cor24> =
					%% Line 126
					case _cor3 of
					  %% Line 127
					  <'typesig'> when 'true' ->
					      [83|[67|[67|[115]]]]
					  %% Line 128
					  <_cor33> when 'true' ->
					      [109|[111|[100|[117|[108|[101|[115]]]]]]]
					end
				    in  do  %% Line 130
					    call 'dialyzer_timing':'send_size_info'
						(_cor0, JobCount, _cor24)
					    let <_cor27> =
						%% Line 132
						case _cor3 of
						  %% Line 133
						  <'compile'> when 'true' ->
						      call 'dialyzer_analysis_callgraph':'compile_init_result'
							  ()
						  %% Line 134
						  <_cor34> when 'true' ->
						      []
						end
					    in  %% Line 136
						{'state',_cor3,JobCount,_cor27,0,_cor1,%% Line 137
										       Regulator,_cor11}
'collect_result'/1 =
    %% Line 139
    fun (_cor0) ->
	case _cor0 of
	  <State = {'state',Mode,Active,Result,%% Line 140
					       NextLabel,%% Line 140
							 InitData,%% Line 141
								  Regulator,%% Line 141
									    SCCtoPID}> when 'true' ->
	      %% Line 142
	      receive
		%% Line 143
		<{'next_label_request',Estimation,Pid}> when 'true' ->
		    do  %% Line 144
			call 'erlang':'!'
			    (Pid, {'next_label_reply',NextLabel})
			let <_rec0> =
			    %% Line 145
			    call 'erlang':'+'
				(NextLabel, Estimation)
			in  let <_cor4> =
				%% Line 145
				call 'erlang':'setelement'
				    (5, State, _rec0)
			    in  %% Line 145
				apply 'collect_result'/1
				    (_cor4)
		%% Line 146
		<{'done',Job,Data}> when 'true' ->
		    let <NewResult> =
			%% Line 147
			apply 'update_result'/5
			    (Mode, InitData, Job, Data, Result)
		    in  %% Line 148
			case Active of
			  %% Line 149
			  <1> when 'true' ->
			      do  %% Line 150
				  apply 'kill_regulator'/1
				      (Regulator)
				  %% Line 151
				  case Mode of
				    %% Line 152
				    <'compile'> when 'true' ->
					%% Line 153
					{NewResult,NextLabel}
				    %% Line 154
				    <X>
					when let <_cor6> =
					      call 'erlang':'=:='
						  (Mode, 'typesig')
					  in  let <_cor7> =
						  call 'erlang':'=:='
						      (Mode, 'dataflow')
					      in  call 'erlang':'or'
						      (_cor6, _cor7) ->
					do  %% Line 155
					    call 'ets':'delete'
						(SCCtoPID)
					    %% Line 156
					    NewResult
				    %% Line 157
				    <'warnings'> when 'true' ->
					%% Line 158
					NewResult
				    ( <_cor8> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor8})
				      -| ['compiler_generated'] )
				  end
			  %% Line 160
			  <N> when 'true' ->
			      let <_rec2> =
				  %% Line 161
				  call 'erlang':'-'
				      (N, 1)
			      in  let <_cor11> =
				      %% Line 161
				      call 'erlang':'setelement'
					  (4, State, NewResult)
				  in  let <_cor13> =
					  %% Line 161
					  call 'erlang':'setelement'
					      (3, _cor11, _rec2)
				      in  %% Line 161
					  apply 'collect_result'/1
					      (_cor13)
			end
	      after 'infinity' ->
		'true'
	  ( <_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15})
		  -| [{'function_name',{'collect_result',1}}] )
	    -| ['compiler_generated'] )
	end
'update_result'/5 =
    %% Line 165
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 166
	case _cor4 of
	  %% Line 167
	  <'compile'> when 'true' ->
	      %% Line 168
	      call 'dialyzer_analysis_callgraph':'add_to_result'
		  (_cor2, _cor1, _cor0, _cor3)
	  %% Line 170
	  <X>
	      when let <_cor5> =
		    call 'erlang':'=:='
			(_cor4, 'typesig')
		in  let <_cor6> =
			call 'erlang':'=:='
			    (_cor4, 'dataflow')
		    in  call 'erlang':'or'
			    (_cor5, _cor6) ->
	      let <_cor7> =
		  %% Line 171
		  call 'dialyzer_succ_typings':'lookup_names'
		      (_cor1, _cor3)
	      in  %% Line 171
		  call 'erlang':'++'
		      (_cor7, _cor0)
	  %% Line 172
	  <'warnings'> when 'true' ->
	      %% Line 173
	      call 'erlang':'++'
		  (_cor1, _cor0)
	  ( <_cor8> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor8})
	    -| ['compiler_generated'] )
	end
'sccs_to_pids'/2 =
    %% Line 179
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <SCCs,{_X_Collector,_X_Regulator,SCCtoPID}> when 'true' ->
	      let <Fold> =
		  %% Line 181
		  ( fun (_cor8,_cor7) ->
			case <_cor8,_cor7> of
			  <SCC,{Pids,Unknown}> when 'true' ->
			      %% Line 182
			      try
				  call 'ets':'lookup_element'
				      (SCCtoPID, SCC, 2)
			      of <_cor2> ->
				  %% Line 183
				  {[_cor2|Pids],Unknown}
			      catch <_cor6,_cor5,_cor4> ->
				  %% Line 185
				  {Pids,[SCC|Unknown]}
			  ( <_cor10,_cor9> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor10,_cor9})
				  -| [{'function_name',{'-sccs_to_pids/2-fun-0-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-sccs_to_pids/2-fun-0-'}}] )
	      in  %% Line 188
		  call 'lists':'foldl'
		      (Fold, {[],[]}, SCCs)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'sccs_to_pids',2}}] )
	    -| ['compiler_generated'] )
	end
'job_done'/3 =
    %% Line 192
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Job,Result,{Collector,Regulator,_X_SCCtoPID}> when 'true' ->
	      do  %% Line 193
		  call 'erlang':'!'
		      (Regulator, 'done')
		  do  %% Line 194
		      call 'erlang':'!'
			  (Collector, {'done',Job,Result})
		      %% Line 195
		      'ok'
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'job_done',3}}] )
	    -| ['compiler_generated'] )
	end
'get_next_label'/2 =
    %% Line 199
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <EstimatedSize,{Collector,_X_Regulator,_X_SCCtoPID}> when 'true' ->
	      let <_cor2> =
		  %% Line 200
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 200
		      call 'erlang':'!'
			  (Collector, {'next_label_request',EstimatedSize,_cor2})
		      %% Line 201
		      receive
			%% Line 202
			<{'next_label_reply',NextLabel}> when 'true' ->
			    NextLabel
		      after 'infinity' ->
			'true'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'get_next_label',2}}] )
	    -| ['compiler_generated'] )
	end
'wait_activation'/0 =
    %% Line 207
    fun () ->
	%% Line 208
	receive
	  <'activate'> when 'true' ->
	      'ok'
	after 'infinity' ->
	  'true'
'activate_pid'/1 =
    %% Line 210
    fun (_cor0) ->
	%% Line 211
	call 'erlang':'!'
	    (_cor0, 'activate')
'request_activation'/1 =
    %% Line 215
    fun (_cor0) ->
	case _cor0 of
	  <{_X_Collector,Regulator,_X_SCCtoPID}> when 'true' ->
	      let <_cor1> =
		  %% Line 216
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 216
		      call 'erlang':'!'
			  (Regulator, {'req',_cor1})
		      %% Line 217
		      apply 'wait_activation'/0
			  ()
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'request_activation',1}}] )
	    -| ['compiler_generated'] )
	end
'request_activation'/2 =
    %% Line 219
    fun (_cor1,_cor0) ->
	do  %% Line 220
	    call 'erlang':'!'
		(_cor1, {'req',_cor0})
	    %% Line 221
	    'ok'
'spawn_regulator'/0 =
    %% Line 223
    fun () ->
	let <InitTickets> =
	    %% Line 224
	    call 'dialyzer_utils':'parallelism'
		()
	in  let <_cor2> =
		%% Line 225
		( fun () ->
		      let <_cor1> =
			  call 'queue':'new'
			      ()
		      in  apply 'regulator_loop'/2
			      (InitTickets, _cor1)
		  -| [{'id',{0,0,'-spawn_regulator/0-fun-0-'}}] )
	    in  %% Line 225
		call 'erlang':'spawn_link'
		    (_cor2)
'regulator_loop'/2 =
    %% Line 227
    fun (_cor1,_cor0) ->
	%% Line 228
	receive
	  %% Line 229
	  <{'req',Pid}> when 'true' ->
	      %% Line 230
	      case _cor1 of
		%% Line 231
		<0> when 'true' ->
		    let <_cor2> =
			%% Line 232
			call 'queue':'in'
			    (Pid, _cor0)
		    in  %% Line 232
			apply 'regulator_loop'/2
			    (0, _cor2)
		%% Line 233
		<N> when 'true' ->
		    do  %% Line 234
			apply 'activate_pid'/1
			    (Pid)
			let <_cor3> =
			    %% Line 235
			    call 'erlang':'-'
				(N, 1)
			in  %% Line 235
			    apply 'regulator_loop'/2
				(_cor3, _cor0)
	      end
	  %% Line 237
	  <'done'> when 'true' ->
	      %% Line 238
	      case call 'queue':'out'
		       (_cor0) of
		<{Waiting,NewQueue}> when 'true' ->
		    let <_cor7> =
			%% Line 240
			case Waiting of
			  %% Line 241
			  <'empty'> when 'true' ->
			      call 'erlang':'+'
				  (_cor1, 1)
			  %% Line 242
			  <{'value',Pid}> when 'true' ->
			      do  %% Line 243
				  apply 'activate_pid'/1
				      (Pid)
				  _cor1
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor6})
			    -| ['compiler_generated'] )
			end
		    in  %% Line 246
			apply 'regulator_loop'/2
			    (_cor7, NewQueue)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 247
	  <'stop'> when 'true' ->
	      'ok'
	after 'infinity' ->
	  'true'
'kill_regulator'/1 =
    %% Line 250
    fun (_cor0) ->
	%% Line 251
	call 'erlang':'!'
	    (_cor0, 'stop')
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('dialyzer_coordinator')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('dialyzer_coordinator', _cor0)
end