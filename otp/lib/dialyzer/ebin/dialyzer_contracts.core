module 'dialyzer_contracts' ['blame_remote'/3,
			     'blame_remote_list'/3,
			     'butlast'/1,
			     'check_contract'/2,
			     'check_contract'/3,
			     'check_contract_inf_list'/3,
			     'check_contracts'/4,
			     'check_domains'/1,
			     'check_extraneous'/2,
			     'check_extraneous_1'/2,
			     'constraints_fixpoint'/4,
			     'constraints_fixpoint'/5,
			     'constraints_to_dict'/5,
			     'constraints_to_string'/1,
			     'constraints_to_subs'/6,
			     'contract_from_form'/3,
			     'contract_from_form'/5,
			     'contract_to_string'/1,
			     'contract_to_string_1'/1,
			     'contracts_without_fun'/3,
			     'extra_contract_warning'/6,
			     'extra_range_warning'/4,
			     'final_form'/5,
			     'find_uses'/1,
			     'form_vars'/2,
			     'general_domain'/1,
			     'general_domain'/2,
			     'get_contract_args'/1,
			     'get_contract_return'/1,
			     'get_contract_return'/2,
			     'get_contract_signature'/1,
			     'get_invalid_contract_warnings'/4,
			     'get_invalid_contract_warnings_funs'/5,
			     'get_invalid_contract_warnings_modules'/5,
			     'initialize_constraints'/4,
			     'initialize_constraints'/5,
			     'insert_constraints'/2,
			     'invalid_contract_warning'/4,
			     'is_not_nil_list'/1,
			     'is_overloaded'/1,
			     'is_remote_types_related'/4,
			     'list_part'/1,
			     'module_info'/0,
			     'module_info'/1,
			     'overlapping_contract_warning'/2,
			     'picky_contract_check'/7,
			     'process_constraints'/4,
			     'process_contract'/2,
			     'process_contract_remote_types'/1,
			     'process_contracts'/2,
			     'process_contracts'/3,
			     'remove_cycles'/1,
			     'remove_cycles'/2,
			     'remove_use'/2,
			     'remove_uses'/2,
			     'remove_uses'/3,
			     'sequence'/2,
			     'solve_constraints'/3,
			     'store_tmp_contract'/5,
			     'strip_fun'/1,
			     't_from_forms_without_remote'/2,
			     'warn_spec_missing_fun'/2]
    attributes [%% Line 38
		'export_type' =
		    %% Line 38
		    [{'file_contract',0}|[{'plt_contracts',0}]],
		%% Line 33
		'type' =
		    %% Line 33
		    [{'dial_ret',{'type',33,'union',[{'integer',33,0}|[{'integer',34,1}|[{'integer',35,2}]]]},[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{'dial_warn_tag',{'type',68,'union',[{'atom',68,'warn_return_no_exit'}|[{'atom',68,'warn_return_only_exit'}|[{'atom',69,'warn_not_called'}|[{'atom',69,'warn_non_proper_list'}|[{'atom',70,'warn_matching'}|[{'atom',70,'warn_opaque'}|[{'atom',70,'warn_fun_app'}|[{'atom',71,'warn_failing_call'}|[{'atom',71,'warn_bin_construction'}|[{'atom',72,'warn_contract_types'}|[{'atom',72,'warn_contract_syntax'}|[{'atom',73,'warn_contract_not_equal'}|[{'atom',73,'warn_contract_subtype'}|[{'atom',74,'warn_contract_supertype'}|[{'atom',74,'warn_callgraph'}|[{'atom',75,'warn_umatched_return'}|[{'atom',75,'warn_race_condition'}|[{'atom',76,'warn_behaviour'}|[{'atom',76,'warn_contract_range'}|[{'atom',77,'warn_undefined_callbacks'}|[{'atom',77,'warn_unknown'}]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'file_line',{'type',83,'tuple',[{'remote_type',83,[{'atom',83,'file'}|[{'atom',83,'filename'}|[[]]]]}|[{'type',83,'non_neg_integer',[]}]]},[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{'dial_warning',{'type',84,'tuple',[{'type',84,'dial_warn_tag',[]}|[{'type',84,'file_line',[]}|[{'type',84,'tuple',[{'type',84,'atom',[]}|[{'type',84,'list',[{'type',84,'term',[]}]}]]}]]]},[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{'dial_error',{'type',89,'any',[]},[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{'anal_type',{'type',96,'union',[{'atom',96,'succ_typings'}|[{'atom',96,'plt_build'}]]},[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{'anal_type1',{'type',97,'union',[{'type',97,'anal_type',[]}|[{'atom',97,'plt_add'}|[{'atom',97,'plt_check'}|[{'atom',97,'plt_remove'}]]]]},[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{'contr_constr',{'type',98,'tuple',[{'atom',98,'subtype'}|[{'remote_type',98,[{'atom',98,'erl_types'}|[{'atom',98,'erl_type'}|[[]]]]}|[{'remote_type',98,[{'atom',98,'erl_types'}|[{'atom',98,'erl_type'}|[[]]]]}]]]},[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{'contract_pair',{'type',99,'tuple',[{'remote_type',99,[{'atom',99,'erl_types'}|[{'atom',99,'erl_type'}|[[]]]]}|[{'type',99,'list',[{'type',99,'contr_constr',[]}]}]]},[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{'dial_define',{'type',100,'tuple',[{'type',100,'atom',[]}|[{'type',100,'term',[]}]]},[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{'dial_option',{'type',101,'tuple',[{'type',101,'atom',[]}|[{'type',101,'term',[]}]]},[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{'dial_options',{'type',102,'list',[{'type',102,'dial_option',[]}]},[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{'fopt',{'type',103,'union',[{'atom',103,'basename'}|[{'atom',103,'fullpath'}]]},[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{'format',{'type',104,'union',[{'atom',104,'formatted'}|[{'atom',104,'raw'}]]},[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{'label',{'type',105,'non_neg_integer',[]},[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{'rep_mode',{'type',106,'union',[{'atom',106,'quiet'}|[{'atom',106,'normal'}|[{'atom',106,'verbose'}]]]},[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{'start_from',{'type',107,'union',[{'atom',107,'byte_code'}|[{'atom',107,'src_code'}]]},[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{'mfa_or_funlbl',{'type',108,'union',[{'type',108,'label',[]}|[{'type',108,'mfa',[]}]]},[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{'solver',{'type',109,'union',[{'atom',109,'v1'}|[{'atom',109,'v2'}]]},[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{{'record','analysis'},[{'typed_record_field',{'record_field',115,{'atom',115,'analysis_pid'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'pid',[]}]]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'type'},{'atom',116,'succ_typings'}},{'type',116,'anal_type',[]}}|[{'typed_record_field',{'record_field',117,{'atom',117,'defines'},{'nil',117}},{'type',117,'list',[{'type',117,'dial_define',[]}]}}|[{'typed_record_field',{'record_field',118,{'atom',118,'doc_plt'}},{'type',118,'union',[{'atom',118,'undefined'}|[{'remote_type',118,[{'atom',118,'dialyzer_plt'}|[{'atom',118,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',119,{'atom',119,'files'},{'nil',119}},{'type',119,'list',[{'remote_type',119,[{'atom',119,'file'}|[{'atom',119,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'include_dirs'},{'nil',120}},{'type',120,'list',[{'remote_type',120,[{'atom',120,'file'}|[{'atom',120,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',121,{'atom',121,'start_from'},{'atom',121,'byte_code'}},{'type',121,'start_from',[]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'plt'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'remote_type',122,[{'atom',122,'dialyzer_plt'}|[{'atom',122,'plt'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'use_contracts'},{'atom',123,'true'}},{'type',123,'boolean',[]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'race_detection'},{'atom',124,'false'}},{'type',124,'boolean',[]}}|[{'typed_record_field',{'record_field',125,{'atom',125,'behaviours_chk'},{'atom',125,'false'}},{'type',125,'boolean',[]}}|[{'typed_record_field',{'record_field',126,{'atom',126,'timing'},{'atom',126,'false'}},{'type',126,'union',[{'type',126,'boolean',[]}|[{'atom',126,'debug'}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'timing_server'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'remote_type',127,[{'atom',127,'dialyzer_timing'}|[{'atom',127,'timing_server'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'callgraph_file'},{'string',128,[]}},{'remote_type',128,[{'atom',128,'file'}|[{'atom',128,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'solvers'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'list',[{'type',129,'solver',[]}]}]]}}]]]]]]]]]]]]]]],[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{{'record','options'},[{'typed_record_field',{'record_field',131,{'atom',131,'files'},{'nil',131}},{'type',131,'list',[{'remote_type',131,[{'atom',131,'file'}|[{'atom',131,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'files_rec'},{'nil',132}},{'type',132,'list',[{'remote_type',132,[{'atom',132,'file'}|[{'atom',132,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',133,{'atom',133,'analysis_type'},{'atom',133,'succ_typings'}},{'type',133,'anal_type1',[]}}|[{'typed_record_field',{'record_field',134,{'atom',134,'timing'},{'atom',134,'false'}},{'type',134,'union',[{'type',134,'boolean',[]}|[{'atom',134,'debug'}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'defines'},{'nil',135}},{'type',135,'list',[{'type',135,'dial_define',[]}]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'from'},{'atom',136,'byte_code'}},{'type',136,'start_from',[]}}|[{'typed_record_field',{'record_field',137,{'atom',137,'get_warnings'},{'atom',137,'maybe'}},{'type',137,'union',[{'type',137,'boolean',[]}|[{'atom',137,'maybe'}]]}}|[{'typed_record_field',{'record_field',138,{'atom',138,'init_plts'},{'nil',138}},{'type',138,'list',[{'remote_type',138,[{'atom',138,'file'}|[{'atom',138,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',139,{'atom',139,'include_dirs'},{'nil',139}},{'type',139,'list',[{'remote_type',139,[{'atom',139,'file'}|[{'atom',139,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'output_plt'},{'atom',140,'none'}},{'type',140,'union',[{'atom',140,'none'}|[{'remote_type',140,[{'atom',140,'file'}|[{'atom',140,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',141,{'atom',141,'legal_warnings'},{'call',141,{'remote',141,{'atom',141,'ordsets'},{'atom',141,'new'}},[]}},{'remote_type',141,[{'atom',141,'ordsets'}|[{'atom',141,'ordset'}|[[{'type',141,'dial_warn_tag',[]}]]]]}}|[{'typed_record_field',{'record_field',142,{'atom',142,'report_mode'},{'atom',142,'normal'}},{'type',142,'rep_mode',[]}}|[{'typed_record_field',{'record_field',143,{'atom',143,'erlang_mode'},{'atom',143,'false'}},{'type',143,'boolean',[]}}|[{'typed_record_field',{'record_field',144,{'atom',144,'use_contracts'},{'atom',144,'true'}},{'type',144,'boolean',[]}}|[{'typed_record_field',{'record_field',145,{'atom',145,'output_file'},{'atom',145,'none'}},{'type',145,'union',[{'atom',145,'none'}|[{'remote_type',145,[{'atom',145,'file'}|[{'atom',145,'filename'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',146,{'atom',146,'output_format'},{'atom',146,'formatted'}},{'type',146,'format',[]}}|[{'typed_record_field',{'record_field',147,{'atom',147,'filename_opt'},{'atom',147,'basename'}},{'type',147,'fopt',[]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'callgraph_file'},{'string',148,[]}},{'remote_type',148,[{'atom',148,'file'}|[{'atom',148,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'check_plt'},{'atom',149,'true'}},{'type',149,'boolean',[]}}|[{'typed_record_field',{'record_field',150,{'atom',150,'solvers'},{'nil',150}},{'type',150,'list',[{'type',150,'solver',[]}]}}]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 152
		'type' =
		    %% Line 152
		    [{{'record','contract'},[{'typed_record_field',{'record_field',152,{'atom',152,'contracts'},{'nil',152}},{'type',152,'list',[{'type',152,'contract_pair',[]}]}}|[{'typed_record_field',{'record_field',153,{'atom',153,'args'},{'nil',153}},{'type',153,'list',[{'remote_type',153,[{'atom',153,'erl_types'}|[{'atom',153,'erl_type'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',154,{'atom',154,'forms'},{'nil',154}},{'type',154,'list',[{'type',154,'tuple',[{'var',154,'_'}|[{'var',154,'_'}]]}]}}]]],[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'file_contract',{'type',48,'tuple',[{'type',48,'file_line',[]}|[{'type',48,'record',[{'atom',48,'contract'}]}]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{'plt_contracts',{'type',50,'list',[{'type',50,'tuple',[{'type',50,'mfa',[]}|[{'type',50,'record',[{'atom',50,'contract'}]}]]}]},[]}],
		%% Line 57
		'type' =
		    %% Line 57
		    [{'tmp_contract_fun',{'type',57,'fun',[{'type',57,'product',[{'remote_type',57,[{'atom',57,'sets'}|[{'atom',57,'set'}|[[{'type',57,'mfa',[]}]]]]}|[{'type',57,'types',[]}]]}|[{'type',57,'contract_pair',[]}]]},[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{{'record','tmp_contract'},[{'typed_record_field',{'record_field',59,{'atom',59,'contract_funs'},{'nil',59}},{'type',59,'list',[{'type',59,'tmp_contract_fun',[]}]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'forms'},{'nil',60}},{'type',60,'list',[{'type',60,'tuple',[{'var',60,'_'}|[{'var',60,'_'}]]}]}}]],[]}],
		%% Line 74
		'spec' =
		    %% Line 74
		    [{{'get_contract_return',1},[{'type',74,'fun',[{'type',74,'product',[{'type',74,'record',[{'atom',74,'contract'}]}]}|[{'remote_type',74,[{'atom',74,'erl_types'}|[{'atom',74,'erl_type'}|[[]]]]}]]}]}],
		%% Line 79
		'spec' =
		    %% Line 79
		    [{{'get_contract_return',2},[{'type',79,'fun',[{'type',79,'product',[{'type',79,'record',[{'atom',79,'contract'}]}|[{'type',79,'list',[{'remote_type',79,[{'atom',79,'erl_types'}|[{'atom',79,'erl_type'}|[[]]]]}]}]]}|[{'remote_type',79,[{'atom',79,'erl_types'}|[{'atom',79,'erl_type'}|[[]]]]}]]}]}],
		%% Line 84
		'spec' =
		    %% Line 84
		    [{{'get_contract_args',1},[{'type',84,'fun',[{'type',84,'product',[{'type',84,'record',[{'atom',84,'contract'}]}]}|[{'type',84,'list',[{'remote_type',84,[{'atom',84,'erl_types'}|[{'atom',84,'erl_type'}|[[]]]]}]}]]}]}],
		%% Line 89
		'spec' =
		    %% Line 89
		    [{{'get_contract_signature',1},[{'type',89,'fun',[{'type',89,'product',[{'type',89,'record',[{'atom',89,'contract'}]}]}|[{'remote_type',89,[{'atom',89,'erl_types'}|[{'atom',89,'erl_type'}|[[]]]]}]]}]}],
		%% Line 95
		'spec' =
		    %% Line 95
		    [{{'is_overloaded',1},[{'type',95,'fun',[{'type',95,'product',[{'type',95,'record',[{'atom',95,'contract'}]}]}|[{'type',95,'boolean',[]}]]}]}],
		%% Line 103
		'spec' =
		    %% Line 103
		    [{{'contract_to_string',1},[{'type',103,'fun',[{'type',103,'product',[{'type',103,'record',[{'atom',103,'contract'}]}]}|[{'type',103,'string',[]}]]}]}],
		%% Line 142
		'spec' =
		    %% Line 142
		    [{{'process_contract_remote_types',1},[{'type',142,'fun',[{'type',142,'product',[{'remote_type',142,[{'atom',142,'dialyzer_codeserver'}|[{'atom',142,'codeserver'}|[[]]]]}]}|[{'remote_type',143,[{'atom',143,'dialyzer_codeserver'}|[{'atom',143,'codeserver'}|[[]]]]}]]}]}],
		%% Line 165
		'type' =
		    %% Line 165
		    [{'opaques',{'type',165,'union',[{'type',165,'list',[{'remote_type',165,[{'atom',165,'erl_types'}|[{'atom',165,'erl_type'}|[[]]]]}]}|[{'atom',165,'universe'}]]},[]}],
		%% Line 166
		'type' =
		    %% Line 166
		    [{'opaques_fun',{'type',166,'fun',[{'type',166,'product',[{'type',166,'module',[]}]}|[{'type',166,'opaques',[]}]]},[]}],
		%% Line 168
		'type' =
		    %% Line 168
		    [{'fun_types',{'remote_type',168,[{'atom',168,'dict'}|[{'atom',168,'dict'}|[[{'type',168,'label',[]}|[{'remote_type',168,[{'atom',168,'erl_types'}|[{'atom',168,'type_table'}|[[]]]]}]]]]]},[]}],
		%% Line 170
		'spec' =
		    %% Line 170
		    [{{'check_contracts',4},[{'type',170,'fun',[{'type',170,'product',[{'type',170,'list',[{'type',170,'tuple',[{'type',170,'mfa',[]}|[{'type',170,'file_contract',[]}]]}]}|[{'remote_type',171,[{'atom',171,'dialyzer_callgraph'}|[{'atom',171,'callgraph'}|[[]]]]}|[{'type',171,'fun_types',[]}|[{'type',172,'opaques_fun',[]}]]]]}|[{'type',172,'plt_contracts',[]}]]}]}],
		%% Line 202
		'spec' =
		    %% Line 202
		    [{{'check_contract',2},[{'type',202,'fun',[{'type',202,'product',[{'type',202,'record',[{'atom',202,'contract'}]}|[{'remote_type',202,[{'atom',202,'erl_types'}|[{'atom',202,'erl_type'}|[[]]]]}]]}|[{'type',202,'union',[{'atom',202,'ok'}|[{'type',202,'tuple',[{'atom',202,'error'}|[{'type',202,'term',[]}]]}]]}]]}]}],
		%% Line 299
		'spec' =
		    %% Line 299
		    [{{'process_contracts',2},[{'type',299,'fun',[{'type',299,'product',[{'type',299,'list',[{'type',299,'contract_pair',[]}]}|[{'type',299,'list',[{'remote_type',299,[{'atom',299,'erl_types'}|[{'atom',299,'erl_type'}|[[]]]]}]}]]}|[{'remote_type',300,[{'atom',300,'erl_types'}|[{'atom',300,'erl_type'}|[[]]]]}]]}]}],
		%% Line 315
		'spec' =
		    %% Line 315
		    [{{'process_contract',2},[{'type',315,'fun',[{'type',315,'product',[{'type',315,'contract_pair',[]}|[{'type',315,'list',[{'remote_type',315,[{'atom',315,'erl_types'}|[{'atom',315,'erl_type'}|[[]]]]}]}]]}|[{'type',316,'union',[{'atom',316,'error'}|[{'type',316,'tuple',[{'atom',316,'ok'}|[{'remote_type',316,[{'atom',316,'erl_types'}|[{'atom',316,'erl_type'}|[[]]]]}]]}]]}]]}]}],
		%% Line 352
		'type' =
		    %% Line 352
		    [{'contracts',{'remote_type',352,[{'atom',352,'dict'}|[{'atom',352,'dict'}|[[{'type',352,'mfa',[]}|[{'remote_type',352,[{'atom',352,'dialyzer_contracts'}|[{'atom',352,'file_contract'}|[[]]]]}]]]]]},[]}],
		%% Line 355
		'spec' =
		    %% Line 355
		    [{{'contracts_without_fun',3},[{'type',355,'fun',[{'type',355,'product',[{'type',355,'contracts',[]}|[{'type',355,'list',[{'var',355,'_'}]}|[{'remote_type',355,[{'atom',355,'dialyzer_callgraph'}|[{'atom',355,'callgraph'}|[[]]]]}]]]}|[{'type',356,'list',[{'type',356,'dial_warning',[]}]}]]}]}],
		%% Line 389
		'type' =
		    %% Line 389
		    [{'types',{'remote_type',389,[{'atom',389,'erl_types'}|[{'atom',389,'type_table'}|[[]]]]},[]}],
		%% Line 391
		'spec' =
		    %% Line 391
		    [{{'store_tmp_contract',5},[{'type',391,'fun',[{'type',391,'product',[{'type',391,'mfa',[]}|[{'type',391,'file_line',[]}|[{'type',391,'list',[{'var',391,'_'}]}|[{'type',391,'contracts',[]}|[{'type',391,'types',[]}]]]]]}|[{'type',392,'contracts',[]}]]}]}],
		%% Line 585
		'spec' =
		    %% Line 585
		    [{{'get_invalid_contract_warnings',4},[{'type',585,'fun',[{'type',585,'product',[{'type',585,'list',[{'type',585,'module',[]}]}|[{'remote_type',586,[{'atom',586,'dialyzer_codeserver'}|[{'atom',586,'codeserver'}|[[]]]]}|[{'remote_type',587,[{'atom',587,'dialyzer_plt'}|[{'atom',587,'plt'}|[[]]]]}|[{'type',588,'opaques_fun',[]}]]]]}|[{'type',588,'list',[{'type',588,'dial_warning',[]}]}]]}]}]]
'get_contract_return'/1 =
    %% Line 76
    fun (_cor0) ->
	case _cor0 of
	  <{'contract',Cs,GenArgs,_cor2}> when 'true' ->
	      %% Line 77
	      apply 'process_contracts'/2
		  (Cs, GenArgs)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_contract_return',1}}] )
	    -| ['compiler_generated'] )
	end
'get_contract_return'/2 =
    %% Line 81
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'contract',Cs,_cor4,_cor5},Args> when 'true' ->
	      %% Line 82
	      apply 'process_contracts'/2
		  (Cs, Args)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'get_contract_return',2}}] )
	    -| ['compiler_generated'] )
	end
'get_contract_args'/1 =
    %% Line 86
    fun (_cor0) ->
	case _cor0 of
	  <{'contract',_cor2,Args,_cor3}> when 'true' ->
	      %% Line 87
	      Args
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_contract_args',1}}] )
	    -| ['compiler_generated'] )
	end
'get_contract_signature'/1 =
    %% Line 91
    fun (_cor0) ->
	case _cor0 of
	  <{'contract',Cs,GeneralDomain,_cor3}> when 'true' ->
	      let <Range> =
		  %% Line 92
		  apply 'process_contracts'/2
		      (Cs, GeneralDomain)
	      in  %% Line 93
		  call 'erl_types':'t_fun'
		      (GeneralDomain, Range)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'get_contract_signature',1}}] )
	    -| ['compiler_generated'] )
	end
'is_overloaded'/1 =
    %% Line 97
    fun (_cor0) ->
	case _cor0 of
	  <{'contract',Cs,_cor3,_cor4}> when 'true' ->
	      %% Line 98
	      case Cs of
		%% Line 99
		<[_cor5|[]]> when 'true' ->
		    'true'
		%% Line 100
		<[_cor6|[_cor7|_cor8]]> when 'true' ->
		    'false'
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'is_overloaded',1}}] )
	    -| ['compiler_generated'] )
	end
'contract_to_string'/1 =
    %% Line 105
    fun (_cor0) ->
	case _cor0 of
	  <{'contract',_cor2,_cor3,Forms}> when 'true' ->
	      %% Line 106
	      apply 'contract_to_string_1'/1
		  (Forms)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'contract_to_string',1}}] )
	    -| ['compiler_generated'] )
	end
'contract_to_string_1'/1 =
    %% Line 108
    fun (_cor0) ->
	case _cor0 of
	  <[{Contract,[]}|[]]> when 'true' ->
	      let <_cor1> =
		  %% Line 109
		  call 'erl_types':'t_form_to_string'
		      (Contract)
	      in  %% Line 109
		  apply 'strip_fun'/1
		      (_cor1)
	  %% Line 110
	  <[{Contract,[]}|Rest]> when 'true' ->
	      let <_cor4> =
		  %% Line 111
		  call 'erl_types':'t_form_to_string'
		      (Contract)
	      in  let <_cor5> =
		      %% Line 111
		      apply 'strip_fun'/1
			  (_cor4)
		  in  let <_cor2> =
			  %% Line 112
			  apply 'contract_to_string_1'/1
			      (Rest)
		      in  let <_cor3> =
			      %% Line 112
			      call 'erlang':'++'
				  ([10|[32|[32|[32|[32|[59|[32]]]]]]], _cor2)
			  in  %% Line 111
			      call 'erlang':'++'
				  (_cor5, _cor3)
	  %% Line 113
	  <[{Contract,Constraints}|[]]> when 'true' ->
	      let <_cor8> =
		  %% Line 114
		  call 'erl_types':'t_form_to_string'
		      (Contract)
	      in  let <_cor9> =
		      %% Line 114
		      apply 'strip_fun'/1
			  (_cor8)
		  in  let <_cor6> =
			  %% Line 115
			  apply 'constraints_to_string'/1
			      (Constraints)
		      in  let <_cor7> =
			      %% Line 115
			      call 'erlang':'++'
				  ([32|[119|[104|[101|[110|[32]]]]]], _cor6)
			  in  %% Line 114
			      call 'erlang':'++'
				  (_cor9, _cor7)
	  %% Line 116
	  <[{Contract,Constraints}|Rest]> when 'true' ->
	      let <_cor15> =
		  %% Line 117
		  call 'erl_types':'t_form_to_string'
		      (Contract)
	      in  let <_cor16> =
		      %% Line 117
		      apply 'strip_fun'/1
			  (_cor15)
		  in  let <_cor12> =
			  %% Line 118
			  apply 'constraints_to_string'/1
			      (Constraints)
		      in  let <_cor10> =
			      %% Line 119
			      apply 'contract_to_string_1'/1
				  (Rest)
			  in  let <_cor11> =
				  %% Line 118
				  [59|_cor10]
			      in  let <_cor13> =
				      %% Line 118
				      call 'erlang':'++'
					  (_cor12, _cor11)
				  in  let <_cor14> =
					  %% Line 118
					  call 'erlang':'++'
					      ([32|[119|[104|[101|[110|[32]]]]]], _cor13)
				      in  %% Line 117
					  call 'erlang':'++'
					      (_cor16, _cor14)
	  ( <_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17})
		  -| [{'function_name',{'contract_to_string_1',1}}] )
	    -| ['compiler_generated'] )
	end
'strip_fun'/1 =
    %% Line 121
    fun (_cor0) ->
	case _cor0 of
	  <[102|[117|[110|[40|String]]]]> when 'true' ->
	      %% Line 122
	      apply 'butlast'/1
		  (String)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'strip_fun',1}}] )
	    -| ['compiler_generated'] )
	end
'butlast'/1 =
    %% Line 124
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      []
	  %% Line 125
	  <[_cor3|[]]> when 'true' ->
	      []
	  %% Line 126
	  <[H|T]> when 'true' ->
	      let <_cor1> =
		  apply 'butlast'/1
		      (T)
	      in  [H|_cor1]
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'butlast',1}}] )
	    -| ['compiler_generated'] )
	end
'constraints_to_string'/1 =
    %% Line 128
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 129
	      []
	  %% Line 130
	  <[{'type',_cor24,'constraint',[{'atom',_cor25,What}|[Types|[]]]}|[]]> when 'true' ->
	      let <_cor10> =
		  %% Line 131
		  call 'erlang':'atom_to_list'
		      (What)
	      in  let <_cor6> =
		      %% Line 132
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor3) ->
				    case _cor3 of
				      <[T|_cor2]> when 'true' ->
					  let <_cor4> =
					      call 'erl_types':'t_form_to_string'
						  (T)
					  in  let <_cor5> =
						  apply 'lc$^0'/1
						      (_cor2)
					      in  ( [_cor4|_cor5]
						    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor3> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor3})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(Types)
			-| ['list_comprehension'] )
		  in  let <_cor7> =
			  %% Line 132
			  apply 'sequence'/2
			      (_cor6, [44])
		      in  let <_cor8> =
			      %% Line 132
			      call 'erlang':'++'
				  (_cor7, [41])
			  in  let <_cor9> =
				  %% Line 131
				  [40|_cor8]
			      in  %% Line 131
				  call 'erlang':'++'
				      (_cor10, _cor9)
	  %% Line 133
	  <[{'type',_cor26,'constraint',[{'atom',_cor27,What}|[Types|[]]]}|Rest]> when 'true' ->
	      let <_cor22> =
		  %% Line 134
		  call 'erlang':'atom_to_list'
		      (What)
	      in  let <_cor18> =
		      %% Line 135
		      ( letrec
			    'lc$^1'/1 =
				fun (_cor15) ->
				    case _cor15 of
				      <[T|_cor14]> when 'true' ->
					  let <_cor16> =
					      call 'erl_types':'t_form_to_string'
						  (T)
					  in  let <_cor17> =
						  apply 'lc$^1'/1
						      (_cor14)
					      in  ( [_cor16|_cor17]
						    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor15> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor15})
					      -| [{'function_name',{'lc$^1',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^1'/1
				(Types)
			-| ['list_comprehension'] )
		  in  let <_cor19> =
			  %% Line 135
			  apply 'sequence'/2
			      (_cor18, [44])
		      in  let <_cor11> =
			      %% Line 136
			      apply 'constraints_to_string'/1
				  (Rest)
			  in  let <_cor12> =
				  %% Line 136
				  [41|[44|[32|_cor11]]]
			      in  let <_cor20> =
				      %% Line 136
				      call 'erlang':'++'
					  (_cor19, _cor12)
				  in  let <_cor21> =
					  %% Line 134
					  [40|_cor20]
				      in  %% Line 134
					  call 'erlang':'++'
					      (_cor22, _cor21)
	  ( <_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23})
		  -| [{'function_name',{'constraints_to_string',1}}] )
	    -| ['compiler_generated'] )
	end
'sequence'/2 =
    %% Line 138
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_X_Delimiter> when 'true' ->
	      []
	  %% Line 139
	  <[H|[]],_X_Delimiter> when 'true' ->
	      H
	  %% Line 140
	  <[H|T],Delimiter> when 'true' ->
	      let <_cor2> =
		  apply 'sequence'/2
		      (T, Delimiter)
	      in  let <_cor3> =
		      call 'erlang':'++'
			  (Delimiter, _cor2)
		  in  call 'erlang':'++'
			  (H, _cor3)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'sequence',2}}] )
	    -| ['compiler_generated'] )
	end
'process_contract_remote_types'/1 =
    %% Line 145
    fun (_cor0) ->
	%% Line 146
	case %% Line 147
	     call 'dialyzer_codeserver':'get_temp_contracts'
		 (_cor0) of
	  <{TmpContractDict,TmpCallbackDict}> when 'true' ->
	      let <ExpTypes> =
		  %% Line 148
		  call 'dialyzer_codeserver':'get_exported_types'
		      (_cor0)
	      in  let <RecordDict> =
		      %% Line 149
		      call 'dialyzer_codeserver':'get_records'
			  (_cor0)
		  in  let <ContractFun> =
			  %% Line 151
			  ( fun (_cor13,_cor12) ->
				case <_cor13,_cor12> of
				  <{_X_M,_X_F,_X_A},{File,{'tmp_contract',CFuns,Forms}}> when 'true' ->
				      let <_cor9> =
					  %% Line 152
					  ( letrec
						'lc$^0'/1 =
						    fun (_cor6) ->
							case _cor6 of
							  <[CFun|_cor5]> when 'true' ->
							      let <_cor7> =
								  apply CFun
								      (ExpTypes, RecordDict)
							      in  let <_cor8> =
								      apply 'lc$^0'/1
									  (_cor5)
								  in  ( [_cor7|_cor8]
									-| ['compiler_generated'] )
							  <[]> when 'true' ->
							      []
							  ( <_cor6> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor6})
								  -| [{'function_name',{'lc$^0',1}}] )
							    -| ['compiler_generated'] )
							end
					    in  apply 'lc$^0'/1
						    (CFuns)
					    -| ['list_comprehension'] )
				      in  let <Args> =
					      %% Line 153
					      apply 'general_domain'/1
						  (_cor9)
					  in  %% Line 154
					      {File,{'contract',_cor9,Args,Forms}}
				  ( <_cor15,_cor14> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor15,_cor14})
					  -| [{'function_name',{'-process_contract_remote_types/1-fun-0-',2}}] )
				    -| ['compiler_generated'] )
				end
			    -| [{'id',{0,0,'-process_contract_remote_types/1-fun-0-'}}] )
		      in  let <ModuleFun> =
			      %% Line 157
			      ( fun (_cor18,_cor17) ->
				    %% Line 158
				    call 'dict':'map'
					(ContractFun, _cor17)
				-| [{'id',{0,0,'-process_contract_remote_types/1-fun-1-'}}] )
			  in  let <NewContractDict> =
				  %% Line 160
				  call 'dict':'map'
				      (ModuleFun, TmpContractDict)
			      in  let <NewCallbackDict> =
				      %% Line 161
				      call 'dict':'map'
					  (ModuleFun, TmpCallbackDict)
				  in  %% Line 162
				      call 'dialyzer_codeserver':'finalize_contracts'
					  (NewContractDict, NewCallbackDict, _cor0)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'check_contracts'/4 =
    %% Line 174
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <FoldFun> =
	    %% Line 176
	    ( fun (_cor11,_cor10,_cor9) ->
		  %% Line 177
		  case call 'dialyzer_callgraph':'lookup_name'
			   (_cor11, _cor2) of
		    %% Line 178
		    <{'ok',MFA = {M,F,A}}> when 'true' ->
			%% Line 179
			case call 'orddict':'find'
				 (MFA, _cor3) of
			  %% Line 180
			  <{'ok',{_X_FileLine,Contract}}> when 'true' ->
			      let <Opaques> =
				  %% Line 181
				  apply _cor0
				      (M)
			      in  %% Line 182
				  case apply 'check_contract'/3
					   (Contract, _cor10, Opaques) of
				    %% Line 183
				    <'ok'> when 'true' ->
					%% Line 184
					case call 'erl_bif_types':'is_known'
						 (M, F, A) of
					  %% Line 185
					  <'true'> when 'true' ->
					      _cor9
					  %% Line 189
					  <'false'> when 'true' ->
					      %% Line 190
					      [{MFA,Contract}|_cor9]
					  ( <_cor5> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor5})
					    -| ['compiler_generated'] )
					end
				    %% Line 192
				    <{'error',_X_Error}> when 'true' ->
					_cor9
				    ( <_cor6> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor6})
				      -| ['compiler_generated'] )
				  end
			  %% Line 194
			  <'error'> when 'true' ->
			      _cor9
			  ( <_cor7> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor7})
			    -| ['compiler_generated'] )
			end
		    %% Line 196
		    <'error'> when 'true' ->
			_cor9
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor8})
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-check_contracts/4-fun-0-'}}] )
	in  %% Line 199
	    call 'dict':'fold'
		(FoldFun, [], _cor1)
'check_contract'/2 =
    %% Line 204
    fun (_cor1,_cor0) ->
	%% Line 205
	apply 'check_contract'/3
	    (_cor1, _cor0, 'universe')
'check_contract'/3 =
    %% Line 207
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'contract',Contracts,_cor41,_cor42},SuccType,Opaques> when 'true' ->
	      %% Line 208
	      try
		  let <_cor9> =
		      %% Line 209
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor5) ->
				    case _cor5 of
				      <[%% Line 210
					{Contract,Constraints}|_cor4]> when 'true' ->
					  let <_cor6> =
					      call 'dict':'new'
						  ()
					  in  let <_cor7> =
						  apply 'insert_constraints'/2
						      (Constraints, _cor6)
					      in  let <_cor8> =
						      %% Line 210
						      apply 'lc$^0'/1
							  (_cor4)
						  in  ( [{Contract,_cor7}|_cor8]
							-| ['compiler_generated'] )
				      ( <[_cor3|_cor4]> when 'true' ->
					    %% Line 210
					    apply 'lc$^0'/1
						(_cor4)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor5> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor5})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(%% Line 210
				 Contracts)
			-| ['list_comprehension'] )
		  in  let <_cor16> =
			  %% Line 211
			  ( letrec
				'lc$^1'/1 =
				    fun (_cor13) ->
					case _cor13 of
					  <[%% Line 212
					    {Contract,Dict}|_cor12]> when 'true' ->
					      let <_cor14> =
						  call 'erl_types':'t_subst'
						      (Contract, Dict)
					      in  let <_cor15> =
						      %% Line 212
						      apply 'lc$^1'/1
							  (_cor12)
						  in  ( [_cor14|_cor15]
							-| ['compiler_generated'] )
					  ( <[_cor11|_cor12]> when 'true' ->
						%% Line 212
						apply 'lc$^1'/1
						    (_cor12)
					    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor13> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor13})
						  -| [{'function_name',{'lc$^1',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^1'/1
				    (_cor9)
			    -| ['list_comprehension'] )
		      in  let <_cor23> =
			      %% Line 213
			      ( letrec
				    'lc$^2'/1 =
					fun (_cor20) ->
					    case _cor20 of
					      <[C|_cor19]> when 'true' ->
						  let <_cor21> =
						      call 'erl_types':'t_fun_args'
							  (C)
						  in  let <_cor22> =
							  apply 'lc$^2'/1
							      (_cor19)
						      in  ( [_cor21|_cor22]
							    -| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor20> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor20})
						      -| [{'function_name',{'lc$^2',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^2'/1
					(_cor16)
				-| ['list_comprehension'] )
			  in  %% Line 214
			      case apply 'check_domains'/1
				       (_cor23) of
				%% Line 215
				<'error'> when 'true' ->
				    %% Line 216
				    {'error',{'overlapping_contract',[]}}
				%% Line 217
				<'ok'> when 'true' ->
				    let <_cor30> =
					%% Line 218
					( letrec
					      'lc$^3'/1 =
						  fun (_cor27) ->
						      case _cor27 of
							<[%% Line 219
							  Contract|_cor26]> when 'true' ->
							    let <_cor28> =
								call 'erl_types':'t_inf'
								    (Contract, SuccType, Opaques)
							    in  let <_cor29> =
								    %% Line 219
								    apply 'lc$^3'/1
									(_cor26)
								in  ( [_cor28|_cor29]
								      -| ['compiler_generated'] )
							<[]> when 'true' ->
							    []
							( <_cor27> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_cor27})
								-| [{'function_name',{'lc$^3',1}}] )
							  -| ['compiler_generated'] )
						      end
					  in  apply 'lc$^3'/1
						  (_cor16)
					  -| ['list_comprehension'] )
				    in  %% Line 220
					case apply 'check_contract_inf_list'/3
						 (_cor30, SuccType, Opaques) of
					  %% Line 221
					  <Invalid = {'error',_cor43}> when 'true' ->
					      Invalid
					  %% Line 222
					  <'ok'> when 'true' ->
					      apply 'check_extraneous'/2
						  (_cor16, SuccType)
					  ( <_cor32> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor32})
					    -| ['compiler_generated'] )
					end
				( <_cor33> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor33})
				  -| ['compiler_generated'] )
			      end
	      of <_cor34> ->
		  _cor34
	      catch <_cor37,_cor36,_cor35> ->
		  case <_cor37,_cor36,_cor35> of
		    %% Line 226
		    <'throw',Error = {'error',_cor44},_cor45> when 'true' ->
			Error
		    ( <_cor37,_cor36,_cor35> when 'true' ->
			  primop 'raise'
			      (_cor35, _cor36)
		      -| ['compiler_generated'] )
		  end
	  ( <_cor40,_cor39,_cor38> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor40,_cor39,_cor38})
		  -| [{'function_name',{'check_contract',3}}] )
	    -| ['compiler_generated'] )
	end
'check_domains'/1 =
    %% Line 229
    fun (_cor0) ->
	case _cor0 of
	  <[_cor7|[]]> when 'true' ->
	      'ok'
	  %% Line 230
	  <[Dom|Doms]> when 'true' ->
	      let <Fun> =
		  %% Line 231
		  ( fun (_cor2) ->
			let <_cor1> =
			    %% Line 232
			    call 'erl_types':'t_inf_lists'
				(Dom, _cor2)
			in  %% Line 232
			    call 'erl_types':'any_none_or_unit'
				(_cor1)
		    -| [{'id',{0,0,'-check_domains/1-fun-0-'}}] )
	      in  %% Line 234
		  case call 'lists':'all'
			   (Fun, Doms) of
		    %% Line 235
		    <'true'> when 'true' ->
			apply 'check_domains'/1
			    (Doms)
		    %% Line 236
		    <'false'> when 'true' ->
			'error'
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'check_domains',1}}] )
	    -| ['compiler_generated'] )
	end
'check_contract_inf_list'/3 =
    %% Line 242
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[FunType|Left],SuccType,Opaques> when 'true' ->
	      let <FunArgs> =
		  %% Line 243
		  call 'erl_types':'t_fun_args'
		      (FunType)
	      in  let <_cor4> =
		      %% Line 244
		      call 'erlang':'make_fun'
			  ('erl_types', 't_is_none_or_unit', 1)
		  in  %% Line 244
		      case call 'lists':'any'
			       (_cor4, FunArgs) of
			%% Line 245
			<'true'> when 'true' ->
			    apply 'check_contract_inf_list'/3
				(Left, SuccType, Opaques)
			%% Line 246
			<'false'> when 'true' ->
			    let <STRange> =
				%% Line 247
				call 'erl_types':'t_fun_range'
				    (SuccType)
			    in  %% Line 248
				case call 'erl_types':'t_is_none_or_unit'
					 (STRange) of
				  %% Line 249
				  <'true'> when 'true' ->
				      'ok'
				  %% Line 250
				  <'false'> when 'true' ->
				      let <Range> =
					  %% Line 251
					  call 'erl_types':'t_fun_range'
					      (FunType)
				      in  let <_cor7> =
					      %% Line 252
					      call 'erl_types':'t_inf'
						  (STRange, Range)
					  in  %% Line 252
					      case call 'erl_types':'t_is_none'
						       (_cor7) of
						%% Line 253
						<'true'> when 'true' ->
						    apply 'check_contract_inf_list'/3
							(Left, SuccType, Opaques)
						%% Line 254
						<'false'> when 'true' ->
						    'ok'
						( <_cor8> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor8})
						  -| ['compiler_generated'] )
					      end
				  ( <_cor9> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor9})
				    -| ['compiler_generated'] )
				end
			( <_cor10> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor10})
			  -| ['compiler_generated'] )
		      end
	  %% Line 258
	  <[],_X_SuccType,_X_Opaques> when 'true' ->
	      %% Line 259
	      {'error','invalid_contract'}
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'check_contract_inf_list',3}}] )
	    -| ['compiler_generated'] )
	end
'check_extraneous'/2 =
    %% Line 261
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_X_SuccType> when 'true' ->
	      'ok'
	  %% Line 262
	  <[C|Cs],SuccType> when 'true' ->
	      %% Line 263
	      case apply 'check_extraneous_1'/2
		       (C, SuccType) of
		%% Line 264
		<'ok'> when 'true' ->
		    apply 'check_extraneous'/2
			(Cs, SuccType)
		%% Line 265
		<Error> when 'true' ->
		    Error
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'check_extraneous',2}}] )
	    -| ['compiler_generated'] )
	end
'check_extraneous_1'/2 =
    %% Line 268
    fun (_cor1,_cor0) ->
	let <CRng> =
	    %% Line 269
	    call 'erl_types':'t_fun_range'
		(_cor1)
	in  let <CRngs> =
		%% Line 270
		call 'erl_types':'t_elements'
		    (CRng)
	    in  let <STRng> =
		    %% Line 271
		    call 'erl_types':'t_fun_range'
			(_cor0)
		in  let <_cor11> =
			%% Line 273
			( letrec
			      'lc$^0'/1 =
				  fun (_cor8) ->
				      case _cor8 of
					<[CR|_cor6]> when 'true' ->
					    let <_cor7> =
						%% Line 274
						call 'erl_types':'t_inf'
						    (CR, STRng)
					    in  %% Line 274
						( case call 'erl_types':'t_is_none'
							   (_cor7) of
						    <'true'> when 'true' ->
							let <_cor9> =
							    apply 'lc$^0'/1
								(_cor6)
							in  ( [CR|_cor9]
							      -| ['compiler_generated'] )
						    ( <'false'> when 'true' ->
							  apply 'lc$^0'/1
							      (_cor6)
						      -| ['compiler_generated'] )
						    ( <_cor10> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor10})
						      -| ['compiler_generated'] )
						  end
						  -| ['list_comprehension'] )
					<[]> when 'true' ->
					    []
					( <_cor8> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor8})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (CRngs)
			  -| ['list_comprehension'] )
		    in  %% Line 273
			case _cor11 of
			  %% Line 275
			  <[]> when 'true' ->
			      let <CRngList> =
				  %% Line 276
				  apply 'list_part'/1
				      (CRng)
			      in  let <STRngList> =
				      %% Line 277
				      apply 'list_part'/1
					  (STRng)
				  in  let <_cor16> =
					  %% Line 278
					  ( case apply 'is_not_nil_list'/1
						     (CRngList) of
					      ( <( 'true'
						   -| ['compiler_generated'] )> when 'true' ->
						    apply 'is_not_nil_list'/1
							(STRngList)
						-| ['compiler_generated'] )
					      ( <( 'false'
						   -| ['compiler_generated'] )> when 'true' ->
						    'false'
						-| ['compiler_generated'] )
					      ( <_cor14> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {( 'badarg'
								-| ['compiler_generated'] ),_cor14}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      in  %% Line 278
					  case _cor16 of
					    %% Line 279
					    <'false'> when 'true' ->
						'ok'
					    %% Line 280
					    <'true'> when 'true' ->
						let <CRngElements> =
						    %% Line 281
						    call 'erl_types':'t_list_elements'
							(CRngList)
						in  let <STRngElements> =
							%% Line 282
							call 'erl_types':'t_list_elements'
							    (STRngList)
						    in  let <Inf> =
							    %% Line 283
							    call 'erl_types':'t_inf'
								(CRngElements, STRngElements)
							in  %% Line 284
							    case call 'erl_types':'t_is_none'
								     (Inf) of
							      %% Line 285
							      <'true'> when 'true' ->
								  {'error','invalid_contract'}
							      %% Line 286
							      <'false'> when 'true' ->
								  'ok'
							      ( <_cor20> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_cor20})
								-| ['compiler_generated'] )
							    end
					    ( <_cor21> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor21})
					      -| ['compiler_generated'] )
					  end
			  %% Line 289
			  <CRs> when 'true' ->
			      let <_cor22> =
				  call 'erl_types':'t_sup'
				      (CRs)
			      in  {'error',{'extra_range',_cor22,STRng}}
			end
'list_part'/1 =
    %% Line 292
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 293
	    call 'erl_types':'t_list'
		()
	in  %% Line 293
	    call 'erl_types':'t_inf'
		(_cor1, _cor0)
'is_not_nil_list'/1 =
    %% Line 295
    fun (_cor0) ->
	%% Line 296
	( case call 'erl_types':'t_is_list'
		   (_cor0) of
	    ( <( 'true'
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor2> =
		      call 'erl_types':'t_is_nil'
			  (_cor0)
		  in  call 'erlang':'not'
			  (_cor2)
	      -| ['compiler_generated'] )
	    ( <( 'false'
		 -| ['compiler_generated'] )> when 'true' ->
		  'false'
	      -| ['compiler_generated'] )
	    ( <_cor1> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {( 'badarg'
			      -| ['compiler_generated'] ),_cor1}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'process_contracts'/2 =
    %% Line 302
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 303
	    call 'erl_types':'t_none'
		()
	in  %% Line 303
	    apply 'process_contracts'/3
		(_cor1, _cor0, _cor2)
'process_contracts'/3 =
    %% Line 305
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[OverContract|Left],Args,AccRange> when 'true' ->
	      let <_cor4> =
		  %% Line 307
		  case apply 'process_contract'/2
			   (OverContract, Args) of
		    %% Line 308
		    <'error'> when 'true' ->
			AccRange
		    %% Line 309
		    <{'ok',Range}> when 'true' ->
			call 'erl_types':'t_sup'
			    (AccRange, Range)
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 311
		  apply 'process_contracts'/3
		      (Left, Args, _cor4)
	  %% Line 312
	  <[],_X_Args,AccRange> when 'true' ->
	      %% Line 313
	      AccRange
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'process_contracts',3}}] )
	    -| ['compiler_generated'] )
	end
'process_contract'/2 =
    %% Line 318
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Contract,Constraints},CallTypes0> when 'true' ->
	      let <_cor2> =
		  %% Line 319
		  call 'erl_types':'t_any'
		      ()
	      in  let <CallTypesFun> =
		      %% Line 319
		      call 'erl_types':'t_fun'
			  (CallTypes0, _cor2)
		  in  let <_cor5> =
			  %% Line 320
			  call 'erl_types':'t_fun_args'
			      (Contract)
		      in  let <_cor4> =
			      %% Line 321
			      call 'erl_types':'t_any'
				  ()
			  in  let <ContArgsFun> =
				  %% Line 320
				  call 'erl_types':'t_fun'
				      (_cor5, _cor4)
			      in  %% Line 325
				  case apply 'solve_constraints'/3
					   (ContArgsFun, CallTypesFun, Constraints) of
				    %% Line 326
				    <{'ok',VarDict}> when 'true' ->
					let <_cor7> =
					    %% Line 327
					    call 'erl_types':'t_fun_range'
						(Contract)
					in  let <_cor8> =
						%% Line 327
						call 'erl_types':'t_subst'
						    (_cor7, VarDict)
					    in  %% Line 327
						{'ok',_cor8}
				    %% Line 328
				    <'error'> when 'true' ->
					'error'
				    ( <_cor9> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor9})
				      -| ['compiler_generated'] )
				  end
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'process_contract',2}}] )
	    -| ['compiler_generated'] )
	end
'solve_constraints'/3 =
    %% Line 331
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 333
	    call 'dict':'new'
		()
	in  let <CDict> =
		%% Line 333
		apply 'insert_constraints'/2
		    (_cor0, _cor3)
	    in  let <Contract1> =
		    %% Line 334
		    call 'erl_types':'t_subst'
			(_cor2, CDict)
		in  let <ContrArgs> =
			%% Line 337
			call 'erl_types':'t_fun_args'
			    (Contract1)
		    in  let <CallArgs> =
			    %% Line 338
			    call 'erl_types':'t_fun_args'
				(_cor1)
			in  let <InfList> =
				%% Line 339
				call 'erl_types':'t_inf_lists'
				    (ContrArgs, CallArgs)
			    in  %% Line 340
				case call 'erl_types':'any_none_or_unit'
					 (InfList) of
				  %% Line 341
				  <'true'> when 'true' ->
				      'error'
				  %% Line 342
				  <'false'> when 'true' ->
				      {'ok',CDict}
				  ( <_cor9> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor9})
				    -| ['compiler_generated'] )
				end
'contracts_without_fun'/3 =
    %% Line 358
    fun (_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 359
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[%% Line 360
			      {Label,Arity}|_cor4]> when 'true' ->
				let <_cor6> =
				    call 'dialyzer_callgraph':'lookup_name'
					(Label, _cor0)
				in  let <_cor7> =
					%% Line 360
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [{_cor6,Arity}|_cor7]
					  -| ['compiler_generated'] )
			    ( <[_cor3|_cor4]> when 'true' ->
				  %% Line 360
				  apply 'lc$^0'/1
				      (_cor4)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor1)
	      -| ['list_comprehension'] )
	in  let <_cor14> =
		%% Line 361
		( letrec
		      'lc$^1'/1 =
			  fun (_cor12) ->
			      case _cor12 of
				<[{{'ok',{M,F,_cor26}},A}|_cor11]> when 'true' ->
				    let <_cor13> =
					apply 'lc$^1'/1
					    (_cor11)
				    in  ( [{M,F,A}|_cor13]
					  -| ['compiler_generated'] )
				( <[_cor10|_cor11]> when 'true' ->
				      apply 'lc$^1'/1
					  (_cor11)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor12> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor12})
					-| [{'function_name',{'lc$^1',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^1'/1
			  (_cor8)
		  -| ['list_comprehension'] )
	    in  let <AllContractMFAs> =
		    %% Line 362
		    call 'dict':'fetch_keys'
			(_cor2)
		in  let <ErrorContractMFAs> =
			%% Line 363
			call 'erlang':'--'
			    (AllContractMFAs, _cor14)
		    in  %% Line 364
			( letrec
			      'lc$^2'/1 =
				  fun (_cor20) ->
				      case _cor20 of
					<[MFA|_cor19]> when 'true' ->
					    let <_cor21> =
						apply 'warn_spec_missing_fun'/2
						    (MFA, _cor2)
					    in  let <_cor22> =
						    apply 'lc$^2'/1
							(_cor19)
						in  ( [_cor21|_cor22]
						      -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor20> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor20})
						-| [{'function_name',{'lc$^2',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^2'/1
				  (ErrorContractMFAs)
			  -| ['list_comprehension'] )
'warn_spec_missing_fun'/2 =
    %% Line 366
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <MFA = {M,F,A},Contracts> when 'true' ->
	      %% Line 367
	      case call 'dict':'fetch'
		       (MFA, Contracts) of
		<{FileLine,_X_Contract}> when 'true' ->
		    %% Line 368
		    {'warn_contract_syntax',FileLine,{'spec_missing_fun',[M|[F|[A|[]]]]}}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'warn_spec_missing_fun',2}}] )
	    -| ['compiler_generated'] )
	end
'insert_constraints'/2 =
    %% Line 371
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'subtype',Type1,Type2}|Left],Dict> when 'true' ->
	      %% Line 372
	      case call 'erl_types':'t_is_var'
		       (Type1) of
		%% Line 373
		<'true'> when 'true' ->
		    let <Name> =
			%% Line 374
			call 'erl_types':'t_var_name'
			    (Type1)
		    in  let <_cor5> =
			    %% Line 375
			    case call 'dict':'find'
				     (Name, Dict) of
			      %% Line 376
			      <'error'> when 'true' ->
				  %% Line 377
				  call 'dict':'store'
				      (Name, Type2, Dict)
			      %% Line 378
			      <{'ok',VarType}> when 'true' ->
				  let <_cor3> =
				      %% Line 379
				      call 'erl_types':'t_inf'
					  (VarType, Type2)
				  in  %% Line 379
				      call 'dict':'store'
					  (Name, _cor3, Dict)
			      ( <_cor4> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor4})
				-| ['compiler_generated'] )
			    end
			in  %% Line 381
			    apply 'insert_constraints'/2
				(Left, _cor5)
		%% Line 382
		<'false'> when 'true' ->
		    let <_cor7> =
			%% Line 384
			call 'io_lib':'format'
			    ([70|[105|[114|[115|[116|[32|[97|[114|[103|[117|[109|[101|[110|[116|[32|[111|[102|[32|[105|[115|[95|[115|[117|[98|[116|[121|[112|[101|[32|[99|[111|[110|[115|[116|[114|[97|[105|[110|[116|[32|[109|[117|[115|[116|[32|[98|[101|[32|[97|[32|[116|[121|[112|[101|[32|[118|[97|[114|[105|[97|[98|[108|[101|[58|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 385
																																																			       [Type1|[]])
		    in  %% Line 384
			call 'erlang':'throw'
			    ({'error',_cor7})
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 387
	  <[],Dict> when 'true' ->
	      Dict
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'insert_constraints',2}}] )
	    -| ['compiler_generated'] )
	end
'store_tmp_contract'/5 =
    %% Line 394
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <TmpContract> =
	    %% Line 396
	    apply 'contract_from_form'/3
		(_cor2, _cor0, _cor3)
	in  %% Line 398
	    call 'dict':'store'
		(_cor4, {_cor3,TmpContract}, _cor1)
'contract_from_form'/3 =
    %% Line 400
    fun (_cor2,_cor1,_cor0) ->
	%% Line 401
	case apply 'contract_from_form'/5
		 (_cor2, _cor1, _cor0, [], []) of
	  <{CFuns,Forms1}> when 'true' ->
	      %% Line 402
	      {'tmp_contract',CFuns,Forms1}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'contract_from_form'/5 =
    %% Line 404
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Form = {'type',_cor41,'fun',[_cor42|[_cor43|[]]]}|Left],RecDict,%% Line 405
									    FileLine,%% Line 405
										     TypeAcc,%% Line 405
											     FormAcc> when 'true' ->
	      let <TypeFun> =
		  %% Line 407
		  ( fun (_cor17,_cor16) ->
			let <_cor12> =
			    %% Line 409
			    try
				%% Line 410
				call 'erl_types':'t_from_form'
				    (Form, RecDict)
			    of <_cor5> ->
				_cor5
			    catch <_cor8,_cor7,_cor6> ->
				case <_cor8,_cor7,_cor6> of
				  %% Line 412
				  <'throw',{'error',Msg},_cor44> when 'true' ->
				      %% Line 413
				      case FileLine of
					<{File,Line}> when 'true' ->
					    let <_cor10> =
						%% Line 414
						call 'filename':'basename'
						    (File)
					    in  let <NewMsg> =
						    %% Line 414
						    call 'io_lib':'format'
							([126|[115|[58|[126|[112|[58|[32|[126|[115]]]]]]]]], [_cor10|%% Line 415
														     [Line|[Msg|[]]]])
						in  %% Line 416
						    call 'erlang':'throw'
							({'error',NewMsg})
					( <_cor9> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor9})
					  -| ['compiler_generated'] )
				      end
				  ( <_cor8,_cor7,_cor6> when 'true' ->
					primop 'raise'
					    (_cor6, _cor7)
				    -| ['compiler_generated'] )
				end
			in  let <NewType> =
				%% Line 418
				call 'erl_types':'t_solve_remote'
				    (_cor12, _cor17, _cor16)
			    in  let <NewTypeNoVars> =
				    %% Line 419
				    call 'erl_types':'subst_all_vars_to_any'
					(NewType)
				in  %% Line 420
				    {NewTypeNoVars,[]}
		    -| [{'id',{0,0,'-contract_from_form/5-fun-0-'}}] )
	      in  let <NewTypeAcc> =
		      %% Line 422
		      [TypeFun|TypeAcc]
		  in  let <NewFormAcc> =
			  %% Line 423
			  [{Form,[]}|FormAcc]
		      in  %% Line 424
			  apply 'contract_from_form'/5
			      (Left, RecDict, FileLine, NewTypeAcc, NewFormAcc)
	  %% Line 425
	  <[{'type',_X_L1,'bounded_fun',%% Line 426
					[Form = {'type',_X_L2,'fun',[_cor45|[_cor46|[]]]}|[Constr|[]]]}|%% Line 426
													Left],%% Line 427
													      RecDict,%% Line 427
														      FileLine,%% Line 427
															       TypeAcc,%% Line 427
																       FormAcc> when 'true' ->
	      let <TypeFun> =
		  %% Line 429
		  ( fun (_cor28,_cor27) ->
			%% Line 430
			case %% Line 431
			     apply 'process_constraints'/4
				 (Constr, RecDict, _cor28, _cor27) of
			  <{Constr1,VarDict}> when 'true' ->
			      let <Type> =
				  %% Line 432
				  call 'erl_types':'t_from_form'
				      (Form, RecDict, VarDict)
			      in  let <NewType> =
				      %% Line 433
				      call 'erl_types':'t_solve_remote'
					  (Type, _cor28, _cor27)
				  in  let <NewTypeNoVars> =
					  %% Line 434
					  call 'erl_types':'subst_all_vars_to_any'
					      (NewType)
				      in  %% Line 435
					  {NewTypeNoVars,Constr1}
			  ( <_cor23> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor23})
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-contract_from_form/5-fun-1-'}}] )
	      in  let <NewTypeAcc> =
		      %% Line 437
		      [TypeFun|TypeAcc]
		  in  let <NewFormAcc> =
			  %% Line 438
			  [{Form,Constr}|FormAcc]
		      in  %% Line 439
			  apply 'contract_from_form'/5
			      (Left, RecDict, FileLine, NewTypeAcc, NewFormAcc)
	  %% Line 440
	  <[],_X_RecDict,_X_FileLine,TypeAcc,FormAcc> when 'true' ->
	      let <_cor35> =
		  %% Line 441
		  call 'lists':'reverse'
		      (TypeAcc)
	      in  let <_cor34> =
		      %% Line 441
		      call 'lists':'reverse'
			  (FormAcc)
		  in  %% Line 441
		      {_cor35,_cor34}
	  ( <_cor40,_cor39,_cor38,_cor37,_cor36> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor40,_cor39,_cor38,_cor37,_cor36})
		  -| [{'function_name',{'contract_from_form',5}}] )
	    -| ['compiler_generated'] )
	end
'process_constraints'/4 =
    %% Line 443
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Init0> =
	    %% Line 444
	    apply 'initialize_constraints'/4
		(_cor3, _cor2, _cor1, _cor0)
	in  let <Init> =
		%% Line 445
		apply 'remove_cycles'/1
		    (Init0)
	    in  %% Line 446
		apply 'constraints_fixpoint'/4
		    (Init, _cor2, _cor1, _cor0)
'initialize_constraints'/4 =
    %% Line 448
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 449
	apply 'initialize_constraints'/5
	    (_cor3, _cor2, _cor1, _cor0, [])
'initialize_constraints'/5 =
    %% Line 451
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_RecDict,_X_ExpTypes,_X_AllRecords,Acc> when 'true' ->
	      %% Line 452
	      Acc
	  %% Line 453
	  <[Constr|Rest],RecDict,ExpTypes,AllRecords,Acc> when 'true' ->
	      %% Line 454
	      case Constr of
		%% Line 455
		<{'type',_cor16,'constraint',[{'atom',_cor17,'is_subtype'}|[[Type1|[Type2|[]]]|[]]]}> when 'true' ->
		    let <_cor5> =
			%% Line 456
			call 'dict':'new'
			    ()
		    in  let <T1> =
			    %% Line 456
			    apply 'final_form'/5
				(Type1, RecDict, ExpTypes, AllRecords, _cor5)
			in  let <Entry> = {%% Line 457
				 T1,%% Line 457
				    Type2}
			    in  %% Line 458
				apply 'initialize_constraints'/5
				    (Rest, RecDict, ExpTypes, AllRecords, [Entry|Acc])
		%% Line 459
		<{'type',_cor18,'constraint',[{'atom',_cor19,Name}|[List|[]]]}> when 'true' ->
		    let <N> =
			%% Line 460
			call 'erlang':'length'
			    (List)
		    in  let <_cor9> =
			    %% Line 462
			    call 'io_lib':'format'
				([85|[110|[115|[117|[112|[112|[111|[114|[116|[101|[100|[32|[116|[121|[112|[101|[32|[103|[117|[97|[114|[100|[32|[126|[119|[47|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Name|[N|[]]])
			in  %% Line 461
			    call 'erlang':'throw'
				({'error',_cor9})
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'initialize_constraints',5}}] )
	    -| ['compiler_generated'] )
	end
'constraints_fixpoint'/4 =
    %% Line 465
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 467
	    call 'dict':'new'
		()
	in  let <VarDict> =
		%% Line 467
		apply 'constraints_to_dict'/5
		    (_cor3, _cor2, _cor1, _cor0, _cor4)
	    in  %% Line 468
		apply 'constraints_fixpoint'/5
		    (VarDict, _cor3, _cor2, _cor1, _cor0)
'constraints_fixpoint'/5 =
    %% Line 470
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <NewVarDict> =
	    %% Line 472
	    apply 'constraints_to_dict'/5
		(_cor3, _cor2, _cor1, _cor0, _cor4)
	in  %% Line 473
	    case NewVarDict of
	      %% Line 474
	      <_cor21>
		  when call 'erlang':'=:='
			(NewVarDict,
			 _cor4) ->
		  let <DictFold> =
		      %% Line 476
		      ( fun (_cor9,_cor8,_cor7) ->
			    let <_cor6> =
				%% Line 477
				call 'erl_types':'t_var'
				    (_cor9)
			    in  %% Line 477
				[{'subtype',_cor6,_cor8}|_cor7]
			-| [{'id',{0,0,'-constraints_fixpoint/5-fun-0-'}}] )
		  in  let <FinalConstrs> =
			  %% Line 479
			  call 'dict':'fold'
			      (DictFold, [], NewVarDict)
		      in  %% Line 480
			  {FinalConstrs,NewVarDict}
	      %% Line 481
	      <_X_Other> when 'true' ->
		  %% Line 482
		  apply 'constraints_fixpoint'/5
		      (NewVarDict, _cor3, _cor2, _cor1, _cor0)
	    end
'final_form'/5 =
    %% Line 485
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <T1> =
	    %% Line 486
	    call 'erl_types':'t_from_form'
		(_cor4, _cor3, _cor0)
	in  %% Line 487
	    call 'erl_types':'t_solve_remote'
		(T1, _cor2, _cor1)
'constraints_to_dict'/5 =
    %% Line 489
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Subtypes> =
	    %% Line 491
	    apply 'constraints_to_subs'/6
		(_cor4, _cor3, _cor2, _cor1, _cor0, [])
	in  let <_cor6> =
		%% Line 492
		call 'dict':'new'
		    ()
	    in  %% Line 492
		apply 'insert_constraints'/2
		    (Subtypes, _cor6)
'constraints_to_subs'/6 =
    %% Line 494
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_RecDict,_X_ExpTypes,_X_AllRecords,_X_VarDict,Acc> when 'true' ->
	      %% Line 495
	      Acc
	  %% Line 496
	  <[C|Rest],RecDict,ExpTypes,AllRecords,VarDict,Acc> when 'true' ->
	      %% Line 497
	      case C of
		<{T1,Form2}> when 'true' ->
		    let <T2> =
			%% Line 498
			apply 'final_form'/5
			    (Form2, RecDict, ExpTypes, AllRecords, VarDict)
		    in  let <NewAcc> =
			    %% Line 499
			    [{'subtype',T1,T2}|Acc]
			in  %% Line 500
			    apply 'constraints_to_subs'/6
				(Rest, RecDict, ExpTypes, AllRecords, VarDict, NewAcc)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'constraints_to_subs',6}}] )
	    -| ['compiler_generated'] )
	end
'remove_cycles'/1 =
    %% Line 505
    fun (_cor0) ->
	let <Uses> =
	    %% Line 506
	    apply 'find_uses'/1
		(_cor0)
	in  let <G> =
		%% Line 507
		call 'digraph':'new'
		    ()
	    in  let <_cor7> =
		    %% Line 508
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor5) ->
				  case _cor5 of
				    <[{_cor30,V}|_cor4]> when 'true' ->
					let <_cor6> =
					    apply 'lc$^0'/1
						(_cor4)
					in  ( [V|_cor6]
					      -| ['compiler_generated'] )
				    ( <[_cor3|_cor4]> when 'true' ->
					  apply 'lc$^0'/1
					      (_cor4)
				      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor5> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor5})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lc$^0'/1
			      (Uses)
		      -| ['list_comprehension'] )
		in  let <_cor12> =
			%% Line 508
			( letrec
			      'lc$^1'/1 =
				  fun (_cor10) ->
				      case _cor10 of
					<[{V,_cor31}|_cor9]> when 'true' ->
					    let <_cor11> =
						apply 'lc$^1'/1
						    (_cor9)
					    in  ( [V|_cor11]
						  -| ['compiler_generated'] )
					( <[_cor8|_cor9]> when 'true' ->
					      apply 'lc$^1'/1
						  (_cor9)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    _cor7
					( <_cor10> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor10})
						-| [{'function_name',{'lc$^1',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^1'/1
				  (Uses)
			  -| ['list_comprehension'] )
		    in  let <Vs> =
			    %% Line 509
			    call 'lists':'usort'
				(_cor12)
			in  let <_cor18> =
				%% Line 510
				( fun (_cor16) ->
				      ( call 'digraph':'add_vertex'
					    (G, _cor16)
					-| ['result_not_wanted'] )
				  -| [{'id',{0,0,'-remove_cycles/1-fun-0-'}}] )
			    in  do  %% Line 510
				    call 'lists':'foreach'
					(_cor18, Vs)
				    let <_cor22> =
					%% Line 511
					( fun (_cor20) ->
					      case _cor20 of
						<{From,To}> when 'true' ->
						    %% Line 512
						    ( call 'digraph':'add_edge'
							  (G, {From,To}, From, To, [])
						      -| ['result_not_wanted'] )
						( <_cor21> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor21})
							-| [{'function_name',{'-remove_cycles/1-fun-1-',1}}] )
						  -| ['compiler_generated'] )
					      end
					  -| [{'id',{0,0,'-remove_cycles/1-fun-1-'}}] )
				    in  do  %% Line 511
					    call 'lists':'foreach'
						(_cor22, %% Line 513
							 Uses)
					    %% Line 514
					    case apply 'remove_cycles'/2
						     (G, Vs) of
					      <'ok'> when 'true' ->
						  let <_cor26> =
						      %% Line 515
						      call 'ordsets':'from_list'
							  (Uses)
						  in  let <_cor24> =
							  %% Line 516
							  call 'digraph':'edges'
							      (G)
						      in  let <_cor25> =
							      %% Line 516
							      call 'ordsets':'from_list'
								  (_cor24)
							  in  let <ToRemove> =
								  %% Line 515
								  call 'ordsets':'subtract'
								      (_cor26, _cor25)
							      in  let <Constrs> =
								      %% Line 517
								      apply 'remove_uses'/2
									  (ToRemove, _cor0)
								  in  do  %% Line 518
									  call 'digraph':'delete'
									      (G)
									  %% Line 519
									  Constrs
					      ( <_cor23> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor23})
						-| ['compiler_generated'] )
					    end
'find_uses'/1 =
    %% Line 521
    fun (_cor0) ->
	case _cor0 of
	  <[{Var,Form}|Constrs]> when 'true' ->
	      let <UsedVars> =
		  %% Line 522
		  apply 'form_vars'/2
		      (Form, [])
	      in  let <VarName> =
		      %% Line 523
		      call 'erl_types':'t_var_name'
			  (Var)
		  in  let <_cor3> =
			  %% Line 524
			  apply 'find_uses'/1
			      (Constrs)
		      in  %% Line 524
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor6) ->
					case _cor6 of
					  <[UsedVar|_cor5]> when 'true' ->
					      let <_cor7> =
						  apply 'lc$^0'/1
						      (_cor5)
					      in  ( [{VarName,UsedVar}|_cor7]
						    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      _cor3
					  ( <_cor6> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor6})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (UsedVars)
			    -| ['list_comprehension'] )
	  %% Line 525
	  <[]> when 'true' ->
	      %% Line 526
	      []
	  ( <_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8})
		  -| [{'function_name',{'find_uses',1}}] )
	    -| ['compiler_generated'] )
	end
'form_vars'/2 =
    %% Line 528
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'var',_cor6,'_'},Vs> when 'true' ->
	      Vs
	  %% Line 529
	  <{'var',_cor7,V},Vs> when 'true' ->
	      [V|Vs]
	  %% Line 530
	  <T,Vs>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_cor2> =
		  %% Line 531
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  %% Line 531
		  apply 'form_vars'/2
		      (_cor2, Vs)
	  %% Line 532
	  <[E|Es],Vs> when 'true' ->
	      let <_cor3> =
		  %% Line 533
		  apply 'form_vars'/2
		      (E, Vs)
	      in  %% Line 533
		  apply 'form_vars'/2
		      (Es, _cor3)
	  %% Line 534
	  <_cor8,Vs> when 'true' ->
	      Vs
	end
'remove_cycles'/2 =
    %% Line 536
    fun (_cor1,_cor0) ->
	let <NumberOfEdges> =
	    %% Line 537
	    call 'digraph':'no_edges'
		(_cor1)
	in  let <_cor6> =
		%% Line 538
		( fun (_cor4) ->
		      %% Line 539
		      case call 'digraph':'get_cycle'
			       (_cor1, _cor4) of
			%% Line 540
			<'false'> when 'true' ->
			    'true'
			%% Line 541
			<[_cor11|[]]>
			    when call 'erlang':'=:='
				  (_cor11,
				   _cor4) ->
			    call 'digraph':'del_edge'
				(_cor1, {_cor4,_cor4})
			%% Line 542
			<[_cor12|[V1|_cor13]]>
			    when call 'erlang':'=:='
				  (_cor12,
				   _cor4) ->
			    call 'digraph':'del_edge'
				(_cor1, {_cor4,V1})
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor3})
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-remove_cycles/2-fun-0-'}}] )
	    in  do  %% Line 538
		    call 'lists':'foreach'
			(_cor6, _cor0)
		    let <_cor7> =
			%% Line 545
			call 'digraph':'no_edges'
			    (_cor1)
		    in  %% Line 545
			case <> of
			  %% Line 546
			  <>
			      when call 'erlang':'=:='
				    (_cor7,
				     NumberOfEdges) ->
			      'ok'
			  %% Line 547
			  <> when 'true' ->
			      apply 'remove_cycles'/2
				  (_cor1, _cor0)
			end
'remove_uses'/2 =
    %% Line 550
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Constrs> when 'true' ->
	      Constrs
	  %% Line 551
	  <[{Var,Use}|ToRemove],Constrs0> when 'true' ->
	      let <Constrs> =
		  %% Line 552
		  apply 'remove_uses'/3
		      (Var, Use, Constrs0)
	      in  %% Line 553
		  apply 'remove_uses'/2
		      (ToRemove, Constrs)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'remove_uses',2}}] )
	    -| ['compiler_generated'] )
	end
'remove_uses'/3 =
    %% Line 555
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Var,_X_Use,[]> when 'true' ->
	      []
	  %% Line 556
	  <Var,Use,[Constr|Constrs]> when 'true' ->
	      %% Line 557
	      case Constr of
		<{V,Form}> when 'true' ->
		    let <_cor4> =
			%% Line 558
			call 'erl_types':'t_var_name'
			    (V)
		    in  %% Line 558
			case <> of
			  %% Line 559
			  <>
			      when call 'erlang':'=:='
				    (_cor4,
				     Var) ->
			      let <_cor5> =
				  apply 'remove_use'/2
				      (Form, Use)
			      in  [{V,_cor5}|Constrs]
			  %% Line 560
			  <> when 'true' ->
			      let <_cor6> =
				  apply 'remove_uses'/3
				      (Var, Use, Constrs)
			      in  [Constr|_cor6]
			end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'remove_uses',3}}] )
	    -| ['compiler_generated'] )
	end
'remove_use'/2 =
    %% Line 563
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'var',L,V},_cor8>
	      when call 'erlang':'=:='
		    (_cor8,
		     V) ->
	      {'var',L,'_'}
	  %% Line 564
	  <T,V>
	      when call 'erlang':'is_tuple'
		    (T) ->
	      let <_cor2> =
		  %% Line 565
		  call 'erlang':'tuple_to_list'
		      (T)
	      in  let <_cor3> =
		      %% Line 565
		      apply 'remove_use'/2
			  (_cor2, V)
		  in  %% Line 565
		      call 'erlang':'list_to_tuple'
			  (_cor3)
	  %% Line 566
	  <[E|Es],V> when 'true' ->
	      let <_cor4> =
		  %% Line 567
		  apply 'remove_use'/2
		      (E, V)
	      in  let <_cor5> =
		      %% Line 567
		      apply 'remove_use'/2
			  (Es, V)
		  in  %% Line 567
		      [_cor4|_cor5]
	  %% Line 568
	  <T,_X_V> when 'true' ->
	      T
	end
'general_domain'/1 =
    %% Line 573
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 574
	    call 'erl_types':'t_none'
		()
	in  %% Line 574
	    apply 'general_domain'/2
		(_cor0, _cor1)
'general_domain'/2 =
    %% Line 576
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Sig,Constraints}|Left],AccSig> when 'true' ->
	      let <_cor2> =
		  %% Line 577
		  call 'dict':'new'
		      ()
	      in  let <Dict> =
		      %% Line 577
		      apply 'insert_constraints'/2
			  (Constraints, _cor2)
		  in  let <Sig1> =
			  %% Line 578
			  call 'erl_types':'t_subst'
			      (Sig, Dict)
		      in  let <_cor5> =
			      %% Line 579
			      call 'erl_types':'t_sup'
				  (AccSig, Sig1)
			  in  %% Line 579
			      apply 'general_domain'/2
				  (Left, _cor5)
	  %% Line 580
	  <[],AccSig> when 'true' ->
	      let <AccSig1> =
		  %% Line 582
		  call 'erl_types':'subst_all_vars_to_any'
		      (AccSig)
	      in  %% Line 583
		  call 'erl_types':'t_fun_args'
		      (AccSig1)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'general_domain',2}}] )
	    -| ['compiler_generated'] )
	end
'get_invalid_contract_warnings'/4 =
    %% Line 590
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 591
	apply 'get_invalid_contract_warnings_modules'/5
	    (_cor3, _cor2, _cor1, _cor0, [])
'get_invalid_contract_warnings_modules'/5 =
    %% Line 593
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Mod|Mods],CodeServer,Plt,FindOpaques,Acc> when 'true' ->
	      let <Contracts1> =
		  %% Line 594
		  call 'dialyzer_codeserver':'lookup_mod_contracts'
		      (Mod, CodeServer)
	      in  let <Contracts2> =
		      %% Line 595
		      call 'dict':'to_list'
			  (Contracts1)
		  in  let <Records> =
			  %% Line 596
			  call 'dialyzer_codeserver':'lookup_mod_records'
			      (Mod, CodeServer)
		      in  let <NewAcc> =
			      %% Line 597
			      apply 'get_invalid_contract_warnings_funs'/5
				  (Contracts2, Plt, Records, FindOpaques, Acc)
			  in  %% Line 598
			      apply 'get_invalid_contract_warnings_modules'/5
				  (Mods, CodeServer, Plt, FindOpaques, NewAcc)
	  %% Line 599
	  <[],_X_CodeServer,_X_Plt,_X_FindOpaques,Acc> when 'true' ->
	      %% Line 600
	      Acc
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'get_invalid_contract_warnings_modules',5}}] )
	    -| ['compiler_generated'] )
	end
'get_invalid_contract_warnings_funs'/5 =
    %% Line 602
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{MFA,{FileLine,Contract}}|Left],%% Line 603
					    Plt,%% Line 603
						RecDict,%% Line 603
							FindOpaques,%% Line 603
								    Acc> when 'true' ->
	      %% Line 604
	      case call 'dialyzer_plt':'lookup'
		       (Plt, MFA) of
		%% Line 605
		<'none'> when 'true' ->
		    %% Line 607
		    apply 'get_invalid_contract_warnings_funs'/5
			(Left, Plt, RecDict, FindOpaques, Acc)
		%% Line 608
		<{'value',{Ret,Args}}> when 'true' ->
		    let <Sig> =
			%% Line 609
			call 'erl_types':'t_fun'
			    (Args, Ret)
		    in  %% Line 610
			case MFA of
			  <{M,_X_F,_X_A}> when 'true' ->
			      let <Opaques> =
				  %% Line 611
				  apply FindOpaques
				      (M)
			      in  let <_cor28> =
				      %% Line 613
				      case apply 'check_contract'/3
					       (Contract, Sig, Opaques) of
					%% Line 614
					<{'error','invalid_contract'}> when 'true' ->
					    let <_cor8> =
						%% Line 615
						apply 'invalid_contract_warning'/4
						    (MFA, FileLine, Sig, RecDict)
					    in  %% Line 615
						[_cor8|Acc]
					%% Line 616
					<{'error',{'overlapping_contract',[]}}> when 'true' ->
					    let <_cor9> =
						%% Line 617
						apply 'overlapping_contract_warning'/2
						    (MFA, FileLine)
					    in  %% Line 617
						[_cor9|Acc]
					%% Line 618
					<{'error',{'extra_range',ExtraRanges,STRange}}> when 'true' ->
					    %% Line 620
					    ( case Contract of
						( <( {'contract',_cor36,_cor37,_rec0}
						     -| ['compiler_generated'] )> when 'true' ->
						      let <_cor14> =
							  case apply 't_from_forms_without_remote'/2
								   (_rec0, %% Line 621
									   RecDict) of
							    %% Line 622
							    <{'ok',NoRemoteType}> when 'true' ->
								let <CRet> =
								    %% Line 623
								    call 'erl_types':'t_fun_range'
									(NoRemoteType)
								in  %% Line 624
								    call 'erl_types':'t_is_subtype'
									(ExtraRanges, CRet)
							    %% Line 625
							    <'unsupported'> when 'true' ->
								%% Line 626
								'true'
							    ( <_cor13> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_cor13})
							      -| ['compiler_generated'] )
							  end
						      in  %% Line 628
							  case _cor14 of
							    %% Line 629
							    <'true'> when 'true' ->
								let <_cor16> =
								    %% Line 630
								    apply 'extra_range_warning'/4
									(MFA, FileLine, ExtraRanges, STRange)
								in  %% Line 630
								    [_cor16|Acc]
							    %% Line 631
							    <'false'> when 'true' ->
								%% Line 632
								Acc
							    ( <_cor17> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_cor17})
							      -| ['compiler_generated'] )
							  end
						  -| ['compiler_generated'] )
						( <_cor38> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','contract'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					%% Line 634
					<{'error',Msg}> when 'true' ->
					    %% Line 635
					    [{'warn_contract_syntax',FileLine,Msg}|Acc]
					%% Line 636
					<'ok'> when 'true' ->
					    %% Line 637
					    case <M,_X_F,_X_A> of
					      <_cor39,F,A>
						  when call 'erlang':'=:='
							(_cor39,
							 M) ->
						  let <CSig0> =
						      %% Line 638
						      apply 'get_contract_signature'/1
							  (Contract)
						  in  let <CSig> =
							  %% Line 639
							  call 'erl_types':'subst_all_vars_to_any'
							      (CSig0)
						      in  %% Line 640
							  case call 'erl_bif_types':'is_known'
								   (M, F, A) of
							    %% Line 641
							    <'true'> when 'true' ->
								let <BifArgs> =
								    %% Line 644
								    call 'erl_bif_types':'arg_types'
									(M, F, A)
								in  let <BifRet> =
									%% Line 645
									call 'erl_bif_types':'type'
									    (M, F, A)
								    in  let <BifSig> =
									    %% Line 646
									    call 'erl_types':'t_fun'
										(BifArgs, BifRet)
									in  %% Line 647
									    case apply 'check_contract'/3
										     (Contract, BifSig, Opaques) of
									      %% Line 648
									      <{'error',_cor40}> when 'true' ->
										  let <_cor24> =
										      %% Line 649
										      apply 'invalid_contract_warning'/4
											  (MFA, FileLine, BifSig, RecDict)
										  in  %% Line 649
										      [_cor24|%% Line 650
											      Acc]
									      %% Line 651
									      <'ok'> when 'true' ->
										  %% Line 652
										  apply 'picky_contract_check'/7
										      (CSig, BifSig, MFA, FileLine, %% Line 653
														    Contract, %% Line 653
															      RecDict, %% Line 653
																       Acc)
									      ( <_cor25> when 'true' ->
										    primop 'match_fail'
											({'case_clause',_cor25})
										-| ['compiler_generated'] )
									    end
							    %% Line 655
							    <'false'> when 'true' ->
								%% Line 656
								apply 'picky_contract_check'/7
								    (CSig, Sig, MFA, FileLine, Contract, %% Line 657
													 RecDict, %% Line 657
														  Acc)
							    ( <_cor26> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_cor26})
							      -| ['compiler_generated'] )
							  end
					      ( <_fol77,_fol78,_fol79> when 'true' ->
						    let <_cor18> = {_fol77,_fol78,_fol79}
						    in  primop 'match_fail'
							    ({'badmatch',_cor18})
						-| ['compiler_generated'] )
					    end
					( <_cor27> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor27})
					  -| ['compiler_generated'] )
				      end
				  in  %% Line 660
				      apply 'get_invalid_contract_warnings_funs'/5
					  (Left, Plt, RecDict, FindOpaques, _cor28)
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		( <_cor30> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor30})
		  -| ['compiler_generated'] )
	      end
	  %% Line 662
	  <[],_X_Plt,_X_RecDict,_X_FindOpaques,Acc> when 'true' ->
	      %% Line 663
	      Acc
	  ( <_cor35,_cor34,_cor33,_cor32,_cor31> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor35,_cor34,_cor33,_cor32,_cor31})
		  -| [{'function_name',{'get_invalid_contract_warnings_funs',5}}] )
	    -| ['compiler_generated'] )
	end
'invalid_contract_warning'/4 =
    %% Line 665
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{M,F,A},FileLine,SuccType,RecDict> when 'true' ->
	      let <SuccTypeStr> =
		  %% Line 666
		  call 'dialyzer_utils':'format_sig'
		      (SuccType, RecDict)
	      in  %% Line 667
		  {'warn_contract_types',FileLine,{'invalid_contract',[M|[F|[A|[SuccTypeStr|[]]]]]}}
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'invalid_contract_warning',4}}] )
	    -| ['compiler_generated'] )
	end
'overlapping_contract_warning'/2 =
    %% Line 669
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{M,F,A},FileLine> when 'true' ->
	      %% Line 670
	      {'warn_contract_types',FileLine,{'overlapping_contract',[M|[F|[A|[]]]]}}
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'overlapping_contract_warning',2}}] )
	    -| ['compiler_generated'] )
	end
'extra_range_warning'/4 =
    %% Line 672
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{M,F,A},FileLine,ExtraRanges,STRange> when 'true' ->
	      let <ERangesStr> =
		  %% Line 673
		  call 'erl_types':'t_to_string'
		      (ExtraRanges)
	      in  let <STRangeStr> =
		      %% Line 674
		      call 'erl_types':'t_to_string'
			  (STRange)
		  in  %% Line 675
		      {'warn_contract_supertype',FileLine,%% Line 676
							  {'extra_range',[M|[F|[A|[ERangesStr|[STRangeStr|[]]]]]]}}
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'extra_range_warning',4}}] )
	    -| ['compiler_generated'] )
	end
'picky_contract_check'/7 =
    %% Line 678
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <CSig> =
	    %% Line 679
	    call 'erl_types':'t_abstract_records'
		(_cor6, _cor1)
	in  let <Sig> =
		%% Line 680
		call 'erl_types':'t_abstract_records'
		    (_cor5, _cor1)
	    in  %% Line 681
		case call 'erl_types':'t_is_equal'
			 (CSig, Sig) of
		  %% Line 682
		  <'true'> when 'true' ->
		      _cor0
		  %% Line 683
		  <'false'> when 'true' ->
		      let <_cor10> =
			  %% Line 684
			  call 'erl_types':'t_fun_range'
			      (Sig)
		      in  let <_cor13> =
			      %% Line 684
			      ( case call 'erl_types':'t_is_none'
					 (_cor10) of
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					let <_cor11> =
					    %% Line 685
					    call 'erl_types':'t_fun_range'
						(CSig)
					in  %% Line 685
					    call 'erl_types':'t_is_unit'
						(_cor11)
				    -| ['compiler_generated'] )
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					'false'
				    -| ['compiler_generated'] )
				  ( <_cor9> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {( 'badarg'
						    -| ['compiler_generated'] ),_cor9}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  in  %% Line 684
			      case _cor13 of
				%% Line 686
				<'true'> when 'true' ->
				    _cor0
				%% Line 687
				<'false'> when 'true' ->
				    %% Line 688
				    case apply 'extra_contract_warning'/6
					     (_cor4, _cor3, _cor2, %% Line 689
								   CSig, %% Line 689
									 Sig, _cor1) of
				      %% Line 690
				      <'no_warning'> when 'true' ->
					  _cor0
				      %% Line 691
				      <{'warning',Warning}> when 'true' ->
					  [Warning|_cor0]
				      ( <_cor14> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor14})
					-| ['compiler_generated'] )
				    end
				( <_cor15> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor15})
				  -| ['compiler_generated'] )
			      end
		  ( <_cor16> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor16})
		    -| ['compiler_generated'] )
		end
'extra_contract_warning'/6 =
    %% Line 696
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{M,F,A},FileLine,Contract,CSig,Sig,RecDict> when 'true' ->
	      let <SigUnopaque> =
		  %% Line 699
		  call 'erl_types':'t_unopaque'
		      (Sig)
	      in  let <CSigUnopaque> =
		      %% Line 700
		      call 'erl_types':'t_unopaque'
			  (CSig)
		  in  let <_cor8> =
			  %% Line 702
			  call 'dialyzer_utils':'format_sig'
			      (SigUnopaque, RecDict)
		      in  let <SigString0> =
			      %% Line 702
			      call 'lists':'flatten'
				  (_cor8)
			  in  let <_cor10> =
				  %% Line 704
				  call 'dialyzer_utils':'format_sig'
				      (CSigUnopaque, RecDict)
			      in  let <ContractString0> =
				      %% Line 704
				      call 'lists':'flatten'
					  (_cor10)
				  in  let <IsUndefRecordFieldsRelated> =
					  %% Line 706
					  call 'erlang':'=:='
					      (SigString0, ContractString0)
				      in  %% Line 707
					  case %% Line 708
					       apply 'is_remote_types_related'/4
						   (Contract, CSig, Sig, RecDict) of
					    <{IsRemoteTypesRelated,SubtypeRelation}> when 'true' ->
						let <_cor16> =
						    %% Line 709
						    ( case IsUndefRecordFieldsRelated of
							( <( 'true'
							     -| ['compiler_generated'] )> when 'true' ->
							      'true'
							  -| ['compiler_generated'] )
							( <( 'false'
							     -| ['compiler_generated'] )> when 'true' ->
							      IsRemoteTypesRelated
							  -| ['compiler_generated'] )
							( <_cor14> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {( 'badarg'
									  -| ['compiler_generated'] ),_cor14}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						      -| ['compiler_generated'] )
						in  %% Line 709
						    case _cor16 of
						      %% Line 710
						      <'true'> when 'true' ->
							  %% Line 711
							  'no_warning'
						      %% Line 712
						      <'false'> when 'true' ->
							  let <_cor17> =
							      %% Line 713
							      call 'dialyzer_utils':'format_sig'
								  (Sig, RecDict)
							  in  let <SigString> =
								  %% Line 713
								  call 'lists':'flatten'
								      (_cor17)
							      in  let <ContractString> =
								      %% Line 714
								      apply 'contract_to_string'/1
									  (Contract)
								  in  let <Tag,Msg> =
									  %% Line 716
									  case SubtypeRelation of
									    %% Line 717
									    <'contract_is_subtype'> when 'true' ->
										%% Line 718
										<'warn_contract_subtype',%% Line 719
													 {'contract_subtype',[M|[F|[A|[ContractString|[SigString|[]]]]]]}>
									    %% Line 720
									    <'contract_is_supertype'> when 'true' ->
										%% Line 721
										<'warn_contract_supertype',%% Line 722
													   {'contract_supertype',[M|[F|[A|[ContractString|[SigString|[]]]]]]}>
									    %% Line 723
									    <'neither'> when 'true' ->
										%% Line 724
										<'warn_contract_not_equal',%% Line 725
													   {'contract_diff',[M|[F|[A|[ContractString|[SigString|[]]]]]]}>
									    ( <_cor20> when 'true' ->
										  primop 'match_fail'
										      ({'case_clause',_cor20})
									      -| ['compiler_generated'] )
									  end
								      in  %% Line 727
									  {'warning',{Tag,FileLine,Msg}}
						      ( <_cor23> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_cor23})
							-| ['compiler_generated'] )
						    end
					    ( <_cor13> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor13})
					      -| ['compiler_generated'] )
					  end
	  ( <_cor29,_cor28,_cor27,_cor26,_cor25,_cor24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29,_cor28,_cor27,_cor26,_cor25,_cor24})
		  -| [{'function_name',{'extra_contract_warning',6}}] )
	    -| ['compiler_generated'] )
	end
'is_remote_types_related'/4 =
    %% Line 730
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 731
	case call 'erl_types':'t_is_subtype'
		 (_cor2, _cor1) of
	  %% Line 732
	  <'true'> when 'true' ->
	      %% Line 733
	      {'false','contract_is_subtype'}
	  %% Line 734
	  <'false'> when 'true' ->
	      %% Line 735
	      case call 'erl_types':'t_is_subtype'
		       (_cor1, _cor2) of
		%% Line 736
		<'true'> when 'true' ->
		    %% Line 737
		    ( case _cor3 of
			( <( {'contract',_cor14,_cor15,_rec1}
			     -| ['compiler_generated'] )> when 'true' ->
			      case apply 't_from_forms_without_remote'/2
				       (_rec1, _cor0) of
				%% Line 738
				<{'ok',NoRemoteTypeSig}> when 'true' ->
				    %% Line 739
				    case apply 'blame_remote'/3
					     (_cor2, NoRemoteTypeSig, _cor1) of
				      %% Line 740
				      <'true'> when 'true' ->
					  %% Line 741
					  {'true','neither'}
				      %% Line 742
				      <'false'> when 'true' ->
					  %% Line 743
					  {'false','contract_is_supertype'}
				      ( <_cor6> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor6})
					-| ['compiler_generated'] )
				    end
				%% Line 745
				<'unsupported'> when 'true' ->
				    %% Line 746
				    {'false','contract_is_supertype'}
				( <_cor7> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor7})
				  -| ['compiler_generated'] )
			      end
			  -| ['compiler_generated'] )
			( <_cor16> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','contract'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 748
		<'false'> when 'true' ->
		    %% Line 749
		    {'false','neither'}
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor9> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor9})
	    -| ['compiler_generated'] )
	end
't_from_forms_without_remote'/2 =
    %% Line 753
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{FType,[]}|[]],RecDict> when 'true' ->
	      let <Type0> =
		  %% Line 754
		  call 'erl_types':'t_from_form'
		      (FType, RecDict)
	      in  let <_cor3> =
		      %% Line 755
		      call 'erl_types':'t_none'
			  ()
		  in  let <_cor4> =
			  %% Line 755
			  call 'erl_types':'subst_all_remote'
			      (Type0, _cor3)
		      in  %% Line 755
			  {'ok',_cor4}
	  %% Line 756
	  <[{_X_FType,_X_Constrs}|[]],_X_RecDict> when 'true' ->
	      %% Line 758
	      'unsupported'
	  %% Line 759
	  <_X_Forms,_X_RecDict> when 'true' ->
	      %% Line 761
	      'unsupported'
	end
'blame_remote'/3 =
    %% Line 763
    fun (_cor2,_cor1,_cor0) ->
	let <CArgs> =
	    %% Line 764
	    call 'erl_types':'t_fun_args'
		(_cor2)
	in  let <CRange> =
		%% Line 765
		call 'erl_types':'t_fun_range'
		    (_cor2)
	    in  let <NRArgs> =
		    %% Line 766
		    call 'erl_types':'t_fun_args'
			(_cor1)
		in  let <NRRange> =
			%% Line 767
			call 'erl_types':'t_fun_range'
			    (_cor1)
		    in  let <SArgs> =
			    %% Line 768
			    call 'erl_types':'t_fun_args'
				(_cor0)
			in  let <SRange> =
				%% Line 769
				call 'erl_types':'t_fun_range'
				    (_cor0)
			    in  %% Line 770
				apply 'blame_remote_list'/3
				    ([CRange|CArgs], [NRRange|NRArgs], [SRange|SArgs])
'blame_remote_list'/3 =
    %% Line 772
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],[],[]> when 'true' ->
	      %% Line 773
	      'true'
	  %% Line 774
	  <[CArg|CArgs],[NRArg|NRArgs],[SArg|SArgs]> when 'true' ->
	      %% Line 775
	      case call 'erl_types':'t_is_equal'
		       (CArg, NRArg) of
		%% Line 776
		<'true'> when 'true' ->
		    %% Line 777
		    case call 'erl_types':'t_is_equal'
			     (CArg, SArg) of
		      %% Line 778
		      <'false'> when 'true' ->
			  'false'
		      %% Line 779
		      <'true'> when 'true' ->
			  apply 'blame_remote_list'/3
			      (CArgs, NRArgs, SArgs)
		      ( <_cor_variable> when 'true' ->
			    call 'erlang':'error'
				('badarg')
			-| ['compiler_generated'] )
		    end
		%% Line 781
		<'false'> when 'true' ->
		    let <_cor8> =
			%% Line 783
			( case call 'erl_types':'t_is_subtype'
				   (SArg, NRArg) of
			    ( <( 'true'
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor6> =
				      call 'erl_types':'t_is_subtype'
					  (NRArg, SArg)
				  in  call 'erlang':'not'
					  (_cor6)
			      -| ['compiler_generated'] )
			    ( <( 'false'
				 -| ['compiler_generated'] )> when 'true' ->
				  'false'
			      -| ['compiler_generated'] )
			    ( <_cor5> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {( 'badarg'
					      -| ['compiler_generated'] ),_cor5}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    in  %% Line 782
			case _cor8 of
			  %% Line 784
			  <'true'> when 'true' ->
			      'false'
			  %% Line 785
			  <'false'> when 'true' ->
			      apply 'blame_remote_list'/3
				  (CArgs, NRArgs, SArgs)
			  ( <_cor9> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor9})
			    -| ['compiler_generated'] )
			end
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'blame_remote_list',3}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('dialyzer_contracts')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('dialyzer_contracts', _cor0)
end