module 'eunit_autoexport' ['module_info'/0,
			   'module_info'/1,
			   'parse_transform'/2]
    attributes []
'parse_transform'/2 =
    %% Line 29
    fun (_cor1,_cor0) ->
	let <TestSuffix> =
	    %% Line 30
	    call 'proplists':'get_value'
		('eunit_test_suffix', _cor0, %% Line 31
					     [95|[116|[101|[115|[116]]]]])
	in  let <GeneratorSuffix> =
		%% Line 32
		call 'proplists':'get_value'
		    ('eunit_generator_suffix', _cor0, %% Line 34
						      [95|[116|[101|[115|[116|[95]]]]]])
	    in  let <ExportSuffix> =
		    %% Line 35
		    call 'proplists':'get_value'
			('eunit_export_suffix', _cor0, %% Line 36
						       [95|[101|[120|[112|[111|[114|[116|[101|[100|[95]]]]]]]]]])
		in  let <F> =
			%% Line 37
			( fun (_cor6,_cor5) ->
			      %% Line 38
			      apply 'form'/5
				  (_cor6, _cor5, TestSuffix, GeneratorSuffix, %% Line 39
									      ExportSuffix)
			  -| [{'id',{0,0,'-parse_transform/2-fun-0-'}}] )
		    in  let <_cor10> =
			    %% Line 41
			    call 'sets':'new'
				()
			in  let <_cor11> =
				%% Line 41
				call 'lists':'foldl'
				    (F, _cor10, _cor1)
			    in  let <Exports> =
				    %% Line 41
				    call 'sets':'to_list'
					(_cor11)
				in  %% Line 42
				    apply 'rewrite'/2
					(_cor1, Exports)
'form'/5 =
    %% Line 44
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'function',_X_L,Name,0,_X_Cs},S,TestSuffix,GeneratorSuffix,%% Line 45
								       ExportSuffix> when 'true' ->
	      let <N> =
		  %% Line 46
		  call 'erlang':'atom_to_list'
		      (Name)
	      in  %% Line 47
		  case call 'lists':'suffix'
			   (TestSuffix, N) of
		    %% Line 48
		    <'true'> when 'true' ->
			%% Line 49
			call 'sets':'add_element'
			    ({Name,0}, S)
		    %% Line 50
		    <'false'> when 'true' ->
			%% Line 51
			case call 'lists':'suffix'
				 (GeneratorSuffix, N) of
			  %% Line 52
			  <'true'> when 'true' ->
			      %% Line 53
			      call 'sets':'add_element'
				  ({Name,0}, S)
			  %% Line 54
			  <'false'> when 'true' ->
			      %% Line 55
			      case call 'lists':'suffix'
				       (ExportSuffix, N) of
				%% Line 56
				<'true'> when 'true' ->
				    %% Line 57
				    call 'sets':'add_element'
					({Name,0}, S)
				%% Line 58
				<'false'> when 'true' ->
				    %% Line 59
				    S
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor6})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor7> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor7})
			    -| ['compiler_generated'] )
			end
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor8})
		      -| ['compiler_generated'] )
		  end
	  %% Line 63
	  <{'function',_X_L,'eunit_wrapper_',1,_X_Cs},S,_cor14,_cor15,_cor16> when 'true' ->
	      %% Line 64
	      call 'sets':'add_element'
		  ({'eunit_wrapper_',1}, S)
	  %% Line 65
	  <_cor17,S,_cor18,_cor19,_cor20> when 'true' ->
	      %% Line 66
	      S
	end
'rewrite'/2 =
    %% Line 68
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[M = {'attribute',_cor5,'module',{Name,_X_Ps}}|Fs],Exports> when 'true' ->
	      %% Line 69
	      apply 'module_decl'/4
		  (Name, M, Fs, Exports)
	  %% Line 70
	  <[M = {'attribute',_cor6,'module',Name}|Fs],Exports> when 'true' ->
	      %% Line 71
	      apply 'module_decl'/4
		  (Name, M, Fs, Exports)
	  %% Line 72
	  <[F|Fs],Exports> when 'true' ->
	      let <_cor2> =
		  %% Line 73
		  apply 'rewrite'/2
		      (Fs, Exports)
	      in  %% Line 73
		  [F|_cor2]
	  %% Line 74
	  <[],_X_Exports> when 'true' ->
	      %% Line 75
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'rewrite',2}}] )
	    -| ['compiler_generated'] )
	end
'rewrite'/4 =
    %% Line 77
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[F = {'function',_cor9,'test',0,_cor10}|Fs],As,Module,_X_Test> when 'true' ->
	      %% Line 78
	      apply 'rewrite'/4
		  (Fs, [F|As], Module, 'false')
	  %% Line 79
	  <[F|Fs],As,Module,Test> when 'true' ->
	      %% Line 80
	      apply 'rewrite'/4
		  (Fs, [F|As], Module, Test)
	  %% Line 81
	  <[],As,Module,Test> when 'true' ->
	      let <_cor4> =
		  %% Line 82
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (Test,
			       'true') ->
			%% Line 83
			[{'function',0,'test',0,%% Line 84
						[{'clause',0,[],[],%% Line 85
								   [{'call',0,{'remote',0,{'atom',0,'eunit'},{'atom',0,'test'}},%% Line 86
																[{'atom',0,Module}|[]]}|%% Line 86
																			[]]}|%% Line 86
																			     []]}|%% Line 87
																				  As]
		    %% Line 88
		    <> when 'true' ->
			%% Line 89
			As
		  end
	      in  %% Line 82
		  {_cor4,%% Line 91
			 Test}
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'rewrite',4}}] )
	    -| ['compiler_generated'] )
	end
'module_decl'/4 =
    %% Line 93
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 95
	case apply 'rewrite'/4
		 (_cor1, [], _cor3, 'true') of
	  <{Fs1,Test}> when 'true' ->
	      let <_cor6> =
		  %% Line 96
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (Test,
			       'true') ->
			[{'test',0}|_cor0]
		    %% Line 97
		    <> when 'true' ->
			_cor0
		  end
	      in  let <_cor8> =
		      %% Line 99
		      call 'lists':'reverse'
			  (Fs1)
		  in  %% Line 99
		      [_cor2|[{'attribute',0,'export',_cor6}|_cor8]]
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('eunit_autoexport')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('eunit_autoexport', _cor0)
end