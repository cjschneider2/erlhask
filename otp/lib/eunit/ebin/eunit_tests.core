module 'eunit_tests' ['if_test_'/0,
		      'let_test'/0,
		      'matches_test_'/0,
		      'module_info'/0,
		      'module_info'/1,
		      'test'/0,
		      'under_eunit_test'/0]
    attributes []
'id'/1 =
    %% Line 27
    fun (_cor0) ->
	_cor0
'under_eunit_test'/0 =
    %% Line 30
    fun () ->
	let <_cor6> =
	    ( fun () ->
		  let <_cor0> =
		      call 'erlang':'group_leader'
			  ()
		  in  let <_cor2> =
			  case call 'erlang':'process_info'
				   (_cor0, 'current_function') of
			    <{'current_function',{'eunit_proc',_cor7,_cor8}}> when 'true' ->
				'true'
			    <_cor9> when 'true' ->
				'false'
			  end
		      in  case _cor2 of
			    <'true'> when 'true' ->
				'ok'
			    <_X__V> when 'true' ->
				let <_cor4> =
				    case _X__V of
				      <'false'> when 'true' ->
					  _X__V
				      <_cor10> when 'true' ->
					  {'not_a_boolean',_X__V}
				    end
				in  call 'erlang':'error'
					({'assertion_failed',[{'module','eunit_tests'}|[{'line',30}|[{'expression',[63|[32|[85|[78|[68|[69|[82|[95|[69|[85|[78|[73|[84]]]]]]]]]]]]]}|[{'expected','true'}|[{'value',_cor4}|[]]]]]]})
			  end
	      -| [{'id',{0,0,'-under_eunit_test/0-fun-0-'}}] )
	in  apply _cor6
		()
'let_test'/0 =
    %% Line 32
    fun () ->
	let <_cor6> =
	    ( fun (_cor4) ->
		  let <_cor2> =
		      ( fun (_cor0) ->
			    call 'erlang':'+'
				(_cor0, 25)
			-| [{'id',{0,0,'-let_test/0-fun-0-'}}] )
		  in  case apply _cor2
			       (17) of
			<_cor7>
			    when call 'erlang':'=:='
				  (_cor7,
				   _cor4) ->
			    'ok'
			<_X__V> when 'true' ->
			    call 'erlang':'error'
				({'assertEqual_failed',[{'module','eunit_tests'}|[{'line',32}|[{'expression',[63|[32|[76|[69|[84|[32|[40|[32|[88|[32|[44|[32|[49|[55|[32|[44|[32|[88|[32|[43|[32|[50|[53|[32|[41]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'expected',_cor4}|[{'value',_X__V}|[]]]]]]})
		      end
	      -| [{'id',{0,0,'-let_test/0-fun-1-'}}] )
	in  apply _cor6
		(42)
'if_test_'/0 =
    %% Line 34
    fun () ->
	let <_cor7> =
	    %% Line 35
	    ( fun () ->
		  let <_cor6> =
		      ( fun (_cor4) ->
			    let <_cor0> =
				apply 'id'/1
				    (1)
			    in  let <_cor2> =
				    case <> of
				      <>
					  when call 'erlang':'>'
						(_cor0,
						 0) ->
					  17
				      <> when 'true' ->
					  42
				    end
				in  case _cor2 of
				      <_cor16>
					  when call 'erlang':'=:='
						(_cor2,
						 _cor4) ->
					  'ok'
				      <_X__V> when 'true' ->
					  call 'erlang':'error'
					      ({'assertEqual_failed',[{'module','eunit_tests'}|[{'line',35}|[{'expression',[63|[32|[73|[70|[32|[40|[32|[105|[100|[32|[40|[32|[49|[32|[41|[32|[62|[32|[48|[32|[44|[32|[49|[55|[32|[44|[32|[52|[50|[32|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'expected',_cor4}|[{'value',_X__V}|[]]]]]]})
				    end
			-| [{'id',{0,0,'-if_test_/0-fun-0-'}}] )
		  in  apply _cor6
			  (17)
	      -| [{'id',{0,0,'-if_test_/0-fun-1-'}}] )
	in  let <_cor15> =
		%% Line 36
		( fun () ->
		      let <_cor14> =
			  ( fun (_cor12) ->
				let <_cor8> =
				    apply 'id'/1
					(1)
				in  let <_cor10> =
					case <> of
					  <>
					      when call 'erlang':'<'
						    (_cor8,
						     0) ->
					      17
					  <> when 'true' ->
					      42
					end
				    in  case _cor10 of
					  <_cor17>
					      when call 'erlang':'=:='
						    (_cor10,
						     _cor12) ->
					      'ok'
					  <_X__V> when 'true' ->
					      call 'erlang':'error'
						  ({'assertEqual_failed',[{'module','eunit_tests'}|[{'line',36}|[{'expression',[63|[32|[73|[70|[32|[40|[32|[105|[100|[32|[40|[32|[49|[32|[41|[32|[60|[32|[48|[32|[44|[32|[49|[55|[32|[44|[32|[52|[50|[32|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'expected',_cor12}|[{'value',_X__V}|[]]]]]]})
					end
			    -| [{'id',{0,0,'-if_test_/0-fun-2-'}}] )
		      in  apply _cor14
			      (42)
		  -| [{'id',{0,0,'-if_test_/0-fun-3-'}}] )
	    in  %% Line 35
		[{35,_cor7}|%% Line 36
			    [{36,_cor15}|[]]]
'matches_test_'/0 =
    %% Line 38
    fun () ->
	let <_cor6> =
	    %% Line 39
	    ( fun () ->
		  let <_cor5> =
		      ( fun () ->
			    'ok'
			-| [{'id',{0,0,'-matches_test_/0-fun-0-'}}] )
		  in  apply _cor5
			  ()
	      -| [{'id',{0,0,'-matches_test_/0-fun-1-'}}] )
	in  let <_cor13> =
		%% Line 40
		( fun () ->
		      let <_cor12> =
			  ( fun () ->
				'ok'
			    -| [{'id',{0,0,'-matches_test_/0-fun-2-'}}] )
		      in  apply _cor12
			      ()
		  -| [{'id',{0,0,'-matches_test_/0-fun-3-'}}] )
	    in  %% Line 39
		[{39,_cor6}|%% Line 40
			    [{40,_cor13}|[]]]
'test'/0 =
    fun () ->
	call 'eunit':'test'
	    ('eunit_tests')
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('eunit_tests')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('eunit_tests', _cor0)
end