module 'eunit_surefire' ['handle_begin'/3,
			 'handle_cancel'/3,
			 'handle_end'/3,
			 'init'/1,
			 'module_info'/0,
			 'module_info'/1,
			 'start'/0,
			 'start'/1,
			 'terminate'/2,
			 'test'/0]
    attributes [%% Line 29
		'behaviour' =
		    %% Line 29
		    ['eunit_listener'],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','test'},[{'record_field',28,{'atom',28,'f'},{'atom',28,'undefined'}}|[{'record_field',29,{'atom',29,'desc'},{'atom',29,'undefined'}}|[{'record_field',30,{'atom',30,'timeout'},{'atom',30,'undefined'}}|[{'record_field',31,{'atom',31,'location'},{'atom',31,'undefined'}}|[{'record_field',32,{'atom',32,'line'},{'integer',32,0}}]]]]],[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{{'record','group'},[{'record_field',35,{'atom',35,'desc'},{'atom',35,'undefined'}}|[{'record_field',36,{'atom',36,'order'},{'atom',36,'undefined'}}|[{'record_field',37,{'atom',37,'timeout'},{'atom',37,'undefined'}}|[{'record_field',38,{'atom',38,'context'},{'atom',38,'undefined'}}|[{'record_field',39,{'atom',39,'spawn'},{'atom',39,'undefined'}}|[{'record_field',40,{'atom',40,'tests'},{'atom',40,'undefined'}}]]]]]],[]}],
		%% Line 42
		'type' =
		    %% Line 42
		    [{{'record','context'},[{'record_field',42,{'atom',42,'setup'},{'atom',42,'undefined'}}|[{'record_field',43,{'atom',43,'cleanup'},{'atom',43,'undefined'}}|[{'record_field',44,{'atom',44,'process'},{'atom',44,'local'}}]]],[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{'chars',{'type',50,'list',[{'type',50,'union',[{'type',50,'char',[]}|[{'type',50,'any',[]}]]}]},[]}],
		%% Line 55
		'type' =
		    %% Line 55
		    [{{'record','testcase'},[{'typed_record_field',{'record_field',57,{'atom',57,'name'}},{'type',57,'union',[{'atom',57,'undefined'}|[{'type',57,'chars',[]}]]}}|[{'typed_record_field',{'record_field',58,{'atom',58,'description'}},{'type',58,'union',[{'atom',58,'undefined'}|[{'type',58,'chars',[]}]]}}|[{'typed_record_field',{'record_field',59,{'atom',59,'result'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'atom',59,'ok'}|[{'type',59,'tuple',[{'atom',59,'failed'}|[{'type',59,'tuple','any'}]]}|[{'type',59,'tuple',[{'atom',59,'aborted'}|[{'type',59,'tuple','any'}]]}|[{'type',59,'tuple',[{'atom',59,'skipped'}|[{'type',59,'term',[]}]]}]]]]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'time'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'integer',[]}]]}}|[{'typed_record_field',{'record_field',61,{'atom',61,'output'}},{'type',61,'union',[{'atom',61,'undefined'}|[{'type',61,'binary',[]}]]}}]]]]],[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{{'record','testsuite'},[{'typed_record_field',{'record_field',65,{'atom',65,'id'},{'integer',65,0}},{'type',65,'integer',[]}}|[{'typed_record_field',{'record_field',66,{'atom',66,'name'},{'bin',66,[]}},{'type',66,'binary',[]}}|[{'typed_record_field',{'record_field',67,{'atom',67,'time'},{'integer',67,0}},{'type',67,'integer',[]}}|[{'typed_record_field',{'record_field',68,{'atom',68,'output'},{'bin',68,[]}},{'type',68,'binary',[]}}|[{'typed_record_field',{'record_field',69,{'atom',69,'succeeded'},{'integer',69,0}},{'type',69,'integer',[]}}|[{'typed_record_field',{'record_field',70,{'atom',70,'failed'},{'integer',70,0}},{'type',70,'integer',[]}}|[{'typed_record_field',{'record_field',71,{'atom',71,'aborted'},{'integer',71,0}},{'type',71,'integer',[]}}|[{'typed_record_field',{'record_field',72,{'atom',72,'skipped'},{'integer',72,0}},{'type',72,'integer',[]}}|[{'typed_record_field',{'record_field',73,{'atom',73,'testcases'},{'nil',73}},{'type',73,'list',[{'type',73,'record',[{'atom',73,'testcase'}]}]}}]]]]]]]]],[]}],
		%% Line 75
		'type' =
		    %% Line 75
		    [{{'record','state'},[{'record_field',75,{'atom',75,'verbose'},{'atom',75,'false'}}|[{'record_field',76,{'atom',76,'indent'},{'integer',76,0}}|[{'record_field',77,{'atom',77,'xmldir'},{'string',77,[46]}}|[{'typed_record_field',{'record_field',78,{'atom',78,'testsuites'},{'nil',78}},{'type',78,'list',[{'type',78,'record',[{'atom',78,'testsuite'}]}]}}]]]],[]}]]
'start'/0 =
    %% Line 81
    fun () ->
	%% Line 82
	apply 'start'/1
	    ([])
'start'/1 =
    %% Line 84
    fun (_cor0) ->
	%% Line 85
	call 'eunit_listener':'start'
	    ('eunit_surefire', _cor0)
'init'/1 =
    %% Line 87
    fun (_cor0) ->
	let <XMLDir> =
	    %% Line 88
	    call 'proplists':'get_value'
		('dir', _cor0, [46])
	in  let <_cor2> =
		%% Line 89
		call 'proplists':'get_bool'
		    ('verbose', _cor0)
	    in  let <St> =
		    %% Line 89
		    {'state',_cor2,0,%% Line 90
				     XMLDir,%% Line 91
					    []}
		in  %% Line 92
		    receive
		      %% Line 93
		      <{'start',_X_Reference}> when 'true' ->
			  %% Line 94
			  St
		    after 'infinity' ->
		      'true'
'terminate'/2 =
    %% Line 97
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'ok',_X_Data},St> when 'true' ->
	      %% Line 98
	      ( case St of
		  ( <( {'state',_cor10,_cor11,_cor12,_rec0}
		       -| ['compiler_generated'] )> when 'true' ->
			do  %% Line 100
			    apply 'write_reports'/2
				(_rec0, _cor12)
			    %% Line 101
			    'ok'
		    -| ['compiler_generated'] )
		  ( <_cor13> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 102
	  <{'error',_X_Reason},_X_St> when 'true' ->
	      %% Line 105
	      'ok'
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'terminate',2}}] )
	    -| ['compiler_generated'] )
	end
'handle_begin'/3 =
    %% Line 107
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Kind,Data,St>
	      when let <_cor3> =
		    call 'erlang':'=:='
			(Kind, 'group')
		in  let <_cor4> =
			call 'erlang':'=:='
			    (Kind, 'test')
		    in  call 'erlang':'or'
			    (_cor3, _cor4) ->
	      %% Line 114
	      case call 'proplists':'get_value'
		       ('id', Data) of
		%% Line 115
		<[]> when 'true' ->
		    %% Line 116
		    St
		%% Line 117
		<[GroupId|[]]> when 'true' ->
		    let <Desc> =
			%% Line 118
			call 'proplists':'get_value'
			    ('desc', Data)
		    in  let <TestSuite> =
			    %% Line 119
			    {'testsuite',GroupId,Desc,0,#{}#,0,0,0,0,[]}
			in  %% Line 120
			    ( case St of
				( <( {'state',_cor17,_cor18,_cor19,_rec4}
				     -| ['compiler_generated'] )> when 'true' ->
				      let <_rec2> =
					  apply 'store_suite'/2
					      (TestSuite, _rec4)
				      in  call 'erlang':'setelement'
					      (5, St, _rec2)
				  -| ['compiler_generated'] )
				( <_cor20> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','state'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		%% Line 122
		<_cor26> when 'true' ->
		    %% Line 123
		    St
	      end
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'handle_begin',3}}] )
	    -| ['compiler_generated'] )
	end
'handle_end'/3 =
    %% Line 125
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'group',Data,St> when 'true' ->
	      %% Line 127
	      case call 'proplists':'get_value'
		       ('id', Data) of
		%% Line 128
		<[]> when 'true' ->
		    %% Line 129
		    St
		%% Line 130
		<[GroupId|_cor39]> when 'true' ->
		    %% Line 131
		    ( case St of
			( <( {'state',_cor40,_cor41,_cor42,_rec5}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <TestSuite> =
				  %% Line 132
				  apply 'lookup_suite_by_group_id'/2
				      (GroupId, _rec5)
			      in  let <Time> =
				      %% Line 135
				      call 'proplists':'get_value'
					  ('time', Data)
				  in  let <Output> =
					  %% Line 136
					  call 'proplists':'get_value'
					      ('output', Data)
				      in  %% Line 137
					  case TestSuite of
					    <{'testsuite',_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52}> when 'true' ->
						let <_cor10> =
						    call 'erlang':'setelement'
							(5, TestSuite, Output)
						in  let <_cor12> =
							call 'erlang':'setelement'
							    (4, _cor10, Time)
						    in  let <_rec7> =
							    %% Line 138
							    apply 'store_suite'/2
								(_cor12, _rec5)
							in  %% Line 138
							    call 'erlang':'setelement'
								(5, St, _rec7)
					    ( <_cor53> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','testsuite'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
			  -| ['compiler_generated'] )
			( <_cor43> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		( <_cor17> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor17})
		  -| ['compiler_generated'] )
	      end
	  %% Line 140
	  <'test',Data,St> when 'true' ->
	      %% Line 142
	      case call 'proplists':'get_value'
		       ('id', Data) of
		<[GroupId|_cor59]> when 'true' ->
		    %% Line 143
		    ( case St of
			( <( {'state',_cor60,_cor61,_cor62,_rec9}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <TestSuite> =
				  %% Line 144
				  apply 'lookup_suite_by_group_id'/2
				      (GroupId, _rec9)
			      in  let <_cor24> =
				      %% Line 147
				      call 'proplists':'get_value'
					  ('source', Data)
				  in  let <_cor23> =
					  %% Line 148
					  call 'proplists':'get_value'
					      ('line', Data)
				      in  let <Name> =
					      %% Line 147
					      apply 'format_name'/2
						  (_cor24, _cor23)
					  in  let <_cor26> =
						  %% Line 149
						  call 'proplists':'get_value'
						      ('desc', Data)
					      in  let <Desc> =
						      %% Line 149
						      apply 'format_desc'/1
							  (_cor26)
						  in  let <Result> =
							  %% Line 150
							  call 'proplists':'get_value'
							      ('status', Data)
						      in  let <Time> =
							      %% Line 151
							      call 'proplists':'get_value'
								  ('time', Data)
							  in  let <Output> =
								  %% Line 152
								  call 'proplists':'get_value'
								      ('output', Data)
							      in  let <TestCase> =
								      %% Line 153
								      {'testcase',Name,Desc,'undefined',%% Line 154
													Time,%% Line 154
													     Output}
								  in  let <NewTestSuite> =
									  %% Line 155
									  apply 'add_testcase_to_testsuite'/3
									      (Result, TestCase, TestSuite)
								      in  let <_rec10> =
									      %% Line 156
									      apply 'store_suite'/2
										  (NewTestSuite, _rec9)
									  in  %% Line 156
									      call 'erlang':'setelement'
										  (5, St, _rec10)
			  -| ['compiler_generated'] )
			( <_cor63> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		( <_cor18> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor18})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor38,_cor37,_cor36> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor38,_cor37,_cor36})
		  -| [{'function_name',{'handle_end',3}}] )
	    -| ['compiler_generated'] )
	end
'handle_cancel'/3 =
    %% Line 160
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'group',Data,St> when 'true' ->
	      %% Line 162
	      case call 'proplists':'get_value'
		       ('reason', Data) of
		%% Line 163
		<{'abort',{SomethingFailed,Exception}}>
		    when let <_cor3> =
			  %% Line 164
			  call 'erlang':'=:='
			      (SomethingFailed, 'setup_failed')
		      in  let <_cor4> =
			      %% Line 165
			      call 'erlang':'=:='
				  (SomethingFailed, 'cleanup_failed')
			  in  %% Line 164
			      call 'erlang':'or'
				  (_cor3, _cor4) ->
		    %% Line 166
		    case call 'proplists':'get_value'
			     ('id', Data) of
		      <[GroupId|_cor52]> when 'true' ->
			  %% Line 167
			  ( case St of
			      ( <( {'state',_cor53,_cor54,_cor55,_rec12}
				   -| ['compiler_generated'] )> when 'true' ->
				    let <TestSuite> =
					%% Line 168
					apply 'lookup_suite_by_group_id'/2
					    (GroupId, _rec12)
				    in  let <_cor13> =
					    %% Line 172
					    case SomethingFailed of
					      %% Line 173
					      <'setup_failed'> when 'true' ->
						  [102|[105|[120|[116|[117|[114|[101|[32|[115|[101|[116|[117|[112|[32]]]]]]]]]]]]]]
					      %% Line 174
					      <'cleanup_failed'> when 'true' ->
						  [102|[105|[120|[116|[117|[114|[101|[32|[99|[108|[101|[97|[110|[117|[112|[32]]]]]]]]]]]]]]]]
					      ( <_cor12> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor12})
						-| ['compiler_generated'] )
					    end
					in  let <_cor10> =
						%% Line 176
						call 'proplists':'get_value'
						    ('id', Data)
					    in  let <_cor11> =
						    %% Line 176
						    call 'io_lib':'format'
							([126|[119]], [_cor10|[]])
						in  let <Name> =
							%% Line 176
							call 'erlang':'++'
							    (_cor13, _cor11)
						    in  let <_cor15> =
							    %% Line 177
							    call 'proplists':'get_value'
								('desc', Data)
							in  let <Desc> =
								%% Line 177
								apply 'format_desc'/1
								    (_cor15)
							    in  let <TestCase> =
								    %% Line 178
								    {'testcase',%% Line 179
										Name,%% Line 179
										     Desc,'undefined',%% Line 180
												      0,%% Line 180
													#{}#}
								in  let <NewTestSuite> =
									%% Line 181
									apply 'add_testcase_to_testsuite'/3
									    ({'error',Exception}, TestCase, TestSuite)
								    in  let <_rec13> =
									    %% Line 182
									    apply 'store_suite'/2
										(NewTestSuite, _rec12)
									in  %% Line 182
									    call 'erlang':'setelement'
										(5, St, _rec13)
				-| ['compiler_generated'] )
			      ( <_cor56> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','state'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor5})
			-| ['compiler_generated'] )
		    end
		%% Line 183
		<_cor62> when 'true' ->
		    %% Line 184
		    St
	      end
	  %% Line 186
	  <'test',Data,St> when 'true' ->
	      %% Line 188
	      case call 'proplists':'get_value'
		       ('id', Data) of
		<[GroupId|_cor63]> when 'true' ->
		    %% Line 189
		    ( case St of
			( <( {'state',_cor64,_cor65,_cor66,_rec15}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <TestSuite> =
				  %% Line 190
				  apply 'lookup_suite_by_group_id'/2
				      (GroupId, _rec15)
			      in  let <_cor29> =
				      %% Line 193
				      call 'proplists':'get_value'
					  ('source', Data)
				  in  let <_cor28> =
					  %% Line 194
					  call 'proplists':'get_value'
					      ('line', Data)
				      in  let <Name> =
					      %% Line 193
					      apply 'format_name'/2
						  (_cor29, _cor28)
					  in  let <_cor31> =
						  %% Line 195
						  call 'proplists':'get_value'
						      ('desc', Data)
					      in  let <Desc> =
						      %% Line 195
						      apply 'format_desc'/1
							  (_cor31)
						  in  let <Reason> =
							  %% Line 196
							  call 'proplists':'get_value'
							      ('reason', Data)
						      in  let <TestCase> =
							      %% Line 197
							      {'testcase',%% Line 198
									  Name,%% Line 198
									       Desc,%% Line 199
										    {'skipped',Reason},%% Line 199
												       0,%% Line 200
													 #{}#}
							  in  %% Line 202
							      ( case TestSuite of
								  ( <( {'testsuite',_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_rec19,_cor75}
								       -| ['compiler_generated'] )> when 'true' ->
									let <_rec16> =
									    call 'erlang':'+'
										(_rec19, 1)
									in  let <_rec17> =
										%% Line 203
										[TestCase|_cor75]
									    in  let <_cor42> =
										    %% Line 203
										    call 'erlang':'setelement'
											(10, TestSuite, _rec17)
										in  let <_cor44> =
											call 'erlang':'setelement'
											    (9, _cor42, _rec16)
										    in  let <_rec21> =
											    %% Line 204
											    apply 'store_suite'/2
												(_cor44, _rec15)
											in  %% Line 204
											    call 'erlang':'setelement'
												(5, St, _rec21)
								    -| ['compiler_generated'] )
								  ( <_cor76> when 'true' ->
									( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'error'
													       -| ['compiler_generated'] )
									      (( {'badrecord','testsuite'}
										 -| ['compiler_generated'] ))
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								end
								-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			( <_cor67> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		( <_cor23> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor23})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor51,_cor50,_cor49> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor51,_cor50,_cor49})
		  -| [{'function_name',{'handle_cancel',3}}] )
	    -| ['compiler_generated'] )
	end
'format_name'/2 =
    %% Line 206
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Module,Function,Arity},Line> when 'true' ->
	      let <_cor2> =
		  %% Line 207
		  call 'erlang':'atom_to_list'
		      (Module)
	      in  let <_cor3> =
		      %% Line 207
		      call 'erlang':'atom_to_list'
			  (Function)
		  in  let <_cor4> =
			  %% Line 208
			  call 'erlang':'integer_to_list'
			      (Arity)
		      in  let <_cor5> =
			      %% Line 208
			      call 'erlang':'integer_to_list'
				  (Line)
			  in  %% Line 207
			      call 'lists':'flatten'
				  ([_cor2|[[58]|[_cor3|[[47]|%% Line 208
							     [_cor4|[[95]|[_cor5|[]]]]]]]])
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'format_name',2}}] )
	    -| ['compiler_generated'] )
	end
'format_desc'/1 =
    %% Line 209
    fun (_cor0) ->
	case _cor0 of
	  <'undefined'> when 'true' ->
	      %% Line 210
	      []
	  %% Line 211
	  <Desc>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 212
	      call 'erlang':'binary_to_list'
		  (Desc)
	  %% Line 213
	  <Desc>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 214
	      Desc
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'format_desc',1}}] )
	    -| ['compiler_generated'] )
	end
'lookup_suite_by_group_id'/2 =
    %% Line 216
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 217
	    call 'lists':'keyfind'
		(_cor1, 2, _cor0)
	in  %% Line 217
	    case _cor5 of
	      <{'testsuite',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14}> when 'true' ->
		  ( _cor5
		    -| ['compiler_generated'] )
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor2})
		-| ['compiler_generated'] )
	    end
'store_suite'/2 =
    %% Line 219
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <TestSuite = {'testsuite',GroupId,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11},TestSuites> when 'true' ->
	      %% Line 220
	      call 'lists':'keystore'
		  (GroupId, 2, TestSuites, TestSuite)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'store_suite',2}}] )
	    -| ['compiler_generated'] )
	end
'add_testcase_to_testsuite'/3 =
    %% Line 223
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'ok',TestCaseTmp,TestSuite> when 'true' ->
	      %% Line 224
	      case TestCaseTmp of
		<{'testcase',_cor58,_cor59,_cor60,_cor61,_cor62}> when 'true' ->
		    let <_cor5> =
			call 'erlang':'setelement'
			    (4, TestCaseTmp, 'ok')
		    in  %% Line 226
			( case TestSuite of
			    ( <( {'testsuite',_cor64,_cor65,_cor66,_cor67,_rec27,_cor68,_cor69,_cor70,_cor71}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_rec24> =
				      call 'erlang':'+'
					  (_rec27, 1)
				  in  let <_rec25> =
					  %% Line 227
					  [_cor5|_cor71]
				      in  let <_cor14> =
					      %% Line 227
					      call 'erlang':'setelement'
						  (10, TestSuite, _rec25)
					  in  call 'erlang':'setelement'
						  (6, _cor14, _rec24)
			      -| ['compiler_generated'] )
			    ( <_cor72> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','testsuite'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		( <_cor63> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','testcase'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 228
	  <{'error',Exception},TestCaseTmp,TestSuite> when 'true' ->
	      %% Line 229
	      case Exception of
		%% Line 230
		<{'error',{AssertionException,_cor92},_cor93}>
		    when let <_cor16> =
			  %% Line 231
			  call 'erlang':'=:='
			      (AssertionException, 'assertion_failed')
		      in  let <_cor17> =
			      %% Line 232
			      call 'erlang':'=:='
				  (AssertionException, 'assertMatch_failed')
			  in  let <_cor18> =
				  %% Line 233
				  call 'erlang':'=:='
				      (AssertionException, 'assertEqual_failed')
			      in  let <_cor19> =
				      %% Line 234
				      call 'erlang':'=:='
					  (AssertionException, 'assertException_failed')
				  in  let <_cor20> =
					  %% Line 235
					  call 'erlang':'=:='
					      (AssertionException, 'assertCmd_failed')
				      in  let <_cor21> =
					      %% Line 236
					      call 'erlang':'=:='
						  (AssertionException, 'assertCmdOutput_failed')
					  in  let <_cor22> =
						  %% Line 235
						  call 'erlang':'or'
						      (_cor20, _cor21)
					      in  let <_cor23> =
						      %% Line 234
						      call 'erlang':'or'
							  (_cor19, _cor22)
						  in  let <_cor24> =
							  %% Line 233
							  call 'erlang':'or'
							      (_cor18, _cor23)
						      in  let <_cor25> =
							      %% Line 232
							      call 'erlang':'or'
								  (_cor17, _cor24)
							  in  %% Line 231
							      call 'erlang':'or'
								  (_cor16, _cor25) ->
		    let <_rec29> = {%% Line 238
			 'failed',%% Line 238
				  Exception}
		    in  %% Line 238
			case TestCaseTmp of
			  <{'testcase',_cor94,_cor95,_cor96,_cor97,_cor98}> when 'true' ->
			      let <_cor29> =
				  call 'erlang':'setelement'
				      (4, TestCaseTmp, _rec29)
			      in  %% Line 240
				  ( case TestSuite of
				      ( <( {'testsuite',_cor100,_cor101,_cor102,_cor103,_cor104,_rec34,_cor105,_cor106,_cor107}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_rec31> =
						call 'erlang':'+'
						    (_rec34, 1)
					    in  let <_rec32> =
						    %% Line 241
						    [_cor29|_cor107]
						in  let <_cor38> =
							%% Line 241
							call 'erlang':'setelement'
							    (10, TestSuite, _rec32)
						    in  call 'erlang':'setelement'
							    (7, _cor38, _rec31)
					-| ['compiler_generated'] )
				      ( <_cor108> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','testsuite'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			  ( <_cor99> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','testcase'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		%% Line 242
		<_cor128> when 'true' ->
		    let <_rec36> = {%% Line 243
			 'aborted',%% Line 243
				   Exception}
		    in  %% Line 243
			case TestCaseTmp of
			  <{'testcase',_cor129,_cor130,_cor131,_cor132,_cor133}> when 'true' ->
			      let <_cor43> =
				  call 'erlang':'setelement'
				      (4, TestCaseTmp, _rec36)
			      in  %% Line 245
				  ( case TestSuite of
				      ( <( {'testsuite',_cor135,_cor136,_cor137,_cor138,_cor139,_cor140,_rec41,_cor141,_cor142}
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_rec38> =
						call 'erlang':'+'
						    (_rec41, 1)
					    in  let <_rec39> =
						    %% Line 246
						    [_cor43|_cor142]
						in  let <_cor52> =
							%% Line 246
							call 'erlang':'setelement'
							    (10, TestSuite, _rec39)
						    in  call 'erlang':'setelement'
							    (8, _cor52, _rec38)
					-| ['compiler_generated'] )
				      ( <_cor143> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','testsuite'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			  ( <_cor134> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','testcase'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
	      end
	  ( <_cor57,_cor56,_cor55> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor57,_cor56,_cor55})
		  -| [{'function_name',{'add_testcase_to_testsuite',3}}] )
	    -| ['compiler_generated'] )
	end
'write_reports'/2 =
    %% Line 253
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 254
	    ( fun (_cor2) ->
		  apply 'write_report'/2
		      (_cor2, _cor0)
	      -| [{'id',{0,0,'-write_reports/2-fun-0-'}}] )
	in  %% Line 254
	    call 'lists':'foreach'
		(_cor4, _cor1)
'write_report'/2 =
    %% Line 257
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <TestSuite = {'testsuite',_cor12,Name,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19},XmlDir> when 'true' ->
	      let <_cor2> =
		  %% Line 258
		  apply 'escape_suitename'/1
		      (Name)
	      in  let <_cor3> =
		      %% Line 258
		      call 'lists':'flatten'
			  ([[84|[69|[83|[84|[45]]]]]|[_cor2|[]]], [46|[120|[109|[108]]]])
		  in  let <Filename> =
			  %% Line 258
			  call 'filename':'join'
			      (XmlDir, _cor3)
		      in  %% Line 259
			  case call 'file':'open'
				   (Filename, ['write'|[{'encoding','utf8'}]]) of
			    %% Line 260
			    <{'ok',FileDescriptor}> when 'true' ->
				%% Line 261
				letrec
				    'after$^0'/0 =
					fun () ->
					    %% Line 264
					    call 'file':'close'
						(FileDescriptor)
				in  try
					%% Line 262
					apply 'write_report_to'/2
					    (TestSuite, FileDescriptor)
				    of <_cor5> ->
					do  ( apply 'after$^0'/0
						  ()
					      -| ['compiler_generated'] )
					    _cor5
				    catch <_cor8,_cor7,_cor6> ->
					do  ( apply 'after$^0'/0
						  ()
					      -| ['compiler_generated'] )
					    primop 'raise'
						(_cor6, _cor7)
			    %% Line 266
			    <Error = {'error',_X_Reason}> when 'true' ->
				call 'erlang':'throw'
				    (Error)
			    ( <_cor9> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor9})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'write_report',2}}] )
	    -| ['compiler_generated'] )
	end
'write_report_to'/2 =
    %% Line 272
    fun (_cor1,_cor0) ->
	do  %% Line 273
	    apply 'write_header'/1
		(_cor0)
	    do  %% Line 274
		apply 'write_start_tag'/2
		    (_cor1, _cor0)
		%% Line 275
		( case _cor1 of
		    ( <( {'testsuite',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_rec43}
			 -| ['compiler_generated'] )> when 'true' ->
			  let <_cor4> =
			      call 'lists':'reverse'
				  (_rec43)
			  in  do  apply 'write_testcases'/2
				      (_cor4, _cor0)
				  %% Line 276
				  apply 'write_end_tag'/1
				      (_cor0)
		      -| ['compiler_generated'] )
		    ( <_cor15> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','testsuite'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
'write_header'/1 =
    %% Line 281
    fun (_cor0) ->
	%% Line 282
	call 'file':'write'
	    (_cor0, [#{#<60>(8,1,'integer',['unsigned'|['big']]),
		       #<63>(8,1,'integer',['unsigned'|['big']]),
		       #<120>(8,1,'integer',['unsigned'|['big']]),
		       #<109>(8,1,'integer',['unsigned'|['big']]),
		       #<108>(8,1,'integer',['unsigned'|['big']]),
		       #<32>(8,1,'integer',['unsigned'|['big']]),
		       #<118>(8,1,'integer',['unsigned'|['big']]),
		       #<101>(8,1,'integer',['unsigned'|['big']]),
		       #<114>(8,1,'integer',['unsigned'|['big']]),
		       #<115>(8,1,'integer',['unsigned'|['big']]),
		       #<105>(8,1,'integer',['unsigned'|['big']]),
		       #<111>(8,1,'integer',['unsigned'|['big']]),
		       #<110>(8,1,'integer',['unsigned'|['big']]),
		       #<61>(8,1,'integer',['unsigned'|['big']]),
		       #<34>(8,1,'integer',['unsigned'|['big']]),
		       #<49>(8,1,'integer',['unsigned'|['big']]),
		       #<46>(8,1,'integer',['unsigned'|['big']]),
		       #<48>(8,1,'integer',['unsigned'|['big']]),
		       #<34>(8,1,'integer',['unsigned'|['big']]),
		       #<32>(8,1,'integer',['unsigned'|['big']]),
		       #<101>(8,1,'integer',['unsigned'|['big']]),
		       #<110>(8,1,'integer',['unsigned'|['big']]),
		       #<99>(8,1,'integer',['unsigned'|['big']]),
		       #<111>(8,1,'integer',['unsigned'|['big']]),
		       #<100>(8,1,'integer',['unsigned'|['big']]),
		       #<105>(8,1,'integer',['unsigned'|['big']]),
		       #<110>(8,1,'integer',['unsigned'|['big']]),
		       #<103>(8,1,'integer',['unsigned'|['big']]),
		       #<61>(8,1,'integer',['unsigned'|['big']]),
		       #<34>(8,1,'integer',['unsigned'|['big']]),
		       #<85>(8,1,'integer',['unsigned'|['big']]),
		       #<84>(8,1,'integer',['unsigned'|['big']]),
		       #<70>(8,1,'integer',['unsigned'|['big']]),
		       #<45>(8,1,'integer',['unsigned'|['big']]),
		       #<56>(8,1,'integer',['unsigned'|['big']]),
		       #<34>(8,1,'integer',['unsigned'|['big']]),
		       #<32>(8,1,'integer',['unsigned'|['big']]),
		       #<63>(8,1,'integer',['unsigned'|['big']]),
		       #<62>(8,1,'integer',['unsigned'|['big']])}#|[#{#<10>(8,1,'integer',['unsigned'|['big']])}#]])
'write_start_tag'/2 =
    %% Line 288
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <%% Line 289
	   {'testsuite',_cor14,%% Line 290
			       Name,%% Line 291
				    Time,_cor15,%% Line 292
						Succeeded,%% Line 293
							  Failed,%% Line 295
								 Aborted,%% Line 294
									 Skipped,_cor16},%% Line 296
											 FileDescriptor> when 'true' ->
	      let <_cor2> =
		  %% Line 297
		  call 'erlang':'+'
		      (Succeeded, Failed)
	      in  let <_cor3> =
		      %% Line 297
		      call 'erlang':'+'
			  (_cor2, Skipped)
		  in  let <Total> =
			  %% Line 297
			  call 'erlang':'+'
			      (_cor3, Aborted)
		      in  let <_cor5> =
			      %% Line 299
			      call 'erlang':'integer_to_list'
				  (Total)
			  in  let <_cor6> =
				  %% Line 300
				  call 'erlang':'integer_to_list'
				      (Failed)
			      in  let <_cor7> =
				      %% Line 301
				      call 'erlang':'integer_to_list'
					  (Aborted)
				  in  let <_cor8> =
					  %% Line 302
					  call 'erlang':'integer_to_list'
					      (Skipped)
				      in  let <_cor9> =
					      %% Line 303
					      apply 'format_time'/1
						  (Time)
					  in  let <_cor10> =
						  %% Line 304
						  apply 'escape_attr'/1
						      (Name)
					      in  let <StartTag> =
						      %% Line 298
						      [%% Line 299
						       #{#<60>(8,1,'integer',['unsigned'|['big']]),
							 #<116>(8,1,'integer',['unsigned'|['big']]),
							 #<101>(8,1,'integer',['unsigned'|['big']]),
							 #<115>(8,1,'integer',['unsigned'|['big']]),
							 #<116>(8,1,'integer',['unsigned'|['big']]),
							 #<115>(8,1,'integer',['unsigned'|['big']]),
							 #<117>(8,1,'integer',['unsigned'|['big']]),
							 #<105>(8,1,'integer',['unsigned'|['big']]),
							 #<116>(8,1,'integer',['unsigned'|['big']]),
							 #<101>(8,1,'integer',['unsigned'|['big']]),
							 #<32>(8,1,'integer',['unsigned'|['big']]),
							 #<116>(8,1,'integer',['unsigned'|['big']]),
							 #<101>(8,1,'integer',['unsigned'|['big']]),
							 #<115>(8,1,'integer',['unsigned'|['big']]),
							 #<116>(8,1,'integer',['unsigned'|['big']]),
							 #<115>(8,1,'integer',['unsigned'|['big']]),
							 #<61>(8,1,'integer',['unsigned'|['big']]),
							 #<34>(8,1,'integer',['unsigned'|['big']])}#|%% Line 299
												     [_cor5|%% Line 300
													    [#{#<34>(8,1,'integer',['unsigned'|['big']]),
													       #<32>(8,1,'integer',['unsigned'|['big']]),
													       #<102>(8,1,'integer',['unsigned'|['big']]),
													       #<97>(8,1,'integer',['unsigned'|['big']]),
													       #<105>(8,1,'integer',['unsigned'|['big']]),
													       #<108>(8,1,'integer',['unsigned'|['big']]),
													       #<117>(8,1,'integer',['unsigned'|['big']]),
													       #<114>(8,1,'integer',['unsigned'|['big']]),
													       #<101>(8,1,'integer',['unsigned'|['big']]),
													       #<115>(8,1,'integer',['unsigned'|['big']]),
													       #<61>(8,1,'integer',['unsigned'|['big']]),
													       #<34>(8,1,'integer',['unsigned'|['big']])}#|[_cor6|%% Line 301
																				  [#{#<34>(8,1,'integer',['unsigned'|['big']]),
																				     #<32>(8,1,'integer',['unsigned'|['big']]),
																				     #<101>(8,1,'integer',['unsigned'|['big']]),
																				     #<114>(8,1,'integer',['unsigned'|['big']]),
																				     #<114>(8,1,'integer',['unsigned'|['big']]),
																				     #<111>(8,1,'integer',['unsigned'|['big']]),
																				     #<114>(8,1,'integer',['unsigned'|['big']]),
																				     #<115>(8,1,'integer',['unsigned'|['big']]),
																				     #<61>(8,1,'integer',['unsigned'|['big']]),
																				     #<34>(8,1,'integer',['unsigned'|['big']])}#|[_cor7|%% Line 302
																											[#{#<34>(8,1,'integer',['unsigned'|['big']]),
																											   #<32>(8,1,'integer',['unsigned'|['big']]),
																											   #<115>(8,1,'integer',['unsigned'|['big']]),
																											   #<107>(8,1,'integer',['unsigned'|['big']]),
																											   #<105>(8,1,'integer',['unsigned'|['big']]),
																											   #<112>(8,1,'integer',['unsigned'|['big']]),
																											   #<112>(8,1,'integer',['unsigned'|['big']]),
																											   #<101>(8,1,'integer',['unsigned'|['big']]),
																											   #<100>(8,1,'integer',['unsigned'|['big']]),
																											   #<61>(8,1,'integer',['unsigned'|['big']]),
																											   #<34>(8,1,'integer',['unsigned'|['big']])}#|[_cor8|%% Line 303
																																	      [#{#<34>(8,1,'integer',['unsigned'|['big']]),
																																		 #<32>(8,1,'integer',['unsigned'|['big']]),
																																		 #<116>(8,1,'integer',['unsigned'|['big']]),
																																		 #<105>(8,1,'integer',['unsigned'|['big']]),
																																		 #<109>(8,1,'integer',['unsigned'|['big']]),
																																		 #<101>(8,1,'integer',['unsigned'|['big']]),
																																		 #<61>(8,1,'integer',['unsigned'|['big']]),
																																		 #<34>(8,1,'integer',['unsigned'|['big']])}#|[_cor9|%% Line 304
																																								    [#{#<34>(8,1,'integer',['unsigned'|['big']]),
																																								       #<32>(8,1,'integer',['unsigned'|['big']]),
																																								       #<110>(8,1,'integer',['unsigned'|['big']]),
																																								       #<97>(8,1,'integer',['unsigned'|['big']]),
																																								       #<109>(8,1,'integer',['unsigned'|['big']]),
																																								       #<101>(8,1,'integer',['unsigned'|['big']]),
																																								       #<61>(8,1,'integer',['unsigned'|['big']]),
																																								       #<34>(8,1,'integer',['unsigned'|['big']])}#|[_cor10|%% Line 305
																																															   [#{#<34>(8,1,'integer',['unsigned'|['big']]),
																																															      #<62>(8,1,'integer',['unsigned'|['big']])}#|[#{#<10>(8,1,'integer',['unsigned'|['big']])}#]]]]]]]]]]]]]]
						  in  %% Line 306
						      call 'file':'write'
							  (FileDescriptor, StartTag)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'write_start_tag',2}}] )
	    -| ['compiler_generated'] )
	end
'write_testcases'/2 =
    %% Line 311
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_X_FileDescriptor> when 'true' ->
	      'void'
	  %% Line 312
	  <[TestCase|Tail],FileDescriptor> when 'true' ->
	      do  %% Line 313
		  apply 'write_testcase'/2
		      (TestCase, FileDescriptor)
		  %% Line 314
		  apply 'write_testcases'/2
		      (Tail, FileDescriptor)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'write_testcases',2}}] )
	    -| ['compiler_generated'] )
	end
'write_end_tag'/1 =
    %% Line 319
    fun (_cor0) ->
	%% Line 320
	call 'file':'write'
	    (_cor0, [#{#<60>(8,1,'integer',['unsigned'|['big']]),
		       #<47>(8,1,'integer',['unsigned'|['big']]),
		       #<116>(8,1,'integer',['unsigned'|['big']]),
		       #<101>(8,1,'integer',['unsigned'|['big']]),
		       #<115>(8,1,'integer',['unsigned'|['big']]),
		       #<116>(8,1,'integer',['unsigned'|['big']]),
		       #<115>(8,1,'integer',['unsigned'|['big']]),
		       #<117>(8,1,'integer',['unsigned'|['big']]),
		       #<105>(8,1,'integer',['unsigned'|['big']]),
		       #<116>(8,1,'integer',['unsigned'|['big']]),
		       #<101>(8,1,'integer',['unsigned'|['big']]),
		       #<62>(8,1,'integer',['unsigned'|['big']])}#|[#{#<10>(8,1,'integer',['unsigned'|['big']])}#]])
'write_testcase'/2 =
    %% Line 327
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <%% Line 328
	   {'testcase',%% Line 329
		       Name,%% Line 330
			    Description,%% Line 331
					Result,%% Line 332
					       Time,%% Line 333
						    Output},%% Line 334
							    FileDescriptor> when 'true' ->
	      let <_cor4> =
		  %% Line 335
		  case Description of
		    %% Line 336
		    <[]> when 'true' ->
			[]
		    %% Line 337
		    <_cor16> when 'true' ->
			let <_cor2> =
			    apply 'escape_attr'/1
				(Description)
			in  [#{#<32>(8,1,'integer',['unsigned'|['big']]),
			       #<100>(8,1,'integer',['unsigned'|['big']]),
			       #<101>(8,1,'integer',['unsigned'|['big']]),
			       #<115>(8,1,'integer',['unsigned'|['big']]),
			       #<99>(8,1,'integer',['unsigned'|['big']]),
			       #<114>(8,1,'integer',['unsigned'|['big']]),
			       #<105>(8,1,'integer',['unsigned'|['big']]),
			       #<112>(8,1,'integer',['unsigned'|['big']]),
			       #<116>(8,1,'integer',['unsigned'|['big']]),
			       #<105>(8,1,'integer',['unsigned'|['big']]),
			       #<111>(8,1,'integer',['unsigned'|['big']]),
			       #<110>(8,1,'integer',['unsigned'|['big']]),
			       #<61>(8,1,'integer',['unsigned'|['big']]),
			       #<34>(8,1,'integer',['unsigned'|['big']])}#|[_cor2|[#{#<34>(8,1,'integer',['unsigned'|['big']])}#]]]
		  end
	      in  let <_cor6> =
		      %% Line 340
		      apply 'format_time'/1
			  (Time)
		  in  let <_cor7> =
			  %% Line 341
			  apply 'escape_attr'/1
			      (Name)
		      in  let <StartTag> =
			      %% Line 339
			      [%% Line 340
			       #{#<32>(8,1,'integer',['unsigned'|['big']]),
				 #<32>(8,1,'integer',['unsigned'|['big']])}#|%% Line 340
									     [#{#<60>(8,1,'integer',['unsigned'|['big']]),
										#<116>(8,1,'integer',['unsigned'|['big']]),
										#<101>(8,1,'integer',['unsigned'|['big']]),
										#<115>(8,1,'integer',['unsigned'|['big']]),
										#<116>(8,1,'integer',['unsigned'|['big']]),
										#<99>(8,1,'integer',['unsigned'|['big']]),
										#<97>(8,1,'integer',['unsigned'|['big']]),
										#<115>(8,1,'integer',['unsigned'|['big']]),
										#<101>(8,1,'integer',['unsigned'|['big']]),
										#<32>(8,1,'integer',['unsigned'|['big']]),
										#<116>(8,1,'integer',['unsigned'|['big']]),
										#<105>(8,1,'integer',['unsigned'|['big']]),
										#<109>(8,1,'integer',['unsigned'|['big']]),
										#<101>(8,1,'integer',['unsigned'|['big']]),
										#<61>(8,1,'integer',['unsigned'|['big']]),
										#<34>(8,1,'integer',['unsigned'|['big']])}#|[_cor6|%% Line 341
																   [#{#<34>(8,1,'integer',['unsigned'|['big']]),
																      #<32>(8,1,'integer',['unsigned'|['big']]),
																      #<110>(8,1,'integer',['unsigned'|['big']]),
																      #<97>(8,1,'integer',['unsigned'|['big']]),
																      #<109>(8,1,'integer',['unsigned'|['big']]),
																      #<101>(8,1,'integer',['unsigned'|['big']]),
																      #<61>(8,1,'integer',['unsigned'|['big']]),
																      #<34>(8,1,'integer',['unsigned'|['big']])}#|[_cor7|[#{#<34>(8,1,'integer',['unsigned'|['big']])}#|%% Line 342
																													[_cor4|[]]]]]]]]
			  in  let <_cor12> =
				  %% Line 343
				  case <Result,Output> of
				    %% Line 344
				    <'ok',#{}#> when 'true' ->
					[#{#<47>(8,1,'integer',['unsigned'|['big']]),
					   #<62>(8,1,'integer',['unsigned'|['big']])}#|[#{#<10>(8,1,'integer',['unsigned'|['big']])}#]]
				    %% Line 345
				    <_fol223,_fol224> when 'true' ->
					let <_cor9> =
					    apply 'format_testcase_result'/1
						(Result)
					in  let <_cor10> =
						apply 'format_testcase_output'/1
						    (Output)
					    in  [#{#<62>(8,1,'integer',['unsigned'|['big']])}#|[#{#<10>(8,1,'integer',['unsigned'|['big']])}#|[_cor9|[_cor10|[#{#<32>(8,1,'integer',['unsigned'|['big']]),
																				#<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<60>(8,1,'integer',['unsigned'|['big']]),
																									       #<47>(8,1,'integer',['unsigned'|['big']]),
																									       #<116>(8,1,'integer',['unsigned'|['big']]),
																									       #<101>(8,1,'integer',['unsigned'|['big']]),
																									       #<115>(8,1,'integer',['unsigned'|['big']]),
																									       #<116>(8,1,'integer',['unsigned'|['big']]),
																									       #<99>(8,1,'integer',['unsigned'|['big']]),
																									       #<97>(8,1,'integer',['unsigned'|['big']]),
																									       #<115>(8,1,'integer',['unsigned'|['big']]),
																									       #<101>(8,1,'integer',['unsigned'|['big']]),
																									       #<62>(8,1,'integer',['unsigned'|['big']])}#|[#{#<10>(8,1,'integer',['unsigned'|['big']])}#]]]]]]]
				  end
			      in  %% Line 347
				  call 'file':'write'
				      (FileDescriptor, [StartTag|[_cor12|[]]])
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'write_testcase',2}}] )
	    -| ['compiler_generated'] )
	end
'format_testcase_result'/1 =
    %% Line 355
    fun (_cor0) ->
	case _cor0 of
	  <'ok'> when 'true' ->
	      [#{}#]
	  %% Line 356
	  <{'failed',Exception = {'error',{Type,_cor25},_cor26}}>
	      when call 'erlang':'is_atom'
		    (Type) ->
	      let <_cor1> =
		  %% Line 357
		  call 'erlang':'atom_to_list'
		      (Type)
	      in  let <_cor2> =
		      %% Line 357
		      apply 'escape_attr'/1
			  (_cor1)
		  in  let <_cor3> =
			  %% Line 358
			  call 'eunit_lib':'format_exception'
			      (Exception, 100)
		      in  let <_cor4> =
			      %% Line 358
			      apply 'escape_text'/1
				  (_cor3)
			  in  %% Line 357
			      [#{#<32>(8,1,'integer',['unsigned'|['big']]),
				 #<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<32>(8,1,'integer',['unsigned'|['big']]),
										#<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<60>(8,1,'integer',['unsigned'|['big']]),
															       #<102>(8,1,'integer',['unsigned'|['big']]),
															       #<97>(8,1,'integer',['unsigned'|['big']]),
															       #<105>(8,1,'integer',['unsigned'|['big']]),
															       #<108>(8,1,'integer',['unsigned'|['big']]),
															       #<117>(8,1,'integer',['unsigned'|['big']]),
															       #<114>(8,1,'integer',['unsigned'|['big']]),
															       #<101>(8,1,'integer',['unsigned'|['big']]),
															       #<32>(8,1,'integer',['unsigned'|['big']]),
															       #<116>(8,1,'integer',['unsigned'|['big']]),
															       #<121>(8,1,'integer',['unsigned'|['big']]),
															       #<112>(8,1,'integer',['unsigned'|['big']]),
															       #<101>(8,1,'integer',['unsigned'|['big']]),
															       #<61>(8,1,'integer',['unsigned'|['big']]),
															       #<34>(8,1,'integer',['unsigned'|['big']])}#|[_cor2|[#{#<34>(8,1,'integer',['unsigned'|['big']]),
																						     #<62>(8,1,'integer',['unsigned'|['big']])}#|[#{#<10>(8,1,'integer',['unsigned'|['big']])}#|%% Line 358
																																		[#{#<58>(8,1,'integer',['unsigned'|['big']]),
																																		   #<58>(8,1,'integer',['unsigned'|['big']])}#|[_cor4|%% Line 359
																																								      [#{#<32>(8,1,'integer',['unsigned'|['big']]),
																																									 #<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<32>(8,1,'integer',['unsigned'|['big']]),
																																															#<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<60>(8,1,'integer',['unsigned'|['big']]),
																																																				       #<47>(8,1,'integer',['unsigned'|['big']]),
																																																				       #<102>(8,1,'integer',['unsigned'|['big']]),
																																																				       #<97>(8,1,'integer',['unsigned'|['big']]),
																																																				       #<105>(8,1,'integer',['unsigned'|['big']]),
																																																				       #<108>(8,1,'integer',['unsigned'|['big']]),
																																																				       #<117>(8,1,'integer',['unsigned'|['big']]),
																																																				       #<114>(8,1,'integer',['unsigned'|['big']]),
																																																				       #<101>(8,1,'integer',['unsigned'|['big']]),
																																																				       #<62>(8,1,'integer',['unsigned'|['big']])}#|[#{#<10>(8,1,'integer',['unsigned'|['big']])}#]]]]]]]]]]]]
	  %% Line 360
	  <{'failed',Term}> when 'true' ->
	      let <_cor5> =
		  %% Line 362
		  call 'io_lib':'write'
		      (Term)
	      in  let <_cor6> =
		      %% Line 362
		      apply 'escape_text'/1
			  (_cor5)
		  in  %% Line 361
		      [#{#<32>(8,1,'integer',['unsigned'|['big']]),
			 #<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<32>(8,1,'integer',['unsigned'|['big']]),
									#<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<60>(8,1,'integer',['unsigned'|['big']]),
														       #<102>(8,1,'integer',['unsigned'|['big']]),
														       #<97>(8,1,'integer',['unsigned'|['big']]),
														       #<105>(8,1,'integer',['unsigned'|['big']]),
														       #<108>(8,1,'integer',['unsigned'|['big']]),
														       #<117>(8,1,'integer',['unsigned'|['big']]),
														       #<114>(8,1,'integer',['unsigned'|['big']]),
														       #<101>(8,1,'integer',['unsigned'|['big']]),
														       #<32>(8,1,'integer',['unsigned'|['big']]),
														       #<116>(8,1,'integer',['unsigned'|['big']]),
														       #<121>(8,1,'integer',['unsigned'|['big']]),
														       #<112>(8,1,'integer',['unsigned'|['big']]),
														       #<101>(8,1,'integer',['unsigned'|['big']]),
														       #<61>(8,1,'integer',['unsigned'|['big']]),
														       #<34>(8,1,'integer',['unsigned'|['big']]),
														       #<117>(8,1,'integer',['unsigned'|['big']]),
														       #<110>(8,1,'integer',['unsigned'|['big']]),
														       #<107>(8,1,'integer',['unsigned'|['big']]),
														       #<110>(8,1,'integer',['unsigned'|['big']]),
														       #<111>(8,1,'integer',['unsigned'|['big']]),
														       #<119>(8,1,'integer',['unsigned'|['big']]),
														       #<110>(8,1,'integer',['unsigned'|['big']]),
														       #<34>(8,1,'integer',['unsigned'|['big']]),
														       #<62>(8,1,'integer',['unsigned'|['big']])}#|[#{#<10>(8,1,'integer',['unsigned'|['big']])}#|%% Line 362
																										  [_cor6|%% Line 363
																											 [#{#<32>(8,1,'integer',['unsigned'|['big']]),
																											    #<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<32>(8,1,'integer',['unsigned'|['big']]),
																																	   #<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<60>(8,1,'integer',['unsigned'|['big']]),
																																							  #<47>(8,1,'integer',['unsigned'|['big']]),
																																							  #<102>(8,1,'integer',['unsigned'|['big']]),
																																							  #<97>(8,1,'integer',['unsigned'|['big']]),
																																							  #<105>(8,1,'integer',['unsigned'|['big']]),
																																							  #<108>(8,1,'integer',['unsigned'|['big']]),
																																							  #<117>(8,1,'integer',['unsigned'|['big']]),
																																							  #<114>(8,1,'integer',['unsigned'|['big']]),
																																							  #<101>(8,1,'integer',['unsigned'|['big']]),
																																							  #<62>(8,1,'integer',['unsigned'|['big']])}#|[#{#<10>(8,1,'integer',['unsigned'|['big']])}#]]]]]]]]]
	  %% Line 364
	  <{'aborted',Exception = {Class,_X_Term,_X_Trace}}>
	      when call 'erlang':'is_atom'
		    (Class) ->
	      let <_cor7> =
		  %% Line 365
		  call 'erlang':'atom_to_list'
		      (Class)
	      in  let <_cor8> =
		      %% Line 365
		      apply 'escape_attr'/1
			  (_cor7)
		  in  let <_cor9> =
			  %% Line 366
			  call 'eunit_lib':'format_exception'
			      (Exception, 100)
		      in  let <_cor10> =
			      %% Line 366
			      apply 'escape_text'/1
				  (_cor9)
			  in  %% Line 365
			      [#{#<32>(8,1,'integer',['unsigned'|['big']]),
				 #<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<32>(8,1,'integer',['unsigned'|['big']]),
										#<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<60>(8,1,'integer',['unsigned'|['big']]),
															       #<101>(8,1,'integer',['unsigned'|['big']]),
															       #<114>(8,1,'integer',['unsigned'|['big']]),
															       #<114>(8,1,'integer',['unsigned'|['big']]),
															       #<111>(8,1,'integer',['unsigned'|['big']]),
															       #<114>(8,1,'integer',['unsigned'|['big']]),
															       #<32>(8,1,'integer',['unsigned'|['big']]),
															       #<116>(8,1,'integer',['unsigned'|['big']]),
															       #<121>(8,1,'integer',['unsigned'|['big']]),
															       #<112>(8,1,'integer',['unsigned'|['big']]),
															       #<101>(8,1,'integer',['unsigned'|['big']]),
															       #<61>(8,1,'integer',['unsigned'|['big']]),
															       #<34>(8,1,'integer',['unsigned'|['big']])}#|[_cor8|[#{#<34>(8,1,'integer',['unsigned'|['big']]),
																						     #<62>(8,1,'integer',['unsigned'|['big']])}#|[#{#<10>(8,1,'integer',['unsigned'|['big']])}#|%% Line 366
																																		[#{#<58>(8,1,'integer',['unsigned'|['big']]),
																																		   #<58>(8,1,'integer',['unsigned'|['big']])}#|[_cor10|%% Line 367
																																								       [#{#<32>(8,1,'integer',['unsigned'|['big']]),
																																									  #<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<32>(8,1,'integer',['unsigned'|['big']]),
																																															 #<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<60>(8,1,'integer',['unsigned'|['big']]),
																																																					#<47>(8,1,'integer',['unsigned'|['big']]),
																																																					#<101>(8,1,'integer',['unsigned'|['big']]),
																																																					#<114>(8,1,'integer',['unsigned'|['big']]),
																																																					#<114>(8,1,'integer',['unsigned'|['big']]),
																																																					#<111>(8,1,'integer',['unsigned'|['big']]),
																																																					#<114>(8,1,'integer',['unsigned'|['big']]),
																																																					#<62>(8,1,'integer',['unsigned'|['big']])}#|[#{#<10>(8,1,'integer',['unsigned'|['big']])}#]]]]]]]]]]]]
	  %% Line 368
	  <{'aborted',Term}> when 'true' ->
	      let <_cor11> =
		  %% Line 370
		  call 'io_lib':'write'
		      (Term)
	      in  let <_cor12> =
		      %% Line 370
		      apply 'escape_text'/1
			  (_cor11)
		  in  %% Line 369
		      [#{#<32>(8,1,'integer',['unsigned'|['big']]),
			 #<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<32>(8,1,'integer',['unsigned'|['big']]),
									#<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<60>(8,1,'integer',['unsigned'|['big']]),
														       #<101>(8,1,'integer',['unsigned'|['big']]),
														       #<114>(8,1,'integer',['unsigned'|['big']]),
														       #<114>(8,1,'integer',['unsigned'|['big']]),
														       #<111>(8,1,'integer',['unsigned'|['big']]),
														       #<114>(8,1,'integer',['unsigned'|['big']]),
														       #<32>(8,1,'integer',['unsigned'|['big']]),
														       #<116>(8,1,'integer',['unsigned'|['big']]),
														       #<121>(8,1,'integer',['unsigned'|['big']]),
														       #<112>(8,1,'integer',['unsigned'|['big']]),
														       #<101>(8,1,'integer',['unsigned'|['big']]),
														       #<61>(8,1,'integer',['unsigned'|['big']]),
														       #<34>(8,1,'integer',['unsigned'|['big']]),
														       #<117>(8,1,'integer',['unsigned'|['big']]),
														       #<110>(8,1,'integer',['unsigned'|['big']]),
														       #<107>(8,1,'integer',['unsigned'|['big']]),
														       #<110>(8,1,'integer',['unsigned'|['big']]),
														       #<111>(8,1,'integer',['unsigned'|['big']]),
														       #<119>(8,1,'integer',['unsigned'|['big']]),
														       #<110>(8,1,'integer',['unsigned'|['big']]),
														       #<34>(8,1,'integer',['unsigned'|['big']]),
														       #<62>(8,1,'integer',['unsigned'|['big']])}#|[#{#<10>(8,1,'integer',['unsigned'|['big']])}#|%% Line 370
																										  [_cor12|%% Line 371
																											  [#{#<32>(8,1,'integer',['unsigned'|['big']]),
																											     #<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<32>(8,1,'integer',['unsigned'|['big']]),
																																	    #<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<60>(8,1,'integer',['unsigned'|['big']]),
																																							   #<47>(8,1,'integer',['unsigned'|['big']]),
																																							   #<101>(8,1,'integer',['unsigned'|['big']]),
																																							   #<114>(8,1,'integer',['unsigned'|['big']]),
																																							   #<114>(8,1,'integer',['unsigned'|['big']]),
																																							   #<111>(8,1,'integer',['unsigned'|['big']]),
																																							   #<114>(8,1,'integer',['unsigned'|['big']]),
																																							   #<62>(8,1,'integer',['unsigned'|['big']])}#|[#{#<10>(8,1,'integer',['unsigned'|['big']])}#]]]]]]]]]
	  %% Line 372
	  <{'skipped',{'abort',Error}}>
	      when call 'erlang':'is_tuple'
		    (Error) ->
	      let <_cor13> =
		  %% Line 373
		  call 'erlang':'element'
		      (1, Error)
	      in  let <_cor14> =
		      %% Line 373
		      call 'erlang':'atom_to_list'
			  (_cor13)
		  in  let <_cor15> =
			  %% Line 373
			  apply 'escape_attr'/1
			      (_cor14)
		      in  let <_cor16> =
			      %% Line 374
			      call 'eunit_lib':'format_error'
				  (Error)
			  in  let <_cor17> =
				  %% Line 374
				  apply 'escape_text'/1
				      (_cor16)
			      in  %% Line 373
				  [#{#<32>(8,1,'integer',['unsigned'|['big']]),
				     #<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<32>(8,1,'integer',['unsigned'|['big']]),
										    #<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<60>(8,1,'integer',['unsigned'|['big']]),
																   #<115>(8,1,'integer',['unsigned'|['big']]),
																   #<107>(8,1,'integer',['unsigned'|['big']]),
																   #<105>(8,1,'integer',['unsigned'|['big']]),
																   #<112>(8,1,'integer',['unsigned'|['big']]),
																   #<112>(8,1,'integer',['unsigned'|['big']]),
																   #<101>(8,1,'integer',['unsigned'|['big']]),
																   #<100>(8,1,'integer',['unsigned'|['big']]),
																   #<32>(8,1,'integer',['unsigned'|['big']]),
																   #<116>(8,1,'integer',['unsigned'|['big']]),
																   #<121>(8,1,'integer',['unsigned'|['big']]),
																   #<112>(8,1,'integer',['unsigned'|['big']]),
																   #<101>(8,1,'integer',['unsigned'|['big']]),
																   #<61>(8,1,'integer',['unsigned'|['big']]),
																   #<34>(8,1,'integer',['unsigned'|['big']])}#|[_cor15|[#{#<34>(8,1,'integer',['unsigned'|['big']]),
																							  #<62>(8,1,'integer',['unsigned'|['big']])}#|[#{#<10>(8,1,'integer',['unsigned'|['big']])}#|%% Line 374
																																		     [_cor17|%% Line 375
																																			     [#{#<32>(8,1,'integer',['unsigned'|['big']]),
																																				#<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<32>(8,1,'integer',['unsigned'|['big']]),
																																									       #<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<60>(8,1,'integer',['unsigned'|['big']]),
																																															      #<47>(8,1,'integer',['unsigned'|['big']]),
																																															      #<115>(8,1,'integer',['unsigned'|['big']]),
																																															      #<107>(8,1,'integer',['unsigned'|['big']]),
																																															      #<105>(8,1,'integer',['unsigned'|['big']]),
																																															      #<112>(8,1,'integer',['unsigned'|['big']]),
																																															      #<112>(8,1,'integer',['unsigned'|['big']]),
																																															      #<101>(8,1,'integer',['unsigned'|['big']]),
																																															      #<100>(8,1,'integer',['unsigned'|['big']]),
																																															      #<62>(8,1,'integer',['unsigned'|['big']])}#|[#{#<10>(8,1,'integer',['unsigned'|['big']])}#]]]]]]]]]]]
	  %% Line 376
	  <{'skipped',{Type,Term}}>
	      when call 'erlang':'is_atom'
		    (Type) ->
	      let <_cor18> =
		  %% Line 377
		  call 'erlang':'atom_to_list'
		      (Type)
	      in  let <_cor19> =
		      %% Line 377
		      apply 'escape_attr'/1
			  (_cor18)
		  in  let <_cor20> =
			  %% Line 378
			  call 'io_lib':'write'
			      (Term)
		      in  let <_cor21> =
			      %% Line 378
			      apply 'escape_text'/1
				  (_cor20)
			  in  %% Line 377
			      [#{#<32>(8,1,'integer',['unsigned'|['big']]),
				 #<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<32>(8,1,'integer',['unsigned'|['big']]),
										#<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<60>(8,1,'integer',['unsigned'|['big']]),
															       #<115>(8,1,'integer',['unsigned'|['big']]),
															       #<107>(8,1,'integer',['unsigned'|['big']]),
															       #<105>(8,1,'integer',['unsigned'|['big']]),
															       #<112>(8,1,'integer',['unsigned'|['big']]),
															       #<112>(8,1,'integer',['unsigned'|['big']]),
															       #<101>(8,1,'integer',['unsigned'|['big']]),
															       #<100>(8,1,'integer',['unsigned'|['big']]),
															       #<32>(8,1,'integer',['unsigned'|['big']]),
															       #<116>(8,1,'integer',['unsigned'|['big']]),
															       #<121>(8,1,'integer',['unsigned'|['big']]),
															       #<112>(8,1,'integer',['unsigned'|['big']]),
															       #<101>(8,1,'integer',['unsigned'|['big']]),
															       #<61>(8,1,'integer',['unsigned'|['big']]),
															       #<34>(8,1,'integer',['unsigned'|['big']])}#|[_cor19|[#{#<34>(8,1,'integer',['unsigned'|['big']]),
																						      #<62>(8,1,'integer',['unsigned'|['big']])}#|[#{#<10>(8,1,'integer',['unsigned'|['big']])}#|%% Line 378
																																		 [_cor21|%% Line 379
																																			 [#{#<32>(8,1,'integer',['unsigned'|['big']]),
																																			    #<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<32>(8,1,'integer',['unsigned'|['big']]),
																																									   #<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<60>(8,1,'integer',['unsigned'|['big']]),
																																															  #<47>(8,1,'integer',['unsigned'|['big']]),
																																															  #<115>(8,1,'integer',['unsigned'|['big']]),
																																															  #<107>(8,1,'integer',['unsigned'|['big']]),
																																															  #<105>(8,1,'integer',['unsigned'|['big']]),
																																															  #<112>(8,1,'integer',['unsigned'|['big']]),
																																															  #<112>(8,1,'integer',['unsigned'|['big']]),
																																															  #<101>(8,1,'integer',['unsigned'|['big']]),
																																															  #<100>(8,1,'integer',['unsigned'|['big']]),
																																															  #<62>(8,1,'integer',['unsigned'|['big']])}#|[#{#<10>(8,1,'integer',['unsigned'|['big']])}#]]]]]]]]]]]
	  %% Line 380
	  <{'skipped','timeout'}> when 'true' ->
	      %% Line 381
	      [#{#<32>(8,1,'integer',['unsigned'|['big']]),
		 #<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<32>(8,1,'integer',['unsigned'|['big']]),
								#<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<60>(8,1,'integer',['unsigned'|['big']]),
													       #<115>(8,1,'integer',['unsigned'|['big']]),
													       #<107>(8,1,'integer',['unsigned'|['big']]),
													       #<105>(8,1,'integer',['unsigned'|['big']]),
													       #<112>(8,1,'integer',['unsigned'|['big']]),
													       #<112>(8,1,'integer',['unsigned'|['big']]),
													       #<101>(8,1,'integer',['unsigned'|['big']]),
													       #<100>(8,1,'integer',['unsigned'|['big']]),
													       #<32>(8,1,'integer',['unsigned'|['big']]),
													       #<116>(8,1,'integer',['unsigned'|['big']]),
													       #<121>(8,1,'integer',['unsigned'|['big']]),
													       #<112>(8,1,'integer',['unsigned'|['big']]),
													       #<101>(8,1,'integer',['unsigned'|['big']]),
													       #<61>(8,1,'integer',['unsigned'|['big']]),
													       #<34>(8,1,'integer',['unsigned'|['big']]),
													       #<116>(8,1,'integer',['unsigned'|['big']]),
													       #<105>(8,1,'integer',['unsigned'|['big']]),
													       #<109>(8,1,'integer',['unsigned'|['big']]),
													       #<101>(8,1,'integer',['unsigned'|['big']]),
													       #<111>(8,1,'integer',['unsigned'|['big']]),
													       #<117>(8,1,'integer',['unsigned'|['big']]),
													       #<116>(8,1,'integer',['unsigned'|['big']]),
													       #<34>(8,1,'integer',['unsigned'|['big']]),
													       #<47>(8,1,'integer',['unsigned'|['big']]),
													       #<62>(8,1,'integer',['unsigned'|['big']])}#|[#{#<10>(8,1,'integer',['unsigned'|['big']])}#]]]]
	  %% Line 382
	  <{'skipped',Term}> when 'true' ->
	      let <_cor22> =
		  %% Line 384
		  call 'io_lib':'write'
		      (Term)
	      in  let <_cor23> =
		      %% Line 384
		      apply 'escape_text'/1
			  (_cor22)
		  in  %% Line 383
		      [#{#<32>(8,1,'integer',['unsigned'|['big']]),
			 #<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<32>(8,1,'integer',['unsigned'|['big']]),
									#<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<60>(8,1,'integer',['unsigned'|['big']]),
														       #<115>(8,1,'integer',['unsigned'|['big']]),
														       #<107>(8,1,'integer',['unsigned'|['big']]),
														       #<105>(8,1,'integer',['unsigned'|['big']]),
														       #<112>(8,1,'integer',['unsigned'|['big']]),
														       #<112>(8,1,'integer',['unsigned'|['big']]),
														       #<101>(8,1,'integer',['unsigned'|['big']]),
														       #<100>(8,1,'integer',['unsigned'|['big']]),
														       #<32>(8,1,'integer',['unsigned'|['big']]),
														       #<116>(8,1,'integer',['unsigned'|['big']]),
														       #<121>(8,1,'integer',['unsigned'|['big']]),
														       #<112>(8,1,'integer',['unsigned'|['big']]),
														       #<101>(8,1,'integer',['unsigned'|['big']]),
														       #<61>(8,1,'integer',['unsigned'|['big']]),
														       #<34>(8,1,'integer',['unsigned'|['big']]),
														       #<117>(8,1,'integer',['unsigned'|['big']]),
														       #<110>(8,1,'integer',['unsigned'|['big']]),
														       #<107>(8,1,'integer',['unsigned'|['big']]),
														       #<110>(8,1,'integer',['unsigned'|['big']]),
														       #<111>(8,1,'integer',['unsigned'|['big']]),
														       #<119>(8,1,'integer',['unsigned'|['big']]),
														       #<110>(8,1,'integer',['unsigned'|['big']]),
														       #<34>(8,1,'integer',['unsigned'|['big']]),
														       #<62>(8,1,'integer',['unsigned'|['big']])}#|[#{#<10>(8,1,'integer',['unsigned'|['big']])}#|%% Line 384
																										  [_cor23|%% Line 385
																											  [#{#<32>(8,1,'integer',['unsigned'|['big']]),
																											     #<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<32>(8,1,'integer',['unsigned'|['big']]),
																																	    #<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<60>(8,1,'integer',['unsigned'|['big']]),
																																							   #<47>(8,1,'integer',['unsigned'|['big']]),
																																							   #<115>(8,1,'integer',['unsigned'|['big']]),
																																							   #<107>(8,1,'integer',['unsigned'|['big']]),
																																							   #<105>(8,1,'integer',['unsigned'|['big']]),
																																							   #<112>(8,1,'integer',['unsigned'|['big']]),
																																							   #<112>(8,1,'integer',['unsigned'|['big']]),
																																							   #<101>(8,1,'integer',['unsigned'|['big']]),
																																							   #<100>(8,1,'integer',['unsigned'|['big']]),
																																							   #<62>(8,1,'integer',['unsigned'|['big']])}#|[#{#<10>(8,1,'integer',['unsigned'|['big']])}#]]]]]]]]]
	  ( <_cor24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24})
		  -| [{'function_name',{'format_testcase_result',1}}] )
	    -| ['compiler_generated'] )
	end
'format_testcase_output'/1 =
    %% Line 392
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 393
	    apply 'escape_text'/1
		(_cor0)
	in  %% Line 393
	    [#{#<32>(8,1,'integer',['unsigned'|['big']]),
	       #<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<32>(8,1,'integer',['unsigned'|['big']]),
							      #<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<60>(8,1,'integer',['unsigned'|['big']]),
													     #<115>(8,1,'integer',['unsigned'|['big']]),
													     #<121>(8,1,'integer',['unsigned'|['big']]),
													     #<115>(8,1,'integer',['unsigned'|['big']]),
													     #<116>(8,1,'integer',['unsigned'|['big']]),
													     #<101>(8,1,'integer',['unsigned'|['big']]),
													     #<109>(8,1,'integer',['unsigned'|['big']]),
													     #<45>(8,1,'integer',['unsigned'|['big']]),
													     #<111>(8,1,'integer',['unsigned'|['big']]),
													     #<117>(8,1,'integer',['unsigned'|['big']]),
													     #<116>(8,1,'integer',['unsigned'|['big']]),
													     #<62>(8,1,'integer',['unsigned'|['big']])}#|[_cor1|[#{#<10>(8,1,'integer',['unsigned'|['big']])}#|[#{#<32>(8,1,'integer',['unsigned'|['big']]),
																										  #<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<32>(8,1,'integer',['unsigned'|['big']]),
																																 #<32>(8,1,'integer',['unsigned'|['big']])}#|[#{#<60>(8,1,'integer',['unsigned'|['big']]),
																																						#<47>(8,1,'integer',['unsigned'|['big']]),
																																						#<115>(8,1,'integer',['unsigned'|['big']]),
																																						#<121>(8,1,'integer',['unsigned'|['big']]),
																																						#<115>(8,1,'integer',['unsigned'|['big']]),
																																						#<116>(8,1,'integer',['unsigned'|['big']]),
																																						#<101>(8,1,'integer',['unsigned'|['big']]),
																																						#<109>(8,1,'integer',['unsigned'|['big']]),
																																						#<45>(8,1,'integer',['unsigned'|['big']]),
																																						#<111>(8,1,'integer',['unsigned'|['big']]),
																																						#<117>(8,1,'integer',['unsigned'|['big']]),
																																						#<116>(8,1,'integer',['unsigned'|['big']]),
																																						#<62>(8,1,'integer',['unsigned'|['big']])}#|[#{#<10>(8,1,'integer',['unsigned'|['big']])}#]]]]]]]]]
'format_time'/1 =
    %% Line 398
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 399
	    call 'erlang':'integer_to_list'
		(_cor0)
	in  let <_cor2> =
		%% Line 399
		call 'lists':'reverse'
		    (_cor1)
	    in  %% Line 399
		apply 'format_time_s'/1
		    (_cor2)
'format_time_s'/1 =
    %% Line 400
    fun (_cor0) ->
	case _cor0 of
	  <[Digit|[]]> when 'true' ->
	      [[48|[46|[48|[48]]]]|[Digit|[]]]
	  %% Line 401
	  <[Digit1|[Digit2|[]]]> when 'true' ->
	      [[48|[46|[48]]]|[Digit2|[Digit1|[]]]]
	  %% Line 402
	  <[Digit1|[Digit2|[Digit3|[]]]]> when 'true' ->
	      [[48|[46]]|[Digit3|[Digit2|[Digit1|[]]]]]
	  %% Line 403
	  <[Digit1|[Digit2|[Digit3|Tail]]]> when 'true' ->
	      let <_cor1> =
		  call 'lists':'reverse'
		      (Tail)
	      in  [_cor1|[46|[Digit3|[Digit2|[Digit1|[]]]]]]
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'format_time_s',1}}] )
	    -| ['compiler_generated'] )
	end
'escape_suitename'/1 =
    %% Line 409
    fun (_cor0) ->
	case _cor0 of
	  <Binary>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 410
		  call 'erlang':'binary_to_list'
		      (Binary)
	      in  %% Line 410
		  apply 'escape_suitename'/1
		      (_cor1)
	  %% Line 411
	  <[109|[111|[100|[117|[108|[101|[32|[39|String]]]]]]]]> when 'true' ->
	      %% Line 412
	      apply 'escape_suitename'/1
		  (String)
	  %% Line 413
	  <String> when 'true' ->
	      %% Line 414
	      apply 'escape_suitename'/2
		  (String, [])
	end
'escape_suitename'/2 =
    %% Line 416
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Acc> when 'true' ->
	      call 'lists':'reverse'
		  (Acc)
	  %% Line 417
	  <[32|Tail],Acc> when 'true' ->
	      apply 'escape_suitename'/2
		  (Tail, [95|Acc])
	  %% Line 418
	  <[39|Tail],Acc> when 'true' ->
	      apply 'escape_suitename'/2
		  (Tail, Acc)
	  %% Line 419
	  <[47|Tail],Acc> when 'true' ->
	      apply 'escape_suitename'/2
		  (Tail, [58|Acc])
	  %% Line 420
	  <[92|Tail],Acc> when 'true' ->
	      apply 'escape_suitename'/2
		  (Tail, [58|Acc])
	  %% Line 421
	  <[Char|Tail],Acc>
	      when call 'erlang':'<'
		    (Char,
		     33) ->
	      apply 'escape_suitename'/2
		  (Tail, Acc)
	  %% Line 422
	  <[Char|Tail],Acc>
	      when call 'erlang':'>'
		    (Char,
		     126) ->
	      apply 'escape_suitename'/2
		  (Tail, Acc)
	  %% Line 423
	  <[Char|Tail],Acc> when 'true' ->
	      apply 'escape_suitename'/2
		  (Tail, [Char|Acc])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'escape_suitename',2}}] )
	    -| ['compiler_generated'] )
	end
'escape_text'/1 =
    %% Line 429
    fun (_cor0) ->
	case _cor0 of
	  <Text>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      let <_cor1> =
		  call 'erlang':'binary_to_list'
		      (Text)
	      in  apply 'escape_text'/1
		      (_cor1)
	  %% Line 430
	  <Text> when 'true' ->
	      let <_cor2> =
		  call 'lists':'flatten'
		      (Text)
	      in  apply 'escape_xml'/3
		      (_cor2, [], 'false')
	end
'escape_attr'/1 =
    %% Line 437
    fun (_cor0) ->
	case _cor0 of
	  <Text>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      let <_cor1> =
		  call 'erlang':'binary_to_list'
		      (Text)
	      in  apply 'escape_attr'/1
		      (_cor1)
	  %% Line 438
	  <Text> when 'true' ->
	      let <_cor2> =
		  call 'lists':'flatten'
		      (Text)
	      in  apply 'escape_xml'/3
		      (_cor2, [], 'true')
	end
'escape_xml'/3 =
    %% Line 440
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],Acc,_X_ForAttr> when 'true' ->
	      call 'lists':'reverse'
		  (Acc)
	  %% Line 441
	  <[60|Tail],Acc,ForAttr> when 'true' ->
	      apply 'escape_xml'/3
		  (Tail, [59|[116|[108|[38|Acc]]]], ForAttr)
	  %% Line 442
	  <[62|Tail],Acc,ForAttr> when 'true' ->
	      apply 'escape_xml'/3
		  (Tail, [59|[116|[103|[38|Acc]]]], ForAttr)
	  %% Line 443
	  <[38|Tail],Acc,ForAttr> when 'true' ->
	      apply 'escape_xml'/3
		  (Tail, [59|[112|[109|[97|[38|Acc]]]]], ForAttr)
	  %% Line 444
	  <[34|Tail],Acc,'true'> when 'true' ->
	      apply 'escape_xml'/3
		  (Tail, [59|[116|[111|[117|[113|[38|Acc]]]]]], 'true')
	  %% Line 445
	  <[Char|Tail],Acc,ForAttr>
	      when call 'erlang':'is_integer'
		    (Char) ->
	      apply 'escape_xml'/3
		  (Tail, [Char|Acc], ForAttr)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'escape_xml',3}}] )
	    -| ['compiler_generated'] )
	end
'test'/0 =
    fun () ->
	call 'eunit':'test'
	    ('eunit_surefire')
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('eunit_surefire')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('eunit_surefire', _cor0)
end