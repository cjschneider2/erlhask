module 'eunit_data' ['data_test_'/0,
		     'enter_context'/3,
		     'generator_exported_'/0,
		     'get_module_tests'/1,
		     'iter_id'/1,
		     'iter_init'/2,
		     'iter_next'/1,
		     'iter_prev'/1,
		     'lazy_test_'/0,
		     'module_info'/0,
		     'module_info'/1,
		     'test'/0,
		     'trivial_generator_test_'/0,
		     'trivial_test'/0]
    attributes [%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','test'},[{'record_field',28,{'atom',28,'f'},{'atom',28,'undefined'}}|[{'record_field',29,{'atom',29,'desc'},{'atom',29,'undefined'}}|[{'record_field',30,{'atom',30,'timeout'},{'atom',30,'undefined'}}|[{'record_field',31,{'atom',31,'location'},{'atom',31,'undefined'}}|[{'record_field',32,{'atom',32,'line'},{'integer',32,0}}]]]]],[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{{'record','group'},[{'record_field',35,{'atom',35,'desc'},{'atom',35,'undefined'}}|[{'record_field',36,{'atom',36,'order'},{'atom',36,'undefined'}}|[{'record_field',37,{'atom',37,'timeout'},{'atom',37,'undefined'}}|[{'record_field',38,{'atom',38,'context'},{'atom',38,'undefined'}}|[{'record_field',39,{'atom',39,'spawn'},{'atom',39,'undefined'}}|[{'record_field',40,{'atom',40,'tests'},{'atom',40,'undefined'}}]]]]]],[]}],
		%% Line 42
		'type' =
		    %% Line 42
		    [{{'record','context'},[{'record_field',42,{'atom',42,'setup'},{'atom',42,'undefined'}}|[{'record_field',43,{'atom',43,'cleanup'},{'atom',43,'undefined'}}|[{'record_field',44,{'atom',44,'process'},{'atom',44,'local'}}]]],[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{{'record','iter'},[{'record_field',110,{'atom',110,'prev'},{'nil',110}}|[{'record_field',111,{'atom',111,'next'},{'nil',111}}|[{'record_field',112,{'atom',112,'tests'},{'nil',112}}|[{'record_field',113,{'atom',113,'pos'},{'integer',113,0}}|[{'record_field',114,{'atom',114,'parent'},{'nil',114}}]]]]],[]}]]
'iter_init'/2 =
    %% Line 119
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 120
	    call 'lists':'reverse'
		(_cor0)
	in  %% Line 120
	    {'iter',[],[],_cor1,0,_cor2}
'iter_id'/1 =
    %% Line 124
    fun (_cor0) ->
	case _cor0 of
	  <{'iter',_cor2,_cor3,_cor4,N,Ns}> when 'true' ->
	      %% Line 125
	      call 'lists':'reverse'
		  (Ns, [N|[]])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'iter_id',1}}] )
	    -| ['compiler_generated'] )
	end
'iter_next'/1 =
    %% Line 129
    fun (_cor0) ->
	case _cor0 of
	  <I = {'iter',_cor23,[],_cor24,_cor25,_cor26}> when 'true' ->
	      %% Line 130
	      case apply 'next'/1
		       (_cor24) of
		%% Line 131
		<{T,Tests}> when 'true' ->
		    let <_rec1> =
			%% Line 132
			[T|_cor23]
		    in  let <_rec2> =
			    %% Line 134
			    call 'erlang':'+'
				(_cor25, 1)
			in  let <_cor11> =
				%% Line 134
				{'iter',_rec1,[],Tests,_rec2,_cor26}
			    in  %% Line 132
				{T,_cor11}
		%% Line 135
		<'none'> when 'true' ->
		    %% Line 136
		    'none'
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 138
	  <I = {'iter',_cor43,[T|Ts],_cor44,_cor45,_cor46}> when 'true' ->
	      let <_rec11> =
		  %% Line 140
		  [T|_cor43]
	      in  let <_rec12> =
		      %% Line 141
		      call 'erlang':'+'
			  (_cor45, 1)
		  in  let <_cor21> =
			  %% Line 141
			  {'iter',_rec11,Ts,_cor44,_rec12,_cor46}
		      in  %% Line 139
			  {T,_cor21}
	  ( <_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22})
		  -| [{'function_name',{'iter_next',1}}] )
	    -| ['compiler_generated'] )
	end
'iter_prev'/1 =
    %% Line 145
    fun (_cor0) ->
	case _cor0 of
	  <{'iter',[],_cor11,_cor12,_cor13,_cor14}> when 'true' ->
	      %% Line 146
	      'none'
	  %% Line 147
	  <I = {'iter',[T|Ts],_cor15,_cor16,_cor17,_cor18}> when 'true' ->
	      let <_rec21> =
		  %% Line 149
		  [T|_cor15]
	      in  let <_rec22> =
		      %% Line 150
		      call 'erlang':'-'
			  (_cor17, 1)
		  in  let <_cor9> =
			  %% Line 150
			  {'iter',Ts,_rec21,_cor16,_rec22,_cor18}
		      in  %% Line 148
			  {T,_cor9}
	  ( <_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10})
		  -| [{'function_name',{'iter_prev',1}}] )
	    -| ['compiler_generated'] )
	end
'next'/1 =
    %% Line 167
    fun (_cor0) ->
	%% Line 168
	case call 'eunit_lib':'dlist_next'
		 (_cor0) of
	  %% Line 169
	  <[T|Ts]> when 'true' ->
	      %% Line 170
	      case apply 'parse'/1
		       (T) of
		%% Line 171
		<{'data',T1}> when 'true' ->
		    %% Line 172
		    apply 'next'/1
			([T1|Ts])
		%% Line 173
		<T1> when 'true' ->
		    %% Line 174
		    {T1,Ts}
	      end
	  %% Line 176
	  <[]> when 'true' ->
	      %% Line 177
	      'none'
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'parse'/1 =
    %% Line 183
    fun (_cor0) ->
	case _cor0 of
	  <{'foreach',S,Fs}>
	      when try
		    let <_cor1> =
			call 'erlang':'is_function'
			    (S)
		    in  let <_cor2> =
			    call 'erlang':'is_list'
				(Fs)
			in  call 'erlang':'and'
				(_cor1, _cor2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 184
	      apply 'parse'/1
		  ({'foreach',S,( 'ok'/1
				  -| [{'id',{0,0,'-parse/1-fun-0-'}}] ),Fs})
	  %% Line 185
	  <{'foreach',S,C,Fs}>
	      when %% Line 186
		try
		    let <_cor3> =
			call 'erlang':'is_function'
			    (S)
		    in  let <_cor4> =
			    call 'erlang':'is_function'
				(C)
			in  let <_cor5> =
				call 'erlang':'is_list'
				    (Fs)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 187
	      apply 'parse'/1
		  ({'foreach','spawn',S,C,Fs})
	  %% Line 188
	  <{'foreach',P,S,Fs}>
	      when %% Line 189
		try
		    let <_cor7> =
			call 'erlang':'is_function'
			    (S)
		    in  let <_cor8> =
			    call 'erlang':'is_list'
				(Fs)
			in  call 'erlang':'and'
				(_cor7, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 190
	      apply 'parse'/1
		  ({'foreach',P,S,( 'ok'/1
				    -| [{'id',{0,0,'-parse/1-fun-1-'}}] ),Fs})
	  %% Line 191
	  <T = {'foreach',P,S,C,Fs}>
	      when %% Line 192
		try
		    let <_cor9> =
			call 'erlang':'is_function'
			    (S)
		    in  let <_cor10> =
			    call 'erlang':'is_function'
				(C)
			in  let <_cor11> =
				call 'erlang':'is_list'
				    (Fs)
			    in  let <_cor12> =
				    call 'erlang':'and'
					(_cor10, _cor11)
				in  call 'erlang':'and'
					(_cor9, _cor12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 193
		  apply 'check_arity'/3
		      (S, 0, T)
		  do  %% Line 194
		      apply 'check_arity'/3
			  (C, 1, T)
		      %% Line 195
		      case Fs of
			%% Line 196
			<[F|Fs1]> when 'true' ->
			    %% Line 197
			    {'data',[{'setup',P,S,C,F}|[{'foreach',P,S,C,Fs1}|[]]]}
			%% Line 198
			<[]> when 'true' ->
			    %% Line 199
			    {'data',[]}
			( <_cor13> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor13})
			  -| ['compiler_generated'] )
		      end
	  %% Line 201
	  <{'foreachx',S1,Ps}>
	      when try
		    let <_cor14> =
			call 'erlang':'is_function'
			    (S1)
		    in  let <_cor15> =
			    call 'erlang':'is_list'
				(Ps)
			in  call 'erlang':'and'
				(_cor14, _cor15)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 202
	      apply 'parse'/1
		  ({'foreachx',S1,( 'ok'/2
				    -| [{'id',{0,0,'-parse/1-fun-2-'}}] ),Ps})
	  %% Line 203
	  <{'foreachx',S1,C1,Ps}>
	      when %% Line 204
		try
		    let <_cor16> =
			call 'erlang':'is_function'
			    (S1)
		    in  let <_cor17> =
			    call 'erlang':'is_function'
				(C1)
			in  let <_cor18> =
				call 'erlang':'is_list'
				    (Ps)
			    in  let <_cor19> =
				    call 'erlang':'and'
					(_cor17, _cor18)
				in  call 'erlang':'and'
					(_cor16, _cor19)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 205
	      apply 'parse'/1
		  ({'foreachx','spawn',S1,C1,Ps})
	  %% Line 206
	  <{'foreachx',P,S1,Ps}>
	      when %% Line 207
		try
		    let <_cor20> =
			call 'erlang':'is_function'
			    (S1)
		    in  let <_cor21> =
			    call 'erlang':'is_list'
				(Ps)
			in  call 'erlang':'and'
				(_cor20, _cor21)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 208
	      apply 'parse'/1
		  ({'foreachx',P,S1,( 'ok'/2
				      -| [{'id',{0,0,'-parse/1-fun-3-'}}] ),Ps})
	  %% Line 209
	  <T = {'foreachx',P,S1,C1,Ps}>
	      when %% Line 210
		try
		    let <_cor22> =
			call 'erlang':'is_function'
			    (S1)
		    in  let <_cor23> =
			    call 'erlang':'is_function'
				(C1)
			in  let <_cor24> =
				call 'erlang':'is_list'
				    (Ps)
			    in  let <_cor25> =
				    call 'erlang':'and'
					(_cor23, _cor24)
				in  call 'erlang':'and'
					(_cor22, _cor25)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 211
		  apply 'check_arity'/3
		      (S1, 1, T)
		  do  %% Line 212
		      apply 'check_arity'/3
			  (C1, 2, T)
		      %% Line 213
		      case Ps of
			%% Line 214
			<[{X,F1}|Ps1]>
			    when call 'erlang':'is_function'
				  (F1) ->
			    do  %% Line 215
				apply 'check_arity'/3
				    (F1, 2, T)
				let <S> =
				    %% Line 216
				    ( fun () ->
					  apply S1
					      (X)
				      -| [{'id',{0,0,'-parse/1-fun-4-'}}] )
				in  let <C> =
					%% Line 217
					( fun (_cor27) ->
					      apply C1
						  (X, _cor27)
					  -| [{'id',{0,0,'-parse/1-fun-5-'}}] )
				    in  let <F> =
					    %% Line 218
					    ( fun (_cor30) ->
						  apply F1
						      (X, _cor30)
					      -| [{'id',{0,0,'-parse/1-fun-6-'}}] )
					in  %% Line 219
					    {'data',[{'setup',P,S,C,F}|[{'foreachx',P,S1,C1,Ps1}|[]]]}
			%% Line 220
			<[_cor146|_cor147]> when 'true' ->
			    %% Line 221
			    apply 'bad_test'/1
				(T)
			%% Line 222
			<[]> when 'true' ->
			    %% Line 223
			    {'data',[]}
			( <_cor33> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor33})
			  -| ['compiler_generated'] )
		      end
	  %% Line 225
	  <{'generator',F}>
	      when call 'erlang':'is_function'
		    (F) ->
	      %% Line 226
	      case call 'erlang':'fun_info'
		       (F, 'module') of
		<{'module',M}> when 'true' ->
		    %% Line 227
		    case call 'erlang':'fun_info'
			     (F, 'name') of
		      <{'name',N}> when 'true' ->
			  %% Line 228
			  case call 'erlang':'fun_info'
				   (F, 'arity') of
			    <{'arity',A}> when 'true' ->
				%% Line 229
				apply 'parse'/1
				    ({'generator',F,{M,N,A}})
			    ( <_cor36> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor36})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor35> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor35})
			-| ['compiler_generated'] )
		    end
		( <_cor34> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor34})
		  -| ['compiler_generated'] )
	      end
	  %% Line 230
	  <T = {'generator',F,{M,N,A}}>
	      when %% Line 231
		try
		    let <_cor37> =
			call 'erlang':'is_function'
			    (F)
		    in  let <_cor38> =
			    call 'erlang':'is_atom'
				(M)
			in  let <_cor39> =
				call 'erlang':'is_atom'
				    (N)
			    in  let <_cor40> =
				    call 'erlang':'is_integer'
					(A)
				in  let <_cor41> =
					call 'erlang':'and'
					    (_cor39, _cor40)
				    in  let <_cor42> =
					    call 'erlang':'and'
						(_cor38, _cor41)
					in  call 'erlang':'and'
						(_cor37, _cor42)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 232
		  apply 'check_arity'/3
		      (F, 0, T)
		  %% Line 234
		  case call 'eunit_test':'run_testfun'
			   (F) of
		    %% Line 235
		    <{'ok',T1}> when 'true' ->
			do  %% Line 236
			    case call 'eunit_lib':'is_not_test'
				     (T1) of
			      %% Line 237
			      <'true'> when 'true' ->
				  call 'erlang':'throw'
				      ({'bad_generator',{{M,N,A},T1}})
			      %% Line 238
			      <'false'> when 'true' ->
				  'ok'
			      ( <_cor43> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor43})
				-| ['compiler_generated'] )
			    end
			    %% Line 240
			    {'data',T1}
		    %% Line 241
		    <{'error',{Class,Reason,Trace}}> when 'true' ->
			%% Line 242
			call 'erlang':'throw'
			    ({'generator_failed',{{M,N,A},{Class,Reason,Trace}}})
		    ( <_cor44> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor44})
		      -| ['compiler_generated'] )
		  end
	  %% Line 244
	  <{'generator',M,F}>
	      when let <_cor45> =
		    call 'erlang':'is_atom'
			(M)
		in  let <_cor46> =
			call 'erlang':'is_atom'
			    (F)
		    in  call 'erlang':'and'
			    (_cor45, _cor46) ->
	      let <_cor47> =
		  %% Line 245
		  call 'eunit_test':'mf_wrapper'
		      (M, F)
	      in  %% Line 245
		  apply 'parse'/1
		      ({'generator',_cor47,{M,F,0}})
	  %% Line 246
	  <{'inorder',T}> when 'true' ->
	      %% Line 247
	      apply 'group'/1
		  ({'group','undefined','inorder','undefined','undefined','undefined',T})
	  %% Line 248
	  <{'inparallel',T}> when 'true' ->
	      %% Line 249
	      apply 'parse'/1
		  ({'inparallel',0,T})
	  %% Line 250
	  <{'inparallel',N,T}>
	      when let <_cor48> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_cor49> =
			call 'erlang':'>='
			    (N, 0)
		    in  call 'erlang':'and'
			    (_cor48, _cor49) ->
	      %% Line 251
	      apply 'group'/1
		  ({'group','undefined',{'inparallel',N},'undefined','undefined','undefined',T})
	  %% Line 252
	  <{'timeout',N,T}>
	      when let <_cor50> =
		    call 'erlang':'is_number'
			(N)
		in  let <_cor51> =
			call 'erlang':'>='
			    (N, 0)
		    in  call 'erlang':'and'
			    (_cor50, _cor51) ->
	      let <_cor52> =
		  %% Line 253
		  call 'erlang':'*'
		      (N, 1000)
	      in  let <_cor53> =
		      %% Line 253
		      call 'erlang':'round'
			  (_cor52)
		  in  %% Line 253
		      apply 'group'/1
			  ({'group','undefined','undefined',_cor53,'undefined','undefined',T})
	  %% Line 254
	  <{'spawn',T}> when 'true' ->
	      %% Line 255
	      apply 'group'/1
		  ({'group','undefined','undefined','undefined','undefined','local',T})
	  %% Line 256
	  <{'spawn',N,T}>
	      when call 'erlang':'is_atom'
		    (N) ->
	      %% Line 257
	      apply 'group'/1
		  ({'group','undefined','undefined','undefined','undefined',{'remote',N},T})
	  %% Line 258
	  <{'setup',S,I}>
	      when let <_cor54> =
		    call 'erlang':'is_function'
			(S)
		in  let <_cor55> =
			call 'erlang':'is_list'
			    (S)
		    in  call 'erlang':'or'
			    (_cor54, _cor55) ->
	      %% Line 259
	      apply 'parse'/1
		  ({'setup','spawn',S,I})
	  %% Line 260
	  <{'setup',S,C,I}>
	      when try
		    let <_cor56> =
			call 'erlang':'is_function'
			    (S)
		    in  let <_cor57> =
			    call 'erlang':'is_function'
				(C)
			in  call 'erlang':'and'
				(_cor56, _cor57)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 261
	      apply 'parse'/1
		  ({'setup','spawn',S,C,I})
	  %% Line 262
	  <{'setup',P,S,I}>
	      when call 'erlang':'is_function'
		    (S) ->
	      %% Line 263
	      apply 'parse'/1
		  ({'setup',P,S,( 'ok'/1
				  -| [{'id',{0,0,'-parse/1-fun-7-'}}] ),I})
	  %% Line 264
	  <T = {'setup',P,L,I}>
	      when call 'erlang':'is_list'
		    (L) ->
	      do  %% Line 265
		  apply 'check_setup_list'/2
		      (L, T)
		  %% Line 266
		  case call 'eunit_test':'multi_setup'
			   (L) of
		    <{S,C}> when 'true' ->
			%% Line 267
			apply 'parse'/1
			    ({'setup',P,S,C,I})
		    ( <_cor58> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor58})
		      -| ['compiler_generated'] )
		  end
	  %% Line 268
	  <T = {'setup',P,S,C,I}>
	      when %% Line 269
		try
		    let <_cor59> =
			call 'erlang':'is_function'
			    (S)
		    in  let <_cor60> =
			    call 'erlang':'is_function'
				(C)
			in  let <_cor61> =
				call 'erlang':'is_function'
				    (I)
			    in  let <_cor62> =
				    call 'erlang':'and'
					(_cor60, _cor61)
				in  call 'erlang':'and'
					(_cor59, _cor62)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 270
		  apply 'check_arity'/3
		      (S, 0, T)
		  do  %% Line 271
		      apply 'check_arity'/3
			  (C, 1, T)
		      %% Line 272
		      case call 'erlang':'fun_info'
			       (I, 'arity') of
			%% Line 273
			<{'arity',0}> when 'true' ->
			    let <_cor65> =
				%% Line 275
				( fun (_cor63) ->
				      I
				  -| [{'id',{0,0,'-parse/1-fun-8-'}}] )
			    in  %% Line 275
				apply 'parse'/1
				    ({'setup',S,C,_cor65})
			%% Line 276
			<_cor149> when 'true' ->
			    do  %% Line 278
				apply 'check_arity'/3
				    (I, 1, T)
				do  %% Line 279
				    case P of
				      %% Line 280
				      <'local'> when 'true' ->
					  'ok'
				      %% Line 281
				      <'spawn'> when 'true' ->
					  'ok'
				      %% Line 282
				      <{'spawn',N}>
					  when call 'erlang':'is_atom'
						(N) ->
					  'ok'
				      %% Line 283
				      <_cor150> when 'true' ->
					  apply 'bad_test'/1
					      (T)
				    end
				    %% Line 285
				    apply 'group'/1
					({'group','undefined','undefined','undefined',%% Line 286
										      {'context',S,C,%% Line 287
												     P},'undefined',I})
		      end
	  %% Line 289
	  <{'setup',P,S,C,{'with',As}}>
	      when call 'erlang':'is_list'
		    (As) ->
	      let <_cor70> =
		  %% Line 290
		  ( fun (_cor68) ->
			{'with',_cor68,As}
		    -| [{'id',{0,0,'-parse/1-fun-9-'}}] )
	      in  %% Line 290
		  apply 'parse'/1
		      ({'setup',P,S,C,_cor70})
	  %% Line 291
	  <{'setup',P,S,C,T}>
	      when try
		    let <_cor71> =
			call 'erlang':'is_function'
			    (S)
		    in  let <_cor72> =
			    call 'erlang':'is_function'
				(C)
			in  call 'erlang':'and'
				(_cor71, _cor72)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor75> =
		  %% Line 292
		  ( fun (_cor73) ->
			T
		    -| [{'id',{0,0,'-parse/1-fun-10-'}}] )
	      in  %% Line 292
		  apply 'parse'/1
		      ({'setup',P,S,C,_cor75})
	  %% Line 293
	  <{'node',N,T}>
	      when call 'erlang':'is_atom'
		    (N) ->
	      %% Line 294
	      apply 'parse'/1
		  ({'node',N,[],T})
	  %% Line 295
	  <T = {'node',N,A,T1}>
	      when call 'erlang':'is_atom'
		    (N) ->
	      %% Line 296
	      case call 'eunit_lib':'is_string'
		       (A) of
		%% Line 297
		<'true'> when 'true' ->
		    let <_cor83> =
			%% Line 300
			( fun () ->
			      %% Line 319
			      case call 'eunit_lib':'split_node'
				       (N) of
				<{Name,Host}> when 'true' ->
				    %% Line 320
				    case call 'slave':'start_link'
					     (Host, Name, A) of
				      <{'ok',Node}> when 'true' ->
					  %% Line 321
					  {Node,'false'}
				      ( <_cor82> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor82})
					-| ['compiler_generated'] )
				    end
				( <_cor81> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor81})
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-parse/1-fun-11-'}}] )
		    in  let <_cor79> =
			    %% Line 323
			    ( fun (_cor77) ->
				  case _cor77 of
				    <{Node,StopNet}> when 'true' ->
					do  %% Line 325
					    call 'slave':'stop'
						(Node)
					    %% Line 326
					    case StopNet of
					      %% Line 327
					      <'true'> when 'true' ->
						  call 'net_kernel':'stop'
						      ()
					      %% Line 328
					      <'false'> when 'true' ->
						  'ok'
					      ( <_cor76> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor76})
						-| ['compiler_generated'] )
					    end
				    ( <_cor78> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor78})
					    -| [{'function_name',{'-parse/1-fun-12-',1}}] )
				      -| ['compiler_generated'] )
				  end
			      -| [{'id',{0,0,'-parse/1-fun-12-'}}] )
			in  %% Line 299
			    apply 'parse'/1
				({'setup',_cor83,_cor79,%% Line 331
							T1})
		%% Line 332
		<'false'> when 'true' ->
		    %% Line 333
		    apply 'bad_test'/1
			(T)
		( <_cor84> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor84})
		  -| ['compiler_generated'] )
	      end
	  %% Line 335
	  <{'module',M}>
	      when call 'erlang':'is_atom'
		    (M) ->
	      let <_cor86> =
		  %% Line 336
		  call 'erlang':'atom_to_list'
		      (M)
	      in  let <_cor87> =
		      %% Line 336
		      call 'erlang':'++'
			  (_cor86, [39])
		  in  let <_cor88> =
			  %% Line 336
			  call 'erlang':'++'
			      ([109|[111|[100|[117|[108|[101|[32|[39]]]]]]]], _cor87)
		      in  let <_cor85> =
			      %% Line 336
			      apply 'get_module_tests'/1
				  (M)
			  in  %% Line 336
			      {'data',{_cor88,_cor85}}
	  %% Line 337
	  <{'application',A}>
	      when call 'erlang':'is_atom'
		    (A) ->
	      %% Line 338
	      try
		  let <_cor89> =
		      call 'erlang':'atom_to_list'
			  (A)
		  in  let <_cor90> =
			  call 'erlang':'++'
			      (_cor89, [46|[97|[112|[112]]]])
		      in  apply 'parse'/1
			      ({'file',_cor90})
	      of <_cor91> ->
		  _cor91
	      catch <_cor94,_cor93,_cor92> ->
		  case <_cor94,_cor93,_cor92> of
		    %% Line 340
		    <'throw',{'file_read_error',{'enoent',_cor152,_cor153}},_cor154> when 'true' ->
			%% Line 341
			case call 'code':'lib_dir'
				 (A) of
			  %% Line 342
			  <Dir>
			      when call 'erlang':'is_list'
				    (Dir) ->
			      let <BinDir> =
				  %% Line 344
				  call 'filename':'join'
				      (Dir, [101|[98|[105|[110]]]])
			      in  %% Line 345
				  case call 'file':'read_file_info'
					   (BinDir) of
				    %% Line 346
				    <{'ok',{'file_info',_cor155,'directory',_cor156,_cor157,_cor158,_cor159,_cor160,_cor161,_cor162,_cor163,_cor164,_cor165,_cor166}}> when 'true' ->
					%% Line 347
					apply 'parse'/1
					    ({'dir',BinDir})
				    %% Line 348
				    <_cor167> when 'true' ->
					%% Line 349
					apply 'parse'/1
					    ({'dir',Dir})
				  end
			  %% Line 351
			  <_cor168> when 'true' ->
			      %% Line 352
			      call 'erlang':'throw'
				  ({'application_not_found',A})
			end
		    ( <_cor94,_cor93,_cor92> when 'true' ->
			  primop 'raise'
			      (_cor92, _cor93)
		      -| ['compiler_generated'] )
		  end
	  %% Line 355
	  <T = {'application',A,Info}>
	      when call 'erlang':'is_atom'
		    (A) ->
	      %% Line 356
	      case call 'proplists':'get_value'
		       ('modules', Info) of
		%% Line 357
		<Ms>
		    when call 'erlang':'is_list'
			  (Ms) ->
		    let <_cor103> =
			%% Line 358
			( letrec
			      'lc$^0'/1 =
				  fun (_cor101) ->
				      case _cor101 of
					<[M|_cor99]>
					    when let <_cor100> =
						  call 'erlang':'is_atom'
						      (M)
					      in  call 'erlang':'not'
						      (_cor100) ->
					    let <_cor102> =
						apply 'lc$^0'/1
						    (_cor99)
					    in  ( [M|_cor102]
						  -| ['compiler_generated'] )
					( <[M|_cor99]> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor99)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor101> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor101})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (Ms)
			  -| ['list_comprehension'] )
		    in  %% Line 358
			case _cor103 of
			  %% Line 359
			  <[]> when 'true' ->
			      let <_cor104> =
				  %% Line 360
				  call 'erlang':'atom_to_list'
				      (A)
			      in  let <_cor105> =
				      %% Line 360
				      call 'erlang':'++'
					  (_cor104, [39])
				  in  let <_cor106> =
					  %% Line 360
					  call 'erlang':'++'
					      ([97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[39]]]]]]]]]]]]], _cor105)
				      in  %% Line 360
					  {'data',{_cor106,Ms}}
			  %% Line 361
			  <_cor169> when 'true' ->
			      %% Line 362
			      apply 'bad_test'/1
				  (T)
			end
		%% Line 364
		<_cor170> when 'true' ->
		    %% Line 365
		    apply 'bad_test'/1
			(T)
	      end
	  %% Line 367
	  <T = {'file',F}>
	      when call 'erlang':'is_list'
		    (F) ->
	      %% Line 368
	      case call 'eunit_lib':'is_string'
		       (F) of
		%% Line 369
		<'true'> when 'true' ->
		    let <_cor110> =
			%% Line 370
			call 'erlang':'++'
			    (F, [34])
		    in  let <_cor111> =
			    %% Line 370
			    call 'erlang':'++'
				([102|[105|[108|[101|[32|[34]]]]]], _cor110)
			in  let <_cor109> =
				%% Line 370
				apply 'get_file_tests'/1
				    (F)
			    in  %% Line 370
				{'data',{_cor111,_cor109}}
		%% Line 371
		<'false'> when 'true' ->
		    %% Line 372
		    apply 'bad_test'/1
			(T)
		( <_cor112> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor112})
		  -| ['compiler_generated'] )
	      end
	  %% Line 374
	  <T = {'dir',D}>
	      when call 'erlang':'is_list'
		    (D) ->
	      %% Line 375
	      case call 'eunit_lib':'is_string'
		       (D) of
		%% Line 376
		<'true'> when 'true' ->
		    let <_cor114> =
			%% Line 377
			call 'erlang':'++'
			    (D, [34])
		    in  let <_cor115> =
			    %% Line 377
			    call 'erlang':'++'
				([100|[105|[114|[101|[99|[116|[111|[114|[121|[32|[34]]]]]]]]]]], _cor114)
			in  let <_cor113> =
				%% Line 378
				apply 'get_directory_module_tests'/1
				    (D)
			    in  %% Line 377
				{'data',{_cor115,_cor113}}
		%% Line 379
		<'false'> when 'true' ->
		    %% Line 380
		    apply 'bad_test'/1
			(T)
		( <_cor116> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor116})
		  -| ['compiler_generated'] )
	      end
	  %% Line 382
	  <T = {'with',X,As}>
	      when call 'erlang':'is_list'
		    (As) ->
	      %% Line 383
	      case As of
		%% Line 384
		<[A|As1]> when 'true' ->
		    do  %% Line 385
			apply 'check_arity'/3
			    (A, 1, T)
			let <_cor118> =
			    %% Line 386
			    call 'eunit_lib':'fun_parent'
				(A)
			in  let <_cor117> =
				%% Line 386
				( fun () ->
				      apply A
					  (X)
				  -| [{'id',{0,0,'-parse/1-fun-13-'}}] )
			    in  %% Line 386
				{'data',[{_cor118,_cor117}|%% Line 387
							   [{'with',X,As1}|[]]]}
		%% Line 388
		<[]> when 'true' ->
		    %% Line 389
		    {'data',[]}
		( <_cor119> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor119})
		  -| ['compiler_generated'] )
	      end
	  %% Line 391
	  <T = {S,T1}>
	      when call 'erlang':'is_list'
		    (S) ->
	      %% Line 392
	      case call 'eunit_lib':'is_string'
		       (S) of
		%% Line 393
		<'true'> when 'true' ->
		    let <_cor120> =
			%% Line 394
			call 'erlang':'list_to_binary'
			    (S)
		    in  %% Line 394
			apply 'group'/1
			    ({'group',_cor120,'undefined','undefined','undefined','undefined',T1})
		%% Line 395
		<'false'> when 'true' ->
		    %% Line 396
		    apply 'bad_test'/1
			(T)
		( <_cor121> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor121})
		  -| ['compiler_generated'] )
	      end
	  %% Line 398
	  <{S,T1}>
	      when call 'erlang':'is_binary'
		    (S) ->
	      %% Line 399
	      apply 'group'/1
		  ({'group',S,'undefined','undefined','undefined','undefined',T1})
	  %% Line 400
	  <T>
	      when try
		    let <_cor122> =
			call 'erlang':'is_tuple'
			    (_cor0)
		    in  let <_cor123> =
			    call 'erlang':'size'
				(_cor0)
			in  let <_cor124> =
				call 'erlang':'>'
				    (_cor123, 2)
			    in  let <_cor125> =
				    call 'erlang':'element'
					(1, _cor0)
				in  let <_cor126> =
					call 'erlang':'is_list'
					    (_cor125)
				    in  let <_cor127> =
					    call 'erlang':'and'
						(_cor124, _cor126)
					in  call 'erlang':'and'
						(_cor122, _cor127)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 401
	      case call 'erlang':'tuple_to_list'
		       (T) of
		<[S|Es]> when 'true' ->
		    let <_cor129> =
			%% Line 402
			call 'erlang':'list_to_tuple'
			    (Es)
		    in  %% Line 402
			apply 'parse'/1
			    ({S,_cor129})
		( <_cor128> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor128})
		  -| ['compiler_generated'] )
	      end
	  %% Line 403
	  <T>
	      when try
		    let <_cor130> =
			call 'erlang':'is_tuple'
			    (_cor0)
		    in  let <_cor131> =
			    call 'erlang':'size'
				(_cor0)
			in  let <_cor132> =
				call 'erlang':'>'
				    (_cor131, 2)
			    in  let <_cor133> =
				    call 'erlang':'element'
					(1, _cor0)
				in  let <_cor134> =
					call 'erlang':'is_binary'
					    (_cor133)
				    in  let <_cor135> =
					    call 'erlang':'and'
						(_cor132, _cor134)
					in  call 'erlang':'and'
						(_cor130, _cor135)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 404
	      case call 'erlang':'tuple_to_list'
		       (T) of
		<[S|Es]> when 'true' ->
		    let <_cor137> =
			%% Line 405
			call 'erlang':'list_to_tuple'
			    (Es)
		    in  %% Line 405
			apply 'parse'/1
			    ({S,_cor137})
		( <_cor136> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor136})
		  -| ['compiler_generated'] )
	      end
	  %% Line 406
	  <M>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 407
	      apply 'parse'/1
		  ({'module',M})
	  %% Line 408
	  <T>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 409
	      case call 'eunit_lib':'is_string'
		       (T) of
		%% Line 410
		<'true'> when 'true' ->
		    %% Line 411
		    try
			apply 'parse'/1
			    ({'dir',T})
		    of <_cor138> ->
			_cor138
		    catch <_cor141,_cor140,_cor139> ->
			case <_cor141,_cor140,_cor139> of
			  %% Line 413
			  <'throw',{'file_read_error',{R,_cor171,_cor172}},_cor173>
			      when let <_cor142> =
				    %% Line 414
				    call 'erlang':'=:='
					(R, 'enotdir')
				in  let <_cor143> =
					%% Line 414
					call 'erlang':'=:='
					    (R, 'enoent')
				    in  %% Line 414
					call 'erlang':'or'
					    (_cor142, _cor143) ->
			      %% Line 415
			      apply 'parse'/1
				  ({'file',T})
			  ( <_cor141,_cor140,_cor139> when 'true' ->
				primop 'raise'
				    (_cor139, _cor140)
			    -| ['compiler_generated'] )
			end
		%% Line 417
		<'false'> when 'true' ->
		    %% Line 418
		    apply 'bad_test'/1
			(T)
		( <_cor144> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor144})
		  -| ['compiler_generated'] )
	      end
	  %% Line 420
	  <T> when 'true' ->
	      %% Line 421
	      apply 'parse_simple'/1
		  (T)
	end
'parse_simple'/1 =
    %% Line 425
    fun (_cor0) ->
	case _cor0 of
	  <{L,F}>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(L)
		in  let <_cor2> =
			call 'erlang':'>='
			    (L, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      let <_rec31> =
		  %% Line 426
		  apply 'parse_simple'/1
		      (F)
	      in  %% Line 426
		  case _rec31 of
		    <{'test',_cor12,_cor13,_cor14,_cor15,_cor16}> when 'true' ->
			call 'erlang':'setelement'
			    (6, _rec31, L)
		    ( <_cor17> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','test'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 427
	  <{Loc = {M,N,A},F}>
	      when try
		    let <_cor5> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor6> =
			    call 'erlang':'is_atom'
				(N)
			in  let <_cor7> =
				call 'erlang':'is_integer'
				    (A)
			    in  let <_cor8> =
				    call 'erlang':'and'
					(_cor6, _cor7)
				in  call 'erlang':'and'
					(_cor5, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_rec32> =
		  %% Line 428
		  apply 'parse_simple'/1
		      (F)
	      in  %% Line 428
		  case _rec32 of
		    <{'test',_cor18,_cor19,_cor20,_cor21,_cor22}> when 'true' ->
			call 'erlang':'setelement'
			    (5, _rec32, Loc)
		    ( <_cor23> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','test'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 429
	  <F> when 'true' ->
	      %% Line 430
	      apply 'parse_function'/1
		  (F)
	end
'parse_function'/1 =
    %% Line 432
    fun (_cor0) ->
	case _cor0 of
	  <F>
	      when call 'erlang':'is_function'
		    (_cor0) ->
	      do  %% Line 433
		  apply 'check_arity'/3
		      (F, 0, F)
		  let <_cor1> =
		      %% Line 434
		      call 'eunit_lib':'fun_parent'
			  (F)
		  in  %% Line 434
		      {'test',F,'undefined','undefined',_cor1,0}
	  %% Line 435
	  <{'test',M,F}>
	      when let <_cor2> =
		    call 'erlang':'is_atom'
			(M)
		in  let <_cor3> =
			call 'erlang':'is_atom'
			    (F)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor4> =
		  %% Line 436
		  call 'eunit_test':'mf_wrapper'
		      (M, F)
	      in  %% Line 436
		  {'test',_cor4,'undefined','undefined',{M,F,0},0}
	  %% Line 437
	  <{M,F}>
	      when let <_cor5> =
		    call 'erlang':'is_atom'
			(M)
		in  let <_cor6> =
			call 'erlang':'is_atom'
			    (F)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      %% Line 439
	      apply 'parse_function'/1
		  ({'test',M,F})
	  %% Line 440
	  <F> when 'true' ->
	      %% Line 441
	      apply 'bad_test'/1
		  (F)
	end
'check_arity'/3 =
    %% Line 443
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F,N,T>
	      when call 'erlang':'is_function'
		    (F) ->
	      %% Line 444
	      case call 'erlang':'fun_info'
		       (F, 'arity') of
		%% Line 445
		<{'arity',_cor7}>
		    when call 'erlang':'=:='
			  (_cor7,
			   N) ->
		    %% Line 446
		    'ok'
		%% Line 447
		<_cor8> when 'true' ->
		    %% Line 448
		    apply 'bad_test'/1
			(T)
	      end
	  %% Line 450
	  <_cor9,_cor10,T> when 'true' ->
	      %% Line 451
	      apply 'bad_test'/1
		  (T)
	end
'check_setup_list'/2 =
    %% Line 453
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Tag,S,C}|Es],T>
	      when %% Line 454
		try
		    let <_cor2> =
			call 'erlang':'is_atom'
			    (Tag)
		    in  let <_cor3> =
			    call 'erlang':'is_function'
				(S)
			in  let <_cor4> =
				call 'erlang':'is_function'
				    (C)
			    in  let <_cor5> =
				    call 'erlang':'and'
					(_cor3, _cor4)
				in  call 'erlang':'and'
					(_cor2, _cor5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 455
		  apply 'check_arity'/3
		      (S, 0, T)
		  do  %% Line 456
		      apply 'check_arity'/3
			  (C, 1, T)
		      %% Line 457
		      apply 'check_setup_list'/2
			  (Es, T)
	  %% Line 458
	  <[{Tag,S}|Es],T>
	      when %% Line 459
		try
		    let <_cor6> =
			call 'erlang':'is_atom'
			    (Tag)
		    in  let <_cor7> =
			    call 'erlang':'is_function'
				(S)
			in  call 'erlang':'and'
				(_cor6, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 460
		  apply 'check_arity'/3
		      (S, 0, T)
		  %% Line 461
		  apply 'check_setup_list'/2
		      (Es, T)
	  %% Line 462
	  <[],_X_T> when 'true' ->
	      %% Line 463
	      'ok'
	  %% Line 464
	  <_cor10,T> when 'true' ->
	      %% Line 465
	      apply 'bad_test'/1
		  (T)
	end
'bad_test'/1 =
    %% Line 467
    fun (_cor0) ->
	%% Line 468
	call 'erlang':'throw'
	    ({'bad_test',_cor0})
'ok'/1 =
    %% Line 470
    fun (_cor0) ->
	'ok'
'ok'/2 =
    %% Line 471
    fun (_cor1,_cor0) ->
	'ok'
'group'/1 =
    %% Line 476
    fun (_cor0) ->
	case _cor0 of
	  <G = {'group',_cor60,_cor61,_cor62,{'context',_cor63,_cor64,_cor65},_cor66,_cor67}> when 'true' ->
	      %% Line 480
	      G
	  %% Line 481
	  <G = {'group',Desc,Order,%% Line 482
				   Timeout,Context,%% Line 482
						   Spawn,T0}> when 'true' ->
	      %% Line 483
	      case apply 'lookahead'/1
		       (T0) of
		<{T1,Ts}> when 'true' ->
		    %% Line 484
		    case apply 'lookahead'/1
			     (Ts) of
		      <{T2,_cor68}> when 'true' ->
			  %% Line 485
			  case T1 of
			    %% Line 486
			    <{'test',_cor69,Desc1,Timeout1,_cor70,_cor71}>
				when %% Line 487
				  try
				      let <_cor3> =
					  call 'erlang':'=:='
					      (T2, 'none')
				      in  let <_cor4> =
					      call 'erlang':'=:='
						  (Spawn, 'undefined')
					  in  let <_cor5> =
						  call 'erlang':'=:='
						      (Context, 'undefined')
					      in  let <_cor6> =
						      %% Line 488
						      call 'erlang':'=:='
							  (Desc, 'undefined')
						  in  let <_cor7> =
							  %% Line 488
							  call 'erlang':'=:='
							      (Desc1, 'undefined')
						      in  let <_cor8> =
							      %% Line 488
							      call 'erlang':'or'
								  (_cor6, _cor7)
							  in  let <_cor9> =
								  %% Line 489
								  call 'erlang':'=:='
								      (Timeout, 'undefined')
							      in  let <_cor10> =
								      %% Line 489
								      call 'erlang':'=:='
									  (Timeout1, 'undefined')
								  in  let <_cor11> =
									  %% Line 489
									  call 'erlang':'or'
									      (_cor9, _cor10)
								      in  let <_cor12> =
									      call 'erlang':'and'
										  (_cor8, _cor11)
									  in  let <_cor13> =
										  call 'erlang':'and'
										      (_cor5, _cor12)
									      in  let <_cor14> =
										      call 'erlang':'and'
											  (_cor4, _cor13)
										  in  call 'erlang':'and'
											  (_cor3, _cor14)
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false' ->
				let <_rec33> =
				    %% Line 492
				    apply 'join_properties'/2
					(Desc, Desc1)
				in  let <_rec34> =
					%% Line 493
					apply 'join_properties'/2
					    (Timeout, Timeout1)
				    in  let <_cor18> =
					    %% Line 493
					    call 'erlang':'setelement'
						(4, T1, _rec34)
					in  %% Line 492
					    call 'erlang':'setelement'
						(3, _cor18, _rec33)
			    %% Line 495
			    <{'test',_cor78,_cor79,'undefined',_cor80,_cor81}>
				when %% Line 496
				  try
				      let <_cor20> =
					  call 'erlang':'=:='
					      (T2, 'none')
				      in  let <_cor21> =
					      call 'erlang':'=/='
						  (Timeout, 'undefined')
					  in  let <_cor22> =
						  call 'erlang':'=:='
						      (Context, 'undefined')
					      in  let <_cor23> =
						      call 'erlang':'and'
							  (_cor21, _cor22)
						  in  call 'erlang':'and'
							  (_cor20, _cor23)
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false' ->
				let <_cor24> =
				    %% Line 500
				    call 'erlang':'div'
					(Timeout, 1000)
				in  let <_rec36> = {%% Line 500
					 'timeout',_cor24,%% Line 500
							  T0}
				    in  let <_cor27> =
					    %% Line 500
					    call 'erlang':'setelement'
						(7, G, _rec36)
					in  %% Line 501
					    call 'erlang':'setelement'
						(4, _cor27, 'undefined')
			    %% Line 503
			    <{'group',Desc1,Order1,%% Line 504
						   Timeout1,Context1,%% Line 504
								     Spawn1,_cor89}>
				when %% Line 505
				  try
				      let <_cor29> =
					  call 'erlang':'=:='
					      (T2, 'none')
				      in  let <_cor30> =
					      %% Line 506
					      call 'erlang':'=:='
						  (Desc, 'undefined')
					  in  let <_cor31> =
						  %% Line 506
						  call 'erlang':'=:='
						      (Desc1, 'undefined')
					      in  let <_cor32> =
						      %% Line 506
						      call 'erlang':'or'
							  (_cor30, _cor31)
						  in  let <_cor33> =
							  %% Line 507
							  call 'erlang':'=:='
							      (Order, 'undefined')
						      in  let <_cor34> =
							      %% Line 507
							      call 'erlang':'=:='
								  (Order1, 'undefined')
							  in  let <_cor35> =
								  %% Line 507
								  call 'erlang':'or'
								      (_cor33, _cor34)
							      in  let <_cor36> =
								      %% Line 508
								      call 'erlang':'=:='
									  (Context, 'undefined')
								  in  let <_cor37> =
									  %% Line 508
									  call 'erlang':'=:='
									      (Context1, 'undefined')
								      in  let <_cor38> =
									      %% Line 508
									      call 'erlang':'or'
										  (_cor36, _cor37)
									  in  let <_cor39> =
										  %% Line 509
										  call 'erlang':'=:='
										      (Spawn, 'undefined')
									      in  let <_cor40> =
										      %% Line 509
										      call 'erlang':'=:='
											  (Spawn1, 'undefined')
										  in  let <_cor41> =
											  %% Line 509
											  call 'erlang':'or'
											      (_cor39, _cor40)
										      in  let <_cor42> =
											      %% Line 510
											      call 'erlang':'=:='
												  (Timeout, 'undefined')
											  in  let <_cor43> =
												  %% Line 510
												  call 'erlang':'=:='
												      (Timeout1, 'undefined')
											      in  let <_cor44> =
												      %% Line 510
												      call 'erlang':'or'
													  (_cor42, _cor43)
												  in  let <_cor45> =
													  call 'erlang':'and'
													      (_cor41, _cor44)
												      in  let <_cor46> =
													      call 'erlang':'and'
														  (_cor38, _cor45)
													  in  let <_cor47> =
														  call 'erlang':'and'
														      (_cor35, _cor46)
													      in  let <_cor48> =
														      call 'erlang':'and'
															  (_cor32, _cor47)
														  in  call 'erlang':'and'
															  (_cor29, _cor48)
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false' ->
				let <_rec38> =
				    %% Line 512
				    apply 'join_properties'/2
					(Desc, Desc1)
				in  let <_rec39> =
					%% Line 513
					apply 'join_properties'/2
					    (Order, Order1)
				    in  let <_rec40> =
					    %% Line 514
					    apply 'join_properties'/2
						(Context, Context1)
					in  let <_rec41> =
						%% Line 515
						apply 'join_properties'/2
						    (Spawn, Spawn1)
					    in  let <_rec42> =
						    %% Line 516
						    apply 'join_properties'/2
							(Timeout, Timeout1)
						in  let <_cor56> =
							%% Line 516
							{'group',_rec38,_rec39,_rec42,_rec40,_rec41,_cor89}
						    in  %% Line 512
							apply 'group'/1
							    (_cor56)
			    %% Line 518
			    <{'group',_cor91,Order1,Timeout1,_cor92,_cor93,_cor94}>
				when %% Line 519
				  call 'erlang':'=:='
				      (T2,
				       'none') ->
				let <_cor57> =
				    %% Line 522
				    apply 'push_timeout'/3
					(Timeout, Timeout1, G)
				in  %% Line 522
				    apply 'push_order'/3
					(Order, Order1, _cor57)
			    %% Line 524
			    <_cor95> when 'true' ->
				%% Line 526
				G
			  end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor59> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor59})
		  -| [{'function_name',{'group',1}}] )
	    -| ['compiler_generated'] )
	end
'lookahead'/1 =
    %% Line 529
    fun (_cor0) ->
	%% Line 530
	case apply 'next'/1
		 (_cor0) of
	  %% Line 531
	  <{T1,Ts}> when 'true' ->
	      {T1,Ts}
	  %% Line 532
	  <'none'> when 'true' ->
	      {'none',[]}
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'join_properties'/2 =
    %% Line 535
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'undefined',X> when 'true' ->
	      X
	  %% Line 536
	  <X,'undefined'> when 'true' ->
	      X
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'join_properties',2}}] )
	    -| ['compiler_generated'] )
	end
'push_timeout'/3 =
    %% Line 538
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Timeout,'undefined',G = {'group',_cor13,_cor14,_cor15,'undefined',_cor16,_cor17}>
	      when %% Line 539
		call 'erlang':'=/='
		    (Timeout,
		     'undefined') ->
	      let <_cor5> =
		  %% Line 542
		  call 'erlang':'div'
		      (Timeout, 1000)
	      in  let <_rec50> = {%% Line 542
		       'timeout',_cor5,_cor17}
		  in  let <_cor8> =
			  %% Line 542
			  call 'erlang':'setelement'
			      (7, G, _rec50)
		      in  %% Line 543
			  call 'erlang':'setelement'
			      (4, _cor8, 'undefined')
	  %% Line 544
	  <_cor31,_cor32,G> when 'true' ->
	      %% Line 545
	      G
	end
'push_order'/3 =
    %% Line 547
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'inorder','undefined',G> when 'true' ->
	      %% Line 548
	      ( case G of
		  ( <( {'group',_cor18,_cor19,_cor20,_cor21,_cor22,_rec55}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_rec53> = {'inorder',_rec55}
			in  let <_cor7> =
				call 'erlang':'setelement'
				    (7, G, _rec53)
			    in  call 'erlang':'setelement'
				    (3, _cor7, 'undefined')
		    -| ['compiler_generated'] )
		  ( <_cor23> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','group'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 549
	  <{'inparallel',N},'undefined',G> when 'true' ->
	      %% Line 550
	      ( case G of
		  ( <( {'group',_cor31,_cor32,_cor33,_cor34,_cor35,_rec58}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_rec56> = {'inparallel',N,_rec58}
			in  let <_cor13> =
				call 'erlang':'setelement'
				    (7, G, _rec56)
			    in  call 'erlang':'setelement'
				    (3, _cor13, 'undefined')
		    -| ['compiler_generated'] )
		  ( <_cor36> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','group'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 551
	  <_cor44,_cor45,G> when 'true' ->
	      %% Line 552
	      G
	end
'get_module_tests'/1 =
    %% Line 559
    fun (_cor0) ->
	%% Line 560
	try
	    call _cor0:'module_info'
		('exports')
	of <_cor1> ->
	    let <Fs> =
		%% Line 562
		apply 'get_module_tests_1'/2
		    (_cor0, _cor1)
	    in  %% Line 564
		case call 'lists':'member'
			 ({'eunit_wrapper_',1}, _cor1) of
		  %% Line 565
		  <'false'> when 'true' ->
		      Fs
		  %% Line 566
		  <'true'> when 'true' ->
		      let <_cor4> =
			  ( fun () ->
				call _cor0:'eunit_wrapper_'
				    (Fs)
			    -| [{'id',{0,0,'-get_module_tests/1-fun-0-'}}] )
		      in  {'generator',_cor4}
		  ( <_cor5> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor5})
		    -| ['compiler_generated'] )
		end
	catch <_cor9,_cor8,_cor7> ->
	    case <_cor9,_cor8,_cor7> of
	      %% Line 569
	      <'error','undef',_cor11> when 'true' ->
		  %% Line 570
		  call 'erlang':'throw'
		      ({'module_not_found',_cor0})
	      ( <_cor9,_cor8,_cor7> when 'true' ->
		    primop 'raise'
			(_cor7, _cor8)
		-| ['compiler_generated'] )
	    end
'get_module_tests_1'/2 =
    %% Line 573
    fun (_cor1,_cor0) ->
	let <Fs> =
	    %% Line 574
	    apply 'testfuns'/4
		(_cor0, _cor1, [95|[116|[101|[115|[116]]]]], %% Line 575
							     [95|[116|[101|[115|[116|[95]]]]]])
	in  let <Name> =
		%% Line 576
		call 'erlang':'atom_to_list'
		    (_cor1)
	    in  %% Line 577
		case call 'lists':'suffix'
			 ([95|[116|[101|[115|[116|[115]]]]]], Name) of
		  %% Line 578
		  <'false'> when 'true' ->
		      let <Name1> =
			  %% Line 579
			  call 'erlang':'++'
			      (Name, [95|[116|[101|[115|[116|[115]]]]]])
		      in  let <M1> =
			      %% Line 580
			      call 'erlang':'list_to_atom'
				  (Name1)
			  in  %% Line 581
			      try
				  apply 'get_module_tests'/1
				      (M1)
			      of <_cor6> ->
				  let <_cor7> =
				      %% Line 583
				      call 'erlang':'++'
					  (Name1, [39])
				  in  let <_cor8> =
					  %% Line 583
					  call 'erlang':'++'
					      ([109|[111|[100|[117|[108|[101|[32|[39]]]]]]]], _cor7)
				      in  %% Line 583
					  call 'erlang':'++'
					      (Fs, [{_cor8,_cor6}|[]])
			      catch <_cor12,_cor11,_cor10> ->
				  case <_cor12,_cor11,_cor10> of
				    %% Line 585
				    <'throw',{'module_not_found',_cor16},_cor17>
					when call 'erlang':'=:='
					      (_cor16,
					       M1) ->
					%% Line 586
					Fs
				    ( <_cor12,_cor11,_cor10> when 'true' ->
					  primop 'raise'
					      (_cor10, _cor11)
				      -| ['compiler_generated'] )
				  end
		  %% Line 588
		  <'true'> when 'true' ->
		      %% Line 589
		      Fs
		  ( <_cor13> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor13})
		    -| ['compiler_generated'] )
		end
'testfuns'/4 =
    %% Line 592
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor11> =
	    %% Line 593
	    ( fun (_cor8,_cor7) ->
		  case <_cor8,_cor7> of
		    <{F,0},Fs> when 'true' ->
			let <N> =
			    %% Line 594
			    call 'erlang':'atom_to_list'
				(F)
			in  %% Line 595
			    case call 'lists':'suffix'
				     (_cor1, N) of
			      %% Line 596
			      <'true'> when 'true' ->
				  %% Line 597
				  [{'test',_cor2,F}|Fs]
			      %% Line 598
			      <'false'> when 'true' ->
				  %% Line 599
				  case call 'lists':'suffix'
					   (_cor0, N) of
				    %% Line 600
				    <'true'> when 'true' ->
					%% Line 601
					[{'generator',_cor2,F}|Fs]
				    %% Line 602
				    <'false'> when 'true' ->
					%% Line 603
					Fs
				    ( <_cor5> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor5})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor6})
				-| ['compiler_generated'] )
			    end
		    %% Line 606
		    <_cor16,Fs> when 'true' ->
			%% Line 607
			Fs
		  end
	      -| [{'id',{0,0,'-testfuns/4-fun-0-'}}] )
	in  %% Line 593
	    call 'lists':'foldr'
		(_cor11, %% Line 609
			 [], _cor3)
'get_file_tests'/1 =
    %% Line 619
    fun (_cor0) ->
	%% Line 620
	case apply 'is_module_filename'/1
		 (_cor0) of
	  %% Line 621
	  <'true'> when 'true' ->
	      %% Line 623
	      case call 'file':'read_file_info'
		       (_cor0) of
		%% Line 624
		<{'ok',{'file_info',_cor5,'regular',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16}}> when 'true' ->
		    %% Line 625
		    apply 'objfile_test'/1
			(_cor0)
		%% Line 626
		<_cor17> when 'true' ->
		    %% Line 628
		    case call 'code':'where_is_file'
			     (_cor0) of
		      %% Line 629
		      <'non_existing'> when 'true' ->
			  %% Line 631
			  apply 'objfile_test'/1
			      (_cor0)
		      %% Line 632
		      <Path> when 'true' ->
			  %% Line 633
			  apply 'objfile_test'/1
			      (Path)
		    end
	      end
	  %% Line 636
	  <'false'> when 'true' ->
	      %% Line 637
	      call 'eunit_lib':'consult_file'
		  (_cor0)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'is_module_filename'/1 =
    %% Line 640
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 641
	    call 'filename':'extension'
		(_cor0)
	in  let <_cor1> =
		%% Line 641
		call 'code':'objfile_extension'
		    ()
	    in  %% Line 641
		call 'erlang':'=:='
		    (_cor2, _cor1)
'objfile_test'/1 =
    %% Line 643
    fun (_cor0) ->
	case _cor0 of
	  <{M,File}> when 'true' ->
	      let <_cor3> =
		  %% Line 645
		  ( fun () ->
			do  %% Line 647
			    call 'code':'purge'
				(M)
			    let <_cor1> =
				%% Line 648
				call 'filename':'rootname'
				    (File)
			    in  %% Line 648
				case call 'code':'load_abs'
					 (_cor1) of
				  <{'module',_cor6}>
				      when call 'erlang':'=:='
					    (_cor6,
					     M) ->
				      %% Line 649
				      'ok'
				  ( <_cor2> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor2})
				    -| ['compiler_generated'] )
				end
		    -| [{'id',{0,0,'-objfile_test/1-fun-0-'}}] )
	      in  %% Line 644
		  {'setup',_cor3,%% Line 651
				 {'module',M}}
	  %% Line 652
	  <File> when 'true' ->
	      let <_cor4> =
		  %% Line 653
		  apply 'objfile_module'/1
		      (File)
	      in  %% Line 653
		  apply 'objfile_test'/1
		      ({_cor4,File})
	end
'objfile_module'/1 =
    %% Line 655
    fun (_cor0) ->
	%% Line 656
	try
	    let <_cor1> =
		%% Line 658
		call 'beam_lib':'info'
		    (_cor0)
	    in  %% Line 657
		case call 'lists':'keysearch'
			 ('module', 1, _cor1) of
		  <{'value',{'module',M}}> when 'true' ->
		      %% Line 659
		      M
		  ( <_cor2> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor2})
		    -| ['compiler_generated'] )
		end
	of <_cor3> ->
	    _cor3
	catch <_cor6,_cor5,_cor4> ->
	    %% Line 662
	    call 'erlang':'throw'
		({'file_read_error',%% Line 663
				    {'undefined',[101|[120|[116|[114|[97|[99|[116|[105|[110|[103|[32|[109|[111|[100|[117|[108|[101|[32|[110|[97|[109|[101|[32|[102|[97|[105|[108|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]],_cor0}})
'get_directory_module_tests'/1 =
    %% Line 673
    fun (_cor0) ->
	let <Ms> =
	    %% Line 674
	    apply 'get_directory_modules'/1
		(_cor0)
	in  let <F> =
		%% Line 676
		( fun (_cor7,_cor6) ->
		      case <_cor7,_cor6> of
			<{M,_cor20},S> when 'true' ->
			    let <Name> =
				%% Line 677
				call 'erlang':'atom_to_list'
				    (M)
			    in  %% Line 678
				case call 'lists':'suffix'
					 ([95|[116|[101|[115|[116|[115]]]]]], Name) of
				  %% Line 679
				  <'false'> when 'true' ->
				      let <Name1> =
					  %% Line 680
					  call 'erlang':'++'
					      (Name, [95|[116|[101|[115|[116|[115]]]]]])
				      in  let <M1> =
					      %% Line 681
					      call 'erlang':'list_to_atom'
						  (Name1)
					  in  %% Line 682
					      call 'dict':'erase'
						  (M1, S)
				  %% Line 683
				  <'true'> when 'true' ->
				      %% Line 684
				      S
				  ( <_cor5> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor5})
				    -| ['compiler_generated'] )
				end
			( <_cor9,_cor8> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor9,_cor8})
				-| [{'function_name',{'-get_directory_module_tests/1-fun-0-',2}}] )
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-get_directory_module_tests/1-fun-0-'}}] )
	    in  %% Line 687
		( letrec
		      'lc$^0'/1 =
			  fun (_cor16) ->
			      case _cor16 of
				<[%% Line 688
				  Obj|_cor12]> when 'true' ->
				    let <_cor17> =
					apply 'objfile_test'/1
					    (Obj)
				    in  let <_cor18> =
					    %% Line 688
					    apply 'lc$^0'/1
						(_cor12)
					in  ( [_cor17|_cor18]
					      -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor16> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor16})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  let <_cor13> =
			  %% Line 688
			  call 'dict':'from_list'
			      (Ms)
		      in  let <_cor14> =
			      %% Line 688
			      call 'lists':'foldl'
				  (F, _cor13, Ms)
			  in  let <_cor15> =
				  %% Line 688
				  call 'dict':'to_list'
				      (_cor14)
			      in  apply 'lc$^0'/1
				      (_cor15)
		  -| ['list_comprehension'] )
'get_directory_modules'/1 =
    %% Line 691
    fun (_cor0) ->
	%% Line 692
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[%% Line 696
			  F|_cor2]> when 'true' ->
			    %% Line 696
			    ( case apply 'is_module_filename'/1
				       (F) of
				<'true'> when 'true' ->
				    let <F1> =
					call 'filename':'join'
					    (_cor0, F)
				    in  let <_cor6> =
					    apply 'objfile_module'/1
						(F1)
					in  let <_cor7> =
						apply 'lc$^0'/1
						    (_cor2)
					    in  ( [{_cor6,F1}|_cor7]
						  -| ['compiler_generated'] )
				( <'false'> when 'true' ->
				      apply 'lc$^0'/1
					  (_cor2)
				  -| ['compiler_generated'] )
				( <_cor8> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor8})
				  -| ['compiler_generated'] )
			      end
			      -| ['list_comprehension'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  let <_cor3> =
		  %% Line 696
		  call 'eunit_lib':'list_dir'
		      (_cor0)
	      in  apply 'lc$^0'/1
		      (_cor3)
	  -| ['list_comprehension'] )
'enter_context'/3 =
    %% Line 709
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'context',S,C,P},I,F> when 'true' ->
	      let <_cor8> =
		  %% Line 710
		  case P of
		    %% Line 711
		    <'local'> when 'true' ->
			F
		    %% Line 712
		    <'spawn'> when 'true' ->
			( fun (_cor3) ->
			      apply F
				  ({'spawn',_cor3})
			  -| [{'id',{0,0,'-enter_context/3-fun-0-'}}] )
		    %% Line 713
		    <{'spawn',N}> when 'true' ->
			( fun (_cor5) ->
			      apply F
				  ({'spawn',N,_cor5})
			  -| [{'id',{0,0,'-enter_context/3-fun-1-'}}] )
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 715
		  call 'eunit_test':'enter_context'
		      (S, C, I, _cor8)
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'enter_context',3}}] )
	    -| ['compiler_generated'] )
	end
'generator_exported_'/0 =
    %% Line 719
    fun () ->
	%% Line 720
	apply 'generator'/0
	    ()
'generator'/0 =
    %% Line 722
    fun () ->
	let <_cor0> =
	    %% Line 723
	    ( fun () ->
		  'ok'
	      -| [{'id',{0,0,'-generator/0-fun-0-'}}] )
	in  let <T> = {%% Line 723
		 723,_cor0}
	    in  %% Line 724
		[T|[T|[T|[]]]]
'echo_proc'/0 =
    %% Line 726
    fun () ->
	%% Line 727
	receive
	  <{P,X}> when 'true' ->
	      do  call 'erlang':'!'
		      (P, X)
		  apply 'echo_proc'/0
		      ()
	after 'infinity' ->
	  'true'
'ping'/1 =
    %% Line 729
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 730
	    call 'erlang':'self'
		()
	in  do  %% Line 730
		call 'erlang':'!'
		    (_cor0, {_cor1,'ping'})
		%% Line 730
		receive
		  <'ping'> when 'true' ->
		      'ok'
		after 'infinity' ->
		  'true'
'data_test_'/0 =
    %% Line 732
    fun () ->
	let <Setup> =
	    %% Line 733
	    ( fun () ->
		  call 'erlang':'spawn'
		      (( 'echo_proc'/0
			 -| [{'id',{0,0,'-data_test_/0-fun-0-'}}] ))
	      -| [{'id',{0,0,'-data_test_/0-fun-1-'}}] )
	in  let <Cleanup> =
		%% Line 734
		( fun (_cor1) ->
		      call 'erlang':'exit'
			  (_cor1, 'kill')
		  -| [{'id',{0,0,'-data_test_/0-fun-2-'}}] )
	    in  let <_cor4> =
		    %% Line 735
		    ( fun () ->
			  call 'erlang':'throw'
			      ('eunit')
		      -| [{'id',{0,0,'-data_test_/0-fun-3-'}}] )
		in  let <Fail> = {%% Line 735
			 735,_cor4}
		    in  let <_cor6> =
			    %% Line 736
			    ( fun () ->
				  'ok'
			      -| [{'id',{0,0,'-data_test_/0-fun-4-'}}] )
			in  let <T> = {%% Line 736
				 736,_cor6}
			    in  let <Tests> =
				    %% Line 737
				    [T|[T|[T|[]]]]
				in  let <_cor11> =
					%% Line 738
					( fun () ->
					      let <_cor10> =
						  ( fun () ->
							case call 'eunit':'test'
								 (T) of
							  <'ok'> when 'true' ->
							      'ok'
							  <_X__V> when 'true' ->
							      call 'erlang':'error'
								  ({'assertMatch_failed',[{'module','eunit_data'}|[{'line',738}|[{'expression',[101|[117|[110|[105|[116|[32|[58|[32|[116|[101|[115|[116|[32|[40|[32|[84|[32|[41]]]]]]]]]]]]]]]]]]}|[{'pattern',[111|[107]]}|[{'value',_X__V}|[]]]]]]})
							end
						    -| [{'id',{0,0,'-data_test_/0-fun-5-'}}] )
					      in  apply _cor10
						      ()
					  -| [{'id',{0,0,'-data_test_/0-fun-6-'}}] )
				    in  let <_cor14> =
					    %% Line 739
					    ( fun () ->
						  let <_cor13> =
						      ( fun () ->
							    case call 'eunit':'test'
								     (Fail) of
							      <'error'> when 'true' ->
								  'ok'
							      <_X__V> when 'true' ->
								  call 'erlang':'error'
								      ({'assertMatch_failed',[{'module','eunit_data'}|[{'line',739}|[{'expression',[101|[117|[110|[105|[116|[32|[58|[32|[116|[101|[115|[116|[32|[40|[32|[70|[97|[105|[108|[32|[41]]]]]]]]]]]]]]]]]]]]]}|[{'pattern',[101|[114|[114|[111|[114]]]]]}|[{'value',_X__V}|[]]]]]]})
							    end
							-| [{'id',{0,0,'-data_test_/0-fun-7-'}}] )
						  in  apply _cor13
							  ()
					      -| [{'id',{0,0,'-data_test_/0-fun-8-'}}] )
					in  let <_cor17> =
						%% Line 740
						( fun () ->
						      let <_cor16> =
							  ( fun () ->
								case call 'eunit':'test'
									 ({'test','eunit_data','trivial_test'}) of
								  <'ok'> when 'true' ->
								      'ok'
								  <_X__V> when 'true' ->
								      call 'erlang':'error'
									  ({'assertMatch_failed',[{'module','eunit_data'}|[{'line',740}|[{'expression',[101|[117|[110|[105|[116|[32|[58|[32|[116|[101|[115|[116|[32|[40|[32|[123|[32|[116|[101|[115|[116|[32|[44|[32|[63|[32|[77|[79|[68|[85|[76|[69|[32|[44|[32|[116|[114|[105|[118|[105|[97|[108|[95|[116|[101|[115|[116|[32|[125|[32|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'pattern',[111|[107]]}|[{'value',_X__V}|[]]]]]]})
								end
							    -| [{'id',{0,0,'-data_test_/0-fun-9-'}}] )
						      in  apply _cor16
							      ()
						  -| [{'id',{0,0,'-data_test_/0-fun-10-'}}] )
					    in  let <_cor21> =
						    %% Line 741
						    ( fun () ->
							  let <_cor20> =
							      ( fun () ->
								    let <_cor18> =
									( fun () ->
									      Tests
									  -| [{'id',{0,0,'-data_test_/0-fun-11-'}}] )
								    in  case call 'eunit':'test'
										 ({'generator',_cor18}) of
									  <'ok'> when 'true' ->
									      'ok'
									  <_X__V> when 'true' ->
									      call 'erlang':'error'
										  ({'assertMatch_failed',[{'module','eunit_data'}|[{'line',741}|[{'expression',[101|[117|[110|[105|[116|[32|[58|[32|[116|[101|[115|[116|[32|[40|[32|[123|[32|[103|[101|[110|[101|[114|[97|[116|[111|[114|[32|[44|[32|[102|[117|[110|[32|[40|[32|[41|[32|[45|[62|[32|[84|[101|[115|[116|[115|[32|[101|[110|[100|[32|[125|[32|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'pattern',[111|[107]]}|[{'value',_X__V}|[]]]]]]})
									end
								-| [{'id',{0,0,'-data_test_/0-fun-12-'}}] )
							  in  apply _cor20
								  ()
						      -| [{'id',{0,0,'-data_test_/0-fun-13-'}}] )
						in  let <_cor24> =
							%% Line 742
							( fun () ->
							      let <_cor23> =
								  ( fun () ->
									case call 'eunit':'test'
										 ({'generator',( 'generator'/0
												 -| [{'id',{0,0,'-data_test_/0-fun-14-'}}] )}) of
									  <'ok'> when 'true' ->
									      'ok'
									  <_X__V> when 'true' ->
									      call 'erlang':'error'
										  ({'assertMatch_failed',[{'module','eunit_data'}|[{'line',742}|[{'expression',[101|[117|[110|[105|[116|[32|[58|[32|[116|[101|[115|[116|[32|[40|[32|[123|[32|[103|[101|[110|[101|[114|[97|[116|[111|[114|[32|[44|[32|[102|[117|[110|[32|[103|[101|[110|[101|[114|[97|[116|[111|[114|[32|[47|[32|[48|[32|[125|[32|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'pattern',[111|[107]]}|[{'value',_X__V}|[]]]]]]})
									end
								    -| [{'id',{0,0,'-data_test_/0-fun-15-'}}] )
							      in  apply _cor23
								      ()
							  -| [{'id',{0,0,'-data_test_/0-fun-16-'}}] )
						    in  let <_cor27> =
							    %% Line 743
							    ( fun () ->
								  let <_cor26> =
								      ( fun () ->
									    case call 'eunit':'test'
										     ({'generator','eunit_data','generator_exported_'}) of
									      <'ok'> when 'true' ->
										  'ok'
									      <_X__V> when 'true' ->
										  call 'erlang':'error'
										      ({'assertMatch_failed',[{'module','eunit_data'}|[{'line',743}|[{'expression',[101|[117|[110|[105|[116|[32|[58|[32|[116|[101|[115|[116|[32|[40|[32|[123|[32|[103|[101|[110|[101|[114|[97|[116|[111|[114|[32|[44|[32|[63|[32|[77|[79|[68|[85|[76|[69|[32|[44|[32|[103|[101|[110|[101|[114|[97|[116|[111|[114|[95|[101|[120|[112|[111|[114|[116|[101|[100|[95|[32|[125|[32|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'pattern',[111|[107]]}|[{'value',_X__V}|[]]]]]]})
									    end
									-| [{'id',{0,0,'-data_test_/0-fun-17-'}}] )
								  in  apply _cor26
									  ()
							      -| [{'id',{0,0,'-data_test_/0-fun-18-'}}] )
							in  let <_cor30> =
								%% Line 744
								( fun () ->
								      let <_cor29> =
									  ( fun () ->
										case call 'eunit':'test'
											 ({'inorder',Tests}) of
										  <'ok'> when 'true' ->
										      'ok'
										  <_X__V> when 'true' ->
										      call 'erlang':'error'
											  ({'assertMatch_failed',[{'module','eunit_data'}|[{'line',744}|[{'expression',[101|[117|[110|[105|[116|[32|[58|[32|[116|[101|[115|[116|[32|[40|[32|[123|[32|[105|[110|[111|[114|[100|[101|[114|[32|[44|[32|[84|[101|[115|[116|[115|[32|[125|[32|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'pattern',[111|[107]]}|[{'value',_X__V}|[]]]]]]})
										end
									    -| [{'id',{0,0,'-data_test_/0-fun-19-'}}] )
								      in  apply _cor29
									      ()
								  -| [{'id',{0,0,'-data_test_/0-fun-20-'}}] )
							    in  let <_cor33> =
								    %% Line 745
								    ( fun () ->
									  let <_cor32> =
									      ( fun () ->
										    case call 'eunit':'test'
											     ({'inparallel',Tests}) of
										      <'ok'> when 'true' ->
											  'ok'
										      <_X__V> when 'true' ->
											  call 'erlang':'error'
											      ({'assertMatch_failed',[{'module','eunit_data'}|[{'line',745}|[{'expression',[101|[117|[110|[105|[116|[32|[58|[32|[116|[101|[115|[116|[32|[40|[32|[123|[32|[105|[110|[112|[97|[114|[97|[108|[108|[101|[108|[32|[44|[32|[84|[101|[115|[116|[115|[32|[125|[32|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'pattern',[111|[107]]}|[{'value',_X__V}|[]]]]]]})
										    end
										-| [{'id',{0,0,'-data_test_/0-fun-21-'}}] )
									  in  apply _cor32
										  ()
								      -| [{'id',{0,0,'-data_test_/0-fun-22-'}}] )
								in  let <_cor36> =
									%% Line 746
									( fun () ->
									      let <_cor35> =
										  ( fun () ->
											case call 'eunit':'test'
												 ({'timeout',10,Tests}) of
											  <'ok'> when 'true' ->
											      'ok'
											  <_X__V> when 'true' ->
											      call 'erlang':'error'
												  ({'assertMatch_failed',[{'module','eunit_data'}|[{'line',746}|[{'expression',[101|[117|[110|[105|[116|[32|[58|[32|[116|[101|[115|[116|[32|[40|[32|[123|[32|[116|[105|[109|[101|[111|[117|[116|[32|[44|[32|[49|[48|[32|[44|[32|[84|[101|[115|[116|[115|[32|[125|[32|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'pattern',[111|[107]]}|[{'value',_X__V}|[]]]]]]})
											end
										    -| [{'id',{0,0,'-data_test_/0-fun-23-'}}] )
									      in  apply _cor35
										      ()
									  -| [{'id',{0,0,'-data_test_/0-fun-24-'}}] )
								    in  let <_cor39> =
									    %% Line 747
									    ( fun () ->
										  let <_cor38> =
										      ( fun () ->
											    case call 'eunit':'test'
												     ({'spawn',Tests}) of
											      <'ok'> when 'true' ->
												  'ok'
											      <_X__V> when 'true' ->
												  call 'erlang':'error'
												      ({'assertMatch_failed',[{'module','eunit_data'}|[{'line',747}|[{'expression',[101|[117|[110|[105|[116|[32|[58|[32|[116|[101|[115|[116|[32|[40|[32|[123|[32|[115|[112|[97|[119|[110|[32|[44|[32|[84|[101|[115|[116|[115|[32|[125|[32|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'pattern',[111|[107]]}|[{'value',_X__V}|[]]]]]]})
											    end
											-| [{'id',{0,0,'-data_test_/0-fun-25-'}}] )
										  in  apply _cor38
											  ()
									      -| [{'id',{0,0,'-data_test_/0-fun-26-'}}] )
									in  let <_cor47> =
										%% Line 748
										( fun () ->
										      let <_cor46> =
											  ( fun () ->
												let <_cor44> =
												    %% Line 749
												    ( fun (_cor42) ->
													  let <_cor41> =
													      ( fun () ->
														    let <_cor57> =
															apply 'ping'/1
															    (_cor42)
														    in  case _cor57 of
															  <'ok'> when 'true' ->
															      ( _cor57
																-| ['compiler_generated'] )
															  ( <_cor40> when 'true' ->
																primop 'match_fail'
																    ({'badmatch',_cor40})
															    -| ['compiler_generated'] )
															end
														-| [{'id',{0,0,'-data_test_/0-fun-27-'}}] )
													  in  {749,_cor41}
												      -| [{'id',{0,0,'-data_test_/0-fun-28-'}}] )
												in  case call 'eunit':'test'
													     ({'setup',Setup,Cleanup,_cor44}) of
												      <'ok'> when 'true' ->
													  'ok'
												      <_X__V> when 'true' ->
													  call 'erlang':'error'
													      ({'assertMatch_failed',[{'module','eunit_data'}|[{'line',748}|[{'expression',[101|[117|[110|[105|[116|[32|[58|[32|[116|[101|[115|[116|[32|[40|[32|[123|[32|[115|[101|[116|[117|[112|[32|[44|[32|[83|[101|[116|[117|[112|[32|[44|[32|[67|[108|[101|[97|[110|[117|[112|[32|[44|[32|[102|[117|[110|[32|[40|[32|[80|[32|[41|[32|[45|[62|[32|[63|[32|[95|[116|[101|[115|[116|[32|[40|[32|[111|[107|[32|[61|[32|[112|[105|[110|[103|[32|[40|[32|[80|[32|[41|[32|[41|[32|[101|[110|[100|[32|[125|[32|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'pattern',[111|[107]]}|[{'value',_X__V}|[]]]]]]})
												    end
											    -| [{'id',{0,0,'-data_test_/0-fun-29-'}}] )
										      in  apply _cor46
											      ()
										  -| [{'id',{0,0,'-data_test_/0-fun-30-'}}] )
									    in  let <_cor50> =
										    %% Line 751
										    ( fun () ->
											  let <_cor49> =
											      ( fun () ->
												    case call 'eunit':'test'
													     ({'module','eunit_lib'}) of
												      <'ok'> when 'true' ->
													  'ok'
												      <_X__V> when 'true' ->
													  call 'erlang':'error'
													      ({'assertMatch_failed',[{'module','eunit_data'}|[{'line',751}|[{'expression',[101|[117|[110|[105|[116|[32|[58|[32|[116|[101|[115|[116|[32|[40|[32|[123|[32|[109|[111|[100|[117|[108|[101|[32|[44|[32|[101|[117|[110|[105|[116|[95|[108|[105|[98|[32|[125|[32|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'pattern',[111|[107]]}|[{'value',_X__V}|[]]]]]]})
												    end
												-| [{'id',{0,0,'-data_test_/0-fun-31-'}}] )
											  in  apply _cor49
												  ()
										      -| [{'id',{0,0,'-data_test_/0-fun-32-'}}] )
										in  let <_cor53> =
											%% Line 752
											( fun () ->
											      let <_cor52> =
												  ( fun () ->
													case call 'eunit':'test'
														 ('eunit_lib') of
													  <'ok'> when 'true' ->
													      'ok'
													  <_X__V> when 'true' ->
													      call 'erlang':'error'
														  ({'assertMatch_failed',[{'module','eunit_data'}|[{'line',752}|[{'expression',[101|[117|[110|[105|[116|[32|[58|[32|[116|[101|[115|[116|[32|[40|[32|[101|[117|[110|[105|[116|[95|[108|[105|[98|[32|[41]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'pattern',[111|[107]]}|[{'value',_X__V}|[]]]]]]})
													end
												    -| [{'id',{0,0,'-data_test_/0-fun-33-'}}] )
											      in  apply _cor52
												      ()
											  -| [{'id',{0,0,'-data_test_/0-fun-34-'}}] )
										    in  let <_cor56> =
											    %% Line 753
											    ( fun () ->
												  let <_cor55> =
												      ( fun () ->
													    case call 'eunit':'test'
														     ([101|[120|[97|[109|[112|[108|[101|[115|[47|[116|[101|[115|[116|[115|[46|[116|[120|[116]]]]]]]]]]]]]]]]]]) of
													      <'ok'> when 'true' ->
														  'ok'
													      <_X__V> when 'true' ->
														  call 'erlang':'error'
														      ({'assertMatch_failed',[{'module','eunit_data'}|[{'line',753}|[{'expression',[101|[117|[110|[105|[116|[32|[58|[32|[116|[101|[115|[116|[32|[40|[32|[34|[101|[120|[97|[109|[112|[108|[101|[115|[47|[116|[101|[115|[116|[115|[46|[116|[120|[116|[34|[32|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'pattern',[111|[107]]}|[{'value',_X__V}|[]]]]]]})
													    end
													-| [{'id',{0,0,'-data_test_/0-fun-35-'}}] )
												  in  apply _cor55
													  ()
											      -| [{'id',{0,0,'-data_test_/0-fun-36-'}}] )
											in  %% Line 738
											    [{738,_cor11}|%% Line 739
													  [{739,_cor14}|%% Line 740
															[{740,_cor17}|%% Line 741
																      [{741,_cor21}|%% Line 742
																		    [{742,_cor24}|%% Line 743
																				  [{743,_cor27}|%% Line 744
																						[{744,_cor30}|%% Line 745
																							      [{745,_cor33}|%% Line 746
																									    [{746,_cor36}|%% Line 747
																											  [{747,_cor39}|%% Line 748
																													[{748,_cor47}|%% Line 751
																														      [{751,_cor50}|%% Line 752
																																    [{752,_cor53}|%% Line 753
																																		  [{753,_cor56}|%% Line 756
																																				[]]]]]]]]]]]]]]]
'trivial_test'/0 =
    %% Line 758
    fun () ->
	%% Line 759
	'ok'
'trivial_generator_test_'/0 =
    %% Line 761
    fun () ->
	let <_cor0> =
	    %% Line 762
	    ( fun () ->
		  'ok'
	      -| [{'id',{0,0,'-trivial_generator_test_/0-fun-0-'}}] )
	in  %% Line 762
	    [{762,_cor0}|[]]
'lazy_test_'/0 =
    %% Line 764
    fun () ->
	let <_cor1> =
	    %% Line 765
	    ( fun () ->
		  let <_cor6> =
		      call 'erlang':'put'
			  ('count', 0)
		  in  case _cor6 of
			<'undefined'> when 'true' ->
			    ( _cor6
			      -| ['compiler_generated'] )
			( <_cor0> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor0})
			  -| ['compiler_generated'] )
		      end
	      -| [{'id',{0,0,'-lazy_test_/0-fun-0-'}}] )
	in  let <_cor2> =
		%% Line 766
		apply 'lazy_gen'/1
		    (7)
	    in  let <_cor5> =
		    %% Line 767
		    ( fun () ->
			  let <_cor4> =
			      ( fun () ->
				    case call 'erlang':'get'
					     ('count') of
				      <7> when 'true' ->
					  'ok'
				      <_X__V> when 'true' ->
					  call 'erlang':'error'
					      ({'assertMatch_failed',[{'module','eunit_data'}|[{'line',767}|[{'expression',[103|[101|[116|[32|[40|[32|[99|[111|[117|[110|[116|[32|[41]]]]]]]]]]]]]}|[{'pattern',[55]}|[{'value',_X__V}|[]]]]]]})
				    end
				-| [{'id',{0,0,'-lazy_test_/0-fun-1-'}}] )
			  in  apply _cor4
				  ()
		      -| [{'id',{0,0,'-lazy_test_/0-fun-2-'}}] )
		in  %% Line 765
		    {'spawn',[{765,_cor1}|%% Line 766
					  [_cor2|%% Line 767
						 [{767,_cor5}|[]]]]}
'lazy_gen'/1 =
    %% Line 769
    fun (_cor0) ->
	let <_cor6> =
	    %% Line 771
	    ( fun () ->
		  %% Line 772
		  case <> of
		    <>
			when call 'erlang':'>'
			      (_cor0,
			       0) ->
			let <_cor3> =
			    %% Line 773
			    ( fun () ->
				  let <_cor1> =
				      call 'erlang':'get'
					  ('count')
				  in  let <_cor2> =
					  call 'erlang':'+'
					      (1, _cor1)
				      in  call 'erlang':'put'
					      ('count', _cor2)
			      -| [{'id',{0,0,'-lazy_gen/1-fun-0-'}}] )
			in  let <_cor4> =
				%% Line 774
				call 'erlang':'-'
				    (_cor0, 1)
			    in  let <_cor5> =
				    %% Line 774
				    apply 'lazy_gen'/1
					(_cor4)
				in  %% Line 773
				    [{773,_cor3}|_cor5]
		    %% Line 775
		    <> when 'true' ->
			%% Line 776
			[]
		  end
	      -| [{'id',{0,0,'-lazy_gen/1-fun-1-'}}] )
	in  %% Line 770
	    {'generator',_cor6}
'test'/0 =
    fun () ->
	call 'eunit':'test'
	    ('eunit_data')
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('eunit_data')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('eunit_data', _cor0)
end