module 'eunit_tty' ['handle_begin'/3,
		    'handle_cancel'/3,
		    'handle_end'/3,
		    'init'/1,
		    'module_info'/0,
		    'module_info'/1,
		    'start'/0,
		    'start'/1,
		    'terminate'/2,
		    'test'/0]
    attributes [%% Line 24
		'behaviour' =
		    %% Line 24
		    ['eunit_listener']]
'start'/0 =
    %% Line 39
    fun () ->
	%% Line 40
	apply 'start'/1
	    ([])
'start'/1 =
    %% Line 42
    fun (_cor0) ->
	%% Line 43
	call 'eunit_listener':'start'
	    ('eunit_tty', _cor0)
'init'/1 =
    %% Line 45
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 46
	    call 'proplists':'get_bool'
		('verbose', _cor0)
	in  let <St> = {%% Line 46
		 'state',_cor1,0}
	    in  let <_cor3> =
		    %% Line 47
		    call 'proplists':'get_bool'
			('no_tty', _cor0)
		in  do  %% Line 47
			call 'erlang':'put'
			    ('no_tty', _cor3)
			%% Line 48
			receive
			  %% Line 49
			  <{'start',_X_Reference}> when 'true' ->
			      do  %% Line 50
				  case <> of
				    <>
					when ( try
						( case <> of
						    ( <>
							  when ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'is_record'
												   -| ['compiler_generated'] )
								  (St,
								   ( 'state'
								     -| ['compiler_generated'] ),
								   ( 3
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] ) ->
							  let <_cor8> =
							      ( call 'erlang':'element'
								    (2, St)
								-| ['compiler_generated'] )
							  in  ( call 'erlang':'=:='
								    (_cor8, 'true')
								-| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						    ( <> when 'true' ->
							  'false'
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false'
					    -| ['compiler_generated'] ) ->
					apply 'print_header'/0
					    ()
				    %% Line 51
				    <> when 'true' ->
					'ok'
				  end
				  %% Line 53
				  St
			after 'infinity' ->
			  'true'
'terminate'/2 =
    %% Line 56
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'ok',Data},St> when 'true' ->
	      let <Pass> =
		  %% Line 57
		  call 'proplists':'get_value'
		      ('pass', Data, 0)
	      in  let <Fail> =
		      %% Line 58
		      call 'proplists':'get_value'
			  ('fail', Data, 0)
		  in  let <Skip> =
			  %% Line 59
			  call 'proplists':'get_value'
			      ('skip', Data, 0)
		      in  let <Cancel> =
			      %% Line 60
			      call 'proplists':'get_value'
				  ('cancel', Data, 0)
			  in  %% Line 61
			      case <> of
				<>
				    when try
					  let <_cor6> =
					      call 'erlang':'=:='
						  (Fail, 0)
					  in  let <_cor7> =
						  call 'erlang':'=:='
						      (Skip, 0)
					      in  let <_cor8> =
						      call 'erlang':'=:='
							  (Cancel, 0)
						  in  let <_cor9> =
							  call 'erlang':'and'
							      (_cor7, _cor8)
						      in  call 'erlang':'and'
							      (_cor6, _cor9)
				      of <Try> ->
					  Try
				      catch <T,R> ->
					  'false' ->
				    do  %% Line 62
					case <> of
					  <>
					      when call 'erlang':'=:='
						    (Pass,
						     0) ->
					      %% Line 63
					      apply 'fwrite'/1
						  ([32|[32|[84|[104|[101|[114|[101|[32|[119|[101|[114|[101|[32|[110|[111|[32|[116|[101|[115|[116|[115|[32|[116|[111|[32|[114|[117|[110|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
					  %% Line 64
					  <> when 'true' ->
					      do  %% Line 65
						  case <> of
						    <>
							when ( try
								( case <> of
								    ( <>
									  when ( call ( 'erlang'
										     -| ['compiler_generated'] ):( 'is_record'
														   -| ['compiler_generated'] )
										  (St,
										   ( 'state'
										     -| ['compiler_generated'] ),
										   ( 3
										     -| ['compiler_generated'] ))
									      -| ['compiler_generated'] ) ->
									  let <_cor14> =
									      ( call 'erlang':'element'
										    (2, St)
										-| ['compiler_generated'] )
									  in  ( call 'erlang':'=:='
										    (_cor14, 'true')
										-| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								    ( <> when 'true' ->
									  'false'
								      -| ['compiler_generated'] )
								  end
								  -| ['compiler_generated'] )
							    of <Try> ->
								Try
							    catch <T,R> ->
								'false'
							    -| ['compiler_generated'] ) ->
							apply 'print_bar'/0
							    ()
						    %% Line 66
						    <> when 'true' ->
							'ok'
						  end
						  %% Line 68
						  case <> of
						    <>
							when call 'erlang':'=:='
							      (Pass,
							       1) ->
							%% Line 69
							apply 'fwrite'/1
							    ([32|[32|[84|[101|[115|[116|[32|[112|[97|[115|[115|[101|[100|[46|[10]]]]]]]]]]]]]]])
						    %% Line 70
						    <> when 'true' ->
							%% Line 71
							apply 'fwrite'/2
							    ([32|[32|[65|[108|[108|[32|[126|[119|[32|[116|[101|[115|[116|[115|[32|[112|[97|[115|[115|[101|[100|[46|[10]]]]]]]]]]]]]]]]]]]]]]], [Pass|[]])
						  end
					end
					%% Line 74
					apply 'sync_end'/1
					    ('ok')
				%% Line 75
				<> when 'true' ->
				    do  %% Line 76
					apply 'print_bar'/0
					    ()
					do  %% Line 77
					    apply 'fwrite'/2
						([32|[32|[70|[97|[105|[108|[101|[100|[58|[32|[126|[119|[46|[32|[32|[83|[107|[105|[112|[112|[101|[100|[58|[32|[126|[119|[46|[32|[32|[80|[97|[115|[115|[101|[100|[58|[32|[126|[119|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 78
																																		   [Fail|[Skip|[Pass|[]]]])
					    do  %% Line 79
						case <> of
						  <>
						      when call 'erlang':'=/='
							    (Cancel,
							     0) ->
						      %% Line 80
						      apply 'fwrite'/1
							  ([79|[110|[101|[32|[111|[114|[32|[109|[111|[114|[101|[32|[116|[101|[115|[116|[115|[32|[119|[101|[114|[101|[32|[99|[97|[110|[99|[101|[108|[108|[101|[100|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
						  %% Line 81
						  <> when 'true' ->
						      'ok'
						end
						%% Line 83
						apply 'sync_end'/1
						    ('error')
			      end
	  %% Line 85
	  <{'error',Reason},_X_St> when 'true' ->
	      do  %% Line 86
		  apply 'fwrite'/2
		      ([73|[110|[116|[101|[114|[110|[97|[108|[32|[101|[114|[114|[111|[114|[58|[32|[126|[80|[46|[10]]]]]]]]]]]]]]]]]]]], [Reason|[25]])
		  %% Line 87
		  apply 'sync_end'/1
		      ('error')
	  ( <_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16})
		  -| [{'function_name',{'terminate',2}}] )
	    -| ['compiler_generated'] )
	end
'sync_end'/1 =
    %% Line 89
    fun (_cor0) ->
	%% Line 90
	receive
	  %% Line 91
	  <{'stop',Reference,ReplyTo}> when 'true' ->
	      do  %% Line 92
		  call 'erlang':'!'
		      (ReplyTo, {'result',Reference,_cor0})
		  %% Line 93
		  'ok'
	after 'infinity' ->
	  'true'
'print_header'/0 =
    %% Line 96
    fun () ->
	%% Line 97
	apply 'fwrite'/1
	    ([61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[32|[69|[85|[110|[105|[116|[32|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
'print_bar'/0 =
    %% Line 99
    fun () ->
	%% Line 100
	apply 'fwrite'/1
	    ([61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
'handle_begin'/3 =
    %% Line 103
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'group',Data,St> when 'true' ->
	      let <Desc> =
		  %% Line 105
		  call 'proplists':'get_value'
		      ('desc', Data)
	      in  %% Line 106
		  case <> of
		    <>
			when try
			      let <_cor4> =
				  call 'erlang':'=/='
				      (Desc, [])
			      in  let <_cor5> =
				      call 'erlang':'=/='
					  (Desc, 'undefined')
				  in  ( case <> of
					  ( <>
						when ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'is_record'
											 -| ['compiler_generated'] )
							(St,
							 ( 'state'
							   -| ['compiler_generated'] ),
							 ( 3
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] ) ->
						let <_cor10> =
						    ( call 'erlang':'element'
							  (2, St)
						      -| ['compiler_generated'] )
						in  let <_cor11> =
							( call 'erlang':'=:='
							      (_cor10, 'true')
							  -| ['compiler_generated'] )
						    in  let <_cor13> =
							    ( call 'erlang':'and'
								  (_cor5, _cor11)
							      -| ['compiler_generated'] )
							in  ( call 'erlang':'and'
								  (_cor4, _cor13)
							      -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						'false'
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			%% Line 107
			( case St of
			    ( <( {'state',_cor31,_rec0}
				 -| ['compiler_generated'] )> when 'true' ->
				  do  %% Line 108
				      apply 'print_group_start'/2
					  (_rec0, Desc)
				      let <_rec1> =
					  %% Line 109
					  call 'erlang':'+'
					      (_rec0, 1)
				      in  %% Line 109
					  call 'erlang':'setelement'
					      (3, St, _rec1)
			      -| ['compiler_generated'] )
			    ( <_cor32> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 110
		    <> when 'true' ->
			%% Line 111
			St
		  end
	  %% Line 113
	  <'test',Data,St> when 'true' ->
	      do  %% Line 115
		  case <> of
		    <>
			when ( try
				( case <> of
				    ( <>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_record'
										   -| ['compiler_generated'] )
						  (St,
						   ( 'state'
						     -| ['compiler_generated'] ),
						   ( 3
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] ) ->
					  let <_cor24> =
					      ( call 'erlang':'element'
						    (2, St)
						-| ['compiler_generated'] )
					  in  ( call 'erlang':'=:='
						    (_cor24, 'true')
						-| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  'false'
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false'
			    -| ['compiler_generated'] ) ->
			( case St of
			    ( <( {'state',_cor36,_rec3}
				 -| ['compiler_generated'] )> when 'true' ->
				  apply 'print_test_begin'/2
				      (_rec3, Data)
			      -| ['compiler_generated'] )
			    ( <_cor37> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 116
		    <> when 'true' ->
			'ok'
		  end
		  %% Line 118
		  St
	  ( <_cor30,_cor29,_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor30,_cor29,_cor28})
		  -| [{'function_name',{'handle_begin',3}}] )
	    -| ['compiler_generated'] )
	end
'handle_end'/3 =
    %% Line 120
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'group',Data,St> when 'true' ->
	      let <Desc> =
		  %% Line 122
		  call 'proplists':'get_value'
		      ('desc', Data)
	      in  %% Line 123
		  case <> of
		    <>
			when try
			      let <_cor4> =
				  call 'erlang':'=/='
				      (Desc, [])
			      in  let <_cor5> =
				      call 'erlang':'=/='
					  (Desc, 'undefined')
				  in  ( case <> of
					  ( <>
						when ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'is_record'
											 -| ['compiler_generated'] )
							(St,
							 ( 'state'
							   -| ['compiler_generated'] ),
							 ( 3
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] ) ->
						let <_cor10> =
						    ( call 'erlang':'element'
							  (2, St)
						      -| ['compiler_generated'] )
						in  let <_cor11> =
							( call 'erlang':'=:='
							      (_cor10, 'true')
							  -| ['compiler_generated'] )
						    in  let <_cor13> =
							    ( call 'erlang':'and'
								  (_cor5, _cor11)
							      -| ['compiler_generated'] )
							in  ( call 'erlang':'and'
								  (_cor4, _cor13)
							      -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						'false'
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			let <Time> =
			    %% Line 124
			    call 'proplists':'get_value'
				('time', Data)
			in  %% Line 125
			    ( case St of
				( <( {'state',_cor39,_rec4}
				     -| ['compiler_generated'] )> when 'true' ->
				      do  %% Line 126
					  apply 'print_group_end'/2
					      (_rec4, Time)
					  let <_rec5> =
					      %% Line 127
					      call 'erlang':'-'
						  (_rec4, 1)
					  in  %% Line 127
					      call 'erlang':'setelement'
						  (3, St, _rec5)
				  -| ['compiler_generated'] )
				( <_cor40> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','state'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		    %% Line 128
		    <> when 'true' ->
			%% Line 129
			St
		  end
	  %% Line 131
	  <'test',Data,St> when 'true' ->
	      %% Line 133
	      case call 'proplists':'get_value'
		       ('status', Data) of
		%% Line 134
		<'ok'> when 'true' ->
		    do  %% Line 135
			case <> of
			  <>
			      when ( try
				      ( case <> of
					  ( <>
						when ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'is_record'
											 -| ['compiler_generated'] )
							(St,
							 ( 'state'
							   -| ['compiler_generated'] ),
							 ( 3
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] ) ->
						let <_cor25> =
						    ( call 'erlang':'element'
							  (2, St)
						      -| ['compiler_generated'] )
						in  ( call 'erlang':'=:='
							  (_cor25, 'true')
						      -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						'false'
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false'
				  -| ['compiler_generated'] ) ->
			      apply 'print_test_end'/1
				  (Data)
			  %% Line 136
			  <> when 'true' ->
			      'ok'
			end
			%% Line 138
			St
		%% Line 139
		<Status> when 'true' ->
		    do  %% Line 140
			case <> of
			  <>
			      when ( try
				      ( case <> of
					  ( <>
						when ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'is_record'
											 -| ['compiler_generated'] )
							(St,
							 ( 'state'
							   -| ['compiler_generated'] ),
							 ( 3
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] ) ->
						let <_cor31> =
						    ( call 'erlang':'element'
							  (2, St)
						      -| ['compiler_generated'] )
						in  ( call 'erlang':'=:='
							  (_cor31, 'true')
						      -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						'false'
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false'
				  -| ['compiler_generated'] ) ->
			      'ok'
			  %% Line 141
			  <> when 'true' ->
			      ( case St of
				  ( <( {'state',_cor44,_rec7}
				       -| ['compiler_generated'] )> when 'true' ->
					apply 'print_test_begin'/2
					    (_rec7, Data)
				    -| ['compiler_generated'] )
				  ( <_cor45> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','state'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			end
			do  %% Line 143
			    apply 'print_test_error'/2
				(Status, Data)
			    %% Line 144
			    St
	      end
	  ( <_cor38,_cor37,_cor36> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor38,_cor37,_cor36})
		  -| [{'function_name',{'handle_end',3}}] )
	    -| ['compiler_generated'] )
	end
'handle_cancel'/3 =
    %% Line 147
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'group',Data,St> when 'true' ->
	      %% Line 149
	      ( case St of
		  ( <( {'state',_cor36,_rec8}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 150
			case call 'proplists':'get_value'
				 ('reason', Data) of
			  %% Line 151
			  <'undefined'> when 'true' ->
			      let <_rec9> =
				  %% Line 153
				  call 'erlang':'-'
				      (_rec8, 1)
			      in  %% Line 153
				  call 'erlang':'setelement'
				      (3, St, _rec9)
			  %% Line 154
			  <Reason> when 'true' ->
			      let <Desc> =
				  %% Line 155
				  call 'proplists':'get_value'
				      ('desc', Data)
			      in  do  %% Line 156
				      case <> of
					<>
					    when try
						  let <_cor10> =
						      call 'erlang':'=/='
							  (Desc, [])
						  in  let <_cor11> =
							  call 'erlang':'=/='
							      (Desc, 'undefined')
						      in  let <_cor17> =
							      ( call 'erlang':'=:='
								    (_cor36, 'true')
								-| ['compiler_generated'] )
							  in  let <_cor19> =
								  ( call 'erlang':'and'
									(_cor11, _cor17)
								    -| ['compiler_generated'] )
							      in  ( call 'erlang':'and'
									(_cor10, _cor19)
								    -| ['compiler_generated'] )
					      of <Try> ->
						  Try
					      catch <T,R> ->
						  'false' ->
					    %% Line 157
					    apply 'print_group_cancel'/2
						(_rec8, Reason)
					%% Line 158
					<> when 'true' ->
					    do  %% Line 159
						apply 'print_group_start'/2
						    (_rec8, Desc)
						%% Line 160
						apply 'print_group_cancel'/2
						    (_rec8, Reason)
				      end
				      let <_rec11> =
					  %% Line 162
					  call 'erlang':'-'
					      (_rec8, 1)
				      in  %% Line 162
					  call 'erlang':'setelement'
					      (3, St, _rec11)
			end
		    -| ['compiler_generated'] )
		  ( <_cor37> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 164
	  <'test',Data,St> when 'true' ->
	      do  %% Line 166
		  case <> of
		    <>
			when ( try
				( case <> of
				    ( <>
					  when ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'is_record'
										   -| ['compiler_generated'] )
						  (St,
						   ( 'state'
						     -| ['compiler_generated'] ),
						   ( 3
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] ) ->
					  let <_cor28> =
					      ( call 'erlang':'element'
						    (2, St)
						-| ['compiler_generated'] )
					  in  ( call 'erlang':'=:='
						    (_cor28, 'true')
						-| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  'false'
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false'
			    -| ['compiler_generated'] ) ->
			'ok'
		    %% Line 167
		    <> when 'true' ->
			( case St of
			    ( <( {'state',_cor44,_rec13}
				 -| ['compiler_generated'] )> when 'true' ->
				  apply 'print_test_begin'/2
				      (_rec13, Data)
			      -| ['compiler_generated'] )
			    ( <_cor45> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		  end
		  let <_cor32> =
		      %% Line 169
		      call 'proplists':'get_value'
			  ('reason', Data)
		  in  do  %% Line 169
			  apply 'print_test_cancel'/1
			      (_cor32)
			  %% Line 170
			  St
	  ( <_cor35,_cor34,_cor33> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor35,_cor34,_cor33})
		  -| [{'function_name',{'handle_cancel',3}}] )
	    -| ['compiler_generated'] )
	end
'indent'/1 =
    %% Line 173
    fun (_cor0) ->
	case _cor0 of
	  <N>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'>='
			    (_cor0, 1)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      let <_cor3> =
		  %% Line 174
		  call 'erlang':'*'
		      (N, 2)
	      in  let <_cor4> =
		      %% Line 174
		      call 'lists':'duplicate'
			  (_cor3, 32)
		  in  %% Line 174
		      apply 'fwrite'/1
			  (_cor4)
	  %% Line 175
	  <_X_N> when 'true' ->
	      %% Line 176
	      'ok'
	end
'print_group_start'/2 =
    %% Line 178
    fun (_cor1,_cor0) ->
	do  %% Line 179
	    apply 'indent'/1
		(_cor1)
	    %% Line 180
	    apply 'fwrite'/2
		([126|[115|[10]]], [_cor0|[]])
'print_group_end'/2 =
    %% Line 182
    fun (_cor1,_cor0) ->
	%% Line 183
	case <> of
	  <>
	      when call 'erlang':'>'
		    (_cor0,
		     0) ->
	      do  %% Line 184
		  apply 'indent'/1
		      (_cor1)
		  let <_cor2> =
		      %% Line 185
		      call 'erlang':'/'
			  (_cor0, 1000)
		  in  %% Line 185
		      apply 'fwrite'/2
			  ([91|[100|[111|[110|[101|[32|[105|[110|[32|[126|[46|[51|[102|[32|[115|[93|[10]]]]]]]]]]]]]]]]], [_cor2|[]])
	  %% Line 186
	  <> when 'true' ->
	      %% Line 187
	      'ok'
	end
'print_test_begin'/2 =
    %% Line 190
    fun (_cor1,_cor0) ->
	let <Desc> =
	    %% Line 191
	    call 'proplists':'get_value'
		('desc', _cor0)
	in  let <Line> =
		%% Line 192
		call 'proplists':'get_value'
		    ('line', _cor0, 0)
	    in  do  %% Line 193
		    apply 'indent'/1
			(_cor1)
		    let <_cor4> =
			%% Line 194
			case <> of
			  <>
			      when call 'erlang':'=:='
				    (Line,
				     0) ->
			      []
			  %% Line 195
			  <> when 'true' ->
			      call 'io_lib':'fwrite'
				  ([126|[119|[58]]], [Line|[]])
			end
		    in  let <_cor8> =
			    %% Line 197
			    case <> of
			      <>
				  when let <_cor6> =
					call 'erlang':'=:='
					    (Desc, [])
				    in  let <_cor7> =
					    call 'erlang':'=:='
						(Desc, 'undefined')
					in  call 'erlang':'or'
						(_cor6, _cor7) ->
				  []
			      %% Line 198
			      <> when 'true' ->
				  call 'io_lib':'fwrite'
				      ([32|[40|[126|[115|[41]]]]], [Desc|[]])
			    end
			in  %% Line 200
			    case call 'proplists':'get_value'
				     ('source', _cor0) of
			      %% Line 201
			      <{Module,Name,_X_Arity}> when 'true' ->
				  %% Line 202
				  apply 'fwrite'/2
				      ([126|[115|[58|[126|[115|[32|[126|[115|[126|[115|[46|[46|[46]]]]]]]]]]]]], [Module|[_cor4|[Name|[_cor8|[]]]]])
			      %% Line 203
			      <_cor13> when 'true' ->
				  %% Line 204
				  apply 'fwrite'/2
				      ([126|[115|[126|[115|[46|[46|[46]]]]]]], [_cor4|[_cor8|[]]])
			    end
'print_test_end'/1 =
    %% Line 207
    fun (_cor0) ->
	let <Time> =
	    %% Line 208
	    call 'proplists':'get_value'
		('time', _cor0, 0)
	in  let <_cor3> =
		%% Line 209
		case <> of
		  <>
		      when call 'erlang':'>'
			    (Time,
			     0) ->
		      let <_cor2> =
			  call 'erlang':'/'
			      (Time, 1000)
		      in  call 'io_lib':'fwrite'
			      ([91|[126|[46|[51|[102|[32|[115|[93|[32]]]]]]]]], [_cor2|[]])
		  %% Line 210
		  <> when 'true' ->
		      []
		end
	    in  %% Line 212
		apply 'fwrite'/2
		    ([126|[115|[111|[107|[10]]]]], [_cor3|[]])
'print_test_error'/2 =
    %% Line 214
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'error',Exception},Data> when 'true' ->
	      let <Output> =
		  %% Line 215
		  call 'proplists':'get_value'
		      ('output', Data)
	      in  let <_cor3> =
		      %% Line 216
		      call 'eunit_lib':'format_exception'
			  (Exception)
		  in  do  %% Line 216
			  apply 'fwrite'/2
			      ([42|[102|[97|[105|[108|[101|[100|[42|[10|[126|[115]]]]]]]]]]], [_cor3|[]])
			  %% Line 217
			  case ( Output
				 -| ['reuse_for_context'] ) of
			    %% Line 218
			    <#{}#> when 'true' ->
				%% Line 219
				apply 'fwrite'/1
				    ([10|[10]])
			    %% Line 220
			    <#{#<Text>(800,8,'binary',['unsigned'|['big']]),
			       #<_cor8>(1,8,'binary',['unsigned'|['big']]),
			       #<_cor9>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
				%% Line 221
				apply 'fwrite'/2
				    ([32|[32|[111|[117|[116|[112|[117|[116|[58|[60|[60|[34|[126|[115|[34|[62|[62|[46|[46|[46|[10|[10]]]]]]]]]]]]]]]]]]]]]], [Text|[]])
			    %% Line 222
			    <_cor10> when 'true' ->
				do  primop 'bs_context_to_binary'
					(Output)
				    %% Line 223
				    apply 'fwrite'/2
					([32|[32|[111|[117|[116|[112|[117|[116|[58|[60|[60|[34|[126|[115|[34|[62|[62|[10|[10]]]]]]]]]]]]]]]]]]], [Output|[]])
			  end
	  %% Line 225
	  <{'skipped',Reason},_cor11> when 'true' ->
	      let <_cor5> =
		  %% Line 226
		  apply 'format_skipped'/1
		      (Reason)
	      in  %% Line 226
		  apply 'fwrite'/2
		      ([42|[100|[105|[100|[32|[110|[111|[116|[32|[114|[117|[110|[42|[10|[58|[58|[126|[115|[10]]]]]]]]]]]]]]]]]]], [_cor5|[]])
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'print_test_error',2}}] )
	    -| ['compiler_generated'] )
	end
'format_skipped'/1 =
    %% Line 228
    fun (_cor0) ->
	case _cor0 of
	  <{'module_not_found',M}> when 'true' ->
	      %% Line 229
	      call 'io_lib':'fwrite'
		  ([109|[105|[115|[115|[105|[110|[103|[32|[109|[111|[100|[117|[108|[101|[58|[32|[126|[119]]]]]]]]]]]]]]]]]], [M|[]])
	  %% Line 230
	  <{'no_such_function',{M,F,A}}> when 'true' ->
	      %% Line 231
	      call 'io_lib':'fwrite'
		  ([110|[111|[32|[115|[117|[99|[104|[32|[102|[117|[110|[99|[116|[105|[111|[110|[58|[32|[126|[119|[58|[126|[119|[47|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]], [M|[F|[A|[]]]])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'format_skipped',1}}] )
	    -| ['compiler_generated'] )
	end
'print_test_cancel'/1 =
    %% Line 233
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 234
	    apply 'format_cancel'/1
		(_cor0)
	in  %% Line 234
	    apply 'fwrite'/1
		(_cor1)
'print_group_cancel'/2 =
    %% Line 236
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_I,{'blame',_cor5}> when 'true' ->
	      %% Line 237
	      'ok'
	  %% Line 238
	  <I,Reason> when 'true' ->
	      do  %% Line 239
		  apply 'indent'/1
		      (I)
		  let <_cor2> =
		      %% Line 240
		      apply 'format_cancel'/1
			  (Reason)
		  in  %% Line 240
		      apply 'fwrite'/1
			  (_cor2)
	end
'format_cancel'/1 =
    %% Line 242
    fun (_cor0) ->
	case _cor0 of
	  <'undefined'> when 'true' ->
	      %% Line 243
	      [42|[115|[107|[105|[112|[112|[101|[100|[42|[10]]]]]]]]]]
	  %% Line 244
	  <'timeout'> when 'true' ->
	      %% Line 245
	      [42|[116|[105|[109|[101|[100|[32|[111|[117|[116|[42|[10]]]]]]]]]]]]
	  %% Line 246
	  <{'startup',Reason}> when 'true' ->
	      %% Line 247
	      call 'io_lib':'fwrite'
		  ([42|[99|[111|[117|[108|[100|[32|[110|[111|[116|[32|[115|[116|[97|[114|[116|[32|[116|[101|[115|[116|[32|[112|[114|[111|[99|[101|[115|[115|[42|[10|[58|[58|[126|[80|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 248
																												   [Reason|[15]])
	  %% Line 249
	  <{'blame',_X_SubId}> when 'true' ->
	      %% Line 250
	      [42|[99|[97|[110|[99|[101|[108|[108|[101|[100|[32|[98|[101|[99|[97|[117|[115|[101|[32|[111|[102|[32|[115|[117|[98|[116|[97|[115|[107|[42|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 251
	  <{'exit',Reason}> when 'true' ->
	      %% Line 252
	      call 'io_lib':'fwrite'
		  ([42|[117|[110|[101|[120|[112|[101|[99|[116|[101|[100|[32|[116|[101|[114|[109|[105|[110|[97|[116|[105|[111|[110|[32|[111|[102|[32|[116|[101|[115|[116|[32|[112|[114|[111|[99|[101|[115|[115|[42|[10|[58|[58|[126|[80|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 253
																																			       [Reason|[15]])
	  %% Line 254
	  <{'abort',Reason}> when 'true' ->
	      %% Line 255
	      call 'eunit_lib':'format_error'
		  (Reason)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'format_cancel',1}}] )
	    -| ['compiler_generated'] )
	end
'fwrite'/1 =
    %% Line 257
    fun (_cor0) ->
	%% Line 258
	apply 'fwrite'/2
	    (_cor0, [])
'fwrite'/2 =
    %% Line 260
    fun (_cor1,_cor0) ->
	%% Line 261
	case call 'erlang':'get'
		 ('no_tty') of
	  %% Line 262
	  <'false'> when 'true' ->
	      call 'io':'fwrite'
		  (_cor1, _cor0)
	  %% Line 263
	  <'true'> when 'true' ->
	      'ok'
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'test'/0 =
    fun () ->
	call 'eunit':'test'
	    ('eunit_tty')
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('eunit_tty')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('eunit_tty', _cor0)
end