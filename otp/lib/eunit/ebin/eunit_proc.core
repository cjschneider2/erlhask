module 'eunit_proc' ['child_test_'/0,
		     'group_leader_process'/1,
		     'io_error_test_'/0,
		     'module_info'/0,
		     'module_info'/1,
		     'start'/4,
		     'test'/0]
    attributes []
'start'/4 =
    %% Line 42
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Tests,Order,Super,Reference>
	      when let <_cor4> =
		    %% Line 43
		    call 'erlang':'is_pid'
			(Super)
		in  let <_cor5> =
			%% Line 43
			call 'erlang':'is_reference'
			    (Reference)
		    in  %% Line 43
			call 'erlang':'and'
			    (_cor4, _cor5) ->
	      let <St> =
		  %% Line 44
		  {'procstate',Reference,%% Line 45
					 [],%% Line 46
					    Super,'undefined','undefined',%% Line 47
									  Order}
	      in  %% Line 48
		  apply 'spawn_group'/3
		      ('local', {'group','undefined','undefined','undefined','undefined','undefined',Tests}, St)
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'start',4}}] )
	    -| ['compiler_generated'] )
	end
'message_super'/3 =
    %% Line 95
    fun (_cor2,_cor1,_cor0) ->
	%% Line 96
	( case _cor0 of
	    ( <( {'procstate',_cor8,_cor9,_rec0,_cor10,_cor11,_cor12}
		 -| ['compiler_generated'] )> when 'true' ->
		  call 'erlang':'!'
		      (_rec0, {'status',_cor2,_cor1})
	      -| ['compiler_generated'] )
	    ( <_cor13> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','procstate'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'start_task'/3 =
    %% Line 142
    fun (_cor2,_cor1,_cor0) ->
	let <_rec1> =
	    %% Line 143
	    call 'erlang':'self'
		()
	in  %% Line 143
	    case _cor0 of
	      <{'procstate',_cor22,_cor23,_cor24,_cor25,_cor26,_cor27}> when 'true' ->
		  let <_cor6> =
		      call 'erlang':'setelement'
			  (6, _cor0, _rec1)
		  in  let <F> =
			  %% Line 147
			  ( fun () ->
				apply 'insulator_process'/3
				    (_cor2, _cor1, _cor6)
			    -| [{'id',{0,0,'-start_task/3-fun-0-'}}] )
		      in  %% Line 148
			  case _cor2 of
			    %% Line 149
			    <'local'> when 'true' ->
				%% Line 153
				call 'erlang':'spawn_link'
				    (F)
			    %% Line 154
			    <{'remote',Node}> when 'true' ->
				let <Pid> =
				    %% Line 155
				    call 'erlang':'spawn_link'
					(Node, F)
				in  %% Line 158
				    ( case _cor6 of
					( <( {'procstate',_rec3,_cor29,_cor30,_cor31,_cor32,_cor33}
					     -| ['compiler_generated'] )> when 'true' ->
					      let <Monitor> =
						  %% Line 159
						  call 'erlang':'monitor'
						      ('process', Pid)
					      in  do  %% Line 162
						      receive
							%% Line 163
							<{'ok',_cor35,_cor36}>
							    when let <_cor37> =
								  call 'erlang':'=:='
								      (_cor35, _rec3)
							      in  let <_cor38> =
								      call 'erlang':'=:='
									  (_cor36, Pid)
								  in  call 'erlang':'and'
									  (_cor37, _cor38) ->
							    'ok'
							%% Line 165
							<{'DOWN',_cor39,'process',_cor40,Reason}>
							    when let <_cor41> =
								  call 'erlang':'=:='
								      (_cor39, Monitor)
							      in  let <_cor42> =
								      call 'erlang':'=:='
									  (_cor40, Pid)
								  in  call 'erlang':'and'
									  (_cor41, _cor42) ->
							    let <Msg> = {%% Line 168
								 'startup',%% Line 168
									   Reason}
							    in  do  %% Line 169
								    apply 'message_super'/3
									(_cor29, {'cancel',Msg}, _cor6)
								    let <_cor17> =
									%% Line 170
									call 'erlang':'self'
									    ()
								    in  %% Line 170
									call 'erlang':'!'
									    (_cor17, {'done',_rec3,Pid})
						      after 'infinity' ->
							'ok'
						      do  %% Line 172
							  call 'erlang':'demonitor'
							      (Monitor, ['flush'])
							  %% Line 173
							  Pid
					  -| ['compiler_generated'] )
					( <_cor34> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','procstate'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
			    ( <_cor18> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor18})
			      -| ['compiler_generated'] )
			  end
	      ( <_cor28> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','procstate'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
'insulator_process'/3 =
    %% Line 193
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 194
	    call 'erlang':'process_flag'
		('trap_exit', 'true')
	    %% Line 195
	    ( case _cor0 of
		( <( {'procstate',_cor20,_cor21,_cor22,_cor23,_rec5,_cor24}
		     -| ['compiler_generated'] )> when 'true' ->
		      do  %% Line 196
			  case <> of
			    <>
				when call 'erlang':'=:='
				      (_cor2,
				       'local') ->
				'ok'
			    %% Line 197
			    <> when 'true' ->
				let <_cor6> =
				    call 'erlang':'self'
					()
				in  call 'erlang':'!'
					(_rec5, {'ok',_cor20,_cor6})
			  end
			  let <_rec7> =
			      %% Line 199
			      call 'erlang':'self'
				  ()
			  in  let <_cor12> =
				  %% Line 199
				  call 'erlang':'setelement'
				      (5, _cor0, _rec7)
			      in  let <_cor15> =
				      %% Line 200
				      ( fun () ->
					    let <_cor14> =
						apply _cor1
						    (_cor12)
					    in  apply 'child_process'/2
						    (_cor14, _cor12)
					-| [{'id',{0,0,'-insulator_process/3-fun-0-'}}] )
				  in  let <Child> =
					  %% Line 200
					  call 'erlang':'spawn_link'
					      (_cor15)
				      in  %% Line 201
					  apply 'insulator_wait'/4
					      (Child, _rec5, [], _cor12)
		  -| ['compiler_generated'] )
		( <_cor25> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','procstate'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'insulator_wait'/4 =
    %% Line 227
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 228
	receive
	  %% Line 229
	  <{'child',_cor17,Id,{'begin',Type,Data}}>
	      when call 'erlang':'=:='
		    (_cor17,
		     _cor3) ->
	      do  %% Line 230
		  apply 'message_super'/3
		      (Id, {'progress','begin',{Type,Data}}, _cor0)
		  %% Line 231
		  apply 'insulator_wait'/4
		      (_cor3, _cor2, [[]|_cor1], _cor0)
	  %% Line 232
	  <{'child',_cor18,Id,{'end',Status,Time}}>
	      when call 'erlang':'=:='
		    (_cor18,
		     _cor3) ->
	      let <_cor4> =
		  %% Line 233
		  call 'erlang':'hd'
		      (_cor1)
	      in  let <_cor5> =
		      %% Line 233
		      apply 'buffer_to_binary'/1
			  (_cor4)
		  in  let <Data> =
			  %% Line 233
			  [{'time',Time}|[{'output',_cor5}|[]]]
		      in  do  %% Line 234
			      apply 'message_super'/3
				  (Id, {'progress','end',{Status,Data}}, _cor0)
			      let <_cor7> =
				  %% Line 235
				  call 'erlang':'tl'
				      (_cor1)
			      in  %% Line 235
				  apply 'insulator_wait'/4
				      (_cor3, _cor2, _cor7, _cor0)
	  %% Line 236
	  <{'child',_cor19,Id,{'skipped',Reason}}>
	      when call 'erlang':'=:='
		    (_cor19,
		     _cor3) ->
	      do  %% Line 238
		  apply 'message_super'/3
		      (Id, {'cancel',{'abort',Reason}}, _cor0)
		  %% Line 239
		  apply 'insulator_wait'/4
		      (_cor3, _cor2, _cor1, _cor0)
	  %% Line 240
	  <{'child',_cor20,Id,{'abort',Cause}}>
	      when call 'erlang':'=:='
		    (_cor20,
		     _cor3) ->
	      do  %% Line 243
		  apply 'exit_messages'/3
		      (Id, {'abort',Cause}, _cor0)
		  %% Line 245
		  apply 'terminate_insulator'/1
		      (_cor0)
	  %% Line 246
	  <{'io_request',_cor21,ReplyAs,Req}>
	      when call 'erlang':'=:='
		    (_cor21,
		     _cor3) ->
	      let <_cor8> =
		  %% Line 251
		  call 'erlang':'hd'
		      (_cor1)
	      in  let <Buf1> =
		      %% Line 251
		      apply 'io_request'/4
			  (_cor3, ReplyAs, Req, _cor8)
		  in  let <_cor10> =
			  %% Line 252
			  call 'erlang':'tl'
			      (_cor1)
		      in  %% Line 252
			  apply 'insulator_wait'/4
			      (_cor3, _cor2, [Buf1|_cor10], _cor0)
	  %% Line 253
	  <{'io_request',From,ReplyAs,Req}>
	      when call 'erlang':'is_pid'
		    (From) ->
	      do  %% Line 256
		  apply 'io_request'/4
		      (From, ReplyAs, Req, [])
		  %% Line 257
		  apply 'insulator_wait'/4
		      (_cor3, _cor2, _cor1, _cor0)
	  %% Line 258
	  <{'timeout',_cor22,Id}>
	      when call 'erlang':'=:='
		    (_cor22,
		     _cor3) ->
	      do  %% Line 259
		  apply 'exit_messages'/3
		      (Id, 'timeout', _cor0)
		  %% Line 260
		  apply 'kill_task'/2
		      (_cor3, _cor0)
	  %% Line 261
	  <{'EXIT',_cor23,'normal'}>
	      when call 'erlang':'=:='
		    (_cor23,
		     _cor3) ->
	      %% Line 262
	      apply 'terminate_insulator'/1
		  (_cor0)
	  %% Line 263
	  <{'EXIT',_cor24,Reason}>
	      when call 'erlang':'=:='
		    (_cor24,
		     _cor3) ->
	      %% Line 264
	      ( case _cor0 of
		  ( <( {'procstate',_cor25,_rec9,_cor26,_cor27,_cor28,_cor29}
		       -| ['compiler_generated'] )> when 'true' ->
			do  apply 'exit_messages'/3
				(_rec9, {'exit',Reason}, _cor0)
			    %% Line 265
			    apply 'terminate_insulator'/1
				(_cor0)
		    -| ['compiler_generated'] )
		  ( <_cor30> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','procstate'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 266
	  <{'EXIT',_cor31,_cor32}>
	      when call 'erlang':'=:='
		    (_cor31,
		     _cor2) ->
	      %% Line 268
	      apply 'kill_task'/2
		  (_cor3, _cor0)
	after 'infinity' ->
	  'true'
'kill_task'/2 =
    %% Line 271
    fun (_cor1,_cor0) ->
	do  %% Line 272
	    call 'erlang':'exit'
		(_cor1, 'kill')
	    %% Line 273
	    apply 'terminate_insulator'/1
		(_cor0)
'buffer_to_binary'/1 =
    %% Line 275
    fun (_cor0) ->
	case _cor0 of
	  <[B|[]]>
	      when call 'erlang':'is_binary'
		    (B) ->
	      B
	  %% Line 276
	  <Buf> when 'true' ->
	      let <_cor1> =
		  call 'lists':'reverse'
		      (Buf)
	      in  call 'erlang':'list_to_binary'
		      (_cor1)
	end
'terminate_insulator'/1 =
    %% Line 281
    fun (_cor0) ->
	%% Line 283
	( case _cor0 of
	    ( <( {'procstate',_cor8,_cor9,_cor10,_cor11,_rec10,_cor12}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor4> =
		      %% Line 284
		      call 'erlang':'self'
			  ()
		  in  do  %% Line 284
			  call 'erlang':'!'
			      (_rec10, {'done',_cor8,_cor4})
			  do  %% Line 285
			      call 'erlang':'unlink'
				  (_rec10)
			      %% Line 286
			      call 'erlang':'exit'
				  ('normal')
	      -| ['compiler_generated'] )
	    ( <_cor13> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','procstate'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'exit_messages'/3 =
    %% Line 290
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 292
	    apply 'message_super'/3
		(_cor2, {'cancel',_cor1}, _cor0)
	    %% Line 293
	    ( case _cor0 of
		( <( {'procstate',_cor9,_rec12,_cor10,_cor11,_cor12,_cor13}
		     -| ['compiler_generated'] )> when 'true' ->
		      case _rec12 of
			%% Line 294
			<_cor15>
			    when call 'erlang':'=:='
				  (_rec12,
				   _cor2) ->
			    'ok'
			%% Line 295
			<Id1> when 'true' ->
			    apply 'message_super'/3
				(Id1, {'cancel',{'blame',_cor2}}, _cor0)
		      end
		  -| ['compiler_generated'] )
		( <_cor14> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','procstate'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'message_insulator'/2 =
    %% Line 301
    fun (_cor1,_cor0) ->
	%% Line 302
	( case _cor0 of
	    ( <( {'procstate',_cor9,_cor10,_cor11,_rec13,_cor12,_cor13}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor4> =
		      call 'erlang':'self'
			  ()
		  in  call 'erlang':'!'
			  (_rec13, {'child',_cor4,_cor10,_cor1})
	      -| ['compiler_generated'] )
	    ( <_cor14> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','procstate'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'set_timeout'/2 =
    %% Line 306
    fun (_cor1,_cor0) ->
	%% Line 307
	( case _cor0 of
	    ( <( {'procstate',_cor9,_cor10,_cor11,_rec15,_cor12,_cor13}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor4> =
		      %% Line 308
		      call 'erlang':'self'
			  ()
		  in  call 'erlang':'send_after'
			  (_cor1, _rec15, %% Line 308
					  {'timeout',_cor4,_cor10})
	      -| ['compiler_generated'] )
	    ( <_cor14> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','procstate'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'clear_timeout'/1 =
    %% Line 310
    fun (_cor0) ->
	%% Line 311
	call 'erlang':'cancel_timer'
	    (_cor0)
'with_timeout'/4 =
    %% Line 313
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'undefined',Default,F,St> when 'true' ->
	      %% Line 314
	      apply 'with_timeout'/3
		  (Default, F, St)
	  %% Line 315
	  <Time,_X_Default,F,St> when 'true' ->
	      %% Line 316
	      apply 'with_timeout'/3
		  (Time, F, St)
	end
'with_timeout'/3 =
    %% Line 318
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'infinity',F,_X_St> when 'true' ->
	      %% Line 320
	      case call 'erlang':'statistics'
		       ('wall_clock') of
		<{T0,_cor27}> when 'true' ->
		    let <Value> =
			%% Line 321
			apply F
			    ()
		    in  %% Line 322
			case call 'erlang':'statistics'
				 ('wall_clock') of
			  <{T1,_cor28}> when 'true' ->
			      let <_cor6> =
				  %% Line 323
				  call 'erlang':'-'
				      (T1, T0)
			      in  %% Line 323
				  {Value,_cor6}
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 324
	  <Time,F,St>
	      when let <_cor7> =
		    call 'erlang':'is_integer'
			(Time)
		in  let <_cor8> =
			call 'erlang':'>'
			    (Time, 4294967295)
		    in  call 'erlang':'and'
			    (_cor7, _cor8) ->
	      %% Line 325
	      apply 'with_timeout'/3
		  (4294967295, F, St)
	  %% Line 326
	  <Time,F,St>
	      when let <_cor9> =
		    call 'erlang':'is_integer'
			(Time)
		in  let <_cor10> =
			call 'erlang':'<'
			    (Time, 0)
		    in  call 'erlang':'and'
			    (_cor9, _cor10) ->
	      %% Line 327
	      apply 'with_timeout'/3
		  (0, F, St)
	  %% Line 328
	  <Time,F,St>
	      when call 'erlang':'is_integer'
		    (Time) ->
	      let <Ref> =
		  %% Line 329
		  apply 'set_timeout'/2
		      (Time, St)
	      in  %% Line 330
		  case call 'erlang':'statistics'
			   ('wall_clock') of
		    <{T0,_cor29}> when 'true' ->
			%% Line 331
			letrec
			    'after$^0'/0 =
				fun () ->
				    %% Line 337
				    apply 'clear_timeout'/1
					(Ref)
			in  try
				try
				    apply F
					()
				of <_cor13> ->
				    %% Line 334
				    case call 'erlang':'statistics'
					     ('wall_clock') of
				      <{T1,_cor30}> when 'true' ->
					  let <_cor15> =
					      %% Line 335
					      call 'erlang':'-'
						  (T1, T0)
					  in  %% Line 335
					      {_cor13,_cor15}
				      ( <_cor14> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor14})
					-| ['compiler_generated'] )
				    end
				catch <_cor19,_cor18,_cor17> ->
				    primop 'raise'
					(_cor17, _cor18)
			    of <_cor20> ->
				do  ( apply 'after$^0'/0
					  ()
				      -| ['compiler_generated'] )
				    _cor20
			    catch <_cor23,_cor22,_cor21> ->
				do  ( apply 'after$^0'/0
					  ()
				      -| ['compiler_generated'] )
				    primop 'raise'
					(_cor21, _cor22)
		    ( <_cor12> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor12})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor26,_cor25,_cor24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26,_cor25,_cor24})
		  -| [{'function_name',{'with_timeout',3}}] )
	    -| ['compiler_generated'] )
	end
'child_process'/2 =
    %% Line 347
    fun (_cor1,_cor0) ->
	%% Line 348
	( case _cor0 of
	    ( <( {'procstate',_cor12,_cor13,_cor14,_rec17,_cor15,_cor16}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor2> =
		      call 'erlang':'self'
			  ()
		  in  do  call 'erlang':'group_leader'
			      (_rec17, _cor2)
			  %% Line 349
			  try
			      apply _cor1
				  ()
			  of <_cor5> ->
			      %% Line 350
			      'ok'
			  catch <_cor9,_cor8,_cor7> ->
			      case <_cor9,_cor8,_cor7> of
				%% Line 356
				<'throw',{'eunit_abort',Cause},_cor19> when 'true' ->
				    do  %% Line 357
					apply 'message_insulator'/2
					    ({'abort',Cause}, _cor0)
					%% Line 358
					call 'erlang':'exit'
					    ('aborted')
				( <_cor9,_cor8,_cor7> when 'true' ->
				      primop 'raise'
					  (_cor7, _cor8)
				  -| ['compiler_generated'] )
			      end
	      -| ['compiler_generated'] )
	    ( <_cor17> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','procstate'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'child_test_'/0 =
    %% Line 362
    fun () ->
	let <_cor2> =
	    %% Line 364
	    ( fun () ->
		  let <_cor1> =
		      ( fun () ->
			    case call 'erlang':'process_flag'
				     ('trap_exit', 'false') of
			      <'false'> when 'true' ->
				  'ok'
			      <_X__V> when 'true' ->
				  call 'erlang':'error'
				      ({'assertMatch_failed',[{'module','eunit_proc'}|[{'line',364}|[{'expression',[112|[114|[111|[99|[101|[115|[115|[95|[102|[108|[97|[103|[32|[40|[32|[116|[114|[97|[112|[95|[101|[120|[105|[116|[32|[44|[32|[102|[97|[108|[115|[101|[32|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'pattern',[102|[97|[108|[115|[101]]]]]}|[{'value',_X__V}|[]]]]]]})
			    end
			-| [{'id',{0,0,'-child_test_/0-fun-0-'}}] )
		  in  apply _cor1
			  ()
	      -| [{'id',{0,0,'-child_test_/0-fun-1-'}}] )
	in  %% Line 363
	    [{[116|[101|[115|[116|[32|[112|[114|[111|[99|[101|[115|[115|[101|[115|[32|[100|[111|[32|[110|[111|[116|[32|[116|[114|[97|[112|[32|[101|[120|[105|[116|[32|[115|[105|[103|[110|[97|[108|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],%% Line 364
																													       {364,_cor2}}|%% Line 364
																															    []]
'abort_task'/1 =
    %% Line 370
    fun (_cor0) ->
	%% Line 371
	call 'erlang':'throw'
	    ({'eunit_abort',_cor0})
'wait_for_task'/2 =
    %% Line 386
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 387
	    call 'sets':'from_list'
		([_cor1|[]])
	in  %% Line 387
	    apply 'wait_for_tasks'/2
		(_cor2, _cor0)
'wait_for_tasks'/2 =
    %% Line 389
    fun (_cor1,_cor0) ->
	%% Line 390
	case call 'sets':'size'
		 (_cor1) of
	  %% Line 391
	  <0> when 'true' ->
	      %% Line 392
	      'ok'
	  %% Line 393
	  <_cor9> when 'true' ->
	      %% Line 397
	      ( case _cor0 of
		  ( <( {'procstate',_rec18,_cor10,_cor11,_cor12,_cor13,_cor14}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 398
			receive
			  %% Line 399
			  <{'done',_cor16,Pid}>
			      when call 'erlang':'=:='
				    (_cor16,
				     _rec18) ->
			      let <Rest> =
				  %% Line 402
				  call 'sets':'del_element'
				      (Pid, _cor1)
			      in  %% Line 403
				  apply 'wait_for_tasks'/2
				      (Rest, _cor0)
			after 'infinity' ->
			  'true'
		    -| ['compiler_generated'] )
		  ( <_cor15> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','procstate'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'tests'/2 =
    %% Line 413
    fun (_cor1,_cor0) ->
	%% Line 414
	( case _cor0 of
	    ( <( {'procstate',_cor12,_rec19,_cor13,_cor14,_cor15,_cor16}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <I> =
		      call 'eunit_data':'iter_init'
			  (_cor1, _rec19)
		  in  %% Line 415
		      case _cor16 of
			%% Line 416
			<'inorder'> when 'true' ->
			    apply 'tests_inorder'/2
				(I, _cor0)
			%% Line 417
			<'inparallel'> when 'true' ->
			    apply 'tests_inparallel'/3
				(I, 0, _cor0)
			%% Line 418
			<{'inparallel',N}>
			    when let <_cor7> =
				  call 'erlang':'is_integer'
				      (N)
			      in  let <_cor8> =
				      call 'erlang':'>='
					  (N, 0)
				  in  call 'erlang':'and'
					  (_cor7, _cor8) ->
			    %% Line 419
			    apply 'tests_inparallel'/3
				(I, N, _cor0)
			( <_cor9> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor9})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_cor17> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','procstate'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'set_id'/2 =
    %% Line 422
    fun (_cor1,_cor0) ->
	let <_rec21> =
	    %% Line 423
	    call 'eunit_data':'iter_id'
		(_cor1)
	in  %% Line 423
	    case _cor0 of
	      <{'procstate',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12}> when 'true' ->
		  call 'erlang':'setelement'
		      (3, _cor0, _rec21)
	      ( <_cor13> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','procstate'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
'tests_inorder'/2 =
    %% Line 425
    fun (_cor1,_cor0) ->
	%% Line 426
	apply 'tests_inorder'/3
	    (_cor1, 0, _cor0)
'tests_inorder'/3 =
    %% Line 428
    fun (_cor2,_cor1,_cor0) ->
	%% Line 429
	case apply 'get_next_item'/1
		 (_cor2) of
	  %% Line 430
	  <{T,I1}> when 'true' ->
	      let <_cor3> =
		  %% Line 431
		  apply 'set_id'/2
		      (I1, _cor0)
	      in  do  %% Line 431
		      apply 'handle_item'/2
			  (T, _cor3)
		      let <_cor4> =
			  %% Line 432
			  call 'erlang':'+'
			      (_cor1, 1)
		      in  %% Line 432
			  apply 'tests_inorder'/3
			      (I1, _cor4, _cor0)
	  %% Line 433
	  <'none'> when 'true' ->
	      _cor1
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'tests_inparallel'/3 =
    %% Line 437
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 438
	    call 'sets':'new'
		()
	in  %% Line 438
	    apply 'tests_inparallel'/6
		(_cor2, 0, _cor0, _cor1, _cor1, _cor3)
'tests_inparallel'/6 =
    %% Line 440
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,N,St,K,K0,Children>
	      when let <_cor6> =
		    call 'erlang':'=<'
			(K, 0)
		in  let <_cor7> =
			call 'erlang':'>'
			    (K0, 0)
		    in  call 'erlang':'and'
			    (_cor6, _cor7) ->
	      do  %% Line 441
		  apply 'wait_for_tasks'/2
		      (Children, St)
		  let <_cor8> =
		      %% Line 442
		      call 'sets':'new'
			  ()
		  in  %% Line 442
		      apply 'tests_inparallel'/6
			  (I, N, St, K0, K0, _cor8)
	  %% Line 443
	  <I,N,St,K,K0,Children> when 'true' ->
	      %% Line 444
	      case apply 'get_next_item'/1
		       (I) of
		%% Line 445
		<{T,I1}> when 'true' ->
		    let <_cor9> =
			%% Line 446
			apply 'set_id'/2
			    (I1, St)
		    in  let <Child> =
			    %% Line 446
			    apply 'spawn_item'/2
				(T, _cor9)
			in  let <_cor13> =
				%% Line 447
				call 'erlang':'+'
				    (N, 1)
			    in  let <_cor12> =
				    %% Line 447
				    call 'erlang':'-'
					(K, 1)
				in  let <_cor11> =
					%% Line 448
					call 'sets':'add_element'
					    (Child, Children)
				    in  %% Line 447
					apply 'tests_inparallel'/6
					    (I1, _cor13, St, _cor12, K0, _cor11)
		%% Line 449
		<'none'> when 'true' ->
		    do  %% Line 450
			apply 'wait_for_tasks'/2
			    (Children, St)
			%% Line 451
			N
		( <_cor14> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor14})
		  -| ['compiler_generated'] )
	      end
	end
'spawn_item'/2 =
    %% Line 457
    fun (_cor1,_cor0) ->
	let <Fun> =
	    %% Line 458
	    ( fun (_cor2) ->
		  %% Line 459
		  ( fun () ->
			apply 'handle_item'/2
			    (_cor1, _cor2)
		    -| [{'id',{0,0,'-spawn_item/2-fun-0-'}}] )
	      -| [{'id',{0,0,'-spawn_item/2-fun-1-'}}] )
	in  %% Line 462
	    apply 'start_task'/3
		('local', Fun, _cor0)
'get_next_item'/1 =
    %% Line 464
    fun (_cor0) ->
	%% Line 465
	try
	    call 'eunit_data':'iter_next'
		(_cor0)
	of <_cor1> ->
	    _cor1
	catch <_cor4,_cor3,_cor2> ->
	    case <_cor4,_cor3,_cor2> of
	      %% Line 467
	      <'throw',Term,_cor6> when 'true' ->
		  apply 'abort_task'/1
		      (Term)
	      ( <_cor4,_cor3,_cor2> when 'true' ->
		    primop 'raise'
			(_cor2, _cor3)
		-| ['compiler_generated'] )
	    end
'handle_item'/2 =
    %% Line 470
    fun (_cor1,_cor0) ->
	%% Line 471
	case _cor1 of
	  %% Line 472
	  <{'test',_cor5,_cor6,_cor7,_cor8,_cor9}> when 'true' ->
	      apply 'handle_test'/2
		  (_cor1, _cor0)
	  %% Line 473
	  <{'group',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15}> when 'true' ->
	      apply 'handle_group'/2
		  (_cor1, _cor0)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'handle_test'/2 =
    %% Line 476
    fun (_cor1,_cor0) ->
	%% Line 477
	( case _cor1 of
	    ( <( {'test',_cor21,_rec23,_cor22,_cor23,_cor24}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <Data> =
		      [{'desc',_rec23}|[{'source',_cor23}|%% Line 478
							  [{'line',_cor24}|[]]]]
		  in  do  %% Line 479
			  apply 'message_insulator'/2
			      ({'begin','test',Data}, _cor0)
			  let <G0> =
			      %% Line 482
			      call 'erlang':'group_leader'
				  ()
			  in  let <Runner> =
				  %% Line 483
				  call 'erlang':'self'
				      ()
			      in  let <G1> =
				      %% Line 484
				      apply 'new_group_leader'/1
					  (Runner)
				  in  let <_cor12> =
					  %% Line 485
					  call 'erlang':'self'
					      ()
				      in  do  %% Line 485
					      call 'erlang':'group_leader'
						  (G1, _cor12)
					      let <_cor13> =
						  %% Line 490
						  ( fun () ->
							apply 'run_test'/1
							    (_cor1)
						    -| [{'id',{0,0,'-handle_test/2-fun-0-'}}] )
					      in  %% Line 489
						  case apply 'with_timeout'/4
							   (_cor22, 5000, _cor13, _cor0) of
						    <{Status,Time}> when 'true' ->
							let <_cor17> =
							    %% Line 495
							    call 'erlang':'self'
								()
							in  do  %% Line 495
								call 'erlang':'group_leader'
								    (G0, _cor17)
								let <Output> =
								    %% Line 496
								    apply 'group_leader_sync'/1
									(G1)
								in  do  %% Line 497
									call 'io':'put_chars'
									    (Output)
									do  %% Line 499
									    apply 'message_insulator'/2
										({'end',Status,Time}, _cor0)
									    %% Line 500
									    'ok'
						    ( <_cor16> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor16})
						      -| ['compiler_generated'] )
						  end
	      -| ['compiler_generated'] )
	    ( <_cor25> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','test'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'run_test'/1 =
    %% Line 505
    fun (_cor0) ->
	case _cor0 of
	  <{'test',F,_cor7,_cor8,_cor9,_cor10}> when 'true' ->
	      %% Line 506
	      try
		  call 'eunit_test':'run_testfun'
		      (F)
	      of <_cor1> ->
		  case _cor1 of
		    %% Line 507
		    <{'ok',_X_Value}> when 'true' ->
			%% Line 509
			'ok'
		    %% Line 510
		    <{'error',Exception}> when 'true' ->
			%% Line 511
			{'error',Exception}
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'try_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	      catch <_cor5,_cor4,_cor3> ->
		  case <_cor5,_cor4,_cor3> of
		    %% Line 513
		    <'throw',WrapperError,_cor11> when 'true' ->
			{'skipped',WrapperError}
		    ( <_cor5,_cor4,_cor3> when 'true' ->
			  primop 'raise'
			      (_cor3, _cor4)
		      -| ['compiler_generated'] )
		  end
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'run_test',1}}] )
	    -| ['compiler_generated'] )
	end
'set_group_order'/2 =
    %% Line 516
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'group',_cor6,'undefined',_cor7,_cor8,_cor9,_cor10},St> when 'true' ->
	      %% Line 517
	      St
	  %% Line 518
	  <{'group',_cor11,Order,_cor12,_cor13,_cor14,_cor15},St> when 'true' ->
	      %% Line 519
	      case St of
		<{'procstate',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}> when 'true' ->
		    call 'erlang':'setelement'
			(7, St, Order)
		( <_cor22> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','procstate'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'set_group_order',2}}] )
	    -| ['compiler_generated'] )
	end
'handle_group'/2 =
    %% Line 521
    fun (_cor1,_cor0) ->
	let <St> =
	    %% Line 522
	    apply 'set_group_order'/2
		(_cor1, _cor0)
	in  %% Line 523
	    ( case _cor1 of
		( <( {'group',_cor9,_cor10,_cor11,_cor12,_rec28,_cor13}
		     -| ['compiler_generated'] )> when 'true' ->
		      case _rec28 of
			%% Line 524
			<'undefined'> when 'true' ->
			    %% Line 525
			    apply 'run_group'/2
				(_cor1, St)
			%% Line 526
			<Type> when 'true' ->
			    let <Child> =
				%% Line 527
				apply 'spawn_group'/3
				    (Type, _cor1, St)
			    in  %% Line 528
				apply 'wait_for_task'/2
				    (Child, St)
		      end
		  -| ['compiler_generated'] )
		( <_cor14> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','group'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'spawn_group'/3 =
    %% Line 531
    fun (_cor2,_cor1,_cor0) ->
	let <Fun> =
	    %% Line 532
	    ( fun (_cor3) ->
		  %% Line 533
		  ( fun () ->
			apply 'run_group'/2
			    (_cor1, _cor3)
		    -| [{'id',{0,0,'-spawn_group/3-fun-0-'}}] )
	      -| [{'id',{0,0,'-spawn_group/3-fun-1-'}}] )
	in  %% Line 535
	    apply 'start_task'/3
		(_cor2, Fun, _cor0)
'run_group'/2 =
    %% Line 537
    fun (_cor1,_cor0) ->
	%% Line 540
	( case _cor1 of
	    ( <( {'group',_cor22,_cor23,_rec29,_cor24,_cor25,_cor26}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <Data> =
		      %% Line 541
		      [{'desc',_cor22}|[{'spawn',_cor25}|%% Line 542
							 [{'order',_cor23}|[]]]]
		  in  do  %% Line 543
			  apply 'message_insulator'/2
			      ({'begin','group',Data}, _cor0)
			  let <F> =
			      %% Line 544
			      ( fun (_cor12) ->
				    apply 'enter_group'/3
					(_cor12, _rec29, _cor0)
				-| [{'id',{0,0,'-run_group/2-fun-0-'}}] )
			  in  do  %% Line 545
				  try
				      apply 'with_context'/2
					  (_cor1, F)
				  of <_cor15> ->
				      case _cor15 of
					%% Line 546
					<{Status,Time}> when 'true' ->
					    %% Line 547
					    apply 'message_insulator'/2
						({'end',Status,Time}, _cor0)
					( <_cor16> when 'true' ->
					      primop 'match_fail'
						  ({'try_clause',_cor16})
					  -| ['compiler_generated'] )
				      end
				  catch <_cor19,_cor18,_cor17> ->
				      case <_cor19,_cor18,_cor17> of
					%% Line 552
					<'throw',{'context_error',Why,Trace},_cor46> when 'true' ->
					    %% Line 553
					    apply 'message_insulator'/2
						({'skipped',{Why,Trace}}, _cor0)
					( <_cor19,_cor18,_cor17> when 'true' ->
					      primop 'raise'
						  (_cor17, _cor18)
					  -| ['compiler_generated'] )
				      end
				  %% Line 555
				  'ok'
	      -| ['compiler_generated'] )
	    ( <_cor27> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','group'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'enter_group'/3 =
    %% Line 557
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 559
	    ( fun () ->
		  apply 'tests'/2
		      (_cor2, _cor0)
	      -| [{'id',{0,0,'-enter_group/3-fun-0-'}}] )
	in  %% Line 558
	    apply 'with_timeout'/4
		(_cor1, 'infinity', _cor3, _cor0)
'with_context'/2 =
    %% Line 561
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'group',_cor4,_cor5,_cor6,'undefined',_cor7,T},F> when 'true' ->
	      %% Line 562
	      apply F
		  (T)
	  %% Line 563
	  <{'group',_cor8,_cor9,_cor10,C = {'context',_cor11,_cor12,_cor13},_cor14,I},F> when 'true' ->
	      %% Line 564
	      call 'eunit_data':'enter_context'
		  (C, I, F)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'with_context',2}}] )
	    -| ['compiler_generated'] )
	end
'new_group_leader'/1 =
    %% Line 568
    fun (_cor0) ->
	%% Line 574
	call 'erlang':'spawn_link'
	    ('eunit_proc', 'group_leader_process', [_cor0|[]])
'group_leader_process'/1 =
    %% Line 576
    fun (_cor0) ->
	%% Line 577
	apply 'group_leader_loop'/3
	    (_cor0, 'infinity', [])
'group_leader_loop'/3 =
    %% Line 579
    fun (_cor2,_cor1,_cor0) ->
	%% Line 580
	receive
	  %% Line 581
	  <{'io_request',From,ReplyAs,Req}> when 'true' ->
	      let <P> =
		  %% Line 582
		  call 'erlang':'process_flag'
		      ('priority', 'normal')
	      in  let <Buf1> =
		      %% Line 584
		      apply 'io_request'/4
			  (From, ReplyAs, Req, _cor0)
		  in  do  %% Line 585
			  call 'erlang':'process_flag'
			      ('priority', P)
			  %% Line 586
			  apply 'group_leader_loop'/3
			      (_cor2, _cor1, Buf1)
	  %% Line 587
	  <'stop'> when 'true' ->
	      do  %% Line 590
		  receive
		    
		  after 2 ->
		    'ok'
		  do  %% Line 591
		      call 'erlang':'process_flag'
			  ('priority', 'low')
		      %% Line 592
		      apply 'group_leader_loop'/3
			  (_cor2, 0, _cor0)
	  %% Line 593
	  <_cor10> when 'true' ->
	      %% Line 595
	      apply 'group_leader_loop'/3
		  (_cor2, _cor1, _cor0)
	after _cor1 ->
	  do  %% Line 599
	      call 'erlang':'process_flag'
		  ('priority', 'normal')
	      let <_cor4> =
		  %% Line 600
		  call 'erlang':'self'
		      ()
	      in  let <_cor3> =
		      %% Line 600
		      apply 'buffer_to_binary'/1
			  (_cor0)
		  in  %% Line 600
		      call 'erlang':'!'
			  (_cor2, {_cor4,_cor3})
'group_leader_sync'/1 =
    %% Line 603
    fun (_cor0) ->
	do  %% Line 604
	    call 'erlang':'!'
		(_cor0, 'stop')
	    %% Line 605
	    receive
	      %% Line 606
	      <{_cor2,Buf}>
		  when call 'erlang':'=:='
			(_cor2,
			 _cor0) ->
		  Buf
	    after 'infinity' ->
	      'true'
'io_request'/4 =
    %% Line 613
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 614
	case apply 'io_request'/2
		 (_cor1, _cor0) of
	  <{Reply,Buf1}> when 'true' ->
	      do  %% Line 615
		  apply 'io_reply'/3
		      (_cor3, _cor2, Reply)
		  %% Line 616
		  Buf1
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'io_reply'/3 =
    %% Line 618
    fun (_cor2,_cor1,_cor0) ->
	%% Line 619
	call 'erlang':'!'
	    (_cor2, {'io_reply',_cor1,_cor0})
'io_request'/2 =
    %% Line 621
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'put_chars',Chars},Buf> when 'true' ->
	      %% Line 622
	      {'ok',[Chars|Buf]}
	  %% Line 623
	  <{'put_chars',M,F,As},Buf> when 'true' ->
	      %% Line 624
	      try
		  call 'erlang':'apply'
		      (M, F, As)
	      of <_cor2> ->
		  %% Line 625
		  {'ok',[_cor2|Buf]}
	      catch <_cor6,_cor5,_cor4> ->
		  let <_cor7> =
		      %% Line 627
		      call 'erlang':'get_stacktrace'
			  ()
		  in  %% Line 627
		      {{'error',{_cor6,_cor5,_cor7}},Buf}
	  %% Line 629
	  <{'put_chars',_X_Enc,Chars},Buf> when 'true' ->
	      %% Line 630
	      apply 'io_request'/2
		  ({'put_chars',Chars}, Buf)
	  %% Line 631
	  <{'put_chars',_X_Enc,Mod,Func,Args},Buf> when 'true' ->
	      %% Line 632
	      apply 'io_request'/2
		  ({'put_chars',Mod,Func,Args}, Buf)
	  %% Line 633
	  <{'get_chars',_X_Enc,_X_Prompt,_X_N},Buf> when 'true' ->
	      %% Line 634
	      {'eof',Buf}
	  %% Line 635
	  <{'get_chars',_X_Prompt,_X_N},Buf> when 'true' ->
	      %% Line 636
	      {'eof',Buf}
	  %% Line 637
	  <{'get_line',_X_Prompt},Buf> when 'true' ->
	      %% Line 638
	      {'eof',Buf}
	  %% Line 639
	  <{'get_line',_X_Enc,_X_Prompt},Buf> when 'true' ->
	      %% Line 640
	      {'eof',Buf}
	  %% Line 641
	  <{'get_until',_X_Prompt,_X_M,_X_F,_X_As},Buf> when 'true' ->
	      %% Line 642
	      {'eof',Buf}
	  %% Line 643
	  <{'setopts',_X_Opts},Buf> when 'true' ->
	      %% Line 644
	      {'ok',Buf}
	  %% Line 645
	  <'getopts',Buf> when 'true' ->
	      %% Line 646
	      {{'error','enotsup'},Buf}
	  %% Line 647
	  <{'get_geometry','columns'},Buf> when 'true' ->
	      %% Line 648
	      {{'error','enotsup'},Buf}
	  %% Line 649
	  <{'get_geometry','rows'},Buf> when 'true' ->
	      %% Line 650
	      {{'error','enotsup'},Buf}
	  %% Line 651
	  <{'requests',Reqs},Buf> when 'true' ->
	      %% Line 652
	      apply 'io_requests'/2
		  (Reqs, {'ok',Buf})
	  %% Line 653
	  <_cor11,Buf> when 'true' ->
	      %% Line 654
	      {{'error','request'},Buf}
	end
'io_requests'/2 =
    %% Line 656
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[R|Rs],{'ok',Buf}> when 'true' ->
	      let <_cor2> =
		  %% Line 657
		  apply 'io_request'/2
		      (R, Buf)
	      in  %% Line 657
		  apply 'io_requests'/2
		      (Rs, _cor2)
	  %% Line 658
	  <_cor5,Result> when 'true' ->
	      %% Line 659
	      Result
	end
'io_error_test_'/0 =
    %% Line 662
    fun () ->
	let <_cor2> =
	    %% Line 663
	    ( fun () ->
		  let <_cor1> =
		      ( fun () ->
			    case call 'io':'getopts'
				     () of
			      <{'error','enotsup'}> when 'true' ->
				  'ok'
			      <_X__V> when 'true' ->
				  call 'erlang':'error'
				      ({'assertMatch_failed',[{'module','eunit_proc'}|[{'line',663}|[{'expression',[105|[111|[32|[58|[32|[103|[101|[116|[111|[112|[116|[115|[32|[40|[32|[41]]]]]]]]]]]]]]]]}|[{'pattern',[123|[32|[101|[114|[114|[111|[114|[32|[44|[32|[101|[110|[111|[116|[115|[117|[112|[32|[125]]]]]]]]]]]]]]]]]]]}|[{'value',_X__V}|[]]]]]]})
			    end
			-| [{'id',{0,0,'-io_error_test_/0-fun-0-'}}] )
		  in  apply _cor1
			  ()
	      -| [{'id',{0,0,'-io_error_test_/0-fun-1-'}}] )
	in  let <_cor5> =
		%% Line 664
		( fun () ->
		      let <_cor4> =
			  ( fun () ->
				case call 'io':'columns'
					 () of
				  <{'error','enotsup'}> when 'true' ->
				      'ok'
				  <_X__V> when 'true' ->
				      call 'erlang':'error'
					  ({'assertMatch_failed',[{'module','eunit_proc'}|[{'line',664}|[{'expression',[105|[111|[32|[58|[32|[99|[111|[108|[117|[109|[110|[115|[32|[40|[32|[41]]]]]]]]]]]]]]]]}|[{'pattern',[123|[32|[101|[114|[114|[111|[114|[32|[44|[32|[101|[110|[111|[116|[115|[117|[112|[32|[125]]]]]]]]]]]]]]]]]]]}|[{'value',_X__V}|[]]]]]]})
				end
			    -| [{'id',{0,0,'-io_error_test_/0-fun-2-'}}] )
		      in  apply _cor4
			      ()
		  -| [{'id',{0,0,'-io_error_test_/0-fun-3-'}}] )
	    in  let <_cor8> =
		    %% Line 665
		    ( fun () ->
			  let <_cor7> =
			      ( fun () ->
				    case call 'io':'rows'
					     () of
				      <{'error','enotsup'}> when 'true' ->
					  'ok'
				      <_X__V> when 'true' ->
					  call 'erlang':'error'
					      ({'assertMatch_failed',[{'module','eunit_proc'}|[{'line',665}|[{'expression',[105|[111|[32|[58|[32|[114|[111|[119|[115|[32|[40|[32|[41]]]]]]]]]]]]]}|[{'pattern',[123|[32|[101|[114|[114|[111|[114|[32|[44|[32|[101|[110|[111|[116|[115|[117|[112|[32|[125]]]]]]]]]]]]]]]]]]]}|[{'value',_X__V}|[]]]]]]})
				    end
				-| [{'id',{0,0,'-io_error_test_/0-fun-4-'}}] )
			  in  apply _cor7
				  ()
		      -| [{'id',{0,0,'-io_error_test_/0-fun-5-'}}] )
		in  %% Line 663
		    [{663,_cor2}|%% Line 664
				 [{664,_cor5}|%% Line 665
					      [{665,_cor8}|[]]]]
'test'/0 =
    fun () ->
	call 'eunit':'test'
	    ('eunit_proc')
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('eunit_proc')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('eunit_proc', _cor0)
end