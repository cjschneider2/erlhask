module 'eunit' ['module_info'/0,
		'module_info'/1,
		'start'/0,
		'start'/1,
		'stop'/0,
		'stop'/1,
		'submit'/1,
		'submit'/2,
		'submit'/3,
		'test'/0,
		'test'/1,
		'test'/2,
		'test'/3,
		'watch'/1,
		'watch'/2,
		'watch'/3,
		'watch_app'/1,
		'watch_app'/2,
		'watch_app'/3,
		'watch_path'/1,
		'watch_path'/2,
		'watch_path'/3,
		'watch_regexp'/1,
		'watch_regexp'/2,
		'watch_regexp'/3]
    attributes []
'start'/0 =
    %% Line 43
    fun () ->
	%% Line 44
	apply 'start'/1
	    ('eunit_server')
'start'/1 =
    %% Line 48
    fun (_cor0) ->
	%% Line 49
	call 'eunit_server':'start'
	    (_cor0)
'stop'/0 =
    %% Line 53
    fun () ->
	%% Line 54
	apply 'stop'/1
	    ('eunit_server')
'stop'/1 =
    %% Line 58
    fun (_cor0) ->
	%% Line 59
	call 'eunit_server':'stop'
	    (_cor0)
'watch'/1 =
    %% Line 62
    fun (_cor0) ->
	%% Line 63
	apply 'watch'/2
	    (_cor0, [])
'watch'/2 =
    %% Line 66
    fun (_cor1,_cor0) ->
	%% Line 67
	apply 'watch'/3
	    ('eunit_server', _cor1, _cor0)
'watch'/3 =
    %% Line 70
    fun (_cor2,_cor1,_cor0) ->
	%% Line 71
	call 'eunit_server':'watch'
	    (_cor2, _cor1, _cor0)
'watch_path'/1 =
    %% Line 74
    fun (_cor0) ->
	%% Line 75
	apply 'watch_path'/2
	    (_cor0, [])
'watch_path'/2 =
    %% Line 78
    fun (_cor1,_cor0) ->
	%% Line 79
	apply 'watch_path'/3
	    ('eunit_server', _cor1, _cor0)
'watch_path'/3 =
    %% Line 82
    fun (_cor2,_cor1,_cor0) ->
	%% Line 83
	call 'eunit_server':'watch_path'
	    (_cor2, _cor1, _cor0)
'watch_regexp'/1 =
    %% Line 86
    fun (_cor0) ->
	%% Line 87
	apply 'watch_regexp'/2
	    (_cor0, [])
'watch_regexp'/2 =
    %% Line 90
    fun (_cor1,_cor0) ->
	%% Line 91
	apply 'watch_regexp'/3
	    ('eunit_server', _cor1, _cor0)
'watch_regexp'/3 =
    %% Line 94
    fun (_cor2,_cor1,_cor0) ->
	%% Line 95
	call 'eunit_server':'watch_regexp'
	    (_cor2, _cor1, _cor0)
'watch_app'/1 =
    %% Line 98
    fun (_cor0) ->
	%% Line 99
	apply 'watch_app'/2
	    (_cor0, [])
'watch_app'/2 =
    %% Line 102
    fun (_cor1,_cor0) ->
	%% Line 103
	apply 'watch_app'/3
	    ('eunit_server', _cor1, _cor0)
'watch_app'/3 =
    %% Line 106
    fun (_cor2,_cor1,_cor0) ->
	%% Line 107
	case call 'code':'lib_dir'
		 (_cor1) of
	  %% Line 108
	  <Path>
	      when call 'erlang':'is_list'
		    (Path) ->
	      let <_cor3> =
		  %% Line 109
		  call 'filename':'join'
		      (Path, [101|[98|[105|[110]]]])
	      in  %% Line 109
		  apply 'watch_path'/3
		      (_cor2, _cor3, _cor0)
	  %% Line 110
	  <_cor8> when 'true' ->
	      %% Line 111
	      'error'
	end
'test'/1 =
    %% Line 115
    fun (_cor0) ->
	%% Line 116
	apply 'test'/2
	    (_cor0, [])
'test'/2 =
    %% Line 136
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 137
	    apply 'all_options'/1
		(_cor0)
	in  %% Line 137
	    apply 'test'/3
		('eunit_server', _cor1, _cor2)
'test'/3 =
    %% Line 141
    fun (_cor2,_cor1,_cor0) ->
	let <Listeners> =
	    %% Line 142
	    apply 'listeners'/1
		(_cor0)
	in  let <Serial> =
		%% Line 143
		call 'eunit_serial':'start'
		    (Listeners)
	    in  %% Line 144
		case call 'eunit_server':'start_test'
			 (_cor2, Serial, _cor1, _cor0) of
		  %% Line 145
		  <{'ok',Reference}> when 'true' ->
		      apply 'test_run'/2
			  (Reference, Listeners)
		  %% Line 146
		  <{'error',R}> when 'true' ->
		      {'error',R}
		  ( <_cor5> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor5})
		    -| ['compiler_generated'] )
		end
'test_run'/2 =
    %% Line 149
    fun (_cor1,_cor0) ->
	do  %% Line 150
	    receive
	      %% Line 151
	      <{'start',_cor5}>
		  when call 'erlang':'=:='
			(_cor5,
			 _cor1) ->
		  %% Line 152
		  apply 'cast'/2
		      (_cor0, {'start',_cor1})
	    after 'infinity' ->
	      'ok'
	    %% Line 154
	    receive
	      %% Line 155
	      <{'done',_cor6}>
		  when call 'erlang':'=:='
			(_cor6,
			 _cor1) ->
		  let <_cor2> =
		      %% Line 156
		      call 'erlang':'self'
			  ()
		  in  do  %% Line 156
			  apply 'cast'/2
			      (_cor0, {'stop',_cor1,_cor2})
			  do  %% Line 157
			      apply 'wait_until_listeners_have_terminated'/1
				  (_cor0)
			      %% Line 158
			      receive
				%% Line 159
				<{'result',_cor7,Result}>
				    when call 'erlang':'=:='
					  (_cor7,
					   _cor1) ->
				    %% Line 160
				    Result
			      after 'infinity' ->
				'true'
	    after 'infinity' ->
	      'true'
'cast'/2 =
    %% Line 164
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[P|Ps],Msg> when 'true' ->
	      do  %% Line 165
		  call 'erlang':'!'
		      (P, Msg)
		  %% Line 166
		  apply 'cast'/2
		      (Ps, Msg)
	  %% Line 167
	  <[],_X_Msg> when 'true' ->
	      %% Line 168
	      'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'cast',2}}] )
	    -| ['compiler_generated'] )
	end
'wait_until_listeners_have_terminated'/1 =
    %% Line 170
    fun (_cor0) ->
	case _cor0 of
	  <[P|Ps]> when 'true' ->
	      let <MRef> =
		  %% Line 171
		  call 'erlang':'monitor'
		      ('process', P)
	      in  %% Line 172
		  receive
		    %% Line 173
		    <{'DOWN',_cor3,'process',_cor4,_cor5}>
			when let <_cor6> =
			      call 'erlang':'=:='
				  (_cor3, MRef)
			  in  let <_cor7> =
				  call 'erlang':'=:='
				      (_cor4, P)
			      in  call 'erlang':'and'
				      (_cor6, _cor7) ->
			%% Line 174
			apply 'wait_until_listeners_have_terminated'/1
			    (Ps)
		  after 'infinity' ->
		    'true'
	  %% Line 176
	  <[]> when 'true' ->
	      %% Line 177
	      'ok'
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'wait_until_listeners_have_terminated',1}}] )
	    -| ['compiler_generated'] )
	end
'submit'/1 =
    %% Line 184
    fun (_cor0) ->
	%% Line 185
	apply 'submit'/2
	    (_cor0, [])
'submit'/2 =
    %% Line 188
    fun (_cor1,_cor0) ->
	%% Line 189
	apply 'submit'/3
	    ('eunit_server', _cor1, _cor0)
'submit'/3 =
    %% Line 192
    fun (_cor2,_cor1,_cor0) ->
	let <Dummy> =
	    %% Line 193
	    call 'erlang':'spawn'
		(( 'devnull'/0
		   -| [{'id',{0,0,'-submit/3-fun-0-'}}] ))
	in  %% Line 194
	    call 'eunit_server':'start_test'
		(_cor2, Dummy, _cor1, _cor0)
'listeners'/1 =
    %% Line 196
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 199
	    call 'proplists':'get_all_values'
		('report', _cor0)
	in  let <Ls> =
		%% Line 199
		[{'eunit_tty',_cor0}|_cor1]
	    in  let <Ps> =
		    %% Line 200
		    apply 'start_listeners'/1
			(Ls)
		in  %% Line 202
		    case call 'proplists':'get_value'
			     ('event_log', _cor0) of
		      %% Line 203
		      <'undefined'> when 'true' ->
			  %% Line 204
			  Ps
		      %% Line 205
		      <X> when 'true' ->
			  let <_cor4> =
			      %% Line 206
			      case <> of
				<>
				    when call 'erlang':'is_list'
					  (X) ->
				    X
				%% Line 207
				<> when 'true' ->
				    [101|[117|[110|[105|[116|[45|[101|[118|[101|[110|[116|[115|[46|[108|[111|[103]]]]]]]]]]]]]]]]
			      end
			  in  let <_cor6> =
				  %% Line 209
				  ( fun () ->
					apply 'event_logger'/1
					    (_cor4)
				    -| [{'id',{0,0,'-listeners/1-fun-0-'}}] )
			      in  let <_cor7> =
				      %% Line 209
				      call 'erlang':'spawn_link'
					  (_cor6)
				  in  %% Line 209
				      [_cor7|Ps]
		    end
'start_listeners'/1 =
    %% Line 212
    fun (_cor0) ->
	case _cor0 of
	  <[P|Ps]>
	      when let <_cor1> =
		    call 'erlang':'is_pid'
			(P)
		in  let <_cor2> =
			call 'erlang':'is_atom'
			    (P)
		    in  call 'erlang':'or'
			    (_cor1, _cor2) ->
	      let <_cor3> =
		  %% Line 213
		  apply 'start_listeners'/1
		      (Ps)
	      in  %% Line 213
		  [P|_cor3]
	  %% Line 214
	  <[{Mod,Opts}|Ps]>
	      when call 'erlang':'is_atom'
		    (Mod) ->
	      let <_cor4> =
		  %% Line 215
		  call Mod:'start'
		      (Opts)
	      in  let <_cor5> =
		      %% Line 215
		      apply 'start_listeners'/1
			  (Ps)
		  in  %% Line 215
		      [_cor4|_cor5]
	  %% Line 216
	  <[]> when 'true' ->
	      %% Line 217
	      []
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'start_listeners',1}}] )
	    -| ['compiler_generated'] )
	end
'event_logger'/1 =
    %% Line 220
    fun (_cor0) ->
	%% Line 221
	case call 'file':'open'
		 (_cor0, ['write']) of
	  %% Line 222
	  <{'ok',FD}> when 'true' ->
	      %% Line 223
	      receive
		%% Line 224
		<{'start',Reference}> when 'true' ->
		    %% Line 225
		    apply 'event_logger_loop'/2
			(Reference, FD)
	      after 'infinity' ->
		'true'
	  %% Line 227
	  <Error> when 'true' ->
	      %% Line 228
	      call 'erlang':'exit'
		  (Error)
	end
'event_logger_loop'/2 =
    %% Line 231
    fun (_cor1,_cor0) ->
	%% Line 232
	receive
	  %% Line 233
	  <Msg = {'status',_X_Id,_X_Info}> when 'true' ->
	      do  %% Line 234
		  call 'io':'fwrite'
		      (_cor0, [126|[112|[46|[10]]]], [Msg|[]])
		  %% Line 235
		  apply 'event_logger_loop'/2
		      (_cor1, _cor0)
	  %% Line 236
	  <{'stop',_cor4,_X_ReplyTo}>
	      when call 'erlang':'=:='
		    (_cor4,
		     _cor1) ->
	      do  %% Line 238
		  call 'file':'close'
		      (_cor0)
		  %% Line 239
		  call 'erlang':'exit'
		      ('normal')
	after 'infinity' ->
	  'true'
'devnull'/0 =
    %% Line 244
    fun () ->
	%% Line 245
	receive
	  <_cor0> when 'true' ->
	      apply 'devnull'/0
		  ()
	after 'infinity' ->
	  'true'
'all_options'/1 =
    %% Line 249
    fun (_cor0) ->
	%% Line 250
	try
	    call 'os':'getenv'
		([69|[85|[78|[73|[84]]]]])
	of <_cor1> ->
	    case _cor1 of
	      %% Line 251
	      <'false'> when 'true' ->
		  _cor0
	      %% Line 252
	      <S> when 'true' ->
		  %% Line 253
		  case call 'erl_scan':'string'
			   (S) of
		    <{'ok',Ts,_cor10}> when 'true' ->
			let <_cor3> =
			    %% Line 254
			    call 'erlang':'++'
				(Ts, [{'dot',1}])
			in  %% Line 254
			    case call 'erl_parse':'parse_term'
				     (_cor3) of
			      <{'ok',V}> when 'true' ->
				  %% Line 255
				  case <> of
				    <>
					when call 'erlang':'is_list'
					      (V) ->
					call 'erlang':'++'
					    (_cor0, V)
				    %% Line 256
				    <> when 'true' ->
					call 'erlang':'++'
					    (_cor0, [V|[]])
				  end
			      ( <_cor4> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor4})
				-| ['compiler_generated'] )
			    end
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	    end
	catch <_cor8,_cor7,_cor6> ->
	    _cor0
'test'/0 =
    fun () ->
	call 'eunit':'test'
	    ('eunit')
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('eunit')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('eunit', _cor0)
end