module 'eunit_striptests' ['module_info'/0,
			   'module_info'/1,
			   'parse_transform'/2]
    attributes []
'parse_transform'/2 =
    %% Line 29
    fun (_cor1,_cor0) ->
	let <TestSuffix> =
	    %% Line 30
	    call 'proplists':'get_value'
		('eunit_test_suffix', _cor0, %% Line 31
					     [95|[116|[101|[115|[116]]]]])
	in  let <GeneratorSuffix> =
		%% Line 32
		call 'proplists':'get_value'
		    ('eunit_generator_suffix', _cor0, %% Line 34
						      [95|[116|[101|[115|[116|[95]]]]]])
	    in  let <ExportSuffix> =
		    %% Line 35
		    call 'proplists':'get_value'
			('eunit_export_suffix', _cor0, %% Line 36
						       [95|[101|[120|[112|[111|[114|[116|[101|[100|[95]]]]]]]]]])
		in  let <_cor11> =
			%% Line 37
			( fun (_cor8,_cor7) ->
			      case <_cor8,_cor7> of
				<{'attribute',_cor21,'export',Es},S> when 'true' ->
				    let <_cor6> =
					%% Line 38
					call 'sets':'from_list'
					    (Es)
				    in  %% Line 38
					call 'sets':'union'
					    (_cor6, S)
				%% Line 39
				<_X_F,S> when 'true' ->
				    S
			      end
			  -| [{'id',{0,0,'-parse_transform/2-fun-0-'}}] )
		    in  let <_cor5> =
			    %% Line 41
			    call 'sets':'new'
				()
			in  let <Exports> =
				%% Line 37
				call 'lists':'foldl'
				    (_cor11, _cor5, _cor1)
			    in  let <F> =
				    %% Line 42
				    ( fun (_cor14,_cor13) ->
					  %% Line 43
					  apply 'form'/6
					      (_cor14, _cor13, Exports, TestSuffix, GeneratorSuffix, %% Line 44
												     ExportSuffix)
				      -| [{'id',{0,0,'-parse_transform/2-fun-1-'}}] )
				in  let <_cor18> =
					%% Line 46
					call 'lists':'foldl'
					    (F, [], _cor1)
				    in  %% Line 46
					call 'lists':'reverse'
					    (_cor18)
'form'/6 =
    %% Line 48
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Form = {'function',_X_L,Name,0,_X_Cs},Acc,Exports,TestSuffix,%% Line 49
									GeneratorSuffix,%% Line 49
											ExportSuffix> when 'true' ->
	      let <N> =
		  %% Line 50
		  call 'erlang':'atom_to_list'
		      (Name)
	      in  let <_cor8> =
		      %% Line 51
		      call 'sets':'is_element'
			  ({Name,0}, Exports)
		  in  let <_cor14> =
			  %% Line 52
			  ( case _cor8 of
			      ( <'false'> when 'true' ->
				    %% Line 53
				    ( case call 'lists':'suffix'
					       (TestSuffix, N) of
					( <( 'true'
					     -| ['compiler_generated'] )> when 'true' ->
					      'true'
					  -| ['compiler_generated'] )
					( <( 'false'
					     -| ['compiler_generated'] )> when 'true' ->
					      %% Line 54
					      ( case call 'lists':'suffix'
							 (GeneratorSuffix, N) of
						  ( <( 'true'
						       -| ['compiler_generated'] )> when 'true' ->
							'true'
						    -| ['compiler_generated'] )
						  ( <( 'false'
						       -| ['compiler_generated'] )> when 'true' ->
							call 'lists':'suffix'
							    (ExportSuffix, N)
						    -| ['compiler_generated'] )
						  ( <_cor10> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {( 'badarg'
								    -| ['compiler_generated'] ),_cor10}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
					( <_cor9> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {( 'badarg'
							  -| ['compiler_generated'] ),_cor9}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <'true'> when 'true' ->
				    'false'
				-| ['compiler_generated'] )
			      ( <_cor_variable> when 'true' ->
				    call 'erlang':'error'
					('badarg')
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      in  %% Line 51
			  case _cor14 of
			    %% Line 56
			    <'true'> when 'true' ->
				%% Line 57
				Acc
			    %% Line 58
			    <'false'> when 'true' ->
				%% Line 59
				[Form|Acc]
			    ( <_cor15> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor15})
			      -| ['compiler_generated'] )
			  end
	  %% Line 61
	  <{'function',_X_L,'eunit_wrapper_',1,_X_Cs},Acc,_cor22,_cor23,_cor24,_cor25> when 'true' ->
	      %% Line 63
	      Acc
	  %% Line 64
	  <Form,Acc,_cor26,_cor27,_cor28,_cor29> when 'true' ->
	      %% Line 65
	      [Form|Acc]
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('eunit_striptests')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('eunit_striptests', _cor0)
end