module 'eunit_test' ['enter_context'/4,
		     'macro_test_'/0,
		     'mf_wrapper'/2,
		     'module_info'/0,
		     'module_info'/1,
		     'multi_setup'/1,
		     'run_testfun'/1,
		     'test'/0,
		     'wrapper_test_'/0,
		     'wrapper_test_exported_'/0]
    attributes []
'get_stacktrace'/0 =
    %% Line 37
    fun () ->
	%% Line 38
	apply 'get_stacktrace'/1
	    ([])
'get_stacktrace'/1 =
    %% Line 40
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 41
	    call 'erlang':'get_stacktrace'
		()
	in  let <_cor2> =
		%% Line 41
		apply 'prune_trace'/2
		    (_cor1, _cor0)
	    in  %% Line 41
		call 'eunit_lib':'uniq'
		    (_cor2)
'prune_trace'/2 =
    %% Line 43
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'eunit_data',_cor5,_cor6}|Rest],Tail> when 'true' ->
	      %% Line 44
	      apply 'prune_trace'/2
		  (Rest, Tail)
	  %% Line 45
	  <[{'eunit_data',_cor7,_cor8,_cor9}|Rest],Tail> when 'true' ->
	      %% Line 46
	      apply 'prune_trace'/2
		  (Rest, Tail)
	  %% Line 47
	  <[{'eunit_test',_cor10,_cor11}|_X_Rest],Tail> when 'true' ->
	      %% Line 48
	      Tail
	  %% Line 49
	  <[{'eunit_test',_cor12,_cor13,_cor14}|_X_Rest],Tail> when 'true' ->
	      %% Line 50
	      Tail
	  %% Line 51
	  <[T|Ts],Tail> when 'true' ->
	      let <_cor2> =
		  %% Line 52
		  apply 'prune_trace'/2
		      (Ts, Tail)
	      in  %% Line 52
		  [T|_cor2]
	  %% Line 53
	  <[],Tail> when 'true' ->
	      %% Line 54
	      Tail
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'prune_trace',2}}] )
	    -| ['compiler_generated'] )
	end
'run_testfun'/1 =
    %% Line 63
    fun (_cor0) ->
	%% Line 64
	try
	    %% Line 65
	    apply _cor0
		()
	of <_cor1> ->
	    %% Line 67
	    {'ok',_cor1}
	catch <_cor5,_cor4,_cor3> ->
	    case <_cor5,_cor4,_cor3> of
	      %% Line 69
	      <'throw',{'eunit_internal',Term},_cor8> when 'true' ->
		  %% Line 71
		  call 'erlang':'throw'
		      (Term)
	      %% Line 72
	      <Class,Reason,_cor9> when 'true' ->
		  let <_cor6> =
		      %% Line 73
		      apply 'get_stacktrace'/0
			  ()
		  in  %% Line 73
		      {'error',{Class,Reason,_cor6}}
	    end
'macro_test_'/0 =
    %% Line 78
    fun () ->
	let <_cor3> =
	    %% Line 80
	    ( fun () ->
		  let <_cor0> =
		      %% Line 81
		      ( fun () ->
			    'undefined'
			-| [{'id',{0,0,'-macro_test_/0-fun-0-'}}] )
		  in  let <_cor267> =
			  %% Line 82
			  apply 'run_testfun'/1
			      (_cor0)
		      in  %% Line 82
			  case _cor267 of
			    <{'ok','undefined'}> when 'true' ->
				( _cor267
				  -| ['compiler_generated'] )
			    ( <_cor2> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor2})
			      -| ['compiler_generated'] )
			  end
	      -| [{'id',{0,0,'-macro_test_/0-fun-1-'}}] )
	in  let <_cor11> =
		%% Line 84
		( fun () ->
		      let <_cor8> =
			  %% Line 85
			  ( fun () ->
				let <_cor7> =
				    ( fun () ->
					  'ok'
				      -| [{'id',{0,0,'-macro_test_/0-fun-2-'}}] )
				in  apply _cor7
					()
			    -| [{'id',{0,0,'-macro_test_/0-fun-3-'}}] )
		      in  let <_cor269> =
			      %% Line 86
			      apply 'run_testfun'/1
				  (_cor8)
			  in  %% Line 86
			      case _cor269 of
				<{'ok','ok'}> when 'true' ->
				    ( _cor269
				      -| ['compiler_generated'] )
				( <_cor10> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor10})
				  -| ['compiler_generated'] )
			      end
		  -| [{'id',{0,0,'-macro_test_/0-fun-4-'}}] )
	    in  let <_cor19> =
		    %% Line 88
		    ( fun () ->
			  let <_cor16> =
			      %% Line 89
			      ( fun () ->
				    let <_cor15> =
					( fun () ->
					      call 'erlang':'error'
						  ({'assertion_failed',[{'module','eunit_test'}|[{'line',89}|[{'expression',[102|[97|[108|[115|[101]]]]]}|[{'expected','true'}|[{'value','false'}]]]]]})
					  -| [{'id',{0,0,'-macro_test_/0-fun-5-'}}] )
				    in  apply _cor15
					    ()
				-| [{'id',{0,0,'-macro_test_/0-fun-6-'}}] )
			  in  let <_cor271> =
				  %% Line 97
				  apply 'run_testfun'/1
				      (_cor16)
			      in  %% Line 97
				  case _cor271 of
				    <{'error',{'error',{'assertion_failed',[{'module',_cor272}|[{'line',_cor273}|[{'expression',_cor274}|[{'expected','true'}|[{'value','false'}]]]]]},_cor275}}> when 'true' ->
					( _cor271
					  -| ['compiler_generated'] )
				    ( <_cor18> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor18})
				      -| ['compiler_generated'] )
				  end
		      -| [{'id',{0,0,'-macro_test_/0-fun-7-'}}] )
		in  let <_cor27> =
			%% Line 99
			( fun () ->
			      let <_cor24> =
				  %% Line 100
				  ( fun () ->
					let <_cor23> =
					    ( fun () ->
						  call 'erlang':'error'
						      ({'assertion_failed',[{'module','eunit_test'}|[{'line',100}|[{'expression',[91|[32|[93]]]}|[{'expected','true'}|[{'value',{'not_a_boolean',[]}}]]]]]})
					      -| [{'id',{0,0,'-macro_test_/0-fun-8-'}}] )
					in  apply _cor23
						()
				    -| [{'id',{0,0,'-macro_test_/0-fun-9-'}}] )
			      in  let <_cor277> =
				      %% Line 108
				      apply 'run_testfun'/1
					  (_cor24)
				  in  %% Line 108
				      case _cor277 of
					<{'error',{'error',{'assertion_failed',[{'module',_cor278}|[{'line',_cor279}|[{'expression',_cor280}|[{'expected','true'}|[{'value',{'not_a_boolean',[]}}]]]]]},_cor281}}> when 'true' ->
					    ( _cor277
					      -| ['compiler_generated'] )
					( <_cor26> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor26})
					  -| ['compiler_generated'] )
				      end
			  -| [{'id',{0,0,'-macro_test_/0-fun-10-'}}] )
		    in  let <_cor35> =
			    %% Line 110
			    ( fun () ->
				  let <_cor32> =
				      %% Line 111
				      ( fun () ->
					    let <_cor31> =
						( fun () ->
						      'ok'
						  -| [{'id',{0,0,'-macro_test_/0-fun-11-'}}] )
					    in  apply _cor31
						    ()
					-| [{'id',{0,0,'-macro_test_/0-fun-12-'}}] )
				  in  let <_cor283> =
					  %% Line 112
					  apply 'run_testfun'/1
					      (_cor32)
				      in  %% Line 112
					  case _cor283 of
					    <{'ok','ok'}> when 'true' ->
						( _cor283
						  -| ['compiler_generated'] )
					    ( <_cor34> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor34})
					      -| ['compiler_generated'] )
					  end
			      -| [{'id',{0,0,'-macro_test_/0-fun-13-'}}] )
			in  let <_cor43> =
				%% Line 114
				( fun () ->
				      let <_cor40> =
					  %% Line 115
					  ( fun () ->
						let <_cor39> =
						    ( fun () ->
							  call 'erlang':'error'
							      ({'assertion_failed',[{'module','eunit_test'}|[{'line',115}|[{'expression',[110|[111|[116|[32|[40|[32|[116|[114|[117|[101|[32|[41]]]]]]]]]]]]}|[{'expected','true'}|[{'value','false'}]]]]]})
						      -| [{'id',{0,0,'-macro_test_/0-fun-14-'}}] )
						in  apply _cor39
							()
					    -| [{'id',{0,0,'-macro_test_/0-fun-15-'}}] )
				      in  let <_cor285> =
					      %% Line 123
					      apply 'run_testfun'/1
						  (_cor40)
					  in  %% Line 123
					      case _cor285 of
						<{'error',{'error',{'assertion_failed',[{'module',_cor286}|[{'line',_cor287}|[{'expression',_cor288}|[{'expected','true'}|[{'value','false'}]]]]]},_cor289}}> when 'true' ->
						    ( _cor285
						      -| ['compiler_generated'] )
						( <_cor42> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor42})
						  -| ['compiler_generated'] )
					      end
				  -| [{'id',{0,0,'-macro_test_/0-fun-16-'}}] )
			    in  let <_cor49> =
				    %% Line 125
				    ( fun () ->
					  let <_cor46> =
					      %% Line 126
					      ( fun () ->
						    let <_cor45> =
							( fun () ->
							      'ok'
							  -| [{'id',{0,0,'-macro_test_/0-fun-17-'}}] )
						    in  apply _cor45
							    ()
						-| [{'id',{0,0,'-macro_test_/0-fun-18-'}}] )
					  in  let <_cor290> =
						  %% Line 127
						  apply 'run_testfun'/1
						      (_cor46)
					      in  %% Line 127
						  case _cor290 of
						    <{'ok','ok'}> when 'true' ->
							( _cor290
							  -| ['compiler_generated'] )
						    ( <_cor48> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor48})
						      -| ['compiler_generated'] )
						  end
				      -| [{'id',{0,0,'-macro_test_/0-fun-19-'}}] )
				in  let <_cor55> =
					%% Line 129
					( fun () ->
					      let <_cor52> =
						  %% Line 130
						  ( fun () ->
							let <_cor51> =
							    ( fun () ->
								  call 'erlang':'error'
								      ({'assertMatch_failed',[{'module','eunit_test'}|[{'line',130}|[{'expression',[91|[32|[93]]]}|[{'pattern',[91|[32|[95|[32|[93]]]]]}|[{'value',[]}]]]]]})
							      -| [{'id',{0,0,'-macro_test_/0-fun-20-'}}] )
							in  apply _cor51
								()
						    -| [{'id',{0,0,'-macro_test_/0-fun-21-'}}] )
					      in  let <_cor292> =
						      %% Line 138
						      apply 'run_testfun'/1
							  (_cor52)
						  in  %% Line 138
						      case _cor292 of
							<{'error',{'error',{'assertMatch_failed',[{'module',_cor293}|[{'line',_cor294}|[{'expression',_cor295}|[{'pattern',[91|[32|[95|[32|[93]]]]]}|[{'value',[]}]]]]]},_cor296}}> when 'true' ->
							    ( _cor292
							      -| ['compiler_generated'] )
							( <_cor54> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor54})
							  -| ['compiler_generated'] )
						      end
					  -| [{'id',{0,0,'-macro_test_/0-fun-22-'}}] )
				    in  let <_cor62> =
					    %% Line 140
					    ( fun () ->
						  let <_cor59> =
						      %% Line 141
						      ( fun () ->
							    let <_cor58> =
								( fun () ->
								      'ok'
								  -| [{'id',{0,0,'-macro_test_/0-fun-23-'}}] )
							    in  apply _cor58
								    ()
							-| [{'id',{0,0,'-macro_test_/0-fun-24-'}}] )
						  in  let <_cor298> =
							  %% Line 142
							  apply 'run_testfun'/1
							      (_cor59)
						      in  %% Line 142
							  case _cor298 of
							    <{'ok','ok'}> when 'true' ->
								( _cor298
								  -| ['compiler_generated'] )
							    ( <_cor61> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_cor61})
							      -| ['compiler_generated'] )
							  end
					      -| [{'id',{0,0,'-macro_test_/0-fun-25-'}}] )
					in  let <_cor69> =
						%% Line 144
						( fun () ->
						      let <_cor66> =
							  %% Line 145
							  ( fun () ->
								let <_cor65> =
								    ( fun () ->
									  call 'erlang':'error'
									      ({'assertNotMatch_failed',[{'module','eunit_test'}|[{'line',145}|[{'expression',[91|[32|[52|[50|[32|[93]]]]]]}|[{'pattern',[91|[32|[95|[32|[93]]]]]}|[{'value',[42]}]]]]]})
								      -| [{'id',{0,0,'-macro_test_/0-fun-26-'}}] )
								in  apply _cor65
									()
							    -| [{'id',{0,0,'-macro_test_/0-fun-27-'}}] )
						      in  let <_cor301> =
							      %% Line 153
							      apply 'run_testfun'/1
								  (_cor66)
							  in  %% Line 153
							      case _cor301 of
								<{'error',{'error',{'assertNotMatch_failed',[{'module',_cor302}|[{'line',_cor303}|[{'expression',_cor304}|[{'pattern',[91|[32|[95|[32|[93]]]]]}|[{'value',[42]}]]]]]},_cor305}}> when 'true' ->
								    ( _cor301
								      -| ['compiler_generated'] )
								( <_cor68> when 'true' ->
								      primop 'match_fail'
									  ({'badmatch',_cor68})
								  -| ['compiler_generated'] )
							      end
						  -| [{'id',{0,0,'-macro_test_/0-fun-28-'}}] )
					    in  let <_cor77> =
						    %% Line 155
						    ( fun () ->
							  let <_cor74> =
							      %% Line 156
							      ( fun () ->
								    let <_cor73> =
									( fun (_cor71) ->
									      case <> of
										<>
										    when call 'erlang':'=:='
											  ('ok',
											   _cor71) ->
										    'ok'
										<> when 'true' ->
										    call 'erlang':'error'
											({'assertEqual_failed',[{'module','eunit_test'}|[{'line',156}|[{'expression',[111|[107]]}|[{'expected',_cor71}|[{'value','ok'}]]]]]})
									      end
									  -| [{'id',{0,0,'-macro_test_/0-fun-29-'}}] )
								    in  apply _cor73
									    ('ok')
								-| [{'id',{0,0,'-macro_test_/0-fun-30-'}}] )
							  in  let <_cor307> =
								  %% Line 157
								  apply 'run_testfun'/1
								      (_cor74)
							      in  %% Line 157
								  case _cor307 of
								    <{'ok','ok'}> when 'true' ->
									( _cor307
									  -| ['compiler_generated'] )
								    ( <_cor76> when 'true' ->
									  primop 'match_fail'
									      ({'badmatch',_cor76})
								      -| ['compiler_generated'] )
								  end
						      -| [{'id',{0,0,'-macro_test_/0-fun-31-'}}] )
						in  let <_cor85> =
							%% Line 159
							( fun () ->
							      let <_cor82> =
								  %% Line 160
								  ( fun () ->
									let <_cor81> =
									    ( fun (_cor79) ->
										  case <> of
										    <>
											when call 'erlang':'=:='
											      (2,
											       _cor79) ->
											'ok'
										    <> when 'true' ->
											call 'erlang':'error'
											    ({'assertEqual_failed',[{'module','eunit_test'}|[{'line',160}|[{'expression',[49|[32|[43|[32|[49]]]]]}|[{'expected',_cor79}|[{'value',2}]]]]]})
										  end
									      -| [{'id',{0,0,'-macro_test_/0-fun-32-'}}] )
									in  apply _cor81
										(3)
								    -| [{'id',{0,0,'-macro_test_/0-fun-33-'}}] )
							      in  let <_cor309> =
								      %% Line 168
								      apply 'run_testfun'/1
									  (_cor82)
								  in  %% Line 168
								      case _cor309 of
									<{'error',{'error',{'assertEqual_failed',[{'module',_cor310}|[{'line',_cor311}|[{'expression',_cor312}|[{'expected',3}|[{'value',2}]]]]]},_cor313}}> when 'true' ->
									    ( _cor309
									      -| ['compiler_generated'] )
									( <_cor84> when 'true' ->
									      primop 'match_fail'
										  ({'badmatch',_cor84})
									  -| ['compiler_generated'] )
								      end
							  -| [{'id',{0,0,'-macro_test_/0-fun-34-'}}] )
						    in  let <_cor93> =
							    %% Line 170
							    ( fun () ->
								  let <_cor90> =
								      %% Line 171
								      ( fun () ->
									    let <_cor89> =
										( fun (_cor87) ->
										      case <> of
											<>
											    when call 'erlang':'=:='
												  (0,
												   _cor87) ->
											    call 'erlang':'error'
												({'assertNotEqual_failed',[{'module','eunit_test'}|[{'line',171}|[{'expression',[48]}|[{'value',_cor87}|[]]]]]})
											<> when 'true' ->
											    'ok'
										      end
										  -| [{'id',{0,0,'-macro_test_/0-fun-35-'}}] )
									    in  apply _cor89
										    (1)
									-| [{'id',{0,0,'-macro_test_/0-fun-36-'}}] )
								  in  let <_cor316> =
									  %% Line 172
									  apply 'run_testfun'/1
									      (_cor90)
								      in  %% Line 172
									  case _cor316 of
									    <{'ok','ok'}> when 'true' ->
										( _cor316
										  -| ['compiler_generated'] )
									    ( <_cor92> when 'true' ->
										  primop 'match_fail'
										      ({'badmatch',_cor92})
									      -| ['compiler_generated'] )
									  end
							      -| [{'id',{0,0,'-macro_test_/0-fun-37-'}}] )
							in  let <_cor101> =
								%% Line 174
								( fun () ->
								      let <_cor98> =
									  %% Line 175
									  ( fun () ->
										let <_cor97> =
										    ( fun (_cor95) ->
											  case <> of
											    <>
												when call 'erlang':'=:='
												      (2,
												       _cor95) ->
												call 'erlang':'error'
												    ({'assertNotEqual_failed',[{'module','eunit_test'}|[{'line',175}|[{'expression',[49|[32|[43|[32|[49]]]]]}|[{'value',_cor95}|[]]]]]})
											    <> when 'true' ->
												'ok'
											  end
										      -| [{'id',{0,0,'-macro_test_/0-fun-38-'}}] )
										in  apply _cor97
											(2)
									    -| [{'id',{0,0,'-macro_test_/0-fun-39-'}}] )
								      in  let <_cor319> =
									      %% Line 182
									      apply 'run_testfun'/1
										  (_cor98)
									  in  %% Line 182
									      case _cor319 of
										<{'error',{'error',{'assertNotEqual_failed',[{'module',_cor320}|[{'line',_cor321}|[{'expression',_cor322}|[{'value',2}]]]]},_cor323}}> when 'true' ->
										    ( _cor319
										      -| ['compiler_generated'] )
										( <_cor100> when 'true' ->
										      primop 'match_fail'
											  ({'badmatch',_cor100})
										  -| ['compiler_generated'] )
									      end
								  -| [{'id',{0,0,'-macro_test_/0-fun-40-'}}] )
							    in  let <_cor120> =
								    %% Line 184
								    ( fun () ->
									  let <_cor117> =
									      %% Line 185
									      ( fun () ->
										    let <_cor116> =
											( fun () ->
											      try
												  %% Line 186
												  call 'erlang':'error'
												      ('badarith')
											      of <_cor102> ->
												  %% Line 186
												  call 'erlang':'error'
												      ({'assertException_failed',[{'module','eunit_test'}|[{'line',186}|[{'expression',[101|[114|[108|[97|[110|[103|[32|[58|[32|[101|[114|[114|[111|[114|[32|[40|[32|[98|[97|[100|[97|[114|[105|[116|[104|[32|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'pattern',[123|[32|[101|[114|[114|[111|[114|[32|[44|[32|[98|[97|[100|[97|[114|[105|[116|[104|[32|[44|[32|[91|[46|[46|[46|[93|[32|[125]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'unexpected_success',_cor102}|[]]]]]]})
											      catch <_cor110,_cor109,_cor108> ->
												  case <_cor110,_cor109,_cor108> of
												    <'error','badarith',_cor324> when 'true' ->
													'ok'
												    <_X__C,_X__T,_cor325> when 'true' ->
													let <_cor115> =
													    call 'erlang':'get_stacktrace'
														()
													in  call 'erlang':'error'
														({'assertException_failed',[{'module','eunit_test'}|[{'line',185}|[{'expression',[101|[114|[108|[97|[110|[103|[32|[58|[32|[101|[114|[114|[111|[114|[32|[40|[32|[98|[97|[100|[97|[114|[105|[116|[104|[32|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'pattern',[123|[32|[101|[114|[114|[111|[114|[32|[44|[32|[98|[97|[100|[97|[114|[105|[116|[104|[32|[44|[32|[91|[46|[46|[46|[93|[32|[125]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'unexpected_exception',{_X__C,_X__T,_cor115}}|[]]]]]]})
												  end
											  -| [{'id',{0,0,'-macro_test_/0-fun-41-'}}] )
										    in  apply _cor116
											    ()
										-| [{'id',{0,0,'-macro_test_/0-fun-42-'}}] )
									  in  let <_cor326> =
										  %% Line 187
										  apply 'run_testfun'/1
										      (_cor117)
									      in  %% Line 187
										  case _cor326 of
										    <{'ok','ok'}> when 'true' ->
											( _cor326
											  -| ['compiler_generated'] )
										    ( <_cor119> when 'true' ->
											  primop 'match_fail'
											      ({'badmatch',_cor119})
										      -| ['compiler_generated'] )
										  end
								      -| [{'id',{0,0,'-macro_test_/0-fun-43-'}}] )
								in  let <_cor139> =
									%% Line 189
									( fun () ->
									      let <_cor136> =
										  %% Line 190
										  ( fun () ->
											let <_cor135> =
											    ( fun () ->
												  call 'erlang':'error'
												      ({'assertException_failed',[{'module','eunit_test'}|[{'line',190}|[{'expression',[111|[107]]}|[{'pattern',[123|[32|[101|[114|[114|[111|[114|[32|[44|[32|[98|[97|[100|[97|[114|[105|[116|[104|[32|[44|[32|[91|[46|[46|[46|[93|[32|[125]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'unexpected_success','ok'}]]]]]})
											      -| [{'id',{0,0,'-macro_test_/0-fun-44-'}}] )
											in  apply _cor135
												()
										    -| [{'id',{0,0,'-macro_test_/0-fun-45-'}}] )
									      in  let <_cor329> =
										      %% Line 198
										      apply 'run_testfun'/1
											  (_cor136)
										  in  %% Line 198
										      case _cor329 of
											<{'error',{'error',{'assertException_failed',[{'module',_cor330}|[{'line',_cor331}|[{'expression',_cor332}|[{'pattern',_cor333}|[{'unexpected_success','ok'}]]]]]},_cor334}}> when 'true' ->
											    ( _cor329
											      -| ['compiler_generated'] )
											( <_cor138> when 'true' ->
											      primop 'match_fail'
												  ({'badmatch',_cor138})
											  -| ['compiler_generated'] )
										      end
									  -| [{'id',{0,0,'-macro_test_/0-fun-46-'}}] )
								    in  let <_cor158> =
									    %% Line 200
									    ( fun () ->
										  let <_cor155> =
										      %% Line 201
										      ( fun () ->
											    let <_cor154> =
												( fun () ->
												      try
													  %% Line 202
													  call 'erlang':'error'
													      ('badarith')
												      of <_cor140> ->
													  %% Line 202
													  call 'erlang':'error'
													      ({'assertException_failed',[{'module','eunit_test'}|[{'line',202}|[{'expression',[101|[114|[108|[97|[110|[103|[32|[58|[32|[101|[114|[114|[111|[114|[32|[40|[32|[98|[97|[100|[97|[114|[105|[116|[104|[32|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'pattern',[123|[32|[101|[114|[114|[111|[114|[32|[44|[32|[98|[97|[100|[97|[114|[103|[32|[44|[32|[91|[46|[46|[46|[93|[32|[125]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'unexpected_success',_cor140}|[]]]]]]})
												      catch <_cor148,_cor147,_cor146> ->
													  case <_cor148,_cor147,_cor146> of
													    <'error','badarg',_cor335> when 'true' ->
														'ok'
													    <_X__C,_X__T,_cor336> when 'true' ->
														let <_cor153> =
														    call 'erlang':'get_stacktrace'
															()
														in  call 'erlang':'error'
															({'assertException_failed',[{'module','eunit_test'}|[{'line',201}|[{'expression',[101|[114|[108|[97|[110|[103|[32|[58|[32|[101|[114|[114|[111|[114|[32|[40|[32|[98|[97|[100|[97|[114|[105|[116|[104|[32|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'pattern',[123|[32|[101|[114|[114|[111|[114|[32|[44|[32|[98|[97|[100|[97|[114|[103|[32|[44|[32|[91|[46|[46|[46|[93|[32|[125]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'unexpected_exception',{_X__C,_X__T,_cor153}}|[]]]]]]})
													  end
												  -| [{'id',{0,0,'-macro_test_/0-fun-47-'}}] )
											    in  apply _cor154
												    ()
											-| [{'id',{0,0,'-macro_test_/0-fun-48-'}}] )
										  in  let <_cor337> =
											  %% Line 211
											  apply 'run_testfun'/1
											      (_cor155)
										      in  %% Line 211
											  case _cor337 of
											    <{'error',{'error',{'assertException_failed',[{'module',_cor338}|[{'line',_cor339}|[{'expression',_cor340}|[{'pattern',_cor341}|[{'unexpected_exception',{'error','badarith',_cor342}}|[]]]]]]},_cor343}}> when 'true' ->
												( _cor337
												  -| ['compiler_generated'] )
											    ( <_cor157> when 'true' ->
												  primop 'match_fail'
												      ({'badmatch',_cor157})
											      -| ['compiler_generated'] )
											  end
									      -| [{'id',{0,0,'-macro_test_/0-fun-49-'}}] )
									in  let <_cor177> =
										%% Line 213
										( fun () ->
										      let <_cor174> =
											  %% Line 214
											  ( fun () ->
												let <_cor173> =
												    ( fun () ->
													  try
													      %% Line 215
													      call 'erlang':'error'
														  ('badarith')
													  of <_cor159> ->
													      %% Line 215
													      call 'erlang':'error'
														  ({'assertException_failed',[{'module','eunit_test'}|[{'line',215}|[{'expression',[101|[114|[108|[97|[110|[103|[32|[58|[32|[101|[114|[114|[111|[114|[32|[40|[32|[98|[97|[100|[97|[114|[105|[116|[104|[32|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'pattern',[123|[32|[101|[114|[114|[111|[114|[32|[44|[32|[98|[97|[100|[97|[114|[105|[116|[104|[32|[44|[32|[91|[46|[46|[46|[93|[32|[125]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'unexpected_success',_cor159}|[]]]]]]})
													  catch <_cor167,_cor166,_cor165> ->
													      case <_cor167,_cor166,_cor165> of
														<'error','badarith',_cor344> when 'true' ->
														    'ok'
														<_X__C,_X__T,_cor345> when 'true' ->
														    let <_cor172> =
															call 'erlang':'get_stacktrace'
															    ()
														    in  call 'erlang':'error'
															    ({'assertException_failed',[{'module','eunit_test'}|[{'line',214}|[{'expression',[101|[114|[108|[97|[110|[103|[32|[58|[32|[101|[114|[114|[111|[114|[32|[40|[32|[98|[97|[100|[97|[114|[105|[116|[104|[32|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'pattern',[123|[32|[101|[114|[114|[111|[114|[32|[44|[32|[98|[97|[100|[97|[114|[105|[116|[104|[32|[44|[32|[91|[46|[46|[46|[93|[32|[125]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'unexpected_exception',{_X__C,_X__T,_cor172}}|[]]]]]]})
													      end
												      -| [{'id',{0,0,'-macro_test_/0-fun-50-'}}] )
												in  apply _cor173
													()
											    -| [{'id',{0,0,'-macro_test_/0-fun-51-'}}] )
										      in  let <_cor346> =
											      %% Line 216
											      apply 'run_testfun'/1
												  (_cor174)
											  in  %% Line 216
											      case _cor346 of
												<{'ok','ok'}> when 'true' ->
												    ( _cor346
												      -| ['compiler_generated'] )
												( <_cor176> when 'true' ->
												      primop 'match_fail'
													  ({'badmatch',_cor176})
												  -| ['compiler_generated'] )
											      end
										  -| [{'id',{0,0,'-macro_test_/0-fun-52-'}}] )
									    in  let <_cor196> =
										    %% Line 218
										    ( fun () ->
											  let <_cor193> =
											      %% Line 219
											      ( fun () ->
												    let <_cor192> =
													( fun () ->
													      try
														  call 'erlang':'exit'
														      ('normal')
													      of <_cor178> ->
														  call 'erlang':'error'
														      ({'assertException_failed',[{'module','eunit_test'}|[{'line',219}|[{'expression',[101|[120|[105|[116|[32|[40|[32|[110|[111|[114|[109|[97|[108|[32|[41]]]]]]]]]]]]]]]}|[{'pattern',[123|[32|[101|[120|[105|[116|[32|[44|[32|[110|[111|[114|[109|[97|[108|[32|[44|[32|[91|[46|[46|[46|[93|[32|[125]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'unexpected_success',_cor178}|[]]]]]]})
													      catch <_cor186,_cor185,_cor184> ->
														  case <_cor186,_cor185,_cor184> of
														    <'exit','normal',_cor347> when 'true' ->
															'ok'
														    <_X__C,_X__T,_cor348> when 'true' ->
															let <_cor191> =
															    call 'erlang':'get_stacktrace'
																()
															in  call 'erlang':'error'
																({'assertException_failed',[{'module','eunit_test'}|[{'line',219}|[{'expression',[101|[120|[105|[116|[32|[40|[32|[110|[111|[114|[109|[97|[108|[32|[41]]]]]]]]]]]]]]]}|[{'pattern',[123|[32|[101|[120|[105|[116|[32|[44|[32|[110|[111|[114|[109|[97|[108|[32|[44|[32|[91|[46|[46|[46|[93|[32|[125]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'unexpected_exception',{_X__C,_X__T,_cor191}}|[]]]]]]})
														  end
													  -| [{'id',{0,0,'-macro_test_/0-fun-53-'}}] )
												    in  apply _cor192
													    ()
												-| [{'id',{0,0,'-macro_test_/0-fun-54-'}}] )
											  in  let <_cor349> =
												  %% Line 220
												  apply 'run_testfun'/1
												      (_cor193)
											      in  %% Line 220
												  case _cor349 of
												    <{'ok','ok'}> when 'true' ->
													( _cor349
													  -| ['compiler_generated'] )
												    ( <_cor195> when 'true' ->
													  primop 'match_fail'
													      ({'badmatch',_cor195})
												      -| ['compiler_generated'] )
												  end
										      -| [{'id',{0,0,'-macro_test_/0-fun-55-'}}] )
										in  let <_cor215> =
											%% Line 222
											( fun () ->
											      let <_cor212> =
												  %% Line 223
												  ( fun () ->
													let <_cor211> =
													    ( fun () ->
														  try
														      call 'erlang':'throw'
															  ('foo')
														  of <_cor197> ->
														      call 'erlang':'error'
															  ({'assertException_failed',[{'module','eunit_test'}|[{'line',223}|[{'expression',[116|[104|[114|[111|[119|[32|[40|[32|[102|[111|[111|[32|[41]]]]]]]]]]]]]}|[{'pattern',[123|[32|[116|[104|[114|[111|[119|[32|[44|[32|[102|[111|[111|[32|[44|[32|[91|[46|[46|[46|[93|[32|[125]]]]]]]]]]]]]]]]]]]]]]]}|[{'unexpected_success',_cor197}|[]]]]]]})
														  catch <_cor205,_cor204,_cor203> ->
														      case <_cor205,_cor204,_cor203> of
															<'throw','foo',_cor350> when 'true' ->
															    'ok'
															<_X__C,_X__T,_cor351> when 'true' ->
															    let <_cor210> =
																call 'erlang':'get_stacktrace'
																    ()
															    in  call 'erlang':'error'
																    ({'assertException_failed',[{'module','eunit_test'}|[{'line',223}|[{'expression',[116|[104|[114|[111|[119|[32|[40|[32|[102|[111|[111|[32|[41]]]]]]]]]]]]]}|[{'pattern',[123|[32|[116|[104|[114|[111|[119|[32|[44|[32|[102|[111|[111|[32|[44|[32|[91|[46|[46|[46|[93|[32|[125]]]]]]]]]]]]]]]]]]]]]]]}|[{'unexpected_exception',{_X__C,_X__T,_cor210}}|[]]]]]]})
														      end
													      -| [{'id',{0,0,'-macro_test_/0-fun-56-'}}] )
													in  apply _cor211
														()
												    -| [{'id',{0,0,'-macro_test_/0-fun-57-'}}] )
											      in  let <_cor352> =
												      %% Line 224
												      apply 'run_testfun'/1
													  (_cor212)
												  in  %% Line 224
												      case _cor352 of
													<{'ok','ok'}> when 'true' ->
													    ( _cor352
													      -| ['compiler_generated'] )
													( <_cor214> when 'true' ->
													      primop 'match_fail'
														  ({'badmatch',_cor214})
													  -| ['compiler_generated'] )
												      end
											  -| [{'id',{0,0,'-macro_test_/0-fun-58-'}}] )
										    in  let <_cor232> =
											    %% Line 226
											    ( fun () ->
												  let <_cor229> =
												      %% Line 227
												      ( fun () ->
													    let <_cor228> =
														( fun () ->
														      'ok'
														  -| [{'id',{0,0,'-macro_test_/0-fun-59-'}}] )
													    in  apply _cor228
														    ()
													-| [{'id',{0,0,'-macro_test_/0-fun-60-'}}] )
												  in  let <_cor357> =
													  %% Line 228
													  apply 'run_testfun'/1
													      (_cor229)
												      in  %% Line 228
													  case _cor357 of
													    <{'ok','ok'}> when 'true' ->
														( _cor357
														  -| ['compiler_generated'] )
													    ( <_cor231> when 'true' ->
														  primop 'match_fail'
														      ({'badmatch',_cor231})
													      -| ['compiler_generated'] )
													  end
											      -| [{'id',{0,0,'-macro_test_/0-fun-61-'}}] )
											in  let <_cor249> =
												%% Line 230
												( fun () ->
												      let <_cor246> =
													  %% Line 231
													  ( fun () ->
														let <_cor245> =
														    ( fun () ->
															  try
															      %% Line 232
															      call 'erlang':'error'
																  ('badarg')
															  of <_cor233> ->
															      %% Line 232
															      'ok'
															  catch <_cor237,_cor236,_cor235> ->
															      %% Line 232
															      case _cor237 of
																<'error'> when 'true' ->
																    case _cor236 of
																      <'badarith'> when 'true' ->
																	  let <_cor242> =
																	      call 'erlang':'get_stacktrace'
																		  ()
																	  in  call 'erlang':'error'
																		  ({'assertNotException_failed',[{'module','eunit_test'}|[{'line',231}|[{'expression',[101|[114|[108|[97|[110|[103|[32|[58|[32|[101|[114|[114|[111|[114|[32|[40|[32|[98|[97|[100|[97|[114|[103|[32|[41]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'pattern',[123|[32|[101|[114|[114|[111|[114|[32|[44|[32|[98|[97|[100|[97|[114|[105|[116|[104|[32|[44|[32|[91|[46|[46|[46|[93|[32|[125]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'unexpected_exception',{_cor237,_cor236,_cor242}}|[]]]]]]})
																      <_cor360> when 'true' ->
																	  'ok'
																    end
																<_cor361> when 'true' ->
																    'ok'
															      end
														      -| [{'id',{0,0,'-macro_test_/0-fun-62-'}}] )
														in  apply _cor245
															()
													    -| [{'id',{0,0,'-macro_test_/0-fun-63-'}}] )
												      in  let <_cor362> =
													      %% Line 233
													      apply 'run_testfun'/1
														  (_cor246)
													  in  %% Line 233
													      case _cor362 of
														<{'ok','ok'}> when 'true' ->
														    ( _cor362
														      -| ['compiler_generated'] )
														( <_cor248> when 'true' ->
														      primop 'match_fail'
															  ({'badmatch',_cor248})
														  -| ['compiler_generated'] )
													      end
												  -| [{'id',{0,0,'-macro_test_/0-fun-64-'}}] )
											    in  let <_cor266> =
												    %% Line 235
												    ( fun () ->
													  let <_cor263> =
													      %% Line 236
													      ( fun () ->
														    let <_cor262> =
															( fun () ->
															      try
																  %% Line 237
																  call 'erlang':'error'
																      ('badarith')
															      of <_cor250> ->
																  %% Line 237
																  'ok'
															      catch <_cor254,_cor253,_cor252> ->
																  %% Line 237
																  case _cor254 of
																    <'error'> when 'true' ->
																	case _cor253 of
																	  <'badarith'> when 'true' ->
																	      let <_cor259> =
																		  call 'erlang':'get_stacktrace'
																		      ()
																	      in  call 'erlang':'error'
																		      ({'assertNotException_failed',[{'module','eunit_test'}|[{'line',236}|[{'expression',[101|[114|[108|[97|[110|[103|[32|[58|[32|[101|[114|[114|[111|[114|[32|[40|[32|[98|[97|[100|[97|[114|[105|[116|[104|[32|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'pattern',[123|[32|[101|[114|[114|[111|[114|[32|[44|[32|[98|[97|[100|[97|[114|[105|[116|[104|[32|[44|[32|[91|[46|[46|[46|[93|[32|[125]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'unexpected_exception',{_cor254,_cor253,_cor259}}|[]]]]]]})
																	  <_cor365> when 'true' ->
																	      'ok'
																	end
																    <_cor366> when 'true' ->
																	'ok'
																  end
															  -| [{'id',{0,0,'-macro_test_/0-fun-65-'}}] )
														    in  apply _cor262
															    ()
														-| [{'id',{0,0,'-macro_test_/0-fun-66-'}}] )
													  in  let <_cor367> =
														  %% Line 246
														  apply 'run_testfun'/1
														      (_cor263)
													      in  %% Line 246
														  case _cor367 of
														    <{'error',{'error',{'assertNotException_failed',[{'module',_cor368}|[{'line',_cor369}|[{'expression',_cor370}|[{'pattern',_cor371}|[{'unexpected_exception',{'error','badarith',_cor372}}|[]]]]]]},_cor373}}> when 'true' ->
															( _cor367
															  -| ['compiler_generated'] )
														    ( <_cor265> when 'true' ->
															  primop 'match_fail'
															      ({'badmatch',_cor265})
														      -| ['compiler_generated'] )
														  end
												      -| [{'id',{0,0,'-macro_test_/0-fun-67-'}}] )
												in  %% Line 79
												    {[109|[97|[99|[114|[111|[32|[100|[101|[102|[105|[110|[105|[116|[105|[111|[110|[115]]]]]]]]]]]]]]]]],%% Line 80
																									[{80,_cor3}|%% Line 84
																										    [{84,_cor11}|%% Line 88
																												 [{88,_cor19}|%% Line 99
																													      [{99,_cor27}|%% Line 110
																															   [{110,_cor35}|%% Line 114
																																	 [{114,_cor43}|%% Line 125
																																		       [{125,_cor49}|%% Line 129
																																				     [{129,_cor55}|%% Line 140
																																						   [{140,_cor62}|%% Line 144
																																								 [{144,_cor69}|%% Line 155
																																									       [{155,_cor77}|%% Line 159
																																											     [{159,_cor85}|%% Line 170
																																													   [{170,_cor93}|%% Line 174
																																															 [{174,_cor101}|%% Line 184
																																																	[{184,_cor120}|%% Line 189
																																																		       [{189,_cor139}|%% Line 200
																																																				      [{200,_cor158}|%% Line 213
																																																						     [{213,_cor177}|%% Line 218
																																																								    [{218,_cor196}|%% Line 222
																																																										   [{222,_cor215}|%% Line 226
																																																												  [{226,_cor232}|%% Line 230
																																																														 [{230,_cor249}|%% Line 235
																																																																[{235,_cor266}|%% Line 248
																																																																	       []]]]]]]]]]]]]]]]]]]]]]]]}
'mf_wrapper'/2 =
    %% Line 264
    fun (_cor1,_cor0) ->
	%% Line 265
	( fun () ->
	      %% Line 266
	      try
		  call _cor1:_cor0
		      ()
	      of <_cor2> ->
		  _cor2
	      catch <_cor5,_cor4,_cor3> ->
		  case <_cor5,_cor4,_cor3> of
		    %% Line 268
		    <'error','undef',_cor10> when 'true' ->
			%% Line 270
			case call 'erlang':'module_loaded'
				 (_cor1) of
			  %% Line 271
			  <'false'> when 'true' ->
			      %% Line 272
			      apply 'fail'/1
				  ({'module_not_found',_cor1})
			  %% Line 273
			  <'true'> when 'true' ->
			      %% Line 274
			      case call 'erlang':'function_exported'
				       (_cor1, _cor0, 0) of
				%% Line 275
				<'false'> when 'true' ->
				    %% Line 276
				    apply 'fail'/1
					({'no_such_function',{_cor1,_cor0,0}})
				%% Line 277
				<'true'> when 'true' ->
				    %% Line 278
				    apply 'rethrow'/3
					('error', 'undef', [{_cor1,_cor0,0}|[]])
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor6})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor7> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor7})
			    -| ['compiler_generated'] )
			end
		    ( <_cor5,_cor4,_cor3> when 'true' ->
			  primop 'raise'
			      (_cor3, _cor4)
		      -| ['compiler_generated'] )
		  end
	  -| [{'id',{0,0,'-mf_wrapper/2-fun-0-'}}] )
'rethrow'/3 =
    %% Line 284
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 285
	    apply 'get_stacktrace'/1
		(_cor0)
	in  %% Line 285
	    call 'erlang':'raise'
		(_cor2, _cor1, _cor3)
'fail'/1 =
    %% Line 287
    fun (_cor0) ->
	%% Line 288
	call 'erlang':'throw'
	    ({'eunit_internal',_cor0})
'wrapper_test_'/0 =
    %% Line 292
    fun () ->
	let <_cor16> =
	    %% Line 294
	    ( fun () ->
		  let <_cor15> =
		      ( fun () ->
			    try
				let <_cor0> =
				    %% Line 295
				    apply 'mf_wrapper'/2
					('eunit_nonexisting', 'test')
				in  %% Line 295
				    apply 'run_testfun'/1
					(_cor0)
			    of <_cor1> ->
				%% Line 295
				call 'erlang':'error'
				    ({'assertException_failed',[{'module','eunit_test'}|[{'line',295}|[{'expression',[114|[117|[110|[95|[116|[101|[115|[116|[102|[117|[110|[32|[40|[32|[109|[102|[95|[119|[114|[97|[112|[112|[101|[114|[32|[40|[32|[101|[117|[110|[105|[116|[95|[110|[111|[110|[101|[120|[105|[115|[116|[105|[110|[103|[32|[44|[32|[116|[101|[115|[116|[32|[41|[32|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'pattern',[123|[32|[116|[104|[114|[111|[119|[32|[44|[32|[123|[32|[109|[111|[100|[117|[108|[101|[95|[110|[111|[116|[95|[102|[111|[117|[110|[100|[32|[44|[32|[101|[117|[110|[105|[116|[95|[110|[111|[110|[101|[120|[105|[115|[116|[105|[110|[103|[32|[125|[32|[44|[32|[91|[46|[46|[46|[93|[32|[125]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'unexpected_success',_cor1}|[]]]]]]})
			    catch <_cor9,_cor8,_cor7> ->
				case <_cor9,_cor8,_cor7> of
				  <'throw',{'module_not_found','eunit_nonexisting'},_cor37> when 'true' ->
				      'ok'
				  <_X__C,_X__T,_cor38> when 'true' ->
				      let <_cor14> =
					  call 'erlang':'get_stacktrace'
					      ()
				      in  call 'erlang':'error'
					      ({'assertException_failed',[{'module','eunit_test'}|[{'line',294}|[{'expression',[114|[117|[110|[95|[116|[101|[115|[116|[102|[117|[110|[32|[40|[32|[109|[102|[95|[119|[114|[97|[112|[112|[101|[114|[32|[40|[32|[101|[117|[110|[105|[116|[95|[110|[111|[110|[101|[120|[105|[115|[116|[105|[110|[103|[32|[44|[32|[116|[101|[115|[116|[32|[41|[32|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'pattern',[123|[32|[116|[104|[114|[111|[119|[32|[44|[32|[123|[32|[109|[111|[100|[117|[108|[101|[95|[110|[111|[116|[95|[102|[111|[117|[110|[100|[32|[44|[32|[101|[117|[110|[105|[116|[95|[110|[111|[110|[101|[120|[105|[115|[116|[105|[110|[103|[32|[125|[32|[44|[32|[91|[46|[46|[46|[93|[32|[125]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'unexpected_exception',{_X__C,_X__T,_cor14}}|[]]]]]]})
				end
			-| [{'id',{0,0,'-wrapper_test_/0-fun-0-'}}] )
		  in  apply _cor15
			  ()
	      -| [{'id',{0,0,'-wrapper_test_/0-fun-1-'}}] )
	in  let <_cor33> =
		%% Line 296
		( fun () ->
		      let <_cor32> =
			  ( fun () ->
				try
				    let <_cor17> =
					%% Line 298
					apply 'mf_wrapper'/2
					    ('eunit_test', 'nonexisting_test')
				    in  %% Line 298
					apply 'run_testfun'/1
					    (_cor17)
				of <_cor18> ->
				    %% Line 298
				    call 'erlang':'error'
					({'assertException_failed',[{'module','eunit_test'}|[{'line',298}|[{'expression',[114|[117|[110|[95|[116|[101|[115|[116|[102|[117|[110|[32|[40|[32|[109|[102|[95|[119|[114|[97|[112|[112|[101|[114|[32|[40|[32|[63|[32|[77|[79|[68|[85|[76|[69|[32|[44|[32|[110|[111|[110|[101|[120|[105|[115|[116|[105|[110|[103|[95|[116|[101|[115|[116|[32|[41|[32|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'pattern',[123|[32|[116|[104|[114|[111|[119|[32|[44|[32|[123|[32|[110|[111|[95|[115|[117|[99|[104|[95|[102|[117|[110|[99|[116|[105|[111|[110|[32|[44|[32|[123|[32|[63|[32|[77|[79|[68|[85|[76|[69|[32|[44|[32|[110|[111|[110|[101|[120|[105|[115|[116|[105|[110|[103|[95|[116|[101|[115|[116|[32|[44|[32|[48|[32|[125|[32|[125|[32|[44|[32|[91|[46|[46|[46|[93|[32|[125]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'unexpected_success',_cor18}|[]]]]]]})
				catch <_cor26,_cor25,_cor24> ->
				    case <_cor26,_cor25,_cor24> of
				      <'throw',%% Line 297
					       {'no_such_function',{'eunit_test','nonexisting_test',0}},_cor39> when 'true' ->
					  %% Line 297
					  'ok'
				      %% Line 297
				      <_X__C,_X__T,_cor40> when 'true' ->
					  let <_cor31> =
					      call 'erlang':'get_stacktrace'
						  ()
					  in  call 'erlang':'error'
						  ({'assertException_failed',[{'module','eunit_test'}|[{'line',297}|[{'expression',[114|[117|[110|[95|[116|[101|[115|[116|[102|[117|[110|[32|[40|[32|[109|[102|[95|[119|[114|[97|[112|[112|[101|[114|[32|[40|[32|[63|[32|[77|[79|[68|[85|[76|[69|[32|[44|[32|[110|[111|[110|[101|[120|[105|[115|[116|[105|[110|[103|[95|[116|[101|[115|[116|[32|[41|[32|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'pattern',[123|[32|[116|[104|[114|[111|[119|[32|[44|[32|[123|[32|[110|[111|[95|[115|[117|[99|[104|[95|[102|[117|[110|[99|[116|[105|[111|[110|[32|[44|[32|[123|[32|[63|[32|[77|[79|[68|[85|[76|[69|[32|[44|[32|[110|[111|[110|[101|[120|[105|[115|[116|[105|[110|[103|[95|[116|[101|[115|[116|[32|[44|[32|[48|[32|[125|[32|[125|[32|[44|[32|[91|[46|[46|[46|[93|[32|[125]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'unexpected_exception',{_X__C,_X__T,_cor31}}|[]]]]]]})
				    end
			    -| [{'id',{0,0,'-wrapper_test_/0-fun-2-'}}] )
		      in  apply _cor32
			      ()
		  -| [{'id',{0,0,'-wrapper_test_/0-fun-3-'}}] )
	    in  let <_cor36> =
		    %% Line 299
		    ( fun () ->
			  let <_cor34> =
			      %% Line 300
			      apply 'mf_wrapper'/2
				  ('eunit_test', 'wrapper_test_exported_')
			  in  let <_cor41> =
				  %% Line 300
				  apply 'run_testfun'/1
				      (_cor34)
			      in  %% Line 300
				  case _cor41 of
				    <{'error',{'error','undef',_X_T}}> when 'true' ->
					( _cor41
					  -| ['compiler_generated'] )
				    ( <_cor35> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor35})
				      -| ['compiler_generated'] )
				  end
		      -| [{'id',{0,0,'-wrapper_test_/0-fun-4-'}}] )
		in  %% Line 293
		    {[101|[114|[114|[111|[114|[32|[104|[97|[110|[100|[108|[105|[110|[103|[32|[105|[110|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[119|[114|[97|[112|[112|[101|[114]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],%% Line 294
																											  [{294,_cor16}|%% Line 296
																													[{296,_cor33}|%% Line 299
																														      [{299,_cor36}|%% Line 301
																																    []]]]}
'wrapper_test_exported_'/0 =
    %% Line 304
    fun () ->
	let <_cor0> =
	    %% Line 305
	    call 'eunit_test':'nonexisting_function'
		()
	in  %% Line 305
	    {'ok',_cor0}
'enter_context'/4 =
    %% Line 320
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 321
	try
	    apply _cor3
		()
	of <_cor4> ->
	    %% Line 323
	    try
		apply _cor1
		    (_cor4)
	    of <_cor5> ->
		do  %% Line 325
		    case call 'eunit_lib':'is_not_test'
			     (_cor5) of
		      %% Line 326
		      <'true'> when 'true' ->
			  do  catch
				  %% Line 327
				  call 'erlang':'throw'
				      ('error')
			      %% Line 328
			      case call 'erlang':'fun_info'
				       (_cor1, 'module') of
				<{'module',M}> when 'true' ->
				    %% Line 329
				    case call 'erlang':'fun_info'
					     (_cor1, 'name') of
				      <{'name',N}> when 'true' ->
					  %% Line 330
					  case call 'erlang':'fun_info'
						   (_cor1, 'arity') of
					    <{'arity',A}> when 'true' ->
						%% Line 331
						apply 'context_error'/3
						    ({'bad_instantiator',{{M,N,A},_cor5}}, %% Line 332
											   'error', %% Line 332
												    'badarg')
					    ( <_cor8> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor8})
					      -| ['compiler_generated'] )
					  end
				      ( <_cor7> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor7})
					-| ['compiler_generated'] )
				    end
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor6})
				  -| ['compiler_generated'] )
			      end
		      %% Line 333
		      <'false'> when 'true' ->
			  'ok'
		      ( <_cor9> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor9})
			-| ['compiler_generated'] )
		    end
		    %% Line 336
		    letrec
			'after$^0'/0 =
			    fun () ->
				%% Line 339
				try
				    apply _cor2
					(_cor4)
				of <_cor10> ->
				    _cor10
				catch <_cor13,_cor12,_cor11> ->
				    %% Line 342
				    apply 'context_error'/3
					('cleanup_failed', _cor13, _cor12)
		    in  try
			    apply _cor0
				(_cor5)
			of <_cor14> ->
			    do  ( apply 'after$^0'/0
				      ()
				  -| ['compiler_generated'] )
				_cor14
			catch <_cor17,_cor16,_cor15> ->
			    do  ( apply 'after$^0'/0
				      ()
				  -| ['compiler_generated'] )
				primop 'raise'
				    (_cor15, _cor16)
	    catch <_cor21,_cor20,_cor19> ->
		%% Line 347
		apply 'context_error'/3
		    ('instantiation_failed', _cor21, _cor20)
	catch <_cor25,_cor24,_cor23> ->
	    %% Line 351
	    apply 'context_error'/3
		('setup_failed', _cor25, _cor24)
'context_error'/3 =
    %% Line 354
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 355
	    apply 'get_stacktrace'/0
		()
	in  %% Line 355
	    call 'erlang':'throw'
		({'context_error',_cor2,{_cor1,_cor0,_cor3}})
'multi_setup'/1 =
    %% Line 361
    fun (_cor0) ->
	%% Line 362
	case apply 'multi_setup'/2
		 (_cor0, ( 'ok'/1
			   -| [{'id',{0,0,'-multi_setup/1-fun-0-'}}] )) of
	  <{SetupAll,CleanupAll}> when 'true' ->
	      let <_cor7> =
		  %% Line 365
		  ( fun () ->
			let <_cor6> =
			    apply SetupAll
				([])
			in  call 'lists':'reverse'
				(_cor6)
		    -| [{'id',{0,0,'-multi_setup/1-fun-1-'}}] )
	      in  let <_cor5> =
		      %% Line 366
		      ( fun (_cor3) ->
			    let <_cor2> =
				call 'lists':'reverse'
				    (_cor3)
			    in  apply CleanupAll
				    (_cor2)
			-| [{'id',{0,0,'-multi_setup/1-fun-2-'}}] )
		  in  %% Line 365
		      {_cor7,_cor5}
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'multi_setup'/2 =
    %% Line 368
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Tag,S,C}|Es],CleanupPrev> when 'true' ->
	      let <Cleanup> =
		  %% Line 369
		  ( fun (_cor8) ->
			case _cor8 of
			  <[R|Rs]> when 'true' ->
			      %% Line 370
			      try
				  apply C
				      (R)
			      of <_cor2> ->
				  %% Line 371
				  apply CleanupPrev
				      (Rs)
			      catch <_cor6,_cor5,_cor4> ->
				  let <_cor7> =
				      %% Line 374
				      apply 'get_stacktrace'/0
					  ()
				  in  %% Line 374
				      call 'erlang':'throw'
					  ({Tag,{_cor6,_cor5,_cor7}})
			  ( <_cor9> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor9})
				  -| [{'function_name',{'-multi_setup/2-fun-0-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-multi_setup/2-fun-0-'}}] )
	      in  %% Line 377
		  case apply 'multi_setup'/2
			   (Es, Cleanup) of
		    <{SetupRest,CleanupAll}> when 'true' ->
			let <_cor20> =
			    %% Line 378
			    ( fun (_cor18) ->
				  %% Line 379
				  try
				      apply S
					  ()
				  of <_cor12> ->
				      %% Line 381
				      apply SetupRest
					  ([_cor12|_cor18])
				  catch <_cor16,_cor15,_cor14> ->
				      do  %% Line 384
					  apply CleanupPrev
					      (_cor18)
					  let <_cor17> =
					      %% Line 385
					      apply 'get_stacktrace'/0
						  ()
					  in  %% Line 385
					      call 'erlang':'throw'
						  ({Tag,{_cor16,_cor15,_cor17}})
			      -| [{'id',{0,0,'-multi_setup/2-fun-1-'}}] )
			in  %% Line 378
			    {_cor20,%% Line 388
				    CleanupAll}
		    ( <_cor11> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor11})
		      -| ['compiler_generated'] )
		  end
	  %% Line 389
	  <[{Tag,S}|Es],CleanupPrev> when 'true' ->
	      %% Line 390
	      apply 'multi_setup'/2
		  ([{Tag,S,( 'ok'/1
			     -| [{'id',{0,0,'-multi_setup/2-fun-2-'}}] )}|Es], CleanupPrev)
	  %% Line 391
	  <[],CleanupAll> when 'true' ->
	      let <_cor23> =
		  %% Line 392
		  ( fun (_cor21) ->
			_cor21
		    -| [{'id',{0,0,'-multi_setup/2-fun-3-'}}] )
	      in  %% Line 392
		  {_cor23,CleanupAll}
	  ( <_cor25,_cor24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24})
		  -| [{'function_name',{'multi_setup',2}}] )
	    -| ['compiler_generated'] )
	end
'ok'/1 =
    %% Line 394
    fun (_cor0) ->
	'ok'
'test'/0 =
    fun () ->
	call 'eunit':'test'
	    ('eunit_test')
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('eunit_test')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('eunit_test', _cor0)
end