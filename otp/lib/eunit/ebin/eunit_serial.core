module 'eunit_serial' ['module_info'/0,
		       'module_info'/1,
		       'start'/1,
		       'test'/0]
    attributes [%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','test'},[{'record_field',28,{'atom',28,'f'},{'atom',28,'undefined'}}|[{'record_field',29,{'atom',29,'desc'},{'atom',29,'undefined'}}|[{'record_field',30,{'atom',30,'timeout'},{'atom',30,'undefined'}}|[{'record_field',31,{'atom',31,'location'},{'atom',31,'undefined'}}|[{'record_field',32,{'atom',32,'line'},{'integer',32,0}}]]]]],[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{{'record','group'},[{'record_field',35,{'atom',35,'desc'},{'atom',35,'undefined'}}|[{'record_field',36,{'atom',36,'order'},{'atom',36,'undefined'}}|[{'record_field',37,{'atom',37,'timeout'},{'atom',37,'undefined'}}|[{'record_field',38,{'atom',38,'context'},{'atom',38,'undefined'}}|[{'record_field',39,{'atom',39,'spawn'},{'atom',39,'undefined'}}|[{'record_field',40,{'atom',40,'tests'},{'atom',40,'undefined'}}]]]]]],[]}],
		%% Line 42
		'type' =
		    %% Line 42
		    [{{'record','context'},[{'record_field',42,{'atom',42,'setup'},{'atom',42,'undefined'}}|[{'record_field',43,{'atom',43,'cleanup'},{'atom',43,'undefined'}}|[{'record_field',44,{'atom',44,'process'},{'atom',44,'local'}}]]],[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{{'record','state'},[{'typed_record_field',{'record_field',59,{'atom',59,'listeners'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'remote_type',59,[{'atom',59,'sets'}|[{'atom',59,'set'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'cancelled'},{'call',60,{'remote',60,{'atom',60,'eunit_lib'},{'atom',60,'trie_new'}},[]}},{'remote_type',60,[{'atom',60,'gb_trees'}|[{'atom',60,'tree'}|[[]]]]}}|[{'typed_record_field',{'record_field',61,{'atom',61,'messages'},{'call',61,{'remote',61,{'atom',61,'dict'},{'atom',61,'new'}},[]}},{'remote_type',61,[{'atom',61,'dict'}|[{'atom',61,'dict'}|[[]]]]}}]]],[]}]]
'start'/1 =
    %% Line 63
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 64
	    ( fun () ->
		  apply 'serializer'/1
		      (_cor0)
	      -| [{'id',{0,0,'-start/1-fun-0-'}}] )
	in  %% Line 64
	    call 'erlang':'spawn'
		(_cor1)
'serializer'/1 =
    %% Line 66
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 67
	    call 'sets':'from_list'
		(_cor0)
	in  let <_cor2> =
		%% Line 68
		call 'eunit_lib':'trie_new'
		    ()
	    in  let <_cor1> =
		    %% Line 69
		    call 'dict':'new'
			()
		in  let <St> =
			%% Line 67
			{'state',_cor3,_cor2,_cor1}
		    in  do  %% Line 70
			    apply 'expect'/4
				([], 'undefined', 0, St)
			    %% Line 71
			    call 'erlang':'exit'
				('normal')
'expect'/4 =
    %% Line 75
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 76
	case apply 'wait'/5
		 (_cor3, 'begin', _cor2, _cor1, _cor0) of
	  %% Line 77
	  <{'done',St1}> when 'true' ->
	      %% Line 78
	      {'true',St1}
	  %% Line 79
	  <{'cancel','prefix',_X_Msg,St1}> when 'true' ->
	      %% Line 82
	      {'true',St1}
	  %% Line 83
	  <{'cancel','exact',Msg,St1}> when 'true' ->
	      do  %% Line 84
		  apply 'cast_cancel'/3
		      (_cor3, Msg, St1)
		  %% Line 85
		  {'false',St1}
	  %% Line 86
	  <{'ok',Msg,St1}> when 'true' ->
	      do  %% Line 88
		  apply 'cast'/2
		      (Msg, St1)
		  let <_cor5> =
		      %% Line 89
		      case Msg of
			%% Line 90
			<{'status',_cor14,{'progress','begin',{'group',_X_Info}}}> when 'true' ->
			    %% Line 91
			    apply 'group'/3
				(_cor3, 0, St1)
			%% Line 92
			<_cor15> when 'true' ->
			    %% Line 93
			    St1
		      end
		  in  %% Line 95
		      case apply 'wait'/5
			       (_cor3, 'end', _cor2, _cor1, _cor5) of
			%% Line 96
			<{'cancel',Why,Msg1,St3}> when 'true' ->
			    do  %% Line 100
				apply 'cast_cancel'/3
				    (_cor3, Msg1, St3)
				let <_cor7> =
				    %% Line 101
				    call 'erlang':'=:='
					(Why, 'prefix')
				in  %% Line 101
				    {_cor7,St3}
			%% Line 102
			<{'ok',Msg1,St3}> when 'true' ->
			    do  %% Line 104
				apply 'cast'/2
				    (Msg1, St3)
				%% Line 105
				{'false',St3}
			( <_cor8> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor8})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor9> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor9})
	    -| ['compiler_generated'] )
	end
'group'/3 =
    %% Line 110
    fun (_cor2,_cor1,_cor0) ->
	let <N> =
	    %% Line 111
	    call 'erlang':'+'
		(_cor1, 1)
	in  let <_cor4> =
		%% Line 112
		call 'erlang':'++'
		    (_cor2, [N|[]])
	    in  %% Line 112
		case apply 'expect'/4
			 (_cor4, _cor2, _cor1, _cor0) of
		  %% Line 113
		  <{'false',St1}> when 'true' ->
		      %% Line 114
		      apply 'group'/3
			  (_cor2, N, St1)
		  %% Line 115
		  <{'true',St1}> when 'true' ->
		      %% Line 116
		      St1
		  ( <_cor5> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor5})
		    -| ['compiler_generated'] )
		end
'cast_cancel'/3 =
    %% Line 119
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Id,'undefined',St> when 'true' ->
	      %% Line 121
	      apply 'cast'/2
		  ({'status',Id,{'cancel','undefined'}}, St)
	  %% Line 122
	  <_X_Id,Msg,St> when 'true' ->
	      %% Line 123
	      apply 'cast'/2
		  (Msg, St)
	end
'cast'/2 =
    %% Line 125
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 126
	    ( fun (_cor5,_cor4) ->
		  call 'erlang':'!'
		      (_cor5, _cor4)
	      -| [{'id',{0,0,'-cast/2-fun-0-'}}] )
	in  %% Line 126
	    ( case _cor0 of
		( <( {'state',_rec0,_cor11,_cor12}
		     -| ['compiler_generated'] )> when 'true' ->
		      do  call 'sets':'fold'
			      (_cor8, _cor1, _rec0)
			  %% Line 127
			  'ok'
		  -| ['compiler_generated'] )
		( <_cor13> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'wait'/5 =
    %% Line 132
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 134
	case apply 'check_cancelled'/2
		 (_cor4, _cor0) of
	  %% Line 135
	  <'no'> when 'true' ->
	      %% Line 136
	      case apply 'recall'/2
		       (_cor4, _cor0) of
		%% Line 137
		<'undefined'> when 'true' ->
		    %% Line 138
		    apply 'wait_1'/5
			(_cor4, _cor3, _cor2, _cor1, _cor0)
		%% Line 139
		<Msg> when 'true' ->
		    let <_cor5> =
			%% Line 140
			apply 'forget'/2
			    (_cor4, _cor0)
		    in  %% Line 140
			{'ok',Msg,_cor5}
	      end
	  %% Line 142
	  <Why> when 'true' ->
	      let <_cor8> =
		  %% Line 144
		  apply 'recall'/2
		      (_cor4, _cor0)
	      in  let <_cor7> =
		      %% Line 144
		      apply 'forget'/2
			  (_cor4, _cor0)
		  in  %% Line 144
		      {'cancel',Why,_cor8,_cor7}
	end
'wait_1'/5 =
    %% Line 148
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 149
	receive
	  %% Line 150
	  <Msg = {'status',_cor12,{'progress',_cor13,_cor14}}>
	      when let <_cor15> =
		    call 'erlang':'=:='
			(_cor12, _cor4)
		in  let <_cor16> =
			call 'erlang':'=:='
			    (_cor13, _cor3)
		    in  call 'erlang':'and'
			    (_cor15, _cor16) ->
	      %% Line 152
	      {'ok',Msg,_cor0}
	  %% Line 153
	  <Msg = {'status',_cor17,{'progress','end',{_cor18,_cor19}}}>
	      when let <_cor20> =
		    call 'erlang':'=:='
			(_cor17, _cor2)
		in  let <_cor21> =
			call 'erlang':'=:='
			    (_cor18, _cor1)
		    in  call 'erlang':'and'
			    (_cor20, _cor21) ->
	      let <_cor5> =
		  %% Line 158
		  apply 'remember'/3
		      (_cor2, Msg, _cor0)
	      in  %% Line 158
		  {'done',_cor5}
	  %% Line 159
	  <Msg = {'status',SomeId,{'cancel',_X_Cause}}> when 'true' ->
	      let <St1> =
		  %% Line 161
		  apply 'set_cancelled'/3
		      (SomeId, Msg, _cor0)
	      in  %% Line 162
		  apply 'wait'/5
		      (_cor4, _cor3, _cor2, _cor1, St1)
	after 'infinity' ->
	  'true'
'set_cancelled'/3 =
    %% Line 165
    fun (_cor2,_cor1,_cor0) ->
	let <St> =
	    %% Line 166
	    apply 'remember'/3
		(_cor2, _cor1, _cor0)
	in  %% Line 167
	    ( case _cor0 of
		( <( {'state',_cor12,_rec3,_cor13}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <_rec1> =
			  call 'eunit_lib':'trie_store'
			      (_cor2, _rec3)
		      in  case St of
			    <{'state',_cor15,_cor16,_cor17}> when 'true' ->
				call 'erlang':'setelement'
				    (3, St, _rec1)
			    ( <_cor18> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
		  -| ['compiler_generated'] )
		( <_cor14> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'check_cancelled'/2 =
    %% Line 169
    fun (_cor1,_cor0) ->
	%% Line 171
	( case _cor0 of
	    ( <( {'state',_cor6,_rec4,_cor7}
		 -| ['compiler_generated'] )> when 'true' ->
		  call 'eunit_lib':'trie_match'
		      (_cor1, _rec4)
	      -| ['compiler_generated'] )
	    ( <_cor8> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'remember'/3 =
    %% Line 173
    fun (_cor2,_cor1,_cor0) ->
	%% Line 174
	( case _cor0 of
	    ( <( {'state',_cor11,_cor12,_rec7}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_rec5> =
		      call 'dict':'store'
			  (_cor2, _cor1, _rec7)
		  in  call 'erlang':'setelement'
			  (4, _cor0, _rec5)
	      -| ['compiler_generated'] )
	    ( <_cor13> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'forget'/2 =
    %% Line 176
    fun (_cor1,_cor0) ->
	%% Line 178
	( case _cor0 of
	    ( <( {'state',_cor9,_cor10,_rec10}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_rec8> =
		      call 'dict':'store'
			  (_cor1, 'undefined', _rec10)
		  in  call 'erlang':'setelement'
			  (4, _cor0, _rec8)
	      -| ['compiler_generated'] )
	    ( <_cor11> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'recall'/2 =
    %% Line 180
    fun (_cor1,_cor0) ->
	%% Line 181
	( case _cor0 of
	    ( <( {'state',_cor7,_cor8,_rec11}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'dict':'find'
			   (_cor1, _rec11) of
		    %% Line 182
		    <{'ok',Msg}> when 'true' ->
			Msg
		    %% Line 183
		    <'error'> when 'true' ->
			'undefined'
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor9> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'test'/0 =
    fun () ->
	call 'eunit':'test'
	    ('eunit_serial')
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('eunit_serial')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('eunit_serial', _cor0)
end