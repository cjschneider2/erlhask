module 'PKCS-FRAME' ['bit_string_format'/0,
		     'dec_AttributeUsage'/2,
		     'dec_Attributes'/2,
		     'dec_Context'/2,
		     'dec_EncryptedData'/2,
		     'dec_EncryptedPrivateKeyInfo'/2,
		     'dec_PBEParameter'/2,
		     'dec_PBES2-params'/2,
		     'dec_PBKDF2-params'/2,
		     'dec_PBMAC1-params'/2,
		     'dec_PrivateKey'/2,
		     'dec_PrivateKeyInfo'/2,
		     'dec_RC2-CBC-Parameter'/2,
		     'dec_RC5-CBC-Parameters'/2,
		     'dec_Version'/2,
		     'decode'/2,
		     'des-EDE3-CBC'/0,
		     'desCBC'/0,
		     'dialyzer-suppressions'/1,
		     'digestAlgorithm'/0,
		     'enc_AttributeUsage'/2,
		     'enc_Attributes'/2,
		     'enc_Context'/2,
		     'enc_EncryptedData'/2,
		     'enc_EncryptedPrivateKeyInfo'/2,
		     'enc_PBEParameter'/2,
		     'enc_PBES2-params'/2,
		     'enc_PBKDF2-params'/2,
		     'enc_PBMAC1-params'/2,
		     'enc_PrivateKey'/2,
		     'enc_PrivateKeyInfo'/2,
		     'enc_RC2-CBC-Parameter'/2,
		     'enc_RC5-CBC-Parameters'/2,
		     'enc_Version'/2,
		     'encode'/2,
		     'encoding_rule'/0,
		     'encryptionAlgorithm'/0,
		     'getdec_KeyEncryptionAlgorithms'/1,
		     'getdec_PBES1Algorithms'/1,
		     'getdec_PBES2-Encs'/1,
		     'getdec_PBES2-KDFs'/1,
		     'getdec_PBES2Algorithms'/1,
		     'getdec_PBKDF2-PRFs'/1,
		     'getdec_PBKDF2-SaltSources'/1,
		     'getdec_PBMAC1-KDFs'/1,
		     'getdec_PBMAC1-MACs'/1,
		     'getdec_PBMAC1Algorithms'/1,
		     'getdec_PrivateKeyAlgorithms'/1,
		     'getdec_SupportedContexts'/1,
		     'getdec_SupportingAlgorithms'/1,
		     'getdec_internal_object_set_argument_1'/1,
		     'getdec_internal_object_set_argument_2'/1,
		     'getdec_internal_object_set_argument_3'/1,
		     'getdec_internal_object_set_argument_4'/1,
		     'getdec_internal_object_set_argument_5'/1,
		     'getdec_internal_object_set_argument_6'/1,
		     'getdec_internal_object_set_argument_7'/1,
		     'getdec_internal_object_set_argument_8'/1,
		     'getdec_internal_object_set_argument_9'/1,
		     'getenc_KeyEncryptionAlgorithms'/1,
		     'getenc_PBES1Algorithms'/1,
		     'getenc_PBES2-Encs'/1,
		     'getenc_PBES2-KDFs'/1,
		     'getenc_PBES2Algorithms'/1,
		     'getenc_PBKDF2-PRFs'/1,
		     'getenc_PBKDF2-SaltSources'/1,
		     'getenc_PBMAC1-KDFs'/1,
		     'getenc_PBMAC1-MACs'/1,
		     'getenc_PBMAC1Algorithms'/1,
		     'getenc_PrivateKeyAlgorithms'/1,
		     'getenc_SupportedContexts'/1,
		     'getenc_SupportingAlgorithms'/1,
		     'getenc_internal_object_set_argument_1'/1,
		     'getenc_internal_object_set_argument_2'/1,
		     'getenc_internal_object_set_argument_3'/1,
		     'getenc_internal_object_set_argument_4'/1,
		     'getenc_internal_object_set_argument_5'/1,
		     'getenc_internal_object_set_argument_6'/1,
		     'getenc_internal_object_set_argument_7'/1,
		     'getenc_internal_object_set_argument_8'/1,
		     'getenc_internal_object_set_argument_9'/1,
		     'id-PBES2'/0,
		     'id-PBKDF2'/0,
		     'id-PBMAC1'/0,
		     'id-hmacWithSHA1'/0,
		     'info'/0,
		     'legacy_erlang_types'/0,
		     'module_info'/0,
		     'module_info'/1,
		     'pbeWithMD2AndDES-CBC'/0,
		     'pbeWithMD2AndRC2-CBC'/0,
		     'pbeWithMD5AndDES-CBC'/0,
		     'pbeWithMD5AndRC2-CBC'/0,
		     'pbeWithSHA1AndDES-CBC'/0,
		     'pbeWithSHA1AndRC2-CBC'/0,
		     'pkcs'/0,
		     'pkcs-5'/0,
		     'rc2CBC'/0,
		     'rc5-CBC-PAD'/0,
		     'rsadsi'/0]
    attributes [%% Line 7
		'asn1_info' =
		    %% Line 7
		    [{'vsn','3.0.1'}|[{'module','PKCS-FRAME'}|[{'options',['warnings'|['ber'|['errors'|[{'cwd',[47|[104|[111|[109|[101|[47|[103|[108|[101|[98|[101|[114|[47|[99|[111|[100|[101|[47|[111|[116|[112|[47|[108|[105|[98|[47|[112|[117|[98|[108|[105|[99|[95|[107|[101|[121|[47|[97|[115|[110|[49]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'outdir',[47|[104|[111|[109|[101|[47|[103|[108|[101|[98|[101|[114|[47|[99|[111|[100|[101|[47|[111|[116|[112|[47|[108|[105|[98|[47|[112|[117|[98|[108|[105|[99|[95|[107|[101|[121|[47|[97|[115|[110|[49]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|['asn1config'|['noobj'|['compact_bit_string'|['der'|[{'i',[46]}|[{'i',[47|[104|[111|[109|[101|[47|[103|[108|[101|[98|[101|[114|[47|[99|[111|[100|[101|[47|[111|[116|[112|[47|[108|[105|[98|[47|[112|[117|[98|[108|[105|[99|[95|[107|[101|[121|[47|[97|[115|[110|[49]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}]]]]]]]]]]]}]]]]
'encoding_rule'/0 =
    %% Line 130
    fun () ->
	'ber'
'bit_string_format'/0 =
    %% Line 132
    fun () ->
	'compact'
'legacy_erlang_types'/0 =
    %% Line 134
    fun () ->
	'true'
'encode'/2 =
    %% Line 136
    fun (_cor1,_cor0) ->
	%% Line 137
	try
	    let <_cor2> =
		apply 'encode_disp'/2
		    (_cor1, _cor0)
	    in  let <_cor3> =
		    call 'erlang':'element'
			(1, _cor2)
		in  call 'erlang':'iolist_to_binary'
			(_cor3)
	of <_cor4> ->
	    %% Line 139
	    {'ok',_cor4}
	catch <_cor8,_cor7,_cor6> ->
	    case <_cor8,_cor7,_cor6> of
	      %% Line 141
	      <Class,Exception,_cor14>
		  when let <_cor9> =
			call 'erlang':'=:='
			    (Class, 'error')
		    in  let <_cor10> =
			    call 'erlang':'=:='
				(Class, 'exit')
			in  call 'erlang':'or'
				(_cor9, _cor10) ->
		  %% Line 142
		  case Exception of
		    %% Line 143
		    <Error = {'error',Reason}> when 'true' ->
			%% Line 144
			Error
		    %% Line 145
		    <Reason> when 'true' ->
			%% Line 146
			{'error',{'asn1',Reason}}
		  end
	      ( <_cor8,_cor7,_cor6> when 'true' ->
		    primop 'raise'
			(_cor6, _cor7)
		-| ['compiler_generated'] )
	    end
'decode'/2 =
    %% Line 150
    fun (_cor1,_cor0) ->
	%% Line 151
	try
	    let <_cor2> =
		apply 'ber_decode_nif'/1
		    (_cor0)
	    in  let <_cor3> =
		    call 'erlang':'element'
			(1, _cor2)
		in  apply 'decode_disp'/2
			(_cor1, _cor3)
	of <_cor4> ->
	    %% Line 153
	    {'ok',_cor4}
	catch <_cor8,_cor7,_cor6> ->
	    case <_cor8,_cor7,_cor6> of
	      %% Line 155
	      <Class,Exception,_cor14>
		  when let <_cor9> =
			call 'erlang':'=:='
			    (Class, 'error')
		    in  let <_cor10> =
			    call 'erlang':'=:='
				(Class, 'exit')
			in  call 'erlang':'or'
				(_cor9, _cor10) ->
		  %% Line 156
		  case Exception of
		    %% Line 157
		    <Error = {'error',Reason}> when 'true' ->
			%% Line 158
			Error
		    %% Line 159
		    <Reason> when 'true' ->
			%% Line 160
			{'error',{'asn1',Reason}}
		  end
	      ( <_cor8,_cor7,_cor6> when 'true' ->
		    primop 'raise'
			(_cor6, _cor7)
		-| ['compiler_generated'] )
	    end
'encode_disp'/2 =
    %% Line 164
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'RC5-CBC-Parameters',Data> when 'true' ->
	      apply 'enc_RC5-CBC-Parameters'/1
		  (Data)
	  %% Line 165
	  <'RC2-CBC-Parameter',Data> when 'true' ->
	      apply 'enc_RC2-CBC-Parameter'/1
		  (Data)
	  %% Line 166
	  <'PBMAC1-params',Data> when 'true' ->
	      apply 'enc_PBMAC1-params'/1
		  (Data)
	  %% Line 167
	  <'PBES2-params',Data> when 'true' ->
	      apply 'enc_PBES2-params'/1
		  (Data)
	  %% Line 168
	  <'PBEParameter',Data> when 'true' ->
	      apply 'enc_PBEParameter'/1
		  (Data)
	  %% Line 169
	  <'PBKDF2-params',Data> when 'true' ->
	      apply 'enc_PBKDF2-params'/1
		  (Data)
	  %% Line 170
	  <'AttributeUsage',Data> when 'true' ->
	      apply 'enc_AttributeUsage'/1
		  (Data)
	  %% Line 171
	  <'Context',Data> when 'true' ->
	      apply 'enc_Context'/1
		  (Data)
	  %% Line 172
	  <'EncryptedData',Data> when 'true' ->
	      apply 'enc_EncryptedData'/1
		  (Data)
	  %% Line 173
	  <'EncryptedPrivateKeyInfo',Data> when 'true' ->
	      apply 'enc_EncryptedPrivateKeyInfo'/1
		  (Data)
	  %% Line 174
	  <'Attributes',Data> when 'true' ->
	      apply 'enc_Attributes'/1
		  (Data)
	  %% Line 175
	  <'PrivateKey',Data> when 'true' ->
	      apply 'enc_PrivateKey'/1
		  (Data)
	  %% Line 176
	  <'Version',Data> when 'true' ->
	      apply 'enc_Version'/1
		  (Data)
	  %% Line 177
	  <'PrivateKeyInfo',Data> when 'true' ->
	      apply 'enc_PrivateKeyInfo'/1
		  (Data)
	  %% Line 178
	  <Type,_X_Data> when 'true' ->
	      call 'erlang':'exit'
		  ({'error',{'asn1',{'undefined_type',Type}}})
	end
'decode_disp'/2 =
    %% Line 181
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'RC5-CBC-Parameters',Data> when 'true' ->
	      apply 'dec_RC5-CBC-Parameters'/1
		  (Data)
	  %% Line 182
	  <'RC2-CBC-Parameter',Data> when 'true' ->
	      apply 'dec_RC2-CBC-Parameter'/1
		  (Data)
	  %% Line 183
	  <'PBMAC1-params',Data> when 'true' ->
	      apply 'dec_PBMAC1-params'/1
		  (Data)
	  %% Line 184
	  <'PBES2-params',Data> when 'true' ->
	      apply 'dec_PBES2-params'/1
		  (Data)
	  %% Line 185
	  <'PBEParameter',Data> when 'true' ->
	      apply 'dec_PBEParameter'/1
		  (Data)
	  %% Line 186
	  <'PBKDF2-params',Data> when 'true' ->
	      apply 'dec_PBKDF2-params'/1
		  (Data)
	  %% Line 187
	  <'AttributeUsage',Data> when 'true' ->
	      apply 'dec_AttributeUsage'/1
		  (Data)
	  %% Line 188
	  <'Context',Data> when 'true' ->
	      apply 'dec_Context'/1
		  (Data)
	  %% Line 189
	  <'EncryptedData',Data> when 'true' ->
	      apply 'dec_EncryptedData'/1
		  (Data)
	  %% Line 190
	  <'EncryptedPrivateKeyInfo',Data> when 'true' ->
	      apply 'dec_EncryptedPrivateKeyInfo'/1
		  (Data)
	  %% Line 191
	  <'Attributes',Data> when 'true' ->
	      apply 'dec_Attributes'/1
		  (Data)
	  %% Line 192
	  <'PrivateKey',Data> when 'true' ->
	      apply 'dec_PrivateKey'/1
		  (Data)
	  %% Line 193
	  <'Version',Data> when 'true' ->
	      apply 'dec_Version'/1
		  (Data)
	  %% Line 194
	  <'PrivateKeyInfo',Data> when 'true' ->
	      apply 'dec_PrivateKeyInfo'/1
		  (Data)
	  %% Line 195
	  <Type,_X_Data> when 'true' ->
	      call 'erlang':'exit'
		  ({'error',{'asn1',{'undefined_type',Type}}})
	end
'info'/0 =
    %% Line 200
    fun () ->
	%% Line 201
	case call 'PKCS-FRAME':'module_info'
		 ('attributes') of
	  %% Line 202
	  <Attributes>
	      when call 'erlang':'is_list'
		    (Attributes) ->
	      %% Line 203
	      case call 'lists':'keyfind'
		       ('asn1_info', 1, Attributes) of
		%% Line 204
		<{_cor2,Info}>
		    when call 'erlang':'is_list'
			  (Info) ->
		    %% Line 205
		    Info
		%% Line 206
		<_cor3> when 'true' ->
		    %% Line 207
		    []
	      end
	  %% Line 209
	  <_cor4> when 'true' ->
	      %% Line 210
	      []
	end
'enc_RC5-CBC-Parameters'/1 =
    %% Line 217
    fun (_cor0) ->
	%% Line 218
	apply 'enc_RC5-CBC-Parameters'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_RC5-CBC-Parameters'/2 =
    %% Line 220
    fun (_cor1,_cor0) ->
	%% Line 221
	case _cor1 of
	  <{_cor15,Cindex1,Cindex2,Cindex3,Cindex4}> when 'true' ->
	      %% Line 226
	      case apply 'encode_integer'/3
		       (Cindex1, [{'v1-0',16}], [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 231
		    case apply 'encode_integer'/2
			     (Cindex2, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  %% Line 236
			  case apply 'encode_integer'/2
				   (Cindex3, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
			    <{EncBytes3,EncLen3}> when 'true' ->
				let <_cor7> =
				    %% Line 241
				    case Cindex4 of
				      %% Line 242
				      <'asn1_NOVALUE'> when 'true' ->
					  {#{}#,0}
				      %% Line 243
				      <_cor16> when 'true' ->
					  %% Line 244
					  apply 'encode_restricted_string'/2
					      (Cindex4, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#])
				    end
				in  %% Line 241
				    case _cor7 of
				      <{EncBytes4,EncLen4}> when 'true' ->
					  let <BytesSoFar> =
					      %% Line 247
					      [EncBytes1|[EncBytes2|[EncBytes3|[EncBytes4|[]]]]]
					  in  let <_cor10> =
						  %% Line 248
						  call 'erlang':'+'
						      (EncLen1, EncLen2)
					      in  let <_cor11> =
						      %% Line 248
						      call 'erlang':'+'
							  (_cor10, EncLen3)
						  in  let <LenSoFar> =
							  %% Line 248
							  call 'erlang':'+'
							      (_cor11, EncLen4)
						      in  %% Line 249
							  apply 'encode_tags'/3
							      (_cor0, BytesSoFar, LenSoFar)
				      ( <_cor8> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor8})
					-| ['compiler_generated'] )
				    end
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_RC5-CBC-Parameters'/1 =
    %% Line 252
    fun (_cor0) ->
	%% Line 253
	apply 'dec_RC5-CBC-Parameters'/2
	    (_cor0, [16])
'dec_RC5-CBC-Parameters'/2 =
    %% Line 255
    fun (_cor1,_cor0) ->
	%% Line 264
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Val1> =
		  %% Line 266
		  apply 'decode_integer'/2
		      (V1, [2])
	      in  let <Term1> =
		      %% Line 267
		      apply 'number2name'/2
			  (Val1, [{'v1-0',16}])
		  in  %% Line 274
		      case Tlv2 of
			<[V2|Tlv3]> when 'true' ->
			    let <Val2> =
				%% Line 276
				apply 'decode_integer'/2
				    (V2, [2])
			    in  %% Line 277
				case <> of
				  <>
				      when let <_cor8> =
					    call 'erlang':'=<'
						(8, Val2)
					in  let <_cor9> =
						call 'erlang':'=<'
						    (Val2, 127)
					    in  call 'erlang':'and'
						    (_cor8, _cor9) ->
				      %% Line 287
				      case Tlv3 of
					<[V3|Tlv4]> when 'true' ->
					    let <Val3> =
						%% Line 289
						apply 'decode_integer'/2
						    (V3, [2])
					    in  %% Line 290
						case <> of
						  <>
						      when let <_cor14> =
							    call 'erlang':'=<'
								(64, Val3)
							in  let <_cor15> =
								call 'erlang':'=<'
								    (Val3, 128)
							    in  call 'erlang':'and'
								    (_cor14, _cor15) ->
						      let <Term4,Tlv5> =
							  %% Line 300
							  case Tlv4 of
							    %% Line 301
							    <[{4,V4}|TempTlv5]> when 'true' ->
								let <_cor18> =
								    %% Line 303
								    apply 'decode_restricted_string'/2
									(V4, [])
								in  let <_cor19> =
									%% Line 303
									call 'erlang':'binary_to_list'
									    (_cor18)
								    in  <_cor19,%% Line 305
										TempTlv5>
							    %% Line 306
							    <_cor26> when 'true' ->
								%% Line 307
								<'asn1_NOVALUE',Tlv4>
							  end
						      in  do  %% Line 310
							      case Tlv5 of
								%% Line 311
								<[]> when 'true' ->
								    'ok'
								%% Line 311
								<_cor27> when 'true' ->
								    call 'erlang':'exit'
									({'error',{'asn1',{'unexpected',Tlv5}}})
							      end
							      %% Line 313
							      {'RC5-CBC-Parameters',Term1,Val2,Val3,Term4}
						  %% Line 292
						  <> when 'true' ->
						      %% Line 293
						      call 'erlang':'exit'
							  ({'error',{'asn1','bad_range'}})
						end
					( <_cor12> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor12})
					  -| ['compiler_generated'] )
				      end
				  %% Line 279
				  <> when 'true' ->
				      %% Line 280
				      call 'erlang':'exit'
					  ({'error',{'asn1','bad_range'}})
				end
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_RC2-CBC-Parameter'/1 =
    %% Line 320
    fun (_cor0) ->
	%% Line 321
	apply 'enc_RC2-CBC-Parameter'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_RC2-CBC-Parameter'/2 =
    %% Line 323
    fun (_cor1,_cor0) ->
	%% Line 324
	case _cor1 of
	  <{_cor11,Cindex1,Cindex2}> when 'true' ->
	      let <_cor4> =
		  %% Line 329
		  case Cindex1 of
		    %% Line 330
		    <'asn1_NOVALUE'> when 'true' ->
			{#{}#,0}
		    %% Line 331
		    <_cor12> when 'true' ->
			%% Line 332
			apply 'encode_integer'/2
			    (Cindex1, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
		  end
	      in  %% Line 329
		  case _cor4 of
		    <{EncBytes1,EncLen1}> when 'true' ->
			%% Line 338
			case apply 'encode_restricted_string'/2
				 (Cindex2, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#]) of
			  <{EncBytes2,EncLen2}> when 'true' ->
			      let <BytesSoFar> =
				  %% Line 340
				  [EncBytes1|[EncBytes2|[]]]
			      in  let <LenSoFar> =
				      %% Line 341
				      call 'erlang':'+'
					  (EncLen1, EncLen2)
				  in  %% Line 342
				      apply 'encode_tags'/3
					  (_cor0, BytesSoFar, LenSoFar)
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_RC2-CBC-Parameter'/1 =
    %% Line 345
    fun (_cor0) ->
	%% Line 346
	apply 'dec_RC2-CBC-Parameter'/2
	    (_cor0, [16])
'dec_RC2-CBC-Parameter'/2 =
    %% Line 348
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 352
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <Term1,Tlv2> =
		%% Line 357
		case Tlv1 of
		  %% Line 358
		  <[{2,V1}|TempTlv2]> when 'true' ->
		      let <_cor3> =
			  %% Line 359
			  apply 'decode_integer'/2
			      (V1, [])
		      in  <_cor3,%% Line 359
				 TempTlv2>
		  %% Line 360
		  <_cor15> when 'true' ->
		      %% Line 361
		      <'asn1_NOVALUE',Tlv1>
		end
	    in  %% Line 367
		case Tlv2 of
		  <[V2|Tlv3]> when 'true' ->
		      let <Val1> =
			  %% Line 369
			  apply 'decode_restricted_string'/2
			      (V2, [4])
		      in  let <C1> =
			      %% Line 370
			      call 'erlang':'byte_size'
				  (Val1)
			  in  %% Line 371
			      case <> of
				<>
				    when call 'erlang':'=:='
					  (C1,
					   8) ->
				    let <_cor10> =
					%% Line 372
					call 'erlang':'binary_to_list'
					    (Val1)
				    in  do  %% Line 378
					    case Tlv3 of
					      %% Line 379
					      <[]> when 'true' ->
						  'ok'
					      %% Line 379
					      <_cor16> when 'true' ->
						  call 'erlang':'exit'
						      ({'error',{'asn1',{'unexpected',Tlv3}}})
					    end
					    %% Line 381
					    {'RC2-CBC-Parameter',Term1,_cor10}
				%% Line 373
				<> when 'true' ->
				    %% Line 374
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  ( <_cor7> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor7})
		    -| ['compiler_generated'] )
		end
'enc_PBMAC1-params'/1 =
    %% Line 388
    fun (_cor0) ->
	%% Line 389
	apply 'enc_PBMAC1-params'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_PBMAC1-params'/2 =
    %% Line 391
    fun (_cor1,_cor0) ->
	%% Line 392
	case _cor1 of
	  <{_cor9,Cindex1,Cindex2}> when 'true' ->
	      %% Line 397
	      case apply 'enc_PBMAC1-params_keyDerivationFunc'/2
		       (Cindex1, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 402
		    case apply 'enc_PBMAC1-params_messageAuthScheme'/2
			     (Cindex2, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <BytesSoFar> =
			      %% Line 404
			      [EncBytes1|[EncBytes2|[]]]
			  in  let <LenSoFar> =
				  %% Line 405
				  call 'erlang':'+'
				      (EncLen1, EncLen2)
			      in  %% Line 406
				  apply 'encode_tags'/3
				      (_cor0, BytesSoFar, LenSoFar)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_PBMAC1-params_keyDerivationFunc'/2 =
    %% Line 413
    fun (_cor1,_cor0) ->
	%% Line 414
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2}> when 'true' ->
	      let <Objalgorithm> =
		  %% Line 416
		  call 'PKCS-FRAME':'getenc_internal_object_set_argument_1'
		      (Cindex1)
	      in  %% Line 421
		  case apply 'encode_object_identifier'/2
			   (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor7> =
			    %% Line 426
			    case Cindex2 of
			      %% Line 427
			      <'asn1_NOVALUE'> when 'true' ->
				  {#{}#,0}
			      %% Line 428
			      <_cor14> when 'true' ->
				  %% Line 429
				  case apply Objalgorithm
					   ('Type', Cindex2, []) of
				    <{TmpBytes2,_cor15}> when 'true' ->
					%% Line 430
					apply 'encode_open_type'/2
					    (TmpBytes2, [])
				    ( <_cor5> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor5})
				      -| ['compiler_generated'] )
				  end
			    end
			in  %% Line 426
			    case _cor7 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  let <BytesSoFar> =
				      %% Line 433
				      [EncBytes1|[EncBytes2|[]]]
				  in  let <LenSoFar> =
					  %% Line 434
					  call 'erlang':'+'
					      (EncLen1, EncLen2)
				      in  %% Line 435
					  apply 'encode_tags'/3
					      (_cor0, BytesSoFar, LenSoFar)
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_PBMAC1-params_keyDerivationFunc'/2 =
    %% Line 436
    fun (_cor1,_cor0) ->
	%% Line 445
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 446
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  let <Tmpterm1,Tlv3> =
		      %% Line 451
		      case Tlv2 of
			%% Line 452
			<[V2|TempTlv3]> when 'true' ->
			    let <_cor5> =
				%% Line 453
				apply 'decode_open_type'/2
				    (V2, [])
			    in  <_cor5,%% Line 453
				       TempTlv3>
			%% Line 454
			<_cor18> when 'true' ->
			    %% Line 455
			    <'asn1_NOVALUE',Tlv2>
		      end
		  in  let <DecObjalgorithmTerm1> =
			  %% Line 459
			  call 'PKCS-FRAME':'getdec_internal_object_set_argument_1'
			      (Term1)
		      in  let <_cor13> =
			      %% Line 461
			      case Tmpterm1 of
				%% Line 462
				<'asn1_NOVALUE'> when 'true' ->
				    'asn1_NOVALUE'
				%% Line 463
				<_cor19> when 'true' ->
				    let <_cor10> =
					catch
					    %% Line 464
					    apply DecObjalgorithmTerm1
						('Type', Tmpterm1, [])
				    in  %% Line 464
					case _cor10 of
					  %% Line 465
					  <{'EXIT',Reason1}> when 'true' ->
					      %% Line 466
					      call 'erlang':'exit'
						  ({'Type not compatible with table constraint',Reason1})
					  %% Line 467
					  <Tmpterm2> when 'true' ->
					      %% Line 468
					      Tmpterm2
					end
			      end
			  in  do  %% Line 472
				  case Tlv3 of
				    %% Line 473
				    <[]> when 'true' ->
					'ok'
				    %% Line 473
				    <_cor20> when 'true' ->
					call 'erlang':'exit'
					    ({'error',{'asn1',{'unexpected',Tlv3}}})
				  end
				  %% Line 475
				  {'PBMAC1-params_keyDerivationFunc',Term1,_cor13}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_PBMAC1-params_messageAuthScheme'/2 =
    %% Line 483
    fun (_cor1,_cor0) ->
	%% Line 484
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2}> when 'true' ->
	      let <Objalgorithm> =
		  %% Line 486
		  call 'PKCS-FRAME':'getenc_internal_object_set_argument_2'
		      (Cindex1)
	      in  %% Line 491
		  case apply 'encode_object_identifier'/2
			   (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor7> =
			    %% Line 496
			    case Cindex2 of
			      %% Line 497
			      <'asn1_NOVALUE'> when 'true' ->
				  {#{}#,0}
			      %% Line 498
			      <_cor14> when 'true' ->
				  %% Line 499
				  case apply Objalgorithm
					   ('Type', Cindex2, []) of
				    <{TmpBytes2,_cor15}> when 'true' ->
					%% Line 500
					apply 'encode_open_type'/2
					    (TmpBytes2, [])
				    ( <_cor5> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor5})
				      -| ['compiler_generated'] )
				  end
			    end
			in  %% Line 496
			    case _cor7 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  let <BytesSoFar> =
				      %% Line 503
				      [EncBytes1|[EncBytes2|[]]]
				  in  let <LenSoFar> =
					  %% Line 504
					  call 'erlang':'+'
					      (EncLen1, EncLen2)
				      in  %% Line 505
					  apply 'encode_tags'/3
					      (_cor0, BytesSoFar, LenSoFar)
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_PBMAC1-params_messageAuthScheme'/2 =
    %% Line 506
    fun (_cor1,_cor0) ->
	%% Line 515
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 516
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  let <Tmpterm1,Tlv3> =
		      %% Line 521
		      case Tlv2 of
			%% Line 522
			<[V2|TempTlv3]> when 'true' ->
			    let <_cor5> =
				%% Line 523
				apply 'decode_open_type'/2
				    (V2, [])
			    in  <_cor5,%% Line 523
				       TempTlv3>
			%% Line 524
			<_cor18> when 'true' ->
			    %% Line 525
			    <'asn1_NOVALUE',Tlv2>
		      end
		  in  let <DecObjalgorithmTerm1> =
			  %% Line 529
			  call 'PKCS-FRAME':'getdec_internal_object_set_argument_2'
			      (Term1)
		      in  let <_cor13> =
			      %% Line 531
			      case Tmpterm1 of
				%% Line 532
				<'asn1_NOVALUE'> when 'true' ->
				    'asn1_NOVALUE'
				%% Line 533
				<_cor19> when 'true' ->
				    let <_cor10> =
					catch
					    %% Line 534
					    apply DecObjalgorithmTerm1
						('Type', Tmpterm1, [])
				    in  %% Line 534
					case _cor10 of
					  %% Line 535
					  <{'EXIT',Reason1}> when 'true' ->
					      %% Line 536
					      call 'erlang':'exit'
						  ({'Type not compatible with table constraint',Reason1})
					  %% Line 537
					  <Tmpterm2> when 'true' ->
					      %% Line 538
					      Tmpterm2
					end
			      end
			  in  do  %% Line 542
				  case Tlv3 of
				    %% Line 543
				    <[]> when 'true' ->
					'ok'
				    %% Line 543
				    <_cor20> when 'true' ->
					call 'erlang':'exit'
					    ({'error',{'asn1',{'unexpected',Tlv3}}})
				  end
				  %% Line 545
				  {'PBMAC1-params_messageAuthScheme',Term1,_cor13}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'dec_PBMAC1-params'/1 =
    %% Line 549
    fun (_cor0) ->
	%% Line 550
	apply 'dec_PBMAC1-params'/2
	    (_cor0, [16])
'dec_PBMAC1-params'/2 =
    %% Line 552
    fun (_cor1,_cor0) ->
	%% Line 561
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 562
		  apply 'dec_PBMAC1-params_keyDerivationFunc'/2
		      (V1, [16])
	      in  %% Line 567
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 568
			    apply 'dec_PBMAC1-params_messageAuthScheme'/2
				(V2, [16])
			in  do  %% Line 570
				case Tlv3 of
				  %% Line 571
				  <[]> when 'true' ->
				      'ok'
				  %% Line 571
				  <_cor10> when 'true' ->
				      call 'erlang':'exit'
					  ({'error',{'asn1',{'unexpected',Tlv3}}})
				end
				%% Line 573
				{'PBMAC1-params',Term1,Term2}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_PBES2-params'/1 =
    %% Line 580
    fun (_cor0) ->
	%% Line 581
	apply 'enc_PBES2-params'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_PBES2-params'/2 =
    %% Line 583
    fun (_cor1,_cor0) ->
	%% Line 584
	case _cor1 of
	  <{_cor9,Cindex1,Cindex2}> when 'true' ->
	      %% Line 589
	      case apply 'enc_PBES2-params_keyDerivationFunc'/2
		       (Cindex1, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 594
		    case apply 'enc_PBES2-params_encryptionScheme'/2
			     (Cindex2, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <BytesSoFar> =
			      %% Line 596
			      [EncBytes1|[EncBytes2|[]]]
			  in  let <LenSoFar> =
				  %% Line 597
				  call 'erlang':'+'
				      (EncLen1, EncLen2)
			      in  %% Line 598
				  apply 'encode_tags'/3
				      (_cor0, BytesSoFar, LenSoFar)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_PBES2-params_keyDerivationFunc'/2 =
    %% Line 605
    fun (_cor1,_cor0) ->
	%% Line 606
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2}> when 'true' ->
	      let <Objalgorithm> =
		  %% Line 608
		  call 'PKCS-FRAME':'getenc_internal_object_set_argument_3'
		      (Cindex1)
	      in  %% Line 613
		  case apply 'encode_object_identifier'/2
			   (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor7> =
			    %% Line 618
			    case Cindex2 of
			      %% Line 619
			      <'asn1_NOVALUE'> when 'true' ->
				  {#{}#,0}
			      %% Line 620
			      <_cor14> when 'true' ->
				  %% Line 621
				  case apply Objalgorithm
					   ('Type', Cindex2, []) of
				    <{TmpBytes2,_cor15}> when 'true' ->
					%% Line 622
					apply 'encode_open_type'/2
					    (TmpBytes2, [])
				    ( <_cor5> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor5})
				      -| ['compiler_generated'] )
				  end
			    end
			in  %% Line 618
			    case _cor7 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  let <BytesSoFar> =
				      %% Line 625
				      [EncBytes1|[EncBytes2|[]]]
				  in  let <LenSoFar> =
					  %% Line 626
					  call 'erlang':'+'
					      (EncLen1, EncLen2)
				      in  %% Line 627
					  apply 'encode_tags'/3
					      (_cor0, BytesSoFar, LenSoFar)
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_PBES2-params_keyDerivationFunc'/2 =
    %% Line 628
    fun (_cor1,_cor0) ->
	%% Line 637
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 638
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  let <Tmpterm1,Tlv3> =
		      %% Line 643
		      case Tlv2 of
			%% Line 644
			<[V2|TempTlv3]> when 'true' ->
			    let <_cor5> =
				%% Line 645
				apply 'decode_open_type'/2
				    (V2, [])
			    in  <_cor5,%% Line 645
				       TempTlv3>
			%% Line 646
			<_cor18> when 'true' ->
			    %% Line 647
			    <'asn1_NOVALUE',Tlv2>
		      end
		  in  let <DecObjalgorithmTerm1> =
			  %% Line 651
			  call 'PKCS-FRAME':'getdec_internal_object_set_argument_3'
			      (Term1)
		      in  let <_cor13> =
			      %% Line 653
			      case Tmpterm1 of
				%% Line 654
				<'asn1_NOVALUE'> when 'true' ->
				    'asn1_NOVALUE'
				%% Line 655
				<_cor19> when 'true' ->
				    let <_cor10> =
					catch
					    %% Line 656
					    apply DecObjalgorithmTerm1
						('Type', Tmpterm1, [])
				    in  %% Line 656
					case _cor10 of
					  %% Line 657
					  <{'EXIT',Reason1}> when 'true' ->
					      %% Line 658
					      call 'erlang':'exit'
						  ({'Type not compatible with table constraint',Reason1})
					  %% Line 659
					  <Tmpterm2> when 'true' ->
					      %% Line 660
					      Tmpterm2
					end
			      end
			  in  do  %% Line 664
				  case Tlv3 of
				    %% Line 665
				    <[]> when 'true' ->
					'ok'
				    %% Line 665
				    <_cor20> when 'true' ->
					call 'erlang':'exit'
					    ({'error',{'asn1',{'unexpected',Tlv3}}})
				  end
				  %% Line 667
				  {'PBES2-params_keyDerivationFunc',Term1,_cor13}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_PBES2-params_encryptionScheme'/2 =
    %% Line 675
    fun (_cor1,_cor0) ->
	%% Line 676
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2}> when 'true' ->
	      let <Objalgorithm> =
		  %% Line 678
		  call 'PKCS-FRAME':'getenc_internal_object_set_argument_4'
		      (Cindex1)
	      in  %% Line 683
		  case apply 'encode_object_identifier'/2
			   (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor7> =
			    %% Line 688
			    case Cindex2 of
			      %% Line 689
			      <'asn1_NOVALUE'> when 'true' ->
				  {#{}#,0}
			      %% Line 690
			      <_cor14> when 'true' ->
				  %% Line 691
				  case apply Objalgorithm
					   ('Type', Cindex2, []) of
				    <{TmpBytes2,_cor15}> when 'true' ->
					%% Line 692
					apply 'encode_open_type'/2
					    (TmpBytes2, [])
				    ( <_cor5> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor5})
				      -| ['compiler_generated'] )
				  end
			    end
			in  %% Line 688
			    case _cor7 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  let <BytesSoFar> =
				      %% Line 695
				      [EncBytes1|[EncBytes2|[]]]
				  in  let <LenSoFar> =
					  %% Line 696
					  call 'erlang':'+'
					      (EncLen1, EncLen2)
				      in  %% Line 697
					  apply 'encode_tags'/3
					      (_cor0, BytesSoFar, LenSoFar)
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_PBES2-params_encryptionScheme'/2 =
    %% Line 698
    fun (_cor1,_cor0) ->
	%% Line 707
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 708
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  let <Tmpterm1,Tlv3> =
		      %% Line 713
		      case Tlv2 of
			%% Line 714
			<[V2|TempTlv3]> when 'true' ->
			    let <_cor5> =
				%% Line 715
				apply 'decode_open_type'/2
				    (V2, [])
			    in  <_cor5,%% Line 715
				       TempTlv3>
			%% Line 716
			<_cor18> when 'true' ->
			    %% Line 717
			    <'asn1_NOVALUE',Tlv2>
		      end
		  in  let <DecObjalgorithmTerm1> =
			  %% Line 721
			  call 'PKCS-FRAME':'getdec_internal_object_set_argument_4'
			      (Term1)
		      in  let <_cor13> =
			      %% Line 723
			      case Tmpterm1 of
				%% Line 724
				<'asn1_NOVALUE'> when 'true' ->
				    'asn1_NOVALUE'
				%% Line 725
				<_cor19> when 'true' ->
				    let <_cor10> =
					catch
					    %% Line 726
					    apply DecObjalgorithmTerm1
						('Type', Tmpterm1, [])
				    in  %% Line 726
					case _cor10 of
					  %% Line 727
					  <{'EXIT',Reason1}> when 'true' ->
					      %% Line 728
					      call 'erlang':'exit'
						  ({'Type not compatible with table constraint',Reason1})
					  %% Line 729
					  <Tmpterm2> when 'true' ->
					      %% Line 730
					      Tmpterm2
					end
			      end
			  in  do  %% Line 734
				  case Tlv3 of
				    %% Line 735
				    <[]> when 'true' ->
					'ok'
				    %% Line 735
				    <_cor20> when 'true' ->
					call 'erlang':'exit'
					    ({'error',{'asn1',{'unexpected',Tlv3}}})
				  end
				  %% Line 737
				  {'PBES2-params_encryptionScheme',Term1,_cor13}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'dec_PBES2-params'/1 =
    %% Line 741
    fun (_cor0) ->
	%% Line 742
	apply 'dec_PBES2-params'/2
	    (_cor0, [16])
'dec_PBES2-params'/2 =
    %% Line 744
    fun (_cor1,_cor0) ->
	%% Line 753
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 754
		  apply 'dec_PBES2-params_keyDerivationFunc'/2
		      (V1, [16])
	      in  %% Line 759
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 760
			    apply 'dec_PBES2-params_encryptionScheme'/2
				(V2, [16])
			in  do  %% Line 762
				case Tlv3 of
				  %% Line 763
				  <[]> when 'true' ->
				      'ok'
				  %% Line 763
				  <_cor10> when 'true' ->
				      call 'erlang':'exit'
					  ({'error',{'asn1',{'unexpected',Tlv3}}})
				end
				%% Line 765
				{'PBES2-params',Term1,Term2}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_PBEParameter'/1 =
    %% Line 772
    fun (_cor0) ->
	%% Line 773
	apply 'enc_PBEParameter'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_PBEParameter'/2 =
    %% Line 775
    fun (_cor1,_cor0) ->
	%% Line 776
	case _cor1 of
	  <{_cor9,Cindex1,Cindex2}> when 'true' ->
	      %% Line 781
	      case apply 'encode_restricted_string'/2
		       (Cindex1, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 786
		    case apply 'encode_integer'/2
			     (Cindex2, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <BytesSoFar> =
			      %% Line 788
			      [EncBytes1|[EncBytes2|[]]]
			  in  let <LenSoFar> =
				  %% Line 789
				  call 'erlang':'+'
				      (EncLen1, EncLen2)
			      in  %% Line 790
				  apply 'encode_tags'/3
				      (_cor0, BytesSoFar, LenSoFar)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_PBEParameter'/1 =
    %% Line 793
    fun (_cor0) ->
	%% Line 794
	apply 'dec_PBEParameter'/2
	    (_cor0, [16])
'dec_PBEParameter'/2 =
    %% Line 796
    fun (_cor1,_cor0) ->
	%% Line 805
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Val1> =
		  %% Line 807
		  apply 'decode_restricted_string'/2
		      (V1, [4])
	      in  let <C1> =
		      %% Line 808
		      call 'erlang':'byte_size'
			  (Val1)
		  in  %% Line 809
		      case <> of
			<>
			    when call 'erlang':'=:='
				  (C1,
				   8) ->
			    let <_cor6> =
				%% Line 810
				call 'erlang':'binary_to_list'
				    (Val1)
			    in  %% Line 819
				case Tlv2 of
				  <[V2|Tlv3]> when 'true' ->
				      let <Term2> =
					  %% Line 820
					  apply 'decode_integer'/2
					      (V2, [2])
				      in  do  %% Line 822
					      case Tlv3 of
						%% Line 823
						<[]> when 'true' ->
						    'ok'
						%% Line 823
						<_cor13> when 'true' ->
						    call 'erlang':'exit'
							({'error',{'asn1',{'unexpected',Tlv3}}})
					      end
					      %% Line 825
					      {'PBEParameter',_cor6,Term2}
				  ( <_cor8> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor8})
				    -| ['compiler_generated'] )
				end
			%% Line 811
			<> when 'true' ->
			    %% Line 812
			    call 'erlang':'exit'
				({'error',{'asn1','bad_range'}})
		      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_PBKDF2-params'/1 =
    %% Line 832
    fun (_cor0) ->
	%% Line 833
	apply 'enc_PBKDF2-params'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_PBKDF2-params'/2 =
    %% Line 835
    fun (_cor1,_cor0) ->
	%% Line 836
	case _cor1 of
	  <{_cor17,Cindex1,Cindex2,Cindex3,Cindex4}> when 'true' ->
	      %% Line 841
	      case apply 'enc_PBKDF2-params_salt'/2
		       (Cindex1, []) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 846
		    case apply 'encode_integer'/2
			     (Cindex2, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <_cor6> =
			      %% Line 851
			      case Cindex3 of
				%% Line 852
				<'asn1_NOVALUE'> when 'true' ->
				    {#{}#,0}
				%% Line 853
				<_cor18> when 'true' ->
				    %% Line 854
				    apply 'encode_integer'/2
					(Cindex3, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
			      end
			  in  %% Line 851
			      case _cor6 of
				<{EncBytes3,EncLen3}> when 'true' ->
				    let <_cor9> =
					%% Line 860
					case apply 'is_default_1'/1
						 (Cindex4) of
					  %% Line 861
					  <'true'> when 'true' ->
					      {[],0}
					  %% Line 862
					  <'false'> when 'true' ->
					      %% Line 863
					      apply 'enc_PBKDF2-params_prf'/2
						  (Cindex4, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
					  ( <_cor8> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor8})
					    -| ['compiler_generated'] )
					end
				    in  %% Line 860
					case _cor9 of
					  <{EncBytes4,EncLen4}> when 'true' ->
					      let <BytesSoFar> =
						  %% Line 866
						  [EncBytes1|[EncBytes2|[EncBytes3|[EncBytes4|[]]]]]
					      in  let <_cor12> =
						      %% Line 867
						      call 'erlang':'+'
							  (EncLen1, EncLen2)
						  in  let <_cor13> =
							  %% Line 867
							  call 'erlang':'+'
							      (_cor12, EncLen3)
						      in  let <LenSoFar> =
							      %% Line 867
							      call 'erlang':'+'
								  (_cor13, EncLen4)
							  in  %% Line 868
							      apply 'encode_tags'/3
								  (_cor0, BytesSoFar, LenSoFar)
					  ( <_cor10> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor10})
					    -| ['compiler_generated'] )
					end
				( <_cor7> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor7})
				  -| ['compiler_generated'] )
			      end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_PBKDF2-params_salt'/2 =
    %% Line 875
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 876
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 877
	      <'specified'> when 'true' ->
		  let <_cor2> =
		      %% Line 878
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 878
		      apply 'encode_restricted_string'/2
			  (_cor2, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 879
	      <'otherSource'> when 'true' ->
		  let <_cor3> =
		      %% Line 880
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 880
		      apply 'enc_PBKDF2-params_salt_otherSource'/2
			  (_cor3, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 881
	      <Else> when 'true' ->
		  %% Line 882
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 876
	    case _cor5 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 885
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor6})
		-| ['compiler_generated'] )
	    end
'enc_PBKDF2-params_salt_otherSource'/2 =
    %% Line 894
    fun (_cor1,_cor0) ->
	%% Line 895
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2}> when 'true' ->
	      let <Objalgorithm> =
		  %% Line 897
		  call 'PKCS-FRAME':'getenc_internal_object_set_argument_5'
		      (Cindex1)
	      in  %% Line 902
		  case apply 'encode_object_identifier'/2
			   (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor7> =
			    %% Line 907
			    case Cindex2 of
			      %% Line 908
			      <'asn1_NOVALUE'> when 'true' ->
				  {#{}#,0}
			      %% Line 909
			      <_cor14> when 'true' ->
				  %% Line 910
				  case apply Objalgorithm
					   ('Type', Cindex2, []) of
				    <{TmpBytes2,_cor15}> when 'true' ->
					%% Line 911
					apply 'encode_open_type'/2
					    (TmpBytes2, [])
				    ( <_cor5> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor5})
				      -| ['compiler_generated'] )
				  end
			    end
			in  %% Line 907
			    case _cor7 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  let <BytesSoFar> =
				      %% Line 914
				      [EncBytes1|[EncBytes2|[]]]
				  in  let <LenSoFar> =
					  %% Line 915
					  call 'erlang':'+'
					      (EncLen1, EncLen2)
				      in  %% Line 916
					  apply 'encode_tags'/3
					      (_cor0, BytesSoFar, LenSoFar)
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_PBKDF2-params_salt_otherSource'/2 =
    %% Line 917
    fun (_cor1,_cor0) ->
	%% Line 926
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 927
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  let <Tmpterm1,Tlv3> =
		      %% Line 932
		      case Tlv2 of
			%% Line 933
			<[V2|TempTlv3]> when 'true' ->
			    let <_cor5> =
				%% Line 934
				apply 'decode_open_type'/2
				    (V2, [])
			    in  <_cor5,%% Line 934
				       TempTlv3>
			%% Line 935
			<_cor18> when 'true' ->
			    %% Line 936
			    <'asn1_NOVALUE',Tlv2>
		      end
		  in  let <DecObjalgorithmTerm1> =
			  %% Line 940
			  call 'PKCS-FRAME':'getdec_internal_object_set_argument_5'
			      (Term1)
		      in  let <_cor13> =
			      %% Line 942
			      case Tmpterm1 of
				%% Line 943
				<'asn1_NOVALUE'> when 'true' ->
				    'asn1_NOVALUE'
				%% Line 944
				<_cor19> when 'true' ->
				    let <_cor10> =
					catch
					    %% Line 945
					    apply DecObjalgorithmTerm1
						('Type', Tmpterm1, [])
				    in  %% Line 945
					case _cor10 of
					  %% Line 946
					  <{'EXIT',Reason1}> when 'true' ->
					      %% Line 947
					      call 'erlang':'exit'
						  ({'Type not compatible with table constraint',Reason1})
					  %% Line 948
					  <Tmpterm2> when 'true' ->
					      %% Line 949
					      Tmpterm2
					end
			      end
			  in  do  %% Line 953
				  case Tlv3 of
				    %% Line 954
				    <[]> when 'true' ->
					'ok'
				    %% Line 954
				    <_cor20> when 'true' ->
					call 'erlang':'exit'
					    ({'error',{'asn1',{'unexpected',Tlv3}}})
				  end
				  %% Line 956
				  {'PBKDF2-params_salt_otherSource',Term1,_cor13}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'dec_PBKDF2-params_salt'/2 =
    %% Line 958
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 959
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 960
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor11> when 'true' ->
		      Tlv1
		end
	    in  %% Line 960
		case _cor4 of
		  %% Line 963
		  <{4,V1}> when 'true' ->
		      let <_cor5> =
			  %% Line 965
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <_cor6> =
			      %% Line 965
			      call 'erlang':'binary_to_list'
				  (_cor5)
			  in  %% Line 964
			      {'specified',_cor6}
		  %% Line 971
		  <{16,V1}> when 'true' ->
		      let <_cor7> =
			  %% Line 972
			  apply 'dec_PBKDF2-params_salt_otherSource'/2
			      (V1, [])
		      in  %% Line 972
			  {'otherSource',_cor7}
		  %% Line 974
		  <Else> when 'true' ->
		      %% Line 975
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'enc_PBKDF2-params_prf'/2 =
    %% Line 984
    fun (_cor1,_cor0) ->
	%% Line 985
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2}> when 'true' ->
	      let <Objalgorithm> =
		  %% Line 987
		  call 'PKCS-FRAME':'getenc_internal_object_set_argument_6'
		      (Cindex1)
	      in  %% Line 992
		  case apply 'encode_object_identifier'/2
			   (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor7> =
			    %% Line 997
			    case Cindex2 of
			      %% Line 998
			      <'asn1_NOVALUE'> when 'true' ->
				  {#{}#,0}
			      %% Line 999
			      <_cor14> when 'true' ->
				  %% Line 1000
				  case apply Objalgorithm
					   ('Type', Cindex2, []) of
				    <{TmpBytes2,_cor15}> when 'true' ->
					%% Line 1001
					apply 'encode_open_type'/2
					    (TmpBytes2, [])
				    ( <_cor5> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor5})
				      -| ['compiler_generated'] )
				  end
			    end
			in  %% Line 997
			    case _cor7 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  let <BytesSoFar> =
				      %% Line 1004
				      [EncBytes1|[EncBytes2|[]]]
				  in  let <LenSoFar> =
					  %% Line 1005
					  call 'erlang':'+'
					      (EncLen1, EncLen2)
				      in  %% Line 1006
					  apply 'encode_tags'/3
					      (_cor0, BytesSoFar, LenSoFar)
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_PBKDF2-params_prf'/2 =
    %% Line 1007
    fun (_cor1,_cor0) ->
	%% Line 1016
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 1017
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  let <Tmpterm1,Tlv3> =
		      %% Line 1022
		      case Tlv2 of
			%% Line 1023
			<[V2|TempTlv3]> when 'true' ->
			    let <_cor5> =
				%% Line 1024
				apply 'decode_open_type'/2
				    (V2, [])
			    in  <_cor5,%% Line 1024
				       TempTlv3>
			%% Line 1025
			<_cor18> when 'true' ->
			    %% Line 1026
			    <'asn1_NOVALUE',Tlv2>
		      end
		  in  let <DecObjalgorithmTerm1> =
			  %% Line 1030
			  call 'PKCS-FRAME':'getdec_internal_object_set_argument_6'
			      (Term1)
		      in  let <_cor13> =
			      %% Line 1032
			      case Tmpterm1 of
				%% Line 1033
				<'asn1_NOVALUE'> when 'true' ->
				    'asn1_NOVALUE'
				%% Line 1034
				<_cor19> when 'true' ->
				    let <_cor10> =
					catch
					    %% Line 1035
					    apply DecObjalgorithmTerm1
						('Type', Tmpterm1, [])
				    in  %% Line 1035
					case _cor10 of
					  %% Line 1036
					  <{'EXIT',Reason1}> when 'true' ->
					      %% Line 1037
					      call 'erlang':'exit'
						  ({'Type not compatible with table constraint',Reason1})
					  %% Line 1038
					  <Tmpterm2> when 'true' ->
					      %% Line 1039
					      Tmpterm2
					end
			      end
			  in  do  %% Line 1043
				  case Tlv3 of
				    %% Line 1044
				    <[]> when 'true' ->
					'ok'
				    %% Line 1044
				    <_cor20> when 'true' ->
					call 'erlang':'exit'
					    ({'error',{'asn1',{'unexpected',Tlv3}}})
				  end
				  %% Line 1046
				  {'PBKDF2-params_prf',Term1,_cor13}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'dec_PBKDF2-params'/1 =
    %% Line 1050
    fun (_cor0) ->
	%% Line 1051
	apply 'dec_PBKDF2-params'/2
	    (_cor0, [16])
'dec_PBKDF2-params'/2 =
    %% Line 1053
    fun (_cor1,_cor0) ->
	%% Line 1062
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 1063
		  apply 'dec_PBKDF2-params_salt'/2
		      (V1, [])
	      in  %% Line 1068
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Val1> =
			    %% Line 1070
			    apply 'decode_integer'/2
				(V2, [2])
			in  %% Line 1071
			    case <> of
			      <>
				  when let <_cor7> =
					call 'erlang':'=<'
					    (1, Val1)
				    in  let <_cor8> =
					    call 'erlang':'=<'
						(Val1, 'MAX')
					in  call 'erlang':'and'
						(_cor7, _cor8) ->
				  let <Term3,Tlv4> =
				      %% Line 1081
				      case Tlv3 of
					%% Line 1082
					<[{2,V3}|TempTlv4]> when 'true' ->
					    let <Val2> =
						%% Line 1084
						apply 'decode_integer'/2
						    (V3, [])
					    in  %% Line 1085
						case <> of
						  <>
						      when let <_cor12> =
							    call 'erlang':'=<'
								(1, Val2)
							in  let <_cor13> =
								call 'erlang':'=<'
								    (Val2, 'MAX')
							    in  call 'erlang':'and'
								    (_cor12, _cor13) ->
						      <%% Line 1086
						       Val2,%% Line 1090
							    TempTlv4>
						  %% Line 1087
						  <> when 'true' ->
						      %% Line 1088
						      call 'erlang':'exit'
							  ({'error',{'asn1','bad_range'}})
						end
					%% Line 1091
					<_cor25> when 'true' ->
					    %% Line 1092
					    <'asn1_NOVALUE',Tlv3>
				      end
				  in  let <Term4,Tlv5> =
					  %% Line 1098
					  case Tlv4 of
					    %% Line 1099
					    <[{16,V4}|TempTlv5]> when 'true' ->
						let <_cor18> =
						    %% Line 1100
						    apply 'dec_PBKDF2-params_prf'/2
							(V4, [])
						in  <_cor18,%% Line 1100
							    TempTlv5>
					    %% Line 1101
					    <_cor26> when 'true' ->
						%% Line 1102
						<{'PBKDF2-params_prf',{1,2,840,113549,2,7},'NULL'},Tlv4>
					  end
				      in  do  %% Line 1105
					      case Tlv5 of
						%% Line 1106
						<[]> when 'true' ->
						    'ok'
						%% Line 1106
						<_cor27> when 'true' ->
						    call 'erlang':'exit'
							({'error',{'asn1',{'unexpected',Tlv5}}})
					      end
					      %% Line 1108
					      {'PBKDF2-params',Term1,Val1,Term3,Term4}
			      %% Line 1073
			      <> when 'true' ->
				  %% Line 1074
				  call 'erlang':'exit'
				      ({'error',{'asn1','bad_range'}})
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_AttributeUsage'/1 =
    %% Line 1115
    fun (_cor0) ->
	%% Line 1116
	apply 'enc_AttributeUsage'/2
	    (_cor0, [#{#<10>(8,1,'integer',['unsigned'|['big']])}#])
'enc_AttributeUsage'/2 =
    %% Line 1118
    fun (_cor1,_cor0) ->
	%% Line 1119
	case _cor1 of
	  %% Line 1120
	  <'userApplications'> when 'true' ->
	      apply 'encode_tags'/3
		  (_cor0, [0], 1)
	  %% Line 1121
	  <'directoryOperation'> when 'true' ->
	      apply 'encode_tags'/3
		  (_cor0, [1], 1)
	  %% Line 1122
	  <'distributedOperation'> when 'true' ->
	      apply 'encode_tags'/3
		  (_cor0, [2], 1)
	  %% Line 1123
	  <'dSAOperation'> when 'true' ->
	      apply 'encode_tags'/3
		  (_cor0, [3], 1)
	  %% Line 1124
	  <Enumval1> when 'true' ->
	      call 'erlang':'exit'
		  ({'error',{'asn1',{'enumerated_not_in_range',Enumval1}}})
	end
'dec_AttributeUsage'/1 =
    %% Line 1128
    fun (_cor0) ->
	%% Line 1129
	apply 'dec_AttributeUsage'/2
	    (_cor0, [10])
'dec_AttributeUsage'/2 =
    %% Line 1131
    fun (_cor1,_cor0) ->
	%% Line 1132
	case apply 'decode_integer'/2
		 (_cor1, _cor0) of
	  %% Line 1133
	  <0> when 'true' ->
	      'userApplications'
	  %% Line 1134
	  <1> when 'true' ->
	      'directoryOperation'
	  %% Line 1135
	  <2> when 'true' ->
	      'distributedOperation'
	  %% Line 1136
	  <3> when 'true' ->
	      'dSAOperation'
	  %% Line 1137
	  <Default1> when 'true' ->
	      call 'erlang':'exit'
		  ({'error',{'asn1',{'illegal_enumerated',Default1}}})
	end
'enc_Context'/1 =
    %% Line 1145
    fun (_cor0) ->
	%% Line 1146
	apply 'enc_Context'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_Context'/2 =
    %% Line 1148
    fun (_cor1,_cor0) ->
	%% Line 1149
	case _cor1 of
	  <{_cor14,Cindex1,Cindex2,Cindex3}> when 'true' ->
	      let <ObjcontextType> =
		  %% Line 1151
		  call 'PKCS-FRAME':'getenc_SupportedContexts'
		      (Cindex1)
	      in  %% Line 1156
		  case apply 'encode_object_identifier'/2
			   (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		    <{EncBytes1,EncLen1}> when 'true' ->
			%% Line 1161
			case apply 'enc_Context_contextValues'/3
				 (Cindex2, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#], ObjcontextType) of
			  <{EncBytes2,EncLen2}> when 'true' ->
			      let <_cor7> =
				  %% Line 1166
				  case apply 'is_default_2'/1
					   (Cindex3) of
				    %% Line 1167
				    <'true'> when 'true' ->
					{[],0}
				    %% Line 1168
				    <'false'> when 'true' ->
					%% Line 1169
					apply 'encode_boolean'/2
					    (Cindex3, [#{#<1>(8,1,'integer',['unsigned'|['big']])}#])
				    ( <_cor6> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor6})
				      -| ['compiler_generated'] )
				  end
			      in  %% Line 1166
				  case _cor7 of
				    <{EncBytes3,EncLen3}> when 'true' ->
					let <BytesSoFar> =
					    %% Line 1172
					    [EncBytes1|[EncBytes2|[EncBytes3|[]]]]
					in  let <_cor10> =
						%% Line 1173
						call 'erlang':'+'
						    (EncLen1, EncLen2)
					    in  let <LenSoFar> =
						    %% Line 1173
						    call 'erlang':'+'
							(_cor10, EncLen3)
						in  %% Line 1174
						    apply 'encode_tags'/3
							(_cor0, BytesSoFar, LenSoFar)
				    ( <_cor8> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor8})
				      -| ['compiler_generated'] )
				  end
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_Context_contextValues'/3 =
    %% Line 1181
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1182
	case apply 'enc_Context_contextValues_components'/4
		 (_cor2, _cor0, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 1183
	      apply 'encode_tags'/3
		  (_cor1, EncBytes, EncLen)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_Context_contextValues_components'/4 =
    %% Line 1185
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_cor12,AccBytes,AccLen> when 'true' ->
	      let <_cor4> =
		  %% Line 1186
		  apply 'dynamicsort_SETOF'/1
		      (AccBytes)
	      in  %% Line 1186
		  {_cor4,AccLen}
	  %% Line 1188
	  <[H|T],ObjFun,AccBytes,AccLen> when 'true' ->
	      %% Line 1189
	      case apply ObjFun
		       ('Type', H, []) of
		<{TmpBytes,_cor13}> when 'true' ->
		    %% Line 1190
		    case apply 'encode_open_type'/2
			     (TmpBytes, []) of
		      <{EncBytes,EncLen}> when 'true' ->
			  let <_cor7> =
			      %% Line 1192
			      call 'erlang':'+'
				  (AccLen, EncLen)
			  in  %% Line 1192
			      apply 'enc_Context_contextValues_components'/4
				  (T, ObjFun, [EncBytes|AccBytes], _cor7)
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'enc_Context_contextValues_components',4}}] )
	    -| ['compiler_generated'] )
	end
'dec_Context_contextValues'/3 =
    %% Line 1194
    fun (_cor2,_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 1198
	    apply 'match_tags'/2
		(_cor2, _cor1)
	in  %% Line 1199
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor6) ->
			  case _cor6 of
			    <[%% Line 1209
			      V1|_cor5]> when 'true' ->
				let <Tmptlv1> =
				    %% Line 1201
				    apply 'decode_open_type'/2
					(V1, [])
				in  let <_cor8> =
					catch
					    %% Line 1202
					    apply _cor0
						('Type', Tmptlv1, [])
				    in  let <_cor10> =
					    %% Line 1202
					    case _cor8 of
					      %% Line 1203
					      <{'EXIT',Reason1}> when 'true' ->
						  %% Line 1204
						  call 'erlang':'exit'
						      ({'Type not compatible with table constraint',Reason1})
					      %% Line 1205
					      <Tmpterm1> when 'true' ->
						  %% Line 1206
						  Tmpterm1
					    end
					in  let <_cor11> =
						%% Line 1209
						apply 'lc$^0'/1
						    (_cor5)
					    in  ( [_cor10|_cor11]
						  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor6> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor6})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (%% Line 1209
		       Tlv1)
	      -| ['list_comprehension'] )
'dec_Context'/1 =
    %% Line 1214
    fun (_cor0) ->
	%% Line 1215
	apply 'dec_Context'/2
	    (_cor0, [16])
'dec_Context'/2 =
    %% Line 1217
    fun (_cor1,_cor0) ->
	%% Line 1226
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 1227
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  let <ObjFun> =
		      %% Line 1228
		      call 'PKCS-FRAME':'getdec_SupportedContexts'
			  (Term1)
		  in  %% Line 1233
		      case Tlv2 of
			<[V2|Tlv3]> when 'true' ->
			    let <Term2> =
				%% Line 1234
				apply 'dec_Context_contextValues'/3
				    (V2, [17], ObjFun)
			    in  let <Term3,Tlv4> =
				    %% Line 1239
				    case Tlv3 of
				      %% Line 1240
				      <[{1,V3}|TempTlv4]> when 'true' ->
					  let <_cor8> =
					      %% Line 1241
					      apply 'decode_boolean'/2
						  (V3, [])
					  in  <_cor8,%% Line 1241
						     TempTlv4>
				      %% Line 1242
				      <_cor15> when 'true' ->
					  %% Line 1243
					  <'false',Tlv3>
				    end
				in  do  %% Line 1246
					case Tlv4 of
					  %% Line 1247
					  <[]> when 'true' ->
					      'ok'
					  %% Line 1247
					  <_cor16> when 'true' ->
					      call 'erlang':'exit'
						  ({'error',{'asn1',{'unexpected',Tlv4}}})
					end
					%% Line 1249
					{'Context',Term1,Term2,Term3}
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_EncryptedData'/1 =
    %% Line 1256
    fun (_cor0) ->
	%% Line 1257
	apply 'enc_EncryptedData'/2
	    (_cor0, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#])
'enc_EncryptedData'/2 =
    %% Line 1259
    fun (_cor1,_cor0) ->
	%% Line 1260
	apply 'encode_restricted_string'/2
	    (_cor1, _cor0)
'dec_EncryptedData'/1 =
    %% Line 1263
    fun (_cor0) ->
	%% Line 1264
	apply 'dec_EncryptedData'/2
	    (_cor0, [4])
'dec_EncryptedData'/2 =
    %% Line 1266
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1268
	    apply 'decode_restricted_string'/2
		(_cor1, _cor0)
	in  %% Line 1268
	    call 'erlang':'binary_to_list'
		(_cor2)
'enc_EncryptedPrivateKeyInfo'/1 =
    %% Line 1277
    fun (_cor0) ->
	%% Line 1278
	apply 'enc_EncryptedPrivateKeyInfo'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_EncryptedPrivateKeyInfo'/2 =
    %% Line 1280
    fun (_cor1,_cor0) ->
	%% Line 1281
	case _cor1 of
	  <{_cor9,Cindex1,Cindex2}> when 'true' ->
	      %% Line 1286
	      case apply 'enc_EncryptedPrivateKeyInfo_encryptionAlgorithm'/2
		       (Cindex1, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 1291
		    case apply 'encode_restricted_string'/2
			     (Cindex2, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <BytesSoFar> =
			      %% Line 1293
			      [EncBytes1|[EncBytes2|[]]]
			  in  let <LenSoFar> =
				  %% Line 1294
				  call 'erlang':'+'
				      (EncLen1, EncLen2)
			      in  %% Line 1295
				  apply 'encode_tags'/3
				      (_cor0, BytesSoFar, LenSoFar)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_EncryptedPrivateKeyInfo_encryptionAlgorithm'/2 =
    %% Line 1302
    fun (_cor1,_cor0) ->
	%% Line 1303
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2}> when 'true' ->
	      let <Objalgorithm> =
		  %% Line 1305
		  call 'PKCS-FRAME':'getenc_internal_object_set_argument_7'
		      (Cindex1)
	      in  %% Line 1310
		  case apply 'encode_object_identifier'/2
			   (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor7> =
			    %% Line 1315
			    case Cindex2 of
			      %% Line 1316
			      <'asn1_NOVALUE'> when 'true' ->
				  {#{}#,0}
			      %% Line 1317
			      <_cor14> when 'true' ->
				  %% Line 1318
				  case apply Objalgorithm
					   ('Type', Cindex2, []) of
				    <{TmpBytes2,_cor15}> when 'true' ->
					%% Line 1319
					apply 'encode_open_type'/2
					    (TmpBytes2, [])
				    ( <_cor5> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor5})
				      -| ['compiler_generated'] )
				  end
			    end
			in  %% Line 1315
			    case _cor7 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  let <BytesSoFar> =
				      %% Line 1322
				      [EncBytes1|[EncBytes2|[]]]
				  in  let <LenSoFar> =
					  %% Line 1323
					  call 'erlang':'+'
					      (EncLen1, EncLen2)
				      in  %% Line 1324
					  apply 'encode_tags'/3
					      (_cor0, BytesSoFar, LenSoFar)
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_EncryptedPrivateKeyInfo_encryptionAlgorithm'/2 =
    %% Line 1325
    fun (_cor1,_cor0) ->
	%% Line 1334
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 1335
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  let <Tmpterm1,Tlv3> =
		      %% Line 1340
		      case Tlv2 of
			%% Line 1341
			<[V2|TempTlv3]> when 'true' ->
			    let <_cor5> =
				%% Line 1342
				apply 'decode_open_type'/2
				    (V2, [])
			    in  <_cor5,%% Line 1342
				       TempTlv3>
			%% Line 1343
			<_cor18> when 'true' ->
			    %% Line 1344
			    <'asn1_NOVALUE',Tlv2>
		      end
		  in  let <DecObjalgorithmTerm1> =
			  %% Line 1348
			  call 'PKCS-FRAME':'getdec_internal_object_set_argument_7'
			      (Term1)
		      in  let <_cor13> =
			      %% Line 1350
			      case Tmpterm1 of
				%% Line 1351
				<'asn1_NOVALUE'> when 'true' ->
				    'asn1_NOVALUE'
				%% Line 1352
				<_cor19> when 'true' ->
				    let <_cor10> =
					catch
					    %% Line 1353
					    apply DecObjalgorithmTerm1
						('Type', Tmpterm1, [])
				    in  %% Line 1353
					case _cor10 of
					  %% Line 1354
					  <{'EXIT',Reason1}> when 'true' ->
					      %% Line 1355
					      call 'erlang':'exit'
						  ({'Type not compatible with table constraint',Reason1})
					  %% Line 1356
					  <Tmpterm2> when 'true' ->
					      %% Line 1357
					      Tmpterm2
					end
			      end
			  in  do  %% Line 1361
				  case Tlv3 of
				    %% Line 1362
				    <[]> when 'true' ->
					'ok'
				    %% Line 1362
				    <_cor20> when 'true' ->
					call 'erlang':'exit'
					    ({'error',{'asn1',{'unexpected',Tlv3}}})
				  end
				  %% Line 1364
				  {'EncryptedPrivateKeyInfo_encryptionAlgorithm',Term1,_cor13}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'dec_EncryptedPrivateKeyInfo'/1 =
    %% Line 1368
    fun (_cor0) ->
	%% Line 1369
	apply 'dec_EncryptedPrivateKeyInfo'/2
	    (_cor0, [16])
'dec_EncryptedPrivateKeyInfo'/2 =
    %% Line 1371
    fun (_cor1,_cor0) ->
	%% Line 1380
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 1381
		  apply 'dec_EncryptedPrivateKeyInfo_encryptionAlgorithm'/2
		      (V1, [16])
	      in  %% Line 1386
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <_cor6> =
			    %% Line 1388
			    apply 'decode_restricted_string'/2
				(V2, [4])
			in  let <Term2> =
				%% Line 1388
				call 'erlang':'binary_to_list'
				    (_cor6)
			    in  do  %% Line 1392
				    case Tlv3 of
				      %% Line 1393
				      <[]> when 'true' ->
					  'ok'
				      %% Line 1393
				      <_cor11> when 'true' ->
					  call 'erlang':'exit'
					      ({'error',{'asn1',{'unexpected',Tlv3}}})
				    end
				    %% Line 1395
				    {'EncryptedPrivateKeyInfo',Term1,Term2}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_Attributes'/1 =
    %% Line 1402
    fun (_cor0) ->
	%% Line 1403
	apply 'enc_Attributes'/2
	    (_cor0, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
'enc_Attributes'/2 =
    %% Line 1405
    fun (_cor1,_cor0) ->
	%% Line 1406
	case apply 'enc_Attributes_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 1407
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_Attributes_components'/3 =
    %% Line 1409
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 1410
		  apply 'dynamicsort_SETOF'/1
		      (AccBytes)
	      in  %% Line 1410
		  {_cor3,AccLen}
	  %% Line 1412
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 1413
	      case apply 'enc_Attributes_PKAttribute'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 1414
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 1414
			apply 'enc_Attributes_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_Attributes_components',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_Attributes_PKAttribute'/2 =
    %% Line 1422
    fun (_cor1,_cor0) ->
	%% Line 1423
	case _cor1 of
	  <{_cor14,Cindex1,Cindex2,Cindex3}> when 'true' ->
	      let <Objtype> =
		  %% Line 1425
		  call 'PKCS-FRAME':'getenc_internal_object_set_argument_8'
		      (Cindex1)
	      in  %% Line 1430
		  case apply 'encode_object_identifier'/2
			   (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		    <{EncBytes1,EncLen1}> when 'true' ->
			%% Line 1435
			case apply 'enc_Attributes_PKAttribute_values'/3
				 (Cindex2, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#], Objtype) of
			  <{EncBytes2,EncLen2}> when 'true' ->
			      let <_cor7> =
				  %% Line 1440
				  case Cindex3 of
				    %% Line 1441
				    <'asn1_NOVALUE'> when 'true' ->
					{#{}#,0}
				    %% Line 1442
				    <_cor15> when 'true' ->
					%% Line 1443
					apply 'enc_Attributes_PKAttribute_valuesWithContext'/3
					    (Cindex3, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#], Objtype)
				  end
			      in  %% Line 1440
				  case _cor7 of
				    <{EncBytes3,EncLen3}> when 'true' ->
					let <BytesSoFar> =
					    %% Line 1446
					    [EncBytes1|[EncBytes2|[EncBytes3|[]]]]
					in  let <_cor10> =
						%% Line 1447
						call 'erlang':'+'
						    (EncLen1, EncLen2)
					    in  let <LenSoFar> =
						    %% Line 1447
						    call 'erlang':'+'
							(_cor10, EncLen3)
						in  %% Line 1448
						    apply 'encode_tags'/3
							(_cor0, BytesSoFar, LenSoFar)
				    ( <_cor8> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor8})
				      -| ['compiler_generated'] )
				  end
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_Attributes_PKAttribute_values'/3 =
    %% Line 1455
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1456
	case apply 'enc_Attributes_PKAttribute_values_components'/4
		 (_cor2, _cor0, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 1457
	      apply 'encode_tags'/3
		  (_cor1, EncBytes, EncLen)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_Attributes_PKAttribute_values_components'/4 =
    %% Line 1459
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_cor12,AccBytes,AccLen> when 'true' ->
	      let <_cor4> =
		  %% Line 1460
		  apply 'dynamicsort_SETOF'/1
		      (AccBytes)
	      in  %% Line 1460
		  {_cor4,AccLen}
	  %% Line 1462
	  <[H|T],ObjFun,AccBytes,AccLen> when 'true' ->
	      %% Line 1463
	      case apply ObjFun
		       ('Type', H, []) of
		<{TmpBytes,_cor13}> when 'true' ->
		    %% Line 1464
		    case apply 'encode_open_type'/2
			     (TmpBytes, []) of
		      <{EncBytes,EncLen}> when 'true' ->
			  let <_cor7> =
			      %% Line 1466
			      call 'erlang':'+'
				  (AccLen, EncLen)
			  in  %% Line 1466
			      apply 'enc_Attributes_PKAttribute_values_components'/4
				  (T, ObjFun, [EncBytes|AccBytes], _cor7)
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'enc_Attributes_PKAttribute_values_components',4}}] )
	    -| ['compiler_generated'] )
	end
'dec_Attributes_PKAttribute_values'/3 =
    %% Line 1468
    fun (_cor2,_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 1472
	    apply 'match_tags'/2
		(_cor2, _cor1)
	in  %% Line 1473
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor6) ->
			  case _cor6 of
			    <[%% Line 1483
			      V1|_cor5]> when 'true' ->
				let <Tmptlv1> =
				    %% Line 1475
				    apply 'decode_open_type'/2
					(V1, [])
				in  let <_cor8> =
					catch
					    %% Line 1476
					    apply _cor0
						('Type', Tmptlv1, [])
				    in  let <_cor10> =
					    %% Line 1476
					    case _cor8 of
					      %% Line 1477
					      <{'EXIT',Reason1}> when 'true' ->
						  %% Line 1478
						  call 'erlang':'exit'
						      ({'Type not compatible with table constraint',Reason1})
					      %% Line 1479
					      <Tmpterm1> when 'true' ->
						  %% Line 1480
						  Tmpterm1
					    end
					in  let <_cor11> =
						%% Line 1483
						apply 'lc$^0'/1
						    (_cor5)
					    in  ( [_cor10|_cor11]
						  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor6> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor6})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (%% Line 1483
		       Tlv1)
	      -| ['list_comprehension'] )
'enc_Attributes_PKAttribute_valuesWithContext'/3 =
    %% Line 1492
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1493
	case apply 'enc_Attributes_PKAttribute_valuesWithContext_components'/4
		 (_cor2, _cor0, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 1494
	      apply 'encode_tags'/3
		  (_cor1, EncBytes, EncLen)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_Attributes_PKAttribute_valuesWithContext_components'/4 =
    %% Line 1496
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_cor11,AccBytes,AccLen> when 'true' ->
	      let <_cor4> =
		  %% Line 1497
		  apply 'dynamicsort_SETOF'/1
		      (AccBytes)
	      in  %% Line 1497
		  {_cor4,AccLen}
	  %% Line 1499
	  <[H|T],ObjFun,AccBytes,AccLen> when 'true' ->
	      %% Line 1500
	      case apply 'enc_Attributes_PKAttribute_valuesWithContext_SETOF'/3
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#], ObjFun) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor6> =
			%% Line 1501
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 1501
			apply 'enc_Attributes_PKAttribute_valuesWithContext_components'/4
			    (T, ObjFun, [EncBytes|AccBytes], _cor6)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'enc_Attributes_PKAttribute_valuesWithContext_components',4}}] )
	    -| ['compiler_generated'] )
	end
'enc_Attributes_PKAttribute_valuesWithContext_SETOF'/3 =
    %% Line 1509
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1510
	case _cor2 of
	  <{_cor12,Cindex1,Cindex2}> when 'true' ->
	      %% Line 1515
	      case apply _cor0
		       ('Type', Cindex1, []) of
		<{TmpBytes1,_cor13}> when 'true' ->
		    %% Line 1516
		    case apply 'encode_open_type'/2
			     (TmpBytes1, []) of
		      <{EncBytes1,EncLen1}> when 'true' ->
			  %% Line 1522
			  case apply 'enc_Attributes_PKAttribute_valuesWithContext_SETOF_contextList'/2
				   (Cindex2, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#]) of
			    <{EncBytes2,EncLen2}> when 'true' ->
				let <BytesSoFar> =
				    %% Line 1524
				    [EncBytes1|[EncBytes2|[]]]
				in  let <LenSoFar> =
					%% Line 1525
					call 'erlang':'+'
					    (EncLen1, EncLen2)
				    in  %% Line 1526
					apply 'encode_tags'/3
					    (_cor1, BytesSoFar, LenSoFar)
			    ( <_cor6> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor6})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor5})
			-| ['compiler_generated'] )
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_Attributes_PKAttribute_valuesWithContext_SETOF_contextList'/2 =
    %% Line 1533
    fun (_cor1,_cor0) ->
	%% Line 1534
	case apply 'enc_Attributes_PKAttribute_valuesWithContext_SETOF_contextList_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 1535
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_Attributes_PKAttribute_valuesWithContext_SETOF_contextList_components'/3 =
    %% Line 1537
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 1538
		  apply 'dynamicsort_SETOF'/1
		      (AccBytes)
	      in  %% Line 1538
		  {_cor3,AccLen}
	  %% Line 1540
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 1541
	      case apply 'enc_Context'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 1542
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 1542
			apply 'enc_Attributes_PKAttribute_valuesWithContext_SETOF_contextList_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_Attributes_PKAttribute_valuesWithContext_SETOF_contextList_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_Attributes_PKAttribute_valuesWithContext_SETOF_contextList'/2 =
    %% Line 1544
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 1548
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 1549
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_Context'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'dec_Attributes_PKAttribute_valuesWithContext_SETOF'/3 =
    %% Line 1552
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1561
	case apply 'match_tags'/2
		 (_cor2, _cor1) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Tmptlv1> =
		  %% Line 1564
		  apply 'decode_open_type'/2
		      (V1, [])
	      in  let <_cor6> =
		      catch
			  %% Line 1565
			  apply _cor0
			      ('Type', Tmptlv1, [])
		  in  let <_cor8> =
			  %% Line 1565
			  case _cor6 of
			    %% Line 1566
			    <{'EXIT',Reason1}> when 'true' ->
				%% Line 1567
				call 'erlang':'exit'
				    ({'Type not compatible with table constraint',Reason1})
			    %% Line 1568
			    <Tmpterm1> when 'true' ->
				%% Line 1569
				Tmpterm1
			  end
		      in  %% Line 1577
			  case Tlv2 of
			    <[V2|Tlv3]> when 'true' ->
				let <Term2> =
				    %% Line 1578
				    apply 'dec_Attributes_PKAttribute_valuesWithContext_SETOF_contextList'/2
					(V2, [17])
				in  do  %% Line 1580
					case Tlv3 of
					  %% Line 1581
					  <[]> when 'true' ->
					      'ok'
					  %% Line 1581
					  <_cor16> when 'true' ->
					      call 'erlang':'exit'
						  ({'error',{'asn1',{'unexpected',Tlv3}}})
					end
					%% Line 1583
					{'Attributes_PKAttribute_valuesWithContext_SETOF',_cor8,Term2}
			    ( <_cor10> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor10})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'dec_Attributes_PKAttribute_valuesWithContext'/3 =
    %% Line 1585
    fun (_cor2,_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 1589
	    apply 'match_tags'/2
		(_cor2, _cor1)
	in  %% Line 1590
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor6) ->
			  case _cor6 of
			    <[V1|_cor5]> when 'true' ->
				let <_cor7> =
				    apply 'dec_Attributes_PKAttribute_valuesWithContext_SETOF'/3
					(V1, [16], _cor0)
				in  let <_cor8> =
					apply 'lc$^0'/1
					    (_cor5)
				    in  ( [_cor7|_cor8]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor6> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor6})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'dec_Attributes_PKAttribute'/2 =
    %% Line 1593
    fun (_cor1,_cor0) ->
	%% Line 1602
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 1603
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  let <ObjFun> =
		      %% Line 1604
		      call 'PKCS-FRAME':'getdec_internal_object_set_argument_8'
			  (Term1)
		  in  %% Line 1609
		      case Tlv2 of
			<[V2|Tlv3]> when 'true' ->
			    let <Term2> =
				%% Line 1610
				apply 'dec_Attributes_PKAttribute_values'/3
				    (V2, [17], ObjFun)
			    in  let <Term3,Tlv4> =
				    %% Line 1615
				    case Tlv3 of
				      %% Line 1616
				      <[{17,V3}|TempTlv4]> when 'true' ->
					  let <_cor8> =
					      %% Line 1617
					      apply 'dec_Attributes_PKAttribute_valuesWithContext'/3
						  (V3, [], ObjFun)
					  in  <_cor8,%% Line 1617
						     TempTlv4>
				      %% Line 1618
				      <_cor15> when 'true' ->
					  %% Line 1619
					  <'asn1_NOVALUE',Tlv3>
				    end
				in  do  %% Line 1622
					case Tlv4 of
					  %% Line 1623
					  <[]> when 'true' ->
					      'ok'
					  %% Line 1623
					  <_cor16> when 'true' ->
					      call 'erlang':'exit'
						  ({'error',{'asn1',{'unexpected',Tlv4}}})
					end
					%% Line 1625
					{'PKAttribute',Term1,Term2,Term3}
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'dec_Attributes'/1 =
    %% Line 1629
    fun (_cor0) ->
	%% Line 1630
	apply 'dec_Attributes'/2
	    (_cor0, [17])
'dec_Attributes'/2 =
    %% Line 1632
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 1636
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 1637
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_Attributes_PKAttribute'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'enc_PrivateKey'/1 =
    %% Line 1645
    fun (_cor0) ->
	%% Line 1646
	apply 'enc_PrivateKey'/2
	    (_cor0, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#])
'enc_PrivateKey'/2 =
    %% Line 1648
    fun (_cor1,_cor0) ->
	%% Line 1649
	apply 'encode_restricted_string'/2
	    (_cor1, _cor0)
'dec_PrivateKey'/1 =
    %% Line 1652
    fun (_cor0) ->
	%% Line 1653
	apply 'dec_PrivateKey'/2
	    (_cor0, [4])
'dec_PrivateKey'/2 =
    %% Line 1655
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1657
	    apply 'decode_restricted_string'/2
		(_cor1, _cor0)
	in  %% Line 1657
	    call 'erlang':'binary_to_list'
		(_cor2)
'enc_Version'/1 =
    %% Line 1666
    fun (_cor0) ->
	%% Line 1667
	apply 'enc_Version'/2
	    (_cor0, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
'enc_Version'/2 =
    %% Line 1669
    fun (_cor1,_cor0) ->
	%% Line 1670
	apply 'encode_integer'/3
	    (_cor1, [{'v1',0}], _cor0)
'dec_Version'/1 =
    %% Line 1673
    fun (_cor0) ->
	%% Line 1674
	apply 'dec_Version'/2
	    (_cor0, [2])
'dec_Version'/2 =
    %% Line 1676
    fun (_cor1,_cor0) ->
	let <Val1> =
	    %% Line 1678
	    apply 'decode_integer'/2
		(_cor1, _cor0)
	in  %% Line 1679
	    apply 'number2name'/2
		(Val1, [{'v1',0}])
'enc_PrivateKeyInfo'/1 =
    %% Line 1688
    fun (_cor0) ->
	%% Line 1689
	apply 'enc_PrivateKeyInfo'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_PrivateKeyInfo'/2 =
    %% Line 1691
    fun (_cor1,_cor0) ->
	%% Line 1692
	case _cor1 of
	  <{_cor15,Cindex1,Cindex2,Cindex3,Cindex4}> when 'true' ->
	      %% Line 1697
	      case apply 'encode_integer'/3
		       (Cindex1, [{'v1',0}], [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 1702
		    case apply 'enc_PrivateKeyInfo_privateKeyAlgorithm'/2
			     (Cindex2, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  %% Line 1707
			  case apply 'encode_restricted_string'/2
				   (Cindex3, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#]) of
			    <{EncBytes3,EncLen3}> when 'true' ->
				let <_cor7> =
				    %% Line 1712
				    case Cindex4 of
				      %% Line 1713
				      <'asn1_NOVALUE'> when 'true' ->
					  {#{}#,0}
				      %% Line 1714
				      <_cor16> when 'true' ->
					  %% Line 1715
					  apply 'enc_Attributes'/2
					      (Cindex4, [#{#<160>(8,1,'integer',['unsigned'|['big']])}#])
				    end
				in  %% Line 1712
				    case _cor7 of
				      <{EncBytes4,EncLen4}> when 'true' ->
					  let <BytesSoFar> =
					      %% Line 1718
					      [EncBytes1|[EncBytes2|[EncBytes3|[EncBytes4|[]]]]]
					  in  let <_cor10> =
						  %% Line 1719
						  call 'erlang':'+'
						      (EncLen1, EncLen2)
					      in  let <_cor11> =
						      %% Line 1719
						      call 'erlang':'+'
							  (_cor10, EncLen3)
						  in  let <LenSoFar> =
							  %% Line 1719
							  call 'erlang':'+'
							      (_cor11, EncLen4)
						      in  %% Line 1720
							  apply 'encode_tags'/3
							      (_cor0, BytesSoFar, LenSoFar)
				      ( <_cor8> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor8})
					-| ['compiler_generated'] )
				    end
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_PrivateKeyInfo_privateKeyAlgorithm'/2 =
    %% Line 1727
    fun (_cor1,_cor0) ->
	%% Line 1728
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2}> when 'true' ->
	      let <Objalgorithm> =
		  %% Line 1730
		  call 'PKCS-FRAME':'getenc_internal_object_set_argument_9'
		      (Cindex1)
	      in  %% Line 1735
		  case apply 'encode_object_identifier'/2
			   (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor7> =
			    %% Line 1740
			    case Cindex2 of
			      %% Line 1741
			      <'asn1_NOVALUE'> when 'true' ->
				  {#{}#,0}
			      %% Line 1742
			      <_cor14> when 'true' ->
				  %% Line 1743
				  case apply Objalgorithm
					   ('Type', Cindex2, []) of
				    <{TmpBytes2,_cor15}> when 'true' ->
					%% Line 1744
					apply 'encode_open_type'/2
					    (TmpBytes2, [])
				    ( <_cor5> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor5})
				      -| ['compiler_generated'] )
				  end
			    end
			in  %% Line 1740
			    case _cor7 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  let <BytesSoFar> =
				      %% Line 1747
				      [EncBytes1|[EncBytes2|[]]]
				  in  let <LenSoFar> =
					  %% Line 1748
					  call 'erlang':'+'
					      (EncLen1, EncLen2)
				      in  %% Line 1749
					  apply 'encode_tags'/3
					      (_cor0, BytesSoFar, LenSoFar)
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_PrivateKeyInfo_privateKeyAlgorithm'/2 =
    %% Line 1750
    fun (_cor1,_cor0) ->
	%% Line 1759
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 1760
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  let <Tmpterm1,Tlv3> =
		      %% Line 1765
		      case Tlv2 of
			%% Line 1766
			<[V2|TempTlv3]> when 'true' ->
			    let <_cor5> =
				%% Line 1767
				apply 'decode_open_type'/2
				    (V2, [])
			    in  <_cor5,%% Line 1767
				       TempTlv3>
			%% Line 1768
			<_cor18> when 'true' ->
			    %% Line 1769
			    <'asn1_NOVALUE',Tlv2>
		      end
		  in  let <DecObjalgorithmTerm1> =
			  %% Line 1773
			  call 'PKCS-FRAME':'getdec_internal_object_set_argument_9'
			      (Term1)
		      in  let <_cor13> =
			      %% Line 1775
			      case Tmpterm1 of
				%% Line 1776
				<'asn1_NOVALUE'> when 'true' ->
				    'asn1_NOVALUE'
				%% Line 1777
				<_cor19> when 'true' ->
				    let <_cor10> =
					catch
					    %% Line 1778
					    apply DecObjalgorithmTerm1
						('Type', Tmpterm1, [])
				    in  %% Line 1778
					case _cor10 of
					  %% Line 1779
					  <{'EXIT',Reason1}> when 'true' ->
					      %% Line 1780
					      call 'erlang':'exit'
						  ({'Type not compatible with table constraint',Reason1})
					  %% Line 1781
					  <Tmpterm2> when 'true' ->
					      %% Line 1782
					      Tmpterm2
					end
			      end
			  in  do  %% Line 1786
				  case Tlv3 of
				    %% Line 1787
				    <[]> when 'true' ->
					'ok'
				    %% Line 1787
				    <_cor20> when 'true' ->
					call 'erlang':'exit'
					    ({'error',{'asn1',{'unexpected',Tlv3}}})
				  end
				  %% Line 1789
				  {'PrivateKeyInfo_privateKeyAlgorithm',Term1,_cor13}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'dec_PrivateKeyInfo'/1 =
    %% Line 1793
    fun (_cor0) ->
	%% Line 1794
	apply 'dec_PrivateKeyInfo'/2
	    (_cor0, [16])
'dec_PrivateKeyInfo'/2 =
    %% Line 1796
    fun (_cor1,_cor0) ->
	%% Line 1805
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Val1> =
		  %% Line 1807
		  apply 'decode_integer'/2
		      (V1, [2])
	      in  let <Term1> =
		      %% Line 1808
		      apply 'number2name'/2
			  (Val1, [{'v1',0}])
		  in  %% Line 1815
		      case Tlv2 of
			<[V2|Tlv3]> when 'true' ->
			    let <Term2> =
				%% Line 1816
				apply 'dec_PrivateKeyInfo_privateKeyAlgorithm'/2
				    (V2, [16])
			    in  %% Line 1821
				case Tlv3 of
				  <[V3|Tlv4]> when 'true' ->
				      let <_cor9> =
					  %% Line 1823
					  apply 'decode_restricted_string'/2
					      (V3, [4])
				      in  let <Term3> =
					      %% Line 1823
					      call 'erlang':'binary_to_list'
						  (_cor9)
					  in  let <Term4,Tlv5> =
						  %% Line 1830
						  case Tlv4 of
						    %% Line 1831
						    <[{131072,V4}|TempTlv5]> when 'true' ->
							let <_cor11> =
							    %% Line 1832
							    apply 'dec_Attributes'/2
								(V4, [])
							in  <_cor11,%% Line 1832
								    TempTlv5>
						    %% Line 1833
						    <_cor18> when 'true' ->
							%% Line 1834
							<'asn1_NOVALUE',Tlv4>
						  end
					      in  do  %% Line 1837
						      case Tlv5 of
							%% Line 1838
							<[]> when 'true' ->
							    'ok'
							%% Line 1838
							<_cor19> when 'true' ->
							    call 'erlang':'exit'
								({'error',{'asn1',{'unexpected',Tlv5}}})
						      end
						      %% Line 1840
						      {'PrivateKeyInfo',Term1,Term2,Term3,Term4}
				  ( <_cor8> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor8})
				    -| ['compiler_generated'] )
				end
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'rc5-CBC-PAD'/0 =
    %% Line 1842
    fun () ->
	%% Line 1843
	{1,2,840,113549,3,9}
'rc2CBC'/0 =
    %% Line 1845
    fun () ->
	%% Line 1846
	{1,2,840,113549,3,2}
'des-EDE3-CBC'/0 =
    %% Line 1848
    fun () ->
	%% Line 1849
	{1,2,840,113549,3,7}
'desCBC'/0 =
    %% Line 1851
    fun () ->
	%% Line 1852
	{1,3,14,3,2,7}
'id-hmacWithSHA1'/0 =
    %% Line 1854
    fun () ->
	%% Line 1855
	{1,2,840,113549,2,7}
'encryptionAlgorithm'/0 =
    %% Line 1857
    fun () ->
	%% Line 1858
	{1,2,840,113549,3}
'digestAlgorithm'/0 =
    %% Line 1860
    fun () ->
	%% Line 1861
	{1,2,840,113549,2}
'id-PBMAC1'/0 =
    %% Line 1863
    fun () ->
	%% Line 1864
	{1,2,840,113549,1,5,14}
'id-PBES2'/0 =
    %% Line 1866
    fun () ->
	%% Line 1867
	{1,2,840,113549,1,5,13}
'pbeWithSHA1AndRC2-CBC'/0 =
    %% Line 1869
    fun () ->
	%% Line 1870
	{1,2,840,113549,1,5,11}
'pbeWithSHA1AndDES-CBC'/0 =
    %% Line 1872
    fun () ->
	%% Line 1873
	{1,2,840,113549,1,5,10}
'pbeWithMD5AndRC2-CBC'/0 =
    %% Line 1875
    fun () ->
	%% Line 1876
	{1,2,840,113549,1,5,6}
'pbeWithMD5AndDES-CBC'/0 =
    %% Line 1878
    fun () ->
	%% Line 1879
	{1,2,840,113549,1,5,3}
'pbeWithMD2AndRC2-CBC'/0 =
    %% Line 1881
    fun () ->
	%% Line 1882
	{1,2,840,113549,1,5,4}
'pbeWithMD2AndDES-CBC'/0 =
    %% Line 1884
    fun () ->
	%% Line 1885
	{1,2,840,113549,1,5,1}
'id-PBKDF2'/0 =
    %% Line 1887
    fun () ->
	%% Line 1888
	{1,2,840,113549,1,5,12}
'pkcs-5'/0 =
    %% Line 1890
    fun () ->
	%% Line 1891
	{1,2,840,113549,1,5}
'pkcs'/0 =
    %% Line 1893
    fun () ->
	%% Line 1894
	{1,2,840,113549,1}
'rsadsi'/0 =
    %% Line 1896
    fun () ->
	%% Line 1897
	{1,2,840,113549}
'getenc_SupportingAlgorithms'/1 =
    %% Line 1905
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,113549,2,7}> when 'true' ->
	      %% Line 1906
	      ( fun (_cor4,_cor3,_cor2) ->
		    %% Line 1907
		    case _cor4 of
		      %% Line 1908
		      <'Type'> when 'true' ->
			  %% Line 1909
			  apply 'encode_null'/2
			      (_cor3, [#{#<5>(8,1,'integer',['unsigned'|['big']])}#])
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor1})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getenc_SupportingAlgorithms/1-fun-0-'}}] )
	  %% Line 1912
	  <{1,2,840,113549,3,2}> when 'true' ->
	      %% Line 1913
	      ( fun (_cor11,_cor10,_cor9) ->
		    %% Line 1914
		    case _cor11 of
		      %% Line 1915
		      <'Type'> when 'true' ->
			  %% Line 1916
			  apply 'enc_RC2-CBC-Parameter'/1
			      (_cor10)
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor8})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getenc_SupportingAlgorithms/1-fun-1-'}}] )
	  %% Line 1919
	  <{1,2,840,113549,3,7}> when 'true' ->
	      %% Line 1920
	      ( fun (_cor18,_cor17,_cor16) ->
		    %% Line 1921
		    case _cor18 of
		      %% Line 1922
		      <'Type'> when 'true' ->
			  %% Line 1923
			  apply 'encode_restricted_string'/2
			      (_cor17, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#])
		      ( <_cor15> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor15})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getenc_SupportingAlgorithms/1-fun-2-'}}] )
	  %% Line 1926
	  <{1,2,840,113549,3,9}> when 'true' ->
	      %% Line 1927
	      ( fun (_cor25,_cor24,_cor23) ->
		    %% Line 1928
		    case _cor25 of
		      %% Line 1929
		      <'Type'> when 'true' ->
			  %% Line 1930
			  apply 'enc_RC5-CBC-Parameters'/1
			      (_cor24)
		      ( <_cor22> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor22})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getenc_SupportingAlgorithms/1-fun-3-'}}] )
	  %% Line 1933
	  <{1,3,14,3,2,7}> when 'true' ->
	      %% Line 1934
	      ( fun (_cor32,_cor31,_cor30) ->
		    %% Line 1935
		    case _cor32 of
		      %% Line 1936
		      <'Type'> when 'true' ->
			  %% Line 1937
			  apply 'encode_restricted_string'/2
			      (_cor31, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#])
		      ( <_cor29> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor29})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getenc_SupportingAlgorithms/1-fun-4-'}}] )
	  %% Line 1940
	  <_cor47> when 'true' ->
	      %% Line 1941
	      ( fun (_cor42,_cor41,_cor40) ->
		    %% Line 1942
		    case _cor41 of
		      %% Line 1943
		      <{'asn1_OPENTYPE',Bin}>
			  when call 'erlang':'is_binary'
				(Bin) ->
			  let <_cor36> =
			      %% Line 1944
			      call 'erlang':'byte_size'
				  (Bin)
			  in  %% Line 1944
			      {Bin,_cor36}
		      %% Line 1945
		      <Bin>
			  when call 'erlang':'is_binary'
				(_cor41) ->
			  let <_cor37> =
			      %% Line 1946
			      call 'erlang':'byte_size'
				  (Bin)
			  in  %% Line 1946
			      {Bin,_cor37}
		      %% Line 1947
		      <_cor49> when 'true' ->
			  let <_cor38> =
			      %% Line 1948
			      call 'erlang':'length'
				  (_cor41)
			  in  %% Line 1948
			      {_cor41,_cor38}
		    end
		-| [{'id',{0,0,'-getenc_SupportingAlgorithms/1-fun-5-'}}] )
	end
'getdec_SupportingAlgorithms'/1 =
    %% Line 1952
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,113549,2,7}> when 'true' ->
	      %% Line 1953
	      ( fun (_cor4,_cor3,_cor2) ->
		    %% Line 1954
		    case _cor4 of
		      %% Line 1955
		      <'Type'> when 'true' ->
			  %% Line 1956
			  apply 'decode_null'/2
			      (_cor3, [5])
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor1})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getdec_SupportingAlgorithms/1-fun-0-'}}] )
	  %% Line 1959
	  <{1,2,840,113549,3,2}> when 'true' ->
	      %% Line 1960
	      ( fun (_cor11,_cor10,_cor9) ->
		    %% Line 1961
		    case _cor11 of
		      %% Line 1962
		      <'Type'> when 'true' ->
			  %% Line 1963
			  apply 'dec_RC2-CBC-Parameter'/1
			      (_cor10)
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor8})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getdec_SupportingAlgorithms/1-fun-1-'}}] )
	  %% Line 1966
	  <{1,2,840,113549,3,7}> when 'true' ->
	      %% Line 1967
	      ( fun (_cor20,_cor19,_cor18) ->
		    %% Line 1968
		    case _cor20 of
		      %% Line 1969
		      <'Type'> when 'true' ->
			  let <Val1> =
			      %% Line 1971
			      apply 'decode_restricted_string'/2
				  (_cor19, [4])
			  in  let <C1> =
				  %% Line 1972
				  call 'erlang':'byte_size'
				      (Val1)
			      in  %% Line 1973
				  case <> of
				    <>
					when call 'erlang':'=:='
					      (C1,
					       8) ->
					%% Line 1974
					call 'erlang':'binary_to_list'
					    (Val1)
				    %% Line 1975
				    <> when 'true' ->
					%% Line 1976
					call 'erlang':'exit'
					    ({'error',{'asn1','bad_range'}})
				  end
		      ( <_cor17> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor17})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getdec_SupportingAlgorithms/1-fun-2-'}}] )
	  %% Line 1981
	  <{1,2,840,113549,3,9}> when 'true' ->
	      %% Line 1982
	      ( fun (_cor27,_cor26,_cor25) ->
		    %% Line 1983
		    case _cor27 of
		      %% Line 1984
		      <'Type'> when 'true' ->
			  %% Line 1985
			  apply 'dec_RC5-CBC-Parameters'/1
			      (_cor26)
		      ( <_cor24> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor24})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getdec_SupportingAlgorithms/1-fun-3-'}}] )
	  %% Line 1988
	  <{1,3,14,3,2,7}> when 'true' ->
	      %% Line 1989
	      ( fun (_cor36,_cor35,_cor34) ->
		    %% Line 1990
		    case _cor36 of
		      %% Line 1991
		      <'Type'> when 'true' ->
			  let <Val2> =
			      %% Line 1993
			      apply 'decode_restricted_string'/2
				  (_cor35, [4])
			  in  let <C2> =
				  %% Line 1994
				  call 'erlang':'byte_size'
				      (Val2)
			      in  %% Line 1995
				  case <> of
				    <>
					when call 'erlang':'=:='
					      (C2,
					       8) ->
					%% Line 1996
					call 'erlang':'binary_to_list'
					    (Val2)
				    %% Line 1997
				    <> when 'true' ->
					%% Line 1998
					call 'erlang':'exit'
					    ({'error',{'asn1','bad_range'}})
				  end
		      ( <_cor33> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor33})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getdec_SupportingAlgorithms/1-fun-4-'}}] )
	  %% Line 2003
	  <_cor48> when 'true' ->
	      %% Line 2004
	      ( fun (_cor43,_cor42,_cor41) ->
		    %% Line 2005
		    case _cor42 of
		      %% Line 2006
		      <Bin>
			  when call 'erlang':'is_binary'
				(_cor42) ->
			  %% Line 2007
			  Bin
		      %% Line 2008
		      <_cor50> when 'true' ->
			  %% Line 2009
			  apply 'ber_encode'/1
			      (_cor42)
		    end
		-| [{'id',{0,0,'-getdec_SupportingAlgorithms/1-fun-5-'}}] )
	end
'getenc_PBMAC1-MACs'/1 =
    %% Line 2020
    fun (_cor0) ->
	%% Line 2021
	( fun (_cor7,_cor6,_cor5) ->
	      %% Line 2022
	      case _cor6 of
		%% Line 2023
		<{'asn1_OPENTYPE',Bin}>
		    when call 'erlang':'is_binary'
			  (Bin) ->
		    let <_cor1> =
			%% Line 2024
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 2024
			{Bin,_cor1}
		%% Line 2025
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor6) ->
		    let <_cor2> =
			%% Line 2026
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 2026
			{Bin,_cor2}
		%% Line 2027
		<_cor14> when 'true' ->
		    let <_cor3> =
			%% Line 2028
			call 'erlang':'length'
			    (_cor6)
		    in  %% Line 2028
			{_cor6,_cor3}
	      end
	  -| [{'id',{0,0,'-getenc_PBMAC1-MACs/1-fun-0-'}}] )
'getdec_PBMAC1-MACs'/1 =
    %% Line 2032
    fun (_cor0) ->
	%% Line 2033
	( fun (_cor4,_cor3,_cor2) ->
	      %% Line 2034
	      case _cor3 of
		%% Line 2035
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor3) ->
		    %% Line 2036
		    Bin
		%% Line 2037
		<_cor11> when 'true' ->
		    %% Line 2038
		    apply 'ber_encode'/1
			(_cor3)
	      end
	  -| [{'id',{0,0,'-getdec_PBMAC1-MACs/1-fun-0-'}}] )
'getenc_PBMAC1-KDFs'/1 =
    %% Line 2049
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,113549,1,5,12}> when 'true' ->
	      %% Line 2050
	      ( fun (_cor4,_cor3,_cor2) ->
		    %% Line 2051
		    case _cor4 of
		      %% Line 2052
		      <'Type'> when 'true' ->
			  %% Line 2053
			  apply 'enc_PBKDF2-params'/1
			      (_cor3)
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor1})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getenc_PBMAC1-KDFs/1-fun-0-'}}] )
	  %% Line 2056
	  <_cor19> when 'true' ->
	      %% Line 2057
	      ( fun (_cor14,_cor13,_cor12) ->
		    %% Line 2058
		    case _cor13 of
		      %% Line 2059
		      <{'asn1_OPENTYPE',Bin}>
			  when call 'erlang':'is_binary'
				(Bin) ->
			  let <_cor8> =
			      %% Line 2060
			      call 'erlang':'byte_size'
				  (Bin)
			  in  %% Line 2060
			      {Bin,_cor8}
		      %% Line 2061
		      <Bin>
			  when call 'erlang':'is_binary'
				(_cor13) ->
			  let <_cor9> =
			      %% Line 2062
			      call 'erlang':'byte_size'
				  (Bin)
			  in  %% Line 2062
			      {Bin,_cor9}
		      %% Line 2063
		      <_cor21> when 'true' ->
			  let <_cor10> =
			      %% Line 2064
			      call 'erlang':'length'
				  (_cor13)
			  in  %% Line 2064
			      {_cor13,_cor10}
		    end
		-| [{'id',{0,0,'-getenc_PBMAC1-KDFs/1-fun-1-'}}] )
	end
'getdec_PBMAC1-KDFs'/1 =
    %% Line 2068
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,113549,1,5,12}> when 'true' ->
	      %% Line 2069
	      ( fun (_cor4,_cor3,_cor2) ->
		    %% Line 2070
		    case _cor4 of
		      %% Line 2071
		      <'Type'> when 'true' ->
			  %% Line 2072
			  apply 'dec_PBKDF2-params'/1
			      (_cor3)
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor1})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getdec_PBMAC1-KDFs/1-fun-0-'}}] )
	  %% Line 2075
	  <_cor16> when 'true' ->
	      %% Line 2076
	      ( fun (_cor11,_cor10,_cor9) ->
		    %% Line 2077
		    case _cor10 of
		      %% Line 2078
		      <Bin>
			  when call 'erlang':'is_binary'
				(_cor10) ->
			  %% Line 2079
			  Bin
		      %% Line 2080
		      <_cor18> when 'true' ->
			  %% Line 2081
			  apply 'ber_encode'/1
			      (_cor10)
		    end
		-| [{'id',{0,0,'-getdec_PBMAC1-KDFs/1-fun-1-'}}] )
	end
'getenc_PBMAC1Algorithms'/1 =
    %% Line 2092
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,113549,1,5,14}> when 'true' ->
	      %% Line 2093
	      ( fun (_cor4,_cor3,_cor2) ->
		    %% Line 2094
		    case _cor4 of
		      %% Line 2095
		      <'Type'> when 'true' ->
			  %% Line 2096
			  apply 'enc_PBMAC1-params'/1
			      (_cor3)
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor1})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getenc_PBMAC1Algorithms/1-fun-0-'}}] )
	  %% Line 2099
	  <_cor19> when 'true' ->
	      %% Line 2100
	      ( fun (_cor14,_cor13,_cor12) ->
		    %% Line 2101
		    case _cor13 of
		      %% Line 2102
		      <{'asn1_OPENTYPE',Bin}>
			  when call 'erlang':'is_binary'
				(Bin) ->
			  let <_cor8> =
			      %% Line 2103
			      call 'erlang':'byte_size'
				  (Bin)
			  in  %% Line 2103
			      {Bin,_cor8}
		      %% Line 2104
		      <Bin>
			  when call 'erlang':'is_binary'
				(_cor13) ->
			  let <_cor9> =
			      %% Line 2105
			      call 'erlang':'byte_size'
				  (Bin)
			  in  %% Line 2105
			      {Bin,_cor9}
		      %% Line 2106
		      <_cor21> when 'true' ->
			  let <_cor10> =
			      %% Line 2107
			      call 'erlang':'length'
				  (_cor13)
			  in  %% Line 2107
			      {_cor13,_cor10}
		    end
		-| [{'id',{0,0,'-getenc_PBMAC1Algorithms/1-fun-1-'}}] )
	end
'getdec_PBMAC1Algorithms'/1 =
    %% Line 2111
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,113549,1,5,14}> when 'true' ->
	      %% Line 2112
	      ( fun (_cor4,_cor3,_cor2) ->
		    %% Line 2113
		    case _cor4 of
		      %% Line 2114
		      <'Type'> when 'true' ->
			  %% Line 2115
			  apply 'dec_PBMAC1-params'/1
			      (_cor3)
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor1})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getdec_PBMAC1Algorithms/1-fun-0-'}}] )
	  %% Line 2118
	  <_cor16> when 'true' ->
	      %% Line 2119
	      ( fun (_cor11,_cor10,_cor9) ->
		    %% Line 2120
		    case _cor10 of
		      %% Line 2121
		      <Bin>
			  when call 'erlang':'is_binary'
				(_cor10) ->
			  %% Line 2122
			  Bin
		      %% Line 2123
		      <_cor18> when 'true' ->
			  %% Line 2124
			  apply 'ber_encode'/1
			      (_cor10)
		    end
		-| [{'id',{0,0,'-getdec_PBMAC1Algorithms/1-fun-1-'}}] )
	end
'getenc_PBES2-Encs'/1 =
    %% Line 2135
    fun (_cor0) ->
	%% Line 2136
	( fun (_cor7,_cor6,_cor5) ->
	      %% Line 2137
	      case _cor6 of
		%% Line 2138
		<{'asn1_OPENTYPE',Bin}>
		    when call 'erlang':'is_binary'
			  (Bin) ->
		    let <_cor1> =
			%% Line 2139
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 2139
			{Bin,_cor1}
		%% Line 2140
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor6) ->
		    let <_cor2> =
			%% Line 2141
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 2141
			{Bin,_cor2}
		%% Line 2142
		<_cor14> when 'true' ->
		    let <_cor3> =
			%% Line 2143
			call 'erlang':'length'
			    (_cor6)
		    in  %% Line 2143
			{_cor6,_cor3}
	      end
	  -| [{'id',{0,0,'-getenc_PBES2-Encs/1-fun-0-'}}] )
'getdec_PBES2-Encs'/1 =
    %% Line 2147
    fun (_cor0) ->
	%% Line 2148
	( fun (_cor4,_cor3,_cor2) ->
	      %% Line 2149
	      case _cor3 of
		%% Line 2150
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor3) ->
		    %% Line 2151
		    Bin
		%% Line 2152
		<_cor11> when 'true' ->
		    %% Line 2153
		    apply 'ber_encode'/1
			(_cor3)
	      end
	  -| [{'id',{0,0,'-getdec_PBES2-Encs/1-fun-0-'}}] )
'getenc_PBES2-KDFs'/1 =
    %% Line 2164
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,113549,1,5,12}> when 'true' ->
	      %% Line 2165
	      ( fun (_cor4,_cor3,_cor2) ->
		    %% Line 2166
		    case _cor4 of
		      %% Line 2167
		      <'Type'> when 'true' ->
			  %% Line 2168
			  apply 'enc_PBKDF2-params'/1
			      (_cor3)
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor1})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getenc_PBES2-KDFs/1-fun-0-'}}] )
	  %% Line 2171
	  <_cor19> when 'true' ->
	      %% Line 2172
	      ( fun (_cor14,_cor13,_cor12) ->
		    %% Line 2173
		    case _cor13 of
		      %% Line 2174
		      <{'asn1_OPENTYPE',Bin}>
			  when call 'erlang':'is_binary'
				(Bin) ->
			  let <_cor8> =
			      %% Line 2175
			      call 'erlang':'byte_size'
				  (Bin)
			  in  %% Line 2175
			      {Bin,_cor8}
		      %% Line 2176
		      <Bin>
			  when call 'erlang':'is_binary'
				(_cor13) ->
			  let <_cor9> =
			      %% Line 2177
			      call 'erlang':'byte_size'
				  (Bin)
			  in  %% Line 2177
			      {Bin,_cor9}
		      %% Line 2178
		      <_cor21> when 'true' ->
			  let <_cor10> =
			      %% Line 2179
			      call 'erlang':'length'
				  (_cor13)
			  in  %% Line 2179
			      {_cor13,_cor10}
		    end
		-| [{'id',{0,0,'-getenc_PBES2-KDFs/1-fun-1-'}}] )
	end
'getdec_PBES2-KDFs'/1 =
    %% Line 2183
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,113549,1,5,12}> when 'true' ->
	      %% Line 2184
	      ( fun (_cor4,_cor3,_cor2) ->
		    %% Line 2185
		    case _cor4 of
		      %% Line 2186
		      <'Type'> when 'true' ->
			  %% Line 2187
			  apply 'dec_PBKDF2-params'/1
			      (_cor3)
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor1})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getdec_PBES2-KDFs/1-fun-0-'}}] )
	  %% Line 2190
	  <_cor16> when 'true' ->
	      %% Line 2191
	      ( fun (_cor11,_cor10,_cor9) ->
		    %% Line 2192
		    case _cor10 of
		      %% Line 2193
		      <Bin>
			  when call 'erlang':'is_binary'
				(_cor10) ->
			  %% Line 2194
			  Bin
		      %% Line 2195
		      <_cor18> when 'true' ->
			  %% Line 2196
			  apply 'ber_encode'/1
			      (_cor10)
		    end
		-| [{'id',{0,0,'-getdec_PBES2-KDFs/1-fun-1-'}}] )
	end
'getenc_PBES2Algorithms'/1 =
    %% Line 2207
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,113549,1,5,13}> when 'true' ->
	      %% Line 2208
	      ( fun (_cor4,_cor3,_cor2) ->
		    %% Line 2209
		    case _cor4 of
		      %% Line 2210
		      <'Type'> when 'true' ->
			  %% Line 2211
			  apply 'enc_PBES2-params'/1
			      (_cor3)
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor1})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getenc_PBES2Algorithms/1-fun-0-'}}] )
	  %% Line 2214
	  <_cor19> when 'true' ->
	      %% Line 2215
	      ( fun (_cor14,_cor13,_cor12) ->
		    %% Line 2216
		    case _cor13 of
		      %% Line 2217
		      <{'asn1_OPENTYPE',Bin}>
			  when call 'erlang':'is_binary'
				(Bin) ->
			  let <_cor8> =
			      %% Line 2218
			      call 'erlang':'byte_size'
				  (Bin)
			  in  %% Line 2218
			      {Bin,_cor8}
		      %% Line 2219
		      <Bin>
			  when call 'erlang':'is_binary'
				(_cor13) ->
			  let <_cor9> =
			      %% Line 2220
			      call 'erlang':'byte_size'
				  (Bin)
			  in  %% Line 2220
			      {Bin,_cor9}
		      %% Line 2221
		      <_cor21> when 'true' ->
			  let <_cor10> =
			      %% Line 2222
			      call 'erlang':'length'
				  (_cor13)
			  in  %% Line 2222
			      {_cor13,_cor10}
		    end
		-| [{'id',{0,0,'-getenc_PBES2Algorithms/1-fun-1-'}}] )
	end
'getdec_PBES2Algorithms'/1 =
    %% Line 2226
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,113549,1,5,13}> when 'true' ->
	      %% Line 2227
	      ( fun (_cor4,_cor3,_cor2) ->
		    %% Line 2228
		    case _cor4 of
		      %% Line 2229
		      <'Type'> when 'true' ->
			  %% Line 2230
			  apply 'dec_PBES2-params'/1
			      (_cor3)
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor1})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getdec_PBES2Algorithms/1-fun-0-'}}] )
	  %% Line 2233
	  <_cor16> when 'true' ->
	      %% Line 2234
	      ( fun (_cor11,_cor10,_cor9) ->
		    %% Line 2235
		    case _cor10 of
		      %% Line 2236
		      <Bin>
			  when call 'erlang':'is_binary'
				(_cor10) ->
			  %% Line 2237
			  Bin
		      %% Line 2238
		      <_cor18> when 'true' ->
			  %% Line 2239
			  apply 'ber_encode'/1
			      (_cor10)
		    end
		-| [{'id',{0,0,'-getdec_PBES2Algorithms/1-fun-1-'}}] )
	end
'getenc_PBES1Algorithms'/1 =
    %% Line 2250
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,113549,1,5,1}> when 'true' ->
	      %% Line 2251
	      ( fun (_cor4,_cor3,_cor2) ->
		    %% Line 2252
		    case _cor4 of
		      %% Line 2253
		      <'Type'> when 'true' ->
			  %% Line 2254
			  apply 'enc_PBEParameter'/1
			      (_cor3)
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor1})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getenc_PBES1Algorithms/1-fun-0-'}}] )
	  %% Line 2257
	  <{1,2,840,113549,1,5,3}> when 'true' ->
	      %% Line 2258
	      ( fun (_cor11,_cor10,_cor9) ->
		    %% Line 2259
		    case _cor11 of
		      %% Line 2260
		      <'Type'> when 'true' ->
			  %% Line 2261
			  apply 'enc_PBEParameter'/1
			      (_cor10)
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor8})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getenc_PBES1Algorithms/1-fun-1-'}}] )
	  %% Line 2264
	  <{1,2,840,113549,1,5,4}> when 'true' ->
	      %% Line 2265
	      ( fun (_cor18,_cor17,_cor16) ->
		    %% Line 2266
		    case _cor18 of
		      %% Line 2267
		      <'Type'> when 'true' ->
			  %% Line 2268
			  apply 'enc_PBEParameter'/1
			      (_cor17)
		      ( <_cor15> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor15})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getenc_PBES1Algorithms/1-fun-2-'}}] )
	  %% Line 2271
	  <{1,2,840,113549,1,5,6}> when 'true' ->
	      %% Line 2272
	      ( fun (_cor25,_cor24,_cor23) ->
		    %% Line 2273
		    case _cor25 of
		      %% Line 2274
		      <'Type'> when 'true' ->
			  %% Line 2275
			  apply 'enc_PBEParameter'/1
			      (_cor24)
		      ( <_cor22> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor22})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getenc_PBES1Algorithms/1-fun-3-'}}] )
	  %% Line 2278
	  <{1,2,840,113549,1,5,10}> when 'true' ->
	      %% Line 2279
	      ( fun (_cor32,_cor31,_cor30) ->
		    %% Line 2280
		    case _cor32 of
		      %% Line 2281
		      <'Type'> when 'true' ->
			  %% Line 2282
			  apply 'enc_PBEParameter'/1
			      (_cor31)
		      ( <_cor29> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor29})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getenc_PBES1Algorithms/1-fun-4-'}}] )
	  %% Line 2285
	  <{1,2,840,113549,1,5,11}> when 'true' ->
	      %% Line 2286
	      ( fun (_cor39,_cor38,_cor37) ->
		    %% Line 2287
		    case _cor39 of
		      %% Line 2288
		      <'Type'> when 'true' ->
			  %% Line 2289
			  apply 'enc_PBEParameter'/1
			      (_cor38)
		      ( <_cor36> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor36})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getenc_PBES1Algorithms/1-fun-5-'}}] )
	  %% Line 2292
	  <_cor54> when 'true' ->
	      %% Line 2293
	      ( fun (_cor49,_cor48,_cor47) ->
		    %% Line 2294
		    case _cor48 of
		      %% Line 2295
		      <{'asn1_OPENTYPE',Bin}>
			  when call 'erlang':'is_binary'
				(Bin) ->
			  let <_cor43> =
			      %% Line 2296
			      call 'erlang':'byte_size'
				  (Bin)
			  in  %% Line 2296
			      {Bin,_cor43}
		      %% Line 2297
		      <Bin>
			  when call 'erlang':'is_binary'
				(_cor48) ->
			  let <_cor44> =
			      %% Line 2298
			      call 'erlang':'byte_size'
				  (Bin)
			  in  %% Line 2298
			      {Bin,_cor44}
		      %% Line 2299
		      <_cor56> when 'true' ->
			  let <_cor45> =
			      %% Line 2300
			      call 'erlang':'length'
				  (_cor48)
			  in  %% Line 2300
			      {_cor48,_cor45}
		    end
		-| [{'id',{0,0,'-getenc_PBES1Algorithms/1-fun-6-'}}] )
	end
'getdec_PBES1Algorithms'/1 =
    %% Line 2304
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,113549,1,5,1}> when 'true' ->
	      %% Line 2305
	      ( fun (_cor4,_cor3,_cor2) ->
		    %% Line 2306
		    case _cor4 of
		      %% Line 2307
		      <'Type'> when 'true' ->
			  %% Line 2308
			  apply 'dec_PBEParameter'/1
			      (_cor3)
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor1})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getdec_PBES1Algorithms/1-fun-0-'}}] )
	  %% Line 2311
	  <{1,2,840,113549,1,5,3}> when 'true' ->
	      %% Line 2312
	      ( fun (_cor11,_cor10,_cor9) ->
		    %% Line 2313
		    case _cor11 of
		      %% Line 2314
		      <'Type'> when 'true' ->
			  %% Line 2315
			  apply 'dec_PBEParameter'/1
			      (_cor10)
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor8})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getdec_PBES1Algorithms/1-fun-1-'}}] )
	  %% Line 2318
	  <{1,2,840,113549,1,5,4}> when 'true' ->
	      %% Line 2319
	      ( fun (_cor18,_cor17,_cor16) ->
		    %% Line 2320
		    case _cor18 of
		      %% Line 2321
		      <'Type'> when 'true' ->
			  %% Line 2322
			  apply 'dec_PBEParameter'/1
			      (_cor17)
		      ( <_cor15> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor15})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getdec_PBES1Algorithms/1-fun-2-'}}] )
	  %% Line 2325
	  <{1,2,840,113549,1,5,6}> when 'true' ->
	      %% Line 2326
	      ( fun (_cor25,_cor24,_cor23) ->
		    %% Line 2327
		    case _cor25 of
		      %% Line 2328
		      <'Type'> when 'true' ->
			  %% Line 2329
			  apply 'dec_PBEParameter'/1
			      (_cor24)
		      ( <_cor22> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor22})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getdec_PBES1Algorithms/1-fun-3-'}}] )
	  %% Line 2332
	  <{1,2,840,113549,1,5,10}> when 'true' ->
	      %% Line 2333
	      ( fun (_cor32,_cor31,_cor30) ->
		    %% Line 2334
		    case _cor32 of
		      %% Line 2335
		      <'Type'> when 'true' ->
			  %% Line 2336
			  apply 'dec_PBEParameter'/1
			      (_cor31)
		      ( <_cor29> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor29})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getdec_PBES1Algorithms/1-fun-4-'}}] )
	  %% Line 2339
	  <{1,2,840,113549,1,5,11}> when 'true' ->
	      %% Line 2340
	      ( fun (_cor39,_cor38,_cor37) ->
		    %% Line 2341
		    case _cor39 of
		      %% Line 2342
		      <'Type'> when 'true' ->
			  %% Line 2343
			  apply 'dec_PBEParameter'/1
			      (_cor38)
		      ( <_cor36> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor36})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getdec_PBES1Algorithms/1-fun-5-'}}] )
	  %% Line 2346
	  <_cor51> when 'true' ->
	      %% Line 2347
	      ( fun (_cor46,_cor45,_cor44) ->
		    %% Line 2348
		    case _cor45 of
		      %% Line 2349
		      <Bin>
			  when call 'erlang':'is_binary'
				(_cor45) ->
			  %% Line 2350
			  Bin
		      %% Line 2351
		      <_cor53> when 'true' ->
			  %% Line 2352
			  apply 'ber_encode'/1
			      (_cor45)
		    end
		-| [{'id',{0,0,'-getdec_PBES1Algorithms/1-fun-6-'}}] )
	end
'getenc_PBKDF2-PRFs'/1 =
    %% Line 2363
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,113549,2,7}> when 'true' ->
	      %% Line 2364
	      ( fun (_cor4,_cor3,_cor2) ->
		    %% Line 2365
		    case _cor4 of
		      %% Line 2366
		      <'Type'> when 'true' ->
			  %% Line 2367
			  apply 'encode_null'/2
			      (_cor3, [#{#<5>(8,1,'integer',['unsigned'|['big']])}#])
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor1})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getenc_PBKDF2-PRFs/1-fun-0-'}}] )
	  %% Line 2370
	  <_cor19> when 'true' ->
	      %% Line 2371
	      ( fun (_cor14,_cor13,_cor12) ->
		    %% Line 2372
		    case _cor13 of
		      %% Line 2373
		      <{'asn1_OPENTYPE',Bin}>
			  when call 'erlang':'is_binary'
				(Bin) ->
			  let <_cor8> =
			      %% Line 2374
			      call 'erlang':'byte_size'
				  (Bin)
			  in  %% Line 2374
			      {Bin,_cor8}
		      %% Line 2375
		      <Bin>
			  when call 'erlang':'is_binary'
				(_cor13) ->
			  let <_cor9> =
			      %% Line 2376
			      call 'erlang':'byte_size'
				  (Bin)
			  in  %% Line 2376
			      {Bin,_cor9}
		      %% Line 2377
		      <_cor21> when 'true' ->
			  let <_cor10> =
			      %% Line 2378
			      call 'erlang':'length'
				  (_cor13)
			  in  %% Line 2378
			      {_cor13,_cor10}
		    end
		-| [{'id',{0,0,'-getenc_PBKDF2-PRFs/1-fun-1-'}}] )
	end
'getdec_PBKDF2-PRFs'/1 =
    %% Line 2382
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,113549,2,7}> when 'true' ->
	      %% Line 2383
	      ( fun (_cor4,_cor3,_cor2) ->
		    %% Line 2384
		    case _cor4 of
		      %% Line 2385
		      <'Type'> when 'true' ->
			  %% Line 2386
			  apply 'decode_null'/2
			      (_cor3, [5])
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor1})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getdec_PBKDF2-PRFs/1-fun-0-'}}] )
	  %% Line 2389
	  <_cor16> when 'true' ->
	      %% Line 2390
	      ( fun (_cor11,_cor10,_cor9) ->
		    %% Line 2391
		    case _cor10 of
		      %% Line 2392
		      <Bin>
			  when call 'erlang':'is_binary'
				(_cor10) ->
			  %% Line 2393
			  Bin
		      %% Line 2394
		      <_cor18> when 'true' ->
			  %% Line 2395
			  apply 'ber_encode'/1
			      (_cor10)
		    end
		-| [{'id',{0,0,'-getdec_PBKDF2-PRFs/1-fun-1-'}}] )
	end
'getenc_PBKDF2-SaltSources'/1 =
    %% Line 2406
    fun (_cor0) ->
	%% Line 2407
	( fun (_cor7,_cor6,_cor5) ->
	      %% Line 2408
	      case _cor6 of
		%% Line 2409
		<{'asn1_OPENTYPE',Bin}>
		    when call 'erlang':'is_binary'
			  (Bin) ->
		    let <_cor1> =
			%% Line 2410
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 2410
			{Bin,_cor1}
		%% Line 2411
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor6) ->
		    let <_cor2> =
			%% Line 2412
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 2412
			{Bin,_cor2}
		%% Line 2413
		<_cor14> when 'true' ->
		    let <_cor3> =
			%% Line 2414
			call 'erlang':'length'
			    (_cor6)
		    in  %% Line 2414
			{_cor6,_cor3}
	      end
	  -| [{'id',{0,0,'-getenc_PBKDF2-SaltSources/1-fun-0-'}}] )
'getdec_PBKDF2-SaltSources'/1 =
    %% Line 2418
    fun (_cor0) ->
	%% Line 2419
	( fun (_cor4,_cor3,_cor2) ->
	      %% Line 2420
	      case _cor3 of
		%% Line 2421
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor3) ->
		    %% Line 2422
		    Bin
		%% Line 2423
		<_cor11> when 'true' ->
		    %% Line 2424
		    apply 'ber_encode'/1
			(_cor3)
	      end
	  -| [{'id',{0,0,'-getdec_PBKDF2-SaltSources/1-fun-0-'}}] )
'getenc_SupportedContexts'/1 =
    %% Line 2435
    fun (_cor0) ->
	%% Line 2436
	( fun (_cor7,_cor6,_cor5) ->
	      %% Line 2437
	      case _cor6 of
		%% Line 2438
		<{'asn1_OPENTYPE',Bin}>
		    when call 'erlang':'is_binary'
			  (Bin) ->
		    let <_cor1> =
			%% Line 2439
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 2439
			{Bin,_cor1}
		%% Line 2440
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor6) ->
		    let <_cor2> =
			%% Line 2441
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 2441
			{Bin,_cor2}
		%% Line 2442
		<_cor14> when 'true' ->
		    let <_cor3> =
			%% Line 2443
			call 'erlang':'length'
			    (_cor6)
		    in  %% Line 2443
			{_cor6,_cor3}
	      end
	  -| [{'id',{0,0,'-getenc_SupportedContexts/1-fun-0-'}}] )
'getdec_SupportedContexts'/1 =
    %% Line 2447
    fun (_cor0) ->
	%% Line 2448
	( fun (_cor4,_cor3,_cor2) ->
	      %% Line 2449
	      case _cor3 of
		%% Line 2450
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor3) ->
		    %% Line 2451
		    Bin
		%% Line 2452
		<_cor11> when 'true' ->
		    %% Line 2453
		    apply 'ber_encode'/1
			(_cor3)
	      end
	  -| [{'id',{0,0,'-getdec_SupportedContexts/1-fun-0-'}}] )
'getenc_KeyEncryptionAlgorithms'/1 =
    %% Line 2464
    fun (_cor0) ->
	%% Line 2465
	( fun (_cor7,_cor6,_cor5) ->
	      %% Line 2466
	      case _cor6 of
		%% Line 2467
		<{'asn1_OPENTYPE',Bin}>
		    when call 'erlang':'is_binary'
			  (Bin) ->
		    let <_cor1> =
			%% Line 2468
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 2468
			{Bin,_cor1}
		%% Line 2469
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor6) ->
		    let <_cor2> =
			%% Line 2470
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 2470
			{Bin,_cor2}
		%% Line 2471
		<_cor14> when 'true' ->
		    let <_cor3> =
			%% Line 2472
			call 'erlang':'length'
			    (_cor6)
		    in  %% Line 2472
			{_cor6,_cor3}
	      end
	  -| [{'id',{0,0,'-getenc_KeyEncryptionAlgorithms/1-fun-0-'}}] )
'getdec_KeyEncryptionAlgorithms'/1 =
    %% Line 2476
    fun (_cor0) ->
	%% Line 2477
	( fun (_cor4,_cor3,_cor2) ->
	      %% Line 2478
	      case _cor3 of
		%% Line 2479
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor3) ->
		    %% Line 2480
		    Bin
		%% Line 2481
		<_cor11> when 'true' ->
		    %% Line 2482
		    apply 'ber_encode'/1
			(_cor3)
	      end
	  -| [{'id',{0,0,'-getdec_KeyEncryptionAlgorithms/1-fun-0-'}}] )
'getenc_PrivateKeyAlgorithms'/1 =
    %% Line 2493
    fun (_cor0) ->
	%% Line 2494
	( fun (_cor7,_cor6,_cor5) ->
	      %% Line 2495
	      case _cor6 of
		%% Line 2496
		<{'asn1_OPENTYPE',Bin}>
		    when call 'erlang':'is_binary'
			  (Bin) ->
		    let <_cor1> =
			%% Line 2497
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 2497
			{Bin,_cor1}
		%% Line 2498
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor6) ->
		    let <_cor2> =
			%% Line 2499
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 2499
			{Bin,_cor2}
		%% Line 2500
		<_cor14> when 'true' ->
		    let <_cor3> =
			%% Line 2501
			call 'erlang':'length'
			    (_cor6)
		    in  %% Line 2501
			{_cor6,_cor3}
	      end
	  -| [{'id',{0,0,'-getenc_PrivateKeyAlgorithms/1-fun-0-'}}] )
'getdec_PrivateKeyAlgorithms'/1 =
    %% Line 2505
    fun (_cor0) ->
	%% Line 2506
	( fun (_cor4,_cor3,_cor2) ->
	      %% Line 2507
	      case _cor3 of
		%% Line 2508
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor3) ->
		    %% Line 2509
		    Bin
		%% Line 2510
		<_cor11> when 'true' ->
		    %% Line 2511
		    apply 'ber_encode'/1
			(_cor3)
	      end
	  -| [{'id',{0,0,'-getdec_PrivateKeyAlgorithms/1-fun-0-'}}] )
'getenc_internal_object_set_argument_9'/1 =
    %% Line 2522
    fun (_cor0) ->
	%% Line 2523
	( fun (_cor7,_cor6,_cor5) ->
	      %% Line 2524
	      case _cor6 of
		%% Line 2525
		<{'asn1_OPENTYPE',Bin}>
		    when call 'erlang':'is_binary'
			  (Bin) ->
		    let <_cor1> =
			%% Line 2526
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 2526
			{Bin,_cor1}
		%% Line 2527
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor6) ->
		    let <_cor2> =
			%% Line 2528
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 2528
			{Bin,_cor2}
		%% Line 2529
		<_cor14> when 'true' ->
		    let <_cor3> =
			%% Line 2530
			call 'erlang':'length'
			    (_cor6)
		    in  %% Line 2530
			{_cor6,_cor3}
	      end
	  -| [{'id',{0,0,'-getenc_internal_object_set_argument_9/1-fun-0-'}}] )
'getdec_internal_object_set_argument_9'/1 =
    %% Line 2534
    fun (_cor0) ->
	%% Line 2535
	( fun (_cor4,_cor3,_cor2) ->
	      %% Line 2536
	      case _cor3 of
		%% Line 2537
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor3) ->
		    %% Line 2538
		    Bin
		%% Line 2539
		<_cor11> when 'true' ->
		    %% Line 2540
		    apply 'ber_encode'/1
			(_cor3)
	      end
	  -| [{'id',{0,0,'-getdec_internal_object_set_argument_9/1-fun-0-'}}] )
'getenc_internal_object_set_argument_8'/1 =
    %% Line 2551
    fun (_cor0) ->
	%% Line 2552
	( fun (_cor7,_cor6,_cor5) ->
	      %% Line 2553
	      case _cor6 of
		%% Line 2554
		<{'asn1_OPENTYPE',Bin}>
		    when call 'erlang':'is_binary'
			  (Bin) ->
		    let <_cor1> =
			%% Line 2555
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 2555
			{Bin,_cor1}
		%% Line 2556
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor6) ->
		    let <_cor2> =
			%% Line 2557
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 2557
			{Bin,_cor2}
		%% Line 2558
		<_cor14> when 'true' ->
		    let <_cor3> =
			%% Line 2559
			call 'erlang':'length'
			    (_cor6)
		    in  %% Line 2559
			{_cor6,_cor3}
	      end
	  -| [{'id',{0,0,'-getenc_internal_object_set_argument_8/1-fun-0-'}}] )
'getdec_internal_object_set_argument_8'/1 =
    %% Line 2563
    fun (_cor0) ->
	%% Line 2564
	( fun (_cor4,_cor3,_cor2) ->
	      %% Line 2565
	      case _cor3 of
		%% Line 2566
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor3) ->
		    %% Line 2567
		    Bin
		%% Line 2568
		<_cor11> when 'true' ->
		    %% Line 2569
		    apply 'ber_encode'/1
			(_cor3)
	      end
	  -| [{'id',{0,0,'-getdec_internal_object_set_argument_8/1-fun-0-'}}] )
'getenc_internal_object_set_argument_7'/1 =
    %% Line 2580
    fun (_cor0) ->
	%% Line 2581
	( fun (_cor7,_cor6,_cor5) ->
	      %% Line 2582
	      case _cor6 of
		%% Line 2583
		<{'asn1_OPENTYPE',Bin}>
		    when call 'erlang':'is_binary'
			  (Bin) ->
		    let <_cor1> =
			%% Line 2584
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 2584
			{Bin,_cor1}
		%% Line 2585
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor6) ->
		    let <_cor2> =
			%% Line 2586
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 2586
			{Bin,_cor2}
		%% Line 2587
		<_cor14> when 'true' ->
		    let <_cor3> =
			%% Line 2588
			call 'erlang':'length'
			    (_cor6)
		    in  %% Line 2588
			{_cor6,_cor3}
	      end
	  -| [{'id',{0,0,'-getenc_internal_object_set_argument_7/1-fun-0-'}}] )
'getdec_internal_object_set_argument_7'/1 =
    %% Line 2592
    fun (_cor0) ->
	%% Line 2593
	( fun (_cor4,_cor3,_cor2) ->
	      %% Line 2594
	      case _cor3 of
		%% Line 2595
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor3) ->
		    %% Line 2596
		    Bin
		%% Line 2597
		<_cor11> when 'true' ->
		    %% Line 2598
		    apply 'ber_encode'/1
			(_cor3)
	      end
	  -| [{'id',{0,0,'-getdec_internal_object_set_argument_7/1-fun-0-'}}] )
'getenc_internal_object_set_argument_6'/1 =
    %% Line 2609
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,113549,2,7}> when 'true' ->
	      %% Line 2610
	      ( fun (_cor4,_cor3,_cor2) ->
		    %% Line 2611
		    case _cor4 of
		      %% Line 2612
		      <'Type'> when 'true' ->
			  %% Line 2613
			  apply 'encode_null'/2
			      (_cor3, [#{#<5>(8,1,'integer',['unsigned'|['big']])}#])
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor1})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getenc_internal_object_set_argument_6/1-fun-0-'}}] )
	  %% Line 2616
	  <_cor19> when 'true' ->
	      %% Line 2617
	      ( fun (_cor14,_cor13,_cor12) ->
		    %% Line 2618
		    case _cor13 of
		      %% Line 2619
		      <{'asn1_OPENTYPE',Bin}>
			  when call 'erlang':'is_binary'
				(Bin) ->
			  let <_cor8> =
			      %% Line 2620
			      call 'erlang':'byte_size'
				  (Bin)
			  in  %% Line 2620
			      {Bin,_cor8}
		      %% Line 2621
		      <Bin>
			  when call 'erlang':'is_binary'
				(_cor13) ->
			  let <_cor9> =
			      %% Line 2622
			      call 'erlang':'byte_size'
				  (Bin)
			  in  %% Line 2622
			      {Bin,_cor9}
		      %% Line 2623
		      <_cor21> when 'true' ->
			  let <_cor10> =
			      %% Line 2624
			      call 'erlang':'length'
				  (_cor13)
			  in  %% Line 2624
			      {_cor13,_cor10}
		    end
		-| [{'id',{0,0,'-getenc_internal_object_set_argument_6/1-fun-1-'}}] )
	end
'getdec_internal_object_set_argument_6'/1 =
    %% Line 2628
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,113549,2,7}> when 'true' ->
	      %% Line 2629
	      ( fun (_cor4,_cor3,_cor2) ->
		    %% Line 2630
		    case _cor4 of
		      %% Line 2631
		      <'Type'> when 'true' ->
			  %% Line 2632
			  apply 'decode_null'/2
			      (_cor3, [5])
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor1})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getdec_internal_object_set_argument_6/1-fun-0-'}}] )
	  %% Line 2635
	  <_cor16> when 'true' ->
	      %% Line 2636
	      ( fun (_cor11,_cor10,_cor9) ->
		    %% Line 2637
		    case _cor10 of
		      %% Line 2638
		      <Bin>
			  when call 'erlang':'is_binary'
				(_cor10) ->
			  %% Line 2639
			  Bin
		      %% Line 2640
		      <_cor18> when 'true' ->
			  %% Line 2641
			  apply 'ber_encode'/1
			      (_cor10)
		    end
		-| [{'id',{0,0,'-getdec_internal_object_set_argument_6/1-fun-1-'}}] )
	end
'getenc_internal_object_set_argument_5'/1 =
    %% Line 2652
    fun (_cor0) ->
	%% Line 2653
	( fun (_cor7,_cor6,_cor5) ->
	      %% Line 2654
	      case _cor6 of
		%% Line 2655
		<{'asn1_OPENTYPE',Bin}>
		    when call 'erlang':'is_binary'
			  (Bin) ->
		    let <_cor1> =
			%% Line 2656
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 2656
			{Bin,_cor1}
		%% Line 2657
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor6) ->
		    let <_cor2> =
			%% Line 2658
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 2658
			{Bin,_cor2}
		%% Line 2659
		<_cor14> when 'true' ->
		    let <_cor3> =
			%% Line 2660
			call 'erlang':'length'
			    (_cor6)
		    in  %% Line 2660
			{_cor6,_cor3}
	      end
	  -| [{'id',{0,0,'-getenc_internal_object_set_argument_5/1-fun-0-'}}] )
'getdec_internal_object_set_argument_5'/1 =
    %% Line 2664
    fun (_cor0) ->
	%% Line 2665
	( fun (_cor4,_cor3,_cor2) ->
	      %% Line 2666
	      case _cor3 of
		%% Line 2667
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor3) ->
		    %% Line 2668
		    Bin
		%% Line 2669
		<_cor11> when 'true' ->
		    %% Line 2670
		    apply 'ber_encode'/1
			(_cor3)
	      end
	  -| [{'id',{0,0,'-getdec_internal_object_set_argument_5/1-fun-0-'}}] )
'getenc_internal_object_set_argument_4'/1 =
    %% Line 2681
    fun (_cor0) ->
	%% Line 2682
	( fun (_cor7,_cor6,_cor5) ->
	      %% Line 2683
	      case _cor6 of
		%% Line 2684
		<{'asn1_OPENTYPE',Bin}>
		    when call 'erlang':'is_binary'
			  (Bin) ->
		    let <_cor1> =
			%% Line 2685
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 2685
			{Bin,_cor1}
		%% Line 2686
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor6) ->
		    let <_cor2> =
			%% Line 2687
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 2687
			{Bin,_cor2}
		%% Line 2688
		<_cor14> when 'true' ->
		    let <_cor3> =
			%% Line 2689
			call 'erlang':'length'
			    (_cor6)
		    in  %% Line 2689
			{_cor6,_cor3}
	      end
	  -| [{'id',{0,0,'-getenc_internal_object_set_argument_4/1-fun-0-'}}] )
'getdec_internal_object_set_argument_4'/1 =
    %% Line 2693
    fun (_cor0) ->
	%% Line 2694
	( fun (_cor4,_cor3,_cor2) ->
	      %% Line 2695
	      case _cor3 of
		%% Line 2696
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor3) ->
		    %% Line 2697
		    Bin
		%% Line 2698
		<_cor11> when 'true' ->
		    %% Line 2699
		    apply 'ber_encode'/1
			(_cor3)
	      end
	  -| [{'id',{0,0,'-getdec_internal_object_set_argument_4/1-fun-0-'}}] )
'getenc_internal_object_set_argument_3'/1 =
    %% Line 2710
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,113549,1,5,12}> when 'true' ->
	      %% Line 2711
	      ( fun (_cor4,_cor3,_cor2) ->
		    %% Line 2712
		    case _cor4 of
		      %% Line 2713
		      <'Type'> when 'true' ->
			  %% Line 2714
			  apply 'enc_PBKDF2-params'/1
			      (_cor3)
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor1})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getenc_internal_object_set_argument_3/1-fun-0-'}}] )
	  %% Line 2717
	  <_cor19> when 'true' ->
	      %% Line 2718
	      ( fun (_cor14,_cor13,_cor12) ->
		    %% Line 2719
		    case _cor13 of
		      %% Line 2720
		      <{'asn1_OPENTYPE',Bin}>
			  when call 'erlang':'is_binary'
				(Bin) ->
			  let <_cor8> =
			      %% Line 2721
			      call 'erlang':'byte_size'
				  (Bin)
			  in  %% Line 2721
			      {Bin,_cor8}
		      %% Line 2722
		      <Bin>
			  when call 'erlang':'is_binary'
				(_cor13) ->
			  let <_cor9> =
			      %% Line 2723
			      call 'erlang':'byte_size'
				  (Bin)
			  in  %% Line 2723
			      {Bin,_cor9}
		      %% Line 2724
		      <_cor21> when 'true' ->
			  let <_cor10> =
			      %% Line 2725
			      call 'erlang':'length'
				  (_cor13)
			  in  %% Line 2725
			      {_cor13,_cor10}
		    end
		-| [{'id',{0,0,'-getenc_internal_object_set_argument_3/1-fun-1-'}}] )
	end
'getdec_internal_object_set_argument_3'/1 =
    %% Line 2729
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,113549,1,5,12}> when 'true' ->
	      %% Line 2730
	      ( fun (_cor4,_cor3,_cor2) ->
		    %% Line 2731
		    case _cor4 of
		      %% Line 2732
		      <'Type'> when 'true' ->
			  %% Line 2733
			  apply 'dec_PBKDF2-params'/1
			      (_cor3)
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor1})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getdec_internal_object_set_argument_3/1-fun-0-'}}] )
	  %% Line 2736
	  <_cor16> when 'true' ->
	      %% Line 2737
	      ( fun (_cor11,_cor10,_cor9) ->
		    %% Line 2738
		    case _cor10 of
		      %% Line 2739
		      <Bin>
			  when call 'erlang':'is_binary'
				(_cor10) ->
			  %% Line 2740
			  Bin
		      %% Line 2741
		      <_cor18> when 'true' ->
			  %% Line 2742
			  apply 'ber_encode'/1
			      (_cor10)
		    end
		-| [{'id',{0,0,'-getdec_internal_object_set_argument_3/1-fun-1-'}}] )
	end
'getenc_internal_object_set_argument_2'/1 =
    %% Line 2753
    fun (_cor0) ->
	%% Line 2754
	( fun (_cor7,_cor6,_cor5) ->
	      %% Line 2755
	      case _cor6 of
		%% Line 2756
		<{'asn1_OPENTYPE',Bin}>
		    when call 'erlang':'is_binary'
			  (Bin) ->
		    let <_cor1> =
			%% Line 2757
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 2757
			{Bin,_cor1}
		%% Line 2758
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor6) ->
		    let <_cor2> =
			%% Line 2759
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 2759
			{Bin,_cor2}
		%% Line 2760
		<_cor14> when 'true' ->
		    let <_cor3> =
			%% Line 2761
			call 'erlang':'length'
			    (_cor6)
		    in  %% Line 2761
			{_cor6,_cor3}
	      end
	  -| [{'id',{0,0,'-getenc_internal_object_set_argument_2/1-fun-0-'}}] )
'getdec_internal_object_set_argument_2'/1 =
    %% Line 2765
    fun (_cor0) ->
	%% Line 2766
	( fun (_cor4,_cor3,_cor2) ->
	      %% Line 2767
	      case _cor3 of
		%% Line 2768
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor3) ->
		    %% Line 2769
		    Bin
		%% Line 2770
		<_cor11> when 'true' ->
		    %% Line 2771
		    apply 'ber_encode'/1
			(_cor3)
	      end
	  -| [{'id',{0,0,'-getdec_internal_object_set_argument_2/1-fun-0-'}}] )
'getenc_internal_object_set_argument_1'/1 =
    %% Line 2782
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,113549,1,5,12}> when 'true' ->
	      %% Line 2783
	      ( fun (_cor4,_cor3,_cor2) ->
		    %% Line 2784
		    case _cor4 of
		      %% Line 2785
		      <'Type'> when 'true' ->
			  %% Line 2786
			  apply 'enc_PBKDF2-params'/1
			      (_cor3)
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor1})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getenc_internal_object_set_argument_1/1-fun-0-'}}] )
	  %% Line 2789
	  <_cor19> when 'true' ->
	      %% Line 2790
	      ( fun (_cor14,_cor13,_cor12) ->
		    %% Line 2791
		    case _cor13 of
		      %% Line 2792
		      <{'asn1_OPENTYPE',Bin}>
			  when call 'erlang':'is_binary'
				(Bin) ->
			  let <_cor8> =
			      %% Line 2793
			      call 'erlang':'byte_size'
				  (Bin)
			  in  %% Line 2793
			      {Bin,_cor8}
		      %% Line 2794
		      <Bin>
			  when call 'erlang':'is_binary'
				(_cor13) ->
			  let <_cor9> =
			      %% Line 2795
			      call 'erlang':'byte_size'
				  (Bin)
			  in  %% Line 2795
			      {Bin,_cor9}
		      %% Line 2796
		      <_cor21> when 'true' ->
			  let <_cor10> =
			      %% Line 2797
			      call 'erlang':'length'
				  (_cor13)
			  in  %% Line 2797
			      {_cor13,_cor10}
		    end
		-| [{'id',{0,0,'-getenc_internal_object_set_argument_1/1-fun-1-'}}] )
	end
'getdec_internal_object_set_argument_1'/1 =
    %% Line 2801
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,113549,1,5,12}> when 'true' ->
	      %% Line 2802
	      ( fun (_cor4,_cor3,_cor2) ->
		    %% Line 2803
		    case _cor4 of
		      %% Line 2804
		      <'Type'> when 'true' ->
			  %% Line 2805
			  apply 'dec_PBKDF2-params'/1
			      (_cor3)
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor1})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getdec_internal_object_set_argument_1/1-fun-0-'}}] )
	  %% Line 2808
	  <_cor16> when 'true' ->
	      %% Line 2809
	      ( fun (_cor11,_cor10,_cor9) ->
		    %% Line 2810
		    case _cor10 of
		      %% Line 2811
		      <Bin>
			  when call 'erlang':'is_binary'
				(_cor10) ->
			  %% Line 2812
			  Bin
		      %% Line 2813
		      <_cor18> when 'true' ->
			  %% Line 2814
			  apply 'ber_encode'/1
			      (_cor10)
		    end
		-| [{'id',{0,0,'-getdec_internal_object_set_argument_1/1-fun-1-'}}] )
	end
'dialyzer-suppressions'/1 =
    %% Line 2824
    fun (_cor0) ->
	%% Line 2825
	'ok'
'is_default_1'/1 =
    %% Line 2827
    fun (_cor0) ->
	case _cor0 of
	  <'asn1_DEFAULT'> when 'true' ->
	      %% Line 2828
	      'true'
	  %% Line 2829
	  <Value> when 'true' ->
	      %% Line 2830
	      try
		  apply 'is_default_cs_3'/1
		      (Value)
	      of <_cor1> ->
		  %% Line 2831
		  'true'
	      catch <_cor5,_cor4,_cor3> ->
		  case <_cor5,_cor4,_cor3> of
		    %% Line 2832
		    <'throw','false',_cor8> when 'true' ->
			'false'
		    ( <_cor5,_cor4,_cor3> when 'true' ->
			  primop 'raise'
			      (_cor3, _cor4)
		      -| ['compiler_generated'] )
		  end
	end
'is_default_2'/1 =
    %% Line 2836
    fun (_cor0) ->
	case _cor0 of
	  <'asn1_DEFAULT'> when 'true' ->
	      %% Line 2837
	      'true'
	  %% Line 2838
	  <'false'> when 'true' ->
	      %% Line 2839
	      'true'
	  %% Line 2840
	  <_cor2> when 'true' ->
	      %% Line 2841
	      'false'
	end
'is_default_cs_3'/1 =
    %% Line 2844
    fun (_cor0) ->
	%% Line 2845
	case _cor0 of
	  %% Line 2846
	  <{'PBKDF2-params_prf',%% Line 2847
				E1,%% Line 2848
				   'NULL'}> when 'true' ->
	      %% Line 2849
	      apply 'check_objectidentifier'/2
		  (E1, {[[1|['iso']]|[[2|['member-body']]]],[840|[113549|[2|[7]]]]})
	  %% Line 2850
	  <_cor3> when 'true' ->
	      %% Line 2851
	      call 'erlang':'throw'
		  ('false')
	end
'ber_decode_nif'/1 =
    %% Line 2854
    fun (_cor0) ->
	%% Line 2855
	call 'asn1rt_nif':'decode_ber_tlv'
	    (_cor0)
'ber_encode'/1 =
    %% Line 2857
    fun (_cor0) ->
	case _cor0 of
	  <[Tlv|[]]> when 'true' ->
	      %% Line 2858
	      apply 'ber_encode'/1
		  (Tlv)
	  %% Line 2859
	  <Tlv>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 2860
	      Tlv
	  %% Line 2861
	  <Tlv> when 'true' ->
	      %% Line 2862
	      call 'asn1rt_nif':'encode_ber_tlv'
		  (Tlv)
	end
'check_objectidentifier'/2 =
    %% Line 2864
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Value,{Prefix,Tail}>
	      when call 'erlang':'is_tuple'
		    (Value) ->
	      let <_cor2> =
		  %% Line 2865
		  call 'erlang':'tuple_to_list'
		      (Value)
	      in  %% Line 2865
		  apply 'check_oid'/3
		      (_cor2, Prefix, Tail)
	  %% Line 2866
	  <_cor5,_cor6> when 'true' ->
	      %% Line 2867
	      call 'erlang':'throw'
		  ('false')
	end
'check_oid'/3 =
    %% Line 2869
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[H|T],[K|Ks],Tail> when 'true' ->
	      %% Line 2870
	      case call 'lists':'member'
		       (H, K) of
		%% Line 2871
		<'false'> when 'true' ->
		    %% Line 2872
		    call 'erlang':'throw'
			('false')
		%% Line 2873
		<'true'> when 'true' ->
		    %% Line 2874
		    apply 'check_oid'/3
			(T, Ks, Tail)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2876
	  <Tail,[],_cor7>
	      when call 'erlang':'=:='
		    (_cor7,
		     Tail) ->
	      %% Line 2877
	      'true'
	  %% Line 2878
	  <_cor8,_cor9,_cor10> when 'true' ->
	      %% Line 2879
	      call 'erlang':'throw'
		  ('false')
	end
'collect_parts'/1 =
    %% Line 2881
    fun (_cor0) ->
	%% Line 2882
	apply 'collect_parts'/2
	    (_cor0, [])
'collect_parts'/2 =
    %% Line 2884
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{_cor6,L}|Rest],Acc>
	      when call 'erlang':'is_list'
		    (L) ->
	      let <_cor2> =
		  %% Line 2885
		  apply 'collect_parts'/1
		      (L)
	      in  %% Line 2885
		  apply 'collect_parts'/2
		      (Rest, [_cor2|Acc])
	  %% Line 2886
	  <[{3,#{#<Unused>(8,1,'integer',['unsigned'|['big']]),
		 #<Bits>('all',8,'binary',['unsigned'|['big']])}#}|Rest],_X_Acc> when 'true' ->
	      %% Line 2887
	      apply 'collect_parts_bit'/3
		  (Rest, [Bits|[]], Unused)
	  %% Line 2888
	  <[{_X_T,V}|Rest],Acc> when 'true' ->
	      %% Line 2889
	      apply 'collect_parts'/2
		  (Rest, [V|Acc])
	  %% Line 2890
	  <[],Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 2891
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 2891
		  call 'erlang':'list_to_binary'
		      (_cor3)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'collect_parts',2}}] )
	    -| ['compiler_generated'] )
	end
'collect_parts_bit'/3 =
    %% Line 2893
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{3,#{#<Unused>(8,1,'integer',['unsigned'|['big']]),
		 #<Bits>('all',8,'binary',['unsigned'|['big']])}#}|Rest],Acc,Uacc> when 'true' ->
	      let <_cor3> =
		  %% Line 2894
		  call 'erlang':'+'
		      (Unused, Uacc)
	      in  %% Line 2894
		  apply 'collect_parts_bit'/3
		      (Rest, [Bits|Acc], _cor3)
	  %% Line 2895
	  <[],Acc,Uacc> when 'true' ->
	      let <_cor4> =
		  %% Line 2896
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 2896
		  call 'erlang':'list_to_binary'
		      ([Uacc|_cor4])
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'collect_parts_bit',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_subidentifiers'/3 =
    %% Line 2898
    fun (_cor2,_cor1,_cor0) ->
	case <( _cor2
		-| ['reuse_for_context'] ),_cor1,_cor0> of
	  <#{}#,_X_Av,Al> when 'true' ->
	      %% Line 2899
	      call 'lists':'reverse'
		  (Al)
	  %% Line 2900
	  <#{#<1>(1,1,'integer',['unsigned'|['big']]),
	     #<H>(7,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Av,Al> when 'true' ->
	      let <_cor3> =
		  %% Line 2901
		  call 'erlang':'bsl'
		      (Av, 7)
	      in  let <_cor4> =
		      %% Line 2901
		      call 'erlang':'+'
			  (_cor3, H)
		  in  %% Line 2901
		      apply 'dec_subidentifiers'/3
			  (T, _cor4, Al)
	  %% Line 2902
	  <#{#<H>(8,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Av,Al> when 'true' ->
	      let <_cor5> =
		  %% Line 2903
		  call 'erlang':'bsl'
		      (Av, 7)
	      in  let <_cor6> =
		      %% Line 2903
		      call 'erlang':'+'
			  (_cor5, H)
		  in  %% Line 2903
		      apply 'dec_subidentifiers'/3
			  (T, 0, [_cor6|Al])
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor9)
		    ( primop 'match_fail'
			  ({'function_clause',_cor9,_cor8,_cor7})
		      -| [{'function_name',{'dec_subidentifiers',3}}] )
	    -| ['compiler_generated'] )
	end
'decode_boolean'/2 =
    %% Line 2905
    fun (_cor1,_cor0) ->
	let <Val> =
	    %% Line 2906
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 2907
	    case ( Val
		   -| ['reuse_for_context'] ) of
	      %% Line 2908
	      <#{#<0>(8,1,'integer',['unsigned'|['big']])}#> when 'true' ->
		  %% Line 2909
		  'false'
	      %% Line 2910
	      <#{#<_cor6>(8,1,'integer',['unsigned'|['big']])}#> when 'true' ->
		  %% Line 2911
		  'true'
	      %% Line 2912
	      <_cor7> when 'true' ->
		  do  primop 'bs_context_to_binary'
			  (Val)
		      %% Line 2913
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'decode_boolean',Val}}})
	    end
'decode_integer'/2 =
    %% Line 2916
    fun (_cor1,_cor0) ->
	let <Bin> =
	    %% Line 2917
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <Len> =
		%% Line 2918
		call 'erlang':'byte_size'
		    (Bin)
	    in  %% Line 2919
		case ( Bin
		       -| ['reuse_for_context'] ) of
		  <#{#<Int>(Len,8,'integer',['signed'|['big']])}#> when 'true' ->
		      %% Line 2920
		      Int
		  ( <_cor4> when 'true' ->
			do  primop 'bs_context_to_binary'
				(_cor4)
			    primop 'match_fail'
				({'badmatch',_cor4})
		    -| ['compiler_generated'] )
		end
'decode_null'/2 =
    %% Line 2922
    fun (_cor1,_cor0) ->
	let <Val> =
	    %% Line 2923
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 2924
	    case Val of
	      %% Line 2925
	      <#{}#> when 'true' ->
		  %% Line 2926
		  'NULL'
	      %% Line 2927
	      <_cor6> when 'true' ->
		  %% Line 2928
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'decode_null',Val}}})
	    end
'decode_object_identifier'/2 =
    %% Line 2931
    fun (_cor1,_cor0) ->
	let <Val> =
	    %% Line 2932
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 2933
	    case apply 'dec_subidentifiers'/3
		     (Val, 0, []) of
	      <[AddedObjVal|ObjVals]> when 'true' ->
		  let <Val1,Val2> =
		      %% Line 2935
		      case <> of
			%% Line 2936
			<>
			    when call 'erlang':'<'
				  (AddedObjVal,
				   40) ->
			    %% Line 2937
			    <0,AddedObjVal>
			%% Line 2938
			<>
			    when call 'erlang':'<'
				  (AddedObjVal,
				   80) ->
			    let <_cor4> =
				%% Line 2939
				call 'erlang':'-'
				    (AddedObjVal, 40)
			    in  %% Line 2939
				<1,_cor4>
			%% Line 2940
			<> when 'true' ->
			    let <_cor5> =
				%% Line 2941
				call 'erlang':'-'
				    (AddedObjVal, 80)
			    in  %% Line 2941
				<2,_cor5>
		      end
		  in  %% Line 2943
		      call 'erlang':'list_to_tuple'
			  ([Val1|[Val2|ObjVals]])
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'decode_open_type'/2 =
    %% Line 2945
    fun (_cor1,_cor0) ->
	%% Line 2946
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  %% Line 2947
	  <Bin>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      %% Line 2948
	      case apply 'ber_decode_nif'/1
		       (Bin) of
		<{InnerTlv,_cor6}> when 'true' ->
		    %% Line 2949
		    InnerTlv
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2950
	  <TlvBytes> when 'true' ->
	      %% Line 2951
	      TlvBytes
	end
'decode_restricted_string'/2 =
    %% Line 2954
    fun (_cor1,_cor0) ->
	%% Line 2955
	apply 'match_and_collect'/2
	    (_cor1, _cor0)
'dynamicsort_SETOF'/1 =
    %% Line 2957
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 2959
	    ( fun (_cor1) ->
		  case _cor1 of
		    <L>
			when call 'erlang':'is_list'
			      (_cor1) ->
			%% Line 2960
			call 'erlang':'list_to_binary'
			    (L)
		    %% Line 2961
		    <B> when 'true' ->
			%% Line 2962
			B
		  end
	      -| [{'id',{0,0,'-dynamicsort_SETOF/1-fun-0-'}}] )
	in  let <BinL> =
		%% Line 2959
		call 'lists':'map'
		    (_cor3, _cor0)
	    in  %% Line 2965
		call 'lists':'sort'
		    (BinL)
'e_object_identifier'/1 =
    %% Line 2967
    fun (_cor0) ->
	case _cor0 of
	  <{'OBJECT IDENTIFIER',V}> when 'true' ->
	      %% Line 2968
	      apply 'e_object_identifier'/1
		  (V)
	  %% Line 2969
	  <V>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 2970
		  call 'erlang':'tuple_to_list'
		      (V)
	      in  %% Line 2970
		  apply 'e_object_identifier'/1
		      (_cor1)
	  %% Line 2971
	  <[E1|[E2|Tail]]> when 'true' ->
	      let <_cor2> =
		  %% Line 2972
		  call 'erlang':'*'
		      (40, E1)
	      in  let <Head> =
		      %% Line 2972
		      call 'erlang':'+'
			  (_cor2, E2)
		  in  %% Line 2973
		      case apply 'mk_object_val'/1
			       (Head) of
			<{H,Lh}> when 'true' ->
			    %% Line 2974
			    case call 'lists':'mapfoldl'
				     (( 'enc_obj_id_tail'/2
					-| [{'id',{0,0,'-e_object_identifier/1-fun-0-'}}] ), 0, Tail) of
			      <{R,Lr}> when 'true' ->
				  let <_cor6> =
				      %% Line 2975
				      call 'erlang':'+'
					  (Lh, Lr)
				  in  %% Line 2975
				      {[H|R],_cor6}
			      ( <_cor5> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor5})
				-| ['compiler_generated'] )
			    end
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor4})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'e_object_identifier',1}}] )
	    -| ['compiler_generated'] )
	end
'enc_obj_id_tail'/2 =
    %% Line 2977
    fun (_cor1,_cor0) ->
	%% Line 2978
	case apply 'mk_object_val'/1
		 (_cor1) of
	  <{B,L}> when 'true' ->
	      let <_cor3> =
		  %% Line 2979
		  call 'erlang':'+'
		      (_cor0, L)
	      in  %% Line 2979
		  {B,_cor3}
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'encode_boolean'/2 =
    %% Line 2981
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'true',TagIn> when 'true' ->
	      %% Line 2982
	      apply 'encode_tags'/3
		  (TagIn, [255], 1)
	  %% Line 2983
	  <'false',TagIn> when 'true' ->
	      %% Line 2984
	      apply 'encode_tags'/3
		  (TagIn, [0], 1)
	  %% Line 2985
	  <X,_cor4> when 'true' ->
	      %% Line 2986
	      call 'erlang':'exit'
		  ({'error',{'asn1',{'encode_boolean',X}}})
	end
'encode_integer'/1 =
    %% Line 2988
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2990
	    case <> of
	      %% Line 2991
	      <>
		  when call 'erlang':'>='
			(_cor0,
			 0) ->
		  %% Line 2992
		  apply 'encode_integer_pos'/2
		      (_cor0, [])
	      %% Line 2993
	      <> when 'true' ->
		  %% Line 2994
		  apply 'encode_integer_neg'/2
		      (_cor0, [])
	    end
	in  let <_cor3> =
		%% Line 2996
		call 'erlang':'length'
		    (_cor1)
	    in  %% Line 2996
		{_cor1,_cor3}
'encode_integer'/3 =
    %% Line 2998
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Val,NamedNumberList,Tag>
	      when call 'erlang':'is_atom'
		    (Val) ->
	      %% Line 2999
	      case call 'lists':'keyfind'
		       (Val, 1, NamedNumberList) of
		%% Line 3000
		<{_cor9,NewVal}> when 'true' ->
		    let <_cor3> =
			%% Line 3001
			apply 'encode_integer'/1
			    (NewVal)
		    in  %% Line 3001
			apply 'encode_tags'/2
			    (Tag, _cor3)
		%% Line 3002
		<_cor10> when 'true' ->
		    %% Line 3003
		    call 'erlang':'exit'
			({'error',{'asn1',{'encode_integer_namednumber',Val}}})
	      end
	  %% Line 3005
	  <Val,_X_NamedNumberList,Tag> when 'true' ->
	      let <_cor5> =
		  %% Line 3006
		  apply 'encode_integer'/1
		      (Val)
	      in  %% Line 3006
		  apply 'encode_tags'/2
		      (Tag, _cor5)
	end
'encode_integer'/2 =
    %% Line 3008
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Val,Tag>
	      when call 'erlang':'is_integer'
		    (Val) ->
	      let <_cor2> =
		  %% Line 3009
		  apply 'encode_integer'/1
		      (Val)
	      in  %% Line 3009
		  apply 'encode_tags'/2
		      (Tag, _cor2)
	  %% Line 3010
	  <Val,_X_Tag> when 'true' ->
	      %% Line 3011
	      call 'erlang':'exit'
		  ({'error',{'asn1',{'encode_integer',Val}}})
	end
'encode_integer_neg'/2 =
    %% Line 3013
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <-1,L = [B1|_X_T]>
	      when call 'erlang':'>'
		    (B1,
		     127) ->
	      %% Line 3014
	      L
	  %% Line 3015
	  <N,Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 3016
		  call 'erlang':'bsr'
		      (N, 8)
	      in  let <_cor2> =
		      %% Line 3016
		      call 'erlang':'band'
			  (N, 255)
		  in  %% Line 3016
		      apply 'encode_integer_neg'/2
			  (_cor3, [_cor2|Acc])
	end
'encode_integer_pos'/2 =
    %% Line 3018
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,L = [B|_X_Acc]>
	      when call 'erlang':'<'
		    (B,
		     128) ->
	      %% Line 3019
	      L
	  %% Line 3020
	  <N,Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 3021
		  call 'erlang':'bsr'
		      (N, 8)
	      in  let <_cor2> =
		      %% Line 3021
		      call 'erlang':'band'
			  (N, 255)
		  in  %% Line 3021
		      apply 'encode_integer_pos'/2
			  (_cor3, [_cor2|Acc])
	end
'encode_length'/1 =
    %% Line 3023
    fun (_cor0) ->
	case _cor0 of
	  <L>
	      when call 'erlang':'=<'
		    (_cor0,
		     127) ->
	      %% Line 3024
	      {[L|[]],1}
	  %% Line 3025
	  <L> when 'true' ->
	      let <Oct> =
		  %% Line 3026
		  apply 'minimum_octets'/1
		      (L)
	      in  let <Len> =
		      %% Line 3027
		      call 'erlang':'length'
			  (Oct)
		  in  %% Line 3028
		      case <> of
			%% Line 3029
			<>
			    when call 'erlang':'=<'
				  (Len,
				   126) ->
			    let <_cor4> =
				%% Line 3030
				call 'erlang':'bor'
				    (128, Len)
			    in  let <_cor3> =
				    %% Line 3030
				    call 'erlang':'+'
					(Len, 1)
				in  %% Line 3030
				    {[_cor4|Oct],_cor3}
			%% Line 3031
			<> when 'true' ->
			    %% Line 3032
			    call 'erlang':'exit'
				({'error',{'asn1','too_long_length_oct',Len}})
		      end
	end
'encode_null'/2 =
    %% Line 3035
    fun (_cor1,_cor0) ->
	%% Line 3036
	apply 'encode_tags'/3
	    (_cor0, [], 0)
'encode_object_identifier'/2 =
    %% Line 3038
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 3039
	    apply 'e_object_identifier'/1
		(_cor1)
	in  %% Line 3039
	    apply 'encode_tags'/2
		(_cor0, _cor2)
'encode_open_type'/2 =
    %% Line 3041
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Val,T>
	      when call 'erlang':'is_list'
		    (Val) ->
	      let <_cor2> =
		  %% Line 3042
		  call 'erlang':'list_to_binary'
		      (Val)
	      in  %% Line 3042
		  apply 'encode_open_type'/2
		      (_cor2, T)
	  %% Line 3043
	  <Val,Tag> when 'true' ->
	      let <_cor3> =
		  %% Line 3044
		  call 'erlang':'byte_size'
		      (Val)
	      in  %% Line 3044
		  apply 'encode_tags'/3
		      (Tag, Val, _cor3)
	end
'encode_restricted_string'/2 =
    %% Line 3046
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <OctetList,TagIn>
	      when call 'erlang':'is_binary'
		    (OctetList) ->
	      let <_cor2> =
		  %% Line 3047
		  call 'erlang':'byte_size'
		      (OctetList)
	      in  %% Line 3047
		  apply 'encode_tags'/3
		      (TagIn, OctetList, _cor2)
	  %% Line 3048
	  <OctetList,TagIn>
	      when call 'erlang':'is_list'
		    (OctetList) ->
	      let <_cor3> =
		  %% Line 3049
		  call 'erlang':'length'
		      (OctetList)
	      in  %% Line 3049
		  apply 'encode_tags'/3
		      (TagIn, OctetList, _cor3)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'encode_restricted_string',2}}] )
	    -| ['compiler_generated'] )
	end
'encode_tags'/2 =
    %% Line 3051
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <TagIn,{BytesSoFar,LenSoFar}> when 'true' ->
	      %% Line 3052
	      apply 'encode_tags'/3
		  (TagIn, BytesSoFar, LenSoFar)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'encode_tags',2}}] )
	    -| ['compiler_generated'] )
	end
'encode_tags'/3 =
    %% Line 3054
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Tag|Trest],BytesSoFar,LenSoFar> when 'true' ->
	      %% Line 3055
	      case apply 'encode_length'/1
		       (LenSoFar) of
		<{Bytes2,L2}> when 'true' ->
		    let <_cor4> =
			%% Line 3058
			call 'erlang':'byte_size'
			    (Tag)
		    in  let <_cor5> =
			    %% Line 3058
			    call 'erlang':'+'
				(LenSoFar, _cor4)
			in  let <_cor6> =
				%% Line 3058
				call 'erlang':'+'
				    (_cor5, L2)
			    in  %% Line 3056
				apply 'encode_tags'/3
				    (Trest, %% Line 3057
					    [Tag|[Bytes2|BytesSoFar]], _cor6)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3059
	  <[],BytesSoFar,LenSoFar> when 'true' ->
	      %% Line 3060
	      {BytesSoFar,LenSoFar}
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'encode_tags',3}}] )
	    -| ['compiler_generated'] )
	end
'match_and_collect'/2 =
    %% Line 3062
    fun (_cor1,_cor0) ->
	let <Val> =
	    %% Line 3063
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 3064
	    case Val of
	      %% Line 3065
	      <PartList = [_cor6|_cor7]> when 'true' ->
		  %% Line 3066
		  apply 'collect_parts'/1
		      (PartList)
	      %% Line 3067
	      <Bin>
		  when call 'erlang':'is_binary'
			(Val) ->
		  %% Line 3068
		  Bin
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor3})
		-| ['compiler_generated'] )
	    end
'match_tags'/2 =
    %% Line 3071
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{T,V},[_cor4|[]]>
	      when call 'erlang':'=:='
		    (_cor4,
		     T) ->
	      %% Line 3072
	      V
	  %% Line 3073
	  <{T,V},[_cor5|Tt]>
	      when call 'erlang':'=:='
		    (_cor5,
		     T) ->
	      %% Line 3074
	      apply 'match_tags'/2
		  (V, Tt)
	  %% Line 3075
	  <[{T,V}|[]],[_cor6|Tt]>
	      when call 'erlang':'=:='
		    (_cor6,
		     T) ->
	      %% Line 3076
	      apply 'match_tags'/2
		  (V, Tt)
	  %% Line 3077
	  <Vlist = [{T,_X_V}|_cor7],[_cor8|[]]>
	      when call 'erlang':'=:='
		    (_cor8,
		     T) ->
	      %% Line 3078
	      Vlist
	  %% Line 3079
	  <Tlv,[]> when 'true' ->
	      %% Line 3080
	      Tlv
	  %% Line 3081
	  <Tlv = {Tag,_X_V},[T|_X_Tt]> when 'true' ->
	      %% Line 3082
	      call 'erlang':'exit'
		  ({'error',{'asn1',{'wrong_tag',{{'expected',T},{'got',Tag,Tlv}}}}})
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'match_tags',2}}] )
	    -| ['compiler_generated'] )
	end
'minimum_octets'/2 =
    %% Line 3084
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,Acc> when 'true' ->
	      %% Line 3085
	      Acc
	  %% Line 3086
	  <Val,Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 3087
		  call 'erlang':'bsr'
		      (Val, 8)
	      in  let <_cor2> =
		      %% Line 3087
		      call 'erlang':'band'
			  (Val, 255)
		  in  %% Line 3087
		      apply 'minimum_octets'/2
			  (_cor3, [_cor2|Acc])
	end
'minimum_octets'/1 =
    %% Line 3089
    fun (_cor0) ->
	%% Line 3090
	apply 'minimum_octets'/2
	    (_cor0, [])
'mk_object_val'/3 =
    %% Line 3092
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <0,Ack,Len> when 'true' ->
	      %% Line 3093
	      {Ack,Len}
	  %% Line 3094
	  <Val,Ack,Len> when 'true' ->
	      let <_cor6> =
		  %% Line 3095
		  call 'erlang':'bsr'
		      (Val, 7)
	      in  let <_cor4> =
		      %% Line 3095
		      call 'erlang':'band'
			  (Val, 127)
		  in  let <_cor5> =
			  %% Line 3095
			  call 'erlang':'bor'
			      (_cor4, 128)
		      in  let <_cor3> =
			      %% Line 3095
			      call 'erlang':'+'
				  (Len, 1)
			  in  %% Line 3095
			      apply 'mk_object_val'/3
				  (_cor6, [_cor5|Ack], _cor3)
	end
'mk_object_val'/1 =
    %% Line 3097
    fun (_cor0) ->
	case _cor0 of
	  <Val>
	      when call 'erlang':'=<'
		    (_cor0,
		     127) ->
	      let <_cor1> =
		  %% Line 3098
		  call 'erlang':'band'
		      (255, Val)
	      in  %% Line 3098
		  {[_cor1|[]],1}
	  %% Line 3099
	  <Val> when 'true' ->
	      let <_cor3> =
		  %% Line 3100
		  call 'erlang':'bsr'
		      (Val, 7)
	      in  let <_cor2> =
		      %% Line 3100
		      call 'erlang':'band'
			  (Val, 127)
		  in  %% Line 3100
		      apply 'mk_object_val'/3
			  (_cor3, [_cor2|[]], 1)
	end
'number2name'/2 =
    %% Line 3102
    fun (_cor1,_cor0) ->
	%% Line 3103
	case call 'lists':'keyfind'
		 (_cor1, 2, _cor0) of
	  %% Line 3104
	  <{NamedVal,_cor5}> when 'true' ->
	      %% Line 3105
	      NamedVal
	  %% Line 3106
	  <_cor6> when 'true' ->
	      _cor1
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('PKCS-FRAME')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('PKCS-FRAME', _cor0)
end