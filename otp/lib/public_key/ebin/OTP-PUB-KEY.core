module 'OTP-PUB-KEY' ['ansi-X9-62'/0,
		      'anyExtendedKeyUsage'/0,
		      'anyPolicy'/0,
		      'bit_string_format'/0,
		      'brainpoolP160r1'/0,
		      'brainpoolP160t1'/0,
		      'brainpoolP192r1'/0,
		      'brainpoolP192t1'/0,
		      'brainpoolP224r1'/0,
		      'brainpoolP224t1'/0,
		      'brainpoolP256r1'/0,
		      'brainpoolP256t1'/0,
		      'brainpoolP320r1'/0,
		      'brainpoolP320t1'/0,
		      'brainpoolP384r1'/0,
		      'brainpoolP384t1'/0,
		      'brainpoolP512r1'/0,
		      'brainpoolP512t1'/0,
		      'certicom-arc'/0,
		      'characteristic-two-field'/0,
		      'common-name'/0,
		      'data'/0,
		      'dec_AAControls'/2,
		      'dec_ACClearAttrs'/2,
		      'dec_AccessDescription'/2,
		      'dec_AdministrationDomainName'/2,
		      'dec_Algorithm'/2,
		      'dec_AlgorithmIdentifier'/2,
		      'dec_AlgorithmNull'/2,
		      'dec_AnotherName'/2,
		      'dec_Any'/2,
		      'dec_AttCertIssuer'/2,
		      'dec_AttCertValidityPeriod'/2,
		      'dec_AttCertVersion'/2,
		      'dec_AttrSpec'/2,
		      'dec_Attribute'/2,
		      'dec_AttributeCertificate'/2,
		      'dec_AttributeCertificateInfo'/2,
		      'dec_AttributeType'/2,
		      'dec_AttributeTypeAndValue'/2,
		      'dec_AttributeValue'/2,
		      'dec_AuthorityInfoAccessSyntax'/2,
		      'dec_AuthorityKeyIdentifier'/2,
		      'dec_BaseCRLNumber'/2,
		      'dec_BaseDistance'/2,
		      'dec_BasicConstraints'/2,
		      'dec_Boolean'/2,
		      'dec_BuiltInDomainDefinedAttribute'/2,
		      'dec_BuiltInDomainDefinedAttributes'/2,
		      'dec_BuiltInStandardAttributes'/2,
		      'dec_CPSuri'/2,
		      'dec_CRLDistributionPoints'/2,
		      'dec_CRLNumber'/2,
		      'dec_CRLReason'/2,
		      'dec_CRLSequence'/2,
		      'dec_CertPolicyId'/2,
		      'dec_Certificate'/2,
		      'dec_CertificateIssuer'/2,
		      'dec_CertificateList'/2,
		      'dec_CertificatePolicies'/2,
		      'dec_CertificateRevocationLists'/2,
		      'dec_CertificateSerialNumber'/2,
		      'dec_Certificates'/2,
		      'dec_CertificationRequest'/2,
		      'dec_CertificationRequestInfo'/2,
		      'dec_Characteristic-two'/2,
		      'dec_ClassList'/2,
		      'dec_Clearance'/2,
		      'dec_CommonName'/2,
		      'dec_ContentEncryptionAlgorithmIdentifier'/2,
		      'dec_ContentInfo'/2,
		      'dec_ContentType'/2,
		      'dec_CountryName'/2,
		      'dec_Curve'/2,
		      'dec_DHParameter'/2,
		      'dec_DHPublicKey'/2,
		      'dec_DSAParams'/2,
		      'dec_DSAPrivateKey'/2,
		      'dec_DSAPublicKey'/2,
		      'dec_Data'/2,
		      'dec_Digest'/2,
		      'dec_DigestAlgorithmIdentifier'/2,
		      'dec_DigestAlgorithmIdentifiers'/2,
		      'dec_DigestEncryptionAlgorithmIdentifier'/2,
		      'dec_DigestInfoNull'/2,
		      'dec_DigestInfoPKCS-1'/2,
		      'dec_DigestInfoPKCS-7'/2,
		      'dec_DigestedData'/2,
		      'dec_DirectoryString'/2,
		      'dec_DisplayText'/2,
		      'dec_DistinguishedName'/2,
		      'dec_DistributionPoint'/2,
		      'dec_DistributionPointName'/2,
		      'dec_DomainComponent'/2,
		      'dec_DomainParameters'/2,
		      'dec_Dss-Parms'/2,
		      'dec_Dss-Sig-Value'/2,
		      'dec_ECDSA-Sig-Value'/2,
		      'dec_ECPVer'/2,
		      'dec_ECParameters'/2,
		      'dec_ECPoint'/2,
		      'dec_ECPrivateKey'/2,
		      'dec_EDIPartyName'/2,
		      'dec_EcpkParameters'/2,
		      'dec_EmailAddress'/2,
		      'dec_EncryptedContent'/2,
		      'dec_EncryptedContentInfo'/2,
		      'dec_EncryptedData'/2,
		      'dec_EncryptedDigest'/2,
		      'dec_EncryptedKey'/2,
		      'dec_EnvelopedData'/2,
		      'dec_ExtKeyUsageSyntax'/2,
		      'dec_ExtendedCertificate'/2,
		      'dec_ExtendedCertificateOrCertificate'/2,
		      'dec_ExtendedCertificatesAndCertificates'/2,
		      'dec_ExtendedNetworkAddress'/2,
		      'dec_Extension'/2,
		      'dec_Extension-Any'/2,
		      'dec_ExtensionAttribute'/2,
		      'dec_ExtensionAttributes'/2,
		      'dec_ExtensionORAddressComponents'/2,
		      'dec_ExtensionPhysicalDeliveryAddressComponents'/2,
		      'dec_ExtensionRequest'/2,
		      'dec_Extensions'/2,
		      'dec_FieldElement'/2,
		      'dec_FieldID'/2,
		      'dec_FreshestCRL'/2,
		      'dec_GeneralName'/2,
		      'dec_GeneralNames'/2,
		      'dec_GeneralSubtree'/2,
		      'dec_GeneralSubtrees'/2,
		      'dec_HoldInstructionCode'/2,
		      'dec_Holder'/2,
		      'dec_IetfAttrSyntax'/2,
		      'dec_InhibitAnyPolicy'/2,
		      'dec_InvalidityDate'/2,
		      'dec_IssuerAltName'/2,
		      'dec_IssuerAndSerialNumber'/2,
		      'dec_IssuerSerial'/2,
		      'dec_IssuingDistributionPoint'/2,
		      'dec_KEA-Parms-Id'/2,
		      'dec_KEA-PublicKey'/2,
		      'dec_KeyEncryptionAlgorithmIdentifier'/2,
		      'dec_KeyIdentifier'/2,
		      'dec_KeyPurposeId'/2,
		      'dec_KeyUsage'/2,
		      'dec_LocalPostalAttributes'/2,
		      'dec_MessageDigest'/2,
		      'dec_Name'/2,
		      'dec_NameConstraints'/2,
		      'dec_NetworkAddress'/2,
		      'dec_NoticeReference'/2,
		      'dec_NumericUserIdentifier'/2,
		      'dec_ORAddress'/2,
		      'dec_OTP-X520countryname'/2,
		      'dec_OTP-emailAddress'/2,
		      'dec_OTPAttributeTypeAndValue'/2,
		      'dec_OTPCertificate'/2,
		      'dec_OTPCharacteristic-two'/2,
		      'dec_OTPExtension'/2,
		      'dec_OTPExtensionAttribute'/2,
		      'dec_OTPExtensionAttributes'/2,
		      'dec_OTPExtensions'/2,
		      'dec_OTPFieldID'/2,
		      'dec_OTPOLDSubjectPublicKeyInfo'/2,
		      'dec_OTPSubjectPublicKeyInfo'/2,
		      'dec_OTPSubjectPublicKeyInfo-Any'/2,
		      'dec_OTPTBSCertificate'/2,
		      'dec_ObjId'/2,
		      'dec_ObjectDigestInfo'/2,
		      'dec_OrganizationName'/2,
		      'dec_OrganizationalUnitName'/2,
		      'dec_OrganizationalUnitNames'/2,
		      'dec_OtherPrimeInfo'/2,
		      'dec_OtherPrimeInfos'/2,
		      'dec_PDSName'/2,
		      'dec_PDSParameter'/2,
		      'dec_Pentanomial'/2,
		      'dec_PersonalName'/2,
		      'dec_PhysicalDeliveryCountryName'/2,
		      'dec_PhysicalDeliveryOfficeName'/2,
		      'dec_PhysicalDeliveryOfficeNumber'/2,
		      'dec_PhysicalDeliveryOrganizationName'/2,
		      'dec_PhysicalDeliveryPersonalName'/2,
		      'dec_PolicyConstraints'/2,
		      'dec_PolicyInformation'/2,
		      'dec_PolicyMappings'/2,
		      'dec_PolicyQualifierId'/2,
		      'dec_PolicyQualifierInfo'/2,
		      'dec_PostOfficeBoxAddress'/2,
		      'dec_PostalCode'/2,
		      'dec_PosteRestanteAddress'/2,
		      'dec_PresentationAddress'/2,
		      'dec_Prime-p'/2,
		      'dec_PrivateDomainName'/2,
		      'dec_PrivateKeyUsagePeriod'/2,
		      'dec_ProxyInfo'/2,
		      'dec_PublicKeyAlgorithm'/2,
		      'dec_RDNSequence'/2,
		      'dec_RSAPrivateKey'/2,
		      'dec_RSAPublicKey'/2,
		      'dec_RSASSA-PSS-params'/2,
		      'dec_ReasonFlags'/2,
		      'dec_RecipientInfo'/2,
		      'dec_RecipientInfos'/2,
		      'dec_RelativeDistinguishedName'/2,
		      'dec_RoleSyntax'/2,
		      'dec_SecurityCategory'/2,
		      'dec_SignatureAlgorithm'/2,
		      'dec_SignatureAlgorithm-Any'/2,
		      'dec_SignedAndEnvelopedData'/2,
		      'dec_SignedData'/2,
		      'dec_SignerInfo'/2,
		      'dec_SignerInfoAuthenticatedAttributes'/2,
		      'dec_SignerInfos'/2,
		      'dec_SigningTime'/2,
		      'dec_SkipCerts'/2,
		      'dec_StreetAddress'/2,
		      'dec_SubjectAltName'/2,
		      'dec_SubjectDirectoryAttributes'/2,
		      'dec_SubjectInfoAccessSyntax'/2,
		      'dec_SubjectKeyIdentifier'/2,
		      'dec_SubjectPublicKeyInfo'/2,
		      'dec_SvceAuthInfo'/2,
		      'dec_TBSCertList'/2,
		      'dec_TBSCertificate'/2,
		      'dec_Target'/2,
		      'dec_TargetCert'/2,
		      'dec_Targets'/2,
		      'dec_TeletexCommonName'/2,
		      'dec_TeletexDomainDefinedAttribute'/2,
		      'dec_TeletexDomainDefinedAttributes'/2,
		      'dec_TeletexOrganizationName'/2,
		      'dec_TeletexOrganizationalUnitName'/2,
		      'dec_TeletexOrganizationalUnitNames'/2,
		      'dec_TeletexPersonalName'/2,
		      'dec_TerminalIdentifier'/2,
		      'dec_TerminalType'/2,
		      'dec_Time'/2,
		      'dec_TrailerField'/2,
		      'dec_Trinomial'/2,
		      'dec_UnformattedPostalAddress'/2,
		      'dec_UniqueIdentifier'/2,
		      'dec_UniquePostalName'/2,
		      'dec_UserNotice'/2,
		      'dec_V2Form'/2,
		      'dec_ValidationParms'/2,
		      'dec_Validity'/2,
		      'dec_VersionPKCS-1'/2,
		      'dec_VersionPKIX1Explicit88'/2,
		      'dec_X121Address'/2,
		      'dec_X520CommonName'/2,
		      'dec_X520LocalityName'/2,
		      'dec_X520OrganizationName'/2,
		      'dec_X520OrganizationalUnitName'/2,
		      'dec_X520Pseudonym'/2,
		      'dec_X520SerialNumber'/2,
		      'dec_X520StateOrProvinceName'/2,
		      'dec_X520Title'/2,
		      'dec_X520countryName'/2,
		      'dec_X520dnQualifier'/2,
		      'dec_X520name'/2,
		      'dec_authorityInfoAccess'/3,
		      'dec_authorityKeyIdentifier'/3,
		      'dec_basicConstraints'/3,
		      'dec_cRLDistributionPoints'/3,
		      'dec_cRLNumber'/3,
		      'dec_cRLReasons'/3,
		      'dec_certificateIssuer'/3,
		      'dec_certificatePolicies'/3,
		      'dec_challengePassword'/3,
		      'dec_commonName'/3,
		      'dec_contentType'/3,
		      'dec_counterSignature'/3,
		      'dec_countryName'/3,
		      'dec_deltaCRLIndicator'/3,
		      'dec_dh'/3,
		      'dec_dnQualifier'/3,
		      'dec_domainComponent'/3,
		      'dec_dsa'/3,
		      'dec_dsa-with-sha1'/3,
		      'dec_dsaWithSHA1'/3,
		      'dec_ec-public-key'/3,
		      'dec_ecdsa-with-sha1'/3,
		      'dec_ecdsa-with-sha224'/3,
		      'dec_ecdsa-with-sha256'/3,
		      'dec_ecdsa-with-sha384'/3,
		      'dec_ecdsa-with-sha512'/3,
		      'dec_emailAddress'/3,
		      'dec_extKeyUsage'/3,
		      'dec_extensionRequest'/3,
		      'dec_failInfo'/3,
		      'dec_field-characteristic-two'/3,
		      'dec_field-prime-field'/3,
		      'dec_freshestCRL'/3,
		      'dec_generationQualifier'/3,
		      'dec_givenName'/3,
		      'dec_gn-basis'/3,
		      'dec_holdInstructionCode'/3,
		      'dec_inhibitAnyPolicy'/3,
		      'dec_initials'/3,
		      'dec_invalidityDate'/3,
		      'dec_issuerAltName'/3,
		      'dec_issuingDistributionPoint'/3,
		      'dec_kea'/3,
		      'dec_keyUsage'/3,
		      'dec_localityName'/3,
		      'dec_md2-with-rsa-encryption'/3,
		      'dec_md5-with-rsa-encryption'/3,
		      'dec_messageDigest'/3,
		      'dec_messageType'/3,
		      'dec_name'/3,
		      'dec_nameConstraints'/3,
		      'dec_organizationName'/3,
		      'dec_organizationalUnitName'/3,
		      'dec_pkiStatus'/3,
		      'dec_policyConstraints'/3,
		      'dec_policyMappings'/3,
		      'dec_pp-basis'/3,
		      'dec_privateKeyUsagePeriod'/3,
		      'dec_pseudonym'/3,
		      'dec_recipientNonce'/3,
		      'dec_rsa-encryption'/3,
		      'dec_senderNonce'/3,
		      'dec_serialNumber'/3,
		      'dec_sha-1with-rsa-encryption'/3,
		      'dec_sha1-with-rsa-encryption'/3,
		      'dec_sha224-with-rsa-encryption'/3,
		      'dec_sha256-with-rsa-encryption'/3,
		      'dec_sha384-with-rsa-encryption'/3,
		      'dec_sha512-with-rsa-encryption'/3,
		      'dec_signingTime'/3,
		      'dec_stateOrProvinceName'/3,
		      'dec_subjectAltName'/3,
		      'dec_subjectDirectoryAttributes'/3,
		      'dec_subjectInfoAccess'/3,
		      'dec_subjectKeyIdentifier'/3,
		      'dec_surname'/3,
		      'dec_title'/3,
		      'dec_tp-basis'/3,
		      'dec_transactionID'/3,
		      'dec_x400-common-name'/3,
		      'dec_x400-extended-network-address'/3,
		      'dec_x400-extension-OR-address-components'/3,
		      'dec_x400-extension-physical-delivery-address-components'/3,
		      'dec_x400-local-postal-attributes'/3,
		      'dec_x400-pds-name'/3,
		      'dec_x400-physical-delivery-country-name'/3,
		      'dec_x400-physical-delivery-office-name'/3,
		      'dec_x400-physical-delivery-office-number'/3,
		      'dec_x400-physical-delivery-organization-name'/3,
		      'dec_x400-physical-delivery-personal-name'/3,
		      'dec_x400-post-office-box-address'/3,
		      'dec_x400-postal-code'/3,
		      'dec_x400-poste-restante-address'/3,
		      'dec_x400-street-address'/3,
		      'dec_x400-teletex-common-name'/3,
		      'dec_x400-teletex-domain-defined-attributes'/3,
		      'dec_x400-teletex-personal-name'/3,
		      'dec_x400-terminal-type'/3,
		      'dec_x400-unformatted-postal-address'/3,
		      'dec_x400-unique-postal-name'/3,
		      'decode'/2,
		      'decode_TBSCertList_exclusive'/1,
		      'decode_TBSCert_exclusive'/1,
		      'decode_part'/2,
		      'dhKeyAgreement'/0,
		      'dhpublicnumber'/0,
		      'dialyzer-suppressions'/1,
		      'digestedData'/0,
		      'ecStdCurvesAndGeneration'/0,
		      'ecdsa-with-SHA1'/0,
		      'ecdsa-with-SHA2'/0,
		      'ecdsa-with-SHA224'/0,
		      'ecdsa-with-SHA256'/0,
		      'ecdsa-with-SHA384'/0,
		      'ecdsa-with-SHA512'/0,
		      'ellipticCurve'/0,
		      'ellipticCurveRFC5639'/0,
		      'enc_AAControls'/2,
		      'enc_ACClearAttrs'/2,
		      'enc_AccessDescription'/2,
		      'enc_AdministrationDomainName'/2,
		      'enc_Algorithm'/2,
		      'enc_AlgorithmIdentifier'/2,
		      'enc_AlgorithmNull'/2,
		      'enc_AnotherName'/2,
		      'enc_Any'/2,
		      'enc_AttCertIssuer'/2,
		      'enc_AttCertValidityPeriod'/2,
		      'enc_AttCertVersion'/2,
		      'enc_AttrSpec'/2,
		      'enc_Attribute'/2,
		      'enc_AttributeCertificate'/2,
		      'enc_AttributeCertificateInfo'/2,
		      'enc_AttributeType'/2,
		      'enc_AttributeTypeAndValue'/2,
		      'enc_AttributeValue'/2,
		      'enc_AuthorityInfoAccessSyntax'/2,
		      'enc_AuthorityKeyIdentifier'/2,
		      'enc_BaseCRLNumber'/2,
		      'enc_BaseDistance'/2,
		      'enc_BasicConstraints'/2,
		      'enc_Boolean'/2,
		      'enc_BuiltInDomainDefinedAttribute'/2,
		      'enc_BuiltInDomainDefinedAttributes'/2,
		      'enc_BuiltInStandardAttributes'/2,
		      'enc_CPSuri'/2,
		      'enc_CRLDistributionPoints'/2,
		      'enc_CRLNumber'/2,
		      'enc_CRLReason'/2,
		      'enc_CRLSequence'/2,
		      'enc_CertPolicyId'/2,
		      'enc_Certificate'/2,
		      'enc_CertificateIssuer'/2,
		      'enc_CertificateList'/2,
		      'enc_CertificatePolicies'/2,
		      'enc_CertificateRevocationLists'/2,
		      'enc_CertificateSerialNumber'/2,
		      'enc_Certificates'/2,
		      'enc_CertificationRequest'/2,
		      'enc_CertificationRequestInfo'/2,
		      'enc_Characteristic-two'/2,
		      'enc_ClassList'/2,
		      'enc_Clearance'/2,
		      'enc_CommonName'/2,
		      'enc_ContentEncryptionAlgorithmIdentifier'/2,
		      'enc_ContentInfo'/2,
		      'enc_ContentType'/2,
		      'enc_CountryName'/2,
		      'enc_Curve'/2,
		      'enc_DHParameter'/2,
		      'enc_DHPublicKey'/2,
		      'enc_DSAParams'/2,
		      'enc_DSAPrivateKey'/2,
		      'enc_DSAPublicKey'/2,
		      'enc_Data'/2,
		      'enc_Digest'/2,
		      'enc_DigestAlgorithmIdentifier'/2,
		      'enc_DigestAlgorithmIdentifiers'/2,
		      'enc_DigestEncryptionAlgorithmIdentifier'/2,
		      'enc_DigestInfoNull'/2,
		      'enc_DigestInfoPKCS-1'/2,
		      'enc_DigestInfoPKCS-7'/2,
		      'enc_DigestedData'/2,
		      'enc_DirectoryString'/2,
		      'enc_DisplayText'/2,
		      'enc_DistinguishedName'/2,
		      'enc_DistributionPoint'/2,
		      'enc_DistributionPointName'/2,
		      'enc_DomainComponent'/2,
		      'enc_DomainParameters'/2,
		      'enc_Dss-Parms'/2,
		      'enc_Dss-Sig-Value'/2,
		      'enc_ECDSA-Sig-Value'/2,
		      'enc_ECPVer'/2,
		      'enc_ECParameters'/2,
		      'enc_ECPoint'/2,
		      'enc_ECPrivateKey'/2,
		      'enc_EDIPartyName'/2,
		      'enc_EcpkParameters'/2,
		      'enc_EmailAddress'/2,
		      'enc_EncryptedContent'/2,
		      'enc_EncryptedContentInfo'/2,
		      'enc_EncryptedData'/2,
		      'enc_EncryptedDigest'/2,
		      'enc_EncryptedKey'/2,
		      'enc_EnvelopedData'/2,
		      'enc_ExtKeyUsageSyntax'/2,
		      'enc_ExtendedCertificate'/2,
		      'enc_ExtendedCertificateOrCertificate'/2,
		      'enc_ExtendedCertificatesAndCertificates'/2,
		      'enc_ExtendedNetworkAddress'/2,
		      'enc_Extension'/2,
		      'enc_Extension-Any'/2,
		      'enc_ExtensionAttribute'/2,
		      'enc_ExtensionAttributes'/2,
		      'enc_ExtensionORAddressComponents'/2,
		      'enc_ExtensionPhysicalDeliveryAddressComponents'/2,
		      'enc_ExtensionRequest'/2,
		      'enc_Extensions'/2,
		      'enc_FieldElement'/2,
		      'enc_FieldID'/2,
		      'enc_FreshestCRL'/2,
		      'enc_GeneralName'/2,
		      'enc_GeneralNames'/2,
		      'enc_GeneralSubtree'/2,
		      'enc_GeneralSubtrees'/2,
		      'enc_HoldInstructionCode'/2,
		      'enc_Holder'/2,
		      'enc_IetfAttrSyntax'/2,
		      'enc_InhibitAnyPolicy'/2,
		      'enc_InvalidityDate'/2,
		      'enc_IssuerAltName'/2,
		      'enc_IssuerAndSerialNumber'/2,
		      'enc_IssuerSerial'/2,
		      'enc_IssuingDistributionPoint'/2,
		      'enc_KEA-Parms-Id'/2,
		      'enc_KEA-PublicKey'/2,
		      'enc_KeyEncryptionAlgorithmIdentifier'/2,
		      'enc_KeyIdentifier'/2,
		      'enc_KeyPurposeId'/2,
		      'enc_KeyUsage'/2,
		      'enc_LocalPostalAttributes'/2,
		      'enc_MessageDigest'/2,
		      'enc_Name'/2,
		      'enc_NameConstraints'/2,
		      'enc_NetworkAddress'/2,
		      'enc_NoticeReference'/2,
		      'enc_NumericUserIdentifier'/2,
		      'enc_ORAddress'/2,
		      'enc_OTP-X520countryname'/2,
		      'enc_OTP-emailAddress'/2,
		      'enc_OTPAttributeTypeAndValue'/2,
		      'enc_OTPCertificate'/2,
		      'enc_OTPCharacteristic-two'/2,
		      'enc_OTPExtension'/2,
		      'enc_OTPExtensionAttribute'/2,
		      'enc_OTPExtensionAttributes'/2,
		      'enc_OTPExtensions'/2,
		      'enc_OTPFieldID'/2,
		      'enc_OTPOLDSubjectPublicKeyInfo'/2,
		      'enc_OTPSubjectPublicKeyInfo'/2,
		      'enc_OTPSubjectPublicKeyInfo-Any'/2,
		      'enc_OTPTBSCertificate'/2,
		      'enc_ObjId'/2,
		      'enc_ObjectDigestInfo'/2,
		      'enc_OrganizationName'/2,
		      'enc_OrganizationalUnitName'/2,
		      'enc_OrganizationalUnitNames'/2,
		      'enc_OtherPrimeInfo'/2,
		      'enc_OtherPrimeInfos'/2,
		      'enc_PDSName'/2,
		      'enc_PDSParameter'/2,
		      'enc_Pentanomial'/2,
		      'enc_PersonalName'/2,
		      'enc_PhysicalDeliveryCountryName'/2,
		      'enc_PhysicalDeliveryOfficeName'/2,
		      'enc_PhysicalDeliveryOfficeNumber'/2,
		      'enc_PhysicalDeliveryOrganizationName'/2,
		      'enc_PhysicalDeliveryPersonalName'/2,
		      'enc_PolicyConstraints'/2,
		      'enc_PolicyInformation'/2,
		      'enc_PolicyMappings'/2,
		      'enc_PolicyQualifierId'/2,
		      'enc_PolicyQualifierInfo'/2,
		      'enc_PostOfficeBoxAddress'/2,
		      'enc_PostalCode'/2,
		      'enc_PosteRestanteAddress'/2,
		      'enc_PresentationAddress'/2,
		      'enc_Prime-p'/2,
		      'enc_PrivateDomainName'/2,
		      'enc_PrivateKeyUsagePeriod'/2,
		      'enc_ProxyInfo'/2,
		      'enc_PublicKeyAlgorithm'/2,
		      'enc_RDNSequence'/2,
		      'enc_RSAPrivateKey'/2,
		      'enc_RSAPublicKey'/2,
		      'enc_RSASSA-PSS-params'/2,
		      'enc_ReasonFlags'/2,
		      'enc_RecipientInfo'/2,
		      'enc_RecipientInfos'/2,
		      'enc_RelativeDistinguishedName'/2,
		      'enc_RoleSyntax'/2,
		      'enc_SecurityCategory'/2,
		      'enc_SignatureAlgorithm'/2,
		      'enc_SignatureAlgorithm-Any'/2,
		      'enc_SignedAndEnvelopedData'/2,
		      'enc_SignedData'/2,
		      'enc_SignerInfo'/2,
		      'enc_SignerInfoAuthenticatedAttributes'/2,
		      'enc_SignerInfos'/2,
		      'enc_SigningTime'/2,
		      'enc_SkipCerts'/2,
		      'enc_StreetAddress'/2,
		      'enc_SubjectAltName'/2,
		      'enc_SubjectDirectoryAttributes'/2,
		      'enc_SubjectInfoAccessSyntax'/2,
		      'enc_SubjectKeyIdentifier'/2,
		      'enc_SubjectPublicKeyInfo'/2,
		      'enc_SvceAuthInfo'/2,
		      'enc_TBSCertList'/2,
		      'enc_TBSCertificate'/2,
		      'enc_Target'/2,
		      'enc_TargetCert'/2,
		      'enc_Targets'/2,
		      'enc_TeletexCommonName'/2,
		      'enc_TeletexDomainDefinedAttribute'/2,
		      'enc_TeletexDomainDefinedAttributes'/2,
		      'enc_TeletexOrganizationName'/2,
		      'enc_TeletexOrganizationalUnitName'/2,
		      'enc_TeletexOrganizationalUnitNames'/2,
		      'enc_TeletexPersonalName'/2,
		      'enc_TerminalIdentifier'/2,
		      'enc_TerminalType'/2,
		      'enc_Time'/2,
		      'enc_TrailerField'/2,
		      'enc_Trinomial'/2,
		      'enc_UnformattedPostalAddress'/2,
		      'enc_UniqueIdentifier'/2,
		      'enc_UniquePostalName'/2,
		      'enc_UserNotice'/2,
		      'enc_V2Form'/2,
		      'enc_ValidationParms'/2,
		      'enc_Validity'/2,
		      'enc_VersionPKCS-1'/2,
		      'enc_VersionPKIX1Explicit88'/2,
		      'enc_X121Address'/2,
		      'enc_X520CommonName'/2,
		      'enc_X520LocalityName'/2,
		      'enc_X520OrganizationName'/2,
		      'enc_X520OrganizationalUnitName'/2,
		      'enc_X520Pseudonym'/2,
		      'enc_X520SerialNumber'/2,
		      'enc_X520StateOrProvinceName'/2,
		      'enc_X520Title'/2,
		      'enc_X520countryName'/2,
		      'enc_X520dnQualifier'/2,
		      'enc_X520name'/2,
		      'enc_authorityInfoAccess'/3,
		      'enc_authorityKeyIdentifier'/3,
		      'enc_basicConstraints'/3,
		      'enc_cRLDistributionPoints'/3,
		      'enc_cRLNumber'/3,
		      'enc_cRLReasons'/3,
		      'enc_certificateIssuer'/3,
		      'enc_certificatePolicies'/3,
		      'enc_challengePassword'/3,
		      'enc_commonName'/3,
		      'enc_contentType'/3,
		      'enc_counterSignature'/3,
		      'enc_countryName'/3,
		      'enc_deltaCRLIndicator'/3,
		      'enc_dh'/3,
		      'enc_dnQualifier'/3,
		      'enc_domainComponent'/3,
		      'enc_dsa'/3,
		      'enc_dsa-with-sha1'/3,
		      'enc_dsaWithSHA1'/3,
		      'enc_ec-public-key'/3,
		      'enc_ecdsa-with-sha1'/3,
		      'enc_ecdsa-with-sha224'/3,
		      'enc_ecdsa-with-sha256'/3,
		      'enc_ecdsa-with-sha384'/3,
		      'enc_ecdsa-with-sha512'/3,
		      'enc_emailAddress'/3,
		      'enc_extKeyUsage'/3,
		      'enc_extensionRequest'/3,
		      'enc_failInfo'/3,
		      'enc_field-characteristic-two'/3,
		      'enc_field-prime-field'/3,
		      'enc_freshestCRL'/3,
		      'enc_generationQualifier'/3,
		      'enc_givenName'/3,
		      'enc_gn-basis'/3,
		      'enc_holdInstructionCode'/3,
		      'enc_inhibitAnyPolicy'/3,
		      'enc_initials'/3,
		      'enc_invalidityDate'/3,
		      'enc_issuerAltName'/3,
		      'enc_issuingDistributionPoint'/3,
		      'enc_kea'/3,
		      'enc_keyUsage'/3,
		      'enc_localityName'/3,
		      'enc_md2-with-rsa-encryption'/3,
		      'enc_md5-with-rsa-encryption'/3,
		      'enc_messageDigest'/3,
		      'enc_messageType'/3,
		      'enc_name'/3,
		      'enc_nameConstraints'/3,
		      'enc_organizationName'/3,
		      'enc_organizationalUnitName'/3,
		      'enc_pkiStatus'/3,
		      'enc_policyConstraints'/3,
		      'enc_policyMappings'/3,
		      'enc_pp-basis'/3,
		      'enc_privateKeyUsagePeriod'/3,
		      'enc_pseudonym'/3,
		      'enc_recipientNonce'/3,
		      'enc_rsa-encryption'/3,
		      'enc_senderNonce'/3,
		      'enc_serialNumber'/3,
		      'enc_sha-1with-rsa-encryption'/3,
		      'enc_sha1-with-rsa-encryption'/3,
		      'enc_sha224-with-rsa-encryption'/3,
		      'enc_sha256-with-rsa-encryption'/3,
		      'enc_sha384-with-rsa-encryption'/3,
		      'enc_sha512-with-rsa-encryption'/3,
		      'enc_signingTime'/3,
		      'enc_stateOrProvinceName'/3,
		      'enc_subjectAltName'/3,
		      'enc_subjectDirectoryAttributes'/3,
		      'enc_subjectInfoAccess'/3,
		      'enc_subjectKeyIdentifier'/3,
		      'enc_surname'/3,
		      'enc_title'/3,
		      'enc_tp-basis'/3,
		      'enc_transactionID'/3,
		      'enc_x400-common-name'/3,
		      'enc_x400-extended-network-address'/3,
		      'enc_x400-extension-OR-address-components'/3,
		      'enc_x400-extension-physical-delivery-address-components'/3,
		      'enc_x400-local-postal-attributes'/3,
		      'enc_x400-pds-name'/3,
		      'enc_x400-physical-delivery-country-name'/3,
		      'enc_x400-physical-delivery-office-name'/3,
		      'enc_x400-physical-delivery-office-number'/3,
		      'enc_x400-physical-delivery-organization-name'/3,
		      'enc_x400-physical-delivery-personal-name'/3,
		      'enc_x400-post-office-box-address'/3,
		      'enc_x400-postal-code'/3,
		      'enc_x400-poste-restante-address'/3,
		      'enc_x400-street-address'/3,
		      'enc_x400-teletex-common-name'/3,
		      'enc_x400-teletex-domain-defined-attributes'/3,
		      'enc_x400-teletex-personal-name'/3,
		      'enc_x400-terminal-type'/3,
		      'enc_x400-unformatted-postal-address'/3,
		      'enc_x400-unique-postal-name'/3,
		      'encode'/2,
		      'encoding_rule'/0,
		      'encryptedData'/0,
		      'envelopedData'/0,
		      'extended-network-address'/0,
		      'extension-OR-address-components'/0,
		      'extension-physical-delivery-address-components'/0,
		      'getdec_Authenticated'/1,
		      'getdec_CRIAttributes'/1,
		      'getdec_ContentEncryptionAlgorithms'/1,
		      'getdec_Contents'/1,
		      'getdec_DigestAlgorithms'/1,
		      'getdec_DigestEncryptionAlgorithms'/1,
		      'getdec_KeyEncryptionAlgorithms'/1,
		      'getdec_PKInfoAlgorithms'/1,
		      'getdec_SignatureAlgorithms'/1,
		      'getdec_SupportedAttributeTypeAndValues'/1,
		      'getdec_SupportedCharacteristicTwos'/1,
		      'getdec_SupportedExtensionAttributes'/1,
		      'getdec_SupportedExtensions'/1,
		      'getdec_SupportedFieldIds'/1,
		      'getdec_SupportedPublicKeyAlgorithms'/1,
		      'getdec_SupportedSignatureAlgorithms'/1,
		      'getdec_Unauthenticated'/1,
		      'getdec_internal_object_set_argument_1'/1,
		      'getdec_internal_object_set_argument_10'/1,
		      'getdec_internal_object_set_argument_11'/1,
		      'getdec_internal_object_set_argument_2'/1,
		      'getdec_internal_object_set_argument_3'/1,
		      'getdec_internal_object_set_argument_4'/1,
		      'getdec_internal_object_set_argument_5'/1,
		      'getdec_internal_object_set_argument_6'/1,
		      'getdec_internal_object_set_argument_7'/1,
		      'getdec_internal_object_set_argument_8'/1,
		      'getdec_internal_object_set_argument_9'/1,
		      'getenc_Authenticated'/1,
		      'getenc_CRIAttributes'/1,
		      'getenc_ContentEncryptionAlgorithms'/1,
		      'getenc_Contents'/1,
		      'getenc_DigestAlgorithms'/1,
		      'getenc_DigestEncryptionAlgorithms'/1,
		      'getenc_KeyEncryptionAlgorithms'/1,
		      'getenc_PKInfoAlgorithms'/1,
		      'getenc_SignatureAlgorithms'/1,
		      'getenc_SupportedAttributeTypeAndValues'/1,
		      'getenc_SupportedCharacteristicTwos'/1,
		      'getenc_SupportedExtensionAttributes'/1,
		      'getenc_SupportedExtensions'/1,
		      'getenc_SupportedFieldIds'/1,
		      'getenc_SupportedPublicKeyAlgorithms'/1,
		      'getenc_SupportedSignatureAlgorithms'/1,
		      'getenc_Unauthenticated'/1,
		      'getenc_internal_object_set_argument_1'/1,
		      'getenc_internal_object_set_argument_10'/1,
		      'getenc_internal_object_set_argument_11'/1,
		      'getenc_internal_object_set_argument_2'/1,
		      'getenc_internal_object_set_argument_3'/1,
		      'getenc_internal_object_set_argument_4'/1,
		      'getenc_internal_object_set_argument_5'/1,
		      'getenc_internal_object_set_argument_6'/1,
		      'getenc_internal_object_set_argument_7'/1,
		      'getenc_internal_object_set_argument_8'/1,
		      'getenc_internal_object_set_argument_9'/1,
		      'gnBasis'/0,
		      'holdInstruction'/0,
		      'id-RSAES-OAEP'/0,
		      'id-RSASSA-PSS'/0,
		      'id-VeriSign'/0,
		      'id-aca'/0,
		      'id-aca-accessIdentity'/0,
		      'id-aca-authenticationInfo'/0,
		      'id-aca-chargingIdentity'/0,
		      'id-aca-encAttrs'/0,
		      'id-aca-group'/0,
		      'id-ad'/0,
		      'id-ad-caIssuers'/0,
		      'id-ad-caRepository'/0,
		      'id-ad-ocsp'/0,
		      'id-ad-timeStamping'/0,
		      'id-at'/0,
		      'id-at-clearance'/0,
		      'id-at-commonName'/0,
		      'id-at-countryName'/0,
		      'id-at-dnQualifier'/0,
		      'id-at-generationQualifier'/0,
		      'id-at-givenName'/0,
		      'id-at-initials'/0,
		      'id-at-localityName'/0,
		      'id-at-name'/0,
		      'id-at-organizationName'/0,
		      'id-at-organizationalUnitName'/0,
		      'id-at-pseudonym'/0,
		      'id-at-role'/0,
		      'id-at-serialNumber'/0,
		      'id-at-stateOrProvinceName'/0,
		      'id-at-surname'/0,
		      'id-at-title'/0,
		      'id-attributes'/0,
		      'id-ce'/0,
		      'id-ce-authorityKeyIdentifier'/0,
		      'id-ce-basicConstraints'/0,
		      'id-ce-cRLDistributionPoints'/0,
		      'id-ce-cRLNumber'/0,
		      'id-ce-cRLReasons'/0,
		      'id-ce-certificateIssuer'/0,
		      'id-ce-certificatePolicies'/0,
		      'id-ce-deltaCRLIndicator'/0,
		      'id-ce-extKeyUsage'/0,
		      'id-ce-freshestCRL'/0,
		      'id-ce-holdInstructionCode'/0,
		      'id-ce-inhibitAnyPolicy'/0,
		      'id-ce-invalidityDate'/0,
		      'id-ce-issuerAltName'/0,
		      'id-ce-issuingDistributionPoint'/0,
		      'id-ce-keyUsage'/0,
		      'id-ce-nameConstraints'/0,
		      'id-ce-policyConstraints'/0,
		      'id-ce-policyMappings'/0,
		      'id-ce-privateKeyUsagePeriod'/0,
		      'id-ce-subjectAltName'/0,
		      'id-ce-subjectDirectoryAttributes'/0,
		      'id-ce-subjectKeyIdentifier'/0,
		      'id-ce-targetInformation'/0,
		      'id-characteristic-two-basis'/0,
		      'id-domainComponent'/0,
		      'id-dsa'/0,
		      'id-dsa-with-sha1'/0,
		      'id-dsaWithSHA1'/0,
		      'id-ecPublicKey'/0,
		      'id-ecSigType'/0,
		      'id-emailAddress'/0,
		      'id-extensionReq'/0,
		      'id-failInfo'/0,
		      'id-fieldType'/0,
		      'id-hmacWithSHA224'/0,
		      'id-hmacWithSHA256'/0,
		      'id-hmacWithSHA384'/0,
		      'id-hmacWithSHA512'/0,
		      'id-holdinstruction-callissuer'/0,
		      'id-holdinstruction-none'/0,
		      'id-holdinstruction-reject'/0,
		      'id-keyExchangeAlgorithm'/0,
		      'id-kp'/0,
		      'id-kp-OCSPSigning'/0,
		      'id-kp-clientAuth'/0,
		      'id-kp-codeSigning'/0,
		      'id-kp-emailProtection'/0,
		      'id-kp-serverAuth'/0,
		      'id-kp-timeStamping'/0,
		      'id-md2'/0,
		      'id-md5'/0,
		      'id-messageType'/0,
		      'id-mgf1'/0,
		      'id-pSpecified'/0,
		      'id-pe'/0,
		      'id-pe-aaControls'/0,
		      'id-pe-ac-auditIdentity'/0,
		      'id-pe-ac-proxying'/0,
		      'id-pe-authorityInfoAccess'/0,
		      'id-pe-subjectInfoAccess'/0,
		      'id-pki'/0,
		      'id-pkiStatus'/0,
		      'id-pkix'/0,
		      'id-publicKeyType'/0,
		      'id-qt'/0,
		      'id-qt-cps'/0,
		      'id-qt-unotice'/0,
		      'id-recipientNonce'/0,
		      'id-senderNonce'/0,
		      'id-sha1'/0,
		      'id-sha224'/0,
		      'id-sha256'/0,
		      'id-sha384'/0,
		      'id-sha512'/0,
		      'id-transId'/0,
		      'info'/0,
		      'legacy_erlang_types'/0,
		      'local-postal-attributes'/0,
		      'md2WithRSAEncryption'/0,
		      'md5WithRSAEncryption'/0,
		      'module_info'/0,
		      'module_info'/1,
		      'pds-name'/0,
		      'physical-delivery-country-name'/0,
		      'physical-delivery-office-name'/0,
		      'physical-delivery-office-number'/0,
		      'physical-delivery-organization-name'/0,
		      'physical-delivery-personal-name'/0,
		      'pkcs-1'/0,
		      'pkcs-3'/0,
		      'pkcs-7'/0,
		      'pkcs-9'/0,
		      'pkcs-9-at-challengePassword'/0,
		      'pkcs-9-at-contentType'/0,
		      'pkcs-9-at-counterSignature'/0,
		      'pkcs-9-at-extensionRequest'/0,
		      'pkcs-9-at-messageDigest'/0,
		      'pkcs-9-at-signingTime'/0,
		      'post-office-box-address'/0,
		      'postal-code'/0,
		      'poste-restante-address'/0,
		      'ppBasis'/0,
		      'prime-field'/0,
		      'rsaEncryption'/0,
		      'secp112r1'/0,
		      'secp112r2'/0,
		      'secp128r1'/0,
		      'secp128r2'/0,
		      'secp160k1'/0,
		      'secp160r1'/0,
		      'secp160r2'/0,
		      'secp192k1'/0,
		      'secp192r1'/0,
		      'secp224k1'/0,
		      'secp224r1'/0,
		      'secp256k1'/0,
		      'secp256r1'/0,
		      'secp384r1'/0,
		      'secp521r1'/0,
		      'sect113r1'/0,
		      'sect113r2'/0,
		      'sect131r1'/0,
		      'sect131r2'/0,
		      'sect163k1'/0,
		      'sect163r1'/0,
		      'sect163r2'/0,
		      'sect193r1'/0,
		      'sect193r2'/0,
		      'sect233k1'/0,
		      'sect233r1'/0,
		      'sect239k1'/0,
		      'sect283k1'/0,
		      'sect283r1'/0,
		      'sect409k1'/0,
		      'sect409r1'/0,
		      'sect571k1'/0,
		      'sect571r1'/0,
		      'sha-1WithRSAEncryption'/0,
		      'sha1WithRSAEncryption'/0,
		      'sha224WithRSAEncryption'/0,
		      'sha256WithRSAEncryption'/0,
		      'sha384WithRSAEncryption'/0,
		      'sha512WithRSAEncryption'/0,
		      'signedAndEnvelopedData'/0,
		      'signedData'/0,
		      'street-address'/0,
		      'teletex-common-name'/0,
		      'teletex-domain-defined-attributes'/0,
		      'teletex-organization-name'/0,
		      'teletex-organizational-unit-names'/0,
		      'teletex-personal-name'/0,
		      'terminal-type'/0,
		      'tpBasis'/0,
		      'ub-common-name'/0,
		      'ub-common-name-length'/0,
		      'ub-country-name-alpha-length'/0,
		      'ub-country-name-numeric-length'/0,
		      'ub-domain-defined-attribute-type-length'/0,
		      'ub-domain-defined-attribute-value-length'/0,
		      'ub-domain-defined-attributes'/0,
		      'ub-domain-name-length'/0,
		      'ub-e163-4-number-length'/0,
		      'ub-e163-4-sub-address-length'/0,
		      'ub-emailaddress-length'/0,
		      'ub-extension-attributes'/0,
		      'ub-generation-qualifier-length'/0,
		      'ub-given-name-length'/0,
		      'ub-initials-length'/0,
		      'ub-integer-options'/0,
		      'ub-locality-name'/0,
		      'ub-match'/0,
		      'ub-name'/0,
		      'ub-numeric-user-id-length'/0,
		      'ub-organization-name'/0,
		      'ub-organization-name-length'/0,
		      'ub-organizational-unit-name'/0,
		      'ub-organizational-unit-name-length'/0,
		      'ub-organizational-units'/0,
		      'ub-pds-name-length'/0,
		      'ub-pds-parameter-length'/0,
		      'ub-pds-physical-address-lines'/0,
		      'ub-postal-code-length'/0,
		      'ub-pseudonym'/0,
		      'ub-serial-number'/0,
		      'ub-state-name'/0,
		      'ub-surname-length'/0,
		      'ub-terminal-id-length'/0,
		      'ub-title'/0,
		      'ub-unformatted-address-length'/0,
		      'ub-x121-address-length'/0,
		      'unformatted-postal-address'/0,
		      'unique-postal-name'/0,
		      'versionOne'/0]
    attributes [%% Line 7
		'asn1_info' =
		    %% Line 7
		    [{'vsn','3.0.1'}|[{'module','OTP-PUB-KEY'}|[{'options',['warnings'|['ber'|['errors'|[{'cwd',[47|[104|[111|[109|[101|[47|[103|[108|[101|[98|[101|[114|[47|[99|[111|[100|[101|[47|[111|[116|[112|[47|[108|[105|[98|[47|[112|[117|[98|[108|[105|[99|[95|[107|[101|[121|[47|[97|[115|[110|[49]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'outdir',[47|[104|[111|[109|[101|[47|[103|[108|[101|[98|[101|[114|[47|[99|[111|[100|[101|[47|[111|[116|[112|[47|[108|[105|[98|[47|[112|[117|[98|[108|[105|[99|[95|[107|[101|[121|[47|[97|[115|[110|[49]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|['asn1config'|['noobj'|['compact_bit_string'|['der'|[{'i',[46]}|[{'i',[47|[104|[111|[109|[101|[47|[103|[108|[101|[98|[101|[114|[47|[99|[111|[100|[101|[47|[111|[116|[112|[47|[108|[105|[98|[47|[112|[117|[98|[108|[105|[99|[95|[107|[101|[121|[47|[97|[115|[110|[49]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}]]]]]]]]]]]}]]]]
'encoding_rule'/0 =
    %% Line 1047
    fun () ->
	'ber'
'bit_string_format'/0 =
    %% Line 1049
    fun () ->
	'compact'
'legacy_erlang_types'/0 =
    %% Line 1051
    fun () ->
	'true'
'encode'/2 =
    %% Line 1053
    fun (_cor1,_cor0) ->
	%% Line 1054
	try
	    let <_cor2> =
		apply 'encode_disp'/2
		    (_cor1, _cor0)
	    in  let <_cor3> =
		    call 'erlang':'element'
			(1, _cor2)
		in  call 'erlang':'iolist_to_binary'
			(_cor3)
	of <_cor4> ->
	    %% Line 1056
	    {'ok',_cor4}
	catch <_cor8,_cor7,_cor6> ->
	    case <_cor8,_cor7,_cor6> of
	      %% Line 1058
	      <Class,Exception,_cor14>
		  when let <_cor9> =
			call 'erlang':'=:='
			    (Class, 'error')
		    in  let <_cor10> =
			    call 'erlang':'=:='
				(Class, 'exit')
			in  call 'erlang':'or'
				(_cor9, _cor10) ->
		  %% Line 1059
		  case Exception of
		    %% Line 1060
		    <Error = {'error',Reason}> when 'true' ->
			%% Line 1061
			Error
		    %% Line 1062
		    <Reason> when 'true' ->
			%% Line 1063
			{'error',{'asn1',Reason}}
		  end
	      ( <_cor8,_cor7,_cor6> when 'true' ->
		    primop 'raise'
			(_cor6, _cor7)
		-| ['compiler_generated'] )
	    end
'decode'/2 =
    %% Line 1067
    fun (_cor1,_cor0) ->
	%% Line 1068
	try
	    let <_cor2> =
		apply 'ber_decode_nif'/1
		    (_cor0)
	    in  let <_cor3> =
		    call 'erlang':'element'
			(1, _cor2)
		in  apply 'decode_disp'/2
			(_cor1, _cor3)
	of <_cor4> ->
	    %% Line 1070
	    {'ok',_cor4}
	catch <_cor8,_cor7,_cor6> ->
	    case <_cor8,_cor7,_cor6> of
	      %% Line 1072
	      <Class,Exception,_cor14>
		  when let <_cor9> =
			call 'erlang':'=:='
			    (Class, 'error')
		    in  let <_cor10> =
			    call 'erlang':'=:='
				(Class, 'exit')
			in  call 'erlang':'or'
				(_cor9, _cor10) ->
		  %% Line 1073
		  case Exception of
		    %% Line 1074
		    <Error = {'error',Reason}> when 'true' ->
			%% Line 1075
			Error
		    %% Line 1076
		    <Reason> when 'true' ->
			%% Line 1077
			{'error',{'asn1',Reason}}
		  end
	      ( <_cor8,_cor7,_cor6> when 'true' ->
		    primop 'raise'
			(_cor6, _cor7)
		-| ['compiler_generated'] )
	    end
'decode_partial_incomplete'/3 =
    %% Line 1081
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1082
	case %% Line 1083
	     apply 'decode_primitive_incomplete'/2
		 (_cor0, _cor1) of
	  <{Data,_X_RestBin}> when 'true' ->
	      let <_cor4> =
		  catch
		      %% Line 1084
		      apply 'decode_partial_inc_disp'/2
			  (_cor2, Data)
	      in  %% Line 1084
		  case _cor4 of
		    %% Line 1085
		    <{'EXIT',{'error',Reason}}> when 'true' ->
			%% Line 1086
			{'error',Reason}
		    %% Line 1087
		    <{'EXIT',Reason}> when 'true' ->
			%% Line 1088
			{'error',{'asn1',Reason}}
		    %% Line 1089
		    <Result> when 'true' ->
			%% Line 1090
			{'ok',Result}
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'decode_part'/2 =
    %% Line 1093
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Type,Data0>
	      when call 'erlang':'is_binary'
		    (Data0) ->
	      let <_cor4> =
		  catch
		      let <_cor2> =
			  %% Line 1094
			  apply 'ber_decode_nif'/1
			      (Data0)
		      in  let <_cor3> =
			      %% Line 1094
			      call 'erlang':'element'
				  (1, _cor2)
			  in  %% Line 1094
			      apply 'decode_inc_disp'/2
				  (Type, _cor3)
	      in  %% Line 1094
		  case _cor4 of
		    %% Line 1095
		    <{'EXIT',{'error',Reason}}> when 'true' ->
			%% Line 1096
			{'error',Reason}
		    %% Line 1097
		    <{'EXIT',Reason}> when 'true' ->
			%% Line 1098
			{'error',{'asn1',Reason}}
		    %% Line 1099
		    <Result> when 'true' ->
			%% Line 1100
			{'ok',Result}
		  end
	  %% Line 1102
	  <Type,Data0> when 'true' ->
	      let <_cor6> =
		  catch
		      %% Line 1103
		      apply 'decode_inc_disp'/2
			  (Type, Data0)
	      in  %% Line 1103
		  case _cor6 of
		    %% Line 1104
		    <{'EXIT',{'error',Reason}}> when 'true' ->
			%% Line 1105
			{'error',Reason}
		    %% Line 1106
		    <{'EXIT',Reason}> when 'true' ->
			%% Line 1107
			{'error',{'asn1',Reason}}
		    %% Line 1108
		    <Result> when 'true' ->
			%% Line 1109
			{'ok',Result}
		  end
	end
'encode_disp'/2 =
    %% Line 1112
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'ECPrivateKey',Data> when 'true' ->
	      apply 'enc_ECPrivateKey'/1
		  (Data)
	  %% Line 1113
	  <'DSAPrivateKey',Data> when 'true' ->
	      apply 'enc_DSAPrivateKey'/1
		  (Data)
	  %% Line 1114
	  <'DHParameter',Data> when 'true' ->
	      apply 'enc_DHParameter'/1
		  (Data)
	  %% Line 1115
	  <'DigestInfoNull',Data> when 'true' ->
	      apply 'enc_DigestInfoNull'/1
		  (Data)
	  %% Line 1116
	  <'DigestInfoPKCS-1',Data> when 'true' ->
	      apply 'enc_DigestInfoPKCS-1'/1
		  (Data)
	  %% Line 1117
	  <'TrailerField',Data> when 'true' ->
	      apply 'enc_TrailerField'/1
		  (Data)
	  %% Line 1118
	  <'RSASSA-PSS-params',Data> when 'true' ->
	      apply 'enc_RSASSA-PSS-params'/1
		  (Data)
	  %% Line 1119
	  <'AlgorithmNull',Data> when 'true' ->
	      apply 'enc_AlgorithmNull'/1
		  (Data)
	  %% Line 1120
	  <'Algorithm',Data> when 'true' ->
	      apply 'enc_Algorithm'/1
		  (Data)
	  %% Line 1121
	  <'OtherPrimeInfo',Data> when 'true' ->
	      apply 'enc_OtherPrimeInfo'/1
		  (Data)
	  %% Line 1122
	  <'OtherPrimeInfos',Data> when 'true' ->
	      apply 'enc_OtherPrimeInfos'/1
		  (Data)
	  %% Line 1123
	  <'VersionPKCS-1',Data> when 'true' ->
	      apply 'enc_VersionPKCS-1'/1
		  (Data)
	  %% Line 1124
	  <'RSAPrivateKey',Data> when 'true' ->
	      apply 'enc_RSAPrivateKey'/1
		  (Data)
	  %% Line 1125
	  <'RSAPublicKey',Data> when 'true' ->
	      apply 'enc_RSAPublicKey'/1
		  (Data)
	  %% Line 1126
	  <'Curve',Data> when 'true' ->
	      apply 'enc_Curve'/1
		  (Data)
	  %% Line 1127
	  <'ECPVer',Data> when 'true' ->
	      apply 'enc_ECPVer'/1
		  (Data)
	  %% Line 1128
	  <'ECParameters',Data> when 'true' ->
	      apply 'enc_ECParameters'/1
		  (Data)
	  %% Line 1129
	  <'EcpkParameters',Data> when 'true' ->
	      apply 'enc_EcpkParameters'/1
		  (Data)
	  %% Line 1130
	  <'ECPoint',Data> when 'true' ->
	      apply 'enc_ECPoint'/1
		  (Data)
	  %% Line 1131
	  <'FieldElement',Data> when 'true' ->
	      apply 'enc_FieldElement'/1
		  (Data)
	  %% Line 1132
	  <'Pentanomial',Data> when 'true' ->
	      apply 'enc_Pentanomial'/1
		  (Data)
	  %% Line 1133
	  <'Trinomial',Data> when 'true' ->
	      apply 'enc_Trinomial'/1
		  (Data)
	  %% Line 1134
	  <'Characteristic-two',Data> when 'true' ->
	      apply 'enc_Characteristic-two'/1
		  (Data)
	  %% Line 1135
	  <'Prime-p',Data> when 'true' ->
	      apply 'enc_Prime-p'/1
		  (Data)
	  %% Line 1136
	  <'ECDSA-Sig-Value',Data> when 'true' ->
	      apply 'enc_ECDSA-Sig-Value'/1
		  (Data)
	  %% Line 1137
	  <'FieldID',Data> when 'true' ->
	      apply 'enc_FieldID'/1
		  (Data)
	  %% Line 1138
	  <'KEA-Parms-Id',Data> when 'true' ->
	      apply 'enc_KEA-Parms-Id'/1
		  (Data)
	  %% Line 1139
	  <'ValidationParms',Data> when 'true' ->
	      apply 'enc_ValidationParms'/1
		  (Data)
	  %% Line 1140
	  <'DomainParameters',Data> when 'true' ->
	      apply 'enc_DomainParameters'/1
		  (Data)
	  %% Line 1141
	  <'DHPublicKey',Data> when 'true' ->
	      apply 'enc_DHPublicKey'/1
		  (Data)
	  %% Line 1142
	  <'Dss-Sig-Value',Data> when 'true' ->
	      apply 'enc_Dss-Sig-Value'/1
		  (Data)
	  %% Line 1143
	  <'Dss-Parms',Data> when 'true' ->
	      apply 'enc_Dss-Parms'/1
		  (Data)
	  %% Line 1144
	  <'DSAPublicKey',Data> when 'true' ->
	      apply 'enc_DSAPublicKey'/1
		  (Data)
	  %% Line 1145
	  <'ProxyInfo',Data> when 'true' ->
	      apply 'enc_ProxyInfo'/1
		  (Data)
	  %% Line 1146
	  <'ACClearAttrs',Data> when 'true' ->
	      apply 'enc_ACClearAttrs'/1
		  (Data)
	  %% Line 1147
	  <'AttrSpec',Data> when 'true' ->
	      apply 'enc_AttrSpec'/1
		  (Data)
	  %% Line 1148
	  <'AAControls',Data> when 'true' ->
	      apply 'enc_AAControls'/1
		  (Data)
	  %% Line 1149
	  <'SecurityCategory',Data> when 'true' ->
	      apply 'enc_SecurityCategory'/1
		  (Data)
	  %% Line 1150
	  <'ClassList',Data> when 'true' ->
	      apply 'enc_ClassList'/1
		  (Data)
	  %% Line 1151
	  <'Clearance',Data> when 'true' ->
	      apply 'enc_Clearance'/1
		  (Data)
	  %% Line 1152
	  <'RoleSyntax',Data> when 'true' ->
	      apply 'enc_RoleSyntax'/1
		  (Data)
	  %% Line 1153
	  <'SvceAuthInfo',Data> when 'true' ->
	      apply 'enc_SvceAuthInfo'/1
		  (Data)
	  %% Line 1154
	  <'IetfAttrSyntax',Data> when 'true' ->
	      apply 'enc_IetfAttrSyntax'/1
		  (Data)
	  %% Line 1155
	  <'TargetCert',Data> when 'true' ->
	      apply 'enc_TargetCert'/1
		  (Data)
	  %% Line 1156
	  <'Target',Data> when 'true' ->
	      apply 'enc_Target'/1
		  (Data)
	  %% Line 1157
	  <'Targets',Data> when 'true' ->
	      apply 'enc_Targets'/1
		  (Data)
	  %% Line 1158
	  <'AttCertValidityPeriod',Data> when 'true' ->
	      apply 'enc_AttCertValidityPeriod'/1
		  (Data)
	  %% Line 1159
	  <'IssuerSerial',Data> when 'true' ->
	      apply 'enc_IssuerSerial'/1
		  (Data)
	  %% Line 1160
	  <'V2Form',Data> when 'true' ->
	      apply 'enc_V2Form'/1
		  (Data)
	  %% Line 1161
	  <'AttCertIssuer',Data> when 'true' ->
	      apply 'enc_AttCertIssuer'/1
		  (Data)
	  %% Line 1162
	  <'ObjectDigestInfo',Data> when 'true' ->
	      apply 'enc_ObjectDigestInfo'/1
		  (Data)
	  %% Line 1163
	  <'Holder',Data> when 'true' ->
	      apply 'enc_Holder'/1
		  (Data)
	  %% Line 1164
	  <'AttCertVersion',Data> when 'true' ->
	      apply 'enc_AttCertVersion'/1
		  (Data)
	  %% Line 1165
	  <'AttributeCertificateInfo',Data> when 'true' ->
	      apply 'enc_AttributeCertificateInfo'/1
		  (Data)
	  %% Line 1166
	  <'AttributeCertificate',Data> when 'true' ->
	      apply 'enc_AttributeCertificate'/1
		  (Data)
	  %% Line 1167
	  <'InvalidityDate',Data> when 'true' ->
	      apply 'enc_InvalidityDate'/1
		  (Data)
	  %% Line 1168
	  <'HoldInstructionCode',Data> when 'true' ->
	      apply 'enc_HoldInstructionCode'/1
		  (Data)
	  %% Line 1169
	  <'CertificateIssuer',Data> when 'true' ->
	      apply 'enc_CertificateIssuer'/1
		  (Data)
	  %% Line 1170
	  <'CRLReason',Data> when 'true' ->
	      apply 'enc_CRLReason'/1
		  (Data)
	  %% Line 1171
	  <'BaseCRLNumber',Data> when 'true' ->
	      apply 'enc_BaseCRLNumber'/1
		  (Data)
	  %% Line 1172
	  <'IssuingDistributionPoint',Data> when 'true' ->
	      apply 'enc_IssuingDistributionPoint'/1
		  (Data)
	  %% Line 1173
	  <'CRLNumber',Data> when 'true' ->
	      apply 'enc_CRLNumber'/1
		  (Data)
	  %% Line 1174
	  <'SubjectInfoAccessSyntax',Data> when 'true' ->
	      apply 'enc_SubjectInfoAccessSyntax'/1
		  (Data)
	  %% Line 1175
	  <'AccessDescription',Data> when 'true' ->
	      apply 'enc_AccessDescription'/1
		  (Data)
	  %% Line 1176
	  <'AuthorityInfoAccessSyntax',Data> when 'true' ->
	      apply 'enc_AuthorityInfoAccessSyntax'/1
		  (Data)
	  %% Line 1177
	  <'FreshestCRL',Data> when 'true' ->
	      apply 'enc_FreshestCRL'/1
		  (Data)
	  %% Line 1178
	  <'InhibitAnyPolicy',Data> when 'true' ->
	      apply 'enc_InhibitAnyPolicy'/1
		  (Data)
	  %% Line 1179
	  <'KeyPurposeId',Data> when 'true' ->
	      apply 'enc_KeyPurposeId'/1
		  (Data)
	  %% Line 1180
	  <'ExtKeyUsageSyntax',Data> when 'true' ->
	      apply 'enc_ExtKeyUsageSyntax'/1
		  (Data)
	  %% Line 1181
	  <'ReasonFlags',Data> when 'true' ->
	      apply 'enc_ReasonFlags'/1
		  (Data)
	  %% Line 1182
	  <'DistributionPointName',Data> when 'true' ->
	      apply 'enc_DistributionPointName'/1
		  (Data)
	  %% Line 1183
	  <'DistributionPoint',Data> when 'true' ->
	      apply 'enc_DistributionPoint'/1
		  (Data)
	  %% Line 1184
	  <'CRLDistributionPoints',Data> when 'true' ->
	      apply 'enc_CRLDistributionPoints'/1
		  (Data)
	  %% Line 1185
	  <'SkipCerts',Data> when 'true' ->
	      apply 'enc_SkipCerts'/1
		  (Data)
	  %% Line 1186
	  <'PolicyConstraints',Data> when 'true' ->
	      apply 'enc_PolicyConstraints'/1
		  (Data)
	  %% Line 1187
	  <'BaseDistance',Data> when 'true' ->
	      apply 'enc_BaseDistance'/1
		  (Data)
	  %% Line 1188
	  <'GeneralSubtree',Data> when 'true' ->
	      apply 'enc_GeneralSubtree'/1
		  (Data)
	  %% Line 1189
	  <'GeneralSubtrees',Data> when 'true' ->
	      apply 'enc_GeneralSubtrees'/1
		  (Data)
	  %% Line 1190
	  <'NameConstraints',Data> when 'true' ->
	      apply 'enc_NameConstraints'/1
		  (Data)
	  %% Line 1191
	  <'BasicConstraints',Data> when 'true' ->
	      apply 'enc_BasicConstraints'/1
		  (Data)
	  %% Line 1192
	  <'SubjectDirectoryAttributes',Data> when 'true' ->
	      apply 'enc_SubjectDirectoryAttributes'/1
		  (Data)
	  %% Line 1193
	  <'IssuerAltName',Data> when 'true' ->
	      apply 'enc_IssuerAltName'/1
		  (Data)
	  %% Line 1194
	  <'EDIPartyName',Data> when 'true' ->
	      apply 'enc_EDIPartyName'/1
		  (Data)
	  %% Line 1195
	  <'AnotherName',Data> when 'true' ->
	      apply 'enc_AnotherName'/1
		  (Data)
	  %% Line 1196
	  <'GeneralName',Data> when 'true' ->
	      apply 'enc_GeneralName'/1
		  (Data)
	  %% Line 1197
	  <'GeneralNames',Data> when 'true' ->
	      apply 'enc_GeneralNames'/1
		  (Data)
	  %% Line 1198
	  <'SubjectAltName',Data> when 'true' ->
	      apply 'enc_SubjectAltName'/1
		  (Data)
	  %% Line 1199
	  <'PolicyMappings',Data> when 'true' ->
	      apply 'enc_PolicyMappings'/1
		  (Data)
	  %% Line 1200
	  <'DisplayText',Data> when 'true' ->
	      apply 'enc_DisplayText'/1
		  (Data)
	  %% Line 1201
	  <'NoticeReference',Data> when 'true' ->
	      apply 'enc_NoticeReference'/1
		  (Data)
	  %% Line 1202
	  <'UserNotice',Data> when 'true' ->
	      apply 'enc_UserNotice'/1
		  (Data)
	  %% Line 1203
	  <'CPSuri',Data> when 'true' ->
	      apply 'enc_CPSuri'/1
		  (Data)
	  %% Line 1204
	  <'PolicyQualifierId',Data> when 'true' ->
	      apply 'enc_PolicyQualifierId'/1
		  (Data)
	  %% Line 1205
	  <'PolicyQualifierInfo',Data> when 'true' ->
	      apply 'enc_PolicyQualifierInfo'/1
		  (Data)
	  %% Line 1206
	  <'CertPolicyId',Data> when 'true' ->
	      apply 'enc_CertPolicyId'/1
		  (Data)
	  %% Line 1207
	  <'PolicyInformation',Data> when 'true' ->
	      apply 'enc_PolicyInformation'/1
		  (Data)
	  %% Line 1208
	  <'CertificatePolicies',Data> when 'true' ->
	      apply 'enc_CertificatePolicies'/1
		  (Data)
	  %% Line 1209
	  <'PrivateKeyUsagePeriod',Data> when 'true' ->
	      apply 'enc_PrivateKeyUsagePeriod'/1
		  (Data)
	  %% Line 1210
	  <'KeyUsage',Data> when 'true' ->
	      apply 'enc_KeyUsage'/1
		  (Data)
	  %% Line 1211
	  <'SubjectKeyIdentifier',Data> when 'true' ->
	      apply 'enc_SubjectKeyIdentifier'/1
		  (Data)
	  %% Line 1212
	  <'KeyIdentifier',Data> when 'true' ->
	      apply 'enc_KeyIdentifier'/1
		  (Data)
	  %% Line 1213
	  <'AuthorityKeyIdentifier',Data> when 'true' ->
	      apply 'enc_AuthorityKeyIdentifier'/1
		  (Data)
	  %% Line 1214
	  <'EncryptedData',Data> when 'true' ->
	      apply 'enc_EncryptedData'/1
		  (Data)
	  %% Line 1215
	  <'DigestedData',Data> when 'true' ->
	      apply 'enc_DigestedData'/1
		  (Data)
	  %% Line 1216
	  <'SignedAndEnvelopedData',Data> when 'true' ->
	      apply 'enc_SignedAndEnvelopedData'/1
		  (Data)
	  %% Line 1217
	  <'EncryptedKey',Data> when 'true' ->
	      apply 'enc_EncryptedKey'/1
		  (Data)
	  %% Line 1218
	  <'RecipientInfo',Data> when 'true' ->
	      apply 'enc_RecipientInfo'/1
		  (Data)
	  %% Line 1219
	  <'EncryptedContent',Data> when 'true' ->
	      apply 'enc_EncryptedContent'/1
		  (Data)
	  %% Line 1220
	  <'EncryptedContentInfo',Data> when 'true' ->
	      apply 'enc_EncryptedContentInfo'/1
		  (Data)
	  %% Line 1221
	  <'RecipientInfos',Data> when 'true' ->
	      apply 'enc_RecipientInfos'/1
		  (Data)
	  %% Line 1222
	  <'EnvelopedData',Data> when 'true' ->
	      apply 'enc_EnvelopedData'/1
		  (Data)
	  %% Line 1223
	  <'Digest',Data> when 'true' ->
	      apply 'enc_Digest'/1
		  (Data)
	  %% Line 1224
	  <'DigestInfoPKCS-7',Data> when 'true' ->
	      apply 'enc_DigestInfoPKCS-7'/1
		  (Data)
	  %% Line 1225
	  <'EncryptedDigest',Data> when 'true' ->
	      apply 'enc_EncryptedDigest'/1
		  (Data)
	  %% Line 1226
	  <'SignerInfo',Data> when 'true' ->
	      apply 'enc_SignerInfo'/1
		  (Data)
	  %% Line 1227
	  <'DigestAlgorithmIdentifiers',Data> when 'true' ->
	      apply 'enc_DigestAlgorithmIdentifiers'/1
		  (Data)
	  %% Line 1228
	  <'SignerInfos',Data> when 'true' ->
	      apply 'enc_SignerInfos'/1
		  (Data)
	  %% Line 1229
	  <'SignedData',Data> when 'true' ->
	      apply 'enc_SignedData'/1
		  (Data)
	  %% Line 1230
	  <'Data',Data> when 'true' ->
	      apply 'enc_Data'/1
		  (Data)
	  %% Line 1231
	  <'ContentType',Data> when 'true' ->
	      apply 'enc_ContentType'/1
		  (Data)
	  %% Line 1232
	  <'ContentInfo',Data> when 'true' ->
	      apply 'enc_ContentInfo'/1
		  (Data)
	  %% Line 1233
	  <'KeyEncryptionAlgorithmIdentifier',Data> when 'true' ->
	      apply 'enc_KeyEncryptionAlgorithmIdentifier'/1
		  (Data)
	  %% Line 1234
	  <'IssuerAndSerialNumber',Data> when 'true' ->
	      apply 'enc_IssuerAndSerialNumber'/1
		  (Data)
	  %% Line 1235
	  <'ExtendedCertificatesAndCertificates',Data> when 'true' ->
	      apply 'enc_ExtendedCertificatesAndCertificates'/1
		  (Data)
	  %% Line 1236
	  <'ExtendedCertificate',Data> when 'true' ->
	      apply 'enc_ExtendedCertificate'/1
		  (Data)
	  %% Line 1237
	  <'ExtendedCertificateOrCertificate',Data> when 'true' ->
	      apply 'enc_ExtendedCertificateOrCertificate'/1
		  (Data)
	  %% Line 1238
	  <'DigestEncryptionAlgorithmIdentifier',Data> when 'true' ->
	      apply 'enc_DigestEncryptionAlgorithmIdentifier'/1
		  (Data)
	  %% Line 1239
	  <'DigestAlgorithmIdentifier',Data> when 'true' ->
	      apply 'enc_DigestAlgorithmIdentifier'/1
		  (Data)
	  %% Line 1240
	  <'ContentEncryptionAlgorithmIdentifier',Data> when 'true' ->
	      apply 'enc_ContentEncryptionAlgorithmIdentifier'/1
		  (Data)
	  %% Line 1241
	  <'CRLSequence',Data> when 'true' ->
	      apply 'enc_CRLSequence'/1
		  (Data)
	  %% Line 1242
	  <'Certificates',Data> when 'true' ->
	      apply 'enc_Certificates'/1
		  (Data)
	  %% Line 1243
	  <'CertificateRevocationLists',Data> when 'true' ->
	      apply 'enc_CertificateRevocationLists'/1
		  (Data)
	  %% Line 1244
	  <'SignerInfoAuthenticatedAttributes',Data> when 'true' ->
	      apply 'enc_SignerInfoAuthenticatedAttributes'/1
		  (Data)
	  %% Line 1245
	  <'SigningTime',Data> when 'true' ->
	      apply 'enc_SigningTime'/1
		  (Data)
	  %% Line 1246
	  <'MessageDigest',Data> when 'true' ->
	      apply 'enc_MessageDigest'/1
		  (Data)
	  %% Line 1247
	  <'CertificationRequest',Data> when 'true' ->
	      apply 'enc_CertificationRequest'/1
		  (Data)
	  %% Line 1248
	  <'CertificationRequestInfo',Data> when 'true' ->
	      apply 'enc_CertificationRequestInfo'/1
		  (Data)
	  %% Line 1249
	  <'ExtensionRequest',Data> when 'true' ->
	      apply 'enc_ExtensionRequest'/1
		  (Data)
	  %% Line 1250
	  <'TeletexDomainDefinedAttribute',Data> when 'true' ->
	      apply 'enc_TeletexDomainDefinedAttribute'/1
		  (Data)
	  %% Line 1251
	  <'TeletexDomainDefinedAttributes',Data> when 'true' ->
	      apply 'enc_TeletexDomainDefinedAttributes'/1
		  (Data)
	  %% Line 1252
	  <'TerminalType',Data> when 'true' ->
	      apply 'enc_TerminalType'/1
		  (Data)
	  %% Line 1253
	  <'PresentationAddress',Data> when 'true' ->
	      apply 'enc_PresentationAddress'/1
		  (Data)
	  %% Line 1254
	  <'ExtendedNetworkAddress',Data> when 'true' ->
	      apply 'enc_ExtendedNetworkAddress'/1
		  (Data)
	  %% Line 1255
	  <'PDSParameter',Data> when 'true' ->
	      apply 'enc_PDSParameter'/1
		  (Data)
	  %% Line 1256
	  <'LocalPostalAttributes',Data> when 'true' ->
	      apply 'enc_LocalPostalAttributes'/1
		  (Data)
	  %% Line 1257
	  <'UniquePostalName',Data> when 'true' ->
	      apply 'enc_UniquePostalName'/1
		  (Data)
	  %% Line 1258
	  <'PosteRestanteAddress',Data> when 'true' ->
	      apply 'enc_PosteRestanteAddress'/1
		  (Data)
	  %% Line 1259
	  <'PostOfficeBoxAddress',Data> when 'true' ->
	      apply 'enc_PostOfficeBoxAddress'/1
		  (Data)
	  %% Line 1260
	  <'StreetAddress',Data> when 'true' ->
	      apply 'enc_StreetAddress'/1
		  (Data)
	  %% Line 1261
	  <'UnformattedPostalAddress',Data> when 'true' ->
	      apply 'enc_UnformattedPostalAddress'/1
		  (Data)
	  %% Line 1262
	  <'ExtensionPhysicalDeliveryAddressComponents',Data> when 'true' ->
	      apply 'enc_ExtensionPhysicalDeliveryAddressComponents'/1
		  (Data)
	  %% Line 1263
	  <'PhysicalDeliveryOrganizationName',Data> when 'true' ->
	      apply 'enc_PhysicalDeliveryOrganizationName'/1
		  (Data)
	  %% Line 1264
	  <'PhysicalDeliveryPersonalName',Data> when 'true' ->
	      apply 'enc_PhysicalDeliveryPersonalName'/1
		  (Data)
	  %% Line 1265
	  <'ExtensionORAddressComponents',Data> when 'true' ->
	      apply 'enc_ExtensionORAddressComponents'/1
		  (Data)
	  %% Line 1266
	  <'PhysicalDeliveryOfficeNumber',Data> when 'true' ->
	      apply 'enc_PhysicalDeliveryOfficeNumber'/1
		  (Data)
	  %% Line 1267
	  <'PhysicalDeliveryOfficeName',Data> when 'true' ->
	      apply 'enc_PhysicalDeliveryOfficeName'/1
		  (Data)
	  %% Line 1268
	  <'PostalCode',Data> when 'true' ->
	      apply 'enc_PostalCode'/1
		  (Data)
	  %% Line 1269
	  <'PhysicalDeliveryCountryName',Data> when 'true' ->
	      apply 'enc_PhysicalDeliveryCountryName'/1
		  (Data)
	  %% Line 1270
	  <'PDSName',Data> when 'true' ->
	      apply 'enc_PDSName'/1
		  (Data)
	  %% Line 1271
	  <'TeletexOrganizationalUnitName',Data> when 'true' ->
	      apply 'enc_TeletexOrganizationalUnitName'/1
		  (Data)
	  %% Line 1272
	  <'TeletexOrganizationalUnitNames',Data> when 'true' ->
	      apply 'enc_TeletexOrganizationalUnitNames'/1
		  (Data)
	  %% Line 1273
	  <'TeletexPersonalName',Data> when 'true' ->
	      apply 'enc_TeletexPersonalName'/1
		  (Data)
	  %% Line 1274
	  <'TeletexOrganizationName',Data> when 'true' ->
	      apply 'enc_TeletexOrganizationName'/1
		  (Data)
	  %% Line 1275
	  <'TeletexCommonName',Data> when 'true' ->
	      apply 'enc_TeletexCommonName'/1
		  (Data)
	  %% Line 1276
	  <'CommonName',Data> when 'true' ->
	      apply 'enc_CommonName'/1
		  (Data)
	  %% Line 1277
	  <'ExtensionAttribute',Data> when 'true' ->
	      apply 'enc_ExtensionAttribute'/1
		  (Data)
	  %% Line 1278
	  <'ExtensionAttributes',Data> when 'true' ->
	      apply 'enc_ExtensionAttributes'/1
		  (Data)
	  %% Line 1279
	  <'BuiltInDomainDefinedAttribute',Data> when 'true' ->
	      apply 'enc_BuiltInDomainDefinedAttribute'/1
		  (Data)
	  %% Line 1280
	  <'BuiltInDomainDefinedAttributes',Data> when 'true' ->
	      apply 'enc_BuiltInDomainDefinedAttributes'/1
		  (Data)
	  %% Line 1281
	  <'OrganizationalUnitName',Data> when 'true' ->
	      apply 'enc_OrganizationalUnitName'/1
		  (Data)
	  %% Line 1282
	  <'OrganizationalUnitNames',Data> when 'true' ->
	      apply 'enc_OrganizationalUnitNames'/1
		  (Data)
	  %% Line 1283
	  <'PersonalName',Data> when 'true' ->
	      apply 'enc_PersonalName'/1
		  (Data)
	  %% Line 1284
	  <'NumericUserIdentifier',Data> when 'true' ->
	      apply 'enc_NumericUserIdentifier'/1
		  (Data)
	  %% Line 1285
	  <'OrganizationName',Data> when 'true' ->
	      apply 'enc_OrganizationName'/1
		  (Data)
	  %% Line 1286
	  <'PrivateDomainName',Data> when 'true' ->
	      apply 'enc_PrivateDomainName'/1
		  (Data)
	  %% Line 1287
	  <'TerminalIdentifier',Data> when 'true' ->
	      apply 'enc_TerminalIdentifier'/1
		  (Data)
	  %% Line 1288
	  <'X121Address',Data> when 'true' ->
	      apply 'enc_X121Address'/1
		  (Data)
	  %% Line 1289
	  <'NetworkAddress',Data> when 'true' ->
	      apply 'enc_NetworkAddress'/1
		  (Data)
	  %% Line 1290
	  <'AdministrationDomainName',Data> when 'true' ->
	      apply 'enc_AdministrationDomainName'/1
		  (Data)
	  %% Line 1291
	  <'CountryName',Data> when 'true' ->
	      apply 'enc_CountryName'/1
		  (Data)
	  %% Line 1292
	  <'BuiltInStandardAttributes',Data> when 'true' ->
	      apply 'enc_BuiltInStandardAttributes'/1
		  (Data)
	  %% Line 1293
	  <'ORAddress',Data> when 'true' ->
	      apply 'enc_ORAddress'/1
		  (Data)
	  %% Line 1294
	  <'AlgorithmIdentifier',Data> when 'true' ->
	      apply 'enc_AlgorithmIdentifier'/1
		  (Data)
	  %% Line 1295
	  <'TBSCertList',Data> when 'true' ->
	      apply 'enc_TBSCertList'/1
		  (Data)
	  %% Line 1296
	  <'CertificateList',Data> when 'true' ->
	      apply 'enc_CertificateList'/1
		  (Data)
	  %% Line 1297
	  <'Extension',Data> when 'true' ->
	      apply 'enc_Extension'/1
		  (Data)
	  %% Line 1298
	  <'Extensions',Data> when 'true' ->
	      apply 'enc_Extensions'/1
		  (Data)
	  %% Line 1299
	  <'SubjectPublicKeyInfo',Data> when 'true' ->
	      apply 'enc_SubjectPublicKeyInfo'/1
		  (Data)
	  %% Line 1300
	  <'UniqueIdentifier',Data> when 'true' ->
	      apply 'enc_UniqueIdentifier'/1
		  (Data)
	  %% Line 1301
	  <'Time',Data> when 'true' ->
	      apply 'enc_Time'/1
		  (Data)
	  %% Line 1302
	  <'Validity',Data> when 'true' ->
	      apply 'enc_Validity'/1
		  (Data)
	  %% Line 1303
	  <'CertificateSerialNumber',Data> when 'true' ->
	      apply 'enc_CertificateSerialNumber'/1
		  (Data)
	  %% Line 1304
	  <'VersionPKIX1Explicit88',Data> when 'true' ->
	      apply 'enc_VersionPKIX1Explicit88'/1
		  (Data)
	  %% Line 1305
	  <'TBSCertificate',Data> when 'true' ->
	      apply 'enc_TBSCertificate'/1
		  (Data)
	  %% Line 1306
	  <'Certificate',Data> when 'true' ->
	      apply 'enc_Certificate'/1
		  (Data)
	  %% Line 1307
	  <'DirectoryString',Data> when 'true' ->
	      apply 'enc_DirectoryString'/1
		  (Data)
	  %% Line 1308
	  <'RelativeDistinguishedName',Data> when 'true' ->
	      apply 'enc_RelativeDistinguishedName'/1
		  (Data)
	  %% Line 1309
	  <'DistinguishedName',Data> when 'true' ->
	      apply 'enc_DistinguishedName'/1
		  (Data)
	  %% Line 1310
	  <'RDNSequence',Data> when 'true' ->
	      apply 'enc_RDNSequence'/1
		  (Data)
	  %% Line 1311
	  <'Name',Data> when 'true' ->
	      apply 'enc_Name'/1
		  (Data)
	  %% Line 1312
	  <'EmailAddress',Data> when 'true' ->
	      apply 'enc_EmailAddress'/1
		  (Data)
	  %% Line 1313
	  <'DomainComponent',Data> when 'true' ->
	      apply 'enc_DomainComponent'/1
		  (Data)
	  %% Line 1314
	  <'X520Pseudonym',Data> when 'true' ->
	      apply 'enc_X520Pseudonym'/1
		  (Data)
	  %% Line 1315
	  <'X520SerialNumber',Data> when 'true' ->
	      apply 'enc_X520SerialNumber'/1
		  (Data)
	  %% Line 1316
	  <'X520countryName',Data> when 'true' ->
	      apply 'enc_X520countryName'/1
		  (Data)
	  %% Line 1317
	  <'X520dnQualifier',Data> when 'true' ->
	      apply 'enc_X520dnQualifier'/1
		  (Data)
	  %% Line 1318
	  <'X520Title',Data> when 'true' ->
	      apply 'enc_X520Title'/1
		  (Data)
	  %% Line 1319
	  <'X520OrganizationalUnitName',Data> when 'true' ->
	      apply 'enc_X520OrganizationalUnitName'/1
		  (Data)
	  %% Line 1320
	  <'X520OrganizationName',Data> when 'true' ->
	      apply 'enc_X520OrganizationName'/1
		  (Data)
	  %% Line 1321
	  <'X520StateOrProvinceName',Data> when 'true' ->
	      apply 'enc_X520StateOrProvinceName'/1
		  (Data)
	  %% Line 1322
	  <'X520LocalityName',Data> when 'true' ->
	      apply 'enc_X520LocalityName'/1
		  (Data)
	  %% Line 1323
	  <'X520CommonName',Data> when 'true' ->
	      apply 'enc_X520CommonName'/1
		  (Data)
	  %% Line 1324
	  <'X520name',Data> when 'true' ->
	      apply 'enc_X520name'/1
		  (Data)
	  %% Line 1325
	  <'AttributeTypeAndValue',Data> when 'true' ->
	      apply 'enc_AttributeTypeAndValue'/1
		  (Data)
	  %% Line 1326
	  <'AttributeValue',Data> when 'true' ->
	      apply 'enc_AttributeValue'/1
		  (Data)
	  %% Line 1327
	  <'AttributeType',Data> when 'true' ->
	      apply 'enc_AttributeType'/1
		  (Data)
	  %% Line 1328
	  <'Attribute',Data> when 'true' ->
	      apply 'enc_Attribute'/1
		  (Data)
	  %% Line 1329
	  <'Extension-Any',Data> when 'true' ->
	      apply 'enc_Extension-Any'/1
		  (Data)
	  %% Line 1330
	  <'Any',Data> when 'true' ->
	      apply 'enc_Any'/1
		  (Data)
	  %% Line 1331
	  <'Boolean',Data> when 'true' ->
	      apply 'enc_Boolean'/1
		  (Data)
	  %% Line 1332
	  <'ObjId',Data> when 'true' ->
	      apply 'enc_ObjId'/1
		  (Data)
	  %% Line 1333
	  <'OTPExtension',Data> when 'true' ->
	      apply 'enc_OTPExtension'/1
		  (Data)
	  %% Line 1334
	  <'OTPExtensions',Data> when 'true' ->
	      apply 'enc_OTPExtensions'/1
		  (Data)
	  %% Line 1335
	  <'OTPExtensionAttribute',Data> when 'true' ->
	      apply 'enc_OTPExtensionAttribute'/1
		  (Data)
	  %% Line 1336
	  <'OTPExtensionAttributes',Data> when 'true' ->
	      apply 'enc_OTPExtensionAttributes'/1
		  (Data)
	  %% Line 1337
	  <'OTPCharacteristic-two',Data> when 'true' ->
	      apply 'enc_OTPCharacteristic-two'/1
		  (Data)
	  %% Line 1338
	  <'OTPFieldID',Data> when 'true' ->
	      apply 'enc_OTPFieldID'/1
		  (Data)
	  %% Line 1339
	  <'KEA-PublicKey',Data> when 'true' ->
	      apply 'enc_KEA-PublicKey'/1
		  (Data)
	  %% Line 1340
	  <'DSAParams',Data> when 'true' ->
	      apply 'enc_DSAParams'/1
		  (Data)
	  %% Line 1341
	  <'PublicKeyAlgorithm',Data> when 'true' ->
	      apply 'enc_PublicKeyAlgorithm'/1
		  (Data)
	  %% Line 1342
	  <'SignatureAlgorithm-Any',Data> when 'true' ->
	      apply 'enc_SignatureAlgorithm-Any'/1
		  (Data)
	  %% Line 1343
	  <'SignatureAlgorithm',Data> when 'true' ->
	      apply 'enc_SignatureAlgorithm'/1
		  (Data)
	  %% Line 1344
	  <'OTPSubjectPublicKeyInfo-Any',Data> when 'true' ->
	      apply 'enc_OTPSubjectPublicKeyInfo-Any'/1
		  (Data)
	  %% Line 1345
	  <'OTPSubjectPublicKeyInfo',Data> when 'true' ->
	      apply 'enc_OTPSubjectPublicKeyInfo'/1
		  (Data)
	  %% Line 1346
	  <'OTPOLDSubjectPublicKeyInfo',Data> when 'true' ->
	      apply 'enc_OTPOLDSubjectPublicKeyInfo'/1
		  (Data)
	  %% Line 1347
	  <'OTP-emailAddress',Data> when 'true' ->
	      apply 'enc_OTP-emailAddress'/1
		  (Data)
	  %% Line 1348
	  <'OTP-X520countryname',Data> when 'true' ->
	      apply 'enc_OTP-X520countryname'/1
		  (Data)
	  %% Line 1349
	  <'OTPAttributeTypeAndValue',Data> when 'true' ->
	      apply 'enc_OTPAttributeTypeAndValue'/1
		  (Data)
	  %% Line 1350
	  <'OTPTBSCertificate',Data> when 'true' ->
	      apply 'enc_OTPTBSCertificate'/1
		  (Data)
	  %% Line 1351
	  <'OTPCertificate',Data> when 'true' ->
	      apply 'enc_OTPCertificate'/1
		  (Data)
	  %% Line 1352
	  <Type,_X_Data> when 'true' ->
	      call 'erlang':'exit'
		  ({'error',{'asn1',{'undefined_type',Type}}})
	end
'decode_disp'/2 =
    %% Line 1355
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'ECPrivateKey',Data> when 'true' ->
	      apply 'dec_ECPrivateKey'/1
		  (Data)
	  %% Line 1356
	  <'DSAPrivateKey',Data> when 'true' ->
	      apply 'dec_DSAPrivateKey'/1
		  (Data)
	  %% Line 1357
	  <'DHParameter',Data> when 'true' ->
	      apply 'dec_DHParameter'/1
		  (Data)
	  %% Line 1358
	  <'DigestInfoNull',Data> when 'true' ->
	      apply 'dec_DigestInfoNull'/1
		  (Data)
	  %% Line 1359
	  <'DigestInfoPKCS-1',Data> when 'true' ->
	      apply 'dec_DigestInfoPKCS-1'/1
		  (Data)
	  %% Line 1360
	  <'TrailerField',Data> when 'true' ->
	      apply 'dec_TrailerField'/1
		  (Data)
	  %% Line 1361
	  <'RSASSA-PSS-params',Data> when 'true' ->
	      apply 'dec_RSASSA-PSS-params'/1
		  (Data)
	  %% Line 1362
	  <'AlgorithmNull',Data> when 'true' ->
	      apply 'dec_AlgorithmNull'/1
		  (Data)
	  %% Line 1363
	  <'Algorithm',Data> when 'true' ->
	      apply 'dec_Algorithm'/1
		  (Data)
	  %% Line 1364
	  <'OtherPrimeInfo',Data> when 'true' ->
	      apply 'dec_OtherPrimeInfo'/1
		  (Data)
	  %% Line 1365
	  <'OtherPrimeInfos',Data> when 'true' ->
	      apply 'dec_OtherPrimeInfos'/1
		  (Data)
	  %% Line 1366
	  <'VersionPKCS-1',Data> when 'true' ->
	      apply 'dec_VersionPKCS-1'/1
		  (Data)
	  %% Line 1367
	  <'RSAPrivateKey',Data> when 'true' ->
	      apply 'dec_RSAPrivateKey'/1
		  (Data)
	  %% Line 1368
	  <'RSAPublicKey',Data> when 'true' ->
	      apply 'dec_RSAPublicKey'/1
		  (Data)
	  %% Line 1369
	  <'Curve',Data> when 'true' ->
	      apply 'dec_Curve'/1
		  (Data)
	  %% Line 1370
	  <'ECPVer',Data> when 'true' ->
	      apply 'dec_ECPVer'/1
		  (Data)
	  %% Line 1371
	  <'ECParameters',Data> when 'true' ->
	      apply 'dec_ECParameters'/1
		  (Data)
	  %% Line 1372
	  <'EcpkParameters',Data> when 'true' ->
	      apply 'dec_EcpkParameters'/1
		  (Data)
	  %% Line 1373
	  <'ECPoint',Data> when 'true' ->
	      apply 'dec_ECPoint'/1
		  (Data)
	  %% Line 1374
	  <'FieldElement',Data> when 'true' ->
	      apply 'dec_FieldElement'/1
		  (Data)
	  %% Line 1375
	  <'Pentanomial',Data> when 'true' ->
	      apply 'dec_Pentanomial'/1
		  (Data)
	  %% Line 1376
	  <'Trinomial',Data> when 'true' ->
	      apply 'dec_Trinomial'/1
		  (Data)
	  %% Line 1377
	  <'Characteristic-two',Data> when 'true' ->
	      apply 'dec_Characteristic-two'/1
		  (Data)
	  %% Line 1378
	  <'Prime-p',Data> when 'true' ->
	      apply 'dec_Prime-p'/1
		  (Data)
	  %% Line 1379
	  <'ECDSA-Sig-Value',Data> when 'true' ->
	      apply 'dec_ECDSA-Sig-Value'/1
		  (Data)
	  %% Line 1380
	  <'FieldID',Data> when 'true' ->
	      apply 'dec_FieldID'/1
		  (Data)
	  %% Line 1381
	  <'KEA-Parms-Id',Data> when 'true' ->
	      apply 'dec_KEA-Parms-Id'/1
		  (Data)
	  %% Line 1382
	  <'ValidationParms',Data> when 'true' ->
	      apply 'dec_ValidationParms'/1
		  (Data)
	  %% Line 1383
	  <'DomainParameters',Data> when 'true' ->
	      apply 'dec_DomainParameters'/1
		  (Data)
	  %% Line 1384
	  <'DHPublicKey',Data> when 'true' ->
	      apply 'dec_DHPublicKey'/1
		  (Data)
	  %% Line 1385
	  <'Dss-Sig-Value',Data> when 'true' ->
	      apply 'dec_Dss-Sig-Value'/1
		  (Data)
	  %% Line 1386
	  <'Dss-Parms',Data> when 'true' ->
	      apply 'dec_Dss-Parms'/1
		  (Data)
	  %% Line 1387
	  <'DSAPublicKey',Data> when 'true' ->
	      apply 'dec_DSAPublicKey'/1
		  (Data)
	  %% Line 1388
	  <'ProxyInfo',Data> when 'true' ->
	      apply 'dec_ProxyInfo'/1
		  (Data)
	  %% Line 1389
	  <'ACClearAttrs',Data> when 'true' ->
	      apply 'dec_ACClearAttrs'/1
		  (Data)
	  %% Line 1390
	  <'AttrSpec',Data> when 'true' ->
	      apply 'dec_AttrSpec'/1
		  (Data)
	  %% Line 1391
	  <'AAControls',Data> when 'true' ->
	      apply 'dec_AAControls'/1
		  (Data)
	  %% Line 1392
	  <'SecurityCategory',Data> when 'true' ->
	      apply 'dec_SecurityCategory'/1
		  (Data)
	  %% Line 1393
	  <'ClassList',Data> when 'true' ->
	      apply 'dec_ClassList'/1
		  (Data)
	  %% Line 1394
	  <'Clearance',Data> when 'true' ->
	      apply 'dec_Clearance'/1
		  (Data)
	  %% Line 1395
	  <'RoleSyntax',Data> when 'true' ->
	      apply 'dec_RoleSyntax'/1
		  (Data)
	  %% Line 1396
	  <'SvceAuthInfo',Data> when 'true' ->
	      apply 'dec_SvceAuthInfo'/1
		  (Data)
	  %% Line 1397
	  <'IetfAttrSyntax',Data> when 'true' ->
	      apply 'dec_IetfAttrSyntax'/1
		  (Data)
	  %% Line 1398
	  <'TargetCert',Data> when 'true' ->
	      apply 'dec_TargetCert'/1
		  (Data)
	  %% Line 1399
	  <'Target',Data> when 'true' ->
	      apply 'dec_Target'/1
		  (Data)
	  %% Line 1400
	  <'Targets',Data> when 'true' ->
	      apply 'dec_Targets'/1
		  (Data)
	  %% Line 1401
	  <'AttCertValidityPeriod',Data> when 'true' ->
	      apply 'dec_AttCertValidityPeriod'/1
		  (Data)
	  %% Line 1402
	  <'IssuerSerial',Data> when 'true' ->
	      apply 'dec_IssuerSerial'/1
		  (Data)
	  %% Line 1403
	  <'V2Form',Data> when 'true' ->
	      apply 'dec_V2Form'/1
		  (Data)
	  %% Line 1404
	  <'AttCertIssuer',Data> when 'true' ->
	      apply 'dec_AttCertIssuer'/1
		  (Data)
	  %% Line 1405
	  <'ObjectDigestInfo',Data> when 'true' ->
	      apply 'dec_ObjectDigestInfo'/1
		  (Data)
	  %% Line 1406
	  <'Holder',Data> when 'true' ->
	      apply 'dec_Holder'/1
		  (Data)
	  %% Line 1407
	  <'AttCertVersion',Data> when 'true' ->
	      apply 'dec_AttCertVersion'/1
		  (Data)
	  %% Line 1408
	  <'AttributeCertificateInfo',Data> when 'true' ->
	      apply 'dec_AttributeCertificateInfo'/1
		  (Data)
	  %% Line 1409
	  <'AttributeCertificate',Data> when 'true' ->
	      apply 'dec_AttributeCertificate'/1
		  (Data)
	  %% Line 1410
	  <'InvalidityDate',Data> when 'true' ->
	      apply 'dec_InvalidityDate'/1
		  (Data)
	  %% Line 1411
	  <'HoldInstructionCode',Data> when 'true' ->
	      apply 'dec_HoldInstructionCode'/1
		  (Data)
	  %% Line 1412
	  <'CertificateIssuer',Data> when 'true' ->
	      apply 'dec_CertificateIssuer'/1
		  (Data)
	  %% Line 1413
	  <'CRLReason',Data> when 'true' ->
	      apply 'dec_CRLReason'/1
		  (Data)
	  %% Line 1414
	  <'BaseCRLNumber',Data> when 'true' ->
	      apply 'dec_BaseCRLNumber'/1
		  (Data)
	  %% Line 1415
	  <'IssuingDistributionPoint',Data> when 'true' ->
	      apply 'dec_IssuingDistributionPoint'/1
		  (Data)
	  %% Line 1416
	  <'CRLNumber',Data> when 'true' ->
	      apply 'dec_CRLNumber'/1
		  (Data)
	  %% Line 1417
	  <'SubjectInfoAccessSyntax',Data> when 'true' ->
	      apply 'dec_SubjectInfoAccessSyntax'/1
		  (Data)
	  %% Line 1418
	  <'AccessDescription',Data> when 'true' ->
	      apply 'dec_AccessDescription'/1
		  (Data)
	  %% Line 1419
	  <'AuthorityInfoAccessSyntax',Data> when 'true' ->
	      apply 'dec_AuthorityInfoAccessSyntax'/1
		  (Data)
	  %% Line 1420
	  <'FreshestCRL',Data> when 'true' ->
	      apply 'dec_FreshestCRL'/1
		  (Data)
	  %% Line 1421
	  <'InhibitAnyPolicy',Data> when 'true' ->
	      apply 'dec_InhibitAnyPolicy'/1
		  (Data)
	  %% Line 1422
	  <'KeyPurposeId',Data> when 'true' ->
	      apply 'dec_KeyPurposeId'/1
		  (Data)
	  %% Line 1423
	  <'ExtKeyUsageSyntax',Data> when 'true' ->
	      apply 'dec_ExtKeyUsageSyntax'/1
		  (Data)
	  %% Line 1424
	  <'ReasonFlags',Data> when 'true' ->
	      apply 'dec_ReasonFlags'/1
		  (Data)
	  %% Line 1425
	  <'DistributionPointName',Data> when 'true' ->
	      apply 'dec_DistributionPointName'/1
		  (Data)
	  %% Line 1426
	  <'DistributionPoint',Data> when 'true' ->
	      apply 'dec_DistributionPoint'/1
		  (Data)
	  %% Line 1427
	  <'CRLDistributionPoints',Data> when 'true' ->
	      apply 'dec_CRLDistributionPoints'/1
		  (Data)
	  %% Line 1428
	  <'SkipCerts',Data> when 'true' ->
	      apply 'dec_SkipCerts'/1
		  (Data)
	  %% Line 1429
	  <'PolicyConstraints',Data> when 'true' ->
	      apply 'dec_PolicyConstraints'/1
		  (Data)
	  %% Line 1430
	  <'BaseDistance',Data> when 'true' ->
	      apply 'dec_BaseDistance'/1
		  (Data)
	  %% Line 1431
	  <'GeneralSubtree',Data> when 'true' ->
	      apply 'dec_GeneralSubtree'/1
		  (Data)
	  %% Line 1432
	  <'GeneralSubtrees',Data> when 'true' ->
	      apply 'dec_GeneralSubtrees'/1
		  (Data)
	  %% Line 1433
	  <'NameConstraints',Data> when 'true' ->
	      apply 'dec_NameConstraints'/1
		  (Data)
	  %% Line 1434
	  <'BasicConstraints',Data> when 'true' ->
	      apply 'dec_BasicConstraints'/1
		  (Data)
	  %% Line 1435
	  <'SubjectDirectoryAttributes',Data> when 'true' ->
	      apply 'dec_SubjectDirectoryAttributes'/1
		  (Data)
	  %% Line 1436
	  <'IssuerAltName',Data> when 'true' ->
	      apply 'dec_IssuerAltName'/1
		  (Data)
	  %% Line 1437
	  <'EDIPartyName',Data> when 'true' ->
	      apply 'dec_EDIPartyName'/1
		  (Data)
	  %% Line 1438
	  <'AnotherName',Data> when 'true' ->
	      apply 'dec_AnotherName'/1
		  (Data)
	  %% Line 1439
	  <'GeneralName',Data> when 'true' ->
	      apply 'dec_GeneralName'/1
		  (Data)
	  %% Line 1440
	  <'GeneralNames',Data> when 'true' ->
	      apply 'dec_GeneralNames'/1
		  (Data)
	  %% Line 1441
	  <'SubjectAltName',Data> when 'true' ->
	      apply 'dec_SubjectAltName'/1
		  (Data)
	  %% Line 1442
	  <'PolicyMappings',Data> when 'true' ->
	      apply 'dec_PolicyMappings'/1
		  (Data)
	  %% Line 1443
	  <'DisplayText',Data> when 'true' ->
	      apply 'dec_DisplayText'/1
		  (Data)
	  %% Line 1444
	  <'NoticeReference',Data> when 'true' ->
	      apply 'dec_NoticeReference'/1
		  (Data)
	  %% Line 1445
	  <'UserNotice',Data> when 'true' ->
	      apply 'dec_UserNotice'/1
		  (Data)
	  %% Line 1446
	  <'CPSuri',Data> when 'true' ->
	      apply 'dec_CPSuri'/1
		  (Data)
	  %% Line 1447
	  <'PolicyQualifierId',Data> when 'true' ->
	      apply 'dec_PolicyQualifierId'/1
		  (Data)
	  %% Line 1448
	  <'PolicyQualifierInfo',Data> when 'true' ->
	      apply 'dec_PolicyQualifierInfo'/1
		  (Data)
	  %% Line 1449
	  <'CertPolicyId',Data> when 'true' ->
	      apply 'dec_CertPolicyId'/1
		  (Data)
	  %% Line 1450
	  <'PolicyInformation',Data> when 'true' ->
	      apply 'dec_PolicyInformation'/1
		  (Data)
	  %% Line 1451
	  <'CertificatePolicies',Data> when 'true' ->
	      apply 'dec_CertificatePolicies'/1
		  (Data)
	  %% Line 1452
	  <'PrivateKeyUsagePeriod',Data> when 'true' ->
	      apply 'dec_PrivateKeyUsagePeriod'/1
		  (Data)
	  %% Line 1453
	  <'KeyUsage',Data> when 'true' ->
	      apply 'dec_KeyUsage'/1
		  (Data)
	  %% Line 1454
	  <'SubjectKeyIdentifier',Data> when 'true' ->
	      apply 'dec_SubjectKeyIdentifier'/1
		  (Data)
	  %% Line 1455
	  <'KeyIdentifier',Data> when 'true' ->
	      apply 'dec_KeyIdentifier'/1
		  (Data)
	  %% Line 1456
	  <'AuthorityKeyIdentifier',Data> when 'true' ->
	      apply 'dec_AuthorityKeyIdentifier'/1
		  (Data)
	  %% Line 1457
	  <'EncryptedData',Data> when 'true' ->
	      apply 'dec_EncryptedData'/1
		  (Data)
	  %% Line 1458
	  <'DigestedData',Data> when 'true' ->
	      apply 'dec_DigestedData'/1
		  (Data)
	  %% Line 1459
	  <'SignedAndEnvelopedData',Data> when 'true' ->
	      apply 'dec_SignedAndEnvelopedData'/1
		  (Data)
	  %% Line 1460
	  <'EncryptedKey',Data> when 'true' ->
	      apply 'dec_EncryptedKey'/1
		  (Data)
	  %% Line 1461
	  <'RecipientInfo',Data> when 'true' ->
	      apply 'dec_RecipientInfo'/1
		  (Data)
	  %% Line 1462
	  <'EncryptedContent',Data> when 'true' ->
	      apply 'dec_EncryptedContent'/1
		  (Data)
	  %% Line 1463
	  <'EncryptedContentInfo',Data> when 'true' ->
	      apply 'dec_EncryptedContentInfo'/1
		  (Data)
	  %% Line 1464
	  <'RecipientInfos',Data> when 'true' ->
	      apply 'dec_RecipientInfos'/1
		  (Data)
	  %% Line 1465
	  <'EnvelopedData',Data> when 'true' ->
	      apply 'dec_EnvelopedData'/1
		  (Data)
	  %% Line 1466
	  <'Digest',Data> when 'true' ->
	      apply 'dec_Digest'/1
		  (Data)
	  %% Line 1467
	  <'DigestInfoPKCS-7',Data> when 'true' ->
	      apply 'dec_DigestInfoPKCS-7'/1
		  (Data)
	  %% Line 1468
	  <'EncryptedDigest',Data> when 'true' ->
	      apply 'dec_EncryptedDigest'/1
		  (Data)
	  %% Line 1469
	  <'SignerInfo',Data> when 'true' ->
	      apply 'dec_SignerInfo'/1
		  (Data)
	  %% Line 1470
	  <'DigestAlgorithmIdentifiers',Data> when 'true' ->
	      apply 'dec_DigestAlgorithmIdentifiers'/1
		  (Data)
	  %% Line 1471
	  <'SignerInfos',Data> when 'true' ->
	      apply 'dec_SignerInfos'/1
		  (Data)
	  %% Line 1472
	  <'SignedData',Data> when 'true' ->
	      apply 'dec_SignedData'/1
		  (Data)
	  %% Line 1473
	  <'Data',Data> when 'true' ->
	      apply 'dec_Data'/1
		  (Data)
	  %% Line 1474
	  <'ContentType',Data> when 'true' ->
	      apply 'dec_ContentType'/1
		  (Data)
	  %% Line 1475
	  <'ContentInfo',Data> when 'true' ->
	      apply 'dec_ContentInfo'/1
		  (Data)
	  %% Line 1476
	  <'KeyEncryptionAlgorithmIdentifier',Data> when 'true' ->
	      apply 'dec_KeyEncryptionAlgorithmIdentifier'/1
		  (Data)
	  %% Line 1477
	  <'IssuerAndSerialNumber',Data> when 'true' ->
	      apply 'dec_IssuerAndSerialNumber'/1
		  (Data)
	  %% Line 1478
	  <'ExtendedCertificatesAndCertificates',Data> when 'true' ->
	      apply 'dec_ExtendedCertificatesAndCertificates'/1
		  (Data)
	  %% Line 1479
	  <'ExtendedCertificate',Data> when 'true' ->
	      apply 'dec_ExtendedCertificate'/1
		  (Data)
	  %% Line 1480
	  <'ExtendedCertificateOrCertificate',Data> when 'true' ->
	      apply 'dec_ExtendedCertificateOrCertificate'/1
		  (Data)
	  %% Line 1481
	  <'DigestEncryptionAlgorithmIdentifier',Data> when 'true' ->
	      apply 'dec_DigestEncryptionAlgorithmIdentifier'/1
		  (Data)
	  %% Line 1482
	  <'DigestAlgorithmIdentifier',Data> when 'true' ->
	      apply 'dec_DigestAlgorithmIdentifier'/1
		  (Data)
	  %% Line 1483
	  <'ContentEncryptionAlgorithmIdentifier',Data> when 'true' ->
	      apply 'dec_ContentEncryptionAlgorithmIdentifier'/1
		  (Data)
	  %% Line 1484
	  <'CRLSequence',Data> when 'true' ->
	      apply 'dec_CRLSequence'/1
		  (Data)
	  %% Line 1485
	  <'Certificates',Data> when 'true' ->
	      apply 'dec_Certificates'/1
		  (Data)
	  %% Line 1486
	  <'CertificateRevocationLists',Data> when 'true' ->
	      apply 'dec_CertificateRevocationLists'/1
		  (Data)
	  %% Line 1487
	  <'SignerInfoAuthenticatedAttributes',Data> when 'true' ->
	      apply 'dec_SignerInfoAuthenticatedAttributes'/1
		  (Data)
	  %% Line 1488
	  <'SigningTime',Data> when 'true' ->
	      apply 'dec_SigningTime'/1
		  (Data)
	  %% Line 1489
	  <'MessageDigest',Data> when 'true' ->
	      apply 'dec_MessageDigest'/1
		  (Data)
	  %% Line 1490
	  <'CertificationRequest',Data> when 'true' ->
	      apply 'dec_CertificationRequest'/1
		  (Data)
	  %% Line 1491
	  <'CertificationRequestInfo',Data> when 'true' ->
	      apply 'dec_CertificationRequestInfo'/1
		  (Data)
	  %% Line 1492
	  <'ExtensionRequest',Data> when 'true' ->
	      apply 'dec_ExtensionRequest'/1
		  (Data)
	  %% Line 1493
	  <'TeletexDomainDefinedAttribute',Data> when 'true' ->
	      apply 'dec_TeletexDomainDefinedAttribute'/1
		  (Data)
	  %% Line 1494
	  <'TeletexDomainDefinedAttributes',Data> when 'true' ->
	      apply 'dec_TeletexDomainDefinedAttributes'/1
		  (Data)
	  %% Line 1495
	  <'TerminalType',Data> when 'true' ->
	      apply 'dec_TerminalType'/1
		  (Data)
	  %% Line 1496
	  <'PresentationAddress',Data> when 'true' ->
	      apply 'dec_PresentationAddress'/1
		  (Data)
	  %% Line 1497
	  <'ExtendedNetworkAddress',Data> when 'true' ->
	      apply 'dec_ExtendedNetworkAddress'/1
		  (Data)
	  %% Line 1498
	  <'PDSParameter',Data> when 'true' ->
	      apply 'dec_PDSParameter'/1
		  (Data)
	  %% Line 1499
	  <'LocalPostalAttributes',Data> when 'true' ->
	      apply 'dec_LocalPostalAttributes'/1
		  (Data)
	  %% Line 1500
	  <'UniquePostalName',Data> when 'true' ->
	      apply 'dec_UniquePostalName'/1
		  (Data)
	  %% Line 1501
	  <'PosteRestanteAddress',Data> when 'true' ->
	      apply 'dec_PosteRestanteAddress'/1
		  (Data)
	  %% Line 1502
	  <'PostOfficeBoxAddress',Data> when 'true' ->
	      apply 'dec_PostOfficeBoxAddress'/1
		  (Data)
	  %% Line 1503
	  <'StreetAddress',Data> when 'true' ->
	      apply 'dec_StreetAddress'/1
		  (Data)
	  %% Line 1504
	  <'UnformattedPostalAddress',Data> when 'true' ->
	      apply 'dec_UnformattedPostalAddress'/1
		  (Data)
	  %% Line 1505
	  <'ExtensionPhysicalDeliveryAddressComponents',Data> when 'true' ->
	      apply 'dec_ExtensionPhysicalDeliveryAddressComponents'/1
		  (Data)
	  %% Line 1506
	  <'PhysicalDeliveryOrganizationName',Data> when 'true' ->
	      apply 'dec_PhysicalDeliveryOrganizationName'/1
		  (Data)
	  %% Line 1507
	  <'PhysicalDeliveryPersonalName',Data> when 'true' ->
	      apply 'dec_PhysicalDeliveryPersonalName'/1
		  (Data)
	  %% Line 1508
	  <'ExtensionORAddressComponents',Data> when 'true' ->
	      apply 'dec_ExtensionORAddressComponents'/1
		  (Data)
	  %% Line 1509
	  <'PhysicalDeliveryOfficeNumber',Data> when 'true' ->
	      apply 'dec_PhysicalDeliveryOfficeNumber'/1
		  (Data)
	  %% Line 1510
	  <'PhysicalDeliveryOfficeName',Data> when 'true' ->
	      apply 'dec_PhysicalDeliveryOfficeName'/1
		  (Data)
	  %% Line 1511
	  <'PostalCode',Data> when 'true' ->
	      apply 'dec_PostalCode'/1
		  (Data)
	  %% Line 1512
	  <'PhysicalDeliveryCountryName',Data> when 'true' ->
	      apply 'dec_PhysicalDeliveryCountryName'/1
		  (Data)
	  %% Line 1513
	  <'PDSName',Data> when 'true' ->
	      apply 'dec_PDSName'/1
		  (Data)
	  %% Line 1514
	  <'TeletexOrganizationalUnitName',Data> when 'true' ->
	      apply 'dec_TeletexOrganizationalUnitName'/1
		  (Data)
	  %% Line 1515
	  <'TeletexOrganizationalUnitNames',Data> when 'true' ->
	      apply 'dec_TeletexOrganizationalUnitNames'/1
		  (Data)
	  %% Line 1516
	  <'TeletexPersonalName',Data> when 'true' ->
	      apply 'dec_TeletexPersonalName'/1
		  (Data)
	  %% Line 1517
	  <'TeletexOrganizationName',Data> when 'true' ->
	      apply 'dec_TeletexOrganizationName'/1
		  (Data)
	  %% Line 1518
	  <'TeletexCommonName',Data> when 'true' ->
	      apply 'dec_TeletexCommonName'/1
		  (Data)
	  %% Line 1519
	  <'CommonName',Data> when 'true' ->
	      apply 'dec_CommonName'/1
		  (Data)
	  %% Line 1520
	  <'ExtensionAttribute',Data> when 'true' ->
	      apply 'dec_ExtensionAttribute'/1
		  (Data)
	  %% Line 1521
	  <'ExtensionAttributes',Data> when 'true' ->
	      apply 'dec_ExtensionAttributes'/1
		  (Data)
	  %% Line 1522
	  <'BuiltInDomainDefinedAttribute',Data> when 'true' ->
	      apply 'dec_BuiltInDomainDefinedAttribute'/1
		  (Data)
	  %% Line 1523
	  <'BuiltInDomainDefinedAttributes',Data> when 'true' ->
	      apply 'dec_BuiltInDomainDefinedAttributes'/1
		  (Data)
	  %% Line 1524
	  <'OrganizationalUnitName',Data> when 'true' ->
	      apply 'dec_OrganizationalUnitName'/1
		  (Data)
	  %% Line 1525
	  <'OrganizationalUnitNames',Data> when 'true' ->
	      apply 'dec_OrganizationalUnitNames'/1
		  (Data)
	  %% Line 1526
	  <'PersonalName',Data> when 'true' ->
	      apply 'dec_PersonalName'/1
		  (Data)
	  %% Line 1527
	  <'NumericUserIdentifier',Data> when 'true' ->
	      apply 'dec_NumericUserIdentifier'/1
		  (Data)
	  %% Line 1528
	  <'OrganizationName',Data> when 'true' ->
	      apply 'dec_OrganizationName'/1
		  (Data)
	  %% Line 1529
	  <'PrivateDomainName',Data> when 'true' ->
	      apply 'dec_PrivateDomainName'/1
		  (Data)
	  %% Line 1530
	  <'TerminalIdentifier',Data> when 'true' ->
	      apply 'dec_TerminalIdentifier'/1
		  (Data)
	  %% Line 1531
	  <'X121Address',Data> when 'true' ->
	      apply 'dec_X121Address'/1
		  (Data)
	  %% Line 1532
	  <'NetworkAddress',Data> when 'true' ->
	      apply 'dec_NetworkAddress'/1
		  (Data)
	  %% Line 1533
	  <'AdministrationDomainName',Data> when 'true' ->
	      apply 'dec_AdministrationDomainName'/1
		  (Data)
	  %% Line 1534
	  <'CountryName',Data> when 'true' ->
	      apply 'dec_CountryName'/1
		  (Data)
	  %% Line 1535
	  <'BuiltInStandardAttributes',Data> when 'true' ->
	      apply 'dec_BuiltInStandardAttributes'/1
		  (Data)
	  %% Line 1536
	  <'ORAddress',Data> when 'true' ->
	      apply 'dec_ORAddress'/1
		  (Data)
	  %% Line 1537
	  <'AlgorithmIdentifier',Data> when 'true' ->
	      apply 'dec_AlgorithmIdentifier'/1
		  (Data)
	  %% Line 1538
	  <'TBSCertList',Data> when 'true' ->
	      apply 'dec_TBSCertList'/1
		  (Data)
	  %% Line 1539
	  <'CertificateList',Data> when 'true' ->
	      apply 'dec_CertificateList'/1
		  (Data)
	  %% Line 1540
	  <'Extension',Data> when 'true' ->
	      apply 'dec_Extension'/1
		  (Data)
	  %% Line 1541
	  <'Extensions',Data> when 'true' ->
	      apply 'dec_Extensions'/1
		  (Data)
	  %% Line 1542
	  <'SubjectPublicKeyInfo',Data> when 'true' ->
	      apply 'dec_SubjectPublicKeyInfo'/1
		  (Data)
	  %% Line 1543
	  <'UniqueIdentifier',Data> when 'true' ->
	      apply 'dec_UniqueIdentifier'/1
		  (Data)
	  %% Line 1544
	  <'Time',Data> when 'true' ->
	      apply 'dec_Time'/1
		  (Data)
	  %% Line 1545
	  <'Validity',Data> when 'true' ->
	      apply 'dec_Validity'/1
		  (Data)
	  %% Line 1546
	  <'CertificateSerialNumber',Data> when 'true' ->
	      apply 'dec_CertificateSerialNumber'/1
		  (Data)
	  %% Line 1547
	  <'VersionPKIX1Explicit88',Data> when 'true' ->
	      apply 'dec_VersionPKIX1Explicit88'/1
		  (Data)
	  %% Line 1548
	  <'TBSCertificate',Data> when 'true' ->
	      apply 'dec_TBSCertificate'/1
		  (Data)
	  %% Line 1549
	  <'Certificate',Data> when 'true' ->
	      apply 'dec_Certificate'/1
		  (Data)
	  %% Line 1550
	  <'DirectoryString',Data> when 'true' ->
	      apply 'dec_DirectoryString'/1
		  (Data)
	  %% Line 1551
	  <'RelativeDistinguishedName',Data> when 'true' ->
	      apply 'dec_RelativeDistinguishedName'/1
		  (Data)
	  %% Line 1552
	  <'DistinguishedName',Data> when 'true' ->
	      apply 'dec_DistinguishedName'/1
		  (Data)
	  %% Line 1553
	  <'RDNSequence',Data> when 'true' ->
	      apply 'dec_RDNSequence'/1
		  (Data)
	  %% Line 1554
	  <'Name',Data> when 'true' ->
	      apply 'dec_Name'/1
		  (Data)
	  %% Line 1555
	  <'EmailAddress',Data> when 'true' ->
	      apply 'dec_EmailAddress'/1
		  (Data)
	  %% Line 1556
	  <'DomainComponent',Data> when 'true' ->
	      apply 'dec_DomainComponent'/1
		  (Data)
	  %% Line 1557
	  <'X520Pseudonym',Data> when 'true' ->
	      apply 'dec_X520Pseudonym'/1
		  (Data)
	  %% Line 1558
	  <'X520SerialNumber',Data> when 'true' ->
	      apply 'dec_X520SerialNumber'/1
		  (Data)
	  %% Line 1559
	  <'X520countryName',Data> when 'true' ->
	      apply 'dec_X520countryName'/1
		  (Data)
	  %% Line 1560
	  <'X520dnQualifier',Data> when 'true' ->
	      apply 'dec_X520dnQualifier'/1
		  (Data)
	  %% Line 1561
	  <'X520Title',Data> when 'true' ->
	      apply 'dec_X520Title'/1
		  (Data)
	  %% Line 1562
	  <'X520OrganizationalUnitName',Data> when 'true' ->
	      apply 'dec_X520OrganizationalUnitName'/1
		  (Data)
	  %% Line 1563
	  <'X520OrganizationName',Data> when 'true' ->
	      apply 'dec_X520OrganizationName'/1
		  (Data)
	  %% Line 1564
	  <'X520StateOrProvinceName',Data> when 'true' ->
	      apply 'dec_X520StateOrProvinceName'/1
		  (Data)
	  %% Line 1565
	  <'X520LocalityName',Data> when 'true' ->
	      apply 'dec_X520LocalityName'/1
		  (Data)
	  %% Line 1566
	  <'X520CommonName',Data> when 'true' ->
	      apply 'dec_X520CommonName'/1
		  (Data)
	  %% Line 1567
	  <'X520name',Data> when 'true' ->
	      apply 'dec_X520name'/1
		  (Data)
	  %% Line 1568
	  <'AttributeTypeAndValue',Data> when 'true' ->
	      apply 'dec_AttributeTypeAndValue'/1
		  (Data)
	  %% Line 1569
	  <'AttributeValue',Data> when 'true' ->
	      apply 'dec_AttributeValue'/1
		  (Data)
	  %% Line 1570
	  <'AttributeType',Data> when 'true' ->
	      apply 'dec_AttributeType'/1
		  (Data)
	  %% Line 1571
	  <'Attribute',Data> when 'true' ->
	      apply 'dec_Attribute'/1
		  (Data)
	  %% Line 1572
	  <'Extension-Any',Data> when 'true' ->
	      apply 'dec_Extension-Any'/1
		  (Data)
	  %% Line 1573
	  <'Any',Data> when 'true' ->
	      apply 'dec_Any'/1
		  (Data)
	  %% Line 1574
	  <'Boolean',Data> when 'true' ->
	      apply 'dec_Boolean'/1
		  (Data)
	  %% Line 1575
	  <'ObjId',Data> when 'true' ->
	      apply 'dec_ObjId'/1
		  (Data)
	  %% Line 1576
	  <'OTPExtension',Data> when 'true' ->
	      apply 'dec_OTPExtension'/1
		  (Data)
	  %% Line 1577
	  <'OTPExtensions',Data> when 'true' ->
	      apply 'dec_OTPExtensions'/1
		  (Data)
	  %% Line 1578
	  <'OTPExtensionAttribute',Data> when 'true' ->
	      apply 'dec_OTPExtensionAttribute'/1
		  (Data)
	  %% Line 1579
	  <'OTPExtensionAttributes',Data> when 'true' ->
	      apply 'dec_OTPExtensionAttributes'/1
		  (Data)
	  %% Line 1580
	  <'OTPCharacteristic-two',Data> when 'true' ->
	      apply 'dec_OTPCharacteristic-two'/1
		  (Data)
	  %% Line 1581
	  <'OTPFieldID',Data> when 'true' ->
	      apply 'dec_OTPFieldID'/1
		  (Data)
	  %% Line 1582
	  <'KEA-PublicKey',Data> when 'true' ->
	      apply 'dec_KEA-PublicKey'/1
		  (Data)
	  %% Line 1583
	  <'DSAParams',Data> when 'true' ->
	      apply 'dec_DSAParams'/1
		  (Data)
	  %% Line 1584
	  <'PublicKeyAlgorithm',Data> when 'true' ->
	      apply 'dec_PublicKeyAlgorithm'/1
		  (Data)
	  %% Line 1585
	  <'SignatureAlgorithm-Any',Data> when 'true' ->
	      apply 'dec_SignatureAlgorithm-Any'/1
		  (Data)
	  %% Line 1586
	  <'SignatureAlgorithm',Data> when 'true' ->
	      apply 'dec_SignatureAlgorithm'/1
		  (Data)
	  %% Line 1587
	  <'OTPSubjectPublicKeyInfo-Any',Data> when 'true' ->
	      apply 'dec_OTPSubjectPublicKeyInfo-Any'/1
		  (Data)
	  %% Line 1588
	  <'OTPSubjectPublicKeyInfo',Data> when 'true' ->
	      apply 'dec_OTPSubjectPublicKeyInfo'/1
		  (Data)
	  %% Line 1589
	  <'OTPOLDSubjectPublicKeyInfo',Data> when 'true' ->
	      apply 'dec_OTPOLDSubjectPublicKeyInfo'/1
		  (Data)
	  %% Line 1590
	  <'OTP-emailAddress',Data> when 'true' ->
	      apply 'dec_OTP-emailAddress'/1
		  (Data)
	  %% Line 1591
	  <'OTP-X520countryname',Data> when 'true' ->
	      apply 'dec_OTP-X520countryname'/1
		  (Data)
	  %% Line 1592
	  <'OTPAttributeTypeAndValue',Data> when 'true' ->
	      apply 'dec_OTPAttributeTypeAndValue'/1
		  (Data)
	  %% Line 1593
	  <'OTPTBSCertificate',Data> when 'true' ->
	      apply 'dec_OTPTBSCertificate'/1
		  (Data)
	  %% Line 1594
	  <'OTPCertificate',Data> when 'true' ->
	      apply 'dec_OTPCertificate'/1
		  (Data)
	  %% Line 1595
	  <Type,_X_Data> when 'true' ->
	      call 'erlang':'exit'
		  ({'error',{'asn1',{'undefined_type',Type}}})
	end
'decode_partial_inc_disp'/2 =
    %% Line 1598
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'Certificate',Data> when 'true' ->
	      %% Line 1599
	      apply 'dec-inc-Certificate'/1
		  (Data)
	  %% Line 1600
	  <'CertificateList',Data> when 'true' ->
	      %% Line 1601
	      apply 'dec-inc-CertificateList'/1
		  (Data)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'decode_partial_inc_disp',2}}] )
	    -| ['compiler_generated'] )
	end
'info'/0 =
    %% Line 1604
    fun () ->
	%% Line 1605
	case call 'OTP-PUB-KEY':'module_info'
		 ('attributes') of
	  %% Line 1606
	  <Attributes>
	      when call 'erlang':'is_list'
		    (Attributes) ->
	      %% Line 1607
	      case call 'lists':'keyfind'
		       ('asn1_info', 1, Attributes) of
		%% Line 1608
		<{_cor2,Info}>
		    when call 'erlang':'is_list'
			  (Info) ->
		    %% Line 1609
		    Info
		%% Line 1610
		<_cor3> when 'true' ->
		    %% Line 1611
		    []
	      end
	  %% Line 1613
	  <_cor4> when 'true' ->
	      %% Line 1614
	      []
	end
'enc_ECPrivateKey'/1 =
    %% Line 1621
    fun (_cor0) ->
	%% Line 1622
	apply 'enc_ECPrivateKey'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_ECPrivateKey'/2 =
    %% Line 1624
    fun (_cor1,_cor0) ->
	%% Line 1625
	case _cor1 of
	  <{_cor17,Cindex1,Cindex2,Cindex3,Cindex4}> when 'true' ->
	      %% Line 1630
	      case apply 'encode_integer'/2
		       (Cindex1, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 1635
		    case apply 'encode_restricted_string'/2
			     (Cindex2, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <_cor6> =
			      %% Line 1640
			      case Cindex3 of
				%% Line 1641
				<'asn1_NOVALUE'> when 'true' ->
				    {#{}#,0}
				%% Line 1642
				<_cor18> when 'true' ->
				    %% Line 1643
				    apply 'enc_EcpkParameters'/2
					(Cindex3, [#{#<160>(8,1,'integer',['unsigned'|['big']])}#])
			      end
			  in  %% Line 1640
			      case _cor6 of
				<{EncBytes3,EncLen3}> when 'true' ->
				    let <_cor9> =
					%% Line 1649
					case Cindex4 of
					  %% Line 1650
					  <'asn1_NOVALUE'> when 'true' ->
					      {#{}#,0}
					  %% Line 1651
					  <_cor19> when 'true' ->
					      %% Line 1652
					      apply 'encode_bit_string'/4
						  ([], Cindex4, [], [#{#<3>(8,1,'integer',['unsigned'|['big']])}#|[#{#<161>(8,1,'integer',['unsigned'|['big']])}#]])
					end
				    in  %% Line 1649
					case _cor9 of
					  <{EncBytes4,EncLen4}> when 'true' ->
					      let <BytesSoFar> =
						  %% Line 1655
						  [EncBytes1|[EncBytes2|[EncBytes3|[EncBytes4|[]]]]]
					      in  let <_cor12> =
						      %% Line 1656
						      call 'erlang':'+'
							  (EncLen1, EncLen2)
						  in  let <_cor13> =
							  %% Line 1656
							  call 'erlang':'+'
							      (_cor12, EncLen3)
						      in  let <LenSoFar> =
							      %% Line 1656
							      call 'erlang':'+'
								  (_cor13, EncLen4)
							  in  %% Line 1657
							      apply 'encode_tags'/3
								  (_cor0, BytesSoFar, LenSoFar)
					  ( <_cor10> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor10})
					    -| ['compiler_generated'] )
					end
				( <_cor7> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor7})
				  -| ['compiler_generated'] )
			      end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_ECPrivateKey'/1 =
    %% Line 1660
    fun (_cor0) ->
	%% Line 1661
	apply 'dec_ECPrivateKey'/2
	    (_cor0, [16])
'dec_ECPrivateKey'/2 =
    %% Line 1663
    fun (_cor1,_cor0) ->
	%% Line 1672
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 1673
		  apply 'decode_integer'/2
		      (V1, [2])
	      in  %% Line 1678
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <_cor6> =
			    %% Line 1680
			    apply 'decode_restricted_string'/2
				(V2, [4])
			in  let <Term2> =
				%% Line 1680
				call 'erlang':'binary_to_list'
				    (_cor6)
			    in  let <Term3,Tlv4> =
				    %% Line 1687
				    case Tlv3 of
				      %% Line 1688
				      <[{131072,V3}|TempTlv4]> when 'true' ->
					  let <_cor8> =
					      %% Line 1689
					      apply 'dec_EcpkParameters'/2
						  (V3, [])
					  in  <_cor8,%% Line 1689
						     TempTlv4>
				      %% Line 1690
				      <_cor19> when 'true' ->
					  %% Line 1691
					  <'asn1_NOVALUE',Tlv3>
				    end
				in  let <Term4,Tlv5> =
					%% Line 1697
					case Tlv4 of
					  %% Line 1698
					  <[{131073,V4}|TempTlv5]> when 'true' ->
					      let <_cor12> =
						  %% Line 1699
						  apply 'decode_compact_bit_string'/2
						      (V4, [3])
					      in  <_cor12,%% Line 1699
							  TempTlv5>
					  %% Line 1700
					  <_cor20> when 'true' ->
					      %% Line 1701
					      <'asn1_NOVALUE',Tlv4>
					end
				    in  do  %% Line 1704
					    case Tlv5 of
					      %% Line 1705
					      <[]> when 'true' ->
						  'ok'
					      %% Line 1705
					      <_cor21> when 'true' ->
						  call 'erlang':'exit'
						      ({'error',{'asn1',{'unexpected',Tlv5}}})
					    end
					    %% Line 1707
					    {'ECPrivateKey',Term1,Term2,Term3,Term4}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_DSAPrivateKey'/1 =
    %% Line 1714
    fun (_cor0) ->
	%% Line 1715
	apply 'enc_DSAPrivateKey'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_DSAPrivateKey'/2 =
    %% Line 1717
    fun (_cor1,_cor0) ->
	%% Line 1718
	case _cor1 of
	  <{_cor17,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6}> when 'true' ->
	      %% Line 1723
	      case apply 'encode_integer'/2
		       (Cindex1, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 1728
		    case apply 'encode_integer'/2
			     (Cindex2, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  %% Line 1733
			  case apply 'encode_integer'/2
				   (Cindex3, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
			    <{EncBytes3,EncLen3}> when 'true' ->
				%% Line 1738
				case apply 'encode_integer'/2
					 (Cindex4, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
				  <{EncBytes4,EncLen4}> when 'true' ->
				      %% Line 1743
				      case apply 'encode_integer'/2
					       (Cindex5, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
					<{EncBytes5,EncLen5}> when 'true' ->
					    %% Line 1748
					    case apply 'encode_integer'/2
						     (Cindex6, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
					      <{EncBytes6,EncLen6}> when 'true' ->
						  let <BytesSoFar> =
						      %% Line 1750
						      [EncBytes1|[EncBytes2|[EncBytes3|[EncBytes4|[EncBytes5|[EncBytes6|[]]]]]]]
						  in  let <_cor10> =
							  %% Line 1751
							  call 'erlang':'+'
							      (EncLen1, EncLen2)
						      in  let <_cor11> =
							      %% Line 1751
							      call 'erlang':'+'
								  (_cor10, EncLen3)
							  in  let <_cor12> =
								  %% Line 1751
								  call 'erlang':'+'
								      (_cor11, EncLen4)
							      in  let <_cor13> =
								      %% Line 1751
								      call 'erlang':'+'
									  (_cor12, EncLen5)
								  in  let <LenSoFar> =
									  %% Line 1751
									  call 'erlang':'+'
									      (_cor13, EncLen6)
								      in  %% Line 1752
									  apply 'encode_tags'/3
									      (_cor0, BytesSoFar, LenSoFar)
					      ( <_cor8> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor8})
						-| ['compiler_generated'] )
					    end
					( <_cor7> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor7})
					  -| ['compiler_generated'] )
				      end
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor6})
				    -| ['compiler_generated'] )
				end
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_DSAPrivateKey'/1 =
    %% Line 1755
    fun (_cor0) ->
	%% Line 1756
	apply 'dec_DSAPrivateKey'/2
	    (_cor0, [16])
'dec_DSAPrivateKey'/2 =
    %% Line 1758
    fun (_cor1,_cor0) ->
	%% Line 1767
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 1768
		  apply 'decode_integer'/2
		      (V1, [2])
	      in  %% Line 1773
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 1774
			    apply 'decode_integer'/2
				(V2, [2])
			in  %% Line 1779
			    case Tlv3 of
			      <[V3|Tlv4]> when 'true' ->
				  let <Term3> =
				      %% Line 1780
				      apply 'decode_integer'/2
					  (V3, [2])
				  in  %% Line 1785
				      case Tlv4 of
					<[V4|Tlv5]> when 'true' ->
					    let <Term4> =
						%% Line 1786
						apply 'decode_integer'/2
						    (V4, [2])
					    in  %% Line 1791
						case Tlv5 of
						  <[V5|Tlv6]> when 'true' ->
						      let <Term5> =
							  %% Line 1792
							  apply 'decode_integer'/2
							      (V5, [2])
						      in  %% Line 1797
							  case Tlv6 of
							    <[V6|Tlv7]> when 'true' ->
								let <Term6> =
								    %% Line 1798
								    apply 'decode_integer'/2
									(V6, [2])
								in  do  %% Line 1800
									case Tlv7 of
									  %% Line 1801
									  <[]> when 'true' ->
									      'ok'
									  %% Line 1801
									  <_cor18> when 'true' ->
									      call 'erlang':'exit'
										  ({'error',{'asn1',{'unexpected',Tlv7}}})
									end
									%% Line 1803
									{'DSAPrivateKey',Term1,Term2,Term3,Term4,Term5,Term6}
							    ( <_cor13> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_cor13})
							      -| ['compiler_generated'] )
							  end
						  ( <_cor11> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor11})
						    -| ['compiler_generated'] )
						end
					( <_cor9> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor9})
					  -| ['compiler_generated'] )
				      end
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_DHParameter'/1 =
    %% Line 1810
    fun (_cor0) ->
	%% Line 1811
	apply 'enc_DHParameter'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_DHParameter'/2 =
    %% Line 1813
    fun (_cor1,_cor0) ->
	%% Line 1814
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2,Cindex3}> when 'true' ->
	      %% Line 1819
	      case apply 'encode_integer'/2
		       (Cindex1, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 1824
		    case apply 'encode_integer'/2
			     (Cindex2, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <_cor6> =
			      %% Line 1829
			      case Cindex3 of
				%% Line 1830
				<'asn1_NOVALUE'> when 'true' ->
				    {#{}#,0}
				%% Line 1831
				<_cor14> when 'true' ->
				    %% Line 1832
				    apply 'encode_integer'/2
					(Cindex3, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
			      end
			  in  %% Line 1829
			      case _cor6 of
				<{EncBytes3,EncLen3}> when 'true' ->
				    let <BytesSoFar> =
					%% Line 1835
					[EncBytes1|[EncBytes2|[EncBytes3|[]]]]
				    in  let <_cor9> =
					    %% Line 1836
					    call 'erlang':'+'
						(EncLen1, EncLen2)
					in  let <LenSoFar> =
						%% Line 1836
						call 'erlang':'+'
						    (_cor9, EncLen3)
					    in  %% Line 1837
						apply 'encode_tags'/3
						    (_cor0, BytesSoFar, LenSoFar)
				( <_cor7> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor7})
				  -| ['compiler_generated'] )
			      end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_DHParameter'/1 =
    %% Line 1840
    fun (_cor0) ->
	%% Line 1841
	apply 'dec_DHParameter'/2
	    (_cor0, [16])
'dec_DHParameter'/2 =
    %% Line 1843
    fun (_cor1,_cor0) ->
	%% Line 1852
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 1853
		  apply 'decode_integer'/2
		      (V1, [2])
	      in  %% Line 1858
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 1859
			    apply 'decode_integer'/2
				(V2, [2])
			in  let <Term3,Tlv4> =
				%% Line 1864
				case Tlv3 of
				  %% Line 1865
				  <[{2,V3}|TempTlv4]> when 'true' ->
				      let <_cor7> =
					  %% Line 1866
					  apply 'decode_integer'/2
					      (V3, [])
				      in  <_cor7,%% Line 1866
						 TempTlv4>
				  %% Line 1867
				  <_cor14> when 'true' ->
				      %% Line 1868
				      <'asn1_NOVALUE',Tlv3>
				end
			    in  do  %% Line 1871
				    case Tlv4 of
				      %% Line 1872
				      <[]> when 'true' ->
					  'ok'
				      %% Line 1872
				      <_cor15> when 'true' ->
					  call 'erlang':'exit'
					      ({'error',{'asn1',{'unexpected',Tlv4}}})
				    end
				    %% Line 1874
				    {'DHParameter',Term1,Term2,Term3}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_DigestInfoNull'/1 =
    %% Line 1881
    fun (_cor0) ->
	%% Line 1882
	apply 'enc_DigestInfoNull'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_DigestInfoNull'/2 =
    %% Line 1884
    fun (_cor1,_cor0) ->
	%% Line 1885
	case _cor1 of
	  <{_cor9,Cindex1,Cindex2}> when 'true' ->
	      %% Line 1890
	      case apply 'enc_AlgorithmNull'/2
		       (Cindex1, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 1895
		    case apply 'encode_restricted_string'/2
			     (Cindex2, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <BytesSoFar> =
			      %% Line 1897
			      [EncBytes1|[EncBytes2|[]]]
			  in  let <LenSoFar> =
				  %% Line 1898
				  call 'erlang':'+'
				      (EncLen1, EncLen2)
			      in  %% Line 1899
				  apply 'encode_tags'/3
				      (_cor0, BytesSoFar, LenSoFar)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_DigestInfoNull'/1 =
    %% Line 1902
    fun (_cor0) ->
	%% Line 1903
	apply 'dec_DigestInfoNull'/2
	    (_cor0, [16])
'dec_DigestInfoNull'/2 =
    %% Line 1905
    fun (_cor1,_cor0) ->
	%% Line 1914
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 1915
		  apply 'dec_AlgorithmNull'/2
		      (V1, [16])
	      in  %% Line 1920
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <_cor6> =
			    %% Line 1922
			    apply 'decode_restricted_string'/2
				(V2, [4])
			in  let <Term2> =
				%% Line 1922
				call 'erlang':'binary_to_list'
				    (_cor6)
			    in  do  %% Line 1926
				    case Tlv3 of
				      %% Line 1927
				      <[]> when 'true' ->
					  'ok'
				      %% Line 1927
				      <_cor11> when 'true' ->
					  call 'erlang':'exit'
					      ({'error',{'asn1',{'unexpected',Tlv3}}})
				    end
				    %% Line 1929
				    {'DigestInfoNull',Term1,Term2}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_DigestInfoPKCS-1'/1 =
    %% Line 1936
    fun (_cor0) ->
	%% Line 1937
	apply 'enc_DigestInfoPKCS-1'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_DigestInfoPKCS-1'/2 =
    %% Line 1939
    fun (_cor1,_cor0) ->
	%% Line 1940
	case _cor1 of
	  <{_cor9,Cindex1,Cindex2}> when 'true' ->
	      %% Line 1945
	      case apply 'enc_Algorithm'/2
		       (Cindex1, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 1950
		    case apply 'encode_restricted_string'/2
			     (Cindex2, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <BytesSoFar> =
			      %% Line 1952
			      [EncBytes1|[EncBytes2|[]]]
			  in  let <LenSoFar> =
				  %% Line 1953
				  call 'erlang':'+'
				      (EncLen1, EncLen2)
			      in  %% Line 1954
				  apply 'encode_tags'/3
				      (_cor0, BytesSoFar, LenSoFar)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_DigestInfoPKCS-1'/1 =
    %% Line 1957
    fun (_cor0) ->
	%% Line 1958
	apply 'dec_DigestInfoPKCS-1'/2
	    (_cor0, [16])
'dec_DigestInfoPKCS-1'/2 =
    %% Line 1960
    fun (_cor1,_cor0) ->
	%% Line 1969
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 1970
		  apply 'dec_Algorithm'/2
		      (V1, [16])
	      in  %% Line 1975
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <_cor6> =
			    %% Line 1977
			    apply 'decode_restricted_string'/2
				(V2, [4])
			in  let <Term2> =
				%% Line 1977
				call 'erlang':'binary_to_list'
				    (_cor6)
			    in  do  %% Line 1981
				    case Tlv3 of
				      %% Line 1982
				      <[]> when 'true' ->
					  'ok'
				      %% Line 1982
				      <_cor11> when 'true' ->
					  call 'erlang':'exit'
					      ({'error',{'asn1',{'unexpected',Tlv3}}})
				    end
				    %% Line 1984
				    {'DigestInfoPKCS-1',Term1,Term2}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_TrailerField'/1 =
    %% Line 1991
    fun (_cor0) ->
	%% Line 1992
	apply 'enc_TrailerField'/2
	    (_cor0, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
'enc_TrailerField'/2 =
    %% Line 1994
    fun (_cor1,_cor0) ->
	%% Line 1995
	apply 'encode_integer'/3
	    (_cor1, [{'trailerFieldBC',1}], _cor0)
'dec_TrailerField'/1 =
    %% Line 1998
    fun (_cor0) ->
	%% Line 1999
	apply 'dec_TrailerField'/2
	    (_cor0, [2])
'dec_TrailerField'/2 =
    %% Line 2001
    fun (_cor1,_cor0) ->
	let <Val1> =
	    %% Line 2003
	    apply 'decode_integer'/2
		(_cor1, _cor0)
	in  %% Line 2004
	    apply 'number2name'/2
		(Val1, [{'trailerFieldBC',1}])
'enc_RSASSA-PSS-params'/1 =
    %% Line 2013
    fun (_cor0) ->
	%% Line 2014
	apply 'enc_RSASSA-PSS-params'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_RSASSA-PSS-params'/2 =
    %% Line 2016
    fun (_cor1,_cor0) ->
	%% Line 2017
	case _cor1 of
	  <{_cor17,Cindex1,Cindex2,Cindex3,Cindex4}> when 'true' ->
	      %% Line 2022
	      case apply 'enc_Algorithm'/2
		       (Cindex1, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#|[#{#<160>(8,1,'integer',['unsigned'|['big']])}#]]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 2027
		    case apply 'enc_Algorithm'/2
			     (Cindex2, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#|[#{#<161>(8,1,'integer',['unsigned'|['big']])}#]]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <_cor6> =
			      %% Line 2032
			      case apply 'is_default_1'/1
				       (Cindex3) of
				%% Line 2033
				<'true'> when 'true' ->
				    {[],0}
				%% Line 2034
				<'false'> when 'true' ->
				    %% Line 2035
				    apply 'encode_integer'/2
					(Cindex3, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#|[#{#<162>(8,1,'integer',['unsigned'|['big']])}#]])
				( <_cor5> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor5})
				  -| ['compiler_generated'] )
			      end
			  in  %% Line 2032
			      case _cor6 of
				<{EncBytes3,EncLen3}> when 'true' ->
				    let <_cor9> =
					%% Line 2041
					case apply 'is_default_2'/1
						 (Cindex4) of
					  %% Line 2042
					  <'true'> when 'true' ->
					      {[],0}
					  %% Line 2043
					  <'false'> when 'true' ->
					      %% Line 2044
					      apply 'encode_integer'/3
						  (Cindex4, [{'trailerFieldBC',1}], [#{#<2>(8,1,'integer',['unsigned'|['big']])}#|[#{#<163>(8,1,'integer',['unsigned'|['big']])}#]])
					  ( <_cor8> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor8})
					    -| ['compiler_generated'] )
					end
				    in  %% Line 2041
					case _cor9 of
					  <{EncBytes4,EncLen4}> when 'true' ->
					      let <BytesSoFar> =
						  %% Line 2047
						  [EncBytes1|[EncBytes2|[EncBytes3|[EncBytes4|[]]]]]
					      in  let <_cor12> =
						      %% Line 2048
						      call 'erlang':'+'
							  (EncLen1, EncLen2)
						  in  let <_cor13> =
							  %% Line 2048
							  call 'erlang':'+'
							      (_cor12, EncLen3)
						      in  let <LenSoFar> =
							      %% Line 2048
							      call 'erlang':'+'
								  (_cor13, EncLen4)
							  in  %% Line 2049
							      apply 'encode_tags'/3
								  (_cor0, BytesSoFar, LenSoFar)
					  ( <_cor10> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor10})
					    -| ['compiler_generated'] )
					end
				( <_cor7> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor7})
				  -| ['compiler_generated'] )
			      end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_RSASSA-PSS-params'/1 =
    %% Line 2052
    fun (_cor0) ->
	%% Line 2053
	apply 'dec_RSASSA-PSS-params'/2
	    (_cor0, [16])
'dec_RSASSA-PSS-params'/2 =
    %% Line 2055
    fun (_cor1,_cor0) ->
	%% Line 2064
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 2065
		  apply 'dec_Algorithm'/2
		      (V1, [131072|[16]])
	      in  %% Line 2070
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 2071
			    apply 'dec_Algorithm'/2
				(V2, [131073|[16]])
			in  let <Term3,Tlv4> =
				%% Line 2076
				case Tlv3 of
				  %% Line 2077
				  <[{131074,V3}|TempTlv4]> when 'true' ->
				      let <_cor7> =
					  %% Line 2078
					  apply 'decode_integer'/2
					      (V3, [2])
				      in  <_cor7,%% Line 2078
						 TempTlv4>
				  %% Line 2079
				  <_cor19> when 'true' ->
				      %% Line 2080
				      <20,Tlv3>
				end
			    in  let <Term4,Tlv5> =
				    %% Line 2086
				    case Tlv4 of
				      %% Line 2087
				      <[{131075,V4}|TempTlv5]> when 'true' ->
					  let <Val1> =
					      %% Line 2089
					      apply 'decode_integer'/2
						  (V4, [2])
					  in  let <_cor12> =
						  %% Line 2090
						  apply 'number2name'/2
						      (Val1, [{'trailerFieldBC',1}])
					      in  <_cor12,%% Line 2092
							  TempTlv5>
				      %% Line 2093
				      <_cor20> when 'true' ->
					  %% Line 2094
					  <1,Tlv4>
				    end
				in  do  %% Line 2097
					case Tlv5 of
					  %% Line 2098
					  <[]> when 'true' ->
					      'ok'
					  %% Line 2098
					  <_cor21> when 'true' ->
					      call 'erlang':'exit'
						  ({'error',{'asn1',{'unexpected',Tlv5}}})
					end
					%% Line 2100
					{'RSASSA-PSS-params',Term1,Term2,Term3,Term4}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_AlgorithmNull'/1 =
    %% Line 2107
    fun (_cor0) ->
	%% Line 2108
	apply 'enc_AlgorithmNull'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_AlgorithmNull'/2 =
    %% Line 2110
    fun (_cor1,_cor0) ->
	%% Line 2111
	case _cor1 of
	  <{_cor9,Cindex1,Cindex2}> when 'true' ->
	      %% Line 2116
	      case apply 'encode_object_identifier'/2
		       (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 2121
		    case apply 'encode_null'/2
			     (Cindex2, [#{#<5>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <BytesSoFar> =
			      %% Line 2123
			      [EncBytes1|[EncBytes2|[]]]
			  in  let <LenSoFar> =
				  %% Line 2124
				  call 'erlang':'+'
				      (EncLen1, EncLen2)
			      in  %% Line 2125
				  apply 'encode_tags'/3
				      (_cor0, BytesSoFar, LenSoFar)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_AlgorithmNull'/1 =
    %% Line 2128
    fun (_cor0) ->
	%% Line 2129
	apply 'dec_AlgorithmNull'/2
	    (_cor0, [16])
'dec_AlgorithmNull'/2 =
    %% Line 2131
    fun (_cor1,_cor0) ->
	%% Line 2140
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 2141
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  %% Line 2146
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 2147
			    apply 'decode_null'/2
				(V2, [5])
			in  do  %% Line 2149
				case Tlv3 of
				  %% Line 2150
				  <[]> when 'true' ->
				      'ok'
				  %% Line 2150
				  <_cor10> when 'true' ->
				      call 'erlang':'exit'
					  ({'error',{'asn1',{'unexpected',Tlv3}}})
				end
				%% Line 2152
				{'AlgorithmNull',Term1,Term2}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_Algorithm'/1 =
    %% Line 2159
    fun (_cor0) ->
	%% Line 2160
	apply 'enc_Algorithm'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_Algorithm'/2 =
    %% Line 2162
    fun (_cor1,_cor0) ->
	%% Line 2163
	case _cor1 of
	  <{_cor11,Cindex1,Cindex2}> when 'true' ->
	      %% Line 2168
	      case apply 'encode_object_identifier'/2
		       (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    let <_cor5> =
			%% Line 2173
			case Cindex2 of
			  %% Line 2174
			  <'asn1_NOVALUE'> when 'true' ->
			      {#{}#,0}
			  %% Line 2175
			  <_cor12> when 'true' ->
			      %% Line 2176
			      apply 'encode_open_type'/2
				  (Cindex2, [])
			end
		    in  %% Line 2173
			case _cor5 of
			  <{EncBytes2,EncLen2}> when 'true' ->
			      let <BytesSoFar> =
				  %% Line 2179
				  [EncBytes1|[EncBytes2|[]]]
			      in  let <LenSoFar> =
				      %% Line 2180
				      call 'erlang':'+'
					  (EncLen1, EncLen2)
				  in  %% Line 2181
				      apply 'encode_tags'/3
					  (_cor0, BytesSoFar, LenSoFar)
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_Algorithm'/1 =
    %% Line 2184
    fun (_cor0) ->
	%% Line 2185
	apply 'dec_Algorithm'/2
	    (_cor0, [16])
'dec_Algorithm'/2 =
    %% Line 2187
    fun (_cor1,_cor0) ->
	%% Line 2196
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 2197
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  let <Term2,Tlv3> =
		      %% Line 2202
		      case Tlv2 of
			%% Line 2203
			<[V2|TempTlv3]> when 'true' ->
			    let <_cor5> =
				%% Line 2204
				apply 'decode_open_type_as_binary'/2
				    (V2, [])
			    in  <_cor5,%% Line 2204
				       TempTlv3>
			%% Line 2205
			<_cor12> when 'true' ->
			    %% Line 2206
			    <'asn1_NOVALUE',Tlv2>
		      end
		  in  do  %% Line 2209
			  case Tlv3 of
			    %% Line 2210
			    <[]> when 'true' ->
				'ok'
			    %% Line 2210
			    <_cor13> when 'true' ->
				call 'erlang':'exit'
				    ({'error',{'asn1',{'unexpected',Tlv3}}})
			  end
			  %% Line 2212
			  {'Algorithm',Term1,Term2}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_OtherPrimeInfo'/1 =
    %% Line 2219
    fun (_cor0) ->
	%% Line 2220
	apply 'enc_OtherPrimeInfo'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_OtherPrimeInfo'/2 =
    %% Line 2222
    fun (_cor1,_cor0) ->
	%% Line 2223
	case _cor1 of
	  <{_cor11,Cindex1,Cindex2,Cindex3}> when 'true' ->
	      %% Line 2228
	      case apply 'encode_integer'/2
		       (Cindex1, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 2233
		    case apply 'encode_integer'/2
			     (Cindex2, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  %% Line 2238
			  case apply 'encode_integer'/2
				   (Cindex3, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
			    <{EncBytes3,EncLen3}> when 'true' ->
				let <BytesSoFar> =
				    %% Line 2240
				    [EncBytes1|[EncBytes2|[EncBytes3|[]]]]
				in  let <_cor7> =
					%% Line 2241
					call 'erlang':'+'
					    (EncLen1, EncLen2)
				    in  let <LenSoFar> =
					    %% Line 2241
					    call 'erlang':'+'
						(_cor7, EncLen3)
					in  %% Line 2242
					    apply 'encode_tags'/3
						(_cor0, BytesSoFar, LenSoFar)
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_OtherPrimeInfo'/1 =
    %% Line 2245
    fun (_cor0) ->
	%% Line 2246
	apply 'dec_OtherPrimeInfo'/2
	    (_cor0, [16])
'dec_OtherPrimeInfo'/2 =
    %% Line 2248
    fun (_cor1,_cor0) ->
	%% Line 2257
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 2258
		  apply 'decode_integer'/2
		      (V1, [2])
	      in  %% Line 2263
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 2264
			    apply 'decode_integer'/2
				(V2, [2])
			in  %% Line 2269
			    case Tlv3 of
			      <[V3|Tlv4]> when 'true' ->
				  let <Term3> =
				      %% Line 2270
				      apply 'decode_integer'/2
					  (V3, [2])
				  in  do  %% Line 2272
					  case Tlv4 of
					    %% Line 2273
					    <[]> when 'true' ->
						'ok'
					    %% Line 2273
					    <_cor12> when 'true' ->
						call 'erlang':'exit'
						    ({'error',{'asn1',{'unexpected',Tlv4}}})
					  end
					  %% Line 2275
					  {'OtherPrimeInfo',Term1,Term2,Term3}
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_OtherPrimeInfos'/1 =
    %% Line 2282
    fun (_cor0) ->
	%% Line 2283
	apply 'enc_OtherPrimeInfos'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_OtherPrimeInfos'/2 =
    %% Line 2285
    fun (_cor1,_cor0) ->
	%% Line 2286
	case apply 'enc_OtherPrimeInfos_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 2287
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_OtherPrimeInfos_components'/3 =
    %% Line 2289
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 2290
		  call 'lists':'reverse'
		      (AccBytes)
	      in  %% Line 2290
		  {_cor3,AccLen}
	  %% Line 2292
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 2293
	      case apply 'enc_OtherPrimeInfo'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 2294
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 2294
			apply 'enc_OtherPrimeInfos_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_OtherPrimeInfos_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_OtherPrimeInfos'/1 =
    %% Line 2298
    fun (_cor0) ->
	%% Line 2299
	apply 'dec_OtherPrimeInfos'/2
	    (_cor0, [16])
'dec_OtherPrimeInfos'/2 =
    %% Line 2301
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 2305
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 2306
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_OtherPrimeInfo'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'enc_VersionPKCS-1'/1 =
    %% Line 2314
    fun (_cor0) ->
	%% Line 2315
	apply 'enc_VersionPKCS-1'/2
	    (_cor0, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
'enc_VersionPKCS-1'/2 =
    %% Line 2317
    fun (_cor1,_cor0) ->
	%% Line 2318
	apply 'encode_integer'/3
	    (_cor1, [{'two-prime',0}|[{'multi',1}]], _cor0)
'dec_VersionPKCS-1'/1 =
    %% Line 2321
    fun (_cor0) ->
	%% Line 2322
	apply 'dec_VersionPKCS-1'/2
	    (_cor0, [2])
'dec_VersionPKCS-1'/2 =
    %% Line 2324
    fun (_cor1,_cor0) ->
	let <Val1> =
	    %% Line 2326
	    apply 'decode_integer'/2
		(_cor1, _cor0)
	in  %% Line 2327
	    apply 'number2name'/2
		(Val1, [{'two-prime',0}|[{'multi',1}]])
'enc_RSAPrivateKey'/1 =
    %% Line 2336
    fun (_cor0) ->
	%% Line 2337
	apply 'enc_RSAPrivateKey'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_RSAPrivateKey'/2 =
    %% Line 2339
    fun (_cor1,_cor0) ->
	%% Line 2340
	case _cor1 of
	  <{_cor27,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6,Cindex7,Cindex8,Cindex9,Cindex10}> when 'true' ->
	      %% Line 2345
	      case apply 'encode_integer'/3
		       (Cindex1, [{'two-prime',0}|[{'multi',1}]], [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 2350
		    case apply 'encode_integer'/2
			     (Cindex2, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  %% Line 2355
			  case apply 'encode_integer'/2
				   (Cindex3, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
			    <{EncBytes3,EncLen3}> when 'true' ->
				%% Line 2360
				case apply 'encode_integer'/2
					 (Cindex4, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
				  <{EncBytes4,EncLen4}> when 'true' ->
				      %% Line 2365
				      case apply 'encode_integer'/2
					       (Cindex5, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
					<{EncBytes5,EncLen5}> when 'true' ->
					    %% Line 2370
					    case apply 'encode_integer'/2
						     (Cindex6, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
					      <{EncBytes6,EncLen6}> when 'true' ->
						  %% Line 2375
						  case apply 'encode_integer'/2
							   (Cindex7, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
						    <{EncBytes7,EncLen7}> when 'true' ->
							%% Line 2380
							case apply 'encode_integer'/2
								 (Cindex8, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
							  <{EncBytes8,EncLen8}> when 'true' ->
							      %% Line 2385
							      case apply 'encode_integer'/2
								       (Cindex9, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
								<{EncBytes9,EncLen9}> when 'true' ->
								    let <_cor13> =
									%% Line 2390
									case Cindex10 of
									  %% Line 2391
									  <'asn1_NOVALUE'> when 'true' ->
									      {#{}#,0}
									  %% Line 2392
									  <_cor28> when 'true' ->
									      %% Line 2393
									      apply 'enc_OtherPrimeInfos'/2
										  (Cindex10, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
									end
								    in  %% Line 2390
									case _cor13 of
									  <{EncBytes10,EncLen10}> when 'true' ->
									      let <BytesSoFar> =
										  %% Line 2396
										  [EncBytes1|[EncBytes2|[EncBytes3|[EncBytes4|[EncBytes5|[EncBytes6|[EncBytes7|[EncBytes8|[EncBytes9|[EncBytes10|[]]]]]]]]]]]
									      in  let <_cor16> =
										      %% Line 2397
										      call 'erlang':'+'
											  (EncLen1, EncLen2)
										  in  let <_cor17> =
											  %% Line 2397
											  call 'erlang':'+'
											      (_cor16, EncLen3)
										      in  let <_cor18> =
											      %% Line 2397
											      call 'erlang':'+'
												  (_cor17, EncLen4)
											  in  let <_cor19> =
												  %% Line 2397
												  call 'erlang':'+'
												      (_cor18, EncLen5)
											      in  let <_cor20> =
												      %% Line 2397
												      call 'erlang':'+'
													  (_cor19, EncLen6)
												  in  let <_cor21> =
													  %% Line 2397
													  call 'erlang':'+'
													      (_cor20, EncLen7)
												      in  let <_cor22> =
													      %% Line 2397
													      call 'erlang':'+'
														  (_cor21, EncLen8)
													  in  let <_cor23> =
														  %% Line 2397
														  call 'erlang':'+'
														      (_cor22, EncLen9)
													      in  let <LenSoFar> =
														      %% Line 2397
														      call 'erlang':'+'
															  (_cor23, EncLen10)
														  in  %% Line 2398
														      apply 'encode_tags'/3
															  (_cor0, BytesSoFar, LenSoFar)
									  ( <_cor14> when 'true' ->
										primop 'match_fail'
										    ({'badmatch',_cor14})
									    -| ['compiler_generated'] )
									end
								( <_cor11> when 'true' ->
								      primop 'match_fail'
									  ({'badmatch',_cor11})
								  -| ['compiler_generated'] )
							      end
							  ( <_cor10> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_cor10})
							    -| ['compiler_generated'] )
							end
						    ( <_cor9> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor9})
						      -| ['compiler_generated'] )
						  end
					      ( <_cor8> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor8})
						-| ['compiler_generated'] )
					    end
					( <_cor7> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor7})
					  -| ['compiler_generated'] )
				      end
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor6})
				    -| ['compiler_generated'] )
				end
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_RSAPrivateKey'/1 =
    %% Line 2401
    fun (_cor0) ->
	%% Line 2402
	apply 'dec_RSAPrivateKey'/2
	    (_cor0, [16])
'dec_RSAPrivateKey'/2 =
    %% Line 2404
    fun (_cor1,_cor0) ->
	%% Line 2413
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Val1> =
		  %% Line 2415
		  apply 'decode_integer'/2
		      (V1, [2])
	      in  let <Term1> =
		      %% Line 2416
		      apply 'number2name'/2
			  (Val1, [{'two-prime',0}|[{'multi',1}]])
		  in  %% Line 2423
		      case Tlv2 of
			<[V2|Tlv3]> when 'true' ->
			    let <Term2> =
				%% Line 2424
				apply 'decode_integer'/2
				    (V2, [2])
			    in  %% Line 2429
				case Tlv3 of
				  <[V3|Tlv4]> when 'true' ->
				      let <Term3> =
					  %% Line 2430
					  apply 'decode_integer'/2
					      (V3, [2])
				      in  %% Line 2435
					  case Tlv4 of
					    <[V4|Tlv5]> when 'true' ->
						let <Term4> =
						    %% Line 2436
						    apply 'decode_integer'/2
							(V4, [2])
						in  %% Line 2441
						    case Tlv5 of
						      <[V5|Tlv6]> when 'true' ->
							  let <Term5> =
							      %% Line 2442
							      apply 'decode_integer'/2
								  (V5, [2])
							  in  %% Line 2447
							      case Tlv6 of
								<[V6|Tlv7]> when 'true' ->
								    let <Term6> =
									%% Line 2448
									apply 'decode_integer'/2
									    (V6, [2])
								    in  %% Line 2453
									case Tlv7 of
									  <[V7|Tlv8]> when 'true' ->
									      let <Term7> =
										  %% Line 2454
										  apply 'decode_integer'/2
										      (V7, [2])
									      in  %% Line 2459
										  case Tlv8 of
										    <[V8|Tlv9]> when 'true' ->
											let <Term8> =
											    %% Line 2460
											    apply 'decode_integer'/2
												(V8, [2])
											in  %% Line 2465
											    case Tlv9 of
											      <[V9|Tlv10]> when 'true' ->
												  let <Term9> =
												      %% Line 2466
												      apply 'decode_integer'/2
													  (V9, [2])
												  in  let <Term10,Tlv11> =
													  %% Line 2471
													  case Tlv10 of
													    %% Line 2472
													    <[{16,V10}|TempTlv11]> when 'true' ->
														let <_cor22> =
														    %% Line 2473
														    apply 'dec_OtherPrimeInfos'/2
															(V10, [])
														in  <_cor22,%% Line 2473
															    TempTlv11>
													    %% Line 2474
													    <_cor29> when 'true' ->
														%% Line 2475
														<'asn1_NOVALUE',Tlv10>
													  end
												      in  do  %% Line 2478
													      case Tlv11 of
														%% Line 2479
														<[]> when 'true' ->
														    'ok'
														%% Line 2479
														<_cor30> when 'true' ->
														    call 'erlang':'exit'
															({'error',{'asn1',{'unexpected',Tlv11}}})
													      end
													      %% Line 2481
													      {'RSAPrivateKey',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10}
											      ( <_cor20> when 'true' ->
												    primop 'match_fail'
													({'badmatch',_cor20})
												-| ['compiler_generated'] )
											    end
										    ( <_cor18> when 'true' ->
											  primop 'match_fail'
											      ({'badmatch',_cor18})
										      -| ['compiler_generated'] )
										  end
									  ( <_cor16> when 'true' ->
										primop 'match_fail'
										    ({'badmatch',_cor16})
									    -| ['compiler_generated'] )
									end
								( <_cor14> when 'true' ->
								      primop 'match_fail'
									  ({'badmatch',_cor14})
								  -| ['compiler_generated'] )
							      end
						      ( <_cor12> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor12})
							-| ['compiler_generated'] )
						    end
					    ( <_cor10> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor10})
					      -| ['compiler_generated'] )
					  end
				  ( <_cor8> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor8})
				    -| ['compiler_generated'] )
				end
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_RSAPublicKey'/1 =
    %% Line 2488
    fun (_cor0) ->
	%% Line 2489
	apply 'enc_RSAPublicKey'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_RSAPublicKey'/2 =
    %% Line 2491
    fun (_cor1,_cor0) ->
	%% Line 2492
	case _cor1 of
	  <{_cor9,Cindex1,Cindex2}> when 'true' ->
	      %% Line 2497
	      case apply 'encode_integer'/2
		       (Cindex1, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 2502
		    case apply 'encode_integer'/2
			     (Cindex2, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <BytesSoFar> =
			      %% Line 2504
			      [EncBytes1|[EncBytes2|[]]]
			  in  let <LenSoFar> =
				  %% Line 2505
				  call 'erlang':'+'
				      (EncLen1, EncLen2)
			      in  %% Line 2506
				  apply 'encode_tags'/3
				      (_cor0, BytesSoFar, LenSoFar)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_RSAPublicKey'/1 =
    %% Line 2509
    fun (_cor0) ->
	%% Line 2510
	apply 'dec_RSAPublicKey'/2
	    (_cor0, [16])
'dec_RSAPublicKey'/2 =
    %% Line 2512
    fun (_cor1,_cor0) ->
	%% Line 2521
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 2522
		  apply 'decode_integer'/2
		      (V1, [2])
	      in  %% Line 2527
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 2528
			    apply 'decode_integer'/2
				(V2, [2])
			in  do  %% Line 2530
				case Tlv3 of
				  %% Line 2531
				  <[]> when 'true' ->
				      'ok'
				  %% Line 2531
				  <_cor10> when 'true' ->
				      call 'erlang':'exit'
					  ({'error',{'asn1',{'unexpected',Tlv3}}})
				end
				%% Line 2533
				{'RSAPublicKey',Term1,Term2}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_Curve'/1 =
    %% Line 2540
    fun (_cor0) ->
	%% Line 2541
	apply 'enc_Curve'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_Curve'/2 =
    %% Line 2543
    fun (_cor1,_cor0) ->
	%% Line 2544
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2,Cindex3}> when 'true' ->
	      %% Line 2549
	      case apply 'encode_restricted_string'/2
		       (Cindex1, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 2554
		    case apply 'encode_restricted_string'/2
			     (Cindex2, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <_cor6> =
			      %% Line 2559
			      case Cindex3 of
				%% Line 2560
				<'asn1_NOVALUE'> when 'true' ->
				    {#{}#,0}
				%% Line 2561
				<_cor14> when 'true' ->
				    %% Line 2562
				    apply 'encode_bit_string'/4
					([], Cindex3, [], [#{#<3>(8,1,'integer',['unsigned'|['big']])}#])
			      end
			  in  %% Line 2559
			      case _cor6 of
				<{EncBytes3,EncLen3}> when 'true' ->
				    let <BytesSoFar> =
					%% Line 2565
					[EncBytes1|[EncBytes2|[EncBytes3|[]]]]
				    in  let <_cor9> =
					    %% Line 2566
					    call 'erlang':'+'
						(EncLen1, EncLen2)
					in  let <LenSoFar> =
						%% Line 2566
						call 'erlang':'+'
						    (_cor9, EncLen3)
					    in  %% Line 2567
						apply 'encode_tags'/3
						    (_cor0, BytesSoFar, LenSoFar)
				( <_cor7> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor7})
				  -| ['compiler_generated'] )
			      end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_Curve'/1 =
    %% Line 2570
    fun (_cor0) ->
	%% Line 2571
	apply 'dec_Curve'/2
	    (_cor0, [16])
'dec_Curve'/2 =
    %% Line 2573
    fun (_cor1,_cor0) ->
	%% Line 2582
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <_cor4> =
		  %% Line 2584
		  apply 'decode_restricted_string'/2
		      (V1, [4])
	      in  let <Term1> =
		      %% Line 2584
		      call 'erlang':'binary_to_list'
			  (_cor4)
		  in  %% Line 2591
		      case Tlv2 of
			<[V2|Tlv3]> when 'true' ->
			    let <_cor7> =
				%% Line 2593
				apply 'decode_restricted_string'/2
				    (V2, [4])
			    in  let <Term2> =
				    %% Line 2593
				    call 'erlang':'binary_to_list'
					(_cor7)
				in  let <Term3,Tlv4> =
					%% Line 2600
					case Tlv3 of
					  %% Line 2601
					  <[{3,V3}|TempTlv4]> when 'true' ->
					      let <_cor9> =
						  %% Line 2602
						  apply 'decode_compact_bit_string'/2
						      (V3, [])
					      in  <_cor9,%% Line 2602
							 TempTlv4>
					  %% Line 2603
					  <_cor16> when 'true' ->
					      %% Line 2604
					      <'asn1_NOVALUE',Tlv3>
					end
				    in  do  %% Line 2607
					    case Tlv4 of
					      %% Line 2608
					      <[]> when 'true' ->
						  'ok'
					      %% Line 2608
					      <_cor17> when 'true' ->
						  call 'erlang':'exit'
						      ({'error',{'asn1',{'unexpected',Tlv4}}})
					    end
					    %% Line 2610
					    {'Curve',Term1,Term2,Term3}
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_ECPVer'/1 =
    %% Line 2617
    fun (_cor0) ->
	%% Line 2618
	apply 'enc_ECPVer'/2
	    (_cor0, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
'enc_ECPVer'/2 =
    %% Line 2620
    fun (_cor1,_cor0) ->
	%% Line 2621
	apply 'encode_integer'/3
	    (_cor1, [{'ecpVer1',1}], _cor0)
'dec_ECPVer'/1 =
    %% Line 2624
    fun (_cor0) ->
	%% Line 2625
	apply 'dec_ECPVer'/2
	    (_cor0, [2])
'dec_ECPVer'/2 =
    %% Line 2627
    fun (_cor1,_cor0) ->
	let <Val1> =
	    %% Line 2629
	    apply 'decode_integer'/2
		(_cor1, _cor0)
	in  %% Line 2630
	    apply 'number2name'/2
		(Val1, [{'ecpVer1',1}])
'enc_ECParameters'/1 =
    %% Line 2639
    fun (_cor0) ->
	%% Line 2640
	apply 'enc_ECParameters'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_ECParameters'/2 =
    %% Line 2642
    fun (_cor1,_cor0) ->
	%% Line 2643
	case _cor1 of
	  <{_cor19,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6}> when 'true' ->
	      %% Line 2648
	      case apply 'encode_integer'/3
		       (Cindex1, [{'ecpVer1',1}], [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 2653
		    case apply 'enc_FieldID'/2
			     (Cindex2, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  %% Line 2658
			  case apply 'enc_Curve'/2
				   (Cindex3, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
			    <{EncBytes3,EncLen3}> when 'true' ->
				%% Line 2663
				case apply 'encode_restricted_string'/2
					 (Cindex4, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#]) of
				  <{EncBytes4,EncLen4}> when 'true' ->
				      %% Line 2668
				      case apply 'encode_integer'/2
					       (Cindex5, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
					<{EncBytes5,EncLen5}> when 'true' ->
					    let <_cor9> =
						%% Line 2673
						case Cindex6 of
						  %% Line 2674
						  <'asn1_NOVALUE'> when 'true' ->
						      {#{}#,0}
						  %% Line 2675
						  <_cor20> when 'true' ->
						      %% Line 2676
						      apply 'encode_integer'/2
							  (Cindex6, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
						end
					    in  %% Line 2673
						case _cor9 of
						  <{EncBytes6,EncLen6}> when 'true' ->
						      let <BytesSoFar> =
							  %% Line 2679
							  [EncBytes1|[EncBytes2|[EncBytes3|[EncBytes4|[EncBytes5|[EncBytes6|[]]]]]]]
						      in  let <_cor12> =
							      %% Line 2680
							      call 'erlang':'+'
								  (EncLen1, EncLen2)
							  in  let <_cor13> =
								  %% Line 2680
								  call 'erlang':'+'
								      (_cor12, EncLen3)
							      in  let <_cor14> =
								      %% Line 2680
								      call 'erlang':'+'
									  (_cor13, EncLen4)
								  in  let <_cor15> =
									  %% Line 2680
									  call 'erlang':'+'
									      (_cor14, EncLen5)
								      in  let <LenSoFar> =
									      %% Line 2680
									      call 'erlang':'+'
										  (_cor15, EncLen6)
									  in  %% Line 2681
									      apply 'encode_tags'/3
										  (_cor0, BytesSoFar, LenSoFar)
						  ( <_cor10> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor10})
						    -| ['compiler_generated'] )
						end
					( <_cor7> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor7})
					  -| ['compiler_generated'] )
				      end
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor6})
				    -| ['compiler_generated'] )
				end
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_ECParameters'/1 =
    %% Line 2684
    fun (_cor0) ->
	%% Line 2685
	apply 'dec_ECParameters'/2
	    (_cor0, [16])
'dec_ECParameters'/2 =
    %% Line 2687
    fun (_cor1,_cor0) ->
	%% Line 2696
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Val1> =
		  %% Line 2698
		  apply 'decode_integer'/2
		      (V1, [2])
	      in  let <Term1> =
		      %% Line 2699
		      apply 'number2name'/2
			  (Val1, [{'ecpVer1',1}])
		  in  %% Line 2706
		      case Tlv2 of
			<[V2|Tlv3]> when 'true' ->
			    let <Term2> =
				%% Line 2707
				apply 'dec_FieldID'/2
				    (V2, [16])
			    in  %% Line 2712
				case Tlv3 of
				  <[V3|Tlv4]> when 'true' ->
				      let <Term3> =
					  %% Line 2713
					  apply 'dec_Curve'/2
					      (V3, [16])
				      in  %% Line 2718
					  case Tlv4 of
					    <[V4|Tlv5]> when 'true' ->
						let <_cor11> =
						    %% Line 2720
						    apply 'decode_restricted_string'/2
							(V4, [4])
						in  let <Term4> =
							%% Line 2720
							call 'erlang':'binary_to_list'
							    (_cor11)
						    in  %% Line 2727
							case Tlv5 of
							  <[V5|Tlv6]> when 'true' ->
							      let <Term5> =
								  %% Line 2728
								  apply 'decode_integer'/2
								      (V5, [2])
							      in  let <Term6,Tlv7> =
								      %% Line 2733
								      case Tlv6 of
									%% Line 2734
									<[{2,V6}|TempTlv7]> when 'true' ->
									    let <_cor15> =
										%% Line 2735
										apply 'decode_integer'/2
										    (V6, [])
									    in  <_cor15,%% Line 2735
											TempTlv7>
									%% Line 2736
									<_cor22> when 'true' ->
									    %% Line 2737
									    <'asn1_NOVALUE',Tlv6>
								      end
								  in  do  %% Line 2740
									  case Tlv7 of
									    %% Line 2741
									    <[]> when 'true' ->
										'ok'
									    %% Line 2741
									    <_cor23> when 'true' ->
										call 'erlang':'exit'
										    ({'error',{'asn1',{'unexpected',Tlv7}}})
									  end
									  %% Line 2743
									  {'ECParameters',Term1,Term2,Term3,Term4,Term5,Term6}
							  ( <_cor13> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_cor13})
							    -| ['compiler_generated'] )
							end
					    ( <_cor10> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor10})
					      -| ['compiler_generated'] )
					  end
				  ( <_cor8> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor8})
				    -| ['compiler_generated'] )
				end
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_EcpkParameters'/1 =
    %% Line 2750
    fun (_cor0) ->
	%% Line 2751
	apply 'enc_EcpkParameters'/2
	    (_cor0, [])
'enc_EcpkParameters'/2 =
    %% Line 2753
    fun (_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 2754
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 2755
	      <'ecParameters'> when 'true' ->
		  let <_cor2> =
		      %% Line 2756
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 2756
		      apply 'enc_ECParameters'/2
			  (_cor2, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 2757
	      <'namedCurve'> when 'true' ->
		  let <_cor3> =
		      %% Line 2758
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 2758
		      apply 'encode_object_identifier'/2
			  (_cor3, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 2759
	      <'implicitlyCA'> when 'true' ->
		  let <_cor4> =
		      %% Line 2760
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 2760
		      apply 'encode_null'/2
			  (_cor4, [#{#<5>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 2761
	      <Else> when 'true' ->
		  %% Line 2762
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 2754
	    case _cor6 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 2765
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor7> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor7})
		-| ['compiler_generated'] )
	    end
'dec_EcpkParameters'/1 =
    %% Line 2770
    fun (_cor0) ->
	%% Line 2771
	apply 'dec_EcpkParameters'/2
	    (_cor0, [])
'dec_EcpkParameters'/2 =
    %% Line 2773
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 2774
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 2775
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor11> when 'true' ->
		      Tlv1
		end
	    in  %% Line 2775
		case _cor4 of
		  %% Line 2778
		  <{16,V1}> when 'true' ->
		      let <_cor5> =
			  %% Line 2779
			  apply 'dec_ECParameters'/2
			      (V1, [])
		      in  %% Line 2779
			  {'ecParameters',_cor5}
		  %% Line 2783
		  <{6,V1}> when 'true' ->
		      let <_cor6> =
			  %% Line 2784
			  apply 'decode_object_identifier'/2
			      (V1, [])
		      in  %% Line 2784
			  {'namedCurve',_cor6}
		  %% Line 2788
		  <{5,V1}> when 'true' ->
		      let <_cor7> =
			  %% Line 2789
			  apply 'decode_null'/2
			      (V1, [])
		      in  %% Line 2789
			  {'implicitlyCA',_cor7}
		  %% Line 2791
		  <Else> when 'true' ->
		      %% Line 2792
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'enc_ECPoint'/1 =
    %% Line 2800
    fun (_cor0) ->
	%% Line 2801
	apply 'enc_ECPoint'/2
	    (_cor0, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#])
'enc_ECPoint'/2 =
    %% Line 2803
    fun (_cor1,_cor0) ->
	%% Line 2804
	apply 'encode_restricted_string'/2
	    (_cor1, _cor0)
'dec_ECPoint'/1 =
    %% Line 2807
    fun (_cor0) ->
	%% Line 2808
	apply 'dec_ECPoint'/2
	    (_cor0, [4])
'dec_ECPoint'/2 =
    %% Line 2810
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2812
	    apply 'decode_restricted_string'/2
		(_cor1, _cor0)
	in  %% Line 2812
	    call 'erlang':'binary_to_list'
		(_cor2)
'enc_FieldElement'/1 =
    %% Line 2821
    fun (_cor0) ->
	%% Line 2822
	apply 'enc_FieldElement'/2
	    (_cor0, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#])
'enc_FieldElement'/2 =
    %% Line 2824
    fun (_cor1,_cor0) ->
	%% Line 2825
	apply 'encode_restricted_string'/2
	    (_cor1, _cor0)
'dec_FieldElement'/1 =
    %% Line 2828
    fun (_cor0) ->
	%% Line 2829
	apply 'dec_FieldElement'/2
	    (_cor0, [4])
'dec_FieldElement'/2 =
    %% Line 2831
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2833
	    apply 'decode_restricted_string'/2
		(_cor1, _cor0)
	in  %% Line 2833
	    call 'erlang':'binary_to_list'
		(_cor2)
'enc_Pentanomial'/1 =
    %% Line 2842
    fun (_cor0) ->
	%% Line 2843
	apply 'enc_Pentanomial'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_Pentanomial'/2 =
    %% Line 2845
    fun (_cor1,_cor0) ->
	%% Line 2846
	case _cor1 of
	  <{_cor11,Cindex1,Cindex2,Cindex3}> when 'true' ->
	      %% Line 2851
	      case apply 'encode_integer'/2
		       (Cindex1, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 2856
		    case apply 'encode_integer'/2
			     (Cindex2, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  %% Line 2861
			  case apply 'encode_integer'/2
				   (Cindex3, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
			    <{EncBytes3,EncLen3}> when 'true' ->
				let <BytesSoFar> =
				    %% Line 2863
				    [EncBytes1|[EncBytes2|[EncBytes3|[]]]]
				in  let <_cor7> =
					%% Line 2864
					call 'erlang':'+'
					    (EncLen1, EncLen2)
				    in  let <LenSoFar> =
					    %% Line 2864
					    call 'erlang':'+'
						(_cor7, EncLen3)
					in  %% Line 2865
					    apply 'encode_tags'/3
						(_cor0, BytesSoFar, LenSoFar)
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_Pentanomial'/1 =
    %% Line 2868
    fun (_cor0) ->
	%% Line 2869
	apply 'dec_Pentanomial'/2
	    (_cor0, [16])
'dec_Pentanomial'/2 =
    %% Line 2871
    fun (_cor1,_cor0) ->
	%% Line 2880
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 2881
		  apply 'decode_integer'/2
		      (V1, [2])
	      in  %% Line 2886
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 2887
			    apply 'decode_integer'/2
				(V2, [2])
			in  %% Line 2892
			    case Tlv3 of
			      <[V3|Tlv4]> when 'true' ->
				  let <Term3> =
				      %% Line 2893
				      apply 'decode_integer'/2
					  (V3, [2])
				  in  do  %% Line 2895
					  case Tlv4 of
					    %% Line 2896
					    <[]> when 'true' ->
						'ok'
					    %% Line 2896
					    <_cor12> when 'true' ->
						call 'erlang':'exit'
						    ({'error',{'asn1',{'unexpected',Tlv4}}})
					  end
					  %% Line 2898
					  {'Pentanomial',Term1,Term2,Term3}
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_Trinomial'/1 =
    %% Line 2905
    fun (_cor0) ->
	%% Line 2906
	apply 'enc_Trinomial'/2
	    (_cor0, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
'enc_Trinomial'/2 =
    %% Line 2908
    fun (_cor1,_cor0) ->
	%% Line 2909
	apply 'encode_integer'/2
	    (_cor1, _cor0)
'dec_Trinomial'/1 =
    %% Line 2912
    fun (_cor0) ->
	%% Line 2913
	apply 'dec_Trinomial'/2
	    (_cor0, [2])
'dec_Trinomial'/2 =
    %% Line 2915
    fun (_cor1,_cor0) ->
	%% Line 2916
	apply 'decode_integer'/2
	    (_cor1, _cor0)
'enc_Characteristic-two'/1 =
    %% Line 2923
    fun (_cor0) ->
	%% Line 2924
	apply 'enc_Characteristic-two'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_Characteristic-two'/2 =
    %% Line 2926
    fun (_cor1,_cor0) ->
	%% Line 2927
	case _cor1 of
	  <{_cor11,Cindex1,Cindex2,Cindex3}> when 'true' ->
	      %% Line 2932
	      case apply 'encode_integer'/2
		       (Cindex1, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 2937
		    case apply 'encode_object_identifier'/2
			     (Cindex2, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  %% Line 2942
			  case apply 'encode_open_type'/2
				   (Cindex3, []) of
			    <{EncBytes3,EncLen3}> when 'true' ->
				let <BytesSoFar> =
				    %% Line 2944
				    [EncBytes1|[EncBytes2|[EncBytes3|[]]]]
				in  let <_cor7> =
					%% Line 2945
					call 'erlang':'+'
					    (EncLen1, EncLen2)
				    in  let <LenSoFar> =
					    %% Line 2945
					    call 'erlang':'+'
						(_cor7, EncLen3)
					in  %% Line 2946
					    apply 'encode_tags'/3
						(_cor0, BytesSoFar, LenSoFar)
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_Characteristic-two'/1 =
    %% Line 2949
    fun (_cor0) ->
	%% Line 2950
	apply 'dec_Characteristic-two'/2
	    (_cor0, [16])
'dec_Characteristic-two'/2 =
    %% Line 2952
    fun (_cor1,_cor0) ->
	%% Line 2961
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 2962
		  apply 'decode_integer'/2
		      (V1, [2])
	      in  %% Line 2967
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 2968
			    apply 'decode_object_identifier'/2
				(V2, [6])
			in  %% Line 2973
			    case Tlv3 of
			      <[V3|Tlv4]> when 'true' ->
				  let <Term3> =
				      %% Line 2974
				      apply 'decode_open_type_as_binary'/2
					  (V3, [])
				  in  do  %% Line 2976
					  case Tlv4 of
					    %% Line 2977
					    <[]> when 'true' ->
						'ok'
					    %% Line 2977
					    <_cor12> when 'true' ->
						call 'erlang':'exit'
						    ({'error',{'asn1',{'unexpected',Tlv4}}})
					  end
					  %% Line 2979
					  {'Characteristic-two',Term1,Term2,Term3}
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_Prime-p'/1 =
    %% Line 2986
    fun (_cor0) ->
	%% Line 2987
	apply 'enc_Prime-p'/2
	    (_cor0, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
'enc_Prime-p'/2 =
    %% Line 2989
    fun (_cor1,_cor0) ->
	%% Line 2990
	apply 'encode_integer'/2
	    (_cor1, _cor0)
'dec_Prime-p'/1 =
    %% Line 2993
    fun (_cor0) ->
	%% Line 2994
	apply 'dec_Prime-p'/2
	    (_cor0, [2])
'dec_Prime-p'/2 =
    %% Line 2996
    fun (_cor1,_cor0) ->
	%% Line 2997
	apply 'decode_integer'/2
	    (_cor1, _cor0)
'enc_ECDSA-Sig-Value'/1 =
    %% Line 3004
    fun (_cor0) ->
	%% Line 3005
	apply 'enc_ECDSA-Sig-Value'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_ECDSA-Sig-Value'/2 =
    %% Line 3007
    fun (_cor1,_cor0) ->
	%% Line 3008
	case _cor1 of
	  <{_cor9,Cindex1,Cindex2}> when 'true' ->
	      %% Line 3013
	      case apply 'encode_integer'/2
		       (Cindex1, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 3018
		    case apply 'encode_integer'/2
			     (Cindex2, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <BytesSoFar> =
			      %% Line 3020
			      [EncBytes1|[EncBytes2|[]]]
			  in  let <LenSoFar> =
				  %% Line 3021
				  call 'erlang':'+'
				      (EncLen1, EncLen2)
			      in  %% Line 3022
				  apply 'encode_tags'/3
				      (_cor0, BytesSoFar, LenSoFar)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_ECDSA-Sig-Value'/1 =
    %% Line 3025
    fun (_cor0) ->
	%% Line 3026
	apply 'dec_ECDSA-Sig-Value'/2
	    (_cor0, [16])
'dec_ECDSA-Sig-Value'/2 =
    %% Line 3028
    fun (_cor1,_cor0) ->
	%% Line 3037
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 3038
		  apply 'decode_integer'/2
		      (V1, [2])
	      in  %% Line 3043
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 3044
			    apply 'decode_integer'/2
				(V2, [2])
			in  do  %% Line 3046
				case Tlv3 of
				  %% Line 3047
				  <[]> when 'true' ->
				      'ok'
				  %% Line 3047
				  <_cor10> when 'true' ->
				      call 'erlang':'exit'
					  ({'error',{'asn1',{'unexpected',Tlv3}}})
				end
				%% Line 3049
				{'ECDSA-Sig-Value',Term1,Term2}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_FieldID'/1 =
    %% Line 3056
    fun (_cor0) ->
	%% Line 3057
	apply 'enc_FieldID'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_FieldID'/2 =
    %% Line 3059
    fun (_cor1,_cor0) ->
	%% Line 3060
	case _cor1 of
	  <{_cor9,Cindex1,Cindex2}> when 'true' ->
	      %% Line 3065
	      case apply 'encode_object_identifier'/2
		       (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 3070
		    case apply 'encode_open_type'/2
			     (Cindex2, []) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <BytesSoFar> =
			      %% Line 3072
			      [EncBytes1|[EncBytes2|[]]]
			  in  let <LenSoFar> =
				  %% Line 3073
				  call 'erlang':'+'
				      (EncLen1, EncLen2)
			      in  %% Line 3074
				  apply 'encode_tags'/3
				      (_cor0, BytesSoFar, LenSoFar)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_FieldID'/1 =
    %% Line 3077
    fun (_cor0) ->
	%% Line 3078
	apply 'dec_FieldID'/2
	    (_cor0, [16])
'dec_FieldID'/2 =
    %% Line 3080
    fun (_cor1,_cor0) ->
	%% Line 3089
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 3090
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  %% Line 3095
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 3096
			    apply 'decode_open_type_as_binary'/2
				(V2, [])
			in  do  %% Line 3098
				case Tlv3 of
				  %% Line 3099
				  <[]> when 'true' ->
				      'ok'
				  %% Line 3099
				  <_cor10> when 'true' ->
				      call 'erlang':'exit'
					  ({'error',{'asn1',{'unexpected',Tlv3}}})
				end
				%% Line 3101
				{'FieldID',Term1,Term2}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_KEA-Parms-Id'/1 =
    %% Line 3108
    fun (_cor0) ->
	%% Line 3109
	apply 'enc_KEA-Parms-Id'/2
	    (_cor0, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#])
'enc_KEA-Parms-Id'/2 =
    %% Line 3111
    fun (_cor1,_cor0) ->
	%% Line 3112
	apply 'encode_restricted_string'/2
	    (_cor1, _cor0)
'dec_KEA-Parms-Id'/1 =
    %% Line 3115
    fun (_cor0) ->
	%% Line 3116
	apply 'dec_KEA-Parms-Id'/2
	    (_cor0, [4])
'dec_KEA-Parms-Id'/2 =
    %% Line 3118
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 3120
	    apply 'decode_restricted_string'/2
		(_cor1, _cor0)
	in  %% Line 3120
	    call 'erlang':'binary_to_list'
		(_cor2)
'enc_ValidationParms'/1 =
    %% Line 3129
    fun (_cor0) ->
	%% Line 3130
	apply 'enc_ValidationParms'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_ValidationParms'/2 =
    %% Line 3132
    fun (_cor1,_cor0) ->
	%% Line 3133
	case _cor1 of
	  <{_cor9,Cindex1,Cindex2}> when 'true' ->
	      %% Line 3138
	      case apply 'encode_bit_string'/4
		       ([], Cindex1, [], [#{#<3>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 3143
		    case apply 'encode_integer'/2
			     (Cindex2, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <BytesSoFar> =
			      %% Line 3145
			      [EncBytes1|[EncBytes2|[]]]
			  in  let <LenSoFar> =
				  %% Line 3146
				  call 'erlang':'+'
				      (EncLen1, EncLen2)
			      in  %% Line 3147
				  apply 'encode_tags'/3
				      (_cor0, BytesSoFar, LenSoFar)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_ValidationParms'/1 =
    %% Line 3150
    fun (_cor0) ->
	%% Line 3151
	apply 'dec_ValidationParms'/2
	    (_cor0, [16])
'dec_ValidationParms'/2 =
    %% Line 3153
    fun (_cor1,_cor0) ->
	%% Line 3162
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 3163
		  apply 'decode_compact_bit_string'/2
		      (V1, [3])
	      in  %% Line 3168
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 3169
			    apply 'decode_integer'/2
				(V2, [2])
			in  do  %% Line 3171
				case Tlv3 of
				  %% Line 3172
				  <[]> when 'true' ->
				      'ok'
				  %% Line 3172
				  <_cor10> when 'true' ->
				      call 'erlang':'exit'
					  ({'error',{'asn1',{'unexpected',Tlv3}}})
				end
				%% Line 3174
				{'ValidationParms',Term1,Term2}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_DomainParameters'/1 =
    %% Line 3181
    fun (_cor0) ->
	%% Line 3182
	apply 'enc_DomainParameters'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_DomainParameters'/2 =
    %% Line 3184
    fun (_cor1,_cor0) ->
	%% Line 3185
	case _cor1 of
	  <{_cor19,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5}> when 'true' ->
	      %% Line 3190
	      case apply 'encode_integer'/2
		       (Cindex1, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 3195
		    case apply 'encode_integer'/2
			     (Cindex2, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  %% Line 3200
			  case apply 'encode_integer'/2
				   (Cindex3, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
			    <{EncBytes3,EncLen3}> when 'true' ->
				let <_cor7> =
				    %% Line 3205
				    case Cindex4 of
				      %% Line 3206
				      <'asn1_NOVALUE'> when 'true' ->
					  {#{}#,0}
				      %% Line 3207
				      <_cor20> when 'true' ->
					  %% Line 3208
					  apply 'encode_integer'/2
					      (Cindex4, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
				    end
				in  %% Line 3205
				    case _cor7 of
				      <{EncBytes4,EncLen4}> when 'true' ->
					  let <_cor10> =
					      %% Line 3214
					      case Cindex5 of
						%% Line 3215
						<'asn1_NOVALUE'> when 'true' ->
						    {#{}#,0}
						%% Line 3216
						<_cor21> when 'true' ->
						    %% Line 3217
						    apply 'enc_ValidationParms'/2
							(Cindex5, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
					      end
					  in  %% Line 3214
					      case _cor10 of
						<{EncBytes5,EncLen5}> when 'true' ->
						    let <BytesSoFar> =
							%% Line 3220
							[EncBytes1|[EncBytes2|[EncBytes3|[EncBytes4|[EncBytes5|[]]]]]]
						    in  let <_cor13> =
							    %% Line 3221
							    call 'erlang':'+'
								(EncLen1, EncLen2)
							in  let <_cor14> =
								%% Line 3221
								call 'erlang':'+'
								    (_cor13, EncLen3)
							    in  let <_cor15> =
								    %% Line 3221
								    call 'erlang':'+'
									(_cor14, EncLen4)
								in  let <LenSoFar> =
									%% Line 3221
									call 'erlang':'+'
									    (_cor15, EncLen5)
								    in  %% Line 3222
									apply 'encode_tags'/3
									    (_cor0, BytesSoFar, LenSoFar)
						( <_cor11> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor11})
						  -| ['compiler_generated'] )
					      end
				      ( <_cor8> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor8})
					-| ['compiler_generated'] )
				    end
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_DomainParameters'/1 =
    %% Line 3225
    fun (_cor0) ->
	%% Line 3226
	apply 'dec_DomainParameters'/2
	    (_cor0, [16])
'dec_DomainParameters'/2 =
    %% Line 3228
    fun (_cor1,_cor0) ->
	%% Line 3237
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 3238
		  apply 'decode_integer'/2
		      (V1, [2])
	      in  %% Line 3243
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 3244
			    apply 'decode_integer'/2
				(V2, [2])
			in  %% Line 3249
			    case Tlv3 of
			      <[V3|Tlv4]> when 'true' ->
				  let <Term3> =
				      %% Line 3250
				      apply 'decode_integer'/2
					  (V3, [2])
				  in  let <Term4,Tlv5> =
					  %% Line 3255
					  case Tlv4 of
					    %% Line 3256
					    <[{2,V4}|TempTlv5]> when 'true' ->
						let <_cor9> =
						    %% Line 3257
						    apply 'decode_integer'/2
							(V4, [])
						in  <_cor9,%% Line 3257
							   TempTlv5>
					    %% Line 3258
					    <_cor20> when 'true' ->
						%% Line 3259
						<'asn1_NOVALUE',Tlv4>
					  end
				      in  let <Term5,Tlv6> =
					      %% Line 3265
					      case Tlv5 of
						%% Line 3266
						<[{16,V5}|TempTlv6]> when 'true' ->
						    let <_cor13> =
							%% Line 3267
							apply 'dec_ValidationParms'/2
							    (V5, [])
						    in  <_cor13,%% Line 3267
								TempTlv6>
						%% Line 3268
						<_cor21> when 'true' ->
						    %% Line 3269
						    <'asn1_NOVALUE',Tlv5>
					      end
					  in  do  %% Line 3272
						  case Tlv6 of
						    %% Line 3273
						    <[]> when 'true' ->
							'ok'
						    %% Line 3273
						    <_cor22> when 'true' ->
							call 'erlang':'exit'
							    ({'error',{'asn1',{'unexpected',Tlv6}}})
						  end
						  %% Line 3275
						  {'DomainParameters',Term1,Term2,Term3,Term4,Term5}
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_DHPublicKey'/1 =
    %% Line 3282
    fun (_cor0) ->
	%% Line 3283
	apply 'enc_DHPublicKey'/2
	    (_cor0, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
'enc_DHPublicKey'/2 =
    %% Line 3285
    fun (_cor1,_cor0) ->
	%% Line 3286
	apply 'encode_integer'/2
	    (_cor1, _cor0)
'dec_DHPublicKey'/1 =
    %% Line 3289
    fun (_cor0) ->
	%% Line 3290
	apply 'dec_DHPublicKey'/2
	    (_cor0, [2])
'dec_DHPublicKey'/2 =
    %% Line 3292
    fun (_cor1,_cor0) ->
	%% Line 3293
	apply 'decode_integer'/2
	    (_cor1, _cor0)
'enc_Dss-Sig-Value'/1 =
    %% Line 3300
    fun (_cor0) ->
	%% Line 3301
	apply 'enc_Dss-Sig-Value'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_Dss-Sig-Value'/2 =
    %% Line 3303
    fun (_cor1,_cor0) ->
	%% Line 3304
	case _cor1 of
	  <{_cor9,Cindex1,Cindex2}> when 'true' ->
	      %% Line 3309
	      case apply 'encode_integer'/2
		       (Cindex1, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 3314
		    case apply 'encode_integer'/2
			     (Cindex2, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <BytesSoFar> =
			      %% Line 3316
			      [EncBytes1|[EncBytes2|[]]]
			  in  let <LenSoFar> =
				  %% Line 3317
				  call 'erlang':'+'
				      (EncLen1, EncLen2)
			      in  %% Line 3318
				  apply 'encode_tags'/3
				      (_cor0, BytesSoFar, LenSoFar)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_Dss-Sig-Value'/1 =
    %% Line 3321
    fun (_cor0) ->
	%% Line 3322
	apply 'dec_Dss-Sig-Value'/2
	    (_cor0, [16])
'dec_Dss-Sig-Value'/2 =
    %% Line 3324
    fun (_cor1,_cor0) ->
	%% Line 3333
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 3334
		  apply 'decode_integer'/2
		      (V1, [2])
	      in  %% Line 3339
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 3340
			    apply 'decode_integer'/2
				(V2, [2])
			in  do  %% Line 3342
				case Tlv3 of
				  %% Line 3343
				  <[]> when 'true' ->
				      'ok'
				  %% Line 3343
				  <_cor10> when 'true' ->
				      call 'erlang':'exit'
					  ({'error',{'asn1',{'unexpected',Tlv3}}})
				end
				%% Line 3345
				{'Dss-Sig-Value',Term1,Term2}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_Dss-Parms'/1 =
    %% Line 3352
    fun (_cor0) ->
	%% Line 3353
	apply 'enc_Dss-Parms'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_Dss-Parms'/2 =
    %% Line 3355
    fun (_cor1,_cor0) ->
	%% Line 3356
	case _cor1 of
	  <{_cor11,Cindex1,Cindex2,Cindex3}> when 'true' ->
	      %% Line 3361
	      case apply 'encode_integer'/2
		       (Cindex1, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 3366
		    case apply 'encode_integer'/2
			     (Cindex2, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  %% Line 3371
			  case apply 'encode_integer'/2
				   (Cindex3, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
			    <{EncBytes3,EncLen3}> when 'true' ->
				let <BytesSoFar> =
				    %% Line 3373
				    [EncBytes1|[EncBytes2|[EncBytes3|[]]]]
				in  let <_cor7> =
					%% Line 3374
					call 'erlang':'+'
					    (EncLen1, EncLen2)
				    in  let <LenSoFar> =
					    %% Line 3374
					    call 'erlang':'+'
						(_cor7, EncLen3)
					in  %% Line 3375
					    apply 'encode_tags'/3
						(_cor0, BytesSoFar, LenSoFar)
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_Dss-Parms'/1 =
    %% Line 3378
    fun (_cor0) ->
	%% Line 3379
	apply 'dec_Dss-Parms'/2
	    (_cor0, [16])
'dec_Dss-Parms'/2 =
    %% Line 3381
    fun (_cor1,_cor0) ->
	%% Line 3390
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 3391
		  apply 'decode_integer'/2
		      (V1, [2])
	      in  %% Line 3396
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 3397
			    apply 'decode_integer'/2
				(V2, [2])
			in  %% Line 3402
			    case Tlv3 of
			      <[V3|Tlv4]> when 'true' ->
				  let <Term3> =
				      %% Line 3403
				      apply 'decode_integer'/2
					  (V3, [2])
				  in  do  %% Line 3405
					  case Tlv4 of
					    %% Line 3406
					    <[]> when 'true' ->
						'ok'
					    %% Line 3406
					    <_cor12> when 'true' ->
						call 'erlang':'exit'
						    ({'error',{'asn1',{'unexpected',Tlv4}}})
					  end
					  %% Line 3408
					  {'Dss-Parms',Term1,Term2,Term3}
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_DSAPublicKey'/1 =
    %% Line 3415
    fun (_cor0) ->
	%% Line 3416
	apply 'enc_DSAPublicKey'/2
	    (_cor0, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
'enc_DSAPublicKey'/2 =
    %% Line 3418
    fun (_cor1,_cor0) ->
	%% Line 3419
	apply 'encode_integer'/2
	    (_cor1, _cor0)
'dec_DSAPublicKey'/1 =
    %% Line 3422
    fun (_cor0) ->
	%% Line 3423
	apply 'dec_DSAPublicKey'/2
	    (_cor0, [2])
'dec_DSAPublicKey'/2 =
    %% Line 3425
    fun (_cor1,_cor0) ->
	%% Line 3426
	apply 'decode_integer'/2
	    (_cor1, _cor0)
'enc_ProxyInfo'/1 =
    %% Line 3433
    fun (_cor0) ->
	%% Line 3434
	apply 'enc_ProxyInfo'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_ProxyInfo'/2 =
    %% Line 3436
    fun (_cor1,_cor0) ->
	%% Line 3437
	case apply 'enc_ProxyInfo_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 3438
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_ProxyInfo_components'/3 =
    %% Line 3440
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 3441
		  call 'lists':'reverse'
		      (AccBytes)
	      in  %% Line 3441
		  {_cor3,AccLen}
	  %% Line 3443
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 3444
	      case apply 'enc_Targets'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 3445
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 3445
			apply 'enc_ProxyInfo_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_ProxyInfo_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_ProxyInfo'/1 =
    %% Line 3449
    fun (_cor0) ->
	%% Line 3450
	apply 'dec_ProxyInfo'/2
	    (_cor0, [16])
'dec_ProxyInfo'/2 =
    %% Line 3452
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 3456
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 3457
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_Targets'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'enc_ACClearAttrs'/1 =
    %% Line 3465
    fun (_cor0) ->
	%% Line 3466
	apply 'enc_ACClearAttrs'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_ACClearAttrs'/2 =
    %% Line 3468
    fun (_cor1,_cor0) ->
	%% Line 3469
	case _cor1 of
	  <{_cor11,Cindex1,Cindex2,Cindex3}> when 'true' ->
	      %% Line 3474
	      case apply 'enc_GeneralName'/2
		       (Cindex1, []) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 3479
		    case apply 'encode_integer'/2
			     (Cindex2, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  %% Line 3484
			  case apply 'enc_ACClearAttrs_attrs'/2
				   (Cindex3, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
			    <{EncBytes3,EncLen3}> when 'true' ->
				let <BytesSoFar> =
				    %% Line 3486
				    [EncBytes1|[EncBytes2|[EncBytes3|[]]]]
				in  let <_cor7> =
					%% Line 3487
					call 'erlang':'+'
					    (EncLen1, EncLen2)
				    in  let <LenSoFar> =
					    %% Line 3487
					    call 'erlang':'+'
						(_cor7, EncLen3)
					in  %% Line 3488
					    apply 'encode_tags'/3
						(_cor0, BytesSoFar, LenSoFar)
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_ACClearAttrs_attrs'/2 =
    %% Line 3495
    fun (_cor1,_cor0) ->
	%% Line 3496
	case apply 'enc_ACClearAttrs_attrs_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 3497
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_ACClearAttrs_attrs_components'/3 =
    %% Line 3499
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 3500
		  call 'lists':'reverse'
		      (AccBytes)
	      in  %% Line 3500
		  {_cor3,AccLen}
	  %% Line 3502
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 3503
	      case apply 'enc_Attribute'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 3504
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 3504
			apply 'enc_ACClearAttrs_attrs_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_ACClearAttrs_attrs_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_ACClearAttrs_attrs'/2 =
    %% Line 3506
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 3510
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 3511
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_Attribute'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'dec_ACClearAttrs'/1 =
    %% Line 3516
    fun (_cor0) ->
	%% Line 3517
	apply 'dec_ACClearAttrs'/2
	    (_cor0, [16])
'dec_ACClearAttrs'/2 =
    %% Line 3519
    fun (_cor1,_cor0) ->
	%% Line 3528
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 3529
		  apply 'dec_GeneralName'/2
		      (V1, [])
	      in  %% Line 3534
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 3535
			    apply 'decode_integer'/2
				(V2, [2])
			in  %% Line 3540
			    case Tlv3 of
			      <[V3|Tlv4]> when 'true' ->
				  let <Term3> =
				      %% Line 3541
				      apply 'dec_ACClearAttrs_attrs'/2
					  (V3, [16])
				  in  do  %% Line 3543
					  case Tlv4 of
					    %% Line 3544
					    <[]> when 'true' ->
						'ok'
					    %% Line 3544
					    <_cor12> when 'true' ->
						call 'erlang':'exit'
						    ({'error',{'asn1',{'unexpected',Tlv4}}})
					  end
					  %% Line 3546
					  {'ACClearAttrs',Term1,Term2,Term3}
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_AttrSpec'/1 =
    %% Line 3553
    fun (_cor0) ->
	%% Line 3554
	apply 'enc_AttrSpec'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_AttrSpec'/2 =
    %% Line 3556
    fun (_cor1,_cor0) ->
	%% Line 3557
	case apply 'enc_AttrSpec_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 3558
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_AttrSpec_components'/3 =
    %% Line 3560
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 3561
		  call 'lists':'reverse'
		      (AccBytes)
	      in  %% Line 3561
		  {_cor3,AccLen}
	  %% Line 3563
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 3564
	      case apply 'encode_object_identifier'/2
		       (H, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 3565
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 3565
			apply 'enc_AttrSpec_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_AttrSpec_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_AttrSpec'/1 =
    %% Line 3569
    fun (_cor0) ->
	%% Line 3570
	apply 'dec_AttrSpec'/2
	    (_cor0, [16])
'dec_AttrSpec'/2 =
    %% Line 3572
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 3576
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 3577
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'decode_object_identifier'/2
					(V1, [6])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'enc_AAControls'/1 =
    %% Line 3585
    fun (_cor0) ->
	%% Line 3586
	apply 'enc_AAControls'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_AAControls'/2 =
    %% Line 3588
    fun (_cor1,_cor0) ->
	%% Line 3589
	case _cor1 of
	  <{_cor21,Cindex1,Cindex2,Cindex3,Cindex4}> when 'true' ->
	      let <_cor4> =
		  %% Line 3594
		  case Cindex1 of
		    %% Line 3595
		    <'asn1_NOVALUE'> when 'true' ->
			{#{}#,0}
		    %% Line 3596
		    <_cor22> when 'true' ->
			%% Line 3597
			apply 'encode_integer'/2
			    (Cindex1, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
		  end
	      in  %% Line 3594
		  case _cor4 of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor7> =
			    %% Line 3603
			    case Cindex2 of
			      %% Line 3604
			      <'asn1_NOVALUE'> when 'true' ->
				  {#{}#,0}
			      %% Line 3605
			      <_cor23> when 'true' ->
				  %% Line 3606
				  apply 'enc_AttrSpec'/2
				      (Cindex2, [#{#<160>(8,1,'integer',['unsigned'|['big']])}#])
			    end
			in  %% Line 3603
			    case _cor7 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  let <_cor10> =
				      %% Line 3612
				      case Cindex3 of
					%% Line 3613
					<'asn1_NOVALUE'> when 'true' ->
					    {#{}#,0}
					%% Line 3614
					<_cor24> when 'true' ->
					    %% Line 3615
					    apply 'enc_AttrSpec'/2
						(Cindex3, [#{#<161>(8,1,'integer',['unsigned'|['big']])}#])
				      end
				  in  %% Line 3612
				      case _cor10 of
					<{EncBytes3,EncLen3}> when 'true' ->
					    let <_cor13> =
						%% Line 3621
						case apply 'is_default_3'/1
							 (Cindex4) of
						  %% Line 3622
						  <'true'> when 'true' ->
						      {[],0}
						  %% Line 3623
						  <'false'> when 'true' ->
						      %% Line 3624
						      apply 'encode_boolean'/2
							  (Cindex4, [#{#<1>(8,1,'integer',['unsigned'|['big']])}#])
						  ( <_cor12> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor12})
						    -| ['compiler_generated'] )
						end
					    in  %% Line 3621
						case _cor13 of
						  <{EncBytes4,EncLen4}> when 'true' ->
						      let <BytesSoFar> =
							  %% Line 3627
							  [EncBytes1|[EncBytes2|[EncBytes3|[EncBytes4|[]]]]]
						      in  let <_cor16> =
							      %% Line 3628
							      call 'erlang':'+'
								  (EncLen1, EncLen2)
							  in  let <_cor17> =
								  %% Line 3628
								  call 'erlang':'+'
								      (_cor16, EncLen3)
							      in  let <LenSoFar> =
								      %% Line 3628
								      call 'erlang':'+'
									  (_cor17, EncLen4)
								  in  %% Line 3629
								      apply 'encode_tags'/3
									  (_cor0, BytesSoFar, LenSoFar)
						  ( <_cor14> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor14})
						    -| ['compiler_generated'] )
						end
					( <_cor11> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor11})
					  -| ['compiler_generated'] )
				      end
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_AAControls'/1 =
    %% Line 3632
    fun (_cor0) ->
	%% Line 3633
	apply 'dec_AAControls'/2
	    (_cor0, [16])
'dec_AAControls'/2 =
    %% Line 3635
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 3639
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <Term1,Tlv2> =
		%% Line 3644
		case Tlv1 of
		  %% Line 3645
		  <[{2,V1}|TempTlv2]> when 'true' ->
		      let <Val1> =
			  %% Line 3647
			  apply 'decode_integer'/2
			      (V1, [])
		      in  %% Line 3648
			  case <> of
			    <>
				when let <_cor4> =
				      call 'erlang':'=<'
					  (0, Val1)
				  in  let <_cor5> =
					  call 'erlang':'=<'
					      (Val1, 'MAX')
				      in  call 'erlang':'and'
					      (_cor4, _cor5) ->
				<%% Line 3649
				 Val1,%% Line 3653
				      TempTlv2>
			    %% Line 3650
			    <> when 'true' ->
				%% Line 3651
				call 'erlang':'exit'
				    ({'error',{'asn1','bad_range'}})
			  end
		  %% Line 3654
		  <_cor25> when 'true' ->
		      %% Line 3655
		      <'asn1_NOVALUE',Tlv1>
		end
	    in  let <Term2,Tlv3> =
		    %% Line 3661
		    case Tlv2 of
		      %% Line 3662
		      <[{131072,V2}|TempTlv3]> when 'true' ->
			  let <_cor10> =
			      %% Line 3663
			      apply 'dec_AttrSpec'/2
				  (V2, [])
			  in  <_cor10,%% Line 3663
				      TempTlv3>
		      %% Line 3664
		      <_cor26> when 'true' ->
			  %% Line 3665
			  <'asn1_NOVALUE',Tlv2>
		    end
		in  let <Term3,Tlv4> =
			%% Line 3671
			case Tlv3 of
			  %% Line 3672
			  <[{131073,V3}|TempTlv4]> when 'true' ->
			      let <_cor14> =
				  %% Line 3673
				  apply 'dec_AttrSpec'/2
				      (V3, [])
			      in  <_cor14,%% Line 3673
					  TempTlv4>
			  %% Line 3674
			  <_cor27> when 'true' ->
			      %% Line 3675
			      <'asn1_NOVALUE',Tlv3>
			end
		    in  let <Term4,Tlv5> =
			    %% Line 3681
			    case Tlv4 of
			      %% Line 3682
			      <[{1,V4}|TempTlv5]> when 'true' ->
				  let <_cor18> =
				      %% Line 3683
				      apply 'decode_boolean'/2
					  (V4, [])
				  in  <_cor18,%% Line 3683
					      TempTlv5>
			      %% Line 3684
			      <_cor28> when 'true' ->
				  %% Line 3685
				  <'true',Tlv4>
			    end
			in  do  %% Line 3688
				case Tlv5 of
				  %% Line 3689
				  <[]> when 'true' ->
				      'ok'
				  %% Line 3689
				  <_cor29> when 'true' ->
				      call 'erlang':'exit'
					  ({'error',{'asn1',{'unexpected',Tlv5}}})
				end
				%% Line 3691
				{'AAControls',Term1,Term2,Term3,Term4}
'enc_SecurityCategory'/1 =
    %% Line 3698
    fun (_cor0) ->
	%% Line 3699
	apply 'enc_SecurityCategory'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_SecurityCategory'/2 =
    %% Line 3701
    fun (_cor1,_cor0) ->
	%% Line 3702
	case _cor1 of
	  <{_cor9,Cindex1,Cindex2}> when 'true' ->
	      %% Line 3707
	      case apply 'encode_object_identifier'/2
		       (Cindex1, [#{#<128>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 3712
		    case apply 'encode_open_type'/2
			     (Cindex2, [#{#<161>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <BytesSoFar> =
			      %% Line 3714
			      [EncBytes1|[EncBytes2|[]]]
			  in  let <LenSoFar> =
				  %% Line 3715
				  call 'erlang':'+'
				      (EncLen1, EncLen2)
			      in  %% Line 3716
				  apply 'encode_tags'/3
				      (_cor0, BytesSoFar, LenSoFar)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_SecurityCategory'/1 =
    %% Line 3719
    fun (_cor0) ->
	%% Line 3720
	apply 'dec_SecurityCategory'/2
	    (_cor0, [16])
'dec_SecurityCategory'/2 =
    %% Line 3722
    fun (_cor1,_cor0) ->
	%% Line 3731
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 3732
		  apply 'decode_object_identifier'/2
		      (V1, [131072])
	      in  %% Line 3737
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 3738
			    apply 'decode_open_type_as_binary'/2
				(V2, [131073])
			in  do  %% Line 3740
				case Tlv3 of
				  %% Line 3741
				  <[]> when 'true' ->
				      'ok'
				  %% Line 3741
				  <_cor10> when 'true' ->
				      call 'erlang':'exit'
					  ({'error',{'asn1',{'unexpected',Tlv3}}})
				end
				%% Line 3743
				{'SecurityCategory',Term1,Term2}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_ClassList'/1 =
    %% Line 3750
    fun (_cor0) ->
	%% Line 3751
	apply 'enc_ClassList'/2
	    (_cor0, [#{#<3>(8,1,'integer',['unsigned'|['big']])}#])
'enc_ClassList'/2 =
    %% Line 3753
    fun (_cor1,_cor0) ->
	%% Line 3754
	apply 'encode_bit_string'/4
	    ([], _cor1, [{'unmarked',0}|[{'unclassified',1}|[{'restricted',2}|[{'confidential',3}|[{'secret',4}|[{'topSecret',5}]]]]]], _cor0)
'dec_ClassList'/1 =
    %% Line 3757
    fun (_cor0) ->
	%% Line 3758
	apply 'dec_ClassList'/2
	    (_cor0, [3])
'dec_ClassList'/2 =
    %% Line 3760
    fun (_cor1,_cor0) ->
	%% Line 3761
	apply 'decode_named_bit_string'/3
	    (_cor1, [{'unmarked',0}|[{'unclassified',1}|[{'restricted',2}|[{'confidential',3}|[{'secret',4}|[{'topSecret',5}]]]]]], _cor0)
'enc_Clearance'/1 =
    %% Line 3768
    fun (_cor0) ->
	%% Line 3769
	apply 'enc_Clearance'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_Clearance'/2 =
    %% Line 3771
    fun (_cor1,_cor0) ->
	%% Line 3772
	case _cor1 of
	  <{_cor15,Cindex1,Cindex2,Cindex3}> when 'true' ->
	      %% Line 3777
	      case apply 'encode_object_identifier'/2
		       (Cindex1, [#{#<128>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    let <_cor5> =
			%% Line 3782
			case apply 'is_default_4'/1
				 (Cindex2) of
			  %% Line 3783
			  <'true'> when 'true' ->
			      {[],0}
			  %% Line 3784
			  <'false'> when 'true' ->
			      %% Line 3785
			      apply 'encode_bit_string'/4
				  ([], Cindex2, [{'unmarked',0}|[{'unclassified',1}|[{'restricted',2}|[{'confidential',3}|[{'secret',4}|[{'topSecret',5}]]]]]], [#{#<129>(8,1,'integer',['unsigned'|['big']])}#])
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor4})
			    -| ['compiler_generated'] )
			end
		    in  %% Line 3782
			case _cor5 of
			  <{EncBytes2,EncLen2}> when 'true' ->
			      let <_cor8> =
				  %% Line 3791
				  case Cindex3 of
				    %% Line 3792
				    <'asn1_NOVALUE'> when 'true' ->
					{#{}#,0}
				    %% Line 3793
				    <_cor16> when 'true' ->
					%% Line 3794
					apply 'enc_Clearance_securityCategories'/2
					    (Cindex3, [#{#<162>(8,1,'integer',['unsigned'|['big']])}#])
				  end
			      in  %% Line 3791
				  case _cor8 of
				    <{EncBytes3,EncLen3}> when 'true' ->
					let <BytesSoFar> =
					    %% Line 3797
					    [EncBytes1|[EncBytes2|[EncBytes3|[]]]]
					in  let <_cor11> =
						%% Line 3798
						call 'erlang':'+'
						    (EncLen1, EncLen2)
					    in  let <LenSoFar> =
						    %% Line 3798
						    call 'erlang':'+'
							(_cor11, EncLen3)
						in  %% Line 3799
						    apply 'encode_tags'/3
							(_cor0, BytesSoFar, LenSoFar)
				    ( <_cor9> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor9})
				      -| ['compiler_generated'] )
				  end
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_Clearance_securityCategories'/2 =
    %% Line 3806
    fun (_cor1,_cor0) ->
	%% Line 3807
	case apply 'enc_Clearance_securityCategories_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 3808
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_Clearance_securityCategories_components'/3 =
    %% Line 3810
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 3811
		  apply 'dynamicsort_SETOF'/1
		      (AccBytes)
	      in  %% Line 3811
		  {_cor3,AccLen}
	  %% Line 3813
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 3814
	      case apply 'enc_SecurityCategory'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 3815
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 3815
			apply 'enc_Clearance_securityCategories_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_Clearance_securityCategories_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_Clearance_securityCategories'/2 =
    %% Line 3817
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 3821
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 3822
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_SecurityCategory'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'dec_Clearance'/1 =
    %% Line 3827
    fun (_cor0) ->
	%% Line 3828
	apply 'dec_Clearance'/2
	    (_cor0, [16])
'dec_Clearance'/2 =
    %% Line 3830
    fun (_cor1,_cor0) ->
	%% Line 3839
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 3840
		  apply 'decode_object_identifier'/2
		      (V1, [131072])
	      in  let <Term2,Tlv3> =
		      %% Line 3845
		      case Tlv2 of
			%% Line 3846
			<[{131073,V2}|TempTlv3]> when 'true' ->
			    let <_cor5> =
				%% Line 3847
				apply 'decode_named_bit_string'/3
				    (V2, [{'unmarked',0}|[{'unclassified',1}|[{'restricted',2}|[{'confidential',3}|[{'secret',4}|[{'topSecret',5}]]]]]], [])
			    in  <_cor5,%% Line 3847
				       TempTlv3>
			%% Line 3848
			<_cor16> when 'true' ->
			    %% Line 3849
			    <['unclassified'],Tlv2>
		      end
		  in  let <Term3,Tlv4> =
			  %% Line 3855
			  case Tlv3 of
			    %% Line 3856
			    <[{131074,V3}|TempTlv4]> when 'true' ->
				let <_cor9> =
				    %% Line 3857
				    apply 'dec_Clearance_securityCategories'/2
					(V3, [])
				in  <_cor9,%% Line 3857
					   TempTlv4>
			    %% Line 3858
			    <_cor17> when 'true' ->
				%% Line 3859
				<'asn1_NOVALUE',Tlv3>
			  end
		      in  do  %% Line 3862
			      case Tlv4 of
				%% Line 3863
				<[]> when 'true' ->
				    'ok'
				%% Line 3863
				<_cor18> when 'true' ->
				    call 'erlang':'exit'
					({'error',{'asn1',{'unexpected',Tlv4}}})
			      end
			      %% Line 3865
			      {'Clearance',Term1,Term2,Term3}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_RoleSyntax'/1 =
    %% Line 3872
    fun (_cor0) ->
	%% Line 3873
	apply 'enc_RoleSyntax'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_RoleSyntax'/2 =
    %% Line 3875
    fun (_cor1,_cor0) ->
	%% Line 3876
	case _cor1 of
	  <{_cor11,Cindex1,Cindex2}> when 'true' ->
	      let <_cor4> =
		  %% Line 3881
		  case Cindex1 of
		    %% Line 3882
		    <'asn1_NOVALUE'> when 'true' ->
			{#{}#,0}
		    %% Line 3883
		    <_cor12> when 'true' ->
			%% Line 3884
			apply 'enc_GeneralNames'/2
			    (Cindex1, [#{#<160>(8,1,'integer',['unsigned'|['big']])}#])
		  end
	      in  %% Line 3881
		  case _cor4 of
		    <{EncBytes1,EncLen1}> when 'true' ->
			%% Line 3890
			case apply 'enc_GeneralName'/2
				 (Cindex2, [#{#<161>(8,1,'integer',['unsigned'|['big']])}#]) of
			  <{EncBytes2,EncLen2}> when 'true' ->
			      let <BytesSoFar> =
				  %% Line 3892
				  [EncBytes1|[EncBytes2|[]]]
			      in  let <LenSoFar> =
				      %% Line 3893
				      call 'erlang':'+'
					  (EncLen1, EncLen2)
				  in  %% Line 3894
				      apply 'encode_tags'/3
					  (_cor0, BytesSoFar, LenSoFar)
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_RoleSyntax'/1 =
    %% Line 3897
    fun (_cor0) ->
	%% Line 3898
	apply 'dec_RoleSyntax'/2
	    (_cor0, [16])
'dec_RoleSyntax'/2 =
    %% Line 3900
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 3904
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <Term1,Tlv2> =
		%% Line 3909
		case Tlv1 of
		  %% Line 3910
		  <[{131072,V1}|TempTlv2]> when 'true' ->
		      let <_cor3> =
			  %% Line 3911
			  apply 'dec_GeneralNames'/2
			      (V1, [])
		      in  <_cor3,%% Line 3911
				 TempTlv2>
		  %% Line 3912
		  <_cor12> when 'true' ->
		      %% Line 3913
		      <'asn1_NOVALUE',Tlv1>
		end
	    in  %% Line 3919
		case Tlv2 of
		  <[V2|Tlv3]> when 'true' ->
		      let <Term2> =
			  %% Line 3920
			  apply 'dec_GeneralName'/2
			      (V2, [131073])
		      in  do  %% Line 3922
			      case Tlv3 of
				%% Line 3923
				<[]> when 'true' ->
				    'ok'
				%% Line 3923
				<_cor13> when 'true' ->
				    call 'erlang':'exit'
					({'error',{'asn1',{'unexpected',Tlv3}}})
			      end
			      %% Line 3925
			      {'RoleSyntax',Term1,Term2}
		  ( <_cor7> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor7})
		    -| ['compiler_generated'] )
		end
'enc_SvceAuthInfo'/1 =
    %% Line 3932
    fun (_cor0) ->
	%% Line 3933
	apply 'enc_SvceAuthInfo'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_SvceAuthInfo'/2 =
    %% Line 3935
    fun (_cor1,_cor0) ->
	%% Line 3936
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2,Cindex3}> when 'true' ->
	      %% Line 3941
	      case apply 'enc_GeneralName'/2
		       (Cindex1, []) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 3946
		    case apply 'enc_GeneralName'/2
			     (Cindex2, []) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <_cor6> =
			      %% Line 3951
			      case Cindex3 of
				%% Line 3952
				<'asn1_NOVALUE'> when 'true' ->
				    {#{}#,0}
				%% Line 3953
				<_cor14> when 'true' ->
				    %% Line 3954
				    apply 'encode_restricted_string'/2
					(Cindex3, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#])
			      end
			  in  %% Line 3951
			      case _cor6 of
				<{EncBytes3,EncLen3}> when 'true' ->
				    let <BytesSoFar> =
					%% Line 3957
					[EncBytes1|[EncBytes2|[EncBytes3|[]]]]
				    in  let <_cor9> =
					    %% Line 3958
					    call 'erlang':'+'
						(EncLen1, EncLen2)
					in  let <LenSoFar> =
						%% Line 3958
						call 'erlang':'+'
						    (_cor9, EncLen3)
					    in  %% Line 3959
						apply 'encode_tags'/3
						    (_cor0, BytesSoFar, LenSoFar)
				( <_cor7> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor7})
				  -| ['compiler_generated'] )
			      end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_SvceAuthInfo'/1 =
    %% Line 3962
    fun (_cor0) ->
	%% Line 3963
	apply 'dec_SvceAuthInfo'/2
	    (_cor0, [16])
'dec_SvceAuthInfo'/2 =
    %% Line 3965
    fun (_cor1,_cor0) ->
	%% Line 3974
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 3975
		  apply 'dec_GeneralName'/2
		      (V1, [])
	      in  %% Line 3980
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 3981
			    apply 'dec_GeneralName'/2
				(V2, [])
			in  let <Term3,Tlv4> =
				%% Line 3986
				case Tlv3 of
				  %% Line 3987
				  <[{4,V3}|TempTlv4]> when 'true' ->
				      let <_cor7> =
					  %% Line 3989
					  apply 'decode_restricted_string'/2
					      (V3, [])
				      in  let <_cor8> =
					      %% Line 3989
					      call 'erlang':'binary_to_list'
						  (_cor7)
					  in  <_cor8,%% Line 3991
						     TempTlv4>
				  %% Line 3992
				  <_cor15> when 'true' ->
				      %% Line 3993
				      <'asn1_NOVALUE',Tlv3>
				end
			    in  do  %% Line 3996
				    case Tlv4 of
				      %% Line 3997
				      <[]> when 'true' ->
					  'ok'
				      %% Line 3997
				      <_cor16> when 'true' ->
					  call 'erlang':'exit'
					      ({'error',{'asn1',{'unexpected',Tlv4}}})
				    end
				    %% Line 3999
				    {'SvceAuthInfo',Term1,Term2,Term3}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_IetfAttrSyntax'/1 =
    %% Line 4006
    fun (_cor0) ->
	%% Line 4007
	apply 'enc_IetfAttrSyntax'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_IetfAttrSyntax'/2 =
    %% Line 4009
    fun (_cor1,_cor0) ->
	%% Line 4010
	case _cor1 of
	  <{_cor11,Cindex1,Cindex2}> when 'true' ->
	      let <_cor4> =
		  %% Line 4015
		  case Cindex1 of
		    %% Line 4016
		    <'asn1_NOVALUE'> when 'true' ->
			{#{}#,0}
		    %% Line 4017
		    <_cor12> when 'true' ->
			%% Line 4018
			apply 'enc_GeneralNames'/2
			    (Cindex1, [#{#<160>(8,1,'integer',['unsigned'|['big']])}#])
		  end
	      in  %% Line 4015
		  case _cor4 of
		    <{EncBytes1,EncLen1}> when 'true' ->
			%% Line 4024
			case apply 'enc_IetfAttrSyntax_values'/2
				 (Cindex2, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
			  <{EncBytes2,EncLen2}> when 'true' ->
			      let <BytesSoFar> =
				  %% Line 4026
				  [EncBytes1|[EncBytes2|[]]]
			      in  let <LenSoFar> =
				      %% Line 4027
				      call 'erlang':'+'
					  (EncLen1, EncLen2)
				  in  %% Line 4028
				      apply 'encode_tags'/3
					  (_cor0, BytesSoFar, LenSoFar)
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_IetfAttrSyntax_values'/2 =
    %% Line 4035
    fun (_cor1,_cor0) ->
	%% Line 4036
	case apply 'enc_IetfAttrSyntax_values_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 4037
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_IetfAttrSyntax_values_components'/3 =
    %% Line 4039
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 4040
		  call 'lists':'reverse'
		      (AccBytes)
	      in  %% Line 4040
		  {_cor3,AccLen}
	  %% Line 4042
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 4043
	      case apply 'enc_IetfAttrSyntax_values_SEQOF'/2
		       (H, []) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 4044
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 4044
			apply 'enc_IetfAttrSyntax_values_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_IetfAttrSyntax_values_components',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_IetfAttrSyntax_values_SEQOF'/2 =
    %% Line 4052
    fun (_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 4053
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 4054
	      <'octets'> when 'true' ->
		  let <_cor2> =
		      %% Line 4055
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 4055
		      apply 'encode_restricted_string'/2
			  (_cor2, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 4056
	      <'oid'> when 'true' ->
		  let <_cor3> =
		      %% Line 4057
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 4057
		      apply 'encode_object_identifier'/2
			  (_cor3, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 4058
	      <'string'> when 'true' ->
		  let <_cor4> =
		      %% Line 4059
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 4059
		      apply 'encode_UTF8_string'/2
			  (_cor4, [#{#<12>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 4060
	      <Else> when 'true' ->
		  %% Line 4061
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 4053
	    case _cor6 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 4064
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor7> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor7})
		-| ['compiler_generated'] )
	    end
'dec_IetfAttrSyntax_values_SEQOF'/2 =
    %% Line 4067
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 4068
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 4069
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor12> when 'true' ->
		      Tlv1
		end
	    in  %% Line 4069
		case _cor4 of
		  %% Line 4072
		  <{4,V1}> when 'true' ->
		      let <_cor5> =
			  %% Line 4074
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <_cor6> =
			      %% Line 4074
			      call 'erlang':'binary_to_list'
				  (_cor5)
			  in  %% Line 4073
			      {'octets',_cor6}
		  %% Line 4080
		  <{6,V1}> when 'true' ->
		      let <_cor7> =
			  %% Line 4081
			  apply 'decode_object_identifier'/2
			      (V1, [])
		      in  %% Line 4081
			  {'oid',_cor7}
		  %% Line 4085
		  <{12,V1}> when 'true' ->
		      let <_cor8> =
			  %% Line 4086
			  apply 'decode_UTF8_string'/2
			      (V1, [])
		      in  %% Line 4086
			  {'string',_cor8}
		  %% Line 4088
		  <Else> when 'true' ->
		      %% Line 4089
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'dec_IetfAttrSyntax_values'/2 =
    %% Line 4092
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 4096
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 4097
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_IetfAttrSyntax_values_SEQOF'/2
					(V1, [])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'dec_IetfAttrSyntax'/1 =
    %% Line 4102
    fun (_cor0) ->
	%% Line 4103
	apply 'dec_IetfAttrSyntax'/2
	    (_cor0, [16])
'dec_IetfAttrSyntax'/2 =
    %% Line 4105
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 4109
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <Term1,Tlv2> =
		%% Line 4114
		case Tlv1 of
		  %% Line 4115
		  <[{131072,V1}|TempTlv2]> when 'true' ->
		      let <_cor3> =
			  %% Line 4116
			  apply 'dec_GeneralNames'/2
			      (V1, [])
		      in  <_cor3,%% Line 4116
				 TempTlv2>
		  %% Line 4117
		  <_cor12> when 'true' ->
		      %% Line 4118
		      <'asn1_NOVALUE',Tlv1>
		end
	    in  %% Line 4124
		case Tlv2 of
		  <[V2|Tlv3]> when 'true' ->
		      let <Term2> =
			  %% Line 4125
			  apply 'dec_IetfAttrSyntax_values'/2
			      (V2, [16])
		      in  do  %% Line 4127
			      case Tlv3 of
				%% Line 4128
				<[]> when 'true' ->
				    'ok'
				%% Line 4128
				<_cor13> when 'true' ->
				    call 'erlang':'exit'
					({'error',{'asn1',{'unexpected',Tlv3}}})
			      end
			      %% Line 4130
			      {'IetfAttrSyntax',Term1,Term2}
		  ( <_cor7> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor7})
		    -| ['compiler_generated'] )
		end
'enc_TargetCert'/1 =
    %% Line 4137
    fun (_cor0) ->
	%% Line 4138
	apply 'enc_TargetCert'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_TargetCert'/2 =
    %% Line 4140
    fun (_cor1,_cor0) ->
	%% Line 4141
	case _cor1 of
	  <{_cor15,Cindex1,Cindex2,Cindex3}> when 'true' ->
	      %% Line 4146
	      case apply 'enc_IssuerSerial'/2
		       (Cindex1, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    let <_cor5> =
			%% Line 4151
			case Cindex2 of
			  %% Line 4152
			  <'asn1_NOVALUE'> when 'true' ->
			      {#{}#,0}
			  %% Line 4153
			  <_cor16> when 'true' ->
			      %% Line 4154
			      apply 'enc_GeneralName'/2
				  (Cindex2, [])
			end
		    in  %% Line 4151
			case _cor5 of
			  <{EncBytes2,EncLen2}> when 'true' ->
			      let <_cor8> =
				  %% Line 4160
				  case Cindex3 of
				    %% Line 4161
				    <'asn1_NOVALUE'> when 'true' ->
					{#{}#,0}
				    %% Line 4162
				    <_cor17> when 'true' ->
					%% Line 4163
					apply 'enc_ObjectDigestInfo'/2
					    (Cindex3, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
				  end
			      in  %% Line 4160
				  case _cor8 of
				    <{EncBytes3,EncLen3}> when 'true' ->
					let <BytesSoFar> =
					    %% Line 4166
					    [EncBytes1|[EncBytes2|[EncBytes3|[]]]]
					in  let <_cor11> =
						%% Line 4167
						call 'erlang':'+'
						    (EncLen1, EncLen2)
					    in  let <LenSoFar> =
						    %% Line 4167
						    call 'erlang':'+'
							(_cor11, EncLen3)
						in  %% Line 4168
						    apply 'encode_tags'/3
							(_cor0, BytesSoFar, LenSoFar)
				    ( <_cor9> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor9})
				      -| ['compiler_generated'] )
				  end
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_TargetCert'/1 =
    %% Line 4171
    fun (_cor0) ->
	%% Line 4172
	apply 'dec_TargetCert'/2
	    (_cor0, [16])
'dec_TargetCert'/2 =
    %% Line 4174
    fun (_cor1,_cor0) ->
	%% Line 4183
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 4184
		  apply 'dec_IssuerSerial'/2
		      (V1, [16])
	      in  let <Term2,Tlv3> =
		      %% Line 4189
		      case Tlv2 of
			%% Line 4190
			<[V2 = {131072,_cor24}|TempTlv3]> when 'true' ->
			    let <_cor5> =
				%% Line 4191
				apply 'dec_GeneralName'/2
				    (V2, [])
			    in  <_cor5,%% Line 4191
				       TempTlv3>
			%% Line 4192
			<[V2 = {131073,_cor25}|TempTlv3]> when 'true' ->
			    let <_cor6> =
				%% Line 4193
				apply 'dec_GeneralName'/2
				    (V2, [])
			    in  <_cor6,%% Line 4193
				       TempTlv3>
			%% Line 4194
			<[V2 = {131074,_cor26}|TempTlv3]> when 'true' ->
			    let <_cor7> =
				%% Line 4195
				apply 'dec_GeneralName'/2
				    (V2, [])
			    in  <_cor7,%% Line 4195
				       TempTlv3>
			%% Line 4196
			<[V2 = {131075,_cor27}|TempTlv3]> when 'true' ->
			    let <_cor8> =
				%% Line 4197
				apply 'dec_GeneralName'/2
				    (V2, [])
			    in  <_cor8,%% Line 4197
				       TempTlv3>
			%% Line 4198
			<[V2 = {131076,_cor28}|TempTlv3]> when 'true' ->
			    let <_cor9> =
				%% Line 4199
				apply 'dec_GeneralName'/2
				    (V2, [])
			    in  <_cor9,%% Line 4199
				       TempTlv3>
			%% Line 4200
			<[V2 = {131077,_cor29}|TempTlv3]> when 'true' ->
			    let <_cor10> =
				%% Line 4201
				apply 'dec_GeneralName'/2
				    (V2, [])
			    in  <_cor10,%% Line 4201
					TempTlv3>
			%% Line 4202
			<[V2 = {131078,_cor30}|TempTlv3]> when 'true' ->
			    let <_cor11> =
				%% Line 4203
				apply 'dec_GeneralName'/2
				    (V2, [])
			    in  <_cor11,%% Line 4203
					TempTlv3>
			%% Line 4204
			<[V2 = {131079,_cor31}|TempTlv3]> when 'true' ->
			    let <_cor12> =
				%% Line 4205
				apply 'dec_GeneralName'/2
				    (V2, [])
			    in  <_cor12,%% Line 4205
					TempTlv3>
			%% Line 4206
			<[V2 = {131080,_cor32}|TempTlv3]> when 'true' ->
			    let <_cor13> =
				%% Line 4207
				apply 'dec_GeneralName'/2
				    (V2, [])
			    in  <_cor13,%% Line 4207
					TempTlv3>
			%% Line 4208
			<_cor33> when 'true' ->
			    %% Line 4209
			    <'asn1_NOVALUE',Tlv2>
		      end
		  in  let <Term3,Tlv4> =
			  %% Line 4215
			  case Tlv3 of
			    %% Line 4216
			    <[{16,V3}|TempTlv4]> when 'true' ->
				let <_cor17> =
				    %% Line 4217
				    apply 'dec_ObjectDigestInfo'/2
					(V3, [])
				in  <_cor17,%% Line 4217
					    TempTlv4>
			    %% Line 4218
			    <_cor34> when 'true' ->
				%% Line 4219
				<'asn1_NOVALUE',Tlv3>
			  end
		      in  do  %% Line 4222
			      case Tlv4 of
				%% Line 4223
				<[]> when 'true' ->
				    'ok'
				%% Line 4223
				<_cor35> when 'true' ->
				    call 'erlang':'exit'
					({'error',{'asn1',{'unexpected',Tlv4}}})
			      end
			      %% Line 4225
			      {'TargetCert',Term1,Term2,Term3}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_Target'/1 =
    %% Line 4232
    fun (_cor0) ->
	%% Line 4233
	apply 'enc_Target'/2
	    (_cor0, [])
'enc_Target'/2 =
    %% Line 4235
    fun (_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 4236
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 4237
	      <'targetName'> when 'true' ->
		  let <_cor2> =
		      %% Line 4238
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 4238
		      apply 'enc_GeneralName'/2
			  (_cor2, [#{#<160>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 4239
	      <'targetGroup'> when 'true' ->
		  let <_cor3> =
		      %% Line 4240
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 4240
		      apply 'enc_GeneralName'/2
			  (_cor3, [#{#<161>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 4241
	      <'targetCert'> when 'true' ->
		  let <_cor4> =
		      %% Line 4242
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 4242
		      apply 'enc_TargetCert'/2
			  (_cor4, [#{#<162>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 4243
	      <Else> when 'true' ->
		  %% Line 4244
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 4236
	    case _cor6 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 4247
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor7> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor7})
		-| ['compiler_generated'] )
	    end
'dec_Target'/1 =
    %% Line 4252
    fun (_cor0) ->
	%% Line 4253
	apply 'dec_Target'/2
	    (_cor0, [])
'dec_Target'/2 =
    %% Line 4255
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 4256
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 4257
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor11> when 'true' ->
		      Tlv1
		end
	    in  %% Line 4257
		case _cor4 of
		  %% Line 4260
		  <{131072,V1}> when 'true' ->
		      let <_cor5> =
			  %% Line 4261
			  apply 'dec_GeneralName'/2
			      (V1, [])
		      in  %% Line 4261
			  {'targetName',_cor5}
		  %% Line 4265
		  <{131073,V1}> when 'true' ->
		      let <_cor6> =
			  %% Line 4266
			  apply 'dec_GeneralName'/2
			      (V1, [])
		      in  %% Line 4266
			  {'targetGroup',_cor6}
		  %% Line 4270
		  <{131074,V1}> when 'true' ->
		      let <_cor7> =
			  %% Line 4271
			  apply 'dec_TargetCert'/2
			      (V1, [])
		      in  %% Line 4271
			  {'targetCert',_cor7}
		  %% Line 4273
		  <Else> when 'true' ->
		      %% Line 4274
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'enc_Targets'/1 =
    %% Line 4282
    fun (_cor0) ->
	%% Line 4283
	apply 'enc_Targets'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_Targets'/2 =
    %% Line 4285
    fun (_cor1,_cor0) ->
	%% Line 4286
	case apply 'enc_Targets_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 4287
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_Targets_components'/3 =
    %% Line 4289
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 4290
		  call 'lists':'reverse'
		      (AccBytes)
	      in  %% Line 4290
		  {_cor3,AccLen}
	  %% Line 4292
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 4293
	      case apply 'enc_Target'/2
		       (H, []) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 4294
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 4294
			apply 'enc_Targets_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_Targets_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_Targets'/1 =
    %% Line 4298
    fun (_cor0) ->
	%% Line 4299
	apply 'dec_Targets'/2
	    (_cor0, [16])
'dec_Targets'/2 =
    %% Line 4301
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 4305
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 4306
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_Target'/2
					(V1, [])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'enc_AttCertValidityPeriod'/1 =
    %% Line 4314
    fun (_cor0) ->
	%% Line 4315
	apply 'enc_AttCertValidityPeriod'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_AttCertValidityPeriod'/2 =
    %% Line 4317
    fun (_cor1,_cor0) ->
	%% Line 4318
	case _cor1 of
	  <{_cor9,Cindex1,Cindex2}> when 'true' ->
	      %% Line 4323
	      case apply 'encode_restricted_string'/2
		       (Cindex1, [#{#<24>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 4328
		    case apply 'encode_restricted_string'/2
			     (Cindex2, [#{#<24>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <BytesSoFar> =
			      %% Line 4330
			      [EncBytes1|[EncBytes2|[]]]
			  in  let <LenSoFar> =
				  %% Line 4331
				  call 'erlang':'+'
				      (EncLen1, EncLen2)
			      in  %% Line 4332
				  apply 'encode_tags'/3
				      (_cor0, BytesSoFar, LenSoFar)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_AttCertValidityPeriod'/1 =
    %% Line 4335
    fun (_cor0) ->
	%% Line 4336
	apply 'dec_AttCertValidityPeriod'/2
	    (_cor0, [16])
'dec_AttCertValidityPeriod'/2 =
    %% Line 4338
    fun (_cor1,_cor0) ->
	%% Line 4347
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <_cor4> =
		  %% Line 4349
		  apply 'decode_restricted_string'/2
		      (V1, [24])
	      in  let <Term1> =
		      %% Line 4349
		      call 'erlang':'binary_to_list'
			  (_cor4)
		  in  %% Line 4356
		      case Tlv2 of
			<[V2|Tlv3]> when 'true' ->
			    let <_cor7> =
				%% Line 4358
				apply 'decode_restricted_string'/2
				    (V2, [24])
			    in  let <Term2> =
				    %% Line 4358
				    call 'erlang':'binary_to_list'
					(_cor7)
				in  do  %% Line 4362
					case Tlv3 of
					  %% Line 4363
					  <[]> when 'true' ->
					      'ok'
					  %% Line 4363
					  <_cor12> when 'true' ->
					      call 'erlang':'exit'
						  ({'error',{'asn1',{'unexpected',Tlv3}}})
					end
					%% Line 4365
					{'AttCertValidityPeriod',Term1,Term2}
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_IssuerSerial'/1 =
    %% Line 4372
    fun (_cor0) ->
	%% Line 4373
	apply 'enc_IssuerSerial'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_IssuerSerial'/2 =
    %% Line 4375
    fun (_cor1,_cor0) ->
	%% Line 4376
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2,Cindex3}> when 'true' ->
	      %% Line 4381
	      case apply 'enc_GeneralNames'/2
		       (Cindex1, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 4386
		    case apply 'encode_integer'/2
			     (Cindex2, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <_cor6> =
			      %% Line 4391
			      case Cindex3 of
				%% Line 4392
				<'asn1_NOVALUE'> when 'true' ->
				    {#{}#,0}
				%% Line 4393
				<_cor14> when 'true' ->
				    %% Line 4394
				    apply 'encode_bit_string'/4
					([], Cindex3, [], [#{#<3>(8,1,'integer',['unsigned'|['big']])}#])
			      end
			  in  %% Line 4391
			      case _cor6 of
				<{EncBytes3,EncLen3}> when 'true' ->
				    let <BytesSoFar> =
					%% Line 4397
					[EncBytes1|[EncBytes2|[EncBytes3|[]]]]
				    in  let <_cor9> =
					    %% Line 4398
					    call 'erlang':'+'
						(EncLen1, EncLen2)
					in  let <LenSoFar> =
						%% Line 4398
						call 'erlang':'+'
						    (_cor9, EncLen3)
					    in  %% Line 4399
						apply 'encode_tags'/3
						    (_cor0, BytesSoFar, LenSoFar)
				( <_cor7> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor7})
				  -| ['compiler_generated'] )
			      end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_IssuerSerial'/1 =
    %% Line 4402
    fun (_cor0) ->
	%% Line 4403
	apply 'dec_IssuerSerial'/2
	    (_cor0, [16])
'dec_IssuerSerial'/2 =
    %% Line 4405
    fun (_cor1,_cor0) ->
	%% Line 4414
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 4415
		  apply 'dec_GeneralNames'/2
		      (V1, [16])
	      in  %% Line 4420
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 4421
			    apply 'decode_integer'/2
				(V2, [2])
			in  let <Term3,Tlv4> =
				%% Line 4426
				case Tlv3 of
				  %% Line 4427
				  <[{3,V3}|TempTlv4]> when 'true' ->
				      let <_cor7> =
					  %% Line 4428
					  apply 'decode_compact_bit_string'/2
					      (V3, [])
				      in  <_cor7,%% Line 4428
						 TempTlv4>
				  %% Line 4429
				  <_cor14> when 'true' ->
				      %% Line 4430
				      <'asn1_NOVALUE',Tlv3>
				end
			    in  do  %% Line 4433
				    case Tlv4 of
				      %% Line 4434
				      <[]> when 'true' ->
					  'ok'
				      %% Line 4434
				      <_cor15> when 'true' ->
					  call 'erlang':'exit'
					      ({'error',{'asn1',{'unexpected',Tlv4}}})
				    end
				    %% Line 4436
				    {'IssuerSerial',Term1,Term2,Term3}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_V2Form'/1 =
    %% Line 4443
    fun (_cor0) ->
	%% Line 4444
	apply 'enc_V2Form'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_V2Form'/2 =
    %% Line 4446
    fun (_cor1,_cor0) ->
	%% Line 4447
	case _cor1 of
	  <{_cor17,Cindex1,Cindex2,Cindex3}> when 'true' ->
	      let <_cor4> =
		  %% Line 4452
		  case Cindex1 of
		    %% Line 4453
		    <'asn1_NOVALUE'> when 'true' ->
			{#{}#,0}
		    %% Line 4454
		    <_cor18> when 'true' ->
			%% Line 4455
			apply 'enc_GeneralNames'/2
			    (Cindex1, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
		  end
	      in  %% Line 4452
		  case _cor4 of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor7> =
			    %% Line 4461
			    case Cindex2 of
			      %% Line 4462
			      <'asn1_NOVALUE'> when 'true' ->
				  {#{}#,0}
			      %% Line 4463
			      <_cor19> when 'true' ->
				  %% Line 4464
				  apply 'enc_IssuerSerial'/2
				      (Cindex2, [#{#<160>(8,1,'integer',['unsigned'|['big']])}#])
			    end
			in  %% Line 4461
			    case _cor7 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  let <_cor10> =
				      %% Line 4470
				      case Cindex3 of
					%% Line 4471
					<'asn1_NOVALUE'> when 'true' ->
					    {#{}#,0}
					%% Line 4472
					<_cor20> when 'true' ->
					    %% Line 4473
					    apply 'enc_ObjectDigestInfo'/2
						(Cindex3, [#{#<161>(8,1,'integer',['unsigned'|['big']])}#])
				      end
				  in  %% Line 4470
				      case _cor10 of
					<{EncBytes3,EncLen3}> when 'true' ->
					    let <BytesSoFar> =
						%% Line 4476
						[EncBytes1|[EncBytes2|[EncBytes3|[]]]]
					    in  let <_cor13> =
						    %% Line 4477
						    call 'erlang':'+'
							(EncLen1, EncLen2)
						in  let <LenSoFar> =
							%% Line 4477
							call 'erlang':'+'
							    (_cor13, EncLen3)
						    in  %% Line 4478
							apply 'encode_tags'/3
							    (_cor0, BytesSoFar, LenSoFar)
					( <_cor11> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor11})
					  -| ['compiler_generated'] )
				      end
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_V2Form'/1 =
    %% Line 4481
    fun (_cor0) ->
	%% Line 4482
	apply 'dec_V2Form'/2
	    (_cor0, [16])
'dec_V2Form'/2 =
    %% Line 4484
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 4488
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <Term1,Tlv2> =
		%% Line 4493
		case Tlv1 of
		  %% Line 4494
		  <[{16,V1}|TempTlv2]> when 'true' ->
		      let <_cor3> =
			  %% Line 4495
			  apply 'dec_GeneralNames'/2
			      (V1, [])
		      in  <_cor3,%% Line 4495
				 TempTlv2>
		  %% Line 4496
		  <_cor18> when 'true' ->
		      %% Line 4497
		      <'asn1_NOVALUE',Tlv1>
		end
	    in  let <Term2,Tlv3> =
		    %% Line 4503
		    case Tlv2 of
		      %% Line 4504
		      <[{131072,V2}|TempTlv3]> when 'true' ->
			  let <_cor7> =
			      %% Line 4505
			      apply 'dec_IssuerSerial'/2
				  (V2, [])
			  in  <_cor7,%% Line 4505
				     TempTlv3>
		      %% Line 4506
		      <_cor19> when 'true' ->
			  %% Line 4507
			  <'asn1_NOVALUE',Tlv2>
		    end
		in  let <Term3,Tlv4> =
			%% Line 4513
			case Tlv3 of
			  %% Line 4514
			  <[{131073,V3}|TempTlv4]> when 'true' ->
			      let <_cor11> =
				  %% Line 4515
				  apply 'dec_ObjectDigestInfo'/2
				      (V3, [])
			      in  <_cor11,%% Line 4515
					  TempTlv4>
			  %% Line 4516
			  <_cor20> when 'true' ->
			      %% Line 4517
			      <'asn1_NOVALUE',Tlv3>
			end
		    in  do  %% Line 4520
			    case Tlv4 of
			      %% Line 4521
			      <[]> when 'true' ->
				  'ok'
			      %% Line 4521
			      <_cor21> when 'true' ->
				  call 'erlang':'exit'
				      ({'error',{'asn1',{'unexpected',Tlv4}}})
			    end
			    %% Line 4523
			    {'V2Form',Term1,Term2,Term3}
'enc_AttCertIssuer'/1 =
    %% Line 4530
    fun (_cor0) ->
	%% Line 4531
	apply 'enc_AttCertIssuer'/2
	    (_cor0, [])
'enc_AttCertIssuer'/2 =
    %% Line 4533
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 4534
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 4535
	      <'v1Form'> when 'true' ->
		  let <_cor2> =
		      %% Line 4536
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 4536
		      apply 'enc_GeneralNames'/2
			  (_cor2, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 4537
	      <'v2Form'> when 'true' ->
		  let <_cor3> =
		      %% Line 4538
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 4538
		      apply 'enc_V2Form'/2
			  (_cor3, [#{#<160>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 4539
	      <Else> when 'true' ->
		  %% Line 4540
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 4534
	    case _cor5 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 4543
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor6})
		-| ['compiler_generated'] )
	    end
'dec_AttCertIssuer'/1 =
    %% Line 4548
    fun (_cor0) ->
	%% Line 4549
	apply 'dec_AttCertIssuer'/2
	    (_cor0, [])
'dec_AttCertIssuer'/2 =
    %% Line 4551
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 4552
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 4553
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor10> when 'true' ->
		      Tlv1
		end
	    in  %% Line 4553
		case _cor4 of
		  %% Line 4556
		  <{16,V1}> when 'true' ->
		      let <_cor5> =
			  %% Line 4557
			  apply 'dec_GeneralNames'/2
			      (V1, [])
		      in  %% Line 4557
			  {'v1Form',_cor5}
		  %% Line 4561
		  <{131072,V1}> when 'true' ->
		      let <_cor6> =
			  %% Line 4562
			  apply 'dec_V2Form'/2
			      (V1, [])
		      in  %% Line 4562
			  {'v2Form',_cor6}
		  %% Line 4564
		  <Else> when 'true' ->
		      %% Line 4565
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'enc_ObjectDigestInfo'/1 =
    %% Line 4573
    fun (_cor0) ->
	%% Line 4574
	apply 'enc_ObjectDigestInfo'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_ObjectDigestInfo'/2 =
    %% Line 4576
    fun (_cor1,_cor0) ->
	%% Line 4577
	case _cor1 of
	  <{_cor17,Cindex1,Cindex2,Cindex3,Cindex4}> when 'true' ->
	      let <_cor4> =
		  %% Line 4582
		  case Cindex1 of
		    %% Line 4583
		    <'publicKey'> when 'true' ->
			apply 'encode_tags'/3
			    ([#{#<10>(8,1,'integer',['unsigned'|['big']])}#], [0], 1)
		    %% Line 4584
		    <'publicKeyCert'> when 'true' ->
			apply 'encode_tags'/3
			    ([#{#<10>(8,1,'integer',['unsigned'|['big']])}#], [1], 1)
		    %% Line 4585
		    <'otherObjectTypes'> when 'true' ->
			apply 'encode_tags'/3
			    ([#{#<10>(8,1,'integer',['unsigned'|['big']])}#], [2], 1)
		    %% Line 4586
		    <Enumval1> when 'true' ->
			call 'erlang':'exit'
			    ({'error',{'asn1',{'enumerated_not_in_range',Enumval1}}})
		  end
	      in  %% Line 4582
		  case _cor4 of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor7> =
			    %% Line 4592
			    case Cindex2 of
			      %% Line 4593
			      <'asn1_NOVALUE'> when 'true' ->
				  {#{}#,0}
			      %% Line 4594
			      <_cor18> when 'true' ->
				  %% Line 4595
				  apply 'encode_object_identifier'/2
				      (Cindex2, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#])
			    end
			in  %% Line 4592
			    case _cor7 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  %% Line 4601
				  case apply 'enc_AlgorithmIdentifier'/2
					   (Cindex3, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
				    <{EncBytes3,EncLen3}> when 'true' ->
					%% Line 4606
					case apply 'encode_bit_string'/4
						 ([], Cindex4, [], [#{#<3>(8,1,'integer',['unsigned'|['big']])}#]) of
					  <{EncBytes4,EncLen4}> when 'true' ->
					      let <BytesSoFar> =
						  %% Line 4608
						  [EncBytes1|[EncBytes2|[EncBytes3|[EncBytes4|[]]]]]
					      in  let <_cor12> =
						      %% Line 4609
						      call 'erlang':'+'
							  (EncLen1, EncLen2)
						  in  let <_cor13> =
							  %% Line 4609
							  call 'erlang':'+'
							      (_cor12, EncLen3)
						      in  let <LenSoFar> =
							      %% Line 4609
							      call 'erlang':'+'
								  (_cor13, EncLen4)
							  in  %% Line 4610
							      apply 'encode_tags'/3
								  (_cor0, BytesSoFar, LenSoFar)
					  ( <_cor10> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor10})
					    -| ['compiler_generated'] )
					end
				    ( <_cor9> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor9})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_ObjectDigestInfo'/1 =
    %% Line 4613
    fun (_cor0) ->
	%% Line 4614
	apply 'dec_ObjectDigestInfo'/2
	    (_cor0, [16])
'dec_ObjectDigestInfo'/2 =
    %% Line 4616
    fun (_cor1,_cor0) ->
	%% Line 4625
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <_cor5> =
		  %% Line 4626
		  case apply 'decode_integer'/2
			   (V1, [10]) of
		    %% Line 4627
		    <0> when 'true' ->
			'publicKey'
		    %% Line 4628
		    <1> when 'true' ->
			'publicKeyCert'
		    %% Line 4629
		    <2> when 'true' ->
			'otherObjectTypes'
		    %% Line 4630
		    <Default1> when 'true' ->
			call 'erlang':'exit'
			    ({'error',{'asn1',{'illegal_enumerated',Default1}}})
		  end
	      in  let <Term2,Tlv3> =
		      %% Line 4636
		      case Tlv2 of
			%% Line 4637
			<[{6,V2}|TempTlv3]> when 'true' ->
			    let <_cor7> =
				%% Line 4638
				apply 'decode_object_identifier'/2
				    (V2, [])
			    in  <_cor7,%% Line 4638
				       TempTlv3>
			%% Line 4639
			<_cor18> when 'true' ->
			    %% Line 4640
			    <'asn1_NOVALUE',Tlv2>
		      end
		  in  %% Line 4646
		      case Tlv3 of
			<[V3|Tlv4]> when 'true' ->
			    let <Term3> =
				%% Line 4647
				apply 'dec_AlgorithmIdentifier'/2
				    (V3, [16])
			    in  %% Line 4652
				case Tlv4 of
				  <[V4|Tlv5]> when 'true' ->
				      let <Term4> =
					  %% Line 4653
					  apply 'decode_compact_bit_string'/2
					      (V4, [3])
				      in  do  %% Line 4655
					      case Tlv5 of
						%% Line 4656
						<[]> when 'true' ->
						    'ok'
						%% Line 4656
						<_cor19> when 'true' ->
						    call 'erlang':'exit'
							({'error',{'asn1',{'unexpected',Tlv5}}})
					      end
					      %% Line 4658
					      {'ObjectDigestInfo',_cor5,Term2,Term3,Term4}
				  ( <_cor13> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor13})
				    -| ['compiler_generated'] )
				end
			( <_cor11> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor11})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_Holder'/1 =
    %% Line 4665
    fun (_cor0) ->
	%% Line 4666
	apply 'enc_Holder'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_Holder'/2 =
    %% Line 4668
    fun (_cor1,_cor0) ->
	%% Line 4669
	case _cor1 of
	  <{_cor17,Cindex1,Cindex2,Cindex3}> when 'true' ->
	      let <_cor4> =
		  %% Line 4674
		  case Cindex1 of
		    %% Line 4675
		    <'asn1_NOVALUE'> when 'true' ->
			{#{}#,0}
		    %% Line 4676
		    <_cor18> when 'true' ->
			%% Line 4677
			apply 'enc_IssuerSerial'/2
			    (Cindex1, [#{#<160>(8,1,'integer',['unsigned'|['big']])}#])
		  end
	      in  %% Line 4674
		  case _cor4 of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor7> =
			    %% Line 4683
			    case Cindex2 of
			      %% Line 4684
			      <'asn1_NOVALUE'> when 'true' ->
				  {#{}#,0}
			      %% Line 4685
			      <_cor19> when 'true' ->
				  %% Line 4686
				  apply 'enc_GeneralNames'/2
				      (Cindex2, [#{#<161>(8,1,'integer',['unsigned'|['big']])}#])
			    end
			in  %% Line 4683
			    case _cor7 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  let <_cor10> =
				      %% Line 4692
				      case Cindex3 of
					%% Line 4693
					<'asn1_NOVALUE'> when 'true' ->
					    {#{}#,0}
					%% Line 4694
					<_cor20> when 'true' ->
					    %% Line 4695
					    apply 'enc_ObjectDigestInfo'/2
						(Cindex3, [#{#<162>(8,1,'integer',['unsigned'|['big']])}#])
				      end
				  in  %% Line 4692
				      case _cor10 of
					<{EncBytes3,EncLen3}> when 'true' ->
					    let <BytesSoFar> =
						%% Line 4698
						[EncBytes1|[EncBytes2|[EncBytes3|[]]]]
					    in  let <_cor13> =
						    %% Line 4699
						    call 'erlang':'+'
							(EncLen1, EncLen2)
						in  let <LenSoFar> =
							%% Line 4699
							call 'erlang':'+'
							    (_cor13, EncLen3)
						    in  %% Line 4700
							apply 'encode_tags'/3
							    (_cor0, BytesSoFar, LenSoFar)
					( <_cor11> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor11})
					  -| ['compiler_generated'] )
				      end
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_Holder'/1 =
    %% Line 4703
    fun (_cor0) ->
	%% Line 4704
	apply 'dec_Holder'/2
	    (_cor0, [16])
'dec_Holder'/2 =
    %% Line 4706
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 4710
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <Term1,Tlv2> =
		%% Line 4715
		case Tlv1 of
		  %% Line 4716
		  <[{131072,V1}|TempTlv2]> when 'true' ->
		      let <_cor3> =
			  %% Line 4717
			  apply 'dec_IssuerSerial'/2
			      (V1, [])
		      in  <_cor3,%% Line 4717
				 TempTlv2>
		  %% Line 4718
		  <_cor18> when 'true' ->
		      %% Line 4719
		      <'asn1_NOVALUE',Tlv1>
		end
	    in  let <Term2,Tlv3> =
		    %% Line 4725
		    case Tlv2 of
		      %% Line 4726
		      <[{131073,V2}|TempTlv3]> when 'true' ->
			  let <_cor7> =
			      %% Line 4727
			      apply 'dec_GeneralNames'/2
				  (V2, [])
			  in  <_cor7,%% Line 4727
				     TempTlv3>
		      %% Line 4728
		      <_cor19> when 'true' ->
			  %% Line 4729
			  <'asn1_NOVALUE',Tlv2>
		    end
		in  let <Term3,Tlv4> =
			%% Line 4735
			case Tlv3 of
			  %% Line 4736
			  <[{131074,V3}|TempTlv4]> when 'true' ->
			      let <_cor11> =
				  %% Line 4737
				  apply 'dec_ObjectDigestInfo'/2
				      (V3, [])
			      in  <_cor11,%% Line 4737
					  TempTlv4>
			  %% Line 4738
			  <_cor20> when 'true' ->
			      %% Line 4739
			      <'asn1_NOVALUE',Tlv3>
			end
		    in  do  %% Line 4742
			    case Tlv4 of
			      %% Line 4743
			      <[]> when 'true' ->
				  'ok'
			      %% Line 4743
			      <_cor21> when 'true' ->
				  call 'erlang':'exit'
				      ({'error',{'asn1',{'unexpected',Tlv4}}})
			    end
			    %% Line 4745
			    {'Holder',Term1,Term2,Term3}
'enc_AttCertVersion'/1 =
    %% Line 4752
    fun (_cor0) ->
	%% Line 4753
	apply 'enc_AttCertVersion'/2
	    (_cor0, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
'enc_AttCertVersion'/2 =
    %% Line 4755
    fun (_cor1,_cor0) ->
	%% Line 4756
	apply 'encode_integer'/3
	    (_cor1, [{'v2',1}], _cor0)
'dec_AttCertVersion'/1 =
    %% Line 4759
    fun (_cor0) ->
	%% Line 4760
	apply 'dec_AttCertVersion'/2
	    (_cor0, [2])
'dec_AttCertVersion'/2 =
    %% Line 4762
    fun (_cor1,_cor0) ->
	let <Val1> =
	    %% Line 4764
	    apply 'decode_integer'/2
		(_cor1, _cor0)
	in  %% Line 4765
	    apply 'number2name'/2
		(Val1, [{'v2',1}])
'enc_AttributeCertificateInfo'/1 =
    %% Line 4774
    fun (_cor0) ->
	%% Line 4775
	apply 'enc_AttributeCertificateInfo'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_AttributeCertificateInfo'/2 =
    %% Line 4777
    fun (_cor1,_cor0) ->
	%% Line 4778
	case _cor1 of
	  <{_cor27,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6,Cindex7,Cindex8,Cindex9}> when 'true' ->
	      %% Line 4783
	      case apply 'encode_integer'/3
		       (Cindex1, [{'v2',1}], [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 4788
		    case apply 'enc_Holder'/2
			     (Cindex2, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  %% Line 4793
			  case apply 'enc_AttCertIssuer'/2
				   (Cindex3, []) of
			    <{EncBytes3,EncLen3}> when 'true' ->
				%% Line 4798
				case apply 'enc_AlgorithmIdentifier'/2
					 (Cindex4, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
				  <{EncBytes4,EncLen4}> when 'true' ->
				      %% Line 4803
				      case apply 'encode_integer'/2
					       (Cindex5, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
					<{EncBytes5,EncLen5}> when 'true' ->
					    %% Line 4808
					    case apply 'enc_AttCertValidityPeriod'/2
						     (Cindex6, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
					      <{EncBytes6,EncLen6}> when 'true' ->
						  %% Line 4813
						  case apply 'enc_AttributeCertificateInfo_attributes'/2
							   (Cindex7, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
						    <{EncBytes7,EncLen7}> when 'true' ->
							let <_cor11> =
							    %% Line 4818
							    case Cindex8 of
							      %% Line 4819
							      <'asn1_NOVALUE'> when 'true' ->
								  {#{}#,0}
							      %% Line 4820
							      <_cor28> when 'true' ->
								  %% Line 4821
								  apply 'encode_bit_string'/4
								      ([], Cindex8, [], [#{#<3>(8,1,'integer',['unsigned'|['big']])}#])
							    end
							in  %% Line 4818
							    case _cor11 of
							      <{EncBytes8,EncLen8}> when 'true' ->
								  let <_cor14> =
								      %% Line 4827
								      case Cindex9 of
									%% Line 4828
									<'asn1_NOVALUE'> when 'true' ->
									    {#{}#,0}
									%% Line 4829
									<_cor29> when 'true' ->
									    %% Line 4830
									    apply 'enc_Extensions'/2
										(Cindex9, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
								      end
								  in  %% Line 4827
								      case _cor14 of
									<{EncBytes9,EncLen9}> when 'true' ->
									    let <BytesSoFar> =
										%% Line 4833
										[EncBytes1|[EncBytes2|[EncBytes3|[EncBytes4|[EncBytes5|[EncBytes6|[EncBytes7|[EncBytes8|[EncBytes9|[]]]]]]]]]]
									    in  let <_cor17> =
										    %% Line 4834
										    call 'erlang':'+'
											(EncLen1, EncLen2)
										in  let <_cor18> =
											%% Line 4834
											call 'erlang':'+'
											    (_cor17, EncLen3)
										    in  let <_cor19> =
											    %% Line 4834
											    call 'erlang':'+'
												(_cor18, EncLen4)
											in  let <_cor20> =
												%% Line 4834
												call 'erlang':'+'
												    (_cor19, EncLen5)
											    in  let <_cor21> =
												    %% Line 4834
												    call 'erlang':'+'
													(_cor20, EncLen6)
												in  let <_cor22> =
													%% Line 4834
													call 'erlang':'+'
													    (_cor21, EncLen7)
												    in  let <_cor23> =
													    %% Line 4834
													    call 'erlang':'+'
														(_cor22, EncLen8)
													in  let <LenSoFar> =
														%% Line 4834
														call 'erlang':'+'
														    (_cor23, EncLen9)
													    in  %% Line 4835
														apply 'encode_tags'/3
														    (_cor0, BytesSoFar, LenSoFar)
									( <_cor15> when 'true' ->
									      primop 'match_fail'
										  ({'badmatch',_cor15})
									  -| ['compiler_generated'] )
								      end
							      ( <_cor12> when 'true' ->
								    primop 'match_fail'
									({'badmatch',_cor12})
								-| ['compiler_generated'] )
							    end
						    ( <_cor9> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor9})
						      -| ['compiler_generated'] )
						  end
					      ( <_cor8> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor8})
						-| ['compiler_generated'] )
					    end
					( <_cor7> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor7})
					  -| ['compiler_generated'] )
				      end
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor6})
				    -| ['compiler_generated'] )
				end
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_AttributeCertificateInfo_attributes'/2 =
    %% Line 4842
    fun (_cor1,_cor0) ->
	%% Line 4843
	case apply 'enc_AttributeCertificateInfo_attributes_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 4844
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_AttributeCertificateInfo_attributes_components'/3 =
    %% Line 4846
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 4847
		  call 'lists':'reverse'
		      (AccBytes)
	      in  %% Line 4847
		  {_cor3,AccLen}
	  %% Line 4849
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 4850
	      case apply 'enc_Attribute'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 4851
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 4851
			apply 'enc_AttributeCertificateInfo_attributes_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_AttributeCertificateInfo_attributes_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_AttributeCertificateInfo_attributes'/2 =
    %% Line 4853
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 4857
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 4858
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_Attribute'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'dec_AttributeCertificateInfo'/1 =
    %% Line 4863
    fun (_cor0) ->
	%% Line 4864
	apply 'dec_AttributeCertificateInfo'/2
	    (_cor0, [16])
'dec_AttributeCertificateInfo'/2 =
    %% Line 4866
    fun (_cor1,_cor0) ->
	%% Line 4875
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Val1> =
		  %% Line 4877
		  apply 'decode_integer'/2
		      (V1, [2])
	      in  let <Term1> =
		      %% Line 4878
		      apply 'number2name'/2
			  (Val1, [{'v2',1}])
		  in  %% Line 4885
		      case Tlv2 of
			<[V2|Tlv3]> when 'true' ->
			    let <Term2> =
				%% Line 4886
				apply 'dec_Holder'/2
				    (V2, [16])
			    in  %% Line 4891
				case Tlv3 of
				  <[V3|Tlv4]> when 'true' ->
				      let <Term3> =
					  %% Line 4892
					  apply 'dec_AttCertIssuer'/2
					      (V3, [])
				      in  %% Line 4897
					  case Tlv4 of
					    <[V4|Tlv5]> when 'true' ->
						let <Term4> =
						    %% Line 4898
						    apply 'dec_AlgorithmIdentifier'/2
							(V4, [16])
						in  %% Line 4903
						    case Tlv5 of
						      <[V5|Tlv6]> when 'true' ->
							  let <Term5> =
							      %% Line 4904
							      apply 'decode_integer'/2
								  (V5, [2])
							  in  %% Line 4909
							      case Tlv6 of
								<[V6|Tlv7]> when 'true' ->
								    let <Term6> =
									%% Line 4910
									apply 'dec_AttCertValidityPeriod'/2
									    (V6, [16])
								    in  %% Line 4915
									case Tlv7 of
									  <[V7|Tlv8]> when 'true' ->
									      let <Term7> =
										  %% Line 4916
										  apply 'dec_AttributeCertificateInfo_attributes'/2
										      (V7, [16])
									      in  let <Term8,Tlv9> =
										      %% Line 4921
										      case Tlv8 of
											%% Line 4922
											<[{3,V8}|TempTlv9]> when 'true' ->
											    let <_cor18> =
												%% Line 4923
												apply 'decode_compact_bit_string'/2
												    (V8, [])
											    in  <_cor18,%% Line 4923
													TempTlv9>
											%% Line 4924
											<_cor29> when 'true' ->
											    %% Line 4925
											    <'asn1_NOVALUE',Tlv8>
										      end
										  in  let <Term9,Tlv10> =
											  %% Line 4931
											  case Tlv9 of
											    %% Line 4932
											    <[{16,V9}|TempTlv10]> when 'true' ->
												let <_cor22> =
												    %% Line 4933
												    apply 'dec_Extensions'/2
													(V9, [])
												in  <_cor22,%% Line 4933
													    TempTlv10>
											    %% Line 4934
											    <_cor30> when 'true' ->
												%% Line 4935
												<'asn1_NOVALUE',Tlv9>
											  end
										      in  do  %% Line 4938
											      case Tlv10 of
												%% Line 4939
												<[]> when 'true' ->
												    'ok'
												%% Line 4939
												<_cor31> when 'true' ->
												    call 'erlang':'exit'
													({'error',{'asn1',{'unexpected',Tlv10}}})
											      end
											      %% Line 4941
											      {'AttributeCertificateInfo',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9}
									  ( <_cor16> when 'true' ->
										primop 'match_fail'
										    ({'badmatch',_cor16})
									    -| ['compiler_generated'] )
									end
								( <_cor14> when 'true' ->
								      primop 'match_fail'
									  ({'badmatch',_cor14})
								  -| ['compiler_generated'] )
							      end
						      ( <_cor12> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor12})
							-| ['compiler_generated'] )
						    end
					    ( <_cor10> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor10})
					      -| ['compiler_generated'] )
					  end
				  ( <_cor8> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor8})
				    -| ['compiler_generated'] )
				end
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_AttributeCertificate'/1 =
    %% Line 4948
    fun (_cor0) ->
	%% Line 4949
	apply 'enc_AttributeCertificate'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_AttributeCertificate'/2 =
    %% Line 4951
    fun (_cor1,_cor0) ->
	%% Line 4952
	case _cor1 of
	  <{_cor11,Cindex1,Cindex2,Cindex3}> when 'true' ->
	      %% Line 4957
	      case apply 'enc_AttributeCertificateInfo'/2
		       (Cindex1, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 4962
		    case apply 'enc_AlgorithmIdentifier'/2
			     (Cindex2, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  %% Line 4967
			  case apply 'encode_bit_string'/4
				   ([], Cindex3, [], [#{#<3>(8,1,'integer',['unsigned'|['big']])}#]) of
			    <{EncBytes3,EncLen3}> when 'true' ->
				let <BytesSoFar> =
				    %% Line 4969
				    [EncBytes1|[EncBytes2|[EncBytes3|[]]]]
				in  let <_cor7> =
					%% Line 4970
					call 'erlang':'+'
					    (EncLen1, EncLen2)
				    in  let <LenSoFar> =
					    %% Line 4970
					    call 'erlang':'+'
						(_cor7, EncLen3)
					in  %% Line 4971
					    apply 'encode_tags'/3
						(_cor0, BytesSoFar, LenSoFar)
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_AttributeCertificate'/1 =
    %% Line 4974
    fun (_cor0) ->
	%% Line 4975
	apply 'dec_AttributeCertificate'/2
	    (_cor0, [16])
'dec_AttributeCertificate'/2 =
    %% Line 4977
    fun (_cor1,_cor0) ->
	%% Line 4986
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 4987
		  apply 'dec_AttributeCertificateInfo'/2
		      (V1, [16])
	      in  %% Line 4992
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 4993
			    apply 'dec_AlgorithmIdentifier'/2
				(V2, [16])
			in  %% Line 4998
			    case Tlv3 of
			      <[V3|Tlv4]> when 'true' ->
				  let <Term3> =
				      %% Line 4999
				      apply 'decode_compact_bit_string'/2
					  (V3, [3])
				  in  do  %% Line 5001
					  case Tlv4 of
					    %% Line 5002
					    <[]> when 'true' ->
						'ok'
					    %% Line 5002
					    <_cor12> when 'true' ->
						call 'erlang':'exit'
						    ({'error',{'asn1',{'unexpected',Tlv4}}})
					  end
					  %% Line 5004
					  {'AttributeCertificate',Term1,Term2,Term3}
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_InvalidityDate'/1 =
    %% Line 5011
    fun (_cor0) ->
	%% Line 5012
	apply 'enc_InvalidityDate'/2
	    (_cor0, [#{#<24>(8,1,'integer',['unsigned'|['big']])}#])
'enc_InvalidityDate'/2 =
    %% Line 5014
    fun (_cor1,_cor0) ->
	%% Line 5015
	apply 'encode_restricted_string'/2
	    (_cor1, _cor0)
'dec_InvalidityDate'/1 =
    %% Line 5018
    fun (_cor0) ->
	%% Line 5019
	apply 'dec_InvalidityDate'/2
	    (_cor0, [24])
'dec_InvalidityDate'/2 =
    %% Line 5021
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 5023
	    apply 'decode_restricted_string'/2
		(_cor1, _cor0)
	in  %% Line 5023
	    call 'erlang':'binary_to_list'
		(_cor2)
'enc_HoldInstructionCode'/1 =
    %% Line 5032
    fun (_cor0) ->
	%% Line 5033
	apply 'enc_HoldInstructionCode'/2
	    (_cor0, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#])
'enc_HoldInstructionCode'/2 =
    %% Line 5035
    fun (_cor1,_cor0) ->
	%% Line 5036
	apply 'encode_object_identifier'/2
	    (_cor1, _cor0)
'dec_HoldInstructionCode'/1 =
    %% Line 5039
    fun (_cor0) ->
	%% Line 5040
	apply 'dec_HoldInstructionCode'/2
	    (_cor0, [6])
'dec_HoldInstructionCode'/2 =
    %% Line 5042
    fun (_cor1,_cor0) ->
	%% Line 5043
	apply 'decode_object_identifier'/2
	    (_cor1, _cor0)
'enc_CertificateIssuer'/1 =
    %% Line 5050
    fun (_cor0) ->
	%% Line 5051
	apply 'enc_CertificateIssuer'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_CertificateIssuer'/2 =
    %% Line 5053
    fun (_cor1,_cor0) ->
	%% Line 5054
	apply 'enc_GeneralNames'/2
	    (_cor1, _cor0)
'dec_CertificateIssuer'/1 =
    %% Line 5057
    fun (_cor0) ->
	%% Line 5058
	apply 'dec_CertificateIssuer'/2
	    (_cor0, [16])
'dec_CertificateIssuer'/2 =
    %% Line 5060
    fun (_cor1,_cor0) ->
	%% Line 5061
	apply 'dec_GeneralNames'/2
	    (_cor1, _cor0)
'enc_CRLReason'/1 =
    %% Line 5068
    fun (_cor0) ->
	%% Line 5069
	apply 'enc_CRLReason'/2
	    (_cor0, [#{#<10>(8,1,'integer',['unsigned'|['big']])}#])
'enc_CRLReason'/2 =
    %% Line 5071
    fun (_cor1,_cor0) ->
	%% Line 5072
	case _cor1 of
	  %% Line 5073
	  <'unspecified'> when 'true' ->
	      apply 'encode_tags'/3
		  (_cor0, [0], 1)
	  %% Line 5074
	  <'keyCompromise'> when 'true' ->
	      apply 'encode_tags'/3
		  (_cor0, [1], 1)
	  %% Line 5075
	  <'cACompromise'> when 'true' ->
	      apply 'encode_tags'/3
		  (_cor0, [2], 1)
	  %% Line 5076
	  <'affiliationChanged'> when 'true' ->
	      apply 'encode_tags'/3
		  (_cor0, [3], 1)
	  %% Line 5077
	  <'superseded'> when 'true' ->
	      apply 'encode_tags'/3
		  (_cor0, [4], 1)
	  %% Line 5078
	  <'cessationOfOperation'> when 'true' ->
	      apply 'encode_tags'/3
		  (_cor0, [5], 1)
	  %% Line 5079
	  <'certificateHold'> when 'true' ->
	      apply 'encode_tags'/3
		  (_cor0, [6], 1)
	  %% Line 5080
	  <'removeFromCRL'> when 'true' ->
	      apply 'encode_tags'/3
		  (_cor0, [8], 1)
	  %% Line 5081
	  <'privilegeWithdrawn'> when 'true' ->
	      apply 'encode_tags'/3
		  (_cor0, [9], 1)
	  %% Line 5082
	  <'aACompromise'> when 'true' ->
	      apply 'encode_tags'/3
		  (_cor0, [10], 1)
	  %% Line 5083
	  <Enumval1> when 'true' ->
	      call 'erlang':'exit'
		  ({'error',{'asn1',{'enumerated_not_in_range',Enumval1}}})
	end
'dec_CRLReason'/1 =
    %% Line 5087
    fun (_cor0) ->
	%% Line 5088
	apply 'dec_CRLReason'/2
	    (_cor0, [10])
'dec_CRLReason'/2 =
    %% Line 5090
    fun (_cor1,_cor0) ->
	%% Line 5091
	case apply 'decode_integer'/2
		 (_cor1, _cor0) of
	  %% Line 5092
	  <0> when 'true' ->
	      'unspecified'
	  %% Line 5093
	  <1> when 'true' ->
	      'keyCompromise'
	  %% Line 5094
	  <2> when 'true' ->
	      'cACompromise'
	  %% Line 5095
	  <3> when 'true' ->
	      'affiliationChanged'
	  %% Line 5096
	  <4> when 'true' ->
	      'superseded'
	  %% Line 5097
	  <5> when 'true' ->
	      'cessationOfOperation'
	  %% Line 5098
	  <6> when 'true' ->
	      'certificateHold'
	  %% Line 5099
	  <8> when 'true' ->
	      'removeFromCRL'
	  %% Line 5100
	  <9> when 'true' ->
	      'privilegeWithdrawn'
	  %% Line 5101
	  <10> when 'true' ->
	      'aACompromise'
	  %% Line 5102
	  <Default1> when 'true' ->
	      call 'erlang':'exit'
		  ({'error',{'asn1',{'illegal_enumerated',Default1}}})
	end
'enc_BaseCRLNumber'/1 =
    %% Line 5110
    fun (_cor0) ->
	%% Line 5111
	apply 'enc_BaseCRLNumber'/2
	    (_cor0, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
'enc_BaseCRLNumber'/2 =
    %% Line 5113
    fun (_cor1,_cor0) ->
	%% Line 5114
	apply 'encode_integer'/2
	    (_cor1, _cor0)
'dec_BaseCRLNumber'/1 =
    %% Line 5117
    fun (_cor0) ->
	%% Line 5118
	apply 'dec_BaseCRLNumber'/2
	    (_cor0, [2])
'dec_BaseCRLNumber'/2 =
    %% Line 5120
    fun (_cor1,_cor0) ->
	let <Val1> =
	    %% Line 5122
	    apply 'decode_integer'/2
		(_cor1, _cor0)
	in  %% Line 5123
	    case <> of
	      <>
		  when let <_cor3> =
			call 'erlang':'=<'
			    (0, Val1)
		    in  let <_cor4> =
			    call 'erlang':'=<'
				(Val1, 'MAX')
			in  call 'erlang':'and'
				(_cor3, _cor4) ->
		  %% Line 5124
		  Val1
	      %% Line 5125
	      <> when 'true' ->
		  %% Line 5126
		  call 'erlang':'exit'
		      ({'error',{'asn1','bad_range'}})
	    end
'enc_IssuingDistributionPoint'/1 =
    %% Line 5135
    fun (_cor0) ->
	%% Line 5136
	apply 'enc_IssuingDistributionPoint'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_IssuingDistributionPoint'/2 =
    %% Line 5138
    fun (_cor1,_cor0) ->
	%% Line 5139
	case _cor1 of
	  <{_cor29,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6}> when 'true' ->
	      let <_cor4> =
		  %% Line 5144
		  case Cindex1 of
		    %% Line 5145
		    <'asn1_NOVALUE'> when 'true' ->
			{#{}#,0}
		    %% Line 5146
		    <_cor30> when 'true' ->
			%% Line 5147
			apply 'enc_DistributionPointName'/2
			    (Cindex1, [#{#<160>(8,1,'integer',['unsigned'|['big']])}#])
		  end
	      in  %% Line 5144
		  case _cor4 of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor7> =
			    %% Line 5153
			    case apply 'is_default_5'/1
				     (Cindex2) of
			      %% Line 5154
			      <'true'> when 'true' ->
				  {[],0}
			      %% Line 5155
			      <'false'> when 'true' ->
				  %% Line 5156
				  apply 'encode_boolean'/2
				      (Cindex2, [#{#<129>(8,1,'integer',['unsigned'|['big']])}#])
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor6})
				-| ['compiler_generated'] )
			    end
			in  %% Line 5153
			    case _cor7 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  let <_cor10> =
				      %% Line 5162
				      case apply 'is_default_6'/1
					       (Cindex3) of
					%% Line 5163
					<'true'> when 'true' ->
					    {[],0}
					%% Line 5164
					<'false'> when 'true' ->
					    %% Line 5165
					    apply 'encode_boolean'/2
						(Cindex3, [#{#<130>(8,1,'integer',['unsigned'|['big']])}#])
					( <_cor9> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor9})
					  -| ['compiler_generated'] )
				      end
				  in  %% Line 5162
				      case _cor10 of
					<{EncBytes3,EncLen3}> when 'true' ->
					    let <_cor13> =
						%% Line 5171
						case Cindex4 of
						  %% Line 5172
						  <'asn1_NOVALUE'> when 'true' ->
						      {#{}#,0}
						  %% Line 5173
						  <_cor31> when 'true' ->
						      %% Line 5174
						      apply 'encode_bit_string'/4
							  ([], Cindex4, [{'unused',0}|[{'keyCompromise',1}|[{'cACompromise',2}|[{'affiliationChanged',3}|[{'superseded',4}|[{'cessationOfOperation',5}|[{'certificateHold',6}|[{'privilegeWithdrawn',7}|[{'aACompromise',8}]]]]]]]]], [#{#<131>(8,1,'integer',['unsigned'|['big']])}#])
						end
					    in  %% Line 5171
						case _cor13 of
						  <{EncBytes4,EncLen4}> when 'true' ->
						      let <_cor16> =
							  %% Line 5180
							  case apply 'is_default_7'/1
								   (Cindex5) of
							    %% Line 5181
							    <'true'> when 'true' ->
								{[],0}
							    %% Line 5182
							    <'false'> when 'true' ->
								%% Line 5183
								apply 'encode_boolean'/2
								    (Cindex5, [#{#<132>(8,1,'integer',['unsigned'|['big']])}#])
							    ( <_cor15> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_cor15})
							      -| ['compiler_generated'] )
							  end
						      in  %% Line 5180
							  case _cor16 of
							    <{EncBytes5,EncLen5}> when 'true' ->
								let <_cor19> =
								    %% Line 5189
								    case apply 'is_default_8'/1
									     (Cindex6) of
								      %% Line 5190
								      <'true'> when 'true' ->
									  {[],0}
								      %% Line 5191
								      <'false'> when 'true' ->
									  %% Line 5192
									  apply 'encode_boolean'/2
									      (Cindex6, [#{#<133>(8,1,'integer',['unsigned'|['big']])}#])
								      ( <_cor18> when 'true' ->
									    primop 'match_fail'
										({'case_clause',_cor18})
									-| ['compiler_generated'] )
								    end
								in  %% Line 5189
								    case _cor19 of
								      <{EncBytes6,EncLen6}> when 'true' ->
									  let <BytesSoFar> =
									      %% Line 5195
									      [EncBytes1|[EncBytes2|[EncBytes3|[EncBytes4|[EncBytes5|[EncBytes6|[]]]]]]]
									  in  let <_cor22> =
										  %% Line 5196
										  call 'erlang':'+'
										      (EncLen1, EncLen2)
									      in  let <_cor23> =
										      %% Line 5196
										      call 'erlang':'+'
											  (_cor22, EncLen3)
										  in  let <_cor24> =
											  %% Line 5196
											  call 'erlang':'+'
											      (_cor23, EncLen4)
										      in  let <_cor25> =
											      %% Line 5196
											      call 'erlang':'+'
												  (_cor24, EncLen5)
											  in  let <LenSoFar> =
												  %% Line 5196
												  call 'erlang':'+'
												      (_cor25, EncLen6)
											      in  %% Line 5197
												  apply 'encode_tags'/3
												      (_cor0, BytesSoFar, LenSoFar)
								      ( <_cor20> when 'true' ->
									    primop 'match_fail'
										({'badmatch',_cor20})
									-| ['compiler_generated'] )
								    end
							    ( <_cor17> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_cor17})
							      -| ['compiler_generated'] )
							  end
						  ( <_cor14> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor14})
						    -| ['compiler_generated'] )
						end
					( <_cor11> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor11})
					  -| ['compiler_generated'] )
				      end
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_IssuingDistributionPoint'/1 =
    %% Line 5200
    fun (_cor0) ->
	%% Line 5201
	apply 'dec_IssuingDistributionPoint'/2
	    (_cor0, [16])
'dec_IssuingDistributionPoint'/2 =
    %% Line 5203
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 5207
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <Term1,Tlv2> =
		%% Line 5212
		case Tlv1 of
		  %% Line 5213
		  <[{131072,V1}|TempTlv2]> when 'true' ->
		      let <_cor3> =
			  %% Line 5214
			  apply 'dec_DistributionPointName'/2
			      (V1, [])
		      in  <_cor3,%% Line 5214
				 TempTlv2>
		  %% Line 5215
		  <_cor30> when 'true' ->
		      %% Line 5216
		      <'asn1_NOVALUE',Tlv1>
		end
	    in  let <Term2,Tlv3> =
		    %% Line 5222
		    case Tlv2 of
		      %% Line 5223
		      <[{131073,V2}|TempTlv3]> when 'true' ->
			  let <_cor7> =
			      %% Line 5224
			      apply 'decode_boolean'/2
				  (V2, [])
			  in  <_cor7,%% Line 5224
				     TempTlv3>
		      %% Line 5225
		      <_cor31> when 'true' ->
			  %% Line 5226
			  <'false',Tlv2>
		    end
		in  let <Term3,Tlv4> =
			%% Line 5232
			case Tlv3 of
			  %% Line 5233
			  <[{131074,V3}|TempTlv4]> when 'true' ->
			      let <_cor11> =
				  %% Line 5234
				  apply 'decode_boolean'/2
				      (V3, [])
			      in  <_cor11,%% Line 5234
					  TempTlv4>
			  %% Line 5235
			  <_cor32> when 'true' ->
			      %% Line 5236
			      <'false',Tlv3>
			end
		    in  let <Term4,Tlv5> =
			    %% Line 5242
			    case Tlv4 of
			      %% Line 5243
			      <[{131075,V4}|TempTlv5]> when 'true' ->
				  let <_cor15> =
				      %% Line 5244
				      apply 'decode_named_bit_string'/3
					  (V4, [{'unused',0}|[{'keyCompromise',1}|[{'cACompromise',2}|[{'affiliationChanged',3}|[{'superseded',4}|[{'cessationOfOperation',5}|[{'certificateHold',6}|[{'privilegeWithdrawn',7}|[{'aACompromise',8}]]]]]]]]], [])
				  in  <_cor15,%% Line 5244
					      TempTlv5>
			      %% Line 5245
			      <_cor33> when 'true' ->
				  %% Line 5246
				  <'asn1_NOVALUE',Tlv4>
			    end
			in  let <Term5,Tlv6> =
				%% Line 5252
				case Tlv5 of
				  %% Line 5253
				  <[{131076,V5}|TempTlv6]> when 'true' ->
				      let <_cor19> =
					  %% Line 5254
					  apply 'decode_boolean'/2
					      (V5, [])
				      in  <_cor19,%% Line 5254
						  TempTlv6>
				  %% Line 5255
				  <_cor34> when 'true' ->
				      %% Line 5256
				      <'false',Tlv5>
				end
			    in  let <Term6,Tlv7> =
				    %% Line 5262
				    case Tlv6 of
				      %% Line 5263
				      <[{131077,V6}|TempTlv7]> when 'true' ->
					  let <_cor23> =
					      %% Line 5264
					      apply 'decode_boolean'/2
						  (V6, [])
					  in  <_cor23,%% Line 5264
						      TempTlv7>
				      %% Line 5265
				      <_cor35> when 'true' ->
					  %% Line 5266
					  <'false',Tlv6>
				    end
				in  do  %% Line 5269
					case Tlv7 of
					  %% Line 5270
					  <[]> when 'true' ->
					      'ok'
					  %% Line 5270
					  <_cor36> when 'true' ->
					      call 'erlang':'exit'
						  ({'error',{'asn1',{'unexpected',Tlv7}}})
					end
					%% Line 5272
					{'IssuingDistributionPoint',Term1,Term2,Term3,Term4,Term5,Term6}
'enc_CRLNumber'/1 =
    %% Line 5279
    fun (_cor0) ->
	%% Line 5280
	apply 'enc_CRLNumber'/2
	    (_cor0, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
'enc_CRLNumber'/2 =
    %% Line 5282
    fun (_cor1,_cor0) ->
	%% Line 5283
	apply 'encode_integer'/2
	    (_cor1, _cor0)
'dec_CRLNumber'/1 =
    %% Line 5286
    fun (_cor0) ->
	%% Line 5287
	apply 'dec_CRLNumber'/2
	    (_cor0, [2])
'dec_CRLNumber'/2 =
    %% Line 5289
    fun (_cor1,_cor0) ->
	let <Val1> =
	    %% Line 5291
	    apply 'decode_integer'/2
		(_cor1, _cor0)
	in  %% Line 5292
	    case <> of
	      <>
		  when let <_cor3> =
			call 'erlang':'=<'
			    (0, Val1)
		    in  let <_cor4> =
			    call 'erlang':'=<'
				(Val1, 'MAX')
			in  call 'erlang':'and'
				(_cor3, _cor4) ->
		  %% Line 5293
		  Val1
	      %% Line 5294
	      <> when 'true' ->
		  %% Line 5295
		  call 'erlang':'exit'
		      ({'error',{'asn1','bad_range'}})
	    end
'enc_SubjectInfoAccessSyntax'/1 =
    %% Line 5304
    fun (_cor0) ->
	%% Line 5305
	apply 'enc_SubjectInfoAccessSyntax'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_SubjectInfoAccessSyntax'/2 =
    %% Line 5307
    fun (_cor1,_cor0) ->
	%% Line 5308
	case apply 'enc_SubjectInfoAccessSyntax_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 5309
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_SubjectInfoAccessSyntax_components'/3 =
    %% Line 5311
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 5312
		  call 'lists':'reverse'
		      (AccBytes)
	      in  %% Line 5312
		  {_cor3,AccLen}
	  %% Line 5314
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 5315
	      case apply 'enc_AccessDescription'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 5316
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 5316
			apply 'enc_SubjectInfoAccessSyntax_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_SubjectInfoAccessSyntax_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_SubjectInfoAccessSyntax'/1 =
    %% Line 5320
    fun (_cor0) ->
	%% Line 5321
	apply 'dec_SubjectInfoAccessSyntax'/2
	    (_cor0, [16])
'dec_SubjectInfoAccessSyntax'/2 =
    %% Line 5323
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 5327
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 5328
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_AccessDescription'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'enc_AccessDescription'/1 =
    %% Line 5336
    fun (_cor0) ->
	%% Line 5337
	apply 'enc_AccessDescription'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_AccessDescription'/2 =
    %% Line 5339
    fun (_cor1,_cor0) ->
	%% Line 5340
	case _cor1 of
	  <{_cor9,Cindex1,Cindex2}> when 'true' ->
	      %% Line 5345
	      case apply 'encode_object_identifier'/2
		       (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 5350
		    case apply 'enc_GeneralName'/2
			     (Cindex2, []) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <BytesSoFar> =
			      %% Line 5352
			      [EncBytes1|[EncBytes2|[]]]
			  in  let <LenSoFar> =
				  %% Line 5353
				  call 'erlang':'+'
				      (EncLen1, EncLen2)
			      in  %% Line 5354
				  apply 'encode_tags'/3
				      (_cor0, BytesSoFar, LenSoFar)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_AccessDescription'/1 =
    %% Line 5357
    fun (_cor0) ->
	%% Line 5358
	apply 'dec_AccessDescription'/2
	    (_cor0, [16])
'dec_AccessDescription'/2 =
    %% Line 5360
    fun (_cor1,_cor0) ->
	%% Line 5369
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 5370
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  %% Line 5375
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 5376
			    apply 'dec_GeneralName'/2
				(V2, [])
			in  do  %% Line 5378
				case Tlv3 of
				  %% Line 5379
				  <[]> when 'true' ->
				      'ok'
				  %% Line 5379
				  <_cor10> when 'true' ->
				      call 'erlang':'exit'
					  ({'error',{'asn1',{'unexpected',Tlv3}}})
				end
				%% Line 5381
				{'AccessDescription',Term1,Term2}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_AuthorityInfoAccessSyntax'/1 =
    %% Line 5388
    fun (_cor0) ->
	%% Line 5389
	apply 'enc_AuthorityInfoAccessSyntax'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_AuthorityInfoAccessSyntax'/2 =
    %% Line 5391
    fun (_cor1,_cor0) ->
	%% Line 5392
	case apply 'enc_AuthorityInfoAccessSyntax_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 5393
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_AuthorityInfoAccessSyntax_components'/3 =
    %% Line 5395
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 5396
		  call 'lists':'reverse'
		      (AccBytes)
	      in  %% Line 5396
		  {_cor3,AccLen}
	  %% Line 5398
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 5399
	      case apply 'enc_AccessDescription'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 5400
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 5400
			apply 'enc_AuthorityInfoAccessSyntax_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_AuthorityInfoAccessSyntax_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_AuthorityInfoAccessSyntax'/1 =
    %% Line 5404
    fun (_cor0) ->
	%% Line 5405
	apply 'dec_AuthorityInfoAccessSyntax'/2
	    (_cor0, [16])
'dec_AuthorityInfoAccessSyntax'/2 =
    %% Line 5407
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 5411
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 5412
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_AccessDescription'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'enc_FreshestCRL'/1 =
    %% Line 5420
    fun (_cor0) ->
	%% Line 5421
	apply 'enc_FreshestCRL'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_FreshestCRL'/2 =
    %% Line 5423
    fun (_cor1,_cor0) ->
	%% Line 5424
	apply 'enc_CRLDistributionPoints'/2
	    (_cor1, _cor0)
'dec_FreshestCRL'/1 =
    %% Line 5427
    fun (_cor0) ->
	%% Line 5428
	apply 'dec_FreshestCRL'/2
	    (_cor0, [16])
'dec_FreshestCRL'/2 =
    %% Line 5430
    fun (_cor1,_cor0) ->
	%% Line 5431
	apply 'dec_CRLDistributionPoints'/2
	    (_cor1, _cor0)
'enc_InhibitAnyPolicy'/1 =
    %% Line 5438
    fun (_cor0) ->
	%% Line 5439
	apply 'enc_InhibitAnyPolicy'/2
	    (_cor0, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
'enc_InhibitAnyPolicy'/2 =
    %% Line 5441
    fun (_cor1,_cor0) ->
	%% Line 5442
	apply 'encode_integer'/2
	    (_cor1, _cor0)
'dec_InhibitAnyPolicy'/1 =
    %% Line 5445
    fun (_cor0) ->
	%% Line 5446
	apply 'dec_InhibitAnyPolicy'/2
	    (_cor0, [2])
'dec_InhibitAnyPolicy'/2 =
    %% Line 5448
    fun (_cor1,_cor0) ->
	let <Val1> =
	    %% Line 5450
	    apply 'decode_integer'/2
		(_cor1, _cor0)
	in  %% Line 5451
	    case <> of
	      <>
		  when let <_cor3> =
			call 'erlang':'=<'
			    (0, Val1)
		    in  let <_cor4> =
			    call 'erlang':'=<'
				(Val1, 'MAX')
			in  call 'erlang':'and'
				(_cor3, _cor4) ->
		  %% Line 5452
		  Val1
	      %% Line 5453
	      <> when 'true' ->
		  %% Line 5454
		  call 'erlang':'exit'
		      ({'error',{'asn1','bad_range'}})
	    end
'enc_KeyPurposeId'/1 =
    %% Line 5463
    fun (_cor0) ->
	%% Line 5464
	apply 'enc_KeyPurposeId'/2
	    (_cor0, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#])
'enc_KeyPurposeId'/2 =
    %% Line 5466
    fun (_cor1,_cor0) ->
	%% Line 5467
	apply 'encode_object_identifier'/2
	    (_cor1, _cor0)
'dec_KeyPurposeId'/1 =
    %% Line 5470
    fun (_cor0) ->
	%% Line 5471
	apply 'dec_KeyPurposeId'/2
	    (_cor0, [6])
'dec_KeyPurposeId'/2 =
    %% Line 5473
    fun (_cor1,_cor0) ->
	%% Line 5474
	apply 'decode_object_identifier'/2
	    (_cor1, _cor0)
'enc_ExtKeyUsageSyntax'/1 =
    %% Line 5481
    fun (_cor0) ->
	%% Line 5482
	apply 'enc_ExtKeyUsageSyntax'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_ExtKeyUsageSyntax'/2 =
    %% Line 5484
    fun (_cor1,_cor0) ->
	%% Line 5485
	case apply 'enc_ExtKeyUsageSyntax_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 5486
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_ExtKeyUsageSyntax_components'/3 =
    %% Line 5488
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 5489
		  call 'lists':'reverse'
		      (AccBytes)
	      in  %% Line 5489
		  {_cor3,AccLen}
	  %% Line 5491
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 5492
	      case apply 'encode_object_identifier'/2
		       (H, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 5493
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 5493
			apply 'enc_ExtKeyUsageSyntax_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_ExtKeyUsageSyntax_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_ExtKeyUsageSyntax'/1 =
    %% Line 5497
    fun (_cor0) ->
	%% Line 5498
	apply 'dec_ExtKeyUsageSyntax'/2
	    (_cor0, [16])
'dec_ExtKeyUsageSyntax'/2 =
    %% Line 5500
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 5504
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 5505
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'decode_object_identifier'/2
					(V1, [6])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'enc_ReasonFlags'/1 =
    %% Line 5513
    fun (_cor0) ->
	%% Line 5514
	apply 'enc_ReasonFlags'/2
	    (_cor0, [#{#<3>(8,1,'integer',['unsigned'|['big']])}#])
'enc_ReasonFlags'/2 =
    %% Line 5516
    fun (_cor1,_cor0) ->
	%% Line 5517
	apply 'encode_bit_string'/4
	    ([], _cor1, [{'unused',0}|[{'keyCompromise',1}|[{'cACompromise',2}|[{'affiliationChanged',3}|[{'superseded',4}|[{'cessationOfOperation',5}|[{'certificateHold',6}|[{'privilegeWithdrawn',7}|[{'aACompromise',8}]]]]]]]]], _cor0)
'dec_ReasonFlags'/1 =
    %% Line 5520
    fun (_cor0) ->
	%% Line 5521
	apply 'dec_ReasonFlags'/2
	    (_cor0, [3])
'dec_ReasonFlags'/2 =
    %% Line 5523
    fun (_cor1,_cor0) ->
	%% Line 5524
	apply 'decode_named_bit_string'/3
	    (_cor1, [{'unused',0}|[{'keyCompromise',1}|[{'cACompromise',2}|[{'affiliationChanged',3}|[{'superseded',4}|[{'cessationOfOperation',5}|[{'certificateHold',6}|[{'privilegeWithdrawn',7}|[{'aACompromise',8}]]]]]]]]], _cor0)
'enc_DistributionPointName'/1 =
    %% Line 5531
    fun (_cor0) ->
	%% Line 5532
	apply 'enc_DistributionPointName'/2
	    (_cor0, [])
'enc_DistributionPointName'/2 =
    %% Line 5534
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 5535
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 5536
	      <'fullName'> when 'true' ->
		  let <_cor2> =
		      %% Line 5537
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 5537
		      apply 'enc_GeneralNames'/2
			  (_cor2, [#{#<160>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 5538
	      <'nameRelativeToCRLIssuer'> when 'true' ->
		  let <_cor3> =
		      %% Line 5539
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 5539
		      apply 'enc_RelativeDistinguishedName'/2
			  (_cor3, [#{#<161>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 5540
	      <Else> when 'true' ->
		  %% Line 5541
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 5535
	    case _cor5 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 5544
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor6})
		-| ['compiler_generated'] )
	    end
'dec_DistributionPointName'/1 =
    %% Line 5549
    fun (_cor0) ->
	%% Line 5550
	apply 'dec_DistributionPointName'/2
	    (_cor0, [])
'dec_DistributionPointName'/2 =
    %% Line 5552
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 5553
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 5554
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor10> when 'true' ->
		      Tlv1
		end
	    in  %% Line 5554
		case _cor4 of
		  %% Line 5557
		  <{131072,V1}> when 'true' ->
		      let <_cor5> =
			  %% Line 5558
			  apply 'dec_GeneralNames'/2
			      (V1, [])
		      in  %% Line 5558
			  {'fullName',_cor5}
		  %% Line 5562
		  <{131073,V1}> when 'true' ->
		      let <_cor6> =
			  %% Line 5563
			  apply 'dec_RelativeDistinguishedName'/2
			      (V1, [])
		      in  %% Line 5563
			  {'nameRelativeToCRLIssuer',_cor6}
		  %% Line 5565
		  <Else> when 'true' ->
		      %% Line 5566
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'enc_DistributionPoint'/1 =
    %% Line 5574
    fun (_cor0) ->
	%% Line 5575
	apply 'enc_DistributionPoint'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_DistributionPoint'/2 =
    %% Line 5577
    fun (_cor1,_cor0) ->
	%% Line 5578
	case _cor1 of
	  <{_cor17,Cindex1,Cindex2,Cindex3}> when 'true' ->
	      let <_cor4> =
		  %% Line 5583
		  case Cindex1 of
		    %% Line 5584
		    <'asn1_NOVALUE'> when 'true' ->
			{#{}#,0}
		    %% Line 5585
		    <_cor18> when 'true' ->
			%% Line 5586
			apply 'enc_DistributionPointName'/2
			    (Cindex1, [#{#<160>(8,1,'integer',['unsigned'|['big']])}#])
		  end
	      in  %% Line 5583
		  case _cor4 of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor7> =
			    %% Line 5592
			    case Cindex2 of
			      %% Line 5593
			      <'asn1_NOVALUE'> when 'true' ->
				  {#{}#,0}
			      %% Line 5594
			      <_cor19> when 'true' ->
				  %% Line 5595
				  apply 'encode_bit_string'/4
				      ([], Cindex2, [{'unused',0}|[{'keyCompromise',1}|[{'cACompromise',2}|[{'affiliationChanged',3}|[{'superseded',4}|[{'cessationOfOperation',5}|[{'certificateHold',6}|[{'privilegeWithdrawn',7}|[{'aACompromise',8}]]]]]]]]], [#{#<129>(8,1,'integer',['unsigned'|['big']])}#])
			    end
			in  %% Line 5592
			    case _cor7 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  let <_cor10> =
				      %% Line 5601
				      case Cindex3 of
					%% Line 5602
					<'asn1_NOVALUE'> when 'true' ->
					    {#{}#,0}
					%% Line 5603
					<_cor20> when 'true' ->
					    %% Line 5604
					    apply 'enc_GeneralNames'/2
						(Cindex3, [#{#<162>(8,1,'integer',['unsigned'|['big']])}#])
				      end
				  in  %% Line 5601
				      case _cor10 of
					<{EncBytes3,EncLen3}> when 'true' ->
					    let <BytesSoFar> =
						%% Line 5607
						[EncBytes1|[EncBytes2|[EncBytes3|[]]]]
					    in  let <_cor13> =
						    %% Line 5608
						    call 'erlang':'+'
							(EncLen1, EncLen2)
						in  let <LenSoFar> =
							%% Line 5608
							call 'erlang':'+'
							    (_cor13, EncLen3)
						    in  %% Line 5609
							apply 'encode_tags'/3
							    (_cor0, BytesSoFar, LenSoFar)
					( <_cor11> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor11})
					  -| ['compiler_generated'] )
				      end
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_DistributionPoint'/1 =
    %% Line 5612
    fun (_cor0) ->
	%% Line 5613
	apply 'dec_DistributionPoint'/2
	    (_cor0, [16])
'dec_DistributionPoint'/2 =
    %% Line 5615
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 5619
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <Term1,Tlv2> =
		%% Line 5624
		case Tlv1 of
		  %% Line 5625
		  <[{131072,V1}|TempTlv2]> when 'true' ->
		      let <_cor3> =
			  %% Line 5626
			  apply 'dec_DistributionPointName'/2
			      (V1, [])
		      in  <_cor3,%% Line 5626
				 TempTlv2>
		  %% Line 5627
		  <_cor18> when 'true' ->
		      %% Line 5628
		      <'asn1_NOVALUE',Tlv1>
		end
	    in  let <Term2,Tlv3> =
		    %% Line 5634
		    case Tlv2 of
		      %% Line 5635
		      <[{131073,V2}|TempTlv3]> when 'true' ->
			  let <_cor7> =
			      %% Line 5636
			      apply 'decode_named_bit_string'/3
				  (V2, [{'unused',0}|[{'keyCompromise',1}|[{'cACompromise',2}|[{'affiliationChanged',3}|[{'superseded',4}|[{'cessationOfOperation',5}|[{'certificateHold',6}|[{'privilegeWithdrawn',7}|[{'aACompromise',8}]]]]]]]]], [])
			  in  <_cor7,%% Line 5636
				     TempTlv3>
		      %% Line 5637
		      <_cor19> when 'true' ->
			  %% Line 5638
			  <'asn1_NOVALUE',Tlv2>
		    end
		in  let <Term3,Tlv4> =
			%% Line 5644
			case Tlv3 of
			  %% Line 5645
			  <[{131074,V3}|TempTlv4]> when 'true' ->
			      let <_cor11> =
				  %% Line 5646
				  apply 'dec_GeneralNames'/2
				      (V3, [])
			      in  <_cor11,%% Line 5646
					  TempTlv4>
			  %% Line 5647
			  <_cor20> when 'true' ->
			      %% Line 5648
			      <'asn1_NOVALUE',Tlv3>
			end
		    in  do  %% Line 5651
			    case Tlv4 of
			      %% Line 5652
			      <[]> when 'true' ->
				  'ok'
			      %% Line 5652
			      <_cor21> when 'true' ->
				  call 'erlang':'exit'
				      ({'error',{'asn1',{'unexpected',Tlv4}}})
			    end
			    %% Line 5654
			    {'DistributionPoint',Term1,Term2,Term3}
'enc_CRLDistributionPoints'/1 =
    %% Line 5661
    fun (_cor0) ->
	%% Line 5662
	apply 'enc_CRLDistributionPoints'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_CRLDistributionPoints'/2 =
    %% Line 5664
    fun (_cor1,_cor0) ->
	%% Line 5665
	case apply 'enc_CRLDistributionPoints_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 5666
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_CRLDistributionPoints_components'/3 =
    %% Line 5668
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 5669
		  call 'lists':'reverse'
		      (AccBytes)
	      in  %% Line 5669
		  {_cor3,AccLen}
	  %% Line 5671
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 5672
	      case apply 'enc_DistributionPoint'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 5673
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 5673
			apply 'enc_CRLDistributionPoints_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_CRLDistributionPoints_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_CRLDistributionPoints'/1 =
    %% Line 5677
    fun (_cor0) ->
	%% Line 5678
	apply 'dec_CRLDistributionPoints'/2
	    (_cor0, [16])
'dec_CRLDistributionPoints'/2 =
    %% Line 5680
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 5684
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 5685
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_DistributionPoint'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'enc_SkipCerts'/1 =
    %% Line 5693
    fun (_cor0) ->
	%% Line 5694
	apply 'enc_SkipCerts'/2
	    (_cor0, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
'enc_SkipCerts'/2 =
    %% Line 5696
    fun (_cor1,_cor0) ->
	%% Line 5697
	apply 'encode_integer'/2
	    (_cor1, _cor0)
'dec_SkipCerts'/1 =
    %% Line 5700
    fun (_cor0) ->
	%% Line 5701
	apply 'dec_SkipCerts'/2
	    (_cor0, [2])
'dec_SkipCerts'/2 =
    %% Line 5703
    fun (_cor1,_cor0) ->
	let <Val1> =
	    %% Line 5705
	    apply 'decode_integer'/2
		(_cor1, _cor0)
	in  %% Line 5706
	    case <> of
	      <>
		  when let <_cor3> =
			call 'erlang':'=<'
			    (0, Val1)
		    in  let <_cor4> =
			    call 'erlang':'=<'
				(Val1, 'MAX')
			in  call 'erlang':'and'
				(_cor3, _cor4) ->
		  %% Line 5707
		  Val1
	      %% Line 5708
	      <> when 'true' ->
		  %% Line 5709
		  call 'erlang':'exit'
		      ({'error',{'asn1','bad_range'}})
	    end
'enc_PolicyConstraints'/1 =
    %% Line 5718
    fun (_cor0) ->
	%% Line 5719
	apply 'enc_PolicyConstraints'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_PolicyConstraints'/2 =
    %% Line 5721
    fun (_cor1,_cor0) ->
	%% Line 5722
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2}> when 'true' ->
	      let <_cor4> =
		  %% Line 5727
		  case Cindex1 of
		    %% Line 5728
		    <'asn1_NOVALUE'> when 'true' ->
			{#{}#,0}
		    %% Line 5729
		    <_cor14> when 'true' ->
			%% Line 5730
			apply 'encode_integer'/2
			    (Cindex1, [#{#<128>(8,1,'integer',['unsigned'|['big']])}#])
		  end
	      in  %% Line 5727
		  case _cor4 of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor7> =
			    %% Line 5736
			    case Cindex2 of
			      %% Line 5737
			      <'asn1_NOVALUE'> when 'true' ->
				  {#{}#,0}
			      %% Line 5738
			      <_cor15> when 'true' ->
				  %% Line 5739
				  apply 'encode_integer'/2
				      (Cindex2, [#{#<129>(8,1,'integer',['unsigned'|['big']])}#])
			    end
			in  %% Line 5736
			    case _cor7 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  let <BytesSoFar> =
				      %% Line 5742
				      [EncBytes1|[EncBytes2|[]]]
				  in  let <LenSoFar> =
					  %% Line 5743
					  call 'erlang':'+'
					      (EncLen1, EncLen2)
				      in  %% Line 5744
					  apply 'encode_tags'/3
					      (_cor0, BytesSoFar, LenSoFar)
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_PolicyConstraints'/1 =
    %% Line 5747
    fun (_cor0) ->
	%% Line 5748
	apply 'dec_PolicyConstraints'/2
	    (_cor0, [16])
'dec_PolicyConstraints'/2 =
    %% Line 5750
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 5754
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <Term1,Tlv2> =
		%% Line 5759
		case Tlv1 of
		  %% Line 5760
		  <[{131072,V1}|TempTlv2]> when 'true' ->
		      let <Val1> =
			  %% Line 5762
			  apply 'decode_integer'/2
			      (V1, [])
		      in  %% Line 5763
			  case <> of
			    <>
				when let <_cor4> =
				      call 'erlang':'=<'
					  (0, Val1)
				  in  let <_cor5> =
					  call 'erlang':'=<'
					      (Val1, 'MAX')
				      in  call 'erlang':'and'
					      (_cor4, _cor5) ->
				<%% Line 5764
				 Val1,%% Line 5768
				      TempTlv2>
			    %% Line 5765
			    <> when 'true' ->
				%% Line 5766
				call 'erlang':'exit'
				    ({'error',{'asn1','bad_range'}})
			  end
		  %% Line 5769
		  <_cor20> when 'true' ->
		      %% Line 5770
		      <'asn1_NOVALUE',Tlv1>
		end
	    in  let <Term2,Tlv3> =
		    %% Line 5776
		    case Tlv2 of
		      %% Line 5777
		      <[{131073,V2}|TempTlv3]> when 'true' ->
			  let <Val2> =
			      %% Line 5779
			      apply 'decode_integer'/2
				  (V2, [])
			  in  %% Line 5780
			      case <> of
				<>
				    when let <_cor11> =
					  call 'erlang':'=<'
					      (0, Val2)
				      in  let <_cor12> =
					      call 'erlang':'=<'
						  (Val2, 'MAX')
					  in  call 'erlang':'and'
						  (_cor11, _cor12) ->
				    <%% Line 5781
				     Val2,%% Line 5785
					  TempTlv3>
				%% Line 5782
				<> when 'true' ->
				    %% Line 5783
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		      %% Line 5786
		      <_cor21> when 'true' ->
			  %% Line 5787
			  <'asn1_NOVALUE',Tlv2>
		    end
		in  do  %% Line 5790
			case Tlv3 of
			  %% Line 5791
			  <[]> when 'true' ->
			      'ok'
			  %% Line 5791
			  <_cor22> when 'true' ->
			      call 'erlang':'exit'
				  ({'error',{'asn1',{'unexpected',Tlv3}}})
			end
			%% Line 5793
			{'PolicyConstraints',Term1,Term2}
'enc_BaseDistance'/1 =
    %% Line 5800
    fun (_cor0) ->
	%% Line 5801
	apply 'enc_BaseDistance'/2
	    (_cor0, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
'enc_BaseDistance'/2 =
    %% Line 5803
    fun (_cor1,_cor0) ->
	%% Line 5804
	apply 'encode_integer'/2
	    (_cor1, _cor0)
'dec_BaseDistance'/1 =
    %% Line 5807
    fun (_cor0) ->
	%% Line 5808
	apply 'dec_BaseDistance'/2
	    (_cor0, [2])
'dec_BaseDistance'/2 =
    %% Line 5810
    fun (_cor1,_cor0) ->
	let <Val1> =
	    %% Line 5812
	    apply 'decode_integer'/2
		(_cor1, _cor0)
	in  %% Line 5813
	    case <> of
	      <>
		  when let <_cor3> =
			call 'erlang':'=<'
			    (0, Val1)
		    in  let <_cor4> =
			    call 'erlang':'=<'
				(Val1, 'MAX')
			in  call 'erlang':'and'
				(_cor3, _cor4) ->
		  %% Line 5814
		  Val1
	      %% Line 5815
	      <> when 'true' ->
		  %% Line 5816
		  call 'erlang':'exit'
		      ({'error',{'asn1','bad_range'}})
	    end
'enc_GeneralSubtree'/1 =
    %% Line 5825
    fun (_cor0) ->
	%% Line 5826
	apply 'enc_GeneralSubtree'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_GeneralSubtree'/2 =
    %% Line 5828
    fun (_cor1,_cor0) ->
	%% Line 5829
	case _cor1 of
	  <{_cor15,Cindex1,Cindex2,Cindex3}> when 'true' ->
	      %% Line 5834
	      case apply 'enc_GeneralName'/2
		       (Cindex1, []) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    let <_cor5> =
			%% Line 5839
			case apply 'is_default_9'/1
				 (Cindex2) of
			  %% Line 5840
			  <'true'> when 'true' ->
			      {[],0}
			  %% Line 5841
			  <'false'> when 'true' ->
			      %% Line 5842
			      apply 'encode_integer'/2
				  (Cindex2, [#{#<128>(8,1,'integer',['unsigned'|['big']])}#])
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor4})
			    -| ['compiler_generated'] )
			end
		    in  %% Line 5839
			case _cor5 of
			  <{EncBytes2,EncLen2}> when 'true' ->
			      let <_cor8> =
				  %% Line 5848
				  case Cindex3 of
				    %% Line 5849
				    <'asn1_NOVALUE'> when 'true' ->
					{#{}#,0}
				    %% Line 5850
				    <_cor16> when 'true' ->
					%% Line 5851
					apply 'encode_integer'/2
					    (Cindex3, [#{#<129>(8,1,'integer',['unsigned'|['big']])}#])
				  end
			      in  %% Line 5848
				  case _cor8 of
				    <{EncBytes3,EncLen3}> when 'true' ->
					let <BytesSoFar> =
					    %% Line 5854
					    [EncBytes1|[EncBytes2|[EncBytes3|[]]]]
					in  let <_cor11> =
						%% Line 5855
						call 'erlang':'+'
						    (EncLen1, EncLen2)
					    in  let <LenSoFar> =
						    %% Line 5855
						    call 'erlang':'+'
							(_cor11, EncLen3)
						in  %% Line 5856
						    apply 'encode_tags'/3
							(_cor0, BytesSoFar, LenSoFar)
				    ( <_cor9> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor9})
				      -| ['compiler_generated'] )
				  end
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_GeneralSubtree'/1 =
    %% Line 5859
    fun (_cor0) ->
	%% Line 5860
	apply 'dec_GeneralSubtree'/2
	    (_cor0, [16])
'dec_GeneralSubtree'/2 =
    %% Line 5862
    fun (_cor1,_cor0) ->
	%% Line 5871
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 5872
		  apply 'dec_GeneralName'/2
		      (V1, [])
	      in  let <Term2,Tlv3> =
		      %% Line 5877
		      case Tlv2 of
			%% Line 5878
			<[{131072,V2}|TempTlv3]> when 'true' ->
			    let <Val1> =
				%% Line 5880
				apply 'decode_integer'/2
				    (V2, [])
			    in  %% Line 5881
				case <> of
				  <>
				      when let <_cor6> =
					    call 'erlang':'=<'
						(0, Val1)
					in  let <_cor7> =
						call 'erlang':'=<'
						    (Val1, 'MAX')
					    in  call 'erlang':'and'
						    (_cor6, _cor7) ->
				      <%% Line 5882
				       Val1,%% Line 5886
					    TempTlv3>
				  %% Line 5883
				  <> when 'true' ->
				      %% Line 5884
				      call 'erlang':'exit'
					  ({'error',{'asn1','bad_range'}})
				end
			%% Line 5887
			<_cor22> when 'true' ->
			    %% Line 5888
			    <0,Tlv2>
		      end
		  in  let <Term3,Tlv4> =
			  %% Line 5894
			  case Tlv3 of
			    %% Line 5895
			    <[{131073,V3}|TempTlv4]> when 'true' ->
				let <Val2> =
				    %% Line 5897
				    apply 'decode_integer'/2
					(V3, [])
				in  %% Line 5898
				    case <> of
				      <>
					  when let <_cor13> =
						call 'erlang':'=<'
						    (0, Val2)
					    in  let <_cor14> =
						    call 'erlang':'=<'
							(Val2, 'MAX')
						in  call 'erlang':'and'
							(_cor13, _cor14) ->
					  <%% Line 5899
					   Val2,%% Line 5903
						TempTlv4>
				      %% Line 5900
				      <> when 'true' ->
					  %% Line 5901
					  call 'erlang':'exit'
					      ({'error',{'asn1','bad_range'}})
				    end
			    %% Line 5904
			    <_cor23> when 'true' ->
				%% Line 5905
				<'asn1_NOVALUE',Tlv3>
			  end
		      in  do  %% Line 5908
			      case Tlv4 of
				%% Line 5909
				<[]> when 'true' ->
				    'ok'
				%% Line 5909
				<_cor24> when 'true' ->
				    call 'erlang':'exit'
					({'error',{'asn1',{'unexpected',Tlv4}}})
			      end
			      %% Line 5911
			      {'GeneralSubtree',Term1,Term2,Term3}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_GeneralSubtrees'/1 =
    %% Line 5918
    fun (_cor0) ->
	%% Line 5919
	apply 'enc_GeneralSubtrees'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_GeneralSubtrees'/2 =
    %% Line 5921
    fun (_cor1,_cor0) ->
	%% Line 5922
	case apply 'enc_GeneralSubtrees_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 5923
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_GeneralSubtrees_components'/3 =
    %% Line 5925
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 5926
		  call 'lists':'reverse'
		      (AccBytes)
	      in  %% Line 5926
		  {_cor3,AccLen}
	  %% Line 5928
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 5929
	      case apply 'enc_GeneralSubtree'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 5930
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 5930
			apply 'enc_GeneralSubtrees_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_GeneralSubtrees_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_GeneralSubtrees'/1 =
    %% Line 5934
    fun (_cor0) ->
	%% Line 5935
	apply 'dec_GeneralSubtrees'/2
	    (_cor0, [16])
'dec_GeneralSubtrees'/2 =
    %% Line 5937
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 5941
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 5942
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_GeneralSubtree'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'enc_NameConstraints'/1 =
    %% Line 5950
    fun (_cor0) ->
	%% Line 5951
	apply 'enc_NameConstraints'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_NameConstraints'/2 =
    %% Line 5953
    fun (_cor1,_cor0) ->
	%% Line 5954
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2}> when 'true' ->
	      let <_cor4> =
		  %% Line 5959
		  case Cindex1 of
		    %% Line 5960
		    <'asn1_NOVALUE'> when 'true' ->
			{#{}#,0}
		    %% Line 5961
		    <_cor14> when 'true' ->
			%% Line 5962
			apply 'enc_GeneralSubtrees'/2
			    (Cindex1, [#{#<160>(8,1,'integer',['unsigned'|['big']])}#])
		  end
	      in  %% Line 5959
		  case _cor4 of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor7> =
			    %% Line 5968
			    case Cindex2 of
			      %% Line 5969
			      <'asn1_NOVALUE'> when 'true' ->
				  {#{}#,0}
			      %% Line 5970
			      <_cor15> when 'true' ->
				  %% Line 5971
				  apply 'enc_GeneralSubtrees'/2
				      (Cindex2, [#{#<161>(8,1,'integer',['unsigned'|['big']])}#])
			    end
			in  %% Line 5968
			    case _cor7 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  let <BytesSoFar> =
				      %% Line 5974
				      [EncBytes1|[EncBytes2|[]]]
				  in  let <LenSoFar> =
					  %% Line 5975
					  call 'erlang':'+'
					      (EncLen1, EncLen2)
				      in  %% Line 5976
					  apply 'encode_tags'/3
					      (_cor0, BytesSoFar, LenSoFar)
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_NameConstraints'/1 =
    %% Line 5979
    fun (_cor0) ->
	%% Line 5980
	apply 'dec_NameConstraints'/2
	    (_cor0, [16])
'dec_NameConstraints'/2 =
    %% Line 5982
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 5986
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <Term1,Tlv2> =
		%% Line 5991
		case Tlv1 of
		  %% Line 5992
		  <[{131072,V1}|TempTlv2]> when 'true' ->
		      let <_cor3> =
			  %% Line 5993
			  apply 'dec_GeneralSubtrees'/2
			      (V1, [])
		      in  <_cor3,%% Line 5993
				 TempTlv2>
		  %% Line 5994
		  <_cor14> when 'true' ->
		      %% Line 5995
		      <'asn1_NOVALUE',Tlv1>
		end
	    in  let <Term2,Tlv3> =
		    %% Line 6001
		    case Tlv2 of
		      %% Line 6002
		      <[{131073,V2}|TempTlv3]> when 'true' ->
			  let <_cor7> =
			      %% Line 6003
			      apply 'dec_GeneralSubtrees'/2
				  (V2, [])
			  in  <_cor7,%% Line 6003
				     TempTlv3>
		      %% Line 6004
		      <_cor15> when 'true' ->
			  %% Line 6005
			  <'asn1_NOVALUE',Tlv2>
		    end
		in  do  %% Line 6008
			case Tlv3 of
			  %% Line 6009
			  <[]> when 'true' ->
			      'ok'
			  %% Line 6009
			  <_cor16> when 'true' ->
			      call 'erlang':'exit'
				  ({'error',{'asn1',{'unexpected',Tlv3}}})
			end
			%% Line 6011
			{'NameConstraints',Term1,Term2}
'enc_BasicConstraints'/1 =
    %% Line 6018
    fun (_cor0) ->
	%% Line 6019
	apply 'enc_BasicConstraints'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_BasicConstraints'/2 =
    %% Line 6021
    fun (_cor1,_cor0) ->
	%% Line 6022
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2}> when 'true' ->
	      let <_cor4> =
		  %% Line 6027
		  case apply 'is_default_10'/1
			   (Cindex1) of
		    %% Line 6028
		    <'true'> when 'true' ->
			{[],0}
		    %% Line 6029
		    <'false'> when 'true' ->
			%% Line 6030
			apply 'encode_boolean'/2
			    (Cindex1, [#{#<1>(8,1,'integer',['unsigned'|['big']])}#])
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 6027
		  case _cor4 of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor7> =
			    %% Line 6036
			    case Cindex2 of
			      %% Line 6037
			      <'asn1_NOVALUE'> when 'true' ->
				  {#{}#,0}
			      %% Line 6038
			      <_cor14> when 'true' ->
				  %% Line 6039
				  apply 'encode_integer'/2
				      (Cindex2, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
			    end
			in  %% Line 6036
			    case _cor7 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  let <BytesSoFar> =
				      %% Line 6042
				      [EncBytes1|[EncBytes2|[]]]
				  in  let <LenSoFar> =
					  %% Line 6043
					  call 'erlang':'+'
					      (EncLen1, EncLen2)
				      in  %% Line 6044
					  apply 'encode_tags'/3
					      (_cor0, BytesSoFar, LenSoFar)
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_BasicConstraints'/1 =
    %% Line 6047
    fun (_cor0) ->
	%% Line 6048
	apply 'dec_BasicConstraints'/2
	    (_cor0, [16])
'dec_BasicConstraints'/2 =
    %% Line 6050
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 6054
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <Term1,Tlv2> =
		%% Line 6059
		case Tlv1 of
		  %% Line 6060
		  <[{1,V1}|TempTlv2]> when 'true' ->
		      let <_cor3> =
			  %% Line 6061
			  apply 'decode_boolean'/2
			      (V1, [])
		      in  <_cor3,%% Line 6061
				 TempTlv2>
		  %% Line 6062
		  <_cor17> when 'true' ->
		      %% Line 6063
		      <'false',Tlv1>
		end
	    in  let <Term2,Tlv3> =
		    %% Line 6069
		    case Tlv2 of
		      %% Line 6070
		      <[{2,V2}|TempTlv3]> when 'true' ->
			  let <Val1> =
			      %% Line 6072
			      apply 'decode_integer'/2
				  (V2, [])
			  in  %% Line 6073
			      case <> of
				<>
				    when let <_cor8> =
					  call 'erlang':'=<'
					      (0, Val1)
				      in  let <_cor9> =
					      call 'erlang':'=<'
						  (Val1, 'MAX')
					  in  call 'erlang':'and'
						  (_cor8, _cor9) ->
				    <%% Line 6074
				     Val1,%% Line 6078
					  TempTlv3>
				%% Line 6075
				<> when 'true' ->
				    %% Line 6076
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		      %% Line 6079
		      <_cor18> when 'true' ->
			  %% Line 6080
			  <'asn1_NOVALUE',Tlv2>
		    end
		in  do  %% Line 6083
			case Tlv3 of
			  %% Line 6084
			  <[]> when 'true' ->
			      'ok'
			  %% Line 6084
			  <_cor19> when 'true' ->
			      call 'erlang':'exit'
				  ({'error',{'asn1',{'unexpected',Tlv3}}})
			end
			%% Line 6086
			{'BasicConstraints',Term1,Term2}
'enc_SubjectDirectoryAttributes'/1 =
    %% Line 6093
    fun (_cor0) ->
	%% Line 6094
	apply 'enc_SubjectDirectoryAttributes'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_SubjectDirectoryAttributes'/2 =
    %% Line 6096
    fun (_cor1,_cor0) ->
	%% Line 6097
	case apply 'enc_SubjectDirectoryAttributes_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 6098
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_SubjectDirectoryAttributes_components'/3 =
    %% Line 6100
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 6101
		  call 'lists':'reverse'
		      (AccBytes)
	      in  %% Line 6101
		  {_cor3,AccLen}
	  %% Line 6103
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 6104
	      case apply 'enc_Attribute'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 6105
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 6105
			apply 'enc_SubjectDirectoryAttributes_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_SubjectDirectoryAttributes_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_SubjectDirectoryAttributes'/1 =
    %% Line 6109
    fun (_cor0) ->
	%% Line 6110
	apply 'dec_SubjectDirectoryAttributes'/2
	    (_cor0, [16])
'dec_SubjectDirectoryAttributes'/2 =
    %% Line 6112
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 6116
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 6117
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_Attribute'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'enc_IssuerAltName'/1 =
    %% Line 6125
    fun (_cor0) ->
	%% Line 6126
	apply 'enc_IssuerAltName'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_IssuerAltName'/2 =
    %% Line 6128
    fun (_cor1,_cor0) ->
	%% Line 6129
	apply 'enc_GeneralNames'/2
	    (_cor1, _cor0)
'dec_IssuerAltName'/1 =
    %% Line 6132
    fun (_cor0) ->
	%% Line 6133
	apply 'dec_IssuerAltName'/2
	    (_cor0, [16])
'dec_IssuerAltName'/2 =
    %% Line 6135
    fun (_cor1,_cor0) ->
	%% Line 6136
	apply 'dec_GeneralNames'/2
	    (_cor1, _cor0)
'enc_EDIPartyName'/1 =
    %% Line 6143
    fun (_cor0) ->
	%% Line 6144
	apply 'enc_EDIPartyName'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_EDIPartyName'/2 =
    %% Line 6146
    fun (_cor1,_cor0) ->
	%% Line 6147
	case _cor1 of
	  <{_cor11,Cindex1,Cindex2}> when 'true' ->
	      let <_cor4> =
		  %% Line 6152
		  case Cindex1 of
		    %% Line 6153
		    <'asn1_NOVALUE'> when 'true' ->
			{#{}#,0}
		    %% Line 6154
		    <_cor12> when 'true' ->
			%% Line 6155
			apply 'enc_DirectoryString'/2
			    (Cindex1, [#{#<160>(8,1,'integer',['unsigned'|['big']])}#])
		  end
	      in  %% Line 6152
		  case _cor4 of
		    <{EncBytes1,EncLen1}> when 'true' ->
			%% Line 6161
			case apply 'enc_DirectoryString'/2
				 (Cindex2, [#{#<161>(8,1,'integer',['unsigned'|['big']])}#]) of
			  <{EncBytes2,EncLen2}> when 'true' ->
			      let <BytesSoFar> =
				  %% Line 6163
				  [EncBytes1|[EncBytes2|[]]]
			      in  let <LenSoFar> =
				      %% Line 6164
				      call 'erlang':'+'
					  (EncLen1, EncLen2)
				  in  %% Line 6165
				      apply 'encode_tags'/3
					  (_cor0, BytesSoFar, LenSoFar)
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_EDIPartyName'/1 =
    %% Line 6168
    fun (_cor0) ->
	%% Line 6169
	apply 'dec_EDIPartyName'/2
	    (_cor0, [16])
'dec_EDIPartyName'/2 =
    %% Line 6171
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 6175
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <Term1,Tlv2> =
		%% Line 6180
		case Tlv1 of
		  %% Line 6181
		  <[{131072,V1}|TempTlv2]> when 'true' ->
		      let <_cor3> =
			  %% Line 6182
			  apply 'dec_DirectoryString'/2
			      (V1, [])
		      in  <_cor3,%% Line 6182
				 TempTlv2>
		  %% Line 6183
		  <_cor12> when 'true' ->
		      %% Line 6184
		      <'asn1_NOVALUE',Tlv1>
		end
	    in  %% Line 6190
		case Tlv2 of
		  <[V2|Tlv3]> when 'true' ->
		      let <Term2> =
			  %% Line 6191
			  apply 'dec_DirectoryString'/2
			      (V2, [131073])
		      in  do  %% Line 6193
			      case Tlv3 of
				%% Line 6194
				<[]> when 'true' ->
				    'ok'
				%% Line 6194
				<_cor13> when 'true' ->
				    call 'erlang':'exit'
					({'error',{'asn1',{'unexpected',Tlv3}}})
			      end
			      %% Line 6196
			      {'EDIPartyName',Term1,Term2}
		  ( <_cor7> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor7})
		    -| ['compiler_generated'] )
		end
'enc_AnotherName'/1 =
    %% Line 6203
    fun (_cor0) ->
	%% Line 6204
	apply 'enc_AnotherName'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_AnotherName'/2 =
    %% Line 6206
    fun (_cor1,_cor0) ->
	%% Line 6207
	case _cor1 of
	  <{_cor9,Cindex1,Cindex2}> when 'true' ->
	      %% Line 6212
	      case apply 'encode_object_identifier'/2
		       (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 6217
		    case apply 'encode_open_type'/2
			     (Cindex2, [#{#<160>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <BytesSoFar> =
			      %% Line 6219
			      [EncBytes1|[EncBytes2|[]]]
			  in  let <LenSoFar> =
				  %% Line 6220
				  call 'erlang':'+'
				      (EncLen1, EncLen2)
			      in  %% Line 6221
				  apply 'encode_tags'/3
				      (_cor0, BytesSoFar, LenSoFar)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_AnotherName'/1 =
    %% Line 6224
    fun (_cor0) ->
	%% Line 6225
	apply 'dec_AnotherName'/2
	    (_cor0, [16])
'dec_AnotherName'/2 =
    %% Line 6227
    fun (_cor1,_cor0) ->
	%% Line 6236
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 6237
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  %% Line 6242
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 6243
			    apply 'decode_open_type_as_binary'/2
				(V2, [131072])
			in  do  %% Line 6245
				case Tlv3 of
				  %% Line 6246
				  <[]> when 'true' ->
				      'ok'
				  %% Line 6246
				  <_cor10> when 'true' ->
				      call 'erlang':'exit'
					  ({'error',{'asn1',{'unexpected',Tlv3}}})
				end
				%% Line 6248
				{'AnotherName',Term1,Term2}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_GeneralName'/1 =
    %% Line 6255
    fun (_cor0) ->
	%% Line 6256
	apply 'enc_GeneralName'/2
	    (_cor0, [])
'enc_GeneralName'/2 =
    %% Line 6258
    fun (_cor1,_cor0) ->
	let <_cor12> =
	    %% Line 6259
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 6260
	      <'otherName'> when 'true' ->
		  let <_cor2> =
		      %% Line 6261
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 6261
		      apply 'enc_AnotherName'/2
			  (_cor2, [#{#<160>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 6262
	      <'rfc822Name'> when 'true' ->
		  let <_cor3> =
		      %% Line 6263
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 6263
		      apply 'encode_restricted_string'/2
			  (_cor3, [#{#<129>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 6264
	      <'dNSName'> when 'true' ->
		  let <_cor4> =
		      %% Line 6265
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 6265
		      apply 'encode_restricted_string'/2
			  (_cor4, [#{#<130>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 6266
	      <'x400Address'> when 'true' ->
		  let <_cor5> =
		      %% Line 6267
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 6267
		      apply 'enc_ORAddress'/2
			  (_cor5, [#{#<163>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 6268
	      <'directoryName'> when 'true' ->
		  let <_cor6> =
		      %% Line 6269
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 6269
		      apply 'enc_Name'/2
			  (_cor6, [#{#<164>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 6270
	      <'ediPartyName'> when 'true' ->
		  let <_cor7> =
		      %% Line 6271
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 6271
		      apply 'enc_EDIPartyName'/2
			  (_cor7, [#{#<165>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 6272
	      <'uniformResourceIdentifier'> when 'true' ->
		  let <_cor8> =
		      %% Line 6273
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 6273
		      apply 'encode_restricted_string'/2
			  (_cor8, [#{#<134>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 6274
	      <'iPAddress'> when 'true' ->
		  let <_cor9> =
		      %% Line 6275
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 6275
		      apply 'encode_restricted_string'/2
			  (_cor9, [#{#<135>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 6276
	      <'registeredID'> when 'true' ->
		  let <_cor10> =
		      %% Line 6277
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 6277
		      apply 'encode_object_identifier'/2
			  (_cor10, [#{#<136>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 6278
	      <Else> when 'true' ->
		  %% Line 6279
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 6259
	    case _cor12 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 6282
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor13> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor13})
		-| ['compiler_generated'] )
	    end
'dec_GeneralName'/1 =
    %% Line 6287
    fun (_cor0) ->
	%% Line 6288
	apply 'dec_GeneralName'/2
	    (_cor0, [])
'dec_GeneralName'/2 =
    %% Line 6290
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 6291
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 6292
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor21> when 'true' ->
		      Tlv1
		end
	    in  %% Line 6292
		case _cor4 of
		  %% Line 6295
		  <{131072,V1}> when 'true' ->
		      let <_cor5> =
			  %% Line 6296
			  apply 'dec_AnotherName'/2
			      (V1, [])
		      in  %% Line 6296
			  {'otherName',_cor5}
		  %% Line 6300
		  <{131073,V1}> when 'true' ->
		      let <_cor6> =
			  %% Line 6302
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <_cor7> =
			      %% Line 6302
			      call 'erlang':'binary_to_list'
				  (_cor6)
			  in  %% Line 6301
			      {'rfc822Name',_cor7}
		  %% Line 6308
		  <{131074,V1}> when 'true' ->
		      let <_cor8> =
			  %% Line 6310
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <_cor9> =
			      %% Line 6310
			      call 'erlang':'binary_to_list'
				  (_cor8)
			  in  %% Line 6309
			      {'dNSName',_cor9}
		  %% Line 6316
		  <{131075,V1}> when 'true' ->
		      let <_cor10> =
			  %% Line 6317
			  apply 'dec_ORAddress'/2
			      (V1, [])
		      in  %% Line 6317
			  {'x400Address',_cor10}
		  %% Line 6321
		  <{131076,V1}> when 'true' ->
		      let <_cor11> =
			  %% Line 6322
			  apply 'dec_Name'/2
			      (V1, [])
		      in  %% Line 6322
			  {'directoryName',_cor11}
		  %% Line 6326
		  <{131077,V1}> when 'true' ->
		      let <_cor12> =
			  %% Line 6327
			  apply 'dec_EDIPartyName'/2
			      (V1, [])
		      in  %% Line 6327
			  {'ediPartyName',_cor12}
		  %% Line 6331
		  <{131078,V1}> when 'true' ->
		      let <_cor13> =
			  %% Line 6333
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <_cor14> =
			      %% Line 6333
			      call 'erlang':'binary_to_list'
				  (_cor13)
			  in  %% Line 6332
			      {'uniformResourceIdentifier',_cor14}
		  %% Line 6339
		  <{131079,V1}> when 'true' ->
		      let <_cor15> =
			  %% Line 6341
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <_cor16> =
			      %% Line 6341
			      call 'erlang':'binary_to_list'
				  (_cor15)
			  in  %% Line 6340
			      {'iPAddress',_cor16}
		  %% Line 6347
		  <{131080,V1}> when 'true' ->
		      let <_cor17> =
			  %% Line 6348
			  apply 'decode_object_identifier'/2
			      (V1, [])
		      in  %% Line 6348
			  {'registeredID',_cor17}
		  %% Line 6350
		  <Else> when 'true' ->
		      %% Line 6351
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'enc_GeneralNames'/1 =
    %% Line 6359
    fun (_cor0) ->
	%% Line 6360
	apply 'enc_GeneralNames'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_GeneralNames'/2 =
    %% Line 6362
    fun (_cor1,_cor0) ->
	%% Line 6363
	case apply 'enc_GeneralNames_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 6364
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_GeneralNames_components'/3 =
    %% Line 6366
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 6367
		  call 'lists':'reverse'
		      (AccBytes)
	      in  %% Line 6367
		  {_cor3,AccLen}
	  %% Line 6369
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 6370
	      case apply 'enc_GeneralName'/2
		       (H, []) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 6371
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 6371
			apply 'enc_GeneralNames_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_GeneralNames_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_GeneralNames'/1 =
    %% Line 6375
    fun (_cor0) ->
	%% Line 6376
	apply 'dec_GeneralNames'/2
	    (_cor0, [16])
'dec_GeneralNames'/2 =
    %% Line 6378
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 6382
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 6383
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_GeneralName'/2
					(V1, [])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'enc_SubjectAltName'/1 =
    %% Line 6391
    fun (_cor0) ->
	%% Line 6392
	apply 'enc_SubjectAltName'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_SubjectAltName'/2 =
    %% Line 6394
    fun (_cor1,_cor0) ->
	%% Line 6395
	apply 'enc_GeneralNames'/2
	    (_cor1, _cor0)
'dec_SubjectAltName'/1 =
    %% Line 6398
    fun (_cor0) ->
	%% Line 6399
	apply 'dec_SubjectAltName'/2
	    (_cor0, [16])
'dec_SubjectAltName'/2 =
    %% Line 6401
    fun (_cor1,_cor0) ->
	%% Line 6402
	apply 'dec_GeneralNames'/2
	    (_cor1, _cor0)
'enc_PolicyMappings'/1 =
    %% Line 6409
    fun (_cor0) ->
	%% Line 6410
	apply 'enc_PolicyMappings'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_PolicyMappings'/2 =
    %% Line 6412
    fun (_cor1,_cor0) ->
	%% Line 6413
	case apply 'enc_PolicyMappings_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 6414
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_PolicyMappings_components'/3 =
    %% Line 6416
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 6417
		  call 'lists':'reverse'
		      (AccBytes)
	      in  %% Line 6417
		  {_cor3,AccLen}
	  %% Line 6419
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 6420
	      case apply 'enc_PolicyMappings_SEQOF'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 6421
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 6421
			apply 'enc_PolicyMappings_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_PolicyMappings_components',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_PolicyMappings_SEQOF'/2 =
    %% Line 6429
    fun (_cor1,_cor0) ->
	%% Line 6430
	case _cor1 of
	  <{_cor9,Cindex1,Cindex2}> when 'true' ->
	      %% Line 6435
	      case apply 'encode_object_identifier'/2
		       (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 6440
		    case apply 'encode_object_identifier'/2
			     (Cindex2, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <BytesSoFar> =
			      %% Line 6442
			      [EncBytes1|[EncBytes2|[]]]
			  in  let <LenSoFar> =
				  %% Line 6443
				  call 'erlang':'+'
				      (EncLen1, EncLen2)
			      in  %% Line 6444
				  apply 'encode_tags'/3
				      (_cor0, BytesSoFar, LenSoFar)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_PolicyMappings_SEQOF'/2 =
    %% Line 6445
    fun (_cor1,_cor0) ->
	%% Line 6454
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 6455
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  %% Line 6460
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 6461
			    apply 'decode_object_identifier'/2
				(V2, [6])
			in  do  %% Line 6463
				case Tlv3 of
				  %% Line 6464
				  <[]> when 'true' ->
				      'ok'
				  %% Line 6464
				  <_cor10> when 'true' ->
				      call 'erlang':'exit'
					  ({'error',{'asn1',{'unexpected',Tlv3}}})
				end
				%% Line 6466
				{'PolicyMappings_SEQOF',Term1,Term2}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'dec_PolicyMappings'/1 =
    %% Line 6470
    fun (_cor0) ->
	%% Line 6471
	apply 'dec_PolicyMappings'/2
	    (_cor0, [16])
'dec_PolicyMappings'/2 =
    %% Line 6473
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 6477
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 6478
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_PolicyMappings_SEQOF'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'enc_DisplayText'/1 =
    %% Line 6486
    fun (_cor0) ->
	%% Line 6487
	apply 'enc_DisplayText'/2
	    (_cor0, [])
'enc_DisplayText'/2 =
    %% Line 6489
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 6490
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 6491
	      <'ia5String'> when 'true' ->
		  let <_cor2> =
		      %% Line 6492
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 6492
		      apply 'encode_restricted_string'/2
			  (_cor2, [#{#<22>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 6493
	      <'visibleString'> when 'true' ->
		  let <_cor3> =
		      %% Line 6494
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 6494
		      apply 'encode_restricted_string'/2
			  (_cor3, [#{#<26>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 6495
	      <'bmpString'> when 'true' ->
		  let <_cor4> =
		      %% Line 6496
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 6496
		      apply 'encode_BMP_string'/2
			  (_cor4, [#{#<30>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 6497
	      <'utf8String'> when 'true' ->
		  let <_cor5> =
		      %% Line 6498
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 6498
		      apply 'encode_UTF8_string'/2
			  (_cor5, [#{#<12>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 6499
	      <Else> when 'true' ->
		  %% Line 6500
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 6490
	    case _cor7 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 6503
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor8> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor8})
		-| ['compiler_generated'] )
	    end
'dec_DisplayText'/1 =
    %% Line 6508
    fun (_cor0) ->
	%% Line 6509
	apply 'dec_DisplayText'/2
	    (_cor0, [])
'dec_DisplayText'/2 =
    %% Line 6511
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 6512
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 6513
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor24> when 'true' ->
		      Tlv1
		end
	    in  %% Line 6513
		case _cor4 of
		  %% Line 6516
		  <{22,V1}> when 'true' ->
		      let <Val1> =
			  %% Line 6518
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <C1> =
			      %% Line 6519
			      call 'erlang':'byte_size'
				  (Val1)
			  in  %% Line 6520
			      case <> of
				<>
				    when let <_cor7> =
					  call 'erlang':'=<'
					      (1, C1)
				      in  let <_cor8> =
					      call 'erlang':'=<'
						  (C1, 200)
					  in  call 'erlang':'and'
						  (_cor7, _cor8) ->
				    let <_cor9> =
					%% Line 6521
					call 'erlang':'binary_to_list'
					    (Val1)
				    in  {'ia5String',_cor9}
				%% Line 6522
				<> when 'true' ->
				    %% Line 6523
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 6529
		  <{26,V1}> when 'true' ->
		      let <Val2> =
			  %% Line 6531
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <C2> =
			      %% Line 6532
			      call 'erlang':'byte_size'
				  (Val2)
			  in  %% Line 6533
			      case <> of
				<>
				    when let <_cor12> =
					  call 'erlang':'=<'
					      (1, C2)
				      in  let <_cor13> =
					      call 'erlang':'=<'
						  (C2, 200)
					  in  call 'erlang':'and'
						  (_cor12, _cor13) ->
				    let <_cor14> =
					%% Line 6534
					call 'erlang':'binary_to_list'
					    (Val2)
				    in  {'visibleString',_cor14}
				%% Line 6535
				<> when 'true' ->
				    %% Line 6536
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 6542
		  <{30,V1}> when 'true' ->
		      let <Val3> =
			  %% Line 6544
			  apply 'decode_BMP_string'/2
			      (V1, [])
		      in  let <C3> =
			      %% Line 6545
			      call 'erlang':'length'
				  (Val3)
			  in  %% Line 6546
			      case <> of
				<>
				    when let <_cor17> =
					  call 'erlang':'=<'
					      (1, C3)
				      in  let <_cor18> =
					      call 'erlang':'=<'
						  (C3, 200)
					  in  call 'erlang':'and'
						  (_cor17, _cor18) ->
				    {'bmpString',%% Line 6547
						 Val3}
				%% Line 6548
				<> when 'true' ->
				    %% Line 6549
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 6555
		  <{12,V1}> when 'true' ->
		      let <_cor20> =
			  %% Line 6556
			  apply 'decode_UTF8_string'/2
			      (V1, [])
		      in  %% Line 6556
			  {'utf8String',_cor20}
		  %% Line 6558
		  <Else> when 'true' ->
		      %% Line 6559
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'enc_NoticeReference'/1 =
    %% Line 6567
    fun (_cor0) ->
	%% Line 6568
	apply 'enc_NoticeReference'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_NoticeReference'/2 =
    %% Line 6570
    fun (_cor1,_cor0) ->
	%% Line 6571
	case _cor1 of
	  <{_cor9,Cindex1,Cindex2}> when 'true' ->
	      %% Line 6576
	      case apply 'enc_DisplayText'/2
		       (Cindex1, []) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 6581
		    case apply 'enc_NoticeReference_noticeNumbers'/2
			     (Cindex2, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <BytesSoFar> =
			      %% Line 6583
			      [EncBytes1|[EncBytes2|[]]]
			  in  let <LenSoFar> =
				  %% Line 6584
				  call 'erlang':'+'
				      (EncLen1, EncLen2)
			      in  %% Line 6585
				  apply 'encode_tags'/3
				      (_cor0, BytesSoFar, LenSoFar)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_NoticeReference_noticeNumbers'/2 =
    %% Line 6592
    fun (_cor1,_cor0) ->
	%% Line 6593
	case apply 'enc_NoticeReference_noticeNumbers_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 6594
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_NoticeReference_noticeNumbers_components'/3 =
    %% Line 6596
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 6597
		  call 'lists':'reverse'
		      (AccBytes)
	      in  %% Line 6597
		  {_cor3,AccLen}
	  %% Line 6599
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 6600
	      case apply 'encode_integer'/2
		       (H, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 6601
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 6601
			apply 'enc_NoticeReference_noticeNumbers_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_NoticeReference_noticeNumbers_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_NoticeReference_noticeNumbers'/2 =
    %% Line 6603
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 6607
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 6608
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'decode_integer'/2
					(V1, [2])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'dec_NoticeReference'/1 =
    %% Line 6613
    fun (_cor0) ->
	%% Line 6614
	apply 'dec_NoticeReference'/2
	    (_cor0, [16])
'dec_NoticeReference'/2 =
    %% Line 6616
    fun (_cor1,_cor0) ->
	%% Line 6625
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 6626
		  apply 'dec_DisplayText'/2
		      (V1, [])
	      in  %% Line 6631
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 6632
			    apply 'dec_NoticeReference_noticeNumbers'/2
				(V2, [16])
			in  do  %% Line 6634
				case Tlv3 of
				  %% Line 6635
				  <[]> when 'true' ->
				      'ok'
				  %% Line 6635
				  <_cor10> when 'true' ->
				      call 'erlang':'exit'
					  ({'error',{'asn1',{'unexpected',Tlv3}}})
				end
				%% Line 6637
				{'NoticeReference',Term1,Term2}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_UserNotice'/1 =
    %% Line 6644
    fun (_cor0) ->
	%% Line 6645
	apply 'enc_UserNotice'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_UserNotice'/2 =
    %% Line 6647
    fun (_cor1,_cor0) ->
	%% Line 6648
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2}> when 'true' ->
	      let <_cor4> =
		  %% Line 6653
		  case Cindex1 of
		    %% Line 6654
		    <'asn1_NOVALUE'> when 'true' ->
			{#{}#,0}
		    %% Line 6655
		    <_cor14> when 'true' ->
			%% Line 6656
			apply 'enc_NoticeReference'/2
			    (Cindex1, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
		  end
	      in  %% Line 6653
		  case _cor4 of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor7> =
			    %% Line 6662
			    case Cindex2 of
			      %% Line 6663
			      <'asn1_NOVALUE'> when 'true' ->
				  {#{}#,0}
			      %% Line 6664
			      <_cor15> when 'true' ->
				  %% Line 6665
				  apply 'enc_DisplayText'/2
				      (Cindex2, [])
			    end
			in  %% Line 6662
			    case _cor7 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  let <BytesSoFar> =
				      %% Line 6668
				      [EncBytes1|[EncBytes2|[]]]
				  in  let <LenSoFar> =
					  %% Line 6669
					  call 'erlang':'+'
					      (EncLen1, EncLen2)
				      in  %% Line 6670
					  apply 'encode_tags'/3
					      (_cor0, BytesSoFar, LenSoFar)
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_UserNotice'/1 =
    %% Line 6673
    fun (_cor0) ->
	%% Line 6674
	apply 'dec_UserNotice'/2
	    (_cor0, [16])
'dec_UserNotice'/2 =
    %% Line 6676
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 6680
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <Term1,Tlv2> =
		%% Line 6685
		case Tlv1 of
		  %% Line 6686
		  <[{16,V1}|TempTlv2]> when 'true' ->
		      let <_cor3> =
			  %% Line 6687
			  apply 'dec_NoticeReference'/2
			      (V1, [])
		      in  <_cor3,%% Line 6687
				 TempTlv2>
		  %% Line 6688
		  <_cor17> when 'true' ->
		      %% Line 6689
		      <'asn1_NOVALUE',Tlv1>
		end
	    in  let <Term2,Tlv3> =
		    %% Line 6695
		    case Tlv2 of
		      %% Line 6696
		      <[V2 = {22,_cor18}|TempTlv3]> when 'true' ->
			  let <_cor7> =
			      %% Line 6697
			      apply 'dec_DisplayText'/2
				  (V2, [])
			  in  <_cor7,%% Line 6697
				     TempTlv3>
		      %% Line 6698
		      <[V2 = {26,_cor19}|TempTlv3]> when 'true' ->
			  let <_cor8> =
			      %% Line 6699
			      apply 'dec_DisplayText'/2
				  (V2, [])
			  in  <_cor8,%% Line 6699
				     TempTlv3>
		      %% Line 6700
		      <[V2 = {30,_cor20}|TempTlv3]> when 'true' ->
			  let <_cor9> =
			      %% Line 6701
			      apply 'dec_DisplayText'/2
				  (V2, [])
			  in  <_cor9,%% Line 6701
				     TempTlv3>
		      %% Line 6702
		      <[V2 = {12,_cor21}|TempTlv3]> when 'true' ->
			  let <_cor10> =
			      %% Line 6703
			      apply 'dec_DisplayText'/2
				  (V2, [])
			  in  <_cor10,%% Line 6703
				      TempTlv3>
		      %% Line 6704
		      <_cor22> when 'true' ->
			  %% Line 6705
			  <'asn1_NOVALUE',Tlv2>
		    end
		in  do  %% Line 6708
			case Tlv3 of
			  %% Line 6709
			  <[]> when 'true' ->
			      'ok'
			  %% Line 6709
			  <_cor23> when 'true' ->
			      call 'erlang':'exit'
				  ({'error',{'asn1',{'unexpected',Tlv3}}})
			end
			%% Line 6711
			{'UserNotice',Term1,Term2}
'enc_CPSuri'/1 =
    %% Line 6718
    fun (_cor0) ->
	%% Line 6719
	apply 'enc_CPSuri'/2
	    (_cor0, [#{#<22>(8,1,'integer',['unsigned'|['big']])}#])
'enc_CPSuri'/2 =
    %% Line 6721
    fun (_cor1,_cor0) ->
	%% Line 6722
	apply 'encode_restricted_string'/2
	    (_cor1, _cor0)
'dec_CPSuri'/1 =
    %% Line 6725
    fun (_cor0) ->
	%% Line 6726
	apply 'dec_CPSuri'/2
	    (_cor0, [22])
'dec_CPSuri'/2 =
    %% Line 6728
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 6730
	    apply 'decode_restricted_string'/2
		(_cor1, _cor0)
	in  %% Line 6730
	    call 'erlang':'binary_to_list'
		(_cor2)
'enc_PolicyQualifierId'/1 =
    %% Line 6739
    fun (_cor0) ->
	%% Line 6740
	apply 'enc_PolicyQualifierId'/2
	    (_cor0, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#])
'enc_PolicyQualifierId'/2 =
    %% Line 6742
    fun (_cor1,_cor0) ->
	%% Line 6743
	apply 'encode_object_identifier'/2
	    (_cor1, _cor0)
'dec_PolicyQualifierId'/1 =
    %% Line 6746
    fun (_cor0) ->
	%% Line 6747
	apply 'dec_PolicyQualifierId'/2
	    (_cor0, [6])
'dec_PolicyQualifierId'/2 =
    %% Line 6749
    fun (_cor1,_cor0) ->
	%% Line 6750
	apply 'decode_object_identifier'/2
	    (_cor1, _cor0)
'enc_PolicyQualifierInfo'/1 =
    %% Line 6757
    fun (_cor0) ->
	%% Line 6758
	apply 'enc_PolicyQualifierInfo'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_PolicyQualifierInfo'/2 =
    %% Line 6760
    fun (_cor1,_cor0) ->
	%% Line 6761
	case _cor1 of
	  <{_cor9,Cindex1,Cindex2}> when 'true' ->
	      %% Line 6766
	      case apply 'encode_object_identifier'/2
		       (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 6771
		    case apply 'encode_open_type'/2
			     (Cindex2, []) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <BytesSoFar> =
			      %% Line 6773
			      [EncBytes1|[EncBytes2|[]]]
			  in  let <LenSoFar> =
				  %% Line 6774
				  call 'erlang':'+'
				      (EncLen1, EncLen2)
			      in  %% Line 6775
				  apply 'encode_tags'/3
				      (_cor0, BytesSoFar, LenSoFar)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_PolicyQualifierInfo'/1 =
    %% Line 6778
    fun (_cor0) ->
	%% Line 6779
	apply 'dec_PolicyQualifierInfo'/2
	    (_cor0, [16])
'dec_PolicyQualifierInfo'/2 =
    %% Line 6781
    fun (_cor1,_cor0) ->
	%% Line 6790
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 6791
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  %% Line 6796
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 6797
			    apply 'decode_open_type_as_binary'/2
				(V2, [])
			in  do  %% Line 6799
				case Tlv3 of
				  %% Line 6800
				  <[]> when 'true' ->
				      'ok'
				  %% Line 6800
				  <_cor10> when 'true' ->
				      call 'erlang':'exit'
					  ({'error',{'asn1',{'unexpected',Tlv3}}})
				end
				%% Line 6802
				{'PolicyQualifierInfo',Term1,Term2}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_CertPolicyId'/1 =
    %% Line 6809
    fun (_cor0) ->
	%% Line 6810
	apply 'enc_CertPolicyId'/2
	    (_cor0, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#])
'enc_CertPolicyId'/2 =
    %% Line 6812
    fun (_cor1,_cor0) ->
	%% Line 6813
	apply 'encode_object_identifier'/2
	    (_cor1, _cor0)
'dec_CertPolicyId'/1 =
    %% Line 6816
    fun (_cor0) ->
	%% Line 6817
	apply 'dec_CertPolicyId'/2
	    (_cor0, [6])
'dec_CertPolicyId'/2 =
    %% Line 6819
    fun (_cor1,_cor0) ->
	%% Line 6820
	apply 'decode_object_identifier'/2
	    (_cor1, _cor0)
'enc_PolicyInformation'/1 =
    %% Line 6827
    fun (_cor0) ->
	%% Line 6828
	apply 'enc_PolicyInformation'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_PolicyInformation'/2 =
    %% Line 6830
    fun (_cor1,_cor0) ->
	%% Line 6831
	case _cor1 of
	  <{_cor11,Cindex1,Cindex2}> when 'true' ->
	      %% Line 6836
	      case apply 'encode_object_identifier'/2
		       (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    let <_cor5> =
			%% Line 6841
			case Cindex2 of
			  %% Line 6842
			  <'asn1_NOVALUE'> when 'true' ->
			      {#{}#,0}
			  %% Line 6843
			  <_cor12> when 'true' ->
			      %% Line 6844
			      apply 'enc_PolicyInformation_policyQualifiers'/2
				  (Cindex2, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
			end
		    in  %% Line 6841
			case _cor5 of
			  <{EncBytes2,EncLen2}> when 'true' ->
			      let <BytesSoFar> =
				  %% Line 6847
				  [EncBytes1|[EncBytes2|[]]]
			      in  let <LenSoFar> =
				      %% Line 6848
				      call 'erlang':'+'
					  (EncLen1, EncLen2)
				  in  %% Line 6849
				      apply 'encode_tags'/3
					  (_cor0, BytesSoFar, LenSoFar)
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_PolicyInformation_policyQualifiers'/2 =
    %% Line 6856
    fun (_cor1,_cor0) ->
	%% Line 6857
	case apply 'enc_PolicyInformation_policyQualifiers_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 6858
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_PolicyInformation_policyQualifiers_components'/3 =
    %% Line 6860
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 6861
		  call 'lists':'reverse'
		      (AccBytes)
	      in  %% Line 6861
		  {_cor3,AccLen}
	  %% Line 6863
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 6864
	      case apply 'enc_PolicyQualifierInfo'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 6865
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 6865
			apply 'enc_PolicyInformation_policyQualifiers_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_PolicyInformation_policyQualifiers_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_PolicyInformation_policyQualifiers'/2 =
    %% Line 6867
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 6871
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 6872
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_PolicyQualifierInfo'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'dec_PolicyInformation'/1 =
    %% Line 6877
    fun (_cor0) ->
	%% Line 6878
	apply 'dec_PolicyInformation'/2
	    (_cor0, [16])
'dec_PolicyInformation'/2 =
    %% Line 6880
    fun (_cor1,_cor0) ->
	%% Line 6889
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 6890
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  let <Term2,Tlv3> =
		      %% Line 6895
		      case Tlv2 of
			%% Line 6896
			<[{16,V2}|TempTlv3]> when 'true' ->
			    let <_cor5> =
				%% Line 6897
				apply 'dec_PolicyInformation_policyQualifiers'/2
				    (V2, [])
			    in  <_cor5,%% Line 6897
				       TempTlv3>
			%% Line 6898
			<_cor12> when 'true' ->
			    %% Line 6899
			    <'asn1_NOVALUE',Tlv2>
		      end
		  in  do  %% Line 6902
			  case Tlv3 of
			    %% Line 6903
			    <[]> when 'true' ->
				'ok'
			    %% Line 6903
			    <_cor13> when 'true' ->
				call 'erlang':'exit'
				    ({'error',{'asn1',{'unexpected',Tlv3}}})
			  end
			  %% Line 6905
			  {'PolicyInformation',Term1,Term2}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_CertificatePolicies'/1 =
    %% Line 6912
    fun (_cor0) ->
	%% Line 6913
	apply 'enc_CertificatePolicies'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_CertificatePolicies'/2 =
    %% Line 6915
    fun (_cor1,_cor0) ->
	%% Line 6916
	case apply 'enc_CertificatePolicies_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 6917
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_CertificatePolicies_components'/3 =
    %% Line 6919
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 6920
		  call 'lists':'reverse'
		      (AccBytes)
	      in  %% Line 6920
		  {_cor3,AccLen}
	  %% Line 6922
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 6923
	      case apply 'enc_PolicyInformation'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 6924
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 6924
			apply 'enc_CertificatePolicies_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_CertificatePolicies_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_CertificatePolicies'/1 =
    %% Line 6928
    fun (_cor0) ->
	%% Line 6929
	apply 'dec_CertificatePolicies'/2
	    (_cor0, [16])
'dec_CertificatePolicies'/2 =
    %% Line 6931
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 6935
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 6936
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_PolicyInformation'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'enc_PrivateKeyUsagePeriod'/1 =
    %% Line 6944
    fun (_cor0) ->
	%% Line 6945
	apply 'enc_PrivateKeyUsagePeriod'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_PrivateKeyUsagePeriod'/2 =
    %% Line 6947
    fun (_cor1,_cor0) ->
	%% Line 6948
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2}> when 'true' ->
	      let <_cor4> =
		  %% Line 6953
		  case Cindex1 of
		    %% Line 6954
		    <'asn1_NOVALUE'> when 'true' ->
			{#{}#,0}
		    %% Line 6955
		    <_cor14> when 'true' ->
			%% Line 6956
			apply 'encode_restricted_string'/2
			    (Cindex1, [#{#<128>(8,1,'integer',['unsigned'|['big']])}#])
		  end
	      in  %% Line 6953
		  case _cor4 of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor7> =
			    %% Line 6962
			    case Cindex2 of
			      %% Line 6963
			      <'asn1_NOVALUE'> when 'true' ->
				  {#{}#,0}
			      %% Line 6964
			      <_cor15> when 'true' ->
				  %% Line 6965
				  apply 'encode_restricted_string'/2
				      (Cindex2, [#{#<129>(8,1,'integer',['unsigned'|['big']])}#])
			    end
			in  %% Line 6962
			    case _cor7 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  let <BytesSoFar> =
				      %% Line 6968
				      [EncBytes1|[EncBytes2|[]]]
				  in  let <LenSoFar> =
					  %% Line 6969
					  call 'erlang':'+'
					      (EncLen1, EncLen2)
				      in  %% Line 6970
					  apply 'encode_tags'/3
					      (_cor0, BytesSoFar, LenSoFar)
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_PrivateKeyUsagePeriod'/1 =
    %% Line 6973
    fun (_cor0) ->
	%% Line 6974
	apply 'dec_PrivateKeyUsagePeriod'/2
	    (_cor0, [16])
'dec_PrivateKeyUsagePeriod'/2 =
    %% Line 6976
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 6980
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <Term1,Tlv2> =
		%% Line 6985
		case Tlv1 of
		  %% Line 6986
		  <[{131072,V1}|TempTlv2]> when 'true' ->
		      let <_cor3> =
			  %% Line 6988
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <_cor4> =
			      %% Line 6988
			      call 'erlang':'binary_to_list'
				  (_cor3)
			  in  <_cor4,%% Line 6990
				     TempTlv2>
		  %% Line 6991
		  <_cor16> when 'true' ->
		      %% Line 6992
		      <'asn1_NOVALUE',Tlv1>
		end
	    in  let <Term2,Tlv3> =
		    %% Line 6998
		    case Tlv2 of
		      %% Line 6999
		      <[{131073,V2}|TempTlv3]> when 'true' ->
			  let <_cor8> =
			      %% Line 7001
			      apply 'decode_restricted_string'/2
				  (V2, [])
			  in  let <_cor9> =
				  %% Line 7001
				  call 'erlang':'binary_to_list'
				      (_cor8)
			      in  <_cor9,%% Line 7003
					 TempTlv3>
		      %% Line 7004
		      <_cor17> when 'true' ->
			  %% Line 7005
			  <'asn1_NOVALUE',Tlv2>
		    end
		in  do  %% Line 7008
			case Tlv3 of
			  %% Line 7009
			  <[]> when 'true' ->
			      'ok'
			  %% Line 7009
			  <_cor18> when 'true' ->
			      call 'erlang':'exit'
				  ({'error',{'asn1',{'unexpected',Tlv3}}})
			end
			%% Line 7011
			{'PrivateKeyUsagePeriod',Term1,Term2}
'enc_KeyUsage'/1 =
    %% Line 7018
    fun (_cor0) ->
	%% Line 7019
	apply 'enc_KeyUsage'/2
	    (_cor0, [#{#<3>(8,1,'integer',['unsigned'|['big']])}#])
'enc_KeyUsage'/2 =
    %% Line 7021
    fun (_cor1,_cor0) ->
	%% Line 7022
	apply 'encode_bit_string'/4
	    ([], _cor1, [{'digitalSignature',0}|[{'nonRepudiation',1}|[{'keyEncipherment',2}|[{'dataEncipherment',3}|[{'keyAgreement',4}|[{'keyCertSign',5}|[{'cRLSign',6}|[{'encipherOnly',7}|[{'decipherOnly',8}]]]]]]]]], _cor0)
'dec_KeyUsage'/1 =
    %% Line 7025
    fun (_cor0) ->
	%% Line 7026
	apply 'dec_KeyUsage'/2
	    (_cor0, [3])
'dec_KeyUsage'/2 =
    %% Line 7028
    fun (_cor1,_cor0) ->
	%% Line 7029
	apply 'decode_named_bit_string'/3
	    (_cor1, [{'digitalSignature',0}|[{'nonRepudiation',1}|[{'keyEncipherment',2}|[{'dataEncipherment',3}|[{'keyAgreement',4}|[{'keyCertSign',5}|[{'cRLSign',6}|[{'encipherOnly',7}|[{'decipherOnly',8}]]]]]]]]], _cor0)
'enc_SubjectKeyIdentifier'/1 =
    %% Line 7036
    fun (_cor0) ->
	%% Line 7037
	apply 'enc_SubjectKeyIdentifier'/2
	    (_cor0, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#])
'enc_SubjectKeyIdentifier'/2 =
    %% Line 7039
    fun (_cor1,_cor0) ->
	%% Line 7040
	apply 'encode_restricted_string'/2
	    (_cor1, _cor0)
'dec_SubjectKeyIdentifier'/1 =
    %% Line 7043
    fun (_cor0) ->
	%% Line 7044
	apply 'dec_SubjectKeyIdentifier'/2
	    (_cor0, [4])
'dec_SubjectKeyIdentifier'/2 =
    %% Line 7046
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 7048
	    apply 'decode_restricted_string'/2
		(_cor1, _cor0)
	in  %% Line 7048
	    call 'erlang':'binary_to_list'
		(_cor2)
'enc_KeyIdentifier'/1 =
    %% Line 7057
    fun (_cor0) ->
	%% Line 7058
	apply 'enc_KeyIdentifier'/2
	    (_cor0, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#])
'enc_KeyIdentifier'/2 =
    %% Line 7060
    fun (_cor1,_cor0) ->
	%% Line 7061
	apply 'encode_restricted_string'/2
	    (_cor1, _cor0)
'dec_KeyIdentifier'/1 =
    %% Line 7064
    fun (_cor0) ->
	%% Line 7065
	apply 'dec_KeyIdentifier'/2
	    (_cor0, [4])
'dec_KeyIdentifier'/2 =
    %% Line 7067
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 7069
	    apply 'decode_restricted_string'/2
		(_cor1, _cor0)
	in  %% Line 7069
	    call 'erlang':'binary_to_list'
		(_cor2)
'enc_AuthorityKeyIdentifier'/1 =
    %% Line 7078
    fun (_cor0) ->
	%% Line 7079
	apply 'enc_AuthorityKeyIdentifier'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_AuthorityKeyIdentifier'/2 =
    %% Line 7081
    fun (_cor1,_cor0) ->
	%% Line 7082
	case _cor1 of
	  <{_cor17,Cindex1,Cindex2,Cindex3}> when 'true' ->
	      let <_cor4> =
		  %% Line 7087
		  case Cindex1 of
		    %% Line 7088
		    <'asn1_NOVALUE'> when 'true' ->
			{#{}#,0}
		    %% Line 7089
		    <_cor18> when 'true' ->
			%% Line 7090
			apply 'encode_restricted_string'/2
			    (Cindex1, [#{#<128>(8,1,'integer',['unsigned'|['big']])}#])
		  end
	      in  %% Line 7087
		  case _cor4 of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor7> =
			    %% Line 7096
			    case Cindex2 of
			      %% Line 7097
			      <'asn1_NOVALUE'> when 'true' ->
				  {#{}#,0}
			      %% Line 7098
			      <_cor19> when 'true' ->
				  %% Line 7099
				  apply 'enc_GeneralNames'/2
				      (Cindex2, [#{#<161>(8,1,'integer',['unsigned'|['big']])}#])
			    end
			in  %% Line 7096
			    case _cor7 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  let <_cor10> =
				      %% Line 7105
				      case Cindex3 of
					%% Line 7106
					<'asn1_NOVALUE'> when 'true' ->
					    {#{}#,0}
					%% Line 7107
					<_cor20> when 'true' ->
					    %% Line 7108
					    apply 'encode_integer'/2
						(Cindex3, [#{#<130>(8,1,'integer',['unsigned'|['big']])}#])
				      end
				  in  %% Line 7105
				      case _cor10 of
					<{EncBytes3,EncLen3}> when 'true' ->
					    let <BytesSoFar> =
						%% Line 7111
						[EncBytes1|[EncBytes2|[EncBytes3|[]]]]
					    in  let <_cor13> =
						    %% Line 7112
						    call 'erlang':'+'
							(EncLen1, EncLen2)
						in  let <LenSoFar> =
							%% Line 7112
							call 'erlang':'+'
							    (_cor13, EncLen3)
						    in  %% Line 7113
							apply 'encode_tags'/3
							    (_cor0, BytesSoFar, LenSoFar)
					( <_cor11> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor11})
					  -| ['compiler_generated'] )
				      end
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_AuthorityKeyIdentifier'/1 =
    %% Line 7116
    fun (_cor0) ->
	%% Line 7117
	apply 'dec_AuthorityKeyIdentifier'/2
	    (_cor0, [16])
'dec_AuthorityKeyIdentifier'/2 =
    %% Line 7119
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 7123
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <Term1,Tlv2> =
		%% Line 7128
		case Tlv1 of
		  %% Line 7129
		  <[{131072,V1}|TempTlv2]> when 'true' ->
		      let <_cor3> =
			  %% Line 7131
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <_cor4> =
			      %% Line 7131
			      call 'erlang':'binary_to_list'
				  (_cor3)
			  in  <_cor4,%% Line 7133
				     TempTlv2>
		  %% Line 7134
		  <_cor19> when 'true' ->
		      %% Line 7135
		      <'asn1_NOVALUE',Tlv1>
		end
	    in  let <Term2,Tlv3> =
		    %% Line 7141
		    case Tlv2 of
		      %% Line 7142
		      <[{131073,V2}|TempTlv3]> when 'true' ->
			  let <_cor8> =
			      %% Line 7143
			      apply 'dec_GeneralNames'/2
				  (V2, [])
			  in  <_cor8,%% Line 7143
				     TempTlv3>
		      %% Line 7144
		      <_cor20> when 'true' ->
			  %% Line 7145
			  <'asn1_NOVALUE',Tlv2>
		    end
		in  let <Term3,Tlv4> =
			%% Line 7151
			case Tlv3 of
			  %% Line 7152
			  <[{131074,V3}|TempTlv4]> when 'true' ->
			      let <_cor12> =
				  %% Line 7153
				  apply 'decode_integer'/2
				      (V3, [])
			      in  <_cor12,%% Line 7153
					  TempTlv4>
			  %% Line 7154
			  <_cor21> when 'true' ->
			      %% Line 7155
			      <'asn1_NOVALUE',Tlv3>
			end
		    in  do  %% Line 7158
			    case Tlv4 of
			      %% Line 7159
			      <[]> when 'true' ->
				  'ok'
			      %% Line 7159
			      <_cor22> when 'true' ->
				  call 'erlang':'exit'
				      ({'error',{'asn1',{'unexpected',Tlv4}}})
			    end
			    %% Line 7161
			    {'AuthorityKeyIdentifier',Term1,Term2,Term3}
'enc_EncryptedData'/1 =
    %% Line 7168
    fun (_cor0) ->
	%% Line 7169
	apply 'enc_EncryptedData'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_EncryptedData'/2 =
    %% Line 7171
    fun (_cor1,_cor0) ->
	%% Line 7172
	case _cor1 of
	  <{_cor9,Cindex1,Cindex2}> when 'true' ->
	      %% Line 7177
	      case apply 'encode_integer'/3
		       (Cindex1, [{'edVer0',0}], [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 7182
		    case apply 'enc_EncryptedContentInfo'/2
			     (Cindex2, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <BytesSoFar> =
			      %% Line 7184
			      [EncBytes1|[EncBytes2|[]]]
			  in  let <LenSoFar> =
				  %% Line 7185
				  call 'erlang':'+'
				      (EncLen1, EncLen2)
			      in  %% Line 7186
				  apply 'encode_tags'/3
				      (_cor0, BytesSoFar, LenSoFar)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_EncryptedData'/1 =
    %% Line 7189
    fun (_cor0) ->
	%% Line 7190
	apply 'dec_EncryptedData'/2
	    (_cor0, [16])
'dec_EncryptedData'/2 =
    %% Line 7192
    fun (_cor1,_cor0) ->
	%% Line 7201
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Val1> =
		  %% Line 7203
		  apply 'decode_integer'/2
		      (V1, [2])
	      in  let <Term1> =
		      %% Line 7204
		      apply 'number2name'/2
			  (Val1, [{'edVer0',0}])
		  in  %% Line 7211
		      case Tlv2 of
			<[V2|Tlv3]> when 'true' ->
			    let <Term2> =
				%% Line 7212
				apply 'dec_EncryptedContentInfo'/2
				    (V2, [16])
			    in  do  %% Line 7214
				    case Tlv3 of
				      %% Line 7215
				      <[]> when 'true' ->
					  'ok'
				      %% Line 7215
				      <_cor11> when 'true' ->
					  call 'erlang':'exit'
					      ({'error',{'asn1',{'unexpected',Tlv3}}})
				    end
				    %% Line 7217
				    {'EncryptedData',Term1,Term2}
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_DigestedData'/1 =
    %% Line 7224
    fun (_cor0) ->
	%% Line 7225
	apply 'enc_DigestedData'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_DigestedData'/2 =
    %% Line 7227
    fun (_cor1,_cor0) ->
	%% Line 7228
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2,Cindex3,Cindex4}> when 'true' ->
	      %% Line 7233
	      case apply 'encode_integer'/3
		       (Cindex1, [{'ddVer0',0}], [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 7238
		    case apply 'enc_DigestAlgorithmIdentifier'/2
			     (Cindex2, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  %% Line 7243
			  case apply 'enc_ContentInfo'/2
				   (Cindex3, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
			    <{EncBytes3,EncLen3}> when 'true' ->
				%% Line 7248
				case apply 'encode_restricted_string'/2
					 (Cindex4, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#]) of
				  <{EncBytes4,EncLen4}> when 'true' ->
				      let <BytesSoFar> =
					  %% Line 7250
					  [EncBytes1|[EncBytes2|[EncBytes3|[EncBytes4|[]]]]]
				      in  let <_cor8> =
					      %% Line 7251
					      call 'erlang':'+'
						  (EncLen1, EncLen2)
					  in  let <_cor9> =
						  %% Line 7251
						  call 'erlang':'+'
						      (_cor8, EncLen3)
					      in  let <LenSoFar> =
						      %% Line 7251
						      call 'erlang':'+'
							  (_cor9, EncLen4)
						  in  %% Line 7252
						      apply 'encode_tags'/3
							  (_cor0, BytesSoFar, LenSoFar)
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor6})
				    -| ['compiler_generated'] )
				end
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_DigestedData'/1 =
    %% Line 7255
    fun (_cor0) ->
	%% Line 7256
	apply 'dec_DigestedData'/2
	    (_cor0, [16])
'dec_DigestedData'/2 =
    %% Line 7258
    fun (_cor1,_cor0) ->
	%% Line 7267
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Val1> =
		  %% Line 7269
		  apply 'decode_integer'/2
		      (V1, [2])
	      in  let <Term1> =
		      %% Line 7270
		      apply 'number2name'/2
			  (Val1, [{'ddVer0',0}])
		  in  %% Line 7277
		      case Tlv2 of
			<[V2|Tlv3]> when 'true' ->
			    let <Term2> =
				%% Line 7278
				apply 'dec_DigestAlgorithmIdentifier'/2
				    (V2, [16])
			    in  %% Line 7283
				case Tlv3 of
				  <[V3|Tlv4]> when 'true' ->
				      let <Term3> =
					  %% Line 7284
					  apply 'dec_ContentInfo'/2
					      (V3, [16])
				      in  %% Line 7289
					  case Tlv4 of
					    <[V4|Tlv5]> when 'true' ->
						let <_cor11> =
						    %% Line 7291
						    apply 'decode_restricted_string'/2
							(V4, [4])
						in  let <Term4> =
							%% Line 7291
							call 'erlang':'binary_to_list'
							    (_cor11)
						    in  do  %% Line 7295
							    case Tlv5 of
							      %% Line 7296
							      <[]> when 'true' ->
								  'ok'
							      %% Line 7296
							      <_cor16> when 'true' ->
								  call 'erlang':'exit'
								      ({'error',{'asn1',{'unexpected',Tlv5}}})
							    end
							    %% Line 7298
							    {'DigestedData',Term1,Term2,Term3,Term4}
					    ( <_cor10> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor10})
					      -| ['compiler_generated'] )
					  end
				  ( <_cor8> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor8})
				    -| ['compiler_generated'] )
				end
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_SignedAndEnvelopedData'/1 =
    %% Line 7305
    fun (_cor0) ->
	%% Line 7306
	apply 'enc_SignedAndEnvelopedData'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_SignedAndEnvelopedData'/2 =
    %% Line 7308
    fun (_cor1,_cor0) ->
	%% Line 7309
	case _cor1 of
	  <{_cor23,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6,Cindex7}> when 'true' ->
	      %% Line 7314
	      case apply 'encode_integer'/3
		       (Cindex1, [{'seVer1',1}|[{'seVer2',2}]], [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 7319
		    case apply 'enc_RecipientInfos'/2
			     (Cindex2, []) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  %% Line 7324
			  case apply 'enc_DigestAlgorithmIdentifiers'/2
				   (Cindex3, []) of
			    <{EncBytes3,EncLen3}> when 'true' ->
				%% Line 7329
				case apply 'enc_EncryptedContentInfo'/2
					 (Cindex4, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
				  <{EncBytes4,EncLen4}> when 'true' ->
				      let <_cor8> =
					  %% Line 7334
					  case Cindex5 of
					    %% Line 7335
					    <'asn1_NOVALUE'> when 'true' ->
						{#{}#,0}
					    %% Line 7336
					    <_cor24> when 'true' ->
						%% Line 7337
						apply 'enc_SignedAndEnvelopedData_certificates'/2
						    (Cindex5, [])
					  end
				      in  %% Line 7334
					  case _cor8 of
					    <{EncBytes5,EncLen5}> when 'true' ->
						let <_cor11> =
						    %% Line 7343
						    case Cindex6 of
						      %% Line 7344
						      <'asn1_NOVALUE'> when 'true' ->
							  {#{}#,0}
						      %% Line 7345
						      <_cor25> when 'true' ->
							  %% Line 7346
							  apply 'enc_SignedAndEnvelopedData_crls'/2
							      (Cindex6, [])
						    end
						in  %% Line 7343
						    case _cor11 of
						      <{EncBytes6,EncLen6}> when 'true' ->
							  %% Line 7352
							  case apply 'enc_SignerInfos'/2
								   (Cindex7, []) of
							    <{EncBytes7,EncLen7}> when 'true' ->
								let <BytesSoFar> =
								    %% Line 7354
								    [EncBytes1|[EncBytes2|[EncBytes3|[EncBytes4|[EncBytes5|[EncBytes6|[EncBytes7|[]]]]]]]]
								in  let <_cor15> =
									%% Line 7355
									call 'erlang':'+'
									    (EncLen1, EncLen2)
								    in  let <_cor16> =
									    %% Line 7355
									    call 'erlang':'+'
										(_cor15, EncLen3)
									in  let <_cor17> =
										%% Line 7355
										call 'erlang':'+'
										    (_cor16, EncLen4)
									    in  let <_cor18> =
										    %% Line 7355
										    call 'erlang':'+'
											(_cor17, EncLen5)
										in  let <_cor19> =
											%% Line 7355
											call 'erlang':'+'
											    (_cor18, EncLen6)
										    in  let <LenSoFar> =
											    %% Line 7355
											    call 'erlang':'+'
												(_cor19, EncLen7)
											in  %% Line 7356
											    apply 'encode_tags'/3
												(_cor0, BytesSoFar, LenSoFar)
							    ( <_cor13> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_cor13})
							      -| ['compiler_generated'] )
							  end
						      ( <_cor12> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor12})
							-| ['compiler_generated'] )
						    end
					    ( <_cor9> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor9})
					      -| ['compiler_generated'] )
					  end
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor6})
				    -| ['compiler_generated'] )
				end
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_SignedAndEnvelopedData_certificates'/2 =
    %% Line 7363
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 7364
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 7365
	      <'certSet'> when 'true' ->
		  let <_cor2> =
		      %% Line 7366
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 7366
		      apply 'enc_ExtendedCertificatesAndCertificates'/2
			  (_cor2, [#{#<160>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 7367
	      <'certSequence'> when 'true' ->
		  let <_cor3> =
		      %% Line 7368
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 7368
		      apply 'enc_Certificates'/2
			  (_cor3, [#{#<162>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 7369
	      <Else> when 'true' ->
		  %% Line 7370
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 7364
	    case _cor5 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 7373
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor6})
		-| ['compiler_generated'] )
	    end
'dec_SignedAndEnvelopedData_certificates'/2 =
    %% Line 7376
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 7377
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 7378
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor10> when 'true' ->
		      Tlv1
		end
	    in  %% Line 7378
		case _cor4 of
		  %% Line 7381
		  <{131072,V1}> when 'true' ->
		      let <_cor5> =
			  %% Line 7382
			  apply 'dec_ExtendedCertificatesAndCertificates'/2
			      (V1, [])
		      in  %% Line 7382
			  {'certSet',_cor5}
		  %% Line 7386
		  <{131074,V1}> when 'true' ->
		      let <_cor6> =
			  %% Line 7387
			  apply 'dec_Certificates'/2
			      (V1, [])
		      in  %% Line 7387
			  {'certSequence',_cor6}
		  %% Line 7389
		  <Else> when 'true' ->
		      %% Line 7390
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'enc_SignedAndEnvelopedData_crls'/2 =
    %% Line 7399
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 7400
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 7401
	      <'crlSet'> when 'true' ->
		  let <_cor2> =
		      %% Line 7402
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 7402
		      apply 'enc_CertificateRevocationLists'/2
			  (_cor2, [#{#<161>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 7403
	      <'crlSequence'> when 'true' ->
		  let <_cor3> =
		      %% Line 7404
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 7404
		      apply 'enc_CRLSequence'/2
			  (_cor3, [#{#<163>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 7405
	      <Else> when 'true' ->
		  %% Line 7406
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 7400
	    case _cor5 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 7409
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor6})
		-| ['compiler_generated'] )
	    end
'dec_SignedAndEnvelopedData_crls'/2 =
    %% Line 7412
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 7413
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 7414
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor10> when 'true' ->
		      Tlv1
		end
	    in  %% Line 7414
		case _cor4 of
		  %% Line 7417
		  <{131073,V1}> when 'true' ->
		      let <_cor5> =
			  %% Line 7418
			  apply 'dec_CertificateRevocationLists'/2
			      (V1, [])
		      in  %% Line 7418
			  {'crlSet',_cor5}
		  %% Line 7422
		  <{131075,V1}> when 'true' ->
		      let <_cor6> =
			  %% Line 7423
			  apply 'dec_CRLSequence'/2
			      (V1, [])
		      in  %% Line 7423
			  {'crlSequence',_cor6}
		  %% Line 7425
		  <Else> when 'true' ->
		      %% Line 7426
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'dec_SignedAndEnvelopedData'/1 =
    %% Line 7431
    fun (_cor0) ->
	%% Line 7432
	apply 'dec_SignedAndEnvelopedData'/2
	    (_cor0, [16])
'dec_SignedAndEnvelopedData'/2 =
    %% Line 7434
    fun (_cor1,_cor0) ->
	%% Line 7443
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Val1> =
		  %% Line 7445
		  apply 'decode_integer'/2
		      (V1, [2])
	      in  let <Term1> =
		      %% Line 7446
		      apply 'number2name'/2
			  (Val1, [{'seVer1',1}|[{'seVer2',2}]])
		  in  %% Line 7453
		      case Tlv2 of
			<[V2|Tlv3]> when 'true' ->
			    let <Term2> =
				%% Line 7454
				apply 'dec_RecipientInfos'/2
				    (V2, [])
			    in  %% Line 7459
				case Tlv3 of
				  <[V3|Tlv4]> when 'true' ->
				      let <Term3> =
					  %% Line 7460
					  apply 'dec_DigestAlgorithmIdentifiers'/2
					      (V3, [])
				      in  %% Line 7465
					  case Tlv4 of
					    <[V4|Tlv5]> when 'true' ->
						let <Term4> =
						    %% Line 7466
						    apply 'dec_EncryptedContentInfo'/2
							(V4, [16])
						in  let <Term5,Tlv6> =
							%% Line 7471
							case Tlv5 of
							  %% Line 7472
							  <[V5 = {131072,_cor27}|TempTlv6]> when 'true' ->
							      let <_cor12> =
								  %% Line 7473
								  apply 'dec_SignedAndEnvelopedData_certificates'/2
								      (V5, [])
							      in  <_cor12,%% Line 7473
									  TempTlv6>
							  %% Line 7474
							  <[V5 = {131074,_cor28}|TempTlv6]> when 'true' ->
							      let <_cor13> =
								  %% Line 7475
								  apply 'dec_SignedAndEnvelopedData_certificates'/2
								      (V5, [])
							      in  <_cor13,%% Line 7475
									  TempTlv6>
							  %% Line 7476
							  <_cor29> when 'true' ->
							      %% Line 7477
							      <'asn1_NOVALUE',Tlv5>
							end
						    in  let <Term6,Tlv7> =
							    %% Line 7483
							    case Tlv6 of
							      %% Line 7484
							      <[V6 = {131073,_cor30}|TempTlv7]> when 'true' ->
								  let <_cor17> =
								      %% Line 7485
								      apply 'dec_SignedAndEnvelopedData_crls'/2
									  (V6, [])
								  in  <_cor17,%% Line 7485
									      TempTlv7>
							      %% Line 7486
							      <[V6 = {131075,_cor31}|TempTlv7]> when 'true' ->
								  let <_cor18> =
								      %% Line 7487
								      apply 'dec_SignedAndEnvelopedData_crls'/2
									  (V6, [])
								  in  <_cor18,%% Line 7487
									      TempTlv7>
							      %% Line 7488
							      <_cor32> when 'true' ->
								  %% Line 7489
								  <'asn1_NOVALUE',Tlv6>
							    end
							in  %% Line 7495
							    case Tlv7 of
							      <[V7|Tlv8]> when 'true' ->
								  let <Term7> =
								      %% Line 7496
								      apply 'dec_SignerInfos'/2
									  (V7, [])
								  in  do  %% Line 7498
									  case Tlv8 of
									    %% Line 7499
									    <[]> when 'true' ->
										'ok'
									    %% Line 7499
									    <_cor33> when 'true' ->
										call 'erlang':'exit'
										    ({'error',{'asn1',{'unexpected',Tlv8}}})
									  end
									  %% Line 7501
									  {'SignedAndEnvelopedData',Term1,Term2,Term3,Term4,Term5,Term6,Term7}
							      ( <_cor22> when 'true' ->
								    primop 'match_fail'
									({'badmatch',_cor22})
								-| ['compiler_generated'] )
							    end
					    ( <_cor10> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor10})
					      -| ['compiler_generated'] )
					  end
				  ( <_cor8> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor8})
				    -| ['compiler_generated'] )
				end
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_EncryptedKey'/1 =
    %% Line 7508
    fun (_cor0) ->
	%% Line 7509
	apply 'enc_EncryptedKey'/2
	    (_cor0, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#])
'enc_EncryptedKey'/2 =
    %% Line 7511
    fun (_cor1,_cor0) ->
	%% Line 7512
	apply 'encode_restricted_string'/2
	    (_cor1, _cor0)
'dec_EncryptedKey'/1 =
    %% Line 7515
    fun (_cor0) ->
	%% Line 7516
	apply 'dec_EncryptedKey'/2
	    (_cor0, [4])
'dec_EncryptedKey'/2 =
    %% Line 7518
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 7520
	    apply 'decode_restricted_string'/2
		(_cor1, _cor0)
	in  %% Line 7520
	    call 'erlang':'binary_to_list'
		(_cor2)
'enc_RecipientInfo'/1 =
    %% Line 7529
    fun (_cor0) ->
	%% Line 7530
	apply 'enc_RecipientInfo'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_RecipientInfo'/2 =
    %% Line 7532
    fun (_cor1,_cor0) ->
	%% Line 7533
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2,Cindex3,Cindex4}> when 'true' ->
	      %% Line 7538
	      case apply 'encode_integer'/3
		       (Cindex1, [{'riVer0',0}], [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 7543
		    case apply 'enc_IssuerAndSerialNumber'/2
			     (Cindex2, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  %% Line 7548
			  case apply 'enc_KeyEncryptionAlgorithmIdentifier'/2
				   (Cindex3, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
			    <{EncBytes3,EncLen3}> when 'true' ->
				%% Line 7553
				case apply 'encode_restricted_string'/2
					 (Cindex4, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#]) of
				  <{EncBytes4,EncLen4}> when 'true' ->
				      let <BytesSoFar> =
					  %% Line 7555
					  [EncBytes1|[EncBytes2|[EncBytes3|[EncBytes4|[]]]]]
				      in  let <_cor8> =
					      %% Line 7556
					      call 'erlang':'+'
						  (EncLen1, EncLen2)
					  in  let <_cor9> =
						  %% Line 7556
						  call 'erlang':'+'
						      (_cor8, EncLen3)
					      in  let <LenSoFar> =
						      %% Line 7556
						      call 'erlang':'+'
							  (_cor9, EncLen4)
						  in  %% Line 7557
						      apply 'encode_tags'/3
							  (_cor0, BytesSoFar, LenSoFar)
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor6})
				    -| ['compiler_generated'] )
				end
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_RecipientInfo'/1 =
    %% Line 7560
    fun (_cor0) ->
	%% Line 7561
	apply 'dec_RecipientInfo'/2
	    (_cor0, [16])
'dec_RecipientInfo'/2 =
    %% Line 7563
    fun (_cor1,_cor0) ->
	%% Line 7572
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Val1> =
		  %% Line 7574
		  apply 'decode_integer'/2
		      (V1, [2])
	      in  let <Term1> =
		      %% Line 7575
		      apply 'number2name'/2
			  (Val1, [{'riVer0',0}])
		  in  %% Line 7582
		      case Tlv2 of
			<[V2|Tlv3]> when 'true' ->
			    let <Term2> =
				%% Line 7583
				apply 'dec_IssuerAndSerialNumber'/2
				    (V2, [16])
			    in  %% Line 7588
				case Tlv3 of
				  <[V3|Tlv4]> when 'true' ->
				      let <Term3> =
					  %% Line 7589
					  apply 'dec_KeyEncryptionAlgorithmIdentifier'/2
					      (V3, [16])
				      in  %% Line 7594
					  case Tlv4 of
					    <[V4|Tlv5]> when 'true' ->
						let <_cor11> =
						    %% Line 7596
						    apply 'decode_restricted_string'/2
							(V4, [4])
						in  let <Term4> =
							%% Line 7596
							call 'erlang':'binary_to_list'
							    (_cor11)
						    in  do  %% Line 7600
							    case Tlv5 of
							      %% Line 7601
							      <[]> when 'true' ->
								  'ok'
							      %% Line 7601
							      <_cor16> when 'true' ->
								  call 'erlang':'exit'
								      ({'error',{'asn1',{'unexpected',Tlv5}}})
							    end
							    %% Line 7603
							    {'RecipientInfo',Term1,Term2,Term3,Term4}
					    ( <_cor10> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor10})
					      -| ['compiler_generated'] )
					  end
				  ( <_cor8> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor8})
				    -| ['compiler_generated'] )
				end
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_EncryptedContent'/1 =
    %% Line 7610
    fun (_cor0) ->
	%% Line 7611
	apply 'enc_EncryptedContent'/2
	    (_cor0, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#])
'enc_EncryptedContent'/2 =
    %% Line 7613
    fun (_cor1,_cor0) ->
	%% Line 7614
	apply 'encode_restricted_string'/2
	    (_cor1, _cor0)
'dec_EncryptedContent'/1 =
    %% Line 7617
    fun (_cor0) ->
	%% Line 7618
	apply 'dec_EncryptedContent'/2
	    (_cor0, [4])
'dec_EncryptedContent'/2 =
    %% Line 7620
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 7622
	    apply 'decode_restricted_string'/2
		(_cor1, _cor0)
	in  %% Line 7622
	    call 'erlang':'binary_to_list'
		(_cor2)
'enc_EncryptedContentInfo'/1 =
    %% Line 7631
    fun (_cor0) ->
	%% Line 7632
	apply 'enc_EncryptedContentInfo'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_EncryptedContentInfo'/2 =
    %% Line 7634
    fun (_cor1,_cor0) ->
	%% Line 7635
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2,Cindex3}> when 'true' ->
	      %% Line 7640
	      case apply 'encode_object_identifier'/2
		       (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 7645
		    case apply 'enc_ContentEncryptionAlgorithmIdentifier'/2
			     (Cindex2, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <_cor6> =
			      %% Line 7650
			      case Cindex3 of
				%% Line 7651
				<'asn1_NOVALUE'> when 'true' ->
				    {#{}#,0}
				%% Line 7652
				<_cor14> when 'true' ->
				    %% Line 7653
				    apply 'encode_restricted_string'/2
					(Cindex3, [#{#<128>(8,1,'integer',['unsigned'|['big']])}#])
			      end
			  in  %% Line 7650
			      case _cor6 of
				<{EncBytes3,EncLen3}> when 'true' ->
				    let <BytesSoFar> =
					%% Line 7656
					[EncBytes1|[EncBytes2|[EncBytes3|[]]]]
				    in  let <_cor9> =
					    %% Line 7657
					    call 'erlang':'+'
						(EncLen1, EncLen2)
					in  let <LenSoFar> =
						%% Line 7657
						call 'erlang':'+'
						    (_cor9, EncLen3)
					    in  %% Line 7658
						apply 'encode_tags'/3
						    (_cor0, BytesSoFar, LenSoFar)
				( <_cor7> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor7})
				  -| ['compiler_generated'] )
			      end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_EncryptedContentInfo'/1 =
    %% Line 7661
    fun (_cor0) ->
	%% Line 7662
	apply 'dec_EncryptedContentInfo'/2
	    (_cor0, [16])
'dec_EncryptedContentInfo'/2 =
    %% Line 7664
    fun (_cor1,_cor0) ->
	%% Line 7673
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 7674
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  %% Line 7679
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 7680
			    apply 'dec_ContentEncryptionAlgorithmIdentifier'/2
				(V2, [16])
			in  let <Term3,Tlv4> =
				%% Line 7685
				case Tlv3 of
				  %% Line 7686
				  <[{131072,V3}|TempTlv4]> when 'true' ->
				      let <_cor7> =
					  %% Line 7688
					  apply 'decode_restricted_string'/2
					      (V3, [])
				      in  let <_cor8> =
					      %% Line 7688
					      call 'erlang':'binary_to_list'
						  (_cor7)
					  in  <_cor8,%% Line 7690
						     TempTlv4>
				  %% Line 7691
				  <_cor15> when 'true' ->
				      %% Line 7692
				      <'asn1_NOVALUE',Tlv3>
				end
			    in  do  %% Line 7695
				    case Tlv4 of
				      %% Line 7696
				      <[]> when 'true' ->
					  'ok'
				      %% Line 7696
				      <_cor16> when 'true' ->
					  call 'erlang':'exit'
					      ({'error',{'asn1',{'unexpected',Tlv4}}})
				    end
				    %% Line 7698
				    {'EncryptedContentInfo',Term1,Term2,Term3}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_RecipientInfos'/1 =
    %% Line 7705
    fun (_cor0) ->
	%% Line 7706
	apply 'enc_RecipientInfos'/2
	    (_cor0, [])
'enc_RecipientInfos'/2 =
    %% Line 7708
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 7709
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 7710
	      <'riSet'> when 'true' ->
		  let <_cor2> =
		      %% Line 7711
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 7711
		      apply 'enc_RecipientInfos_riSet'/2
			  (_cor2, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 7712
	      <'riSequence'> when 'true' ->
		  let <_cor3> =
		      %% Line 7713
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 7713
		      apply 'enc_RecipientInfos_riSequence'/2
			  (_cor3, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 7714
	      <Else> when 'true' ->
		  %% Line 7715
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 7709
	    case _cor5 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 7718
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor6})
		-| ['compiler_generated'] )
	    end
'enc_RecipientInfos_riSet'/2 =
    %% Line 7727
    fun (_cor1,_cor0) ->
	%% Line 7728
	case apply 'enc_RecipientInfos_riSet_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 7729
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_RecipientInfos_riSet_components'/3 =
    %% Line 7731
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 7732
		  apply 'dynamicsort_SETOF'/1
		      (AccBytes)
	      in  %% Line 7732
		  {_cor3,AccLen}
	  %% Line 7734
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 7735
	      case apply 'enc_RecipientInfo'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 7736
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 7736
			apply 'enc_RecipientInfos_riSet_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_RecipientInfos_riSet_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_RecipientInfos_riSet'/2 =
    %% Line 7738
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 7742
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 7743
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_RecipientInfo'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'enc_RecipientInfos_riSequence'/2 =
    %% Line 7752
    fun (_cor1,_cor0) ->
	%% Line 7753
	case apply 'enc_RecipientInfos_riSequence_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 7754
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_RecipientInfos_riSequence_components'/3 =
    %% Line 7756
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 7757
		  call 'lists':'reverse'
		      (AccBytes)
	      in  %% Line 7757
		  {_cor3,AccLen}
	  %% Line 7759
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 7760
	      case apply 'enc_RecipientInfo'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 7761
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 7761
			apply 'enc_RecipientInfos_riSequence_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_RecipientInfos_riSequence_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_RecipientInfos_riSequence'/2 =
    %% Line 7763
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 7767
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 7768
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_RecipientInfo'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'dec_RecipientInfos'/1 =
    %% Line 7773
    fun (_cor0) ->
	%% Line 7774
	apply 'dec_RecipientInfos'/2
	    (_cor0, [])
'dec_RecipientInfos'/2 =
    %% Line 7776
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 7777
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 7778
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor10> when 'true' ->
		      Tlv1
		end
	    in  %% Line 7778
		case _cor4 of
		  %% Line 7781
		  <{17,V1}> when 'true' ->
		      let <_cor5> =
			  %% Line 7782
			  apply 'dec_RecipientInfos_riSet'/2
			      (V1, [])
		      in  %% Line 7782
			  {'riSet',_cor5}
		  %% Line 7786
		  <{16,V1}> when 'true' ->
		      let <_cor6> =
			  %% Line 7787
			  apply 'dec_RecipientInfos_riSequence'/2
			      (V1, [])
		      in  %% Line 7787
			  {'riSequence',_cor6}
		  %% Line 7789
		  <Else> when 'true' ->
		      %% Line 7790
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'enc_EnvelopedData'/1 =
    %% Line 7798
    fun (_cor0) ->
	%% Line 7799
	apply 'enc_EnvelopedData'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_EnvelopedData'/2 =
    %% Line 7801
    fun (_cor1,_cor0) ->
	%% Line 7802
	case _cor1 of
	  <{_cor11,Cindex1,Cindex2,Cindex3}> when 'true' ->
	      %% Line 7807
	      case apply 'encode_integer'/3
		       (Cindex1, [{'edVer0',0}|[{'edVer1',1}]], [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 7812
		    case apply 'enc_RecipientInfos'/2
			     (Cindex2, []) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  %% Line 7817
			  case apply 'enc_EncryptedContentInfo'/2
				   (Cindex3, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
			    <{EncBytes3,EncLen3}> when 'true' ->
				let <BytesSoFar> =
				    %% Line 7819
				    [EncBytes1|[EncBytes2|[EncBytes3|[]]]]
				in  let <_cor7> =
					%% Line 7820
					call 'erlang':'+'
					    (EncLen1, EncLen2)
				    in  let <LenSoFar> =
					    %% Line 7820
					    call 'erlang':'+'
						(_cor7, EncLen3)
					in  %% Line 7821
					    apply 'encode_tags'/3
						(_cor0, BytesSoFar, LenSoFar)
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_EnvelopedData'/1 =
    %% Line 7824
    fun (_cor0) ->
	%% Line 7825
	apply 'dec_EnvelopedData'/2
	    (_cor0, [16])
'dec_EnvelopedData'/2 =
    %% Line 7827
    fun (_cor1,_cor0) ->
	%% Line 7836
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Val1> =
		  %% Line 7838
		  apply 'decode_integer'/2
		      (V1, [2])
	      in  let <Term1> =
		      %% Line 7839
		      apply 'number2name'/2
			  (Val1, [{'edVer0',0}|[{'edVer1',1}]])
		  in  %% Line 7846
		      case Tlv2 of
			<[V2|Tlv3]> when 'true' ->
			    let <Term2> =
				%% Line 7847
				apply 'dec_RecipientInfos'/2
				    (V2, [])
			    in  %% Line 7852
				case Tlv3 of
				  <[V3|Tlv4]> when 'true' ->
				      let <Term3> =
					  %% Line 7853
					  apply 'dec_EncryptedContentInfo'/2
					      (V3, [16])
				      in  do  %% Line 7855
					      case Tlv4 of
						%% Line 7856
						<[]> when 'true' ->
						    'ok'
						%% Line 7856
						<_cor13> when 'true' ->
						    call 'erlang':'exit'
							({'error',{'asn1',{'unexpected',Tlv4}}})
					      end
					      %% Line 7858
					      {'EnvelopedData',Term1,Term2,Term3}
				  ( <_cor8> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor8})
				    -| ['compiler_generated'] )
				end
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_Digest'/1 =
    %% Line 7865
    fun (_cor0) ->
	%% Line 7866
	apply 'enc_Digest'/2
	    (_cor0, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#])
'enc_Digest'/2 =
    %% Line 7868
    fun (_cor1,_cor0) ->
	%% Line 7869
	apply 'encode_restricted_string'/2
	    (_cor1, _cor0)
'dec_Digest'/1 =
    %% Line 7872
    fun (_cor0) ->
	%% Line 7873
	apply 'dec_Digest'/2
	    (_cor0, [4])
'dec_Digest'/2 =
    %% Line 7875
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 7877
	    apply 'decode_restricted_string'/2
		(_cor1, _cor0)
	in  %% Line 7877
	    call 'erlang':'binary_to_list'
		(_cor2)
'enc_DigestInfoPKCS-7'/1 =
    %% Line 7886
    fun (_cor0) ->
	%% Line 7887
	apply 'enc_DigestInfoPKCS-7'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_DigestInfoPKCS-7'/2 =
    %% Line 7889
    fun (_cor1,_cor0) ->
	%% Line 7890
	case _cor1 of
	  <{_cor9,Cindex1,Cindex2}> when 'true' ->
	      %% Line 7895
	      case apply 'enc_DigestAlgorithmIdentifier'/2
		       (Cindex1, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 7900
		    case apply 'encode_restricted_string'/2
			     (Cindex2, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <BytesSoFar> =
			      %% Line 7902
			      [EncBytes1|[EncBytes2|[]]]
			  in  let <LenSoFar> =
				  %% Line 7903
				  call 'erlang':'+'
				      (EncLen1, EncLen2)
			      in  %% Line 7904
				  apply 'encode_tags'/3
				      (_cor0, BytesSoFar, LenSoFar)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_DigestInfoPKCS-7'/1 =
    %% Line 7907
    fun (_cor0) ->
	%% Line 7908
	apply 'dec_DigestInfoPKCS-7'/2
	    (_cor0, [16])
'dec_DigestInfoPKCS-7'/2 =
    %% Line 7910
    fun (_cor1,_cor0) ->
	%% Line 7919
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 7920
		  apply 'dec_DigestAlgorithmIdentifier'/2
		      (V1, [16])
	      in  %% Line 7925
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <_cor6> =
			    %% Line 7927
			    apply 'decode_restricted_string'/2
				(V2, [4])
			in  let <Term2> =
				%% Line 7927
				call 'erlang':'binary_to_list'
				    (_cor6)
			    in  do  %% Line 7931
				    case Tlv3 of
				      %% Line 7932
				      <[]> when 'true' ->
					  'ok'
				      %% Line 7932
				      <_cor11> when 'true' ->
					  call 'erlang':'exit'
					      ({'error',{'asn1',{'unexpected',Tlv3}}})
				    end
				    %% Line 7934
				    {'DigestInfoPKCS-7',Term1,Term2}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_EncryptedDigest'/1 =
    %% Line 7941
    fun (_cor0) ->
	%% Line 7942
	apply 'enc_EncryptedDigest'/2
	    (_cor0, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#])
'enc_EncryptedDigest'/2 =
    %% Line 7944
    fun (_cor1,_cor0) ->
	%% Line 7945
	apply 'encode_restricted_string'/2
	    (_cor1, _cor0)
'dec_EncryptedDigest'/1 =
    %% Line 7948
    fun (_cor0) ->
	%% Line 7949
	apply 'dec_EncryptedDigest'/2
	    (_cor0, [4])
'dec_EncryptedDigest'/2 =
    %% Line 7951
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 7953
	    apply 'decode_restricted_string'/2
		(_cor1, _cor0)
	in  %% Line 7953
	    call 'erlang':'binary_to_list'
		(_cor2)
'enc_SignerInfo'/1 =
    %% Line 7962
    fun (_cor0) ->
	%% Line 7963
	apply 'enc_SignerInfo'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_SignerInfo'/2 =
    %% Line 7965
    fun (_cor1,_cor0) ->
	%% Line 7966
	case _cor1 of
	  <{_cor23,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6,Cindex7}> when 'true' ->
	      %% Line 7971
	      case apply 'encode_integer'/3
		       (Cindex1, [{'siVer1',1}|[{'siVer2',2}]], [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 7976
		    case apply 'enc_IssuerAndSerialNumber'/2
			     (Cindex2, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  %% Line 7981
			  case apply 'enc_DigestAlgorithmIdentifier'/2
				   (Cindex3, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
			    <{EncBytes3,EncLen3}> when 'true' ->
				let <_cor7> =
				    %% Line 7986
				    case Cindex4 of
				      %% Line 7987
				      <'asn1_NOVALUE'> when 'true' ->
					  {#{}#,0}
				      %% Line 7988
				      <_cor24> when 'true' ->
					  %% Line 7989
					  apply 'enc_SignerInfoAuthenticatedAttributes'/2
					      (Cindex4, [])
				    end
				in  %% Line 7986
				    case _cor7 of
				      <{EncBytes4,EncLen4}> when 'true' ->
					  %% Line 7995
					  case apply 'enc_DigestEncryptionAlgorithmIdentifier'/2
						   (Cindex5, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
					    <{EncBytes5,EncLen5}> when 'true' ->
						%% Line 8000
						case apply 'encode_restricted_string'/2
							 (Cindex6, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#]) of
						  <{EncBytes6,EncLen6}> when 'true' ->
						      let <_cor12> =
							  %% Line 8005
							  case Cindex7 of
							    %% Line 8006
							    <'asn1_NOVALUE'> when 'true' ->
								{#{}#,0}
							    %% Line 8007
							    <_cor25> when 'true' ->
								%% Line 8008
								apply 'enc_SignerInfo_unauthenticatedAttributes'/2
								    (Cindex7, [])
							  end
						      in  %% Line 8005
							  case _cor12 of
							    <{EncBytes7,EncLen7}> when 'true' ->
								let <BytesSoFar> =
								    %% Line 8011
								    [EncBytes1|[EncBytes2|[EncBytes3|[EncBytes4|[EncBytes5|[EncBytes6|[EncBytes7|[]]]]]]]]
								in  let <_cor15> =
									%% Line 8012
									call 'erlang':'+'
									    (EncLen1, EncLen2)
								    in  let <_cor16> =
									    %% Line 8012
									    call 'erlang':'+'
										(_cor15, EncLen3)
									in  let <_cor17> =
										%% Line 8012
										call 'erlang':'+'
										    (_cor16, EncLen4)
									    in  let <_cor18> =
										    %% Line 8012
										    call 'erlang':'+'
											(_cor17, EncLen5)
										in  let <_cor19> =
											%% Line 8012
											call 'erlang':'+'
											    (_cor18, EncLen6)
										    in  let <LenSoFar> =
											    %% Line 8012
											    call 'erlang':'+'
												(_cor19, EncLen7)
											in  %% Line 8013
											    apply 'encode_tags'/3
												(_cor0, BytesSoFar, LenSoFar)
							    ( <_cor13> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_cor13})
							      -| ['compiler_generated'] )
							  end
						  ( <_cor10> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor10})
						    -| ['compiler_generated'] )
						end
					    ( <_cor9> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor9})
					      -| ['compiler_generated'] )
					  end
				      ( <_cor8> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor8})
					-| ['compiler_generated'] )
				    end
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_SignerInfo_unauthenticatedAttributes'/2 =
    %% Line 8020
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 8021
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 8022
	      <'uaSet'> when 'true' ->
		  let <_cor2> =
		      %% Line 8023
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 8023
		      apply 'enc_SignerInfo_unauthenticatedAttributes_uaSet'/2
			  (_cor2, [#{#<161>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 8024
	      <'uaSequence'> when 'true' ->
		  let <_cor3> =
		      %% Line 8025
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 8025
		      apply 'enc_SignerInfo_unauthenticatedAttributes_uaSequence'/2
			  (_cor3, [#{#<163>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 8026
	      <Else> when 'true' ->
		  %% Line 8027
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 8021
	    case _cor5 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 8030
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor6})
		-| ['compiler_generated'] )
	    end
'enc_SignerInfo_unauthenticatedAttributes_uaSet'/2 =
    %% Line 8039
    fun (_cor1,_cor0) ->
	%% Line 8040
	case apply 'enc_SignerInfo_unauthenticatedAttributes_uaSet_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 8041
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_SignerInfo_unauthenticatedAttributes_uaSet_components'/3 =
    %% Line 8043
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 8044
		  apply 'dynamicsort_SETOF'/1
		      (AccBytes)
	      in  %% Line 8044
		  {_cor3,AccLen}
	  %% Line 8046
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 8047
	      case apply 'enc_SignerInfo_unauthenticatedAttributes_uaSet_AttributePKCS-7'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 8048
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 8048
			apply 'enc_SignerInfo_unauthenticatedAttributes_uaSet_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_SignerInfo_unauthenticatedAttributes_uaSet_components',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_SignerInfo_unauthenticatedAttributes_uaSet_AttributePKCS-7'/2 =
    %% Line 8056
    fun (_cor1,_cor0) ->
	%% Line 8057
	case _cor1 of
	  <{_cor10,Cindex1,Cindex2}> when 'true' ->
	      let <Objtype> =
		  %% Line 8059
		  call 'OTP-PUB-KEY':'getenc_internal_object_set_argument_7'
		      (Cindex1)
	      in  %% Line 8064
		  case apply 'encode_object_identifier'/2
			   (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		    <{EncBytes1,EncLen1}> when 'true' ->
			%% Line 8069
			case apply 'enc_SignerInfo_unauthenticatedAttributes_uaSet_AttributePKCS-7_values'/3
				 (Cindex2, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#], Objtype) of
			  <{EncBytes2,EncLen2}> when 'true' ->
			      let <BytesSoFar> =
				  %% Line 8071
				  [EncBytes1|[EncBytes2|[]]]
			      in  let <LenSoFar> =
				      %% Line 8072
				      call 'erlang':'+'
					  (EncLen1, EncLen2)
				  in  %% Line 8073
				      apply 'encode_tags'/3
					  (_cor0, BytesSoFar, LenSoFar)
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_SignerInfo_unauthenticatedAttributes_uaSet_AttributePKCS-7_values'/3 =
    %% Line 8080
    fun (_cor2,_cor1,_cor0) ->
	%% Line 8081
	case apply 'enc_SignerInfo_unauthenticatedAttributes_uaSet_AttributePKCS-7_values_components'/4
		 (_cor2, _cor0, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 8082
	      apply 'encode_tags'/3
		  (_cor1, EncBytes, EncLen)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_SignerInfo_unauthenticatedAttributes_uaSet_AttributePKCS-7_values_components'/4 =
    %% Line 8084
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_cor12,AccBytes,AccLen> when 'true' ->
	      let <_cor4> =
		  %% Line 8085
		  apply 'dynamicsort_SETOF'/1
		      (AccBytes)
	      in  %% Line 8085
		  {_cor4,AccLen}
	  %% Line 8087
	  <[H|T],ObjFun,AccBytes,AccLen> when 'true' ->
	      %% Line 8088
	      case apply ObjFun
		       ('Type', H, []) of
		<{TmpBytes,_cor13}> when 'true' ->
		    %% Line 8089
		    case apply 'encode_open_type'/2
			     (TmpBytes, []) of
		      <{EncBytes,EncLen}> when 'true' ->
			  let <_cor7> =
			      %% Line 8091
			      call 'erlang':'+'
				  (AccLen, EncLen)
			  in  %% Line 8091
			      apply 'enc_SignerInfo_unauthenticatedAttributes_uaSet_AttributePKCS-7_values_components'/4
				  (T, ObjFun, [EncBytes|AccBytes], _cor7)
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'enc_SignerInfo_unauthenticatedAttributes_uaSet_AttributePKCS-7_values_components',4}}] )
	    -| ['compiler_generated'] )
	end
'dec_SignerInfo_unauthenticatedAttributes_uaSet_AttributePKCS-7_values'/3 =
    %% Line 8093
    fun (_cor2,_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 8097
	    apply 'match_tags'/2
		(_cor2, _cor1)
	in  %% Line 8098
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor6) ->
			  case _cor6 of
			    <[%% Line 8108
			      V1|_cor5]> when 'true' ->
				let <Tmptlv1> =
				    %% Line 8100
				    apply 'decode_open_type'/2
					(V1, [])
				in  let <_cor8> =
					catch
					    %% Line 8101
					    apply _cor0
						('Type', Tmptlv1, [])
				    in  let <_cor10> =
					    %% Line 8101
					    case _cor8 of
					      %% Line 8102
					      <{'EXIT',Reason1}> when 'true' ->
						  %% Line 8103
						  call 'erlang':'exit'
						      ({'Type not compatible with table constraint',Reason1})
					      %% Line 8104
					      <Tmpterm1> when 'true' ->
						  %% Line 8105
						  Tmpterm1
					    end
					in  let <_cor11> =
						%% Line 8108
						apply 'lc$^0'/1
						    (_cor5)
					    in  ( [_cor10|_cor11]
						  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor6> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor6})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (%% Line 8108
		       Tlv1)
	      -| ['list_comprehension'] )
'dec_SignerInfo_unauthenticatedAttributes_uaSet_AttributePKCS-7'/2 =
    %% Line 8111
    fun (_cor1,_cor0) ->
	%% Line 8120
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 8121
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  let <ObjFun> =
		      %% Line 8122
		      call 'OTP-PUB-KEY':'getdec_internal_object_set_argument_7'
			  (Term1)
		  in  %% Line 8127
		      case Tlv2 of
			<[V2|Tlv3]> when 'true' ->
			    let <Term2> =
				%% Line 8128
				apply 'dec_SignerInfo_unauthenticatedAttributes_uaSet_AttributePKCS-7_values'/3
				    (V2, [17], ObjFun)
			    in  do  %% Line 8130
				    case Tlv3 of
				      %% Line 8131
				      <[]> when 'true' ->
					  'ok'
				      %% Line 8131
				      <_cor11> when 'true' ->
					  call 'erlang':'exit'
					      ({'error',{'asn1',{'unexpected',Tlv3}}})
				    end
				    %% Line 8133
				    {'AttributePKCS-7',Term1,Term2}
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'dec_SignerInfo_unauthenticatedAttributes_uaSet'/2 =
    %% Line 8135
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 8139
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 8140
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_SignerInfo_unauthenticatedAttributes_uaSet_AttributePKCS-7'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'enc_SignerInfo_unauthenticatedAttributes_uaSequence'/2 =
    %% Line 8149
    fun (_cor1,_cor0) ->
	%% Line 8150
	case apply 'enc_SignerInfo_unauthenticatedAttributes_uaSequence_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 8151
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_SignerInfo_unauthenticatedAttributes_uaSequence_components'/3 =
    %% Line 8153
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 8154
		  call 'lists':'reverse'
		      (AccBytes)
	      in  %% Line 8154
		  {_cor3,AccLen}
	  %% Line 8156
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 8157
	      case apply 'enc_SignerInfo_unauthenticatedAttributes_uaSequence_AttributePKCS-7'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 8158
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 8158
			apply 'enc_SignerInfo_unauthenticatedAttributes_uaSequence_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_SignerInfo_unauthenticatedAttributes_uaSequence_components',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_SignerInfo_unauthenticatedAttributes_uaSequence_AttributePKCS-7'/2 =
    %% Line 8166
    fun (_cor1,_cor0) ->
	%% Line 8167
	case _cor1 of
	  <{_cor10,Cindex1,Cindex2}> when 'true' ->
	      let <Objtype> =
		  %% Line 8169
		  call 'OTP-PUB-KEY':'getenc_internal_object_set_argument_8'
		      (Cindex1)
	      in  %% Line 8174
		  case apply 'encode_object_identifier'/2
			   (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		    <{EncBytes1,EncLen1}> when 'true' ->
			%% Line 8179
			case apply 'enc_SignerInfo_unauthenticatedAttributes_uaSequence_AttributePKCS-7_values'/3
				 (Cindex2, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#], Objtype) of
			  <{EncBytes2,EncLen2}> when 'true' ->
			      let <BytesSoFar> =
				  %% Line 8181
				  [EncBytes1|[EncBytes2|[]]]
			      in  let <LenSoFar> =
				      %% Line 8182
				      call 'erlang':'+'
					  (EncLen1, EncLen2)
				  in  %% Line 8183
				      apply 'encode_tags'/3
					  (_cor0, BytesSoFar, LenSoFar)
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_SignerInfo_unauthenticatedAttributes_uaSequence_AttributePKCS-7_values'/3 =
    %% Line 8190
    fun (_cor2,_cor1,_cor0) ->
	%% Line 8191
	case apply 'enc_SignerInfo_unauthenticatedAttributes_uaSequence_AttributePKCS-7_values_components'/4
		 (_cor2, _cor0, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 8192
	      apply 'encode_tags'/3
		  (_cor1, EncBytes, EncLen)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_SignerInfo_unauthenticatedAttributes_uaSequence_AttributePKCS-7_values_components'/4 =
    %% Line 8194
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_cor12,AccBytes,AccLen> when 'true' ->
	      let <_cor4> =
		  %% Line 8195
		  apply 'dynamicsort_SETOF'/1
		      (AccBytes)
	      in  %% Line 8195
		  {_cor4,AccLen}
	  %% Line 8197
	  <[H|T],ObjFun,AccBytes,AccLen> when 'true' ->
	      %% Line 8198
	      case apply ObjFun
		       ('Type', H, []) of
		<{TmpBytes,_cor13}> when 'true' ->
		    %% Line 8199
		    case apply 'encode_open_type'/2
			     (TmpBytes, []) of
		      <{EncBytes,EncLen}> when 'true' ->
			  let <_cor7> =
			      %% Line 8201
			      call 'erlang':'+'
				  (AccLen, EncLen)
			  in  %% Line 8201
			      apply 'enc_SignerInfo_unauthenticatedAttributes_uaSequence_AttributePKCS-7_values_components'/4
				  (T, ObjFun, [EncBytes|AccBytes], _cor7)
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'enc_SignerInfo_unauthenticatedAttributes_uaSequence_AttributePKCS-7_values_components',4}}] )
	    -| ['compiler_generated'] )
	end
'dec_SignerInfo_unauthenticatedAttributes_uaSequence_AttributePKCS-7_values'/3 =
    %% Line 8203
    fun (_cor2,_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 8207
	    apply 'match_tags'/2
		(_cor2, _cor1)
	in  %% Line 8208
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor6) ->
			  case _cor6 of
			    <[%% Line 8218
			      V1|_cor5]> when 'true' ->
				let <Tmptlv1> =
				    %% Line 8210
				    apply 'decode_open_type'/2
					(V1, [])
				in  let <_cor8> =
					catch
					    %% Line 8211
					    apply _cor0
						('Type', Tmptlv1, [])
				    in  let <_cor10> =
					    %% Line 8211
					    case _cor8 of
					      %% Line 8212
					      <{'EXIT',Reason1}> when 'true' ->
						  %% Line 8213
						  call 'erlang':'exit'
						      ({'Type not compatible with table constraint',Reason1})
					      %% Line 8214
					      <Tmpterm1> when 'true' ->
						  %% Line 8215
						  Tmpterm1
					    end
					in  let <_cor11> =
						%% Line 8218
						apply 'lc$^0'/1
						    (_cor5)
					    in  ( [_cor10|_cor11]
						  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor6> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor6})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (%% Line 8218
		       Tlv1)
	      -| ['list_comprehension'] )
'dec_SignerInfo_unauthenticatedAttributes_uaSequence_AttributePKCS-7'/2 =
    %% Line 8221
    fun (_cor1,_cor0) ->
	%% Line 8230
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 8231
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  let <ObjFun> =
		      %% Line 8232
		      call 'OTP-PUB-KEY':'getdec_internal_object_set_argument_8'
			  (Term1)
		  in  %% Line 8237
		      case Tlv2 of
			<[V2|Tlv3]> when 'true' ->
			    let <Term2> =
				%% Line 8238
				apply 'dec_SignerInfo_unauthenticatedAttributes_uaSequence_AttributePKCS-7_values'/3
				    (V2, [17], ObjFun)
			    in  do  %% Line 8240
				    case Tlv3 of
				      %% Line 8241
				      <[]> when 'true' ->
					  'ok'
				      %% Line 8241
				      <_cor11> when 'true' ->
					  call 'erlang':'exit'
					      ({'error',{'asn1',{'unexpected',Tlv3}}})
				    end
				    %% Line 8243
				    {'AttributePKCS-7',Term1,Term2}
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'dec_SignerInfo_unauthenticatedAttributes_uaSequence'/2 =
    %% Line 8245
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 8249
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 8250
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_SignerInfo_unauthenticatedAttributes_uaSequence_AttributePKCS-7'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'dec_SignerInfo_unauthenticatedAttributes'/2 =
    %% Line 8253
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 8254
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 8255
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor10> when 'true' ->
		      Tlv1
		end
	    in  %% Line 8255
		case _cor4 of
		  %% Line 8258
		  <{131073,V1}> when 'true' ->
		      let <_cor5> =
			  %% Line 8259
			  apply 'dec_SignerInfo_unauthenticatedAttributes_uaSet'/2
			      (V1, [])
		      in  %% Line 8259
			  {'uaSet',_cor5}
		  %% Line 8263
		  <{131075,V1}> when 'true' ->
		      let <_cor6> =
			  %% Line 8264
			  apply 'dec_SignerInfo_unauthenticatedAttributes_uaSequence'/2
			      (V1, [])
		      in  %% Line 8264
			  {'uaSequence',_cor6}
		  %% Line 8266
		  <Else> when 'true' ->
		      %% Line 8267
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'dec_SignerInfo'/1 =
    %% Line 8272
    fun (_cor0) ->
	%% Line 8273
	apply 'dec_SignerInfo'/2
	    (_cor0, [16])
'dec_SignerInfo'/2 =
    %% Line 8275
    fun (_cor1,_cor0) ->
	%% Line 8284
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Val1> =
		  %% Line 8286
		  apply 'decode_integer'/2
		      (V1, [2])
	      in  let <Term1> =
		      %% Line 8287
		      apply 'number2name'/2
			  (Val1, [{'siVer1',1}|[{'siVer2',2}]])
		  in  %% Line 8294
		      case Tlv2 of
			<[V2|Tlv3]> when 'true' ->
			    let <Term2> =
				%% Line 8295
				apply 'dec_IssuerAndSerialNumber'/2
				    (V2, [16])
			    in  %% Line 8300
				case Tlv3 of
				  <[V3|Tlv4]> when 'true' ->
				      let <Term3> =
					  %% Line 8301
					  apply 'dec_DigestAlgorithmIdentifier'/2
					      (V3, [16])
				      in  let <Term4,Tlv5> =
					      %% Line 8306
					      case Tlv4 of
						%% Line 8307
						<[V4 = {131072,_cor28}|TempTlv5]> when 'true' ->
						    let <_cor10> =
							%% Line 8308
							apply 'dec_SignerInfoAuthenticatedAttributes'/2
							    (V4, [])
						    in  <_cor10,%% Line 8308
								TempTlv5>
						%% Line 8309
						<[V4 = {131074,_cor29}|TempTlv5]> when 'true' ->
						    let <_cor11> =
							%% Line 8310
							apply 'dec_SignerInfoAuthenticatedAttributes'/2
							    (V4, [])
						    in  <_cor11,%% Line 8310
								TempTlv5>
						%% Line 8311
						<_cor30> when 'true' ->
						    %% Line 8312
						    <'asn1_NOVALUE',Tlv4>
					      end
					  in  %% Line 8318
					      case Tlv5 of
						<[V5|Tlv6]> when 'true' ->
						    let <Term5> =
							%% Line 8319
							apply 'dec_DigestEncryptionAlgorithmIdentifier'/2
							    (V5, [16])
						    in  %% Line 8324
							case Tlv6 of
							  <[V6|Tlv7]> when 'true' ->
							      let <_cor18> =
								  %% Line 8326
								  apply 'decode_restricted_string'/2
								      (V6, [4])
							      in  let <Term6> =
								      %% Line 8326
								      call 'erlang':'binary_to_list'
									  (_cor18)
								  in  let <Term7,Tlv8> =
									  %% Line 8333
									  case Tlv7 of
									    %% Line 8334
									    <[V7 = {131073,_cor31}|TempTlv8]> when 'true' ->
										let <_cor20> =
										    %% Line 8335
										    apply 'dec_SignerInfo_unauthenticatedAttributes'/2
											(V7, [])
										in  <_cor20,%% Line 8335
											    TempTlv8>
									    %% Line 8336
									    <[V7 = {131075,_cor32}|TempTlv8]> when 'true' ->
										let <_cor21> =
										    %% Line 8337
										    apply 'dec_SignerInfo_unauthenticatedAttributes'/2
											(V7, [])
										in  <_cor21,%% Line 8337
											    TempTlv8>
									    %% Line 8338
									    <_cor33> when 'true' ->
										%% Line 8339
										<'asn1_NOVALUE',Tlv7>
									  end
								      in  do  %% Line 8342
									      case Tlv8 of
										%% Line 8343
										<[]> when 'true' ->
										    'ok'
										%% Line 8343
										<_cor34> when 'true' ->
										    call 'erlang':'exit'
											({'error',{'asn1',{'unexpected',Tlv8}}})
									      end
									      %% Line 8345
									      {'SignerInfo',Term1,Term2,Term3,Term4,Term5,Term6,Term7}
							  ( <_cor17> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_cor17})
							    -| ['compiler_generated'] )
							end
						( <_cor15> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor15})
						  -| ['compiler_generated'] )
					      end
				  ( <_cor8> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor8})
				    -| ['compiler_generated'] )
				end
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_DigestAlgorithmIdentifiers'/1 =
    %% Line 8352
    fun (_cor0) ->
	%% Line 8353
	apply 'enc_DigestAlgorithmIdentifiers'/2
	    (_cor0, [])
'enc_DigestAlgorithmIdentifiers'/2 =
    %% Line 8355
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 8356
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 8357
	      <'daSet'> when 'true' ->
		  let <_cor2> =
		      %% Line 8358
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 8358
		      apply 'enc_DigestAlgorithmIdentifiers_daSet'/2
			  (_cor2, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 8359
	      <'daSequence'> when 'true' ->
		  let <_cor3> =
		      %% Line 8360
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 8360
		      apply 'enc_DigestAlgorithmIdentifiers_daSequence'/2
			  (_cor3, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 8361
	      <Else> when 'true' ->
		  %% Line 8362
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 8356
	    case _cor5 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 8365
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor6})
		-| ['compiler_generated'] )
	    end
'enc_DigestAlgorithmIdentifiers_daSet'/2 =
    %% Line 8374
    fun (_cor1,_cor0) ->
	%% Line 8375
	case apply 'enc_DigestAlgorithmIdentifiers_daSet_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 8376
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_DigestAlgorithmIdentifiers_daSet_components'/3 =
    %% Line 8378
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 8379
		  apply 'dynamicsort_SETOF'/1
		      (AccBytes)
	      in  %% Line 8379
		  {_cor3,AccLen}
	  %% Line 8381
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 8382
	      case apply 'enc_DigestAlgorithmIdentifier'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 8383
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 8383
			apply 'enc_DigestAlgorithmIdentifiers_daSet_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_DigestAlgorithmIdentifiers_daSet_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_DigestAlgorithmIdentifiers_daSet'/2 =
    %% Line 8385
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 8389
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 8390
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_DigestAlgorithmIdentifier'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'enc_DigestAlgorithmIdentifiers_daSequence'/2 =
    %% Line 8399
    fun (_cor1,_cor0) ->
	%% Line 8400
	case apply 'enc_DigestAlgorithmIdentifiers_daSequence_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 8401
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_DigestAlgorithmIdentifiers_daSequence_components'/3 =
    %% Line 8403
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 8404
		  call 'lists':'reverse'
		      (AccBytes)
	      in  %% Line 8404
		  {_cor3,AccLen}
	  %% Line 8406
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 8407
	      case apply 'enc_DigestAlgorithmIdentifier'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 8408
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 8408
			apply 'enc_DigestAlgorithmIdentifiers_daSequence_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_DigestAlgorithmIdentifiers_daSequence_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_DigestAlgorithmIdentifiers_daSequence'/2 =
    %% Line 8410
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 8414
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 8415
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_DigestAlgorithmIdentifier'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'dec_DigestAlgorithmIdentifiers'/1 =
    %% Line 8420
    fun (_cor0) ->
	%% Line 8421
	apply 'dec_DigestAlgorithmIdentifiers'/2
	    (_cor0, [])
'dec_DigestAlgorithmIdentifiers'/2 =
    %% Line 8423
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 8424
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 8425
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor10> when 'true' ->
		      Tlv1
		end
	    in  %% Line 8425
		case _cor4 of
		  %% Line 8428
		  <{17,V1}> when 'true' ->
		      let <_cor5> =
			  %% Line 8429
			  apply 'dec_DigestAlgorithmIdentifiers_daSet'/2
			      (V1, [])
		      in  %% Line 8429
			  {'daSet',_cor5}
		  %% Line 8433
		  <{16,V1}> when 'true' ->
		      let <_cor6> =
			  %% Line 8434
			  apply 'dec_DigestAlgorithmIdentifiers_daSequence'/2
			      (V1, [])
		      in  %% Line 8434
			  {'daSequence',_cor6}
		  %% Line 8436
		  <Else> when 'true' ->
		      %% Line 8437
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'enc_SignerInfos'/1 =
    %% Line 8445
    fun (_cor0) ->
	%% Line 8446
	apply 'enc_SignerInfos'/2
	    (_cor0, [])
'enc_SignerInfos'/2 =
    %% Line 8448
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 8449
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 8450
	      <'siSet'> when 'true' ->
		  let <_cor2> =
		      %% Line 8451
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 8451
		      apply 'enc_SignerInfos_siSet'/2
			  (_cor2, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 8452
	      <'siSequence'> when 'true' ->
		  let <_cor3> =
		      %% Line 8453
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 8453
		      apply 'enc_SignerInfos_siSequence'/2
			  (_cor3, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 8454
	      <Else> when 'true' ->
		  %% Line 8455
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 8449
	    case _cor5 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 8458
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor6})
		-| ['compiler_generated'] )
	    end
'enc_SignerInfos_siSet'/2 =
    %% Line 8467
    fun (_cor1,_cor0) ->
	%% Line 8468
	case apply 'enc_SignerInfos_siSet_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 8469
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_SignerInfos_siSet_components'/3 =
    %% Line 8471
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 8472
		  apply 'dynamicsort_SETOF'/1
		      (AccBytes)
	      in  %% Line 8472
		  {_cor3,AccLen}
	  %% Line 8474
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 8475
	      case apply 'enc_SignerInfo'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 8476
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 8476
			apply 'enc_SignerInfos_siSet_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_SignerInfos_siSet_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_SignerInfos_siSet'/2 =
    %% Line 8478
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 8482
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 8483
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_SignerInfo'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'enc_SignerInfos_siSequence'/2 =
    %% Line 8492
    fun (_cor1,_cor0) ->
	%% Line 8493
	case apply 'enc_SignerInfos_siSequence_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 8494
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_SignerInfos_siSequence_components'/3 =
    %% Line 8496
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 8497
		  call 'lists':'reverse'
		      (AccBytes)
	      in  %% Line 8497
		  {_cor3,AccLen}
	  %% Line 8499
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 8500
	      case apply 'enc_SignerInfo'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 8501
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 8501
			apply 'enc_SignerInfos_siSequence_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_SignerInfos_siSequence_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_SignerInfos_siSequence'/2 =
    %% Line 8503
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 8507
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 8508
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_SignerInfo'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'dec_SignerInfos'/1 =
    %% Line 8513
    fun (_cor0) ->
	%% Line 8514
	apply 'dec_SignerInfos'/2
	    (_cor0, [])
'dec_SignerInfos'/2 =
    %% Line 8516
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 8517
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 8518
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor10> when 'true' ->
		      Tlv1
		end
	    in  %% Line 8518
		case _cor4 of
		  %% Line 8521
		  <{17,V1}> when 'true' ->
		      let <_cor5> =
			  %% Line 8522
			  apply 'dec_SignerInfos_siSet'/2
			      (V1, [])
		      in  %% Line 8522
			  {'siSet',_cor5}
		  %% Line 8526
		  <{16,V1}> when 'true' ->
		      let <_cor6> =
			  %% Line 8527
			  apply 'dec_SignerInfos_siSequence'/2
			      (V1, [])
		      in  %% Line 8527
			  {'siSequence',_cor6}
		  %% Line 8529
		  <Else> when 'true' ->
		      %% Line 8530
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'enc_SignedData'/1 =
    %% Line 8538
    fun (_cor0) ->
	%% Line 8539
	apply 'enc_SignedData'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_SignedData'/2 =
    %% Line 8541
    fun (_cor1,_cor0) ->
	%% Line 8542
	case _cor1 of
	  <{_cor21,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6}> when 'true' ->
	      %% Line 8547
	      case apply 'encode_integer'/3
		       (Cindex1, [{'sdVer1',1}|[{'sdVer2',2}]], [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 8552
		    case apply 'enc_DigestAlgorithmIdentifiers'/2
			     (Cindex2, []) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  %% Line 8557
			  case apply 'enc_ContentInfo'/2
				   (Cindex3, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
			    <{EncBytes3,EncLen3}> when 'true' ->
				let <_cor7> =
				    %% Line 8562
				    case Cindex4 of
				      %% Line 8563
				      <'asn1_NOVALUE'> when 'true' ->
					  {#{}#,0}
				      %% Line 8564
				      <_cor22> when 'true' ->
					  %% Line 8565
					  apply 'enc_SignedData_certificates'/2
					      (Cindex4, [])
				    end
				in  %% Line 8562
				    case _cor7 of
				      <{EncBytes4,EncLen4}> when 'true' ->
					  let <_cor10> =
					      %% Line 8571
					      case Cindex5 of
						%% Line 8572
						<'asn1_NOVALUE'> when 'true' ->
						    {#{}#,0}
						%% Line 8573
						<_cor23> when 'true' ->
						    %% Line 8574
						    apply 'enc_SignedData_crls'/2
							(Cindex5, [])
					      end
					  in  %% Line 8571
					      case _cor10 of
						<{EncBytes5,EncLen5}> when 'true' ->
						    %% Line 8580
						    case apply 'enc_SignerInfos'/2
							     (Cindex6, []) of
						      <{EncBytes6,EncLen6}> when 'true' ->
							  let <BytesSoFar> =
							      %% Line 8582
							      [EncBytes1|[EncBytes2|[EncBytes3|[EncBytes4|[EncBytes5|[EncBytes6|[]]]]]]]
							  in  let <_cor14> =
								  %% Line 8583
								  call 'erlang':'+'
								      (EncLen1, EncLen2)
							      in  let <_cor15> =
								      %% Line 8583
								      call 'erlang':'+'
									  (_cor14, EncLen3)
								  in  let <_cor16> =
									  %% Line 8583
									  call 'erlang':'+'
									      (_cor15, EncLen4)
								      in  let <_cor17> =
									      %% Line 8583
									      call 'erlang':'+'
										  (_cor16, EncLen5)
									  in  let <LenSoFar> =
										  %% Line 8583
										  call 'erlang':'+'
										      (_cor17, EncLen6)
									      in  %% Line 8584
										  apply 'encode_tags'/3
										      (_cor0, BytesSoFar, LenSoFar)
						      ( <_cor12> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor12})
							-| ['compiler_generated'] )
						    end
						( <_cor11> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor11})
						  -| ['compiler_generated'] )
					      end
				      ( <_cor8> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor8})
					-| ['compiler_generated'] )
				    end
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_SignedData_certificates'/2 =
    %% Line 8591
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 8592
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 8593
	      <'certSet'> when 'true' ->
		  let <_cor2> =
		      %% Line 8594
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 8594
		      apply 'enc_ExtendedCertificatesAndCertificates'/2
			  (_cor2, [#{#<160>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 8595
	      <'certSequence'> when 'true' ->
		  let <_cor3> =
		      %% Line 8596
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 8596
		      apply 'enc_Certificates'/2
			  (_cor3, [#{#<162>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 8597
	      <Else> when 'true' ->
		  %% Line 8598
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 8592
	    case _cor5 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 8601
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor6})
		-| ['compiler_generated'] )
	    end
'dec_SignedData_certificates'/2 =
    %% Line 8604
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 8605
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 8606
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor10> when 'true' ->
		      Tlv1
		end
	    in  %% Line 8606
		case _cor4 of
		  %% Line 8609
		  <{131072,V1}> when 'true' ->
		      let <_cor5> =
			  %% Line 8610
			  apply 'dec_ExtendedCertificatesAndCertificates'/2
			      (V1, [])
		      in  %% Line 8610
			  {'certSet',_cor5}
		  %% Line 8614
		  <{131074,V1}> when 'true' ->
		      let <_cor6> =
			  %% Line 8615
			  apply 'dec_Certificates'/2
			      (V1, [])
		      in  %% Line 8615
			  {'certSequence',_cor6}
		  %% Line 8617
		  <Else> when 'true' ->
		      %% Line 8618
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'enc_SignedData_crls'/2 =
    %% Line 8627
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 8628
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 8629
	      <'crlSet'> when 'true' ->
		  let <_cor2> =
		      %% Line 8630
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 8630
		      apply 'enc_CertificateRevocationLists'/2
			  (_cor2, [#{#<161>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 8631
	      <'crlSequence'> when 'true' ->
		  let <_cor3> =
		      %% Line 8632
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 8632
		      apply 'enc_CRLSequence'/2
			  (_cor3, [#{#<163>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 8633
	      <Else> when 'true' ->
		  %% Line 8634
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 8628
	    case _cor5 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 8637
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor6})
		-| ['compiler_generated'] )
	    end
'dec_SignedData_crls'/2 =
    %% Line 8640
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 8641
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 8642
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor10> when 'true' ->
		      Tlv1
		end
	    in  %% Line 8642
		case _cor4 of
		  %% Line 8645
		  <{131073,V1}> when 'true' ->
		      let <_cor5> =
			  %% Line 8646
			  apply 'dec_CertificateRevocationLists'/2
			      (V1, [])
		      in  %% Line 8646
			  {'crlSet',_cor5}
		  %% Line 8650
		  <{131075,V1}> when 'true' ->
		      let <_cor6> =
			  %% Line 8651
			  apply 'dec_CRLSequence'/2
			      (V1, [])
		      in  %% Line 8651
			  {'crlSequence',_cor6}
		  %% Line 8653
		  <Else> when 'true' ->
		      %% Line 8654
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'dec_SignedData'/1 =
    %% Line 8659
    fun (_cor0) ->
	%% Line 8660
	apply 'dec_SignedData'/2
	    (_cor0, [16])
'dec_SignedData'/2 =
    %% Line 8662
    fun (_cor1,_cor0) ->
	%% Line 8671
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Val1> =
		  %% Line 8673
		  apply 'decode_integer'/2
		      (V1, [2])
	      in  let <Term1> =
		      %% Line 8674
		      apply 'number2name'/2
			  (Val1, [{'sdVer1',1}|[{'sdVer2',2}]])
		  in  %% Line 8681
		      case Tlv2 of
			<[V2|Tlv3]> when 'true' ->
			    let <Term2> =
				%% Line 8682
				apply 'dec_DigestAlgorithmIdentifiers'/2
				    (V2, [])
			    in  %% Line 8687
				case Tlv3 of
				  <[V3|Tlv4]> when 'true' ->
				      let <Term3> =
					  %% Line 8688
					  apply 'dec_ContentInfo'/2
					      (V3, [16])
				      in  let <Term4,Tlv5> =
					      %% Line 8693
					      case Tlv4 of
						%% Line 8694
						<[V4 = {131072,_cor25}|TempTlv5]> when 'true' ->
						    let <_cor10> =
							%% Line 8695
							apply 'dec_SignedData_certificates'/2
							    (V4, [])
						    in  <_cor10,%% Line 8695
								TempTlv5>
						%% Line 8696
						<[V4 = {131074,_cor26}|TempTlv5]> when 'true' ->
						    let <_cor11> =
							%% Line 8697
							apply 'dec_SignedData_certificates'/2
							    (V4, [])
						    in  <_cor11,%% Line 8697
								TempTlv5>
						%% Line 8698
						<_cor27> when 'true' ->
						    %% Line 8699
						    <'asn1_NOVALUE',Tlv4>
					      end
					  in  let <Term5,Tlv6> =
						  %% Line 8705
						  case Tlv5 of
						    %% Line 8706
						    <[V5 = {131073,_cor28}|TempTlv6]> when 'true' ->
							let <_cor15> =
							    %% Line 8707
							    apply 'dec_SignedData_crls'/2
								(V5, [])
							in  <_cor15,%% Line 8707
								    TempTlv6>
						    %% Line 8708
						    <[V5 = {131075,_cor29}|TempTlv6]> when 'true' ->
							let <_cor16> =
							    %% Line 8709
							    apply 'dec_SignedData_crls'/2
								(V5, [])
							in  <_cor16,%% Line 8709
								    TempTlv6>
						    %% Line 8710
						    <_cor30> when 'true' ->
							%% Line 8711
							<'asn1_NOVALUE',Tlv5>
						  end
					      in  %% Line 8717
						  case Tlv6 of
						    <[V6|Tlv7]> when 'true' ->
							let <Term6> =
							    %% Line 8718
							    apply 'dec_SignerInfos'/2
								(V6, [])
							in  do  %% Line 8720
								case Tlv7 of
								  %% Line 8721
								  <[]> when 'true' ->
								      'ok'
								  %% Line 8721
								  <_cor31> when 'true' ->
								      call 'erlang':'exit'
									  ({'error',{'asn1',{'unexpected',Tlv7}}})
								end
								%% Line 8723
								{'SignedData',Term1,Term2,Term3,Term4,Term5,Term6}
						    ( <_cor20> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor20})
						      -| ['compiler_generated'] )
						  end
				  ( <_cor8> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor8})
				    -| ['compiler_generated'] )
				end
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_Data'/1 =
    %% Line 8730
    fun (_cor0) ->
	%% Line 8731
	apply 'enc_Data'/2
	    (_cor0, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#])
'enc_Data'/2 =
    %% Line 8733
    fun (_cor1,_cor0) ->
	%% Line 8734
	apply 'encode_restricted_string'/2
	    (_cor1, _cor0)
'dec_Data'/1 =
    %% Line 8737
    fun (_cor0) ->
	%% Line 8738
	apply 'dec_Data'/2
	    (_cor0, [4])
'dec_Data'/2 =
    %% Line 8740
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 8742
	    apply 'decode_restricted_string'/2
		(_cor1, _cor0)
	in  %% Line 8742
	    call 'erlang':'binary_to_list'
		(_cor2)
'enc_ContentType'/1 =
    %% Line 8751
    fun (_cor0) ->
	%% Line 8752
	apply 'enc_ContentType'/2
	    (_cor0, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#])
'enc_ContentType'/2 =
    %% Line 8754
    fun (_cor1,_cor0) ->
	%% Line 8755
	apply 'encode_object_identifier'/2
	    (_cor1, _cor0)
'dec_ContentType'/1 =
    %% Line 8758
    fun (_cor0) ->
	%% Line 8759
	apply 'dec_ContentType'/2
	    (_cor0, [6])
'dec_ContentType'/2 =
    %% Line 8761
    fun (_cor1,_cor0) ->
	%% Line 8762
	apply 'decode_object_identifier'/2
	    (_cor1, _cor0)
'enc_ContentInfo'/1 =
    %% Line 8769
    fun (_cor0) ->
	%% Line 8770
	apply 'enc_ContentInfo'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_ContentInfo'/2 =
    %% Line 8772
    fun (_cor1,_cor0) ->
	%% Line 8773
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2}> when 'true' ->
	      let <ObjcontentType> =
		  %% Line 8775
		  call 'OTP-PUB-KEY':'getenc_Contents'
		      (Cindex1)
	      in  %% Line 8780
		  case apply 'encode_object_identifier'/2
			   (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor7> =
			    %% Line 8785
			    case Cindex2 of
			      %% Line 8786
			      <'asn1_NOVALUE'> when 'true' ->
				  {#{}#,0}
			      %% Line 8787
			      <_cor14> when 'true' ->
				  %% Line 8788
				  case apply ObjcontentType
					   ('Type', Cindex2, []) of
				    <{TmpBytes2,_cor15}> when 'true' ->
					%% Line 8789
					apply 'encode_open_type'/2
					    (TmpBytes2, [#{#<160>(8,1,'integer',['unsigned'|['big']])}#])
				    ( <_cor5> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor5})
				      -| ['compiler_generated'] )
				  end
			    end
			in  %% Line 8785
			    case _cor7 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  let <BytesSoFar> =
				      %% Line 8792
				      [EncBytes1|[EncBytes2|[]]]
				  in  let <LenSoFar> =
					  %% Line 8793
					  call 'erlang':'+'
					      (EncLen1, EncLen2)
				      in  %% Line 8794
					  apply 'encode_tags'/3
					      (_cor0, BytesSoFar, LenSoFar)
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_ContentInfo'/1 =
    %% Line 8797
    fun (_cor0) ->
	%% Line 8798
	apply 'dec_ContentInfo'/2
	    (_cor0, [16])
'dec_ContentInfo'/2 =
    %% Line 8800
    fun (_cor1,_cor0) ->
	%% Line 8809
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 8810
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  let <Tmpterm1,Tlv3> =
		      %% Line 8815
		      case Tlv2 of
			%% Line 8816
			<[{131072,V2}|TempTlv3]> when 'true' ->
			    let <_cor5> =
				%% Line 8817
				apply 'decode_open_type'/2
				    (V2, [])
			    in  <_cor5,%% Line 8817
				       TempTlv3>
			%% Line 8818
			<_cor18> when 'true' ->
			    %% Line 8819
			    <'asn1_NOVALUE',Tlv2>
		      end
		  in  let <DecObjcontentTypeTerm1> =
			  %% Line 8823
			  call 'OTP-PUB-KEY':'getdec_Contents'
			      (Term1)
		      in  let <_cor13> =
			      %% Line 8825
			      case Tmpterm1 of
				%% Line 8826
				<'asn1_NOVALUE'> when 'true' ->
				    'asn1_NOVALUE'
				%% Line 8827
				<_cor19> when 'true' ->
				    let <_cor10> =
					catch
					    %% Line 8828
					    apply DecObjcontentTypeTerm1
						('Type', Tmpterm1, [])
				    in  %% Line 8828
					case _cor10 of
					  %% Line 8829
					  <{'EXIT',Reason1}> when 'true' ->
					      %% Line 8830
					      call 'erlang':'exit'
						  ({'Type not compatible with table constraint',Reason1})
					  %% Line 8831
					  <Tmpterm2> when 'true' ->
					      %% Line 8832
					      Tmpterm2
					end
			      end
			  in  do  %% Line 8836
				  case Tlv3 of
				    %% Line 8837
				    <[]> when 'true' ->
					'ok'
				    %% Line 8837
				    <_cor20> when 'true' ->
					call 'erlang':'exit'
					    ({'error',{'asn1',{'unexpected',Tlv3}}})
				  end
				  %% Line 8839
				  {'ContentInfo',Term1,_cor13}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_KeyEncryptionAlgorithmIdentifier'/1 =
    %% Line 8846
    fun (_cor0) ->
	%% Line 8847
	apply 'enc_KeyEncryptionAlgorithmIdentifier'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_KeyEncryptionAlgorithmIdentifier'/2 =
    %% Line 8849
    fun (_cor1,_cor0) ->
	%% Line 8850
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2}> when 'true' ->
	      let <Objalgorithm> =
		  %% Line 8852
		  call 'OTP-PUB-KEY':'getenc_internal_object_set_argument_3'
		      (Cindex1)
	      in  %% Line 8857
		  case apply 'encode_object_identifier'/2
			   (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor7> =
			    %% Line 8862
			    case Cindex2 of
			      %% Line 8863
			      <'asn1_NOVALUE'> when 'true' ->
				  {#{}#,0}
			      %% Line 8864
			      <_cor14> when 'true' ->
				  %% Line 8865
				  case apply Objalgorithm
					   ('Type', Cindex2, []) of
				    <{TmpBytes2,_cor15}> when 'true' ->
					%% Line 8866
					apply 'encode_open_type'/2
					    (TmpBytes2, [])
				    ( <_cor5> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor5})
				      -| ['compiler_generated'] )
				  end
			    end
			in  %% Line 8862
			    case _cor7 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  let <BytesSoFar> =
				      %% Line 8869
				      [EncBytes1|[EncBytes2|[]]]
				  in  let <LenSoFar> =
					  %% Line 8870
					  call 'erlang':'+'
					      (EncLen1, EncLen2)
				      in  %% Line 8871
					  apply 'encode_tags'/3
					      (_cor0, BytesSoFar, LenSoFar)
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_KeyEncryptionAlgorithmIdentifier'/1 =
    %% Line 8874
    fun (_cor0) ->
	%% Line 8875
	apply 'dec_KeyEncryptionAlgorithmIdentifier'/2
	    (_cor0, [16])
'dec_KeyEncryptionAlgorithmIdentifier'/2 =
    %% Line 8877
    fun (_cor1,_cor0) ->
	%% Line 8886
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 8887
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  let <Tmpterm1,Tlv3> =
		      %% Line 8892
		      case Tlv2 of
			%% Line 8893
			<[V2|TempTlv3]> when 'true' ->
			    let <_cor5> =
				%% Line 8894
				apply 'decode_open_type'/2
				    (V2, [])
			    in  <_cor5,%% Line 8894
				       TempTlv3>
			%% Line 8895
			<_cor18> when 'true' ->
			    %% Line 8896
			    <'asn1_NOVALUE',Tlv2>
		      end
		  in  let <DecObjalgorithmTerm1> =
			  %% Line 8900
			  call 'OTP-PUB-KEY':'getdec_internal_object_set_argument_3'
			      (Term1)
		      in  let <_cor13> =
			      %% Line 8902
			      case Tmpterm1 of
				%% Line 8903
				<'asn1_NOVALUE'> when 'true' ->
				    'asn1_NOVALUE'
				%% Line 8904
				<_cor19> when 'true' ->
				    let <_cor10> =
					catch
					    %% Line 8905
					    apply DecObjalgorithmTerm1
						('Type', Tmpterm1, [])
				    in  %% Line 8905
					case _cor10 of
					  %% Line 8906
					  <{'EXIT',Reason1}> when 'true' ->
					      %% Line 8907
					      call 'erlang':'exit'
						  ({'Type not compatible with table constraint',Reason1})
					  %% Line 8908
					  <Tmpterm2> when 'true' ->
					      %% Line 8909
					      Tmpterm2
					end
			      end
			  in  do  %% Line 8913
				  case Tlv3 of
				    %% Line 8914
				    <[]> when 'true' ->
					'ok'
				    %% Line 8914
				    <_cor20> when 'true' ->
					call 'erlang':'exit'
					    ({'error',{'asn1',{'unexpected',Tlv3}}})
				  end
				  %% Line 8916
				  {'KeyEncryptionAlgorithmIdentifier',Term1,_cor13}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_IssuerAndSerialNumber'/1 =
    %% Line 8923
    fun (_cor0) ->
	%% Line 8924
	apply 'enc_IssuerAndSerialNumber'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_IssuerAndSerialNumber'/2 =
    %% Line 8926
    fun (_cor1,_cor0) ->
	%% Line 8927
	case _cor1 of
	  <{_cor9,Cindex1,Cindex2}> when 'true' ->
	      %% Line 8932
	      case apply 'enc_Name'/2
		       (Cindex1, []) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 8937
		    case apply 'encode_integer'/2
			     (Cindex2, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <BytesSoFar> =
			      %% Line 8939
			      [EncBytes1|[EncBytes2|[]]]
			  in  let <LenSoFar> =
				  %% Line 8940
				  call 'erlang':'+'
				      (EncLen1, EncLen2)
			      in  %% Line 8941
				  apply 'encode_tags'/3
				      (_cor0, BytesSoFar, LenSoFar)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_IssuerAndSerialNumber'/1 =
    %% Line 8944
    fun (_cor0) ->
	%% Line 8945
	apply 'dec_IssuerAndSerialNumber'/2
	    (_cor0, [16])
'dec_IssuerAndSerialNumber'/2 =
    %% Line 8947
    fun (_cor1,_cor0) ->
	%% Line 8956
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 8957
		  apply 'dec_Name'/2
		      (V1, [])
	      in  %% Line 8962
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 8963
			    apply 'decode_integer'/2
				(V2, [2])
			in  do  %% Line 8965
				case Tlv3 of
				  %% Line 8966
				  <[]> when 'true' ->
				      'ok'
				  %% Line 8966
				  <_cor10> when 'true' ->
				      call 'erlang':'exit'
					  ({'error',{'asn1',{'unexpected',Tlv3}}})
				end
				%% Line 8968
				{'IssuerAndSerialNumber',Term1,Term2}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_ExtendedCertificatesAndCertificates'/1 =
    %% Line 8975
    fun (_cor0) ->
	%% Line 8976
	apply 'enc_ExtendedCertificatesAndCertificates'/2
	    (_cor0, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
'enc_ExtendedCertificatesAndCertificates'/2 =
    %% Line 8978
    fun (_cor1,_cor0) ->
	%% Line 8979
	case apply 'enc_ExtendedCertificatesAndCertificates_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 8980
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_ExtendedCertificatesAndCertificates_components'/3 =
    %% Line 8982
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 8983
		  apply 'dynamicsort_SETOF'/1
		      (AccBytes)
	      in  %% Line 8983
		  {_cor3,AccLen}
	  %% Line 8985
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 8986
	      case apply 'enc_ExtendedCertificateOrCertificate'/2
		       (H, []) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 8987
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 8987
			apply 'enc_ExtendedCertificatesAndCertificates_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_ExtendedCertificatesAndCertificates_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_ExtendedCertificatesAndCertificates'/1 =
    %% Line 8991
    fun (_cor0) ->
	%% Line 8992
	apply 'dec_ExtendedCertificatesAndCertificates'/2
	    (_cor0, [17])
'dec_ExtendedCertificatesAndCertificates'/2 =
    %% Line 8994
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 8998
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 8999
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_ExtendedCertificateOrCertificate'/2
					(V1, [])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'enc_ExtendedCertificate'/1 =
    %% Line 9007
    fun (_cor0) ->
	%% Line 9008
	apply 'enc_ExtendedCertificate'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_ExtendedCertificate'/2 =
    %% Line 9010
    fun (_cor1,_cor0) ->
	%% Line 9011
	apply 'enc_Certificate'/2
	    (_cor1, _cor0)
'dec_ExtendedCertificate'/1 =
    %% Line 9014
    fun (_cor0) ->
	%% Line 9015
	apply 'dec_ExtendedCertificate'/2
	    (_cor0, [16])
'dec_ExtendedCertificate'/2 =
    %% Line 9017
    fun (_cor1,_cor0) ->
	%% Line 9018
	apply 'dec_Certificate'/2
	    (_cor1, _cor0)
'enc_ExtendedCertificateOrCertificate'/1 =
    %% Line 9025
    fun (_cor0) ->
	%% Line 9026
	apply 'enc_ExtendedCertificateOrCertificate'/2
	    (_cor0, [])
'enc_ExtendedCertificateOrCertificate'/2 =
    %% Line 9028
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 9029
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 9030
	      <'certificate'> when 'true' ->
		  let <_cor2> =
		      %% Line 9031
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 9031
		      apply 'enc_Certificate'/2
			  (_cor2, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 9032
	      <'extendedCertificate'> when 'true' ->
		  let <_cor3> =
		      %% Line 9033
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 9033
		      apply 'enc_ExtendedCertificate'/2
			  (_cor3, [#{#<160>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 9034
	      <Else> when 'true' ->
		  %% Line 9035
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 9029
	    case _cor5 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 9038
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor6})
		-| ['compiler_generated'] )
	    end
'dec_ExtendedCertificateOrCertificate'/1 =
    %% Line 9043
    fun (_cor0) ->
	%% Line 9044
	apply 'dec_ExtendedCertificateOrCertificate'/2
	    (_cor0, [])
'dec_ExtendedCertificateOrCertificate'/2 =
    %% Line 9046
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 9047
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 9048
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor10> when 'true' ->
		      Tlv1
		end
	    in  %% Line 9048
		case _cor4 of
		  %% Line 9051
		  <{16,V1}> when 'true' ->
		      let <_cor5> =
			  %% Line 9052
			  apply 'dec_Certificate'/2
			      (V1, [])
		      in  %% Line 9052
			  {'certificate',_cor5}
		  %% Line 9056
		  <{131072,V1}> when 'true' ->
		      let <_cor6> =
			  %% Line 9057
			  apply 'dec_ExtendedCertificate'/2
			      (V1, [])
		      in  %% Line 9057
			  {'extendedCertificate',_cor6}
		  %% Line 9059
		  <Else> when 'true' ->
		      %% Line 9060
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'enc_DigestEncryptionAlgorithmIdentifier'/1 =
    %% Line 9068
    fun (_cor0) ->
	%% Line 9069
	apply 'enc_DigestEncryptionAlgorithmIdentifier'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_DigestEncryptionAlgorithmIdentifier'/2 =
    %% Line 9071
    fun (_cor1,_cor0) ->
	%% Line 9072
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2}> when 'true' ->
	      let <Objalgorithm> =
		  %% Line 9074
		  call 'OTP-PUB-KEY':'getenc_internal_object_set_argument_6'
		      (Cindex1)
	      in  %% Line 9079
		  case apply 'encode_object_identifier'/2
			   (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor7> =
			    %% Line 9084
			    case Cindex2 of
			      %% Line 9085
			      <'asn1_NOVALUE'> when 'true' ->
				  {#{}#,0}
			      %% Line 9086
			      <_cor14> when 'true' ->
				  %% Line 9087
				  case apply Objalgorithm
					   ('Type', Cindex2, []) of
				    <{TmpBytes2,_cor15}> when 'true' ->
					%% Line 9088
					apply 'encode_open_type'/2
					    (TmpBytes2, [])
				    ( <_cor5> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor5})
				      -| ['compiler_generated'] )
				  end
			    end
			in  %% Line 9084
			    case _cor7 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  let <BytesSoFar> =
				      %% Line 9091
				      [EncBytes1|[EncBytes2|[]]]
				  in  let <LenSoFar> =
					  %% Line 9092
					  call 'erlang':'+'
					      (EncLen1, EncLen2)
				      in  %% Line 9093
					  apply 'encode_tags'/3
					      (_cor0, BytesSoFar, LenSoFar)
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_DigestEncryptionAlgorithmIdentifier'/1 =
    %% Line 9096
    fun (_cor0) ->
	%% Line 9097
	apply 'dec_DigestEncryptionAlgorithmIdentifier'/2
	    (_cor0, [16])
'dec_DigestEncryptionAlgorithmIdentifier'/2 =
    %% Line 9099
    fun (_cor1,_cor0) ->
	%% Line 9108
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 9109
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  let <Tmpterm1,Tlv3> =
		      %% Line 9114
		      case Tlv2 of
			%% Line 9115
			<[V2|TempTlv3]> when 'true' ->
			    let <_cor5> =
				%% Line 9116
				apply 'decode_open_type'/2
				    (V2, [])
			    in  <_cor5,%% Line 9116
				       TempTlv3>
			%% Line 9117
			<_cor18> when 'true' ->
			    %% Line 9118
			    <'asn1_NOVALUE',Tlv2>
		      end
		  in  let <DecObjalgorithmTerm1> =
			  %% Line 9122
			  call 'OTP-PUB-KEY':'getdec_internal_object_set_argument_6'
			      (Term1)
		      in  let <_cor13> =
			      %% Line 9124
			      case Tmpterm1 of
				%% Line 9125
				<'asn1_NOVALUE'> when 'true' ->
				    'asn1_NOVALUE'
				%% Line 9126
				<_cor19> when 'true' ->
				    let <_cor10> =
					catch
					    %% Line 9127
					    apply DecObjalgorithmTerm1
						('Type', Tmpterm1, [])
				    in  %% Line 9127
					case _cor10 of
					  %% Line 9128
					  <{'EXIT',Reason1}> when 'true' ->
					      %% Line 9129
					      call 'erlang':'exit'
						  ({'Type not compatible with table constraint',Reason1})
					  %% Line 9130
					  <Tmpterm2> when 'true' ->
					      %% Line 9131
					      Tmpterm2
					end
			      end
			  in  do  %% Line 9135
				  case Tlv3 of
				    %% Line 9136
				    <[]> when 'true' ->
					'ok'
				    %% Line 9136
				    <_cor20> when 'true' ->
					call 'erlang':'exit'
					    ({'error',{'asn1',{'unexpected',Tlv3}}})
				  end
				  %% Line 9138
				  {'DigestEncryptionAlgorithmIdentifier',Term1,_cor13}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_DigestAlgorithmIdentifier'/1 =
    %% Line 9145
    fun (_cor0) ->
	%% Line 9146
	apply 'enc_DigestAlgorithmIdentifier'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_DigestAlgorithmIdentifier'/2 =
    %% Line 9148
    fun (_cor1,_cor0) ->
	%% Line 9149
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2}> when 'true' ->
	      let <Objalgorithm> =
		  %% Line 9151
		  call 'OTP-PUB-KEY':'getenc_internal_object_set_argument_2'
		      (Cindex1)
	      in  %% Line 9156
		  case apply 'encode_object_identifier'/2
			   (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor7> =
			    %% Line 9161
			    case Cindex2 of
			      %% Line 9162
			      <'asn1_NOVALUE'> when 'true' ->
				  {#{}#,0}
			      %% Line 9163
			      <_cor14> when 'true' ->
				  %% Line 9164
				  case apply Objalgorithm
					   ('Type', Cindex2, []) of
				    <{TmpBytes2,_cor15}> when 'true' ->
					%% Line 9165
					apply 'encode_open_type'/2
					    (TmpBytes2, [])
				    ( <_cor5> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor5})
				      -| ['compiler_generated'] )
				  end
			    end
			in  %% Line 9161
			    case _cor7 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  let <BytesSoFar> =
				      %% Line 9168
				      [EncBytes1|[EncBytes2|[]]]
				  in  let <LenSoFar> =
					  %% Line 9169
					  call 'erlang':'+'
					      (EncLen1, EncLen2)
				      in  %% Line 9170
					  apply 'encode_tags'/3
					      (_cor0, BytesSoFar, LenSoFar)
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_DigestAlgorithmIdentifier'/1 =
    %% Line 9173
    fun (_cor0) ->
	%% Line 9174
	apply 'dec_DigestAlgorithmIdentifier'/2
	    (_cor0, [16])
'dec_DigestAlgorithmIdentifier'/2 =
    %% Line 9176
    fun (_cor1,_cor0) ->
	%% Line 9185
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 9186
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  let <Tmpterm1,Tlv3> =
		      %% Line 9191
		      case Tlv2 of
			%% Line 9192
			<[V2|TempTlv3]> when 'true' ->
			    let <_cor5> =
				%% Line 9193
				apply 'decode_open_type'/2
				    (V2, [])
			    in  <_cor5,%% Line 9193
				       TempTlv3>
			%% Line 9194
			<_cor18> when 'true' ->
			    %% Line 9195
			    <'asn1_NOVALUE',Tlv2>
		      end
		  in  let <DecObjalgorithmTerm1> =
			  %% Line 9199
			  call 'OTP-PUB-KEY':'getdec_internal_object_set_argument_2'
			      (Term1)
		      in  let <_cor13> =
			      %% Line 9201
			      case Tmpterm1 of
				%% Line 9202
				<'asn1_NOVALUE'> when 'true' ->
				    'asn1_NOVALUE'
				%% Line 9203
				<_cor19> when 'true' ->
				    let <_cor10> =
					catch
					    %% Line 9204
					    apply DecObjalgorithmTerm1
						('Type', Tmpterm1, [])
				    in  %% Line 9204
					case _cor10 of
					  %% Line 9205
					  <{'EXIT',Reason1}> when 'true' ->
					      %% Line 9206
					      call 'erlang':'exit'
						  ({'Type not compatible with table constraint',Reason1})
					  %% Line 9207
					  <Tmpterm2> when 'true' ->
					      %% Line 9208
					      Tmpterm2
					end
			      end
			  in  do  %% Line 9212
				  case Tlv3 of
				    %% Line 9213
				    <[]> when 'true' ->
					'ok'
				    %% Line 9213
				    <_cor20> when 'true' ->
					call 'erlang':'exit'
					    ({'error',{'asn1',{'unexpected',Tlv3}}})
				  end
				  %% Line 9215
				  {'DigestAlgorithmIdentifier',Term1,_cor13}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_ContentEncryptionAlgorithmIdentifier'/1 =
    %% Line 9222
    fun (_cor0) ->
	%% Line 9223
	apply 'enc_ContentEncryptionAlgorithmIdentifier'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_ContentEncryptionAlgorithmIdentifier'/2 =
    %% Line 9225
    fun (_cor1,_cor0) ->
	%% Line 9226
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2}> when 'true' ->
	      let <Objalgorithm> =
		  %% Line 9228
		  call 'OTP-PUB-KEY':'getenc_internal_object_set_argument_1'
		      (Cindex1)
	      in  %% Line 9233
		  case apply 'encode_object_identifier'/2
			   (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor7> =
			    %% Line 9238
			    case Cindex2 of
			      %% Line 9239
			      <'asn1_NOVALUE'> when 'true' ->
				  {#{}#,0}
			      %% Line 9240
			      <_cor14> when 'true' ->
				  %% Line 9241
				  case apply Objalgorithm
					   ('Type', Cindex2, []) of
				    <{TmpBytes2,_cor15}> when 'true' ->
					%% Line 9242
					apply 'encode_open_type'/2
					    (TmpBytes2, [])
				    ( <_cor5> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor5})
				      -| ['compiler_generated'] )
				  end
			    end
			in  %% Line 9238
			    case _cor7 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  let <BytesSoFar> =
				      %% Line 9245
				      [EncBytes1|[EncBytes2|[]]]
				  in  let <LenSoFar> =
					  %% Line 9246
					  call 'erlang':'+'
					      (EncLen1, EncLen2)
				      in  %% Line 9247
					  apply 'encode_tags'/3
					      (_cor0, BytesSoFar, LenSoFar)
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_ContentEncryptionAlgorithmIdentifier'/1 =
    %% Line 9250
    fun (_cor0) ->
	%% Line 9251
	apply 'dec_ContentEncryptionAlgorithmIdentifier'/2
	    (_cor0, [16])
'dec_ContentEncryptionAlgorithmIdentifier'/2 =
    %% Line 9253
    fun (_cor1,_cor0) ->
	%% Line 9262
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 9263
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  let <Tmpterm1,Tlv3> =
		      %% Line 9268
		      case Tlv2 of
			%% Line 9269
			<[V2|TempTlv3]> when 'true' ->
			    let <_cor5> =
				%% Line 9270
				apply 'decode_open_type'/2
				    (V2, [])
			    in  <_cor5,%% Line 9270
				       TempTlv3>
			%% Line 9271
			<_cor18> when 'true' ->
			    %% Line 9272
			    <'asn1_NOVALUE',Tlv2>
		      end
		  in  let <DecObjalgorithmTerm1> =
			  %% Line 9276
			  call 'OTP-PUB-KEY':'getdec_internal_object_set_argument_1'
			      (Term1)
		      in  let <_cor13> =
			      %% Line 9278
			      case Tmpterm1 of
				%% Line 9279
				<'asn1_NOVALUE'> when 'true' ->
				    'asn1_NOVALUE'
				%% Line 9280
				<_cor19> when 'true' ->
				    let <_cor10> =
					catch
					    %% Line 9281
					    apply DecObjalgorithmTerm1
						('Type', Tmpterm1, [])
				    in  %% Line 9281
					case _cor10 of
					  %% Line 9282
					  <{'EXIT',Reason1}> when 'true' ->
					      %% Line 9283
					      call 'erlang':'exit'
						  ({'Type not compatible with table constraint',Reason1})
					  %% Line 9284
					  <Tmpterm2> when 'true' ->
					      %% Line 9285
					      Tmpterm2
					end
			      end
			  in  do  %% Line 9289
				  case Tlv3 of
				    %% Line 9290
				    <[]> when 'true' ->
					'ok'
				    %% Line 9290
				    <_cor20> when 'true' ->
					call 'erlang':'exit'
					    ({'error',{'asn1',{'unexpected',Tlv3}}})
				  end
				  %% Line 9292
				  {'ContentEncryptionAlgorithmIdentifier',Term1,_cor13}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_CRLSequence'/1 =
    %% Line 9299
    fun (_cor0) ->
	%% Line 9300
	apply 'enc_CRLSequence'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_CRLSequence'/2 =
    %% Line 9302
    fun (_cor1,_cor0) ->
	%% Line 9303
	case apply 'enc_CRLSequence_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 9304
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_CRLSequence_components'/3 =
    %% Line 9306
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 9307
		  call 'lists':'reverse'
		      (AccBytes)
	      in  %% Line 9307
		  {_cor3,AccLen}
	  %% Line 9309
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 9310
	      case apply 'enc_CertificateList'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 9311
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 9311
			apply 'enc_CRLSequence_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_CRLSequence_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_CRLSequence'/1 =
    %% Line 9315
    fun (_cor0) ->
	%% Line 9316
	apply 'dec_CRLSequence'/2
	    (_cor0, [16])
'dec_CRLSequence'/2 =
    %% Line 9318
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 9322
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 9323
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_CertificateList'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'enc_Certificates'/1 =
    %% Line 9331
    fun (_cor0) ->
	%% Line 9332
	apply 'enc_Certificates'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_Certificates'/2 =
    %% Line 9334
    fun (_cor1,_cor0) ->
	%% Line 9335
	case apply 'enc_Certificates_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 9336
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_Certificates_components'/3 =
    %% Line 9338
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 9339
		  call 'lists':'reverse'
		      (AccBytes)
	      in  %% Line 9339
		  {_cor3,AccLen}
	  %% Line 9341
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 9342
	      case apply 'enc_Certificate'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 9343
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 9343
			apply 'enc_Certificates_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_Certificates_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_Certificates'/1 =
    %% Line 9347
    fun (_cor0) ->
	%% Line 9348
	apply 'dec_Certificates'/2
	    (_cor0, [16])
'dec_Certificates'/2 =
    %% Line 9350
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 9354
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 9355
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_Certificate'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'enc_CertificateRevocationLists'/1 =
    %% Line 9363
    fun (_cor0) ->
	%% Line 9364
	apply 'enc_CertificateRevocationLists'/2
	    (_cor0, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
'enc_CertificateRevocationLists'/2 =
    %% Line 9366
    fun (_cor1,_cor0) ->
	%% Line 9367
	case apply 'enc_CertificateRevocationLists_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 9368
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_CertificateRevocationLists_components'/3 =
    %% Line 9370
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 9371
		  apply 'dynamicsort_SETOF'/1
		      (AccBytes)
	      in  %% Line 9371
		  {_cor3,AccLen}
	  %% Line 9373
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 9374
	      case apply 'enc_CertificateList'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 9375
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 9375
			apply 'enc_CertificateRevocationLists_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_CertificateRevocationLists_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_CertificateRevocationLists'/1 =
    %% Line 9379
    fun (_cor0) ->
	%% Line 9380
	apply 'dec_CertificateRevocationLists'/2
	    (_cor0, [17])
'dec_CertificateRevocationLists'/2 =
    %% Line 9382
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 9386
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 9387
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_CertificateList'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'enc_SignerInfoAuthenticatedAttributes'/1 =
    %% Line 9395
    fun (_cor0) ->
	%% Line 9396
	apply 'enc_SignerInfoAuthenticatedAttributes'/2
	    (_cor0, [])
'enc_SignerInfoAuthenticatedAttributes'/2 =
    %% Line 9398
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 9399
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 9400
	      <'aaSet'> when 'true' ->
		  let <_cor2> =
		      %% Line 9401
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 9401
		      apply 'enc_SignerInfoAuthenticatedAttributes_aaSet'/2
			  (_cor2, [#{#<160>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 9402
	      <'aaSequence'> when 'true' ->
		  let <_cor3> =
		      %% Line 9403
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 9403
		      apply 'enc_SignerInfoAuthenticatedAttributes_aaSequence'/2
			  (_cor3, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#|[#{#<162>(8,1,'integer',['unsigned'|['big']])}#]])
	      %% Line 9404
	      <Else> when 'true' ->
		  %% Line 9405
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 9399
	    case _cor5 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 9408
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor6})
		-| ['compiler_generated'] )
	    end
'enc_SignerInfoAuthenticatedAttributes_aaSet'/2 =
    %% Line 9417
    fun (_cor1,_cor0) ->
	%% Line 9418
	case apply 'enc_SignerInfoAuthenticatedAttributes_aaSet_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 9419
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_SignerInfoAuthenticatedAttributes_aaSet_components'/3 =
    %% Line 9421
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 9422
		  apply 'dynamicsort_SETOF'/1
		      (AccBytes)
	      in  %% Line 9422
		  {_cor3,AccLen}
	  %% Line 9424
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 9425
	      case apply 'enc_SignerInfoAuthenticatedAttributes_aaSet_AttributePKCS-7'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 9426
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 9426
			apply 'enc_SignerInfoAuthenticatedAttributes_aaSet_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_SignerInfoAuthenticatedAttributes_aaSet_components',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_SignerInfoAuthenticatedAttributes_aaSet_AttributePKCS-7'/2 =
    %% Line 9434
    fun (_cor1,_cor0) ->
	%% Line 9435
	case _cor1 of
	  <{_cor10,Cindex1,Cindex2}> when 'true' ->
	      let <Objtype> =
		  %% Line 9437
		  call 'OTP-PUB-KEY':'getenc_internal_object_set_argument_4'
		      (Cindex1)
	      in  %% Line 9442
		  case apply 'encode_object_identifier'/2
			   (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		    <{EncBytes1,EncLen1}> when 'true' ->
			%% Line 9447
			case apply 'enc_SignerInfoAuthenticatedAttributes_aaSet_AttributePKCS-7_values'/3
				 (Cindex2, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#], Objtype) of
			  <{EncBytes2,EncLen2}> when 'true' ->
			      let <BytesSoFar> =
				  %% Line 9449
				  [EncBytes1|[EncBytes2|[]]]
			      in  let <LenSoFar> =
				      %% Line 9450
				      call 'erlang':'+'
					  (EncLen1, EncLen2)
				  in  %% Line 9451
				      apply 'encode_tags'/3
					  (_cor0, BytesSoFar, LenSoFar)
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_SignerInfoAuthenticatedAttributes_aaSet_AttributePKCS-7_values'/3 =
    %% Line 9458
    fun (_cor2,_cor1,_cor0) ->
	%% Line 9459
	case apply 'enc_SignerInfoAuthenticatedAttributes_aaSet_AttributePKCS-7_values_components'/4
		 (_cor2, _cor0, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 9460
	      apply 'encode_tags'/3
		  (_cor1, EncBytes, EncLen)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_SignerInfoAuthenticatedAttributes_aaSet_AttributePKCS-7_values_components'/4 =
    %% Line 9462
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_cor12,AccBytes,AccLen> when 'true' ->
	      let <_cor4> =
		  %% Line 9463
		  apply 'dynamicsort_SETOF'/1
		      (AccBytes)
	      in  %% Line 9463
		  {_cor4,AccLen}
	  %% Line 9465
	  <[H|T],ObjFun,AccBytes,AccLen> when 'true' ->
	      %% Line 9466
	      case apply ObjFun
		       ('Type', H, []) of
		<{TmpBytes,_cor13}> when 'true' ->
		    %% Line 9467
		    case apply 'encode_open_type'/2
			     (TmpBytes, []) of
		      <{EncBytes,EncLen}> when 'true' ->
			  let <_cor7> =
			      %% Line 9469
			      call 'erlang':'+'
				  (AccLen, EncLen)
			  in  %% Line 9469
			      apply 'enc_SignerInfoAuthenticatedAttributes_aaSet_AttributePKCS-7_values_components'/4
				  (T, ObjFun, [EncBytes|AccBytes], _cor7)
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'enc_SignerInfoAuthenticatedAttributes_aaSet_AttributePKCS-7_values_components',4}}] )
	    -| ['compiler_generated'] )
	end
'dec_SignerInfoAuthenticatedAttributes_aaSet_AttributePKCS-7_values'/3 =
    %% Line 9471
    fun (_cor2,_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 9475
	    apply 'match_tags'/2
		(_cor2, _cor1)
	in  %% Line 9476
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor6) ->
			  case _cor6 of
			    <[%% Line 9486
			      V1|_cor5]> when 'true' ->
				let <Tmptlv1> =
				    %% Line 9478
				    apply 'decode_open_type'/2
					(V1, [])
				in  let <_cor8> =
					catch
					    %% Line 9479
					    apply _cor0
						('Type', Tmptlv1, [])
				    in  let <_cor10> =
					    %% Line 9479
					    case _cor8 of
					      %% Line 9480
					      <{'EXIT',Reason1}> when 'true' ->
						  %% Line 9481
						  call 'erlang':'exit'
						      ({'Type not compatible with table constraint',Reason1})
					      %% Line 9482
					      <Tmpterm1> when 'true' ->
						  %% Line 9483
						  Tmpterm1
					    end
					in  let <_cor11> =
						%% Line 9486
						apply 'lc$^0'/1
						    (_cor5)
					    in  ( [_cor10|_cor11]
						  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor6> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor6})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (%% Line 9486
		       Tlv1)
	      -| ['list_comprehension'] )
'dec_SignerInfoAuthenticatedAttributes_aaSet_AttributePKCS-7'/2 =
    %% Line 9489
    fun (_cor1,_cor0) ->
	%% Line 9498
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 9499
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  let <ObjFun> =
		      %% Line 9500
		      call 'OTP-PUB-KEY':'getdec_internal_object_set_argument_4'
			  (Term1)
		  in  %% Line 9505
		      case Tlv2 of
			<[V2|Tlv3]> when 'true' ->
			    let <Term2> =
				%% Line 9506
				apply 'dec_SignerInfoAuthenticatedAttributes_aaSet_AttributePKCS-7_values'/3
				    (V2, [17], ObjFun)
			    in  do  %% Line 9508
				    case Tlv3 of
				      %% Line 9509
				      <[]> when 'true' ->
					  'ok'
				      %% Line 9509
				      <_cor11> when 'true' ->
					  call 'erlang':'exit'
					      ({'error',{'asn1',{'unexpected',Tlv3}}})
				    end
				    %% Line 9511
				    {'AttributePKCS-7',Term1,Term2}
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'dec_SignerInfoAuthenticatedAttributes_aaSet'/2 =
    %% Line 9513
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 9517
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 9518
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_SignerInfoAuthenticatedAttributes_aaSet_AttributePKCS-7'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'enc_SignerInfoAuthenticatedAttributes_aaSequence'/2 =
    %% Line 9527
    fun (_cor1,_cor0) ->
	%% Line 9528
	case apply 'enc_SignerInfoAuthenticatedAttributes_aaSequence_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 9529
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_SignerInfoAuthenticatedAttributes_aaSequence_components'/3 =
    %% Line 9531
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 9532
		  call 'lists':'reverse'
		      (AccBytes)
	      in  %% Line 9532
		  {_cor3,AccLen}
	  %% Line 9534
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 9535
	      case apply 'enc_SignerInfoAuthenticatedAttributes_aaSequence_AttributePKCS-7'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 9536
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 9536
			apply 'enc_SignerInfoAuthenticatedAttributes_aaSequence_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_SignerInfoAuthenticatedAttributes_aaSequence_components',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_SignerInfoAuthenticatedAttributes_aaSequence_AttributePKCS-7'/2 =
    %% Line 9544
    fun (_cor1,_cor0) ->
	%% Line 9545
	case _cor1 of
	  <{_cor10,Cindex1,Cindex2}> when 'true' ->
	      let <Objtype> =
		  %% Line 9547
		  call 'OTP-PUB-KEY':'getenc_internal_object_set_argument_5'
		      (Cindex1)
	      in  %% Line 9552
		  case apply 'encode_object_identifier'/2
			   (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		    <{EncBytes1,EncLen1}> when 'true' ->
			%% Line 9557
			case apply 'enc_SignerInfoAuthenticatedAttributes_aaSequence_AttributePKCS-7_values'/3
				 (Cindex2, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#], Objtype) of
			  <{EncBytes2,EncLen2}> when 'true' ->
			      let <BytesSoFar> =
				  %% Line 9559
				  [EncBytes1|[EncBytes2|[]]]
			      in  let <LenSoFar> =
				      %% Line 9560
				      call 'erlang':'+'
					  (EncLen1, EncLen2)
				  in  %% Line 9561
				      apply 'encode_tags'/3
					  (_cor0, BytesSoFar, LenSoFar)
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_SignerInfoAuthenticatedAttributes_aaSequence_AttributePKCS-7_values'/3 =
    %% Line 9568
    fun (_cor2,_cor1,_cor0) ->
	%% Line 9569
	case apply 'enc_SignerInfoAuthenticatedAttributes_aaSequence_AttributePKCS-7_values_components'/4
		 (_cor2, _cor0, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 9570
	      apply 'encode_tags'/3
		  (_cor1, EncBytes, EncLen)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_SignerInfoAuthenticatedAttributes_aaSequence_AttributePKCS-7_values_components'/4 =
    %% Line 9572
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_cor12,AccBytes,AccLen> when 'true' ->
	      let <_cor4> =
		  %% Line 9573
		  apply 'dynamicsort_SETOF'/1
		      (AccBytes)
	      in  %% Line 9573
		  {_cor4,AccLen}
	  %% Line 9575
	  <[H|T],ObjFun,AccBytes,AccLen> when 'true' ->
	      %% Line 9576
	      case apply ObjFun
		       ('Type', H, []) of
		<{TmpBytes,_cor13}> when 'true' ->
		    %% Line 9577
		    case apply 'encode_open_type'/2
			     (TmpBytes, []) of
		      <{EncBytes,EncLen}> when 'true' ->
			  let <_cor7> =
			      %% Line 9579
			      call 'erlang':'+'
				  (AccLen, EncLen)
			  in  %% Line 9579
			      apply 'enc_SignerInfoAuthenticatedAttributes_aaSequence_AttributePKCS-7_values_components'/4
				  (T, ObjFun, [EncBytes|AccBytes], _cor7)
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'enc_SignerInfoAuthenticatedAttributes_aaSequence_AttributePKCS-7_values_components',4}}] )
	    -| ['compiler_generated'] )
	end
'dec_SignerInfoAuthenticatedAttributes_aaSequence_AttributePKCS-7_values'/3 =
    %% Line 9581
    fun (_cor2,_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 9585
	    apply 'match_tags'/2
		(_cor2, _cor1)
	in  %% Line 9586
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor6) ->
			  case _cor6 of
			    <[%% Line 9596
			      V1|_cor5]> when 'true' ->
				let <Tmptlv1> =
				    %% Line 9588
				    apply 'decode_open_type'/2
					(V1, [])
				in  let <_cor8> =
					catch
					    %% Line 9589
					    apply _cor0
						('Type', Tmptlv1, [])
				    in  let <_cor10> =
					    %% Line 9589
					    case _cor8 of
					      %% Line 9590
					      <{'EXIT',Reason1}> when 'true' ->
						  %% Line 9591
						  call 'erlang':'exit'
						      ({'Type not compatible with table constraint',Reason1})
					      %% Line 9592
					      <Tmpterm1> when 'true' ->
						  %% Line 9593
						  Tmpterm1
					    end
					in  let <_cor11> =
						%% Line 9596
						apply 'lc$^0'/1
						    (_cor5)
					    in  ( [_cor10|_cor11]
						  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor6> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor6})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (%% Line 9596
		       Tlv1)
	      -| ['list_comprehension'] )
'dec_SignerInfoAuthenticatedAttributes_aaSequence_AttributePKCS-7'/2 =
    %% Line 9599
    fun (_cor1,_cor0) ->
	%% Line 9608
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 9609
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  let <ObjFun> =
		      %% Line 9610
		      call 'OTP-PUB-KEY':'getdec_internal_object_set_argument_5'
			  (Term1)
		  in  %% Line 9615
		      case Tlv2 of
			<[V2|Tlv3]> when 'true' ->
			    let <Term2> =
				%% Line 9616
				apply 'dec_SignerInfoAuthenticatedAttributes_aaSequence_AttributePKCS-7_values'/3
				    (V2, [17], ObjFun)
			    in  do  %% Line 9618
				    case Tlv3 of
				      %% Line 9619
				      <[]> when 'true' ->
					  'ok'
				      %% Line 9619
				      <_cor11> when 'true' ->
					  call 'erlang':'exit'
					      ({'error',{'asn1',{'unexpected',Tlv3}}})
				    end
				    %% Line 9621
				    {'AttributePKCS-7',Term1,Term2}
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'dec_SignerInfoAuthenticatedAttributes_aaSequence'/2 =
    %% Line 9623
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 9627
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 9628
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_SignerInfoAuthenticatedAttributes_aaSequence_AttributePKCS-7'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'dec_SignerInfoAuthenticatedAttributes'/1 =
    %% Line 9633
    fun (_cor0) ->
	%% Line 9634
	apply 'dec_SignerInfoAuthenticatedAttributes'/2
	    (_cor0, [])
'dec_SignerInfoAuthenticatedAttributes'/2 =
    %% Line 9636
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 9637
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 9638
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor10> when 'true' ->
		      Tlv1
		end
	    in  %% Line 9638
		case _cor4 of
		  %% Line 9641
		  <{131072,V1}> when 'true' ->
		      let <_cor5> =
			  %% Line 9642
			  apply 'dec_SignerInfoAuthenticatedAttributes_aaSet'/2
			      (V1, [])
		      in  %% Line 9642
			  {'aaSet',_cor5}
		  %% Line 9646
		  <{131074,V1}> when 'true' ->
		      let <_cor6> =
			  %% Line 9647
			  apply 'dec_SignerInfoAuthenticatedAttributes_aaSequence'/2
			      (V1, [16])
		      in  %% Line 9647
			  {'aaSequence',_cor6}
		  %% Line 9649
		  <Else> when 'true' ->
		      %% Line 9650
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'enc_SigningTime'/1 =
    %% Line 9658
    fun (_cor0) ->
	%% Line 9659
	apply 'enc_SigningTime'/2
	    (_cor0, [])
'enc_SigningTime'/2 =
    %% Line 9661
    fun (_cor1,_cor0) ->
	%% Line 9662
	apply 'enc_Time'/2
	    (_cor1, _cor0)
'dec_SigningTime'/1 =
    %% Line 9665
    fun (_cor0) ->
	%% Line 9666
	apply 'dec_SigningTime'/2
	    (_cor0, [])
'dec_SigningTime'/2 =
    %% Line 9668
    fun (_cor1,_cor0) ->
	%% Line 9669
	apply 'dec_Time'/2
	    (_cor1, _cor0)
'enc_MessageDigest'/1 =
    %% Line 9676
    fun (_cor0) ->
	%% Line 9677
	apply 'enc_MessageDigest'/2
	    (_cor0, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#])
'enc_MessageDigest'/2 =
    %% Line 9679
    fun (_cor1,_cor0) ->
	%% Line 9680
	apply 'encode_restricted_string'/2
	    (_cor1, _cor0)
'dec_MessageDigest'/1 =
    %% Line 9683
    fun (_cor0) ->
	%% Line 9684
	apply 'dec_MessageDigest'/2
	    (_cor0, [4])
'dec_MessageDigest'/2 =
    %% Line 9686
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 9688
	    apply 'decode_restricted_string'/2
		(_cor1, _cor0)
	in  %% Line 9688
	    call 'erlang':'binary_to_list'
		(_cor2)
'enc_CertificationRequest'/1 =
    %% Line 9697
    fun (_cor0) ->
	%% Line 9698
	apply 'enc_CertificationRequest'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_CertificationRequest'/2 =
    %% Line 9700
    fun (_cor1,_cor0) ->
	%% Line 9701
	case _cor1 of
	  <{_cor11,Cindex1,Cindex2,Cindex3}> when 'true' ->
	      %% Line 9706
	      case apply 'enc_CertificationRequestInfo'/2
		       (Cindex1, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 9711
		    case apply 'enc_CertificationRequest_signatureAlgorithm'/2
			     (Cindex2, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  %% Line 9716
			  case apply 'encode_bit_string'/4
				   ([], Cindex3, [], [#{#<3>(8,1,'integer',['unsigned'|['big']])}#]) of
			    <{EncBytes3,EncLen3}> when 'true' ->
				let <BytesSoFar> =
				    %% Line 9718
				    [EncBytes1|[EncBytes2|[EncBytes3|[]]]]
				in  let <_cor7> =
					%% Line 9719
					call 'erlang':'+'
					    (EncLen1, EncLen2)
				    in  let <LenSoFar> =
					    %% Line 9719
					    call 'erlang':'+'
						(_cor7, EncLen3)
					in  %% Line 9720
					    apply 'encode_tags'/3
						(_cor0, BytesSoFar, LenSoFar)
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_CertificationRequest_signatureAlgorithm'/2 =
    %% Line 9727
    fun (_cor1,_cor0) ->
	%% Line 9728
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2}> when 'true' ->
	      let <Objalgorithm> =
		  %% Line 9730
		  call 'OTP-PUB-KEY':'getenc_internal_object_set_argument_11'
		      (Cindex1)
	      in  %% Line 9735
		  case apply 'encode_object_identifier'/2
			   (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor7> =
			    %% Line 9740
			    case Cindex2 of
			      %% Line 9741
			      <'asn1_NOVALUE'> when 'true' ->
				  {#{}#,0}
			      %% Line 9742
			      <_cor14> when 'true' ->
				  %% Line 9743
				  case apply Objalgorithm
					   ('Type', Cindex2, []) of
				    <{TmpBytes2,_cor15}> when 'true' ->
					%% Line 9744
					apply 'encode_open_type'/2
					    (TmpBytes2, [])
				    ( <_cor5> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor5})
				      -| ['compiler_generated'] )
				  end
			    end
			in  %% Line 9740
			    case _cor7 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  let <BytesSoFar> =
				      %% Line 9747
				      [EncBytes1|[EncBytes2|[]]]
				  in  let <LenSoFar> =
					  %% Line 9748
					  call 'erlang':'+'
					      (EncLen1, EncLen2)
				      in  %% Line 9749
					  apply 'encode_tags'/3
					      (_cor0, BytesSoFar, LenSoFar)
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_CertificationRequest_signatureAlgorithm'/2 =
    %% Line 9750
    fun (_cor1,_cor0) ->
	%% Line 9759
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 9760
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  let <Tmpterm1,Tlv3> =
		      %% Line 9765
		      case Tlv2 of
			%% Line 9766
			<[V2|TempTlv3]> when 'true' ->
			    let <_cor5> =
				%% Line 9767
				apply 'decode_open_type'/2
				    (V2, [])
			    in  <_cor5,%% Line 9767
				       TempTlv3>
			%% Line 9768
			<_cor18> when 'true' ->
			    %% Line 9769
			    <'asn1_NOVALUE',Tlv2>
		      end
		  in  let <DecObjalgorithmTerm1> =
			  %% Line 9773
			  call 'OTP-PUB-KEY':'getdec_internal_object_set_argument_11'
			      (Term1)
		      in  let <_cor13> =
			      %% Line 9775
			      case Tmpterm1 of
				%% Line 9776
				<'asn1_NOVALUE'> when 'true' ->
				    'asn1_NOVALUE'
				%% Line 9777
				<_cor19> when 'true' ->
				    let <_cor10> =
					catch
					    %% Line 9778
					    apply DecObjalgorithmTerm1
						('Type', Tmpterm1, [])
				    in  %% Line 9778
					case _cor10 of
					  %% Line 9779
					  <{'EXIT',Reason1}> when 'true' ->
					      %% Line 9780
					      call 'erlang':'exit'
						  ({'Type not compatible with table constraint',Reason1})
					  %% Line 9781
					  <Tmpterm2> when 'true' ->
					      %% Line 9782
					      Tmpterm2
					end
			      end
			  in  do  %% Line 9786
				  case Tlv3 of
				    %% Line 9787
				    <[]> when 'true' ->
					'ok'
				    %% Line 9787
				    <_cor20> when 'true' ->
					call 'erlang':'exit'
					    ({'error',{'asn1',{'unexpected',Tlv3}}})
				  end
				  %% Line 9789
				  {'CertificationRequest_signatureAlgorithm',Term1,_cor13}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'dec_CertificationRequest'/1 =
    %% Line 9793
    fun (_cor0) ->
	%% Line 9794
	apply 'dec_CertificationRequest'/2
	    (_cor0, [16])
'dec_CertificationRequest'/2 =
    %% Line 9796
    fun (_cor1,_cor0) ->
	%% Line 9805
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 9806
		  apply 'dec_CertificationRequestInfo'/2
		      (V1, [16])
	      in  %% Line 9811
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 9812
			    apply 'dec_CertificationRequest_signatureAlgorithm'/2
				(V2, [16])
			in  %% Line 9817
			    case Tlv3 of
			      <[V3|Tlv4]> when 'true' ->
				  let <Term3> =
				      %% Line 9818
				      apply 'decode_compact_bit_string'/2
					  (V3, [3])
				  in  do  %% Line 9820
					  case Tlv4 of
					    %% Line 9821
					    <[]> when 'true' ->
						'ok'
					    %% Line 9821
					    <_cor12> when 'true' ->
						call 'erlang':'exit'
						    ({'error',{'asn1',{'unexpected',Tlv4}}})
					  end
					  %% Line 9823
					  {'CertificationRequest',Term1,Term2,Term3}
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_CertificationRequestInfo'/1 =
    %% Line 9830
    fun (_cor0) ->
	%% Line 9831
	apply 'enc_CertificationRequestInfo'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_CertificationRequestInfo'/2 =
    %% Line 9833
    fun (_cor1,_cor0) ->
	%% Line 9834
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2,Cindex3,Cindex4}> when 'true' ->
	      %% Line 9839
	      case apply 'encode_integer'/3
		       (Cindex1, [{'v1',0}], [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 9844
		    case apply 'enc_Name'/2
			     (Cindex2, []) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  %% Line 9849
			  case apply 'enc_CertificationRequestInfo_subjectPKInfo'/2
				   (Cindex3, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
			    <{EncBytes3,EncLen3}> when 'true' ->
				%% Line 9854
				case apply 'enc_CertificationRequestInfo_attributes'/2
					 (Cindex4, [#{#<160>(8,1,'integer',['unsigned'|['big']])}#]) of
				  <{EncBytes4,EncLen4}> when 'true' ->
				      let <BytesSoFar> =
					  %% Line 9856
					  [EncBytes1|[EncBytes2|[EncBytes3|[EncBytes4|[]]]]]
				      in  let <_cor8> =
					      %% Line 9857
					      call 'erlang':'+'
						  (EncLen1, EncLen2)
					  in  let <_cor9> =
						  %% Line 9857
						  call 'erlang':'+'
						      (_cor8, EncLen3)
					      in  let <LenSoFar> =
						      %% Line 9857
						      call 'erlang':'+'
							  (_cor9, EncLen4)
						  in  %% Line 9858
						      apply 'encode_tags'/3
							  (_cor0, BytesSoFar, LenSoFar)
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor6})
				    -| ['compiler_generated'] )
				end
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_CertificationRequestInfo_subjectPKInfo'/2 =
    %% Line 9865
    fun (_cor1,_cor0) ->
	%% Line 9866
	case _cor1 of
	  <{_cor9,Cindex1,Cindex2}> when 'true' ->
	      %% Line 9871
	      case apply 'enc_CertificationRequestInfo_subjectPKInfo_algorithm'/2
		       (Cindex1, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 9876
		    case apply 'encode_bit_string'/4
			     ([], Cindex2, [], [#{#<3>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <BytesSoFar> =
			      %% Line 9878
			      [EncBytes1|[EncBytes2|[]]]
			  in  let <LenSoFar> =
				  %% Line 9879
				  call 'erlang':'+'
				      (EncLen1, EncLen2)
			      in  %% Line 9880
				  apply 'encode_tags'/3
				      (_cor0, BytesSoFar, LenSoFar)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_CertificationRequestInfo_subjectPKInfo_algorithm'/2 =
    %% Line 9887
    fun (_cor1,_cor0) ->
	%% Line 9888
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2}> when 'true' ->
	      let <Objalgorithm> =
		  %% Line 9890
		  call 'OTP-PUB-KEY':'getenc_internal_object_set_argument_9'
		      (Cindex1)
	      in  %% Line 9895
		  case apply 'encode_object_identifier'/2
			   (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor7> =
			    %% Line 9900
			    case Cindex2 of
			      %% Line 9901
			      <'asn1_NOVALUE'> when 'true' ->
				  {#{}#,0}
			      %% Line 9902
			      <_cor14> when 'true' ->
				  %% Line 9903
				  case apply Objalgorithm
					   ('Type', Cindex2, []) of
				    <{TmpBytes2,_cor15}> when 'true' ->
					%% Line 9904
					apply 'encode_open_type'/2
					    (TmpBytes2, [])
				    ( <_cor5> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor5})
				      -| ['compiler_generated'] )
				  end
			    end
			in  %% Line 9900
			    case _cor7 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  let <BytesSoFar> =
				      %% Line 9907
				      [EncBytes1|[EncBytes2|[]]]
				  in  let <LenSoFar> =
					  %% Line 9908
					  call 'erlang':'+'
					      (EncLen1, EncLen2)
				      in  %% Line 9909
					  apply 'encode_tags'/3
					      (_cor0, BytesSoFar, LenSoFar)
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_CertificationRequestInfo_subjectPKInfo_algorithm'/2 =
    %% Line 9910
    fun (_cor1,_cor0) ->
	%% Line 9919
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 9920
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  let <Tmpterm1,Tlv3> =
		      %% Line 9925
		      case Tlv2 of
			%% Line 9926
			<[V2|TempTlv3]> when 'true' ->
			    let <_cor5> =
				%% Line 9927
				apply 'decode_open_type'/2
				    (V2, [])
			    in  <_cor5,%% Line 9927
				       TempTlv3>
			%% Line 9928
			<_cor18> when 'true' ->
			    %% Line 9929
			    <'asn1_NOVALUE',Tlv2>
		      end
		  in  let <DecObjalgorithmTerm1> =
			  %% Line 9933
			  call 'OTP-PUB-KEY':'getdec_internal_object_set_argument_9'
			      (Term1)
		      in  let <_cor13> =
			      %% Line 9935
			      case Tmpterm1 of
				%% Line 9936
				<'asn1_NOVALUE'> when 'true' ->
				    'asn1_NOVALUE'
				%% Line 9937
				<_cor19> when 'true' ->
				    let <_cor10> =
					catch
					    %% Line 9938
					    apply DecObjalgorithmTerm1
						('Type', Tmpterm1, [])
				    in  %% Line 9938
					case _cor10 of
					  %% Line 9939
					  <{'EXIT',Reason1}> when 'true' ->
					      %% Line 9940
					      call 'erlang':'exit'
						  ({'Type not compatible with table constraint',Reason1})
					  %% Line 9941
					  <Tmpterm2> when 'true' ->
					      %% Line 9942
					      Tmpterm2
					end
			      end
			  in  do  %% Line 9946
				  case Tlv3 of
				    %% Line 9947
				    <[]> when 'true' ->
					'ok'
				    %% Line 9947
				    <_cor20> when 'true' ->
					call 'erlang':'exit'
					    ({'error',{'asn1',{'unexpected',Tlv3}}})
				  end
				  %% Line 9949
				  {'CertificationRequestInfo_subjectPKInfo_algorithm',Term1,_cor13}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'dec_CertificationRequestInfo_subjectPKInfo'/2 =
    %% Line 9951
    fun (_cor1,_cor0) ->
	%% Line 9960
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 9961
		  apply 'dec_CertificationRequestInfo_subjectPKInfo_algorithm'/2
		      (V1, [16])
	      in  %% Line 9966
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 9967
			    apply 'decode_compact_bit_string'/2
				(V2, [3])
			in  do  %% Line 9969
				case Tlv3 of
				  %% Line 9970
				  <[]> when 'true' ->
				      'ok'
				  %% Line 9970
				  <_cor10> when 'true' ->
				      call 'erlang':'exit'
					  ({'error',{'asn1',{'unexpected',Tlv3}}})
				end
				%% Line 9972
				{'CertificationRequestInfo_subjectPKInfo',Term1,Term2}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_CertificationRequestInfo_attributes'/2 =
    %% Line 9980
    fun (_cor1,_cor0) ->
	%% Line 9981
	case apply 'enc_CertificationRequestInfo_attributes_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 9982
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_CertificationRequestInfo_attributes_components'/3 =
    %% Line 9984
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 9985
		  apply 'dynamicsort_SETOF'/1
		      (AccBytes)
	      in  %% Line 9985
		  {_cor3,AccLen}
	  %% Line 9987
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 9988
	      case apply 'enc_CertificationRequestInfo_attributes_AttributePKCS-10'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 9989
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 9989
			apply 'enc_CertificationRequestInfo_attributes_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_CertificationRequestInfo_attributes_components',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_CertificationRequestInfo_attributes_AttributePKCS-10'/2 =
    %% Line 9997
    fun (_cor1,_cor0) ->
	%% Line 9998
	case _cor1 of
	  <{_cor10,Cindex1,Cindex2}> when 'true' ->
	      let <Objtype> =
		  %% Line 10000
		  call 'OTP-PUB-KEY':'getenc_internal_object_set_argument_10'
		      (Cindex1)
	      in  %% Line 10005
		  case apply 'encode_object_identifier'/2
			   (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		    <{EncBytes1,EncLen1}> when 'true' ->
			%% Line 10010
			case apply 'enc_CertificationRequestInfo_attributes_AttributePKCS-10_values'/3
				 (Cindex2, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#], Objtype) of
			  <{EncBytes2,EncLen2}> when 'true' ->
			      let <BytesSoFar> =
				  %% Line 10012
				  [EncBytes1|[EncBytes2|[]]]
			      in  let <LenSoFar> =
				      %% Line 10013
				      call 'erlang':'+'
					  (EncLen1, EncLen2)
				  in  %% Line 10014
				      apply 'encode_tags'/3
					  (_cor0, BytesSoFar, LenSoFar)
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_CertificationRequestInfo_attributes_AttributePKCS-10_values'/3 =
    %% Line 10021
    fun (_cor2,_cor1,_cor0) ->
	%% Line 10022
	case apply 'enc_CertificationRequestInfo_attributes_AttributePKCS-10_values_components'/4
		 (_cor2, _cor0, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 10023
	      apply 'encode_tags'/3
		  (_cor1, EncBytes, EncLen)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_CertificationRequestInfo_attributes_AttributePKCS-10_values_components'/4 =
    %% Line 10025
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_cor12,AccBytes,AccLen> when 'true' ->
	      let <_cor4> =
		  %% Line 10026
		  apply 'dynamicsort_SETOF'/1
		      (AccBytes)
	      in  %% Line 10026
		  {_cor4,AccLen}
	  %% Line 10028
	  <[H|T],ObjFun,AccBytes,AccLen> when 'true' ->
	      %% Line 10029
	      case apply ObjFun
		       ('Type', H, []) of
		<{TmpBytes,_cor13}> when 'true' ->
		    %% Line 10030
		    case apply 'encode_open_type'/2
			     (TmpBytes, []) of
		      <{EncBytes,EncLen}> when 'true' ->
			  let <_cor7> =
			      %% Line 10032
			      call 'erlang':'+'
				  (AccLen, EncLen)
			  in  %% Line 10032
			      apply 'enc_CertificationRequestInfo_attributes_AttributePKCS-10_values_components'/4
				  (T, ObjFun, [EncBytes|AccBytes], _cor7)
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'enc_CertificationRequestInfo_attributes_AttributePKCS-10_values_components',4}}] )
	    -| ['compiler_generated'] )
	end
'dec_CertificationRequestInfo_attributes_AttributePKCS-10_values'/3 =
    %% Line 10034
    fun (_cor2,_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 10038
	    apply 'match_tags'/2
		(_cor2, _cor1)
	in  %% Line 10039
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor6) ->
			  case _cor6 of
			    <[%% Line 10049
			      V1|_cor5]> when 'true' ->
				let <Tmptlv1> =
				    %% Line 10041
				    apply 'decode_open_type'/2
					(V1, [])
				in  let <_cor8> =
					catch
					    %% Line 10042
					    apply _cor0
						('Type', Tmptlv1, [])
				    in  let <_cor10> =
					    %% Line 10042
					    case _cor8 of
					      %% Line 10043
					      <{'EXIT',Reason1}> when 'true' ->
						  %% Line 10044
						  call 'erlang':'exit'
						      ({'Type not compatible with table constraint',Reason1})
					      %% Line 10045
					      <Tmpterm1> when 'true' ->
						  %% Line 10046
						  Tmpterm1
					    end
					in  let <_cor11> =
						%% Line 10049
						apply 'lc$^0'/1
						    (_cor5)
					    in  ( [_cor10|_cor11]
						  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor6> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor6})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (%% Line 10049
		       Tlv1)
	      -| ['list_comprehension'] )
'dec_CertificationRequestInfo_attributes_AttributePKCS-10'/2 =
    %% Line 10052
    fun (_cor1,_cor0) ->
	%% Line 10061
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 10062
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  let <ObjFun> =
		      %% Line 10063
		      call 'OTP-PUB-KEY':'getdec_internal_object_set_argument_10'
			  (Term1)
		  in  %% Line 10068
		      case Tlv2 of
			<[V2|Tlv3]> when 'true' ->
			    let <Term2> =
				%% Line 10069
				apply 'dec_CertificationRequestInfo_attributes_AttributePKCS-10_values'/3
				    (V2, [17], ObjFun)
			    in  do  %% Line 10071
				    case Tlv3 of
				      %% Line 10072
				      <[]> when 'true' ->
					  'ok'
				      %% Line 10072
				      <_cor11> when 'true' ->
					  call 'erlang':'exit'
					      ({'error',{'asn1',{'unexpected',Tlv3}}})
				    end
				    %% Line 10074
				    {'AttributePKCS-10',Term1,Term2}
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'dec_CertificationRequestInfo_attributes'/2 =
    %% Line 10076
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 10080
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 10081
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_CertificationRequestInfo_attributes_AttributePKCS-10'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'dec_CertificationRequestInfo'/1 =
    %% Line 10086
    fun (_cor0) ->
	%% Line 10087
	apply 'dec_CertificationRequestInfo'/2
	    (_cor0, [16])
'dec_CertificationRequestInfo'/2 =
    %% Line 10089
    fun (_cor1,_cor0) ->
	%% Line 10098
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Val1> =
		  %% Line 10100
		  apply 'decode_integer'/2
		      (V1, [2])
	      in  let <Term1> =
		      %% Line 10101
		      apply 'number2name'/2
			  (Val1, [{'v1',0}])
		  in  %% Line 10108
		      case Tlv2 of
			<[V2|Tlv3]> when 'true' ->
			    let <Term2> =
				%% Line 10109
				apply 'dec_Name'/2
				    (V2, [])
			    in  %% Line 10114
				case Tlv3 of
				  <[V3|Tlv4]> when 'true' ->
				      let <Term3> =
					  %% Line 10115
					  apply 'dec_CertificationRequestInfo_subjectPKInfo'/2
					      (V3, [16])
				      in  %% Line 10120
					  case Tlv4 of
					    <[V4|Tlv5]> when 'true' ->
						let <Term4> =
						    %% Line 10121
						    apply 'dec_CertificationRequestInfo_attributes'/2
							(V4, [131072])
						in  do  %% Line 10123
							case Tlv5 of
							  %% Line 10124
							  <[]> when 'true' ->
							      'ok'
							  %% Line 10124
							  <_cor15> when 'true' ->
							      call 'erlang':'exit'
								  ({'error',{'asn1',{'unexpected',Tlv5}}})
							end
							%% Line 10126
							{'CertificationRequestInfo',Term1,Term2,Term3,Term4}
					    ( <_cor10> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor10})
					      -| ['compiler_generated'] )
					  end
				  ( <_cor8> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor8})
				    -| ['compiler_generated'] )
				end
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_ExtensionRequest'/1 =
    %% Line 10133
    fun (_cor0) ->
	%% Line 10134
	apply 'enc_ExtensionRequest'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_ExtensionRequest'/2 =
    %% Line 10136
    fun (_cor1,_cor0) ->
	%% Line 10137
	apply 'enc_Extensions'/2
	    (_cor1, _cor0)
'dec_ExtensionRequest'/1 =
    %% Line 10140
    fun (_cor0) ->
	%% Line 10141
	apply 'dec_ExtensionRequest'/2
	    (_cor0, [16])
'dec_ExtensionRequest'/2 =
    %% Line 10143
    fun (_cor1,_cor0) ->
	%% Line 10144
	apply 'dec_Extensions'/2
	    (_cor1, _cor0)
'enc_TeletexDomainDefinedAttribute'/1 =
    %% Line 10151
    fun (_cor0) ->
	%% Line 10152
	apply 'enc_TeletexDomainDefinedAttribute'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_TeletexDomainDefinedAttribute'/2 =
    %% Line 10154
    fun (_cor1,_cor0) ->
	%% Line 10155
	case _cor1 of
	  <{_cor9,Cindex1,Cindex2}> when 'true' ->
	      %% Line 10160
	      case apply 'encode_restricted_string'/2
		       (Cindex1, [#{#<20>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 10165
		    case apply 'encode_restricted_string'/2
			     (Cindex2, [#{#<20>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <BytesSoFar> =
			      %% Line 10167
			      [EncBytes1|[EncBytes2|[]]]
			  in  let <LenSoFar> =
				  %% Line 10168
				  call 'erlang':'+'
				      (EncLen1, EncLen2)
			      in  %% Line 10169
				  apply 'encode_tags'/3
				      (_cor0, BytesSoFar, LenSoFar)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_TeletexDomainDefinedAttribute'/1 =
    %% Line 10172
    fun (_cor0) ->
	%% Line 10173
	apply 'dec_TeletexDomainDefinedAttribute'/2
	    (_cor0, [16])
'dec_TeletexDomainDefinedAttribute'/2 =
    %% Line 10175
    fun (_cor1,_cor0) ->
	%% Line 10184
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Val1> =
		  %% Line 10186
		  apply 'decode_restricted_string'/2
		      (V1, [20])
	      in  let <C1> =
		      %% Line 10187
		      call 'erlang':'byte_size'
			  (Val1)
		  in  %% Line 10188
		      case <> of
			<>
			    when let <_cor6> =
				  call 'erlang':'=<'
				      (1, C1)
			      in  let <_cor7> =
				      call 'erlang':'=<'
					  (C1, 8)
				  in  call 'erlang':'and'
					  (_cor6, _cor7) ->
			    let <_cor8> =
				%% Line 10189
				call 'erlang':'binary_to_list'
				    (Val1)
			    in  %% Line 10198
				case Tlv2 of
				  <[V2|Tlv3]> when 'true' ->
				      let <Val2> =
					  %% Line 10200
					  apply 'decode_restricted_string'/2
					      (V2, [20])
				      in  let <C2> =
					      %% Line 10201
					      call 'erlang':'byte_size'
						  (Val2)
					  in  %% Line 10202
					      case <> of
						<>
						    when let <_cor13> =
							  call 'erlang':'=<'
							      (1, C2)
						      in  let <_cor14> =
							      call 'erlang':'=<'
								  (C2, 128)
							  in  call 'erlang':'and'
								  (_cor13, _cor14) ->
						    let <_cor15> =
							%% Line 10203
							call 'erlang':'binary_to_list'
							    (Val2)
						    in  do  %% Line 10209
							    case Tlv3 of
							      %% Line 10210
							      <[]> when 'true' ->
								  'ok'
							      %% Line 10210
							      <_cor20> when 'true' ->
								  call 'erlang':'exit'
								      ({'error',{'asn1',{'unexpected',Tlv3}}})
							    end
							    %% Line 10212
							    {'TeletexDomainDefinedAttribute',_cor8,_cor15}
						%% Line 10204
						<> when 'true' ->
						    %% Line 10205
						    call 'erlang':'exit'
							({'error',{'asn1','bad_range'}})
					      end
				  ( <_cor10> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor10})
				    -| ['compiler_generated'] )
				end
			%% Line 10190
			<> when 'true' ->
			    %% Line 10191
			    call 'erlang':'exit'
				({'error',{'asn1','bad_range'}})
		      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_TeletexDomainDefinedAttributes'/1 =
    %% Line 10219
    fun (_cor0) ->
	%% Line 10220
	apply 'enc_TeletexDomainDefinedAttributes'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_TeletexDomainDefinedAttributes'/2 =
    %% Line 10222
    fun (_cor1,_cor0) ->
	%% Line 10223
	case apply 'enc_TeletexDomainDefinedAttributes_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 10224
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_TeletexDomainDefinedAttributes_components'/3 =
    %% Line 10226
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 10227
		  call 'lists':'reverse'
		      (AccBytes)
	      in  %% Line 10227
		  {_cor3,AccLen}
	  %% Line 10229
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 10230
	      case apply 'enc_TeletexDomainDefinedAttribute'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 10231
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 10231
			apply 'enc_TeletexDomainDefinedAttributes_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_TeletexDomainDefinedAttributes_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_TeletexDomainDefinedAttributes'/1 =
    %% Line 10235
    fun (_cor0) ->
	%% Line 10236
	apply 'dec_TeletexDomainDefinedAttributes'/2
	    (_cor0, [16])
'dec_TeletexDomainDefinedAttributes'/2 =
    %% Line 10238
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 10242
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 10243
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_TeletexDomainDefinedAttribute'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'enc_TerminalType'/1 =
    %% Line 10251
    fun (_cor0) ->
	%% Line 10252
	apply 'enc_TerminalType'/2
	    (_cor0, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
'enc_TerminalType'/2 =
    %% Line 10254
    fun (_cor1,_cor0) ->
	%% Line 10255
	apply 'encode_integer'/3
	    (_cor1, [{'telex',3}|[{'teletex',4}|[{'g3-facsimile',5}|[{'g4-facsimile',6}|[{'ia5-terminal',7}|[{'videotex',8}]]]]]], _cor0)
'dec_TerminalType'/1 =
    %% Line 10258
    fun (_cor0) ->
	%% Line 10259
	apply 'dec_TerminalType'/2
	    (_cor0, [2])
'dec_TerminalType'/2 =
    %% Line 10261
    fun (_cor1,_cor0) ->
	let <Val1> =
	    %% Line 10263
	    apply 'decode_integer'/2
		(_cor1, _cor0)
	in  %% Line 10264
	    case <> of
	      <>
		  when let <_cor3> =
			call 'erlang':'=<'
			    (0, Val1)
		    in  let <_cor4> =
			    call 'erlang':'=<'
				(Val1, 256)
			in  call 'erlang':'and'
				(_cor3, _cor4) ->
		  %% Line 10266
		  apply 'number2name'/2
		      (Val1, [{'telex',3}|[{'teletex',4}|[{'g3-facsimile',5}|[{'g4-facsimile',6}|[{'ia5-terminal',7}|[{'videotex',8}]]]]]])
	      %% Line 10267
	      <> when 'true' ->
		  %% Line 10268
		  call 'erlang':'exit'
		      ({'error',{'asn1','bad_range'}})
	    end
'enc_PresentationAddress'/1 =
    %% Line 10277
    fun (_cor0) ->
	%% Line 10278
	apply 'enc_PresentationAddress'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_PresentationAddress'/2 =
    %% Line 10280
    fun (_cor1,_cor0) ->
	%% Line 10281
	case _cor1 of
	  <{_cor19,Cindex1,Cindex2,Cindex3,Cindex4}> when 'true' ->
	      let <_cor4> =
		  %% Line 10286
		  case Cindex1 of
		    %% Line 10287
		    <'asn1_NOVALUE'> when 'true' ->
			{#{}#,0}
		    %% Line 10288
		    <_cor20> when 'true' ->
			%% Line 10289
			apply 'encode_restricted_string'/2
			    (Cindex1, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#|[#{#<160>(8,1,'integer',['unsigned'|['big']])}#]])
		  end
	      in  %% Line 10286
		  case _cor4 of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor7> =
			    %% Line 10295
			    case Cindex2 of
			      %% Line 10296
			      <'asn1_NOVALUE'> when 'true' ->
				  {#{}#,0}
			      %% Line 10297
			      <_cor21> when 'true' ->
				  %% Line 10298
				  apply 'encode_restricted_string'/2
				      (Cindex2, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#|[#{#<161>(8,1,'integer',['unsigned'|['big']])}#]])
			    end
			in  %% Line 10295
			    case _cor7 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  let <_cor10> =
				      %% Line 10304
				      case Cindex3 of
					%% Line 10305
					<'asn1_NOVALUE'> when 'true' ->
					    {#{}#,0}
					%% Line 10306
					<_cor22> when 'true' ->
					    %% Line 10307
					    apply 'encode_restricted_string'/2
						(Cindex3, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#|[#{#<162>(8,1,'integer',['unsigned'|['big']])}#]])
				      end
				  in  %% Line 10304
				      case _cor10 of
					<{EncBytes3,EncLen3}> when 'true' ->
					    %% Line 10313
					    case apply 'enc_PresentationAddress_nAddresses'/2
						     (Cindex4, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#|[#{#<163>(8,1,'integer',['unsigned'|['big']])}#]]) of
					      <{EncBytes4,EncLen4}> when 'true' ->
						  let <BytesSoFar> =
						      %% Line 10315
						      [EncBytes1|[EncBytes2|[EncBytes3|[EncBytes4|[]]]]]
						  in  let <_cor14> =
							  %% Line 10316
							  call 'erlang':'+'
							      (EncLen1, EncLen2)
						      in  let <_cor15> =
							      %% Line 10316
							      call 'erlang':'+'
								  (_cor14, EncLen3)
							  in  let <LenSoFar> =
								  %% Line 10316
								  call 'erlang':'+'
								      (_cor15, EncLen4)
							      in  %% Line 10317
								  apply 'encode_tags'/3
								      (_cor0, BytesSoFar, LenSoFar)
					      ( <_cor12> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor12})
						-| ['compiler_generated'] )
					    end
					( <_cor11> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor11})
					  -| ['compiler_generated'] )
				      end
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_PresentationAddress_nAddresses'/2 =
    %% Line 10324
    fun (_cor1,_cor0) ->
	%% Line 10325
	case apply 'enc_PresentationAddress_nAddresses_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 10326
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_PresentationAddress_nAddresses_components'/3 =
    %% Line 10328
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 10329
		  apply 'dynamicsort_SETOF'/1
		      (AccBytes)
	      in  %% Line 10329
		  {_cor3,AccLen}
	  %% Line 10331
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 10332
	      case apply 'encode_restricted_string'/2
		       (H, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 10333
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 10333
			apply 'enc_PresentationAddress_nAddresses_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_PresentationAddress_nAddresses_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_PresentationAddress_nAddresses'/2 =
    %% Line 10335
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 10339
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 10340
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[%% Line 10343
			      V1|_cor4]> when 'true' ->
				let <_cor6> =
				    %% Line 10341
				    apply 'decode_restricted_string'/2
					(V1, [4])
				in  let <_cor7> =
					%% Line 10341
					call 'erlang':'binary_to_list'
					    (_cor6)
				    in  let <_cor8> =
					    %% Line 10343
					    apply 'lc$^0'/1
						(_cor4)
					in  ( [_cor7|_cor8]
					      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (%% Line 10343
		       Tlv1)
	      -| ['list_comprehension'] )
'dec_PresentationAddress'/1 =
    %% Line 10348
    fun (_cor0) ->
	%% Line 10349
	apply 'dec_PresentationAddress'/2
	    (_cor0, [16])
'dec_PresentationAddress'/2 =
    %% Line 10351
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 10355
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <Term1,Tlv2> =
		%% Line 10360
		case Tlv1 of
		  %% Line 10361
		  <[{131072,V1}|TempTlv2]> when 'true' ->
		      let <_cor3> =
			  %% Line 10363
			  apply 'decode_restricted_string'/2
			      (V1, [4])
		      in  let <_cor4> =
			      %% Line 10363
			      call 'erlang':'binary_to_list'
				  (_cor3)
			  in  <_cor4,%% Line 10365
				     TempTlv2>
		  %% Line 10366
		  <_cor23> when 'true' ->
		      %% Line 10367
		      <'asn1_NOVALUE',Tlv1>
		end
	    in  let <Term2,Tlv3> =
		    %% Line 10373
		    case Tlv2 of
		      %% Line 10374
		      <[{131073,V2}|TempTlv3]> when 'true' ->
			  let <_cor8> =
			      %% Line 10376
			      apply 'decode_restricted_string'/2
				  (V2, [4])
			  in  let <_cor9> =
				  %% Line 10376
				  call 'erlang':'binary_to_list'
				      (_cor8)
			      in  <_cor9,%% Line 10378
					 TempTlv3>
		      %% Line 10379
		      <_cor24> when 'true' ->
			  %% Line 10380
			  <'asn1_NOVALUE',Tlv2>
		    end
		in  let <Term3,Tlv4> =
			%% Line 10386
			case Tlv3 of
			  %% Line 10387
			  <[{131074,V3}|TempTlv4]> when 'true' ->
			      let <_cor13> =
				  %% Line 10389
				  apply 'decode_restricted_string'/2
				      (V3, [4])
			      in  let <_cor14> =
				      %% Line 10389
				      call 'erlang':'binary_to_list'
					  (_cor13)
				  in  <_cor14,%% Line 10391
					      TempTlv4>
			  %% Line 10392
			  <_cor25> when 'true' ->
			      %% Line 10393
			      <'asn1_NOVALUE',Tlv3>
			end
		    in  %% Line 10399
			case Tlv4 of
			  <[V4|Tlv5]> when 'true' ->
			      let <Term4> =
				  %% Line 10400
				  apply 'dec_PresentationAddress_nAddresses'/2
				      (V4, [131075|[17]])
			      in  do  %% Line 10402
				      case Tlv5 of
					%% Line 10403
					<[]> when 'true' ->
					    'ok'
					%% Line 10403
					<_cor26> when 'true' ->
					    call 'erlang':'exit'
						({'error',{'asn1',{'unexpected',Tlv5}}})
				      end
				      %% Line 10405
				      {'PresentationAddress',Term1,Term2,Term3,Term4}
			  ( <_cor18> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor18})
			    -| ['compiler_generated'] )
			end
'enc_ExtendedNetworkAddress'/1 =
    %% Line 10412
    fun (_cor0) ->
	%% Line 10413
	apply 'enc_ExtendedNetworkAddress'/2
	    (_cor0, [])
'enc_ExtendedNetworkAddress'/2 =
    %% Line 10415
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 10416
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 10417
	      <'e163-4-address'> when 'true' ->
		  let <_cor2> =
		      %% Line 10418
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 10418
		      apply 'enc_ExtendedNetworkAddress_e163-4-address'/2
			  (_cor2, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 10419
	      <'psap-address'> when 'true' ->
		  let <_cor3> =
		      %% Line 10420
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 10420
		      apply 'enc_PresentationAddress'/2
			  (_cor3, [#{#<160>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 10421
	      <Else> when 'true' ->
		  %% Line 10422
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 10416
	    case _cor5 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 10425
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor6})
		-| ['compiler_generated'] )
	    end
'enc_ExtendedNetworkAddress_e163-4-address'/2 =
    %% Line 10434
    fun (_cor1,_cor0) ->
	%% Line 10435
	case _cor1 of
	  <{_cor11,Cindex1,Cindex2}> when 'true' ->
	      %% Line 10440
	      case apply 'encode_restricted_string'/2
		       (Cindex1, [#{#<128>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    let <_cor5> =
			%% Line 10445
			case Cindex2 of
			  %% Line 10446
			  <'asn1_NOVALUE'> when 'true' ->
			      {#{}#,0}
			  %% Line 10447
			  <_cor12> when 'true' ->
			      %% Line 10448
			      apply 'encode_restricted_string'/2
				  (Cindex2, [#{#<129>(8,1,'integer',['unsigned'|['big']])}#])
			end
		    in  %% Line 10445
			case _cor5 of
			  <{EncBytes2,EncLen2}> when 'true' ->
			      let <BytesSoFar> =
				  %% Line 10451
				  [EncBytes1|[EncBytes2|[]]]
			      in  let <LenSoFar> =
				      %% Line 10452
				      call 'erlang':'+'
					  (EncLen1, EncLen2)
				  in  %% Line 10453
				      apply 'encode_tags'/3
					  (_cor0, BytesSoFar, LenSoFar)
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_ExtendedNetworkAddress_e163-4-address'/2 =
    %% Line 10454
    fun (_cor1,_cor0) ->
	%% Line 10463
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Val1> =
		  %% Line 10465
		  apply 'decode_restricted_string'/2
		      (V1, [131072])
	      in  let <C1> =
		      %% Line 10466
		      call 'erlang':'byte_size'
			  (Val1)
		  in  %% Line 10467
		      case <> of
			<>
			    when let <_cor6> =
				  call 'erlang':'=<'
				      (1, C1)
			      in  let <_cor7> =
				      call 'erlang':'=<'
					  (C1, 15)
				  in  call 'erlang':'and'
					  (_cor6, _cor7) ->
			    let <_cor8> =
				%% Line 10468
				call 'erlang':'binary_to_list'
				    (Val1)
			    in  let <Term2,Tlv3> =
				    %% Line 10477
				    case Tlv2 of
				      %% Line 10478
				      <[{131073,V2}|TempTlv3]> when 'true' ->
					  let <Val2> =
					      %% Line 10480
					      apply 'decode_restricted_string'/2
						  (V2, [])
					  in  let <C2> =
						  %% Line 10481
						  call 'erlang':'byte_size'
						      (Val2)
					      in  %% Line 10482
						  case <> of
						    <>
							when let <_cor12> =
							      call 'erlang':'=<'
								  (1, C2)
							  in  let <_cor13> =
								  call 'erlang':'=<'
								      (C2, 40)
							      in  call 'erlang':'and'
								      (_cor12, _cor13) ->
							let <_cor14> =
							    %% Line 10483
							    call 'erlang':'binary_to_list'
								(Val2)
							in  <_cor14,%% Line 10487
								    TempTlv3>
						    %% Line 10484
						    <> when 'true' ->
							%% Line 10485
							call 'erlang':'exit'
							    ({'error',{'asn1','bad_range'}})
						  end
				      %% Line 10488
				      <_cor21> when 'true' ->
					  %% Line 10489
					  <'asn1_NOVALUE',Tlv2>
				    end
				in  do  %% Line 10492
					case Tlv3 of
					  %% Line 10493
					  <[]> when 'true' ->
					      'ok'
					  %% Line 10493
					  <_cor22> when 'true' ->
					      call 'erlang':'exit'
						  ({'error',{'asn1',{'unexpected',Tlv3}}})
					end
					%% Line 10495
					{'ExtendedNetworkAddress_e163-4-address',_cor8,Term2}
			%% Line 10469
			<> when 'true' ->
			    %% Line 10470
			    call 'erlang':'exit'
				({'error',{'asn1','bad_range'}})
		      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'dec_ExtendedNetworkAddress'/1 =
    %% Line 10499
    fun (_cor0) ->
	%% Line 10500
	apply 'dec_ExtendedNetworkAddress'/2
	    (_cor0, [])
'dec_ExtendedNetworkAddress'/2 =
    %% Line 10502
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 10503
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 10504
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor10> when 'true' ->
		      Tlv1
		end
	    in  %% Line 10504
		case _cor4 of
		  %% Line 10507
		  <{16,V1}> when 'true' ->
		      let <_cor5> =
			  %% Line 10508
			  apply 'dec_ExtendedNetworkAddress_e163-4-address'/2
			      (V1, [])
		      in  %% Line 10508
			  {'e163-4-address',_cor5}
		  %% Line 10512
		  <{131072,V1}> when 'true' ->
		      let <_cor6> =
			  %% Line 10513
			  apply 'dec_PresentationAddress'/2
			      (V1, [])
		      in  %% Line 10513
			  {'psap-address',_cor6}
		  %% Line 10515
		  <Else> when 'true' ->
		      %% Line 10516
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'enc_PDSParameter'/1 =
    %% Line 10524
    fun (_cor0) ->
	%% Line 10525
	apply 'enc_PDSParameter'/2
	    (_cor0, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
'enc_PDSParameter'/2 =
    %% Line 10527
    fun (_cor1,_cor0) ->
	%% Line 10528
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2}> when 'true' ->
	      let <_cor4> =
		  %% Line 10533
		  case Cindex1 of
		    %% Line 10534
		    <'asn1_NOVALUE'> when 'true' ->
			{#{}#,0}
		    %% Line 10535
		    <_cor14> when 'true' ->
			%% Line 10536
			apply 'encode_restricted_string'/2
			    (Cindex1, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#])
		  end
	      in  %% Line 10533
		  case _cor4 of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor7> =
			    %% Line 10542
			    case Cindex2 of
			      %% Line 10543
			      <'asn1_NOVALUE'> when 'true' ->
				  {#{}#,0}
			      %% Line 10544
			      <_cor15> when 'true' ->
				  %% Line 10545
				  apply 'encode_restricted_string'/2
				      (Cindex2, [#{#<20>(8,1,'integer',['unsigned'|['big']])}#])
			    end
			in  %% Line 10542
			    case _cor7 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  let <BytesSoFar> =
				      %% Line 10548
				      [EncBytes1|[EncBytes2|[]]]
				  in  let <LenSoFar> =
					  %% Line 10549
					  call 'erlang':'+'
					      (EncLen1, EncLen2)
				      in  %% Line 10550
					  apply 'encode_tags'/3
					      (_cor0, BytesSoFar, LenSoFar)
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_PDSParameter'/1 =
    %% Line 10553
    fun (_cor0) ->
	%% Line 10554
	apply 'dec_PDSParameter'/2
	    (_cor0, [17])
'dec_PDSParameter'/2 =
    %% Line 10556
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 10557
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <SetFun> =
		%% Line 10558
		( fun (_cor4) ->
		      %% Line 10559
		      case _cor4 of
			%% Line 10561
			<TTlv = {19,_cor40}> when 'true' ->
			    %% Line 10562
			    {1,TTlv}
			%% Line 10564
			<TTlv = {20,_cor41}> when 'true' ->
			    %% Line 10565
			    {2,TTlv}
			%% Line 10566
			<Else> when 'true' ->
			    %% Line 10567
			    {3,Else}
		      end
		  -| [{'id',{0,0,'-dec_PDSParameter/2-fun-0-'}}] )
	    in  let <_cor12> =
		    %% Line 10570
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor9) ->
				  case _cor9 of
				    <[TempTlv|_cor8]> when 'true' ->
					let <_cor10> =
					    apply SetFun
						(TempTlv)
					in  let <_cor11> =
						apply 'lc$^0'/1
						    (_cor8)
					    in  ( [_cor10|_cor11]
						  -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor9> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor9})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lc$^0'/1
			      (Tlv1)
		      -| ['list_comprehension'] )
		in  let <_cor19> =
			%% Line 10571
			( letrec
			      'lc$^1'/1 =
				  fun (_cor17) ->
				      case _cor17 of
					<[{_cor42,Stlv}|_cor15]> when 'true' ->
					    let <_cor18> =
						apply 'lc$^1'/1
						    (_cor15)
					    in  ( [Stlv|_cor18]
						  -| ['compiler_generated'] )
					( <[_cor14|_cor15]> when 'true' ->
					      apply 'lc$^1'/1
						  (_cor15)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor17> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor17})
						-| [{'function_name',{'lc$^1',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  let <_cor16> =
				  call 'lists':'sort'
				      (_cor12)
			      in  apply 'lc$^1'/1
				      (_cor16)
			  -| ['list_comprehension'] )
		    in  let <Term1,Tlv3> =
			    %% Line 10576
			    case _cor19 of
			      %% Line 10577
			      <[{19,V1}|TempTlv3]> when 'true' ->
				  let <Val1> =
				      %% Line 10579
				      apply 'decode_restricted_string'/2
					  (V1, [])
				  in  let <C1> =
					  %% Line 10580
					  call 'erlang':'byte_size'
					      (Val1)
				      in  %% Line 10581
					  case <> of
					    <>
						when let <_cor23> =
						      call 'erlang':'=<'
							  (1, C1)
						  in  let <_cor24> =
							  call 'erlang':'=<'
							      (C1, 30)
						      in  call 'erlang':'and'
							      (_cor23, _cor24) ->
						let <_cor25> =
						    %% Line 10582
						    call 'erlang':'binary_to_list'
							(Val1)
						in  <_cor25,%% Line 10586
							    TempTlv3>
					    %% Line 10583
					    <> when 'true' ->
						%% Line 10584
						call 'erlang':'exit'
						    ({'error',{'asn1','bad_range'}})
					  end
			      %% Line 10587
			      <_cor43> when 'true' ->
				  %% Line 10588
				  <'asn1_NOVALUE',_cor19>
			    end
			in  let <Term2,Tlv4> =
				%% Line 10594
				case Tlv3 of
				  %% Line 10595
				  <[{20,V2}|TempTlv4]> when 'true' ->
				      let <Val2> =
					  %% Line 10597
					  apply 'decode_restricted_string'/2
					      (V2, [])
				      in  let <C2> =
					      %% Line 10598
					      call 'erlang':'byte_size'
						  (Val2)
					  in  %% Line 10599
					      case <> of
						<>
						    when let <_cor31> =
							  call 'erlang':'=<'
							      (1, C2)
						      in  let <_cor32> =
							      call 'erlang':'=<'
								  (C2, 30)
							  in  call 'erlang':'and'
								  (_cor31, _cor32) ->
						    let <_cor33> =
							%% Line 10600
							call 'erlang':'binary_to_list'
							    (Val2)
						    in  <_cor33,%% Line 10604
								TempTlv4>
						%% Line 10601
						<> when 'true' ->
						    %% Line 10602
						    call 'erlang':'exit'
							({'error',{'asn1','bad_range'}})
					      end
				  %% Line 10605
				  <_cor44> when 'true' ->
				      %% Line 10606
				      <'asn1_NOVALUE',Tlv3>
				end
			    in  do  %% Line 10609
				    case Tlv4 of
				      %% Line 10610
				      <[]> when 'true' ->
					  'ok'
				      %% Line 10610
				      <_cor45> when 'true' ->
					  call 'erlang':'exit'
					      ({'error',{'asn1',{'unexpected',Tlv4}}})
				    end
				    %% Line 10612
				    {'PDSParameter',Term1,Term2}
'enc_LocalPostalAttributes'/1 =
    %% Line 10618
    fun (_cor0) ->
	%% Line 10619
	apply 'enc_LocalPostalAttributes'/2
	    (_cor0, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
'enc_LocalPostalAttributes'/2 =
    %% Line 10621
    fun (_cor1,_cor0) ->
	%% Line 10622
	apply 'enc_PDSParameter'/2
	    (_cor1, _cor0)
'dec_LocalPostalAttributes'/1 =
    %% Line 10625
    fun (_cor0) ->
	%% Line 10626
	apply 'dec_LocalPostalAttributes'/2
	    (_cor0, [17])
'dec_LocalPostalAttributes'/2 =
    %% Line 10628
    fun (_cor1,_cor0) ->
	%% Line 10629
	apply 'dec_PDSParameter'/2
	    (_cor1, _cor0)
'enc_UniquePostalName'/1 =
    %% Line 10636
    fun (_cor0) ->
	%% Line 10637
	apply 'enc_UniquePostalName'/2
	    (_cor0, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
'enc_UniquePostalName'/2 =
    %% Line 10639
    fun (_cor1,_cor0) ->
	%% Line 10640
	apply 'enc_PDSParameter'/2
	    (_cor1, _cor0)
'dec_UniquePostalName'/1 =
    %% Line 10643
    fun (_cor0) ->
	%% Line 10644
	apply 'dec_UniquePostalName'/2
	    (_cor0, [17])
'dec_UniquePostalName'/2 =
    %% Line 10646
    fun (_cor1,_cor0) ->
	%% Line 10647
	apply 'dec_PDSParameter'/2
	    (_cor1, _cor0)
'enc_PosteRestanteAddress'/1 =
    %% Line 10654
    fun (_cor0) ->
	%% Line 10655
	apply 'enc_PosteRestanteAddress'/2
	    (_cor0, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
'enc_PosteRestanteAddress'/2 =
    %% Line 10657
    fun (_cor1,_cor0) ->
	%% Line 10658
	apply 'enc_PDSParameter'/2
	    (_cor1, _cor0)
'dec_PosteRestanteAddress'/1 =
    %% Line 10661
    fun (_cor0) ->
	%% Line 10662
	apply 'dec_PosteRestanteAddress'/2
	    (_cor0, [17])
'dec_PosteRestanteAddress'/2 =
    %% Line 10664
    fun (_cor1,_cor0) ->
	%% Line 10665
	apply 'dec_PDSParameter'/2
	    (_cor1, _cor0)
'enc_PostOfficeBoxAddress'/1 =
    %% Line 10672
    fun (_cor0) ->
	%% Line 10673
	apply 'enc_PostOfficeBoxAddress'/2
	    (_cor0, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
'enc_PostOfficeBoxAddress'/2 =
    %% Line 10675
    fun (_cor1,_cor0) ->
	%% Line 10676
	apply 'enc_PDSParameter'/2
	    (_cor1, _cor0)
'dec_PostOfficeBoxAddress'/1 =
    %% Line 10679
    fun (_cor0) ->
	%% Line 10680
	apply 'dec_PostOfficeBoxAddress'/2
	    (_cor0, [17])
'dec_PostOfficeBoxAddress'/2 =
    %% Line 10682
    fun (_cor1,_cor0) ->
	%% Line 10683
	apply 'dec_PDSParameter'/2
	    (_cor1, _cor0)
'enc_StreetAddress'/1 =
    %% Line 10690
    fun (_cor0) ->
	%% Line 10691
	apply 'enc_StreetAddress'/2
	    (_cor0, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
'enc_StreetAddress'/2 =
    %% Line 10693
    fun (_cor1,_cor0) ->
	%% Line 10694
	apply 'enc_PDSParameter'/2
	    (_cor1, _cor0)
'dec_StreetAddress'/1 =
    %% Line 10697
    fun (_cor0) ->
	%% Line 10698
	apply 'dec_StreetAddress'/2
	    (_cor0, [17])
'dec_StreetAddress'/2 =
    %% Line 10700
    fun (_cor1,_cor0) ->
	%% Line 10701
	apply 'dec_PDSParameter'/2
	    (_cor1, _cor0)
'enc_UnformattedPostalAddress'/1 =
    %% Line 10708
    fun (_cor0) ->
	%% Line 10709
	apply 'enc_UnformattedPostalAddress'/2
	    (_cor0, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
'enc_UnformattedPostalAddress'/2 =
    %% Line 10711
    fun (_cor1,_cor0) ->
	%% Line 10712
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2}> when 'true' ->
	      let <_cor4> =
		  %% Line 10717
		  case Cindex1 of
		    %% Line 10718
		    <'asn1_NOVALUE'> when 'true' ->
			{#{}#,0}
		    %% Line 10719
		    <_cor14> when 'true' ->
			%% Line 10720
			apply 'enc_UnformattedPostalAddress_printable-address'/2
			    (Cindex1, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
		  end
	      in  %% Line 10717
		  case _cor4 of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor7> =
			    %% Line 10726
			    case Cindex2 of
			      %% Line 10727
			      <'asn1_NOVALUE'> when 'true' ->
				  {#{}#,0}
			      %% Line 10728
			      <_cor15> when 'true' ->
				  %% Line 10729
				  apply 'encode_restricted_string'/2
				      (Cindex2, [#{#<20>(8,1,'integer',['unsigned'|['big']])}#])
			    end
			in  %% Line 10726
			    case _cor7 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  let <BytesSoFar> =
				      %% Line 10732
				      [EncBytes1|[EncBytes2|[]]]
				  in  let <LenSoFar> =
					  %% Line 10733
					  call 'erlang':'+'
					      (EncLen1, EncLen2)
				      in  %% Line 10734
					  apply 'encode_tags'/3
					      (_cor0, BytesSoFar, LenSoFar)
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_UnformattedPostalAddress_printable-address'/2 =
    %% Line 10741
    fun (_cor1,_cor0) ->
	%% Line 10742
	case apply 'enc_UnformattedPostalAddress_printable-address_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 10743
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_UnformattedPostalAddress_printable-address_components'/3 =
    %% Line 10745
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 10746
		  call 'lists':'reverse'
		      (AccBytes)
	      in  %% Line 10746
		  {_cor3,AccLen}
	  %% Line 10748
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 10749
	      case apply 'encode_restricted_string'/2
		       (H, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 10750
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 10750
			apply 'enc_UnformattedPostalAddress_printable-address_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_UnformattedPostalAddress_printable-address_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_UnformattedPostalAddress_printable-address'/2 =
    %% Line 10752
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 10756
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 10757
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[%% Line 10765
			      V1|_cor4]> when 'true' ->
				let <Val1> =
				    %% Line 10758
				    apply 'decode_restricted_string'/2
					(V1, [19])
				in  let <C1> =
					%% Line 10759
					call 'erlang':'byte_size'
					    (Val1)
				    in  %% Line 10760
					case <> of
					  <>
					      when let <_cor8> =
						    call 'erlang':'=<'
							(1, C1)
						in  let <_cor9> =
							call 'erlang':'=<'
							    (C1, 30)
						    in  call 'erlang':'and'
							    (_cor8, _cor9) ->
					      let <_cor10> =
						  %% Line 10761
						  call 'erlang':'binary_to_list'
						      (Val1)
					      in  let <_cor11> =
						      %% Line 10765
						      apply 'lc$^0'/1
							  (_cor4)
						  in  ( [_cor10|_cor11]
							-| ['compiler_generated'] )
					  %% Line 10762
					  <> when 'true' ->
					      %% Line 10763
					      call 'erlang':'exit'
						  ({'error',{'asn1','bad_range'}})
					end
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (%% Line 10765
		       Tlv1)
	      -| ['list_comprehension'] )
'dec_UnformattedPostalAddress'/1 =
    %% Line 10770
    fun (_cor0) ->
	%% Line 10771
	apply 'dec_UnformattedPostalAddress'/2
	    (_cor0, [17])
'dec_UnformattedPostalAddress'/2 =
    %% Line 10773
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 10774
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <SetFun> =
		%% Line 10775
		( fun (_cor4) ->
		      %% Line 10776
		      case _cor4 of
			%% Line 10778
			<TTlv = {16,_cor36}> when 'true' ->
			    %% Line 10779
			    {1,TTlv}
			%% Line 10781
			<TTlv = {20,_cor37}> when 'true' ->
			    %% Line 10782
			    {2,TTlv}
			%% Line 10783
			<Else> when 'true' ->
			    %% Line 10784
			    {3,Else}
		      end
		  -| [{'id',{0,0,'-dec_UnformattedPostalAddress/2-fun-0-'}}] )
	    in  let <_cor12> =
		    %% Line 10787
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor9) ->
				  case _cor9 of
				    <[TempTlv|_cor8]> when 'true' ->
					let <_cor10> =
					    apply SetFun
						(TempTlv)
					in  let <_cor11> =
						apply 'lc$^0'/1
						    (_cor8)
					    in  ( [_cor10|_cor11]
						  -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor9> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor9})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lc$^0'/1
			      (Tlv1)
		      -| ['list_comprehension'] )
		in  let <_cor19> =
			%% Line 10788
			( letrec
			      'lc$^1'/1 =
				  fun (_cor17) ->
				      case _cor17 of
					<[{_cor38,Stlv}|_cor15]> when 'true' ->
					    let <_cor18> =
						apply 'lc$^1'/1
						    (_cor15)
					    in  ( [Stlv|_cor18]
						  -| ['compiler_generated'] )
					( <[_cor14|_cor15]> when 'true' ->
					      apply 'lc$^1'/1
						  (_cor15)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor17> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor17})
						-| [{'function_name',{'lc$^1',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  let <_cor16> =
				  call 'lists':'sort'
				      (_cor12)
			      in  apply 'lc$^1'/1
				      (_cor16)
			  -| ['list_comprehension'] )
		    in  let <Term1,Tlv3> =
			    %% Line 10793
			    case _cor19 of
			      %% Line 10794
			      <[{16,V1}|TempTlv3]> when 'true' ->
				  let <_cor21> =
				      %% Line 10795
				      apply 'dec_UnformattedPostalAddress_printable-address'/2
					  (V1, [])
				  in  <_cor21,%% Line 10795
					      TempTlv3>
			      %% Line 10796
			      <_cor39> when 'true' ->
				  %% Line 10797
				  <'asn1_NOVALUE',_cor19>
			    end
			in  let <Term2,Tlv4> =
				%% Line 10803
				case Tlv3 of
				  %% Line 10804
				  <[{20,V2}|TempTlv4]> when 'true' ->
				      let <Val1> =
					  %% Line 10806
					  apply 'decode_restricted_string'/2
					      (V2, [])
				      in  let <C1> =
					      %% Line 10807
					      call 'erlang':'byte_size'
						  (Val1)
					  in  %% Line 10808
					      case <> of
						<>
						    when let <_cor27> =
							  call 'erlang':'=<'
							      (1, C1)
						      in  let <_cor28> =
							      call 'erlang':'=<'
								  (C1, 180)
							  in  call 'erlang':'and'
								  (_cor27, _cor28) ->
						    let <_cor29> =
							%% Line 10809
							call 'erlang':'binary_to_list'
							    (Val1)
						    in  <_cor29,%% Line 10813
								TempTlv4>
						%% Line 10810
						<> when 'true' ->
						    %% Line 10811
						    call 'erlang':'exit'
							({'error',{'asn1','bad_range'}})
					      end
				  %% Line 10814
				  <_cor40> when 'true' ->
				      %% Line 10815
				      <'asn1_NOVALUE',Tlv3>
				end
			    in  do  %% Line 10818
				    case Tlv4 of
				      %% Line 10819
				      <[]> when 'true' ->
					  'ok'
				      %% Line 10819
				      <_cor41> when 'true' ->
					  call 'erlang':'exit'
					      ({'error',{'asn1',{'unexpected',Tlv4}}})
				    end
				    %% Line 10821
				    {'UnformattedPostalAddress',Term1,Term2}
'enc_ExtensionPhysicalDeliveryAddressComponents'/1 =
    %% Line 10827
    fun (_cor0) ->
	%% Line 10828
	apply 'enc_ExtensionPhysicalDeliveryAddressComponents'/2
	    (_cor0, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
'enc_ExtensionPhysicalDeliveryAddressComponents'/2 =
    %% Line 10830
    fun (_cor1,_cor0) ->
	%% Line 10831
	apply 'enc_PDSParameter'/2
	    (_cor1, _cor0)
'dec_ExtensionPhysicalDeliveryAddressComponents'/1 =
    %% Line 10834
    fun (_cor0) ->
	%% Line 10835
	apply 'dec_ExtensionPhysicalDeliveryAddressComponents'/2
	    (_cor0, [17])
'dec_ExtensionPhysicalDeliveryAddressComponents'/2 =
    %% Line 10837
    fun (_cor1,_cor0) ->
	%% Line 10838
	apply 'dec_PDSParameter'/2
	    (_cor1, _cor0)
'enc_PhysicalDeliveryOrganizationName'/1 =
    %% Line 10845
    fun (_cor0) ->
	%% Line 10846
	apply 'enc_PhysicalDeliveryOrganizationName'/2
	    (_cor0, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
'enc_PhysicalDeliveryOrganizationName'/2 =
    %% Line 10848
    fun (_cor1,_cor0) ->
	%% Line 10849
	apply 'enc_PDSParameter'/2
	    (_cor1, _cor0)
'dec_PhysicalDeliveryOrganizationName'/1 =
    %% Line 10852
    fun (_cor0) ->
	%% Line 10853
	apply 'dec_PhysicalDeliveryOrganizationName'/2
	    (_cor0, [17])
'dec_PhysicalDeliveryOrganizationName'/2 =
    %% Line 10855
    fun (_cor1,_cor0) ->
	%% Line 10856
	apply 'dec_PDSParameter'/2
	    (_cor1, _cor0)
'enc_PhysicalDeliveryPersonalName'/1 =
    %% Line 10863
    fun (_cor0) ->
	%% Line 10864
	apply 'enc_PhysicalDeliveryPersonalName'/2
	    (_cor0, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
'enc_PhysicalDeliveryPersonalName'/2 =
    %% Line 10866
    fun (_cor1,_cor0) ->
	%% Line 10867
	apply 'enc_PDSParameter'/2
	    (_cor1, _cor0)
'dec_PhysicalDeliveryPersonalName'/1 =
    %% Line 10870
    fun (_cor0) ->
	%% Line 10871
	apply 'dec_PhysicalDeliveryPersonalName'/2
	    (_cor0, [17])
'dec_PhysicalDeliveryPersonalName'/2 =
    %% Line 10873
    fun (_cor1,_cor0) ->
	%% Line 10874
	apply 'dec_PDSParameter'/2
	    (_cor1, _cor0)
'enc_ExtensionORAddressComponents'/1 =
    %% Line 10881
    fun (_cor0) ->
	%% Line 10882
	apply 'enc_ExtensionORAddressComponents'/2
	    (_cor0, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
'enc_ExtensionORAddressComponents'/2 =
    %% Line 10884
    fun (_cor1,_cor0) ->
	%% Line 10885
	apply 'enc_PDSParameter'/2
	    (_cor1, _cor0)
'dec_ExtensionORAddressComponents'/1 =
    %% Line 10888
    fun (_cor0) ->
	%% Line 10889
	apply 'dec_ExtensionORAddressComponents'/2
	    (_cor0, [17])
'dec_ExtensionORAddressComponents'/2 =
    %% Line 10891
    fun (_cor1,_cor0) ->
	%% Line 10892
	apply 'dec_PDSParameter'/2
	    (_cor1, _cor0)
'enc_PhysicalDeliveryOfficeNumber'/1 =
    %% Line 10899
    fun (_cor0) ->
	%% Line 10900
	apply 'enc_PhysicalDeliveryOfficeNumber'/2
	    (_cor0, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
'enc_PhysicalDeliveryOfficeNumber'/2 =
    %% Line 10902
    fun (_cor1,_cor0) ->
	%% Line 10903
	apply 'enc_PDSParameter'/2
	    (_cor1, _cor0)
'dec_PhysicalDeliveryOfficeNumber'/1 =
    %% Line 10906
    fun (_cor0) ->
	%% Line 10907
	apply 'dec_PhysicalDeliveryOfficeNumber'/2
	    (_cor0, [17])
'dec_PhysicalDeliveryOfficeNumber'/2 =
    %% Line 10909
    fun (_cor1,_cor0) ->
	%% Line 10910
	apply 'dec_PDSParameter'/2
	    (_cor1, _cor0)
'enc_PhysicalDeliveryOfficeName'/1 =
    %% Line 10917
    fun (_cor0) ->
	%% Line 10918
	apply 'enc_PhysicalDeliveryOfficeName'/2
	    (_cor0, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
'enc_PhysicalDeliveryOfficeName'/2 =
    %% Line 10920
    fun (_cor1,_cor0) ->
	%% Line 10921
	apply 'enc_PDSParameter'/2
	    (_cor1, _cor0)
'dec_PhysicalDeliveryOfficeName'/1 =
    %% Line 10924
    fun (_cor0) ->
	%% Line 10925
	apply 'dec_PhysicalDeliveryOfficeName'/2
	    (_cor0, [17])
'dec_PhysicalDeliveryOfficeName'/2 =
    %% Line 10927
    fun (_cor1,_cor0) ->
	%% Line 10928
	apply 'dec_PDSParameter'/2
	    (_cor1, _cor0)
'enc_PostalCode'/1 =
    %% Line 10935
    fun (_cor0) ->
	%% Line 10936
	apply 'enc_PostalCode'/2
	    (_cor0, [])
'enc_PostalCode'/2 =
    %% Line 10938
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 10939
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 10940
	      <'numeric-code'> when 'true' ->
		  let <_cor2> =
		      %% Line 10941
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 10941
		      apply 'encode_restricted_string'/2
			  (_cor2, [#{#<18>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 10942
	      <'printable-code'> when 'true' ->
		  let <_cor3> =
		      %% Line 10943
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 10943
		      apply 'encode_restricted_string'/2
			  (_cor3, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 10944
	      <Else> when 'true' ->
		  %% Line 10945
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 10939
	    case _cor5 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 10948
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor6})
		-| ['compiler_generated'] )
	    end
'dec_PostalCode'/1 =
    %% Line 10953
    fun (_cor0) ->
	%% Line 10954
	apply 'dec_PostalCode'/2
	    (_cor0, [])
'dec_PostalCode'/2 =
    %% Line 10956
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 10957
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 10958
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor18> when 'true' ->
		      Tlv1
		end
	    in  %% Line 10958
		case _cor4 of
		  %% Line 10961
		  <{18,V1}> when 'true' ->
		      let <Val1> =
			  %% Line 10963
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <C1> =
			      %% Line 10964
			      call 'erlang':'byte_size'
				  (Val1)
			  in  %% Line 10965
			      case <> of
				<>
				    when let <_cor7> =
					  call 'erlang':'=<'
					      (1, C1)
				      in  let <_cor8> =
					      call 'erlang':'=<'
						  (C1, 16)
					  in  call 'erlang':'and'
						  (_cor7, _cor8) ->
				    let <_cor9> =
					%% Line 10966
					call 'erlang':'binary_to_list'
					    (Val1)
				    in  {'numeric-code',_cor9}
				%% Line 10967
				<> when 'true' ->
				    %% Line 10968
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 10974
		  <{19,V1}> when 'true' ->
		      let <Val2> =
			  %% Line 10976
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <C2> =
			      %% Line 10977
			      call 'erlang':'byte_size'
				  (Val2)
			  in  %% Line 10978
			      case <> of
				<>
				    when let <_cor12> =
					  call 'erlang':'=<'
					      (1, C2)
				      in  let <_cor13> =
					      call 'erlang':'=<'
						  (C2, 16)
					  in  call 'erlang':'and'
						  (_cor12, _cor13) ->
				    let <_cor14> =
					%% Line 10979
					call 'erlang':'binary_to_list'
					    (Val2)
				    in  {'printable-code',_cor14}
				%% Line 10980
				<> when 'true' ->
				    %% Line 10981
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 10985
		  <Else> when 'true' ->
		      %% Line 10986
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'enc_PhysicalDeliveryCountryName'/1 =
    %% Line 10994
    fun (_cor0) ->
	%% Line 10995
	apply 'enc_PhysicalDeliveryCountryName'/2
	    (_cor0, [])
'enc_PhysicalDeliveryCountryName'/2 =
    %% Line 10997
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 10998
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 10999
	      <'x121-dcc-code'> when 'true' ->
		  let <_cor2> =
		      %% Line 11000
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 11000
		      apply 'encode_restricted_string'/2
			  (_cor2, [#{#<18>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 11001
	      <'iso-3166-alpha2-code'> when 'true' ->
		  let <_cor3> =
		      %% Line 11002
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 11002
		      apply 'encode_restricted_string'/2
			  (_cor3, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 11003
	      <Else> when 'true' ->
		  %% Line 11004
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 10998
	    case _cor5 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 11007
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor6})
		-| ['compiler_generated'] )
	    end
'dec_PhysicalDeliveryCountryName'/1 =
    %% Line 11012
    fun (_cor0) ->
	%% Line 11013
	apply 'dec_PhysicalDeliveryCountryName'/2
	    (_cor0, [])
'dec_PhysicalDeliveryCountryName'/2 =
    %% Line 11015
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 11016
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 11017
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor14> when 'true' ->
		      Tlv1
		end
	    in  %% Line 11017
		case _cor4 of
		  %% Line 11020
		  <{18,V1}> when 'true' ->
		      let <Val1> =
			  %% Line 11022
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <C1> =
			      %% Line 11023
			      call 'erlang':'byte_size'
				  (Val1)
			  in  %% Line 11024
			      case <> of
				<>
				    when call 'erlang':'=:='
					  (C1,
					   3) ->
				    let <_cor7> =
					%% Line 11025
					call 'erlang':'binary_to_list'
					    (Val1)
				    in  {'x121-dcc-code',_cor7}
				%% Line 11026
				<> when 'true' ->
				    %% Line 11027
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 11033
		  <{19,V1}> when 'true' ->
		      let <Val2> =
			  %% Line 11035
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <C2> =
			      %% Line 11036
			      call 'erlang':'byte_size'
				  (Val2)
			  in  %% Line 11037
			      case <> of
				<>
				    when call 'erlang':'=:='
					  (C2,
					   2) ->
				    let <_cor10> =
					%% Line 11038
					call 'erlang':'binary_to_list'
					    (Val2)
				    in  {'iso-3166-alpha2-code',_cor10}
				%% Line 11039
				<> when 'true' ->
				    %% Line 11040
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 11044
		  <Else> when 'true' ->
		      %% Line 11045
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'enc_PDSName'/1 =
    %% Line 11053
    fun (_cor0) ->
	%% Line 11054
	apply 'enc_PDSName'/2
	    (_cor0, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#])
'enc_PDSName'/2 =
    %% Line 11056
    fun (_cor1,_cor0) ->
	%% Line 11057
	apply 'encode_restricted_string'/2
	    (_cor1, _cor0)
'dec_PDSName'/1 =
    %% Line 11060
    fun (_cor0) ->
	%% Line 11061
	apply 'dec_PDSName'/2
	    (_cor0, [19])
'dec_PDSName'/2 =
    %% Line 11063
    fun (_cor1,_cor0) ->
	let <Val1> =
	    %% Line 11065
	    apply 'decode_restricted_string'/2
		(_cor1, _cor0)
	in  let <C1> =
		%% Line 11066
		call 'erlang':'byte_size'
		    (Val1)
	    in  %% Line 11067
		case <> of
		  <>
		      when let <_cor4> =
			    call 'erlang':'=<'
				(1, C1)
			in  let <_cor5> =
				call 'erlang':'=<'
				    (C1, 16)
			    in  call 'erlang':'and'
				    (_cor4, _cor5) ->
		      %% Line 11068
		      call 'erlang':'binary_to_list'
			  (Val1)
		  %% Line 11069
		  <> when 'true' ->
		      %% Line 11070
		      call 'erlang':'exit'
			  ({'error',{'asn1','bad_range'}})
		end
'enc_TeletexOrganizationalUnitName'/1 =
    %% Line 11079
    fun (_cor0) ->
	%% Line 11080
	apply 'enc_TeletexOrganizationalUnitName'/2
	    (_cor0, [#{#<20>(8,1,'integer',['unsigned'|['big']])}#])
'enc_TeletexOrganizationalUnitName'/2 =
    %% Line 11082
    fun (_cor1,_cor0) ->
	%% Line 11083
	apply 'encode_restricted_string'/2
	    (_cor1, _cor0)
'dec_TeletexOrganizationalUnitName'/1 =
    %% Line 11086
    fun (_cor0) ->
	%% Line 11087
	apply 'dec_TeletexOrganizationalUnitName'/2
	    (_cor0, [20])
'dec_TeletexOrganizationalUnitName'/2 =
    %% Line 11089
    fun (_cor1,_cor0) ->
	let <Val1> =
	    %% Line 11091
	    apply 'decode_restricted_string'/2
		(_cor1, _cor0)
	in  let <C1> =
		%% Line 11092
		call 'erlang':'byte_size'
		    (Val1)
	    in  %% Line 11093
		case <> of
		  <>
		      when let <_cor4> =
			    call 'erlang':'=<'
				(1, C1)
			in  let <_cor5> =
				call 'erlang':'=<'
				    (C1, 32)
			    in  call 'erlang':'and'
				    (_cor4, _cor5) ->
		      %% Line 11094
		      call 'erlang':'binary_to_list'
			  (Val1)
		  %% Line 11095
		  <> when 'true' ->
		      %% Line 11096
		      call 'erlang':'exit'
			  ({'error',{'asn1','bad_range'}})
		end
'enc_TeletexOrganizationalUnitNames'/1 =
    %% Line 11105
    fun (_cor0) ->
	%% Line 11106
	apply 'enc_TeletexOrganizationalUnitNames'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_TeletexOrganizationalUnitNames'/2 =
    %% Line 11108
    fun (_cor1,_cor0) ->
	%% Line 11109
	case apply 'enc_TeletexOrganizationalUnitNames_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 11110
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_TeletexOrganizationalUnitNames_components'/3 =
    %% Line 11112
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 11113
		  call 'lists':'reverse'
		      (AccBytes)
	      in  %% Line 11113
		  {_cor3,AccLen}
	  %% Line 11115
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 11116
	      case apply 'encode_restricted_string'/2
		       (H, [#{#<20>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 11117
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 11117
			apply 'enc_TeletexOrganizationalUnitNames_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_TeletexOrganizationalUnitNames_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_TeletexOrganizationalUnitNames'/1 =
    %% Line 11121
    fun (_cor0) ->
	%% Line 11122
	apply 'dec_TeletexOrganizationalUnitNames'/2
	    (_cor0, [16])
'dec_TeletexOrganizationalUnitNames'/2 =
    %% Line 11124
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 11128
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 11129
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[%% Line 11137
			      V1|_cor4]> when 'true' ->
				let <Val1> =
				    %% Line 11130
				    apply 'decode_restricted_string'/2
					(V1, [20])
				in  let <C1> =
					%% Line 11131
					call 'erlang':'byte_size'
					    (Val1)
				    in  %% Line 11132
					case <> of
					  <>
					      when let <_cor8> =
						    call 'erlang':'=<'
							(1, C1)
						in  let <_cor9> =
							call 'erlang':'=<'
							    (C1, 32)
						    in  call 'erlang':'and'
							    (_cor8, _cor9) ->
					      let <_cor10> =
						  %% Line 11133
						  call 'erlang':'binary_to_list'
						      (Val1)
					      in  let <_cor11> =
						      %% Line 11137
						      apply 'lc$^0'/1
							  (_cor4)
						  in  ( [_cor10|_cor11]
							-| ['compiler_generated'] )
					  %% Line 11134
					  <> when 'true' ->
					      %% Line 11135
					      call 'erlang':'exit'
						  ({'error',{'asn1','bad_range'}})
					end
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (%% Line 11137
		       Tlv1)
	      -| ['list_comprehension'] )
'enc_TeletexPersonalName'/1 =
    %% Line 11145
    fun (_cor0) ->
	%% Line 11146
	apply 'enc_TeletexPersonalName'/2
	    (_cor0, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
'enc_TeletexPersonalName'/2 =
    %% Line 11148
    fun (_cor1,_cor0) ->
	%% Line 11149
	case _cor1 of
	  <{_cor19,Cindex1,Cindex2,Cindex3,Cindex4}> when 'true' ->
	      %% Line 11154
	      case apply 'encode_restricted_string'/2
		       (Cindex1, [#{#<128>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    let <_cor5> =
			%% Line 11159
			case Cindex2 of
			  %% Line 11160
			  <'asn1_NOVALUE'> when 'true' ->
			      {#{}#,0}
			  %% Line 11161
			  <_cor20> when 'true' ->
			      %% Line 11162
			      apply 'encode_restricted_string'/2
				  (Cindex2, [#{#<129>(8,1,'integer',['unsigned'|['big']])}#])
			end
		    in  %% Line 11159
			case _cor5 of
			  <{EncBytes2,EncLen2}> when 'true' ->
			      let <_cor8> =
				  %% Line 11168
				  case Cindex3 of
				    %% Line 11169
				    <'asn1_NOVALUE'> when 'true' ->
					{#{}#,0}
				    %% Line 11170
				    <_cor21> when 'true' ->
					%% Line 11171
					apply 'encode_restricted_string'/2
					    (Cindex3, [#{#<130>(8,1,'integer',['unsigned'|['big']])}#])
				  end
			      in  %% Line 11168
				  case _cor8 of
				    <{EncBytes3,EncLen3}> when 'true' ->
					let <_cor11> =
					    %% Line 11177
					    case Cindex4 of
					      %% Line 11178
					      <'asn1_NOVALUE'> when 'true' ->
						  {#{}#,0}
					      %% Line 11179
					      <_cor22> when 'true' ->
						  %% Line 11180
						  apply 'encode_restricted_string'/2
						      (Cindex4, [#{#<131>(8,1,'integer',['unsigned'|['big']])}#])
					    end
					in  %% Line 11177
					    case _cor11 of
					      <{EncBytes4,EncLen4}> when 'true' ->
						  let <BytesSoFar> =
						      %% Line 11183
						      [EncBytes1|[EncBytes2|[EncBytes3|[EncBytes4|[]]]]]
						  in  let <_cor14> =
							  %% Line 11184
							  call 'erlang':'+'
							      (EncLen1, EncLen2)
						      in  let <_cor15> =
							      %% Line 11184
							      call 'erlang':'+'
								  (_cor14, EncLen3)
							  in  let <LenSoFar> =
								  %% Line 11184
								  call 'erlang':'+'
								      (_cor15, EncLen4)
							      in  %% Line 11185
								  apply 'encode_tags'/3
								      (_cor0, BytesSoFar, LenSoFar)
					      ( <_cor12> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor12})
						-| ['compiler_generated'] )
					    end
				    ( <_cor9> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor9})
				      -| ['compiler_generated'] )
				  end
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_TeletexPersonalName'/1 =
    %% Line 11188
    fun (_cor0) ->
	%% Line 11189
	apply 'dec_TeletexPersonalName'/2
	    (_cor0, [17])
'dec_TeletexPersonalName'/2 =
    %% Line 11191
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 11192
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <SetFun> =
		%% Line 11193
		( fun (_cor4) ->
		      %% Line 11194
		      case _cor4 of
			%% Line 11196
			<TTlv = {131072,_cor55}> when 'true' ->
			    %% Line 11197
			    {1,TTlv}
			%% Line 11199
			<TTlv = {131073,_cor56}> when 'true' ->
			    %% Line 11200
			    {2,TTlv}
			%% Line 11202
			<TTlv = {131074,_cor57}> when 'true' ->
			    %% Line 11203
			    {3,TTlv}
			%% Line 11205
			<TTlv = {131075,_cor58}> when 'true' ->
			    %% Line 11206
			    {4,TTlv}
			%% Line 11207
			<Else> when 'true' ->
			    %% Line 11208
			    {5,Else}
		      end
		  -| [{'id',{0,0,'-dec_TeletexPersonalName/2-fun-0-'}}] )
	    in  let <_cor12> =
		    %% Line 11211
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor9) ->
				  case _cor9 of
				    <[TempTlv|_cor8]> when 'true' ->
					let <_cor10> =
					    apply SetFun
						(TempTlv)
					in  let <_cor11> =
						apply 'lc$^0'/1
						    (_cor8)
					    in  ( [_cor10|_cor11]
						  -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor9> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor9})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lc$^0'/1
			      (Tlv1)
		      -| ['list_comprehension'] )
		in  let <_cor19> =
			%% Line 11212
			( letrec
			      'lc$^1'/1 =
				  fun (_cor17) ->
				      case _cor17 of
					<[{_cor59,Stlv}|_cor15]> when 'true' ->
					    let <_cor18> =
						apply 'lc$^1'/1
						    (_cor15)
					    in  ( [Stlv|_cor18]
						  -| ['compiler_generated'] )
					( <[_cor14|_cor15]> when 'true' ->
					      apply 'lc$^1'/1
						  (_cor15)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor17> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor17})
						-| [{'function_name',{'lc$^1',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  let <_cor16> =
				  call 'lists':'sort'
				      (_cor12)
			      in  apply 'lc$^1'/1
				      (_cor16)
			  -| ['list_comprehension'] )
		    in  %% Line 11217
			case _cor19 of
			  <[V1|Tlv3]> when 'true' ->
			      let <Val1> =
				  %% Line 11219
				  apply 'decode_restricted_string'/2
				      (V1, [131072])
			      in  let <C1> =
				      %% Line 11220
				      call 'erlang':'byte_size'
					  (Val1)
				  in  %% Line 11221
				      case <> of
					<>
					    when let <_cor24> =
						  call 'erlang':'=<'
						      (1, C1)
					      in  let <_cor25> =
						      call 'erlang':'=<'
							  (C1, 40)
						  in  call 'erlang':'and'
							  (_cor24, _cor25) ->
					    let <_cor26> =
						%% Line 11222
						call 'erlang':'binary_to_list'
						    (Val1)
					    in  let <Term2,Tlv4> =
						    %% Line 11231
						    case Tlv3 of
						      %% Line 11232
						      <[{131073,V2}|TempTlv4]> when 'true' ->
							  let <Val2> =
							      %% Line 11234
							      apply 'decode_restricted_string'/2
								  (V2, [])
							  in  let <C2> =
								  %% Line 11235
								  call 'erlang':'byte_size'
								      (Val2)
							      in  %% Line 11236
								  case <> of
								    <>
									when let <_cor30> =
									      call 'erlang':'=<'
										  (1, C2)
									  in  let <_cor31> =
										  call 'erlang':'=<'
										      (C2, 16)
									      in  call 'erlang':'and'
										      (_cor30, _cor31) ->
									let <_cor32> =
									    %% Line 11237
									    call 'erlang':'binary_to_list'
										(Val2)
									in  <_cor32,%% Line 11241
										    TempTlv4>
								    %% Line 11238
								    <> when 'true' ->
									%% Line 11239
									call 'erlang':'exit'
									    ({'error',{'asn1','bad_range'}})
								  end
						      %% Line 11242
						      <_cor60> when 'true' ->
							  %% Line 11243
							  <'asn1_NOVALUE',Tlv3>
						    end
						in  let <Term3,Tlv5> =
							%% Line 11249
							case Tlv4 of
							  %% Line 11250
							  <[{131074,V3}|TempTlv5]> when 'true' ->
							      let <Val3> =
								  %% Line 11252
								  apply 'decode_restricted_string'/2
								      (V3, [])
							      in  let <C3> =
								      %% Line 11253
								      call 'erlang':'byte_size'
									  (Val3)
								  in  %% Line 11254
								      case <> of
									<>
									    when let <_cor38> =
										  call 'erlang':'=<'
										      (1, C3)
									      in  let <_cor39> =
										      call 'erlang':'=<'
											  (C3, 5)
										  in  call 'erlang':'and'
											  (_cor38, _cor39) ->
									    let <_cor40> =
										%% Line 11255
										call 'erlang':'binary_to_list'
										    (Val3)
									    in  <_cor40,%% Line 11259
											TempTlv5>
									%% Line 11256
									<> when 'true' ->
									    %% Line 11257
									    call 'erlang':'exit'
										({'error',{'asn1','bad_range'}})
								      end
							  %% Line 11260
							  <_cor61> when 'true' ->
							      %% Line 11261
							      <'asn1_NOVALUE',Tlv4>
							end
						    in  let <Term4,Tlv6> =
							    %% Line 11267
							    case Tlv5 of
							      %% Line 11268
							      <[{131075,V4}|TempTlv6]> when 'true' ->
								  let <Val4> =
								      %% Line 11270
								      apply 'decode_restricted_string'/2
									  (V4, [])
								  in  let <C4> =
									  %% Line 11271
									  call 'erlang':'byte_size'
									      (Val4)
								      in  %% Line 11272
									  case <> of
									    <>
										when let <_cor46> =
										      call 'erlang':'=<'
											  (1, C4)
										  in  let <_cor47> =
											  call 'erlang':'=<'
											      (C4, 3)
										      in  call 'erlang':'and'
											      (_cor46, _cor47) ->
										let <_cor48> =
										    %% Line 11273
										    call 'erlang':'binary_to_list'
											(Val4)
										in  <_cor48,%% Line 11277
											    TempTlv6>
									    %% Line 11274
									    <> when 'true' ->
										%% Line 11275
										call 'erlang':'exit'
										    ({'error',{'asn1','bad_range'}})
									  end
							      %% Line 11278
							      <_cor62> when 'true' ->
								  %% Line 11279
								  <'asn1_NOVALUE',Tlv5>
							    end
							in  do  %% Line 11282
								case Tlv6 of
								  %% Line 11283
								  <[]> when 'true' ->
								      'ok'
								  %% Line 11283
								  <_cor63> when 'true' ->
								      call 'erlang':'exit'
									  ({'error',{'asn1',{'unexpected',Tlv6}}})
								end
								%% Line 11285
								{'TeletexPersonalName',_cor26,Term2,Term3,Term4}
					%% Line 11223
					<> when 'true' ->
					    %% Line 11224
					    call 'erlang':'exit'
						({'error',{'asn1','bad_range'}})
				      end
			  ( <_cor21> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor21})
			    -| ['compiler_generated'] )
			end
'enc_TeletexOrganizationName'/1 =
    %% Line 11291
    fun (_cor0) ->
	%% Line 11292
	apply 'enc_TeletexOrganizationName'/2
	    (_cor0, [#{#<20>(8,1,'integer',['unsigned'|['big']])}#])
'enc_TeletexOrganizationName'/2 =
    %% Line 11294
    fun (_cor1,_cor0) ->
	%% Line 11295
	apply 'encode_restricted_string'/2
	    (_cor1, _cor0)
'dec_TeletexOrganizationName'/1 =
    %% Line 11298
    fun (_cor0) ->
	%% Line 11299
	apply 'dec_TeletexOrganizationName'/2
	    (_cor0, [20])
'dec_TeletexOrganizationName'/2 =
    %% Line 11301
    fun (_cor1,_cor0) ->
	let <Val1> =
	    %% Line 11303
	    apply 'decode_restricted_string'/2
		(_cor1, _cor0)
	in  let <C1> =
		%% Line 11304
		call 'erlang':'byte_size'
		    (Val1)
	    in  %% Line 11305
		case <> of
		  <>
		      when let <_cor4> =
			    call 'erlang':'=<'
				(1, C1)
			in  let <_cor5> =
				call 'erlang':'=<'
				    (C1, 64)
			    in  call 'erlang':'and'
				    (_cor4, _cor5) ->
		      %% Line 11306
		      call 'erlang':'binary_to_list'
			  (Val1)
		  %% Line 11307
		  <> when 'true' ->
		      %% Line 11308
		      call 'erlang':'exit'
			  ({'error',{'asn1','bad_range'}})
		end
'enc_TeletexCommonName'/1 =
    %% Line 11317
    fun (_cor0) ->
	%% Line 11318
	apply 'enc_TeletexCommonName'/2
	    (_cor0, [#{#<20>(8,1,'integer',['unsigned'|['big']])}#])
'enc_TeletexCommonName'/2 =
    %% Line 11320
    fun (_cor1,_cor0) ->
	%% Line 11321
	apply 'encode_restricted_string'/2
	    (_cor1, _cor0)
'dec_TeletexCommonName'/1 =
    %% Line 11324
    fun (_cor0) ->
	%% Line 11325
	apply 'dec_TeletexCommonName'/2
	    (_cor0, [20])
'dec_TeletexCommonName'/2 =
    %% Line 11327
    fun (_cor1,_cor0) ->
	let <Val1> =
	    %% Line 11329
	    apply 'decode_restricted_string'/2
		(_cor1, _cor0)
	in  let <C1> =
		%% Line 11330
		call 'erlang':'byte_size'
		    (Val1)
	    in  %% Line 11331
		case <> of
		  <>
		      when let <_cor4> =
			    call 'erlang':'=<'
				(1, C1)
			in  let <_cor5> =
				call 'erlang':'=<'
				    (C1, 64)
			    in  call 'erlang':'and'
				    (_cor4, _cor5) ->
		      %% Line 11332
		      call 'erlang':'binary_to_list'
			  (Val1)
		  %% Line 11333
		  <> when 'true' ->
		      %% Line 11334
		      call 'erlang':'exit'
			  ({'error',{'asn1','bad_range'}})
		end
'enc_CommonName'/1 =
    %% Line 11343
    fun (_cor0) ->
	%% Line 11344
	apply 'enc_CommonName'/2
	    (_cor0, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#])
'enc_CommonName'/2 =
    %% Line 11346
    fun (_cor1,_cor0) ->
	%% Line 11347
	apply 'encode_restricted_string'/2
	    (_cor1, _cor0)
'dec_CommonName'/1 =
    %% Line 11350
    fun (_cor0) ->
	%% Line 11351
	apply 'dec_CommonName'/2
	    (_cor0, [19])
'dec_CommonName'/2 =
    %% Line 11353
    fun (_cor1,_cor0) ->
	let <Val1> =
	    %% Line 11355
	    apply 'decode_restricted_string'/2
		(_cor1, _cor0)
	in  let <C1> =
		%% Line 11356
		call 'erlang':'byte_size'
		    (Val1)
	    in  %% Line 11357
		case <> of
		  <>
		      when let <_cor4> =
			    call 'erlang':'=<'
				(1, C1)
			in  let <_cor5> =
				call 'erlang':'=<'
				    (C1, 64)
			    in  call 'erlang':'and'
				    (_cor4, _cor5) ->
		      %% Line 11358
		      call 'erlang':'binary_to_list'
			  (Val1)
		  %% Line 11359
		  <> when 'true' ->
		      %% Line 11360
		      call 'erlang':'exit'
			  ({'error',{'asn1','bad_range'}})
		end
'enc_ExtensionAttribute'/1 =
    %% Line 11369
    fun (_cor0) ->
	%% Line 11370
	apply 'enc_ExtensionAttribute'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_ExtensionAttribute'/2 =
    %% Line 11372
    fun (_cor1,_cor0) ->
	%% Line 11373
	case _cor1 of
	  <{_cor9,Cindex1,Cindex2}> when 'true' ->
	      %% Line 11378
	      case apply 'encode_integer'/2
		       (Cindex1, [#{#<128>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 11383
		    case apply 'encode_open_type'/2
			     (Cindex2, [#{#<161>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <BytesSoFar> =
			      %% Line 11385
			      [EncBytes1|[EncBytes2|[]]]
			  in  let <LenSoFar> =
				  %% Line 11386
				  call 'erlang':'+'
				      (EncLen1, EncLen2)
			      in  %% Line 11387
				  apply 'encode_tags'/3
				      (_cor0, BytesSoFar, LenSoFar)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_ExtensionAttribute'/1 =
    %% Line 11390
    fun (_cor0) ->
	%% Line 11391
	apply 'dec_ExtensionAttribute'/2
	    (_cor0, [16])
'dec_ExtensionAttribute'/2 =
    %% Line 11393
    fun (_cor1,_cor0) ->
	%% Line 11402
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Val1> =
		  %% Line 11404
		  apply 'decode_integer'/2
		      (V1, [131072])
	      in  %% Line 11405
		  case <> of
		    <>
			when let <_cor5> =
			      call 'erlang':'=<'
				  (0, Val1)
			  in  let <_cor6> =
				  call 'erlang':'=<'
				      (Val1, 256)
			      in  call 'erlang':'and'
				      (_cor5, _cor6) ->
			%% Line 11415
			case Tlv2 of
			  <[V2|Tlv3]> when 'true' ->
			      let <Term2> =
				  %% Line 11416
				  apply 'decode_open_type_as_binary'/2
				      (V2, [131073])
			      in  do  %% Line 11418
				      case Tlv3 of
					%% Line 11419
					<[]> when 'true' ->
					    'ok'
					%% Line 11419
					<_cor14> when 'true' ->
					    call 'erlang':'exit'
						({'error',{'asn1',{'unexpected',Tlv3}}})
				      end
				      %% Line 11421
				      {'ExtensionAttribute',Val1,Term2}
			  ( <_cor9> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor9})
			    -| ['compiler_generated'] )
			end
		    %% Line 11407
		    <> when 'true' ->
			%% Line 11408
			call 'erlang':'exit'
			    ({'error',{'asn1','bad_range'}})
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_ExtensionAttributes'/1 =
    %% Line 11428
    fun (_cor0) ->
	%% Line 11429
	apply 'enc_ExtensionAttributes'/2
	    (_cor0, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
'enc_ExtensionAttributes'/2 =
    %% Line 11431
    fun (_cor1,_cor0) ->
	%% Line 11432
	case apply 'enc_ExtensionAttributes_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 11433
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_ExtensionAttributes_components'/3 =
    %% Line 11435
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 11436
		  apply 'dynamicsort_SETOF'/1
		      (AccBytes)
	      in  %% Line 11436
		  {_cor3,AccLen}
	  %% Line 11438
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 11439
	      case apply 'enc_ExtensionAttribute'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 11440
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 11440
			apply 'enc_ExtensionAttributes_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_ExtensionAttributes_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_ExtensionAttributes'/1 =
    %% Line 11444
    fun (_cor0) ->
	%% Line 11445
	apply 'dec_ExtensionAttributes'/2
	    (_cor0, [17])
'dec_ExtensionAttributes'/2 =
    %% Line 11447
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 11451
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 11452
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_ExtensionAttribute'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'enc_BuiltInDomainDefinedAttribute'/1 =
    %% Line 11460
    fun (_cor0) ->
	%% Line 11461
	apply 'enc_BuiltInDomainDefinedAttribute'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_BuiltInDomainDefinedAttribute'/2 =
    %% Line 11463
    fun (_cor1,_cor0) ->
	%% Line 11464
	case _cor1 of
	  <{_cor9,Cindex1,Cindex2}> when 'true' ->
	      %% Line 11469
	      case apply 'encode_restricted_string'/2
		       (Cindex1, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 11474
		    case apply 'encode_restricted_string'/2
			     (Cindex2, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <BytesSoFar> =
			      %% Line 11476
			      [EncBytes1|[EncBytes2|[]]]
			  in  let <LenSoFar> =
				  %% Line 11477
				  call 'erlang':'+'
				      (EncLen1, EncLen2)
			      in  %% Line 11478
				  apply 'encode_tags'/3
				      (_cor0, BytesSoFar, LenSoFar)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_BuiltInDomainDefinedAttribute'/1 =
    %% Line 11481
    fun (_cor0) ->
	%% Line 11482
	apply 'dec_BuiltInDomainDefinedAttribute'/2
	    (_cor0, [16])
'dec_BuiltInDomainDefinedAttribute'/2 =
    %% Line 11484
    fun (_cor1,_cor0) ->
	%% Line 11493
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Val1> =
		  %% Line 11495
		  apply 'decode_restricted_string'/2
		      (V1, [19])
	      in  let <C1> =
		      %% Line 11496
		      call 'erlang':'byte_size'
			  (Val1)
		  in  %% Line 11497
		      case <> of
			<>
			    when let <_cor6> =
				  call 'erlang':'=<'
				      (1, C1)
			      in  let <_cor7> =
				      call 'erlang':'=<'
					  (C1, 8)
				  in  call 'erlang':'and'
					  (_cor6, _cor7) ->
			    let <_cor8> =
				%% Line 11498
				call 'erlang':'binary_to_list'
				    (Val1)
			    in  %% Line 11507
				case Tlv2 of
				  <[V2|Tlv3]> when 'true' ->
				      let <Val2> =
					  %% Line 11509
					  apply 'decode_restricted_string'/2
					      (V2, [19])
				      in  let <C2> =
					      %% Line 11510
					      call 'erlang':'byte_size'
						  (Val2)
					  in  %% Line 11511
					      case <> of
						<>
						    when let <_cor13> =
							  call 'erlang':'=<'
							      (1, C2)
						      in  let <_cor14> =
							      call 'erlang':'=<'
								  (C2, 128)
							  in  call 'erlang':'and'
								  (_cor13, _cor14) ->
						    let <_cor15> =
							%% Line 11512
							call 'erlang':'binary_to_list'
							    (Val2)
						    in  do  %% Line 11518
							    case Tlv3 of
							      %% Line 11519
							      <[]> when 'true' ->
								  'ok'
							      %% Line 11519
							      <_cor20> when 'true' ->
								  call 'erlang':'exit'
								      ({'error',{'asn1',{'unexpected',Tlv3}}})
							    end
							    %% Line 11521
							    {'BuiltInDomainDefinedAttribute',_cor8,_cor15}
						%% Line 11513
						<> when 'true' ->
						    %% Line 11514
						    call 'erlang':'exit'
							({'error',{'asn1','bad_range'}})
					      end
				  ( <_cor10> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor10})
				    -| ['compiler_generated'] )
				end
			%% Line 11499
			<> when 'true' ->
			    %% Line 11500
			    call 'erlang':'exit'
				({'error',{'asn1','bad_range'}})
		      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_BuiltInDomainDefinedAttributes'/1 =
    %% Line 11528
    fun (_cor0) ->
	%% Line 11529
	apply 'enc_BuiltInDomainDefinedAttributes'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_BuiltInDomainDefinedAttributes'/2 =
    %% Line 11531
    fun (_cor1,_cor0) ->
	%% Line 11532
	case apply 'enc_BuiltInDomainDefinedAttributes_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 11533
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_BuiltInDomainDefinedAttributes_components'/3 =
    %% Line 11535
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 11536
		  call 'lists':'reverse'
		      (AccBytes)
	      in  %% Line 11536
		  {_cor3,AccLen}
	  %% Line 11538
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 11539
	      case apply 'enc_BuiltInDomainDefinedAttribute'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 11540
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 11540
			apply 'enc_BuiltInDomainDefinedAttributes_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_BuiltInDomainDefinedAttributes_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_BuiltInDomainDefinedAttributes'/1 =
    %% Line 11544
    fun (_cor0) ->
	%% Line 11545
	apply 'dec_BuiltInDomainDefinedAttributes'/2
	    (_cor0, [16])
'dec_BuiltInDomainDefinedAttributes'/2 =
    %% Line 11547
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 11551
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 11552
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_BuiltInDomainDefinedAttribute'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'enc_OrganizationalUnitName'/1 =
    %% Line 11560
    fun (_cor0) ->
	%% Line 11561
	apply 'enc_OrganizationalUnitName'/2
	    (_cor0, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#])
'enc_OrganizationalUnitName'/2 =
    %% Line 11563
    fun (_cor1,_cor0) ->
	%% Line 11564
	apply 'encode_restricted_string'/2
	    (_cor1, _cor0)
'dec_OrganizationalUnitName'/1 =
    %% Line 11567
    fun (_cor0) ->
	%% Line 11568
	apply 'dec_OrganizationalUnitName'/2
	    (_cor0, [19])
'dec_OrganizationalUnitName'/2 =
    %% Line 11570
    fun (_cor1,_cor0) ->
	let <Val1> =
	    %% Line 11572
	    apply 'decode_restricted_string'/2
		(_cor1, _cor0)
	in  let <C1> =
		%% Line 11573
		call 'erlang':'byte_size'
		    (Val1)
	    in  %% Line 11574
		case <> of
		  <>
		      when let <_cor4> =
			    call 'erlang':'=<'
				(1, C1)
			in  let <_cor5> =
				call 'erlang':'=<'
				    (C1, 32)
			    in  call 'erlang':'and'
				    (_cor4, _cor5) ->
		      %% Line 11575
		      call 'erlang':'binary_to_list'
			  (Val1)
		  %% Line 11576
		  <> when 'true' ->
		      %% Line 11577
		      call 'erlang':'exit'
			  ({'error',{'asn1','bad_range'}})
		end
'enc_OrganizationalUnitNames'/1 =
    %% Line 11586
    fun (_cor0) ->
	%% Line 11587
	apply 'enc_OrganizationalUnitNames'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_OrganizationalUnitNames'/2 =
    %% Line 11589
    fun (_cor1,_cor0) ->
	%% Line 11590
	case apply 'enc_OrganizationalUnitNames_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 11591
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_OrganizationalUnitNames_components'/3 =
    %% Line 11593
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 11594
		  call 'lists':'reverse'
		      (AccBytes)
	      in  %% Line 11594
		  {_cor3,AccLen}
	  %% Line 11596
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 11597
	      case apply 'encode_restricted_string'/2
		       (H, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 11598
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 11598
			apply 'enc_OrganizationalUnitNames_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_OrganizationalUnitNames_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_OrganizationalUnitNames'/1 =
    %% Line 11602
    fun (_cor0) ->
	%% Line 11603
	apply 'dec_OrganizationalUnitNames'/2
	    (_cor0, [16])
'dec_OrganizationalUnitNames'/2 =
    %% Line 11605
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 11609
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 11610
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[%% Line 11618
			      V1|_cor4]> when 'true' ->
				let <Val1> =
				    %% Line 11611
				    apply 'decode_restricted_string'/2
					(V1, [19])
				in  let <C1> =
					%% Line 11612
					call 'erlang':'byte_size'
					    (Val1)
				    in  %% Line 11613
					case <> of
					  <>
					      when let <_cor8> =
						    call 'erlang':'=<'
							(1, C1)
						in  let <_cor9> =
							call 'erlang':'=<'
							    (C1, 32)
						    in  call 'erlang':'and'
							    (_cor8, _cor9) ->
					      let <_cor10> =
						  %% Line 11614
						  call 'erlang':'binary_to_list'
						      (Val1)
					      in  let <_cor11> =
						      %% Line 11618
						      apply 'lc$^0'/1
							  (_cor4)
						  in  ( [_cor10|_cor11]
							-| ['compiler_generated'] )
					  %% Line 11615
					  <> when 'true' ->
					      %% Line 11616
					      call 'erlang':'exit'
						  ({'error',{'asn1','bad_range'}})
					end
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (%% Line 11618
		       Tlv1)
	      -| ['list_comprehension'] )
'enc_PersonalName'/1 =
    %% Line 11626
    fun (_cor0) ->
	%% Line 11627
	apply 'enc_PersonalName'/2
	    (_cor0, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
'enc_PersonalName'/2 =
    %% Line 11629
    fun (_cor1,_cor0) ->
	%% Line 11630
	case _cor1 of
	  <{_cor19,Cindex1,Cindex2,Cindex3,Cindex4}> when 'true' ->
	      %% Line 11635
	      case apply 'encode_restricted_string'/2
		       (Cindex1, [#{#<128>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    let <_cor5> =
			%% Line 11640
			case Cindex2 of
			  %% Line 11641
			  <'asn1_NOVALUE'> when 'true' ->
			      {#{}#,0}
			  %% Line 11642
			  <_cor20> when 'true' ->
			      %% Line 11643
			      apply 'encode_restricted_string'/2
				  (Cindex2, [#{#<129>(8,1,'integer',['unsigned'|['big']])}#])
			end
		    in  %% Line 11640
			case _cor5 of
			  <{EncBytes2,EncLen2}> when 'true' ->
			      let <_cor8> =
				  %% Line 11649
				  case Cindex3 of
				    %% Line 11650
				    <'asn1_NOVALUE'> when 'true' ->
					{#{}#,0}
				    %% Line 11651
				    <_cor21> when 'true' ->
					%% Line 11652
					apply 'encode_restricted_string'/2
					    (Cindex3, [#{#<130>(8,1,'integer',['unsigned'|['big']])}#])
				  end
			      in  %% Line 11649
				  case _cor8 of
				    <{EncBytes3,EncLen3}> when 'true' ->
					let <_cor11> =
					    %% Line 11658
					    case Cindex4 of
					      %% Line 11659
					      <'asn1_NOVALUE'> when 'true' ->
						  {#{}#,0}
					      %% Line 11660
					      <_cor22> when 'true' ->
						  %% Line 11661
						  apply 'encode_restricted_string'/2
						      (Cindex4, [#{#<131>(8,1,'integer',['unsigned'|['big']])}#])
					    end
					in  %% Line 11658
					    case _cor11 of
					      <{EncBytes4,EncLen4}> when 'true' ->
						  let <BytesSoFar> =
						      %% Line 11664
						      [EncBytes1|[EncBytes2|[EncBytes3|[EncBytes4|[]]]]]
						  in  let <_cor14> =
							  %% Line 11665
							  call 'erlang':'+'
							      (EncLen1, EncLen2)
						      in  let <_cor15> =
							      %% Line 11665
							      call 'erlang':'+'
								  (_cor14, EncLen3)
							  in  let <LenSoFar> =
								  %% Line 11665
								  call 'erlang':'+'
								      (_cor15, EncLen4)
							      in  %% Line 11666
								  apply 'encode_tags'/3
								      (_cor0, BytesSoFar, LenSoFar)
					      ( <_cor12> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor12})
						-| ['compiler_generated'] )
					    end
				    ( <_cor9> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor9})
				      -| ['compiler_generated'] )
				  end
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_PersonalName'/1 =
    %% Line 11669
    fun (_cor0) ->
	%% Line 11670
	apply 'dec_PersonalName'/2
	    (_cor0, [17])
'dec_PersonalName'/2 =
    %% Line 11672
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 11673
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <SetFun> =
		%% Line 11674
		( fun (_cor4) ->
		      %% Line 11675
		      case _cor4 of
			%% Line 11677
			<TTlv = {131072,_cor55}> when 'true' ->
			    %% Line 11678
			    {1,TTlv}
			%% Line 11680
			<TTlv = {131073,_cor56}> when 'true' ->
			    %% Line 11681
			    {2,TTlv}
			%% Line 11683
			<TTlv = {131074,_cor57}> when 'true' ->
			    %% Line 11684
			    {3,TTlv}
			%% Line 11686
			<TTlv = {131075,_cor58}> when 'true' ->
			    %% Line 11687
			    {4,TTlv}
			%% Line 11688
			<Else> when 'true' ->
			    %% Line 11689
			    {5,Else}
		      end
		  -| [{'id',{0,0,'-dec_PersonalName/2-fun-0-'}}] )
	    in  let <_cor12> =
		    %% Line 11692
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor9) ->
				  case _cor9 of
				    <[TempTlv|_cor8]> when 'true' ->
					let <_cor10> =
					    apply SetFun
						(TempTlv)
					in  let <_cor11> =
						apply 'lc$^0'/1
						    (_cor8)
					    in  ( [_cor10|_cor11]
						  -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor9> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor9})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lc$^0'/1
			      (Tlv1)
		      -| ['list_comprehension'] )
		in  let <_cor19> =
			%% Line 11693
			( letrec
			      'lc$^1'/1 =
				  fun (_cor17) ->
				      case _cor17 of
					<[{_cor59,Stlv}|_cor15]> when 'true' ->
					    let <_cor18> =
						apply 'lc$^1'/1
						    (_cor15)
					    in  ( [Stlv|_cor18]
						  -| ['compiler_generated'] )
					( <[_cor14|_cor15]> when 'true' ->
					      apply 'lc$^1'/1
						  (_cor15)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor17> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor17})
						-| [{'function_name',{'lc$^1',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  let <_cor16> =
				  call 'lists':'sort'
				      (_cor12)
			      in  apply 'lc$^1'/1
				      (_cor16)
			  -| ['list_comprehension'] )
		    in  %% Line 11698
			case _cor19 of
			  <[V1|Tlv3]> when 'true' ->
			      let <Val1> =
				  %% Line 11700
				  apply 'decode_restricted_string'/2
				      (V1, [131072])
			      in  let <C1> =
				      %% Line 11701
				      call 'erlang':'byte_size'
					  (Val1)
				  in  %% Line 11702
				      case <> of
					<>
					    when let <_cor24> =
						  call 'erlang':'=<'
						      (1, C1)
					      in  let <_cor25> =
						      call 'erlang':'=<'
							  (C1, 40)
						  in  call 'erlang':'and'
							  (_cor24, _cor25) ->
					    let <_cor26> =
						%% Line 11703
						call 'erlang':'binary_to_list'
						    (Val1)
					    in  let <Term2,Tlv4> =
						    %% Line 11712
						    case Tlv3 of
						      %% Line 11713
						      <[{131073,V2}|TempTlv4]> when 'true' ->
							  let <Val2> =
							      %% Line 11715
							      apply 'decode_restricted_string'/2
								  (V2, [])
							  in  let <C2> =
								  %% Line 11716
								  call 'erlang':'byte_size'
								      (Val2)
							      in  %% Line 11717
								  case <> of
								    <>
									when let <_cor30> =
									      call 'erlang':'=<'
										  (1, C2)
									  in  let <_cor31> =
										  call 'erlang':'=<'
										      (C2, 16)
									      in  call 'erlang':'and'
										      (_cor30, _cor31) ->
									let <_cor32> =
									    %% Line 11718
									    call 'erlang':'binary_to_list'
										(Val2)
									in  <_cor32,%% Line 11722
										    TempTlv4>
								    %% Line 11719
								    <> when 'true' ->
									%% Line 11720
									call 'erlang':'exit'
									    ({'error',{'asn1','bad_range'}})
								  end
						      %% Line 11723
						      <_cor60> when 'true' ->
							  %% Line 11724
							  <'asn1_NOVALUE',Tlv3>
						    end
						in  let <Term3,Tlv5> =
							%% Line 11730
							case Tlv4 of
							  %% Line 11731
							  <[{131074,V3}|TempTlv5]> when 'true' ->
							      let <Val3> =
								  %% Line 11733
								  apply 'decode_restricted_string'/2
								      (V3, [])
							      in  let <C3> =
								      %% Line 11734
								      call 'erlang':'byte_size'
									  (Val3)
								  in  %% Line 11735
								      case <> of
									<>
									    when let <_cor38> =
										  call 'erlang':'=<'
										      (1, C3)
									      in  let <_cor39> =
										      call 'erlang':'=<'
											  (C3, 5)
										  in  call 'erlang':'and'
											  (_cor38, _cor39) ->
									    let <_cor40> =
										%% Line 11736
										call 'erlang':'binary_to_list'
										    (Val3)
									    in  <_cor40,%% Line 11740
											TempTlv5>
									%% Line 11737
									<> when 'true' ->
									    %% Line 11738
									    call 'erlang':'exit'
										({'error',{'asn1','bad_range'}})
								      end
							  %% Line 11741
							  <_cor61> when 'true' ->
							      %% Line 11742
							      <'asn1_NOVALUE',Tlv4>
							end
						    in  let <Term4,Tlv6> =
							    %% Line 11748
							    case Tlv5 of
							      %% Line 11749
							      <[{131075,V4}|TempTlv6]> when 'true' ->
								  let <Val4> =
								      %% Line 11751
								      apply 'decode_restricted_string'/2
									  (V4, [])
								  in  let <C4> =
									  %% Line 11752
									  call 'erlang':'byte_size'
									      (Val4)
								      in  %% Line 11753
									  case <> of
									    <>
										when let <_cor46> =
										      call 'erlang':'=<'
											  (1, C4)
										  in  let <_cor47> =
											  call 'erlang':'=<'
											      (C4, 3)
										      in  call 'erlang':'and'
											      (_cor46, _cor47) ->
										let <_cor48> =
										    %% Line 11754
										    call 'erlang':'binary_to_list'
											(Val4)
										in  <_cor48,%% Line 11758
											    TempTlv6>
									    %% Line 11755
									    <> when 'true' ->
										%% Line 11756
										call 'erlang':'exit'
										    ({'error',{'asn1','bad_range'}})
									  end
							      %% Line 11759
							      <_cor62> when 'true' ->
								  %% Line 11760
								  <'asn1_NOVALUE',Tlv5>
							    end
							in  do  %% Line 11763
								case Tlv6 of
								  %% Line 11764
								  <[]> when 'true' ->
								      'ok'
								  %% Line 11764
								  <_cor63> when 'true' ->
								      call 'erlang':'exit'
									  ({'error',{'asn1',{'unexpected',Tlv6}}})
								end
								%% Line 11766
								{'PersonalName',_cor26,Term2,Term3,Term4}
					%% Line 11704
					<> when 'true' ->
					    %% Line 11705
					    call 'erlang':'exit'
						({'error',{'asn1','bad_range'}})
				      end
			  ( <_cor21> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor21})
			    -| ['compiler_generated'] )
			end
'enc_NumericUserIdentifier'/1 =
    %% Line 11772
    fun (_cor0) ->
	%% Line 11773
	apply 'enc_NumericUserIdentifier'/2
	    (_cor0, [#{#<18>(8,1,'integer',['unsigned'|['big']])}#])
'enc_NumericUserIdentifier'/2 =
    %% Line 11775
    fun (_cor1,_cor0) ->
	%% Line 11776
	apply 'encode_restricted_string'/2
	    (_cor1, _cor0)
'dec_NumericUserIdentifier'/1 =
    %% Line 11779
    fun (_cor0) ->
	%% Line 11780
	apply 'dec_NumericUserIdentifier'/2
	    (_cor0, [18])
'dec_NumericUserIdentifier'/2 =
    %% Line 11782
    fun (_cor1,_cor0) ->
	let <Val1> =
	    %% Line 11784
	    apply 'decode_restricted_string'/2
		(_cor1, _cor0)
	in  let <C1> =
		%% Line 11785
		call 'erlang':'byte_size'
		    (Val1)
	    in  %% Line 11786
		case <> of
		  <>
		      when let <_cor4> =
			    call 'erlang':'=<'
				(1, C1)
			in  let <_cor5> =
				call 'erlang':'=<'
				    (C1, 32)
			    in  call 'erlang':'and'
				    (_cor4, _cor5) ->
		      %% Line 11787
		      call 'erlang':'binary_to_list'
			  (Val1)
		  %% Line 11788
		  <> when 'true' ->
		      %% Line 11789
		      call 'erlang':'exit'
			  ({'error',{'asn1','bad_range'}})
		end
'enc_OrganizationName'/1 =
    %% Line 11798
    fun (_cor0) ->
	%% Line 11799
	apply 'enc_OrganizationName'/2
	    (_cor0, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#])
'enc_OrganizationName'/2 =
    %% Line 11801
    fun (_cor1,_cor0) ->
	%% Line 11802
	apply 'encode_restricted_string'/2
	    (_cor1, _cor0)
'dec_OrganizationName'/1 =
    %% Line 11805
    fun (_cor0) ->
	%% Line 11806
	apply 'dec_OrganizationName'/2
	    (_cor0, [19])
'dec_OrganizationName'/2 =
    %% Line 11808
    fun (_cor1,_cor0) ->
	let <Val1> =
	    %% Line 11810
	    apply 'decode_restricted_string'/2
		(_cor1, _cor0)
	in  let <C1> =
		%% Line 11811
		call 'erlang':'byte_size'
		    (Val1)
	    in  %% Line 11812
		case <> of
		  <>
		      when let <_cor4> =
			    call 'erlang':'=<'
				(1, C1)
			in  let <_cor5> =
				call 'erlang':'=<'
				    (C1, 64)
			    in  call 'erlang':'and'
				    (_cor4, _cor5) ->
		      %% Line 11813
		      call 'erlang':'binary_to_list'
			  (Val1)
		  %% Line 11814
		  <> when 'true' ->
		      %% Line 11815
		      call 'erlang':'exit'
			  ({'error',{'asn1','bad_range'}})
		end
'enc_PrivateDomainName'/1 =
    %% Line 11824
    fun (_cor0) ->
	%% Line 11825
	apply 'enc_PrivateDomainName'/2
	    (_cor0, [])
'enc_PrivateDomainName'/2 =
    %% Line 11827
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 11828
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 11829
	      <'numeric'> when 'true' ->
		  let <_cor2> =
		      %% Line 11830
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 11830
		      apply 'encode_restricted_string'/2
			  (_cor2, [#{#<18>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 11831
	      <'printable'> when 'true' ->
		  let <_cor3> =
		      %% Line 11832
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 11832
		      apply 'encode_restricted_string'/2
			  (_cor3, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 11833
	      <Else> when 'true' ->
		  %% Line 11834
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 11828
	    case _cor5 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 11837
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor6})
		-| ['compiler_generated'] )
	    end
'dec_PrivateDomainName'/1 =
    %% Line 11842
    fun (_cor0) ->
	%% Line 11843
	apply 'dec_PrivateDomainName'/2
	    (_cor0, [])
'dec_PrivateDomainName'/2 =
    %% Line 11845
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 11846
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 11847
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor18> when 'true' ->
		      Tlv1
		end
	    in  %% Line 11847
		case _cor4 of
		  %% Line 11850
		  <{18,V1}> when 'true' ->
		      let <Val1> =
			  %% Line 11852
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <C1> =
			      %% Line 11853
			      call 'erlang':'byte_size'
				  (Val1)
			  in  %% Line 11854
			      case <> of
				<>
				    when let <_cor7> =
					  call 'erlang':'=<'
					      (1, C1)
				      in  let <_cor8> =
					      call 'erlang':'=<'
						  (C1, 16)
					  in  call 'erlang':'and'
						  (_cor7, _cor8) ->
				    let <_cor9> =
					%% Line 11855
					call 'erlang':'binary_to_list'
					    (Val1)
				    in  {'numeric',_cor9}
				%% Line 11856
				<> when 'true' ->
				    %% Line 11857
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 11863
		  <{19,V1}> when 'true' ->
		      let <Val2> =
			  %% Line 11865
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <C2> =
			      %% Line 11866
			      call 'erlang':'byte_size'
				  (Val2)
			  in  %% Line 11867
			      case <> of
				<>
				    when let <_cor12> =
					  call 'erlang':'=<'
					      (1, C2)
				      in  let <_cor13> =
					      call 'erlang':'=<'
						  (C2, 16)
					  in  call 'erlang':'and'
						  (_cor12, _cor13) ->
				    let <_cor14> =
					%% Line 11868
					call 'erlang':'binary_to_list'
					    (Val2)
				    in  {'printable',_cor14}
				%% Line 11869
				<> when 'true' ->
				    %% Line 11870
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 11874
		  <Else> when 'true' ->
		      %% Line 11875
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'enc_TerminalIdentifier'/1 =
    %% Line 11883
    fun (_cor0) ->
	%% Line 11884
	apply 'enc_TerminalIdentifier'/2
	    (_cor0, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#])
'enc_TerminalIdentifier'/2 =
    %% Line 11886
    fun (_cor1,_cor0) ->
	%% Line 11887
	apply 'encode_restricted_string'/2
	    (_cor1, _cor0)
'dec_TerminalIdentifier'/1 =
    %% Line 11890
    fun (_cor0) ->
	%% Line 11891
	apply 'dec_TerminalIdentifier'/2
	    (_cor0, [19])
'dec_TerminalIdentifier'/2 =
    %% Line 11893
    fun (_cor1,_cor0) ->
	let <Val1> =
	    %% Line 11895
	    apply 'decode_restricted_string'/2
		(_cor1, _cor0)
	in  let <C1> =
		%% Line 11896
		call 'erlang':'byte_size'
		    (Val1)
	    in  %% Line 11897
		case <> of
		  <>
		      when let <_cor4> =
			    call 'erlang':'=<'
				(1, C1)
			in  let <_cor5> =
				call 'erlang':'=<'
				    (C1, 24)
			    in  call 'erlang':'and'
				    (_cor4, _cor5) ->
		      %% Line 11898
		      call 'erlang':'binary_to_list'
			  (Val1)
		  %% Line 11899
		  <> when 'true' ->
		      %% Line 11900
		      call 'erlang':'exit'
			  ({'error',{'asn1','bad_range'}})
		end
'enc_X121Address'/1 =
    %% Line 11909
    fun (_cor0) ->
	%% Line 11910
	apply 'enc_X121Address'/2
	    (_cor0, [#{#<18>(8,1,'integer',['unsigned'|['big']])}#])
'enc_X121Address'/2 =
    %% Line 11912
    fun (_cor1,_cor0) ->
	%% Line 11913
	apply 'encode_restricted_string'/2
	    (_cor1, _cor0)
'dec_X121Address'/1 =
    %% Line 11916
    fun (_cor0) ->
	%% Line 11917
	apply 'dec_X121Address'/2
	    (_cor0, [18])
'dec_X121Address'/2 =
    %% Line 11919
    fun (_cor1,_cor0) ->
	let <Val1> =
	    %% Line 11921
	    apply 'decode_restricted_string'/2
		(_cor1, _cor0)
	in  let <C1> =
		%% Line 11922
		call 'erlang':'byte_size'
		    (Val1)
	    in  %% Line 11923
		case <> of
		  <>
		      when let <_cor4> =
			    call 'erlang':'=<'
				(1, C1)
			in  let <_cor5> =
				call 'erlang':'=<'
				    (C1, 16)
			    in  call 'erlang':'and'
				    (_cor4, _cor5) ->
		      %% Line 11924
		      call 'erlang':'binary_to_list'
			  (Val1)
		  %% Line 11925
		  <> when 'true' ->
		      %% Line 11926
		      call 'erlang':'exit'
			  ({'error',{'asn1','bad_range'}})
		end
'enc_NetworkAddress'/1 =
    %% Line 11935
    fun (_cor0) ->
	%% Line 11936
	apply 'enc_NetworkAddress'/2
	    (_cor0, [#{#<18>(8,1,'integer',['unsigned'|['big']])}#])
'enc_NetworkAddress'/2 =
    %% Line 11938
    fun (_cor1,_cor0) ->
	%% Line 11939
	apply 'encode_restricted_string'/2
	    (_cor1, _cor0)
'dec_NetworkAddress'/1 =
    %% Line 11942
    fun (_cor0) ->
	%% Line 11943
	apply 'dec_NetworkAddress'/2
	    (_cor0, [18])
'dec_NetworkAddress'/2 =
    %% Line 11945
    fun (_cor1,_cor0) ->
	let <Val1> =
	    %% Line 11947
	    apply 'decode_restricted_string'/2
		(_cor1, _cor0)
	in  let <C1> =
		%% Line 11948
		call 'erlang':'byte_size'
		    (Val1)
	    in  %% Line 11949
		case <> of
		  <>
		      when let <_cor4> =
			    call 'erlang':'=<'
				(1, C1)
			in  let <_cor5> =
				call 'erlang':'=<'
				    (C1, 16)
			    in  call 'erlang':'and'
				    (_cor4, _cor5) ->
		      %% Line 11950
		      call 'erlang':'binary_to_list'
			  (Val1)
		  %% Line 11951
		  <> when 'true' ->
		      %% Line 11952
		      call 'erlang':'exit'
			  ({'error',{'asn1','bad_range'}})
		end
'enc_AdministrationDomainName'/1 =
    %% Line 11961
    fun (_cor0) ->
	%% Line 11962
	apply 'enc_AdministrationDomainName'/2
	    (_cor0, [#{#<98>(8,1,'integer',['unsigned'|['big']])}#])
'enc_AdministrationDomainName'/2 =
    %% Line 11964
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 11965
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 11966
	      <'numeric'> when 'true' ->
		  let <_cor2> =
		      %% Line 11967
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 11967
		      apply 'encode_restricted_string'/2
			  (_cor2, [#{#<18>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 11968
	      <'printable'> when 'true' ->
		  let <_cor3> =
		      %% Line 11969
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 11969
		      apply 'encode_restricted_string'/2
			  (_cor3, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 11970
	      <Else> when 'true' ->
		  %% Line 11971
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 11965
	    case _cor5 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 11974
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor6})
		-| ['compiler_generated'] )
	    end
'dec_AdministrationDomainName'/1 =
    %% Line 11979
    fun (_cor0) ->
	%% Line 11980
	apply 'dec_AdministrationDomainName'/2
	    (_cor0, [65538])
'dec_AdministrationDomainName'/2 =
    %% Line 11982
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 11983
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 11984
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor18> when 'true' ->
		      Tlv1
		end
	    in  %% Line 11984
		case _cor4 of
		  %% Line 11987
		  <{18,V1}> when 'true' ->
		      let <Val1> =
			  %% Line 11989
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <C1> =
			      %% Line 11990
			      call 'erlang':'byte_size'
				  (Val1)
			  in  %% Line 11991
			      case <> of
				<>
				    when let <_cor7> =
					  call 'erlang':'=<'
					      (0, C1)
				      in  let <_cor8> =
					      call 'erlang':'=<'
						  (C1, 16)
					  in  call 'erlang':'and'
						  (_cor7, _cor8) ->
				    let <_cor9> =
					%% Line 11992
					call 'erlang':'binary_to_list'
					    (Val1)
				    in  {'numeric',_cor9}
				%% Line 11993
				<> when 'true' ->
				    %% Line 11994
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 12000
		  <{19,V1}> when 'true' ->
		      let <Val2> =
			  %% Line 12002
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <C2> =
			      %% Line 12003
			      call 'erlang':'byte_size'
				  (Val2)
			  in  %% Line 12004
			      case <> of
				<>
				    when let <_cor12> =
					  call 'erlang':'=<'
					      (0, C2)
				      in  let <_cor13> =
					      call 'erlang':'=<'
						  (C2, 16)
					  in  call 'erlang':'and'
						  (_cor12, _cor13) ->
				    let <_cor14> =
					%% Line 12005
					call 'erlang':'binary_to_list'
					    (Val2)
				    in  {'printable',_cor14}
				%% Line 12006
				<> when 'true' ->
				    %% Line 12007
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 12011
		  <Else> when 'true' ->
		      %% Line 12012
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'enc_CountryName'/1 =
    %% Line 12020
    fun (_cor0) ->
	%% Line 12021
	apply 'enc_CountryName'/2
	    (_cor0, [#{#<97>(8,1,'integer',['unsigned'|['big']])}#])
'enc_CountryName'/2 =
    %% Line 12023
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 12024
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 12025
	      <'x121-dcc-code'> when 'true' ->
		  let <_cor2> =
		      %% Line 12026
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 12026
		      apply 'encode_restricted_string'/2
			  (_cor2, [#{#<18>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 12027
	      <'iso-3166-alpha2-code'> when 'true' ->
		  let <_cor3> =
		      %% Line 12028
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 12028
		      apply 'encode_restricted_string'/2
			  (_cor3, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 12029
	      <Else> when 'true' ->
		  %% Line 12030
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 12024
	    case _cor5 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 12033
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor6})
		-| ['compiler_generated'] )
	    end
'dec_CountryName'/1 =
    %% Line 12038
    fun (_cor0) ->
	%% Line 12039
	apply 'dec_CountryName'/2
	    (_cor0, [65537])
'dec_CountryName'/2 =
    %% Line 12041
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 12042
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 12043
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor14> when 'true' ->
		      Tlv1
		end
	    in  %% Line 12043
		case _cor4 of
		  %% Line 12046
		  <{18,V1}> when 'true' ->
		      let <Val1> =
			  %% Line 12048
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <C1> =
			      %% Line 12049
			      call 'erlang':'byte_size'
				  (Val1)
			  in  %% Line 12050
			      case <> of
				<>
				    when call 'erlang':'=:='
					  (C1,
					   3) ->
				    let <_cor7> =
					%% Line 12051
					call 'erlang':'binary_to_list'
					    (Val1)
				    in  {'x121-dcc-code',_cor7}
				%% Line 12052
				<> when 'true' ->
				    %% Line 12053
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 12059
		  <{19,V1}> when 'true' ->
		      let <Val2> =
			  %% Line 12061
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <C2> =
			      %% Line 12062
			      call 'erlang':'byte_size'
				  (Val2)
			  in  %% Line 12063
			      case <> of
				<>
				    when call 'erlang':'=:='
					  (C2,
					   2) ->
				    let <_cor10> =
					%% Line 12064
					call 'erlang':'binary_to_list'
					    (Val2)
				    in  {'iso-3166-alpha2-code',_cor10}
				%% Line 12065
				<> when 'true' ->
				    %% Line 12066
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 12070
		  <Else> when 'true' ->
		      %% Line 12071
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'enc_BuiltInStandardAttributes'/1 =
    %% Line 12079
    fun (_cor0) ->
	%% Line 12080
	apply 'enc_BuiltInStandardAttributes'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_BuiltInStandardAttributes'/2 =
    %% Line 12082
    fun (_cor1,_cor0) ->
	%% Line 12083
	case _cor1 of
	  <{_cor41,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6,Cindex7,Cindex8,Cindex9}> when 'true' ->
	      let <_cor4> =
		  %% Line 12088
		  case Cindex1 of
		    %% Line 12089
		    <'asn1_NOVALUE'> when 'true' ->
			{#{}#,0}
		    %% Line 12090
		    <_cor42> when 'true' ->
			%% Line 12091
			apply 'enc_CountryName'/2
			    (Cindex1, [#{#<97>(8,1,'integer',['unsigned'|['big']])}#])
		  end
	      in  %% Line 12088
		  case _cor4 of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor7> =
			    %% Line 12097
			    case Cindex2 of
			      %% Line 12098
			      <'asn1_NOVALUE'> when 'true' ->
				  {#{}#,0}
			      %% Line 12099
			      <_cor43> when 'true' ->
				  %% Line 12100
				  apply 'enc_AdministrationDomainName'/2
				      (Cindex2, [#{#<98>(8,1,'integer',['unsigned'|['big']])}#])
			    end
			in  %% Line 12097
			    case _cor7 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  let <_cor10> =
				      %% Line 12106
				      case Cindex3 of
					%% Line 12107
					<'asn1_NOVALUE'> when 'true' ->
					    {#{}#,0}
					%% Line 12108
					<_cor44> when 'true' ->
					    %% Line 12109
					    apply 'encode_restricted_string'/2
						(Cindex3, [#{#<128>(8,1,'integer',['unsigned'|['big']])}#])
				      end
				  in  %% Line 12106
				      case _cor10 of
					<{EncBytes3,EncLen3}> when 'true' ->
					    let <_cor13> =
						%% Line 12115
						case Cindex4 of
						  %% Line 12116
						  <'asn1_NOVALUE'> when 'true' ->
						      {#{}#,0}
						  %% Line 12117
						  <_cor45> when 'true' ->
						      %% Line 12118
						      apply 'encode_restricted_string'/2
							  (Cindex4, [#{#<129>(8,1,'integer',['unsigned'|['big']])}#])
						end
					    in  %% Line 12115
						case _cor13 of
						  <{EncBytes4,EncLen4}> when 'true' ->
						      let <_cor16> =
							  %% Line 12124
							  case Cindex5 of
							    %% Line 12125
							    <'asn1_NOVALUE'> when 'true' ->
								{#{}#,0}
							    %% Line 12126
							    <_cor46> when 'true' ->
								%% Line 12127
								apply 'enc_PrivateDomainName'/2
								    (Cindex5, [#{#<162>(8,1,'integer',['unsigned'|['big']])}#])
							  end
						      in  %% Line 12124
							  case _cor16 of
							    <{EncBytes5,EncLen5}> when 'true' ->
								let <_cor19> =
								    %% Line 12133
								    case Cindex6 of
								      %% Line 12134
								      <'asn1_NOVALUE'> when 'true' ->
									  {#{}#,0}
								      %% Line 12135
								      <_cor47> when 'true' ->
									  %% Line 12136
									  apply 'encode_restricted_string'/2
									      (Cindex6, [#{#<131>(8,1,'integer',['unsigned'|['big']])}#])
								    end
								in  %% Line 12133
								    case _cor19 of
								      <{EncBytes6,EncLen6}> when 'true' ->
									  let <_cor22> =
									      %% Line 12142
									      case Cindex7 of
										%% Line 12143
										<'asn1_NOVALUE'> when 'true' ->
										    {#{}#,0}
										%% Line 12144
										<_cor48> when 'true' ->
										    %% Line 12145
										    apply 'encode_restricted_string'/2
											(Cindex7, [#{#<132>(8,1,'integer',['unsigned'|['big']])}#])
									      end
									  in  %% Line 12142
									      case _cor22 of
										<{EncBytes7,EncLen7}> when 'true' ->
										    let <_cor25> =
											%% Line 12151
											case Cindex8 of
											  %% Line 12152
											  <'asn1_NOVALUE'> when 'true' ->
											      {#{}#,0}
											  %% Line 12153
											  <_cor49> when 'true' ->
											      %% Line 12154
											      apply 'enc_PersonalName'/2
												  (Cindex8, [#{#<165>(8,1,'integer',['unsigned'|['big']])}#])
											end
										    in  %% Line 12151
											case _cor25 of
											  <{EncBytes8,EncLen8}> when 'true' ->
											      let <_cor28> =
												  %% Line 12160
												  case Cindex9 of
												    %% Line 12161
												    <'asn1_NOVALUE'> when 'true' ->
													{#{}#,0}
												    %% Line 12162
												    <_cor50> when 'true' ->
													%% Line 12163
													apply 'enc_OrganizationalUnitNames'/2
													    (Cindex9, [#{#<166>(8,1,'integer',['unsigned'|['big']])}#])
												  end
											      in  %% Line 12160
												  case _cor28 of
												    <{EncBytes9,EncLen9}> when 'true' ->
													let <BytesSoFar> =
													    %% Line 12166
													    [EncBytes1|[EncBytes2|[EncBytes3|[EncBytes4|[EncBytes5|[EncBytes6|[EncBytes7|[EncBytes8|[EncBytes9|[]]]]]]]]]]
													in  let <_cor31> =
														%% Line 12167
														call 'erlang':'+'
														    (EncLen1, EncLen2)
													    in  let <_cor32> =
														    %% Line 12167
														    call 'erlang':'+'
															(_cor31, EncLen3)
														in  let <_cor33> =
															%% Line 12167
															call 'erlang':'+'
															    (_cor32, EncLen4)
														    in  let <_cor34> =
															    %% Line 12167
															    call 'erlang':'+'
																(_cor33, EncLen5)
															in  let <_cor35> =
																%% Line 12167
																call 'erlang':'+'
																    (_cor34, EncLen6)
															    in  let <_cor36> =
																    %% Line 12167
																    call 'erlang':'+'
																	(_cor35, EncLen7)
																in  let <_cor37> =
																	%% Line 12167
																	call 'erlang':'+'
																	    (_cor36, EncLen8)
																    in  let <LenSoFar> =
																	    %% Line 12167
																	    call 'erlang':'+'
																		(_cor37, EncLen9)
																	in  %% Line 12168
																	    apply 'encode_tags'/3
																		(_cor0, BytesSoFar, LenSoFar)
												    ( <_cor29> when 'true' ->
													  primop 'match_fail'
													      ({'badmatch',_cor29})
												      -| ['compiler_generated'] )
												  end
											  ( <_cor26> when 'true' ->
												primop 'match_fail'
												    ({'badmatch',_cor26})
											    -| ['compiler_generated'] )
											end
										( <_cor23> when 'true' ->
										      primop 'match_fail'
											  ({'badmatch',_cor23})
										  -| ['compiler_generated'] )
									      end
								      ( <_cor20> when 'true' ->
									    primop 'match_fail'
										({'badmatch',_cor20})
									-| ['compiler_generated'] )
								    end
							    ( <_cor17> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_cor17})
							      -| ['compiler_generated'] )
							  end
						  ( <_cor14> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor14})
						    -| ['compiler_generated'] )
						end
					( <_cor11> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor11})
					  -| ['compiler_generated'] )
				      end
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_BuiltInStandardAttributes'/1 =
    %% Line 12171
    fun (_cor0) ->
	%% Line 12172
	apply 'dec_BuiltInStandardAttributes'/2
	    (_cor0, [16])
'dec_BuiltInStandardAttributes'/2 =
    %% Line 12174
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 12178
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <Term1,Tlv2> =
		%% Line 12183
		case Tlv1 of
		  %% Line 12184
		  <[{65537,V1}|TempTlv2]> when 'true' ->
		      let <_cor3> =
			  %% Line 12185
			  apply 'dec_CountryName'/2
			      (V1, [])
		      in  <_cor3,%% Line 12185
				 TempTlv2>
		  %% Line 12186
		  <_cor58> when 'true' ->
		      %% Line 12187
		      <'asn1_NOVALUE',Tlv1>
		end
	    in  let <Term2,Tlv3> =
		    %% Line 12193
		    case Tlv2 of
		      %% Line 12194
		      <[{65538,V2}|TempTlv3]> when 'true' ->
			  let <_cor7> =
			      %% Line 12195
			      apply 'dec_AdministrationDomainName'/2
				  (V2, [])
			  in  <_cor7,%% Line 12195
				     TempTlv3>
		      %% Line 12196
		      <_cor59> when 'true' ->
			  %% Line 12197
			  <'asn1_NOVALUE',Tlv2>
		    end
		in  let <Term3,Tlv4> =
			%% Line 12203
			case Tlv3 of
			  %% Line 12204
			  <[{131072,V3}|TempTlv4]> when 'true' ->
			      let <Val1> =
				  %% Line 12206
				  apply 'decode_restricted_string'/2
				      (V3, [])
			      in  let <C1> =
				      %% Line 12207
				      call 'erlang':'byte_size'
					  (Val1)
				  in  %% Line 12208
				      case <> of
					<>
					    when let <_cor13> =
						  call 'erlang':'=<'
						      (1, C1)
					      in  let <_cor14> =
						      call 'erlang':'=<'
							  (C1, 16)
						  in  call 'erlang':'and'
							  (_cor13, _cor14) ->
					    let <_cor15> =
						%% Line 12209
						call 'erlang':'binary_to_list'
						    (Val1)
					    in  <_cor15,%% Line 12213
							TempTlv4>
					%% Line 12210
					<> when 'true' ->
					    %% Line 12211
					    call 'erlang':'exit'
						({'error',{'asn1','bad_range'}})
				      end
			  %% Line 12214
			  <_cor60> when 'true' ->
			      %% Line 12215
			      <'asn1_NOVALUE',Tlv3>
			end
		    in  let <Term4,Tlv5> =
			    %% Line 12221
			    case Tlv4 of
			      %% Line 12222
			      <[{131073,V4}|TempTlv5]> when 'true' ->
				  let <Val2> =
				      %% Line 12224
				      apply 'decode_restricted_string'/2
					  (V4, [])
				  in  let <C2> =
					  %% Line 12225
					  call 'erlang':'byte_size'
					      (Val2)
				      in  %% Line 12226
					  case <> of
					    <>
						when let <_cor21> =
						      call 'erlang':'=<'
							  (1, C2)
						  in  let <_cor22> =
							  call 'erlang':'=<'
							      (C2, 24)
						      in  call 'erlang':'and'
							      (_cor21, _cor22) ->
						let <_cor23> =
						    %% Line 12227
						    call 'erlang':'binary_to_list'
							(Val2)
						in  <_cor23,%% Line 12231
							    TempTlv5>
					    %% Line 12228
					    <> when 'true' ->
						%% Line 12229
						call 'erlang':'exit'
						    ({'error',{'asn1','bad_range'}})
					  end
			      %% Line 12232
			      <_cor61> when 'true' ->
				  %% Line 12233
				  <'asn1_NOVALUE',Tlv4>
			    end
			in  let <Term5,Tlv6> =
				%% Line 12239
				case Tlv5 of
				  %% Line 12240
				  <[{131074,V5}|TempTlv6]> when 'true' ->
				      let <_cor27> =
					  %% Line 12241
					  apply 'dec_PrivateDomainName'/2
					      (V5, [])
				      in  <_cor27,%% Line 12241
						  TempTlv6>
				  %% Line 12242
				  <_cor62> when 'true' ->
				      %% Line 12243
				      <'asn1_NOVALUE',Tlv5>
				end
			    in  let <Term6,Tlv7> =
				    %% Line 12249
				    case Tlv6 of
				      %% Line 12250
				      <[{131075,V6}|TempTlv7]> when 'true' ->
					  let <Val3> =
					      %% Line 12252
					      apply 'decode_restricted_string'/2
						  (V6, [])
					  in  let <C3> =
						  %% Line 12253
						  call 'erlang':'byte_size'
						      (Val3)
					      in  %% Line 12254
						  case <> of
						    <>
							when let <_cor33> =
							      call 'erlang':'=<'
								  (1, C3)
							  in  let <_cor34> =
								  call 'erlang':'=<'
								      (C3, 64)
							      in  call 'erlang':'and'
								      (_cor33, _cor34) ->
							let <_cor35> =
							    %% Line 12255
							    call 'erlang':'binary_to_list'
								(Val3)
							in  <_cor35,%% Line 12259
								    TempTlv7>
						    %% Line 12256
						    <> when 'true' ->
							%% Line 12257
							call 'erlang':'exit'
							    ({'error',{'asn1','bad_range'}})
						  end
				      %% Line 12260
				      <_cor63> when 'true' ->
					  %% Line 12261
					  <'asn1_NOVALUE',Tlv6>
				    end
				in  let <Term7,Tlv8> =
					%% Line 12267
					case Tlv7 of
					  %% Line 12268
					  <[{131076,V7}|TempTlv8]> when 'true' ->
					      let <Val4> =
						  %% Line 12270
						  apply 'decode_restricted_string'/2
						      (V7, [])
					      in  let <C4> =
						      %% Line 12271
						      call 'erlang':'byte_size'
							  (Val4)
						  in  %% Line 12272
						      case <> of
							<>
							    when let <_cor41> =
								  call 'erlang':'=<'
								      (1, C4)
							      in  let <_cor42> =
								      call 'erlang':'=<'
									  (C4, 32)
								  in  call 'erlang':'and'
									  (_cor41, _cor42) ->
							    let <_cor43> =
								%% Line 12273
								call 'erlang':'binary_to_list'
								    (Val4)
							    in  <_cor43,%% Line 12277
									TempTlv8>
							%% Line 12274
							<> when 'true' ->
							    %% Line 12275
							    call 'erlang':'exit'
								({'error',{'asn1','bad_range'}})
						      end
					  %% Line 12278
					  <_cor64> when 'true' ->
					      %% Line 12279
					      <'asn1_NOVALUE',Tlv7>
					end
				    in  let <Term8,Tlv9> =
					    %% Line 12285
					    case Tlv8 of
					      %% Line 12286
					      <[{131077,V8}|TempTlv9]> when 'true' ->
						  let <_cor47> =
						      %% Line 12287
						      apply 'dec_PersonalName'/2
							  (V8, [])
						  in  <_cor47,%% Line 12287
							      TempTlv9>
					      %% Line 12288
					      <_cor65> when 'true' ->
						  %% Line 12289
						  <'asn1_NOVALUE',Tlv8>
					    end
					in  let <Term9,Tlv10> =
						%% Line 12295
						case Tlv9 of
						  %% Line 12296
						  <[{131078,V9}|TempTlv10]> when 'true' ->
						      let <_cor51> =
							  %% Line 12297
							  apply 'dec_OrganizationalUnitNames'/2
							      (V9, [])
						      in  <_cor51,%% Line 12297
								  TempTlv10>
						  %% Line 12298
						  <_cor66> when 'true' ->
						      %% Line 12299
						      <'asn1_NOVALUE',Tlv9>
						end
					    in  do  %% Line 12302
						    case Tlv10 of
						      %% Line 12303
						      <[]> when 'true' ->
							  'ok'
						      %% Line 12303
						      <_cor67> when 'true' ->
							  call 'erlang':'exit'
							      ({'error',{'asn1',{'unexpected',Tlv10}}})
						    end
						    %% Line 12305
						    {'BuiltInStandardAttributes',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9}
'enc_ORAddress'/1 =
    %% Line 12312
    fun (_cor0) ->
	%% Line 12313
	apply 'enc_ORAddress'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_ORAddress'/2 =
    %% Line 12315
    fun (_cor1,_cor0) ->
	%% Line 12316
	case _cor1 of
	  <{_cor15,Cindex1,Cindex2,Cindex3}> when 'true' ->
	      %% Line 12321
	      case apply 'enc_BuiltInStandardAttributes'/2
		       (Cindex1, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    let <_cor5> =
			%% Line 12326
			case Cindex2 of
			  %% Line 12327
			  <'asn1_NOVALUE'> when 'true' ->
			      {#{}#,0}
			  %% Line 12328
			  <_cor16> when 'true' ->
			      %% Line 12329
			      apply 'enc_BuiltInDomainDefinedAttributes'/2
				  (Cindex2, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
			end
		    in  %% Line 12326
			case _cor5 of
			  <{EncBytes2,EncLen2}> when 'true' ->
			      let <_cor8> =
				  %% Line 12335
				  case Cindex3 of
				    %% Line 12336
				    <'asn1_NOVALUE'> when 'true' ->
					{#{}#,0}
				    %% Line 12337
				    <_cor17> when 'true' ->
					%% Line 12338
					apply 'enc_ExtensionAttributes'/2
					    (Cindex3, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
				  end
			      in  %% Line 12335
				  case _cor8 of
				    <{EncBytes3,EncLen3}> when 'true' ->
					let <BytesSoFar> =
					    %% Line 12341
					    [EncBytes1|[EncBytes2|[EncBytes3|[]]]]
					in  let <_cor11> =
						%% Line 12342
						call 'erlang':'+'
						    (EncLen1, EncLen2)
					    in  let <LenSoFar> =
						    %% Line 12342
						    call 'erlang':'+'
							(_cor11, EncLen3)
						in  %% Line 12343
						    apply 'encode_tags'/3
							(_cor0, BytesSoFar, LenSoFar)
				    ( <_cor9> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor9})
				      -| ['compiler_generated'] )
				  end
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_ORAddress'/1 =
    %% Line 12346
    fun (_cor0) ->
	%% Line 12347
	apply 'dec_ORAddress'/2
	    (_cor0, [16])
'dec_ORAddress'/2 =
    %% Line 12349
    fun (_cor1,_cor0) ->
	%% Line 12358
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 12359
		  apply 'dec_BuiltInStandardAttributes'/2
		      (V1, [16])
	      in  let <Term2,Tlv3> =
		      %% Line 12364
		      case Tlv2 of
			%% Line 12365
			<[{16,V2}|TempTlv3]> when 'true' ->
			    let <_cor5> =
				%% Line 12366
				apply 'dec_BuiltInDomainDefinedAttributes'/2
				    (V2, [])
			    in  <_cor5,%% Line 12366
				       TempTlv3>
			%% Line 12367
			<_cor16> when 'true' ->
			    %% Line 12368
			    <'asn1_NOVALUE',Tlv2>
		      end
		  in  let <Term3,Tlv4> =
			  %% Line 12374
			  case Tlv3 of
			    %% Line 12375
			    <[{17,V3}|TempTlv4]> when 'true' ->
				let <_cor9> =
				    %% Line 12376
				    apply 'dec_ExtensionAttributes'/2
					(V3, [])
				in  <_cor9,%% Line 12376
					   TempTlv4>
			    %% Line 12377
			    <_cor17> when 'true' ->
				%% Line 12378
				<'asn1_NOVALUE',Tlv3>
			  end
		      in  do  %% Line 12381
			      case Tlv4 of
				%% Line 12382
				<[]> when 'true' ->
				    'ok'
				%% Line 12382
				<_cor18> when 'true' ->
				    call 'erlang':'exit'
					({'error',{'asn1',{'unexpected',Tlv4}}})
			      end
			      %% Line 12384
			      {'ORAddress',Term1,Term2,Term3}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_AlgorithmIdentifier'/1 =
    %% Line 12391
    fun (_cor0) ->
	%% Line 12392
	apply 'enc_AlgorithmIdentifier'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_AlgorithmIdentifier'/2 =
    %% Line 12394
    fun (_cor1,_cor0) ->
	%% Line 12395
	case _cor1 of
	  <{_cor11,Cindex1,Cindex2}> when 'true' ->
	      %% Line 12400
	      case apply 'encode_object_identifier'/2
		       (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    let <_cor5> =
			%% Line 12405
			case Cindex2 of
			  %% Line 12406
			  <'asn1_NOVALUE'> when 'true' ->
			      {#{}#,0}
			  %% Line 12407
			  <_cor12> when 'true' ->
			      %% Line 12408
			      apply 'encode_open_type'/2
				  (Cindex2, [])
			end
		    in  %% Line 12405
			case _cor5 of
			  <{EncBytes2,EncLen2}> when 'true' ->
			      let <BytesSoFar> =
				  %% Line 12411
				  [EncBytes1|[EncBytes2|[]]]
			      in  let <LenSoFar> =
				      %% Line 12412
				      call 'erlang':'+'
					  (EncLen1, EncLen2)
				  in  %% Line 12413
				      apply 'encode_tags'/3
					  (_cor0, BytesSoFar, LenSoFar)
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_AlgorithmIdentifier'/1 =
    %% Line 12416
    fun (_cor0) ->
	%% Line 12417
	apply 'dec_AlgorithmIdentifier'/2
	    (_cor0, [16])
'dec_AlgorithmIdentifier'/2 =
    %% Line 12419
    fun (_cor1,_cor0) ->
	%% Line 12428
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 12429
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  let <Term2,Tlv3> =
		      %% Line 12434
		      case Tlv2 of
			%% Line 12435
			<[V2|TempTlv3]> when 'true' ->
			    let <_cor5> =
				%% Line 12436
				apply 'decode_open_type_as_binary'/2
				    (V2, [])
			    in  <_cor5,%% Line 12436
				       TempTlv3>
			%% Line 12437
			<_cor12> when 'true' ->
			    %% Line 12438
			    <'asn1_NOVALUE',Tlv2>
		      end
		  in  do  %% Line 12441
			  case Tlv3 of
			    %% Line 12442
			    <[]> when 'true' ->
				'ok'
			    %% Line 12442
			    <_cor13> when 'true' ->
				call 'erlang':'exit'
				    ({'error',{'asn1',{'unexpected',Tlv3}}})
			  end
			  %% Line 12444
			  {'AlgorithmIdentifier',Term1,Term2}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_TBSCertList'/1 =
    %% Line 12451
    fun (_cor0) ->
	%% Line 12452
	apply 'enc_TBSCertList'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_TBSCertList'/2 =
    %% Line 12454
    fun (_cor1,_cor0) ->
	%% Line 12455
	case _cor1 of
	  <{_cor27,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6,Cindex7}> when 'true' ->
	      let <_cor4> =
		  %% Line 12460
		  case Cindex1 of
		    %% Line 12461
		    <'asn1_NOVALUE'> when 'true' ->
			{#{}#,0}
		    %% Line 12462
		    <_cor28> when 'true' ->
			%% Line 12463
			apply 'encode_integer'/3
			    (Cindex1, [{'v1',0}|[{'v2',1}|[{'v3',2}]]], [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
		  end
	      in  %% Line 12460
		  case _cor4 of
		    <{EncBytes1,EncLen1}> when 'true' ->
			%% Line 12469
			case apply 'enc_AlgorithmIdentifier'/2
				 (Cindex2, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
			  <{EncBytes2,EncLen2}> when 'true' ->
			      %% Line 12474
			      case apply 'enc_Name'/2
				       (Cindex3, []) of
				<{EncBytes3,EncLen3}> when 'true' ->
				    %% Line 12479
				    case apply 'enc_Time'/2
					     (Cindex4, []) of
				      <{EncBytes4,EncLen4}> when 'true' ->
					  let <_cor10> =
					      %% Line 12484
					      case Cindex5 of
						%% Line 12485
						<'asn1_NOVALUE'> when 'true' ->
						    {#{}#,0}
						%% Line 12486
						<_cor29> when 'true' ->
						    %% Line 12487
						    apply 'enc_Time'/2
							(Cindex5, [])
					      end
					  in  %% Line 12484
					      case _cor10 of
						<{EncBytes5,EncLen5}> when 'true' ->
						    let <_cor13> =
							%% Line 12493
							case Cindex6 of
							  %% Line 12494
							  <'asn1_NOVALUE'> when 'true' ->
							      {#{}#,0}
							  %% Line 12495
							  <_cor30> when 'true' ->
							      %% Line 12496
							      apply 'enc_TBSCertList_revokedCertificates'/2
								  (Cindex6, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
							end
						    in  %% Line 12493
							case _cor13 of
							  <{EncBytes6,EncLen6}> when 'true' ->
							      let <_cor16> =
								  %% Line 12502
								  case Cindex7 of
								    %% Line 12503
								    <'asn1_NOVALUE'> when 'true' ->
									{#{}#,0}
								    %% Line 12504
								    <_cor31> when 'true' ->
									%% Line 12505
									apply 'enc_Extensions'/2
									    (Cindex7, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#|[#{#<160>(8,1,'integer',['unsigned'|['big']])}#]])
								  end
							      in  %% Line 12502
								  case _cor16 of
								    <{EncBytes7,EncLen7}> when 'true' ->
									let <BytesSoFar> =
									    %% Line 12508
									    [EncBytes1|[EncBytes2|[EncBytes3|[EncBytes4|[EncBytes5|[EncBytes6|[EncBytes7|[]]]]]]]]
									in  let <_cor19> =
										%% Line 12509
										call 'erlang':'+'
										    (EncLen1, EncLen2)
									    in  let <_cor20> =
										    %% Line 12509
										    call 'erlang':'+'
											(_cor19, EncLen3)
										in  let <_cor21> =
											%% Line 12509
											call 'erlang':'+'
											    (_cor20, EncLen4)
										    in  let <_cor22> =
											    %% Line 12509
											    call 'erlang':'+'
												(_cor21, EncLen5)
											in  let <_cor23> =
												%% Line 12509
												call 'erlang':'+'
												    (_cor22, EncLen6)
											    in  let <LenSoFar> =
												    %% Line 12509
												    call 'erlang':'+'
													(_cor23, EncLen7)
												in  %% Line 12510
												    apply 'encode_tags'/3
													(_cor0, BytesSoFar, LenSoFar)
								    ( <_cor17> when 'true' ->
									  primop 'match_fail'
									      ({'badmatch',_cor17})
								      -| ['compiler_generated'] )
								  end
							  ( <_cor14> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_cor14})
							    -| ['compiler_generated'] )
							end
						( <_cor11> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor11})
						  -| ['compiler_generated'] )
					      end
				      ( <_cor8> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor8})
					-| ['compiler_generated'] )
				    end
				( <_cor7> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor7})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_TBSCertList_revokedCertificates'/2 =
    %% Line 12517
    fun (_cor1,_cor0) ->
	%% Line 12518
	case apply 'enc_TBSCertList_revokedCertificates_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 12519
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_TBSCertList_revokedCertificates_components'/3 =
    %% Line 12521
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 12522
		  call 'lists':'reverse'
		      (AccBytes)
	      in  %% Line 12522
		  {_cor3,AccLen}
	  %% Line 12524
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 12525
	      case apply 'enc_TBSCertList_revokedCertificates_SEQOF'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 12526
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 12526
			apply 'enc_TBSCertList_revokedCertificates_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_TBSCertList_revokedCertificates_components',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_TBSCertList_revokedCertificates_SEQOF'/2 =
    %% Line 12534
    fun (_cor1,_cor0) ->
	%% Line 12535
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2,Cindex3}> when 'true' ->
	      %% Line 12540
	      case apply 'encode_integer'/2
		       (Cindex1, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 12545
		    case apply 'enc_Time'/2
			     (Cindex2, []) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <_cor6> =
			      %% Line 12550
			      case Cindex3 of
				%% Line 12551
				<'asn1_NOVALUE'> when 'true' ->
				    {#{}#,0}
				%% Line 12552
				<_cor14> when 'true' ->
				    %% Line 12553
				    apply 'enc_Extensions'/2
					(Cindex3, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
			      end
			  in  %% Line 12550
			      case _cor6 of
				<{EncBytes3,EncLen3}> when 'true' ->
				    let <BytesSoFar> =
					%% Line 12556
					[EncBytes1|[EncBytes2|[EncBytes3|[]]]]
				    in  let <_cor9> =
					    %% Line 12557
					    call 'erlang':'+'
						(EncLen1, EncLen2)
					in  let <LenSoFar> =
						%% Line 12557
						call 'erlang':'+'
						    (_cor9, EncLen3)
					    in  %% Line 12558
						apply 'encode_tags'/3
						    (_cor0, BytesSoFar, LenSoFar)
				( <_cor7> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor7})
				  -| ['compiler_generated'] )
			      end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_TBSCertList_revokedCertificates_SEQOF'/2 =
    %% Line 12559
    fun (_cor1,_cor0) ->
	%% Line 12568
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 12569
		  apply 'decode_integer'/2
		      (V1, [2])
	      in  %% Line 12574
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 12575
			    apply 'dec_Time'/2
				(V2, [])
			in  let <Term3,Tlv4> =
				%% Line 12580
				case Tlv3 of
				  %% Line 12581
				  <[{16,V3}|TempTlv4]> when 'true' ->
				      let <_cor7> =
					  %% Line 12582
					  apply 'dec_Extensions'/2
					      (V3, [])
				      in  <_cor7,%% Line 12582
						 TempTlv4>
				  %% Line 12583
				  <_cor14> when 'true' ->
				      %% Line 12584
				      <'asn1_NOVALUE',Tlv3>
				end
			    in  do  %% Line 12587
				    case Tlv4 of
				      %% Line 12588
				      <[]> when 'true' ->
					  'ok'
				      %% Line 12588
				      <_cor15> when 'true' ->
					  call 'erlang':'exit'
					      ({'error',{'asn1',{'unexpected',Tlv4}}})
				    end
				    %% Line 12590
				    {'TBSCertList_revokedCertificates_SEQOF',Term1,Term2,Term3}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'dec_TBSCertList_revokedCertificates'/2 =
    %% Line 12592
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 12596
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 12597
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_TBSCertList_revokedCertificates_SEQOF'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'dec_TBSCertList'/1 =
    %% Line 12602
    fun (_cor0) ->
	%% Line 12603
	apply 'dec_TBSCertList'/2
	    (_cor0, [16])
'dec_TBSCertList'/2 =
    %% Line 12605
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 12609
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <Term1,Tlv2> =
		%% Line 12614
		case Tlv1 of
		  %% Line 12615
		  <[{2,V1}|TempTlv2]> when 'true' ->
		      let <Val1> =
			  %% Line 12617
			  apply 'decode_integer'/2
			      (V1, [])
		      in  let <_cor4> =
			      %% Line 12618
			      apply 'number2name'/2
				  (Val1, [{'v1',0}|[{'v2',1}|[{'v3',2}]]])
			  in  <_cor4,%% Line 12620
				     TempTlv2>
		  %% Line 12621
		  <_cor30> when 'true' ->
		      %% Line 12622
		      <'asn1_NOVALUE',Tlv1>
		end
	    in  %% Line 12628
		case Tlv2 of
		  <[V2|Tlv3]> when 'true' ->
		      let <Term2> =
			  %% Line 12629
			  apply 'dec_AlgorithmIdentifier'/2
			      (V2, [16])
		      in  %% Line 12634
			  case Tlv3 of
			    <[V3|Tlv4]> when 'true' ->
				let <Term3> =
				    %% Line 12635
				    apply 'dec_Name'/2
					(V3, [])
				in  %% Line 12640
				    case Tlv4 of
				      <[V4|Tlv5]> when 'true' ->
					  let <Term4> =
					      %% Line 12641
					      apply 'dec_Time'/2
						  (V4, [])
					  in  let <Term5,Tlv6> =
						  %% Line 12646
						  case Tlv5 of
						    %% Line 12647
						    <[V5 = {23,_cor31}|TempTlv6]> when 'true' ->
							let <_cor14> =
							    %% Line 12648
							    apply 'dec_Time'/2
								(V5, [])
							in  <_cor14,%% Line 12648
								    TempTlv6>
						    %% Line 12649
						    <[V5 = {24,_cor32}|TempTlv6]> when 'true' ->
							let <_cor15> =
							    %% Line 12650
							    apply 'dec_Time'/2
								(V5, [])
							in  <_cor15,%% Line 12650
								    TempTlv6>
						    %% Line 12651
						    <_cor33> when 'true' ->
							%% Line 12652
							<'asn1_NOVALUE',Tlv5>
						  end
					      in  let <Term6,Tlv7> =
						      %% Line 12658
						      case Tlv6 of
							%% Line 12659
							<[{16,V6}|TempTlv7]> when 'true' ->
							    let <_cor19> =
								%% Line 12660
								apply 'dec_TBSCertList_revokedCertificates'/2
								    (V6, [])
							    in  <_cor19,%% Line 12660
									TempTlv7>
							%% Line 12661
							<_cor34> when 'true' ->
							    %% Line 12662
							    <'asn1_NOVALUE',Tlv6>
						      end
						  in  let <Term7,Tlv8> =
							  %% Line 12668
							  case Tlv7 of
							    %% Line 12669
							    <[{131072,V7}|TempTlv8]> when 'true' ->
								let <_cor23> =
								    %% Line 12670
								    apply 'dec_Extensions'/2
									(V7, [16])
								in  <_cor23,%% Line 12670
									    TempTlv8>
							    %% Line 12671
							    <_cor35> when 'true' ->
								%% Line 12672
								<'asn1_NOVALUE',Tlv7>
							  end
						      in  do  %% Line 12675
							      case Tlv8 of
								%% Line 12676
								<[]> when 'true' ->
								    'ok'
								%% Line 12676
								<_cor36> when 'true' ->
								    call 'erlang':'exit'
									({'error',{'asn1',{'unexpected',Tlv8}}})
							      end
							      %% Line 12678
							      {'TBSCertList',Term1,Term2,Term3,Term4,Term5,Term6,Term7}
				      ( <_cor12> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor12})
					-| ['compiler_generated'] )
				    end
			    ( <_cor10> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor10})
			      -| ['compiler_generated'] )
			  end
		  ( <_cor8> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor8})
		    -| ['compiler_generated'] )
		end
'enc_CertificateList'/1 =
    %% Line 12685
    fun (_cor0) ->
	%% Line 12686
	apply 'enc_CertificateList'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_CertificateList'/2 =
    %% Line 12688
    fun (_cor1,_cor0) ->
	%% Line 12689
	case _cor1 of
	  <{_cor11,Cindex1,Cindex2,Cindex3}> when 'true' ->
	      %% Line 12694
	      case apply 'enc_TBSCertList'/2
		       (Cindex1, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 12699
		    case apply 'enc_AlgorithmIdentifier'/2
			     (Cindex2, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  %% Line 12704
			  case apply 'encode_bit_string'/4
				   ([], Cindex3, [], [#{#<3>(8,1,'integer',['unsigned'|['big']])}#]) of
			    <{EncBytes3,EncLen3}> when 'true' ->
				let <BytesSoFar> =
				    %% Line 12706
				    [EncBytes1|[EncBytes2|[EncBytes3|[]]]]
				in  let <_cor7> =
					%% Line 12707
					call 'erlang':'+'
					    (EncLen1, EncLen2)
				    in  let <LenSoFar> =
					    %% Line 12707
					    call 'erlang':'+'
						(_cor7, EncLen3)
					in  %% Line 12708
					    apply 'encode_tags'/3
						(_cor0, BytesSoFar, LenSoFar)
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_CertificateList'/1 =
    %% Line 12711
    fun (_cor0) ->
	%% Line 12712
	apply 'dec_CertificateList'/2
	    (_cor0, [16])
'dec_CertificateList'/2 =
    %% Line 12714
    fun (_cor1,_cor0) ->
	%% Line 12723
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 12724
		  apply 'dec_TBSCertList'/2
		      (V1, [16])
	      in  %% Line 12729
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 12730
			    apply 'dec_AlgorithmIdentifier'/2
				(V2, [16])
			in  %% Line 12735
			    case Tlv3 of
			      <[V3|Tlv4]> when 'true' ->
				  let <Term3> =
				      %% Line 12736
				      apply 'decode_compact_bit_string'/2
					  (V3, [3])
				  in  do  %% Line 12738
					  case Tlv4 of
					    %% Line 12739
					    <[]> when 'true' ->
						'ok'
					    %% Line 12739
					    <_cor12> when 'true' ->
						call 'erlang':'exit'
						    ({'error',{'asn1',{'unexpected',Tlv4}}})
					  end
					  %% Line 12741
					  {'CertificateList',Term1,Term2,Term3}
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_Extension'/1 =
    %% Line 12748
    fun (_cor0) ->
	%% Line 12749
	apply 'enc_Extension'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_Extension'/2 =
    %% Line 12751
    fun (_cor1,_cor0) ->
	%% Line 12752
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2,Cindex3}> when 'true' ->
	      %% Line 12757
	      case apply 'encode_object_identifier'/2
		       (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    let <_cor5> =
			%% Line 12762
			case apply 'is_default_10'/1
				 (Cindex2) of
			  %% Line 12763
			  <'true'> when 'true' ->
			      {[],0}
			  %% Line 12764
			  <'false'> when 'true' ->
			      %% Line 12765
			      apply 'encode_boolean'/2
				  (Cindex2, [#{#<1>(8,1,'integer',['unsigned'|['big']])}#])
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor4})
			    -| ['compiler_generated'] )
			end
		    in  %% Line 12762
			case _cor5 of
			  <{EncBytes2,EncLen2}> when 'true' ->
			      %% Line 12771
			      case apply 'encode_restricted_string'/2
				       (Cindex3, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#]) of
				<{EncBytes3,EncLen3}> when 'true' ->
				    let <BytesSoFar> =
					%% Line 12773
					[EncBytes1|[EncBytes2|[EncBytes3|[]]]]
				    in  let <_cor9> =
					    %% Line 12774
					    call 'erlang':'+'
						(EncLen1, EncLen2)
					in  let <LenSoFar> =
						%% Line 12774
						call 'erlang':'+'
						    (_cor9, EncLen3)
					    in  %% Line 12775
						apply 'encode_tags'/3
						    (_cor0, BytesSoFar, LenSoFar)
				( <_cor7> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor7})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_Extension'/1 =
    %% Line 12778
    fun (_cor0) ->
	%% Line 12779
	apply 'dec_Extension'/2
	    (_cor0, [16])
'dec_Extension'/2 =
    %% Line 12781
    fun (_cor1,_cor0) ->
	%% Line 12790
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 12791
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  let <Term2,Tlv3> =
		      %% Line 12796
		      case Tlv2 of
			%% Line 12797
			<[{1,V2}|TempTlv3]> when 'true' ->
			    let <_cor5> =
				%% Line 12798
				apply 'decode_boolean'/2
				    (V2, [])
			    in  <_cor5,%% Line 12798
				       TempTlv3>
			%% Line 12799
			<_cor15> when 'true' ->
			    %% Line 12800
			    <'false',Tlv2>
		      end
		  in  %% Line 12806
		      case Tlv3 of
			<[V3|Tlv4]> when 'true' ->
			    let <_cor10> =
				%% Line 12808
				apply 'decode_restricted_string'/2
				    (V3, [4])
			    in  let <Term3> =
				    %% Line 12808
				    call 'erlang':'binary_to_list'
					(_cor10)
				in  do  %% Line 12812
					case Tlv4 of
					  %% Line 12813
					  <[]> when 'true' ->
					      'ok'
					  %% Line 12813
					  <_cor16> when 'true' ->
					      call 'erlang':'exit'
						  ({'error',{'asn1',{'unexpected',Tlv4}}})
					end
					%% Line 12815
					{'Extension',Term1,Term2,Term3}
			( <_cor9> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor9})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_Extensions'/1 =
    %% Line 12822
    fun (_cor0) ->
	%% Line 12823
	apply 'enc_Extensions'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_Extensions'/2 =
    %% Line 12825
    fun (_cor1,_cor0) ->
	%% Line 12826
	case apply 'enc_Extensions_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 12827
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_Extensions_components'/3 =
    %% Line 12829
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 12830
		  call 'lists':'reverse'
		      (AccBytes)
	      in  %% Line 12830
		  {_cor3,AccLen}
	  %% Line 12832
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 12833
	      case apply 'enc_Extension'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 12834
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 12834
			apply 'enc_Extensions_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_Extensions_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_Extensions'/1 =
    %% Line 12838
    fun (_cor0) ->
	%% Line 12839
	apply 'dec_Extensions'/2
	    (_cor0, [16])
'dec_Extensions'/2 =
    %% Line 12841
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 12845
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 12846
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_Extension'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'enc_SubjectPublicKeyInfo'/1 =
    %% Line 12854
    fun (_cor0) ->
	%% Line 12855
	apply 'enc_SubjectPublicKeyInfo'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_SubjectPublicKeyInfo'/2 =
    %% Line 12857
    fun (_cor1,_cor0) ->
	%% Line 12858
	case _cor1 of
	  <{_cor9,Cindex1,Cindex2}> when 'true' ->
	      %% Line 12863
	      case apply 'enc_AlgorithmIdentifier'/2
		       (Cindex1, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 12868
		    case apply 'encode_bit_string'/4
			     ([], Cindex2, [], [#{#<3>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <BytesSoFar> =
			      %% Line 12870
			      [EncBytes1|[EncBytes2|[]]]
			  in  let <LenSoFar> =
				  %% Line 12871
				  call 'erlang':'+'
				      (EncLen1, EncLen2)
			      in  %% Line 12872
				  apply 'encode_tags'/3
				      (_cor0, BytesSoFar, LenSoFar)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_SubjectPublicKeyInfo'/1 =
    %% Line 12875
    fun (_cor0) ->
	%% Line 12876
	apply 'dec_SubjectPublicKeyInfo'/2
	    (_cor0, [16])
'dec_SubjectPublicKeyInfo'/2 =
    %% Line 12878
    fun (_cor1,_cor0) ->
	%% Line 12887
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 12888
		  apply 'dec_AlgorithmIdentifier'/2
		      (V1, [16])
	      in  %% Line 12893
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 12894
			    apply 'decode_compact_bit_string'/2
				(V2, [3])
			in  do  %% Line 12896
				case Tlv3 of
				  %% Line 12897
				  <[]> when 'true' ->
				      'ok'
				  %% Line 12897
				  <_cor10> when 'true' ->
				      call 'erlang':'exit'
					  ({'error',{'asn1',{'unexpected',Tlv3}}})
				end
				%% Line 12899
				{'SubjectPublicKeyInfo',Term1,Term2}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_UniqueIdentifier'/1 =
    %% Line 12906
    fun (_cor0) ->
	%% Line 12907
	apply 'enc_UniqueIdentifier'/2
	    (_cor0, [#{#<3>(8,1,'integer',['unsigned'|['big']])}#])
'enc_UniqueIdentifier'/2 =
    %% Line 12909
    fun (_cor1,_cor0) ->
	%% Line 12910
	apply 'encode_bit_string'/4
	    ([], _cor1, [], _cor0)
'dec_UniqueIdentifier'/1 =
    %% Line 12913
    fun (_cor0) ->
	%% Line 12914
	apply 'dec_UniqueIdentifier'/2
	    (_cor0, [3])
'dec_UniqueIdentifier'/2 =
    %% Line 12916
    fun (_cor1,_cor0) ->
	%% Line 12917
	apply 'decode_compact_bit_string'/2
	    (_cor1, _cor0)
'enc_Time'/1 =
    %% Line 12924
    fun (_cor0) ->
	%% Line 12925
	apply 'enc_Time'/2
	    (_cor0, [])
'enc_Time'/2 =
    %% Line 12927
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 12928
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 12929
	      <'utcTime'> when 'true' ->
		  let <_cor2> =
		      %% Line 12930
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 12930
		      apply 'encode_restricted_string'/2
			  (_cor2, [#{#<23>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 12931
	      <'generalTime'> when 'true' ->
		  let <_cor3> =
		      %% Line 12932
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 12932
		      apply 'encode_restricted_string'/2
			  (_cor3, [#{#<24>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 12933
	      <Else> when 'true' ->
		  %% Line 12934
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 12928
	    case _cor5 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 12937
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor6})
		-| ['compiler_generated'] )
	    end
'dec_Time'/1 =
    %% Line 12942
    fun (_cor0) ->
	%% Line 12943
	apply 'dec_Time'/2
	    (_cor0, [])
'dec_Time'/2 =
    %% Line 12945
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 12946
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 12947
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor12> when 'true' ->
		      Tlv1
		end
	    in  %% Line 12947
		case _cor4 of
		  %% Line 12950
		  <{23,V1}> when 'true' ->
		      let <_cor5> =
			  %% Line 12952
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <_cor6> =
			      %% Line 12952
			      call 'erlang':'binary_to_list'
				  (_cor5)
			  in  %% Line 12951
			      {'utcTime',_cor6}
		  %% Line 12958
		  <{24,V1}> when 'true' ->
		      let <_cor7> =
			  %% Line 12960
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <_cor8> =
			      %% Line 12960
			      call 'erlang':'binary_to_list'
				  (_cor7)
			  in  %% Line 12959
			      {'generalTime',_cor8}
		  %% Line 12964
		  <Else> when 'true' ->
		      %% Line 12965
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'enc_Validity'/1 =
    %% Line 12973
    fun (_cor0) ->
	%% Line 12974
	apply 'enc_Validity'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_Validity'/2 =
    %% Line 12976
    fun (_cor1,_cor0) ->
	%% Line 12977
	case _cor1 of
	  <{_cor9,Cindex1,Cindex2}> when 'true' ->
	      %% Line 12982
	      case apply 'enc_Time'/2
		       (Cindex1, []) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 12987
		    case apply 'enc_Time'/2
			     (Cindex2, []) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <BytesSoFar> =
			      %% Line 12989
			      [EncBytes1|[EncBytes2|[]]]
			  in  let <LenSoFar> =
				  %% Line 12990
				  call 'erlang':'+'
				      (EncLen1, EncLen2)
			      in  %% Line 12991
				  apply 'encode_tags'/3
				      (_cor0, BytesSoFar, LenSoFar)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_Validity'/1 =
    %% Line 12994
    fun (_cor0) ->
	%% Line 12995
	apply 'dec_Validity'/2
	    (_cor0, [16])
'dec_Validity'/2 =
    %% Line 12997
    fun (_cor1,_cor0) ->
	%% Line 13006
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 13007
		  apply 'dec_Time'/2
		      (V1, [])
	      in  %% Line 13012
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 13013
			    apply 'dec_Time'/2
				(V2, [])
			in  do  %% Line 13015
				case Tlv3 of
				  %% Line 13016
				  <[]> when 'true' ->
				      'ok'
				  %% Line 13016
				  <_cor10> when 'true' ->
				      call 'erlang':'exit'
					  ({'error',{'asn1',{'unexpected',Tlv3}}})
				end
				%% Line 13018
				{'Validity',Term1,Term2}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_CertificateSerialNumber'/1 =
    %% Line 13025
    fun (_cor0) ->
	%% Line 13026
	apply 'enc_CertificateSerialNumber'/2
	    (_cor0, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
'enc_CertificateSerialNumber'/2 =
    %% Line 13028
    fun (_cor1,_cor0) ->
	%% Line 13029
	apply 'encode_integer'/2
	    (_cor1, _cor0)
'dec_CertificateSerialNumber'/1 =
    %% Line 13032
    fun (_cor0) ->
	%% Line 13033
	apply 'dec_CertificateSerialNumber'/2
	    (_cor0, [2])
'dec_CertificateSerialNumber'/2 =
    %% Line 13035
    fun (_cor1,_cor0) ->
	%% Line 13036
	apply 'decode_integer'/2
	    (_cor1, _cor0)
'enc_VersionPKIX1Explicit88'/1 =
    %% Line 13043
    fun (_cor0) ->
	%% Line 13044
	apply 'enc_VersionPKIX1Explicit88'/2
	    (_cor0, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
'enc_VersionPKIX1Explicit88'/2 =
    %% Line 13046
    fun (_cor1,_cor0) ->
	%% Line 13047
	apply 'encode_integer'/3
	    (_cor1, [{'v1',0}|[{'v2',1}|[{'v3',2}]]], _cor0)
'dec_VersionPKIX1Explicit88'/1 =
    %% Line 13050
    fun (_cor0) ->
	%% Line 13051
	apply 'dec_VersionPKIX1Explicit88'/2
	    (_cor0, [2])
'dec_VersionPKIX1Explicit88'/2 =
    %% Line 13053
    fun (_cor1,_cor0) ->
	let <Val1> =
	    %% Line 13055
	    apply 'decode_integer'/2
		(_cor1, _cor0)
	in  %% Line 13056
	    apply 'number2name'/2
		(Val1, [{'v1',0}|[{'v2',1}|[{'v3',2}]]])
'enc_TBSCertificate'/1 =
    %% Line 13065
    fun (_cor0) ->
	%% Line 13066
	apply 'enc_TBSCertificate'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_TBSCertificate'/2 =
    %% Line 13068
    fun (_cor1,_cor0) ->
	%% Line 13069
	case _cor1 of
	  <{_cor33,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6,Cindex7,Cindex8,Cindex9,Cindex10}> when 'true' ->
	      let <_cor4> =
		  %% Line 13074
		  case apply 'is_default_11'/1
			   (Cindex1) of
		    %% Line 13075
		    <'true'> when 'true' ->
			{[],0}
		    %% Line 13076
		    <'false'> when 'true' ->
			%% Line 13077
			apply 'encode_integer'/3
			    (Cindex1, [{'v1',0}|[{'v2',1}|[{'v3',2}]]], [#{#<2>(8,1,'integer',['unsigned'|['big']])}#|[#{#<160>(8,1,'integer',['unsigned'|['big']])}#]])
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 13074
		  case _cor4 of
		    <{EncBytes1,EncLen1}> when 'true' ->
			%% Line 13083
			case apply 'encode_integer'/2
				 (Cindex2, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
			  <{EncBytes2,EncLen2}> when 'true' ->
			      %% Line 13088
			      case apply 'enc_AlgorithmIdentifier'/2
				       (Cindex3, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
				<{EncBytes3,EncLen3}> when 'true' ->
				    %% Line 13093
				    case apply 'enc_Name'/2
					     (Cindex4, []) of
				      <{EncBytes4,EncLen4}> when 'true' ->
					  %% Line 13098
					  case apply 'enc_Validity'/2
						   (Cindex5, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
					    <{EncBytes5,EncLen5}> when 'true' ->
						%% Line 13103
						case apply 'enc_Name'/2
							 (Cindex6, []) of
						  <{EncBytes6,EncLen6}> when 'true' ->
						      %% Line 13108
						      case apply 'enc_SubjectPublicKeyInfo'/2
							       (Cindex7, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
							<{EncBytes7,EncLen7}> when 'true' ->
							    let <_cor13> =
								%% Line 13113
								case Cindex8 of
								  %% Line 13114
								  <'asn1_NOVALUE'> when 'true' ->
								      {#{}#,0}
								  %% Line 13115
								  <_cor34> when 'true' ->
								      %% Line 13116
								      apply 'encode_bit_string'/4
									  ([], Cindex8, [], [#{#<129>(8,1,'integer',['unsigned'|['big']])}#])
								end
							    in  %% Line 13113
								case _cor13 of
								  <{EncBytes8,EncLen8}> when 'true' ->
								      let <_cor16> =
									  %% Line 13122
									  case Cindex9 of
									    %% Line 13123
									    <'asn1_NOVALUE'> when 'true' ->
										{#{}#,0}
									    %% Line 13124
									    <_cor35> when 'true' ->
										%% Line 13125
										apply 'encode_bit_string'/4
										    ([], Cindex9, [], [#{#<130>(8,1,'integer',['unsigned'|['big']])}#])
									  end
								      in  %% Line 13122
									  case _cor16 of
									    <{EncBytes9,EncLen9}> when 'true' ->
										let <_cor19> =
										    %% Line 13131
										    case Cindex10 of
										      %% Line 13132
										      <'asn1_NOVALUE'> when 'true' ->
											  {#{}#,0}
										      %% Line 13133
										      <_cor36> when 'true' ->
											  %% Line 13134
											  apply 'enc_Extensions'/2
											      (Cindex10, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#|[#{#<163>(8,1,'integer',['unsigned'|['big']])}#]])
										    end
										in  %% Line 13131
										    case _cor19 of
										      <{EncBytes10,EncLen10}> when 'true' ->
											  let <BytesSoFar> =
											      %% Line 13137
											      [EncBytes1|[EncBytes2|[EncBytes3|[EncBytes4|[EncBytes5|[EncBytes6|[EncBytes7|[EncBytes8|[EncBytes9|[EncBytes10|[]]]]]]]]]]]
											  in  let <_cor22> =
												  %% Line 13138
												  call 'erlang':'+'
												      (EncLen1, EncLen2)
											      in  let <_cor23> =
												      %% Line 13138
												      call 'erlang':'+'
													  (_cor22, EncLen3)
												  in  let <_cor24> =
													  %% Line 13138
													  call 'erlang':'+'
													      (_cor23, EncLen4)
												      in  let <_cor25> =
													      %% Line 13138
													      call 'erlang':'+'
														  (_cor24, EncLen5)
													  in  let <_cor26> =
														  %% Line 13138
														  call 'erlang':'+'
														      (_cor25, EncLen6)
													      in  let <_cor27> =
														      %% Line 13138
														      call 'erlang':'+'
															  (_cor26, EncLen7)
														  in  let <_cor28> =
															  %% Line 13138
															  call 'erlang':'+'
															      (_cor27, EncLen8)
														      in  let <_cor29> =
															      %% Line 13138
															      call 'erlang':'+'
																  (_cor28, EncLen9)
															  in  let <LenSoFar> =
																  %% Line 13138
																  call 'erlang':'+'
																      (_cor29, EncLen10)
															      in  %% Line 13139
																  apply 'encode_tags'/3
																      (_cor0, BytesSoFar, LenSoFar)
										      ( <_cor20> when 'true' ->
											    primop 'match_fail'
												({'badmatch',_cor20})
											-| ['compiler_generated'] )
										    end
									    ( <_cor17> when 'true' ->
										  primop 'match_fail'
										      ({'badmatch',_cor17})
									      -| ['compiler_generated'] )
									  end
								  ( <_cor14> when 'true' ->
									primop 'match_fail'
									    ({'badmatch',_cor14})
								    -| ['compiler_generated'] )
								end
							( <_cor11> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor11})
							  -| ['compiler_generated'] )
						      end
						  ( <_cor10> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor10})
						    -| ['compiler_generated'] )
						end
					    ( <_cor9> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor9})
					      -| ['compiler_generated'] )
					  end
				      ( <_cor8> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor8})
					-| ['compiler_generated'] )
				    end
				( <_cor7> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor7})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_TBSCertificate'/1 =
    %% Line 13142
    fun (_cor0) ->
	%% Line 13143
	apply 'dec_TBSCertificate'/2
	    (_cor0, [16])
'dec_TBSCertificate'/2 =
    %% Line 13145
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 13149
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <Term1,Tlv2> =
		%% Line 13154
		case Tlv1 of
		  %% Line 13155
		  <[{131072,V1}|TempTlv2]> when 'true' ->
		      let <Val1> =
			  %% Line 13157
			  apply 'decode_integer'/2
			      (V1, [2])
		      in  let <_cor4> =
			      %% Line 13158
			      apply 'number2name'/2
				  (Val1, [{'v1',0}|[{'v2',1}|[{'v3',2}]]])
			  in  <_cor4,%% Line 13160
				     TempTlv2>
		  %% Line 13161
		  <_cor35> when 'true' ->
		      %% Line 13162
		      <0,Tlv1>
		end
	    in  %% Line 13168
		case Tlv2 of
		  <[V2|Tlv3]> when 'true' ->
		      let <Term2> =
			  %% Line 13169
			  apply 'decode_integer'/2
			      (V2, [2])
		      in  %% Line 13174
			  case Tlv3 of
			    <[V3|Tlv4]> when 'true' ->
				let <Term3> =
				    %% Line 13175
				    apply 'dec_AlgorithmIdentifier'/2
					(V3, [16])
				in  %% Line 13180
				    case Tlv4 of
				      <[V4|Tlv5]> when 'true' ->
					  let <Term4> =
					      %% Line 13181
					      apply 'dec_Name'/2
						  (V4, [])
					  in  %% Line 13186
					      case Tlv5 of
						<[V5|Tlv6]> when 'true' ->
						    let <Term5> =
							%% Line 13187
							apply 'dec_Validity'/2
							    (V5, [16])
						    in  %% Line 13192
							case Tlv6 of
							  <[V6|Tlv7]> when 'true' ->
							      let <Term6> =
								  %% Line 13193
								  apply 'dec_Name'/2
								      (V6, [])
							      in  %% Line 13198
								  case Tlv7 of
								    <[V7|Tlv8]> when 'true' ->
									let <Term7> =
									    %% Line 13199
									    apply 'dec_SubjectPublicKeyInfo'/2
										(V7, [16])
									in  let <Term8,Tlv9> =
										%% Line 13204
										case Tlv8 of
										  %% Line 13205
										  <[{131073,V8}|TempTlv9]> when 'true' ->
										      let <_cor20> =
											  %% Line 13206
											  apply 'decode_compact_bit_string'/2
											      (V8, [])
										      in  <_cor20,%% Line 13206
												  TempTlv9>
										  %% Line 13207
										  <_cor36> when 'true' ->
										      %% Line 13208
										      <'asn1_NOVALUE',Tlv8>
										end
									    in  let <Term9,Tlv10> =
										    %% Line 13214
										    case Tlv9 of
										      %% Line 13215
										      <[{131074,V9}|TempTlv10]> when 'true' ->
											  let <_cor24> =
											      %% Line 13216
											      apply 'decode_compact_bit_string'/2
												  (V9, [])
											  in  <_cor24,%% Line 13216
												      TempTlv10>
										      %% Line 13217
										      <_cor37> when 'true' ->
											  %% Line 13218
											  <'asn1_NOVALUE',Tlv9>
										    end
										in  let <Term10,Tlv11> =
											%% Line 13224
											case Tlv10 of
											  %% Line 13225
											  <[{131075,V10}|TempTlv11]> when 'true' ->
											      let <_cor28> =
												  %% Line 13226
												  apply 'dec_Extensions'/2
												      (V10, [16])
											      in  <_cor28,%% Line 13226
													  TempTlv11>
											  %% Line 13227
											  <_cor38> when 'true' ->
											      %% Line 13228
											      <'asn1_NOVALUE',Tlv10>
											end
										    in  do  %% Line 13231
											    case Tlv11 of
											      %% Line 13232
											      <[]> when 'true' ->
												  'ok'
											      %% Line 13232
											      <_cor39> when 'true' ->
												  call 'erlang':'exit'
												      ({'error',{'asn1',{'unexpected',Tlv11}}})
											    end
											    %% Line 13234
											    {'TBSCertificate',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10}
								    ( <_cor18> when 'true' ->
									  primop 'match_fail'
									      ({'badmatch',_cor18})
								      -| ['compiler_generated'] )
								  end
							  ( <_cor16> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_cor16})
							    -| ['compiler_generated'] )
							end
						( <_cor14> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor14})
						  -| ['compiler_generated'] )
					      end
				      ( <_cor12> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor12})
					-| ['compiler_generated'] )
				    end
			    ( <_cor10> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor10})
			      -| ['compiler_generated'] )
			  end
		  ( <_cor8> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor8})
		    -| ['compiler_generated'] )
		end
'enc_Certificate'/1 =
    %% Line 13241
    fun (_cor0) ->
	%% Line 13242
	apply 'enc_Certificate'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_Certificate'/2 =
    %% Line 13244
    fun (_cor1,_cor0) ->
	%% Line 13245
	case _cor1 of
	  <{_cor11,Cindex1,Cindex2,Cindex3}> when 'true' ->
	      %% Line 13250
	      case apply 'enc_TBSCertificate'/2
		       (Cindex1, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 13255
		    case apply 'enc_AlgorithmIdentifier'/2
			     (Cindex2, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  %% Line 13260
			  case apply 'encode_bit_string'/4
				   ([], Cindex3, [], [#{#<3>(8,1,'integer',['unsigned'|['big']])}#]) of
			    <{EncBytes3,EncLen3}> when 'true' ->
				let <BytesSoFar> =
				    %% Line 13262
				    [EncBytes1|[EncBytes2|[EncBytes3|[]]]]
				in  let <_cor7> =
					%% Line 13263
					call 'erlang':'+'
					    (EncLen1, EncLen2)
				    in  let <LenSoFar> =
					    %% Line 13263
					    call 'erlang':'+'
						(_cor7, EncLen3)
					in  %% Line 13264
					    apply 'encode_tags'/3
						(_cor0, BytesSoFar, LenSoFar)
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_Certificate'/1 =
    %% Line 13267
    fun (_cor0) ->
	%% Line 13268
	apply 'dec_Certificate'/2
	    (_cor0, [16])
'dec_Certificate'/2 =
    %% Line 13270
    fun (_cor1,_cor0) ->
	%% Line 13279
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 13280
		  apply 'dec_TBSCertificate'/2
		      (V1, [16])
	      in  %% Line 13285
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 13286
			    apply 'dec_AlgorithmIdentifier'/2
				(V2, [16])
			in  %% Line 13291
			    case Tlv3 of
			      <[V3|Tlv4]> when 'true' ->
				  let <Term3> =
				      %% Line 13292
				      apply 'decode_compact_bit_string'/2
					  (V3, [3])
				  in  do  %% Line 13294
					  case Tlv4 of
					    %% Line 13295
					    <[]> when 'true' ->
						'ok'
					    %% Line 13295
					    <_cor12> when 'true' ->
						call 'erlang':'exit'
						    ({'error',{'asn1',{'unexpected',Tlv4}}})
					  end
					  %% Line 13297
					  {'Certificate',Term1,Term2,Term3}
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_DirectoryString'/1 =
    %% Line 13304
    fun (_cor0) ->
	%% Line 13305
	apply 'enc_DirectoryString'/2
	    (_cor0, [])
'enc_DirectoryString'/2 =
    %% Line 13307
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 13308
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 13309
	      <'teletexString'> when 'true' ->
		  let <_cor2> =
		      %% Line 13310
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 13310
		      apply 'encode_restricted_string'/2
			  (_cor2, [#{#<20>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 13311
	      <'printableString'> when 'true' ->
		  let <_cor3> =
		      %% Line 13312
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 13312
		      apply 'encode_restricted_string'/2
			  (_cor3, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 13313
	      <'universalString'> when 'true' ->
		  let <_cor4> =
		      %% Line 13314
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 13314
		      apply 'encode_universal_string'/2
			  (_cor4, [#{#<28>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 13315
	      <'utf8String'> when 'true' ->
		  let <_cor5> =
		      %% Line 13316
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 13316
		      apply 'encode_UTF8_string'/2
			  (_cor5, [#{#<12>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 13317
	      <'bmpString'> when 'true' ->
		  let <_cor6> =
		      %% Line 13318
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 13318
		      apply 'encode_BMP_string'/2
			  (_cor6, [#{#<30>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 13319
	      <Else> when 'true' ->
		  %% Line 13320
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 13308
	    case _cor8 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 13323
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor9> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor9})
		-| ['compiler_generated'] )
	    end
'dec_DirectoryString'/1 =
    %% Line 13328
    fun (_cor0) ->
	%% Line 13329
	apply 'dec_DirectoryString'/2
	    (_cor0, [])
'dec_DirectoryString'/2 =
    %% Line 13331
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 13332
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 13333
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor29> when 'true' ->
		      Tlv1
		end
	    in  %% Line 13333
		case _cor4 of
		  %% Line 13336
		  <{20,V1}> when 'true' ->
		      let <Val1> =
			  %% Line 13338
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <C1> =
			      %% Line 13339
			      call 'erlang':'byte_size'
				  (Val1)
			  in  %% Line 13340
			      case <> of
				<>
				    when let <_cor7> =
					  call 'erlang':'=<'
					      (1, C1)
				      in  let <_cor8> =
					      call 'erlang':'=<'
						  (C1, 'MAX')
					  in  call 'erlang':'and'
						  (_cor7, _cor8) ->
				    let <_cor9> =
					%% Line 13341
					call 'erlang':'binary_to_list'
					    (Val1)
				    in  {'teletexString',_cor9}
				%% Line 13342
				<> when 'true' ->
				    %% Line 13343
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 13349
		  <{19,V1}> when 'true' ->
		      let <Val2> =
			  %% Line 13351
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <C2> =
			      %% Line 13352
			      call 'erlang':'byte_size'
				  (Val2)
			  in  %% Line 13353
			      case <> of
				<>
				    when let <_cor12> =
					  call 'erlang':'=<'
					      (1, C2)
				      in  let <_cor13> =
					      call 'erlang':'=<'
						  (C2, 'MAX')
					  in  call 'erlang':'and'
						  (_cor12, _cor13) ->
				    let <_cor14> =
					%% Line 13354
					call 'erlang':'binary_to_list'
					    (Val2)
				    in  {'printableString',_cor14}
				%% Line 13355
				<> when 'true' ->
				    %% Line 13356
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 13362
		  <{28,V1}> when 'true' ->
		      let <Val3> =
			  %% Line 13364
			  apply 'decode_universal_string'/2
			      (V1, [])
		      in  let <C3> =
			      %% Line 13365
			      call 'erlang':'length'
				  (Val3)
			  in  %% Line 13366
			      case <> of
				<>
				    when let <_cor17> =
					  call 'erlang':'=<'
					      (1, C3)
				      in  let <_cor18> =
					      call 'erlang':'=<'
						  (C3, 'MAX')
					  in  call 'erlang':'and'
						  (_cor17, _cor18) ->
				    {'universalString',%% Line 13367
						       Val3}
				%% Line 13368
				<> when 'true' ->
				    %% Line 13369
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 13375
		  <{12,V1}> when 'true' ->
		      let <_cor20> =
			  %% Line 13376
			  apply 'decode_UTF8_string'/2
			      (V1, [])
		      in  %% Line 13376
			  {'utf8String',_cor20}
		  %% Line 13380
		  <{30,V1}> when 'true' ->
		      let <Val4> =
			  %% Line 13382
			  apply 'decode_BMP_string'/2
			      (V1, [])
		      in  let <C4> =
			      %% Line 13383
			      call 'erlang':'length'
				  (Val4)
			  in  %% Line 13384
			      case <> of
				<>
				    when let <_cor23> =
					  call 'erlang':'=<'
					      (1, C4)
				      in  let <_cor24> =
					      call 'erlang':'=<'
						  (C4, 'MAX')
					  in  call 'erlang':'and'
						  (_cor23, _cor24) ->
				    {'bmpString',%% Line 13385
						 Val4}
				%% Line 13386
				<> when 'true' ->
				    %% Line 13387
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 13391
		  <Else> when 'true' ->
		      %% Line 13392
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'enc_RelativeDistinguishedName'/1 =
    %% Line 13400
    fun (_cor0) ->
	%% Line 13401
	apply 'enc_RelativeDistinguishedName'/2
	    (_cor0, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
'enc_RelativeDistinguishedName'/2 =
    %% Line 13403
    fun (_cor1,_cor0) ->
	%% Line 13404
	case apply 'enc_RelativeDistinguishedName_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 13405
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_RelativeDistinguishedName_components'/3 =
    %% Line 13407
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 13408
		  apply 'dynamicsort_SETOF'/1
		      (AccBytes)
	      in  %% Line 13408
		  {_cor3,AccLen}
	  %% Line 13410
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 13411
	      case apply 'enc_AttributeTypeAndValue'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 13412
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 13412
			apply 'enc_RelativeDistinguishedName_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_RelativeDistinguishedName_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_RelativeDistinguishedName'/1 =
    %% Line 13416
    fun (_cor0) ->
	%% Line 13417
	apply 'dec_RelativeDistinguishedName'/2
	    (_cor0, [17])
'dec_RelativeDistinguishedName'/2 =
    %% Line 13419
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 13423
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 13424
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_AttributeTypeAndValue'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'enc_DistinguishedName'/1 =
    %% Line 13432
    fun (_cor0) ->
	%% Line 13433
	apply 'enc_DistinguishedName'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_DistinguishedName'/2 =
    %% Line 13435
    fun (_cor1,_cor0) ->
	%% Line 13436
	apply 'enc_RDNSequence'/2
	    (_cor1, _cor0)
'dec_DistinguishedName'/1 =
    %% Line 13439
    fun (_cor0) ->
	%% Line 13440
	apply 'dec_DistinguishedName'/2
	    (_cor0, [16])
'dec_DistinguishedName'/2 =
    %% Line 13442
    fun (_cor1,_cor0) ->
	%% Line 13443
	apply 'dec_RDNSequence'/2
	    (_cor1, _cor0)
'enc_RDNSequence'/1 =
    %% Line 13450
    fun (_cor0) ->
	%% Line 13451
	apply 'enc_RDNSequence'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_RDNSequence'/2 =
    %% Line 13453
    fun (_cor1,_cor0) ->
	%% Line 13454
	case apply 'enc_RDNSequence_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 13455
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_RDNSequence_components'/3 =
    %% Line 13457
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 13458
		  call 'lists':'reverse'
		      (AccBytes)
	      in  %% Line 13458
		  {_cor3,AccLen}
	  %% Line 13460
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 13461
	      case apply 'enc_RelativeDistinguishedName'/2
		       (H, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 13462
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 13462
			apply 'enc_RDNSequence_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_RDNSequence_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_RDNSequence'/1 =
    %% Line 13466
    fun (_cor0) ->
	%% Line 13467
	apply 'dec_RDNSequence'/2
	    (_cor0, [16])
'dec_RDNSequence'/2 =
    %% Line 13469
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 13473
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 13474
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_RelativeDistinguishedName'/2
					(V1, [17])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'enc_Name'/1 =
    %% Line 13482
    fun (_cor0) ->
	%% Line 13483
	apply 'enc_Name'/2
	    (_cor0, [])
'enc_Name'/2 =
    %% Line 13485
    fun (_cor1,_cor0) ->
	%% Line 13486
	case call 'erlang':'element'
		 (1, _cor1) of
	  %% Line 13487
	  <'rdnSequence'> when 'true' ->
	      let <_cor2> =
		  %% Line 13488
		  call 'erlang':'element'
		      (2, _cor1)
	      in  case %% Line 13488
		       apply 'enc_RDNSequence'/2
			   (_cor2, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		    <{EncBytes,EncLen}> when 'true' ->
			%% Line 13493
			apply 'encode_tags'/3
			    (_cor0, EncBytes, EncLen)
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  %% Line 13489
	  <Else> when 'true' ->
	      %% Line 13490
	      call 'erlang':'exit'
		  ({'error',{'asn1',{'invalid_choice_type',Else}}})
	end
'dec_Name'/1 =
    %% Line 13498
    fun (_cor0) ->
	%% Line 13499
	apply 'dec_Name'/2
	    (_cor0, [])
'dec_Name'/2 =
    %% Line 13501
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 13502
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 13503
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor9> when 'true' ->
		      Tlv1
		end
	    in  %% Line 13503
		case _cor4 of
		  %% Line 13506
		  <{16,V1}> when 'true' ->
		      let <_cor5> =
			  %% Line 13507
			  apply 'dec_RDNSequence'/2
			      (V1, [])
		      in  %% Line 13507
			  {'rdnSequence',_cor5}
		  %% Line 13509
		  <Else> when 'true' ->
		      %% Line 13510
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'enc_EmailAddress'/1 =
    %% Line 13518
    fun (_cor0) ->
	%% Line 13519
	apply 'enc_EmailAddress'/2
	    (_cor0, [#{#<22>(8,1,'integer',['unsigned'|['big']])}#])
'enc_EmailAddress'/2 =
    %% Line 13521
    fun (_cor1,_cor0) ->
	%% Line 13522
	apply 'encode_restricted_string'/2
	    (_cor1, _cor0)
'dec_EmailAddress'/1 =
    %% Line 13525
    fun (_cor0) ->
	%% Line 13526
	apply 'dec_EmailAddress'/2
	    (_cor0, [22])
'dec_EmailAddress'/2 =
    %% Line 13528
    fun (_cor1,_cor0) ->
	let <Val1> =
	    %% Line 13530
	    apply 'decode_restricted_string'/2
		(_cor1, _cor0)
	in  let <C1> =
		%% Line 13531
		call 'erlang':'byte_size'
		    (Val1)
	    in  %% Line 13532
		case <> of
		  <>
		      when let <_cor4> =
			    call 'erlang':'=<'
				(1, C1)
			in  let <_cor5> =
				call 'erlang':'=<'
				    (C1, 255)
			    in  call 'erlang':'and'
				    (_cor4, _cor5) ->
		      %% Line 13533
		      call 'erlang':'binary_to_list'
			  (Val1)
		  %% Line 13534
		  <> when 'true' ->
		      %% Line 13535
		      call 'erlang':'exit'
			  ({'error',{'asn1','bad_range'}})
		end
'enc_DomainComponent'/1 =
    %% Line 13544
    fun (_cor0) ->
	%% Line 13545
	apply 'enc_DomainComponent'/2
	    (_cor0, [#{#<22>(8,1,'integer',['unsigned'|['big']])}#])
'enc_DomainComponent'/2 =
    %% Line 13547
    fun (_cor1,_cor0) ->
	%% Line 13548
	apply 'encode_restricted_string'/2
	    (_cor1, _cor0)
'dec_DomainComponent'/1 =
    %% Line 13551
    fun (_cor0) ->
	%% Line 13552
	apply 'dec_DomainComponent'/2
	    (_cor0, [22])
'dec_DomainComponent'/2 =
    %% Line 13554
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 13556
	    apply 'decode_restricted_string'/2
		(_cor1, _cor0)
	in  %% Line 13556
	    call 'erlang':'binary_to_list'
		(_cor2)
'enc_X520Pseudonym'/1 =
    %% Line 13565
    fun (_cor0) ->
	%% Line 13566
	apply 'enc_X520Pseudonym'/2
	    (_cor0, [])
'enc_X520Pseudonym'/2 =
    %% Line 13568
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 13569
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 13570
	      <'teletexString'> when 'true' ->
		  let <_cor2> =
		      %% Line 13571
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 13571
		      apply 'encode_restricted_string'/2
			  (_cor2, [#{#<20>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 13572
	      <'printableString'> when 'true' ->
		  let <_cor3> =
		      %% Line 13573
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 13573
		      apply 'encode_restricted_string'/2
			  (_cor3, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 13574
	      <'universalString'> when 'true' ->
		  let <_cor4> =
		      %% Line 13575
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 13575
		      apply 'encode_universal_string'/2
			  (_cor4, [#{#<28>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 13576
	      <'utf8String'> when 'true' ->
		  let <_cor5> =
		      %% Line 13577
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 13577
		      apply 'encode_UTF8_string'/2
			  (_cor5, [#{#<12>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 13578
	      <'bmpString'> when 'true' ->
		  let <_cor6> =
		      %% Line 13579
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 13579
		      apply 'encode_BMP_string'/2
			  (_cor6, [#{#<30>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 13580
	      <Else> when 'true' ->
		  %% Line 13581
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 13569
	    case _cor8 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 13584
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor9> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor9})
		-| ['compiler_generated'] )
	    end
'dec_X520Pseudonym'/1 =
    %% Line 13589
    fun (_cor0) ->
	%% Line 13590
	apply 'dec_X520Pseudonym'/2
	    (_cor0, [])
'dec_X520Pseudonym'/2 =
    %% Line 13592
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 13593
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 13594
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor29> when 'true' ->
		      Tlv1
		end
	    in  %% Line 13594
		case _cor4 of
		  %% Line 13597
		  <{20,V1}> when 'true' ->
		      let <Val1> =
			  %% Line 13599
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <C1> =
			      %% Line 13600
			      call 'erlang':'byte_size'
				  (Val1)
			  in  %% Line 13601
			      case <> of
				<>
				    when let <_cor7> =
					  call 'erlang':'=<'
					      (1, C1)
				      in  let <_cor8> =
					      call 'erlang':'=<'
						  (C1, 128)
					  in  call 'erlang':'and'
						  (_cor7, _cor8) ->
				    let <_cor9> =
					%% Line 13602
					call 'erlang':'binary_to_list'
					    (Val1)
				    in  {'teletexString',_cor9}
				%% Line 13603
				<> when 'true' ->
				    %% Line 13604
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 13610
		  <{19,V1}> when 'true' ->
		      let <Val2> =
			  %% Line 13612
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <C2> =
			      %% Line 13613
			      call 'erlang':'byte_size'
				  (Val2)
			  in  %% Line 13614
			      case <> of
				<>
				    when let <_cor12> =
					  call 'erlang':'=<'
					      (1, C2)
				      in  let <_cor13> =
					      call 'erlang':'=<'
						  (C2, 128)
					  in  call 'erlang':'and'
						  (_cor12, _cor13) ->
				    let <_cor14> =
					%% Line 13615
					call 'erlang':'binary_to_list'
					    (Val2)
				    in  {'printableString',_cor14}
				%% Line 13616
				<> when 'true' ->
				    %% Line 13617
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 13623
		  <{28,V1}> when 'true' ->
		      let <Val3> =
			  %% Line 13625
			  apply 'decode_universal_string'/2
			      (V1, [])
		      in  let <C3> =
			      %% Line 13626
			      call 'erlang':'length'
				  (Val3)
			  in  %% Line 13627
			      case <> of
				<>
				    when let <_cor17> =
					  call 'erlang':'=<'
					      (1, C3)
				      in  let <_cor18> =
					      call 'erlang':'=<'
						  (C3, 128)
					  in  call 'erlang':'and'
						  (_cor17, _cor18) ->
				    {'universalString',%% Line 13628
						       Val3}
				%% Line 13629
				<> when 'true' ->
				    %% Line 13630
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 13636
		  <{12,V1}> when 'true' ->
		      let <_cor20> =
			  %% Line 13637
			  apply 'decode_UTF8_string'/2
			      (V1, [])
		      in  %% Line 13637
			  {'utf8String',_cor20}
		  %% Line 13641
		  <{30,V1}> when 'true' ->
		      let <Val4> =
			  %% Line 13643
			  apply 'decode_BMP_string'/2
			      (V1, [])
		      in  let <C4> =
			      %% Line 13644
			      call 'erlang':'length'
				  (Val4)
			  in  %% Line 13645
			      case <> of
				<>
				    when let <_cor23> =
					  call 'erlang':'=<'
					      (1, C4)
				      in  let <_cor24> =
					      call 'erlang':'=<'
						  (C4, 128)
					  in  call 'erlang':'and'
						  (_cor23, _cor24) ->
				    {'bmpString',%% Line 13646
						 Val4}
				%% Line 13647
				<> when 'true' ->
				    %% Line 13648
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 13652
		  <Else> when 'true' ->
		      %% Line 13653
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'enc_X520SerialNumber'/1 =
    %% Line 13661
    fun (_cor0) ->
	%% Line 13662
	apply 'enc_X520SerialNumber'/2
	    (_cor0, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#])
'enc_X520SerialNumber'/2 =
    %% Line 13664
    fun (_cor1,_cor0) ->
	%% Line 13665
	apply 'encode_restricted_string'/2
	    (_cor1, _cor0)
'dec_X520SerialNumber'/1 =
    %% Line 13668
    fun (_cor0) ->
	%% Line 13669
	apply 'dec_X520SerialNumber'/2
	    (_cor0, [19])
'dec_X520SerialNumber'/2 =
    %% Line 13671
    fun (_cor1,_cor0) ->
	let <Val1> =
	    %% Line 13673
	    apply 'decode_restricted_string'/2
		(_cor1, _cor0)
	in  let <C1> =
		%% Line 13674
		call 'erlang':'byte_size'
		    (Val1)
	    in  %% Line 13675
		case <> of
		  <>
		      when let <_cor4> =
			    call 'erlang':'=<'
				(1, C1)
			in  let <_cor5> =
				call 'erlang':'=<'
				    (C1, 64)
			    in  call 'erlang':'and'
				    (_cor4, _cor5) ->
		      %% Line 13676
		      call 'erlang':'binary_to_list'
			  (Val1)
		  %% Line 13677
		  <> when 'true' ->
		      %% Line 13678
		      call 'erlang':'exit'
			  ({'error',{'asn1','bad_range'}})
		end
'enc_X520countryName'/1 =
    %% Line 13687
    fun (_cor0) ->
	%% Line 13688
	apply 'enc_X520countryName'/2
	    (_cor0, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#])
'enc_X520countryName'/2 =
    %% Line 13690
    fun (_cor1,_cor0) ->
	%% Line 13691
	apply 'encode_restricted_string'/2
	    (_cor1, _cor0)
'dec_X520countryName'/1 =
    %% Line 13694
    fun (_cor0) ->
	%% Line 13695
	apply 'dec_X520countryName'/2
	    (_cor0, [19])
'dec_X520countryName'/2 =
    %% Line 13697
    fun (_cor1,_cor0) ->
	let <Val1> =
	    %% Line 13699
	    apply 'decode_restricted_string'/2
		(_cor1, _cor0)
	in  let <C1> =
		%% Line 13700
		call 'erlang':'byte_size'
		    (Val1)
	    in  %% Line 13701
		case <> of
		  <>
		      when call 'erlang':'=:='
			    (C1,
			     2) ->
		      %% Line 13702
		      call 'erlang':'binary_to_list'
			  (Val1)
		  %% Line 13703
		  <> when 'true' ->
		      %% Line 13704
		      call 'erlang':'exit'
			  ({'error',{'asn1','bad_range'}})
		end
'enc_X520dnQualifier'/1 =
    %% Line 13713
    fun (_cor0) ->
	%% Line 13714
	apply 'enc_X520dnQualifier'/2
	    (_cor0, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#])
'enc_X520dnQualifier'/2 =
    %% Line 13716
    fun (_cor1,_cor0) ->
	%% Line 13717
	apply 'encode_restricted_string'/2
	    (_cor1, _cor0)
'dec_X520dnQualifier'/1 =
    %% Line 13720
    fun (_cor0) ->
	%% Line 13721
	apply 'dec_X520dnQualifier'/2
	    (_cor0, [19])
'dec_X520dnQualifier'/2 =
    %% Line 13723
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 13725
	    apply 'decode_restricted_string'/2
		(_cor1, _cor0)
	in  %% Line 13725
	    call 'erlang':'binary_to_list'
		(_cor2)
'enc_X520Title'/1 =
    %% Line 13734
    fun (_cor0) ->
	%% Line 13735
	apply 'enc_X520Title'/2
	    (_cor0, [])
'enc_X520Title'/2 =
    %% Line 13737
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 13738
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 13739
	      <'teletexString'> when 'true' ->
		  let <_cor2> =
		      %% Line 13740
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 13740
		      apply 'encode_restricted_string'/2
			  (_cor2, [#{#<20>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 13741
	      <'printableString'> when 'true' ->
		  let <_cor3> =
		      %% Line 13742
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 13742
		      apply 'encode_restricted_string'/2
			  (_cor3, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 13743
	      <'universalString'> when 'true' ->
		  let <_cor4> =
		      %% Line 13744
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 13744
		      apply 'encode_universal_string'/2
			  (_cor4, [#{#<28>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 13745
	      <'utf8String'> when 'true' ->
		  let <_cor5> =
		      %% Line 13746
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 13746
		      apply 'encode_UTF8_string'/2
			  (_cor5, [#{#<12>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 13747
	      <'bmpString'> when 'true' ->
		  let <_cor6> =
		      %% Line 13748
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 13748
		      apply 'encode_BMP_string'/2
			  (_cor6, [#{#<30>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 13749
	      <Else> when 'true' ->
		  %% Line 13750
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 13738
	    case _cor8 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 13753
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor9> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor9})
		-| ['compiler_generated'] )
	    end
'dec_X520Title'/1 =
    %% Line 13758
    fun (_cor0) ->
	%% Line 13759
	apply 'dec_X520Title'/2
	    (_cor0, [])
'dec_X520Title'/2 =
    %% Line 13761
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 13762
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 13763
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor29> when 'true' ->
		      Tlv1
		end
	    in  %% Line 13763
		case _cor4 of
		  %% Line 13766
		  <{20,V1}> when 'true' ->
		      let <Val1> =
			  %% Line 13768
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <C1> =
			      %% Line 13769
			      call 'erlang':'byte_size'
				  (Val1)
			  in  %% Line 13770
			      case <> of
				<>
				    when let <_cor7> =
					  call 'erlang':'=<'
					      (1, C1)
				      in  let <_cor8> =
					      call 'erlang':'=<'
						  (C1, 64)
					  in  call 'erlang':'and'
						  (_cor7, _cor8) ->
				    let <_cor9> =
					%% Line 13771
					call 'erlang':'binary_to_list'
					    (Val1)
				    in  {'teletexString',_cor9}
				%% Line 13772
				<> when 'true' ->
				    %% Line 13773
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 13779
		  <{19,V1}> when 'true' ->
		      let <Val2> =
			  %% Line 13781
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <C2> =
			      %% Line 13782
			      call 'erlang':'byte_size'
				  (Val2)
			  in  %% Line 13783
			      case <> of
				<>
				    when let <_cor12> =
					  call 'erlang':'=<'
					      (1, C2)
				      in  let <_cor13> =
					      call 'erlang':'=<'
						  (C2, 64)
					  in  call 'erlang':'and'
						  (_cor12, _cor13) ->
				    let <_cor14> =
					%% Line 13784
					call 'erlang':'binary_to_list'
					    (Val2)
				    in  {'printableString',_cor14}
				%% Line 13785
				<> when 'true' ->
				    %% Line 13786
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 13792
		  <{28,V1}> when 'true' ->
		      let <Val3> =
			  %% Line 13794
			  apply 'decode_universal_string'/2
			      (V1, [])
		      in  let <C3> =
			      %% Line 13795
			      call 'erlang':'length'
				  (Val3)
			  in  %% Line 13796
			      case <> of
				<>
				    when let <_cor17> =
					  call 'erlang':'=<'
					      (1, C3)
				      in  let <_cor18> =
					      call 'erlang':'=<'
						  (C3, 64)
					  in  call 'erlang':'and'
						  (_cor17, _cor18) ->
				    {'universalString',%% Line 13797
						       Val3}
				%% Line 13798
				<> when 'true' ->
				    %% Line 13799
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 13805
		  <{12,V1}> when 'true' ->
		      let <_cor20> =
			  %% Line 13806
			  apply 'decode_UTF8_string'/2
			      (V1, [])
		      in  %% Line 13806
			  {'utf8String',_cor20}
		  %% Line 13810
		  <{30,V1}> when 'true' ->
		      let <Val4> =
			  %% Line 13812
			  apply 'decode_BMP_string'/2
			      (V1, [])
		      in  let <C4> =
			      %% Line 13813
			      call 'erlang':'length'
				  (Val4)
			  in  %% Line 13814
			      case <> of
				<>
				    when let <_cor23> =
					  call 'erlang':'=<'
					      (1, C4)
				      in  let <_cor24> =
					      call 'erlang':'=<'
						  (C4, 64)
					  in  call 'erlang':'and'
						  (_cor23, _cor24) ->
				    {'bmpString',%% Line 13815
						 Val4}
				%% Line 13816
				<> when 'true' ->
				    %% Line 13817
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 13821
		  <Else> when 'true' ->
		      %% Line 13822
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'enc_X520OrganizationalUnitName'/1 =
    %% Line 13830
    fun (_cor0) ->
	%% Line 13831
	apply 'enc_X520OrganizationalUnitName'/2
	    (_cor0, [])
'enc_X520OrganizationalUnitName'/2 =
    %% Line 13833
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 13834
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 13835
	      <'teletexString'> when 'true' ->
		  let <_cor2> =
		      %% Line 13836
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 13836
		      apply 'encode_restricted_string'/2
			  (_cor2, [#{#<20>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 13837
	      <'printableString'> when 'true' ->
		  let <_cor3> =
		      %% Line 13838
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 13838
		      apply 'encode_restricted_string'/2
			  (_cor3, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 13839
	      <'universalString'> when 'true' ->
		  let <_cor4> =
		      %% Line 13840
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 13840
		      apply 'encode_universal_string'/2
			  (_cor4, [#{#<28>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 13841
	      <'utf8String'> when 'true' ->
		  let <_cor5> =
		      %% Line 13842
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 13842
		      apply 'encode_UTF8_string'/2
			  (_cor5, [#{#<12>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 13843
	      <'bmpString'> when 'true' ->
		  let <_cor6> =
		      %% Line 13844
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 13844
		      apply 'encode_BMP_string'/2
			  (_cor6, [#{#<30>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 13845
	      <Else> when 'true' ->
		  %% Line 13846
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 13834
	    case _cor8 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 13849
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor9> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor9})
		-| ['compiler_generated'] )
	    end
'dec_X520OrganizationalUnitName'/1 =
    %% Line 13854
    fun (_cor0) ->
	%% Line 13855
	apply 'dec_X520OrganizationalUnitName'/2
	    (_cor0, [])
'dec_X520OrganizationalUnitName'/2 =
    %% Line 13857
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 13858
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 13859
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor29> when 'true' ->
		      Tlv1
		end
	    in  %% Line 13859
		case _cor4 of
		  %% Line 13862
		  <{20,V1}> when 'true' ->
		      let <Val1> =
			  %% Line 13864
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <C1> =
			      %% Line 13865
			      call 'erlang':'byte_size'
				  (Val1)
			  in  %% Line 13866
			      case <> of
				<>
				    when let <_cor7> =
					  call 'erlang':'=<'
					      (1, C1)
				      in  let <_cor8> =
					      call 'erlang':'=<'
						  (C1, 64)
					  in  call 'erlang':'and'
						  (_cor7, _cor8) ->
				    let <_cor9> =
					%% Line 13867
					call 'erlang':'binary_to_list'
					    (Val1)
				    in  {'teletexString',_cor9}
				%% Line 13868
				<> when 'true' ->
				    %% Line 13869
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 13875
		  <{19,V1}> when 'true' ->
		      let <Val2> =
			  %% Line 13877
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <C2> =
			      %% Line 13878
			      call 'erlang':'byte_size'
				  (Val2)
			  in  %% Line 13879
			      case <> of
				<>
				    when let <_cor12> =
					  call 'erlang':'=<'
					      (1, C2)
				      in  let <_cor13> =
					      call 'erlang':'=<'
						  (C2, 64)
					  in  call 'erlang':'and'
						  (_cor12, _cor13) ->
				    let <_cor14> =
					%% Line 13880
					call 'erlang':'binary_to_list'
					    (Val2)
				    in  {'printableString',_cor14}
				%% Line 13881
				<> when 'true' ->
				    %% Line 13882
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 13888
		  <{28,V1}> when 'true' ->
		      let <Val3> =
			  %% Line 13890
			  apply 'decode_universal_string'/2
			      (V1, [])
		      in  let <C3> =
			      %% Line 13891
			      call 'erlang':'length'
				  (Val3)
			  in  %% Line 13892
			      case <> of
				<>
				    when let <_cor17> =
					  call 'erlang':'=<'
					      (1, C3)
				      in  let <_cor18> =
					      call 'erlang':'=<'
						  (C3, 64)
					  in  call 'erlang':'and'
						  (_cor17, _cor18) ->
				    {'universalString',%% Line 13893
						       Val3}
				%% Line 13894
				<> when 'true' ->
				    %% Line 13895
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 13901
		  <{12,V1}> when 'true' ->
		      let <_cor20> =
			  %% Line 13902
			  apply 'decode_UTF8_string'/2
			      (V1, [])
		      in  %% Line 13902
			  {'utf8String',_cor20}
		  %% Line 13906
		  <{30,V1}> when 'true' ->
		      let <Val4> =
			  %% Line 13908
			  apply 'decode_BMP_string'/2
			      (V1, [])
		      in  let <C4> =
			      %% Line 13909
			      call 'erlang':'length'
				  (Val4)
			  in  %% Line 13910
			      case <> of
				<>
				    when let <_cor23> =
					  call 'erlang':'=<'
					      (1, C4)
				      in  let <_cor24> =
					      call 'erlang':'=<'
						  (C4, 64)
					  in  call 'erlang':'and'
						  (_cor23, _cor24) ->
				    {'bmpString',%% Line 13911
						 Val4}
				%% Line 13912
				<> when 'true' ->
				    %% Line 13913
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 13917
		  <Else> when 'true' ->
		      %% Line 13918
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'enc_X520OrganizationName'/1 =
    %% Line 13926
    fun (_cor0) ->
	%% Line 13927
	apply 'enc_X520OrganizationName'/2
	    (_cor0, [])
'enc_X520OrganizationName'/2 =
    %% Line 13929
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 13930
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 13931
	      <'teletexString'> when 'true' ->
		  let <_cor2> =
		      %% Line 13932
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 13932
		      apply 'encode_restricted_string'/2
			  (_cor2, [#{#<20>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 13933
	      <'printableString'> when 'true' ->
		  let <_cor3> =
		      %% Line 13934
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 13934
		      apply 'encode_restricted_string'/2
			  (_cor3, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 13935
	      <'universalString'> when 'true' ->
		  let <_cor4> =
		      %% Line 13936
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 13936
		      apply 'encode_universal_string'/2
			  (_cor4, [#{#<28>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 13937
	      <'utf8String'> when 'true' ->
		  let <_cor5> =
		      %% Line 13938
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 13938
		      apply 'encode_UTF8_string'/2
			  (_cor5, [#{#<12>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 13939
	      <'bmpString'> when 'true' ->
		  let <_cor6> =
		      %% Line 13940
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 13940
		      apply 'encode_BMP_string'/2
			  (_cor6, [#{#<30>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 13941
	      <Else> when 'true' ->
		  %% Line 13942
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 13930
	    case _cor8 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 13945
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor9> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor9})
		-| ['compiler_generated'] )
	    end
'dec_X520OrganizationName'/1 =
    %% Line 13950
    fun (_cor0) ->
	%% Line 13951
	apply 'dec_X520OrganizationName'/2
	    (_cor0, [])
'dec_X520OrganizationName'/2 =
    %% Line 13953
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 13954
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 13955
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor29> when 'true' ->
		      Tlv1
		end
	    in  %% Line 13955
		case _cor4 of
		  %% Line 13958
		  <{20,V1}> when 'true' ->
		      let <Val1> =
			  %% Line 13960
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <C1> =
			      %% Line 13961
			      call 'erlang':'byte_size'
				  (Val1)
			  in  %% Line 13962
			      case <> of
				<>
				    when let <_cor7> =
					  call 'erlang':'=<'
					      (1, C1)
				      in  let <_cor8> =
					      call 'erlang':'=<'
						  (C1, 64)
					  in  call 'erlang':'and'
						  (_cor7, _cor8) ->
				    let <_cor9> =
					%% Line 13963
					call 'erlang':'binary_to_list'
					    (Val1)
				    in  {'teletexString',_cor9}
				%% Line 13964
				<> when 'true' ->
				    %% Line 13965
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 13971
		  <{19,V1}> when 'true' ->
		      let <Val2> =
			  %% Line 13973
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <C2> =
			      %% Line 13974
			      call 'erlang':'byte_size'
				  (Val2)
			  in  %% Line 13975
			      case <> of
				<>
				    when let <_cor12> =
					  call 'erlang':'=<'
					      (1, C2)
				      in  let <_cor13> =
					      call 'erlang':'=<'
						  (C2, 64)
					  in  call 'erlang':'and'
						  (_cor12, _cor13) ->
				    let <_cor14> =
					%% Line 13976
					call 'erlang':'binary_to_list'
					    (Val2)
				    in  {'printableString',_cor14}
				%% Line 13977
				<> when 'true' ->
				    %% Line 13978
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 13984
		  <{28,V1}> when 'true' ->
		      let <Val3> =
			  %% Line 13986
			  apply 'decode_universal_string'/2
			      (V1, [])
		      in  let <C3> =
			      %% Line 13987
			      call 'erlang':'length'
				  (Val3)
			  in  %% Line 13988
			      case <> of
				<>
				    when let <_cor17> =
					  call 'erlang':'=<'
					      (1, C3)
				      in  let <_cor18> =
					      call 'erlang':'=<'
						  (C3, 64)
					  in  call 'erlang':'and'
						  (_cor17, _cor18) ->
				    {'universalString',%% Line 13989
						       Val3}
				%% Line 13990
				<> when 'true' ->
				    %% Line 13991
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 13997
		  <{12,V1}> when 'true' ->
		      let <_cor20> =
			  %% Line 13998
			  apply 'decode_UTF8_string'/2
			      (V1, [])
		      in  %% Line 13998
			  {'utf8String',_cor20}
		  %% Line 14002
		  <{30,V1}> when 'true' ->
		      let <Val4> =
			  %% Line 14004
			  apply 'decode_BMP_string'/2
			      (V1, [])
		      in  let <C4> =
			      %% Line 14005
			      call 'erlang':'length'
				  (Val4)
			  in  %% Line 14006
			      case <> of
				<>
				    when let <_cor23> =
					  call 'erlang':'=<'
					      (1, C4)
				      in  let <_cor24> =
					      call 'erlang':'=<'
						  (C4, 64)
					  in  call 'erlang':'and'
						  (_cor23, _cor24) ->
				    {'bmpString',%% Line 14007
						 Val4}
				%% Line 14008
				<> when 'true' ->
				    %% Line 14009
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 14013
		  <Else> when 'true' ->
		      %% Line 14014
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'enc_X520StateOrProvinceName'/1 =
    %% Line 14022
    fun (_cor0) ->
	%% Line 14023
	apply 'enc_X520StateOrProvinceName'/2
	    (_cor0, [])
'enc_X520StateOrProvinceName'/2 =
    %% Line 14025
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 14026
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 14027
	      <'teletexString'> when 'true' ->
		  let <_cor2> =
		      %% Line 14028
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 14028
		      apply 'encode_restricted_string'/2
			  (_cor2, [#{#<20>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 14029
	      <'printableString'> when 'true' ->
		  let <_cor3> =
		      %% Line 14030
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 14030
		      apply 'encode_restricted_string'/2
			  (_cor3, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 14031
	      <'universalString'> when 'true' ->
		  let <_cor4> =
		      %% Line 14032
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 14032
		      apply 'encode_universal_string'/2
			  (_cor4, [#{#<28>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 14033
	      <'utf8String'> when 'true' ->
		  let <_cor5> =
		      %% Line 14034
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 14034
		      apply 'encode_UTF8_string'/2
			  (_cor5, [#{#<12>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 14035
	      <'bmpString'> when 'true' ->
		  let <_cor6> =
		      %% Line 14036
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 14036
		      apply 'encode_BMP_string'/2
			  (_cor6, [#{#<30>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 14037
	      <Else> when 'true' ->
		  %% Line 14038
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 14026
	    case _cor8 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 14041
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor9> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor9})
		-| ['compiler_generated'] )
	    end
'dec_X520StateOrProvinceName'/1 =
    %% Line 14046
    fun (_cor0) ->
	%% Line 14047
	apply 'dec_X520StateOrProvinceName'/2
	    (_cor0, [])
'dec_X520StateOrProvinceName'/2 =
    %% Line 14049
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 14050
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 14051
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor29> when 'true' ->
		      Tlv1
		end
	    in  %% Line 14051
		case _cor4 of
		  %% Line 14054
		  <{20,V1}> when 'true' ->
		      let <Val1> =
			  %% Line 14056
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <C1> =
			      %% Line 14057
			      call 'erlang':'byte_size'
				  (Val1)
			  in  %% Line 14058
			      case <> of
				<>
				    when let <_cor7> =
					  call 'erlang':'=<'
					      (1, C1)
				      in  let <_cor8> =
					      call 'erlang':'=<'
						  (C1, 128)
					  in  call 'erlang':'and'
						  (_cor7, _cor8) ->
				    let <_cor9> =
					%% Line 14059
					call 'erlang':'binary_to_list'
					    (Val1)
				    in  {'teletexString',_cor9}
				%% Line 14060
				<> when 'true' ->
				    %% Line 14061
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 14067
		  <{19,V1}> when 'true' ->
		      let <Val2> =
			  %% Line 14069
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <C2> =
			      %% Line 14070
			      call 'erlang':'byte_size'
				  (Val2)
			  in  %% Line 14071
			      case <> of
				<>
				    when let <_cor12> =
					  call 'erlang':'=<'
					      (1, C2)
				      in  let <_cor13> =
					      call 'erlang':'=<'
						  (C2, 128)
					  in  call 'erlang':'and'
						  (_cor12, _cor13) ->
				    let <_cor14> =
					%% Line 14072
					call 'erlang':'binary_to_list'
					    (Val2)
				    in  {'printableString',_cor14}
				%% Line 14073
				<> when 'true' ->
				    %% Line 14074
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 14080
		  <{28,V1}> when 'true' ->
		      let <Val3> =
			  %% Line 14082
			  apply 'decode_universal_string'/2
			      (V1, [])
		      in  let <C3> =
			      %% Line 14083
			      call 'erlang':'length'
				  (Val3)
			  in  %% Line 14084
			      case <> of
				<>
				    when let <_cor17> =
					  call 'erlang':'=<'
					      (1, C3)
				      in  let <_cor18> =
					      call 'erlang':'=<'
						  (C3, 128)
					  in  call 'erlang':'and'
						  (_cor17, _cor18) ->
				    {'universalString',%% Line 14085
						       Val3}
				%% Line 14086
				<> when 'true' ->
				    %% Line 14087
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 14093
		  <{12,V1}> when 'true' ->
		      let <_cor20> =
			  %% Line 14094
			  apply 'decode_UTF8_string'/2
			      (V1, [])
		      in  %% Line 14094
			  {'utf8String',_cor20}
		  %% Line 14098
		  <{30,V1}> when 'true' ->
		      let <Val4> =
			  %% Line 14100
			  apply 'decode_BMP_string'/2
			      (V1, [])
		      in  let <C4> =
			      %% Line 14101
			      call 'erlang':'length'
				  (Val4)
			  in  %% Line 14102
			      case <> of
				<>
				    when let <_cor23> =
					  call 'erlang':'=<'
					      (1, C4)
				      in  let <_cor24> =
					      call 'erlang':'=<'
						  (C4, 128)
					  in  call 'erlang':'and'
						  (_cor23, _cor24) ->
				    {'bmpString',%% Line 14103
						 Val4}
				%% Line 14104
				<> when 'true' ->
				    %% Line 14105
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 14109
		  <Else> when 'true' ->
		      %% Line 14110
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'enc_X520LocalityName'/1 =
    %% Line 14118
    fun (_cor0) ->
	%% Line 14119
	apply 'enc_X520LocalityName'/2
	    (_cor0, [])
'enc_X520LocalityName'/2 =
    %% Line 14121
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 14122
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 14123
	      <'teletexString'> when 'true' ->
		  let <_cor2> =
		      %% Line 14124
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 14124
		      apply 'encode_restricted_string'/2
			  (_cor2, [#{#<20>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 14125
	      <'printableString'> when 'true' ->
		  let <_cor3> =
		      %% Line 14126
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 14126
		      apply 'encode_restricted_string'/2
			  (_cor3, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 14127
	      <'universalString'> when 'true' ->
		  let <_cor4> =
		      %% Line 14128
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 14128
		      apply 'encode_universal_string'/2
			  (_cor4, [#{#<28>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 14129
	      <'utf8String'> when 'true' ->
		  let <_cor5> =
		      %% Line 14130
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 14130
		      apply 'encode_UTF8_string'/2
			  (_cor5, [#{#<12>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 14131
	      <'bmpString'> when 'true' ->
		  let <_cor6> =
		      %% Line 14132
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 14132
		      apply 'encode_BMP_string'/2
			  (_cor6, [#{#<30>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 14133
	      <Else> when 'true' ->
		  %% Line 14134
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 14122
	    case _cor8 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 14137
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor9> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor9})
		-| ['compiler_generated'] )
	    end
'dec_X520LocalityName'/1 =
    %% Line 14142
    fun (_cor0) ->
	%% Line 14143
	apply 'dec_X520LocalityName'/2
	    (_cor0, [])
'dec_X520LocalityName'/2 =
    %% Line 14145
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 14146
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 14147
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor29> when 'true' ->
		      Tlv1
		end
	    in  %% Line 14147
		case _cor4 of
		  %% Line 14150
		  <{20,V1}> when 'true' ->
		      let <Val1> =
			  %% Line 14152
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <C1> =
			      %% Line 14153
			      call 'erlang':'byte_size'
				  (Val1)
			  in  %% Line 14154
			      case <> of
				<>
				    when let <_cor7> =
					  call 'erlang':'=<'
					      (1, C1)
				      in  let <_cor8> =
					      call 'erlang':'=<'
						  (C1, 128)
					  in  call 'erlang':'and'
						  (_cor7, _cor8) ->
				    let <_cor9> =
					%% Line 14155
					call 'erlang':'binary_to_list'
					    (Val1)
				    in  {'teletexString',_cor9}
				%% Line 14156
				<> when 'true' ->
				    %% Line 14157
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 14163
		  <{19,V1}> when 'true' ->
		      let <Val2> =
			  %% Line 14165
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <C2> =
			      %% Line 14166
			      call 'erlang':'byte_size'
				  (Val2)
			  in  %% Line 14167
			      case <> of
				<>
				    when let <_cor12> =
					  call 'erlang':'=<'
					      (1, C2)
				      in  let <_cor13> =
					      call 'erlang':'=<'
						  (C2, 128)
					  in  call 'erlang':'and'
						  (_cor12, _cor13) ->
				    let <_cor14> =
					%% Line 14168
					call 'erlang':'binary_to_list'
					    (Val2)
				    in  {'printableString',_cor14}
				%% Line 14169
				<> when 'true' ->
				    %% Line 14170
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 14176
		  <{28,V1}> when 'true' ->
		      let <Val3> =
			  %% Line 14178
			  apply 'decode_universal_string'/2
			      (V1, [])
		      in  let <C3> =
			      %% Line 14179
			      call 'erlang':'length'
				  (Val3)
			  in  %% Line 14180
			      case <> of
				<>
				    when let <_cor17> =
					  call 'erlang':'=<'
					      (1, C3)
				      in  let <_cor18> =
					      call 'erlang':'=<'
						  (C3, 128)
					  in  call 'erlang':'and'
						  (_cor17, _cor18) ->
				    {'universalString',%% Line 14181
						       Val3}
				%% Line 14182
				<> when 'true' ->
				    %% Line 14183
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 14189
		  <{12,V1}> when 'true' ->
		      let <_cor20> =
			  %% Line 14190
			  apply 'decode_UTF8_string'/2
			      (V1, [])
		      in  %% Line 14190
			  {'utf8String',_cor20}
		  %% Line 14194
		  <{30,V1}> when 'true' ->
		      let <Val4> =
			  %% Line 14196
			  apply 'decode_BMP_string'/2
			      (V1, [])
		      in  let <C4> =
			      %% Line 14197
			      call 'erlang':'length'
				  (Val4)
			  in  %% Line 14198
			      case <> of
				<>
				    when let <_cor23> =
					  call 'erlang':'=<'
					      (1, C4)
				      in  let <_cor24> =
					      call 'erlang':'=<'
						  (C4, 128)
					  in  call 'erlang':'and'
						  (_cor23, _cor24) ->
				    {'bmpString',%% Line 14199
						 Val4}
				%% Line 14200
				<> when 'true' ->
				    %% Line 14201
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 14205
		  <Else> when 'true' ->
		      %% Line 14206
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'enc_X520CommonName'/1 =
    %% Line 14214
    fun (_cor0) ->
	%% Line 14215
	apply 'enc_X520CommonName'/2
	    (_cor0, [])
'enc_X520CommonName'/2 =
    %% Line 14217
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 14218
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 14219
	      <'teletexString'> when 'true' ->
		  let <_cor2> =
		      %% Line 14220
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 14220
		      apply 'encode_restricted_string'/2
			  (_cor2, [#{#<20>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 14221
	      <'printableString'> when 'true' ->
		  let <_cor3> =
		      %% Line 14222
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 14222
		      apply 'encode_restricted_string'/2
			  (_cor3, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 14223
	      <'universalString'> when 'true' ->
		  let <_cor4> =
		      %% Line 14224
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 14224
		      apply 'encode_universal_string'/2
			  (_cor4, [#{#<28>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 14225
	      <'utf8String'> when 'true' ->
		  let <_cor5> =
		      %% Line 14226
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 14226
		      apply 'encode_UTF8_string'/2
			  (_cor5, [#{#<12>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 14227
	      <'bmpString'> when 'true' ->
		  let <_cor6> =
		      %% Line 14228
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 14228
		      apply 'encode_BMP_string'/2
			  (_cor6, [#{#<30>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 14229
	      <Else> when 'true' ->
		  %% Line 14230
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 14218
	    case _cor8 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 14233
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor9> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor9})
		-| ['compiler_generated'] )
	    end
'dec_X520CommonName'/1 =
    %% Line 14238
    fun (_cor0) ->
	%% Line 14239
	apply 'dec_X520CommonName'/2
	    (_cor0, [])
'dec_X520CommonName'/2 =
    %% Line 14241
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 14242
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 14243
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor29> when 'true' ->
		      Tlv1
		end
	    in  %% Line 14243
		case _cor4 of
		  %% Line 14246
		  <{20,V1}> when 'true' ->
		      let <Val1> =
			  %% Line 14248
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <C1> =
			      %% Line 14249
			      call 'erlang':'byte_size'
				  (Val1)
			  in  %% Line 14250
			      case <> of
				<>
				    when let <_cor7> =
					  call 'erlang':'=<'
					      (1, C1)
				      in  let <_cor8> =
					      call 'erlang':'=<'
						  (C1, 64)
					  in  call 'erlang':'and'
						  (_cor7, _cor8) ->
				    let <_cor9> =
					%% Line 14251
					call 'erlang':'binary_to_list'
					    (Val1)
				    in  {'teletexString',_cor9}
				%% Line 14252
				<> when 'true' ->
				    %% Line 14253
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 14259
		  <{19,V1}> when 'true' ->
		      let <Val2> =
			  %% Line 14261
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <C2> =
			      %% Line 14262
			      call 'erlang':'byte_size'
				  (Val2)
			  in  %% Line 14263
			      case <> of
				<>
				    when let <_cor12> =
					  call 'erlang':'=<'
					      (1, C2)
				      in  let <_cor13> =
					      call 'erlang':'=<'
						  (C2, 64)
					  in  call 'erlang':'and'
						  (_cor12, _cor13) ->
				    let <_cor14> =
					%% Line 14264
					call 'erlang':'binary_to_list'
					    (Val2)
				    in  {'printableString',_cor14}
				%% Line 14265
				<> when 'true' ->
				    %% Line 14266
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 14272
		  <{28,V1}> when 'true' ->
		      let <Val3> =
			  %% Line 14274
			  apply 'decode_universal_string'/2
			      (V1, [])
		      in  let <C3> =
			      %% Line 14275
			      call 'erlang':'length'
				  (Val3)
			  in  %% Line 14276
			      case <> of
				<>
				    when let <_cor17> =
					  call 'erlang':'=<'
					      (1, C3)
				      in  let <_cor18> =
					      call 'erlang':'=<'
						  (C3, 64)
					  in  call 'erlang':'and'
						  (_cor17, _cor18) ->
				    {'universalString',%% Line 14277
						       Val3}
				%% Line 14278
				<> when 'true' ->
				    %% Line 14279
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 14285
		  <{12,V1}> when 'true' ->
		      let <_cor20> =
			  %% Line 14286
			  apply 'decode_UTF8_string'/2
			      (V1, [])
		      in  %% Line 14286
			  {'utf8String',_cor20}
		  %% Line 14290
		  <{30,V1}> when 'true' ->
		      let <Val4> =
			  %% Line 14292
			  apply 'decode_BMP_string'/2
			      (V1, [])
		      in  let <C4> =
			      %% Line 14293
			      call 'erlang':'length'
				  (Val4)
			  in  %% Line 14294
			      case <> of
				<>
				    when let <_cor23> =
					  call 'erlang':'=<'
					      (1, C4)
				      in  let <_cor24> =
					      call 'erlang':'=<'
						  (C4, 64)
					  in  call 'erlang':'and'
						  (_cor23, _cor24) ->
				    {'bmpString',%% Line 14295
						 Val4}
				%% Line 14296
				<> when 'true' ->
				    %% Line 14297
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 14301
		  <Else> when 'true' ->
		      %% Line 14302
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'enc_X520name'/1 =
    %% Line 14310
    fun (_cor0) ->
	%% Line 14311
	apply 'enc_X520name'/2
	    (_cor0, [])
'enc_X520name'/2 =
    %% Line 14313
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 14314
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 14315
	      <'teletexString'> when 'true' ->
		  let <_cor2> =
		      %% Line 14316
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 14316
		      apply 'encode_restricted_string'/2
			  (_cor2, [#{#<20>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 14317
	      <'printableString'> when 'true' ->
		  let <_cor3> =
		      %% Line 14318
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 14318
		      apply 'encode_restricted_string'/2
			  (_cor3, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 14319
	      <'universalString'> when 'true' ->
		  let <_cor4> =
		      %% Line 14320
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 14320
		      apply 'encode_universal_string'/2
			  (_cor4, [#{#<28>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 14321
	      <'utf8String'> when 'true' ->
		  let <_cor5> =
		      %% Line 14322
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 14322
		      apply 'encode_UTF8_string'/2
			  (_cor5, [#{#<12>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 14323
	      <'bmpString'> when 'true' ->
		  let <_cor6> =
		      %% Line 14324
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 14324
		      apply 'encode_BMP_string'/2
			  (_cor6, [#{#<30>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 14325
	      <Else> when 'true' ->
		  %% Line 14326
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 14314
	    case _cor8 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 14329
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor9> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor9})
		-| ['compiler_generated'] )
	    end
'dec_X520name'/1 =
    %% Line 14334
    fun (_cor0) ->
	%% Line 14335
	apply 'dec_X520name'/2
	    (_cor0, [])
'dec_X520name'/2 =
    %% Line 14337
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 14338
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 14339
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor29> when 'true' ->
		      Tlv1
		end
	    in  %% Line 14339
		case _cor4 of
		  %% Line 14342
		  <{20,V1}> when 'true' ->
		      let <Val1> =
			  %% Line 14344
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <C1> =
			      %% Line 14345
			      call 'erlang':'byte_size'
				  (Val1)
			  in  %% Line 14346
			      case <> of
				<>
				    when let <_cor7> =
					  call 'erlang':'=<'
					      (1, C1)
				      in  let <_cor8> =
					      call 'erlang':'=<'
						  (C1, 32768)
					  in  call 'erlang':'and'
						  (_cor7, _cor8) ->
				    let <_cor9> =
					%% Line 14347
					call 'erlang':'binary_to_list'
					    (Val1)
				    in  {'teletexString',_cor9}
				%% Line 14348
				<> when 'true' ->
				    %% Line 14349
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 14355
		  <{19,V1}> when 'true' ->
		      let <Val2> =
			  %% Line 14357
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <C2> =
			      %% Line 14358
			      call 'erlang':'byte_size'
				  (Val2)
			  in  %% Line 14359
			      case <> of
				<>
				    when let <_cor12> =
					  call 'erlang':'=<'
					      (1, C2)
				      in  let <_cor13> =
					      call 'erlang':'=<'
						  (C2, 32768)
					  in  call 'erlang':'and'
						  (_cor12, _cor13) ->
				    let <_cor14> =
					%% Line 14360
					call 'erlang':'binary_to_list'
					    (Val2)
				    in  {'printableString',_cor14}
				%% Line 14361
				<> when 'true' ->
				    %% Line 14362
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 14368
		  <{28,V1}> when 'true' ->
		      let <Val3> =
			  %% Line 14370
			  apply 'decode_universal_string'/2
			      (V1, [])
		      in  let <C3> =
			      %% Line 14371
			      call 'erlang':'length'
				  (Val3)
			  in  %% Line 14372
			      case <> of
				<>
				    when let <_cor17> =
					  call 'erlang':'=<'
					      (1, C3)
				      in  let <_cor18> =
					      call 'erlang':'=<'
						  (C3, 32768)
					  in  call 'erlang':'and'
						  (_cor17, _cor18) ->
				    {'universalString',%% Line 14373
						       Val3}
				%% Line 14374
				<> when 'true' ->
				    %% Line 14375
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 14381
		  <{12,V1}> when 'true' ->
		      let <_cor20> =
			  %% Line 14382
			  apply 'decode_UTF8_string'/2
			      (V1, [])
		      in  %% Line 14382
			  {'utf8String',_cor20}
		  %% Line 14386
		  <{30,V1}> when 'true' ->
		      let <Val4> =
			  %% Line 14388
			  apply 'decode_BMP_string'/2
			      (V1, [])
		      in  let <C4> =
			      %% Line 14389
			      call 'erlang':'length'
				  (Val4)
			  in  %% Line 14390
			      case <> of
				<>
				    when let <_cor23> =
					  call 'erlang':'=<'
					      (1, C4)
				      in  let <_cor24> =
					      call 'erlang':'=<'
						  (C4, 32768)
					  in  call 'erlang':'and'
						  (_cor23, _cor24) ->
				    {'bmpString',%% Line 14391
						 Val4}
				%% Line 14392
				<> when 'true' ->
				    %% Line 14393
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 14397
		  <Else> when 'true' ->
		      %% Line 14398
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'enc_AttributeTypeAndValue'/1 =
    %% Line 14406
    fun (_cor0) ->
	%% Line 14407
	apply 'enc_AttributeTypeAndValue'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_AttributeTypeAndValue'/2 =
    %% Line 14409
    fun (_cor1,_cor0) ->
	%% Line 14410
	case _cor1 of
	  <{_cor9,Cindex1,Cindex2}> when 'true' ->
	      %% Line 14415
	      case apply 'encode_object_identifier'/2
		       (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 14420
		    case apply 'enc_AttributeValue'/2
			     (Cindex2, []) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <BytesSoFar> =
			      %% Line 14422
			      [EncBytes1|[EncBytes2|[]]]
			  in  let <LenSoFar> =
				  %% Line 14423
				  call 'erlang':'+'
				      (EncLen1, EncLen2)
			      in  %% Line 14424
				  apply 'encode_tags'/3
				      (_cor0, BytesSoFar, LenSoFar)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_AttributeTypeAndValue'/1 =
    %% Line 14427
    fun (_cor0) ->
	%% Line 14428
	apply 'dec_AttributeTypeAndValue'/2
	    (_cor0, [16])
'dec_AttributeTypeAndValue'/2 =
    %% Line 14430
    fun (_cor1,_cor0) ->
	%% Line 14439
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 14440
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  %% Line 14445
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 14446
			    apply 'dec_AttributeValue'/2
				(V2, [])
			in  do  %% Line 14448
				case Tlv3 of
				  %% Line 14449
				  <[]> when 'true' ->
				      'ok'
				  %% Line 14449
				  <_cor10> when 'true' ->
				      call 'erlang':'exit'
					  ({'error',{'asn1',{'unexpected',Tlv3}}})
				end
				%% Line 14451
				{'AttributeTypeAndValue',Term1,Term2}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_AttributeValue'/1 =
    %% Line 14458
    fun (_cor0) ->
	%% Line 14459
	apply 'enc_AttributeValue'/2
	    (_cor0, [])
'enc_AttributeValue'/2 =
    %% Line 14461
    fun (_cor1,_cor0) ->
	%% Line 14463
	apply 'encode_open_type'/2
	    (_cor1, _cor0)
'dec_AttributeValue'/1 =
    %% Line 14466
    fun (_cor0) ->
	%% Line 14467
	apply 'dec_AttributeValue'/2
	    (_cor0, [])
'dec_AttributeValue'/2 =
    %% Line 14469
    fun (_cor1,_cor0) ->
	%% Line 14470
	apply 'decode_open_type_as_binary'/2
	    (_cor1, _cor0)
'enc_AttributeType'/1 =
    %% Line 14477
    fun (_cor0) ->
	%% Line 14478
	apply 'enc_AttributeType'/2
	    (_cor0, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#])
'enc_AttributeType'/2 =
    %% Line 14480
    fun (_cor1,_cor0) ->
	%% Line 14481
	apply 'encode_object_identifier'/2
	    (_cor1, _cor0)
'dec_AttributeType'/1 =
    %% Line 14484
    fun (_cor0) ->
	%% Line 14485
	apply 'dec_AttributeType'/2
	    (_cor0, [6])
'dec_AttributeType'/2 =
    %% Line 14487
    fun (_cor1,_cor0) ->
	%% Line 14488
	apply 'decode_object_identifier'/2
	    (_cor1, _cor0)
'enc_Attribute'/1 =
    %% Line 14495
    fun (_cor0) ->
	%% Line 14496
	apply 'enc_Attribute'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_Attribute'/2 =
    %% Line 14498
    fun (_cor1,_cor0) ->
	%% Line 14499
	case _cor1 of
	  <{_cor9,Cindex1,Cindex2}> when 'true' ->
	      %% Line 14504
	      case apply 'encode_object_identifier'/2
		       (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 14509
		    case apply 'enc_Attribute_values'/2
			     (Cindex2, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <BytesSoFar> =
			      %% Line 14511
			      [EncBytes1|[EncBytes2|[]]]
			  in  let <LenSoFar> =
				  %% Line 14512
				  call 'erlang':'+'
				      (EncLen1, EncLen2)
			      in  %% Line 14513
				  apply 'encode_tags'/3
				      (_cor0, BytesSoFar, LenSoFar)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_Attribute_values'/2 =
    %% Line 14520
    fun (_cor1,_cor0) ->
	%% Line 14521
	case apply 'enc_Attribute_values_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 14522
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_Attribute_values_components'/3 =
    %% Line 14524
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 14525
		  apply 'dynamicsort_SETOF'/1
		      (AccBytes)
	      in  %% Line 14525
		  {_cor3,AccLen}
	  %% Line 14527
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 14528
	      case apply 'enc_AttributeValue'/2
		       (H, []) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 14529
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 14529
			apply 'enc_Attribute_values_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_Attribute_values_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_Attribute_values'/2 =
    %% Line 14531
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 14535
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 14536
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_AttributeValue'/2
					(V1, [])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'dec_Attribute'/1 =
    %% Line 14541
    fun (_cor0) ->
	%% Line 14542
	apply 'dec_Attribute'/2
	    (_cor0, [16])
'dec_Attribute'/2 =
    %% Line 14544
    fun (_cor1,_cor0) ->
	%% Line 14553
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 14554
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  %% Line 14559
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 14560
			    apply 'dec_Attribute_values'/2
				(V2, [17])
			in  do  %% Line 14562
				case Tlv3 of
				  %% Line 14563
				  <[]> when 'true' ->
				      'ok'
				  %% Line 14563
				  <_cor10> when 'true' ->
				      call 'erlang':'exit'
					  ({'error',{'asn1',{'unexpected',Tlv3}}})
				end
				%% Line 14565
				{'Attribute',Term1,Term2}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_Extension-Any'/1 =
    %% Line 14572
    fun (_cor0) ->
	%% Line 14573
	apply 'enc_Extension-Any'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_Extension-Any'/2 =
    %% Line 14575
    fun (_cor1,_cor0) ->
	%% Line 14576
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2,Cindex3}> when 'true' ->
	      %% Line 14581
	      case apply 'encode_object_identifier'/2
		       (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    let <_cor5> =
			%% Line 14586
			case apply 'is_default_10'/1
				 (Cindex2) of
			  %% Line 14587
			  <'true'> when 'true' ->
			      {[],0}
			  %% Line 14588
			  <'false'> when 'true' ->
			      %% Line 14589
			      apply 'encode_boolean'/2
				  (Cindex2, [#{#<1>(8,1,'integer',['unsigned'|['big']])}#])
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor4})
			    -| ['compiler_generated'] )
			end
		    in  %% Line 14586
			case _cor5 of
			  <{EncBytes2,EncLen2}> when 'true' ->
			      %% Line 14595
			      case apply 'encode_open_type'/2
				       (Cindex3, []) of
				<{EncBytes3,EncLen3}> when 'true' ->
				    let <BytesSoFar> =
					%% Line 14597
					[EncBytes1|[EncBytes2|[EncBytes3|[]]]]
				    in  let <_cor9> =
					    %% Line 14598
					    call 'erlang':'+'
						(EncLen1, EncLen2)
					in  let <LenSoFar> =
						%% Line 14598
						call 'erlang':'+'
						    (_cor9, EncLen3)
					    in  %% Line 14599
						apply 'encode_tags'/3
						    (_cor0, BytesSoFar, LenSoFar)
				( <_cor7> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor7})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_Extension-Any'/1 =
    %% Line 14602
    fun (_cor0) ->
	%% Line 14603
	apply 'dec_Extension-Any'/2
	    (_cor0, [16])
'dec_Extension-Any'/2 =
    %% Line 14605
    fun (_cor1,_cor0) ->
	%% Line 14614
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 14615
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  let <Term2,Tlv3> =
		      %% Line 14620
		      case Tlv2 of
			%% Line 14621
			<[{1,V2}|TempTlv3]> when 'true' ->
			    let <_cor5> =
				%% Line 14622
				apply 'decode_boolean'/2
				    (V2, [])
			    in  <_cor5,%% Line 14622
				       TempTlv3>
			%% Line 14623
			<_cor14> when 'true' ->
			    %% Line 14624
			    <'false',Tlv2>
		      end
		  in  %% Line 14630
		      case Tlv3 of
			<[V3|Tlv4]> when 'true' ->
			    let <Term3> =
				%% Line 14631
				apply 'decode_open_type_as_binary'/2
				    (V3, [])
			    in  do  %% Line 14633
				    case Tlv4 of
				      %% Line 14634
				      <[]> when 'true' ->
					  'ok'
				      %% Line 14634
				      <_cor15> when 'true' ->
					  call 'erlang':'exit'
					      ({'error',{'asn1',{'unexpected',Tlv4}}})
				    end
				    %% Line 14636
				    {'Extension-Any',Term1,Term2,Term3}
			( <_cor9> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor9})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_Any'/1 =
    %% Line 14643
    fun (_cor0) ->
	%% Line 14644
	apply 'enc_Any'/2
	    (_cor0, [])
'enc_Any'/2 =
    %% Line 14646
    fun (_cor1,_cor0) ->
	%% Line 14648
	apply 'encode_open_type'/2
	    (_cor1, _cor0)
'dec_Any'/1 =
    %% Line 14651
    fun (_cor0) ->
	%% Line 14652
	apply 'dec_Any'/2
	    (_cor0, [])
'dec_Any'/2 =
    %% Line 14654
    fun (_cor1,_cor0) ->
	%% Line 14655
	apply 'decode_open_type_as_binary'/2
	    (_cor1, _cor0)
'enc_Boolean'/1 =
    %% Line 14662
    fun (_cor0) ->
	%% Line 14663
	apply 'enc_Boolean'/2
	    (_cor0, [#{#<1>(8,1,'integer',['unsigned'|['big']])}#])
'enc_Boolean'/2 =
    %% Line 14665
    fun (_cor1,_cor0) ->
	%% Line 14666
	apply 'encode_boolean'/2
	    (_cor1, _cor0)
'dec_Boolean'/1 =
    %% Line 14669
    fun (_cor0) ->
	%% Line 14670
	apply 'dec_Boolean'/2
	    (_cor0, [1])
'dec_Boolean'/2 =
    %% Line 14672
    fun (_cor1,_cor0) ->
	%% Line 14673
	apply 'decode_boolean'/2
	    (_cor1, _cor0)
'enc_ObjId'/1 =
    %% Line 14680
    fun (_cor0) ->
	%% Line 14681
	apply 'enc_ObjId'/2
	    (_cor0, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#])
'enc_ObjId'/2 =
    %% Line 14683
    fun (_cor1,_cor0) ->
	%% Line 14684
	apply 'encode_object_identifier'/2
	    (_cor1, _cor0)
'dec_ObjId'/1 =
    %% Line 14687
    fun (_cor0) ->
	%% Line 14688
	apply 'dec_ObjId'/2
	    (_cor0, [6])
'dec_ObjId'/2 =
    %% Line 14690
    fun (_cor1,_cor0) ->
	%% Line 14691
	apply 'decode_object_identifier'/2
	    (_cor1, _cor0)
'enc_OTPExtension'/1 =
    %% Line 14698
    fun (_cor0) ->
	%% Line 14699
	apply 'enc_OTPExtension'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_OTPExtension'/2 =
    %% Line 14701
    fun (_cor1,_cor0) ->
	%% Line 14702
	case _cor1 of
	  <{_cor15,Cindex1,Cindex2,Cindex3}> when 'true' ->
	      let <ObjextnID> =
		  %% Line 14704
		  call 'OTP-PUB-KEY':'getenc_SupportedExtensions'
		      (Cindex1)
	      in  %% Line 14709
		  case apply 'encode_object_identifier'/2
			   (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor6> =
			    %% Line 14714
			    case apply 'is_default_10'/1
				     (Cindex2) of
			      %% Line 14715
			      <'true'> when 'true' ->
				  {[],0}
			      %% Line 14716
			      <'false'> when 'true' ->
				  %% Line 14717
				  apply 'encode_boolean'/2
				      (Cindex2, [#{#<1>(8,1,'integer',['unsigned'|['big']])}#])
			      ( <_cor5> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor5})
				-| ['compiler_generated'] )
			    end
			in  %% Line 14714
			    case _cor6 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  %% Line 14723
				  case apply ObjextnID
					   ('Type', Cindex3, []) of
				    <{TmpBytes3,_cor16}> when 'true' ->
					%% Line 14724
					case apply 'encode_open_type'/2
						 (TmpBytes3, []) of
					  <{EncBytes3,EncLen3}> when 'true' ->
					      let <BytesSoFar> =
						  %% Line 14727
						  [EncBytes1|[EncBytes2|[EncBytes3|[]]]]
					      in  let <_cor11> =
						      %% Line 14728
						      call 'erlang':'+'
							  (EncLen1, EncLen2)
						  in  let <LenSoFar> =
							  %% Line 14728
							  call 'erlang':'+'
							      (_cor11, EncLen3)
						      in  %% Line 14729
							  apply 'encode_tags'/3
							      (_cor0, BytesSoFar, LenSoFar)
					  ( <_cor9> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor9})
					    -| ['compiler_generated'] )
					end
				    ( <_cor8> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor8})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_OTPExtension'/1 =
    %% Line 14732
    fun (_cor0) ->
	%% Line 14733
	apply 'dec_OTPExtension'/2
	    (_cor0, [16])
'dec_OTPExtension'/2 =
    %% Line 14735
    fun (_cor1,_cor0) ->
	%% Line 14744
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 14745
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  let <Term2,Tlv3> =
		      %% Line 14750
		      case Tlv2 of
			%% Line 14751
			<[{1,V2}|TempTlv3]> when 'true' ->
			    let <_cor5> =
				%% Line 14752
				apply 'decode_boolean'/2
				    (V2, [])
			    in  <_cor5,%% Line 14752
				       TempTlv3>
			%% Line 14753
			<_cor19> when 'true' ->
			    %% Line 14754
			    <'false',Tlv2>
		      end
		  in  %% Line 14760
		      case Tlv3 of
			<[V3|Tlv4]> when 'true' ->
			    let <Tmpterm1> =
				%% Line 14762
				apply 'decode_open_type'/2
				    (V3, [])
			    in  let <DecObjextnIDTerm1> =
				    %% Line 14765
				    call 'OTP-PUB-KEY':'getdec_SupportedExtensions'
					(Term1)
				in  let <_cor12> =
					catch
					    %% Line 14767
					    apply DecObjextnIDTerm1
						('Type', Tmpterm1, [])
				    in  let <_cor14> =
					    %% Line 14767
					    case _cor12 of
					      %% Line 14768
					      <{'EXIT',Reason1}> when 'true' ->
						  %% Line 14769
						  call 'erlang':'exit'
						      ({'Type not compatible with table constraint',Reason1})
					      %% Line 14770
					      <Tmpterm2> when 'true' ->
						  %% Line 14771
						  Tmpterm2
					    end
					in  do  %% Line 14774
						case Tlv4 of
						  %% Line 14775
						  <[]> when 'true' ->
						      'ok'
						  %% Line 14775
						  <_cor20> when 'true' ->
						      call 'erlang':'exit'
							  ({'error',{'asn1',{'unexpected',Tlv4}}})
						end
						%% Line 14777
						{'OTPExtension',Term1,Term2,_cor14}
			( <_cor9> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor9})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_OTPExtensions'/1 =
    %% Line 14784
    fun (_cor0) ->
	%% Line 14785
	apply 'enc_OTPExtensions'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_OTPExtensions'/2 =
    %% Line 14787
    fun (_cor1,_cor0) ->
	%% Line 14788
	case apply 'enc_OTPExtensions_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 14789
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_OTPExtensions_components'/3 =
    %% Line 14791
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 14792
		  call 'lists':'reverse'
		      (AccBytes)
	      in  %% Line 14792
		  {_cor3,AccLen}
	  %% Line 14794
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 14795
	      case apply 'enc_Extension'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 14796
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 14796
			apply 'enc_OTPExtensions_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_OTPExtensions_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_OTPExtensions'/1 =
    %% Line 14800
    fun (_cor0) ->
	%% Line 14801
	apply 'dec_OTPExtensions'/2
	    (_cor0, [16])
'dec_OTPExtensions'/2 =
    %% Line 14803
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 14807
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 14808
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_Extension'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'enc_OTPExtensionAttribute'/1 =
    %% Line 14816
    fun (_cor0) ->
	%% Line 14817
	apply 'enc_OTPExtensionAttribute'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_OTPExtensionAttribute'/2 =
    %% Line 14819
    fun (_cor1,_cor0) ->
	%% Line 14820
	case _cor1 of
	  <{_cor11,Cindex1,Cindex2}> when 'true' ->
	      let <ObjextensionAttributeType> =
		  %% Line 14822
		  call 'OTP-PUB-KEY':'getenc_SupportedExtensionAttributes'
		      (Cindex1)
	      in  %% Line 14827
		  case apply 'encode_integer'/2
			   (Cindex1, [#{#<128>(8,1,'integer',['unsigned'|['big']])}#]) of
		    <{EncBytes1,EncLen1}> when 'true' ->
			%% Line 14832
			case apply ObjextensionAttributeType
				 ('Type', Cindex2, []) of
			  <{TmpBytes2,_cor12}> when 'true' ->
			      %% Line 14833
			      case apply 'encode_open_type'/2
				       (TmpBytes2, [#{#<161>(8,1,'integer',['unsigned'|['big']])}#]) of
				<{EncBytes2,EncLen2}> when 'true' ->
				    let <BytesSoFar> =
					%% Line 14836
					[EncBytes1|[EncBytes2|[]]]
				    in  let <LenSoFar> =
					    %% Line 14837
					    call 'erlang':'+'
						(EncLen1, EncLen2)
					in  %% Line 14838
					    apply 'encode_tags'/3
						(_cor0, BytesSoFar, LenSoFar)
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor6})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_OTPExtensionAttribute'/1 =
    %% Line 14841
    fun (_cor0) ->
	%% Line 14842
	apply 'dec_OTPExtensionAttribute'/2
	    (_cor0, [16])
'dec_OTPExtensionAttribute'/2 =
    %% Line 14844
    fun (_cor1,_cor0) ->
	%% Line 14853
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 14854
		  apply 'decode_integer'/2
		      (V1, [131072])
	      in  %% Line 14859
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Tmpterm1> =
			    %% Line 14861
			    apply 'decode_open_type'/2
				(V2, [131073])
			in  let <DecObjextensionAttributeTypeTerm1> =
				%% Line 14864
				call 'OTP-PUB-KEY':'getdec_SupportedExtensionAttributes'
				    (Term1)
			    in  let <_cor8> =
				    catch
					%% Line 14866
					apply DecObjextensionAttributeTypeTerm1
					    ('Type', Tmpterm1, [])
				in  let <_cor10> =
					%% Line 14866
					case _cor8 of
					  %% Line 14867
					  <{'EXIT',Reason1}> when 'true' ->
					      %% Line 14868
					      call 'erlang':'exit'
						  ({'Type not compatible with table constraint',Reason1})
					  %% Line 14869
					  <Tmpterm2> when 'true' ->
					      %% Line 14870
					      Tmpterm2
					end
				    in  do  %% Line 14873
					    case Tlv3 of
					      %% Line 14874
					      <[]> when 'true' ->
						  'ok'
					      %% Line 14874
					      <_cor15> when 'true' ->
						  call 'erlang':'exit'
						      ({'error',{'asn1',{'unexpected',Tlv3}}})
					    end
					    %% Line 14876
					    {'OTPExtensionAttribute',Term1,_cor10}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_OTPExtensionAttributes'/1 =
    %% Line 14883
    fun (_cor0) ->
	%% Line 14884
	apply 'enc_OTPExtensionAttributes'/2
	    (_cor0, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
'enc_OTPExtensionAttributes'/2 =
    %% Line 14886
    fun (_cor1,_cor0) ->
	%% Line 14887
	case apply 'enc_OTPExtensionAttributes_components'/3
		 (_cor1, [], 0) of
	  <{EncBytes,EncLen}> when 'true' ->
	      %% Line 14888
	      apply 'encode_tags'/3
		  (_cor0, EncBytes, EncLen)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_OTPExtensionAttributes_components'/3 =
    %% Line 14890
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],AccBytes,AccLen> when 'true' ->
	      let <_cor3> =
		  %% Line 14891
		  apply 'dynamicsort_SETOF'/1
		      (AccBytes)
	      in  %% Line 14891
		  {_cor3,AccLen}
	  %% Line 14893
	  <[H|T],AccBytes,AccLen> when 'true' ->
	      %% Line 14894
	      case apply 'enc_ExtensionAttribute'/2
		       (H, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes,EncLen}> when 'true' ->
		    let <_cor5> =
			%% Line 14895
			call 'erlang':'+'
			    (AccLen, EncLen)
		    in  %% Line 14895
			apply 'enc_OTPExtensionAttributes_components'/3
			    (T, [EncBytes|AccBytes], _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'enc_OTPExtensionAttributes_components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_OTPExtensionAttributes'/1 =
    %% Line 14899
    fun (_cor0) ->
	%% Line 14900
	apply 'dec_OTPExtensionAttributes'/2
	    (_cor0, [17])
'dec_OTPExtensionAttributes'/2 =
    %% Line 14902
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 14906
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 14907
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[V1|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'dec_ExtensionAttribute'/2
					(V1, [16])
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (Tlv1)
	      -| ['list_comprehension'] )
'enc_OTPCharacteristic-two'/1 =
    %% Line 14915
    fun (_cor0) ->
	%% Line 14916
	apply 'enc_OTPCharacteristic-two'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_OTPCharacteristic-two'/2 =
    %% Line 14918
    fun (_cor1,_cor0) ->
	%% Line 14919
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2,Cindex3}> when 'true' ->
	      let <Objbasis> =
		  %% Line 14921
		  call 'OTP-PUB-KEY':'getenc_SupportedCharacteristicTwos'
		      (Cindex2)
	      in  %% Line 14926
		  case apply 'encode_integer'/2
			   (Cindex1, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
		    <{EncBytes1,EncLen1}> when 'true' ->
			%% Line 14931
			case apply 'encode_object_identifier'/2
				 (Cindex2, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
			  <{EncBytes2,EncLen2}> when 'true' ->
			      %% Line 14936
			      case apply Objbasis
				       ('Type', Cindex3, []) of
				<{TmpBytes3,_cor14}> when 'true' ->
				    %% Line 14937
				    case apply 'encode_open_type'/2
					     (TmpBytes3, []) of
				      <{EncBytes3,EncLen3}> when 'true' ->
					  let <BytesSoFar> =
					      %% Line 14940
					      [EncBytes1|[EncBytes2|[EncBytes3|[]]]]
					  in  let <_cor9> =
						  %% Line 14941
						  call 'erlang':'+'
						      (EncLen1, EncLen2)
					      in  let <LenSoFar> =
						      %% Line 14941
						      call 'erlang':'+'
							  (_cor9, EncLen3)
						  in  %% Line 14942
						      apply 'encode_tags'/3
							  (_cor0, BytesSoFar, LenSoFar)
				      ( <_cor7> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor7})
					-| ['compiler_generated'] )
				    end
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor6})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_OTPCharacteristic-two'/1 =
    %% Line 14945
    fun (_cor0) ->
	%% Line 14946
	apply 'dec_OTPCharacteristic-two'/2
	    (_cor0, [16])
'dec_OTPCharacteristic-two'/2 =
    %% Line 14948
    fun (_cor1,_cor0) ->
	%% Line 14957
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 14958
		  apply 'decode_integer'/2
		      (V1, [2])
	      in  %% Line 14963
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 14964
			    apply 'decode_object_identifier'/2
				(V2, [6])
			in  %% Line 14969
			    case Tlv3 of
			      <[V3|Tlv4]> when 'true' ->
				  let <Tmpterm1> =
				      %% Line 14971
				      apply 'decode_open_type'/2
					  (V3, [])
				  in  let <DecObjbasisTerm2> =
					  %% Line 14974
					  call 'OTP-PUB-KEY':'getdec_SupportedCharacteristicTwos'
					      (Term2)
				      in  let <_cor10> =
					      catch
						  %% Line 14976
						  apply DecObjbasisTerm2
						      ('Type', Tmpterm1, [])
					  in  let <_cor12> =
						  %% Line 14976
						  case _cor10 of
						    %% Line 14977
						    <{'EXIT',Reason1}> when 'true' ->
							%% Line 14978
							call 'erlang':'exit'
							    ({'Type not compatible with table constraint',Reason1})
						    %% Line 14979
						    <Tmpterm2> when 'true' ->
							%% Line 14980
							Tmpterm2
						  end
					      in  do  %% Line 14983
						      case Tlv4 of
							%% Line 14984
							<[]> when 'true' ->
							    'ok'
							%% Line 14984
							<_cor17> when 'true' ->
							    call 'erlang':'exit'
								({'error',{'asn1',{'unexpected',Tlv4}}})
						      end
						      %% Line 14986
						      {'OTPCharacteristic-two',Term1,Term2,_cor12}
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_OTPFieldID'/1 =
    %% Line 14993
    fun (_cor0) ->
	%% Line 14994
	apply 'enc_OTPFieldID'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_OTPFieldID'/2 =
    %% Line 14996
    fun (_cor1,_cor0) ->
	%% Line 14997
	case _cor1 of
	  <{_cor11,Cindex1,Cindex2}> when 'true' ->
	      let <ObjfieldType> =
		  %% Line 14999
		  call 'OTP-PUB-KEY':'getenc_SupportedFieldIds'
		      (Cindex1)
	      in  %% Line 15004
		  case apply 'encode_object_identifier'/2
			   (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		    <{EncBytes1,EncLen1}> when 'true' ->
			%% Line 15009
			case apply ObjfieldType
				 ('Type', Cindex2, []) of
			  <{TmpBytes2,_cor12}> when 'true' ->
			      %% Line 15010
			      case apply 'encode_open_type'/2
				       (TmpBytes2, []) of
				<{EncBytes2,EncLen2}> when 'true' ->
				    let <BytesSoFar> =
					%% Line 15013
					[EncBytes1|[EncBytes2|[]]]
				    in  let <LenSoFar> =
					    %% Line 15014
					    call 'erlang':'+'
						(EncLen1, EncLen2)
					in  %% Line 15015
					    apply 'encode_tags'/3
						(_cor0, BytesSoFar, LenSoFar)
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor6})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_OTPFieldID'/1 =
    %% Line 15018
    fun (_cor0) ->
	%% Line 15019
	apply 'dec_OTPFieldID'/2
	    (_cor0, [16])
'dec_OTPFieldID'/2 =
    %% Line 15021
    fun (_cor1,_cor0) ->
	%% Line 15030
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 15031
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  %% Line 15036
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Tmpterm1> =
			    %% Line 15038
			    apply 'decode_open_type'/2
				(V2, [])
			in  let <DecObjfieldTypeTerm1> =
				%% Line 15041
				call 'OTP-PUB-KEY':'getdec_SupportedFieldIds'
				    (Term1)
			    in  let <_cor8> =
				    catch
					%% Line 15043
					apply DecObjfieldTypeTerm1
					    ('Type', Tmpterm1, [])
				in  let <_cor10> =
					%% Line 15043
					case _cor8 of
					  %% Line 15044
					  <{'EXIT',Reason1}> when 'true' ->
					      %% Line 15045
					      call 'erlang':'exit'
						  ({'Type not compatible with table constraint',Reason1})
					  %% Line 15046
					  <Tmpterm2> when 'true' ->
					      %% Line 15047
					      Tmpterm2
					end
				    in  do  %% Line 15050
					    case Tlv3 of
					      %% Line 15051
					      <[]> when 'true' ->
						  'ok'
					      %% Line 15051
					      <_cor15> when 'true' ->
						  call 'erlang':'exit'
						      ({'error',{'asn1',{'unexpected',Tlv3}}})
					    end
					    %% Line 15053
					    {'OTPFieldID',Term1,_cor10}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_KEA-PublicKey'/1 =
    %% Line 15060
    fun (_cor0) ->
	%% Line 15061
	apply 'enc_KEA-PublicKey'/2
	    (_cor0, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
'enc_KEA-PublicKey'/2 =
    %% Line 15063
    fun (_cor1,_cor0) ->
	%% Line 15064
	apply 'encode_integer'/2
	    (_cor1, _cor0)
'dec_KEA-PublicKey'/1 =
    %% Line 15067
    fun (_cor0) ->
	%% Line 15068
	apply 'dec_KEA-PublicKey'/2
	    (_cor0, [2])
'dec_KEA-PublicKey'/2 =
    %% Line 15070
    fun (_cor1,_cor0) ->
	%% Line 15071
	apply 'decode_integer'/2
	    (_cor1, _cor0)
'enc_DSAParams'/1 =
    %% Line 15078
    fun (_cor0) ->
	%% Line 15079
	apply 'enc_DSAParams'/2
	    (_cor0, [])
'enc_DSAParams'/2 =
    %% Line 15081
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 15082
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 15083
	      <'params'> when 'true' ->
		  let <_cor2> =
		      %% Line 15084
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 15084
		      apply 'enc_Dss-Parms'/2
			  (_cor2, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 15085
	      <'null'> when 'true' ->
		  let <_cor3> =
		      %% Line 15086
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 15086
		      apply 'encode_null'/2
			  (_cor3, [#{#<5>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 15087
	      <Else> when 'true' ->
		  %% Line 15088
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 15082
	    case _cor5 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 15091
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor6})
		-| ['compiler_generated'] )
	    end
'dec_DSAParams'/1 =
    %% Line 15096
    fun (_cor0) ->
	%% Line 15097
	apply 'dec_DSAParams'/2
	    (_cor0, [])
'dec_DSAParams'/2 =
    %% Line 15099
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 15100
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 15101
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor10> when 'true' ->
		      Tlv1
		end
	    in  %% Line 15101
		case _cor4 of
		  %% Line 15104
		  <{16,V1}> when 'true' ->
		      let <_cor5> =
			  %% Line 15105
			  apply 'dec_Dss-Parms'/2
			      (V1, [])
		      in  %% Line 15105
			  {'params',_cor5}
		  %% Line 15109
		  <{5,V1}> when 'true' ->
		      let <_cor6> =
			  %% Line 15110
			  apply 'decode_null'/2
			      (V1, [])
		      in  %% Line 15110
			  {'null',_cor6}
		  %% Line 15112
		  <Else> when 'true' ->
		      %% Line 15113
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'enc_PublicKeyAlgorithm'/1 =
    %% Line 15121
    fun (_cor0) ->
	%% Line 15122
	apply 'enc_PublicKeyAlgorithm'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_PublicKeyAlgorithm'/2 =
    %% Line 15124
    fun (_cor1,_cor0) ->
	%% Line 15125
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2}> when 'true' ->
	      let <Objalgorithm> =
		  %% Line 15127
		  call 'OTP-PUB-KEY':'getenc_SupportedPublicKeyAlgorithms'
		      (Cindex1)
	      in  %% Line 15132
		  case apply 'encode_object_identifier'/2
			   (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor7> =
			    %% Line 15137
			    case Cindex2 of
			      %% Line 15138
			      <'asn1_NOVALUE'> when 'true' ->
				  {#{}#,0}
			      %% Line 15139
			      <_cor14> when 'true' ->
				  %% Line 15140
				  case apply Objalgorithm
					   ('Type', Cindex2, []) of
				    <{TmpBytes2,_cor15}> when 'true' ->
					%% Line 15141
					apply 'encode_open_type'/2
					    (TmpBytes2, [])
				    ( <_cor5> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor5})
				      -| ['compiler_generated'] )
				  end
			    end
			in  %% Line 15137
			    case _cor7 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  let <BytesSoFar> =
				      %% Line 15144
				      [EncBytes1|[EncBytes2|[]]]
				  in  let <LenSoFar> =
					  %% Line 15145
					  call 'erlang':'+'
					      (EncLen1, EncLen2)
				      in  %% Line 15146
					  apply 'encode_tags'/3
					      (_cor0, BytesSoFar, LenSoFar)
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_PublicKeyAlgorithm'/1 =
    %% Line 15149
    fun (_cor0) ->
	%% Line 15150
	apply 'dec_PublicKeyAlgorithm'/2
	    (_cor0, [16])
'dec_PublicKeyAlgorithm'/2 =
    %% Line 15152
    fun (_cor1,_cor0) ->
	%% Line 15161
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 15162
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  let <Tmpterm1,Tlv3> =
		      %% Line 15167
		      case Tlv2 of
			%% Line 15168
			<[V2|TempTlv3]> when 'true' ->
			    let <_cor5> =
				%% Line 15169
				apply 'decode_open_type'/2
				    (V2, [])
			    in  <_cor5,%% Line 15169
				       TempTlv3>
			%% Line 15170
			<_cor18> when 'true' ->
			    %% Line 15171
			    <'asn1_NOVALUE',Tlv2>
		      end
		  in  let <DecObjalgorithmTerm1> =
			  %% Line 15175
			  call 'OTP-PUB-KEY':'getdec_SupportedPublicKeyAlgorithms'
			      (Term1)
		      in  let <_cor13> =
			      %% Line 15177
			      case Tmpterm1 of
				%% Line 15178
				<'asn1_NOVALUE'> when 'true' ->
				    'asn1_NOVALUE'
				%% Line 15179
				<_cor19> when 'true' ->
				    let <_cor10> =
					catch
					    %% Line 15180
					    apply DecObjalgorithmTerm1
						('Type', Tmpterm1, [])
				    in  %% Line 15180
					case _cor10 of
					  %% Line 15181
					  <{'EXIT',Reason1}> when 'true' ->
					      %% Line 15182
					      call 'erlang':'exit'
						  ({'Type not compatible with table constraint',Reason1})
					  %% Line 15183
					  <Tmpterm2> when 'true' ->
					      %% Line 15184
					      Tmpterm2
					end
			      end
			  in  do  %% Line 15188
				  case Tlv3 of
				    %% Line 15189
				    <[]> when 'true' ->
					'ok'
				    %% Line 15189
				    <_cor20> when 'true' ->
					call 'erlang':'exit'
					    ({'error',{'asn1',{'unexpected',Tlv3}}})
				  end
				  %% Line 15191
				  {'PublicKeyAlgorithm',Term1,_cor13}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_SignatureAlgorithm-Any'/1 =
    %% Line 15198
    fun (_cor0) ->
	%% Line 15199
	apply 'enc_SignatureAlgorithm-Any'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_SignatureAlgorithm-Any'/2 =
    %% Line 15201
    fun (_cor1,_cor0) ->
	%% Line 15202
	case _cor1 of
	  <{_cor11,Cindex1,Cindex2}> when 'true' ->
	      %% Line 15207
	      case apply 'encode_object_identifier'/2
		       (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    let <_cor5> =
			%% Line 15212
			case Cindex2 of
			  %% Line 15213
			  <'asn1_NOVALUE'> when 'true' ->
			      {#{}#,0}
			  %% Line 15214
			  <_cor12> when 'true' ->
			      %% Line 15215
			      apply 'encode_open_type'/2
				  (Cindex2, [])
			end
		    in  %% Line 15212
			case _cor5 of
			  <{EncBytes2,EncLen2}> when 'true' ->
			      let <BytesSoFar> =
				  %% Line 15218
				  [EncBytes1|[EncBytes2|[]]]
			      in  let <LenSoFar> =
				      %% Line 15219
				      call 'erlang':'+'
					  (EncLen1, EncLen2)
				  in  %% Line 15220
				      apply 'encode_tags'/3
					  (_cor0, BytesSoFar, LenSoFar)
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_SignatureAlgorithm-Any'/1 =
    %% Line 15223
    fun (_cor0) ->
	%% Line 15224
	apply 'dec_SignatureAlgorithm-Any'/2
	    (_cor0, [16])
'dec_SignatureAlgorithm-Any'/2 =
    %% Line 15226
    fun (_cor1,_cor0) ->
	%% Line 15235
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 15236
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  let <Term2,Tlv3> =
		      %% Line 15241
		      case Tlv2 of
			%% Line 15242
			<[V2|TempTlv3]> when 'true' ->
			    let <_cor5> =
				%% Line 15243
				apply 'decode_open_type_as_binary'/2
				    (V2, [])
			    in  <_cor5,%% Line 15243
				       TempTlv3>
			%% Line 15244
			<_cor12> when 'true' ->
			    %% Line 15245
			    <'asn1_NOVALUE',Tlv2>
		      end
		  in  do  %% Line 15248
			  case Tlv3 of
			    %% Line 15249
			    <[]> when 'true' ->
				'ok'
			    %% Line 15249
			    <_cor13> when 'true' ->
				call 'erlang':'exit'
				    ({'error',{'asn1',{'unexpected',Tlv3}}})
			  end
			  %% Line 15251
			  {'SignatureAlgorithm-Any',Term1,Term2}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_SignatureAlgorithm'/1 =
    %% Line 15258
    fun (_cor0) ->
	%% Line 15259
	apply 'enc_SignatureAlgorithm'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_SignatureAlgorithm'/2 =
    %% Line 15261
    fun (_cor1,_cor0) ->
	%% Line 15262
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2}> when 'true' ->
	      let <Objalgorithm> =
		  %% Line 15264
		  call 'OTP-PUB-KEY':'getenc_SupportedSignatureAlgorithms'
		      (Cindex1)
	      in  %% Line 15269
		  case apply 'encode_object_identifier'/2
			   (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor7> =
			    %% Line 15274
			    case Cindex2 of
			      %% Line 15275
			      <'asn1_NOVALUE'> when 'true' ->
				  {#{}#,0}
			      %% Line 15276
			      <_cor14> when 'true' ->
				  %% Line 15277
				  case apply Objalgorithm
					   ('Type', Cindex2, []) of
				    <{TmpBytes2,_cor15}> when 'true' ->
					%% Line 15278
					apply 'encode_open_type'/2
					    (TmpBytes2, [])
				    ( <_cor5> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor5})
				      -| ['compiler_generated'] )
				  end
			    end
			in  %% Line 15274
			    case _cor7 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  let <BytesSoFar> =
				      %% Line 15281
				      [EncBytes1|[EncBytes2|[]]]
				  in  let <LenSoFar> =
					  %% Line 15282
					  call 'erlang':'+'
					      (EncLen1, EncLen2)
				      in  %% Line 15283
					  apply 'encode_tags'/3
					      (_cor0, BytesSoFar, LenSoFar)
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_SignatureAlgorithm'/1 =
    %% Line 15286
    fun (_cor0) ->
	%% Line 15287
	apply 'dec_SignatureAlgorithm'/2
	    (_cor0, [16])
'dec_SignatureAlgorithm'/2 =
    %% Line 15289
    fun (_cor1,_cor0) ->
	%% Line 15298
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 15299
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  let <Tmpterm1,Tlv3> =
		      %% Line 15304
		      case Tlv2 of
			%% Line 15305
			<[V2|TempTlv3]> when 'true' ->
			    let <_cor5> =
				%% Line 15306
				apply 'decode_open_type'/2
				    (V2, [])
			    in  <_cor5,%% Line 15306
				       TempTlv3>
			%% Line 15307
			<_cor18> when 'true' ->
			    %% Line 15308
			    <'asn1_NOVALUE',Tlv2>
		      end
		  in  let <DecObjalgorithmTerm1> =
			  %% Line 15312
			  call 'OTP-PUB-KEY':'getdec_SupportedSignatureAlgorithms'
			      (Term1)
		      in  let <_cor13> =
			      %% Line 15314
			      case Tmpterm1 of
				%% Line 15315
				<'asn1_NOVALUE'> when 'true' ->
				    'asn1_NOVALUE'
				%% Line 15316
				<_cor19> when 'true' ->
				    let <_cor10> =
					catch
					    %% Line 15317
					    apply DecObjalgorithmTerm1
						('Type', Tmpterm1, [])
				    in  %% Line 15317
					case _cor10 of
					  %% Line 15318
					  <{'EXIT',Reason1}> when 'true' ->
					      %% Line 15319
					      call 'erlang':'exit'
						  ({'Type not compatible with table constraint',Reason1})
					  %% Line 15320
					  <Tmpterm2> when 'true' ->
					      %% Line 15321
					      Tmpterm2
					end
			      end
			  in  do  %% Line 15325
				  case Tlv3 of
				    %% Line 15326
				    <[]> when 'true' ->
					'ok'
				    %% Line 15326
				    <_cor20> when 'true' ->
					call 'erlang':'exit'
					    ({'error',{'asn1',{'unexpected',Tlv3}}})
				  end
				  %% Line 15328
				  {'SignatureAlgorithm',Term1,_cor13}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_OTPSubjectPublicKeyInfo-Any'/1 =
    %% Line 15335
    fun (_cor0) ->
	%% Line 15336
	apply 'enc_OTPSubjectPublicKeyInfo-Any'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_OTPSubjectPublicKeyInfo-Any'/2 =
    %% Line 15338
    fun (_cor1,_cor0) ->
	%% Line 15339
	case _cor1 of
	  <{_cor9,Cindex1,Cindex2}> when 'true' ->
	      %% Line 15344
	      case apply 'enc_PublicKeyAlgorithm'/2
		       (Cindex1, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 15349
		    case apply 'encode_open_type'/2
			     (Cindex2, []) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <BytesSoFar> =
			      %% Line 15351
			      [EncBytes1|[EncBytes2|[]]]
			  in  let <LenSoFar> =
				  %% Line 15352
				  call 'erlang':'+'
				      (EncLen1, EncLen2)
			      in  %% Line 15353
				  apply 'encode_tags'/3
				      (_cor0, BytesSoFar, LenSoFar)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_OTPSubjectPublicKeyInfo-Any'/1 =
    %% Line 15356
    fun (_cor0) ->
	%% Line 15357
	apply 'dec_OTPSubjectPublicKeyInfo-Any'/2
	    (_cor0, [16])
'dec_OTPSubjectPublicKeyInfo-Any'/2 =
    %% Line 15359
    fun (_cor1,_cor0) ->
	%% Line 15368
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 15369
		  apply 'dec_PublicKeyAlgorithm'/2
		      (V1, [16])
	      in  %% Line 15374
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 15375
			    apply 'decode_open_type_as_binary'/2
				(V2, [])
			in  do  %% Line 15377
				case Tlv3 of
				  %% Line 15378
				  <[]> when 'true' ->
				      'ok'
				  %% Line 15378
				  <_cor10> when 'true' ->
				      call 'erlang':'exit'
					  ({'error',{'asn1',{'unexpected',Tlv3}}})
				end
				%% Line 15380
				{'OTPSubjectPublicKeyInfo-Any',Term1,Term2}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_OTPSubjectPublicKeyInfo'/1 =
    %% Line 15387
    fun (_cor0) ->
	%% Line 15388
	apply 'enc_OTPSubjectPublicKeyInfo'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_OTPSubjectPublicKeyInfo'/2 =
    %% Line 15390
    fun (_cor1,_cor0) ->
	%% Line 15391
	case _cor1 of
	  <{_cor9,Cindex1,Cindex2}> when 'true' ->
	      %% Line 15396
	      case apply 'enc_PublicKeyAlgorithm'/2
		       (Cindex1, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 15401
		    case apply 'encode_bit_string'/4
			     ([], Cindex2, [], [#{#<3>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  let <BytesSoFar> =
			      %% Line 15403
			      [EncBytes1|[EncBytes2|[]]]
			  in  let <LenSoFar> =
				  %% Line 15404
				  call 'erlang':'+'
				      (EncLen1, EncLen2)
			      in  %% Line 15405
				  apply 'encode_tags'/3
				      (_cor0, BytesSoFar, LenSoFar)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_OTPSubjectPublicKeyInfo'/1 =
    %% Line 15408
    fun (_cor0) ->
	%% Line 15409
	apply 'dec_OTPSubjectPublicKeyInfo'/2
	    (_cor0, [16])
'dec_OTPSubjectPublicKeyInfo'/2 =
    %% Line 15411
    fun (_cor1,_cor0) ->
	%% Line 15420
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 15421
		  apply 'dec_PublicKeyAlgorithm'/2
		      (V1, [16])
	      in  %% Line 15426
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 15427
			    apply 'decode_compact_bit_string'/2
				(V2, [3])
			in  do  %% Line 15429
				case Tlv3 of
				  %% Line 15430
				  <[]> when 'true' ->
				      'ok'
				  %% Line 15430
				  <_cor10> when 'true' ->
				      call 'erlang':'exit'
					  ({'error',{'asn1',{'unexpected',Tlv3}}})
				end
				%% Line 15432
				{'OTPSubjectPublicKeyInfo',Term1,Term2}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_OTPOLDSubjectPublicKeyInfo'/1 =
    %% Line 15439
    fun (_cor0) ->
	%% Line 15440
	apply 'enc_OTPOLDSubjectPublicKeyInfo'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_OTPOLDSubjectPublicKeyInfo'/2 =
    %% Line 15442
    fun (_cor1,_cor0) ->
	%% Line 15443
	case _cor1 of
	  <{_cor12,Cindex1,Cindex2}> when 'true' ->
	      let <_cor3> =
		  %% Line 15445
		  call 'erlang':'element'
		      (2, Cindex1)
	      in  let <Objalgorithm> =
		      %% Line 15445
		      call 'OTP-PUB-KEY':'getenc_SupportedPublicKeyAlgorithms'
			  (_cor3)
		  in  %% Line 15450
		      case apply 'enc_OTPOLDSubjectPublicKeyInfo_algorithm'/2
			       (Cindex1, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
			<{EncBytes1,EncLen1}> when 'true' ->
			    %% Line 15455
			    case apply Objalgorithm
				     ('PublicKeyType', Cindex2, []) of
			      <{TmpBytes2,_cor13}> when 'true' ->
				  %% Line 15456
				  case apply 'encode_open_type'/2
					   (TmpBytes2, []) of
				    <{EncBytes2,EncLen2}> when 'true' ->
					let <BytesSoFar> =
					    %% Line 15459
					    [EncBytes1|[EncBytes2|[]]]
					in  let <LenSoFar> =
						%% Line 15460
						call 'erlang':'+'
						    (EncLen1, EncLen2)
					    in  %% Line 15461
						apply 'encode_tags'/3
						    (_cor0, BytesSoFar, LenSoFar)
				    ( <_cor7> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor7})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor6})
				-| ['compiler_generated'] )
			    end
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor5})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'enc_OTPOLDSubjectPublicKeyInfo_algorithm'/2 =
    %% Line 15468
    fun (_cor1,_cor0) ->
	%% Line 15469
	case _cor1 of
	  <{_cor13,Cindex1,Cindex2}> when 'true' ->
	      let <Objalgo> =
		  %% Line 15471
		  call 'OTP-PUB-KEY':'getenc_SupportedPublicKeyAlgorithms'
		      (Cindex1)
	      in  %% Line 15476
		  case apply 'encode_object_identifier'/2
			   (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		    <{EncBytes1,EncLen1}> when 'true' ->
			let <_cor7> =
			    %% Line 15481
			    case Cindex2 of
			      %% Line 15482
			      <'asn1_NOVALUE'> when 'true' ->
				  {#{}#,0}
			      %% Line 15483
			      <_cor14> when 'true' ->
				  %% Line 15484
				  case apply Objalgo
					   ('Type', Cindex2, []) of
				    <{TmpBytes2,_cor15}> when 'true' ->
					%% Line 15485
					apply 'encode_open_type'/2
					    (TmpBytes2, [])
				    ( <_cor5> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor5})
				      -| ['compiler_generated'] )
				  end
			    end
			in  %% Line 15481
			    case _cor7 of
			      <{EncBytes2,EncLen2}> when 'true' ->
				  let <BytesSoFar> =
				      %% Line 15488
				      [EncBytes1|[EncBytes2|[]]]
				  in  let <LenSoFar> =
					  %% Line 15489
					  call 'erlang':'+'
					      (EncLen1, EncLen2)
				      in  %% Line 15490
					  apply 'encode_tags'/3
					      (_cor0, BytesSoFar, LenSoFar)
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_OTPOLDSubjectPublicKeyInfo_algorithm'/2 =
    %% Line 15491
    fun (_cor1,_cor0) ->
	%% Line 15500
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 15501
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  let <Tmpterm1,Tlv3> =
		      %% Line 15506
		      case Tlv2 of
			%% Line 15507
			<[V2|TempTlv3]> when 'true' ->
			    let <_cor5> =
				%% Line 15508
				apply 'decode_open_type'/2
				    (V2, [])
			    in  <_cor5,%% Line 15508
				       TempTlv3>
			%% Line 15509
			<_cor18> when 'true' ->
			    %% Line 15510
			    <'asn1_NOVALUE',Tlv2>
		      end
		  in  let <DecObjalgoTerm1> =
			  %% Line 15514
			  call 'OTP-PUB-KEY':'getdec_SupportedPublicKeyAlgorithms'
			      (Term1)
		      in  let <_cor13> =
			      %% Line 15516
			      case Tmpterm1 of
				%% Line 15517
				<'asn1_NOVALUE'> when 'true' ->
				    'asn1_NOVALUE'
				%% Line 15518
				<_cor19> when 'true' ->
				    let <_cor10> =
					catch
					    %% Line 15519
					    apply DecObjalgoTerm1
						('Type', Tmpterm1, [])
				    in  %% Line 15519
					case _cor10 of
					  %% Line 15520
					  <{'EXIT',Reason1}> when 'true' ->
					      %% Line 15521
					      call 'erlang':'exit'
						  ({'Type not compatible with table constraint',Reason1})
					  %% Line 15522
					  <Tmpterm2> when 'true' ->
					      %% Line 15523
					      Tmpterm2
					end
			      end
			  in  do  %% Line 15527
				  case Tlv3 of
				    %% Line 15528
				    <[]> when 'true' ->
					'ok'
				    %% Line 15528
				    <_cor20> when 'true' ->
					call 'erlang':'exit'
					    ({'error',{'asn1',{'unexpected',Tlv3}}})
				  end
				  %% Line 15530
				  {'OTPOLDSubjectPublicKeyInfo_algorithm',Term1,_cor13}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'dec_OTPOLDSubjectPublicKeyInfo'/1 =
    %% Line 15534
    fun (_cor0) ->
	%% Line 15535
	apply 'dec_OTPOLDSubjectPublicKeyInfo'/2
	    (_cor0, [16])
'dec_OTPOLDSubjectPublicKeyInfo'/2 =
    %% Line 15537
    fun (_cor1,_cor0) ->
	%% Line 15546
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 15547
		  apply 'dec_OTPOLDSubjectPublicKeyInfo_algorithm'/2
		      (V1, [16])
	      in  %% Line 15552
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Tmpterm1> =
			    %% Line 15554
			    apply 'decode_open_type'/2
				(V2, [])
			in  let <_cor7> =
				%% Line 15557
				call 'erlang':'element'
				    (2, Term1)
			    in  let <DecObjalgorithmTerm1> =
				    %% Line 15557
				    call 'OTP-PUB-KEY':'getdec_SupportedPublicKeyAlgorithms'
					(_cor7)
				in  let <_cor9> =
					catch
					    %% Line 15559
					    apply DecObjalgorithmTerm1
						('PublicKeyType', Tmpterm1, [])
				    in  let <_cor11> =
					    %% Line 15559
					    case _cor9 of
					      %% Line 15560
					      <{'EXIT',Reason1}> when 'true' ->
						  %% Line 15561
						  call 'erlang':'exit'
						      ({'Type not compatible with table constraint',Reason1})
					      %% Line 15562
					      <Tmpterm2> when 'true' ->
						  %% Line 15563
						  Tmpterm2
					    end
					in  do  %% Line 15566
						case Tlv3 of
						  %% Line 15567
						  <[]> when 'true' ->
						      'ok'
						  %% Line 15567
						  <_cor16> when 'true' ->
						      call 'erlang':'exit'
							  ({'error',{'asn1',{'unexpected',Tlv3}}})
						end
						%% Line 15569
						{'OTPOLDSubjectPublicKeyInfo',Term1,_cor11}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_OTP-emailAddress'/1 =
    %% Line 15576
    fun (_cor0) ->
	%% Line 15577
	apply 'enc_OTP-emailAddress'/2
	    (_cor0, [])
'enc_OTP-emailAddress'/2 =
    %% Line 15579
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 15580
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 15581
	      <'ia5String'> when 'true' ->
		  let <_cor2> =
		      %% Line 15582
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 15582
		      apply 'encode_restricted_string'/2
			  (_cor2, [#{#<22>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 15583
	      <'utf8String'> when 'true' ->
		  let <_cor3> =
		      %% Line 15584
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 15584
		      apply 'encode_UTF8_string'/2
			  (_cor3, [#{#<12>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 15585
	      <Else> when 'true' ->
		  %% Line 15586
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 15580
	    case _cor5 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 15589
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor6})
		-| ['compiler_generated'] )
	    end
'dec_OTP-emailAddress'/1 =
    %% Line 15594
    fun (_cor0) ->
	%% Line 15595
	apply 'dec_OTP-emailAddress'/2
	    (_cor0, [])
'dec_OTP-emailAddress'/2 =
    %% Line 15597
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 15598
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 15599
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor14> when 'true' ->
		      Tlv1
		end
	    in  %% Line 15599
		case _cor4 of
		  %% Line 15602
		  <{22,V1}> when 'true' ->
		      let <Val1> =
			  %% Line 15604
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <C1> =
			      %% Line 15605
			      call 'erlang':'byte_size'
				  (Val1)
			  in  %% Line 15606
			      case <> of
				<>
				    when let <_cor7> =
					  call 'erlang':'=<'
					      (1, C1)
				      in  let <_cor8> =
					      call 'erlang':'=<'
						  (C1, 255)
					  in  call 'erlang':'and'
						  (_cor7, _cor8) ->
				    let <_cor9> =
					%% Line 15607
					call 'erlang':'binary_to_list'
					    (Val1)
				    in  {'ia5String',_cor9}
				%% Line 15608
				<> when 'true' ->
				    %% Line 15609
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 15615
		  <{12,V1}> when 'true' ->
		      let <_cor10> =
			  %% Line 15616
			  apply 'decode_UTF8_string'/2
			      (V1, [])
		      in  %% Line 15616
			  {'utf8String',_cor10}
		  %% Line 15618
		  <Else> when 'true' ->
		      %% Line 15619
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'enc_OTP-X520countryname'/1 =
    %% Line 15627
    fun (_cor0) ->
	%% Line 15628
	apply 'enc_OTP-X520countryname'/2
	    (_cor0, [])
'enc_OTP-X520countryname'/2 =
    %% Line 15630
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 15631
	    case call 'erlang':'element'
		     (1, _cor1) of
	      %% Line 15632
	      <'printableString'> when 'true' ->
		  let <_cor2> =
		      %% Line 15633
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 15633
		      apply 'encode_restricted_string'/2
			  (_cor2, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 15634
	      <'utf8String'> when 'true' ->
		  let <_cor3> =
		      %% Line 15635
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 15635
		      apply 'encode_UTF8_string'/2
			  (_cor3, [#{#<12>(8,1,'integer',['unsigned'|['big']])}#])
	      %% Line 15636
	      <Else> when 'true' ->
		  %% Line 15637
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'invalid_choice_type',Else}}})
	    end
	in  %% Line 15631
	    case _cor5 of
	      <{EncBytes,EncLen}> when 'true' ->
		  %% Line 15640
		  apply 'encode_tags'/3
		      (_cor0, EncBytes, EncLen)
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor6})
		-| ['compiler_generated'] )
	    end
'dec_OTP-X520countryname'/1 =
    %% Line 15645
    fun (_cor0) ->
	%% Line 15646
	apply 'dec_OTP-X520countryname'/2
	    (_cor0, [])
'dec_OTP-X520countryname'/2 =
    %% Line 15648
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 15649
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 15650
		case Tlv1 of
		  <[CtempTlv1|[]]> when 'true' ->
		      CtempTlv1
		  <_cor12> when 'true' ->
		      Tlv1
		end
	    in  %% Line 15650
		case _cor4 of
		  %% Line 15653
		  <{19,V1}> when 'true' ->
		      let <Val1> =
			  %% Line 15655
			  apply 'decode_restricted_string'/2
			      (V1, [])
		      in  let <C1> =
			      %% Line 15656
			      call 'erlang':'byte_size'
				  (Val1)
			  in  %% Line 15657
			      case <> of
				<>
				    when call 'erlang':'=:='
					  (C1,
					   2) ->
				    let <_cor7> =
					%% Line 15658
					call 'erlang':'binary_to_list'
					    (Val1)
				    in  {'printableString',_cor7}
				%% Line 15659
				<> when 'true' ->
				    %% Line 15660
				    call 'erlang':'exit'
					({'error',{'asn1','bad_range'}})
			      end
		  %% Line 15666
		  <{12,V1}> when 'true' ->
		      let <_cor8> =
			  %% Line 15667
			  apply 'decode_UTF8_string'/2
			      (V1, [])
		      in  %% Line 15667
			  {'utf8String',_cor8}
		  %% Line 15669
		  <Else> when 'true' ->
		      %% Line 15670
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'invalid_choice_tag',Else}}})
		end
'enc_OTPAttributeTypeAndValue'/1 =
    %% Line 15678
    fun (_cor0) ->
	%% Line 15679
	apply 'enc_OTPAttributeTypeAndValue'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_OTPAttributeTypeAndValue'/2 =
    %% Line 15681
    fun (_cor1,_cor0) ->
	%% Line 15682
	case _cor1 of
	  <{_cor11,Cindex1,Cindex2}> when 'true' ->
	      let <Objtype> =
		  %% Line 15684
		  call 'OTP-PUB-KEY':'getenc_SupportedAttributeTypeAndValues'
		      (Cindex1)
	      in  %% Line 15689
		  case apply 'encode_object_identifier'/2
			   (Cindex1, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#]) of
		    <{EncBytes1,EncLen1}> when 'true' ->
			%% Line 15694
			case apply Objtype
				 ('Type', Cindex2, []) of
			  <{TmpBytes2,_cor12}> when 'true' ->
			      %% Line 15695
			      case apply 'encode_open_type'/2
				       (TmpBytes2, []) of
				<{EncBytes2,EncLen2}> when 'true' ->
				    let <BytesSoFar> =
					%% Line 15698
					[EncBytes1|[EncBytes2|[]]]
				    in  let <LenSoFar> =
					    %% Line 15699
					    call 'erlang':'+'
						(EncLen1, EncLen2)
					in  %% Line 15700
					    apply 'encode_tags'/3
						(_cor0, BytesSoFar, LenSoFar)
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor6})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_OTPAttributeTypeAndValue'/1 =
    %% Line 15703
    fun (_cor0) ->
	%% Line 15704
	apply 'dec_OTPAttributeTypeAndValue'/2
	    (_cor0, [16])
'dec_OTPAttributeTypeAndValue'/2 =
    %% Line 15706
    fun (_cor1,_cor0) ->
	%% Line 15715
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 15716
		  apply 'decode_object_identifier'/2
		      (V1, [6])
	      in  %% Line 15721
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Tmpterm1> =
			    %% Line 15723
			    apply 'decode_open_type'/2
				(V2, [])
			in  let <DecObjtypeTerm1> =
				%% Line 15726
				call 'OTP-PUB-KEY':'getdec_SupportedAttributeTypeAndValues'
				    (Term1)
			    in  let <_cor8> =
				    catch
					%% Line 15728
					apply DecObjtypeTerm1
					    ('Type', Tmpterm1, [])
				in  let <_cor10> =
					%% Line 15728
					case _cor8 of
					  %% Line 15729
					  <{'EXIT',Reason1}> when 'true' ->
					      %% Line 15730
					      call 'erlang':'exit'
						  ({'Type not compatible with table constraint',Reason1})
					  %% Line 15731
					  <Tmpterm2> when 'true' ->
					      %% Line 15732
					      Tmpterm2
					end
				    in  do  %% Line 15735
					    case Tlv3 of
					      %% Line 15736
					      <[]> when 'true' ->
						  'ok'
					      %% Line 15736
					      <_cor15> when 'true' ->
						  call 'erlang':'exit'
						      ({'error',{'asn1',{'unexpected',Tlv3}}})
					    end
					    %% Line 15738
					    {'OTPAttributeTypeAndValue',Term1,_cor10}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'enc_OTPTBSCertificate'/1 =
    %% Line 15745
    fun (_cor0) ->
	%% Line 15746
	apply 'enc_OTPTBSCertificate'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_OTPTBSCertificate'/2 =
    %% Line 15748
    fun (_cor1,_cor0) ->
	%% Line 15749
	case _cor1 of
	  <{_cor33,Cindex1,Cindex2,Cindex3,Cindex4,Cindex5,Cindex6,Cindex7,Cindex8,Cindex9,Cindex10}> when 'true' ->
	      let <_cor4> =
		  %% Line 15754
		  case apply 'is_default_11'/1
			   (Cindex1) of
		    %% Line 15755
		    <'true'> when 'true' ->
			{[],0}
		    %% Line 15756
		    <'false'> when 'true' ->
			%% Line 15757
			apply 'encode_integer'/3
			    (Cindex1, [{'v1',0}|[{'v2',1}|[{'v3',2}]]], [#{#<2>(8,1,'integer',['unsigned'|['big']])}#|[#{#<160>(8,1,'integer',['unsigned'|['big']])}#]])
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 15754
		  case _cor4 of
		    <{EncBytes1,EncLen1}> when 'true' ->
			%% Line 15763
			case apply 'encode_integer'/2
				 (Cindex2, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#]) of
			  <{EncBytes2,EncLen2}> when 'true' ->
			      %% Line 15768
			      case apply 'enc_SignatureAlgorithm'/2
				       (Cindex3, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
				<{EncBytes3,EncLen3}> when 'true' ->
				    %% Line 15773
				    case apply 'enc_Name'/2
					     (Cindex4, []) of
				      <{EncBytes4,EncLen4}> when 'true' ->
					  %% Line 15778
					  case apply 'enc_Validity'/2
						   (Cindex5, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
					    <{EncBytes5,EncLen5}> when 'true' ->
						%% Line 15783
						case apply 'enc_Name'/2
							 (Cindex6, []) of
						  <{EncBytes6,EncLen6}> when 'true' ->
						      %% Line 15788
						      case apply 'enc_OTPSubjectPublicKeyInfo'/2
							       (Cindex7, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
							<{EncBytes7,EncLen7}> when 'true' ->
							    let <_cor13> =
								%% Line 15793
								case Cindex8 of
								  %% Line 15794
								  <'asn1_NOVALUE'> when 'true' ->
								      {#{}#,0}
								  %% Line 15795
								  <_cor34> when 'true' ->
								      %% Line 15796
								      apply 'encode_bit_string'/4
									  ([], Cindex8, [], [#{#<129>(8,1,'integer',['unsigned'|['big']])}#])
								end
							    in  %% Line 15793
								case _cor13 of
								  <{EncBytes8,EncLen8}> when 'true' ->
								      let <_cor16> =
									  %% Line 15802
									  case Cindex9 of
									    %% Line 15803
									    <'asn1_NOVALUE'> when 'true' ->
										{#{}#,0}
									    %% Line 15804
									    <_cor35> when 'true' ->
										%% Line 15805
										apply 'encode_bit_string'/4
										    ([], Cindex9, [], [#{#<130>(8,1,'integer',['unsigned'|['big']])}#])
									  end
								      in  %% Line 15802
									  case _cor16 of
									    <{EncBytes9,EncLen9}> when 'true' ->
										let <_cor19> =
										    %% Line 15811
										    case Cindex10 of
										      %% Line 15812
										      <'asn1_NOVALUE'> when 'true' ->
											  {#{}#,0}
										      %% Line 15813
										      <_cor36> when 'true' ->
											  %% Line 15814
											  apply 'enc_Extensions'/2
											      (Cindex10, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#|[#{#<163>(8,1,'integer',['unsigned'|['big']])}#]])
										    end
										in  %% Line 15811
										    case _cor19 of
										      <{EncBytes10,EncLen10}> when 'true' ->
											  let <BytesSoFar> =
											      %% Line 15817
											      [EncBytes1|[EncBytes2|[EncBytes3|[EncBytes4|[EncBytes5|[EncBytes6|[EncBytes7|[EncBytes8|[EncBytes9|[EncBytes10|[]]]]]]]]]]]
											  in  let <_cor22> =
												  %% Line 15818
												  call 'erlang':'+'
												      (EncLen1, EncLen2)
											      in  let <_cor23> =
												      %% Line 15818
												      call 'erlang':'+'
													  (_cor22, EncLen3)
												  in  let <_cor24> =
													  %% Line 15818
													  call 'erlang':'+'
													      (_cor23, EncLen4)
												      in  let <_cor25> =
													      %% Line 15818
													      call 'erlang':'+'
														  (_cor24, EncLen5)
													  in  let <_cor26> =
														  %% Line 15818
														  call 'erlang':'+'
														      (_cor25, EncLen6)
													      in  let <_cor27> =
														      %% Line 15818
														      call 'erlang':'+'
															  (_cor26, EncLen7)
														  in  let <_cor28> =
															  %% Line 15818
															  call 'erlang':'+'
															      (_cor27, EncLen8)
														      in  let <_cor29> =
															      %% Line 15818
															      call 'erlang':'+'
																  (_cor28, EncLen9)
															  in  let <LenSoFar> =
																  %% Line 15818
																  call 'erlang':'+'
																      (_cor29, EncLen10)
															      in  %% Line 15819
																  apply 'encode_tags'/3
																      (_cor0, BytesSoFar, LenSoFar)
										      ( <_cor20> when 'true' ->
											    primop 'match_fail'
												({'badmatch',_cor20})
											-| ['compiler_generated'] )
										    end
									    ( <_cor17> when 'true' ->
										  primop 'match_fail'
										      ({'badmatch',_cor17})
									      -| ['compiler_generated'] )
									  end
								  ( <_cor14> when 'true' ->
									primop 'match_fail'
									    ({'badmatch',_cor14})
								    -| ['compiler_generated'] )
								end
							( <_cor11> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor11})
							  -| ['compiler_generated'] )
						      end
						  ( <_cor10> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor10})
						    -| ['compiler_generated'] )
						end
					    ( <_cor9> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor9})
					      -| ['compiler_generated'] )
					  end
				      ( <_cor8> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor8})
					-| ['compiler_generated'] )
				    end
				( <_cor7> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor7})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_OTPTBSCertificate'/1 =
    %% Line 15822
    fun (_cor0) ->
	%% Line 15823
	apply 'dec_OTPTBSCertificate'/2
	    (_cor0, [16])
'dec_OTPTBSCertificate'/2 =
    %% Line 15825
    fun (_cor1,_cor0) ->
	let <Tlv1> =
	    %% Line 15829
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <Term1,Tlv2> =
		%% Line 15834
		case Tlv1 of
		  %% Line 15835
		  <[{131072,V1}|TempTlv2]> when 'true' ->
		      let <Val1> =
			  %% Line 15837
			  apply 'decode_integer'/2
			      (V1, [2])
		      in  let <_cor4> =
			      %% Line 15838
			      apply 'number2name'/2
				  (Val1, [{'v1',0}|[{'v2',1}|[{'v3',2}]]])
			  in  <_cor4,%% Line 15840
				     TempTlv2>
		  %% Line 15841
		  <_cor35> when 'true' ->
		      %% Line 15842
		      <0,Tlv1>
		end
	    in  %% Line 15848
		case Tlv2 of
		  <[V2|Tlv3]> when 'true' ->
		      let <Term2> =
			  %% Line 15849
			  apply 'decode_integer'/2
			      (V2, [2])
		      in  %% Line 15854
			  case Tlv3 of
			    <[V3|Tlv4]> when 'true' ->
				let <Term3> =
				    %% Line 15855
				    apply 'dec_SignatureAlgorithm'/2
					(V3, [16])
				in  %% Line 15860
				    case Tlv4 of
				      <[V4|Tlv5]> when 'true' ->
					  let <Term4> =
					      %% Line 15861
					      apply 'dec_Name'/2
						  (V4, [])
					  in  %% Line 15866
					      case Tlv5 of
						<[V5|Tlv6]> when 'true' ->
						    let <Term5> =
							%% Line 15867
							apply 'dec_Validity'/2
							    (V5, [16])
						    in  %% Line 15872
							case Tlv6 of
							  <[V6|Tlv7]> when 'true' ->
							      let <Term6> =
								  %% Line 15873
								  apply 'dec_Name'/2
								      (V6, [])
							      in  %% Line 15878
								  case Tlv7 of
								    <[V7|Tlv8]> when 'true' ->
									let <Term7> =
									    %% Line 15879
									    apply 'dec_OTPSubjectPublicKeyInfo'/2
										(V7, [16])
									in  let <Term8,Tlv9> =
										%% Line 15884
										case Tlv8 of
										  %% Line 15885
										  <[{131073,V8}|TempTlv9]> when 'true' ->
										      let <_cor20> =
											  %% Line 15886
											  apply 'decode_compact_bit_string'/2
											      (V8, [])
										      in  <_cor20,%% Line 15886
												  TempTlv9>
										  %% Line 15887
										  <_cor36> when 'true' ->
										      %% Line 15888
										      <'asn1_NOVALUE',Tlv8>
										end
									    in  let <Term9,Tlv10> =
										    %% Line 15894
										    case Tlv9 of
										      %% Line 15895
										      <[{131074,V9}|TempTlv10]> when 'true' ->
											  let <_cor24> =
											      %% Line 15896
											      apply 'decode_compact_bit_string'/2
												  (V9, [])
											  in  <_cor24,%% Line 15896
												      TempTlv10>
										      %% Line 15897
										      <_cor37> when 'true' ->
											  %% Line 15898
											  <'asn1_NOVALUE',Tlv9>
										    end
										in  let <Term10,Tlv11> =
											%% Line 15904
											case Tlv10 of
											  %% Line 15905
											  <[{131075,V10}|TempTlv11]> when 'true' ->
											      let <_cor28> =
												  %% Line 15906
												  apply 'dec_Extensions'/2
												      (V10, [16])
											      in  <_cor28,%% Line 15906
													  TempTlv11>
											  %% Line 15907
											  <_cor38> when 'true' ->
											      %% Line 15908
											      <'asn1_NOVALUE',Tlv10>
											end
										    in  do  %% Line 15911
											    case Tlv11 of
											      %% Line 15912
											      <[]> when 'true' ->
												  'ok'
											      %% Line 15912
											      <_cor39> when 'true' ->
												  call 'erlang':'exit'
												      ({'error',{'asn1',{'unexpected',Tlv11}}})
											    end
											    %% Line 15914
											    {'OTPTBSCertificate',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10}
								    ( <_cor18> when 'true' ->
									  primop 'match_fail'
									      ({'badmatch',_cor18})
								      -| ['compiler_generated'] )
								  end
							  ( <_cor16> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_cor16})
							    -| ['compiler_generated'] )
							end
						( <_cor14> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor14})
						  -| ['compiler_generated'] )
					      end
				      ( <_cor12> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor12})
					-| ['compiler_generated'] )
				    end
			    ( <_cor10> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor10})
			      -| ['compiler_generated'] )
			  end
		  ( <_cor8> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor8})
		    -| ['compiler_generated'] )
		end
'enc_OTPCertificate'/1 =
    %% Line 15921
    fun (_cor0) ->
	%% Line 15922
	apply 'enc_OTPCertificate'/2
	    (_cor0, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
'enc_OTPCertificate'/2 =
    %% Line 15924
    fun (_cor1,_cor0) ->
	%% Line 15925
	case _cor1 of
	  <{_cor11,Cindex1,Cindex2,Cindex3}> when 'true' ->
	      %% Line 15930
	      case apply 'enc_OTPTBSCertificate'/2
		       (Cindex1, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		<{EncBytes1,EncLen1}> when 'true' ->
		    %% Line 15935
		    case apply 'enc_SignatureAlgorithm'/2
			     (Cindex2, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#]) of
		      <{EncBytes2,EncLen2}> when 'true' ->
			  %% Line 15940
			  case apply 'encode_bit_string'/4
				   ([], Cindex3, [], [#{#<3>(8,1,'integer',['unsigned'|['big']])}#]) of
			    <{EncBytes3,EncLen3}> when 'true' ->
				let <BytesSoFar> =
				    %% Line 15942
				    [EncBytes1|[EncBytes2|[EncBytes3|[]]]]
				in  let <_cor7> =
					%% Line 15943
					call 'erlang':'+'
					    (EncLen1, EncLen2)
				    in  let <LenSoFar> =
					    %% Line 15943
					    call 'erlang':'+'
						(_cor7, EncLen3)
					in  %% Line 15944
					    apply 'encode_tags'/3
						(_cor0, BytesSoFar, LenSoFar)
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'dec_OTPCertificate'/1 =
    %% Line 15947
    fun (_cor0) ->
	%% Line 15948
	apply 'dec_OTPCertificate'/2
	    (_cor0, [16])
'dec_OTPCertificate'/2 =
    %% Line 15950
    fun (_cor1,_cor0) ->
	%% Line 15959
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> =
		  %% Line 15960
		  apply 'dec_OTPTBSCertificate'/2
		      (V1, [16])
	      in  %% Line 15965
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 15966
			    apply 'dec_SignatureAlgorithm'/2
				(V2, [16])
			in  %% Line 15971
			    case Tlv3 of
			      <[V3|Tlv4]> when 'true' ->
				  let <Term3> =
				      %% Line 15972
				      apply 'decode_compact_bit_string'/2
					  (V3, [3])
				  in  do  %% Line 15974
					  case Tlv4 of
					    %% Line 15975
					    <[]> when 'true' ->
						'ok'
					    %% Line 15975
					    <_cor12> when 'true' ->
						call 'erlang':'exit'
						    ({'error',{'asn1',{'unexpected',Tlv4}}})
					  end
					  %% Line 15977
					  {'OTPCertificate',Term1,Term2,Term3}
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'dhKeyAgreement'/0 =
    %% Line 15979
    fun () ->
	%% Line 15980
	{1,2,840,113549,1,3,1}
'pkcs-3'/0 =
    %% Line 15982
    fun () ->
	%% Line 15983
	{1,2,840,113549,1,3}
'id-sha512'/0 =
    %% Line 15985
    fun () ->
	%% Line 15986
	{2,16,840,1,101,3,4,2,3}
'id-sha384'/0 =
    %% Line 15988
    fun () ->
	%% Line 15989
	{2,16,840,1,101,3,4,2,2}
'id-sha256'/0 =
    %% Line 15991
    fun () ->
	%% Line 15992
	{2,16,840,1,101,3,4,2,1}
'id-sha224'/0 =
    %% Line 15994
    fun () ->
	%% Line 15995
	{2,16,840,1,101,3,4,2,4}
'id-mgf1'/0 =
    %% Line 15997
    fun () ->
	%% Line 15998
	{1,2,840,113549,1,1,8}
'id-hmacWithSHA512'/0 =
    %% Line 16000
    fun () ->
	%% Line 16001
	{1,2,840,113549,2,11}
'id-hmacWithSHA384'/0 =
    %% Line 16003
    fun () ->
	%% Line 16004
	{1,2,840,113549,2,10}
'id-hmacWithSHA256'/0 =
    %% Line 16006
    fun () ->
	%% Line 16007
	{1,2,840,113549,2,9}
'id-hmacWithSHA224'/0 =
    %% Line 16009
    fun () ->
	%% Line 16010
	{1,2,840,113549,2,8}
'id-md5'/0 =
    %% Line 16012
    fun () ->
	%% Line 16013
	{1,2,840,113549,2,5}
'id-md2'/0 =
    %% Line 16015
    fun () ->
	%% Line 16016
	{1,2,840,113549,2,2}
'id-sha1'/0 =
    %% Line 16018
    fun () ->
	%% Line 16019
	{1,3,14,3,2,26}
'sha-1WithRSAEncryption'/0 =
    %% Line 16021
    fun () ->
	%% Line 16022
	{1,3,14,3,2,29}
'sha224WithRSAEncryption'/0 =
    %% Line 16024
    fun () ->
	%% Line 16025
	{1,2,840,113549,1,1,14}
'sha512WithRSAEncryption'/0 =
    %% Line 16027
    fun () ->
	%% Line 16028
	{1,2,840,113549,1,1,13}
'sha384WithRSAEncryption'/0 =
    %% Line 16030
    fun () ->
	%% Line 16031
	{1,2,840,113549,1,1,12}
'sha256WithRSAEncryption'/0 =
    %% Line 16033
    fun () ->
	%% Line 16034
	{1,2,840,113549,1,1,11}
'sha1WithRSAEncryption'/0 =
    %% Line 16036
    fun () ->
	%% Line 16037
	{1,2,840,113549,1,1,5}
'md5WithRSAEncryption'/0 =
    %% Line 16039
    fun () ->
	%% Line 16040
	{1,2,840,113549,1,1,4}
'md2WithRSAEncryption'/0 =
    %% Line 16042
    fun () ->
	%% Line 16043
	{1,2,840,113549,1,1,2}
'id-RSASSA-PSS'/0 =
    %% Line 16045
    fun () ->
	%% Line 16046
	{1,2,840,113549,1,1,10}
'id-pSpecified'/0 =
    %% Line 16048
    fun () ->
	%% Line 16049
	{1,2,840,113549,1,1,9}
'id-RSAES-OAEP'/0 =
    %% Line 16051
    fun () ->
	%% Line 16052
	{1,2,840,113549,1,1,7}
'rsaEncryption'/0 =
    %% Line 16054
    fun () ->
	%% Line 16055
	{1,2,840,113549,1,1,1}
'pkcs-1'/0 =
    %% Line 16057
    fun () ->
	%% Line 16058
	{1,2,840,113549,1,1}
'sect571r1'/0 =
    %% Line 16060
    fun () ->
	%% Line 16061
	{1,3,132,0,39}
'sect571k1'/0 =
    %% Line 16063
    fun () ->
	%% Line 16064
	{1,3,132,0,38}
'sect409r1'/0 =
    %% Line 16066
    fun () ->
	%% Line 16067
	{1,3,132,0,37}
'sect409k1'/0 =
    %% Line 16069
    fun () ->
	%% Line 16070
	{1,3,132,0,36}
'secp521r1'/0 =
    %% Line 16072
    fun () ->
	%% Line 16073
	{1,3,132,0,35}
'secp384r1'/0 =
    %% Line 16075
    fun () ->
	%% Line 16076
	{1,3,132,0,34}
'secp224r1'/0 =
    %% Line 16078
    fun () ->
	%% Line 16079
	{1,3,132,0,33}
'secp224k1'/0 =
    %% Line 16081
    fun () ->
	%% Line 16082
	{1,3,132,0,32}
'secp192k1'/0 =
    %% Line 16084
    fun () ->
	%% Line 16085
	{1,3,132,0,31}
'secp160r2'/0 =
    %% Line 16087
    fun () ->
	%% Line 16088
	{1,3,132,0,30}
'secp128r2'/0 =
    %% Line 16090
    fun () ->
	%% Line 16091
	{1,3,132,0,29}
'secp128r1'/0 =
    %% Line 16093
    fun () ->
	%% Line 16094
	{1,3,132,0,28}
'sect233r1'/0 =
    %% Line 16096
    fun () ->
	%% Line 16097
	{1,3,132,0,27}
'sect233k1'/0 =
    %% Line 16099
    fun () ->
	%% Line 16100
	{1,3,132,0,26}
'sect193r2'/0 =
    %% Line 16102
    fun () ->
	%% Line 16103
	{1,3,132,0,25}
'sect193r1'/0 =
    %% Line 16105
    fun () ->
	%% Line 16106
	{1,3,132,0,24}
'sect131r2'/0 =
    %% Line 16108
    fun () ->
	%% Line 16109
	{1,3,132,0,23}
'sect131r1'/0 =
    %% Line 16111
    fun () ->
	%% Line 16112
	{1,3,132,0,22}
'sect283r1'/0 =
    %% Line 16114
    fun () ->
	%% Line 16115
	{1,3,132,0,17}
'sect283k1'/0 =
    %% Line 16117
    fun () ->
	%% Line 16118
	{1,3,132,0,16}
'sect163r2'/0 =
    %% Line 16120
    fun () ->
	%% Line 16121
	{1,3,132,0,15}
'secp256k1'/0 =
    %% Line 16123
    fun () ->
	%% Line 16124
	{1,3,132,0,10}
'secp160k1'/0 =
    %% Line 16126
    fun () ->
	%% Line 16127
	{1,3,132,0,9}
'secp160r1'/0 =
    %% Line 16129
    fun () ->
	%% Line 16130
	{1,3,132,0,8}
'secp112r2'/0 =
    %% Line 16132
    fun () ->
	%% Line 16133
	{1,3,132,0,7}
'secp112r1'/0 =
    %% Line 16135
    fun () ->
	%% Line 16136
	{1,3,132,0,6}
'sect113r2'/0 =
    %% Line 16138
    fun () ->
	%% Line 16139
	{1,3,132,0,5}
'sect113r1'/0 =
    %% Line 16141
    fun () ->
	%% Line 16142
	{1,3,132,0,4}
'sect239k1'/0 =
    %% Line 16144
    fun () ->
	%% Line 16145
	{1,3,132,0,3}
'sect163r1'/0 =
    %% Line 16147
    fun () ->
	%% Line 16148
	{1,3,132,0,2}
'sect163k1'/0 =
    %% Line 16150
    fun () ->
	%% Line 16151
	{1,3,132,0,1}
'secp256r1'/0 =
    %% Line 16153
    fun () ->
	%% Line 16154
	{1,2,840,10045,3,1,7}
'secp192r1'/0 =
    %% Line 16156
    fun () ->
	%% Line 16157
	{1,2,840,10045,3,1,1}
'ellipticCurve'/0 =
    %% Line 16159
    fun () ->
	%% Line 16160
	{1,3,132,0}
'certicom-arc'/0 =
    %% Line 16162
    fun () ->
	%% Line 16163
	{1,3,132}
'id-ecPublicKey'/0 =
    %% Line 16165
    fun () ->
	%% Line 16166
	{1,2,840,10045,2,1}
'id-publicKeyType'/0 =
    %% Line 16168
    fun () ->
	%% Line 16169
	{1,2,840,10045,2}
'ppBasis'/0 =
    %% Line 16171
    fun () ->
	%% Line 16172
	{1,2,840,10045,1,2,3,3}
'tpBasis'/0 =
    %% Line 16174
    fun () ->
	%% Line 16175
	{1,2,840,10045,1,2,3,2}
'gnBasis'/0 =
    %% Line 16177
    fun () ->
	%% Line 16178
	{1,2,840,10045,1,2,3,1}
'id-characteristic-two-basis'/0 =
    %% Line 16180
    fun () ->
	%% Line 16181
	{1,2,840,10045,1,2,3}
'characteristic-two-field'/0 =
    %% Line 16183
    fun () ->
	%% Line 16184
	{1,2,840,10045,1,2}
'prime-field'/0 =
    %% Line 16186
    fun () ->
	%% Line 16187
	{1,2,840,10045,1,1}
'id-fieldType'/0 =
    %% Line 16189
    fun () ->
	%% Line 16190
	{1,2,840,10045,1}
'ecdsa-with-SHA512'/0 =
    %% Line 16192
    fun () ->
	%% Line 16193
	{1,2,840,10045,4,3,4}
'ecdsa-with-SHA384'/0 =
    %% Line 16195
    fun () ->
	%% Line 16196
	{1,2,840,10045,4,3,3}
'ecdsa-with-SHA256'/0 =
    %% Line 16198
    fun () ->
	%% Line 16199
	{1,2,840,10045,4,3,2}
'ecdsa-with-SHA224'/0 =
    %% Line 16201
    fun () ->
	%% Line 16202
	{1,2,840,10045,4,3,1}
'ecdsa-with-SHA2'/0 =
    %% Line 16204
    fun () ->
	%% Line 16205
	{1,2,840,10045,4,3}
'ecdsa-with-SHA1'/0 =
    %% Line 16207
    fun () ->
	%% Line 16208
	{1,2,840,10045,4,1}
'id-ecSigType'/0 =
    %% Line 16210
    fun () ->
	%% Line 16211
	{1,2,840,10045,4}
'ansi-X9-62'/0 =
    %% Line 16213
    fun () ->
	%% Line 16214
	{1,2,840,10045}
'id-keyExchangeAlgorithm'/0 =
    %% Line 16216
    fun () ->
	%% Line 16217
	{2,16,840,1,101,2,1,1,22}
'dhpublicnumber'/0 =
    %% Line 16219
    fun () ->
	%% Line 16220
	{1,2,840,10046,2,1}
'id-dsaWithSHA1'/0 =
    %% Line 16222
    fun () ->
	%% Line 16223
	{1,3,14,3,2,27}
'id-dsa-with-sha1'/0 =
    %% Line 16225
    fun () ->
	%% Line 16226
	{1,2,840,10040,4,3}
'id-dsa'/0 =
    %% Line 16228
    fun () ->
	%% Line 16229
	{1,2,840,10040,4,1}
'id-at-clearance'/0 =
    %% Line 16231
    fun () ->
	%% Line 16232
	{2,5,1,5,55}
'id-at-role'/0 =
    %% Line 16234
    fun () ->
	%% Line 16235
	{2,5,4,72}
'id-aca-encAttrs'/0 =
    %% Line 16237
    fun () ->
	%% Line 16238
	{1,3,6,1,5,5,7,10,6}
'id-aca-group'/0 =
    %% Line 16240
    fun () ->
	%% Line 16241
	{1,3,6,1,5,5,7,10,4}
'id-aca-chargingIdentity'/0 =
    %% Line 16243
    fun () ->
	%% Line 16244
	{1,3,6,1,5,5,7,10,3}
'id-aca-accessIdentity'/0 =
    %% Line 16246
    fun () ->
	%% Line 16247
	{1,3,6,1,5,5,7,10,2}
'id-aca-authenticationInfo'/0 =
    %% Line 16249
    fun () ->
	%% Line 16250
	{1,3,6,1,5,5,7,10,1}
'id-aca'/0 =
    %% Line 16252
    fun () ->
	%% Line 16253
	{1,3,6,1,5,5,7,10}
'id-ce-targetInformation'/0 =
    %% Line 16255
    fun () ->
	%% Line 16256
	{2,5,29,55}
'id-pe-ac-proxying'/0 =
    %% Line 16258
    fun () ->
	%% Line 16259
	{1,3,6,1,5,5,7,1,10}
'id-pe-aaControls'/0 =
    %% Line 16261
    fun () ->
	%% Line 16262
	{1,3,6,1,5,5,7,1,6}
'id-pe-ac-auditIdentity'/0 =
    %% Line 16264
    fun () ->
	%% Line 16265
	{1,3,6,1,5,5,7,1,4}
'id-ce-invalidityDate'/0 =
    %% Line 16267
    fun () ->
	%% Line 16268
	{2,5,29,24}
'id-holdinstruction-reject'/0 =
    %% Line 16270
    fun () ->
	%% Line 16271
	{2,2,840,10040,2,3}
'id-holdinstruction-callissuer'/0 =
    %% Line 16273
    fun () ->
	%% Line 16274
	{2,2,840,10040,2,2}
'id-holdinstruction-none'/0 =
    %% Line 16276
    fun () ->
	%% Line 16277
	{2,2,840,10040,2,1}
'holdInstruction'/0 =
    %% Line 16279
    fun () ->
	%% Line 16280
	{2,2,840,10040,2}
'id-ce-holdInstructionCode'/0 =
    %% Line 16282
    fun () ->
	%% Line 16283
	{2,5,29,23}
'id-ce-certificateIssuer'/0 =
    %% Line 16285
    fun () ->
	%% Line 16286
	{2,5,29,29}
'id-ce-cRLReasons'/0 =
    %% Line 16288
    fun () ->
	%% Line 16289
	{2,5,29,21}
'id-ce-deltaCRLIndicator'/0 =
    %% Line 16291
    fun () ->
	%% Line 16292
	{2,5,29,27}
'id-ce-issuingDistributionPoint'/0 =
    %% Line 16294
    fun () ->
	%% Line 16295
	{2,5,29,28}
'id-ce-cRLNumber'/0 =
    %% Line 16297
    fun () ->
	%% Line 16298
	{2,5,29,20}
'id-pe-subjectInfoAccess'/0 =
    %% Line 16300
    fun () ->
	%% Line 16301
	{1,3,6,1,5,5,7,1,11}
'id-pe-authorityInfoAccess'/0 =
    %% Line 16303
    fun () ->
	%% Line 16304
	{1,3,6,1,5,5,7,1,1}
'id-ce-freshestCRL'/0 =
    %% Line 16306
    fun () ->
	%% Line 16307
	{2,5,29,46}
'id-ce-inhibitAnyPolicy'/0 =
    %% Line 16309
    fun () ->
	%% Line 16310
	{2,5,29,54}
'id-kp-OCSPSigning'/0 =
    %% Line 16312
    fun () ->
	%% Line 16313
	{1,3,6,1,5,5,7,3,9}
'id-kp-timeStamping'/0 =
    %% Line 16315
    fun () ->
	%% Line 16316
	{1,3,6,1,5,5,7,3,8}
'id-kp-emailProtection'/0 =
    %% Line 16318
    fun () ->
	%% Line 16319
	{1,3,6,1,5,5,7,3,4}
'id-kp-codeSigning'/0 =
    %% Line 16321
    fun () ->
	%% Line 16322
	{1,3,6,1,5,5,7,3,3}
'id-kp-clientAuth'/0 =
    %% Line 16324
    fun () ->
	%% Line 16325
	{1,3,6,1,5,5,7,3,2}
'id-kp-serverAuth'/0 =
    %% Line 16327
    fun () ->
	%% Line 16328
	{1,3,6,1,5,5,7,3,1}
'anyExtendedKeyUsage'/0 =
    %% Line 16330
    fun () ->
	%% Line 16331
	{2,5,29,37,0}
'id-ce-extKeyUsage'/0 =
    %% Line 16333
    fun () ->
	%% Line 16334
	{2,5,29,37}
'id-ce-cRLDistributionPoints'/0 =
    %% Line 16336
    fun () ->
	%% Line 16337
	{2,5,29,31}
'id-ce-policyConstraints'/0 =
    %% Line 16339
    fun () ->
	%% Line 16340
	{2,5,29,36}
'id-ce-nameConstraints'/0 =
    %% Line 16342
    fun () ->
	%% Line 16343
	{2,5,29,30}
'id-ce-basicConstraints'/0 =
    %% Line 16345
    fun () ->
	%% Line 16346
	{2,5,29,19}
'id-ce-subjectDirectoryAttributes'/0 =
    %% Line 16348
    fun () ->
	%% Line 16349
	{2,5,29,9}
'id-ce-issuerAltName'/0 =
    %% Line 16351
    fun () ->
	%% Line 16352
	{2,5,29,18}
'id-ce-subjectAltName'/0 =
    %% Line 16354
    fun () ->
	%% Line 16355
	{2,5,29,17}
'id-ce-policyMappings'/0 =
    %% Line 16357
    fun () ->
	%% Line 16358
	{2,5,29,33}
'anyPolicy'/0 =
    %% Line 16360
    fun () ->
	%% Line 16361
	{2,5,29,32,0}
'id-ce-certificatePolicies'/0 =
    %% Line 16363
    fun () ->
	%% Line 16364
	{2,5,29,32}
'id-ce-privateKeyUsagePeriod'/0 =
    %% Line 16366
    fun () ->
	%% Line 16367
	{2,5,29,16}
'id-ce-keyUsage'/0 =
    %% Line 16369
    fun () ->
	%% Line 16370
	{2,5,29,15}
'id-ce-subjectKeyIdentifier'/0 =
    %% Line 16372
    fun () ->
	%% Line 16373
	{2,5,29,14}
'id-ce-authorityKeyIdentifier'/0 =
    %% Line 16375
    fun () ->
	%% Line 16376
	{2,5,29,35}
'id-ce'/0 =
    %% Line 16378
    fun () ->
	%% Line 16379
	{2,5,29}
'id-extensionReq'/0 =
    %% Line 16381
    fun () ->
	%% Line 16382
	{2,16,840,1,113733,1,9,8}
'id-transId'/0 =
    %% Line 16384
    fun () ->
	%% Line 16385
	{2,16,840,1,113733,1,9,7}
'id-recipientNonce'/0 =
    %% Line 16387
    fun () ->
	%% Line 16388
	{2,16,840,1,113733,1,9,6}
'id-senderNonce'/0 =
    %% Line 16390
    fun () ->
	%% Line 16391
	{2,16,840,1,113733,1,9,5}
'id-failInfo'/0 =
    %% Line 16393
    fun () ->
	%% Line 16394
	{2,16,840,1,113733,1,9,4}
'id-pkiStatus'/0 =
    %% Line 16396
    fun () ->
	%% Line 16397
	{2,16,840,1,113733,1,9,3}
'id-messageType'/0 =
    %% Line 16399
    fun () ->
	%% Line 16400
	{2,16,840,1,113733,1,9,2}
'id-attributes'/0 =
    %% Line 16402
    fun () ->
	%% Line 16403
	{2,16,840,1,113733,1,9}
'id-pki'/0 =
    %% Line 16405
    fun () ->
	%% Line 16406
	{2,16,840,1,113733,1}
'id-VeriSign'/0 =
    %% Line 16408
    fun () ->
	%% Line 16409
	{2,16,840,1,113733}
'encryptedData'/0 =
    %% Line 16411
    fun () ->
	%% Line 16412
	{1,2,840,113549,1,7,6}
'digestedData'/0 =
    %% Line 16414
    fun () ->
	%% Line 16415
	{1,2,840,113549,1,7,5}
'signedAndEnvelopedData'/0 =
    %% Line 16417
    fun () ->
	%% Line 16418
	{1,2,840,113549,1,7,4}
'envelopedData'/0 =
    %% Line 16420
    fun () ->
	%% Line 16421
	{1,2,840,113549,1,7,3}
'signedData'/0 =
    %% Line 16423
    fun () ->
	%% Line 16424
	{1,2,840,113549,1,7,2}
'data'/0 =
    %% Line 16426
    fun () ->
	%% Line 16427
	{1,2,840,113549,1,7,1}
'pkcs-7'/0 =
    %% Line 16429
    fun () ->
	%% Line 16430
	{1,2,840,113549,1,7}
'pkcs-9-at-counterSignature'/0 =
    %% Line 16432
    fun () ->
	%% Line 16433
	{1,2,840,113549,1,9,6}
'pkcs-9-at-signingTime'/0 =
    %% Line 16435
    fun () ->
	%% Line 16436
	{1,2,840,113549,1,9,5}
'pkcs-9-at-messageDigest'/0 =
    %% Line 16438
    fun () ->
	%% Line 16439
	{1,2,840,113549,1,9,4}
'pkcs-9-at-contentType'/0 =
    %% Line 16441
    fun () ->
	%% Line 16442
	{1,2,840,113549,1,9,3}
'pkcs-9'/0 =
    %% Line 16444
    fun () ->
	%% Line 16445
	{1,2,840,113549,1,9}
'pkcs-9-at-extensionRequest'/0 =
    %% Line 16447
    fun () ->
	%% Line 16448
	{1,2,840,113549,1,9,14}
'pkcs-9-at-challengePassword'/0 =
    %% Line 16450
    fun () ->
	%% Line 16451
	{1,2,840,113549,1,9,7}
'brainpoolP512t1'/0 =
    %% Line 16453
    fun () ->
	%% Line 16454
	{1,3,36,3,3,2,8,1,1,14}
'brainpoolP512r1'/0 =
    %% Line 16456
    fun () ->
	%% Line 16457
	{1,3,36,3,3,2,8,1,1,13}
'brainpoolP384t1'/0 =
    %% Line 16459
    fun () ->
	%% Line 16460
	{1,3,36,3,3,2,8,1,1,12}
'brainpoolP384r1'/0 =
    %% Line 16462
    fun () ->
	%% Line 16463
	{1,3,36,3,3,2,8,1,1,11}
'brainpoolP320t1'/0 =
    %% Line 16465
    fun () ->
	%% Line 16466
	{1,3,36,3,3,2,8,1,1,10}
'brainpoolP320r1'/0 =
    %% Line 16468
    fun () ->
	%% Line 16469
	{1,3,36,3,3,2,8,1,1,9}
'brainpoolP256t1'/0 =
    %% Line 16471
    fun () ->
	%% Line 16472
	{1,3,36,3,3,2,8,1,1,8}
'brainpoolP256r1'/0 =
    %% Line 16474
    fun () ->
	%% Line 16475
	{1,3,36,3,3,2,8,1,1,7}
'brainpoolP224t1'/0 =
    %% Line 16477
    fun () ->
	%% Line 16478
	{1,3,36,3,3,2,8,1,1,6}
'brainpoolP224r1'/0 =
    %% Line 16480
    fun () ->
	%% Line 16481
	{1,3,36,3,3,2,8,1,1,5}
'brainpoolP192t1'/0 =
    %% Line 16483
    fun () ->
	%% Line 16484
	{1,3,36,3,3,2,8,1,1,4}
'brainpoolP192r1'/0 =
    %% Line 16486
    fun () ->
	%% Line 16487
	{1,3,36,3,3,2,8,1,1,3}
'brainpoolP160t1'/0 =
    %% Line 16489
    fun () ->
	%% Line 16490
	{1,3,36,3,3,2,8,1,1,2}
'brainpoolP160r1'/0 =
    %% Line 16492
    fun () ->
	%% Line 16493
	{1,3,36,3,3,2,8,1,1,1}
'versionOne'/0 =
    %% Line 16495
    fun () ->
	%% Line 16496
	{1,3,36,3,3,2,8,1,1}
'ellipticCurveRFC5639'/0 =
    %% Line 16498
    fun () ->
	%% Line 16499
	{1,3,36,3,3,2,8,1}
'ecStdCurvesAndGeneration'/0 =
    %% Line 16501
    fun () ->
	%% Line 16502
	{1,3,36,3,3,2,8}
'ub-x121-address-length'/0 =
    %% Line 16504
    fun () ->
	%% Line 16505
	16
'ub-unformatted-address-length'/0 =
    %% Line 16507
    fun () ->
	%% Line 16508
	180
'ub-terminal-id-length'/0 =
    %% Line 16510
    fun () ->
	%% Line 16511
	24
'ub-surname-length'/0 =
    %% Line 16513
    fun () ->
	%% Line 16514
	40
'ub-pseudonym'/0 =
    %% Line 16516
    fun () ->
	%% Line 16517
	128
'ub-postal-code-length'/0 =
    %% Line 16519
    fun () ->
	%% Line 16520
	16
'ub-pds-physical-address-lines'/0 =
    %% Line 16522
    fun () ->
	%% Line 16523
	6
'ub-pds-parameter-length'/0 =
    %% Line 16525
    fun () ->
	%% Line 16526
	30
'ub-pds-name-length'/0 =
    %% Line 16528
    fun () ->
	%% Line 16529
	16
'ub-organizational-units'/0 =
    %% Line 16531
    fun () ->
	%% Line 16532
	4
'ub-organizational-unit-name-length'/0 =
    %% Line 16534
    fun () ->
	%% Line 16535
	32
'ub-organization-name-length'/0 =
    %% Line 16537
    fun () ->
	%% Line 16538
	64
'ub-numeric-user-id-length'/0 =
    %% Line 16540
    fun () ->
	%% Line 16541
	32
'ub-integer-options'/0 =
    %% Line 16543
    fun () ->
	%% Line 16544
	256
'ub-initials-length'/0 =
    %% Line 16546
    fun () ->
	%% Line 16547
	5
'ub-given-name-length'/0 =
    %% Line 16549
    fun () ->
	%% Line 16550
	16
'ub-generation-qualifier-length'/0 =
    %% Line 16552
    fun () ->
	%% Line 16553
	3
'ub-e163-4-sub-address-length'/0 =
    %% Line 16555
    fun () ->
	%% Line 16556
	40
'ub-e163-4-number-length'/0 =
    %% Line 16558
    fun () ->
	%% Line 16559
	15
'ub-extension-attributes'/0 =
    %% Line 16561
    fun () ->
	%% Line 16562
	256
'ub-domain-name-length'/0 =
    %% Line 16564
    fun () ->
	%% Line 16565
	16
'ub-domain-defined-attribute-value-length'/0 =
    %% Line 16567
    fun () ->
	%% Line 16568
	128
'ub-domain-defined-attribute-type-length'/0 =
    %% Line 16570
    fun () ->
	%% Line 16571
	8
'ub-domain-defined-attributes'/0 =
    %% Line 16573
    fun () ->
	%% Line 16574
	4
'ub-country-name-numeric-length'/0 =
    %% Line 16576
    fun () ->
	%% Line 16577
	3
'ub-country-name-alpha-length'/0 =
    %% Line 16579
    fun () ->
	%% Line 16580
	2
'ub-common-name-length'/0 =
    %% Line 16582
    fun () ->
	%% Line 16583
	64
'ub-emailaddress-length'/0 =
    %% Line 16585
    fun () ->
	%% Line 16586
	255
'ub-match'/0 =
    %% Line 16588
    fun () ->
	%% Line 16589
	128
'ub-serial-number'/0 =
    %% Line 16591
    fun () ->
	%% Line 16592
	64
'ub-title'/0 =
    %% Line 16594
    fun () ->
	%% Line 16595
	64
'ub-organizational-unit-name'/0 =
    %% Line 16597
    fun () ->
	%% Line 16598
	64
'ub-organization-name'/0 =
    %% Line 16600
    fun () ->
	%% Line 16601
	64
'ub-state-name'/0 =
    %% Line 16603
    fun () ->
	%% Line 16604
	128
'ub-locality-name'/0 =
    %% Line 16606
    fun () ->
	%% Line 16607
	128
'ub-common-name'/0 =
    %% Line 16609
    fun () ->
	%% Line 16610
	64
'ub-name'/0 =
    %% Line 16612
    fun () ->
	%% Line 16613
	32768
'teletex-domain-defined-attributes'/0 =
    %% Line 16615
    fun () ->
	%% Line 16616
	6
'terminal-type'/0 =
    %% Line 16618
    fun () ->
	%% Line 16619
	23
'extended-network-address'/0 =
    %% Line 16621
    fun () ->
	%% Line 16622
	22
'local-postal-attributes'/0 =
    %% Line 16624
    fun () ->
	%% Line 16625
	21
'unique-postal-name'/0 =
    %% Line 16627
    fun () ->
	%% Line 16628
	20
'poste-restante-address'/0 =
    %% Line 16630
    fun () ->
	%% Line 16631
	19
'post-office-box-address'/0 =
    %% Line 16633
    fun () ->
	%% Line 16634
	18
'street-address'/0 =
    %% Line 16636
    fun () ->
	%% Line 16637
	17
'unformatted-postal-address'/0 =
    %% Line 16639
    fun () ->
	%% Line 16640
	16
'extension-physical-delivery-address-components'/0 =
    %% Line 16642
    fun () ->
	%% Line 16643
	15
'physical-delivery-organization-name'/0 =
    %% Line 16645
    fun () ->
	%% Line 16646
	14
'physical-delivery-personal-name'/0 =
    %% Line 16648
    fun () ->
	%% Line 16649
	13
'extension-OR-address-components'/0 =
    %% Line 16651
    fun () ->
	%% Line 16652
	12
'physical-delivery-office-number'/0 =
    %% Line 16654
    fun () ->
	%% Line 16655
	11
'physical-delivery-office-name'/0 =
    %% Line 16657
    fun () ->
	%% Line 16658
	10
'postal-code'/0 =
    %% Line 16660
    fun () ->
	%% Line 16661
	9
'physical-delivery-country-name'/0 =
    %% Line 16663
    fun () ->
	%% Line 16664
	8
'pds-name'/0 =
    %% Line 16666
    fun () ->
	%% Line 16667
	7
'teletex-organizational-unit-names'/0 =
    %% Line 16669
    fun () ->
	%% Line 16670
	5
'teletex-personal-name'/0 =
    %% Line 16672
    fun () ->
	%% Line 16673
	4
'teletex-organization-name'/0 =
    %% Line 16675
    fun () ->
	%% Line 16676
	3
'teletex-common-name'/0 =
    %% Line 16678
    fun () ->
	%% Line 16679
	2
'common-name'/0 =
    %% Line 16681
    fun () ->
	%% Line 16682
	1
'id-emailAddress'/0 =
    %% Line 16684
    fun () ->
	%% Line 16685
	{1,2,840,113549,1,9,1}
'id-domainComponent'/0 =
    %% Line 16687
    fun () ->
	%% Line 16688
	{0,9,2342,19200300,100,1,25}
'id-at-pseudonym'/0 =
    %% Line 16690
    fun () ->
	%% Line 16691
	{2,5,4,65}
'id-at-serialNumber'/0 =
    %% Line 16693
    fun () ->
	%% Line 16694
	{2,5,4,5}
'id-at-countryName'/0 =
    %% Line 16696
    fun () ->
	%% Line 16697
	{2,5,4,6}
'id-at-dnQualifier'/0 =
    %% Line 16699
    fun () ->
	%% Line 16700
	{2,5,4,46}
'id-at-title'/0 =
    %% Line 16702
    fun () ->
	%% Line 16703
	{2,5,4,12}
'id-at-organizationalUnitName'/0 =
    %% Line 16705
    fun () ->
	%% Line 16706
	{2,5,4,11}
'id-at-organizationName'/0 =
    %% Line 16708
    fun () ->
	%% Line 16709
	{2,5,4,10}
'id-at-stateOrProvinceName'/0 =
    %% Line 16711
    fun () ->
	%% Line 16712
	{2,5,4,8}
'id-at-localityName'/0 =
    %% Line 16714
    fun () ->
	%% Line 16715
	{2,5,4,7}
'id-at-commonName'/0 =
    %% Line 16717
    fun () ->
	%% Line 16718
	{2,5,4,3}
'id-at-generationQualifier'/0 =
    %% Line 16720
    fun () ->
	%% Line 16721
	{2,5,4,44}
'id-at-initials'/0 =
    %% Line 16723
    fun () ->
	%% Line 16724
	{2,5,4,43}
'id-at-givenName'/0 =
    %% Line 16726
    fun () ->
	%% Line 16727
	{2,5,4,42}
'id-at-surname'/0 =
    %% Line 16729
    fun () ->
	%% Line 16730
	{2,5,4,4}
'id-at-name'/0 =
    %% Line 16732
    fun () ->
	%% Line 16733
	{2,5,4,41}
'id-at'/0 =
    %% Line 16735
    fun () ->
	%% Line 16736
	{2,5,4}
'id-ad-caRepository'/0 =
    %% Line 16738
    fun () ->
	%% Line 16739
	{1,3,6,1,5,5,7,48,5}
'id-ad-timeStamping'/0 =
    %% Line 16741
    fun () ->
	%% Line 16742
	{1,3,6,1,5,5,7,48,3}
'id-ad-caIssuers'/0 =
    %% Line 16744
    fun () ->
	%% Line 16745
	{1,3,6,1,5,5,7,48,2}
'id-ad-ocsp'/0 =
    %% Line 16747
    fun () ->
	%% Line 16748
	{1,3,6,1,5,5,7,48,1}
'id-qt-unotice'/0 =
    %% Line 16750
    fun () ->
	%% Line 16751
	{1,3,6,1,5,5,7,2,2}
'id-qt-cps'/0 =
    %% Line 16753
    fun () ->
	%% Line 16754
	{1,3,6,1,5,5,7,2,1}
'id-ad'/0 =
    %% Line 16756
    fun () ->
	%% Line 16757
	{1,3,6,1,5,5,7,48}
'id-kp'/0 =
    %% Line 16759
    fun () ->
	%% Line 16760
	{1,3,6,1,5,5,7,3}
'id-qt'/0 =
    %% Line 16762
    fun () ->
	%% Line 16763
	{1,3,6,1,5,5,7,2}
'id-pe'/0 =
    %% Line 16765
    fun () ->
	%% Line 16766
	{1,3,6,1,5,5,7,1}
'id-pkix'/0 =
    %% Line 16768
    fun () ->
	%% Line 16769
	{1,3,6,1,5,5,7}
'enc_recipientNonce'/3 =
    %% Line 16777
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'derivation',_cor6,_cor7> when 'true' ->
	      %% Line 16778
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','derivation'}})
	  %% Line 16779
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 16780
	      apply 'encode_restricted_string'/2
		  (Val, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#])
	  %% Line 16781
	  <'equality-match',_cor8,_cor9> when 'true' ->
	      %% Line 16782
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','equality-match'}})
	  %% Line 16783
	  <'ordering-match',_cor10,_cor11> when 'true' ->
	      %% Line 16784
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','ordering-match'}})
	  %% Line 16785
	  <'substrings-match',_cor12,_cor13> when 'true' ->
	      %% Line 16786
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','substrings-match'}})
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_recipientNonce',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_recipientNonce'/3 =
    %% Line 16789
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'derivation',_cor8,_cor9> when 'true' ->
	      %% Line 16790
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','derivation'}})
	  %% Line 16791
	  <'Type',Bytes,_cor10> when 'true' ->
	      let <Tlv> =
		  %% Line 16792
		  apply 'tlv_format'/1
		      (Bytes)
	      in  let <_cor4> =
		      %% Line 16794
		      apply 'decode_restricted_string'/2
			  (Tlv, [4])
		  in  %% Line 16794
		      call 'erlang':'binary_to_list'
			  (_cor4)
	  %% Line 16797
	  <'equality-match',_cor11,_cor12> when 'true' ->
	      %% Line 16798
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','equality-match'}})
	  %% Line 16799
	  <'ordering-match',_cor13,_cor14> when 'true' ->
	      %% Line 16800
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','ordering-match'}})
	  %% Line 16801
	  <'substrings-match',_cor15,_cor16> when 'true' ->
	      %% Line 16802
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','substrings-match'}})
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'dec_recipientNonce',3}}] )
	    -| ['compiler_generated'] )
	end
'tlv_format'/1 =
    %% Line 16804
    fun (_cor0) ->
	case _cor0 of
	  <Bytes>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 16805
	      case apply 'ber_decode_nif'/1
		       (Bytes) of
		<{Tlv,_cor3}> when 'true' ->
		    %% Line 16806
		    Tlv
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 16807
	  <Bytes> when 'true' ->
	      %% Line 16808
	      Bytes
	end
'enc_senderNonce'/3 =
    %% Line 16815
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'derivation',_cor6,_cor7> when 'true' ->
	      %% Line 16816
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','derivation'}})
	  %% Line 16817
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 16818
	      apply 'encode_restricted_string'/2
		  (Val, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#])
	  %% Line 16819
	  <'equality-match',_cor8,_cor9> when 'true' ->
	      %% Line 16820
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','equality-match'}})
	  %% Line 16821
	  <'ordering-match',_cor10,_cor11> when 'true' ->
	      %% Line 16822
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','ordering-match'}})
	  %% Line 16823
	  <'substrings-match',_cor12,_cor13> when 'true' ->
	      %% Line 16824
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','substrings-match'}})
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_senderNonce',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_senderNonce'/3 =
    %% Line 16827
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'derivation',_cor8,_cor9> when 'true' ->
	      %% Line 16828
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','derivation'}})
	  %% Line 16829
	  <'Type',Bytes,_cor10> when 'true' ->
	      let <Tlv> =
		  %% Line 16830
		  apply 'tlv_format'/1
		      (Bytes)
	      in  let <_cor4> =
		      %% Line 16832
		      apply 'decode_restricted_string'/2
			  (Tlv, [4])
		  in  %% Line 16832
		      call 'erlang':'binary_to_list'
			  (_cor4)
	  %% Line 16835
	  <'equality-match',_cor11,_cor12> when 'true' ->
	      %% Line 16836
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','equality-match'}})
	  %% Line 16837
	  <'ordering-match',_cor13,_cor14> when 'true' ->
	      %% Line 16838
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','ordering-match'}})
	  %% Line 16839
	  <'substrings-match',_cor15,_cor16> when 'true' ->
	      %% Line 16840
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','substrings-match'}})
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'dec_senderNonce',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_failInfo'/3 =
    %% Line 16848
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'derivation',_cor6,_cor7> when 'true' ->
	      %% Line 16849
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','derivation'}})
	  %% Line 16850
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 16851
	      apply 'encode_restricted_string'/2
		  (Val, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#])
	  %% Line 16852
	  <'equality-match',_cor8,_cor9> when 'true' ->
	      %% Line 16853
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','equality-match'}})
	  %% Line 16854
	  <'ordering-match',_cor10,_cor11> when 'true' ->
	      %% Line 16855
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','ordering-match'}})
	  %% Line 16856
	  <'substrings-match',_cor12,_cor13> when 'true' ->
	      %% Line 16857
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','substrings-match'}})
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_failInfo',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_failInfo'/3 =
    %% Line 16860
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'derivation',_cor8,_cor9> when 'true' ->
	      %% Line 16861
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','derivation'}})
	  %% Line 16862
	  <'Type',Bytes,_cor10> when 'true' ->
	      let <Tlv> =
		  %% Line 16863
		  apply 'tlv_format'/1
		      (Bytes)
	      in  let <_cor4> =
		      %% Line 16865
		      apply 'decode_restricted_string'/2
			  (Tlv, [19])
		  in  %% Line 16865
		      call 'erlang':'binary_to_list'
			  (_cor4)
	  %% Line 16868
	  <'equality-match',_cor11,_cor12> when 'true' ->
	      %% Line 16869
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','equality-match'}})
	  %% Line 16870
	  <'ordering-match',_cor13,_cor14> when 'true' ->
	      %% Line 16871
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','ordering-match'}})
	  %% Line 16872
	  <'substrings-match',_cor15,_cor16> when 'true' ->
	      %% Line 16873
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','substrings-match'}})
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'dec_failInfo',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_pkiStatus'/3 =
    %% Line 16881
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'derivation',_cor6,_cor7> when 'true' ->
	      %% Line 16882
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','derivation'}})
	  %% Line 16883
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 16884
	      apply 'encode_restricted_string'/2
		  (Val, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#])
	  %% Line 16885
	  <'equality-match',_cor8,_cor9> when 'true' ->
	      %% Line 16886
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','equality-match'}})
	  %% Line 16887
	  <'ordering-match',_cor10,_cor11> when 'true' ->
	      %% Line 16888
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','ordering-match'}})
	  %% Line 16889
	  <'substrings-match',_cor12,_cor13> when 'true' ->
	      %% Line 16890
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','substrings-match'}})
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_pkiStatus',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_pkiStatus'/3 =
    %% Line 16893
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'derivation',_cor8,_cor9> when 'true' ->
	      %% Line 16894
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','derivation'}})
	  %% Line 16895
	  <'Type',Bytes,_cor10> when 'true' ->
	      let <Tlv> =
		  %% Line 16896
		  apply 'tlv_format'/1
		      (Bytes)
	      in  let <_cor4> =
		      %% Line 16898
		      apply 'decode_restricted_string'/2
			  (Tlv, [19])
		  in  %% Line 16898
		      call 'erlang':'binary_to_list'
			  (_cor4)
	  %% Line 16901
	  <'equality-match',_cor11,_cor12> when 'true' ->
	      %% Line 16902
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','equality-match'}})
	  %% Line 16903
	  <'ordering-match',_cor13,_cor14> when 'true' ->
	      %% Line 16904
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','ordering-match'}})
	  %% Line 16905
	  <'substrings-match',_cor15,_cor16> when 'true' ->
	      %% Line 16906
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','substrings-match'}})
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'dec_pkiStatus',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_messageType'/3 =
    %% Line 16914
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'derivation',_cor6,_cor7> when 'true' ->
	      %% Line 16915
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','derivation'}})
	  %% Line 16916
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 16917
	      apply 'encode_restricted_string'/2
		  (Val, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#])
	  %% Line 16918
	  <'equality-match',_cor8,_cor9> when 'true' ->
	      %% Line 16919
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','equality-match'}})
	  %% Line 16920
	  <'ordering-match',_cor10,_cor11> when 'true' ->
	      %% Line 16921
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','ordering-match'}})
	  %% Line 16922
	  <'substrings-match',_cor12,_cor13> when 'true' ->
	      %% Line 16923
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','substrings-match'}})
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_messageType',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_messageType'/3 =
    %% Line 16926
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'derivation',_cor8,_cor9> when 'true' ->
	      %% Line 16927
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','derivation'}})
	  %% Line 16928
	  <'Type',Bytes,_cor10> when 'true' ->
	      let <Tlv> =
		  %% Line 16929
		  apply 'tlv_format'/1
		      (Bytes)
	      in  let <_cor4> =
		      %% Line 16931
		      apply 'decode_restricted_string'/2
			  (Tlv, [19])
		  in  %% Line 16931
		      call 'erlang':'binary_to_list'
			  (_cor4)
	  %% Line 16934
	  <'equality-match',_cor11,_cor12> when 'true' ->
	      %% Line 16935
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','equality-match'}})
	  %% Line 16936
	  <'ordering-match',_cor13,_cor14> when 'true' ->
	      %% Line 16937
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','ordering-match'}})
	  %% Line 16938
	  <'substrings-match',_cor15,_cor16> when 'true' ->
	      %% Line 16939
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','substrings-match'}})
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'dec_messageType',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_transactionID'/3 =
    %% Line 16947
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'derivation',_cor6,_cor7> when 'true' ->
	      %% Line 16948
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','derivation'}})
	  %% Line 16949
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 16950
	      apply 'encode_restricted_string'/2
		  (Val, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#])
	  %% Line 16951
	  <'equality-match',_cor8,_cor9> when 'true' ->
	      %% Line 16952
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','equality-match'}})
	  %% Line 16953
	  <'ordering-match',_cor10,_cor11> when 'true' ->
	      %% Line 16954
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','ordering-match'}})
	  %% Line 16955
	  <'substrings-match',_cor12,_cor13> when 'true' ->
	      %% Line 16956
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','substrings-match'}})
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_transactionID',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_transactionID'/3 =
    %% Line 16959
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'derivation',_cor8,_cor9> when 'true' ->
	      %% Line 16960
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','derivation'}})
	  %% Line 16961
	  <'Type',Bytes,_cor10> when 'true' ->
	      let <Tlv> =
		  %% Line 16962
		  apply 'tlv_format'/1
		      (Bytes)
	      in  let <_cor4> =
		      %% Line 16964
		      apply 'decode_restricted_string'/2
			  (Tlv, [19])
		  in  %% Line 16964
		      call 'erlang':'binary_to_list'
			  (_cor4)
	  %% Line 16967
	  <'equality-match',_cor11,_cor12> when 'true' ->
	      %% Line 16968
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','equality-match'}})
	  %% Line 16969
	  <'ordering-match',_cor13,_cor14> when 'true' ->
	      %% Line 16970
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','ordering-match'}})
	  %% Line 16971
	  <'substrings-match',_cor15,_cor16> when 'true' ->
	      %% Line 16972
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','substrings-match'}})
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'dec_transactionID',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_signingTime'/3 =
    %% Line 16980
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'derivation',_cor6,_cor7> when 'true' ->
	      %% Line 16981
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','derivation'}})
	  %% Line 16982
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 16983
	      apply 'enc_SigningTime'/2
		  (Val, [])
	  %% Line 16984
	  <'equality-match',_cor8,_cor9> when 'true' ->
	      %% Line 16985
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','equality-match'}})
	  %% Line 16986
	  <'ordering-match',_cor10,_cor11> when 'true' ->
	      %% Line 16987
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','ordering-match'}})
	  %% Line 16988
	  <'substrings-match',_cor12,_cor13> when 'true' ->
	      %% Line 16989
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','substrings-match'}})
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_signingTime',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_signingTime'/3 =
    %% Line 16992
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'derivation',_cor7,_cor8> when 'true' ->
	      %% Line 16993
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','derivation'}})
	  %% Line 16994
	  <'Type',Bytes,_cor9> when 'true' ->
	      let <Tlv> =
		  %% Line 16995
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 16996
		  apply 'dec_SigningTime'/2
		      (Tlv, [])
	  %% Line 16997
	  <'equality-match',_cor10,_cor11> when 'true' ->
	      %% Line 16998
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','equality-match'}})
	  %% Line 16999
	  <'ordering-match',_cor12,_cor13> when 'true' ->
	      %% Line 17000
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','ordering-match'}})
	  %% Line 17001
	  <'substrings-match',_cor14,_cor15> when 'true' ->
	      %% Line 17002
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','substrings-match'}})
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_signingTime',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_messageDigest'/3 =
    %% Line 17010
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'derivation',_cor6,_cor7> when 'true' ->
	      %% Line 17011
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','derivation'}})
	  %% Line 17012
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17013
	      apply 'enc_MessageDigest'/2
		  (Val, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#])
	  %% Line 17014
	  <'equality-match',_cor8,_cor9> when 'true' ->
	      %% Line 17015
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','equality-match'}})
	  %% Line 17016
	  <'ordering-match',_cor10,_cor11> when 'true' ->
	      %% Line 17017
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','ordering-match'}})
	  %% Line 17018
	  <'substrings-match',_cor12,_cor13> when 'true' ->
	      %% Line 17019
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','substrings-match'}})
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_messageDigest',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_messageDigest'/3 =
    %% Line 17022
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'derivation',_cor7,_cor8> when 'true' ->
	      %% Line 17023
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','derivation'}})
	  %% Line 17024
	  <'Type',Bytes,_cor9> when 'true' ->
	      let <Tlv> =
		  %% Line 17025
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17026
		  apply 'dec_MessageDigest'/2
		      (Tlv, [4])
	  %% Line 17027
	  <'equality-match',_cor10,_cor11> when 'true' ->
	      %% Line 17028
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','equality-match'}})
	  %% Line 17029
	  <'ordering-match',_cor12,_cor13> when 'true' ->
	      %% Line 17030
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','ordering-match'}})
	  %% Line 17031
	  <'substrings-match',_cor14,_cor15> when 'true' ->
	      %% Line 17032
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','substrings-match'}})
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_messageDigest',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_counterSignature'/3 =
    %% Line 17040
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'derivation',_cor6,_cor7> when 'true' ->
	      %% Line 17041
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','derivation'}})
	  %% Line 17042
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17043
	      apply 'enc_SignerInfo'/2
		  (Val, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
	  %% Line 17044
	  <'equality-match',_cor8,_cor9> when 'true' ->
	      %% Line 17045
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','equality-match'}})
	  %% Line 17046
	  <'ordering-match',_cor10,_cor11> when 'true' ->
	      %% Line 17047
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','ordering-match'}})
	  %% Line 17048
	  <'substrings-match',_cor12,_cor13> when 'true' ->
	      %% Line 17049
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','substrings-match'}})
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_counterSignature',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_counterSignature'/3 =
    %% Line 17052
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'derivation',_cor7,_cor8> when 'true' ->
	      %% Line 17053
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','derivation'}})
	  %% Line 17054
	  <'Type',Bytes,_cor9> when 'true' ->
	      let <Tlv> =
		  %% Line 17055
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17056
		  apply 'dec_SignerInfo'/2
		      (Tlv, [16])
	  %% Line 17057
	  <'equality-match',_cor10,_cor11> when 'true' ->
	      %% Line 17058
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','equality-match'}})
	  %% Line 17059
	  <'ordering-match',_cor12,_cor13> when 'true' ->
	      %% Line 17060
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','ordering-match'}})
	  %% Line 17061
	  <'substrings-match',_cor14,_cor15> when 'true' ->
	      %% Line 17062
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','substrings-match'}})
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_counterSignature',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_contentType'/3 =
    %% Line 17070
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'derivation',_cor6,_cor7> when 'true' ->
	      %% Line 17071
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','derivation'}})
	  %% Line 17072
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17073
	      apply 'enc_ContentType'/2
		  (Val, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#])
	  %% Line 17074
	  <'equality-match',_cor8,_cor9> when 'true' ->
	      %% Line 17075
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','equality-match'}})
	  %% Line 17076
	  <'ordering-match',_cor10,_cor11> when 'true' ->
	      %% Line 17077
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','ordering-match'}})
	  %% Line 17078
	  <'substrings-match',_cor12,_cor13> when 'true' ->
	      %% Line 17079
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','substrings-match'}})
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_contentType',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_contentType'/3 =
    %% Line 17082
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'derivation',_cor7,_cor8> when 'true' ->
	      %% Line 17083
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','derivation'}})
	  %% Line 17084
	  <'Type',Bytes,_cor9> when 'true' ->
	      let <Tlv> =
		  %% Line 17085
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17086
		  apply 'dec_ContentType'/2
		      (Tlv, [6])
	  %% Line 17087
	  <'equality-match',_cor10,_cor11> when 'true' ->
	      %% Line 17088
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','equality-match'}})
	  %% Line 17089
	  <'ordering-match',_cor12,_cor13> when 'true' ->
	      %% Line 17090
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','ordering-match'}})
	  %% Line 17091
	  <'substrings-match',_cor14,_cor15> when 'true' ->
	      %% Line 17092
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','substrings-match'}})
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_contentType',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_extensionRequest'/3 =
    %% Line 17100
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'derivation',_cor6,_cor7> when 'true' ->
	      %% Line 17101
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','derivation'}})
	  %% Line 17102
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17103
	      apply 'enc_ExtensionRequest'/2
		  (Val, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
	  %% Line 17104
	  <'equality-match',_cor8,_cor9> when 'true' ->
	      %% Line 17105
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','equality-match'}})
	  %% Line 17106
	  <'ordering-match',_cor10,_cor11> when 'true' ->
	      %% Line 17107
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','ordering-match'}})
	  %% Line 17108
	  <'substrings-match',_cor12,_cor13> when 'true' ->
	      %% Line 17109
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','substrings-match'}})
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_extensionRequest',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_extensionRequest'/3 =
    %% Line 17112
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'derivation',_cor7,_cor8> when 'true' ->
	      %% Line 17113
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','derivation'}})
	  %% Line 17114
	  <'Type',Bytes,_cor9> when 'true' ->
	      let <Tlv> =
		  %% Line 17115
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17116
		  apply 'dec_ExtensionRequest'/2
		      (Tlv, [16])
	  %% Line 17117
	  <'equality-match',_cor10,_cor11> when 'true' ->
	      %% Line 17118
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','equality-match'}})
	  %% Line 17119
	  <'ordering-match',_cor12,_cor13> when 'true' ->
	      %% Line 17120
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','ordering-match'}})
	  %% Line 17121
	  <'substrings-match',_cor14,_cor15> when 'true' ->
	      %% Line 17122
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','substrings-match'}})
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_extensionRequest',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_challengePassword'/3 =
    %% Line 17130
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'derivation',_cor6,_cor7> when 'true' ->
	      %% Line 17131
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','derivation'}})
	  %% Line 17132
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17133
	      apply 'enc_DirectoryString'/2
		  (Val, [])
	  %% Line 17134
	  <'equality-match',_cor8,_cor9> when 'true' ->
	      %% Line 17135
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','equality-match'}})
	  %% Line 17136
	  <'ordering-match',_cor10,_cor11> when 'true' ->
	      %% Line 17137
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','ordering-match'}})
	  %% Line 17138
	  <'substrings-match',_cor12,_cor13> when 'true' ->
	      %% Line 17139
	      call 'erlang':'exit'
		  ({'error',{'use of missing field in object','substrings-match'}})
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_challengePassword',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_challengePassword'/3 =
    %% Line 17142
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'derivation',_cor7,_cor8> when 'true' ->
	      %% Line 17143
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','derivation'}})
	  %% Line 17144
	  <'Type',Bytes,_cor9> when 'true' ->
	      let <Tlv> =
		  %% Line 17145
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17146
		  apply 'dec_DirectoryString'/2
		      (Tlv, [])
	  %% Line 17147
	  <'equality-match',_cor10,_cor11> when 'true' ->
	      %% Line 17148
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','equality-match'}})
	  %% Line 17149
	  <'ordering-match',_cor12,_cor13> when 'true' ->
	      %% Line 17150
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','ordering-match'}})
	  %% Line 17151
	  <'substrings-match',_cor14,_cor15> when 'true' ->
	      %% Line 17152
	      call 'erlang':'exit'
		  ({'error',{'illegal use of missing field in object','substrings-match'}})
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_challengePassword',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_invalidityDate'/3 =
    %% Line 17160
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17161
	      apply 'enc_InvalidityDate'/2
		  (Val, [#{#<24>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_invalidityDate',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_invalidityDate'/3 =
    %% Line 17164
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17165
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17166
		  apply 'dec_InvalidityDate'/2
		      (Tlv, [24])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_invalidityDate',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_holdInstructionCode'/3 =
    %% Line 17174
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17175
	      apply 'enc_HoldInstructionCode'/2
		  (Val, [#{#<6>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_holdInstructionCode',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_holdInstructionCode'/3 =
    %% Line 17178
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17179
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17180
		  apply 'dec_HoldInstructionCode'/2
		      (Tlv, [6])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_holdInstructionCode',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_certificateIssuer'/3 =
    %% Line 17188
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17189
	      apply 'enc_CertificateIssuer'/2
		  (Val, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_certificateIssuer',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_certificateIssuer'/3 =
    %% Line 17192
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17193
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17194
		  apply 'dec_CertificateIssuer'/2
		      (Tlv, [16])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_certificateIssuer',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_cRLReasons'/3 =
    %% Line 17202
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17203
	      apply 'enc_CRLReason'/2
		  (Val, [#{#<10>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_cRLReasons',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_cRLReasons'/3 =
    %% Line 17206
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17207
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17208
		  apply 'dec_CRLReason'/2
		      (Tlv, [10])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_cRLReasons',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_deltaCRLIndicator'/3 =
    %% Line 17216
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17217
	      apply 'enc_BaseCRLNumber'/2
		  (Val, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_deltaCRLIndicator',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_deltaCRLIndicator'/3 =
    %% Line 17220
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17221
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17222
		  apply 'dec_BaseCRLNumber'/2
		      (Tlv, [2])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_deltaCRLIndicator',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_issuingDistributionPoint'/3 =
    %% Line 17230
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17231
	      apply 'enc_IssuingDistributionPoint'/2
		  (Val, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_issuingDistributionPoint',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_issuingDistributionPoint'/3 =
    %% Line 17234
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17235
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17236
		  apply 'dec_IssuingDistributionPoint'/2
		      (Tlv, [16])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_issuingDistributionPoint',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_cRLNumber'/3 =
    %% Line 17244
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17245
	      apply 'enc_CRLNumber'/2
		  (Val, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_cRLNumber',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_cRLNumber'/3 =
    %% Line 17248
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17249
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17250
		  apply 'dec_CRLNumber'/2
		      (Tlv, [2])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_cRLNumber',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_subjectInfoAccess'/3 =
    %% Line 17258
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17259
	      apply 'enc_SubjectInfoAccessSyntax'/2
		  (Val, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_subjectInfoAccess',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_subjectInfoAccess'/3 =
    %% Line 17262
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17263
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17264
		  apply 'dec_SubjectInfoAccessSyntax'/2
		      (Tlv, [16])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_subjectInfoAccess',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_authorityInfoAccess'/3 =
    %% Line 17272
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17273
	      apply 'enc_AuthorityInfoAccessSyntax'/2
		  (Val, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_authorityInfoAccess',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_authorityInfoAccess'/3 =
    %% Line 17276
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17277
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17278
		  apply 'dec_AuthorityInfoAccessSyntax'/2
		      (Tlv, [16])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_authorityInfoAccess',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_freshestCRL'/3 =
    %% Line 17286
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17287
	      apply 'enc_FreshestCRL'/2
		  (Val, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_freshestCRL',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_freshestCRL'/3 =
    %% Line 17290
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17291
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17292
		  apply 'dec_FreshestCRL'/2
		      (Tlv, [16])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_freshestCRL',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_inhibitAnyPolicy'/3 =
    %% Line 17300
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17301
	      apply 'enc_InhibitAnyPolicy'/2
		  (Val, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_inhibitAnyPolicy',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_inhibitAnyPolicy'/3 =
    %% Line 17304
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17305
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17306
		  apply 'dec_InhibitAnyPolicy'/2
		      (Tlv, [2])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_inhibitAnyPolicy',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_extKeyUsage'/3 =
    %% Line 17314
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17315
	      apply 'enc_ExtKeyUsageSyntax'/2
		  (Val, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_extKeyUsage',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_extKeyUsage'/3 =
    %% Line 17318
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17319
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17320
		  apply 'dec_ExtKeyUsageSyntax'/2
		      (Tlv, [16])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_extKeyUsage',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_cRLDistributionPoints'/3 =
    %% Line 17328
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17329
	      apply 'enc_CRLDistributionPoints'/2
		  (Val, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_cRLDistributionPoints',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_cRLDistributionPoints'/3 =
    %% Line 17332
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17333
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17334
		  apply 'dec_CRLDistributionPoints'/2
		      (Tlv, [16])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_cRLDistributionPoints',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_policyConstraints'/3 =
    %% Line 17342
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17343
	      apply 'enc_PolicyConstraints'/2
		  (Val, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_policyConstraints',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_policyConstraints'/3 =
    %% Line 17346
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17347
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17348
		  apply 'dec_PolicyConstraints'/2
		      (Tlv, [16])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_policyConstraints',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_nameConstraints'/3 =
    %% Line 17356
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17357
	      apply 'enc_NameConstraints'/2
		  (Val, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_nameConstraints',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_nameConstraints'/3 =
    %% Line 17360
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17361
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17362
		  apply 'dec_NameConstraints'/2
		      (Tlv, [16])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_nameConstraints',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_basicConstraints'/3 =
    %% Line 17370
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17371
	      apply 'enc_BasicConstraints'/2
		  (Val, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_basicConstraints',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_basicConstraints'/3 =
    %% Line 17374
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17375
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17376
		  apply 'dec_BasicConstraints'/2
		      (Tlv, [16])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_basicConstraints',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_subjectDirectoryAttributes'/3 =
    %% Line 17384
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17385
	      apply 'enc_SubjectDirectoryAttributes'/2
		  (Val, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_subjectDirectoryAttributes',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_subjectDirectoryAttributes'/3 =
    %% Line 17388
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17389
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17390
		  apply 'dec_SubjectDirectoryAttributes'/2
		      (Tlv, [16])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_subjectDirectoryAttributes',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_issuerAltName'/3 =
    %% Line 17398
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17399
	      apply 'enc_IssuerAltName'/2
		  (Val, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_issuerAltName',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_issuerAltName'/3 =
    %% Line 17402
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17403
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17404
		  apply 'dec_IssuerAltName'/2
		      (Tlv, [16])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_issuerAltName',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_subjectAltName'/3 =
    %% Line 17412
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17413
	      apply 'enc_SubjectAltName'/2
		  (Val, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_subjectAltName',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_subjectAltName'/3 =
    %% Line 17416
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17417
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17418
		  apply 'dec_SubjectAltName'/2
		      (Tlv, [16])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_subjectAltName',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_policyMappings'/3 =
    %% Line 17426
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17427
	      apply 'enc_PolicyMappings'/2
		  (Val, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_policyMappings',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_policyMappings'/3 =
    %% Line 17430
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17431
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17432
		  apply 'dec_PolicyMappings'/2
		      (Tlv, [16])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_policyMappings',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_certificatePolicies'/3 =
    %% Line 17440
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17441
	      apply 'enc_CertificatePolicies'/2
		  (Val, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_certificatePolicies',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_certificatePolicies'/3 =
    %% Line 17444
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17445
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17446
		  apply 'dec_CertificatePolicies'/2
		      (Tlv, [16])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_certificatePolicies',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_privateKeyUsagePeriod'/3 =
    %% Line 17454
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17455
	      apply 'enc_PrivateKeyUsagePeriod'/2
		  (Val, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_privateKeyUsagePeriod',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_privateKeyUsagePeriod'/3 =
    %% Line 17458
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17459
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17460
		  apply 'dec_PrivateKeyUsagePeriod'/2
		      (Tlv, [16])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_privateKeyUsagePeriod',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_keyUsage'/3 =
    %% Line 17468
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17469
	      apply 'enc_KeyUsage'/2
		  (Val, [#{#<3>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_keyUsage',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_keyUsage'/3 =
    %% Line 17472
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17473
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17474
		  apply 'dec_KeyUsage'/2
		      (Tlv, [3])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_keyUsage',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_subjectKeyIdentifier'/3 =
    %% Line 17482
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17483
	      apply 'enc_SubjectKeyIdentifier'/2
		  (Val, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_subjectKeyIdentifier',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_subjectKeyIdentifier'/3 =
    %% Line 17486
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17487
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17488
		  apply 'dec_SubjectKeyIdentifier'/2
		      (Tlv, [4])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_subjectKeyIdentifier',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_authorityKeyIdentifier'/3 =
    %% Line 17496
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17497
	      apply 'enc_AuthorityKeyIdentifier'/2
		  (Val, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_authorityKeyIdentifier',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_authorityKeyIdentifier'/3 =
    %% Line 17500
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17501
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17502
		  apply 'dec_AuthorityKeyIdentifier'/2
		      (Tlv, [16])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_authorityKeyIdentifier',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_x400-teletex-domain-defined-attributes'/3 =
    %% Line 17510
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17511
	      apply 'enc_TeletexDomainDefinedAttributes'/2
		  (Val, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_x400-teletex-domain-defined-attributes',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_x400-teletex-domain-defined-attributes'/3 =
    %% Line 17514
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17515
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17516
		  apply 'dec_TeletexDomainDefinedAttributes'/2
		      (Tlv, [16])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_x400-teletex-domain-defined-attributes',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_x400-terminal-type'/3 =
    %% Line 17524
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17525
	      apply 'enc_TerminalType'/2
		  (Val, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_x400-terminal-type',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_x400-terminal-type'/3 =
    %% Line 17528
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17529
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17530
		  apply 'dec_TerminalType'/2
		      (Tlv, [2])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_x400-terminal-type',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_x400-extended-network-address'/3 =
    %% Line 17538
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17539
	      apply 'enc_ExtendedNetworkAddress'/2
		  (Val, [])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_x400-extended-network-address',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_x400-extended-network-address'/3 =
    %% Line 17542
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17543
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17544
		  apply 'dec_ExtendedNetworkAddress'/2
		      (Tlv, [])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_x400-extended-network-address',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_x400-local-postal-attributes'/3 =
    %% Line 17552
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17553
	      apply 'enc_LocalPostalAttributes'/2
		  (Val, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_x400-local-postal-attributes',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_x400-local-postal-attributes'/3 =
    %% Line 17556
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17557
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17558
		  apply 'dec_LocalPostalAttributes'/2
		      (Tlv, [17])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_x400-local-postal-attributes',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_x400-unique-postal-name'/3 =
    %% Line 17566
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17567
	      apply 'enc_UniquePostalName'/2
		  (Val, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_x400-unique-postal-name',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_x400-unique-postal-name'/3 =
    %% Line 17570
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17571
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17572
		  apply 'dec_UniquePostalName'/2
		      (Tlv, [17])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_x400-unique-postal-name',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_x400-poste-restante-address'/3 =
    %% Line 17580
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17581
	      apply 'enc_PosteRestanteAddress'/2
		  (Val, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_x400-poste-restante-address',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_x400-poste-restante-address'/3 =
    %% Line 17584
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17585
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17586
		  apply 'dec_PosteRestanteAddress'/2
		      (Tlv, [17])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_x400-poste-restante-address',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_x400-post-office-box-address'/3 =
    %% Line 17594
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17595
	      apply 'enc_PostOfficeBoxAddress'/2
		  (Val, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_x400-post-office-box-address',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_x400-post-office-box-address'/3 =
    %% Line 17598
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17599
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17600
		  apply 'dec_PostOfficeBoxAddress'/2
		      (Tlv, [17])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_x400-post-office-box-address',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_x400-street-address'/3 =
    %% Line 17608
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17609
	      apply 'enc_StreetAddress'/2
		  (Val, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_x400-street-address',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_x400-street-address'/3 =
    %% Line 17612
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17613
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17614
		  apply 'dec_StreetAddress'/2
		      (Tlv, [17])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_x400-street-address',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_x400-unformatted-postal-address'/3 =
    %% Line 17622
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17623
	      apply 'enc_UnformattedPostalAddress'/2
		  (Val, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_x400-unformatted-postal-address',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_x400-unformatted-postal-address'/3 =
    %% Line 17626
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17627
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17628
		  apply 'dec_UnformattedPostalAddress'/2
		      (Tlv, [17])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_x400-unformatted-postal-address',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_x400-extension-physical-delivery-address-components'/3 =
    %% Line 17636
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17637
	      apply 'enc_ExtensionPhysicalDeliveryAddressComponents'/2
		  (Val, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_x400-extension-physical-delivery-address-components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_x400-extension-physical-delivery-address-components'/3 =
    %% Line 17640
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17641
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17642
		  apply 'dec_ExtensionPhysicalDeliveryAddressComponents'/2
		      (Tlv, [17])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_x400-extension-physical-delivery-address-components',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_x400-physical-delivery-organization-name'/3 =
    %% Line 17650
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17651
	      apply 'enc_PhysicalDeliveryOrganizationName'/2
		  (Val, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_x400-physical-delivery-organization-name',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_x400-physical-delivery-organization-name'/3 =
    %% Line 17654
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17655
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17656
		  apply 'dec_PhysicalDeliveryOrganizationName'/2
		      (Tlv, [17])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_x400-physical-delivery-organization-name',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_x400-physical-delivery-personal-name'/3 =
    %% Line 17664
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17665
	      apply 'enc_PhysicalDeliveryPersonalName'/2
		  (Val, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_x400-physical-delivery-personal-name',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_x400-physical-delivery-personal-name'/3 =
    %% Line 17668
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17669
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17670
		  apply 'dec_PhysicalDeliveryPersonalName'/2
		      (Tlv, [17])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_x400-physical-delivery-personal-name',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_x400-extension-OR-address-components'/3 =
    %% Line 17678
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17679
	      apply 'enc_ExtensionORAddressComponents'/2
		  (Val, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_x400-extension-OR-address-components',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_x400-extension-OR-address-components'/3 =
    %% Line 17682
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17683
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17684
		  apply 'dec_ExtensionORAddressComponents'/2
		      (Tlv, [17])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_x400-extension-OR-address-components',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_x400-physical-delivery-office-number'/3 =
    %% Line 17692
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17693
	      apply 'enc_PhysicalDeliveryOfficeNumber'/2
		  (Val, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_x400-physical-delivery-office-number',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_x400-physical-delivery-office-number'/3 =
    %% Line 17696
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17697
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17698
		  apply 'dec_PhysicalDeliveryOfficeNumber'/2
		      (Tlv, [17])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_x400-physical-delivery-office-number',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_x400-physical-delivery-office-name'/3 =
    %% Line 17706
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17707
	      apply 'enc_PhysicalDeliveryOfficeName'/2
		  (Val, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_x400-physical-delivery-office-name',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_x400-physical-delivery-office-name'/3 =
    %% Line 17710
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17711
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17712
		  apply 'dec_PhysicalDeliveryOfficeName'/2
		      (Tlv, [17])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_x400-physical-delivery-office-name',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_x400-postal-code'/3 =
    %% Line 17720
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17721
	      apply 'enc_PostalCode'/2
		  (Val, [])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_x400-postal-code',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_x400-postal-code'/3 =
    %% Line 17724
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17725
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17726
		  apply 'dec_PostalCode'/2
		      (Tlv, [])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_x400-postal-code',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_x400-physical-delivery-country-name'/3 =
    %% Line 17734
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17735
	      apply 'enc_PhysicalDeliveryCountryName'/2
		  (Val, [])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_x400-physical-delivery-country-name',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_x400-physical-delivery-country-name'/3 =
    %% Line 17738
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17739
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17740
		  apply 'dec_PhysicalDeliveryCountryName'/2
		      (Tlv, [])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_x400-physical-delivery-country-name',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_x400-pds-name'/3 =
    %% Line 17748
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17749
	      apply 'enc_PDSName'/2
		  (Val, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_x400-pds-name',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_x400-pds-name'/3 =
    %% Line 17752
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17753
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17754
		  apply 'dec_PDSName'/2
		      (Tlv, [19])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_x400-pds-name',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_x400-teletex-personal-name'/3 =
    %% Line 17762
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17763
	      apply 'enc_TeletexPersonalName'/2
		  (Val, [#{#<49>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_x400-teletex-personal-name',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_x400-teletex-personal-name'/3 =
    %% Line 17766
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17767
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17768
		  apply 'dec_TeletexPersonalName'/2
		      (Tlv, [17])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_x400-teletex-personal-name',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_x400-teletex-common-name'/3 =
    %% Line 17776
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17777
	      apply 'enc_TeletexCommonName'/2
		  (Val, [#{#<20>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_x400-teletex-common-name',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_x400-teletex-common-name'/3 =
    %% Line 17780
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17781
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17782
		  apply 'dec_TeletexCommonName'/2
		      (Tlv, [20])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_x400-teletex-common-name',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_x400-common-name'/3 =
    %% Line 17790
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17791
	      apply 'enc_CommonName'/2
		  (Val, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_x400-common-name',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_x400-common-name'/3 =
    %% Line 17794
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17795
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17796
		  apply 'dec_CommonName'/2
		      (Tlv, [19])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_x400-common-name',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_ec-public-key'/3 =
    %% Line 17804
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17805
	      apply 'enc_EcpkParameters'/2
		  (Val, [])
	  %% Line 17806
	  <'PublicKeyType',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17807
	      apply 'enc_ECPoint'/2
		  (Val, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_ec-public-key',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_ec-public-key'/3 =
    %% Line 17810
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor8> when 'true' ->
	      let <Tlv> =
		  %% Line 17811
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17812
		  apply 'dec_EcpkParameters'/2
		      (Tlv, [])
	  %% Line 17813
	  <'PublicKeyType',Bytes,_cor9> when 'true' ->
	      let <Tlv> =
		  %% Line 17814
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17815
		  apply 'dec_ECPoint'/2
		      (Tlv, [4])
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'dec_ec-public-key',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_pp-basis'/3 =
    %% Line 17823
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17824
	      apply 'enc_Pentanomial'/2
		  (Val, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_pp-basis',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_pp-basis'/3 =
    %% Line 17827
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17828
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17829
		  apply 'dec_Pentanomial'/2
		      (Tlv, [16])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_pp-basis',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_tp-basis'/3 =
    %% Line 17837
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17838
	      apply 'enc_Trinomial'/2
		  (Val, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_tp-basis',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_tp-basis'/3 =
    %% Line 17841
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17842
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17843
		  apply 'dec_Trinomial'/2
		      (Tlv, [2])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_tp-basis',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_gn-basis'/3 =
    %% Line 17851
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17852
	      apply 'encode_null'/2
		  (Val, [#{#<5>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_gn-basis',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_gn-basis'/3 =
    %% Line 17855
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17856
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17857
		  apply 'decode_null'/2
		      (Tlv, [5])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_gn-basis',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_field-characteristic-two'/3 =
    %% Line 17865
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17866
	      apply 'enc_Characteristic-two'/2
		  (Val, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_field-characteristic-two',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_field-characteristic-two'/3 =
    %% Line 17869
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17870
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17871
		  apply 'dec_Characteristic-two'/2
		      (Tlv, [16])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_field-characteristic-two',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_field-prime-field'/3 =
    %% Line 17879
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17880
	      apply 'enc_Prime-p'/2
		  (Val, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_field-prime-field',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_field-prime-field'/3 =
    %% Line 17883
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17884
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17885
		  apply 'dec_Prime-p'/2
		      (Tlv, [2])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_field-prime-field',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_ecdsa-with-sha512'/3 =
    %% Line 17893
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17894
	      apply 'encode_null'/2
		  (Val, [#{#<5>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_ecdsa-with-sha512',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_ecdsa-with-sha512'/3 =
    %% Line 17897
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17898
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17899
		  apply 'decode_null'/2
		      (Tlv, [5])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_ecdsa-with-sha512',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_ecdsa-with-sha384'/3 =
    %% Line 17907
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17908
	      apply 'encode_null'/2
		  (Val, [#{#<5>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_ecdsa-with-sha384',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_ecdsa-with-sha384'/3 =
    %% Line 17911
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17912
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17913
		  apply 'decode_null'/2
		      (Tlv, [5])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_ecdsa-with-sha384',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_ecdsa-with-sha256'/3 =
    %% Line 17921
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17922
	      apply 'encode_null'/2
		  (Val, [#{#<5>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_ecdsa-with-sha256',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_ecdsa-with-sha256'/3 =
    %% Line 17925
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17926
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17927
		  apply 'decode_null'/2
		      (Tlv, [5])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_ecdsa-with-sha256',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_ecdsa-with-sha224'/3 =
    %% Line 17935
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17936
	      apply 'encode_null'/2
		  (Val, [#{#<5>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_ecdsa-with-sha224',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_ecdsa-with-sha224'/3 =
    %% Line 17939
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17940
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17941
		  apply 'decode_null'/2
		      (Tlv, [5])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_ecdsa-with-sha224',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_ecdsa-with-sha1'/3 =
    %% Line 17949
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17950
	      apply 'encode_null'/2
		  (Val, [#{#<5>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_ecdsa-with-sha1',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_ecdsa-with-sha1'/3 =
    %% Line 17953
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 17954
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17955
		  apply 'decode_null'/2
		      (Tlv, [5])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_ecdsa-with-sha1',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_kea'/3 =
    %% Line 17963
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17964
	      apply 'enc_KEA-Parms-Id'/2
		  (Val, [#{#<4>(8,1,'integer',['unsigned'|['big']])}#])
	  %% Line 17965
	  <'PublicKeyType',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17966
	      apply 'enc_KEA-PublicKey'/2
		  (Val, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_kea',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_kea'/3 =
    %% Line 17969
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor8> when 'true' ->
	      let <Tlv> =
		  %% Line 17970
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17971
		  apply 'dec_KEA-Parms-Id'/2
		      (Tlv, [4])
	  %% Line 17972
	  <'PublicKeyType',Bytes,_cor9> when 'true' ->
	      let <Tlv> =
		  %% Line 17973
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17974
		  apply 'dec_KEA-PublicKey'/2
		      (Tlv, [2])
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'dec_kea',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_dh'/3 =
    %% Line 17982
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17983
	      apply 'enc_DomainParameters'/2
		  (Val, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
	  %% Line 17984
	  <'PublicKeyType',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 17985
	      apply 'enc_DHPublicKey'/2
		  (Val, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_dh',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_dh'/3 =
    %% Line 17988
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor8> when 'true' ->
	      let <Tlv> =
		  %% Line 17989
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17990
		  apply 'dec_DomainParameters'/2
		      (Tlv, [16])
	  %% Line 17991
	  <'PublicKeyType',Bytes,_cor9> when 'true' ->
	      let <Tlv> =
		  %% Line 17992
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 17993
		  apply 'dec_DHPublicKey'/2
		      (Tlv, [2])
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'dec_dh',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_rsa-encryption'/3 =
    %% Line 18001
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 18002
	      apply 'encode_null'/2
		  (Val, [#{#<5>(8,1,'integer',['unsigned'|['big']])}#])
	  %% Line 18003
	  <'PublicKeyType',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 18004
	      apply 'enc_RSAPublicKey'/2
		  (Val, [#{#<48>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_rsa-encryption',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_rsa-encryption'/3 =
    %% Line 18007
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor8> when 'true' ->
	      let <Tlv> =
		  %% Line 18008
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 18009
		  apply 'decode_null'/2
		      (Tlv, [5])
	  %% Line 18010
	  <'PublicKeyType',Bytes,_cor9> when 'true' ->
	      let <Tlv> =
		  %% Line 18011
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 18012
		  apply 'dec_RSAPublicKey'/2
		      (Tlv, [16])
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'dec_rsa-encryption',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_sha512-with-rsa-encryption'/3 =
    %% Line 18020
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 18021
	      apply 'encode_null'/2
		  (Val, [#{#<5>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_sha512-with-rsa-encryption',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_sha512-with-rsa-encryption'/3 =
    %% Line 18024
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 18025
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 18026
		  apply 'decode_null'/2
		      (Tlv, [5])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_sha512-with-rsa-encryption',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_sha384-with-rsa-encryption'/3 =
    %% Line 18034
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 18035
	      apply 'encode_null'/2
		  (Val, [#{#<5>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_sha384-with-rsa-encryption',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_sha384-with-rsa-encryption'/3 =
    %% Line 18038
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 18039
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 18040
		  apply 'decode_null'/2
		      (Tlv, [5])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_sha384-with-rsa-encryption',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_sha256-with-rsa-encryption'/3 =
    %% Line 18048
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 18049
	      apply 'encode_null'/2
		  (Val, [#{#<5>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_sha256-with-rsa-encryption',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_sha256-with-rsa-encryption'/3 =
    %% Line 18052
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 18053
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 18054
		  apply 'decode_null'/2
		      (Tlv, [5])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_sha256-with-rsa-encryption',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_sha224-with-rsa-encryption'/3 =
    %% Line 18062
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 18063
	      apply 'encode_null'/2
		  (Val, [#{#<5>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_sha224-with-rsa-encryption',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_sha224-with-rsa-encryption'/3 =
    %% Line 18066
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 18067
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 18068
		  apply 'decode_null'/2
		      (Tlv, [5])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_sha224-with-rsa-encryption',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_sha-1with-rsa-encryption'/3 =
    %% Line 18076
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 18077
	      apply 'encode_null'/2
		  (Val, [#{#<5>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_sha-1with-rsa-encryption',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_sha-1with-rsa-encryption'/3 =
    %% Line 18080
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 18081
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 18082
		  apply 'decode_null'/2
		      (Tlv, [5])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_sha-1with-rsa-encryption',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_sha1-with-rsa-encryption'/3 =
    %% Line 18090
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 18091
	      apply 'encode_null'/2
		  (Val, [#{#<5>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_sha1-with-rsa-encryption',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_sha1-with-rsa-encryption'/3 =
    %% Line 18094
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 18095
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 18096
		  apply 'decode_null'/2
		      (Tlv, [5])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_sha1-with-rsa-encryption',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_md5-with-rsa-encryption'/3 =
    %% Line 18104
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 18105
	      apply 'encode_null'/2
		  (Val, [#{#<5>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_md5-with-rsa-encryption',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_md5-with-rsa-encryption'/3 =
    %% Line 18108
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 18109
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 18110
		  apply 'decode_null'/2
		      (Tlv, [5])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_md5-with-rsa-encryption',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_md2-with-rsa-encryption'/3 =
    %% Line 18118
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 18119
	      apply 'encode_null'/2
		  (Val, [#{#<5>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_md2-with-rsa-encryption',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_md2-with-rsa-encryption'/3 =
    %% Line 18122
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 18123
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 18124
		  apply 'decode_null'/2
		      (Tlv, [5])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_md2-with-rsa-encryption',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_dsaWithSHA1'/3 =
    %% Line 18132
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 18133
	      apply 'enc_DSAParams'/2
		  (Val, [])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_dsaWithSHA1',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_dsaWithSHA1'/3 =
    %% Line 18136
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 18137
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 18138
		  apply 'dec_DSAParams'/2
		      (Tlv, [])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_dsaWithSHA1',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_dsa-with-sha1'/3 =
    %% Line 18146
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 18147
	      apply 'enc_DSAParams'/2
		  (Val, [])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_dsa-with-sha1',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_dsa-with-sha1'/3 =
    %% Line 18150
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 18151
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 18152
		  apply 'dec_DSAParams'/2
		      (Tlv, [])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_dsa-with-sha1',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_dsa'/3 =
    %% Line 18160
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 18161
	      apply 'enc_DSAParams'/2
		  (Val, [])
	  %% Line 18162
	  <'PublicKeyType',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 18163
	      apply 'enc_DSAPublicKey'/2
		  (Val, [#{#<2>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_dsa',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_dsa'/3 =
    %% Line 18166
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor8> when 'true' ->
	      let <Tlv> =
		  %% Line 18167
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 18168
		  apply 'dec_DSAParams'/2
		      (Tlv, [])
	  %% Line 18169
	  <'PublicKeyType',Bytes,_cor9> when 'true' ->
	      let <Tlv> =
		  %% Line 18170
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 18171
		  apply 'dec_DSAPublicKey'/2
		      (Tlv, [2])
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'dec_dsa',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_emailAddress'/3 =
    %% Line 18179
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 18180
	      apply 'enc_EmailAddress'/2
		  (Val, [#{#<22>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_emailAddress',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_emailAddress'/3 =
    %% Line 18183
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 18184
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 18185
		  apply 'dec_EmailAddress'/2
		      (Tlv, [22])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_emailAddress',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_domainComponent'/3 =
    %% Line 18193
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 18194
	      apply 'enc_DomainComponent'/2
		  (Val, [#{#<22>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_domainComponent',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_domainComponent'/3 =
    %% Line 18197
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 18198
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 18199
		  apply 'dec_DomainComponent'/2
		      (Tlv, [22])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_domainComponent',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_pseudonym'/3 =
    %% Line 18207
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 18208
	      apply 'enc_X520Pseudonym'/2
		  (Val, [])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_pseudonym',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_pseudonym'/3 =
    %% Line 18211
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 18212
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 18213
		  apply 'dec_X520Pseudonym'/2
		      (Tlv, [])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_pseudonym',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_serialNumber'/3 =
    %% Line 18221
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 18222
	      apply 'enc_X520SerialNumber'/2
		  (Val, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_serialNumber',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_serialNumber'/3 =
    %% Line 18225
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 18226
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 18227
		  apply 'dec_X520SerialNumber'/2
		      (Tlv, [19])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_serialNumber',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_countryName'/3 =
    %% Line 18235
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 18236
	      apply 'enc_X520countryName'/2
		  (Val, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_countryName',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_countryName'/3 =
    %% Line 18239
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 18240
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 18241
		  apply 'dec_X520countryName'/2
		      (Tlv, [19])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_countryName',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_dnQualifier'/3 =
    %% Line 18249
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 18250
	      apply 'enc_X520dnQualifier'/2
		  (Val, [#{#<19>(8,1,'integer',['unsigned'|['big']])}#])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_dnQualifier',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_dnQualifier'/3 =
    %% Line 18253
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 18254
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 18255
		  apply 'dec_X520dnQualifier'/2
		      (Tlv, [19])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_dnQualifier',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_title'/3 =
    %% Line 18263
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 18264
	      apply 'enc_X520Title'/2
		  (Val, [])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_title',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_title'/3 =
    %% Line 18267
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 18268
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 18269
		  apply 'dec_X520Title'/2
		      (Tlv, [])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_title',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_organizationalUnitName'/3 =
    %% Line 18277
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 18278
	      apply 'enc_X520OrganizationalUnitName'/2
		  (Val, [])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_organizationalUnitName',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_organizationalUnitName'/3 =
    %% Line 18281
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 18282
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 18283
		  apply 'dec_X520OrganizationalUnitName'/2
		      (Tlv, [])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_organizationalUnitName',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_organizationName'/3 =
    %% Line 18291
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 18292
	      apply 'enc_X520OrganizationName'/2
		  (Val, [])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_organizationName',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_organizationName'/3 =
    %% Line 18295
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 18296
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 18297
		  apply 'dec_X520OrganizationName'/2
		      (Tlv, [])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_organizationName',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_stateOrProvinceName'/3 =
    %% Line 18305
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 18306
	      apply 'enc_X520StateOrProvinceName'/2
		  (Val, [])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_stateOrProvinceName',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_stateOrProvinceName'/3 =
    %% Line 18309
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 18310
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 18311
		  apply 'dec_X520StateOrProvinceName'/2
		      (Tlv, [])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_stateOrProvinceName',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_localityName'/3 =
    %% Line 18319
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 18320
	      apply 'enc_X520LocalityName'/2
		  (Val, [])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_localityName',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_localityName'/3 =
    %% Line 18323
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 18324
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 18325
		  apply 'dec_X520LocalityName'/2
		      (Tlv, [])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_localityName',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_commonName'/3 =
    %% Line 18333
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 18334
	      apply 'enc_X520CommonName'/2
		  (Val, [])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_commonName',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_commonName'/3 =
    %% Line 18337
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 18338
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 18339
		  apply 'dec_X520CommonName'/2
		      (Tlv, [])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_commonName',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_generationQualifier'/3 =
    %% Line 18347
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 18348
	      apply 'enc_X520name'/2
		  (Val, [])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_generationQualifier',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_generationQualifier'/3 =
    %% Line 18351
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 18352
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 18353
		  apply 'dec_X520name'/2
		      (Tlv, [])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_generationQualifier',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_initials'/3 =
    %% Line 18361
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 18362
	      apply 'enc_X520name'/2
		  (Val, [])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_initials',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_initials'/3 =
    %% Line 18365
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 18366
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 18367
		  apply 'dec_X520name'/2
		      (Tlv, [])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_initials',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_givenName'/3 =
    %% Line 18375
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 18376
	      apply 'enc_X520name'/2
		  (Val, [])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_givenName',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_givenName'/3 =
    %% Line 18379
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 18380
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 18381
		  apply 'dec_X520name'/2
		      (Tlv, [])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_givenName',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_surname'/3 =
    %% Line 18389
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 18390
	      apply 'enc_X520name'/2
		  (Val, [])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_surname',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_surname'/3 =
    %% Line 18393
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 18394
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 18395
		  apply 'dec_X520name'/2
		      (Tlv, [])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_surname',3}}] )
	    -| ['compiler_generated'] )
	end
'enc_name'/3 =
    %% Line 18403
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Val,_X_RestPrimFieldName> when 'true' ->
	      %% Line 18404
	      apply 'enc_X520name'/2
		  (Val, [])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'enc_name',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_name'/3 =
    %% Line 18407
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'Type',Bytes,_cor7> when 'true' ->
	      let <Tlv> =
		  %% Line 18408
		  apply 'tlv_format'/1
		      (Bytes)
	      in  %% Line 18409
		  apply 'dec_X520name'/2
		      (Tlv, [])
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'dec_name',3}}] )
	    -| ['compiler_generated'] )
	end
'getenc_Unauthenticated'/1 =
    %% Line 18417
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,113549,1,9,3}> when 'true' ->
	      %% Line 18418
	      ( 'enc_contentType'/3
		-| [{'id',{0,0,'-getenc_Unauthenticated/1-fun-0-'}}] )
	  %% Line 18419
	  <{1,2,840,113549,1,9,6}> when 'true' ->
	      %% Line 18420
	      ( 'enc_counterSignature'/3
		-| [{'id',{0,0,'-getenc_Unauthenticated/1-fun-1-'}}] )
	  %% Line 18421
	  <{1,2,840,113549,1,9,4}> when 'true' ->
	      %% Line 18422
	      ( 'enc_messageDigest'/3
		-| [{'id',{0,0,'-getenc_Unauthenticated/1-fun-2-'}}] )
	  %% Line 18423
	  <_cor12> when 'true' ->
	      %% Line 18424
	      ( fun (_cor7,_cor6,_cor5) ->
		    %% Line 18425
		    case _cor6 of
		      %% Line 18426
		      <{'asn1_OPENTYPE',Bin}>
			  when call 'erlang':'is_binary'
				(Bin) ->
			  let <_cor1> =
			      %% Line 18427
			      call 'erlang':'byte_size'
				  (Bin)
			  in  %% Line 18427
			      {Bin,_cor1}
		      %% Line 18428
		      <Bin>
			  when call 'erlang':'is_binary'
				(_cor6) ->
			  let <_cor2> =
			      %% Line 18429
			      call 'erlang':'byte_size'
				  (Bin)
			  in  %% Line 18429
			      {Bin,_cor2}
		      %% Line 18430
		      <_cor14> when 'true' ->
			  let <_cor3> =
			      %% Line 18431
			      call 'erlang':'length'
				  (_cor6)
			  in  %% Line 18431
			      {_cor6,_cor3}
		    end
		-| [{'id',{0,0,'-getenc_Unauthenticated/1-fun-3-'}}] )
	end
'getdec_Unauthenticated'/1 =
    %% Line 18435
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,113549,1,9,3}> when 'true' ->
	      %% Line 18436
	      ( 'dec_contentType'/3
		-| [{'id',{0,0,'-getdec_Unauthenticated/1-fun-0-'}}] )
	  %% Line 18437
	  <{1,2,840,113549,1,9,6}> when 'true' ->
	      %% Line 18438
	      ( 'dec_counterSignature'/3
		-| [{'id',{0,0,'-getdec_Unauthenticated/1-fun-1-'}}] )
	  %% Line 18439
	  <{1,2,840,113549,1,9,4}> when 'true' ->
	      %% Line 18440
	      ( 'dec_messageDigest'/3
		-| [{'id',{0,0,'-getdec_Unauthenticated/1-fun-2-'}}] )
	  %% Line 18441
	  <_cor9> when 'true' ->
	      %% Line 18442
	      ( fun (_cor4,_cor3,_cor2) ->
		    %% Line 18443
		    case _cor3 of
		      %% Line 18444
		      <Bin>
			  when call 'erlang':'is_binary'
				(_cor3) ->
			  %% Line 18445
			  Bin
		      %% Line 18446
		      <_cor11> when 'true' ->
			  %% Line 18447
			  apply 'ber_encode'/1
			      (_cor3)
		    end
		-| [{'id',{0,0,'-getdec_Unauthenticated/1-fun-3-'}}] )
	end
'getenc_Authenticated'/1 =
    %% Line 18458
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,113549,1,9,3}> when 'true' ->
	      %% Line 18459
	      ( 'enc_contentType'/3
		-| [{'id',{0,0,'-getenc_Authenticated/1-fun-0-'}}] )
	  %% Line 18460
	  <{2,16,840,1,113733,1,9,4}> when 'true' ->
	      %% Line 18461
	      ( 'enc_failInfo'/3
		-| [{'id',{0,0,'-getenc_Authenticated/1-fun-1-'}}] )
	  %% Line 18462
	  <{1,2,840,113549,1,9,4}> when 'true' ->
	      %% Line 18463
	      ( 'enc_messageDigest'/3
		-| [{'id',{0,0,'-getenc_Authenticated/1-fun-2-'}}] )
	  %% Line 18464
	  <{2,16,840,1,113733,1,9,2}> when 'true' ->
	      %% Line 18465
	      ( 'enc_messageType'/3
		-| [{'id',{0,0,'-getenc_Authenticated/1-fun-3-'}}] )
	  %% Line 18466
	  <{2,16,840,1,113733,1,9,3}> when 'true' ->
	      %% Line 18467
	      ( 'enc_pkiStatus'/3
		-| [{'id',{0,0,'-getenc_Authenticated/1-fun-4-'}}] )
	  %% Line 18468
	  <{2,16,840,1,113733,1,9,6}> when 'true' ->
	      %% Line 18469
	      ( 'enc_recipientNonce'/3
		-| [{'id',{0,0,'-getenc_Authenticated/1-fun-5-'}}] )
	  %% Line 18470
	  <{2,16,840,1,113733,1,9,5}> when 'true' ->
	      %% Line 18471
	      ( 'enc_senderNonce'/3
		-| [{'id',{0,0,'-getenc_Authenticated/1-fun-6-'}}] )
	  %% Line 18472
	  <{1,2,840,113549,1,9,5}> when 'true' ->
	      %% Line 18473
	      ( 'enc_signingTime'/3
		-| [{'id',{0,0,'-getenc_Authenticated/1-fun-7-'}}] )
	  %% Line 18474
	  <{2,16,840,1,113733,1,9,7}> when 'true' ->
	      %% Line 18475
	      ( 'enc_transactionID'/3
		-| [{'id',{0,0,'-getenc_Authenticated/1-fun-8-'}}] )
	  %% Line 18476
	  <_cor12> when 'true' ->
	      %% Line 18477
	      ( fun (_cor7,_cor6,_cor5) ->
		    %% Line 18478
		    case _cor6 of
		      %% Line 18479
		      <{'asn1_OPENTYPE',Bin}>
			  when call 'erlang':'is_binary'
				(Bin) ->
			  let <_cor1> =
			      %% Line 18480
			      call 'erlang':'byte_size'
				  (Bin)
			  in  %% Line 18480
			      {Bin,_cor1}
		      %% Line 18481
		      <Bin>
			  when call 'erlang':'is_binary'
				(_cor6) ->
			  let <_cor2> =
			      %% Line 18482
			      call 'erlang':'byte_size'
				  (Bin)
			  in  %% Line 18482
			      {Bin,_cor2}
		      %% Line 18483
		      <_cor14> when 'true' ->
			  let <_cor3> =
			      %% Line 18484
			      call 'erlang':'length'
				  (_cor6)
			  in  %% Line 18484
			      {_cor6,_cor3}
		    end
		-| [{'id',{0,0,'-getenc_Authenticated/1-fun-9-'}}] )
	end
'getdec_Authenticated'/1 =
    %% Line 18488
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,113549,1,9,3}> when 'true' ->
	      %% Line 18489
	      ( 'dec_contentType'/3
		-| [{'id',{0,0,'-getdec_Authenticated/1-fun-0-'}}] )
	  %% Line 18490
	  <{2,16,840,1,113733,1,9,4}> when 'true' ->
	      %% Line 18491
	      ( 'dec_failInfo'/3
		-| [{'id',{0,0,'-getdec_Authenticated/1-fun-1-'}}] )
	  %% Line 18492
	  <{1,2,840,113549,1,9,4}> when 'true' ->
	      %% Line 18493
	      ( 'dec_messageDigest'/3
		-| [{'id',{0,0,'-getdec_Authenticated/1-fun-2-'}}] )
	  %% Line 18494
	  <{2,16,840,1,113733,1,9,2}> when 'true' ->
	      %% Line 18495
	      ( 'dec_messageType'/3
		-| [{'id',{0,0,'-getdec_Authenticated/1-fun-3-'}}] )
	  %% Line 18496
	  <{2,16,840,1,113733,1,9,3}> when 'true' ->
	      %% Line 18497
	      ( 'dec_pkiStatus'/3
		-| [{'id',{0,0,'-getdec_Authenticated/1-fun-4-'}}] )
	  %% Line 18498
	  <{2,16,840,1,113733,1,9,6}> when 'true' ->
	      %% Line 18499
	      ( 'dec_recipientNonce'/3
		-| [{'id',{0,0,'-getdec_Authenticated/1-fun-5-'}}] )
	  %% Line 18500
	  <{2,16,840,1,113733,1,9,5}> when 'true' ->
	      %% Line 18501
	      ( 'dec_senderNonce'/3
		-| [{'id',{0,0,'-getdec_Authenticated/1-fun-6-'}}] )
	  %% Line 18502
	  <{1,2,840,113549,1,9,5}> when 'true' ->
	      %% Line 18503
	      ( 'dec_signingTime'/3
		-| [{'id',{0,0,'-getdec_Authenticated/1-fun-7-'}}] )
	  %% Line 18504
	  <{2,16,840,1,113733,1,9,7}> when 'true' ->
	      %% Line 18505
	      ( 'dec_transactionID'/3
		-| [{'id',{0,0,'-getdec_Authenticated/1-fun-8-'}}] )
	  %% Line 18506
	  <_cor9> when 'true' ->
	      %% Line 18507
	      ( fun (_cor4,_cor3,_cor2) ->
		    %% Line 18508
		    case _cor3 of
		      %% Line 18509
		      <Bin>
			  when call 'erlang':'is_binary'
				(_cor3) ->
			  %% Line 18510
			  Bin
		      %% Line 18511
		      <_cor11> when 'true' ->
			  %% Line 18512
			  apply 'ber_encode'/1
			      (_cor3)
		    end
		-| [{'id',{0,0,'-getdec_Authenticated/1-fun-9-'}}] )
	end
'getenc_Contents'/1 =
    %% Line 18523
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,113549,1,7,1}> when 'true' ->
	      %% Line 18524
	      ( fun (_cor4,_cor3,_cor2) ->
		    %% Line 18525
		    case _cor4 of
		      %% Line 18526
		      <'Type'> when 'true' ->
			  %% Line 18527
			  apply 'enc_Data'/1
			      (_cor3)
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor1})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getenc_Contents/1-fun-0-'}}] )
	  %% Line 18530
	  <{1,2,840,113549,1,7,2}> when 'true' ->
	      %% Line 18531
	      ( fun (_cor11,_cor10,_cor9) ->
		    %% Line 18532
		    case _cor11 of
		      %% Line 18533
		      <'Type'> when 'true' ->
			  %% Line 18534
			  apply 'enc_SignedData'/1
			      (_cor10)
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor8})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getenc_Contents/1-fun-1-'}}] )
	  %% Line 18537
	  <{1,2,840,113549,1,7,3}> when 'true' ->
	      %% Line 18538
	      ( fun (_cor18,_cor17,_cor16) ->
		    %% Line 18539
		    case _cor18 of
		      %% Line 18540
		      <'Type'> when 'true' ->
			  %% Line 18541
			  apply 'enc_EnvelopedData'/1
			      (_cor17)
		      ( <_cor15> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor15})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getenc_Contents/1-fun-2-'}}] )
	  %% Line 18544
	  <{1,2,840,113549,1,7,4}> when 'true' ->
	      %% Line 18545
	      ( fun (_cor25,_cor24,_cor23) ->
		    %% Line 18546
		    case _cor25 of
		      %% Line 18547
		      <'Type'> when 'true' ->
			  %% Line 18548
			  apply 'enc_SignedAndEnvelopedData'/1
			      (_cor24)
		      ( <_cor22> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor22})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getenc_Contents/1-fun-3-'}}] )
	  %% Line 18551
	  <{1,2,840,113549,1,7,5}> when 'true' ->
	      %% Line 18552
	      ( fun (_cor32,_cor31,_cor30) ->
		    %% Line 18553
		    case _cor32 of
		      %% Line 18554
		      <'Type'> when 'true' ->
			  %% Line 18555
			  apply 'enc_DigestedData'/1
			      (_cor31)
		      ( <_cor29> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor29})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getenc_Contents/1-fun-4-'}}] )
	  %% Line 18558
	  <{1,2,840,113549,1,7,6}> when 'true' ->
	      %% Line 18559
	      ( fun (_cor39,_cor38,_cor37) ->
		    %% Line 18560
		    case _cor39 of
		      %% Line 18561
		      <'Type'> when 'true' ->
			  %% Line 18562
			  apply 'enc_EncryptedData'/1
			      (_cor38)
		      ( <_cor36> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor36})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getenc_Contents/1-fun-5-'}}] )
	  %% Line 18565
	  <_cor54> when 'true' ->
	      %% Line 18566
	      ( fun (_cor49,_cor48,_cor47) ->
		    %% Line 18567
		    case _cor48 of
		      %% Line 18568
		      <{'asn1_OPENTYPE',Bin}>
			  when call 'erlang':'is_binary'
				(Bin) ->
			  let <_cor43> =
			      %% Line 18569
			      call 'erlang':'byte_size'
				  (Bin)
			  in  %% Line 18569
			      {Bin,_cor43}
		      %% Line 18570
		      <Bin>
			  when call 'erlang':'is_binary'
				(_cor48) ->
			  let <_cor44> =
			      %% Line 18571
			      call 'erlang':'byte_size'
				  (Bin)
			  in  %% Line 18571
			      {Bin,_cor44}
		      %% Line 18572
		      <_cor56> when 'true' ->
			  let <_cor45> =
			      %% Line 18573
			      call 'erlang':'length'
				  (_cor48)
			  in  %% Line 18573
			      {_cor48,_cor45}
		    end
		-| [{'id',{0,0,'-getenc_Contents/1-fun-6-'}}] )
	end
'getdec_Contents'/1 =
    %% Line 18577
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,113549,1,7,1}> when 'true' ->
	      %% Line 18578
	      ( fun (_cor4,_cor3,_cor2) ->
		    %% Line 18579
		    case _cor4 of
		      %% Line 18580
		      <'Type'> when 'true' ->
			  %% Line 18581
			  apply 'dec_Data'/1
			      (_cor3)
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor1})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getdec_Contents/1-fun-0-'}}] )
	  %% Line 18584
	  <{1,2,840,113549,1,7,2}> when 'true' ->
	      %% Line 18585
	      ( fun (_cor11,_cor10,_cor9) ->
		    %% Line 18586
		    case _cor11 of
		      %% Line 18587
		      <'Type'> when 'true' ->
			  %% Line 18588
			  apply 'dec_SignedData'/1
			      (_cor10)
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor8})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getdec_Contents/1-fun-1-'}}] )
	  %% Line 18591
	  <{1,2,840,113549,1,7,3}> when 'true' ->
	      %% Line 18592
	      ( fun (_cor18,_cor17,_cor16) ->
		    %% Line 18593
		    case _cor18 of
		      %% Line 18594
		      <'Type'> when 'true' ->
			  %% Line 18595
			  apply 'dec_EnvelopedData'/1
			      (_cor17)
		      ( <_cor15> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor15})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getdec_Contents/1-fun-2-'}}] )
	  %% Line 18598
	  <{1,2,840,113549,1,7,4}> when 'true' ->
	      %% Line 18599
	      ( fun (_cor25,_cor24,_cor23) ->
		    %% Line 18600
		    case _cor25 of
		      %% Line 18601
		      <'Type'> when 'true' ->
			  %% Line 18602
			  apply 'dec_SignedAndEnvelopedData'/1
			      (_cor24)
		      ( <_cor22> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor22})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getdec_Contents/1-fun-3-'}}] )
	  %% Line 18605
	  <{1,2,840,113549,1,7,5}> when 'true' ->
	      %% Line 18606
	      ( fun (_cor32,_cor31,_cor30) ->
		    %% Line 18607
		    case _cor32 of
		      %% Line 18608
		      <'Type'> when 'true' ->
			  %% Line 18609
			  apply 'dec_DigestedData'/1
			      (_cor31)
		      ( <_cor29> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor29})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getdec_Contents/1-fun-4-'}}] )
	  %% Line 18612
	  <{1,2,840,113549,1,7,6}> when 'true' ->
	      %% Line 18613
	      ( fun (_cor39,_cor38,_cor37) ->
		    %% Line 18614
		    case _cor39 of
		      %% Line 18615
		      <'Type'> when 'true' ->
			  %% Line 18616
			  apply 'dec_EncryptedData'/1
			      (_cor38)
		      ( <_cor36> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor36})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-getdec_Contents/1-fun-5-'}}] )
	  %% Line 18619
	  <_cor51> when 'true' ->
	      %% Line 18620
	      ( fun (_cor46,_cor45,_cor44) ->
		    %% Line 18621
		    case _cor45 of
		      %% Line 18622
		      <Bin>
			  when call 'erlang':'is_binary'
				(_cor45) ->
			  %% Line 18623
			  Bin
		      %% Line 18624
		      <_cor53> when 'true' ->
			  %% Line 18625
			  apply 'ber_encode'/1
			      (_cor45)
		    end
		-| [{'id',{0,0,'-getdec_Contents/1-fun-6-'}}] )
	end
'getenc_KeyEncryptionAlgorithms'/1 =
    %% Line 18636
    fun (_cor0) ->
	%% Line 18637
	( fun (_cor7,_cor6,_cor5) ->
	      %% Line 18638
	      case _cor6 of
		%% Line 18639
		<{'asn1_OPENTYPE',Bin}>
		    when call 'erlang':'is_binary'
			  (Bin) ->
		    let <_cor1> =
			%% Line 18640
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 18640
			{Bin,_cor1}
		%% Line 18641
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor6) ->
		    let <_cor2> =
			%% Line 18642
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 18642
			{Bin,_cor2}
		%% Line 18643
		<_cor14> when 'true' ->
		    let <_cor3> =
			%% Line 18644
			call 'erlang':'length'
			    (_cor6)
		    in  %% Line 18644
			{_cor6,_cor3}
	      end
	  -| [{'id',{0,0,'-getenc_KeyEncryptionAlgorithms/1-fun-0-'}}] )
'getdec_KeyEncryptionAlgorithms'/1 =
    %% Line 18648
    fun (_cor0) ->
	%% Line 18649
	( fun (_cor4,_cor3,_cor2) ->
	      %% Line 18650
	      case _cor3 of
		%% Line 18651
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor3) ->
		    %% Line 18652
		    Bin
		%% Line 18653
		<_cor11> when 'true' ->
		    %% Line 18654
		    apply 'ber_encode'/1
			(_cor3)
	      end
	  -| [{'id',{0,0,'-getdec_KeyEncryptionAlgorithms/1-fun-0-'}}] )
'getenc_DigestEncryptionAlgorithms'/1 =
    %% Line 18665
    fun (_cor0) ->
	%% Line 18666
	( fun (_cor7,_cor6,_cor5) ->
	      %% Line 18667
	      case _cor6 of
		%% Line 18668
		<{'asn1_OPENTYPE',Bin}>
		    when call 'erlang':'is_binary'
			  (Bin) ->
		    let <_cor1> =
			%% Line 18669
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 18669
			{Bin,_cor1}
		%% Line 18670
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor6) ->
		    let <_cor2> =
			%% Line 18671
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 18671
			{Bin,_cor2}
		%% Line 18672
		<_cor14> when 'true' ->
		    let <_cor3> =
			%% Line 18673
			call 'erlang':'length'
			    (_cor6)
		    in  %% Line 18673
			{_cor6,_cor3}
	      end
	  -| [{'id',{0,0,'-getenc_DigestEncryptionAlgorithms/1-fun-0-'}}] )
'getdec_DigestEncryptionAlgorithms'/1 =
    %% Line 18677
    fun (_cor0) ->
	%% Line 18678
	( fun (_cor4,_cor3,_cor2) ->
	      %% Line 18679
	      case _cor3 of
		%% Line 18680
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor3) ->
		    %% Line 18681
		    Bin
		%% Line 18682
		<_cor11> when 'true' ->
		    %% Line 18683
		    apply 'ber_encode'/1
			(_cor3)
	      end
	  -| [{'id',{0,0,'-getdec_DigestEncryptionAlgorithms/1-fun-0-'}}] )
'getenc_DigestAlgorithms'/1 =
    %% Line 18694
    fun (_cor0) ->
	%% Line 18695
	( fun (_cor7,_cor6,_cor5) ->
	      %% Line 18696
	      case _cor6 of
		%% Line 18697
		<{'asn1_OPENTYPE',Bin}>
		    when call 'erlang':'is_binary'
			  (Bin) ->
		    let <_cor1> =
			%% Line 18698
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 18698
			{Bin,_cor1}
		%% Line 18699
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor6) ->
		    let <_cor2> =
			%% Line 18700
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 18700
			{Bin,_cor2}
		%% Line 18701
		<_cor14> when 'true' ->
		    let <_cor3> =
			%% Line 18702
			call 'erlang':'length'
			    (_cor6)
		    in  %% Line 18702
			{_cor6,_cor3}
	      end
	  -| [{'id',{0,0,'-getenc_DigestAlgorithms/1-fun-0-'}}] )
'getdec_DigestAlgorithms'/1 =
    %% Line 18706
    fun (_cor0) ->
	%% Line 18707
	( fun (_cor4,_cor3,_cor2) ->
	      %% Line 18708
	      case _cor3 of
		%% Line 18709
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor3) ->
		    %% Line 18710
		    Bin
		%% Line 18711
		<_cor11> when 'true' ->
		    %% Line 18712
		    apply 'ber_encode'/1
			(_cor3)
	      end
	  -| [{'id',{0,0,'-getdec_DigestAlgorithms/1-fun-0-'}}] )
'getenc_ContentEncryptionAlgorithms'/1 =
    %% Line 18723
    fun (_cor0) ->
	%% Line 18724
	( fun (_cor7,_cor6,_cor5) ->
	      %% Line 18725
	      case _cor6 of
		%% Line 18726
		<{'asn1_OPENTYPE',Bin}>
		    when call 'erlang':'is_binary'
			  (Bin) ->
		    let <_cor1> =
			%% Line 18727
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 18727
			{Bin,_cor1}
		%% Line 18728
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor6) ->
		    let <_cor2> =
			%% Line 18729
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 18729
			{Bin,_cor2}
		%% Line 18730
		<_cor14> when 'true' ->
		    let <_cor3> =
			%% Line 18731
			call 'erlang':'length'
			    (_cor6)
		    in  %% Line 18731
			{_cor6,_cor3}
	      end
	  -| [{'id',{0,0,'-getenc_ContentEncryptionAlgorithms/1-fun-0-'}}] )
'getdec_ContentEncryptionAlgorithms'/1 =
    %% Line 18735
    fun (_cor0) ->
	%% Line 18736
	( fun (_cor4,_cor3,_cor2) ->
	      %% Line 18737
	      case _cor3 of
		%% Line 18738
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor3) ->
		    %% Line 18739
		    Bin
		%% Line 18740
		<_cor11> when 'true' ->
		    %% Line 18741
		    apply 'ber_encode'/1
			(_cor3)
	      end
	  -| [{'id',{0,0,'-getdec_ContentEncryptionAlgorithms/1-fun-0-'}}] )
'getenc_SignatureAlgorithms'/1 =
    %% Line 18752
    fun (_cor0) ->
	%% Line 18753
	( fun (_cor7,_cor6,_cor5) ->
	      %% Line 18754
	      case _cor6 of
		%% Line 18755
		<{'asn1_OPENTYPE',Bin}>
		    when call 'erlang':'is_binary'
			  (Bin) ->
		    let <_cor1> =
			%% Line 18756
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 18756
			{Bin,_cor1}
		%% Line 18757
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor6) ->
		    let <_cor2> =
			%% Line 18758
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 18758
			{Bin,_cor2}
		%% Line 18759
		<_cor14> when 'true' ->
		    let <_cor3> =
			%% Line 18760
			call 'erlang':'length'
			    (_cor6)
		    in  %% Line 18760
			{_cor6,_cor3}
	      end
	  -| [{'id',{0,0,'-getenc_SignatureAlgorithms/1-fun-0-'}}] )
'getdec_SignatureAlgorithms'/1 =
    %% Line 18764
    fun (_cor0) ->
	%% Line 18765
	( fun (_cor4,_cor3,_cor2) ->
	      %% Line 18766
	      case _cor3 of
		%% Line 18767
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor3) ->
		    %% Line 18768
		    Bin
		%% Line 18769
		<_cor11> when 'true' ->
		    %% Line 18770
		    apply 'ber_encode'/1
			(_cor3)
	      end
	  -| [{'id',{0,0,'-getdec_SignatureAlgorithms/1-fun-0-'}}] )
'getenc_CRIAttributes'/1 =
    %% Line 18781
    fun (_cor0) ->
	%% Line 18782
	( fun (_cor7,_cor6,_cor5) ->
	      %% Line 18783
	      case _cor6 of
		%% Line 18784
		<{'asn1_OPENTYPE',Bin}>
		    when call 'erlang':'is_binary'
			  (Bin) ->
		    let <_cor1> =
			%% Line 18785
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 18785
			{Bin,_cor1}
		%% Line 18786
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor6) ->
		    let <_cor2> =
			%% Line 18787
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 18787
			{Bin,_cor2}
		%% Line 18788
		<_cor14> when 'true' ->
		    let <_cor3> =
			%% Line 18789
			call 'erlang':'length'
			    (_cor6)
		    in  %% Line 18789
			{_cor6,_cor3}
	      end
	  -| [{'id',{0,0,'-getenc_CRIAttributes/1-fun-0-'}}] )
'getdec_CRIAttributes'/1 =
    %% Line 18793
    fun (_cor0) ->
	%% Line 18794
	( fun (_cor4,_cor3,_cor2) ->
	      %% Line 18795
	      case _cor3 of
		%% Line 18796
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor3) ->
		    %% Line 18797
		    Bin
		%% Line 18798
		<_cor11> when 'true' ->
		    %% Line 18799
		    apply 'ber_encode'/1
			(_cor3)
	      end
	  -| [{'id',{0,0,'-getdec_CRIAttributes/1-fun-0-'}}] )
'getenc_PKInfoAlgorithms'/1 =
    %% Line 18810
    fun (_cor0) ->
	%% Line 18811
	( fun (_cor7,_cor6,_cor5) ->
	      %% Line 18812
	      case _cor6 of
		%% Line 18813
		<{'asn1_OPENTYPE',Bin}>
		    when call 'erlang':'is_binary'
			  (Bin) ->
		    let <_cor1> =
			%% Line 18814
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 18814
			{Bin,_cor1}
		%% Line 18815
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor6) ->
		    let <_cor2> =
			%% Line 18816
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 18816
			{Bin,_cor2}
		%% Line 18817
		<_cor14> when 'true' ->
		    let <_cor3> =
			%% Line 18818
			call 'erlang':'length'
			    (_cor6)
		    in  %% Line 18818
			{_cor6,_cor3}
	      end
	  -| [{'id',{0,0,'-getenc_PKInfoAlgorithms/1-fun-0-'}}] )
'getdec_PKInfoAlgorithms'/1 =
    %% Line 18822
    fun (_cor0) ->
	%% Line 18823
	( fun (_cor4,_cor3,_cor2) ->
	      %% Line 18824
	      case _cor3 of
		%% Line 18825
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor3) ->
		    %% Line 18826
		    Bin
		%% Line 18827
		<_cor11> when 'true' ->
		    %% Line 18828
		    apply 'ber_encode'/1
			(_cor3)
	      end
	  -| [{'id',{0,0,'-getdec_PKInfoAlgorithms/1-fun-0-'}}] )
'getenc_SupportedExtensions'/1 =
    %% Line 18839
    fun (_cor0) ->
	case _cor0 of
	  <{1,3,6,1,5,5,7,1,1}> when 'true' ->
	      %% Line 18840
	      ( 'enc_authorityInfoAccess'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensions/1-fun-0-'}}] )
	  %% Line 18841
	  <{2,5,29,35}> when 'true' ->
	      %% Line 18842
	      ( 'enc_authorityKeyIdentifier'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensions/1-fun-1-'}}] )
	  %% Line 18843
	  <{2,5,29,19}> when 'true' ->
	      %% Line 18844
	      ( 'enc_basicConstraints'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensions/1-fun-2-'}}] )
	  %% Line 18845
	  <{2,5,29,31}> when 'true' ->
	      %% Line 18846
	      ( 'enc_cRLDistributionPoints'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensions/1-fun-3-'}}] )
	  %% Line 18847
	  <{2,5,29,20}> when 'true' ->
	      %% Line 18848
	      ( 'enc_cRLNumber'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensions/1-fun-4-'}}] )
	  %% Line 18849
	  <{2,5,29,21}> when 'true' ->
	      %% Line 18850
	      ( 'enc_cRLReasons'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensions/1-fun-5-'}}] )
	  %% Line 18851
	  <{2,5,29,29}> when 'true' ->
	      %% Line 18852
	      ( 'enc_certificateIssuer'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensions/1-fun-6-'}}] )
	  %% Line 18853
	  <{2,5,29,32}> when 'true' ->
	      %% Line 18854
	      ( 'enc_certificatePolicies'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensions/1-fun-7-'}}] )
	  %% Line 18855
	  <{2,5,29,27}> when 'true' ->
	      %% Line 18856
	      ( 'enc_deltaCRLIndicator'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensions/1-fun-8-'}}] )
	  %% Line 18857
	  <{2,5,29,37}> when 'true' ->
	      %% Line 18858
	      ( 'enc_extKeyUsage'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensions/1-fun-9-'}}] )
	  %% Line 18859
	  <{2,5,29,46}> when 'true' ->
	      %% Line 18860
	      ( 'enc_freshestCRL'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensions/1-fun-10-'}}] )
	  %% Line 18861
	  <{2,5,29,23}> when 'true' ->
	      %% Line 18862
	      ( 'enc_holdInstructionCode'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensions/1-fun-11-'}}] )
	  %% Line 18863
	  <{2,5,29,54}> when 'true' ->
	      %% Line 18864
	      ( 'enc_inhibitAnyPolicy'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensions/1-fun-12-'}}] )
	  %% Line 18865
	  <{2,5,29,24}> when 'true' ->
	      %% Line 18866
	      ( 'enc_invalidityDate'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensions/1-fun-13-'}}] )
	  %% Line 18867
	  <{2,5,29,18}> when 'true' ->
	      %% Line 18868
	      ( 'enc_issuerAltName'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensions/1-fun-14-'}}] )
	  %% Line 18869
	  <{2,5,29,28}> when 'true' ->
	      %% Line 18870
	      ( 'enc_issuingDistributionPoint'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensions/1-fun-15-'}}] )
	  %% Line 18871
	  <{2,5,29,15}> when 'true' ->
	      %% Line 18872
	      ( 'enc_keyUsage'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensions/1-fun-16-'}}] )
	  %% Line 18873
	  <{2,5,29,30}> when 'true' ->
	      %% Line 18874
	      ( 'enc_nameConstraints'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensions/1-fun-17-'}}] )
	  %% Line 18875
	  <{2,5,29,36}> when 'true' ->
	      %% Line 18876
	      ( 'enc_policyConstraints'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensions/1-fun-18-'}}] )
	  %% Line 18877
	  <{2,5,29,33}> when 'true' ->
	      %% Line 18878
	      ( 'enc_policyMappings'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensions/1-fun-19-'}}] )
	  %% Line 18879
	  <{2,5,29,16}> when 'true' ->
	      %% Line 18880
	      ( 'enc_privateKeyUsagePeriod'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensions/1-fun-20-'}}] )
	  %% Line 18881
	  <{2,5,29,17}> when 'true' ->
	      %% Line 18882
	      ( 'enc_subjectAltName'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensions/1-fun-21-'}}] )
	  %% Line 18883
	  <{2,5,29,9}> when 'true' ->
	      %% Line 18884
	      ( 'enc_subjectDirectoryAttributes'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensions/1-fun-22-'}}] )
	  %% Line 18885
	  <{1,3,6,1,5,5,7,1,11}> when 'true' ->
	      %% Line 18886
	      ( 'enc_subjectInfoAccess'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensions/1-fun-23-'}}] )
	  %% Line 18887
	  <{2,5,29,14}> when 'true' ->
	      %% Line 18888
	      ( 'enc_subjectKeyIdentifier'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensions/1-fun-24-'}}] )
	  %% Line 18889
	  <ErrV> when 'true' ->
	      %% Line 18890
	      ( fun (_cor3,_cor2,_cor1) ->
		    call 'erlang':'exit'
			({'Type not compatible with table constraint',{'component',_cor3},{'value',_cor2},{'unique_name_and_value','id',ErrV}})
		-| [{'id',{0,0,'-getenc_SupportedExtensions/1-fun-25-'}}] )
	end
'getdec_SupportedExtensions'/1 =
    %% Line 18892
    fun (_cor0) ->
	case _cor0 of
	  <{1,3,6,1,5,5,7,1,1}> when 'true' ->
	      %% Line 18893
	      ( 'dec_authorityInfoAccess'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensions/1-fun-0-'}}] )
	  %% Line 18894
	  <{2,5,29,35}> when 'true' ->
	      %% Line 18895
	      ( 'dec_authorityKeyIdentifier'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensions/1-fun-1-'}}] )
	  %% Line 18896
	  <{2,5,29,19}> when 'true' ->
	      %% Line 18897
	      ( 'dec_basicConstraints'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensions/1-fun-2-'}}] )
	  %% Line 18898
	  <{2,5,29,31}> when 'true' ->
	      %% Line 18899
	      ( 'dec_cRLDistributionPoints'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensions/1-fun-3-'}}] )
	  %% Line 18900
	  <{2,5,29,20}> when 'true' ->
	      %% Line 18901
	      ( 'dec_cRLNumber'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensions/1-fun-4-'}}] )
	  %% Line 18902
	  <{2,5,29,21}> when 'true' ->
	      %% Line 18903
	      ( 'dec_cRLReasons'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensions/1-fun-5-'}}] )
	  %% Line 18904
	  <{2,5,29,29}> when 'true' ->
	      %% Line 18905
	      ( 'dec_certificateIssuer'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensions/1-fun-6-'}}] )
	  %% Line 18906
	  <{2,5,29,32}> when 'true' ->
	      %% Line 18907
	      ( 'dec_certificatePolicies'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensions/1-fun-7-'}}] )
	  %% Line 18908
	  <{2,5,29,27}> when 'true' ->
	      %% Line 18909
	      ( 'dec_deltaCRLIndicator'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensions/1-fun-8-'}}] )
	  %% Line 18910
	  <{2,5,29,37}> when 'true' ->
	      %% Line 18911
	      ( 'dec_extKeyUsage'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensions/1-fun-9-'}}] )
	  %% Line 18912
	  <{2,5,29,46}> when 'true' ->
	      %% Line 18913
	      ( 'dec_freshestCRL'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensions/1-fun-10-'}}] )
	  %% Line 18914
	  <{2,5,29,23}> when 'true' ->
	      %% Line 18915
	      ( 'dec_holdInstructionCode'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensions/1-fun-11-'}}] )
	  %% Line 18916
	  <{2,5,29,54}> when 'true' ->
	      %% Line 18917
	      ( 'dec_inhibitAnyPolicy'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensions/1-fun-12-'}}] )
	  %% Line 18918
	  <{2,5,29,24}> when 'true' ->
	      %% Line 18919
	      ( 'dec_invalidityDate'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensions/1-fun-13-'}}] )
	  %% Line 18920
	  <{2,5,29,18}> when 'true' ->
	      %% Line 18921
	      ( 'dec_issuerAltName'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensions/1-fun-14-'}}] )
	  %% Line 18922
	  <{2,5,29,28}> when 'true' ->
	      %% Line 18923
	      ( 'dec_issuingDistributionPoint'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensions/1-fun-15-'}}] )
	  %% Line 18924
	  <{2,5,29,15}> when 'true' ->
	      %% Line 18925
	      ( 'dec_keyUsage'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensions/1-fun-16-'}}] )
	  %% Line 18926
	  <{2,5,29,30}> when 'true' ->
	      %% Line 18927
	      ( 'dec_nameConstraints'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensions/1-fun-17-'}}] )
	  %% Line 18928
	  <{2,5,29,36}> when 'true' ->
	      %% Line 18929
	      ( 'dec_policyConstraints'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensions/1-fun-18-'}}] )
	  %% Line 18930
	  <{2,5,29,33}> when 'true' ->
	      %% Line 18931
	      ( 'dec_policyMappings'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensions/1-fun-19-'}}] )
	  %% Line 18932
	  <{2,5,29,16}> when 'true' ->
	      %% Line 18933
	      ( 'dec_privateKeyUsagePeriod'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensions/1-fun-20-'}}] )
	  %% Line 18934
	  <{2,5,29,17}> when 'true' ->
	      %% Line 18935
	      ( 'dec_subjectAltName'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensions/1-fun-21-'}}] )
	  %% Line 18936
	  <{2,5,29,9}> when 'true' ->
	      %% Line 18937
	      ( 'dec_subjectDirectoryAttributes'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensions/1-fun-22-'}}] )
	  %% Line 18938
	  <{1,3,6,1,5,5,7,1,11}> when 'true' ->
	      %% Line 18939
	      ( 'dec_subjectInfoAccess'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensions/1-fun-23-'}}] )
	  %% Line 18940
	  <{2,5,29,14}> when 'true' ->
	      %% Line 18941
	      ( 'dec_subjectKeyIdentifier'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensions/1-fun-24-'}}] )
	  %% Line 18942
	  <ErrV> when 'true' ->
	      %% Line 18943
	      ( fun (_cor3,_cor2,_cor1) ->
		    call 'erlang':'exit'
			({{'component',_cor3},{'value',_cor2},{'unique_name_and_value','id',ErrV}})
		-| [{'id',{0,0,'-getdec_SupportedExtensions/1-fun-25-'}}] )
	end
'getenc_SupportedExtensionAttributes'/1 =
    %% Line 18952
    fun (_cor0) ->
	case _cor0 of
	  <1> when 'true' ->
	      %% Line 18953
	      ( 'enc_x400-common-name'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensionAttributes/1-fun-0-'}}] )
	  %% Line 18954
	  <22> when 'true' ->
	      %% Line 18955
	      ( 'enc_x400-extended-network-address'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensionAttributes/1-fun-1-'}}] )
	  %% Line 18956
	  <12> when 'true' ->
	      %% Line 18957
	      ( 'enc_x400-extension-OR-address-components'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensionAttributes/1-fun-2-'}}] )
	  %% Line 18958
	  <15> when 'true' ->
	      %% Line 18959
	      ( 'enc_x400-extension-physical-delivery-address-components'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensionAttributes/1-fun-3-'}}] )
	  %% Line 18960
	  <21> when 'true' ->
	      %% Line 18961
	      ( 'enc_x400-local-postal-attributes'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensionAttributes/1-fun-4-'}}] )
	  %% Line 18962
	  <7> when 'true' ->
	      %% Line 18963
	      ( 'enc_x400-pds-name'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensionAttributes/1-fun-5-'}}] )
	  %% Line 18964
	  <8> when 'true' ->
	      %% Line 18965
	      ( 'enc_x400-physical-delivery-country-name'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensionAttributes/1-fun-6-'}}] )
	  %% Line 18966
	  <10> when 'true' ->
	      %% Line 18967
	      ( 'enc_x400-physical-delivery-office-name'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensionAttributes/1-fun-7-'}}] )
	  %% Line 18968
	  <11> when 'true' ->
	      %% Line 18969
	      ( 'enc_x400-physical-delivery-office-number'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensionAttributes/1-fun-8-'}}] )
	  %% Line 18970
	  <14> when 'true' ->
	      %% Line 18971
	      ( 'enc_x400-physical-delivery-organization-name'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensionAttributes/1-fun-9-'}}] )
	  %% Line 18972
	  <13> when 'true' ->
	      %% Line 18973
	      ( 'enc_x400-physical-delivery-personal-name'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensionAttributes/1-fun-10-'}}] )
	  %% Line 18974
	  <18> when 'true' ->
	      %% Line 18975
	      ( 'enc_x400-post-office-box-address'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensionAttributes/1-fun-11-'}}] )
	  %% Line 18976
	  <9> when 'true' ->
	      %% Line 18977
	      ( 'enc_x400-postal-code'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensionAttributes/1-fun-12-'}}] )
	  %% Line 18978
	  <19> when 'true' ->
	      %% Line 18979
	      ( 'enc_x400-poste-restante-address'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensionAttributes/1-fun-13-'}}] )
	  %% Line 18980
	  <17> when 'true' ->
	      %% Line 18981
	      ( 'enc_x400-street-address'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensionAttributes/1-fun-14-'}}] )
	  %% Line 18982
	  <2> when 'true' ->
	      %% Line 18983
	      ( 'enc_x400-teletex-common-name'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensionAttributes/1-fun-15-'}}] )
	  %% Line 18984
	  <6> when 'true' ->
	      %% Line 18985
	      ( 'enc_x400-teletex-domain-defined-attributes'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensionAttributes/1-fun-16-'}}] )
	  %% Line 18986
	  <4> when 'true' ->
	      %% Line 18987
	      ( 'enc_x400-teletex-personal-name'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensionAttributes/1-fun-17-'}}] )
	  %% Line 18988
	  <23> when 'true' ->
	      %% Line 18989
	      ( 'enc_x400-terminal-type'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensionAttributes/1-fun-18-'}}] )
	  %% Line 18990
	  <16> when 'true' ->
	      %% Line 18991
	      ( 'enc_x400-unformatted-postal-address'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensionAttributes/1-fun-19-'}}] )
	  %% Line 18992
	  <20> when 'true' ->
	      %% Line 18993
	      ( 'enc_x400-unique-postal-name'/3
		-| [{'id',{0,0,'-getenc_SupportedExtensionAttributes/1-fun-20-'}}] )
	  %% Line 18994
	  <ErrV> when 'true' ->
	      %% Line 18995
	      ( fun (_cor3,_cor2,_cor1) ->
		    call 'erlang':'exit'
			({'Type not compatible with table constraint',{'component',_cor3},{'value',_cor2},{'unique_name_and_value','id',ErrV}})
		-| [{'id',{0,0,'-getenc_SupportedExtensionAttributes/1-fun-21-'}}] )
	end
'getdec_SupportedExtensionAttributes'/1 =
    %% Line 18997
    fun (_cor0) ->
	case _cor0 of
	  <1> when 'true' ->
	      %% Line 18998
	      ( 'dec_x400-common-name'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensionAttributes/1-fun-0-'}}] )
	  %% Line 18999
	  <22> when 'true' ->
	      %% Line 19000
	      ( 'dec_x400-extended-network-address'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensionAttributes/1-fun-1-'}}] )
	  %% Line 19001
	  <12> when 'true' ->
	      %% Line 19002
	      ( 'dec_x400-extension-OR-address-components'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensionAttributes/1-fun-2-'}}] )
	  %% Line 19003
	  <15> when 'true' ->
	      %% Line 19004
	      ( 'dec_x400-extension-physical-delivery-address-components'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensionAttributes/1-fun-3-'}}] )
	  %% Line 19005
	  <21> when 'true' ->
	      %% Line 19006
	      ( 'dec_x400-local-postal-attributes'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensionAttributes/1-fun-4-'}}] )
	  %% Line 19007
	  <7> when 'true' ->
	      %% Line 19008
	      ( 'dec_x400-pds-name'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensionAttributes/1-fun-5-'}}] )
	  %% Line 19009
	  <8> when 'true' ->
	      %% Line 19010
	      ( 'dec_x400-physical-delivery-country-name'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensionAttributes/1-fun-6-'}}] )
	  %% Line 19011
	  <10> when 'true' ->
	      %% Line 19012
	      ( 'dec_x400-physical-delivery-office-name'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensionAttributes/1-fun-7-'}}] )
	  %% Line 19013
	  <11> when 'true' ->
	      %% Line 19014
	      ( 'dec_x400-physical-delivery-office-number'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensionAttributes/1-fun-8-'}}] )
	  %% Line 19015
	  <14> when 'true' ->
	      %% Line 19016
	      ( 'dec_x400-physical-delivery-organization-name'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensionAttributes/1-fun-9-'}}] )
	  %% Line 19017
	  <13> when 'true' ->
	      %% Line 19018
	      ( 'dec_x400-physical-delivery-personal-name'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensionAttributes/1-fun-10-'}}] )
	  %% Line 19019
	  <18> when 'true' ->
	      %% Line 19020
	      ( 'dec_x400-post-office-box-address'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensionAttributes/1-fun-11-'}}] )
	  %% Line 19021
	  <9> when 'true' ->
	      %% Line 19022
	      ( 'dec_x400-postal-code'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensionAttributes/1-fun-12-'}}] )
	  %% Line 19023
	  <19> when 'true' ->
	      %% Line 19024
	      ( 'dec_x400-poste-restante-address'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensionAttributes/1-fun-13-'}}] )
	  %% Line 19025
	  <17> when 'true' ->
	      %% Line 19026
	      ( 'dec_x400-street-address'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensionAttributes/1-fun-14-'}}] )
	  %% Line 19027
	  <2> when 'true' ->
	      %% Line 19028
	      ( 'dec_x400-teletex-common-name'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensionAttributes/1-fun-15-'}}] )
	  %% Line 19029
	  <6> when 'true' ->
	      %% Line 19030
	      ( 'dec_x400-teletex-domain-defined-attributes'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensionAttributes/1-fun-16-'}}] )
	  %% Line 19031
	  <4> when 'true' ->
	      %% Line 19032
	      ( 'dec_x400-teletex-personal-name'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensionAttributes/1-fun-17-'}}] )
	  %% Line 19033
	  <23> when 'true' ->
	      %% Line 19034
	      ( 'dec_x400-terminal-type'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensionAttributes/1-fun-18-'}}] )
	  %% Line 19035
	  <16> when 'true' ->
	      %% Line 19036
	      ( 'dec_x400-unformatted-postal-address'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensionAttributes/1-fun-19-'}}] )
	  %% Line 19037
	  <20> when 'true' ->
	      %% Line 19038
	      ( 'dec_x400-unique-postal-name'/3
		-| [{'id',{0,0,'-getdec_SupportedExtensionAttributes/1-fun-20-'}}] )
	  %% Line 19039
	  <ErrV> when 'true' ->
	      %% Line 19040
	      ( fun (_cor3,_cor2,_cor1) ->
		    call 'erlang':'exit'
			({{'component',_cor3},{'value',_cor2},{'unique_name_and_value','id',ErrV}})
		-| [{'id',{0,0,'-getdec_SupportedExtensionAttributes/1-fun-21-'}}] )
	end
'getenc_SupportedCharacteristicTwos'/1 =
    %% Line 19049
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,10045,1,2,3,1}> when 'true' ->
	      %% Line 19050
	      ( 'enc_gn-basis'/3
		-| [{'id',{0,0,'-getenc_SupportedCharacteristicTwos/1-fun-0-'}}] )
	  %% Line 19051
	  <{1,2,840,10045,1,2,3,3}> when 'true' ->
	      %% Line 19052
	      ( 'enc_pp-basis'/3
		-| [{'id',{0,0,'-getenc_SupportedCharacteristicTwos/1-fun-1-'}}] )
	  %% Line 19053
	  <{1,2,840,10045,1,2,3,2}> when 'true' ->
	      %% Line 19054
	      ( 'enc_tp-basis'/3
		-| [{'id',{0,0,'-getenc_SupportedCharacteristicTwos/1-fun-2-'}}] )
	  %% Line 19055
	  <ErrV> when 'true' ->
	      %% Line 19056
	      ( fun (_cor3,_cor2,_cor1) ->
		    call 'erlang':'exit'
			({'Type not compatible with table constraint',{'component',_cor3},{'value',_cor2},{'unique_name_and_value','id',ErrV}})
		-| [{'id',{0,0,'-getenc_SupportedCharacteristicTwos/1-fun-3-'}}] )
	end
'getdec_SupportedCharacteristicTwos'/1 =
    %% Line 19058
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,10045,1,2,3,1}> when 'true' ->
	      %% Line 19059
	      ( 'dec_gn-basis'/3
		-| [{'id',{0,0,'-getdec_SupportedCharacteristicTwos/1-fun-0-'}}] )
	  %% Line 19060
	  <{1,2,840,10045,1,2,3,3}> when 'true' ->
	      %% Line 19061
	      ( 'dec_pp-basis'/3
		-| [{'id',{0,0,'-getdec_SupportedCharacteristicTwos/1-fun-1-'}}] )
	  %% Line 19062
	  <{1,2,840,10045,1,2,3,2}> when 'true' ->
	      %% Line 19063
	      ( 'dec_tp-basis'/3
		-| [{'id',{0,0,'-getdec_SupportedCharacteristicTwos/1-fun-2-'}}] )
	  %% Line 19064
	  <ErrV> when 'true' ->
	      %% Line 19065
	      ( fun (_cor3,_cor2,_cor1) ->
		    call 'erlang':'exit'
			({{'component',_cor3},{'value',_cor2},{'unique_name_and_value','id',ErrV}})
		-| [{'id',{0,0,'-getdec_SupportedCharacteristicTwos/1-fun-3-'}}] )
	end
'getenc_SupportedFieldIds'/1 =
    %% Line 19074
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,10045,1,2}> when 'true' ->
	      %% Line 19075
	      ( 'enc_field-characteristic-two'/3
		-| [{'id',{0,0,'-getenc_SupportedFieldIds/1-fun-0-'}}] )
	  %% Line 19076
	  <{1,2,840,10045,1,1}> when 'true' ->
	      %% Line 19077
	      ( 'enc_field-prime-field'/3
		-| [{'id',{0,0,'-getenc_SupportedFieldIds/1-fun-1-'}}] )
	  %% Line 19078
	  <ErrV> when 'true' ->
	      %% Line 19079
	      ( fun (_cor3,_cor2,_cor1) ->
		    call 'erlang':'exit'
			({'Type not compatible with table constraint',{'component',_cor3},{'value',_cor2},{'unique_name_and_value','id',ErrV}})
		-| [{'id',{0,0,'-getenc_SupportedFieldIds/1-fun-2-'}}] )
	end
'getdec_SupportedFieldIds'/1 =
    %% Line 19081
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,10045,1,2}> when 'true' ->
	      %% Line 19082
	      ( 'dec_field-characteristic-two'/3
		-| [{'id',{0,0,'-getdec_SupportedFieldIds/1-fun-0-'}}] )
	  %% Line 19083
	  <{1,2,840,10045,1,1}> when 'true' ->
	      %% Line 19084
	      ( 'dec_field-prime-field'/3
		-| [{'id',{0,0,'-getdec_SupportedFieldIds/1-fun-1-'}}] )
	  %% Line 19085
	  <ErrV> when 'true' ->
	      %% Line 19086
	      ( fun (_cor3,_cor2,_cor1) ->
		    call 'erlang':'exit'
			({{'component',_cor3},{'value',_cor2},{'unique_name_and_value','id',ErrV}})
		-| [{'id',{0,0,'-getdec_SupportedFieldIds/1-fun-2-'}}] )
	end
'getenc_SupportedPublicKeyAlgorithms'/1 =
    %% Line 19095
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,10046,2,1}> when 'true' ->
	      %% Line 19096
	      ( 'enc_dh'/3
		-| [{'id',{0,0,'-getenc_SupportedPublicKeyAlgorithms/1-fun-0-'}}] )
	  %% Line 19097
	  <{1,2,840,10040,4,1}> when 'true' ->
	      %% Line 19098
	      ( 'enc_dsa'/3
		-| [{'id',{0,0,'-getenc_SupportedPublicKeyAlgorithms/1-fun-1-'}}] )
	  %% Line 19099
	  <{1,2,840,10045,2,1}> when 'true' ->
	      %% Line 19100
	      ( 'enc_ec-public-key'/3
		-| [{'id',{0,0,'-getenc_SupportedPublicKeyAlgorithms/1-fun-2-'}}] )
	  %% Line 19101
	  <{2,16,840,1,101,2,1,1,22}> when 'true' ->
	      %% Line 19102
	      ( 'enc_kea'/3
		-| [{'id',{0,0,'-getenc_SupportedPublicKeyAlgorithms/1-fun-3-'}}] )
	  %% Line 19103
	  <{1,2,840,113549,1,1,1}> when 'true' ->
	      %% Line 19104
	      ( 'enc_rsa-encryption'/3
		-| [{'id',{0,0,'-getenc_SupportedPublicKeyAlgorithms/1-fun-4-'}}] )
	  %% Line 19105
	  <ErrV> when 'true' ->
	      %% Line 19106
	      ( fun (_cor3,_cor2,_cor1) ->
		    call 'erlang':'exit'
			({'Type not compatible with table constraint',{'component',_cor3},{'value',_cor2},{'unique_name_and_value','id',ErrV}})
		-| [{'id',{0,0,'-getenc_SupportedPublicKeyAlgorithms/1-fun-5-'}}] )
	end
'getdec_SupportedPublicKeyAlgorithms'/1 =
    %% Line 19108
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,10046,2,1}> when 'true' ->
	      %% Line 19109
	      ( 'dec_dh'/3
		-| [{'id',{0,0,'-getdec_SupportedPublicKeyAlgorithms/1-fun-0-'}}] )
	  %% Line 19110
	  <{1,2,840,10040,4,1}> when 'true' ->
	      %% Line 19111
	      ( 'dec_dsa'/3
		-| [{'id',{0,0,'-getdec_SupportedPublicKeyAlgorithms/1-fun-1-'}}] )
	  %% Line 19112
	  <{1,2,840,10045,2,1}> when 'true' ->
	      %% Line 19113
	      ( 'dec_ec-public-key'/3
		-| [{'id',{0,0,'-getdec_SupportedPublicKeyAlgorithms/1-fun-2-'}}] )
	  %% Line 19114
	  <{2,16,840,1,101,2,1,1,22}> when 'true' ->
	      %% Line 19115
	      ( 'dec_kea'/3
		-| [{'id',{0,0,'-getdec_SupportedPublicKeyAlgorithms/1-fun-3-'}}] )
	  %% Line 19116
	  <{1,2,840,113549,1,1,1}> when 'true' ->
	      %% Line 19117
	      ( 'dec_rsa-encryption'/3
		-| [{'id',{0,0,'-getdec_SupportedPublicKeyAlgorithms/1-fun-4-'}}] )
	  %% Line 19118
	  <ErrV> when 'true' ->
	      %% Line 19119
	      ( fun (_cor3,_cor2,_cor1) ->
		    call 'erlang':'exit'
			({{'component',_cor3},{'value',_cor2},{'unique_name_and_value','id',ErrV}})
		-| [{'id',{0,0,'-getdec_SupportedPublicKeyAlgorithms/1-fun-5-'}}] )
	end
'getenc_SupportedSignatureAlgorithms'/1 =
    %% Line 19128
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,10040,4,3}> when 'true' ->
	      %% Line 19129
	      ( 'enc_dsa-with-sha1'/3
		-| [{'id',{0,0,'-getenc_SupportedSignatureAlgorithms/1-fun-0-'}}] )
	  %% Line 19130
	  <{1,3,14,3,2,27}> when 'true' ->
	      %% Line 19131
	      ( 'enc_dsaWithSHA1'/3
		-| [{'id',{0,0,'-getenc_SupportedSignatureAlgorithms/1-fun-1-'}}] )
	  %% Line 19132
	  <{1,2,840,10045,4,1}> when 'true' ->
	      %% Line 19133
	      ( 'enc_ecdsa-with-sha1'/3
		-| [{'id',{0,0,'-getenc_SupportedSignatureAlgorithms/1-fun-2-'}}] )
	  %% Line 19134
	  <{1,2,840,10045,4,3,1}> when 'true' ->
	      %% Line 19135
	      ( 'enc_ecdsa-with-sha224'/3
		-| [{'id',{0,0,'-getenc_SupportedSignatureAlgorithms/1-fun-3-'}}] )
	  %% Line 19136
	  <{1,2,840,10045,4,3,2}> when 'true' ->
	      %% Line 19137
	      ( 'enc_ecdsa-with-sha256'/3
		-| [{'id',{0,0,'-getenc_SupportedSignatureAlgorithms/1-fun-4-'}}] )
	  %% Line 19138
	  <{1,2,840,10045,4,3,3}> when 'true' ->
	      %% Line 19139
	      ( 'enc_ecdsa-with-sha384'/3
		-| [{'id',{0,0,'-getenc_SupportedSignatureAlgorithms/1-fun-5-'}}] )
	  %% Line 19140
	  <{1,2,840,10045,4,3,4}> when 'true' ->
	      %% Line 19141
	      ( 'enc_ecdsa-with-sha512'/3
		-| [{'id',{0,0,'-getenc_SupportedSignatureAlgorithms/1-fun-6-'}}] )
	  %% Line 19142
	  <{1,2,840,113549,1,1,2}> when 'true' ->
	      %% Line 19143
	      ( 'enc_md2-with-rsa-encryption'/3
		-| [{'id',{0,0,'-getenc_SupportedSignatureAlgorithms/1-fun-7-'}}] )
	  %% Line 19144
	  <{1,2,840,113549,1,1,4}> when 'true' ->
	      %% Line 19145
	      ( 'enc_md5-with-rsa-encryption'/3
		-| [{'id',{0,0,'-getenc_SupportedSignatureAlgorithms/1-fun-8-'}}] )
	  %% Line 19146
	  <{1,3,14,3,2,29}> when 'true' ->
	      %% Line 19147
	      ( 'enc_sha-1with-rsa-encryption'/3
		-| [{'id',{0,0,'-getenc_SupportedSignatureAlgorithms/1-fun-9-'}}] )
	  %% Line 19148
	  <{1,2,840,113549,1,1,5}> when 'true' ->
	      %% Line 19149
	      ( 'enc_sha1-with-rsa-encryption'/3
		-| [{'id',{0,0,'-getenc_SupportedSignatureAlgorithms/1-fun-10-'}}] )
	  %% Line 19150
	  <{1,2,840,113549,1,1,14}> when 'true' ->
	      %% Line 19151
	      ( 'enc_sha224-with-rsa-encryption'/3
		-| [{'id',{0,0,'-getenc_SupportedSignatureAlgorithms/1-fun-11-'}}] )
	  %% Line 19152
	  <{1,2,840,113549,1,1,11}> when 'true' ->
	      %% Line 19153
	      ( 'enc_sha256-with-rsa-encryption'/3
		-| [{'id',{0,0,'-getenc_SupportedSignatureAlgorithms/1-fun-12-'}}] )
	  %% Line 19154
	  <{1,2,840,113549,1,1,12}> when 'true' ->
	      %% Line 19155
	      ( 'enc_sha384-with-rsa-encryption'/3
		-| [{'id',{0,0,'-getenc_SupportedSignatureAlgorithms/1-fun-13-'}}] )
	  %% Line 19156
	  <{1,2,840,113549,1,1,13}> when 'true' ->
	      %% Line 19157
	      ( 'enc_sha512-with-rsa-encryption'/3
		-| [{'id',{0,0,'-getenc_SupportedSignatureAlgorithms/1-fun-14-'}}] )
	  %% Line 19158
	  <ErrV> when 'true' ->
	      %% Line 19159
	      ( fun (_cor3,_cor2,_cor1) ->
		    call 'erlang':'exit'
			({'Type not compatible with table constraint',{'component',_cor3},{'value',_cor2},{'unique_name_and_value','id',ErrV}})
		-| [{'id',{0,0,'-getenc_SupportedSignatureAlgorithms/1-fun-15-'}}] )
	end
'getdec_SupportedSignatureAlgorithms'/1 =
    %% Line 19161
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,10040,4,3}> when 'true' ->
	      %% Line 19162
	      ( 'dec_dsa-with-sha1'/3
		-| [{'id',{0,0,'-getdec_SupportedSignatureAlgorithms/1-fun-0-'}}] )
	  %% Line 19163
	  <{1,3,14,3,2,27}> when 'true' ->
	      %% Line 19164
	      ( 'dec_dsaWithSHA1'/3
		-| [{'id',{0,0,'-getdec_SupportedSignatureAlgorithms/1-fun-1-'}}] )
	  %% Line 19165
	  <{1,2,840,10045,4,1}> when 'true' ->
	      %% Line 19166
	      ( 'dec_ecdsa-with-sha1'/3
		-| [{'id',{0,0,'-getdec_SupportedSignatureAlgorithms/1-fun-2-'}}] )
	  %% Line 19167
	  <{1,2,840,10045,4,3,1}> when 'true' ->
	      %% Line 19168
	      ( 'dec_ecdsa-with-sha224'/3
		-| [{'id',{0,0,'-getdec_SupportedSignatureAlgorithms/1-fun-3-'}}] )
	  %% Line 19169
	  <{1,2,840,10045,4,3,2}> when 'true' ->
	      %% Line 19170
	      ( 'dec_ecdsa-with-sha256'/3
		-| [{'id',{0,0,'-getdec_SupportedSignatureAlgorithms/1-fun-4-'}}] )
	  %% Line 19171
	  <{1,2,840,10045,4,3,3}> when 'true' ->
	      %% Line 19172
	      ( 'dec_ecdsa-with-sha384'/3
		-| [{'id',{0,0,'-getdec_SupportedSignatureAlgorithms/1-fun-5-'}}] )
	  %% Line 19173
	  <{1,2,840,10045,4,3,4}> when 'true' ->
	      %% Line 19174
	      ( 'dec_ecdsa-with-sha512'/3
		-| [{'id',{0,0,'-getdec_SupportedSignatureAlgorithms/1-fun-6-'}}] )
	  %% Line 19175
	  <{1,2,840,113549,1,1,2}> when 'true' ->
	      %% Line 19176
	      ( 'dec_md2-with-rsa-encryption'/3
		-| [{'id',{0,0,'-getdec_SupportedSignatureAlgorithms/1-fun-7-'}}] )
	  %% Line 19177
	  <{1,2,840,113549,1,1,4}> when 'true' ->
	      %% Line 19178
	      ( 'dec_md5-with-rsa-encryption'/3
		-| [{'id',{0,0,'-getdec_SupportedSignatureAlgorithms/1-fun-8-'}}] )
	  %% Line 19179
	  <{1,3,14,3,2,29}> when 'true' ->
	      %% Line 19180
	      ( 'dec_sha-1with-rsa-encryption'/3
		-| [{'id',{0,0,'-getdec_SupportedSignatureAlgorithms/1-fun-9-'}}] )
	  %% Line 19181
	  <{1,2,840,113549,1,1,5}> when 'true' ->
	      %% Line 19182
	      ( 'dec_sha1-with-rsa-encryption'/3
		-| [{'id',{0,0,'-getdec_SupportedSignatureAlgorithms/1-fun-10-'}}] )
	  %% Line 19183
	  <{1,2,840,113549,1,1,14}> when 'true' ->
	      %% Line 19184
	      ( 'dec_sha224-with-rsa-encryption'/3
		-| [{'id',{0,0,'-getdec_SupportedSignatureAlgorithms/1-fun-11-'}}] )
	  %% Line 19185
	  <{1,2,840,113549,1,1,11}> when 'true' ->
	      %% Line 19186
	      ( 'dec_sha256-with-rsa-encryption'/3
		-| [{'id',{0,0,'-getdec_SupportedSignatureAlgorithms/1-fun-12-'}}] )
	  %% Line 19187
	  <{1,2,840,113549,1,1,12}> when 'true' ->
	      %% Line 19188
	      ( 'dec_sha384-with-rsa-encryption'/3
		-| [{'id',{0,0,'-getdec_SupportedSignatureAlgorithms/1-fun-13-'}}] )
	  %% Line 19189
	  <{1,2,840,113549,1,1,13}> when 'true' ->
	      %% Line 19190
	      ( 'dec_sha512-with-rsa-encryption'/3
		-| [{'id',{0,0,'-getdec_SupportedSignatureAlgorithms/1-fun-14-'}}] )
	  %% Line 19191
	  <ErrV> when 'true' ->
	      %% Line 19192
	      ( fun (_cor3,_cor2,_cor1) ->
		    call 'erlang':'exit'
			({{'component',_cor3},{'value',_cor2},{'unique_name_and_value','id',ErrV}})
		-| [{'id',{0,0,'-getdec_SupportedSignatureAlgorithms/1-fun-15-'}}] )
	end
'getenc_SupportedAttributeTypeAndValues'/1 =
    %% Line 19201
    fun (_cor0) ->
	case _cor0 of
	  <{2,5,4,3}> when 'true' ->
	      %% Line 19202
	      ( 'enc_commonName'/3
		-| [{'id',{0,0,'-getenc_SupportedAttributeTypeAndValues/1-fun-0-'}}] )
	  %% Line 19203
	  <{2,5,4,6}> when 'true' ->
	      %% Line 19204
	      ( 'enc_countryName'/3
		-| [{'id',{0,0,'-getenc_SupportedAttributeTypeAndValues/1-fun-1-'}}] )
	  %% Line 19205
	  <{2,5,4,46}> when 'true' ->
	      %% Line 19206
	      ( 'enc_dnQualifier'/3
		-| [{'id',{0,0,'-getenc_SupportedAttributeTypeAndValues/1-fun-2-'}}] )
	  %% Line 19207
	  <{0,9,2342,19200300,100,1,25}> when 'true' ->
	      %% Line 19208
	      ( 'enc_domainComponent'/3
		-| [{'id',{0,0,'-getenc_SupportedAttributeTypeAndValues/1-fun-3-'}}] )
	  %% Line 19209
	  <{1,2,840,113549,1,9,1}> when 'true' ->
	      %% Line 19210
	      ( 'enc_emailAddress'/3
		-| [{'id',{0,0,'-getenc_SupportedAttributeTypeAndValues/1-fun-4-'}}] )
	  %% Line 19211
	  <{2,5,4,44}> when 'true' ->
	      %% Line 19212
	      ( 'enc_generationQualifier'/3
		-| [{'id',{0,0,'-getenc_SupportedAttributeTypeAndValues/1-fun-5-'}}] )
	  %% Line 19213
	  <{2,5,4,42}> when 'true' ->
	      %% Line 19214
	      ( 'enc_givenName'/3
		-| [{'id',{0,0,'-getenc_SupportedAttributeTypeAndValues/1-fun-6-'}}] )
	  %% Line 19215
	  <{2,5,4,43}> when 'true' ->
	      %% Line 19216
	      ( 'enc_initials'/3
		-| [{'id',{0,0,'-getenc_SupportedAttributeTypeAndValues/1-fun-7-'}}] )
	  %% Line 19217
	  <{2,5,4,7}> when 'true' ->
	      %% Line 19218
	      ( 'enc_localityName'/3
		-| [{'id',{0,0,'-getenc_SupportedAttributeTypeAndValues/1-fun-8-'}}] )
	  %% Line 19219
	  <{2,5,4,41}> when 'true' ->
	      %% Line 19220
	      ( 'enc_name'/3
		-| [{'id',{0,0,'-getenc_SupportedAttributeTypeAndValues/1-fun-9-'}}] )
	  %% Line 19221
	  <{2,5,4,10}> when 'true' ->
	      %% Line 19222
	      ( 'enc_organizationName'/3
		-| [{'id',{0,0,'-getenc_SupportedAttributeTypeAndValues/1-fun-10-'}}] )
	  %% Line 19223
	  <{2,5,4,11}> when 'true' ->
	      %% Line 19224
	      ( 'enc_organizationalUnitName'/3
		-| [{'id',{0,0,'-getenc_SupportedAttributeTypeAndValues/1-fun-11-'}}] )
	  %% Line 19225
	  <{2,5,4,65}> when 'true' ->
	      %% Line 19226
	      ( 'enc_pseudonym'/3
		-| [{'id',{0,0,'-getenc_SupportedAttributeTypeAndValues/1-fun-12-'}}] )
	  %% Line 19227
	  <{2,5,4,5}> when 'true' ->
	      %% Line 19228
	      ( 'enc_serialNumber'/3
		-| [{'id',{0,0,'-getenc_SupportedAttributeTypeAndValues/1-fun-13-'}}] )
	  %% Line 19229
	  <{2,5,4,8}> when 'true' ->
	      %% Line 19230
	      ( 'enc_stateOrProvinceName'/3
		-| [{'id',{0,0,'-getenc_SupportedAttributeTypeAndValues/1-fun-14-'}}] )
	  %% Line 19231
	  <{2,5,4,4}> when 'true' ->
	      %% Line 19232
	      ( 'enc_surname'/3
		-| [{'id',{0,0,'-getenc_SupportedAttributeTypeAndValues/1-fun-15-'}}] )
	  %% Line 19233
	  <{2,5,4,12}> when 'true' ->
	      %% Line 19234
	      ( 'enc_title'/3
		-| [{'id',{0,0,'-getenc_SupportedAttributeTypeAndValues/1-fun-16-'}}] )
	  %% Line 19235
	  <ErrV> when 'true' ->
	      %% Line 19236
	      ( fun (_cor3,_cor2,_cor1) ->
		    call 'erlang':'exit'
			({'Type not compatible with table constraint',{'component',_cor3},{'value',_cor2},{'unique_name_and_value','id',ErrV}})
		-| [{'id',{0,0,'-getenc_SupportedAttributeTypeAndValues/1-fun-17-'}}] )
	end
'getdec_SupportedAttributeTypeAndValues'/1 =
    %% Line 19238
    fun (_cor0) ->
	case _cor0 of
	  <{2,5,4,3}> when 'true' ->
	      %% Line 19239
	      ( 'dec_commonName'/3
		-| [{'id',{0,0,'-getdec_SupportedAttributeTypeAndValues/1-fun-0-'}}] )
	  %% Line 19240
	  <{2,5,4,6}> when 'true' ->
	      %% Line 19241
	      ( 'dec_countryName'/3
		-| [{'id',{0,0,'-getdec_SupportedAttributeTypeAndValues/1-fun-1-'}}] )
	  %% Line 19242
	  <{2,5,4,46}> when 'true' ->
	      %% Line 19243
	      ( 'dec_dnQualifier'/3
		-| [{'id',{0,0,'-getdec_SupportedAttributeTypeAndValues/1-fun-2-'}}] )
	  %% Line 19244
	  <{0,9,2342,19200300,100,1,25}> when 'true' ->
	      %% Line 19245
	      ( 'dec_domainComponent'/3
		-| [{'id',{0,0,'-getdec_SupportedAttributeTypeAndValues/1-fun-3-'}}] )
	  %% Line 19246
	  <{1,2,840,113549,1,9,1}> when 'true' ->
	      %% Line 19247
	      ( 'dec_emailAddress'/3
		-| [{'id',{0,0,'-getdec_SupportedAttributeTypeAndValues/1-fun-4-'}}] )
	  %% Line 19248
	  <{2,5,4,44}> when 'true' ->
	      %% Line 19249
	      ( 'dec_generationQualifier'/3
		-| [{'id',{0,0,'-getdec_SupportedAttributeTypeAndValues/1-fun-5-'}}] )
	  %% Line 19250
	  <{2,5,4,42}> when 'true' ->
	      %% Line 19251
	      ( 'dec_givenName'/3
		-| [{'id',{0,0,'-getdec_SupportedAttributeTypeAndValues/1-fun-6-'}}] )
	  %% Line 19252
	  <{2,5,4,43}> when 'true' ->
	      %% Line 19253
	      ( 'dec_initials'/3
		-| [{'id',{0,0,'-getdec_SupportedAttributeTypeAndValues/1-fun-7-'}}] )
	  %% Line 19254
	  <{2,5,4,7}> when 'true' ->
	      %% Line 19255
	      ( 'dec_localityName'/3
		-| [{'id',{0,0,'-getdec_SupportedAttributeTypeAndValues/1-fun-8-'}}] )
	  %% Line 19256
	  <{2,5,4,41}> when 'true' ->
	      %% Line 19257
	      ( 'dec_name'/3
		-| [{'id',{0,0,'-getdec_SupportedAttributeTypeAndValues/1-fun-9-'}}] )
	  %% Line 19258
	  <{2,5,4,10}> when 'true' ->
	      %% Line 19259
	      ( 'dec_organizationName'/3
		-| [{'id',{0,0,'-getdec_SupportedAttributeTypeAndValues/1-fun-10-'}}] )
	  %% Line 19260
	  <{2,5,4,11}> when 'true' ->
	      %% Line 19261
	      ( 'dec_organizationalUnitName'/3
		-| [{'id',{0,0,'-getdec_SupportedAttributeTypeAndValues/1-fun-11-'}}] )
	  %% Line 19262
	  <{2,5,4,65}> when 'true' ->
	      %% Line 19263
	      ( 'dec_pseudonym'/3
		-| [{'id',{0,0,'-getdec_SupportedAttributeTypeAndValues/1-fun-12-'}}] )
	  %% Line 19264
	  <{2,5,4,5}> when 'true' ->
	      %% Line 19265
	      ( 'dec_serialNumber'/3
		-| [{'id',{0,0,'-getdec_SupportedAttributeTypeAndValues/1-fun-13-'}}] )
	  %% Line 19266
	  <{2,5,4,8}> when 'true' ->
	      %% Line 19267
	      ( 'dec_stateOrProvinceName'/3
		-| [{'id',{0,0,'-getdec_SupportedAttributeTypeAndValues/1-fun-14-'}}] )
	  %% Line 19268
	  <{2,5,4,4}> when 'true' ->
	      %% Line 19269
	      ( 'dec_surname'/3
		-| [{'id',{0,0,'-getdec_SupportedAttributeTypeAndValues/1-fun-15-'}}] )
	  %% Line 19270
	  <{2,5,4,12}> when 'true' ->
	      %% Line 19271
	      ( 'dec_title'/3
		-| [{'id',{0,0,'-getdec_SupportedAttributeTypeAndValues/1-fun-16-'}}] )
	  %% Line 19272
	  <ErrV> when 'true' ->
	      %% Line 19273
	      ( fun (_cor3,_cor2,_cor1) ->
		    call 'erlang':'exit'
			({{'component',_cor3},{'value',_cor2},{'unique_name_and_value','id',ErrV}})
		-| [{'id',{0,0,'-getdec_SupportedAttributeTypeAndValues/1-fun-17-'}}] )
	end
'getenc_internal_object_set_argument_9'/1 =
    %% Line 19282
    fun (_cor0) ->
	%% Line 19283
	( fun (_cor7,_cor6,_cor5) ->
	      %% Line 19284
	      case _cor6 of
		%% Line 19285
		<{'asn1_OPENTYPE',Bin}>
		    when call 'erlang':'is_binary'
			  (Bin) ->
		    let <_cor1> =
			%% Line 19286
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 19286
			{Bin,_cor1}
		%% Line 19287
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor6) ->
		    let <_cor2> =
			%% Line 19288
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 19288
			{Bin,_cor2}
		%% Line 19289
		<_cor14> when 'true' ->
		    let <_cor3> =
			%% Line 19290
			call 'erlang':'length'
			    (_cor6)
		    in  %% Line 19290
			{_cor6,_cor3}
	      end
	  -| [{'id',{0,0,'-getenc_internal_object_set_argument_9/1-fun-0-'}}] )
'getdec_internal_object_set_argument_9'/1 =
    %% Line 19294
    fun (_cor0) ->
	%% Line 19295
	( fun (_cor4,_cor3,_cor2) ->
	      %% Line 19296
	      case _cor3 of
		%% Line 19297
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor3) ->
		    %% Line 19298
		    Bin
		%% Line 19299
		<_cor11> when 'true' ->
		    %% Line 19300
		    apply 'ber_encode'/1
			(_cor3)
	      end
	  -| [{'id',{0,0,'-getdec_internal_object_set_argument_9/1-fun-0-'}}] )
'getenc_internal_object_set_argument_8'/1 =
    %% Line 19311
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,113549,1,9,3}> when 'true' ->
	      %% Line 19312
	      ( 'enc_contentType'/3
		-| [{'id',{0,0,'-getenc_internal_object_set_argument_8/1-fun-0-'}}] )
	  %% Line 19313
	  <{1,2,840,113549,1,9,6}> when 'true' ->
	      %% Line 19314
	      ( 'enc_counterSignature'/3
		-| [{'id',{0,0,'-getenc_internal_object_set_argument_8/1-fun-1-'}}] )
	  %% Line 19315
	  <{1,2,840,113549,1,9,4}> when 'true' ->
	      %% Line 19316
	      ( 'enc_messageDigest'/3
		-| [{'id',{0,0,'-getenc_internal_object_set_argument_8/1-fun-2-'}}] )
	  %% Line 19317
	  <_cor12> when 'true' ->
	      %% Line 19318
	      ( fun (_cor7,_cor6,_cor5) ->
		    %% Line 19319
		    case _cor6 of
		      %% Line 19320
		      <{'asn1_OPENTYPE',Bin}>
			  when call 'erlang':'is_binary'
				(Bin) ->
			  let <_cor1> =
			      %% Line 19321
			      call 'erlang':'byte_size'
				  (Bin)
			  in  %% Line 19321
			      {Bin,_cor1}
		      %% Line 19322
		      <Bin>
			  when call 'erlang':'is_binary'
				(_cor6) ->
			  let <_cor2> =
			      %% Line 19323
			      call 'erlang':'byte_size'
				  (Bin)
			  in  %% Line 19323
			      {Bin,_cor2}
		      %% Line 19324
		      <_cor14> when 'true' ->
			  let <_cor3> =
			      %% Line 19325
			      call 'erlang':'length'
				  (_cor6)
			  in  %% Line 19325
			      {_cor6,_cor3}
		    end
		-| [{'id',{0,0,'-getenc_internal_object_set_argument_8/1-fun-3-'}}] )
	end
'getdec_internal_object_set_argument_8'/1 =
    %% Line 19329
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,113549,1,9,3}> when 'true' ->
	      %% Line 19330
	      ( 'dec_contentType'/3
		-| [{'id',{0,0,'-getdec_internal_object_set_argument_8/1-fun-0-'}}] )
	  %% Line 19331
	  <{1,2,840,113549,1,9,6}> when 'true' ->
	      %% Line 19332
	      ( 'dec_counterSignature'/3
		-| [{'id',{0,0,'-getdec_internal_object_set_argument_8/1-fun-1-'}}] )
	  %% Line 19333
	  <{1,2,840,113549,1,9,4}> when 'true' ->
	      %% Line 19334
	      ( 'dec_messageDigest'/3
		-| [{'id',{0,0,'-getdec_internal_object_set_argument_8/1-fun-2-'}}] )
	  %% Line 19335
	  <_cor9> when 'true' ->
	      %% Line 19336
	      ( fun (_cor4,_cor3,_cor2) ->
		    %% Line 19337
		    case _cor3 of
		      %% Line 19338
		      <Bin>
			  when call 'erlang':'is_binary'
				(_cor3) ->
			  %% Line 19339
			  Bin
		      %% Line 19340
		      <_cor11> when 'true' ->
			  %% Line 19341
			  apply 'ber_encode'/1
			      (_cor3)
		    end
		-| [{'id',{0,0,'-getdec_internal_object_set_argument_8/1-fun-3-'}}] )
	end
'getenc_internal_object_set_argument_7'/1 =
    %% Line 19352
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,113549,1,9,3}> when 'true' ->
	      %% Line 19353
	      ( 'enc_contentType'/3
		-| [{'id',{0,0,'-getenc_internal_object_set_argument_7/1-fun-0-'}}] )
	  %% Line 19354
	  <{1,2,840,113549,1,9,6}> when 'true' ->
	      %% Line 19355
	      ( 'enc_counterSignature'/3
		-| [{'id',{0,0,'-getenc_internal_object_set_argument_7/1-fun-1-'}}] )
	  %% Line 19356
	  <{1,2,840,113549,1,9,4}> when 'true' ->
	      %% Line 19357
	      ( 'enc_messageDigest'/3
		-| [{'id',{0,0,'-getenc_internal_object_set_argument_7/1-fun-2-'}}] )
	  %% Line 19358
	  <_cor12> when 'true' ->
	      %% Line 19359
	      ( fun (_cor7,_cor6,_cor5) ->
		    %% Line 19360
		    case _cor6 of
		      %% Line 19361
		      <{'asn1_OPENTYPE',Bin}>
			  when call 'erlang':'is_binary'
				(Bin) ->
			  let <_cor1> =
			      %% Line 19362
			      call 'erlang':'byte_size'
				  (Bin)
			  in  %% Line 19362
			      {Bin,_cor1}
		      %% Line 19363
		      <Bin>
			  when call 'erlang':'is_binary'
				(_cor6) ->
			  let <_cor2> =
			      %% Line 19364
			      call 'erlang':'byte_size'
				  (Bin)
			  in  %% Line 19364
			      {Bin,_cor2}
		      %% Line 19365
		      <_cor14> when 'true' ->
			  let <_cor3> =
			      %% Line 19366
			      call 'erlang':'length'
				  (_cor6)
			  in  %% Line 19366
			      {_cor6,_cor3}
		    end
		-| [{'id',{0,0,'-getenc_internal_object_set_argument_7/1-fun-3-'}}] )
	end
'getdec_internal_object_set_argument_7'/1 =
    %% Line 19370
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,113549,1,9,3}> when 'true' ->
	      %% Line 19371
	      ( 'dec_contentType'/3
		-| [{'id',{0,0,'-getdec_internal_object_set_argument_7/1-fun-0-'}}] )
	  %% Line 19372
	  <{1,2,840,113549,1,9,6}> when 'true' ->
	      %% Line 19373
	      ( 'dec_counterSignature'/3
		-| [{'id',{0,0,'-getdec_internal_object_set_argument_7/1-fun-1-'}}] )
	  %% Line 19374
	  <{1,2,840,113549,1,9,4}> when 'true' ->
	      %% Line 19375
	      ( 'dec_messageDigest'/3
		-| [{'id',{0,0,'-getdec_internal_object_set_argument_7/1-fun-2-'}}] )
	  %% Line 19376
	  <_cor9> when 'true' ->
	      %% Line 19377
	      ( fun (_cor4,_cor3,_cor2) ->
		    %% Line 19378
		    case _cor3 of
		      %% Line 19379
		      <Bin>
			  when call 'erlang':'is_binary'
				(_cor3) ->
			  %% Line 19380
			  Bin
		      %% Line 19381
		      <_cor11> when 'true' ->
			  %% Line 19382
			  apply 'ber_encode'/1
			      (_cor3)
		    end
		-| [{'id',{0,0,'-getdec_internal_object_set_argument_7/1-fun-3-'}}] )
	end
'getenc_internal_object_set_argument_6'/1 =
    %% Line 19393
    fun (_cor0) ->
	%% Line 19394
	( fun (_cor7,_cor6,_cor5) ->
	      %% Line 19395
	      case _cor6 of
		%% Line 19396
		<{'asn1_OPENTYPE',Bin}>
		    when call 'erlang':'is_binary'
			  (Bin) ->
		    let <_cor1> =
			%% Line 19397
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 19397
			{Bin,_cor1}
		%% Line 19398
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor6) ->
		    let <_cor2> =
			%% Line 19399
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 19399
			{Bin,_cor2}
		%% Line 19400
		<_cor14> when 'true' ->
		    let <_cor3> =
			%% Line 19401
			call 'erlang':'length'
			    (_cor6)
		    in  %% Line 19401
			{_cor6,_cor3}
	      end
	  -| [{'id',{0,0,'-getenc_internal_object_set_argument_6/1-fun-0-'}}] )
'getdec_internal_object_set_argument_6'/1 =
    %% Line 19405
    fun (_cor0) ->
	%% Line 19406
	( fun (_cor4,_cor3,_cor2) ->
	      %% Line 19407
	      case _cor3 of
		%% Line 19408
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor3) ->
		    %% Line 19409
		    Bin
		%% Line 19410
		<_cor11> when 'true' ->
		    %% Line 19411
		    apply 'ber_encode'/1
			(_cor3)
	      end
	  -| [{'id',{0,0,'-getdec_internal_object_set_argument_6/1-fun-0-'}}] )
'getenc_internal_object_set_argument_5'/1 =
    %% Line 19422
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,113549,1,9,3}> when 'true' ->
	      %% Line 19423
	      ( 'enc_contentType'/3
		-| [{'id',{0,0,'-getenc_internal_object_set_argument_5/1-fun-0-'}}] )
	  %% Line 19424
	  <{2,16,840,1,113733,1,9,4}> when 'true' ->
	      %% Line 19425
	      ( 'enc_failInfo'/3
		-| [{'id',{0,0,'-getenc_internal_object_set_argument_5/1-fun-1-'}}] )
	  %% Line 19426
	  <{1,2,840,113549,1,9,4}> when 'true' ->
	      %% Line 19427
	      ( 'enc_messageDigest'/3
		-| [{'id',{0,0,'-getenc_internal_object_set_argument_5/1-fun-2-'}}] )
	  %% Line 19428
	  <{2,16,840,1,113733,1,9,2}> when 'true' ->
	      %% Line 19429
	      ( 'enc_messageType'/3
		-| [{'id',{0,0,'-getenc_internal_object_set_argument_5/1-fun-3-'}}] )
	  %% Line 19430
	  <{2,16,840,1,113733,1,9,3}> when 'true' ->
	      %% Line 19431
	      ( 'enc_pkiStatus'/3
		-| [{'id',{0,0,'-getenc_internal_object_set_argument_5/1-fun-4-'}}] )
	  %% Line 19432
	  <{2,16,840,1,113733,1,9,6}> when 'true' ->
	      %% Line 19433
	      ( 'enc_recipientNonce'/3
		-| [{'id',{0,0,'-getenc_internal_object_set_argument_5/1-fun-5-'}}] )
	  %% Line 19434
	  <{2,16,840,1,113733,1,9,5}> when 'true' ->
	      %% Line 19435
	      ( 'enc_senderNonce'/3
		-| [{'id',{0,0,'-getenc_internal_object_set_argument_5/1-fun-6-'}}] )
	  %% Line 19436
	  <{1,2,840,113549,1,9,5}> when 'true' ->
	      %% Line 19437
	      ( 'enc_signingTime'/3
		-| [{'id',{0,0,'-getenc_internal_object_set_argument_5/1-fun-7-'}}] )
	  %% Line 19438
	  <{2,16,840,1,113733,1,9,7}> when 'true' ->
	      %% Line 19439
	      ( 'enc_transactionID'/3
		-| [{'id',{0,0,'-getenc_internal_object_set_argument_5/1-fun-8-'}}] )
	  %% Line 19440
	  <_cor12> when 'true' ->
	      %% Line 19441
	      ( fun (_cor7,_cor6,_cor5) ->
		    %% Line 19442
		    case _cor6 of
		      %% Line 19443
		      <{'asn1_OPENTYPE',Bin}>
			  when call 'erlang':'is_binary'
				(Bin) ->
			  let <_cor1> =
			      %% Line 19444
			      call 'erlang':'byte_size'
				  (Bin)
			  in  %% Line 19444
			      {Bin,_cor1}
		      %% Line 19445
		      <Bin>
			  when call 'erlang':'is_binary'
				(_cor6) ->
			  let <_cor2> =
			      %% Line 19446
			      call 'erlang':'byte_size'
				  (Bin)
			  in  %% Line 19446
			      {Bin,_cor2}
		      %% Line 19447
		      <_cor14> when 'true' ->
			  let <_cor3> =
			      %% Line 19448
			      call 'erlang':'length'
				  (_cor6)
			  in  %% Line 19448
			      {_cor6,_cor3}
		    end
		-| [{'id',{0,0,'-getenc_internal_object_set_argument_5/1-fun-9-'}}] )
	end
'getdec_internal_object_set_argument_5'/1 =
    %% Line 19452
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,113549,1,9,3}> when 'true' ->
	      %% Line 19453
	      ( 'dec_contentType'/3
		-| [{'id',{0,0,'-getdec_internal_object_set_argument_5/1-fun-0-'}}] )
	  %% Line 19454
	  <{2,16,840,1,113733,1,9,4}> when 'true' ->
	      %% Line 19455
	      ( 'dec_failInfo'/3
		-| [{'id',{0,0,'-getdec_internal_object_set_argument_5/1-fun-1-'}}] )
	  %% Line 19456
	  <{1,2,840,113549,1,9,4}> when 'true' ->
	      %% Line 19457
	      ( 'dec_messageDigest'/3
		-| [{'id',{0,0,'-getdec_internal_object_set_argument_5/1-fun-2-'}}] )
	  %% Line 19458
	  <{2,16,840,1,113733,1,9,2}> when 'true' ->
	      %% Line 19459
	      ( 'dec_messageType'/3
		-| [{'id',{0,0,'-getdec_internal_object_set_argument_5/1-fun-3-'}}] )
	  %% Line 19460
	  <{2,16,840,1,113733,1,9,3}> when 'true' ->
	      %% Line 19461
	      ( 'dec_pkiStatus'/3
		-| [{'id',{0,0,'-getdec_internal_object_set_argument_5/1-fun-4-'}}] )
	  %% Line 19462
	  <{2,16,840,1,113733,1,9,6}> when 'true' ->
	      %% Line 19463
	      ( 'dec_recipientNonce'/3
		-| [{'id',{0,0,'-getdec_internal_object_set_argument_5/1-fun-5-'}}] )
	  %% Line 19464
	  <{2,16,840,1,113733,1,9,5}> when 'true' ->
	      %% Line 19465
	      ( 'dec_senderNonce'/3
		-| [{'id',{0,0,'-getdec_internal_object_set_argument_5/1-fun-6-'}}] )
	  %% Line 19466
	  <{1,2,840,113549,1,9,5}> when 'true' ->
	      %% Line 19467
	      ( 'dec_signingTime'/3
		-| [{'id',{0,0,'-getdec_internal_object_set_argument_5/1-fun-7-'}}] )
	  %% Line 19468
	  <{2,16,840,1,113733,1,9,7}> when 'true' ->
	      %% Line 19469
	      ( 'dec_transactionID'/3
		-| [{'id',{0,0,'-getdec_internal_object_set_argument_5/1-fun-8-'}}] )
	  %% Line 19470
	  <_cor9> when 'true' ->
	      %% Line 19471
	      ( fun (_cor4,_cor3,_cor2) ->
		    %% Line 19472
		    case _cor3 of
		      %% Line 19473
		      <Bin>
			  when call 'erlang':'is_binary'
				(_cor3) ->
			  %% Line 19474
			  Bin
		      %% Line 19475
		      <_cor11> when 'true' ->
			  %% Line 19476
			  apply 'ber_encode'/1
			      (_cor3)
		    end
		-| [{'id',{0,0,'-getdec_internal_object_set_argument_5/1-fun-9-'}}] )
	end
'getenc_internal_object_set_argument_4'/1 =
    %% Line 19487
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,113549,1,9,3}> when 'true' ->
	      %% Line 19488
	      ( 'enc_contentType'/3
		-| [{'id',{0,0,'-getenc_internal_object_set_argument_4/1-fun-0-'}}] )
	  %% Line 19489
	  <{2,16,840,1,113733,1,9,4}> when 'true' ->
	      %% Line 19490
	      ( 'enc_failInfo'/3
		-| [{'id',{0,0,'-getenc_internal_object_set_argument_4/1-fun-1-'}}] )
	  %% Line 19491
	  <{1,2,840,113549,1,9,4}> when 'true' ->
	      %% Line 19492
	      ( 'enc_messageDigest'/3
		-| [{'id',{0,0,'-getenc_internal_object_set_argument_4/1-fun-2-'}}] )
	  %% Line 19493
	  <{2,16,840,1,113733,1,9,2}> when 'true' ->
	      %% Line 19494
	      ( 'enc_messageType'/3
		-| [{'id',{0,0,'-getenc_internal_object_set_argument_4/1-fun-3-'}}] )
	  %% Line 19495
	  <{2,16,840,1,113733,1,9,3}> when 'true' ->
	      %% Line 19496
	      ( 'enc_pkiStatus'/3
		-| [{'id',{0,0,'-getenc_internal_object_set_argument_4/1-fun-4-'}}] )
	  %% Line 19497
	  <{2,16,840,1,113733,1,9,6}> when 'true' ->
	      %% Line 19498
	      ( 'enc_recipientNonce'/3
		-| [{'id',{0,0,'-getenc_internal_object_set_argument_4/1-fun-5-'}}] )
	  %% Line 19499
	  <{2,16,840,1,113733,1,9,5}> when 'true' ->
	      %% Line 19500
	      ( 'enc_senderNonce'/3
		-| [{'id',{0,0,'-getenc_internal_object_set_argument_4/1-fun-6-'}}] )
	  %% Line 19501
	  <{1,2,840,113549,1,9,5}> when 'true' ->
	      %% Line 19502
	      ( 'enc_signingTime'/3
		-| [{'id',{0,0,'-getenc_internal_object_set_argument_4/1-fun-7-'}}] )
	  %% Line 19503
	  <{2,16,840,1,113733,1,9,7}> when 'true' ->
	      %% Line 19504
	      ( 'enc_transactionID'/3
		-| [{'id',{0,0,'-getenc_internal_object_set_argument_4/1-fun-8-'}}] )
	  %% Line 19505
	  <_cor12> when 'true' ->
	      %% Line 19506
	      ( fun (_cor7,_cor6,_cor5) ->
		    %% Line 19507
		    case _cor6 of
		      %% Line 19508
		      <{'asn1_OPENTYPE',Bin}>
			  when call 'erlang':'is_binary'
				(Bin) ->
			  let <_cor1> =
			      %% Line 19509
			      call 'erlang':'byte_size'
				  (Bin)
			  in  %% Line 19509
			      {Bin,_cor1}
		      %% Line 19510
		      <Bin>
			  when call 'erlang':'is_binary'
				(_cor6) ->
			  let <_cor2> =
			      %% Line 19511
			      call 'erlang':'byte_size'
				  (Bin)
			  in  %% Line 19511
			      {Bin,_cor2}
		      %% Line 19512
		      <_cor14> when 'true' ->
			  let <_cor3> =
			      %% Line 19513
			      call 'erlang':'length'
				  (_cor6)
			  in  %% Line 19513
			      {_cor6,_cor3}
		    end
		-| [{'id',{0,0,'-getenc_internal_object_set_argument_4/1-fun-9-'}}] )
	end
'getdec_internal_object_set_argument_4'/1 =
    %% Line 19517
    fun (_cor0) ->
	case _cor0 of
	  <{1,2,840,113549,1,9,3}> when 'true' ->
	      %% Line 19518
	      ( 'dec_contentType'/3
		-| [{'id',{0,0,'-getdec_internal_object_set_argument_4/1-fun-0-'}}] )
	  %% Line 19519
	  <{2,16,840,1,113733,1,9,4}> when 'true' ->
	      %% Line 19520
	      ( 'dec_failInfo'/3
		-| [{'id',{0,0,'-getdec_internal_object_set_argument_4/1-fun-1-'}}] )
	  %% Line 19521
	  <{1,2,840,113549,1,9,4}> when 'true' ->
	      %% Line 19522
	      ( 'dec_messageDigest'/3
		-| [{'id',{0,0,'-getdec_internal_object_set_argument_4/1-fun-2-'}}] )
	  %% Line 19523
	  <{2,16,840,1,113733,1,9,2}> when 'true' ->
	      %% Line 19524
	      ( 'dec_messageType'/3
		-| [{'id',{0,0,'-getdec_internal_object_set_argument_4/1-fun-3-'}}] )
	  %% Line 19525
	  <{2,16,840,1,113733,1,9,3}> when 'true' ->
	      %% Line 19526
	      ( 'dec_pkiStatus'/3
		-| [{'id',{0,0,'-getdec_internal_object_set_argument_4/1-fun-4-'}}] )
	  %% Line 19527
	  <{2,16,840,1,113733,1,9,6}> when 'true' ->
	      %% Line 19528
	      ( 'dec_recipientNonce'/3
		-| [{'id',{0,0,'-getdec_internal_object_set_argument_4/1-fun-5-'}}] )
	  %% Line 19529
	  <{2,16,840,1,113733,1,9,5}> when 'true' ->
	      %% Line 19530
	      ( 'dec_senderNonce'/3
		-| [{'id',{0,0,'-getdec_internal_object_set_argument_4/1-fun-6-'}}] )
	  %% Line 19531
	  <{1,2,840,113549,1,9,5}> when 'true' ->
	      %% Line 19532
	      ( 'dec_signingTime'/3
		-| [{'id',{0,0,'-getdec_internal_object_set_argument_4/1-fun-7-'}}] )
	  %% Line 19533
	  <{2,16,840,1,113733,1,9,7}> when 'true' ->
	      %% Line 19534
	      ( 'dec_transactionID'/3
		-| [{'id',{0,0,'-getdec_internal_object_set_argument_4/1-fun-8-'}}] )
	  %% Line 19535
	  <_cor9> when 'true' ->
	      %% Line 19536
	      ( fun (_cor4,_cor3,_cor2) ->
		    %% Line 19537
		    case _cor3 of
		      %% Line 19538
		      <Bin>
			  when call 'erlang':'is_binary'
				(_cor3) ->
			  %% Line 19539
			  Bin
		      %% Line 19540
		      <_cor11> when 'true' ->
			  %% Line 19541
			  apply 'ber_encode'/1
			      (_cor3)
		    end
		-| [{'id',{0,0,'-getdec_internal_object_set_argument_4/1-fun-9-'}}] )
	end
'getenc_internal_object_set_argument_3'/1 =
    %% Line 19552
    fun (_cor0) ->
	%% Line 19553
	( fun (_cor7,_cor6,_cor5) ->
	      %% Line 19554
	      case _cor6 of
		%% Line 19555
		<{'asn1_OPENTYPE',Bin}>
		    when call 'erlang':'is_binary'
			  (Bin) ->
		    let <_cor1> =
			%% Line 19556
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 19556
			{Bin,_cor1}
		%% Line 19557
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor6) ->
		    let <_cor2> =
			%% Line 19558
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 19558
			{Bin,_cor2}
		%% Line 19559
		<_cor14> when 'true' ->
		    let <_cor3> =
			%% Line 19560
			call 'erlang':'length'
			    (_cor6)
		    in  %% Line 19560
			{_cor6,_cor3}
	      end
	  -| [{'id',{0,0,'-getenc_internal_object_set_argument_3/1-fun-0-'}}] )
'getdec_internal_object_set_argument_3'/1 =
    %% Line 19564
    fun (_cor0) ->
	%% Line 19565
	( fun (_cor4,_cor3,_cor2) ->
	      %% Line 19566
	      case _cor3 of
		%% Line 19567
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor3) ->
		    %% Line 19568
		    Bin
		%% Line 19569
		<_cor11> when 'true' ->
		    %% Line 19570
		    apply 'ber_encode'/1
			(_cor3)
	      end
	  -| [{'id',{0,0,'-getdec_internal_object_set_argument_3/1-fun-0-'}}] )
'getenc_internal_object_set_argument_2'/1 =
    %% Line 19581
    fun (_cor0) ->
	%% Line 19582
	( fun (_cor7,_cor6,_cor5) ->
	      %% Line 19583
	      case _cor6 of
		%% Line 19584
		<{'asn1_OPENTYPE',Bin}>
		    when call 'erlang':'is_binary'
			  (Bin) ->
		    let <_cor1> =
			%% Line 19585
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 19585
			{Bin,_cor1}
		%% Line 19586
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor6) ->
		    let <_cor2> =
			%% Line 19587
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 19587
			{Bin,_cor2}
		%% Line 19588
		<_cor14> when 'true' ->
		    let <_cor3> =
			%% Line 19589
			call 'erlang':'length'
			    (_cor6)
		    in  %% Line 19589
			{_cor6,_cor3}
	      end
	  -| [{'id',{0,0,'-getenc_internal_object_set_argument_2/1-fun-0-'}}] )
'getdec_internal_object_set_argument_2'/1 =
    %% Line 19593
    fun (_cor0) ->
	%% Line 19594
	( fun (_cor4,_cor3,_cor2) ->
	      %% Line 19595
	      case _cor3 of
		%% Line 19596
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor3) ->
		    %% Line 19597
		    Bin
		%% Line 19598
		<_cor11> when 'true' ->
		    %% Line 19599
		    apply 'ber_encode'/1
			(_cor3)
	      end
	  -| [{'id',{0,0,'-getdec_internal_object_set_argument_2/1-fun-0-'}}] )
'getenc_internal_object_set_argument_1'/1 =
    %% Line 19610
    fun (_cor0) ->
	%% Line 19611
	( fun (_cor7,_cor6,_cor5) ->
	      %% Line 19612
	      case _cor6 of
		%% Line 19613
		<{'asn1_OPENTYPE',Bin}>
		    when call 'erlang':'is_binary'
			  (Bin) ->
		    let <_cor1> =
			%% Line 19614
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 19614
			{Bin,_cor1}
		%% Line 19615
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor6) ->
		    let <_cor2> =
			%% Line 19616
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 19616
			{Bin,_cor2}
		%% Line 19617
		<_cor14> when 'true' ->
		    let <_cor3> =
			%% Line 19618
			call 'erlang':'length'
			    (_cor6)
		    in  %% Line 19618
			{_cor6,_cor3}
	      end
	  -| [{'id',{0,0,'-getenc_internal_object_set_argument_1/1-fun-0-'}}] )
'getdec_internal_object_set_argument_1'/1 =
    %% Line 19622
    fun (_cor0) ->
	%% Line 19623
	( fun (_cor4,_cor3,_cor2) ->
	      %% Line 19624
	      case _cor3 of
		%% Line 19625
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor3) ->
		    %% Line 19626
		    Bin
		%% Line 19627
		<_cor11> when 'true' ->
		    %% Line 19628
		    apply 'ber_encode'/1
			(_cor3)
	      end
	  -| [{'id',{0,0,'-getdec_internal_object_set_argument_1/1-fun-0-'}}] )
'getenc_internal_object_set_argument_11'/1 =
    %% Line 19639
    fun (_cor0) ->
	%% Line 19640
	( fun (_cor7,_cor6,_cor5) ->
	      %% Line 19641
	      case _cor6 of
		%% Line 19642
		<{'asn1_OPENTYPE',Bin}>
		    when call 'erlang':'is_binary'
			  (Bin) ->
		    let <_cor1> =
			%% Line 19643
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 19643
			{Bin,_cor1}
		%% Line 19644
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor6) ->
		    let <_cor2> =
			%% Line 19645
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 19645
			{Bin,_cor2}
		%% Line 19646
		<_cor14> when 'true' ->
		    let <_cor3> =
			%% Line 19647
			call 'erlang':'length'
			    (_cor6)
		    in  %% Line 19647
			{_cor6,_cor3}
	      end
	  -| [{'id',{0,0,'-getenc_internal_object_set_argument_11/1-fun-0-'}}] )
'getdec_internal_object_set_argument_11'/1 =
    %% Line 19651
    fun (_cor0) ->
	%% Line 19652
	( fun (_cor4,_cor3,_cor2) ->
	      %% Line 19653
	      case _cor3 of
		%% Line 19654
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor3) ->
		    %% Line 19655
		    Bin
		%% Line 19656
		<_cor11> when 'true' ->
		    %% Line 19657
		    apply 'ber_encode'/1
			(_cor3)
	      end
	  -| [{'id',{0,0,'-getdec_internal_object_set_argument_11/1-fun-0-'}}] )
'getenc_internal_object_set_argument_10'/1 =
    %% Line 19668
    fun (_cor0) ->
	%% Line 19669
	( fun (_cor7,_cor6,_cor5) ->
	      %% Line 19670
	      case _cor6 of
		%% Line 19671
		<{'asn1_OPENTYPE',Bin}>
		    when call 'erlang':'is_binary'
			  (Bin) ->
		    let <_cor1> =
			%% Line 19672
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 19672
			{Bin,_cor1}
		%% Line 19673
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor6) ->
		    let <_cor2> =
			%% Line 19674
			call 'erlang':'byte_size'
			    (Bin)
		    in  %% Line 19674
			{Bin,_cor2}
		%% Line 19675
		<_cor14> when 'true' ->
		    let <_cor3> =
			%% Line 19676
			call 'erlang':'length'
			    (_cor6)
		    in  %% Line 19676
			{_cor6,_cor3}
	      end
	  -| [{'id',{0,0,'-getenc_internal_object_set_argument_10/1-fun-0-'}}] )
'getdec_internal_object_set_argument_10'/1 =
    %% Line 19680
    fun (_cor0) ->
	%% Line 19681
	( fun (_cor4,_cor3,_cor2) ->
	      %% Line 19682
	      case _cor3 of
		%% Line 19683
		<Bin>
		    when call 'erlang':'is_binary'
			  (_cor3) ->
		    %% Line 19684
		    Bin
		%% Line 19685
		<_cor11> when 'true' ->
		    %% Line 19686
		    apply 'ber_encode'/1
			(_cor3)
	      end
	  -| [{'id',{0,0,'-getdec_internal_object_set_argument_10/1-fun-0-'}}] )
'dec-inc-Certificate'/1 =
    %% Line 19693
    fun (_cor0) ->
	%% Line 19694
	apply 'dec-inc-Certificate'/2
	    (_cor0, [16])
'dec-inc-Certificate'/2 =
    %% Line 19696
    fun (_cor1,_cor0) ->
	%% Line 19705
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> = {%% Line 19706
		   'Certificate_tbsCertificate',%% Line 19706
						V1}
	      in  %% Line 19711
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 19712
			    apply 'dec_AlgorithmIdentifier'/2
				(V2, [16])
			in  %% Line 19717
			    case Tlv3 of
			      <[V3|Tlv4]> when 'true' ->
				  let <Term3> =
				      %% Line 19718
				      apply 'decode_compact_bit_string'/2
					  (V3, [3])
				  in  do  %% Line 19720
					  case Tlv4 of
					    %% Line 19721
					    <[]> when 'true' ->
						'ok'
					    %% Line 19721
					    <_cor12> when 'true' ->
						call 'erlang':'exit'
						    ({'error',{'asn1',{'unexpected',Tlv4}}})
					  end
					  %% Line 19723
					  {'Certificate',Term1,Term2,Term3}
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'dec-inc-CertificateList'/1 =
    %% Line 19727
    fun (_cor0) ->
	%% Line 19728
	apply 'dec-inc-CertificateList'/2
	    (_cor0, [16])
'dec-inc-CertificateList'/2 =
    %% Line 19730
    fun (_cor1,_cor0) ->
	%% Line 19739
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  <[V1|Tlv2]> when 'true' ->
	      let <Term1> = {%% Line 19740
		   'CertificateList_tbsCertList',%% Line 19740
						 V1}
	      in  %% Line 19745
		  case Tlv2 of
		    <[V2|Tlv3]> when 'true' ->
			let <Term2> =
			    %% Line 19746
			    apply 'dec_AlgorithmIdentifier'/2
				(V2, [16])
			in  %% Line 19751
			    case Tlv3 of
			      <[V3|Tlv4]> when 'true' ->
				  let <Term3> =
				      %% Line 19752
				      apply 'decode_compact_bit_string'/2
					  (V3, [3])
				  in  do  %% Line 19754
					  case Tlv4 of
					    %% Line 19755
					    <[]> when 'true' ->
						'ok'
					    %% Line 19755
					    <_cor12> when 'true' ->
						call 'erlang':'exit'
						    ({'error',{'asn1',{'unexpected',Tlv4}}})
					  end
					  %% Line 19757
					  {'CertificateList',Term1,Term2,Term3}
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'decode_TBSCert_exclusive'/1 =
    %% Line 19759
    fun (_cor0) ->
	%% Line 19760
	apply 'decode_partial_incomplete'/3
	    ('Certificate', _cor0, ['mandatory'|[[['undec'|[16]]]]])
'decode_TBSCertList_exclusive'/1 =
    %% Line 19761
    fun (_cor0) ->
	%% Line 19762
	apply 'decode_partial_incomplete'/3
	    ('CertificateList', _cor0, ['mandatory'|[[['undec'|[16]]]]])
'decode_inc_disp'/2 =
    %% Line 19763
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'CertificateList_tbsCertList',Data> when 'true' ->
	      %% Line 19764
	      apply 'dec_TBSCertList'/2
		  (Data, [16])
	  %% Line 19765
	  <'Certificate_tbsCertificate',Data> when 'true' ->
	      %% Line 19766
	      apply 'dec_TBSCertificate'/2
		  (Data, [16])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'decode_inc_disp',2}}] )
	    -| ['compiler_generated'] )
	end
'dialyzer-suppressions'/1 =
    %% Line 19772
    fun (_cor0) ->
	let <_cor4> =
	    %% Line 19773
	    call 'erlang':'element'
		(1, _cor0)
	in  let <_cor3> =
		%% Line 19773
		call 'erlang':'element'
		    (2, _cor0)
	    in  let <_cor2> =
		    %% Line 19773
		    call 'erlang':'element'
			(3, _cor0)
		in  let <_cor1> =
			%% Line 19773
			call 'erlang':'element'
			    (4, _cor0)
		    in  do  %% Line 19773
			    apply 'encode_bit_string'/4
				(_cor4, _cor3, _cor2, _cor1)
			    %% Line 19774
			    'ok'
'is_default_1'/1 =
    %% Line 19776
    fun (_cor0) ->
	case _cor0 of
	  <'asn1_DEFAULT'> when 'true' ->
	      %% Line 19777
	      'true'
	  %% Line 19778
	  <20> when 'true' ->
	      %% Line 19779
	      'true'
	  %% Line 19780
	  <_cor2> when 'true' ->
	      %% Line 19781
	      'false'
	end
'is_default_10'/1 =
    %% Line 19784
    fun (_cor0) ->
	case _cor0 of
	  <'asn1_DEFAULT'> when 'true' ->
	      %% Line 19785
	      'true'
	  %% Line 19786
	  <'false'> when 'true' ->
	      %% Line 19787
	      'true'
	  %% Line 19788
	  <_cor2> when 'true' ->
	      %% Line 19789
	      'false'
	end
'is_default_11'/1 =
    %% Line 19792
    fun (_cor0) ->
	case _cor0 of
	  <'asn1_DEFAULT'> when 'true' ->
	      %% Line 19793
	      'true'
	  %% Line 19794
	  <Value> when 'true' ->
	      %% Line 19795
	      try
		  apply 'check_int'/3
		      (Value, 0, [{'v1',0}|[{'v2',1}|[{'v3',2}]]])
	      of <_cor1> ->
		  %% Line 19796
		  'true'
	      catch <_cor5,_cor4,_cor3> ->
		  case <_cor5,_cor4,_cor3> of
		    %% Line 19797
		    <'throw','false',_cor8> when 'true' ->
			'false'
		    ( <_cor5,_cor4,_cor3> when 'true' ->
			  primop 'raise'
			      (_cor3, _cor4)
		      -| ['compiler_generated'] )
		  end
	end
'is_default_2'/1 =
    %% Line 19801
    fun (_cor0) ->
	case _cor0 of
	  <'asn1_DEFAULT'> when 'true' ->
	      %% Line 19802
	      'true'
	  %% Line 19803
	  <Value> when 'true' ->
	      %% Line 19804
	      try
		  apply 'check_int'/3
		      (Value, 1, [{'trailerFieldBC',1}])
	      of <_cor1> ->
		  %% Line 19805
		  'true'
	      catch <_cor5,_cor4,_cor3> ->
		  case <_cor5,_cor4,_cor3> of
		    %% Line 19806
		    <'throw','false',_cor8> when 'true' ->
			'false'
		    ( <_cor5,_cor4,_cor3> when 'true' ->
			  primop 'raise'
			      (_cor3, _cor4)
		      -| ['compiler_generated'] )
		  end
	end
'is_default_3'/1 =
    %% Line 19810
    fun (_cor0) ->
	case _cor0 of
	  <'asn1_DEFAULT'> when 'true' ->
	      %% Line 19811
	      'true'
	  %% Line 19812
	  <'true'> when 'true' ->
	      %% Line 19813
	      'true'
	  %% Line 19814
	  <_cor2> when 'true' ->
	      %% Line 19815
	      'false'
	end
'is_default_4'/1 =
    %% Line 19818
    fun (_cor0) ->
	case _cor0 of
	  <'asn1_DEFAULT'> when 'true' ->
	      %% Line 19819
	      'true'
	  %% Line 19820
	  <Value> when 'true' ->
	      %% Line 19821
	      try
		  apply 'check_legacy_named_bitstring'/4
		      (Value, ['unclassified'], #{#<1>(2,1,'integer',['unsigned'|['big']])}#, 2)
	      of <_cor1> ->
		  %% Line 19822
		  'true'
	      catch <_cor5,_cor4,_cor3> ->
		  case <_cor5,_cor4,_cor3> of
		    %% Line 19823
		    <'throw','false',_cor8> when 'true' ->
			'false'
		    ( <_cor5,_cor4,_cor3> when 'true' ->
			  primop 'raise'
			      (_cor3, _cor4)
		      -| ['compiler_generated'] )
		  end
	end
'is_default_5'/1 =
    %% Line 19827
    fun (_cor0) ->
	case _cor0 of
	  <'asn1_DEFAULT'> when 'true' ->
	      %% Line 19828
	      'true'
	  %% Line 19829
	  <'false'> when 'true' ->
	      %% Line 19830
	      'true'
	  %% Line 19831
	  <_cor2> when 'true' ->
	      %% Line 19832
	      'false'
	end
'is_default_6'/1 =
    %% Line 19835
    fun (_cor0) ->
	case _cor0 of
	  <'asn1_DEFAULT'> when 'true' ->
	      %% Line 19836
	      'true'
	  %% Line 19837
	  <'false'> when 'true' ->
	      %% Line 19838
	      'true'
	  %% Line 19839
	  <_cor2> when 'true' ->
	      %% Line 19840
	      'false'
	end
'is_default_7'/1 =
    %% Line 19843
    fun (_cor0) ->
	case _cor0 of
	  <'asn1_DEFAULT'> when 'true' ->
	      %% Line 19844
	      'true'
	  %% Line 19845
	  <'false'> when 'true' ->
	      %% Line 19846
	      'true'
	  %% Line 19847
	  <_cor2> when 'true' ->
	      %% Line 19848
	      'false'
	end
'is_default_8'/1 =
    %% Line 19851
    fun (_cor0) ->
	case _cor0 of
	  <'asn1_DEFAULT'> when 'true' ->
	      %% Line 19852
	      'true'
	  %% Line 19853
	  <'false'> when 'true' ->
	      %% Line 19854
	      'true'
	  %% Line 19855
	  <_cor2> when 'true' ->
	      %% Line 19856
	      'false'
	end
'is_default_9'/1 =
    %% Line 19859
    fun (_cor0) ->
	case _cor0 of
	  <'asn1_DEFAULT'> when 'true' ->
	      %% Line 19860
	      'true'
	  %% Line 19861
	  <0> when 'true' ->
	      %% Line 19862
	      'true'
	  %% Line 19863
	  <_cor2> when 'true' ->
	      %% Line 19864
	      'false'
	end
'ber_decode_nif'/1 =
    %% Line 19867
    fun (_cor0) ->
	%% Line 19868
	call 'asn1rt_nif':'decode_ber_tlv'
	    (_cor0)
'ber_encode'/1 =
    %% Line 19870
    fun (_cor0) ->
	case _cor0 of
	  <[Tlv|[]]> when 'true' ->
	      %% Line 19871
	      apply 'ber_encode'/1
		  (Tlv)
	  %% Line 19872
	  <Tlv>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 19873
	      Tlv
	  %% Line 19874
	  <Tlv> when 'true' ->
	      %% Line 19875
	      call 'asn1rt_nif':'encode_ber_tlv'
		  (Tlv)
	end
'check_int'/3 =
    %% Line 19877
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Value,_cor7,_cor8>
	      when let <_cor9> =
		    call 'erlang':'=:='
			(_cor7, Value)
		in  let <_cor10> =
			call 'erlang':'is_integer'
			    (Value)
		    in  call 'erlang':'and'
			    (_cor9, _cor10) ->
	      %% Line 19878
	      'true'
	  %% Line 19879
	  <Value,DefValue,NNL>
	      when call 'erlang':'is_atom'
		    (Value) ->
	      %% Line 19880
	      case call 'lists':'keyfind'
		       (Value, 1, NNL) of
		%% Line 19881
		<{_cor11,_cor12}>
		    when call 'erlang':'=:='
			  (_cor12,
			   DefValue) ->
		    %% Line 19882
		    'true'
		%% Line 19883
		<_cor13> when 'true' ->
		    %% Line 19884
		    call 'erlang':'throw'
			('false')
	      end
	  %% Line 19886
	  <_cor14,_cor15,_cor16> when 'true' ->
	      %% Line 19887
	      call 'erlang':'throw'
		  ('false')
	end
'check_legacy_named_bitstring'/4 =
    %% Line 19889
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Val = [Int|_cor32],Names,Bs,BsSize>
	      when %% Line 19890
		call 'erlang':'is_integer'
		    (Int) ->
	      let <_cor6> =
		  %% Line 19893
		  call 'erlang':'length'
		      (Val)
	      in  let <_cor7> =
		      call 'erlang':'+'
			  (_cor6, 7)
		  in  let <_cor5> =
			  call 'erlang':'bsr'
			      (_cor7, 3)
		      in  let <_cor4> =
			      primop 'bs_init_writable'
				  (_cor5)
			  in  let <_cor13> =
				  %% Line 19891
				  ( letrec
					'lbc$^0'/2 =
					    fun (_cor12,_cor11) ->
						case <_cor12,_cor11> of
						  <[%% Line 19893
						    B|_cor10],_cor11> when 'true' ->
						      let <_cor11> =
							  %% Line 19892
							  ( #{#<_cor11>('all',1,'binary',[]),
							      #<B>(1,1,'integer',['unsigned'|['big']])}#
							    -| ['compiler_generated','single_use'] )
						      in  %% Line 19893
							  apply 'lbc$^0'/2
							      (_cor10, _cor11)
						  <[],_cor11> when 'true' ->
						      _cor11
						  ( <_cor12,_cor11> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor12,_cor11})
							  -| [{'function_name',{'lbc$^0',2}}] )
						    -| ['compiler_generated'] )
						end
				    in  apply 'lbc$^0'/2
					    (%% Line 19893
					     Val, _cor4)
				    -| ['list_comprehension'] )
			      in  %% Line 19891
				  apply 'check_named_bitstring'/4
				      (_cor13, %% Line 19895
					       Names, %% Line 19896
						      Bs, %% Line 19897
							  BsSize)
	  %% Line 19898
	  <{Unused,Val0},Names,Bs,BsSize> when 'true' ->
	      let <_cor14> =
		  %% Line 19899
		  call 'erlang':'bit_size'
		      (Val0)
	      in  let <Sz> =
		      %% Line 19899
		      call 'erlang':'-'
			  (_cor14, Unused)
		  in  %% Line 19900
		      case ( Val0
			     -| ['reuse_for_context'] ) of
			<#{#<Val>(Sz,1,'binary',['unsigned'|['big']]),
			   #<_cor33>('all',1,'binary',['unsigned'|['big']])}#> when 'true' ->
			    %% Line 19901
			    apply 'check_named_bitstring'/4
				(Val, Names, Bs, BsSize)
			( <_cor16> when 'true' ->
			      do  primop 'bs_context_to_binary'
				      (_cor16)
				  primop 'match_fail'
				      ({'badmatch',_cor16})
			  -| ['compiler_generated'] )
		      end
	  %% Line 19902
	  <Val,Names,Bs,BsSize>
	      when %% Line 19903
		call 'erlang':'is_integer'
		    (Val) ->
	      let <L> =
		  %% Line 19904
		  apply 'legacy_int_to_bitlist'/1
		      (Val)
	      in  let <_cor20> =
		      %% Line 19907
		      call 'erlang':'length'
			  (L)
		  in  let <_cor21> =
			  call 'erlang':'+'
			      (_cor20, 7)
		      in  let <_cor19> =
			      call 'erlang':'bsr'
				  (_cor21, 3)
			  in  let <_cor18> =
				  primop 'bs_init_writable'
				      (_cor19)
			      in  let <_cor27> =
				      %% Line 19905
				      ( letrec
					    'lbc$^1'/2 =
						fun (_cor26,_cor25) ->
						    case <_cor26,_cor25> of
						      <[%% Line 19907
							B|_cor24],_cor25> when 'true' ->
							  let <_cor25> =
							      %% Line 19906
							      ( #{#<_cor25>('all',1,'binary',[]),
								  #<B>(1,1,'integer',['unsigned'|['big']])}#
								-| ['compiler_generated','single_use'] )
							  in  %% Line 19907
							      apply 'lbc$^1'/2
								  (_cor24, _cor25)
						      <[],_cor25> when 'true' ->
							  _cor25
						      ( <_cor26,_cor25> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor26,_cor25})
							      -| [{'function_name',{'lbc$^1',2}}] )
							-| ['compiler_generated'] )
						    end
					in  apply 'lbc$^1'/2
						(%% Line 19907
						 L, _cor18)
					-| ['list_comprehension'] )
				  in  %% Line 19905
				      apply 'check_named_bitstring'/4
					  (_cor27, %% Line 19909
						   Names, %% Line 19910
							  Bs, %% Line 19911
							      BsSize)
	  %% Line 19912
	  <Val,Names,Bs,BsSize> when 'true' ->
	      %% Line 19913
	      apply 'check_named_bitstring'/4
		  (Val, Names, Bs, BsSize)
	end
'check_named_bitstring'/4 =
    %% Line 19915
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Val = [_cor12|_cor13],Names,_cor14,_cor15> when 'true' ->
	      %% Line 19916
	      case call 'lists':'sort'
		       (Val) of
		%% Line 19917
		<_cor16>
		    when call 'erlang':'=:='
			  (_cor16,
			   Names) ->
		    %% Line 19918
		    'true'
		%% Line 19919
		<_cor17> when 'true' ->
		    %% Line 19920
		    call 'erlang':'throw'
			('false')
	      end
	  %% Line 19922
	  <Bs,_cor18,_cor19,_cor20>
	      when call 'erlang':'=:='
		    (_cor19,
		     Bs) ->
	      %% Line 19923
	      'true'
	  %% Line 19924
	  <Val,_cor21,Bs,BsSize> when 'true' ->
	      let <_cor5> =
		  %% Line 19925
		  call 'erlang':'bit_size'
		      (Val)
	      in  let <Rest> =
		      %% Line 19925
		      call 'erlang':'-'
			  (_cor5, BsSize)
		  in  %% Line 19926
		      case ( Val
			     -| ['reuse_for_context'] ) of
			%% Line 19927
			<#{#<_cor22>(BsSize,1,'binary',['unsigned'|['big']]),
			   #<0>(Rest,1,'integer',['unsigned'|['big']])}#>
			    when call 'erlang':'=:='
				  (_cor22,
				   Bs) ->
			    %% Line 19928
			    'true'
			%% Line 19929
			<_cor23> when 'true' ->
			    %% Line 19930
			    call 'erlang':'throw'
				('false')
		      end
	end
'collect_parts'/1 =
    %% Line 19933
    fun (_cor0) ->
	%% Line 19934
	apply 'collect_parts'/2
	    (_cor0, [])
'collect_parts'/2 =
    %% Line 19936
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{_cor6,L}|Rest],Acc>
	      when call 'erlang':'is_list'
		    (L) ->
	      let <_cor2> =
		  %% Line 19937
		  apply 'collect_parts'/1
		      (L)
	      in  %% Line 19937
		  apply 'collect_parts'/2
		      (Rest, [_cor2|Acc])
	  %% Line 19938
	  <[{3,#{#<Unused>(8,1,'integer',['unsigned'|['big']]),
		 #<Bits>('all',8,'binary',['unsigned'|['big']])}#}|Rest],_X_Acc> when 'true' ->
	      %% Line 19939
	      apply 'collect_parts_bit'/3
		  (Rest, [Bits|[]], Unused)
	  %% Line 19940
	  <[{_X_T,V}|Rest],Acc> when 'true' ->
	      %% Line 19941
	      apply 'collect_parts'/2
		  (Rest, [V|Acc])
	  %% Line 19942
	  <[],Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 19943
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 19943
		  call 'erlang':'list_to_binary'
		      (_cor3)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'collect_parts',2}}] )
	    -| ['compiler_generated'] )
	end
'collect_parts_bit'/3 =
    %% Line 19945
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{3,#{#<Unused>(8,1,'integer',['unsigned'|['big']]),
		 #<Bits>('all',8,'binary',['unsigned'|['big']])}#}|Rest],Acc,Uacc> when 'true' ->
	      let <_cor3> =
		  %% Line 19946
		  call 'erlang':'+'
		      (Unused, Uacc)
	      in  %% Line 19946
		  apply 'collect_parts_bit'/3
		      (Rest, [Bits|Acc], _cor3)
	  %% Line 19947
	  <[],Acc,Uacc> when 'true' ->
	      let <_cor4> =
		  %% Line 19948
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 19948
		  call 'erlang':'list_to_binary'
		      ([Uacc|_cor4])
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'collect_parts_bit',3}}] )
	    -| ['compiler_generated'] )
	end
'dec_subidentifiers'/3 =
    %% Line 19950
    fun (_cor2,_cor1,_cor0) ->
	case <( _cor2
		-| ['reuse_for_context'] ),_cor1,_cor0> of
	  <#{}#,_X_Av,Al> when 'true' ->
	      %% Line 19951
	      call 'lists':'reverse'
		  (Al)
	  %% Line 19952
	  <#{#<1>(1,1,'integer',['unsigned'|['big']]),
	     #<H>(7,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Av,Al> when 'true' ->
	      let <_cor3> =
		  %% Line 19953
		  call 'erlang':'bsl'
		      (Av, 7)
	      in  let <_cor4> =
		      %% Line 19953
		      call 'erlang':'+'
			  (_cor3, H)
		  in  %% Line 19953
		      apply 'dec_subidentifiers'/3
			  (T, _cor4, Al)
	  %% Line 19954
	  <#{#<H>(8,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Av,Al> when 'true' ->
	      let <_cor5> =
		  %% Line 19955
		  call 'erlang':'bsl'
		      (Av, 7)
	      in  let <_cor6> =
		      %% Line 19955
		      call 'erlang':'+'
			  (_cor5, H)
		  in  %% Line 19955
		      apply 'dec_subidentifiers'/3
			  (T, 0, [_cor6|Al])
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor9)
		    ( primop 'match_fail'
			  ({'function_clause',_cor9,_cor8,_cor7})
		      -| [{'function_name',{'dec_subidentifiers',3}}] )
	    -| ['compiler_generated'] )
	end
'decode_BMP_string'/2 =
    %% Line 19957
    fun (_cor1,_cor0) ->
	let <Bin> =
	    %% Line 19958
	    apply 'match_and_collect'/2
		(_cor1, _cor0)
	in  let <_cor3> =
		%% Line 19959
		call 'erlang':'binary_to_list'
		    (Bin)
	    in  %% Line 19959
		apply 'mk_BMP_string'/1
		    (_cor3)
'decode_UTF8_string'/2 =
    %% Line 19961
    fun (_cor1,_cor0) ->
	%% Line 19963
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  %% Line 19964
	  <PartList = [_cor6|_cor7]> when 'true' ->
	      %% Line 19965
	      apply 'collect_parts'/1
		  (PartList)
	  %% Line 19966
	  <Bin> when 'true' ->
	      %% Line 19967
	      Bin
	end
'decode_bitstring2'/3 =
    %% Line 19970
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <1,%% Line 19971
	     Unused,%% Line 19972
		    #{#<B7>(1,1,'integer',['unsigned'|['big']]),
		      #<B6>(1,1,'integer',['unsigned'|['big']]),
		      #<B5>(1,1,'integer',['unsigned'|['big']]),
		      #<B4>(1,1,'integer',['unsigned'|['big']]),
		      #<B3>(1,1,'integer',['unsigned'|['big']]),
		      #<B2>(1,1,'integer',['unsigned'|['big']]),
		      #<B1>(1,1,'integer',['unsigned'|['big']]),
		      #<B0>(1,1,'integer',['unsigned'|['big']]),
		      #<_cor9>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      let <_cor3> =
		  %% Line 19973
		  call 'erlang':'-'
		      (8, Unused)
	      in  %% Line 19973
		  call 'lists':'sublist'
		      ([B7|[B6|[B5|[B4|[B3|[B2|[B1|[B0|[]]]]]]]]], _cor3)
	  %% Line 19974
	  <Len,%% Line 19975
	       Unused,%% Line 19976
		      #{#<B7>(1,1,'integer',['unsigned'|['big']]),
			#<%% Line 19977
			  B6>(%% Line 19977
			      1,1,'integer',['unsigned'|['big']]),
			#<%% Line 19978
			  B5>(%% Line 19978
			      1,1,'integer',['unsigned'|['big']]),
			#<%% Line 19979
			  B4>(%% Line 19979
			      1,1,'integer',['unsigned'|['big']]),
			#<%% Line 19980
			  B3>(%% Line 19980
			      1,1,'integer',['unsigned'|['big']]),
			#<%% Line 19981
			  B2>(%% Line 19981
			      1,1,'integer',['unsigned'|['big']]),
			#<%% Line 19982
			  B1>(%% Line 19982
			      1,1,'integer',['unsigned'|['big']]),
			#<%% Line 19983
			  B0>(%% Line 19983
			      1,1,'integer',['unsigned'|['big']]),
			#<%% Line 19984
			  Buffer>(%% Line 19984
				  'all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      let <_cor4> =
		  %% Line 19985
		  call 'erlang':'-'
		      (Len, 1)
	      in  let <_cor5> =
		      %% Line 19985
		      apply 'decode_bitstring2'/3
			  (_cor4, Unused, Buffer)
		  in  %% Line 19985
		      [B7|[B6|[B5|[B4|[B3|[B2|[B1|[B0|_cor5]]]]]]]]
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'decode_bitstring2',3}}] )
	    -| ['compiler_generated'] )
	end
'decode_bitstring_NNL'/2 =
    %% Line 19987
    fun (_cor1,_cor0) ->
	%% Line 19988
	apply 'decode_bitstring_NNL'/4
	    (_cor1, _cor0, 0, [])
'decode_bitstring_NNL'/4 =
    %% Line 19990
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_cor12,_X_No,Result> when 'true' ->
	      %% Line 19991
	      call 'lists':'reverse'
		  (Result)
	  %% Line 19992
	  <[B|BitList],%% Line 19993
		       [{Name,No}|NamedNumberList],_cor13,%% Line 19995
							  Result>
	      when call 'erlang':'=:='
		    (_cor13,
		     %% Line 19994
		     No) ->
	      %% Line 19996
	      case <> of
		%% Line 19997
		<>
		    when call 'erlang':'=:='
			  (B,
			   0) ->
		    let <_cor4> =
			%% Line 20000
			call 'erlang':'+'
			    (No, 1)
		    in  %% Line 19998
			apply 'decode_bitstring_NNL'/4
			    (BitList, %% Line 19999
				      NamedNumberList, _cor4, %% Line 20001
							      Result)
		%% Line 20002
		<> when 'true' ->
		    let <_cor5> =
			%% Line 20005
			call 'erlang':'+'
			    (No, 1)
		    in  %% Line 20003
			apply 'decode_bitstring_NNL'/4
			    (BitList, %% Line 20004
				      NamedNumberList, _cor5, %% Line 20006
							      [Name|Result])
	      end
	  %% Line 20008
	  <[1|BitList],NamedNumberList,No,Result> when 'true' ->
	      let <_cor6> =
		  %% Line 20011
		  call 'erlang':'+'
		      (No, 1)
	      in  %% Line 20009
		  apply 'decode_bitstring_NNL'/4
		      (BitList, %% Line 20010
				NamedNumberList, _cor6, %% Line 20012
							[{'bit',No}|Result])
	  %% Line 20013
	  <[0|BitList],NamedNumberList,No,Result> when 'true' ->
	      let <_cor7> =
		  %% Line 20014
		  call 'erlang':'+'
		      (No, 1)
	      in  %% Line 20014
		  apply 'decode_bitstring_NNL'/4
		      (BitList, NamedNumberList, _cor7, Result)
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'decode_bitstring_NNL',4}}] )
	    -| ['compiler_generated'] )
	end
'decode_boolean'/2 =
    %% Line 20016
    fun (_cor1,_cor0) ->
	let <Val> =
	    %% Line 20017
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 20018
	    case ( Val
		   -| ['reuse_for_context'] ) of
	      %% Line 20019
	      <#{#<0>(8,1,'integer',['unsigned'|['big']])}#> when 'true' ->
		  %% Line 20020
		  'false'
	      %% Line 20021
	      <#{#<_cor6>(8,1,'integer',['unsigned'|['big']])}#> when 'true' ->
		  %% Line 20022
		  'true'
	      %% Line 20023
	      <_cor7> when 'true' ->
		  do  primop 'bs_context_to_binary'
			  (Val)
		      %% Line 20024
		      call 'erlang':'exit'
			  ({'error',{'asn1',{'decode_boolean',Val}}})
	    end
'decode_compact_bit_string'/2 =
    %% Line 20027
    fun (_cor1,_cor0) ->
	%% Line 20028
	case apply 'match_and_collect'/2
		 (_cor1, _cor0) of
	  %% Line 20029
	  <#{#<0>(8,1,'integer',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 20030
	      {0,#{}#}
	  %% Line 20031
	  <#{#<Unused>(8,1,'integer',['unsigned'|['big']]),
	     #<Bits>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 20032
	      {Unused,Bits}
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'decode_constr_indef_incomplete'/3 =
    %% Line 20035
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,( _cor1
		      -| ['reuse_for_context'] ),_cor0> of
	  <_X_TagMatch,#{#<0>(8,1,'integer',['unsigned'|['big']]),
			 #<0>(8,1,'integer',['unsigned'|['big']]),
			 #<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 20036
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 20036
		  {_cor3,Rest}
	  %% Line 20037
	  <[Tag|RestTags],Bin,Acc> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Bin)
		  %% Line 20038
		  case apply 'decode_primitive_incomplete'/2
			   ([Tag|[]], Bin) of
		    %% Line 20039
		    <{Tlv,Rest}> when 'true' ->
			%% Line 20040
			apply 'decode_constr_indef_incomplete'/3
			    (RestTags, Rest, [Tlv|Acc])
		    %% Line 20041
		    <'asn1_NOVALUE'> when 'true' ->
			%% Line 20042
			apply 'decode_constr_indef_incomplete'/3
			    (RestTags, Bin, Acc)
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor6)
		    ( primop 'match_fail'
			  ({'function_clause',_cor7,_cor6,_cor5})
		      -| [{'function_name',{'decode_constr_indef_incomplete',3}}] )
	    -| ['compiler_generated'] )
	end
'decode_constructed'/1 =
    %% Line 20045
    fun (_cor0) ->
	case _cor0 of
	  <Bin>
	      when try
		    let <_cor1> =
			call 'erlang':'byte_size'
			    (_cor0)
		    in  call 'erlang':'=:='
			    (_cor1, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 20046
	      []
	  %% Line 20047
	  <Bin> when 'true' ->
	      %% Line 20048
	      case apply 'decode_primitive'/1
		       (Bin) of
		<{Tlv,Rest}> when 'true' ->
		    let <_cor3> =
			%% Line 20049
			apply 'decode_constructed'/1
			    (Rest)
		    in  %% Line 20049
			[Tlv|_cor3]
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	end
'decode_constructed_incomplete'/2 =
    %% Line 20051
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Tags = [Ts|[]]|[]],Bin>
	      when call 'erlang':'is_list'
		    (Ts) ->
	      %% Line 20052
	      apply 'decode_constructed_incomplete'/2
		  (Tags, Bin)
	  %% Line 20053
	  <_X_TagMatch,#{}#> when 'true' ->
	      %% Line 20054
	      []
	  %% Line 20055
	  <['mandatory'|RestTag],Bin> when 'true' ->
	      %% Line 20056
	      case apply 'decode_primitive'/1
		       (Bin) of
		<{Tlv,Rest}> when 'true' ->
		    let <_cor3> =
			%% Line 20057
			apply 'decode_constructed_incomplete'/2
			    (RestTag, Rest)
		    in  %% Line 20057
			[Tlv|_cor3]
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 20058
	  <Directives = [[Alt|[_cor23|[]]]|_cor24],Bin>
	      when let <_cor4> =
		    %% Line 20059
		    call 'erlang':'=:='
			(Alt, 'alt_undec')
		in  let <_cor5> =
			%% Line 20059
			call 'erlang':'=:='
			    (Alt, 'alt')
		    in  let <_cor6> =
			    %% Line 20059
			    call 'erlang':'=:='
				(Alt, 'alt_parts')
			in  let <_cor7> =
				%% Line 20059
				call 'erlang':'or'
				    (_cor5, _cor6)
			    in  %% Line 20059
				call 'erlang':'or'
				    (_cor4, _cor7) ->
	      %% Line 20060
	      case apply 'decode_tag_and_length'/1
		       (Bin) of
		<{_X_Form,TagNo,V,Rest}> when 'true' ->
		    %% Line 20061
		    case apply 'incomplete_choice_alt'/2
			     (TagNo, Directives) of
		      %% Line 20062
		      <{'alt_undec',_cor25}> when 'true' ->
			  let <_cor10> =
			      %% Line 20063
			      call 'erlang':'byte_size'
				  (Bin)
			  in  let <_cor9> =
				  %% Line 20063
				  call 'erlang':'byte_size'
				      (Rest)
			      in  let <LenA> =
				      %% Line 20063
				      call 'erlang':'-'
					  (_cor10, _cor9)
				  in  %% Line 20064
				      case ( Bin
					     -| ['reuse_for_context'] ) of
					<#{#<A>(LenA,8,'binary',['unsigned'|['big']]),
					   #<_cor26>('all',8,'binary',['unsigned'|['big']])}#>
					    when call 'erlang':'=:='
						  (_cor26,
						   Rest) ->
					    %% Line 20065
					    A
					( <_cor12> when 'true' ->
					      do  primop 'bs_context_to_binary'
						      (_cor12)
						  primop 'match_fail'
						      ({'badmatch',_cor12})
					  -| ['compiler_generated'] )
				      end
		      %% Line 20066
		      <{'alt',InnerDirectives}> when 'true' ->
			  %% Line 20067
			  case apply 'decode_primitive_incomplete'/2
				   (InnerDirectives, V) of
			    <{Tlv,_cor27}>
				when call 'erlang':'=:='
				      (_cor27,
				       Rest) ->
				%% Line 20068
				{TagNo,Tlv}
			    ( <_cor13> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor13})
			      -| ['compiler_generated'] )
			  end
		      %% Line 20069
		      <{'alt_parts',_cor28}> when 'true' ->
			  let <_cor14> =
			      %% Line 20070
			      apply 'decode_parts_incomplete'/1
				  (V)
			  in  %% Line 20070
			      [{TagNo,_cor14}|[]]
		      %% Line 20071
		      <'no_match'> when 'true' ->
			  %% Line 20072
			  case apply 'decode_primitive'/1
				   (Bin) of
			    <{Tlv,_cor29}> when 'true' ->
				%% Line 20073
				Tlv
			    ( <_cor15> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor15})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor16> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor16})
			-| ['compiler_generated'] )
		    end
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 20075
	  <[TagNo|RestTag],Bin> when 'true' ->
	      %% Line 20076
	      case apply 'decode_primitive_incomplete'/2
		       ([TagNo|[]], Bin) of
		%% Line 20077
		<{Tlv,Rest}> when 'true' ->
		    let <_cor17> =
			%% Line 20078
			apply 'decode_constructed_incomplete'/2
			    (RestTag, Rest)
		    in  %% Line 20078
			[Tlv|_cor17]
		%% Line 20079
		<'asn1_NOVALUE'> when 'true' ->
		    %% Line 20080
		    apply 'decode_constructed_incomplete'/2
			(RestTag, Bin)
		( <_cor18> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor18})
		  -| ['compiler_generated'] )
	      end
	  %% Line 20082
	  <[],Bin> when 'true' ->
	      %% Line 20083
	      case apply 'decode_primitive'/1
		       (Bin) of
		<{Tlv,Rest}> when 'true' ->
		    let <_cor20> =
			%% Line 20084
			apply 'decode_constructed_incomplete'/2
			    ([], Rest)
		    in  %% Line 20084
			[Tlv|_cor20]
		( <_cor19> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor19})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21})
		  -| [{'function_name',{'decode_constructed_incomplete',2}}] )
	    -| ['compiler_generated'] )
	end
'decode_constructed_indefinite'/2 =
    %% Line 20086
    fun (_cor1,_cor0) ->
	case <( _cor1
		-| ['reuse_for_context'] ),_cor0> of
	  <#{#<0>(8,1,'integer',['unsigned'|['big']]),
	     #<0>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#,Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 20087
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 20087
		  {_cor2,Rest}
	  %% Line 20088
	  <Bin,Acc> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Bin)
		  %% Line 20089
		  case apply 'decode_primitive'/1
			   (Bin) of
		    <{Tlv,Rest}> when 'true' ->
			%% Line 20090
			apply 'decode_constructed_indefinite'/2
			    (Rest, [Tlv|Acc])
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	end
'decode_incomplete2'/5 =
    %% Line 20092
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Form = 2,TagNo,V,TagMatch,_cor13> when 'true' ->
	      %% Line 20093
	      case apply 'decode_constr_indef_incomplete'/3
		       (TagMatch, V, []) of
		<{Vlist,Rest2}> when 'true' ->
		    %% Line 20094
		    {{TagNo,Vlist},Rest2}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 20095
	  <1,TagNo,V,[TagMatch|[]],Rest>
	      when call 'erlang':'is_list'
		    (TagMatch) ->
	      let <_cor6> =
		  %% Line 20096
		  apply 'decode_constructed_incomplete'/2
		      (TagMatch, V)
	      in  %% Line 20096
		  {{TagNo,_cor6},Rest}
	  %% Line 20097
	  <1,TagNo,V,TagMatch,Rest> when 'true' ->
	      let <_cor7> =
		  %% Line 20098
		  apply 'decode_constructed_incomplete'/2
		      (TagMatch, V)
	      in  %% Line 20098
		  {{TagNo,_cor7},Rest}
	  %% Line 20099
	  <0,TagNo,V,_X_TagMatch,Rest> when 'true' ->
	      %% Line 20100
	      {{TagNo,V},Rest}
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'decode_incomplete2',5}}] )
	    -| ['compiler_generated'] )
	end
'decode_incomplete_bin'/1 =
    %% Line 20102
    fun (_cor0) ->
	%% Line 20103
	case apply 'skip_tag'/1
		 (_cor0) of
	  <{'ok',Rest}> when 'true' ->
	      %% Line 20104
	      case apply 'skip_length_and_value'/1
		       (Rest) of
		<{'ok',Rest2}> when 'true' ->
		    let <_cor4> =
			%% Line 20105
			call 'erlang':'byte_size'
			    (_cor0)
		    in  let <_cor3> =
			    %% Line 20105
			    call 'erlang':'byte_size'
				(Rest2)
			in  let <IncLen> =
				%% Line 20105
				call 'erlang':'-'
				    (_cor4, _cor3)
			    in  %% Line 20106
				case ( _cor0
				       -| ['reuse_for_context'] ) of
				  <#{#<IncBin>(IncLen,8,'binary',['unsigned'|['big']]),
				     #<Ret>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
				      %% Line 20107
				      {IncBin,Ret}
				  ( <_cor6> when 'true' ->
					do  primop 'bs_context_to_binary'
						(_cor6)
					    primop 'match_fail'
						({'badmatch',_cor6})
				    -| ['compiler_generated'] )
				end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'decode_integer'/2 =
    %% Line 20109
    fun (_cor1,_cor0) ->
	let <Bin> =
	    %% Line 20110
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  let <Len> =
		%% Line 20111
		call 'erlang':'byte_size'
		    (Bin)
	    in  %% Line 20112
		case ( Bin
		       -| ['reuse_for_context'] ) of
		  <#{#<Int>(Len,8,'integer',['signed'|['big']])}#> when 'true' ->
		      %% Line 20113
		      Int
		  ( <_cor4> when 'true' ->
			do  primop 'bs_context_to_binary'
				(_cor4)
			    primop 'match_fail'
				({'badmatch',_cor4})
		    -| ['compiler_generated'] )
		end
'decode_length'/1 =
    %% Line 20115
    fun (_cor0) ->
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <#{#<1>(1,1,'integer',['unsigned'|['big']]),
	     #<0>(7,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 20116
	      {'indefinite',T}
	  %% Line 20117
	  <#{#<0>(1,1,'integer',['unsigned'|['big']]),
	     #<Length>(7,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 20118
	      {Length,T}
	  %% Line 20119
	  <#{#<1>(1,1,'integer',['unsigned'|['big']]),
	     #<LL>(7,1,'integer',['unsigned'|['big']]),
	     #<Length>(LL,8,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 20120
	      {Length,T}
	  ( <_cor1> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor1)
		    ( primop 'match_fail'
			  ({'function_clause',_cor1})
		      -| [{'function_name',{'decode_length',1}}] )
	    -| ['compiler_generated'] )
	end
'decode_named_bit_string'/3 =
    %% Line 20122
    fun (_cor2,_cor1,_cor0) ->
	%% Line 20123
	case apply 'match_and_collect'/2
		 (_cor2, _cor0) of
	  %% Line 20124
	  <#{#<0>(8,1,'integer',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 20125
	      []
	  %% Line 20126
	  <#{#<Unused>(8,1,'integer',['unsigned'|['big']]),
	     #<Bits>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      let <_cor3> =
		  %% Line 20127
		  call 'erlang':'byte_size'
		      (Bits)
	      in  let <BitString> =
		      %% Line 20127
		      apply 'decode_bitstring2'/3
			  (_cor3, Unused, Bits)
		  in  %% Line 20128
		      apply 'decode_bitstring_NNL'/2
			  (BitString, _cor1)
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'decode_null'/2 =
    %% Line 20131
    fun (_cor1,_cor0) ->
	let <Val> =
	    %% Line 20132
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 20133
	    case Val of
	      %% Line 20134
	      <#{}#> when 'true' ->
		  %% Line 20135
		  'NULL'
	      %% Line 20136
	      <_cor6> when 'true' ->
		  %% Line 20137
		  call 'erlang':'exit'
		      ({'error',{'asn1',{'decode_null',Val}}})
	    end
'decode_object_identifier'/2 =
    %% Line 20140
    fun (_cor1,_cor0) ->
	let <Val> =
	    %% Line 20141
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 20142
	    case apply 'dec_subidentifiers'/3
		     (Val, 0, []) of
	      <[AddedObjVal|ObjVals]> when 'true' ->
		  let <Val1,Val2> =
		      %% Line 20144
		      case <> of
			%% Line 20145
			<>
			    when call 'erlang':'<'
				  (AddedObjVal,
				   40) ->
			    %% Line 20146
			    <0,AddedObjVal>
			%% Line 20147
			<>
			    when call 'erlang':'<'
				  (AddedObjVal,
				   80) ->
			    let <_cor4> =
				%% Line 20148
				call 'erlang':'-'
				    (AddedObjVal, 40)
			    in  %% Line 20148
				<1,_cor4>
			%% Line 20149
			<> when 'true' ->
			    let <_cor5> =
				%% Line 20150
				call 'erlang':'-'
				    (AddedObjVal, 80)
			    in  %% Line 20150
				<2,_cor5>
		      end
		  in  %% Line 20152
		      call 'erlang':'list_to_tuple'
			  ([Val1|[Val2|ObjVals]])
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'decode_open_type'/2 =
    %% Line 20154
    fun (_cor1,_cor0) ->
	%% Line 20155
	case apply 'match_tags'/2
		 (_cor1, _cor0) of
	  %% Line 20156
	  <Bin>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      %% Line 20157
	      case apply 'ber_decode_nif'/1
		       (Bin) of
		<{InnerTlv,_cor6}> when 'true' ->
		    %% Line 20158
		    InnerTlv
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 20159
	  <TlvBytes> when 'true' ->
	      %% Line 20160
	      TlvBytes
	end
'decode_open_type_as_binary'/2 =
    %% Line 20163
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 20164
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 20164
	    apply 'ber_encode'/1
		(_cor2)
'decode_parts_incomplete'/1 =
    %% Line 20166
    fun (_cor0) ->
	case _cor0 of
	  <#{}#> when 'true' ->
	      %% Line 20167
	      []
	  %% Line 20168
	  <Bin> when 'true' ->
	      %% Line 20169
	      case apply 'skip_tag'/1
		       (Bin) of
		<{'ok',Rest}> when 'true' ->
		    %% Line 20170
		    case apply 'skip_length_and_value'/1
			     (Rest) of
		      <{'ok',Rest2}> when 'true' ->
			  let <_cor4> =
			      %% Line 20171
			      call 'erlang':'byte_size'
				  (Bin)
			  in  let <_cor3> =
				  %% Line 20171
				  call 'erlang':'byte_size'
				      (Rest2)
			      in  let <LenPart> =
				      %% Line 20171
				      call 'erlang':'-'
					  (_cor4, _cor3)
				  in  %% Line 20172
				      case ( Bin
					     -| ['reuse_for_context'] ) of
					<#{#<Part>(LenPart,8,'binary',['unsigned'|['big']]),
					   #<RestBin>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
					    let <_cor7> =
						%% Line 20173
						apply 'decode_parts_incomplete'/1
						    (RestBin)
					    in  %% Line 20173
						[Part|_cor7]
					( <_cor6> when 'true' ->
					      do  primop 'bs_context_to_binary'
						      (_cor6)
						  primop 'match_fail'
						      ({'badmatch',_cor6})
					  -| ['compiler_generated'] )
				      end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	end
'decode_primitive'/1 =
    %% Line 20175
    fun (_cor0) ->
	%% Line 20176
	case apply 'decode_tag_and_length'/1
		 (_cor0) of
	  <{Form,TagNo,V,Rest}> when 'true' ->
	      %% Line 20177
	      case Form of
		%% Line 20178
		<1> when 'true' ->
		    let <_cor2> =
			%% Line 20179
			apply 'decode_constructed'/1
			    (V)
		    in  %% Line 20179
			{{TagNo,_cor2},Rest}
		%% Line 20180
		<0> when 'true' ->
		    %% Line 20181
		    {{TagNo,V},Rest}
		%% Line 20182
		<2> when 'true' ->
		    %% Line 20183
		    case apply 'decode_constructed_indefinite'/2
			     (V, []) of
		      <{Vlist,Rest2}> when 'true' ->
			  %% Line 20184
			  {{TagNo,Vlist},Rest2}
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'decode_primitive_incomplete'/2 =
    %% Line 20187
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[['default'|[TagNo|[]]]|[]],Bin> when 'true' ->
	      %% Line 20188
	      case apply 'decode_tag_and_length'/1
		       (Bin) of
		%% Line 20189
		<{Form,_cor19,V,Rest}>
		    when call 'erlang':'=:='
			  (_cor19,
			   TagNo) ->
		    %% Line 20190
		    apply 'decode_incomplete2'/5
			(Form, TagNo, V, [], Rest)
		%% Line 20191
		<_cor20> when 'true' ->
		    %% Line 20192
		    'asn1_NOVALUE'
	      end
	  %% Line 20194
	  <[['default'|[TagNo|[Directives|[]]]]|[]],Bin> when 'true' ->
	      %% Line 20195
	      case apply 'decode_tag_and_length'/1
		       (Bin) of
		%% Line 20196
		<{Form,_cor21,V,Rest}>
		    when call 'erlang':'=:='
			  (_cor21,
			   TagNo) ->
		    %% Line 20197
		    apply 'decode_incomplete2'/5
			(Form, TagNo, V, Directives, Rest)
		%% Line 20198
		<_cor22> when 'true' ->
		    %% Line 20199
		    'asn1_NOVALUE'
	      end
	  %% Line 20201
	  <[['opt'|[TagNo|[]]]|[]],Bin> when 'true' ->
	      %% Line 20202
	      case apply 'decode_tag_and_length'/1
		       (Bin) of
		%% Line 20203
		<{Form,_cor23,V,Rest}>
		    when call 'erlang':'=:='
			  (_cor23,
			   TagNo) ->
		    %% Line 20204
		    apply 'decode_incomplete2'/5
			(Form, TagNo, V, [], Rest)
		%% Line 20205
		<_cor24> when 'true' ->
		    %% Line 20206
		    'asn1_NOVALUE'
	      end
	  %% Line 20208
	  <[['opt'|[TagNo|[Directives|[]]]]|[]],Bin> when 'true' ->
	      %% Line 20209
	      case apply 'decode_tag_and_length'/1
		       (Bin) of
		%% Line 20210
		<{Form,_cor25,V,Rest}>
		    when call 'erlang':'=:='
			  (_cor25,
			   TagNo) ->
		    %% Line 20211
		    apply 'decode_incomplete2'/5
			(Form, TagNo, V, Directives, Rest)
		%% Line 20212
		<_cor26> when 'true' ->
		    %% Line 20213
		    'asn1_NOVALUE'
	      end
	  %% Line 20215
	  <[['opt_undec'|[Tag|[]]]|[]],Bin> when 'true' ->
	      %% Line 20216
	      case apply 'decode_tag_and_length'/1
		       (Bin) of
		%% Line 20217
		<{_cor27,_cor28,_cor29,_cor30}>
		    when call 'erlang':'=:='
			  (_cor28,
			   Tag) ->
		    %% Line 20218
		    apply 'decode_incomplete_bin'/1
			(Bin)
		%% Line 20219
		<_cor31> when 'true' ->
		    %% Line 20220
		    'asn1_NOVALUE'
	      end
	  %% Line 20222
	  <[['alt_undec'|[TagNo|[]]]|RestAlts],Bin> when 'true' ->
	      %% Line 20223
	      case apply 'decode_tag_and_length'/1
		       (Bin) of
		%% Line 20224
		<{_cor32,_cor33,_cor34,_cor35}>
		    when call 'erlang':'=:='
			  (_cor33,
			   TagNo) ->
		    %% Line 20225
		    apply 'decode_incomplete_bin'/1
			(Bin)
		%% Line 20226
		<_cor36> when 'true' ->
		    %% Line 20227
		    apply 'decode_primitive_incomplete'/2
			(RestAlts, Bin)
	      end
	  %% Line 20229
	  <[['alt'|[TagNo|[]]]|RestAlts],Bin> when 'true' ->
	      %% Line 20230
	      case apply 'decode_tag_and_length'/1
		       (Bin) of
		%% Line 20231
		<{_X_Form,_cor37,V,Rest}>
		    when call 'erlang':'=:='
			  (_cor37,
			   TagNo) ->
		    %% Line 20232
		    {{TagNo,V},Rest}
		%% Line 20233
		<_cor38> when 'true' ->
		    %% Line 20234
		    apply 'decode_primitive_incomplete'/2
			(RestAlts, Bin)
	      end
	  %% Line 20236
	  <[['alt'|[TagNo|[Directives|[]]]]|RestAlts],Bin> when 'true' ->
	      %% Line 20237
	      case apply 'decode_tag_and_length'/1
		       (Bin) of
		%% Line 20238
		<{Form,_cor39,V,Rest}>
		    when call 'erlang':'=:='
			  (_cor39,
			   TagNo) ->
		    %% Line 20239
		    apply 'decode_incomplete2'/5
			(Form, TagNo, V, Directives, Rest)
		%% Line 20240
		<_cor40> when 'true' ->
		    %% Line 20241
		    apply 'decode_primitive_incomplete'/2
			(RestAlts, Bin)
	      end
	  %% Line 20243
	  <[['alt_parts'|[TagNo|[]]]|[]],Bin> when 'true' ->
	      %% Line 20244
	      case apply 'decode_tag_and_length'/1
		       (Bin) of
		%% Line 20245
		<{_X_Form,_cor41,V,Rest}>
		    when call 'erlang':'=:='
			  (_cor41,
			   TagNo) ->
		    %% Line 20246
		    {{TagNo,V},Rest}
		%% Line 20247
		<_cor42> when 'true' ->
		    %% Line 20248
		    'asn1_NOVALUE'
	      end
	  %% Line 20250
	  <[['alt_parts'|[TagNo|[]]]|RestAlts],Bin> when 'true' ->
	      %% Line 20251
	      case apply 'decode_tag_and_length'/1
		       (Bin) of
		%% Line 20252
		<{_X_Form,_cor43,V,Rest}>
		    when call 'erlang':'=:='
			  (_cor43,
			   TagNo) ->
		    let <_cor11> =
			%% Line 20253
			apply 'decode_parts_incomplete'/1
			    (V)
		    in  %% Line 20253
			{{TagNo,_cor11},Rest}
		%% Line 20254
		<_cor44> when 'true' ->
		    %% Line 20255
		    apply 'decode_primitive_incomplete'/2
			(RestAlts, Bin)
	      end
	  %% Line 20257
	  <[['undec'|[_X_TagNo|[]]]|_X_RestTag],Bin> when 'true' ->
	      %% Line 20258
	      apply 'decode_incomplete_bin'/1
		  (Bin)
	  %% Line 20259
	  <[['parts'|[TagNo|[]]]|_X_RestTag],Bin> when 'true' ->
	      %% Line 20260
	      case apply 'decode_tag_and_length'/1
		       (Bin) of
		%% Line 20261
		<{_X_Form,_cor45,V,Rest}>
		    when call 'erlang':'=:='
			  (_cor45,
			   TagNo) ->
		    let <_cor13> =
			%% Line 20262
			apply 'decode_parts_incomplete'/1
			    (V)
		    in  %% Line 20262
			{{TagNo,_cor13},Rest}
		%% Line 20263
		<Err> when 'true' ->
		    %% Line 20264
		    {'error',{'asn1',[116|[97|[103|[32|[102|[97|[105|[108|[117|[114|[101]]]]]]]]]]],TagNo,Err}}
	      end
	  %% Line 20266
	  <['mandatory'|RestTag],Bin> when 'true' ->
	      %% Line 20267
	      case apply 'decode_tag_and_length'/1
		       (Bin) of
		<{Form,TagNo,V,Rest}> when 'true' ->
		    %% Line 20268
		    apply 'decode_incomplete2'/5
			(Form, TagNo, V, RestTag, Rest)
		( <_cor15> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor15})
		  -| ['compiler_generated'] )
	      end
	  %% Line 20269
	  <[['mandatory'|Directives]|[]],Bin> when 'true' ->
	      %% Line 20270
	      case apply 'decode_tag_and_length'/1
		       (Bin) of
		<{Form,TagNo,V,Rest}> when 'true' ->
		    %% Line 20271
		    apply 'decode_incomplete2'/5
			(Form, TagNo, V, Directives, Rest)
		( <_cor16> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor16})
		  -| ['compiler_generated'] )
	      end
	  %% Line 20272
	  <[],Bin> when 'true' ->
	      %% Line 20273
	      apply 'decode_primitive'/1
		  (Bin)
	  ( <_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17})
		  -| [{'function_name',{'decode_primitive_incomplete',2}}] )
	    -| ['compiler_generated'] )
	end
'decode_restricted_string'/2 =
    %% Line 20275
    fun (_cor1,_cor0) ->
	%% Line 20276
	apply 'match_and_collect'/2
	    (_cor1, _cor0)
'decode_tag'/2 =
    %% Line 20278
    fun (_cor1,_cor0) ->
	case <( _cor1
		-| ['reuse_for_context'] ),_cor0> of
	  <#{#<0>(1,1,'integer',['unsigned'|['big']]),
	     #<PartialTag>(7,1,'integer',['unsigned'|['big']]),
	     #<Buffer>('all',8,'binary',['unsigned'|['big']])}#,TagAck> when 'true' ->
	      let <_cor2> =
		  %% Line 20279
		  call 'erlang':'bsl'
		      (TagAck, 7)
	      in  let <TagNo> =
		      %% Line 20279
		      call 'erlang':'bor'
			  (_cor2, PartialTag)
		  in  %% Line 20280
		      {TagNo,Buffer}
	  %% Line 20281
	  <#{#<_cor8>(1,1,'integer',['unsigned'|['big']]),
	     #<PartialTag>(7,1,'integer',['unsigned'|['big']]),
	     #<Buffer>('all',8,'binary',['unsigned'|['big']])}#,TagAck> when 'true' ->
	      let <_cor4> =
		  %% Line 20282
		  call 'erlang':'bsl'
		      (TagAck, 7)
	      in  let <TagAck1> =
		      %% Line 20282
		      call 'erlang':'bor'
			  (_cor4, PartialTag)
		  in  %% Line 20283
		      apply 'decode_tag'/2
			  (Buffer, TagAck1)
	  ( <_cor7,_cor6> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor7)
		    ( primop 'match_fail'
			  ({'function_clause',_cor7,_cor6})
		      -| [{'function_name',{'decode_tag',2}}] )
	    -| ['compiler_generated'] )
	end
'decode_tag_and_length'/1 =
    %% Line 20285
    fun (_cor0) ->
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <#{#<Class>(2,1,'integer',['unsigned'|['big']]),
	     #<%% Line 20286
	       Form>(%% Line 20286
		     1,1,'integer',['unsigned'|['big']]),
	     #<%% Line 20287
	       TagNo>(%% Line 20287
		      5,1,'integer',['unsigned'|['big']]),
	     #<%% Line 20288
	       0>(%% Line 20288
		  1,1,'integer',['unsigned'|['big']]),
	     #<%% Line 20289
	       Length>(%% Line 20289
		       7,1,'integer',['unsigned'|['big']]),
	     #<%% Line 20290
	       V>(%% Line 20289
		  Length,8,'binary',['unsigned'|['big']]),
	     #<%% Line 20291
	       RestBuffer>(%% Line 20291
			   'all',8,'binary',['unsigned'|['big']])}#>
	      when %% Line 20292
		call 'erlang':'<'
		    (TagNo,
		     31) ->
	      let <_cor1> =
		  %% Line 20293
		  call 'erlang':'bsl'
		      (Class, 16)
	      in  let <_cor2> =
		      %% Line 20293
		      call 'erlang':'bor'
			  (_cor1, TagNo)
		  in  %% Line 20293
		      {Form,_cor2,V,RestBuffer}
	  %% Line 20294
	  <#{#<Class>(2,1,'integer',['unsigned'|['big']]),
	     #<1>(1,1,'integer',['unsigned'|['big']]),
	     #<TagNo>(5,1,'integer',['unsigned'|['big']]),
	     #<1>(1,1,'integer',['unsigned'|['big']]),
	     #<0>(7,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#>
	      when %% Line 20295
		call 'erlang':'<'
		    (TagNo,
		     31) ->
	      let <_cor3> =
		  %% Line 20296
		  call 'erlang':'bsl'
		      (Class, 16)
	      in  let <_cor4> =
		      %% Line 20296
		      call 'erlang':'+'
			  (_cor3, TagNo)
		  in  %% Line 20296
		      {2,_cor4,T,#{}#}
	  %% Line 20297
	  <#{#<Class>(2,1,'integer',['unsigned'|['big']]),
	     #<%% Line 20298
	       Form>(%% Line 20298
		     1,1,'integer',['unsigned'|['big']]),
	     #<%% Line 20299
	       TagNo>(%% Line 20299
		      5,1,'integer',['unsigned'|['big']]),
	     #<%% Line 20300
	       1>(%% Line 20300
		  1,1,'integer',['unsigned'|['big']]),
	     #<%% Line 20301
	       LL>(%% Line 20301
		   7,1,'integer',['unsigned'|['big']]),
	     #<%% Line 20302
	       Length>(%% Line 20301
		       LL,8,'integer',['unsigned'|['big']]),
	     #<%% Line 20303
	       V>(%% Line 20302
		  Length,8,'binary',['unsigned'|['big']]),
	     #<%% Line 20304
	       T>(%% Line 20304
		  'all',8,'binary',['unsigned'|['big']])}#>
	      when %% Line 20305
		call 'erlang':'<'
		    (TagNo,
		     31) ->
	      let <_cor5> =
		  %% Line 20306
		  call 'erlang':'bsl'
		      (Class, 16)
	      in  let <_cor6> =
		      %% Line 20306
		      call 'erlang':'bor'
			  (_cor5, TagNo)
		  in  %% Line 20306
		      {Form,_cor6,V,T}
	  %% Line 20307
	  <#{#<Class>(2,1,'integer',['unsigned'|['big']]),
	     #<%% Line 20308
	       Form>(%% Line 20308
		     1,1,'integer',['unsigned'|['big']]),
	     #<%% Line 20309
	       31>(%% Line 20309
		   5,1,'integer',['unsigned'|['big']]),
	     #<%% Line 20310
	       0>(%% Line 20310
		  1,1,'integer',['unsigned'|['big']]),
	     #<%% Line 20311
	       TagNo>(%% Line 20311
		      7,1,'integer',['unsigned'|['big']]),
	     #<%% Line 20312
	       0>(%% Line 20312
		  1,1,'integer',['unsigned'|['big']]),
	     #<%% Line 20313
	       Length>(%% Line 20313
		       7,1,'integer',['unsigned'|['big']]),
	     #<%% Line 20314
	       V>(%% Line 20313
		  Length,8,'binary',['unsigned'|['big']]),
	     #<%% Line 20315
	       RestBuffer>(%% Line 20315
			   'all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      let <_cor7> =
		  %% Line 20316
		  call 'erlang':'bsl'
		      (Class, 16)
	      in  let <_cor8> =
		      %% Line 20316
		      call 'erlang':'bor'
			  (_cor7, TagNo)
		  in  %% Line 20316
		      {Form,_cor8,V,RestBuffer}
	  %% Line 20317
	  <#{#<Class>(2,1,'integer',['unsigned'|['big']]),
	     #<1>(1,1,'integer',['unsigned'|['big']]),
	     #<31>(5,1,'integer',['unsigned'|['big']]),
	     #<0>(1,1,'integer',['unsigned'|['big']]),
	     #<TagNo>(7,1,'integer',['unsigned'|['big']]),
	     #<1>(1,1,'integer',['unsigned'|['big']]),
	     #<0>(7,1,'integer',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      let <_cor9> =
		  %% Line 20318
		  call 'erlang':'bsl'
		      (Class, 16)
	      in  let <_cor10> =
		      %% Line 20318
		      call 'erlang':'bor'
			  (_cor9, TagNo)
		  in  %% Line 20318
		      {2,_cor10,T,#{}#}
	  %% Line 20319
	  <#{#<Class>(2,1,'integer',['unsigned'|['big']]),
	     #<%% Line 20320
	       Form>(%% Line 20320
		     1,1,'integer',['unsigned'|['big']]),
	     #<%% Line 20321
	       31>(%% Line 20321
		   5,1,'integer',['unsigned'|['big']]),
	     #<%% Line 20322
	       0>(%% Line 20322
		  1,1,'integer',['unsigned'|['big']]),
	     #<%% Line 20323
	       TagNo>(%% Line 20323
		      7,1,'integer',['unsigned'|['big']]),
	     #<%% Line 20324
	       1>(%% Line 20324
		  1,1,'integer',['unsigned'|['big']]),
	     #<%% Line 20325
	       LL>(%% Line 20325
		   7,1,'integer',['unsigned'|['big']]),
	     #<%% Line 20326
	       Length>(%% Line 20325
		       LL,8,'integer',['unsigned'|['big']]),
	     #<%% Line 20327
	       V>(%% Line 20326
		  Length,8,'binary',['unsigned'|['big']]),
	     #<%% Line 20328
	       T>(%% Line 20328
		  'all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      let <_cor11> =
		  %% Line 20329
		  call 'erlang':'bsl'
		      (Class, 16)
	      in  let <_cor12> =
		      %% Line 20329
		      call 'erlang':'bor'
			  (_cor11, TagNo)
		  in  %% Line 20329
		      {Form,_cor12,V,T}
	  %% Line 20330
	  <#{#<Class>(2,1,'integer',['unsigned'|['big']]),
	     #<%% Line 20331
	       Form>(%% Line 20331
		     1,1,'integer',['unsigned'|['big']]),
	     #<%% Line 20332
	       31>(%% Line 20332
		   5,1,'integer',['unsigned'|['big']]),
	     #<%% Line 20333
	       1>(%% Line 20333
		  1,1,'integer',['unsigned'|['big']]),
	     #<%% Line 20334
	       TagPart1>(%% Line 20334
			 7,1,'integer',['unsigned'|['big']]),
	     #<%% Line 20335
	       0>(%% Line 20335
		  1,1,'integer',['unsigned'|['big']]),
	     #<%% Line 20336
	       TagPartLast>(%% Line 20336
			    8,1,'integer',['unsigned'|['big']]),
	     #<%% Line 20337
	       Buffer>(%% Line 20337
		       'all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      let <_cor13> =
		  %% Line 20338
		  call 'erlang':'bsl'
		      (TagPart1, 7)
	      in  let <TagNo> =
		      %% Line 20338
		      call 'erlang':'bor'
			  (_cor13, TagPartLast)
		  in  %% Line 20339
		      case apply 'decode_length'/1
			       (Buffer) of
			<{Length,RestBuffer}> when 'true' ->
			    %% Line 20340
			    case ( RestBuffer
				   -| ['reuse_for_context'] ) of
			      <#{#<V>(Length,8,'binary',['unsigned'|['big']]),
				 #<RestBuffer2>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
				  let <_cor17> =
				      %% Line 20341
				      call 'erlang':'bsl'
					  (Class, 16)
				  in  let <_cor18> =
					  %% Line 20341
					  call 'erlang':'bor'
					      (_cor17, TagNo)
				      in  %% Line 20341
					  {Form,_cor18,V,RestBuffer2}
			      ( <_cor16> when 'true' ->
				    do  primop 'bs_context_to_binary'
					    (_cor16)
					primop 'match_fail'
					    ({'badmatch',_cor16})
				-| ['compiler_generated'] )
			    end
			( <_cor15> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor15})
			  -| ['compiler_generated'] )
		      end
	  %% Line 20342
	  <#{#<Class>(2,1,'integer',['unsigned'|['big']]),
	     #<Form>(1,1,'integer',['unsigned'|['big']]),
	     #<31>(5,1,'integer',['unsigned'|['big']]),
	     #<Buffer>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 20343
	      case apply 'decode_tag'/2
		       (Buffer, 0) of
		<{TagNo,Buffer1}> when 'true' ->
		    %% Line 20344
		    case apply 'decode_length'/1
			     (Buffer1) of
		      <{Length,RestBuffer}> when 'true' ->
			  %% Line 20345
			  case ( RestBuffer
				 -| ['reuse_for_context'] ) of
			    <#{#<V>(Length,8,'binary',['unsigned'|['big']]),
			       #<RestBuffer2>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
				let <_cor22> =
				    %% Line 20346
				    call 'erlang':'bsl'
					(Class, 16)
				in  let <_cor23> =
					%% Line 20346
					call 'erlang':'bor'
					    (_cor22, TagNo)
				    in  %% Line 20346
					{Form,_cor23,V,RestBuffer2}
			    ( <_cor21> when 'true' ->
				  do  primop 'bs_context_to_binary'
					  (_cor21)
				      primop 'match_fail'
					  ({'badmatch',_cor21})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor20> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor20})
			-| ['compiler_generated'] )
		    end
		( <_cor19> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor19})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor24> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor24)
		    ( primop 'match_fail'
			  ({'function_clause',_cor24})
		      -| [{'function_name',{'decode_tag_and_length',1}}] )
	    -| ['compiler_generated'] )
	end
'decode_universal_string'/2 =
    %% Line 20348
    fun (_cor1,_cor0) ->
	let <Bin> =
	    %% Line 20349
	    apply 'match_and_collect'/2
		(_cor1, _cor0)
	in  let <_cor3> =
		%% Line 20350
		call 'erlang':'binary_to_list'
		    (Bin)
	    in  %% Line 20350
		apply 'mk_universal_string'/1
		    (_cor3)
'dynamicsort_SETOF'/1 =
    %% Line 20352
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 20354
	    ( fun (_cor1) ->
		  case _cor1 of
		    <L>
			when call 'erlang':'is_list'
			      (_cor1) ->
			%% Line 20355
			call 'erlang':'list_to_binary'
			    (L)
		    %% Line 20356
		    <B> when 'true' ->
			%% Line 20357
			B
		  end
	      -| [{'id',{0,0,'-dynamicsort_SETOF/1-fun-0-'}}] )
	in  let <BinL> =
		%% Line 20354
		call 'lists':'map'
		    (_cor3, _cor0)
	    in  %% Line 20360
		call 'lists':'sort'
		    (BinL)
'e_object_identifier'/1 =
    %% Line 20362
    fun (_cor0) ->
	case _cor0 of
	  <{'OBJECT IDENTIFIER',V}> when 'true' ->
	      %% Line 20363
	      apply 'e_object_identifier'/1
		  (V)
	  %% Line 20364
	  <V>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 20365
		  call 'erlang':'tuple_to_list'
		      (V)
	      in  %% Line 20365
		  apply 'e_object_identifier'/1
		      (_cor1)
	  %% Line 20366
	  <[E1|[E2|Tail]]> when 'true' ->
	      let <_cor2> =
		  %% Line 20367
		  call 'erlang':'*'
		      (40, E1)
	      in  let <Head> =
		      %% Line 20367
		      call 'erlang':'+'
			  (_cor2, E2)
		  in  %% Line 20368
		      case apply 'mk_object_val'/1
			       (Head) of
			<{H,Lh}> when 'true' ->
			    %% Line 20369
			    case call 'lists':'mapfoldl'
				     (( 'enc_obj_id_tail'/2
					-| [{'id',{0,0,'-e_object_identifier/1-fun-0-'}}] ), 0, Tail) of
			      <{R,Lr}> when 'true' ->
				  let <_cor6> =
				      %% Line 20370
				      call 'erlang':'+'
					  (Lh, Lr)
				  in  %% Line 20370
				      {[H|R],_cor6}
			      ( <_cor5> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor5})
				-| ['compiler_generated'] )
			    end
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor4})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'e_object_identifier',1}}] )
	    -| ['compiler_generated'] )
	end
'enc_obj_id_tail'/2 =
    %% Line 20372
    fun (_cor1,_cor0) ->
	%% Line 20373
	case apply 'mk_object_val'/1
		 (_cor1) of
	  <{B,L}> when 'true' ->
	      let <_cor3> =
		  %% Line 20374
		  call 'erlang':'+'
		      (_cor0, L)
	      in  %% Line 20374
		  {B,_cor3}
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'encode_BMP_string'/2 =
    %% Line 20376
    fun (_cor1,_cor0) ->
	let <OctetList> =
	    %% Line 20377
	    apply 'mk_BMP_list'/1
		(_cor1)
	in  let <_cor3> =
		%% Line 20378
		call 'erlang':'length'
		    (OctetList)
	    in  %% Line 20378
		apply 'encode_tags'/3
		    (_cor0, OctetList, _cor3)
'encode_UTF8_string'/2 =
    %% Line 20380
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <UTF8String,TagIn>
	      when call 'erlang':'is_binary'
		    (UTF8String) ->
	      let <_cor2> =
		  %% Line 20381
		  call 'erlang':'byte_size'
		      (UTF8String)
	      in  %% Line 20381
		  apply 'encode_tags'/3
		      (TagIn, UTF8String, _cor2)
	  %% Line 20382
	  <UTF8String,TagIn> when 'true' ->
	      let <_cor3> =
		  %% Line 20383
		  call 'erlang':'length'
		      (UTF8String)
	      in  %% Line 20383
		  apply 'encode_tags'/3
		      (TagIn, UTF8String, _cor3)
	end
'encode_bin_bit_string'/4 =
    %% Line 20385
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <C,{Unused,BinBits},_X_NamedBitList,TagIn> when 'true' ->
	      %% Line 20386
	      case C of
		%% Line 20387
		<[]> when 'true' ->
		    %% Line 20388
		    apply 'remove_unused_then_dotag'/3
			(TagIn, Unused, BinBits)
		%% Line 20389
		<{_X_Min,Max}> when 'true' ->
		    let <_cor4> =
			%% Line 20390
			call 'erlang':'byte_size'
			    (BinBits)
		    in  let <_cor5> =
			    %% Line 20390
			    call 'erlang':'*'
				(_cor4, 8)
			in  let <BBLen> =
				%% Line 20390
				call 'erlang':'-'
				    (_cor5, Unused)
			    in  %% Line 20391
				case <> of
				  %% Line 20392
				  <>
				      when call 'erlang':'>'
					    (BBLen,
					     Max) ->
				      %% Line 20393
				      call 'erlang':'exit'
					  ({'error',%% Line 20394
						    {'asn1',%% Line 20395
							    {'bitstring_length',%% Line 20396
										{{'was',BBLen},{'maximum',Max}}}}})
				  %% Line 20397
				  <> when 'true' ->
				      %% Line 20398
				      apply 'remove_unused_then_dotag'/3
					  (TagIn, Unused, BinBits)
				end
		%% Line 20400
		<Size> when 'true' ->
		    let <_cor7> =
			%% Line 20401
			call 'erlang':'byte_size'
			    (BinBits)
		    in  let <_cor8> =
			    %% Line 20401
			    call 'erlang':'*'
				(_cor7, 8)
			in  %% Line 20401
			    case call 'erlang':'-'
				     (_cor8, Unused) of
			      %% Line 20402
			      <BBSize>
				  when call 'erlang':'=<'
					(BBSize,
					 Size) ->
				  %% Line 20403
				  apply 'remove_unused_then_dotag'/3
				      (TagIn, Unused, BinBits)
			      %% Line 20404
			      <BBSize> when 'true' ->
				  %% Line 20405
				  call 'erlang':'exit'
				      ({'error',%% Line 20406
						{'asn1',%% Line 20407
							{'bitstring_length',%% Line 20408
									    {{'was',BBSize},{'should_be',Size}}}}})
			    end
	      end
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'encode_bin_bit_string',4}}] )
	    -| ['compiler_generated'] )
	end
'encode_bit_string'/4 =
    %% Line 20412
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <C,Bits,NamedBitList,TagIn>
	      when call 'erlang':'is_bitstring'
		    (Bits) ->
	      let <_cor4> =
		  %% Line 20413
		  call 'erlang':'bit_size'
		      (Bits)
	      in  let <_cor5> =
		      %% Line 20413
		      call 'erlang':'band'
			  (_cor4, 7)
		  in  let <_cor6> =
			  %% Line 20413
			  call 'erlang':'-'
			      (8, _cor5)
		      in  let <PadLen> =
			      %% Line 20413
			      call 'erlang':'band'
				  (_cor6, 7)
			  in  let <_cor8> =
				  %% Line 20414
				  #{#<Bits>('all',1,'binary',['unsigned'|['big']]),
				    #<0>(PadLen,1,'integer',['unsigned'|['big']])}#
			      in  let <Compact> = {%% Line 20414
				       PadLen,_cor8}
				  in  %% Line 20415
				      apply 'encode_bin_bit_string'/4
					  (C, Compact, NamedBitList, TagIn)
	  %% Line 20416
	  <C,Bin = {Unused,BinBits},NamedBitList,TagIn>
	      when let <_cor10> =
		    %% Line 20417
		    call 'erlang':'is_integer'
			(Unused)
		in  let <_cor11> =
			%% Line 20417
			call 'erlang':'is_binary'
			    (BinBits)
		    in  %% Line 20417
			call 'erlang':'and'
			    (_cor10, _cor11) ->
	      %% Line 20418
	      apply 'encode_bin_bit_string'/4
		  (C, Bin, NamedBitList, TagIn)
	  %% Line 20419
	  <C,[FirstVal|RestVal],NamedBitList,TagIn>
	      when %% Line 20420
		call 'erlang':'is_atom'
		    (FirstVal) ->
	      %% Line 20421
	      apply 'encode_bit_string_named'/4
		  (C, [FirstVal|RestVal], NamedBitList, TagIn)
	  %% Line 20422
	  <C,[{'bit',X}|RestVal],NamedBitList,TagIn> when 'true' ->
	      %% Line 20423
	      apply 'encode_bit_string_named'/4
		  (C, [{'bit',X}|RestVal], NamedBitList, TagIn)
	  %% Line 20424
	  <C,[FirstVal|RestVal],NamedBitList,TagIn>
	      when %% Line 20425
		call 'erlang':'is_integer'
		    (FirstVal) ->
	      %% Line 20426
	      apply 'encode_bit_string_bits'/4
		  (C, [FirstVal|RestVal], NamedBitList, TagIn)
	  %% Line 20427
	  <_X_C,0,_X_NamedBitList,TagIn> when 'true' ->
	      %% Line 20428
	      apply 'encode_tags'/3
		  (TagIn, #{#<0>(8,1,'integer',['unsigned'|['big']])}#, 1)
	  %% Line 20429
	  <_X_C,[],_X_NamedBitList,TagIn> when 'true' ->
	      %% Line 20430
	      apply 'encode_tags'/3
		  (TagIn, #{#<0>(8,1,'integer',['unsigned'|['big']])}#, 1)
	  %% Line 20431
	  <C,IntegerVal,NamedBitList,TagIn>
	      when %% Line 20432
		call 'erlang':'is_integer'
		    (IntegerVal) ->
	      let <BitListVal> =
		  %% Line 20433
		  apply 'int_to_bitlist'/1
		      (IntegerVal)
	      in  %% Line 20434
		  apply 'encode_bit_string_bits'/4
		      (C, BitListVal, NamedBitList, TagIn)
	  ( <_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'encode_bit_string',4}}] )
	    -| ['compiler_generated'] )
	end
'encode_bit_string_bits'/4 =
    %% Line 20436
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <C,BitListVal,_X_NamedBitList,TagIn>
	      when %% Line 20437
		call 'erlang':'is_list'
		    (BitListVal) ->
	      %% Line 20438
	      case C of
		%% Line 20439
		<[]> when 'true' ->
		    %% Line 20440
		    case apply 'encode_bitstring'/1
			     (BitListVal) of
		      <{Len,Unused,OctetList}> when 'true' ->
			  let <_cor5> =
			      %% Line 20441
			      call 'erlang':'+'
				  (Len, 1)
			  in  %% Line 20441
			      apply 'encode_tags'/3
				  (TagIn, [Unused|OctetList], _cor5)
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		%% Line 20442
		<Constr = {Min,_X_Max}>
		    when call 'erlang':'is_integer'
			  (Min) ->
		    %% Line 20443
		    apply 'encode_constr_bit_str_bits'/3
			(Constr, BitListVal, TagIn)
		%% Line 20444
		<{Constr = {_cor18,_cor19},[]}> when 'true' ->
		    %% Line 20445
		    apply 'encode_constr_bit_str_bits'/3
			(Constr, BitListVal, TagIn)
		%% Line 20446
		<Constr = {{_cor20,_cor21},{_cor22,_cor23}}> when 'true' ->
		    %% Line 20447
		    apply 'encode_constr_bit_str_bits'/3
			(Constr, BitListVal, TagIn)
		%% Line 20448
		<Size>
		    when call 'erlang':'is_integer'
			  (C) ->
		    %% Line 20449
		    case call 'erlang':'length'
			     (BitListVal) of
		      %% Line 20450
		      <BitSize>
			  when call 'erlang':'=='
				(BitSize,
				 Size) ->
			  %% Line 20451
			  case %% Line 20452
			       apply 'encode_bitstring'/1
				   (BitListVal) of
			    <{Len,Unused,OctetList}> when 'true' ->
				let <_cor7> =
				    %% Line 20453
				    call 'erlang':'+'
					(Len, 1)
				in  %% Line 20453
				    apply 'encode_tags'/3
					(TagIn, [Unused|OctetList], _cor7)
			    ( <_cor6> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor6})
			      -| ['compiler_generated'] )
			  end
		      %% Line 20454
		      <BitSize>
			  when call 'erlang':'<'
				(BitSize,
				 Size) ->
			  let <_cor8> =
			      %% Line 20456
			      call 'erlang':'-'
				  (Size, BitSize)
			  in  let <PaddedList> =
				  %% Line 20456
				  apply 'pad_bit_list'/2
				      (_cor8, BitListVal)
			      in  %% Line 20457
				  case %% Line 20458
				       apply 'encode_bitstring'/1
					   (PaddedList) of
				    <{Len,Unused,OctetList}> when 'true' ->
					let <_cor11> =
					    %% Line 20459
					    call 'erlang':'+'
						(Len, 1)
					in  %% Line 20459
					    apply 'encode_tags'/3
						(TagIn, [Unused|OctetList], _cor11)
				    ( <_cor10> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor10})
				      -| ['compiler_generated'] )
				  end
		      %% Line 20460
		      <BitSize> when 'true' ->
			  %% Line 20461
			  call 'erlang':'exit'
			      ({'error',%% Line 20462
					{'asn1',%% Line 20463
						{'bitstring_length',%% Line 20464
								    {{'was',BitSize},{'should_be',Size}}}}})
		    end
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor13})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'encode_bit_string_bits',4}}] )
	    -| ['compiler_generated'] )
	end
'encode_bit_string_named'/4 =
    %% Line 20468
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <C,[FirstVal|RestVal],NamedBitList,TagIn> when 'true' ->
	      let <ToSetPos> =
		  %% Line 20469
		  apply 'get_all_bitposes'/3
		      ([FirstVal|RestVal], NamedBitList, [])
	      in  let <_cor7> =
		      %% Line 20471
		      case C of
			%% Line 20472
			<[]> when 'true' ->
			    let <_cor5> =
				%% Line 20473
				call 'lists':'max'
				    (ToSetPos)
			    in  %% Line 20473
				call 'erlang':'+'
				    (_cor5, 1)
			%% Line 20474
			<{_X_Min,Max}> when 'true' ->
			    %% Line 20475
			    Max
			%% Line 20476
			<TSize> when 'true' ->
			    %% Line 20477
			    TSize
		      end
		  in  let <BitList> =
			  %% Line 20479
			  apply 'make_and_set_list'/3
			      (_cor7, ToSetPos, 0)
		      in  %% Line 20480
			  case apply 'encode_bitstring'/1
				   (BitList) of
			    <{Len,Unused,OctetList}> when 'true' ->
				let <_cor11> =
				    %% Line 20481
				    call 'erlang':'+'
					(Len, 1)
				in  %% Line 20481
				    apply 'encode_tags'/3
					(TagIn, [Unused|OctetList], _cor11)
			    ( <_cor10> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor10})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'encode_bit_string_named',4}}] )
	    -| ['compiler_generated'] )
	end
'encode_bitstring'/1 =
    %% Line 20483
    fun (_cor0) ->
	case _cor0 of
	  <[B8|[B7|[B6|[B5|[B4|[B3|[B2|[B1|Rest]]]]]]]]> when 'true' ->
	      let <_cor7> =
		  %% Line 20485
		  call 'erlang':'bsl'
		      (B8, 7)
	      in  let <_cor6> =
		      %% Line 20485
		      call 'erlang':'bsl'
			  (B7, 6)
		  in  let <_cor8> =
			  %% Line 20485
			  call 'erlang':'bor'
			      (_cor7, _cor6)
		      in  let <_cor5> =
			      %% Line 20485
			      call 'erlang':'bsl'
				  (B6, 5)
			  in  let <_cor9> =
				  %% Line 20485
				  call 'erlang':'bor'
				      (_cor8, _cor5)
			      in  let <_cor4> =
				      %% Line 20485
				      call 'erlang':'bsl'
					  (B5, 4)
				  in  let <_cor10> =
					  %% Line 20485
					  call 'erlang':'bor'
					      (_cor9, _cor4)
				      in  let <_cor3> =
					      %% Line 20487
					      call 'erlang':'bsl'
						  (B4, 3)
					  in  let <_cor11> =
						  %% Line 20486
						  call 'erlang':'bor'
						      (_cor10, _cor3)
					      in  let <_cor2> =
						      %% Line 20489
						      call 'erlang':'bsl'
							  (B3, 2)
						  in  let <_cor12> =
							  %% Line 20488
							  call 'erlang':'bor'
							      (_cor11, _cor2)
						      in  let <_cor1> =
							      %% Line 20491
							      call 'erlang':'bsl'
								  (B2, 1)
							  in  let <_cor13> =
								  %% Line 20490
								  call 'erlang':'bor'
								      (_cor12, _cor1)
							      in  let <Val> =
								      %% Line 20492
								      call 'erlang':'bor'
									  (_cor13, %% Line 20493
										   B1)
								  in  %% Line 20494
								      apply 'encode_bitstring'/3
									  (Rest, [Val|[]], 1)
	  %% Line 20495
	  <Val> when 'true' ->
	      %% Line 20496
	      case apply 'unused_bitlist'/3
		       (Val, 7, 0) of
		<{Unused,Octet}> when 'true' ->
		    %% Line 20497
		    {1,Unused,[Octet|[]]}
		( <_cor15> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor15})
		  -| ['compiler_generated'] )
	      end
	end
'encode_bitstring'/3 =
    %% Line 20499
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[B8|[B7|[B6|[B5|[B4|[B3|[B2|[B1|Rest]]]]]]]],Ack,Len> when 'true' ->
	      let <_cor9> =
		  %% Line 20501
		  call 'erlang':'bsl'
		      (B8, 7)
	      in  let <_cor8> =
		      %% Line 20501
		      call 'erlang':'bsl'
			  (B7, 6)
		  in  let <_cor10> =
			  %% Line 20501
			  call 'erlang':'bor'
			      (_cor9, _cor8)
		      in  let <_cor7> =
			      %% Line 20501
			      call 'erlang':'bsl'
				  (B6, 5)
			  in  let <_cor11> =
				  %% Line 20501
				  call 'erlang':'bor'
				      (_cor10, _cor7)
			      in  let <_cor6> =
				      %% Line 20501
				      call 'erlang':'bsl'
					  (B5, 4)
				  in  let <_cor12> =
					  %% Line 20501
					  call 'erlang':'bor'
					      (_cor11, _cor6)
				      in  let <_cor5> =
					      %% Line 20503
					      call 'erlang':'bsl'
						  (B4, 3)
					  in  let <_cor13> =
						  %% Line 20502
						  call 'erlang':'bor'
						      (_cor12, _cor5)
					      in  let <_cor4> =
						      %% Line 20505
						      call 'erlang':'bsl'
							  (B3, 2)
						  in  let <_cor14> =
							  %% Line 20504
							  call 'erlang':'bor'
							      (_cor13, _cor4)
						      in  let <_cor3> =
							      %% Line 20507
							      call 'erlang':'bsl'
								  (B2, 1)
							  in  let <_cor15> =
								  %% Line 20506
								  call 'erlang':'bor'
								      (_cor14, _cor3)
							      in  let <Val> =
								      %% Line 20508
								      call 'erlang':'bor'
									  (_cor15, %% Line 20509
										   B1)
								  in  let <_cor17> =
									  %% Line 20510
									  call 'erlang':'+'
									      (Len, 1)
								      in  %% Line 20510
									  apply 'encode_bitstring'/3
									      (Rest, [Ack|[Val|[]]], _cor17)
	  %% Line 20511
	  <[],Ack,Len> when 'true' ->
	      %% Line 20512
	      {Len,0,Ack}
	  %% Line 20513
	  <Rest,Ack,Len> when 'true' ->
	      %% Line 20514
	      case apply 'unused_bitlist'/3
		       (Rest, 7, 0) of
		<{Unused,Val}> when 'true' ->
		    let <_cor19> =
			%% Line 20515
			call 'erlang':'+'
			    (Len, 1)
		    in  %% Line 20515
			{_cor19,Unused,[Ack|[Val|[]]]}
		( <_cor18> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor18})
		  -| ['compiler_generated'] )
	      end
	end
'encode_boolean'/2 =
    %% Line 20517
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'true',TagIn> when 'true' ->
	      %% Line 20518
	      apply 'encode_tags'/3
		  (TagIn, [255], 1)
	  %% Line 20519
	  <'false',TagIn> when 'true' ->
	      %% Line 20520
	      apply 'encode_tags'/3
		  (TagIn, [0], 1)
	  %% Line 20521
	  <X,_cor4> when 'true' ->
	      %% Line 20522
	      call 'erlang':'exit'
		  ({'error',{'asn1',{'encode_boolean',X}}})
	end
'encode_constr_bit_str_bits'/3 =
    %% Line 20524
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{{_X_Min1,Max1},{Min2,Max2}},%% Line 20525
					BitListVal,%% Line 20526
						   TagIn> when 'true' ->
	      let <BitLen> =
		  %% Line 20527
		  call 'erlang':'length'
		      (BitListVal)
	      in  %% Line 20528
		  case BitLen of
		    %% Line 20529
		    <Len>
			when call 'erlang':'>'
			      (BitLen,
			       Max2) ->
			%% Line 20530
			call 'erlang':'exit'
			    ({'error',%% Line 20531
				      {'asn1',%% Line 20532
					      {'bitstring_length',{{'was',BitLen},{'maximum',Max2}}}}})
		    %% Line 20533
		    <Len>
			when let <_cor4> =
			      call 'erlang':'>'
				  (BitLen, Max1)
			  in  let <_cor5> =
				  call 'erlang':'<'
				      (BitLen, Min2)
			      in  call 'erlang':'and'
				      (_cor4, _cor5) ->
			%% Line 20534
			call 'erlang':'exit'
			    ({'error',%% Line 20535
				      {'asn1',%% Line 20536
					      {'bitstring_length',%% Line 20537
								  {{'was',BitLen},{'not_allowed_interval',Max1,Min2}}}}})
		    %% Line 20538
		    <_cor15> when 'true' ->
			%% Line 20539
			case apply 'encode_bitstring'/1
				 (BitListVal) of
			  <{Len,Unused,OctetList}> when 'true' ->
			      let <_cor7> =
				  %% Line 20540
				  call 'erlang':'+'
				      (Len, 1)
			      in  %% Line 20540
				  apply 'encode_tags'/3
				      (TagIn, [Unused|[OctetList|[]]], _cor7)
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		  end
	  %% Line 20542
	  <{Min,Max},BitListVal,TagIn> when 'true' ->
	      let <BitLen> =
		  %% Line 20543
		  call 'erlang':'length'
		      (BitListVal)
	      in  %% Line 20544
		  case <> of
		    %% Line 20545
		    <>
			when call 'erlang':'>'
			      (BitLen,
			       Max) ->
			%% Line 20546
			call 'erlang':'exit'
			    ({'error',%% Line 20547
				      {'asn1',{'bitstring_length',{{'was',BitLen},{'maximum',Max}}}}})
		    %% Line 20548
		    <>
			when call 'erlang':'<'
			      (BitLen,
			       Min) ->
			%% Line 20549
			call 'erlang':'exit'
			    ({'error',%% Line 20550
				      {'asn1',{'bitstring_length',{{'was',BitLen},{'minimum',Max}}}}})
		    %% Line 20551
		    <> when 'true' ->
			%% Line 20552
			case apply 'encode_bitstring'/1
				 (BitListVal) of
			  <{Len,Unused,OctetList}> when 'true' ->
			      let <_cor11> =
				  %% Line 20553
				  call 'erlang':'+'
				      (Len, 1)
			      in  %% Line 20553
				  apply 'encode_tags'/3
				      (TagIn, [Unused|[OctetList|[]]], _cor11)
			  ( <_cor10> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor10})
			    -| ['compiler_generated'] )
			end
		  end
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'encode_constr_bit_str_bits',3}}] )
	    -| ['compiler_generated'] )
	end
'encode_integer'/1 =
    %% Line 20556
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 20558
	    case <> of
	      %% Line 20559
	      <>
		  when call 'erlang':'>='
			(_cor0,
			 0) ->
		  %% Line 20560
		  apply 'encode_integer_pos'/2
		      (_cor0, [])
	      %% Line 20561
	      <> when 'true' ->
		  %% Line 20562
		  apply 'encode_integer_neg'/2
		      (_cor0, [])
	    end
	in  let <_cor3> =
		%% Line 20564
		call 'erlang':'length'
		    (_cor1)
	    in  %% Line 20564
		{_cor1,_cor3}
'encode_integer'/3 =
    %% Line 20566
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Val,NamedNumberList,Tag>
	      when call 'erlang':'is_atom'
		    (Val) ->
	      %% Line 20567
	      case call 'lists':'keyfind'
		       (Val, 1, NamedNumberList) of
		%% Line 20568
		<{_cor9,NewVal}> when 'true' ->
		    let <_cor3> =
			%% Line 20569
			apply 'encode_integer'/1
			    (NewVal)
		    in  %% Line 20569
			apply 'encode_tags'/2
			    (Tag, _cor3)
		%% Line 20570
		<_cor10> when 'true' ->
		    %% Line 20571
		    call 'erlang':'exit'
			({'error',{'asn1',{'encode_integer_namednumber',Val}}})
	      end
	  %% Line 20573
	  <Val,_X_NamedNumberList,Tag> when 'true' ->
	      let <_cor5> =
		  %% Line 20574
		  apply 'encode_integer'/1
		      (Val)
	      in  %% Line 20574
		  apply 'encode_tags'/2
		      (Tag, _cor5)
	end
'encode_integer'/2 =
    %% Line 20576
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Val,Tag>
	      when call 'erlang':'is_integer'
		    (Val) ->
	      let <_cor2> =
		  %% Line 20577
		  apply 'encode_integer'/1
		      (Val)
	      in  %% Line 20577
		  apply 'encode_tags'/2
		      (Tag, _cor2)
	  %% Line 20578
	  <Val,_X_Tag> when 'true' ->
	      %% Line 20579
	      call 'erlang':'exit'
		  ({'error',{'asn1',{'encode_integer',Val}}})
	end
'encode_integer_neg'/2 =
    %% Line 20581
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <-1,L = [B1|_X_T]>
	      when call 'erlang':'>'
		    (B1,
		     127) ->
	      %% Line 20582
	      L
	  %% Line 20583
	  <N,Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 20584
		  call 'erlang':'bsr'
		      (N, 8)
	      in  let <_cor2> =
		      %% Line 20584
		      call 'erlang':'band'
			  (N, 255)
		  in  %% Line 20584
		      apply 'encode_integer_neg'/2
			  (_cor3, [_cor2|Acc])
	end
'encode_integer_pos'/2 =
    %% Line 20586
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,L = [B|_X_Acc]>
	      when call 'erlang':'<'
		    (B,
		     128) ->
	      %% Line 20587
	      L
	  %% Line 20588
	  <N,Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 20589
		  call 'erlang':'bsr'
		      (N, 8)
	      in  let <_cor2> =
		      %% Line 20589
		      call 'erlang':'band'
			  (N, 255)
		  in  %% Line 20589
		      apply 'encode_integer_pos'/2
			  (_cor3, [_cor2|Acc])
	end
'encode_length'/1 =
    %% Line 20591
    fun (_cor0) ->
	case _cor0 of
	  <L>
	      when call 'erlang':'=<'
		    (_cor0,
		     127) ->
	      %% Line 20592
	      {[L|[]],1}
	  %% Line 20593
	  <L> when 'true' ->
	      let <Oct> =
		  %% Line 20594
		  apply 'minimum_octets'/1
		      (L)
	      in  let <Len> =
		      %% Line 20595
		      call 'erlang':'length'
			  (Oct)
		  in  %% Line 20596
		      case <> of
			%% Line 20597
			<>
			    when call 'erlang':'=<'
				  (Len,
				   126) ->
			    let <_cor4> =
				%% Line 20598
				call 'erlang':'bor'
				    (128, Len)
			    in  let <_cor3> =
				    %% Line 20598
				    call 'erlang':'+'
					(Len, 1)
				in  %% Line 20598
				    {[_cor4|Oct],_cor3}
			%% Line 20599
			<> when 'true' ->
			    %% Line 20600
			    call 'erlang':'exit'
				({'error',{'asn1','too_long_length_oct',Len}})
		      end
	end
'encode_null'/2 =
    %% Line 20603
    fun (_cor1,_cor0) ->
	%% Line 20604
	apply 'encode_tags'/3
	    (_cor0, [], 0)
'encode_object_identifier'/2 =
    %% Line 20606
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 20607
	    apply 'e_object_identifier'/1
		(_cor1)
	in  %% Line 20607
	    apply 'encode_tags'/2
		(_cor0, _cor2)
'encode_open_type'/2 =
    %% Line 20609
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Val,T>
	      when call 'erlang':'is_list'
		    (Val) ->
	      let <_cor2> =
		  %% Line 20610
		  call 'erlang':'list_to_binary'
		      (Val)
	      in  %% Line 20610
		  apply 'encode_open_type'/2
		      (_cor2, T)
	  %% Line 20611
	  <Val,Tag> when 'true' ->
	      let <_cor3> =
		  %% Line 20612
		  call 'erlang':'byte_size'
		      (Val)
	      in  %% Line 20612
		  apply 'encode_tags'/3
		      (Tag, Val, _cor3)
	end
'encode_restricted_string'/2 =
    %% Line 20614
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <OctetList,TagIn>
	      when call 'erlang':'is_binary'
		    (OctetList) ->
	      let <_cor2> =
		  %% Line 20615
		  call 'erlang':'byte_size'
		      (OctetList)
	      in  %% Line 20615
		  apply 'encode_tags'/3
		      (TagIn, OctetList, _cor2)
	  %% Line 20616
	  <OctetList,TagIn>
	      when call 'erlang':'is_list'
		    (OctetList) ->
	      let <_cor3> =
		  %% Line 20617
		  call 'erlang':'length'
		      (OctetList)
	      in  %% Line 20617
		  apply 'encode_tags'/3
		      (TagIn, OctetList, _cor3)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'encode_restricted_string',2}}] )
	    -| ['compiler_generated'] )
	end
'encode_tags'/2 =
    %% Line 20619
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <TagIn,{BytesSoFar,LenSoFar}> when 'true' ->
	      %% Line 20620
	      apply 'encode_tags'/3
		  (TagIn, BytesSoFar, LenSoFar)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'encode_tags',2}}] )
	    -| ['compiler_generated'] )
	end
'encode_tags'/3 =
    %% Line 20622
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Tag|Trest],BytesSoFar,LenSoFar> when 'true' ->
	      %% Line 20623
	      case apply 'encode_length'/1
		       (LenSoFar) of
		<{Bytes2,L2}> when 'true' ->
		    let <_cor4> =
			%% Line 20626
			call 'erlang':'byte_size'
			    (Tag)
		    in  let <_cor5> =
			    %% Line 20626
			    call 'erlang':'+'
				(LenSoFar, _cor4)
			in  let <_cor6> =
				%% Line 20626
				call 'erlang':'+'
				    (_cor5, L2)
			    in  %% Line 20624
				apply 'encode_tags'/3
				    (Trest, %% Line 20625
					    [Tag|[Bytes2|BytesSoFar]], _cor6)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 20627
	  <[],BytesSoFar,LenSoFar> when 'true' ->
	      %% Line 20628
	      {BytesSoFar,LenSoFar}
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'encode_tags',3}}] )
	    -| ['compiler_generated'] )
	end
'encode_universal_string'/2 =
    %% Line 20630
    fun (_cor1,_cor0) ->
	let <OctetList> =
	    %% Line 20631
	    apply 'mk_uni_list'/1
		(_cor1)
	in  let <_cor3> =
		%% Line 20632
		call 'erlang':'length'
		    (OctetList)
	    in  %% Line 20632
		apply 'encode_tags'/3
		    (_cor0, OctetList, _cor3)
'get_all_bitposes'/3 =
    %% Line 20634
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'bit',ValPos}|Rest],NamedBitList,Ack> when 'true' ->
	      %% Line 20635
	      apply 'get_all_bitposes'/3
		  (Rest, NamedBitList, [ValPos|Ack])
	  %% Line 20636
	  <[Val|Rest],NamedBitList,Ack>
	      when call 'erlang':'is_atom'
		    (Val) ->
	      %% Line 20637
	      case call 'lists':'keyfind'
		       (Val, 1, NamedBitList) of
		%% Line 20638
		<{_X_ValName,ValPos}> when 'true' ->
		    %% Line 20639
		    apply 'get_all_bitposes'/3
			(Rest, NamedBitList, [ValPos|Ack])
		%% Line 20640
		<_cor7> when 'true' ->
		    %% Line 20641
		    call 'erlang':'exit'
			({'error',{'asn1',{'bitstring_namedbit',Val}}})
	      end
	  %% Line 20643
	  <[],_X_NamedBitList,Ack> when 'true' ->
	      %% Line 20644
	      call 'lists':'sort'
		  (Ack)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'get_all_bitposes',3}}] )
	    -| ['compiler_generated'] )
	end
'incomplete_choice_alt'/2 =
    %% Line 20646
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <TagNo,[[Alt|[_cor4|[]]]|Directives]>
	      when call 'erlang':'=:='
		    (_cor4,
		     TagNo) ->
	      %% Line 20647
	      {Alt,Directives}
	  %% Line 20648
	  <TagNo,[D|[]]>
	      when call 'erlang':'is_list'
		    (D) ->
	      %% Line 20649
	      apply 'incomplete_choice_alt'/2
		  (TagNo, D)
	  %% Line 20650
	  <TagNo,[_X_H|Directives]> when 'true' ->
	      %% Line 20651
	      apply 'incomplete_choice_alt'/2
		  (TagNo, Directives)
	  %% Line 20652
	  <_cor5,[]> when 'true' ->
	      %% Line 20653
	      'no_match'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'incomplete_choice_alt',2}}] )
	    -| ['compiler_generated'] )
	end
'int_to_bitlist'/1 =
    %% Line 20655
    fun (_cor0) ->
	case _cor0 of
	  <0> when 'true' ->
	      %% Line 20656
	      []
	  %% Line 20657
	  <Int>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'>='
			    (_cor0, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      let <_cor3> =
		  %% Line 20658
		  call 'erlang':'band'
		      (Int, 1)
	      in  let <_cor4> =
		      %% Line 20658
		      call 'erlang':'bsr'
			  (Int, 1)
		  in  let <_cor5> =
			  %% Line 20658
			  apply 'int_to_bitlist'/1
			      (_cor4)
		      in  %% Line 20658
			  [_cor3|_cor5]
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'int_to_bitlist',1}}] )
	    -| ['compiler_generated'] )
	end
'legacy_int_to_bitlist'/1 =
    %% Line 20660
    fun (_cor0) ->
	case _cor0 of
	  <0> when 'true' ->
	      %% Line 20661
	      []
	  %% Line 20662
	  <Int> when 'true' ->
	      let <_cor1> =
		  %% Line 20663
		  call 'erlang':'band'
		      (Int, 1)
	      in  let <_cor2> =
		      %% Line 20663
		      call 'erlang':'bsr'
			  (Int, 1)
		  in  let <_cor3> =
			  %% Line 20663
			  apply 'legacy_int_to_bitlist'/1
			      (_cor2)
		      in  %% Line 20663
			  [_cor1|_cor3]
	end
'make_and_set_list'/3 =
    %% Line 20665
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <0,[],_cor15> when 'true' ->
	      %% Line 20666
	      []
	  %% Line 20667
	  <0,_cor16,_cor17> when 'true' ->
	      %% Line 20668
	      call 'erlang':'exit'
		  ({'error',{'asn1','bitstring_sizeconstraint'}})
	  %% Line 20669
	  <Len,[XPos|SetPos],_cor18>
	      when call 'erlang':'=:='
		    (_cor18,
		     XPos) ->
	      let <_cor4> =
		  %% Line 20670
		  call 'erlang':'-'
		      (Len, 1)
	      in  let <_cor3> =
		      %% Line 20670
		      call 'erlang':'+'
			  (XPos, 1)
		  in  let <_cor5> =
			  %% Line 20670
			  apply 'make_and_set_list'/3
			      (_cor4, SetPos, _cor3)
		      in  %% Line 20670
			  [1|_cor5]
	  %% Line 20671
	  <Len,[Pos|SetPos],XPos> when 'true' ->
	      let <_cor7> =
		  %% Line 20672
		  call 'erlang':'-'
		      (Len, 1)
	      in  let <_cor6> =
		      %% Line 20672
		      call 'erlang':'+'
			  (XPos, 1)
		  in  let <_cor8> =
			  %% Line 20672
			  apply 'make_and_set_list'/3
			      (_cor7, [Pos|SetPos], _cor6)
		      in  %% Line 20672
			  [0|_cor8]
	  %% Line 20673
	  <Len,[],XPos> when 'true' ->
	      let <_cor10> =
		  %% Line 20674
		  call 'erlang':'-'
		      (Len, 1)
	      in  let <_cor9> =
		      %% Line 20674
		      call 'erlang':'+'
			  (XPos, 1)
		  in  let <_cor11> =
			  %% Line 20674
			  apply 'make_and_set_list'/3
			      (_cor10, [], _cor9)
		      in  %% Line 20674
			  [0|_cor11]
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'make_and_set_list',3}}] )
	    -| ['compiler_generated'] )
	end
'match_and_collect'/2 =
    %% Line 20676
    fun (_cor1,_cor0) ->
	let <Val> =
	    %% Line 20677
	    apply 'match_tags'/2
		(_cor1, _cor0)
	in  %% Line 20678
	    case Val of
	      %% Line 20679
	      <PartList = [_cor6|_cor7]> when 'true' ->
		  %% Line 20680
		  apply 'collect_parts'/1
		      (PartList)
	      %% Line 20681
	      <Bin>
		  when call 'erlang':'is_binary'
			(Val) ->
		  %% Line 20682
		  Bin
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor3})
		-| ['compiler_generated'] )
	    end
'match_tags'/2 =
    %% Line 20685
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{T,V},[_cor4|[]]>
	      when call 'erlang':'=:='
		    (_cor4,
		     T) ->
	      %% Line 20686
	      V
	  %% Line 20687
	  <{T,V},[_cor5|Tt]>
	      when call 'erlang':'=:='
		    (_cor5,
		     T) ->
	      %% Line 20688
	      apply 'match_tags'/2
		  (V, Tt)
	  %% Line 20689
	  <[{T,V}|[]],[_cor6|Tt]>
	      when call 'erlang':'=:='
		    (_cor6,
		     T) ->
	      %% Line 20690
	      apply 'match_tags'/2
		  (V, Tt)
	  %% Line 20691
	  <Vlist = [{T,_X_V}|_cor7],[_cor8|[]]>
	      when call 'erlang':'=:='
		    (_cor8,
		     T) ->
	      %% Line 20692
	      Vlist
	  %% Line 20693
	  <Tlv,[]> when 'true' ->
	      %% Line 20694
	      Tlv
	  %% Line 20695
	  <Tlv = {Tag,_X_V},[T|_X_Tt]> when 'true' ->
	      %% Line 20696
	      call 'erlang':'exit'
		  ({'error',{'asn1',{'wrong_tag',{{'expected',T},{'got',Tag,Tlv}}}}})
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'match_tags',2}}] )
	    -| ['compiler_generated'] )
	end
'minimum_octets'/2 =
    %% Line 20698
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,Acc> when 'true' ->
	      %% Line 20699
	      Acc
	  %% Line 20700
	  <Val,Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 20701
		  call 'erlang':'bsr'
		      (Val, 8)
	      in  let <_cor2> =
		      %% Line 20701
		      call 'erlang':'band'
			  (Val, 255)
		  in  %% Line 20701
		      apply 'minimum_octets'/2
			  (_cor3, [_cor2|Acc])
	end
'minimum_octets'/1 =
    %% Line 20703
    fun (_cor0) ->
	%% Line 20704
	apply 'minimum_octets'/2
	    (_cor0, [])
'mk_BMP_list'/1 =
    %% Line 20706
    fun (_cor0) ->
	%% Line 20707
	apply 'mk_BMP_list'/2
	    (_cor0, [])
'mk_BMP_list'/2 =
    %% Line 20709
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],List> when 'true' ->
	      %% Line 20710
	      call 'lists':'reverse'
		  (List)
	  %% Line 20711
	  <[{0,0,C,D}|T],List> when 'true' ->
	      %% Line 20712
	      apply 'mk_BMP_list'/2
		  (T, [D|[C|List]])
	  %% Line 20713
	  <[H|T],List> when 'true' ->
	      %% Line 20714
	      apply 'mk_BMP_list'/2
		  (T, [H|[0|List]])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'mk_BMP_list',2}}] )
	    -| ['compiler_generated'] )
	end
'mk_BMP_string'/1 =
    %% Line 20716
    fun (_cor0) ->
	%% Line 20717
	apply 'mk_BMP_string'/2
	    (_cor0, [])
'mk_BMP_string'/2 =
    %% Line 20719
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],US> when 'true' ->
	      %% Line 20720
	      call 'lists':'reverse'
		  (US)
	  %% Line 20721
	  <[0|[B|T]],US> when 'true' ->
	      %% Line 20722
	      apply 'mk_BMP_string'/2
		  (T, [B|US])
	  %% Line 20723
	  <[C|[D|T]],US> when 'true' ->
	      %% Line 20724
	      apply 'mk_BMP_string'/2
		  (T, [{0,0,C,D}|US])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'mk_BMP_string',2}}] )
	    -| ['compiler_generated'] )
	end
'mk_object_val'/3 =
    %% Line 20726
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <0,Ack,Len> when 'true' ->
	      %% Line 20727
	      {Ack,Len}
	  %% Line 20728
	  <Val,Ack,Len> when 'true' ->
	      let <_cor6> =
		  %% Line 20729
		  call 'erlang':'bsr'
		      (Val, 7)
	      in  let <_cor4> =
		      %% Line 20729
		      call 'erlang':'band'
			  (Val, 127)
		  in  let <_cor5> =
			  %% Line 20729
			  call 'erlang':'bor'
			      (_cor4, 128)
		      in  let <_cor3> =
			      %% Line 20729
			      call 'erlang':'+'
				  (Len, 1)
			  in  %% Line 20729
			      apply 'mk_object_val'/3
				  (_cor6, [_cor5|Ack], _cor3)
	end
'mk_object_val'/1 =
    %% Line 20731
    fun (_cor0) ->
	case _cor0 of
	  <Val>
	      when call 'erlang':'=<'
		    (_cor0,
		     127) ->
	      let <_cor1> =
		  %% Line 20732
		  call 'erlang':'band'
		      (255, Val)
	      in  %% Line 20732
		  {[_cor1|[]],1}
	  %% Line 20733
	  <Val> when 'true' ->
	      let <_cor3> =
		  %% Line 20734
		  call 'erlang':'bsr'
		      (Val, 7)
	      in  let <_cor2> =
		      %% Line 20734
		      call 'erlang':'band'
			  (Val, 127)
		  in  %% Line 20734
		      apply 'mk_object_val'/3
			  (_cor3, [_cor2|[]], 1)
	end
'mk_uni_list'/1 =
    %% Line 20736
    fun (_cor0) ->
	%% Line 20737
	apply 'mk_uni_list'/2
	    (_cor0, [])
'mk_uni_list'/2 =
    %% Line 20739
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],List> when 'true' ->
	      %% Line 20740
	      call 'lists':'reverse'
		  (List)
	  %% Line 20741
	  <[{A,B,C,D}|T],List> when 'true' ->
	      %% Line 20742
	      apply 'mk_uni_list'/2
		  (T, [D|[C|[B|[A|List]]]])
	  %% Line 20743
	  <[H|T],List> when 'true' ->
	      %% Line 20744
	      apply 'mk_uni_list'/2
		  (T, [H|[0|[0|[0|List]]]])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'mk_uni_list',2}}] )
	    -| ['compiler_generated'] )
	end
'mk_universal_string'/1 =
    %% Line 20746
    fun (_cor0) ->
	%% Line 20747
	apply 'mk_universal_string'/2
	    (_cor0, [])
'mk_universal_string'/2 =
    %% Line 20749
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Acc> when 'true' ->
	      %% Line 20750
	      call 'lists':'reverse'
		  (Acc)
	  %% Line 20751
	  <[0|[0|[0|[D|T]]]],Acc> when 'true' ->
	      %% Line 20752
	      apply 'mk_universal_string'/2
		  (T, [D|Acc])
	  %% Line 20753
	  <[A|[B|[C|[D|T]]]],Acc> when 'true' ->
	      %% Line 20754
	      apply 'mk_universal_string'/2
		  (T, [{A,B,C,D}|Acc])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'mk_universal_string',2}}] )
	    -| ['compiler_generated'] )
	end
'number2name'/2 =
    %% Line 20756
    fun (_cor1,_cor0) ->
	%% Line 20757
	case call 'lists':'keyfind'
		 (_cor1, 2, _cor0) of
	  %% Line 20758
	  <{NamedVal,_cor5}> when 'true' ->
	      %% Line 20759
	      NamedVal
	  %% Line 20760
	  <_cor6> when 'true' ->
	      _cor1
	end
'pad_bit_list'/2 =
    %% Line 20764
    fun (_cor1,_cor0) ->
	let <Tail> =
	    %% Line 20765
	    call 'lists':'duplicate'
		(_cor1, 0)
	in  %% Line 20766
	    call 'lists':'append'
		(_cor0, Tail)
'remove_unused_then_dotag'/3 =
    %% Line 20768
    fun (_cor2,_cor1,_cor0) ->
	%% Line 20769
	case _cor1 of
	  %% Line 20770
	  <0>
	      when try
		    let <_cor3> =
			call 'erlang':'byte_size'
			    (_cor0)
		    in  call 'erlang':'=:='
			    (_cor3, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 20771
	      apply 'encode_tags'/3
		  (_cor2, #{#<0>(8,1,'integer',['unsigned'|['big']])}#, 1)
	  %% Line 20772
	  <0> when 'true' ->
	      let <Bin> =
		  %% Line 20773
		  #{#<_cor1>(8,1,'integer',['unsigned'|['big']]),
		    #<_cor0>('all',8,'binary',['unsigned'|['big']])}#
	      in  let <_cor5> =
		      %% Line 20774
		      call 'erlang':'byte_size'
			  (Bin)
		  in  %% Line 20774
		      apply 'encode_tags'/3
			  (_cor2, Bin, _cor5)
	  %% Line 20775
	  <Num> when 'true' ->
	      let <_cor6> =
		  %% Line 20776
		  call 'erlang':'byte_size'
		      (_cor0)
	      in  let <N> =
		      %% Line 20776
		      call 'erlang':'-'
			  (_cor6, 1)
		  in  %% Line 20777
		      case _cor0 of
			<#{#<BBits>(N,8,'binary',['unsigned'|['big']]),
			   #<LastByte>(8,1,'integer',['unsigned'|['big']])}#> when 'true' ->
			    let <_cor13> =
				%% Line 20780
				call 'erlang':'binary_to_list'
				    (BBits)
			    in  let <_cor11> =
				    %% Line 20782
				    call 'erlang':'bsr'
					(LastByte, Num)
				in  let <_cor12> =
					%% Line 20782
					call 'erlang':'bsl'
					    (_cor11, Num)
				    in  let <_cor14> =
					    %% Line 20781
					    call 'erlang':'++'
						(_cor13, %% Line 20782
							 [_cor12|[]])
					in  let <_cor9> =
						%% Line 20783
						call 'erlang':'byte_size'
						    (_cor0)
					    in  let <_cor10> =
						    %% Line 20783
						    call 'erlang':'+'
							(1, _cor9)
						in  %% Line 20778
						    apply 'encode_tags'/3
							(_cor2, %% Line 20779
								[_cor1|%% Line 20781
								       [_cor14|%% Line 20782
									       []]], _cor10)
			( <_cor8> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor8})
			  -| ['compiler_generated'] )
		      end
	end
'skip_indefinite_value'/1 =
    %% Line 20786
    fun (_cor0) ->
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <#{#<0>(8,1,'integer',['unsigned'|['big']]),
	     #<0>(8,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 20787
	      {'ok',Rest}
	  %% Line 20788
	  <Binary> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Binary)
		  %% Line 20789
		  case apply 'skip_tag'/1
			   (Binary) of
		    <{'ok',RestBinary}> when 'true' ->
			%% Line 20790
			case apply 'skip_length_and_value'/1
				 (RestBinary) of
			  <{'ok',RestBinary2}> when 'true' ->
			      %% Line 20791
			      apply 'skip_indefinite_value'/1
				  (RestBinary2)
			  ( <_cor2> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor2})
			    -| ['compiler_generated'] )
			end
		    ( <_cor1> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor1})
		      -| ['compiler_generated'] )
		  end
	end
'skip_length_and_value'/1 =
    %% Line 20793
    fun (_cor0) ->
	%% Line 20794
	case apply 'decode_length'/1
		 (_cor0) of
	  %% Line 20795
	  <{'indefinite',RestBinary}> when 'true' ->
	      %% Line 20796
	      apply 'skip_indefinite_value'/1
		  (RestBinary)
	  %% Line 20797
	  <{Length,RestBinary}> when 'true' ->
	      %% Line 20798
	      case ( RestBinary
		     -| ['reuse_for_context'] ) of
		<#{#<_cor4>(Length,8,'integer',['unsigned'|['big']]),
		   #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 20799
		    {'ok',Rest}
		( <_cor1> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor1)
			  primop 'match_fail'
			      ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'skip_long_tag'/1 =
    %% Line 20802
    fun (_cor0) ->
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <#{#<1>(1,1,'integer',['unsigned'|['big']]),
	     #<_cor2>(7,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 20803
	      apply 'skip_long_tag'/1
		  (Rest)
	  %% Line 20804
	  <#{#<0>(1,1,'integer',['unsigned'|['big']]),
	     #<_cor3>(7,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 20805
	      {'ok',Rest}
	  ( <_cor1> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor1)
		    ( primop 'match_fail'
			  ({'function_clause',_cor1})
		      -| [{'function_name',{'skip_long_tag',1}}] )
	    -| ['compiler_generated'] )
	end
'skip_tag'/1 =
    %% Line 20807
    fun (_cor0) ->
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <#{#<_cor2>(3,1,'integer',['unsigned'|['big']]),
	     #<31>(5,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 20808
	      apply 'skip_long_tag'/1
		  (Rest)
	  %% Line 20809
	  <#{#<_cor3>(3,1,'integer',['unsigned'|['big']]),
	     #<_X_Tag>(5,1,'integer',['unsigned'|['big']]),
	     #<Rest>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 20810
	      {'ok',Rest}
	  ( <_cor1> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor1)
		    ( primop 'match_fail'
			  ({'function_clause',_cor1})
		      -| [{'function_name',{'skip_tag',1}}] )
	    -| ['compiler_generated'] )
	end
'unused_bitlist'/3 =
    %% Line 20812
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],Trail,Ack> when 'true' ->
	      let <_cor3> =
		  %% Line 20813
		  call 'erlang':'+'
		      (Trail, 1)
	      in  %% Line 20813
		  {_cor3,Ack}
	  %% Line 20814
	  <[Bit|Rest],Trail,Ack> when 'true' ->
	      let <_cor6> =
		  %% Line 20815
		  call 'erlang':'-'
		      (Trail, 1)
	      in  let <_cor4> =
		      %% Line 20815
		      call 'erlang':'bsl'
			  (Bit, Trail)
		  in  let <_cor5> =
			  %% Line 20815
			  call 'erlang':'bor'
			      (_cor4, Ack)
		      in  %% Line 20815
			  apply 'unused_bitlist'/3
			      (Rest, _cor6, _cor5)
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'unused_bitlist',3}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('OTP-PUB-KEY')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('OTP-PUB-KEY', _cor0)
end