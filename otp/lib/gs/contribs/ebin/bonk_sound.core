module 'bonk_sound' ['module_info'/0,
		     'module_info'/1,
		     'start'/0]
    attributes []
'start'/0 =
    %% Line 24
    fun () ->
	do  %% Line 25
	    call 'random':'seed'
		()
	    do  %% Line 26
		call 'sounder':'start'
		    ()
		let <_cor0> =
		    %% Line 27
		    call 'bonk':'bonk_dir'
			()
		in  let <_cor1> =
			%% Line 27
			call 'lists':'append'
			    (_cor0, [115|[111|[117|[110|[100|[115|[47|[98|[111|[110|[107|[46|[97|[117]]]]]]]]]]]]]])
		    in  %% Line 27
			case call 'sounder':'new'
				 (_cor1) of
			  <{'ok',Bonk}> when 'true' ->
			      let <_cor3> =
				  %% Line 28
				  call 'bonk':'bonk_dir'
				      ()
			      in  let <_cor4> =
				      %% Line 28
				      call 'lists':'append'
					  (_cor3, [115|[111|[117|[110|[100|[115|[47|[111|[117|[99|[104|[33|[33|[33|[46|[97|[117]]]]]]]]]]]]]]]]])
				  in  %% Line 28
				      case call 'sounder':'new'
					       (_cor4) of
					<{'ok',Ouch}> when 'true' ->
					    let <_cor6> =
						%% Line 29
						call 'bonk':'bonk_dir'
						    ()
					    in  let <_cor7> =
						    %% Line 29
						    call 'lists':'append'
							(_cor6, [115|[111|[117|[110|[100|[115|[47|[100|[97|[109|[110|[46|[97|[117]]]]]]]]]]]]]])
						in  %% Line 29
						    case call 'sounder':'new'
							     (_cor7) of
						      <{'ok',Damn}> when 'true' ->
							  let <_cor9> =
							      %% Line 30
							      call 'bonk':'bonk_dir'
								  ()
							  in  let <_cor10> =
								  %% Line 30
								  call 'lists':'append'
								      (_cor9, [115|[111|[117|[110|[100|[115|[47|[101|[120|[112|[108|[111|[115|[105|[111|[110|[46|[97|[117]]]]]]]]]]]]]]]]]]])
							      in  %% Line 30
								  case call 'sounder':'new'
									   (_cor10) of
								    <{'ok',Bomb}> when 'true' ->
									let <_cor12> =
									    %% Line 31
									    call 'bonk':'bonk_dir'
										()
									in  let <_cor13> =
										%% Line 31
										call 'lists':'append'
										    (_cor12, [115|[111|[117|[110|[100|[115|[47|[109|[105|[115|[115|[101|[100|[109|[101|[46|[97|[117]]]]]]]]]]]]]]]]]])
									    in  %% Line 31
										case call 'sounder':'new'
											 (_cor13) of
										  <{'ok',Missed}> when 'true' ->
										      let <_cor15> =
											  %% Line 32
											  call 'bonk':'bonk_dir'
											      ()
										      in  let <_cor16> =
											      %% Line 32
											      call 'lists':'append'
												  (_cor15, [115|[111|[117|[110|[100|[115|[47|[103|[97|[109|[101|[111|[118|[101|[114|[46|[97|[117]]]]]]]]]]]]]]]]]])
											  in  %% Line 32
											      case call 'sounder':'new'
												       (_cor16) of
												<{'ok',Game_over}> when 'true' ->
												    let <_cor18> =
													%% Line 33
													call 'bonk':'bonk_dir'
													    ()
												    in  let <_cor19> =
													    %% Line 33
													    call 'lists':'append'
														(_cor18, [115|[111|[117|[110|[100|[115|[47|[108|[101|[118|[101|[108|[46|[97|[117]]]]]]]]]]]]]]])
													in  %% Line 33
													    case call 'sounder':'new'
														     (_cor19) of
													      <{'ok',New_level}> when 'true' ->
														  let <_cor21> =
														      %% Line 34
														      call 'bonk':'bonk_dir'
															  ()
														  in  let <_cor22> =
															  %% Line 34
															  call 'lists':'append'
															      (_cor21, [115|[111|[117|[110|[100|[115|[47|[116|[114|[117|[109|[112|[101|[116|[46|[97|[117]]]]]]]]]]]]]]]]])
														      in  %% Line 34
															  case call 'sounder':'new'
																   (_cor22) of
															    <{'ok',Music}> when 'true' ->
																let <_cor24> =
																    %% Line 35
																    call 'bonk':'bonk_dir'
																	()
																in  let <_cor25> =
																	%% Line 35
																	call 'lists':'append'
																	    (_cor24, [115|[111|[117|[110|[100|[115|[47|[104|[101|[104|[101|[101|[46|[97|[117]]]]]]]]]]]]]]])
																    in  %% Line 35
																	case call 'sounder':'new'
																		 (_cor25) of
																	  <{'ok',Start}> when 'true' ->
																	      let <_cor27> =
																		  %% Line 36
																		  call 'bonk':'bonk_dir'
																		      ()
																	      in  let <_cor28> =
																		      %% Line 36
																		      call 'lists':'append'
																			  (_cor27, [115|[111|[117|[110|[100|[115|[47|[112|[114|[97|[105|[115|[101|[106|[101|[115|[117|[115|[46|[97|[117]]]]]]]]]]]]]]]]]]]]])
																		  in  %% Line 36
																		      case call 'sounder':'new'
																			       (_cor28) of
																			<{'ok',BestS}> when 'true' ->
																			    let <_cor30> =
																				%% Line 37
																				call 'bonk':'bonk_dir'
																				    ()
																			    in  let <_cor31> =
																				    %% Line 37
																				    call 'lists':'append'
																					(_cor30, [115|[111|[117|[110|[100|[115|[47|[121|[101|[115|[46|[97|[117]]]]]]]]]]]]])
																				in  %% Line 37
																				    case call 'sounder':'new'
																					     (_cor31) of
																				      <{'ok',HighS}> when 'true' ->
																					  %% Line 38
																					  apply 'loop'/11
																					      (Bonk, Ouch, Damn, Bomb, Missed, Game_over, New_level, %% Line 39
																												     Music, %% Line 39
																													    Start, %% Line 39
																														   BestS, %% Line 39
																															  HighS)
																				      ( <_cor32> when 'true' ->
																					    primop 'match_fail'
																						({'badmatch',_cor32})
																					-| ['compiler_generated'] )
																				    end
																			( <_cor29> when 'true' ->
																			      primop 'match_fail'
																				  ({'badmatch',_cor29})
																			  -| ['compiler_generated'] )
																		      end
																	  ( <_cor26> when 'true' ->
																		primop 'match_fail'
																		    ({'badmatch',_cor26})
																	    -| ['compiler_generated'] )
																	end
															    ( <_cor23> when 'true' ->
																  primop 'match_fail'
																      ({'badmatch',_cor23})
															      -| ['compiler_generated'] )
															  end
													      ( <_cor20> when 'true' ->
														    primop 'match_fail'
															({'badmatch',_cor20})
														-| ['compiler_generated'] )
													    end
												( <_cor17> when 'true' ->
												      primop 'match_fail'
													  ({'badmatch',_cor17})
												  -| ['compiler_generated'] )
											      end
										  ( <_cor14> when 'true' ->
											primop 'match_fail'
											    ({'badmatch',_cor14})
										    -| ['compiler_generated'] )
										end
								    ( <_cor11> when 'true' ->
									  primop 'match_fail'
									      ({'badmatch',_cor11})
								      -| ['compiler_generated'] )
								  end
						      ( <_cor8> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor8})
							-| ['compiler_generated'] )
						    end
					( <_cor5> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor5})
					  -| ['compiler_generated'] )
				      end
			  ( <_cor2> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor2})
			    -| ['compiler_generated'] )
			end
'loop'/11 =
    %% Line 42
    fun (_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <R> =
	    %% Line 43
	    call 'random':'uniform'
		(1000)
	in  do  %% Line 44
		receive
		  %% Line 45
		  <'bonk'> when 'true' ->
		      %% Line 46
		      case <> of
			%% Line 47
			<>
			    when call 'erlang':'<'
				  (R,
				   75) ->
			    apply 'play_sound'/1
				(_cor8)
			%% Line 48
			<>
			    when call 'erlang':'<'
				  (R,
				   275) ->
			    apply 'play_sound'/1
				(_cor9)
			%% Line 49
			<> when 'true' ->
			    apply 'play_sound'/1
				(_cor10)
		      end
		  %% Line 51
		  <'bomb'> when 'true' ->
		      apply 'play_sound'/1
			  (_cor7)
		  %% Line 52
		  <'missed'> when 'true' ->
		      apply 'play_sound'/1
			  (_cor6)
		  %% Line 53
		  <'game_over'> when 'true' ->
		      apply 'play_sound'/1
			  (_cor5)
		  %% Line 54
		  <'new_level'> when 'true' ->
		      apply 'play_sound'/1
			  (_cor4)
		  %% Line 55
		  <'music'> when 'true' ->
		      apply 'play_sound'/1
			  (_cor3)
		  %% Line 56
		  <'start'> when 'true' ->
		      apply 'play_sound'/1
			  (_cor2)
		  %% Line 57
		  <'best_score'> when 'true' ->
		      apply 'play_sound'/1
			  (_cor1)
		  %% Line 58
		  <'high_score'> when 'true' ->
		      apply 'play_sound'/1
			  (_cor0)
		  %% Line 59
		  <'quit'> when 'true' ->
		      do  %% Line 60
			  call 'sounder':'stop'
			      ()
			  %% Line 61
			  call 'erlang':'exit'
			      ('normal')
		after 'infinity' ->
		  'ok'
		%% Line 63
		apply 'loop'/11
		    (_cor10, _cor9, _cor8, _cor7, _cor6, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
'play_sound'/1 =
    %% Line 65
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 66
		call 'sounder':'play'
		    (_cor0)
	in  %% Line 66
	    case _cor1 of
	      %% Line 67
	      <{'EXIT',_X_Reason}> when 'true' ->
		  do  %% Line 68
		      call 'io':'format'
			  ([67|[97|[110|[110|[111|[116|[32|[117|[115|[101|[32|[97|[117|[100|[105|[111|[32|[100|[101|[118|[105|[99|[101|[33|[10]]]]]]]]]]]]]]]]]]]]]]]]])
		      do  %% Line 69
			  call 'sounder':'stop'
			      ()
			  %% Line 70
			  apply 'silent_loop'/0
			      ()
	      %% Line 71
	      <_X_Other> when 'true' ->
		  %% Line 72
		  'true'
	    end
'silent_loop'/0 =
    %% Line 75
    fun () ->
	%% Line 76
	receive
	  %% Line 77
	  <'quit'> when 'true' ->
	      %% Line 78
	      call 'erlang':'exit'
		  ('normal')
	  %% Line 79
	  <_X_Other> when 'true' ->
	      %% Line 80
	      apply 'silent_loop'/0
		  ()
	after 'infinity' ->
	  'true'
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('bonk_sound')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('bonk_sound', _cor0)
end