module 'othello_adt' ['all_pos'/1,
		      'all_pos'/2,
		      'cnt_corn'/5,
		      'cnt_corn'/7,
		      'cnt_corner'/5,
		      'cnt_line'/6,
		      'col'/1,
		      'count'/2,
		      'deltas'/0,
		      'diff'/2,
		      'diff'/3,
		      'dir'/2,
		      'empty_neighbour'/2,
		      'empty_neighbour'/3,
		      'eval_board'/5,
		      'evaluate_board'/2,
		      'gen_list'/2,
		      'gen_score_board'/0,
		      'get'/2,
		      'inner_square'/0,
		      'inv'/1,
		      'is_draw'/3,
		      'is_empty'/3,
		      'is_good'/3,
		      'is_good_0'/4,
		      'is_good_1'/4,
		      'mk_board'/1,
		      'module_info'/0,
		      'module_info'/1,
		      'new'/1,
		      'pieces'/2,
		      'pieces'/4,
		      'pos'/2,
		      'possible_draws'/2,
		      'possible_draws'/3,
		      'possible_draws_0'/3,
		      'row'/1,
		      'score'/1,
		      'score1'/1,
		      'set'/3,
		      'stable'/3,
		      'stable'/4,
		      'stable_val'/4,
		      'swap'/1,
		      'swap'/3,
		      'test'/2,
		      'test0'/2,
		      'turn'/3,
		      'turn'/4,
		      'turn_0'/4]
    attributes []
'test'/2 =
    %% Line 38
    fun (_cor1,_cor0) ->
	let <X> =
	    %% Line 39
	    apply 'new'/1
		(_cor0)
	in  do  %% Line 40
		call 'erlang':'statistics'
		    ('wall_clock')
		do  %% Line 41
		    apply 'test0'/2
			(_cor1, X)
		    %% Line 42
		    case call 'erlang':'statistics'
			     ('wall_clock') of
		      <{_cor7,T}> when 'true' ->
			  let <_cor4> =
			      %% Line 43
			      call 'erlang':'/'
				  (T, _cor1)
			  in  %% Line 43
			      {'time_was',_cor4}
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
'test0'/2 =
    %% Line 46
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,_cor5> when 'true' ->
	      'true'
	  %% Line 47
	  <N,X> when 'true' ->
	      do  %% Line 48
		  apply 'possible_draws'/3
		      ('black', X, 'begin_play')
		  let <_cor2> =
		      %% Line 49
		      call 'erlang':'-'
			  (N, 1)
		  in  %% Line 49
		      apply 'test0'/2
			  (_cor2, X)
	end
'new'/1 =
    %% Line 57
    fun (_cor0) ->
	let <Board> =
	    %% Line 58
	    apply 'mk_board'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 59
		call 'ordsets':'from_list'
		    ([18|[19|[20|[21|[26|[29|[34|[37|[42|[43|[44|[45]]]]]]]]]]]])
	    in  %% Line 59
		{_cor2,Board}
'mk_board'/1 =
    %% Line 61
    fun (_cor0) ->
	case _cor0 of
	  <'t'> when 'true' ->
	      let <_cor1> =
		  %% Line 62
		  apply 'gen_list'/2
		      (64, 'grey')
	      in  let <Tup> =
		      %% Line 62
		      call 'erlang':'list_to_tuple'
			  (_cor1)
		  in  let <Tup1> =
			  %% Line 63
			  call 'erlang':'setelement'
			      (29, Tup, 'white')
		      in  let <Tup2> =
			      %% Line 64
			      call 'erlang':'setelement'
				  (36, Tup1, 'white')
			  in  let <Tup3> =
				  %% Line 65
				  call 'erlang':'setelement'
				      (28, Tup2, 'black')
			      in  do  %% Line 66
				      apply 'gen_score_board'/0
					  ()
				      %% Line 67
				      call 'erlang':'setelement'
					  (37, Tup3, 'black')
	  ( <_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10})
		  -| [{'function_name',{'mk_board',1}}] )
	    -| ['compiler_generated'] )
	end
'gen_list'/2 =
    %% Line 69
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,_cor6> when 'true' ->
	      []
	  %% Line 70
	  <I,Def> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'-'
		      (I, 1)
	      in  let <_cor3> =
		      apply 'gen_list'/2
			  (_cor2, Def)
		  in  [Def|_cor3]
	end
'gen_score_board'/0 =
    %% Line 72
    fun () ->
	let <_cor0> =
	    apply 'gen_list'/2
		(64, 0)
	in  let <_cor1> =
		call 'erlang':'list_to_tuple'
		    (_cor0)
	    in  call 'erlang':'put'
		    ('score', _cor1)
'pos'/2 =
    %% Line 80
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    call 'erlang':'-'
		(_cor0, 1)
	in  let <_cor4> =
		call 'erlang':'bsl'
		    (_cor3, 3)
	    in  let <_cor2> =
		    call 'erlang':'-'
			(_cor1, 1)
		in  call 'erlang':'+'
			(_cor4, _cor2)
'col'/1 =
    %% Line 86
    fun (_cor0) ->
	let <_cor1> =
	    call 'erlang':'band'
		(_cor0, 7)
	in  call 'erlang':'+'
		(_cor1, 1)
'row'/1 =
    %% Line 92
    fun (_cor0) ->
	let <_cor1> =
	    call 'erlang':'bsr'
		(_cor0, 3)
	in  call 'erlang':'+'
		(_cor1, 1)
'is_draw'/3 =
    %% Line 99
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Pos,Colour,{Bset,Board}> when 'true' ->
	      %% Line 100
	      case call 'ordsets':'is_element'
		       (Pos, Bset) of
		%% Line 101
		<'true'> when 'true' ->
		    let <_cor3> =
			catch
			    %% Line 102
			    apply 'is_good'/3
				(Colour, Pos, Board)
		    in  %% Line 102
			case _cor3 of
			  %% Line 103
			  <'true'> when 'true' ->
			      %% Line 104
			      'true'
			  %% Line 105
			  <_cor9> when 'true' ->
			      %% Line 106
			      'false'
			end
		%% Line 108
		<_cor10> when 'true' ->
		    %% Line 109
		    'false'
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'is_draw',3}}] )
	    -| ['compiler_generated'] )
	end
'set'/3 =
    %% Line 116
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Pos,Colour,{Bset,Board}> when 'true' ->
	      %% Line 117
	      case call 'ordsets':'is_element'
		       (Pos, Bset) of
		%% Line 118
		<'true'> when 'true' ->
		    let <_cor3> =
			%% Line 119
			call 'erlang':'+'
			    (Pos, 1)
		    in  let <NewBoard> =
			    %% Line 119
			    call 'erlang':'setelement'
				(_cor3, Board, Colour)
			in  let <Empty> =
				%% Line 120
				apply 'empty_neighbour'/2
				    (Pos, NewBoard)
			    in  let <_cor6> =
				    %% Line 121
				    call 'ordsets':'del_element'
					(Pos, Bset)
				in  let <NewBset> =
					%% Line 121
					call 'ordsets':'union'
					    (Empty, _cor6)
				    in  %% Line 122
					apply 'turn'/3
					    (Colour, Pos, {NewBset,NewBoard})
		%% Line 123
		<_cor12> when 'true' ->
		    %% Line 124
		    {'error','invalid_position'}
	      end
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'set',3}}] )
	    -| ['compiler_generated'] )
	end
'empty_neighbour'/2 =
    %% Line 127
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 128
	    apply 'deltas'/0
		()
	in  let <_cor3> =
		%% Line 128
		apply 'empty_neighbour'/3
		    (_cor1, _cor0, _cor2)
	    in  %% Line 128
		call 'ordsets':'from_list'
		    (_cor3)
'empty_neighbour'/3 =
    %% Line 130
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_cor11,_cor12,[]> when 'true' ->
	      []
	  %% Line 131
	  <Pos,Board,[H|T]> when 'true' ->
	      let <_cor4> =
		  %% Line 132
		  call 'erlang':'+'
		      (Pos, H)
	      in  let <_cor3> =
		      %% Line 132
		      apply 'dir'/2
			  (Pos, H)
		  in  %% Line 132
		      case apply 'is_empty'/3
			       (_cor4, _cor3, Board) of
			%% Line 133
			<'true'> when 'true' ->
			    let <_cor5> =
				call 'erlang':'+'
				    (Pos, H)
			    in  let <_cor6> =
				    apply 'empty_neighbour'/3
					(Pos, Board, T)
				in  [_cor5|_cor6]
			%% Line 134
			<_cor13> when 'true' ->
			    apply 'empty_neighbour'/3
				(Pos, Board, T)
		      end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'empty_neighbour',3}}] )
	    -| ['compiler_generated'] )
	end
'is_empty'/3 =
    %% Line 137
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_cor8,'false',_cor9> when 'true' ->
	      'false'
	  %% Line 138
	  <X,_cor10,_X_Board>
	      when call 'erlang':'<'
		    (X,
		     0) ->
	      'false'
	  %% Line 139
	  <X,_cor11,_X_Board>
	      when call 'erlang':'>'
		    (X,
		     63) ->
	      'false'
	  %% Line 140
	  <X,_cor12,Board> when 'true' ->
	      let <_cor3> =
		  %% Line 141
		  call 'erlang':'+'
		      (X, 1)
	      in  %% Line 141
		  case call 'erlang':'element'
			   (_cor3, Board) of
		    %% Line 142
		    <'grey'> when 'true' ->
			'true'
		    %% Line 143
		    <_cor13> when 'true' ->
			'false'
		  end
	end
'get'/2 =
    %% Line 150
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pos,{_X_Bset,Board}> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'+'
		      (Pos, 1)
	      in  call 'erlang':'element'
		      (_cor2, Board)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'get',2}}] )
	    -| ['compiler_generated'] )
	end
'pieces'/2 =
    %% Line 157
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Colour,{_X_Bset,Board}> when 'true' ->
	      %% Line 158
	      apply 'pieces'/4
		  (Colour, Board, 0, 0)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'pieces',2}}] )
	    -| ['compiler_generated'] )
	end
'pieces'/4 =
    %% Line 160
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Colour,Board,Pos,Count>
	      when call 'erlang':'<'
		    (Pos,
		     64) ->
	      let <_cor4> =
		  %% Line 161
		  call 'erlang':'+'
		      (Pos, 1)
	      in  %% Line 161
		  case call 'erlang':'element'
			   (_cor4, Board) of
		    %% Line 162
		    <_cor13>
			when call 'erlang':'=:='
			      (_cor13,
			       Colour) ->
			let <_cor6> =
			    %% Line 163
			    call 'erlang':'+'
				(Pos, 1)
			in  let <_cor5> =
				%% Line 163
				call 'erlang':'+'
				    (Count, 1)
			    in  %% Line 163
				apply 'pieces'/4
				    (Colour, Board, _cor6, _cor5)
		    %% Line 164
		    <_cor14> when 'true' ->
			let <_cor7> =
			    %% Line 165
			    call 'erlang':'+'
				(Pos, 1)
			in  %% Line 165
			    apply 'pieces'/4
				(Colour, Board, _cor7, Count)
		  end
	  %% Line 167
	  <_cor15,_cor16,_cor17,Count> when 'true' ->
	      %% Line 168
	      Count
	end
'possible_draws'/3 =
    %% Line 177
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Colour,{Bset,Board},'begin_play'> when 'true' ->
	      let <_cor3> =
		  %% Line 178
		  apply 'inner_square'/0
		      ()
	      in  let <Dset> =
		      %% Line 178
		      call 'ordsets':'intersection'
			  (Bset, _cor3)
		  in  %% Line 179
		      apply 'possible_draws_0'/3
			  (Colour, Dset, Board)
	  %% Line 180
	  <Colour,{Bset,Board},_cor8> when 'true' ->
	      %% Line 181
	      apply 'possible_draws_0'/3
		  (Colour, Bset, Board)
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'possible_draws',3}}] )
	    -| ['compiler_generated'] )
	end
'possible_draws'/2 =
    %% Line 183
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Colour,{Bset,Board}> when 'true' ->
	      %% Line 184
	      apply 'possible_draws_0'/3
		  (Colour, Bset, Board)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'possible_draws',2}}] )
	    -| ['compiler_generated'] )
	end
'possible_draws_0'/3 =
    %% Line 186
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_cor9,[],_cor10> when 'true' ->
	      []
	  %% Line 187
	  <Colour,[H|T],Board> when 'true' ->
	      let <_cor3> =
		  catch
		      %% Line 188
		      apply 'is_good'/3
			  (Colour, H, Board)
	      in  %% Line 188
		  case _cor3 of
		    %% Line 189
		    <'true'> when 'true' ->
			let <_cor4> =
			    apply 'possible_draws_0'/3
				(Colour, T, Board)
			in  [H|_cor4]
		    %% Line 190
		    <'false'> when 'true' ->
			apply 'possible_draws_0'/3
			    (Colour, T, Board)
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'possible_draws_0',3}}] )
	    -| ['compiler_generated'] )
	end
'evaluate_board'/2 =
    %% Line 200
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Colour,{_X_Bset,Board}> when 'true' ->
	      let <Score> =
		  %% Line 201
		  call 'erlang':'get'
		      ('score')
	      in  let <Colour1> =
		      %% Line 202
		      apply 'swap'/1
			  (Colour)
		  in  let <Score1> =
			  %% Line 203
			  apply 'eval_board'/5
			      (Colour, Colour1, Score, Board, 0)
		      in  let <Score2> =
			      %% Line 204
			      apply 'cnt_corner'/5
				  (0, Score1, Board, Colour, Colour1)
			  in  let <Score3> =
				  %% Line 205
				  apply 'cnt_corner'/5
				      (7, Score2, Board, Colour, Colour1)
			      in  let <Score4> =
				      %% Line 206
				      apply 'cnt_corner'/5
					  (56, Score3, Board, Colour, Colour1)
				  in  let <Score5> =
					  %% Line 207
					  apply 'cnt_corner'/5
					      (63, Score4, Board, Colour, Colour1)
				      in  %% Line 208
					  apply 'count'/2
					      (Score5, 0)
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'evaluate_board',2}}] )
	    -| ['compiler_generated'] )
	end
'eval_board'/5 =
    %% Line 213
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <MyCol,OtCol,Score,Board,Pos>
	      when call 'erlang':'<'
		    (Pos,
		     64) ->
	      let <_cor5> =
		  %% Line 214
		  call 'erlang':'+'
		      (Pos, 1)
	      in  %% Line 214
		  case call 'erlang':'element'
			   (_cor5, Board) of
		    %% Line 215
		    <_cor22>
			when call 'erlang':'=:='
			      (_cor22,
			       MyCol) ->
			let <_cor7> =
			    %% Line 216
			    call 'erlang':'+'
				(Pos, 1)
			in  let <_cor6> =
				%% Line 216
				apply 'score'/1
				    (Pos)
			    in  let <Score1> =
				    %% Line 216
				    call 'erlang':'setelement'
					(_cor7, Score, _cor6)
				in  let <_cor9> =
					%% Line 217
					call 'erlang':'+'
					    (Pos, 1)
				    in  %% Line 217
					apply 'eval_board'/5
					    (MyCol, OtCol, Score1, Board, _cor9)
		    %% Line 218
		    <_cor23>
			when call 'erlang':'=:='
			      (_cor23,
			       OtCol) ->
			let <_cor12> =
			    %% Line 219
			    call 'erlang':'+'
				(Pos, 1)
			in  let <_cor10> =
				%% Line 219
				apply 'score'/1
				    (Pos)
			    in  let <_cor11> =
				    %% Line 219
				    call 'erlang':'-'
					(_cor10)
				in  let <Score1> =
					%% Line 219
					call 'erlang':'setelement'
					    (_cor12, Score, _cor11)
				    in  let <_cor14> =
					    %% Line 220
					    call 'erlang':'+'
						(Pos, 1)
					in  %% Line 220
					    apply 'eval_board'/5
						(MyCol, OtCol, Score1, Board, _cor14)
		    %% Line 221
		    <_cor24> when 'true' ->
			let <_cor15> =
			    %% Line 222
			    call 'erlang':'+'
				(Pos, 1)
			in  %% Line 222
			    apply 'eval_board'/5
				(MyCol, OtCol, Score, Board, _cor15)
		  end
	  %% Line 224
	  <_cor25,_cor26,Score,_cor27,_cor28> when 'true' ->
	      %% Line 225
	      Score
	end
'cnt_corner'/5 =
    %% Line 227
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 228
	    call 'erlang':'+'
		(_cor4, 1)
	in  %% Line 228
	    case call 'erlang':'element'
		     (_cor5, _cor2) of
	      %% Line 229
	      <_cor18>
		  when call 'erlang':'=:='
			(_cor18,
			 _cor1) ->
		  let <_cor6> =
		      %% Line 230
		      call 'erlang':'+'
			  (_cor4, 1)
		  in  let <_cor7> =
			  %% Line 230
			  call 'erlang':'setelement'
			      (_cor6, _cor3, 50)
		      in  %% Line 230
			  apply 'cnt_corn'/5
			      (_cor4, _cor7, _cor2, %% Line 231
						    50, _cor1)
	      %% Line 232
	      <_cor19>
		  when call 'erlang':'=:='
			(_cor19,
			 _cor0) ->
		  let <_cor10> =
		      %% Line 233
		      call 'erlang':'+'
			  (_cor4, 1)
		  in  let <_cor11> =
			  %% Line 233
			  call 'erlang':'setelement'
			      (_cor10, _cor3, -50)
		      in  %% Line 233
			  apply 'cnt_corn'/5
			      (_cor4, _cor11, _cor2, -50, _cor0)
	      %% Line 235
	      <_cor20> when 'true' ->
		  _cor3
	    end
'cnt_corn'/5 =
    %% Line 239
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <0,Score,Board,Value,Colour> when 'true' ->
	      let <Score1> =
		  %% Line 240
		  apply 'cnt_corn'/7
		      (0, 1, 8, Score, Board, Value, Colour)
	      in  %% Line 241
		  apply 'cnt_corn'/7
		      (0, 8, 1, Score1, Board, Value, Colour)
	  %% Line 242
	  <7,Score,Board,Value,Colour> when 'true' ->
	      let <Score1> =
		  %% Line 243
		  apply 'cnt_corn'/7
		      (7, -1, 8, Score, Board, Value, Colour)
	      in  %% Line 244
		  apply 'cnt_corn'/7
		      (7, 8, -1, Score1, Board, Value, Colour)
	  %% Line 245
	  <56,Score,Board,Value,Colour> when 'true' ->
	      let <Score1> =
		  %% Line 246
		  apply 'cnt_corn'/7
		      (56, 1, -8, Score, Board, Value, Colour)
	      in  %% Line 247
		  apply 'cnt_corn'/7
		      (56, -8, 1, Score1, Board, Value, Colour)
	  %% Line 248
	  <63,Score,Board,Value,Colour> when 'true' ->
	      let <Score1> =
		  %% Line 249
		  apply 'cnt_corn'/7
		      (63, -1, -8, Score, Board, Value, Colour)
	      in  %% Line 250
		  apply 'cnt_corn'/7
		      (63, -8, -1, Score1, Board, Value, Colour)
	  ( <_cor21,_cor20,_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19,_cor18,_cor17})
		  -| [{'function_name',{'cnt_corn',5}}] )
	    -| ['compiler_generated'] )
	end
'cnt_corn'/7 =
    %% Line 252
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 253
	case apply 'dir'/2
		 (_cor6, _cor5) of
	  %% Line 254
	  <_cor21>
	      when call 'erlang':'=:='
		    (_cor21,
		     _cor5) ->
	      let <NextEdge> =
		  %% Line 255
		  call 'erlang':'+'
		      (_cor6, _cor5)
	      in  let <_cor8> =
		      %% Line 256
		      call 'erlang':'+'
			  (NextEdge, 1)
		  in  %% Line 256
		      case call 'erlang':'element'
			       (_cor8, _cor2) of
			%% Line 257
			<_cor22>
			    when call 'erlang':'=:='
				  (_cor22,
				   _cor0) ->
			    let <_cor9> =
				%% Line 258
				call 'erlang':'+'
				    (NextEdge, 1)
			    in  let <Score1> =
				    %% Line 258
				    call 'erlang':'setelement'
					(_cor9, _cor3, _cor1)
				in  let <Score2> =
					%% Line 259
					apply 'cnt_line'/6
					    (NextEdge, _cor4, Score1, _cor2, _cor0, _cor1)
				    in  %% Line 261
					apply 'cnt_corn'/7
					    (NextEdge, _cor5, _cor4, Score2, _cor2, _cor1, _cor0)
			%% Line 262
			<_cor23> when 'true' ->
			    _cor3
		      end
	  %% Line 265
	  <_cor24> when 'true' ->
	      _cor3
	end
'cnt_line'/6 =
    %% Line 269
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 270
	case apply 'dir'/2
		 (_cor5, _cor4) of
	  %% Line 271
	  <_cor18>
	      when call 'erlang':'=:='
		    (_cor18,
		     _cor4) ->
	      let <OnLinePos> =
		  %% Line 272
		  call 'erlang':'+'
		      (_cor5, _cor4)
	      in  let <_cor7> =
		      %% Line 273
		      call 'erlang':'+'
			  (OnLinePos, 1)
		  in  %% Line 273
		      case call 'erlang':'element'
			       (_cor7, _cor2) of
			%% Line 274
			<_cor19>
			    when call 'erlang':'=:='
				  (_cor19,
				   _cor1) ->
			    let <_cor8> =
				%% Line 275
				call 'erlang':'+'
				    (OnLinePos, 1)
			    in  let <Score1> =
				    %% Line 275
				    call 'erlang':'setelement'
					(_cor8, _cor3, _cor0)
				in  %% Line 276
				    apply 'cnt_line'/6
					(OnLinePos, _cor4, Score1, _cor2, _cor1, _cor0)
			%% Line 277
			<_cor20> when 'true' ->
			    _cor3
		      end
	  %% Line 280
	  <_cor21> when 'true' ->
	      _cor3
	end
'count'/2 =
    %% Line 284
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Score,Pos>
	      when call 'erlang':'<'
		    (Pos,
		     64) ->
	      let <_cor4> =
		  %% Line 285
		  call 'erlang':'+'
		      (Pos, 1)
	      in  let <_cor5> =
		      %% Line 285
		      call 'erlang':'element'
			  (_cor4, Score)
		  in  let <_cor2> =
			  %% Line 285
			  call 'erlang':'+'
			      (Pos, 1)
		      in  let <_cor3> =
			      %% Line 285
			      apply 'count'/2
				  (Score, _cor2)
			  in  %% Line 285
			      call 'erlang':'+'
				  (_cor5, _cor3)
	  %% Line 286
	  <_cor8,_cor9> when 'true' ->
	      %% Line 287
	      0
	end
'swap'/1 =
    %% Line 289
    fun (_cor0) ->
	case _cor0 of
	  <'white'> when 'true' ->
	      'black'
	  %% Line 290
	  <'black'> when 'true' ->
	      'white'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'swap',1}}] )
	    -| ['compiler_generated'] )
	end
'stable'/3 =
    %% Line 301
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Colour,Pos,{_cor7,Board}> when 'true' ->
	      let <_cor3> =
		  %% Line 302
		  apply 'deltas'/0
		      ()
	      in  %% Line 302
		  apply 'stable'/4
		      (_cor3, Colour, Pos, Board)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'stable',3}}] )
	    -| ['compiler_generated'] )
	end
'stable'/4 =
    %% Line 304
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_cor10,_cor11,_cor12> when 'true' ->
	      0
	  %% Line 305
	  <[H|T],Colour,Pos,Board> when 'true' ->
	      let <_cor5> =
		  %% Line 306
		  apply 'stable_val'/4
		      (Colour, Pos, H, Board)
	      in  let <_cor4> =
		      %% Line 306
		      apply 'stable'/4
			  (T, Colour, Pos, Board)
		  in  %% Line 306
		      call 'erlang':'+'
			  (_cor5, _cor4)
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'stable',4}}] )
	    -| ['compiler_generated'] )
	end
'stable_val'/4 =
    %% Line 308
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_cor16,H,D,_cor17>
	      when try
		    let <_cor4> =
			call 'erlang':'+'
			    (H, D)
		    in  call 'erlang':'<'
			    (_cor4, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      1
	  %% Line 309
	  <_cor18,H,D,_cor19>
	      when try
		    let <_cor5> =
			call 'erlang':'+'
			    (H, D)
		    in  call 'erlang':'>'
			    (_cor5, 63)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      1
	  %% Line 310
	  <'black',H,D,Board> when 'true' ->
	      let <_cor6> =
		  %% Line 311
		  call 'erlang':'+'
		      (H, D)
	      in  let <_cor7> =
		      %% Line 311
		      call 'erlang':'+'
			  (_cor6, 1)
		  in  %% Line 311
		      case call 'erlang':'element'
			       (_cor7, Board) of
			%% Line 312
			<'black'> when 'true' ->
			    1
			%% Line 313
			<_cor20> when 'true' ->
			    0
		      end
	  %% Line 315
	  <'white',H,D,Board> when 'true' ->
	      let <_cor9> =
		  %% Line 316
		  call 'erlang':'+'
		      (H, D)
	      in  let <_cor10> =
		      %% Line 316
		      call 'erlang':'+'
			  (_cor9, 1)
		  in  %% Line 316
		      case call 'erlang':'element'
			       (_cor10, Board) of
			%% Line 317
			<'white'> when 'true' ->
			    1
			%% Line 318
			<_cor21> when 'true' ->
			    0
		      end
	  ( <_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'stable_val',4}}] )
	    -| ['compiler_generated'] )
	end
'diff'/2 =
    %% Line 327
    fun (_cor1,_cor0) ->
	apply 'diff'/3
	    (0, _cor1, _cor0)
'diff'/3 =
    %% Line 329
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Pos,Board,OldBoard>
	      when call 'erlang':'<'
		    (Pos,
		     64) ->
	      let <OldP> =
		  %% Line 330
		  apply 'get'/2
		      (Pos, OldBoard)
	      in  %% Line 331
		  case apply 'get'/2
			   (Pos, Board) of
		    %% Line 332
		    <_cor11>
			when call 'erlang':'=:='
			      (_cor11,
			       OldP) ->
			let <_cor4> =
			    %% Line 333
			    call 'erlang':'+'
				(Pos, 1)
			in  %% Line 333
			    apply 'diff'/3
				(_cor4, Board, OldBoard)
		    %% Line 334
		    <NewP> when 'true' ->
			let <_cor5> =
			    %% Line 335
			    call 'erlang':'+'
				(Pos, 1)
			in  let <_cor6> =
				%% Line 335
				apply 'diff'/3
				    (_cor5, Board, OldBoard)
			    in  %% Line 335
				[{Pos,NewP}|_cor6]
		  end
	  %% Line 337
	  <_cor12,_cor13,_cor14> when 'true' ->
	      %% Line 338
	      []
	end
'all_pos'/1 =
    %% Line 345
    fun (_cor0) ->
	apply 'all_pos'/2
	    (0, _cor0)
'all_pos'/2 =
    %% Line 347
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pos,Board>
	      when call 'erlang':'<'
		    (Pos,
		     64) ->
	      let <_cor2> =
		  %% Line 348
		  apply 'get'/2
		      (Pos, Board)
	      in  let <_cor3> =
		      %% Line 348
		      call 'erlang':'+'
			  (Pos, 1)
		  in  let <_cor4> =
			  %% Line 348
			  apply 'all_pos'/2
			      (_cor3, Board)
		      in  %% Line 348
			  [{Pos,_cor2}|_cor4]
	  %% Line 349
	  <_cor7,_cor8> when 'true' ->
	      %% Line 350
	      []
	end
'deltas'/0 =
    %% Line 356
    fun () ->
	[9|[8|[7|[1|[-1|[-7|[-8|[-9]]]]]]]]
'inner_square'/0 =
    %% Line 358
    fun () ->
	%% Line 359
	[18|[19|[20|[21|[26|[27|[28|[29|[34|[35|[36|[37|[42|[43|[44|[45]]]]]]]]]]]]]]]]
'inv'/1 =
    %% Line 363
    fun (_cor0) ->
	case _cor0 of
	  <'black'> when 'true' ->
	      'white'
	  %% Line 364
	  <'white'> when 'true' ->
	      'black'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'inv',1}}] )
	    -| ['compiler_generated'] )
	end
'is_good'/3 =
    %% Line 366
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 367
	    apply 'dir'/2
		(_cor1, -9)
	in  do  %% Line 367
		apply 'is_good_0'/4
		    (_cor2, _cor1, _cor4, _cor0)
		let <_cor6> =
		    %% Line 368
		    apply 'dir'/2
			(_cor1, -8)
		in  do  %% Line 368
			apply 'is_good_0'/4
			    (_cor2, _cor1, _cor6, _cor0)
			let <_cor8> =
			    %% Line 369
			    apply 'dir'/2
				(_cor1, -7)
			in  do  %% Line 369
				apply 'is_good_0'/4
				    (_cor2, _cor1, _cor8, _cor0)
				let <_cor10> =
				    %% Line 370
				    apply 'dir'/2
					(_cor1, -1)
				in  do  %% Line 370
					apply 'is_good_0'/4
					    (_cor2, _cor1, _cor10, _cor0)
					let <_cor11> =
					    %% Line 371
					    apply 'dir'/2
						(_cor1, 1)
					in  do  %% Line 371
						apply 'is_good_0'/4
						    (_cor2, _cor1, _cor11, _cor0)
						let <_cor12> =
						    %% Line 372
						    apply 'dir'/2
							(_cor1, 7)
						in  do  %% Line 372
							apply 'is_good_0'/4
							    (_cor2, _cor1, _cor12, _cor0)
							let <_cor13> =
							    %% Line 373
							    apply 'dir'/2
								(_cor1, 8)
							in  do  %% Line 373
								apply 'is_good_0'/4
								    (_cor2, _cor1, _cor13, _cor0)
								let <_cor14> =
								    %% Line 374
								    apply 'dir'/2
									(_cor1, 9)
								in  do  %% Line 374
									apply 'is_good_0'/4
									    (_cor2, _cor1, _cor14, _cor0)
									%% Line 375
									'false'
'is_good_0'/4 =
    %% Line 377
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_cor34,_cor35,'false',_cor36> when 'true' ->
	      'false'
	  %% Line 378
	  <_cor37,H,D,_cor38>
	      when try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (H)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(D)
			in  let <_cor6> =
				call 'erlang':'+'
				    (H, D)
			    in  let <_cor7> =
				    call 'erlang':'<'
					(_cor6, 0)
				in  let <_cor8> =
					call 'erlang':'and'
					    (_cor5, _cor7)
				    in  call 'erlang':'and'
					    (_cor4, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      'false'
	  %% Line 379
	  <_cor39,H,D,_cor40>
	      when try
		    let <_cor9> =
			call 'erlang':'is_integer'
			    (H)
		    in  let <_cor10> =
			    call 'erlang':'is_integer'
				(D)
			in  let <_cor11> =
				call 'erlang':'+'
				    (H, D)
			    in  let <_cor12> =
				    call 'erlang':'>'
					(_cor11, 63)
				in  let <_cor13> =
					call 'erlang':'and'
					    (_cor10, _cor12)
				    in  call 'erlang':'and'
					    (_cor9, _cor13)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      'false'
	  %% Line 380
	  <'black',H,D,Board>
	      when let <_cor14> =
		    call 'erlang':'is_integer'
			(H)
		in  let <_cor15> =
			call 'erlang':'is_integer'
			    (D)
		    in  call 'erlang':'and'
			    (_cor14, _cor15) ->
	      let <_cor16> =
		  %% Line 381
		  call 'erlang':'+'
		      (H, D)
	      in  let <_cor17> =
		      %% Line 381
		      call 'erlang':'+'
			  (_cor16, 1)
		  in  %% Line 381
		      case call 'erlang':'element'
			       (_cor17, Board) of
			%% Line 382
			<'white'> when 'true' ->
			    let <_cor20> =
				call 'erlang':'+'
				    (H, D)
			    in  let <_cor18> =
				    call 'erlang':'+'
					(H, D)
				in  let <_cor19> =
					apply 'dir'/2
					    (_cor18, D)
				    in  apply 'is_good_1'/4
					    ('black', _cor20, _cor19, Board)
			%% Line 383
			<_cor41> when 'true' ->
			    'false'
		      end
	  %% Line 385
	  <'white',H,D,Board>
	      when let <_cor22> =
		    call 'erlang':'is_integer'
			(H)
		in  let <_cor23> =
			call 'erlang':'is_integer'
			    (D)
		    in  call 'erlang':'and'
			    (_cor22, _cor23) ->
	      let <_cor24> =
		  %% Line 386
		  call 'erlang':'+'
		      (H, D)
	      in  let <_cor25> =
		      %% Line 386
		      call 'erlang':'+'
			  (_cor24, 1)
		  in  %% Line 386
		      case call 'erlang':'element'
			       (_cor25, Board) of
			%% Line 387
			<'black'> when 'true' ->
			    let <_cor28> =
				call 'erlang':'+'
				    (H, D)
			    in  let <_cor26> =
				    call 'erlang':'+'
					(H, D)
				in  let <_cor27> =
					apply 'dir'/2
					    (_cor26, D)
				    in  apply 'is_good_1'/4
					    ('white', _cor28, _cor27, Board)
			%% Line 388
			<_cor42> when 'true' ->
			    'false'
		      end
	  ( <_cor33,_cor32,_cor31,_cor30> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor33,_cor32,_cor31,_cor30})
		  -| [{'function_name',{'is_good_0',4}}] )
	    -| ['compiler_generated'] )
	end
'is_good_1'/4 =
    %% Line 391
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_cor34,_cor35,'false',_cor36> when 'true' ->
	      'false'
	  %% Line 392
	  <_cor37,H,D,_cor38>
	      when try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (H)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(D)
			in  let <_cor6> =
				call 'erlang':'+'
				    (H, D)
			    in  let <_cor7> =
				    call 'erlang':'<'
					(_cor6, 0)
				in  let <_cor8> =
					call 'erlang':'and'
					    (_cor5, _cor7)
				    in  call 'erlang':'and'
					    (_cor4, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      'false'
	  %% Line 393
	  <_cor39,H,D,_cor40>
	      when try
		    let <_cor9> =
			call 'erlang':'is_integer'
			    (H)
		    in  let <_cor10> =
			    call 'erlang':'is_integer'
				(D)
			in  let <_cor11> =
				call 'erlang':'+'
				    (H, D)
			    in  let <_cor12> =
				    call 'erlang':'>'
					(_cor11, 63)
				in  let <_cor13> =
					call 'erlang':'and'
					    (_cor10, _cor12)
				    in  call 'erlang':'and'
					    (_cor9, _cor13)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      'false'
	  %% Line 394
	  <'black',H,D,Board>
	      when let <_cor14> =
		    call 'erlang':'is_integer'
			(H)
		in  let <_cor15> =
			call 'erlang':'is_integer'
			    (D)
		    in  call 'erlang':'and'
			    (_cor14, _cor15) ->
	      let <_cor16> =
		  %% Line 395
		  call 'erlang':'+'
		      (H, D)
	      in  let <_cor17> =
		      %% Line 395
		      call 'erlang':'+'
			  (_cor16, 1)
		  in  %% Line 395
		      case call 'erlang':'element'
			       (_cor17, Board) of
			%% Line 396
			<'white'> when 'true' ->
			    let <_cor20> =
				call 'erlang':'+'
				    (H, D)
			    in  let <_cor18> =
				    call 'erlang':'+'
					(H, D)
				in  let <_cor19> =
					apply 'dir'/2
					    (_cor18, D)
				    in  apply 'is_good_1'/4
					    ('black', _cor20, _cor19, Board)
			%% Line 397
			<'black'> when 'true' ->
			    call 'erlang':'throw'
				('true')
			%% Line 398
			<_cor41> when 'true' ->
			    'false'
		      end
	  %% Line 400
	  <'white',H,D,Board>
	      when let <_cor22> =
		    call 'erlang':'is_integer'
			(H)
		in  let <_cor23> =
			call 'erlang':'is_integer'
			    (D)
		    in  call 'erlang':'and'
			    (_cor22, _cor23) ->
	      let <_cor24> =
		  %% Line 401
		  call 'erlang':'+'
		      (H, D)
	      in  let <_cor25> =
		      %% Line 401
		      call 'erlang':'+'
			  (_cor24, 1)
		  in  %% Line 401
		      case call 'erlang':'element'
			       (_cor25, Board) of
			%% Line 402
			<'black'> when 'true' ->
			    let <_cor28> =
				call 'erlang':'+'
				    (H, D)
			    in  let <_cor26> =
				    call 'erlang':'+'
					(H, D)
				in  let <_cor27> =
					apply 'dir'/2
					    (_cor26, D)
				    in  apply 'is_good_1'/4
					    ('white', _cor28, _cor27, Board)
			%% Line 403
			<'white'> when 'true' ->
			    call 'erlang':'throw'
				('true')
			%% Line 404
			<_cor42> when 'true' ->
			    'false'
		      end
	  ( <_cor33,_cor32,_cor31,_cor30> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor33,_cor32,_cor31,_cor30})
		  -| [{'function_name',{'is_good_1',4}}] )
	    -| ['compiler_generated'] )
	end
'turn'/3 =
    %% Line 414
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Colour,Draw,{Bset,Board}> when 'true' ->
	      let <_cor3> =
		  %% Line 422
		  apply 'turn'/4
		      (Colour, Draw, 9, Board)
	      in  let <_cor4> =
		      %% Line 421
		      apply 'turn'/4
			  (Colour, Draw, 8, _cor3)
		  in  let <_cor5> =
			  %% Line 420
			  apply 'turn'/4
			      (Colour, Draw, 7, _cor4)
		      in  let <_cor6> =
			      %% Line 419
			      apply 'turn'/4
				  (Colour, Draw, 1, _cor5)
			  in  let <_cor8> =
				  %% Line 418
				  apply 'turn'/4
				      (Colour, Draw, -1, _cor6)
			      in  let <_cor10> =
				      %% Line 417
				      apply 'turn'/4
					  (Colour, Draw, -7, _cor8)
				  in  let <_cor12> =
					  %% Line 416
					  apply 'turn'/4
					      (Colour, Draw, -8, _cor10)
				      in  let <_cor14> =
					      %% Line 415
					      apply 'turn'/4
						  (Colour, Draw, -9, _cor12)
					  in  %% Line 415
					      {Bset,_cor14}
	  ( <_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15})
		  -| [{'function_name',{'turn',3}}] )
	    -| ['compiler_generated'] )
	end
'turn'/4 =
    %% Line 424
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    catch
		let <_cor4> =
		    %% Line 425
		    apply 'dir'/2
			(_cor2, _cor1)
		in  %% Line 425
		    apply 'is_good_0'/4
			(_cor3, _cor2, _cor4, _cor0)
	in  %% Line 425
	    case _cor5 of
	      %% Line 426
	      <'true'> when 'true' ->
		  %% Line 427
		  apply 'turn_0'/4
		      (_cor3, _cor2, _cor1, _cor0)
	      %% Line 428
	      <'false'> when 'true' ->
		  _cor0
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor6})
		-| ['compiler_generated'] )
	    end
'turn_0'/4 =
    %% Line 432
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_cor32,H,D,B>
	      when try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (H)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(D)
			in  let <_cor6> =
				call 'erlang':'+'
				    (H, D)
			    in  let <_cor7> =
				    call 'erlang':'<'
					(_cor6, 0)
				in  let <_cor8> =
					call 'erlang':'and'
					    (_cor5, _cor7)
				    in  call 'erlang':'and'
					    (_cor4, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      B
	  %% Line 433
	  <_cor33,H,D,B>
	      when try
		    let <_cor9> =
			call 'erlang':'is_integer'
			    (H)
		    in  let <_cor10> =
			    call 'erlang':'is_integer'
				(D)
			in  let <_cor11> =
				call 'erlang':'+'
				    (H, D)
			    in  let <_cor12> =
				    call 'erlang':'>'
					(_cor11, 63)
				in  let <_cor13> =
					call 'erlang':'and'
					    (_cor10, _cor12)
				    in  call 'erlang':'and'
					    (_cor9, _cor13)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      B
	  %% Line 434
	  <'black',H,D,Board>
	      when let <_cor14> =
		    call 'erlang':'is_integer'
			(H)
		in  let <_cor15> =
			call 'erlang':'is_integer'
			    (D)
		    in  call 'erlang':'and'
			    (_cor14, _cor15) ->
	      let <E> =
		  %% Line 435
		  call 'erlang':'+'
		      (H, D)
	      in  let <_cor17> =
		      %% Line 436
		      call 'erlang':'+'
			  (E, 1)
		  in  %% Line 436
		      case call 'erlang':'element'
			       (_cor17, Board) of
			%% Line 437
			<'white'> when 'true' ->
			    let <_cor19> =
				call 'erlang':'+'
				    (H, D)
			    in  let <_cor18> =
				    apply 'swap'/3
					('black', E, Board)
				in  apply 'turn_0'/4
					('black', _cor19, D, _cor18)
			%% Line 438
			<_cor34> when 'true' ->
			    Board
		      end
	  %% Line 440
	  <'white',H,D,Board>
	      when let <_cor21> =
		    call 'erlang':'is_integer'
			(H)
		in  let <_cor22> =
			call 'erlang':'is_integer'
			    (D)
		    in  call 'erlang':'and'
			    (_cor21, _cor22) ->
	      let <E> =
		  %% Line 441
		  call 'erlang':'+'
		      (H, D)
	      in  let <_cor24> =
		      %% Line 442
		      call 'erlang':'+'
			  (E, 1)
		  in  %% Line 442
		      case call 'erlang':'element'
			       (_cor24, Board) of
			%% Line 443
			<'black'> when 'true' ->
			    let <_cor26> =
				call 'erlang':'+'
				    (H, D)
			    in  let <_cor25> =
				    apply 'swap'/3
					('white', E, Board)
				in  apply 'turn_0'/4
					('white', _cor26, D, _cor25)
			%% Line 444
			<_cor35> when 'true' ->
			    Board
		      end
	  ( <_cor31,_cor30,_cor29,_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor31,_cor30,_cor29,_cor28})
		  -| [{'function_name',{'turn_0',4}}] )
	    -| ['compiler_generated'] )
	end
'swap'/3 =
    %% Line 453
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Colour,Pos,Board>
	      when call 'erlang':'is_integer'
		    (Pos) ->
	      let <_cor3> =
		  %% Line 454
		  call 'erlang':'+'
		      (Pos, 1)
	      in  %% Line 454
		  call 'erlang':'setelement'
		      (_cor3, Board, Colour)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'swap',3}}] )
	    -| ['compiler_generated'] )
	end
'score'/1 =
    %% Line 456
    fun (_cor0) ->
	let <_cor2> =
	    apply 'col'/1
		(_cor0)
	in  let <_cor1> =
		apply 'row'/1
		    (_cor0)
	    in  apply 'score1'/1
		    ({_cor2,_cor1})
'score1'/1 =
    %% Line 458
    fun (_cor0) ->
	case _cor0 of
	  <{Column,1}>
	      when let <_cor1> =
		    call 'erlang':'>='
			(Column, 3)
		in  let <_cor2> =
			call 'erlang':'=<'
			    (Column, 6)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      20
	  %% Line 459
	  <{Column,8}>
	      when let <_cor3> =
		    call 'erlang':'>='
			(Column, 3)
		in  let <_cor4> =
			call 'erlang':'=<'
			    (Column, 6)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      20
	  %% Line 460
	  <{1,Line}>
	      when let <_cor5> =
		    call 'erlang':'>='
			(Line, 3)
		in  let <_cor6> =
			call 'erlang':'=<'
			    (Line, 6)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      20
	  %% Line 461
	  <{8,Line}>
	      when let <_cor7> =
		    call 'erlang':'>='
			(Line, 3)
		in  let <_cor8> =
			call 'erlang':'=<'
			    (Line, 6)
		    in  call 'erlang':'and'
			    (_cor7, _cor8) ->
	      20
	  %% Line 462
	  <{Column,2}>
	      when let <_cor9> =
		    call 'erlang':'>='
			(Column, 3)
		in  let <_cor10> =
			call 'erlang':'=<'
			    (Column, 6)
		    in  call 'erlang':'and'
			    (_cor9, _cor10) ->
	      -7
	  %% Line 463
	  <{Column,7}>
	      when let <_cor11> =
		    call 'erlang':'>='
			(Column, 3)
		in  let <_cor12> =
			call 'erlang':'=<'
			    (Column, 6)
		    in  call 'erlang':'and'
			    (_cor11, _cor12) ->
	      -7
	  %% Line 464
	  <{2,Line}>
	      when let <_cor13> =
		    call 'erlang':'>='
			(Line, 3)
		in  let <_cor14> =
			call 'erlang':'=<'
			    (Line, 6)
		    in  call 'erlang':'and'
			    (_cor13, _cor14) ->
	      -7
	  %% Line 465
	  <{7,Line}>
	      when let <_cor15> =
		    call 'erlang':'>='
			(Line, 3)
		in  let <_cor16> =
			call 'erlang':'=<'
			    (Line, 6)
		    in  call 'erlang':'and'
			    (_cor15, _cor16) ->
	      -7
	  %% Line 466
	  <{Column,Line}>
	      when try
		    let <_cor17> =
			call 'erlang':'>='
			    (Column, 3)
		    in  let <_cor18> =
			    call 'erlang':'=<'
				(Column, 6)
			in  let <_cor19> =
				%% Line 467
				call 'erlang':'>='
				    (Line, 3)
			    in  let <_cor20> =
				    %% Line 467
				    call 'erlang':'=<'
					(Line, 6)
				in  let <_cor21> =
					call 'erlang':'and'
					    (_cor19, _cor20)
				    in  let <_cor22> =
					    call 'erlang':'and'
						(_cor18, _cor21)
					in  call 'erlang':'and'
						(_cor17, _cor22)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 467
	      1
	  %% Line 468
	  <{1,1}> when 'true' ->
	      100
	  %% Line 469
	  <{1,8}> when 'true' ->
	      100
	  %% Line 470
	  <{8,1}> when 'true' ->
	      100
	  %% Line 471
	  <{8,8}> when 'true' ->
	      100
	  %% Line 472
	  <{2,1}> when 'true' ->
	      -30
	  %% Line 473
	  <{7,1}> when 'true' ->
	      -30
	  %% Line 474
	  <{1,2}> when 'true' ->
	      -30
	  %% Line 475
	  <{8,2}> when 'true' ->
	      -30
	  %% Line 476
	  <{1,7}> when 'true' ->
	      -30
	  %% Line 477
	  <{8,7}> when 'true' ->
	      -30
	  %% Line 478
	  <{2,8}> when 'true' ->
	      -30
	  %% Line 479
	  <{7,8}> when 'true' ->
	      -30
	  %% Line 480
	  <{2,2}> when 'true' ->
	      -50
	  %% Line 481
	  <{7,2}> when 'true' ->
	      -50
	  %% Line 482
	  <{2,7}> when 'true' ->
	      -50
	  %% Line 483
	  <{7,7}> when 'true' ->
	      -50
	  ( <_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23})
		  -| [{'function_name',{'score1',1}}] )
	    -| ['compiler_generated'] )
	end
'dir'/2 =
    %% Line 490
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,1> when 'true' ->
	      1
	  %% Line 491
	  <0,8> when 'true' ->
	      8
	  %% Line 492
	  <0,9> when 'true' ->
	      9
	  %% Line 493
	  <0,_cor28> when 'true' ->
	      'false'
	  %% Line 495
	  <7,-1> when 'true' ->
	      -1
	  %% Line 496
	  <7,7> when 'true' ->
	      7
	  %% Line 497
	  <7,8> when 'true' ->
	      8
	  %% Line 498
	  <7,_cor29> when 'true' ->
	      'false'
	  %% Line 500
	  <56,-8> when 'true' ->
	      -8
	  %% Line 501
	  <56,-7> when 'true' ->
	      -7
	  %% Line 502
	  <56,1> when 'true' ->
	      1
	  %% Line 503
	  <56,_cor30> when 'true' ->
	      'false'
	  %% Line 505
	  <63,-9> when 'true' ->
	      -9
	  %% Line 506
	  <63,-8> when 'true' ->
	      -8
	  %% Line 507
	  <63,-1> when 'true' ->
	      -1
	  %% Line 508
	  <63,_cor31> when 'true' ->
	      'false'
	  %% Line 510
	  <Pos,-1>
	      when try
		    let <_cor2> =
			call 'erlang':'bsr'
			    (Pos, 3)
		    in  call 'erlang':'=='
			    (_cor2, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      -1
	  %% Line 511
	  <Pos,1>
	      when try
		    let <_cor3> =
			call 'erlang':'bsr'
			    (Pos, 3)
		    in  call 'erlang':'=='
			    (_cor3, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      1
	  %% Line 512
	  <Pos,7>
	      when try
		    let <_cor4> =
			call 'erlang':'bsr'
			    (Pos, 3)
		    in  call 'erlang':'=='
			    (_cor4, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      7
	  %% Line 513
	  <Pos,8>
	      when try
		    let <_cor5> =
			call 'erlang':'bsr'
			    (Pos, 3)
		    in  call 'erlang':'=='
			    (_cor5, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      8
	  %% Line 514
	  <Pos,9>
	      when try
		    let <_cor6> =
			call 'erlang':'bsr'
			    (Pos, 3)
		    in  call 'erlang':'=='
			    (_cor6, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      9
	  %% Line 515
	  <Pos,_cor32>
	      when try
		    let <_cor7> =
			call 'erlang':'bsr'
			    (Pos, 3)
		    in  call 'erlang':'=='
			    (_cor7, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      'false'
	  %% Line 517
	  <Pos,-9>
	      when try
		    let <_cor8> =
			call 'erlang':'bsr'
			    (Pos, 3)
		    in  call 'erlang':'=='
			    (_cor8, 7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      -9
	  %% Line 518
	  <Pos,-8>
	      when try
		    let <_cor9> =
			call 'erlang':'bsr'
			    (Pos, 3)
		    in  call 'erlang':'=='
			    (_cor9, 7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      -8
	  %% Line 519
	  <Pos,-7>
	      when try
		    let <_cor10> =
			call 'erlang':'bsr'
			    (Pos, 3)
		    in  call 'erlang':'=='
			    (_cor10, 7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      -7
	  %% Line 520
	  <Pos,-1>
	      when try
		    let <_cor11> =
			call 'erlang':'bsr'
			    (Pos, 3)
		    in  call 'erlang':'=='
			    (_cor11, 7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      -1
	  %% Line 521
	  <Pos,1>
	      when try
		    let <_cor12> =
			call 'erlang':'bsr'
			    (Pos, 3)
		    in  call 'erlang':'=='
			    (_cor12, 7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      1
	  %% Line 522
	  <Pos,_cor33>
	      when try
		    let <_cor13> =
			call 'erlang':'bsr'
			    (Pos, 3)
		    in  call 'erlang':'=='
			    (_cor13, 7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      'false'
	  %% Line 524
	  <Pos,-8>
	      when try
		    let <_cor14> =
			call 'erlang':'band'
			    (Pos, 7)
		    in  call 'erlang':'=='
			    (_cor14, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      -8
	  %% Line 525
	  <Pos,-7>
	      when try
		    let <_cor15> =
			call 'erlang':'band'
			    (Pos, 7)
		    in  call 'erlang':'=='
			    (_cor15, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      -7
	  %% Line 526
	  <Pos,1>
	      when try
		    let <_cor16> =
			call 'erlang':'band'
			    (Pos, 7)
		    in  call 'erlang':'=='
			    (_cor16, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      1
	  %% Line 527
	  <Pos,8>
	      when try
		    let <_cor17> =
			call 'erlang':'band'
			    (Pos, 7)
		    in  call 'erlang':'=='
			    (_cor17, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      8
	  %% Line 528
	  <Pos,9>
	      when try
		    let <_cor18> =
			call 'erlang':'band'
			    (Pos, 7)
		    in  call 'erlang':'=='
			    (_cor18, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      9
	  %% Line 529
	  <Pos,_cor34>
	      when try
		    let <_cor19> =
			call 'erlang':'band'
			    (Pos, 7)
		    in  call 'erlang':'=='
			    (_cor19, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      'false'
	  %% Line 531
	  <Pos,-9>
	      when try
		    let <_cor20> =
			call 'erlang':'band'
			    (Pos, 7)
		    in  call 'erlang':'=='
			    (_cor20, 7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      -9
	  %% Line 532
	  <Pos,-8>
	      when try
		    let <_cor21> =
			call 'erlang':'band'
			    (Pos, 7)
		    in  call 'erlang':'=='
			    (_cor21, 7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      -8
	  %% Line 533
	  <Pos,-1>
	      when try
		    let <_cor22> =
			call 'erlang':'band'
			    (Pos, 7)
		    in  call 'erlang':'=='
			    (_cor22, 7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      -1
	  %% Line 534
	  <Pos,7>
	      when try
		    let <_cor23> =
			call 'erlang':'band'
			    (Pos, 7)
		    in  call 'erlang':'=='
			    (_cor23, 7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      7
	  %% Line 535
	  <Pos,8>
	      when try
		    let <_cor24> =
			call 'erlang':'band'
			    (Pos, 7)
		    in  call 'erlang':'=='
			    (_cor24, 7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      8
	  %% Line 536
	  <Pos,_cor35>
	      when try
		    let <_cor25> =
			call 'erlang':'band'
			    (Pos, 7)
		    in  call 'erlang':'=='
			    (_cor25, 7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      'false'
	  %% Line 538
	  <_X_Pos,Dir> when 'true' ->
	      Dir
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('othello_adt')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('othello_adt', _cor0)
end