module 'gs_make' ['module_info'/0,
		  'module_info'/1,
		  'start'/0]
    attributes []
'start'/0 =
    %% Line 26
    fun () ->
	let <Terms> =
	    %% Line 27
	    apply 'the_config'/0
		()
	in  let <DB> =
		%% Line 28
		apply 'fill_ets'/1
		    (Terms)
	    in  %% Line 29
		case call 'file':'open'
			 ([103|[115|[116|[107|[95|[103|[101|[110|[101|[114|[105|[99|[46|[104|[114|[108]]]]]]]]]]]]]]]], ['write']) of
		  <{'ok',OutFd}> when 'true' ->
		      do  %% Line 30
			  call 'erlang':'put'
			      ('stdout', OutFd)
			  do  %% Line 32
			      apply 'p'/1
				  ([37|[32|[68|[111|[110|[39|[116|[32|[101|[100|[105|[116|[32|[116|[104|[105|[115|[32|[102|[105|[108|[101|[46|[32|[73|[116|[32|[119|[97|[115|[32|[103|[101|[110|[101|[114|[97|[116|[101|[100|[32|[98|[121|[32|[103|[115|[95|[109|[97|[107|[101|[58|[115|[116|[97|[114|[116|[47|[48|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
			      let <_cor5> =
				  %% Line 34
				  call 'erlang':'date'
				      ()
			      in  let <_cor6> =
				      %% Line 34
				      call 'erlang':'tuple_to_list'
					  (_cor5)
				  in  let <_cor3> =
					  %% Line 34
					  call 'erlang':'time'
					      ()
				      in  let <_cor4> =
					      %% Line 34
					      call 'erlang':'tuple_to_list'
						  (_cor3)
					  in  let <_cor7> =
						  %% Line 34
						  call 'lists':'append'
						      (_cor6, _cor4)
					      in  do  %% Line 33
						      apply 'p'/2
							  ([97|[116|[32|[126|[112|[45|[126|[112|[45|[126|[112|[44|[32|[126|[112|[58|[126|[112|[58|[126|[112|[46|[10|[10]]]]]]]]]]]]]]]]]]]]]]]], _cor7)
						      do  %% Line 35
							  apply 'gen_out_opts'/1
							      (DB)
							  do  %% Line 36
							      apply 'gen_read'/1
								  (DB)
							      do  %% Line 37
								  call 'file':'close'
								      (OutFd)
								  %% Line 38
								  {'ok',[103|[115|[116|[107|[95|[103|[101|[110|[101|[114|[105|[99|[46|[104|[114|[108]]]]]]]]]]]]]]]],DB}
		  ( <_cor2> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor2})
		    -| ['compiler_generated'] )
		end
'fill_ets'/1 =
    %% Line 40
    fun (_cor0) ->
	let <DB> =
	    %% Line 41
	    call 'ets':'new'
		('gs_mapping', ['bag'|['public']])
	in  %% Line 42
	    apply 'fill_ets'/2
		(DB, _cor0)
'fill_ets'/2 =
    %% Line 44
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <DB,[]> when 'true' ->
	      DB
	  %% Line 45
	  <DB,[{Objs,Opt,Fun,Access}|Terms]> when 'true' ->
	      let <_cor2> =
		  %% Line 46
		  call 'lists':'flatten'
		      (Objs)
	      in  do  %% Line 46
		      apply 'fill_ets'/5
			  (DB, _cor2, Opt, Fun, Access)
		      %% Line 47
		      apply 'fill_ets'/2
			  (DB, Terms)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'fill_ets',2}}] )
	    -| ['compiler_generated'] )
	end
'fill_ets'/5 =
    %% Line 49
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_DB,[],_cor10,_cor11,_cor12> when 'true' ->
	      'done'
	  %% Line 50
	  <DB,[Obj|Objs],Opt,Fun,'rw'> when 'true' ->
	      do  %% Line 51
		  call 'ets':'insert'
		      (DB, {Obj,Opt,Fun,'read'})
		  do  %% Line 52
		      call 'ets':'insert'
			  (DB, {Obj,Opt,Fun,'write'})
		      %% Line 53
		      apply 'fill_ets'/5
			  (DB, Objs, Opt, Fun, 'rw')
	  %% Line 54
	  <DB,[Obj|Objs],Opt,Fun,'r'> when 'true' ->
	      do  %% Line 55
		  call 'ets':'insert'
		      (DB, {Obj,Opt,Fun,'read'})
		  %% Line 56
		  apply 'fill_ets'/5
		      (DB, Objs, Opt, Fun, 'r')
	  %% Line 57
	  <DB,[Obj|Objs],Opt,Fun,'w'> when 'true' ->
	      do  %% Line 58
		  call 'ets':'insert'
		      (DB, {Obj,Opt,Fun,'write'})
		  %% Line 59
		  apply 'fill_ets'/5
		      (DB, Objs, Opt, Fun, 'w')
	  ( <_cor9,_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'fill_ets',5}}] )
	    -| ['compiler_generated'] )
	end
'gen_out_opts'/1 =
    %% Line 63
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 64
	    call 'ets':'match'
		(_cor0, {'$1','_','_','write'})
	in  let <_cor2> =
		%% Line 64
		call 'ordsets':'from_list'
		    (_cor1)
	    in  let <ObjTypes> =
		    %% Line 64
		    call 'lists':'flatten'
			(_cor2)
		in  do  %% Line 65
			apply 'p'/1
			    ([111|[117|[116|[95|[111|[112|[116|[115|[40|[91|[79|[112|[116|[105|[111|[110|[124|[79|[112|[116|[105|[111|[110|[115|[93|[44|[71|[115|[116|[107|[105|[100|[44|[84|[107|[87|[44|[68|[66|[44|[69|[120|[116|[114|[97|[65|[114|[103|[44|[83|[44|[80|[44|[67|[41|[32|[45|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
			do  %% Line 66
			    apply 'p'/1
				([32|[32|[123|[79|[112|[116|[44|[86|[97|[108|[125|[32|[61|[10]]]]]]]]]]]]]])
			    do  %% Line 67
				apply 'p'/1
				    ([32|[32|[32|[32|[99|[97|[115|[101|[32|[79|[112|[116|[105|[111|[110|[32|[111|[102|[32|[10]]]]]]]]]]]]]]]]]]]])
				do  %% Line 68
				    apply 'p'/1
					([32|[32|[32|[32|[32|[32|[123|[123|[100|[101|[102|[97|[117|[108|[116|[44|[67|[97|[116|[44|[75|[101|[121|[125|[44|[86|[125|[32|[45|[62|[32|[123|[100|[101|[102|[97|[117|[108|[116|[44|[123|[67|[97|[116|[44|[123|[75|[101|[121|[44|[86|[125|[125|[125|[59|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
				    do  %% Line 69
					apply 'p'/1
					    ([32|[32|[32|[32|[32|[32|[123|[95|[75|[101|[121|[44|[95|[86|[125|[32|[45|[62|[32|[79|[112|[116|[105|[111|[110|[59|[10]]]]]]]]]]]]]]]]]]]]]]]]]]])
					do  %% Line 70
					    apply 'p'/1
						([32|[32|[32|[32|[32|[32|[123|[100|[101|[102|[97|[117|[108|[116|[44|[67|[97|[116|[44|[79|[112|[116|[105|[125|[32|[45|[62|[32|[123|[100|[101|[102|[97|[117|[108|[116|[44|[123|[67|[97|[116|[44|[79|[112|[116|[105|[125|[125|[59|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
					    do  %% Line 71
						apply 'p'/1
						    ([32|[32|[32|[32|[32|[32|[65|[116|[111|[109|[32|[119|[104|[101|[110|[32|[105|[115|[95|[97|[116|[111|[109|[40|[65|[116|[111|[109|[41|[32|[45|[62|[32|[123|[65|[116|[111|[109|[44|[117|[110|[100|[101|[102|[105|[110|[101|[100|[125|[59|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
						do  %% Line 72
						    apply 'p'/1
							([32|[32|[32|[32|[32|[32|[95|[32|[45|[62|[32|[123|[101|[114|[114|[111|[114|[44|[32|[123|[105|[110|[118|[97|[108|[105|[100|[95|[111|[112|[116|[105|[111|[110|[44|[79|[112|[116|[105|[111|[110|[125|[125|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
						    do  %% Line 73
							apply 'p'/1
							    ([32|[32|[32|[32|[101|[110|[100|[44|[10]]]]]]]]])
							do  %% Line 74
							    apply 'p'/1
								([32|[32|[99|[97|[115|[101|[32|[71|[115|[116|[107|[105|[100|[35|[103|[115|[116|[107|[105|[100|[46|[111|[98|[106|[116|[121|[112|[101|[32|[111|[102|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
							    let <_cor4> =
								%% Line 75
								apply 'merge_types'/1
								    (ObjTypes)
							    in  do  %% Line 75
								    apply 'gen_out_type_case_clauses'/2
									(_cor4, _cor0)
								    do  %% Line 76
									apply 'p'/1
									    ([32|[32|[32|[32|[81|[32|[45|[62|[32|[101|[120|[105|[116|[40|[123|[105|[110|[116|[101|[114|[110|[97|[108|[95|[101|[114|[114|[111|[114|[44|[117|[110|[107|[110|[111|[119|[110|[95|[111|[98|[106|[116|[121|[112|[101|[44|[81|[125|[41|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
									do  %% Line 77
									    apply 'p'/1
										([32|[32|[101|[110|[100|[59|[10]]]]]]])
									    do  %% Line 78
										apply 'p'/1
										    ([111|[117|[116|[95|[111|[112|[116|[115|[40|[91|[93|[44|[95|[71|[115|[116|[107|[105|[100|[44|[95|[84|[107|[87|[44|[95|[68|[66|[44|[95|[69|[120|[116|[114|[97|[65|[114|[103|[44|[83|[44|[80|[44|[67|[41|[32|[45|[62|[32|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
										%% Line 79
										apply 'p'/1
										    ([32|[32|[123|[83|[44|[80|[44|[67|[125|[46|[10]]]]]]]]]]])
'gen_out_type_case_clauses'/2 =
    %% Line 82
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_X_DB> when 'true' ->
	      'done'
	  %% Line 83
	  <[Objtype|Objtypes],DB> when 'true' ->
	      let <_cor5> =
		  %% Line 84
		  ( fun (_cor3) ->
			call 'erlang':'list_to_tuple'
			    (_cor3)
		    -| [{'id',{0,0,'-gen_out_type_case_clauses/2-fun-0-'}}] )
	      in  let <_cor2> =
		      %% Line 85
		      call 'ets':'match'
			  (DB, {Objtype,'$1','$2','write'})
		  in  let <OptsFuns> =
			  %% Line 84
			  call 'lists':'map'
			      (_cor5, _cor2)
		      in  do  %% Line 86
			      apply 'p'/2
				  ([32|[32|[32|[126|[112|[32|[45|[62|[32|[10|[99|[97|[115|[101|[32|[79|[112|[116|[32|[111|[102|[10]]]]]]]]]]]]]]]]]]]]]], [Objtype|[]])
			      let <_cor7> =
				  %% Line 87
				  apply 'opt_prio'/0
				      ()
			      in  let <_cor8> =
				      %% Line 87
				      apply 'merge_opts'/2
					  (_cor7, OptsFuns)
				  in  do  %% Line 87
					  apply 'gen_opt_case_clauses'/1
					      (_cor8)
					  do  %% Line 88
					      apply 'p'/1
						  ([32|[32|[95|[32|[45|[62|[32|[10]]]]]]]])
					      do  %% Line 89
						  apply 'p'/2
						      ([32|[32|[32|[32|[104|[97|[110|[100|[108|[101|[95|[101|[120|[116|[101|[114|[110|[97|[108|[95|[111|[112|[116|[95|[99|[97|[108|[108|[40|[91|[79|[112|[116|[105|[111|[110|[124|[79|[112|[116|[105|[111|[110|[115|[93|[44|[71|[115|[116|[107|[105|[100|[44|[84|[107|[87|[44|[68|[66|[44|[69|[120|[116|[114|[97|[65|[114|[103|[44|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[103|[115|[116|[107|[95|[126|[112|[58|[111|[112|[116|[105|[111|[110|[40|[79|[112|[116|[105|[111|[110|[44|[71|[115|[116|[107|[105|[100|[44|[84|[107|[87|[44|[68|[66|[44|[69|[120|[116|[114|[97|[65|[114|[103|[41|[44|[83|[44|[80|[44|[67|[41|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 91
																																																																																																													       [Objtype|[]])
						  do  %% Line 92
						      apply 'p'/1
							  ([32|[32|[101|[110|[100|[59|[10]]]]]]])
						      %% Line 93
						      apply 'gen_out_type_case_clauses'/2
							  (Objtypes, DB)
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'gen_out_type_case_clauses',2}}] )
	    -| ['compiler_generated'] )
	end
'gen_opt_case_clauses'/1 =
    %% Line 95
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 96
	      'done'
	  %% Line 97
	  <[{Opt,Fun}|OptFuncs]> when 'true' ->
	      do  %% Line 98
		  apply 'p'/2
		      ([32|[32|[126|[112|[32|[45|[62|[10]]]]]]]], [Opt|[]])
		  do  %% Line 99
		      apply 'p'/2
			  ([32|[32|[32|[32|[126|[112|[40|[86|[97|[108|[44|[79|[112|[116|[105|[111|[110|[115|[44|[71|[115|[116|[107|[105|[100|[44|[84|[107|[87|[44|[68|[66|[44|[69|[120|[116|[114|[97|[65|[114|[103|[44|[83|[44|[80|[44|[67|[41|[59|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Fun|[]])
		      %% Line 100
		      apply 'gen_opt_case_clauses'/1
			  (OptFuncs)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'gen_opt_case_clauses',1}}] )
	    -| ['compiler_generated'] )
	end
'gen_read'/1 =
    %% Line 102
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 103
	    call 'ets':'match'
		(_cor0, {'$1','_','_','read'})
	in  let <_cor2> =
		%% Line 103
		call 'ordsets':'from_list'
		    (_cor1)
	    in  let <ObjTypes> =
		    %% Line 103
		    call 'lists':'flatten'
			(_cor2)
		in  do  %% Line 104
			apply 'p'/1
			    ([114|[101|[97|[100|[95|[111|[112|[116|[105|[111|[110|[40|[68|[66|[44|[71|[115|[116|[107|[105|[100|[44|[84|[107|[87|[44|[79|[112|[116|[105|[111|[110|[44|[69|[120|[116|[114|[97|[65|[114|[103|[41|[32|[45|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
			do  %% Line 105
			    apply 'p'/1
				([32|[32|[75|[101|[121|[32|[61|[32|[99|[97|[115|[101|[32|[79|[112|[116|[105|[111|[110|[32|[111|[102|[10]]]]]]]]]]]]]]]]]]]]]]])
			    do  %% Line 106
				apply 'p'/1
				    ([32|[32|[32|[32|[65|[116|[111|[109|[32|[119|[104|[101|[110|[32|[105|[115|[95|[97|[116|[111|[109|[40|[65|[116|[111|[109|[41|[32|[45|[62|[32|[65|[116|[111|[109|[59|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
				do  %% Line 107
				    apply 'p'/1
					([32|[32|[32|[32|[79|[112|[116|[32|[119|[104|[101|[110|[32|[105|[115|[95|[116|[117|[112|[108|[101|[40|[79|[112|[116|[41|[32|[45|[62|[32|[101|[108|[101|[109|[101|[110|[116|[40|[49|[44|[79|[112|[116|[41|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
				    do  %% Line 108
					apply 'p'/1
					    ([32|[32|[101|[110|[100|[44|[10]]]]]]])
					do  %% Line 109
					    apply 'p'/1
						([32|[32|[99|[97|[115|[101|[32|[71|[115|[116|[107|[105|[100|[35|[103|[115|[116|[107|[105|[100|[46|[111|[98|[106|[116|[121|[112|[101|[32|[111|[102|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
					    let <_cor4> =
						%% Line 110
						apply 'merge_types'/1
						    (ObjTypes)
					    in  do  %% Line 110
						    apply 'gen_read_type_clauses'/2
							(_cor4, _cor0)
						    do  %% Line 111
							apply 'p'/1
							    ([32|[32|[32|[32|[81|[32|[45|[62|[32|[101|[120|[105|[116|[40|[123|[105|[110|[116|[101|[114|[110|[97|[108|[95|[101|[114|[114|[111|[114|[44|[117|[110|[107|[110|[111|[119|[110|[95|[111|[98|[106|[116|[121|[112|[101|[44|[81|[125|[41|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
							%% Line 112
							apply 'p'/1
							    ([32|[32|[101|[110|[100|[46|[10]]]]]]])
'gen_read_type_clauses'/2 =
    %% Line 115
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_cor11> when 'true' ->
	      'done'
	  %% Line 116
	  <[Objtype|Objtypes],DB> when 'true' ->
	      let <_cor5> =
		  %% Line 117
		  ( fun (_cor3) ->
			call 'erlang':'list_to_tuple'
			    (_cor3)
		    -| [{'id',{0,0,'-gen_read_type_clauses/2-fun-0-'}}] )
	      in  let <_cor2> =
		      %% Line 118
		      call 'ets':'match'
			  (DB, {Objtype,'$1','$2','read'})
		  in  let <OptsFuns> =
			  %% Line 117
			  call 'lists':'map'
			      (_cor5, _cor2)
		      in  do  %% Line 119
			      apply 'p'/2
				  ([32|[32|[126|[112|[32|[45|[62|[32|[10|[99|[97|[115|[101|[32|[75|[101|[121|[32|[111|[102|[10]]]]]]]]]]]]]]]]]]]]], [Objtype|[]])
			      let <_cor7> =
				  %% Line 120
				  apply 'opt_prio'/0
				      ()
			      in  let <_cor8> =
				      %% Line 120
				      apply 'merge_opts'/2
					  (_cor7, OptsFuns)
				  in  do  %% Line 120
					  apply 'gen_readopt_case_clauses'/1
					      (_cor8)
					  do  %% Line 121
					      apply 'p'/2
						  ([32|[32|[95|[32|[45|[62|[32|[10|[104|[97|[110|[100|[108|[101|[95|[101|[120|[116|[101|[114|[110|[97|[108|[95|[114|[101|[97|[100|[40|[103|[115|[116|[107|[95|[126|[112|[58|[114|[101|[97|[100|[95|[111|[112|[116|[105|[111|[110|[40|[79|[112|[116|[105|[111|[110|[44|[71|[115|[116|[107|[105|[100|[44|[84|[107|[87|[44|[68|[66|[44|[69|[120|[116|[114|[97|[65|[114|[103|[41|[41|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Objtype|[]])
					      do  %% Line 122
						  apply 'p'/1
						      ([32|[32|[101|[110|[100|[59|[10]]]]]]])
						  %% Line 123
						  apply 'gen_read_type_clauses'/2
						      (Objtypes, DB)
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'gen_read_type_clauses',2}}] )
	    -| ['compiler_generated'] )
	end
'gen_readopt_case_clauses'/1 =
    %% Line 125
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 126
	      'done'
	  %% Line 127
	  <[{Opt,Fun}|OptFuncs]> when 'true' ->
	      do  %% Line 128
		  apply 'p'/2
		      ([32|[32|[126|[112|[32|[45|[62|[32|[10|[126|[112|[40|[79|[112|[116|[105|[111|[110|[44|[71|[115|[116|[107|[105|[100|[44|[84|[107|[87|[44|[68|[66|[44|[69|[120|[116|[114|[97|[65|[114|[103|[41|[59|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Opt|[Fun|[]]])
		  %% Line 129
		  apply 'gen_readopt_case_clauses'/1
		      (OptFuncs)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'gen_readopt_case_clauses',1}}] )
	    -| ['compiler_generated'] )
	end
'p'/1 =
    %% Line 132
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 133
	    call 'erlang':'get'
		('stdout')
	in  let <_cor4> =
		%% Line 133
		call 'io':'format'
		    (_cor1, _cor0, [])
	    in  %% Line 133
		case _cor4 of
		  <'ok'> when 'true' ->
		      ( _cor4
			-| ['compiler_generated'] )
		  ( <_cor2> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor2})
		    -| ['compiler_generated'] )
		end
'p'/2 =
    %% Line 135
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 136
	    call 'erlang':'get'
		('stdout')
	in  let <_cor6> =
		%% Line 136
		call 'io':'format'
		    (_cor2, _cor1, _cor0)
	    in  %% Line 136
		case _cor6 of
		  <'ok'> when 'true' ->
		      ( _cor6
			-| ['compiler_generated'] )
		  ( <_cor3> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor3})
		    -| ['compiler_generated'] )
		end
'obj_prio'/0 =
    %% Line 141
    fun () ->
	['rectangle'|['line'|['gridline'|['image'|['button'|['canvas'|['checkbutton'|['radiobutton']]]]]]]]
'opt_prio'/0 =
    %% Line 142
    fun () ->
	['x'|['y'|['width'|['height'|['move'|['coords'|['data']]]]]]]
'merge_types'/1 =
    %% Line 144
    fun (_cor0) ->
	let <T2> =
	    %% Line 145
	    call 'ordsets':'from_list'
		(_cor0)
	in  let <_cor2> =
		%% Line 146
		apply 'obj_prio'/0
		    ()
	    in  let <P2> =
		    %% Line 146
		    call 'ordsets':'from_list'
			(_cor2)
		in  let <_cor5> =
			%% Line 147
			apply 'obj_prio'/0
			    ()
		    in  let <_cor4> =
			    %% Line 147
			    call 'ordsets':'subtract'
				(T2, P2)
			in  %% Line 147
			    call 'erlang':'++'
				(_cor5, _cor4)
'merge_opts'/2 =
    %% Line 149
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],L> when 'true' ->
	      L
	  %% Line 150
	  <[Opt|Opts],Dict> when 'true' ->
	      %% Line 151
	      case call 'gs':'assq'
		       (Opt, Dict) of
		%% Line 152
		<{'value',V}> when 'true' ->
		    let <_cor2> =
			call 'lists':'keydelete'
			    (Opt, 1, Dict)
		    in  let <_cor3> =
			    apply 'merge_opts'/2
				(Opts, _cor2)
			in  [{Opt,V}|_cor3]
		%% Line 153
		<'false'> when 'true' ->
		    apply 'merge_opts'/2
			(Opts, Dict)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'merge_opts',2}}] )
	    -| ['compiler_generated'] )
	end
'the_config'/0 =
    %% Line 156
    fun () ->
	%% Line 168
	[{[['button'|['checkbutton'|['radiobutton']]]|['entry'|['scale'|['menubutton']]]],'enable','gen_enable','rw'}|[{[['button'|['checkbutton'|['radiobutton']]]|['label'|['entry'|['scale'|['menubutton'|['menu']]]]]],'fg','gen_fg','rw'}|[{[['button'|['checkbutton'|['radiobutton']]]|['label'|['entry'|['scale'|['menubutton'|['menu']]]]]],'bg','gen_bg','rw'}|[{[['button'|['checkbutton'|['radiobutton']]]|['canvas'|['grid'|['frame'|['label'|['entry'|['editor'|['listbox'|['scale']]]]]]]]],'anchor','gen_anchor','rw'}|[{[['button'|['checkbutton'|['radiobutton']]]|['canvas'|['grid'|['frame'|['label'|['entry'|['editor'|['listbox'|['scale']]]]]]]]],'height','gen_height','r'}|[{[['button'|['checkbutton'|['radiobutton']]]|['canvas'|['grid'|['label'|['entry'|['editor'|['listbox'|['scale']]]]]]]],'height','gen_height','w'}|[{[['button'|['checkbutton'|['radiobutton']]]|['canvas'|['grid'|['frame'|['label'|['entry'|['editor'|['listbox'|['scale']]]]]]]]],'width','gen_width','r'}|[{[['button'|['checkbutton'|['radiobutton']]]|['canvas'|['grid'|['label'|['entry'|['editor'|['listbox'|['scale']]]]]]]],'width','gen_width','w'}|[{[['button'|['checkbutton'|['radiobutton']]]|['canvas'|['grid'|['frame'|['label'|['entry'|['editor'|['listbox'|['scale']]]]]]]]],'pack_x','gen_pack_x','rw'}|[{[['button'|['checkbutton'|['radiobutton']]]|['canvas'|['grid'|['frame'|['label'|['entry'|['editor'|['listbox'|['scale']]]]]]]]],'pack_y','gen_pack_y','rw'}|[{[['button'|['checkbutton'|['radiobutton']]]|['canvas'|['grid'|['frame'|['label'|['entry'|['editor'|['listbox'|['scale']]]]]]]]],'pack_xy','gen_pack_xy','w'}|[{[['button'|['checkbutton'|['radiobutton']]]|['canvas'|['grid'|['frame'|['label'|['entry'|['editor'|['listbox'|['scale']]]]]]]]],'x','gen_x','rw'}|[{[['button'|['checkbutton'|['radiobutton']]]|['canvas'|['grid'|['frame'|['label'|['entry'|['editor'|['listbox'|['scale']]]]]]]]],'y','gen_y','rw'}|[{[['button'|['checkbutton'|['radiobutton']]]|['canvas'|['grid'|['frame'|['label'|['entry'|['editor'|['listbox'|['scale']]]]]]]]],'raise','gen_raise','w'}|[{[['button'|['checkbutton'|['radiobutton']]]|['canvas'|['grid'|['frame'|['label'|['entry'|['editor'|['listbox'|['scale']]]]]]]]],'lower','gen_lower','w'}|[{['button'|['checkbutton'|['radiobutton'|['label'|['menubutton']]]]],'align','gen_align','rw'}|[{['button'|['checkbutton'|['radiobutton'|['label'|['menubutton']]]]],'font','gen_font','rw'}|[{['button'|['checkbutton'|['radiobutton'|['label'|['menubutton']]]]],'justify','gen_justify','rw'}|[{['button'|['checkbutton'|['radiobutton'|['label'|['menubutton']]]]],'padx','gen_padx','rw'}|[{['button'|['checkbutton'|['radiobutton'|['label'|['menubutton']]]]],'pady','gen_pady','rw'}|[{['canvas'|['frame'|['grid'|['menu'|['menubar'|['menubutton'|['menuitem'|['window']]]]]]]],'default','gen_default','w'}|[{[[['button'|['checkbutton'|['radiobutton']]]|['canvas'|['editor'|['entry'|['frame'|['label'|['listbox'|['menubar'|['menubutton'|['scale'|['window']]]]]]]]]]]|['menu']],'relief','gen_relief','rw'}|[{[[['button'|['checkbutton'|['radiobutton']]]|['canvas'|['editor'|['entry'|['frame'|['label'|['listbox'|['menubar'|['menubutton'|['scale'|['window']]]]]]]]]]]|['menu']],'bw','gen_bw','rw'}|[{[['button'|['checkbutton'|['radiobutton']]]|['canvas'|['frame'|['label'|['entry'|['scale'|['menubutton'|['menu'|['menubar']]]]]]]]],'setfocus','gen_setfocus','rw'}|[{[['button'|['checkbutton'|['radiobutton']]]|['frame'|['label'|['entry'|['editor'|['listbox'|['scale'|['menubutton'|['menubar'|['menu']]]]]]]]]],'buttonpress','gen_buttonpress','rw'}|[{[['button'|['checkbutton'|['radiobutton']]]|['frame'|['label'|['entry'|['editor'|['listbox'|['scale'|['menubutton'|['menubar'|['menu']]]]]]]]]],'buttonrelease','gen_buttonrelease','rw'}|[{[['button'|['checkbutton'|['radiobutton']]]|['frame'|['label'|['entry'|['editor'|['listbox'|['scale'|['menubutton'|['menubar'|['menu']]]]]]]]]],'configure','gen_configure','rw'}|[{[[['button'|['checkbutton'|['radiobutton']]]|['frame'|['label'|['entry'|['editor'|['listbox'|['scale'|['menubutton'|['menubar'|['menu']]]]]]]]]]|['window']],'destroy','gen_destroy','rw'}|[{[[['button'|['checkbutton'|['radiobutton']]]|['frame'|['label'|['entry'|['editor'|['listbox'|['scale'|['menubutton'|['menubar'|['menu']]]]]]]]]]|['window']],'enter','gen_enter','rw'}|[{[[['button'|['checkbutton'|['radiobutton']]]|['frame'|['label'|['entry'|['editor'|['listbox'|['scale'|['menubutton'|['menubar'|['menu']]]]]]]]]]|['window']],'leave','gen_leave','rw'}|[{[[['button'|['checkbutton'|['radiobutton']]]|['frame'|['label'|['entry'|['editor'|['listbox'|['scale'|['menubutton'|['menubar'|['menu']]]]]]]]]]|['window']],'focus','gen_focus_ev','rw'}|[{[[['button'|['checkbutton'|['radiobutton']]]|['frame'|['label'|['entry'|['editor'|['listbox'|['scale'|['menubutton'|['menubar'|['menu']]]]]]]]]]|['window']],'keypress','gen_keypress','rw'}|[{[[['button'|['checkbutton'|['radiobutton']]]|['frame'|['label'|['entry'|['editor'|['listbox'|['scale'|['menubutton'|['menubar'|['menu']]]]]]]]]]|['window']],'keyrelease','gen_keyrelease','rw'}|[{[['button'|['checkbutton'|['radiobutton']]]|['frame'|['label'|['entry'|['editor'|['listbox'|['scale'|['menubutton'|['menubar'|['menu']]]]]]]]]],'motion','gen_motion','rw'}|[{['window'],'buttonpress','gen_buttonpress','r'}|[{['window'],'buttonrelease','gen_buttonrelease','r'}|[{['window'],'motion','gen_motion','r'}|[{[[['button'|['checkbutton'|['radiobutton']]]|['canvas'|['editor'|['entry'|['frame'|['label'|['listbox'|['menubar'|['menubutton'|['scale'|['window']]]]]]]]]]]|[['arc'|['image'|['line'|['oval'|['polygon'|['rectangle'|['text']]]]]]]|['grid'|['gridline'|['menu'|['menuitem'|['gs']]]]]]],'font_wh','gen_font_wh','r'}|[{[[['button'|['checkbutton'|['radiobutton']]]|['canvas'|['editor'|['entry'|['frame'|['label'|['listbox'|['menubar'|['menubutton'|['scale'|['window']]]]]]]]]]]|[['arc'|['image'|['line'|['oval'|['polygon'|['rectangle'|['text']]]]]]]|['grid'|['gridline'|['menu'|['menuitem'|['gs']]]]]]],'choose_font','gen_choose_font','r'}|[{[[['button'|['checkbutton'|['radiobutton']]]|['canvas'|['editor'|['entry'|['frame'|['label'|['listbox'|['menubar'|['menubutton'|['scale'|['window']]]]]]]]]]]|[['arc'|['image'|['line'|['oval'|['polygon'|['rectangle'|['text']]]]]]]|['grid'|['gridline'|['menu'|['menuitem'|['gs']]]]]]],'data','gen_data','rw'}|[{[[['button'|['checkbutton'|['radiobutton']]]|['canvas'|['editor'|['entry'|['frame'|['label'|['listbox'|['menubar'|['menubutton'|['scale'|['window']]]]]]]]]]]|[['arc'|['image'|['line'|['oval'|['polygon'|['rectangle'|['text']]]]]]]|['grid'|['gridline'|['menu'|['menuitem'|['gs']]]]]]],'children','gen_children','r'}|[{[[['button'|['checkbutton'|['radiobutton']]]|['canvas'|['editor'|['entry'|['frame'|['label'|['listbox'|['menubar'|['menubutton'|['scale'|['window']]]]]]]]]]]|[['arc'|['image'|['line'|['oval'|['polygon'|['rectangle'|['text']]]]]]]|['grid'|['gridline'|['menu'|['menuitem'|['gs']]]]]]],'id','gen_id','r'}|[{[[['button'|['checkbutton'|['radiobutton']]]|['canvas'|['editor'|['entry'|['frame'|['label'|['listbox'|['menubar'|['menubutton'|['scale'|['window']]]]]]]]]]]|[['arc'|['image'|['line'|['oval'|['polygon'|['rectangle'|['text']]]]]]]|['grid'|['gridline'|['menu'|['menuitem'|['gs']]]]]]],'parent','gen_parent','r'}|[{[[['button'|['checkbutton'|['radiobutton']]]|['canvas'|['editor'|['entry'|['frame'|['label'|['listbox'|['menubar'|['menubutton'|['scale'|['window']]]]]]]]]]]|[['arc'|['image'|['line'|['oval'|['polygon'|['rectangle'|['text']]]]]]]|['grid'|['gridline'|['menu'|['menuitem'|['gs']]]]]]],'type','gen_type','r'}|[{[[['button'|['checkbutton'|['radiobutton']]]|['canvas'|['editor'|['entry'|['frame'|['label'|['listbox'|['menubar'|['menubutton'|['scale'|['window']]]]]]]]]]]|[['arc'|['image'|['line'|['oval'|['polygon'|['rectangle'|['text']]]]]]]|['grid'|['gridline'|['menu'|['menuitem'|['gs']]]]]]],'beep','gen_beep','w'}|[{[[['button'|['checkbutton'|['radiobutton']]]|['canvas'|['editor'|['entry'|['frame'|['label'|['listbox'|['menubar'|['menubutton'|['scale'|['window']]]]]]]]]]]|[['arc'|['image'|['line'|['oval'|['polygon'|['rectangle'|['text']]]]]]]|['grid'|['gridline'|['menu'|['menuitem'|['gs']]]]]]],'keep_opt','gen_keep_opt','w'}|[{[[['button'|['checkbutton'|['radiobutton']]]|['canvas'|['editor'|['entry'|['frame'|['label'|['listbox'|['menubar'|['menubutton'|['scale'|['window']]]]]]]]]]]|[['arc'|['image'|['line'|['oval'|['polygon'|['rectangle'|['text']]]]]]]|['grid'|['gridline'|['menu'|['menuitem'|['gs']]]]]]],'flush','gen_flush','rw'}|[{[['button'|['checkbutton'|['radiobutton']]]|['canvas'|['editor'|['entry'|['frame'|['label'|['listbox'|['menubar'|['menubutton'|['scale'|['window']]]]]]]]]]],'highlightbw','gen_highlightbw','rw'}|[{[['button'|['checkbutton'|['radiobutton']]]|['canvas'|['editor'|['entry'|['frame'|['label'|['listbox'|['menubar'|['menubutton'|['scale'|['window']]]]]]]]]]],'highlightbg','gen_highlightbg','rw'}|[{[['button'|['checkbutton'|['radiobutton']]]|['canvas'|['editor'|['entry'|['frame'|['label'|['listbox'|['menubar'|['menubutton'|['scale'|['window']]]]]]]]]]],'highlightfg','gen_highlightfg','rw'}|[{[['button'|['checkbutton'|['radiobutton']]]|['canvas'|['editor'|['entry'|['frame'|['label'|['listbox'|['menubar'|['menubutton'|['scale'|['window']]]]]]]]]]],'cursor','gen_cursor','rw'}|[{[['button'|['checkbutton'|['radiobutton']]]|['label'|['menubutton']]],'label','gen_label','rw'}|[{[['button'|['checkbutton'|['radiobutton']]]|['menubutton'|['menu']]],'activebg','gen_activebg','rw'}|[{[['button'|['checkbutton'|['radiobutton']]]|['menubutton'|['menu']]],'activefg','gen_activefg','rw'}|[{['entry'],'selectbg','gen_selectbg','rw'}|[{['entry'],'selectbw','gen_selectbw','rw'}|[{['entry'],'selectfg','gen_selectfg','rw'}|[{['canvas'|['editor'|['listbox']]],'activebg','gen_so_activebg','rw'}|[{['canvas'|['editor'|['listbox']]],'bc','gen_so_bc','rw'}|[{['canvas'|['editor'|['listbox']]],'bg','gen_so_bg','rw'}|[{['canvas'|['editor'|['listbox']]],'hscroll','gen_so_hscroll','r'}|[{['canvas'|['editor'|['listbox']]],'scrollbg','gen_so_scrollbg','rw'}|[{['canvas'|['editor'|['listbox']]],'scrollfg','gen_so_scrollfg','rw'}|[{['canvas'|['editor'|['listbox']]],'scrolls','gen_so_scrolls','w'}|[{['canvas'|['editor'|['listbox']]],'selectbg','gen_so_selectbg','rw'}|[{['canvas'|['editor'|['listbox']]],'selectbg','gen_so_selectbg','rw'}|[{['canvas'|['editor'|['listbox']]],'selectbw','gen_so_selectbw','rw'}|[{['canvas'|['editor'|['listbox']]],'selectbw','gen_so_selectbw','rw'}|[{['canvas'|['editor'|['listbox']]],'selectfg','gen_so_selectfg','rw'}|[{['canvas'|['editor'|['listbox']]],'selectfg','gen_so_selectfg','rw'}|[{['canvas'|['editor'|['listbox']]],'vscroll','gen_so_vscroll','r'}|[{['arc'|['image'|['line'|['oval'|['polygon'|['rectangle'|['text']]]]]]],'coords','gen_citem_coords','rw'}|[{['arc'|['image'|['line'|['oval'|['polygon'|['rectangle'|['text']]]]]]],'lower','gen_citem_lower','w'}|[{['arc'|['image'|['line'|['oval'|['polygon'|['rectangle'|['text']]]]]]],'raise','gen_citem_raise','w'}|[{['arc'|['image'|['line'|['oval'|['polygon'|['rectangle'|['text']]]]]]],'move','gen_citem_move','w'}|[{['arc'|['image'|['line'|['oval'|['polygon'|['rectangle'|['text']]]]]]],'setfocus','gen_citem_setfocus','rw'}|[{['arc'|['image'|['line'|['oval'|['polygon'|['rectangle'|['text']]]]]]],'buttonpress','gen_citem_buttonpress','w'}|[{['arc'|['image'|['line'|['oval'|['polygon'|['rectangle'|['text']]]]]]],'buttonrelease','gen_citem_buttonrelease','w'}|[{['arc'|['image'|['line'|['oval'|['polygon'|['rectangle'|['text']]]]]]],'enter','gen_citem_enter','w'}|[{['arc'|['image'|['line'|['oval'|['polygon'|['rectangle'|['text']]]]]]],'focus','gen_citem_setfocus','w'}|[{['arc'|['image'|['line'|['oval'|['polygon'|['rectangle'|['text']]]]]]],'keypress','gen_citem_keypress','w'}|[{['arc'|['image'|['line'|['oval'|['polygon'|['rectangle'|['text']]]]]]],'keyrelease','gen_citem_keyrelease','w'}|[{['arc'|['image'|['line'|['oval'|['polygon'|['rectangle'|['text']]]]]]],'leave','gen_citem_leave','w'}|[{['arc'|['image'|['line'|['oval'|['polygon'|['rectangle'|['text']]]]]]],'motion','gen_citem_motion','w'}|[{['arc'|['image'|['line'|['oval'|['polygon'|['rectangle'|['text']]]]]]],'buttonpress','gen_buttonpress','r'}|[{['arc'|['image'|['line'|['oval'|['polygon'|['rectangle'|['text']]]]]]],'buttonrelease','gen_buttonrelease','r'}|[{['arc'|['image'|['line'|['oval'|['polygon'|['rectangle'|['text']]]]]]],'configure','gen_configure','r'}|[{['arc'|['image'|['line'|['oval'|['polygon'|['rectangle'|['text']]]]]]],'destroy','gen_destroy','r'}|[{['arc'|['image'|['line'|['oval'|['polygon'|['rectangle'|['text']]]]]]],'enter','gen_enter','r'}|[{['arc'|['image'|['line'|['oval'|['polygon'|['rectangle'|['text']]]]]]],'leave','gen_leave','r'}|[{['arc'|['image'|['line'|['oval'|['polygon'|['rectangle'|['text']]]]]]],'focus','gen_focus_ev','r'}|[{['arc'|['image'|['line'|['oval'|['polygon'|['rectangle'|['text']]]]]]],'keypress','gen_keypress','r'}|[{['arc'|['image'|['line'|['oval'|['polygon'|['rectangle'|['text']]]]]]],'keyrelease','gen_keyrelease','r'}|[{['arc'|['image'|['line'|['oval'|['polygon'|['rectangle'|['text']]]]]]],'motion','gen_motion','r'}|[{['arc'|['oval'|['polygon'|['rectangle']]]],'fill','gen_citem_fill','rw'}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('gs_make')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('gs_make', _cor0)
end