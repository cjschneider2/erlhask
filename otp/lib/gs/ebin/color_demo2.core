module 'color_demo2' ['init'/0,
		      'module_info'/0,
		      'module_info'/1,
		      'start'/0]
    attributes []
'start'/0 =
    %% Line 34
    fun () ->
	%% Line 35
	call 'erlang':'spawn'
	    ('color_demo2', 'init', [])
'init'/0 =
    %% Line 38
    fun () ->
	let <S> =
	    %% Line 39
	    call 'gs':'start'
		()
	in  let <Win> =
		%% Line 40
		call 'gs':'create'
		    ('window', S, [{'width',380}|[{'height',430}|[{'motion','true'}|[{'buttonpress','true'}]]]])
	    in  do  %% Line 42
		    call 'gs':'create'
			('button', 'b1', Win, [{'x',200}|[{'label',{'text',[]}}]])
		    do  %% Line 43
			call 'gs':'create'
			    ('button', Win, [{'data','quit'}|[{'label',{'text',[81|[117|[105|[116]]]]}}|[{'bg','yellow'}|[{'width',40}]]]])
			let <Tri> =
			    %% Line 46
			    apply 'equi_tri'/3
				(100, 400, 200)
			in  do  %% Line 48
				call 'gs':'config'
				    (Win, [{'title',[67|[111|[108|[111|[114|[32|[68|[101|[109|[111|[32|[50]]]]]]]]]]]]}|[{'map','true'}]])
				%% Line 49
				apply 'server'/4
				    (Win, 200, Tri, {0,0,0})
'server'/4 =
    %% Line 51
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Win,Side,[Point1|[Point2|[Point3|[]]]],OldCol> when 'true' ->
	      %% Line 52
	      receive
		%% Line 53
		<{'gs',_cor14,'motion',_cor15,[X|[Y|_cor16]]}>
		    when call 'erlang':'=:='
			  (_cor14,
			   Win) ->
		    let <R> =
			%% Line 54
			apply 'col'/3
			    ({X,Y}, Point1, Side)
		    in  let <G> =
			    %% Line 55
			    apply 'col'/3
				({X,Y}, Point2, Side)
			in  let <B> =
				%% Line 56
				apply 'col'/3
				    ({X,Y}, Point3, Side)
			    in  let <_cor7> =
				    %% Line 57
				    call 'io_lib':'format'
					([126|[119|[32|[126|[119|[32|[126|[119]]]]]]]], [R|[G|[B|[]]]])
				in  let <Txt> =
					%% Line 57
					call 'lists':'flatten'
					    (_cor7)
				    in  do  %% Line 58
					    call 'gs':'config'
						('b1', [{'label',{'text',Txt}}|[]])
					    let <Col> = {%% Line 59
						 R,%% Line 59
						   G,%% Line 59
						     B}
					    in  do  %% Line 60
						    call 'gs':'config'
							(Win, [{'bg',Col}|[]])
						    %% Line 61
						    apply 'server'/4
							(Win, Side, [Point1|[Point2|[Point3|[]]]], Col)
		%% Line 62
		<{'gs',_cor17,'buttonpress',_cor18,[_X_X|[_X_Y|_cor19]]}>
		    when call 'erlang':'=:='
			  (_cor17,
			   Win) ->
		    do  %% Line 63
			call 'io':'format'
			    ([123|[99|[111|[108|[111|[114|[44|[32|[126|[119|[125|[10]]]]]]]]]]]], [OldCol|[]])
			%% Line 64
			apply 'server'/4
			    (Win, Side, [Point1|[Point2|[Point3|[]]]], OldCol)
		%% Line 65
		<{'gs',_cor20,'click','quit',_cor21}> when 'true' ->
		    %% Line 66
		    call 'erlang':'exit'
			('die')
		%% Line 67
		<{'gs',_cor22,'destroy',_cor23,_cor24}>
		    when call 'erlang':'=:='
			  (_cor22,
			   Win) ->
		    %% Line 68
		    call 'erlang':'exit'
			('die')
		%% Line 69
		<_X_Any> when 'true' ->
		    %% Line 70
		    apply 'server'/4
			(Win, Side, [Point1|[Point2|[Point3|[]]]], OldCol)
	      after 'infinity' ->
		'true'
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'server',4}}] )
	    -| ['compiler_generated'] )
	end
'col'/3 =
    %% Line 74
    fun (_cor2,_cor1,_cor0) ->
	let <D> =
	    %% Line 75
	    apply 'dist'/2
		(_cor2, _cor1)
	in  let <A> =
		%% Line 81
		call 'erlang':'/'
		    (255, _cor0)
	    in  let <_cor7> =
		    %% Line 82
		    call 'erlang':'*'
			(A, D)
		in  let <_cor8> =
			%% Line 82
			call 'erlang':'+'
			    (_cor7, 0)
		    in  let <Col> =
			    %% Line 82
			    call 'erlang':'trunc'
				(_cor8)
			in  %% Line 83
			    apply 'map'/1
				(Col)
'map'/1 =
    %% Line 85
    fun (_cor0) ->
	%% Line 86
	call 'erlang':'band'
	    (_cor0, 255)
'equi_tri'/3 =
    %% Line 88
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 89
	    call 'erlang':'/'
		(_cor0, 2)
	in  let <_cor4> =
		%% Line 89
		call 'erlang':'+'
		    (_cor2, _cor3)
	    in  let <X2> =
		    %% Line 89
		    call 'erlang':'trunc'
			(_cor4)
		in  let <_cor7> =
			%% Line 90
			call 'erlang':'*'
			    (_cor0, 1.73205080756887719318e+00)
		    in  let <_cor8> =
			    %% Line 90
			    call 'erlang':'-'
				(_cor1, _cor7)
			in  let <Y2> =
				%% Line 90
				call 'erlang':'trunc'
				    (_cor8)
			    in  let <_cor10> =
				    %% Line 91
				    call 'erlang':'+'
					(_cor2, _cor0)
				in  %% Line 91
				    [{_cor2,_cor1}|[{X2,Y2}|[{_cor10,_cor1}|[]]]]
'dist'/2 =
    %% Line 106
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{X1,Y1},{X2,Y2}> when 'true' ->
	      let <XX> =
		  %% Line 107
		  call 'erlang':'-'
		      (X1, X2)
	      in  let <YY> =
		      %% Line 108
		      call 'erlang':'-'
			  (Y1, Y2)
		  in  let <_cor5> =
			  %% Line 109
			  call 'erlang':'*'
			      (XX, XX)
		      in  let <_cor4> =
			      %% Line 109
			      call 'erlang':'*'
				  (YY, YY)
			  in  let <_cor6> =
				  %% Line 109
				  call 'erlang':'+'
				      (_cor5, _cor4)
			      in  %% Line 109
				  call 'math':'sqrt'
				      (_cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'dist',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('color_demo2')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('color_demo2', _cor0)
end