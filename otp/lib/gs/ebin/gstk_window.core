module 'gstk_window' ['config'/3,
		      'create'/3,
		      'delete'/2,
		      'destroy_win'/1,
		      'event'/5,
		      'mk_create_opts_for_child'/4,
		      'module_info'/0,
		      'module_info'/1,
		      'option'/5,
		      'read'/3,
		      'read_option'/5]
    attributes []
'create'/3 =
    %% Line 96
    fun (_cor2,_cor1,_cor0) ->
	let <TkW> =
	    %% Line 97
	    call 'gstk_generic':'mk_tkw_child'
		(_cor2, _cor1)
	in  %% Line 98
	    case _cor1 of
	      <{'gstkid',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}> when 'true' ->
		  let <_cor6> =
		      call 'erlang':'setelement'
			  (3, _cor1, TkW)
		  in  let <_cor8> =
			  %% Line 99
			  apply 'transform_geometry_opts'/1
			      (_cor0)
		      in  %% Line 99
			  case call 'gstk_generic':'make_command'
				   (_cor8, _cor6, %% Line 100
						  TkW, %% Line 100
						       [], %% Line 100
							   [59], _cor2) of
			    %% Line 101
			    <{'error',Reason}> when 'true' ->
				{'error',Reason}
			    %% Line 102
			    <Cmd>
				when call 'erlang':'is_list'
				      (Cmd) ->
				let <BindCmd> =
				    %% Line 103
				    call 'gstk_generic':'bind'
					(_cor2, _cor1, TkW, 'configure', 'true')
				in  do  %% Line 107
					call 'gstk':'exec'
					    ([[116|[111|[112|[108|[101|[118|[101|[108|[32]]]]]]]]]|[TkW|[Cmd|[59|[BindCmd|[]]]]]])
					_cor6
			    ( <_cor10> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor10})
			      -| ['compiler_generated'] )
			  end
	      ( <_cor20> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','gstkid'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
'mk_create_opts_for_child'/4 =
    %% Line 111
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 112
	call 'gstk_generic':'mk_create_opts_for_child'
	    (_cor3, _cor2, _cor1, _cor0)
'config'/3 =
    %% Line 123
    fun (_cor2,_cor1,_cor0) ->
	%% Line 124
	( case _cor1 of
	    ( <( {'gstkid',_cor11,_rec1,_cor12,_cor13,_cor14,_cor15}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <SimplePreCmd> =
		      %% Line 125
		      [_rec1|[[32|[99|[111|[110|[102]]]]]]]
		  in  let <_cor7> =
			  %% Line 126
			  apply 'transform_geometry_opts'/1
			      (_cor0)
		      in  %% Line 126
			  call 'gstk_generic':'mk_cmd_and_exec'
			      (_cor7, _cor1, _rec1, %% Line 127
						    SimplePreCmd, %% Line 127
								  [], _cor2)
	      -| ['compiler_generated'] )
	    ( <_cor16> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','gstkid'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'read'/3 =
    %% Line 138
    fun (_cor2,_cor1,_cor0) ->
	%% Line 139
	call 'gstk_generic':'read_option'
	    (_cor2, _cor1, _cor0)
'delete'/2 =
    %% Line 150
    fun (_cor1,_cor0) ->
	do  %% Line 151
	    call 'gstk_db':'delete_widget'
		(_cor1, _cor0)
	    %% Line 152
	    ( case _cor0 of
		( <( {'gstkid',_cor5,_rec2,_cor6,_cor7,_cor8,_cor9}
		     -| ['compiler_generated'] )> when 'true' ->
		      _rec2
		  -| ['compiler_generated'] )
		( <_cor10> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','gstkid'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'event'/5 =
    %% Line 166
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <DB,Gstkid,'configure',Edata,Args> when 'true' ->
	      %% Line 167
	      case Args of
		<[W|[H|_cor15]]> when 'true' ->
		    do  %% Line 168
			call 'gstk_db':'insert_opt'
			    (DB, Gstkid, {'width',W})
			do  %% Line 169
			    call 'gstk_db':'insert_opt'
				(DB, Gstkid, {'height',H})
			    %% Line 170
			    case call 'gstk_db':'opt'
				     (DB, Gstkid, 'configure') of
			      %% Line 171
			      <'true'> when 'true' ->
				  %% Line 172
				  call 'gstk_generic':'event'
				      (DB, Gstkid, 'configure', Edata, Args)
			      %% Line 173
			      <'false'> when 'true' ->
				  %% Line 174
				  'ok'
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor6})
				-| ['compiler_generated'] )
			    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 176
	  <DB,Gstkid,'destroy',Edata,Args> when 'true' ->
	      %% Line 177
	      ( case Gstkid of
		  ( <( {'gstkid',_rec3,_cor16,_cor17,_cor18,_cor19,_cor20}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor9> =
			    call 'gstk':'make_extern_id'
				(_rec3, DB)
			in  do  call 'erlang':'spawn'
				    ('gstk_window', 'destroy_win', [_cor9|[]])
				%% Line 178
				call 'gstk_generic':'event'
				    (DB, Gstkid, 'destroy', Edata, Args)
		    -| ['compiler_generated'] )
		  ( <_cor21> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','gstkid'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 179
	  <DB,Gstkid,Etype,Edata,Args> when 'true' ->
	      %% Line 180
	      call 'gstk_generic':'event'
		  (DB, Gstkid, Etype, Edata, Args)
	end
'destroy_win'/1 =
    %% Line 182
    fun (_cor0) ->
	%% Line 183
	call 'gs':'destroy'
	    (_cor0)
'option'/5 =
    %% Line 201
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 202
	case _cor4 of
	  %% Line 204
	  <{'x',X}> when 'true' ->
	      let <_cor5> =
		  %% Line 207
		  apply 'signed'/1
		      (X)
	      in  %% Line 205
		  {'c',%% Line 206
		       [[114|[101|[103|[101|[120|[112|[32|[123|[40|[92|[100|[43|[41|[120|[40|[92|[100|[43|[41|[92|[43|[40|[92|[100|[43|[41|[92|[43|[40|[92|[100|[43|[41|[125|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[91|[119|[109|[32|[103|[101|[32]]]]]]]|[_cor2|[[93|[32|[103|[32|[119|[32|[104|[32|[120|[32|[121|[59|[119|[109|[32|[103|[101|[32]]]]]]]]]]]]]]]]]]|[_cor2|%% Line 207
																																													      [[32|[36|[123|[119|[125|[120|[36|[104]]]]]]]]|[_cor5|[[43|[36|[121|[59|[117|[112|[100|[97|[116|[101|[32|[105|[100|[108|[101|[116|[97|[115|[107|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]}
	  %% Line 208
	  <{'y',Y}> when 'true' ->
	      let <_cor6> =
		  %% Line 210
		  apply 'signed'/1
		      (Y)
	      in  %% Line 209
		  {'c',[[114|[101|[103|[101|[120|[112|[32|[123|[40|[92|[100|[43|[41|[120|[40|[92|[100|[43|[41|[92|[43|[40|[92|[100|[43|[41|[92|[43|[40|[92|[100|[43|[41|[125|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[91|[119|[109|[32|[103|[101|[32]]]]]]]|[_cor2|[[93|[32|[103|[32|[119|[32|[104|[32|[120|[32|[121|[59|[119|[109|[32|[103|[101|[32]]]]]]]]]]]]]]]]]]|[_cor2|%% Line 210
																																													      [[32|[36|[123|[119|[125|[120|[36|[104|[43|[36|[120]]]]]]]]]]]|[_cor6|[[59|[32|[117|[112|[100|[97|[116|[101|[32|[105|[100|[108|[101|[116|[97|[115|[107|[115]]]]]]]]]]]]]]]]]]]]]]]]]]}
	  %% Line 211
	  <{'width',Width}>
	      when call 'erlang':'>='
		    (Width,
		     0) ->
	      %% Line 212
	      case call 'gstk_db':'opt_or_not'
		       (_cor1, _cor3, 'width') of
		%% Line 213
		<{'value',_cor41}>
		    when call 'erlang':'=:='
			  (_cor41,
			   Width) ->
		    'none'
		%% Line 214
		<_X_Q> when 'true' ->
		    do  %% Line 215
			call 'gstk_db':'insert_opt'
			    (_cor1, _cor3, {'width',Width})
			let <_cor7> =
			    %% Line 217
			    call 'gstk':'to_ascii'
				(Width)
			in  %% Line 216
			    {'c',[[114|[101|[103|[101|[120|[112|[32|[123|[40|[92|[100|[43|[41|[120|[40|[92|[100|[43|[41|[92|[43|[40|[92|[100|[43|[41|[92|[43|[40|[92|[100|[43|[41|[125|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[91|[119|[109|[32|[103|[101|[32]]]]]]]|[_cor2|[[93|[32|[103|[32|[119|[32|[104|[32|[120|[32|[121|[59|[119|[109|[32|[103|[101|[32]]]]]]]]]]]]]]]]]]|[_cor2|[[32]|%% Line 217
																																															      [_cor7|[[120|[36|[104|[43|[36|[120|[43|[36|[121|[59|[117|[112|[100|[97|[116|[101|[32|[105|[100|[108|[101|[116|[97|[115|[107|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}
	      end
	  %% Line 219
	  <{'height',Height}>
	      when call 'erlang':'>='
		    (Height,
		     0) ->
	      %% Line 220
	      case call 'gstk_db':'opt_or_not'
		       (_cor1, _cor3, 'height') of
		%% Line 221
		<{'value',_cor42}>
		    when call 'erlang':'=:='
			  (_cor42,
			   Height) ->
		    'none'
		%% Line 222
		<_X_Q> when 'true' ->
		    do  %% Line 223
			call 'gstk_db':'insert_opt'
			    (_cor1, _cor3, {'height',Height})
			let <_cor9> =
			    %% Line 226
			    call 'gstk':'to_ascii'
				(Height)
			in  %% Line 224
			    {'c',%% Line 225
				 [[119|[109|[32|[103|[101|[32]]]]]]|[_cor2|%% Line 226
									   [[32|[91|[119|[105|[110|[102|[111|[32|[119|[32]]]]]]]]]]|[_cor2|[[93|[120]]|[_cor9|%% Line 227
																			      [[59|[117|[112|[100|[97|[116|[101|[32|[105|[100|[108|[101|[116|[97|[115|[107|[115]]]]]]]]]]]]]]]]]]]]]]]]}
	      end
	  %% Line 229
	  <{'width_height',{W,H}}>
	      when let <_cor11> =
		    call 'erlang':'>='
			(W, 0)
		in  let <_cor12> =
			call 'erlang':'>='
			    (H, 0)
		    in  call 'erlang':'and'
			    (_cor11, _cor12) ->
	      let <_cor14> =
		  %% Line 230
		  call 'gstk_db':'opt_or_not'
		      (_cor1, _cor3, 'width')
	      in  let <_cor13> =
		      %% Line 231
		      call 'gstk_db':'opt_or_not'
			  (_cor1, _cor3, 'height')
		  in  %% Line 230
		      case <_cor14,_cor13> of
			%% Line 232
			<{'value',_cor43},{'value',_cor44}>
			    when let <_cor45> =
				  call 'erlang':'=:='
				      (_cor43, W)
			      in  let <_cor46> =
				      call 'erlang':'=:='
					  (_cor44, H)
				  in  call 'erlang':'and'
					  (_cor45, _cor46) ->
			    %% Line 233
			    'none'
			%% Line 234
			<_fol16,_fol17> when 'true' ->
			    do  %% Line 235
				call 'gstk_db':'insert_opt'
				    (_cor1, _cor3, {'height',H})
				do  %% Line 236
				    call 'gstk_db':'insert_opt'
					(_cor1, _cor3, {'width',W})
				    let <_cor15> =
					%% Line 238
					call 'gstk':'to_ascii'
					    (W)
				    in  let <_cor16> =
					    %% Line 238
					    call 'gstk':'to_ascii'
						(H)
					in  %% Line 237
					    {'c',[[117|[112|[100|[97|[116|[101|[32|[105|[100|[108|[101|[116|[97|[115|[107|[115|[59|[119|[109|[32|[103|[101|[32]]]]]]]]]]]]]]]]]]]]]]]|[_cor2|[[32]|%% Line 238
																								   [_cor15|[[120]|[_cor16|%% Line 239
																											  [[59|[117|[112|[100|[97|[116|[101|[32|[105|[100|[108|[101|[116|[97|[115|[107|[115]]]]]]]]]]]]]]]]]]]]]]]]}
		      end
	  %% Line 241
	  <{'xy',{X,Y}}> when 'true' ->
	      let <_cor18> =
		  %% Line 243
		  apply 'signed'/1
		      (X)
	      in  let <_cor19> =
		      %% Line 243
		      apply 'signed'/1
			  (Y)
		  in  %% Line 242
		      {'c',[[114|[101|[103|[101|[120|[112|[32|[123|[40|[92|[100|[43|[41|[120|[40|[92|[100|[43|[41|[92|[43|[40|[92|[100|[43|[41|[92|[43|[40|[92|[100|[43|[41|[125|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[91|[119|[109|[32|[103|[101|[32]]]]]]]|[_cor2|[[93|[32|[103|[32|[119|[32|[104|[32|[120|[32|[121|[59|[119|[109|[32|[103|[101|[32]]]]]]]]]]]]]]]]]]|[_cor2|%% Line 243
																																														  [[32|[36|[123|[119|[125|[120|[36|[104]]]]]]]]|[_cor18|[_cor19|%% Line 244
																																																						[[59|[117|[112|[100|[97|[116|[101|[32|[105|[100|[108|[101|[116|[97|[115|[107|[115]]]]]]]]]]]]]]]]]]]]]]]]]]}
	  %% Line 245
	  <{'bg',Color}> when 'true' ->
	      let <_cor20> =
		  call 'gstk':'to_color'
		      (Color)
	      in  {'s',[[32|[45|[98|[103|[32]]]]]|[_cor20|[]]]}
	  %% Line 246
	  <{'map','true'}> when 'true' ->
	      {'c',[[119|[109|[32|[100|[101|[105|[99|[111|[110|[105|[102|[121|[32]]]]]]]]]]]]]|[_cor2|[]]]}
	  %% Line 247
	  <{'map','false'}> when 'true' ->
	      {'c',[[119|[109|[32|[119|[105|[116|[104|[100|[114|[97|[119|[32]]]]]]]]]]]]|[_cor2|[]]]}
	  %% Line 248
	  <{'configure',On}> when 'true' ->
	      do  %% Line 249
		  call 'gstk_db':'insert_opt'
		      (_cor1, _cor3, {'configure',On})
		  %% Line 250
		  'none'
	  %% Line 251
	  <{'iconify','true'}> when 'true' ->
	      {'c',[[119|[109|[32|[105|[99|[111|[110|[105|[102|[121|[32]]]]]]]]]]]|[_cor2|[]]]}
	  %% Line 252
	  <{'iconify','false'}> when 'true' ->
	      {'c',[[119|[109|[32|[100|[101|[105|[99|[111|[110|[105|[102|[121|[32]]]]]]]]]]]]]|[_cor2|[]]]}
	  %% Line 253
	  <{'title',Title}> when 'true' ->
	      let <_cor21> =
		  %% Line 254
		  call 'gstk':'to_ascii'
		      (Title)
	      in  {'c',[[119|[109|[32|[116|[105|[116|[108|[101|[32]]]]]]]]]|[_cor2|[[32]|%% Line 254
											 [_cor21|[]]]]]}
	  %% Line 255
	  <{'iconname',Name}> when 'true' ->
	      let <_cor22> =
		  %% Line 256
		  call 'gstk':'to_ascii'
		      (Name)
	      in  {'c',[[119|[109|[32|[105|[99|[111|[110|[110|[32]]]]]]]]]|[_cor2|[[32]|%% Line 256
											[_cor22|[]]]]]}
	  %% Line 257
	  <{'iconbitmap',Bitmap}> when 'true' ->
	      let <_cor23> =
		  %% Line 258
		  call 'gstk':'to_ascii'
		      (Bitmap)
	      in  {'c',[[119|[109|[32|[105|[99|[111|[110|[98|[32]]]]]]]]]|[_cor2|[[32]|%% Line 258
										       [_cor23|[]]]]]}
	  %% Line 259
	  <{'iconmask',Bitmap}> when 'true' ->
	      let <_cor24> =
		  %% Line 260
		  call 'gstk':'to_ascii'
		      (Bitmap)
	      in  {'c',[[119|[109|[32|[105|[99|[111|[110|[109|[32]]]]]]]]]|[_cor2|[[32]|%% Line 260
											[_cor24|[]]]]]}
	  %% Line 261
	  <'raise'> when 'true' ->
	      {'c',[[114|[97|[105|[115|[101|[32]]]]]]|[_cor2|[]]]}
	  %% Line 262
	  <'lower'> when 'true' ->
	      {'c',[[108|[111|[119|[101|[114|[32]]]]]]|[_cor2|[]]]}
	  %% Line 263
	  <{'setfocus','true'}> when 'true' ->
	      {'c',[[102|[111|[99|[117|[115|[32]]]]]]|[_cor2|[]]]}
	  %% Line 264
	  <{'setfocus','false'}> when 'true' ->
	      {'c',[[102|[111|[99|[117|[115|[32|[123|[125]]]]]]]]]}
	  %% Line 265
	  <{'buttonpress',On}> when 'true' ->
	      let <Eref> =
		  %% Line 266
		  apply 'mk_eref'/4
		      (On, _cor1, _cor3, 'buttonpress')
	      in  let <_cor26> =
		      %% Line 268
		      apply 'xy_abs_str'/1
			  (_cor2)
		  in  let <_cor27> =
			  %% Line 268
			  apply 'event_onoff'/2
			      ([[123|[101|[114|[108|[115|[101|[110|[100|[32]]]]]]]]]|[Eref|[[32|[37|[98|[32]]]]|[_cor26|[[125|[59]]]]]]], On)
		      in  %% Line 267
			  {'c',[[98|[105|[110|[100|[32]]]]]|[_cor2|[[32|[60|[66|[117|[116|[116|[111|[110|[80|[114|[101|[115|[115|[62|[32]]]]]]]]]]]]]]]|%% Line 268
																			[_cor27|[]]]]]}
	  %% Line 269
	  <{'buttonrelease',On}> when 'true' ->
	      let <Eref> =
		  %% Line 270
		  apply 'mk_eref'/4
		      (On, _cor1, _cor3, 'buttonrelease')
	      in  let <_cor29> =
		      %% Line 272
		      apply 'xy_abs_str'/1
			  (_cor2)
		  in  let <_cor30> =
			  %% Line 272
			  apply 'event_onoff'/2
			      ([[123|[101|[114|[108|[115|[101|[110|[100|[32]]]]]]]]]|[Eref|[[32|[37|[98|[32]]]]|[_cor29|[[125|[59]]]]]]], On)
		      in  %% Line 271
			  {'c',[[98|[105|[110|[100|[32]]]]]|[_cor2|[[32|[60|[66|[117|[116|[116|[111|[110|[82|[101|[108|[101|[97|[115|[101|[62|[32]]]]]]]]]]]]]]]]]|%% Line 272
																				   [_cor30|[]]]]]}
	  %% Line 273
	  <{'motion',On}> when 'true' ->
	      let <Eref> =
		  %% Line 274
		  apply 'mk_eref'/4
		      (On, _cor1, _cor3, 'motion')
	      in  let <_cor32> =
		      %% Line 276
		      apply 'xy_abs_str'/1
			  (_cor2)
		  in  let <_cor33> =
			  %% Line 276
			  apply 'event_onoff'/2
			      ([[123|[101|[114|[108|[115|[101|[110|[100|[32]]]]]]]]]|[Eref|[[32]|[_cor32|[[125|[59]]]]]]], On)
		      in  %% Line 275
			  {'c',[[98|[105|[110|[100|[32]]]]]|[_cor2|[[32|[60|[77|[111|[116|[105|[111|[110|[62|[32]]]]]]]]]]|%% Line 276
															   [_cor33|[]]]]]}
	  %% Line 277
	  <_cor47> when 'true' ->
	      'invalid_option'
	end
'xy_abs_str'/1 =
    %% Line 280
    fun (_cor0) ->
	%% Line 281
	[[91|[101|[120|[112|[114|[32|[37|[88|[45|[91|[119|[105|[110|[102|[111|[32|[114|[111|[111|[116|[120|[32]]]]]]]]]]]]]]]]]]]]]]|[_cor0|[[93|[93|[32|[91|[101|[120|[112|[114|[32|[37|[89|[45|[91|[119|[105|[110|[102|[111|[32|[114|[111|[111|[116|[121|[32]]]]]]]]]]]]]]]]]]]]]]]]]|[_cor0|[[93|[93]]]]]]]
'event_onoff'/2 =
    %% Line 283
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Str,'true'> when 'true' ->
	      Str
	  %% Line 284
	  <_cor4,'false'> when 'true' ->
	      [123|[125]]
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'event_onoff',2}}] )
	    -| ['compiler_generated'] )
	end
'mk_eref'/4 =
    %% Line 286
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'false',DB,Gstkid,Etype> when 'true' ->
	      do  %% Line 287
		  call 'gstk_db':'delete_event'
		      (DB, Gstkid, Etype)
		  %% Line 288
		  'dummy'
	  %% Line 289
	  <'true',DB,Gstkid,Etype> when 'true' ->
	      %% Line 290
	      call 'gstk_db':'insert_event'
		  (DB, Gstkid, Etype, [])
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'mk_eref',4}}] )
	    -| ['compiler_generated'] )
	end
'read_option'/5 =
    %% Line 303
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 304
	case _cor4 of
	  %% Line 305
	  <'x'> when 'true' ->
	      let <_cor5> =
		  apply 'geo_str'/1
		      (_cor2)
	      in  call 'tcl2erl':'ret_x'
		      (_cor5)
	  %% Line 306
	  <'y'> when 'true' ->
	      let <_cor6> =
		  apply 'geo_str'/1
		      (_cor2)
	      in  call 'tcl2erl':'ret_y'
		      (_cor6)
	  %% Line 307
	  <'width'> when 'true' ->
	      let <_cor7> =
		  apply 'geo_str'/1
		      (_cor2)
	      in  call 'tcl2erl':'ret_width'
		      (_cor7)
	  %% Line 308
	  <'height'> when 'true' ->
	      let <_cor8> =
		  apply 'geo_str'/1
		      (_cor2)
	      in  call 'tcl2erl':'ret_height'
		      (_cor8)
	  %% Line 309
	  <'configure'> when 'true' ->
	      call 'gstk_db':'opt'
		  (_cor1, _cor3, 'configure')
	  %% Line 310
	  <'bg'> when 'true' ->
	      call 'tcl2erl':'ret_color'
		  ([_cor2|[[32|[99|[103|[32|[45|[98|[103]]]]]]]]])
	  %% Line 311
	  <'map'> when 'true' ->
	      call 'tcl2erl':'ret_mapped'
		  ([[119|[105|[110|[102|[111|[32|[105|[115|[32]]]]]]]]]|[_cor2|[]]])
	  %% Line 312
	  <'iconify'> when 'true' ->
	      call 'tcl2erl':'ret_iconified'
		  ([[119|[109|[32|[115|[116|[32]]]]]]|[_cor2|[]]])
	  %% Line 313
	  <'title'> when 'true' ->
	      call 'tcl2erl':'ret_str'
		  ([[119|[109|[32|[116|[105|[32]]]]]]|[_cor2|[]]])
	  %% Line 314
	  <'iconname'> when 'true' ->
	      call 'tcl2erl':'ret_str'
		  ([[119|[109|[32|[105|[99|[111|[110|[110|[32]]]]]]]]]|[_cor2|[]]])
	  %% Line 315
	  <'iconbitmap'> when 'true' ->
	      call 'tcl2erl':'ret_str'
		  ([[119|[109|[32|[105|[99|[111|[110|[98|[32]]]]]]]]]|[_cor2|[]]])
	  %% Line 316
	  <'iconmask'> when 'true' ->
	      call 'tcl2erl':'ret_str'
		  ([[119|[109|[32|[105|[99|[111|[110|[109|[32]]]]]]]]]|[_cor2|[]]])
	  %% Line 317
	  <'setfocus'> when 'true' ->
	      call 'tcl2erl':'ret_focus'
		  (_cor2, [102|[111|[99|[117|[115]]]]])
	  %% Line 318
	  <_cor18> when 'true' ->
	      ( case _cor3 of
		  ( <( {'gstkid',_cor19,_cor20,_cor21,_cor22,_cor23,_rec4}
		       -| ['compiler_generated'] )> when 'true' ->
			{'bad_result',{_rec4,'invalid_option',_cor4}}
		    -| ['compiler_generated'] )
		  ( <_cor24> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','gstkid'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'geo_str'/1 =
    %% Line 321
    fun (_cor0) ->
	%% Line 322
	[[117|[112|[100|[97|[116|[101|[32|[105|[100|[108|[101|[116|[97|[115|[107|[115|[59]]]]]]]]]]]]]]]]]|[[114|[101|[103|[101|[120|[112|[32|[123|[40|[92|[100|[43|[41|[120|[40|[92|[100|[43|[41|[92|[43|[40|[92|[100|[43|[41|[92|[43|[40|[92|[100|[43|[41|[125|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[91|[119|[109|[32|[103|[101|[111|[109|[101|[116|[114|[121|[32]]]]]]]]]]]]]|[_cor0|%% Line 323
																																															   [[93|[32|[103|[32|[119|[32|[104|[32|[120|[32|[121|[59|[115|[101|[116|[32|[116|[109|[112|[32|[34|[36|[119|[32|[36|[104|[32|[36|[120|[32|[36|[121|[34]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
'signed'/1 =
    %% Line 332
    fun (_cor0) ->
	case _cor0 of
	  <X>
	      when call 'erlang':'>='
		    (_cor0,
		     0) ->
	      let <_cor1> =
		  %% Line 333
		  call 'erlang':'integer_to_list'
		      (X)
	      in  %% Line 333
		  [43|[_cor1|[]]]
	  %% Line 334
	  <X>
	      when call 'erlang':'<'
		    (_cor0,
		     0) ->
	      %% Line 335
	      call 'erlang':'integer_to_list'
		  (X)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'signed',1}}] )
	    -| ['compiler_generated'] )
	end
'transform_geometry_opts'/1 =
    %% Line 342
    fun (_cor0) ->
	%% Line 343
	case apply 'collect_geo_opts'/3
		 (_cor0, [], []) of
	  <{Geo,RestOpts}> when 'true' ->
	      let <_cor2> =
		  %% Line 344
		  call 'lists':'sort'
		      (Geo)
	      in  let <Geo2> =
		      %% Line 344
		      apply 'make_atomic'/1
			  (_cor2)
		  in  %% Line 345
		      call 'lists':'append'
			  (Geo2, RestOpts)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'make_atomic'/1 =
    %% Line 347
    fun (_cor0) ->
	case _cor0 of
	  <[{'height',H}|[{'width',W}|[{'x',X}|[{'y',Y}|[]]]]]> when 'true' ->
	      %% Line 348
	      [{'width_height',{W,H}}|[{'xy',{X,Y}}|[]]]
	  %% Line 349
	  <[{'height',H}|[{'width',W}|XY]]> when 'true' ->
	      %% Line 350
	      [{'width_height',{W,H}}|XY]
	  %% Line 351
	  <[WH|[{'x',X}|[{'y',Y}|[]]]]> when 'true' ->
	      %% Line 352
	      [WH|[{'xy',{X,Y}}|[]]]
	  %% Line 353
	  <L> when 'true' ->
	      L
	end
'collect_geo_opts'/3 =
    %% Line 358
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'x',X}|Opts],Geo,Rest> when 'true' ->
	      %% Line 359
	      apply 'collect_geo_opts'/3
		  (Opts, [{'x',X}|Geo], Rest)
	  %% Line 360
	  <[{'y',Y}|Opts],Geo,Rest> when 'true' ->
	      %% Line 361
	      apply 'collect_geo_opts'/3
		  (Opts, [{'y',Y}|Geo], Rest)
	  %% Line 362
	  <[{'height',H}|Opts],Geo,Rest> when 'true' ->
	      %% Line 363
	      apply 'collect_geo_opts'/3
		  (Opts, [{'height',H}|Geo], Rest)
	  %% Line 364
	  <[{'width',W}|Opts],Geo,Rest> when 'true' ->
	      %% Line 365
	      apply 'collect_geo_opts'/3
		  (Opts, [{'width',W}|Geo], Rest)
	  %% Line 366
	  <[Opt|Opts],Geo,Rest> when 'true' ->
	      %% Line 367
	      apply 'collect_geo_opts'/3
		  (Opts, Geo, [Opt|Rest])
	  %% Line 368
	  <[],Geo,Rest> when 'true' ->
	      {Geo,Rest}
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'collect_geo_opts',3}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('gstk_window')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('gstk_window', _cor0)
end