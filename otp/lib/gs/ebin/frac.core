module 'frac' ['expand'/3,
	       'go'/0,
	       'grow'/2,
	       'module_info'/0,
	       'module_info'/1,
	       'start'/0,
	       'subst'/2,
	       'test'/0]
    attributes []
'start'/0 =
    %% Line 32
    fun () ->
	%% Line 33
	call 'erlang':'spawn'
	    ('frac', 'go', [])
'go'/0 =
    %% Line 35
    fun () ->
	do  %% Line 36
	    apply 'draw'/0
		()
	    %% Line 37
	    receive
	      %% Line 38
	      <_X_X> when 'true' ->
		  'true'
	    after 'infinity' ->
	      'true'
'draw'/0 =
    %% Line 41
    fun () ->
	let <S> =
	    %% Line 42
	    call 'gs':'start'
		()
	in  let <Win> =
		%% Line 46
		call 'gs':'create'
		    ('window', S, [{'title',[67|[111|[110|[116|[101|[120|[116|[32|[73|[110|[115|[101|[110|[115|[105|[116|[105|[118|[101|[32|[76|[105|[110|[100|[101|[110|[109|[97|[121|[101|[114|[32|[71|[114|[97|[109|[109|[101|[114|[32|[40|[76|[48|[41|[32|[84|[114|[101|[101|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|[{'width',800}|[{'height',520}]]])
	    in  let <Canvas> =
		    %% Line 47
		    call 'gs':'create'
			('canvas', Win, [{'width',800}|[{'height',520}|[{'bg',{237,224,189}}]]])
		in  do  %% Line 48
			call 'gs':'config'
			    (Win, [{'iconname',[80|[108|[97|[110|[116|[115]]]]]]}|[{'map','true'}]])
			do  %% Line 49
			    apply 'draw'/4
				(Canvas, 1, 800, 520)
			    do  %% Line 50
				apply 'draw'/4
				    (Canvas, 2, 800, 520)
				do  %% Line 51
				    apply 'draw'/4
					(Canvas, 3, 800, 520)
				    %% Line 52
				    apply 'draw'/4
					(Canvas, 4, 800, 520)
'draw'/4 =
    %% Line 54
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 55
	apply 'draw_frac'/4
	    (_cor3, _cor2, _cor1, _cor0)
'test'/0 =
    %% Line 57
    fun () ->
	%% Line 58
	apply 'grow'/2
	    (3, 1)
'grow'/2 =
    %% Line 60
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 61
	    apply 'expand'/3
		(_cor1, _cor0, ['a'])
	in  %% Line 61
	    call 'lists':'flatten'
		(_cor2)
'rule'/2 =
    %% Line 63
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <1,'a'> when 'true' ->
	      ['b'|['['|['a'|[']'|['b'|['('|['a'|[')'|['a']]]]]]]]]
	  %% Line 64
	  <1,'b'> when 'true' ->
	      ['b'|['b']]
	  %% Line 66
	  <2,'a'> when 'true' ->
	      ['b'|['['|['a'|['['|['b'|['a'|[']'|[']']]]]]]]]
	  %% Line 67
	  <2,'b'> when 'true' ->
	      ['b'|['('|['('|['b'|[')'|['a'|[')'|['c']]]]]]]]
	  %% Line 68
	  <2,'c'> when 'true' ->
	      ['c'|['d']]
	  %% Line 70
	  <3,'a'> when 'true' ->
	      ['d'|['['|['d'|['b'|['e'|[']'|['('|['d'|['c'|['e'|[')']]]]]]]]]]]
	  %% Line 71
	  <3,'b'> when 'true' ->
	      ['d'|['['|['d'|['a'|['f'|[']'|['('|['d'|['c'|['f'|[')'|['f']]]]]]]]]]]]
	  %% Line 72
	  <3,'c'> when 'true' ->
	      ['d'|['['|['d'|['b'|['g'|[']'|['('|['d'|['a'|['g'|[')'|['g']]]]]]]]]]]]
	  %% Line 74
	  <4,'a'> when 'true' ->
	      ['c'|['('|['b'|['a'|['('|['b'|[')'|[')'|['c'|['['|['b'|['a'|['['|['b'|[']'|[']']]]]]]]]]]]]]]]]
	  %% Line 75
	  <4,'b'> when 'true' ->
	      ['c'|['('|['b'|['e'|[')'|['c'|['['|['b'|['f'|[']']]]]]]]]]]
	  %% Line 76
	  <4,'c'> when 'true' ->
	      ['g'|['c'|['c']]]
	  %% Line 78
	  <_cor4,X> when 'true' ->
	      X
	end
'step'/1 =
    %% Line 81
    fun (_cor0) ->
	case _cor0 of
	  <'a'> when 'true' ->
	      1.00000000000000000000e+00
	  %% Line 82
	  <'b'> when 'true' ->
	      8.00000000000000044409e-01
	  %% Line 83
	  <'c'> when 'true' ->
	      5.99999999999999977796e-01
	  %% Line 84
	  <'d'> when 'true' ->
	      6.99999999999999955591e-01
	  %% Line 85
	  <'e'> when 'true' ->
	      5.99999999999999977796e-01
	  %% Line 86
	  <'f'> when 'true' ->
	      6.50000000000000022204e-01
	  %% Line 87
	  <'g'> when 'true' ->
	      7.50000000000000000000e-01
	  %% Line 88
	  <_cor2> when 'true' ->
	      1.00000000000000000000e+00
	end
'start_coords'/1 =
    %% Line 90
    fun (_cor0) ->
	case _cor0 of
	  <1> when 'true' ->
	      {8.00000000000000044409e-01,8.00000000000000044409e-01}
	  %% Line 91
	  <2> when 'true' ->
	      {5.99999999999999977796e-01,8.00000000000000044409e-01}
	  %% Line 92
	  <3> when 'true' ->
	      {4.00000000000000022204e-01,8.00000000000000044409e-01}
	  %% Line 93
	  <4> when 'true' ->
	      {2.00000000000000011102e-01,8.00000000000000044409e-01}
	  %% Line 94
	  <_cor2> when 'true' ->
	      {5.00000000000000000000e-01,5.00000000000000000000e-01}
	end
'gens'/1 =
    %% Line 96
    fun (_cor0) ->
	case _cor0 of
	  <1> when 'true' ->
	      5
	  %% Line 97
	  <_cor2> when 'true' ->
	      5
	end
'scale'/1 =
    %% Line 99
    fun (_cor0) ->
	case _cor0 of
	  <1> when 'true' ->
	      5
	  %% Line 100
	  <2> when 'true' ->
	      40
	  %% Line 101
	  <3> when 'true' ->
	      40
	  %% Line 102
	  <4> when 'true' ->
	      4
	  %% Line 103
	  <_cor2> when 'true' ->
	      5
	end
'expand'/3 =
    %% Line 105
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <0,_cor9,X> when 'true' ->
	      %% Line 106
	      X
	  %% Line 107
	  <N,Index,X> when 'true' ->
	      let <_cor5> =
		  %% Line 108
		  call 'erlang':'-'
		      (N, 1)
	      in  let <_cor3> =
		      %% Line 108
		      apply 'subst'/2
			  (X, Index)
		  in  let <_cor4> =
			  %% Line 108
			  call 'lists':'flatten'
			      (_cor3)
		      in  %% Line 108
			  apply 'expand'/3
			      (_cor5, Index, _cor4)
	end
'subst'/2 =
    %% Line 111
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_cor6> when 'true' ->
	      []
	  %% Line 112
	  <[H|T],Index> when 'true' ->
	      let <_cor2> =
		  %% Line 113
		  apply 'rule'/2
		      (Index, H)
	      in  let <_cor3> =
		      %% Line 113
		      apply 'subst'/2
			  (T, Index)
		  in  %% Line 113
		      [_cor2|_cor3]
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'subst',2}}] )
	    -| ['compiler_generated'] )
	end
'draw_frac'/4 =
    %% Line 116
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 119
	case apply 'start_coords'/1
		 (_cor2) of
	  <{XScale,YScale}> when 'true' ->
	      let <_cor7> =
		  %% Line 120
		  call 'erlang':'*'
		      (_cor1, XScale)
	      in  let <_cor8> =
		      %% Line 120
		      call 'erlang':'+'
			  (100, _cor7)
		  in  let <Xstart> =
			  %% Line 120
			  call 'erlang':'trunc'
			      (_cor8)
		      in  let <_cor10> =
			      %% Line 121
			      call 'erlang':'*'
				  (_cor0, YScale)
			  in  let <_cor11> =
				  %% Line 121
				  call 'erlang':'+'
				      (100, _cor10)
			      in  let <Ystart> =
				      %% Line 121
				      call 'erlang':'trunc'
					  (_cor11)
				  in  let <Scale> =
					  %% Line 123
					  apply 'scale'/1
					      (_cor2)
				      in  let <N> =
					      %% Line 124
					      apply 'gens'/1
						  (_cor2)
					  in  let <Tree> =
						  %% Line 125
						  apply 'grow'/2
						      (N, _cor2)
					      in  %% Line 126
						  apply 'drawit'/7
						      (Tree, _cor3, Xstart, Ystart, 4.71238499999999937984e+00, Scale, [])
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'drawit'/7 =
    %% Line 130
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_cor25,_cor26,_cor27,_cor28,_cor29,_cor30> when 'true' ->
	      %% Line 131
	      'true'
	  %% Line 132
	  <['('|T],Id,X0,Y0,Ang,Scale,Stack> when 'true' ->
	      let <Ang1> =
		  %% Line 133
		  call 'erlang':'+'
		      (Ang, 3.49065555555555573353e-01)
	      in  let <Scale1> =
		      %% Line 134
		      call 'erlang':'*'
			  (Scale, 8.00000000000000044409e-01)
		  in  %% Line 135
		      apply 'drawit'/7
			  (T, Id, X0, Y0, Ang1, Scale1, [{X0,Y0,Ang,Scale}|Stack])
	  %% Line 136
	  <['['|T],Id,X0,Y0,Ang,Scale,Stack> when 'true' ->
	      let <Ang1> =
		  %% Line 137
		  call 'erlang':'-'
		      (Ang, 6.98131111111111146705e-01)
	      in  let <Scale1> =
		      %% Line 138
		      call 'erlang':'*'
			  (Scale, 8.00000000000000044409e-01)
		  in  %% Line 139
		      apply 'drawit'/7
			  (T, Id, X0, Y0, Ang1, Scale1, [{X0,Y0,Ang,Scale}|Stack])
	  %% Line 140
	  <[')'|T],Id,_cor31,_cor32,_cor33,_cor34,[{X1,Y1,Ang1,Scale1}|Stack]> when 'true' ->
	      %% Line 141
	      apply 'drawit'/7
		  (T, Id, X1, Y1, Ang1, Scale1, Stack)
	  %% Line 142
	  <[']'|T],Id,_cor35,_cor36,_cor37,_cor38,[{X1,Y1,Ang1,Scale1}|Stack]> when 'true' ->
	      %% Line 143
	      apply 'drawit'/7
		  (T, Id, X1, Y1, Ang1, Scale1, Stack)
	  %% Line 144
	  <[Symbol|T],Id,X0,Y0,Ang,Scale,Stack> when 'true' ->
	      let <Size> =
		  %% Line 145
		  apply 'step'/1
		      (Symbol)
	      in  let <L> =
		      %% Line 146
		      call 'erlang':'*'
			  (Size, Scale)
		  in  %% Line 147
		      case apply 'plotit'/5
			       (Id, X0, Y0, L, Ang) of
			<{X1,Y1}> when 'true' ->
			    %% Line 148
			    apply 'drawit'/7
				(T, Id, X1, Y1, Ang, Scale, Stack)
			( <_cor17> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor17})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor24,_cor23,_cor22,_cor21,_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23,_cor22,_cor21,_cor20,_cor19,_cor18})
		  -| [{'function_name',{'drawit',7}}] )
	    -| ['compiler_generated'] )
	end
'plotit'/5 =
    %% Line 150
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <CosA> =
	    %% Line 151
	    call 'math':'cos'
		(_cor0)
	in  let <SinA> =
		%% Line 152
		call 'math':'sin'
		    (_cor0)
	    in  let <_cor7> =
		    %% Line 153
		    call 'erlang':'*'
			(_cor1, CosA)
		in  let <_cor8> =
			%% Line 153
			call 'erlang':'+'
			    (_cor3, _cor7)
		    in  let <X> =
			    %% Line 153
			    call 'erlang':'trunc'
				(_cor8)
			in  let <_cor10> =
				%% Line 154
				call 'erlang':'*'
				    (_cor1, SinA)
			    in  let <_cor11> =
				    %% Line 154
				    call 'erlang':'+'
					(_cor2, _cor10)
				in  let <Y> =
					%% Line 154
					call 'erlang':'trunc'
					    (_cor11)
				    in  do  %% Line 155
					    call 'gs':'create'
						('line', _cor4, [{'coords',[{_cor3,_cor2}|[{X,Y}|[]]]}|[]])
					    %% Line 156
					    {X,Y}
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('frac')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('frac', _cor0)
end