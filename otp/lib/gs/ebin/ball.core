module 'ball' ['init'/0,
	       'module_info'/0,
	       'module_info'/1,
	       'start'/0]
    attributes []
'start'/0 =
    %% Line 36
    fun () ->
	%% Line 37
	call 'erlang':'spawn'
	    ('ball', 'init', [])
'init'/0 =
    %% Line 39
    fun () ->
	let <I> =
	    %% Line 40
	    call 'gs':'start'
		()
	in  let <W> =
		%% Line 41
		call 'gs':'window'
		    (I, [{'title',[66|[97|[108|[108]]]]}|[{'width',300}|[{'height',300}|[{'map','true'}]]]])
	    in  let <C> =
		    %% Line 42
		    call 'gs':'canvas'
			(W, [{'width',300}|[{'height',300}|[{'bg','yellow'}]]])
		in  do  %% Line 43
			call 'gs':'button'
			    (W, [{'label',{'text',[81|[117|[105|[116|[32|[68|[101|[109|[111]]]]]]]]]}}|[{'x',100}]])
			let <Ball> =
			    %% Line 44
			    call 'gs':'oval'
				(C, [{'coords',[{0,0}|[{50,50}]]}|[{'fill','red'}]])
			in  %% Line 45
			    apply 'ball'/5
				(Ball, 0, 0, 5.50000000000000000000e+00, 4.09999999999999964473e+00)
'ball'/5 =
    %% Line 47
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 48
	case apply 'cc'/2
		 (_cor3, _cor1) of
	  <{NX,NDX}> when 'true' ->
	      %% Line 49
	      case apply 'cc'/2
		       (_cor2, _cor0) of
		<{NY,NDY}> when 'true' ->
		    do  %% Line 50
			call 'gs':'config'
			    (_cor4, {'move',{_cor1,_cor0}})
			do  %% Line 51
			    receive
			      %% Line 52
			      <{'gs',_cor12,'click',_cor13,_cor14}> when 'true' ->
				  call 'erlang':'exit'
				      ('normal')
			      %% Line 53
			      <{'gs',_cor15,'destroy',_cor16,_cor17}> when 'true' ->
				  call 'erlang':'exit'
				      ('normal')
			    after %% Line 54
				  20 ->
			      'ok'
			    %% Line 57
			    apply 'ball'/5
				(_cor4, NX, NY, NDX, NDY)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'cc'/2 =
    %% Line 59
    fun (_cor1,_cor0) ->
	%% Line 60
	case <> of
	  %% Line 61
	  <>
	      when call 'erlang':'>'
		    (_cor0,
		     0) ->
	      %% Line 62
	      case <> of
		%% Line 63
		<>
		    when call 'erlang':'=<'
			  (_cor1,
			   250) ->
		    let <_cor2> =
			%% Line 64
			call 'erlang':'+'
			    (_cor1, _cor0)
		    in  %% Line 64
			{_cor2,_cor0}
		%% Line 65
		<> when 'true' ->
		    let <_cor4> =
			%% Line 66
			call 'erlang':'-'
			    (_cor1, _cor0)
		    in  let <_cor3> =
			    %% Line 66
			    call 'erlang':'-'
				(_cor0)
			in  %% Line 66
			    {_cor4,_cor3}
	      end
	  %% Line 68
	  <>
	      when call 'erlang':'<'
		    (_cor0,
		     0) ->
	      %% Line 69
	      case <> of
		%% Line 70
		<>
		    when call 'erlang':'>='
			  (_cor1,
			   0) ->
		    let <_cor5> =
			%% Line 71
			call 'erlang':'+'
			    (_cor1, _cor0)
		    in  %% Line 71
			{_cor5,_cor0}
		%% Line 72
		<>
		    when call 'erlang':'<'
			  (_cor1,
			   0) ->
		    let <_cor7> =
			%% Line 73
			call 'erlang':'-'
			    (_cor1, _cor0)
		    in  let <_cor6> =
			    %% Line 73
			    call 'erlang':'-'
				(_cor0)
			in  %% Line 73
			    {_cor7,_cor6}
		( <> when 'true' ->
		      primop 'match_fail'
			  ('if_clause')
		  -| ['compiler_generated'] )
	      end
	  ( <> when 'true' ->
		primop 'match_fail'
		    ('if_clause')
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('ball')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('ball', _cor0)
end