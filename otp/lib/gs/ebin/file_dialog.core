module 'file_dialog' ['fs_init'/3,
		      'module_info'/0,
		      'module_info'/1,
		      'start'/0,
		      'start'/1,
		      'start'/2]
    attributes [%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}]]
'start'/0 =
    %% Line 38
    fun () ->
	%% Line 39
	case call 'file':'get_cwd'
		 () of
	  <{'ok',Dir}> when 'true' ->
	      %% Line 40
	      apply 'start'/2
		  (Dir, [])
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor0})
	    -| ['compiler_generated'] )
	end
'start'/1 =
    %% Line 42
    fun (_cor0) ->
	%% Line 43
	apply 'start'/2
	    (_cor0, [])
'start'/2 =
    %% Line 45
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 46
	    case call 'lists':'last'
		     (_cor1) of
	      %% Line 47
	      <47> when 'true' ->
		  _cor1
	      %% Line 48
	      <_cor9> when 'true' ->
		  call 'lists':'append'
		      (_cor1, [47])
	    end
	in  let <_cor5> =
		%% Line 50
		call 'erlang':'self'
		    ()
	    in  let <Pid> =
		    %% Line 50
		    call 'erlang':'spawn'
			('file_dialog', 'fs_init', [_cor3|[_cor0|[_cor5|[]]]])
		in  %% Line 51
		    receive
		      %% Line 52
		      <{'file_dialog',_cor10,Result}>
			  when call 'erlang':'=:='
				(_cor10,
				 Pid) ->
			  Result
		    after 'infinity' ->
		      'true'
'fs_init'/3 =
    %% Line 57
    fun (_cor2,_cor1,_cor0) ->
	let <S> =
	    %% Line 58
	    call 'gs':'start'
		()
	in  do  %% Line 59
		call 'gs':'create'
		    ('window', 'win', S, [{'width',250}|[{'height',265}|[{'title',[70|[105|[108|[101|[32|[68|[105|[97|[108|[111|[103]]]]]]]]]]]}|[{'configure','true'}]]]])
		do  %% Line 61
		    call 'gs':'create'
			('label', 'label', 'win', [{'y',0}|[{'width',250}|[{'label',{'text',_cor2}}|[]]]])
		    do  %% Line 62
			call 'gs':'label'
			    ('win', [{'width',50}|[{'y',30}|[{'x',5}|[{'label',{'text',[70|[105|[108|[101|[58]]]]]}}]]]])
			do  %% Line 63
			    call 'gs':'create'
				('entry', 'entry', 'win', [{'y',30}|[{'width',190}|[{'x',55}|[{'keypress','true'}|[{'focus','true'}]]]]])
			    do  %% Line 65
				call 'gs':'create'
				    ('listbox', 'lb', 'win', [{'x',5}|[{'y',60}|[{'width',160}|[{'height',199}|[{'vscroll','right'}|[{'click','true'}|[{'doubleclick','true'}]]]]]]])
				do  %% Line 67
				    call 'gs':'create'
					('button', 'ok', 'win', [{'label',{'text',[79|[75]]}}|[{'width',40}|[{'x',185}|[{'y',170}]]]])
				    do  %% Line 68
					call 'gs':'create'
					    ('button', 'cancel', 'win', [{'label',{'text',[67|[97|[110|[99|[101|[108]]]]]]}}|[{'x',175}|[{'y',220}|[{'width',65}]]]])
					let <Items> =
					    %% Line 69
					    apply 'refresh'/1
						(_cor2)
					in  do  %% Line 71
						case apply 'index_member'/2
							 (_cor1, Items) of
						  %% Line 72
						  <{'ok',Index}> when 'true' ->
						      do  %% Line 73
							  call 'gs':'config'
							      ('lb', {'selection','clear'})
							  %% Line 74
							  call 'gs':'config'
							      ('lb', {'selection',Index})
						  %% Line 75
						  <_cor9> when 'true' ->
						      'ok'
						end
						do  %% Line 77
						    call 'gs':'config'
							('win', {'map','true'})
						    %% Line 78
						    apply 'fs_loop'/2
							(_cor2, _cor0)
'fs_loop'/2 =
    %% Line 80
    fun (_cor1,_cor0) ->
	%% Line 81
	receive
	  %% Line 82
	  <{'gs','ok','click',_cor6,_cor7}> when 'true' ->
	      %% Line 83
	      apply 'entered_name'/2
		  (_cor1, _cor0)
	  %% Line 84
	  <{'gs','cancel','click',_cor8,_cor9}> when 'true' ->
	      let <_cor2> =
		  %% Line 85
		  call 'erlang':'self'
		      ()
	      in  %% Line 85
		  call 'erlang':'!'
		      (_cor0, {'file_dialog',_cor2,'cancel'})
	  %% Line 86
	  <{'gs','entry','keypress',_cor10,['Return'|_cor11]}> when 'true' ->
	      %% Line 87
	      apply 'entered_name'/2
		  (_cor1, _cor0)
	  %% Line 88
	  <{'gs','entry','keypress',_cor12,[_X_Keysym|_cor13]}> when 'true' ->
	      %% Line 89
	      apply 'fs_loop'/2
		  (_cor1, _cor0)
	  %% Line 90
	  <{'gs','lb','click',_cor14,_cor15}> when 'true' ->
	      %% Line 91
	      apply 'clicked'/2
		  (_cor1, _cor0)
	  %% Line 92
	  <{'gs','lb','doubleclick',_cor16,_cor17}> when 'true' ->
	      %% Line 93
	      apply 'double_clicked'/2
		  (_cor1, _cor0)
	  %% Line 94
	  <{'gs','win','configure',_cor18,[250|[265|_cor19]]}> when 'true' ->
	      %% Line 95
	      apply 'fs_loop'/2
		  (_cor1, _cor0)
	  %% Line 96
	  <{'gs','win','configure',_cor20,_cor21}> when 'true' ->
	      do  %% Line 97
		  call 'gs':'config'
		      ('win', [{'geometry',{250,265}}])
		  %% Line 98
		  apply 'fs_loop'/2
		      (_cor1, _cor0)
	  %% Line 99
	  <'stop'> when 'true' ->
	      %% Line 100
	      call 'erlang':'exit'
		  ('normal')
	  %% Line 101
	  <{'gs',_cor22,'destroy',_cor23,_cor24}> when 'true' ->
	      let <_cor3> =
		  %% Line 102
		  call 'erlang':'self'
		      ()
	      in  %% Line 102
		  call 'erlang':'!'
		      (_cor0, {'file_dialog',_cor3,'cancel'})
	  %% Line 103
	  <X> when 'true' ->
	      do  %% Line 104
		  call 'io':'format'
		      ([102|[105|[108|[101|[95|[100|[105|[97|[108|[111|[103|[58|[32|[103|[111|[116|[32|[111|[116|[104|[101|[114|[58|[32|[126|[119|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [X|[]])
		  %% Line 105
		  apply 'fs_loop'/2
		      (_cor1, _cor0)
	after 'infinity' ->
	  'true'
'refresh'/1 =
    %% Line 110
    fun (_cor0) ->
	do  %% Line 111
	    call 'gs':'config'
		('lb', 'clear')
	    do  %% Line 112
		call 'gs':'config'
		    ('label', {'label',{'text',_cor0}})
		do  %% Line 113
		    call 'gs':'config'
			('entry', {'text',[]})
		    let <_cor1> =
			%% Line 114
			apply 'get_files'/1
			    (_cor0)
		    in  let <Items> =
			    %% Line 114
			    [[46|[46|[47]]]|_cor1]
			in  do  %% Line 115
				call 'gs':'config'
				    ('lb', [{'items',Items}|[]])
				%% Line 116
				Items
'entered_name'/2 =
    %% Line 119
    fun (_cor1,_cor0) ->
	let <File> =
	    %% Line 120
	    call 'gs':'read'
		('entry', 'text')
	in  %% Line 121
	    case apply 'check_file'/2
		     (_cor1, File) of
	      %% Line 122
	      <{'file',Dir2,File2}> when 'true' ->
		  let <_cor3> =
		      %% Line 123
		      call 'erlang':'self'
			  ()
		  in  %% Line 123
		      call 'erlang':'!'
			  (_cor0, {'file_dialog',_cor3,{'ok',Dir2,File2}})
	      %% Line 124
	      <{'dir',Dir2}> when 'true' ->
		  do  %% Line 125
		      apply 'refresh'/1
			  (Dir2)
		      %% Line 126
		      apply 'fs_loop'/2
			  (Dir2, _cor0)
	      %% Line 127
	      <{'error','no_file'}> when 'true' ->
		  %% Line 128
		  apply 'double_clicked'/2
		      (_cor1, _cor0)
	      %% Line 129
	      <_cor7> when 'true' ->
		  %% Line 130
		  apply 'fs_loop'/2
		      (_cor1, _cor0)
	    end
'clicked'/2 =
    %% Line 134
    fun (_cor1,_cor0) ->
	%% Line 135
	case call 'gs':'read'
		 ('lb', 'selection') of
	  <[Idx|_cor7]> when 'true' ->
	      let <File> =
		  %% Line 136
		  call 'gs':'read'
		      ('lb', {'get',Idx})
	      in  do  %% Line 137
		      case call 'lists':'last'
			       (File) of
			%% Line 138
			<47> when 'true' ->
			    'ok'
			%% Line 140
			<_cor8> when 'true' ->
			    %% Line 141
			    call 'gs':'config'
				('entry', {'text',File})
		      end
		      %% Line 143
		      apply 'fs_loop'/2
			  (_cor1, _cor0)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'double_clicked'/2 =
    %% Line 146
    fun (_cor1,_cor0) ->
	%% Line 147
	case call 'gs':'read'
		 ('lb', 'selection') of
	  %% Line 148
	  <[0]> when 'true' ->
	      let <NewDir> =
		  %% Line 149
		  apply 'up_one_dir'/1
		      (_cor1)
	      in  do  %% Line 150
		      apply 'refresh'/1
			  (NewDir)
		      %% Line 151
		      apply 'fs_loop'/2
			  (NewDir, _cor0)
	  %% Line 152
	  <[]> when 'true' ->
	      %% Line 153
	      apply 'fs_loop'/2
		  (_cor1, _cor0)
	  %% Line 154
	  <[Idx|[]]> when 'true' ->
	      let <File> =
		  %% Line 155
		  call 'gs':'read'
		      ('lb', {'get',Idx})
	      in  %% Line 156
		  case call 'lists':'last'
			   (File) of
		    %% Line 157
		    <47> when 'true' ->
			let <NewDir> =
			    %% Line 158
			    call 'lists':'append'
				(_cor1, File)
			in  do  %% Line 159
				apply 'refresh'/1
				    (NewDir)
				%% Line 160
				apply 'fs_loop'/2
				    (NewDir, _cor0)
		    %% Line 161
		    <_cor10> when 'true' ->
			let <_cor5> =
			    %% Line 162
			    call 'erlang':'self'
				()
			in  %% Line 162
			    call 'erlang':'!'
				(_cor0, {'file_dialog',_cor5,{'ok',_cor1,File}})
		  end
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'check_file'/2 =
    %% Line 171
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    catch
		%% Line 172
		call 'lists':'last'
		    (_cor0)
	in  %% Line 172
	    case _cor2 of
	      %% Line 173
	      <47> when 'true' ->
		  let <_cor4> =
		      %% Line 174
		      case _cor0 of
			%% Line 175
			<[47|_cor18]> when 'true' ->
			    _cor0
			%% Line 177
			<_cor19> when 'true' ->
			    %% Line 178
			    call 'lists':'append'
				(_cor1, _cor0)
		      end
		  in  %% Line 180
		      case call 'file':'list_dir'
			       (_cor4) of
			%% Line 181
			<{'ok',_cor20}> when 'true' ->
			    {'dir',_cor4}
			%% Line 182
			<_cor21> when 'true' ->
			    {'error','bad_dir'}
		      end
	      %% Line 184
	      <{'EXIT',_X_Why}> when 'true' ->
		  {'error','no_file'}
	      %% Line 185
	      <_cor22> when 'true' ->
		  let <Words> =
		      %% Line 186
		      call 'string':'tokens'
			  (_cor0, [47|[92]])
		  in  let <NewFile> =
			  %% Line 187
			  call 'lists':'last'
			      (Words)
		      in  let <_cor11> =
			      %% Line 188
			      case _cor0 of
				%% Line 189
				<[47|_cor23]> when 'true' ->
				    %% Line 190
				    apply 'up_one_dir'/1
					(_cor0)
				%% Line 191
				<_cor24> when 'true' ->
				    %% Line 192
				    case apply 'up_one_dir'/1
					     (_cor0) of
				      %% Line 193
				      <[47]> when 'true' ->
					  _cor1
				      %% Line 194
				      <[47|SubDir]> when 'true' ->
					  call 'lists':'flatten'
					      ([_cor1|[SubDir|[47]]])
				      ( <_cor9> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor9})
					-| ['compiler_generated'] )
				    end
			      end
			  in  let <_cor13> =
				  %% Line 197
				  call 'lists':'append'
				      (_cor11, NewFile)
			      in  %% Line 197
				  case call 'file':'read_file_info'
					   (_cor13) of
				    %% Line 198
				    <{'ok',_cor25}> when 'true' ->
					%% Line 199
					{'file',_cor11,NewFile}
				    %% Line 200
				    <_cor26> when 'true' ->
					%% Line 201
					{'error','bad_file'}
				  end
	    end
'get_files'/1 =
    %% Line 206
    fun (_cor0) ->
	%% Line 207
	case call 'file':'list_dir'
		 (_cor0) of
	  <{'ok',Files}> when 'true' ->
	      let <_cor2> =
		  %% Line 208
		  call 'lists':'sort'
		      (Files)
	      in  %% Line 208
		  apply 'add_slash'/2
		      (_cor0, _cor2)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'add_slash'/2 =
    %% Line 210
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor15,[]> when 'true' ->
	      []
	  %% Line 211
	  <Dir,[H|T]> when 'true' ->
	      let <_cor2> =
		  %% Line 212
		  call 'lists':'append'
		      (Dir, [47|H])
	      in  %% Line 212
		  case call 'file':'read_file_info'
			   (_cor2) of
		    %% Line 213
		    <{'ok',FI = {'file_info',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28}}>
			when call 'erlang':'=:='
			      (_cor17,
			       'directory') ->
			let <_cor9> =
			    %% Line 214
			    call 'lists':'append'
				(H, [47])
			in  let <_cor10> =
				%% Line 214
				apply 'add_slash'/2
				    (Dir, T)
			    in  %% Line 214
				[_cor9|_cor10]
		    %% Line 215
		    <_cor29> when 'true' ->
			let <_cor11> =
			    %% Line 216
			    apply 'add_slash'/2
				(Dir, T)
			in  %% Line 216
			    [H|_cor11]
		  end
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'add_slash',2}}] )
	    -| ['compiler_generated'] )
	end
'index_member'/2 =
    %% Line 238
    fun (_cor1,_cor0) ->
	%% Line 239
	apply 'i_m'/3
	    (0, _cor1, _cor0)
'i_m'/3 =
    %% Line 241
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <N,Item,[_cor7|_X_List]>
	      when call 'erlang':'=:='
		    (_cor7,
		     Item) ->
	      %% Line 242
	      {'ok',N}
	  %% Line 243
	  <N,Item,[_cor8|List]> when 'true' ->
	      let <_cor3> =
		  %% Line 244
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 244
		  apply 'i_m'/3
		      (_cor3, Item, List)
	  %% Line 245
	  <_X_N,_X_Item,[]> when 'true' ->
	      %% Line 246
	      'false'
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'i_m',3}}] )
	    -| ['compiler_generated'] )
	end
'up_one_dir'/1 =
    %% Line 248
    fun (_cor0) ->
	let <L> =
	    %% Line 249
	    call 'string':'tokens'
		(_cor0, [47|[92]])
	in  let <_cor2> =
		%% Line 250
		apply 'rem_last'/1
		    (L)
	    in  %% Line 250
		call 'lists':'flatten'
		    (_cor2)
'rem_last'/1 =
    %% Line 252
    fun (_cor0) ->
	case _cor0 of
	  <[_X_Last|[]]> when 'true' ->
	      %% Line 253
	      [47]
	  %% Line 254
	  <[Head|Tail]> when 'true' ->
	      let <_cor1> =
		  %% Line 255
		  apply 'rem_last'/1
		      (Tail)
	      in  %% Line 255
		  [47|[Head|_cor1]]
	  %% Line 256
	  <[]> when 'true' ->
	      %% Line 257
	      [47]
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'rem_last',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('file_dialog')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('file_dialog', _cor0)
end