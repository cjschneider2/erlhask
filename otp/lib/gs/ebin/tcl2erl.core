module 'tcl2erl' ['module_info'/0,
		  'module_info'/1,
		  'parse_event'/1,
		  'ret_atom'/1,
		  'ret_bool'/1,
		  'ret_color'/1,
		  'ret_enable'/1,
		  'ret_file'/1,
		  'ret_focus'/2,
		  'ret_height'/1,
		  'ret_iconified'/1,
		  'ret_int'/1,
		  'ret_label'/1,
		  'ret_list'/1,
		  'ret_mapped'/1,
		  'ret_pack'/2,
		  'ret_place'/2,
		  'ret_stipple'/1,
		  'ret_str'/1,
		  'ret_str_list'/1,
		  'ret_tuple'/1,
		  'ret_width'/1,
		  'ret_x'/1,
		  'ret_y'/1]
    attributes []
'parse_event'/1 =
    %% Line 61
    fun (_cor0) ->
	%% Line 62
	case apply 'first_word'/1
		 (_cor0) of
	  <{[35|ID],Cont1}> when 'true' ->
	      %% Line 63
	      case apply 'first_word'/1
		       (Cont1) of
		<{Etag,Cont}> when 'true' ->
		    %% Line 64
		    case apply 'scan'/1
			     (Cont) of
		      <{'tokens',Toks}> when 'true' ->
			  %% Line 65
			  case apply 'parse_term_seq'/1
				   (Toks) of
			    <{'term_seq',Args}> when 'true' ->
				let <_cor5> =
				    %% Line 66
				    call 'erlang':'list_to_integer'
					(ID)
				in  %% Line 66
				    {_cor5,Etag,Args}
			    ( <_cor4> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor4})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'first_word'/1 =
    %% Line 70
    fun (_cor0) ->
	%% Line 71
	apply 'fw'/2
	    (_cor0, [])
'fw'/2 =
    %% Line 73
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Ack> when 'true' ->
	      let <_cor2> =
		  %% Line 74
		  call 'lists':'reverse'
		      (Ack)
	      in  %% Line 74
		  {_cor2,[]}
	  %% Line 75
	  <[32|R],Ack> when 'true' ->
	      let <_cor3> =
		  %% Line 76
		  call 'lists':'reverse'
		      (Ack)
	      in  %% Line 76
		  {_cor3,R}
	  %% Line 77
	  <[Char|R],Ack> when 'true' ->
	      %% Line 78
	      apply 'fw'/2
		  (R, [Char|Ack])
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'fw',2}}] )
	    -| ['compiler_generated'] )
	end
'str_to_term'/1 =
    %% Line 92
    fun (_cor0) ->
	%% Line 93
	case apply 'scan'/1
		 (_cor0) of
	  <{'tokens',Tokens}> when 'true' ->
	      let <_cor2> =
		  catch
		      %% Line 94
		      apply 'parse_term'/1
			  (Tokens)
	      in  %% Line 94
		  case _cor2 of
		    %% Line 95
		    <{_X_Type,Term,[]}> when 'true' ->
			{'term',Term}
		    %% Line 96
		    <_cor5> when 'true' ->
			{'string',_cor0}
		  end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'parse_term'/1 =
    %% Line 113
    fun (_cor0) ->
	case _cor0 of
	  <[{'var',Var}|R]> when 'true' ->
	      {'var',Var,R}
	  %% Line 114
	  <[{'atom',Atom}|R]> when 'true' ->
	      {'atom',Atom,R}
	  %% Line 115
	  <[{'float',Float}|R]> when 'true' ->
	      {'float',Float,R}
	  %% Line 116
	  <[{'integer',Integer}|R]> when 'true' ->
	      {'integer',Integer,R}
	  %% Line 117
	  <[{'string',String}|R]> when 'true' ->
	      {'string',String,R}
	  %% Line 118
	  <['-'|[{'integer',Integer}|R]]> when 'true' ->
	      let <_cor1> =
		  call 'erlang':'-'
		      (Integer)
	      in  {'integer',_cor1,R}
	  %% Line 119
	  <['-'|[{'float',Float}|R]]> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'-'
		      (Float)
	      in  {'float',_cor2,R}
	  %% Line 120
	  <['+'|[{'integer',Integer}|R]]> when 'true' ->
	      {'integer',Integer,R}
	  %% Line 121
	  <['+'|[{'float',Float}|R]]> when 'true' ->
	      {'float',Float,R}
	  %% Line 122
	  <['['|R]> when 'true' ->
	      let <_cor6> =
		  apply 'parse_list'/1
		      (['['|R])
	      in  case _cor6 of
		    <{'list',_X_Term,_X_C}> when 'true' ->
			( _cor6
			  -| ['compiler_generated'] )
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	  %% Line 123
	  <['{'|R]> when 'true' ->
	      let <_cor7> =
		  apply 'parse_tuple'/1
		      (['{'|R])
	      in  case _cor7 of
		    <{'tuple',_X_Term,_X_C}> when 'true' ->
			( _cor7
			  -| ['compiler_generated'] )
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 124
	  <[Char|R]> when 'true' ->
	      {'char',Char,R}
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'parse_term',1}}] )
	    -| ['compiler_generated'] )
	end
'parse_list'/1 =
    %% Line 127
    fun (_cor0) ->
	case _cor0 of
	  <['['|[']'|C]]> when 'true' ->
	      %% Line 128
	      {'list',[],C}
	  %% Line 129
	  <['['|R]> when 'true' ->
	      let <_cor3> =
		  %% Line 130
		  apply 'list_args'/2
		      (R, [])
	      in  %% Line 130
		  case _cor3 of
		    <{'list',_X_List,_X_C}> when 'true' ->
			( _cor3
			  -| ['compiler_generated'] )
		    ( <_cor1> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor1})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'parse_list',1}}] )
	    -| ['compiler_generated'] )
	end
'list_args'/2 =
    %% Line 132
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 133
	    apply 'parse_term'/1
		(_cor1)
	in  %% Line 133
	    apply 'cont_list'/2
		(_cor2, _cor0)
'cont_list'/2 =
    %% Line 135
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{_X_Tag,Term,[','|C]},Ack> when 'true' ->
	      %% Line 136
	      apply 'list_args'/2
		  (C, [Term|Ack])
	  %% Line 137
	  <{_X_Tag,Term,[']'|C]},Ack> when 'true' ->
	      let <_cor2> =
		  %% Line 138
		  call 'lists':'reverse'
		      ([Term|Ack])
	      in  %% Line 138
		  {'list',_cor2,C}
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'cont_list',2}}] )
	    -| ['compiler_generated'] )
	end
'parse_tuple'/1 =
    %% Line 141
    fun (_cor0) ->
	case _cor0 of
	  <['{'|['}'|C]]> when 'true' ->
	      %% Line 142
	      {'tuple',{},C}
	  %% Line 143
	  <['{'|R]> when 'true' ->
	      let <_cor3> =
		  %% Line 144
		  apply 'tuple_args'/2
		      (R, [])
	      in  %% Line 144
		  case _cor3 of
		    <{'tuple',_X_Tuple,_X_C}> when 'true' ->
			( _cor3
			  -| ['compiler_generated'] )
		    ( <_cor1> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor1})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'parse_tuple',1}}] )
	    -| ['compiler_generated'] )
	end
'tuple_args'/2 =
    %% Line 146
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 147
	    apply 'parse_term'/1
		(_cor1)
	in  %% Line 147
	    apply 'cont_tuple'/2
		(_cor2, _cor0)
'cont_tuple'/2 =
    %% Line 149
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{_X_Tag,Term,[','|C]},Ack> when 'true' ->
	      %% Line 150
	      apply 'tuple_args'/2
		  (C, [Term|Ack])
	  %% Line 151
	  <{_X_Tag,Term,['}'|C]},Ack> when 'true' ->
	      let <_cor2> =
		  %% Line 152
		  call 'lists':'reverse'
		      ([Term|Ack])
	      in  let <_cor3> =
		      %% Line 152
		      call 'erlang':'list_to_tuple'
			  (_cor2)
		  in  %% Line 152
		      {'tuple',_cor3,C}
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'cont_tuple',2}}] )
	    -| ['compiler_generated'] )
	end
'parse_term_seq'/1 =
    %% Line 155
    fun (_cor0) ->
	%% Line 156
	apply 'p_term_seq'/2
	    (_cor0, [])
'p_term_seq'/2 =
    %% Line 158
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Ack> when 'true' ->
	      let <_cor2> =
		  %% Line 159
		  call 'lists':'reverse'
		      (Ack)
	      in  %% Line 159
		  {'term_seq',_cor2}
	  %% Line 160
	  <Toks,Ack> when 'true' ->
	      %% Line 161
	      case apply 'parse_term'/1
		       (Toks) of
		<{_X_Type,Term,C}> when 'true' ->
		    %% Line 162
		    apply 'p_term_seq'/2
			(C, [Term|Ack])
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	end
'scan'/1 =
    %% Line 169
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 170
	    apply 'scan'/2
		(_cor0, [])
	in  %% Line 170
	    {'tokens',_cor1}
'scan'/2 =
    %% Line 172
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Ack> when 'true' ->
	      %% Line 173
	      call 'lists':'reverse'
		  (Ack)
	  %% Line 174
	  <[32|R],Ack> when 'true' ->
	      %% Line 175
	      apply 'scan'/2
		  (R, Ack)
	  %% Line 176
	  <[X|R],Ack>
	      when try
		    let <_cor2> =
			call 'erlang':'is_integer'
			    (X)
		    in  let <_cor3> =
			    call 'erlang':'>='
				(X, 97)
			in  let <_cor4> =
				call 'erlang':'=<'
				    (X, 122)
			    in  let <_cor5> =
				    call 'erlang':'and'
					(_cor3, _cor4)
				in  call 'erlang':'and'
					(_cor2, _cor5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 177
	      apply 'scan_atom'/3
		  (R, [X|[]], Ack)
	  %% Line 178
	  <[X|R],Ack>
	      when try
		    let <_cor6> =
			call 'erlang':'is_integer'
			    (X)
		    in  let <_cor7> =
			    call 'erlang':'>='
				(X, 65)
			in  let <_cor8> =
				call 'erlang':'=<'
				    (X, 90)
			    in  let <_cor9> =
				    call 'erlang':'and'
					(_cor7, _cor8)
				in  call 'erlang':'and'
					(_cor6, _cor9)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 179
	      apply 'scan_var'/3
		  (R, [X|[]], Ack)
	  %% Line 180
	  <[X|R],Ack>
	      when try
		    let <_cor10> =
			call 'erlang':'is_integer'
			    (X)
		    in  let <_cor11> =
			    call 'erlang':'>='
				(X, 48)
			in  let <_cor12> =
				call 'erlang':'=<'
				    (X, 57)
			    in  let <_cor13> =
				    call 'erlang':'and'
					(_cor11, _cor12)
				in  call 'erlang':'and'
					(_cor10, _cor13)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 181
	      apply 'scan_number'/3
		  (R, [X|[]], Ack)
	  %% Line 182
	  <[34|R],Ack> when 'true' ->
	      %% Line 183
	      apply 'scan_string'/3
		  (R, [], Ack)
	  %% Line 184
	  <[X|R],Ack>
	      when call 'erlang':'is_integer'
		    (X) ->
	      let <_cor14> =
		  %% Line 185
		  call 'erlang':'list_to_atom'
		      ([X|[]])
	      in  %% Line 185
		  apply 'scan'/2
		      (R, [_cor14|Ack])
	  ( <_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15})
		  -| [{'function_name',{'scan',2}}] )
	    -| ['compiler_generated'] )
	end
'scan_atom'/3 =
    %% Line 187
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[X|R],Ack1,Ack2>
	      when try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (X)
		    in  let <_cor4> =
			    call 'erlang':'>='
				(X, 97)
			in  let <_cor5> =
				call 'erlang':'=<'
				    (X, 122)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 188
	      apply 'scan_atom'/3
		  (R, [X|Ack1], Ack2)
	  %% Line 189
	  <[X|R],Ack1,Ack2>
	      when try
		    let <_cor7> =
			call 'erlang':'is_integer'
			    (X)
		    in  let <_cor8> =
			    call 'erlang':'>='
				(X, 65)
			in  let <_cor9> =
				call 'erlang':'=<'
				    (X, 90)
			    in  let <_cor10> =
				    call 'erlang':'and'
					(_cor8, _cor9)
				in  call 'erlang':'and'
					(_cor7, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 190
	      apply 'scan_atom'/3
		  (R, [X|Ack1], Ack2)
	  %% Line 191
	  <[X|R],Ack1,Ack2>
	      when try
		    let <_cor11> =
			call 'erlang':'is_integer'
			    (X)
		    in  let <_cor12> =
			    call 'erlang':'>='
				(X, 48)
			in  let <_cor13> =
				call 'erlang':'=<'
				    (X, 57)
			    in  let <_cor14> =
				    call 'erlang':'and'
					(_cor12, _cor13)
				in  call 'erlang':'and'
					(_cor11, _cor14)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 192
	      apply 'scan_atom'/3
		  (R, [X|Ack1], Ack2)
	  %% Line 193
	  <[95|R],Ack1,Ack2> when 'true' ->
	      %% Line 194
	      apply 'scan_atom'/3
		  (R, [95|Ack1], Ack2)
	  %% Line 195
	  <L,Ack1,Ack2> when 'true' ->
	      let <_cor15> =
		  %% Line 196
		  call 'lists':'reverse'
		      (Ack1)
	      in  let <_cor16> =
		      %% Line 196
		      call 'erlang':'list_to_atom'
			  (_cor15)
		  in  %% Line 196
		      apply 'scan'/2
			  (L, [{'atom',_cor16}|Ack2])
	end
'scan_var'/3 =
    %% Line 198
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[X|R],Ack1,Ack2>
	      when try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (X)
		    in  let <_cor4> =
			    call 'erlang':'>='
				(X, 97)
			in  let <_cor5> =
				call 'erlang':'=<'
				    (X, 122)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 199
	      apply 'scan_var'/3
		  (R, [X|Ack1], Ack2)
	  %% Line 200
	  <[X|R],Ack1,Ack2>
	      when try
		    let <_cor7> =
			call 'erlang':'is_integer'
			    (X)
		    in  let <_cor8> =
			    call 'erlang':'>='
				(X, 65)
			in  let <_cor9> =
				call 'erlang':'=<'
				    (X, 90)
			    in  let <_cor10> =
				    call 'erlang':'and'
					(_cor8, _cor9)
				in  call 'erlang':'and'
					(_cor7, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 201
	      apply 'scan_var'/3
		  (R, [X|Ack1], Ack2)
	  %% Line 202
	  <[X|R],Ack1,Ack2>
	      when try
		    let <_cor11> =
			call 'erlang':'is_integer'
			    (X)
		    in  let <_cor12> =
			    call 'erlang':'>='
				(X, 48)
			in  let <_cor13> =
				call 'erlang':'=<'
				    (X, 57)
			    in  let <_cor14> =
				    call 'erlang':'and'
					(_cor12, _cor13)
				in  call 'erlang':'and'
					(_cor11, _cor14)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 203
	      apply 'scan_var'/3
		  (R, [X|Ack1], Ack2)
	  %% Line 204
	  <[95|R],Ack1,Ack2> when 'true' ->
	      %% Line 205
	      apply 'scan_var'/3
		  (R, [95|Ack1], Ack2)
	  %% Line 206
	  <L,Ack1,Ack2> when 'true' ->
	      let <_cor15> =
		  %% Line 207
		  call 'lists':'reverse'
		      (Ack1)
	      in  let <_cor16> =
		      %% Line 207
		      call 'erlang':'list_to_atom'
			  (_cor15)
		  in  %% Line 207
		      apply 'scan'/2
			  (L, [{'var',_cor16}|Ack2])
	end
'scan_number'/3 =
    %% Line 209
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[X|R],Ack1,Ack2>
	      when try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (X)
		    in  let <_cor4> =
			    call 'erlang':'>='
				(X, 48)
			in  let <_cor5> =
				call 'erlang':'=<'
				    (X, 57)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 210
	      apply 'scan_number'/3
		  (R, [X|Ack1], Ack2)
	  %% Line 211
	  <[46|R],Ack1,Ack2> when 'true' ->
	      %% Line 212
	      apply 'scan_float'/3
		  (R, [46|Ack1], Ack2)
	  %% Line 213
	  <L,Ack1,Ack2> when 'true' ->
	      let <_cor7> =
		  %% Line 214
		  call 'lists':'reverse'
		      (Ack1)
	      in  let <_cor8> =
		      %% Line 214
		      call 'erlang':'list_to_integer'
			  (_cor7)
		  in  %% Line 214
		      apply 'scan'/2
			  (L, [{'integer',_cor8}|Ack2])
	end
'scan_float'/3 =
    %% Line 216
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[X|R],Ack1,Ack2>
	      when try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (X)
		    in  let <_cor4> =
			    call 'erlang':'>='
				(X, 48)
			in  let <_cor5> =
				call 'erlang':'=<'
				    (X, 57)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 217
	      apply 'scan_float'/3
		  (R, [X|Ack1], Ack2)
	  %% Line 218
	  <L,Ack1,Ack2> when 'true' ->
	      let <_cor7> =
		  %% Line 219
		  call 'lists':'reverse'
		      (Ack1)
	      in  let <Float> =
		      %% Line 219
		      call 'erlang':'list_to_float'
			  (_cor7)
		  in  let <Int> =
			  %% Line 220
			  call 'erlang':'trunc'
			      (Float)
		      in  %% Line 221
			  case <> of
			    %% Line 222
			    <>
				when call 'erlang':'=='
				      (Int,
				       Float) ->
				%% Line 223
				apply 'scan'/2
				    (L, [{'integer',Int}|Ack2])
			    %% Line 224
			    <> when 'true' ->
				%% Line 225
				apply 'scan'/2
				    (L, [{'float',Float}|Ack2])
			  end
	end
'scan_string'/3 =
    %% Line 229
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[34|R],Ack1,Ack2> when 'true' ->
	      let <_cor3> =
		  %% Line 230
		  call 'lists':'reverse'
		      (Ack1)
	      in  %% Line 230
		  apply 'scan'/2
		      (R, [{'string',_cor3}|Ack2])
	  %% Line 231
	  <[X|R],Ack1,Ack2>
	      when call 'erlang':'is_integer'
		    (X) ->
	      %% Line 232
	      apply 'scan_string'/3
		  (R, [X|Ack1], Ack2)
	  %% Line 233
	  <[],_X_Ack1,_X_Ack2> when 'true' ->
	      %% Line 234
	      call 'erlang':'throw'
		  ({'error',[117|[110|[116|[101|[114|[109|[105|[110|[97|[116|[101|[100|[32|[115|[116|[114|[105|[110|[103|[46]]]]]]]]]]]]]]]]]]]]})
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'scan_string',3}}] )
	    -| ['compiler_generated'] )
	end
'ret_int'/1 =
    %% Line 241
    fun (_cor0) ->
	%% Line 242
	case call 'gstk':'call'
		 (_cor0) of
	  %% Line 243
	  <{'result',Result}> when 'true' ->
	      %% Line 244
	      case apply 'str_to_term'/1
		       (Result) of
		<{_cor4,Value}> when 'true' ->
		    %% Line 245
		    Value
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 246
	  <Bad_result> when 'true' ->
	      Bad_result
	end
'ret_atom'/1 =
    %% Line 249
    fun (_cor0) ->
	%% Line 250
	case call 'gstk':'call'
		 (_cor0) of
	  %% Line 251
	  <{'result',Result}> when 'true' ->
	      %% Line 252
	      case apply 'str_to_term'/1
		       (Result) of
		<{_cor4,Value}> when 'true' ->
		    %% Line 253
		    Value
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 254
	  <Bad_result> when 'true' ->
	      Bad_result
	end
'ret_str'/1 =
    %% Line 257
    fun (_cor0) ->
	%% Line 258
	case call 'gstk':'call'
		 (_cor0) of
	  %% Line 259
	  <{'result',Val}> when 'true' ->
	      Val
	  %% Line 260
	  <Bad_result> when 'true' ->
	      Bad_result
	end
'ret_tuple'/1 =
    %% Line 263
    fun (_cor0) ->
	%% Line 264
	case call 'gstk':'call'
		 (_cor0) of
	  %% Line 265
	  <{'result',S}> when 'true' ->
	      %% Line 266
	      case apply 'scan'/1
		       (S) of
		<{'tokens',Toks}> when 'true' ->
		    %% Line 267
		    case apply 'parse_term_seq'/1
			     (Toks) of
		      <{'term_seq',Seq}> when 'true' ->
			  %% Line 268
			  call 'erlang':'list_to_tuple'
			      (Seq)
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 269
	  <Bad_result> when 'true' ->
	      Bad_result
	end
'ret_pack'/2 =
    %% Line 275
    fun (_cor1,_cor0) ->
	let <Str> =
	    %% Line 276
	    apply 'ret_list'/1
		([[112|[97|[99|[107|[32|[105|[110|[102|[111|[32]]]]]]]]]]|[_cor0|[]]])
	in  %% Line 277
	    apply 'pick_out'/2
		(Str, _cor1)
'ret_place'/2 =
    %% Line 279
    fun (_cor1,_cor0) ->
	let <Str> =
	    %% Line 280
	    apply 'ret_list'/1
		([[112|[108|[97|[99|[101|[32|[105|[110|[102|[111|[32]]]]]]]]]]]|[_cor0|[]]])
	in  %% Line 281
	    apply 'pick_out'/2
		(Str, _cor1)
'pick_out'/2 =
    %% Line 283
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Key|[Value|_X_Rest]],_cor4>
	      when call 'erlang':'=:='
		    (_cor4,
		     Key) ->
	      Value
	  %% Line 284
	  <[Key|[{}|_X_Rest]],_cor5>
	      when call 'erlang':'=:='
		    (_cor5,
		     Key) ->
	      0
	  %% Line 285
	  <['-'|Rest],Key> when 'true' ->
	      apply 'pick_out'/2
		  (Rest, Key)
	  %% Line 286
	  <[_cor6|[_cor7|Rest]],Key> when 'true' ->
	      apply 'pick_out'/2
		  (Rest, Key)
	  %% Line 287
	  <Other,_X_Key> when 'true' ->
	      Other
	end
'ret_x'/1 =
    %% Line 290
    fun (_cor0) ->
	%% Line 291
	case apply 'ret_geometry'/1
		 (_cor0) of
	  %% Line 292
	  <{_X_W,_X_H,X,_X_Y}> when 'true' ->
	      X
	  %% Line 293
	  <Other> when 'true' ->
	      Other
	end
'ret_y'/1 =
    %% Line 296
    fun (_cor0) ->
	%% Line 297
	case apply 'ret_geometry'/1
		 (_cor0) of
	  %% Line 298
	  <{_X_W,_X_H,_X_X,Y}> when 'true' ->
	      Y
	  %% Line 299
	  <Other> when 'true' ->
	      Other
	end
'ret_width'/1 =
    %% Line 302
    fun (_cor0) ->
	%% Line 303
	case apply 'ret_geometry'/1
		 (_cor0) of
	  %% Line 304
	  <{W,_X_H,_X_X,_X_Y}> when 'true' ->
	      W
	  %% Line 305
	  <Other> when 'true' ->
	      Other
	end
'ret_height'/1 =
    %% Line 308
    fun (_cor0) ->
	%% Line 309
	case apply 'ret_geometry'/1
		 (_cor0) of
	  %% Line 310
	  <{_X_W,H,_X_X,_X_Y}> when 'true' ->
	      H
	  %% Line 311
	  <Other> when 'true' ->
	      Other
	end
'ret_geometry'/1 =
    %% Line 316
    fun (_cor0) ->
	%% Line 317
	case apply 'ret_tuple'/1
		 (_cor0) of
	  %% Line 318
	  <{W,H,X,Y}>
	      when call 'erlang':'is_atom'
		    (H) ->
	      %% Line 319
	      case call 'erlang':'atom_to_list'
		       (H) of
		<[_cor5|Height]> when 'true' ->
		    let <_cor2> =
			%% Line 320
			call 'erlang':'list_to_integer'
			    (Height)
		    in  %% Line 320
			{W,_cor2,X,Y}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 321
	  <Other> when 'true' ->
	      Other
	end
'ret_list'/1 =
    %% Line 324
    fun (_cor0) ->
	%% Line 325
	case call 'gstk':'call'
		 (_cor0) of
	  %% Line 326
	  <{'result',S}> when 'true' ->
	      %% Line 327
	      case apply 'scan'/1
		       (S) of
		<{'tokens',Toks}> when 'true' ->
		    %% Line 328
		    case apply 'parse_term_seq'/1
			     (Toks) of
		      <{'term_seq',Seq}> when 'true' ->
			  %% Line 329
			  Seq
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 330
	  <Bad_result> when 'true' ->
	      Bad_result
	end
'ret_str_list'/1 =
    %% Line 333
    fun (_cor0) ->
	%% Line 334
	case call 'gstk':'call'
		 (_cor0) of
	  %% Line 335
	  <{'result',S}> when 'true' ->
	      %% Line 336
	      apply 'mk_quotes0'/2
		  (S, [])
	  %% Line 337
	  <Bad_result> when 'true' ->
	      Bad_result
	end
'ret_label'/1 =
    %% Line 341
    fun (_cor0) ->
	%% Line 342
	case apply 'ret_str_list'/1
		 (_cor0) of
	  %% Line 343
	  <[[]|[[64|Img]|[]]]> when 'true' ->
	      {'image',Img}
	  %% Line 344
	  <[Text|[[]]]> when 'true' ->
	      {'text',Text}
	  %% Line 345
	  <Bad_Result> when 'true' ->
	      Bad_Result
	end
'ret_mapped'/1 =
    %% Line 350
    fun (_cor0) ->
	%% Line 351
	case apply 'ret_int'/1
		 (_cor0) of
	  %% Line 352
	  <1> when 'true' ->
	      'true'
	  %% Line 353
	  <0> when 'true' ->
	      'false'
	  %% Line 354
	  <Bad_Result> when 'true' ->
	      Bad_Result
	end
'ret_iconified'/1 =
    %% Line 358
    fun (_cor0) ->
	%% Line 359
	case apply 'ret_atom'/1
		 (_cor0) of
	  %% Line 360
	  <'iconic'> when 'true' ->
	      'true'
	  %% Line 361
	  <'normal'> when 'true' ->
	      'false'
	  %% Line 362
	  <Bad_Result> when 'true' ->
	      Bad_Result
	end
'ret_focus'/2 =
    %% Line 366
    fun (_cor1,_cor0) ->
	%% Line 367
	case call 'gstk':'call'
		 (_cor0) of
	  %% Line 368
	  <{'result',_cor5}>
	      when call 'erlang':'=:='
		    (_cor5,
		     _cor1) ->
	      'true'
	  %% Line 369
	  <_cor6> when 'true' ->
	      'false'
	end
'ret_file'/1 =
    %% Line 373
    fun (_cor0) ->
	%% Line 374
	case call 'gstk':'call'
		 (_cor0) of
	  %% Line 375
	  <{'result',[64|File]}> when 'true' ->
	      File
	  %% Line 376
	  <{'result',[]}> when 'true' ->
	      []
	  %% Line 377
	  <Bad_result> when 'true' ->
	      Bad_result
	end
'ret_bool'/1 =
    %% Line 381
    fun (_cor0) ->
	%% Line 382
	case apply 'ret_int'/1
		 (_cor0) of
	  %% Line 383
	  <1> when 'true' ->
	      'true'
	  %% Line 384
	  <0> when 'true' ->
	      'false'
	  %% Line 385
	  <Bad_Result> when 'true' ->
	      Bad_Result
	end
'ret_enable'/1 =
    %% Line 388
    fun (_cor0) ->
	%% Line 389
	case apply 'ret_atom'/1
		 (_cor0) of
	  %% Line 390
	  <'normal'> when 'true' ->
	      'true'
	  %% Line 391
	  <'active'> when 'true' ->
	      'true'
	  %% Line 392
	  <'disabled'> when 'true' ->
	      'false'
	  %% Line 393
	  <Bad_Result> when 'true' ->
	      Bad_Result
	end
'ret_color'/1 =
    %% Line 398
    fun (_cor0) ->
	%% Line 399
	case call 'gstk':'call'
		 (_cor0) of
	  %% Line 400
	  <{'result',[35|[R1|[G1|[B1|[]]]]]}> when 'true' ->
	      let <_cor3> =
		  %% Line 401
		  apply 'hex2dec'/1
		      ([R1|[48]])
	      in  let <_cor2> =
		      %% Line 401
		      apply 'hex2dec'/1
			  ([G1|[48]])
		  in  let <_cor1> =
			  %% Line 401
			  apply 'hex2dec'/1
			      ([B1|[48]])
		      in  %% Line 401
			  {_cor3,_cor2,_cor1}
	  %% Line 402
	  <{'result',[35|[R1|[R2|[G1|[G2|[B1|[B2|[]]]]]]]]}> when 'true' ->
	      let <_cor6> =
		  %% Line 403
		  apply 'hex2dec'/1
		      ([R1|[R2|[]]])
	      in  let <_cor5> =
		      %% Line 403
		      apply 'hex2dec'/1
			  ([G1|[G2|[]]])
		  in  let <_cor4> =
			  %% Line 403
			  apply 'hex2dec'/1
			      ([B1|[B2|[]]])
		      in  %% Line 403
			  {_cor6,_cor5,_cor4}
	  %% Line 404
	  <{'result',[35|[R1|[R2|[_X_R3|[G1|[G2|[_X_G3|[B1|[B2|[_X_B3|[]]]]]]]]]]]}> when 'true' ->
	      let <_cor9> =
		  %% Line 405
		  apply 'hex2dec'/1
		      ([R1|[R2|[]]])
	      in  let <_cor8> =
		      %% Line 405
		      apply 'hex2dec'/1
			  ([G1|[G2|[]]])
		  in  let <_cor7> =
			  %% Line 405
			  apply 'hex2dec'/1
			      ([B1|[B2|[]]])
		      in  %% Line 405
			  {_cor9,_cor8,_cor7}
	  %% Line 406
	  <{'result',[35|[R1|[R2|[_X_R3|[_X_R4|[G1|[G2|[_X_G3|[_X_G4|[B1|[B2|[_X_B3|[_X_B4|[]]]]]]]]]]]]]]}> when 'true' ->
	      let <_cor12> =
		  %% Line 407
		  apply 'hex2dec'/1
		      ([R1|[R2|[]]])
	      in  let <_cor11> =
		      %% Line 407
		      apply 'hex2dec'/1
			  ([G1|[G2|[]]])
		  in  let <_cor10> =
			  %% Line 407
			  apply 'hex2dec'/1
			      ([B1|[B2|[]]])
		      in  %% Line 407
			  {_cor12,_cor11,_cor10}
	  %% Line 408
	  <{'result',[Char|Word]}>
	      when let <_cor13> =
		    call 'erlang':'>='
			(Char, 65)
		in  let <_cor14> =
			call 'erlang':'=<'
			    (Char, 90)
		    in  call 'erlang':'and'
			    (_cor13, _cor14) ->
	      let <_cor15> =
		  %% Line 409
		  call 'erlang':'+'
		      (Char, 32)
	      in  %% Line 409
		  call 'erlang':'list_to_atom'
		      ([_cor15|Word])
	  %% Line 410
	  <{'result',[Char|Word]}>
	      when let <_cor16> =
		    call 'erlang':'>='
			(Char, 97)
		in  let <_cor17> =
			call 'erlang':'=<'
			    (Char, 122)
		    in  call 'erlang':'and'
			    (_cor16, _cor17) ->
	      %% Line 411
	      call 'erlang':'list_to_atom'
		  ([Char|Word])
	  %% Line 412
	  <{'result',Color}> when 'true' ->
	      %% Line 413
	      call 'gs':'error'
		  ([101|[114|[114|[111|[114|[32|[105|[110|[32|[116|[99|[108|[50|[101|[114|[108|[58|[114|[101|[116|[95|[99|[111|[108|[111|[114|[32|[103|[111|[116|[32|[126|[119|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Color|[]])
	  %% Line 414
	  <Bad_result> when 'true' ->
	      Bad_result
	end
'ret_stipple'/1 =
    %% Line 418
    fun (_cor0) ->
	%% Line 419
	case call 'gstk':'call'
		 (_cor0) of
	  %% Line 420
	  <{'result',_X_Any}> when 'true' ->
	      'true'
	  %% Line 421
	  <_X_Other> when 'true' ->
	      'false'
	end
'hex2dec'/1 =
    %% Line 429
    fun (_cor0) ->
	apply 'hex2dec'/2
	    (_cor0, 0)
'hex2dec'/2 =
    %% Line 431
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],N>
	      when let <_cor2> =
		    call 'erlang':'>='
			(H, 48)
		in  let <_cor3> =
			call 'erlang':'=<'
			    (H, 57)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor5> =
		  %% Line 432
		  call 'erlang':'bsl'
		      (N, 4)
	      in  let <_cor4> =
		      %% Line 432
		      call 'erlang':'-'
			  (H, 48)
		  in  let <_cor6> =
			  %% Line 432
			  call 'erlang':'bor'
			      (_cor5, _cor4)
		      in  %% Line 432
			  apply 'hex2dec'/2
			      (T, _cor6)
	  %% Line 433
	  <[H|T],N>
	      when let <_cor7> =
		    call 'erlang':'>='
			(H, 97)
		in  let <_cor8> =
			call 'erlang':'=<'
			    (H, 102)
		    in  call 'erlang':'and'
			    (_cor7, _cor8) ->
	      let <_cor11> =
		  %% Line 434
		  call 'erlang':'bsl'
		      (N, 4)
	      in  let <_cor9> =
		      %% Line 434
		      call 'erlang':'-'
			  (H, 97)
		  in  let <_cor10> =
			  %% Line 434
			  call 'erlang':'+'
			      (_cor9, 10)
		      in  let <_cor12> =
			      %% Line 434
			      call 'erlang':'bor'
				  (_cor11, _cor10)
			  in  %% Line 434
			      apply 'hex2dec'/2
				  (T, _cor12)
	  %% Line 435
	  <[H|T],N>
	      when let <_cor13> =
		    call 'erlang':'>='
			(H, 65)
		in  let <_cor14> =
			call 'erlang':'=<'
			    (H, 70)
		    in  call 'erlang':'and'
			    (_cor13, _cor14) ->
	      let <_cor17> =
		  %% Line 436
		  call 'erlang':'bsl'
		      (N, 4)
	      in  let <_cor15> =
		      %% Line 436
		      call 'erlang':'-'
			  (H, 65)
		  in  let <_cor16> =
			  %% Line 436
			  call 'erlang':'+'
			      (_cor15, 10)
		      in  let <_cor18> =
			      %% Line 436
			      call 'erlang':'bor'
				  (_cor17, _cor16)
			  in  %% Line 436
			      apply 'hex2dec'/2
				  (T, _cor18)
	  %% Line 437
	  <[],N> when 'true' ->
	      N
	  ( <_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19})
		  -| [{'function_name',{'hex2dec',2}}] )
	    -| ['compiler_generated'] )
	end
'mk_quotes0'/2 =
    %% Line 440
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[123|T],Res> when 'true' ->
	      apply 'mk_quotes2'/3
		  (T, [], Res)
	  %% Line 441
	  <[32|T],Res> when 'true' ->
	      apply 'mk_quotes0'/2
		  (T, Res)
	  %% Line 442
	  <[92|[X|T]],Res> when 'true' ->
	      apply 'mk_quotes1'/3
		  (T, [X|[]], Res)
	  %% Line 443
	  <[X|T],Res> when 'true' ->
	      apply 'mk_quotes1'/3
		  (T, [X|[]], Res)
	  %% Line 444
	  <[],Res> when 'true' ->
	      call 'lists':'reverse'
		  (Res)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'mk_quotes0',2}}] )
	    -| ['compiler_generated'] )
	end
'mk_quotes1'/3 =
    %% Line 446
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[125|T],Ack,Res> when 'true' ->
	      let <_cor3> =
		  call 'lists':'reverse'
		      (Ack)
	      in  apply 'mk_quotes0'/2
		      (T, [_cor3|Res])
	  %% Line 447
	  <[92|[X|T]],Ack,Res> when 'true' ->
	      apply 'mk_quotes1'/3
		  (T, [X|Ack], Res)
	  %% Line 448
	  <[32|T],Ack,Res> when 'true' ->
	      let <_cor4> =
		  call 'lists':'reverse'
		      (Ack)
	      in  apply 'mk_quotes0'/2
		      (T, [_cor4|Res])
	  %% Line 449
	  <[X|T],Ack,Res> when 'true' ->
	      apply 'mk_quotes1'/3
		  (T, [X|Ack], Res)
	  %% Line 450
	  <[],Ack,Res> when 'true' ->
	      let <_cor5> =
		  call 'lists':'reverse'
		      (Ack)
	      in  call 'lists':'reverse'
		      ([_cor5|Res])
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'mk_quotes1',3}}] )
	    -| ['compiler_generated'] )
	end
'mk_quotes2'/3 =
    %% Line 453
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[125|T],Ack,Res> when 'true' ->
	      let <_cor3> =
		  call 'lists':'reverse'
		      (Ack)
	      in  apply 'mk_quotes0'/2
		      (T, [_cor3|Res])
	  %% Line 454
	  <[92|[X|T]],Ack,Res> when 'true' ->
	      apply 'mk_quotes2'/3
		  (T, [X|Ack], Res)
	  %% Line 455
	  <[X|T],Ack,Res> when 'true' ->
	      apply 'mk_quotes2'/3
		  (T, [X|Ack], Res)
	  %% Line 456
	  <[],Ack,Res> when 'true' ->
	      let <_cor4> =
		  call 'lists':'reverse'
		      (Ack)
	      in  call 'lists':'reverse'
		      ([_cor4|Res])
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'mk_quotes2',3}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('tcl2erl')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('tcl2erl', _cor0)
end