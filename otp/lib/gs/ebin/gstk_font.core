module 'gstk_font' ['choose'/2,
		    'choose_ascii'/2,
		    'init'/0,
		    'module_info'/0,
		    'module_info'/1,
		    'width_height'/3]
    attributes []
'init'/0 =
    %% Line 47
    fun () ->
	%% Line 50
	call 'gstk':'exec'
	    ([116|[111|[112|[108|[101|[118|[101|[108|[32|[46|[100|[102|[119|[59|[119|[109|[32|[119|[105|[116|[104|[100|[114|[97|[119|[32|[46|[100|[102|[119|[59|[108|[97|[98|[101|[108|[32|[46|[100|[102|[119|[46|[108|[32|[45|[116|[101|[120|[116|[32|[100|[117|[109|[109|[121|[105|[110|[105|[116|[116|[120|[116|[32|[45|[112|[97|[100|[120|[32|[48|[32|[45|[112|[97|[100|[121|[32|[48|[32|[45|[98|[111|[114|[100|[101|[114|[119|[105|[100|[116|[104|[32|[48|[59|[112|[97|[99|[107|[32|[46|[100|[102|[119|[46|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
'width_height'/3 =
    %% Line 62
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 63
	    apply 'norm_font_spec'/1
		(_cor1)
	in  let <FontSpecStr> =
		%% Line 63
		apply 'tk_font_spec'/1
		    (_cor3)
	    in  let <_cor5> =
		    %% Line 65
		    call 'gstk':'to_ascii'
			(_cor0)
		in  %% Line 64
		    case call 'gstk':'call'
			     ([[46|[100|[102|[119|[46|[108|[32|[99|[111|[32|[45|[102|[111|[110|[116|[32|[123]]]]]]]]]]]]]]]]]|[FontSpecStr|[[125]|%% Line 65
																		  [[32|[45|[116|[101|[120|[116|[32]]]]]]]|[_cor5|[]]]]]]) of
		      %% Line 66
		      <{'result',_cor12}> when 'true' ->
			  let <Width> =
			      %% Line 67
			      call 'tcl2erl':'ret_int'
				  ([117|[112|[100|[97|[116|[101|[32|[105|[100|[108|[101|[116|[97|[115|[107|[115|[59|[119|[105|[110|[102|[111|[32|[119|[32|[46|[100|[102|[119|[46|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
			  in  let <Height> =
				  %% Line 68
				  call 'tcl2erl':'ret_int'
				      ([119|[105|[110|[102|[111|[32|[104|[32|[46|[100|[102|[119|[46|[108]]]]]]]]]]]]]])
			      in  %% Line 70
				  {Width,Height}
		      %% Line 71
		      <_X_Bad_Result> when 'true' ->
			  %% Line 73
			  'undefined'
		    end
'choose_ascii'/2 =
    %% Line 132
    fun (_cor1,_cor0) ->
	%% Line 133
	case apply 'choose'/2
		 (_cor1, _cor0) of
	  <{Fam,Styl,Siz}> when 'true' ->
	      %% Line 134
	      case call 'gstk_db':'lookup'
		       (_cor1, {'font',Fam,Styl,Siz}) of
		<{'variable',V}> when 'true' ->
		    %% Line 136
		    V
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'choose'/2 =
    %% Line 148
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 149
	    apply 'norm_font_spec'/1
		(_cor0)
	in  %% Line 149
	    apply 'choose_font'/2
		(_cor1, _cor2)
'choose_font'/2 =
    %% Line 151
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <DB,{Fam,Styl,Siz}> when 'true' ->
	      let <Fam0> =
		  %% Line 152
		  apply 'map_family'/1
		      (Fam)
	      in  do  %% Line 153
		      case call 'gstk_db':'lookup'
			       (DB, {'font',Fam0,Styl,Siz}) of
			%% Line 154
			<{'variable',_X_OwnFontName}> when 'true' ->
			    'ok'
			%% Line 155
			<'undefined'> when 'true' ->
			    let <N> =
				%% Line 156
				call 'gstk_db':'counter'
				    (DB, 'font')
			    in  let <_cor4> =
				    %% Line 158
				    call 'gstk':'to_ascii'
					(N)
				in  let <NewName> =
					%% Line 158
					[[102]|[_cor4|[]]]
				    in  let <_cor6> =
					    %% Line 163
					    apply 'tk_font_spec'/1
						({Fam0,Styl,Siz})
					in  do  %% Line 162
						call 'gstk':'exec'
						    ([[102|[111|[110|[116|[32|[99|[114|[101|[97|[116|[101|[32]]]]]]]]]]]]|[NewName|[[32]|%% Line 163
																	 [_cor6|[]]]]])
						let <V2> = {%% Line 166
						     'variable',%% Line 166
								NewName}
						in  do  %% Line 167
							call 'gstk_db':'insert'
							    (DB, {'font',Fam0,Styl,Siz}, V2)
							'ok'
			( <_cor8> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor8})
			  -| ['compiler_generated'] )
		      end
		      %% Line 171
		      {Fam0,Styl,Siz}
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'choose_font',2}}] )
	    -| ['compiler_generated'] )
	end
'map_family'/1 =
    %% Line 198
    fun (_cor0) ->
	case _cor0 of
	  <'new_century_schoolbook'> when 'true' ->
	      %% Line 199
	      'times'
	  %% Line 200
	  <Fam> when 'true' ->
	      %% Line 201
	      Fam
	end
'norm_font_spec'/1 =
    %% Line 207
    fun (_cor0) ->
	case _cor0 of
	  <{Family,Size}> when 'true' ->
	      %% Line 208
	      {Family,[],Size}
	  %% Line 209
	  <{Family,Style,Size}> when 'true' ->
	      let <_cor1> =
		  %% Line 210
		  apply 'norm_style'/1
		      (Style)
	      in  %% Line 210
		  {Family,_cor1,Size}
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'norm_font_spec',1}}] )
	    -| ['compiler_generated'] )
	end
'norm_style'/1 =
    %% Line 212
    fun (_cor0) ->
	case _cor0 of
	  <'bold'> when 'true' ->
	      %% Line 213
	      ['bold']
	  %% Line 214
	  <'italic'> when 'true' ->
	      %% Line 215
	      ['italic']
	  %% Line 216
	  <['italic']> when 'true' ->
	      %% Line 217
	      ['italic']
	  %% Line 218
	  <['bold']> when 'true' ->
	      %% Line 219
	      ['bold']
	  %% Line 220
	  <Style = ['bold'|['italic']]> when 'true' ->
	      %% Line 221
	      Style
	  %% Line 222
	  <['italic'|['bold']]> when 'true' ->
	      %% Line 223
	      ['bold'|['italic']]
	  %% Line 224
	  <List>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor2> =
		  %% Line 225
		  call 'lists':'member'
		      ('bold', List)
	      in  let <_cor1> =
		      %% Line 225
		      call 'lists':'member'
			  ('italic', List)
		  in  %% Line 225
		      case <_cor2,_cor1> of
			%% Line 226
			<'true','true'> when 'true' ->
			    %% Line 227
			    ['bold'|['italic']]
			%% Line 228
			<'true',_cor5> when 'true' ->
			    %% Line 229
			    ['bold']
			%% Line 230
			<_cor6,'true'> when 'true' ->
			    %% Line 231
			    ['italic']
			%% Line 232
			<_fol7,_fol8> when 'true' ->
			    %% Line 233
			    []
		      end
	  %% Line 235
	  <_X_Any> when 'true' ->
	      %% Line 236
	      []
	end
'tk_font_spec'/1 =
    %% Line 242
    fun (_cor0) ->
	case _cor0 of
	  <{Fam,Style,Size}> when 'true' ->
	      let <_cor1> =
		  %% Line 243
		  call 'gstk':'to_ascii'
		      (Fam)
	      in  let <_cor2> =
		      %% Line 244
		      call 'erlang':'-'
			  (Size)
		  in  let <_cor3> =
			  %% Line 244
			  call 'gstk':'to_ascii'
			      (_cor2)
		      in  let <_cor4> =
			      %% Line 245
			      apply 'tk_font_spec_style'/1
				  (Style)
			  in  %% Line 243
			      [[45|[102|[97|[109|[105|[108|[121|[32]]]]]]]]|[_cor1|%% Line 244
										   [[32|[45|[115|[105|[122|[101|[32]]]]]]]|[_cor3|%% Line 245
																  [_cor4|[]]]]]]
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'tk_font_spec',1}}] )
	    -| ['compiler_generated'] )
	end
'tk_font_spec_style'/1 =
    %% Line 247
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 248
	      []
	  %% Line 249
	  <['bold']> when 'true' ->
	      %% Line 250
	      [32|[45|[119|[101|[105|[103|[104|[116|[32|[98|[111|[108|[100]]]]]]]]]]]]]
	  %% Line 251
	  <['italic']> when 'true' ->
	      %% Line 252
	      [32|[45|[115|[108|[97|[110|[116|[32|[105|[116|[97|[108|[105|[99]]]]]]]]]]]]]]
	  %% Line 253
	  <['bold'|['italic']]> when 'true' ->
	      %% Line 254
	      [32|[45|[119|[101|[105|[103|[104|[116|[32|[98|[111|[108|[100|[32|[45|[115|[108|[97|[110|[116|[32|[105|[116|[97|[108|[105|[99]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'tk_font_spec_style',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('gstk_font')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('gstk_font', _cor0)
end