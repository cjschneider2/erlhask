module 'line_demo' ['init'/0,
		    'line'/3,
		    'module_info'/0,
		    'module_info'/1,
		    'start'/0]
    attributes []
'start'/0 =
    %% Line 36
    fun () ->
	%% Line 37
	call 'erlang':'spawn'
	    ('line_demo', 'init', [])
'init'/0 =
    %% Line 39
    fun () ->
	let <I> =
	    %% Line 40
	    call 'gs':'start'
		()
	in  let <W> =
		%% Line 41
		call 'gs':'window'
		    (I, [{'title',[76|[105|[110|[101|[32|[68|[101|[109|[111]]]]]]]]]}|[{'width',300}|[{'height',300}|[{'map','true'}]]]])
	    in  let <C> =
		    %% Line 42
		    call 'gs':'canvas'
			(W, [{'width',300}|[{'height',300}|[{'bg','blue'}]]])
		in  do  %% Line 43
			call 'gs':'button'
			    (W, [{'label',{'text',[81|[117|[105|[116]]]]}}|[{'width',40}|[{'bg','yellow'}]]])
			let <Line2> =
			    %% Line 44
			    call 'gs':'line'
				(C, [{'coords',[{0,0}|[{50,50}]]}|[{'fg','white'}|[{'width',3}]]])
			in  %% Line 45
			    apply 'line'/3
				(Line2, {100,100,9.50000000000000000000e+00,5}, {0,0,-6,-8.40000000000000035527e+00})
'line'/3 =
    %% Line 49
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Line,{X1,Y1,DX1,DY1},{X2,Y2,DX2,DY2}> when 'true' ->
	      %% Line 50
	      case apply 'cc'/2
		       (X1, DX1) of
		<{NX1,NDX1}> when 'true' ->
		    %% Line 51
		    case apply 'cc'/2
			     (Y1, DY1) of
		      <{NY1,NDY1}> when 'true' ->
			  %% Line 52
			  case apply 'cc'/2
				   (X2, DX2) of
			    <{NX2,NDX2}> when 'true' ->
				%% Line 53
				case apply 'cc'/2
					 (Y2, DY2) of
				  <{NY2,NDY2}> when 'true' ->
				      do  %% Line 54
					  call 'gs':'config'
					      (Line, {'coords',[{NX1,NY1}|[{NX2,NY2}|[]]]})
					  do  %% Line 55
					      receive
						%% Line 56
						<{'gs',_cor10,'click',_cor11,_cor12}> when 'true' ->
						    call 'erlang':'exit'
							('normal')
						%% Line 57
						<{'gs',_cor13,'destroy',_cor14,_cor15}> when 'true' ->
						    call 'erlang':'exit'
							('normal')
					      after %% Line 58
						    50 ->
						'ok'
					      %% Line 61
					      apply 'line'/3
						  (Line, {NX1,NY1,NDX1,NDY1}, {NX2,NY2,NDX2,NDY2})
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor6})
				    -| ['compiler_generated'] )
				end
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'line',3}}] )
	    -| ['compiler_generated'] )
	end
'cc'/2 =
    %% Line 63
    fun (_cor1,_cor0) ->
	%% Line 64
	case <> of
	  %% Line 65
	  <>
	      when call 'erlang':'>'
		    (_cor0,
		     0) ->
	      %% Line 66
	      case <> of
		%% Line 67
		<>
		    when call 'erlang':'<'
			  (_cor1,
			   300) ->
		    let <_cor2> =
			%% Line 68
			call 'erlang':'+'
			    (_cor1, _cor0)
		    in  %% Line 68
			{_cor2,_cor0}
		%% Line 69
		<> when 'true' ->
		    let <_cor4> =
			%% Line 70
			call 'erlang':'-'
			    (_cor1, _cor0)
		    in  let <_cor3> =
			    %% Line 70
			    call 'erlang':'-'
				(_cor0)
			in  %% Line 70
			    {_cor4,_cor3}
	      end
	  %% Line 72
	  <>
	      when call 'erlang':'<'
		    (_cor0,
		     0) ->
	      %% Line 73
	      case <> of
		%% Line 74
		<>
		    when call 'erlang':'>'
			  (_cor1,
			   0) ->
		    let <_cor5> =
			%% Line 75
			call 'erlang':'+'
			    (_cor1, _cor0)
		    in  %% Line 75
			{_cor5,_cor0}
		%% Line 76
		<>
		    when call 'erlang':'=<'
			  (_cor1,
			   0) ->
		    let <_cor7> =
			%% Line 77
			call 'erlang':'-'
			    (_cor1, _cor0)
		    in  let <_cor6> =
			    %% Line 77
			    call 'erlang':'-'
				(_cor0)
			in  %% Line 77
			    {_cor7,_cor6}
		( <> when 'true' ->
		      primop 'match_fail'
			  ('if_clause')
		  -| ['compiler_generated'] )
	      end
	  ( <> when 'true' ->
		primop 'match_fail'
		    ('if_clause')
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('line_demo')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('line_demo', _cor0)
end