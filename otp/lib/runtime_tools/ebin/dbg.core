module 'dbg' ['c'/3,
	      'c'/4,
	      'cn'/1,
	      'ctp'/0,
	      'ctp'/1,
	      'ctp'/2,
	      'ctp'/3,
	      'ctpg'/0,
	      'ctpg'/1,
	      'ctpg'/2,
	      'ctpg'/3,
	      'ctpl'/0,
	      'ctpl'/1,
	      'ctpl'/2,
	      'ctpl'/3,
	      'deliver_and_flush'/1,
	      'dhandler'/2,
	      'dtp'/0,
	      'dtp'/1,
	      'erlang_trace'/3,
	      'flush_trace_port'/0,
	      'flush_trace_port'/1,
	      'fun2ms'/1,
	      'get_info'/0,
	      'get_tracer'/0,
	      'get_tracer'/1,
	      'h'/0,
	      'h'/1,
	      'i'/0,
	      'ln'/0,
	      'ltp'/0,
	      'match_0_9'/1,
	      'match_front'/2,
	      'match_rear'/2,
	      'module_info'/0,
	      'module_info'/1,
	      'n'/1,
	      'p'/1,
	      'p'/2,
	      'rtp'/1,
	      'start'/0,
	      'stop'/0,
	      'stop_clear'/0,
	      'stop_trace_client'/1,
	      'tp'/2,
	      'tp'/3,
	      'tp'/4,
	      'tpl'/2,
	      'tpl'/3,
	      'tpl'/4,
	      'trace_client'/2,
	      'trace_client'/3,
	      'trace_port'/2,
	      'trace_port_control'/1,
	      'trace_port_control'/2,
	      'tracer'/0,
	      'tracer'/2,
	      'tracer'/3,
	      'transform_flags'/1,
	      'wrap_postsort'/1,
	      'wrap_presort'/2,
	      'wrap_sort'/2,
	      'wrap_sortfix'/2,
	      'wtp'/1]
    attributes []
'fun2ms'/1 =
    %% Line 44
    fun (_cor0) ->
	case _cor0 of
	  <ShellFun>
	      when call 'erlang':'is_function'
		    (_cor0) ->
	      %% Line 46
	      case call 'erl_eval':'fun_data'
		       (ShellFun) of
		%% Line 47
		<{'fun_data',ImportList,Clauses}> when 'true' ->
		    %% Line 48
		    case call 'ms_transform':'transform_from_shell'
			     (%% Line 49
			      'dbg', %% Line 49
				     Clauses, %% Line 49
					      ImportList) of
		      %% Line 50
		      <{'error',[{_cor5,[{_cor6,_cor7,Code}|_cor8]}|_cor9],_cor10}> when 'true' ->
			  let <_cor1> =
			      %% Line 52
			      call 'ms_transform':'format_error'
				  (Code)
			  in  do  %% Line 51
				  call 'io':'format'
				      ([69|[114|[114|[111|[114|[58|[32|[126|[115|[126|[110]]]]]]]]]]], %% Line 52
												       [_cor1|[]])
				  %% Line 53
				  {'error','transform_error'}
		      %% Line 54
		      <Else> when 'true' ->
			  %% Line 55
			  Else
		    end
		%% Line 57
		<'false'> when 'true' ->
		    %% Line 58
		    call 'erlang':'exit'
			({'badarg',{'dbg','fun2ms',['function'|['called'|['with'|['real'|['fun'|['should'|['be'|['transformed'|['with'|['parse_transform'|['or'|['called'|['with'|['a'|['fun'|['generated'|['in'|['the'|['shell']]]]]]]]]]]]]]]]]]]}})
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'fun2ms',1}}] )
	    -| ['compiler_generated'] )
	end
'n'/1 =
    %% Line 73
    fun (_cor0) ->
	case _cor0 of
	  <Node>
	      when try
		    let <_cor1> =
			call 'erlang':'node'
			    ()
		    in  call 'erlang':'=:='
			    (_cor0, _cor1)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 74
	      {'error','cant_add_local_node'}
	  %% Line 75
	  <Node> when 'true' ->
	      let <_cor2> =
		  catch
		      %% Line 76
		      call 'net_adm':'ping'
			  (Node)
	      in  %% Line 76
		  case _cor2 of
		    %% Line 77
		    <{'EXIT',_cor5}> when 'true' ->
			%% Line 78
			{'error',{'bad_node',Node}}
		    %% Line 79
		    <'pang'> when 'true' ->
			%% Line 80
			{'error',{'nodedown',Node}}
		    %% Line 81
		    <'pong'> when 'true' ->
			%% Line 82
			apply 'req'/1
			    ({'add_node',Node})
		    %% Line 83
		    <Other> when 'true' ->
			%% Line 84
			{'error',Other}
		  end
	end
'cn'/1 =
    %% Line 91
    fun (_cor0) ->
	%% Line 92
	apply 'req'/1
	    ({'remove_node',_cor0})
'ln'/0 =
    %% Line 98
    fun () ->
	let <_cor3> =
	    %% Line 99
	    ( fun (_cor1) ->
		  %% Line 100
		  call 'io':'format'
		      ([126|[112|[126|[110]]]], [_cor1|[]])
	      -| [{'id',{0,0,'-ln/0-fun-0-'}}] )
	in  let <_cor0> =
		%% Line 102
		apply 'req'/1
		    ('get_nodes')
	    in  do  %% Line 99
		    call 'lists':'foreach'
			(_cor3, _cor0)
		    %% Line 103
		    'ok'
'tp'/3 =
    %% Line 114
    fun (_cor2,_cor1,_cor0) ->
	%% Line 115
	apply 'do_tp'/3
	    ({_cor2,_cor1,'_'}, _cor0, [])
'tp'/4 =
    %% Line 116
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 117
	apply 'do_tp'/3
	    ({_cor3,_cor2,_cor1}, _cor0, [])
'tp'/2 =
    %% Line 118
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Module,Pattern>
	      when call 'erlang':'is_atom'
		    (Module) ->
	      %% Line 119
	      apply 'do_tp'/3
		  ({Module,'_','_'}, Pattern, [])
	  %% Line 120
	  <X = {_X_Module,_X_Function,_X_Arity},Pattern> when 'true' ->
	      %% Line 121
	      apply 'do_tp'/3
		  (X, Pattern, [])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'tp',2}}] )
	    -| ['compiler_generated'] )
	end
'tpl'/3 =
    %% Line 122
    fun (_cor2,_cor1,_cor0) ->
	%% Line 123
	apply 'do_tp'/3
	    ({_cor2,_cor1,'_'}, _cor0, ['local'])
'tpl'/4 =
    %% Line 124
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 125
	apply 'do_tp'/3
	    ({_cor3,_cor2,_cor1}, _cor0, ['local'])
'tpl'/2 =
    %% Line 126
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Module,Pattern>
	      when call 'erlang':'is_atom'
		    (Module) ->
	      %% Line 127
	      apply 'do_tp'/3
		  ({Module,'_','_'}, Pattern, ['local'])
	  %% Line 128
	  <X = {_X_Module,_X_Function,_X_Arity},Pattern> when 'true' ->
	      %% Line 129
	      apply 'do_tp'/3
		  (X, Pattern, ['local'])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'tpl',2}}] )
	    -| ['compiler_generated'] )
	end
'do_tp'/3 =
    %% Line 130
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <X = {_X_Module,_X_Function,_X_Arity},Pattern,Flags>
	      when let <_cor3> =
		    %% Line 131
		    call 'erlang':'is_integer'
			(Pattern)
		in  let <_cor4> =
			%% Line 132
			call 'erlang':'is_atom'
			    (Pattern)
		    in  %% Line 131
			call 'erlang':'or'
			    (_cor3, _cor4) ->
	      let <_cor5> =
		  %% Line 133
		  apply 'get_pattern_table'/0
		      ()
	      in  %% Line 133
		  case call 'ets':'lookup'
			   (_cor5, Pattern) of
		    %% Line 134
		    <[{_cor26,NPattern}|[]]> when 'true' ->
			let <_cor6> =
			    %% Line 135
			    call 'erlang':'binary_to_term'
				(NPattern)
			in  %% Line 135
			    apply 'do_tp'/3
				(X, _cor6, Flags)
		    %% Line 136
		    <_cor27> when 'true' ->
			%% Line 137
			{'error','unknown_pattern'}
		  end
	  %% Line 139
	  <X = {Module,_X_Function,_X_Arity},Pattern,Flags>
	      when call 'erlang':'is_list'
		    (Pattern) ->
	      let <Nodes> =
		  %% Line 140
		  apply 'req'/1
		      ('get_nodes')
	      in  do  %% Line 141
		      case Module of
			%% Line 142
			<'_'> when 'true' ->
			    'ok'
			%% Line 144
			<M>
			    when call 'erlang':'is_atom'
				  (Module) ->
			    let <_cor11> =
				%% Line 146
				( fun (_cor9) ->
				      %% Line 147
				      call 'rpc':'call'
					  (_cor9, M, 'module_info', [])
				  -| [{'id',{0,0,'-do_tp/3-fun-0-'}}] )
			    in  %% Line 146
				call 'lists':'foreach'
				    (_cor11, %% Line 149
					     Nodes)
			( <_cor12> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor12})
			  -| ['compiler_generated'] )
		      end
		      %% Line 151
		      case apply 'lint_tp'/1
			       (Pattern) of
			%% Line 152
			<{'ok',_cor28}> when 'true' ->
			    let <_cor18> =
				%% Line 153
				case apply 'save_pattern'/1
					 (Pattern) of
				  %% Line 154
				  <N>
				      when let <_cor15> =
					    let <_cor13> =
						call 'erlang':'is_integer'
						    (N)
					    in  let <_cor14> =
						    call 'erlang':'>'
							(N, 0)
						in  call 'erlang':'and'
							(_cor13, _cor14)
					in  let <_cor16> =
						call 'erlang':'is_atom'
						    (N)
					    in  call 'erlang':'or'
						    (_cor15, _cor16) ->
				      %% Line 155
				      [{'saved',N}|[]]
				  %% Line 156
				  <_cor29> when 'true' ->
				      %% Line 157
				      []
				end
			    in  let <_cor20> =
				    %% Line 159
				    apply 'do_tp_on_nodes'/4
					(Nodes, X, Pattern, Flags)
				in  let <_cor21> =
					%% Line 159
					call 'erlang':'++'
					    (_cor20, _cor18)
				    in  %% Line 159
					{'ok',_cor21}
			%% Line 160
			<Other> when 'true' ->
			    %% Line 161
			    Other
		      end
	  ( <_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23})
		  -| [{'function_name',{'do_tp',3}}] )
	    -| ['compiler_generated'] )
	end
'do_tp_on_nodes'/4 =
    %% Line 165
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 166
	    ( fun (_cor5) ->
		  %% Line 167
		  case call 'rpc':'call'
			   (_cor5, 'erlang', 'trace_pattern', [_cor2|[_cor1|[_cor0|[]]]]) of
		    %% Line 168
		    <N>
			when call 'erlang':'is_integer'
			      (N) ->
			%% Line 169
			{'matched',_cor5,N}
		    %% Line 170
		    <Else> when 'true' ->
			%% Line 171
			{'matched',_cor5,0,Else}
		  end
	      -| [{'id',{0,0,'-do_tp_on_nodes/4-fun-0-'}}] )
	in  %% Line 166
	    call 'lists':'map'
		(_cor7, _cor3)
'ctp'/0 =
    %% Line 182
    fun () ->
	%% Line 183
	apply 'do_ctp'/2
	    ({'_','_','_'}, [])
'ctp'/2 =
    %% Line 184
    fun (_cor1,_cor0) ->
	%% Line 185
	apply 'do_ctp'/2
	    ({_cor1,_cor0,'_'}, [])
'ctp'/3 =
    %% Line 186
    fun (_cor2,_cor1,_cor0) ->
	%% Line 187
	apply 'do_ctp'/2
	    ({_cor2,_cor1,_cor0}, [])
'ctp'/1 =
    %% Line 188
    fun (_cor0) ->
	case _cor0 of
	  <Module>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 189
	      apply 'do_ctp'/2
		  ({Module,'_','_'}, [])
	  %% Line 190
	  <X = {_X_Module,_X_Function,_X_Arity}> when 'true' ->
	      %% Line 191
	      apply 'do_ctp'/2
		  (X, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'ctp',1}}] )
	    -| ['compiler_generated'] )
	end
'ctpl'/0 =
    %% Line 192
    fun () ->
	%% Line 193
	apply 'do_ctp'/2
	    ({'_','_','_'}, ['local'])
'ctpl'/2 =
    %% Line 194
    fun (_cor1,_cor0) ->
	%% Line 195
	apply 'do_ctp'/2
	    ({_cor1,_cor0,'_'}, ['local'])
'ctpl'/3 =
    %% Line 196
    fun (_cor2,_cor1,_cor0) ->
	%% Line 197
	apply 'do_ctp'/2
	    ({_cor2,_cor1,_cor0}, ['local'])
'ctpl'/1 =
    %% Line 198
    fun (_cor0) ->
	case _cor0 of
	  <Module>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 199
	      apply 'do_ctp'/2
		  ({Module,'_','_'}, ['local'])
	  %% Line 200
	  <X = {_X_Module,_X_Function,_X_Arity}> when 'true' ->
	      %% Line 201
	      apply 'do_ctp'/2
		  (X, ['local'])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'ctpl',1}}] )
	    -| ['compiler_generated'] )
	end
'ctpg'/0 =
    %% Line 202
    fun () ->
	%% Line 203
	apply 'do_ctp'/2
	    ({'_','_','_'}, ['global'])
'ctpg'/2 =
    %% Line 204
    fun (_cor1,_cor0) ->
	%% Line 205
	apply 'do_ctp'/2
	    ({_cor1,_cor0,'_'}, ['global'])
'ctpg'/3 =
    %% Line 206
    fun (_cor2,_cor1,_cor0) ->
	%% Line 207
	apply 'do_ctp'/2
	    ({_cor2,_cor1,_cor0}, ['global'])
'ctpg'/1 =
    %% Line 208
    fun (_cor0) ->
	case _cor0 of
	  <Module>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 209
	      apply 'do_ctp'/2
		  ({Module,'_','_'}, ['global'])
	  %% Line 210
	  <X = {_X_Module,_X_Function,_X_Arity}> when 'true' ->
	      %% Line 211
	      apply 'do_ctp'/2
		  (X, ['global'])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'ctpg',1}}] )
	    -| ['compiler_generated'] )
	end
'do_ctp'/2 =
    %% Line 212
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Module,Function,Arity},[]> when 'true' ->
	      do  %% Line 213
		  apply 'do_ctp'/2
		      ({Module,Function,Arity}, ['global'])
		  %% Line 214
		  apply 'do_ctp'/2
		      ({Module,Function,Arity}, ['local'])
	  %% Line 215
	  <MFA = {_X_Module,_X_Function,_X_Arity},Flags> when 'true' ->
	      let <Nodes> =
		  %% Line 216
		  apply 'req'/1
		      ('get_nodes')
	      in  let <_cor3> =
		      %% Line 217
		      apply 'do_tp_on_nodes'/4
			  (Nodes, MFA, 'false', Flags)
		  in  %% Line 217
		      {'ok',_cor3}
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'do_ctp',2}}] )
	    -| ['compiler_generated'] )
	end
'ltp'/0 =
    %% Line 223
    fun () ->
	let <_cor4> =
	    %% Line 224
	    ( fun (_cor1,_cor0) ->
		  case <_cor1,_cor0> of
		    <{X,El},_X_Ignore> when 'true' ->
			%% Line 225
			call 'io':'format'
			    ([126|[112|[58|[32|[126|[112|[126|[110]]]]]]]], [X|[El|[]]])
		    ( <_cor3,_cor2> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor3,_cor2})
			    -| [{'function_name',{'-ltp/0-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-ltp/0-fun-0-'}}] )
	in  %% Line 224
	    apply 'pt_doforall'/2
		(_cor4, %% Line 226
			[])
'dtp'/0 =
    %% Line 233
    fun () ->
	let <_cor4> =
	    %% Line 234
	    ( fun (_cor1,_cor0) ->
		  case <_cor1,_cor0> of
		    <{Key,_cor5},_cor6>
			when call 'erlang':'is_integer'
			      (Key) ->
			%% Line 235
			apply 'dtp'/1
			    (Key)
		    %% Line 236
		    <{_cor7,_cor8},_cor9> when 'true' ->
			%% Line 237
			'ok'
		    ( <_cor3,_cor2> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor3,_cor2})
			    -| [{'function_name',{'-dtp/0-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-dtp/0-fun-0-'}}] )
	in  %% Line 234
	    apply 'pt_doforall'/2
		(_cor4, %% Line 239
			[])
'dtp'/1 =
    %% Line 240
    fun (_cor0) ->
	case _cor0 of
	  <N>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 241
		  apply 'get_pattern_table'/0
		      ()
	      in  do  %% Line 241
		      call 'ets':'delete'
			  (_cor1, N)
		      %% Line 242
		      'ok'
	  %% Line 243
	  <_cor3> when 'true' ->
	      %% Line 244
	      'ok'
	end
'wtp'/1 =
    %% Line 251
    fun (_cor0) ->
	%% Line 252
	case call 'file':'open'
		 (_cor0, ['write']) of
	  %% Line 253
	  <{'error',Reason}> when 'true' ->
	      %% Line 254
	      {'error',Reason}
	  %% Line 255
	  <{'ok',File}> when 'true' ->
	      let <_cor5> =
		  %% Line 256
		  ( fun (_cor2,_cor1) ->
			case <_cor2,_cor1> of
			  <{_cor8,Val},_cor9>
			      when call 'erlang':'is_list'
				    (Val) ->
			      %% Line 257
			      call 'io':'format'
				  (File, [126|[112|[46|[126|[110]]]]], [Val|[]])
			  %% Line 258
			  <{_cor10,_cor11},_cor12> when 'true' ->
			      %% Line 259
			      'ok'
			  ( <_cor4,_cor3> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor4,_cor3})
				  -| [{'function_name',{'-wtp/1-fun-0-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-wtp/1-fun-0-'}}] )
	      in  do  %% Line 256
		      apply 'pt_doforall'/2
			  (_cor5, %% Line 261
				  [])
		      do  %% Line 262
			  call 'file':'close'
			      (File)
			  %% Line 263
			  'ok'
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'rtp'/1 =
    %% Line 273
    fun (_cor0) ->
	let <T> =
	    %% Line 274
	    apply 'get_pattern_table'/0
		()
	in  %% Line 275
	    case call 'file':'consult'
		     (_cor0) of
	      %% Line 276
	      <{'error',Reason1}> when 'true' ->
		  %% Line 277
		  {'error',{'read_error',Reason1}}
	      %% Line 278
	      <{'ok',Data}> when 'true' ->
		  %% Line 279
		  case apply 'check_list'/1
			   (Data) of
		    %% Line 280
		    <'ok'> when 'true' ->
			let <_cor4> =
			    %% Line 281
			    ( fun (_cor2) ->
				  %% Line 282
				  apply 'save_pattern'/2
				      (_cor2, T)
			      -| [{'id',{0,0,'-rtp/1-fun-0-'}}] )
			in  do  %% Line 281
				call 'lists':'foreach'
				    (_cor4, %% Line 283
					    Data)
				%% Line 284
				'ok'
		    %% Line 285
		    <{'error',Reason2}> when 'true' ->
			%% Line 286
			{'error',{'file_format_error',Reason2}}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor6})
		-| ['compiler_generated'] )
	    end
'tracer'/0 =
    %% Line 290
    fun () ->
	%% Line 291
	apply 'tracer'/2
	    ('process', {( 'dhandler'/2
			   -| [{'id',{0,0,'-tracer/0-fun-0-'}}] ),'user'})
'tracer'/2 =
    %% Line 293
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'port',Fun>
	      when call 'erlang':'is_function'
		    (Fun) ->
	      %% Line 294
	      apply 'start'/1
		  (Fun)
	  %% Line 296
	  <'port',Port>
	      when call 'erlang':'is_port'
		    (Port) ->
	      let <_cor2> =
		  %% Line 297
		  ( fun () ->
			Port
		    -| [{'id',{0,0,'-tracer/2-fun-0-'}}] )
	      in  %% Line 297
		  apply 'start'/1
		      (_cor2)
	  %% Line 299
	  <'process',{Handler,HandlerData}> when 'true' ->
	      let <_cor3> =
		  %% Line 300
		  ( fun () ->
			apply 'start_tracer_process'/2
			    (Handler, HandlerData)
		    -| [{'id',{0,0,'-tracer/2-fun-1-'}}] )
	      in  %% Line 300
		  apply 'start'/1
		      (_cor3)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'tracer',2}}] )
	    -| ['compiler_generated'] )
	end
'remote_tracer'/2 =
    %% Line 303
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'port',Fun>
	      when call 'erlang':'is_function'
		    (Fun) ->
	      %% Line 304
	      apply 'remote_start'/1
		  (Fun)
	  %% Line 306
	  <'port',Port>
	      when call 'erlang':'is_port'
		    (Port) ->
	      let <_cor2> =
		  %% Line 307
		  ( fun () ->
			Port
		    -| [{'id',{0,0,'-remote_tracer/2-fun-0-'}}] )
	      in  %% Line 307
		  apply 'remote_start'/1
		      (_cor2)
	  %% Line 309
	  <'process',{Handler,HandlerData}> when 'true' ->
	      let <_cor3> =
		  %% Line 310
		  ( fun () ->
			apply 'start_tracer_process'/2
			    (Handler, HandlerData)
		    -| [{'id',{0,0,'-remote_tracer/2-fun-1-'}}] )
	      in  %% Line 310
		  apply 'remote_start'/1
		      (_cor3)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'remote_tracer',2}}] )
	    -| ['compiler_generated'] )
	end
'remote_start'/1 =
    %% Line 312
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 313
		apply _cor0
		    ()
	in  %% Line 313
	    case _cor1 of
	      %% Line 314
	      <{'EXIT',Reason}> when 'true' ->
		  %% Line 315
		  {'error',Reason}
	      %% Line 316
	      <Tracer> when 'true' ->
		  %% Line 317
		  {'ok',Tracer}
	    end
'tracer'/3 =
    %% Line 325
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Node,Type,Data>
	      when try
		    let <_cor3> =
			call 'erlang':'node'
			    ()
		    in  call 'erlang':'=:='
			    (Node, _cor3)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 326
	      case apply 'tracer'/2
		       (Type, Data) of
		%% Line 327
		<{'ok',_X_Dbg}> when 'true' ->
		    {'ok',Node}
		%% Line 328
		<Error> when 'true' ->
		    Error
	      end
	  %% Line 330
	  <Node,Type,Data> when 'true' ->
	      let <_cor5> =
		  catch
		      %% Line 331
		      call 'net_adm':'ping'
			  (Node)
	      in  %% Line 331
		  case _cor5 of
		    %% Line 332
		    <{'EXIT',_cor10}> when 'true' ->
			%% Line 333
			{'error',{'bad_node',Node}}
		    %% Line 334
		    <'pang'> when 'true' ->
			%% Line 335
			{'error',{'nodedown',Node}}
		    %% Line 336
		    <'pong'> when 'true' ->
			%% Line 337
			apply 'req'/1
			    ({'add_node',Node,Type,Data})
		    %% Line 338
		    <Other> when 'true' ->
			%% Line 339
			{'error',Other}
		  end
	end
'flush_trace_port'/0 =
    %% Line 342
    fun () ->
	%% Line 343
	apply 'trace_port_control'/1
	    ('flush')
'flush_trace_port'/1 =
    %% Line 344
    fun (_cor0) ->
	%% Line 345
	apply 'trace_port_control'/2
	    (_cor0, 'flush')
'trace_port_control'/1 =
    %% Line 347
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 348
	    call 'erlang':'node'
		()
	in  %% Line 348
	    apply 'trace_port_control'/2
		(_cor1, _cor0)
'trace_port_control'/2 =
    %% Line 350
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Node,'flush'> when 'true' ->
	      %% Line 351
	      case apply 'get_tracer'/1
		       (Node) of
		%% Line 352
		<{'ok',Port}>
		    when call 'erlang':'is_port'
			  (Port) ->
		    let <_cor2> =
			catch
			    %% Line 353
			    call 'rpc':'call'
				(Node, 'dbg', 'deliver_and_flush', [Port|[]])
		    in  %% Line 353
			case _cor2 of
			  %% Line 354
			  <[0]> when 'true' ->
			      %% Line 355
			      'ok'
			  %% Line 356
			  <_cor8> when 'true' ->
			      %% Line 357
			      {'error','not_supported_by_trace_driver'}
			end
		%% Line 359
		<_cor9> when 'true' ->
		    %% Line 360
		    {'error','no_trace_driver'}
	      end
	  %% Line 362
	  <Node,'get_listen_port'> when 'true' ->
	      %% Line 363
	      case apply 'trace_port_control'/3
		       (Node, 112, []) of
		%% Line 364
		<{'ok',#{#<0>(8,1,'integer',['unsigned'|['big']]),
			 #<IpPort>(16,1,'integer',['unsigned'|['big']])}#}> when 'true' ->
		    %% Line 365
		    {'ok',IpPort}
		%% Line 366
		<{'ok',_X_Other}> when 'true' ->
		    %% Line 367
		    {'error','not_supported_by_trace_driver'}
		%% Line 368
		<Other> when 'true' ->
		    %% Line 369
		    Other
	      end
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'trace_port_control',2}}] )
	    -| ['compiler_generated'] )
	end
'trace_port_control'/3 =
    %% Line 372
    fun (_cor2,_cor1,_cor0) ->
	%% Line 373
	case apply 'get_tracer'/1
		 (_cor2) of
	  %% Line 374
	  <{'ok',Port}>
	      when call 'erlang':'is_port'
		    (Port) ->
	      let <_cor3> =
		  catch
		      %% Line 375
		      call 'rpc':'call'
			  (_cor2, 'erlang', 'port_control', [Port|[_cor1|[_cor0|[]]]])
	      in  %% Line 375
		  {'ok',_cor3}
	  %% Line 376
	  <_cor8> when 'true' ->
	      %% Line 377
	      {'error','no_trace_driver'}
	end
'deliver_and_flush'/1 =
    %% Line 382
    fun (_cor0) ->
	let <Ref> =
	    %% Line 383
	    call 'erlang':'trace_delivered'
		('all')
	in  do  %% Line 384
		receive
		  %% Line 385
		  <{'trace_delivered','all',_cor3}>
		      when call 'erlang':'=:='
			    (_cor3,
			     Ref) ->
		      'ok'
		after 'infinity' ->
		  'ok'
		%% Line 387
		call 'erlang':'port_control'
		    (_cor0, 102, [])
'trace_port'/2 =
    %% Line 390
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'file',{Filename,'wrap',Tail}> when 'true' ->
	      %% Line 391
	      apply 'trace_port'/2
		  ('file', {Filename,'wrap',Tail,131072})
	  %% Line 392
	  <'file',{Filename,'wrap',Tail,WrapSize}> when 'true' ->
	      %% Line 393
	      apply 'trace_port'/2
		  ('file', {Filename,'wrap',Tail,WrapSize,8})
	  %% Line 394
	  <'file',{Filename,'wrap',Tail,WrapSize,WrapCnt}>
	      when %% Line 395
		try
		    let <_cor3> =
			call 'erlang':'is_list'
			    (Tail)
		    in  let <_cor4> =
			    %% Line 396
			    call 'erlang':'is_integer'
				(WrapSize)
			in  let <_cor5> =
				%% Line 396
				call 'erlang':'>='
				    (WrapSize, 0)
			    in  let <_cor7> =
				    %% Line 396
				    call 'erlang':'<'
					(WrapSize, 4294967296)
				in  let <_cor8> =
					%% Line 397
					call 'erlang':'is_integer'
					    (WrapCnt)
				    in  let <_cor9> =
					    %% Line 397
					    call 'erlang':'>='
						(WrapCnt, 1)
					in  let <_cor11> =
						%% Line 397
						call 'erlang':'<'
						    (WrapCnt, 4294967296)
					    in  let <_cor12> =
						    call 'erlang':'and'
							(_cor9, _cor11)
						in  let <_cor13> =
							call 'erlang':'and'
							    (_cor8, _cor12)
						    in  let <_cor14> =
							    call 'erlang':'and'
								(_cor7, _cor13)
							in  let <_cor15> =
								call 'erlang':'and'
								    (_cor5, _cor14)
							    in  let <_cor16> =
								    call 'erlang':'and'
									(_cor4, _cor15)
								in  call 'erlang':'and'
									(_cor3, _cor16)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 398
	      apply 'trace_port1'/3
		  ('file', Filename, {'wrap',Tail,WrapSize,WrapCnt,0})
	  %% Line 399
	  <'file',{Filename,'wrap',Tail,{'time',WrapTime},WrapCnt}>
	      when %% Line 400
		try
		    let <_cor17> =
			call 'erlang':'is_list'
			    (Tail)
		    in  let <_cor18> =
			    %% Line 401
			    call 'erlang':'is_integer'
				(WrapTime)
			in  let <_cor19> =
				%% Line 401
				call 'erlang':'>='
				    (WrapTime, 1)
			    in  let <_cor21> =
				    %% Line 401
				    call 'erlang':'<'
					(WrapTime, 4294967296)
				in  let <_cor22> =
					%% Line 402
					call 'erlang':'is_integer'
					    (WrapCnt)
				    in  let <_cor23> =
					    %% Line 402
					    call 'erlang':'>='
						(WrapCnt, 1)
					in  let <_cor25> =
						%% Line 402
						call 'erlang':'<'
						    (WrapCnt, 4294967296)
					    in  let <_cor26> =
						    call 'erlang':'and'
							(_cor23, _cor25)
						in  let <_cor27> =
							call 'erlang':'and'
							    (_cor22, _cor26)
						    in  let <_cor28> =
							    call 'erlang':'and'
								(_cor21, _cor27)
							in  let <_cor29> =
								call 'erlang':'and'
								    (_cor19, _cor28)
							    in  let <_cor30> =
								    call 'erlang':'and'
									(_cor18, _cor29)
								in  call 'erlang':'and'
									(_cor17, _cor30)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 403
	      apply 'trace_port1'/3
		  ('file', Filename, {'wrap',Tail,0,WrapCnt,WrapTime})
	  %% Line 404
	  <'file',Filename> when 'true' ->
	      %% Line 405
	      apply 'trace_port1'/3
		  ('file', Filename, 'nowrap')
	  %% Line 407
	  <'ip',Portno>
	      when call 'erlang':'is_integer'
		    (Portno) ->
	      %% Line 408
	      apply 'trace_port'/2
		  ('ip', {Portno,50})
	  %% Line 410
	  <'ip',{Portno,Qsiz}>
	      when let <_cor31> =
		    call 'erlang':'is_integer'
			(Portno)
		in  let <_cor32> =
			call 'erlang':'is_integer'
			    (Qsiz)
		    in  call 'erlang':'and'
			    (_cor31, _cor32) ->
	      %% Line 411
	      ( fun () ->
		    let <_cor34> =
			%% Line 413
			call 'code':'priv_dir'
			    ('runtime_tools')
		    in  let <Dir1> =
			    %% Line 413
			    call 'filename':'join'
				(_cor34, [108|[105|[98]]])
			in  let <_cor36> =
				catch
				    %% Line 414
				    call 'erl_ddll':'load_driver'
					(Dir1, [116|[114|[97|[99|[101|[95|[105|[112|[95|[100|[114|[118]]]]]]]]]]]])
			    in  do  %% Line 414
				    case _cor36 of
				      %% Line 415
				      <'ok'> when 'true' ->
					  'ok'
				      %% Line 417
				      <_cor44> when 'true' ->
					  let <_cor37> =
					      %% Line 420
					      call 'erlang':'system_info'
						  ('system_architecture')
					  in  let <Dir2> =
						  %% Line 418
						  call 'filename':'join'
						      (%% Line 419
						       Dir1, _cor37)
					      in  catch
						      %% Line 421
						      call 'erl_ddll':'load_driver'
							  (Dir2, [116|[114|[97|[99|[101|[95|[105|[112|[95|[100|[114|[118]]]]]]]]]]]])
				    end
				    let <_cor40> =
					%% Line 424
					call 'io_lib':'format'
					    ([126|[115|[32|[126|[112|[32|[126|[112|[32|[50]]]]]]]]]], %% Line 425
												      [[116|[114|[97|[99|[101|[95|[105|[112|[95|[100|[114|[118]]]]]]]]]]]]|[Portno|[Qsiz|[]]]])
				    in  let <L> =
					    %% Line 423
					    call 'lists':'flatten'
						(_cor40)
					in  %% Line 426
					    call 'erlang':'open_port'
						({'spawn',L}, ['eof'])
		-| [{'id',{0,0,'-trace_port/2-fun-0-'}}] )
	  ( <_cor43,_cor42> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor43,_cor42})
		  -| [{'function_name',{'trace_port',2}}] )
	    -| ['compiler_generated'] )
	end
'trace_port1'/3 =
    %% Line 429
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'file',Filename,Options> when 'true' ->
	      %% Line 431
	      ( fun () ->
		    let <Name> =
			%% Line 432
			call 'filename':'absname'
			    (Filename)
		    in  let <Wrap,Tail> =
			    %% Line 440
			    case Options of
			      %% Line 441
			      <{'wrap',T,WrapSize,WrapCnt,WrapTime}> when 'true' ->
				  let <_cor5> =
				      %% Line 445
				      call 'erlang':'length'
					  (Name)
				  in  let <_cor6> =
					  %% Line 443
					  call 'io_lib':'format'
					      ([119|[32|[126|[112|[32|[126|[112|[32|[126|[112|[32|[126|[112|[32]]]]]]]]]]]]]], %% Line 444
															       [WrapSize|[WrapCnt|[WrapTime|%% Line 445
																			    [_cor5|[]]]]])
				      in  let <_cor7> =
					      %% Line 442
					      call 'lists':'flatten'
						  (_cor6)
					  in  <_cor7,%% Line 446
						     T>
			      %% Line 447
			      <'nowrap'> when 'true' ->
				  %% Line 448
				  <[],[]>
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor8})
				-| ['compiler_generated'] )
			    end
			in  let <_cor11> =
				%% Line 450
				call 'erlang':'++'
				    (Name, Tail)
			    in  let <_cor12> =
				    %% Line 450
				    [110|[32|_cor11]]
				in  let <_cor13> =
					%% Line 450
					call 'erlang':'++'
					    (Wrap, _cor12)
				    in  let <_cor14> =
					    %% Line 450
					    [32|_cor13]
					in  let <Command> =
						%% Line 450
						call 'erlang':'++'
						    ([116|[114|[97|[99|[101|[95|[102|[105|[108|[101|[95|[100|[114|[118]]]]]]]]]]]]]], _cor14)
					    in  let <_cor16> =
						    %% Line 451
						    call 'code':'priv_dir'
							('runtime_tools')
						in  let <Dir1> =
							%% Line 451
							call 'filename':'join'
							    (_cor16, [108|[105|[98]]])
						    in  let <_cor18> =
							    catch
								%% Line 452
								call 'erl_ddll':'load_driver'
								    (Dir1, [116|[114|[97|[99|[101|[95|[102|[105|[108|[101|[95|[100|[114|[118]]]]]]]]]]]]]])
							in  do  %% Line 452
								case _cor18 of
								  %% Line 453
								  <'ok'> when 'true' ->
								      'ok'
								  %% Line 455
								  <_cor31> when 'true' ->
								      let <_cor19> =
									  %% Line 458
									  call 'erlang':'system_info'
									      ('system_architecture')
								      in  let <Dir2> =
									      %% Line 456
									      call 'filename':'join'
										  (%% Line 457
										   Dir1, _cor19)
									  in  catch
										  %% Line 459
										  call 'erl_ddll':'load_driver'
										      (Dir2, [116|[114|[97|[99|[101|[95|[102|[105|[108|[101|[95|[100|[114|[118]]]]]]]]]]]]]])
								end
								do  %% Line 461
								    case <> of
								      <>
									  when try
										let <_cor22> =
										    call 'erlang':'element'
											(1, Options)
										in  call 'erlang':'=:='
											(_cor22, 'wrap')
									    of <Try> ->
										Try
									    catch <T,R> ->
										'false' ->
									  let <_cor23> =
									      %% Line 463
									      apply 'wrap_presort'/2
										  (Name, Tail)
									  in  let <Files> =
										  %% Line 463
										  apply 'wrap_postsort'/1
										      (_cor23)
									      in  let <_cor27> =
										      %% Line 465
										      ( fun (_cor25) ->
											    call 'file':'delete'
												(_cor25)
											-| [{'id',{0,0,'-trace_port1/3-fun-0-'}}] )
										  in  %% Line 464
										      call 'lists':'foreach'
											  (_cor27, %% Line 466
												   Files)
								      %% Line 467
								      <> when 'true' ->
									  'ok'
								    end
								    %% Line 469
								    call 'erlang':'open_port'
									({'spawn',Command}, ['eof'])
		-| [{'id',{0,0,'-trace_port1/3-fun-1-'}}] )
	  ( <_cor30,_cor29,_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor30,_cor29,_cor28})
		  -| [{'function_name',{'trace_port1',3}}] )
	    -| ['compiler_generated'] )
	end
'trace_client'/2 =
    %% Line 473
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'file',Filename> when 'true' ->
	      %% Line 474
	      apply 'trace_client'/3
		  ('file', Filename, {( 'dhandler'/2
					-| [{'id',{0,0,'-trace_client/2-fun-0-'}}] ),'user'})
	  %% Line 475
	  <'follow_file',Filename> when 'true' ->
	      %% Line 476
	      apply 'trace_client'/3
		  ('follow_file', Filename, {( 'dhandler'/2
					       -| [{'id',{0,0,'-trace_client/2-fun-1-'}}] ),'user'})
	  %% Line 477
	  <'ip',Portno>
	      when call 'erlang':'is_integer'
		    (Portno) ->
	      %% Line 478
	      apply 'trace_client1'/3
		  ('ip', {[108|[111|[99|[97|[108|[104|[111|[115|[116]]]]]]]]],Portno}, {( 'dhandler'/2
											  -| [{'id',{0,0,'-trace_client/2-fun-2-'}}] ),'user'})
	  %% Line 479
	  <'ip',{Host,Portno}>
	      when call 'erlang':'is_integer'
		    (Portno) ->
	      %% Line 480
	      apply 'trace_client1'/3
		  ('ip', {Host,Portno}, {( 'dhandler'/2
					   -| [{'id',{0,0,'-trace_client/2-fun-3-'}}] ),'user'})
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'trace_client',2}}] )
	    -| ['compiler_generated'] )
	end
'trace_client'/3 =
    %% Line 482
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'file',{Filename,'wrap',Tail},FD> when 'true' ->
	      %% Line 483
	      apply 'trace_client'/3
		  ('file', {Filename,'wrap',Tail,131072}, FD)
	  %% Line 484
	  <'file',{Filename,'wrap',Tail,WrapSize},FD> when 'true' ->
	      %% Line 485
	      apply 'trace_client'/3
		  ('file', {Filename,'wrap',Tail,WrapSize,8}, FD)
	  %% Line 486
	  <'file',WrapSpec = %% Line 487
			     {_X_Filename,'wrap',Tail,_X_WrapSize,WrapCnt},FD = %% Line 488
										{Fun,_X_Data}>
	      when %% Line 489
		try
		    let <_cor4> =
			call 'erlang':'is_list'
			    (Tail)
		    in  let <_cor5> =
			    call 'erlang':'is_function'
				(Fun)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (WrapCnt)
			    in  let <_cor7> =
				    call 'erlang':'>='
					(WrapCnt, 1)
				in  let <_cor8> =
					call 'erlang':'and'
					    (_cor6, _cor7)
				    in  let <_cor9> =
					    call 'erlang':'and'
						(_cor5, _cor8)
					in  call 'erlang':'and'
						(_cor4, _cor9)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 490
	      apply 'trace_client1'/3
		  ('file', WrapSpec, FD)
	  %% Line 491
	  <'file',Filename,{Fun,Data}>
	      when call 'erlang':'is_function'
		    (Fun) ->
	      %% Line 492
	      apply 'trace_client1'/3
		  ('file', Filename, {Fun,Data})
	  %% Line 493
	  <'follow_file',Filename,{Fun,Data}>
	      when call 'erlang':'is_function'
		    (Fun) ->
	      %% Line 494
	      apply 'trace_client1'/3
		  ('follow_file', Filename, {Fun,Data})
	  %% Line 495
	  <'ip',Portno,{Fun,Data}>
	      when try
		    let <_cor10> =
			call 'erlang':'is_integer'
			    (Portno)
		    in  let <_cor11> =
			    call 'erlang':'is_function'
				(Fun)
			in  call 'erlang':'and'
				(_cor10, _cor11)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 496
	      apply 'trace_client1'/3
		  ('ip', {[108|[111|[99|[97|[108|[104|[111|[115|[116]]]]]]]]],Portno}, {Fun,Data})
	  %% Line 497
	  <'ip',{Host,Portno},{Fun,Data}>
	      when try
		    let <_cor12> =
			call 'erlang':'is_integer'
			    (Portno)
		    in  let <_cor13> =
			    %% Line 498
			    call 'erlang':'is_function'
				(Fun)
			in  call 'erlang':'and'
				(_cor12, _cor13)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 499
	      apply 'trace_client1'/3
		  ('ip', {Host,Portno}, {Fun,Data})
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'trace_client',3}}] )
	    -| ['compiler_generated'] )
	end
'trace_client1'/3 =
    %% Line 501
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Type,OpenData,{Handler,HData}> when 'true' ->
	      let <_cor4> =
		  %% Line 504
		  ( fun () ->
			let <_cor3> =
			    %% Line 505
			    apply 'gen_reader'/2
				(Type, OpenData)
			in  %% Line 505
			    apply 'tc_loop'/3
				(_cor3, Handler, HData)
		    -| [{'id',{0,0,'-trace_client1/3-fun-0-'}}] )
	      in  let <_cor5> =
		      %% Line 503
		      call 'erlang':'spawn'
			  (_cor4)
		  in  %% Line 502
		      case apply 'req'/1
			       ({'link_to',_cor5}) of
			%% Line 507
			<{'ok',Pid}> when 'true' ->
			    %% Line 508
			    Pid
			%% Line 509
			<Other> when 'true' ->
			    %% Line 510
			    Other
		      end
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'trace_client1',3}}] )
	    -| ['compiler_generated'] )
	end
'stop_trace_client'/1 =
    %% Line 513
    fun (_cor0) ->
	case _cor0 of
	  <Pid>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      do  %% Line 514
		  call 'erlang':'process_flag'
		      ('trap_exit', 'true')
		  do  %% Line 515
		      call 'erlang':'link'
			  (Pid)
		      let <_cor1> =
			  %% Line 516
			  apply 'to_pidspec'/1
			      (Pid)
		      in  do  %% Line 516
			      call 'erlang':'exit'
				  (_cor1, 'abnormal')
			      let <_cor2> =
				  %% Line 517
				  receive
				    %% Line 518
				    <{'EXIT',_cor5,_cor6}>
					when call 'erlang':'=:='
					      (_cor5,
					       Pid) ->
					%% Line 519
					'ok'
				  after %% Line 520
					5000 ->
				    %% Line 521
				    {'error','timeout'}
			      in  do  %% Line 523
				      call 'erlang':'process_flag'
					  ('trap_exit', 'false')
				      _cor2
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'stop_trace_client',1}}] )
	    -| ['compiler_generated'] )
	end
'p'/1 =
    %% Line 526
    fun (_cor0) ->
	%% Line 527
	apply 'p'/2
	    (_cor0, ['m'])
'p'/2 =
    %% Line 529
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pid,Flags>
	      when call 'erlang':'is_atom'
		    (Flags) ->
	      %% Line 530
	      apply 'p'/2
		  (Pid, [Flags|[]])
	  %% Line 531
	  <Pid,Flags> when 'true' ->
	      %% Line 532
	      apply 'req'/1
		  ({'p',Pid,Flags})
	end
'i'/0 =
    %% Line 534
    fun () ->
	apply 'req'/1
	    ('i')
'c'/3 =
    %% Line 536
    fun (_cor2,_cor1,_cor0) ->
	%% Line 537
	apply 'c'/4
	    (_cor2, _cor1, _cor0, 'all')
'c'/4 =
    %% Line 538
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <M,F,A,Flags>
	      when call 'erlang':'is_atom'
		    (Flags) ->
	      %% Line 539
	      apply 'c'/4
		  (M, F, A, [Flags|[]])
	  %% Line 540
	  <M,F,A,Flags> when 'true' ->
	      %% Line 541
	      case apply 'transform_flags'/1
		       (Flags) of
		%% Line 542
		<{'error',Reason}> when 'true' ->
		    {'error',Reason}
		%% Line 543
		<Flags1> when 'true' ->
		    do  %% Line 544
			apply 'tracer'/0
			    ()
			%% Line 545
			case apply 'get_tracer'/0
				 () of
			  <{'ok',Tracer}> when 'true' ->
			      let <S> =
				  %% Line 546
				  call 'erlang':'self'
				      ()
			      in  let <_cor6> =
				      %% Line 547
				      ( fun () ->
					    apply 'c'/5
						(S, M, F, A, [{'tracer',Tracer}|Flags1])
					-| [{'id',{0,0,'-c/4-fun-0-'}}] )
				  in  let <Pid> =
					  %% Line 547
					  call 'erlang':'spawn'
					      (_cor6)
				      in  let <Mref> =
					      %% Line 548
					      call 'erlang':'monitor'
						  ('process', Pid)
					  in  %% Line 549
					      receive
						%% Line 550
						<{'DOWN',_cor14,_cor15,_cor16,Reason}>
						    when call 'erlang':'=:='
							  (_cor14,
							   Mref) ->
						    do  %% Line 551
							apply 'stop_clear'/0
							    ()
							%% Line 552
							{'error',Reason}
						%% Line 553
						<{_cor17,Res}>
						    when call 'erlang':'=:='
							  (_cor17,
							   Pid) ->
						    do  %% Line 554
							call 'erlang':'demonitor'
							    (Mref, ['flush'])
							do  %% Line 557
							    call 'timer':'sleep'
								(1)
							    do  %% Line 558
								apply 'stop_clear'/0
								    ()
								%% Line 559
								Res
					      after 'infinity' ->
						'true'
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor4})
			    -| ['compiler_generated'] )
			end
	      end
	end
'c'/5 =
    %% Line 563
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 567
	    call 'erlang':'self'
		()
	in  do  %% Line 567
		call 'erlang':'trace'
		    (_cor5, 'true', _cor0)
		let <Res> =
		    %% Line 568
		    call 'erlang':'apply'
			(_cor3, _cor2, _cor1)
		in  let <_cor7> =
			%% Line 569
			call 'erlang':'self'
			    ()
		    in  do  %% Line 569
			    call 'erlang':'trace'
				(_cor7, 'false', ['all'])
			    let <_cor8> =
				%% Line 570
				call 'erlang':'self'
				    ()
			    in  %% Line 570
				call 'erlang':'!'
				    (_cor4, {_cor8,Res})
'stop'/0 =
    %% Line 572
    fun () ->
	let <Mref> =
	    %% Line 573
	    call 'erlang':'monitor'
		('process', 'dbg')
	in  do  catch
		    let <_cor1> =
			%% Line 574
			call 'erlang':'self'
			    ()
		    in  %% Line 574
			call 'erlang':'!'
			    ('dbg', {_cor1,'stop'})
		%% Line 575
		receive
		  %% Line 576
		  <{'DOWN',_cor2,_cor3,_cor4,_cor5}>
		      when call 'erlang':'=:='
			    (_cor2,
			     Mref) ->
		      %% Line 577
		      'ok'
		after 'infinity' ->
		  'true'
'stop_clear'/0 =
    %% Line 580
    fun () ->
	do  %% Line 581
	    apply 'ctp'/0
		()
	    %% Line 582
	    apply 'stop'/0
		()
'req'/1 =
    %% Line 586
    fun (_cor0) ->
	let <P> =
	    %% Line 587
	    apply 'ensure'/0
		()
	in  let <Mref> =
		%% Line 588
		call 'erlang':'monitor'
		    ('process', P)
	    in  do  catch
			let <_cor3> =
			    %% Line 589
			    call 'erlang':'self'
				()
			in  %% Line 589
			    call 'erlang':'!'
				(P, {_cor3,_cor0})
		    %% Line 590
		    receive
		      %% Line 591
		      <{'DOWN',_cor5,_cor6,_cor7,_cor8}>
			  when call 'erlang':'=:='
				(_cor5,
				 Mref) ->
			  %% Line 592
			  call 'erlang':'exit'
			      ('dbg_server_crash')
		      %% Line 593
		      <{'dbg',Reply}> when 'true' ->
			  do  %% Line 594
			      call 'erlang':'demonitor'
				  (Mref, ['flush'])
			      %% Line 595
			      Reply
		    after 'infinity' ->
		      'true'
'ensure'/0 =
    %% Line 600
    fun () ->
	%% Line 601
	case call 'erlang':'whereis'
		 ('dbg') of
	  %% Line 602
	  <'undefined'> when 'true' ->
	      %% Line 603
	      case apply 'start'/0
		       () of
		%% Line 604
		<{'ok',P}> when 'true' ->
		    %% Line 605
		    P
		%% Line 606
		<{'error','already_started'}> when 'true' ->
		    %% Line 607
		    'dbg'
		( <_cor0> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor0})
		  -| ['compiler_generated'] )
	      end
	  %% Line 609
	  <Pid> when 'true' ->
	      %% Line 610
	      Pid
	end
'start'/0 =
    %% Line 615
    fun () ->
	%% Line 616
	apply 'start'/1
	    ('no_tracer')
'start'/1 =
    %% Line 618
    fun (_cor0) ->
	let <S> =
	    %% Line 619
	    call 'erlang':'self'
		()
	in  %% Line 620
	    case call 'erlang':'whereis'
		     ('dbg') of
	      %% Line 621
	      <'undefined'> when 'true' ->
		  let <_cor2> =
		      %% Line 622
		      ( fun () ->
			    apply 'init'/1
				(S)
			-| [{'id',{0,0,'-start/1-fun-0-'}}] )
		  in  let <Dbg> =
			  %% Line 622
			  call 'erlang':'spawn'
			      (_cor2)
		      in  do  %% Line 623
			      receive
				<{_cor9,'started'}>
				    when call 'erlang':'=:='
					  (_cor9,
					   Dbg) ->
				    'ok'
			      after 'infinity' ->
				'ok'
			      %% Line 624
			      case _cor0 of
				%% Line 625
				<'no_tracer'> when 'true' ->
				    %% Line 626
				    {'ok',Dbg}
				%% Line 627
				<Fun>
				    when call 'erlang':'is_function'
					  (_cor0) ->
				    %% Line 628
				    apply 'req'/1
					({'tracer',_cor0})
				( <_cor4> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor4})
				  -| ['compiler_generated'] )
			      end
	      %% Line 630
	      <Pid>
		  when try
			let <_cor5> =
			    call 'erlang':'is_pid'
				(Pid)
			in  let <_cor6> =
				call 'erlang':'is_function'
				    (_cor0)
			    in  call 'erlang':'and'
				    (_cor5, _cor6)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  %% Line 631
		  apply 'req'/1
		      ({'tracer',_cor0})
	      ( <_cor7> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor7})
		-| ['compiler_generated'] )
	    end
'init'/1 =
    %% Line 634
    fun (_cor0) ->
	do  %% Line 635
	    call 'erlang':'process_flag'
		('trap_exit', 'true')
	    let <_cor1> =
		%% Line 636
		call 'erlang':'self'
		    ()
	    in  do  %% Line 636
		    call 'erlang':'register'
			('dbg', _cor1)
		    let <_cor2> =
			%% Line 637
			call 'erlang':'self'
			    ()
		    in  do  %% Line 637
			    call 'erlang':'!'
				(_cor0, {_cor2,'started'})
			    %% Line 638
			    apply 'loop'/2
				({[],[]}, [])
'loop'/2 =
    %% Line 646
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <SurviveLinks = {C,T},Table> when 'true' ->
	      %% Line 647
	      receive
		%% Line 648
		<{From,'i'}> when 'true' ->
		    let <_cor5> =
			%% Line 649
			( fun (_cor3) ->
			      case _cor3 of
				<{N,_cor44}> when 'true' ->
				    N
				( <_cor4> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor4})
					-| [{'function_name',{'-loop/2-fun-0-',1}}] )
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-loop/2-fun-0-'}}] )
		    in  let <_cor2> =
			    %% Line 649
			    call 'erlang':'get'
				()
			in  let <_cor6> =
				%% Line 649
				call 'lists':'map'
				    (_cor5, _cor2)
			    in  let <_cor7> =
				    %% Line 649
				    apply 'display_info'/1
					(_cor6)
				in  do  %% Line 649
					apply 'reply'/2
					    (From, _cor7)
					%% Line 650
					apply 'loop'/2
					    (SurviveLinks, Table)
		%% Line 651
		<{From,{'p',Pid,Flags}}> when 'true' ->
		    let <_cor8> =
			%% Line 652
			apply 'trace_process'/2
			    (Pid, Flags)
		    in  do  %% Line 652
			    apply 'reply'/2
				(From, _cor8)
			    %% Line 653
			    apply 'loop'/2
				(SurviveLinks, Table)
		%% Line 654
		<{From,{'tracer',TracerFun}}>
		    when call 'erlang':'is_function'
			  (TracerFun) ->
		    let <_cor9> =
			%% Line 655
			call 'erlang':'node'
			    ()
		    in  do  %% Line 655
			    case call 'erlang':'get'
				     (_cor9) of
			      %% Line 656
			      <'undefined'> when 'true' ->
				  let <_cor10> =
				      catch
					  %% Line 657
					  apply TracerFun
					      ()
				  in  %% Line 657
				      case _cor10 of
					%% Line 658
					<{'EXIT',Reason}> when 'true' ->
					    %% Line 659
					    apply 'reply'/2
						(From, {'error',Reason})
					%% Line 660
					<Tracer>
					    when let <_cor11> =
						  call 'erlang':'is_pid'
						      (_cor10)
					      in  let <_cor12> =
						      call 'erlang':'is_port'
							  (_cor10)
						  in  call 'erlang':'or'
							  (_cor11, _cor12) ->
					    let <_cor14> =
						%% Line 661
						call 'erlang':'node'
						    ()
					    in  let <_cor13> =
						    %% Line 661
						    call 'erlang':'self'
							()
						in  do  %% Line 661
							call 'erlang':'put'
							    (_cor14, {_cor13,Tracer})
							let <_cor15> =
							    %% Line 662
							    call 'erlang':'self'
								()
							in  %% Line 662
							    apply 'reply'/2
								(From, {'ok',_cor15})
					( <_cor16> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor16})
					  -| ['compiler_generated'] )
				      end
			      %% Line 664
			      <{_X_Relay,_X_Tracer}> when 'true' ->
				  %% Line 665
				  apply 'reply'/2
				      (From, {'error','already_started'})
			      ( <_cor17> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor17})
				-| ['compiler_generated'] )
			    end
			    %% Line 667
			    apply 'loop'/2
				(SurviveLinks, Table)
		%% Line 668
		<{From,{'get_tracer',Node}}> when 'true' ->
		    do  %% Line 669
			case call 'erlang':'get'
				 (Node) of
			  %% Line 670
			  <'undefined'> when 'true' ->
			      apply 'reply'/2
				  (From, {'error',{'no_tracer_on_node',Node}})
			  %% Line 671
			  <{_X_Relay,Tracer}> when 'true' ->
			      apply 'reply'/2
				  (From, {'ok',Tracer})
			  ( <_cor18> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor18})
			    -| ['compiler_generated'] )
			end
			%% Line 673
			apply 'loop'/2
			    (SurviveLinks, Table)
		%% Line 674
		<{From,'get_table'}> when 'true' ->
		    let <_cor20> =
			%% Line 675
			case Table of
			  %% Line 676
			  <[]> when 'true' ->
			      %% Line 677
			      apply 'new_pattern_table'/0
				  ()
			  %% Line 678
			  <_X_exists> when 'true' ->
			      %% Line 679
			      Table
			end
		    in  do  %% Line 681
			    apply 'reply'/2
				(From, {'ok',_cor20})
			    %% Line 682
			    apply 'loop'/2
				(SurviveLinks, _cor20)
		%% Line 683
		<{_X_From,'stop'}> when 'true' ->
		    let <_cor25> =
			%% Line 690
			( fun (_cor23) ->
			      case _cor23 of
				<{Node,{_X_Relay,Port}}> when 'true' ->
				    %% Line 691
				    call 'rpc':'call'
					(Node, 'dbg', 'deliver_and_flush', [Port|[]])
				( <_cor24> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor24})
					-| [{'function_name',{'-loop/2-fun-1-',1}}] )
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-loop/2-fun-1-'}}] )
		    in  let <_cor22> =
			    %% Line 693
			    call 'erlang':'get'
				()
			in  do  %% Line 690
				call 'lists':'foreach'
				    (_cor25, _cor22)
				%% Line 694
				call 'erlang':'exit'
				    ('done')
		%% Line 695
		<{From,{'link_to',Pid}}> when 'true' ->
		    let <_cor26> =
			catch
			    %% Line 696
			    call 'erlang':'link'
				(Pid)
		    in  %% Line 696
			case _cor26 of
			  %% Line 697
			  <{'EXIT',Reason}> when 'true' ->
			      do  %% Line 698
				  apply 'reply'/2
				      (From, {'error',Reason})
				  %% Line 699
				  apply 'loop'/2
				      (SurviveLinks, Table)
			  %% Line 700
			  <_cor45> when 'true' ->
			      do  %% Line 701
				  apply 'reply'/2
				      (From, {'ok',Pid})
				  %% Line 702
				  apply 'loop'/2
				      ({[Pid|C],T}, Table)
			end
		%% Line 704
		<{From,{'add_node',Node}}> when 'true' ->
		    let <_cor28> =
			%% Line 705
			call 'erlang':'node'
			    ()
		    in  %% Line 705
			case call 'erlang':'get'
				 (_cor28) of
			  %% Line 706
			  <'undefined'> when 'true' ->
			      do  %% Line 707
				  apply 'reply'/2
				      (From, {'error','no_local_tracer'})
				  %% Line 708
				  apply 'loop'/2
				      (SurviveLinks, Table)
			  %% Line 709
			  <{_X_LocalRelay,Tracer}>
			      when call 'erlang':'is_port'
				    (Tracer) ->
			      do  %% Line 710
				  apply 'reply'/2
				      (From, {'error','cant_trace_remote_pid_to_local_port'})
				  %% Line 711
				  apply 'loop'/2
				      (SurviveLinks, Table)
			  %% Line 712
			  <{_X_LocalRelay,Tracer}>
			      when call 'erlang':'is_pid'
				    (Tracer) ->
			      let <_cor29> =
				  catch
				      %% Line 713
				      apply 'relay'/2
					  (Node, Tracer)
			      in  %% Line 713
				  case _cor29 of
				    %% Line 714
				    <{'ok',Relay}> when 'true' ->
					do  %% Line 715
					    apply 'reply'/2
						(From, {'ok',Node})
					    %% Line 716
					    apply 'loop'/2
						({C,[Relay|T]}, Table)
				    %% Line 717
				    <{'EXIT',Something}> when 'true' ->
					do  %% Line 718
					    apply 'reply'/2
						(From, {'error',Something})
					    %% Line 719
					    apply 'loop'/2
						(SurviveLinks, Table)
				    %% Line 720
				    <Error> when 'true' ->
					do  %% Line 721
					    apply 'reply'/2
						(From, Error)
					    %% Line 722
					    apply 'loop'/2
						(SurviveLinks, Table)
				  end
			  ( <_cor31> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor31})
			    -| ['compiler_generated'] )
			end
		%% Line 725
		<{From,{'add_node',Node,Type,Data}}> when 'true' ->
		    let <_cor32> =
			catch
			    %% Line 726
			    apply 'relay'/2
				(Node, {Type,Data})
		    in  %% Line 726
			case _cor32 of
			  %% Line 727
			  <{'ok',Relay}> when 'true' ->
			      do  %% Line 728
				  apply 'reply'/2
				      (From, {'ok',Node})
				  %% Line 729
				  apply 'loop'/2
				      ({C,[Relay|T]}, Table)
			  %% Line 730
			  <{'EXIT',Something}> when 'true' ->
			      do  %% Line 731
				  apply 'reply'/2
				      (From, {'error',Something})
				  %% Line 732
				  apply 'loop'/2
				      (SurviveLinks, Table)
			  %% Line 733
			  <Error> when 'true' ->
			      do  %% Line 734
				  apply 'reply'/2
				      (From, Error)
				  %% Line 735
				  apply 'loop'/2
				      (SurviveLinks, Table)
			end
		%% Line 737
		<{From,{'remove_node',Node}}> when 'true' ->
		    do  %% Line 738
			call 'erlang':'erase'
			    (Node)
			do  %% Line 739
			    apply 'reply'/2
				(From, 'ok')
			    %% Line 740
			    apply 'loop'/2
				(SurviveLinks, Table)
		%% Line 741
		<{From,'get_nodes'}> when 'true' ->
		    let <_cor37> =
			%% Line 742
			( fun (_cor35) ->
			      case _cor35 of
				<{N,_cor46}> when 'true' ->
				    N
				( <_cor36> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor36})
					-| [{'function_name',{'-loop/2-fun-2-',1}}] )
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-loop/2-fun-2-'}}] )
		    in  let <_cor34> =
			    %% Line 742
			    call 'erlang':'get'
				()
			in  let <_cor38> =
				%% Line 742
				call 'lists':'map'
				    (_cor37, _cor34)
			    in  do  %% Line 742
				    apply 'reply'/2
					(From, _cor38)
				    %% Line 743
				    apply 'loop'/2
					(SurviveLinks, Table)
		%% Line 744
		<{'EXIT',Pid,Reason}> when 'true' ->
		    %% Line 745
		    case call 'lists':'delete'
			     (Pid, C) of
		      %% Line 746
		      <_cor47>
			  when call 'erlang':'=:='
				(_cor47,
				 C) ->
			  %% Line 747
			  case call 'lists':'delete'
				   (Pid, T) of
			    %% Line 748
			    <_cor48>
				when call 'erlang':'=:='
				      (_cor48,
				       T) ->
				do  %% Line 749
				    call 'io':'format'
					('user', [42|[42|[32|[100|[98|[103|[32|[103|[111|[116|[32|[69|[88|[73|[84|[32|[45|[32|[116|[101|[114|[109|[105|[110|[97|[116|[105|[110|[103|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 750
																														    [Reason|[]])
				    %% Line 751
				    call 'erlang':'exit'
					('done')
			    %% Line 752
			    <NewT> when 'true' ->
				let <_cor39> =
				    %% Line 753
				    call 'erlang':'node'
					(Pid)
				in  do  %% Line 753
					call 'erlang':'erase'
					    (_cor39)
					%% Line 754
					apply 'loop'/2
					    ({C,NewT}, Table)
			  end
		      %% Line 756
		      <NewC> when 'true' ->
			  %% Line 757
			  apply 'loop'/2
			      ({NewC,T}, Table)
		    end
		%% Line 759
		<Other> when 'true' ->
		    do  %% Line 760
			call 'io':'format'
			    ('user', [42|[42|[32|[100|[98|[103|[32|[103|[111|[116|[32|[103|[97|[114|[98|[97|[103|[101|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]], %% Line 761
																					   [{Other,SurviveLinks,Table}|[]])
			%% Line 762
			apply 'loop'/2
			    (SurviveLinks, Table)
	      after 'infinity' ->
		'true'
	  ( <_cor43,_cor42> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor43,_cor42})
		  -| [{'function_name',{'loop',2}}] )
	    -| ['compiler_generated'] )
	end
'reply'/2 =
    %% Line 765
    fun (_cor1,_cor0) ->
	%% Line 766
	call 'erlang':'!'
	    (_cor1, {'dbg',_cor0})
'start_tracer_process'/2 =
    %% Line 771
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 772
	    ( fun () ->
		  apply 'tracer_init'/2
		      (_cor1, _cor0)
	      -| [{'id',{0,0,'-start_tracer_process/2-fun-0-'}}] )
	in  %% Line 772
	    call 'erlang':'spawn_opt'
		(_cor2, %% Line 773
			['link'|[{'priority','max'}]])
'tracer_init'/2 =
    %% Line 776
    fun (_cor1,_cor0) ->
	do  %% Line 777
	    call 'erlang':'process_flag'
		('trap_exit', 'true')
	    %% Line 778
	    apply 'tracer_loop'/2
		(_cor1, _cor0)
'tracer_loop'/2 =
    %% Line 780
    fun (_cor1,_cor0) ->
	%% Line 781
	receive
	  %% Line 782
	  <Msg> when 'true' ->
	      %% Line 785
	      case Msg of
		%% Line 786
		<{'EXIT',_X_Pid,_X_Reason}> when 'true' ->
		    %% Line 787
		    'ok'
		%% Line 788
		<Trace> when 'true' ->
		    let <NewData> =
			%% Line 789
			apply 'recv_all_traces'/3
			    (Trace, _cor1, _cor0)
		    in  %% Line 790
			apply 'tracer_loop'/2
			    (_cor1, NewData)
	      end
	after 'infinity' ->
	  'true'
'recv_all_traces'/3 =
    %% Line 794
    fun (_cor2,_cor1,_cor0) ->
	let <Suspended> =
	    %% Line 795
	    apply 'suspend'/2
		(_cor2, [])
	in  %% Line 796
	    apply 'recv_all_traces'/4
		(Suspended, _cor1, _cor0, [_cor2|[]])
'recv_all_traces'/4 =
    %% Line 798
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 799
	receive
	  %% Line 800
	  <Trace>
	      when try
		    let <_cor6> =
			call 'erlang':'is_tuple'
			    (Trace)
		    in  let <_cor7> =
			    call 'erlang':'element'
				(1, Trace)
			in  let <_cor8> =
				call 'erlang':'=:='
				    (_cor7, 'trace')
			    in  call 'erlang':'and'
				    (_cor6, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <Suspended> =
		  %% Line 801
		  apply 'suspend'/2
		      (Trace, _cor3)
	      in  %% Line 802
		  apply 'recv_all_traces'/4
		      (Suspended, _cor2, _cor1, [Trace|_cor0])
	  %% Line 803
	  <Trace>
	      when try
		    let <_cor10> =
			call 'erlang':'is_tuple'
			    (Trace)
		    in  let <_cor11> =
			    call 'erlang':'element'
				(1, Trace)
			in  let <_cor12> =
				call 'erlang':'=:='
				    (_cor11, 'trace_ts')
			    in  call 'erlang':'and'
				    (_cor10, _cor12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <Suspended> =
		  %% Line 804
		  apply 'suspend'/2
		      (Trace, _cor3)
	      in  %% Line 805
		  apply 'recv_all_traces'/4
		      (Suspended, _cor2, _cor1, [Trace|_cor0])
	  %% Line 806
	  <Trace>
	      when try
		    let <_cor14> =
			call 'erlang':'is_tuple'
			    (Trace)
		    in  let <_cor15> =
			    call 'erlang':'element'
				(1, Trace)
			in  let <_cor16> =
				call 'erlang':'=:='
				    (_cor15, 'seq_trace')
			    in  call 'erlang':'and'
				    (_cor14, _cor16)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <Suspended> =
		  %% Line 807
		  apply 'suspend'/2
		      (Trace, _cor3)
	      in  %% Line 808
		  apply 'recv_all_traces'/4
		      (Suspended, _cor2, _cor1, [Trace|_cor0])
	  %% Line 809
	  <Trace>
	      when try
		    let <_cor18> =
			call 'erlang':'is_tuple'
			    (Trace)
		    in  let <_cor19> =
			    call 'erlang':'element'
				(1, Trace)
			in  let <_cor20> =
				call 'erlang':'=:='
				    (_cor19, 'drop')
			    in  call 'erlang':'and'
				    (_cor18, _cor20)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <Suspended> =
		  %% Line 810
		  apply 'suspend'/2
		      (Trace, _cor3)
	      in  %% Line 811
		  apply 'recv_all_traces'/4
		      (Suspended, _cor2, _cor1, [Trace|_cor0])
	  %% Line 812
	  <Other> when 'true' ->
	      do  %% Line 814
		  call 'io':'format'
		      ('user', [42|[42|[32|[116|[114|[97|[99|[101|[114|[32|[114|[101|[99|[101|[105|[118|[101|[100|[32|[103|[97|[114|[98|[97|[103|[101|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Other|[]])
		  %% Line 815
		  apply 'recv_all_traces'/4
		      (_cor3, _cor2, _cor1, _cor0)
	after %% Line 816
	      0 ->
	  let <_cor4> =
	      catch
		  %% Line 817
		  apply 'invoke_handler'/3
		      (_cor0, _cor2, _cor1)
	  in  %% Line 817
	      case _cor4 of
		%% Line 818
		<{'EXIT',Reason}> when 'true' ->
		    do  %% Line 819
			apply 'resume'/1
			    (_cor3)
			%% Line 820
			call 'erlang':'exit'
			    ({'trace_handler_crashed',Reason})
		%% Line 821
		<NewHdata> when 'true' ->
		    do  %% Line 822
			apply 'resume'/1
			    (_cor3)
			%% Line 823
			NewHdata
	      end
'invoke_handler'/3 =
    %% Line 827
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Tr|Traces],Handler,Hdata0> when 'true' ->
	      let <Hdata> =
		  %% Line 828
		  apply 'invoke_handler'/3
		      (Traces, Handler, Hdata0)
	      in  %% Line 829
		  apply Handler
		      (Tr, Hdata)
	  %% Line 830
	  <[],_X_Handler,Hdata> when 'true' ->
	      %% Line 831
	      Hdata
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'invoke_handler',3}}] )
	    -| ['compiler_generated'] )
	end
'suspend'/2 =
    %% Line 833
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'trace',From,'call',_X_Func},Suspended>
	      when try
		    let <_cor3> =
			call 'erlang':'node'
			    (From)
		    in  let <_cor2> =
			    call 'erlang':'node'
				()
			in  call 'erlang':'=='
				(_cor3, _cor2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor4> =
		  catch
		      %% Line 834
		      call 'erlang':'suspend_process'
			  (From, ['unless_suspending'|['asynchronous']])
	      in  %% Line 834
		  case _cor4 of
		    %% Line 836
		    <'true'> when 'true' ->
			%% Line 837
			[From|Suspended]
		    %% Line 838
		    <_cor8> when 'true' ->
			%% Line 839
			Suspended
		  end
	  %% Line 841
	  <_X_Other,Suspended> when 'true' ->
	      Suspended
	end
'resume'/1 =
    %% Line 843
    fun (_cor0) ->
	case _cor0 of
	  <[Pid|Pids]>
	      when try
		    let <_cor2> =
			call 'erlang':'node'
			    (Pid)
		    in  let <_cor1> =
			    call 'erlang':'node'
				()
			in  call 'erlang':'=='
				(_cor2, _cor1)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  catch
		      %% Line 844
		      call 'erlang':'resume_process'
			  (Pid)
		  %% Line 845
		  apply 'resume'/1
		      (Pids)
	  %% Line 846
	  <[]> when 'true' ->
	      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'resume',1}}] )
	    -| ['compiler_generated'] )
	end
'trac'/3 =
    %% Line 852
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Proc,How,Flags>
	      when call 'erlang':'is_atom'
		    (Proc) ->
	      %% Line 855
	      case call 'erlang':'get'
		       () of
		%% Line 856
		<[]> when 'true' ->
		    %% Line 857
		    {'error','no_tracers'}
		%% Line 858
		<Nodes> when 'true' ->
		    let <_cor8> =
			%% Line 859
			( letrec
			      'lc$^0'/1 =
				  fun (_cor5) ->
				      case _cor5 of
					<[%% Line 860
					  {Node,NodeInfo}|_cor4]> when 'true' ->
					    let <_cor6> =
						apply 'trac'/5
						    (Node, NodeInfo, Proc, How, Flags)
					    in  let <_cor7> =
						    %% Line 860
						    apply 'lc$^0'/1
							(_cor4)
						in  ( [_cor6|_cor7]
						      -| ['compiler_generated'] )
					( <[_cor3|_cor4]> when 'true' ->
					      %% Line 860
					      apply 'lc$^0'/1
						  (_cor4)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor5> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor5})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (%% Line 860
				   Nodes)
			  -| ['list_comprehension'] )
		    in  %% Line 861
			{'ok',_cor8}
	      end
	  %% Line 863
	  <Proc,How,Flags> when 'true' ->
	      let <Pid> =
		  %% Line 866
		  apply 'to_pid'/1
		      (Proc)
	      in  %% Line 867
		  case Pid of
		    %% Line 868
		    <{'badpid',_cor20}> when 'true' ->
			%% Line 869
			{'error',Pid}
		    %% Line 870
		    <_cor21> when 'true' ->
			let <_cor12> =
			    %% Line 871
			    case <> of
			      <>
				  when call 'erlang':'is_pid'
					(Pid) ->
				  call 'erlang':'node'
				      (Pid)
			      <> when 'true' ->
				  call 'erlang':'node'
				      ()
			    end
			in  %% Line 872
			    case call 'erlang':'get'
				     (_cor12) of
			      %% Line 873
			      <'undefined'> when 'true' ->
				  %% Line 874
				  {'error',{'no_tracer_on_node',_cor12}}
			      %% Line 875
			      <NodeInfo> when 'true' ->
				  let <Match> =
				      %% Line 876
				      apply 'trac'/5
					  (_cor12, NodeInfo, Pid, How, Flags)
				  in  %% Line 877
				      {'ok',[Match|[]]}
			    end
		  end
	end
'trac'/5 =
    %% Line 881
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Node,{_X_Relay,Tracer},AtomPid,How,Flags> when 'true' ->
	      %% Line 882
	      case call 'rpc':'call'
		       (Node, 'dbg', 'erlang_trace', %% Line 883
						     [AtomPid|[How|[[{'tracer',Tracer}|Flags]|[]]]]) of
		%% Line 884
		<N>
		    when call 'erlang':'is_integer'
			  (N) ->
		    %% Line 885
		    {'matched',Node,N}
		%% Line 886
		<{'badrpc',Reason}> when 'true' ->
		    %% Line 887
		    {'matched',Node,0,Reason}
		%% Line 888
		<Else> when 'true' ->
		    %% Line 889
		    {'matched',Node,0,Else}
	      end
	  ( <_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'trac',5}}] )
	    -| ['compiler_generated'] )
	end
'erlang_trace'/3 =
    %% Line 892
    fun (_cor2,_cor1,_cor0) ->
	%% Line 893
	case apply 'to_pidspec'/1
		 (_cor2) of
	  %% Line 894
	  <{'badpid',_cor7}> when 'true' ->
	      %% Line 895
	      {'no_proc',_cor2}
	  %% Line 896
	  <P> when 'true' ->
	      %% Line 897
	      call 'erlang':'trace'
		  (P, _cor1, _cor0)
	end
'relay'/2 =
    %% Line 903
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Node,To>
	      when try
		    let <_cor2> =
			call 'erlang':'node'
			    ()
		    in  call 'erlang':'/='
			    (Node, _cor2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 904
	      case call 'erlang':'get'
		       (Node) of
		%% Line 905
		<'undefined'> when 'true' ->
		    let <S> =
			%% Line 906
			call 'erlang':'self'
			    ()
		    in  let <_cor4> =
			    %% Line 907
			    ( fun () ->
				  apply 'do_relay'/2
				      (S, To)
			      -| [{'id',{0,0,'-relay/2-fun-0-'}}] )
			in  let <Pid> =
				%% Line 907
				call 'erlang':'spawn_link'
				    (Node, _cor4)
			    in  do  %% Line 908
				    receive
				      <{'started',Remote}> when 'true' ->
					  call 'erlang':'put'
					      (Node, {Pid,Remote})
				    after 'infinity' ->
				      'ok'
				    %% Line 909
				    {'ok',Pid}
		%% Line 910
		<{_X_Relay,PortOrPid}> when 'true' ->
		    %% Line 911
		    {'error',{'already_started',PortOrPid}}
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'relay',2}}] )
	    -| ['compiler_generated'] )
	end
'do_relay'/2 =
    %% Line 914
    fun (_cor1,_cor0) ->
	do  %% Line 915
	    call 'erlang':'process_flag'
		('trap_exit', 'true')
	    do  %% Line 916
		case _cor0 of
		  %% Line 917
		  <{Type,Data}> when 'true' ->
		      %% Line 918
		      case apply 'remote_tracer'/2
			       (Type, Data) of
			<{'ok',Tracer}> when 'true' ->
			    %% Line 919
			    call 'erlang':'!'
				(_cor1, {'started',Tracer})
			( <_cor2> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor2})
			  -| ['compiler_generated'] )
		      end
		  %% Line 920
		  <Pid>
		      when call 'erlang':'is_pid'
			    (_cor0) ->
		      let <_cor3> =
			  %% Line 921
			  call 'erlang':'self'
			      ()
		      in  %% Line 921
			  call 'erlang':'!'
			      (_cor1, {'started',_cor3})
		  ( <_cor4> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor4})
		    -| ['compiler_generated'] )
		end
		%% Line 923
		apply 'do_relay_1'/1
		    (_cor0)
'do_relay_1'/1 =
    %% Line 925
    fun (_cor0) ->
	%% Line 928
	receive
	  %% Line 929
	  <{'EXIT',_X_P,_cor2}> when 'true' ->
	      %% Line 930
	      call 'erlang':'exit'
		  ('normal')
	  %% Line 931
	  <TraceInfo>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      do  %% Line 932
		  call 'erlang':'!'
		      (_cor0, TraceInfo)
		  %% Line 933
		  apply 'do_relay_1'/1
		      (_cor0)
	  %% Line 934
	  <Other> when 'true' ->
	      do  %% Line 935
		  call 'io':'format'
		      ('user', [42|[42|[32|[114|[101|[108|[97|[121|[32|[103|[111|[116|[32|[103|[97|[114|[98|[97|[103|[101|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]], [Other|[]])
		  %% Line 936
		  apply 'do_relay_1'/1
		      (_cor0)
	after 'infinity' ->
	  'true'
'dhandler'/2 =
    %% Line 939
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'end_of_trace',Out> when 'true' ->
	      %% Line 940
	      Out
	  %% Line 941
	  <Trace,Out>
	      when try
		    let <_cor2> =
			call 'erlang':'element'
			    (1, Trace)
		    in  let <_cor3> =
			    call 'erlang':'=:='
				(_cor2, 'trace')
			in  let <_cor4> =
				call 'erlang':'tuple_size'
				    (Trace)
			    in  let <_cor5> =
				    call 'erlang':'>='
					(_cor4, 3)
				in  call 'erlang':'and'
					(_cor3, _cor5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor6> =
		  %% Line 942
		  call 'erlang':'tuple_size'
		      (Trace)
	      in  %% Line 942
		  apply 'dhandler1'/3
		      (Trace, _cor6, Out)
	  %% Line 943
	  <Trace,Out>
	      when try
		    let <_cor7> =
			call 'erlang':'element'
			    (1, Trace)
		    in  let <_cor8> =
			    call 'erlang':'=:='
				(_cor7, 'trace_ts')
			in  let <_cor9> =
				call 'erlang':'tuple_size'
				    (Trace)
			    in  let <_cor10> =
				    call 'erlang':'>='
					(_cor9, 4)
				in  call 'erlang':'and'
					(_cor8, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor13> =
		  %% Line 944
		  call 'erlang':'tuple_size'
		      (Trace)
	      in  let <_cor14> =
		      %% Line 944
		      call 'erlang':'-'
			  (_cor13, 1)
		  in  let <_cor11> =
			  %% Line 944
			  call 'erlang':'tuple_size'
			      (Trace)
		      in  let <_cor12> =
			      %% Line 944
			      call 'erlang':'element'
				  (_cor11, Trace)
			  in  %% Line 944
			      apply 'dhandler1'/4
				  (Trace, _cor14, _cor12, Out)
	  %% Line 945
	  <Trace,Out>
	      when try
		    let <_cor15> =
			call 'erlang':'element'
			    (1, Trace)
		    in  let <_cor16> =
			    call 'erlang':'=:='
				(_cor15, 'drop')
			in  let <_cor17> =
				call 'erlang':'tuple_size'
				    (Trace)
			    in  let <_cor18> =
				    call 'erlang':'=:='
					(_cor17, 2)
				in  call 'erlang':'and'
					(_cor16, _cor18)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor19> =
		  %% Line 946
		  call 'erlang':'element'
		      (2, Trace)
	      in  do  %% Line 946
		      call 'io':'format'
			  (Out, [42|[42|[42|[32|[68|[114|[111|[112|[112|[101|[100|[32|[126|[112|[32|[109|[101|[115|[115|[97|[103|[101|[115|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor19|[]])
		      %% Line 947
		      Out
	  %% Line 948
	  <Trace,Out>
	      when try
		    let <_cor20> =
			call 'erlang':'element'
			    (1, Trace)
		    in  let <_cor21> =
			    call 'erlang':'=:='
				(_cor20, 'seq_trace')
			in  let <_cor22> =
				call 'erlang':'tuple_size'
				    (Trace)
			    in  let <_cor23> =
				    call 'erlang':'>='
					(_cor22, 3)
				in  call 'erlang':'and'
					(_cor21, _cor23)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor25> =
		  %% Line 949
		  case Trace of
		    %% Line 950
		    <{'seq_trace',Lbl,STI,TS}> when 'true' ->
			do  %% Line 951
			    call 'io':'format'
				(Out, [83|[101|[113|[84|[114|[97|[99|[101|[32|[126|[112|[32|[91|[126|[112|[93|[58|[32]]]]]]]]]]]]]]]]]], %% Line 952
																	 [TS|[Lbl|[]]])
			    %% Line 953
			    STI
		    %% Line 954
		    <{'seq_trace',Lbl,STI}> when 'true' ->
			do  %% Line 955
			    call 'io':'format'
				(Out, [83|[101|[113|[84|[114|[97|[99|[101|[32|[91|[126|[112|[93|[58|[32]]]]]]]]]]]]]]], %% Line 956
															[Lbl|[]])
			    %% Line 957
			    STI
		    ( <_cor24> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor24})
		      -| ['compiler_generated'] )
		  end
	      in  do  %% Line 959
		      case _cor25 of
			%% Line 960
			<{'send',Ser,Fr,To,Mes}> when 'true' ->
			    %% Line 961
			    call 'io':'format'
				(Out, [40|[126|[112|[41|[32|[126|[112|[32|[33|[32|[126|[112|[32|[91|[83|[101|[114|[105|[97|[108|[58|[32|[126|[112|[93|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 962
																							    [Fr|[To|[Mes|[Ser|[]]]]])
			%% Line 963
			<{'receive',Ser,Fr,To,Mes}> when 'true' ->
			    %% Line 964
			    call 'io':'format'
				(Out, [40|[126|[112|[41|[32|[60|[60|[32|[126|[112|[32|[91|[83|[101|[114|[105|[97|[108|[58|[32|[126|[112|[44|[32|[70|[114|[111|[109|[58|[32|[126|[112|[93|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 965
																												       [To|[Mes|[Ser|[Fr|[]]]]])
			%% Line 966
			<{'print',Ser,Fr,_cor30,Info}> when 'true' ->
			    %% Line 967
			    call 'io':'format'
				(Out, [45|[62|[32|[126|[112|[32|[91|[83|[101|[114|[105|[97|[108|[58|[32|[126|[112|[44|[32|[70|[114|[111|[109|[58|[32|[126|[112|[93|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 968
																									    [Info|[Ser|[Fr|[]]]])
			%% Line 969
			<Else> when 'true' ->
			    %% Line 970
			    call 'io':'format'
				(Out, [126|[112|[126|[110]]]], [Else|[]])
		      end
		      %% Line 972
		      Out
	  %% Line 973
	  <_X_Trace,Out> when 'true' ->
	      %% Line 974
	      Out
	end
'dhandler1'/3 =
    %% Line 976
    fun (_cor2,_cor1,_cor0) ->
	let <From> =
	    %% Line 977
	    call 'erlang':'element'
		(2, _cor2)
	in  do  %% Line 978
		case call 'erlang':'element'
			 (3, _cor2) of
		  %% Line 979
		  <'receive'> when 'true' ->
		      %% Line 980
		      case call 'erlang':'element'
			       (4, _cor2) of
			%% Line 981
			<{'dbg','ok'}> when 'true' ->
			    'ok'
			%% Line 982
			<Message> when 'true' ->
			    %% Line 983
			    call 'io':'format'
				(_cor0, [40|[126|[112|[41|[32|[60|[60|[32|[126|[112|[126|[110]]]]]]]]]]]], [From|[Message|[]]])
		      end
		  %% Line 985
		  <'send'> when 'true' ->
		      let <Message> =
			  %% Line 986
			  call 'erlang':'element'
			      (4, _cor2)
		      in  let <To> =
			      %% Line 987
			      call 'erlang':'element'
				  (5, _cor2)
			  in  %% Line 988
			      call 'io':'format'
				  (_cor0, [40|[126|[112|[41|[32|[126|[112|[32|[33|[32|[126|[112|[126|[110]]]]]]]]]]]]]], [From|[To|[Message|[]]]])
		  %% Line 989
		  <'call'> when 'true' ->
		      %% Line 990
		      case call 'erlang':'element'
			       (4, _cor2) of
			%% Line 991
			<MFA>
			    when call 'erlang':'=='
				  (_cor1,
				   5) ->
			    let <Message> =
				%% Line 992
				call 'erlang':'element'
				    (5, _cor2)
			    in  let <_cor8> =
				    %% Line 993
				    apply 'ffunc'/1
					(MFA)
				in  %% Line 993
				    call 'io':'format'
					(_cor0, [40|[126|[112|[41|[32|[99|[97|[108|[108|[32|[126|[115|[32|[40|[126|[112|[41|[126|[110]]]]]]]]]]]]]]]]]]], [From|[_cor8|[Message|[]]]])
			%% Line 994
			<MFA> when 'true' ->
			    let <_cor9> =
				%% Line 995
				apply 'ffunc'/1
				    (MFA)
			    in  %% Line 995
				call 'io':'format'
				    (_cor0, [40|[126|[112|[41|[32|[99|[97|[108|[108|[32|[126|[115|[126|[110]]]]]]]]]]]]]], [From|[_cor9|[]]])
		      end
		  %% Line 997
		  <'return'> when 'true' ->
		      %% Line 998
		      case call 'erlang':'element'
			       (4, _cor2) of
			%% Line 999
			<MFA>
			    when call 'erlang':'=='
				  (_cor1,
				   5) ->
			    let <Ret> =
				%% Line 1000
				call 'erlang':'element'
				    (5, _cor2)
			    in  let <_cor12> =
				    %% Line 1001
				    apply 'ffunc'/1
					(MFA)
				in  %% Line 1001
				    call 'io':'format'
					(_cor0, [40|[126|[112|[41|[32|[111|[108|[100|[95|[114|[101|[116|[32|[126|[115|[32|[45|[62|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]], [From|[_cor12|[Ret|[]]]])
			%% Line 1002
			<MFA> when 'true' ->
			    let <_cor13> =
				%% Line 1003
				apply 'ffunc'/1
				    (MFA)
			    in  %% Line 1003
				call 'io':'format'
				    (_cor0, [40|[126|[112|[41|[32|[111|[108|[100|[95|[114|[101|[116|[32|[126|[115|[126|[110]]]]]]]]]]]]]]]]], [From|[_cor13|[]]])
		      end
		  %% Line 1005
		  <'return_from'> when 'true' ->
		      let <MFA> =
			  %% Line 1006
			  call 'erlang':'element'
			      (4, _cor2)
		      in  let <Ret> =
			      %% Line 1007
			      call 'erlang':'element'
				  (5, _cor2)
			  in  let <_cor17> =
				  %% Line 1008
				  apply 'ffunc'/1
				      (MFA)
			      in  %% Line 1008
				  call 'io':'format'
				      (_cor0, [40|[126|[112|[41|[32|[114|[101|[116|[117|[114|[110|[101|[100|[32|[102|[114|[111|[109|[32|[126|[115|[32|[45|[62|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [From|[_cor17|[Ret|[]]]])
		  %% Line 1009
		  <'return_to'> when 'true' ->
		      let <MFA> =
			  %% Line 1010
			  call 'erlang':'element'
			      (4, _cor2)
		      in  let <_cor19> =
			      %% Line 1011
			      apply 'ffunc'/1
				  (MFA)
			  in  %% Line 1011
			      call 'io':'format'
				  (_cor0, [40|[126|[112|[41|[32|[114|[101|[116|[117|[114|[110|[105|[110|[103|[32|[116|[111|[32|[126|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]], [From|[_cor19|[]]])
		  %% Line 1012
		  <'spawn'>
		      when call 'erlang':'=='
			    (_cor1,
			     5) ->
		      let <Pid> =
			  %% Line 1013
			  call 'erlang':'element'
			      (4, _cor2)
		      in  let <MFA> =
			      %% Line 1014
			      call 'erlang':'element'
				  (5, _cor2)
			  in  let <_cor22> =
				  %% Line 1015
				  apply 'ffunc'/1
				      (MFA)
			      in  %% Line 1015
				  call 'io':'format'
				      (_cor0, [40|[126|[112|[41|[32|[115|[112|[97|[119|[110|[32|[126|[112|[32|[97|[115|[32|[126|[115|[126|[110]]]]]]]]]]]]]]]]]]]]], [From|[Pid|[_cor22|[]]]])
		  %% Line 1016
		  <Op> when 'true' ->
		      let <_cor23> =
			  %% Line 1017
			  apply 'ftup'/3
			      (_cor2, 4, _cor1)
		      in  %% Line 1017
			  call 'io':'format'
			      (_cor0, [40|[126|[112|[41|[32|[126|[112|[32|[126|[115|[126|[110]]]]]]]]]]]], [From|[Op|[_cor23|[]]]])
		end
		_cor0
'dhandler1'/4 =
    %% Line 1021
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <From> =
	    %% Line 1022
	    call 'erlang':'element'
		(2, _cor3)
	in  do  %% Line 1023
		case call 'erlang':'element'
			 (3, _cor3) of
		  %% Line 1024
		  <'receive'> when 'true' ->
		      %% Line 1025
		      case call 'erlang':'element'
			       (4, _cor3) of
			%% Line 1026
			<{'dbg','ok'}> when 'true' ->
			    'ok'
			%% Line 1027
			<Message> when 'true' ->
			    %% Line 1028
			    call 'io':'format'
				(_cor0, [40|[126|[112|[41|[32|[60|[60|[32|[126|[112|[32|[40|[84|[105|[109|[101|[115|[116|[97|[109|[112|[58|[32|[126|[112|[41|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]], [From|[Message|[_cor1|[]]]])
		      end
		  %% Line 1030
		  <'send'> when 'true' ->
		      let <Message> =
			  %% Line 1031
			  call 'erlang':'element'
			      (4, _cor3)
		      in  let <To> =
			      %% Line 1032
			      call 'erlang':'element'
				  (5, _cor3)
			  in  %% Line 1033
			      call 'io':'format'
				  (_cor0, [40|[126|[112|[41|[32|[126|[112|[32|[33|[32|[126|[112|[32|[40|[84|[105|[109|[101|[115|[116|[97|[109|[112|[58|[32|[126|[112|[41|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [From|[To|[Message|[_cor1|[]]]]])
		  %% Line 1034
		  <'call'> when 'true' ->
		      %% Line 1035
		      case call 'erlang':'element'
			       (4, _cor3) of
			%% Line 1036
			<MFA>
			    when call 'erlang':'=='
				  (_cor2,
				   5) ->
			    let <Message> =
				%% Line 1037
				call 'erlang':'element'
				    (5, _cor3)
			    in  let <_cor9> =
				    %% Line 1038
				    apply 'ffunc'/1
					(MFA)
				in  %% Line 1038
				    call 'io':'format'
					(_cor0, [40|[126|[112|[41|[32|[99|[97|[108|[108|[32|[126|[115|[32|[40|[126|[112|[41|[32|[40|[84|[105|[109|[101|[115|[116|[97|[109|[112|[58|[32|[126|[112|[41|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [From|[_cor9|[Message|[_cor1|[]]]]])
			%% Line 1039
			<MFA> when 'true' ->
			    let <_cor10> =
				%% Line 1040
				apply 'ffunc'/1
				    (MFA)
			    in  %% Line 1040
				call 'io':'format'
				    (_cor0, [40|[126|[112|[41|[32|[99|[97|[108|[108|[32|[126|[115|[32|[40|[84|[105|[109|[101|[115|[116|[97|[109|[112|[58|[32|[126|[112|[41|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [From|[_cor10|[_cor1|[]]]])
		      end
		  %% Line 1042
		  <'return'> when 'true' ->
		      %% Line 1043
		      case call 'erlang':'element'
			       (4, _cor3) of
			%% Line 1044
			<MFA>
			    when call 'erlang':'=='
				  (_cor2,
				   5) ->
			    let <Ret> =
				%% Line 1045
				call 'erlang':'element'
				    (5, _cor3)
			    in  let <_cor13> =
				    %% Line 1046
				    apply 'ffunc'/1
					(MFA)
				in  %% Line 1046
				    call 'io':'format'
					(_cor0, [40|[126|[112|[41|[32|[111|[108|[100|[95|[114|[101|[116|[32|[126|[115|[32|[45|[62|[32|[126|[112|[32|[40|[84|[105|[109|[101|[115|[116|[97|[109|[112|[58|[32|[126|[112|[41|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [From|[_cor13|[Ret|[_cor1|[]]]]])
			%% Line 1047
			<MFA> when 'true' ->
			    let <_cor14> =
				%% Line 1048
				apply 'ffunc'/1
				    (MFA)
			    in  %% Line 1048
				call 'io':'format'
				    (_cor0, [40|[126|[112|[41|[32|[111|[108|[100|[95|[114|[101|[116|[32|[126|[115|[32|[40|[84|[105|[109|[101|[115|[116|[97|[109|[112|[58|[32|[126|[112|[41|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [From|[_cor14|[_cor1|[]]]])
		      end
		  %% Line 1050
		  <'return_from'> when 'true' ->
		      let <MFA> =
			  %% Line 1051
			  call 'erlang':'element'
			      (4, _cor3)
		      in  let <Ret> =
			      %% Line 1052
			      call 'erlang':'element'
				  (5, _cor3)
			  in  let <_cor18> =
				  %% Line 1053
				  apply 'ffunc'/1
				      (MFA)
			      in  %% Line 1053
				  call 'io':'format'
				      (_cor0, [40|[126|[112|[41|[32|[114|[101|[116|[117|[114|[110|[101|[100|[32|[102|[114|[111|[109|[32|[126|[115|[32|[45|[62|[32|[126|[112|[32|[40|[84|[105|[109|[101|[115|[116|[97|[109|[112|[58|[32|[126|[112|[41|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [From|[_cor18|[Ret|[_cor1|[]]]]])
		  %% Line 1054
		  <'return_to'> when 'true' ->
		      let <MFA> =
			  %% Line 1055
			  call 'erlang':'element'
			      (4, _cor3)
		      in  let <_cor20> =
			      %% Line 1056
			      apply 'ffunc'/1
				  (MFA)
			  in  %% Line 1056
			      call 'io':'format'
				  (_cor0, [40|[126|[112|[41|[32|[114|[101|[116|[117|[114|[110|[105|[110|[103|[32|[116|[111|[32|[126|[115|[32|[40|[84|[105|[109|[101|[115|[116|[97|[109|[112|[58|[32|[126|[112|[41|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [From|[_cor20|[_cor1|[]]]])
		  %% Line 1057
		  <'spawn'>
		      when call 'erlang':'=='
			    (_cor2,
			     5) ->
		      let <Pid> =
			  %% Line 1058
			  call 'erlang':'element'
			      (4, _cor3)
		      in  let <MFA> =
			      %% Line 1059
			      call 'erlang':'element'
				  (5, _cor3)
			  in  let <_cor23> =
				  %% Line 1060
				  apply 'ffunc'/1
				      (MFA)
			      in  %% Line 1060
				  call 'io':'format'
				      (_cor0, [40|[126|[112|[41|[32|[115|[112|[97|[119|[110|[32|[126|[112|[32|[97|[115|[32|[126|[115|[32|[40|[84|[105|[109|[101|[115|[116|[97|[109|[112|[58|[32|[126|[112|[41|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [From|[Pid|[_cor23|[_cor1|[]]]]])
		  %% Line 1061
		  <Op> when 'true' ->
		      let <_cor24> =
			  %% Line 1062
			  apply 'ftup'/3
			      (_cor3, 4, _cor2)
		      in  %% Line 1062
			  call 'io':'format'
			      (_cor0, [40|[126|[112|[41|[32|[126|[112|[32|[126|[115|[32|[40|[84|[105|[109|[101|[115|[116|[97|[109|[112|[58|[32|[126|[112|[41|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]], [From|[Op|[_cor24|[_cor1|[]]]]])
		end
		_cor0
'ffunc'/1 =
    %% Line 1072
    fun (_cor0) ->
	case _cor0 of
	  <{M,F,Argl}>
	      when call 'erlang':'is_list'
		    (Argl) ->
	      let <_cor1> =
		  %% Line 1073
		  apply 'fargs'/1
		      (Argl)
	      in  %% Line 1073
		  call 'io_lib':'format'
		      ([126|[112|[58|[126|[112|[40|[126|[115|[41]]]]]]]]], [M|[F|[_cor1|[]]]])
	  %% Line 1074
	  <{M,F,Arity}> when 'true' ->
	      %% Line 1075
	      call 'io_lib':'format'
		  ([126|[112|[58|[126|[112|[47|[126|[112]]]]]]]], [M|[F|[Arity|[]]]])
	  %% Line 1076
	  <X> when 'true' ->
	      call 'io_lib':'format'
		  ([126|[112]], [X|[]])
	end
'fargs'/1 =
    %% Line 1080
    fun (_cor0) ->
	case _cor0 of
	  <Arity>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      call 'erlang':'integer_to_list'
		  (Arity)
	  %% Line 1081
	  <[]> when 'true' ->
	      []
	  %% Line 1082
	  <[A|[]]> when 'true' ->
	      call 'io_lib':'format'
		  ([126|[112]], [A|[]])
	  %% Line 1083
	  <[A|Args]> when 'true' ->
	      let <_cor1> =
		  call 'io_lib':'format'
		      ([126|[112|[44]]], [A|[]])
	      in  let <_cor2> =
		      apply 'fargs'/1
			  (Args)
		  in  [_cor1|_cor2]
	  %% Line 1084
	  <A> when 'true' ->
	      call 'io_lib':'format'
		  ([126|[112]], [A|[]])
	end
'ftup'/3 =
    %% Line 1087
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Trace,Index,_cor11>
	      when call 'erlang':'=:='
		    (_cor11,
		     Index) ->
	      let <_cor3> =
		  %% Line 1088
		  call 'erlang':'element'
		      (Index, Trace)
	      in  %% Line 1088
		  call 'io_lib':'format'
		      ([126|[112]], [_cor3|[]])
	  %% Line 1089
	  <Trace,Index,Size> when 'true' ->
	      let <_cor4> =
		  %% Line 1090
		  call 'erlang':'element'
		      (Index, Trace)
	      in  let <_cor5> =
		      %% Line 1090
		      call 'io_lib':'format'
			  ([126|[112|[32]]], [_cor4|[]])
		  in  let <_cor6> =
			  %% Line 1091
			  call 'erlang':'+'
			      (Index, 1)
		      in  let <_cor7> =
			      %% Line 1091
			      apply 'ftup'/3
				  (Trace, _cor6, Size)
			  in  %% Line 1090
			      [_cor5|_cor7]
	end
'trace_process'/2 =
    %% Line 1095
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pid,['clear']> when 'true' ->
	      let <_cor2> =
		  %% Line 1096
		  apply 'all'/0
		      ()
	      in  %% Line 1096
		  apply 'trac'/3
		      (Pid, 'false', _cor2)
	  %% Line 1097
	  <Pid,Flags0> when 'true' ->
	      %% Line 1098
	      case apply 'transform_flags'/1
		       (Flags0) of
		%% Line 1099
		<{'error',Reason}> when 'true' ->
		    {'error',Reason}
		%% Line 1100
		<Flags> when 'true' ->
		    apply 'trac'/3
			(Pid, 'true', Flags)
	      end
	end
'transform_flags'/1 =
    %% Line 1103
    fun (_cor0) ->
	%% Line 1104
	apply 'transform_flags'/2
	    (_cor0, [])
'transform_flags'/2 =
    %% Line 1105
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Acc> when 'true' ->
	      Acc
	  %% Line 1106
	  <['m'|Tail],Acc> when 'true' ->
	      apply 'transform_flags'/2
		  (Tail, ['send'|['receive'|Acc]])
	  %% Line 1107
	  <['s'|Tail],Acc> when 'true' ->
	      apply 'transform_flags'/2
		  (Tail, ['send'|Acc])
	  %% Line 1108
	  <['r'|Tail],Acc> when 'true' ->
	      apply 'transform_flags'/2
		  (Tail, ['receive'|Acc])
	  %% Line 1109
	  <['c'|Tail],Acc> when 'true' ->
	      apply 'transform_flags'/2
		  (Tail, ['call'|Acc])
	  %% Line 1110
	  <['call'|Tail],Acc> when 'true' ->
	      apply 'transform_flags'/2
		  (Tail, ['call'|Acc])
	  %% Line 1111
	  <['p'|Tail],Acc> when 'true' ->
	      apply 'transform_flags'/2
		  (Tail, ['procs'|Acc])
	  %% Line 1112
	  <['sos'|Tail],Acc> when 'true' ->
	      apply 'transform_flags'/2
		  (Tail, ['set_on_spawn'|Acc])
	  %% Line 1113
	  <['sol'|Tail],Acc> when 'true' ->
	      apply 'transform_flags'/2
		  (Tail, ['set_on_link'|Acc])
	  %% Line 1114
	  <['sofs'|Tail],Acc> when 'true' ->
	      apply 'transform_flags'/2
		  (Tail, ['set_on_first_spawn'|Acc])
	  %% Line 1115
	  <['sofl'|Tail],Acc> when 'true' ->
	      apply 'transform_flags'/2
		  (Tail, ['set_on_first_link'|Acc])
	  %% Line 1116
	  <['all'|_cor7],_X_Acc> when 'true' ->
	      let <_cor2> =
		  apply 'all'/0
		      ()
	      in  call 'erlang':'--'
		      (_cor2, ['silent'])
	  %% Line 1117
	  <List = [F|Tail],Acc>
	      when call 'erlang':'is_atom'
		    (F) ->
	      let <_cor3> =
		  %% Line 1118
		  apply 'all'/0
		      ()
	      in  %% Line 1118
		  case call 'lists':'member'
			   (F, _cor3) of
		    %% Line 1119
		    <'true'> when 'true' ->
			apply 'transform_flags'/2
			    (Tail, [F|Acc])
		    %% Line 1120
		    <'false'> when 'true' ->
			{'error',{'bad_flags',List}}
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1122
	  <Bad,_X_Acc> when 'true' ->
	      {'error',{'bad_flags',Bad}}
	end
'all'/0 =
    %% Line 1124
    fun () ->
	%% Line 1125
	['send'|['receive'|['call'|['procs'|['garbage_collection'|['running'|['set_on_spawn'|['set_on_first_spawn'|['set_on_link'|['set_on_first_link'|['timestamp'|['arity'|['return_to'|['silent']]]]]]]]]]]]]]
'display_info'/1 =
    %% Line 1129
    fun (_cor0) ->
	case _cor0 of
	  <[Node|Nodes]> when 'true' ->
	      do  %% Line 1130
		  call 'io':'format'
		      ([126|[110|[78|[111|[100|[101|[32|[126|[119|[58|[126|[110]]]]]]]]]]]], [Node|[]])
		  do  %% Line 1131
		      call 'io':'format'
			  ([126|[45|[49|[50|[115|[32|[126|[45|[50|[49|[115|[32|[84|[114|[97|[99|[101|[32|[126|[110]]]]]]]]]]]]]]]]]]]], [[80|[105|[100]]]|[[73|[110|[105|[116|[105|[97|[108|[32|[99|[97|[108|[108]]]]]]]]]]]]]])
		      let <List> =
			  %% Line 1132
			  call 'rpc':'call'
			      (Node, 'dbg', 'get_info', [])
		      in  do  %% Line 1133
			      apply 'display_info1'/1
				  (List)
			      %% Line 1134
			      apply 'display_info'/1
				  (Nodes)
	  %% Line 1135
	  <[]> when 'true' ->
	      %% Line 1136
	      'ok'
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'display_info',1}}] )
	    -| ['compiler_generated'] )
	end
'display_info1'/1 =
    %% Line 1138
    fun (_cor0) ->
	case _cor0 of
	  <[{Pid,Call,Flags}|T]> when 'true' ->
	      let <_cor1> =
		  %% Line 1140
		  call 'io_lib':'format'
		      ([126|[119]], [Pid|[]])
	      in  let <_cor2> =
		      %% Line 1141
		      call 'io_lib':'format'
			  ([126|[112]], [Call|[]])
		  in  let <_cor3> =
			  %% Line 1142
			  apply 'format_trace'/1
			      (Flags)
		      in  do  %% Line 1139
			      call 'io':'format'
				  ([126|[45|[49|[50|[115|[32|[126|[45|[50|[49|[115|[32|[126|[115|[126|[110]]]]]]]]]]]]]]]], %% Line 1140
															    [_cor1|%% Line 1141
																   [_cor2|%% Line 1142
																	  [_cor3|[]]]])
			      %% Line 1143
			      apply 'display_info1'/1
				  (T)
	  %% Line 1144
	  <[]> when 'true' ->
	      %% Line 1145
	      'ok'
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'display_info1',1}}] )
	    -| ['compiler_generated'] )
	end
'get_info'/0 =
    %% Line 1147
    fun () ->
	let <_cor0> =
	    %% Line 1148
	    call 'erlang':'processes'
		()
	in  %% Line 1148
	    apply 'get_info'/2
		(_cor0, [])
'get_info'/2 =
    %% Line 1150
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Pid|T],Acc> when 'true' ->
	      %% Line 1151
	      case apply 'pinfo'/2
		       (Pid, 'initial_call') of
		%% Line 1152
		<'undefined'> when 'true' ->
		    %% Line 1153
		    apply 'get_info'/2
			(T, Acc)
		%% Line 1154
		<{'initial_call',Call}> when 'true' ->
		    %% Line 1155
		    case apply 'tinfo'/2
			     (Pid, 'flags') of
		      %% Line 1156
		      <'undefined'> when 'true' ->
			  %% Line 1157
			  apply 'get_info'/2
			      (T, Acc)
		      %% Line 1158
		      <{'flags',[]}> when 'true' ->
			  %% Line 1159
			  apply 'get_info'/2
			      (T, Acc)
		      %% Line 1160
		      <{'flags',Flags}> when 'true' ->
			  %% Line 1161
			  apply 'get_info'/2
			      (T, [{Pid,Call,Flags}|Acc])
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1164
	  <[],Acc> when 'true' ->
	      Acc
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'get_info',2}}] )
	    -| ['compiler_generated'] )
	end
'format_trace'/1 =
    %% Line 1166
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      []
	  %% Line 1167
	  <[Item|[]]> when 'true' ->
	      let <_cor1> =
		  apply 'ts'/1
		      (Item)
	      in  [_cor1|[]]
	  %% Line 1168
	  <[Item|T]> when 'true' ->
	      let <_cor2> =
		  apply 'ts'/1
		      (Item)
	      in  let <_cor3> =
		      apply 'format_trace'/1
			  (T)
		  in  [_cor2|[[32|[124|[32]]]|[_cor3|[]]]]
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'format_trace',1}}] )
	    -| ['compiler_generated'] )
	end
'ts'/1 =
    %% Line 1170
    fun (_cor0) ->
	case _cor0 of
	  <'send'> when 'true' ->
	      [115]
	  %% Line 1171
	  <'receive'> when 'true' ->
	      [114]
	  %% Line 1172
	  <'call'> when 'true' ->
	      [99]
	  %% Line 1173
	  <'procs'> when 'true' ->
	      [112]
	  %% Line 1174
	  <'set_on_spawn'> when 'true' ->
	      [115|[111|[115]]]
	  %% Line 1175
	  <'set_on_first_spawn'> when 'true' ->
	      [115|[111|[102|[115]]]]
	  %% Line 1176
	  <'set_on_link'> when 'true' ->
	      [115|[111|[108]]]
	  %% Line 1177
	  <'set_on_first_link'> when 'true' ->
	      [115|[111|[102|[108]]]]
	  %% Line 1178
	  <Other> when 'true' ->
	      call 'erlang':'atom_to_list'
		  (Other)
	end
'to_pidspec'/1 =
    %% Line 1185
    fun (_cor0) ->
	case _cor0 of
	  <X>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      %% Line 1186
	      case call 'erlang':'is_process_alive'
		       (X) of
		%% Line 1187
		<'true'> when 'true' ->
		    X
		%% Line 1188
		<'false'> when 'true' ->
		    {'badpid',X}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1190
	  <'new'> when 'true' ->
	      'new'
	  %% Line 1191
	  <'all'> when 'true' ->
	      'all'
	  %% Line 1192
	  <'existing'> when 'true' ->
	      'existing'
	  %% Line 1193
	  <X>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 1194
	      case call 'erlang':'whereis'
		       (X) of
		%% Line 1195
		<'undefined'> when 'true' ->
		    {'badpid',X}
		%% Line 1196
		<Pid> when 'true' ->
		    Pid
	      end
	  %% Line 1198
	  <X> when 'true' ->
	      {'badpid',X}
	end
'to_pid'/1 =
    %% Line 1204
    fun (_cor0) ->
	case _cor0 of
	  <X>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      X
	  %% Line 1205
	  <X>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      apply 'to_pid'/1
		  ({0,X,0})
	  %% Line 1206
	  <{X,Y,Z}> when 'true' ->
	      let <_cor1> =
		  %% Line 1207
		  call 'erlang':'integer_to_list'
		      (X)
	      in  let <_cor2> =
		      %% Line 1208
		      call 'erlang':'integer_to_list'
			  (Y)
		  in  let <_cor3> =
			  %% Line 1209
			  call 'erlang':'integer_to_list'
			      (Z)
		      in  let <_cor4> =
			      %% Line 1207
			      call 'lists':'concat'
				  ([[60]|[_cor1|[[46]|%% Line 1208
						      [_cor2|[[46]|%% Line 1209
								   [_cor3|[[62]]]]]]]])
			  in  %% Line 1207
			      apply 'to_pid'/1
				  (_cor4)
	  %% Line 1210
	  <X>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 1211
	      try
		  call 'erlang':'list_to_pid'
		      (X)
	      of <_cor5> ->
		  _cor5
	      catch <_cor9,_cor8,_cor7> ->
		  case <_cor9,_cor8,_cor7> of
		    %% Line 1214
		    <'error','badarg',_cor11> when 'true' ->
			{'badpid',X}
		    ( <_cor9,_cor8,_cor7> when 'true' ->
			  primop 'raise'
			      (_cor7, _cor8)
		      -| ['compiler_generated'] )
		  end
	  %% Line 1216
	  <X> when 'true' ->
	      {'badpid',X}
	end
'pinfo'/2 =
    %% Line 1219
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <P,X>
	      when try
		    let <_cor3> =
			call 'erlang':'node'
			    (P)
		    in  let <_cor2> =
			    call 'erlang':'node'
				()
			in  call 'erlang':'=='
				(_cor3, _cor2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      call 'erlang':'process_info'
		  (P, X)
	  %% Line 1220
	  <P,X> when 'true' ->
	      let <_cor4> =
		  call 'erlang':'node'
		      (P)
	      in  let <_cor5> =
		      call 'rpc':'call'
			  (_cor4, 'erlang', 'process_info', [P|[X|[]]])
		  in  apply 'check'/1
			  (_cor5)
	end
'tinfo'/2 =
    %% Line 1222
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <P,X>
	      when try
		    let <_cor3> =
			call 'erlang':'node'
			    (P)
		    in  let <_cor2> =
			    call 'erlang':'node'
				()
			in  call 'erlang':'=='
				(_cor3, _cor2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      call 'erlang':'trace_info'
		  (P, X)
	  %% Line 1223
	  <P,X> when 'true' ->
	      let <_cor4> =
		  call 'erlang':'node'
		      (P)
	      in  let <_cor5> =
		      call 'rpc':'call'
			  (_cor4, 'erlang', 'trace_info', [P|[X|[]]])
		  in  apply 'check'/1
			  (_cor5)
	end
'check'/1 =
    %% Line 1225
    fun (_cor0) ->
	case _cor0 of
	  <{'badrpc',_cor2}> when 'true' ->
	      'undefined'
	  %% Line 1226
	  <X> when 'true' ->
	      X
	end
'tc_loop'/3 =
    %% Line 1240
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Term|Tail],Handler,HData0> when 'true' ->
	      let <HData> =
		  %% Line 1241
		  apply Handler
		      (Term, HData0)
	      in  %% Line 1242
		  apply 'tc_loop'/3
		      (Tail, Handler, HData)
	  %% Line 1243
	  <[],Handler,HData> when 'true' ->
	      do  %% Line 1244
		  apply Handler
		      ('end_of_trace', HData)
		  %% Line 1245
		  call 'erlang':'exit'
		      ('normal')
	  %% Line 1246
	  <Reader,Handler,HData>
	      when call 'erlang':'is_function'
		    (Reader) ->
	      let <_cor4> =
		  %% Line 1247
		  apply Reader
		      ()
	      in  %% Line 1247
		  apply 'tc_loop'/3
		      (_cor4, Handler, HData)
	  %% Line 1248
	  <Other,_X_Handler,_X_HData> when 'true' ->
	      do  %% Line 1249
		  call 'io':'format'
		      ([126|[112|[58|[116|[99|[95|[108|[111|[111|[112|[32|[126|[112|[126|[110]]]]]]]]]]]]]]], ['dbg'|[Other|[]]])
		  %% Line 1250
		  call 'erlang':'exit'
		      ({'unknown_term_from_reader',Other})
	end
'gen_reader'/2 =
    %% Line 1255
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'ip',{Host,Portno}> when 'true' ->
	      %% Line 1256
	      case call 'gen_tcp':'connect'
		       (Host, Portno, [{'active','false'}|['binary']]) of
		%% Line 1257
		<{'ok',Sock}> when 'true' ->
		    %% Line 1258
		    apply 'mk_reader'/2
			(( 'ip_read'/2
			   -| [{'id',{0,0,'-gen_reader/2-fun-0-'}}] ), Sock)
		%% Line 1259
		<Error> when 'true' ->
		    %% Line 1260
		    call 'erlang':'exit'
			(Error)
	      end
	  %% Line 1262
	  <'file',{Filename,'wrap',Tail,_cor7,WrapCnt}> when 'true' ->
	      let <_cor3> =
		  %% Line 1263
		  apply 'wrap_presort'/2
		      (Filename, Tail)
	      in  let <_cor4> =
		      %% Line 1263
		      apply 'wrap_sort'/2
			  (_cor3, WrapCnt)
		  in  %% Line 1263
		      apply 'mk_reader_wrap'/1
			  (_cor4)
	  %% Line 1264
	  <'file',Filename> when 'true' ->
	      %% Line 1265
	      apply 'gen_reader_file'/2
		  (( 'file_read'/2
		     -| [{'id',{0,0,'-gen_reader/2-fun-1-'}}] ), Filename)
	  %% Line 1266
	  <'follow_file',Filename> when 'true' ->
	      %% Line 1267
	      apply 'gen_reader_file'/2
		  (( 'follow_read'/2
		     -| [{'id',{0,0,'-gen_reader/2-fun-2-'}}] ), Filename)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'gen_reader',2}}] )
	    -| ['compiler_generated'] )
	end
'gen_reader_file'/2 =
    %% Line 1270
    fun (_cor1,_cor0) ->
	%% Line 1271
	case call 'file':'open'
		 (_cor0, ['read'|['raw'|['binary']]]) of
	  %% Line 1272
	  <{'ok',File}> when 'true' ->
	      %% Line 1273
	      apply 'mk_reader'/2
		  (_cor1, File)
	  %% Line 1274
	  <Error> when 'true' ->
	      %% Line 1275
	      call 'erlang':'exit'
		  ({'client_cannot_open',Error})
	end
'mk_reader'/2 =
    %% Line 1279
    fun (_cor1,_cor0) ->
	%% Line 1280
	( fun () ->
	      %% Line 1281
	      case apply 'read_term'/2
		       (_cor1, _cor0) of
		%% Line 1282
		<{'ok',Term}> when 'true' ->
		    let <_cor2> =
			%% Line 1283
			apply 'mk_reader'/2
			    (_cor1, _cor0)
		    in  %% Line 1283
			[Term|_cor2]
		%% Line 1284
		<'eof'> when 'true' ->
		    %% Line 1285
		    []
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  -| [{'id',{0,0,'-mk_reader/2-fun-0-'}}] )
'mk_reader_wrap'/1 =
    %% Line 1293
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 1294
	      []
	  %% Line 1295
	  <WrapFiles = [Hd|_cor4]> when 'true' ->
	      let <_cor1> =
		  %% Line 1296
		  apply 'wrap_name'/1
		      (Hd)
	      in  %% Line 1296
		  case call 'file':'open'
			   (_cor1, ['read'|['raw'|['binary']]]) of
		    %% Line 1297
		    <{'ok',File}> when 'true' ->
			%% Line 1298
			apply 'mk_reader_wrap'/2
			    (WrapFiles, File)
		    %% Line 1299
		    <Error> when 'true' ->
			%% Line 1300
			call 'erlang':'exit'
			    ({'client_cannot_open',Error})
		  end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'mk_reader_wrap',1}}] )
	    -| ['compiler_generated'] )
	end
'mk_reader_wrap'/2 =
    %% Line 1303
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <WrapFiles = [_X_Hd|Tail],File> when 'true' ->
	      %% Line 1304
	      ( fun () ->
		    %% Line 1305
		    case apply 'read_term'/2
			     (( 'file_read'/2
				-| [{'id',{0,0,'-mk_reader_wrap/2-fun-0-'}}] ), File) of
		      %% Line 1306
		      <{'ok',Term}> when 'true' ->
			  let <_cor2> =
			      %% Line 1307
			      apply 'mk_reader_wrap'/2
				  (WrapFiles, File)
			  in  %% Line 1307
			      [Term|_cor2]
		      %% Line 1308
		      <'eof'> when 'true' ->
			  do  %% Line 1309
			      call 'file':'close'
				  (File)
			      %% Line 1310
			      case Tail of
				%% Line 1311
				<[_cor7|_cor8]> when 'true' ->
				    %% Line 1312
				    apply 'mk_reader_wrap'/1
					(Tail)
				%% Line 1313
				<[]> when 'true' ->
				    %% Line 1314
				    []
				( <_cor3> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor3})
				  -| ['compiler_generated'] )
			      end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor4})
			-| ['compiler_generated'] )
		    end
		-| [{'id',{0,0,'-mk_reader_wrap/2-fun-1-'}}] )
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'mk_reader_wrap',2}}] )
	    -| ['compiler_generated'] )
	end
'read_term'/2 =
    %% Line 1324
    fun (_cor1,_cor0) ->
	%% Line 1325
	case apply _cor1
		 (_cor0, 5) of
	  %% Line 1326
	  <Bin>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      %% Line 1327
	      apply 'read_term'/3
		  (_cor1, _cor0, Bin)
	  %% Line 1328
	  <List>
	      when call 'erlang':'is_list'
		    (List) ->
	      let <_cor2> =
		  %% Line 1329
		  call 'erlang':'list_to_binary'
		      (List)
	      in  %% Line 1329
		  apply 'read_term'/3
		      (_cor1, _cor0, _cor2)
	  %% Line 1330
	  <'eof'> when 'true' ->
	      %% Line 1331
	      'eof'
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'read_term'/3 =
    %% Line 1334
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <ReadFun,Source,Tag = #{#<Op>(8,1,'integer',['unsigned'|['big']]),
				  #<Size>(32,1,'integer',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 1335
	      case Op of
		%% Line 1336
		<0> when 'true' ->
		    %% Line 1337
		    case apply ReadFun
			     (Source, Size) of
		      %% Line 1338
		      <'eof'> when 'true' ->
			  let <_cor3> =
			      %% Line 1340
			      call 'erlang':'binary_to_list'
				  (Tag)
			  in  %% Line 1339
			      call 'erlang':'exit'
				  ({'trace term missing',_cor3})
		      %% Line 1341
		      <Bin>
			  when call 'erlang':'is_binary'
				(Bin) ->
			  let <_cor4> =
			      %% Line 1342
			      call 'erlang':'binary_to_term'
				  (Bin)
			  in  %% Line 1342
			      {'ok',_cor4}
		      %% Line 1343
		      <List>
			  when call 'erlang':'is_list'
				(List) ->
			  let <_cor5> =
			      %% Line 1344
			      call 'erlang':'list_to_binary'
				  (List)
			  in  let <_cor6> =
				  %% Line 1344
				  call 'erlang':'binary_to_term'
				      (_cor5)
			      in  %% Line 1344
				  {'ok',_cor6}
		      ( <_cor7> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor7})
			-| ['compiler_generated'] )
		    end
		%% Line 1346
		<1> when 'true' ->
		    %% Line 1347
		    {'ok',{'drop',Size}}
		%% Line 1348
		<Junk> when 'true' ->
		    %% Line 1349
		    call 'erlang':'exit'
			({'bad trace tag',Junk})
	      end
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'read_term',3}}] )
	    -| ['compiler_generated'] )
	end
'file_read'/2 =
    %% Line 1359
    fun (_cor1,_cor0) ->
	%% Line 1360
	case call 'file':'read'
		 (_cor1, _cor0) of
	  %% Line 1361
	  <{'ok',Bin}>
	      when try
		    let <_cor2> =
			call 'erlang':'byte_size'
			    (Bin)
		    in  call 'erlang':'=:='
			    (_cor2, _cor0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1362
	      Bin
	  %% Line 1363
	  <{'ok',Bin}>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      let <_cor3> =
		  %% Line 1364
		  call 'erlang':'binary_to_list'
		      (Bin)
	      in  %% Line 1364
		  call 'erlang':'exit'
		      ({'truncated file',_cor3})
	  %% Line 1365
	  <'eof'> when 'true' ->
	      %% Line 1366
	      'eof'
	  %% Line 1367
	  <{'error',Reason}> when 'true' ->
	      %% Line 1368
	      call 'erlang':'exit'
		  ({'file read error',Reason})
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'follow_read'/2 =
    %% Line 1371
    fun (_cor1,_cor0) ->
	%% Line 1372
	apply 'follow_read'/3
	    (_cor1, _cor0, 'cur')
'follow_read'/3 =
    %% Line 1374
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1375
	case call 'file':'position'
		 (_cor2, _cor0) of
	  %% Line 1376
	  <{'ok',Offset}> when 'true' ->
	      %% Line 1377
	      case call 'file':'read'
		       (_cor2, _cor1) of
		%% Line 1378
		<{'ok',Bin}>
		    when try
			  let <_cor3> =
			      call 'erlang':'byte_size'
				  (Bin)
			  in  call 'erlang':'=:='
				  (_cor3, _cor1)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 1379
		    Bin
		%% Line 1380
		<{'ok',Bin}>
		    when call 'erlang':'is_binary'
			  (Bin) ->
		    %% Line 1381
		    apply 'follow_read'/3
			(_cor2, _cor1, Offset)
		%% Line 1382
		<'eof'> when 'true' ->
		    %% Line 1383
		    apply 'follow_read'/3
			(_cor2, _cor1, Offset)
		%% Line 1384
		<{'error',Reason}> when 'true' ->
		    %% Line 1385
		    call 'erlang':'exit'
			({'file read error',Reason})
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1387
	  <{'error',Reason}> when 'true' ->
	      %% Line 1388
	      call 'erlang':'exit'
		  ({'file position error',Reason})
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'ip_read'/2 =
    %% Line 1391
    fun (_cor1,_cor0) ->
	%% Line 1392
	case call 'gen_tcp':'recv'
		 (_cor1, _cor0) of
	  %% Line 1393
	  <{'ok',Bin}>
	      when try
		    let <_cor2> =
			call 'erlang':'byte_size'
			    (Bin)
		    in  call 'erlang':'<'
			    (_cor2, _cor0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor3> =
		  %% Line 1394
		  call 'erlang':'byte_size'
		      (Bin)
	      in  let <_cor4> =
		      %% Line 1394
		      call 'erlang':'-'
			  (_cor0, _cor3)
		  in  let <_cor5> =
			  %% Line 1394
			  apply 'ip_read'/2
			      (_cor1, _cor4)
		      in  %% Line 1394
			  [Bin|_cor5]
	  %% Line 1395
	  <{'ok',Bin}>
	      when try
		    let <_cor6> =
			call 'erlang':'byte_size'
			    (Bin)
		    in  call 'erlang':'=='
			    (_cor6, _cor0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1396
	      [Bin|[]]
	  %% Line 1397
	  <{'ok',Bin}>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      %% Line 1398
	      call 'erlang':'exit'
		  ({'socket read too much data',Bin})
	  %% Line 1399
	  <{'error','closed'}> when 'true' ->
	      %% Line 1400
	      'eof'
	  %% Line 1401
	  <Error = {'error',_X_Reason}> when 'true' ->
	      %% Line 1402
	      call 'erlang':'exit'
		  ({'socket read error',Error})
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'get_tracer'/0 =
    %% Line 1405
    fun () ->
	let <_cor0> =
	    %% Line 1406
	    call 'erlang':'node'
		()
	in  %% Line 1406
	    apply 'req'/1
		({'get_tracer',_cor0})
'get_tracer'/1 =
    %% Line 1407
    fun (_cor0) ->
	%% Line 1408
	apply 'req'/1
	    ({'get_tracer',_cor0})
'save_pattern'/1 =
    %% Line 1410
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 1411
	      0
	  %% Line 1412
	  <P> when 'true' ->
	      catch
		  let <_cor1> =
		      %% Line 1413
		      apply 'get_pattern_table'/0
			  ()
		  in  %% Line 1413
		      apply 'save_pattern'/2
			  (P, _cor1)
	end
'save_pattern'/2 =
    %% Line 1415
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1416
	    call 'ets':'last'
		(_cor0)
	in  let <Last> =
		%% Line 1416
		apply 'last_pattern'/2
		    (_cor2, _cor0)
	    in  let <BPattern> =
		    %% Line 1417
		    call 'erlang':'term_to_binary'
			(_cor1)
		in  %% Line 1418
		    case call 'ets':'match_object'
			     (_cor0, {'_',BPattern}) of
		      %% Line 1419
		      <[]> when 'true' ->
			  let <_cor5> =
			      %% Line 1420
			      call 'erlang':'+'
				  (Last, 1)
			  in  do  %% Line 1420
				  call 'ets':'insert'
				      (_cor0, {_cor5,BPattern})
				  %% Line 1421
				  call 'erlang':'+'
				      (Last, 1)
		      %% Line 1422
		      <[{N,_cor9}|[]]>
			  when call 'erlang':'=:='
				(_cor9,
				 BPattern) ->
			  %% Line 1423
			  N
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor6})
			-| ['compiler_generated'] )
		    end
'last_pattern'/2 =
    %% Line 1426
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'$end_of_table',_X_PT> when 'true' ->
	      %% Line 1427
	      0
	  %% Line 1428
	  <I,PT>
	      when call 'erlang':'is_atom'
		    (I) ->
	      let <_cor2> =
		  %% Line 1429
		  call 'ets':'prev'
		      (PT, I)
	      in  %% Line 1429
		  apply 'last_pattern'/2
		      (_cor2, PT)
	  %% Line 1430
	  <I,_X_PT>
	      when call 'erlang':'is_integer'
		    (I) ->
	      %% Line 1431
	      I
	  %% Line 1432
	  <_cor5,_cor6> when 'true' ->
	      %% Line 1433
	      call 'erlang':'throw'
		  ({'error','badtable'})
	end
'get_pattern_table'/0 =
    %% Line 1436
    fun () ->
	%% Line 1437
	case apply 'req'/1
		 ('get_table') of
	  <{'ok',Ret}> when 'true' ->
	      %% Line 1438
	      Ret
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor0})
	    -| ['compiler_generated'] )
	end
'new_pattern_table'/0 =
    %% Line 1440
    fun () ->
	let <PT> =
	    %% Line 1441
	    call 'ets':'new'
		('dbg_tab', ['ordered_set'|['public']])
	in  do  %% Line 1442
		call 'ets':'insert'
		    (PT, %% Line 1443
			 {'x',#{#<131>(8,1,'integer',['unsigned'|['big']]),
				#<108>(8,1,'integer',['unsigned'|['big']]),
				#<0>(8,1,'integer',['unsigned'|['big']]),
				#<0>(8,1,'integer',['unsigned'|['big']]),
				#<0>(8,1,'integer',['unsigned'|['big']]),
				#<1>(8,1,'integer',['unsigned'|['big']]),
				#<104>(8,1,'integer',['unsigned'|['big']]),
				#<3>(8,1,'integer',['unsigned'|['big']]),
				#<100>(8,1,'integer',['unsigned'|['big']]),
				#<0>(8,1,'integer',['unsigned'|['big']]),
				#<1>(8,1,'integer',['unsigned'|['big']]),
				#<95>(8,1,'integer',['unsigned'|['big']]),
				#<106>(8,1,'integer',['unsigned'|['big']]),
				#<108>(8,1,'integer',['unsigned'|['big']]),
				#<0>(8,1,'integer',['unsigned'|['big']]),
				#<0>(8,1,'integer',['unsigned'|['big']]),
				#<0>(8,1,'integer',['unsigned'|['big']]),
				#<1>(8,1,'integer',['unsigned'|['big']]),
				#<104>(8,1,'integer',['unsigned'|['big']]),
				#<1>(8,1,'integer',['unsigned'|['big']]),
				#<100>(8,1,'integer',['unsigned'|['big']]),
				#<0>(8,1,'integer',['unsigned'|['big']]),
				#<15>(8,1,'integer',['unsigned'|['big']]),
				#<101>(8,1,'integer',['unsigned'|['big']]),
				#<120>(8,1,'integer',['unsigned'|['big']]),
				#<99>(8,1,'integer',['unsigned'|['big']]),
				#<101>(8,1,'integer',['unsigned'|['big']]),
				#<112>(8,1,'integer',['unsigned'|['big']]),
				#<116>(8,1,'integer',['unsigned'|['big']]),
				#<105>(8,1,'integer',['unsigned'|['big']]),
				#<111>(8,1,'integer',['unsigned'|['big']]),
				#<110>(8,1,'integer',['unsigned'|['big']]),
				#<95>(8,1,'integer',['unsigned'|['big']]),
				#<116>(8,1,'integer',['unsigned'|['big']]),
				#<114>(8,1,'integer',['unsigned'|['big']]),
				#<97>(8,1,'integer',['unsigned'|['big']]),
				#<99>(8,1,'integer',['unsigned'|['big']]),
				#<101>(8,1,'integer',['unsigned'|['big']]),
				#<106>(8,1,'integer',['unsigned'|['big']]),
				#<106>(8,1,'integer',['unsigned'|['big']])}#})
		do  %% Line 1445
		    call 'ets':'insert'
			(PT, %% Line 1446
			     {'exception_trace',#{#<131>(8,1,'integer',['unsigned'|['big']]),
						  #<100>(8,1,'integer',['unsigned'|['big']]),
						  #<0>(8,1,'integer',['unsigned'|['big']]),
						  #<1>(8,1,'integer',['unsigned'|['big']]),
						  #<120>(8,1,'integer',['unsigned'|['big']])}#})
		    do  %% Line 1448
			call 'ets':'insert'
			    (PT, %% Line 1449
				 {'c',#{#<131>(8,1,'integer',['unsigned'|['big']]),
					#<108>(8,1,'integer',['unsigned'|['big']]),
					#<0>(8,1,'integer',['unsigned'|['big']]),
					#<0>(8,1,'integer',['unsigned'|['big']]),
					#<0>(8,1,'integer',['unsigned'|['big']]),
					#<1>(8,1,'integer',['unsigned'|['big']]),
					#<104>(8,1,'integer',['unsigned'|['big']]),
					#<3>(8,1,'integer',['unsigned'|['big']]),
					#<100>(8,1,'integer',['unsigned'|['big']]),
					#<0>(8,1,'integer',['unsigned'|['big']]),
					#<1>(8,1,'integer',['unsigned'|['big']]),
					#<95>(8,1,'integer',['unsigned'|['big']]),
					#<106>(8,1,'integer',['unsigned'|['big']]),
					#<108>(8,1,'integer',['unsigned'|['big']]),
					#<0>(8,1,'integer',['unsigned'|['big']]),
					#<0>(8,1,'integer',['unsigned'|['big']]),
					#<0>(8,1,'integer',['unsigned'|['big']]),
					#<1>(8,1,'integer',['unsigned'|['big']]),
					#<104>(8,1,'integer',['unsigned'|['big']]),
					#<2>(8,1,'integer',['unsigned'|['big']]),
					#<100>(8,1,'integer',['unsigned'|['big']]),
					#<0>(8,1,'integer',['unsigned'|['big']]),
					#<7>(8,1,'integer',['unsigned'|['big']]),
					#<109>(8,1,'integer',['unsigned'|['big']]),
					#<101>(8,1,'integer',['unsigned'|['big']]),
					#<115>(8,1,'integer',['unsigned'|['big']]),
					#<115>(8,1,'integer',['unsigned'|['big']]),
					#<97>(8,1,'integer',['unsigned'|['big']]),
					#<103>(8,1,'integer',['unsigned'|['big']]),
					#<101>(8,1,'integer',['unsigned'|['big']]),
					#<104>(8,1,'integer',['unsigned'|['big']]),
					#<1>(8,1,'integer',['unsigned'|['big']]),
					#<100>(8,1,'integer',['unsigned'|['big']]),
					#<0>(8,1,'integer',['unsigned'|['big']]),
					#<6>(8,1,'integer',['unsigned'|['big']]),
					#<99>(8,1,'integer',['unsigned'|['big']]),
					#<97>(8,1,'integer',['unsigned'|['big']]),
					#<108>(8,1,'integer',['unsigned'|['big']]),
					#<108>(8,1,'integer',['unsigned'|['big']]),
					#<101>(8,1,'integer',['unsigned'|['big']]),
					#<114>(8,1,'integer',['unsigned'|['big']]),
					#<106>(8,1,'integer',['unsigned'|['big']]),
					#<106>(8,1,'integer',['unsigned'|['big']])}#})
			do  %% Line 1451
			    call 'ets':'insert'
				(PT, %% Line 1452
				     {'caller_trace',#{#<131>(8,1,'integer',['unsigned'|['big']]),
						       #<100>(8,1,'integer',['unsigned'|['big']]),
						       #<0>(8,1,'integer',['unsigned'|['big']]),
						       #<1>(8,1,'integer',['unsigned'|['big']]),
						       #<99>(8,1,'integer',['unsigned'|['big']])}#})
			    do  %% Line 1454
				call 'ets':'insert'
				    (PT, %% Line 1455
					 {'cx',#{#<131>(8,1,'integer',['unsigned'|['big']]),
						 #<108>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<1>(8,1,'integer',['unsigned'|['big']]),
						 #<104>(8,1,'integer',['unsigned'|['big']]),
						 #<3>(8,1,'integer',['unsigned'|['big']]),
						 #<100>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<1>(8,1,'integer',['unsigned'|['big']]),
						 #<95>(8,1,'integer',['unsigned'|['big']]),
						 #<106>(8,1,'integer',['unsigned'|['big']]),
						 #<108>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<2>(8,1,'integer',['unsigned'|['big']]),
						 #<104>(8,1,'integer',['unsigned'|['big']]),
						 #<1>(8,1,'integer',['unsigned'|['big']]),
						 #<100>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<15>(8,1,'integer',['unsigned'|['big']]),
						 #<101>(8,1,'integer',['unsigned'|['big']]),
						 #<120>(8,1,'integer',['unsigned'|['big']]),
						 #<99>(8,1,'integer',['unsigned'|['big']]),
						 #<101>(8,1,'integer',['unsigned'|['big']]),
						 #<112>(8,1,'integer',['unsigned'|['big']]),
						 #<116>(8,1,'integer',['unsigned'|['big']]),
						 #<105>(8,1,'integer',['unsigned'|['big']]),
						 #<111>(8,1,'integer',['unsigned'|['big']]),
						 #<110>(8,1,'integer',['unsigned'|['big']]),
						 #<95>(8,1,'integer',['unsigned'|['big']]),
						 #<116>(8,1,'integer',['unsigned'|['big']]),
						 #<114>(8,1,'integer',['unsigned'|['big']]),
						 #<97>(8,1,'integer',['unsigned'|['big']]),
						 #<99>(8,1,'integer',['unsigned'|['big']]),
						 #<101>(8,1,'integer',['unsigned'|['big']]),
						 #<104>(8,1,'integer',['unsigned'|['big']]),
						 #<2>(8,1,'integer',['unsigned'|['big']]),
						 #<100>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<7>(8,1,'integer',['unsigned'|['big']]),
						 #<109>(8,1,'integer',['unsigned'|['big']]),
						 #<101>(8,1,'integer',['unsigned'|['big']]),
						 #<115>(8,1,'integer',['unsigned'|['big']]),
						 #<115>(8,1,'integer',['unsigned'|['big']]),
						 #<97>(8,1,'integer',['unsigned'|['big']]),
						 #<103>(8,1,'integer',['unsigned'|['big']]),
						 #<101>(8,1,'integer',['unsigned'|['big']]),
						 #<104>(8,1,'integer',['unsigned'|['big']]),
						 #<1>(8,1,'integer',['unsigned'|['big']]),
						 #<100>(8,1,'integer',['unsigned'|['big']]),
						 #<0>(8,1,'integer',['unsigned'|['big']]),
						 #<6>(8,1,'integer',['unsigned'|['big']]),
						 #<99>(8,1,'integer',['unsigned'|['big']]),
						 #<97>(8,1,'integer',['unsigned'|['big']]),
						 #<108>(8,1,'integer',['unsigned'|['big']]),
						 #<108>(8,1,'integer',['unsigned'|['big']]),
						 #<101>(8,1,'integer',['unsigned'|['big']]),
						 #<114>(8,1,'integer',['unsigned'|['big']]),
						 #<106>(8,1,'integer',['unsigned'|['big']]),
						 #<106>(8,1,'integer',['unsigned'|['big']])}#})
				do  %% Line 1458
				    call 'ets':'insert'
					(PT, %% Line 1459
					     {'caller_exception_trace',#{#<131>(8,1,'integer',['unsigned'|['big']]),
									 #<100>(8,1,'integer',['unsigned'|['big']]),
									 #<0>(8,1,'integer',['unsigned'|['big']]),
									 #<2>(8,1,'integer',['unsigned'|['big']]),
									 #<99>(8,1,'integer',['unsigned'|['big']]),
									 #<120>(8,1,'integer',['unsigned'|['big']])}#})
				    %% Line 1461
				    PT
'pt_doforall'/2 =
    %% Line 1464
    fun (_cor1,_cor0) ->
	let <T> =
	    %% Line 1465
	    apply 'get_pattern_table'/0
		()
	in  let <_cor3> =
		%% Line 1466
		call 'ets':'first'
		    (T)
	    in  %% Line 1466
		apply 'pt_doforall'/4
		    (T, _cor1, _cor3, _cor0)
'pt_doforall'/4 =
    %% Line 1468
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_cor12,_cor13,'$end_of_table',_X_Ld> when 'true' ->
	      %% Line 1469
	      'ok'
	  %% Line 1470
	  <T,Fun,Key,Ld> when 'true' ->
	      %% Line 1471
	      case call 'ets':'lookup'
		       (T, Key) of
		<[{A,B}|[]]> when 'true' ->
		    let <_cor5> =
			%% Line 1472
			call 'erlang':'binary_to_term'
			    (B)
		    in  let <NLd> =
			    %% Line 1472
			    apply Fun
				({A,_cor5}, Ld)
			in  let <_cor7> =
				%% Line 1473
				call 'ets':'next'
				    (T, Key)
			    in  %% Line 1473
				apply 'pt_doforall'/4
				    (T, Fun, _cor7, NLd)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	end
'lint_tp'/1 =
    %% Line 1475
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 1476
	      {'ok',[]}
	  %% Line 1477
	  <Pattern> when 'true' ->
	      %% Line 1478
	      case call 'erlang':'match_spec_test'
		       ([], Pattern, 'trace') of
		%% Line 1479
		<{'ok',_X_Res,Warnings,_X_Flags}> when 'true' ->
		    %% Line 1480
		    {'ok',Warnings}
		%% Line 1481
		<{'error',Reasons}> when 'true' ->
		    %% Line 1482
		    {'error',Reasons}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	end
'check_list'/1 =
    %% Line 1485
    fun (_cor0) ->
	let <_cor7> =
	    catch
		let <_cor6> =
		    %% Line 1487
		    ( fun (_cor3,_cor2) ->
			  %% Line 1488
			  case %% Line 1489
			       call 'erlang':'match_spec_test'
				   ([], _cor3, 'trace') of
			    <{'ok',_cor11,_cor12,_cor13}> when 'true' ->
				%% Line 1490
				'ok'
			    ( <_cor1> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor1})
			      -| ['compiler_generated'] )
			  end
		      -| [{'id',{0,0,'-check_list/1-fun-0-'}}] )
		in  %% Line 1486
		    call 'lists':'foldl'
			(_cor6, %% Line 1492
				'ok', _cor0)
	in  %% Line 1486
	    case _cor7 of
	      %% Line 1493
	      <{'EXIT',_cor14}> when 'true' ->
		  %% Line 1494
		  {'error','bad_match_spec'}
	      %% Line 1495
	      <'ok'> when 'true' ->
		  %% Line 1496
		  'ok'
	      %% Line 1497
	      <_X_Else> when 'true' ->
		  %% Line 1498
		  {'error','badfile'}
	    end
'wrap_presort'/2 =
    %% Line 1508
    fun (_cor1,_cor0) ->
	let <Name> =
	    %% Line 1509
	    call 'filename':'basename'
		(_cor1)
	in  let <Dirname> =
		%% Line 1510
		call 'filename':'dirname'
		    (_cor1)
	    in  %% Line 1511
		case call 'file':'list_dir'
			 (Dirname) of
		  %% Line 1512
		  <{'ok',Files}> when 'true' ->
		      let <_cor11> =
			  %% Line 1514
			  ( fun (_cor9) ->
				%% Line 1515
				case apply 'match_front'/2
					 (_cor9, Name) of
				  %% Line 1516
				  <'false'> when 'true' ->
				      %% Line 1517
				      'false'
				  %% Line 1518
				  <X> when 'true' ->
				      %% Line 1519
				      case apply 'match_rear'/2
					       (X, _cor0) of
					%% Line 1520
					<'false'> when 'true' ->
					    %% Line 1521
					    'false'
					%% Line 1522
					<C> when 'true' ->
					    %% Line 1523
					    case apply 'match_0_9'/1
						     (C) of
					      %% Line 1524
					      <'true'> when 'true' ->
						  let <_cor4> =
						      %% Line 1527
						      call 'filename':'join'
							  (Dirname, _cor9)
						  in  let <_cor5> =
							  %% Line 1526
							  apply 'wrap_encode'/2
							      (_cor4, %% Line 1528
								      C)
						      in  %% Line 1525
							  {'true',_cor5}
					      %% Line 1529
					      <'false'> when 'true' ->
						  %% Line 1530
						  'false'
					      ( <_cor6> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor6})
						-| ['compiler_generated'] )
					    end
				      end
				end
			    -| [{'id',{0,0,'-wrap_presort/2-fun-0-'}}] )
		      in  %% Line 1513
			  call 'lists':'zf'
			      (_cor11, %% Line 1535
				       Files)
		  %% Line 1536
		  <_cor15> when 'true' ->
		      %% Line 1537
		      []
		end
'wrap_sort'/2 =
    %% Line 1543
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1544
	    call 'lists':'sort'
		(_cor1)
	in  %% Line 1544
	    apply 'wrap_sortfix'/2
		(_cor2, _cor0)
'wrap_sortfix'/2 =
    %% Line 1550
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],N>
	      when call 'erlang':'>='
		    (N,
		     1) ->
	      %% Line 1551
	      []
	  %% Line 1552
	  <[],_X_N> when 'true' ->
	      %% Line 1553
	      call 'erlang':'exit'
		  ('inconsistent_wrap_file_trace_set')
	  %% Line 1555
	  <Files = [{0,_cor4}|[]],N>
	      when call 'erlang':'>='
		    (N,
		     1) ->
	      %% Line 1556
	      Files
	  %% Line 1557
	  <[{0,_cor5}|[]],_X_N> when 'true' ->
	      %% Line 1558
	      call 'erlang':'exit'
		  ('inconsistent_wrap_file_trace_set')
	  %% Line 1560
	  <Files = [{0,_cor6}|_cor7],N>
	      when call 'erlang':'>='
		    (N,
		     1) ->
	      %% Line 1561
	      apply 'wrap_sortfix_1'/4
		  (Files, N, [], Files)
	  %% Line 1563
	  <Files = [{1,_cor8}|_cor9],N>
	      when call 'erlang':'>='
		    (N,
		     1) ->
	      %% Line 1564
	      apply 'wrap_sortfix_2'/4
		  (Files, N, [], Files)
	  %% Line 1565
	  <[{_X_C,_cor10}|_cor11],_X_N> when 'true' ->
	      %% Line 1566
	      call 'erlang':'exit'
		  ('inconsistent_wrap_file_trace_set')
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'wrap_sortfix',2}}] )
	    -| ['compiler_generated'] )
	end
'wrap_sortfix_1'/4 =
    %% Line 1569
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{C,_cor15}|[]],N,_X_R,Files>
	      when %% Line 1570
		call 'erlang':'<'
		    (C,
		     N) ->
	      %% Line 1571
	      Files
	  %% Line 1573
	  <[F1 = {C1,_cor16}|Tail = [{C2,_cor17}|_cor18]],N,R,Files>
	      when %% Line 1574
		try
		    let <_cor4> =
			call 'erlang':'+'
			    (C1, 1)
		    in  let <_cor5> =
			    call 'erlang':'=='
				(_cor4, C2)
			in  let <_cor6> =
				call 'erlang':'<'
				    (C2, N)
			    in  call 'erlang':'and'
				    (_cor5, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1575
	      apply 'wrap_sortfix_1'/4
		  (Tail, N, [F1|R], Files)
	  %% Line 1577
	  <[F1 = {C1,_cor19}|Tail = [{C2,_cor20}|_cor21]],N,R,_X_Files>
	      when %% Line 1578
		try
		    let <_cor7> =
			call 'erlang':'+'
			    (C1, 2)
		    in  let <_cor8> =
			    call 'erlang':'=='
				(_cor7, C2)
			in  let <_cor9> =
				call 'erlang':'=<'
				    (C2, N)
			    in  call 'erlang':'and'
				    (_cor8, _cor9)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor10> =
		  %% Line 1579
		  call 'lists':'reverse'
		      ([F1|R])
	      in  %% Line 1579
		  apply 'wrap_sortfix_2'/4
		      (Tail, N, _cor10, Tail)
	  %% Line 1580
	  <[_X_F1|[_X_F2|_cor22]],_X_N,_X_R,_X_Files> when 'true' ->
	      %% Line 1581
	      call 'erlang':'exit'
		  ('inconsistent_wrap_file_trace_set')
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'wrap_sortfix_1',4}}] )
	    -| ['compiler_generated'] )
	end
'wrap_sortfix_2'/4 =
    %% Line 1584
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{N,_cor11}|[]],_cor12,R,Files>
	      when call 'erlang':'=:='
		    (_cor12,
		     N) ->
	      %% Line 1585
	      call 'erlang':'++'
		  (Files, R)
	  %% Line 1586
	  <[{_X_C,_cor13}|[]],_X_N,_X_R,_X_Files> when 'true' ->
	      %% Line 1587
	      call 'erlang':'exit'
		  ('inconsistent_wrap_file_trace_set')
	  %% Line 1589
	  <[{C1,_cor14}|Tail = [{C2,_cor15}|_cor16]],N,R,Files>
	      when %% Line 1590
		try
		    let <_cor4> =
			call 'erlang':'+'
			    (C1, 1)
		    in  let <_cor5> =
			    call 'erlang':'=='
				(_cor4, C2)
			in  let <_cor6> =
				call 'erlang':'=<'
				    (C2, N)
			    in  call 'erlang':'and'
				    (_cor5, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1591
	      apply 'wrap_sortfix_2'/4
		  (Tail, N, R, Files)
	  %% Line 1592
	  <[{_X_C1,_cor17}|[{_X_C2,_cor18}|_cor19]],_X_N,_X_R,_X_Files> when 'true' ->
	      %% Line 1593
	      call 'erlang':'exit'
		  ('inconsistent_wrap_file_trace_set')
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'wrap_sortfix_2',4}}] )
	    -| ['compiler_generated'] )
	end
'wrap_postsort'/1 =
    %% Line 1598
    fun (_cor0) ->
	%% Line 1599
	call 'lists':'map'
	    (( 'wrap_name'/1
	       -| [{'id',{0,0,'-wrap_postsort/1-fun-0-'}}] ), _cor0)
'wrap_encode'/2 =
    %% Line 1601
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1602
	    call 'erlang':'list_to_integer'
		(_cor0)
	in  %% Line 1602
	    {_cor2,_cor1}
'wrap_name'/1 =
    %% Line 1604
    fun (_cor0) ->
	case _cor0 of
	  <{_X_C,N}> when 'true' ->
	      %% Line 1605
	      N
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'wrap_name',1}}] )
	    -| ['compiler_generated'] )
	end
'match_front'/2 =
    %% Line 1610
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <ListA,[]>
	      when call 'erlang':'is_list'
		    (ListA) ->
	      %% Line 1611
	      ListA
	  %% Line 1612
	  <[],ListB>
	      when call 'erlang':'is_list'
		    (ListB) ->
	      %% Line 1613
	      'false'
	  %% Line 1614
	  <[Hd|TlA],[_cor4|TlB]>
	      when call 'erlang':'=:='
		    (_cor4,
		     Hd) ->
	      %% Line 1615
	      apply 'match_front'/2
		  (TlA, TlB)
	  %% Line 1616
	  <[_X_HdA|_cor5],[_X_HdB|_cor6]> when 'true' ->
	      %% Line 1617
	      'false'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'match_front',2}}] )
	    -| ['compiler_generated'] )
	end
'match_rear'/2 =
    %% Line 1620
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <ListA,ListB>
	      when let <_cor2> =
		    call 'erlang':'is_list'
			(ListA)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (ListB)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor5> =
		  %% Line 1621
		  call 'lists':'reverse'
		      (ListA)
	      in  let <_cor4> =
		      %% Line 1621
		      call 'lists':'reverse'
			  (ListB)
		  in  %% Line 1621
		      case apply 'match_front'/2
			       (_cor5, _cor4) of
			%% Line 1622
			<'false'> when 'true' ->
			    %% Line 1623
			    'false'
			%% Line 1624
			<List> when 'true' ->
			    %% Line 1625
			    call 'lists':'reverse'
				(List)
		      end
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'match_rear',2}}] )
	    -| ['compiler_generated'] )
	end
'match_0_9'/1 =
    %% Line 1630
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 1631
	      'false'
	  %% Line 1632
	  <[H|[]]>
	      when try
		    let <_cor1> =
			call 'erlang':'is_integer'
			    (H)
		    in  let <_cor2> =
			    call 'erlang':'=<'
				(48, H)
			in  let <_cor3> =
				call 'erlang':'=<'
				    (H, 57)
			    in  let <_cor4> =
				    call 'erlang':'and'
					(_cor2, _cor3)
				in  call 'erlang':'and'
					(_cor1, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1633
	      'true'
	  %% Line 1634
	  <[H|T]>
	      when try
		    let <_cor5> =
			call 'erlang':'is_integer'
			    (H)
		    in  let <_cor6> =
			    call 'erlang':'=<'
				(48, H)
			in  let <_cor7> =
				call 'erlang':'=<'
				    (H, 57)
			    in  let <_cor8> =
				    call 'erlang':'and'
					(_cor6, _cor7)
				in  call 'erlang':'and'
					(_cor5, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1635
	      apply 'match_0_9'/1
		  (T)
	  %% Line 1636
	  <L>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 1637
	      'false'
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'match_0_9',1}}] )
	    -| ['compiler_generated'] )
	end
'help_display'/1 =
    %% Line 1643
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      do  %% Line 1644
		  call 'io':'format'
		      ([126|[110]], [])
		  %% Line 1645
		  'ok'
	  %% Line 1646
	  <[H|T]> when 'true' ->
	      do  %% Line 1647
		  call 'io':'format'
		      ([126|[115|[126|[110]]]], [H|[]])
		  %% Line 1648
		  apply 'help_display'/1
		      (T)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'help_display',1}}] )
	    -| ['compiler_generated'] )
	end
'h'/0 =
    %% Line 1650
    fun () ->
	%% Line 1651
	apply 'help_display'/1
	    (%% Line 1652
	     [[84|[104|[101|[32|[102|[111|[108|[108|[111|[119|[105|[110|[103|[32|[104|[101|[108|[112|[32|[105|[116|[101|[109|[115|[32|[97|[114|[101|[32|[97|[118|[97|[105|[108|[97|[98|[108|[101|[58]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[32|[32|[112|[44|[32|[99]]]]]]]|[[32|[32|[32|[32|[32|[32|[32|[45|[32|[83|[101|[116|[32|[116|[114|[97|[99|[101|[32|[102|[108|[97|[103|[115|[32|[102|[111|[114|[32|[112|[114|[111|[99|[101|[115|[115|[101|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[32|[32|[116|[112|[44|[32|[116|[112|[108|[44|[32|[99|[116|[112|[44|[32|[99|[116|[112|[108|[44|[32|[99|[116|[112|[103|[44|[32|[108|[116|[112|[44|[32|[100|[116|[112|[44|[32|[119|[116|[112|[44|[32|[114|[116|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[32|[32|[32|[32|[32|[32|[45|[32|[77|[97|[110|[105|[112|[117|[108|[97|[116|[101|[32|[116|[114|[97|[99|[101|[32|[112|[97|[116|[116|[101|[114|[110|[115|[32|[102|[111|[114|[32|[102|[117|[110|[99|[116|[105|[111|[110|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[32|[32|[110|[44|[32|[99|[110|[44|[32|[108|[110]]]]]]]]]]]]|[[32|[32|[32|[32|[32|[32|[32|[45|[32|[65|[100|[100|[47|[114|[101|[109|[111|[118|[101|[32|[116|[114|[97|[99|[101|[100|[32|[110|[111|[100|[101|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[32|[32|[116|[114|[97|[99|[101|[114|[44|[32|[116|[114|[97|[99|[101|[95|[112|[111|[114|[116|[44|[32|[116|[114|[97|[99|[101|[95|[99|[108|[105|[101|[110|[116|[44|[32|[103|[101|[116|[95|[116|[114|[97|[99|[101|[114|[44|[32|[115|[116|[111|[112|[44|[32|[115|[116|[111|[112|[95|[99|[108|[101|[97|[114]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[32|[32|[32|[32|[32|[32|[45|[32|[77|[97|[110|[105|[112|[117|[108|[97|[116|[101|[32|[116|[114|[97|[99|[101|[114|[32|[112|[114|[111|[99|[101|[115|[115|[47|[112|[111|[114|[116]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[32|[32|[105]]]]|[[32|[32|[32|[32|[32|[32|[32|[45|[32|[73|[110|[102|[111]]]]]]]]]]]]]|[[]|[[99|[97|[108|[108|[32|[100|[98|[103|[58|[104|[40|[73|[116|[101|[109|[41|[32|[102|[111|[114|[32|[98|[114|[105|[101|[102|[32|[104|[101|[108|[112|[32|[97|[32|[98|[114|[105|[101|[102|[32|[100|[101|[115|[99|[114|[105|[112|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[111|[102|[32|[111|[110|[101|[32|[111|[102|[32|[116|[104|[101|[32|[105|[116|[101|[109|[115|[32|[97|[98|[111|[118|[101|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
'h'/1 =
    %% Line 1667
    fun (_cor0) ->
	case _cor0 of
	  <'p'> when 'true' ->
	      %% Line 1668
	      apply 'help_display'/1
		  ([[112|[40|[73|[116|[101|[109|[41|[32|[45|[62|[32|[123|[111|[107|[44|[32|[77|[97|[116|[99|[104|[68|[101|[115|[99|[125|[32|[124|[32|[123|[101|[114|[114|[111|[114|[44|[32|[116|[101|[114|[109|[40|[41|[125]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[45|[32|[84|[114|[97|[99|[101|[115|[32|[109|[101|[115|[115|[97|[103|[101|[115|[32|[116|[111|[32|[97|[110|[100|[32|[102|[114|[111|[109|[32|[73|[116|[101|[109|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[112|[40|[73|[116|[101|[109|[44|[32|[70|[108|[97|[103|[115|[41|[32|[45|[62|[32|[123|[111|[107|[44|[32|[77|[97|[116|[99|[104|[68|[101|[115|[99|[125|[32|[124|[32|[123|[101|[114|[114|[111|[114|[44|[32|[116|[101|[114|[109|[40|[41|[125]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[45|[32|[84|[114|[97|[99|[101|[115|[32|[73|[116|[101|[109|[32|[97|[99|[99|[111|[114|[100|[105|[110|[103|[32|[116|[111|[32|[70|[108|[97|[103|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[32|[32|[70|[108|[97|[103|[115|[32|[99|[97|[110|[32|[98|[101|[32|[111|[110|[101|[32|[111|[102|[32|[115|[44|[114|[44|[109|[44|[99|[44|[112|[44|[115|[111|[115|[44|[115|[111|[108|[44|[115|[111|[102|[115|[44]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[32|[32|[115|[111|[102|[108|[44|[97|[108|[108|[44|[99|[108|[101|[97|[114|[32|[111|[114|[32|[97|[110|[121|[32|[102|[108|[97|[103|[32|[97|[99|[99|[101|[112|[116|[101|[100|[32|[98|[121|[32|[101|[114|[108|[97|[110|[103|[58|[116|[114|[97|[99|[101|[47|[51]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	  %% Line 1674
	  <'c'> when 'true' ->
	      %% Line 1675
	      apply 'help_display'/1
		  ([[99|[40|[77|[111|[100|[44|[32|[70|[117|[110|[44|[32|[65|[114|[103|[115|[41]]]]]]]]]]]]]]]]]|[[32|[45|[32|[69|[118|[97|[108|[117|[97|[116|[101|[115|[32|[97|[112|[112|[108|[121|[40|[77|[44|[70|[44|[65|[114|[103|[115|[41|[32|[119|[105|[116|[104|[32|[97|[108|[108|[32|[116|[114|[97|[99|[101|[32|[102|[108|[97|[103|[115|[32|[115|[101|[116|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[99|[40|[77|[111|[100|[44|[32|[70|[117|[110|[44|[32|[65|[114|[103|[115|[44|[32|[70|[108|[97|[103|[115|[41]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[45|[32|[69|[118|[97|[108|[117|[97|[116|[101|[115|[32|[97|[112|[112|[108|[121|[40|[77|[44|[70|[44|[65|[114|[103|[115|[41|[32|[119|[105|[116|[104|[32|[70|[108|[97|[103|[115|[32|[116|[114|[97|[99|[101|[32|[102|[108|[97|[103|[115|[32|[115|[101|[116|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	  %% Line 1679
	  <'i'> when 'true' ->
	      %% Line 1680
	      apply 'help_display'/1
		  ([[105|[40|[41|[32|[45|[62|[32|[111|[107]]]]]]]]]|[[32|[45|[32|[68|[105|[115|[112|[108|[97|[121|[115|[32|[105|[110|[102|[111|[114|[109|[97|[116|[105|[111|[110|[32|[97|[98|[111|[117|[116|[32|[97|[108|[108|[32|[116|[114|[97|[99|[101|[100|[32|[112|[114|[111|[99|[101|[115|[115|[101|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	  %% Line 1682
	  <'tp'> when 'true' ->
	      %% Line 1683
	      apply 'help_display'/1
		  (%% Line 1684
		   [[116|[112|[40|[77|[111|[100|[117|[108|[101|[44|[77|[97|[116|[99|[104|[83|[112|[101|[99|[41]]]]]]]]]]]]]]]]]]]]|[[32|[45|[32|[83|[97|[109|[101|[32|[97|[115|[32|[116|[112|[40|[123|[77|[111|[100|[117|[108|[101|[44|[32|[39|[95|[39|[44|[32|[39|[95|[39|[125|[44|[32|[77|[97|[116|[99|[104|[83|[112|[101|[99|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[116|[112|[40|[77|[111|[100|[117|[108|[101|[44|[70|[117|[110|[99|[116|[105|[111|[110|[44|[77|[97|[116|[99|[104|[83|[112|[101|[99|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[45|[32|[83|[97|[109|[101|[32|[97|[115|[32|[116|[112|[40|[123|[77|[111|[100|[117|[108|[101|[44|[32|[70|[117|[110|[99|[116|[105|[111|[110|[44|[32|[39|[95|[39|[125|[44|[32|[77|[97|[116|[99|[104|[83|[112|[101|[99|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[116|[112|[40|[77|[111|[100|[117|[108|[101|[44|[32|[70|[117|[110|[99|[116|[105|[111|[110|[44|[32|[65|[114|[105|[116|[121|[44|[32|[77|[97|[116|[99|[104|[83|[112|[101|[99|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[45|[32|[83|[97|[109|[101|[32|[97|[115|[32|[116|[112|[40|[123|[77|[111|[100|[117|[108|[101|[44|[32|[70|[117|[110|[99|[116|[105|[111|[110|[44|[32|[65|[114|[105|[116|[121|[125|[44|[32|[77|[97|[116|[99|[104|[83|[112|[101|[99|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[116|[112|[40|[123|[77|[111|[100|[117|[108|[101|[44|[32|[70|[117|[110|[99|[116|[105|[111|[110|[44|[32|[65|[114|[105|[116|[121|[125|[44|[32|[77|[97|[116|[99|[104|[83|[112|[101|[99|[41|[32|[45|[62|[32|[123|[111|[107|[44|[32|[77|[97|[116|[99|[104|[68|[101|[115|[99|[125|[32|[124|[32|[123|[101|[114|[114|[111|[114|[44|[32|[116|[101|[114|[109|[40|[41|[125]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[45|[32|[83|[101|[116|[32|[112|[97|[116|[116|[101|[114|[110|[32|[102|[111|[114|[32|[116|[114|[97|[99|[101|[100|[32|[103|[108|[111|[98|[97|[108|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[99|[97|[108|[108|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	  %% Line 1693
	  <'tpl'> when 'true' ->
	      %% Line 1694
	      apply 'help_display'/1
		  (%% Line 1695
		   [[116|[112|[108|[40|[77|[111|[100|[117|[108|[101|[44|[77|[97|[116|[99|[104|[83|[112|[101|[99|[41]]]]]]]]]]]]]]]]]]]]]|[[32|[45|[32|[83|[97|[109|[101|[32|[97|[115|[32|[116|[112|[108|[40|[123|[77|[111|[100|[117|[108|[101|[44|[32|[39|[95|[39|[44|[32|[39|[95|[39|[125|[44|[32|[77|[97|[116|[99|[104|[83|[112|[101|[99|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[116|[112|[108|[40|[77|[111|[100|[117|[108|[101|[44|[70|[117|[110|[99|[116|[105|[111|[110|[44|[77|[97|[116|[99|[104|[83|[112|[101|[99|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[45|[32|[83|[97|[109|[101|[32|[97|[115|[32|[116|[112|[108|[40|[123|[77|[111|[100|[117|[108|[101|[44|[32|[70|[117|[110|[99|[116|[105|[111|[110|[44|[32|[39|[95|[39|[125|[44|[32|[77|[97|[116|[99|[104|[83|[112|[101|[99|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[116|[112|[108|[40|[77|[111|[100|[117|[108|[101|[44|[32|[70|[117|[110|[99|[116|[105|[111|[110|[44|[32|[65|[114|[105|[116|[121|[44|[32|[77|[97|[116|[99|[104|[83|[112|[101|[99|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[45|[32|[83|[97|[109|[101|[32|[97|[115|[32|[116|[112|[108|[40|[123|[77|[111|[100|[117|[108|[101|[44|[32|[70|[117|[110|[99|[116|[105|[111|[110|[44|[32|[65|[114|[105|[116|[121|[125|[44|[32|[77|[97|[116|[99|[104|[83|[112|[101|[99|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[116|[112|[108|[40|[123|[77|[111|[100|[117|[108|[101|[44|[32|[70|[117|[110|[99|[116|[105|[111|[110|[44|[32|[65|[114|[105|[116|[121|[125|[44|[32|[77|[97|[116|[99|[104|[83|[112|[101|[99|[41|[32|[45|[62|[32|[123|[111|[107|[44|[32|[77|[97|[116|[99|[104|[68|[101|[115|[99|[125|[32|[124|[32|[123|[101|[114|[114|[111|[114|[44|[32|[116|[101|[114|[109|[40|[41|[125]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[45|[32|[83|[101|[116|[32|[112|[97|[116|[116|[101|[114|[110|[32|[102|[111|[114|[32|[116|[114|[97|[99|[101|[100|[32|[108|[111|[99|[97|[108|[32|[40|[97|[115|[32|[119|[101|[108|[108|[32|[97|[115|[32|[103|[108|[111|[98|[97|[108|[41|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[99|[97|[108|[108|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	  %% Line 1704
	  <'ctp'> when 'true' ->
	      %% Line 1705
	      apply 'help_display'/1
		  (%% Line 1706
		   [[99|[116|[112|[40|[41]]]]]|[[32|[45|[32|[83|[97|[109|[101|[32|[97|[115|[32|[99|[116|[112|[40|[123|[39|[95|[39|[44|[32|[39|[95|[39|[44|[32|[39|[95|[39|[125|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[99|[116|[112|[40|[77|[111|[100|[117|[108|[101|[41]]]]]]]]]]]|[[32|[45|[32|[83|[97|[109|[101|[32|[97|[115|[32|[99|[116|[112|[40|[123|[77|[111|[100|[117|[108|[101|[44|[32|[39|[95|[39|[44|[32|[39|[95|[39|[125|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[99|[116|[112|[40|[77|[111|[100|[117|[108|[101|[44|[32|[70|[117|[110|[99|[116|[105|[111|[110|[41]]]]]]]]]]]]]]]]]]]]]|[[32|[45|[32|[83|[97|[109|[101|[32|[97|[115|[32|[99|[116|[112|[40|[123|[77|[111|[100|[117|[108|[101|[44|[32|[70|[117|[110|[99|[116|[105|[111|[110|[44|[32|[39|[95|[39|[125|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[99|[116|[112|[40|[77|[111|[100|[117|[108|[101|[44|[32|[70|[117|[110|[99|[116|[105|[111|[110|[44|[32|[65|[114|[105|[116|[121|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[45|[32|[83|[97|[109|[101|[32|[97|[115|[32|[99|[116|[112|[40|[123|[77|[111|[100|[117|[108|[101|[44|[32|[70|[117|[110|[99|[116|[105|[111|[110|[44|[32|[65|[114|[105|[116|[121|[125|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[99|[116|[112|[40|[123|[77|[111|[100|[117|[108|[101|[44|[32|[70|[117|[110|[99|[116|[105|[111|[110|[44|[32|[65|[114|[105|[116|[121|[125|[41|[32|[45|[62|[32|[123|[111|[107|[44|[32|[77|[97|[116|[99|[104|[68|[101|[115|[99|[125|[32|[124|[32|[123|[101|[114|[114|[111|[114|[44|[32|[116|[101|[114|[109|[40|[41|[125]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[45|[32|[67|[108|[101|[97|[114|[32|[99|[97|[108|[108|[32|[116|[114|[97|[99|[101|[32|[112|[97|[116|[116|[101|[114|[110|[32|[102|[111|[114|[32|[116|[104|[101|[32|[115|[112|[101|[99|[105|[102|[105|[101|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	  %% Line 1716
	  <'ctpl'> when 'true' ->
	      %% Line 1717
	      apply 'help_display'/1
		  (%% Line 1718
		   [[99|[116|[112|[108|[40|[41]]]]]]|[[32|[45|[32|[83|[97|[109|[101|[32|[97|[115|[32|[99|[116|[112|[108|[40|[123|[39|[95|[39|[44|[32|[39|[95|[39|[44|[32|[39|[95|[39|[125|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[99|[116|[112|[108|[40|[77|[111|[100|[117|[108|[101|[41]]]]]]]]]]]]|[[32|[45|[32|[83|[97|[109|[101|[32|[97|[115|[32|[99|[116|[112|[108|[40|[123|[77|[111|[100|[117|[108|[101|[44|[32|[39|[95|[39|[44|[32|[39|[95|[39|[125|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[99|[116|[112|[108|[40|[77|[111|[100|[117|[108|[101|[44|[32|[70|[117|[110|[99|[116|[105|[111|[110|[41]]]]]]]]]]]]]]]]]]]]]]|[[32|[45|[32|[83|[97|[109|[101|[32|[97|[115|[32|[99|[116|[112|[108|[40|[123|[77|[111|[100|[117|[108|[101|[44|[32|[70|[117|[110|[99|[116|[105|[111|[110|[44|[32|[39|[95|[39|[125|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[99|[116|[112|[108|[40|[77|[111|[100|[117|[108|[101|[44|[32|[70|[117|[110|[99|[116|[105|[111|[110|[44|[32|[65|[114|[105|[116|[121|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[45|[32|[83|[97|[109|[101|[32|[97|[115|[32|[99|[116|[112|[108|[40|[123|[77|[111|[100|[117|[108|[101|[44|[32|[70|[117|[110|[99|[116|[105|[111|[110|[44|[32|[65|[114|[105|[116|[121|[125|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[99|[116|[112|[108|[40|[123|[77|[111|[100|[117|[108|[101|[44|[32|[70|[117|[110|[99|[116|[105|[111|[110|[44|[32|[65|[114|[105|[116|[121|[125|[41|[32|[45|[62|[32|[123|[111|[107|[44|[32|[77|[97|[116|[99|[104|[68|[101|[115|[99|[125|[32|[124|[32|[123|[101|[114|[114|[111|[114|[44|[32|[116|[101|[114|[109|[40|[41|[125]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[45|[32|[67|[108|[101|[97|[114|[32|[108|[111|[99|[97|[108|[32|[99|[97|[108|[108|[32|[116|[114|[97|[99|[101|[32|[112|[97|[116|[116|[101|[114|[110|[32|[102|[111|[114|[32|[116|[104|[101|[32|[115|[112|[101|[99|[105|[102|[105|[101|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	  %% Line 1728
	  <'ctpg'> when 'true' ->
	      %% Line 1729
	      apply 'help_display'/1
		  (%% Line 1730
		   [[99|[116|[112|[103|[40|[41]]]]]]|[[32|[45|[32|[83|[97|[109|[101|[32|[97|[115|[32|[99|[116|[112|[103|[40|[123|[39|[95|[39|[44|[32|[39|[95|[39|[44|[32|[39|[95|[39|[125|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[99|[116|[112|[103|[40|[77|[111|[100|[117|[108|[101|[41]]]]]]]]]]]]|[[32|[45|[32|[83|[97|[109|[101|[32|[97|[115|[32|[99|[116|[112|[103|[40|[123|[77|[111|[100|[117|[108|[101|[44|[32|[39|[95|[39|[44|[32|[39|[95|[39|[125|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[99|[116|[112|[103|[40|[77|[111|[100|[117|[108|[101|[44|[32|[70|[117|[110|[99|[116|[105|[111|[110|[41]]]]]]]]]]]]]]]]]]]]]]|[[32|[45|[32|[83|[97|[109|[101|[32|[97|[115|[32|[99|[116|[112|[103|[40|[123|[77|[111|[100|[117|[108|[101|[44|[32|[70|[117|[110|[99|[116|[105|[111|[110|[44|[32|[39|[95|[39|[125|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[99|[116|[112|[103|[40|[77|[111|[100|[117|[108|[101|[44|[32|[70|[117|[110|[99|[116|[105|[111|[110|[44|[32|[65|[114|[105|[116|[121|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[45|[32|[83|[97|[109|[101|[32|[97|[115|[32|[99|[116|[112|[103|[40|[123|[77|[111|[100|[117|[108|[101|[44|[32|[70|[117|[110|[99|[116|[105|[111|[110|[44|[32|[65|[114|[105|[116|[121|[125|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[99|[116|[112|[103|[40|[123|[77|[111|[100|[117|[108|[101|[44|[32|[70|[117|[110|[99|[116|[105|[111|[110|[44|[32|[65|[114|[105|[116|[121|[125|[41|[32|[45|[62|[32|[123|[111|[107|[44|[32|[77|[97|[116|[99|[104|[68|[101|[115|[99|[125|[32|[124|[32|[123|[101|[114|[114|[111|[114|[44|[32|[116|[101|[114|[109|[40|[41|[125]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[45|[32|[67|[108|[101|[97|[114|[32|[103|[108|[111|[98|[97|[108|[32|[99|[97|[108|[108|[32|[116|[114|[97|[99|[101|[32|[112|[97|[116|[116|[101|[114|[110|[32|[102|[111|[114|[32|[116|[104|[101|[32|[115|[112|[101|[99|[105|[102|[105|[101|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	  %% Line 1740
	  <'ltp'> when 'true' ->
	      %% Line 1741
	      apply 'help_display'/1
		  ([[108|[116|[112|[40|[41|[32|[45|[62|[32|[111|[107]]]]]]]]]]]|[[32|[45|[32|[76|[105|[115|[116|[115|[32|[115|[97|[118|[101|[100|[32|[97|[110|[100|[32|[98|[117|[105|[108|[116|[45|[105|[110|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99|[39|[115|[32|[111|[110|[32|[116|[104|[101|[32|[99|[111|[110|[115|[111|[108|[101|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	  %% Line 1743
	  <'dtp'> when 'true' ->
	      %% Line 1744
	      apply 'help_display'/1
		  ([[100|[116|[112|[40|[41|[32|[45|[62|[32|[111|[107]]]]]]]]]]]|[[32|[45|[32|[68|[101|[108|[101|[116|[101|[115|[32|[97|[108|[108|[32|[115|[97|[118|[101|[100|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99|[39|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[100|[116|[112|[40|[78|[41|[32|[45|[62|[32|[111|[107]]]]]]]]]]]]|[[32|[45|[32|[68|[101|[108|[101|[116|[101|[115|[32|[97|[32|[115|[112|[101|[99|[105|[102|[105|[99|[32|[115|[97|[118|[101|[100|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	  %% Line 1748
	  <'wtp'> when 'true' ->
	      %% Line 1749
	      apply 'help_display'/1
		  ([[119|[116|[112|[40|[78|[97|[109|[101|[41|[32|[45|[62|[32|[111|[107|[32|[124|[32|[123|[101|[114|[114|[111|[114|[44|[32|[73|[79|[69|[114|[114|[111|[114|[125]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[45|[32|[87|[114|[105|[116|[101|[115|[32|[97|[108|[108|[32|[115|[97|[118|[101|[100|[32|[109|[97|[116|[99|[104|[95|[115|[112|[101|[99|[39|[115|[32|[116|[111|[32|[97|[32|[102|[105|[108|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	  %% Line 1751
	  <'rtp'> when 'true' ->
	      %% Line 1752
	      apply 'help_display'/1
		  ([[114|[116|[112|[40|[78|[97|[109|[101|[41|[32|[45|[62|[32|[111|[107|[32|[124|[32|[123|[101|[114|[114|[111|[114|[44|[32|[69|[114|[114|[111|[114|[125]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[45|[32|[82|[101|[97|[100|[32|[115|[97|[118|[101|[100|[32|[109|[97|[116|[99|[104|[32|[115|[112|[101|[99|[105|[102|[105|[99|[97|[116|[105|[111|[110|[115|[32|[102|[114|[111|[109|[32|[102|[105|[108|[101|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	  %% Line 1754
	  <'n'> when 'true' ->
	      %% Line 1755
	      apply 'help_display'/1
		  (%% Line 1756
		   [[110|[40|[78|[111|[100|[101|[110|[97|[109|[101|[41|[32|[45|[62|[32|[123|[111|[107|[44|[32|[78|[111|[100|[101|[110|[97|[109|[101|[125|[32|[124|[32|[123|[101|[114|[114|[111|[114|[44|[32|[82|[101|[97|[115|[111|[110|[125]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[45|[32|[83|[116|[97|[114|[116|[115|[32|[97|[32|[116|[114|[97|[99|[101|[114|[32|[115|[101|[114|[118|[101|[114|[32|[111|[110|[32|[116|[104|[101|[32|[103|[105|[118|[101|[110|[32|[110|[111|[100|[101|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[110|[40|[78|[111|[100|[101|[110|[97|[109|[101|[44|[84|[121|[112|[101|[44|[68|[97|[116|[97|[41|[32|[45|[62|[32|[123|[111|[107|[44|[32|[78|[111|[100|[101|[110|[97|[109|[101|[125|[32|[124|[32|[123|[101|[114|[114|[111|[114|[44|[32|[82|[101|[97|[115|[111|[110|[125]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[45|[32|[83|[116|[97|[114|[116|[115|[32|[97|[32|[116|[114|[97|[99|[101|[114|[32|[115|[101|[114|[118|[101|[114|[32|[119|[105|[116|[104|[32|[97|[100|[100|[105|[116|[105|[111|[110|[97|[108|[32|[97|[114|[103|[115|[32|[111|[110|[32|[116|[104|[101|[32|[103|[105|[118|[101|[110|[32|[110|[111|[100|[101|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	  %% Line 1760
	  <'cn'> when 'true' ->
	      %% Line 1761
	      apply 'help_display'/1
		  ([[99|[110|[40|[78|[111|[100|[101|[110|[97|[109|[101|[41|[32|[45|[62|[32|[111|[107]]]]]]]]]]]]]]]]]]|[[32|[45|[32|[67|[108|[101|[97|[114|[115|[32|[97|[32|[110|[111|[100|[101|[32|[102|[114|[111|[109|[32|[116|[104|[101|[32|[108|[105|[115|[116|[32|[111|[102|[32|[116|[114|[97|[99|[101|[100|[32|[110|[111|[100|[101|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	  %% Line 1763
	  <'ln'> when 'true' ->
	      %% Line 1764
	      apply 'help_display'/1
		  ([[108|[110|[40|[41|[32|[45|[62|[32|[111|[107]]]]]]]]]]|[[32|[45|[32|[83|[104|[111|[119|[115|[32|[116|[104|[101|[32|[108|[105|[115|[116|[32|[111|[102|[32|[116|[114|[97|[99|[101|[100|[32|[110|[111|[100|[101|[115|[32|[111|[110|[32|[116|[104|[101|[32|[99|[111|[110|[115|[111|[108|[101|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	  %% Line 1766
	  <'tracer'> when 'true' ->
	      %% Line 1767
	      apply 'help_display'/1
		  ([[116|[114|[97|[99|[101|[114|[40|[41|[32|[45|[62|[32|[123|[111|[107|[44|[32|[112|[105|[100|[40|[41|[125|[32|[124|[32|[123|[101|[114|[114|[111|[114|[44|[32|[97|[108|[114|[101|[97|[100|[121|[95|[115|[116|[97|[114|[116|[101|[100|[125]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[45|[32|[83|[116|[97|[114|[116|[115|[32|[97|[32|[116|[114|[97|[99|[101|[114|[32|[115|[101|[114|[118|[101|[114|[32|[116|[104|[97|[116|[32|[104|[97|[110|[100|[108|[101|[115|[32|[116|[114|[97|[99|[101|[32|[109|[101|[115|[115|[97|[103|[101|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[116|[114|[97|[99|[101|[114|[40|[84|[121|[112|[101|[44|[32|[68|[97|[116|[97|[41|[32|[45|[62|[32|[123|[111|[107|[44|[32|[112|[105|[100|[40|[41|[125|[32|[124|[32|[123|[101|[114|[114|[111|[114|[44|[32|[69|[114|[114|[111|[114|[125]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[45|[32|[83|[116|[97|[114|[116|[115|[32|[97|[32|[116|[114|[97|[99|[101|[114|[32|[115|[101|[114|[118|[101|[114|[32|[119|[105|[116|[104|[32|[97|[100|[100|[105|[116|[105|[111|[110|[97|[108|[32|[112|[97|[114|[97|[109|[101|[116|[101|[114|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	  %% Line 1771
	  <'trace_port'> when 'true' ->
	      %% Line 1772
	      apply 'help_display'/1
		  ([[116|[114|[97|[99|[101|[95|[112|[111|[114|[116|[40|[84|[121|[112|[101|[44|[32|[80|[97|[114|[97|[109|[101|[116|[101|[114|[115|[41|[32|[45|[62|[32|[102|[117|[110|[40|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[45|[32|[67|[114|[101|[97|[116|[101|[115|[32|[97|[110|[100|[32|[114|[101|[116|[117|[114|[110|[115|[32|[97|[32|[116|[114|[97|[99|[101|[32|[112|[111|[114|[116|[32|[103|[101|[110|[101|[114|[97|[116|[105|[110|[103|[32|[102|[117|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	  %% Line 1774
	  <'trace_client'> when 'true' ->
	      %% Line 1775
	      apply 'help_display'/1
		  ([[116|[114|[97|[99|[101|[95|[99|[108|[105|[101|[110|[116|[40|[84|[121|[112|[101|[44|[32|[80|[97|[114|[97|[109|[101|[116|[101|[114|[115|[41|[32|[45|[62|[32|[112|[105|[100|[40|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[45|[32|[83|[116|[97|[114|[116|[115|[32|[97|[32|[116|[114|[97|[99|[101|[32|[99|[108|[105|[101|[110|[116|[32|[116|[104|[97|[116|[32|[114|[101|[97|[100|[115|[32|[109|[101|[115|[115|[97|[103|[101|[115|[32|[99|[114|[101|[97|[116|[101|[100|[32|[98|[121|[32|[97|[32|[116|[114|[97|[99|[101|[32|[112|[111|[114|[116|[32|[100|[114|[105|[118|[101|[114]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[116|[114|[97|[99|[101|[95|[99|[108|[105|[101|[110|[116|[40|[84|[121|[112|[101|[44|[32|[80|[97|[114|[97|[109|[101|[116|[101|[114|[115|[44|[32|[72|[97|[110|[100|[108|[101|[114|[83|[112|[101|[99|[41|[32|[45|[62|[32|[112|[105|[100|[40|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[45|[32|[83|[116|[97|[114|[116|[115|[32|[97|[32|[116|[114|[97|[99|[101|[32|[99|[108|[105|[101|[110|[116|[32|[116|[104|[97|[116|[32|[114|[101|[97|[100|[115|[32|[109|[101|[115|[115|[97|[103|[101|[115|[32|[99|[114|[101|[97|[116|[101|[100|[32|[98|[121|[32|[97]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[32|[32|[116|[114|[97|[99|[101|[32|[112|[111|[114|[116|[32|[100|[114|[105|[118|[101|[114|[44|[32|[119|[105|[116|[104|[32|[97|[32|[117|[115|[101|[114|[32|[100|[101|[102|[105|[110|[101|[100|[32|[104|[97|[110|[100|[108|[101|[114]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	  %% Line 1781
	  <'get_tracer'> when 'true' ->
	      %% Line 1782
	      apply 'help_display'/1
		  (%% Line 1783
		   [[103|[101|[116|[95|[116|[114|[97|[99|[101|[114|[40|[41|[32|[45|[62|[32|[123|[111|[107|[44|[32|[84|[114|[97|[99|[101|[114|[125]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[45|[32|[82|[101|[116|[117|[114|[110|[115|[32|[116|[104|[101|[32|[112|[114|[111|[99|[101|[115|[115|[32|[111|[114|[32|[112|[111|[114|[116|[32|[116|[111|[32|[119|[104|[105|[99|[104|[32|[97|[108|[108|[32|[116|[114|[97|[99|[101|[32|[109|[101|[115|[115|[97|[103|[101|[115|[32|[97|[114|[101|[32|[115|[101|[110|[116|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[103|[101|[116|[95|[116|[114|[97|[99|[101|[114|[40|[78|[111|[100|[101|[41|[32|[45|[62|[32|[123|[111|[107|[44|[32|[84|[114|[97|[99|[101|[114|[125]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[45|[32|[82|[101|[116|[117|[114|[110|[115|[32|[116|[104|[101|[32|[112|[114|[111|[99|[101|[115|[115|[32|[111|[114|[32|[112|[111|[114|[116|[32|[116|[111|[32|[119|[104|[105|[99|[104|[32|[97|[108|[108|[32|[116|[114|[97|[99|[101|[32|[109|[101|[115|[115|[97|[103|[101|[115|[32|[97|[114|[101|[32|[115|[101|[110|[116|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	  %% Line 1787
	  <'stop'> when 'true' ->
	      %% Line 1788
	      apply 'help_display'/1
		  (%% Line 1789
		   [[115|[116|[111|[112|[40|[41|[32|[45|[62|[32|[111|[107]]]]]]]]]]]]|[[32|[45|[32|[83|[116|[111|[112|[115|[32|[116|[104|[101|[32|[100|[98|[103|[32|[115|[101|[114|[118|[101|[114|[32|[97|[110|[100|[32|[116|[104|[101|[32|[116|[114|[97|[99|[105|[110|[103|[32|[111|[102|[32|[97|[108|[108|[32|[112|[114|[111|[99|[101|[115|[115|[101|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[32|[32|[68|[111|[101|[115|[32|[110|[111|[116|[32|[99|[108|[101|[97|[114|[32|[97|[110|[121|[32|[116|[114|[97|[99|[101|[32|[112|[97|[116|[116|[101|[114|[110|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	  %% Line 1792
	  <'stop_clear'> when 'true' ->
	      %% Line 1793
	      apply 'help_display'/1
		  (%% Line 1794
		   [[115|[116|[111|[112|[95|[99|[108|[101|[97|[114|[40|[41|[32|[45|[62|[32|[111|[107]]]]]]]]]]]]]]]]]]|[[32|[45|[32|[83|[116|[111|[112|[115|[32|[116|[104|[101|[32|[100|[98|[103|[32|[115|[101|[114|[118|[101|[114|[32|[97|[110|[100|[32|[116|[104|[101|[32|[116|[114|[97|[99|[105|[110|[103|[32|[111|[102|[32|[97|[108|[108|[32|[112|[114|[111|[99|[101|[115|[115|[101|[115|[44]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[32|[32|[32|[97|[110|[100|[32|[99|[108|[101|[97|[114|[115|[32|[97|[108|[108|[32|[116|[114|[97|[99|[101|[32|[112|[97|[116|[116|[101|[114|[110|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'h',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('dbg')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('dbg', _cor0)
end