module 'dyntrace' ['available'/0,
		   'get_tag'/0,
		   'get_tag_data'/0,
		   'module_info'/0,
		   'module_info'/1,
		   'p'/0,
		   'p'/1,
		   'p'/2,
		   'p'/3,
		   'p'/4,
		   'p'/5,
		   'p'/6,
		   'p'/7,
		   'p'/8,
		   'pn'/1,
		   'pn'/2,
		   'pn'/3,
		   'pn'/4,
		   'pn'/5,
		   'pn'/6,
		   'pn'/7,
		   'pn'/8,
		   'pn'/9,
		   'put_tag'/1,
		   'restore_tag'/1,
		   'spread_tag'/1,
		   'user_trace_i4s4'/9,
		   'user_trace_s1'/1]
    attributes [%% Line 45
		'on_load' =
		    %% Line 45
		    [{'on_load',0}],
		%% Line 47
		'type' =
		    %% Line 47
		    [{'probe_arg',{'type',47,'union',[{'type',47,'integer',[]}|[{'type',47,'iolist',[]}]]},[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'int_p_arg',{'type',48,'union',[{'type',48,'integer',[]}|[{'type',48,'iolist',[]}|[{'atom',48,'undef'}]]]},[]}],
		%% Line 49
		'type' =
		    %% Line 49
		    [{'n_probe_label',{'type',49,'range',[{'integer',49,0}|[{'integer',49,1023}]]},[]}],
		%% Line 56
		'type' =
		    %% Line 56
		    [{'integer_maybe',{'type',56,'union',[{'type',56,'integer',[]}|[{'type',56,'atom',[]}]]},[]}],
		%% Line 57
		'type' =
		    %% Line 57
		    [{'iolist_maybe',{'type',57,'union',[{'type',57,'iolist',[]}|[{'type',57,'atom',[]}]]},[]}],
		%% Line 98
		'spec' =
		    %% Line 98
		    [{{'available',0},[{'type',98,'fun',[{'type',98,'product',[]}|[{'type',98,'union',[{'atom',98,'true'}|[{'atom',98,'false'}]]}]]}]}],
		%% Line 103
		'spec' =
		    %% Line 103
		    [{{'user_trace_s1',1},[{'type',103,'fun',[{'type',103,'product',[{'type',103,'iolist',[]}]}|[{'type',103,'union',[{'atom',103,'true'}|[{'atom',103,'false'}|[{'atom',103,'error'}|[{'atom',103,'badarg'}]]]]}]]}]}],
		%% Line 108
		'spec' =
		    %% Line 108
		    [{{'user_trace_i4s4',9},[{'type',108,'fun',[{'type',108,'product',[{'type',108,'union',[{'type',108,'binary',[]}|[{'atom',108,'undefined'}]]}|[{'type',109,'integer_maybe',[]}|[{'type',109,'integer_maybe',[]}|[{'type',110,'integer_maybe',[]}|[{'type',110,'integer_maybe',[]}|[{'type',111,'iolist_maybe',[]}|[{'type',111,'iolist_maybe',[]}|[{'type',112,'iolist_maybe',[]}|[{'type',112,'iolist_maybe',[]}]]]]]]]]]}|[{'type',113,'union',[{'atom',113,'true'}|[{'atom',113,'false'}|[{'atom',113,'error'}|[{'atom',113,'badarg'}]]]]}]]}]}],
		%% Line 118
		'spec' =
		    %% Line 118
		    [{{'user_trace_n',10},[{'type',118,'fun',[{'type',118,'product',[{'type',118,'n_probe_label',[]}|[{'type',118,'union',[{'type',118,'binary',[]}|[{'atom',118,'undefined'}]]}|[{'type',119,'integer_maybe',[]}|[{'type',119,'integer_maybe',[]}|[{'type',120,'integer_maybe',[]}|[{'type',120,'integer_maybe',[]}|[{'type',121,'iolist_maybe',[]}|[{'type',121,'iolist_maybe',[]}|[{'type',122,'iolist_maybe',[]}|[{'type',122,'iolist_maybe',[]}]]]]]]]]]]}|[{'type',123,'union',[{'atom',123,'true'}|[{'atom',123,'false'}|[{'atom',123,'error'}|[{'atom',123,'badarg'}]]]]}]]}]}],
		%% Line 132
		'spec' =
		    %% Line 132
		    [{{'p',0},[{'type',132,'fun',[{'type',132,'product',[]}|[{'type',132,'union',[{'atom',132,'true'}|[{'atom',132,'false'}|[{'atom',132,'error'}|[{'atom',132,'badarg'}]]]]}]]}]}],
		%% Line 137
		'spec' =
		    %% Line 137
		    [{{'p',1},[{'type',137,'fun',[{'type',137,'product',[{'type',137,'probe_arg',[]}]}|[{'type',137,'union',[{'atom',137,'true'}|[{'atom',137,'false'}|[{'atom',137,'error'}|[{'atom',137,'badarg'}]]]]}]]}]}],
		%% Line 144
		'spec' =
		    %% Line 144
		    [{{'p',2},[{'type',144,'fun',[{'type',144,'product',[{'type',144,'probe_arg',[]}|[{'type',144,'probe_arg',[]}]]}|[{'type',144,'union',[{'atom',144,'true'}|[{'atom',144,'false'}|[{'atom',144,'error'}|[{'atom',144,'badarg'}]]]]}]]}]}],
		%% Line 153
		'spec' =
		    %% Line 153
		    [{{'p',3},[{'type',153,'fun',[{'type',153,'product',[{'type',153,'probe_arg',[]}|[{'type',153,'probe_arg',[]}|[{'type',153,'probe_arg',[]}]]]}|[{'type',153,'union',[{'atom',153,'true'}|[{'atom',153,'false'}|[{'atom',153,'error'}|[{'atom',153,'badarg'}]]]]}]]}]}],
		%% Line 164
		'spec' =
		    %% Line 164
		    [{{'p',4},[{'type',164,'fun',[{'type',164,'product',[{'type',164,'probe_arg',[]}|[{'type',164,'probe_arg',[]}|[{'type',164,'probe_arg',[]}|[{'type',164,'probe_arg',[]}]]]]}|[{'type',165,'union',[{'atom',165,'true'}|[{'atom',165,'false'}|[{'atom',165,'error'}|[{'atom',165,'badarg'}]]]]}]]}]}],
		%% Line 178
		'spec' =
		    %% Line 178
		    [{{'p',5},[{'type',178,'fun',[{'type',178,'product',[{'type',178,'probe_arg',[]}|[{'type',178,'probe_arg',[]}|[{'type',178,'probe_arg',[]}|[{'type',178,'probe_arg',[]}|[{'type',179,'probe_arg',[]}]]]]]}|[{'type',180,'union',[{'atom',180,'true'}|[{'atom',180,'false'}|[{'atom',180,'error'}|[{'atom',180,'badarg'}]]]]}]]}]}],
		%% Line 191
		'spec' =
		    %% Line 191
		    [{{'p',6},[{'type',191,'fun',[{'type',191,'product',[{'type',191,'probe_arg',[]}|[{'type',191,'probe_arg',[]}|[{'type',191,'probe_arg',[]}|[{'type',191,'probe_arg',[]}|[{'type',192,'probe_arg',[]}|[{'type',192,'probe_arg',[]}]]]]]]}|[{'type',193,'union',[{'atom',193,'true'}|[{'atom',193,'false'}|[{'atom',193,'error'}|[{'atom',193,'badarg'}]]]]}]]}]}],
		%% Line 202
		'spec' =
		    %% Line 202
		    [{{'p',7},[{'type',202,'fun',[{'type',202,'product',[{'type',202,'probe_arg',[]}|[{'type',202,'probe_arg',[]}|[{'type',202,'probe_arg',[]}|[{'type',202,'probe_arg',[]}|[{'type',203,'probe_arg',[]}|[{'type',203,'probe_arg',[]}|[{'type',203,'probe_arg',[]}]]]]]]]}|[{'type',204,'union',[{'atom',204,'true'}|[{'atom',204,'false'}|[{'atom',204,'error'}|[{'atom',204,'badarg'}]]]]}]]}]}],
		%% Line 211
		'spec' =
		    %% Line 211
		    [{{'p',8},[{'type',211,'fun',[{'type',211,'product',[{'type',211,'probe_arg',[]}|[{'type',211,'probe_arg',[]}|[{'type',211,'probe_arg',[]}|[{'type',211,'probe_arg',[]}|[{'type',212,'probe_arg',[]}|[{'type',212,'probe_arg',[]}|[{'type',212,'probe_arg',[]}|[{'type',212,'probe_arg',[]}]]]]]]]]}|[{'type',213,'union',[{'atom',213,'true'}|[{'atom',213,'false'}|[{'atom',213,'error'}|[{'atom',213,'badarg'}]]]]}]]}]}],
		%% Line 218
		'spec' =
		    %% Line 218
		    [{{'user_trace_int',8},[{'type',218,'fun',[{'type',218,'product',[{'type',218,'int_p_arg',[]}|[{'type',218,'int_p_arg',[]}|[{'type',218,'int_p_arg',[]}|[{'type',218,'int_p_arg',[]}|[{'type',219,'int_p_arg',[]}|[{'type',219,'int_p_arg',[]}|[{'type',219,'int_p_arg',[]}|[{'type',219,'int_p_arg',[]}]]]]]]]]}|[{'type',220,'union',[{'atom',220,'true'}|[{'atom',220,'false'}|[{'atom',220,'error'}|[{'atom',220,'badarg'}]]]]}]]}]}],
		%% Line 231
		'spec' =
		    %% Line 231
		    [{{'pn',1},[{'type',231,'fun',[{'type',231,'product',[{'type',231,'n_probe_label',[]}]}|[{'type',231,'union',[{'atom',231,'true'}|[{'atom',231,'false'}|[{'atom',231,'error'}|[{'atom',231,'badarg'}]]]]}]]}]}],
		%% Line 236
		'spec' =
		    %% Line 236
		    [{{'pn',2},[{'type',236,'fun',[{'type',236,'product',[{'type',236,'n_probe_label',[]}|[{'type',236,'probe_arg',[]}]]}|[{'type',236,'union',[{'atom',236,'true'}|[{'atom',236,'false'}|[{'atom',236,'error'}|[{'atom',236,'badarg'}]]]]}]]}]}],
		%% Line 243
		'spec' =
		    %% Line 243
		    [{{'pn',3},[{'type',243,'fun',[{'type',243,'product',[{'type',243,'n_probe_label',[]}|[{'type',243,'probe_arg',[]}|[{'type',243,'probe_arg',[]}]]]}|[{'type',243,'union',[{'atom',243,'true'}|[{'atom',243,'false'}|[{'atom',243,'error'}|[{'atom',243,'badarg'}]]]]}]]}]}],
		%% Line 252
		'spec' =
		    %% Line 252
		    [{{'pn',4},[{'type',252,'fun',[{'type',252,'product',[{'type',252,'n_probe_label',[]}|[{'type',252,'probe_arg',[]}|[{'type',252,'probe_arg',[]}|[{'type',252,'probe_arg',[]}]]]]}|[{'type',252,'union',[{'atom',252,'true'}|[{'atom',252,'false'}|[{'atom',252,'error'}|[{'atom',252,'badarg'}]]]]}]]}]}],
		%% Line 263
		'spec' =
		    %% Line 263
		    [{{'pn',5},[{'type',263,'fun',[{'type',263,'product',[{'type',263,'n_probe_label',[]}|[{'type',263,'probe_arg',[]}|[{'type',263,'probe_arg',[]}|[{'type',263,'probe_arg',[]}|[{'type',263,'probe_arg',[]}]]]]]}|[{'type',264,'union',[{'atom',264,'true'}|[{'atom',264,'false'}|[{'atom',264,'error'}|[{'atom',264,'badarg'}]]]]}]]}]}],
		%% Line 277
		'spec' =
		    %% Line 277
		    [{{'pn',6},[{'type',277,'fun',[{'type',277,'product',[{'type',277,'n_probe_label',[]}|[{'type',277,'probe_arg',[]}|[{'type',277,'probe_arg',[]}|[{'type',277,'probe_arg',[]}|[{'type',277,'probe_arg',[]}|[{'type',278,'probe_arg',[]}]]]]]]}|[{'type',279,'union',[{'atom',279,'true'}|[{'atom',279,'false'}|[{'atom',279,'error'}|[{'atom',279,'badarg'}]]]]}]]}]}],
		%% Line 290
		'spec' =
		    %% Line 290
		    [{{'pn',7},[{'type',290,'fun',[{'type',290,'product',[{'type',290,'n_probe_label',[]}|[{'type',290,'probe_arg',[]}|[{'type',290,'probe_arg',[]}|[{'type',290,'probe_arg',[]}|[{'type',290,'probe_arg',[]}|[{'type',291,'probe_arg',[]}|[{'type',291,'probe_arg',[]}]]]]]]]}|[{'type',292,'union',[{'atom',292,'true'}|[{'atom',292,'false'}|[{'atom',292,'error'}|[{'atom',292,'badarg'}]]]]}]]}]}],
		%% Line 301
		'spec' =
		    %% Line 301
		    [{{'pn',8},[{'type',301,'fun',[{'type',301,'product',[{'type',301,'n_probe_label',[]}|[{'type',301,'probe_arg',[]}|[{'type',301,'probe_arg',[]}|[{'type',301,'probe_arg',[]}|[{'type',301,'probe_arg',[]}|[{'type',302,'probe_arg',[]}|[{'type',302,'probe_arg',[]}|[{'type',302,'probe_arg',[]}]]]]]]]]}|[{'type',303,'union',[{'atom',303,'true'}|[{'atom',303,'false'}|[{'atom',303,'error'}|[{'atom',303,'badarg'}]]]]}]]}]}],
		%% Line 310
		'spec' =
		    %% Line 310
		    [{{'pn',9},[{'type',310,'fun',[{'type',310,'product',[{'type',310,'n_probe_label',[]}|[{'type',310,'probe_arg',[]}|[{'type',310,'probe_arg',[]}|[{'type',310,'probe_arg',[]}|[{'type',310,'probe_arg',[]}|[{'type',311,'probe_arg',[]}|[{'type',311,'probe_arg',[]}|[{'type',311,'probe_arg',[]}|[{'type',311,'probe_arg',[]}]]]]]]]]]}|[{'type',312,'union',[{'atom',312,'true'}|[{'atom',312,'false'}|[{'atom',312,'error'}|[{'atom',312,'badarg'}]]]]}]]}]}],
		%% Line 317
		'spec' =
		    %% Line 317
		    [{{'user_trace_n_int',9},[{'type',317,'fun',[{'type',317,'product',[{'type',317,'n_probe_label',[]}|[{'type',318,'int_p_arg',[]}|[{'type',318,'int_p_arg',[]}|[{'type',318,'int_p_arg',[]}|[{'type',318,'int_p_arg',[]}|[{'type',319,'int_p_arg',[]}|[{'type',319,'int_p_arg',[]}|[{'type',319,'int_p_arg',[]}|[{'type',319,'int_p_arg',[]}]]]]]]]]]}|[{'type',320,'union',[{'atom',320,'true'}|[{'atom',320,'false'}|[{'atom',320,'error'}|[{'atom',320,'badarg'}]]]]}]]}]}],
		%% Line 331
		'spec' =
		    %% Line 331
		    [{{'put_tag',1},[{'type',331,'fun',[{'type',331,'product',[{'type',331,'union',[{'atom',331,'undefined'}|[{'type',331,'iodata',[]}]]}]}|[{'type',331,'union',[{'type',331,'binary',[]}|[{'atom',331,'undefined'}]]}]]}]}],
		%% Line 335
		'spec' =
		    %% Line 335
		    [{{'get_tag',0},[{'type',335,'fun',[{'type',335,'product',[]}|[{'type',335,'union',[{'type',335,'binary',[]}|[{'atom',335,'undefined'}]]}]]}]}],
		%% Line 339
		'spec' =
		    %% Line 339
		    [{{'get_tag_data',0},[{'type',339,'fun',[{'type',339,'product',[]}|[{'type',339,'union',[{'type',339,'binary',[]}|[{'atom',339,'undefined'}]]}]]}]}],
		%% Line 344
		'spec' =
		    %% Line 344
		    [{{'spread_tag',1},[{'type',344,'fun',[{'type',344,'product',[{'type',344,'boolean',[]}]}|[{'type',344,'union',[{'atom',344,'true'}|[{'type',344,'tuple',[{'type',344,'non_neg_integer',[]}|[{'type',344,'union',[{'type',344,'binary',[]}|[{'type',344,'nil',[]}]]}]]}]]}]]}]}],
		%% Line 350
		'spec' =
		    %% Line 350
		    [{{'restore_tag',1},[{'type',350,'fun',[{'type',350,'product',[{'type',350,'union',[{'atom',350,'true'}|[{'type',350,'tuple',[{'type',350,'non_neg_integer',[]}|[{'type',350,'union',[{'type',350,'binary',[]}|[{'type',350,'nil',[]}]]}]]}]]}]}|[{'atom',350,'true'}]]}]}]]
'on_load'/0 =
    %% Line 59
    fun () ->
	let <PrivDir> =
	    %% Line 60
	    call 'code':'priv_dir'
		('runtime_tools')
	in  let <Lib> =
		%% Line 62
		call 'filename':'join'
		    ([PrivDir|[[108|[105|[98]]]|[[100|[121|[110|[116|[114|[97|[99|[101]]]]]]]]]]])
	    in  let <_cor11> =
		    %% Line 63
		    case call 'erlang':'load_nif'
			     (Lib, 0) of
		      %% Line 64
		      <'ok'> when 'true' ->
			  'ok'
		      %% Line 65
		      <Error1 = {'error',{'load_failed',_cor15}}> when 'true' ->
			  let <_cor3> =
			      %% Line 68
			      call 'erlang':'system_info'
				  ('system_architecture')
			  in  let <ArchLibDir> =
				  %% Line 67
				  call 'filename':'join'
				      ([PrivDir|[[108|[105|[98]]]|%% Line 68
								  [_cor3|[]]]])
			      in  let <_cor6> =
				      %% Line 70
				      call 'filename':'join'
					  ([ArchLibDir|[[100|[121|[110|[116|[114|[97|[99|[101|[42]]]]]]]]]]])
				  in  %% Line 71
				      case call 'filelib':'wildcard'
					       (_cor6) of
					%% Line 72
					<[]> when 'true' ->
					    Error1
					%% Line 73
					<_cor16> when 'true' ->
					    let <ArchLib> =
						%% Line 74
						call 'filename':'join'
						    ([ArchLibDir|[[100|[121|[110|[116|[114|[97|[99|[101]]]]]]]]]])
					    in  %% Line 75
						call 'erlang':'load_nif'
						    (ArchLib, 0)
				      end
		      %% Line 77
		      <Error1> when 'true' ->
			  Error1
		    end
		in  %% Line 79
		    case _cor11 of
		      %% Line 80
		      <'ok'> when 'true' ->
			  'ok'
		      %% Line 81
		      <{'error',{E,Str}}> when 'true' ->
			  %% Line 82
			  case call 'erlang':'system_info'
				   ('dynamic_trace') of
			    %% Line 83
			    <'none'> when 'true' ->
				%% Line 84
				'ok'
			    %% Line 85
			    <_cor17> when 'true' ->
				do  %% Line 86
				    call 'error_logger':'error_msg'
					([85|[110|[97|[98|[108|[101|[32|[116|[111|[32|[108|[111|[97|[100|[32|[100|[121|[110|[116|[114|[97|[99|[101|[32|[108|[105|[98|[114|[97|[114|[121|[46|[32|[70|[97|[105|[108|[101|[100|[32|[119|[105|[116|[104|[32|[101|[114|[114|[111|[114|[58|[126|[110|[10|[34|[126|[112|[44|[32|[126|[115|[34|[126|[110|[68|[121|[110|[97|[109|[105|[99|[32|[116|[114|[97|[99|[105|[110|[103|[32|[105|[115|[32|[101|[110|[97|[98|[108|[101|[100|[32|[98|[117|[116|[32|[116|[104|[101|[32|[100|[114|[105|[118|[101|[114|[32|[105|[115|[32|[110|[111|[116|[32|[98|[117|[105|[108|[116|[32|[99|[111|[114|[114|[101|[99|[116|[108|[121|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 88
																																																																																																	 [%% Line 89
																																																																																																	  E|%% Line 89
																																																																																																	    [Str|[]]])
				    _cor11
			  end
		      ( <_cor14> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor14})
			-| ['compiler_generated'] )
		    end
'available'/0 =
    %% Line 100
    fun () ->
	%% Line 101
	call 'erlang':'nif_error'
	    ('nif_not_loaded')
'user_trace_s1'/1 =
    %% Line 105
    fun (_cor0) ->
	%% Line 106
	call 'erlang':'nif_error'
	    ('nif_not_loaded')
'user_trace_i4s4'/9 =
    %% Line 115
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 116
	call 'erlang':'nif_error'
	    ('nif_not_loaded')
'user_trace_n'/10 =
    %% Line 125
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 126
	call 'erlang':'nif_error'
	    ('nif_not_loaded')
'p'/0 =
    %% Line 134
    fun () ->
	%% Line 135
	apply 'user_trace_int'/8
	    ('undef', 'undef', 'undef', 'undef', 'undef', 'undef', 'undef', 'undef')
'p'/1 =
    %% Line 139
    fun (_cor0) ->
	case _cor0 of
	  <I1>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 140
	      apply 'user_trace_int'/8
		  (I1, 'undef', 'undef', 'undef', 'undef', 'undef', 'undef', 'undef')
	  %% Line 141
	  <S1> when 'true' ->
	      %% Line 142
	      apply 'user_trace_int'/8
		  ('undef', 'undef', 'undef', 'undef', S1, 'undef', 'undef', 'undef')
	end
'p'/2 =
    %% Line 146
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I1,I2>
	      when let <_cor2> =
		    call 'erlang':'is_integer'
			(I1)
		in  let <_cor3> =
			call 'erlang':'is_integer'
			    (I2)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 147
	      apply 'user_trace_int'/8
		  (I1, I2, 'undef', 'undef', 'undef', 'undef', 'undef', 'undef')
	  %% Line 148
	  <I1,S1>
	      when call 'erlang':'is_integer'
		    (I1) ->
	      %% Line 149
	      apply 'user_trace_int'/8
		  (I1, 'undef', 'undef', 'undef', S1, 'undef', 'undef', 'undef')
	  %% Line 150
	  <S1,S2> when 'true' ->
	      %% Line 151
	      apply 'user_trace_int'/8
		  ('undef', 'undef', 'undef', 'undef', S1, S2, 'undef', 'undef')
	end
'p'/3 =
    %% Line 155
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I1,I2,I3>
	      when try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (I1)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(I2)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (I3)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 156
	      apply 'user_trace_int'/8
		  (I1, I2, I3, 'undef', 'undef', 'undef', 'undef', 'undef')
	  %% Line 157
	  <I1,I2,S1>
	      when let <_cor7> =
		    call 'erlang':'is_integer'
			(I1)
		in  let <_cor8> =
			call 'erlang':'is_integer'
			    (I2)
		    in  call 'erlang':'and'
			    (_cor7, _cor8) ->
	      %% Line 158
	      apply 'user_trace_int'/8
		  (I1, I2, 'undef', 'undef', S1, 'undef', 'undef', 'undef')
	  %% Line 159
	  <I1,S1,S2>
	      when call 'erlang':'is_integer'
		    (I1) ->
	      %% Line 160
	      apply 'user_trace_int'/8
		  (I1, 'undef', 'undef', 'undef', S1, S2, 'undef', 'undef')
	  %% Line 161
	  <S1,S2,S3> when 'true' ->
	      %% Line 162
	      apply 'user_trace_int'/8
		  ('undef', 'undef', 'undef', 'undef', S1, S2, S3, 'undef')
	end
'p'/4 =
    %% Line 167
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <I1,I2,I3,I4>
	      when try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (I1)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(I2)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (I3)
			    in  let <_cor7> =
				    call 'erlang':'is_integer'
					(I4)
				in  let <_cor8> =
					call 'erlang':'and'
					    (_cor6, _cor7)
				    in  let <_cor9> =
					    call 'erlang':'and'
						(_cor5, _cor8)
					in  call 'erlang':'and'
						(_cor4, _cor9)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 168
	      apply 'user_trace_int'/8
		  (I1, I2, I3, I4, 'undef', 'undef', 'undef', 'undef')
	  %% Line 169
	  <I1,I2,I3,S1>
	      when try
		    let <_cor10> =
			call 'erlang':'is_integer'
			    (I1)
		    in  let <_cor11> =
			    call 'erlang':'is_integer'
				(I2)
			in  let <_cor12> =
				call 'erlang':'is_integer'
				    (I3)
			    in  let <_cor13> =
				    call 'erlang':'and'
					(_cor11, _cor12)
				in  call 'erlang':'and'
					(_cor10, _cor13)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 170
	      apply 'user_trace_int'/8
		  (I1, I2, I3, 'undef', S1, 'undef', 'undef', 'undef')
	  %% Line 171
	  <I1,I2,S1,S2>
	      when let <_cor14> =
		    call 'erlang':'is_integer'
			(I1)
		in  let <_cor15> =
			call 'erlang':'is_integer'
			    (I2)
		    in  call 'erlang':'and'
			    (_cor14, _cor15) ->
	      %% Line 172
	      apply 'user_trace_int'/8
		  (I1, I2, 'undef', 'undef', S1, S2, 'undef', 'undef')
	  %% Line 173
	  <I1,S1,S2,S3>
	      when call 'erlang':'is_integer'
		    (I1) ->
	      %% Line 174
	      apply 'user_trace_int'/8
		  (I1, 'undef', 'undef', 'undef', S1, S2, S3, 'undef')
	  %% Line 175
	  <S1,S2,S3,S4> when 'true' ->
	      %% Line 176
	      apply 'user_trace_int'/8
		  ('undef', 'undef', 'undef', 'undef', S1, S2, S3, S4)
	end
'p'/5 =
    %% Line 182
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I1,I2,I3,I4,S1>
	      when try
		    let <_cor5> =
			call 'erlang':'is_integer'
			    (I1)
		    in  let <_cor6> =
			    call 'erlang':'is_integer'
				(I2)
			in  let <_cor7> =
				call 'erlang':'is_integer'
				    (I3)
			    in  let <_cor8> =
				    call 'erlang':'is_integer'
					(I4)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 183
	      apply 'user_trace_int'/8
		  (I1, I2, I3, I4, S1, 'undef', 'undef', 'undef')
	  %% Line 184
	  <I1,I2,I3,S1,S2>
	      when try
		    let <_cor11> =
			call 'erlang':'is_integer'
			    (I1)
		    in  let <_cor12> =
			    call 'erlang':'is_integer'
				(I2)
			in  let <_cor13> =
				call 'erlang':'is_integer'
				    (I3)
			    in  let <_cor14> =
				    call 'erlang':'and'
					(_cor12, _cor13)
				in  call 'erlang':'and'
					(_cor11, _cor14)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 185
	      apply 'user_trace_int'/8
		  (I1, I2, I3, 'undef', S1, S2, 'undef', 'undef')
	  %% Line 186
	  <I1,I2,S1,S2,S3>
	      when let <_cor15> =
		    call 'erlang':'is_integer'
			(I1)
		in  let <_cor16> =
			call 'erlang':'is_integer'
			    (I2)
		    in  call 'erlang':'and'
			    (_cor15, _cor16) ->
	      %% Line 187
	      apply 'user_trace_int'/8
		  (I1, I2, 'undef', 'undef', S1, S2, S3, 'undef')
	  %% Line 188
	  <I1,S1,S2,S3,S4>
	      when call 'erlang':'is_integer'
		    (I1) ->
	      %% Line 189
	      apply 'user_trace_int'/8
		  (I1, 'undef', 'undef', 'undef', S1, S2, S3, S4)
	  ( <_cor21,_cor20,_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19,_cor18,_cor17})
		  -| [{'function_name',{'p',5}}] )
	    -| ['compiler_generated'] )
	end
'p'/6 =
    %% Line 195
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I1,I2,I3,I4,S1,S2>
	      when try
		    let <_cor6> =
			call 'erlang':'is_integer'
			    (I1)
		    in  let <_cor7> =
			    call 'erlang':'is_integer'
				(I2)
			in  let <_cor8> =
				call 'erlang':'is_integer'
				    (I3)
			    in  let <_cor9> =
				    call 'erlang':'is_integer'
					(I4)
				in  let <_cor10> =
					call 'erlang':'and'
					    (_cor8, _cor9)
				    in  let <_cor11> =
					    call 'erlang':'and'
						(_cor7, _cor10)
					in  call 'erlang':'and'
						(_cor6, _cor11)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 196
	      apply 'user_trace_int'/8
		  (I1, I2, I3, I4, S1, S2, 'undef', 'undef')
	  %% Line 197
	  <I1,I2,I3,S1,S2,S3>
	      when try
		    let <_cor12> =
			call 'erlang':'is_integer'
			    (I1)
		    in  let <_cor13> =
			    call 'erlang':'is_integer'
				(I2)
			in  let <_cor14> =
				call 'erlang':'is_integer'
				    (I3)
			    in  let <_cor15> =
				    call 'erlang':'and'
					(_cor13, _cor14)
				in  call 'erlang':'and'
					(_cor12, _cor15)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 198
	      apply 'user_trace_int'/8
		  (I1, I2, I3, 'undef', S1, S2, S3, 'undef')
	  %% Line 199
	  <I1,I2,S1,S2,S3,S4>
	      when let <_cor16> =
		    call 'erlang':'is_integer'
			(I1)
		in  let <_cor17> =
			call 'erlang':'is_integer'
			    (I2)
		    in  call 'erlang':'and'
			    (_cor16, _cor17) ->
	      %% Line 200
	      apply 'user_trace_int'/8
		  (I1, I2, 'undef', 'undef', S1, S2, S3, S4)
	  ( <_cor23,_cor22,_cor21,_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21,_cor20,_cor19,_cor18})
		  -| [{'function_name',{'p',6}}] )
	    -| ['compiler_generated'] )
	end
'p'/7 =
    %% Line 206
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I1,I2,I3,I4,S1,S2,S3>
	      when try
		    let <_cor7> =
			call 'erlang':'is_integer'
			    (I1)
		    in  let <_cor8> =
			    call 'erlang':'is_integer'
				(I2)
			in  let <_cor9> =
				call 'erlang':'is_integer'
				    (I3)
			    in  let <_cor10> =
				    call 'erlang':'is_integer'
					(I4)
				in  let <_cor11> =
					call 'erlang':'and'
					    (_cor9, _cor10)
				    in  let <_cor12> =
					    call 'erlang':'and'
						(_cor8, _cor11)
					in  call 'erlang':'and'
						(_cor7, _cor12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 207
	      apply 'user_trace_int'/8
		  (I1, I2, I3, I4, S1, S2, S3, 'undef')
	  %% Line 208
	  <I1,I2,I3,S1,S2,S3,S4>
	      when try
		    let <_cor13> =
			call 'erlang':'is_integer'
			    (I1)
		    in  let <_cor14> =
			    call 'erlang':'is_integer'
				(I2)
			in  let <_cor15> =
				call 'erlang':'is_integer'
				    (I3)
			    in  let <_cor16> =
				    call 'erlang':'and'
					(_cor14, _cor15)
				in  call 'erlang':'and'
					(_cor13, _cor16)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 209
	      apply 'user_trace_int'/8
		  (I1, I2, I3, 'undef', S1, S2, S3, S4)
	  ( <_cor23,_cor22,_cor21,_cor20,_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21,_cor20,_cor19,_cor18,_cor17})
		  -| [{'function_name',{'p',7}}] )
	    -| ['compiler_generated'] )
	end
'p'/8 =
    %% Line 215
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I1,I2,I3,I4,S1,S2,S3,S4>
	      when try
		    let <_cor8> =
			call 'erlang':'is_integer'
			    (I1)
		    in  let <_cor9> =
			    call 'erlang':'is_integer'
				(I2)
			in  let <_cor10> =
				call 'erlang':'is_integer'
				    (I3)
			    in  let <_cor11> =
				    call 'erlang':'is_integer'
					(I4)
				in  let <_cor12> =
					call 'erlang':'and'
					    (_cor10, _cor11)
				    in  let <_cor13> =
					    call 'erlang':'and'
						(_cor9, _cor12)
					in  call 'erlang':'and'
						(_cor8, _cor13)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 216
	      apply 'user_trace_int'/8
		  (I1, I2, I3, I4, S1, S2, S3, S4)
	  ( <_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'p',8}}] )
	    -| ['compiler_generated'] )
	end
'user_trace_int'/8 =
    %% Line 222
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <UTag> =
	    %% Line 223
	    apply 'get_tag'/0
		()
	in  %% Line 224
	    try
		%% Line 225
		apply 'user_trace_i4s4'/9
		    (UTag, _cor7, _cor6, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
	    of <_cor9> ->
		_cor9
	    catch <_cor12,_cor11,_cor10> ->
		case <_cor12,_cor11,_cor10> of
		  %% Line 227
		  <'error','nif_not_loaded',_cor21> when 'true' ->
		      %% Line 228
		      'false'
		  ( <_cor12,_cor11,_cor10> when 'true' ->
			primop 'raise'
			    (_cor10, _cor11)
		    -| ['compiler_generated'] )
		end
'pn'/1 =
    %% Line 233
    fun (_cor0) ->
	%% Line 234
	apply 'user_trace_n_int'/9
	    (_cor0, 'undef', 'undef', 'undef', 'undef', 'undef', 'undef', 'undef', 'undef')
'pn'/2 =
    %% Line 238
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <ProbeLabel,I1>
	      when call 'erlang':'is_integer'
		    (I1) ->
	      %% Line 239
	      apply 'user_trace_n_int'/9
		  (ProbeLabel, I1, 'undef', 'undef', 'undef', 'undef', 'undef', 'undef', 'undef')
	  %% Line 240
	  <ProbeLabel,S1> when 'true' ->
	      %% Line 241
	      apply 'user_trace_n_int'/9
		  (ProbeLabel, 'undef', 'undef', 'undef', 'undef', S1, 'undef', 'undef', 'undef')
	end
'pn'/3 =
    %% Line 245
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <ProbeLabel,I1,I2>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(I1)
		in  let <_cor4> =
			call 'erlang':'is_integer'
			    (I2)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 246
	      apply 'user_trace_n_int'/9
		  (ProbeLabel, I1, I2, 'undef', 'undef', 'undef', 'undef', 'undef', 'undef')
	  %% Line 247
	  <ProbeLabel,I1,S1>
	      when call 'erlang':'is_integer'
		    (I1) ->
	      %% Line 248
	      apply 'user_trace_n_int'/9
		  (ProbeLabel, I1, 'undef', 'undef', 'undef', S1, 'undef', 'undef', 'undef')
	  %% Line 249
	  <ProbeLabel,S1,S2> when 'true' ->
	      %% Line 250
	      apply 'user_trace_n_int'/9
		  (ProbeLabel, 'undef', 'undef', 'undef', 'undef', S1, S2, 'undef', 'undef')
	end
'pn'/4 =
    %% Line 254
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <ProbeLabel,I1,I2,I3>
	      when try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (I1)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(I2)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (I3)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 255
	      apply 'user_trace_n_int'/9
		  (ProbeLabel, I1, I2, I3, 'undef', 'undef', 'undef', 'undef', 'undef')
	  %% Line 256
	  <ProbeLabel,I1,I2,S1>
	      when let <_cor8> =
		    call 'erlang':'is_integer'
			(I1)
		in  let <_cor9> =
			call 'erlang':'is_integer'
			    (I2)
		    in  call 'erlang':'and'
			    (_cor8, _cor9) ->
	      %% Line 257
	      apply 'user_trace_n_int'/9
		  (ProbeLabel, I1, I2, 'undef', 'undef', S1, 'undef', 'undef', 'undef')
	  %% Line 258
	  <ProbeLabel,I1,S1,S2>
	      when call 'erlang':'is_integer'
		    (I1) ->
	      %% Line 259
	      apply 'user_trace_n_int'/9
		  (ProbeLabel, I1, 'undef', 'undef', 'undef', S1, S2, 'undef', 'undef')
	  %% Line 260
	  <ProbeLabel,S1,S2,S3> when 'true' ->
	      %% Line 261
	      apply 'user_trace_n_int'/9
		  (ProbeLabel, 'undef', 'undef', 'undef', 'undef', S1, S2, S3, 'undef')
	end
'pn'/5 =
    %% Line 266
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <ProbeLabel,I1,I2,I3,I4>
	      when try
		    let <_cor5> =
			call 'erlang':'is_integer'
			    (I1)
		    in  let <_cor6> =
			    call 'erlang':'is_integer'
				(I2)
			in  let <_cor7> =
				call 'erlang':'is_integer'
				    (I3)
			    in  let <_cor8> =
				    call 'erlang':'is_integer'
					(I4)
				in  let <_cor9> =
					call 'erlang':'and'
					    (_cor7, _cor8)
				    in  let <_cor10> =
					    call 'erlang':'and'
						(_cor6, _cor9)
					in  call 'erlang':'and'
						(_cor5, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 267
	      apply 'user_trace_n_int'/9
		  (ProbeLabel, I1, I2, I3, I4, 'undef', 'undef', 'undef', 'undef')
	  %% Line 268
	  <ProbeLabel,I1,I2,I3,S1>
	      when try
		    let <_cor11> =
			call 'erlang':'is_integer'
			    (I1)
		    in  let <_cor12> =
			    call 'erlang':'is_integer'
				(I2)
			in  let <_cor13> =
				call 'erlang':'is_integer'
				    (I3)
			    in  let <_cor14> =
				    call 'erlang':'and'
					(_cor12, _cor13)
				in  call 'erlang':'and'
					(_cor11, _cor14)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 269
	      apply 'user_trace_n_int'/9
		  (ProbeLabel, I1, I2, I3, 'undef', S1, 'undef', 'undef', 'undef')
	  %% Line 270
	  <ProbeLabel,I1,I2,S1,S2>
	      when let <_cor15> =
		    call 'erlang':'is_integer'
			(I1)
		in  let <_cor16> =
			call 'erlang':'is_integer'
			    (I2)
		    in  call 'erlang':'and'
			    (_cor15, _cor16) ->
	      %% Line 271
	      apply 'user_trace_n_int'/9
		  (ProbeLabel, I1, I2, 'undef', 'undef', S1, S2, 'undef', 'undef')
	  %% Line 272
	  <ProbeLabel,I1,S1,S2,S3>
	      when call 'erlang':'is_integer'
		    (I1) ->
	      %% Line 273
	      apply 'user_trace_n_int'/9
		  (ProbeLabel, I1, 'undef', 'undef', 'undef', S1, S2, S3, 'undef')
	  %% Line 274
	  <ProbeLabel,S1,S2,S3,S4> when 'true' ->
	      %% Line 275
	      apply 'user_trace_n_int'/9
		  (ProbeLabel, 'undef', 'undef', 'undef', 'undef', S1, S2, S3, S4)
	end
'pn'/6 =
    %% Line 281
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <ProbeLabel,I1,I2,I3,I4,S1>
	      when try
		    let <_cor6> =
			call 'erlang':'is_integer'
			    (I1)
		    in  let <_cor7> =
			    call 'erlang':'is_integer'
				(I2)
			in  let <_cor8> =
				call 'erlang':'is_integer'
				    (I3)
			    in  let <_cor9> =
				    call 'erlang':'is_integer'
					(I4)
				in  let <_cor10> =
					call 'erlang':'and'
					    (_cor8, _cor9)
				    in  let <_cor11> =
					    call 'erlang':'and'
						(_cor7, _cor10)
					in  call 'erlang':'and'
						(_cor6, _cor11)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 282
	      apply 'user_trace_n_int'/9
		  (ProbeLabel, I1, I2, I3, I4, S1, 'undef', 'undef', 'undef')
	  %% Line 283
	  <ProbeLabel,I1,I2,I3,S1,S2>
	      when try
		    let <_cor12> =
			call 'erlang':'is_integer'
			    (I1)
		    in  let <_cor13> =
			    call 'erlang':'is_integer'
				(I2)
			in  let <_cor14> =
				call 'erlang':'is_integer'
				    (I3)
			    in  let <_cor15> =
				    call 'erlang':'and'
					(_cor13, _cor14)
				in  call 'erlang':'and'
					(_cor12, _cor15)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 284
	      apply 'user_trace_n_int'/9
		  (ProbeLabel, I1, I2, I3, 'undef', S1, S2, 'undef', 'undef')
	  %% Line 285
	  <ProbeLabel,I1,I2,S1,S2,S3>
	      when let <_cor16> =
		    call 'erlang':'is_integer'
			(I1)
		in  let <_cor17> =
			call 'erlang':'is_integer'
			    (I2)
		    in  call 'erlang':'and'
			    (_cor16, _cor17) ->
	      %% Line 286
	      apply 'user_trace_n_int'/9
		  (ProbeLabel, I1, I2, 'undef', 'undef', S1, S2, S3, 'undef')
	  %% Line 287
	  <ProbeLabel,I1,S1,S2,S3,S4>
	      when call 'erlang':'is_integer'
		    (I1) ->
	      %% Line 288
	      apply 'user_trace_n_int'/9
		  (ProbeLabel, I1, 'undef', 'undef', 'undef', S1, S2, S3, S4)
	  ( <_cor23,_cor22,_cor21,_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21,_cor20,_cor19,_cor18})
		  -| [{'function_name',{'pn',6}}] )
	    -| ['compiler_generated'] )
	end
'pn'/7 =
    %% Line 294
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <ProbeLabel,I1,I2,I3,I4,S1,S2>
	      when try
		    let <_cor7> =
			call 'erlang':'is_integer'
			    (I1)
		    in  let <_cor8> =
			    call 'erlang':'is_integer'
				(I2)
			in  let <_cor9> =
				call 'erlang':'is_integer'
				    (I3)
			    in  let <_cor10> =
				    call 'erlang':'is_integer'
					(I4)
				in  let <_cor11> =
					call 'erlang':'and'
					    (_cor9, _cor10)
				    in  let <_cor12> =
					    call 'erlang':'and'
						(_cor8, _cor11)
					in  call 'erlang':'and'
						(_cor7, _cor12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 295
	      apply 'user_trace_n_int'/9
		  (ProbeLabel, I1, I2, I3, I4, S1, S2, 'undef', 'undef')
	  %% Line 296
	  <ProbeLabel,I1,I2,I3,S1,S2,S3>
	      when try
		    let <_cor13> =
			call 'erlang':'is_integer'
			    (I1)
		    in  let <_cor14> =
			    call 'erlang':'is_integer'
				(I2)
			in  let <_cor15> =
				call 'erlang':'is_integer'
				    (I3)
			    in  let <_cor16> =
				    call 'erlang':'and'
					(_cor14, _cor15)
				in  call 'erlang':'and'
					(_cor13, _cor16)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 297
	      apply 'user_trace_n_int'/9
		  (ProbeLabel, I1, I2, I3, 'undef', S1, S2, S3, 'undef')
	  %% Line 298
	  <ProbeLabel,I1,I2,S1,S2,S3,S4>
	      when let <_cor17> =
		    call 'erlang':'is_integer'
			(I1)
		in  let <_cor18> =
			call 'erlang':'is_integer'
			    (I2)
		    in  call 'erlang':'and'
			    (_cor17, _cor18) ->
	      %% Line 299
	      apply 'user_trace_n_int'/9
		  (ProbeLabel, I1, I2, 'undef', 'undef', S1, S2, S3, S4)
	  ( <_cor25,_cor24,_cor23,_cor22,_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23,_cor22,_cor21,_cor20,_cor19})
		  -| [{'function_name',{'pn',7}}] )
	    -| ['compiler_generated'] )
	end
'pn'/8 =
    %% Line 305
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <ProbeLabel,I1,I2,I3,I4,S1,S2,S3>
	      when try
		    let <_cor8> =
			call 'erlang':'is_integer'
			    (I1)
		    in  let <_cor9> =
			    call 'erlang':'is_integer'
				(I2)
			in  let <_cor10> =
				call 'erlang':'is_integer'
				    (I3)
			    in  let <_cor11> =
				    call 'erlang':'is_integer'
					(I4)
				in  let <_cor12> =
					call 'erlang':'and'
					    (_cor10, _cor11)
				    in  let <_cor13> =
					    call 'erlang':'and'
						(_cor9, _cor12)
					in  call 'erlang':'and'
						(_cor8, _cor13)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 306
	      apply 'user_trace_n_int'/9
		  (ProbeLabel, I1, I2, I3, I4, S1, S2, S3, 'undef')
	  %% Line 307
	  <ProbeLabel,I1,I2,I3,S1,S2,S3,S4>
	      when try
		    let <_cor14> =
			call 'erlang':'is_integer'
			    (I1)
		    in  let <_cor15> =
			    call 'erlang':'is_integer'
				(I2)
			in  let <_cor16> =
				call 'erlang':'is_integer'
				    (I3)
			    in  let <_cor17> =
				    call 'erlang':'and'
					(_cor15, _cor16)
				in  call 'erlang':'and'
					(_cor14, _cor17)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 308
	      apply 'user_trace_n_int'/9
		  (ProbeLabel, I1, I2, I3, 'undef', S1, S2, S3, S4)
	  ( <_cor25,_cor24,_cor23,_cor22,_cor21,_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23,_cor22,_cor21,_cor20,_cor19,_cor18})
		  -| [{'function_name',{'pn',8}}] )
	    -| ['compiler_generated'] )
	end
'pn'/9 =
    %% Line 314
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <ProbeLabel,I1,I2,I3,I4,S1,S2,S3,S4>
	      when try
		    let <_cor9> =
			call 'erlang':'is_integer'
			    (I1)
		    in  let <_cor10> =
			    call 'erlang':'is_integer'
				(I2)
			in  let <_cor11> =
				call 'erlang':'is_integer'
				    (I3)
			    in  let <_cor12> =
				    call 'erlang':'is_integer'
					(I4)
				in  let <_cor13> =
					call 'erlang':'and'
					    (_cor11, _cor12)
				    in  let <_cor14> =
					    call 'erlang':'and'
						(_cor10, _cor13)
					in  call 'erlang':'and'
						(_cor9, _cor14)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 315
	      apply 'user_trace_n_int'/9
		  (ProbeLabel, I1, I2, I3, I4, S1, S2, S3, S4)
	  ( <_cor23,_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'pn',9}}] )
	    -| ['compiler_generated'] )
	end
'user_trace_n_int'/9 =
    %% Line 322
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <UTag> =
	    %% Line 323
	    apply 'get_tag'/0
		()
	in  %% Line 324
	    try
		%% Line 325
		apply 'user_trace_n'/10
		    (_cor8, UTag, _cor7, _cor6, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
	    of <_cor10> ->
		_cor10
	    catch <_cor13,_cor12,_cor11> ->
		case <_cor13,_cor12,_cor11> of
		  %% Line 327
		  <'error','nif_not_loaded',_cor23> when 'true' ->
		      %% Line 328
		      'false'
		  ( <_cor13,_cor12,_cor11> when 'true' ->
			primop 'raise'
			    (_cor11, _cor12)
		    -| ['compiler_generated'] )
		end
'put_tag'/1 =
    %% Line 332
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 333
	    call 'unicode':'characters_to_binary'
		(_cor0)
	in  %% Line 333
	    call 'erlang':'dt_put_tag'
		(_cor1)
'get_tag'/0 =
    %% Line 336
    fun () ->
	%% Line 337
	call 'erlang':'dt_get_tag'
	    ()
'get_tag_data'/0 =
    %% Line 341
    fun () ->
	%% Line 342
	call 'erlang':'dt_get_tag_data'
	    ()
'spread_tag'/1 =
    %% Line 347
    fun (_cor0) ->
	%% Line 348
	call 'erlang':'dt_spread_tag'
	    (_cor0)
'restore_tag'/1 =
    %% Line 351
    fun (_cor0) ->
	%% Line 352
	call 'erlang':'dt_restore_tag'
	    (_cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('dyntrace')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('dyntrace', _cor0)
end