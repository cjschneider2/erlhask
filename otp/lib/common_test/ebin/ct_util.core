module 'ct_util' ['close_connections'/0,
		  'create_table'/3,
		  'delete_overridden_silenced_connections'/0,
		  'delete_suite_data'/0,
		  'delete_suite_data'/1,
		  'delete_testdata'/0,
		  'delete_testdata'/1,
		  'does_connection_exist'/3,
		  'get_attached'/1,
		  'get_connection'/2,
		  'get_connections'/1,
		  'get_key_from_name'/1,
		  'get_mode'/0,
		  'get_overridden_silenced_connections'/0,
		  'get_profile_data'/0,
		  'get_profile_data'/1,
		  'get_profile_data'/2,
		  'get_start_dir'/0,
		  'get_target_name'/1,
		  'get_testdata'/1,
		  'get_testdata'/2,
		  'get_testdir'/2,
		  'get_verbosity'/1,
		  'is_silenced'/1,
		  'is_silenced'/2,
		  'is_test_dir'/1,
		  'kill_attached'/2,
		  'listenv'/1,
		  'match_delete_suite_data'/1,
		  'match_delete_testdata'/1,
		  'module_info'/0,
		  'module_info'/1,
		  'open_url'/3,
		  'override_silence_all_connections'/0,
		  'override_silence_connections'/1,
		  'parse_table'/1,
		  'read_opts'/0,
		  'read_suite_data'/1,
		  'register_connection'/4,
		  'reset_cwd'/0,
		  'reset_silent_connections'/0,
		  'save_suite_data'/2,
		  'save_suite_data'/3,
		  'save_suite_data_async'/2,
		  'save_suite_data_async'/3,
		  'set_cwd'/1,
		  'set_testdata'/1,
		  'set_testdata_async'/1,
		  'set_verbosity'/1,
		  'silence_all_connections'/0,
		  'silence_connections'/1,
		  'start'/0,
		  'start'/1,
		  'start'/2,
		  'start'/3,
		  'stop'/1,
		  'unregister_connection'/1,
		  'update_last_run_index'/0,
		  'update_testdata'/2,
		  'update_testdata'/3,
		  'warn_duplicates'/1]
    attributes []
'start'/0 =
    %% Line 80
    fun () ->
	%% Line 81
	apply 'start'/3
	    ('normal', [46], [{'default',100}|[{'$unspecified',100}]])
'start'/1 =
    %% Line 96
    fun (_cor0) ->
	case _cor0 of
	  <LogDir>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 97
	      apply 'start'/3
		  ('normal', LogDir, [{'default',100}|[{'$unspecified',100}]])
	  %% Line 98
	  <Mode> when 'true' ->
	      %% Line 99
	      apply 'start'/3
		  (Mode, [46], [{'default',100}|[{'$unspecified',100}]])
	end
'start'/2 =
    %% Line 101
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <LogDir,Verbosity>
	      when call 'erlang':'is_list'
		    (LogDir) ->
	      %% Line 102
	      apply 'start'/3
		  ('normal', LogDir, Verbosity)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'start',2}}] )
	    -| ['compiler_generated'] )
	end
'start'/3 =
    %% Line 104
    fun (_cor2,_cor1,_cor0) ->
	%% Line 105
	case call 'erlang':'whereis'
		 ('ct_util_server') of
	  %% Line 106
	  <'undefined'> when 'true' ->
	      let <S> =
		  %% Line 107
		  call 'erlang':'self'
		      ()
	      in  let <_cor4> =
		      %% Line 108
		      ( fun () ->
			    apply 'do_start'/4
				(S, _cor2, _cor1, _cor0)
			-| [{'id',{0,0,'-start/3-fun-0-'}}] )
		  in  let <Pid> =
			  %% Line 108
			  call 'erlang':'spawn_link'
			      (_cor4)
		      in  %% Line 109
			  receive
			    %% Line 110
			    <{_cor11,'started'}>
				when call 'erlang':'=:='
				      (_cor11,
				       Pid) ->
				Pid
			    %% Line 111
			    <{_cor12,Error}>
				when call 'erlang':'=:='
				      (_cor12,
				       Pid) ->
				call 'erlang':'exit'
				    (Error)
			    %% Line 112
			    <{_X_Ref,{_cor13,Error}}>
				when call 'erlang':'=:='
				      (_cor13,
				       Pid) ->
				call 'erlang':'exit'
				    (Error)
			  after 'infinity' ->
			    'true'
	  %% Line 114
	  <Pid> when 'true' ->
	      %% Line 115
	      case apply 'get_mode'/0
		       () of
		%% Line 116
		<'interactive'>
		    when call 'erlang':'=:='
			  (_cor2,
			   'interactive') ->
		    %% Line 117
		    Pid
		%% Line 118
		<'interactive'> when 'true' ->
		    %% Line 119
		    {'error','interactive_mode'}
		%% Line 120
		<_X_OtherMode> when 'true' ->
		    %% Line 121
		    Pid
	      end
	end
'do_start'/4 =
    %% Line 125
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 126
	    call 'erlang':'process_flag'
		('trap_exit', 'true')
	    let <_cor4> =
		%% Line 127
		call 'erlang':'self'
		    ()
	    in  do  %% Line 127
		    call 'erlang':'register'
			('ct_util_server', _cor4)
		    do  %% Line 128
			apply 'create_table'/2
			    ('ct_connections', 2)
			do  %% Line 129
			    apply 'create_table'/2
				('ct_boards', 2)
			    do  %% Line 130
				apply 'create_table'/2
				    ('ct_suite_data', 2)
				do  %% Line 132
				    apply 'create_table'/2
					('ct_verbosity_table', 1)
				    do  %% Line 133
					( letrec
					      'lc$^0'/1 =
						  fun (_cor7) ->
						      case _cor7 of
							<[{Cat,Lvl}|_cor6]> when 'true' ->
							    do  call 'ets':'insert'
								    ('ct_verbosity_table', {Cat,Lvl})
								apply 'lc$^0'/1
								    (_cor6)
							( <[_cor5|_cor6]> when 'true' ->
							      apply 'lc$^0'/1
								  (_cor6)
							  -| ['compiler_generated'] )
							<[]> when 'true' ->
							    []
							( <_cor7> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_cor7})
								-| [{'function_name',{'lc$^0',1}}] )
							  -| ['compiler_generated'] )
						      end
					  in  apply 'lc$^0'/1
						  (_cor0)
					  -| ['list_comprehension'] )
					%% Line 135
					case call 'file':'get_cwd'
						 () of
					  <{'ok',StartDir}> when 'true' ->
					      do  %% Line 136
						  case call 'file':'set_cwd'
							   (_cor1) of
						    %% Line 137
						    <'ok'> when 'true' ->
							'ok'
						    %% Line 138
						    <E> when 'true' ->
							call 'erlang':'exit'
							    (E)
						  end
						  let <DoExit> =
						      %% Line 140
						      ( fun (_cor12) ->
							    do  call 'file':'set_cwd'
								    (StartDir)
								call 'erlang':'exit'
								    (_cor12)
							-| [{'id',{0,0,'-do_start/4-fun-0-'}}] )
						  in  let <_cor17> =
							  %% Line 141
							  case apply 'read_opts'/0
								   () of
							    %% Line 142
							    <{'ok',Opts1}> when 'true' ->
								%% Line 143
								Opts1
							    %% Line 144
							    <Error> when 'true' ->
								let <_cor15> =
								    %% Line 145
								    call 'erlang':'self'
									()
								in  do  %% Line 145
									call 'erlang':'!'
									    (_cor3, {_cor15,Error})
									%% Line 146
									apply DoExit
									    (Error)
							  end
						      in  do  %% Line 150
							      case call 'ct_event':'start_link'
								       () of
								%% Line 151
								<{'error',{'already_started',_cor60}}> when 'true' ->
								    'ok'
								%% Line 153
								<_cor61> when 'true' ->
								    %% Line 154
								    case call 'erlang':'whereis'
									     ('vts') of
								      %% Line 155
								      <'undefined'> when 'true' ->
									  %% Line 156
									  call 'ct_event':'add_handler'
									      ()
								      %% Line 157
								      <VtsPid> when 'true' ->
									  %% Line 158
									  call 'ct_event':'add_handler'
									      ([{'vts',VtsPid}|[]])
								    end
							      end
							      do  %% Line 163
								  try
								      call 'ct_config':'start'
									  (_cor2)
								  of <_cor21> ->
								      %% Line 164
								      'ok'
								  catch <_cor25,_cor24,_cor23> ->
								      %% Line 167
								      apply DoExit
									  (_cor24)
								  do  %% Line 171
								      case call 'lists':'keysearch'
									       ('event_handler', 1, _cor17) of
									%% Line 172
									<{'value',{_cor64,Handlers}}> when 'true' ->
									    let <Add> =
										%% Line 173
										( fun (_cor28) ->
										      case _cor28 of
											<{H,Args}> when 'true' ->
											    let <_cor26> =
												catch
												    %% Line 174
												    call 'gen_event':'add_handler'
													('ct_event', H, Args)
											    in  %% Line 174
												case _cor26 of
												  %% Line 175
												  <'ok'> when 'true' ->
												      'ok'
												  %% Line 176
												  <{'EXIT',Why}> when 'true' ->
												      apply DoExit
													  (Why)
												  %% Line 177
												  <Other> when 'true' ->
												      apply DoExit
													  ({'event_handler',Other})
												end
											( <_cor29> when 'true' ->
											      ( primop 'match_fail'
												    ({'function_clause',_cor29})
												-| [{'function_name',{'-do_start/4-fun-1-',1}}] )
											  -| ['compiler_generated'] )
										      end
										  -| [{'id',{0,0,'-do_start/4-fun-1-'}}] )
									    in  let <_cor31> =
										    catch
											%% Line 180
											call 'lists':'foreach'
											    (Add, Handlers)
										in  %% Line 180
										    case _cor31 of
										      %% Line 181
										      <{'EXIT',Reason}> when 'true' ->
											  let <_cor32> =
											      %% Line 182
											      call 'erlang':'self'
												  ()
											  in  %% Line 182
											      call 'erlang':'!'
												  (_cor3, {_cor32,Reason})
										      %% Line 183
										      <_cor65> when 'true' ->
											  'ok'
										    end
									%% Line 186
									<'false'> when 'true' ->
									    'ok'
									( <_cor34> when 'true' ->
									      primop 'match_fail'
										  ({'case_clause',_cor34})
									  -| ['compiler_generated'] )
								      end
								      %% Line 190
								      case call 'ct_logs':'init'
									       (_cor2, _cor0) of
									<{StartTime,TestLogDir}> when 'true' ->
									    let <_cor37> =
										%% Line 193
										call 'erlang':'node'
										    ()
									    in  let <_cor36> =
										    %% Line 195
										    call 'lists':'flatten'
											(TestLogDir)
										in  do  %% Line 192
											call 'ct_event':'notify'
											    ({'event','test_start',_cor37,%% Line 194
															  {StartTime,_cor36}})
											do  %% Line 197
											    try
												call 'ct_hooks':'init'
												    (_cor17)
											    of <_cor38> ->
												case _cor38 of
												  %% Line 198
												  <'ok'> when 'true' ->
												      let <_cor39> =
													  %% Line 199
													  call 'erlang':'self'
													      ()
												      in  %% Line 199
													  call 'erlang':'!'
													      (_cor3, {_cor39,'started'})
												  %% Line 200
												  <{'fail',CTHReason}> when 'true' ->
												      let <_cor41> =
													  %% Line 201
													  case <> of
													    <>
														when call 'erlang':'is_atom'
														      (CTHReason) ->
														let <_cor40> =
														    %% Line 204
														    call 'erlang':'get_stacktrace'
															()
														in  %% Line 202
														    call 'io_lib':'format'
															([123|[126|[112|[44|[126|[112|[125]]]]]]], %% Line 203
																				   [CTHReason|%% Line 204
																					      [_cor40|[]]])
													    %% Line 205
													    <> when 'true' ->
														%% Line 206
														CTHReason
													  end
												      in  do  %% Line 208
													      call 'ct_logs':'tc_print'
														  ('Suite Callback', _cor41, [])
													      let <_cor45> =
														  %% Line 209
														  call 'erlang':'self'
														      ()
													      in  let <_cor44> =
														      %% Line 209
														      call 'erlang':'self'
															  ()
														  in  let <_cor43> =
															  %% Line 210
															  call 'erlang':'make_ref'
															      ()
														      in  %% Line 209
															  call 'erlang':'!'
															      (_cor45, {{'stop',{_cor44,{'user_error',CTHReason}}},%% Line 210
																						   {_cor3,_cor43}})
												  ( <_cor46> when 'true' ->
													primop 'match_fail'
													    ({'try_clause',_cor46})
												    -| ['compiler_generated'] )
												end
											    catch <_cor49,_cor48,_cor47> ->
												let <_cor51> =
												    %% Line 213
												    case <> of
												      <>
													  when call 'erlang':'is_atom'
														(_cor48) ->
													  let <_cor50> =
													      %% Line 216
													      call 'erlang':'get_stacktrace'
														  ()
													  in  %% Line 214
													      call 'io_lib':'format'
														  ([123|[126|[112|[44|[126|[112|[125]]]]]]], %% Line 215
																			     [_cor48|%% Line 216
																				     [_cor50|[]]])
												      %% Line 217
												      <> when 'true' ->
													  _cor48
												    end
												in  do  %% Line 220
													call 'ct_logs':'tc_print'
													    ('Suite Callback', _cor51, [])
													let <_cor55> =
													    %% Line 221
													    call 'erlang':'self'
														()
													in  let <_cor54> =
														%% Line 221
														call 'erlang':'self'
														    ()
													    in  let <_cor53> =
														    %% Line 222
														    call 'erlang':'make_ref'
															()
														in  %% Line 221
														    call 'erlang':'!'
															(_cor55, {{'stop',{_cor54,{'user_error',_cor48}}},%% Line 222
																					  {_cor3,_cor53}})
											    %% Line 224
											    apply 'loop'/3
												(_cor2, [], StartDir)
									( <_cor35> when 'true' ->
									      primop 'match_fail'
										  ({'badmatch',_cor35})
									  -| ['compiler_generated'] )
								      end
					  ( <_cor10> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor10})
					    -| ['compiler_generated'] )
					end
'create_table'/2 =
    %% Line 226
    fun (_cor1,_cor0) ->
	%% Line 227
	apply 'create_table'/3
	    (_cor1, 'set', _cor0)
'create_table'/3 =
    %% Line 228
    fun (_cor2,_cor1,_cor0) ->
	do  catch
		%% Line 229
		call 'ets':'delete'
		    (_cor2)
	    %% Line 230
	    call 'ets':'new'
		(_cor2, [_cor1|['named_table'|['public'|[{'keypos',_cor0}|[]]]]])
'read_opts'/0 =
    %% Line 232
    fun () ->
	let <_cor0> =
	    %% Line 233
	    call 'ct_run':'variables_file_name'
		([46|[47]])
	in  %% Line 233
	    case call 'file':'consult'
		     (_cor0) of
	      %% Line 234
	      <{'ok',Opts}> when 'true' ->
		  %% Line 235
		  {'ok',Opts}
	      %% Line 236
	      <{'error','enoent'}> when 'true' ->
		  %% Line 237
		  {'error','not_installed'}
	      %% Line 238
	      <Error> when 'true' ->
		  %% Line 239
		  {'error',{'bad_installation',Error}}
	    end
'save_suite_data'/2 =
    %% Line 243
    fun (_cor1,_cor0) ->
	%% Line 244
	apply 'call'/1
	    ({'save_suite_data',{_cor1,'undefined',_cor0}})
'save_suite_data'/3 =
    %% Line 246
    fun (_cor2,_cor1,_cor0) ->
	%% Line 247
	apply 'call'/1
	    ({'save_suite_data',{_cor2,_cor1,_cor0}})
'save_suite_data_async'/2 =
    %% Line 249
    fun (_cor1,_cor0) ->
	%% Line 250
	apply 'save_suite_data_async'/3
	    (_cor1, 'undefined', _cor0)
'save_suite_data_async'/3 =
    %% Line 252
    fun (_cor2,_cor1,_cor0) ->
	%% Line 253
	apply 'cast'/1
	    ({'save_suite_data',{_cor2,_cor1,_cor0}})
'read_suite_data'/1 =
    %% Line 255
    fun (_cor0) ->
	%% Line 256
	apply 'call'/1
	    ({'read_suite_data',_cor0})
'delete_suite_data'/0 =
    %% Line 258
    fun () ->
	%% Line 259
	apply 'call'/1
	    ({'delete_suite_data','all'})
'delete_suite_data'/1 =
    %% Line 261
    fun (_cor0) ->
	%% Line 262
	apply 'call'/1
	    ({'delete_suite_data',_cor0})
'match_delete_suite_data'/1 =
    %% Line 264
    fun (_cor0) ->
	%% Line 265
	apply 'call'/1
	    ({'match_delete_suite_data',_cor0})
'delete_testdata'/0 =
    %% Line 267
    fun () ->
	%% Line 268
	apply 'call'/1
	    ('delete_testdata')
'delete_testdata'/1 =
    %% Line 270
    fun (_cor0) ->
	%% Line 271
	apply 'call'/1
	    ({'delete_testdata',_cor0})
'match_delete_testdata'/1 =
    %% Line 273
    fun (_cor0) ->
	%% Line 274
	apply 'call'/1
	    ({'match_delete_testdata',_cor0})
'update_testdata'/2 =
    %% Line 276
    fun (_cor1,_cor0) ->
	%% Line 277
	apply 'update_testdata'/3
	    (_cor1, _cor0, [])
'update_testdata'/3 =
    %% Line 279
    fun (_cor2,_cor1,_cor0) ->
	%% Line 280
	apply 'call'/1
	    ({'update_testdata',_cor2,_cor1,_cor0})
'set_testdata'/1 =
    %% Line 282
    fun (_cor0) ->
	%% Line 283
	apply 'call'/1
	    ({'set_testdata',_cor0})
'set_testdata_async'/1 =
    %% Line 285
    fun (_cor0) ->
	%% Line 286
	apply 'cast'/1
	    ({'set_testdata',_cor0})
'get_testdata'/1 =
    %% Line 288
    fun (_cor0) ->
	%% Line 289
	apply 'call'/1
	    ({'get_testdata',_cor0})
'get_testdata'/2 =
    %% Line 291
    fun (_cor1,_cor0) ->
	%% Line 292
	apply 'call'/2
	    ({'get_testdata',_cor1}, _cor0)
'set_cwd'/1 =
    %% Line 294
    fun (_cor0) ->
	%% Line 295
	apply 'call'/1
	    ({'set_cwd',_cor0})
'reset_cwd'/0 =
    %% Line 297
    fun () ->
	%% Line 298
	apply 'call'/1
	    ('reset_cwd')
'get_start_dir'/0 =
    %% Line 300
    fun () ->
	%% Line 301
	apply 'call'/1
	    ('get_start_dir')
'set_verbosity'/1 =
    %% Line 305
    fun (_cor0) ->
	case _cor0 of
	  <Elem = {_X_Category,_X_Level}> when 'true' ->
	      %% Line 306
	      try
		  call 'ets':'insert'
		      ('ct_verbosity_table', Elem)
	      of <_cor1> ->
		  %% Line 308
		  'ok'
	      catch <_cor5,_cor4,_cor3> ->
		  %% Line 311
		  {'error',_cor4}
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'set_verbosity',1}}] )
	    -| ['compiler_generated'] )
	end
'get_verbosity'/1 =
    %% Line 314
    fun (_cor0) ->
	%% Line 315
	try
	    call 'ets':'lookup'
		('ct_verbosity_table', _cor0)
	of <_cor1> ->
	    case _cor1 of
	      %% Line 316
	      <[{_cor7,Level}|[]]>
		  when call 'erlang':'=:='
			(_cor7,
			 _cor0) ->
		  %% Line 317
		  Level
	      %% Line 318
	      <_cor8> when 'true' ->
		  %% Line 319
		  'undefined'
	    end
	catch <_cor5,_cor4,_cor3> ->
	    %% Line 322
	    {'error',_cor4}
'loop'/3 =
    %% Line 325
    fun (_cor2,_cor1,_cor0) ->
	%% Line 326
	receive
	  %% Line 327
	  <{'update_last_run_index',From}> when 'true' ->
	      do  %% Line 328
		  call 'ct_logs':'make_last_run_index'
		      ()
		  do  %% Line 329
		      apply 'return'/2
			  (From, 'ok')
		      %% Line 330
		      apply 'loop'/3
			  (_cor2, _cor1, _cor0)
	  %% Line 331
	  <{{'save_suite_data',{Key,Name,Value}},From}> when 'true' ->
	      do  %% Line 332
		  call 'ets':'insert'
		      ('ct_suite_data', {'suite_data',Key,%% Line 333
							  Name,%% Line 334
							       Value})
		  do  %% Line 335
		      apply 'return'/2
			  (From, 'ok')
		      %% Line 336
		      apply 'loop'/3
			  (_cor2, _cor1, _cor0)
	  %% Line 337
	  <{{'read_suite_data',Key},From}> when 'true' ->
	      do  %% Line 338
		  case call 'ets':'lookup'
			   ('ct_suite_data', Key) of
		    %% Line 339
		    <[{'suite_data',_cor45,'undefined',Value}|[]]>
			when call 'erlang':'=:='
			      (_cor45,
			       Key) ->
			%% Line 340
			apply 'return'/2
			    (From, Value)
		    %% Line 341
		    <[{'suite_data',_cor46,Name,Value}|[]]>
			when call 'erlang':'=:='
			      (_cor46,
			       Key) ->
			%% Line 342
			apply 'return'/2
			    (From, {Name,Value})
		    %% Line 343
		    <_cor47> when 'true' ->
			%% Line 344
			apply 'return'/2
			    (From, 'undefined')
		  end
		  %% Line 346
		  apply 'loop'/3
		      (_cor2, _cor1, _cor0)
	  %% Line 347
	  <{{'delete_suite_data',Key},From}> when 'true' ->
	      do  %% Line 348
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (Key,
			       'all') ->
			%% Line 349
			call 'ets':'delete_all_objects'
			    ('ct_suite_data')
		    %% Line 350
		    <> when 'true' ->
			%% Line 351
			call 'ets':'delete'
			    ('ct_suite_data', Key)
		  end
		  do  %% Line 353
		      apply 'return'/2
			  (From, 'ok')
		      %% Line 354
		      apply 'loop'/3
			  (_cor2, _cor1, _cor0)
	  %% Line 355
	  <{{'match_delete_suite_data',KeyPat},From}> when 'true' ->
	      do  %% Line 356
		  call 'ets':'match_delete'
		      ('ct_suite_data', {'suite_data',KeyPat,%% Line 357
							     '_',%% Line 358
								 '_'})
		  do  %% Line 359
		      apply 'return'/2
			  (From, 'ok')
		      %% Line 360
		      apply 'loop'/3
			  (_cor2, _cor1, _cor0)
	  %% Line 361
	  <{'delete_testdata',From}> when 'true' ->
	      do  %% Line 362
		  apply 'return'/2
		      (From, 'ok')
		  %% Line 363
		  apply 'loop'/3
		      (From, [], _cor0)
	  %% Line 364
	  <{{'delete_testdata',Key},From}> when 'true' ->
	      let <TestData1> =
		  %% Line 365
		  call 'lists':'keydelete'
		      (Key, 1, _cor1)
	      in  do  %% Line 366
		      apply 'return'/2
			  (From, 'ok')
		      %% Line 367
		      apply 'loop'/3
			  (From, TestData1, _cor0)
	  %% Line 368
	  <{{'match_delete_testdata',{Key1,Key2}},From}> when 'true' ->
	      let <_cor11> =
		  %% Line 371
		  ( fun (_cor9) ->
			case _cor9 of
			  <{Key,_cor48}>
			      when let <_cor5> =
				    call 'erlang':'is_tuple'
					(Key)
				in  call 'erlang':'not'
					(_cor5) ->
			      %% Line 372
			      'true'
			  %% Line 373
			  <{Key,_cor49}>
			      when try
				    let <_cor6> =
					call 'erlang':'tuple_size'
					    (Key)
				    in  call 'erlang':'=/='
					    (_cor6, 2)
				of <Try> ->
				    Try
				catch <T,R> ->
				    'false' ->
			      %% Line 374
			      'true'
			  %% Line 375
			  <{{_cor50,KeyB},_cor51}>
			      when call 'erlang':'=:='
				    (Key1,
				     '_') ->
			      %% Line 376
			      call 'erlang':'=/='
				  (KeyB, Key2)
			  %% Line 377
			  <{{KeyA,_cor52},_cor53}>
			      when call 'erlang':'=:='
				    (Key2,
				     '_') ->
			      %% Line 378
			      call 'erlang':'=/='
				  (KeyA, Key1)
			  %% Line 379
			  <_cor54>
			      when let <_cor7> =
				    call 'erlang':'=:='
					(Key1, '_')
				in  let <_cor8> =
					call 'erlang':'=:='
					    (Key2, '_')
				    in  call 'erlang':'or'
					    (_cor7, _cor8) ->
			      %% Line 380
			      'false'
			  %% Line 381
			  <_cor55> when 'true' ->
			      %% Line 382
			      'true'
			end
		    -| [{'id',{0,0,'-loop/3-fun-0-'}}] )
	      in  let <TestData1> =
		      %% Line 371
		      call 'lists':'filter'
			  (_cor11, _cor1)
		  in  do  %% Line 384
			  apply 'return'/2
			      (From, 'ok')
			  %% Line 385
			  apply 'loop'/3
			      (From, TestData1, _cor0)
	  %% Line 386
	  <{{'set_testdata',New = {Key,_X_Val}},From}> when 'true' ->
	      let <TestData1> =
		  %% Line 387
		  call 'lists':'keydelete'
		      (Key, 1, _cor1)
	      in  do  %% Line 388
		      apply 'return'/2
			  (From, 'ok')
		      %% Line 389
		      apply 'loop'/3
			  (_cor2, [New|TestData1], _cor0)
	  %% Line 390
	  <{{'get_testdata','all'},From}> when 'true' ->
	      do  %% Line 391
		  apply 'return'/2
		      (From, _cor1)
		  %% Line 392
		  apply 'loop'/3
		      (From, _cor1, _cor0)
	  %% Line 393
	  <{{'get_testdata',Key},From}> when 'true' ->
	      do  %% Line 394
		  case call 'lists':'keysearch'
			   (Key, 1, _cor1) of
		    %% Line 395
		    <{'value',{_cor56,Val}}>
			when call 'erlang':'=:='
			      (_cor56,
			       Key) ->
			%% Line 396
			apply 'return'/2
			    (From, Val)
		    %% Line 397
		    <_cor57> when 'true' ->
			%% Line 398
			apply 'return'/2
			    (From, 'undefined')
		  end
		  %% Line 400
		  apply 'loop'/3
		      (From, _cor1, _cor0)
	  %% Line 401
	  <{{'update_testdata',Key,Fun,Opts},From}> when 'true' ->
	      let <_cor24> =
		  %% Line 403
		  case call 'lists':'keysearch'
			   (Key, 1, _cor1) of
		    %% Line 404
		    <{'value',{_cor58,Val}}>
			when call 'erlang':'=:='
			      (_cor58,
			       Key) ->
			%% Line 405
			try
			    apply Fun
				(Val)
			of <_cor15> ->
			    case _cor15 of
			      %% Line 406
			      <'$delete'> when 'true' ->
				  do  %% Line 407
				      apply 'return'/2
					  (From, 'deleted')
				      %% Line 408
				      call 'lists':'keydelete'
					  (Key, 1, _cor1)
			      %% Line 409
			      <NewVal> when 'true' ->
				  do  %% Line 410
				      apply 'return'/2
					  (From, NewVal)
				      let <_cor16> =
					  %% Line 411
					  call 'lists':'keydelete'
					      (Key, 1, _cor1)
				      in  %% Line 411
					  [{Key,NewVal}|_cor16]
			    end
			catch <_cor20,_cor19,_cor18> ->
			    do  %% Line 414
				apply 'return'/2
				    (From, {'error',_cor19})
				_cor1
		    %% Line 417
		    <_cor61> when 'true' ->
			%% Line 418
			case call 'lists':'member'
				 ('create', Opts) of
			  %% Line 419
			  <'true'> when 'true' ->
			      let <InitVal> =
				  %% Line 420
				  apply Fun
				      ('undefined')
			      in  do  %% Line 421
				      apply 'return'/2
					  (From, InitVal)
				      %% Line 422
				      [{Key,InitVal}|_cor1]
			  %% Line 423
			  <'false'> when 'true' ->
			      do  %% Line 424
				  apply 'return'/2
				      (From, 'undefined')
				  _cor1
			  ( <_cor22> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor22})
			    -| ['compiler_generated'] )
			end
		  end
	      in  %% Line 428
		  apply 'loop'/3
		      (From, _cor24, _cor0)
	  %% Line 429
	  <{{'set_cwd',Dir},From}> when 'true' ->
	      let <_cor26> =
		  %% Line 430
		  call 'file':'set_cwd'
		      (Dir)
	      in  do  %% Line 430
		      apply 'return'/2
			  (From, _cor26)
		      %% Line 431
		      apply 'loop'/3
			  (From, _cor1, _cor0)
	  %% Line 432
	  <{'reset_cwd',From}> when 'true' ->
	      let <_cor27> =
		  %% Line 433
		  call 'file':'set_cwd'
		      (_cor0)
	      in  do  %% Line 433
		      apply 'return'/2
			  (From, _cor27)
		      %% Line 434
		      apply 'loop'/3
			  (From, _cor1, _cor0)
	  %% Line 435
	  <{'get_start_dir',From}> when 'true' ->
	      do  %% Line 436
		  apply 'return'/2
		      (From, _cor0)
		  %% Line 437
		  apply 'loop'/3
		      (From, _cor1, _cor0)
	  %% Line 438
	  <{{'stop',Info},From}> when 'true' ->
	      do  %% Line 439
		  call 'test_server_io':'reset_state'
		      ()
		  %% Line 440
		  case %% Line 441
		       call 'proplists':'get_value'
			   ('misc_io_log', _cor1) of
		    <{MiscIoName,MiscIoDivider,MiscIoFooter}> when 'true' ->
			%% Line 442
			case call 'file':'open'
				 (MiscIoName, %% Line 443
					      ['append'|[{'encoding','utf8'}]]) of
			  <{'ok',MiscIoFd}> when 'true' ->
			      do  %% Line 444
				  call 'io':'put_chars'
				      (MiscIoFd, MiscIoDivider)
				  do  %% Line 445
				      call 'test_server_io':'set_fd'
					  ('unexpected_io', MiscIoFd)
				      let <Time> =
					  %% Line 447
					  call 'calendar':'local_time'
					      ()
				      in  let <_cor31> =
					      %% Line 449
					      call 'erlang':'node'
						  ()
					  in  do  %% Line 448
						  call 'ct_event':'sync_notify'
						      ({'event','test_done',_cor31,%% Line 450
										   Time})
						  let <_cor37> =
						      %% Line 452
						      try
							  call 'ets':'lookup_element'
							      ('ct_suite_data', %% Line 453
										'ct_hooks', %% Line 454
											    4)
						      of <_cor32> ->
							  _cor32
						      catch <_cor36,_cor35,_cor34> ->
							  case <_cor36,_cor35,_cor34> of
							    %% Line 458
							    <'error','badarg',_cor62> when 'true' ->
								[]
							    ( <_cor36,_cor35,_cor34> when 'true' ->
								  primop 'raise'
								      (_cor34, _cor35)
							      -| ['compiler_generated'] )
							  end
						  in  do  %% Line 460
							  call 'ct_hooks':'terminate'
							      (_cor37)
							  let <_cor39> =
							      %% Line 461
							      call 'ets':'tab2list'
								  ('ct_connections')
							  in  do  %% Line 461
								  apply 'close_connections'/1
								      (_cor39)
								  do  %% Line 462
								      call 'ets':'delete'
									  ('ct_connections')
								      do  %% Line 463
									  call 'ets':'delete'
									      ('ct_boards')
									  do  %% Line 464
									      call 'ets':'delete'
										  ('ct_suite_data')
									      do  %% Line 465
										  call 'ets':'delete'
										      ('ct_verbosity_table')
										  let <_cor40> =
										      %% Line 467
										      call 'erlang':'++'
											  ([10|[60|[47|[112|[114|[101|[62|[10]]]]]]]], MiscIoFooter)
										  in  do  %% Line 467
											  call 'io':'put_chars'
											      (MiscIoFd, _cor40)
											  do  %% Line 468
											      call 'test_server_io':'stop'
												  (['unexpected_io'])
											      do  %% Line 469
												  call 'test_server_io':'finish'
												      ()
												  do  %% Line 471
												      call 'ct_logs':'close'
													  (Info, _cor0)
												      do  %% Line 472
													  call 'ct_event':'stop'
													      ()
													  do  %% Line 473
													      call 'ct_config':'stop'
														  ()
													      do  %% Line 474
														  call 'file':'set_cwd'
														      (_cor0)
														  %% Line 475
														  apply 'return'/2
														      (From, Info)
			  ( <_cor29> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor29})
			    -| ['compiler_generated'] )
			end
		    ( <_cor28> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor28})
		      -| ['compiler_generated'] )
		  end
	  %% Line 476
	  <{Ref,_X_Msg}>
	      when call 'erlang':'is_reference'
		    (Ref) ->
	      %% Line 478
	      apply 'loop'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 479
	  <{'get_mode',From}> when 'true' ->
	      do  %% Line 480
		  apply 'return'/2
		      (From, _cor2)
		  %% Line 481
		  apply 'loop'/3
		      (_cor2, _cor1, _cor0)
	  %% Line 482
	  <{'EXIT',_X_Pid,'normal'}> when 'true' ->
	      %% Line 483
	      apply 'loop'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 484
	  <{'EXIT',Pid,Reason}> when 'true' ->
	      %% Line 485
	      case call 'ets':'lookup'
		       ('ct_connections', Pid) of
		%% Line 486
		<[{'conn',_cor63,_cor64,A,CB}|[]]> when 'true' ->
		    do  %% Line 488
			call 'ct_logs':'tc_log_async'
			    ('ct_error_notify', %% Line 489
						99, %% Line 490
						    [67|[84|[32|[69|[114|[114|[111|[114|[32|[78|[111|[116|[105|[102|[105|[99|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]], %% Line 491
																					   [67|[111|[110|[110|[101|[99|[116|[105|[111|[110|[32|[112|[114|[111|[99|[101|[115|[115|[32|[100|[105|[101|[100|[58|[32|[80|[105|[100|[58|[32|[126|[119|[44|[32|[65|[100|[100|[114|[101|[115|[115|[58|[32|[126|[112|[44|[32|[67|[97|[108|[108|[98|[97|[99|[107|[58|[32|[126|[119|[10|[82|[101|[97|[115|[111|[110|[58|[32|[126|[112|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 495
																																																																							     [Pid|[A|[CB|[Reason|[]]]]])
			do  catch
				%% Line 496
				call CB:'close'
				    (Pid)
			    do  %% Line 498
				apply 'unregister_connection'/1
				    (Pid)
				%% Line 499
				apply 'loop'/3
				    (_cor2, _cor1, _cor0)
		%% Line 500
		<_cor65> when 'true' ->
		    do  %% Line 502
			call 'io':'format'
			    ([10|[10|[99|[116|[95|[117|[116|[105|[108|[95|[115|[101|[114|[118|[101|[114|[32|[103|[111|[116|[32|[69|[88|[73|[84|[32|[102|[114|[111|[109|[32|[126|[119|[58|[32|[126|[112|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 503
																														       [Pid|[Reason|[]]])
			do  %% Line 504
			    call 'file':'set_cwd'
				(_cor0)
			    %% Line 505
			    call 'erlang':'exit'
				(Reason)
	      end
	after 'infinity' ->
	  'true'
'close_connections'/1 =
    %% Line 509
    fun (_cor0) ->
	case _cor0 of
	  <[{'conn',Handle,_cor2,_cor3,CB}|Conns]> when 'true' ->
	      do  %% Line 510
		  call CB:'close'
		      (Handle)
		  %% Line 511
		  apply 'close_connections'/1
		      (Conns)
	  %% Line 512
	  <[]> when 'true' ->
	      %% Line 513
	      'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'close_connections',1}}] )
	    -| ['compiler_generated'] )
	end
'get_key_from_name'/1 =
    %% Line 515
    fun (_cor0) ->
	%% Line 516
	call 'ct_config':'get_key_from_name'
	    (_cor0)
'register_connection'/4 =
    %% Line 532
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 537
	    case call 'ct_config':'get_key_from_name'
		     (_cor3) of
	      %% Line 538
	      <{'ok',_X_Key}> when 'true' ->
		  _cor3
	      %% Line 540
	      <_cor11> when 'true' ->
		  _cor0
	    end
	in  do  %% Line 545
		call 'ets':'insert'
		    ('ct_connections', {'conn',_cor0,_cor5,_cor2,_cor1})
		%% Line 549
		'ok'
'unregister_connection'/1 =
    %% Line 560
    fun (_cor0) ->
	do  %% Line 561
	    call 'ets':'delete'
		('ct_connections', _cor0)
	    %% Line 562
	    'ok'
'does_connection_exist'/3 =
    %% Line 574
    fun (_cor2,_cor1,_cor0) ->
	%% Line 575
	case call 'ct_config':'get_key_from_name'
		 (_cor2) of
	  %% Line 576
	  <{'ok',_X_Key}> when 'true' ->
	      %% Line 577
	      case call 'ets':'select'
		       ('ct_connections', [{{'conn','$1',_cor2,_cor1,_cor0},%% Line 581
									    [],%% Line 582
									       ['$1']}|%% Line 582
										       []]) of
		%% Line 583
		<[Handle|[]]> when 'true' ->
		    %% Line 584
		    {'ok',Handle}
		%% Line 585
		<[]> when 'true' ->
		    %% Line 586
		    'false'
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 588
	  <_cor8> when 'true' ->
	      %% Line 589
	      'false'
	end
'get_connection'/2 =
    %% Line 603
    fun (_cor1,_cor0) ->
	%% Line 605
	case call 'ct_config':'get_key_from_name'
		 (_cor1) of
	  %% Line 606
	  <{'ok',_X_Key}> when 'true' ->
	      %% Line 607
	      case call 'ets':'select'
		       ('ct_connections', [{{'conn','$1',_cor1,%% Line 608
							       '$2',_cor0},%% Line 611
									   [],%% Line 612
									      [{{'$1','$2'}}]}|%% Line 612
											       []]) of
		%% Line 613
		<[Result|[]]> when 'true' ->
		    %% Line 614
		    {'ok',Result}
		%% Line 615
		<[]> when 'true' ->
		    %% Line 616
		    {'error','no_registered_connection'}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 618
	  <Error> when 'true' ->
	      %% Line 619
	      Error
	end
'get_connections'/1 =
    %% Line 634
    fun (_cor0) ->
	let <Conns> =
	    %% Line 635
	    call 'ets':'tab2list'
		('ct_connections')
	in  let <_cor5> =
		%% Line 636
		( fun (_cor3) ->
		      case _cor3 of
			<{'conn',%% Line 637
				 Handle,TargetName,%% Line 639
						   Address,%% Line 638
							   Callback}> when 'true' ->
			    %% Line 640
			    case call 'ct_gen_conn':'get_conn_pid'
				     (Handle) of
			      %% Line 641
			      <_cor7>
				  when let <_cor8> =
					call 'erlang':'=:='
					    (_cor7, _cor0)
				    in  let <_cor9> =
					    call 'erlang':'is_atom'
						(TargetName)
					in  call 'erlang':'and'
						(_cor8, _cor9) ->
				  %% Line 642
				  [{TargetName,Handle,%% Line 643
						      Callback,%% Line 643
							       Address}|%% Line 643
									[]]
			      %% Line 644
			      <_cor10>
				  when call 'erlang':'=:='
					(_cor10,
					 _cor0) ->
				  %% Line 645
				  [{'undefined',Handle,%% Line 646
						       Callback,%% Line 646
								Address}|%% Line 646
									 []]
			      %% Line 647
			      <_cor11> when 'true' ->
				  %% Line 648
				  []
			    end
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'-get_connections/1-fun-0-',1}}] )
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-get_connections/1-fun-0-'}}] )
	    in  %% Line 636
		call 'lists':'flatmap'
		    (_cor5, %% Line 650
			    Conns)
'get_target_name'/1 =
    %% Line 655
    fun (_cor0) ->
	%% Line 656
	case call 'ets':'select'
		 ('ct_connections', [{{'conn',_cor0,'$1','_','_'},%% Line 657
								  [],%% Line 658
								     ['$1']}|%% Line 658
									     []]) of
	  %% Line 659
	  <[TargetName|[]]>
	      when call 'erlang':'is_atom'
		    (TargetName) ->
	      %% Line 660
	      {'ok',TargetName}
	  %% Line 661
	  <_cor3> when 'true' ->
	      %% Line 662
	      {'error',{'unknown_connection',_cor0}}
	end
'close_connections'/0 =
    %% Line 669
    fun () ->
	let <_cor0> =
	    %% Line 670
	    call 'ets':'tab2list'
		('ct_connections')
	in  do  %% Line 670
		apply 'close_connections'/1
		    (_cor0)
		%% Line 671
		'ok'
'override_silence_all_connections'/0 =
    %% Line 677
    fun () ->
	do  %% Line 679
	    apply 'override_silence_connections'/1
		(['telnet'|['ftp'|['rpc'|['snmp'|['ssh']]]]])
	    %% Line 678
	    ['telnet'|['ftp'|['rpc'|['snmp'|['ssh']]]]]
'override_silence_connections'/1 =
    %% Line 682
    fun (_cor0) ->
	case _cor0 of
	  <Conns>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor3> =
		  %% Line 683
		  ( fun (_cor1) ->
			case _cor1 of
			  <{C,B}> when 'true' ->
			      {C,B}
			  %% Line 684
			  <C> when 'true' ->
			      {C,'true'}
			end
		    -| [{'id',{0,0,'-override_silence_connections/1-fun-0-'}}] )
	      in  let <Conns1> =
		      %% Line 683
		      call 'lists':'map'
			  (_cor3, %% Line 685
				  Conns)
		  in  %% Line 686
		      apply 'set_testdata'/1
			  ({'override_silent_connections',Conns1})
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'override_silence_connections',1}}] )
	    -| ['compiler_generated'] )
	end
'get_overridden_silenced_connections'/0 =
    %% Line 688
    fun () ->
	%% Line 689
	case apply 'get_testdata'/1
		 ('override_silent_connections') of
	  %% Line 690
	  <{'error',_cor1}> when 'true' ->
	      %% Line 691
	      'undefined'
	  %% Line 692
	  <Conns> when 'true' ->
	      %% Line 693
	      Conns
	end
'delete_overridden_silenced_connections'/0 =
    %% Line 696
    fun () ->
	%% Line 697
	apply 'delete_testdata'/1
	    ('override_silent_connections')
'silence_all_connections'/0 =
    %% Line 699
    fun () ->
	do  %% Line 701
	    apply 'silence_connections'/1
		(['telnet'|['ftp'|['rpc'|['snmp']]]])
	    %% Line 700
	    ['telnet'|['ftp'|['rpc'|['snmp']]]]
'silence_connections'/1 =
    %% Line 704
    fun (_cor0) ->
	case _cor0 of
	  <Conn>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      %% Line 705
	      apply 'silence_connections'/1
		  ([Conn|[]])
	  %% Line 706
	  <Conn>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 707
	      apply 'silence_connections'/1
		  ([{Conn,'true'}|[]])
	  %% Line 708
	  <Conns>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor3> =
		  %% Line 709
		  ( fun (_cor1) ->
			case _cor1 of
			  <{C,B}> when 'true' ->
			      {C,B}
			  %% Line 710
			  <C> when 'true' ->
			      {C,'true'}
			end
		    -| [{'id',{0,0,'-silence_connections/1-fun-0-'}}] )
	      in  let <Conns1> =
		      %% Line 709
		      call 'lists':'map'
			  (_cor3, %% Line 711
				  Conns)
		  in  %% Line 712
		      apply 'set_testdata'/1
			  ({'silent_connections',Conns1})
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'silence_connections',1}}] )
	    -| ['compiler_generated'] )
	end
'is_silenced'/1 =
    %% Line 714
    fun (_cor0) ->
	%% Line 715
	apply 'is_silenced'/2
	    (_cor0, 'infinity')
'is_silenced'/2 =
    %% Line 717
    fun (_cor1,_cor0) ->
	%% Line 718
	case apply 'get_testdata'/2
		 ('silent_connections', _cor0) of
	  %% Line 719
	  <Conns>
	      when call 'erlang':'is_list'
		    (Conns) ->
	      %% Line 720
	      case call 'lists':'keysearch'
		       (_cor1, 1, Conns) of
		%% Line 721
		<{'value',{_cor6,'true'}}>
		    when call 'erlang':'=:='
			  (_cor6,
			   _cor1) ->
		    %% Line 722
		    'true'
		%% Line 723
		<_cor7> when 'true' ->
		    %% Line 724
		    'false'
	      end
	  %% Line 726
	  <Error = {'error',_cor8}> when 'true' ->
	      %% Line 727
	      Error
	  %% Line 728
	  <_cor9> when 'true' ->
	      %% Line 729
	      'false'
	end
'reset_silent_connections'/0 =
    %% Line 732
    fun () ->
	%% Line 733
	apply 'delete_testdata'/1
	    ('silent_connections')
'stop'/1 =
    %% Line 743
    fun (_cor0) ->
	%% Line 744
	case call 'erlang':'whereis'
		 ('ct_util_server') of
	  %% Line 745
	  <'undefined'> when 'true' ->
	      %% Line 746
	      'ok'
	  %% Line 747
	  <CtUtilPid> when 'true' ->
	      let <Ref> =
		  %% Line 748
		  call 'erlang':'monitor'
		      ('process', CtUtilPid)
	      in  do  %% Line 749
		      apply 'call'/1
			  ({'stop',_cor0})
		      %% Line 750
		      receive
			%% Line 751
			<{'DOWN',_cor4,_cor5,_cor6,_cor7}>
			    when call 'erlang':'=:='
				  (_cor4,
				   Ref) ->
			    'ok'
		      after 'infinity' ->
			'true'
	end
'update_last_run_index'/0 =
    %% Line 760
    fun () ->
	%% Line 761
	apply 'call'/1
	    ('update_last_run_index')
'get_mode'/0 =
    %% Line 770
    fun () ->
	%% Line 771
	apply 'call'/1
	    ('get_mode')
'listenv'/1 =
    %% Line 776
    fun (_cor0) ->
	%% Line 777
	case call 'ct_telnet':'send'
		 (_cor0, [108|[105|[115|[116|[101|[110|[118]]]]]]]) of
	  %% Line 778
	  <'ok'> when 'true' ->
	      let <_cor1> =
		  %% Line 781
		  apply 'seconds'/1
		      (3)
	      in  %% Line 779
		  case call 'ct_telnet':'expect'
			   (_cor0, %% Line 780
				   [[40|[94|[46|[43|[41|[61|[40|[46|[42|[36|[41]]]]]]]]]]]], %% Line 781
											     [{'timeout',_cor1}|%% Line 782
														['repeat']]) of
		    <{'ok',Data,_cor10}> when 'true' ->
			let <_cor7> =
			    %% Line 783
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor5) ->
					  case _cor5 of
					    <[[_cor11|[Name|[Val|[]]]]|_cor4]> when 'true' ->
						let <_cor6> =
						    apply 'lc$^0'/1
							(_cor4)
						in  ( [{Name,Val}|_cor6]
						      -| ['compiler_generated'] )
					    ( <[_cor3|_cor4]> when 'true' ->
						  apply 'lc$^0'/1
						      (_cor4)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor5> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor5})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (Data)
			      -| ['list_comprehension'] )
			in  %% Line 783
			    {'ok',_cor7}
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	  %% Line 784
	  <{'error',Reason}> when 'true' ->
	      %% Line 785
	      {'error',{'could_not_send_command',_cor0,[108|[105|[115|[116|[101|[110|[118]]]]]]],Reason}}
	  ( <_cor8> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor8})
	    -| ['compiler_generated'] )
	end
'parse_table'/1 =
    %% Line 791
    fun (_cor0) ->
	%% Line 792
	case apply 'get_headings'/1
		 (_cor0) of
	  <{Heading,Rest}> when 'true' ->
	      let <_cor2> =
		  %% Line 793
		  call 'erlang':'size'
		      (Heading)
	      in  let <Lines> =
		      %% Line 793
		      apply 'parse_row'/3
			  (Rest, [], _cor2)
		  in  %% Line 794
		      {Heading,Lines}
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'get_headings'/1 =
    %% Line 796
    fun (_cor0) ->
	case _cor0 of
	  <[[124|Headings]|Rest]> when 'true' ->
	      let <_cor1> =
		  %% Line 797
		  call 'string':'tokens'
		      (Headings, [124])
	      in  let <_cor2> =
		      %% Line 797
		      apply 'remove_space'/2
			  (_cor1, [])
		  in  %% Line 797
		      {_cor2,Rest}
	  %% Line 798
	  <[_cor4|Rest]> when 'true' ->
	      %% Line 799
	      apply 'get_headings'/1
		  (Rest)
	  %% Line 800
	  <[]> when 'true' ->
	      %% Line 801
	      {{},[]}
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'get_headings',1}}] )
	    -| ['compiler_generated'] )
	end
'parse_row'/3 =
    %% Line 803
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Row = [124|_cor21]|T],Rows,NumCols>
	      when call 'erlang':'>'
		    (NumCols,
		     1) ->
	      %% Line 804
	      case call 'string':'tokens'
		       (Row, [124]) of
		%% Line 805
		<Values>
		    when try
			  let <_cor3> =
			      call 'erlang':'length'
				  (Values)
			  in  call 'erlang':'=:='
				  (_cor3, NumCols)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <_cor4> =
			%% Line 806
			apply 'remove_space'/2
			    (Values, [])
		    in  %% Line 806
			apply 'parse_row'/3
			    (T, [_cor4|Rows], NumCols)
		%% Line 807
		<Values>
		    when try
			  let <_cor5> =
			      call 'erlang':'length'
				  (Values)
			  in  call 'erlang':'<'
				  (_cor5, NumCols)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <_cor6> =
			%% Line 808
			call 'erlang':'hd'
			    (T)
		    in  let <_cor7> =
			    %% Line 808
			    [10|_cor6]
			in  let <_cor8> =
				%% Line 808
				call 'erlang':'++'
				    (Row, _cor7)
			    in  let <_cor9> =
				    %% Line 808
				    call 'erlang':'tl'
					(T)
				in  %% Line 808
				    apply 'parse_row'/3
					([_cor8|_cor9], Rows, NumCols)
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 810
	  <[Row = [124|_cor22]|T],Rows,NumCols = 1> when 'true' ->
	      %% Line 811
	      case call 'string':'rchr'
		       (Row, 124) of
		%% Line 812
		<1> when 'true' ->
		    let <_cor11> =
			%% Line 813
			call 'erlang':'hd'
			    (T)
		    in  let <_cor12> =
			    %% Line 813
			    [10|_cor11]
			in  let <_cor13> =
				%% Line 813
				call 'erlang':'++'
				    (Row, _cor12)
			    in  let <_cor14> =
				    %% Line 813
				    call 'erlang':'tl'
					(T)
				in  %% Line 813
				    apply 'parse_row'/3
					([_cor13|_cor14], Rows, NumCols)
		%% Line 814
		<_X_Else> when 'true' ->
		    let <_cor15> =
			%% Line 815
			call 'string':'tokens'
			    (Row, [124])
		    in  let <_cor16> =
			    %% Line 815
			    apply 'remove_space'/2
				(_cor15, [])
			in  %% Line 815
			    apply 'parse_row'/3
				(T, [_cor16|Rows], %% Line 816
						   NumCols)
	      end
	  %% Line 818
	  <[_X_Skip|T],Rows,NumCols> when 'true' ->
	      %% Line 819
	      apply 'parse_row'/3
		  (T, Rows, NumCols)
	  %% Line 820
	  <[],Rows,_X_NumCols> when 'true' ->
	      %% Line 821
	      call 'lists':'reverse'
		  (Rows)
	  ( <_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18})
		  -| [{'function_name',{'parse_row',3}}] )
	    -| ['compiler_generated'] )
	end
'remove_space'/2 =
    %% Line 823
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Str|Rest],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 824
		  call 'string':'strip'
		      (Str)
	      in  let <_cor3> =
		      %% Line 824
		      call 'string':'strip'
			  (_cor2, 'both', 39)
		  in  %% Line 824
		      apply 'remove_space'/2
			  (Rest, [_cor3|Acc])
	  %% Line 825
	  <[],Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 826
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 826
		  call 'erlang':'list_to_tuple'
		      (_cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'remove_space',2}}] )
	    -| ['compiler_generated'] )
	end
'is_test_dir'/1 =
    %% Line 833
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 834
	    call 'filename':'basename'
		(_cor0)
	in  let <_cor2> =
		%% Line 834
		call 'string':'tokens'
		    (_cor1, [95])
	    in  let <_cor3> =
		    %% Line 834
		    call 'lists':'last'
			(_cor2)
		in  %% Line 834
		    call 'erlang':'=='
			(_cor3, [116|[101|[115|[116]]]])
'get_testdir'/2 =
    %% Line 840
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Dir,'all'> when 'true' ->
	      let <Abs> =
		  %% Line 841
		  apply 'abs_name'/1
		      (Dir)
	      in  %% Line 842
		  case apply 'is_test_dir'/1
			   (Abs) of
		    %% Line 843
		    <'true'> when 'true' ->
			%% Line 844
			Abs
		    %% Line 845
		    <'false'> when 'true' ->
			let <AbsTest> =
			    %% Line 846
			    call 'filename':'join'
				(Abs, [116|[101|[115|[116]]]])
			in  %% Line 847
			    case call 'filelib':'is_dir'
				     (AbsTest) of
			      %% Line 848
			      <'true'> when 'true' ->
				  AbsTest
			      %% Line 849
			      <'false'> when 'true' ->
				  Abs
			      ( <_cor4> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor4})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	  %% Line 853
	  <Dir,[Suite|_cor18]>
	      when call 'erlang':'is_atom'
		    (Suite) ->
	      let <_cor6> =
		  %% Line 854
		  call 'erlang':'atom_to_list'
		      (Suite)
	      in  %% Line 854
		  apply 'get_testdir'/2
		      (Dir, _cor6)
	  %% Line 856
	  <Dir,[Suite|_cor19]>
	      when call 'erlang':'is_list'
		    (Suite) ->
	      %% Line 857
	      apply 'get_testdir'/2
		  (Dir, Suite)
	  %% Line 859
	  <Dir,Suite>
	      when call 'erlang':'is_atom'
		    (Suite) ->
	      let <_cor7> =
		  %% Line 860
		  call 'erlang':'atom_to_list'
		      (Suite)
	      in  %% Line 860
		  apply 'get_testdir'/2
		      (Dir, _cor7)
	  %% Line 862
	  <Dir,Suite>
	      when call 'erlang':'is_list'
		    (Suite) ->
	      let <Abs> =
		  %% Line 863
		  apply 'abs_name'/1
		      (Dir)
	      in  %% Line 864
		  case apply 'is_test_dir'/1
			   (Abs) of
		    %% Line 865
		    <'true'> when 'true' ->
			%% Line 866
			Abs
		    %% Line 867
		    <'false'> when 'true' ->
			let <AbsTest> =
			    %% Line 868
			    call 'filename':'join'
				(Abs, [116|[101|[115|[116]]]])
			in  let <_cor11> =
				%% Line 869
				case call 'filename':'extension'
					 (Suite) of
				  %% Line 870
				  <[46|[101|[114|[108]]]]> when 'true' ->
				      Suite
				  %% Line 871
				  <_cor20> when 'true' ->
				      call 'erlang':'++'
					  (Suite, [46|[101|[114|[108]]]])
				end
			    in  let <_cor13> =
				    %% Line 873
				    call 'filename':'join'
					(AbsTest, _cor11)
				in  %% Line 873
				    case call 'filelib':'is_file'
					     (_cor13) of
				      %% Line 874
				      <'true'> when 'true' ->
					  AbsTest
				      %% Line 875
				      <'false'> when 'true' ->
					  Abs
				      ( <_cor14> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor14})
					-| ['compiler_generated'] )
				    end
		    ( <_cor15> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor15})
		      -| ['compiler_generated'] )
		  end
	  %% Line 879
	  <Dir,_cor21> when 'true' ->
	      %% Line 880
	      apply 'get_testdir'/2
		  (Dir, 'all')
	end
'get_attached'/1 =
    %% Line 886
    fun (_cor0) ->
	%% Line 887
	case call 'dbg_iserver':'safe_call'
		 ({'get_attpid',_cor0}) of
	  %% Line 888
	  <{'ok',AttPid}>
	      when call 'erlang':'is_pid'
		    (AttPid) ->
	      %% Line 889
	      AttPid
	  %% Line 890
	  <_cor3> when 'true' ->
	      %% Line 891
	      'undefined'
	end
'kill_attached'/2 =
    %% Line 898
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'undefined',_X_AttPid> when 'true' ->
	      %% Line 899
	      'ok'
	  %% Line 900
	  <_X_TCPid,'undefined'> when 'true' ->
	      %% Line 901
	      'ok'
	  %% Line 902
	  <TCPid,AttPid> when 'true' ->
	      %% Line 903
	      case call 'erlang':'process_info'
		       (TCPid) of
		%% Line 904
		<'undefined'> when 'true' ->
		    %% Line 905
		    call 'erlang':'exit'
			(AttPid, 'kill')
		%% Line 906
		<_cor5> when 'true' ->
		    %% Line 907
		    'ok'
	      end
	end
'warn_duplicates'/1 =
    %% Line 915
    fun (_cor0) ->
	let <Warn> =
	    %% Line 917
	    ( fun (_cor3) ->
		  let <_cor1> =
		      catch
			  %% Line 918
			  call _cor3:'sequences'
			      ()
		  in  %% Line 918
		      case _cor1 of
			%% Line 919
			<{'EXIT',_cor7}> when 'true' ->
			    %% Line 920
			    'ok'
			%% Line 921
			<[]> when 'true' ->
			    %% Line 922
			    'ok'
			%% Line 923
			<_cor8> when 'true' ->
			    %% Line 924
			    call 'io':'format'
				('user', [126|[110|[87|[65|[82|[78|[73|[78|[71|[33|[32|[68|[101|[112|[114|[101|[99|[97|[116|[101|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[58|[32|[126|[119|[58|[115|[101|[113|[117|[101|[110|[99|[101|[115|[47|[48|[46|[126|[110|[32|[32|[32|[32|[32|[32|[32|[32|[32|[85|[115|[101|[32|[103|[114|[111|[117|[112|[32|[119|[105|[116|[104|[32|[115|[101|[113|[117|[101|[110|[99|[101|[32|[112|[114|[111|[112|[101|[114|[116|[121|[32|[105|[110|[115|[116|[101|[97|[100|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 925
																																																																												 [_cor3|[]])
		      end
	      -| [{'id',{0,0,'-warn_duplicates/1-fun-0-'}}] )
	in  do  %% Line 928
		call 'lists':'foreach'
		    (Warn, _cor0)
		%% Line 929
		'ok'
'get_profile_data'/0 =
    %% Line 935
    fun () ->
	%% Line 936
	apply 'get_profile_data'/1
	    ('all')
'get_profile_data'/1 =
    %% Line 938
    fun (_cor0) ->
	%% Line 939
	case <> of
	  <>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 940
		  apply 'get_start_dir'/0
		      ()
	      in  %% Line 940
		  apply 'get_profile_data'/2
		      (_cor0, _cor1)
	  %% Line 941
	  <>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 942
	      apply 'get_profile_data'/2
		  ('all', _cor0)
	  ( <> when 'true' ->
		primop 'match_fail'
		    ('if_clause')
	    -| ['compiler_generated'] )
	end
'get_profile_data'/2 =
    %% Line 945
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 946
	    case call 'application':'get_env'
		     ('common_test', 'profile') of
	      %% Line 947
	      <{'ok','undefined'}> when 'true' ->
		  'default'
	      %% Line 948
	      <{'ok',Prof}> when 'true' ->
		  Prof
	      %% Line 949
	      <_cor7> when 'true' ->
		  'default'
	    end
	in  %% Line 951
	    apply 'get_profile_data'/3
		(_cor3, _cor1, _cor0)
'get_profile_data'/3 =
    %% Line 953
    fun (_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 954
	    case _cor2 of
	      %% Line 955
	      <'default'> when 'true' ->
		  %% Line 956
		  [46|[99|[111|[109|[109|[111|[110|[95|[116|[101|[115|[116]]]]]]]]]]]]
	      %% Line 957
	      <_cor23>
		  when call 'erlang':'is_list'
			(_cor2) ->
		  let <_cor3> =
		      %% Line 958
		      [46|_cor2]
		  in  %% Line 958
		      call 'erlang':'++'
			  ([46|[99|[111|[109|[109|[111|[110|[95|[116|[101|[115|[116]]]]]]]]]]]], _cor3)
	      %% Line 959
	      <_cor24>
		  when call 'erlang':'is_atom'
			(_cor2) ->
		  let <_cor4> =
		      %% Line 960
		      call 'erlang':'atom_to_list'
			  (_cor2)
		  in  let <_cor5> =
			  %% Line 960
			  [46|_cor4]
		      in  %% Line 960
			  call 'erlang':'++'
			      ([46|[99|[111|[109|[109|[111|[110|[95|[116|[101|[115|[116]]]]]]]]]]]], _cor5)
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor6})
		-| ['compiler_generated'] )
	    end
	in  let <FullNameWD> =
		%% Line 962
		call 'filename':'join'
		    (_cor0, _cor7)
	    in  let <WhichFile,Result> =
		    %% Line 964
		    case call 'file':'consult'
			     (FullNameWD) of
		      %% Line 965
		      <{'error','enoent'}> when 'true' ->
			  %% Line 966
			  case call 'init':'get_argument'
				   ('home') of
			    %% Line 967
			    <{'ok',[[HomeDir|[]]|[]]}> when 'true' ->
				let <FullNameHome> =
				    %% Line 968
				    call 'filename':'join'
					(HomeDir, _cor7)
				in  let <_cor11> =
					%% Line 969
					call 'file':'consult'
					    (FullNameHome)
				    in  %% Line 969
					<FullNameHome,_cor11>
			    %% Line 970
			    <_cor25> when 'true' ->
				<_cor7,%% Line 971
				       {'error','enoent'}>
			  end
		      %% Line 973
		      <Consulted> when 'true' ->
			  %% Line 974
			  <FullNameWD,Consulted>
		    end
		in  %% Line 976
		    case Result of
		      %% Line 977
		      <{'error','enoent'}>
			  when call 'erlang':'=/='
				(_cor2,
				 'default') ->
			  do  %% Line 978
			      call 'io':'format'
				  ('user', [126|[110|[69|[82|[82|[79|[82|[33|[32|[77|[105|[115|[115|[105|[110|[103|[32|[112|[114|[111|[102|[105|[108|[101|[32|[102|[105|[108|[101|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor7|[]])
			      %% Line 979
			      'undefined'
		      %% Line 980
		      <{'error','enoent'}>
			  when call 'erlang':'=:='
				(_cor2,
				 'default') ->
			  %% Line 981
			  'undefined'
		      %% Line 982
		      <{'error',Reason}> when 'true' ->
			  do  %% Line 983
			      call 'io':'format'
				  ('user', [126|[110|[69|[82|[82|[79|[82|[33|[32|[69|[114|[114|[111|[114|[32|[105|[110|[32|[112|[114|[111|[102|[105|[108|[101|[32|[102|[105|[108|[101|[32|[126|[112|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 984
																																	[WhichFile|[Reason|[]]])
			      %% Line 985
			      'undefined'
		      %% Line 986
		      <{'ok',Data}> when 'true' ->
			  let <_cor17> =
			      %% Line 987
			      case Data of
				%% Line 988
				<[List|[]]>
				    when call 'erlang':'is_list'
					  (List) ->
				    %% Line 989
				    List
				%% Line 990
				<_cor26>
				    when call 'erlang':'is_list'
					  (Data) ->
				    %% Line 991
				    Data
				%% Line 992
				<_cor27> when 'true' ->
				    do  %% Line 993
					call 'io':'format'
					    ('user', %% Line 994
						     [126|[110|[69|[82|[82|[79|[82|[33|[32|[73|[110|[118|[97|[108|[105|[100|[32|[112|[114|[111|[102|[105|[108|[101|[32|[100|[97|[116|[97|[32|[105|[110|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 995
																																     [WhichFile|[]])
					%% Line 996
					[]
			      end
			  in  %% Line 998
			      case <> of
				<>
				    when call 'erlang':'=:='
					  (_cor1,
					   'all') ->
				    _cor17
				%% Line 1000
				<> when 'true' ->
				    %% Line 1001
				    call 'proplists':'get_value'
					(_cor1, Data)
			      end
		      ( <_cor19> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor19})
			-| ['compiler_generated'] )
		    end
'call'/1 =
    %% Line 1007
    fun (_cor0) ->
	%% Line 1008
	apply 'call'/2
	    (_cor0, 'infinity')
'call'/2 =
    %% Line 1010
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1011
	    call 'erlang':'self'
		()
	in  let <_cor2> =
		%% Line 1011
		call 'erlang':'whereis'
		    ('ct_util_server')
	    in  %% Line 1011
		case <_cor3,_cor2> of
		  %% Line 1012
		  <_cor9,'undefined'> when 'true' ->
		      %% Line 1013
		      {'error','ct_util_server_not_running'}
		  %% Line 1014
		  <Pid,_cor10>
		      when call 'erlang':'=:='
			    (_cor10,
			     Pid) ->
		      %% Line 1017
		      {'error','bad_invocation'}
		  %% Line 1018
		  <Self,Pid> when 'true' ->
		      let <MRef> =
			  %% Line 1019
			  call 'erlang':'monitor'
			      ('process', Pid)
		      in  let <Ref> =
			      %% Line 1020
			      call 'erlang':'make_ref'
				  ()
			  in  do  %% Line 1021
				  call 'erlang':'!'
				      ('ct_util_server', {_cor1,{Self,Ref}})
				  %% Line 1022
				  receive
				    %% Line 1023
				    <{_cor11,Result}>
					when call 'erlang':'=:='
					      (_cor11,
					       Ref) ->
					do  %% Line 1024
					    call 'erlang':'demonitor'
						(MRef, ['flush'])
					    %% Line 1025
					    Result
				    %% Line 1026
				    <{'DOWN',_cor12,'process',_cor13,Reason}>
					when call 'erlang':'=:='
					      (_cor12,
					       MRef) ->
					%% Line 1027
					{'error',{'ct_util_server_down',Reason}}
				  after _cor0 ->
				    %% Line 1029
				    {'error','timeout'}
		end
'return'/2 =
    %% Line 1033
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{To,Ref},Result> when 'true' ->
	      %% Line 1034
	      call 'erlang':'!'
		  (To, {Ref,Result})
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'return',2}}] )
	    -| ['compiler_generated'] )
	end
'cast'/1 =
    %% Line 1036
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1037
	    call 'erlang':'make_ref'
		()
	in  %% Line 1037
	    call 'erlang':'!'
		('ct_util_server', {_cor0,{'ct_util_server',_cor1}})
'seconds'/1 =
    %% Line 1039
    fun (_cor0) ->
	%% Line 1040
	call 'test_server':'seconds'
	    (_cor0)
'abs_name'/1 =
    %% Line 1042
    fun (_cor0) ->
	case _cor0 of
	  <[47]> when 'true' ->
	      %% Line 1043
	      [47]
	  %% Line 1044
	  <Dir0> when 'true' ->
	      let <Abs> =
		  %% Line 1045
		  call 'filename':'absname'
		      (Dir0)
	      in  let <_cor3> =
		      %% Line 1046
		      case call 'lists':'reverse'
			       (Abs) of
			%% Line 1047
			<[47|Rest]> when 'true' ->
			    call 'lists':'reverse'
				(Rest)
			%% Line 1048
			<_cor6> when 'true' ->
			    Abs
		      end
		  in  %% Line 1050
		      apply 'abs_name1'/2
			  (_cor3, [])
	end
'abs_name1'/2 =
    %% Line 1052
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Drv|[58|[47]]],Acc> when 'true' ->
	      let <Split> =
		  %% Line 1053
		  [[Drv|[58|[47]]]|Acc]
	      in  %% Line 1054
		  apply 'abs_name2'/2
		      (Split, [])
	  %% Line 1055
	  <[47],Acc> when 'true' ->
	      let <Split> =
		  %% Line 1056
		  [[47]|Acc]
	      in  %% Line 1057
		  apply 'abs_name2'/2
		      (Split, [])
	  %% Line 1058
	  <Dir,Acc> when 'true' ->
	      let <_cor5> =
		  %% Line 1059
		  call 'filename':'dirname'
		      (Dir)
	      in  let <_cor4> =
		      %% Line 1059
		      call 'filename':'basename'
			  (Dir)
		  in  %% Line 1059
		      apply 'abs_name1'/2
			  (_cor5, [_cor4|Acc])
	end
'abs_name2'/2 =
    %% Line 1061
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[[46|[46]]|T],[_cor5|Acc]> when 'true' ->
	      %% Line 1062
	      apply 'abs_name2'/2
		  (T, Acc)
	  %% Line 1063
	  <[[46]|T],Acc> when 'true' ->
	      %% Line 1064
	      apply 'abs_name2'/2
		  (T, Acc)
	  %% Line 1065
	  <[H|T],Acc> when 'true' ->
	      %% Line 1066
	      apply 'abs_name2'/2
		  (T, [H|Acc])
	  %% Line 1067
	  <[],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 1068
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 1068
		  call 'filename':'join'
		      (_cor2)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'abs_name2',2}}] )
	    -| ['compiler_generated'] )
	end
'open_url'/3 =
    %% Line 1070
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'iexplore',Args,URL> when 'true' ->
	      %% Line 1071
	      case call 'win32reg':'open'
		       (['read']) of
		<{'ok',R}> when 'true' ->
		    %% Line 1072
		    case call 'win32reg':'change_key'
			     (R, [97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[115|[92|[105|[101|[120|[112|[108|[111|[114|[101|[46|[101|[120|[101|[92|[115|[104|[101|[108|[108|[92|[111|[112|[101|[110|[92|[99|[111|[109|[109|[97|[110|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) of
		      <'ok'> when 'true' ->
			  do  %% Line 1073
			      case call 'win32reg':'values'
				       (R) of
				%% Line 1074
				<{'ok',Paths}> when 'true' ->
				    let <Path> =
					%% Line 1075
					call 'proplists':'get_value'
					    ('default', Paths)
				    in  %% Line 1076
					case call 'string':'tokens'
						 (Path, [37]) of
					  <[Cmd|_cor21]> when 'true' ->
					      let <_cor7> =
						  %% Line 1077
						  [32|URL]
					      in  let <_cor8> =
						      %% Line 1077
						      call 'erlang':'++'
							  (Args, _cor7)
						  in  let <_cor9> =
							  %% Line 1077
							  [32|_cor8]
						      in  let <Cmd1> =
							      %% Line 1077
							      call 'erlang':'++'
								  (Cmd, _cor9)
							  in  do  %% Line 1078
								  call 'io':'format'
								      ('user', [126|[110|[79|[112|[101|[110|[105|[110|[103|[32|[126|[116|[115|[32|[119|[105|[116|[104|[32|[99|[111|[109|[109|[97|[110|[100|[58|[126|[110|[32|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [URL|[Cmd1|[]]])
								  %% Line 1079
								  call 'erlang':'open_port'
								      ({'spawn',Cmd1}, [])
					  ( <_cor6> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor6})
					    -| ['compiler_generated'] )
					end
				%% Line 1080
				<_cor22> when 'true' ->
				    %% Line 1081
				    call 'io':'format'
					([126|[110|[78|[111|[32|[112|[97|[116|[104|[32|[116|[111|[32|[105|[101|[120|[112|[108|[111|[114|[101|[46|[101|[120|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
			      end
			      do  %% Line 1083
				  call 'win32reg':'close'
				      (R)
				  %% Line 1084
				  'ok'
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1086
	  <Prog,Args,URL> when 'true' ->
	      let <_cor12> =
		  %% Line 1087
		  case <> of
		    <>
			when call 'erlang':'is_atom'
			      (Prog) ->
			call 'erlang':'atom_to_list'
			    (Prog)
		    %% Line 1088
		    <>
			when call 'erlang':'is_list'
			      (Prog) ->
			Prog
		    ( <> when 'true' ->
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor14> =
		      %% Line 1090
		      [32|URL]
		  in  let <_cor15> =
			  %% Line 1090
			  call 'erlang':'++'
			      (Args, _cor14)
		      in  let <_cor16> =
			      %% Line 1090
			      [32|_cor15]
			  in  let <Cmd> =
				  %% Line 1090
				  call 'erlang':'++'
				      (_cor12, _cor16)
			      in  do  %% Line 1091
				      call 'io':'format'
					  ('user', [126|[110|[79|[112|[101|[110|[105|[110|[103|[32|[126|[116|[115|[32|[119|[105|[116|[104|[32|[99|[111|[109|[109|[97|[110|[100|[58|[126|[110|[32|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [URL|[Cmd|[]]])
				      do  %% Line 1092
					  call 'erlang':'open_port'
					      ({'spawn',Cmd}, [])
					  %% Line 1093
					  'ok'
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('ct_util')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('ct_util', _cor0)
end