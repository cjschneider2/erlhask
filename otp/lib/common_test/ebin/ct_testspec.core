module 'ct_testspec' ['collect_tests_from_file'/2,
		      'collect_tests_from_file'/3,
		      'collect_tests_from_list'/2,
		      'collect_tests_from_list'/3,
		      'module_info'/0,
		      'module_info'/1,
		      'prepare_tests'/1,
		      'prepare_tests'/2]
    attributes []
'prepare_tests'/2 =
    %% Line 50
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <TestSpec = {'testspec',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34},Node>
	      when %% Line 51
		call 'erlang':'is_atom'
		    (Node) ->
	      let <_cor3> =
		  %% Line 52
		  apply 'prepare_tests'/1
		      (TestSpec)
	      in  %% Line 52
		  case call 'lists':'keysearch'
			   (Node, 1, _cor3) of
		    %% Line 53
		    <{'value',{_cor35,Run,Skip}}>
			when call 'erlang':'=:='
			      (_cor35,
			       Node) ->
			%% Line 54
			{Run,Skip}
		    %% Line 55
		    <'false'> when 'true' ->
			%% Line 56
			{[],[]}
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'prepare_tests',2}}] )
	    -| ['compiler_generated'] )
	end
'prepare_tests'/1 =
    %% Line 66
    fun (_cor0) ->
	case _cor0 of
	  <TestSpec = {'testspec',_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54}> when ( 'true'
																													       -| ['compiler_generated'] ) ->
	      %% Line 69
	      case apply 'get_run_and_skip'/3
		       (_cor53, [], []) of
		<{Run,Skip}> when 'true' ->
		    let <_cor8> =
			%% Line 71
			( fun (_cor6) ->
			      {_cor6,{[],[]}}
			  -| [{'id',{0,0,'-prepare_tests/1-fun-0-'}}] )
		    in  let <_cor5> =
			    %% Line 71
			    apply 'list_nodes'/1
				(TestSpec)
			in  let <NodeList> =
				%% Line 71
				call 'lists':'map'
				    (_cor8, _cor5)
			    in  let <NodeList1> =
				    %% Line 73
				    apply 'run_per_node'/3
					(Run, NodeList, _cor54)
				in  let <NodeList2> =
					%% Line 76
					apply 'skip_per_node'/2
					    (Skip, NodeList1)
				    in  let <_cor24> =
					    %% Line 79
					    ( fun (_cor22) ->
						  case _cor22 of
						    <{Node,{Run1,Skip1}}> when 'true' ->
							let <_cor16> =
							    %% Line 80
							    ( fun (_cor14) ->
								  case _cor14 of
								    <{D,{Ss,Cs}}> when 'true' ->
									%% Line 81
									{D,Ss,Cs}
								    ( <_cor15> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_cor15})
									    -| [{'function_name',{'-prepare_tests/1-fun-1-',1}}] )
								      -| ['compiler_generated'] )
								  end
							      -| [{'id',{0,0,'-prepare_tests/1-fun-1-'}}] )
							in  let <Run2> =
								%% Line 80
								call 'lists':'map'
								    (_cor16, %% Line 82
									     Run1)
							    in  let <_cor20> =
								    %% Line 83
								    ( fun (_cor18) ->
									  case _cor18 of
									    <{D,{Ss,Cmt}}> when 'true' ->
										%% Line 84
										{D,Ss,Cmt}
									    %% Line 85
									    <{D,{S,Cs,Cmt}}> when 'true' ->
										%% Line 86
										{D,S,Cs,Cmt}
									    ( <_cor19> when 'true' ->
										  ( primop 'match_fail'
											({'function_clause',_cor19})
										    -| [{'function_name',{'-prepare_tests/1-fun-2-',1}}] )
									      -| ['compiler_generated'] )
									  end
								      -| [{'id',{0,0,'-prepare_tests/1-fun-2-'}}] )
								in  let <Skip2> =
									%% Line 83
									call 'lists':'map'
									    (_cor20, %% Line 87
										     Skip1)
								    in  %% Line 88
									{Node,Run2,Skip2}
						    ( <_cor23> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor23})
							    -| [{'function_name',{'-prepare_tests/1-fun-3-',1}}] )
						      -| ['compiler_generated'] )
						  end
					      -| [{'id',{0,0,'-prepare_tests/1-fun-3-'}}] )
					in  %% Line 79
					    call 'lists':'map'
						(_cor24, %% Line 89
							 NodeList2)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26})
		  -| [{'function_name',{'prepare_tests',1}}] )
	    -| ['compiler_generated'] )
	end
'run_per_node'/3 =
    %% Line 95
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{{Node,Dir},Test}|Ts],Result,MergeTests> when 'true' ->
	      %% Line 96
	      case call 'lists':'keysearch'
		       (Node, 1, Result) of
		<{'value',{_cor11,{Run,Skip}}}>
		    when call 'erlang':'=:='
			  (_cor11,
			   Node) ->
		    let <_cor5> =
			%% Line 97
			case MergeTests of
			  %% Line 98
			  <'false'> when 'true' ->
			      %% Line 99
			      apply 'append'/2
				  ({Dir,Test}, Run)
			  %% Line 100
			  <'true'> when 'true' ->
			      %% Line 101
			      apply 'merge_tests'/3
				  (Dir, Test, Run)
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor4})
			    -| ['compiler_generated'] )
			end
		    in  let <_cor7> =
			    %% Line 103
			    apply 'insert_in_order'/2
				({Node,{_cor5,Skip}}, Result)
			in  %% Line 103
			    apply 'run_per_node'/3
				(Ts, _cor7, %% Line 104
					    MergeTests)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 105
	  <[],Result,_cor12> when 'true' ->
	      %% Line 106
	      Result
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'run_per_node',3}}] )
	    -| ['compiler_generated'] )
	end
'merge_tests'/3 =
    %% Line 108
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Dir,Test = {'all',_cor16},TestDirs> when 'true' ->
	      let <_cor5> =
		  %% Line 110
		  ( fun (_cor3) ->
			case _cor3 of
			  <{D,_cor17}>
			      when call 'erlang':'=='
				    (D,
				     Dir) ->
			      %% Line 111
			      'false'
			  %% Line 112
			  <_cor18> when 'true' ->
			      %% Line 113
			      'true'
			end
		    -| [{'id',{0,0,'-merge_tests/3-fun-0-'}}] )
	      in  let <TestDirs1> =
		      %% Line 110
		      call 'lists':'filter'
			  (_cor5, %% Line 114
				  TestDirs)
		  in  %% Line 115
		      apply 'insert_in_order'/2
			  ({Dir,Test}, TestDirs1)
	  %% Line 116
	  <Dir,Test = {Suite,'all'},TestDirs> when 'true' ->
	      let <_cor11> =
		  %% Line 117
		  ( fun (_cor9) ->
			case _cor9 of
			  <{D,{S,_cor19}}>
			      when let <_cor7> =
				    call 'erlang':'=='
					(D, Dir)
				in  let <_cor8> =
					call 'erlang':'=='
					    (S, Suite)
				    in  call 'erlang':'and'
					    (_cor7, _cor8) ->
			      %% Line 118
			      'false'
			  %% Line 119
			  <_cor20> when 'true' ->
			      %% Line 120
			      'true'
			end
		    -| [{'id',{0,0,'-merge_tests/3-fun-1-'}}] )
	      in  let <TestDirs1> =
		      %% Line 117
		      call 'lists':'filter'
			  (_cor11, %% Line 121
				   TestDirs)
		  in  %% Line 122
		      call 'erlang':'++'
			  (TestDirs1, [{Dir,Test}|[]])
	  %% Line 123
	  <Dir,Test,TestDirs> when 'true' ->
	      %% Line 124
	      apply 'merge_suites'/3
		  (Dir, Test, TestDirs)
	end
'merge_suites'/3 =
    %% Line 126
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Dir,{Suite,Cases},[{_cor8,{_cor9,Cases0}}|Dirs]>
	      when let <_cor10> =
		    call 'erlang':'=:='
			(_cor8, Dir)
		in  let <_cor11> =
			call 'erlang':'=:='
			    (_cor9, Suite)
		    in  call 'erlang':'and'
			    (_cor10, _cor11) ->
	      let <Cases1> =
		  %% Line 127
		  apply 'insert_in_order'/2
		      (Cases, Cases0)
	      in  %% Line 128
		  [{Dir,{Suite,Cases1}}|Dirs]
	  %% Line 129
	  <Dir,Test,[Other|Dirs]> when 'true' ->
	      let <_cor4> =
		  %% Line 130
		  apply 'merge_suites'/3
		      (Dir, Test, Dirs)
	      in  %% Line 130
		  [Other|_cor4]
	  %% Line 131
	  <Dir,Test,[]> when 'true' ->
	      %% Line 132
	      [{Dir,Test}|[]]
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'merge_suites',3}}] )
	    -| ['compiler_generated'] )
	end
'skip_per_node'/2 =
    %% Line 137
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{{Node,Dir},Test}|Ts],Result> when 'true' ->
	      %% Line 138
	      case call 'lists':'keysearch'
		       (Node, 1, Result) of
		<{'value',{_cor7,{Run,Skip}}}>
		    when call 'erlang':'=:='
			  (_cor7,
			   Node) ->
		    let <Skip1> =
			%% Line 139
			[{Dir,Test}|Skip]
		    in  let <_cor4> =
			    %% Line 140
			    apply 'insert_in_order'/2
				({Node,{Run,Skip1}}, Result)
			in  %% Line 140
			    apply 'skip_per_node'/2
				(Ts, _cor4)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 141
	  <[],Result> when 'true' ->
	      %% Line 142
	      Result
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'skip_per_node',2}}] )
	    -| ['compiler_generated'] )
	end
'get_run_and_skip'/3 =
    %% Line 156
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{{Node,Dir},Suites}|Tests],Run,Skip> when 'true' ->
	      let <_cor4> =
		  catch
		      let <_cor3> =
			  %% Line 157
			  call 'erlang':'hd'
			      (Suites)
		      in  %% Line 157
			  call 'erlang':'element'
			      (1, _cor3)
	      in  let <TestDir> =
		      %% Line 157
		      call 'ct_util':'get_testdir'
			  (Dir, _cor4)
		  in  %% Line 158
		      case call 'lists':'keysearch'
			       ('all', 1, Suites) of
			%% Line 159
			<{'value',_cor16}> when 'true' ->
			    let <Skipped> =
				%% Line 160
				apply 'get_skipped_suites'/3
				    (Node, TestDir, Suites)
			    in  %% Line 163
				apply 'get_run_and_skip'/3
				    (Tests, %% Line 164
					    [[{{Node,TestDir},{'all','all'}}|[]]|Run], %% Line 165
										       [Skipped|Skip])
			%% Line 166
			<'false'> when 'true' ->
			    %% Line 167
			    case apply 'prepare_suites'/5
				     (Node, TestDir, Suites, [], []) of
			      <{R,S}> when 'true' ->
				  %% Line 168
				  apply 'get_run_and_skip'/3
				      (Tests, [R|Run], [S|Skip])
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
			( <_cor8> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor8})
			  -| ['compiler_generated'] )
		      end
	  %% Line 170
	  <[],Run,Skip> when 'true' ->
	      let <_cor11> =
		  %% Line 171
		  call 'lists':'reverse'
		      (Run)
	      in  let <_cor12> =
		      %% Line 171
		      call 'lists':'flatten'
			  (_cor11)
		  in  let <_cor9> =
			  %% Line 172
			  call 'lists':'reverse'
			      (Skip)
		      in  let <_cor10> =
			      %% Line 172
			      call 'lists':'flatten'
				  (_cor9)
			  in  %% Line 171
			      {_cor12,_cor10}
	  ( <_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13})
		  -| [{'function_name',{'get_run_and_skip',3}}] )
	    -| ['compiler_generated'] )
	end
'prepare_suites'/5 =
    %% Line 174
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Node,Dir,[{Suite,Cases}|Suites],Run,Skip> when 'true' ->
	      %% Line 175
	      case call 'lists':'member'
		       ('all', Cases) of
		%% Line 176
		<'true'> when 'true' ->
		    let <Skipped> =
			%% Line 177
			apply 'get_skipped_cases'/4
			    (Node, Dir, Suite, Cases)
		    in  %% Line 179
			apply 'prepare_suites'/5
			    (Node, Dir, Suites, %% Line 180
						[[{{Node,Dir},{Suite,'all'}}|[]]|Run], %% Line 181
										       [Skipped|Skip])
		%% Line 182
		<'false'> when 'true' ->
		    %% Line 183
		    case apply 'prepare_cases'/4
			     (Node, Dir, Suite, Cases) of
		      <{RL,SL}> when 'true' ->
			  %% Line 184
			  apply 'prepare_suites'/5
			      (Node, Dir, Suites, [RL|Run], [SL|Skip])
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 186
	  <_X_Node,_X_Dir,[],Run,Skip> when 'true' ->
	      let <_cor10> =
		  %% Line 187
		  call 'lists':'reverse'
		      (Run)
	      in  let <_cor11> =
		      %% Line 187
		      call 'lists':'flatten'
			  (_cor10)
		  in  let <_cor8> =
			  %% Line 188
			  call 'lists':'reverse'
			      (Skip)
		      in  let <_cor9> =
			      %% Line 188
			      call 'lists':'flatten'
				  (_cor8)
			  in  %% Line 187
			      {_cor11,_cor9}
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'prepare_suites',5}}] )
	    -| ['compiler_generated'] )
	end
'prepare_cases'/4 =
    %% Line 190
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 191
	case apply 'get_skipped_cases'/4
		 (_cor3, _cor2, _cor1, _cor0) of
	  %% Line 192
	  <SkipAll = [{{_cor17,_cor18},{_cor19,_X_Cmt}}|[]]>
	      when let <_cor22> =
		    call 'erlang':'=:='
			(_cor17, _cor3)
		in  let <_cor20> =
			call 'erlang':'=:='
			    (_cor18, _cor2)
		    in  let <_cor21> =
			    call 'erlang':'=:='
				(_cor19, _cor1)
			in  let <_cor23> =
				call 'erlang':'and'
				    (_cor20, _cor21)
			    in  call 'erlang':'and'
				    (_cor22, _cor23) ->
	      %% Line 194
	      {[{{_cor3,_cor2},{_cor1,'all'}}|[]],SkipAll}
	  %% Line 195
	  <Skipped> when 'true' ->
	      let <_cor10> =
		  %% Line 197
		  ( fun (_cor7,_cor6) ->
			case <_cor7,_cor6> of
			  <{{G,Cs},{'skip',_X_Cmt}},Acc>
			      when %% Line 198
				call 'erlang':'is_atom'
				    (G) ->
			      %% Line 199
			      case call 'lists':'keymember'
				       (G, 1, _cor0) of
				%% Line 200
				<'true'> when 'true' ->
				    %% Line 201
				    Acc
				%% Line 202
				<'false'> when 'true' ->
				    %% Line 203
				    [{'skipped',G,Cs}|Acc]
				( <_cor4> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor4})
				  -| ['compiler_generated'] )
			      end
			  %% Line 205
			  <{C,{'skip',_X_Cmt}},Acc> when 'true' ->
			      %% Line 206
			      case call 'lists':'member'
				       (C, _cor0) of
				%% Line 207
				<'true'> when 'true' ->
				    %% Line 208
				    Acc
				%% Line 209
				<'false'> when 'true' ->
				    %% Line 210
				    [C|Acc]
				( <_cor5> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor5})
				  -| ['compiler_generated'] )
			      end
			  %% Line 212
			  <C,Acc> when 'true' ->
			      [C|Acc]
			end
		    -| [{'id',{0,0,'-prepare_cases/4-fun-0-'}}] )
	      in  let <PrepC> =
		      %% Line 197
		      call 'lists':'foldr'
			  (_cor10, %% Line 213
				   [], _cor0)
		  in  %% Line 214
		      {{{_cor3,_cor2},{_cor1,PrepC}},Skipped}
	end
'get_skipped_suites'/3 =
    %% Line 217
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 218
	    apply 'get_skipped_suites1'/3
		(_cor2, _cor1, _cor0)
	in  %% Line 218
	    call 'lists':'flatten'
		(_cor3)
'get_skipped_suites1'/3 =
    %% Line 220
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Node,Dir,[{Suite,Cases}|Suites]> when 'true' ->
	      let <SkippedCases> =
		  %% Line 221
		  apply 'get_skipped_cases'/4
		      (Node, Dir, Suite, Cases)
	      in  let <_cor4> =
		      %% Line 222
		      apply 'get_skipped_suites1'/3
			  (Node, Dir, Suites)
		  in  %% Line 222
		      [SkippedCases|_cor4]
	  %% Line 223
	  <_cor8,_cor9,[]> when 'true' ->
	      %% Line 224
	      []
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'get_skipped_suites1',3}}] )
	    -| ['compiler_generated'] )
	end
'get_skipped_cases'/4 =
    %% Line 226
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 227
	case call 'lists':'keysearch'
		 ('all', 1, _cor0) of
	  %% Line 228
	  <{'value',{'all',{'skip',Cmt}}}> when 'true' ->
	      %% Line 229
	      [{{_cor3,_cor2},{_cor1,Cmt}}|[]]
	  %% Line 230
	  <_cor9> when 'true' ->
	      %% Line 231
	      apply 'get_skipped_cases1'/4
		  (_cor3, _cor2, _cor1, _cor0)
	end
'get_skipped_cases1'/4 =
    %% Line 234
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Node,Dir,Suite,[{Case,{'skip',Cmt}}|Cs]> when 'true' ->
	      let <_cor4> =
		  %% Line 235
		  apply 'get_skipped_cases1'/4
		      (Node, Dir, Suite, Cs)
	      in  %% Line 235
		  [{{Node,Dir},{Suite,Case,Cmt}}|_cor4]
	  %% Line 236
	  <Node,Dir,Suite,[_X_Case|Cs]> when 'true' ->
	      %% Line 237
	      apply 'get_skipped_cases1'/4
		  (Node, Dir, Suite, Cs)
	  %% Line 238
	  <_cor9,_cor10,_cor11,[]> when 'true' ->
	      %% Line 239
	      []
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'get_skipped_cases1',4}}] )
	    -| ['compiler_generated'] )
	end
'collect_tests_from_file'/2 =
    %% Line 243
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 244
	    call 'erlang':'node'
		()
	in  %% Line 244
	    apply 'collect_tests_from_file'/3
		(_cor1, [_cor2|[]], _cor0)
'collect_tests_from_file'/3 =
    %% Line 246
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Specs,Nodes,Relaxed>
	      when call 'erlang':'is_list'
		    (Nodes) ->
	      let <_cor5> =
		  %% Line 247
		  ( fun (_cor3) ->
			{'undefined',_cor3}
		    -| [{'id',{0,0,'-collect_tests_from_file/3-fun-0-'}}] )
	      in  let <NodeRefs> =
		      %% Line 247
		      call 'lists':'map'
			  (_cor5, Nodes)
		  in  let <Join,Specs1> =
			  %% Line 250
			  case <> of
			    <>
				when try
				      let <_cor7> =
					  call 'erlang':'hd'
					      (Specs)
				      in  let <_cor8> =
					      call 'erlang':'hd'
						  (_cor7)
					  in  call 'erlang':'is_list'
						  (_cor8)
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false' ->
				let <_cor9> =
				    call 'erlang':'hd'
					(Specs)
				in  <'true',_cor9>
			    %% Line 251
			    <> when 'true' ->
				<'false',Specs>
			  end
		      in  let <_cor17> =
			      %% Line 253
			      ( letrec
				    'lc$^0'/1 =
					fun (_cor14) ->
					    case _cor14 of
					      <[S|_cor13]> when 'true' ->
						  let <_cor15> =
						      call 'filename':'absname'
							  (S)
						  in  let <_cor16> =
							  apply 'lc$^0'/1
							      (_cor13)
						      in  ( [_cor15|_cor16]
							    -| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor14> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor14})
						      -| [{'function_name',{'lc$^0',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^0'/1
					(Specs1)
				-| ['list_comprehension'] )
			  in  let <TS0> =
				  %% Line 254
				  {'testspec','undefined',NodeRefs,[],[],[],[[46]],[],[],[],[],[],[],[],[],[],[],'true','false',[],[],[],[],[],[],[],[],[],'true'}
			      in  %% Line 256
				  try
				      apply 'create_testspecs'/4
					  (_cor17, TS0, Relaxed, Join)
				  of <_cor20> ->
				      case _cor20 of
					%% Line 257
					<{{[],_cor30},SeparateTestSpecs}> when 'true' ->
					    %% Line 258
					    apply 'filter_and_convert'/1
						(SeparateTestSpecs)
					%% Line 259
					<{{_cor31,{'testspec',_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,[],_cor58}},SeparateTestSpecs}> when 'true' ->
					    %% Line 260
					    apply 'filter_and_convert'/1
						(SeparateTestSpecs)
					%% Line 261
					<{Joined,SeparateTestSpecs}> when 'true' ->
					    let <_cor21> =
						%% Line 262
						apply 'filter_and_convert'/1
						    (Joined)
					    in  let <_cor22> =
						    %% Line 263
						    apply 'filter_and_convert'/1
							(SeparateTestSpecs)
						in  %% Line 262
						    [_cor21|_cor22]
					( <_cor23> when 'true' ->
					      primop 'match_fail'
						  ({'try_clause',_cor23})
					  -| ['compiler_generated'] )
				      end
				  catch <_cor26,_cor25,_cor24> ->
				      case <_cor26,_cor25,_cor24> of
					%% Line 265
					<_cor59,Error = {'error',_cor60},_cor61> when 'true' ->
					    %% Line 266
					    Error
					%% Line 267
					<_cor62,Error,_cor63> when 'true' ->
					    %% Line 268
					    {'error',Error}
				      end
	  ( <_cor29,_cor28,_cor27> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29,_cor28,_cor27})
		  -| [{'function_name',{'collect_tests_from_file',3}}] )
	    -| ['compiler_generated'] )
	end
'filter_and_convert'/1 =
    %% Line 271
    fun (_cor0) ->
	case _cor0 of
	  <Joined>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 272
		  apply 'filter_and_convert'/1
		      ([Joined|[]])
	      in  %% Line 272
		  call 'erlang':'hd'
		      (_cor1)
	  %% Line 273
	  <[{_cor16,{'testspec',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,[],_cor43}}|TSs]> when 'true' ->
	      %% Line 274
	      apply 'filter_and_convert'/1
		  (TSs)
	  %% Line 275
	  <[{[{SpecFile,MergeTests}|SMs],TestSpec}|TSs]> when 'true' ->
	      %% Line 276
	      case TestSpec of
		<{'testspec',_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,CfgFiles,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70}> when 'true' ->
		    let <_rec2> =
			%% Line 277
			apply 'delete_dups'/1
			    (CfgFiles)
		    in  let <_cor5> =
			    %% Line 278
			    call 'erlang':'setelement'
				(29, TestSpec, MergeTests)
			in  let <_cor7> =
				%% Line 277
				call 'erlang':'setelement'
				    (14, _cor5, _rec2)
			    in  let <_cor13> =
				    %% Line 281
				    ( letrec
					  'lc$^0'/1 =
					      fun (_cor11) ->
						  case _cor11 of
						    <[{SF,_cor100}|_cor10]> when 'true' ->
							let <_cor12> =
							    apply 'lc$^0'/1
								(_cor10)
							in  ( [SF|_cor12]
							      -| ['compiler_generated'] )
						    ( <[_cor9|_cor10]> when 'true' ->
							  apply 'lc$^0'/1
							      (_cor10)
						      -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_cor11> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor11})
							    -| [{'function_name',{'lc$^0',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  apply 'lc$^0'/1
					      (SMs)
				      -| ['list_comprehension'] )
				in  let <_cor14> =
					%% Line 281
					apply 'filter_and_convert'/1
					    (TSs)
				    in  %% Line 281
					[{[SpecFile|_cor13],_cor7}|_cor14]
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 282
	  <[]> when 'true' ->
	      %% Line 283
	      []
	  ( <_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15})
		  -| [{'function_name',{'filter_and_convert',1}}] )
	    -| ['compiler_generated'] )
	end
'delete_dups'/1 =
    %% Line 285
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 286
	    call 'lists':'reverse'
		(_cor0)
	in  %% Line 286
	    apply 'delete_dups1'/2
		(_cor1, [])
'delete_dups1'/2 =
    %% Line 288
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[E|Es],Keep> when 'true' ->
	      %% Line 289
	      case call 'lists':'member'
		       (E, Es) of
		%% Line 290
		<'true'> when 'true' ->
		    %% Line 291
		    apply 'delete_dups1'/2
			(Es, Keep)
		%% Line 292
		<'false'> when 'true' ->
		    %% Line 293
		    apply 'delete_dups1'/2
			(Es, [E|Keep])
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 295
	  <[],Keep> when 'true' ->
	      %% Line 296
	      Keep
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'delete_dups1',2}}] )
	    -| ['compiler_generated'] )
	end
'create_testspecs'/4 =
    %% Line 298
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <SpecsTree> =
	    %% Line 302
	    apply 'create_spec_tree'/4
		(_cor3, _cor2, _cor0, [])
	in  %% Line 303
	    apply 'create_specs'/4
		(SpecsTree, _cor2, _cor2, _cor1)
'create_spec_tree'/4 =
    %% Line 305
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Spec|Specs],TS,JoinWithNext,Known> when 'true' ->
	      let <_cor4> =
		  %% Line 306
		  call 'filename':'absname'
		      (Spec)
	      in  let <SpecDir> =
		      %% Line 306
		      call 'filename':'dirname'
			  (_cor4)
		  in  %% Line 307
		      case TS of
			<{'testspec',_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52}> when 'true' ->
			    let <_cor8> =
				call 'erlang':'setelement'
				    (2, TS, SpecDir)
			    in  let <SpecAbsName> =
				    %% Line 308
				    apply 'get_absfile'/2
					(Spec, _cor8)
				in  %% Line 309
				    case call 'lists':'member'
					     (SpecAbsName, Known) of
				      %% Line 310
				      <'true'> when 'true' ->
					  %% Line 311
					  call 'erlang':'throw'
					      ({'error',{'cyclic_reference',SpecAbsName}})
				      %% Line 312
				      <'false'> when 'true' ->
					  %% Line 313
					  case call 'file':'consult'
						   (SpecAbsName) of
					    %% Line 314
					    <{'ok',Terms}> when 'true' ->
						let <Terms1> =
						    %% Line 315
						    apply 'replace_names'/1
							(Terms)
						in  %% Line 316
						    case apply 'get_included_specs'/2
							     (Terms1, _cor8) of
						      <{InclJoin,InclSep}> when 'true' ->
							  let <_cor15> =
							      %% Line 318
							      apply 'create_spec_tree'/4
								  (InclJoin, TS, 'true', [SpecAbsName|Known])
							  in  let <_cor14> =
								  %% Line 319
								  apply 'create_spec_tree'/4
								      (InclSep, TS, 'false', [SpecAbsName|Known])
							      in  let <_cor13> =
								      %% Line 321
								      apply 'create_spec_tree'/4
									  (Specs, TS, JoinWithNext, Known)
								  in  %% Line 317
								      {SpecAbsName,Terms1,_cor15,_cor14,%% Line 320
													JoinWithNext,_cor13}
						      ( <_cor12> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor12})
							-| ['compiler_generated'] )
						    end
					    %% Line 322
					    <{'error',Reason}> when 'true' ->
						let <_cor16> =
						    %% Line 325
						    call 'file':'format_error'
							(Reason)
						in  let <_cor17> =
							%% Line 324
							call 'io_lib':'format'
							    ([126|[115]], %% Line 325
									  [_cor16|[]])
						    in  let <ReasonStr> =
							    %% Line 324
							    call 'lists':'flatten'
								(_cor17)
							in  %% Line 326
							    call 'erlang':'throw'
								({'error',{SpecAbsName,ReasonStr}})
					    ( <_cor19> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor19})
					      -| ['compiler_generated'] )
					  end
				      ( <_cor20> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor20})
					-| ['compiler_generated'] )
				    end
			( <_cor53> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','testspec'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 329
	  <[],_X_TS,_X_JoinWithNext,_X_Known> when 'true' ->
	      %% Line 330
	      []
	  ( <_cor24,_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23,_cor22,_cor21})
		  -| [{'function_name',{'create_spec_tree',4}}] )
	    -| ['compiler_generated'] )
	end
'create_specs'/4 =
    %% Line 332
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{Spec,Terms,InclJoin,InclSep,JoinWithNext,NextSpec},%% Line 333
							       TestSpec,%% Line 333
									TestSpec0,%% Line 333
										  Relaxed> when 'true' ->
	      let <_cor4> =
		  %% Line 334
		  call 'filename':'absname'
		      (Spec)
	      in  let <SpecDir> =
		      %% Line 334
		      call 'filename':'dirname'
			  (_cor4)
		  in  %% Line 335
		      case TestSpec of
			<{'testspec',_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66}> when 'true' ->
			    let <_cor8> =
				call 'erlang':'setelement'
				    (2, TestSpec, SpecDir)
			    in  let <TestSpec1> =
				    apply 'create_spec'/4
					(Terms, _cor8, %% Line 336
						       JoinWithNext, %% Line 336
								     Relaxed)
				in  %% Line 338
				    case apply 'create_specs'/4
					     (InclJoin, TestSpec1, %% Line 339
								   TestSpec0, %% Line 339
									      Relaxed) of
				      <{{JoinSpecs1,JoinTS1},Separate1}> when 'true' ->
					  let <_cor12> =
					      %% Line 342
					      case JoinWithNext of
						%% Line 343
						<'true'> when 'true' ->
						    %% Line 344
						    apply 'create_specs'/4
							(NextSpec, JoinTS1, %% Line 345
									    TestSpec0, %% Line 345
										       Relaxed)
						%% Line 346
						<'false'> when 'true' ->
						    %% Line 347
						    {{[],JoinTS1},[]}
						( <_cor11> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor11})
						  -| ['compiler_generated'] )
					      end
					  in  %% Line 341
					      case _cor12 of
						<{{JoinSpecs2,JoinTS2},Separate2}> when 'true' ->
						    %% Line 349
						    case apply 'create_specs'/4
							     (InclSep, TestSpec0, %% Line 350
										  TestSpec0, %% Line 350
											     Relaxed) of
						      <{SepJoinSpecs,Separate3}> when 'true' ->
							  let <_cor16> =
							      %% Line 352
							      case JoinWithNext of
								%% Line 353
								<'true'> when 'true' ->
								    %% Line 354
								    {{[],TestSpec},[]}
								%% Line 355
								<'false'> when 'true' ->
								    %% Line 356
								    apply 'create_specs'/4
									(NextSpec, TestSpec0, %% Line 357
											      TestSpec0, %% Line 357
													 Relaxed)
								( <_cor15> when 'true' ->
								      primop 'match_fail'
									  ({'case_clause',_cor15})
								  -| ['compiler_generated'] )
							      end
							  in  %% Line 351
							      case _cor16 of
								<{SepJoinSpecs1,Separate4}> when 'true' ->
								    %% Line 360
								    ( case TestSpec1 of
									( <( {'testspec',_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_rec6}
									     -| ['compiler_generated'] )> when 'true' ->
									      let <SpecInfo> = {Spec,_rec6}
									      in  let <_cor30> =
										      %% Line 362
										      ( letrec
											    'lc$^0'/1 =
												fun (_cor28) ->
												    case _cor28 of
												      <[TSData = {Ss,_X_TS}|_cor22]>
													  when %% Line 365
													    call 'erlang':'=/='
														(Ss,
														 []) ->
													  let <_cor29> =
													      apply 'lc$^0'/1
														  (_cor22)
													  in  ( [TSData|_cor29]
														-| ['compiler_generated'] )
												      ( <[_cor21|_cor22]> when 'true' ->
													    apply 'lc$^0'/1
														(_cor22)
													-| ['compiler_generated'] )
												      <[]> when 'true' ->
													  []
												      ( <_cor28> when 'true' ->
													    ( primop 'match_fail'
														  ({'function_clause',_cor28})
													      -| [{'function_name',{'lc$^0',1}}] )
													-| ['compiler_generated'] )
												    end
											in  let <_cor23> =
												%% Line 364
												[SepJoinSpecs1|Separate4]
											    in  let <_cor24> =
												    %% Line 363
												    call 'erlang':'++'
													(Separate2, _cor23)
												in  let <_cor25> =
													%% Line 363
													[SepJoinSpecs|_cor24]
												    in  let <_cor26> =
													    call 'erlang':'++'
														(Separate1, _cor25)
													in  let <_cor27> =
														call 'erlang':'++'
														    (Separate3, _cor26)
													    in  apply 'lc$^0'/1
														    (_cor27)
											-| ['list_comprehension'] )
										  in  %% Line 366
										      case <JoinWithNext,JoinSpecs1> of
											%% Line 367
											<'true',_cor96> when 'true' ->
											    let <_cor32> =
												%% Line 368
												call 'erlang':'++'
												    (JoinSpecs1, JoinSpecs2)
											    in  %% Line 368
												{{[SpecInfo|_cor32],JoinTS2},_cor30}
											%% Line 370
											<'false',[]> when 'true' ->
											    %% Line 371
											    {{[],TestSpec},%% Line 372
													   [{[SpecInfo|[]],TestSpec1}|_cor30]}
											%% Line 373
											<'false',_cor97> when 'true' ->
											    let <_cor33> =
												%% Line 374
												call 'erlang':'++'
												    (JoinSpecs1, JoinSpecs2)
											    in  %% Line 374
												{{[SpecInfo|_cor33],JoinTS2},_cor30}
											( <_fol191,_fol192> when 'true' ->
											      let <_cor34> = {_fol191,_fol192}
											      in  primop 'match_fail'
												      ({'case_clause',_cor34})
											  -| ['compiler_generated'] )
										      end
									  -| ['compiler_generated'] )
									( <_cor95> when 'true' ->
									      ( call ( 'erlang'
										       -| ['compiler_generated'] ):( 'error'
														     -| ['compiler_generated'] )
										    (( {'badrecord','testspec'}
										       -| ['compiler_generated'] ))
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								      end
								      -| ['compiler_generated'] )
								( <_cor17> when 'true' ->
								      primop 'match_fail'
									  ({'badmatch',_cor17})
								  -| ['compiler_generated'] )
							      end
						      ( <_cor14> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor14})
							-| ['compiler_generated'] )
						    end
						( <_cor13> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor13})
						  -| ['compiler_generated'] )
					      end
				      ( <_cor10> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor10})
					-| ['compiler_generated'] )
				    end
			( <_cor67> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','testspec'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 377
	  <[],TestSpec,_cor98,_X_Relaxed> when 'true' ->
	      %% Line 378
	      {{[],TestSpec},[]}
	  ( <_cor38,_cor37,_cor36,_cor35> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor38,_cor37,_cor36,_cor35})
		  -| [{'function_name',{'create_specs',4}}] )
	    -| ['compiler_generated'] )
	end
'create_spec'/4 =
    %% Line 380
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 382
	    case <> of
	      <>
		  when let <_cor4> =
			call 'erlang':'=:='
			    (_cor1, 'false')
		    in  let <_cor5> =
			    call 'erlang':'is_boolean'
				(_cor1)
			in  call 'erlang':'and'
				(_cor4, _cor5) ->
		  %% Line 383
		  [{'set_merge_tests','true'}|_cor3]
	      %% Line 384
	      <> when 'true' ->
		  %% Line 385
		  [{'set_merge_tests','false'}|_cor3]
	    end
	in  %% Line 387
	    case %% Line 388
		 apply 'collect_tests'/3
		     ({'false',_cor6}, _cor2, _cor0) of
	      <TS = {'testspec',_cor19,_cor20,_cor21,_cor22,_cor23,LogDirs,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,Tests,_cor44}> when 'true' ->
		  let <_cor9> =
		      %% Line 389
		      call 'lists':'delete'
			  ([46], LogDirs)
		  in  let <LogDirs1> =
			  %% Line 389
			  call 'erlang':'++'
			      (_cor9, [[46]])
		      in  let <_rec7> =
			      %% Line 390
			      call 'lists':'flatten'
				  (Tests)
			  in  let <_cor13> =
				  %% Line 390
				  call 'erlang':'setelement'
				      (28, TS, _rec7)
			      in  %% Line 391
				  call 'erlang':'setelement'
				      (7, _cor13, LogDirs1)
	      ( <_cor8> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor8})
		-| ['compiler_generated'] )
	    end
'collect_tests_from_list'/2 =
    %% Line 393
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 394
	    call 'erlang':'node'
		()
	in  %% Line 394
	    apply 'collect_tests_from_list'/3
		(_cor1, [_cor2|[]], _cor0)
'collect_tests_from_list'/3 =
    %% Line 396
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Terms,Nodes,Relaxed>
	      when call 'erlang':'is_list'
		    (Nodes) ->
	      %% Line 397
	      case call 'file':'get_cwd'
		       () of
		<{'ok',Cwd}> when 'true' ->
		    let <_cor6> =
			%% Line 398
			( fun (_cor4) ->
			      {'undefined',_cor4}
			  -| [{'id',{0,0,'-collect_tests_from_list/3-fun-0-'}}] )
		    in  let <NodeRefs> =
			    %% Line 398
			    call 'lists':'map'
				(_cor6, Nodes)
			in  let <_cor8> =
				catch
				    %% Line 399
				    apply 'collect_tests'/3
					({'true',Terms}, {'testspec',%% Line 400
								     Cwd,NodeRefs,[],[],[],[[46]],[],[],[],[],[],[],[],[],[],[],'true','false',[],[],[],[],[],[],[],[],[],'true'}, %% Line 401
																						   Relaxed)
			    in  %% Line 399
				case _cor8 of
				  %% Line 402
				  <E = {'error',_cor20}> when 'true' ->
				      %% Line 403
				      E
				  %% Line 404
				  <TS> when 'true' ->
				      %% Line 405
				      case TS of
					<{'testspec',_cor21,_cor22,_cor23,_cor24,_cor25,LogDirs,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,Tests,_cor46}> when 'true' ->
					    let <_cor10> =
						%% Line 406
						call 'lists':'delete'
						    ([46], LogDirs)
					    in  let <LogDirs1> =
						    %% Line 406
						    call 'erlang':'++'
							(_cor10, [[46]])
						in  let <_rec9> =
							%% Line 407
							call 'lists':'flatten'
							    (Tests)
						    in  let <_cor14> =
							    %% Line 407
							    call 'erlang':'setelement'
								(28, TS, _rec9)
							in  %% Line 407
							    call 'erlang':'setelement'
								(7, _cor14, LogDirs1)
					( <_cor9> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor9})
					  -| ['compiler_generated'] )
				      end
				end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'collect_tests_from_list',3}}] )
	    -| ['compiler_generated'] )
	end
'collect_tests'/3 =
    %% Line 410
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{Replace,Terms},TestSpec = {'testspec',_cor24,Ns,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,As,_cor48,_cor49},Relaxed> when 'true' ->
	      do  %% Line 411
		  call 'erlang':'put'
		      ('relaxed', Relaxed)
		  let <_cor3> =
		      %% Line 412
		      case <> of
			<>
			    when call 'erlang':'=:='
				  (Replace,
				   'true') ->
			    apply 'replace_names'/1
				(Terms)
			%% Line 413
			<> when 'true' ->
			    Terms
		      end
		  in  let <MergeTestsDef,Terms2> =
			  %% Line 416
			  case call 'proplists':'get_value'
				   ('set_merge_tests', _cor3, 'true') of
			    %% Line 417
			    <'false'> when 'true' ->
				let <_cor5> =
				    %% Line 420
				    call 'proplists':'delete'
					('merge_tests', _cor3)
				in  <_cor49,_cor5>
			    %% Line 421
			    <'true'> when 'true' ->
				%% Line 422
				<'true',_cor3>
			    ( <_cor8> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor8})
			      -| ['compiler_generated'] )
			  end
		      in  let <_rec12> =
			      %% Line 426
			      call 'lists':'reverse'
				  (As)
			  in  let <_rec13> =
				  %% Line 427
				  call 'lists':'reverse'
				      (Ns)
			      in  let <_cor14> =
				      %% Line 428
				      call 'erlang':'setelement'
					  (29, TestSpec, MergeTestsDef)
				  in  let <_cor15> =
					  %% Line 426
					  call 'erlang':'setelement'
					      (27, _cor14, _rec12)
				      in  let <_cor17> =
					      %% Line 427
					      call 'erlang':'setelement'
						  (3, _cor15, _rec13)
					  in  let <TestSpec1> =
						  %% Line 426
						  apply 'get_global'/2
						      (Terms2, _cor17)
					      in  let <TestSpec2> =
						      %% Line 429
						      apply 'get_all_nodes'/2
							  (Terms2, TestSpec1)
						  in  %% Line 430
						      case apply 'filter_init_terms'/3
							       (Terms2, [], TestSpec2) of
							<{Terms3,TestSpec3}> when 'true' ->
							    %% Line 431
							    apply 'add_tests'/2
								(Terms3, TestSpec3)
							( <_cor20> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor20})
							  -| ['compiler_generated'] )
						      end
	  ( <_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21})
		  -| [{'function_name',{'collect_tests',3}}] )
	    -| ['compiler_generated'] )
	end
'replace_names'/1 =
    %% Line 435
    fun (_cor0) ->
	let <_cor13> =
	    %% Line 437
	    ( fun (_cor11) ->
		  case _cor11 of
		    <Def = {'define',Name,_X_Replacement}> when 'true' ->
			%% Line 439
			case <> of
			  <>
			      when let <_cor1> =
				    call 'erlang':'is_atom'
					(Name)
				in  call 'erlang':'not'
					(_cor1) ->
			      %% Line 440
			      call 'erlang':'throw'
				  ({'illegal_name_in_testspec',Name})
			  %% Line 441
			  <> when 'true' ->
			      %% Line 442
			      case call 'erlang':'atom_to_list'
				       (Name) of
				<[First|_cor17]> when 'true' ->
				    %% Line 443
				    case <> of
				      %% Line 445
				      <>
					  when try
						let <_cor3> =
						    call 'erlang':'=='
							(First, 63)
						in  let <_cor4> =
							call 'erlang':'=='
							    (First, 36)
						    in  let <_cor5> =
							    call 'erlang':'or'
								(_cor3, _cor4)
							in  let <_cor6> =
								call 'erlang':'=='
								    (First, 95)
							    in  let <_cor7> =
								    call 'erlang':'or'
									(_cor5, _cor6)
								in  let <_cor8> =
									call 'erlang':'>='
									    (First, 65)
								    in  let <_cor9> =
									    %% Line 446
									    call 'erlang':'=<'
										(First, 90)
									in  let <_cor10> =
										%% Line 446
										call 'erlang':'and'
										    (_cor8, _cor9)
									    in  call 'erlang':'or'
										    (_cor7, _cor10)
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false' ->
					  %% Line 447
					  [Def|[]]
				      %% Line 448
				      <> when 'true' ->
					  %% Line 449
					  call 'erlang':'throw'
					      ({'illegal_name_in_testspec',%% Line 450
									   Name})
				    end
				( <_cor2> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor2})
				  -| ['compiler_generated'] )
			      end
			end
		    %% Line 453
		    <_cor18> when 'true' ->
			[]
		  end
	      -| [{'id',{0,0,'-replace_names/1-fun-0-'}}] )
	in  let <Defs> =
		%% Line 437
		call 'lists':'flatmap'
		    (_cor13, _cor0)
	    in  let <DefProps> =
		    %% Line 455
		    apply 'replace_names_in_defs'/2
			(Defs, [])
		in  %% Line 456
		    apply 'replace_names'/3
			(_cor0, [], DefProps)
'replace_names_in_defs'/2 =
    %% Line 458
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Def|Left],ModDefs> when 'true' ->
	      %% Line 459
	      case apply 'replace_names'/3
		       ([Def|[]], [], ModDefs) of
		<[{'define',Name,Replacement}|[]]> when 'true' ->
		    %% Line 460
		    apply 'replace_names_in_defs'/2
			(Left, [{Name,Replacement}|ModDefs])
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 461
	  <[],ModDefs> when 'true' ->
	      %% Line 462
	      ModDefs
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'replace_names_in_defs',2}}] )
	    -| ['compiler_generated'] )
	end
'replace_names'/3 =
    %% Line 464
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Term|Ts],Modified,Defs>
	      when call 'erlang':'is_tuple'
		    (Term) ->
	      %% Line 465
	      case call 'erlang':'tuple_to_list'
		       (Term) of
		<[TypeTag|Data]> when 'true' ->
		    let <_cor4> =
			%% Line 466
			apply 'replace_names_in_elems'/3
			    (Data, [], Defs)
		    in  let <Term1> =
			    %% Line 466
			    call 'erlang':'list_to_tuple'
				([TypeTag|_cor4])
			in  %% Line 467
			    apply 'replace_names'/3
				(Ts, [Term1|Modified], Defs)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 468
	  <[Term|Ts],Modified,Defs>
	      when call 'erlang':'is_atom'
		    (Term) ->
	      %% Line 469
	      case call 'proplists':'get_value'
		       (Term, Defs) of
		%% Line 470
		<'undefined'> when 'true' ->
		    %% Line 471
		    apply 'replace_names'/3
			(Ts, [Term|Modified], Defs)
		%% Line 472
		<Replacement> when 'true' ->
		    %% Line 473
		    apply 'replace_names'/3
			(Ts, [Replacement|Modified], Defs)
	      end
	  %% Line 475
	  <[Term = [Ch|_cor11]|Ts],Modified,Defs>
	      when call 'erlang':'is_integer'
		    (Ch) ->
	      let <Term1> =
		  %% Line 477
		  apply 'replace_names_in_string'/2
		      (Term, Defs)
	      in  %% Line 478
		  apply 'replace_names'/3
		      (Ts, [Term1|Modified], Defs)
	  %% Line 479
	  <[Term|Ts],Modified,Defs> when 'true' ->
	      %% Line 480
	      apply 'replace_names'/3
		  (Ts, [Term|Modified], Defs)
	  %% Line 481
	  <[],Modified,_X_Defs> when 'true' ->
	      %% Line 482
	      call 'lists':'reverse'
		  (Modified)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'replace_names',3}}] )
	    -| ['compiler_generated'] )
	end
'replace_names_in_elems'/3 =
    %% Line 484
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Elem|Es],Modified,Defs>
	      when call 'erlang':'is_tuple'
		    (Elem) ->
	      let <_cor3> =
		  %% Line 485
		  call 'erlang':'tuple_to_list'
		      (Elem)
	      in  let <_cor4> =
		      %% Line 485
		      apply 'replace_names_in_elems'/3
			  (_cor3, [], Defs)
		  in  let <Elem1> =
			  %% Line 485
			  call 'erlang':'list_to_tuple'
			      (_cor4)
		      in  %% Line 486
			  apply 'replace_names_in_elems'/3
			      (Es, [Elem1|Modified], Defs)
	  %% Line 487
	  <[Elem|Es],Modified,Defs>
	      when call 'erlang':'is_atom'
		    (Elem) ->
	      %% Line 488
	      case call 'proplists':'get_value'
		       (Elem, Defs) of
		%% Line 489
		<'undefined'> when 'true' ->
		    let <Elem1> =
			%% Line 491
			apply 'replace_names_in_node'/2
			    (Elem, Defs)
		    in  %% Line 492
			apply 'replace_names_in_elems'/3
			    (Es, [Elem1|Modified], Defs)
		%% Line 493
		<Replacement> when 'true' ->
		    %% Line 494
		    apply 'replace_names_in_elems'/3
			(Es, [Replacement|Modified], Defs)
	      end
	  %% Line 496
	  <[Elem = [Ch|_cor14]|Es],Modified,Defs>
	      when call 'erlang':'is_integer'
		    (Ch) ->
	      %% Line 498
	      case apply 'replace_names_in_string'/2
		       (Elem, Defs) of
		%% Line 499
		<_cor15>
		    when call 'erlang':'=:='
			  (_cor15,
			   Elem) ->
		    let <List> =
			%% Line 500
			apply 'replace_names_in_elems'/3
			    (Elem, [], Defs)
		    in  %% Line 501
			apply 'replace_names_in_elems'/3
			    (Es, [List|Modified], Defs)
		%% Line 502
		<Elem1> when 'true' ->
		    %% Line 503
		    apply 'replace_names_in_elems'/3
			(Es, [Elem1|Modified], Defs)
	      end
	  %% Line 505
	  <[Elem|Es],Modified,Defs>
	      when call 'erlang':'is_list'
		    (Elem) ->
	      let <List> =
		  %% Line 506
		  apply 'replace_names_in_elems'/3
		      (Elem, [], Defs)
	      in  %% Line 507
		  apply 'replace_names_in_elems'/3
		      (Es, [List|Modified], Defs)
	  %% Line 508
	  <[Elem|Es],Modified,Defs> when 'true' ->
	      %% Line 509
	      apply 'replace_names_in_elems'/3
		  (Es, [Elem|Modified], Defs)
	  %% Line 510
	  <[],Modified,_X_Defs> when 'true' ->
	      %% Line 511
	      call 'lists':'reverse'
		  (Modified)
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'replace_names_in_elems',3}}] )
	    -| ['compiler_generated'] )
	end
'replace_names_in_string'/2 =
    %% Line 513
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Term,Defs = [{Name,Replacement = [Ch|_cor11]}|Ds]>
	      when %% Line 514
		call 'erlang':'is_integer'
		    (Ch) ->
	      %% Line 515
	      try
		  let <_cor2> =
		      call 'erlang':'atom_to_list'
			  (Name)
		  in  let <_cor3> =
			  [39|call 'erlang':'++'
				  (_cor2, [39])]
		      in  call 're':'replace'
			      (Term, _cor3, %% Line 516
					    Replacement, %% Line 516
							 [{'return','list'}])
	      of <_cor4> ->
		  case _cor4 of
		    %% Line 517
		    <_cor12>
			when call 'erlang':'=:='
			      (_cor4,
			       Term) ->
			%% Line 518
			apply 'replace_names_in_string'/2
			    (Term, Ds)
		    %% Line 519
		    <Term1> when 'true' ->
			%% Line 520
			apply 'replace_names_in_string'/2
			    (Term1, Defs)
		  end
	      catch <_cor8,_cor7,_cor6> ->
		  %% Line 522
		  Term
	  %% Line 524
	  <Term,[_cor16|Ds]> when 'true' ->
	      %% Line 525
	      apply 'replace_names_in_string'/2
		  (Term, Ds)
	  %% Line 526
	  <Term,[]> when 'true' ->
	      %% Line 527
	      Term
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'replace_names_in_string',2}}] )
	    -| ['compiler_generated'] )
	end
'replace_names_in_node'/2 =
    %% Line 529
    fun (_cor1,_cor0) ->
	let <String> =
	    %% Line 530
	    call 'erlang':'atom_to_list'
		(_cor1)
	in  %% Line 531
	    case call 'lists':'member'
		     (64, String) of
	      %% Line 532
	      <'true'> when 'true' ->
		  let <_cor3> =
		      %% Line 533
		      apply 'replace_names_in_node1'/2
			  (String, _cor0)
		  in  %% Line 533
		      call 'erlang':'list_to_atom'
			  (_cor3)
	      %% Line 534
	      <'false'> when 'true' ->
		  _cor1
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor4})
		-| ['compiler_generated'] )
	    end
'replace_names_in_node1'/2 =
    %% Line 538
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <NodeStr,Defs = [{Name,Replacement}|Ds]> when 'true' ->
	      let <_cor3> =
		  %% Line 539
		  case Replacement of
		    %% Line 540
		    <[Ch|_cor9]>
			when call 'erlang':'is_integer'
			      (Ch) ->
			Replacement
		    %% Line 541
		    <_cor10>
			when call 'erlang':'is_atom'
			      (Replacement) ->
			call 'erlang':'atom_to_list'
			    (Replacement)
		    %% Line 542
		    <_cor11> when 'true' ->
			'false'
		  end
	      in  %% Line 544
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (_cor3,
			       'false') ->
			%% Line 545
			apply 'replace_names_in_node1'/2
			    (NodeStr, Ds)
		    %% Line 546
		    <> when 'true' ->
			let <_cor5> =
			    %% Line 547
			    call 'erlang':'atom_to_list'
				(Name)
			in  %% Line 547
			    case call 're':'replace'
				     (NodeStr, _cor5, _cor3, %% Line 548
							     [{'return','list'}]) of
			      %% Line 549
			      <_cor12>
				  when call 'erlang':'=:='
					(_cor12,
					 NodeStr) ->
				  %% Line 550
				  apply 'replace_names_in_node1'/2
				      (NodeStr, Ds)
			      %% Line 551
			      <NodeStr1> when 'true' ->
				  %% Line 552
				  apply 'replace_names_in_node1'/2
				      (NodeStr1, Defs)
			    end
		  end
	  %% Line 555
	  <NodeStr,[]> when 'true' ->
	      %% Line 556
	      NodeStr
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'replace_names_in_node1',2}}] )
	    -| ['compiler_generated'] )
	end
'get_included_specs'/2 =
    %% Line 560
    fun (_cor1,_cor0) ->
	%% Line 561
	apply 'get_included_specs'/4
	    (_cor1, _cor0, [], [])
'get_included_specs'/4 =
    %% Line 563
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'specs',How,SpecOrSpecs}|Ts],TestSpec,Join,Sep> when 'true' ->
	      let <_cor11> =
		  %% Line 564
		  case SpecOrSpecs of
		    %% Line 565
		    <[File|_cor19]>
			when call 'erlang':'is_list'
			      (File) ->
			%% Line 566
			( letrec
			      'lc$^0'/1 =
				  fun (_cor6) ->
				      case _cor6 of
					<[Spec|_cor5]> when 'true' ->
					    let <_cor7> =
						apply 'get_absfile'/2
						    (Spec, TestSpec)
					    in  let <_cor8> =
						    apply 'lc$^0'/1
							(_cor5)
						in  ( [_cor7|_cor8]
						      -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor6> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor6})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (SpecOrSpecs)
			  -| ['list_comprehension'] )
		    %% Line 567
		    <[Ch|_cor20]>
			when call 'erlang':'is_integer'
			      (Ch) ->
			let <_cor9> =
			    %% Line 568
			    apply 'get_absfile'/2
				(SpecOrSpecs, TestSpec)
			in  %% Line 568
			    [_cor9|[]]
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor10})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 570
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (How,
			       'join') ->
			let <_cor13> =
			    %% Line 571
			    call 'erlang':'++'
				(Join, _cor11)
			in  %% Line 571
			    apply 'get_included_specs'/4
				(Ts, TestSpec, _cor13, Sep)
		    %% Line 572
		    <> when 'true' ->
			let <_cor14> =
			    %% Line 573
			    call 'erlang':'++'
				(Sep, _cor11)
			in  %% Line 573
			    apply 'get_included_specs'/4
				(Ts, TestSpec, Join, _cor14)
		  end
	  %% Line 575
	  <[_cor21|Ts],TestSpec,Join,Sep> when 'true' ->
	      %% Line 576
	      apply 'get_included_specs'/4
		  (Ts, TestSpec, Join, Sep)
	  %% Line 577
	  <[],_cor22,Join,Sep> when 'true' ->
	      %% Line 578
	      {Join,Sep}
	  ( <_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'get_included_specs',4}}] )
	    -| ['compiler_generated'] )
	end
'get_global'/2 =
    %% Line 581
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'merge_tests',Bool}|Ts],Spec> when 'true' ->
	      %% Line 582
	      case Spec of
		<{'testspec',_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49}> when 'true' ->
		    let <_cor4> =
			call 'erlang':'setelement'
			    (29, Spec, Bool)
		    in  apply 'get_global'/2
			    (Ts, _cor4)
		( <_cor50> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','testspec'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 586
	  <[{'alias',Ref,Dir}|Ts],Spec = {'testspec',_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,Refs,_cor76,_cor77}> when 'true' ->
	      let <_cor5> =
		  %% Line 587
		  apply 'get_absdir'/2
		      (Dir, Spec)
	      in  let <_rec16> =
		      %% Line 587
		      [{Ref,_cor5}|Refs]
		  in  let <_cor9> =
			  %% Line 587
			  call 'erlang':'setelement'
			      (27, Spec, _rec16)
		      in  %% Line 587
			  apply 'get_global'/2
			      (Ts, _cor9)
	  %% Line 588
	  <[{'node',Ref,Node}|Ts],Spec = {'testspec',_cor107,Refs,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,_cor133}> when 'true' ->
	      let <_cor10> =
		  %% Line 590
		  call 'lists':'keydelete'
		      (Node, 2, Refs)
	      in  let <_rec18> =
		      %% Line 589
		      [{Ref,Node}|_cor10]
		  in  let <_cor14> =
			  %% Line 589
			  call 'erlang':'setelement'
			      (3, Spec, _rec18)
		      in  %% Line 589
			  apply 'get_global'/2
			      (Ts, _cor14)
	  %% Line 592
	  <[_cor163|Ts],Spec> when 'true' ->
	      %% Line 593
	      apply 'get_global'/2
		  (Ts, Spec)
	  %% Line 594
	  <[],Spec = {'testspec',_cor164,Ns,_cor165,_cor166,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181,_cor182,_cor183,_cor184,_cor185,_cor186,_cor187,As,_cor188,_cor189}> when 'true' ->
	      let <_rec20> =
		  %% Line 595
		  call 'lists':'reverse'
		      (Ns)
	      in  let <_rec21> =
		      %% Line 595
		      call 'lists':'reverse'
			  (As)
		  in  let <_cor18> =
			  %% Line 595
			  call 'erlang':'setelement'
			      (27, Spec, _rec21)
		      in  %% Line 595
			  call 'erlang':'setelement'
			      (3, _cor18, _rec20)
	  ( <_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20})
		  -| [{'function_name',{'get_global',2}}] )
	    -| ['compiler_generated'] )
	end
'get_absfile'/3 =
    %% Line 597
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Callback,FullName,{'testspec',SpecDir,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40}> when 'true' ->
	      %% Line 600
	      case call 'file':'get_cwd'
		       () of
		<{'ok',OldWd}> when 'true' ->
		    %% Line 601
		    case call 'file':'set_cwd'
			     (SpecDir) of
		      <'ok'> when 'true' ->
			  let <R> =
			      %% Line 602
			      call Callback:'check_parameter'
				  (FullName)
			  in  %% Line 603
			      case call 'file':'set_cwd'
				       (OldWd) of
				<'ok'> when 'true' ->
				    %% Line 604
				    case R of
				      %% Line 605
				      <{'ok',{'file',_cor41}}>
					  when call 'erlang':'=:='
						(_cor41,
						 FullName) ->
					  let <File> =
					      %% Line 606
					      call 'filename':'basename'
						  (FullName)
					  in  let <_cor8> =
						  %% Line 607
						  call 'filename':'dirname'
						      (FullName)
					      in  let <Dir> =
						      %% Line 607
						      apply 'get_absname'/2
							  (_cor8, SpecDir)
						  in  %% Line 608
						      call 'filename':'join'
							  (Dir, File)
				      %% Line 609
				      <{'ok',{'config',_cor42}}>
					  when call 'erlang':'=:='
						(_cor42,
						 FullName) ->
					  %% Line 610
					  FullName
				      %% Line 611
				      <{'error',{'nofile',_cor43}}>
					  when call 'erlang':'=:='
						(_cor43,
						 FullName) ->
					  %% Line 612
					  FullName
				      %% Line 613
				      <{'error',{'wrong_config',_cor44}}>
					  when call 'erlang':'=:='
						(_cor44,
						 FullName) ->
					  %% Line 614
					  FullName
				      ( <_cor10> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor10})
					-| ['compiler_generated'] )
				    end
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor6})
				  -| ['compiler_generated'] )
			      end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'get_absfile',3}}] )
	    -| ['compiler_generated'] )
	end
'get_absfile'/2 =
    %% Line 617
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <FullName,{'testspec',SpecDir,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33}> when 'true' ->
	      let <File> =
		  %% Line 618
		  call 'filename':'basename'
		      (FullName)
	      in  let <_cor3> =
		      %% Line 619
		      call 'filename':'dirname'
			  (FullName)
		  in  let <Dir> =
			  %% Line 619
			  apply 'get_absname'/2
			      (_cor3, SpecDir)
		      in  %% Line 620
			  call 'filename':'join'
			      (Dir, File)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'get_absfile',2}}] )
	    -| ['compiler_generated'] )
	end
'get_absdir'/2 =
    %% Line 622
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Dir,{'testspec',SpecDir,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30}> when 'true' ->
	      %% Line 623
	      apply 'get_absname'/2
		  (Dir, SpecDir)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'get_absdir',2}}] )
	    -| ['compiler_generated'] )
	end
'get_absname'/2 =
    %% Line 625
    fun (_cor1,_cor0) ->
	let <AbsName> =
	    %% Line 626
	    call 'filename':'absname'
		(_cor1, _cor0)
	in  %% Line 627
	    apply 'shorten_path'/2
		(AbsName, _cor0)
'shorten_path'/2 =
    %% Line 629
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 630
	    call 'filename':'split'
		(_cor1)
	in  %% Line 630
	    case apply 'shorten_split_path'/2
		     (_cor2, []) of
	      %% Line 631
	      <[]> when 'true' ->
		  %% Line 632
		  case call 'filename':'split'
			   (_cor0) of
		    <[Root|_cor7]> when 'true' ->
			%% Line 633
			Root
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	      %% Line 634
	      <Short> when 'true' ->
		  %% Line 635
		  call 'filename':'join'
		      (Short)
	    end
'shorten_split_path'/2 =
    %% Line 638
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[[46|[46]]|Path],SoFar> when 'true' ->
	      let <_cor2> =
		  %% Line 639
		  call 'erlang':'tl'
		      (SoFar)
	      in  %% Line 639
		  apply 'shorten_split_path'/2
		      (Path, _cor2)
	  %% Line 640
	  <[[46]|Path],SoFar> when 'true' ->
	      %% Line 641
	      apply 'shorten_split_path'/2
		  (Path, SoFar)
	  %% Line 642
	  <[Dir|Path],SoFar> when 'true' ->
	      %% Line 643
	      apply 'shorten_split_path'/2
		  (Path, [Dir|SoFar])
	  %% Line 644
	  <[],SoFar> when 'true' ->
	      %% Line 645
	      call 'lists':'reverse'
		  (SoFar)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'shorten_split_path',2}}] )
	    -| ['compiler_generated'] )
	end
'get_all_nodes'/2 =
    %% Line 648
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'suites',Nodes,_cor20,_cor21}|Ts],Spec>
	      when call 'erlang':'is_list'
		    (Nodes) ->
	      let <_cor2> =
		  %% Line 649
		  apply 'save_nodes'/2
		      (Nodes, Spec)
	      in  %% Line 649
		  apply 'get_all_nodes'/2
		      (Ts, _cor2)
	  %% Line 650
	  <[{'suites',Node,_cor22,_cor23}|Ts],Spec> when 'true' ->
	      let <_cor3> =
		  %% Line 651
		  apply 'save_nodes'/2
		      ([Node|[]], Spec)
	      in  %% Line 651
		  apply 'get_all_nodes'/2
		      (Ts, _cor3)
	  %% Line 652
	  <[{'groups',[Char|_cor24],_cor25,_cor26,_cor27}|Ts],Spec>
	      when call 'erlang':'is_integer'
		    (Char) ->
	      %% Line 653
	      apply 'get_all_nodes'/2
		  (Ts, Spec)
	  %% Line 654
	  <[{'groups',Nodes,_cor28,_cor29,_cor30}|Ts],Spec>
	      when call 'erlang':'is_list'
		    (Nodes) ->
	      let <_cor4> =
		  %% Line 655
		  apply 'save_nodes'/2
		      (Nodes, Spec)
	      in  %% Line 655
		  apply 'get_all_nodes'/2
		      (Ts, _cor4)
	  %% Line 656
	  <[{'groups',Nodes,_cor31,_cor32,_cor33,_cor34}|Ts],Spec>
	      when call 'erlang':'is_list'
		    (Nodes) ->
	      let <_cor5> =
		  %% Line 657
		  apply 'save_nodes'/2
		      (Nodes, Spec)
	      in  %% Line 657
		  apply 'get_all_nodes'/2
		      (Ts, _cor5)
	  %% Line 658
	  <[{'groups',_cor35,_cor36,_cor37,{'cases',_cor38}}|Ts],Spec> when 'true' ->
	      %% Line 659
	      apply 'get_all_nodes'/2
		  (Ts, Spec)
	  %% Line 660
	  <[{'groups',Node,_cor39,_cor40,_cor41}|Ts],Spec> when 'true' ->
	      let <_cor6> =
		  %% Line 661
		  apply 'save_nodes'/2
		      ([Node|[]], Spec)
	      in  %% Line 661
		  apply 'get_all_nodes'/2
		      (Ts, _cor6)
	  %% Line 662
	  <[{'groups',Node,_cor42,_cor43,_cor44,_cor45}|Ts],Spec> when 'true' ->
	      let <_cor7> =
		  %% Line 663
		  apply 'save_nodes'/2
		      ([Node|[]], Spec)
	      in  %% Line 663
		  apply 'get_all_nodes'/2
		      (Ts, _cor7)
	  %% Line 664
	  <[{'cases',Nodes,_cor46,_cor47,_cor48}|Ts],Spec>
	      when call 'erlang':'is_list'
		    (Nodes) ->
	      let <_cor8> =
		  %% Line 665
		  apply 'save_nodes'/2
		      (Nodes, Spec)
	      in  %% Line 665
		  apply 'get_all_nodes'/2
		      (Ts, _cor8)
	  %% Line 666
	  <[{'cases',Node,_cor49,_cor50,_cor51}|Ts],Spec> when 'true' ->
	      let <_cor9> =
		  %% Line 667
		  apply 'save_nodes'/2
		      ([Node|[]], Spec)
	      in  %% Line 667
		  apply 'get_all_nodes'/2
		      (Ts, _cor9)
	  %% Line 668
	  <[{'skip_suites',Nodes,_cor52,_cor53,_cor54}|Ts],Spec>
	      when call 'erlang':'is_list'
		    (Nodes) ->
	      let <_cor10> =
		  %% Line 669
		  apply 'save_nodes'/2
		      (Nodes, Spec)
	      in  %% Line 669
		  apply 'get_all_nodes'/2
		      (Ts, _cor10)
	  %% Line 670
	  <[{'skip_suites',Node,_cor55,_cor56,_cor57}|Ts],Spec> when 'true' ->
	      let <_cor11> =
		  %% Line 671
		  apply 'save_nodes'/2
		      ([Node|[]], Spec)
	      in  %% Line 671
		  apply 'get_all_nodes'/2
		      (Ts, _cor11)
	  %% Line 672
	  <[{'skip_groups',[Char|_cor58],_cor59,_cor60,_cor61,_cor62}|Ts],Spec>
	      when call 'erlang':'is_integer'
		    (Char) ->
	      %% Line 673
	      apply 'get_all_nodes'/2
		  (Ts, Spec)
	  %% Line 674
	  <[{'skip_groups',Nodes,_cor63,_cor64,_cor65,_cor66}|Ts],Spec>
	      when call 'erlang':'is_list'
		    (Nodes) ->
	      let <_cor12> =
		  %% Line 675
		  apply 'save_nodes'/2
		      (Nodes, Spec)
	      in  %% Line 675
		  apply 'get_all_nodes'/2
		      (Ts, _cor12)
	  %% Line 676
	  <[{'skip_groups',Node,_cor67,_cor68,_cor69,_cor70}|Ts],Spec> when 'true' ->
	      let <_cor13> =
		  %% Line 677
		  apply 'save_nodes'/2
		      ([Node|[]], Spec)
	      in  %% Line 677
		  apply 'get_all_nodes'/2
		      (Ts, _cor13)
	  %% Line 678
	  <[{'skip_groups',Nodes,_cor71,_cor72,_cor73,_cor74,_cor75}|Ts],Spec>
	      when call 'erlang':'is_list'
		    (Nodes) ->
	      let <_cor14> =
		  %% Line 679
		  apply 'save_nodes'/2
		      (Nodes, Spec)
	      in  %% Line 679
		  apply 'get_all_nodes'/2
		      (Ts, _cor14)
	  %% Line 680
	  <[{'skip_groups',Node,_cor76,_cor77,_cor78,_cor79,_cor80}|Ts],Spec> when 'true' ->
	      let <_cor15> =
		  %% Line 681
		  apply 'save_nodes'/2
		      ([Node|[]], Spec)
	      in  %% Line 681
		  apply 'get_all_nodes'/2
		      (Ts, _cor15)
	  %% Line 682
	  <[{'skip_cases',Nodes,_cor81,_cor82,_cor83,_cor84}|Ts],Spec>
	      when call 'erlang':'is_list'
		    (Nodes) ->
	      let <_cor16> =
		  %% Line 683
		  apply 'save_nodes'/2
		      (Nodes, Spec)
	      in  %% Line 683
		  apply 'get_all_nodes'/2
		      (Ts, _cor16)
	  %% Line 684
	  <[{'skip_cases',Node,_cor85,_cor86,_cor87,_cor88}|Ts],Spec> when 'true' ->
	      let <_cor17> =
		  %% Line 685
		  apply 'save_nodes'/2
		      ([Node|[]], Spec)
	      in  %% Line 685
		  apply 'get_all_nodes'/2
		      (Ts, _cor17)
	  %% Line 686
	  <[_X_Other|Ts],Spec> when 'true' ->
	      %% Line 687
	      apply 'get_all_nodes'/2
		  (Ts, Spec)
	  %% Line 688
	  <[],Spec> when 'true' ->
	      %% Line 689
	      Spec
	  ( <_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18})
		  -| [{'function_name',{'get_all_nodes',2}}] )
	    -| ['compiler_generated'] )
	end
'filter_init_terms'/3 =
    %% Line 691
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'init',InitOptions}|Ts],NewTerms,Spec> when 'true' ->
	      let <_cor3> =
		  %% Line 692
		  apply 'list_nodes'/1
		      (Spec)
	      in  %% Line 692
		  apply 'filter_init_terms'/3
		      ([{'init',_cor3,InitOptions}|Ts], %% Line 693
							NewTerms, %% Line 693
								  Spec)
	  %% Line 694
	  <[{'init','all_nodes',InitOptions}|Ts],NewTerms,Spec> when 'true' ->
	      let <_cor4> =
		  %% Line 695
		  apply 'list_nodes'/1
		      (Spec)
	      in  %% Line 695
		  apply 'filter_init_terms'/3
		      ([{'init',_cor4,InitOptions}|Ts], %% Line 696
							NewTerms, %% Line 696
								  Spec)
	  %% Line 697
	  <[{'init',NodeRef,InitOptions}|Ts],%% Line 698
					     NewTerms,%% Line 698
						      Spec>
	      when %% Line 698
		call 'erlang':'is_atom'
		    (NodeRef) ->
	      %% Line 699
	      apply 'filter_init_terms'/3
		  ([{'init',[NodeRef|[]],InitOptions}|Ts], NewTerms, Spec)
	  %% Line 700
	  <[{'init',NodeRefs,InitOption}|Ts],%% Line 701
					     NewTerms,%% Line 701
						      Spec>
	      when %% Line 701
		call 'erlang':'is_tuple'
		    (InitOption) ->
	      %% Line 702
	      apply 'filter_init_terms'/3
		  ([{'init',NodeRefs,[InitOption|[]]}|Ts], NewTerms, Spec)
	  %% Line 703
	  <[{'init',[NodeRef|NodeRefs],InitOptions}|Ts],%% Line 704
							NewTerms,Spec = %% Line 704
									{'testspec',_cor24,_cor25,InitData,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50}> when 'true' ->
	      let <_cor7> =
		  %% Line 706
		  case call 'lists':'keyfind'
			   ('node_start', 1, InitOptions) of
		    %% Line 707
		    <{'node_start',NSOptions}> when 'true' ->
			%% Line 708
			case call 'lists':'keyfind'
				 ('callback_module', 1, NSOptions) of
			  %% Line 709
			  <{'callback_module',_X_Callback}> when 'true' ->
			      %% Line 710
			      NSOptions
			  %% Line 711
			  <'false'> when 'true' ->
			      %% Line 712
			      [{'callback_module','ct_slave'}|NSOptions]
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor5})
			    -| ['compiler_generated'] )
			end
		    %% Line 714
		    <'false'> when 'true' ->
			%% Line 715
			[]
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor10> =
		      %% Line 717
		      case call 'lists':'keyfind'
			       ('eval', 1, InitOptions) of
			%% Line 718
			<{'eval',MFA}>
			    when call 'erlang':'is_tuple'
				  (MFA) ->
			    %% Line 719
			    [MFA|[]]
			%% Line 720
			<{'eval',MFAs}>
			    when call 'erlang':'is_list'
				  (MFAs) ->
			    %% Line 721
			    MFAs
			%% Line 722
			<'false'> when 'true' ->
			    %% Line 723
			    []
			( <_cor9> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor9})
			  -| ['compiler_generated'] )
		      end
		  in  let <Node> =
			  %% Line 725
			  apply 'ref2node'/2
			      (NodeRef, _cor25)
		      in  let <InitData2> =
			      %% Line 726
			      apply 'add_option'/4
				  ({'node_start',_cor7}, Node, InitData, 'true')
			  in  let <InitData3> =
				  %% Line 727
				  apply 'add_option'/4
				      ({'eval',_cor10}, Node, InitData2, 'false')
			      in  let <_cor19> =
				      %% Line 729
				      call 'erlang':'setelement'
					  (4, Spec, InitData3)
				  in  %% Line 728
				      apply 'filter_init_terms'/3
					  ([{'init',NodeRefs,InitOptions}|Ts], %% Line 729
									       NewTerms, _cor19)
	  %% Line 730
	  <[{'init',[],_cor108}|Ts],NewTerms,Spec> when 'true' ->
	      %% Line 731
	      apply 'filter_init_terms'/3
		  (Ts, NewTerms, Spec)
	  %% Line 732
	  <[Term|Ts],NewTerms,Spec> when 'true' ->
	      %% Line 733
	      apply 'filter_init_terms'/3
		  (Ts, [Term|NewTerms], Spec)
	  %% Line 734
	  <[],NewTerms,Spec> when 'true' ->
	      let <_cor20> =
		  %% Line 735
		  call 'lists':'reverse'
		      (NewTerms)
	      in  %% Line 735
		  {_cor20,Spec}
	  ( <_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21})
		  -| [{'function_name',{'filter_init_terms',3}}] )
	    -| ['compiler_generated'] )
	end
'add_option'/4 =
    %% Line 737
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{Key,Value},Node,List,WarnIfExists>
	      when call 'erlang':'is_list'
		    (Value) ->
	      let <_cor5> =
		  %% Line 738
		  case call 'lists':'keyfind'
			   (Node, 1, List) of
		    %% Line 739
		    <{_cor17,Options}>
			when call 'erlang':'=:='
			      (_cor17,
			       Node) ->
			%% Line 740
			Options
		    %% Line 741
		    <'false'> when 'true' ->
			%% Line 742
			[]
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor10> =
		      %% Line 744
		      case call 'lists':'keyfind'
			       (Key, 1, _cor5) of
			%% Line 745
			<{_cor18,OldOption}>
			    when let <_cor19> =
				  call 'erlang':'=:='
				      (_cor18, Key)
			      in  let <_cor20> =
				      let <_cor7> =
					  call 'erlang':'=:='
					      (WarnIfExists, 'true')
				      in  let <_cor8> =
					      call 'erlang':'=/='
						  (OldOption, [])
					  in  call 'erlang':'and'
						  (_cor7, _cor8)
				  in  call 'erlang':'and'
					  (_cor19, _cor20) ->
			    do  %% Line 746
				call 'io':'format'
				    ([84|[104|[101|[114|[101|[32|[105|[115|[32|[97|[110|[32|[111|[112|[116|[105|[111|[110|[32|[126|[119|[61|[126|[119|[32|[97|[108|[114|[101|[97|[100|[121|[32|[100|[101|[102|[105|[110|[101|[100|[32|[102|[111|[114|[32|[110|[111|[100|[101|[32|[126|[119|[44|[32|[115|[107|[105|[112|[112|[105|[110|[103|[32|[110|[101|[119|[32|[126|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 748
																																																							      [Key|[OldOption|[Node|[Value|[]]]]])
				%% Line 749
				OldOption
			%% Line 750
			<{_cor21,OldOption}>
			    when call 'erlang':'=:='
				  (_cor21,
				   Key) ->
			    %% Line 751
			    call 'erlang':'++'
				(OldOption, Value)
			%% Line 752
			<'false'> when 'true' ->
			    %% Line 753
			    Value
			( <_cor9> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor9})
			  -| ['compiler_generated'] )
		      end
		  in  let <_cor12> =
			  %% Line 756
			  call 'lists':'keystore'
			      (Key, 1, _cor5, {Key,_cor10})
		      in  %% Line 755
			  call 'lists':'keystore'
			      (Node, 1, List, %% Line 756
					      {Node,_cor12})
	  %% Line 757
	  <{Key,Value},Node,List,WarnIfExists> when 'true' ->
	      %% Line 758
	      apply 'add_option'/4
		  ({Key,[Value|[]]}, Node, List, WarnIfExists)
	  ( <_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'add_option',4}}] )
	    -| ['compiler_generated'] )
	end
'save_nodes'/2 =
    %% Line 760
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Nodes,Spec = {'testspec',_cor14,NodeRefs,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40}> when 'true' ->
	      let <_cor8> =
		  %% Line 762
		  ( fun (_cor5,_cor4) ->
			case <_cor5,_cor4> of
			  <'all_nodes',NR> when 'true' ->
			      %% Line 763
			      NR
			  %% Line 764
			  <Node,NR> when 'true' ->
			      %% Line 765
			      case call 'lists':'keymember'
				       (Node, 1, NR) of
				%% Line 766
				<'true'> when 'true' ->
				    %% Line 767
				    NR
				%% Line 768
				<'false'> when 'true' ->
				    %% Line 769
				    case call 'lists':'keymember'
					     (Node, 2, NR) of
				      %% Line 770
				      <'true'> when 'true' ->
					  %% Line 771
					  NR
				      %% Line 772
				      <'false'> when 'true' ->
					  %% Line 773
					  [{'undefined',Node}|NR]
				      ( <_cor2> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor2})
					-| ['compiler_generated'] )
				    end
				( <_cor3> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor3})
				  -| ['compiler_generated'] )
			      end
			end
		    -| [{'id',{0,0,'-save_nodes/2-fun-0-'}}] )
	      in  let <NodeRefs1> =
		      %% Line 762
		      call 'lists':'foldr'
			  (_cor8, %% Line 776
				  NodeRefs, %% Line 776
					    Nodes)
		  in  %% Line 777
		      call 'erlang':'setelement'
			  (3, Spec, NodeRefs1)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'save_nodes',2}}] )
	    -| ['compiler_generated'] )
	end
'list_nodes'/1 =
    %% Line 779
    fun (_cor0) ->
	case _cor0 of
	  <{'testspec',_cor5,NodeRefs,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31}> when 'true' ->
	      let <_cor3> =
		  %% Line 780
		  ( fun (_cor1) ->
			case _cor1 of
			  <{_X_Ref,Node}> when 'true' ->
			      Node
			  ( <_cor2> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor2})
				  -| [{'function_name',{'-list_nodes/1-fun-0-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-list_nodes/1-fun-0-'}}] )
	      in  %% Line 780
		  call 'lists':'map'
		      (_cor3, NodeRefs)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'list_nodes',1}}] )
	    -| ['compiler_generated'] )
	end
'add_tests'/2 =
    %% Line 791
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'suites','all_nodes',Dir,Ss}|Ts],Spec> when 'true' ->
	      let <_cor2> =
		  %% Line 792
		  apply 'list_nodes'/1
		      (Spec)
	      in  %% Line 792
		  apply 'add_tests'/2
		      ([{'suites',_cor2,Dir,Ss}|Ts], Spec)
	  %% Line 793
	  <[{'suites',Dir,Ss}|Ts],Spec> when 'true' ->
	      %% Line 794
	      apply 'add_tests'/2
		  ([{'suites','all_nodes',Dir,Ss}|Ts], Spec)
	  %% Line 795
	  <[{'suites',Nodes,Dir,Ss}|Ts],Spec>
	      when call 'erlang':'is_list'
		    (Nodes) ->
	      %% Line 796
	      ( case Spec of
		  ( <( {'testspec',_cor182,_rec26,_cor183,_cor184,_cor185,_cor186,_cor187,_cor188,_cor189,_cor190,_cor191,_cor192,_cor193,_cor194,_cor195,_cor196,_cor197,_cor198,_cor199,_cor200,_cor201,_cor202,_cor203,_cor204,_cor205,_cor206,_cor207,_cor208}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Ts1> =
			    apply 'per_node'/5
				(Nodes, 'suites', [Dir|[Ss|[]]], Ts, _rec26)
			in  %% Line 797
			    apply 'add_tests'/2
				(Ts1, Spec)
		    -| ['compiler_generated'] )
		  ( <_cor209> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','testspec'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 798
	  <[{'suites',Node,Dir,Ss}|Ts],Spec> when 'true' ->
	      %% Line 799
	      ( case Spec of
		  ( <( {'testspec',_cor210,_cor211,_cor212,_cor213,_cor214,_cor215,_cor216,_cor217,_cor218,_cor219,_cor220,_cor221,_cor222,_cor223,_cor224,_cor225,_cor226,_cor227,_cor228,_cor229,_cor230,_cor231,_cor232,_cor233,_cor234,_cor235,_rec27,_cor236}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor14> =
			    %% Line 800
			    apply 'ref2node'/2
				(Node, _cor211)
			in  let <_cor11> =
				%% Line 801
				apply 'ref2dir'/2
				    (Dir, Spec)
			    in  let <Tests1> =
				    %% Line 800
				    apply 'insert_suites'/5
					(_cor14, _cor11, %% Line 802
							 Ss, _rec27, _cor236)
				in  let <_cor18> =
					%% Line 803
					call 'erlang':'setelement'
					    (28, Spec, Tests1)
				    in  %% Line 803
					apply 'add_tests'/2
					    (Ts, _cor18)
		    -| ['compiler_generated'] )
		  ( <_cor237> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','testspec'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 810
	  <[{'groups','all_nodes',Dir,Suite,Gs}|Ts],Spec> when 'true' ->
	      let <_cor19> =
		  %% Line 811
		  apply 'list_nodes'/1
		      (Spec)
	      in  %% Line 811
		  apply 'add_tests'/2
		      ([{'groups',_cor19,Dir,Suite,Gs}|Ts], Spec)
	  %% Line 812
	  <[{'groups','all_nodes',Dir,Suite,Gs,{'cases',TCs}}|Ts],Spec> when 'true' ->
	      let <_cor20> =
		  %% Line 813
		  apply 'list_nodes'/1
		      (Spec)
	      in  %% Line 813
		  apply 'add_tests'/2
		      ([{'groups',_cor20,Dir,Suite,Gs,{'cases',TCs}}|Ts], Spec)
	  %% Line 814
	  <[{'groups',Dir,Suite,Gs}|Ts],Spec> when 'true' ->
	      %% Line 815
	      apply 'add_tests'/2
		  ([{'groups','all_nodes',Dir,Suite,Gs}|Ts], Spec)
	  %% Line 816
	  <[{'groups',Dir,Suite,Gs,{'cases',TCs}}|Ts],Spec> when 'true' ->
	      %% Line 817
	      apply 'add_tests'/2
		  ([{'groups','all_nodes',Dir,Suite,Gs,{'cases',TCs}}|Ts], Spec)
	  %% Line 818
	  <[{'groups',Nodes,Dir,Suite,Gs}|Ts],Spec>
	      when call 'erlang':'is_list'
		    (Nodes) ->
	      %% Line 819
	      ( case Spec of
		  ( <( {'testspec',_cor323,_rec31,_cor324,_cor325,_cor326,_cor327,_cor328,_cor329,_cor330,_cor331,_cor332,_cor333,_cor334,_cor335,_cor336,_cor337,_cor338,_cor339,_cor340,_cor341,_cor342,_cor343,_cor344,_cor345,_cor346,_cor347,_cor348,_cor349}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Ts1> =
			    apply 'per_node'/5
				(Nodes, 'groups', [Dir|[Suite|[Gs|[]]]], Ts, _rec31)
			in  %% Line 820
			    apply 'add_tests'/2
				(Ts1, Spec)
		    -| ['compiler_generated'] )
		  ( <_cor350> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','testspec'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 821
	  <[{'groups',Nodes,Dir,Suite,Gs,{'cases',TCs}}|Ts],%% Line 822
							    Spec>
	      when %% Line 822
		call 'erlang':'is_list'
		    (Nodes) ->
	      %% Line 824
	      ( case Spec of
		  ( <( {'testspec',_cor351,_rec32,_cor352,_cor353,_cor354,_cor355,_cor356,_cor357,_cor358,_cor359,_cor360,_cor361,_cor362,_cor363,_cor364,_cor365,_cor366,_cor367,_cor368,_cor369,_cor370,_cor371,_cor372,_cor373,_cor374,_cor375,_cor376,_cor377}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Ts1> =
			    apply 'per_node'/5
				(Nodes, 'groups', [Dir|[Suite|[Gs|[{'cases',TCs}|[]]]]], Ts, _rec32)
			in  %% Line 825
			    apply 'add_tests'/2
				(Ts1, Spec)
		    -| ['compiler_generated'] )
		  ( <_cor378> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','testspec'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 826
	  <[{'groups',Node,Dir,Suite,Gs}|Ts],Spec> when 'true' ->
	      %% Line 827
	      ( case Spec of
		  ( <( {'testspec',_cor379,_cor380,_cor381,_cor382,_cor383,_cor384,_cor385,_cor386,_cor387,_cor388,_cor389,_cor390,_cor391,_cor392,_cor393,_cor394,_cor395,_cor396,_cor397,_cor398,_cor399,_cor400,_cor401,_cor402,_cor403,_cor404,_rec33,_cor405}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor35> =
			    %% Line 828
			    apply 'ref2node'/2
				(Node, _cor380)
			in  let <_cor32> =
				%% Line 829
				apply 'ref2dir'/2
				    (Dir, Spec)
			    in  let <Tests1> =
				    %% Line 828
				    apply 'insert_groups'/7
					(_cor35, _cor32, %% Line 830
							 Suite, %% Line 830
								Gs, %% Line 830
								    'all', _rec33, _cor405)
				in  let <_cor39> =
					%% Line 832
					call 'erlang':'setelement'
					    (28, Spec, Tests1)
				    in  %% Line 832
					apply 'add_tests'/2
					    (Ts, _cor39)
		    -| ['compiler_generated'] )
		  ( <_cor406> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','testspec'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 833
	  <[{'groups',Node,Dir,Suite,Gs,{'cases',TCs}}|Ts],Spec> when 'true' ->
	      %% Line 834
	      ( case Spec of
		  ( <( {'testspec',_cor492,_cor493,_cor494,_cor495,_cor496,_cor497,_cor498,_cor499,_cor500,_cor501,_cor502,_cor503,_cor504,_cor505,_cor506,_cor507,_cor508,_cor509,_cor510,_cor511,_cor512,_cor513,_cor514,_cor515,_cor516,_cor517,_rec37,_cor518}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor48> =
			    %% Line 835
			    apply 'ref2node'/2
				(Node, _cor493)
			in  let <_cor45> =
				%% Line 836
				apply 'ref2dir'/2
				    (Dir, Spec)
			    in  let <Tests1> =
				    %% Line 835
				    apply 'insert_groups'/7
					(_cor48, _cor45, %% Line 837
							 Suite, %% Line 837
								Gs, %% Line 837
								    TCs, _rec37, _cor518)
				in  let <_cor52> =
					%% Line 839
					call 'erlang':'setelement'
					    (28, Spec, Tests1)
				    in  %% Line 839
					apply 'add_tests'/2
					    (Ts, _cor52)
		    -| ['compiler_generated'] )
		  ( <_cor519> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','testspec'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 842
	  <[{'cases','all_nodes',Dir,Suite,Cs}|Ts],Spec> when 'true' ->
	      let <_cor53> =
		  %% Line 843
		  apply 'list_nodes'/1
		      (Spec)
	      in  %% Line 843
		  apply 'add_tests'/2
		      ([{'cases',_cor53,Dir,Suite,Cs}|Ts], Spec)
	  %% Line 844
	  <[{'cases',Dir,Suite,Cs}|Ts],Spec> when 'true' ->
	      %% Line 845
	      apply 'add_tests'/2
		  ([{'cases','all_nodes',Dir,Suite,Cs}|Ts], Spec)
	  %% Line 846
	  <[{'cases',Nodes,Dir,Suite,Cs}|Ts],Spec>
	      when call 'erlang':'is_list'
		    (Nodes) ->
	      %% Line 847
	      ( case Spec of
		  ( <( {'testspec',_cor605,_rec41,_cor606,_cor607,_cor608,_cor609,_cor610,_cor611,_cor612,_cor613,_cor614,_cor615,_cor616,_cor617,_cor618,_cor619,_cor620,_cor621,_cor622,_cor623,_cor624,_cor625,_cor626,_cor627,_cor628,_cor629,_cor630,_cor631}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Ts1> =
			    apply 'per_node'/5
				(Nodes, 'cases', [Dir|[Suite|[Cs|[]]]], Ts, _rec41)
			in  %% Line 848
			    apply 'add_tests'/2
				(Ts1, Spec)
		    -| ['compiler_generated'] )
		  ( <_cor632> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','testspec'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 849
	  <[{'cases',Node,Dir,Suite,Cs}|Ts],Spec> when 'true' ->
	      %% Line 850
	      ( case Spec of
		  ( <( {'testspec',_cor633,_cor634,_cor635,_cor636,_cor637,_cor638,_cor639,_cor640,_cor641,_cor642,_cor643,_cor644,_cor645,_cor646,_cor647,_cor648,_cor649,_cor650,_cor651,_cor652,_cor653,_cor654,_cor655,_cor656,_cor657,_cor658,_rec42,_cor659}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor65> =
			    %% Line 851
			    apply 'ref2node'/2
				(Node, _cor634)
			in  let <_cor62> =
				%% Line 852
				apply 'ref2dir'/2
				    (Dir, Spec)
			    in  let <Tests1> =
				    %% Line 851
				    apply 'insert_cases'/6
					(_cor65, _cor62, %% Line 853
							 Suite, %% Line 853
								Cs, _rec42, _cor659)
				in  let <_cor69> =
					%% Line 855
					call 'erlang':'setelement'
					    (28, Spec, Tests1)
				    in  %% Line 855
					apply 'add_tests'/2
					    (Ts, _cor69)
		    -| ['compiler_generated'] )
		  ( <_cor660> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','testspec'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 858
	  <[{'skip_suites','all_nodes',Dir,Ss,Cmt}|Ts],Spec> when 'true' ->
	      let <_cor70> =
		  %% Line 859
		  apply 'list_nodes'/1
		      (Spec)
	      in  %% Line 859
		  apply 'add_tests'/2
		      ([{'skip_suites',_cor70,Dir,Ss,Cmt}|Ts], Spec)
	  %% Line 860
	  <[{'skip_suites',Dir,Ss,Cmt}|Ts],Spec> when 'true' ->
	      %% Line 861
	      apply 'add_tests'/2
		  ([{'skip_suites','all_nodes',Dir,Ss,Cmt}|Ts], Spec)
	  %% Line 862
	  <[{'skip_suites',Nodes,Dir,Ss,Cmt}|Ts],Spec>
	      when call 'erlang':'is_list'
		    (Nodes) ->
	      %% Line 863
	      ( case Spec of
		  ( <( {'testspec',_cor746,_rec46,_cor747,_cor748,_cor749,_cor750,_cor751,_cor752,_cor753,_cor754,_cor755,_cor756,_cor757,_cor758,_cor759,_cor760,_cor761,_cor762,_cor763,_cor764,_cor765,_cor766,_cor767,_cor768,_cor769,_cor770,_cor771,_cor772}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Ts1> =
			    apply 'per_node'/5
				(Nodes, 'skip_suites', [Dir|[Ss|[Cmt|[]]]], Ts, _rec46)
			in  %% Line 864
			    apply 'add_tests'/2
				(Ts1, Spec)
		    -| ['compiler_generated'] )
		  ( <_cor773> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','testspec'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 865
	  <[{'skip_suites',Node,Dir,Ss,Cmt}|Ts],Spec> when 'true' ->
	      %% Line 866
	      ( case Spec of
		  ( <( {'testspec',_cor774,_cor775,_cor776,_cor777,_cor778,_cor779,_cor780,_cor781,_cor782,_cor783,_cor784,_cor785,_cor786,_cor787,_cor788,_cor789,_cor790,_cor791,_cor792,_cor793,_cor794,_cor795,_cor796,_cor797,_cor798,_cor799,_rec47,_cor800}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor82> =
			    %% Line 867
			    apply 'ref2node'/2
				(Node, _cor775)
			in  let <_cor79> =
				%% Line 868
				apply 'ref2dir'/2
				    (Dir, Spec)
			    in  let <Tests1> =
				    %% Line 867
				    apply 'skip_suites'/6
					(_cor82, _cor79, %% Line 869
							 Ss, %% Line 869
							     Cmt, _rec47, _cor800)
				in  let <_cor86> =
					%% Line 871
					call 'erlang':'setelement'
					    (28, Spec, Tests1)
				    in  %% Line 871
					apply 'add_tests'/2
					    (Ts, _cor86)
		    -| ['compiler_generated'] )
		  ( <_cor801> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','testspec'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 874
	  <[{'skip_groups','all_nodes',Dir,Suite,Gs,Cmt}|Ts],Spec> when 'true' ->
	      let <_cor87> =
		  %% Line 875
		  apply 'list_nodes'/1
		      (Spec)
	      in  %% Line 875
		  apply 'add_tests'/2
		      ([{'skip_groups',_cor87,Dir,Suite,Gs,Cmt}|Ts], Spec)
	  %% Line 876
	  <[{'skip_groups','all_nodes',Dir,Suite,Gs,{'cases',TCs},Cmt}|Ts],Spec> when 'true' ->
	      let <_cor88> =
		  %% Line 877
		  apply 'list_nodes'/1
		      (Spec)
	      in  %% Line 877
		  apply 'add_tests'/2
		      ([{'skip_groups',_cor88,Dir,Suite,Gs,{'cases',TCs},Cmt}|Ts], %% Line 878
										   Spec)
	  %% Line 879
	  <[{'skip_groups',Dir,Suite,Gs,Cmt}|Ts],Spec> when 'true' ->
	      %% Line 880
	      apply 'add_tests'/2
		  ([{'skip_groups','all_nodes',Dir,Suite,Gs,Cmt}|Ts], Spec)
	  %% Line 881
	  <[{'skip_groups',Dir,Suite,Gs,{'cases',TCs},Cmt}|Ts],Spec> when 'true' ->
	      %% Line 882
	      apply 'add_tests'/2
		  ([{'skip_groups','all_nodes',Dir,Suite,Gs,{'cases',TCs},Cmt}|Ts], Spec)
	  %% Line 883
	  <[{'skip_groups',Nodes,Dir,Suite,Gs,Cmt}|Ts],Spec>
	      when call 'erlang':'is_list'
		    (Nodes) ->
	      %% Line 884
	      ( case Spec of
		  ( <( {'testspec',_cor887,_rec51,_cor888,_cor889,_cor890,_cor891,_cor892,_cor893,_cor894,_cor895,_cor896,_cor897,_cor898,_cor899,_cor900,_cor901,_cor902,_cor903,_cor904,_cor905,_cor906,_cor907,_cor908,_cor909,_cor910,_cor911,_cor912,_cor913}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Ts1> =
			    apply 'per_node'/5
				(Nodes, 'skip_groups', [Dir|[Suite|[Gs|[Cmt|[]]]]], Ts, _rec51)
			in  %% Line 885
			    apply 'add_tests'/2
				(Ts1, Spec)
		    -| ['compiler_generated'] )
		  ( <_cor914> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','testspec'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 886
	  <[{'skip_groups',Nodes,Dir,Suite,Gs,{'cases',TCs},Cmt}|Ts],%% Line 887
								     Spec>
	      when %% Line 887
		call 'erlang':'is_list'
		    (Nodes) ->
	      %% Line 889
	      ( case Spec of
		  ( <( {'testspec',_cor915,_rec52,_cor916,_cor917,_cor918,_cor919,_cor920,_cor921,_cor922,_cor923,_cor924,_cor925,_cor926,_cor927,_cor928,_cor929,_cor930,_cor931,_cor932,_cor933,_cor934,_cor935,_cor936,_cor937,_cor938,_cor939,_cor940,_cor941}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Ts1> =
			    apply 'per_node'/5
				(Nodes, 'skip_groups', [Dir|[Suite|[Gs|[{'cases',TCs}|[Cmt|[]]]]]], Ts, _rec52)
			in  %% Line 890
			    apply 'add_tests'/2
				(Ts1, Spec)
		    -| ['compiler_generated'] )
		  ( <_cor942> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','testspec'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 891
	  <[{'skip_groups',Node,Dir,Suite,Gs,Cmt}|Ts],Spec> when 'true' ->
	      %% Line 892
	      ( case Spec of
		  ( <( {'testspec',_cor943,_cor944,_cor945,_cor946,_cor947,_cor948,_cor949,_cor950,_cor951,_cor952,_cor953,_cor954,_cor955,_cor956,_cor957,_cor958,_cor959,_cor960,_cor961,_cor962,_cor963,_cor964,_cor965,_cor966,_cor967,_cor968,_rec53,_cor969}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor103> =
			    %% Line 893
			    apply 'ref2node'/2
				(Node, _cor944)
			in  let <_cor100> =
				%% Line 894
				apply 'ref2dir'/2
				    (Dir, Spec)
			    in  let <Tests1> =
				    %% Line 893
				    apply 'skip_groups'/8
					(_cor103, _cor100, %% Line 895
							   Suite, %% Line 895
								  Gs, %% Line 895
								      'all', %% Line 895
									     Cmt, _rec53, _cor969)
				in  let <_cor107> =
					%% Line 897
					call 'erlang':'setelement'
					    (28, Spec, Tests1)
				    in  %% Line 897
					apply 'add_tests'/2
					    (Ts, _cor107)
		    -| ['compiler_generated'] )
		  ( <_cor970> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','testspec'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 898
	  <[{'skip_groups',Node,Dir,Suite,Gs,{'cases',TCs},Cmt}|Ts],Spec> when 'true' ->
	      %% Line 899
	      ( case Spec of
		  ( <( {'testspec',_cor1056,_cor1057,_cor1058,_cor1059,_cor1060,_cor1061,_cor1062,_cor1063,_cor1064,_cor1065,_cor1066,_cor1067,_cor1068,_cor1069,_cor1070,_cor1071,_cor1072,_cor1073,_cor1074,_cor1075,_cor1076,_cor1077,_cor1078,_cor1079,_cor1080,_cor1081,_rec57,_cor1082}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor116> =
			    %% Line 900
			    apply 'ref2node'/2
				(Node, _cor1057)
			in  let <_cor113> =
				%% Line 901
				apply 'ref2dir'/2
				    (Dir, Spec)
			    in  let <Tests1> =
				    %% Line 900
				    apply 'skip_groups'/8
					(_cor116, _cor113, %% Line 902
							   Suite, %% Line 902
								  Gs, %% Line 902
								      TCs, %% Line 902
									   Cmt, _rec57, _cor1082)
				in  let <_cor120> =
					%% Line 904
					call 'erlang':'setelement'
					    (28, Spec, Tests1)
				    in  %% Line 904
					apply 'add_tests'/2
					    (Ts, _cor120)
		    -| ['compiler_generated'] )
		  ( <_cor1083> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','testspec'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 907
	  <[{'skip_cases','all_nodes',Dir,Suite,Cs,Cmt}|Ts],Spec> when 'true' ->
	      let <_cor121> =
		  %% Line 908
		  apply 'list_nodes'/1
		      (Spec)
	      in  %% Line 908
		  apply 'add_tests'/2
		      ([{'skip_cases',_cor121,Dir,Suite,Cs,Cmt}|Ts], Spec)
	  %% Line 909
	  <[{'skip_cases',Dir,Suite,Cs,Cmt}|Ts],Spec> when 'true' ->
	      %% Line 910
	      apply 'add_tests'/2
		  ([{'skip_cases','all_nodes',Dir,Suite,Cs,Cmt}|Ts], Spec)
	  %% Line 911
	  <[{'skip_cases',Nodes,Dir,Suite,Cs,Cmt}|Ts],Spec>
	      when call 'erlang':'is_list'
		    (Nodes) ->
	      %% Line 912
	      ( case Spec of
		  ( <( {'testspec',_cor1169,_rec61,_cor1170,_cor1171,_cor1172,_cor1173,_cor1174,_cor1175,_cor1176,_cor1177,_cor1178,_cor1179,_cor1180,_cor1181,_cor1182,_cor1183,_cor1184,_cor1185,_cor1186,_cor1187,_cor1188,_cor1189,_cor1190,_cor1191,_cor1192,_cor1193,_cor1194,_cor1195}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Ts1> =
			    apply 'per_node'/5
				(Nodes, 'skip_cases', [Dir|[Suite|[Cs|[Cmt|[]]]]], Ts, _rec61)
			in  %% Line 913
			    apply 'add_tests'/2
				(Ts1, Spec)
		    -| ['compiler_generated'] )
		  ( <_cor1196> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','testspec'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 914
	  <[{'skip_cases',Node,Dir,Suite,Cs,Cmt}|Ts],Spec> when 'true' ->
	      %% Line 915
	      ( case Spec of
		  ( <( {'testspec',_cor1197,_cor1198,_cor1199,_cor1200,_cor1201,_cor1202,_cor1203,_cor1204,_cor1205,_cor1206,_cor1207,_cor1208,_cor1209,_cor1210,_cor1211,_cor1212,_cor1213,_cor1214,_cor1215,_cor1216,_cor1217,_cor1218,_cor1219,_cor1220,_cor1221,_cor1222,_rec62,_cor1223}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor133> =
			    %% Line 916
			    apply 'ref2node'/2
				(Node, _cor1198)
			in  let <_cor130> =
				%% Line 917
				apply 'ref2dir'/2
				    (Dir, Spec)
			    in  let <Tests1> =
				    %% Line 916
				    apply 'skip_cases'/7
					(_cor133, _cor130, %% Line 918
							   Suite, %% Line 918
								  Cs, %% Line 918
								      Cmt, _rec62, _cor1223)
				in  let <_cor137> =
					%% Line 919
					call 'erlang':'setelement'
					    (28, Spec, Tests1)
				    in  %% Line 919
					apply 'add_tests'/2
					    (Ts, _cor137)
		    -| ['compiler_generated'] )
		  ( <_cor1224> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','testspec'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 922
	  <[{'config',Nodes,CfgDir,Files}|Ts],Spec>
	      when let <_cor138> =
		    call 'erlang':'is_list'
			(Nodes)
		in  let <_cor139> =
			%% Line 923
			call 'erlang':'=:='
			    (Nodes, 'all_nodes')
		    in  call 'erlang':'or'
			    (_cor138, _cor139) ->
	      %% Line 924
	      apply 'add_tests'/2
		  ([{'config',Nodes,{CfgDir,Files}}|Ts], Spec)
	  %% Line 925
	  <[{'config',Node,CfgDir,FileOrFiles}|Ts],Spec> when 'true' ->
	      %% Line 926
	      apply 'add_tests'/2
		  ([{'config',Node,{CfgDir,FileOrFiles}}|Ts], Spec)
	  %% Line 927
	  <[{'config',CfgDir = [Ch|_cor1310],Files}|Ts],Spec>
	      when call 'erlang':'is_integer'
		    (Ch) ->
	      %% Line 928
	      apply 'add_tests'/2
		  ([{'config','all_nodes',{CfgDir,Files}}|Ts], Spec)
	  %% Line 930
	  <[{'event_handler',Nodes,Hs,Args}|Ts],Spec>
	      when let <_cor140> =
		    call 'erlang':'is_list'
			(Nodes)
		in  let <_cor141> =
			%% Line 931
			call 'erlang':'=:='
			    (Nodes, 'all_nodes')
		    in  call 'erlang':'or'
			    (_cor140, _cor141) ->
	      %% Line 932
	      apply 'add_tests'/2
		  ([{'event_handler',Nodes,{Hs,Args}}|Ts], Spec)
	  %% Line 933
	  <[{'event_handler',Node,HOrHs,Args}|Ts],Spec> when 'true' ->
	      %% Line 934
	      apply 'add_tests'/2
		  ([{'event_handler',Node,{HOrHs,Args}}|Ts], Spec)
	  %% Line 936
	  <[{'enable_builtin_hooks',Bool}|Ts],Spec> when 'true' ->
	      %% Line 937
	      case Spec of
		<{'testspec',_cor1311,_cor1312,_cor1313,_cor1314,_cor1315,_cor1316,_cor1317,_cor1318,_cor1319,_cor1320,_cor1321,_cor1322,_cor1323,_cor1324,_cor1325,_cor1326,_cor1327,_cor1328,_cor1329,_cor1330,_cor1331,_cor1332,_cor1333,_cor1334,_cor1335,_cor1336,_cor1337,_cor1338}> when 'true' ->
		    let <_cor144> =
			call 'erlang':'setelement'
			    (18, Spec, Bool)
		    in  apply 'add_tests'/2
			    (Ts, _cor144)
		( <_cor1339> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','testspec'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 939
	  <[{'release_shell',Bool}|Ts],Spec> when 'true' ->
	      %% Line 940
	      case Spec of
		<{'testspec',_cor1340,_cor1341,_cor1342,_cor1343,_cor1344,_cor1345,_cor1346,_cor1347,_cor1348,_cor1349,_cor1350,_cor1351,_cor1352,_cor1353,_cor1354,_cor1355,_cor1356,_cor1357,_cor1358,_cor1359,_cor1360,_cor1361,_cor1362,_cor1363,_cor1364,_cor1365,_cor1366,_cor1367}> when 'true' ->
		    let <_cor147> =
			call 'erlang':'setelement'
			    (19, Spec, Bool)
		    in  apply 'add_tests'/2
			    (Ts, _cor147)
		( <_cor1368> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','testspec'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 943
	  <[{'set_merge_tests',_cor1369}|Ts],Spec> when 'true' ->
	      %% Line 944
	      apply 'add_tests'/2
		  (Ts, Spec)
	  %% Line 946
	  <[{'define',_cor1370,_cor1371}|Ts],Spec> when 'true' ->
	      %% Line 947
	      apply 'add_tests'/2
		  (Ts, Spec)
	  %% Line 949
	  <[{'alias',_cor1372,_cor1373}|Ts],Spec> when 'true' ->
	      %% Line 950
	      apply 'add_tests'/2
		  (Ts, Spec)
	  %% Line 952
	  <[{'node',_cor1374,_cor1375}|Ts],Spec> when 'true' ->
	      %% Line 953
	      apply 'add_tests'/2
		  (Ts, Spec)
	  %% Line 955
	  <[{'merge_tests',_cor1376}|Ts],Spec> when 'true' ->
	      %% Line 956
	      apply 'add_tests'/2
		  (Ts, Spec)
	  %% Line 958
	  <[{'specs',_cor1377,_cor1378}|Ts],Spec> when 'true' ->
	      %% Line 959
	      apply 'add_tests'/2
		  (Ts, Spec)
	  %% Line 969
	  <[Term = {Tag,'all_nodes',Data}|Ts],Spec> when 'true' ->
	      %% Line 970
	      case apply 'check_term'/1
		       (Term) of
		%% Line 971
		<'valid'> when 'true' ->
		    let <_cor154> =
			%% Line 972
			( letrec
			      'lc$^0'/1 =
				  fun (_cor151) ->
				      case _cor151 of
					<[Node|_cor149]> when 'true' ->
					    %% Line 973
					    ( case apply 'should_be_added'/4
						       (Tag, Node, Data, Spec) of
						<'true'> when 'true' ->
						    let <_cor152> =
							apply 'lc$^0'/1
							    (_cor149)
						    in  ( [{Tag,Node,Data}|_cor152]
							  -| ['compiler_generated'] )
						( <'false'> when 'true' ->
						      apply 'lc$^0'/1
							  (_cor149)
						  -| ['compiler_generated'] )
						( <_cor153> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor153})
						  -| ['compiler_generated'] )
					      end
					      -| ['list_comprehension'] )
					<[]> when 'true' ->
					    []
					( <_cor151> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor151})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  let <_cor150> =
				  apply 'list_nodes'/1
				      (Spec)
			      in  apply 'lc$^0'/1
				      (_cor150)
			  -| ['list_comprehension'] )
		    in  let <_cor156> =
			    %% Line 974
			    call 'erlang':'++'
				(_cor154, Ts)
			in  %% Line 974
			    apply 'add_tests'/2
				(_cor156, Spec)
		%% Line 975
		<'invalid'> when 'true' ->
		    %% Line 976
		    apply 'add_tests'/2
			(Ts, Spec)
		( <_cor157> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor157})
		  -| ['compiler_generated'] )
	      end
	  %% Line 979
	  <[{Tag,[],Data}|Ts],Spec> when 'true' ->
	      %% Line 980
	      apply 'add_tests'/2
		  ([{Tag,'all_nodes',Data}|Ts], Spec)
	  %% Line 981
	  <[{Tag,String = [Ch|_cor1379],Data}|Ts],Spec>
	      when call 'erlang':'is_integer'
		    (Ch) ->
	      %% Line 982
	      apply 'add_tests'/2
		  ([{Tag,'all_nodes',{String,Data}}|Ts], Spec)
	  %% Line 983
	  <[{Tag,NodesOrOther,Data}|Ts],Spec>
	      when call 'erlang':'is_list'
		    (NodesOrOther) ->
	      let <_cor162> =
		  %% Line 984
		  ( fun (_cor160) ->
			( case Spec of
			    ( <( {'testspec',_cor1380,_rec68,_cor1381,_cor1382,_cor1383,_cor1384,_cor1385,_cor1386,_cor1387,_cor1388,_cor1389,_cor1390,_cor1391,_cor1392,_cor1393,_cor1394,_cor1395,_cor1396,_cor1397,_cor1398,_cor1399,_cor1400,_cor1401,_cor1402,_cor1403,_cor1404,_cor1405,_cor1406}
				 -| ['compiler_generated'] )> when 'true' ->
				  apply 'is_node'/2
				      (_cor160, _rec68)
			      -| ['compiler_generated'] )
			    ( <_cor1407> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','testspec'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| [{'id',{0,0,'-add_tests/2-fun-0-'}}] )
	      in  %% Line 984
		  case call 'lists':'all'
			   (_cor162, %% Line 985
				     NodesOrOther) of
		    %% Line 986
		    <'true'> when 'true' ->
			%% Line 987
			( case Spec of
			    ( <( {'testspec',_cor1408,_rec69,_cor1409,_cor1410,_cor1411,_cor1412,_cor1413,_cor1414,_cor1415,_cor1416,_cor1417,_cor1418,_cor1419,_cor1420,_cor1421,_cor1422,_cor1423,_cor1424,_cor1425,_cor1426,_cor1427,_cor1428,_cor1429,_cor1430,_cor1431,_cor1432,_cor1433,_cor1434}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <Ts1> =
				      apply 'per_node'/5
					  (NodesOrOther, Tag, [Data|[]], Ts, _rec69)
				  in  %% Line 988
				      apply 'add_tests'/2
					  (Ts1, Spec)
			      -| ['compiler_generated'] )
			    ( <_cor1435> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','testspec'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 989
		    <'false'> when 'true' ->
			%% Line 990
			apply 'add_tests'/2
			    ([{Tag,'all_nodes',{NodesOrOther,Data}}|Ts], Spec)
		    ( <_cor166> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor166})
		      -| ['compiler_generated'] )
		  end
	  %% Line 993
	  <[Term = {Tag,NodeOrOther,Data}|Ts],Spec> when 'true' ->
	      %% Line 994
	      ( case Spec of
		  ( <( {'testspec',_cor1436,_rec70,_cor1437,_cor1438,_cor1439,_cor1440,_cor1441,_cor1442,_cor1443,_cor1444,_cor1445,_cor1446,_cor1447,_cor1448,_cor1449,_cor1450,_cor1451,_cor1452,_cor1453,_cor1454,_cor1455,_cor1456,_cor1457,_cor1458,_cor1459,_cor1460,_cor1461,_cor1462}
		       -| ['compiler_generated'] )> when 'true' ->
			case apply 'is_node'/2
				 (NodeOrOther, _rec70) of
			  %% Line 995
			  <'true'> when 'true' ->
			      %% Line 996
			      case apply 'check_term'/1
				       (Term) of
				%% Line 997
				<'valid'> when 'true' ->
				    let <Node> =
					%% Line 998
					apply 'ref2node'/2
					    (NodeOrOther, _rec70)
				    in  let <_cor173> =
					    %% Line 1000
					    apply 'update_recorded'/3
						(Tag, Node, Spec)
					in  let <_cor172> =
						%% Line 1001
						apply 'handle_data'/4
						    (Tag, Node, Data, Spec)
					    in  let <NodeIxData> =
						    %% Line 1000
						    call 'erlang':'++'
							(_cor173, _cor172)
						in  let <_cor175> =
							%% Line 1002
							apply 'mod_field'/3
							    (Spec, Tag, NodeIxData)
						    in  %% Line 1002
							apply 'add_tests'/2
							    (Ts, _cor175)
				%% Line 1003
				<'invalid'> when 'true' ->
				    %% Line 1004
				    apply 'add_tests'/2
					(Ts, Spec)
				( <_cor176> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor176})
				  -| ['compiler_generated'] )
			      end
			  %% Line 1006
			  <'false'> when 'true' ->
			      %% Line 1007
			      apply 'add_tests'/2
				  ([{Tag,'all_nodes',{NodeOrOther,Data}}|Ts], Spec)
			  ( <_cor177> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor177})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor1463> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','testspec'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1010
	  <[Term = {Tag,Data}|Ts],Spec> when 'true' ->
	      %% Line 1011
	      case apply 'check_term'/1
		       (Term) of
		%% Line 1012
		<'valid'> when 'true' ->
		    %% Line 1013
		    apply 'add_tests'/2
			([{Tag,'all_nodes',Data}|Ts], Spec)
		%% Line 1014
		<'invalid'> when 'true' ->
		    %% Line 1015
		    apply 'add_tests'/2
			(Ts, Spec)
		( <_cor178> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor178})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1018
	  <[Other|Ts],Spec> when 'true' ->
	      %% Line 1019
	      case call 'erlang':'get'
		       ('relaxed') of
		%% Line 1020
		<'true'> when 'true' ->
		    %% Line 1021
		    apply 'add_tests'/2
			(Ts, Spec)
		%% Line 1022
		<'false'> when 'true' ->
		    %% Line 1023
		    call 'erlang':'throw'
			({'error',{'undefined_term_in_spec',Other}})
		( <_cor179> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor179})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1026
	  <[],Spec> when 'true' ->
	      %% Line 1027
	      Spec
	  ( <_cor181,_cor180> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor181,_cor180})
		  -| [{'function_name',{'add_tests',2}}] )
	    -| ['compiler_generated'] )
	end
'check_term'/1 =
    %% Line 1032
    fun (_cor0) ->
	case _cor0 of
	  <Term>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      let <Size> =
		  %% Line 1033
		  call 'erlang':'size'
		      (Term)
	      in  %% Line 1034
		  case call 'erlang':'tuple_to_list'
			   (Term) of
		    <[Name|_cor10]> when 'true' ->
			let <Valid> =
			    %% Line 1035
			    apply 'valid_terms'/0
				()
			in  %% Line 1036
			    case call 'lists':'member'
				     ({Name,Size}, Valid) of
			      %% Line 1037
			      <'true'> when 'true' ->
				  %% Line 1038
				  'valid'
			      %% Line 1039
			      <'false'> when 'true' ->
				  %% Line 1040
				  case call 'lists':'keymember'
					   (Name, 1, Valid) of
				    %% Line 1041
				    <'true'> when 'true' ->
					%% Line 1042
					call 'erlang':'throw'
					    ({'error',{'bad_term_in_spec',Term}})
				    %% Line 1043
				    <'false'> when 'true' ->
					%% Line 1044
					case call 'erlang':'get'
						 ('relaxed') of
					  %% Line 1045
					  <'true'> when 'true' ->
					      let <_cor4> =
						  %% Line 1047
						  call 'erlang':'size'
						      (Term)
					      in  %% Line 1047
						  case apply 'resembles_ct_term'/2
							   (Name, _cor4) of
						    %% Line 1048
						    <'true'> when 'true' ->
							do  %% Line 1049
							    call 'io':'format'
								([126|[110|[83|[117|[115|[112|[105|[99|[105|[111|[117|[115|[32|[116|[101|[114|[109|[44|[32|[112|[108|[101|[97|[115|[101|[32|[99|[104|[101|[99|[107|[58|[126|[110|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1051
																																			    [Term|[]])
							    %% Line 1052
							    'invalid'
						    %% Line 1053
						    <'false'> when 'true' ->
							%% Line 1054
							'invalid'
						    ( <_cor5> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor5})
						      -| ['compiler_generated'] )
						  end
					  %% Line 1056
					  <'false'> when 'true' ->
					      %% Line 1057
					      call 'erlang':'throw'
						  ({'error',{'undefined_term_in_spec',Term}})
					  ( <_cor6> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor6})
					    -| ['compiler_generated'] )
					end
				    ( <_cor7> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor7})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor8})
				-| ['compiler_generated'] )
			    end
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'check_term',1}}] )
	    -| ['compiler_generated'] )
	end
'handle_data'/4 =
    %% Line 1065
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'logdir',Node,Dir,Spec> when 'true' ->
	      let <_cor4> =
		  %% Line 1066
		  apply 'ref2dir'/2
		      (Dir, Spec)
	      in  %% Line 1066
		  [{Node,_cor4}|[]]
	  %% Line 1067
	  <'cover',Node,File,Spec> when 'true' ->
	      let <_cor5> =
		  %% Line 1068
		  apply 'get_absfile'/2
		      (File, Spec)
	      in  %% Line 1068
		  [{Node,_cor5}|[]]
	  %% Line 1069
	  <'cover_stop',Node,Stop,_X_Spec> when 'true' ->
	      %% Line 1070
	      [{Node,Stop}|[]]
	  %% Line 1071
	  <'include',Node,Dirs = [D|_cor48],Spec>
	      when call 'erlang':'is_list'
		    (D) ->
	      %% Line 1072
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor8) ->
			    case _cor8 of
			      <[Dir|_cor7]> when 'true' ->
				  let <_cor9> =
				      apply 'ref2dir'/2
					  (Dir, Spec)
				  in  let <_cor10> =
					  apply 'lc$^0'/1
					      (_cor7)
				      in  ( [{Node,_cor9}|_cor10]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor8> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor8})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(Dirs)
		-| ['list_comprehension'] )
	  %% Line 1073
	  <'include',Node,Dir = [Ch|_cor49],Spec>
	      when call 'erlang':'is_integer'
		    (Ch) ->
	      %% Line 1074
	      apply 'handle_data'/4
		  ('include', Node, [Dir|[]], Spec)
	  %% Line 1075
	  <'config',Node,File = [Ch|_cor50],Spec>
	      when call 'erlang':'is_integer'
		    (Ch) ->
	      %% Line 1076
	      apply 'handle_data'/4
		  ('config', Node, [File|[]], Spec)
	  %% Line 1077
	  <'config',Node,{CfgDir,File = [Ch|_cor51]},Spec>
	      when call 'erlang':'is_integer'
		    (Ch) ->
	      %% Line 1078
	      apply 'handle_data'/4
		  ('config', Node, {CfgDir,[File|[]]}, Spec)
	  %% Line 1079
	  <'config',Node,Files = [F|_cor52],Spec>
	      when call 'erlang':'is_list'
		    (F) ->
	      %% Line 1080
	      ( letrec
		    'lc$^1'/1 =
			fun (_cor13) ->
			    case _cor13 of
			      <[File|_cor12]> when 'true' ->
				  let <_cor14> =
				      apply 'get_absfile'/2
					  (File, Spec)
				  in  let <_cor15> =
					  apply 'lc$^1'/1
					      (_cor12)
				      in  ( [{Node,_cor14}|_cor15]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor13> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor13})
				      -| [{'function_name',{'lc$^1',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^1'/1
			(Files)
		-| ['list_comprehension'] )
	  %% Line 1081
	  <'config',Node,{CfgDir,Files = [F|_cor53]},Spec>
	      when call 'erlang':'is_list'
		    (F) ->
	      %% Line 1082
	      ( letrec
		    'lc$^2'/1 =
			fun (_cor18) ->
			    case _cor18 of
			      <[File|_cor17]> when 'true' ->
				  let <_cor19> =
				      apply 'ref2dir'/2
					  (CfgDir, Spec)
				  in  let <_cor20> =
					  call 'filename':'join'
					      (_cor19, File)
				      in  let <_cor21> =
					      apply 'lc$^2'/1
						  (_cor17)
					  in  ( [{Node,_cor20}|_cor21]
						-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor18> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor18})
				      -| [{'function_name',{'lc$^2',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^2'/1
			(Files)
		-| ['list_comprehension'] )
	  %% Line 1083
	  <'userconfig',Node,CBs,Spec>
	      when call 'erlang':'is_list'
		    (CBs) ->
	      %% Line 1084
	      ( letrec
		    'lc$^3'/1 =
			fun (_cor24) ->
			    case _cor24 of
			      <[%% Line 1085
				{Callback,Config}|_cor23]> when 'true' ->
				  let <_cor25> =
				      apply 'get_absfile'/3
					  (Callback, Config, Spec)
				  in  let <_cor26> =
					  %% Line 1085
					  apply 'lc$^3'/1
					      (_cor23)
				      in  ( [{Node,{Callback,_cor25}}|_cor26]
					    -| ['compiler_generated'] )
			      ( <[_cor22|_cor23]> when 'true' ->
				    %% Line 1085
				    apply 'lc$^3'/1
					(_cor23)
				-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor24> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor24})
				      -| [{'function_name',{'lc$^3',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^3'/1
			(%% Line 1085
			 CBs)
		-| ['list_comprehension'] )
	  %% Line 1086
	  <'userconfig',Node,CB,Spec>
	      when call 'erlang':'is_tuple'
		    (CB) ->
	      %% Line 1087
	      apply 'handle_data'/4
		  ('userconfig', Node, [CB|[]], Spec)
	  %% Line 1088
	  <'event_handler',Node,H,Spec>
	      when call 'erlang':'is_atom'
		    (H) ->
	      %% Line 1089
	      apply 'handle_data'/4
		  ('event_handler', Node, {[H|[]],[]}, Spec)
	  %% Line 1090
	  <'event_handler',Node,{H,Args},Spec>
	      when call 'erlang':'is_atom'
		    (H) ->
	      %% Line 1091
	      apply 'handle_data'/4
		  ('event_handler', Node, {[H|[]],Args}, Spec)
	  %% Line 1092
	  <'event_handler',Node,Hs,_X_Spec>
	      when call 'erlang':'is_list'
		    (Hs) ->
	      %% Line 1093
	      ( letrec
		    'lc$^4'/1 =
			fun (_cor29) ->
			    case _cor29 of
			      <[EvH|_cor28]> when 'true' ->
				  let <_cor30> =
				      apply 'lc$^4'/1
					  (_cor28)
				  in  ( [{Node,EvH,[]}|_cor30]
					-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor29> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor29})
				      -| [{'function_name',{'lc$^4',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^4'/1
			(Hs)
		-| ['list_comprehension'] )
	  %% Line 1094
	  <'event_handler',Node,{Hs,Args},_X_Spec>
	      when call 'erlang':'is_list'
		    (Hs) ->
	      %% Line 1095
	      ( letrec
		    'lc$^5'/1 =
			fun (_cor33) ->
			    case _cor33 of
			      <[EvH|_cor32]> when 'true' ->
				  let <_cor34> =
				      apply 'lc$^5'/1
					  (_cor32)
				  in  ( [{Node,EvH,Args}|_cor34]
					-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor33> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor33})
				      -| [{'function_name',{'lc$^5',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^5'/1
			(Hs)
		-| ['list_comprehension'] )
	  %% Line 1096
	  <'ct_hooks',Node,Hooks,_X_Spec>
	      when call 'erlang':'is_list'
		    (Hooks) ->
	      %% Line 1097
	      ( letrec
		    'lc$^6'/1 =
			fun (_cor37) ->
			    case _cor37 of
			      <[Hook|_cor36]> when 'true' ->
				  let <_cor38> =
				      apply 'lc$^6'/1
					  (_cor36)
				  in  ( [{Node,Hook}|_cor38]
					-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor37> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor37})
				      -| [{'function_name',{'lc$^6',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^6'/1
			(Hooks)
		-| ['list_comprehension'] )
	  %% Line 1098
	  <'ct_hooks',Node,Hook,_X_Spec> when 'true' ->
	      %% Line 1099
	      [{Node,Hook}|[]]
	  %% Line 1100
	  <'stylesheet',Node,CSSFile,Spec> when 'true' ->
	      let <_cor39> =
		  %% Line 1101
		  apply 'get_absfile'/2
		      (CSSFile, Spec)
	      in  %% Line 1101
		  [{Node,_cor39}|[]]
	  %% Line 1102
	  <'verbosity',Node,VLvls,_X_Spec>
	      when call 'erlang':'is_integer'
		    (VLvls) ->
	      %% Line 1103
	      [{Node,[{'$unspecified',VLvls}|[]]}|[]]
	  %% Line 1104
	  <'verbosity',Node,VLvls,_X_Spec>
	      when call 'erlang':'is_list'
		    (VLvls) ->
	      let <_cor42> =
		  %% Line 1105
		  ( fun (_cor40) ->
			case _cor40 of
			  <VLvl = {_X_Cat,_X_Lvl}> when 'true' ->
			      VLvl
			  %% Line 1106
			  <Lvl> when 'true' ->
			      {'$unspecified',Lvl}
			end
		    -| [{'id',{0,0,'-handle_data/4-fun-0-'}}] )
	      in  let <VLvls1> =
		      %% Line 1105
		      call 'lists':'map'
			  (_cor42, %% Line 1106
				   VLvls)
		  in  %% Line 1107
		      [{Node,VLvls1}|[]]
	  %% Line 1108
	  <'silent_connections',Node,'all',_X_Spec> when 'true' ->
	      %% Line 1109
	      [{Node,['all']}|[]]
	  %% Line 1110
	  <'silent_connections',Node,Conn,_X_Spec>
	      when call 'erlang':'is_atom'
		    (Conn) ->
	      %% Line 1111
	      [{Node,[Conn|[]]}|[]]
	  %% Line 1112
	  <'silent_connections',Node,Conns,_X_Spec> when 'true' ->
	      %% Line 1113
	      [{Node,Conns}|[]]
	  %% Line 1114
	  <_X_Tag,Node,Data,_X_Spec> when 'true' ->
	      %% Line 1115
	      [{Node,Data}|[]]
	end
'should_be_added'/4 =
    %% Line 1118
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1119
	case <> of
	  %% Line 1121
	  <>
	      when let <_cor4> =
		    call 'erlang':'=:='
			(_cor3, 'logdir')
		in  let <_cor5> =
			call 'erlang':'=:='
			    (_cor3, 'logopts')
		    in  let <_cor6> =
			    %% Line 1122
			    call 'erlang':'=:='
				(_cor3, 'basic_html')
			in  let <_cor7> =
				%% Line 1122
				call 'erlang':'=:='
				    (_cor3, 'label')
			    in  let <_cor8> =
				    %% Line 1123
				    call 'erlang':'=:='
					(_cor3, 'auto_compile')
				in  let <_cor9> =
					%% Line 1123
					call 'erlang':'=:='
					    (_cor3, 'abort_if_missing_suites')
				    in  let <_cor10> =
					    %% Line 1124
					    call 'erlang':'=:='
						(_cor3, 'stylesheet')
					in  let <_cor11> =
						%% Line 1124
						call 'erlang':'=:='
						    (_cor3, 'verbosity')
					    in  let <_cor12> =
						    %% Line 1125
						    call 'erlang':'=:='
							(_cor3, 'silent_connections')
						in  let <_cor13> =
							%% Line 1124
							call 'erlang':'or'
							    (_cor11, _cor12)
						    in  let <_cor14> =
							    %% Line 1124
							    call 'erlang':'or'
								(_cor10, _cor13)
							in  let <_cor15> =
								%% Line 1123
								call 'erlang':'or'
								    (_cor9, _cor14)
							    in  let <_cor16> =
								    %% Line 1123
								    call 'erlang':'or'
									(_cor8, _cor15)
								in  let <_cor17> =
									%% Line 1122
									call 'erlang':'or'
									    (_cor7, _cor16)
								    in  let <_cor18> =
									    %% Line 1122
									    call 'erlang':'or'
										(_cor6, _cor17)
									in  let <_cor19> =
										call 'erlang':'or'
										    (_cor5, _cor18)
									    in  call 'erlang':'or'
										    (_cor4, _cor19) ->
	      %% Line 1126
	      ( case _cor0 of
		  ( <( {'testspec',_cor29,_rec72,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor23> =
			    apply 'ref2node'/2
				(_cor2, _rec72)
			in  let <_cor20> =
				%% Line 1127
				apply 'read_field'/2
				    (_cor0, _cor3)
			    in  let <_cor24> =
				    call 'lists':'keymember'
					(_cor23, 1, _cor20)
				in  %% Line 1127
				    call 'erlang':'=:='
					(_cor24, 'false')
		    -| ['compiler_generated'] )
		  ( <_cor56> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','testspec'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1129
	  <> when 'true' ->
	      %% Line 1130
	      'true'
	end
'update_recorded'/3 =
    %% Line 1134
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1135
	case <> of
	  <>
	      when let <_cor3> =
		    call 'erlang':'=:='
			(_cor2, 'config')
		in  let <_cor4> =
			call 'erlang':'=:='
			    (_cor2, 'userconfig')
		    in  let <_cor5> =
			    call 'erlang':'=:='
				(_cor2, 'event_handler')
			in  let <_cor6> =
				%% Line 1136
				call 'erlang':'=:='
				    (_cor2, 'ct_hooks')
			    in  let <_cor7> =
				    %% Line 1136
				    call 'erlang':'=:='
					(_cor2, 'include')
				in  let <_cor8> =
					%% Line 1136
					call 'erlang':'or'
					    (_cor6, _cor7)
				    in  let <_cor9> =
					    call 'erlang':'or'
						(_cor5, _cor8)
					in  let <_cor10> =
						call 'erlang':'or'
						    (_cor4, _cor9)
					    in  call 'erlang':'or'
						    (_cor3, _cor10) ->
	      %% Line 1137
	      apply 'read_field'/2
		  (_cor0, _cor2)
	  %% Line 1138
	  <> when 'true' ->
	      let <_cor11> =
		  %% Line 1140
		  apply 'read_field'/2
		      (_cor0, _cor2)
	      in  %% Line 1140
		  call 'lists':'keydelete'
		      (_cor1, 1, _cor11)
	end
'per_node'/5 =
    %% Line 1144
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Separated> =
	    %% Line 1145
	    apply 'per_node'/4
		(_cor4, _cor3, _cor2, _cor0)
	in  %% Line 1146
	    call 'erlang':'++'
		(Separated, _cor1)
'per_node'/4 =
    %% Line 1147
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[N|Ns],Tag,Data,Refs> when 'true' ->
	      let <_cor4> =
		  %% Line 1148
		  apply 'ref2node'/2
		      (N, Refs)
	      in  let <_cor5> =
		      %% Line 1148
		      call 'erlang':'list_to_tuple'
			  ([Tag|[_cor4|Data]])
		  in  let <_cor6> =
			  %% Line 1148
			  apply 'per_node'/4
			      (Ns, Tag, Data, Refs)
		      in  %% Line 1148
			  [_cor5|_cor6]
	  %% Line 1149
	  <[],_cor11,_cor12,_cor13> when 'true' ->
	      %% Line 1150
	      []
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'per_node',4}}] )
	    -| ['compiler_generated'] )
	end
'read_field'/2 =
    %% Line 1153
    fun (_cor1,_cor0) ->
	catch
	    let <_cor7> =
		%% Line 1154
		( fun (_cor4,_cor3) ->
		      case <_cor4,_cor3> of
			<F,Pos>
			    when call 'erlang':'=='
				  (F,
				   _cor0) ->
			    let <_cor2> =
				%% Line 1155
				call 'erlang':'element'
				    (Pos, _cor1)
			    in  %% Line 1155
				call 'erlang':'throw'
				    (_cor2)
			%% Line 1156
			<_cor10,Pos> when 'true' ->
			    %% Line 1157
			    call 'erlang':'+'
				(Pos, 1)
		      end
		  -| [{'id',{0,0,'-read_field/2-fun-0-'}}] )
	    in  %% Line 1154
		call 'lists':'foldl'
		    (_cor7, %% Line 1158
			    2, %% Line 1158
			       ['spec_dir'|['nodes'|['init'|['label'|['profile'|['logdir'|['logopts'|['basic_html'|['verbosity'|['silent_connections'|['cover'|['cover_stop'|['config'|['userconfig'|['event_handler'|['ct_hooks'|['enable_builtin_hooks'|['release_shell'|['include'|['auto_compile'|['abort_if_missing_suites'|['stylesheet'|['multiply_timetraps'|['scale_timetraps'|['create_priv_dir'|['alias'|['tests'|['merge_tests']]]]]]]]]]]]]]]]]]]]]]]]]]]])
'mod_field'/3 =
    %% Line 1161
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1162
	case call 'erlang':'tuple_to_list'
		 (_cor2) of
	  <[_X_testspec|RecList]> when 'true' ->
	      let <_cor11> =
		  catch
		      let <_cor10> =
			  %% Line 1164
			  ( fun (_cor7,_cor6) ->
				case <_cor7,_cor6> of
				  <F,{Prev,[_X_OldVal|Rest]}>
				      when call 'erlang':'=='
					    (F,
					     _cor1) ->
				      let <_cor4> =
					  %% Line 1165
					  call 'lists':'reverse'
					      (Prev)
				      in  let <_cor5> =
					      %% Line 1165
					      call 'erlang':'++'
						  (_cor4, [_cor0|Rest])
					  in  %% Line 1165
					      call 'erlang':'throw'
						  (_cor5)
				  %% Line 1166
				  <_cor16,{Prev,[Field|Rest]}> when 'true' ->
				      %% Line 1167
				      {[Field|Prev],Rest}
				  ( <_cor9,_cor8> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor9,_cor8})
					  -| [{'function_name',{'-mod_field/3-fun-0-',2}}] )
				    -| ['compiler_generated'] )
				end
			    -| [{'id',{0,0,'-mod_field/3-fun-0-'}}] )
		      in  %% Line 1164
			  call 'lists':'foldl'
			      (_cor10, %% Line 1168
				       {[],RecList}, %% Line 1168
						     ['spec_dir'|['nodes'|['init'|['label'|['profile'|['logdir'|['logopts'|['basic_html'|['verbosity'|['silent_connections'|['cover'|['cover_stop'|['config'|['userconfig'|['event_handler'|['ct_hooks'|['enable_builtin_hooks'|['release_shell'|['include'|['auto_compile'|['abort_if_missing_suites'|['stylesheet'|['multiply_timetraps'|['scale_timetraps'|['create_priv_dir'|['alias'|['tests'|['merge_tests']]]]]]]]]]]]]]]]]]]]]]]]]]]])
	      in  %% Line 1169
		  call 'erlang':'list_to_tuple'
		      (['testspec'|_cor11])
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'insert_suites'/5 =
    %% Line 1182
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Node,Dir,[S|Ss],Tests,MergeTests> when 'true' ->
	      let <Tests1> =
		  %% Line 1183
		  apply 'insert_cases'/6
		      (Node, Dir, S, 'all', Tests, MergeTests)
	      in  %% Line 1184
		  apply 'insert_suites'/5
		      (Node, Dir, Ss, Tests1, MergeTests)
	  %% Line 1185
	  <_X_Node,_X_Dir,[],Tests,_X_MergeTests> when 'true' ->
	      %% Line 1186
	      Tests
	  %% Line 1187
	  <Node,Dir,S,Tests,MergeTests> when 'true' ->
	      %% Line 1188
	      apply 'insert_suites'/5
		  (Node, Dir, [S|[]], Tests, MergeTests)
	end
'insert_groups'/7 =
    %% Line 1190
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Node,Dir,Suite,Group,Cases,Tests,MergeTests>
	      when let <_cor7> =
		    %% Line 1191
		    call 'erlang':'is_atom'
			(Group)
		in  let <_cor8> =
			%% Line 1191
			call 'erlang':'is_tuple'
			    (Group)
		    in  %% Line 1191
			call 'erlang':'or'
			    (_cor7, _cor8) ->
	      %% Line 1192
	      apply 'insert_groups'/7
		  (Node, Dir, Suite, [Group|[]], Cases, Tests, MergeTests)
	  %% Line 1193
	  <Node,Dir,Suite,Groups,Cases,Tests,'false'>
	      when %% Line 1194
		try
		    let <_cor9> =
			call 'erlang':'=:='
			    (Cases, 'all')
		    in  let <_cor10> =
			    call 'erlang':'is_list'
				(Cases)
			in  let <_cor11> =
				call 'erlang':'or'
				    (_cor9, _cor10)
			    in  let <_cor12> =
				    call 'erlang':'is_list'
					(Groups)
				in  call 'erlang':'and'
					(_cor11, _cor12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor18> =
		  %% Line 1195
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor15) ->
				case _cor15 of
				  <[%% Line 1198
				    Gr|_cor14]> when 'true' ->
				      let <_cor16> =
					  case <> of
					    <>
						when call 'erlang':'is_list'
						      (Gr) ->
						%% Line 1196
						{[Gr|[]],Cases}
					    %% Line 1197
					    <> when 'true' ->
						%% Line 1198
						{Gr,Cases}
					  end
				      in  let <_cor17> =
					      %% Line 1198
					      apply 'lc$^0'/1
						  (_cor14)
					  in  ( [_cor16|_cor17]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor15> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor15})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (%% Line 1198
			     Groups)
		    -| ['list_comprehension'] )
	      in  %% Line 1199
		  apply 'append'/2
		      ({{Node,Dir},[{Suite,_cor18}|[]]}, Tests)
	  %% Line 1200
	  <Node,Dir,Suite,Groups,Cases,Tests,'true'>
	      when %% Line 1201
		try
		    let <_cor20> =
			call 'erlang':'=:='
			    (Cases, 'all')
		    in  let <_cor21> =
			    call 'erlang':'is_list'
				(Cases)
			in  let <_cor22> =
				call 'erlang':'or'
				    (_cor20, _cor21)
			    in  let <_cor23> =
				    call 'erlang':'is_list'
					(Groups)
				in  call 'erlang':'and'
					(_cor22, _cor23)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor29> =
		  %% Line 1202
		  ( letrec
			'lc$^1'/1 =
			    fun (_cor26) ->
				case _cor26 of
				  <[%% Line 1205
				    Gr|_cor25]> when 'true' ->
				      let <_cor27> =
					  case <> of
					    <>
						when call 'erlang':'is_list'
						      (Gr) ->
						%% Line 1203
						{[Gr|[]],Cases}
					    %% Line 1204
					    <> when 'true' ->
						%% Line 1205
						{Gr,Cases}
					  end
				      in  let <_cor28> =
					      %% Line 1205
					      apply 'lc$^1'/1
						  (_cor25)
					  in  ( [_cor27|_cor28]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor26> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor26})
					  -| [{'function_name',{'lc$^1',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^1'/1
			    (%% Line 1205
			     Groups)
		    -| ['list_comprehension'] )
	      in  let <_cor40> =
		      %% Line 1207
		      ( fun (_cor37,_cor36) ->
			    case <_cor37,_cor36> of
			      <All = {{N,D},[{'all',_cor53}|[]]},{Replaced,_cor54}>
				  when let <_cor31> =
					call 'erlang':'=='
					    (N, Node)
				    in  let <_cor32> =
					    %% Line 1208
					    call 'erlang':'=='
						(D, Dir)
					in  call 'erlang':'and'
						(_cor31, _cor32) ->
				  %% Line 1209
				  {[All|Replaced],'true'}
			      %% Line 1210
			      <{{N,D},Suites0},{Replaced,_cor55}>
				  when let <_cor33> =
					call 'erlang':'=='
					    (N, Node)
				    in  let <_cor34> =
					    %% Line 1211
					    call 'erlang':'=='
						(D, Dir)
					in  call 'erlang':'and'
						(_cor33, _cor34) ->
				  let <Suites1> =
				      %% Line 1212
				      apply 'insert_groups1'/3
					  (Suite, _cor29, Suites0)
				  in  %% Line 1213
				      {[{{N,D},Suites1}|Replaced],'true'}
			      %% Line 1214
			      <T,{Replaced,Match}> when 'true' ->
				  %% Line 1215
				  {[T|Replaced],Match}
			      ( <_cor39,_cor38> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor39,_cor38})
				      -| [{'function_name',{'-insert_groups/7-fun-0-',2}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-insert_groups/7-fun-0-'}}] )
		  in  %% Line 1206
		      case %% Line 1207
			   call 'lists':'foldr'
			       (_cor40, %% Line 1216
					{[],'false'}, %% Line 1216
						      Tests) of
			<{Tests1,Done}> when 'true' ->
			    %% Line 1217
			    case <> of
			      <>
				  when let <_cor42> =
					call 'erlang':'=:='
					    (Done, 'false')
				    in  let <_cor43> =
					    call 'erlang':'is_boolean'
						(Done)
					in  call 'erlang':'and'
						(_cor42, _cor43) ->
				  %% Line 1218
				  call 'erlang':'++'
				      (Tests, [{{Node,Dir},[{Suite,_cor29}|[]]}|[]])
			      %% Line 1219
			      <> when 'true' ->
				  %% Line 1220
				  Tests1
			    end
			( <_cor41> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor41})
			  -| ['compiler_generated'] )
		      end
	  %% Line 1222
	  <Node,Dir,Suite,Groups,Case,Tests,MergeTests>
	      when %% Line 1223
		call 'erlang':'is_atom'
		    (Case) ->
	      let <_cor44> =
		  %% Line 1224
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (Case,
			       'all') ->
			'all'
		    <> when 'true' ->
			[Case|[]]
		  end
	      in  %% Line 1225
		  apply 'insert_groups'/7
		      (Node, Dir, Suite, Groups, _cor44, Tests, MergeTests)
	  ( <_cor52,_cor51,_cor50,_cor49,_cor48,_cor47,_cor46> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor52,_cor51,_cor50,_cor49,_cor48,_cor47,_cor46})
		  -| [{'function_name',{'insert_groups',7}}] )
	    -| ['compiler_generated'] )
	end
'insert_groups1'/3 =
    %% Line 1227
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Suite,_X_Groups,'all'> when 'true' ->
	      %% Line 1228
	      'all'
	  %% Line 1229
	  <Suite,Groups,Suites0> when 'true' ->
	      %% Line 1230
	      case call 'lists':'keysearch'
		       (Suite, 1, Suites0) of
		%% Line 1231
		<{'value',{_cor8,'all'}}>
		    when call 'erlang':'=:='
			  (_cor8,
			   Suite) ->
		    %% Line 1232
		    Suites0
		%% Line 1233
		<{'value',{_cor9,GrAndCases0}}>
		    when call 'erlang':'=:='
			  (_cor9,
			   Suite) ->
		    let <GrAndCases> =
			%% Line 1234
			apply 'insert_groups2'/2
			    (Groups, GrAndCases0)
		    in  %% Line 1235
			apply 'insert_in_order'/2
			    ({Suite,GrAndCases}, Suites0)
		%% Line 1236
		<'false'> when 'true' ->
		    %% Line 1237
		    apply 'insert_in_order'/2
			({Suite,Groups}, Suites0)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	end
'insert_groups2'/2 =
    %% Line 1240
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Groups,'all'> when 'true' ->
	      %% Line 1241
	      'all'
	  %% Line 1242
	  <[Group = {Gr,Cases}|Groups],GrAndCases> when 'true' ->
	      %% Line 1243
	      case call 'lists':'keysearch'
		       (Gr, 1, GrAndCases) of
		%% Line 1244
		<{'value',{_cor8,'all'}}>
		    when call 'erlang':'=:='
			  (_cor8,
			   Gr) ->
		    %% Line 1245
		    GrAndCases
		%% Line 1246
		<{'value',{_cor9,Cases0}}>
		    when call 'erlang':'=:='
			  (_cor9,
			   Gr) ->
		    let <Cases1> =
			%% Line 1247
			apply 'insert_in_order'/2
			    (Cases, Cases0)
		    in  let <_cor3> =
			    %% Line 1248
			    apply 'insert_in_order'/2
				({Gr,Cases1}, GrAndCases)
			in  %% Line 1248
			    apply 'insert_groups2'/2
				(Groups, _cor3)
		%% Line 1249
		<'false'> when 'true' ->
		    let <_cor4> =
			%% Line 1250
			apply 'insert_in_order'/2
			    (Group, GrAndCases)
		    in  %% Line 1250
			apply 'insert_groups2'/2
			    (Groups, _cor4)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1252
	  <[],GrAndCases> when 'true' ->
	      %% Line 1253
	      GrAndCases
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'insert_groups2',2}}] )
	    -| ['compiler_generated'] )
	end
'insert_cases'/6 =
    %% Line 1255
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Node,Dir,Suite,Cases,Tests,'false'>
	      when call 'erlang':'is_list'
		    (Cases) ->
	      %% Line 1256
	      apply 'append'/2
		  ({{Node,Dir},[{Suite,Cases}|[]]}, Tests)
	  %% Line 1257
	  <Node,Dir,Suite,Cases,Tests,'true'>
	      when call 'erlang':'is_list'
		    (Cases) ->
	      let <_cor15> =
		  %% Line 1259
		  ( fun (_cor12,_cor11) ->
			case <_cor12,_cor11> of
			  <All = {{N,D},[{'all',_cor26}|[]]},{Merged,_cor27}>
			      when let <_cor6> =
				    call 'erlang':'=='
					(N, Node)
				in  let <_cor7> =
					%% Line 1260
					call 'erlang':'=='
					    (D, Dir)
				    in  call 'erlang':'and'
					    (_cor6, _cor7) ->
			      %% Line 1261
			      {[All|Merged],'true'}
			  %% Line 1262
			  <{{N,D},Suites0},{Merged,_cor28}>
			      when let <_cor8> =
				    call 'erlang':'=='
					(N, Node)
				in  let <_cor9> =
					%% Line 1263
					call 'erlang':'=='
					    (D, Dir)
				    in  call 'erlang':'and'
					    (_cor8, _cor9) ->
			      let <Suites1> =
				  %% Line 1264
				  apply 'insert_cases1'/3
				      (Suite, Cases, Suites0)
			      in  %% Line 1265
				  {[{{N,D},Suites1}|Merged],'true'}
			  %% Line 1266
			  <T,{Merged,Match}> when 'true' ->
			      %% Line 1267
			      {[T|Merged],Match}
			  ( <_cor14,_cor13> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor14,_cor13})
				  -| [{'function_name',{'-insert_cases/6-fun-0-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-insert_cases/6-fun-0-'}}] )
	      in  %% Line 1258
		  case %% Line 1259
		       call 'lists':'foldr'
			   (_cor15, %% Line 1268
				    {[],'false'}, %% Line 1268
						  Tests) of
		    <{Tests1,Done}> when 'true' ->
			%% Line 1269
			case <> of
			  <>
			      when call 'erlang':'=:='
				    (Tests,
				     []) ->
			      let <_cor17> =
				  %% Line 1272
				  apply 'insert_cases1'/3
				      (Suite, Cases, [{Suite,[]}|[]])
			      in  %% Line 1272
				  [{{Node,Dir},_cor17}|[]]
			  %% Line 1273
			  <>
			      when let <_cor18> =
				    call 'erlang':'=:='
					(Done, 'false')
				in  let <_cor19> =
					call 'erlang':'is_boolean'
					    (Done)
				    in  call 'erlang':'and'
					    (_cor18, _cor19) ->
			      %% Line 1275
			      call 'erlang':'++'
				  (Tests, [{{Node,Dir},[{Suite,Cases}|[]]}|[]])
			  %% Line 1276
			  <> when 'true' ->
			      %% Line 1277
			      Tests1
			end
		    ( <_cor16> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor16})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1279
	  <Node,Dir,Suite,Case,Tests,MergeTests>
	      when call 'erlang':'is_atom'
		    (Case) ->
	      %% Line 1280
	      apply 'insert_cases'/6
		  (Node, Dir, Suite, [Case|[]], Tests, MergeTests)
	  ( <_cor25,_cor24,_cor23,_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23,_cor22,_cor21,_cor20})
		  -| [{'function_name',{'insert_cases',6}}] )
	    -| ['compiler_generated'] )
	end
'insert_cases1'/3 =
    %% Line 1282
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Suite,_X_Cases,'all'> when 'true' ->
	      %% Line 1283
	      'all'
	  %% Line 1284
	  <Suite,Cases,Suites0> when 'true' ->
	      %% Line 1285
	      case call 'lists':'keysearch'
		       (Suite, 1, Suites0) of
		%% Line 1286
		<{'value',{_cor8,'all'}}>
		    when call 'erlang':'=:='
			  (_cor8,
			   Suite) ->
		    %% Line 1287
		    Suites0
		%% Line 1288
		<{'value',{_cor9,Cases0}}>
		    when call 'erlang':'=:='
			  (_cor9,
			   Suite) ->
		    let <Cases1> =
			%% Line 1289
			apply 'insert_in_order'/2
			    (Cases, Cases0)
		    in  %% Line 1290
			apply 'insert_in_order'/2
			    ({Suite,Cases1}, Suites0)
		%% Line 1291
		<'false'> when 'true' ->
		    %% Line 1292
		    apply 'insert_in_order'/2
			({Suite,Cases}, Suites0)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	end
'skip_suites'/6 =
    %% Line 1295
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Node,Dir,[S|Ss],Cmt,Tests,MergeTests> when 'true' ->
	      let <Tests1> =
		  %% Line 1296
		  apply 'skip_cases'/7
		      (Node, Dir, S, 'all', Cmt, Tests, MergeTests)
	      in  %% Line 1297
		  apply 'skip_suites'/6
		      (Node, Dir, Ss, Cmt, Tests1, MergeTests)
	  %% Line 1298
	  <_X_Node,_X_Dir,[],_X_Cmt,Tests,_X_MergeTests> when 'true' ->
	      %% Line 1299
	      Tests
	  %% Line 1300
	  <Node,Dir,S,Cmt,Tests,MergeTests> when 'true' ->
	      %% Line 1301
	      apply 'skip_suites'/6
		  (Node, Dir, [S|[]], Cmt, Tests, MergeTests)
	end
'skip_groups'/8 =
    %% Line 1303
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Node,Dir,Suite,Group,'all',Cmt,Tests,MergeTests>
	      when %% Line 1304
		call 'erlang':'is_atom'
		    (Group) ->
	      %% Line 1305
	      apply 'skip_groups'/8
		  (Node, Dir, Suite, [Group|[]], 'all', Cmt, Tests, MergeTests)
	  %% Line 1306
	  <Node,Dir,Suite,Group,Cases,Cmt,Tests,MergeTests>
	      when %% Line 1307
		call 'erlang':'is_atom'
		    (Group) ->
	      %% Line 1308
	      apply 'skip_groups'/8
		  (Node, Dir, Suite, [Group|[]], Cases, Cmt, Tests, MergeTests)
	  %% Line 1309
	  <Node,Dir,Suite,Groups,Case,Cmt,Tests,MergeTests>
	      when let <_cor8> =
		    %% Line 1310
		    call 'erlang':'is_atom'
			(Case)
		in  let <_cor9> =
			%% Line 1310
			call 'erlang':'=/='
			    (Case, 'all')
		    in  %% Line 1310
			call 'erlang':'and'
			    (_cor8, _cor9) ->
	      %% Line 1311
	      apply 'skip_groups'/8
		  (Node, Dir, Suite, Groups, [Case|[]], Cmt, Tests, MergeTests)
	  %% Line 1312
	  <Node,Dir,Suite,Groups,Cases,Cmt,Tests,'false'>
	      when %% Line 1313
		try
		    let <_cor10> =
			call 'erlang':'=:='
			    (Cases, 'all')
		    in  let <_cor11> =
			    call 'erlang':'is_list'
				(Cases)
			in  let <_cor12> =
				call 'erlang':'or'
				    (_cor10, _cor11)
			    in  let <_cor13> =
				    call 'erlang':'is_list'
					(Groups)
				in  call 'erlang':'and'
					(_cor12, _cor13)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor18> =
		  %% Line 1314
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor16) ->
				case _cor16 of
				  <[Gr|_cor15]> when 'true' ->
				      let <_cor17> =
					  apply 'lc$^0'/1
					      (_cor15)
				      in  ( [{Gr,Cases}|_cor17]
					    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor16> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor16})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Groups)
		    -| ['list_comprehension'] )
	      in  let <Suites1> =
		      %% Line 1314
		      apply 'skip_groups1'/4
			  (Suite, _cor18, Cmt, [])
		  in  %% Line 1315
		      apply 'append'/2
			  ({{Node,Dir},Suites1}, Tests)
	  %% Line 1316
	  <Node,Dir,Suite,Groups,Cases,Cmt,Tests,'true'>
	      when %% Line 1317
		try
		    let <_cor20> =
			call 'erlang':'=:='
			    (Cases, 'all')
		    in  let <_cor21> =
			    call 'erlang':'is_list'
				(Cases)
			in  let <_cor22> =
				call 'erlang':'or'
				    (_cor20, _cor21)
			    in  let <_cor23> =
				    call 'erlang':'is_list'
					(Groups)
				in  call 'erlang':'and'
					(_cor22, _cor23)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor36> =
		  %% Line 1319
		  ( fun (_cor33,_cor32) ->
			case <_cor33,_cor32> of
			  <{{N,D},Suites0},{Merged,_cor56}>
			      when let <_cor24> =
				    call 'erlang':'=='
					(N, Node)
				in  let <_cor25> =
					%% Line 1320
					call 'erlang':'=='
					    (D, Dir)
				    in  call 'erlang':'and'
					    (_cor24, _cor25) ->
			      let <_cor30> =
				  %% Line 1322
				  ( letrec
					'lc$^1'/1 =
					    fun (_cor28) ->
						case _cor28 of
						  <[Gr|_cor27]> when 'true' ->
						      let <_cor29> =
							  apply 'lc$^1'/1
							      (_cor27)
						      in  ( [{Gr,Cases}|_cor29]
							    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_cor28> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor28})
							  -| [{'function_name',{'lc$^1',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  apply 'lc$^1'/1
					    (Groups)
				    -| ['list_comprehension'] )
			      in  let <Suites1> =
				      %% Line 1321
				      apply 'skip_groups1'/4
					  (Suite, _cor30, %% Line 1323
							  Cmt, %% Line 1323
							       Suites0)
				  in  %% Line 1324
				      {[{{N,D},Suites1}|Merged],'true'}
			  %% Line 1325
			  <T,{Merged,Match}> when 'true' ->
			      %% Line 1326
			      {[T|Merged],Match}
			  ( <_cor35,_cor34> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor35,_cor34})
				  -| [{'function_name',{'-skip_groups/8-fun-0-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-skip_groups/8-fun-0-'}}] )
	      in  %% Line 1318
		  case %% Line 1319
		       call 'lists':'foldr'
			   (_cor36, %% Line 1327
				    {[],'false'}, %% Line 1327
						  Tests) of
		    <{Tests1,Done}> when 'true' ->
			%% Line 1328
			case <> of
			  <>
			      when let <_cor38> =
				    call 'erlang':'=:='
					(Done, 'false')
				in  let <_cor39> =
					call 'erlang':'is_boolean'
					    (Done)
				    in  call 'erlang':'and'
					    (_cor38, _cor39) ->
			      let <_cor44> =
				  %% Line 1330
				  ( letrec
					'lc$^2'/1 =
					    fun (_cor42) ->
						case _cor42 of
						  <[Gr|_cor41]> when 'true' ->
						      let <_cor43> =
							  apply 'lc$^2'/1
							      (_cor41)
						      in  ( [{Gr,Cases}|_cor43]
							    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_cor42> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor42})
							  -| [{'function_name',{'lc$^2',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  apply 'lc$^2'/1
					    (Groups)
				    -| ['list_comprehension'] )
			      in  let <_cor45> =
				      %% Line 1329
				      apply 'skip_groups1'/4
					  (Suite, _cor44, %% Line 1331
							  Cmt, %% Line 1331
							       [])
				  in  %% Line 1329
				      call 'erlang':'++'
					  (Tests, [{{Node,Dir},_cor45}|%% Line 1331
								       []])
			  %% Line 1332
			  <> when 'true' ->
			      %% Line 1333
			      Tests1
			end
		    ( <_cor37> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor37})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1335
	  <Node,Dir,Suite,Groups,Case,Cmt,Tests,MergeTests>
	      when %% Line 1336
		call 'erlang':'is_atom'
		    (Case) ->
	      let <_cor46> =
		  %% Line 1337
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (Case,
			       'all') ->
			'all'
		    <> when 'true' ->
			[Case|[]]
		  end
	      in  %% Line 1338
		  apply 'skip_groups'/8
		      (Node, Dir, Suite, Groups, _cor46, Cmt, Tests, MergeTests)
	  ( <_cor55,_cor54,_cor53,_cor52,_cor51,_cor50,_cor49,_cor48> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor55,_cor54,_cor53,_cor52,_cor51,_cor50,_cor49,_cor48})
		  -| [{'function_name',{'skip_groups',8}}] )
	    -| ['compiler_generated'] )
	end
'skip_groups1'/4 =
    %% Line 1340
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 1341
	    ( fun (_cor4) ->
		  %% Line 1342
		  {_cor4,{'skip',_cor1}}
	      -| [{'id',{0,0,'-skip_groups1/4-fun-0-'}}] )
	in  let <SkipGroups> =
		%% Line 1341
		call 'lists':'map'
		    (_cor6, _cor2)
	    in  %% Line 1344
		case call 'lists':'keysearch'
			 (_cor3, 1, _cor0) of
		  %% Line 1345
		  <{'value',{_cor14,GrAndCases0}}>
		      when call 'erlang':'=:='
			    (_cor14,
			     _cor3) ->
		      let <GrAndCases1> =
			  %% Line 1346
			  call 'erlang':'++'
			      (GrAndCases0, SkipGroups)
		      in  %% Line 1347
			  apply 'insert_in_order'/2
			      ({_cor3,GrAndCases1}, _cor0)
		  %% Line 1348
		  <'false'> when 'true' ->
		      %% Line 1349
		      apply 'insert_in_order'/2
			  ({_cor3,SkipGroups}, _cor0)
		  ( <_cor9> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor9})
		    -| ['compiler_generated'] )
		end
'skip_cases'/7 =
    %% Line 1352
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Node,Dir,Suite,Cases,Cmt,Tests,'false'>
	      when call 'erlang':'is_list'
		    (Cases) ->
	      let <Suites1> =
		  %% Line 1353
		  apply 'skip_cases1'/4
		      (Suite, Cases, Cmt, [])
	      in  %% Line 1354
		  apply 'append'/2
		      ({{Node,Dir},Suites1}, Tests)
	  %% Line 1355
	  <Node,Dir,Suite,Cases,Cmt,Tests,'true'>
	      when call 'erlang':'is_list'
		    (Cases) ->
	      let <_cor15> =
		  %% Line 1357
		  ( fun (_cor12,_cor11) ->
			case <_cor12,_cor11> of
			  <{{N,D},Suites0},{Merged,_cor27}>
			      when let <_cor8> =
				    call 'erlang':'=='
					(N, Node)
				in  let <_cor9> =
					%% Line 1358
					call 'erlang':'=='
					    (D, Dir)
				    in  call 'erlang':'and'
					    (_cor8, _cor9) ->
			      let <Suites1> =
				  %% Line 1359
				  apply 'skip_cases1'/4
				      (Suite, Cases, Cmt, Suites0)
			      in  %% Line 1360
				  {[{{N,D},Suites1}|Merged],'true'}
			  %% Line 1361
			  <T,{Merged,Match}> when 'true' ->
			      %% Line 1362
			      {[T|Merged],Match}
			  ( <_cor14,_cor13> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor14,_cor13})
				  -| [{'function_name',{'-skip_cases/7-fun-0-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-skip_cases/7-fun-0-'}}] )
	      in  %% Line 1356
		  case %% Line 1357
		       call 'lists':'foldr'
			   (_cor15, %% Line 1363
				    {[],'false'}, %% Line 1363
						  Tests) of
		    <{Tests1,Done}> when 'true' ->
			%% Line 1364
			case <> of
			  <>
			      when let <_cor17> =
				    call 'erlang':'=:='
					(Done, 'false')
				in  let <_cor18> =
					call 'erlang':'is_boolean'
					    (Done)
				    in  call 'erlang':'and'
					    (_cor17, _cor18) ->
			      let <_cor19> =
				  %% Line 1365
				  apply 'skip_cases1'/4
				      (Suite, Cases, Cmt, [])
			      in  %% Line 1365
				  call 'erlang':'++'
				      (Tests, [{{Node,Dir},_cor19}|[]])
			  %% Line 1366
			  <> when 'true' ->
			      %% Line 1367
			      Tests1
			end
		    ( <_cor16> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor16})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1369
	  <Node,Dir,Suite,Case,Cmt,Tests,MergeTests>
	      when call 'erlang':'is_atom'
		    (Case) ->
	      %% Line 1370
	      apply 'skip_cases'/7
		  (Node, Dir, Suite, [Case|[]], Cmt, Tests, MergeTests)
	  ( <_cor26,_cor25,_cor24,_cor23,_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26,_cor25,_cor24,_cor23,_cor22,_cor21,_cor20})
		  -| [{'function_name',{'skip_cases',7}}] )
	    -| ['compiler_generated'] )
	end
'skip_cases1'/4 =
    %% Line 1372
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 1373
	    ( fun (_cor4) ->
		  %% Line 1374
		  {_cor4,{'skip',_cor1}}
	      -| [{'id',{0,0,'-skip_cases1/4-fun-0-'}}] )
	in  let <SkipCases> =
		%% Line 1373
		call 'lists':'map'
		    (_cor6, _cor2)
	    in  %% Line 1376
		case call 'lists':'keysearch'
			 (_cor3, 1, _cor0) of
		  %% Line 1377
		  <{'value',{_cor14,Cases0}}>
		      when call 'erlang':'=:='
			    (_cor14,
			     _cor3) ->
		      let <Cases1> =
			  %% Line 1378
			  call 'erlang':'++'
			      (Cases0, SkipCases)
		      in  %% Line 1379
			  apply 'insert_in_order'/2
			      ({_cor3,Cases1}, _cor0)
		  %% Line 1380
		  <'false'> when 'true' ->
		      %% Line 1381
		      apply 'insert_in_order'/2
			  ({_cor3,SkipCases}, _cor0)
		  ( <_cor9> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor9})
		    -| ['compiler_generated'] )
		end
'append'/2 =
    %% Line 1384
    fun (_cor1,_cor0) ->
	%% Line 1385
	call 'erlang':'++'
	    (_cor0, [_cor1|[]])
'insert_in_order'/2 =
    %% Line 1387
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[E|Es],List> when 'true' ->
	      let <List1> =
		  %% Line 1388
		  apply 'insert_elem'/3
		      (E, List, [])
	      in  %% Line 1389
		  apply 'insert_in_order'/2
		      (Es, List1)
	  %% Line 1390
	  <[],List> when 'true' ->
	      %% Line 1391
	      List
	  %% Line 1392
	  <E,List> when 'true' ->
	      %% Line 1393
	      apply 'insert_elem'/3
		  (E, List, [])
	end
'insert_elem'/3 =
    %% Line 1396
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <E = {Key,_cor9},[{_cor10,_cor11}|Rest],SoFar>
	      when call 'erlang':'=:='
		    (_cor10,
		     Key) ->
	      let <_cor3> =
		  %% Line 1397
		  call 'lists':'reverse'
		      ([E|SoFar])
	      in  %% Line 1397
		  call 'erlang':'++'
		      (_cor3, Rest)
	  %% Line 1398
	  <{E,_cor12},[_cor13|Rest],SoFar>
	      when call 'erlang':'=:='
		    (_cor13,
		     E) ->
	      let <_cor4> =
		  %% Line 1399
		  call 'lists':'reverse'
		      ([E|SoFar])
	      in  %% Line 1399
		  call 'erlang':'++'
		      (_cor4, Rest)
	  %% Line 1400
	  <E,[_cor14|Rest],SoFar>
	      when call 'erlang':'=:='
		    (_cor14,
		     E) ->
	      let <_cor5> =
		  %% Line 1401
		  call 'lists':'reverse'
		      ([E|SoFar])
	      in  %% Line 1401
		  call 'erlang':'++'
		      (_cor5, Rest)
	  %% Line 1402
	  <E,[E1|Rest],SoFar> when 'true' ->
	      %% Line 1403
	      apply 'insert_elem'/3
		  (E, Rest, [E1|SoFar])
	  %% Line 1404
	  <E,[],SoFar> when 'true' ->
	      %% Line 1405
	      call 'lists':'reverse'
		  ([E|SoFar])
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'insert_elem',3}}] )
	    -| ['compiler_generated'] )
	end
'ref2node'/2 =
    %% Line 1407
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'all_nodes',_X_Refs> when 'true' ->
	      %% Line 1408
	      'all_nodes'
	  %% Line 1409
	  <'master',_X_Refs> when 'true' ->
	      %% Line 1410
	      'master'
	  %% Line 1411
	  <RefOrNode,Refs> when 'true' ->
	      let <_cor2> =
		  %% Line 1412
		  call 'erlang':'atom_to_list'
		      (RefOrNode)
	      in  %% Line 1412
		  case call 'lists':'member'
			   (64, _cor2) of
		    %% Line 1413
		    <'false'> when 'true' ->
			%% Line 1414
			case call 'lists':'keysearch'
				 (RefOrNode, 1, Refs) of
			  %% Line 1415
			  <{'value',{_cor7,Node}}>
			      when call 'erlang':'=:='
				    (_cor7,
				     RefOrNode) ->
			      %% Line 1416
			      Node
			  %% Line 1417
			  <'false'> when 'true' ->
			      %% Line 1418
			      call 'erlang':'throw'
				  ({'error',{'noderef_missing',RefOrNode}})
			  ( <_cor3> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor3})
			    -| ['compiler_generated'] )
			end
		    %% Line 1420
		    <'true'> when 'true' ->
			%% Line 1421
			RefOrNode
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	end
'ref2dir'/2 =
    %% Line 1424
    fun (_cor1,_cor0) ->
	%% Line 1425
	( case _cor0 of
	    ( <( {'testspec',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_rec73,_cor31,_cor32}
		 -| ['compiler_generated'] )> when 'true' ->
		  apply 'ref2dir'/3
		      (_cor1, _rec73, _cor0)
	      -| ['compiler_generated'] )
	    ( <_cor33> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','testspec'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'ref2dir'/3 =
    %% Line 1427
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Ref,Refs,Spec>
	      when call 'erlang':'is_atom'
		    (Ref) ->
	      %% Line 1428
	      case call 'lists':'keysearch'
		       (Ref, 1, Refs) of
		%% Line 1429
		<{'value',{_cor7,Dir}}>
		    when call 'erlang':'=:='
			  (_cor7,
			   Ref) ->
		    %% Line 1430
		    apply 'get_absdir'/2
			(Dir, Spec)
		%% Line 1431
		<'false'> when 'true' ->
		    %% Line 1432
		    call 'erlang':'throw'
			({'error',{'alias_missing',Ref}})
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1434
	  <Dir,_cor8,Spec>
	      when call 'erlang':'is_list'
		    (Dir) ->
	      %% Line 1435
	      apply 'get_absdir'/2
		  (Dir, Spec)
	  %% Line 1436
	  <What,_cor9,_cor10> when 'true' ->
	      %% Line 1437
	      call 'erlang':'throw'
		  ({'error',{'invalid_directory_name',What}})
	end
'is_node'/2 =
    %% Line 1439
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <What,Nodes>
	      when call 'erlang':'is_atom'
		    (What) ->
	      %% Line 1440
	      apply 'is_node'/2
		  ([What|[]], Nodes)
	  %% Line 1441
	  <['master'|_cor9],_X_Nodes> when 'true' ->
	      %% Line 1442
	      'true'
	  %% Line 1443
	  <What = {N,H},Nodes>
	      when let <_cor2> =
		    call 'erlang':'is_atom'
			(N)
		in  let <_cor3> =
			call 'erlang':'is_atom'
			    (H)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 1444
	      apply 'is_node'/2
		  ([What|[]], Nodes)
	  %% Line 1445
	  <[What|_cor10],Nodes> when 'true' ->
	      let <_cor5> =
		  %% Line 1446
		  call 'lists':'keymember'
		      (What, 1, Nodes)
	      in  let <_cor4> =
		      %% Line 1447
		      call 'lists':'keymember'
			  (What, 2, Nodes)
		  in  %% Line 1446
		      call 'erlang':'or'
			  (_cor5, _cor4)
	  %% Line 1453
	  <[],_cor11> when 'true' ->
	      %% Line 1454
	      'false'
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'is_node',2}}] )
	    -| ['compiler_generated'] )
	end
'valid_terms'/0 =
    %% Line 1456
    fun () ->
	%% Line 1457
	[{'set_merge_tests',2}|[{'define',3}|[{'specs',3}|[{'node',3}|[{'cover',2}|[{'cover',3}|[{'cover_stop',2}|[{'cover_stop',3}|[{'config',2}|[{'config',3}|[{'config',4}|[{'userconfig',2}|[{'userconfig',3}|[{'alias',3}|[{'merge_tests',2}|[{'logdir',2}|[{'logdir',3}|[{'logopts',2}|[{'logopts',3}|[{'basic_html',2}|[{'basic_html',3}|[{'verbosity',2}|[{'verbosity',3}|[{'silent_connections',2}|[{'silent_connections',3}|[{'label',2}|[{'label',3}|[{'event_handler',2}|[{'event_handler',3}|[{'event_handler',4}|[{'ct_hooks',2}|[{'ct_hooks',3}|[{'enable_builtin_hooks',2}|[{'release_shell',2}|[{'multiply_timetraps',2}|[{'multiply_timetraps',3}|[{'scale_timetraps',2}|[{'scale_timetraps',3}|[{'include',2}|[{'include',3}|[{'auto_compile',2}|[{'auto_compile',3}|[{'abort_if_missing_suites',2}|[{'abort_if_missing_suites',3}|[{'stylesheet',2}|[{'stylesheet',3}|[{'suites',3}|[{'suites',4}|[{'groups',4}|[{'groups',5}|[{'groups',6}|[{'cases',4}|[{'cases',5}|[{'skip_suites',4}|[{'skip_suites',5}|[{'skip_groups',5}|[{'skip_groups',6}|[{'skip_groups',7}|[{'skip_cases',5}|[{'skip_cases',6}|[{'create_priv_dir',2}|[{'create_priv_dir',3}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
'resembles_ct_term'/2 =
    %% Line 1523
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,Size>
	      when call 'erlang':'is_atom'
		    (Name) ->
	      let <_cor2> =
		  %% Line 1524
		  call 'erlang':'atom_to_list'
		      (Name)
	      in  %% Line 1524
		  apply 'resembles_ct_term2'/2
		      (_cor2, Size)
	  %% Line 1525
	  <_X_Name,_cor5> when 'true' ->
	      %% Line 1526
	      'false'
	end
'resembles_ct_term2'/2 =
    %% Line 1528
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,Size>
	      when try
		    let <_cor2> =
			call 'erlang':'length'
			    (Name)
		    in  call 'erlang':'>'
			    (_cor2, 3)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor9> =
		  %% Line 1529
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor6) ->
				case _cor6 of
				  <[{Tag,Sz}|_cor4]> when 'true' ->
				      let <_cor7> =
					  call 'erlang':'atom_to_list'
					      (Tag)
				      in  let <_cor8> =
					      apply 'lc$^0'/1
						  (_cor4)
					  in  ( [{_cor7,Sz}|_cor8]
						-| ['compiler_generated'] )
				  ( <[_cor3|_cor4]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor4)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor6> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor6})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor5> =
			    apply 'valid_terms'/0
				()
			in  apply 'lc$^0'/1
				(_cor5)
		    -| ['list_comprehension'] )
	      in  %% Line 1530
		  apply 'compare_names'/3
		      (Name, Size, _cor9)
	  %% Line 1531
	  <_cor13,_cor14> when 'true' ->
	      %% Line 1532
	      'false'
	end
'compare_names'/3 =
    %% Line 1534
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,Size,[{Term,Sz}|Ts]> when 'true' ->
	      %% Line 1535
	      case <> of
		<>
		    when try
			  let <_cor3> =
			      call 'erlang':'-'
				  (Size, Sz)
			  in  let <_cor4> =
				  call 'erlang':'abs'
				      (_cor3)
			      in  call 'erlang':'>'
				      (_cor4, 0)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 1536
		    apply 'compare_names'/3
			(Name, Size, Ts)
		%% Line 1537
		<> when 'true' ->
		    let <_cor6> =
			%% Line 1538
			call 'erlang':'length'
			    (Name)
		    in  let <_cor5> =
			    %% Line 1538
			    call 'erlang':'length'
				(Term)
			in  let <_cor7> =
				%% Line 1538
				call 'erlang':'-'
				    (_cor6, _cor5)
			    in  let <Diff> =
				    %% Line 1538
				    call 'erlang':'abs'
					(_cor7)
				in  %% Line 1539
				    case <> of
				      <>
					  when call 'erlang':'>'
						(Diff,
						 1) ->
					  %% Line 1540
					  apply 'compare_names'/3
					      (Name, Size, Ts)
				      %% Line 1541
				      <> when 'true' ->
					  let <Common> =
					      %% Line 1542
					      apply 'common_letters'/3
						  (Name, Term, 0)
					  in  let <_cor10> =
						  %% Line 1543
						  call 'erlang':'length'
						      (Name)
					      in  let <_cor11> =
						      %% Line 1543
						      call 'erlang':'-'
							  (_cor10, Common)
						  in  let <Bad> =
							  %% Line 1543
							  call 'erlang':'abs'
							      (_cor11)
						      in  %% Line 1544
							  case <> of
							    <>
								when call 'erlang':'>'
								      (Bad,
								       2) ->
								%% Line 1545
								apply 'compare_names'/3
								    (Name, Size, Ts)
							    %% Line 1546
							    <> when 'true' ->
								%% Line 1547
								'true'
							  end
				    end
	      end
	  %% Line 1551
	  <_cor16,_cor17,[]> when 'true' ->
	      %% Line 1552
	      'false'
	  ( <_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13})
		  -| [{'function_name',{'compare_names',3}}] )
	    -| ['compiler_generated'] )
	end
'common_letters'/3 =
    %% Line 1554
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_cor9,[],Count> when 'true' ->
	      %% Line 1555
	      Count
	  %% Line 1556
	  <[L|Ls],Term,Count> when 'true' ->
	      %% Line 1557
	      case call 'lists':'member'
		       (L, Term) of
		%% Line 1558
		<'true'> when 'true' ->
		    let <Term1> =
			%% Line 1559
			call 'lists':'delete'
			    (L, Term)
		    in  let <_cor4> =
			    %% Line 1560
			    call 'erlang':'+'
				(Count, 1)
			in  %% Line 1560
			    apply 'common_letters'/3
				(Ls, Term1, _cor4)
		%% Line 1561
		<'false'> when 'true' ->
		    %% Line 1562
		    apply 'common_letters'/3
			(Ls, Term, Count)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1564
	  <[],_cor10,Count> when 'true' ->
	      %% Line 1565
	      Count
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'common_letters',3}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('ct_testspec')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('ct_testspec', _cor0)
end