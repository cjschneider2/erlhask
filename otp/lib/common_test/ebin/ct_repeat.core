module 'ct_repeat' ['log_loop_info'/1,
		    'loop_test'/2,
		    'module_info'/0,
		    'module_info'/1]
    attributes []
'loop_test'/2 =
    %% Line 39
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <If,Args>
	      when call 'erlang':'is_list'
		    (Args) ->
	      %% Line 40
	      case call 'file':'get_cwd'
		       () of
		<{'ok',Cwd}> when 'true' ->
		    %% Line 41
		    case apply 'get_loop_info'/1
			     (Args) of
		      %% Line 42
		      <'no_loop'> when 'true' ->
			  %% Line 43
			  'false'
		      %% Line 44
		      <E = {'error',_cor20}> when 'true' ->
			  do  %% Line 45
			      call 'io':'format'
				  ([67|[111|[109|[109|[111|[110|[32|[84|[101|[115|[116|[32|[101|[114|[114|[111|[114|[58|[32|[126|[112|[10|[10]]]]]]]]]]]]]]]]]]]]]]], [E|[]])
			      do  %% Line 46
				  call 'file':'set_cwd'
				      (Cwd)
				  %% Line 47
				  E
		      %% Line 48
		      <{'repeat',N}> when 'true' ->
			  do  %% Line 49
			      call 'io':'format'
				  ([10|[67|[111|[109|[109|[111|[110|[32|[84|[101|[115|[116|[58|[32|[87|[105|[108|[108|[32|[114|[101|[112|[101|[97|[116|[32|[116|[101|[115|[116|[115|[32|[126|[119|[32|[116|[105|[109|[101|[115|[46|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [N|[]])
			      let <Args1> =
				  %% Line 50
				  [{'loop_info',[{'repeat',1,N}|[]]}|Args]
			      in  let <Result> =
				      %% Line 51
				      apply 'loop'/8
					  (If, 'repeat', 0, N, 'undefined', Args1, 'undefined', [])
				  in  do  %% Line 52
					  call 'file':'set_cwd'
					      (Cwd)
					  %% Line 53
					  Result
		      %% Line 54
		      <{'stop_time',StopTime}> when 'true' ->
			  let <_cor15> =
			      %% Line 56
			      case apply 'remaining_time'/1
				       (StopTime) of
				%% Line 57
				<0> when 'true' ->
				    do  %% Line 58
					call 'io':'format'
					    ([10|[67|[111|[109|[109|[111|[110|[32|[84|[101|[115|[116|[58|[32|[78|[111|[32|[116|[105|[109|[101|[32|[108|[101|[102|[116|[32|[116|[111|[32|[114|[117|[110|[32|[116|[101|[115|[116|[115|[46|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 59
																																			   [])
					%% Line 60
					{'error','not_enough_time'}
				%% Line 61
				<Secs> when 'true' ->
				    let <_cor5> =
					%% Line 63
					apply 'ts'/1
					    (Secs)
				    in  do  %% Line 62
					    call 'io':'format'
						([10|[67|[111|[109|[109|[111|[110|[32|[84|[101|[115|[116|[58|[32|[87|[105|[108|[108|[32|[114|[101|[112|[101|[97|[116|[32|[116|[101|[115|[116|[115|[32|[102|[111|[114|[32|[126|[115|[46|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 63
																																			 [_cor5|[]])
					    let <_cor11> =
						%% Line 65
						case call 'proplists':'get_value'
							 ('force_stop', Args) of
						  %% Line 66
						  <False>
						      when let <_cor6> =
							    call 'erlang':'=:='
								(False, 'false')
							in  let <_cor7> =
								call 'erlang':'=:='
								    (False, 'undefined')
							    in  call 'erlang':'or'
								    (_cor6, _cor7) ->
						      %% Line 67
						      'undefined'
						  %% Line 68
						  <ForceStop> when 'true' ->
						      let <CtrlPid> =
							  %% Line 69
							  call 'erlang':'self'
							      ()
						      in  let <_cor9> =
							      %% Line 71
							      ( fun () ->
								    %% Line 72
								    apply 'stop_after'/3
									(CtrlPid, Secs, ForceStop)
								-| [{'id',{0,0,'-loop_test/2-fun-0-'}}] )
							  in  %% Line 70
							      call 'erlang':'spawn'
								  (_cor9)
						end
					    in  let <Args1> =
						    %% Line 75
						    [{'loop_info',[{'stop_time',Secs,StopTime,1}|[]]}|Args]
						in  %% Line 76
						    apply 'loop'/8
							(If, 'stop_time', 0, Secs, StopTime, Args1, _cor11, [])
			      end
			  in  do  %% Line 78
				  call 'file':'set_cwd'
				      (Cwd)
				  _cor15
		      ( <_cor17> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor17})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18})
		  -| [{'function_name',{'loop_test',2}}] )
	    -| ['compiler_generated'] )
	end
'loop'/8 =
    %% Line 82
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_cor31,'repeat',N,_cor32,_cor33,_X_Args,_cor34,AccResult>
	      when call 'erlang':'=:='
		    (_cor32,
		     N) ->
	      %% Line 83
	      call 'lists':'reverse'
		  (AccResult)
	  %% Line 85
	  <If,Type,N,Data0,Data1,Args,TPid,AccResult> when 'true' ->
	      let <_cor8> =
		  %% Line 86
		  call 'erlang':'self'
		      ()
	      in  let <Pid> =
		      %% Line 86
		      apply 'spawn_tester'/3
			  (If, _cor8, Args)
		  in  %% Line 87
		      receive
			%% Line 88
			<{'EXIT',_cor35,Reason}>
			    when call 'erlang':'=:='
				  (_cor35,
				   Pid) ->
			    %% Line 89
			    case Reason of
			      %% Line 90
			      <{'user_error',What}> when 'true' ->
				  do  %% Line 91
				      call 'io':'format'
					  ([10|[84|[101|[115|[116|[32|[114|[117|[110|[32|[102|[97|[105|[108|[101|[100|[33|[10|[82|[101|[97|[115|[111|[110|[58|[32|[126|[112|[10|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [What|[]])
				      do  %% Line 92
					  apply 'cancel'/1
					      (TPid)
					  %% Line 93
					  {'error',What}
			      %% Line 94
			      <_cor36> when 'true' ->
				  do  %% Line 95
				      call 'io':'format'
					  ([84|[101|[115|[116|[32|[114|[117|[110|[32|[99|[114|[97|[115|[104|[101|[100|[33|[32|[84|[104|[105|[115|[32|[99|[111|[117|[108|[100|[32|[98|[101|[32|[97|[110|[32|[105|[110|[116|[101|[114|[110|[97|[108|[32|[101|[114|[114|[111|[114|[32|[45|[32|[112|[108|[101|[97|[115|[101|[32|[114|[101|[112|[111|[114|[116|[33|[10|[10|[126|[112|[10|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 97
																																																								      [Reason|[]])
				      do  %% Line 98
					  apply 'cancel'/1
					      (TPid)
					  %% Line 99
					  {'error',Reason}
			    end
			%% Line 101
			<{_cor37,{'error',Reason}}>
			    when call 'erlang':'=:='
				  (_cor37,
				   Pid) ->
			    do  %% Line 102
				call 'io':'format'
				    ([10|[84|[101|[115|[116|[32|[114|[117|[110|[32|[102|[97|[105|[108|[101|[100|[33|[10|[82|[101|[97|[115|[111|[110|[58|[32|[126|[112|[10|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Reason|[]])
				do  %% Line 103
				    apply 'cancel'/1
					(TPid)
				    %% Line 104
				    {'error',Reason}
			%% Line 105
			<{_cor38,Result}>
			    when call 'erlang':'=:='
				  (_cor38,
				   Pid) ->
			    %% Line 106
			    case <> of
			      <>
				  when call 'erlang':'=:='
					(Type,
					 'repeat') ->
				  let <_cor11> =
				      %% Line 107
				      call 'erlang':'+'
					  (N, 1)
				  in  do  %% Line 107
					  call 'io':'format'
					      ([10|[84|[101|[115|[116|[32|[114|[117|[110|[32|[126|[119|[40|[126|[119|[41|[32|[99|[111|[109|[112|[108|[101|[116|[101|[46|[10|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor11|[Data0|[]]])
					  do  %% Line 108
					      call 'lists':'keydelete'
						  ('loop_info', 1, Args)
					      let <_cor12> =
						  %% Line 109
						  call 'erlang':'+'
						      (N, 2)
					      in  let <Args1> =
						      %% Line 109
						      [{'loop_info',[{'repeat',_cor12,Data0}|[]]}|Args]
						  in  let <_cor14> =
							  %% Line 110
							  call 'erlang':'+'
							      (N, 1)
						      in  %% Line 110
							  apply 'loop'/8
							      (If, 'repeat', _cor14, Data0, Data1, Args1, TPid, [Result|AccResult])
			      %% Line 111
			      <>
				  when call 'erlang':'=:='
					(Type,
					 'stop_time') ->
				  %% Line 112
				  case apply 'remaining_time'/1
					   (Data1) of
				    %% Line 113
				    <0> when 'true' ->
					let <_cor15> =
					    %% Line 115
					    apply 'ts'/1
						(Data0)
					in  do  %% Line 114
						call 'io':'format'
						    ([10|[84|[101|[115|[116|[32|[116|[105|[109|[101|[32|[40|[126|[115|[41|[32|[104|[97|[115|[32|[114|[117|[110|[32|[111|[117|[116|[46|[10|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 115
																												  [_cor15|[]])
						do  %% Line 116
						    apply 'cancel'/1
							(TPid)
						    %% Line 117
						    call 'lists':'reverse'
							([Result|AccResult])
				    %% Line 118
				    <Secs> when 'true' ->
					let <_cor16> =
					    %% Line 121
					    apply 'ts'/1
						(Secs)
					in  let <_cor17> =
						%% Line 121
						call 'erlang':'+'
						    (N, 2)
					    in  do  %% Line 119
						    call 'io':'format'
							([10|[126|[115|[32|[111|[102|[32|[116|[101|[115|[116|[32|[116|[105|[109|[101|[32|[114|[101|[109|[97|[105|[110|[105|[110|[103|[44|[32|[115|[116|[97|[114|[116|[105|[110|[103|[32|[114|[117|[110|[32|[35|[126|[119|[46|[46|[46|[10|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 121
																																										    [_cor16|[_cor17|[]]])
						    do  %% Line 122
							call 'lists':'keydelete'
							    ('loop_info', 1, Args)
							let <_cor18> =
							    %% Line 123
							    call 'erlang':'+'
								(N, 2)
							in  let <ST> =
								%% Line 123
								{'stop_time',Data0,Data1,_cor18}
							    in  let <Args1> =
								    %% Line 124
								    [{'loop_info',[ST|[]]}|Args]
								in  let <_cor21> =
									%% Line 125
									call 'erlang':'+'
									    (N, 1)
								    in  %% Line 125
									apply 'loop'/8
									    (If, 'stop_time', _cor21, Data0, Data1, Args1, TPid, %% Line 126
																 [Result|AccResult])
				  end
			      ( <> when 'true' ->
				    primop 'match_fail'
					('if_clause')
				-| ['compiler_generated'] )
			    end
		      after 'infinity' ->
			'true'
	end
'spawn_tester'/3 =
    %% Line 131
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'script',Ctrl,Args> when 'true' ->
	      let <_cor3> =
		  %% Line 132
		  ( fun () ->
			call 'ct_run':'script_start1'
			    (Ctrl, Args)
		    -| [{'id',{0,0,'-spawn_tester/3-fun-0-'}}] )
	      in  %% Line 132
		  call 'erlang':'spawn_link'
		      (_cor3)
	  %% Line 134
	  <'func',Ctrl,Opts> when 'true' ->
	      let <Tester> =
		  %% Line 135
		  ( fun () ->
			let <_cor4> =
			    catch
				%% Line 136
				call 'ct_run':'run_test2'
				    (Opts)
			in  %% Line 136
			    case _cor4 of
			      %% Line 137
			      <{'EXIT',Reason}> when 'true' ->
				  %% Line 138
				  call 'erlang':'exit'
				      (Reason)
			      %% Line 139
			      <Result> when 'true' ->
				  let <_cor5> =
				      %% Line 140
				      call 'erlang':'self'
					  ()
				  in  %% Line 140
				      call 'erlang':'!'
					  (Ctrl, {_cor5,Result})
			    end
		    -| [{'id',{0,0,'-spawn_tester/3-fun-1-'}}] )
	      in  %% Line 143
		  call 'erlang':'spawn_link'
		      (Tester)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'spawn_tester',3}}] )
	    -| ['compiler_generated'] )
	end
'remaining_time'/1 =
    %% Line 145
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 146
	    call 'calendar':'local_time'
		()
	in  let <Now> =
		%% Line 146
		call 'calendar':'datetime_to_gregorian_seconds'
		    (_cor1)
	    in  let <Diff> =
		    %% Line 147
		    call 'erlang':'-'
			(_cor0, Now)
		in  %% Line 148
		    case <> of
		      <>
			  when call 'erlang':'>'
				(Diff,
				 0) ->
			  %% Line 149
			  Diff
		      %% Line 150
		      <> when 'true' ->
			  %% Line 151
			  0
		    end
'get_loop_info'/1 =
    %% Line 154
    fun (_cor0) ->
	case _cor0 of
	  <Args>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 155
	      case call 'lists':'keysearch'
		       ('until', 1, Args) of
		%% Line 156
		<{'value',{'until',Time}}> when 'true' ->
		    let <Time1> =
			%% Line 157
			apply 'delistify'/1
			    (Time)
		    in  let <_cor2> =
			    catch
				%% Line 158
				apply 'get_stop_time'/2
				    ('until', Time1)
			in  %% Line 158
			    case _cor2 of
			      %% Line 159
			      <{'EXIT',_cor18}> when 'true' ->
				  %% Line 160
				  {'error',{'bad_time_format',Time1}}
			      %% Line 161
			      <Stop> when 'true' ->
				  %% Line 162
				  {'stop_time',Stop}
			    end
		%% Line 164
		<'false'> when 'true' ->
		    %% Line 165
		    case call 'lists':'keysearch'
			     ('duration', 1, Args) of
		      %% Line 166
		      <{'value',{'duration',Time}}> when 'true' ->
			  let <Time1> =
			      %% Line 167
			      apply 'delistify'/1
				  (Time)
			  in  let <_cor5> =
				  catch
				      %% Line 168
				      apply 'get_stop_time'/2
					  ('duration', Time1)
			      in  %% Line 168
				  case _cor5 of
				    %% Line 169
				    <{'EXIT',_cor19}> when 'true' ->
					%% Line 170
					{'error',{'bad_time_format',Time1}}
				    %% Line 171
				    <Stop> when 'true' ->
					%% Line 172
					{'stop_time',Stop}
				  end
		      %% Line 174
		      <'false'> when 'true' ->
			  %% Line 175
			  case call 'lists':'keysearch'
				   ('repeat', 1, Args) of
			    %% Line 176
			    <{'value',{'repeat',R}}> when 'true' ->
				%% Line 177
				case R of
				  %% Line 178
				  <N>
				      when let <_cor7> =
					    call 'erlang':'is_integer'
						(R)
					in  let <_cor8> =
						call 'erlang':'>'
						    (R, 0)
					    in  call 'erlang':'and'
						    (_cor7, _cor8) ->
				      %% Line 179
				      {'repeat',N}
				  %% Line 180
				  <[Str|[]]> when 'true' ->
				      let <_cor9> =
					  catch
					      %% Line 181
					      call 'erlang':'list_to_integer'
						  (Str)
				      in  %% Line 181
					  case _cor9 of
					    %% Line 182
					    <N>
						when let <_cor10> =
						      call 'erlang':'is_integer'
							  (_cor9)
						  in  let <_cor11> =
							  call 'erlang':'>'
							      (_cor9, 0)
						      in  call 'erlang':'and'
							      (_cor10, _cor11) ->
						%% Line 183
						{'repeat',N}
					    %% Line 184
					    <_cor20> when 'true' ->
						%% Line 185
						{'error',{'invalid_repeat_value',Str}}
					  end
				  %% Line 187
				  <_cor21> when 'true' ->
				      %% Line 188
				      {'error',{'invalid_repeat_value',R}}
				end
			    %% Line 190
			    <'false'> when 'true' ->
				%% Line 191
				'no_loop'
			    ( <_cor14> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor14})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor15> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor15})
			-| ['compiler_generated'] )
		    end
		( <_cor16> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor16})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17})
		  -| [{'function_name',{'get_loop_info',1}}] )
	    -| ['compiler_generated'] )
	end
'get_stop_time'/2 =
    %% Line 196
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'until',[Y1|[Y2|[Mo1|[Mo2|[D1|[D2|[H1|[H2|[Mi1|[Mi2|[S1|[S2|[]]]]]]]]]]]]]> when 'true' ->
	      let <_cor16> =
		  %% Line 198
		  case <Mo1,Mo2> of
		    %% Line 199
		    <48,48> when 'true' ->
			%% Line 200
			call 'erlang':'date'
			    ()
		    %% Line 201
		    <_fol1,_fol5> when 'true' ->
			let <Y> =
			    %% Line 202
			    call 'erlang':'list_to_integer'
				([Y1|[Y2|[]]])
			in  let <Mo> =
				%% Line 203
				call 'erlang':'list_to_integer'
				    ([Mo1|[Mo2|[]]])
			    in  let <D> =
				    %% Line 204
				    call 'erlang':'list_to_integer'
					([D1|[D2|[]]])
				in  %% Line 205
				    case call 'erlang':'date'
					     () of
				      <{YNow,_cor35,_cor36}> when 'true' ->
					  let <_cor6> =
					      %% Line 206
					      call 'erlang':'/'
						  (YNow, 100)
					  in  let <Dec> =
						  %% Line 206
						  call 'erlang':'trunc'
						      (_cor6)
					      in  let <_cor13> =
						      %% Line 208
						      case <> of
							<>
							    when try
								  let <_cor8> =
								      call 'erlang':'*'
									  (Dec, 100)
								  in  let <_cor9> =
									  call 'erlang':'-'
									      (YNow, _cor8)
								      in  call 'erlang':'<'
									      (Y, _cor9)
							      of <Try> ->
								  Try
							      catch <T,R> ->
								  'false' ->
							    let <_cor10> =
								call 'erlang':'+'
								    (Dec, 1)
							    in  let <_cor11> =
								    call 'erlang':'*'
									(_cor10, 100)
								in  call 'erlang':'+'
									(_cor11, Y)
							%% Line 209
							<> when 'true' ->
							    let <_cor12> =
								call 'erlang':'*'
								    (Dec, 100)
							    in  call 'erlang':'+'
								    (_cor12, Y)
						      end
						  in  %% Line 211
						      {_cor13,Mo,D}
				      ( <_cor5> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor5})
					-| ['compiler_generated'] )
				    end
		  end
	      in  let <_cor20> =
		      %% Line 213
		      call 'erlang':'list_to_integer'
			  ([H1|[H2|[]]])
		  in  let <_cor19> =
			  %% Line 214
			  call 'erlang':'list_to_integer'
			      ([Mi1|[Mi2|[]]])
		      in  let <_cor18> =
			      %% Line 215
			      call 'erlang':'list_to_integer'
				  ([S1|[S2|[]]])
			  in  let <Time> = {_cor20,_cor19,_cor18}
			      in  %% Line 216
				  call 'calendar':'datetime_to_gregorian_seconds'
				      ({_cor16,Time})
	  %% Line 218
	  <'until',Time = [_cor37|[_cor38|[_cor39|[_cor40|[_cor41|[_cor42|[]]]]]]]> when 'true' ->
	      let <_cor22> =
		  %% Line 219
		  call 'erlang':'++'
		      ([48|[48|[48|[48|[48|[48]]]]]], Time)
	      in  %% Line 219
		  apply 'get_stop_time'/2
		      ('until', _cor22)
	  %% Line 221
	  <'duration',[H1|[H2|[Mi1|[Mi2|[S1|[S2|[]]]]]]]> when 'true' ->
	      let <_cor26> =
		  %% Line 223
		  call 'erlang':'list_to_integer'
		      ([H1|[H2|[]]])
	      in  let <_cor27> =
		      %% Line 223
		      call 'erlang':'*'
			  (_cor26, 3600)
		  in  let <_cor24> =
			  %% Line 224
			  call 'erlang':'list_to_integer'
			      ([Mi1|[Mi2|[]]])
		      in  let <_cor25> =
			      %% Line 224
			      call 'erlang':'*'
				  (_cor24, 60)
			  in  let <_cor28> =
				  %% Line 223
				  call 'erlang':'+'
				      (_cor27, _cor25)
			      in  let <_cor23> =
				      %% Line 225
				      call 'erlang':'list_to_integer'
					  ([S1|[S2|[]]])
				  in  let <Secs> =
					  %% Line 224
					  call 'erlang':'+'
					      (_cor28, _cor23)
				      in  let <_cor30> =
					      %% Line 226
					      call 'calendar':'local_time'
						  ()
					  in  let <_cor31> =
						  %% Line 226
						  call 'calendar':'datetime_to_gregorian_seconds'
						      (_cor30)
					      in  %% Line 226
						  call 'erlang':'+'
						      (_cor31, Secs)
	  ( <_cor33,_cor32> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor33,_cor32})
		  -| [{'function_name',{'get_stop_time',2}}] )
	    -| ['compiler_generated'] )
	end
'cancel'/1 =
    %% Line 228
    fun (_cor0) ->
	catch
	    %% Line 229
	    call 'erlang':'exit'
		(_cor0, 'kill')
'stop_after'/3 =
    %% Line 233
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 234
	    call 'erlang':'*'
		(_cor1, 1000)
	in  do  %% Line 234
		call 'timer':'sleep'
		    (_cor3)
		do  %% Line 235
		    case _cor0 of
		      %% Line 236
		      <SkipRest>
			  when let <_cor4> =
				call 'erlang':'=:='
				    (_cor0, 'skip_rest')
			    in  let <_cor5> =
				    call 'erlang':'=='
					(_cor0, [[115|[107|[105|[112|[95|[114|[101|[115|[116]]]]]]]]]])
				in  call 'erlang':'or'
					(_cor4, _cor5) ->
			  %% Line 237
			  call 'ct_util':'set_testdata'
			      ({'skip_rest','true'})
		      %% Line 238
		      <_cor10> when 'true' ->
			  'ok'
		    end
		    %% Line 241
		    call 'test_server_ctrl':'abort'
			()
'log_loop_info'/1 =
    %% Line 245
    fun (_cor0) ->
	%% Line 246
	case call 'lists':'keysearch'
		 ('loop_info', 1, _cor0) of
	  %% Line 247
	  <'false'> when 'true' ->
	      %% Line 248
	      'ok'
	  %% Line 249
	  <{'value',{_cor23,[{'repeat',C,N}|[]]}}> when 'true' ->
	      %% Line 250
	      call 'ct_logs':'log'
		  ([84|[101|[115|[116|[32|[108|[111|[111|[112|[32|[105|[110|[102|[111]]]]]]]]]]]]]], [84|[101|[115|[116|[32|[114|[117|[110|[32|[126|[119|[32|[111|[102|[32|[126|[119]]]]]]]]]]]]]]]]], [C|[N|[]]])
	  %% Line 251
	  <{'value',{_cor24,[{'stop_time',Secs0,StopTime,N}|[]]}}> when 'true' ->
	      let <_cor5> =
		  %% Line 253
		  case call 'lists':'keysearch'
			   ('duration', 1, _cor0) of
		    %% Line 254
		    <{'value',{_cor25,Dur}}> when 'true' ->
			let <_cor1> =
			    %% Line 256
			    apply 'delistify'/1
				(Dur)
			in  %% Line 255
			    call 'io_lib':'format'
				([83|[112|[101|[99|[105|[102|[105|[101|[100|[32|[116|[101|[115|[116|[32|[100|[117|[114|[97|[116|[105|[111|[110|[58|[32|[126|[115|[32|[40|[126|[119|[32|[115|[101|[99|[115|[41|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 256
																															 [_cor1|[Secs0|[]]])
		    %% Line 257
		    <_cor26> when 'true' ->
			%% Line 258
			case call 'lists':'keysearch'
				 ('until', 1, _cor0) of
			  %% Line 259
			  <{'value',{_cor27,Until}}> when 'true' ->
			      let <_cor2> =
				  %% Line 261
				  apply 'delistify'/1
				      (Until)
			      in  %% Line 260
				  call 'io_lib':'format'
				      ([83|[112|[101|[99|[105|[102|[105|[101|[100|[32|[101|[110|[100|[32|[116|[105|[109|[101|[58|[32|[126|[115|[32|[40|[100|[117|[114|[97|[116|[105|[111|[110|[32|[126|[119|[32|[115|[101|[99|[115|[41|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 261
																																		      [_cor2|[Secs0|[]]])
			  %% Line 262
			  <_cor28> when 'true' ->
			      %% Line 263
			      'ok'
			end
		  end
	      in  let <LogStr2> =
		      %% Line 266
		      call 'io_lib':'format'
			  ([84|[101|[115|[116|[32|[114|[117|[110|[32|[35|[126|[119|[10]]]]]]]]]]]]], [N|[]])
		  in  let <Secs> =
			  %% Line 267
			  apply 'remaining_time'/1
			      (StopTime)
		      in  let <_cor9> =
			      %% Line 270
			      call 'erlang':'/'
				  (Secs, Secs0)
			  in  let <_cor10> =
				  %% Line 270
				  call 'erlang':'*'
				      (_cor9, 100)
			      in  let <_cor11> =
				      %% Line 270
				      call 'erlang':'trunc'
					  (_cor10)
				  in  let <LogStr3> =
					  %% Line 269
					  call 'io_lib':'format'
					      ([84|[101|[115|[116|[32|[116|[105|[109|[101|[32|[114|[101|[109|[97|[105|[110|[105|[110|[103|[58|[32|[126|[119|[32|[115|[101|[99|[115|[32|[40|[126|[119|[37|[41|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 270
																														     [Secs|[_cor11|[]]])
				      in  let <_cor16> =
					      %% Line 272
					      case call 'proplists':'get_value'
						       ('force_stop', _cor0) of
						%% Line 273
						<False>
						    when let <_cor13> =
							  call 'erlang':'=:='
							      (False, 'false')
						      in  let <_cor14> =
							      call 'erlang':'=:='
								  (False, 'undefined')
							  in  call 'erlang':'or'
								  (_cor13, _cor14) ->
						    %% Line 274
						    []
						%% Line 275
						<ForceStop> when 'true' ->
						    %% Line 276
						    call 'io_lib':'format'
							([102|[111|[114|[99|[101|[95|[115|[116|[111|[112|[32|[105|[115|[32|[115|[101|[116|[32|[116|[111|[58|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]], [ForceStop|[]])
					      end
					  in  let <_cor18> =
						  %% Line 278
						  call 'erlang':'++'
						      (LogStr3, _cor16)
					      in  let <_cor19> =
						      %% Line 278
						      call 'erlang':'++'
							  (LogStr2, _cor18)
						  in  let <_cor20> =
							  %% Line 278
							  call 'erlang':'++'
							      (_cor5, _cor19)
						      in  %% Line 278
							  call 'ct_logs':'log'
							      ([84|[101|[115|[116|[32|[108|[111|[111|[112|[32|[105|[110|[102|[111]]]]]]]]]]]]]], _cor20, [])
	  ( <_cor21> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor21})
	    -| ['compiler_generated'] )
	end
'ts'/1 =
    %% Line 281
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 282
	    call 'erlang':'integer_to_list'
		(_cor0)
	in  %% Line 282
	    call 'erlang':'++'
		(_cor1, [32|[115|[101|[99|[115]]]]])
'delistify'/1 =
    %% Line 284
    fun (_cor0) ->
	case _cor0 of
	  <[X|[]]> when 'true' ->
	      %% Line 285
	      X
	  %% Line 286
	  <X> when 'true' ->
	      %% Line 287
	      X
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('ct_repeat')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('ct_repeat', _cor0)
end