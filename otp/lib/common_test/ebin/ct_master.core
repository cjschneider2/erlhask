module 'ct_master' ['abort'/0,
		    'abort'/1,
		    'basic_html'/1,
		    'init_master'/7,
		    'init_node_ctrl'/3,
		    'module_info'/0,
		    'module_info'/1,
		    'progress'/0,
		    'run'/1,
		    'run'/3,
		    'run'/4,
		    'run_on_node'/2,
		    'run_on_node'/3,
		    'run_test'/1,
		    'run_test'/2,
		    'status'/2]
    attributes []
'run_test'/2 =
    %% Line 67
    fun (_cor1,_cor0) ->
	%% Line 68
	apply 'run_test'/1
	    ([{_cor1,_cor0}|[]])
'run_test'/1 =
    %% Line 71
    fun (_cor0) ->
	case _cor0 of
	  <{Node,Opts}> when 'true' ->
	      %% Line 72
	      apply 'run_test'/1
		  ([{Node,Opts}|[]])
	  %% Line 73
	  <NodeOptsList>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 74
	      apply 'start_master'/1
		  (NodeOptsList)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'run_test',1}}] )
	    -| ['compiler_generated'] )
	end
'run'/4 =
    %% Line 90
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[TS|TestSpecs],AllowUserTerms,InclNodes,ExclNodes>
	      when try
		    let <_cor4> =
			call 'erlang':'is_list'
			    (TS)
		    in  let <_cor5> =
			    %% Line 91
			    call 'erlang':'is_list'
				(InclNodes)
			in  let <_cor6> =
				%% Line 92
				call 'erlang':'is_list'
				    (ExclNodes)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor8> =
		  catch
		      %% Line 96
		      call 'ct_testspec':'collect_tests_from_file'
			  ([TS|[]], InclNodes, %% Line 97
					       AllowUserTerms)
	      in  %% Line 96
		  case _cor8 of
		    %% Line 98
		    <{'error',Reason}> when 'true' ->
			let <_cor9> =
			    %% Line 99
			    apply 'run'/4
				(TestSpecs, AllowUserTerms, InclNodes, ExclNodes)
			in  %% Line 99
			    [{'error',Reason}|_cor9]
		    %% Line 100
		    <Tests> when 'true' ->
			let <_cor19> =
			    %% Line 103
			    ( fun (_cor17) ->
				  case _cor17 of
				    <{Specs,TSRec = {'testspec',_cor29,_cor30,%% Line 107
									      AllInitOpts,_cor31,_cor32,AllLogDirs,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,%% Line 104
																			     StdCfgFiles,%% Line 105
																					 UserCfgFiles,%% Line 108
																						      AllEvHs,_cor39,_cor40,_cor41,%% Line 106
																										   AllIncludes,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50}}> when 'true' ->
					let <AllCfgFiles> = {%% Line 110
					     StdCfgFiles,%% Line 110
							 UserCfgFiles}
					in  let <RunSkipPerNode> =
						%% Line 112
						call 'ct_testspec':'prepare_tests'
						    (TSRec)
					    in  let <RunSkipPerNode2> =
						    %% Line 114
						    apply 'exclude_nodes'/2
							(ExclNodes, RunSkipPerNode)
						in  let <_cor14> =
							%% Line 115
							case <> of
							  <>
							      when try
								    let <_cor13> =
									call 'erlang':'hd'
									    (TS)
								    in  call 'erlang':'is_integer'
									    (_cor13)
								of <Try> ->
								    Try
								catch <T,R> ->
								    'false' ->
							      [TS|[]]
							  %% Line 116
							  <> when 'true' ->
							      TS
							end
						    in  let <_cor16> =
							    %% Line 117
							    apply 'run_all'/9
								(RunSkipPerNode2, AllLogDirs, %% Line 118
											      AllCfgFiles, %% Line 118
													   AllEvHs, %% Line 119
														    AllIncludes, %% Line 119
																 [], %% Line 119
																     [], %% Line 119
																	 AllInitOpts, _cor14)
							in  %% Line 117
							    {Specs,_cor16}
				    ( <_cor18> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor18})
					    -| [{'function_name',{'-run/4-fun-0-',1}}] )
				      -| ['compiler_generated'] )
				  end
			      -| [{'id',{0,0,'-run/4-fun-0-'}}] )
			in  let <RunResult> =
				%% Line 102
				call 'lists':'map'
				    (_cor19, %% Line 120
					     Tests)
			    in  let <_cor21> =
				    %% Line 121
				    apply 'run'/4
					(TestSpecs, AllowUserTerms, InclNodes, ExclNodes)
				in  %% Line 121
				    call 'erlang':'++'
					(RunResult, _cor21)
		  end
	  %% Line 123
	  <[],_cor51,_cor52,_cor53> when 'true' ->
	      %% Line 124
	      []
	  %% Line 125
	  <TS,AllowUserTerms,InclNodes,ExclNodes>
	      when let <_cor23> =
		    call 'erlang':'is_list'
			(InclNodes)
		in  let <_cor24> =
			%% Line 126
			call 'erlang':'is_list'
			    (ExclNodes)
		    in  call 'erlang':'and'
			    (_cor23, _cor24) ->
	      %% Line 127
	      apply 'run'/4
		  ([TS|[]], AllowUserTerms, InclNodes, ExclNodes)
	  ( <_cor28,_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor28,_cor27,_cor26,_cor25})
		  -| [{'function_name',{'run',4}}] )
	    -| ['compiler_generated'] )
	end
'run'/3 =
    %% Line 137
    fun (_cor2,_cor1,_cor0) ->
	%% Line 138
	apply 'run'/4
	    (_cor2, 'false', _cor1, _cor0)
'run'/1 =
    %% Line 145
    fun (_cor0) ->
	case _cor0 of
	  <TestSpecs = [TS|_cor2]>
	      when call 'erlang':'is_list'
		    (TS) ->
	      %% Line 146
	      apply 'run'/4
		  (TestSpecs, 'false', [], [])
	  %% Line 147
	  <TS> when 'true' ->
	      %% Line 148
	      apply 'run'/4
		  ([TS|[]], 'false', [], [])
	end
'exclude_nodes'/2 =
    %% Line 151
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[ExclNode|ExNs],RunSkipPerNode> when 'true' ->
	      let <_cor2> =
		  %% Line 152
		  call 'lists':'keydelete'
		      (ExclNode, 1, RunSkipPerNode)
	      in  %% Line 152
		  apply 'exclude_nodes'/2
		      (ExNs, _cor2)
	  %% Line 153
	  <[],RunSkipPerNode> when 'true' ->
	      %% Line 154
	      RunSkipPerNode
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'exclude_nodes',2}}] )
	    -| ['compiler_generated'] )
	end
'run_on_node'/3 =
    %% Line 166
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[TS|TestSpecs],AllowUserTerms,Node>
	      when let <_cor3> =
		    call 'erlang':'is_list'
			(TS)
		in  let <_cor4> =
			call 'erlang':'is_atom'
			    (Node)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      let <_cor5> =
		  catch
		      %% Line 167
		      call 'ct_testspec':'collect_tests_from_file'
			  ([TS|[]], [Node|[]], %% Line 168
					       AllowUserTerms)
	      in  %% Line 167
		  case _cor5 of
		    %% Line 169
		    <{'error',Reason}> when 'true' ->
			let <_cor6> =
			    %% Line 170
			    apply 'run_on_node'/3
				(TestSpecs, AllowUserTerms, Node)
			in  %% Line 170
			    [{'error',Reason}|_cor6]
		    %% Line 171
		    <Tests> when 'true' ->
			let <_cor15> =
			    %% Line 174
			    ( fun (_cor13) ->
				  case _cor13 of
				    <{Specs,TSRec = {'testspec',_cor22,_cor23,%% Line 176
									      AllInitOpts,_cor24,_cor25,AllLogDirs,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,%% Line 175
																			     StdCfgFiles,%% Line 178
																					 UserCfgFiles,%% Line 179
																						      AllEvHs,_cor32,_cor33,_cor34,%% Line 177
																										   AllIncludes,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43}}> when 'true' ->
					let <AllCfgFiles> = {%% Line 180
					     StdCfgFiles,%% Line 180
							 UserCfgFiles}
					in  %% Line 181
					    case call 'ct_testspec':'prepare_tests'
						     (TSRec, Node) of
					      <{Run,Skip}> when 'true' ->
						  let <_cor10> =
						      %% Line 182
						      case <> of
							<>
							    when try
								  let <_cor9> =
								      call 'erlang':'hd'
									  (TS)
								  in  call 'erlang':'is_integer'
									  (_cor9)
							      of <Try> ->
								  Try
							      catch <T,R> ->
								  'false' ->
							    [TS|[]]
							%% Line 183
							<> when 'true' ->
							    TS
						      end
						  in  let <_cor12> =
							  %% Line 184
							  apply 'run_all'/9
							      ([{Node,Run,Skip}|[]], AllLogDirs, %% Line 185
												 AllCfgFiles, %% Line 185
													      AllEvHs, %% Line 186
														       AllIncludes, %% Line 186
																    [], %% Line 186
																	[], %% Line 186
																	    AllInitOpts, _cor10)
						      in  %% Line 184
							  {Specs,_cor12}
					      ( <_cor8> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor8})
						-| ['compiler_generated'] )
					    end
				    ( <_cor14> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor14})
					    -| [{'function_name',{'-run_on_node/3-fun-0-',1}}] )
				      -| ['compiler_generated'] )
				  end
			      -| [{'id',{0,0,'-run_on_node/3-fun-0-'}}] )
			in  let <RunResult> =
				%% Line 173
				call 'lists':'map'
				    (_cor15, %% Line 187
					     Tests)
			    in  let <_cor17> =
				    %% Line 188
				    apply 'run_on_node'/3
					(TestSpecs, AllowUserTerms, Node)
				in  %% Line 188
				    call 'erlang':'++'
					(RunResult, _cor17)
		  end
	  %% Line 190
	  <[],_cor44,_cor45> when 'true' ->
	      %% Line 191
	      []
	  %% Line 192
	  <TS,AllowUserTerms,Node>
	      when call 'erlang':'is_atom'
		    (Node) ->
	      %% Line 193
	      apply 'run_on_node'/3
		  ([TS|[]], AllowUserTerms, Node)
	  ( <_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19})
		  -| [{'function_name',{'run_on_node',3}}] )
	    -| ['compiler_generated'] )
	end
'run_on_node'/2 =
    %% Line 202
    fun (_cor1,_cor0) ->
	%% Line 203
	apply 'run_on_node'/3
	    (_cor1, 'false', _cor0)
'run_all'/9 =
    %% Line 207
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{Node,Run,Skip}|Rest],AllLogDirs,AllCfgFiles = %% Line 208
							   {AllStdCfgFiles,AllUserCfgFiles},%% Line 209
											    AllEvHs,%% Line 209
												    AllIncludes,%% Line 209
														NodeOpts,%% Line 209
															 LogDirs,%% Line 209
																 InitOptions,%% Line 209
																	     Specs> when 'true' ->
	      let <_cor13> =
		  %% Line 211
		  ( fun (_cor10,_cor9) ->
			case <_cor10,_cor9> of
			  <{N,Dir},_X_Found>
			      when call 'erlang':'=='
				    (N,
				     Node) ->
			      %% Line 212
			      Dir
			  %% Line 213
			  <{_X_N,_X_Dir},Found> when 'true' ->
			      %% Line 214
			      Found
			  %% Line 215
			  <Dir,[46]> when 'true' ->
			      %% Line 216
			      Dir
			  %% Line 217
			  <_X_Dir,Found> when 'true' ->
			      %% Line 218
			      Found
			end
		    -| [{'id',{0,0,'-run_all/9-fun-0-'}}] )
	      in  let <LogDir> =
		      %% Line 211
		      call 'lists':'foldl'
			  (_cor13, %% Line 219
				   [46], %% Line 219
					 AllLogDirs)
		  in  let <_cor19> =
			  %% Line 222
			  ( fun (_cor16,_cor15) ->
				case <_cor16,_cor15> of
				  <{N,F},Fs>
				      when call 'erlang':'=='
					    (N,
					     Node) ->
				      [F|Fs]
				  %% Line 223
				  <{_X_N,_X_F},Fs> when 'true' ->
				      Fs
				  %% Line 224
				  <F,Fs> when 'true' ->
				      [F|Fs]
				end
			    -| [{'id',{0,0,'-run_all/9-fun-1-'}}] )
		      in  let <StdCfgFiles> =
			      %% Line 222
			      call 'lists':'foldr'
				  (_cor19, %% Line 225
					   [], %% Line 225
					       AllStdCfgFiles)
			  in  let <_cor25> =
				  %% Line 227
				  ( fun (_cor22,_cor21) ->
					case <_cor22,_cor21> of
					  <{N,F},Fs>
					      when call 'erlang':'=='
						    (N,
						     Node) ->
					      [{'userconfig',F}|Fs]
					  %% Line 228
					  <{_X_N,_X_F},Fs> when 'true' ->
					      Fs
					  %% Line 229
					  <F,Fs> when 'true' ->
					      [{'userconfig',F}|Fs]
					end
				    -| [{'id',{0,0,'-run_all/9-fun-2-'}}] )
			      in  let <UserCfgFiles> =
				      %% Line 227
				      call 'lists':'foldr'
					  (_cor25, %% Line 230
						   [], %% Line 230
						       AllUserCfgFiles)
				  in  let <_cor31> =
					  %% Line 232
					  ( fun (_cor28,_cor27) ->
						case <_cor28,_cor27> of
						  <{N,I},Acc>
						      when call 'erlang':'=:='
							    (N,
							     Node) ->
						      %% Line 233
						      [I|Acc]
						  %% Line 234
						  <{_cor60,_cor61},Acc> when 'true' ->
						      %% Line 235
						      Acc
						  %% Line 236
						  <I,Acc> when 'true' ->
						      %% Line 237
						      [I|Acc]
						end
					    -| [{'id',{0,0,'-run_all/9-fun-3-'}}] )
				      in  let <Includes> =
					      %% Line 232
					      call 'lists':'foldr'
						  (_cor31, %% Line 238
							   [], %% Line 238
							       AllIncludes)
					  in  let <_cor37> =
						  %% Line 240
						  ( fun (_cor34,_cor33) ->
							case <_cor34,_cor33> of
							  <{N,H,A},Hs>
							      when call 'erlang':'=='
								    (N,
								     Node) ->
							      [{H,A}|Hs]
							  %% Line 241
							  <{_X_N,_X_H,_X_A},Hs> when 'true' ->
							      Hs
							  %% Line 242
							  <{H,A},Hs> when 'true' ->
							      [{H,A}|Hs]
							  ( <_cor36,_cor35> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor36,_cor35})
								  -| [{'function_name',{'-run_all/9-fun-4-',2}}] )
							    -| ['compiler_generated'] )
							end
						    -| [{'id',{0,0,'-run_all/9-fun-4-'}}] )
					      in  let <EvHs> =
						      %% Line 240
						      call 'lists':'foldr'
							  (_cor37, %% Line 243
								   [], %% Line 243
								       AllEvHs)
						  in  let <_cor39> =
							  %% Line 245
							  [{'prepared_tests',{Run,Skip},Specs}|%% Line 246
											       [{'logdir',LogDir}|%% Line 247
														  [{'include',Includes}|%% Line 248
																	[{'config',StdCfgFiles}|%% Line 249
																				[{'event_handler',EvHs}|UserCfgFiles]]]]]
						      in  let <NO> = {%% Line 245
							       Node,_cor39}
							  in  %% Line 250
							      apply 'run_all'/9
								  (Rest, AllLogDirs, AllCfgFiles, AllEvHs, AllIncludes, %% Line 251
															[NO|NodeOpts], %% Line 251
																       [LogDir|LogDirs], %% Line 251
																			 InitOptions, %% Line 251
																				      Specs)
	  %% Line 252
	  <[],AllLogDirs,_cor62,AllEvHs,_X_AllIncludes,%% Line 253
						       NodeOpts,%% Line 253
								LogDirs,%% Line 253
									InitOptions,%% Line 253
										    Specs> when 'true' ->
	      let <_cor45> =
		  %% Line 254
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor43) ->
				case _cor43 of
				  <[{Master,H,A}|_cor42]>
				      when call 'erlang':'=:='
					    (Master,
					     'master') ->
				      let <_cor44> =
					  apply 'lc$^0'/1
					      (_cor42)
				      in  ( [{H,A}|_cor44]
					    -| ['compiler_generated'] )
				  ( <[_cor41|_cor42]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor42)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor43> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor43})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (AllEvHs)
		    -| ['list_comprehension'] )
	      in  let <_cor48> =
		      %% Line 255
		      case call 'lists':'keysearch'
			       ('master', 1, AllLogDirs) of
			%% Line 256
			<{'value',{_cor63,Dir}}> when 'true' ->
			    Dir
			%% Line 257
			<'false'> when 'true' ->
			    [46]
			( <_cor47> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor47})
			  -| ['compiler_generated'] )
		      end
		  in  do  %% Line 259
			  apply 'log'/4
			      ('tty', [77|[97|[115|[116|[101|[114|[32|[76|[111|[103|[100|[105|[114]]]]]]]]]]]]], [126|[116|[115]]], [_cor48|[]])
			  let <_cor50> =
			      %% Line 260
			      call 'lists':'reverse'
				  (NodeOpts)
			  in  do  %% Line 260
				  apply 'start_master'/6
				      (_cor50, _cor45, _cor48, %% Line 261
							       LogDirs, %% Line 261
									InitOptions, %% Line 261
										     Specs)
				  %% Line 262
				  'ok'
	  ( <_cor59,_cor58,_cor57,_cor56,_cor55,_cor54,_cor53,_cor52,_cor51> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor59,_cor58,_cor57,_cor56,_cor55,_cor54,_cor53,_cor52,_cor51})
		  -| [{'function_name',{'run_all',9}}] )
	    -| ['compiler_generated'] )
	end
'abort'/0 =
    %% Line 269
    fun () ->
	%% Line 270
	apply 'call'/1
	    ('abort')
'abort'/1 =
    %% Line 277
    fun (_cor0) ->
	case _cor0 of
	  <Nodes>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 278
	      apply 'call'/1
		  ({'abort',Nodes})
	  %% Line 280
	  <Node>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 281
	      apply 'abort'/1
		  ([Node|[]])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'abort',1}}] )
	    -| ['compiler_generated'] )
	end
'progress'/0 =
    %% Line 291
    fun () ->
	%% Line 292
	apply 'call'/1
	    ('progress')
'basic_html'/1 =
    %% Line 301
    fun (_cor0) ->
	do  %% Line 302
	    call 'application':'set_env'
		('common_test_master', 'basic_html', _cor0)
	    %% Line 303
	    'ok'
'start_master'/1 =
    %% Line 308
    fun (_cor0) ->
	%% Line 309
	apply 'start_master'/6
	    (_cor0, [], [46], [], [], [])
'start_master'/6 =
    %% Line 311
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 312
	    call 'erlang':'self'
		()
	in  let <Master> =
		%% Line 312
		call 'erlang':'spawn_link'
		    ('ct_master', 'init_master', [_cor6|[_cor5|[_cor4|%% Line 313
								      [_cor3|[_cor2|%% Line 314
										    [_cor1|[_cor0|[]]]]]]]])
	    in  %% Line 315
		receive
		  %% Line 316
		  <{_cor14,Result}>
		      when call 'erlang':'=:='
			    (_cor14,
			     Master) ->
		      Result
		after 'infinity' ->
		  'true'
'init_master'/7 =
    %% Line 320
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 322
	    case call 'erlang':'whereis'
		     ('ct_master') of
	      %% Line 323
	      <'undefined'> when 'true' ->
		  let <_cor7> =
		      %% Line 324
		      call 'erlang':'self'
			  ()
		  in  do  %% Line 324
			  call 'erlang':'register'
			      ('ct_master', _cor7)
			  'ok'
	      %% Line 326
	      <_X_Pid> when 'true' ->
		  do  %% Line 327
		      call 'io':'format'
			  ([126|[110|[87|[97|[114|[110|[105|[110|[103|[58|[32|[99|[116|[95|[109|[97|[115|[116|[101|[114|[32|[97|[108|[114|[101|[97|[100|[121|[32|[114|[117|[110|[110|[105|[110|[103|[33|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
		      %% Line 328
		      call 'erlang':'exit'
			  ('aborted')
	    end
	    let <_cor13> =
		%% Line 341
		( letrec
		      'lc$^0'/1 =
			  fun (_cor11) ->
			      case _cor11 of
				<[{N,_cor33}|_cor10]> when 'true' ->
				    let <_cor12> =
					apply 'lc$^0'/1
					    (_cor10)
				    in  ( [N|_cor12]
					  -| ['compiler_generated'] )
				( <[_cor9|_cor10]> when 'true' ->
				      apply 'lc$^0'/1
					  (_cor10)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor11> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor11})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (_cor5)
		  -| ['list_comprehension'] )
	    in  %% Line 340
		case call 'ct_master_logs':'start'
			 (_cor3, _cor13) of
		  <{MLPid,_cor34}> when 'true' ->
		      do  %% Line 342
			  apply 'log'/4
			      ('all', [77|[97|[115|[116|[101|[114|[32|[76|[111|[103|[103|[101|[114|[32|[112|[114|[111|[99|[101|[115|[115|[32|[115|[116|[97|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [126|[119]], [MLPid|[]])
			  do  %% Line 344
			      case _cor0 of
				%% Line 345
				<[]> when 'true' ->
				    'ok'
				%% Line 346
				<_cor35> when 'true' ->
				    let <_cor17> =
					%% Line 347
					( fun (_cor15) ->
					      %% Line 348
					      call 'erlang':'++'
						  (_cor15, [32])
					  -| [{'id',{0,0,'-init_master/7-fun-0-'}}] )
				    in  let <SpecsStr> =
					    %% Line 347
					    call 'lists':'map'
						(_cor17, _cor0)
					in  let <_cor19> =
						%% Line 351
						call 'lists':'flatten'
						    (SpecsStr)
					    in  %% Line 350
						call 'ct_master_logs':'log'
						    ([84|[101|[115|[116|[32|[83|[112|[101|[99|[105|[102|[105|[99|[97|[116|[105|[111|[110|[32|[102|[105|[108|[101|[40|[115|[41]]]]]]]]]]]]]]]]]]]]]]]]]], [126|[116|[115]]], %% Line 351
																											    [_cor19|[]])
			      end
			      do  %% Line 355
				  call 'ct_master_event':'start_link'
				      ()
				  do  %% Line 356
				      call 'ct_master_event':'add_handler'
					  ()
				      let <Add> =
					  %% Line 358
					  ( fun (_cor22) ->
						case _cor22 of
						  <{H,Args}> when 'true' ->
						      do  %% Line 359
							  apply 'log'/4
							      ('all', [65|[100|[100|[105|[110|[103|[32|[69|[118|[101|[110|[116|[32|[72|[97|[110|[100|[108|[101|[114]]]]]]]]]]]]]]]]]]]], [126|[119]], [H|[]])
							  %% Line 360
							  case call 'gen_event':'add_handler'
								   ('ct_master_event', H, Args) of
							    %% Line 361
							    <'ok'> when 'true' ->
								'ok'
							    %% Line 362
							    <{'EXIT',Why}> when 'true' ->
								call 'erlang':'exit'
								    (Why)
							    %% Line 363
							    <Other> when 'true' ->
								call 'erlang':'exit'
								    ({'event_handler',Other})
							  end
						  ( <_cor23> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor23})
							  -| [{'function_name',{'-init_master/7-fun-1-',1}}] )
						    -| ['compiler_generated'] )
						end
					    -| [{'id',{0,0,'-init_master/7-fun-1-'}}] )
				      in  do  %% Line 366
					      call 'lists':'foreach'
						  (Add, _cor4)
					      do  %% Line 369
						  case call 'erlang':'whereis'
							   ('ct_master_event') of
						    %% Line 370
						    <'undefined'> when 'true' ->
							%% Line 371
							call 'erlang':'exit'
							    ({'ct_master_event','undefined'})
						    %% Line 372
						    <Pid>
							when call 'erlang':'is_pid'
							      (Pid) ->
							'ok'
						    ( <_cor25> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor25})
						      -| ['compiler_generated'] )
						  end
						  %% Line 375
						  apply 'init_master1'/4
						      (_cor6, _cor5, _cor1, _cor2)
		  ( <_cor14> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor14})
		    -| ['compiler_generated'] )
		end
'init_master1'/4 =
    %% Line 377
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 378
	case apply 'init_nodes'/2
		 (_cor2, _cor1) of
	  <{Inaccessible,NodeOptsList1,InitOptions1}> when 'true' ->
	      %% Line 380
	      case Inaccessible of
		%% Line 381
		<[]> when 'true' ->
		    %% Line 382
		    apply 'init_master2'/3
			(_cor3, _cor2, _cor0)
		%% Line 383
		<_cor11> when 'true' ->
		    do  %% Line 384
			call 'io':'format'
			    ([126|[110|[84|[104|[101|[32|[102|[111|[108|[108|[111|[119|[105|[110|[103|[32|[110|[111|[100|[101|[115|[32|[97|[114|[101|[32|[105|[110|[97|[99|[99|[101|[115|[115|[105|[98|[108|[101|[58|[32|[126|[112|[126|[110|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 385
																																				      [Inaccessible|[]])
			do  %% Line 386
			    call 'io':'format'
				([80|[114|[111|[99|[101|[101|[100|[40|[112|[41|[44|[32|[82|[101|[115|[99|[97|[110|[40|[114|[41|[32|[111|[114|[32|[65|[98|[111|[114|[116|[40|[97|[41|[63|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
			    %% Line 387
			    case call 'io':'get_line'
				     ('[p/r/a]>') of
			      %% Line 388
			      <[112|[10]]> when 'true' ->
				  do  %% Line 389
				      apply 'log'/4
					  ('html', [73|[110|[97|[99|[99|[101|[115|[115|[105|[98|[108|[101|[32|[78|[111|[100|[101|[115]]]]]]]]]]]]]]]]]], %% Line 390
																			 [80|[114|[111|[99|[101|[101|[100|[105|[110|[103|[32|[119|[105|[116|[104|[111|[117|[116|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]], %% Line 390
																																			 [Inaccessible|[]])
				      %% Line 391
				      apply 'init_master2'/3
					  (_cor3, NodeOptsList1, _cor0)
			      %% Line 392
			      <[114|[10]]> when 'true' ->
				  %% Line 393
				  apply 'init_master1'/4
				      (_cor3, _cor2, InitOptions1, _cor0)
			      %% Line 394
			      <_cor12> when 'true' ->
				  do  %% Line 395
				      apply 'log'/4
					  ('html', [65|[98|[111|[114|[116|[105|[110|[103|[32|[84|[101|[115|[116|[115]]]]]]]]]]]]]], [], [])
				      do  %% Line 396
					  call 'ct_master_event':'stop'
					      ()
					  do  %% Line 397
					      call 'ct_master_logs':'stop'
						  ()
					      %% Line 398
					      call 'erlang':'exit'
						  ('aborted')
			    end
	      end
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'init_master2'/3 =
    %% Line 402
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 403
	    call 'erlang':'process_flag'
		('trap_exit', 'true')
	    let <Cookie> =
		%% Line 404
		call 'erlang':'get_cookie'
		    ()
	    in  do  %% Line 405
		    apply 'log'/4
			('all', [67|[111|[111|[107|[105|[101]]]]]], [126|[119]], [Cookie|[]])
		    let <_cor8> =
			%% Line 407
			( letrec
			      'lc$^0'/1 =
				  fun (_cor6) ->
				      case _cor6 of
					<[{N,_cor20}|_cor5]> when 'true' ->
					    let <_cor7> =
						apply 'lc$^0'/1
						    (_cor5)
					    in  ( [N|_cor7]
						  -| ['compiler_generated'] )
					( <[_cor4|_cor5]> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor5)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor6> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor6})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (_cor1)
			  -| ['list_comprehension'] )
		    in  do  %% Line 406
			    apply 'log'/4
				('all', [83|[116|[97|[114|[116|[105|[110|[103|[32|[84|[101|[115|[116|[115]]]]]]]]]]]]]], %% Line 407
															 [84|[101|[115|[116|[115|[32|[115|[116|[97|[114|[116|[105|[110|[103|[32|[111|[110|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]], %% Line 407
																														  [_cor8|[]])
			    let <SpawnAndMon> =
				%% Line 409
				( fun (_cor11) ->
				      case _cor11 of
					<{Node,Opts}> when 'true' ->
					    do  %% Line 410
						call 'erlang':'monitor_node'
						    (Node, 'true')
						do  %% Line 411
						    apply 'log'/4
							('all', [84|[101|[115|[116|[32|[73|[110|[102|[111]]]]]]]]], [83|[116|[97|[114|[116|[105|[110|[103|[32|[116|[101|[115|[116|[40|[115|[41|[32|[111|[110|[32|[126|[119|[46|[46|[46]]]]]]]]]]]]]]]]]]]]]]]]], [Node|[]])
						    let <_cor9> =
							%% Line 412
							call 'erlang':'self'
							    ()
						    in  let <_cor10> =
							    %% Line 412
							    call 'erlang':'spawn_link'
								(Node, 'ct_master', 'init_node_ctrl', [_cor9|[Cookie|[Opts|[]]]])
							in  %% Line 412
							    {_cor10,%% Line 413
								    Node}
					( <_cor12> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor12})
						-| [{'function_name',{'-init_master2/3-fun-0-',1}}] )
					  -| ['compiler_generated'] )
				      end
				  -| [{'id',{0,0,'-init_master2/3-fun-0-'}}] )
			    in  let <NodeCtrlPids> =
				    %% Line 415
				    call 'lists':'map'
					(SpawnAndMon, _cor1)
				in  let <Result> =
					%% Line 416
					apply 'master_loop'/1
					    ({'state',NodeCtrlPids,_cor0,[],[],[]})
				    in  let <_cor16> =
					    %% Line 418
					    call 'erlang':'self'
						()
					in  %% Line 418
					    call 'erlang':'!'
						(_cor2, {_cor16,Result})
'master_loop'/1 =
    %% Line 420
    fun (_cor0) ->
	case _cor0 of
	  <{'state',[],%% Line 421
		       LogDirs,%% Line 422
			       Finished,_cor50,_cor51}> when 'true' ->
	      let <_cor5> =
		  %% Line 424
		  ( fun (_cor3) ->
			case _cor3 of
			  <{Node,Result}> when 'true' ->
			      let <_cor2> =
				  %% Line 426
				  call 'erlang':'atom_to_list'
				      (Node)
			      in  %% Line 425
				  call 'io_lib':'format'
				      ([126|[45|[52|[48|[46|[52|[48|[46|[42|[116|[115|[126|[112|[10]]]]]]]]]]]]]], %% Line 426
														   [95|[_cor2|[Result|[]]]])
			  ( <_cor4> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor4})
				  -| [{'function_name',{'-master_loop/1-fun-0-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-master_loop/1-fun-0-'}}] )
	      in  let <_cor1> =
		      %% Line 427
		      call 'lists':'reverse'
			  (Finished)
		  in  let <Str> =
			  %% Line 424
			  call 'lists':'map'
			      (_cor5, _cor1)
		      in  do  %% Line 428
			      apply 'log'/4
				  ('all', [84|[69|[83|[84|[32|[82|[69|[83|[85|[76|[84|[83]]]]]]]]]]]], Str, [])
			      do  %% Line 429
				  apply 'log'/4
				      ('all', [73|[110|[102|[111]]]], [85|[112|[100|[97|[116|[105|[110|[103|[32|[108|[111|[103|[32|[102|[105|[108|[101|[115]]]]]]]]]]]]]]]]]], [])
				  do  %% Line 430
				      apply 'refresh_logs'/2
					  (LogDirs, [])
				      do  %% Line 432
					  call 'ct_master_event':'stop'
					      ()
					  do  %% Line 433
					      call 'ct_master_logs':'stop'
						  ()
					      %% Line 434
					      'ok'
	  %% Line 436
	  <State = {'state',NodeCtrlPids,_cor52,%% Line 437
						Results,%% Line 438
							Locks,%% Line 439
							      Blocked}> when 'true' ->
	      %% Line 440
	      receive
		%% Line 441
		<{'EXIT',Pid,Reason}> when 'true' ->
		    %% Line 442
		    case apply 'get_node'/2
			     (Pid, NodeCtrlPids) of
		      %% Line 443
		      <{Node,NodeCtrlPids1}> when 'true' ->
			  do  %% Line 444
			      call 'erlang':'monitor_node'
				  (Node, 'false')
			      %% Line 445
			      case Reason of
				%% Line 446
				<'normal'> when 'true' ->
				    do  %% Line 447
					apply 'log'/4
					    ('all', [84|[101|[115|[116|[32|[73|[110|[102|[111]]]]]]]]], %% Line 448
													[84|[101|[115|[116|[40|[115|[41|[32|[111|[110|[32|[110|[111|[100|[101|[32|[126|[119|[32|[102|[105|[110|[105|[115|[104|[101|[100|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 448
																																	 [Node|[]])
					let <_cor9> =
					    %% Line 449
					    call 'erlang':'setelement'
						(2, State, NodeCtrlPids1)
					in  %% Line 449
					    apply 'master_loop'/1
						(_cor9)
				%% Line 450
				<Bad> when 'true' ->
				    let <_cor13> =
					%% Line 452
					case Bad of
					  %% Line 453
					  <What>
					      when let <_cor10> =
						    call 'erlang':'=/='
							(Bad, 'killed')
						in  let <_cor11> =
							call 'erlang':'is_atom'
							    (Bad)
						    in  call 'erlang':'and'
							    (_cor10, _cor11) ->
					      %% Line 454
					      {'error',Bad}
					  %% Line 455
					  <_cor59> when 'true' ->
					      %% Line 456
					      Bad
					end
				    in  do  %% Line 458
					    apply 'log'/4
						('all', [84|[101|[115|[116|[32|[73|[110|[102|[111]]]]]]]]], %% Line 459
													    [84|[101|[115|[116|[32|[111|[110|[32|[110|[111|[100|[101|[32|[126|[119|[32|[102|[97|[105|[108|[101|[100|[33|[32|[82|[101|[97|[115|[111|[110|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 460
																																					     [Node|[_cor13|[]]])
					    %% Line 461
					    case %% Line 462
						 apply 'update_queue'/4
						     ('exit', Node, Locks, Blocked) of
					      <{Locks1,Blocked1}> when 'true' ->
						  let <_rec1> =
						      %% Line 464
						      [{Node,_cor13}|%% Line 465
								     Results]
						  in  let <_cor19> =
							  %% Line 467
							  {'state',NodeCtrlPids1,_cor52,_rec1,Locks1,Blocked1}
						      in  %% Line 463
							  apply 'master_loop'/1
							      (_cor19)
					      ( <_cor15> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor15})
						-| ['compiler_generated'] )
					    end
			      end
		      %% Line 469
		      <'undefined'> when 'true' ->
			  do  %% Line 471
			      apply 'log'/4
				  ('all', [84|[101|[115|[116|[32|[73|[110|[102|[111]]]]]]]]], %% Line 472
											      [87|[97|[114|[110|[105|[110|[103|[33|[32|[80|[114|[111|[99|[101|[115|[115|[32|[126|[119|[32|[104|[97|[115|[32|[116|[101|[114|[109|[105|[110|[97|[116|[101|[100|[46|[32|[82|[101|[97|[115|[111|[110|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 473
																																												  [Pid|[Reason|[]]])
			      %% Line 474
			      apply 'master_loop'/1
				  (State)
		      ( <_cor21> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor21})
			-| ['compiler_generated'] )
		    end
		%% Line 477
		<{'nodedown',Node}> when 'true' ->
		    %% Line 478
		    case apply 'get_pid'/2
			     (Node, NodeCtrlPids) of
		      %% Line 479
		      <{_X_Pid,NodeCtrlPids1}> when 'true' ->
			  do  %% Line 480
			      call 'erlang':'monitor_node'
				  (Node, 'false')
			      do  %% Line 481
				  apply 'log'/4
				      ('all', [84|[101|[115|[116|[32|[73|[110|[102|[111]]]]]]]]], [78|[111|[32|[99|[111|[110|[110|[101|[99|[116|[105|[111|[110|[32|[116|[111|[32|[116|[101|[115|[116|[110|[111|[100|[101|[32|[126|[119|[33]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Node|[]])
				  %% Line 482
				  case %% Line 483
				       apply 'update_queue'/4
					   ('exit', Node, Locks, Blocked) of
				    <{Locks1,Blocked1}> when 'true' ->
					let <_rec8> =
					    %% Line 485
					    [{Node,'nodedown'}|Results]
					in  let <_cor26> =
						%% Line 487
						{'state',NodeCtrlPids1,_cor52,_rec8,Locks1,Blocked1}
					    in  %% Line 484
						apply 'master_loop'/1
						    (_cor26)
				    ( <_cor22> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor22})
				      -| ['compiler_generated'] )
				  end
		      %% Line 488
		      <'undefined'> when 'true' ->
			  %% Line 489
			  apply 'master_loop'/1
			      (State)
		      ( <_cor27> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor27})
			-| ['compiler_generated'] )
		    end
		%% Line 492
		<{Pid,{'result',Result}}> when 'true' ->
		    %% Line 493
		    case apply 'get_node'/2
			     (Pid, NodeCtrlPids) of
		      <{Node,_cor62}> when 'true' ->
			  let <_rec15> =
			      %% Line 494
			      [{Node,Result}|Results]
			  in  let <_cor32> =
				  %% Line 494
				  call 'erlang':'setelement'
				      (4, State, _rec15)
			      in  %% Line 494
				  apply 'master_loop'/1
				      (_cor32)
		      ( <_cor28> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor28})
			-| ['compiler_generated'] )
		    end
		%% Line 496
		<{'call','progress',From}> when 'true' ->
		    let <_cor33> =
			%% Line 497
			apply 'master_progress'/2
			    (NodeCtrlPids, Results)
		    in  do  %% Line 497
			    apply 'reply'/2
				(_cor33, From)
			    %% Line 498
			    apply 'master_loop'/1
				(State)
		%% Line 500
		<{'call','abort',From}> when 'true' ->
		    let <_cor36> =
			%% Line 501
			( fun (_cor34) ->
			      case _cor34 of
				<{Pid,Node}> when 'true' ->
				    do  %% Line 502
					apply 'log'/4
					    ('all', [84|[101|[115|[116|[32|[73|[110|[102|[111]]]]]]]]], %% Line 503
													[65|[98|[111|[114|[116|[105|[110|[103|[32|[116|[101|[115|[116|[115|[32|[111|[110|[32|[126|[119]]]]]]]]]]]]]]]]]]]], %% Line 503
																											    [Node|[]])
					%% Line 504
					call 'erlang':'exit'
					    (Pid, 'kill')
				( <_cor35> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor35})
					-| [{'function_name',{'-master_loop/1-fun-1-',1}}] )
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-master_loop/1-fun-1-'}}] )
		    in  do  %% Line 501
			    call 'lists':'foreach'
				(_cor36, %% Line 505
					 NodeCtrlPids)
			    do  %% Line 506
				apply 'reply'/2
				    ('ok', From)
				%% Line 507
				apply 'master_loop'/1
				    (State)
		%% Line 509
		<{'call',{'abort',Nodes},From}> when 'true' ->
		    let <_cor40> =
			%% Line 510
			( fun (_cor38) ->
			      %% Line 511
			      case call 'lists':'keysearch'
				       (_cor38, 2, NodeCtrlPids) of
				%% Line 512
				<{'value',{Pid,_cor69}}>
				    when call 'erlang':'=:='
					  (_cor69,
					   _cor38) ->
				    do  %% Line 513
					apply 'log'/4
					    ('all', [84|[101|[115|[116|[32|[73|[110|[102|[111]]]]]]]]], %% Line 514
													[65|[98|[111|[114|[116|[105|[110|[103|[32|[116|[101|[115|[116|[115|[32|[111|[110|[32|[126|[119]]]]]]]]]]]]]]]]]]]], %% Line 514
																											    [_cor38|[]])
					%% Line 515
					call 'erlang':'exit'
					    (Pid, 'kill')
				%% Line 516
				<'false'> when 'true' ->
				    %% Line 517
				    'ok'
				( <_cor37> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor37})
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-master_loop/1-fun-2-'}}] )
		    in  do  %% Line 510
			    call 'lists':'foreach'
				(_cor40, %% Line 519
					 Nodes)
			    do  %% Line 520
				apply 'reply'/2
				    ('ok', From)
				%% Line 521
				apply 'master_loop'/1
				    (State)
		%% Line 523
		<{'call',{'event',Name,Node,Data},From}> when 'true' ->
		    let <Op,Lock> =
			%% Line 525
			case Name of
			  %% Line 526
			  <'start_make'> when 'true' ->
			      %% Line 527
			      <'take',{'make',Data}>
			  %% Line 528
			  <'finished_make'> when 'true' ->
			      %% Line 529
			      <'release',{'make',Data}>
			  %% Line 530
			  <'start_write_file'> when 'true' ->
			      %% Line 531
			      <'take',{'write_file',Data}>
			  %% Line 532
			  <'finished_write_file'> when 'true' ->
			      %% Line 533
			      <'release',{'write_file',Data}>
			  ( <_cor41> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor41})
			    -| ['compiler_generated'] )
			end
		    in  %% Line 535
			case %% Line 536
			     apply 'update_queue'/6
				 (Op, Node, From, Lock, Locks, Blocked) of
			  <{Locks1,Blocked1}> when 'true' ->
			      do  %% Line 537
				  case <> of
				    <>
					when call 'erlang':'=:='
					      (Op,
					       'release') ->
					apply 'reply'/2
					    ('ok', From)
				    %% Line 538
				    <> when 'true' ->
					'ok'
				  end
				  let <_cor46> =
				      %% Line 541
				      call 'erlang':'setelement'
					  (6, State, Blocked1)
				  in  let <_cor48> =
					  %% Line 540
					  call 'erlang':'setelement'
					      (5, _cor46, Locks1)
				      in  %% Line 540
					  apply 'master_loop'/1
					      (_cor48)
			  ( <_cor44> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor44})
			    -| ['compiler_generated'] )
			end
		%% Line 543
		<{'cast',Event = {'event',_cor76,_cor77,_cor78}}> when ( 'true'
									 -| ['compiler_generated'] ) ->
		    do  %% Line 544
			call 'ct_master_event':'notify'
			    (Event)
			%% Line 545
			apply 'master_loop'/1
			    (State)
	      after 'infinity' ->
		'true'
	  ( <_cor49> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor49})
		  -| [{'function_name',{'master_loop',1}}] )
	    -| ['compiler_generated'] )
	end
'update_queue'/6 =
    %% Line 550
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <'take',Node,From,Lock = {Op,Resource},Locks,Blocked> when 'true' ->
	      %% Line 553
	      case call 'lists':'keysearch'
		       (Lock, 1, Locks) of
		%% Line 554
		<{'value',{_X_Lock,Owner}}> when 'true' ->
		    do  %% Line 555
			apply 'log'/4
			    ('html', [76|[111|[99|[107|[32|[73|[110|[102|[111]]]]]]]]], [78|[111|[100|[101|[32|[126|[119|[32|[98|[108|[111|[99|[107|[101|[100|[32|[111|[110|[32|[126|[119|[32|[98|[121|[32|[126|[119|[46|[32|[82|[101|[115|[111|[117|[114|[99|[101|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 556
																																							       [Node|[Op|[Owner|[Resource|[]]]]])
			let <Blocked1> =
			    %% Line 557
			    call 'erlang':'++'
				(Blocked, [{Lock,Node,From}|[]])
			in  %% Line 558
			    {Locks,Blocked1}
		%% Line 559
		<'false'> when 'true' ->
		    let <Locks1> =
			%% Line 560
			[{Lock,Node}|Locks]
		    in  do  %% Line 561
			    apply 'reply'/2
				('ok', From)
			    %% Line 562
			    {Locks1,Blocked}
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 565
	  <'release',Node,_X_From,Lock = {Op,Resource},Locks,Blocked> when 'true' ->
	      let <Locks1> =
		  %% Line 566
		  call 'lists':'delete'
		      ({Lock,Node}, Locks)
	      in  %% Line 567
		  case call 'lists':'keysearch'
			   (Lock, 1, Blocked) of
		    %% Line 568
		    <{'value',E = {_cor18,SomeNode,WaitingPid}}>
			when call 'erlang':'=:='
			      (_cor18,
			       Lock) ->
			let <Blocked1> =
			    %% Line 569
			    call 'lists':'delete'
				(E, Blocked)
			in  do  %% Line 570
				apply 'log'/4
				    ('html', [76|[111|[99|[107|[32|[73|[110|[102|[111]]]]]]]]], [78|[111|[100|[101|[32|[126|[119|[32|[112|[114|[111|[99|[101|[101|[100|[115|[32|[119|[105|[116|[104|[32|[126|[119|[46|[32|[82|[101|[115|[111|[117|[114|[99|[101|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 571
																																							 [SomeNode|[Op|[Resource|[]]]])
				do  %% Line 572
				    apply 'reply'/2
					('ok', WaitingPid)
				    %% Line 573
				    {Locks1,Blocked1}
		    %% Line 574
		    <'false'> when 'true' ->
			%% Line 575
			{Locks1,Blocked}
		    ( <_cor11> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor11})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor17,_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'update_queue',6}}] )
	    -| ['compiler_generated'] )
	end
'update_queue'/4 =
    %% Line 578
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'exit',Node,Locks,Blocked> when 'true' ->
	      let <_cor8> =
		  %% Line 579
		  ( fun (_cor5,_cor4) ->
			case <_cor5,_cor4> of
			  <{L,N},Ls>
			      when call 'erlang':'=='
				    (N,
				     Node) ->
			      %% Line 580
			      [L|Ls]
			  %% Line 581
			  <_cor14,Ls> when 'true' ->
			      %% Line 582
			      Ls
			end
		    -| [{'id',{0,0,'-update_queue/4-fun-0-'}}] )
	      in  let <NodeLocks> =
		      %% Line 579
		      call 'lists':'foldl'
			  (_cor8, %% Line 583
				  [], %% Line 583
				      Locks)
		  in  %% Line 584
		      apply 'release_locks'/4
			  (Node, NodeLocks, Locks, Blocked)
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'update_queue',4}}] )
	    -| ['compiler_generated'] )
	end
'release_locks'/4 =
    %% Line 586
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Node,[Lock|Ls],Locks,Blocked> when 'true' ->
	      %% Line 587
	      case apply 'update_queue'/6
		       ('release', Node, 'undefined', Lock, Locks, Blocked) of
		<{Locks1,Blocked1}> when 'true' ->
		    %% Line 588
		    apply 'release_locks'/4
			(Node, Ls, Locks1, Blocked1)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 589
	  <_cor9,[],Locks,Blocked> when 'true' ->
	      %% Line 590
	      {Locks,Blocked}
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'release_locks',4}}] )
	    -| ['compiler_generated'] )
	end
'get_node'/2 =
    %% Line 592
    fun (_cor1,_cor0) ->
	%% Line 593
	case call 'lists':'keysearch'
		 (_cor1, 1, _cor0) of
	  %% Line 594
	  <{'value',{_cor6,Node}}>
	      when call 'erlang':'=:='
		    (_cor6,
		     _cor1) ->
	      let <_cor2> =
		  %% Line 595
		  call 'lists':'keydelete'
		      (_cor1, 1, _cor0)
	      in  %% Line 595
		  {Node,_cor2}
	  %% Line 596
	  <'false'> when 'true' ->
	      %% Line 597
	      'undefined'
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'get_pid'/2 =
    %% Line 600
    fun (_cor1,_cor0) ->
	%% Line 601
	case call 'lists':'keysearch'
		 (_cor1, 2, _cor0) of
	  %% Line 602
	  <{'value',{Pid,_cor6}}>
	      when call 'erlang':'=:='
		    (_cor6,
		     _cor1) ->
	      let <_cor2> =
		  %% Line 603
		  call 'lists':'keydelete'
		      (_cor1, 2, _cor0)
	      in  %% Line 603
		  {Pid,_cor2}
	  %% Line 604
	  <'false'> when 'true' ->
	      %% Line 605
	      'undefined'
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'ping_nodes'/1 =
    %% Line 608
    fun (_cor0) ->
	%% Line 609
	apply 'ping_nodes'/3
	    (_cor0, [], [])
'ping_nodes'/3 =
    %% Line 611
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[NO = {Node,_X_Opts}|NOs],Inaccessible,NodeOpts> when 'true' ->
	      %% Line 612
	      case call 'net_adm':'ping'
		       (Node) of
		%% Line 613
		<'pong'> when 'true' ->
		    %% Line 614
		    apply 'ping_nodes'/3
			(NOs, Inaccessible, [NO|NodeOpts])
		%% Line 615
		<_cor9> when 'true' ->
		    %% Line 616
		    apply 'ping_nodes'/3
			(NOs, [Node|Inaccessible], NodeOpts)
	      end
	  %% Line 618
	  <[],Inaccessible,NodeOpts> when 'true' ->
	      let <_cor5> =
		  %% Line 619
		  call 'lists':'reverse'
		      (Inaccessible)
	      in  let <_cor4> =
		      %% Line 619
		      call 'lists':'reverse'
			  (NodeOpts)
		  in  %% Line 619
		      {_cor5,_cor4}
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'ping_nodes',3}}] )
	    -| ['compiler_generated'] )
	end
'master_progress'/2 =
    %% Line 621
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 622
	    ( fun (_cor2) ->
		  case _cor2 of
		    <{_X_Pid,Node}> when 'true' ->
			%% Line 623
			{Node,'ongoing'}
		    ( <_cor3> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor3})
			    -| [{'function_name',{'-master_progress/2-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-master_progress/2-fun-0-'}}] )
	in  let <_cor5> =
		%% Line 622
		call 'lists':'map'
		    (_cor4, _cor1)
	    in  %% Line 622
		call 'erlang':'++'
		    (_cor0, _cor5)
'refresh_logs'/2 =
    %% Line 627
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[D|Dirs],Refreshed> when 'true' ->
	      %% Line 628
	      case call 'lists':'member'
		       (D, Dirs) of
		%% Line 629
		<'true'> when 'true' ->
		    %% Line 630
		    case call 'lists':'keymember'
			     (D, 1, Refreshed) of
		      %% Line 631
		      <'true'> when 'true' ->
			  %% Line 632
			  apply 'refresh_logs'/2
			      (Dirs, Refreshed)
		      %% Line 633
		      <'false'> when 'true' ->
			  %% Line 634
			  case call 'file':'get_cwd'
				   () of
			    <{'ok',Cwd}> when 'true' ->
				let <_cor3> =
				    catch
					%% Line 635
					call 'ct_run':'refresh_logs'
					    (D)
				in  %% Line 635
				    case _cor3 of
				      %% Line 636
				      <{'EXIT',Reason}> when 'true' ->
					  do  %% Line 637
					      call 'file':'set_cwd'
						  (Cwd)
					      %% Line 638
					      apply 'refresh_logs'/2
						  (Dirs, [{D,{'error',Reason}}|Refreshed])
				      %% Line 639
				      <Result> when 'true' ->
					  %% Line 640
					  apply 'refresh_logs'/2
					      (Dirs, [{D,Result}|Refreshed])
				    end
			    ( <_cor2> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor2})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor5})
			-| ['compiler_generated'] )
		    end
		%% Line 643
		<'false'> when 'true' ->
		    %% Line 644
		    apply 'refresh_logs'/2
			(Dirs, Refreshed)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 646
	  <[],Refreshed> when 'true' ->
	      let <_cor9> =
		  %% Line 648
		  ( fun (_cor7) ->
			case _cor7 of
			  <{D,Result}> when 'true' ->
			      %% Line 649
			      call 'io_lib':'format'
				  ([82|[101|[102|[114|[101|[115|[104|[105|[110|[103|[32|[108|[111|[103|[115|[32|[105|[110|[32|[126|[112|[46|[46|[46|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 650
																							      [D|[Result|[]]])
			  ( <_cor8> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor8})
				  -| [{'function_name',{'-refresh_logs/2-fun-0-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-refresh_logs/2-fun-0-'}}] )
	      in  let <Str> =
		      %% Line 648
		      call 'lists':'map'
			  (_cor9, %% Line 651
				  Refreshed)
		  in  %% Line 652
		      apply 'log'/4
			  ('all', [73|[110|[102|[111]]]], Str, [])
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11})
		  -| [{'function_name',{'refresh_logs',2}}] )
	    -| ['compiler_generated'] )
	end
'init_node_ctrl'/3 =
    %% Line 658
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 660
	    call 'erlang':'process_flag'
		('trap_exit', 'true')
	    let <MasterNode> =
		%% Line 661
		call 'erlang':'node'
		    (_cor2)
	    in  let <_cor5> =
		    %% Line 662
		    call 'erlang':'whereis'
			('user')
		in  let <_cor4> =
			%% Line 662
			call 'erlang':'self'
			    ()
		    in  do  %% Line 662
			    call 'erlang':'group_leader'
				(_cor5, _cor4)
			    let <_cor6> =
				%% Line 664
				call 'erlang':'self'
				    ()
			    in  let <_cor7> =
				    %% Line 664
				    call 'erlang':'node'
					()
				in  do  %% Line 663
					call 'io':'format'
					    ([126|[110|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[32|[110|[111|[100|[101|[95|[99|[116|[114|[108|[32|[112|[114|[111|[99|[101|[115|[115|[32|[126|[119|[32|[115|[116|[97|[114|[116|[101|[100|[32|[111|[110|[32|[126|[119|[32|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 664
																																														       [_cor6|[_cor7|[]]])
					do  %% Line 668
					    case call 'erlang':'get_cookie'
						     () of
					      %% Line 669
					      <_cor20>
						  when call 'erlang':'=:='
							(_cor20,
							 _cor1) ->
						  let <_cor8> =
						      %% Line 670
						      call 'erlang':'node'
							  (_cor2)
						  in  %% Line 670
						      call 'erlang':'set_cookie'
							  (_cor8, _cor1)
					      %% Line 671
					      <_cor21> when 'true' ->
						  'ok'
					    end
					    do  %% Line 674
						case call 'erlang':'whereis'
							 ('ct_util_server') of
						  %% Line 675
						  <'undefined'> when 'true' ->
						      'ok'
						  %% Line 676
						  <Pid> when 'true' ->
						      call 'erlang':'exit'
							  (Pid, 'kill')
						end
						do  %% Line 680
						    call 'ct_event':'start_link'
							()
						    do  %% Line 681
							call 'ct_event':'add_handler'
							    ([{'master',_cor2}|[]])
							let <_cor11> =
							    catch
								%% Line 684
								call 'ct':'run_test'
								    (_cor0)
							in  let <_cor13> =
								%% Line 684
								case _cor11 of
								  %% Line 685
								  <'ok'> when 'true' ->
								      'finished_ok'
								  %% Line 686
								  <Other> when 'true' ->
								      Other
								end
							    in  do  %% Line 690
								    call 'ct_event':'stop'
									()
								    %% Line 692
								    case call 'net_adm':'ping'
									     (MasterNode) of
								      %% Line 693
								      <'pong'> when 'true' ->
									  let <_cor15> =
									      %% Line 694
									      call 'erlang':'self'
										  ()
									  in  %% Line 694
									      call 'erlang':'!'
										  (_cor2, {_cor15,{'result',_cor13}})
								      %% Line 695
								      <'pang'> when 'true' ->
									  %% Line 696
									  call 'io':'format'
									      ([87|[97|[114|[110|[105|[110|[103|[33|[32|[67|[111|[110|[110|[101|[99|[116|[105|[111|[110|[32|[116|[111|[32|[109|[97|[115|[116|[101|[114|[32|[110|[111|[100|[101|[32|[126|[119|[32|[105|[115|[32|[108|[111|[115|[116|[46|[32|[67|[97|[110|[39|[116|[32|[114|[101|[112|[111|[114|[116|[32|[114|[101|[115|[117|[108|[116|[33|[126|[110|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 697
																																																												     [MasterNode|[]])
								      ( <_cor16> when 'true' ->
									    primop 'match_fail'
										({'case_clause',_cor16})
									-| ['compiler_generated'] )
								    end
'status'/2 =
    %% Line 704
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <MasterPid,Event = {'event','start_make',_cor4,_cor5}> when 'true' ->
	      %% Line 705
	      apply 'call'/2
		  (MasterPid, Event)
	  %% Line 706
	  <MasterPid,Event = {'event','finished_make',_cor6,_cor7}> when 'true' ->
	      %% Line 707
	      apply 'call'/2
		  (MasterPid, Event)
	  %% Line 708
	  <MasterPid,Event = {'event','start_write_file',_cor8,_cor9}> when 'true' ->
	      %% Line 709
	      apply 'call'/2
		  (MasterPid, Event)
	  %% Line 710
	  <MasterPid,Event = {'event','finished_write_file',_cor10,_cor11}> when 'true' ->
	      %% Line 711
	      apply 'call'/2
		  (MasterPid, Event)
	  %% Line 712
	  <MasterPid,Event> when 'true' ->
	      %% Line 713
	      apply 'cast'/2
		  (MasterPid, Event)
	end
'log'/4 =
    %% Line 719
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 720
	    case <> of
	      <>
		  when let <_cor4> =
			call 'erlang':'=:='
			    (_cor3, 'all')
		    in  let <_cor5> =
			    call 'erlang':'=:='
				(_cor3, 'tty')
			in  call 'erlang':'or'
				(_cor4, _cor5) ->
		  let <_cor6> =
		      %% Line 722
		      call 'io_lib':'format'
			  (_cor1, _cor0)
		  in  let <Chars> =
			  %% Line 721
			  [[61|[61|[61|[32]]]]|[_cor2|[[32|[61|[61|[61|[10]]]]]|%% Line 722
										[_cor6|[[10]]]]]]
		      in  %% Line 723
			  call 'io':'put_chars'
			      (Chars)
	      %% Line 724
	      <> when 'true' ->
		  'ok'
	    end
	    %% Line 727
	    case <> of
	      <>
		  when let <_cor8> =
			call 'erlang':'=:='
			    (_cor3, 'all')
		    in  let <_cor9> =
			    call 'erlang':'=:='
				(_cor3, 'html')
			in  call 'erlang':'or'
				(_cor8, _cor9) ->
		  %% Line 728
		  call 'ct_master_logs':'log'
		      (_cor2, _cor1, _cor0)
	      %% Line 729
	      <> when 'true' ->
		  %% Line 730
		  'ok'
	    end
'call'/1 =
    %% Line 734
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 735
	    call 'erlang':'whereis'
		('ct_master')
	in  %% Line 735
	    apply 'call'/2
		(_cor1, _cor0)
'call'/2 =
    %% Line 737
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'undefined',_X_Msg> when 'true' ->
	      %% Line 738
	      {'error','not_running'}
	  %% Line 740
	  <Pid,Msg> when 'true' ->
	      let <Ref> =
		  %% Line 741
		  call 'erlang':'monitor'
		      ('process', Pid)
	      in  let <_cor3> =
		      %% Line 742
		      call 'erlang':'self'
			  ()
		  in  do  %% Line 742
			  call 'erlang':'!'
			      (Pid, {'call',Msg,_cor3})
			  let <_cor4> =
			      %% Line 743
			      receive
				%% Line 744
				<{_cor8,Result}>
				    when call 'erlang':'=:='
					  (_cor8,
					   Pid) ->
				    %% Line 745
				    Result
				%% Line 746
				<{'DOWN',_cor9,_cor10,_cor11,_cor12}>
				    when call 'erlang':'=:='
					  (_cor9,
					   Ref) ->
				    %% Line 747
				    {'error','master_died'}
			      after 'infinity' ->
				'true'
			  in  do  %% Line 749
				  call 'erlang':'demonitor'
				      (Ref, ['flush'])
				  _cor4
	end
'reply'/2 =
    %% Line 752
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 753
	    call 'erlang':'self'
		()
	in  do  %% Line 753
		call 'erlang':'!'
		    (_cor0, {_cor2,_cor1})
		%% Line 754
		'ok'
'init_nodes'/2 =
    %% Line 756
    fun (_cor1,_cor0) ->
	do  %% Line 757
	    apply 'ping_nodes'/1
		(_cor1)
	    do  %% Line 758
		apply 'start_nodes'/1
		    (_cor0)
		do  %% Line 759
		    apply 'eval_on_nodes'/1
			(_cor0)
		    %% Line 760
		    case apply 'ping_nodes'/1
			     (_cor1) of
		      <{Inaccessible,NodeOptions1}> when 'true' ->
			  let <InitOptions1> =
			      %% Line 761
			      apply 'filter_accessible'/2
				  (_cor0, Inaccessible)
			  in  %% Line 762
			      {Inaccessible,NodeOptions1,InitOptions1}
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
'filter_accessible'/2 =
    %% Line 765
    fun (_cor1,_cor0) ->
	%% Line 766
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[{Node,Option}|_cor3]> when 'true' ->
			    ( case call 'lists':'member'
				       (Node, _cor0) of
				<'true'> when 'true' ->
				    let <_cor5> =
					apply 'lc$^0'/1
					    (_cor3)
				    in  ( [{Node,Option}|_cor5]
					  -| ['compiler_generated'] )
				( <'false'> when 'true' ->
				      apply 'lc$^0'/1
					  (_cor3)
				  -| ['compiler_generated'] )
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor6})
				  -| ['compiler_generated'] )
			      end
			      -| ['list_comprehension'] )
			( <[_cor2|_cor3]> when 'true' ->
			      apply 'lc$^0'/1
				  (_cor3)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor1)
	  -| ['list_comprehension'] )
'start_nodes'/1 =
    %% Line 768
    fun (_cor0) ->
	let <_cor14> =
	    %% Line 769
	    ( fun (_cor12) ->
		  case _cor12 of
		    <{NodeName,Options}> when 'true' ->
			let <_cor1> =
			    %% Line 770
			    call 'erlang':'atom_to_list'
				(NodeName)
			in  %% Line 770
			    case call 'string':'tokens'
				     (_cor1, [64]) of
			      <[NodeS|[HostS|[]]]> when 'true' ->
				  let <Node> =
				      %% Line 771
				      call 'erlang':'list_to_atom'
					  (NodeS)
				  in  let <Host> =
					  %% Line 772
					  call 'erlang':'list_to_atom'
					      (HostS)
				      in  let <HasNodeStart> =
					      %% Line 773
					      call 'lists':'keymember'
						  ('node_start', 1, Options)
					  in  let <_cor6> =
						  %% Line 774
						  call 'erlang':'nodes'
						      ()
					      in  let <IsAlive> =
						      %% Line 774
						      call 'lists':'member'
							  (NodeName, _cor6)
						  in  %% Line 775
						      case <HasNodeStart,IsAlive> of
							%% Line 776
							<'false','false'> when 'true' ->
							    %% Line 777
							    call 'io':'format'
								([87|[65|[82|[78|[73|[78|[71|[58|[32|[78|[111|[100|[101|[32|[126|[119|[32|[105|[115|[32|[110|[111|[116|[32|[97|[108|[105|[118|[101|[32|[98|[117|[116|[32|[104|[97|[115|[32|[110|[111|[32|[110|[111|[100|[101|[95|[115|[116|[97|[114|[116|[32|[111|[112|[116|[105|[111|[110|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 778
																																																		  [NodeName|[]])
							%% Line 779
							<'false','true'> when 'true' ->
							    %% Line 780
							    call 'io':'format'
								([78|[111|[100|[101|[32|[126|[119|[32|[105|[115|[32|[97|[108|[105|[118|[101|[126|[110]]]]]]]]]]]]]]]]]], [NodeName|[]])
							%% Line 781
							<'true','false'> when 'true' ->
							    %% Line 782
							    case call 'lists':'keyfind'
								     ('node_start', 1, Options) of
							      <{'node_start',NodeStart}> when 'true' ->
								  %% Line 783
								  case %% Line 784
								       call 'lists':'keytake'
									   ('callback_module', 1, NodeStart) of
								    <{'value',{'callback_module',Callback},NodeStart2}> when 'true' ->
									%% Line 785
									case call Callback:'start'
										 (Host, Node, NodeStart2) of
									  %% Line 786
									  <{'ok',_cor16}>
									      when call 'erlang':'=:='
										    (_cor16,
										     NodeName) ->
									      %% Line 787
									      call 'io':'format'
										  ([78|[111|[100|[101|[32|[126|[119|[32|[115|[116|[97|[114|[116|[101|[100|[32|[115|[117|[99|[99|[101|[115|[115|[102|[117|[108|[108|[121|[32|[119|[105|[116|[104|[32|[99|[97|[108|[108|[98|[97|[99|[107|[32|[126|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 788
																																											       [NodeName|[Callback|[]]])
									  %% Line 789
									  <{'error',Reason,_X_NodeName}> when 'true' ->
									      %% Line 790
									      call 'io':'format'
										  ([70|[97|[105|[108|[101|[100|[32|[116|[111|[32|[115|[116|[97|[114|[116|[32|[110|[111|[100|[101|[32|[126|[119|[32|[119|[105|[116|[104|[32|[99|[97|[108|[108|[98|[97|[99|[107|[32|[126|[119|[33|[32|[82|[101|[97|[115|[111|[110|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 791
																																																   [NodeName|[Callback|[Reason|[]]]])
									  ( <_cor10> when 'true' ->
										primop 'match_fail'
										    ({'case_clause',_cor10})
									    -| ['compiler_generated'] )
									end
								    ( <_cor9> when 'true' ->
									  primop 'match_fail'
									      ({'badmatch',_cor9})
								      -| ['compiler_generated'] )
								  end
							      ( <_cor8> when 'true' ->
								    primop 'match_fail'
									({'badmatch',_cor8})
								-| ['compiler_generated'] )
							    end
							%% Line 793
							<'true','true'> when 'true' ->
							    %% Line 794
							    call 'io':'format'
								([87|[65|[82|[78|[73|[78|[71|[58|[32|[78|[111|[100|[101|[32|[126|[119|[32|[105|[115|[32|[97|[108|[105|[118|[101|[32|[98|[117|[116|[32|[104|[97|[115|[32|[110|[111|[100|[101|[95|[115|[116|[97|[114|[116|[32|[111|[112|[116|[105|[111|[110|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 795
																																													  [NodeName|[]])
							( <_fol107,_fol108> when 'true' ->
							      let <_cor11> = {_fol107,_fol108}
							      in  primop 'match_fail'
								      ({'case_clause',_cor11})
							  -| ['compiler_generated'] )
						      end
			      ( <_cor2> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor2})
				-| ['compiler_generated'] )
			    end
		    ( <_cor13> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor13})
			    -| [{'function_name',{'-start_nodes/1-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-start_nodes/1-fun-0-'}}] )
	in  %% Line 769
	    call 'lists':'foreach'
		(_cor14, _cor0)
'eval_on_nodes'/1 =
    %% Line 800
    fun (_cor0) ->
	let <_cor8> =
	    %% Line 801
	    ( fun (_cor6) ->
		  case _cor6 of
		    <{NodeName,Options}> when 'true' ->
			let <HasEval> =
			    %% Line 802
			    call 'lists':'keymember'
				('eval', 1, Options)
			in  let <_cor2> =
				%% Line 803
				call 'erlang':'nodes'
				    ()
			    in  let <IsAlive> =
				    %% Line 803
				    call 'lists':'member'
					(NodeName, _cor2)
				in  %% Line 804
				    case <HasEval,IsAlive> of
				      %% Line 805
				      <'false',_cor10> when 'true' ->
					  %% Line 806
					  'ok'
				      %% Line 807
				      <'true','false'> when 'true' ->
					  %% Line 808
					  call 'io':'format'
					      ([87|[65|[82|[78|[73|[78|[71|[58|[32|[78|[111|[100|[101|[32|[126|[119|[32|[105|[115|[32|[110|[111|[116|[32|[97|[108|[105|[118|[101|[32|[98|[117|[116|[32|[104|[97|[115|[32|[101|[118|[97|[108|[32|[111|[112|[116|[105|[111|[110|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 809
																																									    [NodeName|[]])
				      %% Line 810
				      <'true','true'> when 'true' ->
					  %% Line 811
					  case call 'lists':'keyfind'
						   ('eval', 1, Options) of
					    <{'eval',MFAs}> when 'true' ->
						%% Line 812
						apply 'evaluate'/2
						    (NodeName, MFAs)
					    ( <_cor4> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor4})
					      -| ['compiler_generated'] )
					  end
				      ( <_fol110,_fol111> when 'true' ->
					    let <_cor5> = {_fol110,_fol111}
					    in  primop 'match_fail'
						    ({'case_clause',_cor5})
					-| ['compiler_generated'] )
				    end
		    ( <_cor7> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor7})
			    -| [{'function_name',{'-eval_on_nodes/1-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-eval_on_nodes/1-fun-0-'}}] )
	in  %% Line 801
	    call 'lists':'foreach'
		(_cor8, _cor0)
'evaluate'/2 =
    %% Line 817
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Node,[{M,F,A}|MFAs]> when 'true' ->
	      do  %% Line 818
		  case call 'rpc':'call'
			   (Node, M, F, A) of
		    %% Line 819
		    <{'badrpc',Reason}> when 'true' ->
			let <_cor2> =
			    %% Line 821
			    call 'erlang':'length'
				(A)
			in  %% Line 820
			    call 'io':'format'
				([87|[65|[82|[78|[73|[78|[71|[58|[32|[70|[97|[105|[108|[101|[100|[32|[116|[111|[32|[99|[97|[108|[108|[32|[126|[119|[58|[126|[119|[47|[126|[119|[32|[111|[110|[32|[110|[111|[100|[101|[32|[126|[119|[32|[100|[117|[101|[32|[116|[111|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 821
																																										    [M|[F|[_cor2|[Node|[Reason|[]]]]]])
		    %% Line 822
		    <Result> when 'true' ->
			let <_cor3> =
			    %% Line 824
			    call 'erlang':'length'
				(A)
			in  %% Line 823
			    call 'io':'format'
				([67|[97|[108|[108|[101|[100|[32|[126|[119|[58|[126|[119|[47|[126|[119|[32|[111|[110|[32|[110|[111|[100|[101|[32|[126|[119|[44|[32|[114|[101|[115|[117|[108|[116|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 824
																																      [M|[F|[_cor3|[Node|[Result|[]]]]]])
		  end
		  %% Line 826
		  apply 'evaluate'/2
		      (Node, MFAs)
	  %% Line 827
	  <_X_Node,[]> when 'true' ->
	      %% Line 828
	      'ok'
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'evaluate',2}}] )
	    -| ['compiler_generated'] )
	end
'cast'/2 =
    %% Line 833
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'undefined',_X_Msg> when 'true' ->
	      %% Line 834
	      {'error','not_running'}
	  %% Line 836
	  <Pid,Msg> when 'true' ->
	      do  %% Line 837
		  call 'erlang':'!'
		      (Pid, {'cast',Msg})
		  %% Line 838
		  'ok'
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('ct_master')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('ct_master', _cor0)
end