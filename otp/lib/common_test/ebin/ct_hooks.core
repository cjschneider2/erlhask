module 'ct_hooks' ['end_tc'/5,
		   'init'/1,
		   'init_tc'/3,
		   'module_info'/0,
		   'module_info'/1,
		   'on_tc_fail'/2,
		   'on_tc_skip'/2,
		   'terminate'/1]
    attributes [%% Line 43
		'type' =
		    %% Line 43
		    [{{'record','ct_hook_config'},[{'record_field',43,{'atom',43,'id'}}|[{'record_field',43,{'atom',43,'module'}}|[{'record_field',43,{'atom',43,'prio'}}|[{'record_field',43,{'atom',43,'scope'}}|[{'record_field',43,{'atom',43,'opts'},{'nil',43}}|[{'record_field',43,{'atom',43,'state'},{'nil',43}}]]]]]],[]}],
		%% Line 50
		'spec' =
		    %% Line 50
		    [{{'init',1},[{'type',50,'fun',[{'type',50,'product',[{'ann_type',50,[{'var',50,'State'}|[{'type',50,'term',[]}]]}]}|[{'type',50,'union',[{'atom',50,'ok'}|[{'type',51,'tuple',[{'atom',51,'fail'}|[{'ann_type',51,[{'var',51,'Reason'}|[{'type',51,'term',[]}]]}]]}]]}]]}]}],
		%% Line 57
		'spec' =
		    %% Line 57
		    [{{'terminate',1},[{'type',57,'fun',[{'type',57,'product',[{'ann_type',57,[{'var',57,'Hooks'}|[{'type',57,'term',[]}]]}]}|[{'atom',58,'ok'}]]}]}],
		%% Line 67
		'spec' =
		    %% Line 67
		    [{{'init_tc',3},[{'type',67,'fun',[{'type',67,'product',[{'ann_type',67,[{'var',67,'Mod'}|[{'type',67,'atom',[]}]]}|[{'ann_type',68,[{'var',68,'FuncSpec'}|[{'type',68,'union',[{'type',68,'atom',[]}|[{'type',69,'tuple',[{'ann_type',69,[{'var',69,'ConfigFunc'}|[{'type',69,'union',[{'atom',69,'init_per_group'}|[{'atom',69,'end_per_group'}]]}]]}|[{'ann_type',70,[{'var',70,'GroupName'}|[{'type',70,'atom',[]}]]}|[{'ann_type',71,[{'var',71,'Properties'}|[{'type',71,'list',[]}]]}]]]}]]}]]}|[{'ann_type',72,[{'var',72,'Args'}|[{'type',72,'list',[]}]]}]]]}|[{'ann_type',73,[{'var',73,'NewConfig'}|[{'type',73,'union',[{'remote_type',73,[{'atom',73,'proplists'}|[{'atom',73,'proplist'}|[[]]]]}|[{'type',74,'tuple',[{'atom',74,'skip'}|[{'ann_type',74,[{'var',74,'Reason'}|[{'type',74,'term',[]}]]}]]}|[{'type',75,'tuple',[{'atom',75,'auto_skip'}|[{'ann_type',75,[{'var',75,'Reason'}|[{'type',75,'term',[]}]]}]]}|[{'type',76,'tuple',[{'atom',76,'fail'}|[{'ann_type',76,[{'var',76,'Reason'}|[{'type',76,'term',[]}]]}]]}]]]]}]]}]]}]}],
		%% Line 100
		'spec' =
		    %% Line 100
		    [{{'end_tc',5},[{'type',100,'fun',[{'type',100,'product',[{'ann_type',100,[{'var',100,'Mod'}|[{'type',100,'atom',[]}]]}|[{'ann_type',101,[{'var',101,'FuncSpec'}|[{'type',101,'union',[{'type',101,'atom',[]}|[{'type',102,'tuple',[{'ann_type',102,[{'var',102,'ConfigFunc'}|[{'type',102,'union',[{'atom',102,'init_per_group'}|[{'atom',102,'end_per_group'}]]}]]}|[{'ann_type',103,[{'var',103,'GroupName'}|[{'type',103,'atom',[]}]]}|[{'ann_type',104,[{'var',104,'Properties'}|[{'type',104,'list',[]}]]}]]]}]]}]]}|[{'ann_type',105,[{'var',105,'Args'}|[{'type',105,'list',[]}]]}|[{'ann_type',106,[{'var',106,'Result'}|[{'type',106,'term',[]}]]}|[{'ann_type',107,[{'var',107,'Return'}|[{'type',107,'term',[]}]]}]]]]]}|[{'ann_type',108,[{'var',108,'NewConfig'}|[{'type',108,'union',[{'remote_type',108,[{'atom',108,'proplists'}|[{'atom',108,'proplist'}|[[]]]]}|[{'type',109,'tuple',[{'atom',109,'skip'}|[{'ann_type',109,[{'var',109,'Reason'}|[{'type',109,'term',[]}]]}]]}|[{'type',110,'tuple',[{'atom',110,'auto_skip'}|[{'ann_type',110,[{'var',110,'Reason'}|[{'type',110,'term',[]}]]}]]}|[{'type',111,'tuple',[{'atom',111,'fail'}|[{'ann_type',111,[{'var',111,'Reason'}|[{'type',111,'term',[]}]]}]]}|[{'atom',112,'ok'}|[{'atom',112,'$ct_no_change'}]]]]]]}]]}]]}]}]]
'init'/1 =
    %% Line 52
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 53
	    apply 'get_builtin_hooks'/1
		(_cor0)
	in  let <_cor1> =
		%% Line 53
		apply 'get_new_hooks'/2
		    (_cor0, 'undefined')
	    in  let <_cor3> =
		    %% Line 53
		    call 'erlang':'++'
			(_cor2, _cor1)
		in  %% Line 53
		    apply 'call'/4
			(_cor3, %% Line 54
				'ok', %% Line 54
				      'init', %% Line 54
					      [])
'terminate'/1 =
    %% Line 59
    fun (_cor0) ->
	let <_cor5> =
	    %% Line 60
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[%% Line 61
			      {'ct_hook_config',HookId,_cor7,_cor8,_cor9,_cor10,_cor11}|_cor2]> when 'true' ->
				let <_cor4> =
				    %% Line 61
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [{HookId,( 'call_terminate'/3
						 -| [{'id',{0,0,'-terminate/1-fun-0-'}}] )}|_cor4]
				      -| ['compiler_generated'] )
			    ( <[_cor1|_cor2]> when 'true' ->
				  %% Line 61
				  apply 'lc$^0'/1
				      (_cor2)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor3> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor3})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  do  %% Line 60
		apply 'call'/4
		    (_cor5, %% Line 62
			    'ct_hooks_terminate_dummy', %% Line 62
							'terminate', _cor0)
		%% Line 63
		'ok'
'init_tc'/3 =
    %% Line 78
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Mod,'init_per_suite',Config> when 'true' ->
	      let <_cor9> =
		  %% Line 79
		  try
		      let <_cor3> =
			  call Mod:'suite'
			      ()
		      in  call 'proplists':'get_value'
			      ('ct_hooks', _cor3, [])
		  of <_cor4> ->
		      case _cor4 of
			%% Line 80
			<List>
			    when call 'erlang':'is_list'
				  (_cor4) ->
			    %% Line 81
			    [{'ct_hooks',List}|[]]
			%% Line 82
			<CTHook>
			    when call 'erlang':'is_atom'
				  (_cor4) ->
			    %% Line 83
			    [{'ct_hooks',[CTHook|[]]}|[]]
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'try_clause',_cor5})
			  -| ['compiler_generated'] )
		      end
		  catch <_cor8,_cor7,_cor6> ->
		      case <_cor8,_cor7,_cor6> of
			%% Line 84
			<'error','undef',_cor15> when 'true' ->
			    %% Line 85
			    [{'ct_hooks',[]}]
			( <_cor8,_cor7,_cor6> when 'true' ->
			      primop 'raise'
				  (_cor6, _cor7)
			  -| ['compiler_generated'] )
		      end
	      in  let <_cor11> =
		      %% Line 87
		      call 'erlang':'++'
			  (Config, _cor9)
		  in  %% Line 87
		      apply 'call'/3
			  (( 'call_generic'/3
			     -| [{'id',{0,0,'-init_tc/3-fun-0-'}}] ), _cor11, ['pre_init_per_suite'|[Mod|[]]])
	  %% Line 88
	  <Mod,'end_per_suite',Config> when 'true' ->
	      %% Line 89
	      apply 'call'/3
		  (( 'call_generic'/3
		     -| [{'id',{0,0,'-init_tc/3-fun-1-'}}] ), Config, ['pre_end_per_suite'|[Mod|[]]])
	  %% Line 90
	  <Mod,{'init_per_group',GroupName,Properties},Config> when 'true' ->
	      do  %% Line 91
		  apply 'maybe_start_locker'/3
		      (Mod, GroupName, Properties)
		  %% Line 92
		  apply 'call'/3
		      (( 'call_generic'/3
			 -| [{'id',{0,0,'-init_tc/3-fun-2-'}}] ), Config, ['pre_init_per_group'|[GroupName|[]]])
	  %% Line 93
	  <_X_Mod,{'end_per_group',GroupName,_cor16},Config> when 'true' ->
	      %% Line 94
	      apply 'call'/3
		  (( 'call_generic'/3
		     -| [{'id',{0,0,'-init_tc/3-fun-3-'}}] ), Config, ['pre_end_per_group'|[GroupName|[]]])
	  %% Line 95
	  <_X_Mod,TC,Config> when 'true' ->
	      %% Line 96
	      apply 'call'/3
		  (( 'call_generic'/3
		     -| [{'id',{0,0,'-init_tc/3-fun-4-'}}] ), Config, ['pre_init_per_testcase'|[TC|[]]])
	end
'end_tc'/5 =
    %% Line 114
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Mod,'init_per_suite',Config,_X_Result,Return> when 'true' ->
	      %% Line 115
	      apply 'call'/4
		  (( 'call_generic'/3
		     -| [{'id',{0,0,'-end_tc/5-fun-0-'}}] ), Return, ['post_init_per_suite'|[Mod|[Config|[]]]], %% Line 116
														'$ct_no_change')
	  %% Line 117
	  <Mod,'end_per_suite',Config,Result,_X_Return> when 'true' ->
	      %% Line 118
	      apply 'call'/4
		  (( 'call_generic'/3
		     -| [{'id',{0,0,'-end_tc/5-fun-1-'}}] ), Result, ['post_end_per_suite'|[Mod|[Config|[]]]], %% Line 119
													       '$ct_no_change')
	  %% Line 120
	  <_X_Mod,{'init_per_group',GroupName,_cor11},Config,_X_Result,Return> when 'true' ->
	      %% Line 121
	      apply 'call'/4
		  (( 'call_generic'/3
		     -| [{'id',{0,0,'-end_tc/5-fun-2-'}}] ), Return, ['post_init_per_group'|[GroupName|[Config|[]]]], %% Line 122
														      '$ct_no_change')
	  %% Line 123
	  <Mod,{'end_per_group',GroupName,Properties},Config,Result,_X_Return> when 'true' ->
	      let <Res> =
		  %% Line 124
		  apply 'call'/4
		      (( 'call_generic'/3
			 -| [{'id',{0,0,'-end_tc/5-fun-3-'}}] ), Result, %% Line 125
									 ['post_end_per_group'|[GroupName|[Config|[]]]], %% Line 125
															 '$ct_no_change')
	      in  do  %% Line 126
		      apply 'maybe_stop_locker'/3
			  (Mod, GroupName, Properties)
		      %% Line 127
		      Res
	  %% Line 128
	  <_X_Mod,TC,Config,Result,_X_Return> when 'true' ->
	      %% Line 129
	      apply 'call'/4
		  (( 'call_generic'/3
		     -| [{'id',{0,0,'-end_tc/5-fun-4-'}}] ), Result, ['post_end_per_testcase'|[TC|[Config|[]]]], %% Line 130
														 '$ct_no_change')
	end
'on_tc_skip'/2 =
    %% Line 133
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <How,{Suite,Case,Reason}> when 'true' ->
	      %% Line 134
	      apply 'call'/3
		  (( 'call_cleanup'/3
		     -| [{'id',{0,0,'-on_tc_skip/2-fun-0-'}}] ), {How,Reason}, ['on_tc_skip'|[Suite|[Case|[]]]])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'on_tc_skip',2}}] )
	    -| ['compiler_generated'] )
	end
'on_tc_fail'/2 =
    %% Line 137
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_How,{Suite,Case,Reason}> when 'true' ->
	      %% Line 138
	      apply 'call'/3
		  (( 'call_cleanup'/3
		     -| [{'id',{0,0,'-on_tc_fail/2-fun-0-'}}] ), Reason, ['on_tc_fail'|[Suite|[Case|[]]]])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'on_tc_fail',2}}] )
	    -| ['compiler_generated'] )
	end
'call_id'/3 =
    %% Line 143
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Hook = {'ct_hook_config',_cor13,Mod,_cor14,_cor15,Opts,_cor16},Config,Scope> when 'true' ->
	      let <_cor3> =
		  %% Line 144
		  call 'erlang':'make_ref'
		      ()
	      in  let <Id> =
		      %% Line 144
		      apply 'catch_apply'/4
			  (Mod, 'id', [Opts|[]], _cor3)
		  in  let <_rec0> =
			  %% Line 145
			  apply 'scope'/1
			      (Scope)
		      in  let <_cor7> =
			      %% Line 145
			      call 'erlang':'setelement'
				  (5, Hook, _rec0)
			  in  let <_cor9> =
				  %% Line 145
				  call 'erlang':'setelement'
				      (2, _cor7, Id)
			      in  %% Line 145
				  {Config,_cor9}
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'call_id',3}}] )
	    -| ['compiler_generated'] )
	end
'call_init'/3 =
    %% Line 147
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Hook = {'ct_hook_config',Id,Mod,P,_cor24,Opts,_cor25},%% Line 148
								 Config,%% Line 148
									_X_Meta> when 'true' ->
	      %% Line 149
	      case call Mod:'init'
		       (Id, Opts) of
		%% Line 150
		<{'ok',NewState}>
		    when call 'erlang':'=:='
			  (P,
			   'undefined') ->
		    let <_cor4> =
			%% Line 151
			call 'erlang':'setelement'
			    (7, Hook, NewState)
		    in  let <_cor6> =
			    %% Line 151
			    call 'erlang':'setelement'
				(4, _cor4, 0)
			in  %% Line 151
			    {Config,_cor6}
		%% Line 152
		<{'ok',NewState}> when 'true' ->
		    let <_cor9> =
			%% Line 153
			call 'erlang':'setelement'
			    (7, Hook, NewState)
		    in  %% Line 153
			{Config,_cor9}
		%% Line 154
		<{'ok',NewState,Prio}>
		    when call 'erlang':'=:='
			  (P,
			   'undefined') ->
		    let <_cor11> =
			%% Line 156
			call 'erlang':'setelement'
			    (7, Hook, NewState)
		    in  let <_cor13> =
			    %% Line 156
			    call 'erlang':'setelement'
				(4, _cor11, Prio)
			in  %% Line 156
			    {Config,_cor13}
		%% Line 157
		<{'ok',NewState,_cor47}> when 'true' ->
		    let <_cor16> =
			%% Line 158
			call 'erlang':'setelement'
			    (7, Hook, NewState)
		    in  %% Line 158
			{Config,_cor16}
		%% Line 159
		<NewState> when 'true' ->
		    let <_cor19> =
			%% Line 160
			call 'erlang':'setelement'
			    (7, Hook, NewState)
		    in  %% Line 160
			{Config,_cor19}
	      end
	  ( <_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21})
		  -| [{'function_name',{'call_init',3}}] )
	    -| ['compiler_generated'] )
	end
'call_terminate'/3 =
    %% Line 163
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Hook = {'ct_hook_config',_cor6,Mod,_cor7,_cor8,_cor9,State},_cor10,_cor11> when 'true' ->
	      do  %% Line 164
		  apply 'catch_apply'/4
		      (Mod, 'terminate', [State|[]], 'ok')
		  %% Line 165
		  {[],Hook}
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'call_terminate',3}}] )
	    -| ['compiler_generated'] )
	end
'call_cleanup'/3 =
    %% Line 167
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Hook = {'ct_hook_config',_cor11,Mod,_cor12,_cor13,_cor14,State},%% Line 168
									   Reason,%% Line 168
										  [Function|[_X_Suite|Args]]> when 'true' ->
	      let <_cor3> =
		  %% Line 169
		  call 'erlang':'++'
		      (Args, [Reason|[State|[]]])
	      in  let <NewState> =
		      %% Line 169
		      apply 'catch_apply'/4
			  (Mod, Function, _cor3, %% Line 170
						 State)
		  in  let <_cor7> =
			  %% Line 171
			  call 'erlang':'setelement'
			      (7, Hook, NewState)
		      in  %% Line 171
			  {Reason,_cor7}
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'call_cleanup',3}}] )
	    -| ['compiler_generated'] )
	end
'call_generic'/3 =
    %% Line 173
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Hook = {'ct_hook_config',_cor11,Mod,_cor12,_cor13,_cor14,State},%% Line 174
									   Value,%% Line 174
										 [Function|Args]> when 'true' ->
	      let <_cor3> =
		  %% Line 175
		  call 'erlang':'++'
		      (Args, [Value|[State|[]]])
	      in  %% Line 175
		  case apply 'catch_apply'/4
			   (Mod, Function, _cor3, %% Line 176
						  {Value,State}) of
		    <{NewValue,NewState}> when 'true' ->
			let <_cor7> =
			    %% Line 177
			    call 'erlang':'setelement'
				(7, Hook, NewState)
			in  %% Line 177
			    {NewValue,_cor7}
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'call_generic',3}}] )
	    -| ['compiler_generated'] )
	end
'call'/3 =
    %% Line 180
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 181
	    apply 'maybe_lock'/0
		()
	    let <Hooks> =
		%% Line 182
		apply 'get_hooks'/0
		    ()
	    in  let <_cor9> =
		    %% Line 183
		    apply 'get_new_hooks'/2
			(_cor1, _cor2)
		in  let <_cor8> =
			%% Line 184
			( letrec
			      'lc$^0'/1 =
				  fun (_cor6) ->
				      case _cor6 of
					<[{'ct_hook_config',HookId,_cor17,_cor18,_cor19,_cor20,_cor21}|_cor5]> when 'true' ->
					    let <_cor7> =
						apply 'lc$^0'/1
						    (_cor5)
					    in  ( [{HookId,_cor2}|_cor7]
						  -| ['compiler_generated'] )
					( <[_cor4|_cor5]> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor5)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor6> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor6})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (Hooks)
			  -| ['list_comprehension'] )
		    in  let <Calls> =
			    %% Line 183
			    call 'erlang':'++'
				(_cor9, _cor8)
			in  let <_cor12> =
				%% Line 185
				apply 'resort'/3
				    (Calls, Hooks, _cor0)
			    in  let <_cor11> =
				    %% Line 186
				    apply 'remove'/2
					('ct_hooks', _cor1)
				in  let <Res> =
					%% Line 185
					apply 'call'/4
					    (_cor12, _cor11, _cor0, %% Line 186
								    Hooks)
				    in  do  %% Line 187
					    apply 'maybe_unlock'/0
						()
					    %% Line 188
					    Res
'call'/4 =
    %% Line 190
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Fun,Config,Meta,NoChangeRet>
	      when call 'erlang':'is_function'
		    (Fun) ->
	      %% Line 191
	      case apply 'call'/3
		       (Fun, Config, Meta) of
		%% Line 192
		<_cor36>
		    when call 'erlang':'=:='
			  (_cor36,
			   Config) ->
		    NoChangeRet
		%% Line 193
		<NewReturn> when 'true' ->
		    NewReturn
	      end
	  %% Line 196
	  <[{Hook,'call_id',NextFun}|Rest],Config,Meta,Hooks> when 'true' ->
	      %% Line 197
	      try
		  %% Line 198
		  case %% Line 199
		       apply 'call_id'/3
			   (Hook, Config, Meta) of
		    <{_cor37,NewHook = {'ct_hook_config',NewId,_cor38,_cor39,_cor40,_cor41,_cor42}}>
			when call 'erlang':'=:='
			      (_cor37,
			       Config) ->
			let <NewHooks,NewRest> =
			    %% Line 201
			    case call 'lists':'keyfind'
				     (NewId, 2, Hooks) of
			      %% Line 202
			      <'false'>
				  when call 'erlang':'=:='
					(NextFun,
					 'undefined') ->
				  let <_cor7> =
				      %% Line 203
				      call 'erlang':'++'
					  (Hooks, [NewHook|[]])
				  in  let <_cor6> =
					  %% Line 204
					  call 'erlang':'++'
					      (Rest, [{NewId,'call_init'}|[]])
				      in  <_cor7,_cor6>
			      %% Line 205
			      <ExistingHook>
				  when call 'erlang':'is_tuple'
					(ExistingHook) ->
				  %% Line 206
				  <Hooks,Rest>
			      %% Line 207
			      <_cor43> when 'true' ->
				  let <_cor9> =
				      %% Line 208
				      call 'erlang':'++'
					  (Hooks, [NewHook|[]])
				  in  let <_cor8> =
					  %% Line 209
					  call 'erlang':'++'
					      (Rest, [{NewId,'call_init'}|[{NewId,NextFun}|[]]])
				      in  <_cor9,_cor8>
			    end
			in  let <_cor13> =
				%% Line 211
				apply 'resort'/3
				    (NewRest, NewHooks, Meta)
			    in  %% Line 211
				apply 'call'/4
				    (_cor13, Config, Meta, NewHooks)
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	      of <_cor14> ->
		  _cor14
	      catch <_cor17,_cor16,_cor15> ->
		  let <Trace> =
		      %% Line 213
		      call 'erlang':'get_stacktrace'
			  ()
		  in  do  %% Line 214
			  call 'ct_logs':'log'
			      ([83|[117|[105|[116|[101|[32|[72|[111|[111|[107]]]]]]]]]], [70|[97|[105|[108|[101|[100|[32|[116|[111|[32|[115|[116|[97|[114|[116|[32|[97|[32|[67|[84|[72|[58|[32|[126|[112|[58|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 215
																														    [_cor17|[{_cor16,Trace}|[]]])
			  %% Line 216
			  apply 'call'/4
			      ([], {'fail',[70|[97|[105|[108|[101|[100|[32|[116|[111|[32|[115|[116|[97|[114|[116|[32|[67|[84|[72|[44|[32|[115|[101|[101|[32|[116|[104|[101|[32|[67|[84|[32|[76|[111|[103|[32|[102|[111|[114|[32|[100|[101|[116|[97|[105|[108|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}, %% Line 217
																																						   Meta, %% Line 217
																																							 Hooks)
	  %% Line 219
	  <[{HookId,'call_init'}|Rest],Config,Meta,Hooks> when 'true' ->
	      %% Line 220
	      apply 'call'/4
		  ([{HookId,( 'call_init'/3
			      -| [{'id',{0,0,'-call/4-fun-0-'}}] )}|Rest], Config, Meta, Hooks)
	  %% Line 221
	  <[{HookId,Fun}|Rest],Config,Meta,Hooks> when 'true' ->
	      %% Line 222
	      try
		  let <Hook> =
		      %% Line 223
		      call 'lists':'keyfind'
			  (HookId, 2, Hooks)
		  in  %% Line 224
		      case apply Fun
			       (Hook, Config, Meta) of
			<{NewConf,NewHook}> when 'true' ->
			    let <NewCalls> =
				%% Line 225
				apply 'get_new_hooks'/2
				    (NewConf, Fun)
			    in  let <NewHooks> =
				    %% Line 226
				    call 'lists':'keyreplace'
					(HookId, 2, Hooks, NewHook)
				in  let <_cor25> =
					%% Line 227
					call 'erlang':'++'
					    (NewCalls, Rest)
				    in  let <_cor26> =
					    %% Line 227
					    apply 'resort'/3
						(_cor25, NewHooks, Meta)
					in  let <_cor24> =
						%% Line 228
						apply 'remove'/2
						    ('ct_hooks', NewConf)
					    in  let <_cor23> =
						    %% Line 229
						    apply 'terminate_if_scope_ends'/3
							(HookId, Meta, NewHooks)
						in  %% Line 227
						    apply 'call'/4
							(_cor26, _cor24, %% Line 228
									 Meta, _cor23)
			( <_cor20> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor20})
			  -| ['compiler_generated'] )
		      end
	      of <_cor27> ->
		  _cor27
	      catch <_cor30,_cor29,_cor28> ->
		  case <_cor30,_cor29,_cor28> of
		    %% Line 230
		    <'throw',{'error_in_cth_call',Reason},_cor45> when 'true' ->
			let <_cor31> =
			    %% Line 232
			    apply 'terminate_if_scope_ends'/3
				(HookId, Meta, Hooks)
			in  %% Line 231
			    apply 'call'/4
				(Rest, {'fail',Reason}, Meta, _cor31)
		    ( <_cor30,_cor29,_cor28> when 'true' ->
			  primop 'raise'
			      (_cor28, _cor29)
		      -| ['compiler_generated'] )
		  end
	  %% Line 234
	  <[],Config,_X_Meta,Hooks> when 'true' ->
	      do  %% Line 235
		  apply 'save_suite_data_async'/1
		      (Hooks)
		  %% Line 236
		  Config
	  ( <_cor35,_cor34,_cor33,_cor32> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor35,_cor34,_cor33,_cor32})
		  -| [{'function_name',{'call',4}}] )
	    -| ['compiler_generated'] )
	end
'remove'/2 =
    %% Line 238
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,List>
	      when call 'erlang':'is_list'
		    (List) ->
	      %% Line 239
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor9) ->
			    case _cor9 of
			      <[Conf|_cor3]>
				  when %% Line 240
				    try
					let <_cor5> =
					    call 'erlang':'is_tuple'
						(Conf)
					in  ( case <> of
						( <>
						      when call 'erlang':'=:='
							    (_cor5,
							     'false') ->
						      'true'
						  -| ['compiler_generated'] )
						( <> when 'true' ->
						      let <_cor6> =
							  call 'erlang':'element'
							      (1, Conf)
						      in  call 'erlang':'=/='
							      (_cor6, Key)
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  let <_cor10> =
				      apply 'lc$^0'/1
					  (_cor3)
				  in  ( [Conf|_cor10]
					-| ['compiler_generated'] )
			      ( <[Conf|_cor3]> when 'true' ->
				    apply 'lc$^0'/1
					(_cor3)
				-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor9> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor9})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(List)
		-| ['list_comprehension'] )
	  %% Line 241
	  <_cor13,Else> when 'true' ->
	      %% Line 242
	      Else
	end
'scope'/1 =
    %% Line 245
    fun (_cor0) ->
	case _cor0 of
	  <['pre_init_per_testcase'|[TC|_cor2]]> when 'true' ->
	      %% Line 246
	      ['post_end_per_testcase'|[TC|[]]]
	  %% Line 247
	  <['pre_init_per_group'|[GroupName|_cor3]]> when 'true' ->
	      %% Line 248
	      ['post_end_per_group'|[GroupName|[]]]
	  %% Line 249
	  <['post_init_per_group'|[GroupName|_cor4]]> when 'true' ->
	      %% Line 250
	      ['post_end_per_group'|[GroupName|[]]]
	  %% Line 251
	  <['pre_init_per_suite'|[SuiteName|_cor5]]> when 'true' ->
	      %% Line 252
	      ['post_end_per_suite'|[SuiteName|[]]]
	  %% Line 253
	  <['post_init_per_suite'|[SuiteName|_cor6]]> when 'true' ->
	      %% Line 254
	      ['post_end_per_suite'|[SuiteName|[]]]
	  %% Line 255
	  <'init'> when 'true' ->
	      %% Line 256
	      'none'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'scope',1}}] )
	    -| ['compiler_generated'] )
	end
'terminate_if_scope_ends'/3 =
    %% Line 258
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <HookId,['on_tc_skip'|[_X_Suite|[{'end_per_group',Name}|[]]]],%% Line 259
									Hooks> when 'true' ->
	      %% Line 260
	      apply 'terminate_if_scope_ends'/3
		  (HookId, ['post_end_per_group'|[Name|[]]], Hooks)
	  %% Line 261
	  <HookId,['on_tc_skip'|[Suite|['end_per_suite']]],Hooks> when 'true' ->
	      %% Line 262
	      apply 'terminate_if_scope_ends'/3
		  (HookId, ['post_end_per_suite'|[Suite|[]]], Hooks)
	  %% Line 263
	  <HookId,[Function|[Tag|T]],Hooks>
	      when call 'erlang':'=/='
		    (T,
		     []) ->
	      %% Line 264
	      apply 'terminate_if_scope_ends'/3
		  (HookId, [Function|[Tag|[]]], Hooks)
	  %% Line 265
	  <HookId,Function,Hooks> when 'true' ->
	      %% Line 266
	      case call 'lists':'keyfind'
		       (HookId, 2, Hooks) of
		%% Line 267
		<Hook = {'ct_hook_config',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12}>
		    when let <_cor13> =
			  call 'erlang':'=:='
			      (_cor7, HookId)
		      in  let <_cor14> =
			      call 'erlang':'=:='
				  (_cor10, Function)
			  in  call 'erlang':'and'
				  (_cor13, _cor14) ->
		    do  %% Line 268
			apply 'terminate'/1
			    ([Hook|[]])
			%% Line 269
			call 'lists':'keydelete'
			    (HookId, 2, Hooks)
		%% Line 270
		<_cor15> when 'true' ->
		    %% Line 271
		    Hooks
	      end
	end
'get_new_hooks'/2 =
    %% Line 275
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 276
	    ( fun (_cor3) ->
		  case _cor3 of
		    <NewHook>
			when call 'erlang':'is_atom'
			      (_cor3) ->
			%% Line 277
			{{'ct_hook_config','undefined',NewHook,'undefined','undefined',[],[]},'call_id',_cor0}
		    %% Line 278
		    <{NewHook,Opts}> when 'true' ->
			%% Line 279
			{{'ct_hook_config','undefined',NewHook,'undefined','undefined',%% Line 280
										       Opts,[]},%% Line 280
												'call_id',_cor0}
		    %% Line 281
		    <{NewHook,Opts,Prio}> when 'true' ->
			%% Line 282
			{{'ct_hook_config','undefined',NewHook,%% Line 284
							       Prio,'undefined',%% Line 283
										Opts,[]},%% Line 284
											 'call_id',_cor0}
		    ( <_cor4> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor4})
			    -| [{'function_name',{'-get_new_hooks/2-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-get_new_hooks/2-fun-0-'}}] )
	in  let <_cor2> =
		%% Line 285
		apply 'get_new_hooks'/1
		    (_cor1)
	    in  %% Line 276
		call 'lists':'map'
		    (_cor5, _cor2)
'get_new_hooks'/1 =
    %% Line 287
    fun (_cor0) ->
	case _cor0 of
	  <Config>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor3> =
		  %% Line 288
		  ( fun (_cor1) ->
			case _cor1 of
			  <{'ct_hooks',HookConfigs}>
			      when call 'erlang':'is_list'
				    (HookConfigs) ->
			      %% Line 289
			      HookConfigs
			  %% Line 290
			  <{'ct_hooks',HookConfig}>
			      when call 'erlang':'is_atom'
				    (HookConfig) ->
			      %% Line 291
			      [HookConfig|[]]
			  %% Line 292
			  <_cor5> when 'true' ->
			      %% Line 293
			      []
			end
		    -| [{'id',{0,0,'-get_new_hooks/1-fun-0-'}}] )
	      in  %% Line 288
		  call 'lists':'flatmap'
		      (_cor3, %% Line 294
			      Config)
	  %% Line 295
	  <_X_Config> when 'true' ->
	      %% Line 296
	      []
	end
'get_builtin_hooks'/1 =
    %% Line 298
    fun (_cor0) ->
	%% Line 299
	case call 'proplists':'get_value'
		 ('enable_builtin_hooks', _cor0) of
	  %% Line 300
	  <'false'> when 'true' ->
	      %% Line 301
	      []
	  %% Line 302
	  <_X_Else> when 'true' ->
	      %% Line 303
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor3) ->
			    case _cor3 of
			      <[HookConf|_cor2]> when 'true' ->
				  let <_cor4> =
				      apply 'lc$^0'/1
					  (_cor2)
				  in  ( [{HookConf,'call_id','undefined'}|_cor4]
					-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor3> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor3})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			([{'ct_hook_config','undefined','cth_log_redirect','ctfirst','undefined',[],[]}])
		-| ['list_comprehension'] )
	end
'save_suite_data_async'/1 =
    %% Line 306
    fun (_cor0) ->
	%% Line 307
	call 'ct_util':'save_suite_data_async'
	    ('ct_hooks', _cor0)
'get_hooks'/0 =
    %% Line 309
    fun () ->
	let <_cor0> =
	    %% Line 310
	    call 'ct_util':'read_suite_data'
		('ct_hooks')
	in  %% Line 310
	    call 'lists':'keysort'
		(4, _cor0)
'resort'/3 =
    %% Line 319
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Calls,Hooks,[F|_X_R]>
	      when let <_cor3> =
		    call 'erlang':'=:='
			(F, 'post_end_per_testcase')
		in  let <_cor4> =
			%% Line 320
			call 'erlang':'=:='
			    (F, 'pre_end_per_group')
		    in  let <_cor5> =
			    %% Line 321
			    call 'erlang':'=:='
				(F, 'post_end_per_group')
			in  let <_cor6> =
				%% Line 322
				call 'erlang':'=:='
				    (F, 'pre_end_per_suite')
			    in  let <_cor7> =
				    %% Line 323
				    call 'erlang':'=:='
					(F, 'post_end_per_suite')
				in  let <_cor8> =
					%% Line 322
					call 'erlang':'or'
					    (_cor6, _cor7)
				    in  let <_cor9> =
					    %% Line 321
					    call 'erlang':'or'
						(_cor5, _cor8)
					in  let <_cor10> =
						%% Line 320
						call 'erlang':'or'
						    (_cor4, _cor9)
					    in  call 'erlang':'or'
						    (_cor3, _cor10) ->
	      let <_cor11> =
		  %% Line 324
		  apply 'resort'/2
		      (Calls, Hooks)
	      in  %% Line 324
		  call 'lists':'reverse'
		      (_cor11)
	  %% Line 325
	  <Calls,Hooks,_X_Meta> when 'true' ->
	      %% Line 326
	      apply 'resort'/2
		  (Calls, Hooks)
	end
'resort'/2 =
    %% Line 328
    fun (_cor1,_cor0) ->
	let <_cor14> =
	    %% Line 330
	    ( fun (_cor11,_cor10) ->
		  case <_cor11,_cor10> of
		    <{_cor17,_cor18,_cor19},_cor20> when 'true' ->
			%% Line 331
			'true'
		    %% Line 332
		    <_cor21,{_cor22,_cor23,_cor24}> when 'true' ->
			%% Line 333
			'false'
		    %% Line 334
		    <{_cor25,'call_init'},_cor26> when 'true' ->
			%% Line 335
			'true'
		    %% Line 336
		    <_cor27,{_cor28,'call_init'}> when 'true' ->
			%% Line 337
			'false'
		    %% Line 338
		    <{Id1,_cor29},{Id2,_cor30}> when 'true' ->
			%% Line 339
			( case call 'lists':'keyfind'
				   (Id1, 2, _cor0) of
			    ( <( {'ct_hook_config',_cor31,_cor32,_rec9,_cor33,_cor34,_cor35}
				 -| ['compiler_generated'] )> when 'true' ->
				  %% Line 340
				  ( case call 'lists':'keyfind'
					     (Id2, 2, _cor0) of
				      ( <( {'ct_hook_config',_cor37,_cor38,_rec10,_cor39,_cor40,_cor41}
					   -| ['compiler_generated'] )> when 'true' ->
					    %% Line 341
					    case <> of
					      %% Line 342
					      <>
						  when call 'erlang':'=='
							(_rec9,
							 _rec10) ->
						  let <_cor9> =
						      %% Line 345
						      apply 'pos'/2
							  (Id1, _cor0)
						  in  let <_cor8> =
							  %% Line 345
							  apply 'pos'/2
							      (Id2, _cor0)
						      in  %% Line 345
							  call 'erlang':'<'
							      (_cor9, _cor8)
					      %% Line 346
					      <>
						  when call 'erlang':'=:='
							(_rec9,
							 'ctfirst') ->
						  %% Line 347
						  'true'
					      %% Line 348
					      <>
						  when call 'erlang':'=:='
							(_rec10,
							 'ctfirst') ->
						  %% Line 349
						  'false'
					      %% Line 350
					      <>
						  when call 'erlang':'=:='
							(_rec9,
							 'ctlast') ->
						  %% Line 351
						  'false'
					      %% Line 352
					      <>
						  when call 'erlang':'=:='
							(_rec10,
							 'ctlast') ->
						  %% Line 353
						  'true'
					      %% Line 354
					      <> when 'true' ->
						  %% Line 355
						  call 'erlang':'<'
						      (_rec9, _rec10)
					    end
					-| ['compiler_generated'] )
				      ( <_cor42> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','ct_hook_config'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <_cor36> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','ct_hook_config'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor13,_cor12> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor13,_cor12})
			    -| [{'function_name',{'-resort/2-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-resort/2-fun-0-'}}] )
	in  %% Line 329
	    call 'lists':'sort'
		(_cor14, _cor1)
'pos'/2 =
    %% Line 359
    fun (_cor1,_cor0) ->
	%% Line 360
	apply 'pos'/3
	    (_cor1, _cor0, 0)
'pos'/3 =
    %% Line 361
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Id,[{'ct_hook_config',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12}|_cor13],Num>
	      when call 'erlang':'=:='
		    (_cor7,
		     Id) ->
	      %% Line 362
	      Num
	  %% Line 363
	  <Id,[_cor14|Rest],Num> when 'true' ->
	      let <_cor3> =
		  %% Line 364
		  call 'erlang':'+'
		      (Num, 1)
	      in  %% Line 364
		  apply 'pos'/3
		      (Id, Rest, _cor3)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'pos',3}}] )
	    -| ['compiler_generated'] )
	end
'catch_apply'/4 =
    %% Line 367
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 368
	try
	    %% Line 369
	    call 'erlang':'apply'
		(_cor3, _cor2, _cor1)
	of <_cor4> ->
	    _cor4
	catch <_cor7,_cor6,_cor5> ->
	    %% Line 371
	    case call 'erlang':'get_stacktrace'
		     () of
	      %% Line 373
	      <[{_cor18,_cor19,_cor20,_cor21}|_cor22]>
		  when let <_cor27> =
			call 'erlang':'=:='
			    (_cor18, _cor3)
		    in  let <_cor25> =
			    call 'erlang':'=:='
				(_cor19, _cor2)
			in  let <_cor23> =
				call 'erlang':'=:='
				    (_cor20, _cor1)
			    in  let <_cor24> =
				    call 'erlang':'=:='
					(_cor6, 'undef')
				in  let <_cor26> =
					call 'erlang':'and'
					    (_cor23, _cor24)
				    in  let <_cor28> =
					    call 'erlang':'and'
						(_cor25, _cor26)
					in  call 'erlang':'and'
						(_cor27, _cor28) ->
		  _cor0
	      %% Line 375
	      <Trace> when 'true' ->
		  do  %% Line 376
		      call 'ct_logs':'log'
			  ([83|[117|[105|[116|[101|[32|[72|[111|[111|[107]]]]]]]]]], [67|[97|[108|[108|[32|[116|[111|[32|[67|[84|[72|[32|[102|[97|[105|[108|[101|[100|[58|[32|[126|[119|[58|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 377
																												['error'|[{_cor6,Trace}|[]]])
		      let <_cor8> =
			  %% Line 381
			  call 'erlang':'length'
			      (_cor1)
		      in  let <_cor9> =
			      %% Line 380
			      call 'io_lib':'format'
				  ([126|[119|[58|[126|[119|[47|[126|[119|[32|[67|[84|[72|[32|[99|[97|[108|[108|[32|[102|[97|[105|[108|[101|[100]]]]]]]]]]]]]]]]]]]]]]]], %% Line 381
																					 [_cor3|[_cor2|[_cor8|[]]]])
			  in  let <_cor10> =
				  %% Line 379
				  call 'lists':'flatten'
				      (_cor9)
			      in  %% Line 378
				  call 'erlang':'throw'
				      ({'error_in_cth_call',_cor10})
	    end
'maybe_start_locker'/3 =
    %% Line 389
    fun (_cor2,_cor1,_cor0) ->
	%% Line 390
	case call 'lists':'member'
		 ('parallel', _cor0) of
	  %% Line 391
	  <'true'> when 'true' ->
	      let <_cor8> =
		  %% Line 392
		  call 'ct_hooks_lock':'start'
		      ({_cor2,_cor1})
	      in  %% Line 392
		  case _cor8 of
		    <{'ok',_X_Pid}> when 'true' ->
			( _cor8
			  -| ['compiler_generated'] )
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	  %% Line 393
	  <'false'> when 'true' ->
	      %% Line 394
	      'ok'
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'maybe_stop_locker'/3 =
    %% Line 397
    fun (_cor2,_cor1,_cor0) ->
	%% Line 398
	case call 'lists':'member'
		 ('parallel', _cor0) of
	  %% Line 399
	  <'true'> when 'true' ->
	      let <_cor8> =
		  %% Line 400
		  call 'ct_hooks_lock':'stop'
		      ({_cor2,_cor1})
	      in  %% Line 400
		  case _cor8 of
		    <'stopped'> when 'true' ->
			( _cor8
			  -| ['compiler_generated'] )
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	  %% Line 401
	  <'false'> when 'true' ->
	      %% Line 402
	      'ok'
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'maybe_lock'/0 =
    %% Line 406
    fun () ->
	let <_cor1> =
	    %% Line 407
	    call 'ct_hooks_lock':'request'
		()
	in  %% Line 407
	    case _cor1 of
	      <'locked'> when 'true' ->
		  ( _cor1
		    -| ['compiler_generated'] )
	      ( <_cor0> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor0})
		-| ['compiler_generated'] )
	    end
'maybe_unlock'/0 =
    %% Line 409
    fun () ->
	let <_cor1> =
	    %% Line 410
	    call 'ct_hooks_lock':'release'
		()
	in  %% Line 410
	    case _cor1 of
	      <'unlocked'> when 'true' ->
		  ( _cor1
		    -| ['compiler_generated'] )
	      ( <_cor0> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor0})
		-| ['compiler_generated'] )
	    end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('ct_hooks')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('ct_hooks', _cor0)
end