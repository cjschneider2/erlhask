module 'ct_master_event' ['add_handler'/0,
			  'add_handler'/1,
			  'code_change'/3,
			  'handle_call'/2,
			  'handle_event'/2,
			  'handle_info'/2,
			  'init'/1,
			  'module_info'/0,
			  'module_info'/1,
			  'notify'/1,
			  'start_link'/0,
			  'stop'/0,
			  'sync_notify'/1,
			  'terminate'/2]
    attributes [%% Line 29
		'behaviour' =
		    %% Line 29
		    ['gen_event'],
		%% Line 20
		'type' =
		    %% Line 20
		    [{{'record','event'},[{'record_field',20,{'atom',20,'name'}}|[{'record_field',21,{'atom',21,'node'}}|[{'record_field',22,{'atom',22,'data'}}]]],[]}],
		%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','conn'},[{'record_field',26,{'atom',26,'handle'}}|[{'record_field',27,{'atom',27,'targetref'}}|[{'record_field',28,{'atom',28,'address'}}|[{'record_field',29,{'atom',29,'callback'}}]]]],[]}],
		%% Line 31
		'type' =
		    %% Line 31
		    [{{'record','testspec'},[{'record_field',31,{'atom',31,'spec_dir'}}|[{'record_field',32,{'atom',32,'nodes'},{'nil',32}}|[{'record_field',33,{'atom',33,'init'},{'nil',33}}|[{'record_field',34,{'atom',34,'label'},{'nil',34}}|[{'record_field',35,{'atom',35,'profile'},{'nil',35}}|[{'record_field',36,{'atom',36,'logdir'},{'cons',36,{'string',36,[46]},{'nil',36}}}|[{'record_field',37,{'atom',37,'logopts'},{'nil',37}}|[{'record_field',38,{'atom',38,'basic_html'},{'nil',38}}|[{'record_field',39,{'atom',39,'verbosity'},{'nil',39}}|[{'record_field',40,{'atom',40,'silent_connections'},{'nil',40}}|[{'record_field',41,{'atom',41,'cover'},{'nil',41}}|[{'record_field',42,{'atom',42,'cover_stop'},{'nil',42}}|[{'record_field',43,{'atom',43,'config'},{'nil',43}}|[{'record_field',44,{'atom',44,'userconfig'},{'nil',44}}|[{'record_field',45,{'atom',45,'event_handler'},{'nil',45}}|[{'record_field',46,{'atom',46,'ct_hooks'},{'nil',46}}|[{'record_field',47,{'atom',47,'enable_builtin_hooks'},{'atom',47,'true'}}|[{'record_field',48,{'atom',48,'release_shell'},{'atom',48,'false'}}|[{'record_field',49,{'atom',49,'include'},{'nil',49}}|[{'record_field',50,{'atom',50,'auto_compile'},{'nil',50}}|[{'record_field',51,{'atom',51,'abort_if_missing_suites'},{'nil',51}}|[{'record_field',52,{'atom',52,'stylesheet'},{'nil',52}}|[{'record_field',53,{'atom',53,'multiply_timetraps'},{'nil',53}}|[{'record_field',54,{'atom',54,'scale_timetraps'},{'nil',54}}|[{'record_field',55,{'atom',55,'create_priv_dir'},{'nil',55}}|[{'record_field',56,{'atom',56,'alias'},{'nil',56}}|[{'record_field',57,{'atom',57,'tests'},{'nil',57}}|[{'record_field',58,{'atom',58,'merge_tests'},{'atom',58,'true'}}]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 60
		'type' =
		    %% Line 60
		    [{{'record','cover'},[{'record_field',60,{'atom',60,'app'},{'atom',60,'none'}}|[{'record_field',61,{'atom',61,'level'},{'atom',61,'details'}}|[{'record_field',62,{'atom',62,'excl_mods'},{'nil',62}}|[{'record_field',63,{'atom',63,'incl_mods'},{'nil',63}}|[{'record_field',64,{'atom',64,'cross'},{'nil',64}}|[{'record_field',65,{'atom',65,'src'},{'nil',65}}]]]]]],[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{{'record','conn_log'},[{'record_field',83,{'atom',83,'header'},{'atom',83,'true'}}|[{'record_field',84,{'atom',84,'client'}}|[{'record_field',85,{'atom',85,'name'}}|[{'record_field',86,{'atom',86,'address'}}|[{'record_field',87,{'atom',87,'conn_pid'}}|[{'record_field',88,{'atom',88,'action'}}|[{'record_field',89,{'atom',89,'module'}}]]]]]]],[]}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{{'record','state'},[],[]}]]
'start_link'/0 =
    %% Line 52
    fun () ->
	%% Line 53
	call 'gen_event':'start_link'
	    ({'local','ct_master_event'})
'add_handler'/0 =
    %% Line 59
    fun () ->
	%% Line 60
	call 'gen_event':'add_handler'
	    ('ct_master_event', 'ct_master_event', [])
'add_handler'/1 =
    %% Line 61
    fun (_cor0) ->
	%% Line 62
	call 'gen_event':'add_handler'
	    ('ct_master_event', 'ct_master_event', _cor0)
'stop'/0 =
    %% Line 68
    fun () ->
	%% Line 69
	case apply 'flush'/0
		 () of
	  %% Line 70
	  <{'error',Reason}> when 'true' ->
	      do  %% Line 71
		  call 'ct_master_logs':'log'
		      ([69|[114|[114|[111|[114]]]]], %% Line 72
						     [78|[111|[32|[114|[101|[115|[112|[111|[110|[115|[101|[32|[102|[114|[111|[109|[32|[67|[84|[32|[77|[97|[115|[116|[101|[114|[32|[69|[118|[101|[110|[116|[46|[10|[82|[101|[97|[115|[111|[110|[32|[61|[32|[126|[112|[10|[84|[101|[114|[109|[105|[110|[97|[116|[105|[110|[103|[32|[110|[111|[119|[33|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 74
																																																			[Reason|[]])
		  catch
		      let <_cor0> =
			  %% Line 76
			  call 'erlang':'whereis'
			      ('ct_master_event')
		      in  %% Line 76
			  call 'erlang':'exit'
			      (_cor0, 'kill')
	  %% Line 77
	  <_cor2> when 'true' ->
	      %% Line 78
	      call 'gen_event':'stop'
		  ('ct_master_event')
	end
'flush'/0 =
    %% Line 81
    fun () ->
	%% Line 82
	try
	    call 'gen_event':'call'
		('ct_master_event', 'ct_master_event', 'flush', 1800000)
	of <_cor0> ->
	    case _cor0 of
	      %% Line 83
	      <'flushing'> when 'true' ->
		  do  %% Line 84
		      call 'timer':'sleep'
			  (1)
		      %% Line 85
		      apply 'flush'/0
			  ()
	      %% Line 86
	      <'done'> when 'true' ->
		  %% Line 87
		  'ok'
	      %% Line 88
	      <Error = {'error',_cor5}> when 'true' ->
		  %% Line 89
		  Error
	      ( <_cor1> when 'true' ->
		    primop 'match_fail'
			({'try_clause',_cor1})
		-| ['compiler_generated'] )
	    end
	catch <_cor4,_cor3,_cor2> ->
	    %% Line 92
	    {'error',_cor3}
'notify'/1 =
    %% Line 99
    fun (_cor0) ->
	%% Line 100
	call 'gen_event':'notify'
	    ('ct_master_event', _cor0)
'sync_notify'/1 =
    %% Line 106
    fun (_cor0) ->
	%% Line 107
	call 'gen_event':'sync_notify'
	    ('ct_master_event', _cor0)
'init'/1 =
    %% Line 117
    fun (_cor0) ->
	do  %% Line 118
	    call 'ct_master_logs':'log'
		([67|[84|[32|[77|[97|[115|[116|[101|[114|[32|[69|[118|[101|[110|[116|[32|[72|[97|[110|[100|[108|[101|[114|[32|[115|[116|[97|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [], [])
	    %% Line 119
	    {'ok',{'state'}}
'handle_event'/2 =
    %% Line 130
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'event','start_logging',Node,RunDir},State> when 'true' ->
	      do  %% Line 131
		  call 'ct_master_logs':'log'
		      ([67|[84|[32|[77|[97|[115|[116|[101|[114|[32|[69|[118|[101|[110|[116|[32|[72|[97|[110|[100|[108|[101|[114]]]]]]]]]]]]]]]]]]]]]]], [71|[111|[116|[32|[126|[116|[115|[32|[102|[114|[111|[109|[32|[126|[119]]]]]]]]]]]]]]], [RunDir|[Node|[]]])
		  do  %% Line 132
		      call 'ct_master_logs':'nodedir'
			  (Node, RunDir)
		      %% Line 133
		      {'ok',State}
	  %% Line 135
	  <{'event',Name,Node,Data},State> when 'true' ->
	      do  %% Line 136
		  apply 'print'/2
		      ([126|[110|[61|[61|[61|[32|[126|[119|[32|[61|[61|[61|[126|[110]]]]]]]]]]]]]], ['ct_master_event'])
		  do  %% Line 137
		      apply 'print'/2
			  ([126|[119|[32|[111|[110|[32|[126|[119|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]], [Name|[Node|[Data|[]]]])
		      %% Line 138
		      {'ok',State}
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'handle_event',2}}] )
	    -| ['compiler_generated'] )
	end
'handle_call'/2 =
    %% Line 150
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'flush',State> when 'true' ->
	      let <_cor2> =
		  %% Line 151
		  call 'erlang':'self'
		      ()
	      in  %% Line 151
		  case call 'erlang':'process_info'
			   (_cor2, 'message_queue_len') of
		    %% Line 152
		    <{'message_queue_len',0}> when 'true' ->
			%% Line 153
			{'ok','done',State}
		    %% Line 154
		    <_cor6> when 'true' ->
			%% Line 155
			{'ok','flushing',State}
		  end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'handle_call',2}}] )
	    -| ['compiler_generated'] )
	end
'handle_info'/2 =
    %% Line 167
    fun (_cor1,_cor0) ->
	%% Line 168
	{'ok',_cor0}
'terminate'/2 =
    %% Line 176
    fun (_cor1,_cor0) ->
	do  %% Line 177
	    call 'ct_master_logs':'log'
		([67|[84|[32|[77|[97|[115|[116|[101|[114|[32|[69|[118|[101|[110|[116|[32|[72|[97|[110|[100|[108|[101|[114|[32|[115|[116|[111|[112|[112|[105|[110|[103]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [], [])
	    %% Line 178
	    'ok'
'code_change'/3 =
    %% Line 184
    fun (_cor2,_cor1,_cor0) ->
	%% Line 185
	{'ok',_cor1}
'print'/2 =
    %% Line 191
    fun (_cor1,_cor0) ->
	%% Line 193
	'ok'
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('ct_master_event')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('ct_master_event', _cor0)
end