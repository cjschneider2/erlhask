module 'ct_logs' ['add_external_logs'/1,
		  'add_link'/3,
		  'basic_html'/0,
		  'clear_stylesheet'/1,
		  'close'/2,
		  'cont_log'/2,
		  'ct_log'/3,
		  'end_log'/0,
		  'end_tc'/1,
		  'get_log_dir'/0,
		  'get_log_dir'/1,
		  'get_ts_html_wrapper'/5,
		  'init'/2,
		  'init_tc'/1,
		  'insert_javascript'/1,
		  'locate_priv_file'/1,
		  'log'/3,
		  'make_all_runs_index'/1,
		  'make_all_suites_index'/1,
		  'make_last_run_index'/0,
		  'make_relative'/1,
		  'module_info'/0,
		  'module_info'/1,
		  'set_stylesheet'/2,
		  'simulate'/0,
		  'start_log'/1,
		  'tc_log'/3,
		  'tc_log'/4,
		  'tc_log'/5,
		  'tc_log_async'/3,
		  'tc_log_async'/5,
		  'tc_pal'/3,
		  'tc_pal'/4,
		  'tc_print'/3,
		  'tc_print'/4,
		  'uri'/1,
		  'xhtml'/2]
    attributes [%% Line 20
		'type' =
		    %% Line 20
		    [{{'record','event'},[{'record_field',20,{'atom',20,'name'}}|[{'record_field',21,{'atom',21,'node'}}|[{'record_field',22,{'atom',22,'data'}}]]],[]}],
		%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','conn'},[{'record_field',26,{'atom',26,'handle'}}|[{'record_field',27,{'atom',27,'targetref'}}|[{'record_field',28,{'atom',28,'address'}}|[{'record_field',29,{'atom',29,'callback'}}]]]],[]}],
		%% Line 31
		'type' =
		    %% Line 31
		    [{{'record','testspec'},[{'record_field',31,{'atom',31,'spec_dir'}}|[{'record_field',32,{'atom',32,'nodes'},{'nil',32}}|[{'record_field',33,{'atom',33,'init'},{'nil',33}}|[{'record_field',34,{'atom',34,'label'},{'nil',34}}|[{'record_field',35,{'atom',35,'profile'},{'nil',35}}|[{'record_field',36,{'atom',36,'logdir'},{'cons',36,{'string',36,[46]},{'nil',36}}}|[{'record_field',37,{'atom',37,'logopts'},{'nil',37}}|[{'record_field',38,{'atom',38,'basic_html'},{'nil',38}}|[{'record_field',39,{'atom',39,'verbosity'},{'nil',39}}|[{'record_field',40,{'atom',40,'silent_connections'},{'nil',40}}|[{'record_field',41,{'atom',41,'cover'},{'nil',41}}|[{'record_field',42,{'atom',42,'cover_stop'},{'nil',42}}|[{'record_field',43,{'atom',43,'config'},{'nil',43}}|[{'record_field',44,{'atom',44,'userconfig'},{'nil',44}}|[{'record_field',45,{'atom',45,'event_handler'},{'nil',45}}|[{'record_field',46,{'atom',46,'ct_hooks'},{'nil',46}}|[{'record_field',47,{'atom',47,'enable_builtin_hooks'},{'atom',47,'true'}}|[{'record_field',48,{'atom',48,'release_shell'},{'atom',48,'false'}}|[{'record_field',49,{'atom',49,'include'},{'nil',49}}|[{'record_field',50,{'atom',50,'auto_compile'},{'nil',50}}|[{'record_field',51,{'atom',51,'abort_if_missing_suites'},{'nil',51}}|[{'record_field',52,{'atom',52,'stylesheet'},{'nil',52}}|[{'record_field',53,{'atom',53,'multiply_timetraps'},{'nil',53}}|[{'record_field',54,{'atom',54,'scale_timetraps'},{'nil',54}}|[{'record_field',55,{'atom',55,'create_priv_dir'},{'nil',55}}|[{'record_field',56,{'atom',56,'alias'},{'nil',56}}|[{'record_field',57,{'atom',57,'tests'},{'nil',57}}|[{'record_field',58,{'atom',58,'merge_tests'},{'atom',58,'true'}}]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 60
		'type' =
		    %% Line 60
		    [{{'record','cover'},[{'record_field',60,{'atom',60,'app'},{'atom',60,'none'}}|[{'record_field',61,{'atom',61,'level'},{'atom',61,'details'}}|[{'record_field',62,{'atom',62,'excl_mods'},{'nil',62}}|[{'record_field',63,{'atom',63,'incl_mods'},{'nil',63}}|[{'record_field',64,{'atom',64,'cross'},{'nil',64}}|[{'record_field',65,{'atom',65,'src'},{'nil',65}}]]]]]],[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{{'record','conn_log'},[{'record_field',83,{'atom',83,'header'},{'atom',83,'true'}}|[{'record_field',84,{'atom',84,'client'}}|[{'record_field',85,{'atom',85,'name'}}|[{'record_field',86,{'atom',86,'address'}}|[{'record_field',87,{'atom',87,'conn_pid'}}|[{'record_field',88,{'atom',88,'action'}}|[{'record_field',89,{'atom',89,'module'}}]]]]]]],[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}],
		%% Line 75
		'type' =
		    %% Line 75
		    [{{'record','log_cache'},[{'record_field',75,{'atom',75,'version'}}|[{'record_field',76,{'atom',76,'all_runs'},{'nil',76}}|[{'record_field',77,{'atom',77,'tests'},{'nil',77}}]]],[]}],
		%% Line 555
		'type' =
		    %% Line 555
		    [{{'record','logger_state'},[{'record_field',555,{'atom',555,'parent'}}|[{'record_field',556,{'atom',556,'log_dir'}}|[{'record_field',557,{'atom',557,'start_time'}}|[{'record_field',558,{'atom',558,'orig_GL'}}|[{'record_field',559,{'atom',559,'ct_log_fd'}}|[{'record_field',560,{'atom',560,'tc_groupleaders'}}|[{'record_field',561,{'atom',561,'stylesheet'}}|[{'record_field',562,{'atom',562,'async_print_jobs'}}]]]]]]]],[]}]]
'init'/2 =
    %% Line 92
    fun (_cor1,_cor0) ->
	let <Self> =
	    %% Line 93
	    call 'erlang':'self'
		()
	in  let <_cor3> =
		%% Line 94
		( fun () ->
		      apply 'logger'/3
			  (Self, _cor1, _cor0)
		  -| [{'id',{0,0,'-init/2-fun-0-'}}] )
	    in  let <Pid> =
		    %% Line 94
		    call 'erlang':'spawn_link'
			(_cor3)
		in  let <MRef> =
			%% Line 95
			call 'erlang':'monitor'
			    ('process', Pid)
		    in  %% Line 96
			receive
			  %% Line 97
			  <{'started',_cor8,Result}>
			      when call 'erlang':'=:='
				    (_cor8,
				     Pid) ->
			      do  %% Line 98
				  call 'erlang':'demonitor'
				      (MRef, ['flush'])
				  %% Line 99
				  Result
			  %% Line 100
			  <{'DOWN',_cor9,'process',_cor10,Reason}>
			      when call 'erlang':'=:='
				    (_cor9,
				     MRef) ->
			      %% Line 101
			      call 'erlang':'exit'
				  ({'could_not_start_process','ct_logs',Reason})
			after 'infinity' ->
			  'true'
'date2str'/1 =
    %% Line 104
    fun (_cor0) ->
	case _cor0 of
	  <{{YY,MM,DD},{H,M,S}}> when 'true' ->
	      let <_cor1> =
		  %% Line 105
		  call 'io_lib':'format'
		      ([126|[119|[45|[126|[50|[46|[50|[46|[48|[119|[45|[126|[50|[46|[50|[46|[48|[119|[95|[126|[50|[46|[50|[46|[48|[119|[46|[126|[50|[46|[50|[46|[48|[119|[46|[126|[50|[46|[50|[46|[48|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 106
																														      [YY|[MM|[DD|[H|[M|[S|[]]]]]]])
	      in  %% Line 105
		  call 'lists':'flatten'
		      (_cor1)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'date2str',1}}] )
	    -| ['compiler_generated'] )
	end
'logdir_prefix'/0 =
    %% Line 107
    fun () ->
	%% Line 108
	[99|[116|[95|[114|[117|[110]]]]]]
'logdir_node_prefix'/0 =
    %% Line 109
    fun () ->
	let <_cor3> =
	    %% Line 110
	    apply 'logdir_prefix'/0
		()
	in  let <_cor0> =
		%% Line 110
		call 'erlang':'node'
		    ()
	    in  let <_cor1> =
		    %% Line 110
		    call 'erlang':'atom_to_list'
			(_cor0)
		in  let <_cor2> =
			%% Line 110
			[46|_cor1]
		    in  %% Line 110
			call 'erlang':'++'
			    (_cor3, _cor2)
'make_dirname'/1 =
    %% Line 112
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 113
	    apply 'logdir_node_prefix'/0
		()
	in  let <_cor1> =
		%% Line 113
		apply 'date2str'/1
		    (_cor0)
	    in  let <_cor2> =
		    %% Line 113
		    [46|_cor1]
		in  %% Line 113
		    call 'erlang':'++'
			(_cor3, _cor2)
'datestr_from_dirname'/1 =
    %% Line 115
    fun (_cor0) ->
	case _cor0 of
	  <[Y1|[Y2|[Y3|[Y4|[45|[Mo1|[Mo2|[45|[D1|[D2|[95|%% Line 116
							 [H1|[H2|[46|[M1|[M2|[46|[S1|[S2|_cor2]]]]]]]]]]]]]]]]]]]> when 'true' ->
	      %% Line 117
	      [Y1|[Y2|[Y3|[Y4|[45|[Mo1|[Mo2|[45|[D1|[D2|[95|%% Line 118
							    [H1|[H2|[46|[M1|[M2|[46|[S1|[S2|[]]]]]]]]]]]]]]]]]]]]
	  %% Line 119
	  <[_X_Ch|Rest]> when 'true' ->
	      %% Line 120
	      apply 'datestr_from_dirname'/1
		  (Rest)
	  %% Line 121
	  <[]> when 'true' ->
	      %% Line 122
	      []
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'datestr_from_dirname',1}}] )
	    -| ['compiler_generated'] )
	end
'close'/2 =
    %% Line 129
    fun (_cor1,_cor0) ->
	let <LogCacheBin> =
	    %% Line 132
	    apply 'make_last_run_index'/0
		()
	in  do  %% Line 133
		call 'erlang':'put'
		    ('ct_log_cache', LogCacheBin)
		let <Cache2File> =
		    %% Line 134
		    ( fun () ->
			  %% Line 135
			  case call 'erlang':'get'
				   ('ct_log_cache') of
			    %% Line 136
			    <'undefined'> when 'true' ->
				%% Line 137
				'ok'
			    %% Line 138
			    <CacheBin> when 'true' ->
				do  %% Line 140
				    call 'file':'write_file'
					([99|[116|[95|[108|[111|[103|[95|[99|[97|[99|[104|[101]]]]]]]]]]]], CacheBin)
				    %% Line 141
				    call 'erlang':'put'
					('ct_log_cache', 'undefined')
			  end
		      -| [{'id',{0,0,'-close/2-fun-0-'}}] )
		in  let <_cor5> =
			%% Line 145
			call 'erlang':'node'
			    ()
		    in  do  %% Line 145
			    call 'ct_event':'notify'
				({'event','stop_logging',_cor5,[]})
			    do  %% Line 147
				case call 'erlang':'whereis'
					 ('ct_logs') of
				  %% Line 148
				  <Pid>
				      when call 'erlang':'is_pid'
					    (Pid) ->
				      let <MRef> =
					  %% Line 149
					  call 'erlang':'monitor'
					      ('process', Pid)
				      in  do  %% Line 150
					      call 'erlang':'!'
						  ('ct_logs', 'stop')
					      %% Line 151
					      receive
						%% Line 152
						<{'DOWN',_cor21,'process',_cor22,_cor23}>
						    when call 'erlang':'=:='
							  (_cor21,
							   MRef) ->
						    'ok'
					      after 'infinity' ->
						'ok'
				  %% Line 155
				  <'undefined'> when 'true' ->
				      'ok'
				  ( <_cor7> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor7})
				    -| ['compiler_generated'] )
				end
				do  %% Line 159
				    case <> of
				      <>
					  when call 'erlang':'=:='
						(_cor1,
						 'clean') ->
					  do  %% Line 160
					      case apply 'cleanup'/0
						       () of
						%% Line 161
						<'ok'> when 'true' ->
						    'ok'
						%% Line 163
						<Error> when 'true' ->
						    %% Line 164
						    call 'io':'format'
							([87|[97|[114|[110|[105|[110|[103|[33|[32|[67|[108|[101|[97|[110|[117|[112|[32|[102|[97|[105|[108|[101|[100|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Error|[]])
					      end
					      do  %% Line 166
						  apply 'make_all_suites_index'/1
						      ('stop')
						  do  %% Line 167
						      apply 'make_all_runs_index'/1
							  ('stop')
						      %% Line 168
						      apply Cache2File
							  ()
				      %% Line 169
				      <> when 'true' ->
					  do  %% Line 170
					      call 'file':'set_cwd'
						  ([46|[46]])
					      do  %% Line 171
						  apply 'make_all_suites_index'/1
						      ('stop')
						  do  %% Line 172
						      apply 'make_all_runs_index'/1
							  ('stop')
						      do  %% Line 173
							  apply Cache2File
							      ()
							  %% Line 174
							  case call 'ct_util':'get_profile_data'
								   ('browser', _cor0) of
							    %% Line 175
							    <'undefined'> when 'true' ->
								'ok'
							    %% Line 177
							    <BrowserData> when 'true' ->
								let <_cor11> =
								    %% Line 178
								    call 'proplists':'get_value'
									('prog', BrowserData)
								in  let <_cor10> =
									%% Line 179
									call 'proplists':'get_value'
									    ('args', BrowserData)
								    in  let <_cor9> =
									    %% Line 180
									    call 'proplists':'get_value'
										('page', BrowserData)
									in  %% Line 178
									    case <_cor11,_cor10,_cor9> of
									      %% Line 181
									      <Prog,Args,Page>
										  when let <_cor12> =
											call 'erlang':'is_list'
											    (Args)
										    in  let <_cor13> =
											    %% Line 182
											    call 'erlang':'is_list'
												(Page)
											in  call 'erlang':'and'
												(_cor12, _cor13) ->
										  let <_cor14> =
										      %% Line 183
										      call 'filename':'absname'
											  (Page)
										  in  let <_cor15> =
											  %% Line 183
											  call 'erlang':'++'
											      (_cor14, [34])
										      in  let <URL> =
											      %% Line 183
											      call 'erlang':'++'
												  ([34|[102|[105|[108|[101|[58|[47|[47]]]]]]]], _cor15)
											  in  %% Line 184
											      call 'ct_util':'open_url'
												  (Prog, Args, URL)
									      %% Line 185
									      <_fol3,_fol4,_fol5> when 'true' ->
										  'ok'
									    end
							  end
				    end
				    %% Line 190
				    'ok'
'set_stylesheet'/2 =
    %% Line 194
    fun (_cor1,_cor0) ->
	%% Line 195
	apply 'cast'/1
	    ({'set_stylesheet',_cor1,_cor0})
'clear_stylesheet'/1 =
    %% Line 199
    fun (_cor0) ->
	%% Line 200
	apply 'cast'/1
	    ({'clear_stylesheet',_cor0})
'get_log_dir'/0 =
    %% Line 204
    fun () ->
	%% Line 205
	apply 'get_log_dir'/1
	    ('false')
'get_log_dir'/1 =
    %% Line 209
    fun (_cor0) ->
	%% Line 210
	case apply 'call'/1
		 ({'get_log_dir',_cor0}) of
	  %% Line 211
	  <{'error','does_not_exist'}>
	      when call 'erlang':'=:='
		    (_cor0,
		     'true') ->
	      let <_cor1> =
		  %% Line 212
		  call 'filename':'absname'
		      ([46])
	      in  %% Line 212
		  {'ok',_cor1}
	  %% Line 213
	  <{'error','does_not_exist'}> when 'true' ->
	      %% Line 214
	      {'ok',[46]}
	  %% Line 215
	  <Result> when 'true' ->
	      %% Line 216
	      Result
	end
'make_last_run_index'/0 =
    %% Line 221
    fun () ->
	%% Line 222
	apply 'call'/1
	    ('make_last_run_index')
'call'/1 =
    %% Line 224
    fun (_cor0) ->
	%% Line 225
	case call 'erlang':'whereis'
		 ('ct_logs') of
	  %% Line 226
	  <'undefined'> when 'true' ->
	      %% Line 227
	      {'error','does_not_exist'}
	  %% Line 228
	  <Pid> when 'true' ->
	      let <MRef> =
		  %% Line 229
		  call 'erlang':'monitor'
		      ('process', Pid)
	      in  let <Ref> =
		      %% Line 230
		      call 'erlang':'make_ref'
			  ()
		  in  let <_cor3> =
			  %% Line 231
			  call 'erlang':'self'
			      ()
		      in  do  %% Line 231
			      call 'erlang':'!'
				  ('ct_logs', {_cor0,{_cor3,Ref}})
			      %% Line 232
			      receive
				%% Line 233
				<{_cor6,Result}>
				    when call 'erlang':'=:='
					  (_cor6,
					   Ref) ->
				    do  %% Line 234
					call 'erlang':'demonitor'
					    (MRef, ['flush'])
					%% Line 235
					Result
				%% Line 236
				<{'DOWN',_cor7,'process',_cor8,Reason}>
				    when call 'erlang':'=:='
					  (_cor7,
					   MRef) ->
				    %% Line 237
				    {'error',{'process_down','ct_logs',Reason}}
			      after 'infinity' ->
				'true'
	end
'return'/2 =
    %% Line 241
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{To,Ref},Result> when 'true' ->
	      %% Line 242
	      call 'erlang':'!'
		  (To, {Ref,Result})
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'return',2}}] )
	    -| ['compiler_generated'] )
	end
'cast'/1 =
    %% Line 244
    fun (_cor0) ->
	%% Line 245
	case call 'erlang':'whereis'
		 ('ct_logs') of
	  %% Line 246
	  <'undefined'> when 'true' ->
	      %% Line 247
	      {'error','does_not_exist'}
	  %% Line 248
	  <_X_Pid> when 'true' ->
	      %% Line 249
	      call 'erlang':'!'
		  ('ct_logs', _cor0)
	end
'init_tc'/1 =
    %% Line 258
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 259
	    call 'erlang':'self'
		()
	in  let <_cor1> =
		%% Line 259
		call 'erlang':'group_leader'
		    ()
	    in  do  %% Line 259
		    apply 'call'/1
			({'init_tc',_cor2,_cor1,_cor0})
		    let <_cor3> =
			%% Line 260
			apply 'xhtml'/2
			    ([], [60|[98|[114|[32|[47|[62]]]]]])
		    in  do  %% Line 260
			    call 'io':'format'
				(_cor3)
			    %% Line 261
			    'ok'
'end_tc'/1 =
    %% Line 269
    fun (_cor0) ->
	%% Line 272
	apply 'call'/1
	    ({'end_tc',_cor0})
'log'/3 =
    %% Line 285
    fun (_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 286
	    call 'erlang':'self'
		()
	in  let <_cor7> =
		%% Line 286
		call 'erlang':'group_leader'
		    ()
	    in  let <_cor5> =
		    %% Line 287
		    apply 'int_header'/0
			()
		in  let <_cor3> =
			%% Line 287
			call 'erlang':'now'
			    ()
		    in  let <_cor4> =
			    %% Line 287
			    apply 'log_timestamp'/1
				(_cor3)
			in  let <_cor6> =
				%% Line 289
				apply 'int_footer'/0
				    ()
			    in  do  %% Line 286
				    apply 'cast'/1
					({'log','sync',_cor8,_cor7,'ct_internal',99,%% Line 287
										    [{_cor5,[_cor4|[_cor2|[]]]}|%% Line 288
														[{_cor1,_cor0}|%% Line 289
															       [{_cor6,[]}|[]]]]})
				    %% Line 290
				    'ok'
'start_log'/1 =
    %% Line 307
    fun (_cor0) ->
	let <_cor5> =
	    %% Line 308
	    call 'erlang':'self'
		()
	in  let <_cor4> =
		%% Line 308
		call 'erlang':'group_leader'
		    ()
	    in  let <_cor3> =
		    %% Line 309
		    apply 'int_header'/0
			()
		in  let <_cor1> =
			%% Line 309
			call 'erlang':'now'
			    ()
		    in  let <_cor2> =
			    %% Line 309
			    apply 'log_timestamp'/1
				(_cor1)
			in  do  %% Line 308
				apply 'cast'/1
				    ({'log','sync',_cor5,_cor4,'ct_internal',99,%% Line 309
										[{_cor3,[_cor2|[_cor0|[]]]}|[]]})
				%% Line 310
				'ok'
'cont_log'/2 =
    %% Line 319
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],[]> when 'true' ->
	      %% Line 320
	      'ok'
	  %% Line 321
	  <Format,Args> when 'true' ->
	      do  %% Line 322
		  apply 'maybe_log_timestamp'/0
		      ()
		  let <_cor3> =
		      %% Line 323
		      call 'erlang':'self'
			  ()
		  in  let <_cor2> =
			  %% Line 323
			  call 'erlang':'group_leader'
			      ()
		      in  do  %% Line 323
			      apply 'cast'/1
				  ({'log','sync',_cor3,_cor2,'ct_internal',99,%% Line 324
									      [{Format,Args}|[]]})
			      %% Line 325
			      'ok'
	end
'end_log'/0 =
    %% Line 334
    fun () ->
	let <_cor2> =
	    %% Line 335
	    call 'erlang':'self'
		()
	in  let <_cor1> =
		%% Line 335
		call 'erlang':'group_leader'
		    ()
	    in  let <_cor0> =
		    %% Line 336
		    apply 'int_footer'/0
			()
		in  do  %% Line 335
			apply 'cast'/1
			    ({'log','sync',_cor2,_cor1,'ct_internal',99,%% Line 336
									[{_cor0,[]}|[]]})
			%% Line 337
			'ok'
'add_external_logs'/1 =
    %% Line 350
    fun (_cor0) ->
	do  %% Line 351
	    apply 'start_log'/1
		([69|[120|[116|[101|[114|[110|[97|[108|[32|[76|[111|[103|[115]]]]]]]]]]]]])
	    do  %% Line 352
		( letrec
		      'lc$^0'/1 =
			  fun (_cor3) ->
			      case _cor3 of
				<[%% Line 353
				  Log|_cor2]> when 'true' ->
				    let <_cor4> =
					%% Line 353
					call 'filename':'join'
					    ([108|[111|[103|[95|[112|[114|[105|[118|[97|[116|[101]]]]]]]]]]], Log)
				    in  let <_cor5> =
					    %% Line 353
					    apply 'uri'/1
						(_cor4)
					in  do  apply 'cont_log'/2
						    ([60|[97|[32|[104|[114|[101|[102|[61|[34|[126|[116|[115|[34|[62|[126|[116|[115|[60|[47|[97|[62|[10]]]]]]]]]]]]]]]]]]]]]], %% Line 353
																					      [_cor5|[Log|[]]])
						%% Line 353
						apply 'lc$^0'/1
						    (_cor2)
				<[]> when 'true' ->
				    []
				( <_cor3> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor3})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (_cor0)
		  -| ['list_comprehension'] )
		%% Line 354
		apply 'end_log'/0
		    ()
'add_link'/3 =
    %% Line 364
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 366
	    call 'filename':'join'
		([108|[111|[103|[95|[112|[114|[105|[118|[97|[116|[101]]]]]]]]]]], _cor1)
	in  let <_cor4> =
		%% Line 366
		apply 'uri'/1
		    (_cor3)
	    in  %% Line 365
		apply 'log'/3
		    (_cor2, [60|[97|[32|[104|[114|[101|[102|[61|[34|[126|[116|[115|[34|[32|[116|[121|[112|[101|[61|[126|[112|[62|[126|[116|[115|[60|[47|[97|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 366
																								   [_cor4|[_cor0|[_cor1|[]]]])
'tc_log'/3 =
    %% Line 372
    fun (_cor2,_cor1,_cor0) ->
	%% Line 373
	apply 'tc_log'/4
	    (_cor2, 50, _cor1, _cor0)
'tc_log'/4 =
    %% Line 378
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 379
	apply 'tc_log'/5
	    (_cor3, _cor2, [85|[115|[101|[114]]]], _cor1, _cor0)
'tc_log'/5 =
    %% Line 394
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 395
	    call 'erlang':'self'
		()
	in  let <_cor7> =
		%% Line 395
		call 'erlang':'group_leader'
		    ()
	    in  let <_cor5> =
		    %% Line 396
		    apply 'div_header'/2
			(_cor4, _cor2)
		in  let <_cor6> =
			%% Line 398
			apply 'div_footer'/0
			    ()
		    in  do  %% Line 395
			    apply 'cast'/1
				({'log','sync',_cor8,_cor7,_cor4,_cor3,%% Line 396
								       [{_cor5,[]}|%% Line 397
										   [{_cor1,_cor0}|%% Line 398
												  [{_cor6,[]}|[]]]]})
			    %% Line 399
			    'ok'
'tc_log_async'/3 =
    %% Line 404
    fun (_cor2,_cor1,_cor0) ->
	%% Line 405
	apply 'tc_log_async'/5
	    (_cor2, 50, [85|[115|[101|[114]]]], _cor1, _cor0)
'tc_log_async'/5 =
    %% Line 422
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 423
	    call 'erlang':'self'
		()
	in  let <_cor7> =
		%% Line 423
		call 'erlang':'group_leader'
		    ()
	    in  let <_cor5> =
		    %% Line 424
		    apply 'div_header'/2
			(_cor4, _cor2)
		in  let <_cor6> =
			%% Line 426
			apply 'div_footer'/0
			    ()
		    in  do  %% Line 423
			    apply 'cast'/1
				({'log','async',_cor8,_cor7,_cor4,_cor3,%% Line 424
									[{_cor5,[]}|%% Line 425
										    [{_cor1,_cor0}|%% Line 426
												   [{_cor6,[]}|[]]]]})
			    %% Line 427
			    'ok'
'tc_print'/3 =
    %% Line 431
    fun (_cor2,_cor1,_cor0) ->
	%% Line 432
	apply 'tc_print'/4
	    (_cor2, 50, _cor1, _cor0)
'tc_print'/4 =
    %% Line 445
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 446
	    case call 'ct_util':'get_verbosity'
		     (_cor3) of
	      %% Line 447
	      <'undefined'> when 'true' ->
		  %% Line 448
		  call 'ct_util':'get_verbosity'
		      ('$unspecified')
	      %% Line 449
	      <{'error','bad_invocation'}> when 'true' ->
		  %% Line 450
		  100
	      %% Line 451
	      <{'error',_X_Failure}> when 'true' ->
		  %% Line 452
		  100
	      %% Line 453
	      <Val> when 'true' ->
		  %% Line 454
		  Val
	    end
	in  %% Line 456
	    case <> of
	      <>
		  when try
			let <_cor7> =
			    call 'erlang':'-'
				(100, _cor5)
			in  call 'erlang':'>='
				(_cor2, _cor7)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  let <Head> =
		      %% Line 457
		      apply 'get_heading'/1
			  (_cor3)
		  in  let <_cor9> =
			  %% Line 458
			  call 'lists':'concat'
			      ([Head|[_cor1|[[10|[10]]]]])
		      in  do  %% Line 458
			      call 'io':'format'
				  ('user', _cor9, _cor0)
			      %% Line 459
			      'ok'
	      %% Line 460
	      <> when 'true' ->
		  %% Line 461
		  'ok'
	    end
'get_heading'/1 =
    %% Line 464
    fun (_cor0) ->
	case _cor0 of
	  <'default'> when 'true' ->
	      let <_cor1> =
		  %% Line 467
		  call 'erlang':'now'
		      ()
	      in  let <_cor2> =
		      %% Line 467
		      apply 'log_timestamp'/1
			  (_cor1)
		  in  %% Line 465
		      call 'io_lib':'format'
			  ([10|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[10|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 467
																																							   [_cor2|[]])
	  %% Line 468
	  <Category> when 'true' ->
	      let <_cor3> =
		  %% Line 471
		  call 'erlang':'now'
		      ()
	      in  let <_cor4> =
		      %% Line 471
		      apply 'log_timestamp'/1
			  (_cor3)
		  in  %% Line 469
		      call 'io_lib':'format'
			  ([10|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[10|[126|[115|[32|[32|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 471
																																										 [_cor4|[Category|[]]])
	end
'tc_pal'/3 =
    %% Line 477
    fun (_cor2,_cor1,_cor0) ->
	%% Line 478
	apply 'tc_pal'/4
	    (_cor2, 50, _cor1, _cor0)
'tc_pal'/4 =
    %% Line 492
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 493
	    apply 'tc_print'/4
		(_cor3, _cor2, _cor1, _cor0)
	    let <_cor7> =
		%% Line 494
		call 'erlang':'self'
		    ()
	    in  let <_cor6> =
		    %% Line 494
		    call 'erlang':'group_leader'
			()
		in  let <_cor4> =
			%% Line 495
			apply 'div_header'/1
			    (_cor3)
		    in  let <_cor5> =
			    %% Line 497
			    apply 'div_footer'/0
				()
			in  do  %% Line 494
				apply 'cast'/1
				    ({'log','sync',_cor7,_cor6,_cor3,_cor2,%% Line 495
									   [{_cor4,[]}|%% Line 496
										       [{_cor1,_cor0}|%% Line 497
												      [{_cor5,[]}|[]]]]})
				%% Line 498
				'ok'
'ct_log'/3 =
    %% Line 511
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 512
	    apply 'div_header'/1
		(_cor2)
	in  let <_cor4> =
		%% Line 514
		apply 'div_footer'/0
		    ()
	    in  do  %% Line 512
		    apply 'cast'/1
			({'ct_log',[{_cor3,[]}|%% Line 513
					       [{_cor1,_cor0}|%% Line 514
							      [{_cor4,[]}|[]]]]})
		    %% Line 515
		    'ok'
'int_header'/0 =
    %% Line 520
    fun () ->
	%% Line 521
	[60|[100|[105|[118|[32|[99|[108|[97|[115|[115|[61|[34|[99|[116|[95|[105|[110|[116|[101|[114|[110|[97|[108|[34|[62|[60|[98|[62|[42|[42|[42|[32|[67|[84|[32|[126|[115|[32|[42|[42|[42|[32|[126|[116|[115|[60|[47|[98|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
'int_footer'/0 =
    %% Line 522
    fun () ->
	%% Line 523
	[60|[47|[100|[105|[118|[62]]]]]]
'div_header'/1 =
    %% Line 525
    fun (_cor0) ->
	%% Line 526
	apply 'div_header'/2
	    (_cor0, [85|[115|[101|[114]]]])
'div_header'/2 =
    %% Line 527
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 528
	    call 'erlang':'atom_to_list'
		(_cor1)
	in  let <_cor2> =
		%% Line 529
		call 'erlang':'now'
		    ()
	    in  let <_cor3> =
		    %% Line 529
		    apply 'log_timestamp'/1
			(_cor2)
		in  let <_cor4> =
			%% Line 529
			call 'erlang':'++'
			    (_cor3, [32|[42|[42|[42|[60|[47|[98|[62]]]]]]]])
		    in  let <_cor5> =
			    %% Line 529
			    [32|_cor4]
			in  let <_cor6> =
				%% Line 528
				call 'erlang':'++'
				    (_cor0, _cor5)
			    in  let <_cor7> =
				    %% Line 528
				    call 'erlang':'++'
					([34|[62|[60|[98|[62|[42|[42|[42|[32]]]]]]]]], _cor6)
				in  let <_cor9> =
					%% Line 528
					call 'erlang':'++'
					    (_cor8, _cor7)
				    in  %% Line 528
					call 'erlang':'++'
					    ([10|[60|[100|[105|[118|[32|[99|[108|[97|[115|[115|[61|[34]]]]]]]]]]]]], _cor9)
'div_footer'/0 =
    %% Line 530
    fun () ->
	%% Line 531
	[60|[47|[100|[105|[118|[62]]]]]]
'maybe_log_timestamp'/0 =
    %% Line 534
    fun () ->
	%% Line 535
	case call 'erlang':'now'
		 () of
	  <{MS,S,US}> when 'true' ->
	      %% Line 536
	      case call 'erlang':'get'
		       ('log_timestamp') of
		%% Line 537
		<{_cor5,_cor6,_cor7}>
		    when let <_cor8> =
			  call 'erlang':'=:='
			      (_cor5, MS)
		      in  let <_cor9> =
			      call 'erlang':'=:='
				  (_cor6, S)
			  in  call 'erlang':'and'
				  (_cor8, _cor9) ->
		    %% Line 538
		    'ok'
		%% Line 539
		<_cor10> when 'true' ->
		    let <_cor3> =
			%% Line 540
			call 'erlang':'self'
			    ()
		    in  let <_cor2> =
			    %% Line 540
			    call 'erlang':'group_leader'
				()
			in  let <_cor1> =
				%% Line 541
				apply 'log_timestamp'/1
				    ({MS,S,US})
			    in  %% Line 540
				apply 'cast'/1
				    ({'log','sync',_cor3,_cor2,'ct_internal',99,%% Line 541
										[{[60|[105|[62|[126|[115|[60|[47|[105|[62]]]]]]]]],[_cor1|[]]}|[]]})
	      end
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor0})
	    -| ['compiler_generated'] )
	end
'log_timestamp'/1 =
    %% Line 544
    fun (_cor0) ->
	case _cor0 of
	  <{MS,S,US}> when 'true' ->
	      do  %% Line 545
		  call 'erlang':'put'
		      ('log_timestamp', {MS,S,US})
		  %% Line 546
		  case %% Line 547
		       call 'calendar':'now_to_local_time'
			   ({MS,S,US}) of
		    <{{Year,Month,Day},{Hour,Min,Sec}}> when 'true' ->
			let <_cor2> =
			    %% Line 548
			    call 'erlang':'/'
				(US, 1000)
			in  let <MilliSec> =
				%% Line 548
				call 'erlang':'trunc'
				    (_cor2)
			    in  let <_cor4> =
				    %% Line 549
				    call 'io_lib':'format'
					([126|[52|[46|[49|[48|[46|[48|[66|[45|[126|[50|[46|[49|[48|[46|[48|[66|[45|[126|[50|[46|[49|[48|[46|[48|[66|[32|[126|[50|[46|[49|[48|[46|[48|[66|[58|[126|[50|[46|[49|[48|[46|[48|[66|[58|[126|[50|[46|[49|[48|[46|[48|[66|[46|[126|[51|[46|[49|[48|[46|[48|[66]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 551
																																												       [Year|[Month|[Day|[Hour|[Min|[Sec|[MilliSec|[]]]]]]]])
				in  %% Line 549
				    call 'lists':'flatten'
					(_cor4)
		    ( <_cor1> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor1})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'log_timestamp',1}}] )
	    -| ['compiler_generated'] )
	end
'logger'/3 =
    %% Line 564
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 565
	    call 'erlang':'self'
		()
	in  do  %% Line 565
		call 'erlang':'register'
		    ('ct_logs', _cor3)
		let <Time0> =
		    %% Line 569
		    call 'calendar':'local_time'
			()
		in  let <Dir0> =
			%% Line 570
			apply 'make_dirname'/1
			    (Time0)
		    in  let <Time,Dir> =
			    %% Line 572
			    case call 'filelib':'is_dir'
				     (Dir0) of
			      %% Line 573
			      <'true'> when 'true' ->
				  do  %% Line 574
				      call 'timer':'sleep'
					  (1000)
				      let <Time1> =
					  %% Line 575
					  call 'calendar':'local_time'
					      ()
				      in  let <Dir1> =
					      %% Line 576
					      apply 'make_dirname'/1
						  (Time1)
					  in  %% Line 577
					      <Time1,Dir1>
			      %% Line 578
			      <'false'> when 'true' ->
				  %% Line 579
				  <Time0,Dir0>
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor8})
				-| ['compiler_generated'] )
			    end
			in  do  %% Line 583
				call 'file':'make_dir'
				    (Dir)
				let <AbsDir> =
				    %% Line 584
				    call 'filename':'absname'
					(Dir)
				in  do  %% Line 585
					call 'erlang':'put'
					    ('ct_run_dir', AbsDir)
					do  %% Line 587
					    case apply 'basic_html'/0
						     () of
					      %% Line 588
					      <'true'> when 'true' ->
						  %% Line 589
						  call 'erlang':'put'
						      ('basic_html', 'true')
					      %% Line 590
					      <BasicHtml> when 'true' ->
						  do  %% Line 591
						      call 'erlang':'put'
							  ('basic_html', BasicHtml)
						      %% Line 594
						      case call 'file':'get_cwd'
							       () of
							<{'ok',Cwd}> when 'true' ->
							    let <CTPath> =
								%% Line 595
								call 'code':'lib_dir'
								    ('common_test')
							    in  let <_cor21> =
								    %% Line 597
								    ( letrec
									  'lc$^0'/1 =
									      fun (_cor17) ->
										  case _cor17 of
										    <[%% Line 598
										      F|_cor16]> when 'true' ->
											let <_cor18> =
											    call 'filename':'join'
												(CTPath, [112|[114|[105|[118]]]])
											in  let <_cor19> =
												call 'filename':'join'
												    (_cor18, F)
											    in  let <_cor20> =
												    %% Line 598
												    apply 'lc$^0'/1
													(_cor16)
												in  ( [_cor19|_cor20]
												      -| ['compiler_generated'] )
										    <[]> when 'true' ->
											[]
										    ( <_cor17> when 'true' ->
											  ( primop 'match_fail'
												({'function_clause',_cor17})
											    -| [{'function_name',{'lc$^0',1}}] )
										      -| ['compiler_generated'] )
										  end
								      in  apply 'lc$^0'/1
									      ([[99|[116|[95|[100|[101|[102|[97|[117|[108|[116|[46|[99|[115|[115]]]]]]]]]]]]]]|[[106|[113|[117|[101|[114|[121|[45|[108|[97|[116|[101|[115|[116|[46|[106|[115]]]]]]]]]]]]]]]]|[[106|[113|[117|[101|[114|[121|[46|[116|[97|[98|[108|[101|[115|[111|[114|[116|[101|[114|[46|[109|[105|[110|[46|[106|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]])
								      -| ['list_comprehension'] )
								in  let <_cor28> =
									%% Line 599
									( letrec
									      'lc$^1'/1 =
										  fun (_cor25) ->
										      case _cor25 of
											<[F|_cor24]> when 'true' ->
											    let <_cor26> =
												call 'filename':'join'
												    (Cwd, F)
											    in  let <_cor27> =
												    apply 'lc$^1'/1
													(_cor24)
												in  ( [_cor26|_cor27]
												      -| ['compiler_generated'] )
											<[]> when 'true' ->
											    []
											( <_cor25> when 'true' ->
											      ( primop 'match_fail'
												    ({'function_clause',_cor25})
												-| [{'function_name',{'lc$^1',1}}] )
											  -| ['compiler_generated'] )
										      end
									  in  apply 'lc$^1'/1
										  ([[99|[116|[95|[100|[101|[102|[97|[117|[108|[116|[46|[99|[115|[115]]]]]]]]]]]]]]|[[106|[113|[117|[101|[114|[121|[45|[108|[97|[116|[101|[115|[116|[46|[106|[115]]]]]]]]]]]]]]]]|[[106|[113|[117|[101|[114|[121|[46|[116|[97|[98|[108|[101|[115|[111|[114|[116|[101|[114|[46|[109|[105|[110|[46|[106|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]])
									  -| ['list_comprehension'] )
								    in  let <_cor35> =
									    %% Line 600
									    ( letrec
										  'lc$^2'/1 =
										      fun (_cor32) ->
											  case _cor32 of
											    <[F|_cor31]> when 'true' ->
												let <_cor33> =
												    call 'filename':'join'
													(AbsDir, F)
												in  let <_cor34> =
													apply 'lc$^2'/1
													    (_cor31)
												    in  ( [_cor33|_cor34]
													  -| ['compiler_generated'] )
											    <[]> when 'true' ->
												[]
											    ( <_cor32> when 'true' ->
												  ( primop 'match_fail'
													({'function_clause',_cor32})
												    -| [{'function_name',{'lc$^2',1}}] )
											      -| ['compiler_generated'] )
											  end
									      in  apply 'lc$^2'/1
										      ([[99|[116|[95|[100|[101|[102|[97|[117|[108|[116|[46|[99|[115|[115]]]]]]]]]]]]]]|[[106|[113|[117|[101|[114|[121|[45|[108|[97|[116|[101|[115|[116|[46|[106|[115]]]]]]]]]]]]]]]]|[[106|[113|[117|[101|[114|[121|[46|[116|[97|[98|[108|[101|[115|[111|[114|[116|[101|[114|[46|[109|[105|[110|[46|[106|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]])
									      -| ['list_comprehension'] )
									in  %% Line 601
									    case apply 'copy_priv_files'/2
										     (_cor21, _cor28) of
									      %% Line 602
									      <{'error',Src1,Dest1,Reason1}> when 'true' ->
										  do  %% Line 603
										      call 'io':'format'
											  ('user', [69|[82|[82|[79|[82|[33|[32|[80|[114|[105|[118|[32|[102|[105|[108|[101|[32|[126|[112|[32|[99|[111|[117|[108|[100|[32|[110|[111|[116|[32|[98|[101|[32|[99|[111|[112|[105|[101|[100|[32|[116|[111|[32|[126|[112|[46|[32|[82|[101|[97|[115|[111|[110|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 606
																																																					     [Src1|[Dest1|[Reason1|[]]]])
										      %% Line 607
										      call 'erlang':'exit'
											  ({'priv_file_error',Dest1})
									      %% Line 608
									      <'ok'> when 'true' ->
										  %% Line 609
										  case apply 'copy_priv_files'/2
											   (_cor21, _cor35) of
										    %% Line 610
										    <{'error',Src2,Dest2,Reason2}> when 'true' ->
											do  %% Line 611
											    call 'io':'format'
												('user', [69|[82|[82|[79|[82|[33|[32|[80|[114|[105|[118|[32|[102|[105|[108|[101|[32|[126|[112|[32|[99|[111|[117|[108|[100|[32|[110|[111|[116|[32|[98|[101|[32|[99|[111|[112|[105|[101|[100|[32|[116|[111|[32|[126|[112|[46|[32|[82|[101|[97|[115|[111|[110|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 615
																																																						   [Src2|[Dest2|[Reason2|[]]]])
											    %% Line 616
											    call 'erlang':'exit'
												({'priv_file_error',Dest2})
										    %% Line 617
										    <'ok'> when 'true' ->
											'ok'
										    ( <_cor41> when 'true' ->
											  primop 'match_fail'
											      ({'case_clause',_cor41})
										      -| ['compiler_generated'] )
										  end
									      ( <_cor42> when 'true' ->
										    primop 'match_fail'
											({'case_clause',_cor42})
										-| ['compiler_generated'] )
									    end
							( <_cor12> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor12})
							  -| ['compiler_generated'] )
						      end
					    end
					    do  %% Line 623
						call 'test_server_io':'start_link'
						    ()
						let <MiscIoName> =
						    %% Line 624
						    call 'filename':'join'
							(Dir, [109|[105|[115|[99|[95|[105|[111|[46|[108|[111|[103|[46|[104|[116|[109|[108]]]]]]]]]]]]]]]])
						in  %% Line 625
						    case call 'file':'open'
							     (MiscIoName, %% Line 626
									  ['write'|[{'encoding','utf8'}]]) of
						      <{'ok',MiscIoFd}> when 'true' ->
							  do  %% Line 627
							      call 'test_server_io':'set_fd'
								  ('unexpected_io', MiscIoFd)
							      let <MiscIoHeader,MiscIoFooter> =
								  %% Line 630
								  case apply 'get_ts_html_wrapper'/6
									   ([80|[114|[101|[47|[112|[111|[115|[116|[45|[116|[101|[115|[116|[32|[73|[47|[79|[32|[108|[111|[103]]]]]]]]]]]]]]]]]]]]], Dir, 'false', %% Line 631
																										 Dir, %% Line 631
																										      'undefined', %% Line 631
																												   'utf8') of
								    %% Line 632
								    <{'basic_html',UH,UF}> when 'true' ->
									%% Line 633
									<UH,UF>
								    %% Line 634
								    <{'xhtml',UH,UF}> when 'true' ->
									%% Line 635
									<UH,UF>
								    ( <_cor46> when 'true' ->
									  primop 'match_fail'
									      ({'case_clause',_cor46})
								      -| ['compiler_generated'] )
								  end
							      in  let <_cor49> =
								      %% Line 640
								      apply 'xhtml'/2
									  ([60|[98|[114|[62|[10|[60|[104|[50|[62|[80|[114|[101|[45|[116|[101|[115|[116|[32|[76|[111|[103|[60|[47|[104|[50|[62]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 641
																											 [60|[98|[114|[32|[47|[62|[10|[60|[104|[51|[62|[80|[82|[69|[45|[84|[69|[83|[84|[32|[76|[79|[71|[60|[47|[104|[51|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]])
								  in  do  %% Line 637
									  call 'io':'put_chars'
									      (MiscIoFd, %% Line 638
											 [MiscIoHeader|%% Line 639
												       [[60|[97|[32|[110|[97|[109|[101|[61|[34|[112|[114|[101|[116|[101|[115|[116|[34|[62|[60|[47|[97|[62|[10]]]]]]]]]]]]]]]]]]]]]]]|%% Line 640
																												     [_cor49|%% Line 642
																													     [[10|[60|[112|[114|[101|[62|[10]]]]]]]]]]])
									  let <_cor50> =
									      %% Line 645
									      apply 'xhtml'/2
										  ([60|[47|[112|[114|[101|[62|[10|[60|[98|[114|[62|[60|[104|[50|[62|[80|[111|[115|[116|[45|[116|[101|[115|[116|[32|[76|[111|[103|[60|[47|[104|[50|[62|[10|[60|[112|[114|[101|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 646
																																					      [60|[47|[112|[114|[101|[62|[10|[60|[98|[114|[32|[47|[62|[10|[60|[104|[51|[62|[80|[79|[83|[84|[45|[84|[69|[83|[84|[32|[76|[79|[71|[60|[47|[104|[51|[62|[10|[60|[112|[114|[101|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
									  in  let <MiscIoDivider> =
										  %% Line 644
										  call 'erlang':'++'
										      ([10|[60|[97|[32|[110|[97|[109|[101|[61|[34|[112|[111|[115|[116|[116|[101|[115|[116|[34|[62|[60|[47|[97|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]], _cor50)
									      in  let <_cor52> =
										      %% Line 647
										      call 'filename':'absname'
											  (MiscIoName)
										  in  do  %% Line 647
											  call 'ct_util':'set_testdata_async'
											      ({'misc_io_log',{_cor52,%% Line 648
														      MiscIoDivider,%% Line 648
																    MiscIoFooter}})
											  let <_cor53> =
											      %% Line 650
											      call 'erlang':'node'
												  ()
											  in  do  %% Line 650
												  call 'ct_event':'notify'
												      ({'event','start_logging',_cor53,%% Line 651
																       AbsDir})
												  do  %% Line 652
												      apply 'make_all_runs_index'/1
													  ('start')
												      do  %% Line 653
													  apply 'make_all_suites_index'/1
													      ('start')
													  do  %% Line 654
													      case _cor1 of
														%% Line 655
														<'interactive'> when 'true' ->
														    apply 'interactive_link'/0
															()
														%% Line 656
														<_cor73> when 'true' ->
														    'ok'
													      end
													      do  %% Line 658
														  call 'file':'set_cwd'
														      (Dir)
														  do  %% Line 659
														      apply 'make_last_run_index'/1
															  (Time)
														      let <CtLogFd> =
															  %% Line 660
															  apply 'open_ctlog'/1
															      ([109|[105|[115|[99|[95|[105|[111|[46|[108|[111|[103|[46|[104|[116|[109|[108]]]]]]]]]]]]]]]])
														      in  let <_cor59> =
															      %% Line 661
															      apply 'int_header'/0
																  ()
															  in  let <_cor58> =
																  %% Line 661
																  apply 'int_footer'/0
																      ()
															      in  let <_cor60> =
																      %% Line 661
																      call 'erlang':'++'
																	  (_cor59, _cor58)
																  in  let <_cor56> =
																	  %% Line 662
																	  call 'erlang':'now'
																	      ()
																      in  let <_cor57> =
																	      %% Line 662
																	      apply 'log_timestamp'/1
																		  (_cor56)
																	  in  do  %% Line 661
																		  call 'io':'format'
																		      (CtLogFd, _cor60, %% Line 662
																					[_cor57|[[67|[111|[109|[109|[111|[110|[32|[84|[101|[115|[116|[32|[76|[111|[103|[103|[101|[114|[32|[115|[116|[97|[114|[116|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]])
																		  let <_cor62> =
																		      %% Line 663
																		      call 'erlang':'self'
																			  ()
																		  in  let <_cor61> =
																			  %% Line 663
																			  call 'filename':'absname'
																			      ([])
																		      in  do  %% Line 663
																			      call 'erlang':'!'
																				  (_cor2, {'started',_cor62,{Time,_cor61}})
																			      do  %% Line 664
																				  apply 'set_evmgr_gl'/1
																				      (CtLogFd)
																				  do  %% Line 667
																				      call 'io':'format'
																					  (CtLogFd, [10|[86|[69|[82|[66|[79|[83|[73|[84|[89|[32|[76|[69|[86|[69|[76|[83|[58|[10]]]]]]]]]]]]]]]]]]], [])
																				      do  %% Line 668
																					  case call 'proplists':'get_value'
																						   ('$unspecified', _cor0) of
																					    %% Line 669
																					    <'undefined'> when 'true' ->
																						'ok'
																					    %% Line 670
																					    <GenLvl> when 'true' ->
																						call 'io':'format'
																						    (CtLogFd, [126|[45|[50|[53|[115|[126|[51|[119|[126|[110]]]]]]]]]], %% Line 671
																														       [[103|[101|[110|[101|[114|[97|[108|[32|[108|[101|[118|[101|[108]]]]]]]]]]]]]|[GenLvl|[]]])
																					  end
																					  do  %% Line 673
																					      ( letrec
																						    'lc$^3'/1 =
																							fun (_cor66) ->
																							    case _cor66 of
																							      <[%% Line 679
																								{Cat,VLvl}|_cor65]> when 'true' ->
																								  do  call 'erlang':'put'
																									  ({'verbosity',Cat}, VLvl)
																								      do  %% Line 674
																									  case <> of
																									    <>
																										when call 'erlang':'=:='
																										      (Cat,
																										       '$unspecified') ->
																										'ok'
																									    %% Line 676
																									    <> when 'true' ->
																										%% Line 677
																										call 'io':'format'
																										    (CtLogFd, [126|[45|[50|[53|[119|[126|[51|[119|[126|[110]]]]]]]]]], [Cat|[VLvl|[]]])
																									  end
																									  %% Line 679
																									  apply 'lc$^3'/1
																									      (_cor65)
																							      ( <[_cor64|_cor65]> when 'true' ->
																								    %% Line 679
																								    apply 'lc$^3'/1
																									(_cor65)
																								-| ['compiler_generated'] )
																							      <[]> when 'true' ->
																								  []
																							      ( <_cor66> when 'true' ->
																								    ( primop 'match_fail'
																									  ({'function_clause',_cor66})
																								      -| [{'function_name',{'lc$^3',1}}] )
																								-| ['compiler_generated'] )
																							    end
																						in  apply 'lc$^3'/1
																							(_cor0)
																						-| ['list_comprehension'] )
																					      do  %% Line 680
																						  call 'io':'nl'
																						      (CtLogFd)
																						  let <_cor69> =
																						      %% Line 685
																						      call 'erlang':'group_leader'
																							  ()
																						  in  %% Line 682
																						      apply 'logger_loop'/1
																							  ({'logger_state',_cor2,%% Line 683
																										 AbsDir,%% Line 684
																											Time,_cor69,%% Line 686
																												    CtLogFd,%% Line 687
																													    [],'undefined',%% Line 688
																															   []})
						      ( <_cor45> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor45})
							-| ['compiler_generated'] )
						    end
'copy_priv_files'/2 =
    %% Line 690
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[SrcF|SrcFs],[DestF|DestFs]> when 'true' ->
	      %% Line 691
	      case call 'file':'copy'
		       (SrcF, DestF) of
		%% Line 692
		<{'error',Reason}> when 'true' ->
		    %% Line 693
		    {'error',SrcF,DestF,Reason}
		%% Line 694
		<_cor5> when 'true' ->
		    %% Line 695
		    apply 'copy_priv_files'/2
			(SrcFs, DestFs)
	      end
	  %% Line 697
	  <[],[]> when 'true' ->
	      %% Line 698
	      'ok'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'copy_priv_files',2}}] )
	    -| ['compiler_generated'] )
	end
'logger_loop'/1 =
    %% Line 700
    fun (_cor0) ->
	%% Line 701
	receive
	  %% Line 702
	  <{'log',SyncOrAsync,Pid,GL,Category,Importance,List}> when 'true' ->
	      let <_cor3> =
		  %% Line 703
		  case Category of
		    %% Line 704
		    <'ct_internal'> when 'true' ->
			%% Line 705
			100
		    %% Line 706
		    <_cor92> when 'true' ->
			%% Line 707
			case call 'erlang':'get'
				 ({'verbosity',Category}) of
			  %% Line 708
			  <'undefined'> when 'true' ->
			      call 'erlang':'get'
				  ({'verbosity','$unspecified'})
			  %% Line 709
			  <Val> when 'true' ->
			      Val
			end
		  end
	      in  %% Line 712
		  case <> of
		    <>
			when try
			      let <_cor5> =
				  call 'erlang':'-'
				      (100, _cor3)
			      in  call 'erlang':'>='
				      (Importance, _cor5)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			%% Line 713
			case apply 'get_groupleader'/3
				 (Pid, GL, _cor0) of
			  %% Line 714
			  <{'tc_log',TCGL,TCGLs}> when 'true' ->
			      %% Line 715
			      case call 'erlang':'is_process_alive'
				       (TCGL) of
				%% Line 716
				<'true'> when 'true' ->
				    let <State1> =
					%% Line 717
					apply 'print_to_log'/6
					    (SyncOrAsync, Pid, %% Line 718
							       Category, %% Line 719
									 TCGL, %% Line 719
									       List, _cor0)
				    in  %% Line 721
					case State1 of
					  <{'logger_state',_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100}> when 'true' ->
					      let <_cor9> =
						  call 'erlang':'setelement'
						      (7, State1, TCGLs)
					      in  apply 'logger_loop'/1
						      (_cor9)
					  ( <_cor101> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','logger_state'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
				%% Line 722
				<'false'> when 'true' ->
				    do  %% Line 725
					apply 'unexpected_io'/5
					    (Pid, Category, Importance, %% Line 726
									List, _cor0)
					%% Line 727
					apply 'logger_loop'/1
					    (_cor0)
				( <_cor10> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor10})
				  -| ['compiler_generated'] )
			      end
			  %% Line 729
			  <{'ct_log',_X_Fd,TCGLs}> when 'true' ->
			      do  %% Line 733
				  apply 'unexpected_io'/5
				      (Pid, Category, Importance, List, _cor0)
				  %% Line 735
				  case _cor0 of
				    <{'logger_state',_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109}> when 'true' ->
					let <_cor13> =
					    call 'erlang':'setelement'
						(7, _cor0, TCGLs)
					in  apply 'logger_loop'/1
						(_cor13)
				    ( <_cor110> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','logger_state'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			  ( <_cor14> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor14})
			    -| ['compiler_generated'] )
			end
		    %% Line 737
		    <> when 'true' ->
			%% Line 738
			apply 'logger_loop'/1
			    (_cor0)
		  end
	  %% Line 740
	  <{{'init_tc',TCPid,GL,RefreshLog},From}> when 'true' ->
	      let <_cor15> =
		  %% Line 743
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 743
		      call 'test_server':'permit_io'
			  (GL, _cor15)
		      %% Line 744
		      ( case _cor0 of
			  ( <( {'logger_state',_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_rec2,_cor117}
			       -| ['compiler_generated'] )> when 'true' ->
				do  apply 'print_style'/2
					(GL, _rec2)
				    do  %% Line 745
					apply 'set_evmgr_gl'/1
					    (GL)
					let <TCGLs> =
					    %% Line 746
					    apply 'add_tc_gl'/3
						(TCPid, GL, _cor0)
					in  do  %% Line 747
						case <> of
						  <>
						      when let <_cor19> =
							    call 'erlang':'=:='
								(RefreshLog, 'false')
							in  let <_cor20> =
								call 'erlang':'is_boolean'
								    (RefreshLog)
							    in  call 'erlang':'and'
								    (_cor19, _cor20) ->
						      'ok'
						  %% Line 749
						  <> when 'true' ->
						      %% Line 750
						      apply 'make_last_run_index'/1
							  (_cor113)
						end
						do  %% Line 752
						    apply 'return'/2
							(From, 'ok')
						    let <_cor25> =
							%% Line 753
							call 'erlang':'setelement'
							    (7, _cor0, TCGLs)
						    in  %% Line 753
							apply 'logger_loop'/1
							    (_cor25)
			    -| ['compiler_generated'] )
			  ( <_cor118> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','logger_state'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  %% Line 754
	  <{{'end_tc',TCPid},From}> when 'true' ->
	      %% Line 755
	      ( case _cor0 of
		  ( <( {'logger_state',_cor136,_cor137,_cor138,_cor139,_rec5,_cor140,_cor141,_cor142}
		       -| ['compiler_generated'] )> when 'true' ->
			do  apply 'set_evmgr_gl'/1
				(_rec5)
			    do  %% Line 756
				apply 'return'/2
				    (From, 'ok')
				let <_rec6> =
				    %% Line 758
				    apply 'rm_tc_gl'/2
					(TCPid, _cor0)
				in  let <_cor31> =
					%% Line 757
					call 'erlang':'setelement'
					    (7, _cor0, _rec6)
				    in  %% Line 757
					apply 'logger_loop'/1
					    (_cor31)
		    -| ['compiler_generated'] )
		  ( <_cor143> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','logger_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 759
	  <{{'get_log_dir','true'},From}> when 'true' ->
	      %% Line 760
	      ( case _cor0 of
		  ( <( {'logger_state',_cor153,_rec8,_cor154,_cor155,_cor156,_cor157,_cor158,_cor159}
		       -| ['compiler_generated'] )> when 'true' ->
			do  apply 'return'/2
				(From, {'ok',_rec8})
			    %% Line 761
			    apply 'logger_loop'/1
				(_cor0)
		    -| ['compiler_generated'] )
		  ( <_cor160> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','logger_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 762
	  <{{'get_log_dir','false'},From}> when 'true' ->
	      %% Line 763
	      ( case _cor0 of
		  ( <( {'logger_state',_cor161,_rec9,_cor162,_cor163,_cor164,_cor165,_cor166,_cor167}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor36> =
			    call 'filename':'basename'
				(_rec9)
			in  do  apply 'return'/2
				    (From, {'ok',_cor36})
				%% Line 764
				apply 'logger_loop'/1
				    (_cor0)
		    -| ['compiler_generated'] )
		  ( <_cor168> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','logger_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 765
	  <{'make_last_run_index',From}> when 'true' ->
	      %% Line 766
	      ( case _cor0 of
		  ( <( {'logger_state',_cor169,_cor170,_rec10,_cor171,_cor172,_cor173,_cor174,_cor175}
		       -| ['compiler_generated'] )> when 'true' ->
			do  apply 'make_last_run_index'/1
				(_rec10)
			    let <_cor39> =
				%% Line 767
				call 'erlang':'get'
				    ('ct_log_cache')
			    in  do  %% Line 767
				    apply 'return'/2
					(From, _cor39)
				    %% Line 768
				    apply 'logger_loop'/1
					(_cor0)
		    -| ['compiler_generated'] )
		  ( <_cor176> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','logger_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 769
	  <{'set_stylesheet',_cor177,SSFile}>
	      when ( try
		      ( case <> of
			  ( <>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_record'
									 -| ['compiler_generated'] )
					(_cor0,
					 ( 'logger_state'
					   -| ['compiler_generated'] ),
					 ( 9
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] ) ->
				let <_cor44> =
				    ( call 'erlang':'element'
					  (8, _cor0)
				      -| ['compiler_generated'] )
				in  ( call 'erlang':'=='
					  (_cor44, %% Line 770
						   SSFile)
				      -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				'false'
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 771
	      apply 'logger_loop'/1
		  (_cor0)
	  %% Line 772
	  <{'set_stylesheet',TC,SSFile}> when 'true' ->
	      %% Line 773
	      ( case _cor0 of
		  ( <( {'logger_state',_cor178,_cor179,_cor180,_cor181,_rec11,_cor182,_cor183,_cor184}
		       -| ['compiler_generated'] )> when 'true' ->
			do  %% Line 774
			    call 'io':'format'
				(_rec11, [126|[112|[32|[108|[111|[97|[100|[105|[110|[103|[32|[101|[120|[116|[101|[114|[110|[97|[108|[32|[115|[116|[121|[108|[101|[32|[115|[104|[101|[101|[116|[58|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 775
																																      [TC|[SSFile|[]]])
			    let <_cor51> =
				%% Line 776
				call 'erlang':'setelement'
				    (8, _cor0, SSFile)
			    in  %% Line 776
				apply 'logger_loop'/1
				    (_cor51)
		    -| ['compiler_generated'] )
		  ( <_cor185> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','logger_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 777
	  <{'clear_stylesheet',_cor195}>
	      when ( try
		      ( case <> of
			  ( <>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_record'
									 -| ['compiler_generated'] )
					(_cor0,
					 ( 'logger_state'
					   -| ['compiler_generated'] ),
					 ( 9
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] ) ->
				let <_cor56> =
				    ( call 'erlang':'element'
					  (8, _cor0)
				      -| ['compiler_generated'] )
				in  ( call 'erlang':'=:='
					  (_cor56, 'undefined')
				      -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				'false'
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 778
	      apply 'logger_loop'/1
		  (_cor0)
	  %% Line 779
	  <{'clear_stylesheet',_cor196}> when 'true' ->
	      %% Line 780
	      case _cor0 of
		<{'logger_state',_cor197,_cor198,_cor199,_cor200,_cor201,_cor202,_cor203,_cor204}> when 'true' ->
		    let <_cor60> =
			call 'erlang':'setelement'
			    (8, _cor0, 'undefined')
		    in  apply 'logger_loop'/1
			    (_cor60)
		( <_cor205> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','logger_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 781
	  <{'ct_log',List}> when 'true' ->
	      %% Line 782
	      ( case _cor0 of
		  ( <( {'logger_state',_cor206,_cor207,_cor208,_cor209,_rec14,_cor210,_cor211,_cor212}
		       -| ['compiler_generated'] )> when 'true' ->
			do  %% Line 783
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor66) ->
					  case _cor66 of
					    <[%% Line 784
					      {Str,Args}|_cor65]> when 'true' ->
						do  call 'io':'format'
							(_rec14, Str, Args)
						    do  call 'io':'nl'
							    (_rec14)
							%% Line 784
							apply 'lc$^0'/1
							    (_cor65)
					    ( <[_cor64|_cor65]> when 'true' ->
						  %% Line 784
						  apply 'lc$^0'/1
						      (_cor65)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor66> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor66})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (%% Line 784
				       List)
			      -| ['list_comprehension'] )
			    %% Line 785
			    apply 'logger_loop'/1
				(_cor0)
		    -| ['compiler_generated'] )
		  ( <_cor213> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','logger_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 786
	  <{'DOWN',Ref,_cor214,_X_Pid,_cor215}> when 'true' ->
	      %% Line 790
	      ( case _cor0 of
		  ( <( {'logger_state',_cor216,_cor217,_cor218,_cor219,_cor220,_cor221,_cor222,_rec15}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'lists':'delete'
				 (Ref, _rec15) of
			  %% Line 791
			  <[]> when 'true' ->
			      let <_cor73> =
				  %% Line 792
				  call 'erlang':'setelement'
				      (9, _cor0, [])
			      in  %% Line 792
				  apply 'logger_loop'/1
				      (_cor73)
			  %% Line 793
			  <Jobs> when 'true' ->
			      %% Line 794
			      case call 'lists':'reverse'
				       (Jobs) of
				<[Next|JobsRev]> when 'true' ->
				    let <_cor75> =
					%% Line 795
					apply 'print_next'/1
					    (Next)
				    in  let <_cor76> =
					    %% Line 795
					    call 'lists':'reverse'
						(JobsRev)
					in  let <Jobs1> =
						%% Line 795
						[_cor75|_cor76]
					    in  let <_cor80> =
						    %% Line 796
						    call 'erlang':'setelement'
							(9, _cor0, Jobs1)
						in  %% Line 796
						    apply 'logger_loop'/1
							(_cor80)
				( <_cor74> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor74})
				  -| ['compiler_generated'] )
			      end
			end
		    -| ['compiler_generated'] )
		  ( <_cor223> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','logger_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 798
	  <'stop'> when 'true' ->
	      %% Line 799
	      ( case _cor0 of
		  ( <( {'logger_state',_cor242,_cor243,_cor244,_cor245,_rec18,_cor246,_cor247,_cor248}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor85> =
			    %% Line 800
			    apply 'int_header'/0
				()
			in  let <_cor84> =
				%% Line 800
				apply 'int_footer'/0
				    ()
			    in  let <_cor86> =
				    %% Line 800
				    call 'erlang':'++'
					(_cor85, _cor84)
				in  let <_cor82> =
					%% Line 801
					call 'erlang':'now'
					    ()
				    in  let <_cor83> =
					    %% Line 801
					    apply 'log_timestamp'/1
						(_cor82)
					in  do  call 'io':'format'
						    (_rec18, _cor86, %% Line 801
								     [_cor83|[[67|[111|[109|[109|[111|[110|[32|[84|[101|[115|[116|[32|[76|[111|[103|[103|[101|[114|[32|[102|[105|[110|[105|[115|[104|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
						do  %% Line 802
						    apply 'close_ctlog'/1
							(_rec18)
						    %% Line 803
						    'ok'
		    -| ['compiler_generated'] )
		  ( <_cor249> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','logger_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	after 'infinity' ->
	  'true'
'create_io_fun'/2 =
    %% Line 806
    fun (_cor1,_cor0) ->
	%% Line 811
	( case _cor0 of
	    ( <( {'logger_state',_cor13,_cor14,_cor15,_cor16,_rec20,_cor17,_cor18,_cor19}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 812
		  ( fun (_cor8,_cor7) ->
			case <_cor8,_cor7> of
			  <{Str,Args},IoList> when 'true' ->
			      let <_cor5> =
				  catch
				      %% Line 813
				      call 'io_lib':'format'
					  (Str, Args)
			      in  %% Line 813
				  case _cor5 of
				    %% Line 814
				    <{'EXIT',_X_Reason}> when 'true' ->
					do  %% Line 815
					    call 'io':'format'
						(_rec20, [76|[111|[103|[103|[105|[110|[103|[32|[102|[97|[105|[108|[115|[33|[32|[83|[116|[114|[58|[32|[126|[112|[44|[32|[65|[114|[103|[115|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 816
																															 [Str|[Args|[]]])
					    do  %% Line 818
						call 'erlang':'exit'
						    (_cor1, {'log_printout_error',Str,Args})
						%% Line 819
						[]
				    %% Line 820
				    <IoStr>
					when call 'erlang':'=:='
					      (IoList,
					       []) ->
					%% Line 821
					[IoStr|[]]
				    %% Line 822
				    <IoStr> when 'true' ->
					%% Line 823
					[IoList|[[10]|[IoStr|[]]]]
				  end
			  ( <_cor10,_cor9> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor10,_cor9})
				  -| [{'function_name',{'-create_io_fun/2-fun-0-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-create_io_fun/2-fun-0-'}}] )
	      -| ['compiler_generated'] )
	    ( <_cor20> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','logger_state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'print_to_log'/6 =
    %% Line 827
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <'sync',FromPid,Category,TCGL,List,State> when 'true' ->
	      do  %% Line 830
		  case <> of
		    <>
			when call 'erlang':'/='
			      (FromPid,
			       TCGL) ->
			let <IoFun> =
			    %% Line 831
			    apply 'create_io_fun'/2
				(FromPid, State)
			in  let <_cor7> =
				%% Line 832
				call 'lists':'foldl'
				    (IoFun, [], List)
			    in  %% Line 832
				call 'io':'format'
				    (TCGL, [126|[116|[115]]], [_cor7|[]])
		    %% Line 833
		    <> when 'true' ->
			%% Line 834
			apply 'unexpected_io'/5
			    (FromPid, Category, 99, List, State)
		  end
		  %% Line 836
		  State
	  %% Line 838
	  <'async',FromPid,Category,TCGL,List,State> when 'true' ->
	      let <_cor11> =
		  %% Line 842
		  case <> of
		    <>
			when call 'erlang':'/='
			      (FromPid,
			       TCGL) ->
			let <IoFun> =
			    %% Line 843
			    apply 'create_io_fun'/2
				(FromPid, State)
			in  %% Line 844
			    ( fun () ->
				  let <_cor9> =
				      %% Line 845
				      call 'erlang':'self'
					  ()
				  in  do  %% Line 845
					  call 'test_server':'permit_io'
					      (TCGL, _cor9)
					  let <_cor10> =
					      %% Line 846
					      call 'lists':'foldl'
						  (IoFun, [], List)
					  in  %% Line 846
					      call 'io':'format'
						  (TCGL, [126|[116|[115]]], [_cor10|[]])
			      -| [{'id',{0,0,'-print_to_log/6-fun-0-'}}] )
		    %% Line 848
		    <> when 'true' ->
			%% Line 849
			( fun () ->
			      %% Line 850
			      apply 'unexpected_io'/5
				  (FromPid, Category, 99, %% Line 851
							  List, %% Line 851
								State)
			  -| [{'id',{0,0,'-print_to_log/6-fun-1-'}}] )
		  end
	      in  %% Line 854
		  ( case State of
		      ( <( {'logger_state',_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_rec21}
			   -| ['compiler_generated'] )> when 'true' ->
			    case _rec21 of
			      %% Line 855
			      <[]> when 'true' ->
				  %% Line 856
				  case call 'erlang':'spawn_monitor'
					   (_cor11) of
				    <{_X_Pid,Ref}> when 'true' ->
					let <_rec22> =
					    %% Line 857
					    [Ref|[]]
					in  %% Line 857
					    call 'erlang':'setelement'
						(9, State, _rec22)
				    ( <_cor15> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor15})
				      -| ['compiler_generated'] )
				  end
			      %% Line 858
			      <Queue> when 'true' ->
				  let <_rec24> =
				      %% Line 859
				      [_cor11|Queue]
				  in  %% Line 859
				      call 'erlang':'setelement'
					  (9, State, _rec24)
			    end
			-| ['compiler_generated'] )
		      ( <_cor36> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','logger_state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  ( <_cor28,_cor27,_cor26,_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor28,_cor27,_cor26,_cor25,_cor24,_cor23})
		  -| [{'function_name',{'print_to_log',6}}] )
	    -| ['compiler_generated'] )
	end
'print_next'/1 =
    %% Line 862
    fun (_cor0) ->
	%% Line 863
	case call 'erlang':'spawn_monitor'
		 (_cor0) of
	  <{_X_Pid,Ref}> when 'true' ->
	      %% Line 864
	      Ref
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'get_groupleader'/3 =
    %% Line 888
    fun (_cor2,_cor1,_cor0) ->
	%% Line 889
	( case _cor0 of
	    ( <( {'logger_state',_cor28,_cor29,_cor30,_cor31,_cor32,_rec26,_cor33,_cor34}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 891
		  case call 'proplists':'get_value'
			   (_cor2, _rec26) of
		    %% Line 892
		    <'undefined'> when 'true' ->
			%% Line 895
			case call 'lists':'keysearch'
				 ({'tc',_cor1}, 2, _rec26) of
			  %% Line 896
			  <{'value',_cor36}> when 'true' ->
			      %% Line 898
			      {'tc_log',_cor1,[{_cor2,{'io',_cor1}}|_rec26]}
			  %% Line 899
			  <'false'> when 'true' ->
			      let <_cor10> =
				  %% Line 902
				  ( letrec
					'lc$^0'/1 =
					    fun (_cor8) ->
						case _cor8 of
						  <[{_cor37,{Type,TCGL}}|_cor7]>
						      when call 'erlang':'=:='
							    (Type,
							     'tc') ->
						      let <_cor9> =
							  apply 'lc$^0'/1
							      (_cor7)
						      in  ( [TCGL|_cor9]
							    -| ['compiler_generated'] )
						  ( <[_cor6|_cor7]> when 'true' ->
							apply 'lc$^0'/1
							    (_cor7)
						    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_cor8> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor8})
							  -| [{'function_name',{'lc$^0',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  apply 'lc$^0'/1
					    (_rec26)
				    -| ['list_comprehension'] )
			      in  %% Line 902
				  case _cor10 of
				    %% Line 903
				    <[TCGL|[]]> when 'true' ->
					%% Line 906
					{'tc_log',TCGL,_rec26}
				    %% Line 907
				    <_cor38> when 'true' ->
					%% Line 908
					{'ct_log',_cor32,_rec26}
				  end
			  ( <_cor14> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor14})
			    -| ['compiler_generated'] )
			end
		    %% Line 911
		    <{_cor47,_cor48}>
			when call 'erlang':'=:='
			      (_cor48,
			       _cor1) ->
			%% Line 912
			{'tc_log',_cor1,_rec26}
		    %% Line 913
		    <_cor49> when 'true' ->
			let <TCGLs1> =
			    %% Line 916
			    call 'proplists':'delete'
				(_cor2, _rec26)
			in  let <_cor20> =
				%% Line 917
				( letrec
				      'lc$^1'/1 =
					  fun (_cor18) ->
					      case _cor18 of
						<[{_cor50,{Type,TCGL}}|_cor17]>
						    when call 'erlang':'=:='
							  (Type,
							   'tc') ->
						    let <_cor19> =
							apply 'lc$^1'/1
							    (_cor17)
						    in  ( [TCGL|_cor19]
							  -| ['compiler_generated'] )
						( <[_cor16|_cor17]> when 'true' ->
						      apply 'lc$^1'/1
							  (_cor17)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor18> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor18})
							-| [{'function_name',{'lc$^1',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^1'/1
					  (TCGLs1)
				  -| ['list_comprehension'] )
			    in  %% Line 917
				case _cor20 of
				  %% Line 918
				  <[TCGL|[]]> when 'true' ->
				      %% Line 919
				      {'tc_log',TCGL,TCGLs1}
				  %% Line 920
				  <_cor51> when 'true' ->
				      %% Line 921
				      {'ct_log',_cor32,TCGLs1}
				end
		  end
	      -| ['compiler_generated'] )
	    ( <_cor35> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','logger_state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'add_tc_gl'/3 =
    %% Line 925
    fun (_cor2,_cor1,_cor0) ->
	%% Line 926
	( case _cor0 of
	    ( <( {'logger_state',_cor10,_cor11,_cor12,_cor13,_cor14,_rec29,_cor15,_cor16}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor6> =
		      %% Line 927
		      call 'lists':'keydelete'
			  (_cor2, 1, _rec29)
		  in  %% Line 927
		      [{_cor2,{'tc',_cor1}}|_cor6]
	      -| ['compiler_generated'] )
	    ( <_cor17> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','logger_state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'rm_tc_gl'/2 =
    %% Line 929
    fun (_cor1,_cor0) ->
	%% Line 930
	( case _cor0 of
	    ( <( {'logger_state',_cor13,_cor14,_cor15,_cor16,_cor17,_rec30,_cor18,_cor19}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 931
		  case call 'proplists':'get_value'
			   (_cor1, _rec30) of
		    %% Line 932
		    <{'tc',GL}> when 'true' ->
			let <TCGLs1> =
			    %% Line 933
			    call 'lists':'keydelete'
				(_cor1, 1, _rec30)
			in  %% Line 934
			    case call 'lists':'keysearch'
				     ({'tc',GL}, 2, TCGLs1) of
			      %% Line 935
			      <{'value',_cor21}> when 'true' ->
				  %% Line 937
				  TCGLs1
			      %% Line 938
			      <'false'> when 'true' ->
				  let <_cor8> =
				      %% Line 940
				      ( fun (_cor6) ->
					    case _cor6 of
					      <{_cor22,{'io',GLPid}}>
						  when call 'erlang':'=='
							(GL,
							 GLPid) ->
						  'false'
					      %% Line 941
					      <_cor23> when 'true' ->
						  'true'
					    end
					-| [{'id',{0,0,'-rm_tc_gl/2-fun-0-'}}] )
				  in  %% Line 940
				      call 'lists':'filter'
					  (_cor8, %% Line 942
						  TCGLs1)
			      ( <_cor9> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor9})
				-| ['compiler_generated'] )
			    end
		    %% Line 944
		    <_cor24> when 'true' ->
			_rec30
		  end
	      -| ['compiler_generated'] )
	    ( <_cor20> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','logger_state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'set_evmgr_gl'/1 =
    %% Line 949
    fun (_cor0) ->
	%% Line 950
	case call 'erlang':'whereis'
		 ('ct_event') of
	  %% Line 951
	  <'undefined'> when 'true' ->
	      'ok'
	  %% Line 952
	  <EvMgrPid> when 'true' ->
	      call 'erlang':'group_leader'
		  (_cor0, EvMgrPid)
	end
'open_ctlog'/1 =
    %% Line 955
    fun (_cor0) ->
	%% Line 956
	case call 'file':'open'
		 ([99|[116|[108|[111|[103|[46|[104|[116|[109|[108]]]]]]]]]], ['write'|[{'encoding','utf8'}]]) of
	  <{'ok',Fd}> when 'true' ->
	      let <_cor2> =
		  %% Line 957
		  apply 'header'/2
		      ([67|[111|[109|[109|[111|[110|[32|[84|[101|[115|[116|[32|[70|[114|[97|[109|[101|[119|[111|[114|[107|[32|[76|[111|[103]]]]]]]]]]]]]]]]]]]]]]]]], {[],[1|[2]],[]})
	      in  do  %% Line 957
		      call 'io':'format'
			  (Fd, _cor2, [])
		      let <_cor3> =
			  %% Line 958
			  call 'ct_run':'variables_file_name'
			      ([46|[46|[47]]])
		      in  do  %% Line 958
			      case call 'file':'consult'
				       (_cor3) of
				%% Line 959
				<{'ok',Vars}> when 'true' ->
				    let <_cor4> =
					%% Line 960
					apply 'config_table'/1
					    (Vars)
				    in  %% Line 960
					call 'io':'format'
					    (Fd, _cor4, [])
				%% Line 961
				<{'error',Reason}> when 'true' ->
				    %% Line 962
				    case call 'file':'get_cwd'
					     () of
				      <{'ok',Cwd}> when 'true' ->
					  let <Dir> =
					      %% Line 963
					      call 'filename':'dirname'
						  (Cwd)
					  in  let <Variables> =
						  %% Line 964
						  call 'ct_run':'variables_file_name'
						      (Dir)
					      in  %% Line 965
						  call 'io':'format'
						      (Fd, %% Line 966
							   [67|[97|[110|[32|[110|[111|[116|[32|[114|[101|[97|[100|[32|[116|[104|[101|[32|[102|[105|[108|[101|[32|[39|[126|[116|[115|[39|[32|[82|[101|[97|[115|[111|[110|[58|[32|[126|[119|[10|[78|[111|[32|[99|[111|[110|[102|[105|[103|[117|[114|[97|[116|[105|[111|[110|[32|[102|[111|[117|[110|[100|[32|[102|[111|[114|[32|[116|[101|[115|[116|[33|[33|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 968
																																																											[Variables|[Reason|[]]])
				      ( <_cor5> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor5})
					-| ['compiler_generated'] )
				    end
				( <_cor8> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor8})
				  -| ['compiler_generated'] )
			      end
			      let <_cor9> =
				  %% Line 971
				  apply 'xhtml'/2
				      ([60|[98|[114|[62|[60|[98|[114|[62|[60|[104|[50|[62|[80|[114|[101|[47|[112|[111|[115|[116|[45|[116|[101|[115|[116|[32|[73|[47|[79|[32|[76|[111|[103|[60|[47|[104|[50|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 972
																															   [60|[98|[114|[32|[47|[62|[60|[98|[114|[32|[47|[62|[10|[60|[104|[52|[62|[80|[82|[69|[47|[80|[79|[83|[84|[32|[84|[69|[83|[84|[32|[73|[47|[79|[32|[76|[79|[71|[60|[47|[104|[52|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
			      in  do  %% Line 970
				      call 'io':'format'
					  (Fd, _cor9, %% Line 972
						      [])
				      do  %% Line 973
					  call 'io':'format'
					      (Fd, %% Line 974
						   [10|[60|[117|[108|[62|[10|[60|[108|[105|[62|[60|[97|[32|[104|[114|[101|[102|[61|[34|[126|[116|[115|[35|[112|[114|[101|[116|[101|[115|[116|[34|[62|[86|[105|[101|[119|[32|[73|[47|[79|[32|[108|[111|[103|[103|[101|[100|[32|[98|[101|[102|[111|[114|[101|[32|[116|[104|[101|[32|[116|[101|[115|[116|[32|[114|[117|[110|[60|[47|[97|[62|[60|[47|[108|[105|[62|[10|[60|[108|[105|[62|[60|[97|[32|[104|[114|[101|[102|[61|[34|[126|[116|[115|[35|[112|[111|[115|[116|[116|[101|[115|[116|[34|[62|[86|[105|[101|[119|[32|[73|[47|[79|[32|[108|[111|[103|[103|[101|[100|[32|[97|[102|[116|[101|[114|[32|[116|[104|[101|[32|[116|[101|[115|[116|[32|[114|[117|[110|[60|[47|[97|[62|[60|[47|[108|[105|[62|[10|[60|[47|[117|[108|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 979
																																																																																																																	      [_cor0|[_cor0|[]]])
					  do  %% Line 981
					      apply 'print_style'/2
						  (Fd, 'undefined')
					      let <_cor10> =
						  %% Line 983
						  apply 'xhtml'/2
						      ([60|[98|[114|[62|[60|[104|[50|[62|[80|[114|[111|[103|[114|[101|[115|[115|[32|[76|[111|[103|[60|[47|[104|[50|[62|[10|[60|[112|[114|[101|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 984
																												       [60|[98|[114|[32|[47|[62|[10|[60|[104|[52|[62|[80|[82|[79|[71|[82|[69|[83|[83|[32|[76|[79|[71|[60|[47|[104|[52|[62|[10|[60|[112|[114|[101|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
					      in  do  %% Line 982
						      call 'io':'format'
							  (Fd, _cor10, %% Line 984
								       [])
						      %% Line 985
						      Fd
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'print_style'/2 =
    %% Line 987
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Fd,'undefined'> when 'true' ->
	      %% Line 988
	      case apply 'basic_html'/0
		       () of
		%% Line 989
		<'true'> when 'true' ->
		    %% Line 990
		    call 'io':'format'
			(Fd, %% Line 991
			     [60|[115|[116|[121|[108|[101|[62|[10|[100|[105|[118|[46|[99|[116|[95|[105|[110|[116|[101|[114|[110|[97|[108|[32|[123|[32|[98|[97|[99|[107|[103|[114|[111|[117|[110|[100|[58|[108|[105|[103|[104|[116|[103|[114|[101|[121|[59|[32|[99|[111|[108|[111|[114|[58|[98|[108|[97|[99|[107|[59|[32|[125|[10|[100|[105|[118|[46|[100|[101|[102|[97|[117|[108|[116|[32|[32|[32|[32|[32|[123|[32|[98|[97|[99|[107|[103|[114|[111|[117|[110|[100|[58|[108|[105|[103|[104|[116|[103|[114|[101|[101|[110|[59|[32|[99|[111|[108|[111|[114|[58|[98|[108|[97|[99|[107|[59|[32|[125|[10|[60|[47|[115|[116|[121|[108|[101|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 995
																																																																																													     [])
		%% Line 996
		<_cor20> when 'true' ->
		    %% Line 997
		    'ok'
	      end
	  %% Line 1000
	  <Fd,StyleSheet> when 'true' ->
	      %% Line 1001
	      case call 'file':'read_file'
		       (StyleSheet) of
		%% Line 1002
		<{'ok',Bin}> when 'true' ->
		    let <_cor3> =
			%% Line 1003
			apply 'encoding'/1
			    (StyleSheet)
		    in  let <Str> =
			    %% Line 1003
			    apply 'b2s'/2
				(Bin, _cor3)
			in  let <_cor6> =
				%% Line 1004
				case call 'string':'str'
					 (Str, [60|[115|[116|[121|[108|[101|[62]]]]]]]) of
				  %% Line 1005
				  <0> when 'true' ->
				      call 'string':'str'
					  (Str, [60|[83|[84|[89|[76|[69|[62]]]]]]])
				  %% Line 1006
				  <N0> when 'true' ->
				      N0
				end
			    in  let <_cor9> =
				    %% Line 1008
				    case call 'string':'str'
					     (Str, [60|[47|[115|[116|[121|[108|[101|[62]]]]]]]]) of
				      %% Line 1009
				      <0> when 'true' ->
					  call 'string':'str'
					      (Str, [60|[47|[83|[84|[89|[76|[69|[62]]]]]]]])
				      %% Line 1010
				      <N1> when 'true' ->
					  N1
				    end
				in  %% Line 1012
				    case <> of
				      <>
					  when let <_cor11> =
						call 'erlang':'=='
						    (_cor6, 0)
					    in  let <_cor12> =
						    call 'erlang':'/='
							(_cor9, 0)
						in  call 'erlang':'and'
							(_cor11, _cor12) ->
					  %% Line 1013
					  apply 'print_style_error'/3
					      (Fd, StyleSheet, 'missing_style_start_tag')
				      %% Line 1014
				      <>
					  when let <_cor13> =
						call 'erlang':'/='
						    (_cor6, 0)
					    in  let <_cor14> =
						    call 'erlang':'=='
							(_cor9, 0)
						in  call 'erlang':'and'
							(_cor13, _cor14) ->
					  %% Line 1015
					  apply 'print_style_error'/3
					      (Fd, StyleSheet, 'missing_style_end_tag')
				      %% Line 1016
				      <>
					  when call 'erlang':'/='
						(_cor6,
						 0) ->
					  let <_cor15> =
					      %% Line 1017
					      call 'erlang':'+'
						  (_cor9, 7)
					  in  let <Style> =
						  %% Line 1017
						  call 'string':'sub_string'
						      (Str, _cor6, _cor15)
					      in  %% Line 1018
						  call 'io':'format'
						      (Fd, [126|[116|[115|[10]]]], [Style|[]])
				      %% Line 1019
				      <>
					  when call 'erlang':'=='
						(_cor6,
						 0) ->
					  %% Line 1020
					  call 'io':'format'
					      (Fd, [60|[115|[116|[121|[108|[101|[62|[126|[116|[115|[60|[47|[115|[116|[121|[108|[101|[62|[10]]]]]]]]]]]]]]]]]]], [Str|[]])
				      ( <> when 'true' ->
					    primop 'match_fail'
						('if_clause')
					-| ['compiler_generated'] )
				    end
		%% Line 1022
		<{'error',Reason}> when 'true' ->
		    %% Line 1023
		    apply 'print_style_error'/3
			(Fd, StyleSheet, Reason)
		( <_cor17> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor17})
		  -| ['compiler_generated'] )
	      end
	end
'print_style_error'/3 =
    %% Line 1032
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 1033
	    call 'io':'format'
		(_cor2, [10|[60|[33|[45|[45|[32|[70|[97|[105|[108|[101|[100|[32|[116|[111|[32|[108|[111|[97|[100|[32|[115|[116|[121|[108|[101|[115|[104|[101|[101|[116|[32|[126|[116|[115|[58|[32|[126|[112|[32|[45|[45|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1034
																																	     [_cor1|[_cor0|[]]])
	    %% Line 1035
	    apply 'print_style'/2
		(_cor2, 'undefined')
'close_ctlog'/1 =
    %% Line 1037
    fun (_cor0) ->
	do  %% Line 1038
	    call 'io':'format'
		(_cor0, [10|[60|[47|[112|[114|[101|[62|[10]]]]]]]], [])
	    let <_cor1> =
		%% Line 1039
		apply 'xhtml'/2
		    ([60|[98|[114|[62|[60|[98|[114|[62|[10]]]]]]]]], [60|[98|[114|[32|[47|[62|[60|[98|[114|[32|[47|[62|[10]]]]]]]]]]]]])
	    in  let <_cor2> =
		    %% Line 1039
		    apply 'footer'/0
			()
		in  do  %% Line 1039
			call 'io':'format'
			    (_cor0, [_cor1|_cor2], [])
			%% Line 1040
			call 'file':'close'
			    (_cor0)
'make_last_run_index'/1 =
    %% Line 1045
    fun (_cor0) ->
	let <AbsIndexName> =
	    %% Line 1047
	    call 'filename':'absname'
		([105|[110|[100|[101|[120|[46|[104|[116|[109|[108]]]]]]]]]])
	in  let <_cor3> =
		catch
		    %% Line 1049
		    apply 'make_last_run_index1'/2
			(_cor0, [105|[110|[100|[101|[120|[46|[104|[116|[109|[108]]]]]]]]]])
	    in  %% Line 1049
		case _cor3 of
		  %% Line 1050
		  <{'EXIT',Reason}> when 'true' ->
		      let <_cor4> =
			  %% Line 1051
			  call 'erlang':'++'
			      (AbsIndexName, [33|[10]])
		      in  let <_cor5> =
			      %% Line 1051
			      call 'erlang':'++'
				  ([67|[82|[65|[83|[72|[69|[68|[32|[119|[104|[105|[108|[101|[32|[117|[112|[100|[97|[116|[105|[110|[103|[32]]]]]]]]]]]]]]]]]]]]]]], _cor4)
			  in  do  %% Line 1051
				  call 'io':'put_chars'
				      (_cor5)
				  do  %% Line 1052
				      call 'io':'format'
					  ([126|[112|[126|[110]]]], [Reason|[]])
				      %% Line 1053
				      {'error',Reason}
		  %% Line 1054
		  <{'error',Reason}> when 'true' ->
		      let <_cor6> =
			  %% Line 1055
			  call 'erlang':'++'
			      (AbsIndexName, [10])
		      in  let <_cor7> =
			      %% Line 1055
			      call 'erlang':'++'
				  ([70|[65|[73|[76|[69|[68|[32|[119|[104|[105|[108|[101|[32|[117|[112|[100|[97|[116|[105|[110|[103|[32]]]]]]]]]]]]]]]]]]]]]], _cor6)
			  in  do  %% Line 1055
				  call 'io':'put_chars'
				      (_cor7)
				  do  %% Line 1056
				      call 'io':'format'
					  ([126|[112|[126|[110]]]], [Reason|[]])
				      %% Line 1057
				      {'error',Reason}
		  %% Line 1058
		  <'ok'> when 'true' ->
		      %% Line 1059
		      'ok'
		  %% Line 1060
		  <Err> when 'true' ->
		      do  %% Line 1061
			  call 'io':'format'
			      ([85|[110|[107|[110|[111|[119|[110|[32|[105|[110|[116|[101|[114|[110|[97|[108|[32|[101|[114|[114|[111|[114|[32|[119|[104|[105|[108|[101|[32|[117|[112|[100|[97|[116|[105|[110|[103|[32|[126|[116|[115|[46|[32|[80|[108|[101|[97|[115|[101|[32|[114|[101|[112|[111|[114|[116|[46|[10|[40|[69|[114|[114|[58|[32|[126|[112|[44|[32|[73|[68|[58|[32|[49|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1063
																																																								 [AbsIndexName|[Err|[]]])
			  %% Line 1064
			  {'error',Err}
		end
'make_last_run_index1'/2 =
    %% Line 1068
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 1070
	    case call 'filelib':'wildcard'
		     ([42|[46|[108|[111|[103|[115]]]]]]) of
	      %% Line 1071
	      <[Log|[]]> when 'true' ->
		  %% Line 1072
		  [Log|[]]
	      %% Line 1073
	      <Logs> when 'true' ->
		  %% Line 1074
		  case apply 'read_totals_file'/1
			   ([116|[111|[116|[97|[108|[115|[46|[105|[110|[102|[111]]]]]]]]]]]) of
		    %% Line 1075
		    <{_X_Node,_X_Lbl,Logs0,_X_Totals}> when 'true' ->
			%% Line 1076
			apply 'insert_dirs'/2
			    (Logs, Logs0)
		    %% Line 1077
		    <_cor20> when 'true' ->
			%% Line 1079
			Logs
		  end
	    end
	in  let <_cor7> =
		%% Line 1083
		case call 'file':'read_file'
			 ([109|[105|[115|[115|[105|[110|[103|[95|[115|[117|[105|[116|[101|[115|[46|[105|[110|[102|[111]]]]]]]]]]]]]]]]]]]) of
		  %% Line 1084
		  <{'ok',Bin}> when 'true' ->
		      call 'erlang':'binary_to_term'
			  (Bin)
		  %% Line 1085
		  <_cor21> when 'true' ->
		      []
		end
	    in  let <_cor10> =
		    %% Line 1087
		    case call 'application':'get_env'
			     ('common_test', 'test_label') of
		      %% Line 1088
		      <{'ok',Lbl}> when 'true' ->
			  Lbl
		      %% Line 1089
		      <_cor22> when 'true' ->
			  'undefined'
		    end
		in  let <_cor12> =
			%% Line 1092
			apply 'index_header'/2
			    (_cor10, _cor1)
		    in  %% Line 1091
			case apply 'make_last_run_index'/8
				 (_cor4, _cor12, %% Line 1093
						 0, %% Line 1093
						    0, %% Line 1093
						       0, %% Line 1093
							  0, %% Line 1093
							     0, _cor7) of
			  <{'ok',Index0,Totals}> when 'true' ->
			      do  %% Line 1095
				  apply 'write_totals_file'/4
				      ([116|[111|[116|[97|[108|[115|[46|[105|[110|[102|[111]]]]]]]]]]], _cor10, _cor4, Totals)
				  let <_cor14> =
				      %% Line 1096
				      apply 'last_run_index_footer'/0
					  ()
				  in  let <Index> =
					  %% Line 1096
					  [Index0|_cor14]
				      in  let <_cor16> =
					      %% Line 1098
					      call 'unicode':'characters_to_binary'
						  (Index)
					  in  %% Line 1098
					      case apply 'force_write_file'/2
						       (_cor0, _cor16) of
						%% Line 1099
						<'ok'> when 'true' ->
						    %% Line 1100
						    'ok'
						%% Line 1101
						<{'error',Reason}> when 'true' ->
						    %% Line 1102
						    {'error',{'index_write_error',Reason}}
						( <_cor17> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor17})
						  -| ['compiler_generated'] )
					      end
			  ( <_cor13> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor13})
			    -| ['compiler_generated'] )
			end
'insert_dirs'/2 =
    %% Line 1105
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[NewDir|NewDirs],Dirs> when 'true' ->
	      let <Dirs1> =
		  %% Line 1106
		  apply 'insert_dir'/2
		      (NewDir, Dirs)
	      in  %% Line 1107
		  apply 'insert_dirs'/2
		      (NewDirs, Dirs1)
	  %% Line 1108
	  <[],Dirs> when 'true' ->
	      %% Line 1109
	      Dirs
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'insert_dirs',2}}] )
	    -| ['compiler_generated'] )
	end
'insert_dir'/2 =
    %% Line 1110
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <D,Dirs = [_cor5|_cor6]>
	      when call 'erlang':'=:='
		    (_cor5,
		     D) ->
	      %% Line 1111
	      Dirs
	  %% Line 1112
	  <D,[D1|Ds]> when 'true' ->
	      let <_cor2> =
		  %% Line 1113
		  apply 'insert_dir'/2
		      (D, Ds)
	      in  %% Line 1113
		  [D1|_cor2]
	  %% Line 1114
	  <D,[]> when 'true' ->
	      %% Line 1115
	      [D|[]]
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'insert_dir',2}}] )
	    -| ['compiler_generated'] )
	end
'make_last_run_index'/8 =
    %% Line 1117
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Name|Rest],Result,TotSucc,TotFail,%% Line 1118
					      UserSkip,%% Line 1118
						       AutoSkip,%% Line 1118
								TotNotBuilt,%% Line 1118
									    Missing> when 'true' ->
	      %% Line 1119
	      case apply 'get_run_dirs'/1
		       (Name) of
		%% Line 1120
		<'false'> when 'true' ->
		    %% Line 1122
		    apply 'make_last_run_index'/8
			(Rest, Result, TotSucc, TotFail, %% Line 1123
							 UserSkip, %% Line 1123
								   AutoSkip, %% Line 1123
									     TotNotBuilt, %% Line 1123
											  Missing)
		%% Line 1124
		<LogDirs> when 'true' ->
		    let <_cor8> =
			%% Line 1125
			call 'filename':'basename'
			    (Name)
		    in  let <SuiteName> =
			    %% Line 1125
			    call 'filename':'rootname'
				(_cor8)
			in  %% Line 1126
			    case %% Line 1127
				 apply 'make_last_run_index1'/9
				     (SuiteName, LogDirs, Result, %% Line 1128
								  TotSucc, %% Line 1128
									   TotFail, %% Line 1129
										    UserSkip, %% Line 1129
											      AutoSkip, %% Line 1130
													TotNotBuilt, %% Line 1130
														     Missing) of
			      <{Result1,TotSucc1,TotFail1,UserSkip1,AutoSkip1,TotNotBuilt1}> when 'true' ->
				  %% Line 1131
				  apply 'make_last_run_index'/8
				      (Rest, Result1, TotSucc1, TotFail1, %% Line 1132
									  UserSkip1, %% Line 1132
										     AutoSkip1, %% Line 1133
												TotNotBuilt1, %% Line 1133
													      Missing)
			      ( <_cor10> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor10})
				-| ['compiler_generated'] )
			    end
	      end
	  %% Line 1136
	  <[],Result,TotSucc,TotFail,UserSkip,AutoSkip,%% Line 1137
						       TotNotBuilt,_cor21> when 'true' ->
	      let <_cor12> =
		  %% Line 1138
		  apply 'total_row'/6
		      (TotSucc, TotFail, UserSkip, AutoSkip, %% Line 1139
							     TotNotBuilt, %% Line 1139
									  'false')
	      in  %% Line 1138
		  {'ok',[Result|_cor12],%% Line 1140
					{TotSucc,TotFail,UserSkip,AutoSkip,TotNotBuilt}}
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'make_last_run_index',8}}] )
	    -| ['compiler_generated'] )
	end
'make_last_run_index1'/9 =
    %% Line 1142
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <SuiteName,[LogDir|LogDirs],Result,TotSucc,TotFail,%% Line 1143
							     UserSkip,%% Line 1143
								      AutoSkip,%% Line 1143
									       TotNotBuilt,%% Line 1143
											   Missing> when 'true' ->
	      %% Line 1144
	      case apply 'make_one_index_entry'/6
		       (SuiteName, LogDir, [45], 'false', %% Line 1145
							  Missing, %% Line 1145
								   'undefined') of
		%% Line 1146
		<{Result1,Succ,Fail,USkip,ASkip,NotBuilt,_X_URIs1}> when 'true' ->
		    let <_cor9> =
			catch
			    %% Line 1148
			    call 'erlang':'+'
				(AutoSkip, ASkip)
		    in  let <_cor11> =
			    %% Line 1148
			    case _cor9 of
			      %% Line 1149
			      <{'EXIT',_cor27}> when 'true' ->
				  'undefined'
			      %% Line 1150
			      <Res> when 'true' ->
				  Res
			    end
			in  let <_cor16> =
				%% Line 1153
				call 'erlang':'+'
				    (TotSucc, Succ)
			    in  let <_cor15> =
				    %% Line 1154
				    call 'erlang':'+'
					(TotFail, Fail)
				in  let <_cor14> =
					%% Line 1154
					call 'erlang':'+'
					    (UserSkip, USkip)
				    in  let <_cor13> =
					    %% Line 1155
					    call 'erlang':'+'
						(TotNotBuilt, NotBuilt)
					in  %% Line 1152
					    apply 'make_last_run_index1'/9
						(SuiteName, LogDirs, [Result|Result1], _cor16, _cor15, _cor14, _cor11, _cor13, %% Line 1155
															       Missing)
		%% Line 1156
		<'error'> when 'true' ->
		    %% Line 1157
		    apply 'make_last_run_index1'/9
			(SuiteName, LogDirs, Result, TotSucc, TotFail, %% Line 1158
								       UserSkip, %% Line 1158
										 AutoSkip, %% Line 1158
											   TotNotBuilt, %% Line 1158
													Missing)
		( <_cor17> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor17})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1160
	  <_cor28,[],Result,TotSucc,TotFail,%% Line 1161
					    UserSkip,%% Line 1161
						     AutoSkip,%% Line 1161
							      TotNotBuilt,_cor29> when 'true' ->
	      %% Line 1162
	      {Result,TotSucc,TotFail,UserSkip,AutoSkip,TotNotBuilt}
	  ( <_cor26,_cor25,_cor24,_cor23,_cor22,_cor21,_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26,_cor25,_cor24,_cor23,_cor22,_cor21,_cor20,_cor19,_cor18})
		  -| [{'function_name',{'make_last_run_index1',9}}] )
	    -| ['compiler_generated'] )
	end
'make_one_index_entry'/6 =
    %% Line 1164
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1165
	case apply 'count_cases'/1
		 (_cor4) of
	  %% Line 1166
	  <{Succ,Fail,UserSkip,AutoSkip}> when 'true' ->
	      let <NotBuilt> =
		  %% Line 1167
		  apply 'not_built'/4
		      (_cor5, _cor4, _cor2, _cor1)
	      in  %% Line 1168
		  case apply 'make_one_index_entry1'/11
			   (_cor5, _cor4, _cor3, %% Line 1169
						 Succ, %% Line 1169
						       Fail, %% Line 1170
							     UserSkip, %% Line 1170
								       AutoSkip, %% Line 1171
										 NotBuilt, _cor2, %% Line 1172
												  'normal', _cor0) of
		    <{NewResult,URIs1}> when 'true' ->
			%% Line 1173
			{NewResult,Succ,Fail,UserSkip,AutoSkip,NotBuilt,URIs1}
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor7})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1174
	  <'error'> when 'true' ->
	      %% Line 1175
	      'error'
	  ( <_cor8> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor8})
	    -| ['compiler_generated'] )
	end
'make_one_index_entry1'/11 =
    %% Line 1178
    fun (_cor10,_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <LogFile> =
	    %% Line 1180
	    call 'filename':'join'
		(_cor9, [115|[117|[105|[116|[101|[46|[108|[111|[103|[46|[104|[116|[109|[108]]]]]]]]]]]]]])
	in  let <_cor13> =
		%% Line 1181
		call 'filename':'dirname'
		    (_cor9)
	    in  let <CtRunDir> =
		    %% Line 1181
		    call 'filename':'dirname'
			(_cor13)
		in  let <CrashDumpName> =
			%% Line 1182
			call 'erlang':'++'
			    (_cor10, [95|[101|[114|[108|[95|[99|[114|[97|[115|[104|[46|[100|[117|[109|[112]]]]]]]]]]]]]]])
		    in  let <_cor21> =
			    %% Line 1185
			    case _cor0 of
			      %% Line 1186
			      <'undefined'> when 'true' ->
				  let <_cor18> =
				      %% Line 1187
				      call 'filename':'join'
					  (CtRunDir, [99|[116|[108|[111|[103|[46|[104|[116|[109|[108]]]]]]]]]])
				  in  let <_cor19> =
					  %% Line 1187
					  apply 'uri'/1
					      (_cor18)
				      in  let <_cor17> =
					      %% Line 1188
					      apply 'uri'/1
						  (LogFile)
					  in  let <_cor16> =
						  %% Line 1189
						  apply 'uri'/1
						      (CrashDumpName)
					      in  %% Line 1187
						  {_cor19,_cor17,_cor16}
			      %% Line 1190
			      <_cor81> when 'true' ->
				  _cor0
			    end
			in  %% Line 1184
			    case _cor21 of
			      <URIs1 = {CtRunLogURI,LogFileURI,CrashDumpURI}> when 'true' ->
				  let <_cor25> =
				      %% Line 1194
				      case _cor1 of
					%% Line 1195
					<'temp'> when 'true' ->
					    %% Line 1196
					    []
					%% Line 1197
					<'normal'> when 'true' ->
					    %% Line 1198
					    case call 'filelib':'is_file'
						     (CrashDumpName) of
					      %% Line 1199
					      <'true'> when 'true' ->
						  %% Line 1200
						  [[38|[110|[98|[115|[112|[59|[60|[97|[32|[104|[114|[101|[102|[61|[34]]]]]]]]]]]]]]]|[CrashDumpURI|%% Line 1201
																		   [[34|[62|[40|[67|[114|[97|[115|[104|[68|[117|[109|[112|[41|[60|[47|[97|[62]]]]]]]]]]]]]]]]]]]]
					      %% Line 1202
					      <'false'> when 'true' ->
						  %% Line 1203
						  []
					      ( <_cor23> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor23})
						-| ['compiler_generated'] )
					    end
					( <_cor24> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor24})
					  -| ['compiler_generated'] )
				      end
				  in  let <Lbl,Timestamp,Node,AllInfo> =
					  %% Line 1208
					  case _cor2 of
					    %% Line 1209
					    <{'true',OldRuns}> when 'true' ->
						%% Line 1210
						case call 'string':'tokens'
							 (_cor9, [46]) of
						  <[_X_Prefix|[NodeOrDate|_cor82]]> when 'true' ->
						      let <_cor29> =
							  %% Line 1211
							  case call 'string':'chr'
								   (NodeOrDate, 64) of
							    %% Line 1212
							    <0> when 'true' ->
								[45]
							    %% Line 1213
							    <_cor83> when 'true' ->
								NodeOrDate
							  end
						      in  let <TS> =
							      %% Line 1216
							      apply 'timestamp'/1
								  (CtRunDir)
							  in  let <N> =
								  %% Line 1218
								  apply 'xhtml'/2
								      ([[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62|[60|[102|[111|[110|[116|[32|[115|[105|[122|[101|[61|[34|[45|[49|[34|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[_cor29|%% Line 1219
																																   [[60|[47|[102|[111|[110|[116|[62|[60|[47|[116|[100|[62|[10]]]]]]]]]]]]]]]], %% Line 1220
																																									       [[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62]]]]]]]]]]]]]]]]|[_cor29|[[60|[47|[116|[100|[62|[10]]]]]]]]])
							      in  let <L> =
								      %% Line 1221
								      apply 'xhtml'/2
									  ([[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[99|[101|[110|[116|[101|[114|[62|[60|[102|[111|[110|[116|[32|[115|[105|[122|[101|[61|[34|[45|[49|[34|[62|[60|[98|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[_cor8|%% Line 1222
																																			  [[60|[47|[102|[111|[110|[116|[62|[60|[47|[98|[62|[60|[47|[116|[100|[62|[10]]]]]]]]]]]]]]]]]]]], %% Line 1223
																																															  [[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[99|[101|[110|[116|[101|[114|[62|[60|[98|[62]]]]]]]]]]]]]]]]]]]]|[_cor8|[[60|[47|[98|[62|[60|[47|[116|[100|[62|[10]]]]]]]]]]]]])
								  in  let <T> =
									  %% Line 1224
									  apply 'xhtml'/2
									      ([[60|[116|[100|[62|[60|[102|[111|[110|[116|[32|[115|[105|[122|[101|[61|[34|[45|[49|[34|[62]]]]]]]]]]]]]]]]]]]]|[TS|[[60|[47|[102|[111|[110|[116|[62|[60|[47|[116|[100|[62|[10]]]]]]]]]]]]]]]], %% Line 1225
																																	      [[60|[116|[100|[62]]]]|[TS|[[60|[47|[116|[100|[62|[10]]]]]]]]])
								      in  let <_cor37> =
									      %% Line 1228
									      case OldRuns of
										%% Line 1229
										<[]> when 'true' ->
										    [110|[111|[110|[101]]]]
										%% Line 1230
										<_cor84> when 'true' ->
										    [60|[97|[32|[104|[114|[101|[102|[61|[34|[97|[108|[108|[95|[114|[117|[110|[115|[46|[104|[116|[109|[108|[34|[62|[79|[108|[100|[32|[82|[117|[110|[115|[60|[47|[97|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
									      end
									  in  let <A> =
										  %% Line 1233
										  apply 'xhtml'/2
										      ([[60|[116|[100|[62|[60|[102|[111|[110|[116|[32|[115|[105|[122|[101|[61|[34|[45|[49|[34|[62|[60|[97|[32|[104|[114|[101|[102|[61|[34]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[CtRunLogURI|%% Line 1234
																																    [[34|[62|[67|[84|[32|[76|[111|[103|[60|[47|[97|[62|[60|[47|[102|[111|[110|[116|[62|[60|[47|[116|[100|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 1235
																																																	  [[60|[116|[100|[62|[60|[102|[111|[110|[116|[32|[115|[105|[122|[101|[61|[34|[45|[49|[34|[62]]]]]]]]]]]]]]]]]]]]|[_cor37|%% Line 1236
																																																																 [[60|[47|[102|[111|[110|[116|[62|[60|[47|[116|[100|[62|[10]]]]]]]]]]]]]]]]]]], %% Line 1237
																																																																										[[60|[116|[100|[62|[60|[97|[32|[104|[114|[101|[102|[61|[34]]]]]]]]]]]]]|[CtRunLogURI|%% Line 1238
																																																																																				     [[34|[62|[67|[84|[32|[76|[111|[103|[60|[47|[97|[62|[60|[47|[116|[100|[62|[10]]]]]]]]]]]]]]]]]]|%% Line 1239
																																																																																																    [[60|[116|[100|[62]]]]|[_cor37|[[60|[47|[116|[100|[62|[10]]]]]]]]]]]])
									      in  %% Line 1240
										  <L,T,N,A>
						  ( <_cor27> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor27})
						    -| ['compiler_generated'] )
						end
					    %% Line 1241
					    <'false'> when 'true' ->
						%% Line 1242
						<[],[],[],[]>
					    ( <_cor40> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor40})
					      -| ['compiler_generated'] )
					  end
				      in  let <_cor45> =
					      %% Line 1246
					      case <> of
						<>
						    when call 'erlang':'=='
							  (_cor3,
							   0) ->
						    let <_cor43> =
							%% Line 1247
							call 'erlang':'integer_to_list'
							    (_cor3)
						    in  %% Line 1247
							[[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62]]]]]]]]]]]]]]]]|[_cor43|[[60|[47|[116|[100|[62|[10]]]]]]]]]
						%% Line 1248
						<> when 'true' ->
						    let <_cor44> =
							%% Line 1250
							call 'erlang':'integer_to_list'
							    (_cor3)
						    in  %% Line 1249
							[[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62|[60|[97|[32|[104|[114|[101|[102|[61|[34]]]]]]]]]]]]]]]]]]]]]]]]]|[CtRunLogURI|[[34|[62]]|%% Line 1250
																											     [_cor44|[[60|[47|[97|[62|[60|[47|[116|[100|[62|[10]]]]]]]]]]]]]]]
					      end
					  in  let <_cor55> =
						  %% Line 1253
						  case <> of
						    <>
							when try
							      let <_cor47> =
								  call 'erlang':'>'
								      (_cor6, 0)
							      in  let <_cor48> =
								      call 'erlang':'>'
									  (_cor3, 0)
								  in  let <_cor49> =
									  call 'erlang':'or'
									      (_cor47, _cor48)
								      in  let <_cor50> =
									      %% Line 1254
									      call 'erlang':'+'
										  (_cor7, _cor6)
									  in  let <_cor51> =
										  %% Line 1254
										  call 'erlang':'+'
										      (_cor50, _cor5)
									      in  let <_cor52> =
										      %% Line 1254
										      call 'erlang':'+'
											  (_cor51, _cor4)
										  in  let <_cor53> =
											  %% Line 1254
											  call 'erlang':'=='
											      (_cor52, 0)
										      in  call 'erlang':'or'
											      (_cor49, _cor53)
							  of <Try> ->
							      Try
							  catch <T,R> ->
							      'false' ->
							let <_cor54> =
							    %% Line 1256
							    call 'erlang':'integer_to_list'
								(_cor6)
							in  %% Line 1255
							    [[60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34|[114|[101|[100|[34|[62]]]]]]]]]]]]]]]]]]|%% Line 1256
																				  [_cor54|[[60|[47|[102|[111|[110|[116|[62]]]]]]]]]]
						    %% Line 1257
						    <> when 'true' ->
							%% Line 1258
							call 'erlang':'integer_to_list'
							    (_cor6)
						  end
					      in  let <AllSkip,UserSkipStr,AutoSkipStr> =
						      %% Line 1261
						      case <> of
							<>
							    when call 'erlang':'=:='
								  (_cor4,
								   'undefined') ->
							    <_cor5,[63],[63]>
							%% Line 1262
							<> when 'true' ->
							    let <_cor58> =
								%% Line 1263
								case <> of
								  <>
								      when call 'erlang':'>'
									    (_cor4,
									     0) ->
								      let <_cor57> =
									  %% Line 1265
									  call 'erlang':'integer_to_list'
									      (_cor4)
								      in  %% Line 1264
									  [[60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34|[98|[114|[111|[119|[110|[34|[62]]]]]]]]]]]]]]]]]]]]|%% Line 1265
																							   [_cor57|[[60|[47|[102|[111|[110|[116|[62]]]]]]]]]]
								  %% Line 1266
								  <> when 'true' ->
								      call 'erlang':'integer_to_list'
									  (_cor4)
								end
							    in  let <_cor61> =
								    %% Line 1268
								    call 'erlang':'+'
									(_cor5, _cor4)
								in  let <_cor60> =
									%% Line 1268
									call 'erlang':'integer_to_list'
									    (_cor5)
								    in  <_cor61,_cor60,_cor58>
						      end
						  in  let <_cor64> =
							  %% Line 1271
							  apply 'odd_or_even'/0
							      ()
						      in  let <_cor65> =
							      %% Line 1270
							      apply 'xhtml'/2
								  ([60|[116|[114|[32|[118|[97|[108|[105|[103|[110|[61|[116|[111|[112|[62|[10]]]]]]]]]]]]]]]], %% Line 1271
																			      [[60|[116|[114|[32|[99|[108|[97|[115|[115|[61|[34]]]]]]]]]]]|[_cor64|[[34|[62|[10]]]]]])
							  in  let <_cor66> =
								  %% Line 1272
								  apply 'xhtml'/2
								      ([60|[116|[100|[62|[60|[102|[111|[110|[116|[32|[115|[105|[122|[101|[61|[34|[45|[49|[34|[62|[60|[97|[32|[104|[114|[101|[102|[61|[34]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [60|[116|[100|[62|[60|[97|[32|[104|[114|[101|[102|[61|[34]]]]]]]]]]]]])
							      in  let <_cor67> =
								      %% Line 1274
								      apply 'xhtml'/2
									  ([60|[47|[102|[111|[110|[116|[62|[60|[47|[116|[100|[62|[10]]]]]]]]]]]]], [60|[47|[116|[100|[62|[10]]]]]])
								  in  let <_cor68> =
									  %% Line 1276
									  call 'erlang':'integer_to_list'
									      (_cor7)
								      in  let <_cor69> =
									      %% Line 1278
									      call 'erlang':'integer_to_list'
										  (AllSkip)
									  in  %% Line 1270
									      {[_cor65|%% Line 1272
										       [_cor66|%% Line 1273
											       [LogFileURI|[[34|[62]]|[_cor10|[[60|[47|[97|[62]]]]|[_cor25|%% Line 1274
																			   [_cor67|%% Line 1275
																				   [Lbl|[Timestamp|%% Line 1276
																						   [[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62]]]]]]]]]]]]]]]]|[_cor68|[[60|[47|[116|[100|[62|[10]]]]]]|%% Line 1277
																																							[[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62]]]]]]]]]]]]]]]]|[_cor55|[[60|[47|[116|[100|[62|[10]]]]]]|%% Line 1278
																																																							     [[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62]]]]]]]]]]]]]]]]|[_cor69|%% Line 1279
																																																																				 [[32|[40]]|[UserSkipStr|[[47]|[AutoSkipStr|[[41|[60|[47|[116|[100|[62|[10]]]]]]]|%% Line 1280
																																																																														  [_cor45|[Node|[AllInfo|[[60|[47|[116|[114|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],%% Line 1280
																																																																																								     URIs1}
			      ( <_cor22> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor22})
				-| ['compiler_generated'] )
			    end
'total_row'/6 =
    %% Line 1282
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Label,TimestampCell,AllInfo> =
	    %% Line 1284
	    case _cor0 of
	      %% Line 1285
	      <'true'> when 'true' ->
		  %% Line 1286
		  <[60|[116|[100|[62|[38|[110|[98|[115|[112|[59|[60|[47|[116|[100|[62|[10]]]]]]]]]]]]]]]],[60|[116|[100|[62|[38|[110|[98|[115|[112|[59|[60|[47|[116|[100|[62|[10]]]]]]]]]]]]]]]],[60|[116|[100|[62|[38|[110|[98|[115|[112|[59|[60|[47|[116|[100|[62|[10|[60|[116|[100|[62|[38|[110|[98|[115|[112|[59|[60|[47|[116|[100|[62|[10|[60|[116|[100|[62|[38|[110|[98|[115|[112|[59|[60|[47|[116|[100|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]>
	      %% Line 1291
	      <'false'> when 'true' ->
		  %% Line 1292
		  <[],[],[]>
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor6})
		-| ['compiler_generated'] )
	    end
	in  let <AllSkip,UserSkipStr,AutoSkipStr> =
		%% Line 1296
		case <> of
		  <>
		      when call 'erlang':'=:='
			    (_cor2,
			     'undefined') ->
		      <_cor3,[63],[63]>
		  %% Line 1297
		  <> when 'true' ->
		      let <_cor11> =
			  call 'erlang':'+'
			      (_cor3, _cor2)
		      in  let <_cor10> =
			      %% Line 1298
			      call 'erlang':'integer_to_list'
				  (_cor3)
			  in  let <_cor9> =
				  %% Line 1298
				  call 'erlang':'integer_to_list'
				      (_cor2)
			      in  <_cor11,_cor10,_cor9>
		end
	    in  let <_cor14> =
		    %% Line 1301
		    apply 'odd_or_even'/0
			()
		in  let <_cor15> =
			%% Line 1300
			apply 'xhtml'/2
			    ([60|[116|[114|[32|[118|[97|[108|[105|[103|[110|[61|[116|[111|[112|[62|[10]]]]]]]]]]]]]]]], %% Line 1301
															[[60|[47|[116|[98|[111|[100|[121|[62|[10|[60|[116|[102|[111|[111|[116|[62|[10|[60|[116|[114|[32|[99|[108|[97|[115|[115|[61|[34]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[_cor14|[[34|[62|[10]]]]]])
		    in  let <_cor16> =
			    %% Line 1303
			    call 'erlang':'integer_to_list'
				(_cor5)
			in  let <_cor17> =
				%% Line 1304
				call 'erlang':'integer_to_list'
				    (_cor4)
			    in  let <_cor18> =
				    %% Line 1305
				    call 'erlang':'integer_to_list'
					(AllSkip)
				in  let <_cor19> =
					%% Line 1307
					call 'erlang':'integer_to_list'
					    (_cor1)
				    in  let <_cor20> =
					    %% Line 1309
					    apply 'xhtml'/2
						([], [60|[47|[116|[102|[111|[111|[116|[62|[10]]]]]]]]])
					in  %% Line 1300
					    [_cor15|%% Line 1302
						    [[60|[116|[100|[62|[60|[98|[62|[84|[111|[116|[97|[108|[60|[47|[98|[62|[60|[47|[116|[100|[62|[10]]]]]]]]]]]]]]]]]]]]]]|[Label|[TimestampCell|%% Line 1303
																								[[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62|[60|[98|[62]]]]]]]]]]]]]]]]]]]|[_cor16|[[60|[98|[62|[60|[47|[116|[100|[62|[10]]]]]]]]]|%% Line 1304
																																												   [[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62|[60|[98|[62]]]]]]]]]]]]]]]]]]]|[_cor17|[[60|[98|[62|[60|[47|[116|[100|[62|[10]]]]]]]]]|%% Line 1305
																																																																      [[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62]]]]]]]]]]]]]]]]|[_cor18|%% Line 1306
																																																																													  [[32|[40]]|[UserSkipStr|[[47]|[AutoSkipStr|[[41|[60|[47|[116|[100|[62|[10]]]]]]]|%% Line 1307
																																																																																							   [[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62|[60|[98|[62]]]]]]]]]]]]]]]]]]]|[_cor19|[[60|[98|[62|[60|[47|[116|[100|[62|[10]]]]]]]]]|%% Line 1308
																																																																																																											      [AllInfo|[[60|[47|[116|[114|[62|[10]]]]]]|%% Line 1309
																																																																																																																	[_cor20|[]]]]]]]]]]]]]]]]]]]]]]]]
'not_built'/4 =
    %% Line 1311
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_X_BaseName,_X_LogDir,_X_All,[]> when 'true' ->
	      %% Line 1312
	      0
	  %% Line 1313
	  <BaseName,_X_LogDir,_X_All,Missing> when 'true' ->
	      let <_cor7> =
		  %% Line 1319
		  case call 'string':'tokens'
			   (BaseName, [46]) of
		    %% Line 1320
		    <[T|[O|[]]]>
			when call 'erlang':'is_list'
			      (T) ->
			%% Line 1321
			apply 'locate_info'/3
			    ({T,O}, 'all', Missing)
		    %% Line 1322
		    <[T|[O|[[115|[117|[105|[116|[101|[115]]]]]]]]]> when 'true' ->
			%% Line 1323
			apply 'locate_info'/3
			    ({T,O}, 'suites', Missing)
		    %% Line 1324
		    <[T|[O|[S|[]]]]> when 'true' ->
			let <_cor4> =
			    %% Line 1325
			    call 'erlang':'list_to_atom'
				(S)
			in  %% Line 1325
			    apply 'locate_info'/3
				({T,O}, _cor4, Missing)
		    %% Line 1326
		    <[T|[O|[S|[_cor13|[]]]]]> when 'true' ->
			let <_cor5> =
			    %% Line 1327
			    call 'erlang':'list_to_atom'
				(S)
			in  %% Line 1327
			    apply 'locate_info'/3
				({T,O}, _cor5, Missing)
		    %% Line 1328
		    <_cor14> when 'true' ->
			%% Line 1329
			[]
		  end
	      in  %% Line 1331
		  call 'erlang':'length'
		      (_cor7)
	end
'locate_info'/3 =
    %% Line 1333
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Path = {Top,Obj},AllOrSuite,[{{Dir,Suite},Failed}|Errors]> when 'true' ->
	      let <_cor3> =
		  %% Line 1334
		  call 'filename':'split'
		      (Dir)
	      in  %% Line 1334
		  case call 'lists':'reverse'
			   (_cor3) of
		    %% Line 1335
		    <[[116|[101|[115|[116]]]]|[_cor12|[_cor13|_cor14]]]>
			when let <_cor15> =
			      call 'erlang':'=:='
				  (_cor12, Obj)
			  in  let <_cor16> =
				  call 'erlang':'=:='
				      (_cor13, Top)
			      in  call 'erlang':'and'
				      (_cor15, _cor16) ->
			let <_cor5> =
			    %% Line 1336
			    apply 'get_missing_suites'/2
				(AllOrSuite, {Suite,Failed})
			in  let <_cor4> =
				%% Line 1337
				apply 'locate_info'/3
				    (Path, AllOrSuite, Errors)
			    in  %% Line 1336
				call 'erlang':'++'
				    (_cor5, _cor4)
		    %% Line 1338
		    <[_cor17|[_cor18|_cor19]]>
			when let <_cor20> =
			      call 'erlang':'=:='
				  (_cor17, Obj)
			  in  let <_cor21> =
				  call 'erlang':'=:='
				      (_cor18, Top)
			      in  call 'erlang':'and'
				      (_cor20, _cor21) ->
			let <_cor7> =
			    %% Line 1339
			    apply 'get_missing_suites'/2
				(AllOrSuite, {Suite,Failed})
			in  let <_cor6> =
				%% Line 1340
				apply 'locate_info'/3
				    (Path, AllOrSuite, Errors)
			    in  %% Line 1339
				call 'erlang':'++'
				    (_cor7, _cor6)
		    %% Line 1341
		    <_cor22> when 'true' ->
			%% Line 1342
			apply 'locate_info'/3
			    (Path, AllOrSuite, Errors)
		  end
	  %% Line 1344
	  <_cor23,_cor24,[]> when 'true' ->
	      %% Line 1345
	      []
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'locate_info',3}}] )
	    -| ['compiler_generated'] )
	end
'get_missing_suites'/2 =
    %% Line 1347
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'all',{[97|[108|[108]]],Failed}> when 'true' ->
	      %% Line 1348
	      Failed
	  %% Line 1349
	  <'suites',{_X_Suite,Failed}> when 'true' ->
	      %% Line 1350
	      Failed
	  %% Line 1351
	  <Suite,{_cor4,Failed}>
	      when call 'erlang':'=:='
		    (_cor4,
		     Suite) ->
	      %% Line 1352
	      Failed
	  %% Line 1353
	  <_cor5,_cor6> when 'true' ->
	      %% Line 1354
	      []
	end
'term_to_text'/1 =
    %% Line 1356
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1357
	    call 'io_lib':'format'
		([126|[112|[46|[10]]]], [_cor0|[]])
	in  %% Line 1357
	    call 'lists':'flatten'
		(_cor1)
'index_header'/2 =
    %% Line 1362
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 1364
	    case _cor1 of
	      %% Line 1365
	      <'undefined'> when 'true' ->
		  let <_cor2> =
		      %% Line 1366
		      apply 'format_time'/1
			  (_cor0)
		  in  %% Line 1366
		      apply 'header'/3
			  ([84|[101|[115|[116|[32|[82|[101|[115|[117|[108|[116|[115]]]]]]]]]]]], _cor2, %% Line 1367
													{[],[1],[2|[3|[4|[5]]]]})
	      %% Line 1368
	      <_cor21> when 'true' ->
		  let <_cor4> =
		      %% Line 1369
		      call 'erlang':'++'
			  (_cor1, [39])
		  in  let <_cor5> =
			  %% Line 1369
			  call 'erlang':'++'
			      ([84|[101|[115|[116|[32|[82|[101|[115|[117|[108|[116|[115|[32|[102|[111|[114|[32|[39]]]]]]]]]]]]]]]]]], _cor4)
		      in  let <_cor3> =
			      %% Line 1370
			      apply 'format_time'/1
				  (_cor0)
			  in  %% Line 1369
			      apply 'header'/3
				  (_cor5, _cor3, %% Line 1371
						 {[],[1],[2|[3|[4|[5]]]]})
	    end
	in  let <_cor9> =
		%% Line 1374
		call 'filename':'absname'
		    ([99|[111|[118|[101|[114|[46|[104|[116|[109|[108]]]]]]]]]])
	    in  let <_cor11> =
		    %% Line 1374
		    case call 'filelib':'is_regular'
			     (_cor9) of
		      %% Line 1375
		      <'true'> when 'true' ->
			  %% Line 1376
			  apply 'xhtml'/2
			      ([[60|[112|[62|[60|[97|[32|[104|[114|[101|[102|[61|[34]]]]]]]]]]]]|[[99|[111|[118|[101|[114|[46|[104|[116|[109|[108]]]]]]]]]]|[[34|[62|[67|[111|[118|[101|[114|[32|[76|[111|[103|[60|[47|[97|[62|[60|[47|[112|[62|[60|[98|[114|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1378
																																				 [[60|[98|[114|[32|[47|[62|[60|[100|[105|[118|[32|[105|[100|[61|[34|[98|[117|[116|[116|[111|[110|[95|[104|[111|[108|[100|[101|[114|[34|[32|[99|[108|[97|[115|[115|[61|[34|[98|[116|[110|[34|[62|[10|[60|[97|[32|[104|[114|[101|[102|[61|[34]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[99|[111|[118|[101|[114|[46|[104|[116|[109|[108]]]]]]]]]]|[[34|[62|[67|[79|[86|[69|[82|[32|[76|[79|[71|[60|[47|[97|[62|[10|[60|[47|[100|[105|[118|[62|[60|[98|[114|[32|[47|[62|[60|[98|[114|[32|[47|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
		      %% Line 1382
		      <'false'> when 'true' ->
			  %% Line 1383
			  apply 'xhtml'/2
			      ([60|[98|[114|[62|[10]]]]], [60|[98|[114|[32|[47|[62|[60|[98|[114|[32|[47|[62|[60|[98|[114|[32|[47|[62|[10]]]]]]]]]]]]]]]]]]])
		      ( <_cor10> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor10})
			-| ['compiler_generated'] )
		    end
		in  let <_cor13> =
			%% Line 1388
			apply 'xhtml'/2
			    ([[60|[112|[62|[60|[97|[32|[104|[114|[101|[102|[61|[34]]]]]]]]]]]]|[[99|[116|[108|[111|[103|[46|[104|[116|[109|[108]]]]]]]]]]|[[34|[62|[67|[111|[109|[109|[111|[110|[32|[84|[101|[115|[116|[32|[70|[114|[97|[109|[101|[119|[111|[114|[107|[32|[76|[111|[103|[60|[47|[97|[62|[60|[47|[112|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1390
																																												[[60|[98|[114|[32|[47|[62|[60|[100|[105|[118|[32|[105|[100|[61|[34|[98|[117|[116|[116|[111|[110|[95|[104|[111|[108|[100|[101|[114|[34|[32|[99|[108|[97|[115|[115|[61|[34|[98|[116|[110|[34|[62|[10|[60|[97|[32|[104|[114|[101|[102|[61|[34]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[99|[116|[108|[111|[103|[46|[104|[116|[109|[108]]]]]]]]]]|[[34|[62|[67|[79|[77|[77|[79|[78|[32|[84|[69|[83|[84|[32|[70|[82|[65|[77|[69|[87|[79|[82|[75|[32|[76|[79|[71|[60|[47|[97|[62|[10|[60|[47|[100|[105|[118|[62|[60|[98|[114|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
		    in  let <_cor14> =
			    %% Line 1395
			    apply 'xhtml'/2
				([[60|[116|[97|[98|[108|[101|[32|[98|[111|[114|[100|[101|[114|[61|[34|[51|[34|[32|[99|[101|[108|[108|[112|[97|[100|[100|[105|[110|[103|[61|[34|[53|[34|[32|[98|[103|[99|[111|[108|[111|[114|[61|[34]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[35|[70|[48|[70|[56|[70|[70]]]]]]]|[[34|[62|[10]]]]]], %% Line 1397
																																								       [[60|[116|[97|[98|[108|[101|[32|[105|[100|[61|[34]]]]]]]]]]]|[[83|[111|[114|[116|[97|[98|[108|[101|[84|[97|[98|[108|[101]]]]]]]]]]]]]|[[34|[62|[10]]]|[[60|[116|[104|[101|[97|[100|[62|[10|[60|[116|[114|[62|[10]]]]]]]]]]]]]]]]])
			in  let <_cor15> =
				%% Line 1400
				apply 'xhtml'/2
				    ([[60|[116|[104|[62|[60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34]]]]]]]]]]]]]]]]]|[[35|[70|[48|[70|[56|[70|[70]]]]]]]|[[34|[62|[95|[60|[47|[102|[111|[110|[116|[62|[79|[107|[60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34]]]]]]]]]]]]]]]]]]]]]]]]]|[[35|[70|[48|[70|[56|[70|[70]]]]]]]|[[34|[62|[95|[60|[47|[102|[111|[110|[116|[62|[60|[47|[116|[104|[62|[10]]]]]]]]]]]]]]]]]]]]], %% Line 1402
																																																						     [60|[116|[104|[62|[79|[107|[60|[47|[116|[104|[62|[10]]]]]]]]]]]])
			    in  let <_cor16> =
				    %% Line 1404
				    apply 'xhtml'/2
					([60|[98|[114|[62]]]], [60|[98|[114|[32|[47|[62]]]]]])
				in  let <_cor17> =
					%% Line 1405
					apply 'xhtml'/2
					    ([60|[98|[114|[62]]]], [60|[98|[114|[32|[47|[62]]]]]])
				    in  let <_cor18> =
					    %% Line 1406
					    apply 'xhtml'/2
						([], [60|[47|[116|[114|[62|[10|[60|[47|[116|[104|[101|[97|[100|[62|[10|[60|[116|[98|[111|[100|[121|[62|[10]]]]]]]]]]]]]]]]]]]]]]])
					in  %% Line 1386
					    [_cor7|%% Line 1387
						   [[60|[99|[101|[110|[116|[101|[114|[62|[10]]]]]]]]]|%% Line 1388
												      [_cor13|%% Line 1394
													      [_cor11|%% Line 1395
														      [_cor14|%% Line 1399
															      [[60|[116|[104|[62|[60|[98|[62|[84|[101|[115|[116|[32|[78|[97|[109|[101|[60|[47|[98|[62|[60|[47|[116|[104|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 1400
																																	  [_cor15|%% Line 1403
																																		  [[60|[116|[104|[62|[70|[97|[105|[108|[101|[100|[60|[47|[116|[104|[62|[10]]]]]]]]]]]]]]]]|%% Line 1404
																																													   [[60|[116|[104|[62|[83|[107|[105|[112|[112|[101|[100]]]]]]]]]]]|[_cor16|[[40|[85|[115|[101|[114|[47|[65|[117|[116|[111|[41|[60|[47|[116|[104|[62|[10|[60|[116|[104|[62|[77|[105|[115|[115|[105|[110|[103]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 1405
																																																																										[_cor17|[[83|[117|[105|[116|[101|[115|[60|[47|[116|[104|[62|[10]]]]]]]]]]]]|%% Line 1406
																																																																																			    [_cor18|[]]]]]]]]]]]]]]]
'all_suites_index_header'/0 =
    %% Line 1408
    fun () ->
	%% Line 1409
	case call 'file':'get_cwd'
		 () of
	  <{'ok',Cwd}> when 'true' ->
	      %% Line 1410
	      apply 'all_suites_index_header'/1
		  (Cwd)
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor0})
	    -| ['compiler_generated'] )
	end
'all_suites_index_header'/1 =
    %% Line 1412
    fun (_cor0) ->
	let <LogDir> =
	    %% Line 1413
	    call 'filename':'basename'
		(_cor0)
	in  let <_cor2> =
		%% Line 1414
		call 'erlang':'++'
		    (LogDir, [34])
	    in  let <_cor3> =
		    %% Line 1414
		    call 'erlang':'++'
			([65|[108|[108|[32|[116|[101|[115|[116|[32|[114|[117|[110|[115|[32|[105|[110|[32|[34]]]]]]]]]]]]]]]]]], _cor2)
		in  let <AllRuns> =
			%% Line 1414
			apply 'xhtml'/2
			    ([_cor3|[]], %% Line 1415
					 [65|[76|[76|[32|[82|[85|[78|[83]]]]]]]])
		    in  let <AllRunsLink> =
			    %% Line 1416
			    apply 'xhtml'/2
				([[60|[97|[32|[104|[114|[101|[102|[61|[34]]]]]]]]]|[[97|[108|[108|[95|[114|[117|[110|[115|[46|[104|[116|[109|[108]]]]]]]]]]]]]|[[34|[62]]|[AllRuns|[[60|[47|[97|[62|[10]]]]]]]]]], %% Line 1417
																										   [[60|[100|[105|[118|[32|[105|[100|[61|[34|[98|[117|[116|[116|[111|[110|[95|[104|[111|[108|[100|[101|[114|[34|[32|[99|[108|[97|[115|[115|[61|[34|[98|[116|[110|[34|[62|[10|[60|[97|[32|[104|[114|[101|[102|[61|[34]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 1418
																																																										   [[97|[108|[108|[95|[114|[117|[110|[115|[46|[104|[116|[109|[108]]]]]]]]]]]]]|[[34|[62]]|[AllRuns|[[60|[47|[97|[62|[10|[60|[47|[100|[105|[118|[62]]]]]]]]]]]]]]]])
			in  let <_cor6> =
				%% Line 1419
				apply 'header'/2
				    ([84|[101|[115|[116|[32|[82|[101|[115|[117|[108|[116|[115]]]]]]]]]]]], {[3],[1|[2|[8|[9|[10]]]]],[4|[5|[6|[7]]]]})
			    in  let <_cor7> =
				    %% Line 1422
				    apply 'xhtml'/2
					([60|[98|[114|[62|[60|[98|[114|[62|[10]]]]]]]]], [60|[98|[114|[32|[47|[62|[60|[98|[114|[32|[47|[62|[10]]]]]]]]]]]]])
				in  let <_cor8> =
					%% Line 1423
					apply 'xhtml'/2
					    ([[60|[116|[97|[98|[108|[101|[32|[98|[111|[114|[100|[101|[114|[61|[34|[51|[34|[32|[99|[101|[108|[108|[112|[97|[100|[100|[105|[110|[103|[61|[34|[53|[34|[32|[98|[103|[99|[111|[108|[111|[114|[61|[34]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[35|[69|[52|[70|[48|[70|[69]]]]]]]|[[34|[62|[10]]]]]], %% Line 1425
																																										   [[60|[116|[97|[98|[108|[101|[32|[105|[100|[61|[34]]]]]]]]]]]|[[83|[111|[114|[116|[97|[98|[108|[101|[84|[97|[98|[108|[101]]]]]]]]]]]]]|[[34|[62|[10]]]|[[60|[116|[104|[101|[97|[100|[62|[10|[60|[116|[114|[62|[10]]]]]]]]]]]]]]]]])
				    in  let <_cor9> =
					    %% Line 1430
					    apply 'xhtml'/2
						([[60|[116|[104|[62|[60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34]]]]]]]]]]]]]]]]]|[[35|[69|[52|[70|[48|[70|[69]]]]]]]|[[34|[62|[95|[60|[47|[102|[111|[110|[116|[62|[79|[107|[60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34]]]]]]]]]]]]]]]]]]]]]]]]]|[[35|[69|[52|[70|[48|[70|[69]]]]]]]|[[34|[62|[95|[60|[47|[102|[111|[110|[116|[62|[60|[47|[116|[104|[62|[10]]]]]]]]]]]]]]]]]]]]], %% Line 1432
																																																								 [60|[116|[104|[62|[79|[107|[60|[47|[116|[104|[62|[10]]]]]]]]]]]])
					in  let <_cor10> =
						%% Line 1439
						apply 'xhtml'/2
						    ([], [60|[47|[116|[114|[62|[10|[60|[47|[116|[104|[101|[97|[100|[62|[10|[60|[116|[98|[111|[100|[121|[62|[10]]]]]]]]]]]]]]]]]]]]]]])
					    in  %% Line 1419
						[_cor6|%% Line 1420
						       [[60|[99|[101|[110|[116|[101|[114|[62|[10]]]]]]]]]|%% Line 1421
													  [AllRunsLink|%% Line 1422
														       [_cor7|%% Line 1423
															      [_cor8|%% Line 1427
																     [[60|[116|[104|[62|[84|[101|[115|[116|[32|[78|[97|[109|[101|[60|[47|[116|[104|[62|[10]]]]]]]]]]]]]]]]]]]|%% Line 1428
																													      [[60|[116|[104|[62|[76|[97|[98|[101|[108|[60|[47|[116|[104|[62|[10]]]]]]]]]]]]]]]|%% Line 1429
																																								[[60|[116|[104|[62|[84|[101|[115|[116|[32|[82|[117|[110|[32|[83|[116|[97|[114|[116|[101|[100|[60|[47|[116|[104|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 1430
																																																										 [_cor9|%% Line 1433
																																																											[[60|[116|[104|[62|[70|[97|[105|[108|[101|[100|[60|[47|[116|[104|[62|[10]]]]]]]]]]]]]]]]|%% Line 1434
																																																																						 [[60|[116|[104|[62|[83|[107|[105|[112|[112|[101|[100|[60|[98|[114|[62|[40|[85|[115|[101|[114|[47|[65|[117|[116|[111|[41|[60|[47|[116|[104|[62|[10|[60|[116|[104|[62|[77|[105|[115|[115|[105|[110|[103|[60|[98|[114|[62|[83|[117|[105|[116|[101|[115|[60|[47|[116|[104|[62|[10|[60|[116|[104|[62|[78|[111|[100|[101|[60|[47|[116|[104|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 1437
																																																																																																																								       [[60|[116|[104|[62|[67|[84|[32|[76|[111|[103|[60|[47|[116|[104|[62|[10]]]]]]]]]]]]]]]]|%% Line 1438
																																																																																																																																			      [[60|[116|[104|[62|[79|[108|[100|[32|[82|[117|[110|[115|[60|[47|[116|[104|[62|[10]]]]]]]]]]]]]]]]]]|%% Line 1439
																																																																																																																																																  [_cor10|[]]]]]]]]]]]]]]]
'all_runs_header'/0 =
    %% Line 1441
    fun () ->
	%% Line 1442
	case call 'file':'get_cwd'
		 () of
	  <{'ok',Cwd}> when 'true' ->
	      let <LogDir> =
		  %% Line 1443
		  call 'filename':'basename'
		      (Cwd)
	      in  let <_cor2> =
		      %% Line 1444
		      call 'erlang':'++'
			  (LogDir, [34])
		  in  let <Title> =
			  %% Line 1444
			  call 'erlang':'++'
			      ([65|[108|[108|[32|[116|[101|[115|[116|[32|[114|[117|[110|[115|[32|[105|[110|[32|[34]]]]]]]]]]]]]]]]]], _cor2)
		      in  let <_cor4> =
			      %% Line 1445
			      apply 'xhtml'/2
				  ([[60|[112|[62|[60|[97|[32|[104|[114|[101|[102|[61|[34]]]]]]]]]]]]|[[105|[110|[100|[101|[120|[46|[104|[116|[109|[108]]]]]]]]]]|[[34|[62|[84|[101|[115|[116|[32|[73|[110|[100|[101|[120|[32|[80|[97|[103|[101|[60|[47|[97|[62|[60|[47|[112|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1447
																																					     [[60|[100|[105|[118|[32|[105|[100|[61|[34|[98|[117|[116|[116|[111|[110|[95|[104|[111|[108|[100|[101|[114|[34|[32|[99|[108|[97|[115|[115|[61|[34|[98|[116|[110|[34|[62|[10|[60|[97|[32|[104|[114|[101|[102|[61|[34]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[105|[110|[100|[101|[120|[46|[104|[116|[109|[108]]]]]]]]]]|[[34|[62|[84|[69|[83|[84|[32|[73|[78|[68|[69|[88|[32|[80|[65|[71|[69|[60|[47|[97|[62|[10|[60|[47|[100|[105|[118|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
			  in  let <_cor5> =
				  %% Line 1450
				  apply 'xhtml'/2
				      ([60|[98|[114|[62|[10]]]]], [60|[98|[114|[32|[47|[62|[60|[98|[114|[32|[47|[62|[10]]]]]]]]]]]]])
			      in  let <IxLink> =
				      %% Line 1445
				      [_cor4|%% Line 1450
					     [_cor5|[]]]
				  in  let <_cor7> =
					  %% Line 1451
					  apply 'header'/2
					      (Title, {[1],[2|[3|[5]]],[4|[6|[7|[8|[9|[10]]]]]]})
				      in  let <_cor8> =
					      %% Line 1453
					      apply 'xhtml'/2
						  ([[60|[116|[97|[98|[108|[101|[32|[98|[111|[114|[100|[101|[114|[61|[34|[51|[34|[32|[99|[101|[108|[108|[112|[97|[100|[100|[105|[110|[103|[61|[34|[53|[34|[32|[98|[103|[99|[111|[108|[111|[114|[61|[34]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[35|[65|[68|[68|[56|[69|[54]]]]]]]|[[34|[62|[10]]]]]], %% Line 1455
																																											 [[60|[116|[97|[98|[108|[101|[32|[105|[100|[61|[34]]]]]]]]]]]|[[83|[111|[114|[116|[97|[98|[108|[101|[84|[97|[98|[108|[101]]]]]]]]]]]]]|[[34|[62|[10]]]|[[60|[116|[104|[101|[97|[100|[62|[10|[60|[116|[114|[62|[10]]]]]]]]]]]]]]]]])
					  in  let <_cor9> =
						  %% Line 1463
						  apply 'xhtml'/2
						      ([[60|[116|[104|[62|[60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34]]]]]]]]]]]]]]]]]|[[35|[65|[68|[68|[56|[69|[54]]]]]]]|[[34|[62|[95|[60|[47|[102|[111|[110|[116|[62|[79|[107|[60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34]]]]]]]]]]]]]]]]]]]]]]]]]|[[35|[65|[68|[68|[56|[69|[54]]]]]]]|[[34|[62|[95|[60|[47|[102|[111|[110|[116|[62|[60|[47|[116|[104|[62|[10]]]]]]]]]]]]]]]]]]]]], %% Line 1465
																																																								       [60|[116|[104|[62|[79|[107|[60|[47|[116|[104|[62|[10]]]]]]]]]]]])
					      in  let <_cor10> =
						      %% Line 1469
						      apply 'xhtml'/2
							  ([], [60|[47|[116|[114|[62|[10|[60|[47|[116|[104|[101|[97|[100|[62|[10|[60|[116|[98|[111|[100|[121|[62|[10]]]]]]]]]]]]]]]]]]]]]]])
						  in  %% Line 1451
						      [_cor7|%% Line 1452
							     [[60|[99|[101|[110|[116|[101|[114|[62|[10]]]]]]]]]|[IxLink|%% Line 1453
															[_cor8|%% Line 1457
															       [[60|[116|[104|[62|[60|[98|[62|[72|[105|[115|[116|[111|[114|[121|[60|[47|[98|[62|[60|[47|[116|[104|[62|[10|[60|[116|[104|[62|[60|[98|[62|[78|[111|[100|[101|[60|[47|[98|[62|[60|[47|[116|[104|[62|[10|[60|[116|[104|[62|[60|[98|[62|[76|[97|[98|[101|[108|[60|[47|[98|[62|[60|[47|[116|[104|[62|[10|[60|[116|[104|[62|[84|[101|[115|[116|[115|[60|[47|[116|[104|[62|[10|[60|[116|[104|[62|[60|[98|[62|[84|[101|[115|[116|[32|[78|[97|[109|[101|[115|[60|[47|[98|[62|[60|[47|[116|[104|[62|[10|[60|[116|[104|[62|[84|[111|[116|[97|[108|[60|[47|[116|[104|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 1463
																																																																																																			    [_cor9|%% Line 1466
																																																																																																				   [[60|[116|[104|[62|[70|[97|[105|[108|[101|[100|[60|[47|[116|[104|[62|[10|[60|[116|[104|[62|[83|[107|[105|[112|[112|[101|[100|[60|[98|[114|[62|[40|[85|[115|[101|[114|[47|[65|[117|[116|[111|[41|[60|[47|[116|[104|[62|[10|[60|[116|[104|[62|[77|[105|[115|[115|[105|[110|[103|[60|[98|[114|[62|[83|[117|[105|[116|[101|[115|[60|[47|[116|[104|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 1469
																																																																																																																																																								    [_cor10|[]]]]]]]]]
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor0})
	    -| ['compiler_generated'] )
	end
'header'/2 =
    %% Line 1471
    fun (_cor1,_cor0) ->
	%% Line 1472
	apply 'header1'/3
	    (_cor1, [], _cor0)
'header'/3 =
    %% Line 1473
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1474
	apply 'header1'/3
	    (_cor2, _cor1, _cor0)
'header1'/3 =
    %% Line 1476
    fun (_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 1477
	    case <> of
	      <>
		  when call 'erlang':'=/='
			(_cor1,
			 []) ->
		  let <_cor3> =
		      %% Line 1479
		      call 'erlang':'++'
			  (_cor1, [60|[47|[104|[51|[62|[10]]]]]])
		  in  let <_cor4> =
			  %% Line 1479
			  [60|[104|[51|[62|_cor3]]]]
		      in  let <_cor5> =
			      %% Line 1480
			      apply 'xhtml'/2
				  ([60|[47|[99|[101|[110|[116|[101|[114|[62|[10|[60|[98|[114|[62|[10]]]]]]]]]]]]]]], [60|[47|[99|[101|[110|[116|[101|[114|[62|[10|[60|[98|[114|[32|[47|[62|[10]]]]]]]]]]]]]]]]])
			  in  %% Line 1478
			      [[60|[99|[101|[110|[116|[101|[114|[62|[10]]]]]]]]]|%% Line 1479
										 [_cor4|%% Line 1480
											[_cor5|[]]]]
	      %% Line 1481
	      <> when 'true' ->
		  apply 'xhtml'/2
		      ([60|[98|[114|[62]]]], [60|[98|[114|[32|[47|[62]]]]]])
	    end
	in  let <_cor10> =
		%% Line 1483
		( fun () ->
		      []
		  -| [{'id',{0,0,'-header1/3-fun-0-'}}] )
	    in  let <_cor9> =
		    %% Line 1484
		    ( fun () ->
			  let <_cor8> =
			      apply 'locate_priv_file'/1
				  ([99|[116|[95|[100|[101|[102|[97|[117|[108|[116|[46|[99|[115|[115]]]]]]]]]]]]]])
			  in  apply 'make_relative'/1
				  (_cor8)
		      -| [{'id',{0,0,'-header1/3-fun-1-'}}] )
		in  let <CSSFile> =
			%% Line 1483
			apply 'xhtml'/2
			    (_cor10, _cor9)
		    in  let <_cor14> =
			    %% Line 1486
			    ( fun () ->
				  []
			      -| [{'id',{0,0,'-header1/3-fun-2-'}}] )
			in  let <_cor13> =
				%% Line 1487
				( fun () ->
				      let <_cor12> =
					  apply 'locate_priv_file'/1
					      ([106|[113|[117|[101|[114|[121|[45|[108|[97|[116|[101|[115|[116|[46|[106|[115]]]]]]]]]]]]]]]])
				      in  apply 'make_relative'/1
					      (_cor12)
				  -| [{'id',{0,0,'-header1/3-fun-3-'}}] )
			    in  let <JQueryFile> =
				    %% Line 1486
				    apply 'xhtml'/2
					(_cor14, _cor13)
				in  let <_cor18> =
					%% Line 1489
					( fun () ->
					      []
					  -| [{'id',{0,0,'-header1/3-fun-4-'}}] )
				    in  let <_cor17> =
					    %% Line 1490
					    ( fun () ->
						  let <_cor16> =
						      apply 'locate_priv_file'/1
							  ([106|[113|[117|[101|[114|[121|[46|[116|[97|[98|[108|[101|[115|[111|[114|[116|[101|[114|[46|[109|[105|[110|[46|[106|[115]]]]]]]]]]]]]]]]]]]]]]]]])
						  in  apply 'make_relative'/1
							  (_cor16)
					      -| [{'id',{0,0,'-header1/3-fun-5-'}}] )
					in  let <TableSorterFile> =
						%% Line 1489
						apply 'xhtml'/2
						    (_cor18, _cor17)
					    in  let <_cor20> =
						    %% Line 1491
						    apply 'xhtml'/2
							([[60|[33|[68|[79|[67|[84|[89|[80|[69|[32|[72|[84|[77|[76|[32|[80|[85|[66|[76|[73|[67|[32|[34|[45|[47|[47|[87|[51|[67|[47|[47|[68|[84|[68|[32|[72|[84|[77|[76|[32|[51|[46|[50|[32|[70|[105|[110|[97|[108|[47|[47|[69|[78|[34|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[60|[104|[116|[109|[108|[62|[10]]]]]]]]], %% Line 1493
																																																[[60|[33|[68|[79|[67|[84|[89|[80|[69|[32|[104|[116|[109|[108|[32|[80|[85|[66|[76|[73|[67|[32|[34|[45|[47|[47|[87|[51|[67|[47|[47|[68|[84|[68|[32|[88|[72|[84|[77|[76|[32|[49|[46|[48|[32|[84|[114|[97|[110|[115|[105|[116|[105|[111|[110|[97|[108|[47|[47|[69|[78|[34|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[34|[104|[116|[116|[112|[58|[47|[47|[119|[119|[119|[46|[119|[51|[46|[111|[114|[103|[47|[84|[82|[47|[120|[104|[116|[109|[108|[49|[47|[68|[84|[68|[47|[120|[104|[116|[109|[108|[49|[45|[116|[114|[97|[110|[115|[105|[116|[105|[111|[110|[97|[108|[46|[100|[116|[100|[34|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[60|[104|[116|[109|[108|[32|[120|[109|[108|[110|[115|[61|[34|[104|[116|[116|[112|[58|[47|[47|[119|[119|[119|[46|[119|[51|[46|[111|[114|[103|[47|[49|[57|[57|[57|[47|[120|[104|[116|[109|[108|[34|[32|[120|[109|[108|[58|[108|[97|[110|[103|[61|[34|[101|[110|[34|[32|[108|[97|[110|[103|[61|[34|[101|[110|[34|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
						in  let <_cor24> =
							%% Line 1498
							call 'erlang':'++'
							    (_cor1, [60|[47|[116|[105|[116|[108|[101|[62|[10]]]]]]]]])
						    in  let <_cor25> =
							    %% Line 1498
							    [32|_cor24]
							in  let <_cor26> =
								%% Line 1498
								call 'erlang':'++'
								    (_cor2, _cor25)
							    in  let <_cor27> =
								    %% Line 1498
								    call 'erlang':'++'
									([60|[116|[105|[116|[108|[101|[62]]]]]]], _cor26)
								in  let <_cor28> =
									%% Line 1502
									apply 'uri'/1
									    (CSSFile)
								    in  let <_cor29> =
									    %% Line 1501
									    apply 'xhtml'/2
										([], %% Line 1502
										     [[60|[108|[105|[110|[107|[32|[114|[101|[108|[61|[34|[115|[116|[121|[108|[101|[115|[104|[101|[101|[116|[34|[32|[104|[114|[101|[102|[61|[34]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[_cor28|[[34|[32|[116|[121|[112|[101|[61|[34|[116|[101|[120|[116|[47|[99|[115|[115|[34|[62|[10]]]]]]]]]]]]]]]]]]]]]])
									in  let <_cor30> =
										%% Line 1503
										apply 'xhtml'/2
										    ([], %% Line 1504
											 [[60|[115|[99|[114|[105|[112|[116|[32|[116|[121|[112|[101|[61|[34|[116|[101|[120|[116|[47|[106|[97|[118|[97|[115|[99|[114|[105|[112|[116|[34|[32|[115|[114|[99|[61|[34]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[JQueryFile|%% Line 1505
																																						[[34|[62|[60|[47|[115|[99|[114|[105|[112|[116|[62|[10]]]]]]]]]]]]]]])
									    in  let <_cor31> =
										    %% Line 1506
										    apply 'xhtml'/2
											([], %% Line 1507
											     [[60|[115|[99|[114|[105|[112|[116|[32|[116|[121|[112|[101|[61|[34|[116|[101|[120|[116|[47|[106|[97|[118|[97|[115|[99|[114|[105|[112|[116|[34|[32|[115|[114|[99|[61|[34]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[TableSorterFile|%% Line 1508
																																							 [[34|[62|[60|[47|[115|[99|[114|[105|[112|[116|[62|[10]]]]]]]]]]]]]]])
										in  let <_cor33> =
											%% Line 1509
											( fun () ->
											      []
											  -| [{'id',{0,0,'-header1/3-fun-6-'}}] )
										    in  let <_cor32> =
											    %% Line 1510
											    ( fun () ->
												  apply 'insert_javascript'/1
												      ({'tablesorter',[83|[111|[114|[116|[97|[98|[108|[101|[84|[97|[98|[108|[101]]]]]]]]]]]]],_cor0})
											      -| [{'id',{0,0,'-header1/3-fun-7-'}}] )
											in  let <_cor34> =
												%% Line 1509
												apply 'xhtml'/2
												    (_cor33, _cor32)
											    in  let <_cor35> =
												    %% Line 1514
												    apply 'body_tag'/0
													()
												in  let <_cor36> =
													%% Line 1516
													call 'erlang':'++'
													    (_cor2, [60|[47|[104|[49|[62|[10]]]]]])
												    in  let <_cor37> =
													    %% Line 1516
													    [60|[104|[49|[62|_cor36]]]]
													in  %% Line 1491
													    [_cor20|%% Line 1496
														    [[60|[33|[45|[45|[32|[97|[117|[116|[111|[103|[101|[110|[101|[114|[97|[116|[101|[100|[32|[98|[121|[32|[39|[99|[116|[95|[108|[111|[103|[115|[39|[32|[45|[45|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 1497
																																							  [[60|[104|[101|[97|[100|[62|[10]]]]]]]|%% Line 1498
																																												 [_cor27|%% Line 1499
																																													 [[60|[109|[101|[116|[97|[32|[104|[116|[116|[112|[45|[101|[113|[117|[105|[118|[61|[34|[99|[97|[99|[104|[101|[45|[99|[111|[110|[116|[114|[111|[108|[34|[32|[99|[111|[110|[116|[101|[110|[116|[61|[34|[110|[111|[45|[99|[97|[99|[104|[101|[34|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 1500
																																																																																		 [[60|[109|[101|[116|[97|[32|[104|[116|[116|[112|[45|[101|[113|[117|[105|[118|[61|[34|[99|[111|[110|[116|[101|[110|[116|[45|[116|[121|[112|[101|[34|[32|[99|[111|[110|[116|[101|[110|[116|[61|[34|[116|[101|[120|[116|[47|[104|[116|[109|[108|[59|[32|[99|[104|[97|[114|[115|[101|[116|[61|[117|[116|[102|[45|[56|[34|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 1501
																																																																																																																																		  [_cor29|%% Line 1503
																																																																																																																																			  [_cor30|%% Line 1506
																																																																																																																																				  [_cor31|%% Line 1509
																																																																																																																																					  [_cor34|%% Line 1513
																																																																																																																																						  [[60|[47|[104|[101|[97|[100|[62|[10]]]]]]]]|%% Line 1514
																																																																																																																																											      [_cor35|%% Line 1515
																																																																																																																																												      [[60|[99|[101|[110|[116|[101|[114|[62|[10]]]]]]]]]|%% Line 1516
																																																																																																																																																			 [_cor37|%% Line 1517
																																																																																																																																																				 [[60|[47|[99|[101|[110|[116|[101|[114|[62|[10]]]]]]]]]]|%% Line 1518
																																																																																																																																																											 [_cor6|[[10]]]]]]]]]]]]]]]]]]
'last_run_index_footer'/0 =
    %% Line 1520
    fun () ->
	let <AllRuns> =
	    %% Line 1521
	    call 'filename':'join'
		([46|[46|[47]]], [97|[108|[108|[95|[114|[117|[110|[115|[46|[104|[116|[109|[108]]]]]]]]]]]]])
	in  let <TestIndex> =
		%% Line 1522
		call 'filename':'join'
		    ([46|[46|[47]]], [105|[110|[100|[101|[120|[46|[104|[116|[109|[108]]]]]]]]]])
	    in  let <_cor2> =
		    %% Line 1524
		    apply 'xhtml'/2
			([60|[98|[114|[62|[60|[104|[114|[62|[60|[112|[62|[10]]]]]]]]]]]], [60|[98|[114|[32|[47|[62|[60|[104|[114|[32|[47|[62|[60|[112|[62|[10]]]]]]]]]]]]]]]])
		in  let <_cor3> =
			%% Line 1525
			apply 'uri'/1
			    (AllRuns)
		    in  let <_cor4> =
			    %% Line 1527
			    apply 'uri'/1
				(TestIndex)
			in  let <_cor5> =
				%% Line 1529
				apply 'footer'/0
				    ()
			    in  %% Line 1523
				[[60|[47|[116|[97|[98|[108|[101|[62|[10]]]]]]]]]|%% Line 1524
										 [_cor2|%% Line 1525
											[[60|[97|[32|[104|[114|[101|[102|[61|[34]]]]]]]]]|[_cor3|%% Line 1526
																		 [[34|[62|[84|[101|[115|[116|[32|[114|[117|[110|[32|[104|[105|[115|[116|[111|[114|[121|[10|[60|[47|[97|[62|[32|[32|[124|[32|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 1527
																																					    [[60|[97|[32|[104|[114|[101|[102|[61|[34]]]]]]]]]|[_cor4|%% Line 1528
																																												     [[34|[62|[84|[111|[112|[32|[108|[101|[118|[101|[108|[32|[116|[101|[115|[116|[32|[105|[110|[100|[101|[120|[10|[60|[47|[97|[62|[10|[60|[47|[112|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 1529
																																																																			    [[60|[47|[99|[101|[110|[116|[101|[114|[62|[10]]]]]]]]]]|_cor5]]]]]]]]]
'all_suites_index_footer'/0 =
    %% Line 1531
    fun () ->
	let <_cor0> =
	    %% Line 1534
	    apply 'xhtml'/2
		([60|[98|[114|[62|[60|[98|[114|[62|[10]]]]]]]]], [60|[98|[114|[32|[47|[62|[60|[98|[114|[32|[47|[62|[10]]]]]]]]]]]]])
	in  let <_cor1> =
		%% Line 1534
		apply 'footer'/0
		    ()
	    in  %% Line 1532
		[[60|[47|[116|[97|[98|[108|[101|[62|[10]]]]]]]]]|%% Line 1533
								 [[60|[47|[99|[101|[110|[116|[101|[114|[62|[10]]]]]]]]]]|%% Line 1534
															 [_cor0|_cor1]]]
'all_runs_index_footer'/0 =
    %% Line 1536
    fun () ->
	let <_cor0> =
	    %% Line 1537
	    apply 'xhtml'/2
		([], [60|[47|[116|[98|[111|[100|[121|[62|[10]]]]]]]]])
	in  let <_cor1> =
		%% Line 1540
		apply 'xhtml'/2
		    ([60|[98|[114|[62|[60|[98|[114|[62|[10]]]]]]]]], [60|[98|[114|[32|[47|[62|[60|[98|[114|[32|[47|[62|[10]]]]]]]]]]]]])
	    in  let <_cor2> =
		    %% Line 1540
		    apply 'footer'/0
			()
		in  %% Line 1537
		    [_cor0|%% Line 1538
			   [[60|[47|[116|[97|[98|[108|[101|[62|[10]]]]]]]]]|%% Line 1539
									    [[60|[47|[99|[101|[110|[116|[101|[114|[62|[10]]]]]]]]]]|%% Line 1540
																    [_cor1|_cor2]]]]
'footer'/0 =
    %% Line 1542
    fun () ->
	let <_cor0> =
	    %% Line 1544
	    apply 'xhtml'/2
		([60|[104|[114|[62|[10]]]]], [])
	in  let <_cor1> =
		%% Line 1545
		apply 'xhtml'/2
		    ([60|[112|[62|[60|[102|[111|[110|[116|[32|[115|[105|[122|[101|[61|[34|[45|[49|[34|[62|[10]]]]]]]]]]]]]]]]]]]], [60|[100|[105|[118|[32|[99|[108|[97|[115|[115|[61|[34|[99|[111|[112|[121|[114|[105|[103|[104|[116|[34|[62]]]]]]]]]]]]]]]]]]]]]]])
	    in  let <_cor2> =
		    %% Line 1546
		    apply 'year'/0
			()
		in  let <_cor3> =
			%% Line 1548
			apply 'xhtml'/2
			    ([60|[98|[114|[62|[10]]]]], [60|[98|[114|[32|[47|[62|[10]]]]]]])
		    in  let <_cor4> =
			    %% Line 1549
			    apply 'current_time'/0
				()
			in  let <_cor5> =
				%% Line 1550
				apply 'xhtml'/2
				    ([60|[98|[114|[62|[10]]]]], [60|[98|[114|[32|[47|[62|[10]]]]]]])
			    in  let <_cor6> =
				    %% Line 1551
				    apply 'xhtml'/2
					([60|[47|[102|[111|[110|[116|[62|[60|[47|[112|[62|[10]]]]]]]]]]]], [60|[47|[100|[105|[118|[62|[10]]]]]]])
				in  %% Line 1543
				    [[60|[99|[101|[110|[116|[101|[114|[62|[10]]]]]]]]]|%% Line 1544
										       [_cor0|%% Line 1545
											      [_cor1|%% Line 1546
												     [[67|[111|[112|[121|[114|[105|[103|[104|[116|[32|[38|[99|[111|[112|[121|[59|[32]]]]]]]]]]]]]]]]]|[_cor2|%% Line 1547
																									     [[32|[60|[97|[32|[104|[114|[101|[102|[61|[34|[104|[116|[116|[112|[58|[47|[47|[119|[119|[119|[46|[101|[114|[108|[97|[110|[103|[46|[111|[114|[103|[34|[62|[79|[112|[101|[110|[32|[84|[101|[108|[101|[99|[111|[109|[32|[80|[108|[97|[116|[102|[111|[114|[109|[60|[47|[97|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 1548
																																																																		 [_cor3|%% Line 1549
																																																																			[[85|[112|[100|[97|[116|[101|[100|[58|[32|[60|[33|[100|[97|[116|[101|[62]]]]]]]]]]]]]]]]|[_cor4|[[60|[33|[47|[100|[97|[116|[101|[62]]]]]]]]|%% Line 1550
																																																																																				    [_cor5|%% Line 1551
																																																																																					   [_cor6|%% Line 1552
																																																																																						  [[60|[47|[99|[101|[110|[116|[101|[114|[62|[10|[60|[47|[98|[111|[100|[121|[62|[10|[60|[47|[104|[116|[109|[108|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
'body_tag'/0 =
    %% Line 1556
    fun () ->
	let <CTPath> =
	    %% Line 1557
	    call 'code':'lib_dir'
		('common_test')
	in  let <_cor1> =
		%% Line 1558
		call 'filename':'join'
		    (CTPath, [112|[114|[105|[118]]]])
	    in  let <TileFile> =
		    %% Line 1558
		    call 'filename':'join'
			(_cor1, [116|[105|[108|[101|[49|[46|[106|[112|[103]]]]]]]]])
		in  let <_cor3> =
			%% Line 1559
			call 'erlang':'++'
			    (TileFile, %% Line 1560
				       [34|[32|[98|[103|[99|[111|[108|[111|[114|[61|[34|[35|[70|[70|[70|[70|[70|[70|[34|[32|[116|[101|[120|[116|[61|[34|[35|[48|[48|[48|[48|[48|[48|[34|[32|[108|[105|[110|[107|[61|[34|[35|[48|[48|[48|[48|[70|[70|[34|[32|[118|[108|[105|[110|[107|[61|[34|[35|[56|[48|[48|[48|[56|[48|[34|[32|[97|[108|[105|[110|[107|[61|[34|[35|[70|[70|[48|[48|[48|[48|[34|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
		    in  let <_cor4> =
			    %% Line 1559
			    call 'erlang':'++'
				([60|[98|[111|[100|[121|[32|[98|[97|[99|[107|[103|[114|[111|[117|[110|[100|[61|[34]]]]]]]]]]]]]]]]]], _cor3)
			in  %% Line 1559
			    apply 'xhtml'/2
				(_cor4, %% Line 1562
					[60|[98|[111|[100|[121|[62|[10]]]]]]])
'current_time'/0 =
    %% Line 1564
    fun () ->
	let <_cor0> =
	    %% Line 1565
	    call 'calendar':'local_time'
		()
	in  %% Line 1565
	    apply 'format_time'/1
		(_cor0)
'format_time'/1 =
    %% Line 1567
    fun (_cor0) ->
	case _cor0 of
	  <{{Y,Mon,D},{H,Min,S}}> when 'true' ->
	      let <_cor1> =
		  %% Line 1568
		  call 'calendar':'day_of_the_week'
		      (Y, Mon, D)
	      in  let <Weekday> =
		      %% Line 1568
		      apply 'weekday'/1
			  (_cor1)
		  in  let <_cor3> =
			  %% Line 1570
			  apply 'month'/1
			      (Mon)
		      in  let <_cor4> =
			      %% Line 1569
			      call 'io_lib':'format'
				  ([126|[115|[32|[126|[115|[32|[126|[50|[46|[50|[46|[48|[119|[32|[126|[119|[32|[126|[50|[46|[50|[46|[48|[119|[58|[126|[50|[46|[50|[46|[48|[119|[58|[126|[50|[46|[50|[46|[48|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1570
																															  [Weekday|[_cor3|[D|[Y|[H|[Min|[S|[]]]]]]]])
			  in  %% Line 1569
			      call 'lists':'flatten'
				  (_cor4)
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'format_time',1}}] )
	    -| ['compiler_generated'] )
	end
'weekday'/1 =
    %% Line 1572
    fun (_cor0) ->
	case _cor0 of
	  <1> when 'true' ->
	      [77|[111|[110]]]
	  %% Line 1573
	  <2> when 'true' ->
	      [84|[117|[101]]]
	  %% Line 1574
	  <3> when 'true' ->
	      [87|[101|[100]]]
	  %% Line 1575
	  <4> when 'true' ->
	      [84|[104|[117]]]
	  %% Line 1576
	  <5> when 'true' ->
	      [70|[114|[105]]]
	  %% Line 1577
	  <6> when 'true' ->
	      [83|[97|[116]]]
	  %% Line 1578
	  <7> when 'true' ->
	      [83|[117|[110]]]
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'weekday',1}}] )
	    -| ['compiler_generated'] )
	end
'month'/1 =
    %% Line 1580
    fun (_cor0) ->
	case _cor0 of
	  <1> when 'true' ->
	      [74|[97|[110]]]
	  %% Line 1581
	  <2> when 'true' ->
	      [70|[101|[98]]]
	  %% Line 1582
	  <3> when 'true' ->
	      [77|[97|[114]]]
	  %% Line 1583
	  <4> when 'true' ->
	      [65|[112|[114]]]
	  %% Line 1584
	  <5> when 'true' ->
	      [77|[97|[121]]]
	  %% Line 1585
	  <6> when 'true' ->
	      [74|[117|[110]]]
	  %% Line 1586
	  <7> when 'true' ->
	      [74|[117|[108]]]
	  %% Line 1587
	  <8> when 'true' ->
	      [65|[117|[103]]]
	  %% Line 1588
	  <9> when 'true' ->
	      [83|[101|[112]]]
	  %% Line 1589
	  <10> when 'true' ->
	      [79|[99|[116]]]
	  %% Line 1590
	  <11> when 'true' ->
	      [78|[111|[118]]]
	  %% Line 1591
	  <12> when 'true' ->
	      [68|[101|[99]]]
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'month',1}}] )
	    -| ['compiler_generated'] )
	end
'year'/0 =
    %% Line 1593
    fun () ->
	%% Line 1594
	case call 'erlang':'date'
		 () of
	  <{Y,_cor1,_cor2}> when 'true' ->
	      %% Line 1595
	      call 'erlang':'integer_to_list'
		  (Y)
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor0})
	    -| ['compiler_generated'] )
	end
'count_cases'/1 =
    %% Line 1601
    fun (_cor0) ->
	let <SumFile> =
	    %% Line 1602
	    call 'filename':'join'
		(_cor0, [115|[117|[105|[116|[101|[46|[115|[117|[109|[109|[97|[114|[121]]]]]]]]]]]]])
	in  %% Line 1603
	    case apply 'read_summary'/2
		     (SumFile, ['summary']) of
	      %% Line 1604
	      <{'ok',[{Succ,Fail,Skip}|[]]}> when 'true' ->
		  %% Line 1605
		  {Succ,Fail,Skip,'undefined'}
	      %% Line 1606
	      <{'ok',[Summary|[]]}> when 'true' ->
		  %% Line 1607
		  Summary
	      %% Line 1608
	      <{'error',_cor8}> when 'true' ->
		  let <LogFile> =
		      %% Line 1609
		      call 'filename':'join'
			  (_cor0, [115|[117|[105|[116|[101|[46|[108|[111|[103]]]]]]]]])
		  in  %% Line 1610
		      case call 'file':'read_file'
			       (LogFile) of
			%% Line 1611
			<{'ok',Bin}> when 'true' ->
			    let <_cor3> =
				%% Line 1612
				apply 'b2s'/1
				    (Bin)
			    in  %% Line 1612
				case apply 'count_cases1'/2
					 (_cor3, %% Line 1613
						 {'undefined','undefined','undefined','undefined'}) of
				  %% Line 1614
				  <{'error','not_complete'}> when 'true' ->
				      %% Line 1617
				      {0,0,0,0}
				  %% Line 1618
				  <Summary> when 'true' ->
				      do  %% Line 1619
					  apply 'write_summary'/2
					      (SumFile, Summary)
					  %% Line 1620
					  Summary
				end
			%% Line 1622
			<{'error',Reason}> when 'true' ->
			    do  %% Line 1623
				call 'io':'format'
				    ([10|[70|[97|[105|[108|[101|[100|[32|[116|[111|[32|[114|[101|[97|[100|[32|[126|[112|[58|[32|[126|[112|[32|[40|[115|[107|[105|[112|[112|[101|[100|[41|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1624
																											       [LogFile|[Reason|[]]])
				%% Line 1625
				'error'
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor5})
			  -| ['compiler_generated'] )
		      end
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor6})
		-| ['compiler_generated'] )
	    end
'write_summary'/2 =
    %% Line 1629
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1630
	    apply 'term_to_text'/1
		({'summary',_cor0})
	in  let <File> =
		%% Line 1630
		[_cor2|[]]
	    in  %% Line 1631
		apply 'force_write_file'/2
		    (_cor1, File)
'read_summary'/2 =
    %% Line 1633
    fun (_cor1,_cor0) ->
	%% Line 1634
	case call 'file':'consult'
		 (_cor1) of
	  %% Line 1635
	  <{'ok',[]}> when 'true' ->
	      %% Line 1636
	      {'error',[69|[109|[112|[116|[121|[32|[115|[117|[109|[109|[97|[114|[121|[32|[102|[105|[108|[101]]]]]]]]]]]]]]]]]]}
	  %% Line 1637
	  <{'ok',Terms}> when 'true' ->
	      let <_cor5> =
		  %% Line 1638
		  ( fun (_cor3) ->
			case %% Line 1639
			     call 'lists':'keysearch'
				 (_cor3, 1, Terms) of
			  <{'value',{_cor10,Value}}> when 'true' ->
			      %% Line 1640
			      Value
			  ( <_cor2> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor2})
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-read_summary/2-fun-0-'}}] )
	      in  let <_cor6> =
		      %% Line 1638
		      call 'lists':'map'
			  (_cor5, _cor0)
		  in  %% Line 1638
		      {'ok',_cor6}
	  %% Line 1642
	  <{'error',Reason}> when 'true' ->
	      %% Line 1643
	      {'error',Reason}
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'count_cases1'/2 =
    %% Line 1646
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[61|[102|[97|[105|[108|[101|[100|Rest]]]]]]],{Success,_X_Fail,UserSkip,AutoSkip}> when 'true' ->
	      %% Line 1647
	      case apply 'get_number'/1
		       (Rest) of
		<{NextLine,Count}> when 'true' ->
		    %% Line 1648
		    apply 'count_cases1'/2
			(NextLine, {Success,Count,UserSkip,AutoSkip})
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1649
	  <[61|[115|[117|[99|[99|[101|[115|[115|[102|[117|[108|Rest]]]]]]]]]]],{_X_Success,Fail,UserSkip,AutoSkip}> when 'true' ->
	      %% Line 1650
	      case apply 'get_number'/1
		       (Rest) of
		<{NextLine,Count}> when 'true' ->
		    %% Line 1651
		    apply 'count_cases1'/2
			(NextLine, {Count,Fail,UserSkip,AutoSkip})
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1652
	  <[61|[115|[107|[105|[112|[112|[101|[100|Rest]]]]]]]],{Success,Fail,_X_UserSkip,_X_AutoSkip}> when 'true' ->
	      %% Line 1653
	      case apply 'get_number'/1
		       (Rest) of
		<{NextLine,Count}> when 'true' ->
		    %% Line 1654
		    apply 'count_cases1'/2
			(NextLine, {Success,Fail,Count,'undefined'})
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1655
	  <[61|[117|[115|[101|[114|[95|[115|[107|[105|[112|[112|[101|[100|Rest]]]]]]]]]]]]],{Success,Fail,_X_UserSkip,AutoSkip}> when 'true' ->
	      %% Line 1656
	      case apply 'get_number'/1
		       (Rest) of
		<{NextLine,Count}> when 'true' ->
		    %% Line 1657
		    apply 'count_cases1'/2
			(NextLine, {Success,Fail,Count,AutoSkip})
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1658
	  <[61|[97|[117|[116|[111|[95|[115|[107|[105|[112|[112|[101|[100|Rest]]]]]]]]]]]]],{Success,Fail,UserSkip,_X_AutoSkip}> when 'true' ->
	      %% Line 1659
	      case apply 'get_number'/1
		       (Rest) of
		<{NextLine,Count}> when 'true' ->
		    %% Line 1660
		    apply 'count_cases1'/2
			(NextLine, {Success,Fail,UserSkip,Count})
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1661
	  <[],{Su,F,USk,_X_ASk}>
	      when let <_cor7> =
		    call 'erlang':'=:='
			(Su, 'undefined')
		in  let <_cor8> =
			call 'erlang':'=:='
			    (F, 'undefined')
		    in  let <_cor9> =
			    %% Line 1662
			    call 'erlang':'=:='
				(USk, 'undefined')
			in  let <_cor10> =
				call 'erlang':'or'
				    (_cor8, _cor9)
			    in  call 'erlang':'or'
				    (_cor7, _cor10) ->
	      %% Line 1663
	      {'error','not_complete'}
	  %% Line 1664
	  <[],Counters> when 'true' ->
	      %% Line 1665
	      Counters
	  %% Line 1666
	  <Other,Counters> when 'true' ->
	      let <_cor11> =
		  %% Line 1667
		  apply 'skip_to_nl'/1
		      (Other)
	      in  %% Line 1667
		  apply 'count_cases1'/2
		      (_cor11, Counters)
	end
'get_number'/1 =
    %% Line 1669
    fun (_cor0) ->
	case _cor0 of
	  <[32|Rest]> when 'true' ->
	      %% Line 1670
	      apply 'get_number'/1
		  (Rest)
	  %% Line 1671
	  <[Digit|Rest]>
	      when let <_cor1> =
		    call 'erlang':'=<'
			(48, Digit)
		in  let <_cor2> =
			call 'erlang':'=<'
			    (Digit, 57)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      let <_cor3> =
		  %% Line 1672
		  call 'erlang':'-'
		      (Digit, 48)
	      in  %% Line 1672
		  apply 'get_number'/2
		      (Rest, _cor3)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'get_number',1}}] )
	    -| ['compiler_generated'] )
	end
'get_number'/2 =
    %% Line 1674
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Digit|Rest],Acc>
	      when let <_cor2> =
		    call 'erlang':'=<'
			(48, Digit)
		in  let <_cor3> =
			call 'erlang':'=<'
			    (Digit, 57)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor4> =
		  %% Line 1675
		  call 'erlang':'*'
		      (Acc, 10)
	      in  let <_cor5> =
		      %% Line 1675
		      call 'erlang':'+'
			  (_cor4, Digit)
		  in  let <_cor6> =
			  %% Line 1675
			  call 'erlang':'-'
			      (_cor5, 48)
		      in  %% Line 1675
			  apply 'get_number'/2
			      (Rest, _cor6)
	  %% Line 1676
	  <[10|Rest],Acc> when 'true' ->
	      %% Line 1677
	      {Rest,Acc}
	  %% Line 1678
	  <[_cor9|Rest],Acc> when 'true' ->
	      %% Line 1679
	      apply 'get_number'/2
		  (Rest, Acc)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'get_number',2}}] )
	    -| ['compiler_generated'] )
	end
'skip_to_nl'/1 =
    %% Line 1681
    fun (_cor0) ->
	case _cor0 of
	  <[10|Rest]> when 'true' ->
	      %% Line 1682
	      Rest
	  %% Line 1683
	  <[_cor2|Rest]> when 'true' ->
	      %% Line 1684
	      apply 'skip_to_nl'/1
		  (Rest)
	  %% Line 1685
	  <[]> when 'true' ->
	      %% Line 1686
	      []
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'skip_to_nl',1}}] )
	    -| ['compiler_generated'] )
	end
'config_table'/1 =
    %% Line 1689
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1690
	    apply 'config_table_header'/0
		()
	in  let <_cor2> =
		%% Line 1690
		apply 'config_table1'/1
		    (_cor0)
	    in  %% Line 1690
		[_cor1|_cor2]
'config_table_header'/0 =
    %% Line 1692
    fun () ->
	let <_cor0> =
	    %% Line 1694
	    apply 'xhtml'/2
		([[60|[104|[50|[62|[67|[111|[110|[102|[105|[103|[117|[114|[97|[116|[105|[111|[110|[60|[47|[104|[50|[62|[10|[60|[116|[97|[98|[108|[101|[32|[98|[111|[114|[100|[101|[114|[61|[34|[51|[34|[32|[99|[101|[108|[108|[112|[97|[100|[100|[105|[110|[103|[61|[34|[53|[34|[32|[98|[103|[99|[111|[108|[111|[114|[61|[34]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[35|[65|[68|[68|[56|[69|[54]]]]]]]|[[34|[62|[10]]]]]], %% Line 1696
																																																						       [[60|[104|[52|[62|[67|[79|[78|[70|[73|[71|[85|[82|[65|[84|[73|[79|[78|[60|[47|[104|[52|[62|[10]]]]]]]]]]]]]]]]]]]]]]]|[[60|[116|[97|[98|[108|[101|[32|[105|[100|[61|[34]]]]]]]]]]]|[[83|[111|[114|[116|[97|[98|[108|[101|[84|[97|[98|[108|[101]]]]]]]]]]]]]|[[34|[62|[10]]]|[[60|[116|[104|[101|[97|[100|[62|[10]]]]]]]]]]]]])
	in  let <_cor1> =
		%% Line 1700
		apply 'xhtml'/2
		    ([], [60|[47|[116|[104|[101|[97|[100|[62|[10|[60|[116|[98|[111|[100|[121|[62|[10]]]]]]]]]]]]]]]]])
	    in  %% Line 1693
		[_cor0|%% Line 1699
		       [[60|[116|[114|[62|[60|[116|[104|[62|[75|[101|[121|[60|[47|[116|[104|[62|[60|[116|[104|[62|[86|[97|[108|[117|[101|[60|[47|[116|[104|[62|[60|[47|[116|[114|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 1700
																											     [_cor1|%% Line 1701
																												    []]]]
'config_table1'/1 =
    %% Line 1703
    fun (_cor0) ->
	case _cor0 of
	  <[{Key,Value}|Vars]> when 'true' ->
	      let <_cor4> =
		  %% Line 1704
		  call 'erlang':'atom_to_list'
		      (Key)
	      in  let <_cor5> =
		      %% Line 1705
		      call 'io_lib':'format'
			  ([126|[112]], [Value|[]])
		  in  let <_cor1> =
			  %% Line 1706
			  apply 'odd_or_even'/0
			      ()
		      in  let <_cor2> =
			      %% Line 1707
			      call 'erlang':'atom_to_list'
				  (Key)
			  in  let <_cor3> =
				  %% Line 1708
				  call 'io_lib':'format'
				      ([126|[112]], [Value|[]])
			      in  let <_cor6> =
				      %% Line 1704
				      apply 'xhtml'/2
					  ([[60|[116|[114|[62|[60|[116|[100|[62]]]]]]]]|[_cor4|[[60|[47|[116|[100|[62|[10]]]]]]|%% Line 1705
																[[60|[116|[100|[62|[60|[112|[114|[101|[62]]]]]]]]]|[_cor5|[[60|[47|[112|[114|[101|[62|[60|[47|[116|[100|[62|[60|[47|[116|[114|[62|[10]]]]]]]]]]]]]]]]]]]]]]], %% Line 1706
																																			      [[60|[116|[114|[32|[99|[108|[97|[115|[115|[61|[34]]]]]]]]]]]|[_cor1|[[34|[62|[10]]]|%% Line 1707
																																														  [[60|[116|[100|[62]]]]|[_cor2|[[60|[47|[116|[100|[62|[10]]]]]]|%% Line 1708
																																																						 [[60|[116|[100|[62]]]]|[_cor3|[[60|[47|[116|[100|[62|[10|[60|[47|[116|[114|[62|[10]]]]]]]]]]]]]]]]]]]]])
				  in  let <_cor7> =
					  %% Line 1709
					  apply 'config_table1'/1
					      (Vars)
				      in  %% Line 1704
					  [_cor6|_cor7]
	  %% Line 1710
	  <[]> when 'true' ->
	      let <_cor8> =
		  %% Line 1711
		  apply 'xhtml'/2
		      ([], [60|[47|[116|[98|[111|[100|[121|[62|[10]]]]]]]]])
	      in  %% Line 1711
		  [_cor8|[[60|[47|[116|[97|[98|[108|[101|[62|[10]]]]]]]]]]]
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'config_table1',1}}] )
	    -| ['compiler_generated'] )
	end
'make_all_runs_index'/1 =
    %% Line 1714
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1715
	    apply 'basic_html'/0
		()
	in  do  %% Line 1715
		call 'erlang':'put'
		    ('basic_html', _cor1)
		let <AbsName> =
		    %% Line 1716
		    call 'filename':'absname'
			([97|[108|[108|[95|[114|[117|[110|[115|[46|[104|[116|[109|[108]]]]]]]]]]]]])
		in  do  %% Line 1717
			apply 'notify_and_lock_file'/1
			    (AbsName)
			do  %% Line 1718
			    case <> of
			      <>
				  when call 'erlang':'=:='
					(_cor0,
					 'start') ->
				  'ok'
			      %% Line 1719
			      <> when 'true' ->
				  let <_cor3> =
				      call 'erlang':'++'
					  (AbsName, [46|[46|[46|[32]]]])
				  in  let <_cor4> =
					  call 'erlang':'++'
					      ([85|[112|[100|[97|[116|[105|[110|[103|[32]]]]]]]]], _cor3)
				      in  call 'io':'put_chars'
					      (_cor4)
			    end
			    let <_cor7> =
				%% Line 1724
				case <> of
				  <>
				      when call 'erlang':'=:='
					    (_cor0,
					     'refresh') ->
				      %% Line 1725
				      'save_only'
				  %% Line 1726
				  <> when 'true' ->
				      %% Line 1727
				      case call 'application':'get_env'
					       ('common_test', 'disable_log_cache') of
					%% Line 1728
					<{'ok','true'}> when 'true' ->
					    %% Line 1729
					    'disabled'
					%% Line 1730
					<_cor32> when 'true' ->
					    %% Line 1731
					    case call 'erlang':'get'
						     ('ct_log_cache') of
					      %% Line 1732
					      <'undefined'> when 'true' ->
						  %% Line 1733
						  call 'file':'read_file'
						      ([99|[116|[95|[108|[111|[103|[95|[99|[97|[99|[104|[101]]]]]]]]]]]])
					      %% Line 1734
					      <LogCacheBin> when 'true' ->
						  %% Line 1735
						  {'ok',LogCacheBin}
					    end
				      end
				end
			    in  let <_cor9> =
				    %% Line 1740
				    apply 'logdir_prefix'/0
					()
				in  let <_cor10> =
					%% Line 1740
					call 'erlang':'++'
					    (_cor9, [42|[46|[42]]])
				    in  let <Dirs> =
					    %% Line 1740
					    call 'filelib':'wildcard'
						(_cor10)
					in  let <_cor12> =
						catch
						    %% Line 1741
						    apply 'sort_all_runs'/1
							(Dirs)
					    in  let <LogCacheInfo> =
						    %% Line 1743
						    apply 'get_cache_data'/1
							(_cor7)
						in  let <_cor29> =
							%% Line 1746
							case LogCacheInfo of
							  %% Line 1747
							  <{'ok',LogCache}> when 'true' ->
							      %% Line 1749
							      apply 'make_all_runs_from_cache'/3
								  (AbsName, _cor12, LogCache)
							  %% Line 1751
							  <_X_WhyNot> when 'true' ->
							      let <Header> =
								  %% Line 1753
								  apply 'all_runs_header'/0
								      ()
							      in  let <GetLogResult> =
								      %% Line 1755
								      ( fun (_cor18,_cor17) ->
									    case <_cor18,_cor17> of
									      <Dir,{RunData,LogTxt}> when 'true' ->
										  %% Line 1756
										  case apply 'runentry'/3
											   (Dir, %% Line 1757
												 'undefined', %% Line 1758
													      'undefined') of
										    <{Tot,XHTML,IxLink}> when 'true' ->
											%% Line 1759
											{[{Dir,Tot,IxLink}|RunData],[XHTML|LogTxt]}
										    ( <_cor16> when 'true' ->
											  primop 'match_fail'
											      ({'badmatch',_cor16})
										      -| ['compiler_generated'] )
										  end
									      ( <_cor20,_cor19> when 'true' ->
										    ( primop 'match_fail'
											  ({'function_clause',_cor20,_cor19})
										      -| [{'function_name',{'-make_all_runs_index/1-fun-0-',2}}] )
										-| ['compiler_generated'] )
									    end
									-| [{'id',{0,0,'-make_all_runs_index/1-fun-0-'}}] )
								  in  %% Line 1761
								      case %% Line 1762
									   call 'lists':'foldr'
									       (GetLogResult, {[],[]}, _cor12) of
									<{AllRunsData,Index}> when 'true' ->
									    do  %% Line 1765
										case <> of
										  <>
										      when call 'erlang':'=:='
											    (_cor7,
											     'disabled') ->
										      'ok'
										  %% Line 1766
										  <> when 'true' ->
										      apply 'update_all_runs_in_cache'/1
											  (AllRunsData)
										end
										let <_cor23> =
										    %% Line 1772
										    apply 'all_runs_index_footer'/0
											()
										in  let <_cor24> =
											%% Line 1771
											call 'erlang':'++'
											    (Index, _cor23)
										    in  let <_cor25> =
											    %% Line 1771
											    call 'erlang':'++'
												(Header, _cor24)
											in  let <_cor26> =
												%% Line 1770
												call 'unicode':'characters_to_binary'
												    (_cor25)
											    in  let <_cor33> =
												    %% Line 1769
												    call 'file':'write_file'
													(AbsName, _cor26)
												in  %% Line 1769
												    case _cor33 of
												      <'ok'> when 'true' ->
													  ( _cor33
													    -| ['compiler_generated'] )
												      ( <_cor27> when 'true' ->
													    primop 'match_fail'
														({'badmatch',_cor27})
													-| ['compiler_generated'] )
												    end
									( <_cor22> when 'true' ->
									      primop 'match_fail'
										  ({'badmatch',_cor22})
									  -| ['compiler_generated'] )
								      end
							end
						    in  do  %% Line 1774
							    apply 'notify_and_unlock_file'/1
								(AbsName)
							    do  %% Line 1775
								case <> of
								  <>
								      when call 'erlang':'=:='
									    (_cor0,
									     'start') ->
								      'ok'
								  %% Line 1776
								  <> when 'true' ->
								      call 'io':'put_chars'
									  ([100|[111|[110|[101|[10]]]]])
								end
								_cor29
'make_all_runs_from_cache'/3 =
    %% Line 1780
    fun (_cor2,_cor1,_cor0) ->
	let <Header> =
	    %% Line 1781
	    apply 'all_runs_header'/0
		()
	in  let <AllRunsDirs> =
		%% Line 1784
		apply 'dir_diff_all_runs'/2
		    (_cor1, _cor0)
	    in  let <GetLogResult> =
		    %% Line 1787
		    ( fun (_cor9,_cor8) ->
			  case <_cor9,_cor8> of
			    <{Dir,'no_test_data',IxLink},{RunData,LogTxt}> when 'true' ->
				%% Line 1788
				case apply 'runentry'/3
					 (Dir, 'undefined', IxLink) of
				  <{Tot,XHTML,_cor22}> when 'true' ->
				      %% Line 1789
				      {[{Dir,Tot,IxLink}|RunData],[XHTML|LogTxt]}
				  ( <_cor5> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor5})
				    -| ['compiler_generated'] )
				end
			    %% Line 1790
			    <{Dir,CachedTotals,IxLink},{RunData,LogTxt}> when 'true' ->
				%% Line 1792
				case apply 'runentry'/3
					 (Dir, CachedTotals, IxLink) of
				  <{Tot,XHTML,_cor23}> when 'true' ->
				      %% Line 1793
				      {[{Dir,Tot,IxLink}|RunData],[XHTML|LogTxt]}
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor6})
				    -| ['compiler_generated'] )
				end
			    %% Line 1794
			    <Dir,{RunData,LogTxt}> when 'true' ->
				%% Line 1796
				case apply 'runentry'/3
					 (Dir, 'undefined', 'undefined') of
				  <{Tot,XHTML,IxLink}> when 'true' ->
				      %% Line 1797
				      {[{Dir,Tot,IxLink}|RunData],[XHTML|LogTxt]}
				  ( <_cor7> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor7})
				    -| ['compiler_generated'] )
				end
			    ( <_cor11,_cor10> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor11,_cor10})
				    -| [{'function_name',{'-make_all_runs_from_cache/3-fun-0-',2}}] )
			      -| ['compiler_generated'] )
			  end
		      -| [{'id',{0,0,'-make_all_runs_from_cache/3-fun-0-'}}] )
		in  %% Line 1799
		    case call 'lists':'foldr'
			     (GetLogResult, {[],[]}, AllRunsDirs) of
		      <{AllRunsData,Index}> when 'true' ->
			  do  %% Line 1801
			      apply 'update_all_runs_in_cache'/2
				  (AllRunsData, _cor0)
			      let <_cor14> =
				  %% Line 1806
				  apply 'all_runs_index_footer'/0
				      ()
			      in  let <_cor15> =
				      %% Line 1805
				      call 'erlang':'++'
					  (Index, _cor14)
				  in  let <_cor16> =
					  %% Line 1805
					  call 'erlang':'++'
					      (Header, _cor15)
				      in  let <_cor17> =
					      %% Line 1804
					      call 'unicode':'characters_to_binary'
						  (_cor16)
					  in  let <_cor24> =
						  %% Line 1803
						  call 'file':'write_file'
						      (_cor2, _cor17)
					      in  %% Line 1803
						  case _cor24 of
						    <'ok'> when 'true' ->
							( _cor24
							  -| ['compiler_generated'] )
						    ( <_cor18> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor18})
						      -| ['compiler_generated'] )
						  end
		      ( <_cor13> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor13})
			-| ['compiler_generated'] )
		    end
'update_all_runs_in_cache'/1 =
    %% Line 1808
    fun (_cor0) ->
	%% Line 1809
	case call 'erlang':'get'
		 ('ct_log_cache') of
	  %% Line 1810
	  <'undefined'> when 'true' ->
	      let <_cor1> =
		  %% Line 1811
		  apply 'cache_vsn'/0
		      ()
	      in  let <LogCache> =
		      %% Line 1811
		      {'log_cache',_cor1,_cor0,[]}
		  in  let <_cor4> =
			  %% Line 1813
			  call 'erlang':'self'
			      ()
		      in  let <_cor3> =
			      %% Line 1813
			      call 'erlang':'whereis'
				  ('ct_logs')
			  in  %% Line 1813
			      case <_cor4,_cor3> of
				%% Line 1814
				<_X_Pid,_cor11>
				    when call 'erlang':'=:='
					  (_cor11,
					   _X_Pid) ->
				    let <_cor5> =
					%% Line 1817
					call 'erlang':'term_to_binary'
					    (LogCache)
				    in  %% Line 1817
					call 'erlang':'put'
					    ('ct_log_cache', _cor5)
				%% Line 1818
				<_fol324,_fol325> when 'true' ->
				    let <_cor6> =
					%% Line 1819
					call 'erlang':'term_to_binary'
					    (LogCache)
				    in  %% Line 1819
					call 'file':'write_file'
					    ([99|[116|[95|[108|[111|[103|[95|[99|[97|[99|[104|[101]]]]]]]]]]]], _cor6)
			      end
	  %% Line 1821
	  <SavedLogCache> when 'true' ->
	      let <_cor8> =
		  %% Line 1822
		  call 'erlang':'binary_to_term'
		      (SavedLogCache)
	      in  %% Line 1822
		  apply 'update_all_runs_in_cache'/2
		      (_cor0, _cor8)
	end
'update_all_runs_in_cache'/2 =
    %% Line 1825
    fun (_cor1,_cor0) ->
	%% Line 1826
	case _cor0 of
	  <{'log_cache',_cor13,_cor14,_cor15}> when 'true' ->
	      let <_cor4> =
		  call 'erlang':'setelement'
		      (3, _cor0, _cor1)
	      in  let <_cor7> =
		      %% Line 1827
		      call 'erlang':'self'
			  ()
		  in  let <_cor6> =
			  %% Line 1827
			  call 'erlang':'whereis'
			      ('ct_logs')
		      in  %% Line 1827
			  case <_cor7,_cor6> of
			    %% Line 1828
			    <_X_Pid,_cor17>
				when call 'erlang':'=:='
				      (_cor17,
				       _X_Pid) ->
				let <_cor8> =
				    %% Line 1831
				    call 'erlang':'term_to_binary'
					(_cor4)
				in  %% Line 1831
				    call 'erlang':'put'
					('ct_log_cache', _cor8)
			    %% Line 1832
			    <_fol329,_fol330> when 'true' ->
				let <_cor9> =
				    %% Line 1833
				    call 'erlang':'term_to_binary'
					(_cor4)
				in  %% Line 1833
				    call 'file':'write_file'
					([99|[116|[95|[108|[111|[103|[95|[99|[97|[99|[104|[101]]]]]]]]]]]], _cor9)
			  end
	  ( <_cor16> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','log_cache'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'sort_all_runs'/1 =
    %% Line 1836
    fun (_cor0) ->
	let <_cor9> =
	    %% Line 1839
	    ( fun (_cor6,_cor5) ->
		  let <_cor1> =
		      %% Line 1841
		      call 'string':'tokens'
			  (_cor6, [46|[95]])
		  in  %% Line 1840
		      case %% Line 1841
			   call 'lists':'reverse'
			       (_cor1) of
			<[SS1|[MM1|[HH1|[Date1|_cor11]]]]> when 'true' ->
			    let <_cor3> =
				%% Line 1843
				call 'string':'tokens'
				    (_cor5, [46|[95]])
			    in  %% Line 1842
				case %% Line 1843
				     call 'lists':'reverse'
					 (_cor3) of
				  <[SS2|[MM2|[HH2|[Date2|_cor12]]]]> when 'true' ->
				      %% Line 1844
				      call 'erlang':'>'
					  ({Date1,HH1,MM1,SS1}, {Date2,HH2,MM2,SS2})
				  ( <_cor4> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor4})
				    -| ['compiler_generated'] )
				end
			( <_cor2> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor2})
			  -| ['compiler_generated'] )
		      end
	      -| [{'id',{0,0,'-sort_all_runs/1-fun-0-'}}] )
	in  %% Line 1839
	    call 'lists':'sort'
		(_cor9, _cor0)
'dir_diff_all_runs'/2 =
    %% Line 1847
    fun (_cor1,_cor0) ->
	%% Line 1848
	( case _cor0 of
	    ( <( {'log_cache',_cor9,_rec32,_cor10}
		 -| ['compiler_generated'] )> when 'true' ->
		  case _rec32 of
		    %% Line 1849
		    <[]> when 'true' ->
			_cor1
		    %% Line 1851
		    <Cached = [{CDir,_cor12,_cor13}|_cor14]> when 'true' ->
			let <_cor4> =
			    %% Line 1853
			    apply 'datestr_from_dirname'/1
				(CDir)
			in  let <AllRunsDirs> =
				%% Line 1853
				apply 'dir_diff_all_runs'/4
				    (_cor1, Cached, _cor4, [])
			    in  %% Line 1854
				call 'lists':'reverse'
				    (AllRunsDirs)
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor11> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','log_cache'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'dir_diff_all_runs'/4 =
    %% Line 1857
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <LogDirs = [Dir|Dirs],Cached = [CElem|CElems],%% Line 1858
							LatestInCache,%% Line 1858
								      AllRunsDirs> when 'true' ->
	      let <DirDate> =
		  %% Line 1859
		  apply 'datestr_from_dirname'/1
		      (Dir)
	      in  %% Line 1860
		  case <> of
		    <>
			when call 'erlang':'>'
			      (DirDate,
			       LatestInCache) ->
			%% Line 1862
			apply 'dir_diff_all_runs'/4
			    (Dirs, Cached, LatestInCache, %% Line 1863
							  [Dir|AllRunsDirs])
		    %% Line 1864
		    <>
			when let <_cor5> =
			      call 'erlang':'=='
				  (DirDate, LatestInCache)
			  in  let <_cor6> =
				  call 'erlang':'=/='
				      (CElems, [])
			      in  call 'erlang':'and'
				      (_cor5, _cor6) ->
			let <_cor8> =
			    %% Line 1871
			    case CElem of
			      %% Line 1872
			      <{_X_CDir,{_X_NodeStr,_X_Label,_X_Logs,{0,0,0,0,0}},_X_IxLink}> when 'true' ->
				  %% Line 1875
				  Dir
			      %% Line 1876
			      <_cor24> when 'true' ->
				  %% Line 1877
				  CElem
			    end
			in  let <_cor10> =
				%% Line 1880
				call 'erlang':'hd'
				    (CElems)
			    in  let <_cor11> =
				    %% Line 1880
				    call 'erlang':'element'
					(1, _cor10)
				in  let <_cor12> =
					%% Line 1880
					apply 'datestr_from_dirname'/1
					    (_cor11)
				    in  %% Line 1879
					apply 'dir_diff_all_runs'/4
					    (Dirs, CElems, _cor12, %% Line 1881
								   [_cor8|AllRunsDirs])
		    %% Line 1882
		    <>
			when let <_cor13> =
			      call 'erlang':'=='
				  (DirDate, LatestInCache)
			  in  let <_cor14> =
				  call 'erlang':'=:='
				      (CElems, [])
			      in  call 'erlang':'and'
				      (_cor13, _cor14) ->
			let <_cor15> =
			    %% Line 1884
			    call 'lists':'reverse'
				(Dirs)
			in  %% Line 1884
			    call 'erlang':'++'
				(_cor15, [CElem|AllRunsDirs])
		    %% Line 1885
		    <>
			when call 'erlang':'=/='
			      (CElems,
			       []) ->
			let <_cor16> =
			    %% Line 1888
			    call 'erlang':'hd'
				(CElems)
			in  let <_cor17> =
				%% Line 1888
				call 'erlang':'element'
				    (1, _cor16)
			    in  let <_cor18> =
				    %% Line 1888
				    apply 'datestr_from_dirname'/1
					(_cor17)
				in  %% Line 1887
				    apply 'dir_diff_all_runs'/4
					(LogDirs, CElems, _cor18, %% Line 1889
								  AllRunsDirs)
		    %% Line 1890
		    <>
			when call 'erlang':'=:='
			      (CElems,
			       []) ->
			let <_cor19> =
			    %% Line 1892
			    call 'lists':'reverse'
				(LogDirs)
			in  %% Line 1892
			    call 'erlang':'++'
				(_cor19, AllRunsDirs)
		    ( <> when 'true' ->
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	  %% Line 1895
	  <[],_X_Cached,_cor25,AllRunsDirs> when 'true' ->
	      %% Line 1896
	      AllRunsDirs
	  ( <_cor23,_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21,_cor20})
		  -| [{'function_name',{'dir_diff_all_runs',4}}] )
	    -| ['compiler_generated'] )
	end
'interactive_link'/0 =
    %% Line 1898
    fun () ->
	let <_cor0> =
	    %% Line 1899
	    apply 'logdir_prefix'/0
		()
	in  let <_cor1> =
		%% Line 1899
		call 'erlang':'++'
		    (_cor0, [42|[46|[42]]])
	    in  let <_cor2> =
		    %% Line 1899
		    call 'filelib':'wildcard'
			(_cor1)
		in  %% Line 1899
		    case call 'lists':'reverse'
			     (_cor2) of
		      <[Dir|_cor14]> when 'true' ->
			  let <CtLog> =
			      %% Line 1900
			      call 'filename':'join'
				  (Dir, [99|[116|[108|[111|[103|[46|[104|[116|[109|[108]]]]]]]]]])
			  in  let <_cor5> =
				  %% Line 1902
				  apply 'xhtml'/2
				      (%% Line 1903
				       [[60|[33|[68|[79|[67|[84|[89|[80|[69|[32|[72|[84|[77|[76|[32|[80|[85|[66|[76|[73|[67|[32|[34|[45|[47|[47|[87|[51|[67|[47|[47|[68|[84|[68|[32|[72|[84|[77|[76|[32|[51|[46|[50|[32|[70|[105|[110|[97|[108|[47|[47|[69|[78|[34|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[60|[104|[116|[109|[108|[62|[10]]]]]]]]], %% Line 1905
																																													      [[60|[33|[68|[79|[67|[84|[89|[80|[69|[32|[104|[116|[109|[108|[32|[80|[85|[66|[76|[73|[67|[32|[34|[45|[47|[47|[87|[51|[67|[47|[47|[68|[84|[68|[32|[88|[72|[84|[77|[76|[32|[49|[46|[48|[32|[84|[114|[97|[110|[115|[105|[116|[105|[111|[110|[97|[108|[47|[47|[69|[78|[34|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[34|[104|[116|[116|[112|[58|[47|[47|[119|[119|[119|[46|[119|[51|[46|[111|[114|[103|[47|[84|[82|[47|[120|[104|[116|[109|[108|[49|[47|[68|[84|[68|[47|[120|[104|[116|[109|[108|[49|[45|[116|[114|[97|[110|[115|[105|[116|[105|[111|[110|[97|[108|[46|[100|[116|[100|[34|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[60|[104|[116|[109|[108|[32|[120|[109|[108|[110|[115|[61|[34|[104|[116|[116|[112|[58|[47|[47|[119|[119|[119|[46|[119|[51|[46|[111|[114|[103|[47|[49|[57|[57|[57|[47|[120|[104|[116|[109|[108|[34|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[120|[109|[108|[58|[108|[97|[110|[103|[61|[34|[101|[110|[34|[32|[108|[97|[110|[103|[61|[34|[101|[110|[34|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
			      in  let <_cor9> =
				      %% Line 1917
				      apply 'uri'/1
					  (CtLog)
				  in  let <_cor10> =
					  %% Line 1918
					  apply 'timestamp'/1
					      (Dir)
				      in  let <Body> =
					      %% Line 1902
					      [_cor5|%% Line 1909
						     [[60|[33|[45|[45|[32|[97|[117|[116|[111|[103|[101|[110|[101|[114|[97|[116|[101|[100|[32|[98|[121|[32|[39|[99|[116|[95|[108|[111|[103|[115|[39|[32|[45|[45|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 1910
																															   [[60|[104|[101|[97|[100|[62|[10]]]]]]]|%% Line 1911
																																				  [[60|[116|[105|[116|[108|[101|[62|[76|[97|[115|[116|[32|[105|[110|[116|[101|[114|[97|[99|[116|[105|[118|[101|[32|[114|[117|[110|[60|[47|[116|[105|[116|[108|[101|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 1912
																																																													       [[60|[109|[101|[116|[97|[32|[104|[116|[116|[112|[45|[101|[113|[117|[105|[118|[61|[34|[99|[97|[99|[104|[101|[45|[99|[111|[110|[116|[114|[111|[108|[34|[32|[99|[111|[110|[116|[101|[110|[116|[61|[34|[110|[111|[45|[99|[97|[99|[104|[101|[34|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 1913
																																																																																																		       [[60|[109|[101|[116|[97|[32|[104|[116|[116|[112|[45|[101|[113|[117|[105|[118|[61|[34|[99|[111|[110|[116|[101|[110|[116|[45|[116|[121|[112|[101|[34|[32|[99|[111|[110|[116|[101|[110|[116|[61|[34|[116|[101|[120|[116|[47|[104|[116|[109|[108|[59|[32|[99|[104|[97|[114|[115|[101|[116|[61|[117|[116|[102|[45|[56|[34|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 1915
																																																																																																																																																			[[60|[47|[104|[101|[97|[100|[62|[10]]]]]]]]|%% Line 1916
																																																																																																																																																								    [[60|[98|[111|[100|[121|[62|[10]]]]]]]|%% Line 1917
																																																																																																																																																													   [[76|[111|[103|[32|[102|[114|[111|[109|[32|[108|[97|[115|[116|[32|[105|[110|[116|[101|[114|[97|[99|[116|[105|[118|[101|[32|[114|[117|[110|[58|[32|[60|[97|[32|[104|[114|[101|[102|[61|[34]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[_cor9|[[34|[62]]|%% Line 1918
																																																																																																																																																																																											       [_cor10|[[60|[47|[97|[62]]]]|[[60|[47|[98|[111|[100|[121|[62|[10]]]]]]]]|[[60|[47|[104|[116|[109|[108|[62|[10]]]]]]]]]]]]]]]]]]]]]]]
					  in  let <_cor12> =
						  %% Line 1922
						  call 'unicode':'characters_to_binary'
						      (Body)
					      in  do  %% Line 1922
						      call 'file':'write_file'
							  ([108|[97|[115|[116|[95|[105|[110|[116|[101|[114|[97|[99|[116|[105|[118|[101|[46|[104|[116|[109|[108]]]]]]]]]]]]]]]]]]]]], _cor12)
						      let <_cor13> =
							  %% Line 1925
							  call 'filename':'absname'
							      ([108|[97|[115|[116|[95|[105|[110|[116|[101|[114|[97|[99|[116|[105|[118|[101|[46|[104|[116|[109|[108]]]]]]]]]]]]]]]]]]]]])
						      in  %% Line 1923
							  call 'io':'format'
							      ([126|[110|[126|[110|[85|[112|[100|[97|[116|[101|[100|[32|[126|[116|[115|[10|[65|[110|[121|[32|[67|[84|[32|[97|[99|[116|[105|[118|[105|[116|[105|[101|[115|[32|[119|[105|[108|[108|[32|[98|[101|[32|[108|[111|[103|[103|[101|[100|[32|[104|[101|[114|[101|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1925
																																														   [_cor13|[]])
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
'runentry'/3 =
    %% Line 1928
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Dir,'undefined',_cor81> when 'true' ->
	      let <TotalsFile> =
		  %% Line 1929
		  call 'filename':'join'
		      (Dir, [116|[111|[116|[97|[108|[115|[46|[105|[110|[102|[111]]]]]]]]]]])
	      in  let <_cor4> =
		      %% Line 1930
		      call 'filename':'join'
			  (Dir, [105|[110|[100|[101|[120|[46|[104|[116|[109|[108]]]]]]]]]])
		  in  let <Index> =
			  %% Line 1930
			  apply 'uri'/1
			      (_cor4)
		      in  let <_cor6> =
			      %% Line 1931
			      apply 'read_totals_file'/1
				  (TotalsFile)
			  in  %% Line 1931
			      apply 'runentry'/3
				  (Dir, _cor6, Index)
	  %% Line 1934
	  <Dir,Totals = {Node,Label,Logs,%% Line 1935
					 {TotSucc,TotFail,UserSkip,AutoSkip,NotBuilt}},%% Line 1935
										       Index> when 'true' ->
	      let <_cor15> =
		  %% Line 1937
		  case <> of
		    <>
			when try
			      let <_cor7> =
				  call 'erlang':'>'
				      (TotFail, 0)
			      in  let <_cor8> =
				      call 'erlang':'>'
					  (NotBuilt, 0)
				  in  let <_cor9> =
					  call 'erlang':'or'
					      (_cor7, _cor8)
				      in  let <_cor10> =
					      %% Line 1938
					      call 'erlang':'+'
						  (TotSucc, TotFail)
					  in  let <_cor11> =
						  %% Line 1938
						  call 'erlang':'+'
						      (_cor10, UserSkip)
					      in  let <_cor12> =
						      %% Line 1938
						      call 'erlang':'+'
							  (_cor11, AutoSkip)
						  in  let <_cor13> =
							  %% Line 1938
							  call 'erlang':'=='
							      (_cor12, 0)
						      in  call 'erlang':'or'
							      (_cor9, _cor13)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			let <_cor14> =
			    %% Line 1940
			    call 'erlang':'integer_to_list'
				(TotFail)
			in  %% Line 1939
			    [[60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34|[114|[101|[100|[34|[62]]]]]]]]]]]]]]]]]]|%% Line 1940
																  [_cor14|[[60|[47|[102|[111|[110|[116|[62]]]]]]]]]]
		    %% Line 1941
		    <> when 'true' ->
			%% Line 1942
			call 'erlang':'integer_to_list'
			    (TotFail)
		  end
	      in  let <AllSkip,UserSkipStr,AutoSkipStr> =
		      %% Line 1945
		      case <> of
			<>
			    when call 'erlang':'=:='
				  (AutoSkip,
				   'undefined') ->
			    <UserSkip,[63],[63]>
			%% Line 1946
			<> when 'true' ->
			    let <_cor18> =
				%% Line 1947
				case <> of
				  <>
				      when call 'erlang':'>'
					    (AutoSkip,
					     0) ->
				      let <_cor17> =
					  %% Line 1949
					  call 'erlang':'integer_to_list'
					      (AutoSkip)
				      in  %% Line 1948
					  [[60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34|[98|[114|[111|[119|[110|[34|[62]]]]]]]]]]]]]]]]]]]]|%% Line 1949
																			   [_cor17|%% Line 1950
																				   [[60|[47|[102|[111|[110|[116|[62]]]]]]]]]]
				  %% Line 1951
				  <> when 'true' ->
				      call 'erlang':'integer_to_list'
					  (AutoSkip)
				end
			    in  let <_cor21> =
				    %% Line 1953
				    call 'erlang':'+'
					(UserSkip, AutoSkip)
				in  let <_cor20> =
					%% Line 1953
					call 'erlang':'integer_to_list'
					    (UserSkip)
				    in  <_cor21,_cor20,_cor18>
		      end
		  in  let <_cor25> =
			  %% Line 1955
			  case call 'erlang':'length'
				   (Logs) of
			    %% Line 1956
			    <0> when 'true' ->
				[45]
			    %% Line 1957
			    <N> when 'true' ->
				call 'erlang':'integer_to_list'
				    (N)
			  end
		      in  let <StripExt> =
			      %% Line 1960
			      ( fun (_cor31) ->
				    let <_cor28> =
					%% Line 1962
					call 'erlang':'length'
					    (_cor31)
				    in  let <_cor29> =
					    %% Line 1962
					    call 'erlang':'-'
						(_cor28, 5)
					in  let <_cor30> =
						%% Line 1961
						call 'string':'sub_string'
						    (_cor31, 1, _cor29)
					    in  %% Line 1963
						call 'erlang':'++'
						    (_cor30, [44|[32]])
				-| [{'id',{0,0,'-runentry/3-fun-0-'}}] )
			  in  let <Polish> =
				  %% Line 1965
				  ( fun (_cor35) ->
					case call 'lists':'reverse'
						 (_cor35) of
					  %% Line 1966
					  <[32|[44|Rev]]> when 'true' ->
					      call 'lists':'reverse'
						  (Rev)
					  %% Line 1967
					  <[44|Rev]> when 'true' ->
					      call 'lists':'reverse'
						  (Rev)
					  %% Line 1968
					  <_cor82> when 'true' ->
					      _cor35
					end
				    -| [{'id',{0,0,'-runentry/3-fun-1-'}}] )
			      in  let <_cor38> =
				      %% Line 1971
				      call 'lists':'map'
					  (StripExt, Logs)
				  in  let <_cor39> =
					  %% Line 1971
					  call 'lists':'flatten'
					      (_cor38)
				      in  let <TestNames> =
					      %% Line 1971
					      apply Polish
						  (_cor39)
					  in  let <_cor46> =
						  %% Line 1973
						  case <> of
						    <>
							when call 'erlang':'=:='
							      (TestNames,
							       []) ->
							%% Line 1974
							[]
						    %% Line 1975
						    <>
							when try
							      let <_cor41> =
								  call 'erlang':'length'
								      (TestNames)
							      in  call 'erlang':'<'
								      (_cor41, 60)
							  of <Try> ->
							      Try
							  catch <T,R> ->
							      'false' ->
							%% Line 1976
							TestNames
						    %% Line 1977
						    <> when 'true' ->
							let <_cor43> =
							    %% Line 1978
							    call 'string':'substr'
								(TestNames, 1, 57)
							in  let <Trunc> =
								%% Line 1978
								apply Polish
								    (_cor43)
							    in  let <_cor45> =
								    %% Line 1980
								    call 'io_lib':'format'
									([126|[116|[115|[46|[46|[46]]]]]], [Trunc|[]])
								in  %% Line 1980
								    call 'lists':'flatten'
									(_cor45)
						  end
					      in  let <_cor48> =
						      %% Line 1982
						      call 'erlang':'+'
							  (TotSucc, TotFail)
						  in  let <Total> =
							  %% Line 1982
							  call 'erlang':'+'
							      (_cor48, AllSkip)
						      in  let <A> =
							      %% Line 1983
							      apply 'xhtml'/2
								  ([[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[99|[101|[110|[116|[101|[114|[62|[60|[102|[111|[110|[116|[32|[115|[105|[122|[101|[61|[34|[45|[49|[34|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[Node|%% Line 1984
																																  [[60|[47|[102|[111|[110|[116|[62|[60|[47|[116|[100|[62|[10]]]]]]]]]]]]]|%% Line 1985
																																									  [[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[99|[101|[110|[116|[101|[114|[62|[60|[102|[111|[110|[116|[32|[115|[105|[122|[101|[61|[34|[45|[49|[34|[62|[60|[98|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[Label|%% Line 1986
																																																																			 [[60|[47|[98|[62|[60|[47|[102|[111|[110|[116|[62|[60|[47|[116|[100|[62|[10]]]]]]]]]]]]]]]]]|%% Line 1987
																																																																														     [[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62]]]]]]]]]]]]]]]]|[_cor25|[[60|[47|[116|[100|[62|[10]]]]]]]]]]]]]]], %% Line 1988
																																																																																																    [[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[99|[101|[110|[116|[101|[114|[62]]]]]]]]]]]]]]]]]|[Node|[[60|[47|[116|[100|[62|[10]]]]]]|%% Line 1989
																																																																																																																	    [[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[99|[101|[110|[116|[101|[114|[62|[60|[98|[62]]]]]]]]]]]]]]]]]]]]|[Label|[[60|[47|[98|[62|[60|[47|[116|[100|[62|[10]]]]]]]]]]|%% Line 1990
																																																																																																																																							[[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62]]]]]]]]]]]]]]]]|[_cor25|[[60|[47|[116|[100|[62|[10]]]]]]]]]]]]]]])
							  in  let <B> =
								  %% Line 1991
								  apply 'xhtml'/2
								      ([[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[99|[101|[110|[116|[101|[114|[32|[116|[105|[116|[108|[101|[61|[39]]]]]]]]]]]]]]]]]]]]]]]]|[TestNames|%% Line 1992
																											   [[39|[62|[60|[102|[111|[110|[116|[32|[115|[105|[122|[101|[61|[34|[45|[49|[34|[62|[32]]]]]]]]]]]]]]]]]]]|%% Line 1993
																																								   [_cor46|[[60|[47|[102|[111|[110|[116|[62|[60|[47|[116|[100|[62|[10]]]]]]]]]]]]]]]]]], %% Line 1994
																																																			 [[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[99|[101|[110|[116|[101|[114|[32|[116|[105|[116|[108|[101|[61|[39]]]]]]]]]]]]]]]]]]]]]]]]|[TestNames|[[39|[62|[32]]]|%% Line 1995
																																																																							     [_cor46|[[60|[47|[116|[100|[62|[10]]]]]]]]]]])
							      in  let <_cor52> =
								      %% Line 1996
								      call 'erlang':'integer_to_list'
									  (Total)
								  in  let <_cor53> =
									  %% Line 1997
									  call 'erlang':'integer_to_list'
									      (TotSucc)
								      in  let <_cor54> =
									      %% Line 1999
									      call 'erlang':'integer_to_list'
										  (AllSkip)
									  in  let <_cor55> =
										  %% Line 2001
										  call 'erlang':'integer_to_list'
										      (NotBuilt)
									      in  let <C> =
										      %% Line 1996
										      [[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62]]]]]]]]]]]]]]]]|[_cor52|[[60|[47|[116|[100|[62|[10]]]]]]|%% Line 1997
																											   [[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62]]]]]]]]]]]]]]]]|[_cor53|[[60|[47|[116|[100|[62|[10]]]]]]|%% Line 1998
																																												[[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62]]]]]]]]]]]]]]]]|[_cor15|[[60|[47|[116|[100|[62|[10]]]]]]|%% Line 1999
																																																												     [[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62]]]]]]]]]]]]]]]]|[_cor54|%% Line 2000
																																																																									 [[32|[40]]|[UserSkipStr|[[47]|[AutoSkipStr|[[41|[60|[47|[116|[100|[62|[10]]]]]]]|%% Line 2001
																																																																																			  [[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62]]]]]]]]]]]]]]]]|[_cor55|[[60|[47|[116|[100|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]
										  in  let <_cor57> =
											  %% Line 2002
											  call 'erlang':'++'
											      (B, C)
										      in  let <TotalsStr> =
											      %% Line 2002
											      call 'erlang':'++'
												  (A, _cor57)
											  in  let <_cor59> =
												  %% Line 2004
												  apply 'odd_or_even'/0
												      ()
											      in  let <_cor60> =
												      %% Line 2004
												      apply 'xhtml'/2
													  ([60|[116|[114|[62|[10]]]]], [[60|[116|[114|[32|[99|[108|[97|[115|[115|[61|[34]]]]]]]]]]]|[_cor59|[[34|[62|[10]]]]]])
												  in  let <_cor62> =
													  %% Line 2006
													  apply 'timestamp'/1
													      (Dir)
												      in  let <_cor61> =
													      %% Line 2008
													      apply 'timestamp'/1
														  (Dir)
													  in  let <_cor63> =
														  %% Line 2005
														  apply 'xhtml'/2
														      ([[60|[116|[100|[62|[60|[102|[111|[110|[116|[32|[115|[105|[122|[101|[61|[34|[45|[49|[34|[62|[60|[97|[32|[104|[114|[101|[102|[61|[34]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[Index|[[34|[62]]|%% Line 2006
																																					 [_cor62|[[60|[47|[97|[62]]]]|%% Line 2007
																																								      [TotalsStr|[[60|[47|[102|[111|[110|[116|[62|[60|[47|[116|[100|[62|[10]]]]]]]]]]]]]]]]]]]], %% Line 2008
																																																				 [[60|[116|[100|[62|[60|[97|[32|[104|[114|[101|[102|[61|[34]]]]]]]]]]]]]|[Index|[[34|[62]]|[_cor61|[[60|[47|[97|[62]]]]|[TotalsStr|%% Line 2009
																																																																				   [[60|[47|[116|[100|[62|[10]]]]]]]]]]]]])
													      in  let <XHTML> =
														      %% Line 2004
														      [_cor60|%% Line 2005
															      [_cor63|%% Line 2010
																      [[60|[47|[116|[114|[62|[10]]]]]]]]]
														  in  %% Line 2011
														      {Totals,XHTML,Index}
	  %% Line 2014
	  <Dir,_cor83,_cor84> when 'true' ->
	      let <A> =
		  %% Line 2015
		  apply 'xhtml'/2
		      ([[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[99|[101|[110|[116|[101|[114|[62|[60|[102|[111|[110|[116|[32|[115|[105|[122|[101|[61|[34|[45|[49|[34|[32|[99|[111|[108|[111|[114|[61|[34|[114|[101|[100|[34|[62|[84|[101|[115|[116|[32|[100|[97|[116|[97|[32|[109|[105|[115|[115|[105|[110|[103|[32|[111|[114|[32|[99|[111|[114|[114|[117|[112|[116|[60|[47|[102|[111|[110|[116|[62|[60|[47|[116|[100|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[99|[101|[110|[116|[101|[114|[62|[60|[102|[111|[110|[116|[32|[115|[105|[122|[101|[61|[34|[45|[49|[34|[62|[63|[60|[47|[102|[111|[110|[116|[62|[60|[47|[116|[100|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62|[63|[60|[47|[116|[100|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2019
																																																																																																																    [[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[99|[101|[110|[116|[101|[114|[62|[60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34|[114|[101|[100|[34|[62|[84|[101|[115|[116|[32|[100|[97|[116|[97|[32|[109|[105|[115|[115|[105|[110|[103|[32|[111|[114|[32|[99|[111|[114|[114|[117|[112|[116|[60|[47|[102|[111|[110|[116|[62|[60|[47|[116|[100|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[99|[101|[110|[116|[101|[114|[62|[63|[60|[47|[116|[100|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]|[[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62|[63|[60|[47|[116|[100|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]])
	      in  let <B> =
		      %% Line 2023
		      apply 'xhtml'/2
			  ([[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[99|[101|[110|[116|[101|[114|[62|[60|[102|[111|[110|[116|[32|[115|[105|[122|[101|[61|[34|[45|[49|[34|[62|[63|[60|[47|[102|[111|[110|[116|[62|[60|[47|[116|[100|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2024
																																				  [[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[99|[101|[110|[116|[101|[114|[62|[63|[60|[47|[116|[100|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]])
		  in  let <_cor68> =
			  %% Line 2030
			  call 'erlang':'++'
			      (B, [[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62|[63|[60|[47|[116|[100|[62|[10]]]]]]]]]]]]]]]]]]]]]]]|[[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62|[63|[60|[47|[116|[100|[62|[10]]]]]]]]]]]]]]]]]]]]]]]|[[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62|[63|[60|[47|[116|[100|[62|[10]]]]]]]]]]]]]]]]]]]]]]]|[[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62|[63|[60|[47|[116|[100|[62|[10]]]]]]]]]]]]]]]]]]]]]]]|[[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62|[63|[60|[47|[116|[100|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]])
		      in  let <TotalsStr> =
			      %% Line 2030
			      call 'erlang':'++'
				  (A, _cor68)
			  in  let <_cor70> =
				  %% Line 2032
				  call 'filename':'join'
				      (Dir, [105|[110|[100|[101|[120|[46|[104|[116|[109|[108]]]]]]]]]])
			      in  let <Index> =
				      %% Line 2032
				      apply 'uri'/1
					  (_cor70)
				  in  let <_cor72> =
					  %% Line 2034
					  apply 'odd_or_even'/0
					      ()
				      in  let <_cor73> =
					      %% Line 2034
					      apply 'xhtml'/2
						  ([60|[116|[114|[62|[10]]]]], [[60|[116|[114|[32|[99|[108|[97|[115|[115|[61|[34]]]]]]]]]]]|[_cor72|[[34|[62|[10]]]]]])
					  in  let <_cor75> =
						  %% Line 2036
						  apply 'timestamp'/1
						      (Dir)
					      in  let <_cor74> =
						      %% Line 2038
						      apply 'timestamp'/1
							  (Dir)
						  in  let <_cor76> =
							  %% Line 2035
							  apply 'xhtml'/2
							      ([[60|[116|[100|[62|[60|[102|[111|[110|[116|[32|[115|[105|[122|[101|[61|[34|[45|[49|[34|[62|[60|[97|[32|[104|[114|[101|[102|[61|[34]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[Index|[[34|[62]]|%% Line 2036
																														 [_cor75|[[60|[47|[97|[62]]]]|%% Line 2037
																																	      [TotalsStr|[[60|[47|[102|[111|[110|[116|[62|[60|[47|[116|[100|[62|[10]]]]]]]]]]]]]]]]]]]], %% Line 2038
																																													 [[60|[116|[100|[62|[60|[97|[32|[104|[114|[101|[102|[61|[34]]]]]]]]]]]]]|[Index|[[34|[62]]|[_cor74|[[60|[47|[97|[62]]]]|[TotalsStr|%% Line 2039
																																																													   [[60|[47|[116|[100|[62|[10]]]]]]]]]]]]])
						      in  let <XHTML> =
							      %% Line 2034
							      [_cor73|%% Line 2035
								      [_cor76|%% Line 2040
									      [[60|[47|[116|[114|[62|[10]]]]]]]]]
							  in  %% Line 2041
							      {'no_test_data',XHTML,Index}
	end
'write_totals_file'/4 =
    %% Line 2043
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <AbsName> =
	    %% Line 2044
	    call 'filename':'absname'
		(_cor3)
	in  do  %% Line 2045
		apply 'notify_and_lock_file'/1
		    (AbsName)
		let <_cor5> =
		    %% Line 2047
		    call 'erlang':'node'
			()
		in  let <_cor6> =
			%% Line 2047
			call 'erlang':'atom_to_list'
			    (_cor5)
		    in  let <_cor7> =
			    %% Line 2047
			    call 'erlang':'term_to_binary'
				({_cor6,_cor2,_cor1,_cor0})
			in  do  %% Line 2046
				apply 'force_write_file'/2
				    (AbsName, _cor7)
				%% Line 2049
				apply 'notify_and_unlock_file'/1
				    (AbsName)
'read_totals_file'/1 =
    %% Line 2053
    fun (_cor0) ->
	let <AbsName> =
	    %% Line 2054
	    call 'filename':'absname'
		(_cor0)
	in  do  %% Line 2055
		apply 'notify_and_lock_file'/1
		    (AbsName)
		let <_cor10> =
		    %% Line 2057
		    case call 'file':'read_file'
			     (AbsName) of
		      %% Line 2058
		      <{'ok',Bin}> when 'true' ->
			  let <_cor2> =
			      catch
				  %% Line 2059
				  call 'erlang':'binary_to_term'
				      (Bin)
			  in  %% Line 2059
			      case _cor2 of
				%% Line 2060
				<{'EXIT',_X_Reason}> when 'true' ->
				    %% Line 2061
				    {[45],[],'undefined'}
				%% Line 2062
				<{Node,Label,Ls,Tot}> when 'true' ->
				    let <_cor4> =
					%% Line 2063
					case Label of
					  %% Line 2064
					  <'undefined'> when 'true' ->
					      [45]
					  %% Line 2065
					  <_cor13> when 'true' ->
					      Label
					end
				    in  %% Line 2067
					case Tot of
					  %% Line 2068
					  <{_X_Ok,_X_Fail,_X_USkip,_X_ASkip,_X_NoBuild}> when 'true' ->
					      %% Line 2069
					      {Node,_cor4,Ls,Tot}
					  %% Line 2070
					  <{TotSucc,TotFail,AllSkip,NotBuilt}> when 'true' ->
					      %% Line 2071
					      {Node,_cor4,Ls,%% Line 2072
							     {TotSucc,TotFail,AllSkip,'undefined',NotBuilt}}
					  ( <_cor6> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor6})
					    -| ['compiler_generated'] )
					end
				%% Line 2074
				<{Node,Ls,Tot}> when 'true' ->
				    %% Line 2075
				    case Tot of
				      %% Line 2076
				      <{_X_Ok,_X_Fail,_X_USkip,_X_ASkip,_X_NoBuild}> when 'true' ->
					  %% Line 2077
					  {Node,[45],Ls,Tot}
				      %% Line 2078
				      <{TotSucc,TotFail,AllSkip,NotBuilt}> when 'true' ->
					  %% Line 2079
					  {Node,[45],Ls,%% Line 2080
							{TotSucc,TotFail,AllSkip,'undefined',NotBuilt}}
				      ( <_cor7> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor7})
					-| ['compiler_generated'] )
				    end
				%% Line 2083
				<{Ls,Tot}> when 'true' ->
				    {[45],Ls,Tot}
				%% Line 2084
				<Tot> when 'true' ->
				    {[45],[],Tot}
			      end
		      %% Line 2086
		      <Error> when 'true' ->
			  %% Line 2087
			  Error
		    end
		in  do  %% Line 2089
			apply 'notify_and_unlock_file'/1
			    (AbsName)
			_cor10
'force_write_file'/2 =
    %% Line 2092
    fun (_cor1,_cor0) ->
	do  %% Line 2093
	    apply 'force_delete'/1
		(_cor1)
	    %% Line 2094
	    call 'file':'write_file'
		(_cor1, _cor0)
'force_delete'/1 =
    %% Line 2096
    fun (_cor0) ->
	%% Line 2097
	case call 'file':'delete'
		 (_cor0) of
	  %% Line 2098
	  <{'error','eacces'}> when 'true' ->
	      let <_cor1> =
		  %% Line 2099
		  call 'erlang':'++'
		      (_cor0, [46|[111|[108|[100|[46]]]]])
	      in  %% Line 2099
		  apply 'force_rename'/3
		      (_cor0, _cor1, 0)
	  %% Line 2100
	  <Other> when 'true' ->
	      %% Line 2101
	      Other
	end
'force_rename'/3 =
    %% Line 2104
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 2105
	    call 'erlang':'integer_to_list'
		(_cor0)
	in  let <Dest> =
		%% Line 2105
		[_cor1|_cor3]
	    in  %% Line 2106
		case call 'file':'read_file_info'
			 (Dest) of
		  %% Line 2107
		  <{'ok',_cor10}> when 'true' ->
		      let <_cor5> =
			  %% Line 2108
			  call 'erlang':'+'
			      (_cor0, 1)
		      in  %% Line 2108
			  apply 'force_rename'/3
			      (_cor2, _cor1, _cor5)
		  %% Line 2109
		  <{'error',_cor11}> when 'true' ->
		      %% Line 2110
		      call 'file':'rename'
			  (_cor2, Dest)
		  ( <_cor6> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor6})
		    -| ['compiler_generated'] )
		end
'timestamp'/1 =
    %% Line 2114
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2115
	    call 'string':'tokens'
		(_cor0, [46|[45|[95]]])
	in  let <TsR> =
		%% Line 2115
		call 'lists':'reverse'
		    (_cor1)
	    in  let <_cor9> =
		    %% Line 2116
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor6) ->
				  case _cor6 of
				    <[N|_cor4]> when 'true' ->
					let <_cor7> =
					    call 'erlang':'list_to_integer'
						(N)
					in  let <_cor8> =
						apply 'lc$^0'/1
						    (_cor4)
					    in  ( [_cor7|_cor8]
						  -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor6> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor6})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor5> =
			      call 'lists':'sublist'
				  (TsR, 6)
			  in  apply 'lc$^0'/1
				  (_cor5)
		      -| ['list_comprehension'] )
		in  %% Line 2116
		    case _cor9 of
		      <[S|[Min|[H|[D|[M|[Y|[]]]]]]]> when 'true' ->
			  %% Line 2117
			  apply 'format_time'/1
			      ({{Y,M,D},{H,Min,S}})
		      ( <_cor10> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor10})
			-| ['compiler_generated'] )
		    end
'make_all_suites_index'/1 =
    %% Line 2136
    fun (_cor0) ->
	case _cor0 of
	  <When>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 2137
		  apply 'basic_html'/0
		      ()
	      in  do  %% Line 2137
		      call 'erlang':'put'
			  ('basic_html', _cor1)
		      let <AbsIndexName> =
			  %% Line 2138
			  call 'filename':'absname'
			      ([105|[110|[100|[101|[120|[46|[104|[116|[109|[108]]]]]]]]]])
		      in  do  %% Line 2139
			      apply 'notify_and_lock_file'/1
				  (AbsIndexName)
			      let <_cor5> =
				  %% Line 2143
				  case <> of
				    <>
					when call 'erlang':'=:='
					      (When,
					       'refresh') ->
					%% Line 2144
					'save_only'
				    %% Line 2145
				    <> when 'true' ->
					%% Line 2146
					case call 'application':'get_env'
						 ('common_test', 'disable_log_cache') of
					  %% Line 2147
					  <{'ok','true'}> when 'true' ->
					      %% Line 2148
					      'disabled'
					  %% Line 2149
					  <_cor38> when 'true' ->
					      %% Line 2150
					      case call 'erlang':'get'
						       ('ct_log_cache') of
						%% Line 2151
						<'undefined'> when 'true' ->
						    %% Line 2152
						    call 'file':'read_file'
							([99|[116|[95|[108|[111|[103|[95|[99|[97|[99|[104|[101]]]]]]]]]]]])
						%% Line 2153
						<LogCacheBin> when 'true' ->
						    %% Line 2154
						    {'ok',LogCacheBin}
					      end
					end
				  end
			      in  let <_cor8> =
				      %% Line 2159
				      apply 'logdir_prefix'/0
					  ()
				  in  let <_cor9> =
					  %% Line 2159
					  call 'erlang':'++'
					      (_cor8, [46|[42|[47|[42|[46|[108|[111|[103|[115]]]]]]]]])
				      in  let <LogDirs> =
					      %% Line 2159
					      call 'filelib':'wildcard'
						  (_cor9)
					  in  let <LogCacheInfo> =
						  %% Line 2161
						  apply 'get_cache_data'/1
						      (_cor5)
					      in  let <_cor15> =
						      %% Line 2164
						      case LogCacheInfo of
							%% Line 2165
							<{'ok',LogCache}> when 'true' ->
							    %% Line 2167
							    apply 'make_all_suites_index_from_cache'/4
								(When, AbsIndexName, %% Line 2168
										     LogDirs, %% Line 2168
											      LogCache)
							%% Line 2169
							<_X_WhyNot> when 'true' ->
							    let <Sorted> =
								%% Line 2171
								apply 'sort_and_filter_logdirs'/1
								    (LogDirs)
							    in  let <TempData> =
								    %% Line 2172
								    apply 'make_all_suites_index1'/3
									(When, AbsIndexName, Sorted)
								in  do  %% Line 2173
									apply 'notify_and_unlock_file'/1
									    (AbsIndexName)
									do  %% Line 2176
									    case <> of
									      <>
										  when call 'erlang':'=:='
											(_cor5,
											 'disabled') ->
										  'ok'
									      %% Line 2177
									      <> when 'true' ->
										  apply 'update_tests_in_cache'/1
										      (TempData)
									    end
									    %% Line 2179
									    TempData
						      end
						  in  %% Line 2182
						      case _cor15 of
							%% Line 2183
							<Error = {'error',_cor39}> when 'true' ->
							    Error
							%% Line 2184
							<_cor40> when 'true' ->
							    'ok'
						      end
	  %% Line 2189
	  <NewTestData = {_X_TestName,DirName}> when 'true' ->
	      let <_cor18> =
		  %% Line 2190
		  apply 'basic_html'/0
		      ()
	      in  do  %% Line 2190
		      call 'erlang':'put'
			  ('basic_html', _cor18)
		      %% Line 2195
		      case call 'ct_util':'get_testdata'
			       ('test_index') of
			<{AbsIndexName,LogDirData}> when 'true' ->
			    let <_cor20> =
				%% Line 2197
				call 'filename':'split'
				    (AbsIndexName)
			    in  let <CtRunDirPos> =
				    %% Line 2197
				    call 'erlang':'length'
					(_cor20)
				in  let <_cor22> =
					%% Line 2198
					call 'filename':'split'
					    (DirName)
				    in  let <_cor23> =
					    %% Line 2198
					    call 'lists':'sublist'
						(_cor22, %% Line 2199
							 CtRunDirPos)
					in  let <CtRunDir> =
						%% Line 2198
						call 'filename':'join'
						    (_cor23)
					    in  let <_cor25> =
						    %% Line 2201
						    call 'filename':'join'
							(CtRunDir, [116|[111|[116|[97|[108|[115|[46|[105|[110|[102|[111]]]]]]]]]]])
						in  let <_cor27> =
							%% Line 2201
							case apply 'read_totals_file'/1
								 (_cor25) of
							  %% Line 2202
							  <{_cor41,[45],_cor42,_cor43}> when 'true' ->
							      [46|[46|[46]]]
							  %% Line 2203
							  <{_cor44,Lbl,_cor45,_cor46}> when 'true' ->
							      Lbl
							  %% Line 2204
							  <_cor47> when 'true' ->
							      [46|[46|[46]]]
							end
						    in  do  %% Line 2206
							    apply 'notify_and_lock_file'/1
								(AbsIndexName)
							    let <_cor29> =
								catch
								    %% Line 2208
								    apply 'make_all_suites_ix_temp'/4
									(AbsIndexName, %% Line 2209
										       NewTestData, _cor27, %% Line 2211
													    LogDirData)
							    in  let <_cor35> =
								    %% Line 2208
								    case _cor29 of
								      %% Line 2212
								      <{'EXIT',Reason}> when 'true' ->
									  let <_cor30> =
									      %% Line 2213
									      call 'erlang':'++'
										  (AbsIndexName, [33|[10]])
									  in  let <_cor31> =
										  %% Line 2213
										  call 'erlang':'++'
										      ([67|[82|[65|[83|[72|[69|[68|[32|[119|[104|[105|[108|[101|[32|[117|[112|[100|[97|[116|[105|[110|[103|[32]]]]]]]]]]]]]]]]]]]]]]], _cor30)
									      in  do  %% Line 2213
										      call 'io':'put_chars'
											  (_cor31)
										      do  %% Line 2214
											  call 'io':'format'
											      ([126|[112|[126|[110]]]], [Reason|[]])
											  %% Line 2215
											  {'error',Reason}
								      %% Line 2216
								      <{'error',Reason}> when 'true' ->
									  let <_cor32> =
									      %% Line 2217
									      call 'erlang':'++'
										  (AbsIndexName, [10])
									  in  let <_cor33> =
										  %% Line 2217
										  call 'erlang':'++'
										      ([70|[65|[73|[76|[69|[68|[32|[119|[104|[105|[108|[101|[32|[117|[112|[100|[97|[116|[105|[110|[103|[32]]]]]]]]]]]]]]]]]]]]]], _cor32)
									      in  do  %% Line 2217
										      call 'io':'put_chars'
											  (_cor33)
										      do  %% Line 2218
											  call 'io':'format'
											      ([126|[112|[126|[110]]]], [Reason|[]])
											  %% Line 2219
											  {'error',Reason}
								      %% Line 2220
								      <'ok'> when 'true' ->
									  %% Line 2221
									  'ok'
								      %% Line 2222
								      <Err> when 'true' ->
									  do  %% Line 2223
									      call 'io':'format'
										  ([85|[110|[107|[110|[111|[119|[110|[32|[105|[110|[116|[101|[114|[110|[97|[108|[32|[101|[114|[114|[111|[114|[32|[119|[104|[105|[108|[101|[32|[117|[112|[100|[97|[116|[105|[110|[103|[32|[126|[116|[115|[46|[32|[80|[108|[101|[97|[115|[101|[32|[114|[101|[112|[111|[114|[116|[46|[10|[40|[69|[114|[114|[58|[32|[126|[112|[44|[32|[73|[68|[58|[32|[49|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2225
																																																														     [AbsIndexName|[Err|[]]])
									      %% Line 2226
									      {'error',Err}
								    end
								in  do  %% Line 2228
									apply 'notify_and_unlock_file'/1
									    (AbsIndexName)
									_cor35
			( <_cor19> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor19})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor37> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor37})
		  -| [{'function_name',{'make_all_suites_index',1}}] )
	    -| ['compiler_generated'] )
	end
'make_all_suites_index_from_cache'/4 =
    %% Line 2231
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2241
	case apply 'dir_diff_tests'/2
		 (_cor1, _cor0) of
	  <{NewAdded,OldTests}> when 'true' ->
	      let <LogCache1> =
		  %% Line 2243
		  apply 'delete_tests_from_cache'/2
		      (OldTests, _cor0)
	      in  %% Line 2245
		  ( case LogCache1 of
		      ( <( {'log_cache',_cor18,_cor19,_rec33}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <Sorted> =
				apply 'sort_and_filter_logdirs'/2
				    (NewAdded, _rec33)
			    in  let <_cor12> =
				    %% Line 2247
				    case <> of
				      <>
					  when call 'erlang':'=/='
						(Sorted,
						 []) ->
					  %% Line 2248
					  apply 'make_all_suites_index1'/3
					      (_cor3, _cor2, %% Line 2249
							     Sorted)
				      %% Line 2250
				      <> when 'true' ->
					  do  %% Line 2252
					      call 'ct_util':'set_testdata_async'
						  ({'test_index',{_cor2,_rec33}})
					      _rec33
				    end
				in  do  %% Line 2257
					apply 'notify_and_unlock_file'/1
					    (_cor2)
					do  %% Line 2259
					    apply 'update_tests_in_cache'/2
						(_cor12, LogCache1)
					    _cor12
			-| ['compiler_generated'] )
		      ( <_cor20> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','log_cache'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'sort_and_filter_logdirs'/2 =
    %% Line 2262
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <NewDirs,CachedTests>
	      when call 'erlang':'=/='
		    (CachedTests,
		     []) ->
	      let <NewSorted> =
		  %% Line 2263
		  apply 'sort_and_filter_logdirs1'/2
		      (NewDirs, [])
	      in  %% Line 2264
		  apply 'sort_and_filter_logdirs'/3
		      (NewSorted, CachedTests, [])
	  %% Line 2266
	  <NewDirs,_X_CachedTests> when 'true' ->
	      %% Line 2267
	      apply 'sort_and_filter_logdirs'/1
		  (NewDirs)
	end
'sort_and_filter_logdirs'/3 =
    %% Line 2270
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{TestName,IxDirs}|Tests],CachedTests,Combined> when 'true' ->
	      %% Line 2271
	      case call 'lists':'keysearch'
		       (TestName, 1, CachedTests) of
		%% Line 2272
		<{'value',{_cor23,_cor24,_cor25,{IxDir0,_cor26,_cor27},IxDirs0}}>
		    when call 'erlang':'=:='
			  (_cor23,
			   TestName) ->
		    let <_cor3> =
			%% Line 2274
			call 'erlang':'++'
			    (IxDirs, [IxDir0|IxDirs0])
		    in  let <Groups> =
			    %% Line 2273
			    apply 'sort_and_filter_logdirs2'/3
				(TestName, _cor3, %% Line 2275
						  [])
			in  let <_cor5> =
				%% Line 2276
				call 'erlang':'++'
				    (Groups, Combined)
			    in  %% Line 2276
				apply 'sort_and_filter_logdirs'/3
				    (Tests, CachedTests, _cor5)
		%% Line 2277
		<_cor28> when 'true' ->
		    let <_cor9> =
			%% Line 2278
			( fun (_cor7) ->
			      case _cor7 of
				<Elem = {_cor29,_cor30}> when 'true' ->
				    %% Line 2279
				    Elem
				%% Line 2280
				<RunDir> when 'true' ->
				    let <_cor6> =
					%% Line 2281
					call 'filename':'basename'
					    (RunDir)
				    in  %% Line 2281
					{_cor6,RunDir}
			      end
			  -| [{'id',{0,0,'-sort_and_filter_logdirs/3-fun-0-'}}] )
		    in  let <IxDirs1> =
			    %% Line 2278
			    call 'lists':'map'
				(_cor9, %% Line 2282
					IxDirs)
			in  %% Line 2283
			    apply 'sort_and_filter_logdirs'/3
				(Tests, CachedTests, %% Line 2284
						     [{TestName,IxDirs1}|Combined])
	      end
	  %% Line 2286
	  <[],CachedTests,Combined> when 'true' ->
	      let <_cor16> =
		  %% Line 2287
		  ( fun (_cor13,_cor12) ->
			case <_cor13,_cor12> of
			  <{TestName,_cor31},Cached> when 'true' ->
			      %% Line 2288
			      call 'lists':'keydelete'
				  (TestName, 1, Cached)
			  ( <_cor15,_cor14> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor15,_cor14})
				  -| [{'function_name',{'-sort_and_filter_logdirs/3-fun-1-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-sort_and_filter_logdirs/3-fun-1-'}}] )
	      in  let <Cached1> =
		      %% Line 2287
		      call 'lists':'foldl'
			  (_cor16, %% Line 2289
				   CachedTests, %% Line 2289
						Combined)
		  in  let <_cor18> =
			  %% Line 2290
			  apply 'sort_each_group'/1
			      (Combined)
		      in  let <_cor19> =
			      %% Line 2290
			      call 'erlang':'++'
				  (_cor18, Cached1)
			  in  %% Line 2290
			      call 'lists':'keysort'
				  (1, _cor19)
	  ( <_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20})
		  -| [{'function_name',{'sort_and_filter_logdirs',3}}] )
	    -| ['compiler_generated'] )
	end
'sort_and_filter_logdirs'/1 =
    %% Line 2292
    fun (_cor0) ->
	%% Line 2293
	apply 'sort_and_filter_logdirs1'/2
	    (_cor0, [])
'sort_and_filter_logdirs1'/2 =
    %% Line 2296
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Dir|Dirs],Groups> when 'true' ->
	      let <_cor2> =
		  %% Line 2297
		  call 'filename':'basename'
		      (Dir)
	      in  let <TestName> =
		      %% Line 2297
		      call 'filename':'rootname'
			  (_cor2)
		  in  let <_cor4> =
			  %% Line 2298
			  call 'filename':'join'
			      (Dir, [114|[117|[110|[46|[42]]]]])
		      in  %% Line 2298
			  case call 'filelib':'wildcard'
				   (_cor4) of
			    %% Line 2299
			    <RunDirs = [_cor10|_cor11]> when 'true' ->
				let <Groups1> =
				    %% Line 2300
				    apply 'sort_and_filter_logdirs2'/3
					(TestName, RunDirs, Groups)
				in  %% Line 2301
				    apply 'sort_and_filter_logdirs1'/2
					(Dirs, Groups1)
			    %% Line 2302
			    <_cor12> when 'true' ->
				%% Line 2303
				apply 'sort_and_filter_logdirs1'/2
				    (Dirs, Groups)
			  end
	  %% Line 2305
	  <[],Groups> when 'true' ->
	      let <_cor7> =
		  %% Line 2306
		  apply 'sort_each_group'/1
		      (Groups)
	      in  %% Line 2306
		  call 'lists':'keysort'
		      (1, _cor7)
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'sort_and_filter_logdirs1',2}}] )
	    -| ['compiler_generated'] )
	end
'sort_and_filter_logdirs2'/3 =
    %% Line 2308
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <TestName,[RunDir|RunDirs],Groups> when 'true' ->
	      let <_cor3> =
		  %% Line 2309
		  call 'filename':'basename'
		      (RunDir)
	      in  let <Groups1> =
		      %% Line 2309
		      apply 'insert_test'/3
			  (TestName, {_cor3,RunDir}, Groups)
		  in  %% Line 2310
		      apply 'sort_and_filter_logdirs2'/3
			  (TestName, RunDirs, Groups1)
	  %% Line 2311
	  <_cor8,[],Groups> when 'true' ->
	      %% Line 2312
	      Groups
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'sort_and_filter_logdirs2',3}}] )
	    -| ['compiler_generated'] )
	end
'insert_test'/3 =
    %% Line 2315
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Test,IxDir,[{_cor7,IxDirs}|Groups]>
	      when call 'erlang':'=:='
		    (_cor7,
		     Test) ->
	      %% Line 2316
	      [{Test,[IxDir|IxDirs]}|Groups]
	  %% Line 2318
	  <Test,IxDir,[]> when 'true' ->
	      %% Line 2319
	      [{Test,[IxDir|[]]}|[]]
	  %% Line 2320
	  <Test,IxDir,[TestDir|Groups]> when 'true' ->
	      let <_cor3> =
		  %% Line 2321
		  apply 'insert_test'/3
		      (Test, IxDir, Groups)
	      in  %% Line 2321
		  [TestDir|_cor3]
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'insert_test',3}}] )
	    -| ['compiler_generated'] )
	end
'sort_each_group'/1 =
    %% Line 2324
    fun (_cor0) ->
	case _cor0 of
	  <[{Test,IxDirs}|Groups]> when 'true' ->
	      let <_cor6> =
		  %% Line 2325
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[{_cor10,Dir}|_cor2]> when 'true' ->
				      let <_cor5> =
					  apply 'lc$^0'/1
					      (_cor2)
				      in  ( [Dir|_cor5]
					    -| ['compiler_generated'] )
				  ( <[_cor1|_cor2]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor2)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor3> =
			    call 'lists':'keysort'
				(1, IxDirs)
			in  apply 'lc$^0'/1
				(_cor3)
		    -| ['list_comprehension'] )
	      in  let <Sorted> =
		      %% Line 2325
		      call 'lists':'reverse'
			  (_cor6)
		  in  let <_cor8> =
			  %% Line 2326
			  apply 'sort_each_group'/1
			      (Groups)
		      in  %% Line 2326
			  [{Test,Sorted}|_cor8]
	  %% Line 2327
	  <[]> when 'true' ->
	      %% Line 2328
	      []
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'sort_each_group',1}}] )
	    -| ['compiler_generated'] )
	end
'dir_diff_tests'/2 =
    %% Line 2330
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <LogDirs,{'log_cache',_cor10,_cor11,CachedTests}> when 'true' ->
	      let <_cor6> =
		  %% Line 2332
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[{TestName,_cor12,_cor13,_cor14,_cor15}|_cor3]> when 'true' ->
				      let <_cor5> =
					  apply 'lc$^0'/1
					      (_cor3)
				      in  ( [TestName|_cor5]
					    -| ['compiler_generated'] )
				  ( <[_cor2|_cor3]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor3)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (CachedTests)
		    -| ['list_comprehension'] )
	      in  %% Line 2333
		  apply 'dir_diff_tests'/6
		      (LogDirs, CachedTests, [], _cor6, [], [])
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'dir_diff_tests',2}}] )
	    -| ['compiler_generated'] )
	end
'dir_diff_tests'/6 =
    %% Line 2335
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[LogDir|LogDirs],CachedTests,NewAdded,DeletedTests,%% Line 2336
							      ValidLast,%% Line 2336
									InvalidLast> when 'true' ->
	      let <_cor6> =
		  %% Line 2337
		  call 'filename':'basename'
		      (LogDir)
	      in  let <TestName> =
		      %% Line 2337
		      call 'filename':'rootname'
			  (_cor6)
		  in  let <Time> =
			  %% Line 2338
			  apply 'datestr_from_dirname'/1
			      (LogDir)
		      in  let <New,DeletedTests1,ValidLast1,InvalidLast1> =
			      %% Line 2341
			      case call 'lists':'keysearch'
				       (TestName, 1, CachedTests) of
				%% Line 2342
				<{'value',{_cor51,_cor52,_cor53,{LastLogDir,_cor54,_cor55},_X_PrevLogDirs}}> when 'true' ->
				    let <LastLogTime> =
					%% Line 2343
					apply 'datestr_from_dirname'/1
					    (LastLogDir)
				    in  %% Line 2344
					case <> of
					  <>
					      when call 'erlang':'>'
						    (Time,
						     LastLogTime) ->
					      let <_cor10> =
						  %% Line 2347
						  call 'lists':'delete'
						      (TestName, DeletedTests)
					      in  %% Line 2346
						  <[LogDir|NewAdded],_cor10,%% Line 2348
									    ValidLast,%% Line 2348
										      [{TestName,LastLogDir}|InvalidLast]>
					  %% Line 2349
					  <>
					      when call 'erlang':'=='
						    (Time,
						     LastLogTime) ->
					      let <TDir> = {%% Line 2351
						   TestName,%% Line 2351
							    LastLogDir}
					      in  let <_cor12> =
						      %% Line 2353
						      call 'lists':'delete'
							  (TestName, DeletedTests)
						  in  %% Line 2352
						      <NewAdded,_cor12,%% Line 2354
								       [TDir|ValidLast],%% Line 2354
											InvalidLast>
					  %% Line 2355
					  <> when 'true' ->
					      let <_cor13> =
						  %% Line 2358
						  call 'lists':'delete'
						      (TestName, DeletedTests)
					      in  %% Line 2357
						  <[],_cor13,%% Line 2359
							     ValidLast,%% Line 2359
								       [{TestName,LastLogDir}|InvalidLast]>
					end
				%% Line 2361
				<_cor56> when 'true' ->
				    %% Line 2363
				    <[LogDir|NewAdded],%% Line 2364
						       DeletedTests,%% Line 2364
								    ValidLast,%% Line 2364
									      InvalidLast>
			      end
			  in  %% Line 2366
			      apply 'dir_diff_tests'/6
				  (LogDirs, CachedTests, New, DeletedTests1, %% Line 2367
									     ValidLast1, %% Line 2367
											 InvalidLast1)
	  %% Line 2369
	  <[],_X_CachedTests,NewAdded,DeletedTests,%% Line 2370
						   ValidLast,%% Line 2370
							     InvalidLast> when 'true' ->
	      let <_cor31> =
		  %% Line 2375
		  ( fun (_cor28,_cor27) ->
			%% Line 2376
			case call 'lists':'member'
				 (_cor28, ValidLast) of
			  %% Line 2377
			  <'true'> when 'true' ->
			      %% Line 2378
			      ( letrec
				    'lc$^0'/1 =
					fun (_cor19) ->
					    case _cor19 of
					      <[TD|_cor18]>
						  when call 'erlang':'/='
							(TD,
							 _cor28) ->
						  let <_cor20> =
						      apply 'lc$^0'/1
							  (_cor18)
						  in  ( [TD|_cor20]
							-| ['compiler_generated'] )
					      ( <[TD|_cor18]> when 'true' ->
						    apply 'lc$^0'/1
							(_cor18)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor19> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor19})
						      -| [{'function_name',{'lc$^0',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^0'/1
					(_cor27)
				-| ['list_comprehension'] )
			  %% Line 2379
			  <'false'> when 'true' ->
			      let <_cor25> =
				  %% Line 2380
				  ( letrec
					'lc$^1'/1 =
					    fun (_cor23) ->
						case _cor23 of
						  <[TD|_cor22]>
						      when call 'erlang':'/='
							    (TD,
							     _cor28) ->
						      let <_cor24> =
							  apply 'lc$^1'/1
							      (_cor22)
						      in  ( [TD|_cor24]
							    -| ['compiler_generated'] )
						  ( <[TD|_cor22]> when 'true' ->
							apply 'lc$^1'/1
							    (_cor22)
						    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_cor23> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor23})
							  -| [{'function_name',{'lc$^1',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  apply 'lc$^1'/1
					    (_cor27)
				    -| ['list_comprehension'] )
			      in  %% Line 2380
				  [_cor28|_cor25]
			  ( <_cor26> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor26})
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-dir_diff_tests/6-fun-0-'}}] )
	      in  let <InvalidLast1> =
		      %% Line 2375
		      call 'lists':'foldl'
			  (_cor31, %% Line 2382
				   InvalidLast, %% Line 2382
						InvalidLast)
		  in  let <_cor37> =
			  %% Line 2385
			  ( letrec
				'lc$^2'/1 =
				    fun (_cor35) ->
					case _cor35 of
					  <[{T,_cor57}|_cor34]> when 'true' ->
					      let <_cor36> =
						  apply 'lc$^2'/1
						      (_cor34)
					      in  ( [T|_cor36]
						    -| ['compiler_generated'] )
					  ( <[_cor33|_cor34]> when 'true' ->
						apply 'lc$^2'/1
						    (_cor34)
					    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      DeletedTests
					  ( <_cor35> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor35})
						  -| [{'function_name',{'lc$^2',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^2'/1
				    (InvalidLast1)
			    -| ['list_comprehension'] )
		      in  let <_cor42> =
			      %% Line 2390
			      ( fun (_cor40) ->
				    case _cor40 of
				      <{_X_TestName,RunDir}> when 'true' ->
					  %% Line 2391
					  case call 'filename':'split'
						   (RunDir) of
					    <[TopDir|[TestDir|_cor58]]> when 'true' ->
						%% Line 2392
						call 'filename':'join'
						    (TopDir, TestDir)
					    ( <_cor39> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor39})
					      -| ['compiler_generated'] )
					  end
				      ( <_cor41> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor41})
					      -| [{'function_name',{'-dir_diff_tests/6-fun-1-',1}}] )
					-| ['compiler_generated'] )
				    end
				-| [{'id',{0,0,'-dir_diff_tests/6-fun-1-'}}] )
			  in  let <_cor43> =
				  %% Line 2390
				  call 'lists':'map'
				      (_cor42, %% Line 2393
					       InvalidLast1)
			      in  let <NewAdded1> =
				      %% Line 2393
				      call 'erlang':'++'
					  (_cor43, NewAdded)
				  in  %% Line 2395
				      {NewAdded1,_cor37}
	  ( <_cor50,_cor49,_cor48,_cor47,_cor46,_cor45> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor50,_cor49,_cor48,_cor47,_cor46,_cor45})
		  -| [{'function_name',{'dir_diff_tests',6}}] )
	    -| ['compiler_generated'] )
	end
'delete_tests_from_cache'/2 =
    %% Line 2397
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <OldTests,LogCache = {'log_cache',_cor12,_cor13,Tests}> when 'true' ->
	      let <_cor6> =
		  %% Line 2398
		  ( fun (_cor3,_cor2) ->
			%% Line 2399
			call 'lists':'keydelete'
			    (_cor3, 1, _cor2)
		    -| [{'id',{0,0,'-delete_tests_from_cache/2-fun-0-'}}] )
	      in  let <Tests2> =
		      %% Line 2398
		      call 'lists':'foldl'
			  (_cor6, %% Line 2400
				  Tests, %% Line 2400
					 OldTests)
		  in  %% Line 2401
		      call 'erlang':'setelement'
			  (4, LogCache, Tests2)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'delete_tests_from_cache',2}}] )
	    -| ['compiler_generated'] )
	end
'update_tests_in_cache'/1 =
    %% Line 2403
    fun (_cor0) ->
	%% Line 2404
	case call 'erlang':'get'
		 ('ct_log_cache') of
	  %% Line 2405
	  <'undefined'> when 'true' ->
	      let <_cor1> =
		  %% Line 2406
		  apply 'cache_vsn'/0
		      ()
	      in  %% Line 2406
		  apply 'update_tests_in_cache'/2
		      (_cor0, {'log_cache',_cor1,[],%% Line 2407
						    []})
	  %% Line 2408
	  <SavedLogCache> when 'true' ->
	      let <_cor2> =
		  %% Line 2409
		  call 'erlang':'binary_to_term'
		      (SavedLogCache)
	      in  %% Line 2409
		  apply 'update_tests_in_cache'/2
		      (_cor0, _cor2)
	end
'update_tests_in_cache'/2 =
    %% Line 2412
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <TempData,LogCache = {'log_cache',_cor20,_cor21,Tests}> when 'true' ->
	      let <_cor7> =
		  %% Line 2414
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (Tests,
			       []) ->
			%% Line 2415
			[]
		    %% Line 2416
		    <> when 'true' ->
			let <_cor6> =
			    %% Line 2417
			    ( fun (_cor3,_cor2) ->
				  case <_cor3,_cor2> of
				    <{TestName,_cor22,_cor23,_cor24,_cor25},Cached> when 'true' ->
					%% Line 2418
					call 'lists':'keydelete'
					    (TestName, 1, Cached)
				    ( <_cor5,_cor4> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor5,_cor4})
					    -| [{'function_name',{'-update_tests_in_cache/2-fun-0-',2}}] )
				      -| ['compiler_generated'] )
				  end
			      -| [{'id',{0,0,'-update_tests_in_cache/2-fun-0-'}}] )
			in  %% Line 2417
			    call 'lists':'foldl'
				(_cor6, %% Line 2419
					Tests, %% Line 2419
					       TempData)
		  end
	      in  let <_cor9> =
		      %% Line 2421
		      call 'erlang':'++'
			  (TempData, _cor7)
		  in  let <Tests1> =
			  %% Line 2421
			  call 'lists':'keysort'
			      (1, _cor9)
		      in  let <_cor13> =
			      %% Line 2422
			      call 'erlang':'setelement'
				  (4, LogCache, Tests1)
			  in  let <CacheBin> =
				  %% Line 2422
				  call 'erlang':'term_to_binary'
				      (_cor13)
			      in  let <_cor16> =
				      %% Line 2423
				      call 'erlang':'self'
					  ()
				  in  let <_cor15> =
					  %% Line 2423
					  call 'erlang':'whereis'
					      ('ct_logs')
				      in  %% Line 2423
					  case <_cor16,_cor15> of
					    %% Line 2424
					    <_X_Pid,_cor30>
						when call 'erlang':'=:='
						      (_cor30,
						       _X_Pid) ->
						%% Line 2425
						call 'erlang':'put'
						    ('ct_log_cache', CacheBin)
					    %% Line 2426
					    <_fol382,_fol383> when 'true' ->
						%% Line 2427
						call 'file':'write_file'
						    ([99|[116|[95|[108|[111|[103|[95|[99|[97|[99|[104|[101]]]]]]]]]]]], CacheBin)
					  end
	  ( <_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18})
		  -| [{'function_name',{'update_tests_in_cache',2}}] )
	    -| ['compiler_generated'] )
	end
'make_all_suites_index1'/3 =
    %% Line 2435
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 2437
	    case <> of
	      <>
		  when call 'erlang':'=:='
			(_cor2,
			 'start') ->
		  'ok'
	      %% Line 2438
	      <> when 'true' ->
		  let <_cor4> =
		      call 'erlang':'++'
			  (_cor1, [46|[46|[46|[32]]]])
		  in  let <_cor5> =
			  call 'erlang':'++'
			      ([85|[112|[100|[97|[116|[105|[110|[103|[32]]]]]]]]], _cor4)
		      in  call 'io':'put_chars'
			      (_cor5)
	    end
	    let <_cor6> =
		catch
		    %% Line 2440
		    apply 'make_all_suites_index2'/2
			([105|[110|[100|[101|[120|[46|[104|[116|[109|[108]]]]]]]]]], _cor0)
	    in  %% Line 2440
		case _cor6 of
		  %% Line 2441
		  <{'EXIT',Reason}> when 'true' ->
		      let <_cor7> =
			  %% Line 2442
			  call 'erlang':'++'
			      (_cor1, [33|[10]])
		      in  let <_cor8> =
			      %% Line 2442
			      call 'erlang':'++'
				  ([67|[82|[65|[83|[72|[69|[68|[32|[119|[104|[105|[108|[101|[32|[117|[112|[100|[97|[116|[105|[110|[103|[32]]]]]]]]]]]]]]]]]]]]]]], _cor7)
			  in  do  %% Line 2442
				  call 'io':'put_chars'
				      (_cor8)
				  do  %% Line 2443
				      call 'io':'format'
					  ([126|[112|[126|[110]]]], [Reason|[]])
				      %% Line 2444
				      {'error',Reason}
		  %% Line 2445
		  <{'error',Reason}> when 'true' ->
		      let <_cor9> =
			  %% Line 2446
			  call 'erlang':'++'
			      (_cor1, [10])
		      in  let <_cor10> =
			      %% Line 2446
			      call 'erlang':'++'
				  ([70|[65|[73|[76|[69|[68|[32|[119|[104|[105|[108|[101|[32|[117|[112|[100|[97|[116|[105|[110|[103|[32]]]]]]]]]]]]]]]]]]]]]], _cor9)
			  in  do  %% Line 2446
				  call 'io':'put_chars'
				      (_cor10)
				  do  %% Line 2447
				      call 'io':'format'
					  ([126|[112|[126|[110]]]], [Reason|[]])
				      %% Line 2448
				      {'error',Reason}
		  %% Line 2449
		  <{'ok',TempData}> when 'true' ->
		      %% Line 2450
		      case _cor2 of
			%% Line 2451
			<'start'> when 'true' ->
			    do  %% Line 2452
				call 'ct_util':'set_testdata_async'
				    ({'test_index',{_cor1,%% Line 2453
							  TempData}})
				%% Line 2454
				TempData
			%% Line 2455
			<_cor16> when 'true' ->
			    do  %% Line 2456
				call 'io':'put_chars'
				    ([100|[111|[110|[101|[10]]]]])
				%% Line 2457
				TempData
		      end
		  %% Line 2459
		  <Err> when 'true' ->
		      do  %% Line 2460
			  call 'io':'format'
			      ([85|[110|[107|[110|[111|[119|[110|[32|[105|[110|[116|[101|[114|[110|[97|[108|[32|[101|[114|[114|[111|[114|[32|[119|[104|[105|[108|[101|[32|[117|[112|[100|[97|[116|[105|[110|[103|[32|[126|[116|[115|[46|[32|[80|[108|[101|[97|[115|[101|[32|[114|[101|[112|[111|[114|[116|[46|[10|[40|[69|[114|[114|[58|[32|[126|[112|[44|[32|[73|[68|[58|[32|[49|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2462
																																																								 [_cor1|[Err|[]]])
			  %% Line 2463
			  {'error',Err}
		end
'make_all_suites_index2'/2 =
    %% Line 2466
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2469
	    apply 'all_suites_index_header'/0
		()
	in  %% Line 2467
	    case %% Line 2468
		 apply 'make_all_suites_index3'/9
		     (_cor0, _cor2, %% Line 2470
				    0, %% Line 2470
				       0, %% Line 2470
					  0, %% Line 2470
					     0, %% Line 2470
						0, %% Line 2470
						   [], %% Line 2470
						       []) of
	      <{'ok',Index0,_X_Totals,TempData}> when 'true' ->
		  let <_cor4> =
		      %% Line 2471
		      apply 'all_suites_index_footer'/0
			  ()
		  in  let <Index> =
			  %% Line 2471
			  [Index0|_cor4]
		      in  let <_cor6> =
			      %% Line 2472
			      call 'unicode':'characters_to_binary'
				  (Index)
			  in  %% Line 2472
			      case apply 'force_write_file'/2
				       (_cor1, _cor6) of
				%% Line 2473
				<'ok'> when 'true' ->
				    %% Line 2474
				    {'ok',TempData}
				%% Line 2475
				<{'error',Reason}> when 'true' ->
				    %% Line 2476
				    {'error',{'index_write_error',Reason}}
				( <_cor7> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor7})
				  -| ['compiler_generated'] )
			      end
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'make_all_suites_index3'/9 =
    %% Line 2485
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[IxEntry = {TestName,Label,Missing,%% Line 2486
					      {LastLogDir,Summary,URIs},%% Line 2486
									OldDirs}|%% Line 2486
										 Rest],%% Line 2487
										       Result,%% Line 2487
											      TotSucc,%% Line 2487
												      TotFail,%% Line 2487
													      UserSkip,%% Line 2487
														       AutoSkip,%% Line 2487
																TotNotBuilt,%% Line 2488
																	    Labels,%% Line 2488
																		   TempData> when 'true' ->
	      %% Line 2489
	      case call 'filename':'split'
		       (LastLogDir) of
		<[EntryDir|_cor55]> when 'true' ->
		    let <Labels1> =
			%% Line 2490
			[{EntryDir,Label}|Labels]
		    in  %% Line 2491
			case Summary of
			  %% Line 2492
			  <{Succ,Fail,USkip,ASkip}> when 'true' ->
			      let <All> = {%% Line 2493
				   'true',%% Line 2493
					  OldDirs}
			      in  let <NotBuilt> =
				      %% Line 2494
				      apply 'not_built'/4
					  (TestName, LastLogDir, All, Missing)
				  in  %% Line 2496
				      case apply 'make_one_index_entry1'/11
					       (TestName, LastLogDir, Label, %% Line 2497
									     Succ, %% Line 2497
										   Fail, %% Line 2497
											 USkip, %% Line 2497
												ASkip, %% Line 2498
												       NotBuilt, %% Line 2498
														 All, %% Line 2498
														      'temp', %% Line 2498
															      URIs) of
					<{Result1,_cor56}> when 'true' ->
					    let <_cor14> =
						catch
						    %% Line 2500
						    call 'erlang':'+'
							(AutoSkip, ASkip)
					    in  let <_cor16> =
						    %% Line 2500
						    case _cor14 of
						      %% Line 2501
						      <{'EXIT',_cor57}> when 'true' ->
							  'undefined'
						      %% Line 2502
						      <Res> when 'true' ->
							  Res
						    end
						in  let <_cor21> =
							%% Line 2504
							call 'erlang':'+'
							    (TotSucc, Succ)
						    in  let <_cor20> =
							    %% Line 2505
							    call 'erlang':'+'
								(TotFail, Fail)
							in  let <_cor19> =
								%% Line 2505
								call 'erlang':'+'
								    (UserSkip, USkip)
							    in  let <_cor18> =
								    %% Line 2506
								    call 'erlang':'+'
									(TotNotBuilt, NotBuilt)
								in  %% Line 2504
								    apply 'make_all_suites_index3'/9
									(Rest, [Result|Result1], _cor21, _cor20, _cor19, _cor16, _cor18, %% Line 2506
																	 Labels1, %% Line 2507
																		  [IxEntry|TempData])
					( <_cor13> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor13})
					  -| ['compiler_generated'] )
				      end
			  %% Line 2508
			  <'error'> when 'true' ->
			      %% Line 2509
			      apply 'make_all_suites_index3'/9
				  (Rest, Result, TotSucc, TotFail, %% Line 2510
								   UserSkip, %% Line 2510
									     AutoSkip, %% Line 2510
										       TotNotBuilt, %% Line 2510
												    Labels1, %% Line 2511
													     [IxEntry|TempData])
			  ( <_cor22> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor22})
			    -| ['compiler_generated'] )
			end
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2515
	  <[{TestName,[LastLogDir|OldDirs]}|Rest],%% Line 2516
						  Result,%% Line 2516
							 TotSucc,%% Line 2516
								 TotFail,%% Line 2516
									 UserSkip,%% Line 2516
										  AutoSkip,%% Line 2516
											   TotNotBuilt,%% Line 2517
												       Labels,%% Line 2517
													      TempData> when 'true' ->
	      %% Line 2518
	      case call 'filename':'split'
		       (LastLogDir) of
		<[EntryDir|_cor58]> when 'true' ->
		    let <_cor24> =
			%% Line 2520
			call 'filename':'join'
			    (EntryDir, [109|[105|[115|[115|[105|[110|[103|[95|[115|[117|[105|[116|[101|[115|[46|[105|[110|[102|[111]]]]]]]]]]]]]]]]]]])
		    in  let <_cor26> =
			    %% Line 2520
			    case call 'file':'read_file'
				     (_cor24) of
			      %% Line 2521
			      <{'ok',Bin}> when 'true' ->
				  call 'erlang':'binary_to_term'
				      (Bin)
			      %% Line 2522
			      <_cor59> when 'true' ->
				  []
			    end
			in  let <Label,Labels1> =
				%% Line 2525
				case call 'proplists':'get_value'
					 (EntryDir, Labels) of
				  %% Line 2526
				  <'undefined'> when 'true' ->
				      let <_cor28> =
					  %% Line 2527
					  call 'filename':'join'
					      (EntryDir, [116|[111|[116|[97|[108|[115|[46|[105|[110|[102|[111]]]]]]]]]]])
				      in  %% Line 2527
					  case apply 'read_totals_file'/1
						   (_cor28) of
					    %% Line 2528
					    <{_cor60,Lbl,_cor61,_cor62}> when 'true' ->
						<Lbl,[{EntryDir,Lbl}|Labels]>
					    %% Line 2529
					    <_cor63> when 'true' ->
						<[45],[{EntryDir,[45]}|Labels]>
					  end
				  %% Line 2531
				  <Lbl> when 'true' ->
				      %% Line 2532
				      <Lbl,Labels>
				end
			    in  %% Line 2534
				case apply 'make_one_index_entry'/6
					 (TestName, LastLogDir, Label, %% Line 2535
								       {'true',OldDirs}, _cor26, %% Line 2535
												 'undefined') of
				  %% Line 2536
				  <{Result1,Succ,Fail,USkip,ASkip,NotBuilt,URIs}> when 'true' ->
				      let <_cor33> =
					  catch
					      %% Line 2538
					      call 'erlang':'+'
						  (AutoSkip, ASkip)
				      in  let <_cor35> =
					      %% Line 2538
					      case _cor33 of
						%% Line 2539
						<{'EXIT',_cor64}> when 'true' ->
						    'undefined'
						%% Line 2540
						<Res> when 'true' ->
						    Res
					      end
					  in  let <IxEntry> =
						  %% Line 2542
						  {TestName,Label,_cor26,%% Line 2543
									 {LastLogDir,{Succ,Fail,USkip,ASkip},URIs},%% Line 2543
														   OldDirs}
					      in  let <_cor41> =
						      %% Line 2545
						      call 'erlang':'+'
							  (TotSucc, Succ)
						  in  let <_cor40> =
							  %% Line 2546
							  call 'erlang':'+'
							      (TotFail, Fail)
						      in  let <_cor39> =
							      %% Line 2546
							      call 'erlang':'+'
								  (UserSkip, USkip)
							  in  let <_cor38> =
								  %% Line 2547
								  call 'erlang':'+'
								      (TotNotBuilt, NotBuilt)
							      in  %% Line 2545
								  apply 'make_all_suites_index3'/9
								      (Rest, [Result|Result1], _cor41, _cor40, _cor39, _cor35, _cor38, %% Line 2547
																       Labels1, %% Line 2548
																		[IxEntry|TempData])
				  %% Line 2549
				  <'error'> when 'true' ->
				      let <IxEntry> =
					  %% Line 2550
					  {TestName,Label,_cor26,%% Line 2551
								 {LastLogDir,'error','undefined'},%% Line 2551
												  OldDirs}
				      in  %% Line 2552
					  apply 'make_all_suites_index3'/9
					      (Rest, Result, TotSucc, TotFail, %% Line 2553
									       UserSkip, %% Line 2553
											 AutoSkip, %% Line 2553
												   TotNotBuilt, %% Line 2553
														Labels1, %% Line 2554
															 [IxEntry|TempData])
				  ( <_cor43> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor43})
				    -| ['compiler_generated'] )
				end
		( <_cor23> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor23})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2558
	  <[_cor65|Rest],Result,TotSucc,TotFail,UserSkip,AutoSkip,%% Line 2559
								  TotNotBuilt,%% Line 2559
									      Labels,%% Line 2559
										     TempData> when 'true' ->
	      %% Line 2560
	      apply 'make_all_suites_index3'/9
		  (Rest, Result, TotSucc, TotFail, %% Line 2561
						   UserSkip, %% Line 2561
							     AutoSkip, %% Line 2561
								       TotNotBuilt, %% Line 2561
										    Labels, %% Line 2562
											    TempData)
	  %% Line 2564
	  <[],Result,TotSucc,TotFail,UserSkip,AutoSkip,%% Line 2565
						       TotNotBuilt,_cor66,%% Line 2565
									  TempData> when 'true' ->
	      let <_cor45> =
		  %% Line 2566
		  apply 'total_row'/6
		      (TotSucc, TotFail, UserSkip, AutoSkip, %% Line 2567
							     TotNotBuilt, %% Line 2567
									  'true')
	      in  let <_cor44> =
		      %% Line 2568
		      call 'lists':'reverse'
			  (TempData)
		  in  %% Line 2566
		      {'ok',[Result|_cor45],%% Line 2568
					    {TotSucc,TotFail,UserSkip,AutoSkip,TotNotBuilt},_cor44}
	  ( <_cor54,_cor53,_cor52,_cor51,_cor50,_cor49,_cor48,_cor47,_cor46> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor54,_cor53,_cor52,_cor51,_cor50,_cor49,_cor48,_cor47,_cor46})
		  -| [{'function_name',{'make_all_suites_index3',9}}] )
	    -| ['compiler_generated'] )
	end
'make_all_suites_ix_temp'/4 =
    %% Line 2571
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <AllTestLogDirs1> =
	    %% Line 2572
	    apply 'insert_new_test_data'/3
		(_cor2, _cor1, _cor0)
	in  let <IndexDir> =
		%% Line 2573
		call 'filename':'dirname'
		    (_cor3)
	    in  let <_cor6> =
		    %% Line 2575
		    apply 'all_suites_index_header'/1
			(IndexDir)
		in  let <Index0> =
			%% Line 2574
			apply 'make_all_suites_ix_temp1'/7
			    (AllTestLogDirs1, _cor6, %% Line 2576
						     0, %% Line 2576
							0, %% Line 2576
							   0, %% Line 2576
							      0, %% Line 2576
								 0)
		    in  let <_cor8> =
			    %% Line 2577
			    apply 'all_suites_index_footer'/0
				()
			in  let <Index> =
				%% Line 2577
				[Index0|_cor8]
			    in  let <_cor10> =
				    %% Line 2578
				    call 'unicode':'characters_to_binary'
					(Index)
				in  %% Line 2578
				    case apply 'force_write_file'/2
					     (_cor3, _cor10) of
				      %% Line 2579
				      <'ok'> when 'true' ->
					  %% Line 2580
					  'ok'
				      %% Line 2581
				      <{'error',Reason}> when 'true' ->
					  %% Line 2582
					  {'error',{'index_write_error',Reason}}
				      ( <_cor11> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor11})
					-| ['compiler_generated'] )
				    end
'insert_new_test_data'/3 =
    %% Line 2585
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{NewTestName,NewTestDir},NewLabel,AllTestLogDirs> when 'true' ->
	      let <_cor5> =
		  %% Line 2587
		  case call 'lists':'keysearch'
			   (NewTestName, 1, AllTestLogDirs) of
		    %% Line 2588
		    <{'value',{_cor10,_cor11,_cor12,{LastLogDir,_cor13,_cor14},OldDirs}}> when 'true' ->
			let <_cor3> =
			    %% Line 2591
			    call 'lists':'keydelete'
				(NewTestName, 1, AllTestLogDirs)
			in  %% Line 2589
			    [{NewTestName,NewLabel,[],{NewTestDir,{0,0,0,0},'undefined'},%% Line 2590
											 [LastLogDir|OldDirs]}|_cor3]
		    %% Line 2592
		    <'false'> when 'true' ->
			%% Line 2593
			[{NewTestName,NewLabel,[],{NewTestDir,{0,0,0,0},'undefined'},[]}|%% Line 2594
											 AllTestLogDirs]
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 2596
		  call 'lists':'keysort'
		      (1, _cor5)
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'insert_new_test_data',3}}] )
	    -| ['compiler_generated'] )
	end
'make_all_suites_ix_temp1'/7 =
    %% Line 2598
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{TestName,Label,Missing,LastLogDirData,OldDirs}|Rest],%% Line 2599
								  Result,%% Line 2599
									 TotSucc,%% Line 2599
										 TotFail,%% Line 2599
											 UserSkip,%% Line 2599
												  AutoSkip,%% Line 2600
													   TotNotBuilt> when 'true' ->
	      %% Line 2601
	      case apply 'make_one_ix_entry_temp'/5
		       (TestName, LastLogDirData, %% Line 2602
						  Label, %% Line 2602
							 {'true',OldDirs}, %% Line 2602
									   Missing) of
		%% Line 2603
		<{Result1,Succ,Fail,USkip,ASkip,NotBuilt,_X_URIs}> when 'true' ->
		    let <_cor7> =
			catch
			    %% Line 2605
			    call 'erlang':'+'
				(AutoSkip, ASkip)
		    in  let <_cor9> =
			    %% Line 2605
			    case _cor7 of
			      %% Line 2606
			      <{'EXIT',_cor24}> when 'true' ->
				  'undefined'
			      %% Line 2607
			      <Res> when 'true' ->
				  Res
			    end
			in  let <_cor14> =
				%% Line 2609
				call 'erlang':'+'
				    (TotSucc, Succ)
			    in  let <_cor13> =
				    %% Line 2610
				    call 'erlang':'+'
					(TotFail, Fail)
				in  let <_cor12> =
					%% Line 2610
					call 'erlang':'+'
					    (UserSkip, USkip)
				    in  let <_cor11> =
					    %% Line 2611
					    call 'erlang':'+'
						(TotNotBuilt, NotBuilt)
					in  %% Line 2609
					    apply 'make_all_suites_ix_temp1'/7
						(Rest, [Result|Result1], _cor14, _cor13, _cor12, _cor9, _cor11)
		%% Line 2612
		<'error'> when 'true' ->
		    %% Line 2613
		    apply 'make_all_suites_ix_temp1'/7
			(Rest, Result, TotSucc, TotFail, %% Line 2614
							 UserSkip, %% Line 2614
								   AutoSkip, %% Line 2614
									     TotNotBuilt)
		( <_cor15> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor15})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2616
	  <[],Result,TotSucc,TotFail,UserSkip,AutoSkip,%% Line 2617
						       TotNotBuilt> when 'true' ->
	      let <_cor16> =
		  %% Line 2618
		  apply 'total_row'/6
		      (TotSucc, TotFail, UserSkip, AutoSkip, TotNotBuilt, 'true')
	      in  %% Line 2618
		  [Result|_cor16]
	  ( <_cor23,_cor22,_cor21,_cor20,_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21,_cor20,_cor19,_cor18,_cor17})
		  -| [{'function_name',{'make_all_suites_ix_temp1',7}}] )
	    -| ['compiler_generated'] )
	end
'make_one_ix_entry_temp'/5 =
    %% Line 2620
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <TestName,{LogDir,Summary,URIs},Label,All,Missing> when 'true' ->
	      %% Line 2621
	      case Summary of
		%% Line 2622
		<{Succ,Fail,UserSkip,AutoSkip}> when 'true' ->
		    let <NotBuilt> =
			%% Line 2623
			apply 'not_built'/4
			    (TestName, LogDir, All, Missing)
		    in  %% Line 2624
			case apply 'make_one_index_entry1'/11
				 (TestName, LogDir, Label, %% Line 2625
							   Succ, %% Line 2625
								 Fail, %% Line 2626
								       UserSkip, %% Line 2626
										 AutoSkip, %% Line 2627
											   NotBuilt, %% Line 2627
												     All, %% Line 2627
													  'temp', %% Line 2627
														  URIs) of
			  <{NewResult,URIs1}> when 'true' ->
			      %% Line 2628
			      {NewResult,Succ,Fail,UserSkip,AutoSkip,NotBuilt,URIs1}
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		%% Line 2629
		<'error'> when 'true' ->
		    %% Line 2630
		    'error'
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'make_one_ix_entry_temp',5}}] )
	    -| ['compiler_generated'] )
	end
'get_cache_data'/1 =
    %% Line 2635
    fun (_cor0) ->
	case _cor0 of
	  <{'ok',CacheBin}> when 'true' ->
	      %% Line 2636
	      case call 'erlang':'binary_to_term'
		       (CacheBin) of
		%% Line 2637
		<CacheRec = {'log_cache',_cor4,_cor5,_cor6}> when ( 'true'
								    -| ['compiler_generated'] ) ->
		    %% Line 2639
		    case apply 'is_correct_cache_vsn'/1
			     (CacheRec) of
		      %% Line 2640
		      <'true'> when 'true' ->
			  %% Line 2641
			  {'ok',CacheRec}
		      %% Line 2642
		      <'false'> when 'true' ->
			  do  %% Line 2643
			      call 'file':'delete'
				  ([99|[116|[95|[108|[111|[103|[95|[99|[97|[99|[104|[101]]]]]]]]]]]])
			      %% Line 2644
			      {'error','old_cache_file'}
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor1})
			-| ['compiler_generated'] )
		    end
		%% Line 2646
		<_cor7> when 'true' ->
		    do  %% Line 2647
			call 'file':'delete'
			    ([99|[116|[95|[108|[111|[103|[95|[99|[97|[99|[104|[101]]]]]]]]]]]])
			%% Line 2648
			{'error','invalid_cache_file'}
	      end
	  %% Line 2650
	  <NoCache> when 'true' ->
	      %% Line 2651
	      NoCache
	end
'cache_vsn'/0 =
    %% Line 2653
    fun () ->
	do  %% Line 2654
	    call 'application':'load'
		('common_test')
	    %% Line 2655
	    case call 'application':'get_key'
		     ('common_test', 'vsn') of
	      %% Line 2656
	      <{'ok',VSN}> when 'true' ->
		  %% Line 2657
		  VSN
	      %% Line 2658
	      <_cor7> when 'true' ->
		  let <_cor0> =
		      %% Line 2659
		      call 'code':'which'
			  ('ct')
		  in  let <EbinDir> =
			  %% Line 2659
			  call 'filename':'dirname'
			      (_cor0)
		      in  let <VSNfile> =
			      %% Line 2660
			      call 'filename':'join'
				  ([EbinDir|[[46|[46]]|[[118|[115|[110|[46|[109|[107]]]]]]]]])
			  in  %% Line 2661
			      case call 'file':'read_file'
				       (VSNfile) of
				%% Line 2662
				<{'ok',Bin}> when 'true' ->
				    let <_cor3> =
					%% Line 2663
					call 'erlang':'binary_to_list'
					    (Bin)
				    in  %% Line 2663
					case call 'string':'tokens'
						 (_cor3, [61|[10|[32]]]) of
					  <[_cor8|[VSN|[]]]> when 'true' ->
					      %% Line 2664
					      VSN
					  ( <_cor4> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor4})
					    -| ['compiler_generated'] )
					end
				%% Line 2665
				<_cor9> when 'true' ->
				    %% Line 2666
				    'undefined'
			      end
	    end
'is_correct_cache_vsn'/1 =
    %% Line 2670
    fun (_cor0) ->
	case _cor0 of
	  <{'log_cache',CVSN,_cor3,_cor4}> when 'true' ->
	      %% Line 2671
	      case apply 'cache_vsn'/0
		       () of
		%% Line 2672
		<_cor5>
		    when call 'erlang':'=:='
			  (_cor5,
			   CVSN) ->
		    'true'
		%% Line 2673
		<_cor6> when 'true' ->
		    'false'
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'is_correct_cache_vsn',1}}] )
	    -| ['compiler_generated'] )
	end
'cleanup'/0 =
    %% Line 2679
    fun () ->
	%% Line 2680
	case call 'file':'get_cwd'
		 () of
	  <{'ok',Cwd}> when 'true' ->
	      %% Line 2681
	      case call 'file':'set_cwd'
		       ([46|[46|[47]]]) of
		<'ok'> when 'true' ->
		    %% Line 2682
		    case call 'file':'get_cwd'
			     () of
		      <{'ok',Top}> when 'true' ->
			  let <_cor3> =
			      catch
				  %% Line 2684
				  apply 'try_cleanup'/1
				      (Cwd)
			  in  let <_cor5> =
				  %% Line 2684
				  case _cor3 of
				    %% Line 2685
				    <'ok'> when 'true' ->
					%% Line 2686
					'ok'
				    %% Line 2687
				    <{'EXIT',Reason}> when 'true' ->
					%% Line 2688
					{'error',Reason}
				    %% Line 2689
				    <Error> when 'true' ->
					%% Line 2690
					{'error',Error}
				  end
			      in  %% Line 2692
				  case call 'file':'set_cwd'
					   (Top) of
				    <'ok'> when 'true' ->
					_cor5
				    ( <_cor7> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor7})
				      -| ['compiler_generated'] )
				  end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor0})
	    -| ['compiler_generated'] )
	end
'try_cleanup'/1 =
    %% Line 2695
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2697
	    call 'filename':'split'
		(_cor0)
	in  %% Line 2697
	    case call 'lists':'reverse'
		     (_cor1) of
	      %% Line 2698
	      <[[99|[116|[95|[114|[117|[110|[46|_cor6]]]]]]]|_cor7]> when 'true' ->
		  let <_cor2> =
		      %% Line 2699
		      call 'filename':'join'
			  (_cor0, [99|[116|[95|[114|[117|[110|[46|[42]]]]]]]])
		  in  %% Line 2699
		      case call 'filelib':'wildcard'
			       (_cor2) of
			%% Line 2700
			<[]> when 'true' ->
			    %% Line 2701
			    apply 'rm_dir'/1
				(_cor0)
			%% Line 2702
			<_cor8> when 'true' ->
			    %% Line 2703
			    'unknown_logdir'
		      end
	      %% Line 2705
	      <_cor9> when 'true' ->
		  %% Line 2706
		  'unknown_logdir'
	    end
'rm_dir'/1 =
    %% Line 2709
    fun (_cor0) ->
	%% Line 2710
	case call 'file':'list_dir'
		 (_cor0) of
	  %% Line 2711
	  <{'error',Errno}> when 'true' ->
	      %% Line 2712
	      call 'erlang':'exit'
		  ({'ls_failed',_cor0,Errno})
	  %% Line 2713
	  <{'ok',Files}> when 'true' ->
	      let <_cor6> =
		  %% Line 2714
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor3) ->
				case _cor3 of
				  <[F|_cor2]> when 'true' ->
				      let <_cor4> =
					  call 'filename':'join'
					      (_cor0, F)
				      in  let <_cor5> =
					      apply 'lc$^0'/1
						  (_cor2)
					  in  ( [_cor4|_cor5]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor3> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor3})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Files)
		    -| ['list_comprehension'] )
	      in  do  %% Line 2714
		      apply 'rm_files'/1
			  (_cor6)
		      %% Line 2715
		      case call 'file':'del_dir'
			       (_cor0) of
			%% Line 2716
			<{'error',Errno}> when 'true' ->
			    %% Line 2717
			    call 'erlang':'exit'
				({'rmdir_failed',Errno})
			%% Line 2718
			<'ok'> when 'true' ->
			    %% Line 2719
			    'ok'
			( <_cor7> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor7})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor8> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor8})
	    -| ['compiler_generated'] )
	end
'rm_files'/1 =
    %% Line 2723
    fun (_cor0) ->
	case _cor0 of
	  <[F|Fs]> when 'true' ->
	      let <Base> =
		  %% Line 2724
		  call 'filename':'basename'
		      (F)
	      in  %% Line 2725
		  case <> of
		    <>
			when let <_cor2> =
			      call 'erlang':'=='
				  (Base, [46])
			  in  let <_cor3> =
				  call 'erlang':'=='
				      (Base, [46|[46]])
			      in  call 'erlang':'or'
				      (_cor2, _cor3) ->
			%% Line 2726
			apply 'rm_files'/1
			    (Fs)
		    %% Line 2727
		    <> when 'true' ->
			%% Line 2728
			case call 'file':'read_file_info'
				 (F) of
			  %% Line 2729
			  <{'ok',{'file_info',_cor7,'directory',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18}}> when 'true' ->
			      do  %% Line 2730
				  apply 'rm_dir'/1
				      (F)
				  %% Line 2731
				  apply 'rm_files'/1
				      (Fs)
			  %% Line 2732
			  <{'ok',_X_Regular}> when 'true' ->
			      %% Line 2733
			      case call 'file':'delete'
				       (F) of
				%% Line 2734
				<'ok'> when 'true' ->
				    %% Line 2735
				    apply 'rm_files'/1
					(Fs)
				%% Line 2736
				<{'error',Errno}> when 'true' ->
				    %% Line 2737
				    call 'erlang':'exit'
					({'del_failed',F,Errno})
				( <_cor4> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor4})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor5})
			    -| ['compiler_generated'] )
			end
		  end
	  %% Line 2741
	  <[]> when 'true' ->
	      %% Line 2742
	      'ok'
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'rm_files',1}}] )
	    -| ['compiler_generated'] )
	end
'simulate'/0 =
    %% Line 2752
    fun () ->
	do  %% Line 2753
	    apply 'cast'/1
		('stop')
	    let <S> =
		%% Line 2754
		call 'erlang':'self'
		    ()
	    in  let <_cor3> =
		    %% Line 2755
		    ( fun () ->
			  let <_cor1> =
			      %% Line 2756
			      call 'erlang':'self'
				  ()
			  in  do  %% Line 2756
				  call 'erlang':'register'
				      ('ct_logs', _cor1)
				  let <_cor2> =
				      %% Line 2757
				      call 'erlang':'self'
					  ()
				  in  do  %% Line 2757
					  call 'erlang':'!'
					      (S, {_cor2,'started'})
					  %% Line 2758
					  apply 'simulate_logger_loop'/0
					      ()
		      -| [{'id',{0,0,'-simulate/0-fun-0-'}}] )
		in  let <Pid> =
			%% Line 2755
			call 'erlang':'spawn'
			    (_cor3)
		    in  %% Line 2760
			receive
			  <{_cor5,'started'}>
			      when call 'erlang':'=:='
				    (_cor5,
				     Pid) ->
			      Pid
			after 'infinity' ->
			  'true'
'simulate_logger_loop'/0 =
    %% Line 2763
    fun () ->
	%% Line 2764
	receive
	  %% Line 2765
	  <{'log',_cor8,_cor9,_cor10,_cor11,_cor12,List}> when 'true' ->
	      let <_cor6> =
		  %% Line 2766
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor2) ->
				case _cor2 of
				  <[{Str,Args}|_cor1]> when 'true' ->
				      let <_cor3> =
					  call 'io_lib':'format'
					      (Str, Args)
				      in  let <_cor4> =
					      call 'io_lib':'nl'
						  ()
					  in  let <_cor5> =
						  apply 'lc$^0'/1
						      (_cor1)
					      in  ( [[_cor3|[_cor4|[]]]|_cor5]
						    -| ['compiler_generated'] )
				  ( <[_cor0|_cor1]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor1)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor2> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor2})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (List)
		    -| ['list_comprehension'] )
	      in  do  %% Line 2767
		      call 'io':'format'
			  ([126|[116|[115]]], [_cor6|[]])
		      %% Line 2768
		      apply 'simulate_logger_loop'/0
			  ()
	  %% Line 2769
	  <'stop'> when 'true' ->
	      %% Line 2770
	      'ok'
	after 'infinity' ->
	  'true'
'notify_and_lock_file'/1 =
    %% Line 2778
    fun (_cor0) ->
	%% Line 2779
	case call 'ct_event':'is_alive'
		 () of
	  %% Line 2780
	  <'true'> when 'true' ->
	      let <_cor1> =
		  %% Line 2782
		  call 'erlang':'node'
		      ()
	      in  %% Line 2781
		  call 'ct_event':'sync_notify'
		      ({'event','start_write_file',_cor1,_cor0})
	  %% Line 2784
	  <'false'> when 'true' ->
	      %% Line 2785
	      'ok'
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'notify_and_unlock_file'/1 =
    %% Line 2793
    fun (_cor0) ->
	%% Line 2794
	case call 'ct_event':'is_alive'
		 () of
	  %% Line 2795
	  <'true'> when 'true' ->
	      let <_cor1> =
		  %% Line 2797
		  call 'erlang':'node'
		      ()
	      in  %% Line 2796
		  call 'ct_event':'sync_notify'
		      ({'event','finished_write_file',_cor1,_cor0})
	  %% Line 2799
	  <'false'> when 'true' ->
	      %% Line 2800
	      'ok'
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'get_run_dirs'/1 =
    %% Line 2808
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2809
	    call 'filename':'join'
		(_cor0, [114|[117|[110|[46|[91|[49|[45|[50|[93|[42]]]]]]]]]])
	in  %% Line 2809
	    case call 'filelib':'wildcard'
		     (_cor1) of
	      %% Line 2810
	      <[]> when 'true' ->
		  %% Line 2811
		  'false'
	      %% Line 2812
	      <RunDirs> when 'true' ->
		  %% Line 2813
		  call 'lists':'sort'
		      (RunDirs)
	    end
'xhtml'/2 =
    %% Line 2821
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <HTML,XHTML>
	      when try
		    let <_cor2> =
			call 'erlang':'is_function'
			    (HTML)
		    in  let <_cor3> =
			    %% Line 2822
			    call 'erlang':'is_function'
				(XHTML)
			in  call 'erlang':'and'
				(_cor2, _cor3)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2823
	      case call 'erlang':'get'
		       ('basic_html') of
		%% Line 2824
		<'true'> when 'true' ->
		    apply HTML
			()
		%% Line 2825
		<_cor8> when 'true' ->
		    apply XHTML
			()
	      end
	  %% Line 2827
	  <HTML,XHTML> when 'true' ->
	      %% Line 2828
	      case call 'erlang':'get'
		       ('basic_html') of
		%% Line 2829
		<'true'> when 'true' ->
		    HTML
		%% Line 2830
		<_cor9> when 'true' ->
		    XHTML
	      end
	end
'odd_or_even'/0 =
    %% Line 2838
    fun () ->
	%% Line 2839
	case call 'erlang':'get'
		 ('odd_or_even') of
	  %% Line 2840
	  <'even'> when 'true' ->
	      do  %% Line 2841
		  call 'erlang':'put'
		      ('odd_or_even', 'odd')
		  %% Line 2842
		  [101|[118|[101|[110]]]]
	  %% Line 2843
	  <_cor1> when 'true' ->
	      do  %% Line 2844
		  call 'erlang':'put'
		      ('odd_or_even', 'even')
		  %% Line 2845
		  [111|[100|[100]]]
	end
'basic_html'/0 =
    %% Line 2853
    fun () ->
	%% Line 2854
	case call 'application':'get_env'
		 ('common_test', 'basic_html') of
	  %% Line 2855
	  <{'ok','true'}> when 'true' ->
	      %% Line 2856
	      'true'
	  %% Line 2857
	  <_cor1> when 'true' ->
	      %% Line 2858
	      'false'
	end
'locate_priv_file'/1 =
    %% Line 2866
    fun (_cor0) ->
	%% Line 2867
	case call 'file':'get_cwd'
		 () of
	  <{'ok',CWD}> when 'true' ->
	      let <PrivFileInCwd> =
		  %% Line 2868
		  call 'filename':'join'
		      (CWD, _cor0)
	      in  %% Line 2869
		  case call 'filelib':'is_file'
			   (PrivFileInCwd) of
		    %% Line 2870
		    <'true'> when 'true' ->
			%% Line 2871
			PrivFileInCwd
		    %% Line 2872
		    <'false'> when 'true' ->
			let <_cor4> =
			    %% Line 2874
			    call 'erlang':'whereis'
				('ct_logs')
			in  let <_cor3> =
				%% Line 2874
				call 'erlang':'self'
				    ()
			    in  let <_cor8> =
				    %% Line 2874
				    case <_cor4,_cor3> of
				      %% Line 2875
				      <Self,_cor15>
					  when call 'erlang':'=:='
						(_cor15,
						 Self) ->
					  let <_cor5> =
					      %% Line 2877
					      call 'erlang':'get'
						  ('ct_run_dir')
					  in  %% Line 2877
					      call 'filename':'join'
						  (_cor5, _cor0)
				      %% Line 2878
				      <_fol407,_fol408> when 'true' ->
					  %% Line 2880
					  case apply 'get_log_dir'/1
						   ('true') of
					    <{'ok',RunDir}> when 'true' ->
						%% Line 2881
						call 'filename':'join'
						    (RunDir, _cor0)
					    ( <_cor6> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor6})
					      -| ['compiler_generated'] )
					  end
				    end
				in  %% Line 2883
				    case call 'filelib':'is_file'
					     (_cor8) of
				      %% Line 2884
				      <'true'> when 'true' ->
					  _cor8
				      %% Line 2886
				      <'false'> when 'true' ->
					  let <CTPath> =
					      %% Line 2888
					      call 'code':'lib_dir'
						  ('common_test')
					  in  let <_cor11> =
						  %% Line 2889
						  call 'filename':'join'
						      (CTPath, [112|[114|[105|[118]]]])
					      in  %% Line 2889
						  call 'filename':'join'
						      (_cor11, _cor0)
				      ( <_cor12> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor12})
					-| ['compiler_generated'] )
				    end
		    ( <_cor13> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor13})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'make_relative'/1 =
    %% Line 2901
    fun (_cor0) ->
	%% Line 2902
	case call 'file':'get_cwd'
		 () of
	  <{'ok',Cwd}> when 'true' ->
	      %% Line 2903
	      apply 'make_relative'/2
		  (_cor0, Cwd)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'make_relative'/2 =
    %% Line 2905
    fun (_cor1,_cor0) ->
	let <DirTokens> =
	    %% Line 2906
	    call 'filename':'split'
		(_cor1)
	in  let <CwdTokens> =
		%% Line 2907
		call 'filename':'split'
		    (_cor0)
	    in  let <_cor4> =
		    %% Line 2908
		    apply 'make_relative1'/2
			(DirTokens, CwdTokens)
		in  %% Line 2908
		    call 'filename':'join'
			(_cor4)
'make_relative1'/2 =
    %% Line 2910
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[T|DirTs],[_cor16|CwdTs]>
	      when call 'erlang':'=:='
		    (_cor16,
		     T) ->
	      %% Line 2911
	      apply 'make_relative1'/2
		  (DirTs, CwdTs)
	  %% Line 2912
	  <Last = [_X_File|[]],[]> when 'true' ->
	      %% Line 2913
	      Last
	  %% Line 2914
	  <Last = [_X_File|[]],CwdTs> when 'true' ->
	      let <_cor6> =
		  %% Line 2915
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[_cor17|_cor3]> when 'true' ->
				      let <_cor5> =
					  apply 'lc$^0'/1
					      (_cor3)
				      in  ( [[46|[46|[47]]]|_cor5]
					    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (CwdTs)
		    -| ['list_comprehension'] )
	      in  %% Line 2916
		  call 'erlang':'++'
		      (_cor6, Last)
	  %% Line 2917
	  <DirTs,[]> when 'true' ->
	      %% Line 2918
	      DirTs
	  %% Line 2919
	  <DirTs,CwdTs> when 'true' ->
	      let <_cor12> =
		  %% Line 2920
		  ( letrec
			'lc$^1'/1 =
			    fun (_cor10) ->
				case _cor10 of
				  <[_cor18|_cor9]> when 'true' ->
				      let <_cor11> =
					  apply 'lc$^1'/1
					      (_cor9)
				      in  ( [[46|[46|[47]]]|_cor11]
					    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor10> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor10})
					  -| [{'function_name',{'lc$^1',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^1'/1
			    (CwdTs)
		    -| ['list_comprehension'] )
	      in  %% Line 2921
		  call 'erlang':'++'
		      (_cor12, DirTs)
	end
'get_ts_html_wrapper'/5 =
    %% Line 2929
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2930
	apply 'get_ts_html_wrapper'/6
	    (_cor4, 'undefined', _cor3, _cor2, _cor1, _cor0)
'get_ts_html_wrapper'/6 =
    %% Line 2932
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 2933
	    case <> of
	      <>
		  when call 'erlang':'is_list'
			(_cor5) ->
		  %% Line 2934
		  call 'lists':'flatten'
		      (_cor5)
	      %% Line 2935
	      <> when 'true' ->
		  let <_cor6> =
		      %% Line 2936
		      call 'io_lib':'format'
			  ([126|[112]], [_cor5|[]])
		  in  %% Line 2936
		      call 'lists':'flatten'
			  (_cor6)
	    end
	in  let <Basic> =
		%% Line 2938
		apply 'basic_html'/0
		    ()
	    in  let <_cor16> =
		    %% Line 2940
		    case <> of
		      <>
			  when let <_cor10> =
				call 'erlang':'=:='
				    (_cor3, 'false')
			    in  let <_cor11> =
				    call 'erlang':'is_boolean'
					(_cor3)
				in  call 'erlang':'and'
					(_cor10, _cor11) ->
			  %% Line 2941
			  []
		      %% Line 2942
		      <> when 'true' ->
			  let <_cor12> =
			      %% Line 2943
			      call 'application':'get_env'
				  ('common_test', 'test_label')
			  in  %% Line 2943
			      case <Basic,_cor12> of
				%% Line 2944
				<'true',{'ok',Lbl}>
				    when call 'erlang':'=/='
					  (Lbl,
					   'undefined') ->
				    let <_cor13> =
					%% Line 2945
					call 'erlang':'++'
					    (Lbl, [60|[47|[102|[111|[110|[116|[62|[60|[47|[104|[49|[62|[10]]]]]]]]]]]]])
				    in  %% Line 2945
					call 'erlang':'++'
					    ([60|[104|[49|[62|[60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34|[103|[114|[101|[101|[110|[34|[62]]]]]]]]]]]]]]]]]]]]]]]], _cor13)
				%% Line 2946
				<_cor67,{'ok',Lbl}>
				    when call 'erlang':'=/='
					  (Lbl,
					   'undefined') ->
				    let <_cor14> =
					%% Line 2947
					call 'erlang':'++'
					    (Lbl, [39|[60|[47|[100|[105|[118|[62|[10]]]]]]]])
				    in  %% Line 2947
					call 'erlang':'++'
					    ([60|[100|[105|[118|[32|[99|[108|[97|[115|[115|[61|[34|[108|[97|[98|[101|[108|[34|[62|[39]]]]]]]]]]]]]]]]]]]], _cor14)
				%% Line 2948
				<_fol420,_fol421> when 'true' ->
				    %% Line 2949
				    []
			      end
		    end
		in  let <CTPath> =
			%% Line 2952
			call 'code':'lib_dir'
			    ('common_test')
		    in  let <_cor19> =
			    %% Line 2955
			    case <> of
			      <>
				  when call 'erlang':'=:='
					(_cor4,
					 'undefined') ->
				  apply 'get_log_dir'/1
				      ('true')
			      %% Line 2956
			      <> when 'true' ->
				  {'ok',_cor4}
			    end
			in  %% Line 2954
			    case _cor19 of
			      <{'ok',CtLogdir}> when 'true' ->
				  let <_cor21> =
				      %% Line 2959
				      call 'filename':'dirname'
					  (CtLogdir)
				  in  let <_cor22> =
					  %% Line 2959
					  call 'filename':'join'
					      (_cor21, %% Line 2960
						       [97|[108|[108|[95|[114|[117|[110|[115|[46|[104|[116|[109|[108]]]]]]]]]]]]])
				      in  let <AllRuns> =
					      %% Line 2959
					      apply 'make_relative'/2
						  (_cor22, _cor2)
					  in  let <_cor24> =
						  %% Line 2961
						  call 'filename':'dirname'
						      (CtLogdir)
					      in  let <_cor25> =
						      %% Line 2961
						      call 'filename':'join'
							  (_cor24, %% Line 2962
								   [105|[110|[100|[101|[120|[46|[104|[116|[109|[108]]]]]]]]]])
						  in  let <TestIndex> =
							  %% Line 2961
							  apply 'make_relative'/2
							      (_cor25, _cor2)
						      in  %% Line 2963
							  case Basic of
							    %% Line 2964
							    <'true'> when 'true' ->
								let <_cor27> =
								    %% Line 2965
								    call 'filename':'join'
									(CTPath, [112|[114|[105|[118]]]])
								in  let <TileFile> =
									%% Line 2965
									call 'filename':'join'
									    (_cor27, [116|[105|[108|[101|[49|[46|[106|[112|[103]]]]]]]]])
								    in  let <_cor29> =
									    %% Line 2966
									    call 'erlang':'++'
										(TileFile, [34])
									in  let <Bgr> =
										%% Line 2966
										call 'erlang':'++'
										    ([32|[98|[97|[99|[107|[103|[114|[111|[117|[110|[100|[61|[34]]]]]]]]]]]]], _cor29)
									    in  let <_cor31> =
										    %% Line 2969
										    apply 'year'/0
											()
										in  let <_cor32> =
											%% Line 2972
											apply 'current_time'/0
											    ()
										    in  let <Copyright> =
											    %% Line 2968
											    [[60|[112|[62|[60|[102|[111|[110|[116|[32|[115|[105|[122|[101|[61|[34|[45|[49|[34|[62|[10]]]]]]]]]]]]]]]]]]]]|%% Line 2969
																									  [[67|[111|[112|[121|[114|[105|[103|[104|[116|[32|[38|[99|[111|[112|[121|[59|[32]]]]]]]]]]]]]]]]]|[_cor31|%% Line 2970
																																						   [[32|[60|[97|[32|[104|[114|[101|[102|[61|[34|[104|[116|[116|[112|[58|[47|[47|[119|[119|[119|[46|[101|[114|[108|[97|[110|[103|[46|[111|[114|[103|[34|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 2971
																																																													    [[79|[112|[101|[110|[32|[84|[101|[108|[101|[99|[111|[109|[32|[80|[108|[97|[116|[102|[111|[114|[109|[60|[47|[97|[62|[60|[98|[114|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 2972
																																																																																		  [[85|[112|[100|[97|[116|[101|[100|[58|[32|[60|[33|[100|[97|[116|[101|[62]]]]]]]]]]]]]]]]|[_cor32|[[60|[33|[47|[100|[97|[116|[101|[62]]]]]]]]|[[60|[98|[114|[62|[10|[60|[47|[102|[111|[110|[116|[62|[60|[47|[112|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]
											in  let <_cor36> =
												%% Line 2980
												apply 'html_encoding'/1
												    (_cor0)
											    in  let <_cor34> =
												    %% Line 2986
												    apply 'uri'/1
													(AllRuns)
												in  let <_cor35> =
													%% Line 2988
													apply 'uri'/1
													    (TestIndex)
												    in  %% Line 2974
													{'basic_html',%% Line 2975
														      [[60|[33|[68|[79|[67|[84|[89|[80|[69|[32|[72|[84|[77|[76|[32|[80|[85|[66|[76|[73|[67|[32|[34|[45|[47|[47|[87|[51|[67|[47|[47|[68|[84|[68|[32|[72|[84|[77|[76|[32|[51|[46|[50|[32|[70|[105|[110|[97|[108|[47|[47|[69|[78|[34|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 2976
																																																		  [[60|[104|[116|[109|[108|[62|[10]]]]]]]|%% Line 2977
																																																							  [[60|[104|[101|[97|[100|[62|[60|[116|[105|[116|[108|[101|[62]]]]]]]]]]]]]|[_cor7|[[60|[47|[116|[105|[116|[108|[101|[62|[10]]]]]]]]]|%% Line 2978
																																																																							      [[60|[109|[101|[116|[97|[32|[104|[116|[116|[112|[45|[101|[113|[117|[105|[118|[61|[34|[99|[97|[99|[104|[101|[45|[99|[111|[110|[116|[114|[111|[108|[34|[32|[99|[111|[110|[116|[101|[110|[116|[61|[34|[110|[111|[45|[99|[97|[99|[104|[101|[34|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 2979
																																																																																																												      [[60|[109|[101|[116|[97|[32|[104|[116|[116|[112|[45|[101|[113|[117|[105|[118|[61|[34|[99|[111|[110|[116|[101|[110|[116|[45|[116|[121|[112|[101|[34|[32|[99|[111|[110|[116|[101|[110|[116|[61|[34|[116|[101|[120|[116|[47|[104|[116|[109|[108|[59|[32|[99|[104|[97|[114|[115|[101|[116|[61]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 2980
																																																																																																																																																							    [_cor36|[[34|[62|[10]]]|%% Line 2981
																																																																																																																																																										    [[60|[47|[104|[101|[97|[100|[62|[10]]]]]]]]|%% Line 2982
																																																																																																																																																																[[60|[98|[111|[100|[121]]]]]|[Bgr|[[32|[98|[103|[99|[111|[108|[111|[114|[61|[34|[119|[104|[105|[116|[101|[34|[32|[116|[101|[120|[116|[61|[34|[98|[108|[97|[99|[107|[34|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 2983
																																																																																																																																																																																									 [[108|[105|[110|[107|[61|[34|[98|[108|[117|[101|[34|[32|[118|[108|[105|[110|[107|[61|[34|[112|[117|[114|[112|[108|[101|[34|[32|[97|[108|[105|[110|[107|[61|[34|[114|[101|[100|[34|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 2984
																																																																																																																																																																																																																					   [_cor16|[[10]]]]]]]]]]]]]]]]],%% Line 2985
																																																																																																																																																																																																																									 [[60|[99|[101|[110|[116|[101|[114|[62|[10|[60|[98|[114|[62|[60|[104|[114|[62|[60|[112|[62|[10]]]]]]]]]]]]]]]]]]]]]|%% Line 2986
																																																																																																																																																																																																																																							    [[60|[97|[32|[104|[114|[101|[102|[61|[34]]]]]]]]]|[_cor34|%% Line 2987
																																																																																																																																																																																																																																														      [[34|[62|[84|[101|[115|[116|[32|[114|[117|[110|[32|[104|[105|[115|[116|[111|[114|[121|[10|[60|[47|[97|[62|[32|[32|[124|[32|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 2988
																																																																																																																																																																																																																																																																		 [[60|[97|[32|[104|[114|[101|[102|[61|[34]]]]]]]]]|[_cor35|%% Line 2989
																																																																																																																																																																																																																																																																									   [[34|[62|[84|[111|[112|[32|[108|[101|[118|[101|[108|[32|[116|[101|[115|[116|[32|[105|[110|[100|[101|[120|[10|[60|[47|[97|[62|[10|[60|[47|[112|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 2990
																																																																																																																																																																																																																																																																																																  [Copyright|[[60|[47|[99|[101|[110|[116|[101|[114|[62|[10|[60|[47|[98|[111|[100|[121|[62|[10|[60|[47|[104|[116|[109|[108|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}
							    %% Line 2991
							    <_cor69> when 'true' ->
								let <_cor37> =
								    %% Line 2994
								    apply 'year'/0
									()
								in  let <_cor38> =
									%% Line 2997
									apply 'current_time'/0
									    ()
								    in  let <Copyright> =
									    %% Line 2993
									    [[60|[100|[105|[118|[32|[99|[108|[97|[115|[115|[61|[34|[99|[111|[112|[121|[114|[105|[103|[104|[116|[34|[62]]]]]]]]]]]]]]]]]]]]]]]|%% Line 2994
																									      [[67|[111|[112|[121|[114|[105|[103|[104|[116|[32|[38|[99|[111|[112|[121|[59|[32]]]]]]]]]]]]]]]]]|[_cor37|%% Line 2995
																																						       [[32|[60|[97|[32|[104|[114|[101|[102|[61|[34|[104|[116|[116|[112|[58|[47|[47|[119|[119|[119|[46|[101|[114|[108|[97|[110|[103|[46|[111|[114|[103|[34|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 2996
																																																														[[79|[112|[101|[110|[32|[84|[101|[108|[101|[99|[111|[109|[32|[80|[108|[97|[116|[102|[111|[114|[109|[60|[47|[97|[62|[60|[98|[114|[32|[47|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 2997
																																																																																				[[85|[112|[100|[97|[116|[101|[100|[58|[32|[60|[33|[100|[97|[116|[101|[62]]]]]]]]]]]]]]]]|[_cor38|[[60|[33|[47|[100|[97|[116|[101|[62]]]]]]]]|[[60|[98|[114|[32|[47|[62|[10|[60|[47|[100|[105|[118|[62|[10]]]]]]]]]]]]]]]]]]]]]]]
									in  let <_cor42> =
										%% Line 3000
										( fun () ->
										      []
										  -| [{'id',{0,0,'-get_ts_html_wrapper/6-fun-0-'}}] )
									    in  let <_cor41> =
										    %% Line 3001
										    ( fun () ->
											  let <_cor40> =
											      apply 'locate_priv_file'/1
												  ([99|[116|[95|[100|[101|[102|[97|[117|[108|[116|[46|[99|[115|[115]]]]]]]]]]]]]])
											  in  apply 'make_relative'/2
												  (_cor40, _cor2)
										      -| [{'id',{0,0,'-get_ts_html_wrapper/6-fun-1-'}}] )
										in  let <CSSFile> =
											%% Line 3000
											apply 'xhtml'/2
											    (_cor42, _cor41)
										    in  let <_cor46> =
											    %% Line 3005
											    ( fun () ->
												  []
											      -| [{'id',{0,0,'-get_ts_html_wrapper/6-fun-2-'}}] )
											in  let <_cor45> =
												%% Line 3006
												( fun () ->
												      let <_cor44> =
													  apply 'locate_priv_file'/1
													      ([106|[113|[117|[101|[114|[121|[45|[108|[97|[116|[101|[115|[116|[46|[106|[115]]]]]]]]]]]]]]]])
												      in  apply 'make_relative'/2
													      (_cor44, _cor2)
												  -| [{'id',{0,0,'-get_ts_html_wrapper/6-fun-3-'}}] )
											    in  let <JQueryFile> =
												    %% Line 3005
												    apply 'xhtml'/2
													(_cor46, _cor45)
												in  let <_cor50> =
													%% Line 3010
													( fun () ->
													      []
													  -| [{'id',{0,0,'-get_ts_html_wrapper/6-fun-4-'}}] )
												    in  let <_cor49> =
													    %% Line 3011
													    ( fun () ->
														  let <_cor48> =
														      apply 'locate_priv_file'/1
															  ([106|[113|[117|[101|[114|[121|[46|[116|[97|[98|[108|[101|[115|[111|[114|[116|[101|[114|[46|[109|[105|[110|[46|[106|[115]]]]]]]]]]]]]]]]]]]]]]]]])
														  in  apply 'make_relative'/2
															  (_cor48, _cor2)
													      -| [{'id',{0,0,'-get_ts_html_wrapper/6-fun-5-'}}] )
													in  let <TableSorterFile> =
														%% Line 3010
														apply 'xhtml'/2
														    (_cor50, _cor49)
													    in  let <_cor53> =
														    %% Line 3015
														    ( fun () ->
															  []
														      -| [{'id',{0,0,'-get_ts_html_wrapper/6-fun-6-'}}] )
														in  let <_cor52> =
															%% Line 3016
															( fun () ->
															      apply 'insert_javascript'/1
																  ({'tablesorter',%% Line 3017
																		  [83|[111|[114|[116|[97|[98|[108|[101|[84|[97|[98|[108|[101]]]]]]]]]]]]],_cor1})
															  -| [{'id',{0,0,'-get_ts_html_wrapper/6-fun-7-'}}] )
														    in  let <TableSorterScript> =
															    %% Line 3015
															    apply 'xhtml'/2
																(_cor53, _cor52)
															in  let <_cor58> =
																%% Line 3026
																apply 'uri'/1
																    (CSSFile)
															    in  let <_cor57> =
																    %% Line 3029
																    call 'erlang':'++'
																	(TableSorterScript, [[60|[47|[104|[101|[97|[100|[62|[10]]]]]]]]|[[60|[98|[111|[100|[121|[62|[10]]]]]]]|[_cor16|[[10]]]]])
																in  let <_cor59> =
																	%% Line 3020
																	[[60|[33|[68|[79|[67|[84|[89|[80|[69|[32|[104|[116|[109|[108|[32|[80|[85|[66|[76|[73|[67|[32|[34|[45|[47|[47|[87|[51|[67|[47|[47|[68|[84|[68|[32|[88|[72|[84|[77|[76|[32|[49|[46|[48|[32|[84|[114|[97|[110|[115|[105|[116|[105|[111|[110|[97|[108|[47|[47|[69|[78|[34|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3021
																																																										 [[34|[104|[116|[116|[112|[58|[47|[47|[119|[119|[119|[46|[119|[51|[46|[111|[114|[103|[47|[84|[82|[47|[120|[104|[116|[109|[108|[49|[47|[68|[84|[68|[47|[120|[104|[116|[109|[108|[49|[45|[116|[114|[97|[110|[115|[105|[116|[105|[111|[110|[97|[108|[46|[100|[116|[100|[34|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3022
																																																																																																			   [[60|[104|[116|[109|[108|[32|[120|[109|[108|[110|[115|[61|[34|[104|[116|[116|[112|[58|[47|[47|[119|[119|[119|[46|[119|[51|[46|[111|[114|[103|[47|[49|[57|[57|[57|[47|[120|[104|[116|[109|[108|[34|[32|[120|[109|[108|[58|[108|[97|[110|[103|[61|[34|[101|[110|[34|[32|[108|[97|[110|[103|[61|[34|[101|[110|[34|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3023
																																																																																																																																																		      [[60|[104|[101|[97|[100|[62|[10|[60|[116|[105|[116|[108|[101|[62]]]]]]]]]]]]]]|[_cor7|[[60|[47|[116|[105|[116|[108|[101|[62|[10]]]]]]]]]|%% Line 3024
																																																																																																																																																																			       [[60|[109|[101|[116|[97|[32|[104|[116|[116|[112|[45|[101|[113|[117|[105|[118|[61|[34|[99|[97|[99|[104|[101|[45|[99|[111|[110|[116|[114|[111|[108|[34|[32|[99|[111|[110|[116|[101|[110|[116|[61|[34|[110|[111|[45|[99|[97|[99|[104|[101|[34|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3025
																																																																																																																																																																																																								       [[60|[109|[101|[116|[97|[32|[104|[116|[116|[112|[45|[101|[113|[117|[105|[118|[61|[34|[99|[111|[110|[116|[101|[110|[116|[45|[116|[121|[112|[101|[34|[32|[99|[111|[110|[116|[101|[110|[116|[61|[34|[116|[101|[120|[116|[47|[104|[116|[109|[108|[59|[32|[99|[104|[97|[114|[115|[101|[116|[61|[117|[116|[102|[45|[56|[34|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3026
																																																																																																																																																																																																																																																									[[60|[108|[105|[110|[107|[32|[114|[101|[108|[61|[34|[115|[116|[121|[108|[101|[115|[104|[101|[101|[116|[34|[32|[104|[114|[101|[102|[61|[34]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[_cor58|[[34|[32|[116|[121|[112|[101|[61|[34|[116|[101|[120|[116|[47|[99|[115|[115|[34|[62|[10]]]]]]]]]]]]]]]]]]]|%% Line 3027
																																																																																																																																																																																																																																																																																												 [[60|[115|[99|[114|[105|[112|[116|[32|[116|[121|[112|[101|[61|[34|[116|[101|[120|[116|[47|[106|[97|[118|[97|[115|[99|[114|[105|[112|[116|[34|[32|[115|[114|[99|[61|[34]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[JQueryFile|[[34|[62|[60|[47|[115|[99|[114|[105|[112|[116|[62|[10]]]]]]]]]]]]|%% Line 3028
																																																																																																																																																																																																																																																																																																																															  [[60|[115|[99|[114|[105|[112|[116|[32|[116|[121|[112|[101|[61|[34|[116|[101|[120|[116|[47|[106|[97|[118|[97|[115|[99|[114|[105|[112|[116|[34|[32|[115|[114|[99|[61|[34]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[TableSorterFile|[[34|[62|[60|[47|[115|[99|[114|[105|[112|[116|[62|[10]]]]]]]]]]]]|_cor57]]]]]]]]]]]]]]]]]
																    in  let <_cor55> =
																	    %% Line 3031
																	    apply 'uri'/1
																		(AllRuns)
																	in  let <_cor56> =
																		%% Line 3033
																		apply 'uri'/1
																		    (TestIndex)
																	    in  %% Line 3019
																		{'xhtml',_cor59,%% Line 3030
																				[[60|[99|[101|[110|[116|[101|[114|[62|[10|[60|[98|[114|[32|[47|[62|[60|[104|[114|[32|[47|[62|[60|[112|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3031
																																				       [[60|[97|[32|[104|[114|[101|[102|[61|[34]]]]]]]]]|[_cor55|%% Line 3032
																																												 [[34|[62|[84|[101|[115|[116|[32|[114|[117|[110|[32|[104|[105|[115|[116|[111|[114|[121|[10|[60|[47|[97|[62|[32|[32|[124|[32|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3033
																																																															    [[60|[97|[32|[104|[114|[101|[102|[61|[34]]]]]]]]]|[_cor56|%% Line 3034
																																																																						      [[34|[62|[84|[111|[112|[32|[108|[101|[118|[101|[108|[32|[116|[101|[115|[116|[32|[105|[110|[100|[101|[120|[10|[60|[47|[97|[62|[10|[60|[47|[112|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3035
																																																																																													     [Copyright|[[60|[47|[99|[101|[110|[116|[101|[114|[62|[10|[60|[47|[98|[111|[100|[121|[62|[10|[60|[47|[104|[116|[109|[108|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}
							  end
			      ( <_cor20> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor20})
				-| ['compiler_generated'] )
			    end
'insert_javascript'/1 =
    %% Line 3038
    fun (_cor0) ->
	case _cor0 of
	  <{'tablesorter',_X_TableName,'undefined'}> when 'true' ->
	      %% Line 3039
	      []
	  %% Line 3041
	  <{'tablesorter',TableName,%% Line 3042
				    {DateCols,TextCols,ValCols}}> when 'true' ->
	      let <_cor10> =
		  %% Line 3046
		  ( fun (_cor8) ->
			case _cor8 of
			  <{Sorter,Cols}> when 'true' ->
			      %% Line 3047
			      ( letrec
				    'lc$^0'/1 =
					fun (_cor3) ->
					    case _cor3 of
					      <[%% Line 3050
						Col|_cor2]> when 'true' ->
						  let <_cor4> =
						      %% Line 3050
						      call 'erlang':'-'
							  (Col, 1)
						  in  let <_cor5> =
							  %% Line 3048
							  call 'io_lib':'format'
							      ([32|[32|[32|[32|[32|[32|[126|[119|[58|[32|[123|[32|[115|[111|[114|[116|[101|[114|[58|[32|[39|[126|[115|[39|[32|[125|[44|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 3050
																											[_cor4|[Sorter|[]]])
						      in  let <_cor6> =
							      call 'lists':'flatten'
								  (_cor5)
							  in  let <_cor7> =
								  %% Line 3050
								  apply 'lc$^0'/1
								      (_cor2)
							      in  ( [_cor6|_cor7]
								    -| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor3> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor3})
						      -| [{'function_name',{'lc$^0',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^0'/1
					(%% Line 3050
					 Cols)
				-| ['list_comprehension'] )
			  ( <_cor9> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor9})
				  -| [{'function_name',{'-insert_javascript/1-fun-0-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-insert_javascript/1-fun-0-'}}] )
	      in  let <_cor11> =
		      %% Line 3046
		      call 'lists':'flatmap'
			  (_cor10, %% Line 3051
				   [{[67|[84|[68|[97|[116|[101|[83|[111|[114|[116|[101|[114]]]]]]]]]]]],DateCols}|%% Line 3052
														  [{[67|[84|[84|[101|[120|[116|[83|[111|[114|[116|[101|[114]]]]]]]]]]]],TextCols}|%% Line 3053
																								  [{[67|[84|[86|[97|[108|[83|[111|[114|[116|[101|[114]]]]]]]]]]],ValCols}|[]]]])
		  in  let <_cor12> =
			  %% Line 3045
			  call 'lists':'sort'
			      (_cor11)
		      in  let <Headers> =
			      %% Line 3044
			      call 'lists':'flatten'
				  (_cor12)
			  in  let <_cor14> =
				  %% Line 3054
				  call 'erlang':'length'
				      (Headers)
			      in  let <_cor15> =
				      %% Line 3054
				      call 'erlang':'-'
					  (_cor14, 2)
				  in  let <Headers1> =
					  %% Line 3054
					  call 'string':'substr'
					      (Headers, 1, _cor15)
				      in  %% Line 3056
					  [[60|[115|[99|[114|[105|[112|[116|[32|[116|[121|[112|[101|[61|[34|[116|[101|[120|[116|[47|[106|[97|[118|[97|[115|[99|[114|[105|[112|[116|[34|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3057
																											       [[47|[47|[32|[80|[97|[114|[115|[101|[114|[32|[102|[111|[114|[32|[100|[97|[116|[101|[32|[102|[111|[114|[109|[97|[116|[44|[32|[101|[46|[103|[58|[32|[87|[101|[100|[32|[74|[117|[108|[32|[52|[32|[50|[48|[49|[50|[32|[49|[49|[58|[50|[52|[58|[49|[53|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3058
																																																																	     [[118|[97|[114|[32|[109|[111|[110|[116|[104|[78|[97|[109|[101|[115|[32|[61|[32|[123|[125|[59|[10]]]]]]]]]]]]]]]]]]]]]|%% Line 3059
																																																																																   [[109|[111|[110|[116|[104|[78|[97|[109|[101|[115|[91|[34|[74|[97|[110|[34|[93|[32|[61|[32|[34|[48|[49|[34|[59|[32|[109|[111|[110|[116|[104|[78|[97|[109|[101|[115|[91|[34|[70|[101|[98|[34|[93|[32|[61|[32|[34|[48|[50|[34|[59|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3060
																																																																																																																			  [[109|[111|[110|[116|[104|[78|[97|[109|[101|[115|[91|[34|[77|[97|[114|[34|[93|[32|[61|[32|[34|[48|[51|[34|[59|[32|[109|[111|[110|[116|[104|[78|[97|[109|[101|[115|[91|[34|[65|[112|[114|[34|[93|[32|[61|[32|[34|[48|[52|[34|[59|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3061
																																																																																																																																																						  [[109|[111|[110|[116|[104|[78|[97|[109|[101|[115|[91|[34|[77|[97|[121|[34|[93|[32|[61|[32|[34|[48|[53|[34|[59|[32|[109|[111|[110|[116|[104|[78|[97|[109|[101|[115|[91|[34|[74|[117|[110|[34|[93|[32|[61|[32|[34|[48|[54|[34|[59|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3062
																																																																																																																																																																																									  [[109|[111|[110|[116|[104|[78|[97|[109|[101|[115|[91|[34|[74|[117|[108|[34|[93|[32|[61|[32|[34|[48|[55|[34|[59|[32|[109|[111|[110|[116|[104|[78|[97|[109|[101|[115|[91|[34|[65|[117|[103|[34|[93|[32|[61|[32|[34|[48|[56|[34|[59|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3063
																																																																																																																																																																																																																												   [[109|[111|[110|[116|[104|[78|[97|[109|[101|[115|[91|[34|[83|[101|[112|[34|[93|[32|[61|[32|[34|[48|[57|[34|[59|[32|[109|[111|[110|[116|[104|[78|[97|[109|[101|[115|[91|[34|[79|[99|[116|[34|[93|[32|[61|[32|[34|[49|[48|[34|[59|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3064
																																																																																																																																																																																																																																																															   [[109|[111|[110|[116|[104|[78|[97|[109|[101|[115|[91|[34|[78|[111|[118|[34|[93|[32|[61|[32|[34|[49|[49|[34|[59|[32|[109|[111|[110|[116|[104|[78|[97|[109|[101|[115|[91|[34|[68|[101|[99|[34|[93|[32|[61|[32|[34|[49|[50|[34|[59|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3065
																																																																																																																																																																																																																																																																																																		   [[36|[46|[116|[97|[98|[108|[101|[115|[111|[114|[116|[101|[114|[46|[97|[100|[100|[80|[97|[114|[115|[101|[114|[40|[123|[10]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3066
																																																																																																																																																																																																																																																																																																																				      [[32|[32|[105|[100|[58|[32|[39|[67|[84|[68|[97|[116|[101|[83|[111|[114|[116|[101|[114|[39|[44|[10]]]]]]]]]]]]]]]]]]]]]]|%% Line 3067
																																																																																																																																																																																																																																																																																																																																			      [[32|[32|[105|[115|[58|[32|[102|[117|[110|[99|[116|[105|[111|[110|[40|[115|[41|[32|[123|[10]]]]]]]]]]]]]]]]]]]]|%% Line 3068
																																																																																																																																																																																																																																																																																																																																																	      [[32|[32|[32|[32|[32|[32|[114|[101|[116|[117|[114|[110|[32|[102|[97|[108|[115|[101|[59|[32|[125|[44|[10]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3069
																																																																																																																																																																																																																																																																																																																																																																	     [[32|[32|[102|[111|[114|[109|[97|[116|[58|[32|[102|[117|[110|[99|[116|[105|[111|[110|[40|[115|[41|[32|[123|[10]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3071
																																																																																																																																																																																																																																																																																																																																																																																		    [[32|[32|[32|[32|[32|[32|[105|[102|[32|[40|[115|[46|[108|[101|[110|[103|[116|[104|[32|[60|[32|[50|[41|[32|[114|[101|[116|[117|[114|[110|[32|[57|[57|[57|[57|[57|[57|[57|[57|[57|[59|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3072
																																																																																																																																																																																																																																																																																																																																																																																																														      [[32|[32|[32|[32|[32|[32|[101|[108|[115|[101|[32|[123|[10]]]]]]]]]]]]]|%% Line 3074
																																																																																																																																																																																																																																																																																																																																																																																																																							     [[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[118|[97|[114|[32|[100|[97|[116|[101|[32|[61|[32|[115|[46|[109|[97|[116|[99|[104|[40|[47|[40|[92|[119|[123|[51|[125|[41|[92|[115|[40|[92|[119|[123|[51|[125|[41|[92|[115|[40|[92|[100|[123|[50|[125|[41|[92|[115|[40|[92|[100|[123|[52|[125|[41|[92|[115|[40|[92|[100|[123|[50|[125|[41|[58|[40|[92|[100|[123|[50|[125|[41|[58|[40|[92|[100|[123|[50|[125|[41|[47|[41|[59|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3075
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																						 [[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[118|[97|[114|[32|[121|[32|[61|[32|[100|[97|[116|[101|[91|[52|[93|[59|[32|[118|[97|[114|[32|[109|[111|[32|[61|[32|[109|[111|[110|[116|[104|[78|[97|[109|[101|[115|[91|[100|[97|[116|[101|[91|[50|[93|[93|[59|[32|[118|[97|[114|[32|[100|[32|[61|[32|[83|[116|[114|[105|[110|[103|[40|[100|[97|[116|[101|[91|[51|[93|[41|[59|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3076
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																													    [[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[118|[97|[114|[32|[104|[32|[61|[32|[83|[116|[114|[105|[110|[103|[40|[100|[97|[116|[101|[91|[53|[93|[41|[59|[32|[118|[97|[114|[32|[109|[105|[32|[61|[32|[83|[116|[114|[105|[110|[103|[40|[100|[97|[116|[101|[91|[54|[93|[41|[59|[32|[118|[97|[114|[32|[115|[101|[99|[32|[61|[32|[83|[116|[114|[105|[110|[103|[40|[100|[97|[116|[101|[91|[55|[93|[41|[59|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3077
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																									[[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[114|[101|[116|[117|[114|[110|[32|[40|[112|[97|[114|[115|[101|[73|[110|[116|[40|[39|[39|[32|[43|[32|[121|[32|[43|[32|[109|[111|[32|[43|[32|[100|[32|[43|[32|[104|[32|[43|[32|[109|[105|[32|[43|[32|[115|[101|[99|[41|[41|[59|[32|[125|[125|[44|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3078
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																				     [[32|[32|[116|[121|[112|[101|[58|[32|[39|[110|[117|[109|[101|[114|[105|[99|[39|[32|[125|[41|[59|[10]]]]]]]]]]]]]]]]]]]]]]|%% Line 3080
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																			       [[47|[47|[32|[80|[97|[114|[115|[101|[114|[32|[102|[111|[114|[32|[103|[101|[110|[101|[114|[97|[108|[32|[116|[101|[120|[116|[32|[102|[111|[114|[109|[97|[116|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3081
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																												[[36|[46|[116|[97|[98|[108|[101|[115|[111|[114|[116|[101|[114|[46|[97|[100|[100|[80|[97|[114|[115|[101|[114|[40|[123|[10]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3082
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																														   [[32|[32|[105|[100|[58|[32|[39|[67|[84|[84|[101|[120|[116|[83|[111|[114|[116|[101|[114|[39|[44|[10]]]]]]]]]]]]]]]]]]]]]]|%% Line 3083
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																													    [[32|[32|[105|[115|[58|[32|[102|[117|[110|[99|[116|[105|[111|[110|[40|[115|[41|[32|[123|[10]]]]]]]]]]]]]]]]]]]]|%% Line 3084
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																											    [[32|[32|[32|[32|[114|[101|[116|[117|[114|[110|[32|[102|[97|[108|[115|[101|[59|[32|[125|[44|[10]]]]]]]]]]]]]]]]]]]]]|%% Line 3085
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																										 [[32|[32|[102|[111|[114|[109|[97|[116|[58|[32|[102|[117|[110|[99|[116|[105|[111|[110|[40|[115|[41|[32|[123|[10]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3087
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																											[[32|[32|[32|[32|[105|[102|[32|[40|[115|[46|[108|[101|[110|[103|[116|[104|[32|[60|[32|[49|[41|[32|[114|[101|[116|[117|[114|[110|[32|[39|[122|[122|[122|[122|[122|[122|[122|[122|[39|[59|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3088
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																							     [[32|[32|[32|[32|[101|[108|[115|[101|[32|[105|[102|[32|[40|[115|[32|[61|[61|[32|[34|[63|[34|[41|[32|[114|[101|[116|[117|[114|[110|[32|[39|[122|[122|[122|[122|[122|[122|[122|[39|[59|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3089
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																			       [[32|[32|[32|[32|[101|[108|[115|[101|[32|[105|[102|[32|[40|[115|[32|[61|[61|[32|[34|[45|[34|[41|[32|[114|[101|[116|[117|[114|[110|[32|[39|[122|[122|[122|[122|[122|[122|[39|[59|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3090
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																															   [[32|[32|[32|[32|[101|[108|[115|[101|[32|[105|[102|[32|[40|[115|[32|[61|[61|[32|[34|[70|[65|[73|[76|[69|[68|[34|[41|[32|[114|[101|[116|[117|[114|[110|[32|[39|[65|[39|[59|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3091
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																										 [[32|[32|[32|[32|[101|[108|[115|[101|[32|[105|[102|[32|[40|[115|[32|[61|[61|[32|[34|[83|[75|[73|[80|[80|[69|[68|[34|[41|[32|[114|[101|[116|[117|[114|[110|[32|[39|[66|[39|[59|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3092
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																					    [[32|[32|[32|[32|[101|[108|[115|[101|[32|[105|[102|[32|[40|[115|[32|[61|[61|[32|[34|[79|[75|[34|[41|[32|[114|[101|[116|[117|[114|[110|[32|[39|[67|[39|[59|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3093
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																													      [[32|[32|[32|[32|[101|[108|[115|[101|[32|[114|[101|[116|[117|[114|[110|[32|[39|[39|[32|[43|[32|[115|[59|[32|[125|[44|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3094
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																  [[32|[32|[116|[121|[112|[101|[58|[32|[39|[116|[101|[120|[116|[39|[32|[125|[41|[59|[10]]]]]]]]]]]]]]]]]]]|%% Line 3096
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																													   [[47|[47|[32|[80|[97|[114|[115|[101|[114|[32|[102|[111|[114|[32|[110|[117|[109|[101|[114|[105|[99|[97|[108|[32|[118|[97|[108|[117|[101|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3097
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																			  [[36|[46|[116|[97|[98|[108|[101|[115|[111|[114|[116|[101|[114|[46|[97|[100|[100|[80|[97|[114|[115|[101|[114|[40|[123|[10]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3098
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																					     [[32|[32|[105|[100|[58|[32|[39|[67|[84|[86|[97|[108|[83|[111|[114|[116|[101|[114|[39|[44|[10]]]]]]]]]]]]]]]]]]]]]|%% Line 3099
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																			       [[32|[32|[105|[115|[58|[32|[102|[117|[110|[99|[116|[105|[111|[110|[40|[115|[41|[32|[123|[10]]]]]]]]]]]]]]]]]]]]|%% Line 3100
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																	       [[32|[32|[32|[32|[114|[101|[116|[117|[114|[110|[32|[102|[97|[108|[115|[101|[59|[32|[125|[44|[10]]]]]]]]]]]]]]]]]]]]]|%% Line 3101
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																    [[32|[32|[102|[111|[114|[109|[97|[116|[58|[32|[102|[117|[110|[99|[116|[105|[111|[110|[40|[115|[41|[32|[123|[10|[32|[32|[32|[32|[105|[102|[32|[40|[115|[46|[108|[101|[110|[103|[116|[104|[32|[60|[32|[49|[41|[32|[114|[101|[116|[117|[114|[110|[32|[39|[45|[50|[39|[59|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3104
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																									 [[32|[32|[32|[32|[101|[108|[115|[101|[32|[105|[102|[32|[40|[115|[32|[61|[61|[32|[34|[63|[34|[41|[32|[114|[101|[116|[117|[114|[110|[32|[39|[45|[49|[39|[59|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3106
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																	   [[32|[32|[32|[32|[101|[108|[115|[101|[32|[105|[102|[32|[40|[40|[115|[46|[115|[101|[97|[114|[99|[104|[40|[47|[40|[92|[100|[123|[49|[44|[125|[41|[92|[115|[47|[41|[41|[32|[62|[61|[32|[48|[41|[32|[123|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3107
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																  [[32|[32|[32|[32|[32|[32|[118|[97|[114|[32|[110|[117|[109|[32|[61|[32|[115|[46|[109|[97|[116|[99|[104|[40|[47|[40|[92|[100|[123|[49|[44|[125|[41|[92|[115|[47|[41|[59|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3109
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																										   [[32|[32|[32|[32|[32|[32|[114|[101|[116|[117|[114|[110|[32|[40|[112|[97|[114|[115|[101|[73|[110|[116|[40|[39|[39|[32|[43|[32|[110|[117|[109|[91|[49|[93|[41|[41|[59|[32|[125|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3110
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																					    [[32|[32|[32|[32|[101|[108|[115|[101|[32|[105|[102|[32|[40|[40|[115|[46|[115|[101|[97|[114|[99|[104|[40|[47|[40|[92|[100|[123|[49|[44|[125|[41|[92|[46|[40|[92|[100|[123|[51|[125|[41|[115|[47|[41|[41|[32|[62|[61|[32|[48|[41|[32|[123|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3111
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																									      [[32|[32|[32|[32|[32|[32|[118|[97|[114|[32|[110|[117|[109|[32|[61|[32|[115|[46|[109|[97|[116|[99|[104|[40|[47|[40|[92|[100|[123|[49|[44|[125|[41|[92|[46|[40|[92|[100|[123|[51|[125|[41|[47|[41|[59|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3112
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																								    [[32|[32|[32|[32|[32|[32|[105|[102|[32|[40|[110|[117|[109|[91|[49|[93|[32|[61|[61|[32|[34|[48|[34|[41|[32|[114|[101|[116|[117|[114|[110|[32|[40|[112|[97|[114|[115|[101|[73|[110|[116|[40|[39|[39|[32|[43|[32|[110|[117|[109|[91|[50|[93|[41|[41|[59|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3113
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																														      [[32|[32|[32|[32|[32|[32|[101|[108|[115|[101|[32|[114|[101|[116|[117|[114|[110|[32|[40|[112|[97|[114|[115|[101|[73|[110|[116|[40|[39|[39|[32|[43|[32|[110|[117|[109|[91|[49|[93|[32|[43|[32|[110|[117|[109|[91|[50|[93|[41|[41|[59|[32|[125|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3114
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																			    [[32|[32|[32|[32|[101|[108|[115|[101|[32|[114|[101|[116|[117|[114|[110|[32|[39|[39|[32|[43|[32|[115|[59|[32|[125|[44|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3115
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																						[[32|[32|[116|[121|[112|[101|[58|[32|[39|[110|[117|[109|[101|[114|[105|[99|[39|[32|[125|[41|[59|[10]]]]]]]]]]]]]]]]]]]]]]|%% Line 3117
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																					  [[36|[40|[100|[111|[99|[117|[109|[101|[110|[116|[41|[46|[114|[101|[97|[100|[121|[40|[102|[117|[110|[99|[116|[105|[111|[110|[40|[41|[32|[123|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 3118
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																											 [[32|[32|[36|[40|[34|[35]]]]]]|[TableName|[[34|[41|[46|[116|[97|[98|[108|[101|[115|[111|[114|[116|[101|[114|[40|[123|[10]]]]]]]]]]]]]]]]]|%% Line 3119
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																												   [[32|[32|[32|[32|[104|[101|[97|[100|[101|[114|[115|[58|[32|[123|[32|[10]]]]]]]]]]]]]]]]|[Headers1|[[10|[32|[32|[32|[32|[125|[10|[32|[32|[125|[41|[59|[10]]]]]]]]]]]]]|%% Line 3120
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																	 [[32|[32|[36|[40|[34|[35]]]]]]|[TableName|[[34|[41|[46|[116|[114|[105|[103|[103|[101|[114|[40|[34|[117|[112|[100|[97|[116|[101|[34|[41|[59|[10]]]]]]]]]]]]]]]]]]]]]]|%% Line 3121
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																					      [[32|[32|[36|[40|[34|[35]]]]]]|[TableName|[[34|[41|[46|[116|[114|[105|[103|[103|[101|[114|[40|[34|[97|[112|[112|[101|[110|[100|[67|[97|[99|[104|[101|[34|[41|[59|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[125|[41|[59|[10|[60|[47|[115|[99|[114|[105|[112|[116|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  ( <_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17})
		  -| [{'function_name',{'insert_javascript',1}}] )
	    -| ['compiler_generated'] )
	end
'uri'/1 =
    %% Line 3124
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 3125
	      []
	  %% Line 3126
	  <Href> when 'true' ->
	      %% Line 3127
	      call 'test_server_ctrl':'uri_encode'
		  (Href)
	end
'encoding'/1 =
    %% Line 3131
    fun (_cor0) ->
	%% Line 3132
	case call 'epp':'read_encoding'
		 (_cor0) of
	  %% Line 3133
	  <'none'> when 'true' ->
	      %% Line 3134
	      call 'epp':'default_encoding'
		  ()
	  %% Line 3135
	  <E> when 'true' ->
	      %% Line 3136
	      E
	end
'b2s'/1 =
    %% Line 3140
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 3141
	    call 'epp':'default_encoding'
		()
	in  %% Line 3141
	    apply 'b2s'/2
		(_cor0, _cor1)
'b2s'/2 =
    %% Line 3144
    fun (_cor1,_cor0) ->
	%% Line 3145
	call 'unicode':'characters_to_list'
	    (_cor1, _cor0)
'html_encoding'/1 =
    %% Line 3147
    fun (_cor0) ->
	case _cor0 of
	  <'latin1'> when 'true' ->
	      %% Line 3148
	      [105|[115|[111|[45|[56|[56|[53|[57|[45|[49]]]]]]]]]]
	  %% Line 3149
	  <'utf8'> when 'true' ->
	      %% Line 3150
	      [117|[116|[102|[45|[56]]]]]
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'html_encoding',1}}] )
	    -| ['compiler_generated'] )
	end
'unexpected_io'/5 =
    %% Line 3152
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Pid,'ct_internal',_X_Importance,List,State> when 'true' ->
	      let <IoFun> =
		  %% Line 3153
		  apply 'create_io_fun'/2
		      (Pid, State)
	      in  %% Line 3154
		  ( case State of
		      ( <( {'logger_state',_cor17,_cor18,_cor19,_cor20,_rec37,_cor21,_cor22,_cor23}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_cor6> =
				%% Line 3155
				call 'lists':'foldl'
				    (IoFun, [], List)
			    in  call 'io':'format'
				    (_rec37, [126|[116|[115]]], %% Line 3155
								[_cor6|[]])
			-| ['compiler_generated'] )
		      ( <_cor24> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','logger_state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 3156
	  <Pid,_X_Category,_X_Importance,List,State> when 'true' ->
	      let <IoFun> =
		  %% Line 3157
		  apply 'create_io_fun'/2
		      (Pid, State)
	      in  let <_cor10> =
		      %% Line 3158
		      call 'lists':'foldl'
			  (IoFun, [], List)
		  in  let <Data> =
			  %% Line 3158
			  call 'io_lib':'format'
			      ([126|[116|[115]]], [_cor10|[]])
		      in  do  %% Line 3159
			      call 'test_server_io':'print_unexpected'
				  (Data)
			      %% Line 3160
			      'ok'
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('ct_logs')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('ct_logs', _cor0)
end