module 'cth_log_redirect' ['code_change'/3,
			   'handle_call'/2,
			   'handle_event'/2,
			   'handle_info'/2,
			   'handle_remote_events'/1,
			   'id'/1,
			   'init'/1,
			   'init'/2,
			   'module_info'/0,
			   'module_info'/1,
			   'post_end_per_group'/4,
			   'post_end_per_suite'/4,
			   'post_end_per_testcase'/4,
			   'post_init_per_group'/4,
			   'pre_end_per_group'/3,
			   'pre_end_per_suite'/3,
			   'pre_init_per_group'/3,
			   'pre_init_per_suite'/3,
			   'pre_init_per_testcase'/3,
			   'terminate'/1,
			   'terminate'/2]
    attributes [%% Line 44
		'behaviour' =
		    %% Line 44
		    ['gen_event']]
'id'/1 =
    %% Line 53
    fun (_cor0) ->
	%% Line 54
	'cth_log_redirect'
'init'/2 =
    %% Line 56
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'cth_log_redirect',_X_Opts> when 'true' ->
	      do  %% Line 57
		  call 'error_logger':'add_report_handler'
		      ('cth_log_redirect')
		  %% Line 58
		  'tc_log_async'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'init',2}}] )
	    -| ['compiler_generated'] )
	end
'pre_init_per_suite'/3 =
    %% Line 60
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 61
	    apply 'set_curr_func'/2
		({_cor2,'init_per_suite'}, _cor1)
	    %% Line 62
	    {_cor1,_cor0}
'pre_end_per_suite'/3 =
    %% Line 64
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 65
	    apply 'set_curr_func'/2
		({_cor2,'end_per_suite'}, _cor1)
	    %% Line 66
	    {_cor1,_cor0}
'post_end_per_suite'/4 =
    %% Line 68
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 69
	    apply 'set_curr_func'/2
		('undefined', _cor2)
	    %% Line 70
	    {_cor1,_cor0}
'pre_init_per_group'/3 =
    %% Line 72
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 73
	    apply 'set_curr_func'/2
		({'group',_cor2,'init_per_group'}, _cor1)
	    %% Line 74
	    {_cor1,_cor0}
'post_init_per_group'/4 =
    %% Line 76
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Group,Config,Result,'tc_log_async'>
	      when call 'erlang':'is_list'
		    (Config) ->
	      let <_cor4> =
		  %% Line 77
		  call 'proplists':'get_value'
		      (%% Line 78
		       'tc_group_properties', %% Line 78
					      Config, %% Line 78
						      [])
	      in  %% Line 77
		  case call 'lists':'member'
			   ('parallel', _cor4) of
		    %% Line 79
		    <'true'> when 'true' ->
			let <_cor5> =
			    %% Line 80
			    apply 'set_log_func'/1
				('tc_log')
			in  %% Line 80
			    {Result,{_cor5,Group}}
		    %% Line 81
		    <'false'> when 'true' ->
			%% Line 82
			{Result,'tc_log_async'}
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 84
	  <_X_Group,_X_Config,Result,State> when 'true' ->
	      %% Line 85
	      {Result,State}
	end
'pre_init_per_testcase'/3 =
    %% Line 87
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 88
	    apply 'set_curr_func'/2
		(_cor2, _cor1)
	    %% Line 89
	    {_cor1,_cor0}
'post_end_per_testcase'/4 =
    %% Line 91
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 94
	    call 'gen_event':'call'
		('error_logger', 'cth_log_redirect', 'flush', 300000)
	    %% Line 95
	    {_cor1,_cor0}
'pre_end_per_group'/3 =
    %% Line 97
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Group,Config,{'tc_log',_cor7}>
	      when call 'erlang':'=:='
		    (_cor7,
		     Group) ->
	      do  %% Line 98
		  apply 'set_curr_func'/2
		      ({'group',Group,'end_per_group'}, Config)
		  let <_cor3> =
		      %% Line 99
		      apply 'set_log_func'/1
			  ('tc_log_async')
		  in  %% Line 99
		      {Config,_cor3}
	  %% Line 100
	  <Group,Config,State> when 'true' ->
	      do  %% Line 101
		  apply 'set_curr_func'/2
		      ({'group',Group,'end_per_group'}, Config)
		  %% Line 102
		  {Config,State}
	end
'post_end_per_group'/4 =
    %% Line 104
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 105
	    apply 'set_curr_func'/2
		({'group','undefined'}, _cor2)
	    %% Line 106
	    {_cor1,_cor0}
'init'/1 =
    %% Line 109
    fun (_cor0) ->
	%% Line 110
	{'ok',{'eh_state','tc_log_async','undefined','undefined','undefined','false','false'}}
'handle_event'/2 =
    %% Line 112
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{_X_Type,GL,_X_Msg},State = {'eh_state',_cor16,_cor17,_cor18,_cor19,_cor20,'false'}>
	      when %% Line 113
		try
		    let <_cor3> =
			call 'erlang':'node'
			    (GL)
		    in  let <_cor2> =
			    call 'erlang':'node'
				()
			in  call 'erlang':'/='
				(_cor3, _cor2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 114
	      {'ok',State}
	  %% Line 115
	  <Event,State = {'eh_state',LogFunc,_cor21,_cor22,_cor23,_cor24,_cor25}> when 'true' ->
	      let <_cor4> =
		  %% Line 116
		  call 'application':'which_applications'
		      ()
	      in  do  %% Line 116
		      case call 'lists':'keyfind'
			       ('sasl', 1, _cor4) of
			%% Line 117
			<'false'> when 'true' ->
			    'ok'
			%% Line 119
			<_X_Else> when 'true' ->
			    %% Line 120
			    case call 'application':'get_env'
				     ('sasl', 'errlog_type') of
			      <{'ok',ErrLogType}> when 'true' ->
				  let <_cor7> =
				      %% Line 121
				      call 'erlang':'group_leader'
					  ()
				  in  let <_cor6> =
					  %% Line 122
					  apply 'tag_event'/1
					      (Event)
				      in  let <SReport> =
					      %% Line 121
					      call 'sasl_report':'format_report'
						  (_cor7, ErrLogType, _cor6)
					  in  %% Line 123
					      case <> of
						<>
						    when call 'erlang':'is_list'
							  (SReport) ->
						    let <SaslHeader> =
							%% Line 124
							apply 'format_header'/1
							    (State)
						    in  %% Line 125
							call 'ct_logs':LogFunc
							    ('sasl', 50, SaslHeader, SReport, [])
						%% Line 126
						<> when 'true' ->
						    'ok'
					      end
			      ( <_cor5> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor5})
				-| ['compiler_generated'] )
			    end
		      end
		      let <_cor11> =
			  %% Line 131
			  apply 'tag_event'/1
			      (Event)
		      in  let <EReport> =
			      %% Line 130
			      call 'error_logger_tty_h':'write_event'
				  (_cor11, %% Line 131
					   'io_lib')
			  in  do  %% Line 132
				  case <> of
				    <>
					when call 'erlang':'is_list'
					      (EReport) ->
					let <ErrHeader> =
					    %% Line 133
					    apply 'format_header'/1
						(State)
					in  %% Line 134
					    call 'ct_logs':LogFunc
						('error_logger', 50, ErrHeader, EReport, [])
				    %% Line 135
				    <> when 'true' ->
					'ok'
				  end
				  %% Line 138
				  {'ok',State}
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'handle_event',2}}] )
	    -| ['compiler_generated'] )
	end
'handle_info'/2 =
    %% Line 140
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'EXIT',User,'killed'},State> when 'true' ->
	      %% Line 141
	      case call 'erlang':'whereis'
		       ('user') of
		%% Line 143
		<'undefined'> when 'true' ->
		    %% Line 144
		    'remove_handler'
		%% Line 145
		<_cor5>
		    when call 'erlang':'=:='
			  (_cor5,
			   User) ->
		    %% Line 146
		    'remove_handler'
		%% Line 147
		<_cor6> when 'true' ->
		    %% Line 148
		    {'ok',State}
	      end
	  %% Line 151
	  <_cor7,State> when 'true' ->
	      %% Line 152
	      {'ok',State}
	end
'handle_call'/2 =
    %% Line 154
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'flush',State> when 'true' ->
	      %% Line 155
	      {'ok','ok',State}
	  %% Line 157
	  <{'set_curr_func',{'group',Group,Conf},Config},%% Line 158
							 State>
	      when %% Line 158
		call 'erlang':'is_list'
		    (Config) ->
	      let <_cor3> =
		  %% Line 159
		  case call 'proplists':'get_value'
			   ('tc_group_properties', Config) of
		    %% Line 160
		    <'undefined'> when 'true' ->
			'false'
		    %% Line 161
		    <Props> when 'true' ->
			call 'lists':'member'
			    ('parallel', Props)
		  end
	      in  %% Line 163
		  case State of
		    <{'eh_state',_cor41,_cor42,_cor43,_cor44,_cor45,_cor46}> when 'true' ->
			let <_cor6> =
			    %% Line 165
			    call 'erlang':'setelement'
				(6, State, _cor3)
			in  let <_cor7> =
				%% Line 164
				call 'erlang':'setelement'
				    (5, _cor6, Conf)
			    in  let <_cor9> =
				    call 'erlang':'setelement'
					(4, _cor7, Group)
				in  {'ok','ok',_cor9}
		    ( <_cor47> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','eh_state'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 166
	  <{'set_curr_func',{'group',Group,Conf},_X_SkipOrFail},State> when 'true' ->
	      %% Line 167
	      case State of
		<{'eh_state',_cor48,_cor49,_cor50,_cor51,_cor52,_cor53}> when 'true' ->
		    let <_cor11> =
			%% Line 169
			call 'erlang':'setelement'
			    (6, State, 'false')
		    in  let <_cor12> =
			    %% Line 168
			    call 'erlang':'setelement'
				(5, _cor11, Conf)
			in  let <_cor14> =
				call 'erlang':'setelement'
				    (4, _cor12, Group)
			    in  {'ok','ok',_cor14}
		( <_cor54> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','eh_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 170
	  <{'set_curr_func',{'group','undefined'},_X_Config},State> when 'true' ->
	      %% Line 171
	      case State of
		<{'eh_state',_cor55,_cor56,_cor57,_cor58,_cor59,_cor60}> when 'true' ->
		    let <_cor16> =
			%% Line 173
			call 'erlang':'setelement'
			    (6, State, 'false')
		    in  let <_cor17> =
			    %% Line 172
			    call 'erlang':'setelement'
				(5, _cor16, 'undefined')
			in  let <_cor19> =
				call 'erlang':'setelement'
				    (4, _cor17, 'undefined')
			    in  {'ok','ok',_cor19}
		( <_cor61> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','eh_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 174
	  <{'set_curr_func',{Suite,Conf},_X_Config},State> when 'true' ->
	      %% Line 175
	      case State of
		<{'eh_state',_cor62,_cor63,_cor64,_cor65,_cor66,_cor67}> when 'true' ->
		    let <_cor21> =
			%% Line 177
			call 'erlang':'setelement'
			    (6, State, 'false')
		    in  let <_cor22> =
			    %% Line 176
			    call 'erlang':'setelement'
				(5, _cor21, Conf)
			in  let <_cor24> =
				call 'erlang':'setelement'
				    (3, _cor22, Suite)
			    in  {'ok','ok',_cor24}
		( <_cor68> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','eh_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 178
	  <{'set_curr_func','undefined',_X_Config},State> when 'true' ->
	      %% Line 179
	      case State of
		<{'eh_state',_cor69,_cor70,_cor71,_cor72,_cor73,_cor74}> when 'true' ->
		    let <_cor26> =
			%% Line 181
			call 'erlang':'setelement'
			    (6, State, 'false')
		    in  let <_cor27> =
			    %% Line 180
			    call 'erlang':'setelement'
				(5, _cor26, 'undefined')
			in  let <_cor29> =
				call 'erlang':'setelement'
				    (3, _cor27, 'undefined')
			    in  {'ok','ok',_cor29}
		( <_cor75> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','eh_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 182
	  <{'set_curr_func',TC,_X_Config},State> when 'true' ->
	      %% Line 183
	      case State of
		<{'eh_state',_cor76,_cor77,_cor78,_cor79,_cor80,_cor81}> when 'true' ->
		    let <_cor32> =
			call 'erlang':'setelement'
			    (5, State, TC)
		    in  {'ok','ok',_cor32}
		( <_cor82> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','eh_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 185
	  <{'set_logfunc',NewLogFunc},State> when 'true' ->
	      %% Line 186
	      case State of
		<{'eh_state',_cor83,_cor84,_cor85,_cor86,_cor87,_cor88}> when 'true' ->
		    let <_cor35> =
			call 'erlang':'setelement'
			    (2, State, NewLogFunc)
		    in  {'ok',NewLogFunc,_cor35}
		( <_cor89> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','eh_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 188
	  <{'handle_remote_events',Bool},State> when 'true' ->
	      %% Line 189
	      case State of
		<{'eh_state',_cor90,_cor91,_cor92,_cor93,_cor94,_cor95}> when 'true' ->
		    let <_cor38> =
			call 'erlang':'setelement'
			    (7, State, Bool)
		    in  {'ok','ok',_cor38}
		( <_cor96> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','eh_state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 191
	  <_X_Query,_X_State> when 'true' ->
	      %% Line 192
	      {'error','bad_query'}
	end
'terminate'/1 =
    %% Line 194
    fun (_cor0) ->
	do  %% Line 195
	    call 'error_logger':'delete_report_handler'
		('cth_log_redirect')
	    %% Line 196
	    []
'terminate'/2 =
    %% Line 198
    fun (_cor1,_cor0) ->
	%% Line 199
	'ok'
'tag_event'/1 =
    %% Line 201
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 202
	    call 'calendar':'local_time'
		()
	in  %% Line 202
	    {_cor1,_cor0}
'set_curr_func'/2 =
    %% Line 204
    fun (_cor1,_cor0) ->
	%% Line 205
	call 'gen_event':'call'
	    ('error_logger', 'cth_log_redirect', {'set_curr_func',_cor1,_cor0})
'set_log_func'/1 =
    %% Line 207
    fun (_cor0) ->
	%% Line 208
	call 'gen_event':'call'
	    ('error_logger', 'cth_log_redirect', {'set_logfunc',_cor0})
'handle_remote_events'/1 =
    %% Line 210
    fun (_cor0) ->
	%% Line 211
	call 'gen_event':'call'
	    ('error_logger', 'cth_log_redirect', {'handle_remote_events',_cor0})
'format_header'/1 =
    %% Line 215
    fun (_cor0) ->
	case _cor0 of
	  <{'eh_state',_cor4,'undefined',%% Line 216
					 'undefined',%% Line 217
						     'undefined',_cor5,_cor6}> when 'true' ->
	      %% Line 218
	      call 'io_lib':'format'
		  ([83|[121|[115|[116|[101|[109|[32|[114|[101|[112|[111|[114|[116]]]]]]]]]]]]], [])
	  %% Line 220
	  <{'eh_state',_cor7,Suite,%% Line 221
				   'undefined',%% Line 222
					       'undefined',_cor8,_cor9}> when 'true' ->
	      %% Line 223
	      call 'io_lib':'format'
		  ([83|[121|[115|[116|[101|[109|[32|[114|[101|[112|[111|[114|[116|[32|[100|[117|[114|[105|[110|[103|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]], [Suite|[]])
	  %% Line 225
	  <{'eh_state',_cor10,Suite,%% Line 226
				    'undefined',%% Line 227
						TcOrConf,_cor11,_cor12}> when 'true' ->
	      %% Line 228
	      call 'io_lib':'format'
		  ([83|[121|[115|[116|[101|[109|[32|[114|[101|[112|[111|[114|[116|[32|[100|[117|[114|[105|[110|[103|[32|[126|[119|[58|[126|[119|[47|[49]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 229
																						     [Suite|[TcOrConf|[]]])
	  %% Line 231
	  <{'eh_state',_cor13,Suite,%% Line 232
				    Group,%% Line 233
					  Conf,_cor14,_cor15}>
	      when let <_cor1> =
		    %% Line 233
		    call 'erlang':'=:='
			(Conf, 'init_per_group')
		in  let <_cor2> =
			%% Line 234
			call 'erlang':'=:='
			    (Conf, 'end_per_group')
		    in  %% Line 233
			call 'erlang':'or'
			    (_cor1, _cor2) ->
	      %% Line 235
	      call 'io_lib':'format'
		  ([83|[121|[115|[116|[101|[109|[32|[114|[101|[112|[111|[114|[116|[32|[100|[117|[114|[105|[110|[103|[32|[126|[119|[58|[126|[119|[47|[50|[32|[102|[111|[114|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 236
																											     [Suite|[Conf|[Group|[]]]])
	  %% Line 238
	  <{'eh_state',_cor16,Suite,%% Line 239
				    Group,_cor17,%% Line 240
						 'true',_cor18}> when 'true' ->
	      %% Line 241
	      call 'io_lib':'format'
		  ([83|[121|[115|[116|[101|[109|[32|[114|[101|[112|[111|[114|[116|[32|[100|[117|[114|[105|[110|[103|[32|[126|[119|[32|[105|[110|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 242
																							    [Group|[Suite|[]]])
	  %% Line 244
	  <{'eh_state',_cor19,Suite,%% Line 245
				    Group,%% Line 246
					  TC,_cor20,_cor21}> when 'true' ->
	      %% Line 247
	      call 'io_lib':'format'
		  ([83|[121|[115|[116|[101|[109|[32|[114|[101|[112|[111|[114|[116|[32|[100|[117|[114|[105|[110|[103|[32|[126|[119|[58|[126|[119|[47|[49|[32|[105|[110|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 248
																										       [Suite|[TC|[Group|[]]]])
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'format_header',1}}] )
	    -| ['compiler_generated'] )
	end
'code_change'/3 =
    %% Line 250
    fun (_cor2,_cor1,_cor0) ->
	%% Line 251
	{'ok',_cor1}
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('cth_log_redirect')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('cth_log_redirect', _cor0)
end