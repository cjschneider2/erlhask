module 'ct_cover' ['add_nodes'/1,
		   'cross_cover_analyse'/2,
		   'get_spec'/1,
		   'module_info'/0,
		   'module_info'/1,
		   'remove_nodes'/1]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','conn'},[{'record_field',26,{'atom',26,'handle'}}|[{'record_field',27,{'atom',27,'targetref'}}|[{'record_field',28,{'atom',28,'address'}}|[{'record_field',29,{'atom',29,'callback'}}]]]],[]}],
		%% Line 31
		'type' =
		    %% Line 31
		    [{{'record','testspec'},[{'record_field',31,{'atom',31,'spec_dir'}}|[{'record_field',32,{'atom',32,'nodes'},{'nil',32}}|[{'record_field',33,{'atom',33,'init'},{'nil',33}}|[{'record_field',34,{'atom',34,'label'},{'nil',34}}|[{'record_field',35,{'atom',35,'profile'},{'nil',35}}|[{'record_field',36,{'atom',36,'logdir'},{'cons',36,{'string',36,[46]},{'nil',36}}}|[{'record_field',37,{'atom',37,'logopts'},{'nil',37}}|[{'record_field',38,{'atom',38,'basic_html'},{'nil',38}}|[{'record_field',39,{'atom',39,'verbosity'},{'nil',39}}|[{'record_field',40,{'atom',40,'silent_connections'},{'nil',40}}|[{'record_field',41,{'atom',41,'cover'},{'nil',41}}|[{'record_field',42,{'atom',42,'cover_stop'},{'nil',42}}|[{'record_field',43,{'atom',43,'config'},{'nil',43}}|[{'record_field',44,{'atom',44,'userconfig'},{'nil',44}}|[{'record_field',45,{'atom',45,'event_handler'},{'nil',45}}|[{'record_field',46,{'atom',46,'ct_hooks'},{'nil',46}}|[{'record_field',47,{'atom',47,'enable_builtin_hooks'},{'atom',47,'true'}}|[{'record_field',48,{'atom',48,'release_shell'},{'atom',48,'false'}}|[{'record_field',49,{'atom',49,'include'},{'nil',49}}|[{'record_field',50,{'atom',50,'auto_compile'},{'nil',50}}|[{'record_field',51,{'atom',51,'abort_if_missing_suites'},{'nil',51}}|[{'record_field',52,{'atom',52,'stylesheet'},{'nil',52}}|[{'record_field',53,{'atom',53,'multiply_timetraps'},{'nil',53}}|[{'record_field',54,{'atom',54,'scale_timetraps'},{'nil',54}}|[{'record_field',55,{'atom',55,'create_priv_dir'},{'nil',55}}|[{'record_field',56,{'atom',56,'alias'},{'nil',56}}|[{'record_field',57,{'atom',57,'tests'},{'nil',57}}|[{'record_field',58,{'atom',58,'merge_tests'},{'atom',58,'true'}}]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 60
		'type' =
		    %% Line 60
		    [{{'record','cover'},[{'record_field',60,{'atom',60,'app'},{'atom',60,'none'}}|[{'record_field',61,{'atom',61,'level'},{'atom',61,'details'}}|[{'record_field',62,{'atom',62,'excl_mods'},{'nil',62}}|[{'record_field',63,{'atom',63,'incl_mods'},{'nil',63}}|[{'record_field',64,{'atom',64,'cross'},{'nil',64}}|[{'record_field',65,{'atom',65,'src'},{'nil',65}}]]]]]],[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{{'record','conn_log'},[{'record_field',83,{'atom',83,'header'},{'atom',83,'true'}}|[{'record_field',84,{'atom',84,'client'}}|[{'record_field',85,{'atom',85,'name'}}|[{'record_field',86,{'atom',86,'address'}}|[{'record_field',87,{'atom',87,'conn_pid'}}|[{'record_field',88,{'atom',88,'action'}}|[{'record_field',89,{'atom',89,'module'}}]]]]]]],[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}]]
'add_nodes'/1 =
    %% Line 43
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 44
	      {'ok',[]}
	  %% Line 45
	  <Nodes> when 'true' ->
	      %% Line 46
	      case call 'erlang':'whereis'
		       ('cover_server') of
		%% Line 47
		<'undefined'> when 'true' ->
		    %% Line 48
		    {'error','cover_not_running'}
		%% Line 49
		<_cor13> when 'true' ->
		    let <Nodes0> =
			%% Line 50
			call 'cover':'which_nodes'
			    ()
		    in  let <_cor8> =
			    %% Line 51
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor5) ->
					  case _cor5 of
					    <[Node|_cor3]> when 'true' ->
						let <_cor4> =
						    %% Line 52
						    call 'lists':'member'
							(Node, Nodes0)
						in  %% Line 52
						    ( case <> of
							<>
							    when call 'erlang':'=:='
								  (_cor4,
								   'false') ->
							    let <_cor6> =
								apply 'lc$^0'/1
								    (_cor3)
							    in  ( [Node|_cor6]
								  -| ['compiler_generated'] )
							( <> when 'true' ->
							      apply 'lc$^0'/1
								  (_cor3)
							  -| ['compiler_generated'] )
						      end
						      -| ['list_comprehension'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor5> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor5})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (Nodes)
			      -| ['list_comprehension'] )
			in  do  %% Line 53
				call 'ct_logs':'log'
				    ([67|[79|[86|[69|[82|[32|[73|[78|[70|[79]]]]]]]]]], %% Line 54
											[65|[100|[100|[105|[110|[103|[32|[110|[111|[100|[101|[115|[32|[116|[111|[32|[99|[111|[118|[101|[114|[32|[116|[101|[115|[116|[58|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 54
																																     [_cor8|[]])
				%% Line 55
				case call 'cover':'start'
					 (_cor8) of
				  %% Line 56
				  <Result = {'ok',StartedNodes}> when 'true' ->
				      do  %% Line 57
					  call 'ct_logs':'log'
					      ([67|[79|[86|[69|[82|[32|[73|[78|[70|[79]]]]]]]]]], %% Line 58
												  [83|[117|[99|[99|[101|[115|[115|[102|[117|[108|[108|[121|[32|[97|[100|[100|[101|[100|[32|[110|[111|[100|[101|[115|[32|[116|[111|[32|[99|[111|[118|[101|[114|[32|[116|[101|[115|[116|[58|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 59
																																										   [StartedNodes|[]])
					  %% Line 60
					  Result
				  %% Line 61
				  <Error> when 'true' ->
				      do  %% Line 62
					  call 'ct_logs':'log'
					      ([67|[79|[86|[69|[82|[32|[73|[78|[70|[79]]]]]]]]]], %% Line 63
												  [70|[97|[105|[108|[101|[100|[32|[116|[111|[32|[97|[100|[100|[32|[110|[111|[100|[101|[115|[32|[116|[111|[32|[99|[111|[118|[101|[114|[32|[116|[101|[115|[116|[58|[32|[126|[116|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 64
																																							   [Error|[]])
					  %% Line 65
					  Error
				end
	      end
	end
'remove_nodes'/1 =
    %% Line 80
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 81
	      'ok'
	  %% Line 82
	  <Nodes> when 'true' ->
	      %% Line 83
	      case call 'erlang':'whereis'
		       ('cover_server') of
		%% Line 84
		<'undefined'> when 'true' ->
		    %% Line 85
		    {'error','cover_not_running'}
		%% Line 86
		<_cor12> when 'true' ->
		    let <Nodes0> =
			%% Line 87
			call 'cover':'which_nodes'
			    ()
		    in  let <_cor7> =
			    %% Line 88
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor4) ->
					  case _cor4 of
					    <[Node|_cor3]> when 'true' ->
						( case call 'lists':'member'
							   (Node, Nodes0) of
						    <'true'> when 'true' ->
							let <_cor5> =
							    apply 'lc$^0'/1
								(_cor3)
							in  ( [Node|_cor5]
							      -| ['compiler_generated'] )
						    ( <'false'> when 'true' ->
							  apply 'lc$^0'/1
							      (_cor3)
						      -| ['compiler_generated'] )
						    ( <_cor6> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor6})
						      -| ['compiler_generated'] )
						  end
						  -| ['list_comprehension'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor4> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor4})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (Nodes)
			      -| ['list_comprehension'] )
			in  do  %% Line 89
				call 'ct_logs':'log'
				    ([67|[79|[86|[69|[82|[32|[73|[78|[70|[79]]]]]]]]]], %% Line 90
											[82|[101|[109|[111|[118|[105|[110|[103|[32|[110|[111|[100|[101|[115|[32|[102|[114|[111|[109|[32|[99|[111|[118|[101|[114|[32|[116|[101|[115|[116|[58|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 90
																																			     [_cor7|[]])
				%% Line 91
				case call 'cover':'stop'
					 (_cor7) of
				  %% Line 92
				  <'ok'> when 'true' ->
				      do  %% Line 93
					  call 'ct_logs':'log'
					      ([67|[79|[86|[69|[82|[32|[73|[78|[70|[79]]]]]]]]]], %% Line 94
												  [83|[117|[99|[99|[101|[115|[115|[102|[117|[108|[108|[121|[32|[114|[101|[109|[111|[118|[101|[100|[32|[110|[111|[100|[101|[115|[32|[102|[114|[111|[109|[32|[99|[111|[118|[101|[114|[32|[116|[101|[115|[116|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 95
																																											   [])
					  %% Line 96
					  'ok'
				  %% Line 97
				  <Error> when 'true' ->
				      do  %% Line 98
					  call 'ct_logs':'log'
					      ([67|[79|[86|[69|[82|[32|[73|[78|[70|[79]]]]]]]]]], %% Line 99
												  [70|[97|[105|[108|[101|[100|[32|[116|[111|[32|[114|[101|[109|[111|[118|[101|[32|[110|[111|[100|[101|[115|[32|[102|[114|[111|[109|[32|[99|[111|[118|[101|[114|[32|[116|[101|[115|[116|[58|[32|[126|[116|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 100
																																											  [Error|[]])
					  %% Line 101
					  Error
				end
	      end
	end
'cross_cover_analyse'/2 =
    %% Line 118
    fun (_cor1,_cor0) ->
	%% Line 119
	call 'test_server_ctrl':'cross_cover_analyse'
	    (_cor1, _cor0)
'get_spec'/1 =
    %% Line 127
    fun (_cor0) ->
	catch
	    %% Line 128
	    apply 'get_spec_test'/1
		(_cor0)
'get_spec_test'/1 =
    %% Line 130
    fun (_cor0) ->
	let <FullName> =
	    %% Line 131
	    call 'filename':'absname'
		(_cor0)
	in  %% Line 132
	    case call 'filelib':'is_file'
		     (FullName) of
	      %% Line 133
	      <'true'> when 'true' ->
		  %% Line 134
		  case call 'file':'consult'
			   (FullName) of
		    %% Line 135
		    <{'ok',Terms}> when 'true' ->
			let <_cor8> =
			    %% Line 137
			    case call 'lists':'keysearch'
				     ('import', 1, Terms) of
			      %% Line 138
			      <{'value',{_cor28,Imps = [S|_cor29]}}>
				  when call 'erlang':'is_list'
					(S) ->
				  let <_cor4> =
				      %% Line 139
				      ( fun (_cor2) ->
					    %% Line 140
					    call 'filename':'absname'
						(_cor2)
					-| [{'id',{0,0,'-get_spec_test/1-fun-0-'}}] )
				  in  let <ImpsFN> =
					  %% Line 139
					  call 'lists':'map'
					      (_cor4, %% Line 141
						      Imps)
				      in  %% Line 142
					  apply 'test_files'/2
					      (ImpsFN, ImpsFN)
			      %% Line 143
			      <{'value',{_cor30,Imp = [IC|_cor31]}}>
				  when call 'erlang':'is_integer'
					(IC) ->
				  let <ImpFN> =
				      %% Line 144
				      call 'filename':'absname'
					  (Imp)
				  in  %% Line 145
				      apply 'test_files'/2
					  ([ImpFN|[]], [ImpFN|[]])
			      %% Line 146
			      <_cor32> when 'true' ->
				  %% Line 147
				  []
			    end
			in  let <_cor11> =
				%% Line 150
				case call 'lists':'keysearch'
					 ('export', 1, Terms) of
				  %% Line 151
				  <{'value',{_cor33,Exp = [EC|_cor34]}}>
				      when call 'erlang':'is_integer'
					    (EC) ->
				      %% Line 152
				      call 'filename':'absname'
					  (Exp)
				  %% Line 153
				  <{'value',{_cor35,[Exp|[]]}}> when 'true' ->
				      %% Line 154
				      call 'filename':'absname'
					  (Exp)
				  %% Line 155
				  <_cor36> when 'true' ->
				      %% Line 156
				      'undefined'
				end
			    in  let <_cor14> =
				    %% Line 159
				    case call 'lists':'keysearch'
					     ('nodes', 1, Terms) of
				      %% Line 160
				      <{'value',{_cor37,Ns}}> when 'true' ->
					  %% Line 161
					  Ns
				      %% Line 162
				      <_cor38> when 'true' ->
					  %% Line 163
					  []
				    end
				in  %% Line 171
				    case apply 'collect_apps'/2
					     (Terms, []) of
				      %% Line 172
				      <Res>
					  when let <_cor16> =
						call 'erlang':'=:='
						    (Res, [])
					    in  let <_cor18> =
						    try
							let <_cor17> =
							    call 'erlang':'length'
								(Res)
							in  call 'erlang':'=='
								(_cor17, 1)
						    of <Try> ->
							Try
						    catch <T,R> ->
							'false'
						in  call 'erlang':'or'
							(_cor16, _cor18) ->
					  let <_cor20> =
					      %% Line 173
					      case Res of
						%% Line 174
						<[]> when 'true' ->
						    [{'cover','none','details',[],[],[],[]}]
						%% Line 175
						<_cor39> when 'true' ->
						    Res
					      end
					  in  %% Line 177
					      case apply 'get_cover_opts'/3
						       (_cor20, Terms, []) of
						%% Line 178
						<E = {'error',_cor40}> when 'true' ->
						    %% Line 179
						    E
						%% Line 180
						<[CoverSpec|[]]> when 'true' ->
						    let <CoverSpec1> =
							%% Line 181
							apply 'remove_excludes_and_dups'/1
							    (CoverSpec)
						    in  %% Line 182
							{FullName,_cor14,_cor8,_cor11,CoverSpec1}
						%% Line 183
						<_cor41> when 'true' ->
						    %% Line 184
						    {'error','multiple_apps_in_cover_spec'}
					      end
				      %% Line 186
				      <Apps>
					  when call 'erlang':'is_list'
						(Apps) ->
					  %% Line 187
					  {'error','multiple_apps_in_cover_spec'}
				      ( <_cor24> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor24})
					-| ['compiler_generated'] )
				    end
		    %% Line 189
		    <Error> when 'true' ->
			%% Line 190
			{'error',{'invalid_cover_spec',Error}}
		  end
	      %% Line 192
	      <'false'> when 'true' ->
		  %% Line 193
		  {'error',{'cant_read_cover_spec_file',FullName}}
	      ( <_cor26> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor26})
		-| ['compiler_generated'] )
	    end
'collect_apps'/2 =
    %% Line 196
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'level',Level}|Ts],Apps> when 'true' ->
	      %% Line 197
	      apply 'collect_apps'/2
		  (Ts, [{'cover','none',Level,[],[],[],[]}|Apps])
	  %% Line 198
	  <[{'incl_app',App,Level}|Ts],Apps> when 'true' ->
	      %% Line 199
	      apply 'collect_apps'/2
		  (Ts, [{'cover',App,Level,[],[],[],[]}|Apps])
	  %% Line 200
	  <[_cor4|Ts],Apps> when 'true' ->
	      %% Line 201
	      apply 'collect_apps'/2
		  (Ts, Apps)
	  %% Line 202
	  <[],Apps> when 'true' ->
	      %% Line 203
	      Apps
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'collect_apps',2}}] )
	    -| ['compiler_generated'] )
	end
'get_cover_opts'/3 =
    %% Line 208
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[App|Apps],Terms,CoverInfo> when 'true' ->
	      %% Line 209
	      case apply 'get_app_info'/2
		       (App, Terms) of
		%% Line 210
		<E = {'error',_cor8}> when 'true' ->
		    E
		%% Line 211
		<AppInfo> when 'true' ->
		    let <AppInfo1> =
			%% Line 212
			apply 'files2mods'/1
			    (AppInfo)
		    in  %% Line 213
			apply 'get_cover_opts'/3
			    (Apps, Terms, [AppInfo1|CoverInfo])
	      end
	  %% Line 215
	  <[],_cor9,CoverInfo> when 'true' ->
	      %% Line 216
	      call 'lists':'reverse'
		  (CoverInfo)
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'get_cover_opts',3}}] )
	    -| ['compiler_generated'] )
	end
'get_app_info'/2 =
    %% Line 220
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <App = {'cover','none',_cor80,_cor81,_cor82,_cor83,_cor84},[{'incl_dirs',Dirs}|Terms]> when 'true' ->
	      %% Line 221
	      apply 'get_app_info'/2
		  (App, [{'incl_dirs','none',Dirs}|Terms])
	  %% Line 222
	  <App = {'cover',Name,_cor85,_cor86,_cor87,_cor88,_cor89},[{'incl_dirs',_cor90,Dirs}|Terms]>
	      when call 'erlang':'=:='
		    (_cor90,
		     Name) ->
	      %% Line 223
	      case apply 'get_files'/4
		       (Dirs, [46|[98|[101|[97|[109]]]]], 'false', []) of
		%% Line 224
		<E = {'error',_cor91}> when 'true' ->
		    E
		%% Line 225
		<Mods1> when 'true' ->
		    let <_rec1> =
			%% Line 227
			call 'erlang':'++'
			    (_cor87, Mods1)
		    in  let <_cor8> =
			    %% Line 227
			    call 'erlang':'setelement'
				(5, App, _rec1)
			in  %% Line 227
			    apply 'get_app_info'/2
				(_cor8, Terms)
	      end
	  %% Line 230
	  <App = {'cover','none',_cor105,_cor106,_cor107,_cor108,_cor109},[{'incl_dirs_r',Dirs}|Terms]> when 'true' ->
	      %% Line 231
	      apply 'get_app_info'/2
		  (App, [{'incl_dirs_r','none',Dirs}|Terms])
	  %% Line 232
	  <App = {'cover',Name,_cor110,_cor111,_cor112,_cor113,_cor114},[{'incl_dirs_r',_cor115,Dirs}|Terms]>
	      when call 'erlang':'=:='
		    (_cor115,
		     Name) ->
	      %% Line 233
	      case apply 'get_files'/4
		       (Dirs, [46|[98|[101|[97|[109]]]]], 'true', []) of
		%% Line 234
		<E = {'error',_cor116}> when 'true' ->
		    E
		%% Line 235
		<Mods1> when 'true' ->
		    let <_rec4> =
			%% Line 237
			call 'erlang':'++'
			    (_cor112, Mods1)
		    in  let <_cor16> =
			    %% Line 237
			    call 'erlang':'setelement'
				(5, App, _rec4)
			in  %% Line 237
			    apply 'get_app_info'/2
				(_cor16, Terms)
	      end
	  %% Line 240
	  <App = {'cover','none',_cor130,_cor131,_cor132,_cor133,_cor134},[{'incl_mods',Mods1}|Terms]> when 'true' ->
	      %% Line 241
	      apply 'get_app_info'/2
		  (App, [{'incl_mods','none',Mods1}|Terms])
	  %% Line 242
	  <App = {'cover',Name,_cor135,_cor136,_cor137,_cor138,_cor139},[{'incl_mods',_cor140,Mods1}|Terms]>
	      when call 'erlang':'=:='
		    (_cor140,
		     Name) ->
	      let <_rec7> =
		  %% Line 244
		  call 'erlang':'++'
		      (_cor137, Mods1)
	      in  let <_cor24> =
		      %% Line 244
		      call 'erlang':'setelement'
			  (5, App, _rec7)
		  in  %% Line 244
		      apply 'get_app_info'/2
			  (_cor24, Terms)
	  %% Line 246
	  <App = {'cover','none',_cor154,_cor155,_cor156,_cor157,_cor158},[{'excl_dirs',Dirs}|Terms]> when 'true' ->
	      %% Line 247
	      apply 'get_app_info'/2
		  (App, [{'excl_dirs','none',Dirs}|Terms])
	  %% Line 248
	  <App = {'cover',Name,_cor159,_cor160,_cor161,_cor162,_cor163},[{'excl_dirs',_cor164,Dirs}|Terms]>
	      when call 'erlang':'=:='
		    (_cor164,
		     Name) ->
	      %% Line 249
	      case apply 'get_files'/4
		       (Dirs, [46|[98|[101|[97|[109]]]]], 'false', []) of
		%% Line 250
		<E = {'error',_cor165}> when 'true' ->
		    E
		%% Line 251
		<Mods1> when 'true' ->
		    let <_rec10> =
			%% Line 253
			call 'erlang':'++'
			    (_cor160, Mods1)
		    in  let <_cor31> =
			    %% Line 253
			    call 'erlang':'setelement'
				(4, App, _rec10)
			in  %% Line 253
			    apply 'get_app_info'/2
				(_cor31, Terms)
	      end
	  %% Line 256
	  <App = {'cover','none',_cor179,_cor180,_cor181,_cor182,_cor183},[{'excl_dirs_r',Dirs}|Terms]> when 'true' ->
	      %% Line 257
	      apply 'get_app_info'/2
		  (App, [{'excl_dirs_r','none',Dirs}|Terms])
	  %% Line 258
	  <App = {'cover',Name,_cor184,_cor185,_cor186,_cor187,_cor188},[{'excl_dirs_r',_cor189,Dirs}|Terms]>
	      when call 'erlang':'=:='
		    (_cor189,
		     Name) ->
	      %% Line 259
	      case apply 'get_files'/4
		       (Dirs, [46|[98|[101|[97|[109]]]]], 'true', []) of
		%% Line 260
		<E = {'error',_cor190}> when 'true' ->
		    E
		%% Line 261
		<Mods1> when 'true' ->
		    let <_rec13> =
			%% Line 263
			call 'erlang':'++'
			    (_cor185, Mods1)
		    in  let <_cor39> =
			    %% Line 263
			    call 'erlang':'setelement'
				(4, App, _rec13)
			in  %% Line 263
			    apply 'get_app_info'/2
				(_cor39, Terms)
	      end
	  %% Line 266
	  <App = {'cover','none',_cor204,_cor205,_cor206,_cor207,_cor208},[{'excl_mods',Mods1}|Terms]> when 'true' ->
	      %% Line 267
	      apply 'get_app_info'/2
		  (App, [{'excl_mods','none',Mods1}|Terms])
	  %% Line 268
	  <App = {'cover',Name,_cor209,_cor210,_cor211,_cor212,_cor213},[{'excl_mods',_cor214,Mods1}|Terms]>
	      when call 'erlang':'=:='
		    (_cor214,
		     Name) ->
	      let <_rec16> =
		  %% Line 270
		  call 'erlang':'++'
		      (_cor210, Mods1)
	      in  let <_cor47> =
		      %% Line 270
		      call 'erlang':'setelement'
			  (4, App, _rec16)
		  in  %% Line 270
		      apply 'get_app_info'/2
			  (_cor47, Terms)
	  %% Line 272
	  <App = {'cover','none',_cor228,_cor229,_cor230,_cor231,_cor232},[{'cross',Cross}|Terms]> when 'true' ->
	      %% Line 273
	      apply 'get_app_info'/2
		  (App, [{'cross','none',Cross}|Terms])
	  %% Line 274
	  <App = {'cover',Name,_cor233,_cor234,_cor235,_cor236,_cor237},[{'cross',_cor238,Cross1}|Terms]>
	      when call 'erlang':'=:='
		    (_cor238,
		     Name) ->
	      let <_rec19> =
		  %% Line 276
		  call 'erlang':'++'
		      (_cor236, Cross1)
	      in  let <_cor54> =
		      %% Line 276
		      call 'erlang':'setelement'
			  (6, App, _rec19)
		  in  %% Line 276
		      apply 'get_app_info'/2
			  (_cor54, Terms)
	  %% Line 278
	  <App = {'cover','none',_cor252,_cor253,_cor254,_cor255,_cor256},[{'src_dirs',Dirs}|Terms]> when 'true' ->
	      %% Line 279
	      apply 'get_app_info'/2
		  (App, [{'src_dirs','none',Dirs}|Terms])
	  %% Line 280
	  <App = {'cover',Name,_cor257,_cor258,_cor259,_cor260,_cor261},[{'src_dirs',_cor262,Dirs}|Terms]>
	      when call 'erlang':'=:='
		    (_cor262,
		     Name) ->
	      %% Line 281
	      case apply 'get_files'/4
		       (Dirs, [46|[101|[114|[108]]]], 'false', []) of
		%% Line 282
		<E = {'error',_cor263}> when 'true' ->
		    E
		%% Line 283
		<Src1> when 'true' ->
		    let <_rec22> =
			%% Line 285
			call 'erlang':'++'
			    (_cor261, Src1)
		    in  let <_cor61> =
			    %% Line 285
			    call 'erlang':'setelement'
				(7, App, _rec22)
			in  %% Line 285
			    apply 'get_app_info'/2
				(_cor61, Terms)
	      end
	  %% Line 288
	  <App = {'cover','none',_cor277,_cor278,_cor279,_cor280,_cor281},[{'src_dirs_r',Dirs}|Terms]> when 'true' ->
	      %% Line 289
	      apply 'get_app_info'/2
		  (App, [{'src_dirs_r','none',Dirs}|Terms])
	  %% Line 290
	  <App = {'cover',Name,_cor282,_cor283,_cor284,_cor285,_cor286},[{'src_dirs_r',_cor287,Dirs}|Terms]>
	      when call 'erlang':'=:='
		    (_cor287,
		     Name) ->
	      %% Line 291
	      case apply 'get_files'/4
		       (Dirs, [46|[101|[114|[108]]]], 'true', []) of
		%% Line 292
		<E = {'error',_cor288}> when 'true' ->
		    E
		%% Line 293
		<Src1> when 'true' ->
		    let <_rec25> =
			%% Line 295
			call 'erlang':'++'
			    (_cor286, Src1)
		    in  let <_cor69> =
			    %% Line 295
			    call 'erlang':'setelement'
				(7, App, _rec25)
			in  %% Line 295
			    apply 'get_app_info'/2
				(_cor69, Terms)
	      end
	  %% Line 298
	  <App = {'cover','none',_cor302,_cor303,_cor304,_cor305,_cor306},[{'src_files',Src1}|Terms]> when 'true' ->
	      %% Line 299
	      apply 'get_app_info'/2
		  (App, [{'src_files','none',Src1}|Terms])
	  %% Line 300
	  <App = {'cover',Name,_cor307,_cor308,_cor309,_cor310,_cor311},[{'src_files',_cor312,Src1}|Terms]>
	      when call 'erlang':'=:='
		    (_cor312,
		     Name) ->
	      let <_rec28> =
		  %% Line 302
		  call 'erlang':'++'
		      (_cor311, Src1)
	      in  let <_cor77> =
		      %% Line 302
		      call 'erlang':'setelement'
			  (7, App, _rec28)
		  in  %% Line 302
		      apply 'get_app_info'/2
			  (_cor77, Terms)
	  %% Line 304
	  <App,[_cor326|Terms]> when 'true' ->
	      %% Line 305
	      apply 'get_app_info'/2
		  (App, Terms)
	  %% Line 307
	  <App,[]> when 'true' ->
	      %% Line 308
	      App
	  ( <_cor79,_cor78> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor79,_cor78})
		  -| [{'function_name',{'get_app_info',2}}] )
	    -| ['compiler_generated'] )
	end
'get_files'/4 =
    %% Line 312
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Dir|Dirs],Ext,Recurse,Files> when 'true' ->
	      %% Line 313
	      case call 'file':'list_dir'
		       (Dir) of
		%% Line 314
		<{'ok',Entries}> when 'true' ->
		    %% Line 315
		    case apply 'analyse_files'/5
			     (Entries, Dir, Ext, [], []) of
		      <{SubDirs,Matches}> when 'true' ->
			  %% Line 316
			  case <> of
			    <>
				when call 'erlang':'=:='
				      (Recurse,
				       'false') ->
				let <_cor5> =
				    %% Line 317
				    call 'erlang':'++'
					(Files, Matches)
				in  %% Line 317
				    apply 'get_files'/4
					(Dirs, Ext, Recurse, _cor5)
			    %% Line 318
			    <> when 'true' ->
				let <_cor6> =
				    %% Line 319
				    call 'erlang':'++'
					(Files, Matches)
				in  let <Files1> =
					%% Line 319
					apply 'get_files'/4
					    (SubDirs, Ext, Recurse, _cor6)
				    in  %% Line 320
					apply 'get_files'/4
					    (Dirs, Ext, Recurse, Files1)
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		%% Line 322
		<{'error',Reason}> when 'true' ->
		    %% Line 323
		    {'error',{Reason,Dir}}
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 325
	  <[],_X_Ext,_X_R,Files> when 'true' ->
	      %% Line 326
	      Files
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'get_files',4}}] )
	    -| ['compiler_generated'] )
	end
'analyse_files'/5 =
    %% Line 330
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[F|Fs],Dir,Ext,Dirs,Matches> when 'true' ->
	      let <Fullname> =
		  %% Line 331
		  call 'filename':'absname'
		      (F, Dir)
	      in  %% Line 332
		  case call 'file':'read_file_info'
			   (Fullname) of
		    <{'ok',Info}> when 'true' ->
			%% Line 333
			( case Info of
			    ( <( {'file_info',_cor18,_rec30,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29}
				 -| ['compiler_generated'] )> when 'true' ->
				  case _rec30 of
				    %% Line 334
				    <'directory'> when 'true' ->
					%% Line 335
					apply 'analyse_files'/5
					    (Fs, Dir, Ext, %% Line 336
							   [Fullname|Dirs], %% Line 336
									    Matches)
				    %% Line 337
				    <_cor31> when 'true' ->
					%% Line 338
					case call 'filename':'extension'
						 (Fullname) of
					  %% Line 339
					  <[46|[98|[101|[97|[109]]]]]>
					      when call 'erlang':'=='
						    (Ext,
						     [46|[98|[101|[97|[109]]]]]) ->
					      let <_cor9> =
						  %% Line 341
						  call 'filename':'rootname'
						      (F)
					      in  let <Mod> =
						      %% Line 341
						      call 'erlang':'list_to_atom'
							  (_cor9)
						  in  %% Line 342
						      apply 'analyse_files'/5
							  (Fs, Dir, Ext, Dirs, %% Line 343
									       [Mod|Matches])
					  %% Line 344
					  <[46|[101|[114|[108]]]]>
					      when call 'erlang':'=='
						    (Ext,
						     [46|[101|[114|[108]]]]) ->
					      %% Line 345
					      apply 'analyse_files'/5
						  (Fs, Dir, Ext, Dirs, %% Line 346
								       [Fullname|Matches])
					  %% Line 347
					  <_cor32> when 'true' ->
					      %% Line 348
					      apply 'analyse_files'/5
						  (Fs, Dir, Ext, Dirs, Matches)
					end
				  end
			      -| ['compiler_generated'] )
			    ( <_cor30> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','file_info'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 351
	  <[],_X_Dir,_X_Ext,Dirs,Matches> when 'true' ->
	      %% Line 352
	      {Dirs,Matches}
	  ( <_cor17,_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'analyse_files',5}}] )
	    -| ['compiler_generated'] )
	end
'test_files'/2 =
    %% Line 355
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[F|Fs],Ret> when 'true' ->
	      %% Line 356
	      case call 'filelib':'is_file'
		       (F) of
		%% Line 357
		<'true'> when 'true' ->
		    %% Line 358
		    apply 'test_files'/2
			(Fs, Ret)
		%% Line 359
		<'false'> when 'true' ->
		    %% Line 360
		    call 'erlang':'throw'
			({'error',{'invalid_cover_file',F}})
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 362
	  <[],Ret> when 'true' ->
	      %% Line 363
	      Ret
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'test_files',2}}] )
	    -| ['compiler_generated'] )
	end
'remove_excludes_and_dups'/1 =
    %% Line 365
    fun (_cor0) ->
	case _cor0 of
	  <CoverData = {'cover',_cor20,_cor21,Excl,Incl,_cor22,_cor23}> when 'true' ->
	      let <_cor7> =
		  %% Line 366
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[Mod|_cor2]> when 'true' ->
				      let <_cor3> =
					  call 'lists':'member'
					      (Mod, Excl)
				      in  ( case <> of
					      <>
						  when call 'erlang':'=:='
							(_cor3,
							 'false') ->
						  let <_cor5> =
						      apply 'lc$^0'/1
							  (_cor2)
						  in  ( [Mod|_cor5]
							-| ['compiler_generated'] )
					      ( <> when 'true' ->
						    apply 'lc$^0'/1
							(_cor2)
						-| ['compiler_generated'] )
					    end
					    -| ['list_comprehension'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Incl)
		    -| ['list_comprehension'] )
	      in  let <_cor14> =
		      %% Line 368
		      ( fun (_cor11,_cor10) ->
			    %% Line 369
			    case call 'lists':'member'
				     (_cor11, _cor10) of
			      %% Line 370
			      <'true'> when 'true' ->
				  _cor10
			      %% Line 371
			      <'false'> when 'true' ->
				  [_cor11|_cor10]
			      ( <_cor9> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor9})
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-remove_excludes_and_dups/1-fun-0-'}}] )
		  in  let <_cor15> =
			  %% Line 368
			  call 'lists':'foldl'
			      (_cor14, %% Line 373
				       [], _cor7)
		      in  let <Incl2> =
			      %% Line 368
			      call 'lists':'sort'
				  (_cor15)
			  in  %% Line 374
			      call 'erlang':'setelement'
				  (5, CoverData, Incl2)
	  ( <_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19})
		  -| [{'function_name',{'remove_excludes_and_dups',1}}] )
	    -| ['compiler_generated'] )
	end
'files2mods'/1 =
    %% Line 377
    fun (_cor0) ->
	case _cor0 of
	  <Info = {'cover',_cor15,_cor16,ExclFs,%% Line 378
						InclFs,%% Line 379
						       Cross,_cor17}> when 'true' ->
	      let <_rec32> =
		  %% Line 380
		  apply 'files2mods1'/1
		      (ExclFs)
	      in  let <_rec33> =
		      %% Line 381
		      apply 'files2mods1'/1
			  (InclFs)
		  in  let <_cor8> =
			  %% Line 382
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor5) ->
					case _cor5 of
					  <[{Tag,Fs}|_cor4]> when 'true' ->
					      let <_cor6> =
						  apply 'files2mods1'/1
						      (Fs)
					      in  let <_cor7> =
						      apply 'lc$^0'/1
							  (_cor4)
						  in  ( [{Tag,_cor6}|_cor7]
							-| ['compiler_generated'] )
					  ( <[_cor3|_cor4]> when 'true' ->
						apply 'lc$^0'/1
						    (_cor4)
					    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor5> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor5})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (Cross)
			    -| ['list_comprehension'] )
		      in  let <_cor11> =
			      %% Line 382
			      call 'erlang':'setelement'
				  (6, Info, _cor8)
			  in  let <_cor12> =
				  %% Line 381
				  call 'erlang':'setelement'
				      (5, _cor11, _rec33)
			      in  %% Line 380
				  call 'erlang':'setelement'
				      (4, _cor12, _rec32)
	  ( <_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14})
		  -| [{'function_name',{'files2mods',1}}] )
	    -| ['compiler_generated'] )
	end
'files2mods1'/1 =
    %% Line 384
    fun (_cor0) ->
	case _cor0 of
	  <[M|Fs]>
	      when call 'erlang':'is_atom'
		    (M) ->
	      let <_cor1> =
		  %% Line 385
		  apply 'files2mods1'/1
		      (Fs)
	      in  %% Line 385
		  [M|_cor1]
	  %% Line 386
	  <[F|Fs]>
	      when call 'erlang':'is_list'
		    (F) ->
	      let <_cor2> =
		  %% Line 387
		  call 'filename':'basename'
		      (F)
	      in  let <M> =
		      %% Line 387
		      call 'filename':'rootname'
			  (_cor2)
		  in  let <_cor4> =
			  %% Line 388
			  call 'erlang':'list_to_atom'
			      (M)
		      in  let <_cor5> =
			      %% Line 388
			      apply 'files2mods1'/1
				  (Fs)
			  in  %% Line 388
			      [_cor4|_cor5]
	  %% Line 389
	  <[]> when 'true' ->
	      %% Line 390
	      []
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'files2mods1',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('ct_cover')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('ct_cover', _cor0)
end