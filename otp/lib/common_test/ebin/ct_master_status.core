module 'ct_master_status' ['code_change'/3,
			   'handle_call'/2,
			   'handle_event'/2,
			   'handle_info'/2,
			   'init'/1,
			   'module_info'/0,
			   'module_info'/1,
			   'terminate'/2]
    attributes [%% Line 28
		'behaviour' =
		    %% Line 28
		    ['gen_event']]
'init'/1 =
    %% Line 48
    fun (_cor0) ->
	%% Line 49
	{'ok',{'state',[]}}
'handle_event'/2 =
    %% Line 71
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'event',Name,Node,Data},State> when 'true' ->
	      do  %% Line 72
		  apply 'print'/2
		      ([126|[110|[61|[61|[61|[32|[126|[119|[32|[61|[61|[61|[126|[110]]]]]]]]]]]]]], ['ct_master_status'])
		  do  %% Line 73
		      apply 'print'/2
			  ([126|[119|[32|[111|[110|[32|[126|[119|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]], [Name|[Node|[Data|[]]]])
		      %% Line 74
		      {'ok',State}
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'handle_event',2}}] )
	    -| ['compiler_generated'] )
	end
'handle_call'/2 =
    %% Line 86
    fun (_cor1,_cor0) ->
	%% Line 88
	{'ok','ok',_cor0}
'handle_info'/2 =
    %% Line 99
    fun (_cor1,_cor0) ->
	%% Line 100
	{'ok',_cor0}
'terminate'/2 =
    %% Line 108
    fun (_cor1,_cor0) ->
	%% Line 109
	'ok'
'code_change'/3 =
    %% Line 115
    fun (_cor2,_cor1,_cor0) ->
	%% Line 116
	{'ok',_cor1}
'print'/2 =
    %% Line 122
    fun (_cor1,_cor0) ->
	%% Line 123
	'ok'
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('ct_master_status')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('ct_master_status', _cor0)
end