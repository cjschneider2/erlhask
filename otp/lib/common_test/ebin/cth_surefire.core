module 'cth_surefire' ['id'/1,
		       'init'/2,
		       'module_info'/0,
		       'module_info'/1,
		       'on_tc_fail'/3,
		       'on_tc_skip'/3,
		       'post_end_per_group'/4,
		       'post_end_per_suite'/4,
		       'post_end_per_testcase'/4,
		       'post_init_per_group'/4,
		       'post_init_per_suite'/4,
		       'pre_end_per_group'/3,
		       'pre_end_per_suite'/3,
		       'pre_init_per_group'/3,
		       'pre_init_per_suite'/3,
		       'pre_init_per_testcase'/3,
		       'terminate'/1]
    attributes []
'id'/1 =
    %% Line 66
    fun (_cor0) ->
	%% Line 67
	case call 'proplists':'get_value'
		 ('path', _cor0) of
	  %% Line 68
	  <'undefined'> when 'true' ->
	      [106|[117|[110|[105|[116|[95|[114|[101|[112|[111|[114|[116|[46|[120|[109|[108]]]]]]]]]]]]]]]]
	  %% Line 69
	  <Path> when 'true' ->
	      call 'filename':'absname'
		  (Path)
	end
'init'/2 =
    %% Line 72
    fun (_cor1,_cor0) ->
	%% Line 73
	case call 'inet':'gethostname'
		 () of
	  <{'ok',Host}> when 'true' ->
	      let <_cor8> =
		  %% Line 77
		  call 'proplists':'get_value'
		      ('axis', _cor0, [])
	      in  let <_cor7> =
		      %% Line 78
		      call 'proplists':'get_value'
			  ('properties', _cor0, [])
		  in  let <_cor6> =
			  %% Line 76
			  call 'proplists':'get_value'
			      ('package', _cor0)
		      in  let <_cor5> =
			      %% Line 75
			      call 'proplists':'get_value'
				  ('hostname', _cor0, Host)
			  in  let <_cor4> =
				  %% Line 80
				  call 'erlang':'now'
				      ()
			      in  let <_cor3> =
				      %% Line 79
				      call 'proplists':'get_value'
					  ('url_base', _cor0)
				  in  %% Line 74
				      {'state',_cor1,_cor8,_cor7,_cor6,_cor5,'undefined','undefined',[],'undefined',_cor4,'undefined',_cor3,[],[]}
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'pre_init_per_suite'/3 =
    %% Line 82
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Suite,SkipOrFail,State>
	      when call 'erlang':'is_tuple'
		    (SkipOrFail) ->
	      let <_rec0> =
		  %% Line 84
		  call 'erlang':'now'
		      ()
	      in  %% Line 83
		  case State of
		    <{'state',_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42}> when 'true' ->
			let <_cor5> =
			    %% Line 84
			    call 'erlang':'setelement'
				(8, State, _rec0)
			in  let <_cor7> =
				call 'erlang':'setelement'
				    (7, _cor5, Suite)
			    in  let <_cor8> =
				    apply 'init_tc'/2
					(_cor7, %% Line 85
						SkipOrFail)
				in  {SkipOrFail,_cor8}
		    ( <_cor43> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','state'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 86
	  <Suite,Config,State = {'state',_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,[],_cor56}> when 'true' ->
	      let <TcLog> =
		  %% Line 87
		  call 'proplists':'get_value'
		      ('tc_logfile', Config)
	      in  let <CurrLogDir> =
		      %% Line 88
		      call 'filename':'dirname'
			  (TcLog)
		  in  let <_cor15> =
			  %% Line 90
			  case _cor44 of
			    %% Line 91
			    <[106|[117|[110|[105|[116|[95|[114|[101|[112|[111|[114|[116|[46|[120|[109|[108]]]]]]]]]]]]]]]]> when 'true' ->
				let <RootDir> =
				    %% Line 92
				    apply 'get_test_root'/1
					(TcLog)
				in  %% Line 93
				    call 'filename':'join'
					(RootDir, [106|[117|[110|[105|[116|[95|[114|[101|[112|[111|[114|[116|[46|[120|[109|[108]]]]]]]]]]]]]]]])
			    %% Line 94
			    <P> when 'true' ->
				%% Line 95
				P
			  end
		      in  let <_rec3> =
			      %% Line 99
			      call 'erlang':'now'
				  ()
			  in  let <_cor19> =
				  %% Line 100
				  call 'erlang':'setelement'
				      (10, State, CurrLogDir)
			      in  let <_cor20> =
				      %% Line 99
				      call 'erlang':'setelement'
					  (8, _cor19, _rec3)
				  in  let <_cor21> =
					  %% Line 98
					  call 'erlang':'setelement'
					      (7, _cor20, Suite)
				      in  let <_cor23> =
					      %% Line 97
					      call 'erlang':'setelement'
						  (2, _cor21, _cor15)
					  in  let <_cor24> =
						  %% Line 97
						  apply 'init_tc'/2
						      (_cor23, %% Line 101
							       Config)
					      in  %% Line 97
						  {Config,_cor24}
	  %% Line 102
	  <Suite,Config,State> when 'true' ->
	      let <_cor25> =
		  %% Line 104
		  apply 'close_suite'/1
		      (State)
	      in  %% Line 104
		  apply 'pre_init_per_suite'/3
		      (Suite, Config, _cor25)
	end
'post_init_per_suite'/4 =
    %% Line 106
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 107
	    apply 'end_tc'/4
		('init_per_suite', _cor2, _cor1, _cor0)
	in  %% Line 107
	    {_cor1,_cor4}
'pre_end_per_suite'/3 =
    %% Line 109
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 110
	    apply 'init_tc'/2
		(_cor0, _cor1)
	in  %% Line 110
	    {_cor1,_cor3}
'post_end_per_suite'/4 =
    %% Line 112
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 113
	    apply 'end_tc'/4
		('end_per_suite', _cor2, _cor1, _cor0)
	in  %% Line 113
	    {_cor1,_cor4}
'pre_init_per_group'/3 =
    %% Line 115
    fun (_cor2,_cor1,_cor0) ->
	%% Line 116
	( case _cor0 of
	    ( <( {'state',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_rec7,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_rec5> =
		      [_cor2|_rec7]
		  in  let <_cor8> =
			  call 'erlang':'setelement'
			      (9, _cor0, _rec5)
		      in  let <_cor9> =
			      apply 'init_tc'/2
				  (_cor8, _cor1)
			  in  {_cor1,_cor9}
	      -| ['compiler_generated'] )
	    ( <_cor26> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'post_init_per_group'/4 =
    %% Line 119
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 120
	    apply 'end_tc'/4
		('init_per_group', _cor2, _cor1, _cor0)
	in  %% Line 120
	    {_cor1,_cor4}
'pre_end_per_group'/3 =
    %% Line 122
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 123
	    apply 'init_tc'/2
		(_cor0, _cor1)
	in  %% Line 123
	    {_cor1,_cor3}
'post_end_per_group'/4 =
    %% Line 125
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <NewState> =
	    %% Line 126
	    apply 'end_tc'/4
		('end_per_group', _cor2, _cor1, _cor0)
	in  %% Line 127
	    ( case NewState of
		( <( {'state',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_rec10,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <_rec8> =
			  call 'erlang':'tl'
			      (_rec10)
		      in  let <_cor10> =
			      call 'erlang':'setelement'
				  (9, NewState, _rec8)
			  in  {_cor1,_cor10}
		  -| ['compiler_generated'] )
		( <_cor28> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'pre_init_per_testcase'/3 =
    %% Line 129
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 130
	    apply 'init_tc'/2
		(_cor0, _cor1)
	in  %% Line 130
	    {_cor1,_cor3}
'post_end_per_testcase'/4 =
    %% Line 132
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 133
	    apply 'end_tc'/4
		(_cor3, _cor2, _cor1, _cor0)
	in  %% Line 133
	    {_cor1,_cor4}
'on_tc_fail'/3 =
    %% Line 135
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_TC,_X_Res,State = {'state',_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,[],_cor33}> when 'true' ->
	      %% Line 136
	      State
	  %% Line 137
	  <_X_TC,Res,State> when 'true' ->
	      %% Line 138
	      ( case State of
		  ( <( {'state',_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_rec11,_cor46}
		       -| ['compiler_generated'] )> when 'true' ->
			let <TC> =
			    %% Line 139
			    call 'erlang':'hd'
				(_rec11)
			in  let <_cor7> =
				%% Line 142
				call 'io_lib':'format'
				    ([126|[112]], [Res|[]])
			    in  let <_cor8> =
				    %% Line 142
				    call 'lists':'flatten'
					(_cor7)
				in  let <_rec12> = {%% Line 142
					 'fail',_cor8}
				    in  %% Line 141
					case TC of
					  <{'testcase',_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55}> when 'true' ->
					      let <_cor12> =
						  call 'erlang':'setelement'
						      (8, TC, _rec12)
					      in  let <_cor14> =
						      %% Line 143
						      call 'erlang':'tl'
							  (_rec11)
						  in  let <_rec14> =
							  %% Line 143
							  [_cor12|_cor14]
						      in  %% Line 143
							  call 'erlang':'setelement'
							      (14, State, _rec14)
					  ( <_cor56> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','testcase'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
		    -| ['compiler_generated'] )
		  ( <_cor47> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'on_tc_skip'/3 =
    %% Line 145
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{ConfigFunc,_X_GrName},Res = {Type,_X_Reason},State0>
	      when let <_cor3> =
		    %% Line 146
		    call 'erlang':'=:='
			(Type, 'tc_auto_skip')
		in  let <_cor4> =
			%% Line 146
			call 'erlang':'=:='
			    (Type, 'tc_user_skip')
		    in  %% Line 146
			call 'erlang':'or'
			    (_cor3, _cor4) ->
	      %% Line 147
	      apply 'on_tc_skip'/3
		  (ConfigFunc, Res, State0)
	  %% Line 148
	  <Tc,Res = {Type,_X_Reason},State0>
	      when call 'erlang':'=:='
		    (Type,
		     'tc_auto_skip') ->
	      let <TcStr> =
		  %% Line 149
		  call 'erlang':'atom_to_list'
		      (Tc)
	      in  %% Line 151
		  ( case State0 of
		      ( <( {'state',_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_rec16,_cor30}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_cor11> =
				case _rec16 of
				  %% Line 152
				  <[{'testcase',_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39}|TCs]>
				      when call 'erlang':'=:='
					    (_cor36,
					     TcStr) ->
				      %% Line 153
				      call 'erlang':'setelement'
					  (14, State0, TCs)
				  %% Line 154
				  <_cor55> when 'true' ->
				      %% Line 155
				      State0
				end
			    in  let <_cor13> =
				    %% Line 157
				    apply 'init_tc'/2
					(_cor11, [])
				in  let <_cor14> =
					%% Line 157
					apply 'end_tc'/4
					    (Tc, [], Res, _cor13)
				    in  %% Line 157
					apply 'do_tc_skip'/2
					    (Res, _cor14)
			-| ['compiler_generated'] )
		      ( <_cor31> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 158
	  <_X_Tc,_X_Res,State = {'state',_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,[],_cor68}> when 'true' ->
	      %% Line 159
	      State
	  %% Line 160
	  <_X_Tc,Res,State> when 'true' ->
	      %% Line 161
	      apply 'do_tc_skip'/2
		  (Res, State)
	end
'do_tc_skip'/2 =
    %% Line 163
    fun (_cor1,_cor0) ->
	%% Line 164
	( case _cor0 of
	    ( <( {'state',_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_rec18,_cor31}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <TC> =
		      %% Line 165
		      call 'erlang':'hd'
			  (_rec18)
		  in  let <_cor6> =
			  %% Line 168
			  call 'io_lib':'format'
			      ([126|[112]], [_cor1|[]])
		      in  let <_cor7> =
			      %% Line 168
			      call 'lists':'flatten'
				  (_cor6)
			  in  let <_rec19> = {%% Line 168
				   'skipped',_cor7}
			      in  %% Line 167
				  case TC of
				    <{'testcase',_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40}> when 'true' ->
					let <_cor11> =
					    call 'erlang':'setelement'
						(8, TC, _rec19)
					in  let <_cor13> =
						%% Line 169
						call 'erlang':'tl'
						    (_rec18)
					    in  let <_rec21> =
						    %% Line 169
						    [_cor11|_cor13]
						in  %% Line 169
						    call 'erlang':'setelement'
							(14, _cor0, _rec21)
				    ( <_cor41> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','testcase'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
	      -| ['compiler_generated'] )
	    ( <_cor32> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'init_tc'/2 =
    %% Line 171
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <State,Config>
	      when let <_cor2> =
		    call 'erlang':'is_list'
			(Config)
		in  call 'erlang':'=:='
			(_cor2, 'false') ->
	      let <_rec23> =
		  %% Line 172
		  call 'erlang':'now'
		      ()
	      in  %% Line 172
		  case State of
		    <{'state',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27}> when 'true' ->
			let <_cor5> =
			    call 'erlang':'setelement'
				(12, State, [])
			in  call 'erlang':'setelement'
				(11, _cor5, _rec23)
		    ( <_cor28> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','state'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 173
	  <State,Config> when 'true' ->
	      let <_rec25> =
		  %% Line 174
		  call 'erlang':'now'
		      ()
	      in  let <_rec26> =
		      %% Line 175
		      call 'proplists':'get_value'
			  ('tc_logfile', Config, [])
		  in  %% Line 174
		      case State of
			<{'state',_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42}> when 'true' ->
			    let <_cor10> =
				%% Line 175
				call 'erlang':'setelement'
				    (12, State, _rec26)
			    in  call 'erlang':'setelement'
				    (11, _cor10, _rec25)
			( <_cor43> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	end
'end_tc'/4 =
    %% Line 177
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Func,Config,Res,State>
	      when call 'erlang':'is_atom'
		    (Func) ->
	      let <_cor4> =
		  %% Line 178
		  call 'erlang':'atom_to_list'
		      (Func)
	      in  %% Line 178
		  apply 'end_tc'/4
		      (_cor4, Config, Res, State)
	  %% Line 179
	  <Name,_X_Config,_X_Res,State = {'state',_cor38,_cor39,_cor40,_cor41,_cor42,Suite,_cor43,%% Line 180
												  Groups,%% Line 181
													 CurrLogDir,%% Line 182
														    TS,%% Line 183
														       Log0,%% Line 184
															    UrlBase,_cor44,_cor45}> when 'true' ->
	      let <_cor11> =
		  %% Line 186
		  case Log0 of
		    %% Line 187
		    <[]> when 'true' ->
			let <_cor5> =
			    %% Line 188
			    call 'erlang':'atom_to_list'
				(Suite)
			in  let <LowerSuiteName> =
				%% Line 188
				call 'string':'to_lower'
				    (_cor5)
			    in  let <_cor7> =
				    %% Line 189
				    call 'erlang':'++'
					(Name, [46|[104|[116|[109|[108]]]]])
				in  let <_cor8> =
					%% Line 189
					[46|_cor7]
				    in  let <_cor9> =
					    %% Line 189
					    call 'erlang':'++'
						(LowerSuiteName, _cor8)
					in  %% Line 189
					    call 'filename':'join'
						(CurrLogDir, _cor9)
		    %% Line 190
		    <_cor46> when 'true' ->
			%% Line 191
			Log0
		  end
	      in  let <Url> =
		      %% Line 193
		      apply 'make_url'/2
			  (UrlBase, _cor11)
		  in  let <ClassName> =
			  %% Line 194
			  call 'erlang':'atom_to_list'
			      (Suite)
		      in  let <_cor21> =
			      %% Line 195
			      ( letrec
				    'lc$^0'/1 =
					fun (_cor18) ->
					    case _cor18 of
					      <[%% Line 196
						Group|_cor16]> when 'true' ->
						  let <_cor19> =
						      call 'erlang':'atom_to_list'
							  (Group)
						  in  let <_cor20> =
							  %% Line 196
							  apply 'lc$^0'/1
							      (_cor16)
						      in  ( [_cor19|_cor20]
							    -| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor18> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor18})
						      -| [{'function_name',{'lc$^0',1}}] )
						-| ['compiler_generated'] )
					    end
				in  let <_cor17> =
					%% Line 196
					call 'lists':'reverse'
					    (Groups)
				    in  apply 'lc$^0'/1
					    (_cor17)
				-| ['list_comprehension'] )
			  in  let <PGroup> =
				  %% Line 195
				  call 'string':'join'
				      (_cor21, %% Line 196
					       [46])
			      in  let <_cor23> =
				      %% Line 197
				      call 'erlang':'now'
					  ()
				  in  let <_cor24> =
					  %% Line 197
					  call 'timer':'now_diff'
					      (_cor23, TS)
				      in  let <_cor25> =
					      %% Line 197
					      call 'erlang':'/'
						  (_cor24, 1000000)
					  in  let <TimeTakes> =
						  %% Line 197
						  call 'io_lib':'format'
						      ([126|[102]], [_cor25|[]])
					      in  let <_cor27> =
						      %% Line 200
						      apply 'now_to_string'/1
							  (TS)
						  in  let <_rec28> =
							  %% Line 198
							  [{'testcase',_cor11,%% Line 199
									      Url,%% Line 202
										  PGroup,%% Line 201
											 ClassName,%% Line 203
												   Name,%% Line 204
													TimeTakes,%% Line 205
														  'passed',_cor27}|_cor44]
						      in  let <_cor32> =
							      %% Line 198
							      call 'erlang':'setelement'
								  (14, State, _rec28)
							  in  %% Line 207
							      call 'erlang':'setelement'
								  (12, _cor32, [])
	  ( <_cor37,_cor36,_cor35,_cor34> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor37,_cor36,_cor35,_cor34})
		  -| [{'function_name',{'end_tc',4}}] )
	    -| ['compiler_generated'] )
	end
'close_suite'/1 =
    %% Line 208
    fun (_cor0) ->
	case _cor0 of
	  <State = {'state',_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,[],_cor43}> when 'true' ->
	      %% Line 209
	      State
	  %% Line 210
	  <State = {'state',_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,UrlBase,TCs,_cor55}> when 'true' ->
	      %% Line 211
	      case apply 'count_tcs'/4
		       (TCs, 0, 0, 0) of
		<{Total,Fail,Skip}> when 'true' ->
		    let <_cor4> =
			%% Line 212
			call 'erlang':'now'
			    ()
		    in  let <_cor5> =
			    %% Line 212
			    call 'timer':'now_diff'
				(_cor4, _cor50)
			in  let <TimeTaken> =
				%% Line 212
				call 'erlang':'/'
				    (_cor5, 1000000)
			    in  let <SuiteLog> =
				    %% Line 213
				    call 'filename':'join'
					(_cor52, [115|[117|[105|[116|[101|[46|[108|[111|[103|[46|[104|[116|[109|[108]]]]]]]]]]]]]])
				in  let <SuiteUrl> =
					%% Line 214
					apply 'make_url'/2
					    (UrlBase, SuiteLog)
				    in  let <_cor20> =
					    %% Line 215
					    call 'erlang':'atom_to_list'
						(_cor49)
					in  let <_cor17> =
						%% Line 218
						call 'io_lib':'format'
						    ([126|[102]], [TimeTaken|[]])
					    in  let <_cor16> =
						    %% Line 219
						    apply 'now_to_string'/1
							(_cor50)
						in  let <_cor11> =
							%% Line 224
							call 'lists':'reverse'
							    (TCs)
						    in  let <Suite> =
							    %% Line 215
							    {'testsuite',%% Line 220
									 0,%% Line 221
									   Fail,%% Line 222
										Skip,_cor48,_cor20,%% Line 223
												   Total,_cor17,_cor16,'undefined',_cor47,'undefined',_cor11,%% Line 225
																			     SuiteLog,%% Line 226
																				      SuiteUrl}
							in  let <_rec37> =
								%% Line 228
								[Suite|_cor55]
							    in  let <_cor28> =
								    %% Line 228
								    call 'erlang':'setelement'
									(15, State, _rec37)
								in  %% Line 227
								    call 'erlang':'setelement'
									(14, _cor28, [])
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor30> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor30})
		  -| [{'function_name',{'close_suite',1}}] )
	    -| ['compiler_generated'] )
	end
'terminate'/1 =
    %% Line 230
    fun (_cor0) ->
	case _cor0 of
	  <State = {'state',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,[],_cor19}> when 'true' ->
	      %% Line 231
	      case call 'file':'open'
		       (_cor7, ['write'|[{'encoding','utf8'}]]) of
		<{'ok',D}> when 'true' ->
		    do  %% Line 232
			call 'io':'format'
			    (D, [60|[63|[120|[109|[108|[32|[118|[101|[114|[115|[105|[111|[110|[61|[34|[49|[46|[48|[34|[32|[101|[110|[99|[111|[100|[105|[110|[103|[61|[32|[34|[85|[84|[70|[45|[56|[34|[32|[63|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
			let <_cor4> =
			    %% Line 233
			    apply 'to_xml'/1
				(State)
			in  do  %% Line 233
				call 'io':'format'
				    (D, _cor4, [])
				do  catch
					%% Line 234
					call 'file':'sync'
					    (D)
				    catch
					%% Line 235
					call 'file':'close'
					    (D)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 236
	  <State> when 'true' ->
	      let <_cor5> =
		  %% Line 238
		  apply 'close_suite'/1
		      (State)
	      in  %% Line 238
		  apply 'terminate'/1
		      (_cor5)
	end
'to_xml'/1 =
    %% Line 242
    fun (_cor0) ->
	case _cor0 of
	  <{'testcase',L,U,Group,CL,N,T,R,TS}> when 'true' ->
	      let <_cor1> =
		  %% Line 244
		  ( case <> of
		      <>
			  when call 'erlang':'=/='
				(Group,
				 []) ->
			  ( [[[103|[114|[111|[117|[112|[61|[34]]]]]]]|[Group|[[34|[32]]]]]|[]]
			    -| ['compiler_generated'] )
		      ( <> when 'true' ->
			    []
			-| ['compiler_generated'] )
		    end
		    -| ['list_comprehension'] )
	      in  let <_cor2> =
		      %% Line 248
		      ( case <> of
			  <>
			      when call 'erlang':'=/='
				    (U,
				     'undefined') ->
			      ( [[[117|[114|[108|[61|[34]]]]]|[U|[[34|[32]]]]]|[]]
				-| ['compiler_generated'] )
			  ( <> when 'true' ->
				[]
			    -| ['compiler_generated'] )
			end
			-| ['list_comprehension'] )
		  in  let <_cor6> =
			  %% Line 250
			  case R of
			    %% Line 251
			    <'passed'> when 'true' ->
				%% Line 252
				[]
			    %% Line 253
			    <{'skipped',Reason}> when 'true' ->
				let <_cor3> =
				    %% Line 255
				    apply 'sanitize'/1
					(Reason)
				in  %% Line 254
				    [[60|[115|[107|[105|[112|[112|[101|[100|[32|[116|[121|[112|[101|[61|[34|[115|[107|[105|[112|[34|[32|[109|[101|[115|[115|[97|[103|[101|[61|[34|[84|[101|[115|[116|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[N|[[32|[105|[110|[32]]]]|[CL|%% Line 255
																																	  [[32|[115|[107|[105|[112|[112|[101|[100|[33|[34|[62]]]]]]]]]]]|[_cor3|[[60|[47|[115|[107|[105|[112|[112|[101|[100|[62]]]]]]]]]]]]]]]]]
			    %% Line 256
			    <{'fail',Reason}> when 'true' ->
				let <_cor4> =
				    %% Line 258
				    apply 'sanitize'/1
					(Reason)
				in  %% Line 257
				    [[60|[102|[97|[105|[108|[117|[114|[101|[32|[109|[101|[115|[115|[97|[103|[101|[61|[34|[84|[101|[115|[116|[32]]]]]]]]]]]]]]]]]]]]]]]|[N|[[32|[105|[110|[32]]]]|[CL|[[32|[102|[97|[105|[108|[101|[100|[33|[34|[32|[116|[121|[112|[101|[61|[34|[99|[114|[97|[115|[104|[34|[62]]]]]]]]]]]]]]]]]]]]]]]|%% Line 258
																																								     [_cor4|[[60|[47|[102|[97|[105|[108|[117|[114|[101|[62]]]]]]]]]]]]]]]]]
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor5})
			      -| ['compiler_generated'] )
			  end
		      in  %% Line 243
			  [[60|[116|[101|[115|[116|[99|[97|[115|[101|[32]]]]]]]]]]|%% Line 244
										   [_cor1|%% Line 245
											  [[110|[97|[109|[101|[61|[34]]]]]]|[N|[[34|[32|[116|[105|[109|[101|[61|[34]]]]]]]]|%% Line 246
																					    [T|[[34|[32|[116|[105|[109|[101|[115|[116|[97|[109|[112|[61|[34]]]]]]]]]]]]]|%% Line 247
																															 [TS|[[34|[32]]|%% Line 248
																																	[_cor2|%% Line 249
																																	       [[108|[111|[103|[61|[34]]]]]|[L|[[34|[62]]|%% Line 250
																																							  [_cor6|%% Line 259
																																								 [[60|[47|[116|[101|[115|[116|[99|[97|[115|[101|[62]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 260
	  <{'testsuite',E,F,%% Line 261
			    S,H,%% Line 261
				N,%% Line 261
				  T,%% Line 261
				    Time,%% Line 261
					 TS,_cor27,P,_cor28,%% Line 262
							    Cases,%% Line 262
								  Log,%% Line 262
								      Url}> when 'true' ->
	      let <_cor7> =
		  %% Line 264
		  ( case <> of
		      <>
			  when call 'erlang':'=/='
				(P,
				 'undefined') ->
			  ( [[[112|[97|[99|[107|[97|[103|[101|[61|[34]]]]]]]]]|[P|[[34|[32]]]]]|[]]
			    -| ['compiler_generated'] )
		      ( <> when 'true' ->
			    []
			-| ['compiler_generated'] )
		    end
		    -| ['list_comprehension'] )
	      in  let <_cor8> =
		      %% Line 269
		      call 'erlang':'integer_to_list'
			  (E)
		  in  let <_cor9> =
			  %% Line 270
			  call 'erlang':'integer_to_list'
			      (F)
		      in  let <_cor10> =
			      %% Line 271
			      call 'erlang':'integer_to_list'
				  (S)
			  in  let <_cor11> =
				  %% Line 272
				  call 'erlang':'integer_to_list'
				      (T)
			      in  let <_cor12> =
				      %% Line 273
				      ( case <> of
					  <>
					      when call 'erlang':'=/='
						    (Url,
						     'undefined') ->
					      ( [[[117|[114|[108|[61|[34]]]]]|[Url|[[34|[32]]]]]|[]]
						-| ['compiler_generated'] )
					  ( <> when 'true' ->
						[]
					    -| ['compiler_generated'] )
					end
					-| ['list_comprehension'] )
				  in  let <_cor18> =
					  %% Line 275
					  ( letrec
						'lc$^0'/1 =
						    fun (_cor15) ->
							case _cor15 of
							  <[Case|_cor14]> when 'true' ->
							      let <_cor16> =
								  apply 'to_xml'/1
								      (Case)
							      in  let <_cor17> =
								      apply 'lc$^0'/1
									  (_cor14)
								  in  ( [_cor16|_cor17]
									-| ['compiler_generated'] )
							  <[]> when 'true' ->
							      []
							  ( <_cor15> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor15})
								  -| [{'function_name',{'lc$^0',1}}] )
							    -| ['compiler_generated'] )
							end
					    in  apply 'lc$^0'/1
						    (Cases)
					    -| ['list_comprehension'] )
				      in  %% Line 263
					  [[60|[116|[101|[115|[116|[115|[117|[105|[116|[101|[32]]]]]]]]]]]|%% Line 264
													   [_cor7|%% Line 265
														  [[104|[111|[115|[116|[110|[97|[109|[101|[61|[34]]]]]]]]]]|[H|[[34|[32|[110|[97|[109|[101|[61|[34]]]]]]]]|%% Line 266
																											   [N|[[34|[32|[116|[105|[109|[101|[61|[34]]]]]]]]|%% Line 267
																																	   [Time|[[34|[32|[116|[105|[109|[101|[115|[116|[97|[109|[112|[61|[34]]]]]]]]]]]]]|%% Line 268
																																											   [TS|[[34|[32|[101|[114|[114|[111|[114|[115|[61|[34]]]]]]]]]]|%% Line 269
																																																			[_cor8|[[34|[32|[102|[97|[105|[108|[117|[114|[101|[115|[61|[34]]]]]]]]]]]]|%% Line 270
																																																												   [_cor9|[[34|[32|[115|[107|[105|[112|[112|[101|[100|[61|[34]]]]]]]]]]]|%% Line 271
																																																																					 [_cor10|[[34|[32|[116|[101|[115|[116|[115|[61|[34]]]]]]]]]|%% Line 272
																																																																												    [_cor11|[[34|[32]]|%% Line 273
																																																																														       [_cor12|%% Line 274
																																																																															       [[108|[111|[103|[61|[34]]]]]|[Log|[[34|[62]]|%% Line 275
																																																																																					    [_cor18|%% Line 276
																																																																																						    [[60|[47|[116|[101|[115|[116|[115|[117|[105|[116|[101|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 277
	  <{'state',_cor29,Axis,Props,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,TestSuites}> when 'true' ->
	      let <_cor19> =
		  %% Line 278
		  apply 'properties_to_xml'/2
		      (Axis, Props)
	      in  let <_cor25> =
		      %% Line 279
		      ( letrec
			    'lc$^1'/1 =
				fun (_cor22) ->
				    case _cor22 of
				      <[TestSuite|_cor21]> when 'true' ->
					  let <_cor23> =
					      apply 'to_xml'/1
						  (TestSuite)
					  in  let <_cor24> =
						  apply 'lc$^1'/1
						      (_cor21)
					      in  ( [_cor23|_cor24]
						    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor22> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor22})
					      -| [{'function_name',{'lc$^1',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^1'/1
				(TestSuites)
			-| ['list_comprehension'] )
		  in  %% Line 278
		      [[60|[116|[101|[115|[116|[115|[117|[105|[116|[101|[115|[62]]]]]]]]]]]]|[_cor19|%% Line 279
												     [_cor25|[[60|[47|[116|[101|[115|[116|[115|[117|[105|[116|[101|[115|[62]]]]]]]]]]]]]]]]]
	  ( <_cor26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26})
		  -| [{'function_name',{'to_xml',1}}] )
	    -| ['compiler_generated'] )
	end
'properties_to_xml'/2 =
    %% Line 281
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],[]> when 'true' ->
	      %% Line 282
	      []
	  %% Line 283
	  <Axis,Props> when 'true' ->
	      let <_cor6> =
		  %% Line 285
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[{Name,Value}|_cor3]> when 'true' ->
				      let <_cor5> =
					  apply 'lc$^0'/1
					      (_cor3)
				      in  ( [[[60|[112|[114|[111|[112|[101|[114|[116|[121|[32|[110|[97|[109|[101|[61|[34]]]]]]]]]]]]]]]]|[Name|[[34|[32|[97|[120|[105|[115|[61|[34|[121|[101|[115|[34|[32|[118|[97|[108|[117|[101|[61|[34]]]]]]]]]]]]]]]]]]]]|[Value|[[34|[32|[47|[62]]]]]]]]]|_cor5]
					    -| ['compiler_generated'] )
				  ( <[_cor2|_cor3]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor3)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Axis)
		    -| ['list_comprehension'] )
	      in  let <_cor11> =
		      %% Line 286
		      ( letrec
			    'lc$^1'/1 =
				fun (_cor9) ->
				    case _cor9 of
				      <[{Name,Value}|_cor8]> when 'true' ->
					  let <_cor10> =
					      apply 'lc$^1'/1
						  (_cor8)
					  in  ( [[[60|[112|[114|[111|[112|[101|[114|[116|[121|[32|[110|[97|[109|[101|[61|[34]]]]]]]]]]]]]]]]|[Name|[[34|[32|[118|[97|[108|[117|[101|[61|[34]]]]]]]]]|[Value|[[34|[32|[47|[62]]]]]]]]]|_cor10]
						-| ['compiler_generated'] )
				      ( <[_cor7|_cor8]> when 'true' ->
					    apply 'lc$^1'/1
						(_cor8)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor9> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor9})
					      -| [{'function_name',{'lc$^1',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^1'/1
				(Props)
			-| ['list_comprehension'] )
		  in  %% Line 284
		      [[60|[112|[114|[111|[112|[101|[114|[116|[105|[101|[115|[62]]]]]]]]]]]]|%% Line 285
											     [_cor6|%% Line 286
												    [_cor11|%% Line 287
													    [[60|[47|[112|[114|[111|[112|[101|[114|[116|[105|[101|[115|[62]]]]]]]]]]]]]]]]]
	end
'sanitize'/1 =
    %% Line 290
    fun (_cor0) ->
	case _cor0 of
	  <[62|T]> when 'true' ->
	      let <_cor1> =
		  %% Line 291
		  apply 'sanitize'/1
		      (T)
	      in  %% Line 291
		  [38|[103|[116|[59|_cor1]]]]
	  %% Line 292
	  <[60|T]> when 'true' ->
	      let <_cor2> =
		  %% Line 293
		  apply 'sanitize'/1
		      (T)
	      in  %% Line 293
		  [38|[108|[116|[59|_cor2]]]]
	  %% Line 294
	  <[34|T]> when 'true' ->
	      let <_cor3> =
		  %% Line 295
		  apply 'sanitize'/1
		      (T)
	      in  %% Line 295
		  call 'erlang':'++'
		      ([38|[113|[117|[111|[116|[59]]]]]], _cor3)
	  %% Line 296
	  <[39|T]> when 'true' ->
	      let <_cor4> =
		  %% Line 297
		  apply 'sanitize'/1
		      (T)
	      in  %% Line 297
		  call 'erlang':'++'
		      ([38|[97|[112|[111|[115|[59]]]]]], _cor4)
	  %% Line 298
	  <[38|T]> when 'true' ->
	      let <_cor5> =
		  %% Line 299
		  apply 'sanitize'/1
		      (T)
	      in  %% Line 299
		  call 'erlang':'++'
		      ([38|[97|[109|[112|[59]]]]], _cor5)
	  %% Line 300
	  <[H|T]> when 'true' ->
	      let <_cor6> =
		  %% Line 301
		  apply 'sanitize'/1
		      (T)
	      in  %% Line 301
		  [H|_cor6]
	  %% Line 302
	  <[]> when 'true' ->
	      %% Line 303
	      []
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'sanitize',1}}] )
	    -| ['compiler_generated'] )
	end
'now_to_string'/1 =
    %% Line 305
    fun (_cor0) ->
	%% Line 306
	case call 'calendar':'now_to_local_time'
		 (_cor0) of
	  <{{YY,MM,DD},{HH,Mi,SS}}> when 'true' ->
	      %% Line 307
	      call 'io_lib':'format'
		  ([126|[119|[45|[126|[50|[46|[46|[48|[66|[45|[126|[50|[46|[46|[48|[66|[84|[126|[50|[46|[46|[48|[66|[58|[126|[50|[46|[46|[48|[66|[58|[126|[50|[46|[46|[48|[66]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [YY|[MM|[DD|[HH|[Mi|[SS|[]]]]]]])
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'make_url'/2 =
    %% Line 309
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'undefined',_cor6> when 'true' ->
	      %% Line 310
	      'undefined'
	  %% Line 311
	  <_cor7,[]> when 'true' ->
	      %% Line 312
	      'undefined'
	  %% Line 313
	  <UrlBase0,Log> when 'true' ->
	      let <UrlBase> =
		  %% Line 314
		  call 'string':'strip'
		      (UrlBase0, 'right', 47)
	      in  let <RelativeLog> =
		      %% Line 315
		      apply 'get_relative_log_url'/1
			  (Log)
		  in  %% Line 316
		      call 'string':'join'
			  ([UrlBase|[RelativeLog|[]]], [47])
	end
'get_test_root'/1 =
    %% Line 318
    fun (_cor0) ->
	let <LogParts> =
	    %% Line 319
	    call 'filename':'split'
		(_cor0)
	in  let <_cor2> =
		%% Line 320
		call 'erlang':'length'
		    (LogParts)
	    in  let <_cor3> =
		    %% Line 320
		    call 'erlang':'-'
			(_cor2, 3)
		in  let <_cor4> =
			%% Line 320
			call 'lists':'sublist'
			    (LogParts, 1, _cor3)
		    in  %% Line 320
			call 'filename':'join'
			    (_cor4)
'get_relative_log_url'/1 =
    %% Line 322
    fun (_cor0) ->
	let <LogParts> =
	    %% Line 323
	    call 'filename':'split'
		(_cor0)
	in  let <_cor2> =
		%% Line 324
		call 'erlang':'length'
		    (LogParts)
	    in  let <Start> =
		    %% Line 324
		    call 'erlang':'-'
			(_cor2, 3)
		in  let <_cor5> =
			%% Line 326
			call 'lists':'sublist'
			    (LogParts, Start, 4)
		    in  %% Line 326
			call 'string':'join'
			    (_cor5, [47])
'count_tcs'/4 =
    %% Line 328
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'testcase',_cor20,_cor21,_cor22,_cor23,ConfCase,_cor24,_cor25,_cor26}|TCs],Ok,F,S>
	      when let <_cor4> =
		    %% Line 329
		    call 'erlang':'=='
			(ConfCase, [105|[110|[105|[116|[95|[112|[101|[114|[95|[115|[117|[105|[116|[101]]]]]]]]]]]]]])
		in  let <_cor5> =
			%% Line 330
			call 'erlang':'=='
			    (ConfCase, [101|[110|[100|[95|[112|[101|[114|[95|[115|[117|[105|[116|[101]]]]]]]]]]]]])
		    in  let <_cor6> =
			    %% Line 331
			    call 'erlang':'=='
				(ConfCase, [105|[110|[105|[116|[95|[112|[101|[114|[95|[103|[114|[111|[117|[112]]]]]]]]]]]]]])
			in  let <_cor7> =
				%% Line 332
				call 'erlang':'=='
				    (ConfCase, [101|[110|[100|[95|[112|[101|[114|[95|[103|[114|[111|[117|[112]]]]]]]]]]]]])
			    in  let <_cor8> =
				    %% Line 331
				    call 'erlang':'or'
					(_cor6, _cor7)
				in  let <_cor9> =
					%% Line 330
					call 'erlang':'or'
					    (_cor5, _cor8)
				    in  %% Line 329
					call 'erlang':'or'
					    (_cor4, _cor9) ->
	      %% Line 333
	      apply 'count_tcs'/4
		  (TCs, Ok, F, S)
	  %% Line 334
	  <[{'testcase',_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,'passed',_cor33}|TCs],Ok,F,S> when 'true' ->
	      let <_cor10> =
		  %% Line 335
		  call 'erlang':'+'
		      (Ok, 1)
	      in  %% Line 335
		  apply 'count_tcs'/4
		      (TCs, _cor10, F, S)
	  %% Line 336
	  <[{'testcase',_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,{'fail',_cor40},_cor41}|TCs],Ok,F,S> when 'true' ->
	      let <_cor11> =
		  %% Line 337
		  call 'erlang':'+'
		      (F, 1)
	      in  %% Line 337
		  apply 'count_tcs'/4
		      (TCs, Ok, _cor11, S)
	  %% Line 338
	  <[{'testcase',_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,{'skipped',_cor48},_cor49}|TCs],Ok,F,S> when 'true' ->
	      let <_cor12> =
		  %% Line 339
		  call 'erlang':'+'
		      (S, 1)
	      in  %% Line 339
		  apply 'count_tcs'/4
		      (TCs, Ok, F, _cor12)
	  %% Line 340
	  <[{'testcase',_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,{'auto_skipped',_cor56},_cor57}|TCs],Ok,F,S> when 'true' ->
	      let <_cor13> =
		  %% Line 341
		  call 'erlang':'+'
		      (S, 1)
	      in  %% Line 341
		  apply 'count_tcs'/4
		      (TCs, Ok, F, _cor13)
	  %% Line 342
	  <[],Ok,F,S> when 'true' ->
	      let <_cor14> =
		  %% Line 343
		  call 'erlang':'+'
		      (Ok, F)
	      in  let <_cor15> =
		      %% Line 343
		      call 'erlang':'+'
			  (_cor14, S)
		  in  %% Line 343
		      {_cor15,F,S}
	  ( <_cor19,_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17,_cor16})
		  -| [{'function_name',{'count_tcs',4}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('cth_surefire')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('cth_surefire', _cor0)
end