module 'ct' ['abort_current_testcase'/1,
	     'add_config'/2,
	     'break'/1,
	     'break'/2,
	     'capture_get'/0,
	     'capture_get'/1,
	     'capture_start'/0,
	     'capture_stop'/0,
	     'comment'/1,
	     'comment'/2,
	     'continue'/0,
	     'continue'/1,
	     'decrypt_config_file'/2,
	     'decrypt_config_file'/3,
	     'encrypt_config_file'/2,
	     'encrypt_config_file'/3,
	     'fail'/1,
	     'fail'/2,
	     'get_config'/1,
	     'get_config'/2,
	     'get_config'/3,
	     'get_status'/0,
	     'get_target_name'/1,
	     'get_timetrap_info'/0,
	     'install'/1,
	     'listenv'/1,
	     'log'/1,
	     'log'/2,
	     'log'/3,
	     'log'/4,
	     'make_priv_dir'/0,
	     'module_info'/0,
	     'module_info'/1,
	     'notify'/2,
	     'pal'/1,
	     'pal'/2,
	     'pal'/3,
	     'pal'/4,
	     'parse_table'/1,
	     'print'/1,
	     'print'/2,
	     'print'/3,
	     'print'/4,
	     'reload_config'/1,
	     'remove_config'/2,
	     'require'/1,
	     'require'/2,
	     'run'/1,
	     'run'/2,
	     'run'/3,
	     'run_test'/1,
	     'run_testspec'/1,
	     'sleep'/1,
	     'start_interactive'/0,
	     'step'/3,
	     'step'/4,
	     'stop_interactive'/0,
	     'sync_notify'/2,
	     'testcases'/2,
	     'timetrap'/1,
	     'userdata'/2,
	     'userdata'/3]
    attributes []
'install'/1 =
    %% Line 106
    fun (_cor0) ->
	%% Line 107
	call 'ct_run':'install'
	    (_cor0)
'run'/3 =
    %% Line 123
    fun (_cor2,_cor1,_cor0) ->
	%% Line 124
	call 'ct_run':'run'
	    (_cor2, _cor1, _cor0)
'run'/2 =
    %% Line 131
    fun (_cor1,_cor0) ->
	%% Line 132
	call 'ct_run':'run'
	    (_cor1, _cor0)
'run'/1 =
    %% Line 140
    fun (_cor0) ->
	%% Line 141
	call 'ct_run':'run'
	    (_cor0)
'run_test'/1 =
    %% Line 218
    fun (_cor0) ->
	%% Line 219
	call 'ct_run':'run_test'
	    (_cor0)
'run_testspec'/1 =
    %% Line 233
    fun (_cor0) ->
	%% Line 234
	call 'ct_run':'run_testspec'
	    (_cor0)
'step'/3 =
    %% Line 242
    fun (_cor2,_cor1,_cor0) ->
	%% Line 243
	call 'ct_run':'step'
	    (_cor2, _cor1, _cor0)
'step'/4 =
    %% Line 255
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 256
	call 'ct_run':'step'
	    (_cor3, _cor2, _cor1, _cor0)
'start_interactive'/0 =
    %% Line 279
    fun () ->
	do  %% Line 280
	    call 'ct_util':'start'
		('interactive')
	    %% Line 281
	    'ok'
'stop_interactive'/0 =
    %% Line 288
    fun () ->
	do  %% Line 289
	    call 'ct_util':'stop'
		('normal')
	    %% Line 290
	    'ok'
'require'/1 =
    %% Line 331
    fun (_cor0) ->
	%% Line 332
	call 'ct_config':'require'
	    (_cor0)
'require'/2 =
    %% Line 372
    fun (_cor1,_cor0) ->
	%% Line 373
	call 'ct_config':'require'
	    (_cor1, _cor0)
'get_config'/1 =
    %% Line 378
    fun (_cor0) ->
	%% Line 379
	call 'ct_config':'get_config'
	    (_cor0, 'undefined', [])
'get_config'/2 =
    %% Line 384
    fun (_cor1,_cor0) ->
	%% Line 385
	call 'ct_config':'get_config'
	    (_cor1, _cor0, [])
'get_config'/3 =
    %% Line 441
    fun (_cor2,_cor1,_cor0) ->
	%% Line 442
	call 'ct_config':'get_config'
	    (_cor2, _cor1, _cor0)
'reload_config'/1 =
    %% Line 460
    fun (_cor0) ->
	%% Line 461
	call 'ct_config':'reload_config'
	    (_cor0)
'log'/1 =
    %% Line 466
    fun (_cor0) ->
	%% Line 467
	apply 'log'/4
	    ('default', 50, _cor0, [])
'log'/2 =
    %% Line 474
    fun (_cor1,_cor0) ->
	let <Category,Importance,Format,Args> =
	    %% Line 476
	    case <> of
	      <>
		  when call 'erlang':'is_atom'
			(_cor1) ->
		  <_cor1,50,_cor0,[]>
	      %% Line 477
	      <>
		  when call 'erlang':'is_integer'
			(_cor1) ->
		  <'default',_cor1,_cor0,[]>
	      %% Line 478
	      <>
		  when call 'erlang':'is_list'
			(_cor1) ->
		  <'default',50,_cor1,_cor0>
	      ( <> when 'true' ->
		    primop 'match_fail'
			('if_clause')
		-| ['compiler_generated'] )
	    end
	in  %% Line 480
	    apply 'log'/4
		(Category, Importance, Format, Args)
'log'/3 =
    %% Line 488
    fun (_cor2,_cor1,_cor0) ->
	let <Category,Importance,Format,Args> =
	    %% Line 490
	    case <> of
	      <>
		  when let <_cor3> =
			call 'erlang':'is_atom'
			    (_cor2)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(_cor1)
			in  call 'erlang':'and'
				(_cor3, _cor4) ->
		  <_cor2,_cor1,_cor0,[]>
	      %% Line 491
	      <>
		  when let <_cor5> =
			call 'erlang':'is_atom'
			    (_cor2)
		    in  let <_cor6> =
			    call 'erlang':'is_list'
				(_cor1)
			in  call 'erlang':'and'
				(_cor5, _cor6) ->
		  <_cor2,50,_cor1,_cor0>
	      %% Line 492
	      <>
		  when call 'erlang':'is_integer'
			(_cor2) ->
		  <'default',_cor2,_cor1,_cor0>
	      ( <> when 'true' ->
		    primop 'match_fail'
			('if_clause')
		-| ['compiler_generated'] )
	    end
	in  %% Line 494
	    apply 'log'/4
		(Category, Importance, Format, Args)
'log'/4 =
    %% Line 513
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 514
	call 'ct_logs':'tc_log'
	    (_cor3, _cor2, _cor1, _cor0)
'print'/1 =
    %% Line 520
    fun (_cor0) ->
	%% Line 521
	apply 'print'/4
	    ('default', 50, _cor0, [])
'print'/2 =
    %% Line 528
    fun (_cor1,_cor0) ->
	let <Category,Importance,Format,Args> =
	    %% Line 530
	    case <> of
	      <>
		  when call 'erlang':'is_atom'
			(_cor1) ->
		  <_cor1,50,_cor0,[]>
	      %% Line 531
	      <>
		  when call 'erlang':'is_integer'
			(_cor1) ->
		  <'default',_cor1,_cor0,[]>
	      %% Line 532
	      <>
		  when call 'erlang':'is_list'
			(_cor1) ->
		  <'default',50,_cor1,_cor0>
	      ( <> when 'true' ->
		    primop 'match_fail'
			('if_clause')
		-| ['compiler_generated'] )
	    end
	in  %% Line 534
	    apply 'print'/4
		(Category, Importance, Format, Args)
'print'/3 =
    %% Line 542
    fun (_cor2,_cor1,_cor0) ->
	let <Category,Importance,Format,Args> =
	    %% Line 544
	    case <> of
	      <>
		  when let <_cor3> =
			call 'erlang':'is_atom'
			    (_cor2)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(_cor1)
			in  call 'erlang':'and'
				(_cor3, _cor4) ->
		  <_cor2,_cor1,_cor0,[]>
	      %% Line 545
	      <>
		  when let <_cor5> =
			call 'erlang':'is_atom'
			    (_cor2)
		    in  let <_cor6> =
			    call 'erlang':'is_list'
				(_cor1)
			in  call 'erlang':'and'
				(_cor5, _cor6) ->
		  <_cor2,50,_cor1,_cor0>
	      %% Line 546
	      <>
		  when call 'erlang':'is_integer'
			(_cor2) ->
		  <'default',_cor2,_cor1,_cor0>
	      ( <> when 'true' ->
		    primop 'match_fail'
			('if_clause')
		-| ['compiler_generated'] )
	    end
	in  %% Line 548
	    apply 'print'/4
		(Category, Importance, Format, Args)
'print'/4 =
    %% Line 567
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 568
	call 'ct_logs':'tc_print'
	    (_cor3, _cor2, _cor1, _cor0)
'pal'/1 =
    %% Line 574
    fun (_cor0) ->
	%% Line 575
	apply 'pal'/4
	    ('default', 50, _cor0, [])
'pal'/2 =
    %% Line 582
    fun (_cor1,_cor0) ->
	let <Category,Importance,Format,Args> =
	    %% Line 584
	    case <> of
	      <>
		  when call 'erlang':'is_atom'
			(_cor1) ->
		  <_cor1,50,_cor0,[]>
	      %% Line 585
	      <>
		  when call 'erlang':'is_integer'
			(_cor1) ->
		  <'default',_cor1,_cor0,[]>
	      %% Line 586
	      <>
		  when call 'erlang':'is_list'
			(_cor1) ->
		  <'default',50,_cor1,_cor0>
	      ( <> when 'true' ->
		    primop 'match_fail'
			('if_clause')
		-| ['compiler_generated'] )
	    end
	in  %% Line 588
	    apply 'pal'/4
		(Category, Importance, Format, Args)
'pal'/3 =
    %% Line 596
    fun (_cor2,_cor1,_cor0) ->
	let <Category,Importance,Format,Args> =
	    %% Line 598
	    case <> of
	      <>
		  when let <_cor3> =
			call 'erlang':'is_atom'
			    (_cor2)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(_cor1)
			in  call 'erlang':'and'
				(_cor3, _cor4) ->
		  <_cor2,_cor1,_cor0,[]>
	      %% Line 599
	      <>
		  when let <_cor5> =
			call 'erlang':'is_atom'
			    (_cor2)
		    in  let <_cor6> =
			    call 'erlang':'is_list'
				(_cor1)
			in  call 'erlang':'and'
				(_cor5, _cor6) ->
		  <_cor2,50,_cor1,_cor0>
	      %% Line 600
	      <>
		  when call 'erlang':'is_integer'
			(_cor2) ->
		  <'default',_cor2,_cor1,_cor0>
	      ( <> when 'true' ->
		    primop 'match_fail'
			('if_clause')
		-| ['compiler_generated'] )
	    end
	in  %% Line 602
	    apply 'pal'/4
		(Category, Importance, Format, Args)
'pal'/4 =
    %% Line 621
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 622
	call 'ct_logs':'tc_pal'
	    (_cor3, _cor2, _cor1, _cor0)
'capture_start'/0 =
    %% Line 632
    fun () ->
	%% Line 633
	call 'test_server':'capture_start'
	    ()
'capture_stop'/0 =
    %% Line 643
    fun () ->
	%% Line 644
	call 'test_server':'capture_stop'
	    ()
'capture_get'/0 =
    %% Line 651
    fun () ->
	%% Line 653
	apply 'capture_get'/1
	    (['default'])
'capture_get'/1 =
    %% Line 669
    fun (_cor0) ->
	case _cor0 of
	  <[ExclCat|ExclCategories]> when 'true' ->
	      let <Strs> =
		  %% Line 670
		  call 'test_server':'capture_get'
		      ()
	      in  let <_cor2> =
		      %% Line 671
		      call 'erlang':'atom_to_list'
			  (ExclCat)
		  in  let <_cor8> =
			  %% Line 672
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor5) ->
					case _cor5 of
					  <[EC|_cor4]> when 'true' ->
					      let <_cor6> =
						  call 'erlang':'atom_to_list'
						      (EC)
					      in  let <_cor7> =
						      apply 'lc$^0'/1
							  (_cor4)
						  in  ( [[124|_cor6]|_cor7]
							-| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor5> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor5})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (ExclCategories)
			    -| ['list_comprehension'] )
		      in  let <CatsStr> =
			      %% Line 671
			      [_cor2|_cor8]
			  in  let <_cor10> =
				  %% Line 673
				  call 'lists':'flatten'
				      (CatsStr)
			      in  let <_cor11> =
				      %% Line 673
				      call 'erlang':'++'
					  (_cor10, [41|[34|[62|[46|[42]]]]])
				  in  let <_cor12> =
					  %% Line 673
					  call 'erlang':'++'
					      ([60|[100|[105|[118|[32|[99|[108|[97|[115|[115|[61|[34|[40]]]]]]]]]]]]], _cor11)
				      in  %% Line 673
					  case call 're':'compile'
						   (_cor12) of
					    <{'ok',MP}> when 'true' ->
						let <_cor17> =
						    %% Line 674
						    ( fun (_cor15) ->
							  %% Line 675
							  case call 're':'run'
								   (_cor15, MP) of
							    %% Line 676
							    <{'match',_cor19}> when 'true' ->
								[]
							    %% Line 677
							    <'nomatch'> when 'true' ->
								[_cor15|[]]
							    ( <_cor14> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_cor14})
							      -| ['compiler_generated'] )
							  end
						      -| [{'id',{0,0,'-capture_get/1-fun-0-'}}] )
						in  %% Line 674
						    call 'lists':'flatmap'
							(_cor17, %% Line 679
								 Strs)
					    ( <_cor13> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor13})
					      -| ['compiler_generated'] )
					  end
	  %% Line 681
	  <[]> when 'true' ->
	      %% Line 682
	      call 'test_server':'capture_get'
		  ()
	  ( <_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18})
		  -| [{'function_name',{'capture_get',1}}] )
	    -| ['compiler_generated'] )
	end
'fail'/1 =
    %% Line 690
    fun (_cor0) ->
	%% Line 691
	try
	    %% Line 692
	    call 'erlang':'exit'
		({'test_case_failed',_cor0})
	of <_cor1> ->
	    _cor1
	catch <_cor4,_cor3,_cor2> ->
	    let <_cor9,Stk> =
		%% Line 695
		case call 'erlang':'get_stacktrace'
			 () of
		  %% Line 696
		  <[{'ct','fail',1,_cor8}|Stk]> when 'true' ->
		      <'ok',Stk>
		  %% Line 697
		  <Stk> when 'true' ->
		      <'ok',Stk>
		end
	    in  %% Line 699
		call 'erlang':'raise'
		    (_cor4, _cor3, Stk)
'fail'/2 =
    %% Line 710
    fun (_cor1,_cor0) ->
	%% Line 711
	try
	    call 'io_lib':'format'
		(_cor1, _cor0)
	of <_cor2> ->
	    %% Line 713
	    try
		let <_cor3> =
		    %% Line 714
		    call 'lists':'flatten'
			(_cor2)
		in  %% Line 714
		    call 'erlang':'exit'
			({'test_case_failed',_cor3})
	    of <_cor4> ->
		_cor4
	    catch <_cor7,_cor6,_cor5> ->
		let <_cor19,Stk> =
		    %% Line 717
		    case call 'erlang':'get_stacktrace'
			     () of
		      %% Line 718
		      <[{'ct','fail',2,_cor16}|Stk]> when 'true' ->
			  <'ok',Stk>
		      %% Line 719
		      <Stk> when 'true' ->
			  <'ok',Stk>
		    end
		in  %% Line 721
		    call 'erlang':'raise'
			(_cor7, _cor6, Stk)
	catch <_cor12,_cor11,_cor10> ->
	    %% Line 725
	    call 'erlang':'exit'
		({_cor11,{'ct','fail',[_cor1|[_cor0|[]]]}})
'comment'/1 =
    %% Line 738
    fun (_cor0) ->
	case _cor0 of
	  <Comment>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor1> =
		  catch
		      %% Line 740
		      call 'io_lib':'format'
			  ([126|[116|[115]]], [Comment|[]])
	      in  let <_cor3> =
		      %% Line 740
		      case _cor1 of
			%% Line 741
			<{'EXIT',_cor9}> when 'true' ->
			    %% Line 742
			    call 'io_lib':'format'
				([126|[112]], [Comment|[]])
			%% Line 743
			<String> when 'true' ->
			    %% Line 744
			    String
		      end
		  in  let <_cor5> =
			  %% Line 746
			  call 'lists':'flatten'
			      (_cor3)
		      in  %% Line 746
			  apply 'send_html_comment'/1
			      (_cor5)
	  %% Line 747
	  <Comment> when 'true' ->
	      let <Formatted> =
		  %% Line 748
		  call 'io_lib':'format'
		      ([126|[112]], [Comment|[]])
	      in  let <_cor7> =
		      %% Line 749
		      call 'lists':'flatten'
			  (Formatted)
		  in  %% Line 749
		      apply 'send_html_comment'/1
			  (_cor7)
	end
'comment'/2 =
    %% Line 764
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Format,Args>
	      when let <_cor2> =
		    call 'erlang':'is_list'
			(Format)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (Args)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor4> =
		  catch
		      %% Line 766
		      call 'io_lib':'format'
			  (Format, Args)
	      in  let <_cor6> =
		      %% Line 766
		      case _cor4 of
			%% Line 767
			<{'EXIT',Reason}> when 'true' ->
			    %% Line 768
			    call 'erlang':'exit'
				({Reason,{'ct','comment',[Format|[Args|[]]]}})
			%% Line 769
			<String> when 'true' ->
			    %% Line 770
			    call 'lists':'flatten'
				(String)
		      end
		  in  %% Line 772
		      apply 'send_html_comment'/1
			  (_cor6)
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'comment',2}}] )
	    -| ['compiler_generated'] )
	end
'send_html_comment'/1 =
    %% Line 774
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 775
	    call 'erlang':'++'
		(_cor0, [60|[47|[102|[111|[110|[116|[62]]]]]]])
	in  let <Html> =
		%% Line 775
		call 'erlang':'++'
		    ([60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34|[103|[114|[101|[101|[110|[34|[62]]]]]]]]]]]]]]]]]]]], _cor1)
	    in  let <_cor3> =
		    %% Line 776
		    call 'erlang':'group_leader'
			()
		in  do  %% Line 776
			call 'ct_util':'set_testdata'
			    ({{'comment',_cor3},Html})
			%% Line 777
			call 'test_server':'comment'
			    (Html)
'make_priv_dir'/0 =
    %% Line 786
    fun () ->
	%% Line 787
	call 'test_server':'make_priv_dir'
	    ()
'get_target_name'/1 =
    %% Line 795
    fun (_cor0) ->
	%% Line 796
	call 'ct_util':'get_target_name'
	    (_cor0)
'parse_table'/1 =
    %% Line 813
    fun (_cor0) ->
	%% Line 814
	call 'ct_util':'parse_table'
	    (_cor0)
'listenv'/1 =
    %% Line 825
    fun (_cor0) ->
	%% Line 826
	call 'ct_util':'listenv'
	    (_cor0)
'testcases'/2 =
    %% Line 837
    fun (_cor1,_cor0) ->
	%% Line 838
	case apply 'make_and_load'/2
		 (_cor1, _cor0) of
	  %% Line 839
	  <E = {'error',_cor7}> when 'true' ->
	      %% Line 840
	      E
	  %% Line 841
	  <_cor8> when 'true' ->
	      let <_cor2> =
		  catch
		      %% Line 842
		      call _cor0:'all'
			  ()
	      in  %% Line 842
		  case _cor2 of
		    %% Line 843
		    <{'EXIT',Reason}> when 'true' ->
			%% Line 844
			{'error',Reason}
		    %% Line 845
		    <TCs> when 'true' ->
			%% Line 846
			TCs
		  end
	end
'make_and_load'/2 =
    %% Line 850
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 852
	    case call 'os':'getenv'
		     ([67|[84|[95|[73|[78|[67|[76|[85|[68|[69|[95|[80|[65|[84|[72]]]]]]]]]]]]]]]) of
	      %% Line 853
	      <'false'> when 'true' ->
		  []
	      %% Line 854
	      <CtInclPath> when 'true' ->
		  call 'string':'tokens'
		      (CtInclPath, [58|[32|[44]]])
	    end
	in  let <_cor6> =
		%% Line 857
		case call 'init':'get_argument'
			 ('include') of
		  %% Line 858
		  <{'ok',[Dirs|[]]}> when 'true' ->
		      Dirs
		  %% Line 859
		  <_cor16> when 'true' ->
		      []
		end
	    in  let <UserInclude> =
		    %% Line 861
		    call 'erlang':'++'
			(_cor3, _cor6)
		in  %% Line 862
		    case call 'ct_run':'run_make'
			     (_cor1, _cor0, UserInclude) of
		      %% Line 863
		      <MErr = {'error',_cor17}> when 'true' ->
			  %% Line 864
			  MErr
		      %% Line 865
		      <_cor18> when 'true' ->
			  let <TestDir> =
			      %% Line 866
			      call 'ct_util':'get_testdir'
				  (_cor1, _cor0)
			  in  let <_cor10> =
				  %% Line 867
				  call 'erlang':'atom_to_list'
				      (_cor0)
			      in  let <File> =
				      %% Line 867
				      call 'filename':'join'
					  (TestDir, _cor10)
				  in  %% Line 868
				      case call 'code':'soft_purge'
					       (_cor0) of
					%% Line 869
					<'true'> when 'true' ->
					    %% Line 870
					    call 'code':'load_abs'
						(File)
					%% Line 871
					<'false'> when 'true' ->
					    %% Line 872
					    {'module',_cor0}
					( <_cor12> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor12})
					  -| ['compiler_generated'] )
				      end
		    end
'userdata'/2 =
    %% Line 885
    fun (_cor1,_cor0) ->
	%% Line 886
	case apply 'make_and_load'/2
		 (_cor1, _cor0) of
	  %% Line 887
	  <E = {'error',_cor7}> when 'true' ->
	      %% Line 888
	      E
	  %% Line 889
	  <_cor8> when 'true' ->
	      let <_cor2> =
		  catch
		      %% Line 890
		      call _cor0:'suite'
			  ()
	      in  %% Line 891
		  apply 'get_userdata'/2
		      (_cor2, [115|[117|[105|[116|[101|[47|[48]]]]]]])
	end
'get_userdata'/2 =
    %% Line 894
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'EXIT',{Undef,_cor19}},Spec>
	      when let <_cor2> =
		    call 'erlang':'=:='
			(Undef, 'undef')
		in  let <_cor3> =
			%% Line 895
			call 'erlang':'=:='
			    (Undef, 'function_clause')
		    in  call 'erlang':'or'
			    (_cor2, _cor3) ->
	      let <_cor4> =
		  %% Line 896
		  call 'erlang':'++'
		      (Spec, [32|[105|[115|[32|[110|[111|[116|[32|[100|[101|[102|[105|[110|[101|[100]]]]]]]]]]]]]]])
	      in  let <_cor5> =
		      %% Line 896
		      call 'erlang':'list_to_atom'
			  (_cor4)
		  in  %% Line 896
		      {'error',_cor5}
	  %% Line 897
	  <{'EXIT',Reason},Spec> when 'true' ->
	      let <_cor6> =
		  %% Line 898
		  call 'erlang':'++'
		      ([101|[114|[114|[111|[114|[32|[105|[110|[32]]]]]]]]], Spec)
	      in  let <_cor7> =
		      %% Line 898
		      call 'erlang':'list_to_atom'
			  (_cor6)
		  in  %% Line 898
		      {'error',{_cor7,Reason}}
	  %% Line 899
	  <List,_cor20>
	      when call 'erlang':'is_list'
		    (List) ->
	      let <Fun> =
		  %% Line 900
		  ( fun (_cor9,_cor8) ->
			case <_cor9,_cor8> of
			  <{'userdata',Data},Acc> when 'true' ->
			      [Data|Acc]
			  %% Line 901
			  <_cor21,Acc> when 'true' ->
			      Acc
			end
		    -| [{'id',{0,0,'-get_userdata/2-fun-0-'}}] )
	      in  let <_fol80> =
		      %% Line 903
		      call 'lists':'foldl'
			  (Fun, [], List)
		  in  let <_cor13> =
			  %% Line 905
			  call 'lists':'reverse'
			      (_fol80)
		      in  %% Line 905
			  call 'lists':'flatten'
			      (_cor13)
	  %% Line 907
	  <_X_BadTerm,Spec> when 'true' ->
	      let <_cor15> =
		  %% Line 908
		  call 'erlang':'++'
		      (Spec, [32|[109|[117|[115|[116|[32|[114|[101|[116|[117|[114|[110|[32|[97|[32|[108|[105|[115|[116]]]]]]]]]]]]]]]]]]])
	      in  let <_cor16> =
		      %% Line 908
		      call 'erlang':'list_to_atom'
			  (_cor15)
		  in  %% Line 908
		      {'error',_cor16}
	end
'userdata'/3 =
    %% Line 922
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <TestDir,Suite,{'group',GroupName}> when 'true' ->
	      %% Line 923
	      case apply 'make_and_load'/2
		       (TestDir, Suite) of
		%% Line 924
		<E = {'error',_cor17}> when 'true' ->
		    %% Line 925
		    E
		%% Line 926
		<_cor18> when 'true' ->
		    let <_cor3> =
			catch
			    %% Line 927
			    call Suite:'group'
				(GroupName)
		    in  let <_cor5> =
			    %% Line 928
			    call 'erlang':'atom_to_list'
				(GroupName)
			in  let <_cor6> =
				%% Line 928
				call 'erlang':'++'
				    (_cor5, [41])
			    in  let <_cor7> =
				    %% Line 928
				    call 'erlang':'++'
					([103|[114|[111|[117|[112|[40]]]]]], _cor6)
				in  %% Line 928
				    apply 'get_userdata'/2
					(_cor3, _cor7)
	      end
	  %% Line 931
	  <TestDir,Suite,Case>
	      when call 'erlang':'is_atom'
		    (Case) ->
	      %% Line 932
	      case apply 'make_and_load'/2
		       (TestDir, Suite) of
		%% Line 933
		<E = {'error',_cor19}> when 'true' ->
		    %% Line 934
		    E
		%% Line 935
		<_cor20> when 'true' ->
		    let <_cor9> =
			catch
			    %% Line 936
			    call Suite:Case
				()
		    in  let <_cor11> =
			    %% Line 937
			    call 'erlang':'atom_to_list'
				(Case)
			in  let <_cor12> =
				%% Line 937
				call 'erlang':'++'
				    (_cor11, [47|[48]])
			    in  %% Line 937
				apply 'get_userdata'/2
				    (_cor9, _cor12)
	      end
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'userdata',3}}] )
	    -| ['compiler_generated'] )
	end
'get_status'/0 =
    %% Line 961
    fun () ->
	%% Line 962
	case apply 'get_testdata'/1
		 ('curr_tc') of
	  %% Line 963
	  <{'ok',TestCase}> when 'true' ->
	      %% Line 964
	      case apply 'get_testdata'/1
		       ('stats') of
		%% Line 965
		<{'ok',{Ok,Failed,Skipped = {UserSkipped,AutoSkipped}}}> when 'true' ->
		    let <_cor0> =
			%% Line 970
			call 'erlang':'+'
			    (Ok, Failed)
		    in  let <_cor1> =
			    %% Line 970
			    call 'erlang':'+'
				(_cor0, UserSkipped)
			in  let <_cor2> =
				%% Line 970
				call 'erlang':'+'
				    (_cor1, AutoSkipped)
			    in  %% Line 966
				[{'current',TestCase}|%% Line 967
						      [{'successful',Ok}|%% Line 968
									 [{'failed',Failed}|%% Line 969
											    [{'skipped',Skipped}|%% Line 970
														 [{'total',_cor2}|[]]]]]]
		%% Line 971
		<Err1> when 'true' ->
		    Err1
	      end
	  %% Line 973
	  <Err2> when 'true' ->
	      Err2
	end
'get_testdata'/1 =
    %% Line 976
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 977
		call 'ct_util':'get_testdata'
		    (_cor0)
	in  %% Line 977
	    case _cor1 of
	      %% Line 978
	      <{'error','ct_util_server_not_running'}> when 'true' ->
		  %% Line 979
		  'no_tests_running'
	      %% Line 980
	      <Error = {'error',_X_Reason}> when 'true' ->
		  %% Line 981
		  Error
	      %% Line 982
	      <{'EXIT',_X_Reason}> when 'true' ->
		  %% Line 983
		  'no_tests_running'
	      %% Line 984
	      <'undefined'> when 'true' ->
		  %% Line 985
		  {'error','no_testdata'}
	      %% Line 986
	      <[CurrTC|[]]>
		  when call 'erlang':'=:='
			(_cor0,
			 'curr_tc') ->
		  %% Line 987
		  {'ok',CurrTC}
	      %% Line 988
	      <Data> when 'true' ->
		  %% Line 989
		  {'ok',Data}
	    end
'abort_current_testcase'/1 =
    %% Line 1004
    fun (_cor0) ->
	%% Line 1005
	call 'test_server_ctrl':'abort_current_testcase'
	    (_cor0)
'encrypt_config_file'/2 =
    %% Line 1023
    fun (_cor1,_cor0) ->
	%% Line 1024
	call 'ct_config':'encrypt_config_file'
	    (_cor1, _cor0)
'encrypt_config_file'/3 =
    %% Line 1043
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1044
	call 'ct_config':'encrypt_config_file'
	    (_cor2, _cor1, _cor0)
'decrypt_config_file'/2 =
    %% Line 1059
    fun (_cor1,_cor0) ->
	%% Line 1060
	call 'ct_config':'decrypt_config_file'
	    (_cor1, _cor0)
'decrypt_config_file'/3 =
    %% Line 1074
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1075
	call 'ct_config':'decrypt_config_file'
	    (_cor2, _cor1, _cor0)
'add_config'/2 =
    %% Line 1089
    fun (_cor1,_cor0) ->
	%% Line 1090
	call 'ct_config':'add_config'
	    (_cor1, _cor0)
'remove_config'/2 =
    %% Line 1101
    fun (_cor1,_cor0) ->
	%% Line 1102
	call 'ct_config':'remove_config'
	    (_cor1, _cor0)
'timetrap'/1 =
    %% Line 1121
    fun (_cor0) ->
	do  %% Line 1122
	    call 'test_server':'timetrap_cancel'
		()
	    %% Line 1123
	    call 'test_server':'timetrap'
		(_cor0)
'get_timetrap_info'/0 =
    %% Line 1134
    fun () ->
	%% Line 1135
	call 'test_server':'get_timetrap_info'
	    ()
'sleep'/1 =
    %% Line 1150
    fun (_cor0) ->
	case _cor0 of
	  <{'hours',Hs}> when 'true' ->
	      let <_cor1> =
		  %% Line 1151
		  call 'erlang':'*'
		      (Hs, 1000)
	      in  let <_cor2> =
		      %% Line 1151
		      call 'erlang':'*'
			  (_cor1, 60)
		  in  let <_cor3> =
			  %% Line 1151
			  call 'erlang':'*'
			      (_cor2, 60)
		      in  let <_cor4> =
			      %% Line 1151
			      call 'erlang':'trunc'
				  (_cor3)
			  in  %% Line 1151
			      apply 'sleep'/1
				  (_cor4)
	  %% Line 1152
	  <{'minutes',Ms}> when 'true' ->
	      let <_cor5> =
		  %% Line 1153
		  call 'erlang':'*'
		      (Ms, 1000)
	      in  let <_cor6> =
		      %% Line 1153
		      call 'erlang':'*'
			  (_cor5, 60)
		  in  let <_cor7> =
			  %% Line 1153
			  call 'erlang':'trunc'
			      (_cor6)
		      in  %% Line 1153
			  apply 'sleep'/1
			      (_cor7)
	  %% Line 1154
	  <{'seconds',Ss}> when 'true' ->
	      let <_cor8> =
		  %% Line 1155
		  call 'erlang':'*'
		      (Ss, 1000)
	      in  let <_cor9> =
		      %% Line 1155
		      call 'erlang':'trunc'
			  (_cor8)
		  in  %% Line 1155
		      apply 'sleep'/1
			  (_cor9)
	  %% Line 1156
	  <Time> when 'true' ->
	      %% Line 1157
	      call 'test_server':'adjusted_sleep'
		  (Time)
	end
'notify'/2 =
    %% Line 1168
    fun (_cor1,_cor0) ->
	%% Line 1169
	call 'ct_event':'notify'
	    (_cor1, _cor0)
'sync_notify'/2 =
    %% Line 1180
    fun (_cor1,_cor0) ->
	%% Line 1181
	call 'ct_event':'sync_notify'
	    (_cor1, _cor0)
'break'/1 =
    %% Line 1205
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 1206
	    call 'ct_util':'get_testdata'
		('starter')
	in  let <_cor1> =
		%% Line 1207
		call 'ct_util':'get_testdata'
		    ('release_shell')
	    in  %% Line 1206
		case <_cor2,_cor1> of
		  %% Line 1208
		  <'ct',ReleaseSh>
		      when call 'erlang':'=/='
			    (ReleaseSh,
			     'true') ->
		      do  %% Line 1210
			  call 'ct_logs':'log'
			      ([87|[97|[114|[110|[105|[110|[103|[33]]]]]]]], [99|[116|[58|[98|[114|[101|[97|[107|[47|[49|[32|[99|[97|[110|[32|[111|[110|[108|[121|[32|[98|[101|[32|[117|[115|[101|[100|[32|[105|[102|[32|[114|[101|[108|[101|[97|[115|[101|[95|[115|[104|[101|[108|[108|[32|[61|[61|[32|[116|[114|[117|[101|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
			  do  %% Line 1211
			      call 'io':'format'
				  ('user', [87|[97|[114|[110|[105|[110|[103|[33|[32|[99|[116|[58|[98|[114|[101|[97|[107|[47|[49|[32|[99|[97|[110|[32|[111|[110|[108|[121|[32|[98|[101|[32|[117|[115|[101|[100|[32|[105|[102|[32|[114|[101|[108|[101|[97|[115|[101|[95|[115|[104|[101|[108|[108|[32|[61|[61|[32|[116|[114|[117|[101|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
			      %% Line 1212
			      {'error','enable break with release_shell option'}
		  %% Line 1213
		  <_fol102,_fol103> when 'true' ->
		      %% Line 1214
		      case apply 'get_testdata'/1
			       ('curr_tc') of
			%% Line 1215
			<{'ok',{_cor14,_X_TestCase}}> when 'true' ->
			    %% Line 1216
			    call 'test_server':'break'
				('ct', _cor0)
			%% Line 1217
			<{'ok',Cases}>
			    when call 'erlang':'is_list'
				  (Cases) ->
			    let <_cor9> =
				%% Line 1219
				( letrec
				      'lc$^0'/1 =
					  fun (_cor7) ->
					      case _cor7 of
						<[{_cor15,TC}|_cor6]> when 'true' ->
						    let <_cor8> =
							apply 'lc$^0'/1
							    (_cor6)
						    in  ( [TC|_cor8]
							  -| ['compiler_generated'] )
						( <[_cor5|_cor6]> when 'true' ->
						      apply 'lc$^0'/1
							  (_cor6)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor7> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor7})
							-| [{'function_name',{'lc$^0',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^0'/1
					  (Cases)
				  -| ['list_comprehension'] )
			    in  %% Line 1218
				{'error',{'multiple cases running',_cor9}}
			%% Line 1220
			<Error = {'error',_cor16}> when 'true' ->
			    %% Line 1221
			    Error
			%% Line 1222
			<Error> when 'true' ->
			    %% Line 1223
			    {'error',Error}
		      end
		end
'break'/2 =
    %% Line 1240
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1241
	    call 'ct_util':'get_testdata'
		('starter')
	in  let <_cor2> =
		%% Line 1242
		call 'ct_util':'get_testdata'
		    ('release_shell')
	    in  %% Line 1241
		case <_cor3,_cor2> of
		  %% Line 1243
		  <'ct',ReleaseSh>
		      when call 'erlang':'=/='
			    (ReleaseSh,
			     'true') ->
		      do  %% Line 1245
			  call 'ct_logs':'log'
			      ([87|[97|[114|[110|[105|[110|[103|[33]]]]]]]], [99|[116|[58|[98|[114|[101|[97|[107|[47|[50|[32|[99|[97|[110|[32|[111|[110|[108|[121|[32|[98|[101|[32|[117|[115|[101|[100|[32|[105|[102|[32|[114|[101|[108|[101|[97|[115|[101|[95|[115|[104|[101|[108|[108|[32|[61|[61|[32|[116|[114|[117|[101|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
			  do  %% Line 1246
			      call 'io':'format'
				  ('user', [87|[97|[114|[110|[105|[110|[103|[33|[32|[99|[116|[58|[98|[114|[101|[97|[107|[47|[50|[32|[99|[97|[110|[32|[111|[110|[108|[121|[32|[98|[101|[32|[117|[115|[101|[100|[32|[105|[102|[32|[114|[101|[108|[101|[97|[115|[101|[95|[115|[104|[101|[108|[108|[32|[61|[61|[32|[116|[114|[117|[101|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
			      %% Line 1247
			      {'error','enable break with release_shell option'}
		  %% Line 1248
		  <_fol107,_fol108> when 'true' ->
		      %% Line 1249
		      case apply 'get_testdata'/1
			       ('curr_tc') of
			%% Line 1250
			<{'ok',Cases}>
			    when call 'erlang':'is_list'
				  (Cases) ->
			    %% Line 1251
			    case call 'lists':'keymember'
				     (_cor1, 2, Cases) of
			      %% Line 1252
			      <'true'> when 'true' ->
				  %% Line 1253
				  call 'test_server':'break'
				      ('ct', _cor1, _cor0)
			      %% Line 1254
			      <'false'> when 'true' ->
				  %% Line 1255
				  {'error','test case not running'}
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor6})
				-| ['compiler_generated'] )
			    end
			%% Line 1257
			<{'ok',{_cor12,_cor13}}>
			    when call 'erlang':'=:='
				  (_cor13,
				   _cor1) ->
			    %% Line 1258
			    call 'test_server':'break'
				('ct', _cor1, _cor0)
			%% Line 1259
			<Error = {'error',_cor14}> when 'true' ->
			    %% Line 1260
			    Error
			%% Line 1261
			<Error> when 'true' ->
			    %% Line 1262
			    {'error',Error}
		      end
		end
'continue'/0 =
    %% Line 1272
    fun () ->
	%% Line 1273
	call 'test_server':'continue'
	    ()
'continue'/1 =
    %% Line 1284
    fun (_cor0) ->
	%% Line 1285
	call 'test_server':'continue'
	    (_cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('ct')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('ct', _cor0)
end