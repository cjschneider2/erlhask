module 'ct_framework' ['end_per_group'/2,
		       'end_per_suite'/1,
		       'end_tc'/3,
		       'end_tc'/4,
		       'error_in_suite'/1,
		       'error_notification'/4,
		       'format_comment'/1,
		       'get_all_cases'/1,
		       'get_html_wrapper'/4,
		       'get_logopts'/0,
		       'get_suite'/2,
		       'init_per_group'/2,
		       'init_per_suite'/1,
		       'init_tc'/3,
		       'module_info'/0,
		       'module_info'/1,
		       'report'/2,
		       'warn'/1]
    attributes []
'init_tc'/3 =
    %% Line 54
    fun (_cor2,_cor1,_cor0) ->
	let <Suite> =
	    %% Line 56
	    apply 'get_suite_name'/2
		(_cor2, _cor0)
	in  do  %% Line 60
		case call 'ct_util':'get_testdata'
			 ('interpret') of
		  %% Line 61
		  <{What,'kill',{TCPid,AttPid}}> when 'true' ->
		      do  %% Line 62
			  call 'ct_util':'kill_attached'
			      (TCPid, AttPid)
			  %% Line 63
			  call 'ct_util':'set_testdata'
			      ({'interpret',{What,'kill',{'undefined','undefined'}}})
		  %% Line 64
		  <_cor23> when 'true' ->
		      'ok'
		end
		let <_cor9> =
		    %% Line 69
		    ( case <> of
			( <>
			      when call 'erlang':'=/='
				    (_cor1,
				     'end_per_suite') ->
			      %% Line 70
			      ( case <> of
				  ( <>
					when call 'erlang':'=/='
					      (_cor1,
					       'end_per_group') ->
					call 'ct_util':'get_testdata'
					    ('skip_rest')
				    -| ['compiler_generated'] )
				  ( <> when 'true' ->
					'false'
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      'false'
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		in  %% Line 68
		    case _cor9 of
		      %% Line 71
		      <'true'> when 'true' ->
			  %% Line 72
			  {'auto_skip',[82|[101|[112|[101|[97|[116|[101|[100|[32|[116|[101|[115|[116|[32|[115|[116|[111|[112|[112|[101|[100|[32|[98|[121|[32|[102|[111|[114|[99|[101|[95|[115|[116|[111|[112|[32|[111|[112|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}
		      %% Line 73
		      <_cor24> when 'true' ->
			  %% Line 74
			  case call 'ct_util':'get_testdata'
				   ('curr_tc') of
			    %% Line 75
			    <{_cor25,{'suite0_failed',{'require',Reason}}}>
				when call 'erlang':'=:='
				      (_cor25,
				       Suite) ->
				%% Line 76
				{'auto_skip',{'require_failed_in_suite0',Reason}}
			    %% Line 77
			    <{_cor26,Failure = {'suite0_failed',_cor27}}>
				when call 'erlang':'=:='
				      (_cor26,
				       Suite) ->
				%% Line 78
				{'fail',Failure}
			    %% Line 79
			    <_cor28> when 'true' ->
				let <_cor12> =
				    %% Line 81
				    ( fun (_cor10) ->
					  case _cor10 of
					    <'undefined'> when 'true' ->
						%% Line 82
						[{Suite,_cor1}|[]]
					    %% Line 83
					    <Running> when 'true' ->
						%% Line 84
						[{Suite,_cor1}|Running]
					  end
				      -| [{'id',{0,0,'-init_tc/3-fun-0-'}}] )
				in  do  %% Line 80
					call 'ct_util':'update_testdata'
					    ('curr_tc', _cor12, %% Line 85
								['create'])
					%% Line 86
					case call 'ct_util':'read_suite_data'
						 ({'seq',Suite,_cor1}) of
					  %% Line 87
					  <'undefined'> when 'true' ->
					      %% Line 88
					      apply 'init_tc1'/4
						  (_cor2, Suite, _cor1, _cor0)
					  %% Line 89
					  <Seq>
					      when call 'erlang':'is_atom'
						    (Seq) ->
					      do  %% Line 90
						  case call 'ct_util':'read_suite_data'
							   ({'seq',Suite,Seq}) of
						    %% Line 91
						    <[_cor29|TCs]>
							when call 'erlang':'=:='
							      (_cor29,
							       _cor1) ->
							let <_cor15> =
							    %% Line 96
							    ( fun (_cor13) ->
								  %% Line 97
								  call 'ct_util':'save_suite_data'
								      (%% Line 98
								       {'seq',Suite,_cor13}, %% Line 99
											     Seq)
							      -| [{'id',{0,0,'-init_tc/3-fun-1-'}}] )
							in  %% Line 95
							    call 'lists':'foreach'
								(_cor15, %% Line 100
									 TCs)
						    %% Line 101
						    <_cor30> when 'true' ->
							'ok'
						  end
						  %% Line 104
						  apply 'init_tc1'/4
						      (_cor2, Suite, _cor1, _cor0)
					  %% Line 105
					  <{'failed',Seq,BadFunc}> when 'true' ->
					      %% Line 106
					      {'auto_skip',{'sequence_failed',Seq,BadFunc}}
					  ( <_cor17> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor17})
					    -| ['compiler_generated'] )
					end
			  end
		    end
'init_tc1'/4 =
    %% Line 111
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'ct_framework',_cor26,'error_in_suite',[Config0|[]]>
	      when call 'erlang':'is_list'
		    (Config0) ->
	      do  %% Line 112
		  call 'ct_logs':'init_tc'
		      ('false')
		  let <_cor4> =
		      %% Line 114
		      call 'erlang':'node'
			  ()
		  in  do  %% Line 113
			  call 'ct_event':'notify'
			      ({'event','tc_start',_cor4,%% Line 115
							 {'ct_framework','error_in_suite'}})
			  %% Line 116
			  case call 'proplists':'get_value'
				   ('error', Config0) of
			    %% Line 117
			    <'undefined'> when 'true' ->
				%% Line 118
				{'fail',[117|[110|[107|[110|[111|[119|[110|[95|[101|[114|[114|[111|[114|[95|[105|[110|[95|[115|[117|[105|[116|[101]]]]]]]]]]]]]]]]]]]]]]}
			    %% Line 119
			    <Reason> when 'true' ->
				%% Line 120
				{'fail',Reason}
			  end
	  %% Line 123
	  <Mod,Suite,Func,[Config0|[]]>
	      when call 'erlang':'is_list'
		    (Config0) ->
	      let <_cor11> =
		  %% Line 125
		  case call 'ct_util':'read_suite_data'
			   ('last_saved_config') of
		    %% Line 126
		    <{{_cor27,LastFunc},SavedConfig}>
			when call 'erlang':'=:='
			      (_cor27,
			       Suite) ->
			let <_cor6> =
			    %% Line 128
			    call 'lists':'keydelete'
				('saved_config', 1, Config0)
			in  %% Line 127
			    [{'saved_config',{LastFunc,SavedConfig}}|_cor6]
		    %% Line 129
		    <{{LastSuite,InitOrEnd},%% Line 130
					    SavedConfig}>
			when let <_cor7> =
			      %% Line 130
			      call 'erlang':'=:='
				  (InitOrEnd, 'init_per_suite')
			  in  let <_cor8> =
				  %% Line 131
				  call 'erlang':'=:='
				      (InitOrEnd, 'end_per_suite')
			      in  %% Line 130
				  call 'erlang':'or'
				      (_cor7, _cor8) ->
			let <_cor9> =
			    %% Line 134
			    call 'lists':'keydelete'
				('saved_config', 1, Config0)
			in  %% Line 133
			    [{'saved_config',{LastSuite,SavedConfig}}|_cor9]
		    %% Line 135
		    <'undefined'> when 'true' ->
			%% Line 136
			call 'lists':'keydelete'
			    ('saved_config', 1, Config0)
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor10})
		      -| ['compiler_generated'] )
		  end
	      in  do  %% Line 138
		      call 'ct_util':'delete_suite_data'
			  ('last_saved_config')
		      let <Config> =
			  %% Line 139
			  call 'lists':'keydelete'
			      ('watchdog', 1, _cor11)
		      in  do  %% Line 141
			      case <> of
				<>
				    when call 'erlang':'=:='
					  (Func,
					   'init_per_suite') ->
				    do  %% Line 143
					call 'ct_config':'delete_default_config'
					    ('suite')
					%% Line 145
					call 'ct_config':'release_allocated'
					    ()
				%% Line 146
				<>
				    when call 'erlang':'=/='
					  (Func,
					   'init_per_suite') ->
				    'ok'
				( <> when 'true' ->
				      primop 'match_fail'
					  ('if_clause')
				  -| ['compiler_generated'] )
			      end
			      let <GroupPath> =
				  %% Line 150
				  call 'proplists':'get_value'
				      ('tc_group_path', Config, [])
			      in  let <_cor15> =
				      %% Line 151
				      call 'proplists':'get_value'
					  ('tc_group_properties', Config, [])
				  in  let <AllGroups> =
					  %% Line 151
					  [_cor15|GroupPath]
				      in  let <FuncSpec> =
					      %% Line 156
					      apply 'group_or_func'/2
						  (Func, Config0)
					  in  do  %% Line 157
						  case <> of
						    <>
							when call 'erlang':'is_tuple'
							      (FuncSpec) ->
							'ok'
						    %% Line 159
						    <> when 'true' ->
							%% Line 160
							call 'ct_config':'delete_default_config'
							    ('testcase')
						  end
						  let <Initialize> =
						      %% Line 162
						      ( fun () ->
							    do  %% Line 163
								call 'ct_logs':'init_tc'
								    ('false')
								let <_cor18> =
								    %% Line 165
								    call 'erlang':'node'
									()
								in  %% Line 164
								    call 'ct_event':'notify'
									({'event','tc_start',_cor18,%% Line 166
												    {Mod,FuncSpec}})
							-| [{'id',{0,0,'-init_tc1/4-fun-0-'}}] )
						  in  %% Line 168
						      case apply 'add_defaults'/3
							       (Mod, Func, AllGroups) of
							%% Line 169
							<Error = {'suite0_failed',_cor28}> when 'true' ->
							    do  %% Line 170
								apply Initialize
								    ()
								do  %% Line 171
								    call 'ct_util':'set_testdata'
									({'curr_tc',{Suite,Error}})
								    %% Line 172
								    {'error',Error}
							%% Line 173
							<Error = {'group0_failed',_cor29}> when 'true' ->
							    do  %% Line 174
								apply Initialize
								    ()
								%% Line 175
								{'auto_skip',Error}
							%% Line 176
							<Error = {'testcase0_failed',_cor30}> when 'true' ->
							    do  %% Line 177
								apply Initialize
								    ()
								%% Line 178
								{'auto_skip',Error}
							%% Line 179
							<{SuiteInfo,MergeResult}> when 'true' ->
							    %% Line 180
							    case MergeResult of
							      %% Line 181
							      <{'error',Reason}> when 'true' ->
								  do  %% Line 182
								      apply Initialize
									  ()
								      %% Line 183
								      {'fail',Reason}
							      %% Line 184
							      <_cor31> when 'true' ->
								  %% Line 185
								  apply 'init_tc2'/6
								      (Mod, Suite, Func, SuiteInfo, MergeResult, Config)
							    end
							( <_cor21> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_cor21})
							  -| ['compiler_generated'] )
						      end
	  %% Line 189
	  <_X_Mod,_X_Suite,_X_Func,Args> when 'true' ->
	      %% Line 190
	      {'ok',Args}
	end
'init_tc2'/6 =
    %% Line 192
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <MergedInfo> =
	    %% Line 194
	    apply 'timetrap_first'/3
		(_cor1, [], [])
	in  let <_cor7> =
		%% Line 196
		call 'erlang':'++'
		    (_cor1, _cor0)
	    in  do  %% Line 196
		    case call 'lists':'keysearch'
			     ('stylesheet', 1, _cor7) of
		      %% Line 197
		      <{'value',{'stylesheet',SSFile}}> when 'true' ->
			  let <_cor8> =
			      %% Line 198
			      apply 'add_data_dir'/2
				  (SSFile, _cor0)
			  in  %% Line 198
			      call 'ct_logs':'set_stylesheet'
				  (_cor3, _cor8)
		      %% Line 199
		      <_cor29> when 'true' ->
			  %% Line 200
			  case call 'ct_util':'get_testdata'
				   ('stylesheet') of
			    %% Line 201
			    <'undefined'> when 'true' ->
				%% Line 202
				call 'ct_logs':'clear_stylesheet'
				    (_cor3)
			    %% Line 203
			    <SSFile> when 'true' ->
				%% Line 204
				call 'ct_logs':'set_stylesheet'
				    (_cor3, SSFile)
			  end
		    end
		    do  %% Line 209
			case call 'ct_util':'get_overridden_silenced_connections'
				 () of
			  %% Line 210
			  <'undefined'> when 'true' ->
			      let <_cor11> =
				  %% Line 211
				  call 'erlang':'++'
				      (_cor1, _cor0)
			      in  %% Line 211
				  case call 'lists':'keysearch'
					   ('silent_connections', 1, _cor11) of
				    %% Line 212
				    <{'value',{'silent_connections',Conns}}> when 'true' ->
					%% Line 213
					call 'ct_util':'silence_connections'
					    (Conns)
				    %% Line 214
				    <_cor30> when 'true' ->
					'ok'
				  end
			  %% Line 217
			  <Conns> when 'true' ->
			      %% Line 218
			      call 'ct_util':'silence_connections'
				  (Conns)
			end
			let <_cor14> =
			    %% Line 220
			    call 'erlang':'=:='
				(_cor3, 'init_per_suite')
			in  do  %% Line 220
				call 'ct_logs':'init_tc'
				    (_cor14)
				let <FuncSpec> =
				    %% Line 221
				    apply 'group_or_func'/2
					(_cor3, _cor0)
				in  let <_cor16> =
					%% Line 223
					call 'erlang':'node'
					    ()
				    in  do  %% Line 222
					    call 'ct_event':'notify'
						({'event','tc_start',_cor16,%% Line 224
									    {_cor5,FuncSpec}})
					    let <_cor17> =
						catch
						    %% Line 226
						    apply 'configure'/6
							(MergedInfo, MergedInfo, _cor2, %% Line 227
											FuncSpec, %% Line 227
												  [], _cor0)
					    in  %% Line 226
						case _cor17 of
						  %% Line 228
						  <{'suite0_failed',Reason}> when 'true' ->
						      do  %% Line 229
							  call 'ct_util':'set_testdata'
							      ({'curr_tc',{_cor5,{'suite0_failed',%% Line 230
												  {'require',Reason}}}})
							  %% Line 231
							  {'auto_skip',{'require_failed_in_suite0',Reason}}
						  %% Line 232
						  <{'error',Reason}> when 'true' ->
						      %% Line 233
						      {'auto_skip',{'require_failed',Reason}}
						  %% Line 234
						  <{'EXIT',Reason}> when 'true' ->
						      %% Line 235
						      {'fail',Reason}
						  %% Line 236
						  <{'ok',PostInitHook,Config1}> when 'true' ->
						      %% Line 237
						      case call 'erlang':'get'
							       ('$test_server_framework_test') of
							%% Line 238
							<'undefined'> when 'true' ->
							    %% Line 239
							    apply 'ct_suite_init'/4
								(_cor4, FuncSpec, PostInitHook, Config1)
							%% Line 240
							<Fun> when 'true' ->
							    let <PostInitHookResult> =
								%% Line 241
								apply 'do_post_init_hook'/2
								    (PostInitHook, %% Line 242
										   Config1)
							    in  let <_cor19> =
								    %% Line 243
								    call 'erlang':'++'
									(PostInitHookResult, Config1)
								in  %% Line 243
								    case apply Fun
									     ('init_tc', [_cor19|[]]) of
								      %% Line 244
								      <NewConfig>
									  when call 'erlang':'is_list'
										(NewConfig) ->
									  %% Line 245
									  {'ok',NewConfig}
								      %% Line 246
								      <Else> when 'true' ->
									  %% Line 247
									  Else
								    end
						      end
						  ( <_cor22> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor22})
						    -| ['compiler_generated'] )
						end
'ct_suite_init'/4 =
    %% Line 252
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Suite,FuncSpec,PostInitHook,Config>
	      when call 'erlang':'is_list'
		    (Config) ->
	      %% Line 253
	      case call 'ct_hooks':'init_tc'
		       (Suite, FuncSpec, Config) of
		%% Line 254
		<NewConfig>
		    when call 'erlang':'is_list'
			  (NewConfig) ->
		    let <PostInitHookResult> =
			%% Line 255
			apply 'do_post_init_hook'/2
			    (PostInitHook, NewConfig)
		    in  let <_cor5> =
			    %% Line 256
			    call 'erlang':'++'
				(PostInitHookResult, NewConfig)
			in  %% Line 256
			    {'ok',[_cor5|[]]}
		%% Line 257
		<Else> when 'true' ->
		    %% Line 258
		    Else
	      end
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'ct_suite_init',4}}] )
	    -| ['compiler_generated'] )
	end
'do_post_init_hook'/2 =
    %% Line 261
    fun (_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 262
	    ( fun (_cor4) ->
		  case _cor4 of
		    <{Tag,Fun}> when 'true' ->
			%% Line 263
			case call 'lists':'keysearch'
				 (Tag, 1, _cor0) of
			  %% Line 264
			  <{'value',_cor9}> when 'true' ->
			      %% Line 265
			      []
			  %% Line 266
			  <'false'> when 'true' ->
			      %% Line 267
			      case apply Fun
				       () of
				%% Line 268
				<{'error',_cor10}> when 'true' ->
				    []
				%% Line 269
				<Result> when 'true' ->
				    [{Tag,Result}|[]]
			      end
			  ( <_cor3> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor3})
			    -| ['compiler_generated'] )
			end
		    ( <_cor5> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor5})
			    -| [{'function_name',{'-do_post_init_hook/2-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-do_post_init_hook/2-fun-0-'}}] )
	in  %% Line 262
	    call 'lists':'flatmap'
		(_cor6, _cor1)
'add_defaults'/3 =
    %% Line 274
    fun (_cor2,_cor1,_cor0) ->
	let <Suite> =
	    %% Line 275
	    apply 'get_suite_name'/2
		(_cor2, _cor0)
	in  let <_cor4> =
		catch
		    %% Line 276
		    call Suite:'suite'
			()
	    in  %% Line 276
		case _cor4 of
		  %% Line 277
		  <{'EXIT',{'undef',_cor34}}> when 'true' ->
		      let <SuiteInfo> =
			  %% Line 278
			  apply 'merge_with_suite_defaults'/2
			      (Suite, [])
		      in  let <_cor11> =
			      %% Line 279
			      ( letrec
				    'lc$^0'/1 =
					fun (_cor9) ->
					    case _cor9 of
					      <[I|_cor7]>
						  when try
							let <_cor8> =
							    call 'erlang':'element'
								(1, I)
							in  call 'erlang':'=/='
								(_cor8, 'ct_hooks')
						    of <Try> ->
							Try
						    catch <T,R> ->
							'false' ->
						  let <_cor10> =
						      apply 'lc$^0'/1
							  (_cor7)
						  in  ( [I|_cor10]
							-| ['compiler_generated'] )
					      ( <[I|_cor7]> when 'true' ->
						    apply 'lc$^0'/1
							(_cor7)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor9> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor9})
						      -| [{'function_name',{'lc$^0',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^0'/1
					(SuiteInfo)
				-| ['list_comprehension'] )
			  in  %% Line 280
			      case apply 'add_defaults1'/4
				       (_cor2, _cor1, _cor0, _cor11) of
				%% Line 281
				<Error = {'group0_failed',_cor35}> when 'true' ->
				    Error
				%% Line 282
				<Error = {'testcase0_failed',_cor36}> when 'true' ->
				    Error
				%% Line 283
				<Error = {'error',_cor37}> when 'true' ->
				    {SuiteInfo,Error}
				%% Line 284
				<MergedInfo> when 'true' ->
				    {SuiteInfo,MergedInfo}
			      end
		  %% Line 286
		  <{'EXIT',Reason}> when 'true' ->
		      let <ErrStr> =
			  %% Line 287
			  call 'io_lib':'format'
			      ([126|[110|[42|[42|[42|[32|[69|[82|[82|[79|[82|[32|[42|[42|[42|[32|[126|[119|[58|[115|[117|[105|[116|[101|[47|[48|[32|[102|[97|[105|[108|[101|[100|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 289
																														     [Suite|[Reason|[]]])
		      in  do  %% Line 290
			      call 'io':'format'
				  (ErrStr, [])
			      do  %% Line 291
				  call 'io':'format'
				      ('user', ErrStr, [])
				  %% Line 292
				  {'suite0_failed',{'exited',Reason}}
		  %% Line 293
		  <SuiteInfo>
		      when call 'erlang':'is_list'
			    (_cor4) ->
		      let <_cor17> =
			  %% Line 294
			  ( fun (_cor15) ->
				case _cor15 of
				  <E>
				      when call 'erlang':'is_tuple'
					    (_cor15) ->
				      'true'
				  %% Line 295
				  <_cor38> when 'true' ->
				      'false'
				end
			    -| [{'id',{0,0,'-add_defaults/3-fun-0-'}}] )
		      in  %% Line 294
			  case call 'lists':'all'
				   (_cor17, %% Line 296
					    SuiteInfo) of
			    %% Line 297
			    <'true'> when 'true' ->
				let <SuiteInfo1> =
				    %% Line 298
				    apply 'merge_with_suite_defaults'/2
					(Suite, SuiteInfo)
				in  let <_cor24> =
					%% Line 299
					( letrec
					      'lc$^1'/1 =
						  fun (_cor22) ->
						      case _cor22 of
							<[I|_cor20]>
							    when %% Line 300
							      try
								  let <_cor21> =
								      call 'erlang':'element'
									  (1, I)
								  in  call 'erlang':'=/='
									  (_cor21, 'ct_hooks')
							      of <Try> ->
								  Try
							      catch <T,R> ->
								  'false' ->
							    let <_cor23> =
								apply 'lc$^1'/1
								    (_cor20)
							    in  ( [I|_cor23]
								  -| ['compiler_generated'] )
							( <[I|_cor20]> when 'true' ->
							      apply 'lc$^1'/1
								  (_cor20)
							  -| ['compiler_generated'] )
							<[]> when 'true' ->
							    []
							( <_cor22> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_cor22})
								-| [{'function_name',{'lc$^1',1}}] )
							  -| ['compiler_generated'] )
						      end
					  in  apply 'lc$^1'/1
						  (SuiteInfo1)
					  -| ['list_comprehension'] )
				    in  %% Line 301
					case apply 'add_defaults1'/4
						 (_cor2, _cor1, _cor0, _cor24) of
					  %% Line 303
					  <Error = {'group0_failed',_cor39}> when 'true' ->
					      Error
					  %% Line 304
					  <Error = {'testcase0_failed',_cor40}> when 'true' ->
					      Error
					  %% Line 305
					  <Error = {'error',_cor41}> when 'true' ->
					      {SuiteInfo1,Error}
					  %% Line 306
					  <MergedInfo> when 'true' ->
					      {SuiteInfo1,MergedInfo}
					end
			    %% Line 308
			    <'false'> when 'true' ->
				let <ErrStr> =
				    %% Line 309
				    call 'io_lib':'format'
					([126|[110|[42|[42|[42|[32|[69|[82|[82|[79|[82|[32|[42|[42|[42|[32|[73|[110|[118|[97|[108|[105|[100|[32|[114|[101|[116|[117|[114|[110|[32|[118|[97|[108|[117|[101|[32|[102|[114|[111|[109|[32|[126|[119|[58|[115|[117|[105|[116|[101|[47|[48|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 312
																																													    [Suite|[SuiteInfo|[]]])
				in  do  %% Line 313
					call 'io':'format'
					    (ErrStr, [])
					do  %% Line 314
					    call 'io':'format'
						('user', ErrStr, [])
					    %% Line 315
					    {'suite0_failed','bad_return_value'}
			    ( <_cor28> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor28})
			      -| ['compiler_generated'] )
			  end
		  %% Line 317
		  <SuiteInfo> when 'true' ->
		      let <ErrStr> =
			  %% Line 318
			  call 'io_lib':'format'
			      ([126|[110|[42|[42|[42|[32|[69|[82|[82|[79|[82|[32|[42|[42|[42|[32|[73|[110|[118|[97|[108|[105|[100|[32|[114|[101|[116|[117|[114|[110|[32|[118|[97|[108|[117|[101|[32|[102|[114|[111|[109|[32|[126|[119|[58|[115|[117|[105|[116|[101|[47|[48|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 320
																																												  [Suite|[SuiteInfo|[]]])
		      in  do  %% Line 321
			      call 'io':'format'
				  (ErrStr, [])
			      do  %% Line 322
				  call 'io':'format'
				      ('user', ErrStr, [])
				  %% Line 323
				  {'suite0_failed','bad_return_value'}
		end
'add_defaults1'/4 =
    %% Line 326
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Suite> =
	    %% Line 327
	    apply 'get_suite_name'/2
		(_cor3, _cor1)
	in  let <_cor10> =
		%% Line 331
		( fun (_cor8) ->
		      %% Line 332
		      case call 'proplists':'get_value'
			       ('name', _cor8) of
			%% Line 333
			<'undefined'> when 'true' ->
			    %% Line 334
			    []
			%% Line 335
			<Name> when 'true' ->
			    let <_cor5> =
				catch
				    %% Line 336
				    call Suite:'group'
					(Name)
			    in  %% Line 336
				case _cor5 of
				  %% Line 337
				  <GrInfo>
				      when call 'erlang':'is_list'
					    (_cor5) ->
				      GrInfo
				  %% Line 338
				  <{'EXIT',{'undef',_cor43}}> when 'true' ->
				      []
				  %% Line 339
				  <BadGr0> when 'true' ->
				      {'error',BadGr0,Name}
				end
		      end
		  -| [{'id',{0,0,'-add_defaults1/4-fun-0-'}}] )
	    in  let <GroupPathInfo> =
		    %% Line 331
		    call 'lists':'map'
			(_cor10, _cor1)
		in  %% Line 343
		    case call 'lists':'keysearch'
			     ('error', 1, GroupPathInfo) of
		      %% Line 344
		      <{'value',{'error',BadGr0Val,GrName}}> when 'true' ->
			  let <Gr0ErrStr> =
			      %% Line 345
			      call 'io_lib':'format'
				  ([126|[110|[42|[42|[42|[32|[69|[82|[82|[79|[82|[32|[42|[42|[42|[32|[73|[110|[118|[97|[108|[105|[100|[32|[114|[101|[116|[117|[114|[110|[32|[118|[97|[108|[117|[101|[32|[102|[114|[111|[109|[32|[126|[119|[58|[103|[114|[111|[117|[112|[40|[126|[119|[41|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 348
																																														  [_cor3|[GrName|[BadGr0Val|[]]]])
			  in  do  %% Line 349
				  call 'io':'format'
				      (Gr0ErrStr, [])
				  do  %% Line 350
				      call 'io':'format'
					  ('user', Gr0ErrStr, [])
				      %% Line 351
				      {'group0_failed','bad_return_value'}
		      %% Line 352
		      <_cor44> when 'true' ->
			  let <_cor17> =
			      %% Line 353
			      case <> of
				<>
				    when let <_cor13> =
					  call 'erlang':'=:='
					      (_cor2, 'init_per_group')
				      in  let <_cor14> =
					      call 'erlang':'=:='
						  (_cor2, 'end_per_group')
					  in  call 'erlang':'or'
						  (_cor13, _cor14) ->
				    let <_cor15> =
					%% Line 354
					call 'erlang':'hd'
					    (_cor1)
				    in  let <_cor16> =
					    %% Line 354
					    call 'proplists':'get_value'
						('name', _cor15)
					in  %% Line 354
					    [_cor16|[]]
				%% Line 355
				<> when 'true' ->
				    %% Line 356
				    []
			      end
			  in  let <_cor19> =
				  catch
				      %% Line 359
				      call 'erlang':'apply'
					  (_cor3, _cor2, _cor17)
			      in  let <_cor21> =
				      %% Line 359
				      case _cor19 of
					%% Line 360
					<TCInfo>
					    when call 'erlang':'is_list'
						  (_cor19) ->
					    TCInfo
					%% Line 361
					<{'EXIT',{'undef',_cor45}}> when 'true' ->
					    []
					%% Line 362
					<BadTC0> when 'true' ->
					    {'error',BadTC0}
				      end
				  in  %% Line 365
				      case _cor21 of
					%% Line 366
					<{'error',BadTC0Val}> when 'true' ->
					    let <TC0ErrStr> =
						%% Line 367
						call 'io_lib':'format'
						    ([126|[110|[42|[42|[42|[32|[69|[82|[82|[79|[82|[32|[42|[42|[42|[32|[73|[110|[118|[97|[108|[105|[100|[32|[114|[101|[116|[117|[114|[110|[32|[118|[97|[108|[117|[101|[32|[102|[114|[111|[109|[32|[126|[119|[58|[126|[119|[47|[48|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 370
																																												      [_cor3|[_cor2|[BadTC0Val|[]]]])
					    in  do  %% Line 371
						    call 'io':'format'
							(TC0ErrStr, [])
						    do  %% Line 372
							call 'io':'format'
							    ('user', TC0ErrStr, [])
							%% Line 373
							{'testcase0_failed','bad_return_value'}
					%% Line 374
					<_cor46> when 'true' ->
					    let <_cor24> =
						%% Line 379
						apply 'remove_info_in_prev'/2
						    (_cor21, %% Line 380
							     GroupPathInfo)
					    in  let <TCAndGroupInfo> =
						    %% Line 379
						    [_cor21|_cor24]
						in  let <_cor34> =
							%% Line 383
							( letrec
							      'lc$^0'/1 =
								  fun (_cor32) ->
								      case _cor32 of
									<[SDDef|_cor27]>
									    when %% Line 385
									      try
										  let <_cor28> =
										      call 'erlang':'element'
											  (1, SDDef)
										  in  let <_cor29> =
											  call 'erlang':'=:='
											      ('require', _cor28)
										      in  let <_cor30> =
											      call 'erlang':'element'
												  (1, SDDef)
											  in  let <_cor31> =
												  call 'erlang':'=:='
												      ('default_config', _cor30)
											      in  call 'erlang':'or'
												      (_cor29, _cor31)
									      of <Try> ->
										  Try
									      catch <T,R> ->
										  'false' ->
									    let <_cor33> =
										apply 'lc$^0'/1
										    (_cor27)
									    in  ( [SDDef|_cor33]
										  -| ['compiler_generated'] )
									( <[SDDef|_cor27]> when 'true' ->
									      apply 'lc$^0'/1
										  (_cor27)
									  -| ['compiler_generated'] )
									<[]> when 'true' ->
									    []
									( <_cor32> when 'true' ->
									      ( primop 'match_fail'
										    ({'function_clause',_cor32})
										-| [{'function_name',{'lc$^0',1}}] )
									  -| ['compiler_generated'] )
								      end
							  in  apply 'lc$^0'/1
								  (_cor0)
							  -| ['list_comprehension'] )
						    in  %% Line 386
							case apply 'check_for_clashes'/3
								 (_cor21, GroupPathInfo, _cor34) of
							  %% Line 388
							  <[]> when 'true' ->
							      %% Line 389
							      apply 'add_defaults2'/5
								  (_cor3, _cor2, TCAndGroupInfo, _cor0, _cor34)
							  %% Line 391
							  <Clashes> when 'true' ->
							      %% Line 392
							      {'error',{'config_name_already_in_use',Clashes}}
							end
				      end
		    end
'get_suite_name'/2 =
    %% Line 397
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'ct_framework',[Cfg|_cor11]>
	      when let <_cor2> =
		    call 'erlang':'is_list'
			(Cfg)
		in  let <_cor3> =
			call 'erlang':'=/='
			    (Cfg, [])
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 398
	      apply 'get_suite_name'/2
		  ('ct_framework', Cfg)
	  %% Line 400
	  <'ct_framework',Cfg>
	      when let <_cor4> =
		    call 'erlang':'is_list'
			(Cfg)
		in  let <_cor5> =
			call 'erlang':'=/='
			    (Cfg, [])
		    in  call 'erlang':'and'
			    (_cor4, _cor5) ->
	      %% Line 401
	      case call 'proplists':'get_value'
		       ('tc_group_properties', Cfg) of
		%% Line 402
		<'undefined'> when 'true' ->
		    %% Line 403
		    case call 'proplists':'get_value'
			     ('suite', Cfg) of
		      %% Line 404
		      <'undefined'> when 'true' ->
			  'ct_framework'
		      %% Line 405
		      <Suite> when 'true' ->
			  Suite
		    end
		%% Line 407
		<GrProps> when 'true' ->
		    %% Line 408
		    case call 'proplists':'get_value'
			     ('suite', GrProps) of
		      %% Line 409
		      <'undefined'> when 'true' ->
			  'ct_framework'
		      %% Line 410
		      <Suite> when 'true' ->
			  Suite
		    end
	      end
	  %% Line 413
	  <Mod,_cor12> when 'true' ->
	      %% Line 414
	      Mod
	end
'check_for_clashes'/3 =
    %% Line 417
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <TCInfo,[CurrGrInfo|Path],SuiteInfo> when 'true' ->
	      let <ReqNames> =
		  %% Line 418
		  ( fun (_cor12) ->
			( letrec
			      'lc$^0'/1 =
				  fun (_cor9) ->
				      case _cor9 of
					<[R|_cor4]>
					    when %% Line 419
					      try
						  let <_cor5> =
						      call 'erlang':'size'
							  (R)
						  in  let <_cor6> =
							  call 'erlang':'=='
							      (_cor5, 3)
						      in  let <_cor7> =
							      %% Line 420
							      call 'erlang':'element'
								  (1, R)
							  in  let <_cor8> =
								  %% Line 420
								  call 'erlang':'=:='
								      ('require', _cor7)
							      in  call 'erlang':'and'
								      (_cor6, _cor8)
					      of <Try> ->
						  Try
					      catch <T,R> ->
						  'false' ->
					    let <_cor10> =
						call 'erlang':'element'
						    (2, R)
					    in  let <_cor11> =
						    apply 'lc$^0'/1
							(_cor4)
						in  ( [_cor10|_cor11]
						      -| ['compiler_generated'] )
					( <[R|_cor4]> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor4)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor9> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor9})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (_cor12)
			  -| ['list_comprehension'] )
		    -| [{'id',{0,0,'-check_for_clashes/3-fun-0-'}}] )
	      in  let <_cor20> =
		      %% Line 422
		      ( letrec
			    'lc$^1'/1 =
				fun (_cor17) ->
				    case _cor17 of
				      <[L|_cor16]> when 'true' ->
					  let <_cor18> =
					      apply ReqNames
						  (L)
					  in  let <_cor19> =
						  apply 'lc$^1'/1
						      (_cor16)
					      in  ( [_cor18|_cor19]
						    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor17> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor17})
					      -| [{'function_name',{'lc$^1',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^1'/1
				([SuiteInfo|Path])
			-| ['list_comprehension'] )
		  in  let <ExistingNames> =
			  %% Line 422
			  call 'lists':'flatten'
			      (_cor20)
		      in  let <CurrGrReqNs> =
			      %% Line 423
			      apply ReqNames
				  (CurrGrInfo)
			  in  let <_cor29> =
				  %% Line 424
				  ( letrec
					'lc$^2'/1 =
					    fun (_cor26) ->
						case _cor26 of
						  <[Name|_cor24]> when 'true' ->
						      let <_cor25> =
							  %% Line 425
							  call 'lists':'member'
							      (Name, ExistingNames)
						      in  %% Line 425
							  ( case <> of
							      <>
								  when call 'erlang':'=:='
									('true',
									 _cor25) ->
								  let <_cor27> =
								      apply 'lc$^2'/1
									  (_cor24)
								  in  ( [Name|_cor27]
									-| ['compiler_generated'] )
							      ( <> when 'true' ->
								    apply 'lc$^2'/1
									(_cor24)
								-| ['compiler_generated'] )
							    end
							    -| ['list_comprehension'] )
						  <[]> when 'true' ->
						      []
						  ( <_cor26> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor26})
							  -| [{'function_name',{'lc$^2',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  apply 'lc$^2'/1
					    (CurrGrReqNs)
				    -| ['list_comprehension'] )
			      in  let <AllReqNs> =
				      %% Line 426
				      call 'erlang':'++'
					  (CurrGrReqNs, ExistingNames)
				  in  let <_cor39> =
					  %% Line 427
					  ( letrec
						'lc$^3'/1 =
						    fun (_cor36) ->
							case _cor36 of
							  <[Name|_cor33]> when 'true' ->
							      let <_cor35> =
								  %% Line 428
								  call 'lists':'member'
								      (Name, AllReqNs)
							      in  %% Line 428
								  ( case <> of
								      <>
									  when call 'erlang':'=:='
										('true',
										 _cor35) ->
									  let <_cor37> =
									      apply 'lc$^3'/1
										  (_cor33)
									  in  ( [Name|_cor37]
										-| ['compiler_generated'] )
								      ( <> when 'true' ->
									    apply 'lc$^3'/1
										(_cor33)
									-| ['compiler_generated'] )
								    end
								    -| ['list_comprehension'] )
							  <[]> when 'true' ->
							      []
							  ( <_cor36> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor36})
								  -| [{'function_name',{'lc$^3',1}}] )
							    -| ['compiler_generated'] )
							end
					    in  let <_cor34> =
						    apply ReqNames
							(TCInfo)
						in  apply 'lc$^3'/1
							(_cor34)
					    -| ['list_comprehension'] )
				      in  %% Line 429
					  call 'erlang':'++'
					      (_cor39, _cor29)
	  ( <_cor43,_cor42,_cor41> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor43,_cor42,_cor41})
		  -| [{'function_name',{'check_for_clashes',3}}] )
	    -| ['compiler_generated'] )
	end
'remove_info_in_prev'/2 =
    %% Line 432
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Terms,[[]|Rest]> when 'true' ->
	      let <_cor2> =
		  %% Line 433
		  apply 'remove_info_in_prev'/2
		      (Terms, Rest)
	      in  %% Line 433
		  [[]|_cor2]
	  %% Line 434
	  <Terms,[Info|Rest]> when 'true' ->
	      let <_cor25> =
		  %% Line 435
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor22) ->
				case _cor22 of
				  <[U|_cor4]> when 'true' ->
				      let <_cor18> =
					  %% Line 436
					  call 'erlang':'element'
					      (1, U)
				      in  let <_cor19> =
					      %% Line 436
					      call 'erlang':'=:='
						  ('timetrap', _cor18)
					  in  let <_cor16> =
						  %% Line 437
						  call 'lists':'keymember'
						      ('timetrap', 1, Terms)
					      in  let <_cor17> =
						      %% Line 437
						      call 'erlang':'not'
							  (_cor16)
						  in  let <_cor20> =
							  %% Line 436
							  call 'erlang':'and'
							      (_cor19, _cor17)
						      in  let <_cor13> =
							      %% Line 438
							      call 'erlang':'element'
								  (1, U)
							  in  let <_cor14> =
								  %% Line 438
								  call 'erlang':'=:='
								      ('require', _cor13)
							      in  let <_cor11> =
								      %% Line 439
								      call 'lists':'member'
									  (U, Terms)
								  in  let <_cor12> =
									  %% Line 439
									  call 'erlang':'not'
									      (_cor11)
								      in  let <_cor15> =
									      %% Line 438
									      call 'erlang':'and'
										  (_cor14, _cor12)
									  in  let <_cor21> =
										  %% Line 437
										  call 'erlang':'or'
										      (_cor20, _cor15)
									      in  let <_cor8> =
										      %% Line 440
										      call 'erlang':'element'
											  (1, U)
										  in  let <_cor9> =
											  %% Line 440
											  call 'erlang':'=:='
											      ('default_config', _cor8)
										      in  let <_cor5> =
											      %% Line 442
											      call 'erlang':'element'
												  (2, U)
											  in  let <_cor6> =
												  %% Line 441
												  apply 'keysmember'/2
												      (['default_config'|[1|%% Line 442
															    [_cor5|[2]]]], %% Line 442
																	   Terms)
											      in  let <_cor7> =
												      %% Line 441
												      call 'erlang':'not'
													  (_cor6)
												  in  let <_cor10> =
													  %% Line 440
													  call 'erlang':'and'
													      (_cor9, _cor7)
												      in  %% Line 439
													  ( case call 'erlang':'or'
														     (_cor21, _cor10) of
													      <'true'> when 'true' ->
														  let <_cor23> =
														      apply 'lc$^0'/1
															  (_cor4)
														  in  ( [U|_cor23]
															-| ['compiler_generated'] )
													      ( <'false'> when 'true' ->
														    apply 'lc$^0'/1
															(_cor4)
														-| ['compiler_generated'] )
													    end
													    -| ['list_comprehension'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor22> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor22})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Info)
		    -| ['list_comprehension'] )
	      in  let <_cor41> =
		      %% Line 443
		      ( letrec
			    'lc$^1'/1 =
				fun (_cor38) ->
				    case _cor38 of
				      <[T|_cor28]>
					  when %% Line 444
					    try
						let <_cor29> =
						    call 'erlang':'element'
							(1, T)
						in  let <_cor30> =
							call 'erlang':'=/='
							    ('timetrap', _cor29)
						    in  let <_cor31> =
							    %% Line 445
							    call 'erlang':'element'
								(1, T)
							in  let <_cor32> =
								%% Line 445
								call 'erlang':'=/='
								    ('require', _cor31)
							    in  let <_cor33> =
								    %% Line 446
								    call 'erlang':'element'
									(1, T)
								in  let <_cor34> =
									%% Line 446
									call 'erlang':'=/='
									    ('default_config', _cor33)
								    in  let <_cor35> =
									    call 'erlang':'and'
										(_cor32, _cor34)
									in  call 'erlang':'and'
										(_cor30, _cor35)
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false' ->
					  let <_cor36> =
					      %% Line 447
					      call 'erlang':'element'
						  (1, T)
					  in  let <_cor37> =
						  %% Line 447
						  call 'lists':'keymember'
						      (_cor36, 1, %% Line 448
								  Terms)
					      in  %% Line 447
						  ( case <> of
						      <>
							  when call 'erlang':'=:='
								('false',
								 _cor37) ->
							  let <_cor39> =
							      apply 'lc$^1'/1
								  (_cor28)
							  in  ( [T|_cor39]
								-| ['compiler_generated'] )
						      ( <> when 'true' ->
							    apply 'lc$^1'/1
								(_cor28)
							-| ['compiler_generated'] )
						    end
						    -| ['list_comprehension'] )
				      ( <[T|_cor28]> when 'true' ->
					    apply 'lc$^1'/1
						(_cor28)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor38> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor38})
					      -| [{'function_name',{'lc$^1',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^1'/1
				(Info)
			-| ['list_comprehension'] )
		  in  let <KeptInfo> =
			  %% Line 449
			  call 'erlang':'++'
			      (_cor25, _cor41)
		      in  let <_cor44> =
			      %% Line 450
			      call 'erlang':'++'
				  (Terms, KeptInfo)
			  in  let <_cor45> =
				  %% Line 450
				  apply 'remove_info_in_prev'/2
				      (_cor44, Rest)
			      in  %% Line 450
				  [KeptInfo|_cor45]
	  %% Line 451
	  <_cor48,[]> when 'true' ->
	      %% Line 452
	      []
	  ( <_cor47,_cor46> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor47,_cor46})
		  -| [{'function_name',{'remove_info_in_prev',2}}] )
	    -| ['compiler_generated'] )
	end
'keysmember'/2 =
    %% Line 454
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Key|[Pos|Next]],List> when 'true' ->
	      let <_cor7> =
		  %% Line 455
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor5) ->
				case _cor5 of
				  <[Elem|_cor3]>
				      when try
					    let <_cor4> =
						call 'erlang':'element'
						    (Pos, Elem)
					    in  call 'erlang':'=='
						    (Key, _cor4)
					of <Try> ->
					    Try
					catch <T,R> ->
					    'false' ->
				      let <_cor6> =
					  apply 'lc$^0'/1
					      (_cor3)
				      in  ( [Elem|_cor6]
					    -| ['compiler_generated'] )
				  ( <[Elem|_cor3]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor3)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor5> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor5})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (List)
		    -| ['list_comprehension'] )
	      in  %% Line 455
		  case _cor7 of
		    %% Line 456
		    <[]> when 'true' ->
			'false'
		    %% Line 457
		    <Found> when 'true' ->
			apply 'keysmember'/2
			    (Next, Found)
		  end
	  %% Line 459
	  <[],_cor11> when 'true' ->
	      'true'
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'keysmember',2}}] )
	    -| ['compiler_generated'] )
	end
'add_defaults2'/5 =
    %% Line 462
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Mod,'init_per_suite',IPSInfo,SuiteInfo,SuiteReqs> when 'true' ->
	      let <Info> =
		  %% Line 463
		  call 'lists':'flatten'
		      ([IPSInfo|[SuiteReqs|[]]])
	      in  let <_cor6> =
		      %% Line 464
		      apply 'remove_info_in_prev'/2
			  (Info, [SuiteInfo|[]])
		  in  %% Line 464
		      call 'lists':'flatten'
			  ([Info|[_cor6|[]]])
	  %% Line 466
	  <_X_Mod,'init_per_group',IPGAndGroupInfo,SuiteInfo,SuiteReqs> when 'true' ->
	      let <_cor7> =
		  %% Line 468
		  call 'lists':'flatten'
		      ([IPGAndGroupInfo|%% Line 469
					[SuiteReqs|[]]])
	      in  let <SuiteInfo1> =
		      %% Line 468
		      apply 'remove_info_in_prev'/2
			  (_cor7, %% Line 469
				  [SuiteInfo|[]])
		  in  %% Line 471
		      case IPGAndGroupInfo of
			%% Line 472
			<[IPGInfo|[]]> when 'true' ->
			    %% Line 473
			    call 'lists':'flatten'
				([IPGInfo|[SuiteInfo1|[]]])
			%% Line 474
			<[IPGInfo|[CurrGroupInfo|PrevGroupInfo]]> when 'true' ->
			    let <PrevGroupInfo1> =
				%% Line 475
				apply 'delete_require_terms'/1
				    (PrevGroupInfo)
			    in  %% Line 476
				call 'lists':'flatten'
				    ([IPGInfo|[CurrGroupInfo|[PrevGroupInfo1|%% Line 477
									     [SuiteInfo1|[]]]]])
			( <_cor10> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor10})
			  -| ['compiler_generated'] )
		      end
	  %% Line 480
	  <_X_Mod,_X_Func,TCAndGroupInfo,SuiteInfo,SuiteReqs> when 'true' ->
	      let <_cor11> =
		  %% Line 485
		  call 'lists':'flatten'
		      ([TCAndGroupInfo|%% Line 486
				       [SuiteReqs|[]]])
	      in  let <SuiteInfo1> =
		      %% Line 485
		      apply 'remove_info_in_prev'/2
			  (_cor11, %% Line 486
				   [SuiteInfo|[]])
		  in  %% Line 488
		      case TCAndGroupInfo of
			%% Line 489
			<[TCInfo|[]]> when 'true' ->
			    %% Line 490
			    call 'lists':'flatten'
				([TCInfo|[SuiteInfo1|[]]])
			%% Line 491
			<[TCInfo|[CurrGroupInfo|PrevGroupInfo]]> when 'true' ->
			    let <PrevGroupInfo1> =
				%% Line 492
				apply 'delete_require_terms'/1
				    (PrevGroupInfo)
			    in  %% Line 493
				call 'lists':'flatten'
				    ([TCInfo|[CurrGroupInfo|[PrevGroupInfo1|%% Line 494
									    [SuiteInfo1|[]]]]])
			( <_cor14> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor14})
			  -| ['compiler_generated'] )
		      end
	end
'delete_require_terms'/1 =
    %% Line 497
    fun (_cor0) ->
	case _cor0 of
	  <[Info|Prev]> when 'true' ->
	      let <_cor9> =
		  %% Line 498
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor7) ->
				case _cor7 of
				  <[T|_cor2]>
				      when %% Line 499
					try
					    let <_cor3> =
						call 'erlang':'element'
						    (1, T)
					    in  let <_cor4> =
						    call 'erlang':'=/='
							('require', _cor3)
						in  let <_cor5> =
							%% Line 500
							call 'erlang':'element'
							    (1, T)
						    in  let <_cor6> =
							    %% Line 500
							    call 'erlang':'=/='
								('default_config', _cor5)
							in  call 'erlang':'and'
								(_cor4, _cor6)
					of <Try> ->
					    Try
					catch <T,R> ->
					    'false' ->
				      let <_cor8> =
					  apply 'lc$^0'/1
					      (_cor2)
				      in  ( [T|_cor8]
					    -| ['compiler_generated'] )
				  ( <[T|_cor2]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor2)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor7> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor7})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Info)
		    -| ['list_comprehension'] )
	      in  let <_cor11> =
		      %% Line 501
		      apply 'delete_require_terms'/1
			  (Prev)
		  in  %% Line 501
		      [_cor9|_cor11]
	  %% Line 502
	  <[]> when 'true' ->
	      %% Line 503
	      []
	  ( <_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12})
		  -| [{'function_name',{'delete_require_terms',1}}] )
	    -| ['compiler_generated'] )
	end
'merge_with_suite_defaults'/2 =
    %% Line 505
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 506
	    call _cor1:'module_info'
		('attributes')
	in  %% Line 506
	    case call 'lists':'keysearch'
		     ('suite_defaults', 1, _cor2) of
	      %% Line 507
	      <{'value',{'suite_defaults',Defaults}}> when 'true' ->
		  let <_cor11> =
		      %% Line 509
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor8) ->
				    case _cor8 of
				      <[SDDef|_cor4]>
					  when %% Line 510
					    try
						let <_cor5> =
						    call 'erlang':'element'
							(1, SDDef)
						in  call 'erlang':'=:='
							('require', _cor5)
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false' ->
					  let <_cor6> =
					      %% Line 511
					      call 'erlang':'element'
						  (2, SDDef)
					  in  let <_cor7> =
						  %% Line 511
						  call 'lists':'keymember'
						      (_cor6, 2, _cor0)
					      in  %% Line 511
						  ( case <> of
						      <>
							  when call 'erlang':'=:='
								('false',
								 _cor7) ->
							  let <_cor9> =
							      apply 'lc$^0'/1
								  (_cor4)
							  in  ( [SDDef|_cor9]
								-| ['compiler_generated'] )
						      ( <> when 'true' ->
							    apply 'lc$^0'/1
								(_cor4)
							-| ['compiler_generated'] )
						    end
						    -| ['list_comprehension'] )
				      ( <[SDDef|_cor4]> when 'true' ->
					    apply 'lc$^0'/1
						(_cor4)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor8> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor8})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(Defaults)
			-| ['list_comprehension'] )
		  in  let <_cor21> =
			  %% Line 514
			  ( letrec
				'lc$^1'/1 =
				    fun (_cor18) ->
					case _cor18 of
					  <[SDDef|_cor14]>
					      when %% Line 515
						try
						    let <_cor15> =
							call 'erlang':'element'
							    (1, SDDef)
						    in  call 'erlang':'=/='
							    ('require', _cor15)
						of <Try> ->
						    Try
						catch <T,R> ->
						    'false' ->
					      let <_cor16> =
						  %% Line 516
						  call 'erlang':'element'
						      (1, SDDef)
					      in  let <_cor17> =
						      %% Line 516
						      call 'lists':'keymember'
							  (_cor16, 1, _cor0)
						  in  %% Line 516
						      ( case <> of
							  <>
							      when call 'erlang':'=:='
								    ('false',
								     _cor17) ->
							      let <_cor19> =
								  apply 'lc$^1'/1
								      (_cor14)
							      in  ( [SDDef|_cor19]
								    -| ['compiler_generated'] )
							  ( <> when 'true' ->
								apply 'lc$^1'/1
								    (_cor14)
							    -| ['compiler_generated'] )
							end
							-| ['list_comprehension'] )
					  ( <[SDDef|_cor14]> when 'true' ->
						apply 'lc$^1'/1
						    (_cor14)
					    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor18> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor18})
						  -| [{'function_name',{'lc$^1',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^1'/1
				    (Defaults)
			    -| ['list_comprehension'] )
		      in  let <_cor22> =
			      %% Line 513
			      call 'erlang':'++'
				  (_cor11, _cor21)
			  in  %% Line 513
			      call 'erlang':'++'
				  (_cor0, _cor22)
	      %% Line 518
	      <'false'> when 'true' ->
		  _cor0
	      ( <_cor23> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor23})
		-| ['compiler_generated'] )
	    end
'timetrap_first'/3 =
    %% Line 522
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Trap = {'timetrap',_cor9}|Rest],Info,Found> when 'true' ->
	      %% Line 523
	      apply 'timetrap_first'/3
		  (Rest, Info, [Trap|Found])
	  %% Line 524
	  <[Other|Rest],Info,Found> when 'true' ->
	      %% Line 525
	      apply 'timetrap_first'/3
		  (Rest, [Other|Info], Found)
	  %% Line 526
	  <[],Info,[]> when 'true' ->
	      let <_cor3> =
		  %% Line 527
		  call 'lists':'reverse'
		      (Info)
	      in  %% Line 527
		  [{'timetrap',{'minutes',30}}|_cor3]
	  %% Line 528
	  <[],Info,Found> when 'true' ->
	      let <_cor5> =
		  %% Line 529
		  call 'lists':'reverse'
		      (Found)
	      in  let <_cor4> =
		      %% Line 529
		      call 'lists':'reverse'
			  (Info)
		  in  %% Line 529
		      call 'erlang':'++'
			  (_cor5, _cor4)
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'timetrap_first',3}}] )
	    -| ['compiler_generated'] )
	end
'configure'/6 =
    %% Line 531
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{'require',Required}|Rest],%% Line 532
				       Info,%% Line 532
					    SuiteInfo,%% Line 532
						      Scope,%% Line 532
							    PostInitHook,%% Line 532
									 Config> when 'true' ->
	      %% Line 533
	      case call 'ct':'require'
		       (Required) of
		%% Line 534
		<'ok'> when 'true' ->
		    %% Line 535
		    apply 'configure'/6
			(Rest, Info, SuiteInfo, Scope, PostInitHook, Config)
		%% Line 536
		<Error = {'error',Reason}> when 'true' ->
		    %% Line 537
		    case apply 'required_default'/5
			     ('_UNDEF', Required, Info, %% Line 538
							SuiteInfo, %% Line 538
								   Scope) of
		      %% Line 539
		      <'ok'> when 'true' ->
			  %% Line 540
			  apply 'configure'/6
			      (Rest, Info, SuiteInfo, Scope, PostInitHook, Config)
		      %% Line 541
		      <_cor21> when 'true' ->
			  %% Line 542
			  case call 'lists':'keymember'
				   (Required, 2, SuiteInfo) of
			    %% Line 543
			    <'true'> when 'true' ->
				%% Line 544
				{'suite0_failed',Reason}
			    %% Line 545
			    <'false'> when 'true' ->
				%% Line 546
				Error
			    ( <_cor6> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor6})
			      -| ['compiler_generated'] )
			  end
		    end
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 550
	  <[{'require',Name,Required}|Rest],%% Line 551
					    Info,%% Line 551
						 SuiteInfo,%% Line 551
							   Scope,%% Line 551
								 PostInitHook,%% Line 551
									      Config> when 'true' ->
	      %% Line 552
	      case call 'ct':'require'
		       (Name, Required) of
		%% Line 553
		<'ok'> when 'true' ->
		    %% Line 554
		    apply 'configure'/6
			(Rest, Info, SuiteInfo, Scope, PostInitHook, Config)
		%% Line 555
		<Error = {'error',Reason}> when 'true' ->
		    %% Line 556
		    case apply 'required_default'/5
			     (Name, Required, Info, SuiteInfo, Scope) of
		      %% Line 557
		      <'ok'> when 'true' ->
			  %% Line 558
			  apply 'configure'/6
			      (Rest, Info, SuiteInfo, Scope, PostInitHook, Config)
		      %% Line 559
		      <_cor22> when 'true' ->
			  %% Line 560
			  case call 'lists':'keymember'
				   (Name, 2, SuiteInfo) of
			    %% Line 561
			    <'true'> when 'true' ->
				%% Line 562
				{'suite0_failed',Reason}
			    %% Line 563
			    <'false'> when 'true' ->
				%% Line 564
				Error
			    ( <_cor9> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor9})
			      -| ['compiler_generated'] )
			  end
		    end
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor11})
		  -| ['compiler_generated'] )
	      end
	  %% Line 568
	  <[{'timetrap','off'}|Rest],Info,SuiteInfo,Scope,PostInitHook,Config> when 'true' ->
	      %% Line 569
	      apply 'configure'/6
		  (Rest, Info, SuiteInfo, Scope, PostInitHook, Config)
	  %% Line 570
	  <[{'timetrap',Time}|Rest],Info,SuiteInfo,Scope,PostInitHook,Config> when 'true' ->
	      let <_cor13> =
		  %% Line 572
		  ( fun () ->
			case call 'test_server':'get_timetrap_info'
				 () of
			  %% Line 573
			  <'undefined'> when 'true' ->
			      %% Line 574
			      call 'test_server':'timetrap'
				  (Time)
			  %% Line 575
			  <_cor23> when 'true' ->
			      %% Line 576
			      {'error','already_set'}
			end
		    -| [{'id',{0,0,'-configure/6-fun-0-'}}] )
	      in  let <PostInitHook1> =
		      %% Line 572
		      [{'watchdog',_cor13}|%% Line 578
					   PostInitHook]
		  in  %% Line 579
		      apply 'configure'/6
			  (Rest, Info, SuiteInfo, Scope, PostInitHook1, Config)
	  %% Line 580
	  <[{'ct_hooks',Hook}|Rest],Info,SuiteInfo,Scope,PostInitHook,Config> when 'true' ->
	      %% Line 581
	      apply 'configure'/6
		  (Rest, Info, SuiteInfo, Scope, PostInitHook, [{'ct_hooks',Hook}|Config])
	  %% Line 582
	  <[_cor24|Rest],Info,SuiteInfo,Scope,PostInitHook,Config> when 'true' ->
	      %% Line 583
	      apply 'configure'/6
		  (Rest, Info, SuiteInfo, Scope, PostInitHook, Config)
	  %% Line 584
	  <[],_cor25,_cor26,_cor27,PostInitHook,Config> when 'true' ->
	      %% Line 585
	      {'ok',PostInitHook,Config}
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'configure',6}}] )
	    -| ['compiler_generated'] )
	end
'required_default'/5 =
    %% Line 592
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Name,Key,Info,_cor10,'init_per_suite'> when 'true' ->
	      %% Line 593
	      apply 'try_set_default'/4
		  (Name, Key, Info, 'suite')
	  %% Line 594
	  <Name,Key,Info,_cor11,{'init_per_group',GrName,_cor12}> when 'true' ->
	      %% Line 595
	      apply 'try_set_default'/4
		  (Name, Key, Info, {'group',GrName})
	  %% Line 596
	  <Name,Key,Info,_cor13,_X_FuncSpec> when 'true' ->
	      %% Line 597
	      apply 'try_set_default'/4
		  (Name, Key, Info, 'testcase')
	end
'try_set_default'/4 =
    %% Line 599
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor16> =
	    %% Line 601
	    case call 'lists':'keysearch'
		     (_cor3, 1, _cor1) of
	      %% Line 602
	      <{'value',{_cor33,Val}}>
		  when call 'erlang':'=:='
			(_cor33,
			 _cor3) ->
		  %% Line 603
		  [Val|[]]
	      %% Line 604
	      <'false'> when 'true' ->
		  let <_cor13> =
		      catch
			  %% Line 605
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor10) ->
					case _cor10 of
					  <[Elem|_cor5]>
					      when %% Line 606
						try
						    let <_cor6> =
							call 'erlang':'element'
							    (1, Elem)
						    in  let <_cor7> =
							    call 'erlang':'=:='
								(_cor6, 'default_config')
							in  let <_cor8> =
								%% Line 607
								call 'erlang':'element'
								    (2, Elem)
							    in  let <_cor9> =
								    %% Line 607
								    call 'erlang':'=='
									(_cor8, _cor2)
								in  call 'erlang':'and'
									(_cor7, _cor9)
						of <Try> ->
						    Try
						catch <T,R> ->
						    'false' ->
					      let <_cor11> =
						  call 'erlang':'element'
						      (3, Elem)
					      in  let <_cor12> =
						      apply 'lc$^0'/1
							  (_cor5)
						  in  ( [{_cor2,_cor11}|_cor12]
							-| ['compiler_generated'] )
					  ( <[Elem|_cor5]> when 'true' ->
						apply 'lc$^0'/1
						    (_cor5)
					    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor10> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor10})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (_cor1)
			    -| ['list_comprehension'] )
		  in  %% Line 605
		      case _cor13 of
			%% Line 608
			<{'EXIT',_cor34}> when 'true' ->
			    []
			%% Line 609
			<Result> when 'true' ->
			    Result
		      end
	      ( <_cor15> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor15})
		-| ['compiler_generated'] )
	    end
	in  %% Line 612
	    case <_cor3,_cor16> of
	      %% Line 613
	      <_cor35,[]> when 'true' ->
		  %% Line 614
		  'no_default'
	      %% Line 615
	      <'_UNDEF',_cor36> when 'true' ->
		  do  %% Line 616
		      ( letrec
			    'lc$^1'/1 =
				fun (_cor20) ->
				    case _cor20 of
				      <[CfgVal|_cor19]> when 'true' ->
					  do  call 'ct_config':'set_default_config'
						  ([CfgVal|[]], _cor0)
					      apply 'lc$^1'/1
						  (_cor19)
				      <[]> when 'true' ->
					  []
				      ( <_cor20> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor20})
					      -| [{'function_name',{'lc$^1',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^1'/1
				(_cor16)
			-| ['list_comprehension'] )
		      %% Line 617
		      'ok'
	      %% Line 618
	      <_fol23,_fol24> when 'true' ->
		  do  %% Line 619
		      ( letrec
			    'lc$^2'/1 =
				fun (_cor25) ->
				    case _cor25 of
				      <[CfgVal|_cor24]> when 'true' ->
					  do  call 'ct_config':'set_default_config'
						  (_cor3, [CfgVal|[]], _cor0)
					      apply 'lc$^2'/1
						  (_cor24)
				      <[]> when 'true' ->
					  []
				      ( <_cor25> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor25})
					      -| [{'function_name',{'lc$^2',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^2'/1
				(_cor16)
			-| ['list_comprehension'] )
		      %% Line 620
		      'ok'
	    end
'end_tc'/3 =
    %% Line 635
    fun (_cor2,_cor1,_cor0) ->
	%% Line 637
	apply 'end_tc'/4
	    (_cor2, _cor1, _cor0, '$end_tc_dummy')
'end_tc'/4 =
    %% Line 638
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'ct_framework','error_in_suite',_cor9,_cor10> when 'true' ->
	      %% Line 639
	      'ok'
	  %% Line 640
	  <Mod,Func,{TCPid,Result,[Args|[]]},Return>
	      when call 'erlang':'is_pid'
		    (TCPid) ->
	      %% Line 641
	      apply 'end_tc'/6
		  (Mod, Func, TCPid, Result, Args, Return)
	  %% Line 642
	  <Mod,Func,{Result,[Args|[]]},Return> when 'true' ->
	      let <_cor4> =
		  %% Line 643
		  call 'erlang':'self'
		      ()
	      in  %% Line 643
		  apply 'end_tc'/6
		      (Mod, Func, _cor4, Result, Args, Return)
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'end_tc',4}}] )
	    -| ['compiler_generated'] )
	end
'end_tc'/6 =
    %% Line 645
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Suite> =
	    %% Line 647
	    apply 'get_suite_name'/2
		(_cor5, _cor1)
	in  do  %% Line 649
		call 'test_server':'timetrap_cancel'
		    ()
		do  %% Line 653
		    case call 'ct_util':'get_testdata'
			     ('interpret') of
		      %% Line 654
		      <{What,'kill',_cor41}> when 'true' ->
			  let <_cor7> =
			      %% Line 655
			      call 'erlang':'self'
				  ()
			  in  let <AttPid> =
				  %% Line 655
				  call 'ct_util':'get_attached'
				      (_cor7)
			      in  let <_cor9> =
				      %% Line 656
				      call 'erlang':'self'
					  ()
				  in  %% Line 656
				      call 'ct_util':'set_testdata'
					  ({'interpret',{What,'kill',{_cor9,AttPid}}})
		      %% Line 657
		      <_cor42> when 'true' ->
			  'ok'
		    end
		    do  %% Line 660
			case <> of
			  <>
			      when let <_cor11> =
				    call 'erlang':'=:='
					(_cor4, 'end_per_group')
				in  let <_cor12> =
					call 'erlang':'=:='
					    (_cor4, 'end_per_suite')
				    in  call 'erlang':'or'
					    (_cor11, _cor12) ->
			      %% Line 662
			      call 'ct_util':'match_delete_testdata'
				  ({'comment','_'})
			  %% Line 663
			  <> when 'true' ->
			      %% Line 665
			      case call 'erlang':'process_info'
				       (_cor3, 'group_leader') of
				%% Line 666
				<{'group_leader',TCGL}> when 'true' ->
				    %% Line 667
				    call 'ct_util':'delete_testdata'
					({'comment',TCGL})
				%% Line 668
				<_cor43> when 'true' ->
				    'ok'
			      end
			end
			do  %% Line 672
			    call 'ct_util':'delete_suite_data'
				('last_saved_config')
			    let <FuncSpec> =
				%% Line 674
				apply 'group_or_func'/2
				    (_cor4, _cor1)
			    in  let <Result1,FinalNotify> =
				    %% Line 677
				    case call 'ct_hooks':'end_tc'
					     (%% Line 678
					      Suite, %% Line 678
						     FuncSpec, _cor1, _cor2, _cor0) of
				      %% Line 679
				      <'$ct_no_change'> when 'true' ->
					  %% Line 680
					  <'ok',_cor2>
				      %% Line 681
				      <HookResult> when 'true' ->
					  %% Line 682
					  <HookResult,HookResult>
				    end
				in  let <_cor23> =
					%% Line 685
					case call 'erlang':'get'
						 ('$test_server_framework_test') of
					  %% Line 686
					  <'undefined'> when 'true' ->
					      let <_cor19> =
						  %% Line 690
						  call 'erlang':'node'
						      ()
					      in  let <_cor18> =
						      %% Line 692
						      apply 'tag_cth'/1
							  (FinalNotify)
						  in  do  %% Line 689
							  call 'ct_event':'sync_notify'
							      ({'event','tc_done',_cor19,%% Line 691
											 {_cor5,FuncSpec,_cor18}})
							  %% Line 693
							  Result1
					  %% Line 694
					  <Fun> when 'true' ->
					      let <_cor21> =
						  %% Line 698
						  call 'erlang':'node'
						      ()
					      in  let <_cor20> =
						      %% Line 700
						      apply 'tag'/1
							  (FinalNotify)
						  in  do  %% Line 697
							  call 'ct_event':'sync_notify'
							      ({'event','tc_done',_cor21,%% Line 699
											 {_cor5,FuncSpec,_cor20}})
							  %% Line 701
							  apply Fun
							      ('end_tc', _cor0)
					end
				    in  do  %% Line 704
					    case FuncSpec of
					      %% Line 705
					      <{_cor44,GroupName,_X_Props}> when 'true' ->
						  do  %% Line 706
						      case <> of
							<>
							    when call 'erlang':'=:='
								  (_cor4,
								   'end_per_group') ->
							    %% Line 707
							    call 'ct_config':'delete_default_config'
								({'group',GroupName})
							%% Line 708
							<> when 'true' ->
							    'ok'
						      end
						      %% Line 710
						      case call 'lists':'keysearch'
							       ('save_config', 1, _cor1) of
							%% Line 711
							<{'value',{'save_config',SaveConfig}}> when 'true' ->
							    %% Line 712
							    call 'ct_util':'save_suite_data'
								('last_saved_config', %% Line 713
										      {Suite,{'group',GroupName}}, %% Line 714
														   SaveConfig)
							%% Line 715
							<'false'> when 'true' ->
							    'ok'
							( <_cor25> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_cor25})
							  -| ['compiler_generated'] )
						      end
					      %% Line 718
					      <_cor45> when 'true' ->
						  %% Line 719
						  case call 'lists':'keysearch'
							   ('save_config', 1, _cor1) of
						    %% Line 720
						    <{'value',{'save_config',SaveConfig}}> when 'true' ->
							%% Line 721
							call 'ct_util':'save_suite_data'
							    ('last_saved_config', %% Line 722
										  {Suite,_cor4}, %% Line 722
												 SaveConfig)
						    %% Line 723
						    <'false'> when 'true' ->
							'ok'
						    ( <_cor26> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor26})
						      -| ['compiler_generated'] )
						  end
					    end
					    do  %% Line 728
						call 'ct_util':'reset_silent_connections'
						    ()
						let <ClearCurrTC> =
						    %% Line 732
						    ( fun (_cor28) ->
							  case _cor28 of
							    <Running = [_cor46|[_cor47|_cor48]]> when 'true' ->
								%% Line 733
								call 'lists':'keydelete'
								    (_cor4, 2, Running)
							    %% Line 734
							    <{_cor49,{'suite0_failed',_cor50}}> when 'true' ->
								%% Line 735
								'undefined'
							    %% Line 736
							    <[{_cor51,CurrTC}|[]]>
								when call 'erlang':'=='
								      (CurrTC,
								       _cor4) ->
								%% Line 737
								'undefined'
							    %% Line 738
							    <'undefined'> when 'true' ->
								%% Line 739
								'undefined'
							    %% Line 740
							    <Unexpected> when 'true' ->
								%% Line 741
								{'error',{'reset_curr_tc',{_cor5,_cor4},Unexpected}}
							  end
						      -| [{'id',{0,0,'-end_tc/6-fun-0-'}}] )
						in  do  %% Line 743
							case call 'ct_util':'update_testdata'
								 ('curr_tc', ClearCurrTC) of
							  %% Line 744
							  <ClearError = {'error',_cor52}> when 'true' ->
							      %% Line 745
							      call 'erlang':'exit'
								  (ClearError)
							  %% Line 746
							  <_cor53> when 'true' ->
							      'ok'
							end
							do  %% Line 750
							    case _cor23 of
							      %% Line 751
							      <{'auto_skip',{'sequence_failed',_cor54,_cor55}}> when 'true' ->
								  'ok'
							      %% Line 755
							      <_cor56> when 'true' ->
								  %% Line 756
								  case call 'ct_logs':'end_tc'
									   (_cor3) of
								    %% Line 757
								    <{'error',Reason}> when 'true' ->
									%% Line 758
									call 'erlang':'exit'
									    ({'error',{'logger',Reason}})
								    %% Line 759
								    <_cor57> when 'true' ->
									'ok'
								  end
							    end
							    do  %% Line 763
								case _cor4 of
								  %% Line 764
								  <'end_per_suite'> when 'true' ->
								      %% Line 765
								      call 'ct_util':'match_delete_suite_data'
									  ({'seq',Suite,'_'})
								  %% Line 766
								  <_cor58> when 'true' ->
								      'ok'
								end
								_cor23
'tag'/1 =
    %% Line 774
    fun (_cor0) ->
	case _cor0 of
	  <{STag,Reason}>
	      when let <_cor1> =
		    call 'erlang':'=:='
			(STag, 'skip')
		in  let <_cor2> =
			call 'erlang':'=:='
			    (STag, 'skipped')
		    in  call 'erlang':'or'
			    (_cor1, _cor2) ->
	      %% Line 775
	      case Reason of
		%% Line 776
		<{'failed',{_cor11,'init_per_testcase',_cor12}}> when 'true' ->
		    {'auto_skipped',Reason}
		%% Line 777
		<_cor13> when 'true' ->
		    {'skipped',Reason}
	      end
	  %% Line 779
	  <{'auto_skip',Reason}> when 'true' ->
	      %% Line 780
	      {'auto_skipped',Reason}
	  %% Line 781
	  <E = {ETag,_cor14}>
	      when let <_cor4> =
		    call 'erlang':'=:='
			(ETag, 'error')
		in  let <_cor5> =
			call 'erlang':'=:='
			    (ETag, 'EXIT')
		    in  let <_cor6> =
			    %% Line 782
			    call 'erlang':'=:='
				(ETag, 'timetrap_timeout')
			in  let <_cor7> =
				%% Line 783
				call 'erlang':'=:='
				    (ETag, 'testcase_aborted')
			    in  let <_cor8> =
				    %% Line 782
				    call 'erlang':'or'
					(_cor6, _cor7)
				in  let <_cor9> =
					call 'erlang':'or'
					    (_cor5, _cor8)
				    in  call 'erlang':'or'
					    (_cor4, _cor9) ->
	      %% Line 784
	      {'failed',E}
	  %% Line 785
	  <E = 'testcase_aborted_or_killed'> when 'true' ->
	      %% Line 786
	      {'failed',E}
	  %% Line 787
	  <Other> when 'true' ->
	      %% Line 788
	      Other
	end
'tag_cth'/1 =
    %% Line 790
    fun (_cor0) ->
	case _cor0 of
	  <{'skipped',Reason = {'failed',{_cor11,'init_per_testcase',_cor12}}}> when 'true' ->
	      %% Line 791
	      {'auto_skipped',Reason}
	  %% Line 792
	  <{STag,Reason}>
	      when let <_cor1> =
		    call 'erlang':'=:='
			(STag, 'skip')
		in  let <_cor2> =
			call 'erlang':'=:='
			    (STag, 'skipped')
		    in  call 'erlang':'or'
			    (_cor1, _cor2) ->
	      %% Line 793
	      case Reason of
		%% Line 794
		<{'failed',{_cor13,'init_per_testcase',_cor14}}> when 'true' ->
		    {'auto_skipped',Reason}
		%% Line 795
		<_cor15> when 'true' ->
		    {'skipped',Reason}
	      end
	  %% Line 797
	  <{'auto_skip',Reason}> when 'true' ->
	      %% Line 798
	      {'auto_skipped',Reason}
	  %% Line 799
	  <{'fail',Reason}> when 'true' ->
	      %% Line 800
	      {'failed',{'error',Reason}}
	  %% Line 801
	  <E = {ETag,_cor16}>
	      when let <_cor4> =
		    call 'erlang':'=:='
			(ETag, 'error')
		in  let <_cor5> =
			call 'erlang':'=:='
			    (ETag, 'EXIT')
		    in  let <_cor6> =
			    %% Line 802
			    call 'erlang':'=:='
				(ETag, 'timetrap_timeout')
			in  let <_cor7> =
				%% Line 803
				call 'erlang':'=:='
				    (ETag, 'testcase_aborted')
			    in  let <_cor8> =
				    %% Line 802
				    call 'erlang':'or'
					(_cor6, _cor7)
				in  let <_cor9> =
					call 'erlang':'or'
					    (_cor5, _cor8)
				    in  call 'erlang':'or'
					    (_cor4, _cor9) ->
	      %% Line 804
	      {'failed',E}
	  %% Line 805
	  <E = 'testcase_aborted_or_killed'> when 'true' ->
	      %% Line 806
	      {'failed',E}
	  %% Line 807
	  <List>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 808
	      'ok'
	  %% Line 809
	  <Other> when 'true' ->
	      %% Line 810
	      Other
	end
'error_notification'/4 =
    %% Line 822
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Mod,Func,_X_Args,{Error,Loc}> when 'true' ->
	      let <_cor5> =
		  %% Line 823
		  case Error of
		    %% Line 824
		    <{What = {_X_E,_X_R},Trace}>
			when call 'erlang':'is_list'
			      (Trace) ->
			%% Line 825
			What
		    %% Line 826
		    <What> when 'true' ->
			%% Line 827
			What
		  end
	      in  let <_cor14> =
		      %% Line 829
		      case _cor5 of
			%% Line 830
			<{'badmatch',Descr}> when 'true' ->
			    let <_cor7> =
				%% Line 831
				call 'io_lib':'format'
				    ([126|[80]], [Descr|[10]])
			    in  let <Descr1> =
				    %% Line 831
				    call 'lists':'flatten'
					(_cor7)
				in  %% Line 832
				    case <> of
				      <>
					  when try
						let <_cor9> =
						    call 'erlang':'length'
							(Descr1)
						in  call 'erlang':'>'
							(_cor9, 50)
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false' ->
					  let <Descr2> =
					      %% Line 833
					      call 'string':'substr'
						  (Descr1, 1, 50)
					  in  %% Line 834
					      call 'io_lib':'format'
						  ([123|[98|[97|[100|[109|[97|[116|[99|[104|[44|[126|[116|[115|[46|[46|[46|[125]]]]]]]]]]]]]]]]], [Descr2|[]])
				      %% Line 835
				      <> when 'true' ->
					  %% Line 836
					  call 'io_lib':'format'
					      ([123|[98|[97|[100|[109|[97|[116|[99|[104|[44|[126|[116|[115|[125]]]]]]]]]]]]]], [Descr1|[]])
				    end
			%% Line 838
			<{'test_case_failed',Reason}> when 'true' ->
			    let <_cor11> =
				catch
				    %% Line 839
				    call 'io_lib':'format'
					([123|[116|[101|[115|[116|[95|[99|[97|[115|[101|[95|[102|[97|[105|[108|[101|[100|[44|[126|[116|[115|[125]]]]]]]]]]]]]]]]]]]]]], [Reason|[]])
			    in  %% Line 839
				case _cor11 of
				  %% Line 840
				  <{'EXIT',_cor46}> when 'true' ->
				      %% Line 841
				      call 'io_lib':'format'
					  ([123|[116|[101|[115|[116|[95|[99|[97|[115|[101|[95|[102|[97|[105|[108|[101|[100|[44|[126|[112|[125]]]]]]]]]]]]]]]]]]]]], [Reason|[]])
				  %% Line 842
				  <Result> when 'true' ->
				      Result
				end
			%% Line 844
			<{Spec,_X_Reason}>
			    when call 'erlang':'is_atom'
				  (Spec) ->
			    %% Line 845
			    call 'io_lib':'format'
				([126|[119]], [Spec|[]])
			%% Line 846
			<Other> when 'true' ->
			    %% Line 847
			    call 'io_lib':'format'
				([126|[80]], [Other|[5]])
		      end
		  in  let <_cor16> =
			  %% Line 849
			  call 'erlang':'++'
			      (_cor14, [60|[47|[102|[111|[110|[116|[62]]]]]]])
		      in  let <ErrorHtml> =
			      %% Line 849
			      call 'erlang':'++'
				  ([60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34|[98|[114|[111|[119|[110|[34|[62]]]]]]]]]]]]]]]]]]]], _cor16)
			  in  do  %% Line 850
				  case <Mod,Error> of
				    %% Line 853
				    <_cor47,{'timetrap_timeout',_X_TVal}> when 'true' ->
					'ok'
				    %% Line 855
				    <_cor48,{'testcase_aborted',_X_Info}> when 'true' ->
					'ok'
				    %% Line 857
				    <_cor49,'testcase_aborted_or_killed'> when 'true' ->
					'ok'
				    %% Line 859
				    <'undefined',_X_OtherError> when 'true' ->
					'ok'
				    %% Line 861
				    <_fol42,_fol43> when 'true' ->
					let <_cor18> =
					    %% Line 864
					    call 'erlang':'group_leader'
						()
					in  %% Line 864
					    case call 'ct_util':'get_testdata'
						     ({'comment',_cor18}) of
					      %% Line 865
					      <'undefined'> when 'true' ->
						  %% Line 866
						  call 'test_server':'comment'
						      (ErrorHtml)
					      %% Line 867
					      <Comment> when 'true' ->
						  let <_cor21> =
						      %% Line 870
						      call 'erlang':'++'
							  (Comment, [60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34|[103|[114|[101|[101|[110|[34|[62|[41|[60|[47|[102|[111|[110|[116|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]])
						  in  let <_cor22> =
							  %% Line 870
							  call 'erlang':'++'
							      ([60|[47|[102|[111|[110|[116|[62]]]]]]], _cor21)
						      in  let <_cor23> =
							      %% Line 869
							      [40|_cor22]
							  in  let <CommentHtml> =
								  %% Line 869
								  call 'erlang':'++'
								      ([60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34|[103|[114|[101|[101|[110|[34|[62]]]]]]]]]]]]]]]]]]]], _cor23)
							      in  let <Str> =
								      %% Line 872
								      call 'io_lib':'format'
									  ([126|[116|[115|[32|[32|[32|[126|[116|[115]]]]]]]]], [ErrorHtml|[CommentHtml|[]]])
								  in  %% Line 873
								      call 'test_server':'comment'
									  (Str)
					    end
				  end
				  let <PrintErr> =
				      %% Line 877
				      ( fun (_cor33,_cor32) ->
					    let <_cor29> =
						%% Line 880
						call 'lists':'concat'
						    ([[126|[110|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[_cor33|[[126|[110|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[126|[110]]]]]])
					    in  do  %% Line 880
						    call 'io':'format'
							('user', _cor29, _cor32)
						    let <_cor31> =
							%% Line 889
							call 'erlang':'++'
							    (_cor33, [10|[10|[60|[97|[32|[104|[114|[101|[102|[61|[34|[35|[101|[110|[100|[34|[62|[70|[117|[108|[108|[32|[101|[114|[114|[111|[114|[32|[100|[101|[115|[99|[114|[105|[112|[116|[105|[111|[110|[32|[97|[110|[100|[32|[115|[116|[97|[99|[107|[116|[114|[97|[99|[101|[60|[47|[97|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
						    in  %% Line 886
							call 'ct_logs':'tc_log'
							    ('ct_error_notify', %% Line 887
										99, %% Line 888
										    [67|[84|[32|[69|[114|[114|[111|[114|[32|[78|[111|[116|[105|[102|[105|[99|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]], _cor31, _cor32)
					-| [{'id',{0,0,'-error_notification/4-fun-0-'}}] )
				  in  do  %% Line 891
					  case Loc of
					    %% Line 892
					    <[{'ct_framework','error_in_suite'}]> when 'true' ->
						%% Line 893
						apply PrintErr
						    ([69|[114|[114|[111|[114|[32|[105|[110|[32|[115|[117|[105|[116|[101|[32|[100|[101|[116|[101|[99|[116|[101|[100|[58|[32|[126|[116|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor14|[]])
					    %% Line 895
					    <R>
						when let <_cor37> =
						      call 'erlang':'=:='
							  (Loc, 'unknown')
						  in  let <_cor38> =
							  call 'erlang':'=:='
							      (Loc, 'undefined')
						      in  call 'erlang':'or'
							      (_cor37, _cor38) ->
						%% Line 896
						apply PrintErr
						    ([69|[114|[114|[111|[114|[32|[100|[101|[116|[101|[99|[116|[101|[100|[58|[32|[126|[116|[115]]]]]]]]]]]]]]]]]]], [_cor14|[]])
					    %% Line 900
					    <[{LastMod,LastFunc}|_cor51]>
						when call 'erlang':'=='
						      (_cor14,
						       [117|[110|[100|[101|[102]]]]]) ->
						%% Line 901
						apply PrintErr
						    ([126|[119|[58|[126|[119|[32|[99|[111|[117|[108|[100|[32|[110|[111|[116|[32|[98|[101|[32|[101|[120|[101|[99|[117|[116|[101|[100|[126|[110|[82|[101|[97|[115|[111|[110|[58|[32|[126|[116|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 902
																																			  [LastMod|[LastFunc|[_cor14|[]]]])
					    %% Line 904
					    <[{LastMod,LastFunc}|_cor52]> when 'true' ->
						%% Line 905
						apply PrintErr
						    ([126|[119|[58|[126|[119|[32|[102|[97|[105|[108|[101|[100|[126|[110|[82|[101|[97|[115|[111|[110|[58|[32|[126|[116|[115]]]]]]]]]]]]]]]]]]]]]]]]], [LastMod|[LastFunc|[_cor14|[]]]])
					    %% Line 907
					    <[{LastMod,LastFunc,LastLine}|_cor53]> when 'true' ->
						do  %% Line 910
						    apply PrintErr
							([126|[119|[58|[126|[119|[32|[102|[97|[105|[108|[101|[100|[32|[111|[110|[32|[108|[105|[110|[101|[32|[126|[119|[126|[110|[82|[101|[97|[115|[111|[110|[58|[32|[126|[116|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 911
																																	[LastMod|[LastFunc|[LastLine|[_cor14|[]]]]])
						    %% Line 913
						    case call 'ct_util':'read_suite_data'
							     ({'seq',Mod,Func}) of
						      %% Line 914
						      <'undefined'> when 'true' ->
							  'ok'
						      %% Line 916
						      <Seq> when 'true' ->
							  let <SeqTCs> =
							      %% Line 917
							      call 'ct_util':'read_suite_data'
								  ({'seq',Mod,Seq})
							  in  %% Line 918
							      apply 'mark_as_failed'/4
								  (Seq, Mod, Func, SeqTCs)
						    end
					    ( <_cor41> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor41})
					      -| ['compiler_generated'] )
					  end
					  %% Line 921
					  'ok'
	  ( <_cor45,_cor44,_cor43,_cor42> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor45,_cor44,_cor43,_cor42})
		  -| [{'function_name',{'error_notification',4}}] )
	    -| ['compiler_generated'] )
	end
'mark_as_failed'/4 =
    %% Line 924
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Seq,Mod,Func,[_cor8|TCs]>
	      when call 'erlang':'=:='
		    (_cor8,
		     Func) ->
	      %% Line 925
	      apply 'mark_as_failed1'/4
		  (Seq, Mod, Func, TCs)
	  %% Line 926
	  <Seq,Mod,Func,[_X_TC|TCs]> when 'true' ->
	      %% Line 927
	      apply 'mark_as_failed'/4
		  (Seq, Mod, Func, TCs)
	  %% Line 928
	  <_cor9,_cor10,_cor11,[]> when 'true' ->
	      %% Line 929
	      'ok'
	  %% Line 930
	  <_cor12,_cor13,_cor14,'undefined'> when 'true' ->
	      %% Line 931
	      'ok'
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'mark_as_failed',4}}] )
	    -| ['compiler_generated'] )
	end
'mark_as_failed1'/4 =
    %% Line 934
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Seq,Mod,Func,[TC|TCs]> when 'true' ->
	      do  %% Line 935
		  call 'ct_util':'save_suite_data'
		      ({'seq',Mod,TC}, {'failed',Seq,Func})
		  %% Line 936
		  apply 'mark_as_failed1'/4
		      (Seq, Mod, Func, TCs)
	  %% Line 937
	  <_cor8,_cor9,_cor10,[]> when 'true' ->
	      %% Line 938
	      'ok'
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'mark_as_failed1',4}}] )
	    -| ['compiler_generated'] )
	end
'group_or_func'/2 =
    %% Line 940
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Func,Config>
	      when let <_cor2> =
		    call 'erlang':'=:='
			(Func, 'init_per_group')
		in  let <_cor3> =
			%% Line 941
			call 'erlang':'=:='
			    (Func, 'end_per_group')
		    in  call 'erlang':'or'
			    (_cor2, _cor3) ->
	      %% Line 942
	      case call 'proplists':'get_value'
		       ('tc_group_properties', Config) of
		%% Line 943
		<'undefined'> when 'true' ->
		    %% Line 944
		    {Func,'unknown',[]}
		%% Line 945
		<GrProps> when 'true' ->
		    let <GrName> =
			%% Line 946
			call 'proplists':'get_value'
			    ('name', GrProps)
		    in  let <_cor5> =
			    %% Line 947
			    call 'proplists':'delete'
				('name', GrProps)
			in  %% Line 947
			    {Func,GrName,_cor5}
	      end
	  %% Line 949
	  <Func,_X_Config> when 'true' ->
	      %% Line 950
	      Func
	end
'get_suite'/2 =
    %% Line 959
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Mod,'all'> when 'true' ->
	      let <_cor2> =
		  catch
		      %% Line 960
		      call Mod:'groups'
			  ()
	      in  %% Line 960
		  case _cor2 of
		    %% Line 961
		    <{'EXIT',_cor30}> when 'true' ->
			%% Line 962
			apply 'get_all'/2
			    (Mod, [])
		    %% Line 963
		    <GroupDefs>
			when call 'erlang':'is_list'
			      (_cor2) ->
			let <_cor3> =
			    catch
				%% Line 964
				call 'ct_groups':'find_groups'
				    (Mod, 'all', 'all', GroupDefs)
			in  %% Line 964
			    case _cor3 of
			      %% Line 965
			      <Error = {'error',_cor31}> when 'true' ->
				  %% Line 968
				  [{'ct_framework','error_in_suite',[[Error|[]]|[]]}|[]]
			      %% Line 969
			      <ConfTests> when 'true' ->
				  %% Line 970
				  apply 'get_all'/2
				      (Mod, ConfTests)
			    end
		    %% Line 972
		    <_cor32> when 'true' ->
			let <_cor5> =
			    %% Line 973
			    call 'erlang':'atom_to_list'
				(Mod)
			in  let <_cor6> =
				%% Line 973
				call 'erlang':'++'
				    (_cor5, [58|[103|[114|[111|[117|[112|[115|[47|[48]]]]]]]]])
			    in  let <E> =
				    %% Line 973
				    call 'erlang':'++'
					([66|[97|[100|[32|[114|[101|[116|[117|[114|[110|[32|[118|[97|[108|[117|[101|[32|[102|[114|[111|[109|[32]]]]]]]]]]]]]]]]]]]]]], _cor6)
				in  let <_cor8> =
					%% Line 974
					call 'erlang':'list_to_atom'
					    (E)
				    in  %% Line 974
					[{'ct_framework','error_in_suite',[[{'error',_cor8}|[]]|[]]}|[]]
		  end
	  %% Line 983
	  <Mod,Group = {'conf',Props,_X_Init,TCs,_X_End}> when 'true' ->
	      let <Name> =
		  %% Line 984
		  call 'proplists':'get_value'
		      ('name', Props)
	      in  let <_cor11> =
		      catch
			  %% Line 985
			  call Mod:'groups'
			      ()
		  in  %% Line 985
		      case _cor11 of
			%% Line 986
			<{'EXIT',_cor33}> when 'true' ->
			    %% Line 987
			    [Group|[]]
			%% Line 988
			<GroupDefs>
			    when call 'erlang':'is_list'
				  (_cor11) ->
			    let <_cor12> =
				catch
				    %% Line 989
				    call 'ct_groups':'find_groups'
					(Mod, Name, TCs, GroupDefs)
			    in  %% Line 989
				case _cor12 of
				  %% Line 990
				  <Error = {'error',_cor34}> when 'true' ->
				      %% Line 993
				      [{'ct_framework','error_in_suite',[[Error|[]]|[]]}|[]]
				  %% Line 994
				  <[]> when 'true' ->
				      %% Line 995
				      []
				  %% Line 996
				  <ConfTests> when 'true' ->
				      %% Line 997
				      case call 'lists':'member'
					       ('skipped', Props) of
					%% Line 998
					<'true'> when 'true' ->
					    let <_cor15> =
						catch
						    let <_cor13> =
							%% Line 1002
							call 'erlang':'hd'
							    (ConfTests)
						    in  let <_cor14> =
							    %% Line 1002
							    call 'erlang':'element'
								(2, _cor13)
							in  %% Line 1002
							    call 'proplists':'get_value'
								('name', _cor14)
					    in  %% Line 1002
						case _cor15 of
						  %% Line 1003
						  <_cor35>
						      when call 'erlang':'=:='
							    (_cor15,
							     Name) ->
						      %% Line 1004
						      call 'ct_groups':'delete_subs'
							  (ConfTests, ConfTests)
						  %% Line 1005
						  <_cor36> when 'true' ->
						      %% Line 1006
						      []
						end
					%% Line 1008
					<'false'> when 'true' ->
					    let <ConfTests1> =
						%% Line 1009
						call 'ct_groups':'delete_subs'
						    (ConfTests, %% Line 1010
								ConfTests)
					    in  %% Line 1011
						case call 'proplists':'get_value'
							 ('override', Props) of
						  %% Line 1012
						  <'undefined'> when 'true' ->
						      %% Line 1013
						      ConfTests1
						  %% Line 1014
						  <[]> when 'true' ->
						      %% Line 1015
						      ConfTests1
						  %% Line 1016
						  <ORSpec> when 'true' ->
						      let <_cor18> =
							  %% Line 1017
							  case <> of
							    <>
								when call 'erlang':'is_tuple'
								      (ORSpec) ->
								[ORSpec|[]]
							    %% Line 1018
							    <> when 'true' ->
								ORSpec
							  end
						      in  %% Line 1019
							  call 'ct_groups':'search_and_override'
							      (ConfTests1, _cor18, %% Line 1020
										   Mod)
						end
					( <_cor21> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor21})
					  -| ['compiler_generated'] )
				      end
				end
			%% Line 1024
			<_cor37> when 'true' ->
			    let <_cor23> =
				%% Line 1025
				call 'erlang':'atom_to_list'
				    (Mod)
			    in  let <_cor24> =
				    %% Line 1025
				    call 'erlang':'++'
					(_cor23, [58|[103|[114|[111|[117|[112|[115|[47|[48]]]]]]]]])
				in  let <E> =
					%% Line 1025
					call 'erlang':'++'
					    ([66|[97|[100|[32|[114|[101|[116|[117|[114|[110|[32|[118|[97|[108|[117|[101|[32|[102|[114|[111|[109|[32]]]]]]]]]]]]]]]]]]]]]], _cor24)
				    in  let <_cor26> =
					    %% Line 1026
					    call 'erlang':'list_to_atom'
						(E)
					in  %% Line 1026
					    [{'ct_framework','error_in_suite',[[{'error',_cor26}|[]]|[]]}|[]]
		      end
	  %% Line 1030
	  <Mod,Name> when 'true' ->
	      %% Line 1031
	      apply 'get_seq'/2
		  (Mod, Name)
	end
'get_all_cases'/1 =
    %% Line 1035
    fun (_cor0) ->
	%% Line 1036
	case apply 'get_suite'/2
		 (_cor0, 'all') of
	  %% Line 1037
	  <[{'ct_framework','error_in_suite',[[Error = {'error',_cor11}|[]]|[]]}|[]]> when 'true' ->
	      %% Line 1038
	      Error
	  %% Line 1039
	  <[{'ct_framework','error_in_suite',[[Error|[]]|[]]}|[]]> when 'true' ->
	      %% Line 1040
	      {'error',Error}
	  %% Line 1041
	  <Tests> when 'true' ->
	      let <Cases> =
		  %% Line 1042
		  apply 'get_all_cases1'/2
		      (_cor0, Tests)
	      in  let <_cor7> =
		      %% Line 1043
		      ( fun (_cor4,_cor3) ->
			    %% Line 1044
			    case call 'lists':'member'
				     (_cor4, _cor3) of
			      %% Line 1045
			      <'true'> when 'true' ->
				  _cor3
			      %% Line 1046
			      <'false'> when 'true' ->
				  [_cor4|_cor3]
			      ( <_cor2> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor2})
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-get_all_cases/1-fun-0-'}}] )
		  in  let <_cor8> =
			  %% Line 1043
			  call 'lists':'foldl'
			      (_cor7, %% Line 1048
				      [], %% Line 1048
					  Cases)
		      in  %% Line 1043
			  call 'lists':'reverse'
			      (_cor8)
	end
'get_all_cases1'/2 =
    %% Line 1051
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Suite,[{'conf',_X_Props,_X_Init,GrTests,_X_End}|Tests]> when 'true' ->
	      let <_cor3> =
		  %% Line 1052
		  apply 'get_all_cases1'/2
		      (Suite, GrTests)
	      in  let <_cor2> =
		      %% Line 1052
		      apply 'get_all_cases1'/2
			  (Suite, Tests)
		  in  %% Line 1052
		      call 'erlang':'++'
			  (_cor3, _cor2)
	  %% Line 1054
	  <Suite,[Test|Tests]>
	      when call 'erlang':'is_atom'
		    (Test) ->
	      let <_cor4> =
		  %% Line 1055
		  apply 'get_all_cases1'/2
		      (Suite, Tests)
	      in  %% Line 1055
		  [{Suite,Test}|_cor4]
	  %% Line 1057
	  <Suite,[Test|Tests]> when 'true' ->
	      let <_cor5> =
		  %% Line 1058
		  apply 'get_all_cases1'/2
		      (Suite, Tests)
	      in  %% Line 1058
		  [Test|_cor5]
	  %% Line 1060
	  <_cor8,[]> when 'true' ->
	      %% Line 1061
	      []
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'get_all_cases1',2}}] )
	    -| ['compiler_generated'] )
	end
'get_all'/2 =
    %% Line 1065
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    catch
		%% Line 1066
		call _cor1:'all'
		    ()
	in  %% Line 1066
	    case _cor2 of
	      %% Line 1067
	      <{'EXIT',_cor17}> when 'true' ->
		  let <_cor3> =
		      %% Line 1069
		      call 'erlang':'atom_to_list'
			  (_cor1)
		  in  let <_cor4> =
			  %% Line 1069
			  call 'erlang':'++'
			      (_cor3, [58|[97|[108|[108|[47|[48|[32|[105|[115|[32|[109|[105|[115|[115|[105|[110|[103]]]]]]]]]]]]]]]]])
		      in  let <Reason> =
			      %% Line 1069
			      call 'erlang':'list_to_atom'
				  (_cor4)
			  in  %% Line 1072
			      [{'ct_framework','error_in_suite',[[{'error',Reason}|[]]|[]]}|[]]
	      %% Line 1073
	      <AllTCs>
		  when call 'erlang':'is_list'
			(_cor2) ->
		  let <_cor6> =
		      catch
			  %% Line 1074
			  apply 'save_seqs'/2
			      (_cor1, AllTCs)
		  in  %% Line 1074
		      case _cor6 of
			%% Line 1075
			<{'error',What}> when 'true' ->
			    %% Line 1076
			    [{'ct_framework','error_in_suite',[[{'error',What}|[]]|[]]}|[]]
			%% Line 1077
			<SeqsAndTCs> when 'true' ->
			    let <_cor7> =
				catch
				    %% Line 1079
				    call 'ct_groups':'expand_groups'
					(SeqsAndTCs, _cor0, _cor1)
			    in  %% Line 1079
				case _cor7 of
				  %% Line 1082
				  <Error = {'error',_cor18}> when 'true' ->
				      %% Line 1083
				      [{'ct_framework','error_in_suite',[[Error|[]]|[]]}|[]]
				  %% Line 1084
				  <Tests> when 'true' ->
				      %% Line 1085
				      call 'ct_groups':'delete_subs'
					  (Tests, Tests)
				end
		      end
	      %% Line 1088
	      <Skip = {'skip',_X_Reason}> when 'true' ->
		  %% Line 1089
		  Skip
	      %% Line 1090
	      <_cor19> when 'true' ->
		  let <_cor10> =
		      %% Line 1093
		      call 'erlang':'atom_to_list'
			  (_cor1)
		  in  let <_cor11> =
			  %% Line 1093
			  call 'erlang':'++'
			      (_cor10, [58|[97|[108|[108|[47|[48]]]]]])
		      in  let <_cor12> =
			      %% Line 1092
			      call 'erlang':'++'
				  ([66|[97|[100|[32|[114|[101|[116|[117|[114|[110|[32|[118|[97|[108|[117|[101|[32|[102|[114|[111|[109|[32]]]]]]]]]]]]]]]]]]]]]], _cor11)
			  in  let <Reason> =
				  %% Line 1092
				  call 'erlang':'list_to_atom'
				      (_cor12)
			      in  %% Line 1094
				  [{'ct_framework','error_in_suite',[[{'error',Reason}|[]]|[]]}|[]]
	    end
'get_seq'/2 =
    %% Line 1106
    fun (_cor1,_cor0) ->
	%% Line 1107
	case call 'ct_util':'read_suite_data'
		 ({'seq',_cor1,_cor0}) of
	  %% Line 1108
	  <'undefined'> when 'true' ->
	      let <_cor2> =
		  catch
		      %% Line 1109
		      call _cor1:'sequences'
			  ()
	      in  %% Line 1109
		  case _cor2 of
		    %% Line 1110
		    <{'EXIT',_cor10}> when 'true' ->
			%% Line 1111
			[]
		    %% Line 1112
		    <Seqs> when 'true' ->
			%% Line 1113
			case call 'lists':'keysearch'
				 (_cor0, 1, Seqs) of
			  %% Line 1114
			  <{'value',{_cor11,SeqTCs}}>
			      when call 'erlang':'=:='
				    (_cor11,
				     _cor0) ->
			      let <_cor3> =
				  catch
				      %% Line 1115
				      apply 'save_seq'/3
					  (_cor1, _cor0, SeqTCs)
			      in  %% Line 1115
				  case _cor3 of
				    %% Line 1116
				    <{'error',What}> when 'true' ->
					%% Line 1117
					[{'ct_framework','error_in_suite',[[{'error',What}|[]]|[]]}|[]]
				    %% Line 1118
				    <_cor12> when 'true' ->
					%% Line 1119
					SeqTCs
				  end
			  %% Line 1121
			  <'false'> when 'true' ->
			      %% Line 1122
			      []
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor5})
			    -| ['compiler_generated'] )
			end
		  end
	  %% Line 1125
	  <TCs>
	      when call 'erlang':'is_list'
		    (TCs) ->
	      %% Line 1126
	      TCs
	  %% Line 1127
	  <_cor13> when 'true' ->
	      %% Line 1128
	      []
	end
'save_seqs'/2 =
    %% Line 1131
    fun (_cor1,_cor0) ->
	%% Line 1132
	case call 'lists':'keymember'
		 ('sequence', 1, _cor0) of
	  %% Line 1133
	  <'true'> when 'true' ->
	      let <_cor2> =
		  catch
		      %% Line 1134
		      call _cor1:'sequences'
			  ()
	      in  %% Line 1134
		  case _cor2 of
		    %% Line 1135
		    <{'EXIT',_cor10}> when 'true' ->
			let <_cor3> =
			    %% Line 1136
			    call 'erlang':'atom_to_list'
				(_cor1)
			in  let <_cor4> =
				%% Line 1136
				call 'erlang':'++'
				    (_cor3, %% Line 1137
					    [58|[115|[101|[113|[117|[101|[110|[99|[101|[115|[47|[48|[32|[105|[115|[32|[109|[105|[115|[115|[105|[110|[103]]]]]]]]]]]]]]]]]]]]]]])
			    in  let <Reason> =
				    %% Line 1136
				    call 'erlang':'list_to_atom'
					(_cor4)
				in  %% Line 1138
				    call 'erlang':'throw'
					({'error',Reason})
		    %% Line 1139
		    <Seqs> when 'true' ->
			%% Line 1140
			apply 'save_seqs'/4
			    (_cor1, _cor0, Seqs, _cor0)
		  end
	  %% Line 1142
	  <'false'> when 'true' ->
	      _cor0
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'save_seqs'/4 =
    %% Line 1146
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Mod,[{'sequence',Seq}|TCs],Seqs,All> when 'true' ->
	      %% Line 1147
	      case call 'lists':'keysearch'
		       (Seq, 1, Seqs) of
		%% Line 1148
		<{'value',{_cor16,SeqTCs}}>
		    when call 'erlang':'=:='
			  (_cor16,
			   Seq) ->
		    do  %% Line 1149
			apply 'save_seq'/4
			    (Mod, Seq, SeqTCs, All)
			let <_cor4> =
			    %% Line 1150
			    apply 'save_seqs'/4
				(Mod, TCs, Seqs, All)
			in  %% Line 1150
			    [Seq|_cor4]
		%% Line 1151
		<'false'> when 'true' ->
		    let <_cor7> =
			%% Line 1153
			call 'erlang':'atom_to_list'
			    (Seq)
		    in  let <_cor5> =
			    %% Line 1154
			    call 'erlang':'atom_to_list'
				(Mod)
			in  let <_cor6> =
				%% Line 1153
				call 'erlang':'++'
				    ([32|[105|[115|[32|[109|[105|[115|[115|[105|[110|[103|[32|[105|[110|[32]]]]]]]]]]]]]]], _cor5)
			    in  let <_cor8> =
				    %% Line 1153
				    call 'erlang':'++'
					(_cor7, _cor6)
				in  let <Reason> =
					%% Line 1152
					call 'erlang':'list_to_atom'
					    (_cor8)
				    in  %% Line 1155
					call 'erlang':'throw'
					    ({'error',Reason})
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1157
	  <Mod,[TC|TCs],Seqs,All> when 'true' ->
	      let <_cor11> =
		  %% Line 1158
		  apply 'save_seqs'/4
		      (Mod, TCs, Seqs, All)
	      in  %% Line 1158
		  [TC|_cor11]
	  %% Line 1159
	  <_cor17,[],_cor18,_cor19> when 'true' ->
	      %% Line 1160
	      []
	  ( <_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'save_seqs',4}}] )
	    -| ['compiler_generated'] )
	end
'save_seq'/3 =
    %% Line 1162
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1163
	    call _cor2:'all'
		()
	in  %% Line 1163
	    apply 'save_seq'/4
		(_cor2, _cor1, _cor0, _cor3)
'save_seq'/4 =
    %% Line 1165
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 1166
	    apply 'check_private'/3
		(_cor2, _cor1, _cor0)
	    do  %% Line 1167
		apply 'check_multiple'/3
		    (_cor3, _cor2, _cor1)
		do  %% Line 1168
		    call 'ct_util':'save_suite_data'
			({'seq',_cor3,_cor2}, _cor1)
		    let <_cor6> =
			%% Line 1169
			( fun (_cor4) ->
			      %% Line 1170
			      call 'ct_util':'save_suite_data'
				  ({'seq',_cor3,_cor4}, _cor2)
			  -| [{'id',{0,0,'-save_seq/4-fun-0-'}}] )
		    in  %% Line 1169
			call 'lists':'foreach'
			    (_cor6, _cor1)
'check_private'/3 =
    %% Line 1173
    fun (_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 1174
	    ( fun (_cor3) ->
		  call 'lists':'member'
		      (_cor3, _cor0)
	      -| [{'id',{0,0,'-check_private/3-fun-0-'}}] )
	in  let <Bad> =
		%% Line 1174
		call 'lists':'filter'
		    (_cor5, _cor1)
	    in  %% Line 1175
		case <> of
		  <>
		      when call 'erlang':'=/='
			    (Bad,
			     []) ->
		      let <Reason> =
			  %% Line 1176
			  call 'io_lib':'format'
			      ([114|[101|[103|[117|[108|[97|[114|[32|[116|[101|[115|[116|[32|[99|[97|[115|[101|[115|[32|[110|[111|[116|[32|[97|[108|[108|[111|[119|[101|[100|[32|[105|[110|[32|[115|[101|[113|[117|[101|[110|[99|[101|[32|[126|[112|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1177
																																							[_cor2|[Bad|[]]])
		      in  let <_cor8> =
			      %% Line 1178
			      call 'lists':'flatten'
				  (Reason)
			  in  let <_cor9> =
				  %% Line 1178
				  call 'erlang':'list_to_atom'
				      (_cor8)
			      in  %% Line 1178
				  call 'erlang':'throw'
				      ({'error',_cor9})
		  %% Line 1179
		  <> when 'true' ->
		      %% Line 1180
		      'ok'
		end
'check_multiple'/3 =
    %% Line 1183
    fun (_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 1184
	    ( fun (_cor6) ->
		  %% Line 1185
		  case call 'ct_util':'read_suite_data'
			   ({'seq',_cor2,_cor6}) of
		    %% Line 1186
		    <Seq1>
			when let <_cor3> =
			      call 'erlang':'=/='
				  (Seq1, 'undefined')
			  in  let <_cor4> =
				  call 'erlang':'/='
				      (Seq1, _cor1)
			      in  call 'erlang':'and'
				      (_cor3, _cor4) ->
			%% Line 1187
			'true'
		    %% Line 1189
		    <_cor16> when 'true' ->
			'false'
		  end
	      -| [{'id',{0,0,'-check_multiple/3-fun-0-'}}] )
	in  let <Bad> =
		%% Line 1184
		call 'lists':'filter'
		    (_cor8, _cor0)
	    in  %% Line 1192
		case <> of
		  <>
		      when call 'erlang':'=/='
			    (Bad,
			     []) ->
		      let <Reason> =
			  %% Line 1193
			  call 'io_lib':'format'
			      ([116|[101|[115|[116|[32|[99|[97|[115|[101|[115|[32|[102|[111|[117|[110|[100|[32|[105|[110|[32|[109|[117|[108|[116|[105|[112|[108|[101|[32|[115|[101|[113|[117|[101|[110|[99|[101|[115|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1194
																																		  [Bad|[]])
		      in  let <_cor11> =
			      %% Line 1195
			      call 'lists':'flatten'
				  (Reason)
			  in  let <_cor12> =
				  %% Line 1195
				  call 'erlang':'list_to_atom'
				      (_cor11)
			      in  %% Line 1195
				  call 'erlang':'throw'
				      ({'error',_cor12})
		  %% Line 1196
		  <> when 'true' ->
		      %% Line 1197
		      'ok'
		end
'error_in_suite'/1 =
    %% Line 1205
    fun (_cor0) ->
	let <Reason> =
	    %% Line 1206
	    call 'test_server':'lookup_config'
		('error', _cor0)
	in  %% Line 1207
	    call 'erlang':'exit'
		(Reason)
'init_per_suite'/1 =
    %% Line 1213
    fun (_cor0) ->
	_cor0
'end_per_suite'/1 =
    %% Line 1216
    fun (_cor0) ->
	%% Line 1217
	'ok'
'init_per_group'/2 =
    %% Line 1221
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1222
	    call 'io_lib':'format'
		([115|[116|[97|[114|[116|[32|[111|[102|[32|[126|[112]]]]]]]]]]], [_cor1|[]])
	in  do  %% Line 1222
		call 'ct':'comment'
		    (_cor2)
		do  %% Line 1223
		    call 'ct_logs':'log'
			([84|[69|[83|[84|[32|[73|[78|[70|[79]]]]]]]]], [105|[110|[105|[116|[95|[112|[101|[114|[95|[103|[114|[111|[117|[112|[47|[50|[32|[102|[111|[114|[32|[126|[119|[32|[109|[105|[115|[115|[105|[110|[103|[32|[105|[110|[32|[115|[117|[105|[116|[101|[44|[32|[117|[115|[105|[110|[103|[32|[100|[101|[102|[97|[117|[108|[116|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1225
																																																	  [_cor1|[]])
		    _cor0
'end_per_group'/2 =
    %% Line 1228
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1229
	    call 'io_lib':'format'
		([101|[110|[100|[32|[111|[102|[32|[126|[112]]]]]]]]], [_cor1|[]])
	in  do  %% Line 1229
		call 'ct':'comment'
		    (_cor2)
		do  %% Line 1230
		    call 'ct_logs':'log'
			([84|[69|[83|[84|[32|[73|[78|[70|[79]]]]]]]]], [101|[110|[100|[95|[112|[101|[114|[95|[103|[114|[111|[117|[112|[47|[50|[32|[102|[111|[114|[32|[126|[119|[32|[109|[105|[115|[115|[105|[110|[103|[32|[105|[110|[32|[115|[117|[105|[116|[101|[44|[32|[117|[115|[105|[110|[103|[32|[100|[101|[102|[97|[117|[108|[116|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1232
																																																    [_cor1|[]])
		    %% Line 1233
		    'ok'
'report'/2 =
    %% Line 1237
    fun (_cor1,_cor0) ->
	do  %% Line 1238
	    case _cor1 of
	      %% Line 1239
	      <'loginfo'> when 'true' ->
		  let <_cor2> =
		      %% Line 1242
		      call 'proplists':'get_value'
			  ('topdir', _cor0)
		  in  let <TestName> =
			  %% Line 1242
			  call 'filename':'basename'
			      (_cor2, [46|[108|[111|[103|[115]]]]])
		      in  let <RunDir> =
			      %% Line 1243
			      call 'proplists':'get_value'
				  ('rundir', _cor0)
			  in  do  %% Line 1244
				  call 'ct_logs':'make_all_suites_index'
				      ({TestName,RunDir})
				  'ok'
	      %% Line 1246
	      <'tests_start'> when 'true' ->
		  'ok'
	      %% Line 1248
	      <'tests_done'> when 'true' ->
		  'ok'
	      %% Line 1250
	      <'severe_error'> when 'true' ->
		  let <_cor5> =
		      %% Line 1252
		      call 'erlang':'node'
			  ()
		  in  do  %% Line 1251
			  call 'ct_event':'sync_notify'
			      ({'event',_cor1,_cor5,_cor0})
			  do  %% Line 1254
			      call 'ct_util':'set_testdata'
				  ({_cor1,_cor0})
			      'ok'
	      %% Line 1256
	      <'tc_start'> when 'true' ->
		  let <_cor7> =
		      %% Line 1258
		      case _cor0 of
			%% Line 1259
			<{{Suite,{Func,'undefined'}},LFN}> when 'true' ->
			    {{Suite,Func},LFN}
			%% Line 1260
			<_cor37> when 'true' ->
			    _cor0
		      end
		  in  let <_cor9> =
			  %% Line 1263
			  call 'erlang':'node'
			      ()
		      in  do  %% Line 1262
			      call 'ct_event':'sync_notify'
				  ({'event','tc_logfile',_cor9,_cor7})
			      'ok'
	      %% Line 1266
	      <'tc_done'> when 'true' ->
		  %% Line 1267
		  case _cor0 of
		    <{Suite,{Func,GrName},Result}> when 'true' ->
			let <_cor11> =
			    %% Line 1268
			    case <> of
			      <>
				  when call 'erlang':'=:='
					(GrName,
					 'undefined') ->
				  {Suite,Func,Result}
			      %% Line 1269
			      <> when 'true' ->
				  _cor0
			    end
			in  do  %% Line 1271
				case Result of
				  %% Line 1272
				  <{'failed',_cor38}> when 'true' ->
				      %% Line 1273
				      call 'ct_hooks':'on_tc_fail'
					  (_cor1, _cor11)
				  %% Line 1274
				  <{'skipped',{'failed',{_cor39,'init_per_testcase',_cor40}}}> when 'true' ->
				      %% Line 1275
				      call 'ct_hooks':'on_tc_skip'
					  ('tc_auto_skip', _cor11)
				  %% Line 1276
				  <{'skipped',{'require_failed',_cor41}}> when 'true' ->
				      %% Line 1277
				      call 'ct_hooks':'on_tc_skip'
					  ('tc_auto_skip', _cor11)
				  %% Line 1278
				  <{'skipped',_cor42}> when 'true' ->
				      %% Line 1279
				      call 'ct_hooks':'on_tc_skip'
					  ('tc_user_skip', _cor11)
				  %% Line 1280
				  <{'auto_skipped',_cor43}> when 'true' ->
				      %% Line 1281
				      call 'ct_hooks':'on_tc_skip'
					  ('tc_auto_skip', _cor11)
				  %% Line 1282
				  <_X_Else> when 'true' ->
				      'ok'
				end
				%% Line 1285
				case <Func,Result> of
				  %% Line 1286
				  <'init_per_suite',_cor44> when 'true' ->
				      'ok'
				  %% Line 1288
				  <'end_per_suite',_cor45> when 'true' ->
				      'ok'
				  %% Line 1290
				  <'init_per_group',_cor46> when 'true' ->
				      'ok'
				  %% Line 1292
				  <'end_per_group',_cor47> when 'true' ->
				      'ok'
				  %% Line 1294
				  <_cor48,'ok'> when 'true' ->
				      %% Line 1295
				      apply 'add_to_stats'/1
					  ('ok')
				  %% Line 1296
				  <_cor49,{'skipped',{'failed',{_cor50,'init_per_testcase',_cor51}}}> when 'true' ->
				      %% Line 1297
				      apply 'add_to_stats'/1
					  ('auto_skipped')
				  %% Line 1298
				  <_cor52,{'skipped',{'require_failed',_cor53}}> when 'true' ->
				      %% Line 1299
				      apply 'add_to_stats'/1
					  ('auto_skipped')
				  %% Line 1300
				  <_cor54,{'skipped',{'timetrap_error',_cor55}}> when 'true' ->
				      %% Line 1301
				      apply 'add_to_stats'/1
					  ('auto_skipped')
				  %% Line 1302
				  <_cor56,{'skipped',{'invalid_time_format',_cor57}}> when 'true' ->
				      %% Line 1303
				      apply 'add_to_stats'/1
					  ('auto_skipped')
				  %% Line 1304
				  <_cor58,{'skipped',_cor59}> when 'true' ->
				      %% Line 1305
				      apply 'add_to_stats'/1
					  ('user_skipped')
				  %% Line 1306
				  <_cor60,{'auto_skipped',_cor61}> when 'true' ->
				      %% Line 1307
				      apply 'add_to_stats'/1
					  ('auto_skipped')
				  %% Line 1308
				  <_cor62,{SkipOrFail,_X_Reason}> when 'true' ->
				      %% Line 1309
				      apply 'add_to_stats'/1
					  (SkipOrFail)
				  ( <_fol78,_fol79> when 'true' ->
					let <_cor14> = {_fol78,_fol79}
					in  primop 'match_fail'
						({'case_clause',_cor14})
				    -| ['compiler_generated'] )
				end
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor10})
		      -| ['compiler_generated'] )
		  end
	      %% Line 1311
	      <'tc_user_skip'> when 'true' ->
		  let <Func,Data1> =
		      %% Line 1315
		      case _cor0 of
			%% Line 1316
			<{Suite,{F,'undefined'},Comment}> when 'true' ->
			    %% Line 1317
			    <F,{Suite,F,Comment}>
			%% Line 1318
			<D = {_cor63,{F,_cor64},_cor65}> when 'true' ->
			    %% Line 1319
			    <F,D>
			( <_cor15> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor15})
			  -| ['compiler_generated'] )
		      end
		  in  let <_cor18> =
			  %% Line 1322
			  call 'erlang':'node'
			      ()
		      in  do  %% Line 1321
			      call 'ct_event':'sync_notify'
				  ({'event','tc_user_skip',_cor18,%% Line 1323
								  Data1})
			      do  %% Line 1324
				  call 'ct_hooks':'on_tc_skip'
				      (_cor1, Data1)
				  %% Line 1325
				  case <> of
				    <>
					when try
					      let <_cor19> =
						  call 'erlang':'=/='
						      (Func, 'init_per_suite')
					      in  let <_cor20> =
						      call 'erlang':'=/='
							  (Func, 'init_per_group')
						  in  let <_cor21> =
							  %% Line 1326
							  call 'erlang':'=/='
							      (Func, 'end_per_suite')
						      in  let <_cor22> =
							      %% Line 1326
							      call 'erlang':'=/='
								  (Func, 'end_per_group')
							  in  let <_cor23> =
								  call 'erlang':'and'
								      (_cor21, _cor22)
							      in  let <_cor24> =
								      call 'erlang':'and'
									  (_cor20, _cor23)
								  in  call 'erlang':'and'
									  (_cor19, _cor24)
					  of <Try> ->
					      Try
					  catch <T,R> ->
					      'false' ->
					%% Line 1327
					apply 'add_to_stats'/1
					    ('user_skipped')
				    %% Line 1328
				    <> when 'true' ->
					'ok'
				  end
	      %% Line 1331
	      <'tc_auto_skip'> when 'true' ->
		  let <Func,Data1> =
		      %% Line 1335
		      case _cor0 of
			%% Line 1336
			<{Suite,{F,'undefined'},Comment}> when 'true' ->
			    %% Line 1337
			    <F,{Suite,F,Comment}>
			%% Line 1338
			<D = {_cor66,{F,_cor67},_cor68}> when 'true' ->
			    %% Line 1339
			    <F,D>
			( <_cor25> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor25})
			  -| ['compiler_generated'] )
		      end
		  in  let <_cor28> =
			  %% Line 1344
			  call 'erlang':'node'
			      ()
		      in  do  %% Line 1343
			      call 'ct_event':'sync_notify'
				  ({'event','tc_auto_skip',_cor28,%% Line 1345
								  Data1})
			      do  %% Line 1346
				  call 'ct_hooks':'on_tc_skip'
				      (_cor1, Data1)
				  %% Line 1347
				  case <> of
				    <>
					when let <_cor29> =
					      call 'erlang':'=/='
						  (Func, 'end_per_suite')
					  in  let <_cor30> =
						  %% Line 1348
						  call 'erlang':'=/='
						      (Func, 'end_per_group')
					      in  call 'erlang':'and'
						      (_cor29, _cor30) ->
					%% Line 1349
					apply 'add_to_stats'/1
					    ('auto_skipped')
				    %% Line 1350
				    <> when 'true' ->
					'ok'
				  end
	      %% Line 1353
	      <'framework_error'> when 'true' ->
		  %% Line 1354
		  case _cor0 of
		    %% Line 1355
		    <{{M,F},E}> when 'true' ->
			let <_cor31> =
			    %% Line 1357
			    call 'erlang':'node'
				()
			in  %% Line 1356
			    call 'ct_event':'sync_notify'
				({'event','tc_done',_cor31,%% Line 1358
							   {M,F,{'framework_error',E}}})
		    %% Line 1359
		    <_cor69> when 'true' ->
			let <_cor32> =
			    %% Line 1361
			    call 'erlang':'node'
				()
			in  %% Line 1360
			    call 'ct_event':'sync_notify'
				({'event','tc_done',_cor32,_cor0})
		  end
	      %% Line 1364
	      <_cor70> when 'true' ->
		  'ok'
	    end
	    catch
		%% Line 1367
		call 'vts':'report'
		    (_cor1, _cor0)
'add_to_stats'/1 =
    %% Line 1369
    fun (_cor0) ->
	let <Update> =
	    %% Line 1370
	    ( fun (_cor10) ->
		  case _cor10 of
		    <{Ok,Failed,Skipped = {UserSkipped,AutoSkipped}}> when 'true' ->
			let <_cor7> =
			    %% Line 1372
			    case _cor0 of
			      %% Line 1373
			      <'ok'> when 'true' ->
				  let <_cor1> =
				      %% Line 1374
				      call 'erlang':'+'
					  (Ok, 1)
				  in  %% Line 1374
				      {_cor1,Failed,Skipped}
			      %% Line 1375
			      <'failed'> when 'true' ->
				  let <_cor2> =
				      %% Line 1376
				      call 'erlang':'+'
					  (Failed, 1)
				  in  %% Line 1376
				      {Ok,_cor2,Skipped}
			      %% Line 1377
			      <'skipped'> when 'true' ->
				  let <_cor3> =
				      %% Line 1378
				      call 'erlang':'+'
					  (UserSkipped, 1)
				  in  %% Line 1378
				      {Ok,Failed,{_cor3,AutoSkipped}}
			      %% Line 1379
			      <'user_skipped'> when 'true' ->
				  let <_cor4> =
				      %% Line 1380
				      call 'erlang':'+'
					  (UserSkipped, 1)
				  in  %% Line 1380
				      {Ok,Failed,{_cor4,AutoSkipped}}
			      %% Line 1381
			      <'auto_skipped'> when 'true' ->
				  let <_cor5> =
				      %% Line 1382
				      call 'erlang':'+'
					  (AutoSkipped, 1)
				  in  %% Line 1382
				      {Ok,Failed,{UserSkipped,_cor5}}
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor6})
				-| ['compiler_generated'] )
			    end
			in  let <_cor9> =
				%% Line 1385
				call 'erlang':'node'
				    ()
			    in  do  %% Line 1384
				    call 'ct_event':'sync_notify'
					({'event','test_stats',_cor9,_cor7})
				    _cor7
		    ( <_cor11> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor11})
			    -| [{'function_name',{'-add_to_stats/1-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-add_to_stats/1-fun-0-'}}] )
	in  %% Line 1389
	    call 'ct_util':'update_testdata'
		('stats', Update)
'warn'/1 =
    %% Line 1393
    fun (_cor0) ->
	case _cor0 of
	  <What>
	      when let <_cor1> =
		    call 'erlang':'=:='
			(_cor0, 'nodes')
		in  let <_cor2> =
			call 'erlang':'=:='
			    (_cor0, 'processes')
		    in  call 'erlang':'or'
			    (_cor1, _cor2) ->
	      %% Line 1394
	      'false'
	  %% Line 1395
	  <_X_What> when 'true' ->
	      %% Line 1396
	      'true'
	end
'add_data_dir'/2 =
    %% Line 1400
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <File,Config>
	      when call 'erlang':'is_atom'
		    (File) ->
	      let <_cor2> =
		  %% Line 1401
		  call 'erlang':'atom_to_list'
		      (File)
	      in  %% Line 1401
		  apply 'add_data_dir'/2
		      (_cor2, Config)
	  %% Line 1403
	  <File,Config>
	      when call 'erlang':'is_list'
		    (File) ->
	      %% Line 1404
	      case call 'filename':'split'
		       (File) of
		%% Line 1405
		<[_cor7|[]]>
		    when call 'erlang':'=:='
			  (_cor7,
			   File) ->
		    %% Line 1407
		    case call 'lists':'keysearch'
			     ('data_dir', 1, Config) of
		      %% Line 1408
		      <{'value',{'data_dir',DataDir}}> when 'true' ->
			  %% Line 1409
			  call 'filename':'join'
			      (DataDir, File)
		      %% Line 1410
		      <_cor8> when 'true' ->
			  %% Line 1411
			  File
		    end
		%% Line 1413
		<_cor9> when 'true' ->
		    %% Line 1414
		    File
	      end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'add_data_dir',2}}] )
	    -| ['compiler_generated'] )
	end
'get_logopts'/0 =
    %% Line 1419
    fun () ->
	%% Line 1420
	case call 'ct_util':'get_testdata'
		 ('logopts') of
	  %% Line 1421
	  <'undefined'> when 'true' ->
	      %% Line 1422
	      []
	  %% Line 1423
	  <LogOpts> when 'true' ->
	      %% Line 1424
	      LogOpts
	end
'format_comment'/1 =
    %% Line 1429
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1430
	    call 'erlang':'++'
		(_cor0, [60|[47|[102|[111|[110|[116|[62]]]]]]])
	in  %% Line 1430
	    call 'erlang':'++'
		([60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34|[103|[114|[101|[101|[110|[34|[62]]]]]]]]]]]]]]]]]]]], _cor1)
'get_html_wrapper'/4 =
    %% Line 1434
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1435
	apply 'get_html_wrapper'/5
	    (_cor3, _cor2, _cor1, _cor0, 'utf8')
'get_html_wrapper'/5 =
    %% Line 1437
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1438
	call 'ct_logs':'get_ts_html_wrapper'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('ct_framework')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('ct_framework', _cor0)
end