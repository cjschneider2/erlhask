module 'ct_netconfc' ['action'/2,
		      'action'/3,
		      'close'/1,
		      'close_session'/1,
		      'close_session'/2,
		      'copy_config'/3,
		      'copy_config'/4,
		      'create_subscription'/1,
		      'create_subscription'/2,
		      'create_subscription'/3,
		      'create_subscription'/4,
		      'create_subscription'/5,
		      'create_subscription'/6,
		      'delete_config'/2,
		      'delete_config'/3,
		      'edit_config'/3,
		      'edit_config'/4,
		      'format_data'/2,
		      'get'/2,
		      'get'/3,
		      'get_capabilities'/1,
		      'get_capabilities'/2,
		      'get_config'/3,
		      'get_config'/4,
		      'get_event_streams'/2,
		      'get_event_streams'/3,
		      'get_session_id'/1,
		      'get_session_id'/2,
		      'handle_msg'/2,
		      'handle_msg'/3,
		      'hello'/1,
		      'hello'/2,
		      'init'/3,
		      'kill_session'/2,
		      'kill_session'/3,
		      'lock'/2,
		      'lock'/3,
		      'module_info'/0,
		      'module_info'/1,
		      'only_open'/1,
		      'only_open'/2,
		      'open'/1,
		      'open'/2,
		      'send'/2,
		      'send'/3,
		      'send_rpc'/2,
		      'send_rpc'/3,
		      'terminate'/2,
		      'unlock'/2,
		      'unlock'/3]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','conn'},[{'record_field',26,{'atom',26,'handle'}}|[{'record_field',27,{'atom',27,'targetref'}}|[{'record_field',28,{'atom',28,'address'}}|[{'record_field',29,{'atom',29,'callback'}}]]]],[]}],
		%% Line 31
		'type' =
		    %% Line 31
		    [{{'record','testspec'},[{'record_field',31,{'atom',31,'spec_dir'}}|[{'record_field',32,{'atom',32,'nodes'},{'nil',32}}|[{'record_field',33,{'atom',33,'init'},{'nil',33}}|[{'record_field',34,{'atom',34,'label'},{'nil',34}}|[{'record_field',35,{'atom',35,'profile'},{'nil',35}}|[{'record_field',36,{'atom',36,'logdir'},{'cons',36,{'string',36,[46]},{'nil',36}}}|[{'record_field',37,{'atom',37,'logopts'},{'nil',37}}|[{'record_field',38,{'atom',38,'basic_html'},{'nil',38}}|[{'record_field',39,{'atom',39,'verbosity'},{'nil',39}}|[{'record_field',40,{'atom',40,'silent_connections'},{'nil',40}}|[{'record_field',41,{'atom',41,'cover'},{'nil',41}}|[{'record_field',42,{'atom',42,'cover_stop'},{'nil',42}}|[{'record_field',43,{'atom',43,'config'},{'nil',43}}|[{'record_field',44,{'atom',44,'userconfig'},{'nil',44}}|[{'record_field',45,{'atom',45,'event_handler'},{'nil',45}}|[{'record_field',46,{'atom',46,'ct_hooks'},{'nil',46}}|[{'record_field',47,{'atom',47,'enable_builtin_hooks'},{'atom',47,'true'}}|[{'record_field',48,{'atom',48,'release_shell'},{'atom',48,'false'}}|[{'record_field',49,{'atom',49,'include'},{'nil',49}}|[{'record_field',50,{'atom',50,'auto_compile'},{'nil',50}}|[{'record_field',51,{'atom',51,'abort_if_missing_suites'},{'nil',51}}|[{'record_field',52,{'atom',52,'stylesheet'},{'nil',52}}|[{'record_field',53,{'atom',53,'multiply_timetraps'},{'nil',53}}|[{'record_field',54,{'atom',54,'scale_timetraps'},{'nil',54}}|[{'record_field',55,{'atom',55,'create_priv_dir'},{'nil',55}}|[{'record_field',56,{'atom',56,'alias'},{'nil',56}}|[{'record_field',57,{'atom',57,'tests'},{'nil',57}}|[{'record_field',58,{'atom',58,'merge_tests'},{'atom',58,'true'}}]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 60
		'type' =
		    %% Line 60
		    [{{'record','cover'},[{'record_field',60,{'atom',60,'app'},{'atom',60,'none'}}|[{'record_field',61,{'atom',61,'level'},{'atom',61,'details'}}|[{'record_field',62,{'atom',62,'excl_mods'},{'nil',62}}|[{'record_field',63,{'atom',63,'incl_mods'},{'nil',63}}|[{'record_field',64,{'atom',64,'cross'},{'nil',64}}|[{'record_field',65,{'atom',65,'src'},{'nil',65}}]]]]]],[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{{'record','conn_log'},[{'record_field',83,{'atom',83,'header'},{'atom',83,'true'}}|[{'record_field',84,{'atom',84,'client'}}|[{'record_field',85,{'atom',85,'name'}}|[{'record_field',86,{'atom',86,'address'}}|[{'record_field',87,{'atom',87,'conn_pid'}}|[{'record_field',88,{'atom',88,'action'}}|[{'record_field',89,{'atom',89,'module'}}]]]]]]],[]}],
		%% Line 37
		'type' =
		    %% Line 37
		    [{{'record','xmlDecl'},[{'record_field',38,{'atom',38,'vsn'}}|[{'record_field',39,{'atom',39,'encoding'}}|[{'record_field',40,{'atom',40,'standalone'}}|[{'record_field',41,{'atom',41,'attributes'}}]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{{'record','xmlAttribute'},[{'record_field',46,{'atom',46,'name'}}|[{'record_field',47,{'atom',47,'expanded_name'},{'nil',47}}|[{'record_field',48,{'atom',48,'nsinfo'},{'nil',48}}|[{'record_field',49,{'atom',49,'namespace'},{'nil',49}}|[{'record_field',50,{'atom',50,'parents'},{'nil',50}}|[{'record_field',51,{'atom',51,'pos'}}|[{'record_field',52,{'atom',52,'language'},{'nil',52}}|[{'record_field',53,{'atom',53,'value'}}|[{'record_field',54,{'atom',54,'normalized'}}]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','xmlNamespace'},[{'record_field',59,{'atom',59,'default'},{'nil',59}}|[{'record_field',60,{'atom',60,'nodes'},{'nil',60}}]],[]}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{{'record','xmlNsNode'},[{'record_field',65,{'atom',65,'parents'},{'nil',65}}|[{'record_field',66,{'atom',66,'pos'}}|[{'record_field',67,{'atom',67,'prefix'}}|[{'record_field',68,{'atom',68,'uri'},{'nil',68}}]]]],[]}],
		%% Line 73
		'type' =
		    %% Line 73
		    [{{'record','xmlElement'},[{'record_field',74,{'atom',74,'name'}}|[{'record_field',75,{'atom',75,'expanded_name'},{'nil',75}}|[{'record_field',76,{'atom',76,'nsinfo'},{'nil',76}}|[{'record_field',77,{'atom',77,'namespace'},{'record',77,'xmlNamespace',[]}}|[{'record_field',78,{'atom',78,'parents'},{'nil',78}}|[{'record_field',79,{'atom',79,'pos'}}|[{'record_field',80,{'atom',80,'attributes'},{'nil',80}}|[{'record_field',81,{'atom',81,'content'},{'nil',81}}|[{'record_field',82,{'atom',82,'language'},{'string',82,[]}}|[{'record_field',83,{'atom',83,'xmlbase'},{'string',83,[]}}|[{'record_field',84,{'atom',84,'elementdef'},{'atom',84,'undeclared'}}]]]]]]]]]]],[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','xmlText'},[{'record_field',90,{'atom',90,'parents'},{'nil',90}}|[{'record_field',91,{'atom',91,'pos'}}|[{'record_field',92,{'atom',92,'language'},{'nil',92}}|[{'record_field',93,{'atom',93,'value'}}|[{'record_field',94,{'atom',94,'type'},{'atom',94,'text'}}]]]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','xmlComment'},[{'record_field',99,{'atom',99,'parents'},{'nil',99}}|[{'record_field',100,{'atom',100,'pos'}}|[{'record_field',101,{'atom',101,'language'},{'nil',101}}|[{'record_field',102,{'atom',102,'value'}}]]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','xmlPI'},[{'record_field',107,{'atom',107,'name'}}|[{'record_field',108,{'atom',108,'parents'},{'nil',108}}|[{'record_field',109,{'atom',109,'pos'}}|[{'record_field',110,{'atom',110,'value'}}]]]],[]}],
		%% Line 113
		'type' =
		    %% Line 113
		    [{{'record','xmlDocument'},[{'record_field',114,{'atom',114,'content'}}],[]}],
		%% Line 120
		'type' =
		    %% Line 120
		    [{{'record','xmlContext'},[{'record_field',121,{'atom',121,'axis_type'},{'atom',121,'forward'}}|[{'record_field',122,{'atom',122,'context_node'}}|[{'record_field',123,{'atom',123,'context_position'},{'integer',123,1}}|[{'record_field',124,{'atom',124,'nodeset'},{'nil',124}}|[{'record_field',125,{'atom',125,'bindings'},{'nil',125}}|[{'record_field',126,{'atom',126,'functions'},{'nil',126}}|[{'record_field',127,{'atom',127,'namespace'},{'nil',127}}|[{'record_field',128,{'atom',128,'whole_document'}}]]]]]]]],[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{{'record','xmlNode'},[{'record_field',132,{'atom',132,'type'},{'atom',132,'element'}}|[{'record_field',133,{'atom',133,'node'}}|[{'record_field',134,{'atom',134,'parents'},{'nil',134}}|[{'record_field',135,{'atom',135,'pos'},{'integer',135,1}}]]]],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{{'record','xmlObj'},[{'record_field',139,{'atom',139,'type'}}|[{'record_field',140,{'atom',140,'value'}}]],[]}],
		%% Line 143
		'type' =
		    %% Line 143
		    [{{'record','xmerl_fun_states'},[{'record_field',143,{'atom',143,'event'}}|[{'record_field',144,{'atom',144,'hook'}}|[{'record_field',145,{'atom',145,'rules'}}|[{'record_field',146,{'atom',146,'fetch'}}|[{'record_field',147,{'atom',147,'cont'}}]]]]],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{{'record','xmerl_scanner'},[{'record_field',152,{'atom',152,'encoding'},{'atom',152,'undefined'}}|[{'record_field',153,{'atom',153,'standalone'},{'atom',153,'no'}}|[{'record_field',155,{'atom',155,'environment'},{'atom',155,'prolog'}}|[{'record_field',156,{'atom',156,'declarations'},{'nil',156}}|[{'record_field',157,{'atom',157,'doctype_name'}}|[{'record_field',158,{'atom',158,'doctype_DTD'},{'atom',158,'internal'}}|[{'record_field',159,{'atom',159,'comments'},{'atom',159,'true'}}|[{'record_field',160,{'atom',160,'document'},{'atom',160,'false'}}|[{'record_field',161,{'atom',161,'default_attrs'},{'atom',161,'false'}}|[{'record_field',162,{'atom',162,'rules'}}|[{'record_field',163,{'atom',163,'keep_rules'},{'atom',163,'false'}}|[{'record_field',164,{'atom',164,'namespace_conformant'},{'atom',164,'false'}}|[{'record_field',165,{'atom',165,'xmlbase'}}|[{'record_field',166,{'atom',166,'xmlbase_cache'}}|[{'record_field',167,{'atom',167,'fetch_path'},{'nil',167}}|[{'record_field',169,{'atom',169,'filename'},{'atom',169,'file_name_unknown'}}|[{'record_field',170,{'atom',170,'validation'},{'atom',170,'off'}}|[{'record_field',171,{'atom',171,'schemaLocation'},{'nil',171}}|[{'record_field',172,{'atom',172,'space'},{'atom',172,'preserve'}}|[{'record_field',173,{'atom',173,'event_fun'}}|[{'record_field',174,{'atom',174,'hook_fun'}}|[{'record_field',175,{'atom',175,'acc_fun'}}|[{'record_field',176,{'atom',176,'fetch_fun'}}|[{'record_field',177,{'atom',177,'close_fun'}}|[{'record_field',178,{'atom',178,'continuation_fun'}}|[{'record_field',179,{'atom',179,'rules_read_fun'}}|[{'record_field',180,{'atom',180,'rules_write_fun'}}|[{'record_field',181,{'atom',181,'rules_delete_fun'}}|[{'record_field',182,{'atom',182,'user_state'}}|[{'record_field',183,{'atom',183,'fun_states'},{'record',183,'xmerl_fun_states',[]}}|[{'record_field',184,{'atom',184,'entity_references'},{'nil',184}}|[{'record_field',185,{'atom',185,'text_decl'},{'atom',185,'false'}}|[{'record_field',186,{'atom',186,'quiet'},{'atom',186,'false'}}|[{'record_field',187,{'atom',187,'col'},{'integer',187,1}}|[{'record_field',188,{'atom',188,'line'},{'integer',188,1}}|[{'record_field',189,{'atom',189,'common_data'},{'nil',189}}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 198
		'type' =
		    %% Line 198
		    [{{'record','xmerl_event'},[{'record_field',199,{'atom',199,'event'}}|[{'record_field',200,{'atom',200,'line'}}|[{'record_field',201,{'atom',201,'col'}}|[{'record_field',202,{'atom',202,'pos'}}|[{'record_field',203,{'atom',203,'data'}}]]]]],[]}],
		%% Line 215
		'export_type' =
		    %% Line 215
		    [{'notification',0}],
		%% Line 257
		'type' =
		    %% Line 257
		    [{{'record','state'},[{'record_field',257,{'atom',257,'host'}}|[{'record_field',258,{'atom',258,'port'}}|[{'record_field',259,{'atom',259,'connection'}}|[{'record_field',260,{'atom',260,'capabilities'}}|[{'record_field',261,{'atom',261,'session_id'}}|[{'record_field',262,{'atom',262,'msg_id'},{'integer',262,1}}|[{'record_field',263,{'atom',263,'hello_status'}}|[{'record_field',264,{'atom',264,'buff'},{'bin',264,[]}}|[{'record_field',265,{'atom',265,'pending'},{'nil',265}}|[{'record_field',266,{'atom',266,'event_receiver'}}]]]]]]]]]],[]}],
		%% Line 269
		'type' =
		    %% Line 269
		    [{{'record','options'},[{'record_field',269,{'atom',269,'ssh'},{'nil',269}}|[{'record_field',270,{'atom',270,'host'}}|[{'record_field',271,{'atom',271,'port'},{'integer',271,830}}|[{'record_field',272,{'atom',272,'timeout'},{'atom',272,'infinity'}}|[{'record_field',273,{'atom',273,'name'}}]]]]],[]}],
		%% Line 276
		'type' =
		    %% Line 276
		    [{{'record','connection'},[{'record_field',276,{'atom',276,'reference'}}|[{'record_field',277,{'atom',277,'host'}}|[{'record_field',278,{'atom',278,'port'}}|[{'record_field',279,{'atom',279,'name'}}]]]],[]}],
		%% Line 282
		'type' =
		    %% Line 282
		    [{{'record','pending'},[{'record_field',282,{'atom',282,'tref'}}|[{'record_field',283,{'atom',283,'ref'}}|[{'record_field',284,{'atom',284,'msg_id'}}|[{'record_field',285,{'atom',285,'op'}}|[{'record_field',286,{'atom',286,'caller'}}]]]]],[]}],
		%% Line 291
		'type' =
		    %% Line 291
		    [{'client',{'type',291,'union',[{'type',291,'handle',[]}|[{'remote_type',291,[{'atom',291,'ct_gen_conn'}|[{'atom',291,'server_id'}|[[]]]]}|[{'remote_type',291,[{'atom',291,'ct_gen_conn'}|[{'atom',291,'target_name'}|[[]]]]}]]]},[]}],
		%% Line 292
		'type' =
		    %% Line 292
		    [{'handle',{'type',292,'term',[]},[]}],
		%% Line 296
		'type' =
		    %% Line 296
		    [{'options',{'type',296,'list',[{'type',296,'option',[]}]},[]}],
		%% Line 299
		'type' =
		    %% Line 299
		    [{'option',{'type',299,'union',[{'type',299,'tuple',[{'atom',299,'ssh'}|[{'type',299,'host',[]}]]}|[{'type',299,'tuple',[{'atom',299,'port'}|[{'remote_type',299,[{'atom',299,'inet'}|[{'atom',299,'port_number'}|[[]]]]}]]}|[{'type',299,'tuple',[{'atom',299,'user'}|[{'type',299,'string',[]}]]}|[{'type',300,'tuple',[{'atom',300,'password'}|[{'type',300,'string',[]}]]}|[{'type',300,'tuple',[{'atom',300,'user_dir'}|[{'type',300,'string',[]}]]}|[{'type',301,'tuple',[{'atom',301,'timeout'}|[{'type',301,'timeout',[]}]]}]]]]]]},[]}],
		%% Line 302
		'type' =
		    %% Line 302
		    [{'host',{'type',302,'union',[{'remote_type',302,[{'atom',302,'inet'}|[{'atom',302,'hostname'}|[[]]]]}|[{'remote_type',302,[{'atom',302,'inet'}|[{'atom',302,'ip_address'}|[[]]]]}]]},[]}],
		%% Line 304
		'type' =
		    %% Line 304
		    [{'notification',{'type',304,'tuple',[{'atom',304,'notification'}|[{'type',304,'xml_attributes',[]}|[{'type',304,'notification_content',[]}]]]},[]}],
		%% Line 305
		'type' =
		    %% Line 305
		    [{'notification_content',{'type',305,'list',[{'type',305,'union',[{'type',305,'event_time',[]}|[{'type',305,'simple_xml',[]}]]}]},[]}],
		%% Line 306
		'type' =
		    %% Line 306
		    [{'event_time',{'type',306,'tuple',[{'atom',306,'eventTime'}|[{'type',306,'xml_attributes',[]}|[{'type',306,'list',[{'type',306,'xs_datetime',[]}]}]]]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{'stream_name',{'type',308,'string',[]},[]}],
		%% Line 309
		'type' =
		    %% Line 309
		    [{'streams',{'type',309,'list',[{'type',309,'tuple',[{'type',309,'stream_name',[]}|[{'type',309,'list',[{'type',309,'stream_data',[]}]}]]}]},[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'stream_data',{'type',310,'union',[{'type',310,'tuple',[{'atom',310,'description'}|[{'type',310,'string',[]}]]}|[{'type',311,'tuple',[{'atom',311,'replaySupport'}|[{'type',311,'string',[]}]]}|[{'type',312,'tuple',[{'atom',312,'replayLogCreationTime'}|[{'type',312,'string',[]}]]}|[{'type',313,'tuple',[{'atom',313,'replayLogAgedTime'}|[{'type',313,'string',[]}]]}]]]]},[]}],
		%% Line 318
		'type' =
		    %% Line 318
		    [{'error_reason',{'type',318,'term',[]},[]}],
		%% Line 320
		'type' =
		    %% Line 320
		    [{'simple_xml',{'type',320,'union',[{'type',320,'tuple',[{'type',320,'xml_tag',[]}|[{'type',320,'xml_attributes',[]}|[{'type',320,'xml_content',[]}]]]}|[{'type',321,'tuple',[{'type',321,'xml_tag',[]}|[{'type',321,'xml_content',[]}]]}|[{'type',322,'xml_tag',[]}]]]},[]}],
		%% Line 325
		'type' =
		    %% Line 325
		    [{'xml_tag',{'type',325,'atom',[]},[]}],
		%% Line 326
		'type' =
		    %% Line 326
		    [{'xml_attributes',{'type',326,'list',[{'type',326,'tuple',[{'type',326,'xml_attribute_tag',[]}|[{'type',326,'xml_attribute_value',[]}]]}]},[]}],
		%% Line 327
		'type' =
		    %% Line 327
		    [{'xml_attribute_tag',{'type',327,'atom',[]},[]}],
		%% Line 328
		'type' =
		    %% Line 328
		    [{'xml_attribute_value',{'type',328,'string',[]},[]}],
		%% Line 329
		'type' =
		    %% Line 329
		    [{'xml_content',{'type',329,'list',[{'type',329,'union',[{'type',329,'simple_xml',[]}|[{'type',329,'iolist',[]}]]}]},[]}],
		%% Line 330
		'type' =
		    %% Line 330
		    [{'xpath',{'type',330,'tuple',[{'atom',330,'xpath'}|[{'type',330,'string',[]}]]},[]}],
		%% Line 332
		'type' =
		    %% Line 332
		    [{'netconf_db',{'type',332,'union',[{'atom',332,'running'}|[{'atom',332,'startup'}|[{'atom',332,'candidate'}]]]},[]}],
		%% Line 333
		'type' =
		    %% Line 333
		    [{'xs_datetime',{'type',333,'string',[]},[]}],
		%% Line 343
		'spec' =
		    %% Line 343
		    [{{'open',1},[{'type',343,'bounded_fun',[{'type',343,'fun',[{'type',343,'product',[{'var',343,'Options'}]}|[{'var',343,'Result'}]]}|[[{'type',344,'constraint',[{'atom',344,'is_subtype'}|[[{'var',344,'Options'}|[{'type',344,'options',[]}]]]]}|[{'type',345,'constraint',[{'atom',345,'is_subtype'}|[[{'var',345,'Result'}|[{'type',345,'union',[{'type',345,'tuple',[{'atom',345,'ok'}|[{'type',345,'handle',[]}]]}|[{'type',345,'tuple',[{'atom',345,'error'}|[{'type',345,'error_reason',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 367
		'spec' =
		    %% Line 367
		    [{{'open',2},[{'type',367,'bounded_fun',[{'type',367,'fun',[{'type',367,'product',[{'var',367,'KeyOrName'}|[{'var',367,'ExtraOptions'}]]}|[{'var',367,'Result'}]]}|[[{'type',368,'constraint',[{'atom',368,'is_subtype'}|[[{'var',368,'KeyOrName'}|[{'remote_type',368,[{'atom',368,'ct_gen_conn'}|[{'atom',368,'key_or_name'}|[[]]]]}]]]]}|[{'type',369,'constraint',[{'atom',369,'is_subtype'}|[[{'var',369,'ExtraOptions'}|[{'type',369,'options',[]}]]]]}|[{'type',370,'constraint',[{'atom',370,'is_subtype'}|[[{'var',370,'Result'}|[{'type',370,'union',[{'type',370,'tuple',[{'atom',370,'ok'}|[{'type',370,'handle',[]}]]}|[{'type',370,'tuple',[{'atom',370,'error'}|[{'type',370,'error_reason',[]}]]}]]}]]]]}]]]]]}]}],
		%% Line 431
		'spec' =
		    %% Line 431
		    [{{'only_open',1},[{'type',431,'bounded_fun',[{'type',431,'fun',[{'type',431,'product',[{'var',431,'Options'}]}|[{'var',431,'Result'}]]}|[[{'type',432,'constraint',[{'atom',432,'is_subtype'}|[[{'var',432,'Options'}|[{'type',432,'options',[]}]]]]}|[{'type',433,'constraint',[{'atom',433,'is_subtype'}|[[{'var',433,'Result'}|[{'type',433,'union',[{'type',433,'tuple',[{'atom',433,'ok'}|[{'type',433,'handle',[]}]]}|[{'type',433,'tuple',[{'atom',433,'error'}|[{'type',433,'error_reason',[]}]]}]]}]]]]}]]]]}]}],
		%% Line 444
		'spec' =
		    %% Line 444
		    [{{'only_open',2},[{'type',444,'bounded_fun',[{'type',444,'fun',[{'type',444,'product',[{'var',444,'KeyOrName'}|[{'var',444,'ExtraOptions'}]]}|[{'var',444,'Result'}]]}|[[{'type',445,'constraint',[{'atom',445,'is_subtype'}|[[{'var',445,'KeyOrName'}|[{'remote_type',445,[{'atom',445,'ct_gen_conn'}|[{'atom',445,'key_or_name'}|[[]]]]}]]]]}|[{'type',446,'constraint',[{'atom',446,'is_subtype'}|[[{'var',446,'ExtraOptions'}|[{'type',446,'options',[]}]]]]}|[{'type',447,'constraint',[{'atom',447,'is_subtype'}|[[{'var',447,'Result'}|[{'type',447,'union',[{'type',447,'tuple',[{'atom',447,'ok'}|[{'type',447,'handle',[]}]]}|[{'type',447,'tuple',[{'atom',447,'error'}|[{'type',447,'error_reason',[]}]]}]]}]]]]}]]]]]}]}],
		%% Line 464
		'spec' =
		    %% Line 464
		    [{{'hello',2},[{'type',464,'bounded_fun',[{'type',464,'fun',[{'type',464,'product',[{'var',464,'Client'}|[{'var',464,'Timeout'}]]}|[{'var',464,'Result'}]]}|[[{'type',465,'constraint',[{'atom',465,'is_subtype'}|[[{'var',465,'Client'}|[{'type',465,'handle',[]}]]]]}|[{'type',466,'constraint',[{'atom',466,'is_subtype'}|[[{'var',466,'Timeout'}|[{'type',466,'timeout',[]}]]]]}|[{'type',467,'constraint',[{'atom',467,'is_subtype'}|[[{'var',467,'Result'}|[{'type',467,'union',[{'atom',467,'ok'}|[{'type',467,'tuple',[{'atom',467,'error'}|[{'type',467,'error_reason',[]}]]}]]}]]]]}]]]]]}]}],
		%% Line 484
		'spec' =
		    %% Line 484
		    [{{'get_session_id',2},[{'type',484,'bounded_fun',[{'type',484,'fun',[{'type',484,'product',[{'var',484,'Client'}|[{'var',484,'Timeout'}]]}|[{'var',484,'Result'}]]}|[[{'type',485,'constraint',[{'atom',485,'is_subtype'}|[[{'var',485,'Client'}|[{'type',485,'client',[]}]]]]}|[{'type',486,'constraint',[{'atom',486,'is_subtype'}|[[{'var',486,'Timeout'}|[{'type',486,'timeout',[]}]]]]}|[{'type',487,'constraint',[{'atom',487,'is_subtype'}|[[{'var',487,'Result'}|[{'type',487,'union',[{'type',487,'pos_integer',[]}|[{'type',487,'tuple',[{'atom',487,'error'}|[{'type',487,'error_reason',[]}]]}]]}]]]]}]]]]]}]}],
		%% Line 502
		'spec' =
		    %% Line 502
		    [{{'get_capabilities',2},[{'type',502,'bounded_fun',[{'type',502,'fun',[{'type',502,'product',[{'var',502,'Client'}|[{'var',502,'Timeout'}]]}|[{'var',502,'Result'}]]}|[[{'type',503,'constraint',[{'atom',503,'is_subtype'}|[[{'var',503,'Client'}|[{'type',503,'client',[]}]]]]}|[{'type',504,'constraint',[{'atom',504,'is_subtype'}|[[{'var',504,'Timeout'}|[{'type',504,'timeout',[]}]]]]}|[{'type',505,'constraint',[{'atom',505,'is_subtype'}|[[{'var',505,'Result'}|[{'type',505,'union',[{'type',505,'list',[{'type',505,'string',[]}]}|[{'type',505,'tuple',[{'atom',505,'error'}|[{'type',505,'error_reason',[]}]]}]]}]]]]}]]]]]}]}],
		%% Line 535
		'spec' =
		    %% Line 535
		    [{{'send',3},[{'type',535,'bounded_fun',[{'type',535,'fun',[{'type',535,'product',[{'var',535,'Client'}|[{'var',535,'SimpleXml'}|[{'var',535,'Timeout'}]]]}|[{'var',535,'Result'}]]}|[[{'type',536,'constraint',[{'atom',536,'is_subtype'}|[[{'var',536,'Client'}|[{'type',536,'client',[]}]]]]}|[{'type',537,'constraint',[{'atom',537,'is_subtype'}|[[{'var',537,'SimpleXml'}|[{'type',537,'simple_xml',[]}]]]]}|[{'type',538,'constraint',[{'atom',538,'is_subtype'}|[[{'var',538,'Timeout'}|[{'type',538,'timeout',[]}]]]]}|[{'type',539,'constraint',[{'atom',539,'is_subtype'}|[[{'var',539,'Result'}|[{'type',539,'union',[{'type',539,'simple_xml',[]}|[{'type',539,'tuple',[{'atom',539,'error'}|[{'type',539,'error_reason',[]}]]}]]}]]]]}]]]]]]}]}],
		%% Line 555
		'spec' =
		    %% Line 555
		    [{{'send_rpc',3},[{'type',555,'bounded_fun',[{'type',555,'fun',[{'type',555,'product',[{'var',555,'Client'}|[{'var',555,'SimpleXml'}|[{'var',555,'Timeout'}]]]}|[{'var',555,'Result'}]]}|[[{'type',556,'constraint',[{'atom',556,'is_subtype'}|[[{'var',556,'Client'}|[{'type',556,'client',[]}]]]]}|[{'type',557,'constraint',[{'atom',557,'is_subtype'}|[[{'var',557,'SimpleXml'}|[{'type',557,'simple_xml',[]}]]]]}|[{'type',558,'constraint',[{'atom',558,'is_subtype'}|[[{'var',558,'Timeout'}|[{'type',558,'timeout',[]}]]]]}|[{'type',559,'constraint',[{'atom',559,'is_subtype'}|[[{'var',559,'Result'}|[{'type',559,'union',[{'type',559,'list',[{'type',559,'simple_xml',[]}]}|[{'type',559,'tuple',[{'atom',559,'error'}|[{'type',559,'error_reason',[]}]]}]]}]]]]}]]]]]]}]}],
		%% Line 580
		'spec' =
		    %% Line 580
		    [{{'lock',3},[{'type',580,'bounded_fun',[{'type',580,'fun',[{'type',580,'product',[{'var',580,'Client'}|[{'var',580,'Target'}|[{'var',580,'Timeout'}]]]}|[{'var',580,'Result'}]]}|[[{'type',581,'constraint',[{'atom',581,'is_subtype'}|[[{'var',581,'Client'}|[{'type',581,'client',[]}]]]]}|[{'type',582,'constraint',[{'atom',582,'is_subtype'}|[[{'var',582,'Target'}|[{'type',582,'netconf_db',[]}]]]]}|[{'type',583,'constraint',[{'atom',583,'is_subtype'}|[[{'var',583,'Timeout'}|[{'type',583,'timeout',[]}]]]]}|[{'type',584,'constraint',[{'atom',584,'is_subtype'}|[[{'var',584,'Result'}|[{'type',584,'union',[{'atom',584,'ok'}|[{'type',584,'tuple',[{'atom',584,'error'}|[{'type',584,'error_reason',[]}]]}]]}]]]]}]]]]]]}]}],
		%% Line 610
		'spec' =
		    %% Line 610
		    [{{'unlock',3},[{'type',610,'bounded_fun',[{'type',610,'fun',[{'type',610,'product',[{'var',610,'Client'}|[{'var',610,'Target'}|[{'var',610,'Timeout'}]]]}|[{'var',610,'Result'}]]}|[[{'type',611,'constraint',[{'atom',611,'is_subtype'}|[[{'var',611,'Client'}|[{'type',611,'client',[]}]]]]}|[{'type',612,'constraint',[{'atom',612,'is_subtype'}|[[{'var',612,'Target'}|[{'type',612,'netconf_db',[]}]]]]}|[{'type',613,'constraint',[{'atom',613,'is_subtype'}|[[{'var',613,'Timeout'}|[{'type',613,'timeout',[]}]]]]}|[{'type',614,'constraint',[{'atom',614,'is_subtype'}|[[{'var',614,'Result'}|[{'type',614,'union',[{'atom',614,'ok'}|[{'type',614,'tuple',[{'atom',614,'error'}|[{'type',614,'error_reason',[]}]]}]]}]]]]}]]]]]]}]}],
		%% Line 634
		'spec' =
		    %% Line 634
		    [{{'get',3},[{'type',634,'bounded_fun',[{'type',634,'fun',[{'type',634,'product',[{'var',634,'Client'}|[{'var',634,'Filter'}|[{'var',634,'Timeout'}]]]}|[{'var',634,'Result'}]]}|[[{'type',635,'constraint',[{'atom',635,'is_subtype'}|[[{'var',635,'Client'}|[{'type',635,'client',[]}]]]]}|[{'type',636,'constraint',[{'atom',636,'is_subtype'}|[[{'var',636,'Filter'}|[{'type',636,'union',[{'type',636,'simple_xml',[]}|[{'type',636,'xpath',[]}]]}]]]]}|[{'type',637,'constraint',[{'atom',637,'is_subtype'}|[[{'var',637,'Timeout'}|[{'type',637,'timeout',[]}]]]]}|[{'type',638,'constraint',[{'atom',638,'is_subtype'}|[[{'var',638,'Result'}|[{'type',638,'union',[{'type',638,'tuple',[{'atom',638,'ok'}|[{'type',638,'list',[{'type',638,'simple_xml',[]}]}]]}|[{'type',638,'tuple',[{'atom',638,'error'}|[{'type',638,'error_reason',[]}]]}]]}]]]]}]]]]]]}]}],
		%% Line 659
		'spec' =
		    %% Line 659
		    [{{'get_config',4},[{'type',659,'bounded_fun',[{'type',659,'fun',[{'type',659,'product',[{'var',659,'Client'}|[{'var',659,'Source'}|[{'var',659,'Filter'}|[{'var',659,'Timeout'}]]]]}|[{'var',659,'Result'}]]}|[[{'type',660,'constraint',[{'atom',660,'is_subtype'}|[[{'var',660,'Client'}|[{'type',660,'client',[]}]]]]}|[{'type',661,'constraint',[{'atom',661,'is_subtype'}|[[{'var',661,'Source'}|[{'type',661,'netconf_db',[]}]]]]}|[{'type',662,'constraint',[{'atom',662,'is_subtype'}|[[{'var',662,'Filter'}|[{'type',662,'union',[{'type',662,'simple_xml',[]}|[{'type',662,'xpath',[]}]]}]]]]}|[{'type',663,'constraint',[{'atom',663,'is_subtype'}|[[{'var',663,'Timeout'}|[{'type',663,'timeout',[]}]]]]}|[{'type',664,'constraint',[{'atom',664,'is_subtype'}|[[{'var',664,'Result'}|[{'type',664,'union',[{'type',664,'tuple',[{'atom',664,'ok'}|[{'type',664,'list',[{'type',664,'simple_xml',[]}]}]]}|[{'type',664,'tuple',[{'atom',664,'error'}|[{'type',664,'error_reason',[]}]]}]]}]]]]}]]]]]]]}]}],
		%% Line 686
		'spec' =
		    %% Line 686
		    [{{'edit_config',4},[{'type',686,'bounded_fun',[{'type',686,'fun',[{'type',686,'product',[{'var',686,'Client'}|[{'var',686,'Target'}|[{'var',686,'Config'}|[{'var',686,'Timeout'}]]]]}|[{'var',686,'Result'}]]}|[[{'type',687,'constraint',[{'atom',687,'is_subtype'}|[[{'var',687,'Client'}|[{'type',687,'client',[]}]]]]}|[{'type',688,'constraint',[{'atom',688,'is_subtype'}|[[{'var',688,'Target'}|[{'type',688,'netconf_db',[]}]]]]}|[{'type',689,'constraint',[{'atom',689,'is_subtype'}|[[{'var',689,'Config'}|[{'type',689,'simple_xml',[]}]]]]}|[{'type',690,'constraint',[{'atom',690,'is_subtype'}|[[{'var',690,'Timeout'}|[{'type',690,'timeout',[]}]]]]}|[{'type',691,'constraint',[{'atom',691,'is_subtype'}|[[{'var',691,'Result'}|[{'type',691,'union',[{'atom',691,'ok'}|[{'type',691,'tuple',[{'atom',691,'error'}|[{'type',691,'error_reason',[]}]]}]]}]]]]}]]]]]]]}]}],
		%% Line 711
		'spec' =
		    %% Line 711
		    [{{'delete_config',3},[{'type',711,'bounded_fun',[{'type',711,'fun',[{'type',711,'product',[{'var',711,'Client'}|[{'var',711,'Target'}|[{'var',711,'Timeout'}]]]}|[{'var',711,'Result'}]]}|[[{'type',712,'constraint',[{'atom',712,'is_subtype'}|[[{'var',712,'Client'}|[{'type',712,'client',[]}]]]]}|[{'type',713,'constraint',[{'atom',713,'is_subtype'}|[[{'var',713,'Target'}|[{'type',713,'union',[{'atom',713,'startup'}|[{'atom',713,'candidate'}]]}]]]]}|[{'type',714,'constraint',[{'atom',714,'is_subtype'}|[[{'var',714,'Timeout'}|[{'type',714,'timeout',[]}]]]]}|[{'type',715,'constraint',[{'atom',715,'is_subtype'}|[[{'var',715,'Result'}|[{'type',715,'union',[{'atom',715,'ok'}|[{'type',715,'tuple',[{'atom',715,'error'}|[{'type',715,'error_reason',[]}]]}]]}]]]]}]]]]]]}]}],
		%% Line 734
		'spec' =
		    %% Line 734
		    [{{'copy_config',4},[{'type',734,'bounded_fun',[{'type',734,'fun',[{'type',734,'product',[{'var',734,'Client'}|[{'var',734,'Target'}|[{'var',734,'Source'}|[{'var',734,'Timeout'}]]]]}|[{'var',734,'Result'}]]}|[[{'type',735,'constraint',[{'atom',735,'is_subtype'}|[[{'var',735,'Client'}|[{'type',735,'client',[]}]]]]}|[{'type',736,'constraint',[{'atom',736,'is_subtype'}|[[{'var',736,'Target'}|[{'type',736,'netconf_db',[]}]]]]}|[{'type',737,'constraint',[{'atom',737,'is_subtype'}|[[{'var',737,'Source'}|[{'type',737,'netconf_db',[]}]]]]}|[{'type',738,'constraint',[{'atom',738,'is_subtype'}|[[{'var',738,'Timeout'}|[{'type',738,'timeout',[]}]]]]}|[{'type',739,'constraint',[{'atom',739,'is_subtype'}|[[{'var',739,'Result'}|[{'type',739,'union',[{'atom',739,'ok'}|[{'type',739,'tuple',[{'atom',739,'error'}|[{'type',739,'error_reason',[]}]]}]]}]]]]}]]]]]]]}]}],
		%% Line 758
		'spec' =
		    %% Line 758
		    [{{'action',3},[{'type',758,'bounded_fun',[{'type',758,'fun',[{'type',758,'product',[{'var',758,'Client'}|[{'var',758,'Action'}|[{'var',758,'Timeout'}]]]}|[{'var',758,'Result'}]]}|[[{'type',759,'constraint',[{'atom',759,'is_subtype'}|[[{'var',759,'Client'}|[{'type',759,'client',[]}]]]]}|[{'type',760,'constraint',[{'atom',760,'is_subtype'}|[[{'var',760,'Action'}|[{'type',760,'simple_xml',[]}]]]]}|[{'type',761,'constraint',[{'atom',761,'is_subtype'}|[[{'var',761,'Timeout'}|[{'type',761,'timeout',[]}]]]]}|[{'type',762,'constraint',[{'atom',762,'is_subtype'}|[[{'var',762,'Result'}|[{'type',762,'union',[{'type',762,'tuple',[{'atom',762,'ok'}|[{'type',762,'list',[{'type',762,'simple_xml',[]}]}]]}|[{'type',762,'tuple',[{'atom',762,'error'}|[{'type',762,'error_reason',[]}]]}]]}]]]]}]]]]]]}]}],
		%% Line 845
		'spec' =
		    %% Line 845
		    [{{'create_subscription',6},[{'type',845,'bounded_fun',[{'type',845,'fun',[{'type',845,'product',[{'var',845,'Client'}|[{'var',845,'Stream'}|[{'var',845,'Filter'}|[{'var',845,'StartTime'}|[{'var',845,'StopTime'}|[{'var',845,'Timeout'}]]]]]]}|[{'var',846,'Result'}]]}|[[{'type',847,'constraint',[{'atom',847,'is_subtype'}|[[{'var',847,'Client'}|[{'type',847,'client',[]}]]]]}|[{'type',848,'constraint',[{'atom',848,'is_subtype'}|[[{'var',848,'Stream'}|[{'type',848,'stream_name',[]}]]]]}|[{'type',849,'constraint',[{'atom',849,'is_subtype'}|[[{'var',849,'Filter'}|[{'type',849,'union',[{'type',849,'simple_xml',[]}|[{'type',849,'list',[{'type',849,'simple_xml',[]}]}]]}]]]]}|[{'type',850,'constraint',[{'atom',850,'is_subtype'}|[[{'var',850,'StartTime'}|[{'type',850,'xs_datetime',[]}]]]]}|[{'type',851,'constraint',[{'atom',851,'is_subtype'}|[[{'var',851,'StopTime'}|[{'type',851,'xs_datetime',[]}]]]]}|[{'type',852,'constraint',[{'atom',852,'is_subtype'}|[[{'var',852,'Timeout'}|[{'type',852,'timeout',[]}]]]]}|[{'type',853,'constraint',[{'atom',853,'is_subtype'}|[[{'var',853,'Result'}|[{'type',853,'union',[{'atom',853,'ok'}|[{'type',853,'tuple',[{'atom',853,'error'}|[{'type',853,'error_reason',[]}]]}]]}]]]]}]]]]]]]]]}]}],
		%% Line 918
		'spec' =
		    %% Line 918
		    [{{'get_event_streams',3},[{'type',918,'bounded_fun',[{'type',918,'fun',[{'type',918,'product',[{'var',918,'Client'}|[{'var',918,'Streams'}|[{'var',918,'Timeout'}]]]}|[{'var',919,'Result'}]]}|[[{'type',920,'constraint',[{'atom',920,'is_subtype'}|[[{'var',920,'Client'}|[{'type',920,'client',[]}]]]]}|[{'type',921,'constraint',[{'atom',921,'is_subtype'}|[[{'var',921,'Streams'}|[{'type',921,'list',[{'type',921,'stream_name',[]}]}]]]]}|[{'type',922,'constraint',[{'atom',922,'is_subtype'}|[[{'var',922,'Timeout'}|[{'type',922,'timeout',[]}]]]]}|[{'type',923,'constraint',[{'atom',923,'is_subtype'}|[[{'var',923,'Result'}|[{'type',923,'union',[{'type',923,'tuple',[{'atom',923,'ok'}|[{'type',923,'streams',[]}]]}|[{'type',923,'tuple',[{'atom',923,'error'}|[{'type',923,'error_reason',[]}]]}]]}]]]]}]]]]]]}]}],
		%% Line 969
		'spec' =
		    %% Line 969
		    [{{'close_session',2},[{'type',969,'bounded_fun',[{'type',969,'fun',[{'type',969,'product',[{'var',969,'Client'}|[{'var',969,'Timeout'}]]}|[{'var',969,'Result'}]]}|[[{'type',970,'constraint',[{'atom',970,'is_subtype'}|[[{'var',970,'Client'}|[{'type',970,'client',[]}]]]]}|[{'type',971,'constraint',[{'atom',971,'is_subtype'}|[[{'var',971,'Timeout'}|[{'type',971,'timeout',[]}]]]]}|[{'type',972,'constraint',[{'atom',972,'is_subtype'}|[[{'var',972,'Result'}|[{'type',972,'union',[{'atom',972,'ok'}|[{'type',972,'tuple',[{'atom',972,'error'}|[{'type',972,'error_reason',[]}]]}]]}]]]]}]]]]]}]}],
		%% Line 994
		'spec' =
		    %% Line 994
		    [{{'kill_session',3},[{'type',994,'bounded_fun',[{'type',994,'fun',[{'type',994,'product',[{'var',994,'Client'}|[{'var',994,'SessionId'}|[{'var',994,'Timeout'}]]]}|[{'var',994,'Result'}]]}|[[{'type',995,'constraint',[{'atom',995,'is_subtype'}|[[{'var',995,'Client'}|[{'type',995,'client',[]}]]]]}|[{'type',996,'constraint',[{'atom',996,'is_subtype'}|[[{'var',996,'SessionId'}|[{'type',996,'pos_integer',[]}]]]]}|[{'type',997,'constraint',[{'atom',997,'is_subtype'}|[[{'var',997,'Timeout'}|[{'type',997,'timeout',[]}]]]]}|[{'type',998,'constraint',[{'atom',998,'is_subtype'}|[[{'var',998,'Result'}|[{'type',998,'union',[{'atom',998,'ok'}|[{'type',998,'tuple',[{'atom',998,'error'}|[{'type',998,'error_reason',[]}]]}]]}]]]]}]]]]]]}]}]]
'open'/1 =
    %% Line 363
    fun (_cor0) ->
	%% Line 364
	apply 'open'/4
	    (_cor0, {'options',[],'undefined',830,'infinity','undefined'}, [], 'true')
'open'/2 =
    %% Line 399
    fun (_cor1,_cor0) ->
	%% Line 400
	apply 'open'/3
	    (_cor1, _cor0, 'true')
'open'/3 =
    %% Line 402
    fun (_cor2,_cor1,_cor0) ->
	let <SortedExtra> =
	    %% Line 403
	    call 'lists':'keysort'
		(1, _cor1)
	in  let <_cor4> =
		%% Line 404
		call 'ct':'get_config'
		    (_cor2, [])
	    in  let <SortedConfig> =
		    %% Line 404
		    call 'lists':'keysort'
			(1, _cor4)
		in  let <AllOpts> =
			%% Line 405
			call 'lists':'ukeymerge'
			    (1, SortedConfig, SortedExtra)
		    in  %% Line 406
			apply 'open'/4
			    (AllOpts, {'options',[],'undefined',830,'infinity',_cor2}, [{'name',_cor2}|[]], _cor0)
'open'/4 =
    %% Line 408
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 409
	case apply 'check_options'/4
		 (_cor3, 'undefined', 'undefined', _cor2) of
	  %% Line 410
	  <{Host,Port,Options}> when 'true' ->
	      let <_cor4> =
		  %% Line 412
		  call 'erlang':'++'
		      (_cor1, [{'reconnect','false'}|[{'use_existing_connection','false'}|[{'forward_messages','true'}]]])
	      in  %% Line 411
		  case call 'ct_gen_conn':'start'
			   ({Host,Port}, Options, 'ct_netconfc', _cor4) of
		    %% Line 415
		    <{'ok',Client}>
			when call 'erlang':'=:='
			      (_cor0,
			       'true') ->
			%% Line 416
			( case Options of
			    ( <( {'options',_cor14,_cor15,_cor16,_rec0,_cor17}
				 -| ['compiler_generated'] )> when 'true' ->
				  case apply 'hello'/2
					   (Client, _rec0) of
				    %% Line 417
				    <'ok'> when 'true' ->
					%% Line 418
					{'ok',Client}
				    %% Line 419
				    <Error> when 'true' ->
					%% Line 420
					Error
				  end
			      -| ['compiler_generated'] )
			    ( <_cor18> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','options'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 422
		    <Other> when 'true' ->
			%% Line 423
			Other
		  end
	  %% Line 425
	  <Error> when 'true' ->
	      %% Line 426
	      Error
	end
'only_open'/1 =
    %% Line 440
    fun (_cor0) ->
	%% Line 441
	apply 'open'/4
	    (_cor0, {'options',[],'undefined',830,'infinity','undefined'}, [], 'false')
'only_open'/2 =
    %% Line 454
    fun (_cor1,_cor0) ->
	%% Line 455
	apply 'open'/3
	    (_cor1, _cor0, 'false')
'hello'/1 =
    %% Line 460
    fun (_cor0) ->
	%% Line 461
	apply 'hello'/2
	    (_cor0, 'infinity')
'hello'/2 =
    %% Line 474
    fun (_cor1,_cor0) ->
	%% Line 475
	apply 'call'/2
	    (_cor1, {'hello',_cor0})
'get_session_id'/1 =
    %% Line 480
    fun (_cor0) ->
	%% Line 481
	apply 'get_session_id'/2
	    (_cor0, 'infinity')
'get_session_id'/2 =
    %% Line 492
    fun (_cor1,_cor0) ->
	%% Line 493
	apply 'call'/3
	    (_cor1, 'get_session_id', _cor0)
'get_capabilities'/1 =
    %% Line 498
    fun (_cor0) ->
	%% Line 499
	apply 'get_capabilities'/2
	    (_cor0, 'infinity')
'get_capabilities'/2 =
    %% Line 525
    fun (_cor1,_cor0) ->
	%% Line 526
	apply 'call'/3
	    (_cor1, 'get_capabilities', _cor0)
'send'/2 =
    %% Line 531
    fun (_cor1,_cor0) ->
	%% Line 532
	apply 'send'/3
	    (_cor1, _cor0, 'infinity')
'send'/3 =
    %% Line 545
    fun (_cor2,_cor1,_cor0) ->
	%% Line 546
	apply 'call'/2
	    (_cor2, {'send',_cor0,_cor1})
'send_rpc'/2 =
    %% Line 551
    fun (_cor1,_cor0) ->
	%% Line 552
	apply 'send_rpc'/3
	    (_cor1, _cor0, 'infinity')
'send_rpc'/3 =
    %% Line 570
    fun (_cor2,_cor1,_cor0) ->
	%% Line 571
	apply 'call'/2
	    (_cor2, {'send_rpc',_cor1,_cor0})
'lock'/2 =
    %% Line 576
    fun (_cor1,_cor0) ->
	%% Line 577
	apply 'lock'/3
	    (_cor1, _cor0, 'infinity')
'lock'/3 =
    %% Line 600
    fun (_cor2,_cor1,_cor0) ->
	%% Line 601
	apply 'call'/2
	    (_cor2, {'send_rpc_op','lock',[_cor1|[]],_cor0})
'unlock'/2 =
    %% Line 606
    fun (_cor1,_cor0) ->
	%% Line 607
	apply 'unlock'/3
	    (_cor1, _cor0, 'infinity')
'unlock'/3 =
    %% Line 624
    fun (_cor2,_cor1,_cor0) ->
	%% Line 625
	apply 'call'/2
	    (_cor2, {'send_rpc_op','unlock',[_cor1|[]],_cor0})
'get'/2 =
    %% Line 630
    fun (_cor1,_cor0) ->
	%% Line 631
	apply 'get'/3
	    (_cor1, _cor0, 'infinity')
'get'/3 =
    %% Line 649
    fun (_cor2,_cor1,_cor0) ->
	%% Line 650
	apply 'call'/2
	    (_cor2, {'send_rpc_op','get',[_cor1|[]],_cor0})
'get_config'/3 =
    %% Line 655
    fun (_cor2,_cor1,_cor0) ->
	%% Line 656
	apply 'get_config'/4
	    (_cor2, _cor1, _cor0, 'infinity')
'get_config'/4 =
    %% Line 676
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 677
	apply 'call'/2
	    (_cor3, {'send_rpc_op','get_config',[_cor2|[_cor1|[]]],_cor0})
'edit_config'/3 =
    %% Line 682
    fun (_cor2,_cor1,_cor0) ->
	%% Line 683
	apply 'edit_config'/4
	    (_cor2, _cor1, _cor0, 'infinity')
'edit_config'/4 =
    %% Line 700
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 701
	apply 'call'/2
	    (_cor3, {'send_rpc_op','edit_config',[_cor2|[_cor1|[]]],_cor0})
'delete_config'/2 =
    %% Line 707
    fun (_cor1,_cor0) ->
	%% Line 708
	apply 'delete_config'/3
	    (_cor1, _cor0, 'infinity')
'delete_config'/3 =
    %% Line 723
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Client,Target,Timeout>
	      when let <_cor3> =
		    call 'erlang':'=:='
			(Target, 'startup')
		in  let <_cor4> =
			%% Line 724
			call 'erlang':'=:='
			    (Target, 'candidate')
		    in  call 'erlang':'or'
			    (_cor3, _cor4) ->
	      %% Line 725
	      apply 'call'/2
		  (Client, {'send_rpc_op','delete_config',[Target|[]],Timeout})
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'delete_config',3}}] )
	    -| ['compiler_generated'] )
	end
'copy_config'/3 =
    %% Line 730
    fun (_cor2,_cor1,_cor0) ->
	%% Line 731
	apply 'copy_config'/4
	    (_cor2, _cor1, _cor0, 'infinity')
'copy_config'/4 =
    %% Line 748
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 749
	apply 'call'/2
	    (_cor3, {'send_rpc_op','copy_config',[_cor2|[_cor1|[]]],_cor0})
'action'/2 =
    %% Line 754
    fun (_cor1,_cor0) ->
	%% Line 755
	apply 'action'/3
	    (_cor1, _cor0, 'infinity')
'action'/3 =
    %% Line 767
    fun (_cor2,_cor1,_cor0) ->
	%% Line 768
	apply 'call'/2
	    (_cor2, {'send_rpc_op','action',[_cor1|[]],_cor0})
'create_subscription'/1 =
    %% Line 771
    fun (_cor0) ->
	%% Line 772
	apply 'create_subscription'/3
	    (_cor0, [78|[69|[84|[67|[79|[78|[70]]]]]]], 'infinity')
'create_subscription'/2 =
    %% Line 774
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Client,Timeout>
	      when %% Line 775
		try
		    ( case <> of
			( <>
			      when call 'erlang':'is_integer'
				    (Timeout) ->
			      'true'
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      call 'erlang':'=:='
				  (Timeout, 'infinity')
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 776
	      apply 'create_subscription'/3
		  (Client, [78|[69|[84|[67|[79|[78|[70]]]]]]], Timeout)
	  %% Line 777
	  <Client,Stream>
	      when %% Line 778
		try
		    ( case <> of
			( <>
			      when call 'erlang':'is_list'
				    (Stream) ->
			      let <_cor6> =
				  call 'erlang':'hd'
				      (Stream)
			      in  call 'erlang':'is_integer'
				      (_cor6)
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      'false'
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 779
	      apply 'create_subscription'/3
		  (Client, Stream, 'infinity')
	  %% Line 780
	  <Client,Filter>
	      when %% Line 781
		try
		    let <_cor15> =
			( case <> of
			    ( <>
				  when ( call 'erlang':'is_atom'
					  (Filter)
				      -| ['compiler_generated'] ) ->
				  'true'
			      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  ( case <> of
				      ( <>
					    when ( call 'erlang':'is_tuple'
						    (Filter)
						-| ['compiler_generated'] ) ->
					    let <_cor12> =
						( call 'erlang':'element'
						      (1, Filter)
						  -| ['compiler_generated'] )
					    in  ( call 'erlang':'is_atom'
						      (_cor12)
						  -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <> when 'true' ->
					    'false'
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    in  ( let <_cor29> =
			      ( case _cor15 of
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					'true'
				    -| ['compiler_generated'] )
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					( case <> of
					    ( <>
						  when ( call 'erlang':'=:='
							  (Filter,
							   [])
						      -| ['compiler_generated'] ) ->
						  'true'
					      -| ['compiler_generated'] )
					    ( <> when 'true' ->
						  ( case <> of
						      ( <>
							    when ( call 'erlang':'is_list'
								    (Filter)
								-| ['compiler_generated'] ) ->
							    let <_cor19> =
								( call 'erlang':'hd'
								      (Filter)
								  -| ['compiler_generated'] )
							    in  ( case <> of
								    ( <>
									  when ( call 'erlang':'is_atom'
										  (_cor19)
									      -| ['compiler_generated'] ) ->
									  'true'
								      -| ['compiler_generated'] )
								    ( <> when 'true' ->
									  let <_cor21> =
									      ( call 'erlang':'hd'
										    (Filter)
										-| ['compiler_generated'] )
									  in  ( case <> of
										  ( <>
											when ( call 'erlang':'is_tuple'
												(_cor21)
											    -| ['compiler_generated'] ) ->
											let <_cor22> =
											    ( call 'erlang':'hd'
												  (Filter)
											      -| ['compiler_generated'] )
											in  let <_cor23> =
												( call 'erlang':'element'
												      (1, _cor22)
												  -| ['compiler_generated'] )
											    in  ( call 'erlang':'is_atom'
												      (_cor23)
												  -| ['compiler_generated'] )
										    -| ['compiler_generated'] )
										  ( <> when 'true' ->
											'false'
										    -| ['compiler_generated'] )
										end
										-| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								  end
								  -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						      ( <> when 'true' ->
							    'false'
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <_cor9> when 'true' ->
					_cor9
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  in  ( call ( 'erlang'
				       -| ['compiler_generated'] ):( '=:='
								     -| ['compiler_generated'] )
				    (( _cor29
				       -| ['compiler_generated'] ), ( 'true'
								      -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 782
	      apply 'create_subscription'/4
		  (Client, [78|[69|[84|[67|[79|[78|[70]]]]]]], Filter, %% Line 783
								       'infinity')
	  ( <_cor31,_cor30> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor31,_cor30})
		  -| [{'function_name',{'create_subscription',2}}] )
	    -| ['compiler_generated'] )
	end
'create_subscription'/3 =
    %% Line 785
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Client,Stream,Timeout>
	      when %% Line 786
		try
		    let <_cor7> =
			( case <> of
			    ( <>
				  when ( call 'erlang':'is_list'
					  (Stream)
				      -| ['compiler_generated'] ) ->
				  let <_cor5> =
				      ( call 'erlang':'hd'
					    (Stream)
					-| ['compiler_generated'] )
				  in  ( call 'erlang':'is_integer'
					    (_cor5)
					-| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  'false'
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    in  ( let <_cor11> =
			      ( case _cor7 of
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					%% Line 787
					( case <> of
					    ( <>
						  when ( call 'erlang':'is_integer'
							  (Timeout)
						      -| ['compiler_generated'] ) ->
						  'true'
					      -| ['compiler_generated'] )
					    ( <> when 'true' ->
						  ( call 'erlang':'=:='
							(Timeout, 'infinity')
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					'false'
				    -| ['compiler_generated'] )
				  ( <_cor3> when 'true' ->
					_cor3
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  in  ( call ( 'erlang'
				       -| ['compiler_generated'] ):( '=:='
								     -| ['compiler_generated'] )
				    (( _cor11
				       -| ['compiler_generated'] ), ( 'true'
								      -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor12> =
		  %% Line 788
		  call 'erlang':'self'
		      ()
	      in  %% Line 788
		  apply 'call'/2
		      (Client, {'send_rpc_op',{'create_subscription',_cor12},%% Line 789
									     [Stream|['undefined'|['undefined'|['undefined']]]],%% Line 790
																Timeout})
	  %% Line 791
	  <Client,StartTime,StopTime>
	      when %% Line 792
		try
		    let <_cor17> =
			( case <> of
			    ( <>
				  when ( call 'erlang':'is_list'
					  (StartTime)
				      -| ['compiler_generated'] ) ->
				  let <_cor15> =
				      ( call 'erlang':'hd'
					    (StartTime)
					-| ['compiler_generated'] )
				  in  ( call 'erlang':'is_integer'
					    (_cor15)
					-| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  'false'
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    in  ( let <_cor22> =
			      ( case _cor17 of
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					%% Line 793
					( case <> of
					    ( <>
						  when ( call 'erlang':'is_list'
							  (StopTime)
						      -| ['compiler_generated'] ) ->
						  let <_cor19> =
						      ( call 'erlang':'hd'
							    (StopTime)
							-| ['compiler_generated'] )
						  in  ( call 'erlang':'is_integer'
							    (_cor19)
							-| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <> when 'true' ->
						  'false'
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					'false'
				    -| ['compiler_generated'] )
				  ( <_cor13> when 'true' ->
					_cor13
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  in  ( call ( 'erlang'
				       -| ['compiler_generated'] ):( '=:='
								     -| ['compiler_generated'] )
				    (( _cor22
				       -| ['compiler_generated'] ), ( 'true'
								      -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 794
	      apply 'create_subscription'/5
		  (Client, [78|[69|[84|[67|[79|[78|[70]]]]]]], StartTime, StopTime, %% Line 795
										    'infinity')
	  %% Line 796
	  <Client,Filter,Timeout>
	      when %% Line 797
		try
		    let <_cor30> =
			( case <> of
			    ( <>
				  when ( call 'erlang':'is_atom'
					  (Filter)
				      -| ['compiler_generated'] ) ->
				  'true'
			      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  ( case <> of
				      ( <>
					    when ( call 'erlang':'is_tuple'
						    (Filter)
						-| ['compiler_generated'] ) ->
					    let <_cor27> =
						( call 'erlang':'element'
						      (1, Filter)
						  -| ['compiler_generated'] )
					    in  ( call 'erlang':'is_atom'
						      (_cor27)
						  -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <> when 'true' ->
					    'false'
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    in  let <_cor44> =
			    ( case _cor30 of
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      'true'
				  -| ['compiler_generated'] )
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      ( case <> of
					  ( <>
						when ( call 'erlang':'=:='
							(Filter,
							 [])
						    -| ['compiler_generated'] ) ->
						'true'
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						( case <> of
						    ( <>
							  when ( call 'erlang':'is_list'
								  (Filter)
							      -| ['compiler_generated'] ) ->
							  let <_cor34> =
							      ( call 'erlang':'hd'
								    (Filter)
								-| ['compiler_generated'] )
							  in  ( case <> of
								  ( <>
									when ( call 'erlang':'is_atom'
										(_cor34)
									    -| ['compiler_generated'] ) ->
									'true'
								    -| ['compiler_generated'] )
								  ( <> when 'true' ->
									let <_cor36> =
									    ( call 'erlang':'hd'
										  (Filter)
									      -| ['compiler_generated'] )
									in  ( case <> of
										( <>
										      when ( call 'erlang':'is_tuple'
											      (_cor36)
											  -| ['compiler_generated'] ) ->
										      let <_cor37> =
											  ( call 'erlang':'hd'
												(Filter)
											    -| ['compiler_generated'] )
										      in  let <_cor38> =
											      ( call 'erlang':'element'
												    (1, _cor37)
												-| ['compiler_generated'] )
											  in  ( call 'erlang':'is_atom'
												    (_cor38)
												-| ['compiler_generated'] )
										  -| ['compiler_generated'] )
										( <> when 'true' ->
										      'false'
										  -| ['compiler_generated'] )
									      end
									      -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								end
								-| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						    ( <> when 'true' ->
							  'false'
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <_cor24> when 'true' ->
				      _cor24
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			in  ( let <_cor48> =
				  ( case _cor44 of
				      ( <( 'true'
					   -| ['compiler_generated'] )> when 'true' ->
					    %% Line 798
					    ( case <> of
						( <>
						      when ( call 'erlang':'is_integer'
							      (Timeout)
							  -| ['compiler_generated'] ) ->
						      'true'
						  -| ['compiler_generated'] )
						( <> when 'true' ->
						      ( call 'erlang':'=:='
							    (Timeout, 'infinity')
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <( 'false'
					   -| ['compiler_generated'] )> when 'true' ->
					    'false'
					-| ['compiler_generated'] )
				      ( <_cor23> when 'true' ->
					    _cor23
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( '=:='
									 -| ['compiler_generated'] )
					(( _cor48
					   -| ['compiler_generated'] ), ( 'true'
									  -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 799
	      apply 'create_subscription'/4
		  (Client, [78|[69|[84|[67|[79|[78|[70]]]]]]], Filter, Timeout)
	  %% Line 800
	  <Client,Stream,Filter>
	      when %% Line 801
		try
		    let <_cor53> =
			( case <> of
			    ( <>
				  when ( call 'erlang':'is_list'
					  (Stream)
				      -| ['compiler_generated'] ) ->
				  let <_cor51> =
				      ( call 'erlang':'hd'
					    (Stream)
					-| ['compiler_generated'] )
				  in  ( call 'erlang':'is_integer'
					    (_cor51)
					-| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  'false'
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    in  ( let <_cor75> =
			      ( case _cor53 of
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					let <_cor60> =
					    %% Line 802
					    ( case <> of
						( <>
						      when ( call 'erlang':'is_atom'
							      (Filter)
							  -| ['compiler_generated'] ) ->
						      'true'
						  -| ['compiler_generated'] )
						( <> when 'true' ->
						      ( case <> of
							  ( <>
								when ( call 'erlang':'is_tuple'
									(Filter)
								    -| ['compiler_generated'] ) ->
								let <_cor57> =
								    ( call 'erlang':'element'
									  (1, Filter)
								      -| ['compiler_generated'] )
								in  ( call 'erlang':'is_atom'
									  (_cor57)
								      -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							  ( <> when 'true' ->
								'false'
							    -| ['compiler_generated'] )
							end
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					in  %% Line 802
					    ( case _cor60 of
						( <( 'true'
						     -| ['compiler_generated'] )> when 'true' ->
						      'true'
						  -| ['compiler_generated'] )
						( <( 'false'
						     -| ['compiler_generated'] )> when 'true' ->
						      ( case <> of
							  ( <>
								when ( call 'erlang':'=:='
									(Filter,
									 [])
								    -| ['compiler_generated'] ) ->
								'true'
							    -| ['compiler_generated'] )
							  ( <> when 'true' ->
								( case <> of
								    ( <>
									  when ( call 'erlang':'is_list'
										  (Filter)
									      -| ['compiler_generated'] ) ->
									  let <_cor64> =
									      ( call 'erlang':'hd'
										    (Filter)
										-| ['compiler_generated'] )
									  in  ( case <> of
										  ( <>
											when ( call 'erlang':'is_atom'
												(_cor64)
											    -| ['compiler_generated'] ) ->
											'true'
										    -| ['compiler_generated'] )
										  ( <> when 'true' ->
											let <_cor66> =
											    ( call 'erlang':'hd'
												  (Filter)
											      -| ['compiler_generated'] )
											in  ( case <> of
												( <>
												      when ( call 'erlang':'is_tuple'
													      (_cor66)
													  -| ['compiler_generated'] ) ->
												      let <_cor67> =
													  ( call 'erlang':'hd'
														(Filter)
													    -| ['compiler_generated'] )
												      in  let <_cor68> =
													      ( call 'erlang':'element'
														    (1, _cor67)
														-| ['compiler_generated'] )
													  in  ( call 'erlang':'is_atom'
														    (_cor68)
														-| ['compiler_generated'] )
												  -| ['compiler_generated'] )
												( <> when 'true' ->
												      'false'
												  -| ['compiler_generated'] )
											      end
											      -| ['compiler_generated'] )
										    -| ['compiler_generated'] )
										end
										-| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								    ( <> when 'true' ->
									  'false'
								      -| ['compiler_generated'] )
								  end
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						( <_cor54> when 'true' ->
						      _cor54
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					'false'
				    -| ['compiler_generated'] )
				  ( <_cor49> when 'true' ->
					_cor49
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  in  ( call ( 'erlang'
				       -| ['compiler_generated'] ):( '=:='
								     -| ['compiler_generated'] )
				    (( _cor75
				       -| ['compiler_generated'] ), ( 'true'
								      -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 803
	      apply 'create_subscription'/4
		  (Client, Stream, Filter, 'infinity')
	  ( <_cor78,_cor77,_cor76> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor78,_cor77,_cor76})
		  -| [{'function_name',{'create_subscription',3}}] )
	    -| ['compiler_generated'] )
	end
'create_subscription'/4 =
    %% Line 805
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Client,StartTime,StopTime,Timeout>
	      when %% Line 806
		try
		    let <_cor8> =
			( case <> of
			    ( <>
				  when ( call 'erlang':'is_list'
					  (StartTime)
				      -| ['compiler_generated'] ) ->
				  let <_cor6> =
				      ( call 'erlang':'hd'
					    (StartTime)
					-| ['compiler_generated'] )
				  in  ( call 'erlang':'is_integer'
					    (_cor6)
					-| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  'false'
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    in  ( let <_cor18> =
			      ( case _cor8 of
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					let <_cor13> =
					    %% Line 807
					    ( case <> of
						( <>
						      when ( call 'erlang':'is_list'
							      (StopTime)
							  -| ['compiler_generated'] ) ->
						      let <_cor11> =
							  ( call 'erlang':'hd'
								(StopTime)
							    -| ['compiler_generated'] )
						      in  ( call 'erlang':'is_integer'
								(_cor11)
							    -| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						( <> when 'true' ->
						      'false'
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					in  %% Line 807
					    ( case _cor13 of
						( <( 'true'
						     -| ['compiler_generated'] )> when 'true' ->
						      %% Line 808
						      ( case <> of
							  ( <>
								when ( call 'erlang':'is_integer'
									(Timeout)
								    -| ['compiler_generated'] ) ->
								'true'
							    -| ['compiler_generated'] )
							  ( <> when 'true' ->
								( call 'erlang':'=:='
								      (Timeout, 'infinity')
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						( <( 'false'
						     -| ['compiler_generated'] )> when 'true' ->
						      'false'
						  -| ['compiler_generated'] )
						( <_cor9> when 'true' ->
						      _cor9
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					'false'
				    -| ['compiler_generated'] )
				  ( <_cor4> when 'true' ->
					_cor4
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  in  ( call ( 'erlang'
				       -| ['compiler_generated'] ):( '=:='
								     -| ['compiler_generated'] )
				    (( _cor18
				       -| ['compiler_generated'] ), ( 'true'
								      -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 809
	      apply 'create_subscription'/5
		  (Client, [78|[69|[84|[67|[79|[78|[70]]]]]]], StartTime, StopTime, Timeout)
	  %% Line 810
	  <Client,Stream,StartTime,StopTime>
	      when %% Line 811
		try
		    let <_cor23> =
			( case <> of
			    ( <>
				  when ( call 'erlang':'is_list'
					  (Stream)
				      -| ['compiler_generated'] ) ->
				  let <_cor21> =
				      ( call 'erlang':'hd'
					    (Stream)
					-| ['compiler_generated'] )
				  in  ( call 'erlang':'is_integer'
					    (_cor21)
					-| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  'false'
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    in  ( let <_cor34> =
			      ( case _cor23 of
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					let <_cor28> =
					    %% Line 812
					    ( case <> of
						( <>
						      when ( call 'erlang':'is_list'
							      (StartTime)
							  -| ['compiler_generated'] ) ->
						      let <_cor26> =
							  ( call 'erlang':'hd'
								(StartTime)
							    -| ['compiler_generated'] )
						      in  ( call 'erlang':'is_integer'
								(_cor26)
							    -| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						( <> when 'true' ->
						      'false'
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					in  %% Line 812
					    ( case _cor28 of
						( <( 'true'
						     -| ['compiler_generated'] )> when 'true' ->
						      %% Line 813
						      ( case <> of
							  ( <>
								when ( call 'erlang':'is_list'
									(StopTime)
								    -| ['compiler_generated'] ) ->
								let <_cor30> =
								    ( call 'erlang':'hd'
									  (StopTime)
								      -| ['compiler_generated'] )
								in  ( call 'erlang':'is_integer'
									  (_cor30)
								      -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							  ( <> when 'true' ->
								'false'
							    -| ['compiler_generated'] )
							end
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						( <( 'false'
						     -| ['compiler_generated'] )> when 'true' ->
						      'false'
						  -| ['compiler_generated'] )
						( <_cor24> when 'true' ->
						      _cor24
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					'false'
				    -| ['compiler_generated'] )
				  ( <_cor19> when 'true' ->
					_cor19
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  in  ( call ( 'erlang'
				       -| ['compiler_generated'] ):( '=:='
								     -| ['compiler_generated'] )
				    (( _cor34
				       -| ['compiler_generated'] ), ( 'true'
								      -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 814
	      apply 'create_subscription'/5
		  (Client, Stream, StartTime, StopTime, 'infinity')
	  %% Line 815
	  <Client,Filter,StartTime,StopTime>
	      when %% Line 816
		try
		    let <_cor42> =
			( case <> of
			    ( <>
				  when ( call 'erlang':'is_atom'
					  (Filter)
				      -| ['compiler_generated'] ) ->
				  'true'
			      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  ( case <> of
				      ( <>
					    when ( call 'erlang':'is_tuple'
						    (Filter)
						-| ['compiler_generated'] ) ->
					    let <_cor39> =
						( call 'erlang':'element'
						      (1, Filter)
						  -| ['compiler_generated'] )
					    in  ( call 'erlang':'is_atom'
						      (_cor39)
						  -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <> when 'true' ->
					    'false'
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    in  let <_cor56> =
			    ( case _cor42 of
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      'true'
				  -| ['compiler_generated'] )
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      ( case <> of
					  ( <>
						when ( call 'erlang':'=:='
							(Filter,
							 [])
						    -| ['compiler_generated'] ) ->
						'true'
					    -| ['compiler_generated'] )
					  ( <> when 'true' ->
						( case <> of
						    ( <>
							  when ( call 'erlang':'is_list'
								  (Filter)
							      -| ['compiler_generated'] ) ->
							  let <_cor46> =
							      ( call 'erlang':'hd'
								    (Filter)
								-| ['compiler_generated'] )
							  in  ( case <> of
								  ( <>
									when ( call 'erlang':'is_atom'
										(_cor46)
									    -| ['compiler_generated'] ) ->
									'true'
								    -| ['compiler_generated'] )
								  ( <> when 'true' ->
									let <_cor48> =
									    ( call 'erlang':'hd'
										  (Filter)
									      -| ['compiler_generated'] )
									in  ( case <> of
										( <>
										      when ( call 'erlang':'is_tuple'
											      (_cor48)
											  -| ['compiler_generated'] ) ->
										      let <_cor49> =
											  ( call 'erlang':'hd'
												(Filter)
											    -| ['compiler_generated'] )
										      in  let <_cor50> =
											      ( call 'erlang':'element'
												    (1, _cor49)
												-| ['compiler_generated'] )
											  in  ( call 'erlang':'is_atom'
												    (_cor50)
												-| ['compiler_generated'] )
										  -| ['compiler_generated'] )
										( <> when 'true' ->
										      'false'
										  -| ['compiler_generated'] )
									      end
									      -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								end
								-| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						    ( <> when 'true' ->
							  'false'
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
				( <_cor36> when 'true' ->
				      _cor36
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			in  ( let <_cor67> =
				  ( case _cor56 of
				      ( <( 'true'
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_cor61> =
						%% Line 817
						( case <> of
						    ( <>
							  when ( call 'erlang':'is_list'
								  (StartTime)
							      -| ['compiler_generated'] ) ->
							  let <_cor59> =
							      ( call 'erlang':'hd'
								    (StartTime)
								-| ['compiler_generated'] )
							  in  ( call 'erlang':'is_integer'
								    (_cor59)
								-| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						    ( <> when 'true' ->
							  'false'
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    in  %% Line 817
						( case _cor61 of
						    ( <( 'true'
							 -| ['compiler_generated'] )> when 'true' ->
							  %% Line 818
							  ( case <> of
							      ( <>
								    when ( call 'erlang':'is_list'
									    (StopTime)
									-| ['compiler_generated'] ) ->
								    let <_cor63> =
									( call 'erlang':'hd'
									      (StopTime)
									  -| ['compiler_generated'] )
								    in  ( call 'erlang':'is_integer'
									      (_cor63)
									  -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							      ( <> when 'true' ->
								    'false'
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						    ( <( 'false'
							 -| ['compiler_generated'] )> when 'true' ->
							  'false'
						      -| ['compiler_generated'] )
						    ( <_cor57> when 'true' ->
							  _cor57
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				      ( <( 'false'
					   -| ['compiler_generated'] )> when 'true' ->
					    'false'
					-| ['compiler_generated'] )
				      ( <_cor35> when 'true' ->
					    _cor35
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( '=:='
									 -| ['compiler_generated'] )
					(( _cor67
					   -| ['compiler_generated'] ), ( 'true'
									  -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 819
	      apply 'create_subscription'/6
		  (Client, [78|[69|[84|[67|[79|[78|[70]]]]]]], Filter, %% Line 820
								       StartTime, %% Line 820
										  StopTime, %% Line 820
											    'infinity')
	  %% Line 821
	  <Client,Stream,Filter,Timeout>
	      when %% Line 822
		try
		    let <_cor72> =
			( case <> of
			    ( <>
				  when ( call 'erlang':'is_list'
					  (Stream)
				      -| ['compiler_generated'] ) ->
				  let <_cor70> =
				      ( call 'erlang':'hd'
					    (Stream)
					-| ['compiler_generated'] )
				  in  ( call 'erlang':'is_integer'
					    (_cor70)
					-| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  'false'
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    in  ( let <_cor99> =
			      ( case _cor72 of
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					let <_cor80> =
					    %% Line 823
					    ( case <> of
						( <>
						      when ( call 'erlang':'is_atom'
							      (Filter)
							  -| ['compiler_generated'] ) ->
						      'true'
						  -| ['compiler_generated'] )
						( <> when 'true' ->
						      ( case <> of
							  ( <>
								when ( call 'erlang':'is_tuple'
									(Filter)
								    -| ['compiler_generated'] ) ->
								let <_cor77> =
								    ( call 'erlang':'element'
									  (1, Filter)
								      -| ['compiler_generated'] )
								in  ( call 'erlang':'is_atom'
									  (_cor77)
								      -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							  ( <> when 'true' ->
								'false'
							    -| ['compiler_generated'] )
							end
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					in  let <_cor94> =
						%% Line 823
						( case _cor80 of
						    ( <( 'true'
							 -| ['compiler_generated'] )> when 'true' ->
							  'true'
						      -| ['compiler_generated'] )
						    ( <( 'false'
							 -| ['compiler_generated'] )> when 'true' ->
							  ( case <> of
							      ( <>
								    when ( call 'erlang':'=:='
									    (Filter,
									     [])
									-| ['compiler_generated'] ) ->
								    'true'
								-| ['compiler_generated'] )
							      ( <> when 'true' ->
								    ( case <> of
									( <>
									      when ( call 'erlang':'is_list'
										      (Filter)
										  -| ['compiler_generated'] ) ->
									      let <_cor84> =
										  ( call 'erlang':'hd'
											(Filter)
										    -| ['compiler_generated'] )
									      in  ( case <> of
										      ( <>
											    when ( call 'erlang':'is_atom'
												    (_cor84)
												-| ['compiler_generated'] ) ->
											    'true'
											-| ['compiler_generated'] )
										      ( <> when 'true' ->
											    let <_cor86> =
												( call 'erlang':'hd'
												      (Filter)
												  -| ['compiler_generated'] )
											    in  ( case <> of
												    ( <>
													  when ( call 'erlang':'is_tuple'
														  (_cor86)
													      -| ['compiler_generated'] ) ->
													  let <_cor87> =
													      ( call 'erlang':'hd'
														    (Filter)
														-| ['compiler_generated'] )
													  in  let <_cor88> =
														  ( call 'erlang':'element'
															(1, _cor87)
														    -| ['compiler_generated'] )
													      in  ( call 'erlang':'is_atom'
															(_cor88)
														    -| ['compiler_generated'] )
												      -| ['compiler_generated'] )
												    ( <> when 'true' ->
													  'false'
												      -| ['compiler_generated'] )
												  end
												  -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										    end
										    -| ['compiler_generated'] )
									  -| ['compiler_generated'] )
									( <> when 'true' ->
									      'false'
									  -| ['compiler_generated'] )
								      end
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						    ( <_cor74> when 'true' ->
							  _cor74
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    in  %% Line 823
						( case _cor94 of
						    ( <( 'true'
							 -| ['compiler_generated'] )> when 'true' ->
							  %% Line 824
							  ( case <> of
							      ( <>
								    when ( call 'erlang':'is_integer'
									    (Timeout)
									-| ['compiler_generated'] ) ->
								    'true'
								-| ['compiler_generated'] )
							      ( <> when 'true' ->
								    ( call 'erlang':'=:='
									  (Timeout, 'infinity')
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						    ( <( 'false'
							 -| ['compiler_generated'] )> when 'true' ->
							  'false'
						      -| ['compiler_generated'] )
						    ( <_cor73> when 'true' ->
							  _cor73
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					'false'
				    -| ['compiler_generated'] )
				  ( <_cor68> when 'true' ->
					_cor68
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  in  ( call ( 'erlang'
				       -| ['compiler_generated'] ):( '=:='
								     -| ['compiler_generated'] )
				    (( _cor99
				       -| ['compiler_generated'] ), ( 'true'
								      -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor100> =
		  %% Line 825
		  call 'erlang':'self'
		      ()
	      in  %% Line 825
		  apply 'call'/2
		      (Client, {'send_rpc_op',{'create_subscription',_cor100},%% Line 826
									      [Stream|[Filter|['undefined'|['undefined']]]],%% Line 827
															    Timeout})
	  ( <_cor104,_cor103,_cor102,_cor101> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor104,_cor103,_cor102,_cor101})
		  -| [{'function_name',{'create_subscription',4}}] )
	    -| ['compiler_generated'] )
	end
'create_subscription'/5 =
    %% Line 829
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Client,Stream,StartTime,StopTime,Timeout>
	      when %% Line 830
		try
		    let <_cor9> =
			( case <> of
			    ( <>
				  when ( call 'erlang':'is_list'
					  (Stream)
				      -| ['compiler_generated'] ) ->
				  let <_cor7> =
				      ( call 'erlang':'hd'
					    (Stream)
					-| ['compiler_generated'] )
				  in  ( call 'erlang':'is_integer'
					    (_cor7)
					-| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  'false'
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    in  ( let <_cor25> =
			      ( case _cor9 of
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					let <_cor14> =
					    %% Line 831
					    ( case <> of
						( <>
						      when ( call 'erlang':'is_list'
							      (StartTime)
							  -| ['compiler_generated'] ) ->
						      let <_cor12> =
							  ( call 'erlang':'hd'
								(StartTime)
							    -| ['compiler_generated'] )
						      in  ( call 'erlang':'is_integer'
								(_cor12)
							    -| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						( <> when 'true' ->
						      'false'
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					in  %% Line 831
					    ( case _cor14 of
						( <( 'true'
						     -| ['compiler_generated'] )> when 'true' ->
						      let <_cor19> =
							  %% Line 832
							  ( case <> of
							      ( <>
								    when ( call 'erlang':'is_list'
									    (StopTime)
									-| ['compiler_generated'] ) ->
								    let <_cor17> =
									( call 'erlang':'hd'
									      (StopTime)
									  -| ['compiler_generated'] )
								    in  ( call 'erlang':'is_integer'
									      (_cor17)
									  -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							      ( <> when 'true' ->
								    'false'
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
						      in  %% Line 832
							  ( case _cor19 of
							      ( <( 'true'
								   -| ['compiler_generated'] )> when 'true' ->
								    %% Line 833
								    ( case <> of
									( <>
									      when ( call 'erlang':'is_integer'
										      (Timeout)
										  -| ['compiler_generated'] ) ->
									      'true'
									  -| ['compiler_generated'] )
									( <> when 'true' ->
									      ( call 'erlang':'=:='
										    (Timeout, 'infinity')
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								      end
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							      ( <( 'false'
								   -| ['compiler_generated'] )> when 'true' ->
								    'false'
								-| ['compiler_generated'] )
							      ( <_cor15> when 'true' ->
								    _cor15
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
						  -| ['compiler_generated'] )
						( <( 'false'
						     -| ['compiler_generated'] )> when 'true' ->
						      'false'
						  -| ['compiler_generated'] )
						( <_cor10> when 'true' ->
						      _cor10
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					'false'
				    -| ['compiler_generated'] )
				  ( <_cor5> when 'true' ->
					_cor5
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  in  ( call ( 'erlang'
				       -| ['compiler_generated'] ):( '=:='
								     -| ['compiler_generated'] )
				    (( _cor25
				       -| ['compiler_generated'] ), ( 'true'
								      -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor26> =
		  %% Line 834
		  call 'erlang':'self'
		      ()
	      in  %% Line 834
		  apply 'call'/2
		      (Client, {'send_rpc_op',{'create_subscription',_cor26},%% Line 835
									     [Stream|['undefined'|[StartTime|[StopTime|[]]]]],%% Line 836
															      Timeout})
	  %% Line 837
	  <Client,Stream,Filter,StartTime,StopTime>
	      when %% Line 838
		try
		    let <_cor31> =
			( case <> of
			    ( <>
				  when ( call 'erlang':'is_list'
					  (Stream)
				      -| ['compiler_generated'] ) ->
				  let <_cor29> =
				      ( call 'erlang':'hd'
					    (Stream)
					-| ['compiler_generated'] )
				  in  ( call 'erlang':'is_integer'
					    (_cor29)
					-| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			    ( <> when 'true' ->
				  'false'
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    in  ( let <_cor65> =
			      ( case _cor31 of
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					let <_cor39> =
					    %% Line 839
					    ( case <> of
						( <>
						      when ( call 'erlang':'is_atom'
							      (Filter)
							  -| ['compiler_generated'] ) ->
						      'true'
						  -| ['compiler_generated'] )
						( <> when 'true' ->
						      ( case <> of
							  ( <>
								when ( call 'erlang':'is_tuple'
									(Filter)
								    -| ['compiler_generated'] ) ->
								let <_cor36> =
								    ( call 'erlang':'element'
									  (1, Filter)
								      -| ['compiler_generated'] )
								in  ( call 'erlang':'is_atom'
									  (_cor36)
								      -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							  ( <> when 'true' ->
								'false'
							    -| ['compiler_generated'] )
							end
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					in  let <_cor53> =
						%% Line 839
						( case _cor39 of
						    ( <( 'true'
							 -| ['compiler_generated'] )> when 'true' ->
							  'true'
						      -| ['compiler_generated'] )
						    ( <( 'false'
							 -| ['compiler_generated'] )> when 'true' ->
							  ( case <> of
							      ( <>
								    when ( call 'erlang':'=:='
									    (Filter,
									     [])
									-| ['compiler_generated'] ) ->
								    'true'
								-| ['compiler_generated'] )
							      ( <> when 'true' ->
								    ( case <> of
									( <>
									      when ( call 'erlang':'is_list'
										      (Filter)
										  -| ['compiler_generated'] ) ->
									      let <_cor43> =
										  ( call 'erlang':'hd'
											(Filter)
										    -| ['compiler_generated'] )
									      in  ( case <> of
										      ( <>
											    when ( call 'erlang':'is_atom'
												    (_cor43)
												-| ['compiler_generated'] ) ->
											    'true'
											-| ['compiler_generated'] )
										      ( <> when 'true' ->
											    let <_cor45> =
												( call 'erlang':'hd'
												      (Filter)
												  -| ['compiler_generated'] )
											    in  ( case <> of
												    ( <>
													  when ( call 'erlang':'is_tuple'
														  (_cor45)
													      -| ['compiler_generated'] ) ->
													  let <_cor46> =
													      ( call 'erlang':'hd'
														    (Filter)
														-| ['compiler_generated'] )
													  in  let <_cor47> =
														  ( call 'erlang':'element'
															(1, _cor46)
														    -| ['compiler_generated'] )
													      in  ( call 'erlang':'is_atom'
															(_cor47)
														    -| ['compiler_generated'] )
												      -| ['compiler_generated'] )
												    ( <> when 'true' ->
													  'false'
												      -| ['compiler_generated'] )
												  end
												  -| ['compiler_generated'] )
											-| ['compiler_generated'] )
										    end
										    -| ['compiler_generated'] )
									  -| ['compiler_generated'] )
									( <> when 'true' ->
									      'false'
									  -| ['compiler_generated'] )
								      end
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						    ( <_cor33> when 'true' ->
							  _cor33
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
					    in  %% Line 839
						( case _cor53 of
						    ( <( 'true'
							 -| ['compiler_generated'] )> when 'true' ->
							  let <_cor58> =
							      %% Line 840
							      ( case <> of
								  ( <>
									when ( call 'erlang':'is_list'
										(StartTime)
									    -| ['compiler_generated'] ) ->
									let <_cor56> =
									    ( call 'erlang':'hd'
										  (StartTime)
									      -| ['compiler_generated'] )
									in  ( call 'erlang':'is_integer'
										  (_cor56)
									      -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								  ( <> when 'true' ->
									'false'
								    -| ['compiler_generated'] )
								end
								-| ['compiler_generated'] )
							  in  %% Line 840
							      ( case _cor58 of
								  ( <( 'true'
								       -| ['compiler_generated'] )> when 'true' ->
									%% Line 841
									( case <> of
									    ( <>
										  when ( call 'erlang':'is_list'
											  (StopTime)
										      -| ['compiler_generated'] ) ->
										  let <_cor60> =
										      ( call 'erlang':'hd'
											    (StopTime)
											-| ['compiler_generated'] )
										  in  ( call 'erlang':'is_integer'
											    (_cor60)
											-| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									    ( <> when 'true' ->
										  'false'
									      -| ['compiler_generated'] )
									  end
									  -| ['compiler_generated'] )
								    -| ['compiler_generated'] )
								  ( <( 'false'
								       -| ['compiler_generated'] )> when 'true' ->
									'false'
								    -| ['compiler_generated'] )
								  ( <_cor54> when 'true' ->
									_cor54
								    -| ['compiler_generated'] )
								end
								-| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						    ( <( 'false'
							 -| ['compiler_generated'] )> when 'true' ->
							  'false'
						      -| ['compiler_generated'] )
						    ( <_cor32> when 'true' ->
							  _cor32
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					'false'
				    -| ['compiler_generated'] )
				  ( <_cor27> when 'true' ->
					_cor27
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  in  ( call ( 'erlang'
				       -| ['compiler_generated'] ):( '=:='
								     -| ['compiler_generated'] )
				    (( _cor65
				       -| ['compiler_generated'] ), ( 'true'
								      -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 842
	      apply 'create_subscription'/6
		  (Client, Stream, Filter, StartTime, StopTime, 'infinity')
	  ( <_cor70,_cor69,_cor68,_cor67,_cor66> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor70,_cor69,_cor68,_cor67,_cor66})
		  -| [{'function_name',{'create_subscription',5}}] )
	    -| ['compiler_generated'] )
	end
'create_subscription'/6 =
    %% Line 900
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 901
	    call 'erlang':'self'
		()
	in  %% Line 901
	    apply 'call'/2
		(_cor5, {'send_rpc_op',{'create_subscription',_cor6},%% Line 902
								     [_cor4|[_cor3|[_cor2|[_cor1|[]]]]],_cor0})
'get_event_streams'/2 =
    %% Line 908
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Client,Timeout>
	      when let <_cor2> =
		    call 'erlang':'is_integer'
			(Timeout)
		in  let <_cor3> =
			call 'erlang':'=:='
			    (Timeout, 'infinity')
		    in  call 'erlang':'or'
			    (_cor2, _cor3) ->
	      %% Line 909
	      apply 'get_event_streams'/3
		  (Client, [], Timeout)
	  %% Line 914
	  <Client,Streams>
	      when call 'erlang':'is_list'
		    (Streams) ->
	      %% Line 915
	      apply 'get_event_streams'/3
		  (Client, Streams, 'infinity')
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'get_event_streams',2}}] )
	    -| ['compiler_generated'] )
	end
'get_event_streams'/3 =
    %% Line 958
    fun (_cor2,_cor1,_cor0) ->
	%% Line 959
	apply 'call'/2
	    (_cor2, {'get_event_streams',_cor1,_cor0})
'close_session'/1 =
    %% Line 965
    fun (_cor0) ->
	%% Line 966
	apply 'close_session'/2
	    (_cor0, 'infinity')
'close_session'/2 =
    %% Line 983
    fun (_cor1,_cor0) ->
	%% Line 984
	apply 'call'/3
	    (_cor1, {'send_rpc_op','close_session',[],_cor0}, 'true')
'kill_session'/2 =
    %% Line 990
    fun (_cor1,_cor0) ->
	%% Line 991
	apply 'kill_session'/3
	    (_cor1, _cor0, 'infinity')
'kill_session'/3 =
    %% Line 1016
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1017
	apply 'call'/2
	    (_cor2, {'send_rpc_op','kill_session',[_cor1|[]],_cor0})
'init'/3 =
    %% Line 1025
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_KeyOrName,{_X_Host,_X_Port},Options> when 'true' ->
	      %% Line 1026
	      case apply 'ssh_open'/1
		       (Options) of
		%% Line 1027
		<{'ok',Connection}> when 'true' ->
		    do  %% Line 1028
			apply 'log'/2
			    (Connection, 'open')
			%% Line 1029
			( case Connection of
			    ( <( {'connection',_rec1,_cor10,_cor11,_cor12}
				 -| ['compiler_generated'] )> when 'true' ->
				  case _rec1 of
				    <{ConnPid,_cor14}> when 'true' ->
					%% Line 1030
					{'ok',ConnPid,{'state','undefined','undefined',Connection,'undefined','undefined',1,'undefined',#{}#,[],'undefined'}}
				    ( <_cor5> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor5})
				      -| ['compiler_generated'] )
				  end
			      -| ['compiler_generated'] )
			    ( <_cor13> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','connection'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		%% Line 1031
		<{'error',Reason}> when 'true' ->
		    %% Line 1032
		    {'error',Reason}
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'init',3}}] )
	    -| ['compiler_generated'] )
	end
'terminate'/2 =
    %% Line 1036
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor4,{'state',_cor5,_cor6,Connection,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13}> when 'true' ->
	      do  %% Line 1037
		  apply 'ssh_close'/1
		      (Connection)
		  do  %% Line 1038
		      apply 'log'/2
			  (Connection, 'close')
		      %% Line 1039
		      'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'terminate',2}}] )
	    -| ['compiler_generated'] )
	end
'handle_msg'/3 =
    %% Line 1042
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'hello',Timeout},From,State = %% Line 1043
					  {'state',_cor31,_cor32,Connection,_cor33,_cor34,_cor35,HelloStatus,_cor36,_cor37,_cor38}> when 'true' ->
	      let <_cor3> =
		  %% Line 1044
		  apply 'client_hello'/0
		      ()
	      in  %% Line 1044
		  case apply 'do_send'/2
			   (Connection, _cor3) of
		    %% Line 1045
		    <'ok'> when 'true' ->
			%% Line 1046
			case HelloStatus of
			  %% Line 1047
			  <'undefined'> when 'true' ->
			      %% Line 1048
			      case apply 'set_request_timer'/1
				       (Timeout) of
				<{Ref,TRef}> when 'true' ->
				    let <_rec2> =
					%% Line 1049
					{'pending',TRef,%% Line 1050
							Ref,'undefined','undefined',%% Line 1051
										    From}
				    in  let <_cor8> =
					    %% Line 1049
					    call 'erlang':'setelement'
						(8, State, _rec2)
					in  %% Line 1049
					    {'noreply',_cor8}
				( <_cor4> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor4})
				  -| ['compiler_generated'] )
			      end
			  %% Line 1052
			  <'received'> when 'true' ->
			      let <_cor11> =
				  %% Line 1053
				  call 'erlang':'setelement'
				      (8, State, 'done')
			      in  %% Line 1053
				  {'reply','ok',_cor11}
			  %% Line 1054
			  <{'error',Reason}> when 'true' ->
			      %% Line 1055
			      {'stop',{'error',Reason},State}
			  ( <_cor12> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor12})
			    -| ['compiler_generated'] )
			end
		    %% Line 1057
		    <Error> when 'true' ->
			%% Line 1058
			{'stop',Error,State}
		  end
	  %% Line 1060
	  <_cor61,_X_From,State = {'state',_cor62,_cor63,_cor64,_cor65,'undefined',_cor66,_cor67,_cor68,_cor69,_cor70}> when 'true' ->
	      %% Line 1062
	      {'reply',{'error','waiting_for_hello'},State}
	  %% Line 1063
	  <'get_capabilities',_X_From,State = {'state',_cor71,_cor72,_cor73,Caps,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79}> when 'true' ->
	      %% Line 1064
	      {'reply',Caps,State}
	  %% Line 1065
	  <'get_session_id',_X_From,State = {'state',_cor80,_cor81,_cor82,_cor83,Id,_cor84,_cor85,_cor86,_cor87,_cor88}> when 'true' ->
	      %% Line 1066
	      {'reply',Id,State}
	  %% Line 1067
	  <{'send',Timeout,SimpleXml},From,State = %% Line 1068
						   {'state',_cor89,_cor90,Connection,_cor91,_cor92,_cor93,_cor94,_cor95,Pending,_cor96}> when 'true' ->
	      %% Line 1069
	      case apply 'do_send'/2
		       (Connection, SimpleXml) of
		%% Line 1070
		<'ok'> when 'true' ->
		    %% Line 1071
		    case apply 'set_request_timer'/1
			     (Timeout) of
		      <{Ref,TRef}> when 'true' ->
			  let <_rec5> =
			      %% Line 1072
			      [{'pending',TRef,%% Line 1073
					       Ref,'undefined','undefined',%% Line 1074
									   From}|%% Line 1074
										 Pending]
			  in  let <_cor18> =
				  %% Line 1072
				  call 'erlang':'setelement'
				      (10, State, _rec5)
			      in  %% Line 1072
				  {'noreply',_cor18}
		      ( <_cor14> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor14})
			-| ['compiler_generated'] )
		    end
		%% Line 1075
		<Error> when 'true' ->
		    %% Line 1076
		    {'reply',Error,State}
	      end
	  %% Line 1078
	  <{'send_rpc',SimpleXml,Timeout},From,State> when 'true' ->
	      %% Line 1079
	      apply 'do_send_rpc'/5
		  ('undefined', SimpleXml, Timeout, From, State)
	  %% Line 1080
	  <{'send_rpc_op',Op,Data,Timeout},From,State> when 'true' ->
	      let <SimpleXml> =
		  %% Line 1081
		  apply 'encode_rpc_operation'/2
		      (Op, Data)
	      in  %% Line 1082
		  apply 'do_send_rpc'/5
		      (Op, SimpleXml, Timeout, From, State)
	  %% Line 1083
	  <{Op = 'get_event_streams',Streams,Timeout},From,State> when 'true' ->
	      let <_cor25> =
		  %% Line 1085
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor23) ->
				case _cor23 of
				  <[Name|_cor22]> when 'true' ->
				      let <_cor24> =
					  apply 'lc$^0'/1
					      (_cor22)
				      in  ( [{'stream',[{'name',[Name|[]]}|[]]}|_cor24]
					    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor23> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor23})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Streams)
		    -| ['list_comprehension'] )
	      in  let <Filter> =
		      %% Line 1084
		      {'netconf',[{'xmlns',[117|[114|[110|[58|[105|[101|[116|[102|[58|[112|[97|[114|[97|[109|[115|[58|[120|[109|[108|[58|[110|[115|[58|[110|[101|[116|[109|[111|[100|[58|[110|[111|[116|[105|[102|[105|[99|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}],%% Line 1085
																																			       [{'streams',_cor25}|[]]}
		  in  let <SimpleXml> =
			  %% Line 1086
			  apply 'encode_rpc_operation'/2
			      ('get', [Filter|[]])
		      in  %% Line 1087
			  apply 'do_send_rpc'/5
			      (Op, SimpleXml, Timeout, From, State)
	  ( <_cor30,_cor29,_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor30,_cor29,_cor28})
		  -| [{'function_name',{'handle_msg',3}}] )
	    -| ['compiler_generated'] )
	end
'handle_msg'/2 =
    %% Line 1089
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'ssh_cm',CM,{'data',Ch,_X_Type,Data}},State> when 'true' ->
	      let <_cor2> =
		  %% Line 1090
		  call 'erlang':'size'
		      (Data)
	      in  do  %% Line 1090
		      call 'ssh_connection':'adjust_window'
			  (CM, Ch, _cor2)
		      %% Line 1091
		      apply 'handle_data'/2
			  (Data, State)
	  %% Line 1092
	  <{'ssh_cm',_X_CM,_X_SshCloseMsg},State> when 'true' ->
	      %% Line 1107
	      {'stop',State}
	  %% Line 1108
	  <{Ref,'timeout'},State = %% Line 1109
				   {'state',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,{'pending',_cor21,_cor22,_cor23,_cor24,Caller},_cor25,_cor26,_cor27}>
	      when call 'erlang':'=:='
		    (_cor22,
		     %% Line 1109
		     Ref) ->
	      do  %% Line 1110
		  call 'ct_gen_conn':'return'
		      (Caller, {'error',{'hello_session_failed','timeout'}})
		  let <_cor5> =
		      %% Line 1111
		      call 'erlang':'setelement'
			  (8, State, {'error','timeout'})
		  in  %% Line 1111
		      {'stop',_cor5}
	  %% Line 1112
	  <{Ref,'timeout'},State = {'state',_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,Pending,_cor47}> when 'true' ->
	      %% Line 1113
	      case %% Line 1114
		   call 'lists':'keytake'
		       (Ref, 3, Pending) of
		<{'value',{'pending',_cor48,_cor49,_cor50,Op,Caller},Pending1}> when 'true' ->
		    do  %% Line 1115
			call 'ct_gen_conn':'return'
			    (Caller, {'error','timeout'})
			let <_cor8> =
			    %% Line 1116
			    case Op of
			      %% Line 1117
			      <'close_session'> when 'true' ->
				  'stop'
			      %% Line 1118
			      <_cor51> when 'true' ->
				  'noreply'
			    end
			in  let <_cor12> =
				%% Line 1120
				call 'erlang':'setelement'
				    (10, State, Pending1)
			    in  %% Line 1120
				{_cor8,_cor12}
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'handle_msg',2}}] )
	    -| ['compiler_generated'] )
	end
'close'/1 =
    %% Line 1124
    fun (_cor0) ->
	%% Line 1125
	case apply 'get_handle'/1
		 (_cor0) of
	  %% Line 1126
	  <{'ok',Pid}> when 'true' ->
	      %% Line 1127
	      case call 'ct_gen_conn':'stop'
		       (Pid) of
		%% Line 1128
		<{'error',{'process_down',_cor4,'noproc'}}>
		    when call 'erlang':'=:='
			  (_cor4,
			   Pid) ->
		    %% Line 1129
		    {'error','already_closed'}
		%% Line 1130
		<Result> when 'true' ->
		    %% Line 1131
		    Result
	      end
	  %% Line 1133
	  <Error> when 'true' ->
	      %% Line 1134
	      Error
	end
'call'/2 =
    %% Line 1141
    fun (_cor1,_cor0) ->
	%% Line 1142
	apply 'call'/4
	    (_cor1, _cor0, 'infinity', 'false')
'call'/3 =
    %% Line 1143
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Client,Msg,Timeout>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(Timeout)
		in  let <_cor4> =
			call 'erlang':'=:='
			    (Timeout, 'infinity')
		    in  call 'erlang':'or'
			    (_cor3, _cor4) ->
	      %% Line 1144
	      apply 'call'/4
		  (Client, Msg, Timeout, 'false')
	  %% Line 1145
	  <Client,Msg,WaitStop>
	      when call 'erlang':'is_boolean'
		    (WaitStop) ->
	      %% Line 1146
	      apply 'call'/4
		  (Client, Msg, 'infinity', WaitStop)
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'call',3}}] )
	    -| ['compiler_generated'] )
	end
'call'/4 =
    %% Line 1147
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1148
	case apply 'get_handle'/1
		 (_cor3) of
	  %% Line 1149
	  <{'ok',Pid}> when 'true' ->
	      %% Line 1150
	      case call 'ct_gen_conn':'call'
		       (Pid, _cor2, _cor1) of
		%% Line 1151
		<{'error',{'process_down',_cor13,'noproc'}}>
		    when call 'erlang':'=:='
			  (_cor13,
			   Pid) ->
		    %% Line 1152
		    {'error','no_such_client'}
		%% Line 1153
		<{'error',{'process_down',_cor14,'normal'}}>
		    when let <_cor15> =
			  call 'erlang':'=:='
			      (_cor14, Pid)
		      in  let <_cor16> =
			      call 'erlang':'=:='
				  (_cor0, 'true')
			  in  call 'erlang':'and'
				  (_cor15, _cor16) ->
		    %% Line 1157
		    'ok'
		%% Line 1158
		<{'error',{'process_down',_cor17,'normal'}}>
		    when call 'erlang':'=:='
			  (_cor17,
			   Pid) ->
		    %% Line 1159
		    {'error','closed'}
		%% Line 1160
		<{'error',{'process_down',_cor18,Reason}}>
		    when call 'erlang':'=:='
			  (_cor18,
			   Pid) ->
		    %% Line 1161
		    {'error',{'closed',Reason}}
		%% Line 1162
		<Other>
		    when call 'erlang':'=:='
			  (_cor0,
			   'true') ->
		    let <MRef> =
			%% Line 1163
			call 'erlang':'monitor'
			    ('process', Pid)
		    in  %% Line 1164
			receive
			  %% Line 1165
			  <{'DOWN',_cor19,'process',_cor20,Normal}>
			      when let <_cor23> =
				    call 'erlang':'=:='
					(_cor19, MRef)
				in  let <_cor21> =
					call 'erlang':'=:='
					    (_cor20, Pid)
				    in  let <_cor5> =
					    call 'erlang':'=:='
						(Normal, 'normal')
					in  let <_cor6> =
						%% Line 1166
						call 'erlang':'=:='
						    (Normal, 'noproc')
					    in  let <_cor22> =
						    call 'erlang':'or'
							(_cor5, _cor6)
						in  let <_cor24> =
							call 'erlang':'and'
							    (_cor21, _cor22)
						    in  call 'erlang':'and'
							    (_cor23, _cor24) ->
			      %% Line 1167
			      Other
			  %% Line 1168
			  <{'DOWN',_cor25,'process',_cor26,Reason}>
			      when let <_cor27> =
				    call 'erlang':'=:='
					(_cor25, MRef)
				in  let <_cor28> =
					call 'erlang':'=:='
					    (_cor26, Pid)
				    in  call 'erlang':'and'
					    (_cor27, _cor28) ->
			      %% Line 1169
			      {'error',{{'closed',Reason},Other}}
			after _cor1 ->
			  do  %% Line 1171
			      call 'erlang':'demonitor'
				  (MRef, ['flush'])
			      %% Line 1172
			      {'error',{'timeout',Other}}
		%% Line 1174
		<Other> when 'true' ->
		    %% Line 1175
		    Other
	      end
	  %% Line 1177
	  <Error> when 'true' ->
	      %% Line 1178
	      Error
	end
'get_handle'/1 =
    %% Line 1181
    fun (_cor0) ->
	case _cor0 of
	  <Client>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      %% Line 1182
	      {'ok',Client}
	  %% Line 1183
	  <Client> when 'true' ->
	      %% Line 1184
	      case call 'ct_util':'get_connection'
		       (Client, 'ct_netconfc') of
		%% Line 1185
		<{'ok',{Pid,_cor3}}> when 'true' ->
		    %% Line 1186
		    {'ok',Pid}
		%% Line 1187
		<{'error','no_registered_connection'}> when 'true' ->
		    %% Line 1188
		    {'error',{'no_connection_found',Client}}
		%% Line 1189
		<Error> when 'true' ->
		    %% Line 1190
		    Error
	      end
	end
'check_options'/4 =
    %% Line 1193
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],'undefined',_X_Port,_X_Options> when 'true' ->
	      %% Line 1194
	      {'error','no_host_address'}
	  %% Line 1195
	  <[],_X_Host,'undefined',_X_Options> when 'true' ->
	      %% Line 1196
	      {'error','no_port'}
	  %% Line 1197
	  <[],Host,Port,Options> when 'true' ->
	      %% Line 1198
	      {Host,Port,Options}
	  %% Line 1199
	  <[{'ssh',Host}|T],_cor24,Port,Options = {'options',_cor25,_cor26,_cor27,_cor28,_cor29}> when 'true' ->
	      let <_cor6> =
		  %% Line 1200
		  call 'erlang':'setelement'
		      (3, Options, Host)
	      in  %% Line 1200
		  apply 'check_options'/4
		      (T, Host, Port, _cor6)
	  %% Line 1201
	  <[{'port',Port}|T],Host,_cor36,Options = {'options',_cor37,_cor38,_cor39,_cor40,_cor41}> when 'true' ->
	      let <_cor9> =
		  %% Line 1202
		  call 'erlang':'setelement'
		      (4, Options, Port)
	      in  %% Line 1202
		  apply 'check_options'/4
		      (T, Host, Port, _cor9)
	  %% Line 1203
	  <[{'timeout',Timeout}|T],Host,Port,Options>
	      when let <_cor10> =
		    %% Line 1204
		    call 'erlang':'is_integer'
			(Timeout)
		in  let <_cor11> =
			%% Line 1204
			call 'erlang':'=:='
			    (Timeout, 'infinity')
		    in  %% Line 1204
			call 'erlang':'or'
			    (_cor10, _cor11) ->
	      %% Line 1205
	      case Options of
		<{'options',_cor48,_cor49,_cor50,_cor51,_cor52}> when 'true' ->
		    let <_cor14> =
			call 'erlang':'setelement'
			    (5, Options, Timeout)
		    in  apply 'check_options'/4
			    (T, Host, Port, _cor14)
		( <_cor53> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','options'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 1206
	  <[Opt = {X,_cor54}|T],Host,Port,Options = {'options',SshOpts,_cor55,_cor56,_cor57,_cor58}> when 'true' ->
	      %% Line 1207
	      case call 'lists':'member'
		       (X, ['user'|['password'|['user_dir']]]) of
		%% Line 1208
		<'true'> when 'true' ->
		    let <_rec12> =
			%% Line 1209
			[Opt|SshOpts]
		    in  let <_cor18> =
			    %% Line 1209
			    call 'erlang':'setelement'
				(2, Options, _rec12)
			in  %% Line 1209
			    apply 'check_options'/4
				(T, Host, Port, _cor18)
		%% Line 1210
		<'false'> when 'true' ->
		    %% Line 1211
		    {'error',{'invalid_option',Opt}}
		( <_cor19> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor19})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor23,_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21,_cor20})
		  -| [{'function_name',{'check_options',4}}] )
	    -| ['compiler_generated'] )
	end
'set_request_timer'/1 =
    %% Line 1215
    fun (_cor0) ->
	case _cor0 of
	  <'infinity'> when 'true' ->
	      %% Line 1216
	      {'undefined','undefined'}
	  %% Line 1217
	  <T> when 'true' ->
	      let <Ref> =
		  %% Line 1218
		  call 'erlang':'make_ref'
		      ()
	      in  %% Line 1219
		  case call 'timer':'send_after'
			   (T, {Ref,'timeout'}) of
		    <{'ok',TRef}> when 'true' ->
			%% Line 1220
			{Ref,TRef}
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	end
'client_hello'/0 =
    %% Line 1224
    fun () ->
	%% Line 1225
	{'hello',[{'xmlns',[117|[114|[110|[58|[105|[101|[116|[102|[58|[112|[97|[114|[97|[109|[115|[58|[120|[109|[108|[58|[110|[115|[58|[110|[101|[116|[99|[111|[110|[102|[58|[98|[97|[115|[101|[58|[49|[46|[48]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}],[{'capabilities',[{'capability',[[117|[114|[110|[58|[105|[101|[116|[102|[58|[112|[97|[114|[97|[109|[115|[58|[110|[101|[116|[99|[111|[110|[102|[58|[98|[97|[115|[101|[58|[49|[46|[48]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}]}]}
'encode_rpc_operation'/2 =
    %% Line 1231
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Lock,[Target|[]]>
	      when let <_cor2> =
		    call 'erlang':'=:='
			(Lock, 'lock')
		in  let <_cor3> =
			call 'erlang':'=:='
			    (Lock, 'unlock')
		    in  call 'erlang':'or'
			    (_cor2, _cor3) ->
	      %% Line 1232
	      {Lock,[{'target',[Target|[]]}|[]]}
	  %% Line 1233
	  <'get',[Filter|[]]> when 'true' ->
	      let <_cor4> =
		  %% Line 1234
		  apply 'filter'/1
		      (Filter)
	      in  %% Line 1234
		  {'get',_cor4}
	  %% Line 1235
	  <'get_config',[Source|[Filter|[]]]> when 'true' ->
	      let <_cor5> =
		  %% Line 1236
		  apply 'filter'/1
		      (Filter)
	      in  let <_cor6> =
		      %% Line 1236
		      [{'source',[Source|[]]}|_cor5]
		  in  %% Line 1236
		      {'get-config',_cor6}
	  %% Line 1237
	  <'edit_config',[Target|[Config|[]]]> when 'true' ->
	      %% Line 1238
	      {'edit-config',[{'target',[Target|[]]}|[{'config',[Config|[]]}|[]]]}
	  %% Line 1239
	  <'delete_config',[Target|[]]> when 'true' ->
	      %% Line 1240
	      {'delete-config',[{'target',[Target|[]]}|[]]}
	  %% Line 1241
	  <'copy_config',[Target|[Source|[]]]> when 'true' ->
	      %% Line 1242
	      {'copy-config',[{'target',[Target|[]]}|[{'source',[Source|[]]}|[]]]}
	  %% Line 1243
	  <'action',[Action|[]]> when 'true' ->
	      %% Line 1244
	      {'action',[{'xmlns',[117|[114|[110|[58|[99|[111|[109|[58|[101|[114|[105|[99|[115|[115|[111|[110|[58|[101|[99|[105|[109|[58|[49|[46|[48]]]]]]]]]]]]]]]]]]]]]]]]]}],[{'data',[Action|[]]}|[]]}
	  %% Line 1245
	  <'kill_session',[SessionId|[]]> when 'true' ->
	      let <_cor7> =
		  %% Line 1246
		  call 'erlang':'integer_to_list'
		      (SessionId)
	      in  %% Line 1246
		  {'kill-session',[{'session-id',[_cor7|[]]}|[]]}
	  %% Line 1247
	  <'close_session',[]> when 'true' ->
	      %% Line 1248
	      'close-session'
	  %% Line 1249
	  <{'create_subscription',_cor16},%% Line 1250
					  [Stream|[Filter|[StartTime|[StopTime|[]]]]]> when 'true' ->
	      let <_cor11> =
		  %% Line 1253
		  apply 'filter'/1
		      (Filter)
	      in  let <_cor9> =
		      %% Line 1254
		      apply 'maybe_element'/2
			  ('startTime', StartTime)
		  in  let <_cor8> =
			  %% Line 1255
			  apply 'maybe_element'/2
			      ('stopTime', StopTime)
		      in  let <_cor10> =
			      %% Line 1254
			      call 'erlang':'++'
				  (_cor9, _cor8)
			  in  let <_cor12> =
				  %% Line 1253
				  call 'erlang':'++'
				      (_cor11, _cor10)
			      in  let <_cor13> =
				      %% Line 1252
				      [{'stream',[Stream|[]]}|_cor12]
				  in  %% Line 1251
				      {'create-subscription',[{'xmlns',[117|[114|[110|[58|[105|[101|[116|[102|[58|[112|[97|[114|[97|[109|[115|[58|[120|[109|[108|[58|[110|[115|[58|[110|[101|[116|[99|[111|[110|[102|[58|[110|[111|[116|[105|[102|[105|[99|[97|[116|[105|[111|[110|[58|[49|[46|[48]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}],_cor13}
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'encode_rpc_operation',2}}] )
	    -| ['compiler_generated'] )
	end
'filter'/1 =
    %% Line 1257
    fun (_cor0) ->
	case _cor0 of
	  <'undefined'> when 'true' ->
	      %% Line 1258
	      []
	  %% Line 1259
	  <{'xpath',Filter}>
	      when try
		    ( case <> of
			( <>
			      when call 'erlang':'is_list'
				    (Filter) ->
			      let <_cor2> =
				  call 'erlang':'hd'
				      (Filter)
			      in  call 'erlang':'is_integer'
				      (_cor2)
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      'false'
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1260
	      [{'filter',[{'type',[120|[112|[97|[116|[104]]]]]}|[{'select',Filter}|[]]],[]}|[]]
	  %% Line 1261
	  <Filter>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 1262
	      [{'filter',[{'type',[115|[117|[98|[116|[114|[101|[101]]]]]]]}],Filter}|[]]
	  %% Line 1263
	  <Filter> when 'true' ->
	      %% Line 1264
	      apply 'filter'/1
		  ([Filter|[]])
	end
'maybe_element'/2 =
    %% Line 1266
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor4,'undefined'> when 'true' ->
	      %% Line 1267
	      []
	  %% Line 1268
	  <Tag,Value> when 'true' ->
	      %% Line 1269
	      [{Tag,[Value|[]]}|[]]
	end
'do_send_rpc'/5 =
    %% Line 1273
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <PendingOp,SimpleXml,Timeout,Caller,State = %% Line 1274
						      {'state',_cor22,_cor23,Connection,_cor24,_cor25,MsgId,_cor26,_cor27,Pending,_cor28}> when 'true' ->
	      %% Line 1275
	      case apply 'do_send_rpc'/3
		       (Connection, MsgId, SimpleXml) of
		%% Line 1276
		<'ok'> when 'true' ->
		    %% Line 1277
		    case apply 'set_request_timer'/1
			     (Timeout) of
		      <{Ref,TRef}> when 'true' ->
			  let <_rec14> =
			      %% Line 1278
			      call 'erlang':'+'
				  (MsgId, 1)
			  in  let <_rec15> =
				  %% Line 1279
				  [{'pending',TRef,%% Line 1280
						   Ref,%% Line 1281
						       MsgId,%% Line 1282
							     PendingOp,%% Line 1283
								       Caller}|%% Line 1283
									       Pending]
			      in  let <_cor9> =
				      %% Line 1279
				      call 'erlang':'setelement'
					  (10, State, _rec15)
				  in  let <_cor11> =
					  %% Line 1278
					  call 'erlang':'setelement'
					      (7, _cor9, _rec14)
				      in  %% Line 1278
					  {'noreply',_cor11}
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor5})
			-| ['compiler_generated'] )
		    end
		%% Line 1284
		<Error> when 'true' ->
		    let <_rec17> =
			%% Line 1285
			call 'erlang':'+'
			    (MsgId, 1)
		    in  let <_cor15> =
			    %% Line 1285
			    call 'erlang':'setelement'
				(7, State, _rec17)
			in  %% Line 1285
			    {'reply',Error,_cor15}
	      end
	  ( <_cor21,_cor20,_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19,_cor18,_cor17})
		  -| [{'function_name',{'do_send_rpc',5}}] )
	    -| ['compiler_generated'] )
	end
'do_send_rpc'/3 =
    %% Line 1288
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1289
	apply 'do_send'/2
	    (_cor2, %% Line 1290
		    {'rpc',%% Line 1291
			   [{'message-id',_cor1}|[{'xmlns',[117|[114|[110|[58|[105|[101|[116|[102|[58|[112|[97|[114|[97|[109|[115|[58|[120|[109|[108|[58|[110|[115|[58|[110|[101|[116|[99|[111|[110|[102|[58|[98|[97|[115|[101|[58|[49|[46|[48]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}]],%% Line 1292
																																			 [_cor0|[]]})
'do_send'/2 =
    %% Line 1294
    fun (_cor1,_cor0) ->
	let <Xml> =
	    %% Line 1295
	    apply 'to_xml_doc'/1
		(_cor0)
	in  do  %% Line 1296
		apply 'log'/3
		    (_cor1, 'send', Xml)
		%% Line 1297
		apply 'ssh_send'/2
		    (_cor1, Xml)
'to_xml_doc'/1 =
    %% Line 1299
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 1302
	    call 'xmerl':'export_simple'
		([_cor0|[]], %% Line 1303
			     'xmerl_xml', %% Line 1304
					  [{'xmlAttribute','prolog',[],[],[],[],'undefined',[],[60|[63|[120|[109|[108|[32|[118|[101|[114|[115|[105|[111|[110|[61|[34|[49|[46|[48|[34|[32|[101|[110|[99|[111|[100|[105|[110|[103|[61|[34|[85|[84|[70|[45|[56|[34|[63|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],'undefined'}])
	in  let <Xml> =
		%% Line 1301
		call 'unicode':'characters_to_binary'
		    (_cor2)
	    in  %% Line 1306
		#{#<Xml>('all',8,'binary',['unsigned'|['big']]),
		  #<#{#<93>(8,1,'integer',['unsigned'|['big']]),
		      #<93>(8,1,'integer',['unsigned'|['big']]),
		      #<62>(8,1,'integer',['unsigned'|['big']]),
		      #<93>(8,1,'integer',['unsigned'|['big']]),
		      #<93>(8,1,'integer',['unsigned'|['big']]),
		      #<62>(8,1,'integer',['unsigned'|['big']])}#>('all',8,'binary',['unsigned'|['big']])}#
'handle_data'/2 =
    %% Line 1310
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <NewData,State = {'state',_cor28,_cor29,Connection,_cor30,_cor31,_cor32,_cor33,Buff,_cor34,_cor35}> when 'true' ->
	      do  %% Line 1311
		  apply 'log'/3
		      (Connection, 'recv', NewData)
		  let <Data> =
		      %% Line 1312
		      #{#<Buff>('all',8,'binary',['unsigned'|['big']]),
			#<NewData>('all',8,'binary',['unsigned'|['big']])}#
		  in  %% Line 1313
		      case call 'xmerl_sax_parser':'stream'
			       (#{}#, %% Line 1314
				      [{'continuation_fun',( 'sax_cont'/1
							     -| [{'id',{0,0,'-handle_data/2-fun-0-'}}] )}|%% Line 1315
													  [{'continuation_state',{Data,Connection,'false'}}|%% Line 1316
																			    [{'event_fun',( 'sax_event'/3
																					    -| [{'id',{0,0,'-handle_data/2-fun-1-'}}] )}|%% Line 1317
																											 [{'event_state',[]}]]]]) of
			%% Line 1318
			<{'ok',Simple,Rest}> when 'true' ->
			    let <_cor5> =
				%% Line 1319
				call 'erlang':'setelement'
				    (9, State, Rest)
			    in  %% Line 1319
				apply 'decode'/2
				    (Simple, _cor5)
			%% Line 1320
			<{'fatal_error',_X_Loc,Reason,_X_EndTags,_X_EventState}> when 'true' ->
			    %% Line 1321
			    ( case Connection of
				( <( {'connection',_cor47,_cor48,_cor49,_rec20}
				     -| ['compiler_generated'] )> when 'true' ->
				      let <_cor8> =
					  call 'erlang':'self'
					      ()
				      in  do  call 'error_logger':'error_report'
						  ([{'ct_connection',_rec20}|[{'client',_cor8}|[{'module','ct_netconfc'}|[{'line',1321}|[{'parse_error',Reason}|%% Line 1322
																				[{'buffer',Buff}|%% Line 1323
																						 [{'new_data',NewData}|[]]]]]]]])
					      %% Line 1324
					      case Reason of
						%% Line 1325
						<{'could_not_fetch_data',Msg}> when 'true' ->
						    let <_cor11> =
							%% Line 1326
							call 'erlang':'setelement'
							    (9, State, #{}#)
						    in  %% Line 1326
							apply 'handle_msg'/2
							    (Msg, _cor11)
						%% Line 1327
						<_X_Other> when 'true' ->
						    let <_cor18> =
							%% Line 1329
							case _cor34 of
							  %% Line 1330
							  <[]> when 'true' ->
							      %% Line 1331
							      []
							  %% Line 1332
							  <Pending> when 'true' ->
							      %% Line 1335
							      case %% Line 1336
								   call 'lists':'last'
								       (Pending) of
								<P = {'pending',TRef,_cor72,_cor73,_cor74,Caller}> when 'true' ->
								    let <_X_> =
									%% Line 1337
									( call 'timer':'cancel'
									      (TRef)
									  -| ['result_not_wanted'] )
								    in  let <Reason1> = {%% Line 1338
									     'failed_to_parse_received_data',%% Line 1338
													     Reason}
									in  do  %% Line 1339
										call 'ct_gen_conn':'return'
										    (Caller, {'error',Reason1})
										%% Line 1340
										call 'lists':'delete'
										    (P, Pending)
								( <_cor14> when 'true' ->
								      primop 'match_fail'
									  ({'badmatch',_cor14})
								  -| ['compiler_generated'] )
							      end
							end
						    in  let <_cor21> =
							    %% Line 1342
							    call 'erlang':'setelement'
								(10, State, _cor18)
							in  let <_cor23> =
								%% Line 1342
								call 'erlang':'setelement'
								    (9, _cor21, #{}#)
							    in  %% Line 1342
								{'noreply',_cor23}
					      end
				  -| ['compiler_generated'] )
				( <_cor50> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','connection'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			( <_cor25> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor25})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor27,_cor26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26})
		  -| [{'function_name',{'handle_data',2}}] )
	    -| ['compiler_generated'] )
	end
'sax_cont'/1 =
    %% Line 1349
    fun (_cor0) ->
	case _cor0 of
	  <'done'> when 'true' ->
	      %% Line 1350
	      {#{}#,'done'}
	  %% Line 1351
	  <{Data,Connection,'false'}> when 'true' ->
	      %% Line 1352
	      case call 'binary':'split'
		       (Data, [#{#<93>(8,1,'integer',['unsigned'|['big']]),
				 #<93>(8,1,'integer',['unsigned'|['big']]),
				 #<62>(8,1,'integer',['unsigned'|['big']]),
				 #<93>(8,1,'integer',['unsigned'|['big']]),
				 #<93>(8,1,'integer',['unsigned'|['big']]),
				 #<62>(8,1,'integer',['unsigned'|['big']])}#], []) of
		%% Line 1353
		<[All|[]]> when 'true' ->
		    let <_cor1> =
			%% Line 1357
			call 'erlang':'size'
			    (All)
		    in  let <SafeSize> =
			    %% Line 1357
			    call 'erlang':'-'
				(_cor1, 5)
			in  %% Line 1358
			    case ( All
				   -| ['reuse_for_context'] ) of
			      <#{#<New>(SafeSize,8,'binary',['unsigned'|['big']]),
				 #<Save>(5,8,'binary',['unsigned'|['big']])}#> when 'true' ->
				  %% Line 1359
				  {New,{Save,Connection,'true'}}
			      ( <_cor3> when 'true' ->
				    do  primop 'bs_context_to_binary'
					    (_cor3)
					primop 'match_fail'
					    ({'badmatch',_cor3})
				-| ['compiler_generated'] )
			    end
		%% Line 1360
		<Msgs = [_X_Msg|[_X_Rest|[]]]> when 'true' ->
		    let <_cor4> =
			%% Line 1364
			call 'erlang':'list_to_binary'
			    (Msgs)
		    in  %% Line 1364
			{_cor4,'done'}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1366
	  <{Data,Connection,'true'}> when 'true' ->
	      %% Line 1367
	      case apply 'ssh_receive_data'/0
		       () of
		%% Line 1368
		<{'ok',Bin}> when 'true' ->
		    do  %% Line 1369
			apply 'log'/3
			    (Connection, 'recv', Bin)
			let <_cor6> =
			    %% Line 1370
			    #{#<Data>('all',8,'binary',['unsigned'|['big']]),
			      #<Bin>('all',8,'binary',['unsigned'|['big']])}#
			in  %% Line 1370
			    apply 'sax_cont'/1
				({_cor6,Connection,'false'})
		%% Line 1371
		<{'error',Reason}> when 'true' ->
		    %% Line 1372
		    call 'erlang':'throw'
			({'could_not_fetch_data',Reason})
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8})
		  -| [{'function_name',{'sax_cont',1}}] )
	    -| ['compiler_generated'] )
	end
'sax_event'/3 =
    %% Line 1379
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1380
	apply 'sax_event'/2
	    (_cor2, _cor0)
'sax_event'/2 =
    %% Line 1382
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'startPrefixMapping',Prefix,Uri},Acc> when 'true' ->
	      %% Line 1385
	      [{'xmlns',{Prefix,Uri}}|Acc]
	  %% Line 1386
	  <{'startElement',_X_Uri,_X_Name,QN,Attrs},Acc> when 'true' ->
	      %% Line 1390
	      case apply 'split_attrs_and_elements'/2
		       (Acc, []) of
		<{NsAttrs,NewAcc}> when 'true' ->
		    let <Tag> =
			%% Line 1391
			apply 'qn_to_tag'/1
			    (QN)
		    in  let <_cor4> =
			    %% Line 1392
			    apply 'parse_attrs'/1
				(Attrs)
			in  let <_cor5> =
				%% Line 1392
				call 'erlang':'++'
				    (NsAttrs, _cor4)
			    in  %% Line 1392
				[{Tag,_cor5,[]}|NewAcc]
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1393
	  <{'endElement',_X_Uri,_X_Name,_X_QN},[{Name,Attrs,Cont}|[{Parent,PA,PC}|Acc]]> when 'true' ->
	      let <_cor6> =
		  %% Line 1394
		  call 'lists':'reverse'
		      (Cont)
	      in  %% Line 1394
		  [{Parent,PA,[{Name,Attrs,_cor6}|PC]}|Acc]
	  %% Line 1395
	  <'endDocument',[{Tag,Attrs,Cont}|[]]> when 'true' ->
	      let <_cor7> =
		  %% Line 1396
		  call 'lists':'reverse'
		      (Cont)
	      in  %% Line 1396
		  {Tag,Attrs,_cor7}
	  %% Line 1397
	  <{'characters',String},[{Name,Attrs,Cont}|Acc]> when 'true' ->
	      %% Line 1398
	      [{Name,Attrs,[String|Cont]}|Acc]
	  %% Line 1399
	  <_X_Event,State> when 'true' ->
	      %% Line 1400
	      State
	end
'split_attrs_and_elements'/2 =
    %% Line 1402
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'xmlns',{Prefix,Uri}}|Rest],Attrs> when 'true' ->
	      let <_cor2> =
		  %% Line 1403
		  apply 'xmlnstag'/1
		      (Prefix)
	      in  %% Line 1403
		  apply 'split_attrs_and_elements'/2
		      (Rest, [{_cor2,Uri}|Attrs])
	  %% Line 1404
	  <Elements,Attrs> when 'true' ->
	      %% Line 1405
	      {Attrs,Elements}
	end
'xmlnstag'/1 =
    %% Line 1407
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 1408
	      'xmlns'
	  %% Line 1409
	  <Prefix> when 'true' ->
	      let <_cor1> =
		  %% Line 1410
		  call 'erlang':'++'
		      ([120|[109|[108|[110|[115|[58]]]]]], Prefix)
	      in  %% Line 1410
		  call 'erlang':'list_to_atom'
		      (_cor1)
	end
'qn_to_tag'/1 =
    %% Line 1412
    fun (_cor0) ->
	case _cor0 of
	  <{[],Name}> when 'true' ->
	      %% Line 1413
	      call 'erlang':'list_to_atom'
		  (Name)
	  %% Line 1414
	  <{Prefix,Name}> when 'true' ->
	      let <_cor1> =
		  %% Line 1415
		  [58|Name]
	      in  let <_cor2> =
		      %% Line 1415
		      call 'erlang':'++'
			  (Prefix, _cor1)
		  in  %% Line 1415
		      call 'erlang':'list_to_atom'
			  (_cor2)
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'qn_to_tag',1}}] )
	    -| ['compiler_generated'] )
	end
'parse_attrs'/1 =
    %% Line 1417
    fun (_cor0) ->
	case _cor0 of
	  <[{_X_Uri,[],Name,Value}|Attrs]> when 'true' ->
	      let <_cor1> =
		  %% Line 1418
		  call 'erlang':'list_to_atom'
		      (Name)
	      in  let <_cor2> =
		      %% Line 1418
		      apply 'parse_attrs'/1
			  (Attrs)
		  in  %% Line 1418
		      [{_cor1,Value}|_cor2]
	  %% Line 1419
	  <[{_X_Uri,Prefix,Name,Value}|Attrs]> when 'true' ->
	      let <_cor3> =
		  %% Line 1420
		  [58|Name]
	      in  let <_cor4> =
		      %% Line 1420
		      call 'erlang':'++'
			  (Prefix, _cor3)
		  in  let <_cor5> =
			  %% Line 1420
			  call 'erlang':'list_to_atom'
			      (_cor4)
		      in  let <_cor6> =
			      %% Line 1420
			      apply 'parse_attrs'/1
				  (Attrs)
			  in  %% Line 1420
			      [{_cor5,Value}|_cor6]
	  %% Line 1421
	  <[]> when 'true' ->
	      %% Line 1422
	      []
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'parse_attrs',1}}] )
	    -| ['compiler_generated'] )
	end
'decode'/2 =
    %% Line 1427
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <E = {Tag,Attrs,_cor51},State = {'state',_cor52,_cor53,Connection,_cor54,_cor55,_cor56,_cor57,_cor58,Pending,_cor59}> when 'true' ->
	      %% Line 1428
	      ( case Connection of
		  ( <( {'connection',_cor60,_cor61,_cor62,_rec24}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 1429
			case apply 'get_local_name_atom'/1
				 (Tag) of
			  %% Line 1430
			  <'rpc-reply'> when 'true' ->
			      %% Line 1431
			      case apply 'get_msg_id'/1
				       (Attrs) of
				%% Line 1432
				<'undefined'> when 'true' ->
				    %% Line 1433
				    case Pending of
				      %% Line 1434
				      <[{'pending',_cor64,_cor65,MsgId,_cor66,_cor67}|[]]> when 'true' ->
					  let <_cor5> =
					      %% Line 1435
					      call 'erlang':'self'
						  ()
					  in  do  %% Line 1435
						  call 'error_logger':'error_report'
						      ([{'ct_connection',_rec24}|[{'client',_cor5}|[{'module','ct_netconfc'}|[{'line',1435}|[{'warning','rpc_reply_missing_msg_id'}|%% Line 1436
																						    [{'assuming',MsgId}|[]]]]]]])
						  %% Line 1437
						  apply 'decode_rpc_reply'/3
						      (MsgId, E, State)
				      %% Line 1438
				      <_cor68> when 'true' ->
					  let <_cor6> =
					      %% Line 1439
					      call 'erlang':'self'
						  ()
					  in  do  %% Line 1439
						  call 'error_logger':'error_report'
						      ([{'ct_connection',_rec24}|[{'client',_cor6}|[{'module','ct_netconfc'}|[{'line',1439}|[{'error','rpc_reply_missing_msg_id'}]]]]])
						  %% Line 1440
						  {'noreply',State}
				    end
				%% Line 1442
				<MsgId> when 'true' ->
				    %% Line 1443
				    apply 'decode_rpc_reply'/3
					(MsgId, E, State)
			      end
			  %% Line 1445
			  <'hello'> when 'true' ->
			      %% Line 1446
			      case _cor57 of
				%% Line 1447
				<'undefined'> when 'true' ->
				    %% Line 1448
				    case apply 'decode_hello'/1
					     (E) of
				      %% Line 1449
				      <{'ok',SessionId,Capabilities}> when 'true' ->
					  let <_cor12> =
					      %% Line 1452
					      call 'erlang':'setelement'
						  (8, State, 'received')
					  in  let <_cor13> =
						  %% Line 1450
						  call 'erlang':'setelement'
						      (6, _cor12, SessionId)
					      in  let <_cor15> =
						      %% Line 1451
						      call 'erlang':'setelement'
							  (5, _cor13, Capabilities)
						  in  %% Line 1450
						      {'noreply',_cor15}
				      %% Line 1453
				      <{'error',Reason}> when 'true' ->
					  let <_rec27> = {%% Line 1454
					       'error',%% Line 1454
						       Reason}
					  in  let <_cor19> =
						  %% Line 1454
						  call 'erlang':'setelement'
						      (8, State, _rec27)
					      in  %% Line 1454
						  {'noreply',_cor19}
				      ( <_cor20> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor20})
					-| ['compiler_generated'] )
				    end
				%% Line 1456
				<{'pending',TRef,_cor101,_cor102,_cor103,Caller}> when 'true' ->
				    let <_X_> =
					%% Line 1457
					( call 'timer':'cancel'
					      (TRef)
					  -| ['result_not_wanted'] )
				    in  %% Line 1458
					case apply 'decode_hello'/1
						 (E) of
					  %% Line 1459
					  <{'ok',SessionId,Capabilities}> when 'true' ->
					      do  %% Line 1460
						  call 'ct_gen_conn':'return'
						      (Caller, 'ok')
						  let <_cor23> =
						      %% Line 1463
						      call 'erlang':'setelement'
							  (8, State, 'done')
						  in  let <_cor24> =
							  %% Line 1461
							  call 'erlang':'setelement'
							      (6, _cor23, SessionId)
						      in  let <_cor26> =
							      %% Line 1462
							      call 'erlang':'setelement'
								  (5, _cor24, Capabilities)
							  in  %% Line 1461
							      {'noreply',_cor26}
					  %% Line 1464
					  <{'error',Reason}> when 'true' ->
					      do  %% Line 1465
						  call 'ct_gen_conn':'return'
						      (Caller, {'error',Reason})
						  let <_rec30> = {%% Line 1466
						       'error',%% Line 1466
							       Reason}
						  in  let <_cor30> =
							  %% Line 1466
							  call 'erlang':'setelement'
							      (8, State, _rec30)
						      in  %% Line 1466
							  {'stop',_cor30}
					  ( <_cor31> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor31})
					    -| ['compiler_generated'] )
					end
				%% Line 1468
				<Other> when 'true' ->
				    let <_cor32> =
					%% Line 1469
					call 'erlang':'self'
					    ()
				    in  do  %% Line 1469
					    call 'error_logger':'error_report'
						([{'ct_connection',_rec24}|[{'client',_cor32}|[{'module','ct_netconfc'}|[{'line',1469}|[{'got_unexpected_hello',E}|%% Line 1470
																				   [{'hello_status',Other}|[]]]]]]])
					    %% Line 1471
					    {'noreply',State}
			      end
			  %% Line 1473
			  <'notification'> when 'true' ->
			      do  %% Line 1475
				  call 'erlang':'!'
				      (_cor59, E)
				  %% Line 1476
				  {'noreply',State}
			  %% Line 1477
			  <Other> when 'true' ->
			      let <_cor41> =
				  %% Line 1482
				  ( letrec
					'lc$^0'/1 =
					    fun (_cor39) ->
						case _cor39 of
						  <[P = {'pending',_cor136,_cor137,'undefined','undefined',_cor138}|_cor38]> when 'true' ->
						      let <_cor40> =
							  apply 'lc$^0'/1
							      (_cor38)
						      in  ( [P|_cor40]
							    -| ['compiler_generated'] )
						  ( <[_cor37|_cor38]> when 'true' ->
							apply 'lc$^0'/1
							    (_cor38)
						    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_cor39> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor39})
							  -| [{'function_name',{'lc$^0',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  apply 'lc$^0'/1
					    (Pending)
				    -| ['list_comprehension'] )
			      in  %% Line 1482
				  case _cor41 of
				    %% Line 1483
				    <[{'pending',TRef,_cor139,_cor140,_cor141,%% Line 1484
									      Caller}|%% Line 1484
										      []]> when 'true' ->
					let <_X_> =
					    %% Line 1485
					    ( call 'timer':'cancel'
						  (TRef)
					      -| ['result_not_wanted'] )
					in  do  %% Line 1486
						call 'ct_gen_conn':'return'
						    (Caller, E)
						let <_cor45> =
						    %% Line 1487
						    call 'erlang':'setelement'
							(10, State, [])
						in  %% Line 1487
						    {'noreply',_cor45}
				    %% Line 1488
				    <_cor153> when 'true' ->
					let <_cor46> =
					    %% Line 1489
					    call 'erlang':'self'
						()
					in  do  %% Line 1489
						call 'error_logger':'error_report'
						    ([{'ct_connection',_rec24}|[{'client',_cor46}|[{'module','ct_netconfc'}|[{'line',1489}|[{'got_unexpected_msg',Other}|%% Line 1490
																					 [{'expecting',Pending}|[]]]]]]])
						%% Line 1491
						{'noreply',State}
				  end
			end
		    -| ['compiler_generated'] )
		  ( <_cor63> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','connection'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor50,_cor49> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor50,_cor49})
		  -| [{'function_name',{'decode',2}}] )
	    -| ['compiler_generated'] )
	end
'get_msg_id'/1 =
    %% Line 1496
    fun (_cor0) ->
	%% Line 1497
	case call 'lists':'keyfind'
		 ('message-id', 1, _cor0) of
	  %% Line 1498
	  <{_cor3,Str}> when 'true' ->
	      %% Line 1499
	      call 'erlang':'list_to_integer'
		  (Str)
	  %% Line 1500
	  <'false'> when 'true' ->
	      %% Line 1501
	      'undefined'
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'decode_rpc_reply'/3 =
    %% Line 1504
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <MsgId,E = {_cor29,Attrs,Content0},State = {'state',_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,Pending,_cor38}> when 'true' ->
	      %% Line 1505
	      case call 'lists':'keytake'
		       (MsgId, 4, Pending) of
		%% Line 1506
		<{'value',{'pending',TRef,_cor39,_cor40,Op,Caller},Pending1}> when 'true' ->
		    let <_X_> =
			%% Line 1507
			( call 'timer':'cancel'
			      (TRef)
			  -| ['result_not_wanted'] )
		    in  let <Content> =
			    %% Line 1508
			    apply 'forward_xmlns_attr'/2
				(Attrs, Content0)
			in  let <_cor7> =
				%% Line 1510
				call 'erlang':'setelement'
				    (10, State, Pending1)
			    in  %% Line 1509
				case %% Line 1510
				     apply 'do_decode_rpc_reply'/3
					 (Op, Content, _cor7) of
				  <{CallerReply,{ServerReply,State2}}> when 'true' ->
				      do  %% Line 1511
					  call 'ct_gen_conn':'return'
					      (Caller, CallerReply)
					  %% Line 1512
					  {ServerReply,State2}
				  ( <_cor8> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor8})
				    -| ['compiler_generated'] )
				end
		%% Line 1513
		<'false'> when 'true' ->
		    let <_cor13> =
			%% Line 1517
			( letrec
			      'lc$^0'/1 =
				  fun (_cor11) ->
				      case _cor11 of
					<[P = {'pending',_cor52,_cor53,'undefined','undefined',_cor54}|_cor10]> when 'true' ->
					    let <_cor12> =
						apply 'lc$^0'/1
						    (_cor10)
					    in  ( [P|_cor12]
						  -| ['compiler_generated'] )
					( <[_cor9|_cor10]> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor10)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor11> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor11})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (Pending)
			  -| ['list_comprehension'] )
		    in  %% Line 1517
			case _cor13 of
			  %% Line 1518
			  <[{'pending',TRef,_cor55,%% Line 1519
						   'undefined',%% Line 1520
							       'undefined',%% Line 1521
									   Caller}|%% Line 1521
										   []]> when 'true' ->
			      let <_X_> =
				  %% Line 1522
				  ( call 'timer':'cancel'
					(TRef)
				    -| ['result_not_wanted'] )
			      in  do  %% Line 1523
				      call 'ct_gen_conn':'return'
					  (Caller, E)
				      let <_cor17> =
					  %% Line 1524
					  call 'erlang':'setelement'
					      (10, State, [])
				      in  %% Line 1524
					  {'noreply',_cor17}
			  %% Line 1525
			  <_cor67> when 'true' ->
			      %% Line 1526
			      ( case _cor32 of
				  ( <( {'connection',_cor78,_cor79,_cor80,_rec36}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_cor23> =
					    %% Line 1527
					    call 'erlang':'self'
						()
					in  do  %% Line 1527
						call 'error_logger':'error_report'
						    ([{'ct_connection',_rec36}|[{'client',_cor23}|[{'module','ct_netconfc'}|[{'line',1527}|[{'got_unexpected_msg_id',MsgId}|%% Line 1528
																					    [{'expecting',Pending}|[]]]]]]])
						%% Line 1529
						{'noreply',State}
				    -| ['compiler_generated'] )
				  ( <_cor81> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','connection'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			end
		( <_cor25> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor25})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor28,_cor27,_cor26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor28,_cor27,_cor26})
		  -| [{'function_name',{'decode_rpc_reply',3}}] )
	    -| ['compiler_generated'] )
	end
'do_decode_rpc_reply'/3 =
    %% Line 1533
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Op,Result,State>
	      when let <_cor3> =
		    %% Line 1534
		    call 'erlang':'=:='
			(Op, 'lock')
		in  let <_cor4> =
			%% Line 1534
			call 'erlang':'=:='
			    (Op, 'unlock')
		    in  let <_cor5> =
			    %% Line 1534
			    call 'erlang':'=:='
				(Op, 'edit_config')
			in  let <_cor6> =
				%% Line 1534
				call 'erlang':'=:='
				    (Op, 'delete_config')
			    in  let <_cor7> =
				    %% Line 1535
				    call 'erlang':'=:='
					(Op, 'copy_config')
				in  let <_cor8> =
					%% Line 1535
					call 'erlang':'=:='
					    (Op, 'kill_session')
				    in  let <_cor9> =
					    %% Line 1535
					    call 'erlang':'or'
						(_cor7, _cor8)
					in  let <_cor10> =
						%% Line 1534
						call 'erlang':'or'
						    (_cor6, _cor9)
					    in  let <_cor11> =
						    %% Line 1534
						    call 'erlang':'or'
							(_cor5, _cor10)
						in  let <_cor12> =
							%% Line 1534
							call 'erlang':'or'
							    (_cor4, _cor11)
						    in  %% Line 1534
							call 'erlang':'or'
							    (_cor3, _cor12) ->
	      let <_cor13> =
		  %% Line 1536
		  apply 'decode_ok'/1
		      (Result)
	      in  %% Line 1536
		  {_cor13,{'noreply',State}}
	  %% Line 1537
	  <Op,Result,State>
	      when let <_cor14> =
		    %% Line 1538
		    call 'erlang':'=:='
			(Op, 'get')
		in  let <_cor15> =
			%% Line 1538
			call 'erlang':'=:='
			    (Op, 'get_config')
		    in  let <_cor16> =
			    %% Line 1538
			    call 'erlang':'=:='
				(Op, 'action')
			in  let <_cor17> =
				%% Line 1538
				call 'erlang':'or'
				    (_cor15, _cor16)
			    in  %% Line 1538
				call 'erlang':'or'
				    (_cor14, _cor17) ->
	      let <_cor18> =
		  %% Line 1539
		  apply 'decode_data'/1
		      (Result)
	      in  %% Line 1539
		  {_cor18,{'noreply',State}}
	  %% Line 1540
	  <'close_session',Result,State> when 'true' ->
	      %% Line 1541
	      case apply 'decode_ok'/1
		       (Result) of
		%% Line 1542
		<'ok'> when 'true' ->
		    {'ok',{'stop',State}}
		%% Line 1543
		<Other> when 'true' ->
		    {Other,{'noreply',State}}
	      end
	  %% Line 1545
	  <{'create_subscription',Caller},Result,State> when 'true' ->
	      %% Line 1546
	      case apply 'decode_ok'/1
		       (Result) of
		%% Line 1547
		<'ok'> when 'true' ->
		    %% Line 1548
		    case State of
		      <{'state',_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38}> when 'true' ->
			  let <_cor22> =
			      call 'erlang':'setelement'
				  (11, State, Caller)
			  in  {'ok',{'noreply',_cor22}}
		      ( <_cor39> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		%% Line 1549
		<Other> when 'true' ->
		    %% Line 1550
		    {Other,{'noreply',State}}
	      end
	  %% Line 1552
	  <'get_event_streams',Result,State> when 'true' ->
	      let <_cor24> =
		  %% Line 1553
		  apply 'decode_data'/1
		      (Result)
	      in  let <_cor25> =
		      %% Line 1553
		      apply 'decode_streams'/1
			  (_cor24)
		  in  %% Line 1553
		      {_cor25,{'noreply',State}}
	  %% Line 1554
	  <'undefined',Result,State> when 'true' ->
	      %% Line 1555
	      {Result,{'noreply',State}}
	  ( <_cor28,_cor27,_cor26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor28,_cor27,_cor26})
		  -| [{'function_name',{'do_decode_rpc_reply',3}}] )
	    -| ['compiler_generated'] )
	end
'decode_ok'/1 =
    %% Line 1559
    fun (_cor0) ->
	case _cor0 of
	  <[{Tag,Attrs,Content}|[]]> when 'true' ->
	      %% Line 1560
	      case apply 'get_local_name_atom'/1
		       (Tag) of
		%% Line 1561
		<'ok'> when 'true' ->
		    %% Line 1562
		    'ok'
		%% Line 1563
		<'rpc-error'> when 'true' ->
		    let <_cor1> =
			%% Line 1564
			apply 'forward_xmlns_attr'/2
			    (Attrs, Content)
		    in  %% Line 1564
			{'error',_cor1}
		%% Line 1565
		<_X_Other> when 'true' ->
		    %% Line 1566
		    {'error',{'unexpected_rpc_reply',[{Tag,Attrs,Content}|[]]}}
	      end
	  %% Line 1568
	  <Other> when 'true' ->
	      %% Line 1569
	      {'error',{'unexpected_rpc_reply',Other}}
	end
'decode_data'/1 =
    %% Line 1571
    fun (_cor0) ->
	case _cor0 of
	  <[{Tag,Attrs,Content}|[]]> when 'true' ->
	      %% Line 1572
	      case apply 'get_local_name_atom'/1
		       (Tag) of
		%% Line 1573
		<'data'> when 'true' ->
		    let <_cor1> =
			%% Line 1577
			apply 'remove_xmlnsattr_for_tag'/2
			    (Tag, Attrs)
		    in  let <_cor2> =
			    %% Line 1577
			    apply 'forward_xmlns_attr'/2
				(_cor1, Content)
			in  %% Line 1577
			    {'ok',_cor2}
		%% Line 1578
		<'rpc-error'> when 'true' ->
		    let <_cor3> =
			%% Line 1579
			apply 'forward_xmlns_attr'/2
			    (Attrs, Content)
		    in  %% Line 1579
			{'error',_cor3}
		%% Line 1580
		<_X_Other> when 'true' ->
		    %% Line 1581
		    {'error',{'unexpected_rpc_reply',[{Tag,Attrs,Content}|[]]}}
	      end
	  %% Line 1583
	  <Other> when 'true' ->
	      %% Line 1584
	      {'error',{'unexpected_rpc_reply',Other}}
	end
'get_qualified_name'/1 =
    %% Line 1586
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1587
	    call 'erlang':'atom_to_list'
		(_cor0)
	in  %% Line 1587
	    case call 'string':'tokens'
		     (_cor1, [58]) of
	      %% Line 1588
	      <[TagStr|[]]> when 'true' ->
		  {[],TagStr}
	      %% Line 1589
	      <[PrefixStr|[TagStr|[]]]> when 'true' ->
		  {PrefixStr,TagStr}
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
'get_local_name_atom'/1 =
    %% Line 1592
    fun (_cor0) ->
	%% Line 1593
	case apply 'get_qualified_name'/1
		 (_cor0) of
	  <{_cor3,TagStr}> when 'true' ->
	      %% Line 1594
	      call 'erlang':'list_to_atom'
		  (TagStr)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'remove_xmlnsattr_for_tag'/2 =
    %% Line 1599
    fun (_cor1,_cor0) ->
	%% Line 1600
	case apply 'get_qualified_name'/1
		 (_cor1) of
	  <{Prefix,_X_TagStr}> when 'true' ->
	      let <XmlnsTag> =
		  %% Line 1601
		  apply 'xmlnstag'/1
		      (Prefix)
	      in  %% Line 1602
		  case call 'lists':'keytake'
			   (XmlnsTag, 1, _cor0) of
		    %% Line 1603
		    <{'value',_cor7,NoNsAttrs}> when 'true' ->
			%% Line 1604
			NoNsAttrs
		    %% Line 1605
		    <'false'> when 'true' ->
			_cor0
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'forward_xmlns_attr'/2 =
    %% Line 1612
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1613
	    apply 'get_all_xmlns_attrs'/2
		(_cor1, [])
	in  %% Line 1613
	    apply 'do_forward_xmlns_attr'/2
		(_cor2, _cor0)
'do_forward_xmlns_attr'/2 =
    %% Line 1615
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <XmlnsAttrs,[{ChT,ChA,ChC}|Children]> when 'true' ->
	      let <ChA1> =
		  %% Line 1616
		  apply 'add_xmlns_attrs'/2
		      (XmlnsAttrs, ChA)
	      in  let <_cor3> =
		      %% Line 1617
		      apply 'do_forward_xmlns_attr'/2
			  (XmlnsAttrs, Children)
		  in  %% Line 1617
		      [{ChT,ChA1,ChC}|_cor3]
	  %% Line 1618
	  <_X_XmlnsAttrs,[]> when 'true' ->
	      %% Line 1619
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'do_forward_xmlns_attr',2}}] )
	    -| ['compiler_generated'] )
	end
'add_xmlns_attrs'/2 =
    %% Line 1621
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[A = {Key,_cor5}|XmlnsAttrs],ChA> when 'true' ->
	      %% Line 1622
	      case call 'lists':'keymember'
		       (Key, 1, ChA) of
		%% Line 1623
		<'true'> when 'true' ->
		    %% Line 1624
		    apply 'add_xmlns_attrs'/2
			(XmlnsAttrs, ChA)
		%% Line 1625
		<'false'> when 'true' ->
		    %% Line 1626
		    apply 'add_xmlns_attrs'/2
			(XmlnsAttrs, [A|ChA])
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1628
	  <[],ChA> when 'true' ->
	      %% Line 1629
	      ChA
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'add_xmlns_attrs',2}}] )
	    -| ['compiler_generated'] )
	end
'get_all_xmlns_attrs'/2 =
    %% Line 1631
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Default = {'xmlns',_cor5}|Attrs],XmlnsAttrs> when 'true' ->
	      %% Line 1632
	      apply 'get_all_xmlns_attrs'/2
		  (Attrs, [Default|XmlnsAttrs])
	  %% Line 1633
	  <[Attr = {Key,_cor6}|Attrs],XmlnsAttrs> when 'true' ->
	      %% Line 1634
	      case call 'erlang':'atom_to_list'
		       (Key) of
		%% Line 1635
		<[120|[109|[108|[110|[115|[58|_X_Prefix]]]]]]> when 'true' ->
		    %% Line 1636
		    apply 'get_all_xmlns_attrs'/2
			(Attrs, [Attr|XmlnsAttrs])
		%% Line 1637
		<_cor7> when 'true' ->
		    %% Line 1638
		    apply 'get_all_xmlns_attrs'/2
			(Attrs, XmlnsAttrs)
	      end
	  %% Line 1640
	  <[],XmlnsAttrs> when 'true' ->
	      %% Line 1641
	      XmlnsAttrs
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'get_all_xmlns_attrs',2}}] )
	    -| ['compiler_generated'] )
	end
'decode_hello'/1 =
    %% Line 1645
    fun (_cor0) ->
	case _cor0 of
	  <{'hello',_X_Attrs,Hello}> when 'true' ->
	      %% Line 1646
	      case call 'lists':'keyfind'
		       ('session-id', 1, Hello) of
		%% Line 1647
		<{'session-id',_cor6,[SessionId|[]]}> when 'true' ->
		    %% Line 1648
		    case call 'lists':'keyfind'
			     ('capabilities', 1, Hello) of
		      %% Line 1649
		      <{'capabilities',_cor7,Capabilities}> when 'true' ->
			  %% Line 1650
			  case apply 'decode_caps'/3
				   (Capabilities, [], 'false') of
			    %% Line 1651
			    <{'ok',Caps}> when 'true' ->
				let <_cor1> =
				    %% Line 1652
				    call 'erlang':'list_to_integer'
					(SessionId)
				in  %% Line 1652
				    {'ok',_cor1,Caps}
			    %% Line 1653
			    <Error> when 'true' ->
				%% Line 1654
				Error
			  end
		      %% Line 1656
		      <'false'> when 'true' ->
			  %% Line 1657
			  {'error',{'incorrect_hello','capabilities_not_found'}}
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor3})
			-| ['compiler_generated'] )
		    end
		%% Line 1659
		<'false'> when 'true' ->
		    %% Line 1660
		    {'error',{'incorrect_hello','no_session_id_found'}}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'decode_hello',1}}] )
	    -| ['compiler_generated'] )
	end
'decode_caps'/3 =
    %% Line 1663
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'capability',[],[Cap = [117|[114|[110|[58|[105|[101|[116|[102|[58|[112|[97|[114|[97|[109|[115|[58|[110|[101|[116|[99|[111|[110|[102|[58|[98|[97|[115|[101|[58|Vsn]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[]]}|Caps],Acc,_cor8> when 'true' ->
	      %% Line 1664
	      case Vsn of
		%% Line 1665
		<[49|[46|[48]]]> when 'true' ->
		    %% Line 1666
		    apply 'decode_caps'/3
			(Caps, [Cap|Acc], 'true')
		%% Line 1667
		<_cor9> when 'true' ->
		    %% Line 1668
		    {'error',{'incompatible_base_capability_vsn',Vsn}}
	      end
	  %% Line 1670
	  <[{'capability',[],[Cap|[]]}|Caps],Acc,Base> when 'true' ->
	      %% Line 1671
	      apply 'decode_caps'/3
		  (Caps, [Cap|Acc], Base)
	  %% Line 1672
	  <[H|_X_T],_cor10,_cor11> when 'true' ->
	      %% Line 1673
	      {'error',{'unexpected_capability_element',H}}
	  %% Line 1674
	  <[],_cor12,'false'> when 'true' ->
	      %% Line 1675
	      {'error',{'incorrect_hello','no_base_capability_found'}}
	  %% Line 1676
	  <[],Acc,'true'> when 'true' ->
	      let <_cor4> =
		  %% Line 1677
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 1677
		  {'ok',_cor4}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'decode_caps',3}}] )
	    -| ['compiler_generated'] )
	end
'decode_streams'/1 =
    %% Line 1681
    fun (_cor0) ->
	case _cor0 of
	  <{'error',Reason}> when 'true' ->
	      %% Line 1682
	      {'error',Reason}
	  %% Line 1683
	  <{'ok',[{'netconf',_cor10,Streams}|[]]}> when 'true' ->
	      let <_cor1> =
		  %% Line 1684
		  apply 'decode_streams'/1
		      (Streams)
	      in  %% Line 1684
		  {'ok',_cor1}
	  %% Line 1685
	  <[{'streams',_cor11,Streams}|[]]> when 'true' ->
	      %% Line 1686
	      apply 'decode_streams'/1
		  (Streams)
	  %% Line 1687
	  <[{'stream',_cor12,Stream}|Streams]> when 'true' ->
	      %% Line 1688
	      case call 'lists':'keyfind'
		       ('name', 1, Stream) of
		<{'name',_cor13,[Name|[]]}> when 'true' ->
		    let <_cor7> =
			%% Line 1689
			( letrec
			      'lc$^0'/1 =
				  fun (_cor5) ->
				      case _cor5 of
					<[{Tag,_cor14,[Value|[]]}|_cor4]>
					    when call 'erlang':'=/='
						  (Tag,
						   'name') ->
					    let <_cor6> =
						apply 'lc$^0'/1
						    (_cor4)
					    in  ( [{Tag,Value}|_cor6]
						  -| ['compiler_generated'] )
					( <[_cor3|_cor4]> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor4)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor5> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor5})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (Stream)
			  -| ['list_comprehension'] )
		    in  let <_cor8> =
			    %% Line 1690
			    apply 'decode_streams'/1
				(Streams)
			in  %% Line 1689
			    [{Name,_cor7}|_cor8]
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1691
	  <[]> when 'true' ->
	      %% Line 1692
	      []
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'decode_streams',1}}] )
	    -| ['compiler_generated'] )
	end
'log'/2 =
    %% Line 1698
    fun (_cor1,_cor0) ->
	%% Line 1699
	apply 'log'/3
	    (_cor1, _cor0, #{}#)
'log'/3 =
    %% Line 1700
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'connection',_cor7,Host,Port,Name},Action,Data> when 'true' ->
	      let <_cor3> =
		  %% Line 1701
		  call 'erlang':'self'
		      ()
	      in  %% Line 1701
		  call 'error_logger':'info_report'
		      ({'conn_log','true',_cor3,%% Line 1703
						Name,%% Line 1702
						     {Host,Port},'undefined',%% Line 1704
									     Action,%% Line 1705
										    'ct_netconfc'}, %% Line 1706
												    Data)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'log',3}}] )
	    -| ['compiler_generated'] )
	end
'format_data'/2 =
    %% Line 1710
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1717
	    call 'unicode':'characters_to_binary'
		(_cor0)
	in  %% Line 1717
	    apply 'do_format_data'/2
		(_cor1, _cor2)
'do_format_data'/2 =
    %% Line 1719
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'raw',Data> when 'true' ->
	      let <_cor2> =
		  %% Line 1720
		  apply 'hide_password'/1
		      (Data)
	      in  %% Line 1720
		  call 'io_lib':'format'
		      ([126|[110|[126|[116|[115|[126|[110]]]]]]], [_cor2|[]])
	  %% Line 1721
	  <'pretty',Data> when 'true' ->
	      let <_cor3> =
		  %% Line 1722
		  apply 'indent'/1
		      (Data)
	      in  %% Line 1722
		  call 'io_lib':'format'
		      ([126|[110|[126|[116|[115|[126|[110]]]]]]], [_cor3|[]])
	  %% Line 1723
	  <'html',Data> when 'true' ->
	      let <_cor4> =
		  %% Line 1724
		  apply 'html_format'/1
		      (Data)
	      in  %% Line 1724
		  call 'io_lib':'format'
		      ([126|[110|[126|[116|[115|[126|[110]]]]]]], [_cor4|[]])
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'do_format_data',2}}] )
	    -| ['compiler_generated'] )
	end
'hide_password'/1 =
    %% Line 1728
    fun (_cor0) ->
	%% Line 1729
	call 're':'replace'
	    (_cor0, #{#<40>(8,1,'integer',['unsigned'|['big']]),
		      #<60>(8,1,'integer',['unsigned'|['big']]),
		      #<112>(8,1,'integer',['unsigned'|['big']]),
		      #<97>(8,1,'integer',['unsigned'|['big']]),
		      #<115>(8,1,'integer',['unsigned'|['big']]),
		      #<115>(8,1,'integer',['unsigned'|['big']]),
		      #<119>(8,1,'integer',['unsigned'|['big']]),
		      #<111>(8,1,'integer',['unsigned'|['big']]),
		      #<114>(8,1,'integer',['unsigned'|['big']]),
		      #<100>(8,1,'integer',['unsigned'|['big']]),
		      #<91>(8,1,'integer',['unsigned'|['big']]),
		      #<94>(8,1,'integer',['unsigned'|['big']]),
		      #<62>(8,1,'integer',['unsigned'|['big']]),
		      #<93>(8,1,'integer',['unsigned'|['big']]),
		      #<42>(8,1,'integer',['unsigned'|['big']]),
		      #<62>(8,1,'integer',['unsigned'|['big']]),
		      #<41>(8,1,'integer',['unsigned'|['big']]),
		      #<91>(8,1,'integer',['unsigned'|['big']]),
		      #<94>(8,1,'integer',['unsigned'|['big']]),
		      #<60>(8,1,'integer',['unsigned'|['big']]),
		      #<93>(8,1,'integer',['unsigned'|['big']]),
		      #<42>(8,1,'integer',['unsigned'|['big']]),
		      #<40>(8,1,'integer',['unsigned'|['big']]),
		      #<60>(8,1,'integer',['unsigned'|['big']]),
		      #<47>(8,1,'integer',['unsigned'|['big']]),
		      #<112>(8,1,'integer',['unsigned'|['big']]),
		      #<97>(8,1,'integer',['unsigned'|['big']]),
		      #<115>(8,1,'integer',['unsigned'|['big']]),
		      #<115>(8,1,'integer',['unsigned'|['big']]),
		      #<119>(8,1,'integer',['unsigned'|['big']]),
		      #<111>(8,1,'integer',['unsigned'|['big']]),
		      #<114>(8,1,'integer',['unsigned'|['big']]),
		      #<100>(8,1,'integer',['unsigned'|['big']]),
		      #<62>(8,1,'integer',['unsigned'|['big']]),
		      #<41>(8,1,'integer',['unsigned'|['big']])}#, #{#<92>(8,1,'integer',['unsigned'|['big']]),
								     #<49>(8,1,'integer',['unsigned'|['big']]),
								     #<42>(8,1,'integer',['unsigned'|['big']]),
								     #<42>(8,1,'integer',['unsigned'|['big']]),
								     #<42>(8,1,'integer',['unsigned'|['big']]),
								     #<42>(8,1,'integer',['unsigned'|['big']]),
								     #<42>(8,1,'integer',['unsigned'|['big']]),
								     #<92>(8,1,'integer',['unsigned'|['big']]),
								     #<50>(8,1,'integer',['unsigned'|['big']])}#, %% Line 1730
														  ['global'|[{'return','binary'}|['unicode']]])
'html_format'/1 =
    %% Line 1734
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1735
	    apply 'indent'/1
		(_cor0)
	in  %% Line 1735
	    call 'binary':'replace'
		(_cor1, #{#<60>(8,1,'integer',['unsigned'|['big']])}#, #{#<38>(8,1,'integer',['unsigned'|['big']]),
									 #<108>(8,1,'integer',['unsigned'|['big']]),
									 #<116>(8,1,'integer',['unsigned'|['big']]),
									 #<59>(8,1,'integer',['unsigned'|['big']])}#, ['global'])
'indent'/1 =
    %% Line 1739
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1740
	    apply 'hide_password'/1
		(_cor0)
	in  let <String> =
		%% Line 1740
		apply 'normalize'/1
		    (_cor1)
	    in  let <_cor7> =
		    %% Line 1742
		    case call 'erlang':'erase'
			     ('part_of_line') of
		      %% Line 1743
		      <'undefined'> when 'true' ->
			  %% Line 1744
			  apply 'indent1'/2
			      (String, [])
		      %% Line 1745
		      <Part> when 'true' ->
			  let <_cor4> =
			      %% Line 1746
			      call 'lists':'reverse'
				  (Part)
			  in  let <_cor5> =
				  %% Line 1746
				  call 'erlang':'++'
				      (_cor4, String)
			      in  let <_cor3> =
				      %% Line 1746
				      call 'erlang':'erase'
					  ('indent')
				  in  %% Line 1746
				      apply 'indent1'/2
					  (_cor5, _cor3)
		    end
		in  %% Line 1748
		    call 'unicode':'characters_to_binary'
			(_cor7)
'normalize'/1 =
    %% Line 1753
    fun (_cor0) ->
	%% Line 1754
	call 're':'replace'
	    (_cor0, #{#<62>(8,1,'integer',['unsigned'|['big']]),
		      #<91>(8,1,'integer',['unsigned'|['big']]),
		      #<32>(8,1,'integer',['unsigned'|['big']]),
		      #<13>(8,1,'integer',['unsigned'|['big']]),
		      #<10>(8,1,'integer',['unsigned'|['big']]),
		      #<9>(8,1,'integer',['unsigned'|['big']]),
		      #<93>(8,1,'integer',['unsigned'|['big']]),
		      #<43>(8,1,'integer',['unsigned'|['big']]),
		      #<60>(8,1,'integer',['unsigned'|['big']])}#, #{#<62>(8,1,'integer',['unsigned'|['big']]),
								     #<60>(8,1,'integer',['unsigned'|['big']])}#, ['global'|[{'return','list'}|['unicode']]])
'indent1'/2 =
    %% Line 1757
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[60|[63|Rest1]],Indent1> when 'true' ->
	      %% Line 1759
	      case apply 'indent_line'/3
		       (Rest1, Indent1, [63|[60]]) of
		<{Line,Rest2,Indent2}> when 'true' ->
		    let <_cor3> =
			%% Line 1760
			apply 'indent1'/2
			    (Rest2, Indent2)
		    in  %% Line 1760
			call 'erlang':'++'
			    (Line, _cor3)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1761
	  <[60|[47|Rest1]],Indent1> when 'true' ->
	      %% Line 1763
	      case apply 'indent_line1'/3
		       (Rest1, Indent1, [47|[60]]) of
		<{Line,Rest2,Indent2}> when 'true' ->
		    let <_cor5> =
			%% Line 1764
			apply 'indent1'/2
			    (Rest2, Indent2)
		    in  let <_cor6> =
			    %% Line 1764
			    call 'erlang':'++'
				(Line, _cor5)
			in  %% Line 1764
			    [10|_cor6]
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1765
	  <[60|Rest1],Indent1> when 'true' ->
	      let <_cor7> =
		  %% Line 1767
		  apply 'get_tag'/1
		      (Rest1)
	      in  do  %% Line 1767
		      call 'erlang':'put'
			  ('tag', _cor7)
		      %% Line 1768
		      case apply 'indent_line'/3
			       (Rest1, Indent1, [60]) of
			<{Line,Rest2,Indent2}> when 'true' ->
			    let <_cor9> =
				%% Line 1769
				apply 'indent1'/2
				    (Rest2, Indent2)
			    in  let <_cor10> =
				    %% Line 1769
				    call 'erlang':'++'
					(Line, _cor9)
				in  %% Line 1769
				    [10|_cor10]
			( <_cor8> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor8})
			  -| ['compiler_generated'] )
		      end
	  %% Line 1770
	  <[H|T],Indent> when 'true' ->
	      let <_cor11> =
		  %% Line 1771
		  apply 'indent1'/2
		      (T, Indent)
	      in  %% Line 1771
		  [H|_cor11]
	  %% Line 1772
	  <[],_X_Indent> when 'true' ->
	      %% Line 1773
	      []
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'indent1',2}}] )
	    -| ['compiler_generated'] )
	end
'indent_line'/3 =
    %% Line 1775
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[63|[62|Rest]],Indent,Line> when 'true' ->
	      let <_cor3> =
		  %% Line 1777
		  call 'lists':'reverse'
		      (Line)
	      in  let <_cor4> =
		      %% Line 1777
		      call 'erlang':'++'
			  (_cor3, [63|[62]])
		  in  %% Line 1777
		      {_cor4,Rest,Indent}
	  %% Line 1778
	  <[47|[62|[60|[47|Rest]]]],Indent,Line> when 'true' ->
	      let <_cor7> =
		  %% Line 1780
		  call 'lists':'reverse'
		      (Line)
	      in  let <_cor8> =
		      %% Line 1780
		      call 'erlang':'++'
			  (_cor7, [47|[62]])
		  in  let <_cor9> =
			  %% Line 1780
			  call 'erlang':'++'
			      (Indent, _cor8)
		      in  let <_cor6> =
			      %% Line 1780
			      [60|[47|Rest]]
			  in  let <_cor5> =
				  %% Line 1780
				  call 'erlang':'--'
				      (Indent, [32|[32]])
			      in  %% Line 1780
				  {_cor9,_cor6,_cor5}
	  %% Line 1781
	  <[47|[62|Rest]],Indent,Line> when 'true' ->
	      let <_cor10> =
		  %% Line 1783
		  call 'lists':'reverse'
		      (Line)
	      in  let <_cor11> =
		      %% Line 1783
		      call 'erlang':'++'
			  (_cor10, [47|[62]])
		  in  let <_cor12> =
			  %% Line 1783
			  call 'erlang':'++'
			      (Indent, _cor11)
		      in  %% Line 1783
			  {_cor12,Rest,Indent}
	  %% Line 1784
	  <[62|[60|[47|Rest]]],Indent,Line> when 'true' ->
	      let <LastTag> =
		  %% Line 1785
		  call 'erlang':'erase'
		      ('tag')
	      in  %% Line 1786
		  case apply 'get_tag'/1
			   (Rest) of
		    %% Line 1787
		    <_cor28>
			when call 'erlang':'=:='
			      (_cor28,
			       LastTag) ->
			%% Line 1789
			apply 'indent_line1'/3
			    (Rest, Indent, [47|[60|[62|Line]]])
		    %% Line 1790
		    <_cor29> when 'true' ->
			let <_cor16> =
			    %% Line 1792
			    call 'lists':'reverse'
				(Line)
			in  let <_cor17> =
				%% Line 1792
				call 'erlang':'++'
				    (_cor16, [62])
			    in  let <_cor18> =
				    %% Line 1792
				    call 'erlang':'++'
					(Indent, _cor17)
				in  let <_cor15> =
					%% Line 1792
					[60|[47|Rest]]
				    in  let <_cor14> =
					    %% Line 1792
					    call 'erlang':'--'
						(Indent, [32|[32]])
					in  %% Line 1792
					    {_cor18,_cor15,_cor14}
		  end
	  %% Line 1794
	  <[62|[60|Rest]],Indent,Line> when 'true' ->
	      let <_cor22> =
		  %% Line 1796
		  call 'lists':'reverse'
		      (Line)
	      in  let <_cor23> =
		      %% Line 1796
		      call 'erlang':'++'
			  (_cor22, [62])
		  in  let <_cor24> =
			  %% Line 1796
			  call 'erlang':'++'
			      (Indent, _cor23)
		      in  let <_cor21> =
			      %% Line 1796
			      [60|Rest]
			  in  let <_cor20> =
				  %% Line 1796
				  [32|[32|Indent]]
			      in  %% Line 1796
				  {_cor24,_cor21,_cor20}
	  %% Line 1797
	  <[60|[47|Rest]],Indent,Line> when 'true' ->
	      %% Line 1799
	      apply 'indent_line1'/3
		  (Rest, Indent, [47|[60|Line]])
	  %% Line 1800
	  <[H|T],Indent,Line> when 'true' ->
	      %% Line 1801
	      apply 'indent_line'/3
		  (T, Indent, [H|Line])
	  %% Line 1802
	  <[],Indent,Line> when 'true' ->
	      do  %% Line 1804
		  call 'erlang':'put'
		      ('part_of_line', Line)
		  do  %% Line 1805
		      call 'erlang':'put'
			  ('indent', Indent)
		      %% Line 1806
		      {[],[],Indent}
	  ( <_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25})
		  -| [{'function_name',{'indent_line',3}}] )
	    -| ['compiler_generated'] )
	end
'indent_line1'/3 =
    %% Line 1808
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[62|[60|[47|Rest]]],Indent,Line> when 'true' ->
	      let <_cor5> =
		  %% Line 1810
		  call 'lists':'reverse'
		      (Line)
	      in  let <_cor6> =
		      %% Line 1810
		      call 'erlang':'++'
			  (_cor5, [62])
		  in  let <_cor7> =
			  %% Line 1810
			  call 'erlang':'++'
			      (Indent, _cor6)
		      in  let <_cor4> =
			      %% Line 1810
			      [60|[47|Rest]]
			  in  let <_cor3> =
				  %% Line 1810
				  call 'erlang':'--'
				      (Indent, [32|[32]])
			      in  %% Line 1810
				  {_cor7,_cor4,_cor3}
	  %% Line 1811
	  <[62|Rest],Indent,Line> when 'true' ->
	      let <_cor8> =
		  %% Line 1813
		  call 'lists':'reverse'
		      (Line)
	      in  let <_cor9> =
		      %% Line 1813
		      call 'erlang':'++'
			  (_cor8, [62])
		  in  let <_cor10> =
			  %% Line 1813
			  call 'erlang':'++'
			      (Indent, _cor9)
		      in  %% Line 1813
			  {_cor10,Rest,Indent}
	  %% Line 1814
	  <[H|T],Indent,Line> when 'true' ->
	      %% Line 1815
	      apply 'indent_line1'/3
		  (T, Indent, [H|Line])
	  %% Line 1816
	  <[],Indent,Line> when 'true' ->
	      do  %% Line 1818
		  call 'erlang':'put'
		      ('part_of_line', Line)
		  do  %% Line 1819
		      call 'erlang':'put'
			  ('indent', Indent)
		      %% Line 1820
		      {[],[],Indent}
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'indent_line1',3}}] )
	    -| ['compiler_generated'] )
	end
'get_tag'/1 =
    %% Line 1822
    fun (_cor0) ->
	case _cor0 of
	  <[47|[62|_cor3]]> when 'true' ->
	      %% Line 1823
	      []
	  %% Line 1824
	  <[62|_cor4]> when 'true' ->
	      %% Line 1825
	      []
	  %% Line 1826
	  <[H|T]> when 'true' ->
	      let <_cor1> =
		  %% Line 1827
		  apply 'get_tag'/1
		      (T)
	      in  %% Line 1827
		  [H|_cor1]
	  %% Line 1828
	  <[]> when 'true' ->
	      %% Line 1830
	      []
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'get_tag',1}}] )
	    -| ['compiler_generated'] )
	end
'ssh_receive_data'/0 =
    %% Line 1835
    fun () ->
	%% Line 1836
	receive
	  %% Line 1837
	  <{'ssh_cm',CM,{'data',Ch,_X_Type,Data}}> when 'true' ->
	      let <_cor0> =
		  %% Line 1838
		  call 'erlang':'size'
		      (Data)
	      in  do  %% Line 1838
		      call 'ssh_connection':'adjust_window'
			  (CM, Ch, _cor0)
		      %% Line 1839
		      {'ok',Data}
	  %% Line 1840
	  <X = {'ssh_cm',_X_CM,{Closed,_X_Ch}}>
	      when let <_cor1> =
		    call 'erlang':'=:='
			(Closed, 'closed')
		in  let <_cor2> =
			call 'erlang':'=:='
			    (Closed, 'eof')
		    in  call 'erlang':'or'
			    (_cor1, _cor2) ->
	      %% Line 1841
	      {'error',X}
	  %% Line 1842
	  <X = {_X_Ref,'timeout'}> when 'true' ->
	      %% Line 1843
	      {'error',X}
	after 'infinity' ->
	  'true'
'ssh_open'/1 =
    %% Line 1846
    fun (_cor0) ->
	case _cor0 of
	  <{'options',SshOpts,Host,Port,Timeout,Name}> when 'true' ->
	      %% Line 1847
	      case call 'ssh':'connect'
		       (Host, Port, %% Line 1848
				    [{'user_interaction','false'}|%% Line 1849
								  [{'silently_accept_hosts','true'}|SshOpts]]) of
		%% Line 1850
		<{'ok',CM}> when 'true' ->
		    %% Line 1851
		    case call 'ssh_connection':'session_channel'
			     (CM, Timeout) of
		      %% Line 1852
		      <{'ok',Ch}> when 'true' ->
			  %% Line 1853
			  case call 'ssh_connection':'subsystem'
				   (CM, Ch, [110|[101|[116|[99|[111|[110|[102]]]]]]], Timeout) of
			    %% Line 1854
			    <'success'> when 'true' ->
				%% Line 1855
				{'ok',{'connection',{CM,Ch},%% Line 1856
							    Host,%% Line 1857
								 Port,%% Line 1858
								      Name}}
			    %% Line 1859
			    <'failure'> when 'true' ->
				do  %% Line 1860
				    call 'ssh':'close'
					(CM)
				    %% Line 1861
				    {'error',{'ssh','could_not_execute_netconf_subsystem'}}
			    ( <_cor1> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor1})
			      -| ['compiler_generated'] )
			  end
		      %% Line 1863
		      <{'error',Reason}> when 'true' ->
			  do  %% Line 1864
			      call 'ssh':'close'
				  (CM)
			      %% Line 1865
			      {'error',{'ssh','could_not_open_channel',Reason}}
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 1867
		<{'error',Reason}> when 'true' ->
		    %% Line 1868
		    {'error',{'ssh','could_not_connect_to_server',Reason}}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'ssh_open',1}}] )
	    -| ['compiler_generated'] )
	end
'ssh_send'/2 =
    %% Line 1871
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'connection',{CM,Ch},_cor5,_cor6,_cor7},Data> when 'true' ->
	      %% Line 1872
	      case call 'ssh_connection':'send'
		       (CM, Ch, Data) of
		%% Line 1873
		<'ok'> when 'true' ->
		    'ok'
		%% Line 1874
		<{'error',Reason}> when 'true' ->
		    {'error',{'ssh','failed_to_send_data',Reason}}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'ssh_send',2}}] )
	    -| ['compiler_generated'] )
	end
'ssh_close'/1 =
    %% Line 1877
    fun (_cor0) ->
	case _cor0 of
	  <{'connection',{CM,_X_Ch},_cor2,_cor3,_cor4}> when 'true' ->
	      %% Line 1878
	      call 'ssh':'close'
		  (CM)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'ssh_close',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('ct_netconfc')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('ct_netconfc', _cor0)
end