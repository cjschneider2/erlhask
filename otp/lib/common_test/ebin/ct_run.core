module 'ct_run' ['do_run'/4,
		 'install'/1,
		 'install'/2,
		 'module_info'/0,
		 'module_info'/1,
		 'refresh_logs'/1,
		 'run'/1,
		 'run'/2,
		 'run'/3,
		 'run_make'/3,
		 'run_test'/1,
		 'run_test2'/1,
		 'run_testspec'/1,
		 'script_start'/0,
		 'script_start1'/2,
		 'script_usage'/0,
		 'step'/3,
		 'step'/4,
		 'tests'/1,
		 'tests'/2,
		 'tests'/3,
		 'variables_file_name'/1]
    attributes []
'script_start'/0 =
    %% Line 95
    fun () ->
	do  %% Line 96
	    call 'erlang':'process_flag'
		('trap_exit', 'true')
	    let <Init> =
		%% Line 97
		call 'init':'get_arguments'
		    ()
	    in  let <_cor3> =
		    %% Line 98
		    ( fun (_cor1) ->
			  case _cor1 of
			    <{'ct_erl_args',_cor21}> when 'true' ->
				'false'
			    %% Line 99
			    <_cor22> when 'true' ->
				'true'
			  end
		      -| [{'id',{0,0,'-script_start/0-fun-0-'}}] )
		in  let <CtArgs> =
			%% Line 98
			call 'lists':'takewhile'
			    (_cor3, %% Line 99
				    Init)
		    in  do  %% Line 104
			    apply 'rel_to_abs'/1
				(CtArgs)
			    let <_cor18> =
				%% Line 107
				case call 'application':'get_env'
					 ('common_test', 'run_test_start_opts') of
				  %% Line 108
				  <{'ok',EnvStartOpts}> when 'true' ->
				      let <FlagFilter> =
					  %% Line 109
					  ( fun (_cor8) ->
						let <_cor7> =
						    %% Line 110
						    ( fun (_cor5) ->
							  case _cor5 of
							    <{'root',_cor23}> when 'true' ->
								'false'
							    %% Line 111
							    <{'progname',_cor24}> when 'true' ->
								'false'
							    %% Line 112
							    <{'home',_cor25}> when 'true' ->
								'false'
							    %% Line 113
							    <{'noshell',_cor26}> when 'true' ->
								'false'
							    %% Line 114
							    <{'noinput',_cor27}> when 'true' ->
								'false'
							    %% Line 115
							    <_cor28> when 'true' ->
								'true'
							  end
						      -| [{'id',{0,0,'-script_start/0-fun-1-'}}] )
						in  %% Line 110
						    call 'lists':'filter'
							(_cor7, _cor8)
					    -| [{'id',{0,0,'-script_start/0-fun-2-'}}] )
				      in  do  %% Line 119
					      call 'io':'format'
						  ('user', [126|[110|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[32|[83|[84|[65|[82|[84|[32|[65|[82|[71|[83|[32|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 120
																																											[])
					      let <_cor11> =
						  %% Line 121
						  apply FlagFilter
						      (Init)
					      in  do  %% Line 121
						      call 'io':'format'
							  ('user', [45|[45|[45|[32|[73|[110|[105|[116|[32|[97|[114|[103|[115|[58|[126|[110|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]], [_cor11|[]])
						      let <_cor12> =
							  %% Line 122
							  apply FlagFilter
							      (CtArgs)
						      in  do  %% Line 122
							      call 'io':'format'
								  ('user', [45|[45|[45|[32|[67|[84|[32|[97|[114|[103|[115|[58|[126|[110|[126|[112|[126|[110]]]]]]]]]]]]]]]]]], [_cor12|[]])
							      let <EnvArgs> =
								  %% Line 123
								  apply 'opts2args'/1
								      (EnvStartOpts)
							      in  do  %% Line 124
								      call 'io':'format'
									  ('user', [45|[45|[45|[32|[69|[110|[118|[32|[111|[112|[116|[115|[32|[45|[62|[32|[97|[114|[103|[115|[58|[126|[110|[126|[112|[126|[110|[32|[32|[32|[61|[62|[126|[110|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 125
																																				       [EnvStartOpts|[EnvArgs|[]]])
								      let <_cor14> =
									  %% Line 126
									  call 'erlang':'++'
									      (CtArgs, EnvArgs)
								      in  let <Merged> =
									      %% Line 126
									      apply 'merge_arguments'/1
										  (_cor14)
									  in  let <_cor16> =
										  %% Line 127
										  apply FlagFilter
										      (Merged)
									      in  do  %% Line 127
										      call 'io':'format'
											  ('user', [45|[45|[45|[32|[77|[101|[114|[103|[101|[100|[32|[97|[114|[103|[115|[58|[126|[110|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]], [_cor16|[]])
										      do  %% Line 128
											  call 'io':'format'
											      ('user', [45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[126|[110|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 129
																																																    [])
											  %% Line 130
											  Merged
				  %% Line 131
				  <_cor29> when 'true' ->
				      %% Line 132
				      apply 'merge_arguments'/1
					  (CtArgs)
				end
			    in  %% Line 134
				case call 'proplists':'get_value'
					 ('help', _cor18) of
				  %% Line 135
				  <'undefined'> when 'true' ->
				      apply 'script_start'/1
					  (_cor18)
				  %% Line 136
				  <_cor30> when 'true' ->
				      apply 'script_usage'/0
					  ()
				end
'script_start'/1 =
    %% Line 139
    fun (_cor0) ->
	let <Tracing> =
	    %% Line 140
	    apply 'start_trace'/1
		(_cor0)
	in  %% Line 141
	    case call 'ct_repeat':'loop_test'
		     ('script', _cor0) of
	      %% Line 142
	      <'false'> when 'true' ->
		  %% Line 143
		  case call 'file':'get_cwd'
			   () of
		    <{'ok',Cwd}> when 'true' ->
			let <_cor3> =
			    %% Line 145
			    call 'code':'lib_dir'
				('common_test')
			in  %% Line 145
			    case call 'filename':'basename'
				     (_cor3) of
			      %% Line 146
			      <CTBase>
				  when call 'erlang':'is_list'
					(CTBase) ->
				  let <_cor6> =
				      %% Line 147
				      case call 'string':'tokens'
					       (CTBase, [45]) of
					%% Line 148
					<[[99|[111|[109|[109|[111|[110|[95|[116|[101|[115|[116]]]]]]]]]]]|[Vsn|[]]]> when 'true' ->
					    [32|[118|Vsn]]
					%% Line 149
					<_cor16> when 'true' ->
					    []
				      end
				  in  do  %% Line 152
					  call 'io':'format'
					      ([126|[110|[67|[111|[109|[109|[111|[110|[32|[84|[101|[115|[116|[126|[115|[32|[115|[116|[97|[114|[116|[105|[110|[103|[32|[40|[99|[119|[100|[32|[105|[115|[32|[126|[116|[115|[41|[126|[110|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 153
																																			   [_cor6|[Cwd|[]]])
					  let <Self> =
					      %% Line 154
					      call 'erlang':'self'
						  ()
					  in  let <_cor9> =
						  %% Line 155
						  ( fun () ->
							apply 'script_start1'/2
							    (Self, _cor0)
						    -| [{'id',{0,0,'-script_start/1-fun-0-'}}] )
					      in  let <Pid> =
						      %% Line 155
						      call 'erlang':'spawn_link'
							  (_cor9)
						  in  %% Line 156
						      receive
							%% Line 157
							<{'EXIT',_cor17,Reason}>
							    when call 'erlang':'=:='
								  (_cor17,
								   Pid) ->
							    %% Line 158
							    case Reason of
							      %% Line 159
							      <{'user_error',What}> when 'true' ->
								  do  %% Line 160
								      call 'io':'format'
									  ([10|[84|[101|[115|[116|[32|[114|[117|[110|[32|[102|[97|[105|[108|[101|[100|[33|[10|[82|[101|[97|[115|[111|[110|[58|[32|[126|[112|[10|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 161
																															[What|[]])
								      %% Line 162
								      apply 'finish'/3
									  (Tracing, 2, _cor0)
							      %% Line 163
							      <_cor18> when 'true' ->
								  do  %% Line 164
								      call 'io':'format'
									  ([84|[101|[115|[116|[32|[114|[117|[110|[32|[99|[114|[97|[115|[104|[101|[100|[33|[32|[84|[104|[105|[115|[32|[99|[111|[117|[108|[100|[32|[98|[101|[32|[97|[110|[32|[105|[110|[116|[101|[114|[110|[97|[108|[32|[101|[114|[114|[111|[114|[32|[45|[32|[112|[108|[101|[97|[115|[101|[32|[114|[101|[112|[111|[114|[116|[33|[10|[10|[126|[112|[10|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 167
																																																												      [Reason|[]])
								      %% Line 168
								      apply 'finish'/3
									  (Tracing, 2, _cor0)
							    end
							%% Line 170
							<{_cor19,{'error',Reason}}>
							    when call 'erlang':'=:='
								  (_cor19,
								   Pid) ->
							    do  %% Line 171
								call 'io':'format'
								    ([10|[84|[101|[115|[116|[32|[114|[117|[110|[32|[102|[97|[105|[108|[101|[100|[33|[32|[82|[101|[97|[115|[111|[110|[58|[10|[126|[112|[10|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Reason|[]])
								%% Line 172
								apply 'finish'/3
								    (Tracing, 2, _cor0)
							%% Line 173
							<{_cor20,Result}>
							    when call 'erlang':'=:='
								  (_cor20,
								   Pid) ->
							    do  %% Line 174
								call 'io':'nl'
								    ()
								let <_cor12> =
								    %% Line 175
								    apply 'analyze_test_result'/2
									(Result, _cor0)
								in  %% Line 175
								    apply 'finish'/3
									(Tracing, _cor12, _cor0)
						      after 'infinity' ->
							'true'
			      ( <_cor5> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor5})
				-| ['compiler_generated'] )
			    end
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	      %% Line 177
	      <{'error',_X_LoopReason}> when 'true' ->
		  %% Line 178
		  apply 'finish'/3
		      (Tracing, 2, _cor0)
	      %% Line 179
	      <Result> when 'true' ->
		  do  %% Line 180
		      call 'io':'nl'
			  ()
		      let <_cor13> =
			  %% Line 181
			  apply 'analyze_test_result'/2
			      (Result, _cor0)
		      in  %% Line 181
			  apply 'finish'/3
			      (Tracing, _cor13, _cor0)
	    end
'analyze_test_result'/2 =
    %% Line 185
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'ok',_cor10> when 'true' ->
	      %% Line 186
	      0
	  %% Line 187
	  <{'error',_X_Reason},_cor11> when 'true' ->
	      %% Line 188
	      2
	  %% Line 189
	  <{_X_Ok,Failed,{_X_UserSkipped,AutoSkipped}},Args> when 'true' ->
	      %% Line 190
	      case <> of
		<>
		    when call 'erlang':'>'
			  (Failed,
			   0) ->
		    %% Line 191
		    1
		%% Line 192
		<> when 'true' ->
		    %% Line 193
		    case AutoSkipped of
		      %% Line 194
		      <0> when 'true' ->
			  %% Line 195
			  0
		      %% Line 196
		      <_cor12> when 'true' ->
			  let <_cor4> =
			      %% Line 198
			      ( fun (_cor2) ->
				    case _cor2 of
				      <[ExitOpt|[]]> when 'true' ->
					  ExitOpt
				      ( <_cor3> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor3})
					      -| [{'function_name',{'-analyze_test_result/2-fun-0-',1}}] )
					-| ['compiler_generated'] )
				    end
				-| [{'id',{0,0,'-analyze_test_result/2-fun-0-'}}] )
			  in  %% Line 197
			      case apply 'get_start_opt'/3
				       ('exit_status', _cor4, %% Line 199
							      Args) of
				%% Line 200
				<'undefined'> when 'true' ->
				    %% Line 201
				    1
				%% Line 202
				<[105|[103|[110|[111|[114|[101|[95|[99|[111|[110|[102|[105|[103]]]]]]]]]]]]]> when 'true' ->
				    %% Line 203
				    0
				( <_cor5> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor5})
				  -| ['compiler_generated'] )
			      end
		    end
	      end
	  %% Line 207
	  <[Result|Rs],Args> when 'true' ->
	      %% Line 208
	      case apply 'analyze_test_result'/2
		       (Result, Args) of
		%% Line 209
		<0> when 'true' ->
		    %% Line 210
		    apply 'analyze_test_result'/2
			(Rs, Args)
		%% Line 211
		<Other> when 'true' ->
		    %% Line 212
		    Other
	      end
	  %% Line 214
	  <[],_cor13> when 'true' ->
	      %% Line 215
	      0
	  %% Line 216
	  <'interactive_mode',_cor14> when 'true' ->
	      %% Line 217
	      'interactive_mode'
	  %% Line 218
	  <Unknown,_cor15> when 'true' ->
	      do  %% Line 219
		  call 'io':'format'
		      ([10|[84|[101|[115|[116|[32|[114|[117|[110|[32|[102|[97|[105|[108|[101|[100|[33|[32|[82|[101|[97|[115|[111|[110|[58|[10|[126|[112|[10|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Unknown|[]])
		  %% Line 220
		  2
	end
'finish'/3 =
    %% Line 222
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 223
	    apply 'stop_trace'/1
		(_cor2)
	    do  %% Line 224
		call 'timer':'sleep'
		    (1000)
		%% Line 225
		case <> of
		  <>
		      when call 'erlang':'=:='
			    (_cor1,
			     'interactive_mode') ->
		      %% Line 226
		      'interactive_mode'
		  %% Line 227
		  <> when 'true' ->
		      let <_cor7> =
			  %% Line 232
			  ( fun (_cor5) ->
				case _cor5 of
				  <[HaltMod|[HaltFunc|[]]]> when 'true' ->
				      let <_cor4> =
					  %% Line 233
					  call 'erlang':'list_to_atom'
					      (HaltMod)
				      in  let <_cor3> =
					      %% Line 234
					      call 'erlang':'list_to_atom'
						  (HaltFunc)
					  in  %% Line 233
					      {_cor4,_cor3}
				  ( <_cor6> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor6})
					  -| [{'function_name',{'-finish/3-fun-0-',1}}] )
				    -| ['compiler_generated'] )
				end
			    -| [{'id',{0,0,'-finish/3-fun-0-'}}] )
		      in  %% Line 231
			  case apply 'get_start_opt'/3
				   ('halt_with', _cor7, _cor0) of
			    %% Line 236
			    <'undefined'> when 'true' ->
				%% Line 237
				call 'erlang':'halt'
				    (_cor1)
			    %% Line 238
			    <{M,F}> when 'true' ->
				%% Line 239
				call M:F
				    (_cor1)
			    ( <_cor8> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor8})
			      -| ['compiler_generated'] )
			  end
		end
'script_start1'/2 =
    %% Line 243
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 245
	    ( fun (_cor2) ->
		  case _cor2 of
		    <[Lbl|[]]> when 'true' ->
			Lbl
		    ( <_cor3> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor3})
			    -| [{'function_name',{'-script_start1/2-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-script_start1/2-fun-0-'}}] )
	in  let <Label> =
		%% Line 245
		apply 'get_start_opt'/3
		    ('label', _cor4, _cor0)
	    in  let <_cor8> =
		    %% Line 246
		    ( fun (_cor6) ->
			  case _cor6 of
			    <[Prof|[]]> when 'true' ->
				Prof
			    ( <_cor7> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor7})
				    -| [{'function_name',{'-script_start1/2-fun-1-',1}}] )
			      -| ['compiler_generated'] )
			  end
		      -| [{'id',{0,0,'-script_start1/2-fun-1-'}}] )
		in  let <Profile> =
			%% Line 246
			apply 'get_start_opt'/3
			    ('profile', _cor8, _cor0)
		    in  let <Vts> =
			    %% Line 247
			    apply 'get_start_opt'/3
				('vts', 'true', _cor0)
			in  let <Shell> =
				%% Line 248
				apply 'get_start_opt'/3
				    ('shell', 'true', _cor0)
			    in  let <_cor14> =
				    %% Line 249
				    ( fun (_cor12) ->
					  case _cor12 of
					    <[CoverFile|[]]> when 'true' ->
						call 'filename':'absname'
						    (CoverFile)
					    ( <_cor13> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor13})
						    -| [{'function_name',{'-script_start1/2-fun-2-',1}}] )
					      -| ['compiler_generated'] )
					  end
				      -| [{'id',{0,0,'-script_start1/2-fun-2-'}}] )
				in  let <Cover> =
					%% Line 249
					apply 'get_start_opt'/3
					    ('cover', _cor14, _cor0)
				    in  let <_cor18> =
					    %% Line 251
					    ( fun (_cor16) ->
						  case _cor16 of
						    <[CS|[]]> when 'true' ->
							call 'erlang':'list_to_atom'
							    (CS)
						    ( <_cor17> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor17})
							    -| [{'function_name',{'-script_start1/2-fun-3-',1}}] )
						      -| ['compiler_generated'] )
						  end
					      -| [{'id',{0,0,'-script_start1/2-fun-3-'}}] )
					in  let <CoverStop> =
						%% Line 250
						apply 'get_start_opt'/3
						    ('cover_stop', _cor18, _cor0)
					    in  let <_cor22> =
						    %% Line 252
						    ( fun (_cor20) ->
							  case _cor20 of
							    <[LogD|[]]> when 'true' ->
								LogD
							    ( <_cor21> when 'true' ->
								  ( primop 'match_fail'
									({'function_clause',_cor21})
								    -| [{'function_name',{'-script_start1/2-fun-4-',1}}] )
							      -| ['compiler_generated'] )
							  end
						      -| [{'id',{0,0,'-script_start1/2-fun-4-'}}] )
						in  let <LogDir> =
							%% Line 252
							apply 'get_start_opt'/3
							    ('logdir', _cor22, _cor0)
						    in  let <_cor31> =
							    %% Line 254
							    ( fun (_cor29) ->
								  ( letrec
									'lc$^0'/1 =
									    fun (_cor26) ->
										case _cor26 of
										  <[O|_cor25]> when 'true' ->
										      let <_cor27> =
											  call 'erlang':'list_to_atom'
											      (O)
										      in  let <_cor28> =
											      apply 'lc$^0'/1
												  (_cor25)
											  in  ( [_cor27|_cor28]
												-| ['compiler_generated'] )
										  <[]> when 'true' ->
										      []
										  ( <_cor26> when 'true' ->
											( primop 'match_fail'
											      ({'function_clause',_cor26})
											  -| [{'function_name',{'lc$^0',1}}] )
										    -| ['compiler_generated'] )
										end
								    in  apply 'lc$^0'/1
									    (_cor29)
								    -| ['list_comprehension'] )
							      -| [{'id',{0,0,'-script_start1/2-fun-5-'}}] )
							in  let <LogOpts> =
								%% Line 253
								apply 'get_start_opt'/4
								    ('logopts', _cor31, %% Line 255
											[], _cor0)
							    in  let <Verbosity> =
								    %% Line 256
								    apply 'verbosity_args2opts'/1
									(_cor0)
								in  let <_cor36> =
									%% Line 258
									( fun (_cor34) ->
									      case _cor34 of
										<[MT|[]]> when 'true' ->
										    call 'erlang':'list_to_integer'
											(MT)
										( <_cor35> when 'true' ->
										      ( primop 'match_fail'
											    ({'function_clause',_cor35})
											-| [{'function_name',{'-script_start1/2-fun-6-',1}}] )
										  -| ['compiler_generated'] )
									      end
									  -| [{'id',{0,0,'-script_start1/2-fun-6-'}}] )
								    in  let <MultTT> =
									    %% Line 257
									    apply 'get_start_opt'/4
										('multiply_timetraps', _cor36, %% Line 258
													       1, _cor0)
									in  let <_cor40> =
										%% Line 260
										( fun (_cor38) ->
										      case _cor38 of
											<[CT|[]]> when 'true' ->
											    call 'erlang':'list_to_atom'
												(CT)
											%% Line 261
											<[]> when 'true' ->
											    'true'
											( <_cor39> when 'true' ->
											      ( primop 'match_fail'
												    ({'function_clause',_cor39})
												-| [{'function_name',{'-script_start1/2-fun-7-',1}}] )
											  -| ['compiler_generated'] )
										      end
										  -| [{'id',{0,0,'-script_start1/2-fun-7-'}}] )
									    in  let <ScaleTT> =
										    %% Line 259
										    apply 'get_start_opt'/4
											('scale_timetraps', _cor40, %% Line 262
														    'false', _cor0)
										in  let <_cor44> =
											%% Line 264
											( fun (_cor42) ->
											      case _cor42 of
												<[PD|[]]> when 'true' ->
												    call 'erlang':'list_to_atom'
													(PD)
												%% Line 265
												<[]> when 'true' ->
												    'auto_per_tc'
												( <_cor43> when 'true' ->
												      ( primop 'match_fail'
													    ({'function_clause',_cor43})
													-| [{'function_name',{'-script_start1/2-fun-8-',1}}] )
												  -| ['compiler_generated'] )
											      end
											  -| [{'id',{0,0,'-script_start1/2-fun-8-'}}] )
										    in  let <CreatePrivDir> =
											    %% Line 263
											    apply 'get_start_opt'/3
												('create_priv_dir', _cor44, _cor0)
											in  let <EvHandlers> =
												%% Line 267
												apply 'event_handler_args2opts'/1
												    (_cor0)
											    in  let <CTHooks> =
												    %% Line 268
												    apply 'ct_hooks_args2opts'/1
													(_cor0)
												in  let <_cor50> =
													%% Line 270
													( fun (_cor48) ->
													      case _cor48 of
														<[CT|[]]> when 'true' ->
														    call 'erlang':'list_to_atom'
															(CT)
														%% Line 271
														<[]> when 'true' ->
														    'undefined'
														( <_cor49> when 'true' ->
														      ( primop 'match_fail'
															    ({'function_clause',_cor49})
															-| [{'function_name',{'-script_start1/2-fun-9-',1}}] )
														  -| ['compiler_generated'] )
													      end
													  -| [{'id',{0,0,'-script_start1/2-fun-9-'}}] )
												    in  let <EnableBuiltinHooks> =
													    %% Line 269
													    apply 'get_start_opt'/4
														('enable_builtin_hooks', _cor50, %% Line 272
																		 'undefined', _cor0)
													in  do  %% Line 277
														case call 'proplists':'get_value'
															 ('ct_decrypt_key', _cor0) of
														  %% Line 278
														  <[DecryptKey|[]]> when 'true' ->
														      %% Line 279
														      call 'application':'set_env'
															  ('common_test', 'decrypt', {'key',DecryptKey})
														  %% Line 280
														  <'undefined'> when 'true' ->
														      %% Line 281
														      case call 'proplists':'get_value'
															       ('ct_decrypt_file', _cor0) of
															%% Line 282
															<[DecryptFile|[]]> when 'true' ->
															    let <_cor52> =
																%% Line 284
																call 'filename':'absname'
																    (DecryptFile)
															    in  %% Line 283
																call 'application':'set_env'
																    ('common_test', 'decrypt', %% Line 284
																			       {'file',_cor52})
															%% Line 285
															<'undefined'> when 'true' ->
															    %% Line 286
															    call 'application':'unset_env'
																('common_test', 'decrypt')
															( <_cor53> when 'true' ->
															      primop 'match_fail'
																  ({'case_clause',_cor53})
															  -| ['compiler_generated'] )
														      end
														  ( <_cor54> when 'true' ->
															primop 'match_fail'
															    ({'case_clause',_cor54})
														    -| ['compiler_generated'] )
														end
														let <AutoCompile,IncludeDirs> =
														    %% Line 291
														    case call 'proplists':'get_value'
															     ('no_auto_compile', _cor0) of
														      %% Line 292
														      <'undefined'> when 'true' ->
															  do  %% Line 293
															      call 'application':'set_env'
																  ('common_test', 'auto_compile', 'true')
															      let <_cor57> =
																  %% Line 295
																  case call 'proplists':'get_value'
																	   ('include', _cor0) of
																    %% Line 296
																    <Incl>
																	when try
																	      let <_cor55> =
																		  call 'erlang':'hd'
																		      (Incl)
																	      in  call 'erlang':'is_list'
																		      (_cor55)
																	  of <Try> ->
																	      Try
																	  catch <T,R> ->
																	      'false' ->
																	%% Line 297
																	Incl
																    %% Line 298
																    <Incl>
																	when call 'erlang':'is_list'
																	      (Incl) ->
																	%% Line 299
																	[Incl|[]]
																    %% Line 300
																    <'undefined'> when 'true' ->
																	%% Line 301
																	[]
																    ( <_cor56> when 'true' ->
																	  primop 'match_fail'
																	      ({'case_clause',_cor56})
																      -| ['compiler_generated'] )
																  end
															      in  %% Line 303
																  case call 'os':'getenv'
																	   ([67|[84|[95|[73|[78|[67|[76|[85|[68|[69|[95|[80|[65|[84|[72]]]]]]]]]]]]]]]) of
																    %% Line 304
																    <'false'> when 'true' ->
																	do  %% Line 305
																	    call 'application':'set_env'
																		('common_test', 'include', _cor57)
																	    %% Line 306
																	    <'undefined',_cor57>
																    %% Line 307
																    <CtInclPath> when 'true' ->
																	let <_cor59> =
																	    %% Line 309
																	    call 'string':'tokens'
																		(CtInclPath, [58|[32|[44]]])
																	in  let <AllInclDirs> =
																		%% Line 309
																		call 'erlang':'++'
																		    (_cor59, _cor57)
																	    in  do  %% Line 310
																		    call 'application':'set_env'
																			('common_test', 'include', AllInclDirs)
																		    %% Line 311
																		    <'undefined',AllInclDirs>
																  end
														      %% Line 313
														      <_cor91> when 'true' ->
															  do  %% Line 314
															      call 'application':'set_env'
																  ('common_test', 'auto_compile', 'false')
															      %% Line 315
															      <'false',[]>
														    end
														in  let <_cor67> =
															%% Line 320
															( fun (_cor65) ->
															      case _cor65 of
																<[]> when 'true' ->
																    'true'
																%% Line 321
																<[Bool|[]]> when 'true' ->
																    call 'erlang':'list_to_atom'
																	(Bool)
																( <_cor66> when 'true' ->
																      ( primop 'match_fail'
																	    ({'function_clause',_cor66})
																	-| [{'function_name',{'-script_start1/2-fun-10-',1}}] )
																  -| ['compiler_generated'] )
															      end
															  -| [{'id',{0,0,'-script_start1/2-fun-10-'}}] )
														    in  let <AbortIfMissing> =
															    %% Line 319
															    apply 'get_start_opt'/4
																('abort_if_missing_suites', _cor67, %% Line 322
																				    'false', _cor0)
															in  let <_cor76> =
																%% Line 326
																( fun (_cor74) ->
																      case _cor74 of
																	<[[97|[108|[108]]]]> when 'true' ->
																	    ['all']
																	%% Line 327
																	<Conns> when 'true' ->
																	    ( letrec
																		  'lc$^1'/1 =
																		      fun (_cor71) ->
																			  case _cor71 of
																			    <[Conn|_cor70]> when 'true' ->
																				let <_cor72> =
																				    call 'erlang':'list_to_atom'
																					(Conn)
																				in  let <_cor73> =
																					apply 'lc$^1'/1
																					    (_cor70)
																				    in  ( [_cor72|_cor73]
																					  -| ['compiler_generated'] )
																			    <[]> when 'true' ->
																				[]
																			    ( <_cor71> when 'true' ->
																				  ( primop 'match_fail'
																					({'function_clause',_cor71})
																				    -| [{'function_name',{'lc$^1',1}}] )
																			      -| ['compiler_generated'] )
																			  end
																	      in  apply 'lc$^1'/1
																		      (Conns)
																	      -| ['list_comprehension'] )
																      end
																  -| [{'id',{0,0,'-script_start1/2-fun-11-'}}] )
															    in  let <SilentConns> =
																    %% Line 325
																    apply 'get_start_opt'/4
																	('silent_connections', _cor76, %% Line 328
																				       [], _cor0)
																in  let <_cor80> =
																	%% Line 331
																	( fun (_cor78) ->
																	      case _cor78 of
																		<[SS|[]]> when 'true' ->
																		    call 'filename':'absname'
																			(SS)
																		( <_cor79> when 'true' ->
																		      ( primop 'match_fail'
																			    ({'function_clause',_cor79})
																			-| [{'function_name',{'-script_start1/2-fun-12-',1}}] )
																		  -| ['compiler_generated'] )
																	      end
																	  -| [{'id',{0,0,'-script_start1/2-fun-12-'}}] )
																    in  let <Stylesheet> =
																	    %% Line 330
																	    apply 'get_start_opt'/3
																		('stylesheet', _cor80, _cor0)
																	in  let <_cor83> =
																		%% Line 333
																		case call 'proplists':'get_value'
																			 ('basic_html', _cor0) of
																		  %% Line 334
																		  <'undefined'> when 'true' ->
																		      do  %% Line 335
																			  call 'application':'set_env'
																			      ('common_test', 'basic_html', 'false')
																			  %% Line 336
																			  'undefined'
																		  %% Line 337
																		  <_cor92> when 'true' ->
																		      do  %% Line 338
																			  call 'application':'set_env'
																			      ('common_test', 'basic_html', 'true')
																			  %% Line 339
																			  'true'
																		end
																	    in  do  %% Line 342
																		    case call 'proplists':'get_value'
																			     ('disable_log_cache', _cor0) of
																		      %% Line 343
																		      <'undefined'> when 'true' ->
																			  %% Line 344
																			  call 'application':'set_env'
																			      ('common_test', 'disable_log_cache', 'false')
																		      %% Line 345
																		      <_cor93> when 'true' ->
																			  %% Line 346
																			  call 'application':'set_env'
																			      ('common_test', 'disable_log_cache', 'true')
																		    end
																		    let <Opts> =
																			%% Line 349
																			{'opts',Label,Profile,%% Line 350
																					      Vts,%% Line 350
																						  Shell,%% Line 351
																							Cover,%% Line 351
																							      CoverStop,'undefined','undefined',%% Line 352
																												LogDir,%% Line 352
																												       LogOpts,_cor83,%% Line 354
																														      Verbosity,[],%% Line 355
																																   EvHandlers,%% Line 356
																																	      CTHooks,%% Line 357
																																		      EnableBuiltinHooks,%% Line 360
																																					 IncludeDirs,%% Line 358
																																						     AutoCompile,%% Line 359
																																								 AbortIfMissing,%% Line 361
																																										SilentConns,%% Line 362
																																											    Stylesheet,%% Line 363
																																												       MultTT,%% Line 364
																																													      ScaleTT,%% Line 365
																																														      CreatePrivDir,[],'undefined',%% Line 366
																																																		   'script'}
																		    in  let <Result> =
																			    %% Line 369
																			    apply 'run_or_refresh'/2
																				(Opts, _cor0)
																			in  let <_cor88> =
																				%% Line 371
																				call 'erlang':'self'
																				    ()
																			    in  %% Line 371
																				call 'erlang':'!'
																				    (_cor1, {_cor88,Result})
'run_or_refresh'/2 =
    %% Line 373
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Opts = {'opts',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,LogDir,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38},Args> when 'true' ->
	      %% Line 374
	      case call 'proplists':'get_value'
		       ('refresh_logs', Args) of
		%% Line 375
		<'undefined'> when 'true' ->
		    %% Line 376
		    apply 'script_start2'/2
			(Opts, Args)
		%% Line 377
		<Refresh> when 'true' ->
		    let <_cor3> =
			%% Line 378
			case Refresh of
			  %% Line 379
			  <[]> when 'true' ->
			      apply 'which'/2
				  ('logdir', LogDir)
			  %% Line 380
			  <[RefreshDir|[]]> when 'true' ->
			      call 'filename':'absname'
				  (RefreshDir)
			  ( <_cor2> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor2})
			    -| ['compiler_generated'] )
			end
		    in  %% Line 382
			case call 'file':'get_cwd'
				 () of
			  <{'ok',Cwd}> when 'true' ->
			      do  %% Line 383
				  call 'file':'set_cwd'
				      (_cor3)
				  do  %% Line 385
				      call 'timer':'sleep'
					  (500)
				      do  %% Line 386
					  call 'io':'nl'
					      ()
					  let <_cor6> =
					      catch
						  %% Line 387
						  call 'ct_logs':'make_all_runs_index'
						      ('refresh')
					  in  %% Line 387
					      case _cor6 of
						%% Line 388
						<{'EXIT',ARReason}> when 'true' ->
						    do  %% Line 389
							call 'file':'set_cwd'
							    (Cwd)
							%% Line 390
							{'error',{'all_runs_index',ARReason}}
						%% Line 391
						<_cor39> when 'true' ->
						    let <_cor7> =
							catch
							    %% Line 392
							    call 'ct_logs':'make_all_suites_index'
								('refresh')
						    in  %% Line 392
							case _cor7 of
							  %% Line 393
							  <{'EXIT',ASReason}> when 'true' ->
							      do  %% Line 394
								  call 'file':'set_cwd'
								      (Cwd)
								  %% Line 395
								  {'error',{'all_suites_index',ASReason}}
							  %% Line 396
							  <_cor40> when 'true' ->
							      do  %% Line 397
								  call 'file':'set_cwd'
								      (Cwd)
								  do  %% Line 398
								      call 'io':'format'
									  ([76|[111|[103|[115|[32|[105|[110|[32|[126|[116|[115|[32|[114|[101|[102|[114|[101|[115|[104|[101|[100|[33|[126|[110|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 399
																												   [_cor3|[]])
								      do  %% Line 400
									  call 'timer':'sleep'
									      (500)
									  %% Line 401
									  'ok'
							end
					      end
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
	      end
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11})
		  -| [{'function_name',{'run_or_refresh',2}}] )
	    -| ['compiler_generated'] )
	end
'script_start2'/2 =
    %% Line 406
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Opts = {'opts',_cor32,_cor33,'undefined',%% Line 407
						    'undefined',_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56},%% Line 407
																												  Args> when 'true' ->
	      %% Line 408
	      case call 'proplists':'get_value'
		       ('spec', Args) of
		%% Line 409
		<Specs>
		    when let <_cor2> =
			  call 'erlang':'=/='
			      (Specs, [])
		      in  let <_cor3> =
			      call 'erlang':'=/='
				  (Specs, 'undefined')
			  in  call 'erlang':'and'
				  (_cor2, _cor3) ->
		    let <Specs1> =
			%% Line 410
			apply 'get_start_opt'/4
			    ('join_specs', [Specs|[]], Specs, Args)
		    in  let <Relaxed> =
			    %% Line 412
			    apply 'get_start_opt'/4
				('allow_user_terms', 'true', 'false', Args)
			in  let <_cor6> =
				catch
				    %% Line 413
				    call 'ct_testspec':'collect_tests_from_file'
					(Specs1, Relaxed)
			    in  %% Line 413
				case _cor6 of
				  %% Line 414
				  <{E,Reason}>
				      when let <_cor7> =
					    call 'erlang':'=:='
						(E, 'error')
					in  let <_cor8> =
						call 'erlang':'=:='
						    (E, 'EXIT')
					    in  call 'erlang':'or'
						    (_cor7, _cor8) ->
				      let <StackTrace> =
					  %% Line 415
					  call 'erlang':'get_stacktrace'
					      ()
				      in  %% Line 416
					  {'error',{'invalid_testspec',{Reason,StackTrace}}}
				  %% Line 417
				  <TestSpecData> when 'true' ->
				      %% Line 418
				      apply 'execute_all_specs'/4
					  (TestSpecData, Opts, Args, [])
				end
		%% Line 420
		<[]> when 'true' ->
		    %% Line 421
		    {'error','no_testspec_specified'}
		%% Line 422
		<_cor57> when 'true' ->
		    let <InitConfig> =
			%% Line 424
			call 'ct_config':'prepare_config_list'
			    (Args)
		    in  let <TheLogDir> =
			    %% Line 425
			    apply 'which'/2
				('logdir', _cor38)
			in  %% Line 426
			    case apply 'check_and_install_configfiles'/3
				     (InitConfig, %% Line 427
						  TheLogDir, %% Line 428
							     Opts) of
			      %% Line 429
			      <'ok'> when 'true' ->
				  let <_cor16> =
				      %% Line 430
				      call 'erlang':'setelement'
					  (14, Opts, InitConfig)
				  in  let <_cor18> =
					  %% Line 431
					  call 'erlang':'setelement'
					      (10, _cor16, TheLogDir)
				      in  %% Line 430
					  apply 'script_start3'/2
					      (_cor18, %% Line 431
						       Args)
			      %% Line 432
			      <Error> when 'true' ->
				  %% Line 433
				  Error
			    end
	      end
	  %% Line 437
	  <Opts,Args> when 'true' ->
	      let <InitConfig> =
		  %% Line 439
		  call 'ct_config':'prepare_config_list'
		      (Args)
	      in  %% Line 440
		  ( case Opts of
		      ( <( {'opts',_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_rec2,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,_cor133,_cor134,_cor135,_cor136,_cor137,_cor138}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <LogDir> =
				apply 'which'/2
				    ('logdir', _rec2)
			    in  %% Line 441
				case apply 'check_and_install_configfiles'/3
					 (InitConfig, LogDir, Opts) of
				  %% Line 442
				  <'ok'> when 'true' ->
				      let <_cor26> =
					  %% Line 443
					  call 'erlang':'setelement'
					      (14, Opts, InitConfig)
				      in  let <_cor28> =
					      %% Line 444
					      call 'erlang':'setelement'
						  (10, _cor26, LogDir)
					  in  %% Line 443
					      apply 'script_start3'/2
						  (_cor28, %% Line 444
							   Args)
				  %% Line 445
				  <Error> when 'true' ->
				      %% Line 446
				      Error
				end
			-| ['compiler_generated'] )
		      ( <_cor139> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','opts'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	end
'execute_all_specs'/4 =
    %% Line 449
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_cor27,_cor28,Result> when 'true' ->
	      let <Result1> =
		  %% Line 450
		  call 'lists':'reverse'
		      (Result)
	      in  %% Line 451
		  case call 'lists':'keysearch'
			   ('EXIT', 1, Result1) of
		    %% Line 452
		    <{'value',{_cor29,_cor30,ExitReason}}> when 'true' ->
			%% Line 453
			call 'erlang':'exit'
			    (ExitReason)
		    %% Line 454
		    <'false'> when 'true' ->
			%% Line 455
			case call 'lists':'keysearch'
				 ('error', 1, Result1) of
			  %% Line 456
			  <{'value',Error}> when 'true' ->
			      %% Line 457
			      Error
			  %% Line 458
			  <'false'> when 'true' ->
			      let <_cor13> =
				  %% Line 459
				  ( fun (_cor10,_cor9) ->
					case <_cor10,_cor9> of
					  <{Ok,Fail,{UserSkip,AutoSkip}},%% Line 460
									 {Ok1,Fail1,{UserSkip1,AutoSkip1}}> when 'true' ->
					      let <_cor8> =
						  %% Line 461
						  call 'erlang':'+'
						      (Ok1, Ok)
					      in  let <_cor7> =
						      %% Line 461
						      call 'erlang':'+'
							  (Fail1, Fail)
						  in  let <_cor6> =
							  %% Line 462
							  call 'erlang':'+'
							      (UserSkip1, UserSkip)
						      in  let <_cor5> =
							      %% Line 463
							      call 'erlang':'+'
								  (AutoSkip1, AutoSkip)
							  in  %% Line 461
							      {_cor8,_cor7,%% Line 462
									   {_cor6,_cor5}}
					  ( <_cor12,_cor11> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor12,_cor11})
						  -| [{'function_name',{'-execute_all_specs/4-fun-0-',2}}] )
					    -| ['compiler_generated'] )
					end
				    -| [{'id',{0,0,'-execute_all_specs/4-fun-0-'}}] )
			      in  %% Line 459
				  call 'lists':'foldl'
				      (_cor13, %% Line 464
					       {0,0,{0,0}}, %% Line 464
							    Result1)
			  ( <_cor14> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor14})
			    -| ['compiler_generated'] )
			end
		    ( <_cor15> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor15})
		      -| ['compiler_generated'] )
		  end
	  %% Line 468
	  <[{Specs,TS}|TSs],Opts,Args,Result> when 'true' ->
	      let <CombinedOpts> =
		  %% Line 469
		  apply 'combine_test_opts'/3
		      (TS, Specs, Opts)
	      in  %% Line 470
		  try
		      apply 'execute_one_spec'/3
			  (TS, CombinedOpts, Args)
		  of <_cor17> ->
		      %% Line 472
		      apply 'execute_all_specs'/4
			  (TSs, Opts, Args, [_cor17|Result])
		  catch <_cor21,_cor20,_cor19> ->
		      let <_cor22> =
			  %% Line 476
			  call 'erlang':'self'
			      ()
		      in  %% Line 475
			  apply 'execute_all_specs'/4
			      (TSs, Opts, Args, %% Line 476
						[{'EXIT',_cor22,_cor20}|Result])
	  ( <_cor26,_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26,_cor25,_cor24,_cor23})
		  -| [{'function_name',{'execute_all_specs',4}}] )
	    -| ['compiler_generated'] )
	end
'execute_one_spec'/3 =
    %% Line 479
    fun (_cor2,_cor1,_cor0) ->
	let <InitConfig> =
	    %% Line 481
	    call 'ct_config':'prepare_config_list'
		(_cor0)
	in  %% Line 482
	    ( case _cor1 of
		( <( {'opts',_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_rec4,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <TheLogDir> =
			  apply 'which'/2
			      ('logdir', _rec4)
		      in  let <AllConfig> =
			      %% Line 484
			      apply 'merge_vals'/1
				  ([InitConfig|[_cor31|[]]])
			  in  %% Line 485
			      case apply 'check_and_install_configfiles'/3
				       (AllConfig, TheLogDir, _cor1) of
				%% Line 486
				<'ok'> when 'true' ->
				    let <_cor10> =
					%% Line 487
					call 'erlang':'node'
					    ()
				    in  %% Line 487
					case call 'ct_testspec':'prepare_tests'
						 (_cor2, _cor10) of
					  <{Run,Skip}> when 'true' ->
					      let <_cor13> =
						  %% Line 488
						  call 'erlang':'setelement'
						      (14, _cor1, AllConfig)
					      in  let <_cor15> =
						      %% Line 489
						      call 'erlang':'setelement'
							  (10, _cor13, TheLogDir)
						  in  %% Line 488
						      apply 'do_run'/4
							  (Run, Skip, _cor15, _cor0)
					  ( <_cor11> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor11})
					    -| ['compiler_generated'] )
					end
				%% Line 490
				<Error> when 'true' ->
				    %% Line 491
				    Error
			      end
		  -| ['compiler_generated'] )
		( <_cor46> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','opts'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'combine_test_opts'/3 =
    %% Line 494
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 495
	    call 'erlang':'node'
		()
	in  let <TSOpts> =
		%% Line 495
		apply 'get_data_for_node'/2
		    (_cor2, _cor3)
	    in  %% Line 497
		( case _cor0 of
		    ( <( {'opts',_rec7,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,_cor133,_cor134,_cor135,_cor136,_cor137,_cor138}
			 -| ['compiler_generated'] )> when 'true' ->
			  %% Line 498
			  ( case TSOpts of
			      ( <( {'opts',_rec8,_cor140,_cor141,_cor142,_cor143,_cor144,_cor145,_cor146,_cor147,_cor148,_cor149,_cor150,_cor151,_cor152,_cor153,_cor154,_cor155,_cor156,_cor157,_cor158,_cor159,_cor160,_cor161,_cor162,_cor163,_cor164,_cor165}
				   -| ['compiler_generated'] )> when 'true' ->
				    let <Label> =
					apply 'choose_val'/2
					    (_rec7, _rec8)
				    in  let <Profile> =
					    %% Line 500
					    apply 'choose_val'/2
						(_cor113, _cor140)
					in  let <LogDir> =
						%% Line 503
						apply 'choose_val'/2
						    (_cor120, _cor147)
					    in  let <AllLogOpts> =
						    %% Line 506
						    apply 'merge_vals'/1
							([_cor121|%% Line 507
								  [_cor148|[]]])
						in  let <AllVerbosity> =
							%% Line 509
							apply 'merge_keyvals'/1
							    ([_cor123|%% Line 510
								      [_cor150|[]]])
						    in  let <AllSilentConns> =
							    %% Line 512
							    apply 'merge_vals'/1
								([_cor131|%% Line 513
									  [_cor158|[]]])
							in  let <Cover> =
								%% Line 515
								apply 'choose_val'/2
								    (_cor116, _cor143)
							    in  let <CoverStop> =
								    %% Line 518
								    apply 'choose_val'/2
									(_cor117, _cor144)
								in  let <MultTT> =
									%% Line 521
									apply 'choose_val'/2
									    (_cor133, _cor160)
								    in  let <ScaleTT> =
									    %% Line 524
									    apply 'choose_val'/2
										(_cor134, _cor161)
									in  let <CreatePrivDir> =
										%% Line 528
										apply 'choose_val'/2
										    (_cor135, _cor162)
									    in  let <AllEvHs> =
										    %% Line 532
										    apply 'merge_vals'/1
											([_cor125|%% Line 533
												  [_cor152|[]]])
										in  let <AllCTHooks> =
											%% Line 535
											apply 'merge_vals'/1
											    (%% Line 536
											     [_cor126|%% Line 537
												      [_cor153|[]]])
										    in  let <EnableBuiltinHooks> =
											    %% Line 540
											    apply 'choose_val'/2
												(_cor127, _cor154)
											in  let <Stylesheet> =
												%% Line 545
												apply 'choose_val'/2
												    (_cor132, _cor159)
											    in  let <AllInclude> =
												    %% Line 548
												    apply 'merge_vals'/1
													([_cor128|%% Line 549
														  [_cor155|[]]])
												in  do  %% Line 550
													call 'application':'set_env'
													    ('common_test', 'include', AllInclude)
													let <_cor90> =
													    %% Line 553
													    case apply 'choose_val'/2
														     (_cor129, _cor156) of
													      %% Line 555
													      <'undefined'> when 'true' ->
														  %% Line 556
														  'true'
													      %% Line 557
													      <ACBool> when 'true' ->
														  do  %% Line 558
														      call 'application':'set_env'
															  ('common_test', %% Line 559
																	  'auto_compile', %% Line 560
																			  ACBool)
														      %% Line 561
														      ACBool
													    end
													in  let <AbortIfMissing> =
														%% Line 564
														apply 'choose_val'/2
														    (_cor130, _cor157)
													    in  let <_cor102> =
														    %% Line 568
														    case apply 'choose_val'/2
															     (_cor122, _cor149) of
														      %% Line 570
														      <'undefined'> when 'true' ->
															  %% Line 571
															  'false'
														      %% Line 572
														      <BHBool> when 'true' ->
															  do  %% Line 573
															      call 'application':'set_env'
																  ('common_test', 'basic_html', %% Line 574
																				BHBool)
															      %% Line 575
															      BHBool
														    end
														in  let <_rec45> =
															%% Line 583
															apply 'which'/2
															    ('logdir', LogDir)
														    in  %% Line 598
															{'opts',Label,Profile,_cor114,_cor115,Cover,CoverStop,_cor118,_cor119,_rec45,AllLogOpts,_cor102,AllVerbosity,_cor151,AllEvHs,AllCTHooks,EnableBuiltinHooks,AllInclude,_cor90,AbortIfMissing,AllSilentConns,Stylesheet,MultTT,ScaleTT,CreatePrivDir,_cor1,_cor137,_cor138}
				-| ['compiler_generated'] )
			      ( <_cor166> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','opts'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		    ( <_cor139> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
'check_and_install_configfiles'/3 =
    %% Line 600
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <%% Line 601
	   Configs,%% Line 601
		   LogDir,%% Line 601
			  {'opts',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,%% Line 602
															  EvHandlers,%% Line 603
																     CTHooks,%% Line 604
																	     EnableBuiltinHooks,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30}> when 'true' ->
	      %% Line 605
	      case call 'ct_config':'check_config_files'
		       (Configs) of
		%% Line 606
		<'false'> when 'true' ->
		    %% Line 607
		    apply 'install'/2
			([{'config',Configs}|%% Line 608
					     [{'event_handler',EvHandlers}|%% Line 609
									   [{'ct_hooks',CTHooks}|%% Line 610
												 [{'enable_builtin_hooks',EnableBuiltinHooks}|[]]]]], %% Line 610
																		      LogDir)
		%% Line 611
		<{'value',{'error',{'nofile',File}}}> when 'true' ->
		    %% Line 612
		    {'error',{'cant_read_config_file',File}}
		%% Line 613
		<{'value',{'error',{'wrong_config',Message}}}> when 'true' ->
		    %% Line 614
		    {'error',{'wrong_config',Message}}
		%% Line 615
		<{'value',{'error',{'callback',Info}}}> when 'true' ->
		    %% Line 616
		    {'error',{'cant_load_callback_module',Info}}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'check_and_install_configfiles',3}}] )
	    -| ['compiler_generated'] )
	end
'script_start3'/2 =
    %% Line 619
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 621
	    ( fun (_cor5) ->
		  %% Line 623
		  case _cor1 of
		    <{'opts',_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102}> when 'true' ->
			let <_cor3> =
			    call 'erlang':'setelement'
				(9, _cor1, _cor5)
			in  call 'erlang':'setelement'
				(6, _cor3, 'undefined')
		    ( <_cor103> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-script_start3/2-fun-0-'}}] )
	in  let <Opts1> =
		%% Line 620
		apply 'get_start_opt'/4
		    ('step', _cor7, _cor1, _cor0)
	    in  let <_cor13> =
		    %% Line 625
		    call 'proplists':'get_value'
			('dir', _cor0)
		in  let <_cor12> =
			%% Line 626
			call 'proplists':'get_value'
			    ('suite', _cor0)
		    in  let <_cor10> =
			    %% Line 627
			    call 'proplists':'get_value'
				('group', _cor0)
			in  let <_cor9> =
				%% Line 628
				call 'proplists':'get_value'
				    ('testcase', _cor0)
			    in  let <_cor11> =
				    %% Line 627
				    apply 'groups_and_cases'/2
					(_cor10, _cor9)
				in  %% Line 625
				    case <_cor13,_cor12,_cor11> of
				      %% Line 630
				      <_cor104,_cor105,Error = {'error',_cor106}> when 'true' ->
					  %% Line 631
					  Error
				      %% Line 632
				      <_cor107,[],_cor108> when 'true' ->
					  %% Line 633
					  {'error','no_suite_specified'}
				      %% Line 634
				      <[],_cor109,_cor110> when 'true' ->
					  %% Line 635
					  {'error','no_dir_specified'}
				      %% Line 637
				      <Dirs,'undefined',[]>
					  when call 'erlang':'is_list'
						(Dirs) ->
					  let <_rec77> =
					      %% Line 638
					      apply 'tests'/1
						  (Dirs)
					  in  %% Line 638
					      case _cor1 of
						<{'opts',_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,_cor133,_cor134,_cor135,_cor136,_cor137}> when 'true' ->
						    let <_cor17> =
							call 'erlang':'setelement'
							    (27, _cor1, _rec77)
						    in  apply 'script_start4'/2
							    (_cor17, _cor0)
						( <_cor138> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','opts'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
				      %% Line 640
				      <'undefined',Suites,[]>
					  when call 'erlang':'is_list'
						(Suites) ->
					  let <_cor23> =
					      %% Line 641
					      ( letrec
						    'lc$^0'/1 =
							fun (_cor20) ->
							    case _cor20 of
							      <[S|_cor19]> when 'true' ->
								  let <_cor21> =
								      apply 'suite_to_test'/1
									  (S)
								  in  let <_cor22> =
									  apply 'lc$^0'/1
									      (_cor19)
								      in  ( [_cor21|_cor22]
									    -| ['compiler_generated'] )
							      <[]> when 'true' ->
								  []
							      ( <_cor20> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_cor20})
								      -| [{'function_name',{'lc$^0',1}}] )
								-| ['compiler_generated'] )
							    end
						in  apply 'lc$^0'/1
							(Suites)
						-| ['list_comprehension'] )
					  in  let <Ts> =
						  %% Line 641
						  apply 'tests'/1
						      (_cor23)
					      in  %% Line 642
						  case Opts1 of
						    <{'opts',_cor139,_cor140,_cor141,_cor142,_cor143,_cor144,_cor145,_cor146,_cor147,_cor148,_cor149,_cor150,_cor151,_cor152,_cor153,_cor154,_cor155,_cor156,_cor157,_cor158,_cor159,_cor160,_cor161,_cor162,_cor163,_cor164,_cor165}> when 'true' ->
							let <_cor27> =
							    call 'erlang':'setelement'
								(27, Opts1, Ts)
							in  apply 'script_start4'/2
								(_cor27, _cor0)
						    ( <_cor166> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','opts'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
				      %% Line 644
				      <'undefined',Suite,GsAndCs>
					  when call 'erlang':'is_list'
						(Suite) ->
					  let <_cor33> =
					      %% Line 645
					      ( letrec
						    'lc$^1'/1 =
							fun (_cor30) ->
							    case _cor30 of
							      <[S|_cor29]> when 'true' ->
								  let <_cor31> =
								      apply 'suite_to_test'/1
									  (S)
								  in  let <_cor32> =
									  apply 'lc$^1'/1
									      (_cor29)
								      in  ( [_cor31|_cor32]
									    -| ['compiler_generated'] )
							      <[]> when 'true' ->
								  []
							      ( <_cor30> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_cor30})
								      -| [{'function_name',{'lc$^1',1}}] )
								-| ['compiler_generated'] )
							    end
						in  apply 'lc$^1'/1
							(Suite)
						-| ['list_comprehension'] )
					  in  %% Line 645
					      case _cor33 of
						%% Line 646
						<DirMods = [_cor167|[]]> when 'true' ->
						    let <Ts> =
							%% Line 647
							apply 'tests'/2
							    (DirMods, GsAndCs)
						    in  %% Line 648
							case Opts1 of
							  <{'opts',_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181,_cor182,_cor183,_cor184,_cor185,_cor186,_cor187,_cor188,_cor189,_cor190,_cor191,_cor192,_cor193,_cor194}> when 'true' ->
							      let <_cor37> =
								  call 'erlang':'setelement'
								      (27, Opts1, Ts)
							      in  apply 'script_start4'/2
								      (_cor37, _cor0)
							  ( <_cor195> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {'badrecord','opts'}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
						%% Line 649
						<[_cor196|[_cor197|_cor198]]> when 'true' ->
						    %% Line 650
						    {'error','multiple_suites_and_cases'}
						%% Line 651
						<_cor199> when 'true' ->
						    %% Line 652
						    {'error','incorrect_start_options'}
					      end
				      %% Line 655
				      <[_cor200|[_cor201|_cor202]],Suite,[]>
					  when call 'erlang':'is_list'
						(Suite) ->
					  %% Line 656
					  {'error','multiple_dirs_and_suites'}
				      %% Line 658
				      <[Dir|[]],Suite,GsAndCs>
					  when let <_cor39> =
						call 'erlang':'is_list'
						    (Dir)
					    in  let <_cor40> =
						    call 'erlang':'is_list'
							(Suite)
						in  call 'erlang':'and'
							(_cor39, _cor40) ->
					  let <_cor46> =
					      %% Line 659
					      ( letrec
						    'lc$^2'/1 =
							fun (_cor43) ->
							    case _cor43 of
							      <[S|_cor42]> when 'true' ->
								  let <_cor44> =
								      apply 'suite_to_test'/2
									  (Dir, S)
								  in  let <_cor45> =
									  apply 'lc$^2'/1
									      (_cor42)
								      in  ( [_cor44|_cor45]
									    -| ['compiler_generated'] )
							      <[]> when 'true' ->
								  []
							      ( <_cor43> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_cor43})
								      -| [{'function_name',{'lc$^2',1}}] )
								-| ['compiler_generated'] )
							    end
						in  apply 'lc$^2'/1
							(Suite)
						-| ['list_comprehension'] )
					  in  %% Line 659
					      case _cor46 of
						%% Line 660
						<DirMods>
						    when call 'erlang':'=:='
							  (GsAndCs,
							   []) ->
						    let <Ts> =
							%% Line 661
							apply 'tests'/1
							    (DirMods)
						    in  %% Line 662
							case Opts1 of
							  <{'opts',_cor203,_cor204,_cor205,_cor206,_cor207,_cor208,_cor209,_cor210,_cor211,_cor212,_cor213,_cor214,_cor215,_cor216,_cor217,_cor218,_cor219,_cor220,_cor221,_cor222,_cor223,_cor224,_cor225,_cor226,_cor227,_cor228,_cor229}> when 'true' ->
							      let <_cor50> =
								  call 'erlang':'setelement'
								      (27, Opts1, Ts)
							      in  apply 'script_start4'/2
								      (_cor50, _cor0)
							  ( <_cor230> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {'badrecord','opts'}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
						%% Line 663
						<DirMods = [_cor231|[]]>
						    when call 'erlang':'=/='
							  (GsAndCs,
							   []) ->
						    let <Ts> =
							%% Line 664
							apply 'tests'/2
							    (DirMods, GsAndCs)
						    in  %% Line 665
							case Opts1 of
							  <{'opts',_cor232,_cor233,_cor234,_cor235,_cor236,_cor237,_cor238,_cor239,_cor240,_cor241,_cor242,_cor243,_cor244,_cor245,_cor246,_cor247,_cor248,_cor249,_cor250,_cor251,_cor252,_cor253,_cor254,_cor255,_cor256,_cor257,_cor258}> when 'true' ->
							      let <_cor54> =
								  call 'erlang':'setelement'
								      (27, Opts1, Ts)
							      in  apply 'script_start4'/2
								      (_cor54, _cor0)
							  ( <_cor259> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {'badrecord','opts'}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
						%% Line 666
						<[_cor260|[_cor261|_cor262]]>
						    when call 'erlang':'=/='
							  (GsAndCs,
							   []) ->
						    %% Line 667
						    {'error','multiple_suites_and_cases'}
						%% Line 668
						<_cor263> when 'true' ->
						    %% Line 669
						    {'error','incorrect_start_options'}
					      end
				      %% Line 672
				      <'undefined','undefined',GsAndCs>
					  when call 'erlang':'=/='
						(GsAndCs,
						 []) ->
					  %% Line 673
					  {'error','incorrect_start_options'}
				      %% Line 675
				      <'undefined','undefined',_cor264> when 'true' ->
					  %% Line 676
					  case <> of
					    <>
						when let <_cor62> =
						      ( try
							    ( case <> of
								( <>
								      when ( call ( 'erlang'
										 -| ['compiler_generated'] ):( 'is_record'
													       -| ['compiler_generated'] )
									      (_cor1,
									       ( 'opts'
										 -| ['compiler_generated'] ),
									       ( 28
										 -| ['compiler_generated'] ))
									  -| ['compiler_generated'] ) ->
								      let <_cor60> =
									  ( call 'erlang':'element'
										(4, _cor1)
									    -| ['compiler_generated'] )
								      in  ( call 'erlang':'=:='
										(_cor60, 'true')
									    -| ['compiler_generated'] )
								  -| ['compiler_generated'] )
								( <> when 'true' ->
								      'false'
								  -| ['compiler_generated'] )
							      end
							      -| ['compiler_generated'] )
							of <Try> ->
							    Try
							catch <T,R> ->
							    'false'
							-| ['compiler_generated'] )
						  in  let <_cor69> =
							  ( try
								( case <> of
								    ( <>
									  when ( call ( 'erlang'
										     -| ['compiler_generated'] ):( 'is_record'
														   -| ['compiler_generated'] )
										  (_cor1,
										   ( 'opts'
										     -| ['compiler_generated'] ),
										   ( 28
										     -| ['compiler_generated'] ))
									      -| ['compiler_generated'] ) ->
									  let <_cor67> =
									      ( call 'erlang':'element'
										    (5, _cor1)
										-| ['compiler_generated'] )
									  in  ( call 'erlang':'=:='
										    (_cor67, 'true')
										-| ['compiler_generated'] )
								      -| ['compiler_generated'] )
								    ( <> when 'true' ->
									  'false'
								      -| ['compiler_generated'] )
								  end
								  -| ['compiler_generated'] )
							    of <Try> ->
								Try
							    catch <T,R> ->
								'false'
							    -| ['compiler_generated'] )
						      in  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'or'
												 -| ['compiler_generated'] )
								(_cor62, _cor69)
							    -| ['compiler_generated'] ) ->
						%% Line 677
						case _cor1 of
						  <{'opts',_cor265,_cor266,_cor267,_cor268,_cor269,_cor270,_cor271,_cor272,_cor273,_cor274,_cor275,_cor276,_cor277,_cor278,_cor279,_cor280,_cor281,_cor282,_cor283,_cor284,_cor285,_cor286,_cor287,_cor288,_cor289,_cor290,_cor291}> when 'true' ->
						      let <_cor72> =
							  call 'erlang':'setelement'
							      (27, _cor1, [])
						      in  apply 'script_start4'/2
							      (_cor72, _cor0)
						  ( <_cor292> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','opts'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
					    %% Line 678
					    <> when 'true' ->
						do  %% Line 679
						    apply 'script_usage'/0
							()
						    %% Line 680
						    {'error','missing_start_options'}
					  end
				      ( <_fol2380,_fol2381,_fol2382> when 'true' ->
					    let <_cor73> = {_fol2380,_fol2381,_fol2382}
					    in  primop 'match_fail'
						    ({'case_clause',_cor73})
					-| ['compiler_generated'] )
				    end
'script_start4'/2 =
    %% Line 684
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'opts',_cor17,_cor18,'true',_cor19,_cor20,_cor21,_cor22,_cor23,%% Line 685
									   LogDir,%% Line 685
										  LogOpts,_cor24,_cor25,Config,EvHandlers,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,%% Line 685
																								       Tests,_cor37},%% Line 685
																										     _X_Args> when 'true' ->
	      let <_cor8> =
		  %% Line 687
		  ( fun (_cor5,_cor4) ->
			case <_cor5,_cor4> of
			  <{'ct_config_plain',CfgFiles},AllFiles>
			      when %% Line 688
				try
				    let <_cor2> =
					call 'erlang':'hd'
					    (CfgFiles)
				    in  call 'erlang':'is_list'
					    (_cor2)
				of <Try> ->
				    Try
				catch <T,R> ->
				    'false' ->
			      %% Line 689
			      call 'erlang':'++'
				  (AllFiles, CfgFiles)
			  %% Line 690
			  <{'ct_config_plain',CfgFile},AllFiles>
			      when %% Line 691
				try
				    let <_cor3> =
					call 'erlang':'hd'
					    (CfgFile)
				    in  call 'erlang':'is_integer'
					    (_cor3)
				of <Try> ->
				    Try
				catch <T,R> ->
				    'false' ->
			      %% Line 692
			      call 'erlang':'++'
				  (AllFiles, [CfgFile|[]])
			  %% Line 693
			  <_cor38,AllFiles> when 'true' ->
			      %% Line 694
			      AllFiles
			end
		    -| [{'id',{0,0,'-script_start4/2-fun-0-'}}] )
	      in  let <ConfigFiles> =
		      %% Line 687
		      call 'lists':'foldl'
			  (_cor8, %% Line 695
				  [], %% Line 695
				      Config)
		  in  let <_cor10> =
			  %% Line 696
			  call 'filename':'absname'
			      (LogDir)
		      in  %% Line 696
			  call 'vts':'init_data'
			      (ConfigFiles, EvHandlers, _cor10, LogOpts, Tests)
	  %% Line 698
	  <{'opts',Label,Profile,_cor39,%% Line 699
					'true',_cor40,_cor41,_cor42,_cor43,%% Line 705
									   LogDir,%% Line 702
										  LogOpts,_cor44,%% Line 703
												 Verbosity,%% Line 699
													   Config,%% Line 700
														  EvHandlers,%% Line 701
															     CTHooks,%% Line 704
																     EnableBuiltinHooks,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,%% Line 705
																										Specs,_cor53,_cor54},%% Line 705
																												     _X_Args> when 'true' ->
	      do  %% Line 708
		  call 'application':'set_env'
		      ('common_test', 'test_label', Label)
		  do  %% Line 711
		      call 'application':'set_env'
			  ('common_test', 'profile', Profile)
		      do  %% Line 713
			  case <> of
			    <>
				when call 'erlang':'=:='
				      (Config,
				       []) ->
				'ok'
			    %% Line 715
			    <> when 'true' ->
				%% Line 716
				call 'io':'format'
				    ([10|[73|[110|[115|[116|[97|[108|[108|[105|[110|[103|[58|[32|[126|[112|[10|[10]]]]]]]]]]]]]]]]], [Config|[]])
			  end
			  %% Line 718
			  case apply 'install'/1
				   ([{'config',Config}|[{'event_handler',EvHandlers}|%% Line 719
										     [{'ct_hooks',CTHooks}|%% Line 720
													   [{'enable_builtin_hooks',EnableBuiltinHooks}|[]]]]]) of
			    %% Line 721
			    <'ok'> when 'true' ->
				let <_cor11> =
				    %% Line 723
				    apply 'add_verbosity_defaults'/1
					(Verbosity)
				in  do  %% Line 722
					call 'ct_util':'start'
					    ('interactive', LogDir, _cor11)
					do  %% Line 724
					    call 'ct_util':'set_testdata'
						({'logopts',LogOpts})
					    do  %% Line 725
						apply 'log_ts_names'/1
						    (Specs)
						do  %% Line 726
						    call 'io':'nl'
							()
						    %% Line 727
						    'interactive_mode'
			    %% Line 728
			    <Error> when 'true' ->
				%% Line 729
				Error
			  end
	  %% Line 732
	  <{'opts',_cor55,_cor56,'true',_cor57,Cover,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79},_cor80> when 'true' ->
	      do  %% Line 733
		  case Cover of
		    %% Line 734
		    <'undefined'> when 'true' ->
			%% Line 735
			apply 'script_usage'/0
			    ()
		    %% Line 736
		    <_cor81> when 'true' ->
			%% Line 738
			call 'io':'format'
			    ([10|[67|[97|[110|[39|[116|[32|[114|[117|[110|[32|[99|[111|[118|[101|[114|[32|[105|[110|[32|[118|[116|[115|[32|[109|[111|[100|[101|[46|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
		  end
		  %% Line 740
		  {'error','no_cover_in_vts_mode'}
	  %% Line 742
	  <{'opts',_cor82,_cor83,_cor84,'true',Cover,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106},_cor107> when 'true' ->
	      do  %% Line 743
		  case Cover of
		    %% Line 744
		    <'undefined'> when 'true' ->
			%% Line 745
			apply 'script_usage'/0
			    ()
		    %% Line 746
		    <_cor108> when 'true' ->
			%% Line 748
			call 'io':'format'
			    ([10|[67|[97|[110|[39|[116|[32|[114|[117|[110|[32|[99|[111|[118|[101|[114|[32|[105|[110|[32|[105|[110|[116|[101|[114|[97|[99|[116|[105|[118|[101|[32|[109|[111|[100|[101|[46|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
		  end
		  %% Line 750
		  {'error','no_cover_in_interactive_mode'}
	  %% Line 752
	  <Opts = {'opts',_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,_cor133,Tests,_cor134},Args> when 'true' ->
	      %% Line 753
	      apply 'do_run'/4
		  (Tests, [], Opts, Args)
	  ( <_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15})
		  -| [{'function_name',{'script_start4',2}}] )
	    -| ['compiler_generated'] )
	end
'script_usage'/0 =
    %% Line 758
    fun () ->
	do  %% Line 759
	    call 'io':'format'
		([10|[10|[85|[115|[97|[103|[101|[58|[10|[10]]]]]]]]]])
	    do  %% Line 760
		call 'io':'format'
		    ([82|[117|[110|[32|[116|[101|[115|[116|[115|[32|[105|[110|[32|[119|[101|[98|[32|[98|[97|[115|[101|[100|[32|[71|[85|[73|[58|[10|[10|[9|[99|[116|[95|[114|[117|[110|[32|[45|[118|[116|[115|[32|[91|[45|[98|[114|[111|[119|[115|[101|[114|[32|[66|[114|[111|[119|[115|[101|[114|[93|[10|[9|[91|[45|[99|[111|[110|[102|[105|[103|[32|[67|[111|[110|[102|[105|[103|[70|[105|[108|[101|[49|[32|[67|[111|[110|[102|[105|[103|[70|[105|[108|[101|[50|[32|[46|[46|[32|[67|[111|[110|[102|[105|[103|[70|[105|[108|[101|[78|[93|[10|[9|[91|[45|[100|[101|[99|[114|[121|[112|[116|[95|[107|[101|[121|[32|[75|[101|[121|[93|[32|[124|[32|[91|[45|[100|[101|[99|[114|[121|[112|[116|[95|[102|[105|[108|[101|[32|[75|[101|[121|[70|[105|[108|[101|[93|[10|[9|[91|[45|[100|[105|[114|[32|[84|[101|[115|[116|[68|[105|[114|[49|[32|[84|[101|[115|[116|[68|[105|[114|[50|[32|[46|[46|[32|[84|[101|[115|[116|[68|[105|[114|[78|[93|[32|[124|[10|[9|[91|[45|[115|[117|[105|[116|[101|[32|[83|[117|[105|[116|[101|[32|[91|[45|[99|[97|[115|[101|[32|[67|[97|[115|[101|[93|[93|[10|[9|[91|[45|[108|[111|[103|[111|[112|[116|[115|[32|[76|[111|[103|[79|[112|[116|[49|[32|[76|[111|[103|[79|[112|[116|[50|[32|[46|[46|[32|[76|[111|[103|[79|[112|[116|[78|[93|[10|[9|[91|[45|[118|[101|[114|[98|[111|[115|[105|[116|[121|[32|[71|[101|[110|[86|[76|[118|[108|[32|[124|[32|[91|[67|[97|[116|[101|[103|[111|[114|[121|[86|[76|[118|[108|[49|[32|[46|[46|[32|[67|[97|[116|[101|[103|[111|[114|[121|[86|[76|[118|[108|[78|[93|[93|[10|[9|[91|[45|[105|[110|[99|[108|[117|[100|[101|[32|[73|[110|[99|[108|[68|[105|[114|[49|[32|[73|[110|[99|[108|[68|[105|[114|[50|[32|[46|[46|[32|[73|[110|[99|[108|[68|[105|[114|[78|[93|[10|[9|[91|[45|[110|[111|[95|[97|[117|[116|[111|[95|[99|[111|[109|[112|[105|[108|[101|[93|[10|[9|[91|[45|[97|[98|[111|[114|[116|[95|[105|[102|[95|[109|[105|[115|[115|[105|[110|[103|[95|[115|[117|[105|[116|[101|[115|[93|[10|[9|[91|[45|[109|[117|[108|[116|[105|[112|[108|[121|[95|[116|[105|[109|[101|[116|[114|[97|[112|[115|[32|[78|[93|[10|[9|[91|[45|[115|[99|[97|[108|[101|[95|[116|[105|[109|[101|[116|[114|[97|[112|[115|[93|[10|[9|[91|[45|[99|[114|[101|[97|[116|[101|[95|[112|[114|[105|[118|[95|[100|[105|[114|[32|[97|[117|[116|[111|[95|[112|[101|[114|[95|[114|[117|[110|[32|[124|[32|[97|[117|[116|[111|[95|[112|[101|[114|[95|[116|[99|[32|[124|[32|[109|[97|[110|[117|[97|[108|[95|[112|[101|[114|[95|[116|[99|[93|[10|[9|[91|[45|[98|[97|[115|[105|[99|[95|[104|[116|[109|[108|[93|[10|
		do  %% Line 775
		    call 'io':'format'
			([82|[117|[110|[32|[116|[101|[115|[116|[115|[32|[102|[114|[111|[109|[32|[99|[111|[109|[109|[97|[110|[100|[32|[108|[105|[110|[101|[58|[10|[10|[9|[99|[116|[95|[114|[117|[110|[32|[91|[45|[100|[105|[114|[32|[84|[101|[115|[116|[68|[105|[114|[49|[32|[84|[101|[115|[116|[68|[105|[114|[50|[32|[46|[46|[32|[84|[101|[115|[116|[68|[105|[114|[78|[93|[32|[124|[10|[9|[91|[45|[115|[117|[105|[116|[101|[32|[83|[117|[105|[116|[101|[49|[32|[83|[117|[105|[116|[101|[50|[32|[46|[46|[32|[83|[117|[105|[116|[101|[78|[32|[91|[45|[99|[97|[115|[101|[32|[67|[97|[115|[101|[49|[32|[67|[97|[115|[101|[50|[32|[46|[46|[32|[67|[97|[115|[101|[78|[93|[93|[10|[9|[91|[45|[115|[116|[101|[112|[32|[91|[99|[111|[110|[102|[105|[103|[32|[124|[32|[107|[101|[101|[112|[95|[105|[110|[97|[99|[116|[105|[118|[101|[93|[93|[10|[9|[91|[45|[99|[111|[110|[102|[105|[103|[32|[67|[111|[110|[102|[105|[103|[70|[105|[108|[101|[49|[32|[67|[111|[110|[102|[105|[103|[70|[105|[108|[101|[50|[32|[46|[46|[32|[67|[111|[110|[102|[105|[103|[70|[105|[108|[101|[78|[93|[10|[9|[91|[45|[117|[115|[101|[114|[99|[111|[110|[102|[105|[103|[32|[67|[97|[108|[108|[98|[97|[99|[107|[77|[111|[100|[117|[108|[101|[32|[67|[111|[110|[102|[105|[103|[70|[105|[108|[101|[49|[32|[46|[46|[32|[67|[111|[110|[102|[105|[103|[70|[105|[108|[101|[78|[93|[10|[9|[91|[45|[100|[101|[99|[114|[121|[112|[116|[95|[107|[101|[121|[32|[75|[101|[121|[93|[32|[124|[32|[91|[45|[100|[101|[99|[114|[121|[112|[116|[95|[102|[105|[108|[101|[32|[75|[101|[121|[70|[105|[108|[101|[93|[10|[9|[91|[45|[108|[111|[103|[100|[105|[114|[32|[76|[111|[103|[68|[105|[114|[93|[10|[9|[91|[45|[108|[111|[103|[111|[112|[116|[115|[32|[76|[111|[103|[79|[112|[116|[49|[32|[76|[111|[103|[79|[112|[116|[50|[32|[46|[46|[32|[76|[111|[103|[79|[112|[116|[78|[93|[10|[9|[91|[45|[118|[101|[114|[98|[111|[115|[105|[116|[121|[32|[71|[101|[110|[86|[76|[118|[108|[32|[124|[32|[91|[67|[97|[116|[101|[103|[111|[114|[121|[86|[76|[118|[108|[49|[32|[46|[46|[32|[67|[97|[116|[101|[103|[111|[114|[121|[86|[76|[118|[108|[78|[93|[93|[10|[9|[91|[45|[115|[105|[108|[101|[110|[116|[95|[99|[111|[110|[110|[101|[99|[116|[105|[111|[110|[115|[32|[91|[67|[111|[110|[110|[84|[121|[112|[101|[49|[32|[67|[111|[110|[110|[84|[121|[112|[101|[50|[32|[46|[46|[32|[67|[111|[110|[110|[84|[121|[112|[101|[78|[93|[93|[10|[9|[91|[45|[115|[116|[121|[108|[101|[115|[104|[101|[101|[116|[32|[67|[83|[83|[70|[105|[108|[101|[93|[10|[9|[91|[45|[99|[111|[118|[101|[114|[32|[67|[111|[118|[101|[114|[67|[102|[103|[70|[105|[108|[101|[93|[10|[9|[91|[45|[99|[111|[118|[101|[114|[95|[115|[116|[111|[112|[32|[66|[111|[111|[108|[93|[10|[9|[91|[45|[101|[118|[101|[110|[116|[95|[104|[97|[110|[100|[108|[101|[114|[32|[69|[118|[72|[97|[110|[100|[108|[101|[114|[49|[32|[69|[118|[72|[97|[110|[100|[108|[101|[114|[50|[32|[46|[46|[32|[69|[118|[72|[97|[110|[100|[108|[101|[114|[78|[93|[10|[9|[91|[45|[99|[116|[95|[104|[111|[111|[107|[115|[32|[67|[84|[72|[111|[111|[107|[49|[32|[67|[84|[72|[111|[111|[107|[50|[32|[46|[46|[32|[67|[84|[72|[111|[111|[107|[78|[93|[10|[9|[91|[45|[105|[110|[99|[108|[117|[100|[101|[32|[73|[110|[99|[108|[68|[105|[114|[49|[32|[73|[110|[99|[108|[68|[105|[114|[50|[32|[46|[46|[32|[73|[110|[99|[108|[68|[105|[114|[78|[93|[10|[9|[91|[45|[110|[111|[95|[97|[117|[116|[111|[95|[99|[111|[109|[112|[105|[108|[101|[93|[10|[9|[91|[45|[97|[98|[111|[114|[116|[95|[105|[102|[95|[109|[105|[115|[115|[105|[110|[103|[95|[115|[117|[105|[116|[101|[115|[93|[10|[9|[91|[45|[109|[117|[108|[116|[105|[112|[108|[121|[95|[116|[105|[109|[101|[116|[114|[97|[112|[115|[32|[78|[93|[10|[9|[91|[45|[115|[99|[97|[108|[101|[95|[116|[105|[109|[101|[116|[114|[97|[112|[115|[93|[10|[9|[91|[45|[99|[114|[101|[97|[116|[101|[95|[112|[114|[105|[118|[95|[100|[105|[114|[32|[97|[117|[116|[111|[95|[112|[101|[114|[95|[114|[117|[110|[32|[124|[32|[97|[117|[116|[111|[95|[112|[101|[114|[95|[116|[99|[32|[124|[32|[109|[97|[110|[117|[97|[108|[95|[112|[101|[114|[95|[116|[99|[93|[10|[9|[91|[45|[98|[97|[115|[105|[99|[95|[104|[116|[109|[108|[93|[10|[9|[91|[45|[114|[101|[112|[101|[97|[116|[32|[78|[93|[32|[124|[10|[9|[91|[45|[100|[117|[114|[97|[116|[105|[111|[110|[32|[72|[72|[77|[77|[83|[83|[32|[91|[45|[102|[111|[114|[99|[101|[95|[115|[116|[111|[112|[32|[91|[115|[107|[105|[112|[95|[114|[101|[115|[116|[93|[93|[93|[32|[124|[10|[9|[91|[45|[117|[110|[116|[105|[108|[32|[91|[89|[89|[77|[111|[77|[111|[68|[68|[93|[72|[72|[77|[77|[83|[83|[32|[91|[45|[102|[111|[114|[99|[101|[95|[115|[116|[111|[112|[32|[91|[115|[107|[105|[112|[95|[114|[101|[115|[116|[93|[93|[93|[10|
		    do  %% Line 801
			call 'io':'format'
			    ([82|[117|[110|[32|[116|[101|[115|[116|[115|[32|[117|[115|[105|[110|[103|[32|[116|[101|[115|[116|[32|[115|[112|[101|[99|[105|[102|[105|[99|[97|[116|[105|[111|[110|[58|[10|[10|[9|[99|[116|[95|[114|[117|[110|[32|[45|[115|[112|[101|[99|[32|[84|[101|[115|[116|[83|[112|[101|[99|[49|[32|[84|[101|[115|[116|[83|[112|[101|[99|[50|[32|[46|[46|[32|[84|[101|[115|[116|[83|[112|[101|[99|[78|[10|[9|[91|[45|[99|[111|[110|[102|[105|[103|[32|[67|[111|[110|[102|[105|[103|[70|[105|[108|[101|[49|[32|[67|[111|[110|[102|[105|[103|[70|[105|[108|[101|[50|[32|[46|[46|[32|[67|[111|[110|[102|[105|[103|[70|[105|[108|[101|[78|[93|[10|[9|[91|[45|[100|[101|[99|[114|[121|[112|[116|[95|[107|[101|[121|[32|[75|[101|[121|[93|[32|[124|[32|[91|[45|[100|[101|[99|[114|[121|[112|[116|[95|[102|[105|[108|[101|[32|[75|[101|[121|[70|[105|[108|[101|[93|[10|[9|[91|[45|[108|[111|[103|[100|[105|[114|[32|[76|[111|[103|[68|[105|[114|[93|[10|[9|[91|[45|[108|[111|[103|[111|[112|[116|[115|[32|[76|[111|[103|[79|[112|[116|[49|[32|[76|[111|[103|[79|[112|[116|[50|[32|[46|[46|[32|[76|[111|[103|[79|[112|[116|[78|[93|[10|[9|[91|[45|[118|[101|[114|[98|[111|[115|[105|[116|[121|[32|[71|[101|[110|[86|[76|[118|[108|[32|[124|[32|[91|[67|[97|[116|[101|[103|[111|[114|[121|[86|[76|[118|[108|[49|[32|[46|[46|[32|[67|[97|[116|[101|[103|[111|[114|[121|[86|[76|[118|[108|[78|[93|[93|[10|[9|[91|[45|[97|[108|[108|[111|[119|[95|[117|[115|[101|[114|[95|[116|[101|[114|[109|[115|[93|[10|[9|[91|[45|[106|[111|[105|[110|[95|[115|[112|[101|[99|[115|[93|[10|[9|[91|[45|[115|[105|[108|[101|[110|[116|[95|[99|[111|[110|[110|[101|[99|[116|[105|[111|[110|[115|[32|[91|[67|[111|[110|[110|[84|[121|[112|[101|[49|[32|[67|[111|[110|[110|[84|[121|[112|[101|[50|[32|[46|[46|[32|[67|[111|[110|[110|[84|[121|[112|[101|[78|[93|[93|[10|[9|[91|[45|[115|[116|[121|[108|[101|[115|[104|[101|[101|[116|[32|[67|[83|[83|[70|[105|[108|[101|[93|[10|[9|[91|[45|[99|[111|[118|[101|[114|[32|[67|[111|[118|[101|[114|[67|[102|[103|[70|[105|[108|[101|[93|[10|[9|[91|[45|[99|[111|[118|[101|[114|[95|[115|[116|[111|[112|[32|[66|[111|[111|[108|[93|[10|[9|[91|[45|[101|[118|[101|[110|[116|[95|[104|[97|[110|[100|[108|[101|[114|[32|[69|[118|[72|[97|[110|[100|[108|[101|[114|[49|[32|[69|[118|[72|[97|[110|[100|[108|[101|[114|[50|[32|[46|[46|[32|[69|[118|[72|[97|[110|[100|[108|[101|[114|[78|[93|[10|[9|[91|[45|[99|[116|[95|[104|[111|[111|[107|[115|[32|[67|[84|[72|[111|[111|[107|[49|[32|[67|[84|[72|[111|[111|[107|[50|[32|[46|[46|[32|[67|[84|[72|[111|[111|[107|[78|[93|[10|[9|[91|[45|[105|[110|[99|[108|[117|[100|[101|[32|[73|[110|[99|[108|[68|[105|[114|[49|[32|[73|[110|[99|[108|[68|[105|[114|[50|[32|[46|[46|[32|[73|[110|[99|[108|[68|[105|[114|[78|[93|[10|[9|[91|[45|[110|[111|[95|[97|[117|[116|[111|[95|[99|[111|[109|[112|[105|[108|[101|[93|[10|[9|[91|[45|[97|[98|[111|[114|[116|[95|[105|[102|[95|[109|[105|[115|[115|[105|[110|[103|[95|[115|[117|[105|[116|[101|[115|[93|[10|[9|[91|[45|[109|[117|[108|[116|[105|[112|[108|[121|[95|[116|[105|[109|[101|[116|[114|[97|[112|[115|[32|[78|[93|[10|[9|[91|[45|[115|[99|[97|[108|[101|[95|[116|[105|[109|[101|[116|[114|[97|[112|[115|[93|[10|[9|[91|[45|[99|[114|[101|[97|[116|[101|[95|[112|[114|[105|[118|[95|[100|[105|[114|[32|[97|[117|[116|[111|[95|[112|[101|[114|[95|[114|[117|[110|[32|[124|[32|[97|[117|[116|[111|[95|[112|[101|[114|[95|[116|[99|[32|[124|[32|[109|[97|[110|[117|[97|[108|[95|[112|[101|[114|[95|[116|[99|[93|[10|[9|[91|[45|[98|[97|[115|[105|[99|[95|[104|[116|[109|[108|[93|[10|[9|[91|[45|[114|[101|[112|[101|[97|[116|[32|[78|[93|[32|[124|[10|[9|[91|[45|[100|[117|[114|[97|[116|[105|[111|[110|[32|[72|[72|[77|[77|[83|[83|[32|[91|[45|[102|[111|[114|[99|[101|[95|[115|[116|[111|[112|[32|[91|[115|[107|[105|[112|[95|[114|[101|[115|[116|[93|[93|[93|[32|[124|[10|[9|[91|[45|[117|[110|[116|[105|[108|[32|[91|[89|[89|[77|[111|[77|[111|[68|[68|[93|[72|[72|[77|[77|[83|[83|[32|[91|[45|[102|[111|[114|[99|[101|[95|[115|[116|[111|[112|[32|[91|[115|[107|[105|[112|[95|[114|[101|[115|[116|[93|[93|[93|[10|
			do  %% Line 826
			    call 'io':'format'
				([82|[101|[102|[114|[101|[115|[104|[32|[116|[104|[101|[32|[72|[84|[77|[76|[32|[105|[110|[100|[101|[120|[32|[102|[105|[108|[101|[115|[58|[10|[10|[9|[99|[116|[95|[114|[117|[110|[32|[45|[114|[101|[102|[114|[101|[115|[104|[95|[108|[111|[103|[115|[32|[91|[76|[111|[103|[68|[105|[114|[93|[91|[45|[108|[111|[103|[100|[105|[114|[32|[76|[111|[103|[68|[105|[114|[93|[32|[91|[45|[98|[97|[115|[105|[99|[95|[104|[116|[109|[108|[93|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
			    %% Line 830
			    call 'io':'format'
				([82|[117|[110|[32|[67|[84|[32|[105|[110|[32|[105|[110|[116|[101|[114|[97|[99|[116|[105|[118|[101|[32|[109|[111|[100|[101|[58|[10|[10|[9|[99|[116|[95|[114|[117|[110|[32|[45|[115|[104|[101|[108|[108|[10|[9|[91|[45|[99|[111|[110|[102|[105|[103|[32|[67|[111|[110|[102|[105|[103|[70|[105|[108|[101|[49|[32|[67|[111|[110|[102|[105|[103|[70|[105|[108|[101|[50|[32|[46|[46|[32|[67|[111|[110|[102|[105|[103|[70|[105|[108|[101|[78|[93|[10|[9|[91|[45|[100|[101|[99|[114|[121|[112|[116|[95|[107|[101|[121|[32|[75|[101|[121|[93|[32|[124|[32|[91|[45|[100|[101|[99|[114|[121|[112|[116|[95|[102|[105|[108|[101|[32|[75|[101|[121|[70|[105|[108|[101|[93|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
'install'/1 =
    %% Line 838
    fun (_cor0) ->
	%% Line 839
	apply 'install'/2
	    (_cor0, [46])
'install'/2 =
    %% Line 841
    fun (_cor1,_cor0) ->
	let <ConfOpts> =
	    %% Line 843
	    call 'ct_config':'add_default_callback'
		(_cor1)
	in  do  %% Line 845
		case call 'application':'get_env'
			 ('common_test', 'decrypt') of
		  %% Line 846
		  <{'ok',_cor15}> when 'true' ->
		      'ok'
		  %% Line 848
		  <_cor16> when 'true' ->
		      %% Line 849
		      case call 'lists':'keysearch'
			       ('decrypt', 1, _cor1) of
			%% Line 850
			<{'value',{_cor17,KeyOrFile}}> when 'true' ->
			    %% Line 851
			    call 'application':'set_env'
				('common_test', 'decrypt', KeyOrFile)
			%% Line 852
			<'false'> when 'true' ->
			    %% Line 853
			    call 'application':'unset_env'
				('common_test', 'decrypt')
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor3})
			  -| ['compiler_generated'] )
		      end
		end
		%% Line 856
		case call 'erlang':'whereis'
			 ('ct_util_server') of
		  %% Line 857
		  <'undefined'> when 'true' ->
		      let <VarFile> =
			  %% Line 858
			  apply 'variables_file_name'/1
			      (_cor0)
		      in  %% Line 859
			  case call 'file':'open'
				   (VarFile, ['write']) of
			    %% Line 860
			    <{'ok',Fd}> when 'true' ->
				do  %% Line 861
				    ( letrec
					  'lc$^0'/1 =
					      fun (_cor8) ->
						  case _cor8 of
						    <[Opt|_cor7]> when 'true' ->
							do  call 'io':'format'
								(Fd, [126|[112|[46|[10]]]], [Opt|[]])
							    apply 'lc$^0'/1
								(_cor7)
						    <[]> when 'true' ->
							[]
						    ( <_cor8> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor8})
							    -| [{'function_name',{'lc$^0',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  apply 'lc$^0'/1
					      (ConfOpts)
				      -| ['list_comprehension'] )
				    do  %% Line 862
					call 'file':'close'
					    (Fd)
					%% Line 863
					'ok'
			    %% Line 864
			    <{'error',Reason}> when 'true' ->
				do  %% Line 865
				    call 'io':'format'
					([67|[84|[32|[102|[97|[105|[108|[101|[100|[32|[116|[111|[32|[105|[110|[115|[116|[97|[108|[108|[32|[99|[111|[110|[102|[105|[103|[117|[114|[97|[116|[105|[111|[110|[32|[100|[97|[116|[97|[46|[32|[80|[108|[101|[97|[115|[101|[32|[118|[101|[114|[105|[102|[121|[32|[116|[104|[97|[116|[32|[116|[104|[101|[32|[108|[111|[103|[32|[100|[105|[114|[101|[99|[116|[111|[114|[121|[32|[101|[120|[105|[115|[116|[115|[32|[97|[110|[100|[32|[116|[104|[97|[116|[32|[119|[114|[105|[116|[101|[32|[112|[101|[114|[109|[105|[115|[115|[105|[111|[110|[32|[105|[115|[32|[115|[101|[116|[46|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 867
																																																																																										      [])
				    %% Line 868
				    {'error',{VarFile,Reason}}
			    ( <_cor11> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor11})
			      -| ['compiler_generated'] )
			  end
		  %% Line 870
		  <_cor18> when 'true' ->
		      do  %% Line 871
			  call 'io':'format'
			      ([73|[116|[32|[105|[115|[32|[110|[111|[116|[32|[112|[111|[115|[115|[105|[98|[108|[101|[32|[116|[111|[32|[105|[110|[115|[116|[97|[108|[108|[32|[67|[84|[32|[119|[104|[105|[108|[101|[32|[114|[117|[110|[110|[105|[110|[103|[32|[105|[110|[32|[105|[110|[116|[101|[114|[97|[99|[116|[105|[118|[101|[32|[109|[111|[100|[101|[46|[10|[84|[111|[32|[101|[120|[105|[116|[32|[116|[104|[105|[115|[32|[109|[111|[100|[101|[44|[32|[114|[117|[110|[32|[99|[116|[58|[115|[116|[111|[112|[95|[105|[110|[116|[101|[114|[97|[99|[116|[105|[118|[101|[40|[41|[46|[10|[84|[111|[32|[101|[110|[116|[101|[114|[32|[116|[104|[101|[32|[105|[110|[116|[101|[114|[97|[99|[116|[105|[118|[101|[32|[109|[111|[100|[101|[32|[97|[103|[97|[105|[110|[44|[32|[114|[117|[110|[32|[99|[116|[58|[115|[116|[97|[114|[116|[95|[105|[110|[116|[101|[114|[97|[99|[116|[105|[118|[101|[40|[41|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 875
																																																																																																																																		       [])
			  %% Line 876
			  {'error','interactive_mode'}
		end
'variables_file_name'/1 =
    %% Line 879
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 880
	    call 'erlang':'node'
		()
	in  let <_cor2> =
		%% Line 880
		call 'erlang':'atom_to_list'
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 880
		    call 'erlang':'++'
			([118|[97|[114|[105|[97|[98|[108|[101|[115|[45]]]]]]]]]], _cor2)
		in  %% Line 880
		    call 'filename':'join'
			(_cor0, _cor3)
'run_test'/1 =
    %% Line 891
    fun (_cor0) ->
	case _cor0 of
	  <StartOpt>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      %% Line 892
	      apply 'run_test'/1
		  ([StartOpt|[]])
	  %% Line 894
	  <StartOpts>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 895
		  ( fun () ->
			apply 'run_test1'/1
			    (StartOpts)
		    -| [{'id',{0,0,'-run_test/1-fun-0-'}}] )
	      in  let <CTPid> =
		      %% Line 895
		      call 'erlang':'spawn'
			  (_cor1)
		  in  let <Ref> =
			  %% Line 896
			  call 'erlang':'monitor'
			      ('process', CTPid)
		      in  %% Line 897
			  receive
			    %% Line 898
			    <{'DOWN',_cor5,'process',_cor6,{'user_error',Error}}>
				when let <_cor7> =
				      call 'erlang':'=:='
					  (_cor5, Ref)
				  in  let <_cor8> =
					  call 'erlang':'=:='
					      (_cor6, CTPid)
				      in  call 'erlang':'and'
					      (_cor7, _cor8) ->
				%% Line 899
				{'error',Error}
			    %% Line 900
			    <{'DOWN',_cor9,'process',_cor10,Other}>
				when let <_cor11> =
				      call 'erlang':'=:='
					  (_cor9, Ref)
				  in  let <_cor12> =
					  call 'erlang':'=:='
					      (_cor10, CTPid)
				      in  call 'erlang':'and'
					      (_cor11, _cor12) ->
				%% Line 901
				Other
			  after 'infinity' ->
			    'true'
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'run_test',1}}] )
	    -| ['compiler_generated'] )
	end
'run_test1'/1 =
    %% Line 904
    fun (_cor0) ->
	case _cor0 of
	  <StartOpts>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 905
	      case call 'proplists':'get_value'
		       ('refresh_logs', StartOpts) of
		%% Line 906
		<'undefined'> when 'true' ->
		    let <Tracing> =
			%% Line 907
			apply 'start_trace'/1
			    (StartOpts)
		    in  %% Line 908
			case call 'file':'get_cwd'
				 () of
			  <{'ok',Cwd}> when 'true' ->
			      do  %% Line 909
				  call 'io':'format'
				      ([126|[110|[67|[111|[109|[109|[111|[110|[32|[84|[101|[115|[116|[32|[115|[116|[97|[114|[116|[105|[110|[103|[32|[40|[99|[119|[100|[32|[105|[115|[32|[126|[116|[115|[41|[126|[110|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Cwd|[]])
				  let <_cor6> =
				      %% Line 911
				      case call 'ct_repeat':'loop_test'
					       ('func', StartOpts) of
					%% Line 912
					<'false'> when 'true' ->
					    let <_cor3> =
						catch
						    %% Line 913
						    apply 'run_test2'/1
							(StartOpts)
					    in  %% Line 913
						case _cor3 of
						  %% Line 914
						  <{'EXIT',Reason}> when 'true' ->
						      do  %% Line 915
							  call 'file':'set_cwd'
							      (Cwd)
							  %% Line 916
							  {'error',Reason}
						  %% Line 917
						  <Result> when 'true' ->
						      %% Line 918
						      Result
						end
					%% Line 920
					<Result> when 'true' ->
					    %% Line 921
					    Result
				      end
				  in  do  %% Line 923
					  apply 'stop_trace'/1
					      (Tracing)
					  %% Line 924
					  call 'erlang':'exit'
					      (_cor6)
			  ( <_cor2> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor2})
			    -| ['compiler_generated'] )
			end
		%% Line 925
		<RefreshDir> when 'true' ->
		    let <_cor8> =
			%% Line 926
			call 'filename':'absname'
			    (RefreshDir)
		    in  do  %% Line 926
			    apply 'refresh_logs'/1
				(_cor8)
			    %% Line 927
			    call 'erlang':'exit'
				('done')
	      end
	  ( <_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10})
		  -| [{'function_name',{'run_test1',1}}] )
	    -| ['compiler_generated'] )
	end
'run_test2'/1 =
    %% Line 930
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 932
	    ( fun (_cor1) ->
		  case _cor1 of
		    <Lbl>
			when call 'erlang':'is_list'
			      (_cor1) ->
			Lbl
		    %% Line 933
		    <Lbl>
			when call 'erlang':'is_atom'
			      (_cor1) ->
			call 'erlang':'atom_to_list'
			    (Lbl)
		    ( <_cor2> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor2})
			    -| [{'function_name',{'-run_test2/1-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-run_test2/1-fun-0-'}}] )
	in  let <Label> =
		%% Line 932
		apply 'get_start_opt'/3
		    ('label', _cor3, _cor0)
	    in  let <_cor7> =
		    %% Line 936
		    ( fun (_cor5) ->
			  case _cor5 of
			    <Prof>
				when call 'erlang':'is_list'
				      (_cor5) ->
				%% Line 937
				Prof
			    %% Line 938
			    <Prof>
				when call 'erlang':'is_atom'
				      (_cor5) ->
				%% Line 939
				call 'erlang':'atom_to_list'
				    (Prof)
			    ( <_cor6> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor6})
				    -| [{'function_name',{'-run_test2/1-fun-1-',1}}] )
			      -| ['compiler_generated'] )
			  end
		      -| [{'id',{0,0,'-run_test2/1-fun-1-'}}] )
		in  let <Profile> =
			%% Line 936
			apply 'get_start_opt'/3
			    ('profile', _cor7, _cor0)
		    in  let <_cor11> =
			    %% Line 942
			    ( fun (_cor9) ->
				  case _cor9 of
				    <LD>
					when call 'erlang':'is_list'
					      (_cor9) ->
					LD
				    ( <_cor10> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor10})
					    -| [{'function_name',{'-run_test2/1-fun-2-',1}}] )
				      -| ['compiler_generated'] )
				  end
			      -| [{'id',{0,0,'-run_test2/1-fun-2-'}}] )
			in  let <LogDir> =
				%% Line 942
				apply 'get_start_opt'/3
				    ('logdir', _cor11, _cor0)
			    in  let <LogOpts> =
				    %% Line 945
				    apply 'get_start_opt'/4
					('logopts', 'value', [], _cor0)
				in  let <_cor19> =
					%% Line 950
					( fun (_cor17) ->
					      case _cor17 of
						<VLvls>
						    when call 'erlang':'is_list'
							  (_cor17) ->
						    let <_cor16> =
							%% Line 951
							( fun (_cor14) ->
							      case _cor14 of
								<VLvl = {_X_Cat,_X_Lvl}> when 'true' ->
								    %% Line 952
								    VLvl
								%% Line 953
								<Lvl> when 'true' ->
								    %% Line 954
								    {'$unspecified',Lvl}
							      end
							  -| [{'id',{0,0,'-run_test2/1-fun-3-'}}] )
						    in  %% Line 951
							call 'lists':'map'
							    (_cor16, %% Line 955
								     VLvls)
						%% Line 956
						<VLvl>
						    when call 'erlang':'is_integer'
							  (_cor17) ->
						    %% Line 957
						    [{'$unspecified',VLvl}|[]]
						( <_cor18> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor18})
							-| [{'function_name',{'-run_test2/1-fun-4-',1}}] )
						  -| ['compiler_generated'] )
					      end
					  -| [{'id',{0,0,'-run_test2/1-fun-4-'}}] )
				    in  let <Verbosity> =
					    %% Line 949
					    apply 'get_start_opt'/4
						('verbosity', _cor19, %% Line 958
								      [], _cor0)
					in  let <CfgFiles> =
						%% Line 961
						call 'ct_config':'get_config_file_list'
						    (_cor0)
					    in  let <_cor33> =
						    %% Line 965
						    case call 'proplists':'get_value'
							     ('event_handler', _cor0) of
						      %% Line 966
						      <'undefined'> when 'true' ->
							  %% Line 967
							  []
						      %% Line 968
						      <H>
							  when call 'erlang':'is_atom'
								(H) ->
							  %% Line 969
							  [{H,[]}|[]]
						      %% Line 970
						      <H> when 'true' ->
							  let <_cor22> =
							      %% Line 972
							      case <> of
								<>
								    when call 'erlang':'is_tuple'
									  (H) ->
								    [H|[]]
								%% Line 973
								<>
								    when call 'erlang':'is_list'
									  (H) ->
								    H
								%% Line 974
								<> when 'true' ->
								    []
							      end
							  in  let <_cor30> =
								  %% Line 977
								  ( fun (_cor28) ->
									case _cor28 of
									  <EH>
									      when call 'erlang':'is_atom'
										    (_cor28) ->
									      %% Line 978
									      {EH,[]}
									  %% Line 979
									  <{HL,Args}>
									      when call 'erlang':'is_list'
										    (HL) ->
									      %% Line 980
									      ( letrec
										    'lc$^0'/1 =
											fun (_cor26) ->
											    case _cor26 of
											      <[EH|_cor25]> when 'true' ->
												  let <_cor27> =
												      apply 'lc$^0'/1
													  (_cor25)
												  in  ( [{EH,Args}|_cor27]
													-| ['compiler_generated'] )
											      <[]> when 'true' ->
												  []
											      ( <_cor26> when 'true' ->
												    ( primop 'match_fail'
													  ({'function_clause',_cor26})
												      -| [{'function_name',{'lc$^0',1}}] )
												-| ['compiler_generated'] )
											    end
										in  apply 'lc$^0'/1
											(HL)
										-| ['list_comprehension'] )
									  %% Line 981
									  <{EH,Args}>
									      when call 'erlang':'is_atom'
										    (EH) ->
									      %% Line 982
									      {EH,Args}
									  %% Line 983
									  <_cor87> when 'true' ->
									      %% Line 984
									      []
									end
								    -| [{'id',{0,0,'-run_test2/1-fun-5-'}}] )
							      in  let <_cor31> =
								      %% Line 977
								      call 'lists':'map'
									  (_cor30, _cor22)
								  in  %% Line 976
								      call 'lists':'flatten'
									  (_cor31)
						    end
						in  let <CTHooks> =
							%% Line 989
							apply 'get_start_opt'/4
							    ('ct_hooks', 'value', [], _cor0)
						    in  let <_cor40> =
							    %% Line 991
							    ( fun (_cor38) ->
								  case _cor38 of
								    <EBH>
									when let <_cor36> =
									      call 'erlang':'=:='
										  (_cor38, 'true')
									  in  let <_cor37> =
										  %% Line 992
										  call 'erlang':'=:='
										      (_cor38, 'false')
									      in  call 'erlang':'or'
										      (_cor36, _cor37) ->
									%% Line 993
									EBH
								    ( <_cor39> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_cor39})
									    -| [{'function_name',{'-run_test2/1-fun-6-',1}}] )
								      -| ['compiler_generated'] )
								  end
							      -| [{'id',{0,0,'-run_test2/1-fun-6-'}}] )
							in  let <EnableBuiltinHooks> =
								%% Line 990
								apply 'get_start_opt'/4
								    ('enable_builtin_hooks', _cor40, %% Line 994
												     'undefined', _cor0)
							    in  let <_cor44> =
								    %% Line 998
								    ( fun (_cor42) ->
									  case _cor42 of
									    <'all'> when 'true' ->
										['all']
									    %% Line 999
									    <Conns> when 'true' ->
										Conns
									  end
								      -| [{'id',{0,0,'-run_test2/1-fun-7-'}}] )
								in  let <SilentConns> =
									%% Line 997
									apply 'get_start_opt'/4
									    ('silent_connections', _cor44, %% Line 1000
													   [], _cor0)
								    in  let <_cor48> =
									    %% Line 1003
									    ( fun (_cor46) ->
										  call 'filename':'absname'
										      (_cor46)
									      -| [{'id',{0,0,'-run_test2/1-fun-8-'}}] )
									in  let <Stylesheet> =
										%% Line 1002
										apply 'get_start_opt'/3
										    ('stylesheet', _cor48, _cor0)
									    in  let <_cor52> =
										    %% Line 1007
										    ( fun (_cor50) ->
											  call 'filename':'absname'
											      (_cor50)
										      -| [{'id',{0,0,'-run_test2/1-fun-9-'}}] )
										in  let <Cover> =
											%% Line 1006
											apply 'get_start_opt'/3
											    ('cover', _cor52, _cor0)
										    in  let <CoverStop> =
											    %% Line 1008
											    apply 'get_start_opt'/3
												('cover_stop', 'value', _cor0)
											in  let <MultiplyTT> =
												%% Line 1011
												apply 'get_start_opt'/4
												    ('multiply_timetraps', 'value', 1, _cor0)
											    in  let <ScaleTT> =
												    %% Line 1012
												    apply 'get_start_opt'/4
													('scale_timetraps', 'value', 'false', _cor0)
												in  let <CreatePrivDir> =
													%% Line 1015
													apply 'get_start_opt'/3
													    ('create_priv_dir', 'value', _cor0)
												    in  let <AutoCompile,Include> =
													    %% Line 1019
													    case call 'proplists':'get_value'
														     ('auto_compile', _cor0) of
													      %% Line 1020
													      <'undefined'> when 'true' ->
														  do  %% Line 1021
														      call 'application':'set_env'
															  ('common_test', 'auto_compile', 'true')
														      let <_cor60> =
															  %% Line 1023
															  case call 'proplists':'get_value'
																   ('include', _cor0) of
															    %% Line 1024
															    <'undefined'> when 'true' ->
																%% Line 1025
																[]
															    %% Line 1026
															    <Incl>
																when try
																      let <_cor58> =
																	  call 'erlang':'hd'
																	      (Incl)
																      in  call 'erlang':'is_list'
																	      (_cor58)
																  of <Try> ->
																      Try
																  catch <T,R> ->
																      'false' ->
																%% Line 1027
																Incl
															    %% Line 1028
															    <Incl>
																when call 'erlang':'is_list'
																      (Incl) ->
																%% Line 1029
																[Incl|[]]
															    ( <_cor59> when 'true' ->
																  primop 'match_fail'
																      ({'case_clause',_cor59})
															      -| ['compiler_generated'] )
															  end
														      in  %% Line 1031
															  case call 'os':'getenv'
																   ([67|[84|[95|[73|[78|[67|[76|[85|[68|[69|[95|[80|[65|[84|[72]]]]]]]]]]]]]]]) of
															    %% Line 1032
															    <'false'> when 'true' ->
																do  %% Line 1033
																    call 'application':'set_env'
																	('common_test', 'include', _cor60)
																    %% Line 1034
																    <'undefined',_cor60>
															    %% Line 1035
															    <CtInclPath> when 'true' ->
																let <InclDirs1> =
																    %% Line 1036
																    call 'string':'tokens'
																	(CtInclPath, [58|[32|[44]]])
																in  let <AllInclDirs> =
																	%% Line 1037
																	call 'erlang':'++'
																	    (InclDirs1, _cor60)
																    in  do  %% Line 1038
																	    call 'application':'set_env'
																		('common_test', 'include', AllInclDirs)
																	    %% Line 1039
																	    <'undefined',AllInclDirs>
															  end
													      %% Line 1041
													      <ACBool> when 'true' ->
														  do  %% Line 1042
														      call 'application':'set_env'
															  ('common_test', 'auto_compile', ACBool)
														      %% Line 1043
														      <ACBool,[]>
													    end
													in  let <AbortIfMissing> =
														%% Line 1047
														apply 'get_start_opt'/4
														    ('abort_if_missing_suites', 'value', 'false', _cor0)
													    in  do  %% Line 1051
														    case call 'proplists':'get_value'
															     ('decrypt', _cor0) of
														      %% Line 1052
														      <'undefined'> when 'true' ->
															  %% Line 1053
															  call 'application':'unset_env'
															      ('common_test', 'decrypt')
														      %% Line 1054
														      <Key = {'key',_cor88}> when 'true' ->
															  %% Line 1055
															  call 'application':'set_env'
															      ('common_test', 'decrypt', Key)
														      %% Line 1056
														      <{'file',KeyFile}> when 'true' ->
															  let <_cor69> =
															      %% Line 1057
															      call 'filename':'absname'
																  (KeyFile)
															  in  %% Line 1057
															      call 'application':'set_env'
																  ('common_test', 'decrypt', {'file',_cor69})
														      ( <_cor70> when 'true' ->
															    primop 'match_fail'
																({'case_clause',_cor70})
															-| ['compiler_generated'] )
														    end
														    let <_cor72> =
															%% Line 1062
															case call 'proplists':'get_value'
																 ('basic_html', _cor0) of
															  %% Line 1063
															  <'undefined'> when 'true' ->
															      do  %% Line 1064
																  call 'application':'set_env'
																      ('common_test', 'basic_html', 'false')
																  %% Line 1065
																  'undefined'
															  %% Line 1066
															  <BasicHtmlBool> when 'true' ->
															      do  %% Line 1067
																  call 'application':'set_env'
																      ('common_test', 'basic_html', BasicHtmlBool)
																  %% Line 1068
																  BasicHtmlBool
															end
														    in  do  %% Line 1071
															    case call 'proplists':'get_value'
																     ('disable_log_cache', _cor0) of
															      %% Line 1072
															      <'undefined'> when 'true' ->
																  %% Line 1073
																  call 'application':'set_env'
																      ('common_test', 'disable_log_cache', 'false')
															      %% Line 1074
															      <DisableCacheBool> when 'true' ->
																  %% Line 1075
																  call 'application':'set_env'
																      ('common_test', 'disable_log_cache', DisableCacheBool)
															    end
															    let <Step> =
																%% Line 1079
																apply 'get_start_opt'/3
																    ('step', 'value', _cor0)
															    in  let <Opts> =
																    %% Line 1081
																    {'opts',Label,Profile,'undefined','undefined',%% Line 1082
																						  Cover,%% Line 1082
																							CoverStop,'undefined',%% Line 1083
																									      Step,%% Line 1083
																										   LogDir,%% Line 1084
																											  LogOpts,_cor72,%% Line 1086
																													 Verbosity,%% Line 1085
																														   CfgFiles,_cor33,%% Line 1088
																																   CTHooks,%% Line 1089
																																	   EnableBuiltinHooks,%% Line 1092
																																			      Include,%% Line 1090
																																				      AutoCompile,%% Line 1091
																																						  AbortIfMissing,%% Line 1093
																																								 SilentConns,%% Line 1094
																																									     Stylesheet,%% Line 1095
																																											MultiplyTT,%% Line 1096
																																												   ScaleTT,%% Line 1097
																																													   CreatePrivDir,[],'undefined',%% Line 1098
																																																	'ct'}
																in  %% Line 1101
																    case call 'proplists':'get_value'
																	     ('spec', _cor0) of
																      %% Line 1102
																      <'undefined'> when 'true' ->
																	  %% Line 1103
																	  case call 'lists':'keysearch'
																		   ('prepared_tests', 1, _cor0) of
																	    %% Line 1104
																	    <{'value',{_cor89,{Run,Skip},Specs}}> when 'true' ->
																		%% Line 1105
																		case Opts of
																		  <{'opts',_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116}> when 'true' ->
																		      let <_cor79> =
																			  call 'erlang':'setelement'
																			      (26, Opts, Specs)
																		      in  apply 'run_prepared'/4
																			      (Run, Skip, _cor79, _cor0)
																		  ( <_cor117> when 'true' ->
																			( call ( 'erlang'
																				 -| ['compiler_generated'] ):( 'error'
																							       -| ['compiler_generated'] )
																			      (( {'badrecord','opts'}
																				 -| ['compiler_generated'] ))
																			  -| ['compiler_generated'] )
																		    -| ['compiler_generated'] )
																		end
																	    %% Line 1107
																	    <'false'> when 'true' ->
																		%% Line 1108
																		apply 'run_dir'/2
																		    (Opts, _cor0)
																	    ( <_cor80> when 'true' ->
																		  primop 'match_fail'
																		      ({'case_clause',_cor80})
																	      -| ['compiler_generated'] )
																	  end
																      %% Line 1110
																      <Specs> when 'true' ->
																	  let <Relaxed> =
																	      %% Line 1111
																	      apply 'get_start_opt'/4
																		  ('allow_user_terms', 'value', 'false', _cor0)
																	  in  %% Line 1113
																	      case Opts of
																		<{'opts',_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,_cor133,_cor134,_cor135,_cor136,_cor137,_cor138,_cor139,_cor140,_cor141,_cor142,_cor143,_cor144}> when 'true' ->
																		    let <_cor84> =
																			call 'erlang':'setelement'
																			    (26, Opts, Specs)
																		    in  apply 'run_spec_file'/3
																			    (Relaxed, _cor84, _cor0)
																		( <_cor145> when 'true' ->
																		      ( call ( 'erlang'
																			       -| ['compiler_generated'] ):( 'error'
																							     -| ['compiler_generated'] )
																			    (( {'badrecord','opts'}
																			       -| ['compiler_generated'] ))
																			-| ['compiler_generated'] )
																		  -| ['compiler_generated'] )
																	      end
																    end
'run_spec_file'/3 =
    %% Line 1116
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Relaxed,Opts = %% Line 1117
			  {'opts',_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,Specs,_cor43,_cor44},%% Line 1118
																											       StartOpts> when 'true' ->
	      let <_cor4> =
		  %% Line 1119
		  case Specs of
		    %% Line 1120
		    <[X|_cor45]>
			when call 'erlang':'is_integer'
			      (X) ->
			[Specs|[]]
		    %% Line 1121
		    <_cor46> when 'true' ->
			Specs
		  end
	      in  let <_cor8> =
		      %% Line 1123
		      ( fun (_cor6) ->
			    call 'filename':'absname'
				(_cor6)
			-| [{'id',{0,0,'-run_spec_file/3-fun-0-'}}] )
		  in  let <AbsSpecs> =
			  %% Line 1123
			  call 'lists':'map'
			      (_cor8, _cor4)
		      in  let <AbsSpecs1> =
			      %% Line 1124
			      apply 'get_start_opt'/4
				  ('join_specs', [AbsSpecs|[]], AbsSpecs, StartOpts)
			  in  let <_cor11> =
				  catch
				      %% Line 1125
				      call 'ct_testspec':'collect_tests_from_file'
					  (AbsSpecs1, Relaxed)
			      in  %% Line 1125
				  case _cor11 of
				    %% Line 1126
				    <{Error,CTReason}>
					when let <_cor12> =
					      call 'erlang':'=:='
						  (Error, 'error')
					  in  let <_cor13> =
						  call 'erlang':'=:='
						      (Error, 'EXIT')
					      in  call 'erlang':'or'
						      (_cor12, _cor13) ->
					let <StackTrace> =
					    %% Line 1127
					    call 'erlang':'get_stacktrace'
						()
					in  %% Line 1128
					    call 'erlang':'exit'
						({'error',{'invalid_testspec',{CTReason,StackTrace}}})
				    %% Line 1129
				    <TestSpecData> when 'true' ->
					%% Line 1130
					apply 'run_all_specs'/4
					    (TestSpecData, Opts, StartOpts, [])
				  end
	  ( <_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16})
		  -| [{'function_name',{'run_spec_file',3}}] )
	    -| ['compiler_generated'] )
	end
'run_all_specs'/4 =
    %% Line 1133
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_cor32,_cor33,TotResult> when 'true' ->
	      let <TotResult1> =
		  %% Line 1134
		  call 'lists':'reverse'
		      (TotResult)
	      in  %% Line 1135
		  case call 'lists':'keysearch'
			   ('EXIT', 1, TotResult1) of
		    %% Line 1136
		    <{'value',{_cor34,_cor35,ExitReason}}> when 'true' ->
			%% Line 1137
			call 'erlang':'exit'
			    (ExitReason)
		    %% Line 1138
		    <'false'> when 'true' ->
			%% Line 1139
			case call 'lists':'keysearch'
				 ('error', 1, TotResult1) of
			  %% Line 1140
			  <{'value',Error}> when 'true' ->
			      %% Line 1141
			      Error
			  %% Line 1142
			  <'false'> when 'true' ->
			      let <_cor13> =
				  %% Line 1143
				  ( fun (_cor10,_cor9) ->
					case <_cor10,_cor9> of
					  <{Ok,Fail,{UserSkip,AutoSkip}},%% Line 1144
									 {Ok1,Fail1,{UserSkip1,AutoSkip1}}> when 'true' ->
					      let <_cor8> =
						  %% Line 1145
						  call 'erlang':'+'
						      (Ok1, Ok)
					      in  let <_cor7> =
						      %% Line 1145
						      call 'erlang':'+'
							  (Fail1, Fail)
						  in  let <_cor6> =
							  %% Line 1146
							  call 'erlang':'+'
							      (UserSkip1, UserSkip)
						      in  let <_cor5> =
							      %% Line 1147
							      call 'erlang':'+'
								  (AutoSkip1, AutoSkip)
							  in  %% Line 1145
							      {_cor8,_cor7,%% Line 1146
									   {_cor6,_cor5}}
					  ( <_cor12,_cor11> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor12,_cor11})
						  -| [{'function_name',{'-run_all_specs/4-fun-0-',2}}] )
					    -| ['compiler_generated'] )
					end
				    -| [{'id',{0,0,'-run_all_specs/4-fun-0-'}}] )
			      in  %% Line 1143
				  call 'lists':'foldl'
				      (_cor13, %% Line 1148
					       {0,0,{0,0}}, %% Line 1148
							    TotResult1)
			  ( <_cor14> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor14})
			    -| ['compiler_generated'] )
			end
		    ( <_cor15> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor15})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1152
	  <[{Specs,TS}|TSs],Opts,StartOpts,TotResult> when 'true' ->
	      do  %% Line 1153
		  apply 'log_ts_names'/1
		      (Specs)
		  %% Line 1154
		  case apply 'combine_test_opts'/3
			   (TS, Specs, Opts) of
		    <Combined = {'opts',_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,TSConfig,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61}> when 'true' ->
			%% Line 1155
			( case Opts of
			    ( <( {'opts',_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_rec86,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <AllConfig> =
				      apply 'merge_vals'/1
					  ([_rec86|[TSConfig|[]]])
				  in  %% Line 1156
				      try
					  let <_cor22> =
					      call 'erlang':'setelement'
						  (14, Combined, AllConfig)
					  in  apply 'run_one_spec'/3
						  (TS, _cor22, StartOpts)
				      of <_cor23> ->
					  %% Line 1158
					  apply 'run_all_specs'/4
					      (TSs, Opts, StartOpts, [_cor23|TotResult])
				      catch <_cor27,_cor26,_cor25> ->
					  %% Line 1161
					  apply 'run_all_specs'/4
					      (TSs, Opts, StartOpts, [{'error',_cor26}|TotResult])
			      -| ['compiler_generated'] )
			    ( <_cor88> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','opts'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor16> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor16})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor31,_cor30,_cor29,_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor31,_cor30,_cor29,_cor28})
		  -| [{'function_name',{'run_all_specs',4}}] )
	    -| ['compiler_generated'] )
	end
'run_one_spec'/3 =
    %% Line 1164
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1165
	case _cor1 of
	  <{'opts',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,Logdir,_cor19,_cor20,_cor21,Config,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35}> when 'true' ->
	      %% Line 1166
	      case apply 'check_and_install_configfiles'/3
		       (Config, Logdir, _cor1) of
		%% Line 1167
		<'ok'> when 'true' ->
		    let <_cor4> =
			%% Line 1168
			call 'erlang':'node'
			    ()
		    in  %% Line 1168
			case call 'ct_testspec':'prepare_tests'
				 (_cor2, _cor4) of
			  <{Run,Skip}> when 'true' ->
			      let <_cor6> =
				  catch
				      %% Line 1169
				      apply 'do_run'/4
					  (Run, Skip, _cor1, _cor0)
			      in  %% Line 1169
				  apply 'reformat_result'/1
				      (_cor6)
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor5})
			    -| ['compiler_generated'] )
			end
		%% Line 1170
		<Error> when 'true' ->
		    %% Line 1171
		    Error
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'run_prepared'/4 =
    %% Line 1174
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Run,Skip,Opts = {'opts',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,LogDir,_cor22,_cor23,_cor24,%% Line 1175
														       CfgFiles,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38},%% Line 1176
																												   StartOpts> when 'true' ->
	      let <LogDir1> =
		  %% Line 1177
		  apply 'which'/2
		      ('logdir', LogDir)
	      in  %% Line 1178
		  case apply 'check_and_install_configfiles'/3
			   (CfgFiles, LogDir1, Opts) of
		    %% Line 1179
		    <'ok'> when 'true' ->
			let <_cor8> =
			    catch
				let <_cor7> =
				    %% Line 1180
				    call 'erlang':'setelement'
					(10, Opts, LogDir1)
				in  %% Line 1180
				    apply 'do_run'/4
					(Run, Skip, _cor7, %% Line 1181
							   StartOpts)
			in  %% Line 1180
			    apply 'reformat_result'/1
				(_cor8)
		    %% Line 1182
		    <Error = {'error',_X_Reason}> when 'true' ->
			%% Line 1183
			call 'erlang':'exit'
			    (Error)
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor9})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'run_prepared',4}}] )
	    -| ['compiler_generated'] )
	end
'check_config_file'/2 =
    %% Line 1186
    fun (_cor1,_cor0) ->
	do  %% Line 1187
	    case call 'code':'is_loaded'
		     (_cor1) of
	      %% Line 1188
	      <'false'> when 'true' ->
		  %% Line 1189
		  case call 'code':'load_file'
			   (_cor1) of
		    %% Line 1190
		    <{'module',_cor8}> when 'true' ->
			'ok'
		    %% Line 1191
		    <{'error',Why}> when 'true' ->
			call 'erlang':'exit'
			    ({'error',{'cant_load_callback_module',Why}})
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	      %% Line 1193
	      <_cor9> when 'true' ->
		  'ok'
	    end
	    %% Line 1196
	    case call _cor1:'check_parameter'
		     (_cor0) of
	      %% Line 1197
	      <{'ok',{'file',_cor10}}>
		  when call 'erlang':'=:='
			(_cor10,
			 _cor0) ->
		  %% Line 1198
		  call 'filename':'absname'
		      (_cor0)
	      %% Line 1199
	      <{'ok',{'config',_cor11}}> when 'true' ->
		  _cor0
	      %% Line 1201
	      <{'error',{'wrong_config',Message}}> when 'true' ->
		  %% Line 1202
		  call 'erlang':'exit'
		      ({'error',{'wrong_config',{_cor1,Message}}})
	      %% Line 1203
	      <{'error',{'nofile',_cor12}}>
		  when call 'erlang':'=:='
			(_cor12,
			 _cor0) ->
		  let <_cor4> =
		      %% Line 1204
		      call 'filename':'absname'
			  (_cor0)
		  in  %% Line 1204
		      call 'erlang':'exit'
			  ({'error',{'no_such_file',_cor4}})
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor5})
		-| ['compiler_generated'] )
	    end
'run_dir'/2 =
    %% Line 1207
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Opts = {'opts',_cor135,_cor136,_cor137,_cor138,_cor139,_cor140,_cor141,_cor142,LogDir,_cor143,_cor144,_cor145,%% Line 1208
															 CfgFiles,%% Line 1209
																  EvHandlers,%% Line 1210
																	     CTHook,%% Line 1211
																		    EnableBuiltinHooks,_cor146,_cor147,_cor148,_cor149,_cor150,_cor151,_cor152,_cor153,_cor154,_cor155,_cor156},%% Line 1212
																																StartOpts> when 'true' ->
	      let <LogDir1> =
		  %% Line 1213
		  apply 'which'/2
		      ('logdir', LogDir)
	      in  let <_cor5> =
		      %% Line 1214
		      call 'erlang':'setelement'
			  (10, Opts, LogDir1)
		  in  let <_cor15> =
			  %% Line 1216
			  ( fun (_cor13) ->
				case _cor13 of
				  <{Callback,FileList}> when 'true' ->
				      do  %% Line 1217
					  case call 'code':'is_loaded'
						   (Callback) of
					    %% Line 1218
					    <{'file',_X_Path}> when 'true' ->
						'ok'
					    %% Line 1220
					    <'false'> when 'true' ->
						%% Line 1221
						case call 'code':'load_file'
							 (Callback) of
						  %% Line 1222
						  <{'module',_cor185}>
						      when call 'erlang':'=:='
							    (_cor185,
							     Callback) ->
						      'ok'
						  %% Line 1224
						  <{'error',_cor186}> when 'true' ->
						      %% Line 1225
						      call 'erlang':'exit'
							  ({'error',{'no_such_module',%% Line 1226
										      Callback}})
						  ( <_cor7> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor7})
						    -| ['compiler_generated'] )
						end
					    ( <_cor8> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor8})
					      -| ['compiler_generated'] )
					  end
					  let <_cor11> =
					      %% Line 1230
					      ( fun (_cor9) ->
						    %% Line 1231
						    apply 'check_config_file'/2
							(Callback, _cor9)
						-| [{'id',{0,0,'-run_dir/2-fun-0-'}}] )
					  in  let <_cor12> =
						  %% Line 1230
						  call 'lists':'map'
						      (_cor11, %% Line 1232
							       FileList)
					      in  %% Line 1229
						  {Callback,_cor12}
				  ( <_cor14> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor14})
					  -| [{'function_name',{'-run_dir/2-fun-1-',1}}] )
				    -| ['compiler_generated'] )
				end
			    -| [{'id',{0,0,'-run_dir/2-fun-1-'}}] )
		      in  let <AbsCfgFiles> =
			      %% Line 1216
			      call 'lists':'map'
				  (_cor15, %% Line 1233
					   CfgFiles)
			  in  do  %% Line 1234
				  case apply 'install'/2
					   ([{'config',AbsCfgFiles}|%% Line 1235
								    [{'event_handler',EvHandlers}|%% Line 1236
												  [{'ct_hooks',CTHook}|%% Line 1237
														       [{'enable_builtin_hooks',EnableBuiltinHooks}|[]]]]], %% Line 1237
																					    LogDir1) of
				    %% Line 1238
				    <'ok'> when 'true' ->
					'ok'
				    %% Line 1239
				    <IError = {'error',_X_IReason}> when 'true' ->
					call 'erlang':'exit'
					    (IError)
				    ( <_cor17> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor17})
				      -| ['compiler_generated'] )
				  end
				  let <_cor22> =
				      %% Line 1241
				      call 'proplists':'get_value'
					  ('dir', StartOpts)
				  in  let <_cor21> =
					  %% Line 1242
					  call 'proplists':'get_value'
					      ('suite', StartOpts)
				      in  let <_cor19> =
					      %% Line 1243
					      call 'proplists':'get_value'
						  ('group', StartOpts)
					  in  let <_cor18> =
						  %% Line 1244
						  call 'proplists':'get_value'
						      ('testcase', StartOpts)
					      in  let <_cor20> =
						      %% Line 1243
						      apply 'groups_and_cases'/2
							  (_cor19, _cor18)
						  in  %% Line 1241
						      case <_cor22,_cor21,_cor20> of
							%% Line 1246
							<_cor187,_cor188,Error = {'error',_cor189}> when 'true' ->
							    %% Line 1247
							    Error
							%% Line 1248
							<_cor190,[],_cor191> when 'true' ->
							    %% Line 1249
							    {'error','no_suite_specified'}
							%% Line 1250
							<[],_cor192,_cor193> when 'true' ->
							    %% Line 1251
							    {'error','no_dir_specified'}
							%% Line 1253
							<Dirs = [Hd|_cor194],'undefined',[]>
							    when try
								  let <_cor23> =
								      call 'erlang':'is_list'
									  (Dirs)
								  in  let <_cor24> =
									  call 'erlang':'is_integer'
									      (Hd)
								      in  let <_cor25> =
									      call 'erlang':'not'
										  (_cor24)
									  in  call 'erlang':'and'
										  (_cor23, _cor25)
							      of <Try> ->
								  Try
							      catch <T,R> ->
								  'false' ->
							    let <_cor31> =
								%% Line 1254
								( letrec
								      'lc$^0'/1 =
									  fun (_cor28) ->
									      case _cor28 of
										<[%% Line 1255
										  D|_cor27]> when 'true' ->
										    let <_cor29> =
											case <> of
											  <>
											      when call 'erlang':'is_atom'
												    (D) ->
											      call 'erlang':'atom_to_list'
												  (D)
											  %% Line 1255
											  <> when 'true' ->
											      D
											end
										    in  let <_cor30> =
											    %% Line 1255
											    apply 'lc$^0'/1
												(_cor27)
											in  ( [_cor29|_cor30]
											      -| ['compiler_generated'] )
										<[]> when 'true' ->
										    []
										( <_cor28> when 'true' ->
										      ( primop 'match_fail'
											    ({'function_clause',_cor28})
											-| [{'function_name',{'lc$^0',1}}] )
										  -| ['compiler_generated'] )
									      end
								  in  apply 'lc$^0'/1
									  (%% Line 1255
									   Dirs)
								  -| ['list_comprehension'] )
							    in  let <_cor34> =
								    catch
									let <_cor33> =
									    %% Line 1256
									    apply 'tests'/1
										(_cor31)
									in  %% Line 1256
									    apply 'do_run'/4
										(_cor33, [], _cor5, StartOpts)
								in  %% Line 1256
								    apply 'reformat_result'/1
									(_cor34)
							%% Line 1258
							<Dir = [Hd|_cor195],'undefined',[]>
							    when let <_cor35> =
								  call 'erlang':'is_list'
								      (Dir)
							      in  let <_cor36> =
								      call 'erlang':'is_integer'
									  (Hd)
								  in  call 'erlang':'and'
									  (_cor35, _cor36) ->
							    let <_cor38> =
								catch
								    let <_cor37> =
									%% Line 1259
									apply 'tests'/1
									    (Dir)
								    in  %% Line 1259
									apply 'do_run'/4
									    (_cor37, [], _cor5, StartOpts)
							    in  %% Line 1259
								apply 'reformat_result'/1
								    (_cor38)
							%% Line 1261
							<Dir,'undefined',[]>
							    when let <_cor39> =
								  call 'erlang':'is_atom'
								      (Dir)
							      in  let <_cor40> =
								      call 'erlang':'=/='
									  (Dir, 'undefined')
								  in  call 'erlang':'and'
									  (_cor39, _cor40) ->
							    let <_cor43> =
								catch
								    let <_cor41> =
									%% Line 1262
									call 'erlang':'atom_to_list'
									    (Dir)
								    in  let <_cor42> =
									    %% Line 1262
									    apply 'tests'/1
										(_cor41)
									in  %% Line 1262
									    apply 'do_run'/4
										(_cor42, %% Line 1263
											 [], _cor5, %% Line 1263
												    StartOpts)
							    in  %% Line 1262
								apply 'reformat_result'/1
								    (_cor43)
							%% Line 1265
							<'undefined',Suites = [Hd|_cor196],[]>
							    when let <_cor44> =
								  call 'erlang':'is_integer'
								      (Hd)
							      in  call 'erlang':'not'
								      (_cor44) ->
							    let <_cor50> =
								%% Line 1266
								( letrec
								      'lc$^1'/1 =
									  fun (_cor47) ->
									      case _cor47 of
										<[S|_cor46]> when 'true' ->
										    let <_cor48> =
											apply 'suite_to_test'/1
											    (S)
										    in  let <_cor49> =
											    apply 'lc$^1'/1
												(_cor46)
											in  ( [_cor48|_cor49]
											      -| ['compiler_generated'] )
										<[]> when 'true' ->
										    []
										( <_cor47> when 'true' ->
										      ( primop 'match_fail'
											    ({'function_clause',_cor47})
											-| [{'function_name',{'lc$^1',1}}] )
										  -| ['compiler_generated'] )
									      end
								  in  apply 'lc$^1'/1
									  (Suites)
								  -| ['list_comprehension'] )
							    in  let <_cor53> =
								    catch
									let <_cor52> =
									    %% Line 1267
									    apply 'tests'/1
										(_cor50)
									in  %% Line 1267
									    apply 'do_run'/4
										(_cor52, [], _cor5, StartOpts)
								in  %% Line 1267
								    apply 'reformat_result'/1
									(_cor53)
							%% Line 1269
							<'undefined',Suite,[]>
							    when let <_cor54> =
								  call 'erlang':'is_atom'
								      (Suite)
							      in  let <_cor55> =
								      %% Line 1270
								      call 'erlang':'=/='
									  (Suite, 'undefined')
								  in  call 'erlang':'and'
									  (_cor54, _cor55) ->
							    %% Line 1271
							    case apply 'suite_to_test'/1
								     (Suite) of
							      <{Dir,Mod}> when 'true' ->
								  let <_cor58> =
								      catch
									  let <_cor57> =
									      %% Line 1272
									      apply 'tests'/2
										  (Dir, Mod)
									  in  %% Line 1272
									      apply 'do_run'/4
										  (_cor57, [], _cor5, StartOpts)
								  in  %% Line 1272
								      apply 'reformat_result'/1
									  (_cor58)
							      ( <_cor56> when 'true' ->
								    primop 'match_fail'
									({'badmatch',_cor56})
								-| ['compiler_generated'] )
							    end
							%% Line 1274
							<'undefined',Suite,GsAndCs>
							    when let <_cor59> =
								  call 'erlang':'is_atom'
								      (Suite)
							      in  let <_cor60> =
								      %% Line 1275
								      call 'erlang':'=/='
									  (Suite, 'undefined')
								  in  call 'erlang':'and'
									  (_cor59, _cor60) ->
							    %% Line 1276
							    case apply 'suite_to_test'/1
								     (Suite) of
							      <{Dir,Mod}> when 'true' ->
								  let <_cor63> =
								      catch
									  let <_cor62> =
									      %% Line 1277
									      apply 'tests'/3
										  (Dir, Mod, GsAndCs)
									  in  %% Line 1277
									      apply 'do_run'/4
										  (_cor62, %% Line 1278
											   [], _cor5, %% Line 1278
												      StartOpts)
								  in  %% Line 1277
								      apply 'reformat_result'/1
									  (_cor63)
							      ( <_cor61> when 'true' ->
								    primop 'match_fail'
									({'badmatch',_cor61})
								-| ['compiler_generated'] )
							    end
							%% Line 1280
							<'undefined',[Hd|[_cor197|_cor198]],_X_GsAndCs>
							    when let <_cor64> =
								  call 'erlang':'is_integer'
								      (Hd)
							      in  call 'erlang':'not'
								      (_cor64) ->
							    %% Line 1281
							    call 'erlang':'exit'
								({'error','multiple_suites_and_cases'})
							%% Line 1283
							<'undefined',Suite = [Hd|Tl],GsAndCs>
							    when let <_cor65> =
								  call 'erlang':'is_integer'
								      (Hd)
							      in  let <_cor66> =
								      %% Line 1284
								      call 'erlang':'is_list'
									  (Hd)
								  in  let <_cor67> =
									  %% Line 1284
									  call 'erlang':'=:='
									      (Tl, [])
								      in  let <_cor68> =
									      %% Line 1284
									      call 'erlang':'and'
										  (_cor66, _cor67)
									  in  let <_cor69> =
										  %% Line 1285
										  call 'erlang':'is_atom'
										      (Hd)
									      in  let <_cor70> =
										      %% Line 1285
										      call 'erlang':'=:='
											  (Tl, [])
										  in  let <_cor71> =
											  %% Line 1285
											  call 'erlang':'and'
											      (_cor69, _cor70)
										      in  let <_cor72> =
											      %% Line 1284
											      call 'erlang':'or'
												  (_cor68, _cor71)
											  in  call 'erlang':'or'
												  (_cor65, _cor72) ->
							    %% Line 1286
							    case apply 'suite_to_test'/1
								     (Suite) of
							      <{Dir,Mod}> when 'true' ->
								  let <_cor75> =
								      catch
									  let <_cor74> =
									      %% Line 1287
									      apply 'tests'/3
										  (Dir, Mod, GsAndCs)
									  in  %% Line 1287
									      apply 'do_run'/4
										  (_cor74, %% Line 1288
											   [], _cor5, %% Line 1288
												      StartOpts)
								  in  %% Line 1287
								      apply 'reformat_result'/1
									  (_cor75)
							      ( <_cor73> when 'true' ->
								    primop 'match_fail'
									({'badmatch',_cor73})
								-| ['compiler_generated'] )
							    end
							%% Line 1290
							<[Hd|[_cor199|_cor200]],_X_Suites,[]>
							    when let <_cor76> =
								  call 'erlang':'is_list'
								      (Hd)
							      in  let <_cor77> =
								      call 'erlang':'is_integer'
									  (Hd)
								  in  let <_cor78> =
									  call 'erlang':'not'
									      (_cor77)
								      in  call 'erlang':'or'
									      (_cor76, _cor78) ->
							    %% Line 1291
							    call 'erlang':'exit'
								({'error','multiple_dirs_and_suites'})
							%% Line 1293
							<'undefined','undefined',GsAndCs>
							    when call 'erlang':'=/='
								  (GsAndCs,
								   []) ->
							    %% Line 1294
							    call 'erlang':'exit'
								({'error','incorrect_start_options'})
							%% Line 1296
							<Dir,Suite,GsAndCs>
							    when let <_cor80> =
								  try
								      let <_cor79> =
									  call 'erlang':'hd'
									      (Dir)
								      in  call 'erlang':'is_integer'
									      (_cor79)
								  of <Try> ->
								      Try
								  catch <T,R> ->
								      'false'
							      in  let <_cor81> =
								      %% Line 1297
								      call 'erlang':'is_atom'
									  (Dir)
								  in  let <_cor82> =
									  %% Line 1297
									  call 'erlang':'=/='
									      (Dir, 'undefined')
								      in  let <_cor83> =
									      %% Line 1297
									      call 'erlang':'and'
										  (_cor81, _cor82)
									  in  let <_cor88> =
										  %% Line 1298
										  try
										      let <_cor84> =
											  call 'erlang':'length'
											      (Dir)
										      in  let <_cor85> =
											      call 'erlang':'=='
												  (_cor84, 1)
											  in  let <_cor86> =
												  call 'erlang':'hd'
												      (Dir)
											      in  let <_cor87> =
												      call 'erlang':'is_atom'
													  (_cor86)
												  in  call 'erlang':'and'
													  (_cor85, _cor87)
										  of <Try> ->
										      Try
										  catch <T,R> ->
										      'false'
									      in  let <_cor93> =
										      %% Line 1299
										      try
											  let <_cor89> =
											      call 'erlang':'length'
												  (Dir)
											  in  let <_cor90> =
												  call 'erlang':'=='
												      (_cor89, 1)
											      in  let <_cor91> =
												      call 'erlang':'hd'
													  (Dir)
												  in  let <_cor92> =
													  call 'erlang':'is_list'
													      (_cor91)
												      in  call 'erlang':'and'
													      (_cor90, _cor92)
										      of <Try> ->
											  Try
										      catch <T,R> ->
											  'false'
										  in  let <_cor94> =
											  %% Line 1298
											  call 'erlang':'or'
											      (_cor88, _cor93)
										      in  let <_cor95> =
											      %% Line 1297
											      call 'erlang':'or'
												  (_cor83, _cor94)
											  in  call 'erlang':'or'
												  (_cor80, _cor95) ->
							    let <_cor96> =
								%% Line 1300
								case <> of
								  <>
								      when call 'erlang':'is_atom'
									    (Dir) ->
								      call 'erlang':'atom_to_list'
									  (Dir)
								  %% Line 1301
								  <> when 'true' ->
								      Dir
								end
							    in  %% Line 1302
								case <> of
								  <>
								      when call 'erlang':'=:='
									    (Suite,
									     'undefined') ->
								      %% Line 1303
								      call 'erlang':'exit'
									  ({'error','incorrect_start_options'})
								  %% Line 1305
								  <>
								      when let <_cor99> =
									    try
										let <_cor98> =
										    call 'erlang':'hd'
											(Suite)
										in  call 'erlang':'is_integer'
											(_cor98)
									    of <Try> ->
										Try
									    catch <T,R> ->
										'false'
									in  let <_cor100> =
										%% Line 1306
										call 'erlang':'is_atom'
										    (Suite)
									    in  let <_cor101> =
										    %% Line 1306
										    call 'erlang':'=/='
											(Suite, 'undefined')
										in  let <_cor102> =
											%% Line 1306
											call 'erlang':'and'
											    (_cor100, _cor101)
										    in  let <_cor107> =
											    %% Line 1307
											    try
												let <_cor103> =
												    call 'erlang':'length'
													(Suite)
												in  let <_cor104> =
													call 'erlang':'=='
													    (_cor103, 1)
												    in  let <_cor105> =
													    call 'erlang':'hd'
														(Suite)
													in  let <_cor106> =
														call 'erlang':'is_atom'
														    (_cor105)
													    in  call 'erlang':'and'
														    (_cor104, _cor106)
											    of <Try> ->
												Try
											    catch <T,R> ->
												'false'
											in  let <_cor112> =
												%% Line 1308
												try
												    let <_cor108> =
													call 'erlang':'length'
													    (Suite)
												    in  let <_cor109> =
													    call 'erlang':'=='
														(_cor108, 1)
													in  let <_cor110> =
														call 'erlang':'hd'
														    (Suite)
													    in  let <_cor111> =
														    call 'erlang':'is_list'
															(_cor110)
														in  call 'erlang':'and'
															(_cor109, _cor111)
												of <Try> ->
												    Try
												catch <T,R> ->
												    'false'
											    in  let <_cor113> =
												    %% Line 1307
												    call 'erlang':'or'
													(_cor107, _cor112)
												in  let <_cor114> =
													%% Line 1306
													call 'erlang':'or'
													    (_cor102, _cor113)
												    in  call 'erlang':'or'
													    (_cor99, _cor114) ->
								      %% Line 1309
								      case apply 'suite_to_test'/2
									       (_cor96, Suite) of
									<{Dir2,Mod}> when 'true' ->
									    %% Line 1310
									    case GsAndCs of
									      %% Line 1311
									      <[]> when 'true' ->
										  let <_cor117> =
										      catch
											  let <_cor116> =
											      %% Line 1312
											      apply 'tests'/2
												  (Dir2, Mod)
											  in  %% Line 1312
											      apply 'do_run'/4
												  (_cor116, %% Line 1313
													    [], _cor5, %% Line 1313
														       StartOpts)
										  in  %% Line 1312
										      apply 'reformat_result'/1
											  (_cor117)
									      %% Line 1314
									      <_cor201> when 'true' ->
										  let <_cor119> =
										      catch
											  let <_cor118> =
											      %% Line 1315
											      apply 'tests'/3
												  (Dir2, Mod, %% Line 1316
													      GsAndCs)
											  in  %% Line 1315
											      apply 'do_run'/4
												  (_cor118, %% Line 1317
													    [], _cor5, %% Line 1317
														       StartOpts)
										  in  %% Line 1315
										      apply 'reformat_result'/1
											  (_cor119)
									    end
									( <_cor115> when 'true' ->
									      primop 'match_fail'
										  ({'badmatch',_cor115})
									  -| ['compiler_generated'] )
								      end
								  %% Line 1320
								  <>
								      when call 'erlang':'is_list'
									    (Suite) ->
								      let <_cor126> =
									  %% Line 1321
									  ( letrec
										'lc$^2'/1 =
										    fun (_cor123) ->
											case _cor123 of
											  <[S|_cor122]> when 'true' ->
											      let <_cor124> =
												  apply 'suite_to_test'/2
												      (_cor96, S)
											      in  let <_cor125> =
												      apply 'lc$^2'/1
													  (_cor122)
												  in  ( [_cor124|_cor125]
													-| ['compiler_generated'] )
											  <[]> when 'true' ->
											      []
											  ( <_cor123> when 'true' ->
												( primop 'match_fail'
												      ({'function_clause',_cor123})
												  -| [{'function_name',{'lc$^2',1}}] )
											    -| ['compiler_generated'] )
											end
									    in  apply 'lc$^2'/1
										    (Suite)
									    -| ['list_comprehension'] )
								      in  %% Line 1321
									  case _cor126 of
									    %% Line 1322
									    <[_cor202|[_cor203|_cor204]]>
										when call 'erlang':'=/='
										      (GsAndCs,
										       []) ->
										%% Line 1323
										call 'erlang':'exit'
										    ({'error','multiple_suites_and_cases'})
									    %% Line 1324
									    <[{Dir2,Mod}|[]]>
										when call 'erlang':'=/='
										      (GsAndCs,
										       []) ->
										let <_cor128> =
										    catch
											let <_cor127> =
											    %% Line 1325
											    apply 'tests'/3
												(Dir2, Mod, %% Line 1326
													    GsAndCs)
											in  %% Line 1325
											    apply 'do_run'/4
												(_cor127, %% Line 1327
													  [], _cor5, %% Line 1327
														     StartOpts)
										in  %% Line 1325
										    apply 'reformat_result'/1
											(_cor128)
									    %% Line 1328
									    <DirMods> when 'true' ->
										let <_cor130> =
										    catch
											let <_cor129> =
											    %% Line 1329
											    apply 'tests'/1
												(DirMods)
											in  %% Line 1329
											    apply 'do_run'/4
												(_cor129, %% Line 1330
													  [], _cor5, %% Line 1330
														     StartOpts)
										in  %% Line 1329
										    apply 'reformat_result'/1
											(_cor130)
									  end
								  ( <> when 'true' ->
									primop 'match_fail'
									    ('if_clause')
								    -| ['compiler_generated'] )
								end
							%% Line 1334
							<'undefined','undefined',[]> when 'true' ->
							    %% Line 1335
							    call 'erlang':'exit'
								({'error','no_test_specified'})
							%% Line 1337
							<Dir,Suite,GsAndCs> when 'true' ->
							    %% Line 1338
							    call 'erlang':'exit'
								({'error',{'incorrect_start_options',{Dir,Suite,GsAndCs}}})
						      end
	  ( <_cor134,_cor133> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor134,_cor133})
		  -| [{'function_name',{'run_dir',2}}] )
	    -| ['compiler_generated'] )
	end
'run_testspec'/1 =
    %% Line 1349
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1350
	    ( fun () ->
		  apply 'run_testspec1'/1
		      (_cor0)
	      -| [{'id',{0,0,'-run_testspec/1-fun-0-'}}] )
	in  let <CTPid> =
		%% Line 1350
		call 'erlang':'spawn'
		    (_cor1)
	    in  let <Ref> =
		    %% Line 1351
		    call 'erlang':'monitor'
			('process', CTPid)
		in  %% Line 1352
		    receive
		      %% Line 1353
		      <{'DOWN',_cor5,'process',_cor6,{'user_error',Error}}>
			  when let <_cor7> =
				call 'erlang':'=:='
				    (_cor5, Ref)
			    in  let <_cor8> =
				    call 'erlang':'=:='
					(_cor6, CTPid)
				in  call 'erlang':'and'
					(_cor7, _cor8) ->
			  %% Line 1354
			  Error
		      %% Line 1355
		      <{'DOWN',_cor9,'process',_cor10,Other}>
			  when let <_cor11> =
				call 'erlang':'=:='
				    (_cor9, Ref)
			    in  let <_cor12> =
				    call 'erlang':'=:='
					(_cor10, CTPid)
				in  call 'erlang':'and'
					(_cor11, _cor12) ->
			  %% Line 1356
			  Other
		    after 'infinity' ->
		      'true'
'run_testspec1'/1 =
    %% Line 1359
    fun (_cor0) ->
	%% Line 1360
	case call 'file':'get_cwd'
		 () of
	  <{'ok',Cwd}> when 'true' ->
	      do  %% Line 1361
		  call 'io':'format'
		      ([126|[110|[67|[111|[109|[109|[111|[110|[32|[84|[101|[115|[116|[32|[115|[116|[97|[114|[116|[105|[110|[103|[32|[40|[99|[119|[100|[32|[105|[115|[32|[126|[116|[115|[41|[126|[110|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Cwd|[]])
		  let <_cor2> =
		      catch
			  %% Line 1362
			  apply 'run_testspec2'/1
			      (_cor0)
		  in  %% Line 1362
		      case _cor2 of
			%% Line 1363
			<{'EXIT',Reason}> when 'true' ->
			    do  %% Line 1364
				call 'file':'set_cwd'
				    (Cwd)
				%% Line 1365
				call 'erlang':'exit'
				    ({'error',Reason})
			%% Line 1366
			<Result> when 'true' ->
			    %% Line 1367
			    call 'erlang':'exit'
				(Result)
		      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'run_testspec2'/1 =
    %% Line 1370
    fun (_cor0) ->
	case _cor0 of
	  <File>
	      when try
		    let <_cor1> =
			call 'erlang':'is_list'
			    (_cor0)
		    in  let <_cor2> =
			    call 'erlang':'hd'
				(_cor0)
			in  let <_cor3> =
				call 'erlang':'is_integer'
				    (_cor2)
			    in  call 'erlang':'and'
				    (_cor1, _cor3)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1371
	      case call 'file':'read_file_info'
		       (File) of
		%% Line 1372
		<{'ok',_cor36}> when 'true' ->
		    let <_cor4> =
			%% Line 1374
			call 'erlang':'++'
			    (File, [125|[93|[41]]])
		    in  let <_cor5> =
			    %% Line 1374
			    call 'erlang':'++'
				([66|[97|[100|[32|[97|[114|[103|[117|[109|[101|[110|[116|[44|[32|[117|[115|[101|[32|[99|[116|[58|[114|[117|[110|[95|[116|[101|[115|[116|[40|[91|[123|[115|[112|[101|[99|[44]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], _cor4)
			in  %% Line 1373
			    call 'erlang':'exit'
				(_cor5)
		%% Line 1375
		<_cor37> when 'true' ->
		    %% Line 1376
		    call 'erlang':'exit'
			([66|[97|[100|[32|[97|[114|[103|[117|[109|[101|[110|[116|[44|[32|[108|[105|[115|[116|[32|[111|[102|[32|[116|[117|[112|[108|[101|[115|[32|[101|[120|[112|[101|[99|[116|[101|[100|[44|[32|[117|[115|[101|[32|[99|[116|[58|[114|[117|[110|[95|[116|[101|[115|[116|[47|[49|[32|[102|[111|[114|[32|[116|[101|[115|[116|[32|[115|[112|[101|[99|[105|[102|[105|[99|[97|[116|[105|[111|[110|[32|[102|[105|[108|[101|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	      end
	  %% Line 1380
	  <TestSpec> when 'true' ->
	      let <_cor7> =
		  catch
		      %% Line 1381
		      call 'ct_testspec':'collect_tests_from_list'
			  (TestSpec, 'false')
	      in  %% Line 1381
		  case _cor7 of
		    %% Line 1382
		    <{E,CTReason}>
			when let <_cor8> =
			      call 'erlang':'=:='
				  (E, 'error')
			  in  let <_cor9> =
				  call 'erlang':'=:='
				      (E, 'EXIT')
			      in  call 'erlang':'or'
				      (_cor8, _cor9) ->
			%% Line 1383
			call 'erlang':'exit'
			    ({'error',CTReason})
		    %% Line 1384
		    <TS> when 'true' ->
			let <_cor10> =
			    %% Line 1385
			    call 'erlang':'node'
				()
			in  let <Opts> =
				%% Line 1385
				apply 'get_data_for_node'/2
				    (TS, _cor10)
			    in  let <_cor17> =
				    %% Line 1388
				    case call 'os':'getenv'
					     ([67|[84|[95|[73|[78|[67|[76|[85|[68|[69|[95|[80|[65|[84|[72]]]]]]]]]]]]]]]) of
				      %% Line 1389
				      <'false'> when 'true' ->
					  %% Line 1390
					  ( case Opts of
					      ( <( {'opts',_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_rec90,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63}
						   -| ['compiler_generated'] )> when 'true' ->
						    _rec90
						-| ['compiler_generated'] )
					      ( <_cor64> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','opts'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
				      %% Line 1391
				      <CtInclPath> when 'true' ->
					  let <EnvInclude> =
					      %% Line 1392
					      call 'string':'tokens'
						  (CtInclPath, [58|[32|[44]]])
					  in  %% Line 1393
					      ( case Opts of
						  ( <( {'opts',_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_rec91,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90}
						       -| ['compiler_generated'] )> when 'true' ->
							call 'erlang':'++'
							    (EnvInclude, _rec91)
						    -| ['compiler_generated'] )
						  ( <_cor91> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','opts'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
				    end
				in  do  %% Line 1395
					call 'application':'set_env'
					    ('common_test', 'include', _cor17)
					%% Line 1396
					( case Opts of
					    ( <( {'opts',_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_rec92,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117}
						 -| ['compiler_generated'] )> when 'true' ->
						  let <LogDir1> =
						      apply 'which'/2
							  ('logdir', _rec92)
						  in  %% Line 1397
						      case apply 'check_and_install_configfiles'/3
							       (_cor103, %% Line 1398
									 LogDir1, %% Line 1398
										  Opts) of
							%% Line 1399
							<'ok'> when 'true' ->
							    let <_cor25> =
								%% Line 1400
								call 'erlang':'setelement'
								    (26, Opts, [])
							    in  let <_cor26> =
								    %% Line 1402
								    call 'erlang':'setelement'
									(18, _cor25, _cor17)
								in  let <_cor28> =
									%% Line 1401
									call 'erlang':'setelement'
									    (10, _cor26, LogDir1)
								    in  let <_cor30> =
									    %% Line 1403
									    call 'erlang':'node'
										()
									in  %% Line 1403
									    case call 'ct_testspec':'prepare_tests'
										     (TS, _cor30) of
									      <{Run,Skip}> when 'true' ->
										  let <_cor32> =
										      catch
											  %% Line 1404
											  apply 'do_run'/4
											      (Run, Skip, _cor28, [])
										  in  %% Line 1404
										      apply 'reformat_result'/1
											  (_cor32)
									      ( <_cor31> when 'true' ->
										    primop 'match_fail'
											({'badmatch',_cor31})
										-| ['compiler_generated'] )
									    end
							%% Line 1405
							<GCFError = {'error',_X_GCFReason}> when 'true' ->
							    %% Line 1406
							    call 'erlang':'exit'
								(GCFError)
							( <_cor33> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_cor33})
							  -| ['compiler_generated'] )
						      end
					      -| ['compiler_generated'] )
					    ( <_cor118> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','opts'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
		  end
	end
'get_data_for_node'/2 =
    %% Line 1410
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'testspec',_cor56,_cor57,_cor58,Labels,%% Line 1411
						   Profiles,%% Line 1412
							    LogDirs,%% Line 1413
								    LogOptsList,%% Line 1414
										BHs,%% Line 1416
										    VLvls,%% Line 1417
											  SilentConnsList,%% Line 1418
													  CoverFs,%% Line 1419
														  CoverStops,%% Line 1420
															     Cfgs,%% Line 1421
																  UsrCfgs,%% Line 1422
																	  EvHs,%% Line 1423
																	       CTHooks,%% Line 1424
																		       EnableBuiltinHooks,_cor59,%% Line 1427
																						 Incl,%% Line 1425
																						      ACs,%% Line 1426
																							  AiMSs,%% Line 1415
																								SSs,%% Line 1428
																								    MTs,%% Line 1429
																									STs,%% Line 1430
																									    PDs,_cor60,_cor61,_cor62},%% Line 1430
																												      Node> when 'true' ->
	      let <Label> =
		  %% Line 1431
		  call 'proplists':'get_value'
		      (Node, Labels)
	      in  let <Profile> =
		      %% Line 1432
		      call 'proplists':'get_value'
			  (Node, Profiles)
		  in  let <_cor5> =
			  %% Line 1433
			  case call 'proplists':'get_value'
				   (Node, LogDirs) of
			    %% Line 1434
			    <'undefined'> when 'true' ->
				[46]
			    %% Line 1435
			    <Dir> when 'true' ->
				Dir
			  end
		      in  let <_cor8> =
			      %% Line 1437
			      case call 'proplists':'get_value'
				       (Node, LogOptsList) of
				%% Line 1438
				<'undefined'> when 'true' ->
				    []
				%% Line 1439
				<LOs> when 'true' ->
				    LOs
			      end
			  in  let <BasicHtml> =
				  %% Line 1441
				  call 'proplists':'get_value'
				      (Node, BHs)
			      in  let <Stylesheet> =
				      %% Line 1442
				      call 'proplists':'get_value'
					  (Node, SSs)
				  in  let <_cor13> =
					  %% Line 1443
					  case call 'proplists':'get_value'
						   (Node, VLvls) of
					    %% Line 1444
					    <'undefined'> when 'true' ->
						[]
					    %% Line 1445
					    <Lvls> when 'true' ->
						Lvls
					  end
				      in  let <_cor16> =
					      %% Line 1447
					      case call 'proplists':'get_value'
						       (Node, SilentConnsList) of
						%% Line 1448
						<'undefined'> when 'true' ->
						    []
						%% Line 1449
						<SCs> when 'true' ->
						    SCs
					      end
					  in  let <Cover> =
						  %% Line 1451
						  call 'proplists':'get_value'
						      (Node, CoverFs)
					      in  let <CoverStop> =
						      %% Line 1452
						      call 'proplists':'get_value'
							  (Node, CoverStops)
						  in  let <MT> =
							  %% Line 1453
							  call 'proplists':'get_value'
							      (Node, MTs)
						      in  let <ST> =
							      %% Line 1454
							      call 'proplists':'get_value'
								  (Node, STs)
							  in  let <CreatePrivDir> =
								  %% Line 1455
								  call 'proplists':'get_value'
								      (Node, PDs)
							      in  let <_cor27> =
								      %% Line 1457
								      ( letrec
									    'lc$^0'/1 =
										fun (_cor25) ->
										    case _cor25 of
										      <[{N,CBF}|_cor24]>
											  when call 'erlang':'=='
												(N,
												 Node) ->
											  let <_cor26> =
											      apply 'lc$^0'/1
												  (_cor24)
											  in  ( [CBF|_cor26]
												-| ['compiler_generated'] )
										      ( <[_cor23|_cor24]> when 'true' ->
											    apply 'lc$^0'/1
												(_cor24)
											-| ['compiler_generated'] )
										      <[]> when 'true' ->
											  []
										      ( <_cor25> when 'true' ->
											    ( primop 'match_fail'
												  ({'function_clause',_cor25})
											      -| [{'function_name',{'lc$^0',1}}] )
											-| ['compiler_generated'] )
										    end
									in  apply 'lc$^0'/1
										(UsrCfgs)
									-| ['list_comprehension'] )
								  in  let <_cor32> =
									  %% Line 1456
									  ( letrec
										'lc$^1'/1 =
										    fun (_cor30) ->
											case _cor30 of
											  <[{N,F}|_cor29]>
											      when call 'erlang':'=='
												    (N,
												     Node) ->
											      let <_cor31> =
												  apply 'lc$^1'/1
												      (_cor29)
											      in  ( [{'ct_config_plain',F}|_cor31]
												    -| ['compiler_generated'] )
											  ( <[_cor28|_cor29]> when 'true' ->
												apply 'lc$^1'/1
												    (_cor29)
											    -| ['compiler_generated'] )
											  <[]> when 'true' ->
											      _cor27
											  ( <_cor30> when 'true' ->
												( primop 'match_fail'
												      ({'function_clause',_cor30})
												  -| [{'function_name',{'lc$^1',1}}] )
											    -| ['compiler_generated'] )
											end
									    in  apply 'lc$^1'/1
										    (Cfgs)
									    -| ['list_comprehension'] )
								      in  let <_cor38> =
									      %% Line 1458
									      ( letrec
										    'lc$^2'/1 =
											fun (_cor36) ->
											    case _cor36 of
											      <[{N,H,A}|_cor35]>
												  when call 'erlang':'=='
													(N,
													 Node) ->
												  let <_cor37> =
												      apply 'lc$^2'/1
													  (_cor35)
												  in  ( [{H,A}|_cor37]
													-| ['compiler_generated'] )
											      ( <[_cor34|_cor35]> when 'true' ->
												    apply 'lc$^2'/1
													(_cor35)
												-| ['compiler_generated'] )
											      <[]> when 'true' ->
												  []
											      ( <_cor36> when 'true' ->
												    ( primop 'match_fail'
													  ({'function_clause',_cor36})
												      -| [{'function_name',{'lc$^2',1}}] )
												-| ['compiler_generated'] )
											    end
										in  apply 'lc$^2'/1
											(EvHs)
										-| ['list_comprehension'] )
									  in  let <_cor44> =
										  %% Line 1459
										  ( letrec
											'lc$^3'/1 =
											    fun (_cor42) ->
												case _cor42 of
												  <[{N,Hook}|_cor41]>
												      when call 'erlang':'=='
													    (N,
													     Node) ->
												      let <_cor43> =
													  apply 'lc$^3'/1
													      (_cor41)
												      in  ( [Hook|_cor43]
													    -| ['compiler_generated'] )
												  ( <[_cor40|_cor41]> when 'true' ->
													apply 'lc$^3'/1
													    (_cor41)
												    -| ['compiler_generated'] )
												  <[]> when 'true' ->
												      []
												  ( <_cor42> when 'true' ->
													( primop 'match_fail'
													      ({'function_clause',_cor42})
													  -| [{'function_name',{'lc$^3',1}}] )
												    -| ['compiler_generated'] )
												end
										    in  apply 'lc$^3'/1
											    (CTHooks)
										    -| ['list_comprehension'] )
									      in  let <AutoCompile> =
										      %% Line 1460
										      call 'proplists':'get_value'
											  (Node, ACs)
										  in  let <AbortIfMissing> =
											  %% Line 1461
											  call 'proplists':'get_value'
											      (Node, AiMSs)
										      in  let <_cor52> =
											      %% Line 1462
											      ( letrec
												    'lc$^4'/1 =
													fun (_cor50) ->
													    case _cor50 of
													      <[{N,I}|_cor49]>
														  when call 'erlang':'=='
															(N,
															 Node) ->
														  let <_cor51> =
														      apply 'lc$^4'/1
															  (_cor49)
														  in  ( [I|_cor51]
															-| ['compiler_generated'] )
													      ( <[_cor48|_cor49]> when 'true' ->
														    apply 'lc$^4'/1
															(_cor49)
														-| ['compiler_generated'] )
													      <[]> when 'true' ->
														  []
													      ( <_cor50> when 'true' ->
														    ( primop 'match_fail'
															  ({'function_clause',_cor50})
														      -| [{'function_name',{'lc$^4',1}}] )
														-| ['compiler_generated'] )
													    end
												in  apply 'lc$^4'/1
													(Incl)
												-| ['list_comprehension'] )
											  in  %% Line 1463
											      {'opts',Label,%% Line 1464
													    Profile,'undefined','undefined',%% Line 1471
																	    Cover,%% Line 1472
																		  CoverStop,'undefined','undefined',_cor5,_cor8,%% Line 1467
																								BasicHtml,_cor13,_cor32,_cor38,_cor44,%% Line 1476
																												      EnableBuiltinHooks,_cor52,%% Line 1477
																																AutoCompile,%% Line 1478
																																	    AbortIfMissing,_cor16,%% Line 1468
																																				  Stylesheet,%% Line 1480
																																					     MT,%% Line 1481
																																						ST,%% Line 1482
																																						   CreatePrivDir,[],'undefined','undefined'}
	  ( <_cor55,_cor54> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor55,_cor54})
		  -| [{'function_name',{'get_data_for_node',2}}] )
	    -| ['compiler_generated'] )
	end
'refresh_logs'/1 =
    %% Line 1484
    fun (_cor0) ->
	%% Line 1485
	case call 'file':'get_cwd'
		 () of
	  <{'ok',Cwd}> when 'true' ->
	      %% Line 1486
	      case call 'file':'set_cwd'
		       (_cor0) of
		%% Line 1487
		<E = {'error',_X_Reason}> when 'true' ->
		    %% Line 1488
		    E
		%% Line 1489
		<_cor8> when 'true' ->
		    let <_cor2> =
			catch
			    %% Line 1490
			    call 'ct_logs':'make_all_suites_index'
				('refresh')
		    in  %% Line 1490
			case _cor2 of
			  %% Line 1491
			  <{'EXIT',ASReason}> when 'true' ->
			      do  %% Line 1492
				  call 'file':'set_cwd'
				      (Cwd)
				  %% Line 1493
				  {'error',{'all_suites_index',ASReason}}
			  %% Line 1494
			  <_cor9> when 'true' ->
			      let <_cor3> =
				  catch
				      %% Line 1495
				      call 'ct_logs':'make_all_runs_index'
					  ('refresh')
			      in  %% Line 1495
				  case _cor3 of
				    %% Line 1496
				    <{'EXIT',ARReason}> when 'true' ->
					do  %% Line 1497
					    call 'file':'set_cwd'
						(Cwd)
					    %% Line 1498
					    {'error',{'all_runs_index',ARReason}}
				    %% Line 1499
				    <_cor10> when 'true' ->
					do  %% Line 1500
					    call 'file':'set_cwd'
						(Cwd)
					    do  %% Line 1501
						call 'io':'format'
						    ([76|[111|[103|[115|[32|[105|[110|[32|[126|[116|[115|[32|[114|[101|[102|[114|[101|[115|[104|[101|[100|[33|[126|[110]]]]]]]]]]]]]]]]]]]]]]]], [_cor0|[]])
						%% Line 1502
						'ok'
				  end
			end
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'which'/2 =
    %% Line 1507
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'logdir','undefined'> when 'true' ->
	      %% Line 1508
	      [46]
	  %% Line 1509
	  <'logdir',Dir> when 'true' ->
	      %% Line 1510
	      Dir
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'which',2}}] )
	    -| ['compiler_generated'] )
	end
'choose_val'/2 =
    %% Line 1512
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'undefined',V1> when 'true' ->
	      %% Line 1513
	      V1
	  %% Line 1514
	  <V0,_X_V1> when 'true' ->
	      %% Line 1515
	      V0
	end
'merge_vals'/1 =
    %% Line 1517
    fun (_cor0) ->
	%% Line 1518
	call 'lists':'append'
	    (_cor0)
'merge_keyvals'/1 =
    %% Line 1520
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1521
	    call 'lists':'append'
		(_cor0)
	in  %% Line 1521
	    apply 'make_unique'/1
		(_cor1)
'make_unique'/1 =
    %% Line 1523
    fun (_cor0) ->
	case _cor0 of
	  <[Elem = {Key,_cor4}|Elems]> when 'true' ->
	      let <_cor1> =
		  %% Line 1524
		  call 'proplists':'delete'
		      (Key, Elems)
	      in  let <_cor2> =
		      %% Line 1524
		      apply 'make_unique'/1
			  (_cor1)
		  in  %% Line 1524
		      [Elem|_cor2]
	  %% Line 1525
	  <[]> when 'true' ->
	      %% Line 1526
	      []
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'make_unique',1}}] )
	    -| ['compiler_generated'] )
	end
'listify'/1 =
    %% Line 1528
    fun (_cor0) ->
	case _cor0 of
	  <Str = [C|_cor2]>
	      when call 'erlang':'is_integer'
		    (C) ->
	      [Str|[]]
	  %% Line 1529
	  <L>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      L
	  %% Line 1530
	  <E> when 'true' ->
	      [E|[]]
	end
'delistify'/1 =
    %% Line 1532
    fun (_cor0) ->
	case _cor0 of
	  <[E|[]]> when 'true' ->
	      E
	  %% Line 1533
	  <E> when 'true' ->
	      E
	end
'run'/3 =
    %% Line 1539
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 1540
	    apply 'install'/1
		([])
	    let <_cor4> =
		catch
		    let <_cor3> =
			%% Line 1541
			apply 'tests'/3
			    (_cor2, _cor1, _cor0)
		    in  %% Line 1541
			apply 'do_run'/2
			    (_cor3, [])
	    in  %% Line 1541
		apply 'reformat_result'/1
		    (_cor4)
'run'/2 =
    %% Line 1546
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <TestDir,Suite>
	      when try
		    let <_cor2> =
			call 'erlang':'is_list'
			    (TestDir)
		    in  let <_cor3> =
			    call 'erlang':'hd'
				(TestDir)
			in  let <_cor4> =
				call 'erlang':'is_integer'
				    (_cor3)
			    in  call 'erlang':'and'
				    (_cor2, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      do  %% Line 1547
		  apply 'install'/1
		      ([])
		  let <_cor6> =
		      catch
			  let <_cor5> =
			      %% Line 1548
			      apply 'tests'/2
				  (TestDir, Suite)
			  in  %% Line 1548
			      apply 'do_run'/2
				  (_cor5, [])
		  in  %% Line 1548
		      apply 'reformat_result'/1
			  (_cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'run',2}}] )
	    -| ['compiler_generated'] )
	end
'run'/1 =
    %% Line 1553
    fun (_cor0) ->
	do  %% Line 1554
	    apply 'install'/1
		([])
	    let <_cor2> =
		catch
		    let <_cor1> =
			%% Line 1555
			apply 'tests'/1
			    (_cor0)
		    in  %% Line 1555
			apply 'do_run'/2
			    (_cor1, [])
	    in  %% Line 1555
		apply 'reformat_result'/1
		    (_cor2)
'reformat_result'/1 =
    %% Line 1557
    fun (_cor0) ->
	case _cor0 of
	  <{'EXIT',{'user_error',Reason}}> when 'true' ->
	      %% Line 1558
	      {'error',Reason}
	  %% Line 1559
	  <{'user_error',Reason}> when 'true' ->
	      %% Line 1560
	      {'error',Reason}
	  %% Line 1561
	  <Result> when 'true' ->
	      %% Line 1562
	      Result
	end
'suite_to_test'/1 =
    %% Line 1564
    fun (_cor0) ->
	case _cor0 of
	  <Suite>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 1565
		  call 'erlang':'atom_to_list'
		      (Suite)
	      in  %% Line 1565
		  apply 'suite_to_test'/1
		      (_cor1)
	  %% Line 1567
	  <Suite>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor5> =
		  %% Line 1568
		  call 'filename':'dirname'
		      (Suite)
	      in  let <_cor2> =
		      %% Line 1569
		      call 'filename':'basename'
			  (Suite)
		  in  let <_cor3> =
			  %% Line 1569
			  call 'filename':'rootname'
			      (_cor2)
		      in  let <_cor4> =
			      %% Line 1569
			      call 'erlang':'list_to_atom'
				  (_cor3)
			  in  %% Line 1568
			      {_cor5,_cor4}
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'suite_to_test',1}}] )
	    -| ['compiler_generated'] )
	end
'suite_to_test'/2 =
    %% Line 1571
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Dir,Suite>
	      when call 'erlang':'is_atom'
		    (Suite) ->
	      let <_cor2> =
		  %% Line 1572
		  call 'erlang':'atom_to_list'
		      (Suite)
	      in  %% Line 1572
		  apply 'suite_to_test'/2
		      (Dir, _cor2)
	  %% Line 1574
	  <Dir,Suite>
	      when call 'erlang':'is_list'
		    (Suite) ->
	      %% Line 1575
	      case call 'filename':'dirname'
		       (Suite) of
		%% Line 1576
		<[46]> when 'true' ->
		    let <_cor3> =
			%% Line 1577
			call 'filename':'rootname'
			    (Suite)
		    in  let <_cor4> =
			    %% Line 1577
			    call 'erlang':'list_to_atom'
				(_cor3)
			in  %% Line 1577
			    {Dir,_cor4}
		%% Line 1578
		<DirName> when 'true' ->
		    let <File> =
			%% Line 1579
			call 'filename':'basename'
			    (Suite)
		    in  let <_cor6> =
			    %% Line 1580
			    call 'filename':'rootname'
				(File)
			in  let <_cor7> =
				%% Line 1580
				call 'erlang':'list_to_atom'
				    (_cor6)
			    in  %% Line 1580
				{DirName,_cor7}
	      end
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'suite_to_test',2}}] )
	    -| ['compiler_generated'] )
	end
'groups_and_cases'/2 =
    %% Line 1583
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Gs,Cs>
	      when try
		    let <_cor2> =
			call 'erlang':'=:='
			    (Gs, 'undefined')
		    in  let <_cor3> =
			    call 'erlang':'=:='
				(Gs, [])
			in  let <_cor4> =
				call 'erlang':'or'
				    (_cor2, _cor3)
			    in  let <_cor5> =
				    %% Line 1584
				    call 'erlang':'=:='
					(Cs, 'undefined')
				in  let <_cor6> =
					%% Line 1584
					call 'erlang':'=:='
					    (Cs, [])
				    in  let <_cor7> =
					    %% Line 1584
					    call 'erlang':'or'
						(_cor5, _cor6)
					in  call 'erlang':'and'
						(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1585
	      []
	  %% Line 1586
	  <Gs,Cs>
	      when let <_cor8> =
		    call 'erlang':'=:='
			(Gs, 'undefined')
		in  let <_cor9> =
			call 'erlang':'=:='
			    (Gs, [])
		    in  call 'erlang':'or'
			    (_cor8, _cor9) ->
	      %% Line 1587
	      case <> of
		<>
		    when try
			  let <_cor10> =
			      call 'erlang':'=:='
				  (Cs, 'all')
			  in  let <_cor11> =
				  call 'erlang':'=:='
				      (Cs, ['all'])
			      in  let <_cor12> =
				      call 'erlang':'or'
					  (_cor10, _cor11)
				  in  let <_cor13> =
					  call 'erlang':'=='
					      (Cs, [[97|[108|[108]]]])
				      in  call 'erlang':'or'
					      (_cor12, _cor13)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    'all'
		%% Line 1588
		<> when 'true' ->
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor17) ->
				  case _cor17 of
				    <[C|_cor15]> when 'true' ->
					let <_cor18> =
					    apply 'ensure_atom'/1
						(C)
					in  let <_cor19> =
						apply 'lc$^0'/1
						    (_cor15)
					    in  ( [_cor18|_cor19]
						  -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor17> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor17})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  let <_cor16> =
			      apply 'listify'/1
				  (Cs)
			  in  apply 'lc$^0'/1
				  (_cor16)
		      -| ['list_comprehension'] )
	      end
	  %% Line 1590
	  <GOrGs,Cs>
	      when try
		    ( case <> of
			( <>
			      when call 'erlang':'is_atom'
				    (GOrGs) ->
			      'true'
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      %% Line 1591
			      ( case <> of
				  ( <>
					when call 'erlang':'is_list'
					      (GOrGs) ->
					let <_cor23> =
					    %% Line 1592
					    call 'erlang':'hd'
						(GOrGs)
					in  %% Line 1592
					    ( case <> of
						( <>
						      when call 'erlang':'is_atom'
							    (_cor23) ->
						      'true'
						  -| ['compiler_generated'] )
						( <> when 'true' ->
						      let <_cor25> =
							  %% Line 1593
							  call 'erlang':'hd'
							      (GOrGs)
						      in  %% Line 1593
							  ( case <> of
							      ( <>
								    when call 'erlang':'is_list'
									  (_cor25) ->
								    let <_cor26> =
									%% Line 1594
									call 'erlang':'hd'
									    (GOrGs)
								    in  let <_cor27> =
									    %% Line 1594
									    call 'erlang':'hd'
										(_cor26)
									in  %% Line 1594
									    call 'erlang':'is_atom'
										(_cor27)
								-| ['compiler_generated'] )
							      ( <> when 'true' ->
								    'false'
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <> when 'true' ->
					'false'
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1595
	      case <> of
		%% Line 1596
		<>
		    when try
			  let <_cor33> =
			      call 'erlang':'=:='
				  (Cs, 'undefined')
			  in  let <_cor34> =
				  call 'erlang':'=:='
				      (Cs, [])
			      in  let <_cor35> =
				      call 'erlang':'or'
					  (_cor33, _cor34)
				  in  let <_cor36> =
					  call 'erlang':'=:='
					      (Cs, 'all')
				      in  let <_cor37> =
					      call 'erlang':'or'
						  (_cor35, _cor36)
					  in  let <_cor38> =
						  call 'erlang':'=:='
						      (Cs, ['all'])
					      in  let <_cor39> =
						      call 'erlang':'or'
							  (_cor37, _cor38)
						  in  let <_cor40> =
							  call 'erlang':'=='
							      (Cs, [[97|[108|[108]]]])
						      in  call 'erlang':'or'
							      (_cor39, _cor40)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 1597
		    [{GOrGs,'all'}|[]]
		%% Line 1598
		<> when 'true' ->
		    let <_cor47> =
			%% Line 1599
			( letrec
			      'lc$^1'/1 =
				  fun (_cor44) ->
				      case _cor44 of
					<[C|_cor42]> when 'true' ->
					    let <_cor45> =
						apply 'ensure_atom'/1
						    (C)
					    in  let <_cor46> =
						    apply 'lc$^1'/1
							(_cor42)
						in  ( [_cor45|_cor46]
						      -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor44> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor44})
						-| [{'function_name',{'lc$^1',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  let <_cor43> =
				  apply 'listify'/1
				      (Cs)
			      in  apply 'lc$^1'/1
				      (_cor43)
			  -| ['list_comprehension'] )
		    in  %% Line 1599
			[{GOrGs,_cor47}|[]]
	      end
	  %% Line 1601
	  <Gs,Cs>
	      when try
		    let <_cor48> =
			call 'erlang':'hd'
			    (Gs)
		    in  let <_cor49> =
			    call 'erlang':'hd'
				(_cor48)
			in  call 'erlang':'is_integer'
				(_cor49)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor58> =
		  %% Line 1605
		  case <> of
		    <>
			when let <_cor50> =
			      call 'erlang':'=:='
				  (Gs, ['all'])
			  in  let <_cor51> =
				  call 'erlang':'=='
				      (Gs, [[97|[108|[108]]]])
			      in  call 'erlang':'or'
				      (_cor50, _cor51) ->
			%% Line 1606
			'all'
		    %% Line 1607
		    <> when 'true' ->
			let <_cor57> =
			    %% Line 1608
			    ( fun (_cor55) ->
				  let <_cor52> =
				      %% Line 1609
				      call 'erlang':'++'
					  (_cor55, [46])
				  in  %% Line 1609
				      case call 'erl_scan':'string'
					       (_cor52) of
					<{'ok',Ts,_cor62}> when 'true' ->
					    %% Line 1610
					    case call 'erl_parse':'parse_term'
						     (Ts) of
					      <{'ok',Term}> when 'true' ->
						  %% Line 1611
						  Term
					      ( <_cor54> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor54})
						-| ['compiler_generated'] )
					    end
					( <_cor53> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor53})
					  -| ['compiler_generated'] )
				      end
			      -| [{'id',{0,0,'-groups_and_cases/2-fun-0-'}}] )
			in  %% Line 1608
			    call 'lists':'map'
				(_cor57, %% Line 1612
					 Gs)
		  end
	      in  %% Line 1614
		  apply 'groups_and_cases'/2
		      (_cor58, Cs)
	  %% Line 1615
	  <Gs,Cs> when 'true' ->
	      %% Line 1616
	      {'error',{'incorrect_group_or_case_option',Gs,Cs}}
	end
'tests'/3 =
    %% Line 1618
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <TestDir,Suites,[]>
	      when try
		    let <_cor3> =
			call 'erlang':'is_list'
			    (TestDir)
		    in  let <_cor4> =
			    call 'erlang':'hd'
				(TestDir)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (_cor4)
			    in  call 'erlang':'and'
				    (_cor3, _cor5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor7> =
		  %% Line 1619
		  call 'ct_util':'get_testdir'
		      (TestDir, Suites)
	      in  let <_cor6> =
		      %% Line 1619
		      apply 'ensure_atom'/1
			  (Suites)
		  in  %% Line 1619
		      [{_cor7,_cor6,'all'}|[]]
	  %% Line 1620
	  <TestDir,Suite,Cases>
	      when try
		    let <_cor8> =
			call 'erlang':'is_list'
			    (TestDir)
		    in  let <_cor9> =
			    call 'erlang':'hd'
				(TestDir)
			in  let <_cor10> =
				call 'erlang':'is_integer'
				    (_cor9)
			    in  call 'erlang':'and'
				    (_cor8, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor12> =
		  %% Line 1621
		  call 'ct_util':'get_testdir'
		      (TestDir, Suite)
	      in  let <_cor11> =
		      %% Line 1621
		      apply 'ensure_atom'/1
			  (Suite)
		  in  %% Line 1621
		      [{_cor12,_cor11,Cases}|[]]
	  ( <_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13})
		  -| [{'function_name',{'tests',3}}] )
	    -| ['compiler_generated'] )
	end
'tests'/2 =
    %% Line 1622
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Dir,Suite}|[]],Cases> when 'true' ->
	      let <_cor3> =
		  %% Line 1623
		  call 'ct_util':'get_testdir'
		      (Dir, Suite)
	      in  let <_cor2> =
		      %% Line 1623
		      apply 'ensure_atom'/1
			  (Suite)
		  in  %% Line 1623
		      [{_cor3,_cor2,Cases}|[]]
	  %% Line 1624
	  <TestDir,Suite>
	      when try
		    let <_cor4> =
			call 'erlang':'is_list'
			    (TestDir)
		    in  let <_cor5> =
			    call 'erlang':'hd'
				(TestDir)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (_cor5)
			    in  call 'erlang':'and'
				    (_cor4, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor7> =
		  %% Line 1625
		  apply 'ensure_atom'/1
		      (Suite)
	      in  %% Line 1625
		  apply 'tests'/3
		      (TestDir, _cor7, 'all')
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'tests',2}}] )
	    -| ['compiler_generated'] )
	end
'tests'/1 =
    %% Line 1626
    fun (_cor0) ->
	case _cor0 of
	  <DirSuites>
	      when try
		    let <_cor1> =
			call 'erlang':'is_list'
			    (_cor0)
		    in  let <_cor2> =
			    call 'erlang':'hd'
				(_cor0)
			in  let <_cor3> =
				call 'erlang':'is_tuple'
				    (_cor2)
			    in  call 'erlang':'and'
				    (_cor1, _cor3)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1627
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor6) ->
			    case _cor6 of
			      <[{Dir,Suite}|_cor5]> when 'true' ->
				  let <_cor8> =
				      call 'ct_util':'get_testdir'
					  (Dir, Suite)
				  in  let <_cor7> =
					  apply 'ensure_atom'/1
					      (Suite)
				      in  let <_cor9> =
					      apply 'lc$^0'/1
						  (_cor5)
					  in  ( [{_cor8,_cor7,'all'}|_cor9]
						-| ['compiler_generated'] )
			      ( <[_cor4|_cor5]> when 'true' ->
				    apply 'lc$^0'/1
					(_cor5)
				-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor6> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor6})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(DirSuites)
		-| ['list_comprehension'] )
	  %% Line 1628
	  <TestDir>
	      when try
		    let <_cor10> =
			call 'erlang':'is_list'
			    (_cor0)
		    in  let <_cor11> =
			    call 'erlang':'hd'
				(_cor0)
			in  let <_cor12> =
				call 'erlang':'is_integer'
				    (_cor11)
			    in  call 'erlang':'and'
				    (_cor10, _cor12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1629
	      apply 'tests'/1
		  ([TestDir|[]])
	  %% Line 1630
	  <TestDirs>
	      when try
		    let <_cor13> =
			call 'erlang':'is_list'
			    (_cor0)
		    in  let <_cor14> =
			    call 'erlang':'hd'
				(_cor0)
			in  let <_cor15> =
				call 'erlang':'is_list'
				    (_cor14)
			    in  call 'erlang':'and'
				    (_cor13, _cor15)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1631
	      ( letrec
		    'lc$^1'/1 =
			fun (_cor18) ->
			    case _cor18 of
			      <[TestDir|_cor17]> when 'true' ->
				  let <_cor19> =
				      call 'ct_util':'get_testdir'
					  (TestDir, 'all')
				  in  let <_cor20> =
					  apply 'lc$^1'/1
					      (_cor17)
				      in  ( [{_cor19,'all','all'}|_cor20]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor18> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor18})
				      -| [{'function_name',{'lc$^1',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^1'/1
			(TestDirs)
		-| ['list_comprehension'] )
	  ( <_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21})
		  -| [{'function_name',{'tests',1}}] )
	    -| ['compiler_generated'] )
	end
'do_run'/2 =
    %% Line 1633
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Tests,Misc>
	      when call 'erlang':'is_list'
		    (Misc) ->
	      %% Line 1634
	      apply 'do_run'/4
		  (Tests, Misc, [46], [])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'do_run',2}}] )
	    -| ['compiler_generated'] )
	end
'do_run'/4 =
    %% Line 1636
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Tests,Misc,LogDir,LogOpts>
	      when try
		    let <_cor4> =
			call 'erlang':'is_list'
			    (Misc)
		    in  let <_cor5> =
			    %% Line 1637
			    call 'erlang':'is_list'
				(LogDir)
			in  let <_cor6> =
				%% Line 1638
				call 'erlang':'is_list'
				    (LogOpts)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor9> =
		  %% Line 1640
		  case call 'proplists':'get_value'
			   ('step', Misc) of
		    %% Line 1641
		    <'undefined'> when 'true' ->
			%% Line 1642
			{'opts','undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined',[],'undefined',[],[],[],[],'undefined',[],'undefined','undefined',[],'undefined',1,'false','undefined',[],'undefined','undefined'}
		    %% Line 1643
		    <StepOpts> when 'true' ->
			%% Line 1644
			{'opts','undefined','undefined','undefined','undefined','undefined','undefined','undefined',StepOpts,'undefined',[],'undefined',[],[],[],[],'undefined',[],'undefined','undefined',[],'undefined',1,'false','undefined',[],'undefined','undefined'}
		  end
	      in  %% Line 1646
		  case _cor9 of
		    <{'opts',_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62}> when 'true' ->
			let <_cor13> =
			    call 'erlang':'setelement'
				(10, _cor9, LogDir)
			in  apply 'do_run'/4
				(Tests, [], _cor13, [])
		    ( <_cor63> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','opts'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 1648
	  <Tests,Skip,Opts = {'opts',_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90},Args> when ( 'true'
																														-| ['compiler_generated'] ) ->
	      let <_cor15> =
		  %% Line 1653
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (_cor64,
			       'undefined') ->
			'undefined'
		    %% Line 1654
		    <>
			when call 'erlang':'is_atom'
			      (_cor64) ->
			call 'erlang':'atom_to_list'
			    (_cor64)
		    %% Line 1655
		    <>
			when call 'erlang':'is_list'
			      (_cor64) ->
			_cor64
		    %% Line 1656
		    <> when 'true' ->
			'undefined'
		  end
	      in  do  %% Line 1658
		      call 'application':'set_env'
			  ('common_test', 'test_label', _cor15)
		      let <_cor17> =
			  %% Line 1662
			  case <> of
			    <>
				when call 'erlang':'=:='
				      (_cor65,
				       'undefined') ->
				'undefined'
			    %% Line 1663
			    <>
				when call 'erlang':'is_atom'
				      (_cor65) ->
				call 'erlang':'atom_to_list'
				    (_cor65)
			    %% Line 1664
			    <>
				when call 'erlang':'is_list'
				      (_cor65) ->
				_cor65
			    %% Line 1665
			    <> when 'true' ->
				'undefined'
			  end
		      in  do  %% Line 1667
			      call 'application':'set_env'
				  ('common_test', 'profile', _cor17)
			      %% Line 1669
			      case call 'code':'which'
				       ('test_server') of
				%% Line 1670
				<'non_existing'> when 'true' ->
				    %% Line 1671
				    {'error','no_path_to_test_server'}
				%% Line 1672
				<_cor115> when 'true' ->
				    do  %% Line 1675
					case call 'os':'getenv'
						 ([84|[69|[83|[84|[95|[83|[69|[82|[86|[69|[82|[95|[70|[82|[65|[77|[69|[87|[79|[82|[75]]]]]]]]]]]]]]]]]]]]]) of
					  %% Line 1676
					  <'false'> when 'true' ->
					      do  %% Line 1677
						  call 'os':'putenv'
						      ([84|[69|[83|[84|[95|[83|[69|[82|[86|[69|[82|[95|[70|[82|[65|[77|[69|[87|[79|[82|[75]]]]]]]]]]]]]]]]]]]]], [99|[116|[95|[102|[114|[97|[109|[101|[119|[111|[114|[107]]]]]]]]]]]])
						  %% Line 1678
						  call 'os':'putenv'
						      ([84|[69|[83|[84|[95|[83|[69|[82|[86|[69|[82|[95|[70|[82|[65|[77|[69|[87|[79|[82|[75|[95|[78|[65|[77|[69]]]]]]]]]]]]]]]]]]]]]]]]]], [99|[111|[109|[109|[111|[110|[95|[116|[101|[115|[116]]]]]]]]]]])
					  %% Line 1679
					  <[99|[116|[95|[102|[114|[97|[109|[101|[119|[111|[114|[107]]]]]]]]]]]]> when 'true' ->
					      'ok'
					  %% Line 1681
					  <Other> when 'true' ->
					      let <_cor19> =
						  %% Line 1684
						  call 'erlang':'++'
						      ([78|[111|[116|[101|[58|[32|[84|[69|[83|[84|[95|[83|[69|[82|[86|[69|[82|[95|[70|[82|[65|[77|[69|[87|[79|[82|[75|[32|[61|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], Other)
					      in  let <_cor20> =
						      %% Line 1683
						      call 'erlang':'list_to_atom'
							  (_cor19)
						  in  %% Line 1682
						      call 'erlang':'display'
							  (_cor20)
					end
					let <Verbosity> =
					    %% Line 1686
					    apply 'add_verbosity_defaults'/1
						(_cor75)
					in  %% Line 1687
					    case call 'ct_util':'start'
						     (_cor72, Verbosity) of
					      %% Line 1688
					      <{'error','interactive_mode'}> when 'true' ->
						  do  %% Line 1689
						      call 'io':'format'
							  ([67|[84|[32|[105|[115|[32|[115|[116|[97|[114|[116|[101|[100|[32|[105|[110|[32|[105|[110|[116|[101|[114|[97|[99|[116|[105|[118|[101|[32|[109|[111|[100|[101|[46|[32|[84|[111|[32|[101|[120|[105|[116|[32|[116|[104|[105|[115|[32|[109|[111|[100|[101|[44|[32|[114|[117|[110|[32|[99|[116|[58|[115|[116|[111|[112|[95|[105|[110|[116|[101|[114|[97|[99|[116|[105|[118|[101|[40|[41|[46|[10|[84|[111|[32|[101|[110|[116|[101|[114|[32|[116|[104|[101|[32|[105|[110|[116|[101|[114|[97|[99|[116|[105|[118|[101|[32|[109|[111|[100|[101|[32|[97|[103|[97|[105|[110|[44|[32|[114|[117|[110|[32|[99|[116|[58|[115|[116|[97|[114|[116|[95|[105|[110|[116|[101|[114|[97|[99|[116|[105|[118|[101|[40|[41|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1693
																																																																																																														     [])
						      %% Line 1694
						      {'error','interactive_mode'}
					      %% Line 1695
					      <_X_Pid> when 'true' ->
						  do  %% Line 1696
						      call 'ct_util':'set_testdata'
							  ({'starter',_cor90})
						      let <_cor29> =
							  %% Line 1698
							  call 'erlang':'setelement'
							      (13, Opts, Verbosity)
						      in  %% Line 1697
							  apply 'compile_and_run'/4
							      (Tests, Skip, _cor29, %% Line 1698
										    Args)
					    end
			      end
	  ( <_cor35,_cor34,_cor33,_cor32> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor35,_cor34,_cor33,_cor32})
		  -| [{'function_name',{'do_run',4}}] )
	    -| ['compiler_generated'] )
	end
'compile_and_run'/4 =
    %% Line 1702
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1704
	( case _cor1 of
	    ( <( {'opts',_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_rec99,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74}
		 -| ['compiler_generated'] )> when 'true' ->
		  do  call 'ct_util':'set_testdata'
			  ({'stylesheet',_rec99})
		      do  %% Line 1706
			  call 'ct_util':'set_testdata'
			      ({'logopts',_cor58})
			  do  %% Line 1708
			      case _cor68 of
				%% Line 1709
				<[]> when 'true' ->
				    'ok'
				%% Line 1711
				<Conns> when 'true' ->
				    %% Line 1712
				    case call 'lists':'member'
					     ('all', Conns) of
				      %% Line 1713
				      <'true'> when 'true' ->
					  let <Conns1> =
					      %% Line 1714
					      call 'ct_util':'override_silence_all_connections'
						  ()
					  in  %% Line 1715
					      call 'ct_logs':'log'
						  ([83|[105|[108|[101|[110|[116|[32|[99|[111|[110|[110|[101|[99|[116|[105|[111|[110|[115]]]]]]]]]]]]]]]]]], [126|[112]], [Conns1|[]])
				      %% Line 1716
				      <'false'> when 'true' ->
					  do  %% Line 1717
					      call 'ct_util':'override_silence_connections'
						  (Conns)
					      %% Line 1718
					      call 'ct_logs':'log'
						  ([83|[105|[108|[101|[110|[116|[32|[99|[111|[110|[110|[101|[99|[116|[105|[111|[110|[115]]]]]]]]]]]]]]]]]], [126|[112]], [Conns|[]])
				      ( <_cor11> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor11})
					-| ['compiler_generated'] )
				    end
			      end
			      do  %% Line 1721
				  apply 'log_ts_names'/1
				      (_cor72)
				  let <TestSuites> =
				      %% Line 1722
				      apply 'suite_tuples'/1
					  (_cor3)
				  in  let <_X_TestSuites1,SuiteMakeErrors,AllMakeErrors> =
					  %% Line 1725
					  case call 'application':'get_env'
						   ('common_test', 'auto_compile') of
					    %% Line 1726
					    <{'ok','false'}> when 'true' ->
						%% Line 1727
						case %% Line 1728
						     apply 'verify_suites'/1
							 (TestSuites) of
						  <{TestSuites1,SuitesNotFound}> when 'true' ->
						      %% Line 1729
						      <TestSuites1,SuitesNotFound,SuitesNotFound>
						  ( <_cor16> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor16})
						    -| ['compiler_generated'] )
						end
					    %% Line 1730
					    <_cor157> when 'true' ->
						%% Line 1731
						case apply 'auto_compile'/1
							 (TestSuites) of
						  <{SuiteErrs,HelpErrs}> when 'true' ->
						      let <_cor18> =
							  %% Line 1732
							  call 'erlang':'++'
							      (SuiteErrs, HelpErrs)
						      in  %% Line 1732
							  <TestSuites,SuiteErrs,_cor18>
						  ( <_cor17> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor17})
						    -| ['compiler_generated'] )
						end
					  end
				      in  %% Line 1735
					  case apply 'continue'/2
						   (AllMakeErrors, _cor67) of
					    %% Line 1736
					    <'true'> when 'true' ->
						let <SavedErrors> =
						    %% Line 1737
						    apply 'save_make_errors'/1
							(SuiteMakeErrors)
						in  do  %% Line 1738
							call 'ct_repeat':'log_loop_info'
							    (_cor0)
							%% Line 1740
							try
							    apply 'final_tests'/3
								(_cor3, _cor2, SavedErrors)
							of <_cor25> ->
							    case _cor25 of
							      %% Line 1741
							      <{Tests1,Skip1}> when 'true' ->
								  let <ReleaseSh> =
								      %% Line 1742
								      call 'proplists':'get_value'
									  ('release_shell', _cor0)
								  in  do  %% Line 1743
									  call 'ct_util':'set_testdata'
									      ({'release_shell',ReleaseSh})
									  let <_cor27> =
									      %% Line 1744
									      call 'erlang':'=:='
										  (ReleaseSh, 'true')
									  in  %% Line 1744
									      apply 'possibly_spawn'/4
										  (_cor27, Tests1, Skip1, _cor1)
							      ( <_cor28> when 'true' ->
								    primop 'match_fail'
									({'try_clause',_cor28})
								-| ['compiler_generated'] )
							    end
							catch <_cor31,_cor30,_cor29> ->
							    %% Line 1747
							    {'error',_cor30}
					    %% Line 1749
					    <'false'> when 'true' ->
						do  %% Line 1750
						    call 'io':'nl'
							()
						    do  %% Line 1751
							call 'ct_util':'stop'
							    ('clean')
							let <_cor42> =
							    %% Line 1754
							    ( fun (_cor39,_cor38) ->
								  case <_cor39,_cor38> of
								    <{{_cor187,_cor188},Ms},Acc> when 'true' ->
									let <_cor36> =
									    %% Line 1756
									    ( fun (_cor33,_cor32) ->
										  %% Line 1757
										  call 'lists':'delete'
										      (_cor33, _cor32)
									      -| [{'id',{0,0,'-compile_and_run/4-fun-0-'}}] )
									in  let <_cor37> =
										%% Line 1755
										call 'lists':'foldl'
										    (_cor36, %% Line 1758
											     Acc, %% Line 1758
												  Ms)
									    in  %% Line 1755
										call 'erlang':'++'
										    (Ms, _cor37)
								    ( <_cor41,_cor40> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_cor41,_cor40})
									    -| [{'function_name',{'-compile_and_run/4-fun-1-',2}}] )
								      -| ['compiler_generated'] )
								  end
							      -| [{'id',{0,0,'-compile_and_run/4-fun-1-'}}] )
							in  let <BadMods> =
								%% Line 1753
								call 'lists':'foldr'
								    (_cor42, %% Line 1759
									     [], %% Line 1759
										 AllMakeErrors)
							    in  %% Line 1760
								{'error',{'make_failed',BadMods}}
					    ( <_cor44> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor44})
					      -| ['compiler_generated'] )
					  end
	      -| ['compiler_generated'] )
	    ( <_cor75> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','opts'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'possibly_spawn'/4 =
    %% Line 1764
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'false',Tests,Skip,Opts> when 'true' ->
	      let <_cor4> =
		  catch
		      %% Line 1765
		      apply 'do_run_test'/3
			  (Tests, Skip, Opts)
	      in  %% Line 1766
		  case _cor4 of
		    %% Line 1767
		    <Error = {EType,_cor23}>
			when let <_cor6> =
			      call 'erlang':'=:='
				  (EType, 'user_error')
			  in  let <_cor7> =
				  %% Line 1768
				  call 'erlang':'=:='
				      (EType, 'error')
			      in  call 'erlang':'or'
				      (_cor6, _cor7) ->
			do  %% Line 1769
			    call 'ct_util':'stop'
				('clean')
			    %% Line 1770
			    call 'erlang':'exit'
				(Error)
		    %% Line 1771
		    <_cor24> when 'true' ->
			do  %% Line 1772
			    call 'ct_util':'stop'
				('normal')
			    _cor4
		  end
	  %% Line 1778
	  <'true',Tests,Skip,Opts> when 'true' ->
	      let <CTUtilSrv> =
		  %% Line 1779
		  call 'erlang':'whereis'
		      ('ct_util_server')
	      in  let <Supervisor> =
		      %% Line 1781
		      ( fun () ->
			    do  %% Line 1782
				call 'erlang':'process_flag'
				    ('trap_exit', 'true')
				do  %% Line 1783
				    call 'erlang':'link'
					(CTUtilSrv)
				    let <TestRun> =
					%% Line 1785
					( fun () ->
					      let <_cor10> =
						  catch
						      %% Line 1786
						      apply 'do_run_test'/3
							  (Tests, Skip, Opts)
					      in  %% Line 1787
						  case _cor10 of
						    %% Line 1788
						    <Error = {EType,_cor25}>
							when let <_cor12> =
							      call 'erlang':'=:='
								  (EType, 'user_error')
							  in  let <_cor13> =
								  %% Line 1789
								  call 'erlang':'=:='
								      (EType, 'error')
							      in  call 'erlang':'or'
								      (_cor12, _cor13) ->
							do  %% Line 1790
							    call 'ct_util':'stop'
								('clean')
							    %% Line 1791
							    call 'erlang':'exit'
								(Error)
						    %% Line 1792
						    <_cor26> when 'true' ->
							do  %% Line 1793
							    call 'ct_util':'stop'
								('normal')
							    %% Line 1794
							    call 'erlang':'exit'
								({'ok',_cor10})
						  end
					  -| [{'id',{0,0,'-possibly_spawn/4-fun-0-'}}] )
				    in  let <TestRunPid> =
					    %% Line 1797
					    call 'erlang':'spawn_link'
						(TestRun)
					in  %% Line 1798
					    receive
					      %% Line 1799
					      <{'EXIT',_cor27,{'ok',TestResult}}>
						  when call 'erlang':'=:='
							(_cor27,
							 TestRunPid) ->
						  %% Line 1800
						  call 'io':'format'
						      ('user', [126|[110|[67|[111|[109|[109|[111|[110|[32|[84|[101|[115|[116|[32|[114|[101|[116|[117|[114|[110|[101|[100|[32|[126|[112|[126|[110|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1801
																													 [TestResult|[]])
					      %% Line 1802
					      <{'EXIT',_cor28,Error}>
						  when call 'erlang':'=:='
							(_cor28,
							 TestRunPid) ->
						  %% Line 1803
						  call 'erlang':'exit'
						      (Error)
					    after 'infinity' ->
					      'true'
			-| [{'id',{0,0,'-possibly_spawn/4-fun-1-'}}] )
		  in  do  %% Line 1806
			  call 'erlang':'unlink'
			      (CTUtilSrv)
			  let <SupPid> =
			      %% Line 1807
			      call 'erlang':'spawn'
				  (Supervisor)
			  in  do  %% Line 1808
				  call 'io':'format'
				      ('user', [126|[110|[84|[101|[115|[116|[32|[99|[111|[110|[116|[114|[111|[108|[32|[104|[97|[110|[100|[101|[100|[32|[111|[118|[101|[114|[32|[116|[111|[32|[112|[114|[111|[99|[101|[115|[115|[32|[126|[119|[126|[110|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1809
																																					      [SupPid|[]])
				  %% Line 1810
				  SupPid
	  ( <_cor22,_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19})
		  -| [{'function_name',{'possibly_spawn',4}}] )
	    -| ['compiler_generated'] )
	end
'auto_compile'/1 =
    %% Line 1813
    fun (_cor0) ->
	do  %% Line 1814
	    call 'io':'format'
		([126|[110|[67|[111|[109|[109|[111|[110|[32|[84|[101|[115|[116|[58|[32|[82|[117|[110|[110|[105|[110|[103|[32|[109|[97|[107|[101|[32|[105|[110|[32|[116|[101|[115|[116|[32|[100|[105|[114|[101|[99|[116|[111|[114|[105|[101|[115|[46|[46|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	    let <_cor7> =
		%% Line 1816
		case call 'application':'get_env'
			 ('common_test', 'include') of
		  %% Line 1817
		  <{'ok',UserInclDirs}>
		      when try
			    let <_cor1> =
				call 'erlang':'length'
				    (UserInclDirs)
			    in  call 'erlang':'>'
				    (_cor1, 0)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false' ->
		      do  %% Line 1818
			  call 'io':'format'
			      ([73|[110|[99|[108|[117|[100|[105|[110|[103|[32|[116|[104|[101|[32|[102|[111|[108|[108|[111|[119|[105|[110|[103|[32|[100|[105|[114|[101|[99|[116|[111|[114|[105|[101|[115|[58|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
			  %% Line 1819
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor4) ->
					case _cor4 of
					  <[%% Line 1820
					    UserInclDir|_cor3]> when 'true' ->
					      do  call 'io':'format'
						      ([126|[112|[126|[110]]]], [UserInclDir|[]])
						  let <_cor5> =
						      %% Line 1820
						      apply 'lc$^0'/1
							  (_cor3)
						  in  ( [{'i',UserInclDir}|_cor5]
							-| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor4> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor4})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (%% Line 1820
				     UserInclDirs)
			    -| ['list_comprehension'] )
		  %% Line 1821
		  <_cor27> when 'true' ->
		      %% Line 1822
		      []
		end
	    in  let <_cor13> =
		    %% Line 1825
		    ( fun (_cor11) ->
			  case _cor11 of
			    <TS = {TestDir,Suite}> when 'true' ->
				%% Line 1826
				case apply 'run_make'/4
					 ('suites', TestDir, %% Line 1827
							     Suite, _cor7) of
				  %% Line 1828
				  <{'error',{'make_failed',Bad}}> when 'true' ->
				      %% Line 1829
				      [{TS,Bad}|[]]
				  %% Line 1830
				  <{'error',_cor28}> when 'true' ->
				      let <_cor9> =
					  %% Line 1831
					  call 'filename':'join'
					      (TestDir, %% Line 1832
							[42|[95|[83|[85|[73|[84|[69]]]]]]])
				      in  %% Line 1831
					  [{TS,[_cor9|%% Line 1832
						      []]}|%% Line 1832
							   []]
				  %% Line 1833
				  <_cor29> when 'true' ->
				      %% Line 1834
				      []
				end
			    ( <_cor12> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor12})
				    -| [{'function_name',{'-auto_compile/1-fun-0-',1}}] )
			      -| ['compiler_generated'] )
			  end
		      -| [{'id',{0,0,'-auto_compile/1-fun-0-'}}] )
		in  let <SuiteMakeErrors> =
			%% Line 1825
			call 'lists':'flatmap'
			    (_cor13, _cor0)
		    in  let <_cor23> =
			    %% Line 1841
			    ( fun (_cor20,_cor19) ->
				  case <_cor20,_cor19> of
				    <{Dir,Suite},{Done,Failed}> when 'true' ->
					%% Line 1842
					case call 'lists':'member'
						 (Dir, Done) of
					  %% Line 1843
					  <'false'> when 'true' ->
					      let <_cor16> =
						  %% Line 1845
						  case apply 'run_make'/4
							   ('helpmods', Dir, Suite, _cor7) of
						    %% Line 1846
						    <{'error',{'make_failed',BadMods}}> when 'true' ->
							%% Line 1847
							[{{Dir,'all'},BadMods}|Failed]
						    %% Line 1848
						    <{'error',_cor30}> when 'true' ->
							%% Line 1849
							[{{Dir,'all'},[Dir|[]]}|Failed]
						    %% Line 1850
						    <_cor31> when 'true' ->
							%% Line 1851
							Failed
						  end
					      in  %% Line 1853
						  {[Dir|Done],_cor16}
					  %% Line 1854
					  <'true'> when 'true' ->
					      %% Line 1855
					      {Done,Failed}
					  ( <_cor18> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor18})
					    -| ['compiler_generated'] )
					end
				    ( <_cor22,_cor21> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor22,_cor21})
					    -| [{'function_name',{'-auto_compile/1-fun-1-',2}}] )
				      -| ['compiler_generated'] )
				  end
			      -| [{'id',{0,0,'-auto_compile/1-fun-1-'}}] )
			in  %% Line 1839
			    case %% Line 1840
				 call 'lists':'foldl'
				     (_cor23, %% Line 1857
					      {[],[]}, _cor0) of
			      <{_cor32,HelpMakeErrors}> when 'true' ->
				  let <_cor25> =
				      %% Line 1858
				      call 'lists':'reverse'
					  (HelpMakeErrors)
				  in  %% Line 1858
				      {SuiteMakeErrors,_cor25}
			      ( <_cor24> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor24})
				-| ['compiler_generated'] )
			    end
'verify_suites'/1 =
    %% Line 1861
    fun (_cor0) ->
	do  %% Line 1862
	    call 'io':'nl'
		()
	    let <Verify> =
		%% Line 1864
		( fun (_cor15,_cor14) ->
		      case <_cor15,_cor14> of
			<DS = {Dir,Suite},{Found,NotFound}> when 'true' ->
			    %% Line 1865
			    case apply 'locate_test_dir'/2
				     (Dir, Suite) of
			      %% Line 1866
			      <{'ok',TestDir}> when 'true' ->
				  %% Line 1867
				  case <> of
				    <>
					when call 'erlang':'=:='
					      (Suite,
					       'all') ->
					%% Line 1868
					{[DS|Found],NotFound}
				    %% Line 1869
				    <> when 'true' ->
					let <_cor1> =
					    %% Line 1871
					    call 'erlang':'atom_to_list'
						(Suite)
					in  let <_cor2> =
						%% Line 1871
						call 'erlang':'++'
						    (_cor1, %% Line 1872
							    [46|[98|[101|[97|[109]]]]])
					    in  let <Beam> =
						    %% Line 1870
						    call 'filename':'join'
							(TestDir, _cor2)
						in  %% Line 1873
						    case call 'filelib':'is_regular'
							     (Beam) of
						      %% Line 1874
						      <'true'> when 'true' ->
							  %% Line 1875
							  {[DS|Found],NotFound}
						      %% Line 1876
						      <'false'> when 'true' ->
							  %% Line 1877
							  case call 'code':'is_loaded'
								   (Suite) of
							    %% Line 1878
							    <{'file',SuiteFile}> when 'true' ->
								let <ActualDir> =
								    %% Line 1886
								    call 'filename':'dirname'
									(SuiteFile)
								in  %% Line 1887
								    {[{ActualDir,Suite}|Found],%% Line 1888
											       NotFound}
							    %% Line 1889
							    <'false'> when 'true' ->
								let <_cor5> =
								    %% Line 1892
								    call 'erlang':'atom_to_list'
									(%% Line 1893
									 Suite)
								in  let <Name> =
									%% Line 1891
									call 'filename':'join'
									    (TestDir, _cor5)
								    in  do  %% Line 1894
									    call 'io':'format'
										('user', %% Line 1895
											 [83|[117|[105|[116|[101|[32|[126|[119|[32|[110|[111|[116|[32|[102|[111|[117|[110|[100|[32|[105|[110|[32|[100|[105|[114|[101|[99|[116|[111|[114|[121|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1897
																																						[Suite|[TestDir|[]]])
									    %% Line 1898
									    {Found,[{DS,[Name|[]]}|NotFound]}
							    ( <_cor7> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_cor7})
							      -| ['compiler_generated'] )
							  end
						      ( <_cor8> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_cor8})
							-| ['compiler_generated'] )
						    end
				  end
			      %% Line 1902
			      <{'error',_X_Reason}> when 'true' ->
				  %% Line 1903
				  case call 'code':'is_loaded'
					   (Suite) of
				    %% Line 1904
				    <{'file',SuiteFile}> when 'true' ->
					let <ActualDir> =
					    %% Line 1908
					    call 'filename':'dirname'
						(SuiteFile)
					in  %% Line 1909
					    {[{ActualDir,Suite}|Found],NotFound}
				    %% Line 1910
				    <'false'> when 'true' ->
					do  %% Line 1911
					    call 'io':'format'
						('user', [68|[105|[114|[101|[99|[116|[111|[114|[121|[32|[126|[116|[115|[32|[105|[115|[32|[105|[110|[118|[97|[108|[105|[100|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1912
																										[Dir|[]])
					    let <_cor10> =
						%% Line 1913
						call 'erlang':'atom_to_list'
						    (Suite)
					    in  let <Name> =
						    %% Line 1913
						    call 'filename':'join'
							(Dir, _cor10)
						in  %% Line 1914
						    {Found,[{DS,[Name|[]]}|NotFound]}
				    ( <_cor12> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor12})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor13> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor13})
				-| ['compiler_generated'] )
			    end
			( <_cor17,_cor16> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor17,_cor16})
				-| [{'function_name',{'-verify_suites/1-fun-0-',2}}] )
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-verify_suites/1-fun-0-'}}] )
	    in  %% Line 1918
		case call 'lists':'foldl'
			 (Verify, {[],[]}, _cor0) of
		  <{ActualFound,Missing}> when 'true' ->
		      let <_cor21> =
			  %% Line 1919
			  call 'lists':'reverse'
			      (ActualFound)
		      in  let <_cor20> =
			      %% Line 1919
			      call 'lists':'reverse'
				  (Missing)
			  in  %% Line 1919
			      {_cor21,_cor20}
		  ( <_cor19> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor19})
		    -| ['compiler_generated'] )
		end
'save_make_errors'/1 =
    %% Line 1921
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 1922
	      []
	  %% Line 1923
	  <Errors> when 'true' ->
	      let <Suites> =
		  %% Line 1924
		  apply 'get_bad_suites'/2
		      (Errors, [])
	      in  do  %% Line 1925
		      call 'ct_logs':'log'
			  ([77|[65|[75|[69|[32|[82|[69|[83|[85|[76|[84|[83]]]]]]]]]]]], %% Line 1926
											[69|[114|[114|[111|[114|[32|[99|[111|[109|[112|[105|[108|[105|[110|[103|[32|[111|[114|[32|[108|[111|[99|[97|[116|[105|[110|[103|[32|[116|[104|[101|[32|[102|[111|[108|[108|[111|[119|[105|[110|[103|[32|[115|[117|[105|[116|[101|[115|[58|[32|[126|[110|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1927
																																																		 [Suites|[]])
		      let <_cor2> =
			  %% Line 1929
			  call 'erlang':'term_to_binary'
			      (Errors)
		      in  do  %% Line 1929
			      call 'file':'write_file'
				  ([109|[105|[115|[115|[105|[110|[103|[95|[115|[117|[105|[116|[101|[115|[46|[105|[110|[102|[111]]]]]]]]]]]]]]]]]]], _cor2)
			      %% Line 1930
			      Errors
	end
'get_bad_suites'/2 =
    %% Line 1932
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{{_X_TestDir,_X_Suite},Failed}|Errors],BadSuites> when 'true' ->
	      let <_cor2> =
		  %% Line 1933
		  call 'erlang':'++'
		      (BadSuites, Failed)
	      in  %% Line 1933
		  apply 'get_bad_suites'/2
		      (Errors, _cor2)
	  %% Line 1934
	  <[],BadSuites> when 'true' ->
	      %% Line 1935
	      BadSuites
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'get_bad_suites',2}}] )
	    -| ['compiler_generated'] )
	end
'step'/3 =
    %% Line 1942
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1943
	apply 'step'/4
	    (_cor2, _cor1, _cor0, [])
'step'/4 =
    %% Line 1948
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <TestDir,Suite,Case,Opts>
	      when try
		    let <_cor4> =
			call 'erlang':'is_list'
			    (TestDir)
		    in  let <_cor5> =
			    %% Line 1949
			    call 'erlang':'is_atom'
				(Suite)
			in  let <_cor6> =
				%% Line 1949
				call 'erlang':'is_atom'
				    (Case)
			    in  let <_cor7> =
				    %% Line 1950
				    call 'erlang':'=/='
					(Suite, 'all')
				in  let <_cor8> =
					%% Line 1950
					call 'erlang':'=/='
					    (Case, 'all')
				    in  let <_cor9> =
					    call 'erlang':'and'
						(_cor7, _cor8)
					in  let <_cor10> =
						call 'erlang':'and'
						    (_cor6, _cor9)
					    in  let <_cor11> =
						    call 'erlang':'and'
							(_cor5, _cor10)
						in  call 'erlang':'and'
							(_cor4, _cor11)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1951
	      apply 'do_run'/2
		  ([{TestDir,Suite,Case}|[]], [{'step',Opts}|[]])
	  ( <_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'step',4}}] )
	    -| ['compiler_generated'] )
	end
'suite_tuples'/1 =
    %% Line 1956
    fun (_cor0) ->
	case _cor0 of
	  <[{TestDir,Suites,_cor8}|Tests]>
	      when call 'erlang':'is_list'
		    (Suites) ->
	      let <_cor4> =
		  %% Line 1957
		  ( fun (_cor2) ->
			{TestDir,_cor2}
		    -| [{'id',{0,0,'-suite_tuples/1-fun-0-'}}] )
	      in  let <_cor5> =
		      %% Line 1957
		      call 'lists':'map'
			  (_cor4, Suites)
		  in  let <_cor1> =
			  %% Line 1957
			  apply 'suite_tuples'/1
			      (Tests)
		      in  %% Line 1957
			  call 'erlang':'++'
			      (_cor5, _cor1)
	  %% Line 1958
	  <[{TestDir,Suite,_cor9}|Tests]>
	      when call 'erlang':'is_atom'
		    (Suite) ->
	      let <_cor6> =
		  %% Line 1959
		  apply 'suite_tuples'/1
		      (Tests)
	      in  %% Line 1959
		  [{TestDir,Suite}|_cor6]
	  %% Line 1960
	  <[]> when 'true' ->
	      %% Line 1961
	      []
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'suite_tuples',1}}] )
	    -| ['compiler_generated'] )
	end
'final_tests'/3 =
    %% Line 1963
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1964
	case apply 'final_tests1'/4
		 (_cor2, [], _cor1, _cor0) of
	  <{Tests1,Skip1}> when 'true' ->
	      let <Skip2> =
		  %% Line 1965
		  apply 'final_skip'/2
		      (Skip1, [])
	      in  %% Line 1966
		  {Tests1,Skip2}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'final_tests1'/4 =
    %% Line 1968
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{TestDir,Suites,_cor65}|Tests],Final,Skip,Bad>
	      when %% Line 1969
		try
		    let <_cor4> =
			call 'erlang':'is_list'
			    (Suites)
		    in  let <_cor5> =
			    call 'erlang':'hd'
				(Suites)
			in  let <_cor6> =
				call 'erlang':'is_atom'
				    (_cor5)
			    in  call 'erlang':'and'
				    (_cor4, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor16> =
		  %% Line 1985
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor13) ->
				case _cor13 of
				  <[{{TD,S},_cor66}|_cor8]> when 'true' ->
				      ( letrec
					    'lc$^1'/1 =
						fun (_cor14) ->
						    case _cor14 of
						      <[S1|_cor10]>
							  when let <_cor11> =
								%% Line 1986
								call 'erlang':'=='
								    (S, S1)
							    in  let <_cor12> =
								    %% Line 1986
								    call 'erlang':'=='
									(TD, TestDir)
								in  %% Line 1986
								    call 'erlang':'and'
									(_cor11, _cor12) ->
							  let <_cor15> =
							      apply 'lc$^1'/1
								  (_cor10)
							  in  ( [{TD,S,[77|[97|[107|[101|[32|[102|[97|[105|[108|[101|[100]]]]]]]]]]]}|_cor15]
								-| ['compiler_generated'] )
						      ( <[S1|_cor10]> when 'true' ->
							    apply 'lc$^1'/1
								(_cor10)
							-| ['compiler_generated'] )
						      <[]> when 'true' ->
							  apply 'lc$^0'/1
							      (_cor8)
						      ( <_cor14> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor14})
							      -| [{'function_name',{'lc$^1',1}}] )
							-| ['compiler_generated'] )
						    end
					in  apply 'lc$^1'/1
						(Suites)
					-| ['list_comprehension'] )
				  ( <[_cor7|_cor8]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor8)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor13> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor13})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Bad)
		    -| ['list_comprehension'] )
	      in  let <_cor22> =
		      %% Line 1987
		      ( letrec
			    'lc$^2'/1 =
				fun (_cor20) ->
				    case _cor20 of
				      <[S|_cor19]> when 'true' ->
					  let <_cor21> =
					      apply 'lc$^2'/1
						  (_cor19)
					  in  ( [{TestDir,S,'all'}|_cor21]
						-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor20> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor20})
					      -| [{'function_name',{'lc$^2',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^2'/1
				(Suites)
			-| ['list_comprehension'] )
		  in  let <_cor25> =
			  %% Line 1988
			  call 'lists':'reverse'
			      (_cor22)
		      in  let <_cor26> =
			      %% Line 1988
			      call 'erlang':'++'
				  (_cor25, Final)
			  in  let <_cor24> =
				  %% Line 1988
				  call 'erlang':'++'
				      (Skip, _cor16)
			      in  %% Line 1988
				  apply 'final_tests1'/4
				      (Tests, _cor26, _cor24, Bad)
	  %% Line 1990
	  <[{TestDir,'all','all'}|Tests],Final,Skip,Bad> when 'true' ->
	      let <_cor34> =
		  %% Line 1992
		  case call 'lists':'keysearch'
			   ({TestDir,'all'}, 1, Bad) of
		    %% Line 1993
		    <{'value',{_cor67,Failed}}> when 'true' ->
			%% Line 1994
			( letrec
			      'lc$^3'/1 =
				  fun (_cor29) ->
				      case _cor29 of
					<[F|_cor28]> when 'true' ->
					    let <_cor30> =
						call 'filename':'basename'
						    (F)
					    in  let <_cor31> =
						    call 'erlang':'list_to_atom'
							(_cor30)
						in  let <_cor32> =
							apply 'lc$^3'/1
							    (_cor28)
						    in  ( [_cor31|_cor32]
							  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor29> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor29})
						-| [{'function_name',{'lc$^3',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^3'/1
				  (Failed)
			  -| ['list_comprehension'] )
		    %% Line 1995
		    <'false'> when 'true' ->
			%% Line 1996
			[]
		    ( <_cor33> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor33})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor40> =
		      %% Line 1998
		      ( letrec
			    'lc$^4'/1 =
				fun (_cor38) ->
				    case _cor38 of
				      <[S|_cor37]> when 'true' ->
					  let <_cor39> =
					      apply 'lc$^4'/1
						  (_cor37)
					  in  ( [{TestDir,S,[77|[97|[107|[101|[32|[102|[97|[105|[108|[101|[100]]]]]]]]]]]}|_cor39]
						-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor38> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor38})
					      -| [{'function_name',{'lc$^4',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^4'/1
				(_cor34)
			-| ['list_comprehension'] )
		  in  let <Final1> =
			  %% Line 1999
			  [{TestDir,'all','all'}|Final]
		      in  let <_cor43> =
			      %% Line 2000
			      call 'erlang':'++'
				  (Skip, _cor40)
			  in  %% Line 2000
			      apply 'final_tests1'/4
				  (Tests, Final1, _cor43, Bad)
	  %% Line 2002
	  <[{TestDir,Suite,Cases}|Tests],Final,Skip,Bad>
	      when let <_cor44> =
		    %% Line 2003
		    call 'erlang':'=:='
			(Cases, [])
		in  let <_cor45> =
			%% Line 2003
			call 'erlang':'=:='
			    (Cases, 'all')
		    in  %% Line 2003
			call 'erlang':'or'
			    (_cor44, _cor45) ->
	      %% Line 2004
	      apply 'final_tests1'/4
		  ([{TestDir,[Suite|[]],'all'}|Tests], Final, Skip, Bad)
	  %% Line 2006
	  <[{TestDir,Suite,GrsOrCs}|Tests],Final,Skip,Bad>
	      when %% Line 2007
		call 'erlang':'is_list'
		    (GrsOrCs) ->
	      %% Line 2008
	      case call 'lists':'keymember'
		       ({TestDir,Suite}, 1, Bad) of
		%% Line 2009
		<'true'> when 'true' ->
		    let <Skip1> =
			%% Line 2010
			call 'erlang':'++'
			    (Skip, [{TestDir,Suite,'all',[77|[97|[107|[101|[32|[102|[97|[105|[108|[101|[100]]]]]]]]]]]}|[]])
		    in  %% Line 2011
			apply 'final_tests1'/4
			    (Tests, [{TestDir,Suite,'all'}|Final], Skip1, Bad)
		%% Line 2012
		<'false'> when 'true' ->
		    let <_cor56> =
			%% Line 2017
			( fun (_cor54) ->
			      case _cor54 of
				<{'all','all'}> when 'true' ->
				    let <_cor47> =
					%% Line 2018
					call 'ct_groups':'make_conf'
					    (TestDir, Suite, 'all', [], 'all')
				    in  %% Line 2018
					[_cor47|[]]
				%% Line 2019
				<{'skipped',Group,TCs}> when 'true' ->
				    let <_cor48> =
					%% Line 2020
					call 'ct_groups':'make_conf'
					    (TestDir, Suite, %% Line 2021
							     Group, %% Line 2021
								    ['skipped'], %% Line 2021
										 TCs)
				    in  %% Line 2020
					[_cor48|%% Line 2021
						[]]
				%% Line 2022
				<{GrSpec = {GroupName,_cor68},TCs}> when 'true' ->
				    let <Props> =
					%% Line 2023
					[{'override',GrSpec}|[]]
				    in  let <_cor50> =
					    %% Line 2024
					    call 'ct_groups':'make_conf'
						(TestDir, Suite, %% Line 2025
								 GroupName, %% Line 2025
									    Props, %% Line 2025
										   TCs)
					in  %% Line 2024
					    [_cor50|%% Line 2025
						    []]
				%% Line 2026
				<{GrSpec = {GroupName,_cor69,_cor70},TCs}> when 'true' ->
				    let <Props> =
					%% Line 2027
					[{'override',GrSpec}|[]]
				    in  let <_cor52> =
					    %% Line 2028
					    call 'ct_groups':'make_conf'
						(TestDir, Suite, %% Line 2029
								 GroupName, %% Line 2029
									    Props, %% Line 2029
										   TCs)
					in  %% Line 2028
					    [_cor52|%% Line 2029
						    []]
				%% Line 2030
				<{GroupOrGroups,TCs}> when 'true' ->
				    let <_cor53> =
					%% Line 2031
					call 'ct_groups':'make_conf'
					    (TestDir, Suite, %% Line 2032
							     GroupOrGroups, %% Line 2032
									    [], %% Line 2032
										TCs)
				    in  %% Line 2031
					[_cor53|%% Line 2032
						[]]
				%% Line 2033
				<TC> when 'true' ->
				    %% Line 2034
				    [TC|[]]
			      end
			  -| [{'id',{0,0,'-final_tests1/4-fun-0-'}}] )
		    in  let <GrsOrCs1> =
			    %% Line 2014
			    call 'lists':'flatmap'
				(_cor56, %% Line 2035
					 GrsOrCs)
			in  let <Do> = {%% Line 2036
				 TestDir,%% Line 2036
					 Suite,%% Line 2036
					       GrsOrCs1}
			    in  %% Line 2037
				apply 'final_tests1'/4
				    (Tests, [Do|Final], Skip, Bad)
		( <_cor59> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor59})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2040
	  <[],Final,Skip,_X_Bad> when 'true' ->
	      let <_cor60> =
		  %% Line 2041
		  call 'lists':'reverse'
		      (Final)
	      in  %% Line 2041
		  {_cor60,Skip}
	  ( <_cor64,_cor63,_cor62,_cor61> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor64,_cor63,_cor62,_cor61})
		  -| [{'function_name',{'final_tests1',4}}] )
	    -| ['compiler_generated'] )
	end
'final_skip'/2 =
    %% Line 2043
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{TestDir,Suite,{'all','all'},Reason}|Skips],Final> when 'true' ->
	      let <SkipConf> =
		  %% Line 2044
		  call 'ct_groups':'make_conf'
		      (TestDir, Suite, 'all', [], 'all')
	      in  let <Skip> =
		      %% Line 2045
		      {TestDir,Suite,SkipConf,Reason}
		  in  %% Line 2046
		      apply 'final_skip'/2
			  (Skips, [Skip|Final])
	  %% Line 2048
	  <[{TestDir,Suite,{Group,TCs},Reason}|Skips],Final> when 'true' ->
	      let <Conf> =
		  %% Line 2049
		  call 'ct_groups':'make_conf'
		      (TestDir, Suite, Group, [], TCs)
	      in  let <Skip> =
		      %% Line 2050
		      {TestDir,Suite,Conf,Reason}
		  in  %% Line 2051
		      apply 'final_skip'/2
			  (Skips, [Skip|Final])
	  %% Line 2053
	  <[Skip|Skips],Final> when 'true' ->
	      %% Line 2054
	      apply 'final_skip'/2
		  (Skips, [Skip|Final])
	  %% Line 2056
	  <[],Final> when 'true' ->
	      %% Line 2057
	      call 'lists':'reverse'
		  (Final)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'final_skip',2}}] )
	    -| ['compiler_generated'] )
	end
'continue'/2 =
    %% Line 2059
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_cor13> when 'true' ->
	      %% Line 2060
	      'true'
	  %% Line 2061
	  <_X_MakeErrors,AbortIfMissingSuites> when 'true' ->
	      do  %% Line 2062
		  call 'io':'nl'
		      ()
		  let <OldGl> =
		      %% Line 2063
		      call 'erlang':'group_leader'
			  ()
		  in  %% Line 2064
		      case apply 'set_group_leader_same_as_shell'/0
			       () of
			%% Line 2065
			<'true'> when 'true' ->
			    let <S> =
				%% Line 2066
				call 'erlang':'self'
				    ()
			    in  do  %% Line 2067
				    call 'io':'format'
					([70|[97|[105|[108|[101|[100|[32|[116|[111|[32|[99|[111|[109|[112|[105|[108|[101|[32|[111|[114|[32|[108|[111|[99|[97|[116|[101|[32|[111|[110|[101|[32|[111|[114|[32|[109|[111|[114|[101|[32|[116|[101|[115|[116|[32|[115|[117|[105|[116|[101|[115|[10|[80|[114|[101|[115|[115|[32|[39|[99|[39|[32|[116|[111|[32|[99|[111|[110|[116|[105|[110|[117|[101|[32|[111|[114|[32|[39|[97|[39|[32|[116|[111|[32|[97|[98|[111|[114|[116|[46|[10|[87|[105|[108|[108|[32|[99|[111|[110|[116|[105|[110|[117|[101|[32|[105|[110|[32|[49|[53|[32|[115|[101|[99|[111|[110|[100|[115|[32|[105|[102|[32|[110|[111|[32|[97|[110|[115|[119|[101|[114|[32|[105|[115|[32|[103|[105|[118|[101|[110|[33|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
				    let <_cor5> =
					%% Line 2072
					( fun () ->
					      %% Line 2073
					      case call 'io':'get_line'
						       ('(c/a) ') of
						%% Line 2074
						<[99|[10]]> when 'true' ->
						    %% Line 2075
						    call 'erlang':'!'
							(S, 'true')
						%% Line 2076
						<_cor14> when 'true' ->
						    %% Line 2077
						    call 'erlang':'!'
							(S, 'false')
					      end
					  -| [{'id',{0,0,'-continue/2-fun-0-'}}] )
				    in  let <Pid> =
					    %% Line 2072
					    call 'erlang':'spawn'
						(_cor5)
					in  let <_cor7> =
						%% Line 2080
						call 'erlang':'self'
						    ()
					    in  do  %% Line 2080
						    call 'erlang':'group_leader'
							(OldGl, _cor7)
						    %% Line 2081
						    receive
						      <R>
							  when let <_cor8> =
								call 'erlang':'=:='
								    (R, 'true')
							    in  let <_cor9> =
								    call 'erlang':'=:='
									(R, 'false')
								in  call 'erlang':'or'
									(_cor8, _cor9) ->
							  %% Line 2082
							  R
						    after %% Line 2083
							  15000 ->
						      do  %% Line 2084
							  call 'erlang':'exit'
							      (Pid, 'kill')
							  do  %% Line 2085
							      call 'io':'format'
								  ([46|[46|[46|[32|[116|[105|[109|[101|[111|[117|[116|[32|[45|[32|[99|[111|[110|[116|[105|[110|[117|[105|[110|[103|[33|[33|[10]]]]]]]]]]]]]]]]]]]]]]]]]]])
							      %% Line 2086
							      'true'
			%% Line 2088
			<'false'> when 'true' ->
			    %% Line 2089
			    call 'erlang':'not'
				(AbortIfMissingSuites)
			( <_cor10> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor10})
			  -| ['compiler_generated'] )
		      end
	end
'set_group_leader_same_as_shell'/0 =
    %% Line 2092
    fun () ->
	let <GS2or3> =
	    %% Line 2094
	    ( fun (_cor3) ->
		  %% Line 2095
		  case call 'erlang':'process_info'
			   (_cor3, 'initial_call') of
		    %% Line 2096
		    <{'initial_call',{'group','server',X}}>
			when let <_cor0> =
			      call 'erlang':'=='
				  (X, 2)
			  in  let <_cor1> =
				  call 'erlang':'=='
				      (X, 3)
			      in  call 'erlang':'or'
				      (_cor0, _cor1) ->
			%% Line 2097
			'true'
		    %% Line 2098
		    <_cor19> when 'true' ->
			%% Line 2099
			'false'
		  end
	      -| [{'id',{0,0,'-set_group_leader_same_as_shell/0-fun-0-'}}] )
	in  let <_cor16> =
		%% Line 2102
		( letrec
		      'lc$^0'/1 =
			  fun (_cor12) ->
			      case _cor12 of
				<[P|_cor7]> when 'true' ->
				    ( case apply GS2or3
					       (P) of
					<'true'> when 'true' ->
					    let <_cor9> =
						%% Line 2104
						call 'erlang':'process_info'
						    (P, 'dictionary')
					    in  let <_cor10> =
						    %% Line 2104
						    call 'erlang':'element'
							(2, _cor9)
						in  let <_cor11> =
							%% Line 2103
							call 'lists':'keymember'
							    ('shell', 1, _cor10)
						    in  %% Line 2103
							( case <> of
							    <>
								when call 'erlang':'=:='
								      ('true',
								       _cor11) ->
								let <_cor13> =
								    apply 'lc$^0'/1
									(_cor7)
								in  ( [P|_cor13]
								      -| ['compiler_generated'] )
							    ( <> when 'true' ->
								  apply 'lc$^0'/1
								      (_cor7)
							      -| ['compiler_generated'] )
							  end
							  -| ['list_comprehension'] )
					( <'false'> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor7)
					  -| ['compiler_generated'] )
					( <_cor15> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor15})
					  -| ['compiler_generated'] )
				      end
				      -| ['list_comprehension'] )
				<[]> when 'true' ->
				    []
				( <_cor12> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor12})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  let <_cor8> =
			  call 'erlang':'processes'
			      ()
		      in  apply 'lc$^0'/1
			      (_cor8)
		  -| ['list_comprehension'] )
	    in  %% Line 2102
		case _cor16 of
		  %% Line 2105
		  <[GL|_cor20]> when 'true' ->
		      let <_cor17> =
			  %% Line 2106
			  call 'erlang':'self'
			      ()
		      in  %% Line 2106
			  call 'erlang':'group_leader'
			      (GL, _cor17)
		  %% Line 2107
		  <[]> when 'true' ->
		      %% Line 2108
		      'false'
		  ( <_cor18> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor18})
		    -| ['compiler_generated'] )
		end
'check_and_add'/3 =
    %% Line 2111
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{TestDir0,M,_cor12}|Tests],Added,PA> when 'true' ->
	      %% Line 2112
	      case apply 'locate_test_dir'/2
		       (TestDir0, M) of
		%% Line 2113
		<{'ok',TestDir}> when 'true' ->
		    %% Line 2114
		    case call 'lists':'member'
			     (TestDir, Added) of
		      %% Line 2115
		      <'true'> when 'true' ->
			  %% Line 2116
			  apply 'check_and_add'/3
			      (Tests, Added, PA)
		      %% Line 2117
		      <'false'> when 'true' ->
			  let <_cor4> =
			      %% Line 2118
			      apply 'rm_trailing_slash'/1
				  (TestDir)
			  in  let <_cor3> =
				  %% Line 2119
				  call 'code':'get_path'
				      ()
			      in  %% Line 2118
				  case call 'lists':'member'
					   (_cor4, _cor3) of
				    %% Line 2120
				    <'false'> when 'true' ->
					%% Line 2121
					case call 'code':'add_patha'
						 (TestDir) of
					  <'true'> when 'true' ->
					      %% Line 2122
					      apply 'check_and_add'/3
						  (Tests, [TestDir|Added], [TestDir|PA])
					  ( <_cor5> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor5})
					    -| ['compiler_generated'] )
					end
				    %% Line 2123
				    <'true'> when 'true' ->
					%% Line 2124
					apply 'check_and_add'/3
					    (Tests, [TestDir|Added], PA)
				    ( <_cor6> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor6})
				      -| ['compiler_generated'] )
				  end
		      ( <_cor7> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor7})
			-| ['compiler_generated'] )
		    end
		%% Line 2127
		<{'error',_cor13}> when 'true' ->
		    %% Line 2128
		    {'error',{'invalid_directory',TestDir0}}
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2130
	  <[],_cor14,PA> when 'true' ->
	      %% Line 2131
	      {'ok',PA}
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'check_and_add',3}}] )
	    -| ['compiler_generated'] )
	end
'do_run_test'/3 =
    %% Line 2133
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2134
	case apply 'check_and_add'/3
		 (_cor2, [], []) of
	  %% Line 2135
	  <{'ok',AddedToPath}> when 'true' ->
	      do  %% Line 2136
		  call 'ct_util':'set_testdata'
		      ({'stats',{0,0,{0,0}}})
		  do  %% Line 2137
		      call 'test_server_ctrl':'start_link'
			  ('local')
		      %% Line 2140
		      case apply 'count_test_cases'/2
			       (_cor2, _cor1) of
			<{Suites,NoOfCases}> when 'true' ->
			    let <Suites1> =
				%% Line 2141
				apply 'delete_dups'/1
				    (Suites)
			    in  let <NoOfTests> =
				    %% Line 2142
				    call 'erlang':'length'
					(_cor2)
				in  let <NoOfSuites> =
					%% Line 2143
					call 'erlang':'length'
					    (Suites1)
				    in  do  %% Line 2144
					    call 'ct_util':'warn_duplicates'
						(Suites1)
					    %% Line 2145
					    case call 'file':'get_cwd'
						     () of
					      <{'ok',Cwd}> when 'true' ->
						  do  %% Line 2146
						      call 'io':'format'
							  ([126|[110|[67|[87|[68|[32|[115|[101|[116|[32|[116|[111|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]], [Cwd|[]])
						      do  %% Line 2147
							  case <> of
							    <>
								when call 'erlang':'=:='
								      (NoOfCases,
								       'unknown') ->
								do  %% Line 2148
								    call 'io':'format'
									([126|[110|[84|[69|[83|[84|[32|[73|[78|[70|[79|[58|[32|[126|[119|[32|[116|[101|[115|[116|[40|[115|[41|[44|[32|[126|[119|[32|[115|[117|[105|[116|[101|[40|[115|[41|[126|[110|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2149
																																				       [NoOfTests|[NoOfSuites|[]]])
								    %% Line 2150
								    call 'ct_logs':'log'
									([84|[69|[83|[84|[32|[73|[78|[70|[79]]]]]]]]], [126|[119|[32|[116|[101|[115|[116|[40|[115|[41|[44|[32|[126|[119|[32|[115|[117|[105|[116|[101|[40|[115|[41]]]]]]]]]]]]]]]]]]]]]]], %% Line 2151
																															  [NoOfTests|[NoOfSuites|[]]])
							    %% Line 2152
							    <> when 'true' ->
								do  %% Line 2153
								    call 'io':'format'
									([126|[110|[84|[69|[83|[84|[32|[73|[78|[70|[79|[58|[32|[126|[119|[32|[116|[101|[115|[116|[40|[115|[41|[44|[32|[126|[119|[32|[99|[97|[115|[101|[40|[115|[41|[32|[105|[110|[32|[126|[119|[32|[115|[117|[105|[116|[101|[40|[115|[41|[126|[110|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2155
																																														    [NoOfTests|[NoOfCases|[NoOfSuites|[]]]])
								    %% Line 2156
								    call 'ct_logs':'log'
									([84|[69|[83|[84|[32|[73|[78|[70|[79]]]]]]]]], [126|[119|[32|[116|[101|[115|[116|[40|[115|[41|[44|[32|[126|[119|[32|[99|[97|[115|[101|[40|[115|[41|[32|[105|[110|[32|[126|[119|[32|[115|[117|[105|[116|[101|[40|[115|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2158
																																								       [NoOfTests|[NoOfCases|[NoOfSuites|[]]]])
							  end
							  %% Line 2162
							  ( case _cor0 of
							      ( <( {'opts',_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_rec104,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68}
								   -| ['compiler_generated'] )> when 'true' ->
								    do  case call 'proplists':'get_value'
										 ('default', _rec104) of
									  %% Line 2163
									  <VLvl>
									      when try
										    let <_cor10> =
											call 'erlang':'is_integer'
											    (VLvl)
										    in  let <_cor11> =
											    call 'erlang':'-'
												(100, VLvl)
											in  let <_cor12> =
												call 'erlang':'<'
												    (50, _cor11)
											    in  call 'erlang':'and'
												    (_cor10, _cor12)
										of <Try> ->
										    Try
										catch <T,R> ->
										    'false' ->
									      %% Line 2164
									      call 'test_server_ctrl':'reject_io_reqs'
										  ('true')
									  %% Line 2165
									  <_X_Lower> when 'true' ->
									      'ok'
									end
									do  %% Line 2168
									    call 'test_server_ctrl':'multiply_timetraps'
										(_cor63)
									    do  %% Line 2169
										call 'test_server_ctrl':'scale_timetraps'
										    (_cor64)
										let <_cor20> =
										    %% Line 2171
										    apply 'choose_val'/2
											(_cor65, %% Line 2173
												 'auto_per_run')
										in  do  %% Line 2171
											call 'test_server_ctrl':'create_priv_dir'
											    (_cor20)
											%% Line 2175
											case call 'ct_logs':'get_log_dir'
												 ('true') of
											  <{'ok',LogDir}> when 'true' ->
											      %% Line 2176
											      case apply 'maybe_start_cover'/2
												       (_cor0, LogDir) of
												<{TsCoverInfo,Opts}> when 'true' ->
												    let <_cor23> =
													%% Line 2179
													call 'erlang':'node'
													    ()
												    in  do  %% Line 2178
													    call 'ct_event':'notify'
														({'event','start_info',_cor23,%% Line 2180
																	      {NoOfTests,NoOfSuites,NoOfCases}})
													    let <CleanUp> =
														%% Line 2181
														apply 'add_jobs'/4
														    (_cor2, _cor1, Opts, [])
													    in  let <_cor25> =
														    %% Line 2182
														    call 'erlang':'whereis'
															('test_server_ctrl')
														in  do  %% Line 2182
															call 'erlang':'unlink'
															    (_cor25)
															do  catch
																%% Line 2183
																call 'test_server_ctrl':'wait_finish'
																    ()
															    do  %% Line 2185
																apply 'maybe_stop_cover'/3
																    (Opts, TsCoverInfo, LogDir)
																do  %% Line 2189
																    case call 'ct_util':'get_testdata'
																	     ('interpret') of
																      %% Line 2190
																      <{_X_What,'kill',{TCPid,AttPid}}> when 'true' ->
																	  %% Line 2191
																	  call 'ct_util':'kill_attached'
																	      (TCPid, AttPid)
																      %% Line 2192
																      <_cor151> when 'true' ->
																	  'ok'
																    end
																    let <_cor31> =
																	%% Line 2195
																	( fun (_cor29) ->
																	      %% Line 2196
																	      ( case Opts of
																		  ( <( {'opts',_cor152,_cor153,_cor154,_cor155,_cor156,_cor157,_cor158,_rec108,_cor159,_cor160,_cor161,_cor162,_cor163,_cor164,_cor165,_cor166,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_cor177}
																		       -| ['compiler_generated'] )> when 'true' ->
																			apply 'maybe_cleanup_interpret'/2
																			    (_cor29, _rec108)
																		    -| ['compiler_generated'] )
																		  ( <_cor178> when 'true' ->
																			( call ( 'erlang'
																				 -| ['compiler_generated'] ):( 'error'
																							       -| ['compiler_generated'] )
																			      (( {'badrecord','opts'}
																				 -| ['compiler_generated'] ))
																			  -| ['compiler_generated'] )
																		    -| ['compiler_generated'] )
																		end
																		-| ['compiler_generated'] )
																	  -| [{'id',{0,0,'-do_run_test/3-fun-0-'}}] )
																    in  do  %% Line 2195
																	    call 'lists':'foreach'
																		(_cor31, %% Line 2197
																			 CleanUp)
																	    do  %% Line 2198
																		( letrec
																		      'lc$^0'/1 =
																			  fun (_cor34) ->
																			      case _cor34 of
																				<[Dir|_cor33]> when 'true' ->
																				    do  call 'code':'del_path'
																					    (Dir)
																					apply 'lc$^0'/1
																					    (_cor33)
																				<[]> when 'true' ->
																				    []
																				( <_cor34> when 'true' ->
																				      ( primop 'match_fail'
																					    ({'function_clause',_cor34})
																					-| [{'function_name',{'lc$^0',1}}] )
																				  -| ['compiler_generated'] )
																			      end
																		  in  apply 'lc$^0'/1
																			  (AddedToPath)
																		  -| ['list_comprehension'] )
																		do  %% Line 2202
																		    case call 'ct_util':'get_testdata'
																			     ('severe_error') of
																		      %% Line 2203
																		      <'undefined'> when 'true' ->
																			  'ok'
																		      %% Line 2204
																		      <SevereError> when 'true' ->
																			  do  %% Line 2205
																			      call 'ct_logs':'log'
																				  ([83|[69|[86|[69|[82|[69|[32|[69|[82|[82|[79|[82]]]]]]]]]]]], [126|[112|[10]]], [SevereError|[]])
																			      %% Line 2206
																			      call 'erlang':'exit'
																				  (SevereError)
																		    end
																		    %% Line 2209
																		    case call 'ct_util':'get_testdata'
																			     ('stats') of
																		      %% Line 2210
																		      <Stats = {_X_Ok,_X_Failed,{_X_UserSkipped,_X_AutoSkipped}}> when 'true' ->
																			  %% Line 2211
																			  Stats
																		      %% Line 2212
																		      <_cor179> when 'true' ->
																			  %% Line 2213
																			  {'error','test_result_unknown'}
																		    end
												( <_cor22> when 'true' ->
												      primop 'match_fail'
													  ({'badmatch',_cor22})
												  -| ['compiler_generated'] )
											      end
											  ( <_cor21> when 'true' ->
												primop 'match_fail'
												    ({'badmatch',_cor21})
											    -| ['compiler_generated'] )
											end
								-| ['compiler_generated'] )
							      ( <_cor69> when 'true' ->
								    ( call ( 'erlang'
									     -| ['compiler_generated'] ):( 'error'
													   -| ['compiler_generated'] )
									  (( {'badrecord','opts'}
									     -| ['compiler_generated'] ))
								      -| ['compiler_generated'] )
								-| ['compiler_generated'] )
							    end
							    -| ['compiler_generated'] )
					      ( <_cor7> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor7})
						-| ['compiler_generated'] )
					    end
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor3})
			  -| ['compiler_generated'] )
		      end
	  %% Line 2215
	  <Error> when 'true' ->
	      %% Line 2216
	      call 'erlang':'exit'
		  (Error)
	end
'maybe_start_cover'/2 =
    %% Line 2219
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Opts = {'opts',_cor12,_cor13,_cor14,_cor15,Cover,CoverStop0,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36},LogDir> when 'true' ->
	      %% Line 2220
	      case <> of
		<>
		    when call 'erlang':'=:='
			  (Cover,
			   'undefined') ->
		    %% Line 2221
		    {'undefined',Opts}
		%% Line 2222
		<> when 'true' ->
		    %% Line 2223
		    case call 'ct_cover':'get_spec'
			     (Cover) of
		      %% Line 2224
		      <{'error',Reason}> when 'true' ->
			  %% Line 2225
			  call 'erlang':'exit'
			      ({'error',Reason})
		      %% Line 2226
		      <CoverSpec> when 'true' ->
			  let <_cor3> =
			      %% Line 2228
			      case CoverStop0 of
				%% Line 2229
				<'undefined'> when 'true' ->
				    'true'
				%% Line 2230
				<Stop> when 'true' ->
				    Stop
			      end
			  in  let <_cor6> =
				  %% Line 2232
				  call 'erlang':'setelement'
				      (8, Opts, CoverSpec)
			      in  let <_cor8> =
				      %% Line 2233
				      call 'erlang':'setelement'
					  (7, _cor6, _cor3)
				  in  %% Line 2232
				      apply 'start_cover'/2
					  (_cor8, %% Line 2234
						  LogDir)
		    end
	      end
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'maybe_start_cover',2}}] )
	    -| ['compiler_generated'] )
	end
'start_cover'/2 =
    %% Line 2238
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Opts = {'opts',_cor14,_cor15,_cor16,_cor17,_cor18,CovStop,CovData,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38},LogDir> when 'true' ->
	      %% Line 2248
	      case CovData of
		<{CovFile,CovNodes,CovImport,_X_CovExport,{'cover',CovApp,CovLevel,CovExcl,CovIncl,CovCross,_X_CovSrc}}> when 'true' ->
		    let <_cor3> =
			%% Line 2256
			call 'erlang':'length'
			    (CovIncl)
		    in  let <_cor4> =
			    %% Line 2256
			    call 'erlang':'length'
				(CovExcl)
			in  do  %% Line 2249
				call 'ct_logs':'log'
				    ([67|[79|[86|[69|[82|[32|[73|[78|[70|[79]]]]]]]]]], %% Line 2250
											[85|[115|[105|[110|[103|[32|[99|[111|[118|[101|[114|[32|[115|[112|[101|[99|[105|[102|[105|[99|[97|[116|[105|[111|[110|[32|[102|[105|[108|[101|[58|[32|[126|[116|[115|[126|[110|[65|[112|[112|[58|[32|[126|[119|[126|[110|[67|[114|[111|[115|[115|[32|[99|[111|[118|[101|[114|[58|[32|[126|[119|[126|[110|[73|[110|[99|[108|[117|[100|[105|[110|[103|[32|[126|[119|[32|[109|[111|[100|[117|[108|[101|[115|[126|[110|[69|[120|[99|[108|[117|[100|[105|[110|[103|[32|[126|[119|[32|[109|[111|[100|[117|[108|[101|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2255
																																																																																						     [CovFile|[CovApp|[CovCross|%% Line 2256
																																																																																										[_cor3|[_cor4|[]]]]]])
				do  %% Line 2261
				    call 'test_server_ctrl':'cover'
					({'log',LogDir})
				    %% Line 2264
				    case call 'test_server_ctrl':'cover_compile'
					     (CovApp, CovFile, %% Line 2265
							       CovExcl, %% Line 2265
									CovIncl, %% Line 2266
										 CovCross, %% Line 2266
											   CovLevel, %% Line 2267
												     CovStop) of
				      <{'ok',TsCoverInfo}> when 'true' ->
					  do  %% Line 2268
					      call 'ct_logs':'log'
						  ([67|[79|[86|[69|[82|[32|[73|[78|[70|[79]]]]]]]]]], %% Line 2269
												      [67|[111|[109|[112|[105|[108|[97|[116|[105|[111|[110|[32|[99|[111|[109|[112|[108|[101|[116|[101|[100|[32|[45|[32|[116|[101|[115|[116|[95|[115|[101|[114|[118|[101|[114|[32|[99|[111|[118|[101|[114|[32|[105|[110|[102|[111|[58|[32|[126|[116|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2270
																																																	    [TsCoverInfo|[]])
					      do  %% Line 2273
						  case <> of
						    <>
							when let <_cor6> =
							      call 'erlang':'=/='
								  (CovNodes, [])
							  in  let <_cor7> =
								  call 'erlang':'=/='
								      (CovNodes, 'undefined')
							      in  call 'erlang':'and'
								      (_cor6, _cor7) ->
							do  %% Line 2274
							    call 'ct_logs':'log'
								([67|[79|[86|[69|[82|[32|[73|[78|[70|[79]]]]]]]]]], %% Line 2275
														    [78|[111|[100|[101|[115|[32|[105|[110|[99|[108|[117|[100|[101|[100|[32|[105|[110|[32|[99|[111|[118|[101|[114|[32|[115|[101|[115|[115|[105|[111|[110|[58|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2277
																																							      [CovNodes|[]])
							    %% Line 2278
							    call 'cover':'start'
								(CovNodes)
						    %% Line 2279
						    <> when 'true' ->
							'ok'
						  end
						  let <_cor11> =
						      %% Line 2283
						      ( fun (_cor9) ->
							    %% Line 2284
							    case call 'cover':'import'
								     (_cor9) of
							      %% Line 2285
							      <'ok'> when 'true' ->
								  %% Line 2286
								  'ok'
							      %% Line 2287
							      <{'error',Reason}> when 'true' ->
								  %% Line 2288
								  call 'ct_logs':'log'
								      ([67|[79|[86|[69|[82|[32|[73|[78|[70|[79]]]]]]]]]], %% Line 2289
															  [73|[109|[112|[111|[114|[116|[105|[110|[103|[32|[99|[111|[118|[101|[114|[32|[100|[97|[116|[97|[32|[102|[114|[111|[109|[58|[32|[126|[116|[115|[32|[102|[97|[105|[108|[115|[33|[32|[82|[101|[97|[115|[111|[110|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2290
																																																	  [_cor9|[Reason|[]]])
							      ( <_cor8> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_cor8})
								-| ['compiler_generated'] )
							    end
							-| [{'id',{0,0,'-start_cover/2-fun-0-'}}] )
						  in  do  %% Line 2282
							  call 'lists':'foreach'
							      (_cor11, %% Line 2292
								       CovImport)
							  %% Line 2293
							  {TsCoverInfo,Opts}
				      ( <_cor5> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor5})
					-| ['compiler_generated'] )
				    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'start_cover',2}}] )
	    -| ['compiler_generated'] )
	end
'maybe_stop_cover'/3 =
    %% Line 2295
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_cor8,'undefined',_cor9> when 'true' ->
	      %% Line 2296
	      'ok'
	  %% Line 2297
	  <{'opts',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,CovData,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35},TsCoverInfo,LogDir> when 'true' ->
	      %% Line 2302
	      case CovData of
		<{_X_CovFile,_X_CovNodes,_X_CovImport,CovExport,_X_AppData}> when 'true' ->
		    do  %% Line 2303
			case CovExport of
			  %% Line 2304
			  <'undefined'> when 'true' ->
			      'ok'
			  %% Line 2305
			  <_cor36> when 'true' ->
			      do  %% Line 2306
				  call 'ct_logs':'log'
				      ([67|[79|[86|[69|[82|[32|[73|[78|[70|[79]]]]]]]]]], [69|[120|[112|[111|[114|[116|[105|[110|[103|[32|[99|[111|[118|[101|[114|[32|[100|[97|[116|[97|[32|[116|[111|[32|[126|[116|[112]]]]]]]]]]]]]]]]]]]]]]]]]]], [CovExport|[]])
				  %% Line 2307
				  call 'cover':'export'
				      (CovExport)
			end
			do  %% Line 2309
			    call 'ct_logs':'log'
				([67|[79|[86|[69|[82|[32|[73|[78|[70|[79]]]]]]]]]], [65|[110|[97|[108|[121|[115|[105|[110|[103|[32|[99|[111|[118|[101|[114|[32|[100|[97|[116|[97|[32|[116|[111|[32|[126|[116|[112]]]]]]]]]]]]]]]]]]]]]]]]]]], [LogDir|[]])
			    do  %% Line 2310
				call 'test_server_ctrl':'cover_analyse'
				    (TsCoverInfo, LogDir)
				do  %% Line 2311
				    call 'ct_logs':'log'
					([67|[79|[86|[69|[82|[32|[73|[78|[70|[79]]]]]]]]]], [65|[110|[97|[108|[121|[115|[105|[115|[32|[99|[111|[109|[112|[108|[101|[116|[101|[100|[46]]]]]]]]]]]]]]]]]]], [])
				    %% Line 2312
				    'ok'
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'maybe_stop_cover',3}}] )
	    -| ['compiler_generated'] )
	end
'delete_dups'/1 =
    %% Line 2315
    fun (_cor0) ->
	case _cor0 of
	  <[S|Suites]> when 'true' ->
	      let <Suites1> =
		  %% Line 2316
		  call 'lists':'delete'
		      (S, Suites)
	      in  let <_cor2> =
		      %% Line 2317
		      apply 'delete_dups'/1
			  (Suites1)
		  in  %% Line 2317
		      [S|_cor2]
	  %% Line 2318
	  <[]> when 'true' ->
	      %% Line 2319
	      []
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'delete_dups',1}}] )
	    -| ['compiler_generated'] )
	end
'count_test_cases'/2 =
    %% Line 2321
    fun (_cor1,_cor0) ->
	let <SendResult> =
	    %% Line 2322
	    ( fun (_cor3,_cor2) ->
		  call 'erlang':'!'
		      (_cor3, {'no_of_cases',_cor2})
	      -| [{'id',{0,0,'-count_test_cases/2-fun-0-'}}] )
	in  let <TSPid> =
		%% Line 2323
		call 'test_server_ctrl':'start_get_totals'
		    (SendResult)
	    in  let <Ref> =
		    %% Line 2324
		    call 'erlang':'monitor'
			('process', TSPid)
		in  do  %% Line 2325
			apply 'add_jobs'/4
			    (_cor1, _cor0, {'opts','undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined','undefined',[],'undefined',[],[],[],[],'undefined',[],'undefined','undefined',[],'undefined',1,'false','undefined',[],'undefined','undefined'}, [])
			let <_cor10> =
			    catch
				let <_cor9> =
				    %% Line 2326
				    call 'erlang':'length'
					(_cor1)
				in  %% Line 2326
				    apply 'count_test_cases1'/4
					(_cor9, 0, [], Ref)
			in  do  %% Line 2327
				call 'erlang':'demonitor'
				    (Ref, ['flush'])
				%% Line 2328
				case _cor10 of
				  %% Line 2329
				  <Error = {'error',{'test_server_died'}}> when 'true' ->
				      %% Line 2330
				      call 'erlang':'throw'
					  (Error)
				  %% Line 2331
				  <{'error',Reason}> when 'true' ->
				      let <_cor12> =
					  %% Line 2332
					  call 'erlang':'whereis'
					      ('test_server_ctrl')
				      in  do  %% Line 2332
					      call 'erlang':'unlink'
						  (_cor12)
					      do  %% Line 2333
						  call 'test_server_ctrl':'stop'
						      ()
						  %% Line 2334
						  call 'erlang':'throw'
						      ({'user_error',Reason})
				  %% Line 2335
				  <Result> when 'true' ->
				      do  %% Line 2336
					  call 'test_server_ctrl':'stop_get_totals'
					      ()
					  %% Line 2337
					  Result
				end
'count_test_cases1'/4 =
    %% Line 2340
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <0,N,Suites,_cor11> when 'true' ->
	      let <_cor4> =
		  %% Line 2341
		  call 'lists':'flatten'
		      (Suites)
	      in  %% Line 2341
		  {_cor4,N}
	  %% Line 2342
	  <Jobs,N,Suites,Ref> when 'true' ->
	      %% Line 2343
	      receive
		%% Line 2344
		<{_cor12,Error = {'error',_X_Reason}}> when 'true' ->
		    %% Line 2345
		    call 'erlang':'throw'
			(Error)
		%% Line 2346
		<{'no_of_cases',{Ss,N1}}> when 'true' ->
		    let <_cor6> =
			%% Line 2347
			call 'erlang':'-'
			    (Jobs, 1)
		    in  let <_cor5> =
			    %% Line 2347
			    apply 'add_known'/2
				(N, N1)
			in  %% Line 2347
			    apply 'count_test_cases1'/4
				(_cor6, _cor5, [Ss|Suites], Ref)
		%% Line 2348
		<{'DOWN',_cor13,_cor14,_cor15,Info}>
		    when call 'erlang':'=:='
			  (_cor13,
			   Ref) ->
		    %% Line 2349
		    call 'erlang':'throw'
			({'error',{'test_server_died',Info}})
	      after 'infinity' ->
		'true'
	end
'add_known'/2 =
    %% Line 2352
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'unknown',_cor4> when 'true' ->
	      %% Line 2353
	      'unknown'
	  %% Line 2354
	  <_cor5,'unknown'> when 'true' ->
	      %% Line 2355
	      'unknown'
	  %% Line 2356
	  <N,N1> when 'true' ->
	      %% Line 2357
	      call 'erlang':'+'
		  (N, N1)
	end
'add_jobs'/4 =
    %% Line 2359
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{TestDir,'all',_cor87}|Tests],Skip,Opts,CleanUp> when 'true' ->
	      let <Name> =
		  %% Line 2360
		  apply 'get_name'/1
		      (TestDir)
	      in  let <_cor6> =
		      catch
			  let <_cor5> =
			      %% Line 2362
			      apply 'skiplist'/2
				  (TestDir, Skip)
			  in  %% Line 2361
			      call 'test_server_ctrl':'add_dir_with_skip'
				  (Name, TestDir, _cor5)
		  in  %% Line 2361
		      case _cor6 of
			%% Line 2363
			<{'EXIT',_cor88}> when 'true' ->
			    %% Line 2364
			    CleanUp
			%% Line 2365
			<_cor89> when 'true' ->
			    %% Line 2366
			    case apply 'wait_for_idle'/0
				     () of
			      %% Line 2367
			      <'ok'> when 'true' ->
				  %% Line 2368
				  apply 'add_jobs'/4
				      (Tests, Skip, Opts, CleanUp)
			      %% Line 2369
			      <_cor90> when 'true' ->
				  %% Line 2370
				  CleanUp
			    end
		      end
	  %% Line 2373
	  <[{TestDir,[Suite|[]],'all'}|Tests],Skip,%% Line 2374
						   Opts,%% Line 2374
							CleanUp>
	      when %% Line 2374
		call 'erlang':'is_atom'
		    (Suite) ->
	      %% Line 2375
	      apply 'add_jobs'/4
		  ([{TestDir,Suite,'all'}|Tests], Skip, Opts, CleanUp)
	  %% Line 2376
	  <[{TestDir,Suites,'all'}|Tests],Skip,%% Line 2377
					       Opts,%% Line 2377
						    CleanUp>
	      when %% Line 2377
		call 'erlang':'is_list'
		    (Suites) ->
	      let <_cor9> =
		  %% Line 2378
		  apply 'get_name'/1
		      (TestDir)
	      in  let <Name> =
		      %% Line 2378
		      call 'erlang':'++'
			  (_cor9, [46|[115|[117|[105|[116|[101|[115]]]]]]])
		  in  let <_cor12> =
			  catch
			      let <_cor11> =
				  %% Line 2380
				  apply 'skiplist'/2
				      (TestDir, Skip)
			      in  %% Line 2379
				  call 'test_server_ctrl':'add_module_with_skip'
				      (Name, Suites, _cor11)
		      in  %% Line 2379
			  case _cor12 of
			    %% Line 2381
			    <{'EXIT',_cor91}> when 'true' ->
				%% Line 2382
				CleanUp
			    %% Line 2383
			    <_cor92> when 'true' ->
				%% Line 2384
				case apply 'wait_for_idle'/0
					 () of
				  %% Line 2385
				  <'ok'> when 'true' ->
				      %% Line 2386
				      apply 'add_jobs'/4
					  (Tests, Skip, Opts, CleanUp)
				  %% Line 2387
				  <_cor93> when 'true' ->
				      %% Line 2388
				      CleanUp
				end
			  end
	  %% Line 2391
	  <[{TestDir,Suite,'all'}|Tests],Skip,Opts,CleanUp> when 'true' ->
	      %% Line 2392
	      case apply 'maybe_interpret'/3
		       (Suite, 'all', Opts) of
		%% Line 2393
		<'ok'> when 'true' ->
		    let <_cor17> =
			%% Line 2394
			apply 'get_name'/1
			    (TestDir)
		    in  let <_cor15> =
			    %% Line 2394
			    call 'erlang':'atom_to_list'
				(Suite)
			in  let <_cor16> =
				%% Line 2394
				[46|_cor15]
			    in  let <Name> =
				    %% Line 2394
				    call 'erlang':'++'
					(_cor17, _cor16)
				in  let <_cor20> =
					catch
					    let <_cor19> =
						%% Line 2396
						apply 'skiplist'/2
						    (TestDir, %% Line 2397
							      Skip)
					    in  %% Line 2395
						call 'test_server_ctrl':'add_module_with_skip'
						    (Name, [Suite|[]], _cor19)
				    in  %% Line 2395
					case _cor20 of
					  %% Line 2398
					  <{'EXIT',_cor94}> when 'true' ->
					      %% Line 2399
					      CleanUp
					  %% Line 2400
					  <_cor95> when 'true' ->
					      %% Line 2401
					      case apply 'wait_for_idle'/0
						       () of
						%% Line 2402
						<'ok'> when 'true' ->
						    %% Line 2403
						    apply 'add_jobs'/4
							(Tests, Skip, Opts, [Suite|CleanUp])
						%% Line 2404
						<_cor96> when 'true' ->
						    %% Line 2405
						    CleanUp
					      end
					end
		%% Line 2408
		<Error> when 'true' ->
		    %% Line 2409
		    Error
	      end
	  %% Line 2413
	  <[{TestDir,Suite,Confs}|Tests],Skip,Opts,CleanUp>
	      when %% Line 2414
		try
		    let <_cor24> =
			call 'erlang':'hd'
			    (Confs)
		    in  let <_cor25> =
			    call 'erlang':'element'
				(1, _cor24)
			in  call 'erlang':'=:='
				(_cor25, 'conf')
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <Group> =
		  %% Line 2415
		  ( fun (_cor27) ->
			let <_cor26> =
			    call 'erlang':'element'
				(2, _cor27)
			in  call 'proplists':'get_value'
				('name', _cor26)
		    -| [{'id',{0,0,'-add_jobs/4-fun-0-'}}] )
	      in  let <TestCases> =
		      %% Line 2416
		      ( fun (_cor30) ->
			    call 'erlang':'element'
				(4, _cor30)
			-| [{'id',{0,0,'-add_jobs/4-fun-1-'}}] )
		  in  let <TCTestName> =
			  %% Line 2417
			  ( fun (_cor34) ->
				case _cor34 of
				  <'all'> when 'true' ->
				      []
				  %% Line 2418
				  <[C|[]]>
				      when call 'erlang':'is_atom'
					    (C) ->
				      let <_cor33> =
					  call 'erlang':'atom_to_list'
					      (C)
				      in  [46|_cor33]
				  %% Line 2419
				  <Cs>
				      when call 'erlang':'is_list'
					    (_cor34) ->
				      [46|[99|[97|[115|[101|[115]]]]]]
				  ( <_cor35> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor35})
					  -| [{'function_name',{'-add_jobs/4-fun-2-',1}}] )
				    -| ['compiler_generated'] )
				end
			    -| [{'id',{0,0,'-add_jobs/4-fun-2-'}}] )
		      in  let <_cor45> =
			      %% Line 2422
			      case Confs of
				%% Line 2423
				<[Conf|[]]> when 'true' ->
				    %% Line 2424
				    case apply Group
					     (Conf) of
				      %% Line 2425
				      <GrName>
					  when call 'erlang':'is_atom'
						(GrName) ->
					  let <_cor39> =
					      %% Line 2426
					      call 'erlang':'atom_to_list'
						  (GrName)
					  in  let <_cor37> =
						  %% Line 2427
						  apply TestCases
						      (Conf)
					      in  let <_cor38> =
						      %% Line 2427
						      apply TCTestName
							  (_cor37)
						  in  let <_cor40> =
							  %% Line 2426
							  call 'erlang':'++'
							      (_cor39, _cor38)
						      in  %% Line 2426
							  [46|_cor40]
				      %% Line 2428
				      <_cor97> when 'true' ->
					  let <_cor41> =
					      %% Line 2429
					      apply TestCases
						  (Conf)
					  in  let <_cor42> =
						  %% Line 2429
						  apply TCTestName
						      (_cor41)
					      in  %% Line 2429
						  call 'erlang':'++'
						      ([46|[103|[114|[111|[117|[112|[115]]]]]]], _cor42)
				    end
				%% Line 2431
				<_cor98> when 'true' ->
				    %% Line 2432
				    [46|[103|[114|[111|[117|[112|[115]]]]]]]
			      end
			  in  let <_cor50> =
				  %% Line 2434
				  apply 'get_name'/1
				      (TestDir)
			      in  let <_cor47> =
				      %% Line 2434
				      call 'erlang':'atom_to_list'
					  (Suite)
				  in  let <_cor48> =
					  %% Line 2434
					  call 'erlang':'++'
					      (_cor47, _cor45)
				      in  let <_cor49> =
					      %% Line 2434
					      [46|_cor48]
					  in  let <TestName> =
						  %% Line 2434
						  call 'erlang':'++'
						      (_cor50, _cor49)
					      in  %% Line 2435
						  case apply 'maybe_interpret'/3
							   (Suite, 'init_per_group', Opts) of
						    %% Line 2436
						    <'ok'> when 'true' ->
							let <_cor53> =
							    catch
								let <_cor52> =
								    %% Line 2440
								    apply 'skiplist'/2
									(TestDir, %% Line 2441
										  Skip)
								in  %% Line 2437
								    call 'test_server_ctrl':'add_conf_with_skip'
									(TestName, %% Line 2438
										   Suite, %% Line 2439
											  Confs, _cor52)
							in  %% Line 2437
							    case _cor53 of
							      %% Line 2442
							      <{'EXIT',_cor99}> when 'true' ->
								  %% Line 2443
								  CleanUp
							      %% Line 2444
							      <_cor100> when 'true' ->
								  %% Line 2445
								  case apply 'wait_for_idle'/0
									   () of
								    %% Line 2446
								    <'ok'> when 'true' ->
									%% Line 2447
									apply 'add_jobs'/4
									    (Tests, Skip, Opts, [Suite|CleanUp])
								    %% Line 2448
								    <_cor101> when 'true' ->
									%% Line 2449
									CleanUp
								  end
							    end
						    %% Line 2452
						    <Error> when 'true' ->
							%% Line 2453
							Error
						  end
	  %% Line 2457
	  <[{TestDir,Suite,[Case|[]]}|Tests],%% Line 2458
					     Skip,%% Line 2458
						  Opts,%% Line 2458
						       CleanUp>
	      when %% Line 2458
		call 'erlang':'is_atom'
		    (Case) ->
	      %% Line 2459
	      apply 'add_jobs'/4
		  ([{TestDir,Suite,Case}|Tests], Skip, Opts, CleanUp)
	  %% Line 2461
	  <[{TestDir,Suite,Cases}|Tests],%% Line 2462
					 Skip,%% Line 2462
					      Opts,%% Line 2462
						   CleanUp>
	      when %% Line 2462
		call 'erlang':'is_list'
		    (Cases) ->
	      let <_cor59> =
		  %% Line 2463
		  ( fun (_cor57) ->
			case _cor57 of
			  <{GroupName,_cor102}>
			      when call 'erlang':'is_atom'
				    (GroupName) ->
			      GroupName
			  %% Line 2464
			  <Case> when 'true' ->
			      Case
			end
		    -| [{'id',{0,0,'-add_jobs/4-fun-3-'}}] )
	      in  let <Cases1> =
		      %% Line 2463
		      call 'lists':'map'
			  (_cor59, %% Line 2465
				   Cases)
		  in  %% Line 2466
		      case apply 'maybe_interpret'/3
			       (Suite, Cases1, Opts) of
			%% Line 2467
			<'ok'> when 'true' ->
			    let <_cor64> =
				%% Line 2468
				apply 'get_name'/1
				    (TestDir)
			    in  let <_cor61> =
				    %% Line 2468
				    call 'erlang':'atom_to_list'
					(Suite)
				in  let <_cor62> =
					%% Line 2468
					call 'erlang':'++'
					    (_cor61, [46|[99|[97|[115|[101|[115]]]]]])
				    in  let <_cor63> =
					    %% Line 2468
					    [46|_cor62]
					in  let <Name> =
						%% Line 2468
						call 'erlang':'++'
						    (_cor64, _cor63)
					    in  let <_cor67> =
						    catch
							let <_cor66> =
							    %% Line 2470
							    apply 'skiplist'/2
								(TestDir, %% Line 2471
									  Skip)
							in  %% Line 2469
							    call 'test_server_ctrl':'add_cases_with_skip'
								(Name, Suite, Cases1, _cor66)
						in  %% Line 2469
						    case _cor67 of
						      %% Line 2472
						      <{'EXIT',_cor103}> when 'true' ->
							  %% Line 2473
							  CleanUp
						      %% Line 2474
						      <_cor104> when 'true' ->
							  %% Line 2475
							  case apply 'wait_for_idle'/0
								   () of
							    %% Line 2476
							    <'ok'> when 'true' ->
								%% Line 2477
								apply 'add_jobs'/4
								    (Tests, Skip, Opts, [Suite|CleanUp])
							    %% Line 2478
							    <_cor105> when 'true' ->
								%% Line 2479
								CleanUp
							  end
						    end
			%% Line 2482
			<Error> when 'true' ->
			    %% Line 2483
			    Error
		      end
	  %% Line 2485
	  <[{TestDir,Suite,Case}|Tests],Skip,Opts,CleanUp>
	      when call 'erlang':'is_atom'
		    (Case) ->
	      %% Line 2486
	      case apply 'maybe_interpret'/3
		       (Suite, Case, Opts) of
		%% Line 2487
		<'ok'> when 'true' ->
		    let <_cor76> =
			%% Line 2488
			apply 'get_name'/1
			    (TestDir)
		    in  let <_cor73> =
			    %% Line 2488
			    call 'erlang':'atom_to_list'
				(Suite)
			in  let <_cor71> =
				%% Line 2489
				call 'erlang':'atom_to_list'
				    (Case)
			    in  let <_cor72> =
				    %% Line 2488
				    [46|_cor71]
				in  let <_cor74> =
					%% Line 2488
					call 'erlang':'++'
					    (_cor73, _cor72)
				    in  let <_cor75> =
					    %% Line 2488
					    [46|_cor74]
					in  let <Name> =
						%% Line 2488
						call 'erlang':'++'
						    (_cor76, _cor75)
					    in  let <_cor79> =
						    catch
							let <_cor78> =
							    %% Line 2491
							    apply 'skiplist'/2
								(TestDir, %% Line 2492
									  Skip)
							in  %% Line 2490
							    call 'test_server_ctrl':'add_case_with_skip'
								(Name, Suite, Case, _cor78)
						in  %% Line 2490
						    case _cor79 of
						      %% Line 2493
						      <{'EXIT',_cor106}> when 'true' ->
							  %% Line 2494
							  CleanUp
						      %% Line 2495
						      <_cor107> when 'true' ->
							  %% Line 2496
							  case apply 'wait_for_idle'/0
								   () of
							    %% Line 2497
							    <'ok'> when 'true' ->
								%% Line 2498
								apply 'add_jobs'/4
								    (Tests, Skip, Opts, [Suite|CleanUp])
							    %% Line 2499
							    <_cor108> when 'true' ->
								%% Line 2500
								CleanUp
							  end
						    end
		%% Line 2503
		<Error> when 'true' ->
		    %% Line 2504
		    Error
	      end
	  %% Line 2506
	  <[],_cor109,_cor110,CleanUp> when 'true' ->
	      %% Line 2507
	      CleanUp
	  ( <_cor86,_cor85,_cor84,_cor83> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor86,_cor85,_cor84,_cor83})
		  -| [{'function_name',{'add_jobs',4}}] )
	    -| ['compiler_generated'] )
	end
'wait_for_idle'/0 =
    %% Line 2509
    fun () ->
	do  %% Line 2510
	    call 'ct_util':'update_last_run_index'
		()
	    let <Notify> =
		%% Line 2511
		( fun (_cor1,_cor0) ->
		      do  call 'erlang':'!'
			      (_cor1, {'idle',_cor0})
			  %% Line 2512
			  receive
			    %% Line 2513
			    <{_cor11,'proceed'}>
				when call 'erlang':'=:='
				      (_cor11,
				       _cor1) ->
				'ok'
			  after %% Line 2515
				30000 ->
			    %% Line 2515
			    'ok'
		  -| [{'id',{0,0,'-wait_for_idle/0-fun-0-'}}] )
	    in  let <_cor5> =
		    catch
			%% Line 2518
			call 'test_server_ctrl':'idle_notify'
			    (Notify)
		in  %% Line 2518
		    case _cor5 of
		      %% Line 2519
		      <{'EXIT',_cor12}> when 'true' ->
			  %% Line 2520
			  'error'
		      %% Line 2521
		      <TSPid> when 'true' ->
			  let <Ref> =
			      %% Line 2523
			      call 'erlang':'monitor'
				  ('process', TSPid)
			  in  let <_cor7> =
				  %% Line 2524
				  receive
				    %% Line 2525
				    <{'idle','abort'}> when 'true' ->
					'aborted'
				    %% Line 2526
				    <{'idle',_cor13}> when 'true' ->
					'ok'
				    %% Line 2527
				    <{'DOWN',_cor14,_cor15,_cor16,_cor17}>
					when call 'erlang':'=:='
					      (_cor14,
					       Ref) ->
					'error'
				  after 'infinity' ->
				    'true'
			      in  do  %% Line 2529
				      call 'erlang':'demonitor'
					  (Ref, ['flush'])
				      do  %% Line 2530
					  call 'ct_util':'update_last_run_index'
					      ()
					  let <_cor9> =
					      %% Line 2532
					      call 'erlang':'self'
						  ()
					  in  do  %% Line 2532
						  call 'erlang':'!'
						      (TSPid, {_cor9,'proceed'})
						  _cor7
		    end
'skiplist'/2 =
    %% Line 2536
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Dir,[{_cor15,'all',Cmt}|Skip]>
	      when call 'erlang':'=:='
		    (_cor15,
		     Dir) ->
	      let <_cor2> =
		  %% Line 2539
		  call 'filename':'join'
		      (Dir, [42|[95|[83|[85|[73|[84|[69|[46|[98|[101|[97|[109]]]]]]]]]]]])
	      in  let <Ss> =
		      %% Line 2539
		      call 'filelib':'wildcard'
			  (_cor2)
		  in  let <_cor4> =
			  %% Line 2541
			  apply 'skiplist'/2
			      (Dir, Skip)
		      in  %% Line 2540
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor7) ->
					case _cor7 of
					  <[S|_cor6]> when 'true' ->
					      let <_cor8> =
						  call 'filename':'basename'
						      (S, [46|[98|[101|[97|[109]]]]])
					      in  let <_cor9> =
						      call 'erlang':'list_to_atom'
							  (_cor8)
						  in  let <_cor10> =
							  apply 'lc$^0'/1
							      (_cor6)
						      in  ( [{_cor9,Cmt}|_cor10]
							    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      _cor4
					  ( <_cor7> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor7})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (Ss)
			    -| ['list_comprehension'] )
	  %% Line 2542
	  <Dir,[{_cor16,S,Cmt}|Skip]>
	      when call 'erlang':'=:='
		    (_cor16,
		     Dir) ->
	      let <_cor11> =
		  %% Line 2543
		  apply 'skiplist'/2
		      (Dir, Skip)
	      in  %% Line 2543
		  [{S,Cmt}|_cor11]
	  %% Line 2544
	  <Dir,[{_cor17,S,C,Cmt}|Skip]>
	      when call 'erlang':'=:='
		    (_cor17,
		     Dir) ->
	      let <_cor12> =
		  %% Line 2545
		  apply 'skiplist'/2
		      (Dir, Skip)
	      in  %% Line 2545
		  [{S,C,Cmt}|_cor12]
	  %% Line 2546
	  <Dir,[_cor18|Skip]> when 'true' ->
	      %% Line 2547
	      apply 'skiplist'/2
		  (Dir, Skip)
	  %% Line 2548
	  <_X_Dir,[]> when 'true' ->
	      %% Line 2549
	      []
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'skiplist',2}}] )
	    -| ['compiler_generated'] )
	end
'get_name'/1 =
    %% Line 2551
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 2553
	    case call 'filename':'basename'
		     (_cor0) of
	      %% Line 2554
	      <[116|[101|[115|[116]]]]> when 'true' ->
		  %% Line 2555
		  call 'filename':'dirname'
		      (_cor0)
	      %% Line 2556
	      <_cor9> when 'true' ->
		  _cor0
	    end
	in  let <Base> =
		%% Line 2559
		call 'filename':'basename'
		    (_cor2)
	    in  let <_cor5> =
		    %% Line 2560
		    call 'filename':'dirname'
			(_cor2)
		in  %% Line 2560
		    case call 'filename':'basename'
			     (_cor5) of
		      %% Line 2561
		      <[]> when 'true' ->
			  %% Line 2562
			  Base
		      %% Line 2563
		      <TopDir> when 'true' ->
			  let <_cor6> =
			      %% Line 2564
			      [46|Base]
			  in  %% Line 2564
			      call 'erlang':'++'
				  (TopDir, _cor6)
		    end
'run_make'/3 =
    %% Line 2568
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2569
	apply 'run_make'/4
	    ('suites', _cor2, _cor1, _cor0)
'run_make'/4 =
    %% Line 2571
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Targets,TestDir0,Mod,UserInclude>
	      when call 'erlang':'is_list'
		    (Mod) ->
	      let <_cor4> =
		  %% Line 2572
		  call 'erlang':'list_to_atom'
		      (Mod)
	      in  %% Line 2572
		  apply 'run_make'/4
		      (Targets, TestDir0, _cor4, UserInclude)
	  %% Line 2574
	  <Targets,TestDir0,Mod,UserInclude> when 'true' ->
	      %% Line 2575
	      case apply 'locate_test_dir'/2
		       (TestDir0, Mod) of
		%% Line 2576
		<{'ok',TestDir}> when 'true' ->
		    let <_cor5> =
			%% Line 2581
			call 'erlang':'node'
			    ()
		    in  do  %% Line 2580
			    call 'ct_event':'sync_notify'
				({'event','start_make',_cor5,%% Line 2582
							     TestDir})
			    %% Line 2583
			    case call 'file':'get_cwd'
				     () of
			      <{'ok',Cwd}> when 'true' ->
				  %% Line 2584
				  case call 'file':'set_cwd'
					   (TestDir) of
				    <'ok'> when 'true' ->
					let <TestServerInclude> =
					    %% Line 2585
					    apply 'get_dir'/2
						('test_server', [105|[110|[99|[108|[117|[100|[101]]]]]]])
					in  let <CtInclude> =
						%% Line 2586
						apply 'get_dir'/2
						    ('common_test', [105|[110|[99|[108|[117|[100|[101]]]]]]])
					    in  let <XmerlInclude> =
						    %% Line 2587
						    apply 'get_dir'/2
							('xmerl', [105|[110|[99|[108|[117|[100|[101]]]]]]])
						in  let <ErlFlags> =
							%% Line 2588
							call 'erlang':'++'
							    (UserInclude, [{'i',TestServerInclude}|%% Line 2589
												   [{'i',CtInclude}|%% Line 2590
														    [{'i',XmerlInclude}|%% Line 2591
																	['debug_info']]]])
						    in  let <_cor27> =
							    %% Line 2593
							    case <> of
							      <>
								  when let <_cor12> =
									call 'erlang':'=:='
									    (Mod, 'all')
								    in  let <_cor13> =
									    call 'erlang':'=:='
										(Targets, 'helpmods')
									in  call 'erlang':'or'
										(_cor12, _cor13) ->
								  let <_cor14> =
								      catch
									  %% Line 2594
									  call 'ct_make':'all'
									      (['noexec'|ErlFlags])
								  in  %% Line 2594
								      case _cor14 of
									%% Line 2595
									<Failure = {'EXIT',_cor44}> when 'true' ->
									    %% Line 2596
									    Failure
									%% Line 2597
									<MakeInfo> when 'true' ->
									    let <FileTest> =
										%% Line 2598
										( fun (_cor17,_cor16) ->
										      case <_cor17,_cor16> of
											<F,'suites'> when 'true' ->
											    apply 'is_suite'/1
												(F)
											%% Line 2599
											<F,'helpmods'> when 'true' ->
											    let <_cor15> =
												apply 'is_suite'/1
												    (F)
											    in  call 'erlang':'not'
												    (_cor15)
											( <_cor19,_cor18> when 'true' ->
											      ( primop 'match_fail'
												    ({'function_clause',_cor19,_cor18})
												-| [{'function_name',{'-run_make/4-fun-0-',2}}] )
											  -| ['compiler_generated'] )
										      end
										  -| [{'id',{0,0,'-run_make/4-fun-0-'}}] )
									    in  let <_cor24> =
										    %% Line 2602
										    ( fun (_cor22) ->
											  case _cor22 of
											    <{F,'out_of_date'}> when 'true' ->
												%% Line 2603
												case apply FileTest
													 (F, %% Line 2604
													     Targets) of
												  %% Line 2605
												  <'true'> when 'true' ->
												      [F|[]]
												  %% Line 2606
												  <'false'> when 'true' ->
												      []
												  ( <_cor21> when 'true' ->
													primop 'match_fail'
													    ({'case_clause',_cor21})
												    -| ['compiler_generated'] )
												end
											    %% Line 2608
											    <_cor45> when 'true' ->
												%% Line 2609
												[]
											  end
										      -| [{'id',{0,0,'-run_make/4-fun-1-'}}] )
										in  let <Files> =
											%% Line 2602
											call 'lists':'flatmap'
											    (_cor24, %% Line 2610
												     MakeInfo)
										    in  catch
											    %% Line 2611
											    call 'ct_make':'files'
												(Files, ['load'|ErlFlags])
								      end
							      %% Line 2613
							      <> when 'true' ->
								  catch
								      %% Line 2614
								      call 'ct_make':'files'
									  ([Mod|[]], ['load'|ErlFlags])
							    end
							in  %% Line 2617
							    case call 'file':'set_cwd'
								     (Cwd) of
							      <'ok'> when 'true' ->
								  let <_cor30> =
								      %% Line 2620
								      call 'erlang':'node'
									  ()
								  in  do  %% Line 2619
									  call 'ct_event':'notify'
									      ({'event','finished_make',_cor30,%% Line 2621
													       TestDir})
									  %% Line 2622
									  case _cor27 of
									    %% Line 2623
									    <{'up_to_date',_cor46}> when 'true' ->
										%% Line 2624
										'ok'
									    %% Line 2625
									    <{'EXIT',Reason}> when 'true' ->
										do  %% Line 2626
										    call 'io':'format'
											([123|[101|[114|[114|[111|[114|[44|[123|[109|[97|[107|[101|[95|[99|[114|[97|[115|[104|[101|[100|[44|[126|[112|[125|[10]]]]]]]]]]]]]]]]]]]]]]]]], [Reason|[]])
										    %% Line 2627
										    {'error',{'make_crashed',TestDir,Reason}}
									    %% Line 2628
									    <{'error',ModInfo}> when 'true' ->
										do  %% Line 2629
										    call 'io':'format'
											([123|[101|[114|[114|[111|[114|[44|[109|[97|[107|[101|[95|[102|[97|[105|[108|[101|[100|[125|[10]]]]]]]]]]]]]]]]]]]], [])
										    let <_cor36> =
											%% Line 2630
											( letrec
											      'lc$^0'/1 =
												  fun (_cor33) ->
												      case _cor33 of
													<[{M,R}|_cor32]>
													    when %% Line 2631
													      call 'erlang':'=:='
														  (R,
														   'error') ->
													    let <_cor34> =
														call 'filename':'join'
														    (TestDir, M)
													    in  let <_cor35> =
														    apply 'lc$^0'/1
															(_cor32)
														in  ( [_cor34|_cor35]
														      -| ['compiler_generated'] )
													( <[_cor31|_cor32]> when 'true' ->
													      apply 'lc$^0'/1
														  (_cor32)
													  -| ['compiler_generated'] )
													<[]> when 'true' ->
													    []
													( <_cor33> when 'true' ->
													      ( primop 'match_fail'
														    ({'function_clause',_cor33})
														-| [{'function_name',{'lc$^0',1}}] )
													  -| ['compiler_generated'] )
												      end
											  in  apply 'lc$^0'/1
												  (ModInfo)
											  -| ['list_comprehension'] )
										    in  %% Line 2632
											{'error',{'make_failed',_cor36}}
									    ( <_cor38> when 'true' ->
										  primop 'match_fail'
										      ({'case_clause',_cor38})
									      -| ['compiler_generated'] )
									  end
							      ( <_cor29> when 'true' ->
								    primop 'match_fail'
									({'badmatch',_cor29})
								-| ['compiler_generated'] )
							    end
				    ( <_cor7> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor7})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor6})
				-| ['compiler_generated'] )
			    end
		%% Line 2634
		<{'error',_cor47}> when 'true' ->
		    do  %% Line 2635
			call 'io':'format'
			    ([123|[101|[114|[114|[111|[114|[44|[123|[105|[110|[118|[97|[108|[105|[100|[95|[100|[105|[114|[101|[99|[116|[111|[114|[121|[44|[126|[112|[125|[125|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [TestDir0|[]])
			%% Line 2636
			{'error',{'invalid_directory',TestDir0}}
		( <_cor39> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor39})
		  -| ['compiler_generated'] )
	      end
	end
'get_dir'/2 =
    %% Line 2639
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2640
	    call 'code':'lib_dir'
		(_cor1)
	in  %% Line 2640
	    call 'filename':'join'
		(_cor2, _cor0)
'maybe_interpret'/3 =
    %% Line 2642
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Suite,Cases,{'opts',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,StepOpts,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32}>
	      when call 'erlang':'=/='
		    (StepOpts,
		     'undefined') ->
	      do  %% Line 2645
		  case call 'ct_util':'get_testdata'
			   ('interpret') of
		    %% Line 2646
		    <{_X_What,'kill',{TCPid,AttPid}}> when 'true' ->
			%% Line 2647
			call 'ct_util':'kill_attached'
			    (TCPid, AttPid)
		    %% Line 2648
		    <_cor33> when 'true' ->
			'ok'
		  end
		  %% Line 2651
		  apply 'maybe_interpret1'/3
		      (Suite, Cases, StepOpts)
	  %% Line 2652
	  <_cor34,_cor35,_cor36> when 'true' ->
	      %% Line 2653
	      'ok'
	end
'maybe_interpret1'/3 =
    %% Line 2655
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Suite,'all',StepOpts> when 'true' ->
	      %% Line 2656
	      case call 'i':'ii'
		       (Suite) of
		%% Line 2657
		<{'module',_cor9}> when 'true' ->
		    do  %% Line 2658
			call 'i':'iaa'
			    (['break'])
			%% Line 2659
			case apply 'get_all_testcases'/1
				 (Suite) of
			  %% Line 2660
			  <{'error',_cor10}> when 'true' ->
			      %% Line 2661
			      {'error','no_testcases_found'}
			  %% Line 2662
			  <Cases> when 'true' ->
			      %% Line 2663
			      apply 'maybe_interpret2'/3
				  (Suite, Cases, StepOpts)
			end
		%% Line 2665
		<'error'> when 'true' ->
		    %% Line 2666
		    {'error','could_not_interpret_module'}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2668
	  <Suite,Case,StepOpts>
	      when call 'erlang':'is_atom'
		    (Case) ->
	      %% Line 2669
	      apply 'maybe_interpret1'/3
		  (Suite, [Case|[]], StepOpts)
	  %% Line 2670
	  <Suite,Cases,StepOpts>
	      when call 'erlang':'is_list'
		    (Cases) ->
	      %% Line 2671
	      case call 'i':'ii'
		       (Suite) of
		%% Line 2672
		<{'module',_cor11}> when 'true' ->
		    do  %% Line 2673
			call 'i':'iaa'
			    (['break'])
			%% Line 2674
			apply 'maybe_interpret2'/3
			    (Suite, Cases, StepOpts)
		%% Line 2675
		<'error'> when 'true' ->
		    %% Line 2676
		    {'error','could_not_interpret_module'}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'maybe_interpret1',3}}] )
	    -| ['compiler_generated'] )
	end
'maybe_interpret2'/3 =
    %% Line 2679
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 2680
	    apply 'set_break_on_config'/2
		(_cor2, _cor0)
	    do  %% Line 2681
		( letrec
		      'lc$^0'/1 =
			  fun (_cor5) ->
			      case _cor5 of
				<[%% Line 2688
				  Case|_cor4]>
				    when %% Line 2688
				      call 'erlang':'is_atom'
					  (Case) ->
				    do  try
					    call 'i':'ib'
						(_cor2, Case, 1)
					of <_cor6> ->
					    %% Line 2682
					    'ok'
					catch <_cor10,_cor9,_cor8> ->
					    %% Line 2685
					    call 'io':'format'
						('user', [73|[110|[118|[97|[108|[105|[100|[32|[98|[114|[101|[97|[107|[112|[111|[105|[110|[116|[58|[32|[126|[119|[58|[126|[119|[47|[49|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2686
																											      [_cor2|[Case|[]]])
					%% Line 2688
					apply 'lc$^0'/1
					    (_cor4)
				( <[%% Line 2688
				    Case|_cor4]> when 'true' ->
				      %% Line 2688
				      apply 'lc$^0'/1
					  (_cor4)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor5> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor5})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (_cor1)
		  -| ['list_comprehension'] )
		do  %% Line 2689
		    call 'test_server_ctrl':'multiply_timetraps'
			('infinity')
		    let <_cor13> =
			%% Line 2690
			apply 'ensure_atom'/1
			    (_cor0)
		    in  let <_cor15> =
			    %% Line 2690
			    case call 'lists':'member'
				     ('keep_inactive', _cor13) of
			      %% Line 2691
			      <'true'> when 'true' ->
				  'no_kill'
			      %% Line 2692
			      <'false'> when 'true' ->
				  'kill'
			      ( <_cor14> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor14})
				-| ['compiler_generated'] )
			    end
			in  do  %% Line 2694
				call 'ct_util':'set_testdata'
				    ({'interpret',{{_cor2,_cor1},_cor15,%% Line 2695
									{'undefined','undefined'}}})
				%% Line 2696
				'ok'
'set_break_on_config'/2 =
    %% Line 2698
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2699
	    apply 'ensure_atom'/1
		(_cor0)
	in  %% Line 2699
	    case call 'lists':'member'
		     ('config', _cor2) of
	      %% Line 2700
	      <'true'> when 'true' ->
		  let <SetBPIfExists> =
		      %% Line 2701
		      ( fun (_cor5,_cor4) ->
			    %% Line 2702
			    case call 'erlang':'function_exported'
				     (_cor1, _cor5, _cor4) of
			      %% Line 2703
			      <'true'> when 'true' ->
				  call 'i':'ib'
				      (_cor1, _cor5, _cor4)
			      %% Line 2704
			      <'false'> when 'true' ->
				  'ok'
			      ( <_cor3> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor3})
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-set_break_on_config/2-fun-0-'}}] )
		  in  do  %% Line 2707
			  apply SetBPIfExists
			      ('init_per_suite', 1)
			  do  %% Line 2708
			      apply SetBPIfExists
				  ('init_per_group', 2)
			      do  %% Line 2709
				  apply SetBPIfExists
				      ('init_per_testcase', 2)
				  do  %% Line 2710
				      apply SetBPIfExists
					  ('end_per_testcase', 2)
				      do  %% Line 2711
					  apply SetBPIfExists
					      ('end_per_group', 2)
					  %% Line 2712
					  apply SetBPIfExists
					      ('end_per_suite', 1)
	      %% Line 2713
	      <'false'> when 'true' ->
		  %% Line 2714
		  'ok'
	      ( <_cor9> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor9})
		-| ['compiler_generated'] )
	    end
'maybe_cleanup_interpret'/2 =
    %% Line 2717
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor4,'undefined'> when 'true' ->
	      %% Line 2718
	      'ok'
	  %% Line 2719
	  <Suite,_cor5> when 'true' ->
	      %% Line 2720
	      call 'i':'iq'
		  (Suite)
	end
'log_ts_names'/1 =
    %% Line 2722
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 2723
	      'ok'
	  %% Line 2724
	  <Specs> when 'true' ->
	      let <_cor3> =
		  %% Line 2725
		  ( fun (_cor1) ->
			%% Line 2726
			call 'erlang':'++'
			    (_cor1, [32])
		    -| [{'id',{0,0,'-log_ts_names/1-fun-0-'}}] )
	      in  let <List> =
		      %% Line 2725
		      call 'lists':'map'
			  (_cor3, %% Line 2727
				  Specs)
		  in  let <_cor5> =
			  %% Line 2729
			  call 'lists':'flatten'
			      (List)
		      in  %% Line 2728
			  call 'ct_logs':'log'
			      ([84|[101|[115|[116|[32|[83|[112|[101|[99|[105|[102|[105|[99|[97|[116|[105|[111|[110|[32|[102|[105|[108|[101|[40|[115|[41]]]]]]]]]]]]]]]]]]]]]]]]]], [126|[116|[115]]], %% Line 2729
																								      [_cor5|[]])
	end
'merge_arguments'/1 =
    %% Line 2731
    fun (_cor0) ->
	%% Line 2732
	apply 'merge_arguments'/2
	    (_cor0, [])
'merge_arguments'/2 =
    %% Line 2734
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[LogDir = {'logdir',_cor9}|Args],Merged> when 'true' ->
	      let <_cor2> =
		  %% Line 2735
		  apply 'handle_arg'/3
		      ('replace', LogDir, Merged)
	      in  %% Line 2735
		  apply 'merge_arguments'/2
		      (Args, _cor2)
	  %% Line 2737
	  <[CoverFile = {'cover',_cor10}|Args],Merged> when 'true' ->
	      let <_cor3> =
		  %% Line 2738
		  apply 'handle_arg'/3
		      ('replace', CoverFile, Merged)
	      in  %% Line 2738
		  apply 'merge_arguments'/2
		      (Args, _cor3)
	  %% Line 2740
	  <[CoverStop = {'cover_stop',_cor11}|Args],Merged> when 'true' ->
	      let <_cor4> =
		  %% Line 2741
		  apply 'handle_arg'/3
		      ('replace', CoverStop, Merged)
	      in  %% Line 2741
		  apply 'merge_arguments'/2
		      (Args, _cor4)
	  %% Line 2743
	  <[{'case',TC}|Args],Merged> when 'true' ->
	      let <_cor5> =
		  %% Line 2744
		  apply 'handle_arg'/3
		      ('merge', {'testcase',TC}, Merged)
	      in  %% Line 2744
		  apply 'merge_arguments'/2
		      (Args, _cor5)
	  %% Line 2746
	  <[Arg|Args],Merged> when 'true' ->
	      let <_cor6> =
		  %% Line 2747
		  apply 'handle_arg'/3
		      ('merge', Arg, Merged)
	      in  %% Line 2747
		  apply 'merge_arguments'/2
		      (Args, _cor6)
	  %% Line 2749
	  <[],Merged> when 'true' ->
	      %% Line 2750
	      Merged
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'merge_arguments',2}}] )
	    -| ['compiler_generated'] )
	end
'handle_arg'/3 =
    %% Line 2752
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'replace',{Key,Elems},[{_cor10,_cor11}|Merged]>
	      when call 'erlang':'=:='
		    (_cor10,
		     Key) ->
	      %% Line 2753
	      [{Key,Elems}|Merged]
	  %% Line 2754
	  <'merge',{'event_handler_init',Elems},[{'event_handler_init',PrevElems}|Merged]> when 'true' ->
	      let <_cor3> =
		  %% Line 2755
		  call 'erlang':'++'
		      (PrevElems, [[97|[100|[100]]]|Elems])
	      in  %% Line 2755
		  [{'event_handler_init',_cor3}|Merged]
	  %% Line 2756
	  <'merge',{'userconfig',Elems},[{'userconfig',PrevElems}|Merged]> when 'true' ->
	      let <_cor4> =
		  %% Line 2757
		  call 'erlang':'++'
		      (PrevElems, [[97|[100|[100]]]|Elems])
	      in  %% Line 2757
		  [{'userconfig',_cor4}|Merged]
	  %% Line 2758
	  <'merge',{Key,Elems},[{_cor12,PrevElems}|Merged]>
	      when call 'erlang':'=:='
		    (_cor12,
		     Key) ->
	      let <_cor5> =
		  %% Line 2759
		  call 'erlang':'++'
		      (PrevElems, Elems)
	      in  %% Line 2759
		  [{Key,_cor5}|Merged]
	  %% Line 2760
	  <Op,Arg,[Other|Merged]> when 'true' ->
	      let <_cor6> =
		  %% Line 2761
		  apply 'handle_arg'/3
		      (Op, Arg, Merged)
	      in  %% Line 2761
		  [Other|_cor6]
	  %% Line 2762
	  <_cor13,Arg,[]> when 'true' ->
	      %% Line 2763
	      [Arg|[]]
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'handle_arg',3}}] )
	    -| ['compiler_generated'] )
	end
'get_start_opt'/3 =
    %% Line 2765
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2766
	apply 'get_start_opt'/4
	    (_cor2, _cor1, 'undefined', _cor0)
'get_start_opt'/4 =
    %% Line 2768
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2769
	try
	    apply 'try_get_start_opt'/4
		(_cor3, _cor2, _cor1, _cor0)
	of <_cor4> ->
	    _cor4
	catch <_cor8,_cor7,_cor6> ->
	    case <_cor8,_cor7,_cor6> of
	      %% Line 2773
	      <'error',_cor13,_cor14> when 'true' ->
		  %% Line 2774
		  call 'erlang':'exit'
		      ({'user_error',{'bad_argument',_cor3}})
	      ( <_cor8,_cor7,_cor6> when 'true' ->
		    primop 'raise'
			(_cor6, _cor7)
		-| ['compiler_generated'] )
	    end
'try_get_start_opt'/4 =
    %% Line 2777
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2778
	case call 'lists':'keysearch'
		 (_cor3, 1, _cor0) of
	  %% Line 2779
	  <{'value',{_cor9,Val}}>
	      when let <_cor10> =
		    call 'erlang':'=:='
			(_cor9, _cor3)
		in  let <_cor11> =
			call 'erlang':'is_function'
			    (_cor2)
		    in  call 'erlang':'and'
			    (_cor10, _cor11) ->
	      %% Line 2780
	      apply _cor2
		  (Val)
	  %% Line 2781
	  <{'value',{_cor12,Val}}>
	      when let <_cor13> =
		    call 'erlang':'=:='
			(_cor12, _cor3)
		in  let <_cor14> =
			call 'erlang':'=:='
			    (_cor2, 'value')
		    in  call 'erlang':'and'
			    (_cor13, _cor14) ->
	      %% Line 2782
	      Val
	  %% Line 2783
	  <{'value',{_cor15,_X_Val}}>
	      when call 'erlang':'=:='
		    (_cor15,
		     _cor3) ->
	      _cor2
	  %% Line 2785
	  <_cor16> when 'true' ->
	      _cor1
	end
'ct_hooks_args2opts'/1 =
    %% Line 2789
    fun (_cor0) ->
	let <_cor5> =
	    %% Line 2790
	    ( fun (_cor2,_cor1) ->
		  case <_cor2,_cor1> of
		    <{'ct_hooks',Hooks},Acc> when 'true' ->
			%% Line 2791
			apply 'ct_hooks_args2opts'/2
			    (Hooks, Acc)
		    %% Line 2792
		    <_cor7,Acc> when 'true' ->
			%% Line 2793
			Acc
		  end
	      -| [{'id',{0,0,'-ct_hooks_args2opts/1-fun-0-'}}] )
	in  %% Line 2790
	    call 'lists':'foldl'
		(_cor5, %% Line 2794
			[], _cor0)
'ct_hooks_args2opts'/2 =
    %% Line 2796
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[CTH|[Arg|[Prio|[[97|[110|[100]]]|Rest]]]],Acc>
	      when call 'erlang':'/='
		    (Arg,
		     [97|[110|[100]]]) ->
	      let <_cor4> =
		  %% Line 2797
		  call 'erlang':'list_to_atom'
		      (CTH)
	      in  let <_cor3> =
		      %% Line 2798
		      apply 'parse_cth_args'/1
			  (Arg)
		  in  let <_cor2> =
			  %% Line 2799
			  apply 'parse_cth_args'/1
			      (Prio)
		      in  %% Line 2797
			  apply 'ct_hooks_args2opts'/2
			      (Rest, [{_cor4,_cor3,_cor2}|%% Line 2799
							  Acc])
	  %% Line 2800
	  <[CTH|[Arg|[[97|[110|[100]]]|Rest]]],Acc> when 'true' ->
	      let <_cor6> =
		  %% Line 2801
		  call 'erlang':'list_to_atom'
		      (CTH)
	      in  let <_cor5> =
		      %% Line 2802
		      apply 'parse_cth_args'/1
			  (Arg)
		  in  %% Line 2801
		      apply 'ct_hooks_args2opts'/2
			  (Rest, [{_cor6,_cor5}|%% Line 2802
						Acc])
	  %% Line 2803
	  <[CTH|[]],Acc> when 'true' ->
	      %% Line 2804
	      apply 'ct_hooks_args2opts'/2
		  ([CTH|[[97|[110|[100]]]]], Acc)
	  %% Line 2805
	  <[CTH|[[97|[110|[100]]]|Rest]],Acc> when 'true' ->
	      let <_cor7> =
		  %% Line 2806
		  call 'erlang':'list_to_atom'
		      (CTH)
	      in  %% Line 2806
		  apply 'ct_hooks_args2opts'/2
		      (Rest, [_cor7|Acc])
	  %% Line 2807
	  <[CTH|[Args|[]]],Acc> when 'true' ->
	      %% Line 2808
	      apply 'ct_hooks_args2opts'/2
		  ([CTH|[Args|[[97|[110|[100]]]]]], Acc)
	  %% Line 2809
	  <[CTH|[Args|[Prio|[]]]],Acc> when 'true' ->
	      %% Line 2810
	      apply 'ct_hooks_args2opts'/2
		  ([CTH|[Args|[Prio|[[97|[110|[100]]]]]]], Acc)
	  %% Line 2811
	  <[],Acc> when 'true' ->
	      %% Line 2812
	      call 'lists':'reverse'
		  (Acc)
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'ct_hooks_args2opts',2}}] )
	    -| ['compiler_generated'] )
	end
'parse_cth_args'/1 =
    %% Line 2814
    fun (_cor0) ->
	%% Line 2815
	try
	    %% Line 2816
	    case call 'io_lib':'printable_list'
		     (_cor0) of
	      <'true'> when 'true' ->
		  let <_cor2> =
		      %% Line 2817
		      call 'erlang':'++'
			  (_cor0, [46])
		  in  %% Line 2817
		      case call 'erl_scan':'string'
			       (_cor2) of
			<{'ok',Toks,_cor10}> when 'true' ->
			    %% Line 2818
			    case call 'erl_parse':'parse_term'
				     (Toks) of
			      <{'ok',Args}> when 'true' ->
				  %% Line 2819
				  Args
			      ( <_cor4> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor4})
				-| ['compiler_generated'] )
			    end
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor3})
			  -| ['compiler_generated'] )
		      end
	      ( <_cor1> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor1})
		-| ['compiler_generated'] )
	    end
	of <_cor5> ->
	    _cor5
	catch <_cor8,_cor7,_cor6> ->
	    _cor0
'event_handler_args2opts'/1 =
    %% Line 2824
    fun (_cor0) ->
	%% Line 2825
	case call 'proplists':'get_value'
		 ('event_handler', _cor0) of
	  %% Line 2826
	  <'undefined'> when 'true' ->
	      %% Line 2827
	      apply 'event_handler_args2opts'/2
		  ([], _cor0)
	  %% Line 2828
	  <EHs> when 'true' ->
	      let <_cor6> =
		  %% Line 2829
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor3) ->
				case _cor3 of
				  <[EH|_cor2]> when 'true' ->
				      let <_cor4> =
					  call 'erlang':'list_to_atom'
					      (EH)
				      in  let <_cor5> =
					      apply 'lc$^0'/1
						  (_cor2)
					  in  ( [{_cor4,[]}|_cor5]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor3> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor3})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (EHs)
		    -| ['list_comprehension'] )
	      in  %% Line 2829
		  apply 'event_handler_args2opts'/2
		      (_cor6, _cor0)
	end
'event_handler_args2opts'/2 =
    %% Line 2831
    fun (_cor1,_cor0) ->
	%% Line 2832
	case call 'proplists':'get_value'
		 ('event_handler_init', _cor0) of
	  %% Line 2833
	  <'undefined'> when 'true' ->
	      _cor1
	  %% Line 2835
	  <EHs> when 'true' ->
	      %% Line 2836
	      apply 'event_handler_init_args2opts'/1
		  (EHs)
	end
'event_handler_init_args2opts'/1 =
    %% Line 2838
    fun (_cor0) ->
	case _cor0 of
	  <[EH|[Arg|[[97|[110|[100]]]|EHs]]]> when 'true' ->
	      let <_cor3> =
		  %% Line 2839
		  call 'erlang':'list_to_atom'
		      (EH)
	      in  let <_cor1> =
		      %% Line 2839
		      call 'io_lib':'format'
			  ([126|[116|[115]]], [Arg|[]])
		  in  let <_cor2> =
			  %% Line 2839
			  call 'lists':'flatten'
			      (_cor1)
		      in  let <_cor4> =
			      %% Line 2840
			      apply 'event_handler_init_args2opts'/1
				  (EHs)
			  in  %% Line 2839
			      [{_cor3,_cor2}|_cor4]
	  %% Line 2841
	  <[EH|[Arg|[]]]> when 'true' ->
	      let <_cor7> =
		  %% Line 2842
		  call 'erlang':'list_to_atom'
		      (EH)
	      in  let <_cor5> =
		      %% Line 2842
		      call 'io_lib':'format'
			  ([126|[116|[115]]], [Arg|[]])
		  in  let <_cor6> =
			  %% Line 2842
			  call 'lists':'flatten'
			      (_cor5)
		      in  %% Line 2842
			  [{_cor7,_cor6}|[]]
	  %% Line 2843
	  <[]> when 'true' ->
	      %% Line 2844
	      []
	  ( <_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8})
		  -| [{'function_name',{'event_handler_init_args2opts',1}}] )
	    -| ['compiler_generated'] )
	end
'verbosity_args2opts'/1 =
    %% Line 2846
    fun (_cor0) ->
	%% Line 2847
	case call 'proplists':'get_value'
		 ('verbosity', _cor0) of
	  %% Line 2848
	  <'undefined'> when 'true' ->
	      %% Line 2849
	      []
	  %% Line 2850
	  <VArgs> when 'true' ->
	      let <GetVLvls> =
		  %% Line 2852
		  ( fun (_cor5,_cor4) ->
			case <_cor5,_cor4> of
			  <[97|[110|[100]]],{'new',SoFar}>
			      when call 'erlang':'is_list'
				    (SoFar) ->
			      %% Line 2853
			      {'new',SoFar}
			  %% Line 2854
			  <[97|[110|[100]]],{Lvl,SoFar}>
			      when call 'erlang':'is_list'
				    (SoFar) ->
			      let <_cor1> =
				  %% Line 2855
				  call 'erlang':'list_to_integer'
				      (Lvl)
			      in  %% Line 2855
				  {'new',[{'$unspecified',_cor1}|SoFar]}
			  %% Line 2856
			  <CatOrLvl,{'new',SoFar}>
			      when call 'erlang':'is_list'
				    (SoFar) ->
			      %% Line 2857
			      {CatOrLvl,SoFar}
			  %% Line 2858
			  <Lvl,{Cat,SoFar}> when 'true' ->
			      let <_cor3> =
				  %% Line 2859
				  call 'erlang':'list_to_atom'
				      (Cat)
			      in  let <_cor2> =
				      %% Line 2859
				      call 'erlang':'list_to_integer'
					  (Lvl)
				  in  %% Line 2859
				      {'new',[{_cor3,_cor2}|SoFar]}
			  ( <_cor7,_cor6> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor7,_cor6})
				  -| [{'function_name',{'-verbosity_args2opts/1-fun-0-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-verbosity_args2opts/1-fun-0-'}}] )
	      in  %% Line 2861
		  case call 'lists':'foldl'
			   (GetVLvls, {'new',[]}, VArgs) of
		    %% Line 2862
		    <{'new',Parsed}> when 'true' ->
			%% Line 2863
			Parsed
		    %% Line 2864
		    <{Lvl,Parsed}> when 'true' ->
			let <_cor9> =
			    %% Line 2865
			    call 'erlang':'list_to_integer'
				(Lvl)
			in  %% Line 2865
			    [{'$unspecified',_cor9}|Parsed]
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor10})
		      -| ['compiler_generated'] )
		  end
	end
'add_verbosity_defaults'/1 =
    %% Line 2869
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 2870
	    call 'proplists':'get_value'
		('$unspecified', _cor0)
	in  let <_cor1> =
		%% Line 2871
		call 'proplists':'get_value'
		    ('default', _cor0)
	    in  %% Line 2870
		case <_cor2,_cor1> of
		  %% Line 2872
		  <'undefined','undefined'> when 'true' ->
		      %% Line 2873
		      [{'default',100}|[{'$unspecified',100}|_cor0]]
		  %% Line 2874
		  <Lvl,'undefined'> when 'true' ->
		      %% Line 2875
		      [{'default',Lvl}|_cor0]
		  %% Line 2876
		  <'undefined',_X_Lvl> when 'true' ->
		      %% Line 2877
		      [{'$unspecified',100}|_cor0]
		  %% Line 2878
		  <_fol3423,_fol3424> when 'true' ->
		      _cor0
		end
'rel_to_abs'/1 =
    %% Line 2887
    fun (_cor0) ->
	%% Line 2888
	case apply 'get_pa_pz'/3
		 (_cor0, [], []) of
	  <{PA,PZ}> when 'true' ->
	      do  %% Line 2889
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[%% Line 2902
				    D|_cor3]> when 'true' ->
				      let <Dir> =
					  %% Line 2890
					  apply 'rm_trailing_slash'/1
					      (D)
				      in  let <Abs> =
					      %% Line 2891
					      apply 'make_abs'/1
						  (Dir)
					  in  do  %% Line 2892
						  case <> of
						    <>
							when call 'erlang':'/='
							      (Dir,
							       Abs) ->
							do  %% Line 2893
							    call 'code':'del_path'
								(Dir)
							    do  %% Line 2894
								call 'code':'del_path'
								    (Abs)
								%% Line 2895
								call 'io':'format'
								    ('user', [67|[111|[110|[118|[101|[114|[116|[105|[110|[103|[32|[126|[112|[32|[116|[111|[32|[126|[112|[32|[97|[110|[100|[32|[114|[101|[45|[105|[110|[115|[101|[114|[116|[105|[110|[103|[32|[119|[105|[116|[104|[32|[97|[100|[100|[95|[112|[97|[116|[104|[122|[47|[49|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2897
																																																	 [Dir|[Abs|[]]])
						    %% Line 2898
						    <> when 'true' ->
							%% Line 2899
							call 'code':'del_path'
							    (Dir)
						  end
						  do  %% Line 2901
						      call 'code':'add_pathz'
							  (Abs)
						      %% Line 2902
						      apply 'lc$^0'/1
							  (_cor3)
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (%% Line 2902
			     PZ)
		    -| ['list_comprehension'] )
		  do  %% Line 2903
		      ( letrec
			    'lc$^1'/1 =
				fun (_cor11) ->
				    case _cor11 of
				      <[%% Line 2916
					D|_cor10]> when 'true' ->
					  let <Dir> =
					      %% Line 2904
					      apply 'rm_trailing_slash'/1
						  (D)
					  in  let <Abs> =
						  %% Line 2905
						  apply 'make_abs'/1
						      (Dir)
					      in  do  %% Line 2906
						      case <> of
							<>
							    when call 'erlang':'/='
								  (Dir,
								   Abs) ->
							    do  %% Line 2907
								call 'code':'del_path'
								    (Dir)
								do  %% Line 2908
								    call 'code':'del_path'
									(Abs)
								    %% Line 2909
								    call 'io':'format'
									('user', [67|[111|[110|[118|[101|[114|[116|[105|[110|[103|[32|[126|[112|[32|[116|[111|[32|[126|[112|[32|[97|[110|[100|[32|[114|[101|[45|[105|[110|[115|[101|[114|[116|[105|[110|[103|[32|[119|[105|[116|[104|[32|[97|[100|[100|[95|[112|[97|[116|[104|[97|[47|[49|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2911
																																																	    [Dir|[Abs|[]]])
							%% Line 2912
							<> when 'true' ->
							    %% Line 2913
							    call 'code':'del_path'
								(Dir)
						      end
						      do  %% Line 2915
							  call 'code':'add_patha'
							      (Abs)
							  %% Line 2916
							  apply 'lc$^1'/1
							      (_cor10)
				      <[]> when 'true' ->
					  []
				      ( <_cor11> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor11})
					      -| [{'function_name',{'lc$^1',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^1'/1
				(%% Line 2916
				 PA)
			-| ['list_comprehension'] )
		      %% Line 2917
		      call 'io':'format'
			  ('user', [126|[110]], [])
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'rm_trailing_slash'/1 =
    %% Line 2919
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2920
	    call 'filename':'split'
		(_cor0)
	in  %% Line 2920
	    call 'filename':'join'
		(_cor1)
'get_pa_pz'/3 =
    %% Line 2922
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'pa',Dirs}|Args],PA,PZ> when 'true' ->
	      let <_cor3> =
		  %% Line 2923
		  call 'erlang':'++'
		      (PA, Dirs)
	      in  %% Line 2923
		  apply 'get_pa_pz'/3
		      (Args, _cor3, PZ)
	  %% Line 2924
	  <[{'pz',Dirs}|Args],PA,PZ> when 'true' ->
	      let <_cor4> =
		  %% Line 2925
		  call 'erlang':'++'
		      (PZ, Dirs)
	      in  %% Line 2925
		  apply 'get_pa_pz'/3
		      (Args, PA, _cor4)
	  %% Line 2926
	  <[_cor8|Args],PA,PZ> when 'true' ->
	      %% Line 2927
	      apply 'get_pa_pz'/3
		  (Args, PA, PZ)
	  %% Line 2928
	  <[],PA,PZ> when 'true' ->
	      %% Line 2929
	      {PA,PZ}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'get_pa_pz',3}}] )
	    -| ['compiler_generated'] )
	end
'make_abs'/1 =
    %% Line 2931
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2932
	    call 'filename':'absname'
		(_cor0)
	in  let <Tokens> =
		%% Line 2932
		call 'filename':'split'
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 2933
		    apply 'make_abs1'/2
			(Tokens, [])
		in  let <_cor4> =
			%% Line 2933
			call 'lists':'reverse'
			    (_cor3)
		    in  %% Line 2933
			call 'filename':'join'
			    (_cor4)
'make_abs1'/2 =
    %% Line 2935
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[[46|[46]]|Dirs],[_X_Dir|Path]> when 'true' ->
	      %% Line 2936
	      apply 'make_abs1'/2
		  (Dirs, Path)
	  %% Line 2937
	  <[[46]|Dirs],Path> when 'true' ->
	      %% Line 2938
	      apply 'make_abs1'/2
		  (Dirs, Path)
	  %% Line 2939
	  <[Dir|Dirs],Path> when 'true' ->
	      %% Line 2940
	      apply 'make_abs1'/2
		  (Dirs, [Dir|Path])
	  %% Line 2941
	  <[],Path> when 'true' ->
	      %% Line 2942
	      Path
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'make_abs1',2}}] )
	    -| ['compiler_generated'] )
	end
'opts2args'/1 =
    %% Line 2947
    fun (_cor0) ->
	let <_cor102> =
	    %% Line 2948
	    ( fun (_cor100) ->
		  case _cor100 of
		    <{'exit_status',ExitStatusOpt}>
			when call 'erlang':'is_atom'
			      (ExitStatusOpt) ->
			let <_cor1> =
			    %% Line 2949
			    call 'erlang':'atom_to_list'
				(ExitStatusOpt)
			in  %% Line 2949
			    [{'exit_status',[_cor1|[]]}|[]]
		    %% Line 2950
		    <{'halt_with',{HaltM,HaltF}}> when 'true' ->
			let <_cor2> =
			    %% Line 2951
			    call 'erlang':'atom_to_list'
				(HaltM)
			in  let <_cor3> =
				%% Line 2952
				call 'erlang':'atom_to_list'
				    (HaltF)
			    in  %% Line 2951
				[{'halt_with',[_cor2|%% Line 2952
						     [_cor3|[]]]}|%% Line 2952
								  []]
		    %% Line 2953
		    <{'interactive_mode','true'}> when 'true' ->
			%% Line 2954
			[{'shell',[]}]
		    %% Line 2955
		    <{'config',CfgFile}>
			when try
			      let <_cor4> =
				  call 'erlang':'hd'
				      (CfgFile)
			      in  call 'erlang':'is_integer'
				      (_cor4)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			%% Line 2956
			[{'ct_config',[CfgFile|[]]}|[]]
		    %% Line 2957
		    <{'config',CfgFiles}>
			when try
			      let <_cor5> =
				  call 'erlang':'hd'
				      (CfgFiles)
			      in  call 'erlang':'is_list'
				      (_cor5)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			%% Line 2958
			[{'ct_config',CfgFiles}|[]]
		    %% Line 2959
		    <{'userconfig',{CBM,CfgStr = [X|_cor104]}}>
			when call 'erlang':'is_integer'
			      (X) ->
			let <_cor6> =
			    %% Line 2960
			    call 'erlang':'atom_to_list'
				(CBM)
			in  %% Line 2960
			    [{'userconfig',[_cor6|[CfgStr|[]]]}|[]]
		    %% Line 2961
		    <{'userconfig',{CBM,CfgStrs}}>
			when call 'erlang':'is_list'
			      (CfgStrs) ->
			let <_cor7> =
			    %% Line 2962
			    call 'erlang':'atom_to_list'
				(CBM)
			in  %% Line 2962
			    [{'userconfig',[_cor7|CfgStrs]}|[]]
		    %% Line 2963
		    <{'userconfig',UserCfg}>
			when call 'erlang':'is_list'
			      (UserCfg) ->
			let <_cor12> =
			    %% Line 2965
			    ( fun (_cor10) ->
				  case _cor10 of
				    <{CBM,CfgStr = [X|_cor105]}>
					when %% Line 2966
					  call 'erlang':'is_integer'
					      (X) ->
					let <_cor8> =
					    %% Line 2967
					    call 'erlang':'atom_to_list'
						(CBM)
					in  %% Line 2967
					    [_cor8|%% Line 2968
						   [CfgStr|[[97|[110|[100]]]]]]
				    %% Line 2969
				    <{CBM,CfgStrs}>
					when %% Line 2970
					  call 'erlang':'is_list'
					      (CfgStrs) ->
					let <_cor9> =
					    %% Line 2971
					    call 'erlang':'atom_to_list'
						(CBM)
					in  %% Line 2971
					    [_cor9|call 'erlang':'++'
						       (CfgStrs, %% Line 2972
								 [[97|[110|[100]]]])]
				    ( <_cor11> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor11})
					    -| [{'function_name',{'-opts2args/1-fun-0-',1}}] )
				      -| ['compiler_generated'] )
				  end
			      -| [{'id',{0,0,'-opts2args/1-fun-0-'}}] )
			in  let <Strs> =
				%% Line 2965
				call 'lists':'map'
				    (_cor12, %% Line 2973
					     UserCfg)
			    in  let <_cor14> =
				    %% Line 2974
				    call 'lists':'flatten'
					(Strs)
				in  %% Line 2974
				    case call 'lists':'reverse'
					     (_cor14) of
				      <[_X_LastAnd|StrsR]> when 'true' ->
					  let <_cor16> =
					      %% Line 2975
					      call 'lists':'reverse'
						  (StrsR)
					  in  %% Line 2975
					      [{'userconfig',_cor16}|[]]
				      ( <_cor15> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor15})
					-| ['compiler_generated'] )
				    end
		    %% Line 2976
		    <{'group',G}>
			when call 'erlang':'is_atom'
			      (G) ->
			let <_cor17> =
			    %% Line 2977
			    call 'erlang':'atom_to_list'
				(G)
			in  %% Line 2977
			    [{'group',[_cor17|[]]}|[]]
		    %% Line 2978
		    <{'group',Gs}>
			when call 'erlang':'is_list'
			      (Gs) ->
			let <_cor24> =
			    %% Line 2979
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor20) ->
					  case _cor20 of
					    <[%% Line 2980
					      G|_cor19]> when 'true' ->
						let <_cor21> =
						    call 'io_lib':'format'
							([126|[119]], [G|[]])
						in  let <_cor22> =
							call 'lists':'flatten'
							    (_cor21)
						    in  let <_cor23> =
							    %% Line 2980
							    apply 'lc$^0'/1
								(_cor19)
							in  ( [_cor22|_cor23]
							      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor20> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor20})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (%% Line 2980
				       Gs)
			      -| ['list_comprehension'] )
			in  %% Line 2981
			    [{'group',_cor24}|[]]
		    %% Line 2982
		    <{'testcase',Case}>
			when call 'erlang':'is_atom'
			      (Case) ->
			let <_cor26> =
			    %% Line 2983
			    call 'erlang':'atom_to_list'
				(Case)
			in  %% Line 2983
			    [{'case',[_cor26|[]]}|[]]
		    %% Line 2984
		    <{'testcase',Cases}> when 'true' ->
			let <_cor32> =
			    %% Line 2985
			    ( letrec
				  'lc$^1'/1 =
				      fun (_cor29) ->
					  case _cor29 of
					    <[C|_cor28]> when 'true' ->
						let <_cor30> =
						    call 'erlang':'atom_to_list'
							(C)
						in  let <_cor31> =
							apply 'lc$^1'/1
							    (_cor28)
						    in  ( [_cor30|_cor31]
							  -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor29> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor29})
						    -| [{'function_name',{'lc$^1',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^1'/1
				      (Cases)
			      -| ['list_comprehension'] )
			in  %% Line 2985
			    [{'case',_cor32}|[]]
		    %% Line 2986
		    <{'case',Cases}> when 'true' ->
			let <_cor38> =
			    %% Line 2987
			    ( letrec
				  'lc$^2'/1 =
				      fun (_cor35) ->
					  case _cor35 of
					    <[C|_cor34]> when 'true' ->
						let <_cor36> =
						    call 'erlang':'atom_to_list'
							(C)
						in  let <_cor37> =
							apply 'lc$^2'/1
							    (_cor34)
						    in  ( [_cor36|_cor37]
							  -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor35> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor35})
						    -| [{'function_name',{'lc$^2',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^2'/1
				      (Cases)
			      -| ['list_comprehension'] )
			in  %% Line 2987
			    [{'case',_cor38}|[]]
		    %% Line 2988
		    <{'allow_user_terms','true'}> when 'true' ->
			%% Line 2989
			[{'allow_user_terms',[]}]
		    %% Line 2990
		    <{'allow_user_terms','false'}> when 'true' ->
			%% Line 2991
			[]
		    %% Line 2992
		    <{'join_specs','true'}> when 'true' ->
			%% Line 2993
			[{'join_specs',[]}]
		    %% Line 2994
		    <{'join_specs','false'}> when 'true' ->
			%% Line 2995
			[]
		    %% Line 2996
		    <{'auto_compile','false'}> when 'true' ->
			%% Line 2997
			[{'no_auto_compile',[]}]
		    %% Line 2998
		    <{'auto_compile','true'}> when 'true' ->
			%% Line 2999
			[]
		    %% Line 3000
		    <{'scale_timetraps','true'}> when 'true' ->
			%% Line 3001
			[{'scale_timetraps',[]}]
		    %% Line 3002
		    <{'scale_timetraps','false'}> when 'true' ->
			%% Line 3003
			[]
		    %% Line 3004
		    <{'create_priv_dir','auto_per_run'}> when 'true' ->
			%% Line 3005
			[]
		    %% Line 3006
		    <{'create_priv_dir',PD}>
			when call 'erlang':'is_atom'
			      (PD) ->
			let <_cor39> =
			    %% Line 3007
			    call 'erlang':'atom_to_list'
				(PD)
			in  %% Line 3007
			    [{'create_priv_dir',[_cor39|[]]}|[]]
		    %% Line 3008
		    <{'force_stop','skip_rest'}> when 'true' ->
			%% Line 3009
			[{'force_stop',[[115|[107|[105|[112|[95|[114|[101|[115|[116]]]]]]]]]]}]
		    %% Line 3010
		    <{'force_stop','true'}> when 'true' ->
			%% Line 3011
			[{'force_stop',[]}]
		    %% Line 3012
		    <{'force_stop','false'}> when 'true' ->
			%% Line 3013
			[]
		    %% Line 3014
		    <{'decrypt',{'key',Key}}> when 'true' ->
			%% Line 3015
			[{'ct_decrypt_key',[Key|[]]}|[]]
		    %% Line 3016
		    <{'decrypt',{'file',File}}> when 'true' ->
			%% Line 3017
			[{'ct_decrypt_file',[File|[]]}|[]]
		    %% Line 3018
		    <{'basic_html','true'}> when 'true' ->
			%% Line 3019
			[{'basic_html',[]}]
		    %% Line 3020
		    <{'basic_html','false'}> when 'true' ->
			%% Line 3021
			[]
		    %% Line 3022
		    <{'event_handler',EH}>
			when call 'erlang':'is_atom'
			      (EH) ->
			let <_cor40> =
			    %% Line 3023
			    call 'erlang':'atom_to_list'
				(EH)
			in  %% Line 3023
			    [{'event_handler',[_cor40|[]]}|[]]
		    %% Line 3024
		    <{'event_handler',EHs}>
			when call 'erlang':'is_list'
			      (EHs) ->
			let <_cor46> =
			    %% Line 3025
			    ( letrec
				  'lc$^3'/1 =
				      fun (_cor43) ->
					  case _cor43 of
					    <[EH|_cor42]> when 'true' ->
						let <_cor44> =
						    call 'erlang':'atom_to_list'
							(EH)
						in  let <_cor45> =
							apply 'lc$^3'/1
							    (_cor42)
						    in  ( [_cor44|_cor45]
							  -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor43> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor43})
						    -| [{'function_name',{'lc$^3',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^3'/1
				      (EHs)
			      -| ['list_comprehension'] )
			in  %% Line 3025
			    [{'event_handler',_cor46}|[]]
		    %% Line 3026
		    <{'event_handler',{EH,Arg}}>
			when call 'erlang':'is_atom'
			      (EH) ->
			let <_cor47> =
			    %% Line 3027
			    call 'io_lib':'format'
				([126|[112]], [Arg|[]])
			in  let <ArgStr> =
				%% Line 3027
				call 'lists':'flatten'
				    (_cor47)
			    in  let <_cor49> =
				    %% Line 3028
				    call 'erlang':'atom_to_list'
					(EH)
				in  %% Line 3028
				    [{'event_handler_init',[_cor49|[ArgStr|[]]]}|[]]
		    %% Line 3029
		    <{'event_handler',{EHs,Arg}}>
			when call 'erlang':'is_list'
			      (EHs) ->
			let <_cor50> =
			    %% Line 3030
			    call 'io_lib':'format'
				([126|[112]], [Arg|[]])
			in  let <ArgStr> =
				%% Line 3030
				call 'lists':'flatten'
				    (_cor50)
			    in  let <_cor55> =
				    %% Line 3031
				    ( fun (_cor53) ->
					  let <_cor52> =
					      %% Line 3032
					      call 'erlang':'atom_to_list'
						  (_cor53)
					  in  %% Line 3032
					      [_cor52|%% Line 3033
						      [ArgStr|[[97|[110|[100]]]]]]
				      -| [{'id',{0,0,'-opts2args/1-fun-1-'}}] )
				in  let <Strs> =
					%% Line 3031
					call 'lists':'flatmap'
					    (_cor55, %% Line 3034
						     EHs)
				    in  %% Line 3035
					case call 'lists':'reverse'
						 (Strs) of
					  <[_X_LastAnd|StrsR]> when 'true' ->
					      let <_cor58> =
						  %% Line 3036
						  call 'lists':'reverse'
						      (StrsR)
					      in  %% Line 3036
						  [{'event_handler_init',_cor58}|[]]
					  ( <_cor57> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor57})
					    -| ['compiler_generated'] )
					end
		    %% Line 3037
		    <{'logopts',LOs}>
			when call 'erlang':'is_list'
			      (LOs) ->
			let <_cor64> =
			    %% Line 3038
			    ( letrec
				  'lc$^4'/1 =
				      fun (_cor61) ->
					  case _cor61 of
					    <[LO|_cor60]> when 'true' ->
						let <_cor62> =
						    call 'erlang':'atom_to_list'
							(LO)
						in  let <_cor63> =
							apply 'lc$^4'/1
							    (_cor60)
						    in  ( [_cor62|_cor63]
							  -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor61> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor61})
						    -| [{'function_name',{'lc$^4',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^4'/1
				      (LOs)
			      -| ['list_comprehension'] )
			in  %% Line 3038
			    [{'logopts',_cor64}|[]]
		    %% Line 3039
		    <{'verbosity',[{'default',100}|[{'$unspecified',100}]]}> when 'true' ->
			%% Line 3040
			[]
		    %% Line 3041
		    <{'verbosity',VLvl}>
			when call 'erlang':'is_integer'
			      (VLvl) ->
			let <_cor65> =
			    %% Line 3042
			    call 'erlang':'integer_to_list'
				(VLvl)
			in  %% Line 3042
			    [{'verbosity',[_cor65|[]]}|[]]
		    %% Line 3043
		    <{'verbosity',VLvls}>
			when call 'erlang':'is_list'
			      (VLvls) ->
			let <_cor72> =
			    %% Line 3045
			    ( fun (_cor70) ->
				  case _cor70 of
				    <{'$unspecified',Lvl}> when 'true' ->
					let <_cor66> =
					    %% Line 3046
					    call 'erlang':'integer_to_list'
						(Lvl)
					in  %% Line 3046
					    [_cor66|%% Line 3047
						    [[97|[110|[100]]]]]
				    %% Line 3048
				    <{Cat,Lvl}> when 'true' ->
					let <_cor67> =
					    %% Line 3049
					    call 'erlang':'atom_to_list'
						(Cat)
					in  let <_cor68> =
						%% Line 3050
						call 'erlang':'integer_to_list'
						    (Lvl)
					    in  %% Line 3049
						[_cor67|%% Line 3050
							[_cor68|%% Line 3051
								[[97|[110|[100]]]]]]
				    %% Line 3052
				    <Lvl> when 'true' ->
					let <_cor69> =
					    %% Line 3053
					    call 'erlang':'integer_to_list'
						(Lvl)
					in  %% Line 3053
					    [_cor69|%% Line 3054
						    [[97|[110|[100]]]]]
				  end
			      -| [{'id',{0,0,'-opts2args/1-fun-2-'}}] )
			in  let <VLvlArgs> =
				%% Line 3045
				call 'lists':'flatmap'
				    (_cor72, %% Line 3055
					     VLvls)
			    in  %% Line 3056
				case call 'lists':'reverse'
					 (VLvlArgs) of
				  <[_X_LastAnd|VLvlArgsR]> when 'true' ->
				      let <_cor75> =
					  %% Line 3057
					  call 'lists':'reverse'
					      (VLvlArgsR)
				      in  %% Line 3057
					  [{'verbosity',_cor75}|[]]
				  ( <_cor74> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor74})
				    -| ['compiler_generated'] )
				end
		    %% Line 3058
		    <{'ct_hooks',[]}> when 'true' ->
			%% Line 3059
			[]
		    %% Line 3060
		    <{'ct_hooks',CTHs}>
			when call 'erlang':'is_list'
			      (CTHs) ->
			do  %% Line 3061
			    call 'io':'format'
				('user', [99|[116|[95|[104|[111|[111|[107|[115|[58|[32|[126|[112]]]]]]]]]]]], [CTHs|[]])
			    let <_cor87> =
				%% Line 3063
				( fun (_cor85) ->
				      case _cor85 of
					<{CTH,Arg,Prio}> when 'true' ->
					    let <_cor76> =
						%% Line 3064
						call 'erlang':'atom_to_list'
						    (CTH)
					    in  let <_cor77> =
						    %% Line 3066
						    call 'io_lib':'format'
							([126|[112]], [Arg|[]])
						in  let <_cor78> =
							%% Line 3065
							call 'lists':'flatten'
							    (_cor77)
						    in  let <_cor79> =
							    %% Line 3068
							    call 'io_lib':'format'
								([126|[112]], [Prio|[]])
							in  let <_cor80> =
								%% Line 3067
								call 'lists':'flatten'
								    (_cor79)
							    in  %% Line 3064
								[_cor76|%% Line 3065
									[_cor78|%% Line 3067
										[_cor80|%% Line 3069
											[[97|[110|[100]]]]]]]
					%% Line 3070
					<{CTH,Arg}> when 'true' ->
					    let <_cor81> =
						%% Line 3071
						call 'erlang':'atom_to_list'
						    (CTH)
					    in  let <_cor82> =
						    %% Line 3073
						    call 'io_lib':'format'
							([126|[112]], [Arg|[]])
						in  let <_cor83> =
							%% Line 3072
							call 'lists':'flatten'
							    (_cor82)
						    in  %% Line 3071
							[_cor81|%% Line 3072
								[_cor83|%% Line 3074
									[[97|[110|[100]]]]]]
					%% Line 3075
					<CTH>
					    when call 'erlang':'is_atom'
						  (_cor85) ->
					    let <_cor84> =
						%% Line 3076
						call 'erlang':'atom_to_list'
						    (CTH)
					    in  %% Line 3076
						[_cor84|[[97|[110|[100]]]]]
					( <_cor86> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor86})
						-| [{'function_name',{'-opts2args/1-fun-3-',1}}] )
					  -| ['compiler_generated'] )
				      end
				  -| [{'id',{0,0,'-opts2args/1-fun-3-'}}] )
			    in  let <Strs> =
				    %% Line 3062
				    call 'lists':'flatmap'
					(_cor87, %% Line 3077
						 CTHs)
				in  %% Line 3078
				    case call 'lists':'reverse'
					     (Strs) of
				      <[_X_LastAnd|StrsR]> when 'true' ->
					  let <_cor90> =
					      %% Line 3079
					      call 'lists':'reverse'
						  (StrsR)
					  in  do  %% Line 3079
						  call 'io':'format'
						      ('user', [114|[101|[116|[117|[114|[110|[58|[32|[126|[112]]]]]]]]]], [_cor90|[]])
						  let <_cor91> =
						      %% Line 3080
						      call 'lists':'reverse'
							  (StrsR)
						  in  %% Line 3080
						      [{'ct_hooks',_cor91}|[]]
				      ( <_cor89> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor89})
					-| ['compiler_generated'] )
				    end
		    %% Line 3081
		    <{Opt,As = [A|_cor106]}>
			when call 'erlang':'is_atom'
			      (A) ->
			let <_cor97> =
			    %% Line 3082
			    ( letrec
				  'lc$^5'/1 =
				      fun (_cor94) ->
					  case _cor94 of
					    <[Atom|_cor93]> when 'true' ->
						let <_cor95> =
						    call 'erlang':'atom_to_list'
							(Atom)
						in  let <_cor96> =
							apply 'lc$^5'/1
							    (_cor93)
						    in  ( [_cor95|_cor96]
							  -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor94> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor94})
						    -| [{'function_name',{'lc$^5',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^5'/1
				      (As)
			      -| ['list_comprehension'] )
			in  %% Line 3082
			    [{Opt,_cor97}|[]]
		    %% Line 3083
		    <{Opt,Strs = [S|_cor107]}>
			when call 'erlang':'is_list'
			      (S) ->
			%% Line 3084
			[{Opt,Strs}|[]]
		    %% Line 3085
		    <{Opt,A}>
			when call 'erlang':'is_atom'
			      (A) ->
			let <_cor98> =
			    %% Line 3086
			    call 'erlang':'atom_to_list'
				(A)
			in  %% Line 3086
			    [{Opt,[_cor98|[]]}|[]]
		    %% Line 3087
		    <{Opt,I}>
			when call 'erlang':'is_integer'
			      (I) ->
			let <_cor99> =
			    %% Line 3088
			    call 'erlang':'integer_to_list'
				(I)
			in  %% Line 3088
			    [{Opt,[_cor99|[]]}|[]]
		    %% Line 3089
		    <{Opt,S}>
			when call 'erlang':'is_list'
			      (S) ->
			%% Line 3090
			[{Opt,[S|[]]}|[]]
		    %% Line 3091
		    <Opt> when 'true' ->
			%% Line 3092
			Opt
		  end
	      -| [{'id',{0,0,'-opts2args/1-fun-4-'}}] )
	in  %% Line 2948
	    call 'lists':'flatmap'
		(_cor102, _cor0)
'locate_test_dir'/2 =
    %% Line 3095
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 3096
	    case call 'ct_util':'is_test_dir'
		     (_cor1) of
	      %% Line 3097
	      <'true'> when 'true' ->
		  _cor1
	      %% Line 3098
	      <'false'> when 'true' ->
		  call 'ct_util':'get_testdir'
		      (_cor1, _cor0)
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
	in  %% Line 3100
	    case call 'filelib':'is_dir'
		     (_cor3) of
	      %% Line 3101
	      <'true'> when 'true' ->
		  {'ok',_cor3}
	      %% Line 3102
	      <'false'> when 'true' ->
		  {'error','invalid'}
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor5})
		-| ['compiler_generated'] )
	    end
'is_suite'/1 =
    %% Line 3105
    fun (_cor0) ->
	case _cor0 of
	  <Mod>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 3106
		  call 'erlang':'atom_to_list'
		      (Mod)
	      in  %% Line 3106
		  apply 'is_suite'/1
		      (_cor1)
	  %% Line 3107
	  <ModOrFile>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor2> =
		  %% Line 3108
		  call 'filename':'basename'
		      (ModOrFile, [46|[101|[114|[108]]]])
	      in  %% Line 3108
		  case call 'lists':'reverse'
			   (_cor2) of
		    %% Line 3109
		    <[69|[84|[73|[85|[83|[95|_cor7]]]]]]> when 'true' ->
			%% Line 3110
			'true'
		    %% Line 3111
		    <_cor8> when 'true' ->
			let <_cor3> =
			    %% Line 3112
			    call 'filename':'basename'
				(ModOrFile, [46|[98|[101|[97|[109]]]]])
			in  %% Line 3112
			    case call 'lists':'reverse'
				     (_cor3) of
			      %% Line 3113
			      <[69|[84|[73|[85|[83|[95|_cor9]]]]]]> when 'true' ->
				  %% Line 3114
				  'true'
			      %% Line 3115
			      <_cor10> when 'true' ->
				  %% Line 3116
				  'false'
			    end
		  end
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'is_suite',1}}] )
	    -| ['compiler_generated'] )
	end
'get_all_testcases'/1 =
    %% Line 3120
    fun (_cor0) ->
	%% Line 3121
	try
	    call 'ct_framework':'get_all_cases'
		(_cor0)
	of <_cor1> ->
	    case _cor1 of
	      %% Line 3122
	      <Error = {'error',_X_Reason}> when 'true' ->
		  %% Line 3123
		  Error
	      %% Line 3124
	      <SuiteCases> when 'true' ->
		  let <_cor6> =
		      %% Line 3125
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor4) ->
				    case _cor4 of
				      <[{_X_S,C}|_cor3]> when 'true' ->
					  let <_cor5> =
					      apply 'lc$^0'/1
						  (_cor3)
					  in  ( [C|_cor5]
						-| ['compiler_generated'] )
				      ( <[_cor2|_cor3]> when 'true' ->
					    apply 'lc$^0'/1
						(_cor3)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor4> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor4})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(SuiteCases)
			-| ['list_comprehension'] )
		  in  %% Line 3126
		      try
			  call _cor0:'sequences'
			      ()
		      of <_cor8> ->
			  case _cor8 of
			    %% Line 3127
			    <[]> when 'true' ->
				_cor6
			    %% Line 3129
			    <Seqs> when 'true' ->
				let <_cor13> =
				    %% Line 3130
				    ( letrec
					  'lc$^1'/1 =
					      fun (_cor11) ->
						  case _cor11 of
						    <[{_cor32,TCs}|_cor10]> when 'true' ->
							let <_cor12> =
							    apply 'lc$^1'/1
								(_cor10)
							in  ( [TCs|_cor12]
							      -| ['compiler_generated'] )
						    ( <[_cor9|_cor10]> when 'true' ->
							  apply 'lc$^1'/1
							      (_cor10)
						      -| ['compiler_generated'] )
						    <[]> when 'true' ->
							[]
						    ( <_cor11> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor11})
							    -| [{'function_name',{'lc$^1',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  apply 'lc$^1'/1
					      (Seqs)
				      -| ['list_comprehension'] )
				in  let <TCs1> =
					%% Line 3130
					call 'lists':'flatten'
					    (_cor13)
				    in  let <_cor21> =
					    %% Line 3132
					    ( fun (_cor18,_cor17) ->
						  %% Line 3133
						  case call 'lists':'member'
							   (_cor18, _cor17) of
						    %% Line 3134
						    <'true'> when 'true' ->
							_cor17
						    %% Line 3135
						    <'false'> when 'true' ->
							[_cor18|_cor17]
						    ( <_cor16> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor16})
						      -| ['compiler_generated'] )
						  end
					      -| [{'id',{0,0,'-get_all_testcases/1-fun-0-'}}] )
					in  let <_cor15> =
						%% Line 3137
						call 'erlang':'++'
						    (_cor6, TCs1)
					    in  let <_cor22> =
						    %% Line 3132
						    call 'lists':'foldl'
							(_cor21, %% Line 3137
								 [], _cor15)
						in  %% Line 3131
						    call 'lists':'reverse'
							(_cor22)
			  end
		      catch <_cor26,_cor25,_cor24> ->
			  _cor6
	    end
	catch <_cor30,_cor29,_cor28> ->
	    %% Line 3144
	    {'error',_cor29}
'start_trace'/1 =
    %% Line 3151
    fun (_cor0) ->
	%% Line 3152
	case call 'lists':'keysearch'
		 ('ct_trace', 1, _cor0) of
	  %% Line 3153
	  <{'value',{'ct_trace',File}}> when 'true' ->
	      let <TraceSpec> =
		  %% Line 3154
		  apply 'delistify'/1
		      (File)
	      in  %% Line 3155
		  case call 'file':'consult'
			   (TraceSpec) of
		    %% Line 3156
		    <{'ok',Terms}> when 'true' ->
			let <_cor2> =
			    catch
				%% Line 3157
				apply 'do_trace'/1
				    (Terms)
			in  %% Line 3157
			    case _cor2 of
			      %% Line 3158
			      <'ok'> when 'true' ->
				  %% Line 3159
				  'true'
			      %% Line 3160
			      <{_cor8,Error}> when 'true' ->
				  do  %% Line 3161
				      call 'io':'format'
					  ([87|[97|[114|[110|[105|[110|[103|[33|[32|[84|[114|[97|[99|[105|[110|[103|[32|[110|[111|[116|[32|[115|[116|[97|[114|[116|[101|[100|[46|[32|[82|[101|[97|[115|[111|[110|[58|[32|[126|[112|[126|[110|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 3162
																																				    [Error|[]])
				      %% Line 3163
				      'false'
			      ( <_cor3> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor3})
				-| ['compiler_generated'] )
			    end
		    %% Line 3165
		    <{_cor9,Error}> when 'true' ->
			let <_cor4> =
			    %% Line 3167
			    call 'file':'format_error'
				(Error)
			in  do  %% Line 3166
				call 'io':'format'
				    ([87|[97|[114|[110|[105|[110|[103|[33|[32|[84|[114|[97|[99|[105|[110|[103|[32|[110|[111|[116|[32|[115|[116|[97|[114|[116|[101|[100|[46|[32|[82|[101|[97|[115|[111|[110|[58|[32|[126|[116|[115|[126|[110|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 3167
																																				    [_cor4|[]])
				%% Line 3168
				'false'
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3170
	  <'false'> when 'true' ->
	      %% Line 3171
	      'false'
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'do_trace'/1 =
    %% Line 3174
    fun (_cor0) ->
	do  %% Line 3175
	    call 'dbg':'tracer'
		()
	    let <_cor1> =
		%% Line 3176
		call 'erlang':'self'
		    ()
	    in  do  %% Line 3176
		    call 'dbg':'p'
			(_cor1, ['sos'|['call']])
		    let <_cor7> =
			%% Line 3177
			( fun (_cor5) ->
			      case _cor5 of
				<{'m',M}> when 'true' ->
				    %% Line 3178
				    case call 'dbg':'tpl'
					     (M, 'x') of
				      %% Line 3179
				      <{'error',What}> when 'true' ->
					  call 'erlang':'exit'
					      ({'error',{'tracing_failed',What}})
				      %% Line 3180
				      <_cor9> when 'true' ->
					  'ok'
				    end
				%% Line 3182
				<{'me',M}> when 'true' ->
				    %% Line 3183
				    case call 'dbg':'tp'
					     (M, [{'_',[],[{'exception_trace'}|[{'message',{'caller'}}]]}]) of
				      %% Line 3185
				      <{'error',What}> when 'true' ->
					  call 'erlang':'exit'
					      ({'error',{'tracing_failed',What}})
				      %% Line 3186
				      <_cor10> when 'true' ->
					  'ok'
				    end
				%% Line 3188
				<{'f',M,F}> when 'true' ->
				    %% Line 3189
				    case call 'dbg':'tpl'
					     (M, F, [{'_',[],[{'exception_trace'}|[{'message',{'caller'}}]]}]) of
				      %% Line 3191
				      <{'error',What}> when 'true' ->
					  call 'erlang':'exit'
					      ({'error',{'tracing_failed',What}})
				      %% Line 3192
				      <_cor11> when 'true' ->
					  'ok'
				    end
				%% Line 3194
				<Huh> when 'true' ->
				    %% Line 3195
				    call 'erlang':'exit'
					({'error',{'unrecognized_trace_term',Huh}})
			      end
			  -| [{'id',{0,0,'-do_trace/1-fun-0-'}}] )
		    in  do  %% Line 3177
			    call 'lists':'foreach'
				(_cor7, _cor0)
			    %% Line 3197
			    'ok'
'stop_trace'/1 =
    %% Line 3199
    fun (_cor0) ->
	case _cor0 of
	  <'true'> when 'true' ->
	      %% Line 3200
	      call 'dbg':'stop_clear'
		  ()
	  %% Line 3201
	  <'false'> when 'true' ->
	      %% Line 3202
	      'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'stop_trace',1}}] )
	    -| ['compiler_generated'] )
	end
'ensure_atom'/1 =
    %% Line 3204
    fun (_cor0) ->
	case _cor0 of
	  <Atom>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 3205
	      Atom
	  %% Line 3206
	  <String>
	      when try
		    let <_cor1> =
			call 'erlang':'is_list'
			    (_cor0)
		    in  let <_cor2> =
			    call 'erlang':'hd'
				(_cor0)
			in  let <_cor3> =
				call 'erlang':'is_integer'
				    (_cor2)
			    in  call 'erlang':'and'
				    (_cor1, _cor3)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 3207
	      call 'erlang':'list_to_atom'
		  (String)
	  %% Line 3208
	  <List>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 3209
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor6) ->
			    case _cor6 of
			      <[Item|_cor5]> when 'true' ->
				  let <_cor7> =
				      apply 'ensure_atom'/1
					  (Item)
				  in  let <_cor8> =
					  apply 'lc$^0'/1
					      (_cor5)
				      in  ( [_cor7|_cor8]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor6> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor6})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(List)
		-| ['list_comprehension'] )
	  %% Line 3210
	  <Other> when 'true' ->
	      %% Line 3211
	      Other
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('ct_run')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('ct_run', _cor0)
end