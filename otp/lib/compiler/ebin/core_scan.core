module 'core_scan' ['format_error'/1,
		    'module_info'/0,
		    'module_info'/1,
		    'string'/1,
		    'string'/2]
    attributes [%% Line 84
		'spec' =
		    %% Line 84
		    [{{'format_error',1},[{'type',84,'fun',[{'type',84,'product',[{'type',84,'term',[]}]}|[{'type',84,'iolist',[]}]]}]}]]
'string'/1 =
    %% Line 56
    fun (_cor0) ->
	apply 'string'/2
	    (_cor0, 1)
'string'/2 =
    %% Line 58
    fun (_cor1,_cor0) ->
	let <_3374> =
	    %% Line 60
	    apply 'string_pre_scan'/3
		(_cor1, [], _cor0)
	in  %% Line 60
	    case _3374 of
	      %% Line 61
	      <{'done',_cor7,SoFar,Ep}> when 'true' ->
		  let <_cor2> =
		      %% Line 62
		      call 'lists':'reverse'
			  (SoFar)
		  in  let <_626> =
			  %% Line 62
			  apply 'scan'/2
			      (_cor2, _cor0)
		      in  %% Line 62
			  case _626 of
			    %% Line 63
			    <{'ok',Toks}> when 'true' ->
				{'ok',Toks,Ep}
			    %% Line 64
			    <{'error',E}> when 'true' ->
				{'error',E,Ep}
			    ( <_cor3> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_626})
			      -| ['compiler_generated'] )
			  end
	      %% Line 66
	      <Other> when 'true' ->
		  _3374
	    end
'string_pre_scan'/3 =
    %% Line 72
    fun (_cor2,_cor1,_cor0) ->
	let <_1356> =
	    %% Line 73
	    apply 'pre_scan'/3
		(_cor2, _cor1, _cor0)
	in  %% Line 73
	    case _1356 of
	      %% Line 74
	      <{'done',Rest,SoFar1,Ep}> when 'true' ->
		  %% Line 75
		  {'done',Rest,SoFar1,Ep}
	      %% Line 76
	      <{'more',Rest,SoFar1,Ep}> when 'true' ->
		  let <_cor3> =
		      %% Line 77
		      call 'erlang':'++'
			  (Rest, 'eof')
		  in  %% Line 77
		      apply 'string_pre_scan'/3
			  (_cor3, SoFar1, Ep)
	      %% Line 78
	      <Other> when 'true' ->
		  _1356
	    end
'format_error'/1 =
    %% Line 86
    fun (_cor0) ->
	case _cor0 of
	  <{'string',Quote,Head}> when 'true' ->
	      let <_cor3> =
		  %% Line 96
		  case Quote of
		    <39> when 'true' ->
			[97|[116|[111|[109]]]]
		    %% Line 97
		    <34> when 'true' ->
			[115|[116|[114|[105|[110|[103]]]]]]
		    ( <_cor1> when 'true' ->
			  primop 'match_fail'
			      ({'function_clause',Quote})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor1> =
		      %% Line 88
		      call 'io_lib':'write_string'
			  (Head, Quote)
		  in  let <_cor2> =
			  %% Line 88
			  call 'erlang':'++'
			      ([32|[115|[116|[97|[114|[116|[105|[110|[103|[32|[119|[105|[116|[104|[32]]]]]]]]]]]]]]], _cor1)
		      in  let <_cor4> =
			      %% Line 87
			      call 'erlang':'++'
				  (_cor3, _cor2)
			  in  let <_cor5> =
				  %% Line 87
				  call 'erlang':'++'
				      ([117|[110|[116|[101|[114|[109|[105|[110|[97|[116|[101|[100|[32]]]]]]]]]]]]], _cor4)
			      in  %% Line 87
				  [_cor5|%% Line 88
					 []]
	  %% Line 89
	  <{'illegal',Type}> when 'true' ->
	      call 'io_lib':'fwrite'
		  ([105|[108|[108|[101|[103|[97|[108|[32|[126|[119]]]]]]]]]], [Type|[]])
	  %% Line 90
	  <'char'> when 'true' ->
	      [117|[110|[116|[101|[114|[109|[105|[110|[97|[116|[101|[100|[32|[99|[104|[97|[114|[97|[99|[116|[101|[114]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 91
	  <'scan'> when 'true' ->
	      [112|[114|[101|[109|[97|[116|[117|[114|[101|[32|[101|[110|[100]]]]]]]]]]]]]
	  %% Line 92
	  <{'base',Base}> when 'true' ->
	      call 'io_lib':'fwrite'
		  ([105|[108|[108|[101|[103|[97|[108|[32|[98|[97|[115|[101|[32|[39|[126|[119|[39]]]]]]]]]]]]]]]]], [Base|[]])
	  %% Line 93
	  <'float'> when 'true' ->
	      [98|[97|[100|[32|[102|[108|[111|[97|[116]]]]]]]]]
	  %% Line 94
	  <Other> when 'true' ->
	      call 'io_lib':'write'
		  (_cor0)
	end
'pre_scan'/3 =
    %% Line 120
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[C|Cs],SoFar,Pos> when 'true' ->
	      %% Line 121
	      apply 'pre_scan'/4
		  (C, Cs, _cor1, _cor0)
	  %% Line 122
	  <[],SoFar,Pos> when 'true' ->
	      %% Line 123
	      {'more',[],_cor1,_cor0}
	  %% Line 124
	  <'eof',SoFar,Pos> when 'true' ->
	      %% Line 125
	      {'done','eof',_cor1,_cor0}
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'pre_scan',3}}] )
	    -| ['compiler_generated'] )
	end
'pre_scan'/4 =
    %% Line 129
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <36,Cs0,SoFar0,Pos> when 'true' ->
	      let <_4065> =
		  %% Line 130
		  apply 'pre_char'/2
		      (_cor2, [36|_cor1])
	      in  %% Line 130
		  case _4065 of
		    %% Line 131
		    <{Cs,SoFar}> when 'true' ->
			%% Line 132
			apply 'pre_scan'/3
			    (Cs, SoFar, _cor0)
		    %% Line 133
		    <'more'> when 'true' ->
			%% Line 134
			{'more',[36|_cor2],_cor1,_cor0}
		    %% Line 135
		    <'error'> when 'true' ->
			%% Line 215
			{'error',{_cor0,'core_scan','char'},_cor0}
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_4065})
		      -| ['compiler_generated'] )
		  end
	  %% Line 138
	  <39,Cs,SoFar,Pos> when 'true' ->
	      %% Line 139
	      apply 'pre_string'/6
		  (_cor2, 39, '\'', _cor0, [39|_cor1], _cor0)
	  %% Line 140
	  <{'\'',Sp},Cs,SoFar,Pos> when 'true' ->
	      %% Line 141
	      apply 'pre_string'/6
		  (_cor2, 39, '\'', Sp, _cor1, _cor0)
	  %% Line 142
	  <34,Cs,SoFar,Pos> when 'true' ->
	      %% Line 143
	      apply 'pre_string'/6
		  (_cor2, 34, '"', _cor0, [34|_cor1], _cor0)
	  %% Line 144
	  <{'"',Sp},Cs,SoFar,Pos> when 'true' ->
	      %% Line 145
	      apply 'pre_string'/6
		  (_cor2, 34, '"', Sp, _cor1, _cor0)
	  %% Line 146
	  <37,Cs,SoFar,Pos> when 'true' ->
	      %% Line 147
	      apply 'pre_comment'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 148
	  <'%',Cs,SoFar,Pos> when 'true' ->
	      %% Line 149
	      apply 'pre_comment'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 150
	  <10,Cs,SoFar,Pos> when 'true' ->
	      let <_cor5> =
		  %% Line 151
		  call 'erlang':'+'
		      (_cor0, 1)
	      in  %% Line 151
		  apply 'pre_scan'/3
		      (_cor2, [10|_cor1], _cor5)
	  %% Line 152
	  <C,Cs,SoFar,Pos> when 'true' ->
	      %% Line 153
	      apply 'pre_scan'/3
		  (_cor2, [_cor3|_cor1], _cor0)
	end
'pre_string'/6 =
    %% Line 157
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Q|Cs],_cor14,_cor15,_cor16,SoFar,Pos>
	      when call 'erlang':'=:='
		    (_cor4,
		     Q) ->
	      %% Line 158
	      apply 'pre_scan'/3
		  (Cs, [Q|_cor1], _cor0)
	  %% Line 159
	  <[10|Cs],Q,Reent,Sp,SoFar,Pos> when 'true' ->
	      let <_cor6> =
		  %% Line 160
		  call 'erlang':'+'
		      (_cor0, 1)
	      in  %% Line 160
		  apply 'pre_string'/6
		      (Cs, _cor4, _cor3, _cor2, [10|_cor1], _cor6)
	  %% Line 161
	  <[92|Cs0],Q,Reent,Sp,SoFar0,Pos> when 'true' ->
	      let <_3706> =
		  %% Line 162
		  apply 'pre_escape'/2
		      (Cs0, _cor1)
	      in  %% Line 162
		  case _3706 of
		    %% Line 163
		    <{Cs,SoFar}> when 'true' ->
			%% Line 164
			apply 'pre_string'/6
			    (Cs, _cor4, _cor3, _cor2, SoFar, _cor0)
		    %% Line 165
		    <'more'> when 'true' ->
			%% Line 166
			{'more',[{_cor3,_cor2}|[92|Cs0]],_cor1,_cor0}
		    %% Line 167
		    <'error'> when 'true' ->
			%% Line 168
			apply 'pre_string_error'/4
			    (_cor4, _cor2, _cor1, _cor0)
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_3706})
		      -| ['compiler_generated'] )
		  end
	  %% Line 170
	  <[C|Cs],Q,Reent,Sp,SoFar,Pos> when 'true' ->
	      %% Line 171
	      apply 'pre_string'/6
		  (Cs, _cor4, _cor3, _cor2, [C|_cor1], _cor0)
	  %% Line 172
	  <[],_cor17,Reent,Sp,SoFar,Pos> when 'true' ->
	      %% Line 173
	      {'more',[{_cor3,_cor2}|[]],_cor1,_cor0}
	  %% Line 174
	  <'eof',Q,_cor18,Sp,SoFar,Pos> when 'true' ->
	      %% Line 175
	      apply 'pre_string_error'/4
		  (_cor4, _cor2, _cor1, _cor0)
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'pre_string',6}}] )
	    -| ['compiler_generated'] )
	end
'pre_string_error'/4 =
    %% Line 177
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 178
	    call 'string':'chr'
		(_cor1, _cor3)
	in  let <_cor5> =
		%% Line 178
		call 'erlang':'-'
		    (_cor4, 1)
	    in  let <_cor6> =
		    %% Line 178
		    call 'string':'substr'
			(_cor1, 1, _cor5)
		in  let <S> =
			%% Line 178
			call 'lists':'reverse'
			    (_cor6)
		    in  let <_cor8> =
			    %% Line 179
			    call 'string':'substr'
				(S, 1, 16)
			in  let <_189> = {%% Line 179
				 'string',_cor3,_cor8}
			    in  %% Line 215
				{'error',{_cor2,'core_scan',_189},_cor0}
'pre_char'/2 =
    %% Line 181
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[C|Cs],SoFar> when 'true' ->
	      %% Line 185
	      case <C,Cs,_cor0> of
		<92,_2944,_2571> when 'true' ->
		    %% Line 186
		    apply 'pre_escape'/2
			(Cs, _cor0)
		%% Line 187
		<_1185,_324,_2771> when 'true' ->
		    %% Line 188
		    {Cs,[C|_cor0]}
	      end
	  %% Line 182
	  <[],_cor4> when 'true' ->
	      'more'
	  %% Line 183
	  <'eof',_cor5> when 'true' ->
	      'error'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'pre_char',2}}] )
	    -| ['compiler_generated'] )
	end
'pre_escape'/2 =
    %% Line 190
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[94|Cs0],SoFar> when 'true' ->
	      %% Line 191
	      case Cs0 of
		%% Line 192
		<[C3|Cs]> when 'true' ->
		    %% Line 193
		    {Cs,[C3|[94|[92|_cor0]]]}
		%% Line 194
		<[]> when 'true' ->
		    'more'
		%% Line 195
		<'eof'> when 'true' ->
		    'error'
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',Cs0})
		  -| ['compiler_generated'] )
	      end
	  %% Line 197
	  <[C|Cs],SoFar> when 'true' ->
	      %% Line 198
	      {Cs,[C|[92|_cor0]]}
	  %% Line 199
	  <[],_cor5> when 'true' ->
	      'more'
	  %% Line 200
	  <'eof',_cor6> when 'true' ->
	      'error'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'pre_escape',2}}] )
	    -| ['compiler_generated'] )
	end
'pre_comment'/3 =
    %% Line 205
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[10|Cs],SoFar,Pos> when 'true' ->
	      let <_cor3> =
		  %% Line 206
		  call 'erlang':'+'
		      (_cor0, 1)
	      in  %% Line 206
		  apply 'pre_scan'/3
		      (Cs, [10|[32|_cor1]], _cor3)
	  %% Line 207
	  <[_cor7|Cs],SoFar,Pos> when 'true' ->
	      %% Line 208
	      apply 'pre_comment'/3
		  (Cs, _cor1, _cor0)
	  %% Line 209
	  <[],SoFar,Pos> when 'true' ->
	      %% Line 210
	      {'more',['%'],_cor1,_cor0}
	  %% Line 211
	  <'eof',Sofar,Pos> when 'true' ->
	      %% Line 212
	      apply 'pre_scan'/3
		  ('eof', [32|_cor1], _cor0)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'pre_comment',3}}] )
	    -| ['compiler_generated'] )
	end
'scan'/2 =
    %% Line 228
    fun (_cor1,_cor0) ->
	%% Line 229
	apply 'scan1'/3
	    (_cor1, [], _cor0)
'scan1'/3 =
    %% Line 234
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[10|Cs],Toks,Pos> when 'true' ->
	      let <_cor3> =
		  %% Line 235
		  call 'erlang':'+'
		      (_cor0, 1)
	      in  %% Line 235
		  apply 'scan1'/3
		      (Cs, _cor1, _cor3)
	  %% Line 236
	  <[C|Cs],Toks,Pos>
	      when let <_cor4> =
		    call 'erlang':'>='
			(C, 0)
		in  let <_cor5> =
			call 'erlang':'=<'
			    (C, 32)
		    in  call 'erlang':'and'
			    (_cor4, _cor5) ->
	      %% Line 237
	      apply 'scan1'/3
		  (Cs, _cor1, _cor0)
	  %% Line 238
	  <[C|Cs],Toks,Pos>
	      when let <_cor6> =
		    call 'erlang':'>='
			(C, 128)
		in  let <_cor7> =
			call 'erlang':'=<'
			    (C, 160)
		    in  call 'erlang':'and'
			    (_cor6, _cor7) ->
	      %% Line 239
	      apply 'scan1'/3
		  (Cs, _cor1, _cor0)
	  %% Line 240
	  <[C|Cs],Toks,Pos>
	      when let <_cor8> =
		    call 'erlang':'>='
			(C, 97)
		in  let <_cor9> =
			call 'erlang':'=<'
			    (C, 122)
		    in  call 'erlang':'and'
			    (_cor8, _cor9) ->
	      %% Line 241
	      apply 'scan_key_word'/4
		  (C, Cs, _cor1, _cor0)
	  %% Line 242
	  <[C|Cs],Toks,Pos>
	      when try
		    let <_cor10> =
			call 'erlang':'>='
			    (C, 223)
		    in  let <_cor11> =
			    call 'erlang':'=<'
				(C, 255)
			in  let <_cor12> =
				call 'erlang':'/='
				    (C, 247)
			    in  let <_cor13> =
				    call 'erlang':'and'
					(_cor11, _cor12)
				in  call 'erlang':'and'
					(_cor10, _cor13)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 243
	      apply 'scan_key_word'/4
		  (C, Cs, _cor1, _cor0)
	  %% Line 244
	  <[C|Cs],Toks,Pos>
	      when let <_cor14> =
		    call 'erlang':'>='
			(C, 65)
		in  let <_cor15> =
			call 'erlang':'=<'
			    (C, 90)
		    in  call 'erlang':'and'
			    (_cor14, _cor15) ->
	      %% Line 245
	      apply 'scan_variable'/4
		  (C, Cs, _cor1, _cor0)
	  %% Line 246
	  <[C|Cs],Toks,Pos>
	      when try
		    let <_cor16> =
			call 'erlang':'>='
			    (C, 192)
		    in  let <_cor17> =
			    call 'erlang':'=<'
				(C, 222)
			in  let <_cor18> =
				call 'erlang':'/='
				    (C, 215)
			    in  let <_cor19> =
				    call 'erlang':'and'
					(_cor17, _cor18)
				in  call 'erlang':'and'
					(_cor16, _cor19)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 247
	      apply 'scan_variable'/4
		  (C, Cs, _cor1, _cor0)
	  %% Line 248
	  <[C|Cs],Toks,Pos>
	      when let <_cor20> =
		    call 'erlang':'>='
			(C, 48)
		in  let <_cor21> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_cor20, _cor21) ->
	      %% Line 249
	      apply 'scan_number'/4
		  (C, Cs, _cor1, _cor0)
	  %% Line 250
	  <[45|[C|Cs]],Toks,Pos>
	      when let <_cor22> =
		    call 'erlang':'>='
			(C, 48)
		in  let <_cor23> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_cor22, _cor23) ->
	      %% Line 251
	      apply 'scan_signed_number'/5
		  (45, C, Cs, _cor1, _cor0)
	  %% Line 252
	  <[43|[C|Cs]],Toks,Pos>
	      when let <_cor24> =
		    call 'erlang':'>='
			(C, 48)
		in  let <_cor25> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_cor24, _cor25) ->
	      %% Line 253
	      apply 'scan_signed_number'/5
		  (43, C, Cs, _cor1, _cor0)
	  %% Line 254
	  <[95|Cs],Toks,Pos> when 'true' ->
	      %% Line 255
	      apply 'scan_variable'/4
		  (95, Cs, _cor1, _cor0)
	  %% Line 256
	  <[36|Cs0],Toks,Pos> when 'true' ->
	      let <_238> =
		  %% Line 257
		  apply 'scan_char'/2
		      (Cs0, _cor0)
	      in  %% Line 257
		  case _238 of
		    <{C,Cs,Pos1}> when 'true' ->
			%% Line 258
			apply 'scan1'/3
			    (Cs, [{'char',_cor0,C}|_cor1], Pos1)
		    ( <_cor26> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_238})
		      -| ['compiler_generated'] )
		  end
	  %% Line 259
	  <[39|Cs0],Toks,Pos> when 'true' ->
	      let <_3711> =
		  %% Line 324
		  apply 'scan_string'/4
		      (Cs0, [], 39, _cor0)
	      in  %% Line 260
		  case _3711 of
		    <{S,Cs1,Pos1}> when 'true' ->
			let <_cor28> =
			    catch
				%% Line 261
				call 'erlang':'list_to_atom'
				    (S)
			in  %% Line 261
			    case _cor28 of
			      %% Line 262
			      <A>
				  when call 'erlang':'is_atom'
					(_cor28) ->
				  %% Line 263
				  apply 'scan1'/3
				      (Cs1, [{'atom',_cor0,_cor28}|_cor1], Pos1)
			      %% Line 264
			      <_X_Error> when 'true' ->
				  %% Line 470
				  {'error',{_cor0,'core_scan',{'illegal','atom'}}}
			    end
		    ( <_cor27> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_3711})
		      -| ['compiler_generated'] )
		  end
	  %% Line 266
	  <[34|Cs0],Toks,Pos> when 'true' ->
	      let <_4098> =
		  %% Line 324
		  apply 'scan_string'/4
		      (Cs0, [], 34, _cor0)
	      in  %% Line 267
		  case _4098 of
		    <{S,Cs1,Pos1}> when 'true' ->
			%% Line 268
			apply 'scan1'/3
			    (Cs1, [{'string',_cor0,S}|_cor1], Pos1)
		    ( <_cor30> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4098})
		      -| ['compiler_generated'] )
		  end
	  %% Line 270
	  <[45|[62|Cs]],Toks,Pos> when 'true' ->
	      %% Line 271
	      apply 'scan1'/3
		  (Cs, [{'->',_cor0}|_cor1], _cor0)
	  %% Line 272
	  <[45|[124|Cs]],Toks,Pos> when 'true' ->
	      %% Line 273
	      apply 'scan1'/3
		  (Cs, [{'-|',_cor0}|_cor1], _cor0)
	  %% Line 274
	  <[58|[58|Cs]],Toks,Pos> when 'true' ->
	      %% Line 275
	      apply 'scan1'/3
		  (Cs, [{'::',_cor0}|_cor1], _cor0)
	  %% Line 276
	  <[C|Cs],Toks,Pos> when 'true' ->
	      let <P> =
		  %% Line 277
		  call 'erlang':'list_to_atom'
		      ([C|[]])
	      in  %% Line 278
		  apply 'scan1'/3
		      (Cs, [{P,_cor0}|_cor1], _cor0)
	  %% Line 279
	  <[],Toks0,_cor36> when 'true' ->
	      let <Toks> =
		  %% Line 280
		  call 'lists':'reverse'
		      (_cor1)
	      in  %% Line 281
		  {'ok',Toks}
	  ( <_cor35,_cor34,_cor33> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'scan1',3}}] )
	    -| ['compiler_generated'] )
	end
'scan_key_word'/4 =
    %% Line 286
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_2356> =
	    %% Line 287
	    apply 'scan_name'/2
		(_cor2, [])
	in  %% Line 287
	    case _2356 of
	      <{Wcs,Cs}> when 'true' ->
		  let <_cor6> =
		      catch
			  let <_cor5> =
			      %% Line 288
			      call 'lists':'reverse'
				  (Wcs)
			  in  %% Line 288
			      call 'erlang':'list_to_atom'
				  ([_cor3|_cor5])
		  in  %% Line 288
		      case _cor6 of
			%% Line 289
			<Name>
			    when call 'erlang':'is_atom'
				  (_cor6) ->
			    %% Line 290
			    apply 'scan1'/3
				(Cs, [{_cor6,_cor0}|_cor1], _cor0)
			%% Line 291
			<_X_Error> when 'true' ->
			    %% Line 470
			    {'error',{_cor0,'core_scan',{'illegal','atom'}}}
		      end
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_2356})
		-| ['compiler_generated'] )
	    end
'scan_variable'/4 =
    %% Line 294
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_3641> =
	    %% Line 295
	    apply 'scan_name'/2
		(_cor2, [])
	in  %% Line 295
	    case _3641 of
	      <{Wcs,Cs}> when 'true' ->
		  let <_cor6> =
		      catch
			  let <_cor5> =
			      %% Line 296
			      call 'lists':'reverse'
				  (Wcs)
			  in  %% Line 296
			      call 'erlang':'list_to_atom'
				  ([_cor3|_cor5])
		  in  %% Line 296
		      case _cor6 of
			%% Line 297
			<Name>
			    when call 'erlang':'is_atom'
				  (_cor6) ->
			    %% Line 298
			    apply 'scan1'/3
				(Cs, [{'var',_cor0,_cor6}|_cor1], _cor0)
			%% Line 299
			<_X_Error> when 'true' ->
			    %% Line 470
			    {'error',{_cor0,'core_scan',{'illegal','var'}}}
		      end
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_3641})
		-| ['compiler_generated'] )
	    end
'scan_name'/2 =
    %% Line 304
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[C|Cs],Ncs> when 'true' ->
	      let <_1189> =
		  %% Line 305
		  apply 'name_char'/1
		      (C)
	      in  %% Line 305
		  case _1189 of
		    %% Line 306
		    <'true'> when 'true' ->
			apply 'scan_name'/2
			    (Cs, [C|_cor0])
		    %% Line 307
		    <'false'> when 'true' ->
			{_cor0,[C|Cs]}
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_1189})
		      -| ['compiler_generated'] )
		  end
	  %% Line 309
	  <[],Ncs> when 'true' ->
	      %% Line 310
	      {_cor0,[]}
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'scan_name',2}}] )
	    -| ['compiler_generated'] )
	end
'name_char'/1 =
    %% Line 312
    fun (_cor0) ->
	case _cor0 of
	  <C>
	      when let <_cor1> =
		    call 'erlang':'>='
			(_cor0, 97)
		in  let <_cor2> =
			call 'erlang':'=<'
			    (_cor0, 122)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      'true'
	  %% Line 313
	  <C>
	      when try
		    let <_cor3> =
			call 'erlang':'>='
			    (_cor0, 223)
		    in  let <_cor4> =
			    call 'erlang':'=<'
				(_cor0, 255)
			in  let <_cor5> =
				call 'erlang':'/='
				    (_cor0, 247)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      'true'
	  %% Line 314
	  <C>
	      when let <_cor7> =
		    call 'erlang':'>='
			(_cor0, 65)
		in  let <_cor8> =
			call 'erlang':'=<'
			    (_cor0, 90)
		    in  call 'erlang':'and'
			    (_cor7, _cor8) ->
	      'true'
	  %% Line 315
	  <C>
	      when try
		    let <_cor9> =
			call 'erlang':'>='
			    (_cor0, 192)
		    in  let <_cor10> =
			    call 'erlang':'=<'
				(_cor0, 222)
			in  let <_cor11> =
				call 'erlang':'/='
				    (_cor0, 215)
			    in  let <_cor12> =
				    call 'erlang':'and'
					(_cor10, _cor11)
				in  call 'erlang':'and'
					(_cor9, _cor12)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      'true'
	  %% Line 316
	  <C>
	      when let <_cor13> =
		    call 'erlang':'>='
			(_cor0, 48)
		in  let <_cor14> =
			call 'erlang':'=<'
			    (_cor0, 57)
		    in  call 'erlang':'and'
			    (_cor13, _cor14) ->
	      'true'
	  %% Line 317
	  <95> when 'true' ->
	      'true'
	  %% Line 318
	  <64> when 'true' ->
	      'true'
	  %% Line 319
	  <_cor16> when 'true' ->
	      'false'
	end
'scan_string'/4 =
    %% Line 326
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Q|Cs],Scs,_cor11,Pos>
	      when call 'erlang':'=:='
		    (_cor1,
		     Q) ->
	      let <_cor4> =
		  %% Line 327
		  call 'lists':'reverse'
		      (_cor2)
	      in  %% Line 327
		  {_cor4,Cs,_cor0}
	  %% Line 328
	  <[10|Cs],Scs,Q,Pos> when 'true' ->
	      let <_cor5> =
		  %% Line 329
		  call 'erlang':'+'
		      (_cor0, 1)
	      in  %% Line 329
		  apply 'scan_string'/4
		      (Cs, [10|_cor2], _cor1, _cor5)
	  %% Line 330
	  <[92|Cs0],Scs,Q,Pos> when 'true' ->
	      let <_520> =
		  %% Line 331
		  apply 'scan_escape'/2
		      (Cs0, _cor0)
	      in  %% Line 331
		  case _520 of
		    <{C,Cs,Pos1}> when 'true' ->
			%% Line 332
			apply 'scan_string'/4
			    (Cs, [C|_cor2], _cor1, Pos1)
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_520})
		      -| ['compiler_generated'] )
		  end
	  %% Line 333
	  <[C|Cs],Scs,Q,Pos> when 'true' ->
	      %% Line 334
	      apply 'scan_string'/4
		  (Cs, [C|_cor2], _cor1, _cor0)
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'scan_string',4}}] )
	    -| ['compiler_generated'] )
	end
'scan_char'/2 =
    %% Line 340
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[92|Cs],Pos> when 'true' ->
	      %% Line 341
	      apply 'scan_escape'/2
		  (Cs, _cor0)
	  %% Line 342
	  <[10|Cs],Pos> when 'true' ->
	      let <_cor2> =
		  %% Line 343
		  call 'erlang':'+'
		      (_cor0, 1)
	      in  %% Line 343
		  {10,Cs,_cor2}
	  %% Line 344
	  <[C|Cs],Pos> when 'true' ->
	      %% Line 345
	      {C,Cs,_cor0}
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'scan_char',2}}] )
	    -| ['compiler_generated'] )
	end
'scan_escape'/2 =
    %% Line 347
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[O1|[O2|[O3|Cs]]],Pos>
	      when %% Line 348
		try
		    let <_cor2> =
			call 'erlang':'>='
			    (O1, 48)
		    in  let <_cor3> =
			    call 'erlang':'=<'
				(O1, 55)
			in  let <_cor4> =
				call 'erlang':'>='
				    (O2, 48)
			    in  let <_cor5> =
				    call 'erlang':'=<'
					(O2, 55)
				in  let <_cor6> =
					call 'erlang':'>='
					    (O3, 48)
				    in  let <_cor7> =
					    call 'erlang':'=<'
						(O3, 55)
					in  let <_cor8> =
						call 'erlang':'and'
						    (_cor6, _cor7)
					    in  let <_cor9> =
						    call 'erlang':'and'
							(_cor5, _cor8)
						in  let <_cor10> =
							call 'erlang':'and'
							    (_cor4, _cor9)
						    in  let <_cor11> =
							    call 'erlang':'and'
								(_cor3, _cor10)
							in  call 'erlang':'and'
								(_cor2, _cor11)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor13> =
		  %% Line 349
		  call 'erlang':'*'
		      (O1, 8)
	      in  let <_cor14> =
		      %% Line 349
		      call 'erlang':'+'
			  (_cor13, O2)
		  in  let <_cor15> =
			  %% Line 349
			  call 'erlang':'*'
			      (_cor14, 8)
		      in  let <_cor16> =
			      %% Line 349
			      call 'erlang':'+'
				  (_cor15, O3)
			  in  let <Val> =
				  %% Line 349
				  call 'erlang':'-'
				      (_cor16, 3504)
			      in  %% Line 350
				  {Val,Cs,_cor0}
	  %% Line 351
	  <[O1|[O2|Cs]],Pos>
	      when %% Line 352
		try
		    let <_cor18> =
			call 'erlang':'>='
			    (O1, 48)
		    in  let <_cor19> =
			    call 'erlang':'=<'
				(O1, 55)
			in  let <_cor20> =
				call 'erlang':'>='
				    (O2, 48)
			    in  let <_cor21> =
				    call 'erlang':'=<'
					(O2, 55)
				in  let <_cor22> =
					call 'erlang':'and'
					    (_cor20, _cor21)
				    in  let <_cor23> =
					    call 'erlang':'and'
						(_cor19, _cor22)
					in  call 'erlang':'and'
						(_cor18, _cor23)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor25> =
		  %% Line 353
		  call 'erlang':'*'
		      (O1, 8)
	      in  let <_cor26> =
		      %% Line 353
		      call 'erlang':'+'
			  (_cor25, O2)
		  in  let <Val> =
			  %% Line 353
			  call 'erlang':'-'
			      (_cor26, 432)
		      in  %% Line 354
			  {Val,Cs,_cor0}
	  %% Line 355
	  <[O1|Cs],Pos>
	      when let <_cor28> =
		    %% Line 356
		    call 'erlang':'>='
			(O1, 48)
		in  let <_cor29> =
			%% Line 356
			call 'erlang':'=<'
			    (O1, 55)
		    in  %% Line 356
			call 'erlang':'and'
			    (_cor28, _cor29) ->
	      let <_cor30> =
		  %% Line 357
		  call 'erlang':'-'
		      (O1, 48)
	      in  %% Line 357
		  {_cor30,Cs,_cor0}
	  %% Line 358
	  <[94|[C|Cs]],Pos> when 'true' ->
	      let <Val> =
		  %% Line 359
		  call 'erlang':'band'
		      (C, 31)
	      in  %% Line 360
		  {Val,Cs,_cor0}
	  %% Line 365
	  <[10|Cs],Pos> when 'true' ->
	      let <_cor32> =
		  %% Line 366
		  call 'erlang':'+'
		      (_cor0, 1)
	      in  %% Line 366
		  {10,Cs,_cor32}
	  %% Line 367
	  <[C0|Cs],Pos> when 'true' ->
	      let <C> =
		  %% Line 368
		  apply 'escape_char'/1
		      (C0)
	      in  %% Line 369
		  {C,Cs,_cor0}
	  ( <_cor35,_cor34> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'scan_escape',2}}] )
	    -| ['compiler_generated'] )
	end
'escape_char'/1 =
    %% Line 371
    fun (_cor0) ->
	case _cor0 of
	  <110> when 'true' ->
	      10
	  %% Line 372
	  <114> when 'true' ->
	      13
	  %% Line 373
	  <116> when 'true' ->
	      9
	  %% Line 374
	  <118> when 'true' ->
	      11
	  %% Line 375
	  <98> when 'true' ->
	      8
	  %% Line 376
	  <102> when 'true' ->
	      12
	  %% Line 377
	  <101> when 'true' ->
	      27
	  %% Line 378
	  <115> when 'true' ->
	      32
	  %% Line 379
	  <100> when 'true' ->
	      127
	  %% Line 380
	  <C> when 'true' ->
	      _cor0
	end
'scan_number'/4 =
    %% Line 396
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_2774> =
	    %% Line 397
	    apply 'scan_integer'/3
		(_cor2, [_cor3|[]], _cor0)
	in  %% Line 397
	    case _2774 of
	      <{Ncs,Cs,Pos1}> when 'true' ->
		  %% Line 398
		  apply 'scan_after_int'/5
		      (Cs, Ncs, _cor1, _cor0, Pos1)
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_2774})
		-| ['compiler_generated'] )
	    end
'scan_signed_number'/5 =
    %% Line 400
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_845> =
	    %% Line 401
	    apply 'scan_integer'/3
		(_cor2, [_cor3|[_cor4|[]]], _cor0)
	in  %% Line 401
	    case _845 of
	      <{Ncs,Cs,Pos1}> when 'true' ->
		  %% Line 402
		  apply 'scan_after_int'/5
		      (Cs, Ncs, _cor1, _cor0, Pos1)
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_845})
		-| ['compiler_generated'] )
	    end
'scan_integer'/3 =
    %% Line 404
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[C|Cs],Stack,Pos>
	      when let <_cor3> =
		    call 'erlang':'>='
			(C, 48)
		in  let <_cor4> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 405
	      apply 'scan_integer'/3
		  (Cs, [C|_cor1], _cor0)
	  %% Line 406
	  <Cs,Stack,Pos> when 'true' ->
	      %% Line 407
	      {_cor1,_cor2,_cor0}
	end
'scan_after_int'/5 =
    %% Line 409
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[46|[C|Cs0]],Ncs0,Toks,SPos,CPos>
	      when let <_cor5> =
		    call 'erlang':'>='
			(C, 48)
		in  let <_cor6> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      let <_2341> =
		  %% Line 410
		  apply 'scan_integer'/3
		      (Cs0, [C|[46|_cor3]], _cor0)
	      in  %% Line 410
		  case _2341 of
		    <{Ncs,Cs,CPos1}> when 'true' ->
			%% Line 411
			apply 'scan_after_fraction'/5
			    (Cs, Ncs, _cor2, _cor1, CPos1)
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_2341})
		      -| ['compiler_generated'] )
		  end
	  %% Line 412
	  <[35|Cs],Ncs,Toks,SPos,CPos> when 'true' ->
	      let <_cor8> =
		  %% Line 413
		  call 'lists':'reverse'
		      (_cor3)
	      in  let <_2784> =
		      %% Line 413
		      call 'erlang':'list_to_integer'
			  (_cor8)
		  in  %% Line 413
		      case _2784 of
			%% Line 414
			<Base>
			    when let <_cor9> =
				  call 'erlang':'>='
				      (_2784, 2)
			      in  let <_cor10> =
				      call 'erlang':'=<'
					  (_2784, 16)
				  in  call 'erlang':'and'
					  (_cor9, _cor10) ->
			    %% Line 415
			    apply 'scan_based_int'/6
				(Cs, 0, _2784, _cor2, _cor1, _cor0)
			%% Line 416
			<Base> when 'true' ->
			    let <_152> = {%% Line 417
				 'base',_2784}
			    in  %% Line 470
				{'error',{_cor0,'core_scan',_152}}
		      end
	  %% Line 419
	  <Cs,Ncs,Toks,SPos,CPos> when 'true' ->
	      let <_cor12> =
		  %% Line 420
		  call 'lists':'reverse'
		      (_cor3)
	      in  let <N> =
		      %% Line 420
		      call 'erlang':'list_to_integer'
			  (_cor12)
		  in  %% Line 421
		      apply 'scan1'/3
			  (_cor4, [{'integer',_cor1,N}|_cor2], _cor0)
	end
'scan_based_int'/6 =
    %% Line 423
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[C|Cs],SoFar,Base,Toks,SPos,CPos>
	      when %% Line 424
		try
		    let <_cor6> =
			call 'erlang':'>='
			    (C, 48)
		    in  let <_cor7> =
			    call 'erlang':'=<'
				(C, 57)
			in  let <_cor8> =
				call 'erlang':'+'
				    (_cor3, 48)
			    in  let <_cor9> =
				    call 'erlang':'<'
					(C, _cor8)
				in  let <_cor10> =
					call 'erlang':'and'
					    (_cor7, _cor9)
				    in  call 'erlang':'and'
					    (_cor6, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor12> =
		  %% Line 425
		  call 'erlang':'*'
		      (_cor4, _cor3)
	      in  let <_cor11> =
		      %% Line 425
		      call 'erlang':'-'
			  (C, 48)
		  in  let <Next> =
			  %% Line 425
			  call 'erlang':'+'
			      (_cor12, _cor11)
		      in  %% Line 426
			  apply 'scan_based_int'/6
			      (Cs, Next, _cor3, _cor2, _cor1, _cor0)
	  %% Line 427
	  <[C|Cs],SoFar,Base,Toks,SPos,CPos>
	      when %% Line 428
		try
		    let <_cor14> =
			call 'erlang':'>='
			    (C, 97)
		    in  let <_cor15> =
			    call 'erlang':'=<'
				(C, 102)
			in  let <_cor16> =
				call 'erlang':'+'
				    (_cor3, 97)
			    in  let <_cor17> =
				    call 'erlang':'-'
					(_cor16, 10)
				in  let <_cor18> =
					call 'erlang':'<'
					    (C, _cor17)
				    in  let <_cor19> =
					    call 'erlang':'and'
						(_cor15, _cor18)
					in  call 'erlang':'and'
						(_cor14, _cor19)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor22> =
		  %% Line 429
		  call 'erlang':'*'
		      (_cor4, _cor3)
	      in  let <_cor20> =
		      %% Line 429
		      call 'erlang':'-'
			  (C, 97)
		  in  let <_cor21> =
			  %% Line 429
			  call 'erlang':'+'
			      (_cor20, 10)
		      in  let <Next> =
			      %% Line 429
			      call 'erlang':'+'
				  (_cor22, _cor21)
			  in  %% Line 430
			      apply 'scan_based_int'/6
				  (Cs, Next, _cor3, _cor2, _cor1, _cor0)
	  %% Line 431
	  <[C|Cs],SoFar,Base,Toks,SPos,CPos>
	      when %% Line 432
		try
		    let <_cor24> =
			call 'erlang':'>='
			    (C, 65)
		    in  let <_cor25> =
			    call 'erlang':'=<'
				(C, 70)
			in  let <_cor26> =
				call 'erlang':'+'
				    (_cor3, 65)
			    in  let <_cor27> =
				    call 'erlang':'-'
					(_cor26, 10)
				in  let <_cor28> =
					call 'erlang':'<'
					    (C, _cor27)
				    in  let <_cor29> =
					    call 'erlang':'and'
						(_cor25, _cor28)
					in  call 'erlang':'and'
						(_cor24, _cor29)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor32> =
		  %% Line 433
		  call 'erlang':'*'
		      (_cor4, _cor3)
	      in  let <_cor30> =
		      %% Line 433
		      call 'erlang':'-'
			  (C, 65)
		  in  let <_cor31> =
			  %% Line 433
			  call 'erlang':'+'
			      (_cor30, 10)
		      in  let <Next> =
			      %% Line 433
			      call 'erlang':'+'
				  (_cor32, _cor31)
			  in  %% Line 434
			      apply 'scan_based_int'/6
				  (Cs, Next, _cor3, _cor2, _cor1, _cor0)
	  %% Line 435
	  <Cs,SoFar,_cor40,Toks,SPos,CPos> when 'true' ->
	      %% Line 436
	      apply 'scan1'/3
		  (_cor5, [{'integer',_cor1,_cor4}|_cor2], _cor0)
	end
'scan_after_fraction'/5 =
    %% Line 438
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[69|Cs],Ncs,Toks,SPos,CPos> when 'true' ->
	      %% Line 439
	      apply 'scan_exponent'/5
		  (Cs, [69|_cor3], _cor2, _cor1, _cor0)
	  %% Line 440
	  <[101|Cs],Ncs,Toks,SPos,CPos> when 'true' ->
	      %% Line 441
	      apply 'scan_exponent'/5
		  (Cs, [69|_cor3], _cor2, _cor1, _cor0)
	  %% Line 442
	  <Cs,Ncs,Toks,SPos,CPos> when 'true' ->
	      let <_cor6> =
		  catch
		      let <_cor5> =
			  %% Line 443
			  call 'lists':'reverse'
			      (_cor3)
		      in  %% Line 443
			  call 'erlang':'list_to_float'
			      (_cor5)
	      in  %% Line 443
		  case _cor6 of
		    %% Line 444
		    <N>
			when call 'erlang':'is_float'
			      (_cor6) ->
			%% Line 445
			apply 'scan1'/3
			    (_cor4, [{'float',_cor1,_cor6}|_cor2], _cor0)
		    %% Line 446
		    <_X_Error> when 'true' ->
			%% Line 470
			{'error',{_cor1,'core_scan',{'illegal','float'}}}
		  end
	end
'scan_exponent'/5 =
    %% Line 452
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[43|Cs],Ncs,Toks,SPos,CPos> when 'true' ->
	      %% Line 453
	      apply 'scan_exponent1'/5
		  (Cs, [43|_cor3], _cor2, _cor1, _cor0)
	  %% Line 454
	  <[45|Cs],Ncs,Toks,SPos,CPos> when 'true' ->
	      %% Line 455
	      apply 'scan_exponent1'/5
		  (Cs, [45|_cor3], _cor2, _cor1, _cor0)
	  %% Line 456
	  <Cs,Ncs,Toks,SPos,CPos> when 'true' ->
	      %% Line 457
	      apply 'scan_exponent1'/5
		  (_cor4, _cor3, _cor2, _cor1, _cor0)
	end
'scan_exponent1'/5 =
    %% Line 459
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[C|Cs0],Ncs0,Toks,SPos,CPos>
	      when let <_cor5> =
		    call 'erlang':'>='
			(C, 48)
		in  let <_cor6> =
			call 'erlang':'=<'
			    (C, 57)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      let <_4322> =
		  %% Line 460
		  apply 'scan_integer'/3
		      (Cs0, [C|_cor3], _cor0)
	      in  %% Line 460
		  case _4322 of
		    <{Ncs,Cs,CPos1}> when 'true' ->
			let <_cor9> =
			    catch
				let <_cor8> =
				    %% Line 461
				    call 'lists':'reverse'
					(Ncs)
				in  %% Line 461
				    call 'erlang':'list_to_float'
					(_cor8)
			in  %% Line 461
			    case _cor9 of
			      %% Line 462
			      <N>
				  when call 'erlang':'is_float'
					(_cor9) ->
				  %% Line 463
				  apply 'scan1'/3
				      (Cs, [{'float',_cor1,_cor9}|_cor2], CPos1)
			      %% Line 464
			      <_X_Error> when 'true' ->
				  %% Line 470
				  {'error',{_cor1,'core_scan',{'illegal','float'}}}
			    end
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4322})
		      -| ['compiler_generated'] )
		  end
	  %% Line 466
	  <_cor16,_cor17,_cor18,_cor19,CPos> when 'true' ->
	      %% Line 470
	      {'error',{_cor0,'core_scan','float'}}
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('core_scan')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('core_scan', _cor0)
end