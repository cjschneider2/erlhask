module 'beam_bsm' ['format_error'/1,
		   'module'/2,
		   'module_info'/0,
		   'module_info'/1]
    attributes [%% Line 62
		'type' =
		    %% Line 62
		    [{{'record','btb'},[{'record_field',63,{'atom',63,'f'}}|[{'record_field',64,{'atom',64,'index'}}|[{'record_field',65,{'atom',65,'ok_br'}}|[{'record_field',66,{'atom',66,'must_not_save'}}|[{'record_field',69,{'atom',69,'must_save'}}]]]]],[]}],
		%% Line 83
		'spec' =
		    %% Line 83
		    [{{'format_error',1},[{'type',83,'fun',[{'type',83,'product',[{'type',83,'union',[{'atom',83,'bin_opt'}|[{'type',83,'tuple',[{'atom',83,'no_bin_opt'}|[{'type',83,'term',[]}]]}]]}]}|[{'type',83,'nonempty_string',[]}]]}]}]]
'module'/2 =
    %% Line 72
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Mod,Exp,Attr,Fs0,Lc},Opts> when 'true' ->
	      let <_cor2> =
		  %% Line 548
		  apply 'btb_index_1'/2
		      (Fs0, [])
	      in  let <D> =
		      %% Line 73
		      {'btb',_cor2,'undefined','undefined','undefined','undefined'}
		  in  let <_cor9> =
			  %% Line 74
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor6) ->
					case _cor6 of
					  <[F|_cor5]> when 'true' ->
					      let <_cor7> =
						  apply 'function'/2
						      (F, D)
					      in  let <_cor8> =
						      apply 'lc$^0'/1
							  (_cor5)
						  in  ( [_cor7|_cor8]
							-| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_3008> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor6})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (Fs0)
			    -| ['list_comprehension'] )
		      in  let <Code> =
			      %% Line 75
			      {Mod,Exp,Attr,_cor9,Lc}
			  in  let <_2213> =
				  %% Line 76
				  call 'proplists':'get_bool'
				      ('bin_opt_info', _cor0)
			      in  %% Line 76
				  case _2213 of
				    %% Line 77
				    <'true'> when 'true' ->
					let <_cor12> =
					    %% Line 78
					    apply 'collect_warnings'/1
						(_cor9)
					in  %% Line 78
					    {'ok',Code,_cor12}
				    %% Line 79
				    <'false'> when 'true' ->
					%% Line 80
					{'ok',Code}
				    ( <_cor13> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_2213})
				      -| ['compiler_generated'] )
				  end
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'module',2}}] )
	    -| ['compiler_generated'] )
	end
'format_error'/1 =
    %% Line 85
    fun (_cor0) ->
	case _cor0 of
	  <'bin_opt'> when 'true' ->
	      %% Line 86
	      [79|[80|[84|[73|[77|[73|[90|[69|[68|[58|[32|[99|[114|[101|[97|[116|[105|[111|[110|[32|[111|[102|[32|[115|[117|[98|[32|[98|[105|[110|[97|[114|[121|[32|[100|[101|[108|[97|[121|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 87
	  <{'no_bin_opt',Reason}> when 'true' ->
	      let <_cor1> =
		  %% Line 88
		  apply 'format_error_1'/1
		      (Reason)
	      in  %% Line 88
		  call 'lists':'flatten'
		      ([[78|[79|[84|[32|[79|[80|[84|[73|[77|[73|[90|[69|[68|[58|[32]]]]]]]]]]]]]]]|_cor1])
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'format_error',1}}] )
	    -| ['compiler_generated'] )
	end
'function'/2 =
    %% Line 94
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'function',Name,Arity,Entry,Is},D0> when 'true' ->
	      %% Line 95
	      try
		  let <Index> =
		      %% Line 96
		      call 'beam_utils':'index_labels'
			  (Is)
		  in  %% Line 97
		      case _cor0 of
			<{'btb',_cor15,_cor16,_cor17,_cor18,_cor19}> when 'true' ->
			    let <_cor5> =
				call 'erlang':'setelement'
				    (3, _cor0, Index)
			    in  let <_cor7> =
				    %% Line 98
				    apply 'btb_opt_1'/3
					(Is, _cor5, [])
				in  %% Line 98
				    {'function',Name,Arity,Entry,_cor7}
			( <_cor20> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','btb'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	      of <_cor8> ->
		  _cor8
	      catch <_cor11,_cor10,_cor9> ->
		  let <Stack> =
		      %% Line 101
		      call 'erlang':'get_stacktrace'
			  ()
		  in  do  %% Line 102
			  call 'io':'fwrite'
			      ([70|[117|[110|[99|[116|[105|[111|[110|[58|[32|[126|[119|[47|[126|[119|[10]]]]]]]]]]]]]]]], [Name|[Arity|[]]])
			  %% Line 103
			  call 'erlang':'raise'
			      (_cor11, _cor10, Stack)
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'function',2}}] )
	    -| ['compiler_generated'] )
	end
'btb_opt_1'/3 =
    %% Line 106
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[I0 = {'test','bs_get_binary2',F,_cor21,[Reg|[{'atom','all'}|[U|[Fs|[]]]]],_cor22}|Is],D,Acc0>
	      when call 'erlang':'=:='
		    (_cor22,
		     Reg) ->
	      let <_2103> =
		  %% Line 107
		  apply 'btb_reaches_match'/3
		      (Is, [Reg|[]], _cor1)
	      in  %% Line 107
		  case _2103 of
		    %% Line 108
		    <{'error',Reason}> when 'true' ->
			let <Comment> =
			    %% Line 109
			    apply 'btb_comment_no_opt'/2
				(Reason, Fs)
			in  %% Line 110
			    apply 'btb_opt_1'/3
				(Is, _cor1, [Comment|[I0|_cor0]])
		    %% Line 111
		    <{'ok',MustSave}> when 'true' ->
			let <Comment> =
			    %% Line 589
			    case Fs of
			      <{'field_flags',[{'anno',A}|_2228]}> when 'true' ->
				  %% Line 590
				  {'%',{'bin_opt',A}}
			      %% Line 591
			      <_cor3> when 'true' ->
				  %% Line 592
				  {'%',{'bin_opt',[]}}
			    end
			in  let <Acc1> =
				%% Line 113
				apply 'btb_gen_save'/3
				    (MustSave, Reg, [Comment|_cor0])
			    in  let <_cor7> =
				    %% Line 114
				    case U of
				      %% Line 115
				      <1> when 'true' ->
					  Acc1
				      %% Line 116
				      <_cor23> when 'true' ->
					  [{'test','bs_test_unit',F,[Reg|[U|[]]]}|Acc1]
				    end
				in  %% Line 118
				    apply 'btb_opt_1'/3
					(Is, _cor1, _cor7)
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_2103})
		      -| ['compiler_generated'] )
		  end
	  %% Line 120
	  <[I0 = {'test','bs_get_binary2',F,_cor24,[Ctx|[{'atom','all'}|[U|[Fs|[]]]]],Dst}|Is],D,Acc0> when 'true' ->
	      let <_118> =
		  %% Line 121
		  apply 'btb_reaches_match'/3
		      (Is, [Ctx|[Dst|[]]], _cor1)
	      in  %% Line 121
		  case _118 of
		    %% Line 122
		    <{'error',Reason}> when 'true' ->
			let <Comment> =
			    %% Line 123
			    apply 'btb_comment_no_opt'/2
				(Reason, Fs)
			in  %% Line 124
			    apply 'btb_opt_1'/3
				(Is, _cor1, [Comment|[I0|_cor0]])
		    %% Line 125
		    <{'ok',MustSave}>
			when call 'erlang':'=:='
			      (U,
			       1) ->
			let <Comment> =
			    %% Line 589
			    case Fs of
			      <{'field_flags',[{'anno',A}|_735]}> when 'true' ->
				  %% Line 590
				  {'%',{'bin_opt',A}}
			      %% Line 591
			      <_cor3> when 'true' ->
				  %% Line 592
				  {'%',{'bin_opt',[]}}
			    end
			in  let <Acc1> =
				%% Line 127
				apply 'btb_gen_save'/3
				    (MustSave, Ctx, [Comment|_cor0])
			    in  let <Acc> =
				    %% Line 128
				    [{'move',Ctx,Dst}|Acc1]
				in  %% Line 129
				    apply 'btb_opt_1'/3
					(Is, _cor1, Acc)
		    %% Line 130
		    <{'ok',MustSave}> when 'true' ->
			let <Comment> =
			    %% Line 589
			    case Fs of
			      <{'field_flags',[{'anno',A}|_4322]}> when 'true' ->
				  %% Line 590
				  {'%',{'bin_opt',A}}
			      %% Line 591
			      <_cor3> when 'true' ->
				  %% Line 592
				  {'%',{'bin_opt',[]}}
			    end
			in  let <Acc1> =
				%% Line 132
				apply 'btb_gen_save'/3
				    (MustSave, Ctx, [Comment|_cor0])
			    in  let <Acc> =
				    %% Line 133
				    [{'move',Ctx,Dst}|[{'test','bs_test_unit',F,[Ctx|[U|[]]]}|Acc1]]
				in  %% Line 134
				    apply 'btb_opt_1'/3
					(Is, _cor1, Acc)
		    ( <_cor17> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_118})
		      -| ['compiler_generated'] )
		  end
	  %% Line 136
	  <[I|Is],D,Acc> when 'true' ->
	      %% Line 138
	      apply 'btb_opt_1'/3
		  (Is, _cor1, [I|_cor0])
	  %% Line 139
	  <[],_cor25,Acc> when 'true' ->
	      %% Line 140
	      call 'lists':'reverse'
		  (_cor0)
	  ( <_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'btb_opt_1',3}}] )
	    -| ['compiler_generated'] )
	end
'btb_gen_save'/3 =
    %% Line 142
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'true',Reg,Acc> when 'true' ->
	      %% Line 143
	      [{'bs_save2',_cor1,{'atom','start'}}|_cor0]
	  %% Line 144
	  <'false',_cor6,Acc> when 'true' ->
	      _cor0
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'btb_gen_save',3}}] )
	    -| ['compiler_generated'] )
	end
'btb_reaches_match'/3 =
    %% Line 181
    fun (_cor2,_cor1,_cor0) ->
	%% Line 182
	try
	    let <_cor5> =
		%% Line 465
		fun (_2350,_1309) ->
		    %% Line 466
		    apply 'btb_set_context'/2
			(_2350, _1309)
	    in  let <Regs> =
		    %% Line 465
		    call 'lists':'foldl'
			(_cor5, %% Line 467
				{0,0}, _cor1)
		in  let <_rec1> =
			%% Line 184
			call 'gb_sets':'empty'
			    ()
		    in  %% Line 184
			case _cor0 of
			  <{'btb',_rec3,_rec4,_rec5,_rec6,_rec7}> when 'true' ->
			      let <_cor7> =
				  {'btb',_rec3,_rec4,_rec1,'false','false'}
			      in  let <_373> =
				      %% Line 186
				      apply 'btb_reaches_match_1'/3
					  (_cor2, Regs, _cor7)
				  in  %% Line 185
				      case _373 of
					<{'btb',_cor19,_cor20,_cor21,MustNotSave,MustSave}> when 'true' ->
					    %% Line 187
					    case call 'erlang':'and'
						     (MustNotSave, MustSave) of
					      %% Line 188
					      <'true'> when 'true' ->
						  %% Line 578
						  call 'erlang':'throw'
						      ({'error','must_and_must_not_save'})
					      %% Line 189
					      <_cor22> when 'true' ->
						  {'ok',MustSave}
					    end
					( <_cor9> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_373})
					  -| ['compiler_generated'] )
				      end
			  ( <_cor18> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','btb'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
	of <_cor11> ->
	    _cor11
	catch <_cor14,_cor13,_cor12> ->
	    case <_cor14,_cor13,_cor12> of
	      %% Line 192
	      <'throw',Error = {'error',_cor23},_cor24> when 'true' ->
		  _cor13
	      ( <_2168,_1459,_3157> when 'true' ->
		    primop 'raise'
			(_cor12, _cor13)
		-| ['compiler_generated'] )
	    end
'btb_reaches_match_1'/3 =
    %% Line 195
    fun (_cor2,_cor1,_cor0) ->
	let <_253> =
	    %% Line 512
	    case _cor1 of
	      <{0,0}> when 'true' ->
		  'true'
	      %% Line 513
	      <{_89,_cor3}> when 'true' ->
		  'false'
	      ( <_123> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_cor1})
		-| ['compiler_generated'] )
	    end
	in  %% Line 196
	    case _253 of
	      %% Line 197
	      <'false'> when 'true' ->
		  %% Line 198
		  apply 'btb_reaches_match_2'/3
		      (_cor2, _cor1, _cor0)
	      %% Line 199
	      <'true'> when 'true' ->
		  _cor0
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_253})
		-| ['compiler_generated'] )
	    end
'btb_reaches_match_2'/3 =
    %% Line 204
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'block',Bl}|Is],Regs0,D> when 'true' ->
	      let <Regs> =
		  %% Line 205
		  apply 'btb_reaches_match_block'/2
		      (Bl, _cor1)
	      in  %% Line 206
		  apply 'btb_reaches_match_1'/3
		      (Is, Regs, _cor0)
	  %% Line 207
	  <[{'call',Arity,{'f',Lbl}}|Is],Regs,D> when 'true' ->
	      %% Line 208
	      apply 'btb_call'/5
		  (Arity, Lbl, _cor1, Is, _cor0)
	  %% Line 209
	  <[{'apply',Arity}|Is],Regs,D> when 'true' ->
	      let <_cor4> =
		  %% Line 210
		  call 'erlang':'+'
		      (Arity, 2)
	      in  %% Line 210
		  apply 'btb_call'/5
		      (_cor4, 'apply', _cor1, Is, _cor0)
	  %% Line 211
	  <[I = {'call_fun',Live}|Is],Regs,D> when 'true' ->
	      do  %% Line 212
		  apply 'btb_ensure_not_used'/3
		      ([{'x',Live}|[]], I, _cor1)
		  %% Line 213
		  apply 'btb_call'/5
		      (Live, I, _cor1, Is, _cor0)
	  %% Line 214
	  <[{'make_fun2',_cor52,_cor53,_cor54,Live}|Is],Regs,D> when 'true' ->
	      %% Line 215
	      apply 'btb_call'/5
		  (Live, 'make_fun2', _cor1, Is, _cor0)
	  %% Line 216
	  <[I = {'call_ext',Arity,Func}|Is],Regs0,D> when 'true' ->
	      let <_1091> =
		  %% Line 219
		  call 'beam_jump':'is_exit_instruction'
		      (I)
	      in  %% Line 219
		  case _1091 of
		    %% Line 220
		    <'false'> when 'true' ->
			%% Line 221
			apply 'btb_call'/5
			    (Arity, Func, _cor1, Is, _cor0)
		    %% Line 222
		    <'true'> when 'true' ->
			let <Regs> =
			    %% Line 223
			    apply 'btb_kill_not_live'/2
				(Arity, _cor1)
			in  %% Line 224
			    apply 'btb_tail_call'/3
				(Func, Regs, _cor0)
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_1091})
		      -| ['compiler_generated'] )
		  end
	  %% Line 226
	  <[{'kill',Y}|Is],Regs,D> when 'true' ->
	      let <_cor7> =
		  %% Line 227
		  apply 'btb_kill'/2
		      ([Y|[]], _cor1)
	      in  %% Line 227
		  apply 'btb_reaches_match_1'/3
		      (Is, _cor7, _cor0)
	  %% Line 228
	  <[{'deallocate',_cor55}|Is],Regs0,D> when 'true' ->
	      %% Line 507
	      case _cor1 of
		<{Xregs,_2722}> when 'true' ->
		    let <Regs> = {Xregs,0}
		    in  apply 'btb_reaches_match_1'/3
			    (Is, Regs, _cor0)
		( <_1380> when 'true' ->
		      primop 'match_fail'
			  ({'function_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 231
	  <[I = 'return'|_cor56],Regs0,D> when 'true' ->
	      do  %% Line 232
		  apply 'btb_ensure_not_used'/3
		      ([{'x',0}], I, _cor1)
		  _cor0
	  %% Line 234
	  <[I = {'gc_bif',_cor57,{'f',F},Live,Ss,Dst}|Is],Regs0,D0> when 'true' ->
	      do  %% Line 235
		  apply 'btb_ensure_not_used'/3
		      (Ss, I, _cor1)
		  let <Regs1> =
		      %% Line 236
		      apply 'btb_kill_not_live'/2
			  (Live, _cor1)
		  in  let <Regs> =
			  %% Line 237
			  apply 'btb_kill'/2
			      ([Dst|[]], Regs1)
		      in  let <D> =
			      %% Line 238
			      apply 'btb_follow_branch'/3
				  (F, Regs, _cor0)
			  in  %% Line 239
			      apply 'btb_reaches_match_1'/3
				  (Is, Regs, D)
	  %% Line 240
	  <[I = {'bif',_cor58,{'f',F},Ss,Dst}|Is],Regs0,D0> when 'true' ->
	      do  %% Line 241
		  apply 'btb_ensure_not_used'/3
		      (Ss, I, _cor1)
		  let <Regs> =
		      %% Line 242
		      apply 'btb_kill'/2
			  ([Dst|[]], _cor1)
		  in  let <D> =
			  %% Line 243
			  apply 'btb_follow_branch'/3
			      (F, Regs, _cor0)
		      in  %% Line 244
			  apply 'btb_reaches_match_1'/3
			      (Is, Regs, D)
	  %% Line 245
	  <[I = {'test','bs_start_match2',{'f',F},Live,[Ctx|[_cor59|[]]],_cor60}|Is],Regs0,D0>
	      when call 'erlang':'=:='
		    (_cor60,
		     Ctx) ->
	      let <CtxRegs> =
		  %% Line 247
		  apply 'btb_context_regs'/1
		      (_cor1)
	      in  let <_2921> =
		      %% Line 248
		      call 'lists':'member'
			  (Ctx, CtxRegs)
		  in  %% Line 248
		      case _2921 of
			%% Line 249
			<'false'> when 'true' ->
			    let <D> =
				%% Line 253
				apply 'btb_follow_branch'/3
				    (F, _cor1, _cor0)
			    in  let <Regs> =
				    %% Line 254
				    apply 'btb_kill_not_live'/2
					(Live, _cor1)
				in  %% Line 255
				    apply 'btb_reaches_match_2'/3
					(Is, Regs, D)
			%% Line 256
			<'true'> when 'true' ->
			    let <OtherCtxRegs> =
				%% Line 262
				call 'erlang':'--'
				    (CtxRegs, [Ctx|[]])
			    in  let <_3602> =
				    %% Line 263
				    apply 'btb_are_all_unused'/3
					(OtherCtxRegs, Is, _cor0)
				in  %% Line 263
				    case _3602 of
				      %% Line 264
				      <'false'> when 'true' ->
					  let <_2709> = {OtherCtxRegs,'not_all_unused_after',I}
					  in  %% Line 578
					      call 'erlang':'throw'
						  ({'error',_2709})
				      %% Line 265
				      <'true'> when 'true' ->
					  _cor0
				      ( <_cor18> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_3602})
					-| ['compiler_generated'] )
				    end
			( <_cor19> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_2921})
			  -| ['compiler_generated'] )
		      end
	  %% Line 268
	  <[{'test','bs_start_match2',{'f',F},Live,[Bin|[_cor61|[]]],Ctx}|Is],Regs0,D0> when 'true' ->
	      let <CtxRegs> =
		  %% Line 270
		  apply 'btb_context_regs'/1
		      (_cor1)
	      in  let <_275> =
		      %% Line 271
		      call 'lists':'member'
			  (Bin, CtxRegs)
		  in  let <_cor23> =
			  %% Line 271
			  ( case _275 of
			      ( <( 'true'
				   -| ['compiler_generated'] )> when 'true' ->
				    'true'
				-| ['compiler_generated'] )
			      ( <( 'false'
				   -| ['compiler_generated'] )> when 'true' ->
				    call 'lists':'member'
					(Ctx, CtxRegs)
				-| ['compiler_generated'] )
			      ( <_cor21> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {( 'badarg'
						-| ['compiler_generated'] ),_275}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      in  %% Line 271
			  case _cor23 of
			    %% Line 272
			    <'false'> when 'true' ->
				let <D> =
				    %% Line 277
				    apply 'btb_follow_branch'/3
					(F, _cor1, _cor0)
				in  let <Regs> =
					%% Line 278
					apply 'btb_kill_not_live'/2
					    (Live, _cor1)
				    in  %% Line 279
					apply 'btb_reaches_match_2'/3
					    (Is, Regs, D)
			    %% Line 280
			    <'true'> when 'true' ->
				%% Line 578
				call 'erlang':'throw'
				    ({'error','unsuitable_bs_start_match'})
			    ( <_cor26> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor23})
			      -| ['compiler_generated'] )
			  end
	  %% Line 285
	  <[I = {'test',_cor62,{'f',F},Ss}|Is],Regs,D0> when 'true' ->
	      do  %% Line 286
		  apply 'btb_ensure_not_used'/3
		      (Ss, I, _cor1)
		  let <D> =
		      %% Line 287
		      apply 'btb_follow_branch'/3
			  (F, _cor1, _cor0)
		  in  %% Line 288
		      apply 'btb_reaches_match_1'/3
			  (Is, _cor1, D)
	  %% Line 289
	  <[I = {'test',_cor63,{'f',F},_cor64,Ss,_cor65}|Is],Regs,D0> when 'true' ->
	      do  %% Line 290
		  apply 'btb_ensure_not_used'/3
		      (Ss, I, _cor1)
		  let <D> =
		      %% Line 291
		      apply 'btb_follow_branch'/3
			  (F, _cor1, _cor0)
		  in  %% Line 292
		      apply 'btb_reaches_match_1'/3
			  (Is, _cor1, D)
	  %% Line 293
	  <[I = {'select',_cor66,Src,{'f',F},Conds}|Is],Regs,D0> when 'true' ->
	      do  %% Line 294
		  apply 'btb_ensure_not_used'/3
		      ([Src|[]], I, _cor1)
		  let <D1> =
		      %% Line 295
		      apply 'btb_follow_branch'/3
			  (F, _cor1, _cor0)
		  in  let <D> =
			  %% Line 296
			  apply 'btb_follow_branches'/3
			      (Conds, _cor1, D1)
		      in  %% Line 297
			  apply 'btb_reaches_match_1'/3
			      (Is, _cor1, D)
	  %% Line 298
	  <[{'jump',{'f',Lbl}}|_cor67],Regs,D = {'btb',_cor68,Li,_cor69,_cor70,_cor71}> when 'true' ->
	      let <_4504> =
		  %% Line 581
		  call 'beam_utils':'code_at'
		      (Lbl, Li)
	      in  %% Line 581
		  case _4504 of
		    %% Line 582
		    <Is>
			when call 'erlang':'is_list'
			      (_4504) ->
			apply 'btb_reaches_match_2'/3
			    (_4504, _cor1, _cor0)
		    ( <_1388> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_4504})
		      -| ['compiler_generated'] )
		  end
	  %% Line 301
	  <[{'label',_cor72}|Is],Regs,D> when 'true' ->
	      %% Line 302
	      apply 'btb_reaches_match_2'/3
		  (Is, _cor1, _cor0)
	  %% Line 303
	  <[I = {'bs_init',{'f',0},_cor73,_cor74,Ss,Dst}|Is],Regs,D> when 'true' ->
	      do  %% Line 304
		  apply 'btb_ensure_not_used'/3
		      (Ss, I, _cor1)
		  let <_cor32> =
		      %% Line 305
		      apply 'btb_kill'/2
			  ([Dst|[]], _cor1)
		  in  %% Line 305
		      apply 'btb_reaches_match_1'/3
			  (Is, _cor32, _cor0)
	  %% Line 306
	  <[I = {'bs_put',{'f',0},_cor75,Ss}|Is],Regs,D> when 'true' ->
	      do  %% Line 307
		  apply 'btb_ensure_not_used'/3
		      (Ss, I, _cor1)
		  %% Line 308
		  apply 'btb_reaches_match_1'/3
		      (Is, _cor1, _cor0)
	  %% Line 309
	  <[I = {'bs_restore2',Src,_cor76}|Is],Regs0,D> when 'true' ->
	      let <_2166> =
		  %% Line 310
		  apply 'btb_contains_context'/2
		      (Src, _cor1)
	      in  %% Line 310
		  case _2166 of
		    %% Line 311
		    <'false'> when 'true' ->
			%% Line 312
			apply 'btb_reaches_match_1'/3
			    (Is, _cor1, _cor0)
		    %% Line 313
		    <'true'> when 'true' ->
			let <Regs> =
			    %% Line 316
			    apply 'btb_kill'/2
				([Src|[]], _cor1)
			in  %% Line 530
			    case Regs of
			      <{Xregs,Yregs}> when 'true' ->
				  let <_2233> =
				      %% Line 531
				      apply 'btb_context_regs_1'/4
					  (Yregs, 0, 'y', [])
				  in  let <CtxRegs> =
					  %% Line 531
					  apply 'btb_context_regs_1'/4
					      (Xregs, 0, 'x', _2233)
				      in  let <_1462> =
					      apply 'btb_are_all_unused'/3
						  (CtxRegs, Is, _cor0)
					  in  case _1462 of
						<'false'> when 'true' ->
						    let <_4674> = {CtxRegs,'not_all_unused_after',I}
						    in  %% Line 578
							call 'erlang':'throw'
							    ({'error',_4674})
						<'true'> when 'true' ->
						    case _cor0 of
						      <{'btb',_cor77,_cor78,_cor79,_cor80,_cor81}> when 'true' ->
							  call 'erlang':'setelement'
							      (5, _cor0, 'true')
						      ( <_cor82> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','btb'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						( <_cor37> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_1462})
						  -| ['compiler_generated'] )
					      end
			      ( <_3200> when 'true' ->
				    primop 'match_fail'
					({'function_clause',Regs})
				-| ['compiler_generated'] )
			    end
		    ( <_cor38> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_2166})
		      -| ['compiler_generated'] )
		  end
	  %% Line 323
	  <[I = {'bs_context_to_binary',Src}|Is],Regs0,D> when 'true' ->
	      let <_3002> =
		  %% Line 324
		  apply 'btb_contains_context'/2
		      (Src, _cor1)
	      in  %% Line 324
		  case _3002 of
		    %% Line 325
		    <'false'> when 'true' ->
			%% Line 326
			apply 'btb_reaches_match_1'/3
			    (Is, _cor1, _cor0)
		    %% Line 327
		    <'true'> when 'true' ->
			let <Regs> =
			    %% Line 330
			    apply 'btb_kill'/2
				([Src|[]], _cor1)
			in  %% Line 530
			    case Regs of
			      <{Xregs,Yregs}> when 'true' ->
				  let <_2507> =
				      %% Line 531
				      apply 'btb_context_regs_1'/4
					  (Yregs, 0, 'y', [])
				  in  let <CtxRegs> =
					  %% Line 531
					  apply 'btb_context_regs_1'/4
					      (Xregs, 0, 'x', _2507)
				      in  let <_4385> =
					      apply 'btb_are_all_unused'/3
						  (CtxRegs, Is, _cor0)
					  in  case _4385 of
						<'false'> when 'true' ->
						    let <_4852> = {CtxRegs,'not_all_unused_after',I}
						    in  %% Line 578
							call 'erlang':'throw'
							    ({'error',_4852})
						<'true'> when 'true' ->
						    case _cor0 of
						      <{'btb',_cor83,_cor84,_cor85,_cor86,_cor87}> when 'true' ->
							  call 'erlang':'setelement'
							      (5, _cor0, 'true')
						      ( <_cor88> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','btb'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						( <_cor43> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_4385})
						  -| ['compiler_generated'] )
					      end
			      ( <_1642> when 'true' ->
				    primop 'match_fail'
					({'function_clause',Regs})
				-| ['compiler_generated'] )
			    end
		    ( <_cor44> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_3002})
		      -| ['compiler_generated'] )
		  end
	  %% Line 337
	  <[I = {'badmatch',Src}|_cor89],Regs,D> when 'true' ->
	      do  %% Line 338
		  apply 'btb_ensure_not_used'/3
		      ([Src|[]], I, _cor1)
		  _cor0
	  %% Line 340
	  <[I = {'case_end',Src}|_cor90],Regs,D> when 'true' ->
	      do  %% Line 341
		  apply 'btb_ensure_not_used'/3
		      ([Src|[]], I, _cor1)
		  _cor0
	  %% Line 343
	  <['if_end'|_cor91],_X_Regs,D> when 'true' ->
	      _cor0
	  %% Line 345
	  <[I = {'func_info',_cor92,_cor93,Arity}|_cor94],Regs0,D> when 'true' ->
	      let <_cor45> =
		  %% Line 346
		  apply 'btb_kill_not_live'/2
		      (Arity, _cor1)
	      in  %% Line 507
		  case _cor45 of
		    <{Xregs,_2581}> when 'true' ->
			let <Regs> = {Xregs,0}
			in  case apply 'btb_context_regs'/1
				     (Regs) of
			      <[]> when 'true' ->
				  _cor0
			      <_cor95> when 'true' ->
				  {'binary_used_in',I}
			    end
		    ( <_2245> when 'true' ->
			  primop 'match_fail'
			      ({'function_clause',_cor45})
		      -| ['compiler_generated'] )
		  end
	  %% Line 351
	  <[{'line',_cor96}|Is],Regs,D> when 'true' ->
	      %% Line 352
	      apply 'btb_reaches_match_1'/3
		  (Is, _cor1, _cor0)
	  %% Line 353
	  <[I|_cor97],Regs,_cor98> when 'true' ->
	      let <_cor48> =
		  %% Line 354
		  apply 'btb_context_regs'/1
		      (_cor1)
	      in  let <_532> = {_cor48,I,%% Line 354
				'not_handled'}
		  in  %% Line 578
		      call 'erlang':'throw'
			  ({'error',_532})
	  ( <_cor51,_cor50,_cor49> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'btb_reaches_match_2',3}}] )
	    -| ['compiler_generated'] )
	end
'btb_call'/5 =
    %% Line 356
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Regs> =
	    %% Line 357
	    apply 'btb_kill_not_live'/2
		(_cor4, _cor2)
	in  let <_478> =
		%% Line 518
		case Regs of
		  <{0,_1066}> when 'true' ->
		      'true'
		  %% Line 519
		  <{_4687,_2839}> when 'true' ->
		      'false'
		  ( <_2351> when 'true' ->
			primop 'match_fail'
			    ({'function_clause',Regs})
		    -| ['compiler_generated'] )
		end
	    in  %% Line 358
		case _478 of
		  %% Line 359
		  <'false'> when 'true' ->
		      let <D> =
			  %% Line 362
			  apply 'btb_tail_call'/3
			      (_cor3, Regs, _cor0)
		      in  %% Line 530
			  case Regs of
			    <{Xregs,Yregs}> when 'true' ->
				let <_2235> =
				    %% Line 531
				    apply 'btb_context_regs_1'/4
					(Yregs, 0, 'y', [])
				in  let <RegList> =
					%% Line 531
					apply 'btb_context_regs_1'/4
					    (Xregs, 0, 'x', _2235)
				    in  let <_cor12> =
					    ( letrec
						  'lc$^0'/1 =
						      fun (_cor10) ->
							  case _cor10 of
							    <[R = {'y',_cor21}|_cor9]> when 'true' ->
								let <_cor11> =
								    apply 'lc$^0'/1
									(_cor9)
								in  ( [R|_cor11]
								      -| ['compiler_generated'] )
							    ( <[_cor8|_cor9]> when 'true' ->
								  apply 'lc$^0'/1
								      (_cor9)
							      -| ['compiler_generated'] )
							    <[]> when 'true' ->
								[]
							    ( <_4900> when 'true' ->
								  ( primop 'match_fail'
									({'function_clause',_cor10})
								    -| [{'function_name',{'lc$^0',1}}] )
							      -| ['compiler_generated'] )
							  end
					      in  apply 'lc$^0'/1
						      (RegList)
					      -| ['list_comprehension'] )
					in  let <_3521> =
						apply 'btb_are_all_unused'/3
						    (_cor12, _cor1, D)
					    in  case _3521 of
						  <'true'> when 'true' ->
						      D
						  <'false'> when 'true' ->
						      let <_2614> = {'multiple_uses',RegList}
						      in  %% Line 578
							  call 'erlang':'throw'
							      ({'error',_2614})
						  ( <_cor14> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_3521})
						    -| ['compiler_generated'] )
						end
			    ( <_2802> when 'true' ->
				  primop 'match_fail'
				      ({'function_clause',Regs})
			      -| ['compiler_generated'] )
			  end
		  %% Line 375
		  <'true'> when 'true' ->
		      %% Line 379
		      apply 'btb_reaches_match_1'/3
			  (_cor1, Regs, _cor0)
		  ( <_cor15> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_478})
		    -| ['compiler_generated'] )
		end
'btb_tail_call'/3 =
    %% Line 382
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Lbl,Regs,D = {'btb',Ftree,_cor18,_cor19,_cor20,MustSave0}> when 'true' ->
	      let <_cor8> =
		  %% Line 384
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor6) ->
				case _cor6 of
				  <[R = {'x',_cor21}|_cor4]> when 'true' ->
				      let <_cor7> =
					  apply 'lc$^0'/1
					      (_cor4)
				      in  ( [R|_cor7]
					    -| ['compiler_generated'] )
				  ( <[_cor3|_cor4]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor4)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_4564> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor6})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  %% Line 530
			case _cor1 of
			  <{Xregs,Yregs}> when 'true' ->
			      let <_3983> =
				  %% Line 531
				  apply 'btb_context_regs_1'/4
				      (Yregs, 0, 'y', [])
			      in  let <_cor5> =
				      %% Line 531
				      apply 'btb_context_regs_1'/4
					  (Xregs, 0, 'x', _3983)
				  in  apply 'lc$^0'/1
					  (_cor5)
			  ( <_3772> when 'true' ->
				primop 'match_fail'
				    ({'function_clause',_cor1})
			    -| ['compiler_generated'] )
			end
		    -| ['list_comprehension'] )
	      in  %% Line 384
		  case _cor8 of
		    %% Line 385
		    <[]> when 'true' ->
			_cor0
		    %% Line 387
		    <[Reg = {'x',_cor22}|[]]> when 'true' ->
			%% Line 388
			case call 'gb_trees':'lookup'
				 (_cor2, Ftree) of
			  %% Line 389
			  <{'value',{_cor23,MustSave}}>
			      when call 'erlang':'=:='
				    (_cor23,
				     Reg) ->
			      let <_rec10> =
				  %% Line 390
				  call 'erlang':'or'
				      (MustSave0, MustSave)
			      in  %% Line 390
				  call 'erlang':'setelement'
				      (6, _cor0, _rec10)
			  %% Line 391
			  <_cor30>
			      when call 'erlang':'is_integer'
				    (_cor2) ->
			      let <_1175> = {%% Line 392
				   {'label',_cor2},%% Line 392
						   'no_suitable_bs_start_match'}
			      in  %% Line 578
				  call 'erlang':'throw'
				      ({'error',_1175})
			  %% Line 393
			  <_cor31> when 'true' ->
			      let <_2367> = {%% Line 394
				   'binary_used_in',_cor2}
			      in  %% Line 578
				  call 'erlang':'throw'
				      ({'error',_2367})
			end
		    %% Line 396
		    <[_cor32|_cor33]>
			when let <_cor13> =
			      call 'erlang':'is_integer'
				  (_cor2)
			  in  call 'erlang':'not'
				  (_cor13) ->
			let <_5347> = {%% Line 397
			     'binary_used_in',_cor2}
			in  %% Line 578
			    call 'erlang':'throw'
				({'error',_5347})
		    %% Line 398
		    <RegList = [_cor34|_cor35]> when 'true' ->
			let <_1233> = {%% Line 399
			     'multiple_uses',_cor8}
			in  %% Line 578
			    call 'erlang':'throw'
				({'error',_1233})
		    ( <_cor14> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor8})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'btb_tail_call',3}}] )
	    -| ['compiler_generated'] )
	end
'btb_follow_branches'/3 =
    %% Line 405
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'f',Lbl}|T],Regs,D0> when 'true' ->
	      let <D> =
		  %% Line 406
		  apply 'btb_follow_branch'/3
		      (Lbl, _cor1, _cor0)
	      in  %% Line 407
		  apply 'btb_follow_branches'/3
		      (T, _cor1, D)
	  %% Line 408
	  <[_cor7|T],Regs,D> when 'true' ->
	      %% Line 409
	      apply 'btb_follow_branches'/3
		  (T, _cor1, _cor0)
	  %% Line 410
	  <[],_cor8,D> when 'true' ->
	      _cor0
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'btb_follow_branches',3}}] )
	    -| ['compiler_generated'] )
	end
'btb_follow_branch'/3 =
    %% Line 415
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <0,_X_Regs,D> when 'true' ->
	      _cor0
	  %% Line 416
	  <Lbl,Regs,D = {'btb',_cor12,Li,Br0,_cor13,_cor14}> when 'true' ->
	      let <_1335> =
		  %% Line 417
		  call 'gb_sets':'is_member'
		      (_cor2, Br0)
	      in  %% Line 417
		  case _1335 of
		    %% Line 418
		    <'true'> when 'true' ->
			_cor0
		    %% Line 421
		    <'false'> when 'true' ->
			let <_4504> =
			    %% Line 581
			    call 'beam_utils':'code_at'
				(_cor2, Li)
			in  %% Line 581
			    case _4504 of
			      %% Line 582
			      <Is>
				  when call 'erlang':'is_list'
					(_4504) ->
				  let <_587> =
				      apply 'btb_reaches_match_1'/3
					  (_4504, _cor1, _cor0)
				  in  case _587 of
					<{'btb',_cor15,_cor16,Br,MustNotSave,MustSave}> when 'true' ->
					    let <_rec12> =
						call 'gb_sets':'insert'
						    (_cor2, Br)
					    in  {'btb',_cor12,Li,_rec12,MustNotSave,MustSave}
					( <_cor4> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_587})
					  -| ['compiler_generated'] )
				      end
			      ( <_2111> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_4504})
				-| ['compiler_generated'] )
			    end
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_1335})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'btb_follow_branch',3}}] )
	    -| ['compiler_generated'] )
	end
'btb_reaches_match_block'/2 =
    %% Line 432
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[I = {'set',Ds,Ss,{'alloc',Live,_cor11}}|Is],Regs0> when 'true' ->
	      do  %% Line 435
		  apply 'btb_ensure_not_used'/3
		      (Ss, I, _cor0)
		  let <Regs1> =
		      %% Line 436
		      apply 'btb_kill_not_live'/2
			  (Live, _cor0)
		  in  let <Regs> =
			  %% Line 437
			  apply 'btb_kill'/2
			      (Ds, Regs1)
		      in  %% Line 438
			  apply 'btb_reaches_match_block'/2
			      (Is, Regs)
	  %% Line 439
	  <[{'set',Ds = [Dst|[]],[Src|[]],'move'}|Is],Regs0> when 'true' ->
	      let <Regs1> =
		  %% Line 440
		  apply 'btb_kill'/2
		      (Ds, _cor0)
	      in  let <_3333> =
		      %% Line 441
		      apply 'btb_contains_context'/2
			  (Src, Regs1)
		  in  let <_cor6> =
			  %% Line 441
			  case _3333 of
			    %% Line 442
			    <'false'> when 'true' ->
				Regs1
			    %% Line 443
			    <'true'> when 'true' ->
				apply 'btb_set_context'/2
				    (Dst, Regs1)
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_3333})
			      -| ['compiler_generated'] )
			  end
		      in  %% Line 445
			  apply 'btb_reaches_match_block'/2
			      (Is, _cor6)
	  %% Line 446
	  <[I = {'set',Ds,Ss,_cor12}|Is],Regs0> when 'true' ->
	      do  %% Line 447
		  apply 'btb_ensure_not_used'/3
		      (Ss, I, _cor0)
		  let <Regs> =
		      %% Line 448
		      apply 'btb_kill'/2
			  (Ds, _cor0)
		  in  %% Line 449
		      apply 'btb_reaches_match_block'/2
			  (Is, Regs)
	  %% Line 450
	  <[],Regs> when 'true' ->
	      _cor0
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'btb_reaches_match_block',2}}] )
	    -| ['compiler_generated'] )
	end
'btb_are_all_unused'/3 =
    %% Line 456
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <RegList,Is,{'btb',_cor9,Li,_cor10,_cor11,_cor12}> when 'true' ->
	      let <_cor5> =
		  %% Line 457
		  fun (_cor3) ->
		      %% Line 458
		      call 'beam_utils':'is_not_used'
			  (_cor3, _cor1, Li)
	      in  %% Line 457
		  call 'lists':'all'
		      (_cor5, _cor2)
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'btb_are_all_unused',3}}] )
	    -| ['compiler_generated'] )
	end
'btb_set_context'/2 =
    %% Line 472
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'x',N},{Xregs,Yregs}> when 'true' ->
	      let <_cor2> =
		  %% Line 473
		  call 'erlang':'bsl'
		      (1, N)
	      in  let <_cor3> =
		      %% Line 473
		      call 'erlang':'bor'
			  (Xregs, _cor2)
		  in  %% Line 473
		      {_cor3,Yregs}
	  %% Line 474
	  <{'y',N},{Xregs,Yregs}> when 'true' ->
	      let <_cor4> =
		  %% Line 475
		  call 'erlang':'bsl'
		      (1, N)
	      in  let <_cor5> =
		      %% Line 475
		      call 'erlang':'bor'
			  (Yregs, _cor4)
		  in  %% Line 475
		      {Xregs,_cor5}
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'btb_set_context',2}}] )
	    -| ['compiler_generated'] )
	end
'btb_ensure_not_used'/3 =
    %% Line 481
    fun (_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 482
	    fun (_cor3) ->
		apply 'btb_contains_context'/2
		    (_cor3, _cor0)
	in  let <_350> =
		%% Line 482
		call 'lists':'any'
		    (_cor5, _cor2)
	    in  %% Line 482
		case _350 of
		  %% Line 483
		  <'true'> when 'true' ->
		      let <_1280> = {'binary_used_in',_cor1}
		      in  %% Line 578
			  call 'erlang':'throw'
			      ({'error',_1280})
		  %% Line 484
		  <'false'> when 'true' ->
		      'ok'
		  ( <_cor6> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_350})
		    -| ['compiler_generated'] )
		end
'btb_kill'/2 =
    %% Line 490
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'x',N}|Rs],{Xregs,Yregs}> when 'true' ->
	      let <_cor2> =
		  %% Line 491
		  call 'erlang':'bsl'
		      (1, N)
	      in  let <_cor3> =
		      %% Line 491
		      call 'erlang':'bnot'
			  (_cor2)
		  in  let <_cor4> =
			  %% Line 491
			  call 'erlang':'band'
			      (Xregs, _cor3)
		      in  %% Line 491
			  apply 'btb_kill'/2
			      (Rs, {_cor4,Yregs})
	  %% Line 492
	  <[{'y',N}|Rs],{Xregs,Yregs}> when 'true' ->
	      let <_cor5> =
		  %% Line 493
		  call 'erlang':'bsl'
		      (1, N)
	      in  let <_cor6> =
		      %% Line 493
		      call 'erlang':'bnot'
			  (_cor5)
		  in  let <_cor7> =
			  %% Line 493
			  call 'erlang':'band'
			      (Yregs, _cor6)
		      in  %% Line 493
			  apply 'btb_kill'/2
			      (Rs, {Xregs,_cor7})
	  %% Line 494
	  <[{'fr',_cor10}|Rs],Regs> when 'true' ->
	      %% Line 495
	      apply 'btb_kill'/2
		  (Rs, _cor0)
	  %% Line 496
	  <[],Regs> when 'true' ->
	      _cor0
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'btb_kill',2}}] )
	    -| ['compiler_generated'] )
	end
'btb_kill_not_live'/2 =
    %% Line 501
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Live,{Xregs,Yregs}> when 'true' ->
	      let <_cor2> =
		  %% Line 502
		  call 'erlang':'bsl'
		      (1, _cor1)
	      in  let <_cor3> =
		      %% Line 502
		      call 'erlang':'-'
			  (_cor2, 1)
		  in  let <_cor4> =
			  %% Line 502
			  call 'erlang':'band'
			      (Xregs, _cor3)
		      in  %% Line 502
			  {_cor4,Yregs}
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'btb_kill_not_live',2}}] )
	    -| ['compiler_generated'] )
	end
'btb_contains_context'/2 =
    %% Line 524
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'x',N},{Regs,_cor8}> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'bsl'
		      (1, N)
	      in  let <_cor3> =
		      call 'erlang':'band'
			  (Regs, _cor2)
		  in  call 'erlang':'=/='
			  (_cor3, 0)
	  %% Line 525
	  <{'y',N},{_cor9,Regs}> when 'true' ->
	      let <_cor4> =
		  call 'erlang':'bsl'
		      (1, N)
	      in  let <_cor5> =
		      call 'erlang':'band'
			  (Regs, _cor4)
		  in  call 'erlang':'=/='
			  (_cor5, 0)
	  %% Line 526
	  <_cor10,_cor11> when 'true' ->
	      'false'
	end
'btb_context_regs'/1 =
    %% Line 530
    fun (_cor0) ->
	case _cor0 of
	  <{Xregs,Yregs}> when 'true' ->
	      let <_cor1> =
		  %% Line 531
		  apply 'btb_context_regs_1'/4
		      (Yregs, 0, 'y', [])
	      in  %% Line 531
		  apply 'btb_context_regs_1'/4
		      (Xregs, 0, 'x', _cor1)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'btb_context_regs',1}}] )
	    -| ['compiler_generated'] )
	end
'btb_context_regs_1'/4 =
    %% Line 533
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <0,_cor13,_cor14,Acc> when 'true' ->
	      _cor0
	  %% Line 535
	  <Regs,N,Tag,Acc>
	      when try
		    let <_cor4> =
			call 'erlang':'band'
			    (_cor3, 1)
		    in  call 'erlang':'=:='
			    (_cor4, 1)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor6> =
		  %% Line 536
		  call 'erlang':'bsr'
		      (_cor3, 1)
	      in  let <_cor5> =
		      %% Line 536
		      call 'erlang':'+'
			  (_cor2, 1)
		  in  %% Line 536
		      apply 'btb_context_regs_1'/4
			  (_cor6, _cor5, _cor1, [{_cor1,_cor2}|_cor0])
	  %% Line 537
	  <Regs,N,Tag,Acc> when 'true' ->
	      let <_cor8> =
		  %% Line 538
		  call 'erlang':'bsr'
		      (_cor3, 1)
	      in  let <_cor7> =
		      %% Line 538
		      call 'erlang':'+'
			  (_cor2, 1)
		  in  %% Line 538
		      apply 'btb_context_regs_1'/4
			  (_cor8, _cor7, _cor1, _cor0)
	end
'btb_index_1'/2 =
    %% Line 550
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'function',_cor10,_cor11,Entry,Is0}|Fs],Acc0> when 'true' ->
	      let <_cor4> =
		  %% Line 552
		  fun (_cor2) ->
		      case _cor2 of
			<{'label',L}>
			    when call 'erlang':'=:='
				  (L,
				   Entry) ->
			    'false'
			%% Line 553
			<_cor12> when 'true' ->
			    'true'
		      end
	      in  let <_1778> =
		      %% Line 552
		      call 'lists':'dropwhile'
			  (_cor4, Is0)
		  in  %% Line 551
		      case _1778 of
			<[{'label',_cor13}|Is]>
			    when call 'erlang':'=:='
				  (_cor13,
				   Entry) ->
			    let <Acc> =
				%% Line 555
				apply 'btb_index_2'/4
				    (Is, Entry, 'false', _cor0)
			    in  %% Line 556
				apply 'btb_index_1'/2
				    (Fs, Acc)
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_1778})
			  -| ['compiler_generated'] )
		      end
	  %% Line 557
	  <[],Acc> when 'true' ->
	      let <_cor7> =
		  call 'lists':'sort'
		      (_cor0)
	      in  call 'gb_trees':'from_orddict'
		      (_cor7)
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'btb_index_1',2}}] )
	    -| ['compiler_generated'] )
	end
'btb_index_2'/4 =
    %% Line 559
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'test','bs_start_match2',{'f',_cor13},_cor14,[Reg|[_cor15|[]]],_cor16}|_cor17],Entry,MustSave,Acc>
	      when call 'erlang':'=:='
		    (_cor16,
		     Reg) ->
	      %% Line 561
	      [{_cor2,{Reg,_cor1}}|_cor0]
	  %% Line 562
	  <Is0,Entry,_cor18,Acc> when 'true' ->
	      %% Line 563
	      try
		  apply 'btb_index_find_start_match'/1
		      (_cor3)
	      of <_cor4> ->
		  %% Line 564
		  apply 'btb_index_2'/4
		      (_cor4, _cor2, 'true', _cor0)
	      catch <_cor8,_cor7,_cor6> ->
		  case <_cor8,_cor7,_cor6> of
		    %% Line 566
		    <'throw','none',_cor19> when 'true' ->
			_cor0
		    ( <_2407,_5067,_3508> when 'true' ->
			  primop 'raise'
			      (_cor6, _cor7)
		      -| ['compiler_generated'] )
		  end
	end
'btb_index_find_start_match'/1 =
    %% Line 569
    fun (_cor0) ->
	case _cor0 of
	  <[{'test',_cor2,{'f',F},_cor3}|[{'bs_context_to_binary',_cor4}|Is]]> when 'true' ->
	      %% Line 570
	      apply 'btb_index_find_label'/2
		  (Is, F)
	  %% Line 571
	  <_cor5> when 'true' ->
	      %% Line 572
	      call 'erlang':'throw'
		  ('none')
	end
'btb_index_find_label'/2 =
    %% Line 574
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'label',L}|Is],_cor4>
	      when call 'erlang':'=:='
		    (_cor0,
		     L) ->
	      Is
	  %% Line 575
	  <[_cor5|Is],L> when 'true' ->
	      apply 'btb_index_find_label'/2
		  (Is, _cor0)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'btb_index_find_label',2}}] )
	    -| ['compiler_generated'] )
	end
'btb_comment_no_opt'/2 =
    %% Line 594
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Reason,{'field_flags',[{'anno',A}|_cor4]}> when 'true' ->
	      %% Line 595
	      {'%',{'no_bin_opt',_cor1,A}}
	  %% Line 596
	  <Reason,_cor5> when 'true' ->
	      %% Line 597
	      {'%',{'no_bin_opt',_cor1,[]}}
	end
'collect_warnings'/1 =
    %% Line 599
    fun (_cor0) ->
	let <_cor5> =
	    %% Line 640
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[{'function',F,A,Entry,_cor9}|_cor2]> when 'true' ->
				let <_cor4> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [{Entry,{F,A}}|_cor4]
				      -| ['compiler_generated'] )
			    ( <[_cor1|_cor2]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor2)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_4085> when 'true' ->
				  primop 'match_fail'
				      ({'function_clause',_cor3})
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  let <_cor7> =
		%% Line 641
		call 'lists':'sort'
		    (_cor5)
	    in  let <D> =
		    %% Line 641
		    call 'gb_trees':'from_orddict'
			(_cor7)
		in  let <_cor6> =
			%% Line 601
			fun (_cor3,_cor2) ->
			    apply 'collect_warnings_fun'/3
				(_cor3, D, _cor2)
		    in  %% Line 601
			call 'lists':'foldl'
			    (_cor6, [], _cor0)
'collect_warnings_fun'/3 =
    %% Line 603
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'function',_cor6,_cor7,_cor8,Is},D,A> when 'true' ->
	      %% Line 604
	      apply 'collect_warnings_instr'/3
		  (Is, _cor1, _cor0)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'collect_warnings_fun',3}}] )
	    -| ['compiler_generated'] )
	end
'collect_warnings_instr'/3 =
    %% Line 606
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'%',{'bin_opt',Where}}|Is],D,Acc0> when 'true' ->
	      let <_cor3> =
		  %% Line 631
		  case Where of
		    <[Line|_2786]>
			when call 'erlang':'is_integer'
			      (Line) ->
			Line
		    %% Line 632
		    <[_cor3|T]> when 'true' ->
			apply 'get_line'/1
			    (T)
		    %% Line 633
		    <[]> when 'true' ->
			'none'
		    ( <_1712> when 'true' ->
			  primop 'match_fail'
			      ({'function_clause',Where})
		      -| ['compiler_generated'] )
		  end
	      in  let <Line> =
		      %% Line 618
		      call 'erlang':'abs'
			  (_cor3)
		  in  let <File> =
			  %% Line 635
			  case Where of
			    <[{'file',File}|_81]> when 'true' ->
				File
			    %% Line 636
			    <[_3131|T]> when 'true' ->
				apply 'get_file'/1
				    (T)
			    %% Line 637
			    <[]> when 'true' ->
				[110|[111|[95|[102|[105|[108|[101]]]]]]]
			    ( <_3053> when 'true' ->
				  primop 'match_fail'
				      ({'function_clause',Where})
			      -| ['compiler_generated'] )
			  end
		      in  let <Acc> =
			      %% Line 620
			      [{File,[{Line,'beam_bsm','bin_opt'}|[]]}|_cor0]
			  in  %% Line 608
			      apply 'collect_warnings_instr'/3
				  (Is, _cor1, Acc)
	  %% Line 609
	  <[{'%',{'no_bin_opt',Reason0,Where}}|Is],D,Acc0> when 'true' ->
	      let <Reason> =
		  %% Line 610
		  apply 'warning_translate_label'/2
		      (Reason0, _cor1)
	      in  let <_4099> = {%% Line 611
		       'no_bin_opt',Reason}
		  in  let <_cor3> =
			  %% Line 631
			  case Where of
			    <[Line|_2402]>
				when call 'erlang':'is_integer'
				      (Line) ->
				Line
			    %% Line 632
			    <[_cor3|T]> when 'true' ->
				apply 'get_line'/1
				    (T)
			    %% Line 633
			    <[]> when 'true' ->
				'none'
			    ( <_2622> when 'true' ->
				  primop 'match_fail'
				      ({'function_clause',Where})
			      -| ['compiler_generated'] )
			  end
		      in  let <Line> =
			      %% Line 618
			      call 'erlang':'abs'
				  (_cor3)
			  in  let <File> =
				  %% Line 635
				  case Where of
				    <[{'file',File}|_5574]> when 'true' ->
					File
				    %% Line 636
				    <[_3989|T]> when 'true' ->
					apply 'get_file'/1
					    (T)
				    %% Line 637
				    <[]> when 'true' ->
					[110|[111|[95|[102|[105|[108|[101]]]]]]]
				    ( <_117> when 'true' ->
					  primop 'match_fail'
					      ({'function_clause',Where})
				      -| ['compiler_generated'] )
				  end
			      in  let <Acc> =
				      %% Line 620
				      [{File,[{Line,'beam_bsm',_4099}|[]]}|_cor0]
				  in  %% Line 612
				      apply 'collect_warnings_instr'/3
					  (Is, _cor1, Acc)
	  %% Line 613
	  <[_cor9|Is],D,Acc> when 'true' ->
	      %% Line 614
	      apply 'collect_warnings_instr'/3
		  (Is, _cor1, _cor0)
	  %% Line 615
	  <[],_cor10,Acc> when 'true' ->
	      _cor0
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'collect_warnings_instr',3}}] )
	    -| ['compiler_generated'] )
	end
'warning_translate_label'/2 =
    %% Line 622
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Term,D>
	      when call 'erlang':'is_tuple'
		    (_cor1) ->
	      %% Line 623
	      case call 'erlang':'element'
		       (1, _cor1) of
		%% Line 624
		<{'label',F}> when 'true' ->
		    let <FA> =
			%% Line 625
			call 'gb_trees':'get'
			    (F, _cor0)
		    in  %% Line 626
			call 'erlang':'setelement'
			    (1, _cor1, FA)
		%% Line 627
		<_cor6> when 'true' ->
		    _cor1
	      end
	  %% Line 629
	  <Term,_cor7> when 'true' ->
	      _cor1
	end
'get_line'/1 =
    %% Line 631
    fun (_cor0) ->
	case _cor0 of
	  <[Line|_cor2]>
	      when call 'erlang':'is_integer'
		    (Line) ->
	      Line
	  %% Line 632
	  <[_cor3|T]> when 'true' ->
	      apply 'get_line'/1
		  (T)
	  %% Line 633
	  <[]> when 'true' ->
	      'none'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'get_line',1}}] )
	    -| ['compiler_generated'] )
	end
'get_file'/1 =
    %% Line 635
    fun (_cor0) ->
	case _cor0 of
	  <[{'file',File}|_cor2]> when 'true' ->
	      File
	  %% Line 636
	  <[_cor3|T]> when 'true' ->
	      apply 'get_file'/1
		  (T)
	  %% Line 637
	  <[]> when 'true' ->
	      [110|[111|[95|[102|[105|[108|[101]]]]]]]
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'get_file',1}}] )
	    -| ['compiler_generated'] )
	end
'format_error_1'/1 =
    %% Line 643
    fun (_cor0) ->
	case _cor0 of
	  <{'binary_used_in',{'extfunc',M,F,A}}> when 'true' ->
	      let <_cor1> =
		  %% Line 644
		  call 'io_lib':'format'
		      ([115|[117|[98|[32|[98|[105|[110|[97|[114|[121|[32|[117|[115|[101|[100|[32|[98|[121|[32|[126|[112|[58|[126|[112|[47|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]], [M|[F|[A|[]]]])
	      in  let <_cor3> =
		      %% Line 645
		      case <M,F,A> of
			%% Line 646
			<'erlang','split_binary',2> when 'true' ->
			    %% Line 647
			    [59|[32|[83|[85|[71|[71|[69|[83|[84|[32|[117|[115|[105|[110|[103|[32|[98|[105|[110|[97|[114|[121|[32|[109|[97|[116|[99|[104|[105|[110|[103|[32|[105|[110|[115|[116|[101|[97|[100|[32|[111|[102|[32|[115|[112|[108|[105|[116|[95|[98|[105|[110|[97|[114|[121|[47|[50]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
			%% Line 648
			<_fol68,_fol69,_fol70> when 'true' ->
			    %% Line 649
			    []
		      end
		  in  %% Line 644
		      [_cor1|_cor3]
	  %% Line 651
	  <{'binary_used_in',_cor7}> when 'true' ->
	      %% Line 652
	      [115|[117|[98|[32|[98|[105|[110|[97|[114|[121|[32|[105|[115|[32|[117|[115|[101|[100|[32|[111|[114|[32|[114|[101|[116|[117|[114|[110|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 653
	  <{'multiple_uses',_cor8}> when 'true' ->
	      %% Line 654
	      [115|[117|[98|[32|[98|[105|[110|[97|[114|[121|[32|[105|[115|[32|[109|[97|[116|[99|[104|[101|[100|[32|[111|[114|[32|[117|[115|[101|[100|[32|[105|[110|[32|[109|[111|[114|[101|[32|[116|[104|[97|[110|[32|[111|[110|[101|[32|[112|[108|[97|[99|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 655
	  <'unsuitable_bs_start_match'> when 'true' ->
	      %% Line 656
	      [116|[104|[101|[32|[98|[105|[110|[97|[114|[121|[32|[109|[97|[116|[99|[104|[105|[110|[103|[32|[105|[110|[115|[116|[114|[117|[99|[116|[105|[111|[110|[32|[116|[104|[97|[116|[32|[102|[111|[108|[108|[111|[119|[115|[32|[105|[110|[32|[116|[104|[101|[32|[115|[97|[109|[101|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[104|[97|[118|[101|[32|[112|[114|[111|[98|[108|[101|[109|[115|[32|[116|[104|[97|[116|[32|[112|[114|[101|[118|[101|[110|[116|[32|[100|[101|[108|[97|[121|[101|[100|[32|[115|[117|[98|[32|[98|[105|[110|[97|[114|[121|[32|[111|[112|[116|[105|[109|[105|[122|[97|[116|[105|[111|[110|[32|[40|[112|[114|[111|[98|[97|[98|[108|[121|[32|[105|[110|[100|[105|[99|[97|[116|[101|[100|[32|[98|[121|[32|[73|[78|[70|[79|[32|[119|[97|[114|[110|[105|[110|[103|[115|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 659
	  <{{F,A},'no_suitable_bs_start_match'}> when 'true' ->
	      %% Line 660
	      call 'io_lib':'format'
		  ([99|[97|[108|[108|[101|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[112|[47|[126|[112|[32|[100|[111|[101|[115|[32|[110|[111|[116|[32|[98|[101|[103|[105|[110|[32|[119|[105|[116|[104|[32|[97|[32|[115|[117|[105|[116|[97|[98|[108|[101|[32|[98|[105|[110|[97|[114|[121|[32|[109|[97|[116|[99|[104|[105|[110|[103|[32|[105|[110|[115|[116|[114|[117|[99|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 661
																																																											    [F|[A|[]]])
	  %% Line 662
	  <'must_and_must_not_save'> when 'true' ->
	      %% Line 663
	      [100|[105|[102|[102|[101|[114|[101|[110|[116|[32|[99|[111|[110|[116|[114|[111|[108|[32|[112|[97|[116|[104|[115|[32|[117|[115|[101|[32|[100|[105|[102|[102|[101|[114|[101|[110|[116|[32|[112|[111|[115|[105|[116|[105|[111|[110|[115|[32|[105|[110|[32|[116|[104|[101|[32|[98|[105|[110|[97|[114|[121]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 664
	  <{_cor9,I,'not_handled'}> when 'true' ->
	      %% Line 665
	      case I of
		%% Line 666
		<{'catch',_cor10,_cor11}> when 'true' ->
		    %% Line 667
		    [116|[104|[101|[32|[99|[111|[109|[112|[105|[108|[101|[114|[32|[99|[117|[114|[114|[101|[110|[116|[108|[121|[32|[100|[111|[101|[115|[32|[110|[111|[116|[32|[97|[116|[116|[101|[109|[112|[116|[32|[116|[104|[101|[32|[100|[101|[108|[97|[121|[101|[100|[32|[115|[117|[98|[32|[98|[105|[110|[97|[114|[121|[32|[111|[112|[116|[105|[109|[105|[122|[97|[116|[105|[111|[110|[32|[119|[104|[101|[110|[32|[99|[97|[116|[99|[104|[32|[105|[115|[32|[117|[115|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
		%% Line 669
		<{'try',_cor12,_cor13}> when 'true' ->
		    %% Line 670
		    [116|[104|[101|[32|[99|[111|[109|[112|[105|[108|[101|[114|[32|[99|[117|[114|[114|[101|[110|[116|[108|[121|[32|[100|[111|[101|[115|[32|[110|[111|[116|[32|[97|[116|[116|[101|[109|[112|[116|[32|[116|[104|[101|[32|[100|[101|[108|[97|[121|[101|[100|[32|[115|[117|[98|[32|[98|[105|[110|[97|[114|[121|[32|[111|[112|[116|[105|[109|[105|[122|[97|[116|[105|[111|[110|[32|[119|[104|[101|[110|[32|[116|[114|[121|[47|[99|[97|[116|[99|[104|[32|[105|[115|[32|[117|[115|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
		%% Line 672
		<_cor14> when 'true' ->
		    %% Line 673
		    call 'io_lib':'format'
			([99|[111|[109|[112|[105|[108|[101|[114|[32|[108|[105|[109|[105|[116|[97|[116|[105|[111|[110|[58|[32|[105|[110|[115|[116|[114|[117|[99|[116|[105|[111|[110|[32|[126|[112|[32|[112|[114|[101|[118|[101|[110|[116|[115|[32|[100|[101|[108|[97|[121|[101|[100|[32|[115|[117|[98|[32|[98|[105|[110|[97|[114|[121|[32|[111|[112|[116|[105|[109|[105|[122|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 674
																																																										 [I|[]])
	      end
	  %% Line 676
	  <Term> when 'true' ->
	      %% Line 677
	      call 'io_lib':'format'
		  ([126|[119]], [_cor0|[]])
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('beam_bsm')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('beam_bsm', _cor0)
end