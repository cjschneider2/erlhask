module 'beam_z' ['module'/2,
		 'module_info'/0,
		 'module_info'/1]
    attributes []
'module'/2 =
    %% Line 26
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Mod,Exp,Attr,Fs0,Lc},_X_Opt> when 'true' ->
	      let <_cor7> =
		  %% Line 27
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[F|_cor3]> when 'true' ->
				      let <_cor5> =
					  apply 'function'/1
					      (F)
				      in  let <_cor6> =
					      apply 'lc$^0'/1
						  (_cor3)
					  in  ( [_cor5|_cor6]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_452> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Fs0)
		    -| ['list_comprehension'] )
	      in  %% Line 28
		  {'ok',{Mod,Exp,Attr,_cor7,Lc}}
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'module',2}}] )
	    -| ['compiler_generated'] )
	end
'function'/1 =
    %% Line 30
    fun (_cor0) ->
	case _cor0 of
	  <{'function',Name,Arity,CLabel,Is0}> when 'true' ->
	      %% Line 31
	      try
		  let <Is> =
		      %% Line 32
		      apply 'undo_renames'/1
			  (Is0)
		  in  %% Line 33
		      {'function',Name,Arity,CLabel,Is}
	      of <_cor2> ->
		  _cor2
	      catch <_cor5,_cor4,_cor3> ->
		  let <Stack> =
		      %% Line 36
		      call 'erlang':'get_stacktrace'
			  ()
		  in  do  %% Line 37
			  call 'io':'fwrite'
			      ([70|[117|[110|[99|[116|[105|[111|[110|[58|[32|[126|[119|[47|[126|[119|[10]]]]]]]]]]]]]]]], [Name|[Arity|[]]])
			  %% Line 38
			  call 'erlang':'raise'
			      (_cor5, _cor4, Stack)
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'function',1}}] )
	    -| ['compiler_generated'] )
	end
'undo_renames'/1 =
    %% Line 41
    fun (_cor0) ->
	case _cor0 of
	  <[{'call_ext',2,'send'}|Is]> when 'true' ->
	      let <_cor1> =
		  %% Line 42
		  apply 'undo_renames'/1
		      (Is)
	      in  %% Line 42
		  ['send'|_cor1]
	  %% Line 43
	  <[{'apply',A}|[{'deallocate',N}|['return'|Is]]]> when 'true' ->
	      let <_cor2> =
		  %% Line 44
		  apply 'undo_renames'/1
		      (Is)
	      in  %% Line 44
		  [{'apply_last',A,N}|_cor2]
	  %% Line 45
	  <[{'call',A,F}|[{'deallocate',N}|['return'|Is]]]> when 'true' ->
	      let <_cor3> =
		  %% Line 46
		  apply 'undo_renames'/1
		      (Is)
	      in  %% Line 46
		  [{'call_last',A,F,N}|_cor3]
	  %% Line 47
	  <[{'call_ext',A,F}|[{'deallocate',N}|['return'|Is]]]> when 'true' ->
	      let <_cor4> =
		  %% Line 48
		  apply 'undo_renames'/1
		      (Is)
	      in  %% Line 48
		  [{'call_ext_last',A,F,N}|_cor4]
	  %% Line 49
	  <[{'call',A,F}|['return'|Is]]> when 'true' ->
	      let <_cor5> =
		  %% Line 50
		  apply 'undo_renames'/1
		      (Is)
	      in  %% Line 50
		  [{'call_only',A,F}|_cor5]
	  %% Line 51
	  <[{'call_ext',A,F}|['return'|Is]]> when 'true' ->
	      let <_cor6> =
		  %% Line 52
		  apply 'undo_renames'/1
		      (Is)
	      in  %% Line 52
		  [{'call_ext_only',A,F}|_cor6]
	  %% Line 53
	  <[I|Is]> when 'true' ->
	      let <_cor7> =
		  %% Line 54
		  apply 'undo_rename'/1
		      (I)
	      in  let <_cor8> =
		      %% Line 54
		      apply 'undo_renames'/1
			  (Is)
		  in  %% Line 54
		      [_cor7|_cor8]
	  %% Line 55
	  <[]> when 'true' ->
	      []
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'undo_renames',1}}] )
	    -| ['compiler_generated'] )
	end
'undo_rename'/1 =
    %% Line 57
    fun (_cor0) ->
	case _cor0 of
	  <{'bs_put',F,{I,U,Fl},[Sz|[Src|[]]]}> when 'true' ->
	      %% Line 58
	      {I,F,Sz,U,Fl,Src}
	  %% Line 59
	  <{'bs_put',F,{I,Fl},[Src|[]]}> when 'true' ->
	      %% Line 60
	      {I,F,Fl,Src}
	  %% Line 61
	  <{'bs_put',{'f',0},I = {'bs_put_string',_cor14,_cor15},[]}> when 'true' ->
	      I
	  %% Line 63
	  <{'bif',I = 'bs_add',F,[Src1|[Src2|[{'integer',U}|[]]]],Dst}> when 'true' ->
	      %% Line 64
	      {I,F,[Src1|[Src2|[U|[]]]],Dst}
	  %% Line 65
	  <{'bif',I = 'bs_utf8_size',F,[Src|[]],Dst}> when 'true' ->
	      %% Line 66
	      {I,F,Src,Dst}
	  %% Line 67
	  <{'bif',I = 'bs_utf16_size',F,[Src|[]],Dst}> when 'true' ->
	      %% Line 68
	      {I,F,Src,Dst}
	  %% Line 69
	  <{'bs_init',F,{I,U,Flags},'none',[Sz|[Src|[]]],Dst}> when 'true' ->
	      %% Line 70
	      {I,F,Sz,U,Src,Flags,Dst}
	  %% Line 71
	  <{'bs_init',F,{I,Extra,Flags},Live,[Sz|[]],Dst}> when 'true' ->
	      %% Line 72
	      {I,F,Sz,Extra,Live,Flags,Dst}
	  %% Line 73
	  <{'bs_init',F,{I,Extra,U,Flags},Live,[Sz|[Src|[]]],Dst}> when 'true' ->
	      %% Line 74
	      {I,F,Sz,Extra,Live,U,Src,Flags,Dst}
	  %% Line 75
	  <{'bs_init',_cor16,I = 'bs_init_writable',_cor17,_cor18,_cor19}> when 'true' ->
	      I
	  %% Line 77
	  <{'put_map',Fail,'assoc',S,D,R,L}> when 'true' ->
	      %% Line 78
	      {'put_map_assoc',Fail,S,D,R,L}
	  %% Line 79
	  <{'put_map',Fail,'exact',S,D,R,L}> when 'true' ->
	      %% Line 80
	      {'put_map_exact',Fail,S,D,R,L}
	  %% Line 81
	  <{'test','has_map_fields',Fail,[Src|List]}> when 'true' ->
	      let <_cor6> =
		  %% Line 82
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor3) ->
				case _cor3 of
				  <[V|_cor2]> when 'true' ->
				      let <_cor4> =
					  apply 'to_typed_literal'/1
					      (V)
				      in  let <_cor5> =
					      apply 'lc$^0'/1
						  (_cor2)
					  in  ( [_cor4|_cor5]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_686> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor3})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (List)
		    -| ['list_comprehension'] )
	      in  %% Line 82
		  {'test','has_map_fields',Fail,Src,{'list',_cor6}}
	  %% Line 83
	  <{'get_map_elements',Fail,Src,{'list',List}}> when 'true' ->
	      let <_cor12> =
		  %% Line 84
		  ( letrec
			'lc$^1'/1 =
			    fun (_cor9) ->
				case _cor9 of
				  <[V|_cor8]> when 'true' ->
				      let <_cor10> =
					  apply 'to_typed_literal'/1
					      (V)
				      in  let <_cor11> =
					      apply 'lc$^1'/1
						  (_cor8)
					  in  ( [_cor10|_cor11]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_234> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor9})
					  -| [{'function_name',{'lc$^1',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^1'/1
			    (List)
		    -| ['list_comprehension'] )
	      in  %% Line 84
		  {'get_map_elements',Fail,Src,{'list',_cor12}}
	  %% Line 85
	  <{'select',I,Reg,Fail,List}> when 'true' ->
	      %% Line 86
	      {I,Reg,Fail,{'list',List}}
	  %% Line 87
	  <I> when 'true' ->
	      _cor0
	end
'to_typed_literal'/1 =
    %% Line 91
    fun (_cor0) ->
	case _cor0 of
	  <{'literal',V}>
	      when call 'erlang':'is_float'
		    (V) ->
	      {'float',V}
	  %% Line 92
	  <{'literal',V}>
	      when call 'erlang':'is_atom'
		    (V) ->
	      {'atom',V}
	  %% Line 93
	  <{'literal',V}>
	      when call 'erlang':'is_integer'
		    (V) ->
	      {'integer',V}
	  %% Line 94
	  <{'literal',[]}> when 'true' ->
	      'nil'
	  %% Line 95
	  <V> when 'true' ->
	      _cor0
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('beam_z')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('beam_z', _cor0)
end