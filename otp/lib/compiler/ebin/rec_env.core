module 'rec_env' ['bind'/3,
		  'bind_list'/3,
		  'bind_recursive'/4,
		  'delete'/2,
		  'empty'/0,
		  'get'/2,
		  'is_defined'/2,
		  'is_empty'/1,
		  'keys'/1,
		  'lookup'/2,
		  'module_info'/0,
		  'module_info'/1,
		  'new_key'/1,
		  'new_key'/2,
		  'new_keys'/2,
		  'new_keys'/3,
		  'size'/1,
		  'to_list'/1]
    attributes [%% Line 35
		'export_type' =
		    %% Line 35
		    [{'environment',0}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{'mapping',{'type',99,'union',[{'type',99,'tuple',[{'atom',99,'map'}|[{'remote_type',99,[{'atom',99,'dict'}|[{'atom',99,'dict'}|[[]]]]}]]}|[{'type',99,'tuple',[{'atom',99,'rec'}|[{'remote_type',99,[{'atom',99,'dict'}|[{'atom',99,'dict'}|[[]]]]}|[{'remote_type',99,[{'atom',99,'dict'}|[{'atom',99,'dict'}|[[]]]]}]]]}]]},[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{'environment',{'type',100,'nonempty_list',[{'type',100,'mapping',[]}]},[]}],
		%% Line 107
		'spec' =
		    %% Line 107
		    [{{'empty',0},[{'type',107,'fun',[{'type',107,'product',[]}|[{'type',107,'environment',[]}]]}]}],
		%% Line 119
		'spec' =
		    %% Line 119
		    [{{'is_empty',1},[{'type',119,'fun',[{'type',119,'product',[{'type',119,'environment',[]}]}|[{'type',119,'boolean',[]}]]}]}],
		%% Line 143
		'spec' =
		    %% Line 143
		    [{{'size',1},[{'type',143,'fun',[{'type',143,'product',[{'type',143,'environment',[]}]}|[{'type',143,'non_neg_integer',[]}]]}]}],
		%% Line 165
		'spec' =
		    %% Line 165
		    [{{'is_defined',2},[{'type',165,'fun',[{'type',165,'product',[{'type',165,'term',[]}|[{'type',165,'environment',[]}]]}|[{'type',165,'boolean',[]}]]}]}],
		%% Line 185
		'spec' =
		    %% Line 185
		    [{{'keys',1},[{'type',185,'fun',[{'type',185,'product',[{'type',185,'environment',[]}]}|[{'type',185,'list',[{'type',185,'term',[]}]}]]}]}],
		%% Line 209
		'spec' =
		    %% Line 209
		    [{{'to_list',1},[{'type',209,'fun',[{'type',209,'product',[{'type',209,'environment',[]}]}|[{'type',209,'list',[{'type',209,'tuple',[{'type',209,'term',[]}|[{'type',209,'term',[]}]]}]}]]}]}],
		%% Line 236
		'spec' =
		    %% Line 236
		    [{{'bind',3},[{'type',236,'fun',[{'type',236,'product',[{'type',236,'term',[]}|[{'type',236,'term',[]}|[{'type',236,'environment',[]}]]]}|[{'type',236,'environment',[]}]]}]}],
		%% Line 259
		'spec' =
		    %% Line 259
		    [{{'bind_list',3},[{'type',259,'fun',[{'type',259,'product',[{'type',259,'list',[{'type',259,'term',[]}]}|[{'type',259,'list',[{'type',259,'term',[]}]}|[{'type',259,'environment',[]}]]]}|[{'type',259,'environment',[]}]]}]}],
		%% Line 298
		'spec' =
		    %% Line 298
		    [{{'delete',2},[{'type',298,'fun',[{'type',298,'product',[{'type',298,'term',[]}|[{'type',298,'environment',[]}]]}|[{'type',298,'environment',[]}]]}]}],
		%% Line 386
		'spec' =
		    %% Line 386
		    [{{'bind_recursive',4},[{'type',386,'fun',[{'type',386,'product',[{'type',386,'list',[{'type',386,'term',[]}]}|[{'type',386,'list',[{'type',386,'term',[]}]}|[{'type',387,'fun',[{'type',387,'product',[{'type',387,'term',[]}|[{'type',387,'environment',[]}]]}|[{'type',387,'term',[]}]]}|[{'type',388,'environment',[]}]]]]}|[{'type',388,'environment',[]}]]}]}],
		%% Line 416
		'spec' =
		    %% Line 416
		    [{{'lookup',2},[{'type',416,'fun',[{'type',416,'product',[{'type',416,'term',[]}|[{'type',416,'environment',[]}]]}|[{'type',416,'union',[{'atom',416,'error'}|[{'type',416,'tuple',[{'atom',416,'ok'}|[{'type',416,'term',[]}]]}]]}]]}]}],
		%% Line 447
		'spec' =
		    %% Line 447
		    [{{'get',2},[{'type',447,'fun',[{'type',447,'product',[{'type',447,'term',[]}|[{'type',447,'environment',[]}]]}|[{'type',447,'term',[]}]]}]}],
		%% Line 540
		'spec' =
		    %% Line 540
		    [{{'new_key',1},[{'type',540,'fun',[{'type',540,'product',[{'type',540,'environment',[]}]}|[{'type',540,'integer',[]}]]}]}],
		%% Line 559
		'spec' =
		    %% Line 559
		    [{{'new_key',2},[{'type',559,'fun',[{'type',559,'product',[{'type',559,'fun',[{'type',559,'product',[{'type',559,'integer',[]}]}|[{'type',559,'term',[]}]]}|[{'type',559,'environment',[]}]]}|[{'type',559,'term',[]}]]}]}],
		%% Line 613
		'spec' =
		    %% Line 613
		    [{{'new_keys',2},[{'type',613,'fun',[{'type',613,'product',[{'type',613,'integer',[]}|[{'type',613,'environment',[]}]]}|[{'type',613,'list',[{'type',613,'integer',[]}]}]]}]}],
		%% Line 630
		'spec' =
		    %% Line 630
		    [{{'new_keys',3},[{'type',630,'fun',[{'type',630,'product',[{'type',630,'integer',[]}|[{'type',630,'fun',[{'type',630,'product',[{'type',630,'integer',[]}]}|[{'type',630,'term',[]}]]}|[{'type',630,'environment',[]}]]]}|[{'type',630,'list',[{'type',630,'term',[]}]}]]}]}]]
'empty'/0 =
    %% Line 109
    fun () ->
	let <_cor0> =
	    %% Line 110
	    call 'dict':'new'
		()
	in  %% Line 110
	    [{'map',_cor0}|[]]
'is_empty'/1 =
    %% Line 121
    fun (_cor0) ->
	case _cor0 of
	  <[{'map',Dict}|Es]> when 'true' ->
	      let <N> =
		  %% Line 122
		  call 'dict':'size'
		      (Dict)
	      in  %% Line 123
		  case <> of
		    <>
			when call 'erlang':'=/='
			      (N,
			       0) ->
			'false'
		    %% Line 124
		    <>
			when call 'erlang':'=:='
			      (Es,
			       []) ->
			'true'
		    %% Line 125
		    <> when 'true' ->
			apply 'is_empty'/1
			    (Es)
		  end
	  %% Line 127
	  <[{'rec',Dict,_cor4}|Es]> when 'true' ->
	      let <N> =
		  %% Line 128
		  call 'dict':'size'
		      (Dict)
	      in  %% Line 129
		  case <> of
		    <>
			when call 'erlang':'=/='
			      (N,
			       0) ->
			'false'
		    %% Line 130
		    <>
			when call 'erlang':'=:='
			      (Es,
			       []) ->
			'true'
		    %% Line 131
		    <> when 'true' ->
			apply 'is_empty'/1
			    (Es)
		  end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'is_empty',1}}] )
	    -| ['compiler_generated'] )
	end
'size'/1 =
    %% Line 145
    fun (_cor0) ->
	%% Line 146
	apply 'env_size'/1
	    (_cor0)
'env_size'/1 =
    %% Line 148
    fun (_cor0) ->
	case _cor0 of
	  <[{'map',Dict}|[]]> when 'true' ->
	      %% Line 149
	      call 'dict':'size'
		  (Dict)
	  %% Line 150
	  <[{'map',Dict}|Env]> when 'true' ->
	      let <_cor2> =
		  %% Line 151
		  call 'dict':'size'
		      (Dict)
	      in  let <_cor1> =
		      %% Line 151
		      apply 'env_size'/1
			  (Env)
		  in  %% Line 151
		      call 'erlang':'+'
			  (_cor2, _cor1)
	  %% Line 152
	  <[{'rec',Dict,_X_Dict0}|Env]> when 'true' ->
	      let <_cor4> =
		  %% Line 153
		  call 'dict':'size'
		      (Dict)
	      in  let <_cor3> =
		      %% Line 153
		      apply 'env_size'/1
			  (Env)
		  in  %% Line 153
		      call 'erlang':'+'
			  (_cor4, _cor3)
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'env_size',1}}] )
	    -| ['compiler_generated'] )
	end
'is_defined'/2 =
    %% Line 167
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,[{'map',Dict}|Env]> when 'true' ->
	      let <_512> =
		  %% Line 168
		  call 'dict':'is_key'
		      (_cor1, Dict)
	      in  %% Line 168
		  case _512 of
		    %% Line 169
		    <'true'> when 'true' ->
			%% Line 170
			'true'
		    %% Line 171
		    <'false'>
			when call 'erlang':'=:='
			      (Env,
			       []) ->
			%% Line 172
			'false'
		    %% Line 173
		    <'false'> when 'true' ->
			%% Line 174
			apply 'is_defined'/2
			    (_cor1, Env)
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_512})
		      -| ['compiler_generated'] )
		  end
	  %% Line 176
	  <Key,[{'rec',Dict,_X_Dict0}|Env]> when 'true' ->
	      let <_584> =
		  %% Line 177
		  call 'dict':'is_key'
		      (_cor1, Dict)
	      in  %% Line 177
		  ( case _584 of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    'true'
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    apply 'is_defined'/2
				(_cor1, Env)
			-| ['compiler_generated'] )
		      ( <_cor3> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_584}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'is_defined',2}}] )
	    -| ['compiler_generated'] )
	end
'keys'/1 =
    %% Line 187
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 188
	    apply 'keys'/2
		(_cor0, [])
	in  %% Line 188
	    call 'lists':'sort'
		(_cor1)
'keys'/2 =
    %% Line 190
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'map',Dict}|[]],S> when 'true' ->
	      let <_cor2> =
		  %% Line 191
		  call 'dict':'fetch_keys'
		      (Dict)
	      in  %% Line 191
		  call 'erlang':'++'
		      (_cor2, _cor0)
	  %% Line 192
	  <[{'map',Dict}|Env],S> when 'true' ->
	      let <_cor3> =
		  %% Line 193
		  call 'dict':'fetch_keys'
		      (Dict)
	      in  let <_cor4> =
		      %% Line 193
		      call 'erlang':'++'
			  (_cor3, _cor0)
		  in  %% Line 193
		      apply 'keys'/2
			  (Env, _cor4)
	  %% Line 194
	  <[{'rec',Dict,_X_Dict0}|Env],S> when 'true' ->
	      let <_cor5> =
		  %% Line 195
		  call 'dict':'fetch_keys'
		      (Dict)
	      in  let <_cor6> =
		      %% Line 195
		      call 'erlang':'++'
			  (_cor5, _cor0)
		  in  %% Line 195
		      apply 'keys'/2
			  (Env, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'keys',2}}] )
	    -| ['compiler_generated'] )
	end
'to_list'/1 =
    %% Line 211
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 212
	    apply 'to_list'/2
		(_cor0, [])
	in  %% Line 212
	    call 'lists':'sort'
		(_cor1)
'to_list'/2 =
    %% Line 214
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'map',Dict}|[]],S> when 'true' ->
	      let <_cor2> =
		  %% Line 215
		  call 'dict':'to_list'
		      (Dict)
	      in  %% Line 215
		  call 'erlang':'++'
		      (_cor2, _cor0)
	  %% Line 216
	  <[{'map',Dict}|Env],S> when 'true' ->
	      let <_cor3> =
		  %% Line 217
		  call 'dict':'to_list'
		      (Dict)
	      in  let <_cor4> =
		      %% Line 217
		      call 'erlang':'++'
			  (_cor3, _cor0)
		  in  %% Line 217
		      apply 'to_list'/2
			  (Env, _cor4)
	  %% Line 218
	  <[{'rec',Dict,_X_Dict0}|Env],S> when 'true' ->
	      let <_cor5> =
		  %% Line 219
		  call 'dict':'to_list'
		      (Dict)
	      in  let <_cor6> =
		      %% Line 219
		      call 'erlang':'++'
			  (_cor5, _cor0)
		  in  %% Line 219
		      apply 'to_list'/2
			  (Env, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'to_list',2}}] )
	    -| ['compiler_generated'] )
	end
'bind'/3 =
    %% Line 238
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Key,Value,[{'map',Dict}|[]]> when 'true' ->
	      let <_cor3> =
		  %% Line 239
		  call 'dict':'store'
		      (_cor2, _cor1, Dict)
	      in  %% Line 239
		  [{'map',_cor3}|[]]
	  %% Line 240
	  <Key,Value,[{'map',Dict}|Env]> when 'true' ->
	      let <_cor4> =
		  %% Line 241
		  call 'dict':'store'
		      (_cor2, _cor1, Dict)
	      in  let <_cor5> =
		      %% Line 241
		      apply 'delete_any'/2
			  (_cor2, Env)
		  in  %% Line 241
		      [{'map',_cor4}|_cor5]
	  %% Line 242
	  <Key,Value,Env> when 'true' ->
	      let <_cor6> =
		  %% Line 243
		  call 'dict':'new'
		      ()
	      in  let <_cor7> =
		      %% Line 243
		      call 'dict':'store'
			  (_cor2, _cor1, _cor6)
		  in  let <_cor8> =
			  %% Line 243
			  apply 'delete_any'/2
			      (_cor2, _cor0)
		      in  %% Line 243
			  [{'map',_cor7}|_cor8]
	end
'bind_list'/3 =
    %% Line 261
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Ks,Vs,[{'map',Dict}|[]]> when 'true' ->
	      let <_cor3> =
		  %% Line 262
		  apply 'store_list'/3
		      (_cor2, _cor1, Dict)
	      in  %% Line 262
		  [{'map',_cor3}|[]]
	  %% Line 263
	  <Ks,Vs,[{'map',Dict}|Env]> when 'true' ->
	      let <_cor4> =
		  %% Line 264
		  apply 'store_list'/3
		      (_cor2, _cor1, Dict)
	      in  let <_cor5> =
		      %% Line 264
		      apply 'delete_list'/2
			  (_cor2, Env)
		  in  %% Line 264
		      [{'map',_cor4}|_cor5]
	  %% Line 265
	  <Ks,Vs,Env> when 'true' ->
	      let <_cor6> =
		  %% Line 266
		  call 'dict':'new'
		      ()
	      in  let <_cor7> =
		      %% Line 266
		      apply 'store_list'/3
			  (_cor2, _cor1, _cor6)
		  in  let <_cor8> =
			  %% Line 266
			  apply 'delete_list'/2
			      (_cor2, _cor0)
		      in  %% Line 266
			  [{'map',_cor7}|_cor8]
	end
'store_list'/3 =
    %% Line 268
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[K|Ks],[V|Vs],Dict> when 'true' ->
	      let <_cor3> =
		  %% Line 269
		  call 'dict':'store'
		      (K, V, _cor0)
	      in  %% Line 269
		  apply 'store_list'/3
		      (Ks, Vs, _cor3)
	  %% Line 270
	  <[],_cor7,Dict> when 'true' ->
	      _cor0
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'store_list',3}}] )
	    -| ['compiler_generated'] )
	end
'delete_list'/2 =
    %% Line 273
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[K|Ks],Env> when 'true' ->
	      let <_cor2> =
		  %% Line 274
		  apply 'delete_any'/2
		      (K, _cor0)
	      in  %% Line 274
		  apply 'delete_list'/2
		      (Ks, _cor2)
	  %% Line 275
	  <[],Env> when 'true' ->
	      _cor0
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'delete_list',2}}] )
	    -| ['compiler_generated'] )
	end
'delete_any'/2 =
    %% Line 281
    fun (_cor1,_cor0) ->
	let <_1911> =
	    %% Line 282
	    apply 'is_defined'/2
		(_cor1, _cor0)
	in  %% Line 282
	    case _1911 of
	      %% Line 283
	      <'true'> when 'true' ->
		  %% Line 284
		  apply 'delete'/2
		      (_cor1, _cor0)
	      %% Line 285
	      <'false'> when 'true' ->
		  _cor0
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_1911})
		-| ['compiler_generated'] )
	    end
'delete'/2 =
    %% Line 300
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,[E = {'map',Dict}|Env]> when 'true' ->
	      let <_741> =
		  %% Line 301
		  call 'dict':'is_key'
		      (_cor1, Dict)
	      in  %% Line 301
		  case _741 of
		    %% Line 302
		    <'true'> when 'true' ->
			let <_cor2> =
			    %% Line 303
			    call 'dict':'erase'
				(_cor1, Dict)
			in  %% Line 303
			    [{'map',_cor2}|Env]
		    %% Line 304
		    <'false'> when 'true' ->
			%% Line 305
			apply 'delete_1'/3
			    (_cor1, Env, E)
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_741})
		      -| ['compiler_generated'] )
		  end
	  %% Line 307
	  <Key,[E = {'rec',Dict,Dict0}|Env]> when 'true' ->
	      let <_357> =
		  %% Line 308
		  call 'dict':'is_key'
		      (_cor1, Dict)
	      in  %% Line 308
		  case _357 of
		    %% Line 309
		    <'true'> when 'true' ->
			let <Dict1> =
			    %% Line 312
			    call 'dict':'erase'
				(_cor1, Dict)
			in  %% Line 313
			    case call 'dict':'size'
				     (Dict1) of
			      %% Line 314
			      <0> when 'true' ->
				  Env
			      %% Line 316
			      <_cor10> when 'true' ->
				  %% Line 317
				  [{'rec',Dict1,Dict0}|Env]
			    end
		    %% Line 319
		    <'false'> when 'true' ->
			let <_cor6> =
			    %% Line 320
			    apply 'delete'/2
				(_cor1, Env)
			in  %% Line 320
			    [E|_cor6]
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_357})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'delete',2}}] )
	    -| ['compiler_generated'] )
	end
'delete_1'/3 =
    %% Line 326
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Key,[E = {'rec',Dict,Dict0}|Env],E1> when 'true' ->
	      let <_991> =
		  %% Line 327
		  call 'dict':'is_key'
		      (_cor2, Dict)
	      in  %% Line 327
		  case _991 of
		    %% Line 328
		    <'true'> when 'true' ->
			let <Dict1> =
			    %% Line 329
			    call 'dict':'erase'
				(_cor2, Dict)
			in  %% Line 330
			    case call 'dict':'size'
				     (Dict1) of
			      %% Line 331
			      <0> when 'true' ->
				  %% Line 332
				  apply 'concat'/2
				      (_cor0, Env)
			      %% Line 333
			      <_cor10> when 'true' ->
				  %% Line 334
				  [_cor0|[{'rec',Dict1,Dict0}|Env]]
			    end
		    %% Line 336
		    <'false'> when 'true' ->
			let <_cor5> =
			    %% Line 337
			    apply 'delete'/2
				(_cor2, Env)
			in  %% Line 337
			    [_cor0|[E|_cor5]]
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_991})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'delete_1',3}}] )
	    -| ['compiler_generated'] )
	end
'concat'/2 =
    %% Line 340
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'map',D1},[{'map',D2}|Env]> when 'true' ->
	      let <_cor8> =
		  %% Line 341
		  fun (_cor4,_cor3,_cor2) ->
		      _cor3
	      in  let <_cor9> =
		      %% Line 341
		      call 'dict':'merge'
			  (_cor8, D1, D2)
		  in  %% Line 341
		      [_cor9|Env]
	  %% Line 342
	  <E1,Env> when 'true' ->
	      %% Line 343
	      [_cor1|_cor0]
	end
'bind_recursive'/4 =
    %% Line 390
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],[],_cor15,Env> when 'true' ->
	      _cor0
	  %% Line 392
	  <Ks,Vs,F,Env> when 'true' ->
	      let <F1> =
		  %% Line 393
		  fun (_cor6) ->
		      %% Line 394
		      fun (_cor4) ->
			  apply _cor1
			      (_cor6, [{'rec',_cor4,_cor4}|_cor0])
	      in  let <_cor9> =
		      %% Line 396
		      call 'dict':'new'
			  ()
		  in  let <Dict> =
			  %% Line 396
			  apply 'bind_recursive_1'/4
			      (_cor3, _cor2, F1, _cor9)
		      in  %% Line 397
			  [{'rec',Dict,Dict}|_cor0]
	end
'bind_recursive_1'/4 =
    %% Line 399
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[K|Ks],[V|Vs],F,Dict> when 'true' ->
	      let <_cor4> =
		  %% Line 400
		  apply _cor1
		      (V)
	      in  let <_cor5> =
		      %% Line 400
		      call 'dict':'store'
			  (K, _cor4, _cor0)
		  in  %% Line 400
		      apply 'bind_recursive_1'/4
			  (Ks, Vs, _cor1, _cor5)
	  %% Line 401
	  <[],[],_cor10,Dict> when 'true' ->
	      _cor0
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'bind_recursive_1',4}}] )
	    -| ['compiler_generated'] )
	end
'lookup'/2 =
    %% Line 418
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,[{'map',Dict}|Env]> when 'true' ->
	      let <_2897> =
		  %% Line 419
		  call 'dict':'find'
		      (_cor1, Dict)
	      in  %% Line 419
		  case _2897 of
		    %% Line 420
		    <Value = {'ok',_cor7}> when 'true' ->
			_2897
		    %% Line 422
		    <'error'>
			when call 'erlang':'=:='
			      (Env,
			       []) ->
			%% Line 423
			'error'
		    %% Line 424
		    <'error'> when 'true' ->
			%% Line 425
			apply 'lookup'/2
			    (_cor1, Env)
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_2897})
		      -| ['compiler_generated'] )
		  end
	  %% Line 427
	  <Key,[{'rec',Dict,Dict0}|Env]> when 'true' ->
	      let <_2182> =
		  %% Line 428
		  call 'dict':'find'
		      (_cor1, Dict)
	      in  %% Line 428
		  case _2182 of
		    %% Line 429
		    <{'ok',F}> when 'true' ->
			let <_cor3> =
			    %% Line 430
			    apply F
				(Dict0)
			in  %% Line 430
			    {'ok',_cor3}
		    %% Line 431
		    <'error'> when 'true' ->
			%% Line 432
			apply 'lookup'/2
			    (_cor1, Env)
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_2182})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'lookup',2}}] )
	    -| ['compiler_generated'] )
	end
'get'/2 =
    %% Line 449
    fun (_cor1,_cor0) ->
	let <_2327> =
	    %% Line 450
	    apply 'lookup'/2
		(_cor1, _cor0)
	in  %% Line 450
	    case _2327 of
	      %% Line 451
	      <{'ok',Value}> when 'true' ->
		  Value
	      %% Line 452
	      <'error'> when 'true' ->
		  call 'erlang':'throw'
		      ({'undefined',_cor1})
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_2327})
		-| ['compiler_generated'] )
	    end
'new_key'/1 =
    %% Line 542
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 543
	    fun (_cor1) ->
		_cor1
	in  %% Line 543
	    apply 'new_key'/2
		(_cor3, _cor0)
'new_key'/2 =
    %% Line 561
    fun (_cor1,_cor0) ->
	let <_2464> =
	    %% Line 590
	    apply 'env_size'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 590
		call 'erlang':'*'
		    (_2464, 50)
	    in  let <R> =
		    %% Line 590
		    call 'erlang':'max'
			(_cor2, 1000)
		in  let <_cor3> =
			%% Line 600
			call 'random':'uniform'
			    (R)
		    in  %% Line 568
			apply 'new_key'/5
			    (_cor3, R, 0, _cor1, _cor0)
'new_key'/5 =
    %% Line 570
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <N,R,T,F,Env>
	      when call 'erlang':'<'
		    (_cor2,
		     2) ->
	      let <A> =
		  %% Line 571
		  apply _cor1
		      (_cor4)
	      in  let <_1630> =
		      %% Line 572
		      apply 'is_defined'/2
			  (A, _cor0)
		  in  %% Line 572
		      case _1630 of
			%% Line 573
			<'true'> when 'true' ->
			    let <_cor7> =
				%% Line 600
				call 'random':'uniform'
				    (_cor3)
			    in  let <_cor6> =
				    %% Line 575
				    call 'erlang':'+'
					(_cor2, 1)
				in  %% Line 575
				    apply 'new_key'/5
					(_cor7, _cor3, _cor6, _cor1, _cor0)
			%% Line 576
			<'false'> when 'true' ->
			    A
			( <_cor8> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_1630})
			  -| ['compiler_generated'] )
		      end
	  %% Line 582
	  <N,R,_X_T,F,Env> when 'true' ->
	      let <_cor9> =
		  %% Line 585
		  call 'erlang':'*'
		      (_cor3, 10)
	      in  let <R1> =
		      %% Line 585
		      call 'erlang':'trunc'
			  (_cor9)
		  in  let <_cor11> =
			  %% Line 600
			  call 'random':'uniform'
			      (R1)
		      in  %% Line 587
			  apply 'new_key'/5
			      (_cor11, R1, 0, _cor1, _cor0)
	end
'new_keys'/2 =
    %% Line 615
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <N,Env>
	      when call 'erlang':'is_integer'
		    (_cor1) ->
	      let <_cor4> =
		  %% Line 616
		  fun (_cor2) ->
		      _cor2
	      in  %% Line 616
		  apply 'new_keys'/3
		      (_cor1, _cor4, _cor0)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'new_keys',2}}] )
	    -| ['compiler_generated'] )
	end
'new_keys'/3 =
    %% Line 632
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <N,F,Env>
	      when call 'erlang':'is_integer'
		    (_cor2) ->
	      let <_2412> =
		  apply 'env_size'/1
		      (_cor0)
	      in  let <_2478> =
		      call 'erlang':'*'
			  (_2412, 50)
		  in  let <R> =
			  call 'erlang':'max'
			      (_2478, 1000)
		      in  %% Line 634
			  apply 'new_keys'/5
			      (_cor2, [], R, _cor1, _cor0)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'new_keys',3}}] )
	    -| ['compiler_generated'] )
	end
'new_keys'/5 =
    %% Line 636
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <N,Ks,R,F,Env>
	      when call 'erlang':'>'
		    (_cor4,
		     0) ->
	      let <_2818> =
		  call 'random':'uniform'
		      (_cor2)
	      in  let <Key> =
		      apply 'new_key'/5
			  (_2818, _cor2, 0, _cor1, _cor0)
		  in  let <Env1> =
			  %% Line 638
			  apply 'bind'/3
			      (Key, 'true', _cor0)
		      in  let <_cor7> =
			      %% Line 639
			      call 'erlang':'-'
				  (_cor4, 1)
			  in  %% Line 639
			      apply 'new_keys'/5
				  (_cor7, [Key|_cor3], _cor2, _cor1, Env1)
	  %% Line 640
	  <0,Ks,_cor13,_cor14,_cor15> when 'true' ->
	      _cor3
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'new_keys',5}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('rec_env')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('rec_env', _cor0)
end