module 'beam_validator' ['file'/1,
			 'files'/1,
			 'format_error'/1,
			 'module'/2,
			 'module_info'/0,
			 'module_info'/1]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{'beam_instr',{'type',26,'union',[{'atom',26,'bs_init_writable'}|[{'atom',26,'fclearerror'}|[{'atom',26,'if_end'}|[{'atom',27,'remove_message'}|[{'atom',27,'return'}|[{'atom',27,'send'}|[{'atom',27,'timeout'}|[{'type',28,'tuple','any'}]]]]]]]]},[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','function'},[{'typed_record_field',{'record_field',34,{'atom',34,'name'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'type',34,'atom',[]}]]}}|[{'typed_record_field',{'record_field',35,{'atom',35,'arity'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'byte',[]}]]}}|[{'record_field',36,{'atom',36,'entry'}}|[{'typed_record_field',{'record_field',37,{'atom',37,'code'},{'nil',37}},{'type',37,'list',[{'type',37,'beam_instr',[]}]}}]]]],[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','beam_file'},[{'typed_record_field',{'record_field',39,{'atom',39,'module'}},{'type',39,'union',[{'atom',39,'undefined'}|[{'type',39,'module',[]}]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'labeled_exports'},{'nil',40}},{'type',40,'list',[{'remote_type',40,[{'atom',40,'beam_lib'}|[{'atom',40,'labeled_entry'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',41,{'atom',41,'attributes'},{'nil',41}},{'type',41,'list',[{'remote_type',41,[{'atom',41,'beam_lib'}|[{'atom',41,'attrib_entry'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'compile_info'},{'nil',42}},{'type',42,'list',[{'remote_type',42,[{'atom',42,'beam_lib'}|[{'atom',42,'compinfo_entry'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'code'},{'nil',43}},{'type',43,'list',[{'type',43,'record',[{'atom',43,'function'}]}]}}]]]]],[]}],
		%% Line 47
		'spec' =
		    %% Line 47
		    [{{'file',1},[{'type',47,'fun',[{'type',47,'product',[{'remote_type',47,[{'atom',47,'file'}|[{'atom',47,'filename'}|[[]]]]}]}|[{'type',47,'union',[{'atom',47,'ok'}|[{'type',47,'tuple',[{'atom',47,'error'}|[{'type',47,'term',[]}]]}]]}]]}]}],
		%% Line 58
		'spec' =
		    %% Line 58
		    [{{'files',1},[{'type',58,'fun',[{'type',58,'product',[{'type',58,'list',[{'remote_type',58,[{'atom',58,'file'}|[{'atom',58,'filename'}|[[]]]]}]}]}|[{'atom',58,'ok'}]]}]}],
		%% Line 80
		'spec' =
		    %% Line 80
		    [{{'format_error',1},[{'type',80,'fun',[{'type',80,'product',[{'type',80,'term',[]}]}|[{'type',80,'iolist',[]}]]}]}],
		%% Line 216
		'type' =
		    %% Line 216
		    [{'index',{'type',216,'non_neg_integer',[]},[]}],
		%% Line 217
		'type' =
		    %% Line 217
		    [{'reg_tab',{'remote_type',217,[{'atom',217,'gb_trees'}|[{'atom',217,'tree'}|[[{'type',217,'index',[]}|[{'type',217,'union',[{'atom',217,'none'}|[{'type',217,'tuple',[{'atom',217,'value'}|[{'var',217,'_'}]]}]]}]]]]]},[]}],
		%% Line 219
		'type' =
		    %% Line 219
		    [{{'record','st'},[{'typed_record_field',{'record_field',220,{'atom',220,'x'},{'call',220,{'atom',220,'init_regs'},[{'integer',220,0}|[{'atom',220,'term'}]]}},{'type',220,'reg_tab',[]}}|[{'typed_record_field',{'record_field',221,{'atom',221,'y'},{'call',221,{'atom',221,'init_regs'},[{'integer',221,0}|[{'atom',221,'initialized'}]]}},{'type',221,'reg_tab',[]}}|[{'record_field',222,{'atom',222,'f'},{'call',222,{'atom',222,'init_fregs'},[]}}|[{'record_field',223,{'atom',223,'numy'},{'atom',223,'none'}}|[{'record_field',224,{'atom',224,'h'},{'integer',224,0}}|[{'record_field',225,{'atom',225,'hf'},{'integer',225,0}}|[{'record_field',226,{'atom',226,'fls'},{'atom',226,'undefined'}}|[{'record_field',227,{'atom',227,'ct'},{'nil',227}}|[{'record_field',228,{'atom',228,'bsm'},{'atom',228,'undefined'}}|[{'record_field',229,{'atom',229,'bits'},{'atom',229,'undefined'}}|[{'record_field',230,{'atom',230,'setelem'},{'atom',230,'false'}}]]]]]]]]]]],[]}],
		%% Line 233
		'type' =
		    %% Line 233
		    [{'label',{'type',233,'integer',[]},[]}],
		%% Line 234
		'type' =
		    %% Line 234
		    [{'label_set',{'remote_type',234,[{'atom',234,'gb_sets'}|[{'atom',234,'set'}|[[{'type',234,'label',[]}]]]]},[]}],
		%% Line 235
		'type' =
		    %% Line 235
		    [{'branched_tab',{'remote_type',235,[{'atom',235,'gb_trees'}|[{'atom',235,'tree'}|[[{'type',235,'label',[]}|[{'type',235,'record',[{'atom',235,'st'}]}]]]]]},[]}],
		%% Line 236
		'type' =
		    %% Line 236
		    [{'ft_tab',{'remote_type',236,[{'atom',236,'gb_trees'}|[{'atom',236,'tree'}|[[]]]]},[]}],
		%% Line 238
		'type' =
		    %% Line 238
		    [{{'record','vst'},[{'typed_record_field',{'record_field',239,{'atom',239,'current'},{'atom',239,'none'}},{'type',239,'union',[{'type',239,'record',[{'atom',239,'st'}]}|[{'atom',239,'none'}]]}}|[{'typed_record_field',{'record_field',240,{'atom',240,'branched'},{'call',240,{'remote',240,{'atom',240,'gb_trees'},{'atom',240,'empty'}},[]}},{'type',240,'branched_tab',[]}}|[{'typed_record_field',{'record_field',241,{'atom',241,'labels'},{'call',241,{'remote',241,{'atom',241,'gb_sets'},{'atom',241,'empty'}},[]}},{'type',241,'label_set',[]}}|[{'typed_record_field',{'record_field',242,{'atom',242,'ft'},{'call',242,{'remote',242,{'atom',242,'gb_trees'},{'atom',242,'empty'}},[]}},{'type',242,'ft_tab',[]}}]]]],[]}]]
'file'/1 =
    %% Line 49
    fun (_cor0) ->
	case _cor0 of
	  <Name>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_6620> =
		  %% Line 50
		  call 'filename':'extension'
		      (_cor0)
	      in  let <_cor2> =
		      %% Line 50
		      case _6620 of
			%% Line 51
			<[46|[83]]> when 'true' ->
			    apply 's_file'/1
				(_cor0)
			%% Line 52
			<[46|[98|[101|[97|[109]]]]]> when 'true' ->
			    apply 'beam_file'/1
				(_cor0)
			( <_cor1> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_6620})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 50
		      case _cor2 of
			%% Line 54
			<[]> when 'true' ->
			    'ok'
			%% Line 55
			<Es> when 'true' ->
			    {'error',_cor2}
		      end
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'file',1}}] )
	    -| ['compiler_generated'] )
	end
'files'/1 =
    %% Line 60
    fun (_cor0) ->
	case _cor0 of
	  <[F|Fs]> when 'true' ->
	      do  let <_5066> =
		      %% Line 62
		      apply 'file'/1
			  (F)
		  in  %% Line 62
		      case _5066 of
			%% Line 63
			<'ok'> when 'true' ->
			    'ok'
			%% Line 64
			<{'error',Es}> when 'true' ->
			    let <_cor1> =
				%% Line 65
				apply 'format_error'/1
				    (Es)
			    in  %% Line 65
				call 'io':'format'
				    ([126|[116|[112|[58|[126|[110|[126|[116|[115|[126|[110]]]]]]]]]]], [F|[_cor1|[]]])
			( <_cor2> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_5066})
			  -| ['compiler_generated'] )
		      end
		  %% Line 67
		  apply 'files'/1
		      (Fs)
	  %% Line 68
	  <[]> when 'true' ->
	      'ok'
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'files',1}}] )
	    -| ['compiler_generated'] )
	end
'module'/2 =
    %% Line 71
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Code = {Mod,Exp,Attr,Fs,Lc},_X_Opts>
	      when %% Line 72
		try
		    let <_cor2> =
			call 'erlang':'is_atom'
			    (Mod)
		    in  let <_cor3> =
			    call 'erlang':'is_list'
				(Exp)
			in  let <_cor4> =
				call 'erlang':'is_list'
				    (Attr)
			    in  let <_cor5> =
				    call 'erlang':'is_integer'
					(Lc)
				in  let <_cor6> =
					call 'erlang':'and'
					    (_cor4, _cor5)
				    in  let <_cor7> =
					    call 'erlang':'and'
						(_cor3, _cor6)
					in  call 'erlang':'and'
						(_cor2, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_4910> =
		  %% Line 73
		  apply 'validate'/2
		      (Mod, Fs)
	      in  %% Line 73
		  case _4910 of
		    %% Line 74
		    <[]> when 'true' ->
			{'ok',_cor1}
		    %% Line 75
		    <Es0> when 'true' ->
			let <_cor12> =
			    %% Line 76
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor10) ->
					  case _cor10 of
					    <[E|_cor9]> when 'true' ->
						let <_cor11> =
						    apply 'lc$^0'/1
							(_cor9)
						in  ( [{'beam_validator',E}|_cor11]
						      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_12131> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor10})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (_4910)
			      -| ['list_comprehension'] )
			in  let <_cor14> =
				%% Line 77
				call 'erlang':'atom_to_list'
				    (Mod)
			    in  %% Line 77
				{'error',[{_cor14,_cor12}|[]]}
		  end
	  ( <_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'module',2}}] )
	    -| ['compiler_generated'] )
	end
'format_error'/1 =
    %% Line 82
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      []
	  %% Line 83
	  <[{{M,F,A},{I,Off,Desc}}|Es]> when 'true' ->
	      let <_cor1> =
		  %% Line 84
		  call 'io_lib':'format'
		      ([32|[32|[126|[112|[58|[126|[112|[47|[126|[112|[43|[126|[112|[58|[126|[110|[32|[32|[32|[32|[126|[112|[32|[45|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 85
																							 [M|[F|[A|[Off|[I|[Desc|[]]]]]]])
	      in  let <_cor2> =
		      %% Line 85
		      apply 'format_error'/1
			  (Es)
		  in  %% Line 84
		      [_cor1|_cor2]
	  %% Line 86
	  <[Error|Es]> when 'true' ->
	      let <_cor3> =
		  %% Line 87
		  apply 'format_error'/1
		      (Error)
	      in  let <_cor4> =
		      %% Line 87
		      apply 'format_error'/1
			  (Es)
		  in  %% Line 87
		      [_cor3|_cor4]
	  %% Line 88
	  <{{_X_M,F,A},{I,Off,'limit'}}> when 'true' ->
	      %% Line 89
	      call 'io_lib':'format'
		  (%% Line 90
		   [102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[112|[47|[126|[112|[43|[126|[112|[58|[126|[110|[32|[32|[65|[110|[32|[105|[109|[112|[108|[101|[109|[101|[110|[116|[97|[116|[105|[111|[110|[32|[108|[105|[109|[105|[116|[32|[119|[97|[115|[32|[114|[101|[97|[99|[104|[101|[100|[46|[126|[110|[32|[32|[84|[114|[121|[32|[114|[101|[100|[117|[99|[105|[110|[103|[32|[116|[104|[101|[32|[99|[111|[109|[112|[108|[101|[120|[105|[116|[121|[32|[111|[102|[32|[116|[104|[105|[115|[32|[102|[117|[110|[99|[116|[105|[111|[110|[46|[126|[110|[126|[110|[32|[32|[73|[110|[115|[116|[114|[117|[99|[116|[105|[111|[110|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 93
																																																																																															    [F|[A|[Off|[I|[]]]]])
	  %% Line 94
	  <{{_X_M,F,A},{'undef_labels',Lbls}}> when 'true' ->
	      let <_cor12> =
		  %% Line 95
		  call 'io_lib':'format'
		      (%% Line 96
		       [102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[112|[47|[126|[112|[58|[126|[110|[32|[32|[73|[110|[116|[101|[114|[110|[97|[108|[32|[99|[111|[110|[115|[105|[115|[116|[101|[110|[99|[121|[32|[99|[104|[101|[99|[107|[32|[102|[97|[105|[108|[101|[100|[32|[45|[32|[112|[108|[101|[97|[115|[101|[32|[114|[101|[112|[111|[114|[116|[32|[116|[104|[105|[115|[32|[98|[117|[103|[46|[126|[110|[32|[32|[84|[104|[101|[32|[102|[111|[108|[108|[111|[119|[105|[110|[103|[32|[108|[97|[98|[101|[108|[40|[115|[41|[32|[119|[101|[114|[101|[32|[114|[101|[102|[101|[114|[101|[110|[99|[101|[100|[32|[98|[117|[116|[32|[110|[111|[116|[32|[100|[101|[102|[105|[110|[101|[100|[58|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 98
																																																																																																						[F|[A|[]]])
	      in  let <_cor10> =
		      %% Line 99
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor7) ->
				    case _cor7 of
				      <[L|_cor6]> when 'true' ->
					  let <_cor8> =
					      call 'erlang':'integer_to_list'
						  (L)
					  in  let <_cor9> =
						  apply 'lc$^0'/1
						      (_cor6)
					      in  ( [[_cor8|[[32]]]|_cor9]
						    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  [10]
				      ( <_4614> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor7})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(Lbls)
			-| ['list_comprehension'] )
		  in  let <_cor11> =
			  %% Line 99
			  [32|[32|_cor10]]
		      in  %% Line 98
			  call 'erlang':'++'
			      (_cor12, _cor11)
	  %% Line 100
	  <{{_X_M,F,A},{I,Off,Desc}}> when 'true' ->
	      %% Line 101
	      call 'io_lib':'format'
		  (%% Line 102
		   [102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[112|[47|[126|[112|[43|[126|[112|[58|[126|[110|[32|[32|[73|[110|[116|[101|[114|[110|[97|[108|[32|[99|[111|[110|[115|[105|[115|[116|[101|[110|[99|[121|[32|[99|[104|[101|[99|[107|[32|[102|[97|[105|[108|[101|[100|[32|[45|[32|[112|[108|[101|[97|[115|[101|[32|[114|[101|[112|[111|[114|[116|[32|[116|[104|[105|[115|[32|[98|[117|[103|[46|[126|[110|[32|[32|[73|[110|[115|[116|[114|[117|[99|[116|[105|[111|[110|[58|[32|[126|[112|[126|[110|[32|[32|[69|[114|[114|[111|[114|[58|[32|[32|[32|[32|[32|[32|[32|[126|[112|[58|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 105
																																																																																								    [F|[A|[Off|[I|[Desc|[]]]]]])
	  %% Line 106
	  <{Module,Error}> when 'true' ->
	      let <_cor13> =
		  %% Line 107
		  call Module:'format_error'
		      (Error)
	      in  %% Line 107
		  [_cor13|[]]
	  %% Line 108
	  <Error> when 'true' ->
	      %% Line 109
	      call 'io_lib':'format'
		  ([126|[112|[126|[110]]]], [_cor0|[]])
	end
's_file'/1 =
    %% Line 115
    fun (_cor0) ->
	let <_4063> =
	    %% Line 116
	    call 'file':'consult'
		(_cor0)
	in  %% Line 116
	    case _4063 of
	      <{'ok',Is}> when 'true' ->
		  let <_7857> =
		      %% Line 117
		      call 'lists':'keyfind'
			  ('module', 1, Is)
		  in  %% Line 117
		      case _7857 of
			<{'module',Module}> when 'true' ->
			    let <Fs> =
				%% Line 122
				apply 'find_functions_1'/4
				    (Is, 'none', [], [])
			    in  %% Line 119
				apply 'validate'/2
				    (Module, Fs)
			( <_cor2> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_7857})
			  -| ['compiler_generated'] )
		      end
	      ( <_cor1> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_4063})
		-| ['compiler_generated'] )
	    end
'find_functions_1'/4 =
    %% Line 124
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'function',Name,Arity,Entry}|Is],Func,FuncAcc,Acc0> when 'true' ->
	      let <Acc> =
		  %% Line 125
		  apply 'add_func'/3
		      (_cor2, _cor1, _cor0)
	      in  %% Line 126
		  apply 'find_functions_1'/4
		      (Is, {Name,Arity,Entry}, [], Acc)
	  %% Line 127
	  <[I|Is],Func,FuncAcc,Acc> when 'true' ->
	      %% Line 128
	      apply 'find_functions_1'/4
		  (Is, _cor2, [I|_cor1], _cor0)
	  %% Line 129
	  <[],Func,FuncAcc,Acc> when 'true' ->
	      let <_cor5> =
		  %% Line 130
		  apply 'add_func'/3
		      (_cor2, _cor1, _cor0)
	      in  %% Line 130
		  call 'lists':'reverse'
		      (_cor5)
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'find_functions_1',4}}] )
	    -| ['compiler_generated'] )
	end
'add_func'/3 =
    %% Line 132
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'none',_cor7,Acc> when 'true' ->
	      _cor0
	  %% Line 133
	  <{Name,Arity,Entry},Is,Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 134
		  call 'lists':'reverse'
		      (_cor1)
	      in  %% Line 134
		  [{'function',Name,Arity,Entry,_cor3}|_cor0]
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'add_func',3}}] )
	    -| ['compiler_generated'] )
	end
'beam_file'/1 =
    %% Line 136
    fun (_cor0) ->
	%% Line 137
	try
	    call 'beam_disasm':'file'
		(_cor0)
	of <_cor1> ->
	    case _cor1 of
	      %% Line 138
	      <{'error','beam_lib',Reason}> when 'true' ->
		  [{'beam_lib',Reason}|[]]
	      %% Line 139
	      <{'beam_file',Module,_cor8,_cor9,_cor10,Code0}> when 'true' ->
		  let <Code> =
		      %% Line 140
		      apply 'normalize_disassembled_code'/1
			  (Code0)
		  in  %% Line 141
		      apply 'validate'/2
			  (Module, Code)
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'try_clause',_cor1})
		-| ['compiler_generated'] )
	    end
	catch <_cor6,_cor5,_cor4> ->
	    %% Line 142
	    ['disassembly_failed']
'validate'/2 =
    %% Line 165
    fun (_cor1,_cor0) ->
	let <Ft> =
	    %% Line 166
	    apply 'index_bs_start_match'/2
		(_cor0, [])
	in  %% Line 167
	    apply 'validate_0'/3
		(_cor1, _cor0, Ft)
'index_bs_start_match'/2 =
    %% Line 169
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'function',_cor11,_cor12,Entry,Code0}|Fs],Acc0> when 'true' ->
	      let <_cor4> =
		  %% Line 170
		  fun (_cor2) ->
		      case _cor2 of
			<{'label',L}>
			    when call 'erlang':'=:='
				  (L,
				   Entry) ->
			    'false'
			%% Line 171
			<_cor13> when 'true' ->
			    'true'
		      end
	      in  %% Line 173
		  case call 'lists':'dropwhile'
			   (_cor4, Code0) of
		    %% Line 174
		    <[{'label',_cor14}|Is]>
			when call 'erlang':'=:='
			      (_cor14,
			       Entry) ->
			let <Acc> =
			    %% Line 175
			    apply 'index_bs_start_match_1'/3
				(Is, Entry, _cor0)
			in  %% Line 176
			    apply 'index_bs_start_match'/2
				(Fs, Acc)
		    %% Line 177
		    <_cor15> when 'true' ->
			%% Line 180
			apply 'index_bs_start_match'/2
			    (Fs, _cor0)
		  end
	  %% Line 182
	  <[],Acc> when 'true' ->
	      let <_cor8> =
		  %% Line 183
		  call 'lists':'sort'
		      (_cor0)
	      in  %% Line 183
		  call 'gb_trees':'from_orddict'
		      (_cor8)
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'index_bs_start_match',2}}] )
	    -| ['compiler_generated'] )
	end
'index_bs_start_match_1'/3 =
    %% Line 185
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[I = {'test','bs_start_match2',_cor10,_cor11,_cor12,_cor13}|_cor14],Entry,Acc> when 'true' ->
	      %% Line 186
	      [{_cor1,[I|[]]}|_cor0]
	  %% Line 187
	  <[{'test',_cor15,{'f',F},_cor16}|[{'bs_context_to_binary',_cor17}|Is0]],Entry,Acc> when 'true' ->
	      let <_cor5> =
		  %% Line 188
		  fun (_cor3) ->
		      case _cor3 of
			<{'label',L}>
			    when call 'erlang':'=:='
				  (L,
				   F) ->
			    'false'
			%% Line 189
			<_cor18> when 'true' ->
			    'true'
		      end
	      in  let <_10824> =
		      %% Line 188
		      call 'lists':'dropwhile'
			  (_cor5, Is0)
		  in  %% Line 188
		      case _10824 of
			<[{'label',_cor19}|Is]>
			    when call 'erlang':'=:='
				  (_cor19,
				   F) ->
			    %% Line 191
			    apply 'index_bs_start_match_1'/3
				(Is, _cor1, _cor0)
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_10824})
			  -| ['compiler_generated'] )
		      end
	  %% Line 192
	  <_cor20,_cor21,Acc> when 'true' ->
	      _cor0
	end
'validate_0'/3 =
    %% Line 194
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Module,[],_cor14> when 'true' ->
	      []
	  %% Line 195
	  <Module,[{'function',Name,Ar,Entry,Code}|Fs],Ft> when 'true' ->
	      %% Line 196
	      try
		  let <_cor5> =
		      %% Line 304
		      apply 'labels_1'/2
			  (Code, [])
		  in  %% Line 255
		      apply 'validate_2'/5
			  (_cor5, Name, Ar, Entry, _cor0)
	      of <_cor3> ->
		  %% Line 197
		  apply 'validate_0'/3
		      (_cor2, Fs, _cor0)
	      catch <_cor7,_cor6,_cor5> ->
		  case <_cor7,_cor6,_cor5> of
		    %% Line 199
		    <'throw',Error,_cor16> when 'true' ->
			let <_cor8> =
			    %% Line 200
			    apply 'validate_0'/3
				(_cor2, Fs, _cor0)
			in  %% Line 200
			    [_cor6|_cor8]
		    %% Line 201
		    <'error',Error,_cor17> when 'true' ->
			let <_cor4> =
			    %% Line 214
			    call 'erlang':'get_stacktrace'
				()
			in  let <_cor9> = {%% Line 213
				 {_cor2,Name,Ar},%% Line 214
						 {'internal_error','_',{_cor6,_cor4}}}
			    in  let <_cor10> =
				    %% Line 202
				    apply 'validate_0'/3
					(_cor2, Fs, _cor0)
				in  %% Line 202
				    [_cor9|_cor10]
		    ( <_2383,_455,_7708> when 'true' ->
			  primop 'raise'
			      (_cor5, _cor6)
		      -| ['compiler_generated'] )
		  end
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'validate_0',3}}] )
	    -| ['compiler_generated'] )
	end
'validate_2'/5 =
    %% Line 257
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{Ls1,[_X_F = {'func_info',{'atom',Mod},{'atom',Name},Arity}|Is]},_cor16,_cor17,Entry,Ft>
	      when let <_cor18> =
		    call 'erlang':'=:='
			(_cor3, Name)
		in  let <_cor19> =
			call 'erlang':'=:='
			    (_cor2, Arity)
		    in  call 'erlang':'and'
			    (_cor18, _cor19) ->
	      let <_cor7> =
		  %% Line 259
		  fun (_cor5) ->
		      'ok'
	      in  do  %% Line 259
		      call 'lists':'foreach'
			  (_cor7, Ls1)
		      let <_cor8> =
			  %% Line 304
			  apply 'labels_1'/2
			      (Is, [])
		      in  %% Line 261
			  apply 'validate_3'/7
			      (_cor8, Name, Arity, _cor1, Mod, Ls1, _cor0)
	  %% Line 262
	  <{Ls1,Is},Name,Arity,_X_Entry,_X_Ft> when 'true' ->
	      let <_cor10> =
		  %% Line 300
		  case Is of
		    <[X|_1392]> when 'true' ->
			X
		    %% Line 301
		    <[]> when 'true' ->
			[]
		    ( <_454> when 'true' ->
			  primop 'match_fail'
			      ({'function_clause',Is})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor9> =
		      %% Line 263
		      call 'erlang':'length'
			  (Ls1)
		  in  let <_4836> = {%% Line 263
			   {'_',_cor3,_cor2},%% Line 263
					     {_cor10,_cor9,'illegal_instruction'}}
		      in  %% Line 1838
			  call 'erlang':'throw'
			      (_4836)
	  ( <_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'validate_2',5}}] )
	    -| ['compiler_generated'] )
	end
'validate_3'/7 =
    %% Line 265
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{Ls2,Is},Name,Arity,Entry,Mod,Ls1,Ft> when 'true' ->
	      let <_cor9> =
		  %% Line 266
		  fun (_cor7) ->
		      'ok'
	      in  do  %% Line 266
		      call 'lists':'foreach'
			  (_cor9, Ls2)
		      let <_cor11> =
			  %% Line 267
			  call 'erlang':'length'
			      (_cor1)
		      in  let <_cor12> =
			      %% Line 267
			      call 'erlang':'+'
				  (1, _cor11)
			  in  let <_cor13> =
				  %% Line 267
				  call 'erlang':'+'
				      (_cor12, 1)
			      in  let <_cor10> =
				      %% Line 267
				      call 'erlang':'length'
					  (Ls2)
				  in  let <Offset> =
					  %% Line 267
					  call 'erlang':'+'
					      (_cor13, _cor10)
				      in  let <_cor17> =
					      %% Line 268
					      ( case <> of
						  ( <>
							when call 'erlang':'=:='
							      (_cor3,
							       'undefined') ->
							'true'
						    -| ['compiler_generated'] )
						  ( <> when 'true' ->
							call 'lists':'member'
							    (_cor3, Ls2)
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					  in  %% Line 269
					      case <> of
						%% Line 270
						<>
						    when call 'erlang':'=:='
							  (_cor17,
							   'true') ->
						    let <St> =
							%% Line 271
							apply 'init_state'/1
							    (_cor4)
						    in  let <_cor26> =
							    %% Line 273
							    ( letrec
								  'lc$^0'/1 =
								      fun (_cor24) ->
									  case _cor24 of
									    <[L|_cor23]> when 'true' ->
										let <_cor25> =
										    apply 'lc$^0'/1
											(_cor23)
										in  ( [{L,St}|_cor25]
										      -| ['compiler_generated'] )
									    <[]> when 'true' ->
										[]
									    ( <_13241> when 'true' ->
										  ( primop 'match_fail'
											({'function_clause',_cor24})
										    -| [{'function_name',{'lc$^0',1}}] )
									      -| ['compiler_generated'] )
									  end
							      in  case _cor1 of
								    <[L|_cor23]> when 'true' ->
									let <_cor25> =
									    apply 'lc$^0'/1
										(_cor23)
									in  ( [{L,St}|_cor25]
									      -| ['compiler_generated'] )
								    <[]> when 'true' ->
									[]
								    ( <_13241> when 'true' ->
									  primop 'match_fail'
									      ({'function_clause',_cor1})
								      -| ['compiler_generated'] )
								  end
							      -| ['list_comprehension'] )
							in  let <_9687> =
								%% Line 1833
								call 'lists':'sort'
								    (_cor26)
							    in  let <_cor27> =
								    %% Line 1833
								    call 'gb_trees':'from_orddict'
									(_9687)
								in  let <_cor20> =
									%% Line 274
									call 'erlang':'++'
									    (_cor1, Ls2)
								    in  let <_cor21> =
									    %% Line 274
									    call 'gb_sets':'from_list'
										(_cor20)
									in  let <Vst0> =
										%% Line 272
										{'vst',St,_cor27,_cor21,_cor0}
									    in  let <MFA> = {_cor2,_cor5,_cor4}
										in  let <Vst> =
											%% Line 277
											apply 'valfun'/4
											    (Is, MFA, Offset, Vst0)
										    in  %% Line 278
											apply 'validate_fun_info_branches'/3
											    (_cor1, MFA, Vst)
						%% Line 279
						<> when 'true' ->
						    let <_cor31> =
							%% Line 300
							case Is of
							  <[X|_5039]> when 'true' ->
							      X
							  %% Line 301
							  <[]> when 'true' ->
							      []
							  ( <_1179> when 'true' ->
								primop 'match_fail'
								    ({'function_clause',Is})
							    -| ['compiler_generated'] )
							end
						    in  let <_9053> = {%% Line 280
							     {_cor2,_cor5,_cor4},%% Line 280
										 {_cor31,Offset,'no_entry_label'}}
							in  %% Line 1838
							    call 'erlang':'throw'
								(_9053)
					      end
	  ( <_cor38,_cor37,_cor36,_cor35,_cor34,_cor33,_cor32> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'validate_3',7}}] )
	    -| ['compiler_generated'] )
	end
'validate_fun_info_branches'/3 =
    %% Line 283
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[L|Ls],MFA,Vst0 = {'vst',_cor11,Branches,_cor12,_cor13}> when 'true' ->
	      let <_rec0> =
		  %% Line 284
		  call 'gb_trees':'get'
		      (L, Branches)
	      in  let <_cor6> =
		      %% Line 284
		      call 'erlang':'setelement'
			  (2, _cor0, _rec0)
		  in  do  %% Line 285
			  apply 'validate_fun_info_branches_1'/3
			      (0, _cor1, _cor6)
			  %% Line 286
			  apply 'validate_fun_info_branches'/3
			      (Ls, _cor1, _cor6)
	  %% Line 287
	  <[],_cor19,_cor20> when 'true' ->
	      'ok'
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'validate_fun_info_branches',3}}] )
	    -| ['compiler_generated'] )
	end
'validate_fun_info_branches_1'/3 =
    %% Line 289
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Arity,{_cor13,_cor14,_cor15},_cor16>
	      when call 'erlang':'=:='
		    (_cor15,
		     _cor2) ->
	      'ok'
	  %% Line 290
	  <X,MFA = {Mod,Name,Arity},Vst> when 'true' ->
	      do  %% Line 291
		  try
		      %% Line 292
		      apply 'get_term_type'/2
			  ({'x',_cor2}, _cor0)
		  of <_cor3> ->
		      'ok'
		  catch <_cor6,_cor5,_cor4> ->
		      case <_cor6,_cor5,_cor4> of
			%% Line 293
			<'throw',Error,_cor17> when 'true' ->
			    let <I> =
				%% Line 294
				{'func_info',{'atom',Mod},{'atom',Name},Arity}
			    in  let <_12732> = {_cor1,%% Line 296
					   {I,2,_cor5}}
				in  %% Line 1838
				    call 'erlang':'throw'
					(_12732)
			( <_7384,_1102,_2448> when 'true' ->
			      primop 'raise'
				  (_cor4, _cor5)
			  -| ['compiler_generated'] )
		      end
		  let <_cor9> =
		      %% Line 298
		      call 'erlang':'+'
			  (_cor2, 1)
		  in  %% Line 298
		      apply 'validate_fun_info_branches_1'/3
			  (_cor9, _cor1, _cor0)
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'validate_fun_info_branches_1',3}}] )
	    -| ['compiler_generated'] )
	end
'labels_1'/2 =
    %% Line 306
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'label',L}|Is],R> when 'true' ->
	      %% Line 307
	      apply 'labels_1'/2
		  (Is, [L|_cor0])
	  %% Line 308
	  <[{'line',_cor5}|Is],R> when 'true' ->
	      %% Line 309
	      apply 'labels_1'/2
		  (Is, _cor0)
	  %% Line 310
	  <Is,R> when 'true' ->
	      let <_cor2> =
		  %% Line 311
		  call 'lists':'reverse'
		      (_cor0)
	      in  %% Line 311
		  {_cor2,_cor1}
	end
'init_state'/1 =
    %% Line 313
    fun (_cor0) ->
	let <Xs> =
	    %% Line 314
	    apply 'init_regs'/2
		(_cor0, 'term')
	in  let <Ys> =
		%% Line 322
		call 'gb_trees':'empty'
		    ()
	    in  %% Line 316
		apply 'kill_heap_allocation'/1
		    ({'st',Xs,Ys,%% Line 1100
				 0,'none',0,0,'undefined',[],'undefined','undefined','false'})
'kill_heap_allocation'/1 =
    %% Line 318
    fun (_cor0) ->
	%% Line 319
	case _cor0 of
	  <{'st',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15}> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'setelement'
		      (7, _cor0, 0)
	      in  call 'erlang':'setelement'
		      (6, _cor2, 0)
	  ( <_cor16> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','st'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'init_regs'/2 =
    %% Line 321
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,_cor11> when 'true' ->
	      %% Line 322
	      call 'gb_trees':'empty'
		  ()
	  %% Line 323
	  <N,Type> when 'true' ->
	      let <_cor8> =
		  %% Line 324
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor6) ->
				case _cor6 of
				  <[R|_cor3]> when 'true' ->
				      let <_cor7> =
					  apply 'lc$^0'/1
					      (_cor3)
				      in  ( [{R,_cor0}|_cor7]
					    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_9788> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor6})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor4> =
			    call 'erlang':'-'
				(_cor1, 1)
			in  let <_cor5> =
				call 'lists':'seq'
				    (0, _cor4)
			    in  case _cor5 of
				  <[R|_cor3]> when 'true' ->
				      let <_cor7> =
					  apply 'lc$^0'/1
					      (_cor3)
				      in  ( [{R,_cor0}|_cor7]
					    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_9788> when 'true' ->
					primop 'match_fail'
					    ({'function_clause',_cor5})
				    -| ['compiler_generated'] )
				end
		    -| ['list_comprehension'] )
	      in  let <_12937> =
		      %% Line 1833
		      call 'lists':'sort'
			  (_cor8)
		  in  %% Line 1833
		      call 'gb_trees':'from_orddict'
			  (_12937)
	end
'valfun'/4 =
    %% Line 326
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],MFA,_X_Offset,Vst = {'vst',_cor19,Targets0,Labels0,_cor20}> when 'true' ->
	      let <Targets> =
		  %% Line 327
		  call 'gb_trees':'keys'
		      (Targets0)
	      in  let <Labels> =
		      %% Line 328
		      call 'gb_sets':'to_list'
			  (Labels0)
		  in  let <_13318> =
			  %% Line 329
			  call 'erlang':'--'
			      (Targets, Labels)
		      in  %% Line 329
			  case _13318 of
			    %% Line 330
			    <[]> when 'true' ->
				_cor0
			    %% Line 331
			    <Undef> when 'true' ->
				let <Error> = {%% Line 332
				     'undef_labels',_13318}
				in  let <_7584> = {_cor2,Error}
				    in  %% Line 1838
					call 'erlang':'throw'
					    (_7584)
			  end
	  %% Line 335
	  <[I|Is],MFA,Offset,Vst0> when 'true' ->
	      let <_cor14> =
		  %% Line 337
		  call 'erlang':'+'
		      (_cor1, 1)
	      in  let <_cor13> =
		      %% Line 338
		      try
			  let <Vst> =
			      %% Line 339
			      apply 'val_dsetel'/2
				  (I, _cor0)
			  in  %% Line 340
			      apply 'valfun_1'/2
				  (I, Vst)
		      of <_cor9> ->
			  _cor9
		      catch <_cor12,_cor11,_cor10> ->
			  case <_cor12,_cor11,_cor10> of
			    %% Line 341
			    <'throw',Error,_cor21> when 'true' ->
				let <_1230> = {_cor2,%% Line 342
					   {I,_cor1,_cor11}}
				in  %% Line 1838
				    call 'erlang':'throw'
					(_1230)
			    ( <_12882,_7271,_13218> when 'true' ->
				  primop 'raise'
				      (_cor10, _cor11)
			      -| ['compiler_generated'] )
			  end
		  in  %% Line 337
		      apply 'valfun'/4
			  (Is, _cor2, _cor14, _cor13)
	  ( <_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'valfun',4}}] )
	    -| ['compiler_generated'] )
	end
'valfun_1'/2 =
    %% Line 347
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'label',Lbl},Vst = {'vst',St0,B,Lbls,_cor108}> when 'true' ->
	      let <St> =
		  %% Line 348
		  apply 'merge_states'/3
		      (Lbl, St0, B)
	      in  let <_rec3> =
		      %% Line 349
		      call 'gb_trees':'enter'
			  (Lbl, St, B)
		  in  let <_rec4> =
			  %% Line 350
			  call 'gb_sets':'add'
			      (Lbl, Lbls)
		      in  %% Line 350
			  {'vst',St,_rec3,_rec4,_cor108}
	  %% Line 351
	  <_X_I,Vst = {'vst','none',_cor110,_cor111,_cor112}> when 'true' ->
	      _cor0
	  %% Line 356
	  <{'badmatch',Src},Vst> when 'true' ->
	      do  %% Line 1331
		  apply 'get_term_type'/2
		      (Src, _cor0)
		  %% Line 358
		  apply 'kill_state'/1
		      (_cor0)
	  %% Line 359
	  <{'case_end',Src},Vst> when 'true' ->
	      do  %% Line 1331
		  apply 'get_term_type'/2
		      (Src, _cor0)
		  %% Line 361
		  apply 'kill_state'/1
		      (_cor0)
	  %% Line 362
	  <'if_end',Vst> when 'true' ->
	      %% Line 363
	      apply 'kill_state'/1
		  (_cor0)
	  %% Line 364
	  <{'try_case_end',Src},Vst> when 'true' ->
	      do  %% Line 1331
		  apply 'get_term_type'/2
		      (Src, _cor0)
		  %% Line 366
		  apply 'kill_state'/1
		      (_cor0)
	  %% Line 368
	  <{'bs_context_to_binary',Ctx},Vst = {'vst',{'st',Xs,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122},_cor123,_cor124,_cor125}> when 'true' ->
	      %% Line 369
	      case Ctx of
		%% Line 370
		<{Tag,X}>
		    when let <_cor7> =
			  call 'erlang':'=:='
			      (Tag, 'x')
		      in  let <_cor8> =
			      call 'erlang':'=:='
				  (Tag, 'y')
			  in  call 'erlang':'or'
				  (_cor7, _cor8) ->
		    let <_13124> =
			%% Line 371
			call 'gb_trees':'lookup'
			    (X, Xs)
		    in  let <_cor10> =
			    %% Line 371
			    case _13124 of
			      %% Line 372
			      <{'value',{'match_context',_cor126,_cor127}}> when 'true' ->
				  'term'
			      %% Line 373
			      <_cor128> when 'true' ->
				  apply 'get_term_type'/2
				      (Ctx, _cor0)
			    end
			in  %% Line 375
			    apply 'set_type_reg'/3
				(_cor10, Ctx, _cor0)
		%% Line 376
		<_cor129> when 'true' ->
		    let <_10928> = {%% Line 377
			 'bad_source',Ctx}
		    in  %% Line 1838
			call 'erlang':'throw'
			    (_10928)
	      end
	  %% Line 379
	  <I = 'bs_init_writable',Vst> when 'true' ->
	      %% Line 380
	      apply 'call'/3
		  (_cor1, 1, _cor0)
	  %% Line 381
	  <{'move',Src = {'y',_cor130},Dst = {'y',_cor131}},Vst> when 'true' ->
	      let <_3930> =
		  %% Line 384
		  apply 'get_term_type_1'/2
		      (Src, _cor0)
	      in  %% Line 384
		  case _3930 of
		    %% Line 385
		    <{'catchtag',_cor132}> when 'true' ->
			let <_9153> = {'catchtag',Src}
			in  %% Line 1838
			    call 'erlang':'throw'
				(_9153)
		    %% Line 386
		    <{'trytag',_cor133}> when 'true' ->
			let <_7814> = {'trytag',Src}
			in  %% Line 1838
			    call 'erlang':'throw'
				(_7814)
		    %% Line 387
		    <Type> when 'true' ->
			apply 'set_type_reg'/3
			    (_3930, Dst, _cor0)
		  end
	  %% Line 389
	  <{'move',Src,Dst},Vst> when 'true' ->
	      let <Type> =
		  %% Line 390
		  apply 'get_move_term_type'/2
		      (Src, _cor0)
	      in  %% Line 391
		  apply 'set_type_reg'/3
		      (Type, Dst, _cor0)
	  %% Line 392
	  <{'fmove',Src,Dst = {'fr',_cor134}},Vst> when 'true' ->
	      do  %% Line 393
		  apply 'assert_type'/3
		      ('float', Src, _cor0)
		  %% Line 394
		  apply 'set_freg'/2
		      (Dst, _cor0)
	  %% Line 395
	  <{'fmove',Src = {'fr',_cor135},Dst},Vst0> when 'true' ->
	      do  do  %% Line 396
		      apply 'assert_freg_set'/2
			  (Src, _cor0)
		      %% Line 1098
		      case _cor0 of
			<{'vst',{'st',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,Fls,_cor8,_cor9,_cor10,_cor11},_cor12,_cor13,_cor14}>
			    when call 'erlang':'is_atom'
				  (Fls) ->
			    case Fls of
			      <_cor5>
				  when call 'erlang':'=:='
					(Fls,
					 'checked') ->
				  'ok'
			      <OtherFls> when 'true' ->
				  let <_3799> = {'bad_floating_point_state',Fls}
				  in  %% Line 1838
				      call 'erlang':'throw'
					  (_3799)
			    end
			( <_502> when 'true' ->
			      primop 'match_fail'
				  ({'function_clause',_cor0})
			  -| ['compiler_generated'] )
		      end
		  let <Vst> =
		      %% Line 398
		      apply 'eat_heap_float'/1
			  (_cor0)
		  in  %% Line 399
		      apply 'set_type_reg'/3
			  ({'float',[]}, Dst, Vst)
	  %% Line 400
	  <{'kill',Reg = {'y',_cor136}},Vst> when 'true' ->
	      %% Line 401
	      apply 'set_type_y'/3
		  ('initialized', Reg, _cor0)
	  %% Line 402
	  <{'init',Reg = {'y',_cor137}},Vst> when 'true' ->
	      %% Line 403
	      apply 'set_type_y'/3
		  ('initialized', Reg, _cor0)
	  %% Line 404
	  <{'test_heap',Heap,Live},Vst> when 'true' ->
	      %% Line 405
	      apply 'test_heap'/3
		  (Heap, Live, _cor0)
	  %% Line 406
	  <{'bif',_X_Op,'nofail',Src,Dst},Vst> when 'true' ->
	      do  %% Line 408
		  apply 'validate_src'/2
		      (Src, _cor0)
		  %% Line 409
		  apply 'set_type_reg'/3
		      ('term', Dst, _cor0)
	  %% Line 410
	  <I = {'bif',Op,{'f',_cor138},Src,Dst},Vst> when 'true' ->
	      let <_cor16> =
		  %% Line 411
		  call 'erlang':'length'
		      (Src)
	      in  let <_2277> =
		      %% Line 411
		      apply 'is_bif_safe'/2
			  (Op, _cor16)
		  in  %% Line 411
		      case _2277 of
			%% Line 412
			<'false'> when 'true' ->
			    %% Line 415
			    apply 'valfun_2'/2
				(_cor1, _cor0)
			%% Line 416
			<'true'> when 'true' ->
			    do  %% Line 419
				apply 'validate_src'/2
				    (Src, _cor0)
				let <Type> =
				    %% Line 420
				    apply 'bif_type'/3
					(Op, Src, _cor0)
				in  %% Line 421
				    apply 'set_type_reg'/3
					(Type, Dst, _cor0)
			( <_cor18> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_2277})
			  -| ['compiler_generated'] )
		      end
	  %% Line 424
	  <{'put_list',A,B,Dst},Vst0> when 'true' ->
	      do  do  %% Line 1331
		      apply 'get_term_type'/2
			  (A, _cor0)
		      %% Line 1331
		      apply 'get_term_type'/2
			  (B, _cor0)
		  let <Vst> =
		      %% Line 427
		      apply 'eat_heap'/2
			  (2, _cor0)
		  in  %% Line 428
		      apply 'set_type_reg'/3
			  ('cons', Dst, Vst)
	  %% Line 429
	  <{'put_tuple',Sz,Dst},Vst0>
	      when call 'erlang':'is_integer'
		    (Sz) ->
	      let <Vst> =
		  %% Line 430
		  apply 'eat_heap'/2
		      (1, _cor0)
	      in  %% Line 431
		  apply 'set_type_reg'/3
		      ({'tuple',Sz}, Dst, Vst)
	  %% Line 432
	  <{'put',Src},Vst> when 'true' ->
	      do  %% Line 1331
		  apply 'get_term_type'/2
		      (Src, _cor0)
		  %% Line 434
		  apply 'eat_heap'/2
		      (1, _cor0)
	  %% Line 435
	  <{'put_string',Sz,_cor139,Dst},Vst0>
	      when call 'erlang':'is_integer'
		    (Sz) ->
	      let <_cor21> =
		  %% Line 436
		  call 'erlang':'*'
		      (2, Sz)
	      in  let <Vst> =
		      %% Line 436
		      apply 'eat_heap'/2
			  (_cor21, _cor0)
		  in  %% Line 437
		      apply 'set_type_reg'/3
			  ('cons', Dst, Vst)
	  %% Line 439
	  <{'recv_mark',{'f',Fail}},Vst>
	      when call 'erlang':'is_integer'
		    (Fail) ->
	      _cor0
	  %% Line 441
	  <{'recv_set',{'f',Fail}},Vst>
	      when call 'erlang':'is_integer'
		    (Fail) ->
	      _cor0
	  %% Line 444
	  <{'%live',Live},Vst> when 'true' ->
	      do  %% Line 445
		  apply 'verify_live'/2
		      (Live, _cor0)
		  _cor0
	  %% Line 447
	  <'remove_message',Vst> when 'true' ->
	      _cor0
	  %% Line 449
	  <{'%',_cor140},Vst> when 'true' ->
	      _cor0
	  %% Line 451
	  <{'line',_cor141},Vst> when 'true' ->
	      _cor0
	  %% Line 454
	  <I = {'call_ext',Live,Func},Vst> when 'true' ->
	      %% Line 455
	      case apply 'return_type'/2
		       (Func, _cor0) of
		%% Line 456
		<'exception'> when 'true' ->
		    do  %% Line 457
			apply 'verify_live'/2
			    (Live, _cor0)
			%% Line 458
			apply 'kill_state'/1
			    (_cor0)
		%% Line 459
		<_cor142> when 'true' ->
		    %% Line 460
		    apply 'valfun_2'/2
			(_cor1, _cor0)
	      end
	  %% Line 462
	  <_X_I,{'vst',{'st',_cor143,_cor144,_cor145,_cor146,_cor147,_cor148,_cor149,'undecided',_cor150,_cor151,_cor152},_cor153,_cor154,_cor155}> when 'true' ->
	      %% Line 1838
	      call 'erlang':'throw'
		  ('unknown_catch_try_state')
	  %% Line 466
	  <{'allocate',Stk,Live},Vst> when 'true' ->
	      %% Line 467
	      apply 'allocate'/5
		  ('false', Stk, 0, Live, _cor0)
	  %% Line 468
	  <{'allocate_heap',Stk,Heap,Live},Vst> when 'true' ->
	      %% Line 469
	      apply 'allocate'/5
		  ('false', Stk, Heap, Live, _cor0)
	  %% Line 470
	  <{'allocate_zero',Stk,Live},Vst> when 'true' ->
	      %% Line 471
	      apply 'allocate'/5
		  ('true', Stk, 0, Live, _cor0)
	  %% Line 472
	  <{'allocate_heap_zero',Stk,Heap,Live},Vst> when 'true' ->
	      %% Line 473
	      apply 'allocate'/5
		  ('true', Stk, Heap, Live, _cor0)
	  %% Line 474
	  <{'deallocate',StkSize},Vst = {'vst',{'st',_cor156,_cor157,_cor158,_cor159,_cor160,_cor161,_cor162,_cor163,_cor164,_cor165,_cor166},_cor167,_cor168,_cor169}>
	      when call 'erlang':'=:='
		    (_cor159,
		     StkSize) ->
	      do  %% Line 475
		  apply 'verify_no_ct'/1
		      (_cor0)
		  %% Line 476
		  apply 'deallocate'/1
		      (_cor0)
	  %% Line 477
	  <{'deallocate',_cor170},{'vst',{'st',_cor171,_cor172,_cor173,NumY,_cor174,_cor175,_cor176,_cor177,_cor178,_cor179,_cor180},_cor181,_cor182,_cor183}> when 'true' ->
	      let <_111> = {%% Line 478
		   'allocated',NumY}
	      in  %% Line 1838
		  call 'erlang':'throw'
		      (_111)
	  %% Line 479
	  <{'trim',N,Remaining},Vst = {'vst',St = {'st',_cor184,Yregs0,_cor185,NumY,_cor186,_cor187,_cor188,_cor189,_cor190,_cor191,_cor192},_cor193,_cor194,_cor195}> when 'true' ->
	      %% Line 480
	      case <> of
		%% Line 481
		<>
		    when try
			  let <_cor24> =
			      call 'erlang':'=<'
				  (N, NumY)
			  in  let <_cor25> =
				  call 'erlang':'+'
				      (N, Remaining)
			      in  let <_cor26> =
				      call 'erlang':'=:='
					  (_cor25, NumY)
				  in  call 'erlang':'and'
					  (_cor24, _cor26)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <_cor33> =
			%% Line 482
			( letrec
			      'lc$^0'/1 =
				  fun (_cor30) ->
				      case _cor30 of
					<[{Y,Type}|_cor28]>
					    when call 'erlang':'>='
						  (Y,
						   N) ->
					    let <_cor31> =
						call 'erlang':'-'
						    (Y, N)
					    in  let <_cor32> =
						    apply 'lc$^0'/1
							(_cor28)
						in  ( [{_cor31,Type}|_cor32]
						      -| ['compiler_generated'] )
					( <[_cor27|_cor28]> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor28)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_4476> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor30})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  let <_cor29> =
				  call 'gb_trees':'to_list'
				      (Yregs0)
			      in  apply 'lc$^0'/1
				      (_cor29)
			  -| ['list_comprehension'] )
		    in  let <_1402> =
			    %% Line 1833
			    call 'lists':'sort'
				(_cor33)
			in  let <Yregs> =
				%% Line 1833
				call 'gb_trees':'from_orddict'
				    (_1402)
			    in  let <_rec12> =
				    %% Line 484
				    call 'erlang':'-'
					(NumY, N)
				in  let <_cor38> =
					%% Line 484
					call 'erlang':'setelement'
					    (5, St, _rec12)
				    in  let <_cor40> =
					    %% Line 484
					    call 'erlang':'setelement'
						(3, _cor38, Yregs)
					in  %% Line 484
					    call 'erlang':'setelement'
						(2, _cor0, _cor40)
		%% Line 485
		<> when 'true' ->
		    let <_11277> =
			%% Line 486
			{'trim',N,Remaining,'allocated',NumY}
		    in  %% Line 1838
			call 'erlang':'throw'
			    (_11277)
	      end
	  %% Line 489
	  <{'catch',Dst,{'f',Fail}},Vst0>
	      when call 'erlang':'=/='
		    (Fail,
		     'none') ->
	      let <_12139> =
		  %% Line 491
		  apply 'set_type_y'/3
		      ({'catchtag',[Fail|[]]}, Dst, _cor0)
	      in  %% Line 490
		  case _12139 of
		    <Vst = {'vst',St = {'st',_cor213,_cor214,_cor215,_cor216,_cor217,_cor218,_cor219,Fails,_cor220,_cor221,_cor222},_cor223,_cor224,_cor225}> when 'true' ->
			let <_rec16> =
			    %% Line 492
			    [[Fail|[]]|Fails]
			in  let <_cor48> =
				%% Line 492
				call 'erlang':'setelement'
				    (9, St, _rec16)
			    in  %% Line 492
				call 'erlang':'setelement'
				    (2, _12139, _cor48)
		    ( <_cor44> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_12139})
		      -| ['compiler_generated'] )
		  end
	  %% Line 493
	  <{'try',Dst,{'f',Fail}},Vst0> when 'true' ->
	      let <_8719> =
		  %% Line 495
		  apply 'set_type_y'/3
		      ({'trytag',[Fail|[]]}, Dst, _cor0)
	      in  %% Line 494
		  case _8719 of
		    <Vst = {'vst',St = {'st',_cor243,_cor244,_cor245,_cor246,_cor247,_cor248,_cor249,Fails,_cor250,_cor251,_cor252},_cor253,_cor254,_cor255}> when 'true' ->
			let <_rec20> =
			    %% Line 496
			    [[Fail|[]]|Fails]
			in  let <_cor56> =
				%% Line 496
				call 'erlang':'setelement'
				    (9, St, _rec20)
			    in  %% Line 496
				call 'erlang':'setelement'
				    (2, _8719, _cor56)
		    ( <_cor52> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_8719})
		      -| ['compiler_generated'] )
		  end
	  %% Line 497
	  <{'catch_end',Reg},Vst0 = {'vst',St0 = {'st',_cor273,_cor274,_cor275,_cor276,_cor277,_cor278,_cor279,[Fail|Fails],_cor280,_cor281,_cor282},_cor283,_cor284,_cor285}> when 'true' ->
	      %% Line 1465
	      case <Reg,_cor0> of
		<_4004 = {'y',_cor4},Vst> when 'true' ->
		    let <_5908> =
			apply 'get_term_type_1'/2
			    (Reg, _cor0)
		    in  case _5908 of
			  <{'catchtag',_cor286}>
			      when call 'erlang':'=:='
				    (_cor286,
				     Fail) ->
			      let <_cor62> =
				  call 'erlang':'setelement'
				      (9, St0, Fails)
			      in  let <_cor66> =
				      call 'erlang':'setelement'
					  (2, _cor0, _cor62)
				  in  let <_2255> =
					  apply 'set_type_y'/3
					      ('initialized_ct', Reg, _cor66)
				      in  case _2255 of
					    <Vst = {'vst',St,_cor304,_cor305,_cor306}> when 'true' ->
						let <_10164> =
						    %% Line 1833
						    call 'lists':'sort'
							([{0,'term'}])
						in  let <Xs> =
							%% Line 1833
							call 'gb_trees':'from_orddict'
							    (_10164)
						    in  case St of
							  <{'st',_cor307,_cor308,_cor309,_cor310,_cor311,_cor312,_cor313,_cor314,_cor315,_cor316,_cor317}> when 'true' ->
							      let <_cor70> =
								  call 'erlang':'setelement'
								      (8, St, 'undefined')
							      in  let <_cor72> =
								      call 'erlang':'setelement'
									  (2, _cor70, Xs)
								  in  call 'erlang':'setelement'
									  (2, _2255, _cor72)
							  ( <_cor318> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {'badrecord','st'}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
					    ( <_cor67> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_2255})
					      -| ['compiler_generated'] )
					  end
			  <Type> when 'true' ->
			      let <_5737> = {'bad_type',_5908}
			      in  %% Line 1838
				  call 'erlang':'throw'
				      (_5737)
			end
		%% Line 1466
		<Src,_cor5> when 'true' ->
		    let <_3724> = {'source_not_y_reg',Reg}
		    in  %% Line 1838
			call 'erlang':'throw'
			    (_3724)
	      end
	  %% Line 508
	  <{'try_end',Reg},Vst0 = {'vst',St = {'st',_cor324,_cor325,_cor326,_cor327,_cor328,_cor329,_cor330,[Fail|Fails],_cor331,_cor332,_cor333},_cor334,_cor335,_cor336}> when 'true' ->
	      %% Line 1465
	      case <Reg,_cor0> of
		<_8728 = {'y',_cor4},Vst> when 'true' ->
		    let <_4757> =
			apply 'get_term_type_1'/2
			    (Reg, _cor0)
		    in  case _4757 of
			  <{'trytag',_cor337}>
			      when call 'erlang':'=:='
				    (_cor337,
				     Fail) ->
			      let <_cor78> =
				  case Fail of
				    <[FailLabel|[]]> when 'true' ->
					apply 'branch_state'/2
					    (FailLabel, _cor0)
				    <_cor338> when 'true' ->
					_cor0
				  end
			      in  let <_cor81> =
				      call 'erlang':'setelement'
					  (9, St, Fails)
				  in  let <_cor83> =
					  call 'erlang':'setelement'
					      (8, _cor81, 'undefined')
				      in  case _cor78 of
					    <{'vst',_cor351,_cor352,_cor353,_cor354}> when 'true' ->
						let <_cor87> =
						    call 'erlang':'setelement'
							(2, _cor78, _cor83)
						in  apply 'set_type_reg'/3
							('initialized_ct', Reg, _cor87)
					    ( <_cor355> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','vst'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
			  <Type> when 'true' ->
			      let <_6228> = {'bad_type',_4757}
			      in  %% Line 1838
				  call 'erlang':'throw'
				      (_6228)
			end
		%% Line 1466
		<Src,_cor5> when 'true' ->
		    let <_3724> = {'source_not_y_reg',Reg}
		    in  %% Line 1838
			call 'erlang':'throw'
			    (_3724)
	      end
	  %% Line 520
	  <{'try_case',Reg},Vst0 = {'vst',St0 = {'st',_cor356,_cor357,_cor358,_cor359,_cor360,_cor361,_cor362,[Fail|Fails],_cor363,_cor364,_cor365},_cor366,_cor367,_cor368}> when 'true' ->
	      %% Line 1465
	      case <Reg,_cor0> of
		<_6750 = {'y',_cor4},Vst> when 'true' ->
		    let <_1083> =
			apply 'get_term_type_1'/2
			    (Reg, _cor0)
		    in  case _1083 of
			  <{'trytag',_cor369}>
			      when call 'erlang':'=:='
				    (_cor369,
				     Fail) ->
			      let <_cor91> =
				  call 'erlang':'setelement'
				      (9, St0, Fails)
			      in  let <_cor95> =
				      call 'erlang':'setelement'
					  (2, _cor0, _cor91)
				  in  let <_9765> =
					  apply 'set_type_y'/3
					      ('initialized_ct', Reg, _cor95)
				      in  case _9765 of
					    <Vst = {'vst',St,_cor387,_cor388,_cor389}> when 'true' ->
						let <_491> =
						    %% Line 1833
						    call 'lists':'sort'
							([{0,{'atom',[]}}|[{1,'term'}|[{2,'term'}]]])
						in  let <Xs> =
							%% Line 1833
							call 'gb_trees':'from_orddict'
							    (_491)
						    in  case St of
							  <{'st',_cor390,_cor391,_cor392,_cor393,_cor394,_cor395,_cor396,_cor397,_cor398,_cor399,_cor400}> when 'true' ->
							      let <_cor99> =
								  call 'erlang':'setelement'
								      (8, St, 'undefined')
							      in  let <_cor101> =
								      call 'erlang':'setelement'
									  (2, _cor99, Xs)
								  in  call 'erlang':'setelement'
									  (2, _9765, _cor101)
							  ( <_cor401> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {'badrecord','st'}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
					    ( <_cor96> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_9765})
					      -| ['compiler_generated'] )
					  end
			  <Type> when 'true' ->
			      let <_4696> = {'bad_type',_1083}
			      in  %% Line 1838
				  call 'erlang':'throw'
				      (_4696)
			end
		%% Line 1466
		<Src,_cor5> when 'true' ->
		    let <_3724> = {'source_not_y_reg',Reg}
		    in  %% Line 1838
			call 'erlang':'throw'
			    (_3724)
	      end
	  %% Line 531
	  <I,Vst> when 'true' ->
	      %% Line 532
	      apply 'valfun_2'/2
		  (_cor1, _cor0)
	end
'valfun_2'/2 =
    %% Line 535
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I,Vst = {'vst',{'st',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,[],_cor12,_cor13,_cor14},_cor15,_cor16,_cor17}> when 'true' ->
	      %% Line 536
	      apply 'valfun_3'/2
		  (_cor1, _cor0)
	  %% Line 537
	  <I,Vst = {'vst',{'st',_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,[[Fail|[]]|_cor25],_cor26,_cor27,_cor28},_cor29,_cor30,_cor31}>
	      when call 'erlang':'is_integer'
		    (Fail) ->
	      let <_cor2> =
		  %% Line 539
		  apply 'branch_state'/2
		      (Fail, _cor0)
	      in  %% Line 539
		  apply 'valfun_3'/2
		      (_cor1, _cor2)
	  %% Line 540
	  <_cor32,_cor33> when 'true' ->
	      %% Line 1838
	      call 'erlang':'throw'
		  ('ambiguous_catch_try_state')
	end
'valfun_3'/2 =
    %% Line 545
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'fconv',Src,Dst = {'fr',_cor6}},Vst> when 'true' ->
	      do  %% Line 1331
		  apply 'get_term_type'/2
		      (Src, _cor0)
		  %% Line 547
		  apply 'set_freg'/2
		      (Dst, _cor0)
	  %% Line 548
	  <{'bif','fadd',_cor7,Src = [_cor8|[_cor9|[]]],Dst},Vst> when 'true' ->
	      %% Line 549
	      apply 'float_op'/3
		  (Src, Dst, _cor0)
	  %% Line 550
	  <{'bif','fdiv',_cor10,Src = [_cor11|[_cor12|[]]],Dst},Vst> when 'true' ->
	      %% Line 551
	      apply 'float_op'/3
		  (Src, Dst, _cor0)
	  %% Line 552
	  <{'bif','fmul',_cor13,Src = [_cor14|[_cor15|[]]],Dst},Vst> when 'true' ->
	      %% Line 553
	      apply 'float_op'/3
		  (Src, Dst, _cor0)
	  %% Line 554
	  <{'bif','fnegate',_cor16,Src = [_cor17|[]],Dst},Vst> when 'true' ->
	      %% Line 555
	      apply 'float_op'/3
		  (Src, Dst, _cor0)
	  %% Line 556
	  <{'bif','fsub',_cor18,Src = [_cor19|[_cor20|[]]],Dst},Vst> when 'true' ->
	      %% Line 557
	      apply 'float_op'/3
		  (Src, Dst, _cor0)
	  %% Line 558
	  <'fclearerror',Vst> when 'true' ->
	      do  %% Line 1098
		  case _cor0 of
		    <{'vst',{'st',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,Fls,_cor8,_cor9,_cor10,_cor11},_cor12,_cor13,_cor14}>
			when call 'erlang':'is_atom'
			      (Fls) ->
			case Fls of
			  <'undefined'> when 'true' ->
			      'ok'
			  <'checked'> when 'true' ->
			      'ok'
			  <_fol1565> when 'true' ->
			      let <_8609> = {'bad_floating_point_state',Fls}
			      in  %% Line 1838
				  call 'erlang':'throw'
				      (_8609)
			end
		    ( <_979> when 'true' ->
			  primop 'match_fail'
			      ({'function_clause',_cor0})
		      -| ['compiler_generated'] )
		  end
		  %% Line 564
		  apply 'set_fls'/2
		      ('cleared', _cor0)
	  %% Line 565
	  <{'fcheckerror',_cor21},Vst> when 'true' ->
	      do  %% Line 1098
		  case _cor0 of
		    <{'vst',{'st',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,Fls,_cor8,_cor9,_cor10,_cor11},_cor12,_cor13,_cor14}>
			when call 'erlang':'is_atom'
			      (Fls) ->
			case Fls of
			  <_cor5>
			      when call 'erlang':'=:='
				    (Fls,
				     'cleared') ->
			      'ok'
			  <OtherFls> when 'true' ->
			      let <_3799> = {'bad_floating_point_state',Fls}
			      in  %% Line 1838
				  call 'erlang':'throw'
				      (_3799)
			end
		    ( <_2824> when 'true' ->
			  primop 'match_fail'
			      ({'function_clause',_cor0})
		      -| ['compiler_generated'] )
		  end
		  %% Line 567
		  apply 'set_fls'/2
		      ('checked', _cor0)
	  %% Line 568
	  <I,Vst> when 'true' ->
	      %% Line 1098
	      case _cor0 of
		<{'vst',{'st',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,Fls,_cor8,_cor9,_cor10,_cor11},_cor12,_cor13,_cor14}>
		    when call 'erlang':'is_atom'
			  (Fls) ->
		    case Fls of
		      <'undefined'> when 'true' ->
			  apply 'valfun_4'/2
			      (_cor1, _cor0)
		      <'checked'> when 'true' ->
			  apply 'valfun_4'/2
			      (_cor1, _cor0)
		      <_fol1566> when 'true' ->
			  let <_6380> = {'unsafe_instruction',{'float_error_state',Fls}}
			  in  %% Line 1838
			      call 'erlang':'throw'
				  (_6380)
		    end
		( <_3395> when 'true' ->
		      primop 'match_fail'
			  ({'function_clause',_cor0})
		  -| ['compiler_generated'] )
	      end
	end
'valfun_4'/2 =
    %% Line 580
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'apply',Live},Vst> when 'true' ->
	      let <_cor2> =
		  %% Line 581
		  call 'erlang':'+'
		      (Live, 2)
	      in  %% Line 581
		  apply 'call'/3
		      ('apply', _cor2, _cor0)
	  %% Line 582
	  <{'apply_last',Live,_cor96},Vst> when 'true' ->
	      let <_cor3> =
		  %% Line 583
		  call 'erlang':'+'
		      (Live, 2)
	      in  %% Line 583
		  apply 'tail_call'/3
		      ('apply', _cor3, _cor0)
	  %% Line 584
	  <{'call_fun',Live},Vst> when 'true' ->
	      do  %% Line 585
		  apply 'validate_src'/2
		      ([{'x',Live}|[]], _cor0)
		  let <_cor4> =
		      %% Line 586
		      call 'erlang':'+'
			  (Live, 1)
		  in  %% Line 586
		      apply 'call'/3
			  ('fun', _cor4, _cor0)
	  %% Line 587
	  <{'call',Live,Func},Vst> when 'true' ->
	      %% Line 588
	      apply 'call'/3
		  (Func, Live, _cor0)
	  %% Line 589
	  <{'call_ext',Live,Func},Vst> when 'true' ->
	      %% Line 591
	      apply 'call'/3
		  (Func, Live, _cor0)
	  %% Line 592
	  <{'call_only',Live,Func},Vst> when 'true' ->
	      %% Line 593
	      apply 'tail_call'/3
		  (Func, Live, _cor0)
	  %% Line 594
	  <{'call_ext_only',Live,Func},Vst> when 'true' ->
	      %% Line 595
	      apply 'tail_call'/3
		  (Func, Live, _cor0)
	  %% Line 596
	  <{'call_last',Live,Func,StkSize},Vst = {'vst',{'st',_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107},_cor108,_cor109,_cor110}>
	      when call 'erlang':'=:='
		    (_cor100,
		     StkSize) ->
	      %% Line 597
	      apply 'tail_call'/3
		  (Func, Live, _cor0)
	  %% Line 598
	  <{'call_last',_cor111,_cor112,_cor113},{'vst',{'st',_cor114,_cor115,_cor116,NumY,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123},_cor124,_cor125,_cor126}> when 'true' ->
	      let <_6280> = {%% Line 599
		   'allocated',NumY}
	      in  %% Line 1838
		  call 'erlang':'throw'
		      (_6280)
	  %% Line 600
	  <{'call_ext_last',Live,Func,StkSize},Vst = %% Line 601
						     {'vst',{'st',_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,_cor133,_cor134,_cor135,_cor136,_cor137},_cor138,_cor139,_cor140}>
	      when call 'erlang':'=:='
		    (_cor130,
		     StkSize) ->
	      %% Line 602
	      apply 'tail_call'/3
		  (Func, Live, _cor0)
	  %% Line 603
	  <{'call_ext_last',_cor141,_cor142,_cor143},{'vst',{'st',_cor144,_cor145,_cor146,NumY,_cor147,_cor148,_cor149,_cor150,_cor151,_cor152,_cor153},_cor154,_cor155,_cor156}> when 'true' ->
	      let <_4893> = {%% Line 604
		   'allocated',NumY}
	      in  %% Line 1838
		  call 'erlang':'throw'
		      (_4893)
	  %% Line 605
	  <{'make_fun',_cor157,_cor158,Live},Vst> when 'true' ->
	      %% Line 606
	      apply 'call'/3
		  ('fun', Live, _cor0)
	  %% Line 607
	  <{'make_fun2',_cor159,_cor160,_cor161,Live},Vst> when 'true' ->
	      %% Line 608
	      apply 'call'/3
		  ('make_fun', Live, _cor0)
	  %% Line 610
	  <{'bif','tuple_size',{'f',Fail},[Tuple|[]],Dst},Vst0> when 'true' ->
	      let <TupleType0> =
		  %% Line 611
		  apply 'get_term_type'/2
		      (Tuple, _cor0)
	      in  let <Vst1> =
		      %% Line 612
		      apply 'branch_state'/2
			  (Fail, _cor0)
		  in  let <TupleType> =
			  %% Line 613
			  apply 'upgrade_tuple_type'/2
			      ({'tuple',[0]}, TupleType0)
		      in  let <Vst> =
			      %% Line 614
			      apply 'set_type'/3
				  (TupleType, Tuple, Vst1)
			  in  %% Line 615
			      apply 'set_type_reg'/3
				  ({'integer',[]}, Dst, Vst)
	  %% Line 616
	  <{'bif','element',{'f',Fail},[Pos|[Tuple|[]]],Dst},Vst0> when 'true' ->
	      let <TupleType0> =
		  %% Line 617
		  apply 'get_term_type'/2
		      (Tuple, _cor0)
	      in  let <PosType> =
		      %% Line 618
		      apply 'get_term_type'/2
			  (Pos, _cor0)
		  in  let <Vst1> =
			  %% Line 619
			  apply 'branch_state'/2
			      (Fail, _cor0)
		      in  let <_cor12> =
			      %% Line 1430
			      case PosType of
				<{'integer',[]}> when 'true' ->
				    0
				%% Line 1431
				<{'integer',Sz}> when 'true' ->
				    Sz
				%% Line 1432
				<_cor2> when 'true' ->
				    0
			      end
			  in  let <TupleType> =
				  %% Line 620
				  apply 'upgrade_tuple_type'/2
				      ({'tuple',[_cor12|[]]}, TupleType0)
			      in  let <Vst> =
				      %% Line 621
				      apply 'set_type'/3
					  (TupleType, Tuple, Vst1)
				  in  %% Line 622
				      apply 'set_type_reg'/3
					  ('term', Dst, Vst)
	  %% Line 623
	  <{'raise',Fail = {'f',_cor162},Src,Dst},Vst> when 'true' ->
	      %% Line 624
	      apply 'valfun_4'/2
		  ({'bif','raise',Fail,Src,Dst}, _cor0)
	  %% Line 625
	  <{'bif',Op,{'f',Fail},Src,Dst},Vst0> when 'true' ->
	      do  %% Line 626
		  apply 'validate_src'/2
		      (Src, _cor0)
		  let <Vst> =
		      %% Line 627
		      apply 'branch_state'/2
			  (Fail, _cor0)
		  in  let <Type> =
			  %% Line 628
			  apply 'bif_type'/3
			      (Op, Src, Vst)
		      in  %% Line 629
			  apply 'set_type_reg'/3
			      (Type, Dst, Vst)
	  %% Line 630
	  <{'gc_bif',Op,{'f',Fail},Live,Src,Dst},Vst0 = {'vst',St0,_cor163,_cor164,_cor165}> when 'true' ->
	      let <St> =
		  %% Line 631
		  apply 'kill_heap_allocation'/1
		      (St0)
	      in  let <_cor20> =
		      %% Line 632
		      call 'erlang':'setelement'
			  (2, _cor0, St)
		  in  do  %% Line 633
			  apply 'verify_live'/2
			      (Live, _cor20)
			  let <Vst2> =
			      %% Line 634
			      apply 'branch_state'/2
				  (Fail, _cor20)
			  in  let <Vst> =
				  %% Line 635
				  apply 'prune_x_regs'/2
				      (Live, Vst2)
			      in  do  %% Line 636
				      apply 'validate_src'/2
					  (Src, Vst)
				      let <Type> =
					  %% Line 637
					  apply 'bif_type'/3
					      (Op, Src, Vst)
				      in  %% Line 638
					  apply 'set_type_reg'/3
					      (Type, Dst, Vst)
	  %% Line 639
	  <'return',Vst = {'vst',{'st',_cor171,_cor172,_cor173,'none',_cor174,_cor175,_cor176,_cor177,_cor178,_cor179,_cor180},_cor181,_cor182,_cor183}> when 'true' ->
	      do  %% Line 640
		  apply 'assert_term'/2
		      ({'x',0}, _cor0)
		  %% Line 641
		  apply 'kill_state'/1
		      (_cor0)
	  %% Line 642
	  <'return',{'vst',{'st',_cor184,_cor185,_cor186,NumY,_cor187,_cor188,_cor189,_cor190,_cor191,_cor192,_cor193},_cor194,_cor195,_cor196}> when 'true' ->
	      let <_11680> = {%% Line 643
		   'stack_frame',NumY}
	      in  %% Line 1838
		  call 'erlang':'throw'
		      (_11680)
	  %% Line 644
	  <{'jump',{'f',Lbl}},Vst> when 'true' ->
	      let <_cor25> =
		  %% Line 645
		  apply 'branch_state'/2
		      (Lbl, _cor0)
	      in  %% Line 645
		  apply 'kill_state'/1
		      (_cor25)
	  %% Line 646
	  <{'loop_rec',{'f',Fail},Dst},Vst0> when 'true' ->
	      let <Vst> =
		  %% Line 647
		  apply 'branch_state'/2
		      (Fail, _cor0)
	      in  %% Line 648
		  apply 'set_type_reg'/3
		      ('term', Dst, Vst)
	  %% Line 649
	  <{'wait',_cor197},Vst> when 'true' ->
	      %% Line 650
	      apply 'kill_state'/1
		  (_cor0)
	  %% Line 651
	  <{'wait_timeout',_cor198,Src},Vst> when 'true' ->
	      do  %% Line 1331
		  apply 'get_term_type'/2
		      (Src, _cor0)
		  _cor0
	  %% Line 654
	  <{'loop_rec_end',_cor199},Vst> when 'true' ->
	      %% Line 655
	      apply 'kill_state'/1
		  (_cor0)
	  %% Line 656
	  <'timeout',Vst = {'vst',St,_cor200,_cor201,_cor202}> when 'true' ->
	      let <_rec40> =
		  call 'gb_trees':'empty'
		      ()
	      in  %% Line 657
		  case St of
		    <{'st',_cor203,_cor204,_cor205,_cor206,_cor207,_cor208,_cor209,_cor210,_cor211,_cor212,_cor213}> when 'true' ->
			let <_cor30> =
			    call 'erlang':'setelement'
				(2, St, _rec40)
			in  call 'erlang':'setelement'
				(2, _cor0, _cor30)
		    ( <_cor214> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','st'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 658
	  <'send',Vst> when 'true' ->
	      %% Line 659
	      apply 'call'/3
		  ('send', 2, _cor0)
	  %% Line 660
	  <{'set_tuple_element',Src,Tuple,I},Vst> when 'true' ->
	      do  %% Line 1331
		  apply 'get_term_type'/2
		      (Src, _cor0)
		  let <_cor34> =
		      %% Line 662
		      call 'erlang':'+'
			  (I, 1)
		  in  do  %% Line 662
			  apply 'assert_type'/3
			      ({'tuple_element',_cor34}, Tuple, _cor0)
			  _cor0
	  %% Line 665
	  <{'select_val',Src,{'f',Fail},{'list',Choices}},Vst> when 'true' ->
	      do  %% Line 1331
		  apply 'get_term_type'/2
		      (Src, _cor0)
		  let <_cor39> =
		      %% Line 667
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor37) ->
				    case _cor37 of
				      <[{'f',L}|_cor36]> when 'true' ->
					  let <_cor38> =
					      apply 'lc$^0'/1
						  (_cor36)
					  in  ( [L|_cor38]
						-| ['compiler_generated'] )
				      ( <[_cor35|_cor36]> when 'true' ->
					    apply 'lc$^0'/1
						(_cor36)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  [Fail|[]]
				      ( <_11878> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor37})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(Choices)
			-| ['list_comprehension'] )
		  in  let <_cor45> =
			  %% Line 668
			  fun (_cor42,_cor41) ->
			      apply 'branch_state'/2
				  (_cor42, _cor41)
		      in  let <_cor46> =
			      %% Line 668
			      call 'lists':'foldl'
				  (_cor45, _cor0, _cor39)
			  in  %% Line 668
			      apply 'kill_state'/1
				  (_cor46)
	  %% Line 669
	  <{'select_tuple_arity',Tuple,{'f',Fail},{'list',Choices}},Vst> when 'true' ->
	      do  %% Line 670
		  apply 'assert_type'/3
		      ('tuple', Tuple, _cor0)
		  let <_cor47> =
		      %% Line 671
		      apply 'branch_state'/2
			  (Fail, _cor0)
		  in  let <_cor48> =
			  %% Line 671
			  apply 'branch_arities'/3
			      (Choices, Tuple, _cor47)
		      in  %% Line 671
			  apply 'kill_state'/1
			      (_cor48)
	  %% Line 672
	  <{'get_list',Src,D1,D2},Vst0> when 'true' ->
	      do  %% Line 673
		  apply 'assert_type'/3
		      ('cons', Src, _cor0)
		  let <Vst> =
		      %% Line 674
		      apply 'set_type_reg'/3
			  ('term', D1, _cor0)
		  in  %% Line 675
		      apply 'set_type_reg'/3
			  ('term', D2, Vst)
	  %% Line 676
	  <{'get_tuple_element',Src,I,Dst},Vst> when 'true' ->
	      let <_cor50> =
		  %% Line 677
		  call 'erlang':'+'
		      (I, 1)
	      in  do  %% Line 677
		      apply 'assert_type'/3
			  ({'tuple_element',_cor50}, Src, _cor0)
		      %% Line 678
		      apply 'set_type_reg'/3
			  ('term', Dst, _cor0)
	  %% Line 681
	  <{'test','bs_start_match2',{'f',Fail},Live,[Ctx|[NeedSlots|[]]],_cor220},Vst0>
	      when call 'erlang':'=:='
		    (_cor220,
		     Ctx) ->
	      let <_7572> =
		  %% Line 1442
		  apply 'get_term_type_1'/2
		      (Ctx, _cor0)
	      in  let <CtxType> =
		      %% Line 1442
		      case _7572 of
			%% Line 1443
			<'initialized'> when 'true' ->
			    let <_10284> = {'unassigned',Ctx}
			    in  %% Line 1838
				call 'erlang':'throw'
				    (_10284)
			%% Line 1444
			<{'catchtag',_cor5}> when 'true' ->
			    let <_9061> = {'catchtag',Ctx}
			    in  %% Line 1838
				call 'erlang':'throw'
				    (_9061)
			%% Line 1445
			<{'trytag',_cor6}> when 'true' ->
			    let <_2353> = {'trytag',Ctx}
			    in  %% Line 1838
				call 'erlang':'throw'
				    (_2353)
			%% Line 1446
			<Type> when 'true' ->
			    _7572
		      end
		  in  do  %% Line 685
			  apply 'verify_live'/2
			      (Live, _cor0)
			  let <Vst1> =
			      %% Line 686
			      apply 'prune_x_regs'/2
				  (Live, _cor0)
			  in  let <_cor54> =
				  %% Line 687
				  case CtxType of
				    %% Line 688
				    <{'match_context',_cor221,_cor222}> when 'true' ->
					%% Line 693
					apply 'set_type_reg'/3
					    ('term', Ctx, Vst1)
				    %% Line 694
				    <_cor223> when 'true' ->
					Vst1
				  end
			      in  let <Vst> =
				      %% Line 697
				      apply 'branch_state'/2
					  (Fail, _cor54)
				  in  let <_cor57> = {%% Line 1197
					   'match_context',%% Line 1197
							   0,NeedSlots}
				      in  %% Line 698
					  apply 'set_type_reg'/3
					      (_cor57, Ctx, Vst)
	  %% Line 699
	  <{'test','bs_start_match2',{'f',Fail},Live,[Src|[Slots|[]]],Dst},Vst0> when 'true' ->
	      do  do  %% Line 1331
		      apply 'get_term_type'/2
			  (Src, _cor0)
		      %% Line 701
		      apply 'verify_live'/2
			  (Live, _cor0)
		  let <Vst1> =
		      %% Line 702
		      apply 'prune_x_regs'/2
			  (Live, _cor0)
		  in  let <Vst> =
			  %% Line 703
			  apply 'branch_state'/2
			      (Fail, Vst1)
		      in  let <_cor60> = {%% Line 1197
			       'match_context',%% Line 1197
					       0,Slots}
			  in  %% Line 704
			      apply 'set_type_reg'/3
				  (_cor60, Dst, Vst)
	  %% Line 705
	  <{'test','bs_match_string',{'f',Fail},[Ctx|[_cor224|[_cor225|[]]]]},Vst> when 'true' ->
	      do  %% Line 1200
		  apply 'bsm_get_context'/2
		      (Ctx, _cor0)
		  %% Line 707
		  apply 'branch_state'/2
		      (Fail, _cor0)
	  %% Line 708
	  <{'test','bs_skip_bits2',{'f',Fail},[Ctx|[Src|[_cor226|[_cor227|[]]]]]},Vst> when 'true' ->
	      do  do  %% Line 1200
		      apply 'bsm_get_context'/2
			  (Ctx, _cor0)
		      %% Line 1331
		      apply 'get_term_type'/2
			  (Src, _cor0)
		  %% Line 711
		  apply 'branch_state'/2
		      (Fail, _cor0)
	  %% Line 712
	  <{'test','bs_test_tail2',{'f',Fail},[Ctx|[_cor228|[]]]},Vst> when 'true' ->
	      do  %% Line 1200
		  apply 'bsm_get_context'/2
		      (Ctx, _cor0)
		  %% Line 714
		  apply 'branch_state'/2
		      (Fail, _cor0)
	  %% Line 715
	  <{'test','bs_test_unit',{'f',Fail},[Ctx|[_cor229|[]]]},Vst> when 'true' ->
	      do  %% Line 1200
		  apply 'bsm_get_context'/2
		      (Ctx, _cor0)
		  %% Line 717
		  apply 'branch_state'/2
		      (Fail, _cor0)
	  %% Line 718
	  <{'test','bs_skip_utf8',{'f',Fail},[Ctx|[Live|[_cor230|[]]]]},Vst> when 'true' ->
	      %% Line 719
	      apply 'validate_bs_skip_utf'/4
		  (Fail, Ctx, Live, _cor0)
	  %% Line 720
	  <{'test','bs_skip_utf16',{'f',Fail},[Ctx|[Live|[_cor231|[]]]]},Vst> when 'true' ->
	      %% Line 721
	      apply 'validate_bs_skip_utf'/4
		  (Fail, Ctx, Live, _cor0)
	  %% Line 722
	  <{'test','bs_skip_utf32',{'f',Fail},[Ctx|[Live|[_cor232|[]]]]},Vst> when 'true' ->
	      %% Line 723
	      apply 'validate_bs_skip_utf'/4
		  (Fail, Ctx, Live, _cor0)
	  %% Line 724
	  <{'test','bs_get_integer2',{'f',Fail},Live,[Ctx|[_cor233|[_cor234|[_cor235|[]]]]],Dst},Vst> when 'true' ->
	      %% Line 725
	      apply 'validate_bs_get'/5
		  (Fail, Ctx, Live, Dst, _cor0)
	  %% Line 726
	  <{'test','bs_get_float2',{'f',Fail},Live,[Ctx|[_cor236|[_cor237|[_cor238|[]]]]],Dst},Vst> when 'true' ->
	      %% Line 727
	      apply 'validate_bs_get'/5
		  (Fail, Ctx, Live, Dst, _cor0)
	  %% Line 728
	  <{'test','bs_get_binary2',{'f',Fail},Live,[Ctx|[_cor239|[_cor240|[_cor241|[]]]]],Dst},Vst> when 'true' ->
	      %% Line 729
	      apply 'validate_bs_get'/5
		  (Fail, Ctx, Live, Dst, _cor0)
	  %% Line 730
	  <{'test','bs_get_utf8',{'f',Fail},Live,[Ctx|[_cor242|[]]],Dst},Vst> when 'true' ->
	      %% Line 731
	      apply 'validate_bs_get'/5
		  (Fail, Ctx, Live, Dst, _cor0)
	  %% Line 732
	  <{'test','bs_get_utf16',{'f',Fail},Live,[Ctx|[_cor243|[]]],Dst},Vst> when 'true' ->
	      %% Line 733
	      apply 'validate_bs_get'/5
		  (Fail, Ctx, Live, Dst, _cor0)
	  %% Line 734
	  <{'test','bs_get_utf32',{'f',Fail},Live,[Ctx|[_cor244|[]]],Dst},Vst> when 'true' ->
	      %% Line 735
	      apply 'validate_bs_get'/5
		  (Fail, Ctx, Live, Dst, _cor0)
	  %% Line 736
	  <{'bs_save2',Ctx,SavePoint},Vst> when 'true' ->
	      %% Line 737
	      apply 'bsm_save'/3
		  (Ctx, SavePoint, _cor0)
	  %% Line 738
	  <{'bs_restore2',Ctx,SavePoint},Vst> when 'true' ->
	      %% Line 739
	      apply 'bsm_restore'/3
		  (Ctx, SavePoint, _cor0)
	  %% Line 742
	  <{'bs_start_match',F = {'f',_X_Fail},Src},Vst> when 'true' ->
	      %% Line 743
	      apply 'valfun_4'/2
		  ({'test','bs_start_match',F,[Src|[]]}, _cor0)
	  %% Line 744
	  <{'test','bs_start_match',{'f',Fail},[Src|[]]},Vst> when 'true' ->
	      do  %% Line 1331
		  apply 'get_term_type'/2
		      (Src, _cor0)
		  let <_cor61> =
		      %% Line 746
		      apply 'branch_state'/2
			  (Fail, _cor0)
		  in  %% Line 746
		      apply 'bs_start_match'/1
			  (_cor61)
	  %% Line 748
	  <{'bs_save',SavePoint},Vst> when 'true' ->
	      do  %% Line 1187
		  case _cor0 of
		    <{'vst',{'st',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,'undefined',_cor10,_cor11},_cor12,_cor13,_cor14}> when 'true' ->
			%% Line 1838
			call 'erlang':'throw'
			    ('no_bs_match_state')
		    %% Line 1189
		    <_cor15> when 'true' ->
			'ok'
		  end
		  %% Line 750
		  apply 'bs_save'/2
		      (SavePoint, _cor0)
	  %% Line 751
	  <{'bs_restore',SavePoint},Vst> when 'true' ->
	      do  do  %% Line 1187
		      case _cor0 of
			<{'vst',{'st',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,'undefined',_cor10,_cor11},_cor12,_cor13,_cor14}> when 'true' ->
			    %% Line 1838
			    call 'erlang':'throw'
				('no_bs_match_state')
			%% Line 1189
			<_cor15> when 'true' ->
			    'ok'
		      end
		      %% Line 753
		      apply 'bs_assert_savepoint'/2
			  (SavePoint, _cor0)
		  _cor0
	  %% Line 755
	  <{'test','bs_skip_bits',{'f',Fail},[Src|[_cor245|[_cor246|[]]]]},Vst> when 'true' ->
	      do  do  %% Line 1187
		      case _cor0 of
			<{'vst',{'st',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,'undefined',_cor10,_cor11},_cor12,_cor13,_cor14}> when 'true' ->
			    %% Line 1838
			    call 'erlang':'throw'
				('no_bs_match_state')
			%% Line 1189
			<_cor15> when 'true' ->
			    'ok'
		      end
		      %% Line 1331
		      apply 'get_term_type'/2
			  (Src, _cor0)
		  %% Line 758
		  apply 'branch_state'/2
		      (Fail, _cor0)
	  %% Line 759
	  <{'test','bs_test_tail',{'f',Fail},_cor247},Vst> when 'true' ->
	      do  %% Line 1187
		  case _cor0 of
		    <{'vst',{'st',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,'undefined',_cor10,_cor11},_cor12,_cor13,_cor14}> when 'true' ->
			%% Line 1838
			call 'erlang':'throw'
			    ('no_bs_match_state')
		    %% Line 1189
		    <_cor15> when 'true' ->
			'ok'
		  end
		  %% Line 761
		  apply 'branch_state'/2
		      (Fail, _cor0)
	  %% Line 762
	  <{'test',_cor248,{'f',Fail},[_cor249|[_cor250|[_cor251|[Dst|[]]]]]},Vst0> when 'true' ->
	      do  %% Line 1187
		  case _cor0 of
		    <{'vst',{'st',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,'undefined',_cor10,_cor11},_cor12,_cor13,_cor14}> when 'true' ->
			%% Line 1838
			call 'erlang':'throw'
			    ('no_bs_match_state')
		    %% Line 1189
		    <_cor15> when 'true' ->
			'ok'
		  end
		  let <Vst> =
		      %% Line 764
		      apply 'branch_state'/2
			  (Fail, _cor0)
		  in  %% Line 765
		      apply 'set_type_reg'/3
			  ({'integer',[]}, Dst, Vst)
	  %% Line 768
	  <{'test','is_float',{'f',Lbl},[Float|[]]},Vst> when 'true' ->
	      do  %% Line 1331
		  apply 'get_term_type'/2
		      (Float, _cor0)
		  let <_cor63> =
		      %% Line 770
		      apply 'branch_state'/2
			  (Lbl, _cor0)
		  in  %% Line 770
		      apply 'set_type'/3
			  ({'float',[]}, Float, _cor63)
	  %% Line 771
	  <{'test','is_tuple',{'f',Lbl},[Tuple|[]]},Vst> when 'true' ->
	      let <Type0> =
		  %% Line 772
		  apply 'get_term_type'/2
		      (Tuple, _cor0)
	      in  let <Type> =
		      %% Line 773
		      apply 'upgrade_tuple_type'/2
			  ({'tuple',[0]}, Type0)
		  in  let <_cor66> =
			  %% Line 774
			  apply 'branch_state'/2
			      (Lbl, _cor0)
		      in  %% Line 774
			  apply 'set_type'/3
			      (Type, Tuple, _cor66)
	  %% Line 775
	  <{'test','is_nonempty_list',{'f',Lbl},[Cons|[]]},Vst> when 'true' ->
	      do  %% Line 1331
		  apply 'get_term_type'/2
		      (Cons, _cor0)
		  let <_cor67> =
		      %% Line 777
		      apply 'branch_state'/2
			  (Lbl, _cor0)
		  in  %% Line 777
		      apply 'set_type'/3
			  ('cons', Cons, _cor67)
	  %% Line 778
	  <{'test','test_arity',{'f',Lbl},[Tuple|[Sz|[]]]},Vst>
	      when call 'erlang':'is_integer'
		    (Sz) ->
	      do  %% Line 779
		  apply 'assert_type'/3
		      ('tuple', Tuple, _cor0)
		  let <_cor68> =
		      %% Line 780
		      apply 'branch_state'/2
			  (Lbl, _cor0)
		  in  %% Line 780
		      apply 'set_type_reg'/3
			  ({'tuple',Sz}, Tuple, _cor68)
	  %% Line 781
	  <{'test','has_map_fields',{'f',Lbl},Src,{'list',List}},Vst> when 'true' ->
	      do  do  %% Line 782
		      apply 'validate_src'/2
			  ([Src|[]], _cor0)
		      %% Line 783
		      apply 'assert_strict_literal_termorder'/1
			  (List)
		  %% Line 784
		  apply 'branch_state'/2
		      (Lbl, _cor0)
	  %% Line 785
	  <{'test',_X_Op,{'f',Lbl},Src},Vst> when 'true' ->
	      do  %% Line 786
		  apply 'validate_src'/2
		      (Src, _cor0)
		  %% Line 787
		  apply 'branch_state'/2
		      (Lbl, _cor0)
	  %% Line 788
	  <{'bs_add',{'f',Fail},[A|[B|[_cor252|[]]]],Dst},Vst> when 'true' ->
	      do  do  %% Line 1331
		      apply 'get_term_type'/2
			  (A, _cor0)
		      %% Line 1331
		      apply 'get_term_type'/2
			  (B, _cor0)
		  let <_cor69> =
		      %% Line 791
		      apply 'branch_state'/2
			  (Fail, _cor0)
		  in  %% Line 791
		      apply 'set_type_reg'/3
			  ({'integer',[]}, Dst, _cor69)
	  %% Line 792
	  <{'bs_utf8_size',{'f',Fail},A,Dst},Vst> when 'true' ->
	      do  %% Line 1331
		  apply 'get_term_type'/2
		      (A, _cor0)
		  let <_cor70> =
		      %% Line 794
		      apply 'branch_state'/2
			  (Fail, _cor0)
		  in  %% Line 794
		      apply 'set_type_reg'/3
			  ({'integer',[]}, Dst, _cor70)
	  %% Line 795
	  <{'bs_utf16_size',{'f',Fail},A,Dst},Vst> when 'true' ->
	      do  %% Line 1331
		  apply 'get_term_type'/2
		      (A, _cor0)
		  let <_cor71> =
		      %% Line 797
		      apply 'branch_state'/2
			  (Fail, _cor0)
		  in  %% Line 797
		      apply 'set_type_reg'/3
			  ({'integer',[]}, Dst, _cor71)
	  %% Line 798
	  <{'bs_bits_to_bytes',{'f',Fail},Src,Dst},Vst> when 'true' ->
	      do  %% Line 1331
		  apply 'get_term_type'/2
		      (Src, _cor0)
		  let <_cor72> =
		      %% Line 800
		      apply 'branch_state'/2
			  (Fail, _cor0)
		  in  %% Line 800
		      apply 'set_type_reg'/3
			  ({'integer',[]}, Dst, _cor72)
	  %% Line 801
	  <{'bs_init2',{'f',Fail},Sz,Heap,Live,_cor253,Dst},Vst0> when 'true' ->
	      do  do  %% Line 802
		      apply 'verify_live'/2
			  (Live, _cor0)
		      %% Line 803
		      case <> of
			%% Line 804
			<>
			    when call 'erlang':'is_integer'
				  (Sz) ->
			    'ok'
			%% Line 806
			<> when 'true' ->
			    do  %% Line 1331
				apply 'get_term_type'/2
				    (Sz, _cor0)
				'ok'
		      end
		  let <Vst1> =
		      %% Line 809
		      apply 'heap_alloc'/2
			  (Heap, _cor0)
		  in  let <Vst2> =
			  %% Line 810
			  apply 'branch_state'/2
			      (Fail, Vst1)
		      in  let <Vst3> =
			      %% Line 811
			      apply 'prune_x_regs'/2
				  (Live, Vst2)
			  in  let <Vst> =
				  %% Line 812
				  apply 'bs_zero_bits'/1
				      (Vst3)
			      in  %% Line 813
				  apply 'set_type_reg'/3
				      ('binary', Dst, Vst)
	  %% Line 814
	  <{'bs_init_bits',{'f',Fail},Sz,Heap,Live,_cor254,Dst},Vst0> when 'true' ->
	      do  do  %% Line 815
		      apply 'verify_live'/2
			  (Live, _cor0)
		      %% Line 816
		      case <> of
			%% Line 817
			<>
			    when call 'erlang':'is_integer'
				  (Sz) ->
			    'ok'
			%% Line 819
			<> when 'true' ->
			    do  %% Line 1331
				apply 'get_term_type'/2
				    (Sz, _cor0)
				'ok'
		      end
		  let <Vst1> =
		      %% Line 822
		      apply 'heap_alloc'/2
			  (Heap, _cor0)
		  in  let <Vst2> =
			  %% Line 823
			  apply 'branch_state'/2
			      (Fail, Vst1)
		      in  let <Vst3> =
			      %% Line 824
			      apply 'prune_x_regs'/2
				  (Live, Vst2)
			  in  let <Vst> =
				  %% Line 825
				  apply 'bs_zero_bits'/1
				      (Vst3)
			      in  %% Line 826
				  apply 'set_type_reg'/3
				      ('binary', Dst, Vst)
	  %% Line 827
	  <{'bs_append',{'f',Fail},Bits,Heap,Live,_X_Unit,Bin,_X_Flags,Dst},Vst0> when 'true' ->
	      do  do  %% Line 828
		      apply 'verify_live'/2
			  (Live, _cor0)
		      do  %% Line 1331
			  apply 'get_term_type'/2
			      (Bits, _cor0)
			  %% Line 1331
			  apply 'get_term_type'/2
			      (Bin, _cor0)
		  let <Vst1> =
		      %% Line 831
		      apply 'heap_alloc'/2
			  (Heap, _cor0)
		  in  let <Vst2> =
			  %% Line 832
			  apply 'branch_state'/2
			      (Fail, Vst1)
		      in  let <Vst3> =
			      %% Line 833
			      apply 'prune_x_regs'/2
				  (Live, Vst2)
			  in  let <Vst> =
				  %% Line 834
				  apply 'bs_zero_bits'/1
				      (Vst3)
			      in  %% Line 835
				  apply 'set_type_reg'/3
				      ('binary', Dst, Vst)
	  %% Line 836
	  <{'bs_private_append',{'f',Fail},Bits,_X_Unit,Bin,_X_Flags,Dst},Vst0> when 'true' ->
	      do  do  %% Line 1331
		      apply 'get_term_type'/2
			  (Bits, _cor0)
		      %% Line 1331
		      apply 'get_term_type'/2
			  (Bin, _cor0)
		  let <Vst1> =
		      %% Line 839
		      apply 'branch_state'/2
			  (Fail, _cor0)
		  in  let <Vst> =
			  %% Line 840
			  apply 'bs_zero_bits'/1
			      (Vst1)
		      in  %% Line 841
			  apply 'set_type_reg'/3
			      ('binary', Dst, Vst)
	  %% Line 842
	  <{'bs_put_string',Sz,_cor255},Vst>
	      when call 'erlang':'is_integer'
		    (Sz) ->
	      _cor0
	  %% Line 844
	  <I = {'bs_put_binary',{'f',Fail},Sz,_cor256,_cor257,Src},Vst0> when 'true' ->
	      do  do  %% Line 1331
		      apply 'get_term_type'/2
			  (Sz, _cor0)
		      %% Line 1331
		      apply 'get_term_type'/2
			  (Src, _cor0)
		  let <Vst> =
		      %% Line 847
		      apply 'bs_align_check'/2
			  (_cor1, _cor0)
		  in  %% Line 848
		      apply 'branch_state'/2
			  (Fail, Vst)
	  %% Line 849
	  <I = {'bs_put_float',{'f',Fail},Sz,_cor258,_cor259,Src},Vst0> when 'true' ->
	      do  do  %% Line 1331
		      apply 'get_term_type'/2
			  (Sz, _cor0)
		      %% Line 1331
		      apply 'get_term_type'/2
			  (Src, _cor0)
		  let <Vst> =
		      %% Line 852
		      apply 'bs_align_check'/2
			  (_cor1, _cor0)
		  in  %% Line 853
		      apply 'branch_state'/2
			  (Fail, Vst)
	  %% Line 854
	  <I = {'bs_put_integer',{'f',Fail},Sz,_cor260,_cor261,Src},Vst0> when 'true' ->
	      do  do  %% Line 1331
		      apply 'get_term_type'/2
			  (Sz, _cor0)
		      %% Line 1331
		      apply 'get_term_type'/2
			  (Src, _cor0)
		  let <Vst> =
		      %% Line 857
		      apply 'bs_align_check'/2
			  (_cor1, _cor0)
		  in  %% Line 858
		      apply 'branch_state'/2
			  (Fail, Vst)
	  %% Line 859
	  <I = {'bs_put_utf8',{'f',Fail},_cor262,Src},Vst0> when 'true' ->
	      do  %% Line 1331
		  apply 'get_term_type'/2
		      (Src, _cor0)
		  let <Vst> =
		      %% Line 861
		      apply 'bs_align_check'/2
			  (_cor1, _cor0)
		  in  %% Line 862
		      apply 'branch_state'/2
			  (Fail, Vst)
	  %% Line 863
	  <I = {'bs_put_utf16',{'f',Fail},_cor263,Src},Vst0> when 'true' ->
	      do  %% Line 1331
		  apply 'get_term_type'/2
		      (Src, _cor0)
		  let <Vst> =
		      %% Line 865
		      apply 'bs_align_check'/2
			  (_cor1, _cor0)
		  in  %% Line 866
		      apply 'branch_state'/2
			  (Fail, Vst)
	  %% Line 867
	  <I = {'bs_put_utf32',{'f',Fail},_cor264,Src},Vst0> when 'true' ->
	      do  %% Line 1331
		  apply 'get_term_type'/2
		      (Src, _cor0)
		  let <Vst> =
		      %% Line 869
		      apply 'bs_align_check'/2
			  (_cor1, _cor0)
		  in  %% Line 870
		      apply 'branch_state'/2
			  (Fail, Vst)
	  %% Line 872
	  <{'bs_init',_cor265,_cor266},Vst> when 'true' ->
	      %% Line 873
	      apply 'bs_zero_bits'/1
		  (_cor0)
	  %% Line 874
	  <{'bs_need_buf',_cor267},Vst> when 'true' ->
	      _cor0
	  %% Line 875
	  <{'bs_final',{'f',Fail},Dst},Vst0> when 'true' ->
	      let <Vst> =
		  %% Line 876
		  apply 'branch_state'/2
		      (Fail, _cor0)
	      in  %% Line 877
		  apply 'set_type_reg'/3
		      ('binary', Dst, Vst)
	  %% Line 878
	  <{'bs_final2',Src,Dst},Vst0> when 'true' ->
	      do  %% Line 1331
		  apply 'get_term_type'/2
		      (Src, _cor0)
		  %% Line 880
		  apply 'set_type_reg'/3
		      ('binary', Dst, _cor0)
	  %% Line 882
	  <{'put_map_assoc',{'f',Fail},Src,Dst,Live,{'list',List}},Vst> when 'true' ->
	      %% Line 883
	      apply 'verify_put_map'/6
		  (Fail, Src, Dst, Live, List, _cor0)
	  %% Line 884
	  <{'put_map_exact',{'f',Fail},Src,Dst,Live,{'list',List}},Vst> when 'true' ->
	      %% Line 885
	      apply 'verify_put_map'/6
		  (Fail, Src, Dst, Live, List, _cor0)
	  %% Line 886
	  <{'get_map_elements',{'f',Fail},Src,{'list',List}},Vst> when 'true' ->
	      %% Line 887
	      apply 'verify_get_map'/4
		  (Fail, Src, List, _cor0)
	  %% Line 888
	  <_cor268,_cor269> when 'true' ->
	      %% Line 1838
	      call 'erlang':'throw'
		  ('unknown_instruction')
	end
'verify_get_map'/4 =
    %% Line 891
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 1331
	    apply 'get_term_type'/2
		(_cor2, _cor0)
	    let <Vst1> =
		%% Line 893
		apply 'branch_state'/2
		    (_cor3, _cor0)
	    in  let <_cor9> =
		    %% Line 894
		    fun (_cor6,_cor5) ->
			[_cor6|[]]
		in  let <_9661> =
			%% Line 1139
			call 'erlang':'fun_info'
			    (_cor9, 'arity')
		    in  %% Line 1139
			case _9661 of
			  <{'arity',Ar}> when 'true' ->
			      let <Lits> =
				  %% Line 1140
				  apply 'mmap'/3
				      (_cor9, Ar, _cor1)
			      in  do  apply 'assert_strict_literal_termorder'/1
					  (Lits)
				      apply 'verify_get_map_pair'/3
					  (_cor1, _cor0, Vst1)
			  ( <_9887> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_9661})
			    -| ['compiler_generated'] )
			end
'verify_get_map_pair'/3 =
    %% Line 898
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_cor7,Vst> when 'true' ->
	      _cor0
	  %% Line 899
	  <[Src|[Dst|Vs]],Vst0,Vsti> when 'true' ->
	      do  %% Line 1331
		  apply 'get_term_type'/2
		      (Src, _cor1)
		  let <_cor3> =
		      %% Line 901
		      apply 'set_type_reg'/3
			  ('term', Dst, _cor0)
		  in  %% Line 901
		      apply 'verify_get_map_pair'/3
			  (Vs, _cor1, _cor3)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'verify_get_map_pair',3}}] )
	    -| ['compiler_generated'] )
	end
'verify_put_map'/6 =
    %% Line 903
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  do  %% Line 904
		apply 'verify_live'/2
		    (_cor2, _cor0)
		%% Line 905
		apply 'verify_y_init'/1
		    (_cor0)
	    let <_cor8> =
		%% Line 906
		fun (_cor6) ->
		    do  %% Line 1331
			apply 'get_term_type'/2
			    (_cor6, _cor0)
			%% Line 1332
			'ok'
	    in  do  do  %% Line 906
			call 'lists':'foreach'
			    (_cor8, _cor1)
			%% Line 1331
			apply 'get_term_type'/2
			    (_cor4, _cor0)
		    let <Vst1> =
			%% Line 908
			apply 'heap_alloc'/2
			    (0, _cor0)
		    in  let <Vst2> =
			    %% Line 909
			    apply 'branch_state'/2
				(_cor5, Vst1)
			in  let <Vst> =
				%% Line 910
				apply 'prune_x_regs'/2
				    (_cor2, Vst2)
			    in  %% Line 911
				apply 'set_type_reg'/3
				    ('term', _cor3, Vst)
'validate_bs_get'/5 =
    %% Line 916
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  do  %% Line 1200
		apply 'bsm_get_context'/2
		    (_cor3, _cor0)
		%% Line 918
		apply 'verify_live'/2
		    (_cor2, _cor0)
	    let <Vst1> =
		%% Line 919
		apply 'prune_x_regs'/2
		    (_cor2, _cor0)
	    in  let <Vst> =
		    %% Line 920
		    apply 'branch_state'/2
			(_cor4, Vst1)
		in  %% Line 921
		    apply 'set_type_reg'/3
			('term', _cor1, Vst)
'validate_bs_skip_utf'/4 =
    %% Line 926
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  do  %% Line 1200
		apply 'bsm_get_context'/2
		    (_cor2, _cor0)
		%% Line 928
		apply 'verify_live'/2
		    (_cor1, _cor0)
	    let <Vst> =
		%% Line 929
		apply 'prune_x_regs'/2
		    (_cor1, _cor0)
	    in  %% Line 930
		apply 'branch_state'/2
		    (_cor3, Vst)
'val_dsetel'/2 =
    %% Line 937
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'move',_cor16,_cor17},Vst> when 'true' ->
	      _cor0
	  %% Line 939
	  <{'put_string',0,{'string',[]},_cor18},Vst> when 'true' ->
	      _cor0
	  %% Line 942
	  <{'call_ext',3,{'extfunc','erlang','setelement',3}},Vst = {'vst',St,_cor19,_cor20,_cor21}> when 'true' ->
	      %% Line 943
	      case St of
		<{'st',_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32}> when 'true' ->
		    let <_cor4> =
			call 'erlang':'setelement'
			    (12, St, 'true')
		    in  call 'erlang':'setelement'
			    (2, _cor0, _cor4)
		( <_cor33> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','st'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 944
	  <{'set_tuple_element',_cor39,_cor40,_cor41},{'vst',{'st',_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,'false'},_cor52,_cor53,_cor54}> when 'true' ->
	      %% Line 1838
	      call 'erlang':'throw'
		  ('illegal_context_for_set_tuple_element')
	  %% Line 946
	  <{'set_tuple_element',_cor55,_cor56,_cor57},Vst = {'vst',{'st',_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,'true'},_cor68,_cor69,_cor70}> when 'true' ->
	      _cor0
	  %% Line 948
	  <{'line',_cor71},Vst> when 'true' ->
	      _cor0
	  %% Line 950
	  <_cor72,Vst = {'vst',St = {'st',_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,'true'},_cor83,_cor84,_cor85}> when 'true' ->
	      let <_cor10> =
		  %% Line 951
		  call 'erlang':'setelement'
		      (12, St, 'false')
	      in  %% Line 951
		  call 'erlang':'setelement'
		      (2, _cor0, _cor10)
	  %% Line 952
	  <_cor103,Vst> when 'true' ->
	      _cor0
	end
'kill_state'/1 =
    %% Line 954
    fun (_cor0) ->
	case _cor0 of
	  <Vst = {'vst',{'st',_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,[[Fail|[]]|_cor10],_cor11,_cor12,_cor13},_cor14,_cor15,_cor16}>
	      when call 'erlang':'is_integer'
		    (Fail) ->
	      let <_cor1> =
		  %% Line 958
		  apply 'branch_state'/2
		      (Fail, _cor0)
	      in  %% Line 963
		  case _cor1 of
		    <{'vst',_13810,_13903,_3530,_4569}> when 'true' ->
			call 'erlang':'setelement'
			    (2, _cor1, 'none')
		    ( <_12018> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','vst'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 959
	  <Vst> when 'true' ->
	      %% Line 963
	      case _cor0 of
		<{'vst',_cor4,_cor5,_cor6,_cor7}> when 'true' ->
		    call 'erlang':'setelement'
			(2, _cor0, 'none')
		( <_cor8> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','vst'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	end
'call'/3 =
    %% Line 968
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,Live,Vst = {'vst',St,_cor17,_cor18,_cor19}> when 'true' ->
	      do  do  %% Line 969
		      apply 'verify_live'/2
			  (_cor1, _cor0)
		      %% Line 970
		      apply 'verify_y_init'/1
			  (_cor0)
		  let <_9665> =
		      %% Line 971
		      apply 'return_type'/2
			  (_cor2, _cor0)
		  in  %% Line 971
		      case _9665 of
			%% Line 972
			<Type>
			    when call 'erlang':'=/='
				  (_9665,
				   'exception') ->
			    let <_5924> =
				%% Line 974
				[{0,_9665}|[]]
			    in  let <_719> =
				    %% Line 1833
				    call 'lists':'sort'
					(_5924)
				in  let <Xs> =
					%% Line 1833
					call 'gb_trees':'from_orddict'
					    (_719)
				    in  %% Line 975
					case St of
					  <{'st',_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30}> when 'true' ->
					      let <_cor6> =
						  call 'erlang':'setelement'
						      (10, St, 'undefined')
					      in  let <_cor7> =
						      call 'erlang':'setelement'
							  (4, _cor6, %% Line 1100
								     0)
						  in  let <_cor9> =
							  call 'erlang':'setelement'
							      (2, _cor7, Xs)
						      in  call 'erlang':'setelement'
							      (2, _cor0, _cor9)
					  ( <_cor31> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','st'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
			( <_cor13> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_9665})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'call',3}}] )
	    -| ['compiler_generated'] )
	end
'tail_call'/3 =
    %% Line 981
    fun (_cor2,_cor1,_cor0) ->
	do  do  %% Line 982
		apply 'verify_call_args'/3
		    (_cor2, _cor1, _cor0)
		do  %% Line 983
		    apply 'verify_y_init'/1
			(_cor0)
		    %% Line 984
		    apply 'verify_no_ct'/1
			(_cor0)
	    %% Line 985
	    apply 'kill_state'/1
		(_cor0)
'verify_call_args'/3 =
    %% Line 987
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_cor13,0,{'vst',_cor14,_cor15,_cor16,_cor17}> when 'true' ->
	      %% Line 988
	      'ok'
	  %% Line 989
	  <{'f',Lbl},Live,Vst>
	      when call 'erlang':'is_integer'
		    (_cor1) ->
	      let <Verify> =
		  %% Line 990
		  fun (_cor4) ->
		      %% Line 991
		      case apply 'get_move_term_type'/2
			       (_cor4, _cor0) of
			%% Line 992
			<{'match_context',_cor18,_cor19}> when 'true' ->
			    %% Line 993
			    apply 'verify_call_match_context'/2
				(Lbl, _cor0)
			%% Line 994
			<_cor20> when 'true' ->
			    %% Line 995
			    'ok'
		      end
	      in  %% Line 998
		  apply 'verify_call_args_1'/3
		      (_cor1, Verify, _cor0)
	  %% Line 999
	  <_cor21,Live,Vst>
	      when call 'erlang':'is_integer'
		    (_cor1) ->
	      let <Verify> =
		  %% Line 1000
		  fun (_cor7) ->
		      apply 'get_term_type'/2
			  (_cor7, _cor0)
	      in  %% Line 1001
		  apply 'verify_call_args_1'/3
		      (_cor1, Verify, _cor0)
	  %% Line 1002
	  <_cor22,Live,_cor23> when 'true' ->
	      let <_2811> = {%% Line 1003
		   'bad_number_of_live_regs',_cor1}
	      in  %% Line 1838
		  call 'erlang':'throw'
		      (_2811)
	end
'verify_call_args_1'/3 =
    %% Line 1005
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <0,_cor7,_cor8> when 'true' ->
	      'ok'
	  %% Line 1006
	  <N,Verify,Vst> when 'true' ->
	      let <X> =
		  %% Line 1007
		  call 'erlang':'-'
		      (_cor2, 1)
	      in  do  %% Line 1008
		      apply _cor1
			  ({'x',X})
		      %% Line 1009
		      apply 'verify_call_args_1'/3
			  (X, _cor1, _cor0)
	end
'verify_call_match_context'/2 =
    %% Line 1011
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Lbl,{'vst',_cor5,_cor6,_cor7,Ft}> when 'true' ->
	      let <_13100> =
		  %% Line 1012
		  call 'gb_trees':'lookup'
		      (_cor1, Ft)
	      in  %% Line 1012
		  case _13100 of
		    %% Line 1013
		    <'none'> when 'true' ->
			%% Line 1838
			call 'erlang':'throw'
			    ('no_bs_start_match2')
		    %% Line 1015
		    <{'value',[{'test','bs_start_match2',_cor8,_cor9,[Ctx|[_cor10|[]]],_cor11}|_cor12]}>
			when call 'erlang':'=:='
			      (_cor11,
			       Ctx) ->
			%% Line 1016
			'ok'
		    %% Line 1017
		    <{'value',[{'test','bs_start_match2',_cor13,_cor14,[Bin|[_cor15|[_cor16|[]]]],Ctx}|_cor17]}> when 'true' ->
			let <_13522> = {%% Line 1018
			     'binary_and_context_regs_different',Bin,Ctx}
			in  %% Line 1838
			    call 'erlang':'throw'
				(_13522)
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_13100})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'verify_call_match_context',2}}] )
	    -| ['compiler_generated'] )
	end
'allocate'/5 =
    %% Line 1021
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Zero,Stk,Heap,Live,Vst0 = {'vst',St = {'st',_cor22,_cor23,_cor24,'none',_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31},_cor32,_cor33,_cor34}> when 'true' ->
	      do  %% Line 1022
		  apply 'verify_live'/2
		      (_cor1, _cor0)
		  let <Vst> =
		      %% Line 1023
		      apply 'prune_x_regs'/2
			  (_cor1, _cor0)
		  in  let <_cor7> =
			  %% Line 1024
			  case _cor4 of
			    %% Line 1025
			    <'true'> when 'true' ->
				'initialized'
			    %% Line 1026
			    <'false'> when 'true' ->
				'uninitialized'
			    ( <_cor6> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor4})
			      -| ['compiler_generated'] )
			  end
		      in  let <Ys> =
			      %% Line 1024
			      apply 'init_regs'/2
				  (_cor3, _cor7)
			  in  let <_cor10> =
				  %% Line 1028
				  call 'erlang':'setelement'
				      (5, St, _cor3)
			      in  let <_cor12> =
				      %% Line 1028
				      call 'erlang':'setelement'
					  (3, _cor10, Ys)
				  in  %% Line 1028
				      case Vst of
					<{'vst',_cor47,_cor48,_cor49,_cor50}> when 'true' ->
					    let <_cor16> =
						call 'erlang':'setelement'
						    (2, Vst, _cor12)
					    in  apply 'heap_alloc'/2
						    (_cor2, _cor16)
					( <_cor51> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','vst'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
	  %% Line 1029
	  <_cor52,_cor53,_cor54,_cor55,{'vst',{'st',_cor56,_cor57,_cor58,Numy,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65},_cor66,_cor67,_cor68}> when 'true' ->
	      let <_1201> = {%% Line 1030
		   'existing_stack_frame',%% Line 1030
					  {'size',Numy}}
	      in  %% Line 1838
		  call 'erlang':'throw'
		      (_1201)
	  ( <_cor21,_cor20,_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'allocate',5}}] )
	    -| ['compiler_generated'] )
	end
'deallocate'/1 =
    %% Line 1032
    fun (_cor0) ->
	case _cor0 of
	  <Vst = {'vst',St,_cor11,_cor12,_cor13}> when 'true' ->
	      let <_rec58> =
		  call 'gb_trees':'empty'
		      ()
	      in  %% Line 1033
		  case St of
		    <{'st',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24}> when 'true' ->
			let <_cor3> =
			    call 'erlang':'setelement'
				(10, St, 'undefined')
			in  let <_cor4> =
				call 'erlang':'setelement'
				    (5, _cor3, 'none')
			    in  let <_cor6> =
				    call 'erlang':'setelement'
					(3, _cor4, _rec58)
				in  call 'erlang':'setelement'
					(2, _cor0, _cor6)
		    ( <_cor25> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','st'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  ( <_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'deallocate',1}}] )
	    -| ['compiler_generated'] )
	end
'test_heap'/3 =
    %% Line 1035
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 1036
	    apply 'verify_live'/2
		(_cor1, _cor0)
	    let <Vst> =
		%% Line 1037
		apply 'prune_x_regs'/2
		    (_cor1, _cor0)
	    in  %% Line 1038
		apply 'heap_alloc'/2
		    (_cor2, Vst)
'heap_alloc'/2 =
    %% Line 1040
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Heap,Vst = {'vst',St0,_cor11,_cor12,_cor13}> when 'true' ->
	      %% Line 1041
	      case St0 of
		<{'st',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24}> when 'true' ->
		    let <_cor4> =
			call 'erlang':'setelement'
			    (10, St0, 'undefined')
		    in  let <St1> =
			    apply 'kill_heap_allocation'/1
				(_cor4)
			in  let <St> =
				%% Line 1042
				apply 'heap_alloc_1'/2
				    (_cor1, St1)
			    in  %% Line 1043
				call 'erlang':'setelement'
				    (2, _cor0, St)
		( <_cor25> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','st'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'heap_alloc',2}}] )
	    -| ['compiler_generated'] )
	end
'heap_alloc_1'/2 =
    %% Line 1045
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'alloc',Alloc},St> when 'true' ->
	      %% Line 1046
	      apply 'heap_alloc_2'/2
		  (Alloc, _cor0)
	  %% Line 1047
	  <HeapWords,St>
	      when call 'erlang':'is_integer'
		    (_cor1) ->
	      %% Line 1048
	      case _cor0 of
		<{'st',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16}> when 'true' ->
		    call 'erlang':'setelement'
			(6, _cor0, _cor1)
		( <_cor17> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','st'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'heap_alloc_1',2}}] )
	    -| ['compiler_generated'] )
	end
'heap_alloc_2'/2 =
    %% Line 1050
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'words',HeapWords}|T],St0> when 'true' ->
	      %% Line 1051
	      case _cor0 of
		<{'st',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22}> when 'true' ->
		    let <_cor4> =
			call 'erlang':'setelement'
			    (6, _cor0, HeapWords)
		    in  %% Line 1052
			apply 'heap_alloc_2'/2
			    (T, _cor4)
		( <_cor23> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','st'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 1053
	  <[{'floats',Floats}|T],St0> when 'true' ->
	      %% Line 1054
	      case _cor0 of
		<{'st',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34}> when 'true' ->
		    let <_cor8> =
			call 'erlang':'setelement'
			    (7, _cor0, Floats)
		    in  %% Line 1055
			apply 'heap_alloc_2'/2
			    (T, _cor8)
		( <_cor35> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','st'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 1056
	  <[],St> when 'true' ->
	      _cor0
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'heap_alloc_2',2}}] )
	    -| ['compiler_generated'] )
	end
'prune_x_regs'/2 =
    %% Line 1058
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Live,Vst = {'vst',St0 = {'st',Xs0,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27},_cor28,_cor29,_cor30}>
	      when call 'erlang':'is_integer'
		    (_cor1) ->
	      let <Xs1> =
		  %% Line 1059
		  call 'gb_trees':'to_list'
		      (Xs0)
	      in  let <_cor7> =
		      %% Line 1060
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor5) ->
				    case _cor5 of
				      <[P = {R,_cor31}|_cor4]>
					  when call 'erlang':'<'
						(R,
						 _cor1) ->
					  let <_cor6> =
					      apply 'lc$^0'/1
						  (_cor4)
					  in  ( [P|_cor6]
						-| ['compiler_generated'] )
				      ( <[_cor3|_cor4]> when 'true' ->
					    apply 'lc$^0'/1
						(_cor4)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_6946> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor5})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(Xs1)
			-| ['list_comprehension'] )
		  in  let <_rec65> =
			  %% Line 1061
			  call 'gb_trees':'from_orddict'
			      (_cor7)
		      in  let <_cor12> =
			      %% Line 1061
			      call 'erlang':'setelement'
				  (2, St0, _rec65)
			  in  %% Line 1062
			      call 'erlang':'setelement'
				  (2, _cor0, _cor12)
	  ( <_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'prune_x_regs',2}}] )
	    -| ['compiler_generated'] )
	end
'float_op'/3 =
    %% Line 1083
    fun (_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 1084
	    fun (_cor3) ->
		apply 'assert_freg_set'/2
		    (_cor3, _cor0)
	in  do  do  %% Line 1084
		    call 'lists':'foreach'
			(_cor5, _cor2)
		    %% Line 1098
		    case _cor0 of
		      <{'vst',{'st',_13029,_cor3,_cor4,_3699,_cor6,_cor7,Fls,_cor8,_cor9,_cor10,_cor11},_cor12,_cor13,_cor14}>
			  when call 'erlang':'is_atom'
				(Fls) ->
			  case Fls of
			    <_3505>
				when call 'erlang':'=:='
				      (Fls,
				       'cleared') ->
				'ok'
			    <OtherFls> when 'true' ->
				let <_3799> = {'bad_floating_point_state',Fls}
				in  %% Line 1838
				    call 'erlang':'throw'
					(_3799)
			  end
		      ( <_4928> when 'true' ->
			    primop 'match_fail'
				({'function_clause',_cor0})
			-| ['compiler_generated'] )
		    end
		let <Vst> =
		    %% Line 1086
		    apply 'set_fls'/2
			('cleared', _cor0)
		in  %% Line 1087
		    apply 'set_freg'/2
			(_cor1, Vst)
'set_fls'/2 =
    %% Line 1095
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Fls,Vst = {'vst',St = {'st',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20},_cor21,_cor22,_cor23}>
	      when call 'erlang':'is_atom'
		    (_cor1) ->
	      let <_cor4> =
		  %% Line 1096
		  call 'erlang':'setelement'
		      (8, St, _cor1)
	      in  %% Line 1096
		  call 'erlang':'setelement'
		      (2, _cor0, _cor4)
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'set_fls',2}}] )
	    -| ['compiler_generated'] )
	end
'get_fls'/1 =
    %% Line 1098
    fun (_cor0) ->
	case _cor0 of
	  <{'vst',{'st',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,Fls,_cor8,_cor9,_cor10,_cor11},_cor12,_cor13,_cor14}>
	      when call 'erlang':'is_atom'
		    (Fls) ->
	      Fls
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'get_fls',1}}] )
	    -| ['compiler_generated'] )
	end
'set_freg'/2 =
    %% Line 1102
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'fr',Fr},Vst = {'vst',St = {'st',_cor15,_cor16,Fregs0,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24},_cor25,_cor26,_cor27}>
	      when let <_cor2> =
		    %% Line 1103
		    call 'erlang':'is_integer'
			(Fr)
		in  let <_cor3> =
			%% Line 1103
			call 'erlang':'=<'
			    (0, Fr)
		    in  %% Line 1103
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      do  %% Line 1826
		  case Fr of
		    <Num>
			when let <_8093> =
			      call 'erlang':'is_integer'
				  (Fr)
			  in  let <_cor2> =
				  call 'erlang':'>='
				      (Fr, 1024)
			      in  call 'erlang':'and'
				      (_8093, _cor2) ->
			%% Line 1838
			call 'erlang':'throw'
			    ('limit')
		    %% Line 1828
		    <_cor4> when 'true' ->
			'ok'
		  end
		  let <Bit> =
		      %% Line 1105
		      call 'erlang':'bsl'
			  (1, Fr)
		  in  %% Line 1106
		      case <> of
			%% Line 1107
			<>
			    when try
				  let <_cor5> =
				      call 'erlang':'band'
					  (Fregs0, Bit)
				  in  call 'erlang':'=:='
					  (_cor5, 0)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    let <Fregs> =
				%% Line 1108
				call 'erlang':'bor'
				    (Fregs0, Bit)
			    in  let <_cor9> =
				    %% Line 1109
				    call 'erlang':'setelement'
					(4, St, Fregs)
				in  %% Line 1109
				    call 'erlang':'setelement'
					(2, _cor0, _cor9)
			%% Line 1110
			<> when 'true' ->
			    _cor0
		      end
	  %% Line 1112
	  <Fr,_cor45> when 'true' ->
	      let <_8608> = {'bad_target',_cor1}
	      in  %% Line 1838
		  call 'erlang':'throw'
		      (_8608)
	end
'assert_freg_set'/2 =
    %% Line 1114
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Freg = {'fr',Fr},{'vst',{'st',_cor8,_cor9,Fregs,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17},_cor18,_cor19,_cor20}>
	      when let <_cor2> =
		    %% Line 1115
		    call 'erlang':'is_integer'
			(Fr)
		in  let <_cor3> =
			%% Line 1115
			call 'erlang':'=<'
			    (0, Fr)
		    in  %% Line 1115
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 1116
	      case <> of
		%% Line 1117
		<>
		    when try
			  let <_cor4> =
			      call 'erlang':'bsl'
				  (1, Fr)
			  in  let <_cor5> =
				  call 'erlang':'band'
				      (Fregs, _cor4)
			      in  call 'erlang':'=/='
				      (_cor5, 0)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 1826
		    case Fr of
		      <Num>
			  when let <_10552> =
				call 'erlang':'is_integer'
				    (Fr)
			    in  let <_cor2> =
				    call 'erlang':'>='
					(Fr, 1024)
				in  call 'erlang':'and'
					(_10552, _cor2) ->
			  %% Line 1838
			  call 'erlang':'throw'
			      ('limit')
		      %% Line 1828
		      <_cor4> when 'true' ->
			  'ok'
		    end
		%% Line 1119
		<> when 'true' ->
		    let <_3148> = {'uninitialized_reg',_cor1}
		    in  %% Line 1838
			call 'erlang':'throw'
			    (_3148)
	      end
	  %% Line 1121
	  <Fr,_cor21> when 'true' ->
	      let <_11941> = {'bad_source',_cor1}
	      in  %% Line 1838
		  call 'erlang':'throw'
		      (_11941)
	end
'assert_strict_literal_termorder'/1 =
    %% Line 1127
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 1128
	    fun (_cor1) ->
		apply 'get_literal'/1
		    (_cor1)
	in  let <Vs> =
		%% Line 1128
		call 'lists':'map'
		    (_cor3, _cor0)
	    in  let <_1652> =
		    %% Line 1129
		    apply 'check_strict_value_termorder'/1
			(Vs)
		in  %% Line 1129
		    case _1652 of
		      %% Line 1130
		      <'true'> when 'true' ->
			  'ok'
		      %% Line 1131
		      <'false'> when 'true' ->
			  let <_9786> = {'not_strict_order',_cor0}
			  in  %% Line 1838
			      call 'erlang':'throw'
				  (_9786)
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_1652})
			-| ['compiler_generated'] )
		    end
'mmap'/3 =
    %% Line 1141
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_F,_cor9,[]> when 'true' ->
	      []
	  %% Line 1142
	  <F,Ar,List> when 'true' ->
	      let <_12619> =
		  %% Line 1143
		  call 'lists':'split'
		      (_cor1, _cor0)
	      in  %% Line 1143
		  case _12619 of
		    <{Hd,Tl}> when 'true' ->
			let <_cor5> =
			    %% Line 1144
			    call 'erlang':'apply'
				(_cor2, Hd)
			in  let <_cor4> =
				%% Line 1144
				apply 'mmap'/3
				    (_cor2, _cor1, Tl)
			    in  %% Line 1144
				call 'erlang':'++'
				    (_cor5, _cor4)
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_12619})
		      -| ['compiler_generated'] )
		  end
	end
'check_strict_value_termorder'/1 =
    %% Line 1146
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      'true'
	  %% Line 1147
	  <[_cor5|[]]> when 'true' ->
	      'true'
	  %% Line 1148
	  <[V1|[V2|[]]]> when 'true' ->
	      let <_cor1> =
		  %% Line 1149
		  call 'erts_internal':'cmp_term'
		      (V1, V2)
	      in  %% Line 1149
		  call 'erlang':'<'
		      (_cor1, 0)
	  %% Line 1150
	  <[V1|[V2|Vs]]> when 'true' ->
	      let <_cor2> =
		  %% Line 1151
		  call 'erts_internal':'cmp_term'
		      (V1, V2)
	      in  %% Line 1151
		  case <> of
		    %% Line 1152
		    <>
			when call 'erlang':'<'
			      (_cor2,
			       0) ->
			apply 'check_strict_value_termorder'/1
			    ([V2|Vs])
		    %% Line 1153
		    <> when 'true' ->
			'false'
		  end
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'check_strict_value_termorder',1}}] )
	    -| ['compiler_generated'] )
	end
'bs_start_match'/1 =
    %% Line 1169
    fun (_cor0) ->
	case _cor0 of
	  <Vst = {'vst',St = {'st',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,'undefined',_cor17,_cor18},_cor19,_cor20,_cor21}> when 'true' ->
	      let <_rec76> =
		  %% Line 1170
		  call 'gb_sets':'empty'
		      ()
	      in  let <_cor4> =
		      %% Line 1170
		      call 'erlang':'setelement'
			  (10, St, _rec76)
		  in  %% Line 1170
		      call 'erlang':'setelement'
			  (2, _cor0, _cor4)
	  %% Line 1171
	  <Vst> when 'true' ->
	      _cor0
	end
'bs_save'/2 =
    %% Line 1176
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Reg,Vst = {'vst',St = {'st',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,Saved,_cor21,_cor22},_cor23,_cor24,_cor25}>
	      when let <_cor2> =
		    %% Line 1177
		    call 'erlang':'is_integer'
			(_cor1)
		in  let <_cor3> =
			%% Line 1177
			call 'erlang':'<'
			    (_cor1, 1024)
		    in  %% Line 1177
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_rec80> =
		  %% Line 1178
		  call 'gb_sets':'add'
		      (_cor1, Saved)
	      in  let <_cor7> =
		      %% Line 1178
		      call 'erlang':'setelement'
			  (10, St, _rec80)
		  in  %% Line 1178
		      call 'erlang':'setelement'
			  (2, _cor0, _cor7)
	  %% Line 1179
	  <_cor43,_cor44> when 'true' ->
	      %% Line 1838
	      call 'erlang':'throw'
		  ('limit')
	end
'bs_assert_savepoint'/2 =
    %% Line 1181
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Reg,{'vst',{'st',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,Saved,_cor13,_cor14},_cor15,_cor16,_cor17}> when 'true' ->
	      let <_4604> =
		  %% Line 1182
		  call 'gb_sets':'is_member'
		      (_cor1, Saved)
	      in  %% Line 1182
		  case _4604 of
		    %% Line 1183
		    <'false'> when 'true' ->
			let <_9297> = {'no_save_point',_cor1}
			in  %% Line 1838
			    call 'erlang':'throw'
				(_9297)
		    %% Line 1184
		    <'true'> when 'true' ->
			'ok'
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_4604})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'bs_assert_savepoint',2}}] )
	    -| ['compiler_generated'] )
	end
'bsm_get_context'/2 =
    %% Line 1203
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Reg = {'x',X},_X_Vst = {'vst',{'st',Xs,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14},_cor15,_cor16,_cor17}>
	      when call 'erlang':'is_integer'
		    (X) ->
	      %% Line 1204
	      case call 'gb_trees':'lookup'
		       (X, Xs) of
		%% Line 1205
		<{'value',Ctx = {'match_context',_cor18,_cor19}}> when 'true' ->
		    Ctx
		%% Line 1206
		<_cor20> when 'true' ->
		    let <_7345> = {'no_bsm_context',_cor1}
		    in  %% Line 1838
			call 'erlang':'throw'
			    (_7345)
	      end
	  %% Line 1208
	  <Reg,_cor21> when 'true' ->
	      let <_12766> = {'bad_source',_cor1}
	      in  %% Line 1838
		  call 'erlang':'throw'
		      (_12766)
	end
'bsm_save'/3 =
    %% Line 1210
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Reg,{'atom','start'},Vst> when 'true' ->
	      do  apply 'bsm_get_context'/2
		      (_cor2, _cor0)
		  _cor0
	  %% Line 1215
	  <Reg,SavePoint,Vst> when 'true' ->
	      %% Line 1216
	      case apply 'bsm_get_context'/2
		       (_cor2, _cor0) of
		%% Line 1217
		<{'match_context',Bits,Slots}>
		    when call 'erlang':'<'
			  (_cor1,
			   Slots) ->
		    let <_cor3> =
			%% Line 1218
			call 'erlang':'bsl'
			    (1, _cor1)
		    in  let <_cor4> =
			    %% Line 1218
			    call 'erlang':'bor'
				(Bits, _cor3)
			in  let <Ctx> = {%% Line 1218
				 'match_context',_cor4,Slots}
			    in  %% Line 1219
				apply 'set_type_reg'/3
				    (Ctx, _cor2, _cor0)
		%% Line 1220
		<_cor10> when 'true' ->
		    let <_11042> = {'illegal_save',_cor1}
		    in  %% Line 1838
			call 'erlang':'throw'
			    (_11042)
	      end
	end
'bsm_restore'/3 =
    %% Line 1223
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Reg,{'atom','start'},Vst> when 'true' ->
	      do  apply 'bsm_get_context'/2
		      (_cor2, _cor0)
		  _cor0
	  %% Line 1228
	  <Reg,SavePoint,Vst> when 'true' ->
	      %% Line 1229
	      case apply 'bsm_get_context'/2
		       (_cor2, _cor0) of
		%% Line 1230
		<{'match_context',Bits,Slots}>
		    when call 'erlang':'<'
			  (_cor1,
			   Slots) ->
		    let <_cor3> =
			%% Line 1231
			call 'erlang':'bsl'
			    (1, _cor1)
		    in  %% Line 1231
			case call 'erlang':'band'
				 (Bits, _cor3) of
			  %% Line 1232
			  <0> when 'true' ->
			      let <_11215> = {'illegal_restore',_cor1,'not_set'}
			      in  %% Line 1838
				  call 'erlang':'throw'
				      (_11215)
			  %% Line 1233
			  <_cor9> when 'true' ->
			      _cor0
			end
		%% Line 1235
		<_cor10> when 'true' ->
		    let <_1656> = {'illegal_restore',_cor1,'range'}
		    in  %% Line 1838
			call 'erlang':'throw'
			    (_1656)
	      end
	end
'bs_zero_bits'/1 =
    %% Line 1246
    fun (_cor0) ->
	case _cor0 of
	  <Vst = {'vst',St,_cor8,_cor9,_cor10}> when 'true' ->
	      %% Line 1247
	      case St of
		<{'st',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}> when 'true' ->
		    let <_cor3> =
			call 'erlang':'setelement'
			    (11, St, 0)
		    in  call 'erlang':'setelement'
			    (2, _cor0, _cor3)
		( <_cor22> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','st'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'bs_zero_bits',1}}] )
	    -| ['compiler_generated'] )
	end
'bs_align_check'/2 =
    %% Line 1249
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'bs_put_utf8',_cor4,Flags,_cor5},Vst = {'vst',St = {'st',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16},_cor17,_cor18,_cor19}> when 'true' ->
	      do  %% Line 1250
		  apply 'bs_verify_flags'/2
		      (Flags, St)
		  _cor0
	  %% Line 1252
	  <{'bs_put_utf16',_cor20,Flags,_cor21},Vst = {'vst',St = {'st',_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32},_cor33,_cor34,_cor35}> when 'true' ->
	      do  %% Line 1253
		  apply 'bs_verify_flags'/2
		      (Flags, St)
		  _cor0
	  %% Line 1255
	  <{'bs_put_utf32',_cor36,Flags,_cor37},Vst = {'vst',St = {'st',_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48},_cor49,_cor50,_cor51}> when 'true' ->
	      do  %% Line 1256
		  apply 'bs_verify_flags'/2
		      (Flags, St)
		  _cor0
	  %% Line 1258
	  <{_cor52,_cor53,Sz,U,Flags,_cor54},Vst = {'vst',St = {'st',_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,Bits,_cor64},_cor65,_cor66,_cor67}> when 'true' ->
	      do  %% Line 1259
		  apply 'bs_verify_flags'/2
		      (Flags, St)
		  %% Line 1260
		  apply 'bs_update_bits'/5
		      (Bits, Sz, U, St, _cor0)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'bs_align_check',2}}] )
	    -| ['compiler_generated'] )
	end
'bs_update_bits'/5 =
    %% Line 1262
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <'undefined',_cor25,_cor26,_cor27,Vst> when 'true' ->
	      _cor0
	  %% Line 1263
	  <Bits0,{'integer',Sz},U,St,Vst> when 'true' ->
	      let <_cor5> =
		  %% Line 1264
		  call 'erlang':'*'
		      (_cor2, Sz)
	      in  let <Bits> =
		      %% Line 1264
		      call 'erlang':'+'
			  (_cor4, _cor5)
		  in  %% Line 1265
		      case _cor1 of
			<{'st',_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38}> when 'true' ->
			    let <_cor9> =
				call 'erlang':'setelement'
				    (11, _cor1, Bits)
			    in  case _cor0 of
				  <{'vst',_cor40,_cor41,_cor42,_cor43}> when 'true' ->
				      call 'erlang':'setelement'
					  (2, _cor0, _cor9)
				  ( <_cor44> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','vst'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
			( <_cor39> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','st'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 1266
	  <_cor45,{'atom','all'},_cor46,_cor47,Vst> when 'true' ->
	      _cor0
	  %% Line 1269
	  <_cor48,_cor49,U,_cor50,Vst>
	      when try
		    let <_cor13> =
			call 'erlang':'rem'
			    (_cor2, 8)
		    in  call 'erlang':'=:='
			    (_cor13, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      _cor0
	  %% Line 1272
	  <_cor51,_cor52,_cor53,St,Vst> when 'true' ->
	      %% Line 1274
	      case _cor1 of
		<{'st',_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64}> when 'true' ->
		    let <_cor16> =
			call 'erlang':'setelement'
			    (11, _cor1, 'undefined')
		    in  case _cor0 of
			  <{'vst',_cor66,_cor67,_cor68,_cor69}> when 'true' ->
			      call 'erlang':'setelement'
				  (2, _cor0, _cor16)
			  ( <_cor70> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','vst'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		( <_cor65> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','st'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	end
'bs_verify_flags'/2 =
    %% Line 1276
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'field_flags',Fl},{'st',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,Bits,_cor17}> when 'true' ->
	      let <_4993> =
		  %% Line 1277
		  apply 'bs_is_aligned'/1
		      (Fl)
	      in  %% Line 1277
		  case _4993 of
		    %% Line 1278
		    <'false'> when 'true' ->
			'ok'
		    %% Line 1279
		    <'true'>
			when try
			      let <_cor2> =
				  call 'erlang':'is_integer'
				      (Bits)
			      in  let <_cor3> =
				      call 'erlang':'rem'
					  (Bits, 8)
				  in  let <_cor4> =
					  call 'erlang':'=:='
					      (_cor3, 0)
				      in  call 'erlang':'and'
					      (_cor2, _cor4)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			'ok'
		    %% Line 1280
		    <'true'> when 'true' ->
			let <_13056> = {'aligned_flag_set',{'bits',Bits}}
			in  %% Line 1838
			    call 'erlang':'throw'
				(_13056)
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_4993})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'bs_verify_flags',2}}] )
	    -| ['compiler_generated'] )
	end
'bs_is_aligned'/1 =
    %% Line 1283
    fun (_cor0) ->
	case _cor0 of
	  <Fl>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <_cor1> =
		  call 'erlang':'band'
		      (_cor0, 1)
	      in  call 'erlang':'=:='
		      (_cor1, 1)
	  %% Line 1284
	  <Fl>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      call 'lists':'member'
		  ('aligned', _cor0)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'bs_is_aligned',1}}] )
	    -| ['compiler_generated'] )
	end
'set_type'/3 =
    %% Line 1290
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Type,Reg = {'x',_cor6},Vst> when 'true' ->
	      apply 'set_type_reg'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 1291
	  <Type,Reg = {'y',_cor7},Vst> when 'true' ->
	      apply 'set_type_y'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 1292
	  <_cor8,_cor9,Vst = {'vst',_cor10,_cor11,_cor12,_cor13}> when 'true' ->
	      _cor0
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'set_type',3}}] )
	    -| ['compiler_generated'] )
	end
'set_type_reg'/3 =
    %% Line 1294
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Type,{'x',X},Vst = {'vst',St = {'st',Xs,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24},_cor25,_cor26,_cor27}>
	      when let <_cor3> =
		    %% Line 1295
		    call 'erlang':'is_integer'
			(X)
		in  let <_cor4> =
			%% Line 1295
			call 'erlang':'=<'
			    (0, X)
		    in  %% Line 1295
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 1826
		  case X of
		    <Num>
			when let <_12794> =
			      call 'erlang':'is_integer'
				  (X)
			  in  let <_6598> =
				  call 'erlang':'>='
				      (X, 1024)
			      in  call 'erlang':'and'
				      (_12794, _6598) ->
			%% Line 1838
			call 'erlang':'throw'
			    ('limit')
		    %% Line 1828
		    <_cor4> when 'true' ->
			'ok'
		  end
		  let <_rec93> =
		      %% Line 1297
		      call 'gb_trees':'enter'
			  (X, _cor2, Xs)
		  in  let <_cor8> =
			  %% Line 1297
			  call 'erlang':'setelement'
			      (2, St, _rec93)
		      in  %% Line 1297
			  call 'erlang':'setelement'
			      (2, _cor0, _cor8)
	  %% Line 1298
	  <Type,Reg,Vst> when 'true' ->
	      %% Line 1299
	      apply 'set_type_y'/3
		  (_cor2, _cor1, _cor0)
	end
'set_type_y'/3 =
    %% Line 1301
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Type,Reg = {'y',Y},Vst = {'vst',St = {'st',_cor18,Ys0,_cor19,NumY,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26},_cor27,_cor28,_cor29}>
	      when let <_cor3> =
		    %% Line 1302
		    call 'erlang':'is_integer'
			(Y)
		in  let <_cor4> =
			%% Line 1302
			call 'erlang':'=<'
			    (0, Y)
		    in  %% Line 1302
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      do  %% Line 1826
		  case Y of
		    <Num>
			when let <_4775> =
			      call 'erlang':'is_integer'
				  (Y)
			  in  let <_4209> =
				  call 'erlang':'>='
				      (Y, 1024)
			      in  call 'erlang':'and'
				      (_4775, _4209) ->
			%% Line 1838
			call 'erlang':'throw'
			    ('limit')
		    %% Line 1828
		    <_cor4> when 'true' ->
			'ok'
		  end
		  %% Line 1304
		  case <Y,NumY> of
		    %% Line 1305
		    <_cor30,'none'> when 'true' ->
			let <_9768> = {%% Line 1306
			     'no_stack_frame',_cor1}
			in  %% Line 1838
			    call 'erlang':'throw'
				(_9768)
		    %% Line 1307
		    <_cor31,_cor32>
			when call 'erlang':'>'
			      (Y,
			       NumY) ->
			let <_8662> = {%% Line 1308
			     'y_reg_out_of_range',_cor1,NumY}
			in  %% Line 1838
			    call 'erlang':'throw'
				(_8662)
		    %% Line 1309
		    <_cor33,_cor34> when 'true' ->
			let <_cor6> =
			    %% Line 1310
			    case <> of
			      <>
				  when call 'erlang':'=:='
					(_cor2,
					 'initialized_ct') ->
				  %% Line 1311
				  call 'gb_trees':'enter'
				      (Y, 'initialized', Ys0)
			      %% Line 1312
			      <> when 'true' ->
				  let <_9543> =
				      %% Line 1313
				      call 'gb_trees':'lookup'
					  (Y, Ys0)
				  in  %% Line 1313
				      case _9543 of
					%% Line 1314
					<'none'> when 'true' ->
					    %% Line 1315
					    call 'gb_trees':'insert'
						(Y, _cor2, Ys0)
					%% Line 1316
					<{'value','uinitialized'}> when 'true' ->
					    %% Line 1317
					    call 'gb_trees':'insert'
						(Y, _cor2, Ys0)
					%% Line 1318
					<{'value',Tag = {'catchtag',_cor35}}> when 'true' ->
					    %% Line 1838
					    call 'erlang':'throw'
						(Tag)
					%% Line 1320
					<{'value',Tag = {'trytag',_cor36}}> when 'true' ->
					    %% Line 1838
					    call 'erlang':'throw'
						(Tag)
					%% Line 1322
					<{'value',_cor37}> when 'true' ->
					    %% Line 1323
					    call 'gb_trees':'update'
						(Y, _cor2, Ys0)
					( <_cor5> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_9543})
					  -| ['compiler_generated'] )
				      end
			    end
			in  let <_cor10> =
				%% Line 1326
				call 'erlang':'setelement'
				    (3, St, _cor6)
			    in  %% Line 1326
				call 'erlang':'setelement'
				    (2, _cor0, _cor10)
		  end
	  %% Line 1328
	  <Type,Reg,{'vst',_cor55,_cor56,_cor57,_cor58}> when 'true' ->
	      let <_2945> = {'invalid_store',_cor1,_cor2}
	      in  %% Line 1838
		  call 'erlang':'throw'
		      (_2945)
	  ( <_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'set_type_y',3}}] )
	    -| ['compiler_generated'] )
	end
'assert_term'/2 =
    %% Line 1330
    fun (_cor1,_cor0) ->
	do  %% Line 1331
	    apply 'get_term_type'/2
		(_cor1, _cor0)
	    %% Line 1332
	    'ok'
'assert_type'/3 =
    %% Line 1392
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1393
	    apply 'get_term_type'/2
		(_cor1, _cor0)
	in  %% Line 1393
	    apply 'assert_type'/2
		(_cor2, _cor3)
'assert_type'/2 =
    %% Line 1395
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Correct,_cor10>
	      when call 'erlang':'=:='
		    (_cor0,
		     _cor1) ->
	      'ok'
	  %% Line 1396
	  <'float',{'float',_cor11}> when 'true' ->
	      'ok'
	  %% Line 1397
	  <'tuple',{'tuple',_cor12}> when 'true' ->
	      'ok'
	  %% Line 1398
	  <{'tuple_element',I},{'tuple',[Sz|[]]}>
	      when let <_cor2> =
		    %% Line 1399
		    call 'erlang':'=<'
			(1, I)
		in  let <_cor3> =
			%% Line 1399
			call 'erlang':'=<'
			    (I, Sz)
		    in  %% Line 1399
			call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 1400
	      'ok'
	  %% Line 1401
	  <{'tuple_element',I},{'tuple',Sz}>
	      when %% Line 1402
		try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (Sz)
		    in  let <_cor5> =
			    call 'erlang':'=<'
				(1, I)
			in  let <_cor6> =
				call 'erlang':'=<'
				    (I, Sz)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1403
	      'ok'
	  %% Line 1404
	  <Needed,Actual> when 'true' ->
	      let <_602> = {%% Line 1405
		   'bad_type',%% Line 1405
			      {'needed',_cor1},%% Line 1405
					       {'actual',_cor0}}
	      in  %% Line 1838
		  call 'erlang':'throw'
		      (_602)
	end
'upgrade_tuple_type'/2 =
    %% Line 1414
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'tuple',[Sz|[]]},T = {'tuple',[OldSz|[]]}>
	      when call 'erlang':'<'
		    (Sz,
		     OldSz) ->
	      _cor0
	  %% Line 1417
	  <{'tuple',[Sz|[]]},T = {'tuple',OldSz}>
	      when %% Line 1418
		try
		    let <_cor2> =
			call 'erlang':'is_integer'
			    (Sz)
		    in  let <_cor3> =
			    call 'erlang':'is_integer'
				(OldSz)
			in  let <_cor4> =
				call 'erlang':'=<'
				    (Sz, OldSz)
			    in  let <_cor5> =
				    call 'erlang':'and'
					(_cor3, _cor4)
				in  call 'erlang':'and'
					(_cor2, _cor5)
		of <Try> ->
		    Try
		catch <_5728,R> ->
		    'false' ->
	      _cor0
	  %% Line 1421
	  <T = {'tuple',_cor8},_cor9> when 'true' ->
	      _cor1
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'upgrade_tuple_type',2}}] )
	    -| ['compiler_generated'] )
	end
'validate_src'/2 =
    %% Line 1434
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Ss,Vst>
	      when call 'erlang':'is_list'
		    (_cor1) ->
	      let <_cor4> =
		  %% Line 1435
		  fun (_cor2) ->
		      apply 'get_term_type'/2
			  (_cor2, _cor0)
	      in  %% Line 1435
		  call 'lists':'foreach'
		      (_cor4, _cor1)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'validate_src',2}}] )
	    -| ['compiler_generated'] )
	end
'get_move_term_type'/2 =
    %% Line 1441
    fun (_cor1,_cor0) ->
	let <_7572> =
	    %% Line 1442
	    apply 'get_term_type_1'/2
		(_cor1, _cor0)
	in  %% Line 1442
	    case _7572 of
	      %% Line 1443
	      <'initialized'> when 'true' ->
		  let <_10284> = {'unassigned',_cor1}
		  in  %% Line 1838
		      call 'erlang':'throw'
			  (_10284)
	      %% Line 1444
	      <{'catchtag',_cor5}> when 'true' ->
		  let <_9061> = {'catchtag',_cor1}
		  in  %% Line 1838
		      call 'erlang':'throw'
			  (_9061)
	      %% Line 1445
	      <{'trytag',_cor6}> when 'true' ->
		  let <_2353> = {'trytag',_cor1}
		  in  %% Line 1838
		      call 'erlang':'throw'
			  (_2353)
	      %% Line 1446
	      <Type> when 'true' ->
		  _7572
	    end
'get_term_type'/2 =
    %% Line 1453
    fun (_cor1,_cor0) ->
	let <_4382> =
	    %% Line 1454
	    apply 'get_term_type_1'/2
		(_cor1, _cor0)
	in  %% Line 1454
	    case _4382 of
	      %% Line 1455
	      <'initialized'> when 'true' ->
		  let <_325> = {'unassigned',_cor1}
		  in  %% Line 1838
		      call 'erlang':'throw'
			  (_325)
	      %% Line 1456
	      <{'catchtag',_cor5}> when 'true' ->
		  let <_11344> = {'catchtag',_cor1}
		  in  %% Line 1838
		      call 'erlang':'throw'
			  (_11344)
	      %% Line 1457
	      <{'trytag',_cor6}> when 'true' ->
		  let <_7831> = {'trytag',_cor1}
		  in  %% Line 1838
		      call 'erlang':'throw'
			  (_7831)
	      %% Line 1458
	      <{'match_context',_cor7,_cor8}> when 'true' ->
		  let <_8744> = {'match_context',_cor1}
		  in  %% Line 1838
		      call 'erlang':'throw'
			  (_8744)
	      %% Line 1459
	      <Type> when 'true' ->
		  _4382
	    end
'get_term_type_1'/2 =
    %% Line 1468
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <T = 'nil',_cor6> when 'true' ->
	      _cor1
	  %% Line 1469
	  <T = {'atom',A},_cor7>
	      when call 'erlang':'is_atom'
		    (A) ->
	      _cor1
	  %% Line 1470
	  <T = {'float',F},_cor8>
	      when call 'erlang':'is_float'
		    (F) ->
	      _cor1
	  %% Line 1471
	  <T = {'integer',I},_cor9>
	      when call 'erlang':'is_integer'
		    (I) ->
	      _cor1
	  %% Line 1472
	  <T = {'literal',_cor10},_cor11> when 'true' ->
	      _cor1
	  %% Line 1473
	  <Reg = {'x',X},{'vst',{'st',Xs,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21},_cor22,_cor23,_cor24}>
	      when call 'erlang':'is_integer'
		    (X) ->
	      let <_13522> =
		  %% Line 1474
		  call 'gb_trees':'lookup'
		      (X, Xs)
	      in  %% Line 1474
		  case _13522 of
		    %% Line 1475
		    <{'value',Type}> when 'true' ->
			Type
		    %% Line 1476
		    <'none'> when 'true' ->
			let <_13186> = {'uninitialized_reg',_cor1}
			in  %% Line 1838
			    call 'erlang':'throw'
				(_13186)
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_13522})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1478
	  <Reg = {'y',Y},{'vst',{'st',_cor25,Ys,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34},_cor35,_cor36,_cor37}>
	      when call 'erlang':'is_integer'
		    (Y) ->
	      let <_4433> =
		  %% Line 1479
		  call 'gb_trees':'lookup'
		      (Y, Ys)
	      in  %% Line 1479
		  case _4433 of
		    %% Line 1480
		    <'none'> when 'true' ->
			let <_10711> = {'uninitialized_reg',_cor1}
			in  %% Line 1838
			    call 'erlang':'throw'
				(_10711)
		    %% Line 1481
		    <{'value','uninitialized'}> when 'true' ->
			let <_8222> = {'uninitialized_reg',_cor1}
			in  %% Line 1838
			    call 'erlang':'throw'
				(_8222)
		    %% Line 1482
		    <{'value',Type}> when 'true' ->
			Type
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_4433})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1484
	  <Src,_cor38> when 'true' ->
	      let <_2223> = {'bad_source',_cor1}
	      in  %% Line 1838
		  call 'erlang':'throw'
		      (_2223)
	end
'get_literal'/1 =
    %% Line 1488
    fun (_cor0) ->
	case _cor0 of
	  <'nil'> when 'true' ->
	      []
	  %% Line 1489
	  <{'atom',A}>
	      when call 'erlang':'is_atom'
		    (A) ->
	      A
	  %% Line 1490
	  <{'float',F}>
	      when call 'erlang':'is_float'
		    (F) ->
	      F
	  %% Line 1491
	  <{'integer',I}>
	      when call 'erlang':'is_integer'
		    (I) ->
	      I
	  %% Line 1492
	  <{'literal',L}> when 'true' ->
	      L
	  %% Line 1493
	  <T> when 'true' ->
	      let <_11617> = {'not_literal',_cor0}
	      in  %% Line 1838
		  call 'erlang':'throw'
		      (_11617)
	end
'branch_arities'/3 =
    %% Line 1496
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_cor11,Vst = {'vst',_cor12,_cor13,_cor14,_cor15}> when 'true' ->
	      _cor0
	  %% Line 1497
	  <[Sz|[{'f',L}|T]],Tuple,Vst0 = {'vst',St,_cor16,_cor17,_cor18}>
	      when %% Line 1498
		call 'erlang':'is_integer'
		    (Sz) ->
	      let <Vst1> =
		  %% Line 1499
		  apply 'set_type_reg'/3
		      ({'tuple',Sz}, _cor1, _cor0)
	      in  let <Vst> =
		      %% Line 1500
		      apply 'branch_state'/2
			  (L, Vst1)
		  in  %% Line 1501
		      case Vst of
			<{'vst',_cor19,_cor20,_cor21,_cor22}> when 'true' ->
			    let <_cor7> =
				call 'erlang':'setelement'
				    (2, Vst, St)
			    in  apply 'branch_arities'/3
				    (T, _cor1, _cor7)
			( <_cor23> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','vst'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'branch_arities',3}}] )
	    -| ['compiler_generated'] )
	end
'branch_state'/2 =
    %% Line 1503
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,Vst = {'vst',_cor10,_cor11,_cor12,_cor13}> when 'true' ->
	      _cor0
	  %% Line 1504
	  <L,Vst = {'vst',St,B,_cor14,_cor15}> when 'true' ->
	      let <_2750> =
		  %% Line 1506
		  call 'gb_trees':'is_defined'
		      (_cor1, B)
	      in  let <_cor4> =
		      %% Line 1506
		      case _2750 of
			%% Line 1507
			<'false'> when 'true' ->
			    %% Line 1508
			    call 'gb_trees':'insert'
				(_cor1, St, B)
			%% Line 1509
			<'true'> when 'true' ->
			    let <MergedSt> =
				%% Line 1510
				apply 'merge_states'/3
				    (_cor1, St, B)
			    in  %% Line 1511
				call 'gb_trees':'update'
				    (_cor1, MergedSt, B)
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_2750})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 1506
		      call 'erlang':'setelement'
			  (3, _cor0, _cor4)
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'branch_state',2}}] )
	    -| ['compiler_generated'] )
	end
'merge_states'/3 =
    %% Line 1519
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <L,St,Branched>
	      when call 'erlang':'=/='
		    (_cor2,
		     0) ->
	      let <_12481> =
		  %% Line 1520
		  call 'gb_trees':'lookup'
		      (_cor2, _cor0)
	      in  %% Line 1520
		  case _12481 of
		    %% Line 1521
		    <'none'> when 'true' ->
			_cor1
		    %% Line 1522
		    <{'value',OtherSt}>
			when call 'erlang':'=:='
			      (_cor1,
			       'none') ->
			OtherSt
		    %% Line 1523
		    <{'value',OtherSt}> when 'true' ->
			apply 'merge_states_1'/2
			    (_cor1, OtherSt)
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_12481})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'merge_states',3}}] )
	    -| ['compiler_generated'] )
	end
'merge_states_1'/2 =
    %% Line 1526
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <St = {'st',Xs0,Ys0,_cor12,NumY0,H0,_cor13,_cor14,Ct0,Bsm0,_cor15,_cor16},%% Line 1527
										    {'st',Xs1,Ys1,_cor17,NumY1,H1,_cor18,_cor19,Ct1,Bsm1,_cor20,_cor21}> when 'true' ->
	      let <NumY> =
		  %% Line 1535
		  case <NumY0,NumY1> of
		    <S,_cor4>
			when call 'erlang':'=:='
			      (NumY1,
			       NumY0) ->
			NumY0
		    %% Line 1536
		    <_cor5,_cor6> when 'true' ->
			'undecided'
		  end
	      in  let <_cor3> =
		      %% Line 1547
		      call 'gb_trees':'to_list'
			  (Xs0)
		  in  let <_cor2> =
			  %% Line 1547
			  call 'gb_trees':'to_list'
			      (Xs1)
		      in  let <Rs> =
			      %% Line 1547
			      apply 'merge_regs_1'/2
				  (_cor3, _cor2)
			  in  let <_452> =
				  %% Line 1833
				  call 'lists':'sort'
				      (Rs)
			      in  let <Xs> =
				      %% Line 1833
				      call 'gb_trees':'from_orddict'
					  (_452)
				  in  let <_cor3> =
					  %% Line 1563
					  call 'gb_trees':'to_list'
					      (Ys0)
				      in  let <_cor2> =
					      %% Line 1563
					      call 'gb_trees':'to_list'
						  (Ys1)
					  in  let <Rs> =
						  %% Line 1563
						  apply 'merge_y_regs_1'/2
						      (_cor3, _cor2)
					      in  let <_3774> =
						      %% Line 1833
						      call 'lists':'sort'
							  (Rs)
						  in  let <Ys> =
							  %% Line 1833
							  call 'gb_trees':'from_orddict'
							      (_3774)
						      in  let <Ct> =
							      %% Line 1531
							      apply 'merge_ct'/2
								  (Ct0, Ct1)
							  in  let <Bsm> =
								  %% Line 1616
								  case <Bsm0,Bsm1> of
								    <'undefined',_cor4> when 'true' ->
									'undefined'
								    %% Line 1617
								    <_cor5,'undefined'> when 'true' ->
									'undefined'
								    %% Line 1618
								    <_10276,_7722> when 'true' ->
									call 'gb_sets':'intersection'
									    (Bsm0, Bsm1)
								  end
							      in  let <_rec101> =
								      %% Line 1533
								      apply 'min'/2
									  (H0, H1)
								  in  %% Line 1533
								      {'st',Xs,Ys,_cor12,NumY,_rec101,_cor13,_cor14,Ct,Bsm,_cor15,_cor16}
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'merge_states_1',2}}] )
	    -| ['compiler_generated'] )
	end
'merge_ct'/2 =
    %% Line 1538
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <S,_cor4>
	      when call 'erlang':'=:='
		    (_cor0,
		     _cor1) ->
	      _cor1
	  %% Line 1539
	  <Ct0,Ct1> when 'true' ->
	      %% Line 1541
	      case <_cor1,_cor0> of
		<[C0|_5996],[C1|_11502]> when 'true' ->
		    let <_cor2> =
			%% Line 1542
			call 'erlang':'++'
			    (C0, C1)
		    in  let <_cor3> =
			    %% Line 1542
			    call 'ordsets':'from_list'
				(_cor2)
			in  let <_cor4> =
				%% Line 1542
				apply 'merge_ct_1'/2
				    (_5996, _11502)
			    in  %% Line 1542
				[_cor3|_cor4]
		%% Line 1543
		<[],[]> when 'true' ->
		    []
		%% Line 1544
		<_cor7,_cor8> when 'true' ->
		    'undecided'
	      end
	end
'merge_ct_1'/2 =
    %% Line 1541
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[C0|Ct0],[C1|Ct1]> when 'true' ->
	      let <_cor2> =
		  %% Line 1542
		  call 'erlang':'++'
		      (C0, C1)
	      in  let <_cor3> =
		      %% Line 1542
		      call 'ordsets':'from_list'
			  (_cor2)
		  in  let <_cor4> =
			  %% Line 1542
			  apply 'merge_ct_1'/2
			      (Ct0, Ct1)
		      in  %% Line 1542
			  [_cor3|_cor4]
	  %% Line 1543
	  <[],[]> when 'true' ->
	      []
	  %% Line 1544
	  <_cor7,_cor8> when 'true' ->
	      'undecided'
	end
'merge_regs_1'/2 =
    %% Line 1550
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Same|Rs1],[_cor7|Rs2]>
	      when call 'erlang':'=:='
		    (_cor7,
		     Same) ->
	      let <_cor2> =
		  %% Line 1551
		  apply 'merge_regs_1'/2
		      (Rs1, Rs2)
	      in  %% Line 1551
		  [Same|_cor2]
	  %% Line 1552
	  <[{R1,_cor8}|Rs1],Rs2 = [{R2,_cor9}|_cor10]>
	      when call 'erlang':'<'
		    (R1,
		     R2) ->
	      %% Line 1553
	      apply 'merge_regs_1'/2
		  (Rs1, _cor0)
	  %% Line 1554
	  <Rs1 = [{R1,_cor11}|_cor12],[{R2,_cor13}|Rs2]>
	      when call 'erlang':'>'
		    (R1,
		     R2) ->
	      %% Line 1555
	      apply 'merge_regs_1'/2
		  (_cor1, Rs2)
	  %% Line 1556
	  <[{R,Type1}|Rs1],[{_cor14,Type2}|Rs2]>
	      when call 'erlang':'=:='
		    (_cor14,
		     R) ->
	      let <_cor3> =
		  %% Line 1557
		  apply 'merge_types'/2
		      (Type1, Type2)
	      in  let <_cor4> =
		      %% Line 1557
		      apply 'merge_regs_1'/2
			  (Rs1, Rs2)
		  in  %% Line 1557
		      [{R,_cor3}|_cor4]
	  %% Line 1558
	  <[],[]> when 'true' ->
	      []
	  %% Line 1559
	  <[],[_cor15|_cor16]> when 'true' ->
	      []
	  %% Line 1560
	  <[_cor17|_cor18],[]> when 'true' ->
	      []
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'merge_regs_1',2}}] )
	    -| ['compiler_generated'] )
	end
'merge_y_regs_1'/2 =
    %% Line 1566
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Same|Rs1],[_cor9|Rs2]>
	      when call 'erlang':'=:='
		    (_cor9,
		     Same) ->
	      let <_cor2> =
		  %% Line 1567
		  apply 'merge_y_regs_1'/2
		      (Rs1, Rs2)
	      in  %% Line 1567
		  [Same|_cor2]
	  %% Line 1568
	  <[{R1,_cor10}|Rs1],Rs2 = [{R2,_cor11}|_cor12]>
	      when call 'erlang':'<'
		    (R1,
		     R2) ->
	      let <_cor3> =
		  %% Line 1569
		  apply 'merge_y_regs_1'/2
		      (Rs1, _cor0)
	      in  %% Line 1569
		  [{R1,'uninitialized'}|_cor3]
	  %% Line 1570
	  <Rs1 = [{R1,_cor13}|_cor14],[{R2,_cor15}|Rs2]>
	      when call 'erlang':'>'
		    (R1,
		     R2) ->
	      let <_cor4> =
		  %% Line 1571
		  apply 'merge_y_regs_1'/2
		      (_cor1, Rs2)
	      in  %% Line 1571
		  [{R2,'uninitialized'}|_cor4]
	  %% Line 1572
	  <[{R,Type1}|Rs1],[{_cor16,Type2}|Rs2]>
	      when call 'erlang':'=:='
		    (_cor16,
		     R) ->
	      let <_cor5> =
		  %% Line 1573
		  apply 'merge_types'/2
		      (Type1, Type2)
	      in  let <_cor6> =
		      %% Line 1573
		      apply 'merge_y_regs_1'/2
			  (Rs1, Rs2)
		  in  %% Line 1573
		      [{R,_cor5}|_cor6]
	  %% Line 1574
	  <[],[]> when 'true' ->
	      []
	  %% Line 1575
	  <[],Rs = [_cor17|_cor18]> when 'true' ->
	      _cor0
	  %% Line 1576
	  <Rs = [_cor19|_cor20],[]> when 'true' ->
	      _cor1
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'merge_y_regs_1',2}}] )
	    -| ['compiler_generated'] )
	end
'merge_types'/2 =
    %% Line 1581
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = 'uninitialized',_cor20> when 'true' ->
	      _cor1
	  %% Line 1582
	  <_cor21,I = 'uninitialized'> when 'true' ->
	      _cor0
	  %% Line 1583
	  <I = 'initialized',_cor22> when 'true' ->
	      _cor1
	  %% Line 1584
	  <_cor23,I = 'initialized'> when 'true' ->
	      _cor0
	  %% Line 1585
	  <{'catchtag',T0},{'catchtag',T1}> when 'true' ->
	      let <_cor2> =
		  %% Line 1586
		  call 'erlang':'++'
		      (T0, T1)
	      in  let <_cor3> =
		      %% Line 1586
		      call 'ordsets':'from_list'
			  (_cor2)
		  in  %% Line 1586
		      {'catchtag',_cor3}
	  %% Line 1587
	  <{'trytag',T0},{'trytag',T1}> when 'true' ->
	      let <_cor4> =
		  %% Line 1588
		  call 'erlang':'++'
		      (T0, T1)
	      in  let <_cor5> =
		      %% Line 1588
		      call 'ordsets':'from_list'
			  (_cor4)
		  in  %% Line 1588
		      {'trytag',_cor5}
	  %% Line 1589
	  <{'tuple',A},{'tuple',B}> when 'true' ->
	      let <_cor7> =
		  %% Line 1620
		  case A of
		    <[Sz|[]]> when 'true' ->
			Sz
		    %% Line 1621
		    <Sz> when 'true' ->
			A
		  end
	      in  let <_cor6> =
		      %% Line 1620
		      case B of
			<[Sz|[]]> when 'true' ->
			    Sz
			%% Line 1621
			<Sz> when 'true' ->
			    B
		      end
		  in  let <_cor8> =
			  %% Line 1590
			  apply 'min'/2
			      (_cor7, _cor6)
		      in  %% Line 1590
			  {'tuple',[_cor8|[]]}
	  %% Line 1591
	  <{Type,A},{_cor24,B}>
	      when let <_cor25> =
		    call 'erlang':'=:='
			(_cor24, Type)
		in  let <_cor9> =
			%% Line 1592
			call 'erlang':'=:='
			    (Type, 'atom')
		    in  let <_cor10> =
			    %% Line 1592
			    call 'erlang':'=:='
				(Type, 'integer')
			in  let <_cor11> =
				%% Line 1592
				call 'erlang':'=:='
				    (Type, 'float')
			    in  let <_cor12> =
				    %% Line 1592
				    call 'erlang':'or'
					(_cor10, _cor11)
				in  let <_cor26> =
					%% Line 1592
					call 'erlang':'or'
					    (_cor9, _cor12)
				    in  call 'erlang':'and'
					    (_cor25, _cor26) ->
	      %% Line 1593
	      case <> of
		<>
		    when call 'erlang':'=:='
			  (A,
			   B) ->
		    {Type,A}
		%% Line 1594
		<> when 'true' ->
		    {Type,[]}
	      end
	  %% Line 1596
	  <{Type,_cor27},'number'>
	      when let <_cor13> =
		    %% Line 1597
		    call 'erlang':'=:='
			(Type, 'integer')
		in  let <_cor14> =
			%% Line 1597
			call 'erlang':'=:='
			    (Type, 'float')
		    in  %% Line 1597
			call 'erlang':'or'
			    (_cor13, _cor14) ->
	      %% Line 1598
	      'number'
	  %% Line 1599
	  <'number',{Type,_cor28}>
	      when let <_cor15> =
		    %% Line 1600
		    call 'erlang':'=:='
			(Type, 'integer')
		in  let <_cor16> =
			%% Line 1600
			call 'erlang':'=:='
			    (Type, 'float')
		    in  %% Line 1600
			call 'erlang':'or'
			    (_cor15, _cor16) ->
	      %% Line 1601
	      'number'
	  %% Line 1602
	  <'bool',{'atom',A}> when 'true' ->
	      %% Line 1623
	      case A of
		<[]> when 'true' ->
		    {'atom',[]}
		%% Line 1624
		<'true'> when 'true' ->
		    'bool'
		%% Line 1625
		<'false'> when 'true' ->
		    'bool'
		%% Line 1626
		<_cor2> when 'true' ->
		    {'atom',[]}
	      end
	  %% Line 1604
	  <{'atom',A},'bool'> when 'true' ->
	      %% Line 1623
	      case A of
		<[]> when 'true' ->
		    {'atom',[]}
		%% Line 1624
		<'true'> when 'true' ->
		    'bool'
		%% Line 1625
		<'false'> when 'true' ->
		    'bool'
		%% Line 1626
		<_cor2> when 'true' ->
		    {'atom',[]}
	      end
	  %% Line 1606
	  <{'match_context',B0,Slots},{'match_context',B1,_cor29}>
	      when call 'erlang':'=:='
		    (_cor29,
		     Slots) ->
	      let <_cor17> =
		  %% Line 1607
		  call 'erlang':'bor'
		      (B0, B1)
	      in  %% Line 1607
		  {'match_context',_cor17,Slots}
	  %% Line 1608
	  <M = {'match_context',_cor30,_cor31},_cor32> when 'true' ->
	      _cor1
	  %% Line 1610
	  <_cor33,M = {'match_context',_cor34,_cor35}> when 'true' ->
	      _cor0
	  %% Line 1612
	  <T1,T2>
	      when call 'erlang':'=/='
		    (_cor1,
		     _cor0) ->
	      %% Line 1614
	      'term'
	  ( <_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'merge_types',2}}] )
	    -| ['compiler_generated'] )
	end
'verify_y_init'/1 =
    %% Line 1628
    fun (_cor0) ->
	case _cor0 of
	  <{'vst',{'st',_cor3,Ys,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12},_cor13,_cor14,_cor15}> when 'true' ->
	      let <_cor1> =
		  %% Line 1629
		  call 'gb_trees':'to_list'
		      (Ys)
	      in  %% Line 1629
		  apply 'verify_y_init_1'/1
		      (_cor1)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'verify_y_init',1}}] )
	    -| ['compiler_generated'] )
	end
'verify_y_init_1'/1 =
    %% Line 1631
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      'ok'
	  %% Line 1632
	  <[{Y,'uninitialized'}|_cor2]> when 'true' ->
	      let <_4974> = {%% Line 1633
		   'uninitialized_reg',%% Line 1633
				       {'y',Y}}
	      in  %% Line 1838
		  call 'erlang':'throw'
		      (_4974)
	  %% Line 1634
	  <[{_cor3,_cor4}|Ys]> when 'true' ->
	      %% Line 1635
	      apply 'verify_y_init_1'/1
		  (Ys)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'verify_y_init_1',1}}] )
	    -| ['compiler_generated'] )
	end
'verify_live'/2 =
    %% Line 1637
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,{'vst',_cor4,_cor5,_cor6,_cor7}> when 'true' ->
	      'ok'
	  %% Line 1638
	  <N,{'vst',{'st',Xs,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17},_cor18,_cor19,_cor20}> when 'true' ->
	      %% Line 1639
	      apply 'verify_live_1'/2
		  (_cor1, Xs)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'verify_live',2}}] )
	    -| ['compiler_generated'] )
	end
'verify_live_1'/2 =
    %% Line 1641
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,_cor6> when 'true' ->
	      'ok'
	  %% Line 1642
	  <N,Xs>
	      when call 'erlang':'is_integer'
		    (_cor1) ->
	      let <X> =
		  %% Line 1643
		  call 'erlang':'-'
		      (_cor1, 1)
	      in  let <_12413> =
		      %% Line 1644
		      call 'gb_trees':'is_defined'
			  (X, _cor0)
		  in  %% Line 1644
		      case _12413 of
			%% Line 1645
			<'false'> when 'true' ->
			    let <_12631> = {{'x',X},'not_live'}
			    in  %% Line 1838
				call 'erlang':'throw'
				    (_12631)
			%% Line 1646
			<'true'> when 'true' ->
			    apply 'verify_live_1'/2
				(X, _cor0)
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_12413})
			  -| ['compiler_generated'] )
		      end
	  %% Line 1648
	  <N,_cor7> when 'true' ->
	      let <_11605> = {'bad_number_of_live_regs',_cor1}
	      in  %% Line 1838
		  call 'erlang':'throw'
		      (_11605)
	end
'verify_no_ct'/1 =
    %% Line 1650
    fun (_cor0) ->
	case _cor0 of
	  <{'vst',{'st',_cor10,_cor11,_cor12,'none',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19},_cor20,_cor21,_cor22}> when 'true' ->
	      'ok'
	  %% Line 1651
	  <{'vst',{'st',_cor23,_cor24,_cor25,'undecided',_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32},_cor33,_cor34,_cor35}> when 'true' ->
	      %% Line 1838
	      call 'erlang':'throw'
		  ('unknown_size_of_stackframe')
	  %% Line 1653
	  <{'vst',{'st',_cor36,Ys,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45},_cor46,_cor47,_cor48}> when 'true' ->
	      let <_cor7> =
		  %% Line 1654
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[Y|_cor2]> when 'true' ->
				      let <_1710> =
					  %% Line 1659
					  case Y of
					    <{_653,{'catchtag',_cor3}}> when 'true' ->
						'true'
					    %% Line 1660
					    <{_505,{'trytag',_cor5}}> when 'true' ->
						'true'
					    %% Line 1661
					    <{_cor6,_cor7}> when 'true' ->
						'false'
					    ( <_cor1> when 'true' ->
						  primop 'match_fail'
						      ({'function_clause',Y})
					      -| ['compiler_generated'] )
					  end
				      in  ( case _1710 of
					      <'true'> when 'true' ->
						  let <_cor5> =
						      apply 'lc$^0'/1
							  (_cor2)
						  in  ( [Y|_cor5]
							-| ['compiler_generated'] )
					      ( <'false'> when 'true' ->
						    apply 'lc$^0'/1
							(_cor2)
						-| ['compiler_generated'] )
					      ( <_cor6> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_1710})
						-| ['compiler_generated'] )
					    end
					    -| ['list_comprehension'] )
				  <[]> when 'true' ->
				      []
				  ( <_7820> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor3> =
			    call 'gb_trees':'to_list'
				(Ys)
			in  apply 'lc$^0'/1
				(_cor3)
		    -| ['list_comprehension'] )
	      in  %% Line 1654
		  case _cor7 of
		    %% Line 1655
		    <[]> when 'true' ->
			'ok'
		    %% Line 1656
		    <CT> when 'true' ->
			let <_11> = {'unfinished_catch_try',_cor7}
			in  %% Line 1838
			    call 'erlang':'throw'
				(_11)
		  end
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'verify_no_ct',1}}] )
	    -| ['compiler_generated'] )
	end
'eat_heap'/2 =
    %% Line 1663
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <N,Vst = {'vst',St = {'st',_cor11,_cor12,_cor13,_cor14,Heap0,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20},_cor21,_cor22,_cor23}> when 'true' ->
	      let <_7974> =
		  %% Line 1664
		  call 'erlang':'-'
		      (Heap0, _cor1)
	      in  %% Line 1664
		  case _7974 of
		    %% Line 1665
		    <Neg>
			when call 'erlang':'<'
			      (_7974,
			       0) ->
			let <_12377> = {%% Line 1666
			     'heap_overflow',%% Line 1666
					     {'left',Heap0},%% Line 1666
							    {'wanted',_cor1}}
			in  %% Line 1838
			    call 'erlang':'throw'
				(_12377)
		    %% Line 1667
		    <Heap> when 'true' ->
			let <_cor4> =
			    %% Line 1668
			    call 'erlang':'setelement'
				(6, St, _7974)
			in  %% Line 1668
			    call 'erlang':'setelement'
				(2, _cor0, _cor4)
		  end
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'eat_heap',2}}] )
	    -| ['compiler_generated'] )
	end
'eat_heap_float'/1 =
    %% Line 1671
    fun (_cor0) ->
	case _cor0 of
	  <Vst = {'vst',St = {'st',_cor9,_cor10,_cor11,_cor12,_cor13,HeapFloats0,_cor14,_cor15,_cor16,_cor17,_cor18},_cor19,_cor20,_cor21}> when 'true' ->
	      let <_2834> =
		  %% Line 1672
		  call 'erlang':'-'
		      (HeapFloats0, 1)
	      in  %% Line 1672
		  case _2834 of
		    %% Line 1673
		    <Neg>
			when call 'erlang':'<'
			      (_2834,
			       0) ->
			let <_4432> =
			    %% Line 1674
			    {'heap_overflow',{'left',{HeapFloats0,'floats'}},{'wanted',{1,'floats'}}}
			in  %% Line 1838
			    call 'erlang':'throw'
				(_4432)
		    %% Line 1675
		    <HeapFloats> when 'true' ->
			let <_cor3> =
			    %% Line 1676
			    call 'erlang':'setelement'
				(7, St, _2834)
			in  %% Line 1676
			    call 'erlang':'setelement'
				(2, _cor0, _cor3)
		  end
	  ( <_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'eat_heap_float',1}}] )
	    -| ['compiler_generated'] )
	end
'bif_type'/3 =
    %% Line 1679
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'-',Src,Vst> when 'true' ->
	      %% Line 1680
	      apply 'arith_type'/2
		  (_cor1, _cor0)
	  %% Line 1681
	  <'+',Src,Vst> when 'true' ->
	      %% Line 1682
	      apply 'arith_type'/2
		  (_cor1, _cor0)
	  %% Line 1683
	  <'*',Src,Vst> when 'true' ->
	      %% Line 1684
	      apply 'arith_type'/2
		  (_cor1, _cor0)
	  %% Line 1685
	  <'abs',[Num|[]],Vst> when 'true' ->
	      let <_446> =
		  %% Line 1686
		  apply 'get_term_type'/2
		      (Num, _cor0)
	      in  %% Line 1686
		  case _446 of
		    %% Line 1687
		    <T = {'float',_cor7}> when 'true' ->
			_446
		    %% Line 1688
		    <T = {'integer',_cor8}> when 'true' ->
			_446
		    %% Line 1689
		    <_cor9> when 'true' ->
			'number'
		  end
	  %% Line 1691
	  <'float',_cor10,_cor11> when 'true' ->
	      {'float',[]}
	  %% Line 1692
	  <'/',_cor12,_cor13> when 'true' ->
	      {'float',[]}
	  %% Line 1694
	  <'div',[_cor14|[_cor15|[]]],_cor16> when 'true' ->
	      {'integer',[]}
	  %% Line 1695
	  <'rem',[_cor17|[_cor18|[]]],_cor19> when 'true' ->
	      {'integer',[]}
	  %% Line 1696
	  <'length',[_cor20|[]],_cor21> when 'true' ->
	      {'integer',[]}
	  %% Line 1697
	  <'size',[_cor22|[]],_cor23> when 'true' ->
	      {'integer',[]}
	  %% Line 1698
	  <'trunc',[_cor24|[]],_cor25> when 'true' ->
	      {'integer',[]}
	  %% Line 1699
	  <'round',[_cor26|[]],_cor27> when 'true' ->
	      {'integer',[]}
	  %% Line 1700
	  <'band',[_cor28|[_cor29|[]]],_cor30> when 'true' ->
	      {'integer',[]}
	  %% Line 1701
	  <'bor',[_cor31|[_cor32|[]]],_cor33> when 'true' ->
	      {'integer',[]}
	  %% Line 1702
	  <'bxor',[_cor34|[_cor35|[]]],_cor36> when 'true' ->
	      {'integer',[]}
	  %% Line 1703
	  <'bnot',[_cor37|[]],_cor38> when 'true' ->
	      {'integer',[]}
	  %% Line 1704
	  <'bsl',[_cor39|[_cor40|[]]],_cor41> when 'true' ->
	      {'integer',[]}
	  %% Line 1705
	  <'bsr',[_cor42|[_cor43|[]]],_cor44> when 'true' ->
	      {'integer',[]}
	  %% Line 1707
	  <'==',[_cor45|[_cor46|[]]],_cor47> when 'true' ->
	      'bool'
	  %% Line 1708
	  <'/=',[_cor48|[_cor49|[]]],_cor50> when 'true' ->
	      'bool'
	  %% Line 1709
	  <'=<',[_cor51|[_cor52|[]]],_cor53> when 'true' ->
	      'bool'
	  %% Line 1710
	  <'<',[_cor54|[_cor55|[]]],_cor56> when 'true' ->
	      'bool'
	  %% Line 1711
	  <'>=',[_cor57|[_cor58|[]]],_cor59> when 'true' ->
	      'bool'
	  %% Line 1712
	  <'>',[_cor60|[_cor61|[]]],_cor62> when 'true' ->
	      'bool'
	  %% Line 1713
	  <'=:=',[_cor63|[_cor64|[]]],_cor65> when 'true' ->
	      'bool'
	  %% Line 1714
	  <'=/=',[_cor66|[_cor67|[]]],_cor68> when 'true' ->
	      'bool'
	  %% Line 1715
	  <'not',[_cor69|[]],_cor70> when 'true' ->
	      'bool'
	  %% Line 1716
	  <'and',[_cor71|[_cor72|[]]],_cor73> when 'true' ->
	      'bool'
	  %% Line 1717
	  <'or',[_cor74|[_cor75|[]]],_cor76> when 'true' ->
	      'bool'
	  %% Line 1718
	  <'xor',[_cor77|[_cor78|[]]],_cor79> when 'true' ->
	      'bool'
	  %% Line 1719
	  <'is_atom',[_cor80|[]],_cor81> when 'true' ->
	      'bool'
	  %% Line 1720
	  <'is_boolean',[_cor82|[]],_cor83> when 'true' ->
	      'bool'
	  %% Line 1721
	  <'is_binary',[_cor84|[]],_cor85> when 'true' ->
	      'bool'
	  %% Line 1722
	  <'is_float',[_cor86|[]],_cor87> when 'true' ->
	      'bool'
	  %% Line 1723
	  <'is_function',[_cor88|[]],_cor89> when 'true' ->
	      'bool'
	  %% Line 1724
	  <'is_integer',[_cor90|[]],_cor91> when 'true' ->
	      'bool'
	  %% Line 1725
	  <'is_list',[_cor92|[]],_cor93> when 'true' ->
	      'bool'
	  %% Line 1726
	  <'is_number',[_cor94|[]],_cor95> when 'true' ->
	      'bool'
	  %% Line 1727
	  <'is_pid',[_cor96|[]],_cor97> when 'true' ->
	      'bool'
	  %% Line 1728
	  <'is_port',[_cor98|[]],_cor99> when 'true' ->
	      'bool'
	  %% Line 1729
	  <'is_reference',[_cor100|[]],_cor101> when 'true' ->
	      'bool'
	  %% Line 1730
	  <'is_tuple',[_cor102|[]],_cor103> when 'true' ->
	      'bool'
	  %% Line 1732
	  <'node',[],_cor104> when 'true' ->
	      {'atom',[]}
	  %% Line 1733
	  <'node',[_cor105|[]],_cor106> when 'true' ->
	      {'atom',[]}
	  %% Line 1734
	  <'hd',[_cor107|[]],_cor108> when 'true' ->
	      'term'
	  %% Line 1735
	  <'tl',[_cor109|[]],_cor110> when 'true' ->
	      'term'
	  %% Line 1736
	  <'get',[_cor111|[]],_cor112> when 'true' ->
	      'term'
	  %% Line 1737
	  <'raise',[_cor113|[_cor114|[]]],_cor115> when 'true' ->
	      'exception'
	  %% Line 1738
	  <Bif,_cor116,_cor117>
	      when call 'erlang':'is_atom'
		    (_cor2) ->
	      'term'
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'bif_type',3}}] )
	    -| ['compiler_generated'] )
	end
'is_bif_safe'/2 =
    %% Line 1740
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'/=',2> when 'true' ->
	      'true'
	  %% Line 1741
	  <'<',2> when 'true' ->
	      'true'
	  %% Line 1742
	  <'=/=',2> when 'true' ->
	      'true'
	  %% Line 1743
	  <'=:=',2> when 'true' ->
	      'true'
	  %% Line 1744
	  <'=<',2> when 'true' ->
	      'true'
	  %% Line 1745
	  <'==',2> when 'true' ->
	      'true'
	  %% Line 1746
	  <'>',2> when 'true' ->
	      'true'
	  %% Line 1747
	  <'>=',2> when 'true' ->
	      'true'
	  %% Line 1748
	  <'is_atom',1> when 'true' ->
	      'true'
	  %% Line 1749
	  <'is_boolean',1> when 'true' ->
	      'true'
	  %% Line 1750
	  <'is_binary',1> when 'true' ->
	      'true'
	  %% Line 1751
	  <'is_float',1> when 'true' ->
	      'true'
	  %% Line 1752
	  <'is_function',1> when 'true' ->
	      'true'
	  %% Line 1753
	  <'is_integer',1> when 'true' ->
	      'true'
	  %% Line 1754
	  <'is_list',1> when 'true' ->
	      'true'
	  %% Line 1755
	  <'is_number',1> when 'true' ->
	      'true'
	  %% Line 1756
	  <'is_pid',1> when 'true' ->
	      'true'
	  %% Line 1757
	  <'is_port',1> when 'true' ->
	      'true'
	  %% Line 1758
	  <'is_reference',1> when 'true' ->
	      'true'
	  %% Line 1759
	  <'is_tuple',1> when 'true' ->
	      'true'
	  %% Line 1760
	  <'get',1> when 'true' ->
	      'true'
	  %% Line 1761
	  <'self',0> when 'true' ->
	      'true'
	  %% Line 1762
	  <'node',0> when 'true' ->
	      'true'
	  %% Line 1763
	  <_cor4,_cor5> when 'true' ->
	      'false'
	end
'arith_type'/2 =
    %% Line 1765
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[A|[B|[]]],Vst> when 'true' ->
	      let <_cor3> =
		  %% Line 1766
		  apply 'get_term_type'/2
		      (A, _cor0)
	      in  let <_cor2> =
		      %% Line 1766
		      apply 'get_term_type'/2
			  (B, _cor0)
		  in  %% Line 1766
		      case <_cor3,_cor2> of
			%% Line 1767
			<{'float',_cor7},_cor8> when 'true' ->
			    {'float',[]}
			%% Line 1768
			<_cor9,{'float',_cor10}> when 'true' ->
			    {'float',[]}
			%% Line 1769
			<_cor11,_cor12> when 'true' ->
			    'number'
		      end
	  %% Line 1771
	  <_cor13,_cor14> when 'true' ->
	      'number'
	end
'return_type'/2 =
    %% Line 1773
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'extfunc',M,F,A},Vst> when 'true' ->
	      apply 'return_type_1'/4
		  (M, F, A, _cor0)
	  %% Line 1774
	  <_cor4,_cor5> when 'true' ->
	      'term'
	end
'return_type_1'/4 =
    %% Line 1776
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'erlang','setelement',3,Vst> when 'true' ->
	      let <_11372> =
		  %% Line 1779
		  apply 'get_term_type'/2
		      ({'x',1}, _cor0)
	      in  let <_cor6> =
		      %% Line 1779
		      case _11372 of
			%% Line 1780
			<TT = {'tuple',_cor19}> when 'true' ->
			    _11372
			%% Line 1781
			<_cor20> when 'true' ->
			    {'tuple',[0]}
		      end
		  in  %% Line 1783
		      case apply 'get_term_type'/2
			       ({'x',0}, _cor0) of
			%% Line 1784
			<{'integer',[]}> when 'true' ->
			    _cor6
			%% Line 1785
			<{'integer',I}> when 'true' ->
			    apply 'upgrade_tuple_type'/2
				({'tuple',[I|[]]}, _cor6)
			%% Line 1786
			<_cor21> when 'true' ->
			    _cor6
		      end
	  %% Line 1788
	  <'erlang',F,A,_cor22> when 'true' ->
	      %% Line 1789
	      apply 'return_type_erl'/2
		  (_cor2, _cor1)
	  %% Line 1790
	  <'math',F,A,_cor23> when 'true' ->
	      %% Line 1791
	      apply 'return_type_math'/2
		  (_cor2, _cor1)
	  %% Line 1792
	  <M,F,A,_cor24>
	      when try
		    let <_cor9> =
			call 'erlang':'is_atom'
			    (_cor3)
		    in  let <_cor10> =
			    call 'erlang':'is_atom'
				(_cor2)
			in  let <_cor11> =
				call 'erlang':'is_integer'
				    (_cor1)
			    in  let <_cor12> =
				    call 'erlang':'>='
					(_cor1, 0)
				in  let <_cor13> =
					call 'erlang':'and'
					    (_cor11, _cor12)
				    in  let <_cor14> =
					    call 'erlang':'and'
						(_cor10, _cor13)
					in  call 'erlang':'and'
						(_cor9, _cor14)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1793
	      'term'
	  ( <_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'return_type_1',4}}] )
	    -| ['compiler_generated'] )
	end
'return_type_erl'/2 =
    %% Line 1795
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'exit',1> when 'true' ->
	      'exception'
	  %% Line 1796
	  <'throw',1> when 'true' ->
	      'exception'
	  %% Line 1797
	  <'fault',1> when 'true' ->
	      'exception'
	  %% Line 1798
	  <'fault',2> when 'true' ->
	      'exception'
	  %% Line 1799
	  <'error',1> when 'true' ->
	      'exception'
	  %% Line 1800
	  <'error',2> when 'true' ->
	      'exception'
	  %% Line 1801
	  <F,A>
	      when try
		    let <_cor2> =
			call 'erlang':'is_atom'
			    (_cor1)
		    in  let <_cor3> =
			    call 'erlang':'is_integer'
				(_cor0)
			in  let <_cor4> =
				call 'erlang':'>='
				    (_cor0, 0)
			    in  let <_cor5> =
				    call 'erlang':'and'
					(_cor3, _cor4)
				in  call 'erlang':'and'
					(_cor2, _cor5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      'term'
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'return_type_erl',2}}] )
	    -| ['compiler_generated'] )
	end
'return_type_math'/2 =
    %% Line 1803
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'cos',1> when 'true' ->
	      {'float',[]}
	  %% Line 1804
	  <'cosh',1> when 'true' ->
	      {'float',[]}
	  %% Line 1805
	  <'sin',1> when 'true' ->
	      {'float',[]}
	  %% Line 1806
	  <'sinh',1> when 'true' ->
	      {'float',[]}
	  %% Line 1807
	  <'tan',1> when 'true' ->
	      {'float',[]}
	  %% Line 1808
	  <'tanh',1> when 'true' ->
	      {'float',[]}
	  %% Line 1809
	  <'acos',1> when 'true' ->
	      {'float',[]}
	  %% Line 1810
	  <'acosh',1> when 'true' ->
	      {'float',[]}
	  %% Line 1811
	  <'asin',1> when 'true' ->
	      {'float',[]}
	  %% Line 1812
	  <'asinh',1> when 'true' ->
	      {'float',[]}
	  %% Line 1813
	  <'atan',1> when 'true' ->
	      {'float',[]}
	  %% Line 1814
	  <'atanh',1> when 'true' ->
	      {'float',[]}
	  %% Line 1815
	  <'erf',1> when 'true' ->
	      {'float',[]}
	  %% Line 1816
	  <'erfc',1> when 'true' ->
	      {'float',[]}
	  %% Line 1817
	  <'exp',1> when 'true' ->
	      {'float',[]}
	  %% Line 1818
	  <'log',1> when 'true' ->
	      {'float',[]}
	  %% Line 1819
	  <'log10',1> when 'true' ->
	      {'float',[]}
	  %% Line 1820
	  <'sqrt',1> when 'true' ->
	      {'float',[]}
	  %% Line 1821
	  <'atan2',2> when 'true' ->
	      {'float',[]}
	  %% Line 1822
	  <'pow',2> when 'true' ->
	      {'float',[]}
	  %% Line 1823
	  <'pi',0> when 'true' ->
	      {'float',[]}
	  %% Line 1824
	  <F,A>
	      when try
		    let <_cor2> =
			call 'erlang':'is_atom'
			    (_cor1)
		    in  let <_cor3> =
			    call 'erlang':'is_integer'
				(_cor0)
			in  let <_cor4> =
				call 'erlang':'>='
				    (_cor0, 0)
			    in  let <_cor5> =
				    call 'erlang':'and'
					(_cor3, _cor4)
				in  call 'erlang':'and'
					(_cor2, _cor5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      'term'
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'return_type_math',2}}] )
	    -| ['compiler_generated'] )
	end
'min'/2 =
    %% Line 1830
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <A,B>
	      when try
		    let <_cor2> =
			call 'erlang':'is_integer'
			    (_cor1)
		    in  let <_cor3> =
			    call 'erlang':'is_integer'
				(_cor0)
			in  let <_cor4> =
				call 'erlang':'<'
				    (_cor1, _cor0)
			    in  let <_cor5> =
				    call 'erlang':'and'
					(_cor3, _cor4)
				in  call 'erlang':'and'
					(_cor2, _cor5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      _cor1
	  %% Line 1831
	  <A,B>
	      when let <_cor6> =
		    call 'erlang':'is_integer'
			(_cor1)
		in  let <_cor7> =
			call 'erlang':'is_integer'
			    (_cor0)
		    in  call 'erlang':'and'
			    (_cor6, _cor7) ->
	      _cor0
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'min',2}}] )
	    -| ['compiler_generated'] )
	end
'normalize_disassembled_code'/1 =
    %% Line 1847
    fun (_cor0) ->
	let <Index> =
	    %% Line 1848
	    apply 'ndc_index'/2
		(_cor0, [])
	in  %% Line 1849
	    apply 'ndc'/3
		(_cor0, Index, [])
'ndc_index'/2 =
    %% Line 1851
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'function',Name,Arity,Entry,_X_Code}|Fs],Acc> when 'true' ->
	      %% Line 1852
	      apply 'ndc_index'/2
		  (Fs, [{{Name,Arity},Entry}|_cor0])
	  %% Line 1853
	  <[],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 1854
		  call 'lists':'sort'
		      (_cor0)
	      in  %% Line 1854
		  call 'gb_trees':'from_orddict'
		      (_cor2)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'ndc_index',2}}] )
	    -| ['compiler_generated'] )
	end
'ndc'/3 =
    %% Line 1856
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'function',Name,Arity,Entry,Code0}|Fs],D,Acc> when 'true' ->
	      let <Code> =
		  %% Line 1857
		  apply 'ndc_1'/3
		      (Code0, _cor1, [])
	      in  %% Line 1858
		  apply 'ndc'/3
		      (Fs, _cor1, [{'function',Name,Arity,Entry,Code}|_cor0])
	  %% Line 1859
	  <[],_cor7,Acc> when 'true' ->
	      call 'lists':'reverse'
		  (_cor0)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'ndc',3}}] )
	    -| ['compiler_generated'] )
	end
'ndc_1'/3 =
    %% Line 1861
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{Op = 'call',A,{_cor9,F,_cor10}}|Is],D,Acc>
	      when call 'erlang':'=:='
		    (_cor10,
		     A) ->
	      let <_cor3> =
		  %% Line 1862
		  call 'gb_trees':'get'
		      ({F,A}, _cor1)
	      in  %% Line 1862
		  apply 'ndc_1'/3
		      (Is, _cor1, [{Op,A,{'f',_cor3}}|_cor0])
	  %% Line 1863
	  <[{Op = 'call_only',A,{_cor11,F,_cor12}}|Is],D,Acc>
	      when call 'erlang':'=:='
		    (_cor12,
		     A) ->
	      let <_cor4> =
		  %% Line 1864
		  call 'gb_trees':'get'
		      ({F,A}, _cor1)
	      in  %% Line 1864
		  apply 'ndc_1'/3
		      (Is, _cor1, [{Op,A,{'f',_cor4}}|_cor0])
	  %% Line 1865
	  <[{Op = 'call_last',A,{_cor13,F,_cor14},Sz}|Is],D,Acc>
	      when call 'erlang':'=:='
		    (_cor14,
		     A) ->
	      let <_cor5> =
		  %% Line 1866
		  call 'gb_trees':'get'
		      ({F,A}, _cor1)
	      in  %% Line 1866
		  apply 'ndc_1'/3
		      (Is, _cor1, [{Op,A,{'f',_cor5},Sz}|_cor0])
	  %% Line 1867
	  <[{'arithbif',Op,F,Src,Dst}|Is],D,Acc> when 'true' ->
	      %% Line 1868
	      apply 'ndc_1'/3
		  (Is, _cor1, [{'bif',Op,F,Src,Dst}|_cor0])
	  %% Line 1869
	  <[{'arithfbif',Op,F,Src,Dst}|Is],D,Acc> when 'true' ->
	      %% Line 1870
	      apply 'ndc_1'/3
		  (Is, _cor1, [{'bif',Op,F,Src,Dst}|_cor0])
	  %% Line 1871
	  <[{'test',Op = 'bs_start_match2',F,[A1|[Live|[A3|[Dst|[]]]]]}|Is],D,Acc> when 'true' ->
	      %% Line 1872
	      apply 'ndc_1'/3
		  (Is, _cor1, [{'test',Op,F,Live,[A1|[A3|[]]],Dst}|_cor0])
	  %% Line 1873
	  <[{'test',Op = 'bs_get_binary2',F,[A1|[Live|[A3|[A4|[A5|[Dst|[]]]]]]]}|Is],D,Acc> when 'true' ->
	      %% Line 1874
	      apply 'ndc_1'/3
		  (Is, _cor1, [{'test',Op,F,Live,[A1|[A3|[A4|[A5|[]]]]],Dst}|_cor0])
	  %% Line 1875
	  <[{'test',Op = 'bs_get_float2',F,[A1|[Live|[A3|[A4|[A5|[Dst|[]]]]]]]}|Is],D,Acc> when 'true' ->
	      %% Line 1876
	      apply 'ndc_1'/3
		  (Is, _cor1, [{'test',Op,F,Live,[A1|[A3|[A4|[A5|[]]]]],Dst}|_cor0])
	  %% Line 1877
	  <[{'test',Op = 'bs_get_integer2',F,[A1|[Live|[A3|[A4|[A5|[Dst|[]]]]]]]}|Is],D,Acc> when 'true' ->
	      %% Line 1878
	      apply 'ndc_1'/3
		  (Is, _cor1, [{'test',Op,F,Live,[A1|[A3|[A4|[A5|[]]]]],Dst}|_cor0])
	  %% Line 1879
	  <[{'test',Op = 'bs_get_utf8',F,[A1|[Live|[A3|[Dst|[]]]]]}|Is],D,Acc> when 'true' ->
	      %% Line 1880
	      apply 'ndc_1'/3
		  (Is, _cor1, [{'test',Op,F,Live,[A1|[A3|[]]],Dst}|_cor0])
	  %% Line 1881
	  <[{'test',Op = 'bs_get_utf16',F,[A1|[Live|[A3|[Dst|[]]]]]}|Is],D,Acc> when 'true' ->
	      %% Line 1882
	      apply 'ndc_1'/3
		  (Is, _cor1, [{'test',Op,F,Live,[A1|[A3|[]]],Dst}|_cor0])
	  %% Line 1883
	  <[{'test',Op = 'bs_get_utf32',F,[A1|[Live|[A3|[Dst|[]]]]]}|Is],D,Acc> when 'true' ->
	      %% Line 1884
	      apply 'ndc_1'/3
		  (Is, _cor1, [{'test',Op,F,Live,[A1|[A3|[]]],Dst}|_cor0])
	  %% Line 1885
	  <[I|Is],D,Acc> when 'true' ->
	      %% Line 1886
	      apply 'ndc_1'/3
		  (Is, _cor1, [I|_cor0])
	  %% Line 1887
	  <[],_cor15,Acc> when 'true' ->
	      %% Line 1888
	      call 'lists':'reverse'
		  (_cor0)
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'ndc_1',3}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('beam_validator')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('beam_validator', _cor0)
end