module 'sys_core_inline' ['module'/2,
			  'module_info'/0,
			  'module_info'/1]
    attributes [%% Line 31
		'type' =
		    %% Line 31
		    [{{'record','c_alias'},[{'record_field',31,{'atom',31,'anno'},{'nil',31}}|[{'record_field',31,{'atom',31,'var'}}|[{'record_field',32,{'atom',32,'pat'}}]]],[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','c_apply'},[{'record_field',34,{'atom',34,'anno'},{'nil',34}}|[{'record_field',34,{'atom',34,'op'}}|[{'record_field',35,{'atom',35,'args'}}]]],[]}],
		%% Line 37
		'type' =
		    %% Line 37
		    [{{'record','c_binary'},[{'record_field',37,{'atom',37,'anno'},{'nil',37}}|[{'typed_record_field',{'record_field',37,{'atom',37,'segments'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'type',37,'list',[{'remote_type',37,[{'atom',37,'cerl'}|[{'atom',37,'c_bitstr'}|[[]]]]}]}]]}}]],[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','c_bitstr'},[{'record_field',39,{'atom',39,'anno'},{'nil',39}}|[{'record_field',39,{'atom',39,'val'}}|[{'record_field',40,{'atom',40,'size'}}|[{'record_field',41,{'atom',41,'unit'}}|[{'record_field',42,{'atom',42,'type'}}|[{'record_field',43,{'atom',43,'flags'}}]]]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{{'record','c_call'},[{'record_field',45,{'atom',45,'anno'},{'nil',45}}|[{'record_field',45,{'atom',45,'module'}}|[{'record_field',46,{'atom',46,'name'}}|[{'record_field',47,{'atom',47,'args'}}]]]],[]}],
		%% Line 49
		'type' =
		    %% Line 49
		    [{{'record','c_case'},[{'record_field',49,{'atom',49,'anno'},{'nil',49}}|[{'record_field',49,{'atom',49,'arg'}}|[{'record_field',50,{'atom',50,'clauses'}}]]],[]}],
		%% Line 52
		'type' =
		    %% Line 52
		    [{{'record','c_catch'},[{'record_field',52,{'atom',52,'anno'},{'nil',52}}|[{'record_field',52,{'atom',52,'body'}}]],[]}],
		%% Line 54
		'type' =
		    %% Line 54
		    [{{'record','c_clause'},[{'record_field',54,{'atom',54,'anno'},{'nil',54}}|[{'record_field',54,{'atom',54,'pats'}}|[{'record_field',55,{'atom',55,'guard'}}|[{'record_field',56,{'atom',56,'body'}}]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','c_cons'},[{'record_field',58,{'atom',58,'anno'},{'nil',58}}|[{'record_field',58,{'atom',58,'hd'}}|[{'record_field',59,{'atom',59,'tl'}}]]],[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{{'record','c_fun'},[{'record_field',61,{'atom',61,'anno'},{'nil',61}}|[{'record_field',61,{'atom',61,'vars'}}|[{'record_field',62,{'atom',62,'body'}}]]],[]}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{{'record','c_let'},[{'record_field',64,{'atom',64,'anno'},{'nil',64}}|[{'record_field',64,{'atom',64,'vars'}}|[{'record_field',65,{'atom',65,'arg'}}|[{'record_field',66,{'atom',66,'body'}}]]]],[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{{'record','c_letrec'},[{'record_field',68,{'atom',68,'anno'},{'nil',68}}|[{'record_field',68,{'atom',68,'defs'}}|[{'record_field',69,{'atom',69,'body'}}]]],[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{{'record','c_literal'},[{'record_field',71,{'atom',71,'anno'},{'nil',71}}|[{'record_field',71,{'atom',71,'val'}}]],[]}],
		%% Line 73
		'type' =
		    %% Line 73
		    [{{'record','c_map'},[{'record_field',73,{'atom',73,'anno'},{'nil',73}}|[{'typed_record_field',{'record_field',74,{'atom',74,'arg'},{'record',74,'c_literal',[{'record_field',74,{'atom',74,'val'},{'map',74,[]}}]}},{'type',74,'union',[{'remote_type',74,[{'atom',74,'cerl'}|[{'atom',74,'c_var'}|[[]]]]}|[{'remote_type',74,[{'atom',74,'cerl'}|[{'atom',74,'c_literal'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',75,{'atom',75,'es'}},{'type',75,'union',[{'atom',75,'undefined'}|[{'type',75,'list',[{'remote_type',75,[{'atom',75,'cerl'}|[{'atom',75,'c_map_pair'}|[[]]]]}]}]]}}]]],[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{{'record','c_map_pair'},[{'record_field',77,{'atom',77,'anno'},{'nil',77}}|[{'typed_record_field',{'record_field',78,{'atom',78,'op'}},{'type',78,'union',[{'atom',78,'undefined'}|[{'type',78,'record',[{'atom',78,'c_literal'}|[{'type',78,'field_type',[{'atom',78,'val'}|[{'atom',78,'assoc'}]]}]]}|[{'type',78,'record',[{'atom',78,'c_literal'}|[{'type',78,'field_type',[{'atom',78,'val'}|[{'atom',78,'exact'}]]}]]}]]]}}|[{'record_field',79,{'atom',79,'key'}}|[{'record_field',80,{'atom',80,'val'}}]]]],[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{{'record','c_module'},[{'record_field',82,{'atom',82,'anno'},{'nil',82}}|[{'record_field',82,{'atom',82,'name'}}|[{'record_field',83,{'atom',83,'exports'}}|[{'record_field',84,{'atom',84,'attrs'}}|[{'record_field',85,{'atom',85,'defs'}}]]]]],[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{{'record','c_primop'},[{'record_field',87,{'atom',87,'anno'},{'nil',87}}|[{'record_field',87,{'atom',87,'name'}}|[{'record_field',88,{'atom',88,'args'}}]]],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{{'record','c_receive'},[{'record_field',90,{'atom',90,'anno'},{'nil',90}}|[{'record_field',90,{'atom',90,'clauses'}}|[{'record_field',91,{'atom',91,'timeout'}}|[{'record_field',92,{'atom',92,'action'}}]]]],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{{'record','c_seq'},[{'record_field',94,{'atom',94,'anno'},{'nil',94}}|[{'record_field',94,{'atom',94,'arg'}}|[{'record_field',95,{'atom',95,'body'}}]]],[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','c_try'},[{'record_field',97,{'atom',97,'anno'},{'nil',97}}|[{'record_field',97,{'atom',97,'arg'}}|[{'record_field',98,{'atom',98,'vars'}}|[{'record_field',99,{'atom',99,'body'}}|[{'record_field',100,{'atom',100,'evars'}}|[{'record_field',101,{'atom',101,'handler'}}]]]]]],[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','c_tuple'},[{'record_field',103,{'atom',103,'anno'},{'nil',103}}|[{'record_field',103,{'atom',103,'es'}}]],[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{{'record','c_values'},[{'record_field',105,{'atom',105,'anno'},{'nil',105}}|[{'record_field',105,{'atom',105,'es'}}]],[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{{'record','c_var'},[{'record_field',107,{'atom',107,'anno'},{'nil',107}}|[{'typed_record_field',{'record_field',107,{'atom',107,'name'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'remote_type',107,[{'atom',107,'cerl'}|[{'atom',107,'var_name'}|[[]]]]}]]}}]],[]}],
		%% Line 51
		'type' =
		    %% Line 51
		    [{{'record','inline'},[{'record_field',51,{'atom',51,'exports'},{'nil',51}}|[{'record_field',51,{'atom',51,'thresh'},{'integer',51,0}}|[{'record_field',51,{'atom',51,'inline'},{'nil',51}}]]],[]}],
		%% Line 54
		'type' =
		    %% Line 54
		    [{{'record','fstat'},[{'typed_record_field',{'record_field',54,{'atom',54,'func'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'atom',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'arity'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'byte',[]}]]}}|[{'record_field',56,{'atom',56,'def'}}|[{'record_field',57,{'atom',57,'weight'},{'integer',57,0}}|[{'typed_record_field',{'record_field',58,{'atom',58,'inline'},{'atom',58,'false'}},{'type',58,'boolean',[]}}|[{'typed_record_field',{'record_field',59,{'atom',59,'modified'},{'atom',59,'false'}},{'type',59,'boolean',[]}}]]]]]],[]}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{{'record','ifun'},[{'typed_record_field',{'record_field',62,{'atom',62,'func'}},{'type',62,'union',[{'atom',62,'undefined'}|[{'type',62,'atom',[]}]]}}|[{'typed_record_field',{'record_field',63,{'atom',63,'arity'}},{'type',63,'union',[{'atom',63,'undefined'}|[{'type',63,'byte',[]}]]}}|[{'record_field',64,{'atom',64,'vars'}}|[{'record_field',65,{'atom',65,'body'}}|[{'record_field',66,{'atom',66,'weight'}}]]]]],[]}],
		%% Line 68
		'spec' =
		    %% Line 68
		    [{{'module',2},[{'type',68,'fun',[{'type',68,'product',[{'type',68,'record',[{'atom',68,'c_module'}]}|[{'type',68,'list',[{'var',68,'_'}]}]]}|[{'type',68,'tuple',[{'atom',68,'ok'}|[{'type',68,'record',[{'atom',68,'c_module'}]}]]}]]}]}]]
'module'/2 =
    %% Line 70
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Mod = {'c_module',_cor14,_cor15,Es,_cor16,Ds0},Opts> when 'true' ->
	      %% Line 71
	      case apply 'inline_option'/1
		       (_cor0) of
		%% Line 72
		<{Thresh,Fs}>
		    when let <_cor2> =
			  call 'erlang':'is_integer'
			      (Thresh)
		      in  let <_cor3> =
			      call 'erlang':'>'
				  (Thresh, 0)
			  in  let <_cor4> =
				  call 'erlang':'and'
				      (_cor2, _cor3)
			      in  let <_cor5> =
				      call 'erlang':'=/='
					  (Fs, [])
				  in  call 'erlang':'or'
					  (_cor4, _cor5) ->
		    do  let <_1237> =
			    %% Line 73
			    call 'proplists':'get_bool'
				('verbose', _cor0)
			in  %% Line 73
			    case _1237 of
			      %% Line 74
			      <'true'> when 'true' ->
				  %% Line 75
				  call 'io':'format'
				      ([79|[108|[100|[32|[105|[110|[108|[105|[110|[101|[114|[58|[32|[116|[104|[114|[101|[115|[104|[111|[108|[100|[61|[126|[112|[32|[102|[117|[110|[99|[116|[105|[111|[110|[115|[61|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 76
																																	 [Thresh|[Fs|[]]])
			      %% Line 77
			      <'false'> when 'true' ->
				  'ok'
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_1237})
				-| ['compiler_generated'] )
			    end
			let <Ds1> =
			    %% Line 79
			    apply 'inline'/2
				(Ds0, {'inline',Es,Thresh,Fs})
			in  let <_cor10> =
				%% Line 80
				call 'erlang':'setelement'
				    (6, _cor1, Ds1)
			    in  %% Line 80
				{'ok',_cor10}
		%% Line 81
		<_X_Other> when 'true' ->
		    {'ok',_cor1}
	      end
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'module',2}}] )
	    -| ['compiler_generated'] )
	end
'inline_option'/1 =
    %% Line 84
    fun (_cor0) ->
	let <_cor6> =
	    %% Line 85
	    fun (_cor3,_cor2) ->
		case <_cor3,_cor2> of
		  <{'inline',Val = {_cor8,_cor9}},{T,Fs}> when 'true' ->
		      %% Line 86
		      {T,[Val|Fs]}
		  %% Line 87
		  <{'inline',Val},{T,Fs}>
		      when call 'erlang':'is_list'
			    (Val) ->
		      let <_cor1> =
			  %% Line 88
			  call 'erlang':'++'
			      (Val, Fs)
		      in  %% Line 88
			  {T,_cor1}
		  %% Line 89
		  <{'inline',Val},{_cor10,Fs}>
		      when call 'erlang':'is_integer'
			    (Val) ->
		      %% Line 90
		      {Val,Fs}
		  %% Line 91
		  <_X_Opt,Def = {_cor11,_cor12}> when 'true' ->
		      _cor2
		  ( <_cor5,_cor4> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_cor3,_cor2})
			  -| [{'function_name',{'-inline_option/1-fun-0-',2}}] )
		    -| ['compiler_generated'] )
		end
	in  %% Line 85
	    call 'lists':'foldl'
		(_cor6, %% Line 92
			{0,[]}, _cor0)
'inline'/2 =
    %% Line 97
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 99
	    fun (_cor3) ->
		case _cor3 of
		  <Def = {{'c_var',_cor63,{F,A}},{'c_fun',_cor64,_cor65,B}}> when 'true' ->
		      let <Weight> =
			  %% Line 100
			  call 'cerl_trees':'fold'
			      ('weight_func'/2, 0, B)
		      in  %% Line 101
			  {'fstat',F,A,_cor3,Weight,'false','false'}
		  ( <_cor4> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_cor3})
			  -| [{'function_name',{'-inline/2-fun-1-',1}}] )
		    -| ['compiler_generated'] )
		end
	in  let <Fs1> =
		%% Line 99
		call 'lists':'map'
		    (_cor5, _cor1)
	    in  let <_cor33> =
		    %% Line 104
		    fun (_cor30,_cor29) ->
			%% Line 105
			( case _cor0 of
			    ( <( {'inline',_cor66,_rec1,_cor67}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_1158> =
				      apply 'is_inlineable'/3
					  (_cor30, _rec1, _cor67)
				  in  case _1158 of
					%% Line 107
					<'true'> when 'true' ->
					    %% Line 108
					    ( case _cor30 of
						( <( {'fstat',_cor72,_cor73,_rec3,_cor74,_cor75,_cor76}
						     -| ['compiler_generated'] )> when 'true' ->
						      case _rec3 of
							<{_cor78,Ffun}> when 'true' ->
							    %% Line 111
							    ( case Ffun of
								( <( {'c_fun',_cor91,_rec6,_cor92}
								     -| ['compiler_generated'] )> when 'true' ->
								      let <If> =
									  {'ifun',_cor72,_cor73,_rec6,_cor92,_cor74}
								      in  let <_cor27> =
									      %% Line 114
									      call 'erlang':'setelement'
										  (6, _cor30, 'true')
									  in  %% Line 114
									      {_cor27,[If|_cor29]}
								  -| ['compiler_generated'] )
								( <_cor93> when 'true' ->
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'error'
													     -| ['compiler_generated'] )
									    (( {'badrecord','c_fun'}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							      -| ['compiler_generated'] )
							( <_cor13> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_rec3})
							  -| ['compiler_generated'] )
						      end
						  -| ['compiler_generated'] )
						( <_cor77> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','fstat'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					%% Line 115
					<'false'> when 'true' ->
					    {_cor30,_cor29}
					( <_cor28> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_1158})
					  -| ['compiler_generated'] )
				      end
			      -| ['compiler_generated'] )
			    ( <_cor68> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','inline'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		in  let <_1059> =
			%% Line 104
			call 'lists':'mapfoldl'
			    (_cor33, %% Line 117
				     [], Fs1)
		    in  %% Line 104
			case _1059 of
			  <{Fs2,Is0}> when 'true' ->
			      let <_cor41> =
				  %% Line 118
				  fun (_cor39) ->
				      case _cor39 of
					<If = {'ifun',_cor110,_cor111,_cor112,B,_cor113}> when 'true' ->
					    let <_cor35> =
						%% Line 119
						apply 'match_fail_fun'/0
						    ()
					    in  let <_rec10> =
						    %% Line 119
						    call 'cerl_trees':'map'
							(_cor35, B)
						in  %% Line 119
						    call 'erlang':'setelement'
							(5, _cor39, _rec10)
					( <_cor40> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor39})
						-| [{'function_name',{'-inline/2-fun-3-',1}}] )
					  -| ['compiler_generated'] )
				      end
			      in  let <Is1> =
				      %% Line 118
				      call 'lists':'map'
					  (_cor41, Is0)
				  in  let <_cor48> =
					  %% Line 121
					  ( letrec
						'lc$^0'/1 =
						    fun (_cor45) ->
							case _cor45 of
							  <[If|_cor44]> when 'true' ->
							      let <_cor46> =
								  apply 'inline_inline'/2
								      (If, Is1)
							      in  let <_cor47> =
								      apply 'lc$^0'/1
									  (_cor44)
								  in  ( [_cor46|_cor47]
									-| ['compiler_generated'] )
							  <[]> when 'true' ->
							      []
							  ( <_1991> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor45})
								  -| [{'function_name',{'lc$^0',1}}] )
							    -| ['compiler_generated'] )
							end
					    in  apply 'lc$^0'/1
						    (Is1)
					    -| ['list_comprehension'] )
				      in  let <_cor55> =
					      %% Line 125
					      ( letrec
						    'lc$^1'/1 =
							fun (_cor52) ->
							    case _cor52 of
							      <[F|_cor51]> when 'true' ->
								  let <_cor53> =
								      apply 'inline_func'/2
									  (F, _cor48)
								  in  let <_cor54> =
									  apply 'lc$^1'/1
									      (_cor51)
								      in  ( [_cor53|_cor54]
									    -| ['compiler_generated'] )
							      <[]> when 'true' ->
								  []
							      ( <_2009> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_cor52})
								      -| [{'function_name',{'lc$^1',1}}] )
								-| ['compiler_generated'] )
							    end
						in  apply 'lc$^1'/1
							(Fs2)
						-| ['list_comprehension'] )
					  in  %% Line 127
					      ( letrec
						    'lc$^2'/1 =
							fun (_cor59) ->
							    case _cor59 of
							      <[{'fstat',_cor120,_cor121,Def,_cor122,_cor123,_cor124}|_cor58]> when 'true' ->
								  let <_cor60> =
								      apply 'lc$^2'/1
									  (_cor58)
								  in  ( [Def|_cor60]
									-| ['compiler_generated'] )
							      ( <[_cor57|_cor58]> when 'true' ->
								    apply 'lc$^2'/1
									(_cor58)
								-| ['compiler_generated'] )
							      <[]> when 'true' ->
								  []
							      ( <_1013> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_cor59})
								      -| [{'function_name',{'lc$^2',1}}] )
								-| ['compiler_generated'] )
							    end
						in  apply 'lc$^2'/1
							(_cor55)
						-| ['list_comprehension'] )
			  ( <_cor34> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_1059})
			    -| ['compiler_generated'] )
			end
'is_inlineable'/3 =
    %% Line 131
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'fstat',_cor6,_cor7,_cor8,W,_cor9,_cor10},Thresh,_X_Ofs>
	      when call 'erlang':'=<'
		    (W,
		     _cor1) ->
	      'true'
	  %% Line 132
	  <{'fstat',F,A,_cor11,_cor12,_cor13,_cor14},_X_Thresh,Ofs> when 'true' ->
	      %% Line 133
	      call 'lists':'member'
		  ({F,A}, _cor0)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'is_inlineable',3}}] )
	    -| ['compiler_generated'] )
	end
'inline_inline'/2 =
    %% Line 140
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <If = {'ifun',_cor13,_cor14,_cor15,B,Iw},Is> when 'true' ->
	      let <Inline> =
		  %% Line 141
		  fun (_cor5) ->
		      case _cor5 of
			<Call = {'c_apply',_cor16,{'c_var',_cor17,{F,A}},As}> when 'true' ->
			    %% Line 142
			    case apply 'find_inl'/3
				     (F, A, _cor0) of
			      %% Line 143
			      <{'ifun',_cor18,_cor19,Vs,B2,W}>
				  when call 'erlang':'<'
					(W,
					 Iw) ->
				  let <_cor3> =
				      %% Line 145
				      call 'core_lib':'make_values'
					  (As)
				  in  let <_cor2> =
					  %% Line 146
					  apply 'kill_id_anns'/1
					      (B2)
				      in  %% Line 144
					  {'c_let',[],Vs,_cor3,_cor2}
			      %% Line 147
			      <_X_Other> when 'true' ->
				  _cor5
			    end
			%% Line 149
			<Core> when 'true' ->
			    _cor5
		      end
	      in  let <_rec12> =
		      %% Line 151
		      call 'cerl_trees':'map'
			  (Inline, B)
		  in  %% Line 151
		      call 'erlang':'setelement'
			  (5, _cor1, _rec12)
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'inline_inline',2}}] )
	    -| ['compiler_generated'] )
	end
'inline_func'/2 =
    %% Line 157
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Fstat = {'fstat',_cor17,_cor18,{Name,F0},_cor19,_cor20,_cor21},Is> when 'true' ->
	      let <Inline> =
		  %% Line 158
		  fun (_cor6,_cor5) ->
		      case <_cor6,_cor5> of
			<Call = {'c_apply',_cor22,{'c_var',_cor23,{F,A}},As},Mod> when 'true' ->
			    %% Line 159
			    case apply 'find_inl'/3
				     (F, A, _cor0) of
			      %% Line 160
			      <{'ifun',_cor24,_cor25,Vs,B,_cor26}> when 'true' ->
				  let <_cor3> =
				      %% Line 162
				      call 'core_lib':'make_values'
					  (As)
				  in  let <_cor2> =
					  %% Line 163
					  apply 'kill_id_anns'/1
					      (B)
				      in  %% Line 161
					  {{'c_let',[],Vs,_cor3,_cor2},%% Line 164
								       'true'}
			      %% Line 165
			      <_X_Other> when 'true' ->
				  {_cor6,_cor5}
			    end
			%% Line 167
			<Core,Mod> when 'true' ->
			    {_cor6,_cor5}
		      end
	      in  let <_166> =
		      %% Line 169
		      call 'cerl_trees':'mapfold'
			  (Inline, 'false', F0)
		  in  %% Line 169
		      case _166 of
			<{F1,Mod}> when 'true' ->
			    let <_rec14> = {Name,F1}
			    in  let <_cor13> =
				    %% Line 170
				    call 'erlang':'setelement'
					(7, _cor1, Mod)
				in  %% Line 170
				    call 'erlang':'setelement'
					(4, _cor13, _rec14)
			( <_cor10> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_166})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'inline_func',2}}] )
	    -| ['compiler_generated'] )
	end
'weight_func'/2 =
    %% Line 172
    fun (_cor1,_cor0) ->
	call 'erlang':'+'
	    (_cor0, 1)
'match_fail_fun'/0 =
    %% Line 178
    fun () ->
	%% Line 179
	fun (_cor3) ->
	    case _cor3 of
	      <P = {'c_primop',Anno0,{'c_literal',_cor5,'match_fail'},_cor6}> when 'true' ->
		  let <Anno> =
		      %% Line 180
		      call 'lists':'keydelete'
			  ('function_name', 1, Anno0)
		  in  %% Line 181
		      call 'erlang':'setelement'
			  (2, _cor3, Anno)
	      %% Line 182
	      <Other> when 'true' ->
		  _cor3
	    end
'find_inl'/3 =
    %% Line 187
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <F,A,[If = {'ifun',_cor6,_cor7,_cor8,_cor9,_cor10}|_cor11]>
	      when let <_cor12> =
		    call 'erlang':'=:='
			(_cor6, _cor2)
		in  let <_cor13> =
			call 'erlang':'=:='
			    (_cor7, _cor1)
		    in  call 'erlang':'and'
			    (_cor12, _cor13) ->
	      If
	  %% Line 188
	  <F,A,[_cor14|Is]> when 'true' ->
	      apply 'find_inl'/3
		  (_cor2, _cor1, Is)
	  %% Line 189
	  <_cor15,_cor16,[]> when 'true' ->
	      'no'
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'find_inl',3}}] )
	    -| ['compiler_generated'] )
	end
'kill_id_anns'/1 =
    %% Line 193
    fun (_cor0) ->
	let <_cor8> =
	    %% Line 194
	    fun (_cor6) ->
		case _cor6 of
		  <CFun = {'c_fun',A0,_cor10,_cor11}> when 'true' ->
		      let <A> =
			  %% Line 195
			  apply 'kill_id_anns_1'/1
			      (A0)
		      in  %% Line 196
			  call 'erlang':'setelement'
			      (2, _cor6, A)
		  %% Line 197
		  <Expr> when 'true' ->
		      let <_cor4> =
			  %% Line 200
			  call 'core_lib':'get_anno'
			      (_cor6)
		      in  let <A> =
			      %% Line 210
			      case _cor4 of
				<Anno = ['compiler_generated'|_cor3]> when 'true' ->
				    _cor4
				%% Line 212
				<Anno> when 'true' ->
				    let <_cor1> =
					%% Line 213
					call 'erlang':'--'
					    (_cor4, ['compiler_generated'])
				    in  %% Line 213
					['compiler_generated'|_cor1]
			      end
			  in  %% Line 201
			      call 'core_lib':'set_anno'
				  (_cor6, A)
		end
	in  %% Line 194
	    call 'cerl_trees':'map'
		(_cor8, _cor0)
'kill_id_anns_1'/1 =
    %% Line 204
    fun (_cor0) ->
	case _cor0 of
	  <[{'id',_cor3}|As]> when 'true' ->
	      %% Line 205
	      apply 'kill_id_anns_1'/1
		  (As)
	  %% Line 206
	  <[A|As]> when 'true' ->
	      let <_cor1> =
		  %% Line 207
		  apply 'kill_id_anns_1'/1
		      (As)
	      in  %% Line 207
		  [A|_cor1]
	  %% Line 208
	  <[]> when 'true' ->
	      []
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'kill_id_anns_1',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('sys_core_inline')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('sys_core_inline', _cor0)
end