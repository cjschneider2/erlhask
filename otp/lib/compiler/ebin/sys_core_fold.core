module 'sys_core_fold' ['format_error'/1,
			'module'/2,
			'module_info'/0,
			'module_info'/1]
    attributes [%% Line 31
		'type' =
		    %% Line 31
		    [{{'record','c_alias'},[{'record_field',31,{'atom',31,'anno'},{'nil',31}}|[{'record_field',31,{'atom',31,'var'}}|[{'record_field',32,{'atom',32,'pat'}}]]],[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','c_apply'},[{'record_field',34,{'atom',34,'anno'},{'nil',34}}|[{'record_field',34,{'atom',34,'op'}}|[{'record_field',35,{'atom',35,'args'}}]]],[]}],
		%% Line 37
		'type' =
		    %% Line 37
		    [{{'record','c_binary'},[{'record_field',37,{'atom',37,'anno'},{'nil',37}}|[{'typed_record_field',{'record_field',37,{'atom',37,'segments'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'type',37,'list',[{'remote_type',37,[{'atom',37,'cerl'}|[{'atom',37,'c_bitstr'}|[[]]]]}]}]]}}]],[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','c_bitstr'},[{'record_field',39,{'atom',39,'anno'},{'nil',39}}|[{'record_field',39,{'atom',39,'val'}}|[{'record_field',40,{'atom',40,'size'}}|[{'record_field',41,{'atom',41,'unit'}}|[{'record_field',42,{'atom',42,'type'}}|[{'record_field',43,{'atom',43,'flags'}}]]]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{{'record','c_call'},[{'record_field',45,{'atom',45,'anno'},{'nil',45}}|[{'record_field',45,{'atom',45,'module'}}|[{'record_field',46,{'atom',46,'name'}}|[{'record_field',47,{'atom',47,'args'}}]]]],[]}],
		%% Line 49
		'type' =
		    %% Line 49
		    [{{'record','c_case'},[{'record_field',49,{'atom',49,'anno'},{'nil',49}}|[{'record_field',49,{'atom',49,'arg'}}|[{'record_field',50,{'atom',50,'clauses'}}]]],[]}],
		%% Line 52
		'type' =
		    %% Line 52
		    [{{'record','c_catch'},[{'record_field',52,{'atom',52,'anno'},{'nil',52}}|[{'record_field',52,{'atom',52,'body'}}]],[]}],
		%% Line 54
		'type' =
		    %% Line 54
		    [{{'record','c_clause'},[{'record_field',54,{'atom',54,'anno'},{'nil',54}}|[{'record_field',54,{'atom',54,'pats'}}|[{'record_field',55,{'atom',55,'guard'}}|[{'record_field',56,{'atom',56,'body'}}]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','c_cons'},[{'record_field',58,{'atom',58,'anno'},{'nil',58}}|[{'record_field',58,{'atom',58,'hd'}}|[{'record_field',59,{'atom',59,'tl'}}]]],[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{{'record','c_fun'},[{'record_field',61,{'atom',61,'anno'},{'nil',61}}|[{'record_field',61,{'atom',61,'vars'}}|[{'record_field',62,{'atom',62,'body'}}]]],[]}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{{'record','c_let'},[{'record_field',64,{'atom',64,'anno'},{'nil',64}}|[{'record_field',64,{'atom',64,'vars'}}|[{'record_field',65,{'atom',65,'arg'}}|[{'record_field',66,{'atom',66,'body'}}]]]],[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{{'record','c_letrec'},[{'record_field',68,{'atom',68,'anno'},{'nil',68}}|[{'record_field',68,{'atom',68,'defs'}}|[{'record_field',69,{'atom',69,'body'}}]]],[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{{'record','c_literal'},[{'record_field',71,{'atom',71,'anno'},{'nil',71}}|[{'record_field',71,{'atom',71,'val'}}]],[]}],
		%% Line 73
		'type' =
		    %% Line 73
		    [{{'record','c_map'},[{'record_field',73,{'atom',73,'anno'},{'nil',73}}|[{'typed_record_field',{'record_field',74,{'atom',74,'arg'},{'record',74,'c_literal',[{'record_field',74,{'atom',74,'val'},{'map',74,[]}}]}},{'type',74,'union',[{'remote_type',74,[{'atom',74,'cerl'}|[{'atom',74,'c_var'}|[[]]]]}|[{'remote_type',74,[{'atom',74,'cerl'}|[{'atom',74,'c_literal'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',75,{'atom',75,'es'}},{'type',75,'union',[{'atom',75,'undefined'}|[{'type',75,'list',[{'remote_type',75,[{'atom',75,'cerl'}|[{'atom',75,'c_map_pair'}|[[]]]]}]}]]}}]]],[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{{'record','c_map_pair'},[{'record_field',77,{'atom',77,'anno'},{'nil',77}}|[{'typed_record_field',{'record_field',78,{'atom',78,'op'}},{'type',78,'union',[{'atom',78,'undefined'}|[{'type',78,'record',[{'atom',78,'c_literal'}|[{'type',78,'field_type',[{'atom',78,'val'}|[{'atom',78,'assoc'}]]}]]}|[{'type',78,'record',[{'atom',78,'c_literal'}|[{'type',78,'field_type',[{'atom',78,'val'}|[{'atom',78,'exact'}]]}]]}]]]}}|[{'record_field',79,{'atom',79,'key'}}|[{'record_field',80,{'atom',80,'val'}}]]]],[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{{'record','c_module'},[{'record_field',82,{'atom',82,'anno'},{'nil',82}}|[{'record_field',82,{'atom',82,'name'}}|[{'record_field',83,{'atom',83,'exports'}}|[{'record_field',84,{'atom',84,'attrs'}}|[{'record_field',85,{'atom',85,'defs'}}]]]]],[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{{'record','c_primop'},[{'record_field',87,{'atom',87,'anno'},{'nil',87}}|[{'record_field',87,{'atom',87,'name'}}|[{'record_field',88,{'atom',88,'args'}}]]],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{{'record','c_receive'},[{'record_field',90,{'atom',90,'anno'},{'nil',90}}|[{'record_field',90,{'atom',90,'clauses'}}|[{'record_field',91,{'atom',91,'timeout'}}|[{'record_field',92,{'atom',92,'action'}}]]]],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{{'record','c_seq'},[{'record_field',94,{'atom',94,'anno'},{'nil',94}}|[{'record_field',94,{'atom',94,'arg'}}|[{'record_field',95,{'atom',95,'body'}}]]],[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','c_try'},[{'record_field',97,{'atom',97,'anno'},{'nil',97}}|[{'record_field',97,{'atom',97,'arg'}}|[{'record_field',98,{'atom',98,'vars'}}|[{'record_field',99,{'atom',99,'body'}}|[{'record_field',100,{'atom',100,'evars'}}|[{'record_field',101,{'atom',101,'handler'}}]]]]]],[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','c_tuple'},[{'record_field',103,{'atom',103,'anno'},{'nil',103}}|[{'record_field',103,{'atom',103,'es'}}]],[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{{'record','c_values'},[{'record_field',105,{'atom',105,'anno'},{'nil',105}}|[{'record_field',105,{'atom',105,'es'}}]],[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{{'record','c_var'},[{'record_field',107,{'atom',107,'anno'},{'nil',107}}|[{'typed_record_field',{'record_field',107,{'atom',107,'name'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'remote_type',107,[{'atom',107,'cerl'}|[{'atom',107,'var_name'}|[[]]]]}]]}}]],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{{'record','sub'},[{'record_field',94,{'atom',94,'v'},{'nil',94}}|[{'record_field',95,{'atom',95,'s'},{'nil',95}}|[{'record_field',96,{'atom',96,'t'},{'nil',96}}|[{'record_field',97,{'atom',97,'in_guard'},{'atom',97,'false'}}]]]],[]}],
		%% Line 99
		'spec' =
		    %% Line 99
		    [{{'module',2},[{'type',99,'fun',[{'type',99,'product',[{'remote_type',99,[{'atom',99,'cerl'}|[{'atom',99,'c_module'}|[[]]]]}|[{'type',99,'list',[{'remote_type',99,[{'atom',99,'compile'}|[{'atom',99,'option'}|[[]]]]}]}]]}|[{'type',100,'tuple',[{'atom',100,'ok'}|[{'remote_type',100,[{'atom',100,'cerl'}|[{'atom',100,'c_module'}|[[]]]]}|[{'type',100,'list',[{'var',100,'_'}]}]]]}]]}]}],
		%% Line 3116
		'type' =
		    %% Line 3116
		    [{'error',{'type',3116,'union',[{'atom',3116,'bad_unicode'}|[{'atom',3116,'bin_argument_order'}|[{'atom',3117,'bin_left_var_used_in_guard'}|[{'atom',3117,'bin_opt_alias'}|[{'atom',3118,'bin_partition'}|[{'atom',3118,'bin_var_used'}|[{'atom',3118,'bin_var_used_in_guard'}|[{'atom',3119,'embedded_binary_size'}|[{'atom',3119,'nomatch_clause_type'}|[{'atom',3120,'nomatch_guard'}|[{'atom',3120,'nomatch_shadow'}|[{'atom',3120,'no_clause_match'}|[{'atom',3121,'orig_bin_var_used_in_guard'}|[{'atom',3121,'result_ignored'}|[{'atom',3122,'useless_building'}|[{'type',3123,'tuple',[{'atom',3123,'eval_failure'}|[{'type',3123,'term',[]}]]}|[{'type',3124,'tuple',[{'atom',3124,'no_effect'}|[{'type',3124,'tuple',[{'atom',3124,'erlang'}|[{'type',3124,'atom',[]}|[{'type',3124,'arity',[]}]]]}]]}|[{'type',3125,'tuple',[{'atom',3125,'nomatch_shadow'}|[{'type',3125,'integer',[]}]]}|[{'type',3126,'tuple',[{'atom',3126,'embedded_unit'}|[{'var',3126,'_'}|[{'var',3126,'_'}]]]}]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 3128
		'spec' =
		    %% Line 3128
		    [{{'format_error',1},[{'type',3128,'fun',[{'type',3128,'product',[{'type',3128,'error',[]}]}|[{'type',3128,'nonempty_string',[]}]]}]}]]
'module'/2 =
    %% Line 102
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Mod = {'c_module',_cor19,_cor20,_cor21,_cor22,Ds0},Opts> when 'true' ->
	      let <_cor2> =
		  %% Line 103
		  call 'lists':'member'
		      ('bin_opt_info', _cor0)
	      in  do  %% Line 103
		      call 'erlang':'put'
			  ('bin_opt_info', _cor2)
		      let <_cor3> =
			  %% Line 104
			  call 'lists':'member'
			      ('inline_list_funcs', _cor0)
		      in  let <_cor4> =
			      %% Line 104
			      call 'erlang':'not'
				  (_cor3)
			  in  do  do  %% Line 104
				      call 'erlang':'put'
					  ('no_inline_list_funcs', _cor4)
				      do  %% Line 105
					  case call 'erlang':'get'
						   ('new_var_num') of
					    %% Line 106
					    <'undefined'> when 'true' ->
						call 'erlang':'put'
						    ('new_var_num', 0)
					    %% Line 107
					    <_cor23> when 'true' ->
						'ok'
					  end
					  %% Line 3075
					  call 'erlang':'put'
					      ({'sys_core_fold','warnings'}, [])
				  let <_cor11> =
				      %% Line 110
				      ( letrec
					    'lc$^0'/1 =
						fun (_cor8) ->
						    case _cor8 of
						      <[D|_cor7]> when 'true' ->
							  let <_cor9> =
							      apply 'function_1'/1
								  (D)
							  in  let <_cor10> =
								  apply 'lc$^0'/1
								      (_cor7)
							      in  ( [_cor9|_cor10]
								    -| ['compiler_generated'] )
						      <[]> when 'true' ->
							  []
						      ( <_13037> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor8})
							      -| [{'function_name',{'lc$^0',1}}] )
							-| ['compiler_generated'] )
						    end
					in  apply 'lc$^0'/1
						(Ds0)
					-| ['list_comprehension'] )
				  in  do  do  %% Line 111
					      call 'erlang':'erase'
						  ('no_inline_list_funcs')
					      %% Line 112
					      call 'erlang':'erase'
						  ('bin_opt_info')
					  let <_cor16> =
					      %% Line 113
					      call 'erlang':'setelement'
						  (6, _cor1, _cor11)
					  in  let <_9004> =
						  %% Line 3114
						  call 'erlang':'erase'
						      ({'sys_core_fold','warnings'})
					      in  let <_cor13> =
						      %% Line 3114
						      call 'ordsets':'from_list'
							  (_9004)
						  in  %% Line 113
						      {'ok',_cor16,_cor13}
	  ( <_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'module',2}}] )
	    -| ['compiler_generated'] )
	end
'function_1'/1 =
    %% Line 115
    fun (_cor0) ->
	case _cor0 of
	  <{Name = {'c_var',_cor9,{F,Arity}},B0}> when 'true' ->
	      %% Line 116
	      try
		  let <_cor1> =
		      %% Line 1614
		      call 'orddict':'new'
			  ()
		  in  let <_3573> =
			  %% Line 1614
			  call 'gb_trees':'empty'
			      ()
		      in  let <_cor1> =
			      %% Line 1614
			      {'sub',_cor1,_3573,[],'false'}
			  in  let <B> =
				  %% Line 117
				  apply 'expr'/3
				      (B0, 'value', _cor1)
			      in  %% Line 118
				  {Name,B}
	      of <_cor3> ->
		  _cor3
	      catch <_cor6,_cor5,_cor4> ->
		  let <Stack> =
		      %% Line 121
		      call 'erlang':'get_stacktrace'
			  ()
		  in  do  %% Line 122
			  call 'io':'fwrite'
			      ([70|[117|[110|[99|[116|[105|[111|[110|[58|[32|[126|[119|[47|[126|[119|[10]]]]]]]]]]]]]]]], [F|[Arity|[]]])
			  %% Line 123
			  call 'erlang':'raise'
			      (_cor6, _cor5, Stack)
	  ( <_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'function_1',1}}] )
	    -| ['compiler_generated'] )
	end
'body'/2 =
    %% Line 130
    fun (_cor1,_cor0) ->
	%% Line 131
	apply 'body'/3
	    (_cor1, 'value', _cor0)
'body'/3 =
    %% Line 133
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'c_values',A,Es0},Ctxt,Sub> when 'true' ->
	      let <Es1> =
		  %% Line 428
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor5) ->
				case _cor5 of
				  <[E|_cor4]> when 'true' ->
				      let <_cor6> =
					  apply 'expr'/3
					      (E, _cor1, _cor0)
				      in  let <_cor7> =
					      apply 'lc$^0'/1
						  (_cor4)
					  in  ( [_cor6|_cor7]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_2853> when 'true' ->
					primop 'match_fail'
					    ({'function_clause',_cor5})
				    -| ['compiler_generated'] )
				end
		    in  case Es0 of
			  <[E|_cor4]> when 'true' ->
			      let <_cor6> =
				  apply 'expr'/3
				      (E, _cor1, _cor0)
			      in  let <_cor7> =
				      case _cor4 of
					<[_13041|_15791]> when 'true' ->
					    let <_2412> =
						apply 'expr'/3
						    (_13041, _cor1, _cor0)
					    in  let <_cor7> =
						    apply 'lc$^0'/1
							(_15791)
						in  ( [_2412|_cor7]
						      -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_2853> when 'true' ->
					      primop 'match_fail'
						  ({'function_clause',_cor4})
					  -| ['compiler_generated'] )
				      end
				  in  ( [_cor6|_cor7]
					-| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_2853> when 'true' ->
				primop 'match_fail'
				    ({'function_clause',Es0})
			    -| ['compiler_generated'] )
			end
		    -| ['list_comprehension'] )
	      in  %% Line 135
		  case _cor1 of
		    %% Line 136
		    <'value'> when 'true' ->
			%% Line 137
			{'c_values',A,Es1}
		    %% Line 138
		    <'effect'> when 'true' ->
			%% Line 139
			apply 'make_effect_seq'/2
			    (Es1, _cor0)
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor1})
		      -| ['compiler_generated'] )
		  end
	  %% Line 141
	  <E,Ctxt,Sub> when 'true' ->
	      %% Line 143
	      apply 'expr'/3
		  (_cor2, _cor1, _cor0)
	end
'guard'/2 =
    %% Line 149
    fun (_cor1,_cor0) ->
	%% Line 151
	case _cor0 of
	  <{'sub',_cor7,_cor8,_cor9,_cor10}> when 'true' ->
	      let <_cor4> =
		  call 'erlang':'setelement'
		      (5, _cor0, 'true')
	      in  apply 'expr'/3
		      (_cor1, 'value', _cor4)
	  ( <_cor11> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','sub'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'opt_guard_try'/1 =
    %% Line 155
    fun (_cor0) ->
	case _cor0 of
	  <Seq = {'c_seq',_cor19,Arg,Body0}> when 'true' ->
	      let <Body> =
		  %% Line 156
		  apply 'opt_guard_try'/1
		      (Body0)
	      in  %% Line 157
		  case <Arg,Body> of
		    %% Line 158
		    <{'c_call',_cor20,{'c_literal',_cor21,Mod},%% Line 159
							       {'c_literal',_cor22,Name},Args},%% Line 160
											       {'c_literal',_cor23,'false'}> when 'true' ->
			let <_cor2> =
			    %% Line 168
			    call 'erlang':'length'
				(Args)
			in  let <_4436> =
				%% Line 168
				call 'erl_bifs':'is_pure'
				    (Mod, Name, _cor2)
			    in  %% Line 168
				case _4436 of
				  %% Line 169
				  <'false'> when 'true' ->
				      %% Line 172
				      call 'erlang':'setelement'
					  (4, _cor0, Body)
				  %% Line 173
				  <'true'> when 'true' ->
				      Body
				  ( <_cor5> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_4436})
				    -| ['compiler_generated'] )
				end
		    %% Line 178
		    <_cor28,_cor29> when 'true' ->
			%% Line 179
			call 'erlang':'setelement'
			    (4, _cor0, Body)
		  end
	  %% Line 181
	  <Term = {'c_case',_cor34,_cor35,Cs}> when 'true' ->
	      let <_rec4> =
		  %% Line 194
		  case Cs of
		    <[C|_17763]> when 'true' ->
			let <_cor1> =
			    %% Line 195
			    apply 'opt_guard_try'/1
				(C)
			in  let <_cor2> =
				%% Line 195
				apply 'opt_guard_try_list'/1
				    (_17763)
			    in  %% Line 195
				[_cor1|_cor2]
		    %% Line 196
		    <[]> when 'true' ->
			[]
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'function_clause',Cs})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 182
		  call 'erlang':'setelement'
		      (4, _cor0, _rec4)
	  %% Line 183
	  <Term = {'c_clause',_cor40,_cor41,_cor42,B0}> when 'true' ->
	      let <_rec6> =
		  %% Line 184
		  apply 'opt_guard_try'/1
		      (B0)
	      in  %% Line 184
		  call 'erlang':'setelement'
		      (5, _cor0, _rec6)
	  %% Line 185
	  <Term = {'c_let',_cor48,_cor49,Arg,B0}> when 'true' ->
	      let <_3458> =
		  %% Line 186
		  apply 'opt_guard_try'/1
		      (B0)
	      in  %% Line 186
		  case _3458 of
		    %% Line 187
		    <B = {'c_literal',_cor50,_cor51}> when 'true' ->
			%% Line 188
			apply 'opt_guard_try'/1
			    ({'c_seq',[],Arg,_3458})
		    %% Line 189
		    <B> when 'true' ->
			%% Line 190
			call 'erlang':'setelement'
			    (5, _cor0, _3458)
		  end
	  %% Line 192
	  <Term> when 'true' ->
	      _cor0
	end
'opt_guard_try_list'/1 =
    %% Line 194
    fun (_cor0) ->
	case _cor0 of
	  <[C|Cs]> when 'true' ->
	      let <_cor1> =
		  %% Line 195
		  apply 'opt_guard_try'/1
		      (C)
	      in  let <_cor2> =
		      %% Line 195
		      apply 'opt_guard_try_list'/1
			  (Cs)
		  in  %% Line 195
		      [_cor1|_cor2]
	  %% Line 196
	  <[]> when 'true' ->
	      []
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'opt_guard_try_list',1}}] )
	    -| ['compiler_generated'] )
	end
'expr'/2 =
    %% Line 201
    fun (_cor1,_cor0) ->
	%% Line 202
	apply 'expr'/3
	    (_cor1, 'value', _cor0)
'expr'/3 =
    %% Line 204
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <V = {'c_var',_cor103,_cor104},Ctxt,Sub> when 'true' ->
	      %% Line 209
	      case _cor1 of
		%% Line 210
		<'effect'> when 'true' ->
		    %% Line 2813
		    {'c_literal',[],'ok'}
		%% Line 211
		<'value'> when 'true' ->
		    apply 'sub_get_var'/2
			(_cor2, _cor0)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 213
	  <L = {'c_literal',_cor105,Val},Ctxt,_X_Sub> when 'true' ->
	      %% Line 214
	      case _cor1 of
		%% Line 215
		<'effect'> when 'true' ->
		    %% Line 216
		    case Val of
		      %% Line 217
		      <[]> when 'true' ->
			  _cor2
		      %% Line 220
		      <_cor106>
			  when call 'erlang':'is_atom'
				(Val) ->
			  %% Line 2813
			  {'c_literal',[],'ok'}
		      %% Line 223
		      <_cor107> when 'true' ->
			  do  %% Line 225
			      apply 'add_warning'/2
				  (_cor2, 'useless_building')
			      %% Line 2813
			      {'c_literal',[],'ok'}
		    end
		%% Line 228
		<'value'> when 'true' ->
		    _cor2
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 230
	  <Cons = {'c_cons',Anno,H0,T0},Ctxt,Sub> when 'true' ->
	      let <H1> =
		  %% Line 231
		  apply 'expr'/3
		      (H0, _cor1, _cor0)
	      in  let <T1> =
		      %% Line 232
		      apply 'expr'/3
			  (T0, _cor1, _cor0)
		  in  %% Line 233
		      case _cor1 of
			%% Line 234
			<'effect'> when 'true' ->
			    do  %% Line 235
				apply 'add_warning'/2
				    (_cor2, 'useless_building')
				let <_cor8> =
				    %% Line 236
				    apply 'make_effect_seq'/2
					([H1|[T1|[]]], _cor0)
				in  %% Line 236
				    apply 'expr'/3
					(_cor8, _cor1, _cor0)
			%% Line 237
			<'value'> when 'true' ->
			    %% Line 238
			    call 'cerl':'ann_c_cons'
				(Anno, H1, T1)
			( <_cor9> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor1})
			  -| ['compiler_generated'] )
		      end
	  %% Line 240
	  <Tuple = {'c_tuple',Anno,Es0},Ctxt,Sub> when 'true' ->
	      let <Es> =
		  %% Line 428
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor5) ->
				case _cor5 of
				  <[E|_cor4]> when 'true' ->
				      let <_cor6> =
					  apply 'expr'/3
					      (E, _cor1, _cor0)
				      in  let <_cor7> =
					      apply 'lc$^0'/1
						  (_cor4)
					  in  ( [_cor6|_cor7]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_2853> when 'true' ->
					primop 'match_fail'
					    ({'function_clause',_cor5})
				    -| ['compiler_generated'] )
				end
		    in  case Es0 of
			  <[E|_cor4]> when 'true' ->
			      let <_cor6> =
				  apply 'expr'/3
				      (E, _cor1, _cor0)
			      in  let <_cor7> =
				      case _cor4 of
					<[_8523|_14764]> when 'true' ->
					    let <_4283> =
						apply 'expr'/3
						    (_8523, _cor1, _cor0)
					    in  let <_cor7> =
						    apply 'lc$^0'/1
							(_14764)
						in  ( [_4283|_cor7]
						      -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_2853> when 'true' ->
					      primop 'match_fail'
						  ({'function_clause',_cor4})
					  -| ['compiler_generated'] )
				      end
				  in  ( [_cor6|_cor7]
					-| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_2853> when 'true' ->
				primop 'match_fail'
				    ({'function_clause',Es0})
			    -| ['compiler_generated'] )
			end
		    -| ['list_comprehension'] )
	      in  %% Line 242
		  case _cor1 of
		    %% Line 243
		    <'effect'> when 'true' ->
			do  %% Line 244
			    apply 'add_warning'/2
				(_cor2, 'useless_building')
			    let <_cor11> =
				%% Line 245
				apply 'make_effect_seq'/2
				    (Es, _cor0)
			    in  %% Line 245
				apply 'expr'/3
				    (_cor11, _cor1, _cor0)
		    %% Line 246
		    <'value'> when 'true' ->
			%% Line 247
			call 'cerl':'ann_c_tuple'
			    (Anno, Es)
		    ( <_cor12> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor1})
		      -| ['compiler_generated'] )
		  end
	  %% Line 249
	  <Map = {'c_map',Anno,V0,Es0},Ctxt,Sub> when 'true' ->
	      let <Es> =
		  %% Line 250
		  apply 'pair_list'/3
		      (Es0, _cor1, _cor0)
	      in  %% Line 251
		  case _cor1 of
		    %% Line 252
		    <'effect'> when 'true' ->
			do  %% Line 253
			    apply 'add_warning'/2
				(_cor2, 'useless_building')
			    let <_cor14> =
				%% Line 254
				apply 'make_effect_seq'/2
				    (Es, _cor0)
			    in  %% Line 254
				apply 'expr'/3
				    (_cor14, _cor1, _cor0)
		    %% Line 255
		    <'value'> when 'true' ->
			let <V> =
			    %% Line 256
			    apply 'expr'/3
				(V0, _cor1, _cor0)
			in  %% Line 257
			    call 'cerl':'ann_c_map'
				(Anno, V, Es)
		    ( <_cor16> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor1})
		      -| ['compiler_generated'] )
		  end
	  %% Line 259
	  <Bin0 = {'c_binary',_cor108,Ss},Ctxt,Sub> when 'true' ->
	      do  %% Line 262
		  case _cor1 of
		    %% Line 263
		    <'effect'> when 'true' ->
			apply 'add_warning'/2
			    (_cor2, 'useless_building')
		    %% Line 264
		    <'value'> when 'true' ->
			'ok'
		    ( <_cor17> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor1})
		      -| ['compiler_generated'] )
		  end
		  let <_rec9> =
		      %% Line 266
		      apply 'bitstr_list'/2
			  (Ss, _cor0)
		  in  let <_cor21> =
			  %% Line 266
			  call 'erlang':'setelement'
			      (3, _cor2, _rec9)
		      in  let <Bin> =
			      %% Line 267
			      apply 'bin_un_utf'/1
				  (_cor21)
			  in  %% Line 268
			      apply 'eval_binary'/1
				  (Bin)
	  %% Line 269
	  <Fun = {'c_fun',_cor112,_cor113,_cor114},'effect',_cor115> when 'true' ->
	      do  %% Line 271
		  apply 'add_warning'/2
		      (_cor2, 'useless_building')
		  %% Line 2813
		  {'c_literal',[],'ok'}
	  %% Line 273
	  <Fun = {'c_fun',_cor116,Vs0,B0},Ctxt0,Sub0> when 'true' ->
	      let <_13462> =
		  %% Line 274
		  apply 'pattern_list'/2
		      (Vs0, _cor0)
	      in  %% Line 274
		  case _13462 of
		    <{Vs1,Sub1}> when 'true' ->
			let <_cor26> =
			    %% Line 275
			    case _cor1 of
			      %% Line 276
			      <{'letrec',Ctxt1}> when 'true' ->
				  Ctxt1
			      %% Line 277
			      <'value'> when 'true' ->
				  'value'
			      ( <_cor25> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor1})
				-| ['compiler_generated'] )
			    end
			in  let <B1> =
				%% Line 279
				apply 'body'/3
				    (B0, _cor26, Sub1)
			    in  %% Line 280
				{'c_fun',_cor116,Vs1,B1}
		    ( <_cor24> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_13462})
		      -| ['compiler_generated'] )
		  end
	  %% Line 281
	  <Seq0 = {'c_seq',_cor118,Arg0,B0},Ctxt,Sub> when 'true' ->
	      let <B1> =
		  %% Line 283
		  apply 'body'/3
		      (B0, _cor1, _cor0)
	      in  let <Arg> =
		      %% Line 284
		      apply 'body'/3
			  (Arg0, 'effect', _cor0)
		  in  let <_15155> =
			  %% Line 285
			  apply 'will_fail'/1
			      (Arg)
		      in  %% Line 285
			  case _15155 of
			    %% Line 286
			    <'true'> when 'true' ->
				Arg
			    %% Line 288
			    <'false'> when 'true' ->
				let <_15048> =
				    %% Line 291
				    apply 'is_safe_simple'/2
					(Arg, _cor0)
				in  %% Line 291
				    case _15048 of
				      %% Line 292
				      <'true'> when 'true' ->
					  B1
				      %% Line 293
				      <'false'> when 'true' ->
					  {'c_seq',_cor118,Arg,B1}
				      ( <_cor35> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_15048})
					-| ['compiler_generated'] )
				    end
			    ( <_cor36> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_15155})
			      -| ['compiler_generated'] )
			  end
	  %% Line 296
	  <Let = {'c_let',_cor120,_cor121,_cor122,_cor123},Ctxt,Sub> when 'true' ->
	      let <_2959> =
		  %% Line 297
		  apply 'simplify_let'/2
		      (_cor2, _cor0)
	      in  %% Line 297
		  case _2959 of
		    %% Line 298
		    <'impossible'> when 'true' ->
			%% Line 302
			apply 'opt_simple_let'/3
			    (_cor2, _cor1, _cor0)
		    %% Line 303
		    <Expr> when 'true' ->
			let <_cor37> =
			    %% Line 306
			    apply 'sub_new_preserve_types'/1
				(_cor0)
			in  %% Line 306
			    apply 'expr'/3
				(_2959, _cor1, _cor37)
		  end
	  %% Line 308
	  <Letrec = {'c_letrec',_cor124,_cor125,{'c_var',_cor126,_cor127}},'effect',_X_Sub> when 'true' ->
	      do  %% Line 310
		  apply 'add_warning'/2
		      (_cor2, 'useless_building')
		  %% Line 2813
		  {'c_literal',[],'ok'}
	  %% Line 312
	  <Letrec = {'c_letrec',_cor128,Fs0,B0},Ctxt,Sub> when 'true' ->
	      let <_cor42> =
		  %% Line 313
		  fun (_cor40) ->
		      case _cor40 of
			<{Name,Fb}> when 'true' ->
			    let <_cor39> =
				%% Line 314
				apply 'expr'/3
				    (Fb, {'letrec',_cor1}, _cor0)
			    in  %% Line 314
				{Name,_cor39}
			( <_cor41> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor40})
				-| [{'function_name',{'-expr/3-fun-0-',1}}] )
			  -| ['compiler_generated'] )
		      end
	      in  let <Fs1> =
		      %% Line 313
		      call 'lists':'map'
			  (_cor42, Fs0)
		  in  let <B1> =
			  %% Line 316
			  apply 'body'/3
			      (B0, 'value', _cor0)
		      in  %% Line 317
			  {'c_letrec',_cor128,Fs1,B1}
	  %% Line 318
	  <Case0 = {'c_case',_cor130,_cor131,_cor132},Ctxt,Sub> when 'true' ->
	      let <_5217> =
		  %% Line 347
		  apply 'opt_bool_case'/1
		      (_cor2)
	      in  %% Line 347
		  case _5217 of
		    %% Line 348
		    <Case1 = {'c_case',_cor133,Arg0,Cs0}> when 'true' ->
			let <Arg1> =
			    %% Line 349
			    apply 'body'/3
				(Arg0, 'value', _cor0)
			in  let <LitExpr> =
				%% Line 350
				call 'cerl':'is_literal'
				    (Arg1)
			    in  let <_6556> =
				    %% Line 351
				    apply 'case_opt'/3
					(Arg1, Cs0, _cor0)
				in  %% Line 351
				    case _6556 of
				      <{Arg2,Cs1}> when 'true' ->
					  let <Cs2> =
					      %% Line 352
					      apply 'clauses'/5
						  (Arg2, Cs1, _cor1, _cor0, LitExpr)
					  in  let <_cor53> =
						  %% Line 353
						  {'c_case',_cor133,Arg2,Cs2}
					      in  do  %% Line 354
						      apply 'warn_no_clause_match'/2
							  (_5217, _cor53)
						      let <Expr> =
							  %% Line 355
							  apply 'eval_case'/2
							      (_cor53, _cor0)
						      in  let <_1590> =
							      %% Line 356
							      apply 'move_case_into_arg'/2
								  (_cor53, _cor0)
							  in  %% Line 356
							      case _1590 of
								%% Line 357
								<'impossible'> when 'true' ->
								    %% Line 358
								    apply 'bsm_an'/1
									(Expr)
								%% Line 359
								<Other> when 'true' ->
								    let <_cor56> =
									%% Line 360
									apply 'sub_new_preserve_types'/1
									    (_cor0)
								    in  %% Line 360
									apply 'expr'/3
									    (_1590, _cor1, _cor56)
							      end
				      ( <_cor49> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_6556})
					-| ['compiler_generated'] )
				    end
		    %% Line 362
		    <Other> when 'true' ->
			%% Line 363
			apply 'expr'/3
			    (_5217, _cor1, _cor0)
		  end
	  %% Line 365
	  <Recv = {'c_receive',_cor135,Cs0,T0,A0},Ctxt,Sub> when 'true' ->
	      let <Cs1> =
		  %% Line 366
		  apply 'clauses'/5
		      ({'c_var',[],'_'}, Cs0, _cor1, _cor0, 'false')
	      in  let <T1> =
		      %% Line 367
		      apply 'expr'/3
			  (T0, 'value', _cor0)
		  in  let <A1> =
			  %% Line 368
			  apply 'body'/3
			      (A0, _cor1, _cor0)
		      in  %% Line 369
			  {'c_receive',_cor135,Cs1,T1,A1}
	  %% Line 370
	  <App = {'c_apply',_cor137,Op0,As0},_cor138,Sub> when 'true' ->
	      let <Op1> =
		  %% Line 371
		  apply 'expr'/3
		      (Op0, 'value', _cor0)
	      in  let <As1> =
		      %% Line 428
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor5) ->
				    case _cor5 of
				      <[E|_cor4]> when 'true' ->
					  let <_cor6> =
					      apply 'expr'/3
						  (E, 'value', _cor0)
					  in  let <_cor7> =
						  apply 'lc$^0'/1
						      (_cor4)
					      in  ( [_cor6|_cor7]
						    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_2853> when 'true' ->
					    primop 'match_fail'
						({'function_clause',_cor5})
					-| ['compiler_generated'] )
				    end
			in  case As0 of
			      <[E|_cor4]> when 'true' ->
				  let <_cor6> =
				      apply 'expr'/3
					  (E, 'value', _cor0)
				  in  let <_cor7> =
					  case _cor4 of
					    <[_7728|_1205]> when 'true' ->
						let <_10081> =
						    apply 'expr'/3
							(_7728, 'value', _cor0)
						in  let <_cor7> =
							apply 'lc$^0'/1
							    (_1205)
						    in  ( [_10081|_cor7]
							  -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_2853> when 'true' ->
						  primop 'match_fail'
						      ({'function_clause',_cor4})
					      -| ['compiler_generated'] )
					  end
				      in  ( [_cor6|_cor7]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_2853> when 'true' ->
				    primop 'match_fail'
					({'function_clause',As0})
				-| ['compiler_generated'] )
			    end
			-| ['list_comprehension'] )
		  in  %% Line 373
		      {'c_apply',_cor137,Op1,As1}
	  %% Line 374
	  <Call0 = {'c_call',_cor140,M0,N0,_cor141},Ctxt,Sub> when 'true' ->
	      let <M1> =
		  %% Line 375
		  apply 'expr'/3
		      (M0, 'value', _cor0)
	      in  let <N1> =
		      %% Line 376
		      apply 'expr'/3
			  (N0, 'value', _cor0)
		  in  let <_cor71> =
			  %% Line 377
			  call 'erlang':'setelement'
			      (4, _cor2, N1)
		      in  let <_cor73> =
			      %% Line 377
			      call 'erlang':'setelement'
				  (3, _cor71, M1)
			  in  let <_7119> =
				  %% Line 378
				  apply 'useless_call'/2
				      (_cor1, _cor73)
			      in  %% Line 378
				  case _7119 of
				    %% Line 379
				    <'no'> when 'true' ->
					apply 'call'/4
					    (_cor73, M1, N1, _cor0)
				    %% Line 380
				    <{'yes',Seq}> when 'true' ->
					apply 'expr'/3
					    (Seq, _cor1, _cor0)
				    ( <_cor75> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_7119})
				      -| ['compiler_generated'] )
				  end
	  %% Line 382
	  <Prim = {'c_primop',_cor147,_cor148,As0},_cor149,Sub> when 'true' ->
	      let <As1> =
		  %% Line 428
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor5) ->
				case _cor5 of
				  <[E|_cor4]> when 'true' ->
				      let <_cor6> =
					  apply 'expr'/3
					      (E, 'value', _cor0)
				      in  let <_cor7> =
					      apply 'lc$^0'/1
						  (_cor4)
					  in  ( [_cor6|_cor7]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_2853> when 'true' ->
					primop 'match_fail'
					    ({'function_clause',_cor5})
				    -| ['compiler_generated'] )
				end
		    in  case As0 of
			  <[E|_cor4]> when 'true' ->
			      let <_cor6> =
				  apply 'expr'/3
				      (E, 'value', _cor0)
			      in  let <_cor7> =
				      case _cor4 of
					<[_16285|_5055]> when 'true' ->
					    let <_15859> =
						apply 'expr'/3
						    (_16285, 'value', _cor0)
					    in  let <_cor7> =
						    apply 'lc$^0'/1
							(_5055)
						in  ( [_15859|_cor7]
						      -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_2853> when 'true' ->
					      primop 'match_fail'
						  ({'function_clause',_cor4})
					  -| ['compiler_generated'] )
				      end
				  in  ( [_cor6|_cor7]
					-| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_2853> when 'true' ->
				primop 'match_fail'
				    ({'function_clause',As0})
			    -| ['compiler_generated'] )
			end
		    -| ['list_comprehension'] )
	      in  %% Line 384
		  call 'erlang':'setelement'
		      (4, _cor2, As1)
	  %% Line 385
	  <Catch = {'c_catch',_cor154,B0},_cor155,Sub> when 'true' ->
	      let <B1> =
		  %% Line 387
		  apply 'body'/3
		      (B0, 'value', _cor0)
	      in  let <_9608> =
		      %% Line 388
		      apply 'is_safe_simple'/2
			  (B1, _cor0)
		  in  %% Line 388
		      case _9608 of
			%% Line 389
			<'true'> when 'true' ->
			    B1
			%% Line 390
			<'false'> when 'true' ->
			    call 'erlang':'setelement'
				(3, _cor2, B1)
			( <_cor82> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_9608})
			  -| ['compiler_generated'] )
		      end
	  %% Line 392
	  <Try = {'c_try',_cor159,E0,[{'c_var',_cor160,X}|[]],{'c_var',_cor161,_cor162},_cor163,False = %% Line 393
													{'c_literal',_cor164,'false'}},_cor165,Sub>
	      when call 'erlang':'=:='
		    (_cor162,
		     X) ->
	      let <E1> =
		  %% Line 396
		  apply 'body'/3
		      (E0, 'value', _cor0)
	      in  let <_18205> =
		      %% Line 397
		      apply 'will_fail'/1
			  (E1)
		  in  %% Line 397
		      case _18205 of
			%% Line 398
			<'false'> when 'true' ->
			    let <E2> =
				%% Line 400
				apply 'opt_guard_try'/1
				    (E1)
			    in  let <_17997> =
				    %% Line 2354
				    call 'gb_sets':'empty'
					()
				in  let <_6435> =
					%% Line 2354
					apply 'is_safe_bool_expr_1'/3
					    (E2, _cor0, _17997)
				    in  let <_cor87> =
					    %% Line 404
					    ( case _6435 of
						( <( 'true'
						     -| ['compiler_generated'] )> when 'true' ->
						      'true'
						  -| ['compiler_generated'] )
						( <( 'false'
						     -| ['compiler_generated'] )> when 'true' ->
						      apply 'is_safe_simple'/2
							  (E2, _cor0)
						  -| ['compiler_generated'] )
						( <_cor85> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {( 'badarg'
								  -| ['compiler_generated'] ),_6435}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					in  %% Line 404
					    case _cor87 of
					      %% Line 405
					      <'true'> when 'true' ->
						  E2
					      %% Line 406
					      <'false'> when 'true' ->
						  call 'erlang':'setelement'
						      (3, _cor2, E2)
					      ( <_cor90> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor87})
						-| ['compiler_generated'] )
					    end
			%% Line 408
			<'true'> when 'true' ->
			    False
			( <_cor91> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_18205})
			  -| ['compiler_generated'] )
		      end
	  %% Line 412
	  <Try = {'c_try',A,E0,Vs0,B0,Evs0,H0},_cor173,Sub0> when 'true' ->
	      let <E1> =
		  %% Line 415
		  apply 'body'/3
		      (E0, 'value', _cor0)
	      in  let <_13961> =
		      %% Line 416
		      apply 'pattern_list'/2
			  (Vs0, _cor0)
		  in  %% Line 416
		      case _13961 of
			<{Vs1,Sub1}> when 'true' ->
			    let <B1> =
				%% Line 417
				apply 'body'/3
				    (B0, 'value', Sub1)
			    in  let <_16370> =
				    %% Line 418
				    apply 'is_safe_simple'/2
					(E1, _cor0)
				in  %% Line 418
				    case _16370 of
				      %% Line 419
				      <'true'> when 'true' ->
					  %% Line 420
					  apply 'expr'/3
					      ({'c_let',A,Vs1,E1,B1}, 'value', _cor0)
				      %% Line 421
				      <'false'> when 'true' ->
					  let <_444> =
					      %% Line 422
					      apply 'pattern_list'/2
						  (Evs0, _cor0)
					  in  %% Line 422
					      case _444 of
						<{Evs1,Sub2}> when 'true' ->
						    let <H1> =
							%% Line 423
							apply 'body'/3
							    (H0, 'value', Sub2)
						    in  %% Line 424
							{'c_try',A,E1,Vs1,B1,Evs1,H1}
						( <_cor95> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_444})
						  -| ['compiler_generated'] )
					      end
				      ( <_cor99> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_16370})
					-| ['compiler_generated'] )
				    end
			( <_cor93> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_13961})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor102,_cor101,_cor100> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'expr',3}}] )
	    -| ['compiler_generated'] )
	end
'pair_list'/3 =
    %% Line 430
    fun (_cor2,_cor1,_cor0) ->
	%% Line 431
	( letrec
	      'lc$^0'/1 =
		  fun (_cor5) ->
		      case _cor5 of
			<[E|_cor4]> when 'true' ->
			    let <_cor6> =
				apply 'pair'/3
				    (E, _cor1, _cor0)
			    in  let <_cor7> =
				    apply 'lc$^0'/1
					(_cor4)
				in  ( [_cor6|_cor7]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_3521> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor5})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  case _cor2 of
		<[E|_cor4]> when 'true' ->
		    let <_cor6> =
			apply 'pair'/3
			    (E, _cor1, _cor0)
		    in  let <_cor7> =
			    apply 'lc$^0'/1
				(_cor4)
			in  ( [_cor6|_cor7]
			      -| ['compiler_generated'] )
		<[]> when 'true' ->
		    []
		( <_3521> when 'true' ->
		      primop 'match_fail'
			  ({'function_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  -| ['list_comprehension'] )
'pair'/3 =
    %% Line 433
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'c_map_pair',_cor11,_cor12,K,V},'effect',Sub> when 'true' ->
	      %% Line 434
	      apply 'make_effect_seq'/2
		  ([K|[V|[]]], _cor0)
	  %% Line 435
	  <Pair = {'c_map_pair',_cor13,_cor14,K0,V0},Ctxt = 'value',Sub> when 'true' ->
	      let <K> =
		  %% Line 436
		  apply 'expr'/3
		      (K0, _cor1, _cor0)
	      in  let <V> =
		      %% Line 437
		      apply 'expr'/3
			  (V0, _cor1, _cor0)
		  in  let <_cor6> =
			  %% Line 438
			  call 'erlang':'setelement'
			      (5, _cor2, V)
		      in  %% Line 438
			  call 'erlang':'setelement'
			      (4, _cor6, K)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'pair',3}}] )
	    -| ['compiler_generated'] )
	end
'bitstr_list'/2 =
    %% Line 440
    fun (_cor1,_cor0) ->
	%% Line 441
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[E|_cor3]> when 'true' ->
			    let <_cor5> =
				apply 'bitstr'/2
				    (E, _cor0)
			    in  let <_cor6> =
				    apply 'lc$^0'/1
					(_cor3)
				in  ( [_cor5|_cor6]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_934> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  case _cor1 of
		<[E|_cor3]> when 'true' ->
		    let <_cor5> =
			apply 'bitstr'/2
			    (E, _cor0)
		    in  let <_cor6> =
			    apply 'lc$^0'/1
				(_cor3)
			in  ( [_cor5|_cor6]
			      -| ['compiler_generated'] )
		<[]> when 'true' ->
		    []
		( <_934> when 'true' ->
		      primop 'match_fail'
			  ({'function_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  -| ['list_comprehension'] )
'bitstr'/2 =
    %% Line 443
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <BinSeg = {'c_bitstr',_cor9,Val,Size,_cor10,_cor11,_cor12},Sub> when 'true' ->
	      let <_rec48> =
		  apply 'expr'/3
		      (Val, 'value', _cor0)
	      in  let <_rec49> =
		      %% Line 444
		      apply 'expr'/3
			  (Size, 'value', _cor0)
		  in  let <_cor5> =
			  %% Line 444
			  call 'erlang':'setelement'
			      (4, _cor1, _rec49)
		      in  %% Line 444
			  call 'erlang':'setelement'
			      (3, _cor5, _rec48)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'bitstr',2}}] )
	    -| ['compiler_generated'] )
	end
'is_safe_simple'/2 =
    %% Line 453
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'c_var',_cor15,_cor16},_cor17> when 'true' ->
	      'true'
	  %% Line 454
	  <{'c_cons',_cor18,H,T},Sub> when 'true' ->
	      let <_13683> =
		  %% Line 455
		  apply 'is_safe_simple'/2
		      (H, _cor0)
	      in  %% Line 455
		  ( case _13683 of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    apply 'is_safe_simple'/2
				(T, _cor0)
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    'false'
			-| ['compiler_generated'] )
		      ( <_cor2> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_13683}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 456
	  <{'c_tuple',_cor19,Es},Sub> when 'true' ->
	      let <_cor4> =
		  %% Line 479
		  fun (_cor2) ->
		      apply 'is_safe_simple'/2
			  (_cor2, _cor0)
	      in  %% Line 479
		  call 'lists':'all'
		      (_cor4, Es)
	  %% Line 457
	  <{'c_literal',_cor20,_cor21},_cor22> when 'true' ->
	      'true'
	  %% Line 458
	  <{'c_call',_cor23,{'c_literal',_cor24,'erlang'},%% Line 459
							  {'c_literal',_cor25,Name},Args},Sub>
	      when %% Line 460
		call 'erlang':'is_atom'
		    (Name) ->
	      let <NumArgs> =
		  %% Line 461
		  call 'erlang':'length'
		      (Args)
	      in  let <_9794> =
		      %% Line 462
		      call 'erl_internal':'bool_op'
			  (Name, NumArgs)
		  in  %% Line 462
		      case _9794 of
			%% Line 463
			<'true'> when 'true' ->
			    let <_cor7> =
				%% Line 465
				fun (_cor5) ->
				    case _cor5 of
				      <{'c_var',_cor26,V}> when 'true' ->
					  apply 'is_boolean_type'/2
					      (V, _cor0)
				      %% Line 466
				      <{'c_literal',_cor27,Lit}> when 'true' ->
					  call 'erlang':'is_boolean'
					      (Lit)
				      %% Line 467
				      <_cor28> when 'true' ->
					  'false'
				    end
			    in  %% Line 465
				call 'lists':'all'
				    (_cor7, Args)
			%% Line 469
			<'false'> when 'true' ->
			    let <_16719> =
				%% Line 473
				call 'erl_bifs':'is_safe'
				    ('erlang', Name, NumArgs)
			    in  %% Line 473
				( case _16719 of
				    ( <( 'true'
					 -| ['compiler_generated'] )> when 'true' ->
					  let <_14685> =
					      %% Line 474
					      call 'erl_internal':'comp_op'
						  (Name, NumArgs)
					  in  %% Line 474
					      ( case _14685 of
						  ( <( 'true'
						       -| ['compiler_generated'] )> when 'true' ->
							'true'
						    -| ['compiler_generated'] )
						  ( <( 'false'
						       -| ['compiler_generated'] )> when 'true' ->
							%% Line 475
							call 'erl_internal':'new_type_test'
							    (Name, NumArgs)
						    -| ['compiler_generated'] )
						  ( <_cor9> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {( 'badarg'
								    -| ['compiler_generated'] ),_14685}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <( 'false'
					 -| ['compiler_generated'] )> when 'true' ->
					  'false'
				      -| ['compiler_generated'] )
				    ( <_cor8> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {( 'badarg'
						      -| ['compiler_generated'] ),_16719}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			( <_cor12> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_9794})
			  -| ['compiler_generated'] )
		      end
	  %% Line 477
	  <_cor29,_cor30> when 'true' ->
	      'false'
	end
'will_fail'/1 =
    %% Line 486
    fun (_cor0) ->
	case _cor0 of
	  <{'c_let',_cor5,_cor6,A,B}> when 'true' ->
	      let <_8279> =
		  %% Line 487
		  apply 'will_fail'/1
		      (A)
	      in  %% Line 487
		  ( case _8279 of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    'true'
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    apply 'will_fail'/1
				(B)
			-| ['compiler_generated'] )
		      ( <_cor1> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_8279}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 488
	  <{'c_call',_cor7,{'c_literal',_cor8,Mod},{'c_literal',_cor9,Name},Args}> when 'true' ->
	      let <_cor3> =
		  %% Line 489
		  call 'erlang':'length'
		      (Args)
	      in  %% Line 489
		  call 'erl_bifs':'is_exit_bif'
		      (Mod, Name, _cor3)
	  %% Line 490
	  <{'c_primop',_cor10,{'c_literal',_cor11,'match_fail'},[_cor12|[]]}> when 'true' ->
	      'true'
	  %% Line 491
	  <_cor13> when 'true' ->
	      'false'
	end
'bin_un_utf'/1 =
    %% Line 497
    fun (_cor0) ->
	case _cor0 of
	  <Bin = {'c_binary',Anno,Ss}> when 'true' ->
	      let <_rec51> =
		  %% Line 498
		  apply 'bin_un_utf_1'/2
		      (Ss, Anno)
	      in  %% Line 498
		  call 'erlang':'setelement'
		      (3, _cor0, _rec51)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'bin_un_utf',1}}] )
	    -| ['compiler_generated'] )
	end
'bin_un_utf_1'/2 =
    %% Line 500
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H = {'c_bitstr',_cor11,{'c_literal',_cor12,_cor13},_cor14,_cor15,{'c_literal',_cor16,'utf8'},_cor17}|T],Anno> when 'true' ->
	      let <_cor3> =
		  %% Line 502
		  apply 'bin_un_utf_eval'/2
		      (H, _cor0)
	      in  let <_cor2> =
		      %% Line 502
		      apply 'bin_un_utf_1'/2
			  (T, _cor0)
		  in  %% Line 502
		      call 'erlang':'++'
			  (_cor3, _cor2)
	  %% Line 503
	  <[H = {'c_bitstr',_cor18,{'c_literal',_cor19,_cor20},_cor21,_cor22,{'c_literal',_cor23,'utf16'},_cor24}|T],Anno> when 'true' ->
	      let <_cor5> =
		  %% Line 505
		  apply 'bin_un_utf_eval'/2
		      (H, _cor0)
	      in  let <_cor4> =
		      %% Line 505
		      apply 'bin_un_utf_1'/2
			  (T, _cor0)
		  in  %% Line 505
		      call 'erlang':'++'
			  (_cor5, _cor4)
	  %% Line 506
	  <[H = {'c_bitstr',_cor25,{'c_literal',_cor26,_cor27},_cor28,_cor29,{'c_literal',_cor30,'utf32'},_cor31}|T],Anno> when 'true' ->
	      let <_cor7> =
		  %% Line 508
		  apply 'bin_un_utf_eval'/2
		      (H, _cor0)
	      in  let <_cor6> =
		      %% Line 508
		      apply 'bin_un_utf_1'/2
			  (T, _cor0)
		  in  %% Line 508
		      call 'erlang':'++'
			  (_cor7, _cor6)
	  %% Line 509
	  <[H|T],Anno> when 'true' ->
	      let <_cor8> =
		  %% Line 510
		  apply 'bin_un_utf_1'/2
		      (T, _cor0)
	      in  %% Line 510
		  [H|_cor8]
	  %% Line 511
	  <[],_cor32> when 'true' ->
	      []
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'bin_un_utf_1',2}}] )
	    -| ['compiler_generated'] )
	end
'bin_un_utf_eval'/2 =
    %% Line 513
    fun (_cor1,_cor0) ->
	let <Segments> =
	    %% Line 514
	    [_cor1|[]]
	in  %% Line 515
	    case apply 'eval_binary'/1
		     ({'c_binary',_cor0,Segments}) of
	      %% Line 516
	      <{'c_literal',_cor11,Bytes}>
		  when let <_cor12> =
			call 'erlang':'=:='
			    (_cor11, _cor0)
		    in  let <_cor13> =
			    call 'erlang':'is_binary'
				(Bytes)
			in  call 'erlang':'and'
				(_cor12, _cor13) ->
		  %% Line 517
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor6) ->
				case _cor6 of
				  <[B|_cor4]> when 'true' ->
				      let <_cor7> =
					  %% Line 523
					  apply 'lc$^0'/1
					      (_cor4)
				      in  ( [{'c_bitstr',_cor0,%% Line 518
							       {'c_literal',_cor0,B},%% Line 519
										     {'c_literal',_cor0,8},%% Line 520
													   {'c_literal',_cor0,1},%% Line 521
																 {'c_literal',_cor0,'integer'},%% Line 522
																			       {'c_literal',_cor0,['unsigned'|['big']]}}|_cor7]
					    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_9593> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor6})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor5> =
			    %% Line 523
			    call 'erlang':'binary_to_list'
				(Bytes)
			in  apply 'lc$^0'/1
				(_cor5)
		    -| ['list_comprehension'] )
	      %% Line 524
	      <_cor14> when 'true' ->
		  Segments
	    end
'eval_binary'/1 =
    %% Line 532
    fun (_cor0) ->
	case _cor0 of
	  <Bin = {'c_binary',Anno,Ss}> when 'true' ->
	      %% Line 533
	      try
		  let <_cor1> =
		      %% Line 534
		      apply 'eval_binary_1'/2
			  (Ss, #{}#)
		  in  %% Line 534
		      {'c_literal',Anno,_cor1}
	      of <_cor2> ->
		  _cor2
	      catch <_cor5,_cor4,_cor3> ->
		  case <_cor5,_cor4,_cor3> of
		    %% Line 536
		    <'throw','impossible',_cor7> when 'true' ->
			_cor0
		    %% Line 538
		    <'throw',{'badarg',Warning},_cor8> when 'true' ->
			do  %% Line 539
			    apply 'add_warning'/2
				(_cor0, Warning)
			    %% Line 540
			    {'c_call',Anno,%% Line 541
					   {'c_literal',[],'erlang'},%% Line 542
								     {'c_literal',[],'error'},%% Line 543
											      [{'c_literal',[],'badarg'}]}
		    ( <_846,_11776,_17805> when 'true' ->
			  primop 'raise'
			      (_cor3, _cor4)
		      -| ['compiler_generated'] )
		  end
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'eval_binary',1}}] )
	    -| ['compiler_generated'] )
	end
'eval_binary_1'/2 =
    %% Line 546
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'c_bitstr',_cor25,{'c_literal',_cor26,Val},{'c_literal',_cor27,Sz},%% Line 547
										{'c_literal',_cor28,Unit},%% Line 547
													  {'c_literal',_cor29,Type},%% Line 548
																    {'c_literal',_cor30,Flags}}|Ss],Acc0> when 'true' ->
	      let <_6002> =
		  %% Line 549
		  call 'lists':'member'
		      ('big', Flags)
	      in  let <_cor4> =
		      %% Line 549
		      case _6002 of
			%% Line 550
			<'true'> when 'true' ->
			    %% Line 551
			    'big'
			%% Line 552
			<'false'> when 'true' ->
			    let <_5989> =
				%% Line 553
				call 'lists':'member'
				    ('little', Flags)
			    in  %% Line 553
				case _5989 of
				  %% Line 554
				  <'true'> when 'true' ->
				      'little'
				  %% Line 555
				  <'false'> when 'true' ->
				      call 'erlang':'throw'
					  ('impossible')
				  ( <_cor2> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_5989})
				    -| ['compiler_generated'] )
				end
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_6002})
			  -| ['compiler_generated'] )
		      end
		  in  do  %% Line 560
			  case Type of
			    %% Line 561
			    <'binary'>
				when call 'erlang':'is_bitstring'
				      (Val) ->
				%% Line 562
				case <> of
				  %% Line 563
				  <>
				      when call 'erlang':'=:='
					    (Sz,
					     'all') ->
				      'ok'
				  %% Line 565
				  <>
				      when try
					    let <_cor7> =
						call 'erlang':'*'
						    (Sz, Unit)
					    in  let <_cor6> =
						    call 'erlang':'bit_size'
							(Val)
						in  call 'erlang':'=<'
							(_cor7, _cor6)
					of <Try> ->
					    Try
					catch <T,R> ->
					    'false' ->
				      'ok'
				  %% Line 567
				  <> when 'true' ->
				      %% Line 569
				      call 'erlang':'throw'
					  ({'badarg','embedded_binary_size'})
				end
			    %% Line 571
			    <'integer'>
				when call 'erlang':'is_integer'
				      (Val) ->
				%% Line 575
				case <> of
				  %% Line 576
				  <>
				      when try
					    let <_cor8> =
						call 'erlang':'*'
						    (Sz, Unit)
					    in  call 'erlang':'=<'
						    (_cor8, 256)
					of <Try> ->
					    Try
					catch <T,R> ->
					    'false' ->
				      'ok'
				  %% Line 579
				  <> when 'true' ->
				      let <_8232> =
					  %% Line 678
					  call 'erlang':'abs'
					      (Val)
				      in  let <_3315> =
					      %% Line 680
					      case _8232 of
						<0> when 'true' ->
						    64
						%% Line 681
						<Int> when 'true' ->
						    let <_cor3> =
							call 'erlang':'bsr'
							    (_8232, 64)
						    in  case _cor3 of
							  <0> when 'true' ->
							      128
							  <_9487> when 'true' ->
							      let <_12001> =
								  call 'erlang':'bsr'
								      (_cor3, 64)
							      in  case _12001 of
								    <0> when 'true' ->
									192
								    <_8590> when 'true' ->
									let <_1731> =
									    call 'erlang':'bsr'
										(_12001, 64)
									in  apply 'count_bits_1'/2
										(_1731, 256)
								  end
							end
					      end
					  in  %% Line 580
					      case _3315 of
						%% Line 581
						<BitsNeeded>
						    when try
							  let <_cor10> =
							      call 'erlang':'*'
								  (2, _3315)
							  in  let <_cor9> =
								  call 'erlang':'*'
								      (Sz, Unit)
							      in  call 'erlang':'>='
								      (_cor10, _cor9)
						      of <Try> ->
							  Try
						      catch <T,R> ->
							  'false' ->
						    'ok'
						%% Line 583
						<_cor31> when 'true' ->
						    %% Line 586
						    call 'erlang':'throw'
							('impossible')
					      end
				end
			    %% Line 589
			    <'float'>
				when call 'erlang':'is_float'
				      (Val) ->
				%% Line 591
				case call 'erlang':'*'
					 (Sz, Unit) of
				  %% Line 592
				  <32> when 'true' ->
				      'ok'
				  %% Line 593
				  <64> when 'true' ->
				      'ok'
				  %% Line 594
				  <_cor32> when 'true' ->
				      call 'erlang':'throw'
					  ('impossible')
				end
			    %% Line 596
			    <'utf8'> when 'true' ->
				'ok'
			    %% Line 597
			    <'utf16'> when 'true' ->
				'ok'
			    %% Line 598
			    <'utf32'> when 'true' ->
				'ok'
			    %% Line 599
			    <_cor33> when 'true' ->
				%% Line 600
				call 'erlang':'throw'
				    ('impossible')
			  end
			  %% Line 604
			  try
			      apply 'eval_binary_2'/6
				  (_cor0, Val, Sz, Unit, Type, _cor4)
			  of <_cor14> ->
			      %% Line 605
			      apply 'eval_binary_1'/2
				  (Ss, _cor14)
			  catch <_cor18,_cor17,_cor16> ->
			      case <_cor18,_cor17,_cor16> of
				%% Line 607
				<'error',_cor34,_cor35> when 'true' ->
				    %% Line 608
				    call 'erlang':'throw'
					('impossible')
				( <_2357,_13130,_9007> when 'true' ->
				      primop 'raise'
					  (_cor16, _cor17)
				  -| ['compiler_generated'] )
			      end
	  %% Line 610
	  <[Bitstr = {'c_bitstr',_cor36,{'c_literal',_cor37,_cor38},{'c_literal',_cor39,_cor40},%% Line 611
												{'c_literal',_cor41,_cor42},%% Line 611
															    {'c_literal',_cor43,_cor44},Flags = %% Line 612
																				{'c_cons',_cor45,_cor46,_cor47}}|Ss],Acc0> when 'true' ->
	      let <_6856> =
		  %% Line 613
		  call 'cerl':'fold_literal'
		      (Flags)
	      in  %% Line 613
		  case _6856 of
		    %% Line 614
		    <Flags1 = {'c_literal',_cor48,_cor49}> when 'true' ->
			let <_cor21> =
			    %% Line 615
			    call 'erlang':'setelement'
				(7, Bitstr, _6856)
			in  %% Line 615
			    apply 'eval_binary_1'/2
				([_cor21|Ss], _cor0)
		    %% Line 616
		    <_cor57> when 'true' ->
			call 'erlang':'throw'
			    ('impossible')
		  end
	  %% Line 618
	  <[],Acc> when 'true' ->
	      _cor0
	  %% Line 619
	  <_cor58,_cor59> when 'true' ->
	      call 'erlang':'throw'
		  ('impossible')
	end
'eval_binary_2'/6 =
    %% Line 621
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Acc,Val,Size,Unit,'integer','little'> when 'true' ->
	      let <_cor6> =
		  %% Line 622
		  call 'erlang':'*'
		      (_cor3, _cor2)
	      in  %% Line 622
		  #{#<_cor5>('all',1,'binary',['unsigned'|['big']]),
		    #<_cor4>(_cor6,1,'integer',['unsigned'|['little']])}#
	  %% Line 623
	  <Acc,Val,Size,Unit,'integer','big'> when 'true' ->
	      let <_cor7> =
		  %% Line 624
		  call 'erlang':'*'
		      (_cor3, _cor2)
	      in  %% Line 624
		  #{#<_cor5>('all',1,'binary',['unsigned'|['big']]),
		    #<_cor4>(_cor7,1,'integer',['unsigned'|['big']])}#
	  %% Line 625
	  <Acc,Val,_X_Size,_X_Unit,'utf8',_cor39> when 'true' ->
	      %% Line 626
	      try
		  %% Line 627
		  #{#<_cor5>('all',1,'binary',['unsigned'|['big']]),
		    #<_cor4>('undefined','undefined','utf8',['unsigned'|['big']])}#
	      of <_cor8> ->
		  _cor8
	      catch <_cor11,_cor10,_cor9> ->
		  case <_cor11,_cor10,_cor9> of
		    %% Line 629
		    <'error',_cor40,_cor41> when 'true' ->
			%% Line 630
			call 'erlang':'throw'
			    ({'badarg','bad_unicode'})
		    ( <_10017,_15406,_1436> when 'true' ->
			  primop 'raise'
			      (_cor9, _cor10)
		      -| ['compiler_generated'] )
		  end
	  %% Line 632
	  <Acc,Val,_X_Size,_X_Unit,'utf16','big'> when 'true' ->
	      %% Line 633
	      try
		  %% Line 634
		  #{#<_cor5>('all',1,'binary',['unsigned'|['big']]),
		    #<_cor4>('undefined','undefined','utf16',['unsigned'|['big']])}#
	      of <_cor12> ->
		  _cor12
	      catch <_cor15,_cor14,_cor13> ->
		  case <_cor15,_cor14,_cor13> of
		    %% Line 636
		    <'error',_cor42,_cor43> when 'true' ->
			%% Line 637
			call 'erlang':'throw'
			    ({'badarg','bad_unicode'})
		    ( <_13469,_13622,_18918> when 'true' ->
			  primop 'raise'
			      (_cor13, _cor14)
		      -| ['compiler_generated'] )
		  end
	  %% Line 639
	  <Acc,Val,_X_Size,_X_Unit,'utf16','little'> when 'true' ->
	      %% Line 640
	      try
		  %% Line 641
		  #{#<_cor5>('all',1,'binary',['unsigned'|['big']]),
		    #<_cor4>('undefined','undefined','utf16',['unsigned'|['little']])}#
	      of <_cor16> ->
		  _cor16
	      catch <_cor19,_cor18,_cor17> ->
		  case <_cor19,_cor18,_cor17> of
		    %% Line 643
		    <'error',_cor44,_cor45> when 'true' ->
			%% Line 644
			call 'erlang':'throw'
			    ({'badarg','bad_unicode'})
		    ( <_5253,_10707,_13216> when 'true' ->
			  primop 'raise'
			      (_cor17, _cor18)
		      -| ['compiler_generated'] )
		  end
	  %% Line 646
	  <Acc,Val,_X_Size,_X_Unit,'utf32','big'> when 'true' ->
	      %% Line 647
	      try
		  %% Line 648
		  #{#<_cor5>('all',1,'binary',['unsigned'|['big']]),
		    #<_cor4>('undefined','undefined','utf32',['unsigned'|['big']])}#
	      of <_cor20> ->
		  _cor20
	      catch <_cor23,_cor22,_cor21> ->
		  case <_cor23,_cor22,_cor21> of
		    %% Line 650
		    <'error',_cor46,_cor47> when 'true' ->
			%% Line 651
			call 'erlang':'throw'
			    ({'badarg','bad_unicode'})
		    ( <_18564,_18586,_6090> when 'true' ->
			  primop 'raise'
			      (_cor21, _cor22)
		      -| ['compiler_generated'] )
		  end
	  %% Line 653
	  <Acc,Val,_X_Size,_X_Unit,'utf32','little'> when 'true' ->
	      %% Line 654
	      try
		  %% Line 655
		  #{#<_cor5>('all',1,'binary',['unsigned'|['big']]),
		    #<_cor4>('undefined','undefined','utf32',['unsigned'|['little']])}#
	      of <_cor24> ->
		  _cor24
	      catch <_cor27,_cor26,_cor25> ->
		  case <_cor27,_cor26,_cor25> of
		    %% Line 657
		    <'error',_cor48,_cor49> when 'true' ->
			%% Line 658
			call 'erlang':'throw'
			    ({'badarg','bad_unicode'})
		    ( <_4006,_10113,_10725> when 'true' ->
			  primop 'raise'
			      (_cor25, _cor26)
		      -| ['compiler_generated'] )
		  end
	  %% Line 660
	  <Acc,Val,Size,Unit,'float','little'> when 'true' ->
	      let <_cor28> =
		  %% Line 661
		  call 'erlang':'*'
		      (_cor3, _cor2)
	      in  %% Line 661
		  #{#<_cor5>('all',1,'binary',['unsigned'|['big']]),
		    #<_cor4>(_cor28,1,'float',['unsigned'|['little']])}#
	  %% Line 662
	  <Acc,Val,Size,Unit,'float','big'> when 'true' ->
	      let <_cor29> =
		  %% Line 663
		  call 'erlang':'*'
		      (_cor3, _cor2)
	      in  %% Line 663
		  #{#<_cor5>('all',1,'binary',['unsigned'|['big']]),
		    #<_cor4>(_cor29,1,'float',['unsigned'|['big']])}#
	  %% Line 664
	  <Acc,Val,'all',Unit,'binary',_cor50> when 'true' ->
	      let <_6763> =
		  %% Line 665
		  call 'erlang':'bit_size'
		      (_cor4)
	      in  %% Line 665
		  case _6763 of
		    %% Line 666
		    <Size>
			when try
			      let <_cor30> =
				  call 'erlang':'rem'
				      (_6763, _cor2)
			      in  call 'erlang':'=:='
				      (_cor30, 0)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			%% Line 667
			#{#<_cor5>('all',1,'binary',['unsigned'|['big']]),
			  #<_cor4>(_6763,1,'binary',['unsigned'|['big']])}#
		    %% Line 668
		    <Size> when 'true' ->
			%% Line 669
			call 'erlang':'throw'
			    ({'badarg',{'embedded_unit',_cor2,_6763}})
		  end
	  %% Line 671
	  <Acc,Val,Size,Unit,'binary',_cor51> when 'true' ->
	      let <_cor32> =
		  %% Line 672
		  call 'erlang':'*'
		      (_cor3, _cor2)
	      in  %% Line 672
		  #{#<_cor5>('all',1,'binary',['unsigned'|['big']]),
		    #<_cor4>(_cor32,1,'binary',['unsigned'|['big']])}#
	  ( <_cor38,_cor37,_cor36,_cor35,_cor34,_cor33> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'eval_binary_2',6}}] )
	    -| ['compiler_generated'] )
	end
'count_bits_1'/2 =
    %% Line 680
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,Bits> when 'true' ->
	      _cor0
	  %% Line 681
	  <Int,Bits> when 'true' ->
	      let <_cor3> =
		  call 'erlang':'bsr'
		      (_cor1, 64)
	      in  let <_cor2> =
		      call 'erlang':'+'
			  (_cor0, 64)
		  in  apply 'count_bits_1'/2
			  (_cor3, _cor2)
	end
'useless_call'/2 =
    %% Line 691
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'effect',Call = {'c_call',Anno,%% Line 692
					  {'c_literal',_cor10,Mod},%% Line 693
								   {'c_literal',_cor11,Name},Args}> when 'true' ->
	      let <A> =
		  %% Line 695
		  call 'erlang':'length'
		      (Args)
	      in  let <_1463> =
		      %% Line 696
		      call 'erl_bifs':'is_safe'
			  (Mod, Name, A)
		  in  %% Line 696
		      case _1463 of
			%% Line 697
			<'false'> when 'true' ->
			    do  let <_5336> =
				    %% Line 698
				    call 'erl_bifs':'is_pure'
					(Mod, Name, A)
				in  %% Line 698
				    case _5336 of
				      %% Line 699
				      <'true'> when 'true' ->
					  let <_7153> =
					      %% Line 700
					      call 'lists':'member'
						  ('result_not_wanted', Anno)
					  in  %% Line 700
					      case _7153 of
						%% Line 701
						<'false'> when 'true' ->
						    %% Line 702
						    apply 'add_warning'/2
							(_cor0, 'result_ignored')
						%% Line 703
						<'true'> when 'true' ->
						    'ok'
						( <_cor3> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_7153})
						  -| ['compiler_generated'] )
					      end
				      %% Line 706
				      <'false'> when 'true' ->
					  'ok'
				      ( <_cor4> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_5336})
					-| ['compiler_generated'] )
				    end
				%% Line 709
				'no'
			%% Line 710
			<'true'> when 'true' ->
			    do  %% Line 711
				apply 'add_warning'/2
				    (_cor0, {'no_effect',{Mod,Name,A}})
				let <_13132> =
				    %% Line 1614
				    call 'orddict':'new'
					()
				in  let <_7466> =
					%% Line 1614
					call 'gb_trees':'empty'
					    ()
				    in  let <_cor5> =
					    %% Line 1614
					    {'sub',_13132,_7466,[],'false'}
					in  let <_cor6> =
						%% Line 712
						apply 'make_effect_seq'/2
						    (Args, _cor5)
					    in  %% Line 712
						{'yes',_cor6}
			( <_cor7> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_1463})
			  -| ['compiler_generated'] )
		      end
	  %% Line 714
	  <_cor12,_cor13> when 'true' ->
	      'no'
	end
'make_effect_seq'/2 =
    %% Line 721
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Sub> when 'true' ->
	      let <_1415> =
		  %% Line 722
		  apply 'is_safe_simple'/2
		      (H, _cor0)
	      in  %% Line 722
		  case _1415 of
		    %% Line 723
		    <'true'> when 'true' ->
			apply 'make_effect_seq'/2
			    (T, _cor0)
		    %% Line 724
		    <'false'> when 'true' ->
			let <_cor2> =
			    apply 'make_effect_seq'/2
				(T, _cor0)
			in  {'c_seq',[],H,_cor2}
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_1415})
		      -| ['compiler_generated'] )
		  end
	  %% Line 726
	  <[],_cor6> when 'true' ->
	      %% Line 2813
	      {'c_literal',[],'ok'}
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'make_effect_seq',2}}] )
	    -| ['compiler_generated'] )
	end
'call'/4 =
    %% Line 730
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Call = {'c_call',_cor9,_cor10,_cor11,As},M0 = {'c_literal',_cor12,M},N0 = {'c_literal',_cor13,N},Sub> when 'true' ->
	      let <_6969> =
		  %% Line 731
		  call 'erlang':'get'
		      ('no_inline_list_funcs')
	      in  %% Line 731
		  case _6969 of
		    %% Line 732
		    <'true'> when 'true' ->
			%% Line 733
			apply 'call_0'/5
			    (_cor3, _cor2, _cor1, As, _cor0)
		    %% Line 734
		    <'false'> when 'true' ->
			%% Line 735
			apply 'call_1'/5
			    (_cor3, M, N, As, _cor0)
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_6969})
		      -| ['compiler_generated'] )
		  end
	  %% Line 737
	  <Call = {'c_call',_cor14,_cor15,_cor16,As},M,N,Sub> when 'true' ->
	      %% Line 738
	      apply 'call_0'/5
		  (_cor3, _cor2, _cor1, As, _cor0)
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'call',4}}] )
	    -| ['compiler_generated'] )
	end
'call_0'/5 =
    %% Line 740
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <As1> =
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[E|_11620]> when 'true' ->
				let <_cor6> =
				    apply 'expr'/3
					(E, %% Line 741
					    'value', _cor0)
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_11620)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_2853> when 'true' ->
				  primop 'match_fail'
				      ({'function_clause',_cor5})
			      -| ['compiler_generated'] )
			  end
	      in  case _cor1 of
		    <[E|_2795]> when 'true' ->
			let <_cor6> =
			    apply 'expr'/3
				(E, %% Line 741
				    'value', _cor0)
			in  let <_cor7> =
				case _2795 of
				  <[_10535|_11620]> when 'true' ->
				      let <_18113> =
					  apply 'expr'/3
					      (_10535, %% Line 741
						       'value', _cor0)
				      in  let <_cor7> =
					      apply 'lc$^0'/1
						  (_11620)
					  in  ( [_18113|_cor7]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_2853> when 'true' ->
					primop 'match_fail'
					    ({'function_clause',_2795})
				    -| ['compiler_generated'] )
				end
			    in  ( [_cor6|_cor7]
				  -| ['compiler_generated'] )
		    <[]> when 'true' ->
			[]
		    ( <_2853> when 'true' ->
			  primop 'match_fail'
			      ({'function_clause',_cor1})
		      -| ['compiler_generated'] )
		  end
	      -| ['list_comprehension'] )
	in  %% Line 742
	    case _cor4 of
	      <{'c_call',_cor14,_cor15,_cor16,_cor17}> when 'true' ->
		  let <_cor8> =
		      call 'erlang':'setelement'
			  (5, _cor4, As1)
		  in  apply 'fold_call'/5
			  (_cor8, _cor3, _cor2, As1, _cor0)
	      ( <_cor18> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','c_call'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
'call_1'/5 =
    %% Line 747
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'c_call',Anno,_cor169,_cor170,_cor171},'lists','all',[Arg1|[Arg2|[]]],Sub> when 'true' ->
	      let <CC1> =
		  %% Line 753
		  {'c_clause',[],[{'c_literal',[],'true'}],{'c_literal',[],'true'},%% Line 754
										   {'c_apply',Anno,{'c_var',[],{'lists^all',1}},[{'c_var',[],'Xs'}]}}
	      in  let <_cor12> =
		      %% Line 1108
		      {'c_primop',Anno,%% Line 1109
				       {'c_literal',[],'match_fail'},%% Line 1110
								     [{'c_tuple',[],[{'c_literal',[],'case_clause'}|[{'c_var',[],'X'}]]}]}
		  in  let <CC3> =
			  %% Line 757
			  {'c_clause',[],[{'c_var',[],'X'}],{'c_literal',[],'true'},_cor12}
		      in  let <C1> =
			      %% Line 759
			      {'c_clause',[],[{'c_cons',[],{'c_var',[],'X'},{'c_var',[],'Xs'}}],{'c_literal',[],'true'},%% Line 760
															{'c_case',[],{'c_apply',Anno,{'c_var',[],'F'},[{'c_var',[],'X'}]},%% Line 761
																							  [CC1|[{'c_clause',[],[{'c_literal',[],'false'}],{'c_literal',[],'true'},{'c_literal',[],'false'}}|[CC3|[]]]]}}
			  in  let <_17520> =
				  %% Line 769
				  [{'function_name',{'lists^all',1}}|Anno]
			      in  let <_cor17> =
				      %% Line 1108
				      {'c_primop',_17520,%% Line 1109
							 {'c_literal',[],'match_fail'},%% Line 1110
										       [{'c_tuple',[],[{'c_literal',[],'function_clause'}|[{'c_var',[],'F'}|[{'c_var',[],'Xs'}]]]}]}
				  in  let <C3> =
					  %% Line 768
					  {'c_clause',[],[{'c_var',[],'Xs'}],{'c_literal',[],'true'},_cor17}
				      in  let <Fun> =
					      %% Line 770
					      {'c_fun',[],[{'c_var',[],'Xs'}],%% Line 771
									      {'c_case',[],{'c_var',[],'Xs'},[C1|[{'c_clause',[],[{'c_literal',[],[]}],{'c_call',[],{'c_literal',[],'erlang'},{'c_literal',[],'is_function'},[{'c_var',[],'F'}|[{'c_literal',[],1}]]},{'c_literal',[],'true'}}|[C3|[]]]]}}
					  in  %% Line 773
					      apply 'expr'/2
						  ({'c_let',[],[{'c_var',[],'F'}|[{'c_var',[],'L'}]],{'c_values',[],[Arg1|[Arg2|[]]]},%% Line 774
																      {'c_letrec',[],[{{'c_var',[],{'lists^all',1}},Fun}|[]],%% Line 775
																							     {'c_apply',Anno,{'c_var',[],{'lists^all',1}},[{'c_var',[],'L'}]}}}, _cor0)
	  %% Line 777
	  <{'c_call',Anno,_cor172,_cor173,_cor174},'lists','any',[Arg1|[Arg2|[]]],Sub> when 'true' ->
	      let <CC2> =
		  %% Line 785
		  {'c_clause',[],[{'c_literal',[],'false'}],{'c_literal',[],'true'},%% Line 786
										    {'c_apply',Anno,{'c_var',[],{'lists^any',1}},[{'c_var',[],'Xs'}]}}
	      in  let <_cor28> =
		      %% Line 1108
		      {'c_primop',Anno,%% Line 1109
				       {'c_literal',[],'match_fail'},%% Line 1110
								     [{'c_tuple',[],[{'c_literal',[],'case_clause'}|[{'c_var',[],'X'}]]}]}
		  in  let <CC3> =
			  %% Line 787
			  {'c_clause',[],[{'c_var',[],'X'}],{'c_literal',[],'true'},_cor28}
		      in  let <C1> =
			      %% Line 789
			      {'c_clause',[],[{'c_cons',[],{'c_var',[],'X'},{'c_var',[],'Xs'}}],{'c_literal',[],'true'},%% Line 790
															{'c_case',[],{'c_apply',Anno,{'c_var',[],'F'},[{'c_var',[],'X'}]},%% Line 791
																							  [{'c_clause',[],[{'c_literal',[],'true'}],{'c_literal',[],'true'},{'c_literal',[],'true'}}|[CC2|[CC3|[]]]]}}
			  in  let <_14871> =
				  %% Line 799
				  [{'function_name',{'lists^any',1}}|Anno]
			      in  let <_cor33> =
				      %% Line 1108
				      {'c_primop',_14871,%% Line 1109
							 {'c_literal',[],'match_fail'},%% Line 1110
										       [{'c_tuple',[],[{'c_literal',[],'function_clause'}|[{'c_var',[],'F'}|[{'c_var',[],'Xs'}]]]}]}
				  in  let <C3> =
					  %% Line 798
					  {'c_clause',[],[{'c_var',[],'Xs'}],{'c_literal',[],'true'},_cor33}
				      in  let <Fun> =
					      %% Line 800
					      {'c_fun',[],[{'c_var',[],'Xs'}],%% Line 801
									      {'c_case',[],{'c_var',[],'Xs'},[C1|[{'c_clause',[],[{'c_literal',[],[]}],{'c_call',[],{'c_literal',[],'erlang'},{'c_literal',[],'is_function'},[{'c_var',[],'F'}|[{'c_literal',[],1}]]},{'c_literal',[],'false'}}|[C3|[]]]]}}
					  in  %% Line 803
					      apply 'expr'/2
						  ({'c_let',[],[{'c_var',[],'F'}|[{'c_var',[],'L'}]],{'c_values',[],[Arg1|[Arg2|[]]]},%% Line 804
																      {'c_letrec',[],[{{'c_var',[],{'lists^any',1}},Fun}|[]],%% Line 805
																							     {'c_apply',Anno,{'c_var',[],{'lists^any',1}},[{'c_var',[],'L'}]}}}, _cor0)
	  %% Line 807
	  <{'c_call',Anno,_cor175,_cor176,_cor177},'lists','foreach',[Arg1|[Arg2|[]]],Sub> when 'true' ->
	      let <C1> =
		  %% Line 812
		  {'c_clause',[],[{'c_cons',[],{'c_var',[],'X'},{'c_var',[],'Xs'}}],{'c_literal',[],'true'},%% Line 813
													    {'c_seq',[],{'c_apply',Anno,{'c_var',[],'F'},[{'c_var',[],'X'}]},%% Line 814
																					     {'c_apply',Anno,{'c_var',[],{'lists^foreach',1}},[{'c_var',[],'Xs'}]}}}
	      in  let <_1173> =
		      %% Line 822
		      [{'function_name',{'lists^foreach',1}}|Anno]
		  in  let <_cor44> =
			  %% Line 1108
			  {'c_primop',_1173,%% Line 1109
					    {'c_literal',[],'match_fail'},%% Line 1110
									  [{'c_tuple',[],[{'c_literal',[],'function_clause'}|[{'c_var',[],'F'}|[{'c_var',[],'Xs'}]]]}]}
		      in  let <C3> =
			      %% Line 821
			      {'c_clause',[],[{'c_var',[],'Xs'}],{'c_literal',[],'true'},_cor44}
			  in  let <Fun> =
				  %% Line 823
				  {'c_fun',[],[{'c_var',[],'Xs'}],%% Line 824
								  {'c_case',[],{'c_var',[],'Xs'},[C1|[{'c_clause',[],[{'c_literal',[],[]}],{'c_call',[],{'c_literal',[],'erlang'},{'c_literal',[],'is_function'},[{'c_var',[],'F'}|[{'c_literal',[],1}]]},{'c_literal',[],'ok'}}|[C3|[]]]]}}
			      in  %% Line 826
				  apply 'expr'/2
				      ({'c_let',[],[{'c_var',[],'F'}|[{'c_var',[],'L'}]],{'c_values',[],[Arg1|[Arg2|[]]]},%% Line 827
															  {'c_letrec',[],[{{'c_var',[],{'lists^foreach',1}},Fun}|[]],%% Line 828
																						     {'c_apply',Anno,{'c_var',[],{'lists^foreach',1}},[{'c_var',[],'L'}]}}}, _cor0)
	  %% Line 830
	  <{'c_call',Anno,_cor178,_cor179,_cor180},'lists','map',[Arg1|[Arg2|[]]],Sub> when 'true' ->
	      let <C1> =
		  %% Line 836
		  {'c_clause',[],[{'c_cons',[],{'c_var',[],'X'},{'c_var',[],'Xs'}}],{'c_literal',[],'true'},%% Line 837
													    {'c_let',[],[{'c_var',[],'H'}],{'c_apply',Anno,{'c_var',[],'F'},%% Line 839
																					    [{'c_var',[],'X'}]},%% Line 840
																								{'c_cons',%% Line 841
																									  ['compiler_generated'],{'c_var',[],'H'},%% Line 842
																														  {'c_apply',Anno,{'c_var',[],{'lists^map',1}},%% Line 844
																																			       [{'c_var',[],'Xs'}]}}}}
	      in  let <_6480> =
		      %% Line 852
		      [{'function_name',{'lists^map',1}}|Anno]
		  in  let <_cor56> =
			  %% Line 1108
			  {'c_primop',_6480,%% Line 1109
					    {'c_literal',[],'match_fail'},%% Line 1110
									  [{'c_tuple',[],[{'c_literal',[],'function_clause'}|[{'c_var',[],'F'}|[{'c_var',[],'Xs'}]]]}]}
		      in  let <C3> =
			      %% Line 851
			      {'c_clause',[],[{'c_var',[],'Xs'}],{'c_literal',[],'true'},_cor56}
			  in  let <Fun> =
				  %% Line 853
				  {'c_fun',[],[{'c_var',[],'Xs'}],%% Line 854
								  {'c_case',[],{'c_var',[],'Xs'},[C1|[{'c_clause',[],[{'c_literal',[],[]}],{'c_call',[],{'c_literal',[],'erlang'},{'c_literal',[],'is_function'},[{'c_var',[],'F'}|[{'c_literal',[],1}]]},{'c_literal',[],[]}}|[C3|[]]]]}}
			      in  %% Line 856
				  apply 'expr'/2
				      ({'c_let',[],[{'c_var',[],'F'}|[{'c_var',[],'L'}]],{'c_values',[],[Arg1|[Arg2|[]]]},%% Line 857
															  {'c_letrec',[],[{{'c_var',[],{'lists^map',1}},Fun}|[]],%% Line 858
																						 {'c_apply',Anno,{'c_var',[],{'lists^map',1}},[{'c_var',[],'L'}]}}}, _cor0)
	  %% Line 860
	  <{'c_call',Anno,_cor181,_cor182,_cor183},'lists','flatmap',[Arg1|[Arg2|[]]],Sub> when 'true' ->
	      let <C1> =
		  %% Line 866
		  {'c_clause',[],[{'c_cons',[],{'c_var',[],'X'},{'c_var',[],'Xs'}}],{'c_literal',[],'true'},%% Line 867
													    {'c_let',[],[{'c_var',[],'H'}],%% Line 868
																	   {'c_apply',Anno,{'c_var',[],'F'},[{'c_var',[],'X'}]},%% Line 869
																								{'c_call',['compiler_generated'|Anno],%% Line 870
																												      {'c_literal',[],'erlang'},%% Line 871
																																{'c_literal',[],'++'},%% Line 872
																																		      [{'c_var',[],'H'}|%% Line 873
																																					[{'c_apply',Anno,{'c_var',[],{'lists^flatmap',1}},%% Line 875
																																											  [{'c_var',[],'Xs'}]}|%% Line 875
																																													       []]]}}}
	      in  let <_15918> =
		      %% Line 883
		      [{'function_name',{'lists^flatmap',1}}|Anno]
		  in  let <_cor68> =
			  %% Line 1108
			  {'c_primop',_15918,%% Line 1109
					     {'c_literal',[],'match_fail'},%% Line 1110
									   [{'c_tuple',[],[{'c_literal',[],'function_clause'}|[{'c_var',[],'F'}|[{'c_var',[],'Xs'}]]]}]}
		      in  let <C3> =
			      %% Line 882
			      {'c_clause',[],[{'c_var',[],'Xs'}],{'c_literal',[],'true'},_cor68}
			  in  let <Fun> =
				  %% Line 884
				  {'c_fun',[],[{'c_var',[],'Xs'}],%% Line 885
								  {'c_case',[],{'c_var',[],'Xs'},[C1|[{'c_clause',[],[{'c_literal',[],[]}],{'c_call',[],{'c_literal',[],'erlang'},{'c_literal',[],'is_function'},[{'c_var',[],'F'}|[{'c_literal',[],1}]]},{'c_literal',[],[]}}|[C3|[]]]]}}
			      in  %% Line 887
				  apply 'expr'/2
				      ({'c_let',[],[{'c_var',[],'F'}|[{'c_var',[],'L'}]],{'c_values',[],[Arg1|[Arg2|[]]]},%% Line 888
															  {'c_letrec',[],[{{'c_var',[],{'lists^flatmap',1}},Fun}|[]],%% Line 889
																						     {'c_apply',Anno,{'c_var',[],{'lists^flatmap',1}},[{'c_var',[],'L'}]}}}, _cor0)
	  %% Line 891
	  <{'c_call',Anno,_cor184,_cor185,_cor186},'lists','filter',[Arg1|[Arg2|[]]],Sub> when 'true' ->
	      let <_cor80> =
		  %% Line 1108
		  {'c_primop',Anno,%% Line 1109
				   {'c_literal',[],'match_fail'},%% Line 1110
								 [{'c_tuple',[],[{'c_literal',[],'case_clause'}|[{'c_var',[],'X'}]]}]}
	      in  let <CC3> =
		      %% Line 902
		      {'c_clause',[],[{'c_var',[],'X'}],{'c_literal',[],'true'},_cor80}
		  in  let <Case> =
			  %% Line 904
			  {'c_case',[],{'c_var',[],'B'},[{'c_clause',[],[{'c_literal',[],'true'}],{'c_literal',[],'true'},{'c_cons',['compiler_generated'],{'c_var',[],'X'},{'c_var',[],'Xs'}}}|[{'c_clause',[],[{'c_literal',[],'false'}],{'c_literal',[],'true'},{'c_var',[],'Xs'}}|[CC3|[]]]]}
		      in  let <C1> =
			      %% Line 905
			      {'c_clause',[],[{'c_cons',[],{'c_var',[],'X'},{'c_var',[],'Xs'}}],{'c_literal',[],'true'},%% Line 906
															{'c_let',[],[{'c_var',[],'B'}],%% Line 907
																		       {'c_apply',Anno,{'c_var',[],'F'},[{'c_var',[],'X'}]},%% Line 908
																									    {'c_let',[],[{'c_var',[],'Xs'}],%% Line 909
																													    {'c_apply',Anno,{'c_var',[],{'lists^filter',1}},%% Line 911
																																			    [{'c_var',[],'Xs'}]},Case}}}
			  in  let <_14006> =
				  %% Line 920
				  [{'function_name',{'lists^filter',1}}|Anno]
			      in  let <_cor86> =
				      %% Line 1108
				      {'c_primop',_14006,%% Line 1109
							 {'c_literal',[],'match_fail'},%% Line 1110
										       [{'c_tuple',[],[{'c_literal',[],'function_clause'}|[{'c_var',[],'F'}|[{'c_var',[],'Xs'}]]]}]}
				  in  let <C3> =
					  %% Line 919
					  {'c_clause',[],[{'c_var',[],'Xs'}],{'c_literal',[],'true'},_cor86}
				      in  let <Fun> =
					      %% Line 921
					      {'c_fun',[],[{'c_var',[],'Xs'}],%% Line 922
									      {'c_case',[],{'c_var',[],'Xs'},[C1|[{'c_clause',[],[{'c_literal',[],[]}],{'c_call',[],{'c_literal',[],'erlang'},{'c_literal',[],'is_function'},[{'c_var',[],'F'}|[{'c_literal',[],1}]]},{'c_literal',[],[]}}|[C3|[]]]]}}
					  in  %% Line 924
					      apply 'expr'/2
						  ({'c_let',[],[{'c_var',[],'F'}|[{'c_var',[],'L'}]],{'c_values',[],[Arg1|[Arg2|[]]]},%% Line 925
																      {'c_letrec',[],[{{'c_var',[],{'lists^filter',1}},Fun}|[]],%% Line 926
																								{'c_apply',Anno,{'c_var',[],{'lists^filter',1}},[{'c_var',[],'L'}]}}}, _cor0)
	  %% Line 928
	  <{'c_call',Anno,_cor187,_cor188,_cor189},'lists','foldl',[Arg1|[Arg2|[Arg3|[]]]],Sub> when 'true' ->
	      let <C1> =
		  %% Line 934
		  {'c_clause',[],[{'c_cons',[],{'c_var',[],'X'},{'c_var',[],'Xs'}}],{'c_literal',[],'true'},%% Line 935
													    {'c_apply',Anno,{'c_var',[],{'lists^foldl',2}},%% Line 937
																			   [{'c_var',[],'Xs'}|[{'c_apply',Anno,{'c_var',[],'F'},%% Line 939
																										[{'c_var',[],'X'}|[{'c_var',[],'A'}]]}|%% Line 939
																														       []]]}}
	      in  let <_2258> =
		      %% Line 947
		      [{'function_name',{'lists^foldl',2}}|Anno]
		  in  let <_cor98> =
			  %% Line 1108
			  {'c_primop',_2258,%% Line 1109
					    {'c_literal',[],'match_fail'},%% Line 1110
									  [{'c_tuple',[],[{'c_literal',[],'function_clause'}|[{'c_var',[],'F'}|[{'c_var',[],'A'}|[{'c_var',[],'Xs'}]]]]}]}
		      in  let <C3> =
			      %% Line 946
			      {'c_clause',[],[{'c_var',[],'Xs'}],{'c_literal',[],'true'},_cor98}
			  in  let <Fun> =
				  %% Line 948
				  {'c_fun',[],[{'c_var',[],'Xs'}|[{'c_var',[],'A'}]],%% Line 949
										     {'c_case',[],{'c_var',[],'Xs'},[C1|[{'c_clause',[],[{'c_literal',[],[]}],{'c_call',[],{'c_literal',[],'erlang'},{'c_literal',[],'is_function'},[{'c_var',[],'F'}|[{'c_literal',[],2}]]},{'c_var',[],'A'}}|[C3|[]]]]}}
			      in  %% Line 951
				  apply 'expr'/2
				      ({'c_let',[],[{'c_var',[],'F'}|[{'c_var',[],'A'}|[{'c_var',[],'L'}]]],{'c_values',[],[Arg1|[Arg2|[Arg3|[]]]]},%% Line 952
																		    {'c_letrec',[],[{{'c_var',[],{'lists^foldl',2}},Fun}|[]],%% Line 953
																									     {'c_apply',Anno,{'c_var',[],{'lists^foldl',2}},[{'c_var',[],'L'}|[{'c_var',[],'A'}]]}}}, _cor0)
	  %% Line 955
	  <{'c_call',Anno,_cor190,_cor191,_cor192},'lists','foldr',[Arg1|[Arg2|[Arg3|[]]]],Sub> when 'true' ->
	      let <C1> =
		  %% Line 961
		  {'c_clause',[],[{'c_cons',[],{'c_var',[],'X'},{'c_var',[],'Xs'}}],{'c_literal',[],'true'},%% Line 962
													    {'c_apply',Anno,{'c_var',[],'F'},%% Line 964
																	     [{'c_var',[],'X'}|[{'c_apply',Anno,{'c_var',[],{'lists^foldr',2}},%% Line 966
																									       [{'c_var',[],'Xs'}|[{'c_var',[],'A'}]]}|%% Line 966
																														       []]]}}
	      in  let <_14549> =
		      %% Line 974
		      [{'function_name',{'lists^foldr',2}}|Anno]
		  in  let <_cor110> =
			  %% Line 1108
			  {'c_primop',_14549,%% Line 1109
					     {'c_literal',[],'match_fail'},%% Line 1110
									   [{'c_tuple',[],[{'c_literal',[],'function_clause'}|[{'c_var',[],'F'}|[{'c_var',[],'A'}|[{'c_var',[],'Xs'}]]]]}]}
		      in  let <C3> =
			      %% Line 973
			      {'c_clause',[],[{'c_var',[],'Xs'}],{'c_literal',[],'true'},_cor110}
			  in  let <Fun> =
				  %% Line 975
				  {'c_fun',[],[{'c_var',[],'Xs'}|[{'c_var',[],'A'}]],%% Line 976
										     {'c_case',[],{'c_var',[],'Xs'},[C1|[{'c_clause',[],[{'c_literal',[],[]}],{'c_call',[],{'c_literal',[],'erlang'},{'c_literal',[],'is_function'},[{'c_var',[],'F'}|[{'c_literal',[],2}]]},{'c_var',[],'A'}}|[C3|[]]]]}}
			      in  %% Line 978
				  apply 'expr'/2
				      ({'c_let',[],[{'c_var',[],'F'}|[{'c_var',[],'A'}|[{'c_var',[],'L'}]]],{'c_values',[],[Arg1|[Arg2|[Arg3|[]]]]},%% Line 979
																		    {'c_letrec',[],[{{'c_var',[],{'lists^foldr',2}},Fun}|[]],%% Line 980
																									     {'c_apply',Anno,{'c_var',[],{'lists^foldr',2}},[{'c_var',[],'L'}|[{'c_var',[],'A'}]]}}}, _cor0)
	  %% Line 982
	  <{'c_call',Anno,_cor193,_cor194,_cor195},'lists','mapfoldl',[Arg1|[Arg2|[Arg3|[]]]],Sub> when 'true' ->
	      let <Match> =
		  %% Line 989
		  fun (_cor125,_cor124,_cor123) ->
		      let <C1> =
			  %% Line 990
			  {'c_clause',[],[_cor124|[]],{'c_literal',[],'true'},_cor123}
		      in  let <_cor121> =
			      %% Line 1108
			      {'c_primop',Anno,%% Line 1109
					       {'c_literal',[],'match_fail'},%% Line 1110
									     [{'c_tuple',[],[{'c_literal',[],'badmatch'}|[{'c_var',[],'X'}]]}]}
			  in  let <C2> =
				  %% Line 992
				  {'c_clause',[],[{'c_var',[],'X'}],{'c_literal',[],'true'},_cor121}
			      in  %% Line 994
				  {'c_case',[],_cor125,[C1|[C2|[]]]}
	      in  let <_cor130> =
		      %% Line 1000
		      apply Match
			  ({'c_apply',Anno,{'c_var',[],{'lists^mapfoldl',2}},%% Line 1002
									     [{'c_var',[],'Xs'}|[{'c_var',[],'A'}]]}, %% Line 1003
														      {'c_tuple',[],[{'c_var',[],'Xs'}|[{'c_var',[],'A'}]]}, %% Line 1004
																					     {'c_tuple',['compiler_generated'],[{'c_cons',['compiler_generated'],{'c_var',[],'X'},{'c_var',[],'Xs'}}|[{'c_var',[],'A'}]]})
		  in  let <_cor131> =
			  %% Line 997
			  apply Match
			      ({'c_apply',Anno,{'c_var',[],'F'},[{'c_var',[],'X'}|[{'c_var',[],'A'}]]}, %% Line 998
													{'c_tuple',[],[{'c_var',[],'X'}|[{'c_var',[],'A'}]]}, _cor130)
		      in  let <C1> =
			      %% Line 996
			      {'c_clause',[],[{'c_cons',[],{'c_var',[],'X'},{'c_var',[],'Xs'}}],{'c_literal',[],'true'},_cor131}
			  in  let <_1267> =
				  %% Line 1027
				  [{'function_name',{'lists^mapfoldl',2}}|Anno]
			      in  let <_cor135> =
				      %% Line 1108
				      {'c_primop',_1267,%% Line 1109
							{'c_literal',[],'match_fail'},%% Line 1110
										      [{'c_tuple',[],[{'c_literal',[],'function_clause'}|[{'c_var',[],'F'}|[{'c_var',[],'A'}|[{'c_var',[],'Xs'}]]]]}]}
				  in  let <C3> =
					  %% Line 1026
					  {'c_clause',[],[{'c_var',[],'Xs'}],{'c_literal',[],'true'},_cor135}
				      in  let <Fun> =
					      %% Line 1028
					      {'c_fun',[],[{'c_var',[],'Xs'}|[{'c_var',[],'A'}]],%% Line 1029
												 {'c_case',[],{'c_var',[],'Xs'},[C1|[{'c_clause',[],[{'c_literal',[],[]}],{'c_call',[],{'c_literal',[],'erlang'},{'c_literal',[],'is_function'},[{'c_var',[],'F'}|[{'c_literal',[],2}]]},{'c_tuple',['compiler_generated'],[{'c_literal',[],[]}|[{'c_var',[],'A'}]]}}|[C3|[]]]]}}
					  in  %% Line 1031
					      apply 'expr'/2
						  ({'c_let',[],[{'c_var',[],'F'}|[{'c_var',[],'A'}|[{'c_var',[],'L'}]]],{'c_values',[],[Arg1|[Arg2|[Arg3|[]]]]},%% Line 1032
																				{'c_letrec',[],[{{'c_var',[],{'lists^mapfoldl',2}},Fun}|[]],%% Line 1034
																											    {'c_apply',Anno,{'c_var',[],{'lists^mapfoldl',2}},%% Line 1036
																																	      [{'c_var',[],'L'}|[{'c_var',[],'A'}]]}}}, _cor0)
	  %% Line 1043
	  <{'c_call',Anno,_cor196,_cor197,_cor198},'lists','mapfoldr',[Arg1|[Arg2|[Arg3|[]]]],Sub> when 'true' ->
	      let <Match> =
		  %% Line 1050
		  fun (_cor150,_cor149,_cor148) ->
		      let <C1> =
			  %% Line 1051
			  {'c_clause',[],[_cor149|[]],{'c_literal',[],'true'},_cor148}
		      in  let <_cor146> =
			      %% Line 1108
			      {'c_primop',Anno,%% Line 1109
					       {'c_literal',[],'match_fail'},%% Line 1110
									     [{'c_tuple',[],[{'c_literal',[],'badmatch'}|[{'c_var',[],'X'}]]}]}
			  in  let <C2> =
				  %% Line 1053
				  {'c_clause',[],[{'c_var',[],'X'}],{'c_literal',[],'true'},_cor146}
			      in  %% Line 1055
				  {'c_case',[],_cor150,[C1|[C2|[]]]}
	      in  let <_cor155> =
		      %% Line 1063
		      apply Match
			  ({'c_apply',Anno,{'c_var',[],'F'},[{'c_var',[],'X'}|[{'c_var',[],'A'}]]}, %% Line 1064
												    {'c_tuple',[],[{'c_var',[],'X'}|[{'c_var',[],'A'}]]}, %% Line 1065
																			  {'c_tuple',['compiler_generated'],[{'c_cons',['compiler_generated'],{'c_var',[],'X'},{'c_var',[],'Xs'}}|[{'c_var',[],'A'}]]})
		  in  let <_cor156> =
			  %% Line 1059
			  apply Match
			      ({'c_apply',Anno,{'c_var',[],{'lists^mapfoldr',2}},%% Line 1061
										 [{'c_var',[],'Xs'}|[{'c_var',[],'A'}]]}, %% Line 1062
															  {'c_tuple',[],[{'c_var',[],'Xs'}|[{'c_var',[],'A'}]]}, _cor155)
		      in  let <C1> =
			      %% Line 1057
			      {'c_clause',[],[{'c_cons',[],{'c_var',[],'X'},{'c_var',[],'Xs'}}],{'c_literal',[],'true'},_cor156}
			  in  let <_11317> =
				  %% Line 1088
				  [{'function_name',{'lists^mapfoldr',2}}|Anno]
			      in  let <_cor160> =
				      %% Line 1108
				      {'c_primop',_11317,%% Line 1109
							 {'c_literal',[],'match_fail'},%% Line 1110
										       [{'c_tuple',[],[{'c_literal',[],'function_clause'}|[{'c_var',[],'F'}|[{'c_var',[],'A'}|[{'c_var',[],'Xs'}]]]]}]}
				  in  let <C3> =
					  %% Line 1087
					  {'c_clause',[],[{'c_var',[],'Xs'}],{'c_literal',[],'true'},_cor160}
				      in  let <Fun> =
					      %% Line 1089
					      {'c_fun',[],[{'c_var',[],'Xs'}|[{'c_var',[],'A'}]],%% Line 1090
												 {'c_case',[],{'c_var',[],'Xs'},[C1|[{'c_clause',[],[{'c_literal',[],[]}],{'c_call',[],{'c_literal',[],'erlang'},{'c_literal',[],'is_function'},[{'c_var',[],'F'}|[{'c_literal',[],2}]]},{'c_tuple',['compiler_generated'],[{'c_literal',[],[]}|[{'c_var',[],'A'}]]}}|[C3|[]]]]}}
					  in  %% Line 1092
					      apply 'expr'/2
						  ({'c_let',[],[{'c_var',[],'F'}|[{'c_var',[],'A'}|[{'c_var',[],'L'}]]],{'c_values',[],[Arg1|[Arg2|[Arg3|[]]]]},%% Line 1093
																				{'c_letrec',[],[{{'c_var',[],{'lists^mapfoldr',2}},Fun}|[]],%% Line 1095
																											    {'c_apply',Anno,{'c_var',[],{'lists^mapfoldr',2}},%% Line 1097
																																	      [{'c_var',[],'L'}|[{'c_var',[],'A'}]]}}}, _cor0)
	  %% Line 1104
	  <Call = {'c_call',_cor199,M,N,_cor200},_cor201,_cor202,As,Sub> when 'true' ->
	      %% Line 1105
	      apply 'call_0'/5
		  (_cor4, M, N, _cor1, _cor0)
	  ( <_cor168,_cor167,_cor166,_cor165,_cor164> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'call_1',5}}] )
	    -| ['compiler_generated'] )
	end
'fold_call'/5 =
    %% Line 1123
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Call,{'c_literal',_cor10,M},{'c_literal',_cor11,F},Args,Sub> when 'true' ->
	      %% Line 1124
	      apply 'fold_call_1'/5
		  (_cor4, M, F, _cor1, _cor0)
	  %% Line 1125
	  <Call,_X_M,_X_N,_X_Args,_X_Sub> when 'true' ->
	      _cor4
	end
'fold_call_1'/5 =
    %% Line 1127
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Call,'erlang','apply',[Mod|[Func|[Args|[]]]],_cor12> when 'true' ->
	      %% Line 1128
	      apply 'simplify_apply'/4
		  (_cor4, Mod, Func, Args)
	  %% Line 1129
	  <Call,Mod,Name,Args,Sub> when 'true' ->
	      let <NumArgs> =
		  %% Line 1130
		  call 'erlang':'length'
		      (_cor1)
	      in  let <_6412> =
		      %% Line 1131
		      call 'erl_bifs':'is_pure'
			  (_cor3, _cor2, NumArgs)
		  in  %% Line 1131
		      case _6412 of
			%% Line 1132
			<'false'> when 'true' ->
			    _cor4
			%% Line 1133
			<'true'> when 'true' ->
			    apply 'fold_call_2'/5
				(_cor4, _cor3, _cor2, _cor1, _cor0)
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_6412})
			  -| ['compiler_generated'] )
		      end
	end
'fold_call_2'/5 =
    %% Line 1136
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1137
	try
	    let <_cor10> =
		%% Line 1138
		( letrec
		      'lc$^0'/1 =
			  fun (_cor7) ->
			      case _cor7 of
				<[A|_cor6]> when 'true' ->
				    let <_cor8> =
					call 'core_lib':'literal_value'
					    (A)
				    in  let <_cor9> =
					    apply 'lc$^0'/1
						(_cor6)
					in  ( [_cor8|_cor9]
					      -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_44> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor7})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (_cor1)
		  -| ['list_comprehension'] )
	    in  %% Line 1139
		try
		    call 'erlang':'apply'
			(_cor3, _cor2, _cor10)
		of <_cor12> ->
		    let <_12030> =
			%% Line 1141
			call 'cerl':'is_literal_term'
			    (_cor12)
		    in  %% Line 1141
			case _12030 of
			  %% Line 1142
			  <'true'> when 'true' ->
			      %% Line 1143
			      {'c_literal',[],_cor12}
			  %% Line 1144
			  <'false'> when 'true' ->
			      _cor4
			  ( <_cor13> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_12030})
			    -| ['compiler_generated'] )
			end
		catch <_cor17,_cor16,_cor15> ->
		    case <_cor17,_cor16,_cor15> of
		      %% Line 1150
		      <'error',Reason,_cor27> when 'true' ->
			  %% Line 1153
			  apply 'eval_failure'/2
			      (_cor4, _cor16)
		      ( <_10524,_12996,_12726> when 'true' ->
			    primop 'raise'
				(_cor15, _cor16)
			-| ['compiler_generated'] )
		    end
	of <_cor18> ->
	    _cor18
	catch <_cor21,_cor20,_cor19> ->
	    case <_cor21,_cor20,_cor19> of
	      %% Line 1156
	      <'error',_cor28,_cor29> when 'true' ->
		  %% Line 1158
		  apply 'fold_non_lit_args'/5
		      (_cor4, _cor3, _cor2, _cor1, _cor0)
	      ( <_5275,_4790,_15826> when 'true' ->
		    primop 'raise'
			(_cor19, _cor20)
		-| ['compiler_generated'] )
	    end
'fold_non_lit_args'/5 =
    %% Line 1165
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Call,'erlang','is_boolean',[Arg|[]],Sub> when 'true' ->
	      %% Line 1166
	      apply 'eval_is_boolean'/3
		  (_cor4, Arg, _cor0)
	  %% Line 1167
	  <Call,'erlang','element',[Arg1|[Arg2|[]]],Sub> when 'true' ->
	      %% Line 1168
	      apply 'eval_element'/4
		  (_cor4, Arg1, Arg2, _cor0)
	  %% Line 1169
	  <Call,'erlang','length',[Arg|[]],_cor13> when 'true' ->
	      %% Line 1284
	      apply 'eval_length'/3
		  (_cor4, Arg, 0)
	  %% Line 1171
	  <Call,'erlang','++',[Arg1|[Arg2|[]]],_cor14> when 'true' ->
	      %% Line 1172
	      apply 'eval_append'/3
		  (_cor4, Arg1, Arg2)
	  %% Line 1173
	  <Call,'lists','append',[Arg1|[Arg2|[]]],_cor15> when 'true' ->
	      %% Line 1174
	      apply 'eval_append'/3
		  (_cor4, Arg1, Arg2)
	  %% Line 1175
	  <Call,'erlang','setelement',[Arg1|[Arg2|[Arg3|[]]]],_cor16> when 'true' ->
	      %% Line 1397
	      try
		  %% Line 1398
		  apply 'eval_setelement_1'/3
		      (Arg1, Arg2, Arg3)
	      of <_5698> ->
		  _5698
	      catch <_cor7,_cor6,_cor5> ->
		  case <_cor7,_cor6,_cor5> of
		    %% Line 1400
		    <'error',_cor12,_cor13> when 'true' ->
			_cor4
		    ( <_1533,_9754,_16202> when 'true' ->
			  primop 'raise'
			      (_cor5, _cor6)
		      -| ['compiler_generated'] )
		  end
	  %% Line 1177
	  <Call,'erlang','is_record',[Arg1|[Arg2|[Arg3|[]]]],Sub> when 'true' ->
	      %% Line 1178
	      apply 'eval_is_record'/5
		  (_cor4, Arg1, Arg2, Arg3, _cor0)
	  %% Line 1179
	  <Call,'erlang',N,Args,Sub> when 'true' ->
	      let <NumArgs> =
		  %% Line 1180
		  call 'erlang':'length'
		      (_cor1)
	      in  let <_3234> =
		      %% Line 1181
		      call 'erl_internal':'comp_op'
			  (_cor2, NumArgs)
		  in  %% Line 1181
		      case _3234 of
			%% Line 1182
			<'true'> when 'true' ->
			    %% Line 1183
			    apply 'eval_rel_op'/4
				(_cor4, _cor2, _cor1, _cor0)
			%% Line 1184
			<'false'> when 'true' ->
			    let <_10511> =
				%% Line 1185
				call 'erl_internal':'bool_op'
				    (_cor2, NumArgs)
			    in  %% Line 1185
				case _10511 of
				  %% Line 1186
				  <'true'> when 'true' ->
				      %% Line 1187
				      apply 'eval_bool_op'/4
					  (_cor4, _cor2, _cor1, _cor0)
				  %% Line 1188
				  <'false'> when 'true' ->
				      _cor4
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_10511})
				    -| ['compiler_generated'] )
				end
			( <_cor7> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_3234})
			  -| ['compiler_generated'] )
		      end
	  %% Line 1192
	  <Call,_cor17,_cor18,_cor19,_cor20> when 'true' ->
	      _cor4
	end
'eval_rel_op'/4 =
    %% Line 1195
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Call,Op,[{'c_var',_cor21,V}|[{'c_var',_cor22,_cor23}|[]]],_cor24>
	      when call 'erlang':'=:='
		    (_cor23,
		     V) ->
	      let <Bool> =
		  %% Line 1196
		  call 'erlang':_cor2
		      ('same', 'same')
	      in  let <_cor5> =
		      %% Line 1197
		      call 'core_lib':'get_anno'
			  (_cor3)
		  in  %% Line 1197
		      {'c_literal',_cor5,Bool}
	  %% Line 1198
	  <Call,'=:=',[Var = {'c_var',_cor25,V}|[{'c_literal',_cor26,'true'}|[]]],Sub> when 'true' ->
	      let <_12209> =
		  %% Line 1200
		  apply 'is_boolean_type'/2
		      (V, _cor0)
	      in  %% Line 1200
		  case _12209 of
		    %% Line 1201
		    <'true'> when 'true' ->
			Var
		    %% Line 1202
		    <'false'> when 'true' ->
			_cor3
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_12209})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1204
	  <Call,'==',Ops,_X_Sub> when 'true' ->
	      let <_1678> =
		  %% Line 1205
		  apply 'is_exact_eq_ok'/1
		      (_cor1)
	      in  %% Line 1205
		  case _1678 of
		    %% Line 1206
		    <'true'> when 'true' ->
			let <_cor7> =
			    %% Line 1207
			    call 'core_lib':'get_anno'
				(_cor3)
			in  let <Name> = {%% Line 1207
				 'c_literal',_cor7,%% Line 1207
						   '=:='}
			    in  %% Line 1208
				case _cor3 of
				  <{'c_call',_cor27,_cor28,_cor29,_cor30}> when 'true' ->
				      call 'erlang':'setelement'
					  (4, _cor3, Name)
				  ( <_cor31> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','c_call'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
		    %% Line 1209
		    <'false'> when 'true' ->
			_cor3
		    ( <_cor11> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_1678})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1212
	  <Call,'/=',Ops,_X_Sub> when 'true' ->
	      let <_13174> =
		  %% Line 1213
		  apply 'is_exact_eq_ok'/1
		      (_cor1)
	      in  %% Line 1213
		  case _13174 of
		    %% Line 1214
		    <'true'> when 'true' ->
			let <_cor12> =
			    %% Line 1215
			    call 'core_lib':'get_anno'
				(_cor3)
			in  let <Name> = {%% Line 1215
				 'c_literal',_cor12,%% Line 1215
						    '=/='}
			    in  %% Line 1216
				case _cor3 of
				  <{'c_call',_cor32,_cor33,_cor34,_cor35}> when 'true' ->
				      call 'erlang':'setelement'
					  (4, _cor3, Name)
				  ( <_cor36> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','c_call'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
		    %% Line 1217
		    <'false'> when 'true' ->
			_cor3
		    ( <_cor16> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_13174})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1220
	  <Call,_cor37,_cor38,_cor39> when 'true' ->
	      _cor3
	end
'is_exact_eq_ok'/1 =
    %% Line 1222
    fun (_cor0) ->
	case _cor0 of
	  <[{'c_literal',_cor2,Lit}|_cor3]> when 'true' ->
	      %% Line 1223
	      apply 'is_non_numeric'/1
		  (Lit)
	  %% Line 1224
	  <[_cor4|T]> when 'true' ->
	      %% Line 1225
	      apply 'is_exact_eq_ok'/1
		  (T)
	  %% Line 1226
	  <[]> when 'true' ->
	      'false'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'is_exact_eq_ok',1}}] )
	    -| ['compiler_generated'] )
	end
'is_non_numeric'/1 =
    %% Line 1228
    fun (_cor0) ->
	case _cor0 of
	  <[H|T]> when 'true' ->
	      let <_6460> =
		  %% Line 1229
		  apply 'is_non_numeric'/1
		      (H)
	      in  %% Line 1229
		  ( case _6460 of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    apply 'is_non_numeric'/1
				(T)
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    'false'
			-| ['compiler_generated'] )
		      ( <_cor1> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_6460}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 1230
	  <Tuple>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      let <_cor3> =
		  %% Line 1231
		  call 'erlang':'tuple_size'
		      (_cor0)
	      in  %% Line 1231
		  apply 'is_non_numeric_tuple'/2
		      (_cor0, _cor3)
	  %% Line 1232
	  <Num>
	      when call 'erlang':'is_number'
		    (_cor0) ->
	      %% Line 1233
	      'false'
	  %% Line 1234
	  <_cor5> when 'true' ->
	      'true'
	end
'is_non_numeric_tuple'/2 =
    %% Line 1236
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Tuple,El>
	      when call 'erlang':'>='
		    (_cor0,
		     1) ->
	      let <_cor3> =
		  %% Line 1237
		  call 'erlang':'element'
		      (_cor0, _cor1)
	      in  let <_3372> =
		      %% Line 1237
		      apply 'is_non_numeric'/1
			  (_cor3)
		  in  %% Line 1237
		      ( case _3372 of
			  ( <( 'true'
			       -| ['compiler_generated'] )> when 'true' ->
				let <_cor4> =
				    %% Line 1238
				    call 'erlang':'-'
					(_cor0, 1)
				in  %% Line 1238
				    apply 'is_non_numeric_tuple'/2
					(_cor1, _cor4)
			    -| ['compiler_generated'] )
			  ( <( 'false'
			       -| ['compiler_generated'] )> when 'true' ->
				'false'
			    -| ['compiler_generated'] )
			  ( <_cor2> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {( 'badarg'
					    -| ['compiler_generated'] ),_3372}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  %% Line 1239
	  <_X_Tuple,0> when 'true' ->
	      'true'
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'is_non_numeric_tuple',2}}] )
	    -| ['compiler_generated'] )
	end
'eval_bool_op'/4 =
    %% Line 1245
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Call,'and',[{'c_literal',_cor12,'true'}|[Res = {'c_var',_cor13,V}|[]]],Sub> when 'true' ->
	      let <_3548> =
		  %% Line 1246
		  apply 'is_boolean_type'/2
		      (V, _cor0)
	      in  %% Line 1246
		  case _3548 of
		    %% Line 1247
		    <'true'> when 'true' ->
			Res
		    %% Line 1248
		    <'false'> when 'true' ->
			_cor3
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_3548})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1250
	  <Call,'and',[Res = {'c_var',_cor14,V}|[{'c_literal',_cor15,'true'}|[]]],Sub> when 'true' ->
	      let <_9610> =
		  %% Line 1251
		  apply 'is_boolean_type'/2
		      (V, _cor0)
	      in  %% Line 1251
		  case _9610 of
		    %% Line 1252
		    <'true'> when 'true' ->
			Res
		    %% Line 1253
		    <'false'> when 'true' ->
			_cor3
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_9610})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1255
	  <Call,'and',[Res = {'c_literal',_cor16,'false'}|[{'c_var',_cor17,V}|[]]],Sub> when 'true' ->
	      let <_4652> =
		  %% Line 1256
		  apply 'is_boolean_type'/2
		      (V, _cor0)
	      in  %% Line 1256
		  case _4652 of
		    %% Line 1257
		    <'true'> when 'true' ->
			Res
		    %% Line 1258
		    <'false'> when 'true' ->
			_cor3
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_4652})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1260
	  <Call,'and',[{'c_var',_cor18,V}|[Res = {'c_literal',_cor19,'false'}|[]]],Sub> when 'true' ->
	      let <_16747> =
		  %% Line 1261
		  apply 'is_boolean_type'/2
		      (V, _cor0)
	      in  %% Line 1261
		  case _16747 of
		    %% Line 1262
		    <'true'> when 'true' ->
			Res
		    %% Line 1263
		    <'false'> when 'true' ->
			_cor3
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_16747})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1265
	  <Call,_cor20,_cor21,_cor22> when 'true' ->
	      _cor3
	end
'eval_is_boolean'/3 =
    %% Line 1268
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Call,{'c_var',_cor7,V},Sub> when 'true' ->
	      let <_11825> =
		  %% Line 1269
		  apply 'is_boolean_type'/2
		      (V, _cor0)
	      in  %% Line 1269
		  case _11825 of
		    %% Line 1270
		    <'true'> when 'true' ->
			{'c_literal',[],'true'}
		    %% Line 1271
		    <'false'> when 'true' ->
			_cor2
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_11825})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1273
	  <_cor8,{'c_cons',_cor9,_cor10,_cor11},_cor12> when 'true' ->
	      %% Line 1274
	      {'c_literal',[],'false'}
	  %% Line 1275
	  <_cor13,{'c_tuple',_cor14,_cor15},_cor16> when 'true' ->
	      %% Line 1276
	      {'c_literal',[],'false'}
	  %% Line 1277
	  <Call,_cor17,_cor18> when 'true' ->
	      _cor2
	end
'eval_length'/3 =
    %% Line 1286
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Call,{'c_literal',_cor22,Val},Len0> when 'true' ->
	      %% Line 1287
	      try
		  let <_cor3> =
		      %% Line 1288
		      call 'erlang':'length'
			  (Val)
		  in  let <Len> =
			  %% Line 1288
			  call 'erlang':'+'
			      (_cor0, _cor3)
		      in  %% Line 1289
			  ( case _cor2 of
			      ( <( {'c_call',_rec57,_cor23,_cor24,_cor25}
				   -| ['compiler_generated'] )> when 'true' ->
				    {'c_literal',_rec57,Len}
				-| ['compiler_generated'] )
			      ( <_cor26> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','c_call'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
	      of <_cor7> ->
		  _cor7
	      catch <_cor10,_cor9,_cor8> ->
		  %% Line 1292
		  apply 'eval_failure'/2
		      (_cor2, 'badarg')
	  %% Line 1294
	  <Call,{'c_cons',_cor30,_cor31,T},Len> when 'true' ->
	      let <_cor11> =
		  %% Line 1295
		  call 'erlang':'+'
		      (_cor0, 1)
	      in  %% Line 1295
		  apply 'eval_length'/3
		      (_cor2, T, _cor11)
	  %% Line 1296
	  <Call,_X_List,0> when 'true' ->
	      _cor2
	  %% Line 1298
	  <Call,List,Len> when 'true' ->
	      %% Line 1299
	      ( case _cor2 of
		  ( <( {'c_call',_rec58,_cor32,_cor33,_cor34}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_rec59> =
			    %% Line 1303
			    [_cor1|[]]
			in  let <_cor18> =
				%% Line 1303
				call 'erlang':'setelement'
				    (5, _cor2, _rec59)
			    in  %% Line 1300
				{'c_call',_rec58,%% Line 1301
						 {'c_literal',_rec58,'erlang'},%% Line 1302
									       {'c_literal',_rec58,'+'},%% Line 1303
													[{'c_literal',_rec58,_cor0}|[_cor18|[]]]}
		    -| ['compiler_generated'] )
		  ( <_cor35> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','c_call'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'eval_append'/3 =
    %% Line 1308
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Call,S1 = {'c_literal',_cor26,Cs1},{'c_literal',_cor27,Cs2}> when 'true' ->
	      %% Line 1309
	      try
		  let <_rec61> =
		      %% Line 1310
		      call 'erlang':'++'
			  (Cs1, Cs2)
		  in  %% Line 1310
		      call 'erlang':'setelement'
			  (3, _cor1, _rec61)
	      of <_cor6> ->
		  _cor6
	      catch <_cor9,_cor8,_cor7> ->
		  case <_cor9,_cor8,_cor7> of
		    %% Line 1311
		    <'error','badarg',_cor31> when 'true' ->
			%% Line 1312
			apply 'eval_failure'/2
			    (_cor2, 'badarg')
		    ( <_8,_16398,_5018> when 'true' ->
			  primop 'raise'
			      (_cor7, _cor8)
		      -| ['compiler_generated'] )
		  end
	  %% Line 1314
	  <Call,{'c_literal',_cor32,Cs},List>
	      when try
		    let <_cor10> =
			call 'erlang':'length'
			    (Cs)
		    in  call 'erlang':'=<'
			    (_cor10, 4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1315
	      ( case _cor2 of
		  ( <( {'c_call',_rec63,_cor33,_cor34,_cor35}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor18> =
			    %% Line 1316
			    fun (_cor15,_cor14) ->
				%% Line 1317
				call 'cerl':'ann_c_cons'
				    (_rec63, {'c_literal',[],_cor15}, _cor14)
			in  %% Line 1316
			    call 'lists':'foldr'
				(_cor18, _cor0, Cs)
		    -| ['compiler_generated'] )
		  ( <_cor36> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','c_call'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1319
	  <Call,{'c_cons',Anno,H,T},List> when 'true' ->
	      let <_cor19> =
		  %% Line 1320
		  apply 'eval_append'/3
		      (_cor2, T, _cor0)
	      in  %% Line 1320
		  call 'cerl':'ann_c_cons'
		      (Anno, H, _cor19)
	  %% Line 1321
	  <Call,X,Y> when 'true' ->
	      let <_rec64> =
		  %% Line 1322
		  [_cor1|[_cor0|[]]]
	      in  %% Line 1322
		  case _cor2 of
		    <{'c_call',_cor37,_cor38,_cor39,_cor40}> when 'true' ->
			call 'erlang':'setelement'
			    (5, _cor2, _rec64)
		    ( <_cor41> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','c_call'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	end
'eval_element'/4 =
    %% Line 1328
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Call,{'c_literal',_cor22,Pos},{'c_tuple',_cor23,Es},_X_Types>
	      when call 'erlang':'is_integer'
		    (Pos) ->
	      %% Line 1329
	      case <> of
		%% Line 1330
		<>
		    when try
			  let <_cor4> =
			      call 'erlang':'=<'
				  (1, Pos)
			  in  let <_cor5> =
				  call 'erlang':'length'
				      (Es)
			      in  let <_cor6> =
				      call 'erlang':'=<'
					  (Pos, _cor5)
				  in  call 'erlang':'and'
					  (_cor4, _cor6)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 1331
		    call 'lists':'nth'
			(Pos, Es)
		%% Line 1332
		<> when 'true' ->
		    %% Line 1333
		    apply 'eval_failure'/2
			(_cor3, 'badarg')
	      end
	  %% Line 1335
	  <Call,{'c_literal',_cor24,Pos},{'c_var',_cor25,V},Types>
	      when %% Line 1336
		call 'erlang':'is_integer'
		    (Pos) ->
	      %% Line 1337
	      ( case _cor0 of
		  ( <( {'sub',_cor26,_cor27,_rec66,_cor28}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_15912> =
			    call 'orddict':'find'
				(V, _rec66)
			in  case _15912 of
			      %% Line 1338
			      <{'ok',{'c_tuple',_cor30,Elements}}> when 'true' ->
				  %% Line 1339
				  case <> of
				    %% Line 1340
				    <>
					when try
					      let <_cor9> =
						  call 'erlang':'=<'
						      (1, Pos)
					      in  let <_cor10> =
						      call 'erlang':'length'
							  (Elements)
						  in  let <_cor11> =
							  call 'erlang':'=<'
							      (Pos, _cor10)
						      in  call 'erlang':'and'
							      (_cor9, _cor11)
					  of <Try> ->
					      Try
					  catch <T,R> ->
					      'false' ->
					let <_2029> =
					    %% Line 1341
					    call 'lists':'nth'
						(Pos, Elements)
					in  %% Line 1341
					    case _2029 of
					      %% Line 1342
					      <{'c_alias',_cor31,Alias,_cor32}> when 'true' ->
						  Alias
					      %% Line 1343
					      <Res> when 'true' ->
						  _2029
					    end
				    %% Line 1345
				    <> when 'true' ->
					%% Line 1346
					apply 'eval_failure'/2
					    (_cor3, 'badarg')
				  end
			      %% Line 1348
			      <{'ok',_cor33}> when 'true' ->
				  %% Line 1349
				  apply 'eval_failure'/2
				      (_cor3, 'badarg')
			      %% Line 1350
			      <'error'> when 'true' ->
				  _cor3
			      ( <_cor13> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_15912})
				-| ['compiler_generated'] )
			    end
		    -| ['compiler_generated'] )
		  ( <_cor29> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','sub'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1353
	  <Call,Pos,Tuple,_X_Types> when 'true' ->
	      let <_3544> =
		  %% Line 1354
		  apply 'is_not_integer'/1
		      (_cor2)
	      in  let <_cor16> =
		      %% Line 1354
		      ( case _3544 of
			  ( <( 'true'
			       -| ['compiler_generated'] )> when 'true' ->
				'true'
			    -| ['compiler_generated'] )
			  ( <( 'false'
			       -| ['compiler_generated'] )> when 'true' ->
				apply 'is_not_tuple'/1
				    (_cor1)
			    -| ['compiler_generated'] )
			  ( <_cor14> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {( 'badarg'
					    -| ['compiler_generated'] ),_3544}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  in  %% Line 1354
		      case _cor16 of
			%% Line 1355
			<'true'> when 'true' ->
			    %% Line 1356
			    apply 'eval_failure'/2
				(_cor3, 'badarg')
			%% Line 1357
			<'false'> when 'true' ->
			    _cor3
			( <_cor17> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor16})
			  -| ['compiler_generated'] )
		      end
	end
'eval_is_record'/5 =
    %% Line 1364
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Call,{'c_var',_cor20,V},Lit = {'c_literal',_cor21,NeededTag},%% Line 1365
									{'c_literal',_cor22,Size},Types> when 'true' ->
	      %% Line 1366
	      ( case _cor0 of
		  ( <( {'sub',_cor23,_cor24,_rec67,_cor25}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'orddict':'find'
				 (V, _rec67) of
			  %% Line 1367
			  <{'ok',{'c_tuple',_cor27,Es = [{'c_literal',_cor28,Tag}|_cor29]}}> when 'true' ->
			      let <_cor10> =
				  %% Line 1368
				  ( case <> of
				      ( <>
					    when call 'erlang':'=:='
						  (Tag,
						   NeededTag) ->
					    let <_cor8> =
						%% Line 1369
						call 'erlang':'length'
						    (Es)
					    in  %% Line 1369
						call 'erlang':'=:='
						    (_cor8, Size)
					-| ['compiler_generated'] )
				      ( <> when 'true' ->
					    'false'
					-| ['compiler_generated'] )
				    end
				    -| ['compiler_generated'] )
			      in  %% Line 1368
				  call 'erlang':'setelement'
				      (3, _cor2, _cor10)
			  %% Line 1370
			  <_cor33> when 'true' ->
			      _cor4
			end
		    -| ['compiler_generated'] )
		  ( <_cor26> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','sub'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1373
	  <Call,_cor34,_cor35,_cor36,_cor37> when 'true' ->
	      _cor4
	end
'is_not_integer'/1 =
    %% Line 1378
    fun (_cor0) ->
	case _cor0 of
	  <{'c_literal',_cor3,Val}>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(Val)
		in  call 'erlang':'not'
			(_cor1) ->
	      'true'
	  %% Line 1379
	  <{'c_tuple',_cor4,_cor5}> when 'true' ->
	      'true'
	  %% Line 1380
	  <{'c_cons',_cor6,_cor7,_cor8}> when 'true' ->
	      'true'
	  %% Line 1381
	  <{'c_map',_cor9,_cor10,_cor11}> when 'true' ->
	      'true'
	  %% Line 1382
	  <_cor12> when 'true' ->
	      'false'
	end
'is_not_tuple'/1 =
    %% Line 1387
    fun (_cor0) ->
	case _cor0 of
	  <{'c_literal',_cor3,Val}>
	      when let <_cor1> =
		    call 'erlang':'is_tuple'
			(Val)
		in  call 'erlang':'not'
			(_cor1) ->
	      'true'
	  %% Line 1388
	  <{'c_cons',_cor4,_cor5,_cor6}> when 'true' ->
	      'true'
	  %% Line 1389
	  <{'c_map',_cor7,_cor8,_cor9}> when 'true' ->
	      'true'
	  %% Line 1390
	  <_cor10> when 'true' ->
	      'false'
	end
'eval_setelement_1'/3 =
    %% Line 1404
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'c_literal',_cor15,Pos},{'c_tuple',A,Es},NewVal>
	      when %% Line 1405
		call 'erlang':'is_integer'
		    (Pos) ->
	      let <_cor3> =
		  %% Line 1406
		  apply 'eval_setelement_2'/3
		      (Pos, Es, _cor0)
	      in  %% Line 1406
		  call 'cerl':'ann_c_tuple'
		      (A, _cor3)
	  %% Line 1407
	  <{'c_literal',_cor16,Pos},{'c_literal',A,Es0},NewVal>
	      when %% Line 1408
		call 'erlang':'is_integer'
		    (Pos) ->
	      let <_cor9> =
		  %% Line 1409
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor7) ->
				case _cor7 of
				  <[E|_cor5]> when 'true' ->
				      let <_cor8> =
					  apply 'lc$^0'/1
					      (_cor5)
				      in  ( [{'c_literal',A,E}|_cor8]
					    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_10379> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor7})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor6> =
			    call 'erlang':'tuple_to_list'
				(Es0)
			in  case _cor6 of
			      <[E|_cor5]> when 'true' ->
				  let <_cor8> =
				      apply 'lc$^0'/1
					  (_cor5)
				  in  ( [{'c_literal',A,E}|_cor8]
					-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_10379> when 'true' ->
				    primop 'match_fail'
					({'function_clause',_cor6})
				-| ['compiler_generated'] )
			    end
		    -| ['list_comprehension'] )
	      in  let <_cor11> =
		      %% Line 1410
		      apply 'eval_setelement_2'/3
			  (Pos, _cor9, _cor0)
		  in  %% Line 1410
		      call 'cerl':'ann_c_tuple'
			  (A, _cor11)
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'eval_setelement_1',3}}] )
	    -| ['compiler_generated'] )
	end
'eval_setelement_2'/3 =
    %% Line 1412
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <1,[_cor8|T],NewVal> when 'true' ->
	      %% Line 1413
	      [_cor0|T]
	  %% Line 1414
	  <Pos,[H|T],NewVal>
	      when call 'erlang':'>'
		    (_cor2,
		     1) ->
	      let <_cor3> =
		  %% Line 1415
		  call 'erlang':'-'
		      (_cor2, 1)
	      in  let <_cor4> =
		      %% Line 1415
		      apply 'eval_setelement_2'/3
			  (_cor3, T, _cor0)
		  in  %% Line 1415
		      [H|_cor4]
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'eval_setelement_2',3}}] )
	    -| ['compiler_generated'] )
	end
'eval_failure'/2 =
    %% Line 1421
    fun (_cor1,_cor0) ->
	do  %% Line 1422
	    apply 'add_warning'/2
		(_cor1, {'eval_failure',_cor0})
	    let <_rec72> =
		%% Line 1425
		[{'c_literal',[],_cor0}|[]]
	    in  %% Line 1425
		case _cor1 of
		  <{'c_call',_rec74,_rec75,_rec76,_rec77}> when 'true' ->
		      {'c_call',_rec74,{'c_literal',[],'erlang'},{'c_literal',[],'error'},_rec72}
		  ( <_cor9> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','c_call'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
'simplify_apply'/4 =
    %% Line 1431
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_15615> =
	    %% Line 1445
	    case _cor2 of
	      <{'c_literal',_6939,Atom}>
		  when call 'erlang':'is_atom'
			(Atom) ->
		  'true'
	      %% Line 1446
	      <{'c_var',_2062,_cor4}> when 'true' ->
		  'true'
	      %% Line 1447
	      <_cor5> when 'true' ->
		  'false'
	    end
	in  let <_cor6> =
		%% Line 1432
		( case _15615 of
		    ( <( 'true'
			 -| ['compiler_generated'] )> when 'true' ->
			  %% Line 1445
			  case _cor1 of
			    <{'c_literal',_5763,Atom}>
				when call 'erlang':'is_atom'
				      (Atom) ->
				'true'
			    %% Line 1446
			    <{'c_var',_1602,_cor4}> when 'true' ->
				'true'
			    %% Line 1447
			    <_cor5> when 'true' ->
				'false'
			  end
		      -| ['compiler_generated'] )
		    ( <( 'false'
			 -| ['compiler_generated'] )> when 'true' ->
			  'false'
		      -| ['compiler_generated'] )
		    ( <_cor4> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {( 'badarg'
				      -| ['compiler_generated'] ),_15615}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
	    in  %% Line 1432
		case _cor6 of
		  %% Line 1433
		  <'true'> when 'true' ->
		      apply 'simplify_apply_1'/5
			  (_cor0, _cor3, _cor2, _cor1, [])
		  %% Line 1434
		  <'false'> when 'true' ->
		      _cor3
		  ( <_cor7> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor6})
		    -| ['compiler_generated'] )
		end
'simplify_apply_1'/5 =
    %% Line 1437
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'c_literal',_cor20,MoreArgs0},Call,Mod,Func,Args>
	      when %% Line 1438
		try
		    let <_cor5> =
			call 'erlang':'length'
			    (MoreArgs0)
		    in  call 'erlang':'>='
			    (_cor5, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor10> =
		  %% Line 1439
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor8) ->
				case _cor8 of
				  <[Arg|_cor7]> when 'true' ->
				      let <_cor9> =
					  apply 'lc$^0'/1
					      (_cor7)
				      in  ( [{'c_literal',[],Arg}|_cor9]
					    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_7638> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor8})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (MoreArgs0)
		    -| ['list_comprehension'] )
	      in  let <_rec78> =
		      %% Line 1440
		      call 'lists':'reverse'
			  (_cor0, _cor10)
		  in  %% Line 1440
		      case _cor3 of
			<{'c_call',_rec80,_rec81,_rec82,_rec83}> when 'true' ->
			    {'c_call',_rec80,_cor2,_cor1,_rec78}
			( <_cor21> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','c_call'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 1441
	  <{'c_cons',_cor22,Arg,T},Call,Mod,Func,Args> when 'true' ->
	      %% Line 1442
	      apply 'simplify_apply_1'/5
		  (T, _cor3, _cor2, _cor1, [Arg|_cor0])
	  %% Line 1443
	  <_cor23,Call,_cor24,_cor25,_cor26> when 'true' ->
	      _cor3
	end
'clause'/4 =
    %% Line 1451
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Cl = {'c_clause',_cor17,Ps0,G0,B0},Cexpr,Ctxt,Sub0> when 'true' ->
	      let <_827> =
		  %% Line 1452
		  apply 'pattern_list'/2
		      (Ps0, _cor0)
	      in  %% Line 1452
		  case _827 of
		    <{Ps1,Sub1}> when 'true' ->
			let <Sub2> =
			    %% Line 1453
			    apply 'update_types'/3
				(_cor2, Ps1, Sub1)
			in  let <_cor7> =
				%% Line 1454
				case <_cor2,Ps1> of
				  %% Line 1455
				  <{'c_var',_cor18,'_'},_cor19> when 'true' ->
				      Sub2
				  %% Line 1459
				  <{'c_var',_cor20,_cor21},[Var = {'c_var',_cor22,_cor23}|[]]> when 'true' ->
				      %% Line 1478
				      apply 'sub_set_var'/3
					  (Var, _cor2, Sub2)
				  %% Line 1479
				  <_fol425,_fol426> when 'true' ->
				      Sub2
				end
			    in  let <G1> =
				    %% Line 1482
				    apply 'guard'/2
					(G0, _cor7)
				in  let <B1> =
					%% Line 1483
					apply 'body'/3
					    (B0, _cor1, Sub2)
				    in  %% Line 1484
					{'c_clause',_cor17,Ps1,G1,B1}
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_827})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'clause',4}}] )
	    -| ['compiler_generated'] )
	end
'let_substs'/3 =
    %% Line 1492
    fun (_cor2,_cor1,_cor0) ->
	let <_11084> =
	    %% Line 1493
	    apply 'pattern_list'/2
		(_cor2, _cor0)
	in  %% Line 1493
	    case _11084 of
	      <{Vs1,Sub1}> when 'true' ->
		  let <_6333> =
		      %% Line 1494
		      apply 'let_substs_1'/3
			  (Vs1, _cor1, Sub1)
		  in  %% Line 1494
		      case _6333 of
			<{Vs2,As1,Ss}> when 'true' ->
			    let <_cor9> =
				%% Line 1495
				( letrec
				      'lc$^0'/1 =
					  fun (_cor7) ->
					      case _cor7 of
						<[{'c_var',_cor20,V}|_cor6]> when 'true' ->
						    let <_cor8> =
							apply 'lc$^0'/1
							    (_cor6)
						    in  ( [V|_cor8]
							  -| ['compiler_generated'] )
						( <[_cor5|_cor6]> when 'true' ->
						      apply 'lc$^0'/1
							  (_cor6)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_15782> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor7})
							-| [{'function_name',{'lc$^0',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^0'/1
					  (Vs2)
				  -| ['list_comprehension'] )
			    in  let <Sub2> =
				    %% Line 1495
				    apply 'scope_add'/2
					(_cor9, Sub1)
				in  let <_cor15> =
					%% Line 1497
					fun (_cor12,_cor11) ->
					    case <_cor12,_cor11> of
					      <{V,S},Sub> when 'true' ->
						  apply 'sub_set_name'/3
						      (V, S, _cor11)
					      ( <_cor14,_cor13> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor12,_cor11})
						      -| [{'function_name',{'-let_substs/3-fun-0-',2}}] )
						-| ['compiler_generated'] )
					    end
				    in  let <_cor16> =
					    %% Line 1497
					    call 'lists':'foldl'
						(_cor15, Sub2, Ss)
					in  %% Line 1496
					    {Vs2,As1,_cor16}
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_6333})
			  -| ['compiler_generated'] )
		      end
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_11084})
		-| ['compiler_generated'] )
	    end
'let_substs_1'/3 =
    %% Line 1499
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Vs,{'c_values',_cor6,As},Sub> when 'true' ->
	      %% Line 1500
	      apply 'let_subst_list'/3
		  (_cor2, As, _cor0)
	  %% Line 1501
	  <[V|[]],A,Sub> when 'true' ->
	      apply 'let_subst_list'/3
		  ([V|[]], [_cor1|[]], _cor0)
	  %% Line 1502
	  <Vs,A,_cor7> when 'true' ->
	      {_cor2,_cor1,[]}
	end
'let_subst_list'/3 =
    %% Line 1504
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[V|Vs0],[A|As0],Sub> when 'true' ->
	      let <_5854> =
		  %% Line 1505
		  apply 'let_subst_list'/3
		      (Vs0, As0, _cor0)
	      in  %% Line 1505
		  case _5854 of
		    <{Vs1,As1,Ss}> when 'true' ->
			let <_4879> =
			    %% Line 1584
			    case A of
			      <{'c_var',_14740,{_cor3,_cor4}}> when 'true' ->
				  %% Line 1588
				  'false'
			      %% Line 1589
			      <{'c_var',_cor5,_cor6}> when 'true' ->
				  'true'
			      %% Line 1590
			      <{'c_literal',_cor7,_cor8}> when 'true' ->
				  'true'
			      %% Line 1591
			      <_cor9> when 'true' ->
				  'false'
			    end
			in  %% Line 1506
			    case _4879 of
			      %% Line 1507
			      <'true'> when 'true' ->
				  let <_cor4> =
				      apply 'sub_subst_var'/3
					  (V, A, _cor0)
				  in  let <_cor5> =
					  call 'erlang':'++'
					      (_cor4, Ss)
				      in  {Vs1,As1,_cor5}
			      %% Line 1508
			      <'false'> when 'true' ->
				  {[V|Vs1],[A|As1],Ss}
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_4879})
				-| ['compiler_generated'] )
			    end
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5854})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1510
	  <[],[],_cor10> when 'true' ->
	      {[],[],[]}
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'let_subst_list',3}}] )
	    -| ['compiler_generated'] )
	end
'pattern'/3 =
    %% Line 1525
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Pat = {'c_var',_cor31,_cor32},Isub,Osub> when 'true' ->
	      let <_4697> =
		  %% Line 1526
		  apply 'sub_is_val'/2
		      (_cor2, _cor1)
	      in  %% Line 1526
		  case _4697 of
		    %% Line 1527
		    <'true'> when 'true' ->
			let <V1> =
			    %% Line 1528
			    apply 'make_var_name'/0
				()
			in  let <Pat1> = {%% Line 1529
				 'c_var',[],V1}
			    in  let <_cor5> =
				    %% Line 1530
				    apply 'scope_add'/2
					([V1|[]], _cor0)
				in  let <_cor6> =
					%% Line 1530
					apply 'sub_set_var'/3
					    (_cor2, Pat1, _cor5)
				    in  %% Line 1530
					{Pat1,_cor6}
		    %% Line 1531
		    <'false'> when 'true' ->
			let <_cor7> =
			    %% Line 1532
			    apply 'sub_del_var'/2
				(_cor2, _cor0)
			in  %% Line 1532
			    {_cor2,_cor7}
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_4697})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1534
	  <Pat = {'c_literal',_cor33,_cor34},_cor35,Osub> when 'true' ->
	      {_cor2,_cor0}
	  %% Line 1535
	  <{'c_cons',Anno,H0,T0},Isub,Osub0> when 'true' ->
	      let <_5042> =
		  %% Line 1536
		  apply 'pattern'/3
		      (H0, _cor1, _cor0)
	      in  %% Line 1536
		  case _5042 of
		    <{H1,Osub1}> when 'true' ->
			let <_2651> =
			    %% Line 1537
			    apply 'pattern'/3
				(T0, _cor1, Osub1)
			in  %% Line 1537
			    case _2651 of
			      <{T1,Osub2}> when 'true' ->
				  let <_cor11> =
				      %% Line 1538
				      call 'cerl':'ann_c_cons'
					  (Anno, H1, T1)
				  in  %% Line 1538
				      {_cor11,Osub2}
			      ( <_cor10> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_2651})
				-| ['compiler_generated'] )
			    end
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5042})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1539
	  <{'c_tuple',Anno,Es0},Isub,Osub0> when 'true' ->
	      let <_1323> =
		  %% Line 1540
		  apply 'pattern_list'/3
		      (Es0, _cor1, _cor0)
	      in  %% Line 1540
		  case _1323 of
		    <{Es1,Osub1}> when 'true' ->
			let <_cor13> =
			    %% Line 1541
			    call 'cerl':'ann_c_tuple'
				(Anno, Es1)
			in  %% Line 1541
			    {_cor13,Osub1}
		    ( <_cor12> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_1323})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1542
	  <Map = {'c_map',Anno,_cor36,Es0},Isub,Osub0> when 'true' ->
	      let <_15517> =
		  %% Line 1555
		  call 'lists':'mapfoldl'
		      ('map_pair_pattern'/2, {_cor1,_cor0}, Es0)
	      in  %% Line 1555
		  case _15517 of
		    <{Ps,{_cor7,Osub}}> when 'true' ->
			let <Es1,Osub1> = <Ps,Osub>
			in  let <_cor17> =
				{'c_map',Anno,_cor36,Es1}
			    in  {_cor17,Osub1}
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_15517})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1545
	  <Pat = {'c_binary',_cor38,V0},Isub,Osub0> when 'true' ->
	      let <_5723> =
		  %% Line 1564
		  call 'lists':'mapfoldl'
		      ('bin_pattern'/2, {_cor1,_cor0}, V0)
	      in  %% Line 1564
		  case _5723 of
		    <{Ps,{_cor7,Osub}}> when 'true' ->
			let <V1,Osub1> = <Ps,Osub>
			in  let <_cor21> =
				call 'erlang':'setelement'
				    (3, _cor2, V1)
			    in  {_cor21,Osub1}
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5723})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1548
	  <Pat = {'c_alias',_cor42,V0,P0},Isub,Osub0> when 'true' ->
	      let <_12127> =
		  %% Line 1549
		  apply 'pattern'/3
		      (V0, _cor1, _cor0)
	      in  %% Line 1549
		  case _12127 of
		    <{V1,Osub1}> when 'true' ->
			let <_11872> =
			    %% Line 1550
			    apply 'pattern'/3
				(P0, _cor1, Osub1)
			in  %% Line 1550
			    case _11872 of
			      <{P1,Osub2}> when 'true' ->
				  let <Osub> =
				      %% Line 1551
				      apply 'update_types'/3
					  (V1, [P1|[]], Osub2)
				  in  let <_cor27> =
					  %% Line 1552
					  {'c_alias',_cor42,V1,P1}
				      in  %% Line 1552
					  {_cor27,Osub}
			      ( <_cor23> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_11872})
				-| ['compiler_generated'] )
			    end
		    ( <_cor22> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_12127})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor30,_cor29,_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'pattern',3}}] )
	    -| ['compiler_generated'] )
	end
'map_pair_pattern'/2 =
    %% Line 1558
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pair = {'c_map_pair',_cor10,{'c_literal',_cor11,'exact'},K0,V0},{Isub,Osub0}> when 'true' ->
	      let <K> =
		  apply 'expr'/3
		      (K0, 'value', Isub)
	      in  let <_11978> =
		      %% Line 1560
		      apply 'pattern'/3
			  (V0, Isub, Osub0)
		  in  %% Line 1560
		      case _11978 of
			<{V,Osub}> when 'true' ->
			    let <_cor5> =
				%% Line 1561
				call 'erlang':'setelement'
				    (5, _cor1, V)
			    in  let <_cor7> =
				    %% Line 1561
				    call 'erlang':'setelement'
					(4, _cor5, K)
				in  %% Line 1561
				    {_cor7,{Isub,Osub}}
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_11978})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'map_pair_pattern',2}}] )
	    -| ['compiler_generated'] )
	end
'bin_pattern'/2 =
    %% Line 1567
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pat = {'c_bitstr',_cor13,E0,Size0,_cor14,_cor15,_cor16},{Isub0,Osub0}> when 'true' ->
	      let <Size1> =
		  apply 'expr'/3
		      (Size0, 'value', Isub0)
	      in  let <_6209> =
		      %% Line 1569
		      apply 'pattern'/3
			  (E0, Isub0, Osub0)
		  in  %% Line 1569
		      case _6209 of
			<{E1,Osub}> when 'true' ->
			    let <_cor5> =
				%% Line 1570
				case E0 of
				  %% Line 1571
				  <{'c_var',_cor17,_cor18}> when 'true' ->
				      apply 'sub_set_var'/3
					  (E0, E1, Isub0)
				  %% Line 1572
				  <_cor19> when 'true' ->
				      Isub0
				end
			    in  let <_cor8> =
				    %% Line 1574
				    call 'erlang':'setelement'
					(4, _cor1, Size1)
				in  let <_cor10> =
					%% Line 1574
					call 'erlang':'setelement'
					    (3, _cor8, E1)
				    in  %% Line 1574
					{_cor10,{_cor5,Osub}}
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_6209})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'bin_pattern',2}}] )
	    -| ['compiler_generated'] )
	end
'pattern_list'/2 =
    %% Line 1576
    fun (_cor1,_cor0) ->
	apply 'pattern_list'/3
	    (_cor1, _cor0, _cor0)
'pattern_list'/3 =
    %% Line 1578
    fun (_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 1579
	    fun (_cor4,_cor3) ->
		apply 'pattern'/3
		    (_cor4, _cor1, _cor3)
	in  %% Line 1579
	    call 'lists':'mapfoldl'
		(_cor7, _cor0, _cor2)
'sub_new'/1 =
    %% Line 1616
    fun (_cor0) ->
	case _cor0 of
	  <Sub = {'sub',_cor6,_cor7,_cor8,_cor9}> when 'true' ->
	      let <_rec100> =
		  %% Line 1617
		  call 'orddict':'new'
		      ()
	      in  let <_cor3> =
		      %% Line 1617
		      call 'erlang':'setelement'
			  (4, _cor0, [])
		  in  %% Line 1617
		      call 'erlang':'setelement'
			  (2, _cor3, _rec100)
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'sub_new',1}}] )
	    -| ['compiler_generated'] )
	end
'sub_new_preserve_types'/1 =
    %% Line 1619
    fun (_cor0) ->
	case _cor0 of
	  <Sub = {'sub',_cor5,_cor6,_cor7,_cor8}> when 'true' ->
	      let <_rec102> =
		  %% Line 1620
		  call 'orddict':'new'
		      ()
	      in  %% Line 1620
		  call 'erlang':'setelement'
		      (2, _cor0, _rec102)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'sub_new_preserve_types',1}}] )
	    -| ['compiler_generated'] )
	end
'sub_get_var'/2 =
    %% Line 1622
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Var = {'c_var',_cor5,V},{'sub',S,_cor6,_cor7,_cor8}> when 'true' ->
	      let <_3362> =
		  %% Line 1623
		  call 'orddict':'find'
		      (V, S)
	      in  %% Line 1623
		  case _3362 of
		    %% Line 1624
		    <{'ok',Val}> when 'true' ->
			Val
		    %% Line 1625
		    <'error'> when 'true' ->
			_cor1
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_3362})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'sub_get_var',2}}] )
	    -| ['compiler_generated'] )
	end
'sub_set_var'/3 =
    %% Line 1628
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'c_var',_cor6,V},Val,Sub> when 'true' ->
	      %% Line 1629
	      apply 'sub_set_name'/3
		  (V, _cor1, _cor0)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'sub_set_var',3}}] )
	    -| ['compiler_generated'] )
	end
'sub_set_name'/3 =
    %% Line 1631
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <V,Val,Sub = {'sub',S,Scope,Tdb0,_cor12}> when 'true' ->
	      let <Tdb1> =
		  %% Line 1632
		  apply 'kill_types'/2
		      (_cor2, Tdb0)
	      in  let <Tdb> =
		      %% Line 1633
		      apply 'copy_type'/3
			  (_cor2, _cor1, Tdb1)
		  in  let <_rec104> =
			  %% Line 1634
			  call 'orddict':'store'
			      (_cor2, _cor1, S)
		      in  let <_rec105> =
			      %% Line 1634
			      call 'gb_sets':'add'
				  (_cor2, Scope)
			  in  %% Line 1634
			      {'sub',_rec104,_rec105,Tdb,_cor12}
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'sub_set_name',3}}] )
	    -| ['compiler_generated'] )
	end
'sub_del_var'/2 =
    %% Line 1636
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'c_var',_cor13,V},Sub = {'sub',S,Scope,Tdb,_cor14}> when 'true' ->
	      let <_15990> =
		  %% Line 1641
		  call 'gb_sets':'is_member'
		      (V, Scope)
	      in  %% Line 1641
		  case _15990 of
		    %% Line 1642
		    <'false'> when 'true' ->
			let <_rec111> =
			    %% Line 1643
			    call 'gb_sets':'insert'
				(V, Scope)
			in  %% Line 1643
			    call 'erlang':'setelement'
				(3, _cor0, _rec111)
		    %% Line 1644
		    <'true'> when 'true' ->
			let <_rec113> =
			    %% Line 1645
			    call 'orddict':'erase'
				(V, S)
			in  let <_rec114> =
				%% Line 1645
				apply 'kill_types'/2
				    (V, Tdb)
			    in  let <_cor8> =
				    %% Line 1645
				    call 'erlang':'setelement'
					(4, _cor0, _rec114)
				in  %% Line 1645
				    call 'erlang':'setelement'
					(2, _cor8, _rec113)
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_15990})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'sub_del_var',2}}] )
	    -| ['compiler_generated'] )
	end
'sub_subst_var'/3 =
    %% Line 1648
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'c_var',_cor11,V},Val,{'sub',S0,_cor12,_cor13,_cor14}> when 'true' ->
	      let <_cor7> =
		  %% Line 1650
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor5) ->
				case _cor5 of
				  <[{K,{'c_var',_cor15,V1}}|_cor4]>
				      when call 'erlang':'=:='
					    (V1,
					     V) ->
				      let <_cor6> =
					  apply 'lc$^0'/1
					      (_cor4)
				      in  ( [{K,_cor1}|_cor6]
					    -| ['compiler_generated'] )
				  ( <[_cor3|_cor4]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor4)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_390> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor5})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (S0)
		    -| ['list_comprehension'] )
	      in  %% Line 1650
		  [{V,_cor1}|_cor7]
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'sub_subst_var',3}}] )
	    -| ['compiler_generated'] )
	end
'sub_subst_scope'/1 =
    %% Line 1652
    fun (_cor0) ->
	case _cor0 of
	  <Sub = {'sub',S0,Scope,_cor12,_cor13}> when 'true' ->
	      let <_cor7> =
		  %% Line 1653
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[Sv|_cor2]> when 'true' ->
				      let <_cor6> =
					  apply 'lc$^0'/1
					      (_cor2)
				      in  ( [{-1,{'c_var',[],Sv}}|_cor6]
					    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      S0
				  ( <_14885> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor3> =
			    call 'gb_sets':'to_list'
				(Scope)
			in  apply 'lc$^0'/1
				(_cor3)
		    -| ['list_comprehension'] )
	      in  %% Line 1654
		  call 'erlang':'setelement'
		      (2, _cor0, _cor7)
	  ( <_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'sub_subst_scope',1}}] )
	    -| ['compiler_generated'] )
	end
'sub_is_val'/2 =
    %% Line 1656
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'c_var',_cor6,V},{'sub',S,Scope,_cor7,_cor8}> when 'true' ->
	      let <_13713> =
		  %% Line 1661
		  call 'gb_sets':'is_member'
		      (V, Scope)
	      in  %% Line 1661
		  ( case _13713 of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    apply 'v_is_value'/2
				(V, S)
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    'false'
			-| ['compiler_generated'] )
		      ( <_cor2> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_13713}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'sub_is_val',2}}] )
	    -| ['compiler_generated'] )
	end
'v_is_value'/2 =
    %% Line 1663
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Var,[{_cor4,{'c_var',_cor5,_cor6}}|_cor7]>
	      when call 'erlang':'=:='
		    (_cor6,
		     _cor1) ->
	      'true'
	  %% Line 1664
	  <Var,[_cor8|T]> when 'true' ->
	      apply 'v_is_value'/2
		  (_cor1, T)
	  %% Line 1665
	  <_cor9,[]> when 'true' ->
	      'false'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'v_is_value',2}}] )
	    -| ['compiler_generated'] )
	end
'warn_no_clause_match'/2 =
    %% Line 1671
    fun (_cor1,_cor0) ->
	let <OrigCs> =
	    %% Line 1672
	    call 'cerl':'case_clauses'
		(_cor1)
	in  let <OptCs> =
		%% Line 1673
		call 'cerl':'case_clauses'
		    (_cor0)
	    in  let <_cor8> =
		    %% Line 1674
		    fun (_cor6) ->
			let <Anno> =
			    %% Line 3110
			    call 'core_lib':'get_anno'
				(_cor6)
			in  let <_cor5> =
				%% Line 3111
				call 'lists':'member'
				    ('compiler_generated', Anno)
			    in  call 'erlang':'not'
				    (_cor5)
		in  let <_9571> =
			%% Line 1674
			call 'lists':'any'
			    (_cor8, OrigCs)
		    in  let <_cor10> =
			    %% Line 1674
			    ( case _9571 of
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      %% Line 1675
				      call 'lists':'all'
					  ('is_compiler_generated'/1, OptCs)
				  -| ['compiler_generated'] )
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      'false'
				  -| ['compiler_generated'] )
				( <_cor4> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {( 'badarg'
						  -| ['compiler_generated'] ),_9571}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			in  %% Line 1674
			    case _cor10 of
			      %% Line 1676
			      <'true'> when 'true' ->
				  %% Line 1680
				  apply 'add_warning'/2
				      (_cor1, 'no_clause_match')
			      %% Line 1681
			      <'false'> when 'true' ->
				  %% Line 1685
				  'ok'
			      ( <_cor11> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor10})
				-| ['compiler_generated'] )
			    end
'clauses'/5 =
    %% Line 1692
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <E,[C0|Cs],Ctxt,Sub,LitExpr> when 'true' ->
	      let <_14359> =
		  %% Line 1693
		  apply 'clause'/4
		      (C0, _cor4, _cor2, _cor1)
	      in  %% Line 1693
		  case _14359 of
		    <C1 = {'c_clause',_cor18,Ps,G,_cor19}> when 'true' ->
			let <_cor7> =
			    %% Line 1695
			    apply 'will_match'/2
				(_cor4, Ps)
			in  let <_cor6> =
				%% Line 1728
				case G of
				  <{'c_literal',_7291,'true'}> when 'true' ->
				      'yes'
				  %% Line 1729
				  <{'c_literal',_6192,'false'}> when 'true' ->
				      'no'
				  %% Line 1730
				  <_X_Guard> when 'true' ->
				      'maybe'
				end
			    in  %% Line 1695
				case <_cor7,_cor6> of
				  %% Line 1696
				  <'yes','yes'> when 'true' ->
				      do  %% Line 1697
					  case _cor0 of
					    %% Line 1698
					    <'false'> when 'true' ->
						let <_cor8> =
						    %% Line 1699
						    call 'core_lib':'get_anno'
							(_14359)
						in  let <Line> =
							%% Line 1699
							apply 'get_line'/1
							    (_cor8)
						    in  %% Line 1700
							apply 'shadow_warning'/2
							    (Cs, Line)
					    %% Line 1701
					    <'true'> when 'true' ->
						'ok'
					    ( <_cor10> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor0})
					      -| ['compiler_generated'] )
					  end
					  %% Line 1707
					  [_14359|[]]
				  %% Line 1708
				  <_X_Mat,'no'> when 'true' ->
				      do  %% Line 1709
					  apply 'add_warning'/2
					      (_14359, 'nomatch_guard')
					  %% Line 1710
					  apply 'clauses'/5
					      (_cor4, Cs, _cor2, _cor1, _cor0)
				  %% Line 1711
				  <_X_Mat,_X_Suc> when 'true' ->
				      let <_cor11> =
					  %% Line 1712
					  apply 'clauses'/5
					      (_cor4, Cs, _cor2, _cor1, _cor0)
				      in  %% Line 1712
					  [_14359|_cor11]
				end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_14359})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1714
	  <_cor20,[],_cor21,_cor22,_cor23> when 'true' ->
	      []
	  ( <_cor17,_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'clauses',5}}] )
	    -| ['compiler_generated'] )
	end
'shadow_warning'/2 =
    %% Line 1716
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[C|Cs],'none'> when 'true' ->
	      do  %% Line 1717
		  apply 'add_warning'/2
		      (C, 'nomatch_shadow')
		  %% Line 1718
		  apply 'shadow_warning'/2
		      (Cs, 'none')
	  %% Line 1719
	  <[C|Cs],Line> when 'true' ->
	      do  %% Line 1720
		  apply 'add_warning'/2
		      (C, {'nomatch_shadow',_cor0})
		  %% Line 1721
		  apply 'shadow_warning'/2
		      (Cs, _cor0)
	  %% Line 1722
	  <[],_cor4> when 'true' ->
	      'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'shadow_warning',2}}] )
	    -| ['compiler_generated'] )
	end
'will_match'/2 =
    %% Line 1737
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'c_values',_cor6,Es},Ps> when 'true' ->
	      let <_cor2> =
		  %% Line 1738
		  call 'cerl_clauses':'match_list'
		      (_cor0, Es)
	      in  %% Line 1742
		  case _cor2 of
		    <{'false',_12854}> when 'true' ->
			'maybe'
		    %% Line 1743
		    <{'true',_cor3}> when 'true' ->
			'yes'
		    ( <_7485> when 'true' ->
			  primop 'match_fail'
			      ({'function_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1739
	  <E,[P|[]]> when 'true' ->
	      let <_cor3> =
		  %% Line 1740
		  call 'cerl_clauses':'match'
		      (P, _cor1)
	      in  %% Line 1742
		  case _cor3 of
		    <{'false',_cor2}> when 'true' ->
			'maybe'
		    %% Line 1743
		    <{'true',_8176}> when 'true' ->
			'yes'
		    ( <_630> when 'true' ->
			  primop 'match_fail'
			      ({'function_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'will_match',2}}] )
	    -| ['compiler_generated'] )
	end
'opt_bool_case'/1 =
    %% Line 1768
    fun (_cor0) ->
	case _cor0 of
	  <Case0 = {'c_case',_cor8,Arg,_cor9}> when 'true' ->
	      let <_cor1> =
		  call 'orddict':'new'
		      ()
	      in  let <_15194> =
		      call 'gb_trees':'empty'
			  ()
		  in  let <_cor1> =
			  {'sub',_cor1,_15194,[],'false'}
		      in  let <_8042> =
			      %% Line 2307
			      apply 'is_bool_expr'/2
				  (Arg, _cor1)
			  in  %% Line 1769
			      case _8042 of
				%% Line 1770
				<'false'> when 'true' ->
				    _cor0
				%% Line 1772
				<'true'> when 'true' ->
				    %% Line 1773
				    try
					apply 'opt_bool_clauses'/1
					    (_cor0)
				    of <_cor1> ->
					%% Line 1775
					apply 'opt_bool_not'/1
					    (_cor1)
				    catch <_cor5,_cor4,_cor3> ->
					case <_cor5,_cor4,_cor3> of
					  %% Line 1777
					  <'throw','impossible',_cor10> when 'true' ->
					      _cor0
					  ( <_12907,_14624,_17176> when 'true' ->
						primop 'raise'
						    (_cor3, _cor4)
					    -| ['compiler_generated'] )
					end
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_8042})
				  -| ['compiler_generated'] )
			      end
	  %% Line 1781
	  <Core> when 'true' ->
	      _cor0
	end
'opt_bool_clauses'/1 =
    %% Line 1783
    fun (_cor0) ->
	case _cor0 of
	  <Case = {'c_case',_cor5,_cor6,Cs}> when 'true' ->
	      let <_rec117> =
		  %% Line 1784
		  apply 'opt_bool_clauses'/3
		      (Cs, 'false', 'false')
	      in  %% Line 1784
		  call 'erlang':'setelement'
		      (4, _cor0, _rec117)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'opt_bool_clauses',1}}] )
	    -| ['compiler_generated'] )
	end
'opt_bool_clauses'/3 =
    %% Line 1786
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Cs,'true','true'> when 'true' ->
	      %% Line 1789
	      case _cor2 of
		%% Line 1790
		<[_cor17|_cor18]> when 'true' ->
		    do  %% Line 1791
			apply 'shadow_warning'/2
			    (_cor2, 'none')
			%% Line 1792
			[]
		%% Line 1793
		<[]> when 'true' ->
		    %% Line 1794
		    []
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1796
	  <[C0 = {'c_clause',_cor19,[{'c_literal',_cor20,Lit}|[]],%% Line 1797
								  {'c_literal',_cor21,'true'},B}|Cs],SeenT,SeenF> when 'true' ->
	      %% Line 1799
	      case <> of
		%% Line 1804
		<>
		    when call 'erlang':'is_boolean'
			  (Lit) ->
		    let <_rec119> =
			%% Line 1806
			apply 'opt_bool_case'/1
			    (B)
		    in  let <_cor7> =
			    %% Line 1806
			    call 'erlang':'setelement'
				(5, C0, _rec119)
			in  %% Line 1807
			    case <Lit,_cor1,_cor0> of
			      %% Line 1808
			      <'false',_cor27,'false'> when 'true' ->
				  let <_cor9> =
				      %% Line 1809
				      apply 'opt_bool_clauses'/3
					  (Cs, _cor1, 'true')
				  in  %% Line 1809
				      [_cor7|_cor9]
			      %% Line 1810
			      <'true','false',_cor28> when 'true' ->
				  let <_cor10> =
				      %% Line 1811
				      apply 'opt_bool_clauses'/3
					  (Cs, 'true', _cor0)
				  in  %% Line 1811
				      [_cor7|_cor10]
			      %% Line 1812
			      <_fol607,_fol608,_fol609> when 'true' ->
				  do  %% Line 1813
				      apply 'add_warning'/2
					  (_cor7, 'nomatch_shadow')
				      %% Line 1814
				      apply 'opt_bool_clauses'/3
					  (Cs, _cor1, _cor0)
			    end
		%% Line 1800
		<> when 'true' ->
		    do  %% Line 1802
			apply 'add_warning'/2
			    (C0, 'nomatch_clause_type')
			%% Line 1803
			apply 'opt_bool_clauses'/3
			    (Cs, _cor1, _cor0)
	      end
	  %% Line 1817
	  <[C = {'c_clause',_cor30,Ps,{'c_literal',_cor31,'true'},_cor32}|Cs],SeenT,SeenF> when 'true' ->
	      %% Line 1818
	      case Ps of
		%% Line 1819
		<[{'c_var',_cor33,_cor34}|[]]> when 'true' ->
		    %% Line 1821
		    call 'erlang':'throw'
			('impossible')
		%% Line 1822
		<[{'c_alias',_cor35,_cor36,_cor37}|[]]> when 'true' ->
		    %% Line 1824
		    call 'erlang':'throw'
			('impossible')
		%% Line 1825
		<_cor38> when 'true' ->
		    do  %% Line 1828
			apply 'add_warning'/2
			    (C, 'nomatch_clause_type')
			%% Line 1829
			apply 'opt_bool_clauses'/3
			    (Cs, _cor1, _cor0)
	      end
	  %% Line 1831
	  <[_cor39|_cor40],_cor41,_cor42> when 'true' ->
	      %% Line 1833
	      call 'erlang':'throw'
		  ('impossible')
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'opt_bool_clauses',3}}] )
	    -| ['compiler_generated'] )
	end
'opt_bool_not'/1 =
    %% Line 1859
    fun (_cor0) ->
	case _cor0 of
	  <Case0 = {'c_case',_cor14,Arg,Cs0}> when 'true' ->
	      %% Line 1860
	      case Arg of
		%% Line 1861
		<{'c_call',Anno,{'c_literal',_cor15,'erlang'},%% Line 1862
							      {'c_literal',_cor16,'not'},%% Line 1863
											 [Expr|[]]}> when 'true' ->
		    let <_cor6> =
			%% Line 1864
			( letrec
			      'lc$^0'/1 =
				  fun (_cor3) ->
				      case _cor3 of
					<[C|_cor2]> when 'true' ->
					    let <_cor4> =
						apply 'opt_bool_not_invert'/1
						    (C)
					    in  let <_cor5> =
						    apply 'lc$^0'/1
							(_cor2)
						in  ( [_cor4|_cor5]
						      -| ['compiler_generated'] )
					<[]> when 'true' ->
					    %% Line 1865
					    [{'c_clause',['compiler_generated'],%% Line 1866
										[{'c_var',[],'cor_variable'}],%% Line 1867
													      {'c_literal',[],'true'},%% Line 1868
																      {'c_call',Anno,%% Line 1869
																		     {'c_literal',[],'erlang'},%% Line 1870
																					       {'c_literal',[],'error'},%% Line 1871
																									[{'c_literal',[],'badarg'}]}}|%% Line 1871
																												      []]
					( <_15780> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor3})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (Cs0)
			  -| ['list_comprehension'] )
		    in  let <_cor10> =
			    %% Line 1872
			    {'c_case',_cor14,Expr,_cor6}
			in  %% Line 1873
			    apply 'opt_bool_not'/1
				(_cor10)
		%% Line 1874
		<_cor18> when 'true' ->
		    %% Line 1875
		    apply 'opt_bool_case_redundant'/1
			(_cor0)
	      end
	  ( <_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'opt_bool_not',1}}] )
	    -| ['compiler_generated'] )
	end
'opt_bool_not_invert'/1 =
    %% Line 1878
    fun (_cor0) ->
	case _cor0 of
	  <C = {'c_clause',_cor6,[{'c_literal',_cor7,Bool}|[]],_cor8,_cor9}> when 'true' ->
	      let <_cor1> =
		  %% Line 1879
		  call 'erlang':'not'
		      (Bool)
	      in  let <_rec125> =
		      %% Line 1879
		      [{'c_literal',[],_cor1}|[]]
		  in  %% Line 1879
		      call 'erlang':'setelement'
			  (3, _cor0, _rec125)
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'opt_bool_not_invert',1}}] )
	    -| ['compiler_generated'] )
	end
'opt_bool_case_redundant'/1 =
    %% Line 1892
    fun (_cor0) ->
	case _cor0 of
	  <Case = {'c_case',_cor3,Arg,Cs}> when 'true' ->
	      let <_12406> =
		  %% Line 1893
		  call 'lists':'all'
		      ('opt_bool_case_redundant_1'/1, Cs)
	      in  %% Line 1893
		  case _12406 of
		    %% Line 1894
		    <'true'> when 'true' ->
			Arg
		    %% Line 1895
		    <'false'> when 'true' ->
			apply 'opt_bool_case_guard'/1
			    (_cor0)
		    ( <_cor1> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_12406})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'opt_bool_case_redundant',1}}] )
	    -| ['compiler_generated'] )
	end
'opt_bool_case_redundant_1'/1 =
    %% Line 1898
    fun (_cor0) ->
	case _cor0 of
	  <{'c_clause',_cor2,[{'c_literal',_cor3,B}|[]],_cor4,%% Line 1899
							      {'c_literal',_cor5,_cor6}}>
	      when call 'erlang':'=:='
		    (_cor6,
		     B) ->
	      %% Line 1900
	      'true'
	  %% Line 1901
	  <_cor7> when 'true' ->
	      'false'
	end
'opt_bool_case_guard'/1 =
    %% Line 1915
    fun (_cor0) ->
	case _cor0 of
	  <Case = {'c_case',_cor9,{'c_literal',_cor10,_cor11},_cor12}> when 'true' ->
	      _cor0
	  %% Line 1927
	  <Case = {'c_case',_cor13,Arg,Cs0}> when 'true' ->
	      let <_cor1> =
		  call 'orddict':'new'
		      ()
	      in  let <_3723> =
		      call 'gb_trees':'empty'
			  ()
		  in  let <_cor1> =
			  {'sub',_cor1,_3723,[],'false'}
		      in  let <_cor2> =
			      %% Line 2354
			      call 'gb_sets':'empty'
				  ()
			  in  let <_4965> =
				  %% Line 2354
				  apply 'is_safe_bool_expr_1'/3
				      (Arg, _cor1, _cor2)
			      in  %% Line 1928
				  case _4965 of
				    %% Line 1929
				    <'false'> when 'true' ->
					_cor0
				    %% Line 1931
				    <'true'> when 'true' ->
					let <Cs> =
					    %% Line 1932
					    apply 'opt_bool_case_guard'/2
						(Arg, Cs0)
					in  let <_cor3> =
						%% Line 1933
						call 'core_lib':'get_anno'
						    (Arg)
					    in  let <_rec127> = {%% Line 1933
						     'c_values',_cor3,%% Line 1933
								      []}
						in  %% Line 1934
						    {'c_case',_cor13,_rec127,Cs}
				    ( <_cor7> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_4965})
				      -| ['compiler_generated'] )
				  end
	  ( <_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'opt_bool_case_guard',1}}] )
	    -| ['compiler_generated'] )
	end
'opt_bool_case_guard'/2 =
    %% Line 1937
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Arg,[Tc = {'c_clause',_cor18,[{'c_literal',_cor19,'true'}|[]],_cor20,_cor21}|[Fc|[]]]> when 'true' ->
	      let <_cor3> =
		  %% Line 1938
		  call 'erlang':'setelement'
		      (4, Tc, _cor1)
	      in  let <_cor5> =
		      %% Line 1938
		      call 'erlang':'setelement'
			  (3, _cor3, [])
		  in  %% Line 1938
		      case Fc of
			<{'c_clause',_cor27,_cor28,_cor29,_cor30}> when 'true' ->
			    let <_cor8> =
				call 'erlang':'setelement'
				    (3, Fc, [])
			    in  [_cor5|[_cor8|[]]]
			( <_cor31> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','c_clause'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 1939
	  <Arg,[Fc = {'c_clause',_cor32,[{'c_literal',_cor33,'false'}|[]],_cor34,_cor35}|[Tc|[]]]> when 'true' ->
	      %% Line 1940
	      case Tc of
		<{'c_clause',_cor36,_cor37,_cor38,_cor39}> when 'true' ->
		    let <_cor10> =
			call 'erlang':'setelement'
			    (4, Tc, _cor1)
		    in  let <_cor12> =
			    call 'erlang':'setelement'
				(3, _cor10, [])
			in  let <_cor15> =
				call 'erlang':'setelement'
				    (3, Fc, [])
			    in  [_cor12|[_cor15|[]]]
		( <_cor40> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','c_clause'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  ( <_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'opt_bool_case_guard',2}}] )
	    -| ['compiler_generated'] )
	end
'eval_case'/2 =
    %% Line 1947
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Case = {'c_case',_cor15,E,[{'c_clause',_cor16,Ps0,%% Line 1948
							     {'c_literal',_cor17,'true'},B}|%% Line 1949
											    []]},Sub> when 'true' ->
	      let <_15959> =
		  %% Line 1950
		  call 'cerl':'is_c_values'
		      (E)
	      in  let <_cor3> =
		      %% Line 1950
		      case _15959 of
			%% Line 1951
			<'true'> when 'true' ->
			    call 'cerl':'values_es'
				(E)
			%% Line 1952
			<'false'> when 'true' ->
			    [E|[]]
			( <_cor2> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_15959})
			  -| ['compiler_generated'] )
		      end
		  in  let <_cor5> =
			  %% Line 1972
			  call 'erlang':'length'
			      (_cor3)
		      in  let <Vs> =
			      %% Line 2222
			      apply 'make_vars'/3
				  ([], 1, _cor5)
			  in  let <_15810> =
				  %% Line 1973
				  call 'cerl_clauses':'match_list'
				      (Ps0, Vs)
			      in  %% Line 1973
				  case _15810 of
				    %% Line 1974
				    <{'false',_cor18}> when 'true' ->
					_cor1
				    %% Line 1980
				    <{'true',Bs}> when 'true' ->
					let <_9894> =
					    %% Line 1981
					    call 'lists':'unzip'
						(Bs)
					in  %% Line 1981
					    case _9894 of
					      <{Ps,As}> when 'true' ->
						  let <_cor8> =
						      %% Line 1982
						      call 'core_lib':'make_values'
							  (As)
						  in  let <InnerLet> =
							  %% Line 1982
							  call 'cerl':'c_let'
							      (Ps, _cor8, B)
						      in  let <Let> =
							      %% Line 1983
							      call 'cerl':'c_let'
								  (Vs, E, InnerLet)
							  in  let <_cor11> =
								  %% Line 1984
								  apply 'sub_new'/1
								      (_cor0)
							      in  apply 'expr'/3
								      (Let, 'value', _cor11)
					      ( <_cor7> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_9894})
						-| ['compiler_generated'] )
					    end
				    ( <_cor12> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_15810})
				      -| ['compiler_generated'] )
				  end
	  %% Line 1986
	  <Case,_cor19> when 'true' ->
	      _cor1
	end
'case_opt'/3 =
    %% Line 2009
    fun (_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 2010
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[C|_cor4]> when 'true' ->
				let <_cor6> =
				    call 'cerl':'clause_pats'
					(C)
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [{_cor6,C,[],[]}|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_4690> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor1)
	      -| ['list_comprehension'] )
	in  let <_16019> =
		%% Line 2011
		call 'cerl':'is_c_values'
		    (_cor2)
	    in  let <_cor11> =
		    %% Line 2011
		    case _16019 of
		      %% Line 2012
		      <'false'> when 'true' ->
			  [_cor2|[]]
		      %% Line 2013
		      <'true'> when 'true' ->
			  call 'cerl':'values_es'
			      (_cor2)
		      ( <_cor10> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_16019})
			-| ['compiler_generated'] )
		    end
		in  let <LitExpr> =
			%% Line 2015
			call 'cerl':'is_literal'
			    (_cor2)
		    in  let <_17426> =
			    %% Line 2016
			    apply 'case_opt_args'/5
				(_cor11, _cor8, _cor0, LitExpr, [])
			in  %% Line 2016
			    case _17426 of
			      <{Args,Cs2}> when 'true' ->
				  let <_cor25> =
				      %% Line 2017
				      ( letrec
					    'lc$^1'/1 =
						fun (_cor17) ->
						    case _cor17 of
						      <[%% Line 2021
							{[],C,Ps,Bs}|_cor16]> when 'true' ->
							  let <_cor22> =
							      %% Line 2018
							      call 'lists':'reverse'
								  (Ps)
							  in  let <_cor20> =
								  %% Line 2019
								  call 'cerl':'clause_guard'
								      (C)
							      in  let <_cor21> =
								      %% Line 2019
								      apply 'letify'/2
									  (Bs, _cor20)
								  in  let <_cor18> =
									  %% Line 2020
									  call 'cerl':'clause_body'
									      (C)
								      in  let <_cor19> =
									      %% Line 2020
									      apply 'letify'/2
										  (Bs, _cor18)
									  in  let <_cor23> =
										  call 'cerl':'update_c_clause'
										      (C, _cor22, _cor21, _cor19)
									      in  let <_cor24> =
										      %% Line 2021
										      apply 'lc$^1'/1
											  (_cor16)
										  in  ( [_cor23|_cor24]
											-| ['compiler_generated'] )
						      ( <[_cor15|_cor16]> when 'true' ->
							    %% Line 2021
							    apply 'lc$^1'/1
								(_cor16)
							-| ['compiler_generated'] )
						      <[]> when 'true' ->
							  []
						      ( <_7688> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor17})
							      -| [{'function_name',{'lc$^1',1}}] )
							-| ['compiler_generated'] )
						    end
					in  apply 'lc$^1'/1
						(Cs2)
					-| ['list_comprehension'] )
				  in  let <_cor27> =
					  %% Line 2022
					  call 'core_lib':'make_values'
					      (Args)
				      in  %% Line 2022
					  {_cor27,_cor25}
			      ( <_cor14> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_17426})
				-| ['compiler_generated'] )
			    end
'case_opt_args'/5 =
    %% Line 2024
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[A0|As0],Cs0,Sub,LitExpr,Acc> when 'true' ->
	      let <_9034> =
		  %% Line 2025
		  apply 'case_opt_arg'/4
		      (A0, _cor2, _cor3, _cor1)
	      in  %% Line 2025
		  case _9034 of
		    %% Line 2026
		    <{'error',Cs1}> when 'true' ->
			let <_cor9> =
			    %% Line 2028
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor7) ->
					  case _cor7 of
					    <[{[P|Ps],C,PsAcc,Bs}|_cor6]> when 'true' ->
						let <_cor8> =
						    apply 'lc$^0'/1
							(_cor6)
						in  ( [{Ps,C,[P|PsAcc],Bs}|_cor8]
						      -| ['compiler_generated'] )
					    ( <[_cor5|_cor6]> when 'true' ->
						  apply 'lc$^0'/1
						      (_cor6)
					      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_18697> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor7})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (Cs1)
			      -| ['list_comprehension'] )
			in  %% Line 2029
			    apply 'case_opt_args'/5
				(As0, _cor9, _cor2, _cor1, [A0|_cor0])
		    %% Line 2030
		    <{'ok',As1,Cs}> when 'true' ->
			let <_cor11> =
			    %% Line 2033
			    call 'erlang':'++'
				(As1, As0)
			in  %% Line 2033
			    apply 'case_opt_args'/5
				(_cor11, Cs, _cor2, _cor1, _cor0)
		    ( <_cor12> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_9034})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2035
	  <[],Cs,_X_Sub,_X_LitExpr,Acc> when 'true' ->
	      let <_cor13> =
		  %% Line 2036
		  call 'lists':'reverse'
		      (_cor0)
	      in  %% Line 2036
		  {_cor13,_cor3}
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'case_opt_args',5}}] )
	    -| ['compiler_generated'] )
	end
'case_opt_arg'/4 =
    %% Line 2043
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_627> =
	    %% Line 2063
	    call 'cerl':'is_c_var'
		(_cor3)
	in  let <E> =
		%% Line 2063
		case _627 of
		  %% Line 2064
		  <'false'> when 'true' ->
		      _cor3
		  %% Line 2065
		  <'true'> when 'true' ->
		      apply 'maybe_replace_var_1'/2
			  (_cor3, _cor2)
		  ( <_11303> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_627})
		    -| ['compiler_generated'] )
		end
	    in  let <_13189> =
		    %% Line 2045
		    call 'cerl':'is_data'
			(E)
		in  %% Line 2045
		    case _13189 of
		      %% Line 2046
		      <'false'> when 'true' ->
			  %% Line 2047
			  {'error',_cor1}
		      %% Line 2048
		      <'true'> when 'true' ->
			  %% Line 2049
			  case call 'cerl':'data_type'
				   (E) of
			    %% Line 2050
			    <{'atomic',_cor11}> when 'true' ->
				%% Line 2051
				apply 'case_opt_lit'/3
				    (E, _cor1, _cor0)
			    %% Line 2052
			    <_cor12> when 'true' ->
				%% Line 2053
				apply 'case_opt_data'/3
				    (E, _cor1, _cor0)
			  end
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_13189})
			-| ['compiler_generated'] )
		    end
'maybe_replace_var_1'/2 =
    %% Line 2068
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <E,{'sub',_cor11,_cor12,Tdb,_cor13}> when 'true' ->
	      let <_cor2> =
		  %% Line 2069
		  call 'cerl':'var_name'
		      (_cor1)
	      in  let <_139> =
		      %% Line 2069
		      call 'orddict':'find'
			  (_cor2, Tdb)
		  in  %% Line 2069
		      case _139 of
			%% Line 2070
			<{'ok',T0}> when 'true' ->
			    let <_13223> =
				%% Line 2071
				call 'cerl':'is_c_tuple'
				    (T0)
			    in  %% Line 2071
				case _13223 of
				  %% Line 2072
				  <'false'> when 'true' ->
				      _cor1
				  %% Line 2074
				  <'true'> when 'true' ->
				      let <_cor6> =
					  %% Line 2075
					  fun (_cor4) ->
					      let <_17855> =
						  %% Line 2076
						  call 'cerl':'is_c_alias'
						      (_cor4)
					      in  %% Line 2076
						  case _17855 of
						    %% Line 2077
						    <'false'> when 'true' ->
							_cor4
						    %% Line 2078
						    <'true'> when 'true' ->
							call 'cerl':'alias_pat'
							    (_cor4)
						    ( <_cor3> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_17855})
						      -| ['compiler_generated'] )
						  end
				      in  %% Line 2075
					  call 'cerl_trees':'map'
					      (_cor6, T0)
				  ( <_cor7> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_13223})
				    -| ['compiler_generated'] )
				end
			%% Line 2082
			<'error'> when 'true' ->
			    _cor1
			( <_cor8> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_139})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'maybe_replace_var_1',2}}] )
	    -| ['compiler_generated'] )
	end
'case_opt_lit'/3 =
    %% Line 2096
    fun (_cor2,_cor1,_cor0) ->
	let <Cs1> =
	    %% Line 2097
	    apply 'case_opt_lit_1'/3
		(_cor2, _cor1, _cor0)
	in  %% Line 2098
	    try
		apply 'case_opt_lit_2'/2
		    (_cor2, Cs1)
	    of <_cor4> ->
		%% Line 2100
		{'ok',[],_cor4}
	    catch <_cor8,_cor7,_cor6> ->
		case <_cor8,_cor7,_cor6> of
		  %% Line 2102
		  <'throw','impossible',_cor12> when 'true' ->
		      %% Line 2103
		      {'error',Cs1}
		  ( <_11935,_1578,_16506> when 'true' ->
			primop 'raise'
			    (_cor6, _cor7)
		    -| ['compiler_generated'] )
		end
'case_opt_lit_1'/3 =
    %% Line 2106
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <E,[Current = {[P|_cor9],C,_cor10,_cor11}|Cs],LitExpr> when 'true' ->
	      %% Line 2107
	      case call 'cerl_clauses':'match'
		       (P, _cor2) of
		%% Line 2108
		<'none'> when 'true' ->
		    do  %% Line 2112
			case _cor0 of
			  %% Line 2113
			  <'false'> when 'true' ->
			      apply 'add_warning'/2
				  (C, 'nomatch_clause_type')
			  %% Line 2114
			  <'true'> when 'true' ->
			      'ok'
			  ( <_cor3> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor0})
			    -| ['compiler_generated'] )
			end
			%% Line 2116
			apply 'case_opt_lit_1'/3
			    (_cor2, Cs, _cor0)
		%% Line 2117
		<_cor12> when 'true' ->
		    let <_cor4> =
			%% Line 2118
			apply 'case_opt_lit_1'/3
			    (_cor2, Cs, _cor0)
		    in  %% Line 2118
			[Current|_cor4]
	      end
	  %% Line 2120
	  <_cor13,[],_cor14> when 'true' ->
	      []
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'case_opt_lit_1',3}}] )
	    -| ['compiler_generated'] )
	end
'case_opt_lit_2'/2 =
    %% Line 2122
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <E,[{[P|Ps],C,PsAcc,Bs0}|Cs]> when 'true' ->
	      let <_17018> =
		  %% Line 2124
		  call 'cerl_clauses':'match'
		      (P, _cor1)
	      in  %% Line 2124
		  case _17018 of
		    %% Line 2125
		    <{'true',Bs}> when 'true' ->
			let <_cor2> =
			    %% Line 2128
			    call 'erlang':'++'
				(Bs, Bs0)
			in  let <_cor3> =
				%% Line 2128
				apply 'case_opt_lit_2'/2
				    (_cor1, Cs)
			    in  %% Line 2128
				[{Ps,C,PsAcc,_cor2}|_cor3]
		    %% Line 2129
		    <{'false',_cor7}> when 'true' ->
			%% Line 2132
			call 'erlang':'throw'
			    ('impossible')
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_17018})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2134
	  <_cor8,[]> when 'true' ->
	      []
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'case_opt_lit_2',2}}] )
	    -| ['compiler_generated'] )
	end
'case_opt_data'/3 =
    %% Line 2138
    fun (_cor2,_cor1,_cor0) ->
	let <Es> =
	    %% Line 2139
	    call 'cerl':'data_es'
		(_cor2)
	in  let <_cor5> =
		%% Line 2141
		call 'cerl':'data_type'
		    (_cor2)
	    in  let <_cor4> =
		    %% Line 2141
		    call 'cerl':'data_arity'
			(_cor2)
		in  let <Cs> =
			%% Line 2140
			apply 'case_opt_data_1'/4
			    (_cor1, Es, %% Line 2141
					{_cor5,_cor4}, _cor0)
		    in  %% Line 2143
			{'ok',Es,Cs}
'case_opt_data_1'/4 =
    %% Line 2145
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{[P|Ps0],C,PsAcc,Bs0}|Cs],Es,TypeSig,LitExpr> when 'true' ->
	      let <_6818> =
		  %% Line 2146
		  apply 'case_data_pat'/2
		      (P, _cor1)
	      in  %% Line 2146
		  case _6818 of
		    %% Line 2147
		    <{'ok',Ps1,Bs1}> when 'true' ->
			let <_cor5> =
			    %% Line 2148
			    call 'erlang':'++'
				(Ps1, Ps0)
			in  let <_cor4> =
				%% Line 2148
				call 'erlang':'++'
				    (Bs1, Bs0)
			    in  let <_cor6> =
				    %% Line 2149
				    apply 'case_opt_data_1'/4
					(Cs, _cor2, _cor1, _cor0)
				in  %% Line 2148
				    [{_cor5,C,PsAcc,_cor4}|_cor6]
		    %% Line 2150
		    <'error'> when 'true' ->
			do  %% Line 2151
			    case _cor0 of
			      %% Line 2152
			      <'false'> when 'true' ->
				  apply 'add_warning'/2
				      (C, 'nomatch_clause_type')
			      %% Line 2153
			      <'true'> when 'true' ->
				  'ok'
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor0})
				-| ['compiler_generated'] )
			    end
			    %% Line 2155
			    apply 'case_opt_data_1'/4
				(Cs, _cor2, _cor1, _cor0)
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_6818})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2157
	  <[],_cor13,_cor14,_cor15> when 'true' ->
	      []
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'case_opt_data_1',4}}] )
	    -| ['compiler_generated'] )
	end
'case_data_pat'/2 =
    %% Line 2161
    fun (_cor1,_cor0) ->
	let <_2021> =
	    %% Line 2162
	    call 'cerl':'is_data'
		(_cor1)
	in  %% Line 2162
	    case _2021 of
	      %% Line 2163
	      <'false'> when 'true' ->
		  %% Line 2164
		  apply 'case_data_pat_var'/2
		      (_cor1, _cor0)
	      %% Line 2165
	      <'true'> when 'true' ->
		  let <_cor3> =
		      %% Line 2166
		      call 'cerl':'data_type'
			  (_cor1)
		  in  let <_cor2> =
			  %% Line 2166
			  call 'cerl':'data_arity'
			      (_cor1)
		      in  %% Line 2166
			  case <_cor3,_cor2> of
			    %% Line 2167
			    <_fol771,_fol772>
				when let <_cor9> = {_cor3,_cor2}
				  in  call 'erlang':'=:='
					  (_cor9, _cor0) ->
				let <_cor4> =
				    %% Line 2168
				    call 'cerl':'data_es'
					(_cor1)
				in  %% Line 2168
				    {'ok',_cor4,[]}
			    %% Line 2169
			    <_cor10,_cor11> when 'true' ->
				%% Line 2170
				'error'
			  end
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_2021})
		-| ['compiler_generated'] )
	    end
'case_data_pat_var'/2 =
    %% Line 2177
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <P,TypeSig = {Type,Arity}> when 'true' ->
	      let <_cor2> =
		  %% Line 2183
		  call 'cerl':'get_ann'
		      (_cor1)
	      in  let <Ann> =
		      %% Line 2183
		      ['compiler_generated'|_cor2]
		  in  %% Line 2184
		      case call 'cerl':'type'
			       (_cor1) of
			%% Line 2185
			<'var'> when 'true' ->
			    let <_cor4> =
				%% Line 2186
				call 'cerl':'get_ann'
				    (_cor1)
			    in  let <Vars> =
				    %% Line 2222
				    apply 'make_vars'/3
					(_cor4, 1, Arity)
				in  let <_cor6> =
					%% Line 2187
					call 'cerl':'ann_make_data'
					    (Ann, Type, Vars)
				    in  %% Line 2187
					{'ok',Vars,[{_cor1,_cor6}|[]]}
			%% Line 2188
			<'alias'> when 'true' ->
			    let <V> =
				%% Line 2189
				call 'cerl':'alias_var'
				    (_cor1)
			    in  let <Apat> =
				    %% Line 2190
				    call 'cerl':'alias_pat'
					(_cor1)
				in  let <_15770> =
					%% Line 2191
					apply 'case_data_pat'/2
					    (Apat, _cor0)
				    in  %% Line 2191
					case _15770 of
					  %% Line 2192
					  <{'ok',Ps,Bs}> when 'true' ->
					      let <_cor9> =
						  %% Line 2193
						  apply 'unalias_pat_list'/1
						      (Ps)
					      in  let <_cor10> =
						      %% Line 2193
						      call 'cerl':'ann_make_data'
							  (Ann, Type, _cor9)
						  in  %% Line 2193
						      {'ok',Ps,[{V,_cor10}|Bs]}
					  %% Line 2194
					  <'error'> when 'true' ->
					      %% Line 2195
					      'error'
					  ( <_cor11> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_15770})
					    -| ['compiler_generated'] )
					end
			%% Line 2197
			<_cor15> when 'true' ->
			    %% Line 2198
			    'error'
		      end
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'case_data_pat_var',2}}] )
	    -| ['compiler_generated'] )
	end
'unalias_pat'/1 =
    %% Line 2205
    fun (_cor0) ->
	let <_11386> =
	    %% Line 2206
	    call 'cerl':'is_c_alias'
		(_cor0)
	in  %% Line 2206
	    case _11386 of
	      %% Line 2207
	      <'true'> when 'true' ->
		  %% Line 2208
		  call 'cerl':'alias_var'
		      (_cor0)
	      %% Line 2209
	      <'false'> when 'true' ->
		  let <_17259> =
		      %% Line 2210
		      call 'cerl':'is_data'
			  (_cor0)
		  in  %% Line 2210
		      case _17259 of
			%% Line 2211
			<'false'> when 'true' ->
			    _cor0
			%% Line 2213
			<'true'> when 'true' ->
			    let <_cor1> =
				%% Line 2214
				call 'cerl':'data_es'
				    (_cor0)
			    in  let <Es> =
				    %% Line 2214
				    apply 'unalias_pat_list'/1
					(_cor1)
				in  let <_cor3> =
					%% Line 2215
					call 'cerl':'data_type'
					    (_cor0)
				    in  %% Line 2215
					call 'cerl':'update_data'
					    (_cor0, _cor3, Es)
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_17259})
			  -| ['compiler_generated'] )
		      end
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_11386})
		-| ['compiler_generated'] )
	    end
'unalias_pat_list'/1 =
    %% Line 2219
    fun (_cor0) ->
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[P|_cor2]> when 'true' ->
			    let <_cor4> =
				apply 'unalias_pat'/1
				    (P)
			    in  let <_cor5> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [_cor4|_cor5]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_12558> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'make_vars'/3 =
    %% Line 2224
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <A,I,Max>
	      when call 'erlang':'=<'
		    (_cor1,
		     _cor0) ->
	      let <_2530> =
		  %% Line 2229
		  apply 'make_var_name'/0
		      ()
	      in  let <_cor3> = {%% Line 2229
		       'c_var',_cor2,_2530}
		  in  let <_cor4> =
			  %% Line 2225
			  call 'erlang':'+'
			      (_cor1, 1)
		      in  let <_cor5> =
			      %% Line 2225
			      apply 'make_vars'/3
				  (_cor2, _cor4, _cor0)
			  in  %% Line 2225
			      [_cor3|_cor5]
	  %% Line 2226
	  <_cor9,_cor10,_cor11> when 'true' ->
	      []
	end
'make_var_name'/0 =
    %% Line 2231
    fun () ->
	let <N> =
	    %% Line 2232
	    call 'erlang':'get'
		('new_var_num')
	in  let <_cor1> =
		%% Line 2233
		call 'erlang':'+'
		    (N, 1)
	    in  do  %% Line 2233
		    call 'erlang':'put'
			('new_var_num', _cor1)
		    let <_cor2> =
			%% Line 2234
			call 'erlang':'integer_to_list'
			    (N)
		    in  let <_cor3> =
			    %% Line 2234
			    [102|[111|[108|_cor2]]]
			in  %% Line 2234
			    call 'erlang':'list_to_atom'
				(_cor3)
'letify'/2 =
    %% Line 2236
    fun (_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 2237
	    fun (_cor3,_cor2) ->
		case <_cor3,_cor2> of
		  <{V,Val},B> when 'true' ->
		      %% Line 2238
		      apply 'letify'/3
			  (V, Val, _cor2)
		  ( <_cor5,_cor4> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_cor3,_cor2})
			  -| [{'function_name',{'-letify/2-fun-0-',2}}] )
		    -| ['compiler_generated'] )
		end
	in  %% Line 2237
	    call 'lists':'foldr'
		(_cor6, _cor0, _cor1)
'letify'/3 =
    %% Line 2241
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Var = {'c_var',_cor8,Vname},Val,Body> when 'true' ->
	      let <_4402> =
		  %% Line 2242
		  call 'core_lib':'is_var_used'
		      (Vname, _cor0)
	      in  %% Line 2242
		  case _4402 of
		    %% Line 2243
		    <'true'> when 'true' ->
			let <A> =
			    %% Line 2244
			    call 'erlang':'element'
				(2, _cor0)
			in  %% Line 2245
			    {'c_let',A,[_cor2|[]],_cor1,_cor0}
		    %% Line 2246
		    <'false'> when 'true' ->
			_cor0
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_4402})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'letify',3}}] )
	    -| ['compiler_generated'] )
	end
'opt_case_in_let'/1 =
    %% Line 2251
    fun (_cor0) ->
	case _cor0 of
	  <Let = {'c_let',_cor2,Vs,Arg,B}> when 'true' ->
	      %% Line 2252
	      apply 'opt_case_in_let_0'/4
		  (Vs, Arg, B, _cor0)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'opt_case_in_let',1}}] )
	    -| ['compiler_generated'] )
	end
'opt_case_in_let_0'/4 =
    %% Line 2254
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'c_var',_cor23,V}|[]],Arg,Case = %% Line 2255
					      {'c_case',_cor24,{'c_var',_cor25,_cor26},Cs},Let>
	      when call 'erlang':'=:='
		    (_cor26,
		     V) ->
	      let <_4893> =
		  %% Line 2256
		  apply 'opt_case_in_let_1'/3
		      (V, _cor2, Cs)
	      in  %% Line 2256
		  case _4893 of
		    %% Line 2257
		    <'impossible'> when 'true' ->
			let <_13414> =
			    %% Line 2258
			    apply 'is_simple_case_arg'/1
				(_cor2)
			in  let <_cor11> =
				%% Line 2258
				( case _13414 of
				    ( <( 'true'
					 -| ['compiler_generated'] )> when 'true' ->
					  let <_cor8> =
					      %% Line 2259
					      call 'erlang':'setelement'
						  (3, _cor1, {'c_literal',[],'nil'})
					  in  let <_cor9> =
						  %% Line 2259
						  call 'core_lib':'is_var_used'
						      (V, _cor8)
					      in  %% Line 2259
						  call 'erlang':'not'
						      (_cor9)
				      -| ['compiler_generated'] )
				    ( <( 'false'
					 -| ['compiler_generated'] )> when 'true' ->
					  'false'
				      -| ['compiler_generated'] )
				    ( <_cor4> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {( 'badarg'
						      -| ['compiler_generated'] ),_13414}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    in  %% Line 2258
				case _cor11 of
				  %% Line 2260
				  <'true'> when 'true' ->
				      let <_cor15> =
					  %% Line 2261
					  {'c_case',_cor24,_cor2,Cs}
				      in  let <_cor16> =
					      %% Line 2261
					      apply 'opt_bool_case'/1
						  (_cor15)
					  in  let <_910> =
						  call 'orddict':'new'
						      ()
					      in  let <_16533> =
						      call 'gb_trees':'empty'
							  ()
						  in  let <_cor12> =
							  {'sub',_910,_16533,[],'false'}
						      in  apply 'expr'/3
							      (_cor16, 'value', _cor12)
				  %% Line 2262
				  <'false'> when 'true' ->
				      _cor0
				  ( <_cor17> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor11})
				    -| ['compiler_generated'] )
				end
		    %% Line 2265
		    <Expr> when 'true' ->
			_4893
		  end
	  %% Line 2267
	  <_cor32,_cor33,_cor34,Let> when 'true' ->
	      _cor0
	end
'opt_case_in_let_1'/3 =
    %% Line 2269
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2270
	try
	    %% Line 2271
	    apply 'opt_case_in_let_2'/3
		(_cor2, _cor1, _cor0)
	of <_cor3> ->
	    _cor3
	catch <_cor6,_cor5,_cor4> ->
	    %% Line 2273
	    'impossible'
'opt_case_in_let_2'/3 =
    %% Line 2276
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <V,Arg0,%% Line 2277
		  [{'c_clause',_cor13,[{'c_tuple',_cor14,Es}|[]],%% Line 2278
								 {'c_literal',_cor15,'true'},B}|_cor16]> when 'true' ->
	      let <_cor5> =
		  %% Line 2284
		  fun (_cor3) ->
		      case _cor3 of
			<{'c_var',_cor17,_cor18}> when 'true' ->
			    'true'
			%% Line 2285
			<_cor19> when 'true' ->
			    'false'
		      end
	      in  let <_13461> =
		      %% Line 2284
		      call 'lists':'all'
			  (_cor5, Es)
		  in  %% Line 2284
		      case _13461 of
			<'true'> when 'true' ->
			    let <_16617> =
				%% Line 2286
				call 'core_lib':'is_var_used'
				    (_cor2, B)
			    in  %% Line 2286
				case _16617 of
				  <'false'> when 'true' ->
				      let <_cor8> =
					  %% Line 2287
					  call 'erlang':'length'
					      (Es)
				      in  let <Arg1> =
					      %% Line 2287
					      apply 'tuple_to_values'/2
						  (_cor1, _cor8)
					  in  %% Line 2288
					      {'c_let',[],Es,Arg1,B}
				  ( <_cor7> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_16617})
				    -| ['compiler_generated'] )
				end
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_13461})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'opt_case_in_let_2',3}}] )
	    -| ['compiler_generated'] )
	end
'is_simple_case_arg'/1 =
    %% Line 2296
    fun (_cor0) ->
	case _cor0 of
	  <{'c_cons',_cor2,_cor3,_cor4}> when 'true' ->
	      'true'
	  %% Line 2297
	  <{'c_tuple',_cor5,_cor6}> when 'true' ->
	      'true'
	  %% Line 2298
	  <{'c_call',_cor7,_cor8,_cor9,_cor10}> when 'true' ->
	      'true'
	  %% Line 2299
	  <{'c_apply',_cor11,_cor12,_cor13}> when 'true' ->
	      'true'
	  %% Line 2300
	  <_cor14> when 'true' ->
	      'false'
	end
'is_bool_expr'/2 =
    %% Line 2314
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Call = {'c_call',_cor14,{'c_literal',_cor15,'erlang'},%% Line 2315
								 {'c_literal',_cor16,Name},Args},_cor17> when 'true' ->
	      let <NumArgs> =
		  %% Line 2316
		  call 'erlang':'length'
		      (Args)
	      in  let <_1390> =
		      %% Line 2317
		      call 'erl_internal':'comp_op'
			  (Name, NumArgs)
		  in  %% Line 2317
		      ( case _1390 of
			  ( <( 'true'
			       -| ['compiler_generated'] )> when 'true' ->
				'true'
			    -| ['compiler_generated'] )
			  ( <( 'false'
			       -| ['compiler_generated'] )> when 'true' ->
				let <_18274> =
				    %% Line 2318
				    call 'erl_internal':'new_type_test'
					(Name, NumArgs)
				in  %% Line 2318
				    ( case _18274 of
					( <( 'true'
					     -| ['compiler_generated'] )> when 'true' ->
					      'true'
					  -| ['compiler_generated'] )
					( <( 'false'
					     -| ['compiler_generated'] )> when 'true' ->
					      let <_10667> =
						  %% Line 2319
						  call 'erl_internal':'bool_op'
						      (Name, NumArgs)
					      in  %% Line 2319
						  ( case _10667 of
						      ( <( 'true'
							   -| ['compiler_generated'] )> when 'true' ->
							    'true'
							-| ['compiler_generated'] )
						      ( <( 'false'
							   -| ['compiler_generated'] )> when 'true' ->
							    %% Line 2320
							    apply 'will_fail'/1
								(_cor1)
							-| ['compiler_generated'] )
						      ( <_cor5> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {( 'badarg'
									-| ['compiler_generated'] ),_10667}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					  -| ['compiler_generated'] )
					( <_cor4> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {( 'badarg'
							  -| ['compiler_generated'] ),_18274}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <_cor3> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {( 'badarg'
					    -| ['compiler_generated'] ),_1390}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  %% Line 2321
	  <{'c_try',_cor18,E,[{'c_var',_cor19,X}|[]],{'c_var',_cor20,_cor21},_cor22,%% Line 2322
										    {'c_literal',_cor23,'false'}},Sub>
	      when call 'erlang':'=:='
		    (_cor21,
		     X) ->
	      %% Line 2323
	      apply 'is_bool_expr'/2
		  (E, _cor0)
	  %% Line 2324
	  <{'c_case',_cor24,_cor25,Cs},Sub> when 'true' ->
	      %% Line 2325
	      apply 'is_bool_expr_list'/2
		  (Cs, _cor0)
	  %% Line 2326
	  <{'c_clause',_cor26,_cor27,_cor28,B},Sub> when 'true' ->
	      %% Line 2327
	      apply 'is_bool_expr'/2
		  (B, _cor0)
	  %% Line 2328
	  <{'c_let',_cor29,[V|[]],Arg,B},Sub0> when 'true' ->
	      let <_13973> =
		  %% Line 2329
		  apply 'is_bool_expr'/2
		      (Arg, _cor0)
	      in  let <_cor10> =
		      %% Line 2329
		      case _13973 of
			%% Line 2330
			<'true'> when 'true' ->
			    apply 'update_types'/3
				(V, [{'c_literal',[],'true'}], _cor0)
			%% Line 2331
			<'false'> when 'true' ->
			    _cor0
			( <_cor9> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_13973})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 2333
		      apply 'is_bool_expr'/2
			  (B, _cor10)
	  %% Line 2334
	  <{'c_let',_cor30,_cor31,_cor32,B},Sub> when 'true' ->
	      %% Line 2336
	      apply 'is_bool_expr'/2
		  (B, _cor0)
	  %% Line 2337
	  <{'c_literal',_cor33,Bool},_cor34>
	      when call 'erlang':'is_boolean'
		    (Bool) ->
	      %% Line 2338
	      'true'
	  %% Line 2339
	  <{'c_var',_cor35,V},Sub> when 'true' ->
	      %% Line 2340
	      apply 'is_boolean_type'/2
		  (V, _cor0)
	  %% Line 2341
	  <_cor36,_cor37> when 'true' ->
	      'false'
	end
'is_bool_expr_list'/2 =
    %% Line 2343
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[C|Cs],Sub> when 'true' ->
	      let <_16976> =
		  %% Line 2344
		  apply 'is_bool_expr'/2
		      (C, _cor0)
	      in  %% Line 2344
		  ( case _16976 of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    apply 'is_bool_expr_list'/2
				(Cs, _cor0)
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    'false'
			-| ['compiler_generated'] )
		      ( <_cor2> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_16976}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 2345
	  <[],_cor6> when 'true' ->
	      'true'
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'is_bool_expr_list',2}}] )
	    -| ['compiler_generated'] )
	end
'is_safe_bool_expr_1'/3 =
    %% Line 2356
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'c_call',_cor24,{'c_literal',_cor25,'erlang'},%% Line 2357
							  {'c_literal',_cor26,'is_record'},%% Line 2358
											   [A|[{'c_literal',_cor27,Tag}|[{'c_literal',_cor28,Size}|[]]]]},Sub,_X_BoolVars>
	      when let <_cor3> =
		    %% Line 2359
		    call 'erlang':'is_atom'
			(Tag)
		in  let <_cor4> =
			%% Line 2359
			call 'erlang':'is_integer'
			    (Size)
		    in  %% Line 2359
			call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 2360
	      apply 'is_safe_simple'/2
		  (A, _cor1)
	  %% Line 2361
	  <{'c_call',_cor29,{'c_literal',_cor30,'erlang'},%% Line 2362
							  {'c_literal',_cor31,'is_record'},_cor32},_X_Sub,_X_BoolVars> when 'true' ->
	      %% Line 2371
	      'false'
	  %% Line 2372
	  <{'c_call',_cor33,{'c_literal',_cor34,'erlang'},%% Line 2373
							  {'c_literal',_cor35,'is_function'},%% Line 2374
											     [A|[{'c_literal',_cor36,Arity}|[]]]},Sub,_X_BoolVars>
	      when let <_cor5> =
		    %% Line 2375
		    call 'erlang':'is_integer'
			(Arity)
		in  let <_cor6> =
			%% Line 2375
			call 'erlang':'>='
			    (Arity, 0)
		    in  %% Line 2375
			call 'erlang':'and'
			    (_cor5, _cor6) ->
	      %% Line 2376
	      apply 'is_safe_simple'/2
		  (A, _cor1)
	  %% Line 2377
	  <{'c_call',_cor37,{'c_literal',_cor38,'erlang'},%% Line 2378
							  {'c_literal',_cor39,'is_function'},_cor40},_X_Sub,_X_BoolVars> when 'true' ->
	      %% Line 2380
	      'false'
	  %% Line 2381
	  <{'c_call',_cor41,{'c_literal',_cor42,'erlang'},%% Line 2382
							  {'c_literal',_cor43,Name},Args},Sub,BoolVars> when 'true' ->
	      let <NumArgs> =
		  %% Line 2384
		  call 'erlang':'length'
		      (Args)
	      in  let <_5747> =
		      %% Line 2385
		      call 'erl_internal':'comp_op'
			  (Name, NumArgs)
		  in  let <_cor11> =
			  %% Line 2385
			  ( case _5747 of
			      ( <( 'true'
				   -| ['compiler_generated'] )> when 'true' ->
				    'true'
				-| ['compiler_generated'] )
			      ( <( 'false'
				   -| ['compiler_generated'] )> when 'true' ->
				    %% Line 2386
				    call 'erl_internal':'new_type_test'
					(Name, NumArgs)
				-| ['compiler_generated'] )
			      ( <_cor9> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {( 'badarg'
						-| ['compiler_generated'] ),_5747}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      in  let <_cor13> =
			      %% Line 2386
			      ( case _cor11 of
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					let <_cor4> =
					    fun (_14689) ->
						apply 'is_safe_simple'/2
						    (_14689, _cor1)
					in  call 'lists':'all'
						(_cor4, Args)
				    -| ['compiler_generated'] )
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					'false'
				    -| ['compiler_generated'] )
				  ( <_cor8> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {( 'badarg'
						    -| ['compiler_generated'] ),_cor11}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  in  %% Line 2385
			      case _cor13 of
				%% Line 2388
				<'true'> when 'true' ->
				    %% Line 2389
				    'true'
				%% Line 2390
				<'false'> when 'true' ->
				    let <_616> =
					%% Line 2392
					call 'erl_internal':'bool_op'
					    (Name, NumArgs)
				    in  %% Line 2392
					( case _616 of
					    ( <( 'true'
						 -| ['compiler_generated'] )> when 'true' ->
						  %% Line 2393
						  apply 'is_safe_bool_expr_list'/3
						      (Args, _cor1, _cor0)
					      -| ['compiler_generated'] )
					    ( <( 'false'
						 -| ['compiler_generated'] )> when 'true' ->
						  'false'
					      -| ['compiler_generated'] )
					    ( <_cor14> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {( 'badarg'
							      -| ['compiler_generated'] ),_616}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				( <_cor16> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor13})
				  -| ['compiler_generated'] )
			      end
	  %% Line 2395
	  <{'c_let',_cor44,Vars,Arg,B},Sub,BoolVars> when 'true' ->
	      let <_490> =
		  %% Line 2396
		  apply 'is_safe_simple'/2
		      (Arg, _cor1)
	      in  %% Line 2396
		  case _490 of
		    %% Line 2397
		    <'true'> when 'true' ->
			let <_cor17> =
			    %% Line 2398
			    apply 'is_safe_bool_expr_1'/3
				(Arg, _cor1, _cor0)
			in  %% Line 2398
			    case <_cor17,Vars> of
			      %% Line 2399
			      <'true',[{'c_var',_cor45,V}|[]]> when 'true' ->
				  let <_cor18> =
				      %% Line 2400
				      call 'gb_sets':'add'
					  (V, _cor0)
				  in  %% Line 2400
				      apply 'is_safe_bool_expr_1'/3
					  (B, _cor1, _cor18)
			      %% Line 2401
			      <'false',_cor46> when 'true' ->
				  %% Line 2402
				  apply 'is_safe_bool_expr_1'/3
				      (B, _cor1, _cor0)
			      ( <_fol821,_fol822> when 'true' ->
				    let <_cor19> = {_cor17,Vars}
				    in  primop 'match_fail'
					    ({'case_clause',_cor19})
				-| ['compiler_generated'] )
			    end
		    %% Line 2404
		    <'false'> when 'true' ->
			'false'
		    ( <_cor20> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_490})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2406
	  <{'c_literal',_cor47,Val},_X_Sub,_cor48> when 'true' ->
	      %% Line 2407
	      call 'erlang':'is_boolean'
		  (Val)
	  %% Line 2408
	  <{'c_var',_cor49,V},_X_Sub,BoolVars> when 'true' ->
	      %% Line 2409
	      call 'gb_sets':'is_element'
		  (V, _cor0)
	  %% Line 2410
	  <_cor50,_cor51,_cor52> when 'true' ->
	      'false'
	end
'is_safe_bool_expr_list'/3 =
    %% Line 2412
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[C|Cs],Sub,BoolVars> when 'true' ->
	      let <_13966> =
		  %% Line 2413
		  apply 'is_safe_bool_expr_1'/3
		      (C, _cor1, _cor0)
	      in  %% Line 2413
		  case _13966 of
		    %% Line 2414
		    <'true'> when 'true' ->
			apply 'is_safe_bool_expr_list'/3
			    (Cs, _cor1, _cor0)
		    %% Line 2415
		    <'false'> when 'true' ->
			'false'
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_13966})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2417
	  <[],_cor7,_cor8> when 'true' ->
	      'true'
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'is_safe_bool_expr_list',3}}] )
	    -| ['compiler_generated'] )
	end
'tuple_to_values'/2 =
    %% Line 2423
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'c_tuple',_cor48,Es},Arity>
	      when try
		    let <_cor2> =
			call 'erlang':'length'
			    (Es)
		    in  call 'erlang':'=:='
			    (_cor2, _cor0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2424
	      call 'core_lib':'make_values'
		  (Es)
	  %% Line 2425
	  <Lit = {'c_literal',_cor49,Tuple},Arity>
	      when try
		    let <_cor3> =
			call 'erlang':'tuple_size'
			    (Tuple)
		    in  call 'erlang':'=:='
			    (_cor3, _cor0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor12> =
		  %% Line 2426
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor7) ->
				case _cor7 of
				  <[E|_cor5]> when 'true' ->
				      let <_cor10> =
					  call 'erlang':'setelement'
					      (3, _cor1, E)
				      in  let <_cor11> =
					      apply 'lc$^0'/1
						  (_cor5)
					  in  ( [_cor10|_cor11]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_13431> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor7})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor6> =
			    call 'erlang':'tuple_to_list'
				(Tuple)
			in  case _cor6 of
			      <[E|_cor5]> when 'true' ->
				  let <_cor10> =
				      call 'erlang':'setelement'
					  (3, _cor1, E)
				  in  let <_cor11> =
					  apply 'lc$^0'/1
					      (_cor5)
				      in  ( [_cor10|_cor11]
					    -| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_13431> when 'true' ->
				    primop 'match_fail'
					({'function_clause',_cor6})
				-| ['compiler_generated'] )
			    end
		    -| ['list_comprehension'] )
	      in  %% Line 2427
		  call 'core_lib':'make_values'
		      (_cor12)
	  %% Line 2428
	  <Case = {'c_case',_cor53,_cor54,Cs0},Arity> when 'true' ->
	      let <_cor19> =
		  %% Line 2429
		  ( letrec
			'lc$^1'/1 =
			    fun (_cor16) ->
				case _cor16 of
				  <[E|_cor15]> when 'true' ->
				      let <_cor17> =
					  apply 'tuple_to_values'/2
					      (E, _cor0)
				      in  let <_cor18> =
					      apply 'lc$^1'/1
						  (_cor15)
					  in  ( [_cor17|_cor18]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_16280> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor16})
					  -| [{'function_name',{'lc$^1',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  case Cs0 of
			  <[E|_cor15]> when 'true' ->
			      let <_cor17> =
				  apply 'tuple_to_values'/2
				      (E, _cor0)
			      in  let <_cor18> =
				      apply 'lc$^1'/1
					  (_cor15)
				  in  ( [_cor17|_cor18]
					-| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_16280> when 'true' ->
				primop 'match_fail'
				    ({'function_clause',Cs0})
			    -| ['compiler_generated'] )
			end
		    -| ['list_comprehension'] )
	      in  %% Line 2430
		  call 'erlang':'setelement'
		      (4, _cor1, _cor19)
	  %% Line 2431
	  <Seq = {'c_seq',_cor59,_cor60,B0},Arity> when 'true' ->
	      let <_rec144> =
		  %% Line 2432
		  apply 'tuple_to_values'/2
		      (B0, _cor0)
	      in  %% Line 2432
		  call 'erlang':'setelement'
		      (4, _cor1, _rec144)
	  %% Line 2433
	  <Let = {'c_let',_cor65,_cor66,_cor67,B0},Arity> when 'true' ->
	      let <_rec146> =
		  %% Line 2434
		  apply 'tuple_to_values'/2
		      (B0, _cor0)
	      in  %% Line 2434
		  call 'erlang':'setelement'
		      (5, _cor1, _rec146)
	  %% Line 2435
	  <Rec = {'c_receive',_cor73,Cs0,Timeout,A0},Arity> when 'true' ->
	      let <_cor34> =
		  %% Line 2436
		  ( letrec
			'lc$^2'/1 =
			    fun (_cor31) ->
				case _cor31 of
				  <[E|_cor30]> when 'true' ->
				      let <_cor32> =
					  apply 'tuple_to_values'/2
					      (E, _cor0)
				      in  let <_cor33> =
					      apply 'lc$^2'/1
						  (_cor30)
					  in  ( [_cor32|_cor33]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_17318> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor31})
					  -| [{'function_name',{'lc$^2',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  case Cs0 of
			  <[E|_cor30]> when 'true' ->
			      let <_cor32> =
				  apply 'tuple_to_values'/2
				      (E, _cor0)
			      in  let <_cor33> =
				      apply 'lc$^2'/1
					  (_cor30)
				  in  ( [_cor32|_cor33]
					-| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_17318> when 'true' ->
				primop 'match_fail'
				    ({'function_clause',Cs0})
			    -| ['compiler_generated'] )
			end
		    -| ['list_comprehension'] )
	      in  let <_cor37> =
		      %% Line 2437
		      case Timeout of
			%% Line 2438
			<{'c_literal',_cor74,'infinity'}> when 'true' ->
			    A0
			%% Line 2439
			<_cor75> when 'true' ->
			    apply 'tuple_to_values'/2
				(A0, _cor0)
		      end
		  in  let <_cor40> =
			  %% Line 2441
			  call 'erlang':'setelement'
			      (5, _cor1, _cor37)
		      in  %% Line 2441
			  call 'erlang':'setelement'
			      (3, _cor40, _cor34)
	  %% Line 2442
	  <Clause = {'c_clause',_cor81,_cor82,_cor83,B0},Arity> when 'true' ->
	      let <B> =
		  %% Line 2443
		  apply 'tuple_to_values'/2
		      (B0, _cor0)
	      in  %% Line 2444
		  call 'erlang':'setelement'
		      (5, _cor1, B)
	  %% Line 2445
	  <Expr,_cor89> when 'true' ->
	      let <_10597> =
		  %% Line 2446
		  apply 'will_fail'/1
		      (_cor1)
	      in  %% Line 2446
		  case _10597 of
		    %% Line 2447
		    <'true'> when 'true' ->
			_cor1
		    %% Line 2448
		    <'false'> when 'true' ->
			call 'erlang':'error'
			    ({'not_handled',_cor1})
		    ( <_cor45> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_10597})
		      -| ['compiler_generated'] )
		  end
	end
'simplify_let'/2 =
    %% Line 2456
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Let0 = {'c_let',_cor9,_cor10,Arg0,_cor11},Sub> when 'true' ->
	      let <Arg> =
		  %% Line 2457
		  apply 'opt_bool_case'/1
		      (Arg0)
	      in  let <_cor5> =
		      %% Line 2458
		      call 'erlang':'setelement'
			  (4, _cor1, Arg)
		  in  %% Line 2459
		      apply 'move_let_into_expr'/3
			  (_cor5, Arg, _cor0)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'simplify_let',2}}] )
	    -| ['compiler_generated'] )
	end
'move_let_into_expr'/3 =
    %% Line 2461
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Inner = {'c_let',_cor81,InnerVs0,_cor82,InnerBody0},Outer = %% Line 2462
								       {'c_let',_cor83,OuterVs0,Arg0,OuterBody0},Sub0> when 'true' ->
	      let <Arg> =
		  %% Line 2474
		  apply 'body'/2
		      (Arg0, _cor0)
	      in  %% Line 2475
		  case _cor0 of
		    <{'sub',_cor84,_cor85,_cor86,_cor87}> when 'true' ->
			let <_cor6> =
			    call 'erlang':'setelement'
				(4, _cor0, [])
			in  let <ScopeSub0> =
				apply 'sub_subst_scope'/1
				    (_cor6)
			    in  let <_8521> =
				    %% Line 2476
				    apply 'pattern_list'/2
					(OuterVs0, ScopeSub0)
				in  %% Line 2476
				    case _8521 of
				      <{OuterVs,ScopeSub}> when 'true' ->
					  let <OuterBody> =
					      %% Line 2478
					      apply 'body'/2
						  (OuterBody0, ScopeSub)
					  in  let <_5035> =
						  %% Line 2480
						  apply 'pattern_list'/2
						      (InnerVs0, _cor0)
					      in  %% Line 2480
						  case _5035 of
						    <{InnerVs,Sub}> when 'true' ->
							let <InnerBody> =
							    %% Line 2481
							    apply 'body'/2
								(InnerBody0, Sub)
							in  let <_cor14> =
								%% Line 2483
								{'c_let',_cor81,InnerVs,OuterBody,InnerBody}
							    in  %% Line 2483
								{'c_let',_cor83,OuterVs,Arg,_cor14}
						    ( <_cor10> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_5035})
						      -| ['compiler_generated'] )
						  end
				      ( <_cor8> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_8521})
					-| ['compiler_generated'] )
				    end
		    ( <_cor88> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','sub'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 2484
	  <Let = {'c_let',_cor91,Lvs0,_cor92,Lbody0},Case = %% Line 2485
							    {'c_case',_cor93,Cexpr0,[Ca0|[Cb0|Cs]]},Sub0> when 'true' ->
	      let <_cor21> =
		  %% Line 2488
		  ( case <> of
		      ( <>
			    when call 'erlang':'=:='
				  (Cs,
				   []) ->
			    'true'
			-| ['compiler_generated'] )
		      ( <> when 'true' ->
			    %% Line 2489
			    case Cb0 of
			      %% Line 2490
			      <{'c_clause',_cor94,[{'c_var',_cor95,_cor96}|[]],{'c_literal',_cor97,'true'},_cor98}> when 'true' ->
				  'true'
			      %% Line 2491
			      <_cor99> when 'true' ->
				  'false'
			    end
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      in  %% Line 2552
		  case Ca0 of
		    <{'c_clause',_12968,_cor3,_cor4,B}> when 'true' ->
			let <_cor24> =
			    %% Line 2553
			    apply 'will_fail'/1
				(B)
			in  case Cb0 of
			      <{'c_clause',_9861,_fol1321,_fol1322,_fol1323}> when 'true' ->
				  let <_cor23> =
				      %% Line 2553
				      apply 'will_fail'/1
					  (_fol1323)
				  in  case <_cor21,_cor24,_cor23> of
					<'true','false','true'> when 'true' ->
					    let <Cexpr> =
						apply 'body'/2
						    (Cexpr0, _cor0)
					    in  case _cor0 of
						  <{'sub',_cor112,_cor113,_cor114,_cor115}> when 'true' ->
						      let <_cor37> =
							  call 'erlang':'setelement'
							      (4, _cor0, [])
						      in  let <ScopeSub0> =
							      apply 'sub_subst_scope'/1
								  (_cor37)
							  in  let <_14169> =
								  apply 'pattern_list'/2
								      (_cor3, ScopeSub0)
							      in  case _14169 of
								    <{CaVars,ScopeSub}> when 'true' ->
									let <G> =
									    apply 'guard'/2
										(_cor4, ScopeSub)
									in  let <B1> =
										apply 'body'/2
										    (B, ScopeSub)
									    in  let <_17900> =
										    apply 'let_substs'/3
											(Lvs0, B1, _cor0)
										in  case _17900 of
										      <{Lvs,B2,Sub1}> when 'true' ->
											  ( case ScopeSub of
											      ( <( {'sub',_cor117,_rec169,_cor118,_cor119}
												   -| ['compiler_generated'] )> when 'true' ->
												    ( case Sub1 of
													( <( {'sub',_cor121,_rec170,_cor122,_cor123}
													     -| ['compiler_generated'] )> when 'true' ->
													      let <_rec167> =
														  call 'gb_sets':'union'
														      (_rec169, _rec170)
													      in  let <_cor50> =
														      call 'erlang':'setelement'
															  (3, Sub1, _rec167)
														  in  let <Lbody> =
															  apply 'body'/2
															      (Lbody0, _cor50)
														      in  let <_rec171> =
															      call 'core_lib':'make_values'
																  (B2)
															  in  let <_cor56> =
																  {'c_let',_cor91,Lvs,_rec171,Lbody}
															      in  let <_cor60> =
																      {'c_clause',_12968,CaVars,G,_cor56}
																  in  let <Cb> =
																	  apply 'clause'/4
																	      (Cb0, Cexpr, 'value', _cor0)
																      in  let <_rec182> =
																	      [_cor60|[Cb|[]]]
																	  in  {'c_case',_cor93,Cexpr,_rec182}
													  -| ['compiler_generated'] )
													( <_cor124> when 'true' ->
													      ( call ( 'erlang'
														       -| ['compiler_generated'] ):( 'error'
																		     -| ['compiler_generated'] )
														    (( {'badrecord','sub'}
														       -| ['compiler_generated'] ))
														-| ['compiler_generated'] )
													  -| ['compiler_generated'] )
												      end
												      -| ['compiler_generated'] )
												-| ['compiler_generated'] )
											      ( <_cor120> when 'true' ->
												    ( call ( 'erlang'
													     -| ['compiler_generated'] ):( 'error'
																	   -| ['compiler_generated'] )
													  (( {'badrecord','sub'}
													     -| ['compiler_generated'] ))
												      -| ['compiler_generated'] )
												-| ['compiler_generated'] )
											    end
											    -| ['compiler_generated'] )
										      ( <_cor42> when 'true' ->
											    primop 'match_fail'
												({'badmatch',_17900})
											-| ['compiler_generated'] )
										    end
								    ( <_cor39> when 'true' ->
									  primop 'match_fail'
									      ({'badmatch',_14169})
								      -| ['compiler_generated'] )
								  end
						  ( <_cor116> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','sub'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
					<_cor133,_cor134,_cor135> when 'true' ->
					    'impossible'
				      end
			      ( <_11428> when 'true' ->
				    primop 'match_fail'
					({'function_clause',Cb0})
				-| ['compiler_generated'] )
			    end
		    ( <_9750> when 'true' ->
			  primop 'match_fail'
			      ({'function_clause',Ca0})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2531
	  <Let = {'c_let',_cor136,Lvs0,_cor137,Lbody0},Seq = %% Line 2532
							     {'c_seq',_cor138,Sarg0,Sbody0},Sub0> when 'true' ->
	      let <Sarg> =
		  %% Line 2544
		  apply 'body'/2
		      (Sarg0, _cor0)
	      in  let <Sbody1> =
		      %% Line 2545
		      apply 'body'/2
			  (Sbody0, _cor0)
		  in  let <_17732> =
			  %% Line 2546
			  apply 'let_substs'/3
			      (Lvs0, Sbody1, _cor0)
		      in  %% Line 2546
			  case _17732 of
			    <{Lvs,Sbody,Sub}> when 'true' ->
				let <Lbody> =
				    %% Line 2547
				    apply 'body'/2
					(Lbody0, Sub)
				in  let <_rec192> =
					%% Line 2548
					call 'core_lib':'make_values'
					    (Sbody)
				    in  let <_cor74> =
					    %% Line 2549
					    {'c_let',_cor136,Lvs,_rec192,Lbody}
					in  %% Line 2548
					    {'c_seq',_cor138,Sarg,_cor74}
			    ( <_cor69> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_17732})
			      -| ['compiler_generated'] )
			  end
	  %% Line 2550
	  <_X_Let,_X_Expr,_X_Sub> when 'true' ->
	      'impossible'
	end
'scope_add'/2 =
    %% Line 2555
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Vs,Sub = {'sub',_cor14,Scope0,_cor15,_cor16}> when 'true' ->
	      let <_cor8> =
		  %% Line 2556
		  fun (_cor5,_cor4) ->
		      case <_cor5,_cor4> of
			<V,S>
			    when let <_cor2> =
				  call 'erlang':'is_integer'
				      (_cor5)
			      in  let <_cor3> =
				      call 'erlang':'is_atom'
					  (_cor5)
				  in  call 'erlang':'or'
					  (_cor2, _cor3) ->
			    %% Line 2557
			    call 'gb_sets':'add'
				(_cor5, _cor4)
			( <_cor7,_cor6> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor5,_cor4})
				-| [{'function_name',{'-scope_add/2-fun-0-',2}}] )
			  -| ['compiler_generated'] )
		      end
	      in  let <Scope> =
		      %% Line 2556
		      call 'lists':'foldl'
			  (_cor8, Scope0, _cor1)
		  in  %% Line 2559
		      call 'erlang':'setelement'
			  (3, _cor0, Scope)
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'scope_add',2}}] )
	    -| ['compiler_generated'] )
	end
'opt_simple_let'/3 =
    %% Line 2565
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Let = {'c_let',_cor8,_cor9,Arg0,_cor10},Ctxt,Sub0> when 'true' ->
	      let <Arg> =
		  %% Line 2566
		  apply 'body'/3
		      (Arg0, 'value', _cor0)
	      in  let <_429> =
		      %% Line 2567
		      apply 'will_fail'/1
			  (Arg)
		  in  %% Line 2567
		      case _429 of
			%% Line 2568
			<'true'> when 'true' ->
			    Arg
			%% Line 2569
			<'false'> when 'true' ->
			    apply 'opt_simple_let_1'/4
				(_cor2, Arg, _cor1, _cor0)
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_429})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'opt_simple_let',3}}] )
	    -| ['compiler_generated'] )
	end
'opt_simple_let_1'/4 =
    %% Line 2572
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Let = {'c_let',_cor15,Vs0,_cor16,B0},Arg0,Ctxt,Sub0> when 'true' ->
	      let <_12166> =
		  %% Line 2574
		  apply 'let_substs'/3
		      (Vs0, _cor2, _cor0)
	      in  %% Line 2574
		  case _12166 of
		    <{Vs,Args,Sub1}> when 'true' ->
			let <_cor7> =
			    %% Line 2575
			    case <Vs,Args> of
			      %% Line 2576
			      <[V|[]],[A|[]]> when 'true' ->
				  let <_886> =
				      %% Line 2577
				      apply 'is_bool_expr'/2
					  (A, _cor0)
				  in  %% Line 2577
				      case _886 of
					%% Line 2578
					<'true'> when 'true' ->
					    %% Line 2579
					    apply 'update_types'/3
						(V, [{'c_literal',[],'true'}], Sub1)
					%% Line 2580
					<'false'> when 'true' ->
					    Sub1
					( <_cor5> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_886})
					  -| ['compiler_generated'] )
				      end
			      %% Line 2583
			      <_cor17,_cor18> when 'true' ->
				  Sub1
			    end
			in  let <B> =
				%% Line 2585
				apply 'body'/3
				    (B0, _cor1, _cor7)
			    in  let <Arg> =
				    %% Line 2586
				    call 'core_lib':'make_values'
					(Args)
				in  %% Line 2587
				    apply 'opt_simple_let_2'/6
					(_cor3, Vs, Arg, B, _cor1, Sub1)
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_12166})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'opt_simple_let_1',4}}] )
	    -| ['compiler_generated'] )
	end
'opt_simple_let_2'/6 =
    %% Line 2589
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Let0,Vs0,Arg0,Body0,'effect',Sub> when 'true' ->
	      %% Line 2590
	      case <_cor4,_cor3,_cor2> of
		%% Line 2591
		<[],{'c_values',_cor29,[]},Body> when 'true' ->
		    _cor2
		%% Line 2594
		<[_cor30|_cor31],Arg,{'c_literal',_cor32,_cor33}> when 'true' ->
		    let <_cor6> =
			%% Line 2598
			apply 'sub_new_preserve_types'/1
			    (_cor0)
		    in  %% Line 2598
			apply 'body'/3
			    (_cor3, 'effect', _cor6)
		%% Line 2599
		<Vs,Arg,Body> when 'true' ->
		    let <_15858> =
			%% Line 2605
			apply 'is_any_var_used'/2
			    (_cor4, _cor2)
		    in  %% Line 2605
			case _15858 of
			  %% Line 2606
			  <'false'> when 'true' ->
			      let <_cor7> =
				  %% Line 2607
				  apply 'sub_new_preserve_types'/1
				      (_cor0)
			      in  %% Line 2607
				  apply 'expr'/3
				      ({'c_seq',[],_cor3,_cor2}, 'effect', _cor7)
			  %% Line 2608
			  <'true'> when 'true' ->
			      %% Line 2609
			      case _cor5 of
				<{'c_let',_rec200,_rec201,_rec202,_rec203}> when 'true' ->
				    let <_cor10> =
					{'c_let',_rec200,_cor4,_cor3,_cor2}
				    in  let <_cor12> =
					    %% Line 2610
					    apply 'opt_case_in_let'/1
						(_cor10)
					in  %% Line 2610
					    apply 'opt_case_in_let_arg'/3
						(_cor12, 'effect', _cor0)
				( <_cor34> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','c_let'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  ( <_cor13> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_15858})
			    -| ['compiler_generated'] )
			end
	      end
	  %% Line 2613
	  <Let,Vs0,Arg0,Body,'value',Sub> when 'true' ->
	      %% Line 2614
	      case <_cor4,_cor3,_cor2> of
		%% Line 2615
		<[{'c_var',_cor35,N1}|[]],Arg,{'c_var',_cor36,N2}> when 'true' ->
		    %% Line 2616
		    case <> of
		      %% Line 2617
		      <>
			  when call 'erlang':'=:='
				(N1,
				 N2) ->
			  _cor3
		      %% Line 2620
		      <> when 'true' ->
			  let <_cor15> =
			      %% Line 2622
			      apply 'sub_new_preserve_types'/1
				  (_cor0)
			  in  %% Line 2622
			      apply 'expr'/3
				  ({'c_seq',[],_cor3,_cor2}, 'value', _cor15)
		    end
		%% Line 2624
		<[],{'c_values',_cor37,[]},_cor38> when 'true' ->
		    _cor2
		%% Line 2627
		<_cor39,Arg,{'c_literal',_cor40,_cor41}> when 'true' ->
		    let <_cor17> =
			%% Line 2630
			apply 'sub_new_preserve_types'/1
			    (_cor0)
		    in  %% Line 2630
			apply 'expr'/3
			    ({'c_seq',[],_cor3,_cor2}, 'value', _cor17)
		%% Line 2631
		<Vs,Arg,_cor42> when 'true' ->
		    %% Line 2633
		    case _cor5 of
		      <{'c_let',_rec205,_rec206,_rec207,_rec208}> when 'true' ->
			  let <_cor20> =
			      {'c_let',_rec205,_cor4,_cor3,_cor2}
			  in  let <_cor21> =
				  apply 'opt_case_in_let'/1
				      (_cor20)
			      in  apply 'opt_case_in_let_arg'/3
				      (_cor21, %% Line 2634
					       'value', _cor0)
		      ( <_cor43> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','c_let'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
	      end
	  ( <_cor28,_cor27,_cor26,_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'opt_simple_let_2',6}}] )
	    -| ['compiler_generated'] )
	end
'move_case_into_arg'/2 =
    %% Line 2637
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Inner = {'c_case',_cor42,Outer = {'c_let',_cor43,OuterVars0,OuterArg,InnerArg0},InnerClauses},Sub> when 'true' ->
	      %% Line 2650
	      case _cor0 of
		<{'sub',_cor44,_cor45,_cor46,_cor47}> when 'true' ->
		    let <_cor4> =
			call 'erlang':'setelement'
			    (4, _cor0, [])
		    in  let <ScopeSub0> =
			    apply 'sub_subst_scope'/1
				(_cor4)
			in  let <_17734> =
				%% Line 2651
				apply 'pattern_list'/2
				    (OuterVars0, ScopeSub0)
			    in  %% Line 2651
				case _17734 of
				  <{OuterVars,ScopeSub}> when 'true' ->
				      let <InnerArg> =
					  %% Line 2652
					  apply 'body'/2
					      (InnerArg0, ScopeSub)
				      in  let <_cor10> =
					      %% Line 2654
					      {'c_case',_cor42,InnerArg,InnerClauses}
					  in  %% Line 2654
					      {'c_let',_cor43,OuterVars,OuterArg,_cor10}
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_17734})
				    -| ['compiler_generated'] )
				end
		( <_cor48> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','sub'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 2655
	  <Inner0 = {'c_case',_cor51,Outer = {'c_case',_cor52,OuterArg,%% Line 2656
								       [OuterCa0|[OuterCb|[]]]},InnerClauses},Sub> when 'true' ->
	      case OuterCb of
		<{'c_clause',_cor2,_cor3,_cor4,B}> when 'true' ->
		    let <_244> =
			apply 'will_fail'/1
			    (B)
		    in  %% Line 2658
			case _244 of
			  %% Line 2659
			  <'true'> when 'true' ->
			      %% Line 2661
			      case OuterCa0 of
				<{'c_clause',_cor53,OuterPats0,OuterGuard0,InnerArg0}> when 'true' ->
				    %% Line 2679
				    case _cor0 of
				      <{'sub',_cor54,_cor55,_cor56,_cor57}> when 'true' ->
					  let <_cor17> =
					      call 'erlang':'setelement'
						  (4, _cor0, [])
					  in  let <ScopeSub0> =
						  apply 'sub_subst_scope'/1
						      (_cor17)
					      in  let <_11042> =
						      %% Line 2680
						      apply 'pattern_list'/2
							  (OuterPats0, ScopeSub0)
						  in  %% Line 2680
						      case _11042 of
							<{OuterPats,ScopeSub}> when 'true' ->
							    let <OuterGuard> =
								%% Line 2681
								apply 'guard'/2
								    (OuterGuard0, ScopeSub)
							    in  let <InnerArg> =
								    %% Line 2682
								    apply 'body'/2
									(InnerArg0, ScopeSub)
								in  let <_cor24> =
									%% Line 2683
									{'c_case',_cor51,InnerArg,InnerClauses}
								    in  let <_cor28> =
									    %% Line 2685
									    {'c_clause',_cor53,OuterPats,OuterGuard,_cor24}
									in  let <_rec230> =
										%% Line 2687
										[_cor28|[OuterCb|[]]]
									    in  %% Line 2687
										{'c_case',_cor52,OuterArg,_rec230}
							( <_cor19> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_11042})
							  -| ['compiler_generated'] )
						      end
				      ( <_cor58> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','sub'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				( <_cor14> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',OuterCa0})
				  -| ['compiler_generated'] )
			      end
			  %% Line 2688
			  <'false'> when 'true' ->
			      %% Line 2689
			      'impossible'
			  ( <_cor33> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_244})
			    -| ['compiler_generated'] )
			end
		( <_18119> when 'true' ->
		      primop 'match_fail'
			  ({'function_clause',OuterCb})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2691
	  <Inner = {'c_case',_cor62,Outer = {'c_seq',_cor63,OuterArg,InnerArg},InnerClauses},_X_Sub> when 'true' ->
	      let <_cor36> =
		  %% Line 2704
		  {'c_case',_cor62,InnerArg,InnerClauses}
	      in  %% Line 2704
		  {'c_seq',_cor63,OuterArg,_cor36}
	  %% Line 2705
	  <_cor66,_cor67> when 'true' ->
	      %% Line 2706
	      'impossible'
	end
'opt_case_in_let_arg'/3 =
    %% Line 2731
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Let = {'c_let',_cor6,_cor7,Case = {'c_case',_cor8,_cor9,_cor10},_cor11},Ctxt,Sub = %% Line 2732
											      {'sub',_cor12,_cor13,_cor14,'true'}> when 'true' ->
	      %% Line 2733
	      apply 'opt_case_in_let_arg_1'/4
		  (_cor2, Case, _cor1, _cor0)
	  %% Line 2734
	  <Let,_cor15,_cor16> when 'true' ->
	      _cor2
	end
'opt_case_in_let_arg_1'/4 =
    %% Line 2736
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Let0,Case0 = {'c_case',_cor32,{'c_values',_cor33,[]},Cs},Ctxt,Sub> when 'true' ->
	      let <Let> =
		  %% Line 3068
		  call 'cerl_trees':'map'
		      ('mark_compiler_generated_1'/1, _cor3)
	      in  %% Line 2739
		  case Cs of
		    %% Line 2740
		    <[Ca0 = {'c_clause',_cor34,_cor35,_cor36,BodyA = {'c_literal',_cor37,_cor38}}|%% Line 2741
												  [Cb0 = {'c_clause',_cor39,_cor40,_cor41,BodyB = {'c_literal',_cor42,_cor43}}|[]]]> when 'true' ->
			%% Line 2742
			case Let of
			  <{'c_let',_cor44,_cor45,_cor46,_cor47}> when 'true' ->
			      let <_cor7> =
				  call 'erlang':'setelement'
				      (4, Let, BodyA)
			      in  let <_cor11> =
				      call 'erlang':'setelement'
					  (5, Ca0, _cor7)
				  in  let <_cor15> =
					  %% Line 2743
					  call 'erlang':'setelement'
					      (4, Let, BodyB)
				      in  let <_cor19> =
					      %% Line 2743
					      call 'erlang':'setelement'
						  (5, Cb0, _cor15)
					  in  let <_rec250> =
						  %% Line 2744
						  [_cor11|[_cor19|[]]]
					      in  let <_cor24> =
						      %% Line 2744
						      call 'erlang':'setelement'
							  (4, _cor2, _rec250)
						  in  let <_cor26> =
							  %% Line 2745
							  apply 'sub_new_preserve_types'/1
							      (_cor0)
						      in  %% Line 2745
							  apply 'expr'/3
							      (_cor24, _cor1, _cor26)
			  ( <_cor48> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','c_let'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    %% Line 2746
		    <_cor68> when 'true' ->
			Let
		  end
	  %% Line 2748
	  <Let,_cor69,_cor70,_cor71> when 'true' ->
	      _cor3
	end
'is_any_var_used'/2 =
    %% Line 2750
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'c_var',_cor5,V}|Vs],Expr> when 'true' ->
	      let <_8287> =
		  %% Line 2751
		  call 'core_lib':'is_var_used'
		      (V, _cor0)
	      in  %% Line 2751
		  case _8287 of
		    %% Line 2752
		    <'false'> when 'true' ->
			apply 'is_any_var_used'/2
			    (Vs, _cor0)
		    %% Line 2753
		    <'true'> when 'true' ->
			'true'
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_8287})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2755
	  <[],_cor6> when 'true' ->
	      'false'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'is_any_var_used',2}}] )
	    -| ['compiler_generated'] )
	end
'is_boolean_type'/2 =
    %% Line 2757
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <V,{'sub',_cor5,_cor6,Tdb,_cor7}> when 'true' ->
	      %% Line 2758
	      case call 'orddict':'find'
		       (_cor1, Tdb) of
		%% Line 2759
		<{'ok','bool'}> when 'true' ->
		    'true'
		%% Line 2760
		<_cor8> when 'true' ->
		    'false'
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'is_boolean_type',2}}] )
	    -| ['compiler_generated'] )
	end
'update_types'/3 =
    %% Line 2765
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Expr,Pat,Sub = {'sub',_cor9,_cor10,Tdb0,_cor11}> when 'true' ->
	      let <Tdb> =
		  %% Line 2766
		  apply 'update_types_1'/3
		      (_cor2, _cor1, Tdb0)
	      in  %% Line 2767
		  call 'erlang':'setelement'
		      (4, _cor0, Tdb)
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'update_types',3}}] )
	    -| ['compiler_generated'] )
	end
'update_types_1'/3 =
    %% Line 2769
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'c_var',Anno,V},Pat,Types> when 'true' ->
	      let <_8251> =
		  %% Line 2770
		  call 'lists':'member'
		      ('reuse_for_context', Anno)
	      in  %% Line 2770
		  case _8251 of
		    %% Line 2771
		    <'true'> when 'true' ->
			%% Line 2774
			apply 'kill_types'/2
			    (V, _cor0)
		    %% Line 2775
		    <'false'> when 'true' ->
			%% Line 2776
			apply 'update_types_2'/3
			    (V, _cor1, _cor0)
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_8251})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2778
	  <_cor7,_cor8,Types> when 'true' ->
	      _cor0
	end
'update_types_2'/3 =
    %% Line 2780
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <V,[P = {'c_tuple',_cor6,_cor7}|[]],Types> when 'true' ->
	      %% Line 2781
	      call 'orddict':'store'
		  (_cor2, P, _cor0)
	  %% Line 2782
	  <V,[{'c_literal',_cor8,Bool}|[]],Types>
	      when call 'erlang':'is_boolean'
		    (Bool) ->
	      %% Line 2783
	      call 'orddict':'store'
		  (_cor2, 'bool', _cor0)
	  %% Line 2784
	  <_cor9,_cor10,Types> when 'true' ->
	      _cor0
	end
'kill_types'/2 =
    %% Line 2790
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <V,[{_cor7,_cor8}|Tdb]>
	      when call 'erlang':'=:='
		    (_cor7,
		     _cor1) ->
	      %% Line 2791
	      apply 'kill_types'/2
		  (_cor1, Tdb)
	  %% Line 2792
	  <V,[Entry = {_cor9,Tuple = {'c_tuple',_cor10,_cor11}}|Tdb]> when 'true' ->
	      let <_15323> =
		  %% Line 2793
		  call 'core_lib':'is_var_used'
		      (_cor1, Tuple)
	      in  %% Line 2793
		  case _15323 of
		    %% Line 2794
		    <'false'> when 'true' ->
			let <_cor2> =
			    apply 'kill_types'/2
				(_cor1, Tdb)
			in  [Entry|_cor2]
		    %% Line 2795
		    <'true'> when 'true' ->
			apply 'kill_types'/2
			    (_cor1, Tdb)
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_15323})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2797
	  <V,[Entry = {_cor12,Atom}|Tdb]>
	      when call 'erlang':'is_atom'
		    (Atom) ->
	      let <_cor4> =
		  %% Line 2798
		  apply 'kill_types'/2
		      (_cor1, Tdb)
	      in  %% Line 2798
		  [Entry|_cor4]
	  %% Line 2799
	  <_cor13,[]> when 'true' ->
	      []
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'kill_types',2}}] )
	    -| ['compiler_generated'] )
	end
'copy_type'/3 =
    %% Line 2804
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <V,{'c_var',_cor7,Src},Tdb> when 'true' ->
	      let <_13071> =
		  %% Line 2805
		  call 'orddict':'find'
		      (Src, _cor0)
	      in  %% Line 2805
		  case _13071 of
		    %% Line 2806
		    <{'ok',Type}> when 'true' ->
			call 'orddict':'store'
			    (_cor2, Type, _cor0)
		    %% Line 2807
		    <'error'> when 'true' ->
			_cor0
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_13071})
		      -| ['compiler_generated'] )
		  end
	  %% Line 2809
	  <_cor8,_cor9,Tdb> when 'true' ->
	      _cor0
	end
'bsm_an'/1 =
    %% Line 2819
    fun (_cor0) ->
	case _cor0 of
	  <Case = {'c_case',_cor2,V = {'c_var',_cor3,_cor4},_cor5}> when 'true' ->
	      %% Line 2820
	      apply 'bsm_an_1'/2
		  ([V|[]], _cor0)
	  %% Line 2821
	  <Case = {'c_case',_cor6,{'c_values',_cor7,Es},_cor8}> when 'true' ->
	      %% Line 2822
	      apply 'bsm_an_1'/2
		  (Es, _cor0)
	  %% Line 2823
	  <Other> when 'true' ->
	      _cor0
	end
'bsm_an_1'/2 =
    %% Line 2825
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Vs,Case = {'c_case',_cor5,_cor6,Cs}> when 'true' ->
	      let <_2826> =
		  %% Line 2929
		  apply 'bsm_leftmost_1'/2
		      (Cs, 'none')
	      in  %% Line 2826
		  case _2826 of
		    %% Line 2827
		    <'none'> when 'true' ->
			_cor0
		    %% Line 2828
		    <Pos> when 'true' ->
			apply 'bsm_an_2'/4
			    (_cor1, Cs, _cor0, _2826)
		  end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'bsm_an_1',2}}] )
	    -| ['compiler_generated'] )
	end
'bsm_an_2'/4 =
    %% Line 2831
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_12320> =
	    %% Line 2832
	    apply 'bsm_nonempty'/2
		(_cor2, _cor0)
	in  %% Line 2832
	    case _12320 of
	      %% Line 2833
	      <'true'> when 'true' ->
		  apply 'bsm_an_3'/4
		      (_cor3, _cor2, _cor1, _cor0)
	      %% Line 2834
	      <'false'> when 'true' ->
		  _cor1
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_12320})
		-| ['compiler_generated'] )
	    end
'bsm_an_3'/4 =
    %% Line 2837
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2838
	try
	    do  %% Line 2839
		apply 'bsm_ensure_no_partition'/2
		    (_cor2, _cor0)
		%% Line 2840
		apply 'bsm_do_an'/4
		    (_cor3, _cor0, _cor2, _cor1)
	of <_cor4> ->
	    _cor4
	catch <_cor7,_cor6,_cor5> ->
	    case <_cor7,_cor6,_cor5> of
	      %% Line 2842
	      <'throw',{'problem',Where,What},_cor12> when 'true' ->
		  do  %% Line 2843
		      apply 'add_bin_opt_info'/2
			  (Where, What)
		      _cor1
	      ( <_14796,_15367,_1505> when 'true' ->
		    primop 'raise'
			(_cor5, _cor6)
		-| ['compiler_generated'] )
	    end
'bsm_do_an'/4 =
    %% Line 2847
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_2009> =
	    %% Line 2848
	    call 'lists':'nth'
		(_cor2, _cor3)
	in  %% Line 2848
	    case _2009 of
	      %% Line 2849
	      <V0 = {'c_var',_cor20,Vname}> when 'true' ->
		  let <Cs> =
		      %% Line 2850
		      apply 'bsm_do_an_var'/4
			  (Vname, _cor2, _cor1, [])
		  in  let <V> =
			  %% Line 2851
			  apply 'bsm_annotate_for_reuse'/1
			      (_2009)
		      in  let <_cor6> =
			      %% Line 2852
			      call 'erlang':'-'
				  (_cor2, 1)
			  in  let <Bef> =
				  %% Line 2852
				  call 'lists':'sublist'
				      (_cor3, _cor6)
			      in  let <Aft> =
				      %% Line 2853
				      call 'lists':'nthtail'
					  (_cor2, _cor3)
				  in  let <_11911> =
					  %% Line 2854
					  call 'erlang':'++'
					      (Bef, [V|Aft])
				      in  %% Line 2854
					  case _11911 of
					    %% Line 2855
					    <[_cor21|[]]> when 'true' ->
						%% Line 2856
						case _cor0 of
						  <{'c_case',_rec254,_rec255,_rec256}> when 'true' ->
						      {'c_case',_rec254,V,Cs}
						  ( <_cor22> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','c_case'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
					    %% Line 2857
					    <Vs> when 'true' ->
						let <_rec257> = {%% Line 2858
						     'c_values',[],_11911}
						in  %% Line 2858
						    case _cor0 of
						      <{'c_case',_rec259,_rec260,_rec261}> when 'true' ->
							  {'c_case',_rec259,_rec257,Cs}
						      ( <_cor23> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','c_case'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
					  end
	      %% Line 2860
	      <_cor24> when 'true' ->
		  _cor0
	    end
'bsm_do_an_var'/4 =
    %% Line 2864
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <V,S,[C0 = {'c_clause',_cor22,Ps,G,B0}|Cs],Acc> when 'true' ->
	      let <_16778> =
		  %% Line 2865
		  call 'lists':'nth'
		      (_cor2, Ps)
	      in  %% Line 2865
		  case _16778 of
		    %% Line 2866
		    <{'c_var',_cor23,VarName}> when 'true' ->
			do  do  let <_5501> =
				    %% Line 2867
				    call 'core_lib':'is_var_used'
					(_cor3, G)
				in  %% Line 2867
				    case _5501 of
				      %% Line 2868
				      <'true'> when 'true' ->
					  %% Line 3061
					  call 'erlang':'throw'
					      ({'problem',C0,'orig_bin_var_used_in_guard'})
				      %% Line 2869
				      <'false'> when 'true' ->
					  'ok'
				      ( <_cor4> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_5501})
					-| ['compiler_generated'] )
				    end
				let <_8795> =
				    %% Line 2871
				    call 'core_lib':'is_var_used'
					(VarName, G)
				in  %% Line 2871
				    case _8795 of
				      %% Line 2872
				      <'true'> when 'true' ->
					  %% Line 3061
					  call 'erlang':'throw'
					      ({'problem',C0,'bin_var_used_in_guard'})
				      %% Line 2873
				      <'false'> when 'true' ->
					  'ok'
				      ( <_cor5> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_8795})
					-| ['compiler_generated'] )
				    end
			    let <B1> =
				%% Line 2875
				apply 'bsm_maybe_ctx_to_binary'/2
				    (VarName, B0)
			    in  let <B> =
				    %% Line 2876
				    apply 'bsm_maybe_ctx_to_binary'/2
					(_cor3, B1)
				in  let <_cor10> =
					%% Line 2877
					call 'erlang':'setelement'
					    (5, C0, B)
				    in  %% Line 2878
					apply 'bsm_do_an_var'/4
					    (_cor3, _cor2, Cs, [_cor10|_cor0])
		    %% Line 2879
		    <P = {'c_alias',_cor29,_cor30,_cor31}> when 'true' ->
			let <_157> =
			    %% Line 2880
			    apply 'bsm_could_match_binary'/1
				(_16778)
			in  %% Line 2880
			    case _157 of
			      %% Line 2881
			      <'false'> when 'true' ->
				  %% Line 2882
				  apply 'bsm_do_an_var'/4
				      (_cor3, _cor2, Cs, [C0|_cor0])
			      %% Line 2883
			      <'true'> when 'true' ->
				  %% Line 3061
				  call 'erlang':'throw'
				      ({'problem',C0,'bin_opt_alias'})
			      ( <_cor12> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_157})
				-| ['compiler_generated'] )
			    end
		    %% Line 2886
		    <P> when 'true' ->
			let <_16764> =
			    %% Line 2887
			    apply 'bsm_could_match_binary'/1
				(_16778)
			in  let <_cor15> =
				%% Line 2887
				( case _16764 of
				    ( <( 'true'
					 -| ['compiler_generated'] )> when 'true' ->
					  let <_6437> =
					      %% Line 2903
					      call 'core_lib':'is_var_used'
						  (_cor3, G)
					  in  %% Line 2903
					      ( case _6437 of
						  ( <( 'true'
						       -| ['compiler_generated'] )> when 'true' ->
							'true'
						    -| ['compiler_generated'] )
						  ( <( 'false'
						       -| ['compiler_generated'] )> when 'true' ->
							call 'core_lib':'is_var_used'
							    (_cor3, B0)
						    -| ['compiler_generated'] )
						  ( <_12432> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {( 'badarg'
								    -| ['compiler_generated'] ),_6437}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				    ( <( 'false'
					 -| ['compiler_generated'] )> when 'true' ->
					  'false'
				      -| ['compiler_generated'] )
				    ( <_cor13> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {( 'badarg'
						      -| ['compiler_generated'] ),_16764}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    in  %% Line 2887
				case _cor15 of
				  %% Line 2888
				  <'false'> when 'true' ->
				      %% Line 2889
				      apply 'bsm_do_an_var'/4
					  (_cor3, _cor2, Cs, [C0|_cor0])
				  %% Line 2890
				  <'true'> when 'true' ->
				      %% Line 3061
				      call 'erlang':'throw'
					  ({'problem',C0,'bin_var_used'})
				  ( <_cor16> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor15})
				    -| ['compiler_generated'] )
				end
		  end
	  %% Line 2894
	  <_cor32,_cor33,[],Acc> when 'true' ->
	      call 'lists':'reverse'
		  (_cor0)
	  ( <_cor21,_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'bsm_do_an_var',4}}] )
	    -| ['compiler_generated'] )
	end
'bsm_annotate_for_reuse'/1 =
    %% Line 2896
    fun (_cor0) ->
	case _cor0 of
	  <Var = {'c_var',Anno,_cor6}> when 'true' ->
	      let <_6727> =
		  %% Line 2897
		  call 'lists':'member'
		      ('reuse_for_context', Anno)
	      in  %% Line 2897
		  case _6727 of
		    %% Line 2898
		    <'false'> when 'true' ->
			let <_rec263> =
			    ['reuse_for_context'|Anno]
			in  call 'erlang':'setelement'
				(2, _cor0, _rec263)
		    %% Line 2899
		    <'true'> when 'true' ->
			_cor0
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_6727})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'bsm_annotate_for_reuse',1}}] )
	    -| ['compiler_generated'] )
	end
'bsm_maybe_ctx_to_binary'/2 =
    %% Line 2905
    fun (_cor1,_cor0) ->
	let <_16864> =
	    %% Line 2906
	    call 'core_lib':'is_var_used'
		(_cor1, _cor0)
	in  let <_cor5> =
		%% Line 2906
		( case _16864 of
		    ( <( 'true'
			 -| ['compiler_generated'] )> when 'true' ->
			  let <_cor3> =
			      apply 'previous_ctx_to_binary'/2
				  (_cor1, _cor0)
			  in  call 'erlang':'not'
				  (_cor3)
		      -| ['compiler_generated'] )
		    ( <( 'false'
			 -| ['compiler_generated'] )> when 'true' ->
			  'false'
		      -| ['compiler_generated'] )
		    ( <_cor2> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {( 'badarg'
				      -| ['compiler_generated'] ),_16864}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
		  -| ['compiler_generated'] )
	    in  %% Line 2906
		case _cor5 of
		  %% Line 2907
		  <'false'> when 'true' ->
		      _cor0
		  %% Line 2909
		  <'true'> when 'true' ->
		      %% Line 2910
		      {'c_seq',[],{'c_primop',[],{'c_literal',[],'bs_context_to_binary'},%% Line 2911
											 [{'c_var',[],_cor1}|[]]},_cor0}
		  ( <_cor6> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor5})
		    -| ['compiler_generated'] )
		end
'previous_ctx_to_binary'/2 =
    %% Line 2915
    fun (_cor1,_cor0) ->
	%% Line 2916
	case _cor0 of
	  %% Line 2917
	  <{'c_seq',_cor5,{'c_primop',_cor6,{'c_literal',_cor7,'bs_context_to_binary'},%% Line 2918
										       [{'c_var',_cor8,_cor9}|[]]},_cor10}>
	      when call 'erlang':'=:='
		    (_cor9,
		     _cor1) ->
	      %% Line 2919
	      'true'
	  %% Line 2920
	  <_cor11> when 'true' ->
	      %% Line 2921
	      'false'
	end
'bsm_leftmost_1'/2 =
    %% Line 2931
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'c_clause',_cor4,Ps,_cor5,_cor6}|Cs],Pos> when 'true' ->
	      %% Line 2932
	      apply 'bsm_leftmost_2'/4
		  (Ps, Cs, 1, _cor0)
	  %% Line 2933
	  <[],Pos> when 'true' ->
	      _cor0
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'bsm_leftmost_1',2}}] )
	    -| ['compiler_generated'] )
	end
'bsm_leftmost_2'/4 =
    %% Line 2935
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_cor9,Cs,Pos,_cor10>
	      when call 'erlang':'=:='
		    (_cor0,
		     _cor1) ->
	      %% Line 2936
	      apply 'bsm_leftmost_1'/2
		  (_cor2, _cor1)
	  %% Line 2937
	  <[{'c_binary',_cor11,_cor12}|_cor13],Cs,N,_cor14> when 'true' ->
	      %% Line 2938
	      apply 'bsm_leftmost_1'/2
		  (_cor2, _cor1)
	  %% Line 2939
	  <[_cor15|Ps],Cs,N,Pos> when 'true' ->
	      let <_cor4> =
		  %% Line 2940
		  call 'erlang':'+'
		      (_cor1, 1)
	      in  %% Line 2940
		  apply 'bsm_leftmost_2'/4
		      (Ps, _cor2, _cor4, _cor0)
	  %% Line 2941
	  <[],Cs,_cor16,Pos> when 'true' ->
	      %% Line 2942
	      apply 'bsm_leftmost_1'/2
		  (_cor2, _cor0)
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'bsm_leftmost_2',4}}] )
	    -| ['compiler_generated'] )
	end
'bsm_nonempty'/2 =
    %% Line 2948
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'c_clause',_cor5,Ps,_cor6,_cor7}|Cs],Pos> when 'true' ->
	      %% Line 2949
	      case call 'lists':'nth'
		       (_cor0, Ps) of
		%% Line 2950
		<{'c_binary',_cor8,[_cor9|_cor10]}> when 'true' ->
		    %% Line 2951
		    'true'
		%% Line 2952
		<_cor11> when 'true' ->
		    %% Line 2953
		    apply 'bsm_nonempty'/2
			(Cs, _cor0)
	      end
	  %% Line 2955
	  <[],_cor12> when 'true' ->
	      'false'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'bsm_nonempty',2}}] )
	    -| ['compiler_generated'] )
	end
'bsm_ensure_no_partition'/2 =
    %% Line 2972
    fun (_cor1,_cor0) ->
	%% Line 2973
	apply 'bsm_ensure_no_partition_1'/3
	    (_cor1, _cor0, 'before')
'bsm_ensure_no_partition_1'/3 =
    %% Line 2976
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'c_clause',_cor8,Ps,G,_cor9}|Cs],Pos,State0> when 'true' ->
	      let <State> =
		  %% Line 2977
		  apply 'bsm_ensure_no_partition_2'/5
		      (Ps, _cor1, G, 'simple_vars', _cor0)
	      in  do  %% Line 2978
		      case State of
			%% Line 2979
			<'after'> when 'true' ->
			    %% Line 2980
			    apply 'bsm_ensure_no_partition_after'/2
				(Cs, _cor1)
			%% Line 2981
			<_cor10> when 'true' ->
			    'ok'
		      end
		      %% Line 2984
		      apply 'bsm_ensure_no_partition_1'/3
			  (Cs, _cor1, State)
	  %% Line 2985
	  <[],_cor11,_cor12> when 'true' ->
	      'ok'
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'bsm_ensure_no_partition_1',3}}] )
	    -| ['compiler_generated'] )
	end
'bsm_ensure_no_partition_2'/5 =
    %% Line 2988
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Where = {'c_binary',_cor19,_cor20}|_cor21],1,_cor22,Vstate,State> when 'true' ->
	      %% Line 2989
	      case _cor0 of
		%% Line 2990
		<'before'>
		    when call 'erlang':'=:='
			  (_cor1,
			   'simple_vars') ->
		    'within'
		%% Line 2991
		<'before'> when 'true' ->
		    %% Line 3061
		    call 'erlang':'throw'
			({'problem',Where,_cor1})
		%% Line 2992
		<'within'>
		    when call 'erlang':'=:='
			  (_cor1,
			   'simple_vars') ->
		    'within'
		%% Line 2993
		<'within'> when 'true' ->
		    %% Line 3061
		    call 'erlang':'throw'
			({'problem',Where,_cor1})
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor0})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2995
	  <[Alias = {'c_alias',_cor23,_cor24,_cor25}|_cor26],1,N,Vstate,State> when 'true' ->
	      let <P> =
		  %% Line 3057
		  apply 'bsm_real_pattern'/1
		      (_cor25)
	      in  %% Line 2998
		  apply 'bsm_ensure_no_partition_2'/5
		      ([P|[]], 1, _cor2, _cor1, _cor0)
	  %% Line 2999
	  <[_cor27|_cor28],1,_cor29,_X_Vstate,State = 'before'> when 'true' ->
	      _cor0
	  %% Line 3002
	  <[P|_cor30],1,_cor31,Vstate,State> when 'true' ->
	      let <_5966> =
		  %% Line 3003
		  apply 'bsm_could_match_binary'/1
		      (P)
	      in  %% Line 3003
		  case _5966 of
		    %% Line 3004
		    <'false'> when 'true' ->
			%% Line 3020
			case _cor1 of
			  %% Line 3021
			  <'simple_vars'> when 'true' ->
			      _cor0
			  %% Line 3022
			  <_cor32> when 'true' ->
			      %% Line 3061
			      call 'erlang':'throw'
				  ({'problem',P,_cor1})
			end
		    %% Line 3024
		    <'true'> when 'true' ->
			%% Line 3027
			case _cor0 of
			  %% Line 3028
			  <'within'> when 'true' ->
			      'after'
			  %% Line 3029
			  <'after'> when 'true' ->
			      'after'
			  ( <_cor8> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor0})
			    -| ['compiler_generated'] )
			end
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_5966})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3032
	  <[{'c_var',_cor33,V}|Ps],N,G,Vstate,S> when 'true' ->
	      let <_7708> =
		  %% Line 3033
		  call 'core_lib':'is_var_used'
		      (V, _cor2)
	      in  %% Line 3033
		  case _7708 of
		    %% Line 3034
		    <'false'> when 'true' ->
			let <_cor10> =
			    %% Line 3035
			    call 'erlang':'-'
				(_cor3, 1)
			in  %% Line 3035
			    apply 'bsm_ensure_no_partition_2'/5
				(Ps, _cor10, _cor2, _cor1, _cor0)
		    %% Line 3036
		    <'true'> when 'true' ->
			let <_cor11> =
			    %% Line 3037
			    call 'erlang':'-'
				(_cor3, 1)
			in  %% Line 3037
			    apply 'bsm_ensure_no_partition_2'/5
				(Ps, _cor11, _cor2, 'bin_left_var_used_in_guard', _cor0)
		    ( <_cor12> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_7708})
		      -| ['compiler_generated'] )
		  end
	  %% Line 3039
	  <[_cor34|Ps],N,G,_cor35,S> when 'true' ->
	      let <_cor13> =
		  %% Line 3040
		  call 'erlang':'-'
		      (_cor3, 1)
	      in  %% Line 3040
		  apply 'bsm_ensure_no_partition_2'/5
		      (Ps, _cor13, _cor2, 'bin_argument_order', _cor0)
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'bsm_ensure_no_partition_2',5}}] )
	    -| ['compiler_generated'] )
	end
'bsm_ensure_no_partition_after'/2 =
    %% Line 3042
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'c_clause',_cor5,Ps,_cor6,_cor7}|Cs],Pos> when 'true' ->
	      let <_17419> =
		  %% Line 3043
		  call 'lists':'nth'
		      (_cor0, Ps)
	      in  %% Line 3043
		  case _17419 of
		    %% Line 3044
		    <{'c_var',_cor8,_cor9}> when 'true' ->
			%% Line 3045
			apply 'bsm_ensure_no_partition_after'/2
			    (Cs, _cor0)
		    %% Line 3046
		    <P> when 'true' ->
			%% Line 3061
			call 'erlang':'throw'
			    ({'problem',_17419,'bin_partition'})
		  end
	  %% Line 3049
	  <[],_cor10> when 'true' ->
	      'ok'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'bsm_ensure_no_partition_after',2}}] )
	    -| ['compiler_generated'] )
	end
'bsm_could_match_binary'/1 =
    %% Line 3051
    fun (_cor0) ->
	case _cor0 of
	  <{'c_alias',_cor2,_cor3,P}> when 'true' ->
	      apply 'bsm_could_match_binary'/1
		  (P)
	  %% Line 3052
	  <{'c_cons',_cor4,_cor5,_cor6}> when 'true' ->
	      'false'
	  %% Line 3053
	  <{'c_tuple',_cor7,_cor8}> when 'true' ->
	      'false'
	  %% Line 3054
	  <{'c_literal',_cor9,Lit}> when 'true' ->
	      call 'erlang':'is_bitstring'
		  (Lit)
	  %% Line 3055
	  <_cor10> when 'true' ->
	      'true'
	end
'bsm_real_pattern'/1 =
    %% Line 3057
    fun (_cor0) ->
	case _cor0 of
	  <{'c_alias',_cor2,_cor3,P}> when 'true' ->
	      apply 'bsm_real_pattern'/1
		  (P)
	  %% Line 3058
	  <P> when 'true' ->
	      _cor0
	end
'mark_compiler_generated_1'/1 =
    %% Line 3070
    fun (_cor0) ->
	case _cor0 of
	  <Term = {'c_call',Anno,_cor6,_cor7,_cor8}> when 'true' ->
	      let <_cor1> =
		  %% Line 3071
		  call 'erlang':'--'
		      (Anno, ['compiler_generated'])
	      in  let <_rec265> =
		      %% Line 3071
		      ['compiler_generated'|_cor1]
		  in  %% Line 3071
		      call 'erlang':'setelement'
			  (2, _cor0, _rec265)
	  %% Line 3072
	  <Term> when 'true' ->
	      _cor0
	end
'add_bin_opt_info'/2 =
    %% Line 3077
    fun (_cor1,_cor0) ->
	let <_9894> =
	    %% Line 3078
	    call 'erlang':'get'
		('bin_opt_info')
	in  %% Line 3078
	    case _9894 of
	      %% Line 3079
	      <'true'> when 'true' ->
		  apply 'add_warning'/2
		      (_cor1, _cor0)
	      %% Line 3080
	      <'false'> when 'true' ->
		  'ok'
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_9894})
		-| ['compiler_generated'] )
	    end
'add_warning'/2 =
    %% Line 3083
    fun (_cor1,_cor0) ->
	let <Anno> =
	    %% Line 3110
	    call 'core_lib':'get_anno'
		(_cor1)
	in  let <_12813> =
		%% Line 3111
		call 'lists':'member'
		    ('compiler_generated', Anno)
	    in  %% Line 3084
		case _12813 of
		  %% Line 3085
		  <'true'> when 'true' ->
		      %% Line 3086
		      'ok'
		  %% Line 3087
		  <'false'> when 'true' ->
		      let <Anno> =
			  %% Line 3088
			  call 'core_lib':'get_anno'
			      (_cor1)
		      in  let <Line> =
			      %% Line 3089
			      apply 'get_line'/1
				  (Anno)
			  in  let <File> =
				  %% Line 3090
				  apply 'get_file'/1
				      (Anno)
			      in  let <_7214> =
				      %% Line 3092
				      call 'erlang':'get'
					  ({'sys_core_fold','warnings'})
				  in  %% Line 3092
				      case _7214 of
					%% Line 3093
					<[{_cor10,[{_cor11,'sys_core_fold',_cor12}|[]]}|_cor13]>
					    when let <_cor16> =
						  call 'erlang':'=:='
						      (_cor10, File)
					      in  let <_cor14> =
						      call 'erlang':'=:='
							  (_cor11, Line)
						  in  let <_cor15> =
							  call 'erlang':'=:='
							      (_cor12, _cor0)
						      in  let <_cor17> =
							      call 'erlang':'and'
								  (_cor14, _cor15)
							  in  call 'erlang':'and'
								  (_cor16, _cor17) ->
					    %% Line 3094
					    'ok'
					%% Line 3096
					<Ws> when 'true' ->
					    %% Line 3097
					    call 'erlang':'put'
						({'sys_core_fold','warnings'}, [{File,[{Line,'sys_core_fold',_cor0}|[]]}|_7214])
				      end
		  ( <_cor7> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_12813})
		    -| ['compiler_generated'] )
		end
'get_line'/1 =
    %% Line 3101
    fun (_cor0) ->
	case _cor0 of
	  <[Line|_cor2]>
	      when call 'erlang':'is_integer'
		    (Line) ->
	      Line
	  %% Line 3102
	  <[_cor3|T]> when 'true' ->
	      apply 'get_line'/1
		  (T)
	  %% Line 3103
	  <[]> when 'true' ->
	      'none'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'get_line',1}}] )
	    -| ['compiler_generated'] )
	end
'get_file'/1 =
    %% Line 3105
    fun (_cor0) ->
	case _cor0 of
	  <[{'file',File}|_cor2]> when 'true' ->
	      File
	  %% Line 3106
	  <[_cor3|T]> when 'true' ->
	      apply 'get_file'/1
		  (T)
	  %% Line 3107
	  <[]> when 'true' ->
	      [110|[111|[95|[102|[105|[108|[101]]]]]]]
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'get_file',1}}] )
	    -| ['compiler_generated'] )
	end
'is_compiler_generated'/1 =
    %% Line 3109
    fun (_cor0) ->
	let <Anno> =
	    %% Line 3110
	    call 'core_lib':'get_anno'
		(_cor0)
	in  %% Line 3111
	    call 'lists':'member'
		('compiler_generated', Anno)
'format_error'/1 =
    %% Line 3130
    fun (_cor0) ->
	case _cor0 of
	  <{'eval_failure',Reason}> when 'true' ->
	      let <_cor1> =
		  %% Line 3131
		  call 'io_lib':'format'
		      ([116|[104|[105|[115|[32|[101|[120|[112|[114|[101|[115|[115|[105|[111|[110|[32|[119|[105|[108|[108|[32|[102|[97|[105|[108|[32|[119|[105|[116|[104|[32|[97|[32|[39|[126|[112|[39|[32|[101|[120|[99|[101|[112|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Reason|[]])
	      in  %% Line 3131
		  call 'lists':'flatten'
		      (_cor1)
	  %% Line 3132
	  <'embedded_binary_size'> when 'true' ->
	      %% Line 3133
	      [98|[105|[110|[97|[114|[121|[32|[99|[111|[110|[115|[116|[114|[117|[99|[116|[105|[111|[110|[32|[119|[105|[108|[108|[32|[102|[97|[105|[108|[32|[119|[105|[116|[104|[32|[97|[32|[39|[98|[97|[100|[97|[114|[103|[39|[32|[101|[120|[99|[101|[112|[116|[105|[111|[110|[32|[40|[102|[105|[101|[108|[100|[32|[115|[105|[122|[101|[32|[102|[111|[114|[32|[98|[105|[110|[97|[114|[121|[47|[98|[105|[116|[115|[116|[114|[105|[110|[103|[32|[103|[114|[101|[97|[116|[101|[114|[32|[116|[104|[97|[110|[32|[97|[99|[116|[117|[97|[108|[32|[115|[105|[122|[101|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 3135
	  <{'embedded_unit',Unit,Size}> when 'true' ->
	      let <M> =
		  %% Line 3136
		  call 'io_lib':'format'
		      ([98|[105|[110|[97|[114|[121|[32|[99|[111|[110|[115|[116|[114|[117|[99|[116|[105|[111|[110|[32|[119|[105|[108|[108|[32|[102|[97|[105|[108|[32|[119|[105|[116|[104|[32|[97|[32|[39|[98|[97|[100|[97|[114|[103|[39|[32|[101|[120|[99|[101|[112|[116|[105|[111|[110|[32|[40|[115|[105|[122|[101|[32|[126|[112|[32|[99|[97|[110|[110|[111|[116|[32|[98|[101|[32|[101|[118|[101|[110|[108|[121|[32|[100|[105|[118|[105|[100|[101|[100|[32|[98|[121|[32|[117|[110|[105|[116|[32|[126|[112|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 3137
																																																																										    [Size|[Unit|[]]])
	      in  %% Line 3138
		  call 'lists':'flatten'
		      (M)
	  %% Line 3139
	  <'bad_unicode'> when 'true' ->
	      %% Line 3140
	      [98|[105|[110|[97|[114|[121|[32|[99|[111|[110|[115|[116|[114|[117|[99|[116|[105|[111|[110|[32|[119|[105|[108|[108|[32|[102|[97|[105|[108|[32|[119|[105|[116|[104|[32|[97|[32|[39|[98|[97|[100|[97|[114|[103|[39|[32|[101|[120|[99|[101|[112|[116|[105|[111|[110|[32|[40|[105|[110|[118|[97|[108|[105|[100|[32|[85|[110|[105|[99|[111|[100|[101|[32|[99|[111|[100|[101|[32|[112|[111|[105|[110|[116|[32|[105|[110|[32|[97|[32|[117|[116|[102|[56|[47|[117|[116|[102|[49|[54|[47|[117|[116|[102|[51|[50|[32|[115|[101|[103|[109|[101|[110|[116|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 3142
	  <{'nomatch_shadow',Line}> when 'true' ->
	      let <M> =
		  %% Line 3143
		  call 'io_lib':'format'
		      ([116|[104|[105|[115|[32|[99|[108|[97|[117|[115|[101|[32|[99|[97|[110|[110|[111|[116|[32|[109|[97|[116|[99|[104|[32|[98|[101|[99|[97|[117|[115|[101|[32|[97|[32|[112|[114|[101|[118|[105|[111|[117|[115|[32|[99|[108|[97|[117|[115|[101|[32|[97|[116|[32|[108|[105|[110|[101|[32|[126|[112|[32|[97|[108|[119|[97|[121|[115|[32|[109|[97|[116|[99|[104|[101|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 3144
																																																								   [Line|[]])
	      in  %% Line 3145
		  call 'lists':'flatten'
		      (M)
	  %% Line 3146
	  <'nomatch_shadow'> when 'true' ->
	      %% Line 3147
	      [116|[104|[105|[115|[32|[99|[108|[97|[117|[115|[101|[32|[99|[97|[110|[110|[111|[116|[32|[109|[97|[116|[99|[104|[32|[98|[101|[99|[97|[117|[115|[101|[32|[97|[32|[112|[114|[101|[118|[105|[111|[117|[115|[32|[99|[108|[97|[117|[115|[101|[32|[97|[108|[119|[97|[121|[115|[32|[109|[97|[116|[99|[104|[101|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 3148
	  <'nomatch_guard'> when 'true' ->
	      %% Line 3149
	      [116|[104|[101|[32|[103|[117|[97|[114|[100|[32|[102|[111|[114|[32|[116|[104|[105|[115|[32|[99|[108|[97|[117|[115|[101|[32|[101|[118|[97|[108|[117|[97|[116|[101|[115|[32|[116|[111|[32|[39|[102|[97|[108|[115|[101|[39]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 3150
	  <'no_clause_match'> when 'true' ->
	      %% Line 3151
	      [110|[111|[32|[99|[108|[97|[117|[115|[101|[32|[119|[105|[108|[108|[32|[101|[118|[101|[114|[32|[109|[97|[116|[99|[104]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 3152
	  <'nomatch_clause_type'> when 'true' ->
	      %% Line 3153
	      [116|[104|[105|[115|[32|[99|[108|[97|[117|[115|[101|[32|[99|[97|[110|[110|[111|[116|[32|[109|[97|[116|[99|[104|[32|[98|[101|[99|[97|[117|[115|[101|[32|[111|[102|[32|[100|[105|[102|[102|[101|[114|[101|[110|[116|[32|[116|[121|[112|[101|[115|[47|[115|[105|[122|[101|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 3154
	  <{'no_effect',{'erlang',F,A}}> when 'true' ->
	      let <_12943> =
		  %% Line 3155
		  call 'erl_internal':'comp_op'
		      (F, A)
	      in  let <Fmt,Args> =
		      %% Line 3155
		      case _12943 of
			%% Line 3156
			<'true'> when 'true' ->
			    %% Line 3157
			    <[117|[115|[101|[32|[111|[102|[32|[111|[112|[101|[114|[97|[116|[111|[114|[32|[126|[112|[32|[104|[97|[115|[32|[110|[111|[32|[101|[102|[102|[101|[99|[116]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[F|[]]>
			%% Line 3158
			<'false'> when 'true' ->
			    let <_16978> =
				%% Line 3159
				call 'erl_internal':'bif'
				    (F, A)
			    in  %% Line 3159
				case _16978 of
				  %% Line 3160
				  <'false'> when 'true' ->
				      %% Line 3161
				      <[116|[104|[101|[32|[99|[97|[108|[108|[32|[116|[111|[32|[101|[114|[108|[97|[110|[103|[58|[126|[112|[47|[126|[112|[32|[104|[97|[115|[32|[110|[111|[32|[101|[102|[102|[101|[99|[116]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[F|[A|[]]]>
				  %% Line 3162
				  <'true'> when 'true' ->
				      %% Line 3163
				      <[116|[104|[101|[32|[99|[97|[108|[108|[32|[116|[111|[32|[126|[112|[47|[126|[112|[32|[104|[97|[115|[32|[110|[111|[32|[101|[102|[102|[101|[99|[116]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[F|[A|[]]]>
				  ( <_cor4> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_16978})
				    -| ['compiler_generated'] )
				end
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_12943})
			  -| ['compiler_generated'] )
		      end
		  in  let <_cor8> =
			  %% Line 3166
			  call 'io_lib':'format'
			      (Fmt, Args)
		      in  %% Line 3166
			  call 'lists':'flatten'
			      (_cor8)
	  %% Line 3167
	  <'result_ignored'> when 'true' ->
	      %% Line 3168
	      [116|[104|[101|[32|[114|[101|[115|[117|[108|[116|[32|[111|[102|[32|[116|[104|[101|[32|[101|[120|[112|[114|[101|[115|[115|[105|[111|[110|[32|[105|[115|[32|[105|[103|[110|[111|[114|[101|[100|[32|[40|[115|[117|[112|[112|[114|[101|[115|[115|[32|[116|[104|[101|[32|[119|[97|[114|[110|[105|[110|[103|[32|[98|[121|[32|[97|[115|[115|[105|[103|[110|[105|[110|[103|[32|[116|[104|[101|[32|[101|[120|[112|[114|[101|[115|[115|[105|[111|[110|[32|[116|[111|[32|[116|[104|[101|[32|[95|[32|[118|[97|[114|[105|[97|[98|[108|[101|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 3170
	  <'useless_building'> when 'true' ->
	      %% Line 3171
	      [97|[32|[116|[101|[114|[109|[32|[105|[115|[32|[99|[111|[110|[115|[116|[114|[117|[99|[116|[101|[100|[44|[32|[98|[117|[116|[32|[110|[101|[118|[101|[114|[32|[117|[115|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 3172
	  <'bin_opt_alias'> when 'true' ->
	      %% Line 3173
	      [73|[78|[70|[79|[58|[32|[116|[104|[101|[32|[39|[61|[39|[32|[111|[112|[101|[114|[97|[116|[111|[114|[32|[119|[105|[108|[108|[32|[112|[114|[101|[118|[101|[110|[116|[32|[100|[101|[108|[97|[121|[101|[100|[32|[115|[117|[98|[32|[98|[105|[110|[97|[114|[121|[32|[111|[112|[116|[105|[109|[105|[122|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 3174
	  <'bin_partition'> when 'true' ->
	      %% Line 3175
	      [73|[78|[70|[79|[58|[32|[109|[97|[116|[99|[104|[105|[110|[103|[32|[110|[111|[110|[45|[118|[97|[114|[105|[97|[98|[108|[101|[115|[32|[97|[102|[116|[101|[114|[32|[97|[32|[112|[114|[101|[118|[105|[111|[117|[115|[32|[99|[108|[97|[117|[115|[101|[32|[109|[97|[116|[99|[104|[105|[110|[103|[32|[97|[32|[118|[97|[114|[105|[97|[98|[108|[101|[32|[119|[105|[108|[108|[32|[112|[114|[101|[118|[101|[110|[116|[32|[100|[101|[108|[97|[121|[101|[100|[32|[115|[117|[98|[32|[98|[105|[110|[97|[114|[121|[32|[111|[112|[116|[105|[109|[105|[122|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 3177
	  <'bin_left_var_used_in_guard'> when 'true' ->
	      %% Line 3178
	      [73|[78|[70|[79|[58|[32|[97|[32|[118|[97|[114|[105|[97|[98|[108|[101|[32|[116|[111|[32|[116|[104|[101|[32|[108|[101|[102|[116|[32|[111|[102|[32|[116|[104|[101|[32|[98|[105|[110|[97|[114|[121|[32|[112|[97|[116|[116|[101|[114|[110|[32|[105|[115|[32|[117|[115|[101|[100|[32|[105|[110|[32|[97|[32|[103|[117|[97|[114|[100|[59|[32|[119|[105|[108|[108|[32|[112|[114|[101|[118|[101|[110|[116|[32|[100|[101|[108|[97|[121|[101|[100|[32|[115|[117|[98|[32|[98|[105|[110|[97|[114|[121|[32|[111|[112|[116|[105|[109|[105|[122|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 3180
	  <'bin_argument_order'> when 'true' ->
	      %% Line 3181
	      [73|[78|[70|[79|[58|[32|[109|[97|[116|[99|[104|[105|[110|[103|[32|[97|[110|[121|[116|[104|[105|[110|[103|[32|[101|[108|[115|[101|[32|[98|[117|[116|[32|[97|[32|[112|[108|[97|[105|[110|[32|[118|[97|[114|[105|[97|[98|[108|[101|[32|[116|[111|[32|[116|[104|[101|[32|[108|[101|[102|[116|[32|[111|[102|[32|[98|[105|[110|[97|[114|[121|[32|[112|[97|[116|[116|[101|[114|[110|[32|[119|[105|[108|[108|[32|[112|[114|[101|[118|[101|[110|[116|[32|[100|[101|[108|[97|[121|[101|[100|[32|[115|[117|[98|[32|[98|[105|[110|[97|[114|[121|[32|[111|[112|[116|[105|[109|[105|[122|[97|[116|[105|[111|[110|[59|[32|[83|[85|[71|[71|[69|[83|[84|[32|[99|[104|[97|[110|[103|[105|[110|[103|[32|[97|[114|[103|[117|[109|[101|[110|[116|[32|[111|[114|[100|[101|[114]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 3184
	  <'bin_var_used'> when 'true' ->
	      %% Line 3185
	      [73|[78|[70|[79|[58|[32|[117|[115|[105|[110|[103|[32|[97|[32|[109|[97|[116|[99|[104|[101|[100|[32|[111|[117|[116|[32|[115|[117|[98|[32|[98|[105|[110|[97|[114|[121|[32|[119|[105|[108|[108|[32|[112|[114|[101|[118|[101|[110|[116|[32|[100|[101|[108|[97|[121|[101|[100|[32|[115|[117|[98|[32|[98|[105|[110|[97|[114|[121|[32|[111|[112|[116|[105|[109|[105|[122|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 3187
	  <'orig_bin_var_used_in_guard'> when 'true' ->
	      %% Line 3188
	      [73|[78|[70|[79|[58|[32|[117|[115|[105|[110|[103|[32|[116|[104|[101|[32|[111|[114|[105|[103|[105|[110|[97|[108|[32|[98|[105|[110|[97|[114|[121|[32|[118|[97|[114|[105|[97|[98|[108|[101|[32|[105|[110|[32|[97|[32|[103|[117|[97|[114|[100|[32|[119|[105|[108|[108|[32|[112|[114|[101|[118|[101|[110|[116|[32|[100|[101|[108|[97|[121|[101|[100|[32|[115|[117|[98|[32|[98|[105|[110|[97|[114|[121|[32|[111|[112|[116|[105|[109|[105|[122|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 3190
	  <'bin_var_used_in_guard'> when 'true' ->
	      %% Line 3191
	      [73|[78|[70|[79|[58|[32|[117|[115|[105|[110|[103|[32|[97|[32|[109|[97|[116|[99|[104|[101|[100|[32|[111|[117|[116|[32|[115|[117|[98|[32|[98|[105|[110|[97|[114|[121|[32|[105|[110|[32|[97|[32|[103|[117|[97|[114|[100|[32|[119|[105|[108|[108|[32|[112|[114|[101|[118|[101|[110|[116|[32|[100|[101|[108|[97|[121|[101|[100|[32|[115|[117|[98|[32|[98|[105|[110|[97|[114|[121|[32|[111|[112|[116|[105|[109|[105|[122|[97|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'format_error',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('sys_core_fold')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('sys_core_fold', _cor0)
end