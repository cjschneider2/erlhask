module 'beam_dict' ['atom'/2,
		    'atom_table'/1,
		    'export'/4,
		    'export_table'/1,
		    'fname'/2,
		    'highest_opcode'/1,
		    'import'/4,
		    'import_table'/1,
		    'lambda'/3,
		    'lambda_table'/1,
		    'line'/2,
		    'line_table'/1,
		    'literal'/2,
		    'literal_table'/1,
		    'local'/4,
		    'local_table'/1,
		    'module_info'/0,
		    'module_info'/1,
		    'new'/0,
		    'opcode'/2,
		    'string'/2,
		    'string_table'/1]
    attributes [%% Line 30
		'type' =
		    %% Line 30
		    [{'label',{'type',30,'non_neg_integer',[]},[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{'index',{'type',32,'non_neg_integer',[]},[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{'atom_tab',{'remote_type',34,[{'atom',34,'gb_trees'}|[{'atom',34,'tree'}|[[{'type',34,'atom',[]}|[{'type',34,'index',[]}]]]]]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{'import_tab',{'remote_type',35,[{'atom',35,'gb_trees'}|[{'atom',35,'tree'}|[[{'type',35,'mfa',[]}|[{'type',35,'index',[]}]]]]]},[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{'fname_tab',{'remote_type',36,[{'atom',36,'gb_trees'}|[{'atom',36,'tree'}|[[{'ann_type',36,[{'var',36,'Name'}|[{'type',36,'term',[]}]]}|[{'type',36,'index',[]}]]]]]},[]}],
		%% Line 37
		'type' =
		    %% Line 37
		    [{'line_tab',{'remote_type',37,[{'atom',37,'gb_trees'}|[{'atom',37,'tree'}|[[{'type',37,'tuple',[{'ann_type',37,[{'var',37,'Fname'}|[{'type',37,'index',[]}]]}|[{'ann_type',37,[{'var',37,'Line'}|[{'type',37,'term',[]}]]}]]}|[{'type',37,'index',[]}]]]]]},[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'literal_tab',{'remote_type',38,[{'atom',38,'dict'}|[{'atom',38,'dict'}|[[{'ann_type',38,[{'var',38,'Literal'}|[{'type',38,'term',[]}]]}|[{'type',38,'index',[]}]]]]]},[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{{'record','asm'},[{'typed_record_field',{'record_field',41,{'atom',41,'atoms'},{'call',41,{'remote',41,{'atom',41,'gb_trees'},{'atom',41,'empty'}},[]}},{'type',41,'atom_tab',[]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'exports'},{'nil',42}},{'type',42,'list',[{'type',42,'tuple',[{'type',42,'label',[]}|[{'type',42,'arity',[]}|[{'type',42,'label',[]}]]]}]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'locals'},{'nil',43}},{'type',43,'list',[{'type',43,'tuple',[{'type',43,'label',[]}|[{'type',43,'arity',[]}|[{'type',43,'label',[]}]]]}]}}|[{'typed_record_field',{'record_field',44,{'atom',44,'imports'},{'call',44,{'remote',44,{'atom',44,'gb_trees'},{'atom',44,'empty'}},[]}},{'type',44,'import_tab',[]}}|[{'typed_record_field',{'record_field',45,{'atom',45,'strings'},{'bin',45,[]}},{'type',45,'binary',[]}}|[{'record_field',46,{'atom',46,'lambdas'},{'nil',46}}|[{'typed_record_field',{'record_field',47,{'atom',47,'literals'},{'call',47,{'remote',47,{'atom',47,'dict'},{'atom',47,'new'}},[]}},{'type',47,'literal_tab',[]}}|[{'typed_record_field',{'record_field',48,{'atom',48,'fnames'},{'call',48,{'remote',48,{'atom',48,'gb_trees'},{'atom',48,'empty'}},[]}},{'type',48,'fname_tab',[]}}|[{'typed_record_field',{'record_field',49,{'atom',49,'lines'},{'call',49,{'remote',49,{'atom',49,'gb_trees'},{'atom',49,'empty'}},[]}},{'type',49,'line_tab',[]}}|[{'typed_record_field',{'record_field',50,{'atom',50,'num_lines'},{'integer',50,0}},{'type',50,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'next_import'},{'integer',51,0}},{'type',51,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'string_offset'},{'integer',52,0}},{'type',52,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'next_literal'},{'integer',53,0}},{'type',53,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'highest_opcode'},{'integer',54,0}},{'type',54,'non_neg_integer',[]}}]]]]]]]]]]]]]],[]}],
		%% Line 56
		'type' =
		    %% Line 56
		    [{'bdict',{'type',56,'record',[{'atom',56,'asm'}]},[]}],
		%% Line 60
		'spec' =
		    %% Line 60
		    [{{'new',0},[{'type',60,'fun',[{'type',60,'product',[]}|[{'type',60,'bdict',[]}]]}]}],
		%% Line 66
		'spec' =
		    %% Line 66
		    [{{'opcode',2},[{'type',66,'fun',[{'type',66,'product',[{'type',66,'non_neg_integer',[]}|[{'type',66,'bdict',[]}]]}|[{'type',66,'bdict',[]}]]}]}],
		%% Line 72
		'spec' =
		    %% Line 72
		    [{{'highest_opcode',1},[{'type',72,'fun',[{'type',72,'product',[{'type',72,'bdict',[]}]}|[{'type',72,'non_neg_integer',[]}]]}]}],
		%% Line 78
		'spec' =
		    %% Line 78
		    [{{'atom',2},[{'type',78,'fun',[{'type',78,'product',[{'type',78,'atom',[]}|[{'type',78,'bdict',[]}]]}|[{'type',78,'tuple',[{'type',78,'pos_integer',[]}|[{'type',78,'bdict',[]}]]}]]}]}],
		%% Line 92
		'spec' =
		    %% Line 92
		    [{{'export',4},[{'type',92,'fun',[{'type',92,'product',[{'type',92,'atom',[]}|[{'type',92,'arity',[]}|[{'type',92,'label',[]}|[{'type',92,'bdict',[]}]]]]}|[{'type',92,'bdict',[]}]]}]}],
		%% Line 102
		'spec' =
		    %% Line 102
		    [{{'local',4},[{'type',102,'fun',[{'type',102,'product',[{'type',102,'atom',[]}|[{'type',102,'arity',[]}|[{'type',102,'label',[]}|[{'type',102,'bdict',[]}]]]]}|[{'type',102,'bdict',[]}]]}]}],
		%% Line 112
		'spec' =
		    %% Line 112
		    [{{'import',4},[{'type',112,'fun',[{'type',112,'product',[{'type',112,'atom',[]}|[{'type',112,'atom',[]}|[{'type',112,'arity',[]}|[{'type',112,'bdict',[]}]]]]}|[{'type',112,'tuple',[{'type',112,'non_neg_integer',[]}|[{'type',112,'bdict',[]}]]}]]}]}],
		%% Line 130
		'spec' =
		    %% Line 130
		    [{{'string',2},[{'type',130,'fun',[{'type',130,'product',[{'type',130,'string',[]}|[{'type',130,'bdict',[]}]]}|[{'type',130,'tuple',[{'type',130,'non_neg_integer',[]}|[{'type',130,'bdict',[]}]]}]]}]}],
		%% Line 146
		'spec' =
		    %% Line 146
		    [{{'lambda',3},[{'type',146,'fun',[{'type',146,'product',[{'type',146,'label',[]}|[{'type',146,'non_neg_integer',[]}|[{'type',146,'bdict',[]}]]]}|[{'type',147,'tuple',[{'type',147,'non_neg_integer',[]}|[{'type',147,'bdict',[]}]]}]]}]}],
		%% Line 161
		'spec' =
		    %% Line 161
		    [{{'literal',2},[{'type',161,'fun',[{'type',161,'product',[{'type',161,'term',[]}|[{'type',161,'bdict',[]}]]}|[{'type',161,'tuple',[{'type',161,'non_neg_integer',[]}|[{'type',161,'bdict',[]}]]}]]}]}],
		%% Line 174
		'spec' =
		    %% Line 174
		    [{{'line',2},[{'type',174,'fun',[{'type',174,'product',[{'type',174,'list',[]}|[{'type',174,'bdict',[]}]]}|[{'type',174,'tuple',[{'type',174,'non_neg_integer',[]}|[{'type',174,'bdict',[]}]]}]]}]}],
		%% Line 204
		'spec' =
		    %% Line 204
		    [{{'atom_table',1},[{'type',204,'fun',[{'type',204,'product',[{'type',204,'bdict',[]}]}|[{'type',204,'tuple',[{'type',204,'non_neg_integer',[]}|[{'type',204,'list',[{'type',204,'nonempty_list',[{'type',204,'non_neg_integer',[]}]}]}]]}]]}]}],
		%% Line 218
		'spec' =
		    %% Line 218
		    [{{'local_table',1},[{'type',218,'fun',[{'type',218,'product',[{'type',218,'bdict',[]}]}|[{'type',218,'tuple',[{'type',218,'non_neg_integer',[]}|[{'type',218,'list',[{'type',218,'tuple',[{'type',218,'label',[]}|[{'type',218,'arity',[]}|[{'type',218,'label',[]}]]]}]}]]}]]}]}],
		%% Line 225
		'spec' =
		    %% Line 225
		    [{{'export_table',1},[{'type',225,'fun',[{'type',225,'product',[{'type',225,'bdict',[]}]}|[{'type',225,'tuple',[{'type',225,'non_neg_integer',[]}|[{'type',225,'list',[{'type',225,'tuple',[{'type',225,'label',[]}|[{'type',225,'arity',[]}|[{'type',225,'label',[]}]]]}]}]]}]]}]}],
		%% Line 232
		'spec' =
		    %% Line 232
		    [{{'import_table',1},[{'type',232,'fun',[{'type',232,'product',[{'type',232,'bdict',[]}]}|[{'type',232,'tuple',[{'type',232,'non_neg_integer',[]}|[{'type',232,'list',[{'type',232,'tuple',[{'type',232,'label',[]}|[{'type',232,'label',[]}|[{'type',232,'arity',[]}]]]}]}]]}]]}]}],
		%% Line 239
		'spec' =
		    %% Line 239
		    [{{'string_table',1},[{'type',239,'fun',[{'type',239,'product',[{'type',239,'bdict',[]}]}|[{'type',239,'tuple',[{'type',239,'non_neg_integer',[]}|[{'type',239,'binary',[]}]]}]]}]}],
		%% Line 244
		'spec' =
		    %% Line 244
		    [{{'lambda_table',1},[{'type',244,'fun',[{'type',244,'product',[{'type',244,'bdict',[]}]}|[{'type',244,'tuple',[{'type',244,'non_neg_integer',[]}|[{'type',244,'list',[{'type',244,'binary',[{'integer',244,192}|[{'integer',244,0}]]}]}]]}]]}]}],
		%% Line 256
		'spec' =
		    %% Line 256
		    [{{'literal_table',1},[{'type',256,'fun',[{'type',256,'product',[{'type',256,'bdict',[]}]}|[{'type',256,'tuple',[{'type',256,'non_neg_integer',[]}|[{'type',256,'list',[{'type',256,'nonempty_list',[{'type',256,'binary',[]}]}]}]]}]]}]}],
		%% Line 270
		'spec' =
		    %% Line 270
		    [{{'line_table',1},[{'type',270,'fun',[{'type',270,'product',[{'type',270,'bdict',[]}]}|[{'type',271,'tuple',[{'type',271,'non_neg_integer',[]}|[{'type',272,'non_neg_integer',[]}|[{'type',272,'list',[{'type',272,'string',[]}]}|[{'type',273,'non_neg_integer',[]}|[{'type',273,'list',[{'type',273,'tuple',[{'type',273,'non_neg_integer',[]}|[{'type',273,'non_neg_integer',[]}]]}]}]]]]]}]]}]}],
		%% Line 286
		'spec' =
		    %% Line 286
		    [{{'old_string',2},[{'type',286,'fun',[{'type',286,'product',[{'type',286,'binary',[]}|[{'type',286,'binary',[]}]]}|[{'type',286,'union',[{'atom',286,'none'}|[{'type',286,'pos_integer',[]}]]}]]}]}]]
'new'/0 =
    %% Line 62
    fun () ->
	let <_cor4> =
	    call 'gb_trees':'empty'
		()
	in  let <_cor3> =
		call 'gb_trees':'empty'
		    ()
	    in  let <_cor2> =
		    call 'dict':'new'
			()
		in  let <_cor1> =
			call 'gb_trees':'empty'
			    ()
		    in  let <_cor0> =
			    call 'gb_trees':'empty'
				()
			in  %% Line 63
			    {'asm',_cor4,[],[],_cor3,#{}#,[],_cor2,_cor1,_cor0,0,0,0,0,0}
'opcode'/2 =
    %% Line 68
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Op,Dict = {'asm',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25}>
	      when call 'erlang':'>'
		    (_cor25,
		     _cor1) ->
	      _cor0
	  %% Line 69
	  <Op,Dict> when 'true' ->
	      case _cor0 of
		<{'asm',_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39}> when 'true' ->
		    call 'erlang':'setelement'
			(15, _cor0, _cor1)
		( <_cor40> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','asm'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	end
'highest_opcode'/1 =
    %% Line 74
    fun (_cor0) ->
	case _cor0 of
	  <{'asm',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,Op}> when 'true' ->
	      Op
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'highest_opcode',1}}] )
	    -| ['compiler_generated'] )
	end
'atom'/2 =
    %% Line 80
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Atom,Dict = {'asm',Atoms0,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23}>
	      when call 'erlang':'is_atom'
		    (_cor1) ->
	      let <_3205> =
		  %% Line 81
		  call 'gb_trees':'lookup'
		      (_cor1, Atoms0)
	      in  %% Line 81
		  case _3205 of
		    %% Line 82
		    <{'value',Index}> when 'true' ->
			%% Line 83
			{Index,_cor0}
		    %% Line 84
		    <'none'> when 'true' ->
			let <_cor2> =
			    %% Line 85
			    call 'gb_trees':'size'
				(Atoms0)
			in  let <NextIndex> =
				%% Line 85
				call 'erlang':'+'
				    (_cor2, 1)
			    in  let <Atoms> =
				    %% Line 86
				    call 'gb_trees':'insert'
					(_cor1, NextIndex, Atoms0)
				in  let <_cor7> =
					%% Line 87
					call 'erlang':'setelement'
					    (2, _cor0, Atoms)
				    in  %% Line 87
					{NextIndex,_cor7}
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_3205})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'atom',2}}] )
	    -| ['compiler_generated'] )
	end
'export'/4 =
    %% Line 94
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Func,Arity,Label,Dict0>
	      when try
		    let <_cor4> =
			call 'erlang':'is_atom'
			    (_cor3)
		    in  let <_cor5> =
			    %% Line 95
			    call 'erlang':'is_integer'
				(_cor2)
			in  let <_cor6> =
				%% Line 96
				call 'erlang':'is_integer'
				    (_cor1)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_2591> =
		  %% Line 97
		  apply 'atom'/2
		      (_cor3, _cor0)
	      in  %% Line 97
		  case _2591 of
		    <{Index,Dict1}> when 'true' ->
			%% Line 98
			( case Dict1 of
			    ( <( {'asm',_cor18,_rec4,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_rec2> =
				      [{Index,_cor2,_cor1}|_rec4]
				  in  call 'erlang':'setelement'
					  (3, Dict1, _rec2)
			      -| ['compiler_generated'] )
			    ( <_cor31> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','asm'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_2591})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'export',4}}] )
	    -| ['compiler_generated'] )
	end
'local'/4 =
    %% Line 104
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Func,Arity,Label,Dict0>
	      when try
		    let <_cor4> =
			call 'erlang':'is_atom'
			    (_cor3)
		    in  let <_cor5> =
			    %% Line 105
			    call 'erlang':'is_integer'
				(_cor2)
			in  let <_cor6> =
				%% Line 106
				call 'erlang':'is_integer'
				    (_cor1)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_417> =
		  %% Line 107
		  apply 'atom'/2
		      (_cor3, _cor0)
	      in  %% Line 107
		  case _417 of
		    <{Index,Dict1}> when 'true' ->
			%% Line 108
			( case Dict1 of
			    ( <( {'asm',_cor18,_cor19,_rec7,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_rec5> =
				      [{Index,_cor2,_cor1}|_rec7]
				  in  call 'erlang':'setelement'
					  (4, Dict1, _rec5)
			      -| ['compiler_generated'] )
			    ( <_cor31> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','asm'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_417})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'local',4}}] )
	    -| ['compiler_generated'] )
	end
'import'/4 =
    %% Line 114
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Mod0,Name0,Arity,D0 = {'asm',_cor22,_cor23,_cor24,Imp0,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,NextIndex,_cor31,_cor32,_cor33}>
	      when %% Line 115
		try
		    let <_cor4> =
			call 'erlang':'is_atom'
			    (_cor3)
		    in  let <_cor5> =
			    call 'erlang':'is_atom'
				(_cor2)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (_cor1)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_1768> =
		  %% Line 116
		  apply 'atom'/2
		      (_cor3, _cor0)
	      in  %% Line 116
		  case _1768 of
		    <{Mod,D1}> when 'true' ->
			let <_2324> =
			    %% Line 117
			    apply 'atom'/2
				(_cor2, D1)
			in  %% Line 117
			    case _2324 of
			      <{Name,D2}> when 'true' ->
				  let <MFA> = {Mod,Name,_cor1}
				  in  let <_1422> =
					  %% Line 119
					  call 'gb_trees':'lookup'
					      (MFA, Imp0)
				      in  %% Line 119
					  case _1422 of
					    %% Line 120
					    <{'value',Index}> when 'true' ->
						%% Line 121
						{Index,D2}
					    %% Line 122
					    <'none'> when 'true' ->
						let <Imp> =
						    %% Line 123
						    call 'gb_trees':'insert'
							(MFA, NextIndex, Imp0)
						in  let <_rec8> =
							%% Line 124
							call 'erlang':'+'
							    (NextIndex, 1)
						    in  %% Line 124
							case D2 of
							  <{'asm',_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47}> when 'true' ->
							      let <_cor14> =
								  call 'erlang':'setelement'
								      (12, D2, _rec8)
							      in  let <_cor16> =
								      call 'erlang':'setelement'
									  (5, _cor14, Imp)
								  in  {NextIndex,_cor16}
							  ( <_cor48> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {'badrecord','asm'}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
					    ( <_cor17> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_1422})
					      -| ['compiler_generated'] )
					  end
			      ( <_cor9> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_2324})
				-| ['compiler_generated'] )
			    end
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_1768})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor21,_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'import',4}}] )
	    -| ['compiler_generated'] )
	end
'string'/2 =
    %% Line 132
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Str,Dict>
	      when call 'erlang':'is_list'
		    (_cor1) ->
	      %% Line 133
	      case _cor0 of
		<{'asm',_cor16,_cor17,_cor18,_cor19,Strings,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,NextOffset,_cor26,_cor27}> when 'true' ->
		    let <StrBin> =
			%% Line 134
			call 'erlang':'list_to_binary'
			    (_cor1)
		    in  let <_25> =
			    %% Line 135
			    apply 'old_string'/2
				(StrBin, Strings)
			in  %% Line 135
			    case _25 of
			      %% Line 136
			      <'none'> when 'true' ->
				  let <_rec10> =
				      %% Line 137
				      #{#<Strings>('all',8,'binary',['unsigned'|['big']]),
					#<StrBin>('all',8,'binary',['unsigned'|['big']])}#
				  in  let <_cor5> =
					  %% Line 138
					  call 'erlang':'byte_size'
					      (StrBin)
				      in  let <_rec11> =
					      %% Line 138
					      call 'erlang':'+'
						  (NextOffset, _cor5)
					  in  let <_cor8> =
						  %% Line 138
						  call 'erlang':'setelement'
						      (13, _cor0, _rec11)
					      in  let <_cor10> =
						      %% Line 137
						      call 'erlang':'setelement'
							  (6, _cor8, _rec10)
						  in  %% Line 139
						      {NextOffset,_cor10}
			      %% Line 140
			      <Offset>
				  when call 'erlang':'is_integer'
					(_25) ->
				  let <_cor12> =
				      %% Line 141
				      call 'erlang':'-'
					  (NextOffset, _25)
				  in  %% Line 141
				      {_cor12,_cor0}
			      ( <_cor13> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_25})
				-| ['compiler_generated'] )
			    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor0})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'string',2}}] )
	    -| ['compiler_generated'] )
	end
'lambda'/3 =
    %% Line 149
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Lbl,NumFree,Dict = {'asm',_cor13,_cor14,_cor15,_cor16,_cor17,Lambdas0,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25}> when 'true' ->
	      let <OldIndex> =
		  %% Line 150
		  call 'erlang':'length'
		      (Lambdas0)
	      in  let <Lambdas> =
		      %% Line 156
		      [{_cor2,{OldIndex,_cor2,OldIndex,_cor1,0}}|Lambdas0]
		  in  let <_cor9> =
			  %% Line 157
			  call 'erlang':'setelement'
			      (7, _cor0, Lambdas)
		      in  %% Line 157
			  {OldIndex,_cor9}
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'lambda',3}}] )
	    -| ['compiler_generated'] )
	end
'literal'/2 =
    %% Line 163
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Lit,Dict = {'asm',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,Tab0,_cor17,_cor18,_cor19,_cor20,_cor21,NextIndex,_cor22}> when 'true' ->
	      let <_3330> =
		  %% Line 164
		  call 'dict':'find'
		      (_cor1, Tab0)
	      in  %% Line 164
		  case _3330 of
		    %% Line 165
		    <{'ok',Index}> when 'true' ->
			%% Line 166
			{Index,_cor0}
		    %% Line 167
		    <'error'> when 'true' ->
			let <Tab> =
			    %% Line 168
			    call 'dict':'store'
				(_cor1, NextIndex, Tab0)
			in  let <_rec14> =
				%% Line 169
				call 'erlang':'+'
				    (NextIndex, 1)
			    in  let <_cor5> =
				    %% Line 169
				    call 'erlang':'setelement'
					(14, _cor0, _rec14)
				in  let <_cor7> =
					%% Line 169
					call 'erlang':'setelement'
					    (8, _cor5, Tab)
				    in  %% Line 169
					{NextIndex,_cor7}
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_3330})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'literal',2}}] )
	    -| ['compiler_generated'] )
	end
'line'/2 =
    %% Line 176
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Dict = {'asm',_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,N,_cor32,_cor33,_cor34,_cor35}> when 'true' ->
	      let <_rec16> =
		  %% Line 179
		  call 'erlang':'+'
		      (N, 1)
	      in  let <_cor5> =
		      %% Line 179
		      call 'erlang':'setelement'
			  (11, _cor0, _rec16)
		  in  %% Line 179
		      {0,_cor5}
	  %% Line 180
	  <[{'location',Name,Line}|[]],Dict0 = {'asm',_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,Lines0,N,_cor59,_cor60,_cor61,_cor62}> when 'true' ->
	      let <_804> =
		  %% Line 181
		  apply 'fname'/2
		      (Name, _cor0)
	      in  %% Line 181
		  case _804 of
		    <{FnameIndex,Dict1}> when 'true' ->
			let <_3209> =
			    %% Line 182
			    call 'gb_trees':'lookup'
				({FnameIndex,Line}, Lines0)
			in  %% Line 182
			    case _3209 of
			      %% Line 183
			      <{'value',Index}> when 'true' ->
				  let <_rec18> =
				      %% Line 184
				      call 'erlang':'+'
					  (N, 1)
				  in  %% Line 184
				      case Dict1 of
					<{'asm',_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76}> when 'true' ->
					    let <_cor10> =
						call 'erlang':'setelement'
						    (11, Dict1, _rec18)
					    in  {Index,_cor10}
					( <_cor77> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','asm'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
			      %% Line 185
			      <'none'> when 'true' ->
				  let <_cor11> =
				      %% Line 186
				      call 'gb_trees':'size'
					  (Lines0)
				  in  let <Index> =
					  %% Line 186
					  call 'erlang':'+'
					      (_cor11, 1)
				      in  let <Lines> =
					      %% Line 187
					      call 'gb_trees':'insert'
						  ({FnameIndex,Line}, Index, Lines0)
					  in  let <_rec20> =
						  %% Line 188
						  call 'erlang':'+'
						      (N, 1)
					      in  %% Line 188
						  case Dict1 of
						    <{'asm',_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91}> when 'true' ->
							let <_cor16> =
							    call 'erlang':'setelement'
								(11, Dict1, _rec20)
							in  let <_cor18> =
								call 'erlang':'setelement'
								    (10, _cor16, Lines)
							    in  %% Line 189
								{Index,_cor18}
						    ( <_cor92> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','asm'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
			      ( <_cor20> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_3209})
				-| ['compiler_generated'] )
			    end
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_804})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'line',2}}] )
	    -| ['compiler_generated'] )
	end
'fname'/2 =
    %% Line 192
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,Dict = {'asm',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,Fnames0,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22}> when 'true' ->
	      let <_261> =
		  %% Line 193
		  call 'gb_trees':'lookup'
		      (_cor1, Fnames0)
	      in  %% Line 193
		  case _261 of
		    %% Line 194
		    <{'value',Index}> when 'true' ->
			%% Line 195
			{Index,_cor0}
		    %% Line 196
		    <'none'> when 'true' ->
			let <Index> =
			    %% Line 197
			    call 'gb_trees':'size'
				(Fnames0)
			in  let <Fnames> =
				%% Line 198
				call 'gb_trees':'insert'
				    (_cor1, Index, Fnames0)
			    in  let <_cor6> =
				    %% Line 199
				    call 'erlang':'setelement'
					(9, _cor0, Fnames)
				in  %% Line 199
				    {Index,_cor6}
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_261})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'fname',2}}] )
	    -| ['compiler_generated'] )
	end
'atom_table'/1 =
    %% Line 206
    fun (_cor0) ->
	case _cor0 of
	  <{'asm',Atoms,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23}> when 'true' ->
	      let <NumAtoms> =
		  %% Line 207
		  call 'gb_trees':'size'
		      (Atoms)
	      in  let <_cor2> =
		      %% Line 208
		      call 'gb_trees':'to_list'
			  (Atoms)
		  in  let <Sorted> =
			  %% Line 208
			  call 'lists':'keysort'
			      (2, _cor2)
		      in  let <Fun> =
			      %% Line 209
			      fun (_cor6) ->
				  case _cor6 of
				    <{A,_cor24}> when 'true' ->
					let <L> =
					    %% Line 210
					    call 'erlang':'atom_to_list'
						(A)
					in  let <_cor5> =
						%% Line 211
						call 'erlang':'length'
						    (L)
					    in  %% Line 211
						[_cor5|L]
				    ( <_cor7> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor6})
					    -| [{'function_name',{'-atom_table/1-fun-0-',1}}] )
				      -| ['compiler_generated'] )
				  end
			  in  let <AtomTab> =
				  %% Line 213
				  call 'lists':'map'
				      (Fun, Sorted)
			      in  %% Line 214
				  {NumAtoms,AtomTab}
	  ( <_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'atom_table',1}}] )
	    -| ['compiler_generated'] )
	end
'local_table'/1 =
    %% Line 220
    fun (_cor0) ->
	case _cor0 of
	  <{'asm',_cor3,_cor4,Locals,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15}> when 'true' ->
	      let <_cor1> =
		  %% Line 221
		  call 'erlang':'length'
		      (Locals)
	      in  %% Line 221
		  {_cor1,Locals}
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'local_table',1}}] )
	    -| ['compiler_generated'] )
	end
'export_table'/1 =
    %% Line 227
    fun (_cor0) ->
	case _cor0 of
	  <{'asm',_cor3,Exports,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15}> when 'true' ->
	      let <_cor1> =
		  %% Line 228
		  call 'erlang':'length'
		      (Exports)
	      in  %% Line 228
		  {_cor1,Exports}
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'export_table',1}}] )
	    -| ['compiler_generated'] )
	end
'import_table'/1 =
    %% Line 234
    fun (_cor0) ->
	case _cor0 of
	  <{'asm',_cor10,_cor11,_cor12,Imp,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,NumImports,_cor19,_cor20,_cor21}> when 'true' ->
	      let <_cor1> =
		  %% Line 235
		  call 'gb_trees':'to_list'
		      (Imp)
	      in  let <Sorted> =
		      %% Line 235
		      call 'lists':'keysort'
			  (2, _cor1)
		  in  let <_cor7> =
			  %% Line 236
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor5) ->
					case _cor5 of
					  <[{MFA,_cor22}|_cor4]> when 'true' ->
					      let <_cor6> =
						  apply 'lc$^0'/1
						      (_cor4)
					      in  ( [MFA|_cor6]
						    -| ['compiler_generated'] )
					  ( <[_cor3|_cor4]> when 'true' ->
						apply 'lc$^0'/1
						    (_cor4)
					    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_489> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor5})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (Sorted)
			    -| ['list_comprehension'] )
		      in  %% Line 237
			  {NumImports,_cor7}
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'import_table',1}}] )
	    -| ['compiler_generated'] )
	end
'string_table'/1 =
    %% Line 241
    fun (_cor0) ->
	case _cor0 of
	  <{'asm',_cor2,_cor3,_cor4,_cor5,Strings,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,Size,_cor12,_cor13}> when 'true' ->
	      %% Line 242
	      {Size,Strings}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'string_table',1}}] )
	    -| ['compiler_generated'] )
	end
'lambda_table'/1 =
    %% Line 246
    fun (_cor0) ->
	case _cor0 of
	  <{'asm',_cor19,_cor20,Loc0,_cor21,_cor22,Lambdas0,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30}> when 'true' ->
	      let <Lambdas1> =
		  %% Line 247
		  call 'sofs':'relation'
		      (Lambdas0)
	      in  let <_cor6> =
		      %% Line 248
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor4) ->
				    case _cor4 of
				      <[{F,A,Lbl}|_cor3]> when 'true' ->
					  let <_cor5> =
					      apply 'lc$^0'/1
						  (_cor3)
					  in  ( [{Lbl,{F,A}}|_cor5]
						-| ['compiler_generated'] )
				      ( <[_cor2|_cor3]> when 'true' ->
					    apply 'lc$^0'/1
						(_cor3)
					-| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_3072> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor4})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(Loc0)
			-| ['list_comprehension'] )
		  in  let <Loc> =
			  %% Line 248
			  call 'sofs':'relation'
			      (_cor6)
		      in  let <Lambdas2> =
			      %% Line 249
			      call 'sofs':'relative_product1'
				  (Lambdas1, Loc)
			  in  let <_cor15> =
				  %% Line 250
				  ( letrec
					'lc$^1'/1 =
					    fun (_cor12) ->
						case _cor12 of
						  <[%% Line 251
						    {{_cor31,Lbl,Index,NumFree,OldUniq},{F,A}}|_cor10]> when 'true' ->
						      let <_cor13> =
							  #{#<F>(32,1,'integer',['unsigned'|['big']]),
							    #<A>(32,1,'integer',['unsigned'|['big']]),
							    #<Lbl>(32,1,'integer',['unsigned'|['big']]),
							    #<Index>(32,1,'integer',['unsigned'|['big']]),
							    #<NumFree>(32,1,'integer',['unsigned'|['big']]),
							    #<OldUniq>(32,1,'integer',['unsigned'|['big']])}#
						      in  let <_cor14> =
							      %% Line 251
							      apply 'lc$^1'/1
								  (_cor10)
							  in  ( [_cor13|_cor14]
								-| ['compiler_generated'] )
						  ( <[_cor9|_cor10]> when 'true' ->
							%% Line 251
							apply 'lc$^1'/1
							    (_cor10)
						    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_1879> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor12})
							  -| [{'function_name',{'lc$^1',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  let <_cor11> =
					    %% Line 251
					    call 'sofs':'to_external'
						(Lambdas2)
					in  apply 'lc$^1'/1
						(_cor11)
				    -| ['list_comprehension'] )
			      in  let <_cor17> =
				      %% Line 252
				      call 'erlang':'length'
					  (_cor15)
				  in  %% Line 252
				      {_cor17,_cor15}
	  ( <_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'lambda_table',1}}] )
	    -| ['compiler_generated'] )
	end
'literal_table'/1 =
    %% Line 258
    fun (_cor0) ->
	case _cor0 of
	  <{'asm',_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,Tab,_cor26,_cor27,_cor28,_cor29,_cor30,NumLiterals,_cor31}> when 'true' ->
	      let <_cor8> =
		  %% Line 259
		  fun (_cor4,_cor3,_cor2) ->
		      let <_cor1> =
			  %% Line 267
			  call 'erlang':'term_to_binary'
			      (_cor4, [{'minor_version',1}])
		      in  %% Line 260
			  [{_cor3,_cor1}|_cor2]
	      in  let <L0> =
		      %% Line 259
		      call 'dict':'fold'
			  (_cor8, %% Line 261
				  [], Tab)
		  in  let <L1> =
			  %% Line 262
			  call 'lists':'sort'
			      (L0)
		      in  let <_cor17> =
			      %% Line 263
			      ( letrec
				    'lc$^0'/1 =
					fun (_cor13) ->
					    case _cor13 of
					      <[{_cor32,Term}|_cor12]> when 'true' ->
						  let <_cor14> =
						      call 'erlang':'byte_size'
							  (Term)
						  in  let <_cor15> =
							  #{#<_cor14>(32,1,'integer',['unsigned'|['big']])}#
						      in  let <_cor16> =
							      apply 'lc$^0'/1
								  (_cor12)
							  in  ( [[_cor15|[Term|[]]]|_cor16]
								-| ['compiler_generated'] )
					      ( <[_cor11|_cor12]> when 'true' ->
						    apply 'lc$^0'/1
							(_cor12)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_429> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor13})
						      -| [{'function_name',{'lc$^0',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^0'/1
					(L1)
				-| ['list_comprehension'] )
			  in  %% Line 264
			      {NumLiterals,_cor17}
	  ( <_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'literal_table',1}}] )
	    -| ['compiler_generated'] )
	end
'line_table'/1 =
    %% Line 275
    fun (_cor0) ->
	case _cor0 of
	  <{'asm',_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,Fnames0,Lines0,NumLineInstrs,_cor27,_cor28,_cor29,_cor30}> when 'true' ->
	      let <NumFnames> =
		  %% Line 276
		  call 'gb_trees':'size'
		      (Fnames0)
	      in  let <_cor2> =
		      %% Line 277
		      call 'gb_trees':'to_list'
			  (Fnames0)
		  in  let <Fnames1> =
			  %% Line 277
			  call 'lists':'keysort'
			      (2, _cor2)
		      in  let <_cor8> =
			      %% Line 278
			      ( letrec
				    'lc$^0'/1 =
					fun (_cor6) ->
					    case _cor6 of
					      <[{Name,_cor31}|_cor5]> when 'true' ->
						  let <_cor7> =
						      apply 'lc$^0'/1
							  (_cor5)
						  in  ( [Name|_cor7]
							-| ['compiler_generated'] )
					      ( <[_cor4|_cor5]> when 'true' ->
						    apply 'lc$^0'/1
							(_cor5)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_334> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor6})
						      -| [{'function_name',{'lc$^0',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^0'/1
					(Fnames1)
				-| ['list_comprehension'] )
			  in  let <NumLines> =
				  %% Line 279
				  call 'gb_trees':'size'
				      (Lines0)
			      in  let <_cor11> =
				      %% Line 280
				      call 'gb_trees':'to_list'
					  (Lines0)
				  in  let <Lines1> =
					  %% Line 280
					  call 'lists':'keysort'
					      (2, _cor11)
				      in  let <_cor17> =
					      %% Line 281
					      ( letrec
						    'lc$^1'/1 =
							fun (_cor15) ->
							    case _cor15 of
							      <[{L,_cor32}|_cor14]> when 'true' ->
								  let <_cor16> =
								      apply 'lc$^1'/1
									  (_cor14)
								  in  ( [L|_cor16]
									-| ['compiler_generated'] )
							      ( <[_cor13|_cor14]> when 'true' ->
								    apply 'lc$^1'/1
									(_cor14)
								-| ['compiler_generated'] )
							      <[]> when 'true' ->
								  []
							      ( <_2253> when 'true' ->
								    ( primop 'match_fail'
									  ({'function_clause',_cor15})
								      -| [{'function_name',{'lc$^1',1}}] )
								-| ['compiler_generated'] )
							    end
						in  apply 'lc$^1'/1
							(Lines1)
						-| ['list_comprehension'] )
					  in  %% Line 282
					      {NumLineInstrs,NumFnames,_cor8,NumLines,_cor17}
	  ( <_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'line_table',1}}] )
	    -| ['compiler_generated'] )
	end
'old_string'/2 =
    %% Line 288
    fun (_cor1,_cor0) ->
	let <_133> =
	    %% Line 289
	    call 'binary':'match'
		(_cor0, _cor1)
	in  %% Line 289
	    case _133 of
	      %% Line 290
	      <'nomatch'> when 'true' ->
		  'none'
	      %% Line 291
	      <{Start,_X_Length}> when 'true' ->
		  let <_cor2> =
		      call 'erlang':'byte_size'
			  (_cor0)
		  in  call 'erlang':'-'
			  (_cor2, Start)
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_133})
		-| ['compiler_generated'] )
	    end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('beam_dict')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('beam_dict', _cor0)
end