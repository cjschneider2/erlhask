module 'beam_receive' ['module'/2,
		       'module_info'/0,
		       'module_info'/1]
    attributes []
'module'/2 =
    %% Line 67
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Mod,Exp,Attr,Fs0,Lc},_X_Opts> when 'true' ->
	      let <_cor7> =
		  %% Line 68
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[F|_cor3]> when 'true' ->
				      let <_cor5> =
					  apply 'function'/1
					      (F)
				      in  let <_cor6> =
					      apply 'lc$^0'/1
						  (_cor3)
					  in  ( [_cor5|_cor6]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_1106> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Fs0)
		    -| ['list_comprehension'] )
	      in  let <Code> =
		      %% Line 69
		      {Mod,Exp,Attr,_cor7,Lc}
		  in  %% Line 70
		      {'ok',Code}
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'module',2}}] )
	    -| ['compiler_generated'] )
	end
'function'/1 =
    %% Line 76
    fun (_cor0) ->
	case _cor0 of
	  <{'function',Name,Arity,Entry,Is}> when 'true' ->
	      %% Line 77
	      try
		  let <D> =
		      %% Line 78
		      call 'beam_utils':'index_labels'
			  (Is)
		  in  let <_cor2> =
			  %% Line 79
			  apply 'opt'/3
			      (Is, D, [])
		      in  %% Line 79
			  {'function',Name,Arity,Entry,_cor2}
	      of <_cor3> ->
		  _cor3
	      catch <_cor6,_cor5,_cor4> ->
		  let <Stack> =
		      %% Line 82
		      call 'erlang':'get_stacktrace'
			  ()
		  in  do  %% Line 83
			  call 'io':'fwrite'
			      ([70|[117|[110|[99|[116|[105|[111|[110|[58|[32|[126|[119|[47|[126|[119|[10]]]]]]]]]]]]]]]], [Name|[Arity|[]]])
			  %% Line 84
			  call 'erlang':'raise'
			      (_cor6, _cor5, Stack)
	  ( <_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'function',1}}] )
	    -| ['compiler_generated'] )
	end
'opt'/3 =
    %% Line 87
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[I0 = {'call_ext',A,{'extfunc','erlang','spawn_monitor',_cor14}}|Is0],D,Acc>
	      when let <_cor15> =
		    call 'erlang':'=:='
			(_cor14, A)
		in  let <_cor3> =
			%% Line 88
			call 'erlang':'=:='
			    (A, 1)
		    in  let <_cor4> =
			    %% Line 88
			    call 'erlang':'=:='
				(A, 3)
			in  let <_cor16> =
				%% Line 88
				call 'erlang':'or'
				    (_cor3, _cor4)
			    in  call 'erlang':'and'
				    (_cor15, _cor16) ->
	      let <_252> =
		  %% Line 89
		  apply 'ref_in_tuple'/1
		      (Is0)
	      in  %% Line 89
		  case _252 of
		    %% Line 90
		    <'no'> when 'true' ->
			%% Line 91
			apply 'opt'/3
			    (Is0, _cor1, [I0|_cor0])
		    %% Line 92
		    <{'yes',Regs,Is1,MatchReversed}> when 'true' ->
			let <_3117> =
			    %% Line 96
			    apply 'opt_recv'/3
				(Is1, Regs, _cor1)
			in  %% Line 96
			    case _3117 of
			      %% Line 97
			      <'no'> when 'true' ->
				  %% Line 98
				  apply 'opt'/3
				      (Is0, _cor1, [I0|_cor0])
			      %% Line 99
			      <{'yes',Is,Lbl}> when 'true' ->
				  let <_cor5> =
				      %% Line 100
				      call 'erlang':'++'
					  (MatchReversed, [I0|[{'recv_mark',{'f',Lbl}}|_cor0]])
				  in  %% Line 100
				      apply 'opt'/3
					  (Is, _cor1, _cor5)
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_3117})
				-| ['compiler_generated'] )
			    end
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_252})
		      -| ['compiler_generated'] )
		  end
	  %% Line 103
	  <[I = {'call_ext',Arity,{'extfunc','erlang',Name,_cor17}}|Is0],D,Acc>
	      when call 'erlang':'=:='
		    (_cor17,
		     Arity) ->
	      let <_1476> =
		  %% Line 141
		  case <Name,Arity> of
		    <'monitor',2> when 'true' ->
			'true'
		    %% Line 142
		    <'make_ref',0> when 'true' ->
			'true'
		    %% Line 143
		    <_cor4,_cor5> when 'true' ->
			'false'
		  end
	      in  %% Line 104
		  case _1476 of
		    %% Line 105
		    <'true'> when 'true' ->
			let <_1663> =
			    %% Line 109
			    apply 'opt_recv'/3
				(Is0, %% Line 362
				      {1,0}, _cor1)
			in  %% Line 109
			    case _1663 of
			      %% Line 110
			      <'no'> when 'true' ->
				  %% Line 111
				  apply 'opt'/3
				      (Is0, _cor1, [I|_cor0])
			      %% Line 112
			      <{'yes',Is,Lbl}> when 'true' ->
				  %% Line 113
				  apply 'opt'/3
				      (Is, _cor1, [I|[{'recv_mark',{'f',Lbl}}|_cor0]])
			      ( <_cor9> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_1663})
				-| ['compiler_generated'] )
			    end
		    %% Line 115
		    <'false'> when 'true' ->
			%% Line 116
			apply 'opt'/3
			    (Is0, _cor1, [I|_cor0])
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_1476})
		      -| ['compiler_generated'] )
		  end
	  %% Line 118
	  <[I|Is],D,Acc> when 'true' ->
	      %% Line 119
	      apply 'opt'/3
		  (Is, _cor1, [I|_cor0])
	  %% Line 120
	  <[],_cor18,Acc> when 'true' ->
	      %% Line 121
	      call 'lists':'reverse'
		  (_cor0)
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'opt',3}}] )
	    -| ['compiler_generated'] )
	end
'ref_in_tuple'/1 =
    %% Line 123
    fun (_cor0) ->
	case _cor0 of
	  <[I1 = {'test','is_tuple',_cor2,[{'x',0}]}|%% Line 124
						     [I2 = {'test','test_arity',_cor3,[{'x',0}|[2]]}|%% Line 126
												     [I3 = {'block',[{'set',[_cor4|[]],[{'x',0}],{'get_tuple_element',0}}|[{'set',[Dst|[]],[{'x',0}],{'get_tuple_element',1}}|Bl]]}|Is]]]> when 'true' ->
	      %% Line 127
	      apply 'ref_in_tuple_1'/4
		  (Bl, Dst, Is, [I3|[I2|[I1|[]]]])
	  %% Line 128
	  <[I1 = {'test','is_tuple',_cor5,[{'x',0}]}|%% Line 129
						     [I2 = {'test','test_arity',_cor6,[{'x',0}|[2]]}|%% Line 130
												     [I3 = {'block',[{'set',[Dst|[]],[{'x',0}],{'get_tuple_element',1}}|Bl]}|Is]]]> when 'true' ->
	      %% Line 131
	      apply 'ref_in_tuple_1'/4
		  (Bl, Dst, Is, [I3|[I2|[I1|[]]]])
	  %% Line 132
	  <_cor7> when 'true' ->
	      'no'
	end
'ref_in_tuple_1'/4 =
    %% Line 134
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Regs0> =
	    %% Line 356
	    apply 'regs_add'/2
		(_cor2, {0,0})
	in  let <Regs> =
		%% Line 136
		apply 'opt_update_regs_bl'/2
		    (_cor3, Regs0)
	    in  %% Line 137
		{'yes',Regs,_cor1,_cor0}
'opt_recv'/3 =
    %% Line 148
    fun (_cor2,_cor1,_cor0) ->
	let <L> =
	    %% Line 149
	    call 'gb_sets':'empty'
		()
	in  %% Line 150
	    apply 'opt_recv'/5
		(_cor2, _cor0, _cor1, L, [])
'opt_recv'/5 =
    %% Line 152
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Lbl = {'label',L}|[Loop = {'loop_rec',{'f',Fail},_cor17}|Is]],D,R0,_cor18,Acc> when 'true' ->
	      let <R> =
		  %% Line 153
		  apply 'regs_kill_not_live'/2
		      (0, _cor2)
	      in  let <_3717> =
		      %% Line 368
		      call 'erlang':'=:='
			  (R, {0,0})
		  in  %% Line 154
		      case _3717 of
			%% Line 155
			<'false'> when 'true' ->
			    let <_4020> =
				%% Line 160
				apply 'opt_ref_used'/4
				    (Is, R, Fail, _cor3)
			    in  %% Line 160
				case _4020 of
				  %% Line 161
				  <'false'> when 'true' ->
				      %% Line 162
				      'no'
				  %% Line 163
				  <'true'> when 'true' ->
				      let <RecvSet> = {%% Line 164
					   'recv_set',%% Line 164
						      {'f',L}}
				      in  let <_cor7> =
					      %% Line 165
					      call 'lists':'reverse'
						  (_cor0, [RecvSet|[Lbl|[Loop|Is]]])
					  in  %% Line 165
					      {'yes',_cor7,L}
				  ( <_cor8> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_4020})
				    -| ['compiler_generated'] )
				end
			%% Line 167
			<'true'> when 'true' ->
			    %% Line 168
			    'no'
			( <_cor9> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_3717})
			  -| ['compiler_generated'] )
		      end
	  %% Line 170
	  <[I|Is],D,R0,L0,Acc> when 'true' ->
	      let <_1513> =
		  %% Line 171
		  apply 'opt_update_regs'/3
		      (I, _cor2, _cor1)
	      in  %% Line 171
		  case _1513 of
		    <{R,L}> when 'true' ->
			let <_1636> =
			    %% Line 368
			    call 'erlang':'=:='
				(R, {0,0})
			in  %% Line 172
			    case _1636 of
			      %% Line 173
			      <'true'> when 'true' ->
				  %% Line 176
				  'no'
			      %% Line 177
			      <'false'> when 'true' ->
				  %% Line 178
				  apply 'opt_recv'/5
				      (Is, _cor3, R, L, [I|_cor0])
			      ( <_cor11> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_1636})
				-| ['compiler_generated'] )
			    end
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_1513})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'opt_recv',5}}] )
	    -| ['compiler_generated'] )
	end
'opt_update_regs'/3 =
    %% Line 181
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'block',Bl},R,L> when 'true' ->
	      let <_cor3> =
		  %% Line 182
		  apply 'opt_update_regs_bl'/2
		      (Bl, _cor1)
	      in  %% Line 182
		  {_cor3,_cor0}
	  %% Line 183
	  <{'call',_cor15,_cor16},R,L> when 'true' ->
	      let <_cor4> =
		  %% Line 184
		  apply 'regs_kill_not_live'/2
		      (0, _cor1)
	      in  %% Line 184
		  {_cor4,_cor0}
	  %% Line 185
	  <{'call_ext',_cor17,_cor18},R,L> when 'true' ->
	      let <_cor5> =
		  %% Line 186
		  apply 'regs_kill_not_live'/2
		      (0, _cor1)
	      in  %% Line 186
		  {_cor5,_cor0}
	  %% Line 187
	  <{'call_fun',_cor19},R,L> when 'true' ->
	      let <_cor6> =
		  %% Line 188
		  apply 'regs_kill_not_live'/2
		      (0, _cor1)
	      in  %% Line 188
		  {_cor6,_cor0}
	  %% Line 189
	  <{'kill',Y},R,L> when 'true' ->
	      let <_cor7> =
		  %% Line 190
		  apply 'regs_kill'/2
		      ([Y|[]], _cor1)
	      in  %% Line 190
		  {_cor7,_cor0}
	  %% Line 191
	  <{'catch',_cor20,{'f',Lbl}},R,L> when 'true' ->
	      let <_cor8> =
		  %% Line 192
		  call 'gb_sets':'add'
		      (Lbl, _cor0)
	      in  %% Line 192
		  {_cor1,_cor8}
	  %% Line 193
	  <{'catch_end',_cor21},R,L> when 'true' ->
	      %% Line 194
	      {_cor1,_cor0}
	  %% Line 195
	  <{'label',Lbl},R,L> when 'true' ->
	      let <_2384> =
		  %% Line 196
		  call 'gb_sets':'is_member'
		      (Lbl, _cor0)
	      in  %% Line 196
		  case _2384 of
		    %% Line 197
		    <'false'> when 'true' ->
			%% Line 200
			{%% Line 350
			 {0,0},_cor0}
		    %% Line 201
		    <'true'> when 'true' ->
			%% Line 203
			{_cor1,_cor0}
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_2384})
		      -| ['compiler_generated'] )
		  end
	  %% Line 205
	  <{'try_end',_cor22},R,L> when 'true' ->
	      %% Line 206
	      {_cor1,_cor0}
	  %% Line 207
	  <{'line',_cor23},R,L> when 'true' ->
	      %% Line 208
	      {_cor1,_cor0}
	  %% Line 209
	  <_X_I,_X_R,L> when 'true' ->
	      %% Line 211
	      {%% Line 350
	       {0,0},_cor0}
	end
'opt_update_regs_bl'/2 =
    %% Line 213
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'set',Ds,_cor11,{'alloc',Live,_cor12}}|Is],Regs0> when 'true' ->
	      let <Regs1> =
		  %% Line 214
		  apply 'regs_kill_not_live'/2
		      (Live, _cor0)
	      in  let <Regs> =
		      %% Line 215
		      apply 'regs_kill'/2
			  (Ds, Regs1)
		  in  %% Line 216
		      apply 'opt_update_regs_bl'/2
			  (Is, Regs)
	  %% Line 217
	  <[{'set',Ds = [Dst|[]],[Src|[]],'move'}|Is],Regs0> when 'true' ->
	      let <Regs1> =
		  %% Line 218
		  apply 'regs_kill'/2
		      (Ds, _cor0)
	      in  let <_250> =
		      %% Line 219
		      apply 'regs_is_member'/2
			  (Src, Regs1)
		  in  let <_cor6> =
			  %% Line 219
			  case _250 of
			    %% Line 220
			    <'false'> when 'true' ->
				Regs1
			    %% Line 221
			    <'true'> when 'true' ->
				apply 'regs_add'/2
				    (Dst, Regs1)
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_250})
			      -| ['compiler_generated'] )
			  end
		      in  %% Line 223
			  apply 'opt_update_regs_bl'/2
			      (Is, _cor6)
	  %% Line 224
	  <[{'set',Ds,_cor13,_cor14}|Is],Regs0> when 'true' ->
	      let <Regs> =
		  %% Line 225
		  apply 'regs_kill'/2
		      (Ds, _cor0)
	      in  %% Line 226
		  apply 'opt_update_regs_bl'/2
		      (Is, Regs)
	  %% Line 227
	  <[],Regs> when 'true' ->
	      _cor0
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'opt_update_regs_bl',2}}] )
	    -| ['compiler_generated'] )
	end
'opt_ref_used'/4 =
    %% Line 248
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Done> =
	    %% Line 249
	    call 'gb_sets':'singleton'
		(_cor1)
	in  %% Line 251
	    try
		do  %% Line 252
		    apply 'opt_ref_used_1'/5
			(_cor3, _cor2, _cor0, Done, %% Line 362
						    {1,0})
		    %% Line 253
		    'true'
	    of <_cor7> ->
		_cor7
	    catch <_cor10,_cor9,_cor8> ->
		case <_cor10,_cor9,_cor8> of
		  %% Line 255
		  <'throw','not_used',_cor15> when 'true' ->
		      %% Line 256
		      'false'
		  ( <_2415,_1550,_1306> when 'true' ->
			primop 'raise'
			    (_cor8, _cor9)
		    -| ['compiler_generated'] )
		end
'opt_ref_used_1'/5 =
    %% Line 261
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{'block',Bl}|Is],RefRegs,D,Done,Regs0> when 'true' ->
	      let <Regs> =
		  %% Line 262
		  apply 'opt_ref_used_bl'/2
		      (Bl, _cor0)
	      in  %% Line 263
		  apply 'opt_ref_used_1'/5
		      (Is, _cor3, _cor2, _cor1, Regs)
	  %% Line 264
	  <[{'test','is_eq_exact',{'f',Fail},Args}|Is],RefRegs,D,Done0,Regs> when 'true' ->
	      let <Done> =
		  %% Line 266
		  apply 'opt_ref_used_at'/5
		      (Fail, _cor3, _cor2, _cor1, _cor0)
	      in  let <_1657> =
		      %% Line 267
		      apply 'is_ref_msg_comparison'/3
			  (Args, _cor3, _cor0)
		  in  %% Line 267
		      case _1657 of
			%% Line 268
			<'false'> when 'true' ->
			    %% Line 269
			    apply 'opt_ref_used_1'/5
				(Is, _cor3, _cor2, Done, _cor0)
			%% Line 270
			<'true'> when 'true' ->
			    Done
			( <_cor7> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_1657})
			  -| ['compiler_generated'] )
		      end
	  %% Line 275
	  <[{'test','is_ne_exact',{'f',Fail},Args}|Is],RefRegs,D,Done0,Regs> when 'true' ->
	      let <Done> =
		  %% Line 277
		  apply 'opt_ref_used_1'/5
		      (Is, _cor3, _cor2, _cor1, _cor0)
	      in  let <_3399> =
		      %% Line 278
		      apply 'is_ref_msg_comparison'/3
			  (Args, _cor3, _cor0)
		  in  %% Line 278
		      case _3399 of
			%% Line 279
			<'false'> when 'true' ->
			    %% Line 280
			    apply 'opt_ref_used_at'/5
				(Fail, _cor3, _cor2, Done, _cor0)
			%% Line 281
			<'true'> when 'true' ->
			    Done
			( <_cor9> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_3399})
			  -| ['compiler_generated'] )
		      end
	  %% Line 284
	  <[{'test',_cor23,{'f',Fail},_cor24}|Is],RefRegs,D,Done0,Regs> when 'true' ->
	      let <Done> =
		  %% Line 285
		  apply 'opt_ref_used_at'/5
		      (Fail, _cor3, _cor2, _cor1, _cor0)
	      in  %% Line 286
		  apply 'opt_ref_used_1'/5
		      (Is, _cor3, _cor2, Done, _cor0)
	  %% Line 287
	  <[{'select',_cor25,_cor26,{'f',Fail},List}|_cor27],RefRegs,D,Done,Regs> when 'true' ->
	      let <_cor15> =
		  %% Line 288
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor13) ->
				case _cor13 of
				  <[{'f',F}|_cor12]> when 'true' ->
				      let <_cor14> =
					  apply 'lc$^0'/1
					      (_cor12)
				      in  ( [F|_cor14]
					    -| ['compiler_generated'] )
				  ( <[_cor11|_cor12]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor12)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      [Fail|[]]
				  ( <_2664> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor13})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (List)
		    -| ['list_comprehension'] )
	      in  %% Line 289
		  apply 'opt_ref_used_in_all'/5
		      (_cor15, _cor3, _cor2, _cor1, _cor0)
	  %% Line 290
	  <[{'label',Lbl}|Is],RefRegs,D,Done,Regs> when 'true' ->
	      let <_3501> =
		  %% Line 291
		  call 'gb_sets':'is_member'
		      (Lbl, _cor1)
	      in  %% Line 291
		  case _3501 of
		    %% Line 292
		    <'true'> when 'true' ->
			_cor1
		    %% Line 293
		    <'false'> when 'true' ->
			apply 'opt_ref_used_1'/5
			    (Is, _cor3, _cor2, _cor1, _cor0)
		    ( <_cor17> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_3501})
		      -| ['compiler_generated'] )
		  end
	  %% Line 295
	  <[{'loop_rec_end',_cor28}|_cor29],_cor30,_cor31,Done,_cor32> when 'true' ->
	      _cor1
	  %% Line 297
	  <[_X_I|_cor33],_X_RefReg,_X_D,_X_Done,_X_Regs> when 'true' ->
	      %% Line 299
	      call 'erlang':'throw'
		  ('not_used')
	  ( <_cor22,_cor21,_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'opt_ref_used_1',5}}] )
	    -| ['compiler_generated'] )
	end
'is_ref_msg_comparison'/3 =
    %% Line 304
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[R1|[R2|[]]],RefRegs,Regs> when 'true' ->
	      let <_1663> =
		  %% Line 305
		  apply 'regs_is_member'/2
		      (R2, _cor1)
	      in  let <_cor6> =
		      %% Line 305
		      ( case _1663 of
			  ( <( 'true'
			       -| ['compiler_generated'] )> when 'true' ->
				apply 'regs_is_member'/2
				    (R1, _cor0)
			    -| ['compiler_generated'] )
			  ( <( 'false'
			       -| ['compiler_generated'] )> when 'true' ->
				'false'
			    -| ['compiler_generated'] )
			  ( <_cor4> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {( 'badarg'
					    -| ['compiler_generated'] ),_1663}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  in  %% Line 305
		      ( case _cor6 of
			  ( <( 'true'
			       -| ['compiler_generated'] )> when 'true' ->
				'true'
			    -| ['compiler_generated'] )
			  ( <( 'false'
			       -| ['compiler_generated'] )> when 'true' ->
				let <_2041> =
				    %% Line 306
				    apply 'regs_is_member'/2
					(R1, _cor1)
				in  %% Line 306
				    ( case _2041 of
					( <( 'true'
					     -| ['compiler_generated'] )> when 'true' ->
					      apply 'regs_is_member'/2
						  (R2, _cor0)
					  -| ['compiler_generated'] )
					( <( 'false'
					     -| ['compiler_generated'] )> when 'true' ->
					      'false'
					  -| ['compiler_generated'] )
					( <_cor7> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {( 'badarg'
							  -| ['compiler_generated'] ),_2041}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <_cor3> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {( 'badarg'
					    -| ['compiler_generated'] ),_cor6}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'is_ref_msg_comparison',3}}] )
	    -| ['compiler_generated'] )
	end
'opt_ref_used_in_all'/5 =
    %% Line 308
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[L|Ls],RefRegs,D,Done0,Regs> when 'true' ->
	      let <Done> =
		  %% Line 309
		  apply 'opt_ref_used_at'/5
		      (L, _cor3, _cor2, _cor1, _cor0)
	      in  %% Line 310
		  apply 'opt_ref_used_in_all'/5
		      (Ls, _cor3, _cor2, Done, _cor0)
	  %% Line 311
	  <[],_cor11,_cor12,Done,_cor13> when 'true' ->
	      _cor1
	  ( <_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'opt_ref_used_in_all',5}}] )
	    -| ['compiler_generated'] )
	end
'opt_ref_used_at'/5 =
    %% Line 313
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_1081> =
	    %% Line 314
	    call 'gb_sets':'is_member'
		(_cor4, _cor1)
	in  %% Line 314
	    case _1081 of
	      %% Line 315
	      <'true'> when 'true' ->
		  _cor1
	      %% Line 317
	      <'false'> when 'true' ->
		  let <Is> =
		      %% Line 318
		      call 'beam_utils':'code_at'
			  (_cor4, _cor2)
		  in  let <Done> =
			  %% Line 319
			  apply 'opt_ref_used_1'/5
			      (Is, _cor3, _cor2, _cor1, _cor0)
		      in  %% Line 320
			  call 'gb_sets':'add'
			      (_cor4, Done)
	      ( <_cor7> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_1081})
		-| ['compiler_generated'] )
	    end
'opt_ref_used_bl'/2 =
    %% Line 323
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'set',[],[],'remove_message'}|_cor7],_cor8> when 'true' ->
	      %% Line 326
	      call 'erlang':'throw'
		  ('not_used')
	  %% Line 327
	  <[{'set',Ds,Ss,_cor9}|Is],Regs0> when 'true' ->
	      let <_644> =
		  %% Line 328
		  apply 'regs_all_members'/2
		      (Ss, _cor0)
	      in  %% Line 328
		  case _644 of
		    %% Line 329
		    <'false'> when 'true' ->
			let <Regs> =
			    %% Line 332
			    apply 'regs_kill'/2
				(Ds, _cor0)
			in  %% Line 333
			    apply 'opt_ref_used_bl'/2
				(Is, Regs)
		    %% Line 334
		    <'true'> when 'true' ->
			let <_cor6> =
			    %% Line 388
			    fun (_cor3,_cor2) ->
				apply 'regs_add'/2
				    (_cor3, _cor2)
			in  let <Regs> =
				%% Line 388
				call 'lists':'foldl'
				    (_cor6, _cor0, Ds)
			    in  %% Line 338
				apply 'opt_ref_used_bl'/2
				    (Is, Regs)
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_644})
		      -| ['compiler_generated'] )
		  end
	  %% Line 340
	  <[],Regs> when 'true' ->
	      _cor0
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'opt_ref_used_bl',2}}] )
	    -| ['compiler_generated'] )
	end
'regs_kill_not_live'/2 =
    %% Line 373
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Live,{Xregs,Yregs}> when 'true' ->
	      let <_cor2> =
		  %% Line 374
		  call 'erlang':'bsl'
		      (1, _cor1)
	      in  let <_cor3> =
		      %% Line 374
		      call 'erlang':'-'
			  (_cor2, 1)
		  in  let <_cor4> =
			  %% Line 374
			  call 'erlang':'band'
			      (Xregs, _cor3)
		      in  %% Line 374
			  {_cor4,Yregs}
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'regs_kill_not_live',2}}] )
	    -| ['compiler_generated'] )
	end
'regs_kill'/2 =
    %% Line 379
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'x',N}|Rs],{Xregs,Yregs}> when 'true' ->
	      let <_cor2> =
		  %% Line 380
		  call 'erlang':'bsl'
		      (1, N)
	      in  let <_cor3> =
		      %% Line 380
		      call 'erlang':'bnot'
			  (_cor2)
		  in  let <_cor4> =
			  %% Line 380
			  call 'erlang':'band'
			      (Xregs, _cor3)
		      in  %% Line 380
			  apply 'regs_kill'/2
			      (Rs, {_cor4,Yregs})
	  %% Line 381
	  <[{'y',N}|Rs],{Xregs,Yregs}> when 'true' ->
	      let <_cor5> =
		  %% Line 382
		  call 'erlang':'bsl'
		      (1, N)
	      in  let <_cor6> =
		      %% Line 382
		      call 'erlang':'bnot'
			  (_cor5)
		  in  let <_cor7> =
			  %% Line 382
			  call 'erlang':'band'
			      (Yregs, _cor6)
		      in  %% Line 382
			  apply 'regs_kill'/2
			      (Rs, {Xregs,_cor7})
	  %% Line 383
	  <[{'fr',_cor10}|Rs],Regs> when 'true' ->
	      %% Line 384
	      apply 'regs_kill'/2
		  (Rs, _cor0)
	  %% Line 385
	  <[],Regs> when 'true' ->
	      _cor0
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'regs_kill',2}}] )
	    -| ['compiler_generated'] )
	end
'regs_add'/2 =
    %% Line 393
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'x',N},{Xregs,Yregs}> when 'true' ->
	      let <_cor2> =
		  %% Line 394
		  call 'erlang':'bsl'
		      (1, N)
	      in  let <_cor3> =
		      %% Line 394
		      call 'erlang':'bor'
			  (Xregs, _cor2)
		  in  %% Line 394
		      {_cor3,Yregs}
	  %% Line 395
	  <{'y',N},{Xregs,Yregs}> when 'true' ->
	      let <_cor4> =
		  %% Line 396
		  call 'erlang':'bsl'
		      (1, N)
	      in  let <_cor5> =
		      %% Line 396
		      call 'erlang':'bor'
			  (Yregs, _cor4)
		  in  %% Line 396
		      {Xregs,_cor5}
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'regs_add',2}}] )
	    -| ['compiler_generated'] )
	end
'regs_all_members'/2 =
    %% Line 401
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[R|Rs],Regs> when 'true' ->
	      let <_1248> =
		  %% Line 402
		  apply 'regs_is_member'/2
		      (R, _cor0)
	      in  %% Line 402
		  ( case _1248 of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    apply 'regs_all_members'/2
				(Rs, _cor0)
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    'false'
			-| ['compiler_generated'] )
		      ( <_cor2> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_1248}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 403
	  <[],_cor6> when 'true' ->
	      'true'
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'regs_all_members',2}}] )
	    -| ['compiler_generated'] )
	end
'regs_is_member'/2 =
    %% Line 408
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'x',N},{Regs,_cor8}> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'bsl'
		      (1, N)
	      in  let <_cor3> =
		      call 'erlang':'band'
			  (Regs, _cor2)
		  in  call 'erlang':'=/='
			  (_cor3, 0)
	  %% Line 409
	  <{'y',N},{_cor9,Regs}> when 'true' ->
	      let <_cor4> =
		  call 'erlang':'bsl'
		      (1, N)
	      in  let <_cor5> =
		      call 'erlang':'band'
			  (Regs, _cor4)
		  in  call 'erlang':'=/='
			  (_cor5, 0)
	  %% Line 410
	  <_cor10,_cor11> when 'true' ->
	      'false'
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('beam_receive')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('beam_receive', _cor0)
end