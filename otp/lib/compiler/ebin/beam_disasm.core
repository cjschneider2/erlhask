module 'beam_disasm' ['file'/1,
		      'format_error'/1,
		      'function__code'/1,
		      'module_info'/0,
		      'module_info'/1]
    attributes [%% Line 33
		'author' =
		    %% Line 33
		    [75|[111|[115|[116|[105|[115|[32|[83|[97|[103|[111|[110|[97|[115]]]]]]]]]]]]]],
		%% Line 26
		'type' =
		    %% Line 26
		    [{'beam_instr',{'type',26,'union',[{'atom',26,'bs_init_writable'}|[{'atom',26,'fclearerror'}|[{'atom',26,'if_end'}|[{'atom',27,'remove_message'}|[{'atom',27,'return'}|[{'atom',27,'send'}|[{'atom',27,'timeout'}|[{'type',28,'tuple','any'}]]]]]]]]},[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','function'},[{'typed_record_field',{'record_field',34,{'atom',34,'name'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'type',34,'atom',[]}]]}}|[{'typed_record_field',{'record_field',35,{'atom',35,'arity'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'byte',[]}]]}}|[{'record_field',36,{'atom',36,'entry'}}|[{'typed_record_field',{'record_field',37,{'atom',37,'code'},{'nil',37}},{'type',37,'list',[{'type',37,'beam_instr',[]}]}}]]]],[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','beam_file'},[{'typed_record_field',{'record_field',39,{'atom',39,'module'}},{'type',39,'union',[{'atom',39,'undefined'}|[{'type',39,'module',[]}]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'labeled_exports'},{'nil',40}},{'type',40,'list',[{'remote_type',40,[{'atom',40,'beam_lib'}|[{'atom',40,'labeled_entry'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',41,{'atom',41,'attributes'},{'nil',41}},{'type',41,'list',[{'remote_type',41,[{'atom',41,'beam_lib'}|[{'atom',41,'attrib_entry'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'compile_info'},{'nil',42}},{'type',42,'list',[{'remote_type',42,[{'atom',42,'beam_lib'}|[{'atom',42,'compinfo_entry'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'code'},{'nil',43}},{'type',43,'list',[{'type',43,'record',[{'atom',43,'function'}]}]}}]]]]],[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{'index',{'type',40,'non_neg_integer',[]},[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{'literals',{'type',41,'union',[{'atom',41,'none'}|[{'remote_type',41,[{'atom',41,'gb_trees'}|[{'atom',41,'tree'}|[[{'type',41,'index',[]}|[{'type',41,'term',[]}]]]]]}]]},[]}],
		%% Line 42
		'type' =
		    %% Line 42
		    [{'symbolic_tag',{'type',42,'union',[{'atom',42,'a'}|[{'atom',42,'f'}|[{'atom',42,'h'}|[{'atom',42,'i'}|[{'atom',42,'u'}|[{'atom',42,'x'}|[{'atom',42,'y'}|[{'atom',42,'z'}]]]]]]]]},[]}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{'disasm_tag',{'type',43,'union',[{'type',43,'symbolic_tag',[]}|[{'atom',43,'fr'}|[{'atom',43,'atom'}|[{'atom',43,'float'}|[{'atom',43,'literal'}]]]]]},[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{'disasm_term',{'type',44,'union',[{'atom',44,'nil'}|[{'type',44,'tuple',[{'type',44,'disasm_tag',[]}|[{'var',44,'_'}]]}]]},[]}],
		%% Line 63
		'spec' =
		    %% Line 63
		    [{{'function__code',1},[{'type',63,'fun',[{'type',63,'product',[{'type',63,'record',[{'atom',63,'function'}]}]}|[{'type',63,'list',[{'type',63,'beam_instr',[]}]}]]}]}],
		%% Line 66
		'spec' =
		    %% Line 66
		    [{{'function__code_update',2},[{'type',66,'fun',[{'type',66,'product',[{'type',66,'record',[{'atom',66,'function'}]}|[{'type',66,'list',[{'type',66,'beam_instr',[]}]}]]}|[{'type',66,'record',[{'atom',66,'function'}]}]]}]}],
		%% Line 73
		'spec' =
		    %% Line 73
		    [{{'format_error',1},[{'type',73,'fun',[{'type',73,'product',[{'type',73,'union',[{'type',73,'tuple',[{'atom',73,'internal'}|[{'type',73,'term',[]}]]}|[{'type',73,'tuple',[{'atom',73,'error'}|[{'type',73,'atom',[]}|[{'type',73,'term',[]}]]]}]]}]}|[{'type',73,'string',[]}]]}]}],
		%% Line 161
		'spec' =
		    %% Line 161
		    [{{'file',1},[{'type',161,'fun',[{'type',161,'product',[{'type',161,'union',[{'remote_type',161,[{'atom',161,'file'}|[{'atom',161,'filename'}|[[]]]]}|[{'type',161,'binary',[]}]]}]}|[{'type',161,'union',[{'type',161,'record',[{'atom',161,'beam_file'}]}|[{'type',161,'tuple',[{'atom',161,'error'}|[{'type',161,'atom',[]}|[{'var',161,'_'}]]]}]]}]]}]}],
		%% Line 219
		'type' =
		    %% Line 219
		    [{'l_info',{'type',219,'tuple',[{'type',219,'non_neg_integer',[]}|[{'type',219,'tuple',[{'var',219,'_'}|[{'var',219,'_'}|[{'var',219,'_'}|[{'var',219,'_'}|[{'var',219,'_'}|[{'var',219,'_'}]]]]]]}]]},[]}],
		%% Line 220
		'spec' =
		    %% Line 220
		    [{{'beam_disasm_lambdas',2},[{'type',220,'fun',[{'type',220,'product',[{'type',220,'union',[{'atom',220,'none'}|[{'type',220,'binary',[]}]]}|[{'remote_type',220,[{'atom',220,'gb_trees'}|[{'atom',220,'tree'}|[[{'type',220,'index',[]}|[{'var',220,'_'}]]]]]}]]}|[{'type',221,'union',[{'atom',221,'none'}|[{'type',221,'list',[{'type',221,'l_info',[]}]}]]}]]}]}],
		%% Line 237
		'spec' =
		    %% Line 237
		    [{{'beam_disasm_literals',1},[{'type',237,'fun',[{'type',237,'product',[{'type',237,'union',[{'atom',237,'none'}|[{'type',237,'binary',[]}]]}]}|[{'type',237,'literals',[]}]]}]}],
		%% Line 427
		'spec' =
		    %% Line 427
		    [{{'decode_arg',1},[{'type',427,'fun',[{'type',427,'product',[{'type',427,'nonempty_list',[{'type',427,'byte',[]}]}]}|[{'type',427,'tuple',[{'type',427,'tuple',[{'type',427,'disasm_tag',[]}|[{'var',427,'_'}]]}|[{'type',427,'list',[{'type',427,'byte',[]}]}]]}]]}]}],
		%% Line 440
		'spec' =
		    %% Line 440
		    [{{'decode_arg',3},[{'type',440,'fun',[{'type',440,'product',[{'type',440,'nonempty_list',[{'type',440,'byte',[]}]}|[{'remote_type',440,[{'atom',440,'gb_trees'}|[{'atom',440,'tree'}|[[{'type',440,'index',[]}|[{'var',440,'_'}]]]]]}|[{'type',440,'literals',[]}]]]}|[{'type',441,'tuple',[{'type',441,'disasm_term',[]}|[{'type',441,'list',[{'type',441,'byte',[]}]}]]}]]}]}],
		%% Line 496
		'spec' =
		    %% Line 496
		    [{{'decode_int_length',2},[{'type',496,'fun',[{'type',496,'product',[{'type',496,'integer',[]}|[{'type',496,'list',[{'type',496,'byte',[]}]}]]}|[{'type',496,'tuple',[{'type',496,'integer',[]}|[{'type',496,'list',[{'type',496,'byte',[]}]}]]}]]}]}],
		%% Line 514
		'spec' =
		    %% Line 514
		    [{{'decode_negative',2},[{'type',514,'fun',[{'type',514,'product',[{'type',514,'non_neg_integer',[]}|[{'type',514,'non_neg_integer',[]}]]}|[{'type',514,'neg_integer',[]}]]}]}],
		%% Line 548
		'spec' =
		    %% Line 548
		    [{{'decode_float',1},[{'type',548,'fun',[{'type',548,'product',[{'type',548,'nonempty_list',[{'type',548,'byte',[]}]}]}|[{'type',548,'tuple',[{'type',548,'tuple',[{'atom',548,'float'}|[{'type',548,'float',[]}]]}|[{'type',548,'list',[{'type',548,'byte',[]}]}]]}]]}]}],
		%% Line 555
		'spec' =
		    %% Line 555
		    [{{'decode_fr',1},[{'type',555,'fun',[{'type',555,'product',[{'type',555,'nonempty_list',[{'type',555,'byte',[]}]}]}|[{'type',555,'tuple',[{'type',555,'tuple',[{'atom',555,'fr'}|[{'type',555,'non_neg_integer',[]}]]}|[{'type',555,'list',[{'type',555,'byte',[]}]}]]}]]}]}],
		%% Line 581
		'spec' =
		    %% Line 581
		    [{{'take_bytes',2},[{'type',581,'fun',[{'type',581,'product',[{'type',581,'non_neg_integer',[]}|[{'type',581,'list',[{'type',581,'byte',[]}]}]]}|[{'type',581,'tuple',[{'type',581,'list',[{'type',581,'byte',[]}]}|[{'type',581,'list',[{'type',581,'byte',[]}]}]]}]]}]}],
		%% Line 621
		'spec' =
		    %% Line 621
		    [{{'decode_tag',1},[{'type',621,'fun',[{'type',621,'product',[{'type',621,'range',[{'integer',621,0}|[{'integer',621,7}]]}]}|[{'type',621,'symbolic_tag',[]}]]}]}]]
'function__code'/1 =
    %% Line 64
    fun (_cor0) ->
	case _cor0 of
	  <{'function',_cor2,_cor3,_cor4,Code}> when 'true' ->
	      Code
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'function__code',1}}] )
	    -| ['compiler_generated'] )
	end
'format_error'/1 =
    %% Line 75
    fun (_cor0) ->
	case _cor0 of
	  <{'internal',Error}> when 'true' ->
	      %% Line 76
	      call 'io_lib':'format'
		  ([126|[112|[58|[32|[100|[105|[115|[97|[115|[115|[101|[109|[98|[108|[121|[32|[102|[97|[105|[108|[101|[100|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[80|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 77
																													    ['beam_disasm'|[Error|[25]]])
	  %% Line 78
	  <{'error',Module,Error}> when 'true' ->
	      let <_cor1> =
		  %% Line 79
		  call Module:'format_error'
		      (Error)
	      in  %% Line 79
		  call 'lists':'flatten'
		      (_cor1)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'format_error',1}}] )
	    -| ['compiler_generated'] )
	end
'file'/1 =
    %% Line 163
    fun (_cor0) ->
	%% Line 164
	try
	    apply 'process_chunks'/1
		(_cor0)
	of <_cor1> ->
	    _cor1
	catch <_cor4,_cor3,_cor2> ->
	    case <_cor4,_cor3,_cor2> of
	      %% Line 165
	      <'error',Reason,_cor7> when 'true' ->
		  let <_cor5> =
		      %% Line 166
		      call 'erlang':'get_stacktrace'
			  ()
		  in  %% Line 166
		      {'error','beam_disasm',{'internal',{_cor3,_cor5}}}
	      ( <_3983,_4136,_1263> when 'true' ->
		    primop 'raise'
			(_cor2, _cor3)
		-| ['compiler_generated'] )
	    end
'process_chunks'/1 =
    %% Line 173
    fun (_cor0) ->
	let <_2374> =
	    %% Line 174
	    call 'beam_lib':'chunks'
		(_cor0, ['atoms'|[[67|[111|[100|[101]]]]|[[83|[116|[114|[84]]]]|['indexed_imports'|['labeled_exports']]]]])
	in  %% Line 174
	    case _2374 of
	      %% Line 176
	      <{'ok',{Module,%% Line 177
			     [{'atoms',AtomsList}|[{[67|[111|[100|[101]]]],CodeBin}|[{[83|[116|[114|[84]]]],StrBin}|%% Line 178
														    [{'indexed_imports',ImportsList}|[{'labeled_exports',Exports}|[]]]]]]}}> when 'true' ->
		  let <Atoms> =
		      %% Line 1210
		      call 'gb_trees':'from_orddict'
			  (AtomsList)
		  in  let <LambdaBin> =
			  %% Line 180
			  apply 'optional_chunk'/2
			      (_cor0, [70|[117|[110|[84]]]])
		      in  let <Lambdas> =
			      %% Line 181
			      apply 'beam_disasm_lambdas'/2
				  (LambdaBin, Atoms)
			  in  let <LiteralBin> =
				  %% Line 182
				  apply 'optional_chunk'/2
				      (_cor0, [76|[105|[116|[84]]]])
			      in  let <Literals> =
				      %% Line 183
				      apply 'beam_disasm_literals'/1
					  (LiteralBin)
				  in  let <_cor5> =
					  %% Line 1207
					  ( letrec
						'lc$^0'/1 =
						    fun (_cor3) ->
							case _cor3 of
							  <[{I,M,F,A}|_cor2]> when 'true' ->
							      let <_cor4> =
								  apply 'lc$^0'/1
								      (_cor2)
							      in  ( [{I,{'extfunc',M,F,A}}|_cor4]
								    -| ['compiler_generated'] )
							  ( <[_cor1|_cor2]> when 'true' ->
								apply 'lc$^0'/1
								    (_cor2)
							    -| ['compiler_generated'] )
							  <[]> when 'true' ->
							      []
							  ( <_3334> when 'true' ->
								primop 'match_fail'
								    ({'function_clause',_cor3})
							    -| ['compiler_generated'] )
							end
					    in  apply 'lc$^0'/1
						    (ImportsList)
					    -| ['list_comprehension'] )
				      in  let <_cor6> =
					      %% Line 1207
					      call 'gb_trees':'from_orddict'
						  (_cor5)
					  in  let <Code> =
						  %% Line 184
						  apply 'beam_disasm_code'/7
						      (CodeBin, Atoms, _cor6, StrBin, Lambdas, Literals, Module)
					      in  let <_5540> =
						      %% Line 187
						      apply 'optional_chunk'/2
							  (_cor0, 'attributes')
						  in  let <_cor9> =
							  %% Line 187
							  case _5540 of
							    %% Line 188
							    <'none'> when 'true' ->
								[]
							    %% Line 189
							    <Atts>
								when call 'erlang':'is_list'
								      (_5540) ->
								_5540
							    ( <_cor8> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_5540})
							      -| ['compiler_generated'] )
							  end
						      in  let <_2794> =
							      %% Line 192
							      apply 'optional_chunk'/2
								  (_cor0, [67|[73|[110|[102]]]])
							  in  let <_cor12> =
								  %% Line 192
								  case _2794 of
								    %% Line 193
								    <'none'> when 'true' ->
									[]
								    %% Line 194
								    <CompInfoBin>
									when call 'erlang':'is_binary'
									      (_2794) ->
									%% Line 195
									call 'erlang':'binary_to_term'
									    (_2794)
								    ( <_cor11> when 'true' ->
									  primop 'match_fail'
									      ({'case_clause',_2794})
								      -| ['compiler_generated'] )
								  end
							      in  %% Line 197
								  {'beam_file',Module,Exports,_cor9,_cor12,Code}
	      %% Line 202
	      <Error> when 'true' ->
		  _2374
	    end
'optional_chunk'/2 =
    %% Line 209
    fun (_cor1,_cor0) ->
	let <_3905> =
	    %% Line 210
	    call 'beam_lib':'chunks'
		(_cor1, [_cor0|[]])
	in  %% Line 210
	    case _3905 of
	      %% Line 211
	      <{'ok',{_X_Module,[{_cor5,Chunk}|[]]}}>
		  when call 'erlang':'=:='
			(_cor5,
			 _cor0) ->
		  Chunk
	      %% Line 212
	      <{'error','beam_lib',{'missing_chunk',_cor6,_cor7}}> when 'true' ->
		  'none'
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_3905})
		-| ['compiler_generated'] )
	    end
'beam_disasm_lambdas'/2 =
    %% Line 223
    fun (_cor1,_cor0) ->
	case <( _cor1
		-| ['reuse_for_context'] ),_cor0> of
	  <'none',_cor4> when 'true' ->
	      'none'
	  %% Line 224
	  <#{#<_cor5>(32,1,'integer',['unsigned'|['big']]),
	     #<Tab>('all',8,'binary',['unsigned'|['big']])}#,Atoms> when 'true' ->
	      %% Line 225
	      apply 'disasm_lambdas'/3
		  (Tab, _cor0, 0)
	  ( <_cor3,_cor2> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor1)
		    ( primop 'match_fail'
			  ({'function_clause',_cor1,_cor0})
		      -| [{'function_name',{'beam_disasm_lambdas',2}}] )
	    -| ['compiler_generated'] )
	end
'disasm_lambdas'/3 =
    %% Line 227
    fun (_cor2,_cor1,_cor0) ->
	case <( _cor2
		-| ['reuse_for_context'] ),_cor1,_cor0> of
	  <#{#<F>(32,1,'integer',['unsigned'|['big']]),
	     #<A>(32,1,'integer',['unsigned'|['big']]),
	     #<Lbl>(32,1,'integer',['unsigned'|['big']]),
	     #<Index>(32,1,'integer',['unsigned'|['big']]),
	     #<NumFree>(32,1,'integer',['unsigned'|['big']]),
	     #<OldUniq>(32,1,'integer',['unsigned'|['big']]),
	     #<More>('all',8,'binary',['unsigned'|['big']])}#,Atoms,OldIndex> when 'true' ->
	      let <_cor3> =
		  %% Line 1216
		  call 'gb_trees':'get'
		      (F, _cor1)
	      in  let <Info> =
		      %% Line 229
		      {_cor3,A,Lbl,Index,NumFree,OldUniq}
		  in  let <_cor5> =
			  %% Line 230
			  call 'erlang':'+'
			      (_cor0, 1)
		      in  let <_cor6> =
			      %% Line 230
			      apply 'disasm_lambdas'/3
				  (More, _cor1, _cor5)
			  in  %% Line 230
			      [{_cor0,Info}|_cor6]
	  %% Line 231
	  <#{}#,_cor10,_cor11> when 'true' ->
	      []
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor2)
		    ( primop 'match_fail'
			  ({'function_clause',_cor2,_cor1,_cor0})
		      -| [{'function_name',{'disasm_lambdas',3}}] )
	    -| ['compiler_generated'] )
	end
'beam_disasm_literals'/1 =
    %% Line 239
    fun (_cor0) ->
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <'none'> when 'true' ->
	      'none'
	  %% Line 240
	  <#{#<_cor4>(32,1,'integer',['unsigned'|['big']]),
	     #<Compressed>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      let <_2716> =
		  %% Line 241
		  call 'zlib':'uncompress'
		      (Compressed)
	      in  %% Line 241
		  case ( _2716
			 -| ['reuse_for_context'] ) of
		    <#{#<_cor5>(32,1,'integer',['unsigned'|['big']]),
		       #<Tab>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			let <_cor2> =
			    %% Line 242
			    apply 'disasm_literals'/2
				(Tab, 0)
			in  %% Line 242
			    call 'gb_trees':'from_orddict'
				(_cor2)
		    ( <_cor1> when 'true' ->
			  do  primop 'bs_context_to_binary'
				  (_2716)
			      primop 'match_fail'
				  ({'badmatch',_2716})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor0)
		    ( primop 'match_fail'
			  ({'function_clause',_cor0})
		      -| [{'function_name',{'beam_disasm_literals',1}}] )
	    -| ['compiler_generated'] )
	end
'disasm_literals'/2 =
    %% Line 244
    fun (_cor1,_cor0) ->
	case <( _cor1
		-| ['reuse_for_context'] ),_cor0> of
	  <#{#<Sz>(32,1,'integer',['unsigned'|['big']]),
	     #<Ext>(Sz,8,'binary',['unsigned'|['big']]),
	     #<T>('all',8,'binary',['unsigned'|['big']])}#,Index> when 'true' ->
	      let <_cor2> =
		  %% Line 245
		  call 'erlang':'binary_to_term'
		      (Ext)
	      in  let <_cor3> =
		      %% Line 245
		      call 'erlang':'+'
			  (_cor0, 1)
		  in  let <_cor4> =
			  %% Line 245
			  apply 'disasm_literals'/2
			      (T, _cor3)
		      in  %% Line 245
			  [{_cor0,_cor2}|_cor4]
	  %% Line 246
	  <#{}#,_cor7> when 'true' ->
	      []
	  ( <_cor6,_cor5> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor1)
		    ( primop 'match_fail'
			  ({'function_clause',_cor1,_cor0})
		      -| [{'function_name',{'disasm_literals',2}}] )
	    -| ['compiler_generated'] )
	end
'beam_disasm_code'/7 =
    %% Line 254
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <( _cor6
		-| ['reuse_for_context'] ),_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <#{#<_X_SS>(32,1,'integer',['unsigned'|['big']]),
	     #<_X_IS>(%% Line 255
		      32,1,'integer',['unsigned'|['big']]),
	     #<_X_OM>(%% Line 256
		      32,1,'integer',['unsigned'|['big']]),
	     #<_X_L>(%% Line 257
		     32,1,'integer',['unsigned'|['big']]),
	     #<_X_F>(%% Line 257
		     32,1,'integer',['unsigned'|['big']]),
	     #<CodeBin>(%% Line 258
			'all',8,'binary',['unsigned'|['big']])}#,Atoms,Imports,Str,Lambdas,Literals,M> when 'true' ->
	      let <Code> =
		  %% Line 260
		  call 'erlang':'binary_to_list'
		      (CodeBin)
	      in  %% Line 261
		  try
		      apply 'disasm_code'/3
			  (Code, _cor5, _cor1)
		  of <_cor8> ->
		      let <Functions> =
			  %% Line 297
			  case _cor8 of
			    <[]> when 'true' ->
				%% Line 298
				call 'erlang':'exit'
				    ({'beam_disasm',298,'empty_code_segment'})
			    %% Line 299
			    <_404> when 'true' ->
				let <_4776> =
				    %% Line 300
				    apply 'labels_r'/2
					(_cor8, [])
				in  %% Line 300
				    apply 'get_funs'/1
					(_4776)
			  end
		      in  let <_cor10> =
			      %% Line 264
			      apply 'local_labels'/1
				  (Functions)
			  in  let <Labels> =
				  %% Line 1213
				  call 'gb_trees':'from_orddict'
				      (_cor10)
			      in  %% Line 265
				  ( letrec
					'lc$^0'/1 =
					    fun (_cor14) ->
						case _cor14 of
						  <[Function = %% Line 268
							       {'function',_cor29,_cor30,_cor31,Is}|_cor13]> when 'true' ->
						      let <_cor15> =
							  %% Line 266
							  apply 'resolve_names'/7
							      (Is, _cor4, _cor3, Labels, _cor2, _cor1, _cor0)
						      in  let <_cor16> =
							      call 'erlang':'setelement'
								  (5, Function, _cor15)
							  in  let <_cor17> =
								  %% Line 268
								  apply 'lc$^0'/1
								      (_cor13)
							      in  ( [_cor16|_cor17]
								    -| ['compiler_generated'] )
						  ( <[_cor12|_cor13]> when 'true' ->
							%% Line 268
							apply 'lc$^0'/1
							    (_cor13)
						    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_4501> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor14})
							  -| [{'function_name',{'lc$^0',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  apply 'lc$^0'/1
					    (Functions)
				    -| ['list_comprehension'] )
		  catch <_cor21,_cor20,_cor19> ->
		      case <_cor21,_cor20,_cor19> of
			%% Line 270
			<'error',Rsn,_cor32> when 'true' ->
			    %% Line 272
			    call 'erlang':'exit'
				({'beam_disasm',272,_cor20})
			( <_4075,_3009,_7219> when 'true' ->
			      primop 'raise'
				  (_cor19, _cor20)
			  -| ['compiler_generated'] )
		      end
	  ( <_cor28,_cor27,_cor26,_cor25,_cor24,_cor23,_cor22> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor6)
		    ( primop 'match_fail'
			  ({'function_clause',_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0})
		      -| [{'function_name',{'beam_disasm_code',7}}] )
	    -| ['compiler_generated'] )
	end
'disasm_code'/3 =
    %% Line 277
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[B|Bs],Atoms,Literals> when 'true' ->
	      let <_5189> =
		  %% Line 278
		  apply 'disasm_instr'/4
		      (B, Bs, _cor1, _cor0)
	      in  %% Line 278
		  case _5189 of
		    <{Instr,RestBs}> when 'true' ->
			let <_cor4> =
			    %% Line 279
			    apply 'disasm_code'/3
				(RestBs, _cor1, _cor0)
			in  %% Line 279
			    [Instr|_cor4]
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5189})
		      -| ['compiler_generated'] )
		  end
	  %% Line 280
	  <[],_cor8,_cor9> when 'true' ->
	      []
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'disasm_code',3}}] )
	    -| ['compiler_generated'] )
	end
'get_function_chunks'/1 =
    %% Line 297
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 298
	      call 'erlang':'exit'
		  ({'beam_disasm',298,'empty_code_segment'})
	  %% Line 299
	  <Code> when 'true' ->
	      let <_cor1> =
		  %% Line 300
		  apply 'labels_r'/2
		      (_cor0, [])
	      in  %% Line 300
		  apply 'get_funs'/1
		      (_cor1)
	end
'labels_r'/2 =
    %% Line 302
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],R> when 'true' ->
	      {_cor0,[]}
	  %% Line 303
	  <[I = {'label',_cor4}|Is],R> when 'true' ->
	      %% Line 304
	      apply 'labels_r'/2
		  (Is, [I|_cor0])
	  %% Line 305
	  <[I = {'line',_cor5}|Is],R> when 'true' ->
	      %% Line 306
	      apply 'labels_r'/2
		  (Is, [I|_cor0])
	  %% Line 307
	  <Is,R> when 'true' ->
	      {_cor0,_cor1}
	end
'get_funs'/1 =
    %% Line 309
    fun (_cor0) ->
	case _cor0 of
	  <{[],[]}> when 'true' ->
	      []
	  %% Line 310
	  <{_cor11,[]}> when 'true' ->
	      %% Line 311
	      call 'erlang':'exit'
		  ({'beam_disasm',311,'no_func_info_in_code_segment'})
	  %% Line 312
	  <{LsR0,[{'func_info',[AtomM = {'atom',M}|[AtomF = {'atom',F}|[ArityArg|[]]]]}|Code0]}>
	      when let <_cor1> =
		    %% Line 313
		    call 'erlang':'is_atom'
			(M)
		in  let <_cor2> =
			%% Line 313
			call 'erlang':'is_atom'
			    (F)
		    in  %% Line 313
			call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 1188
	      case ArityArg of
		<{'u',N}>
		    when let <_cor1> =
			  call 'erlang':'is_integer'
			      (N)
		      in  let <_cor2> =
			      call 'erlang':'>='
				  (N, 0)
			  in  call 'erlang':'and'
				  (_cor1, _cor2) ->
		    let <_4917> =
			apply 'get_fun'/2
			    (Code0, [])
		    in  case _4917 of
			  <{LsR,Code,RestCode}> when 'true' ->
			      let <_cor6> =
				  case Code of
				    <[{'label',[{'u',E}|[]]}|_cor12]> when 'true' ->
					E
				    <_cor13> when 'true' ->
					'undefined'
				  end
			      in  let <_cor8> =
				      call 'lists':'reverse'
					  (LsR0, [{'func_info',AtomM,AtomF,N}|Code])
				  in  let <_cor9> =
					  apply 'get_funs'/1
					      ({LsR,RestCode})
				      in  [{'function',F,N,_cor6,_cor8}|_cor9]
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_4917})
			    -| ['compiler_generated'] )
			end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'function_clause',ArityArg})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'get_funs',1}}] )
	    -| ['compiler_generated'] )
	end
'get_fun'/2 =
    %% Line 326
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Is = [{'func_info',_cor8}|_cor9],R0> when 'true' ->
	      let <_1055> =
		  %% Line 327
		  apply 'labels_r'/2
		      (_cor0, [])
	      in  %% Line 327
		  case _1055 of
		    <{LsR,R}> when 'true' ->
			let <_cor3> =
			    %% Line 328
			    call 'lists':'reverse'
				(R)
			in  %% Line 328
			    {LsR,_cor3,_cor1}
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_1055})
		      -| ['compiler_generated'] )
		  end
	  %% Line 329
	  <[{'int_code_end',[]}],R> when 'true' ->
	      let <_cor4> =
		  %% Line 330
		  call 'lists':'reverse'
		      (_cor0)
	      in  %% Line 330
		  {[],_cor4,[]}
	  %% Line 331
	  <[I|Is],R> when 'true' ->
	      %% Line 332
	      apply 'get_fun'/2
		  (Is, [I|_cor0])
	  %% Line 333
	  <[],R> when 'true' ->
	      do  %% Line 334
		  call 'io':'format'
		      ('warning: code segment did not end with int_code_end~n', [])
		  let <_cor5> =
		      %% Line 335
		      call 'lists':'reverse'
			  (_cor0)
		  in  %% Line 335
		      {[],_cor5,[]}
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'get_fun',2}}] )
	    -| ['compiler_generated'] )
	end
'local_labels'/1 =
    %% Line 341
    fun (_cor0) ->
	let <_cor6> =
	    %% Line 342
	    fun (_cor3,_cor2) ->
		case _cor3 of
		  <{'function',_5494,_760,_cor4,Code}> when 'true' ->
		      %% Line 343
		      apply 'local_labels_1'/2
			  (Code, _cor2)
		  ( <_cor1> when 'true' ->
			primop 'match_fail'
			    ({'function_clause',_cor3})
		    -| ['compiler_generated'] )
		end
	in  let <_cor7> =
		%% Line 342
		call 'lists':'foldl'
		    (_cor6, %% Line 344
			    [], _cor0)
	    in  %% Line 342
		call 'lists':'sort'
		    (_cor7)
'local_labels_1'/2 =
    %% Line 346
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 347
	    fun (_cor2) ->
		case _cor2 of
		  <{'label',_cor9}> when 'true' ->
		      'true'
		  %% Line 348
		  <{'line',_cor10}> when 'true' ->
		      'true'
		  %% Line 349
		  <{'func_info',_cor11,_cor12,_cor13}> when 'true' ->
		      'false'
		  ( <_cor3> when 'true' ->
			( primop 'match_fail'
			      ({'function_clause',_cor2})
			  -| [{'function_name',{'-local_labels_1/2-fun-0-',1}}] )
		    -| ['compiler_generated'] )
		end
	in  let <_5141> =
		%% Line 347
		call 'lists':'dropwhile'
		    (_cor4, _cor1)
	    in  %% Line 351
		case _5141 of
		  <[{'func_info',{'atom',M},{'atom',F},A}|Code]> when 'true' ->
		      %% Line 352
		      apply 'local_labels_2'/3
			  (Code, _cor0, {M,F,A})
		  ( <_cor6> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_5141})
		    -| ['compiler_generated'] )
		end
'local_labels_2'/3 =
    %% Line 354
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'label',[{'u',L}|[]]}|Code],R,MFA> when 'true' ->
	      %% Line 355
	      apply 'local_labels_2'/3
		  (Code, [{L,_cor0}|_cor1], _cor0)
	  %% Line 356
	  <_cor6,R,_cor7> when 'true' ->
	      _cor1
	end
'disasm_instr'/4 =
    %% Line 363
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_3089> =
	    %% Line 364
	    call 'beam_opcodes':'opname'
		(_cor3)
	in  %% Line 364
	    case _3089 of
	      <{SymOp,Arity}> when 'true' ->
		  %% Line 365
		  case SymOp of
		    %% Line 366
		    <'select_val'> when 'true' ->
			%% Line 367
			apply 'disasm_select_inst'/4
			    ('select_val', _cor2, _cor1, _cor0)
		    %% Line 368
		    <'select_tuple_arity'> when 'true' ->
			%% Line 369
			apply 'disasm_select_inst'/4
			    ('select_tuple_arity', _cor2, _cor1, _cor0)
		    %% Line 370
		    <'put_map_assoc'> when 'true' ->
			%% Line 371
			apply 'disasm_map_inst'/5
			    ('put_map_assoc', Arity, _cor2, _cor1, _cor0)
		    %% Line 372
		    <'put_map_exact'> when 'true' ->
			%% Line 373
			apply 'disasm_map_inst'/5
			    ('put_map_exact', Arity, _cor2, _cor1, _cor0)
		    %% Line 374
		    <'get_map_elements'> when 'true' ->
			%% Line 375
			apply 'disasm_map_inst'/5
			    ('get_map_elements', Arity, _cor2, _cor1, _cor0)
		    %% Line 376
		    <'has_map_fields'> when 'true' ->
			%% Line 377
			apply 'disasm_map_inst'/5
			    ('has_map_fields', Arity, _cor2, _cor1, _cor0)
		    %% Line 378
		    <_cor15> when 'true' ->
			%% Line 379
			try
			    apply 'decode_n_args'/4
				(Arity, _cor2, _cor1, _cor0)
			of <_cor5> ->
			    case _cor5 of
			      %% Line 380
			      <{Args,RestBs}> when 'true' ->
				  %% Line 382
				  {{SymOp,Args},RestBs}
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'try_clause',_cor5})
				-| ['compiler_generated'] )
			    end
			catch <_cor9,_cor8,_cor7> ->
			    case <_cor9,_cor8,_cor7> of
			      %% Line 384
			      <'error',Rsn,_cor16> when 'true' ->
				  %% Line 386
				  call 'erlang':'exit'
				      ({'beam_disasm',386,{'cannot_disasm_instr',{SymOp,Arity,_cor8}}})
			      ( <_1427,_54,_1594> when 'true' ->
				    primop 'raise'
					(_cor7, _cor8)
				-| ['compiler_generated'] )
			    end
		  end
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_3089})
		-| ['compiler_generated'] )
	    end
'disasm_select_inst'/4 =
    %% Line 399
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_3819> =
	    %% Line 400
	    apply 'decode_arg'/3
		(_cor2, _cor1, _cor0)
	in  %% Line 400
	    case _3819 of
	      <{X,Bs1}> when 'true' ->
		  let <_3014> =
		      %% Line 401
		      apply 'decode_arg'/3
			  (Bs1, _cor1, _cor0)
		  in  %% Line 401
		      case _3014 of
			<{F,Bs2}> when 'true' ->
			    let <_4462> =
				%% Line 402
				apply 'decode_arg'/3
				    (Bs2, _cor1, _cor0)
			    in  %% Line 402
				case _4462 of
				  <{Z,Bs3}> when 'true' ->
				      let <_3697> =
					  %% Line 403
					  apply 'decode_arg'/3
					      (Bs3, _cor1, _cor0)
				      in  %% Line 403
					  case _3697 of
					    <{U,Bs4}> when 'true' ->
						%% Line 404
						case U of
						  <{'u',Len}> when 'true' ->
						      let <_935> =
							  %% Line 405
							  apply 'decode_n_args'/4
							      (Len, Bs4, _cor1, _cor0)
						      in  %% Line 405
							  case _935 of
							    <{List,RestBs}> when 'true' ->
								%% Line 406
								{{_cor3,[X|[F|[{Z,U,List}|[]]]]},RestBs}
							    ( <_cor9> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_935})
							      -| ['compiler_generated'] )
							  end
						  ( <_cor8> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',U})
						    -| ['compiler_generated'] )
						end
					    ( <_cor7> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_3697})
					      -| ['compiler_generated'] )
					  end
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_4462})
				    -| ['compiler_generated'] )
				end
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_3014})
			  -| ['compiler_generated'] )
		      end
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_3819})
		-| ['compiler_generated'] )
	    end
'disasm_map_inst'/5 =
    %% Line 408
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_5386> =
	    %% Line 409
	    apply 'decode_n_args'/4
		(_cor3, _cor2, _cor1, _cor0)
	in  %% Line 409
	    case _5386 of
	      <{Args0,Bs1}> when 'true' ->
		  let <_3650> =
		      %% Line 411
		      call 'lists':'reverse'
			  (Args0)
		  in  %% Line 411
		      case _3650 of
			<[Z|Args1]> when 'true' ->
			    let <Args> =
				%% Line 412
				call 'lists':'reverse'
				    (Args1)
			    in  let <_1127> =
				    %% Line 413
				    apply 'decode_arg'/3
					(Bs1, _cor1, _cor0)
				in  %% Line 413
				    case _1127 of
				      <{U,Bs2}> when 'true' ->
					  %% Line 414
					  case U of
					    <{'u',Len}> when 'true' ->
						let <_1989> =
						    %% Line 415
						    apply 'decode_n_args'/4
							(Len, Bs2, _cor1, _cor0)
						in  %% Line 415
						    case _1989 of
						      <{List,RestBs}> when 'true' ->
							  let <_cor11> =
							      %% Line 416
							      call 'erlang':'++'
								  (Args, [{Z,U,List}|[]])
							  in  %% Line 416
							      {{_cor4,_cor11},RestBs}
						      ( <_cor10> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_1989})
							-| ['compiler_generated'] )
						    end
					    ( <_cor9> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',U})
					      -| ['compiler_generated'] )
					  end
				      ( <_cor8> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_1127})
					-| ['compiler_generated'] )
				    end
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_3650})
			  -| ['compiler_generated'] )
		      end
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_5386})
		-| ['compiler_generated'] )
	    end
'decode_arg'/1 =
    %% Line 429
    fun (_cor0) ->
	case _cor0 of
	  <[B|Bs]> when 'true' ->
	      let <_cor1> =
		  %% Line 430
		  call 'erlang':'band'
		      (B, 7)
	      in  let <Tag> =
		      %% Line 430
		      apply 'decode_tag'/1
			  (_cor1)
		  in  %% Line 432
		      case Tag of
			%% Line 433
			<'z'> when 'true' ->
			    %% Line 434
			    apply 'decode_z_tagged'/4
				(Tag, B, Bs, 'no_literals')
			%% Line 435
			<_cor5> when 'true' ->
			    %% Line 437
			    apply 'decode_int'/3
				(Tag, B, Bs)
		      end
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'decode_arg',1}}] )
	    -| ['compiler_generated'] )
	end
'decode_arg'/3 =
    %% Line 443
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[B|Bs0],Atoms,Literals> when 'true' ->
	      let <_cor3> =
		  %% Line 444
		  call 'erlang':'band'
		      (B, 7)
	      in  let <Tag> =
		      %% Line 444
		      apply 'decode_tag'/1
			  (_cor3)
		  in  %% Line 446
		      case Tag of
			%% Line 447
			<'z'> when 'true' ->
			    %% Line 448
			    apply 'decode_z_tagged'/4
				(Tag, B, Bs0, _cor0)
			%% Line 449
			<'a'> when 'true' ->
			    let <_389> =
				%% Line 451
				apply 'decode_int'/3
				    (Tag, B, Bs0)
			    in  %% Line 451
				case _389 of
				  %% Line 452
				  <{{'a',0},Bs}> when 'true' ->
				      {'nil',Bs}
				  %% Line 453
				  <{{'a',I},Bs}> when 'true' ->
				      let <_cor5> =
					  %% Line 1216
					  call 'gb_trees':'get'
					      (I, _cor1)
				      in  {{'atom',_cor5},Bs}
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_389})
				    -| ['compiler_generated'] )
				end
			%% Line 455
			<_cor11> when 'true' ->
			    %% Line 457
			    apply 'decode_int'/3
				(Tag, B, Bs0)
		      end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'decode_arg',3}}] )
	    -| ['compiler_generated'] )
	end
'decode_int'/3 =
    %% Line 474
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Tag,B,Bs>
	      when try
		    let <_cor3> =
			call 'erlang':'band'
			    (_cor1, 8)
		    in  call 'erlang':'=:='
			    (_cor3, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <N> =
		  %% Line 476
		  call 'erlang':'bsr'
		      (_cor1, 4)
	      in  %% Line 477
		  {{_cor2,N},_cor0}
	  %% Line 478
	  <Tag,B,Bs>
	      when try
		    let <_cor5> =
			call 'erlang':'band'
			    (_cor1, 16)
		    in  call 'erlang':'=:='
			    (_cor5, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 480
	      case _cor0 of
		<[B1|Bs1]> when 'true' ->
		    let <Val0> =
			%% Line 481
			call 'erlang':'band'
			    (_cor1, 224)
		    in  let <_cor8> =
			    %% Line 482
			    call 'erlang':'bsl'
				(Val0, 3)
			in  let <N> =
				%% Line 482
				call 'erlang':'bor'
				    (_cor8, B1)
			    in  %% Line 484
				{{_cor2,N},Bs1}
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor0})
		  -| ['compiler_generated'] )
	      end
	  %% Line 485
	  <Tag,B,Bs> when 'true' ->
	      let <_5863> =
		  %% Line 486
		  apply 'decode_int_length'/2
		      (_cor1, _cor0)
	      in  %% Line 486
		  case _5863 of
		    <{Len,Bs1}> when 'true' ->
			let <_4986> =
			    %% Line 584
			    apply 'take_bytes'/3
				(Len, Bs1, [])
			in  %% Line 487
			    case _4986 of
			      <{IntBs,RemBs}> when 'true' ->
				  let <N> =
				      %% Line 597
				      apply 'build_arg'/2
					  (IntBs, 0)
				  in  %% Line 489
				      case IntBs of
					<[F|_cor21]> when 'true' ->
					    let <_cor16> =
						%% Line 490
						case <> of
						  <>
						      when let <_cor14> =
							    call 'erlang':'>'
								(F, 127)
							in  let <_cor15> =
								call 'erlang':'=:='
								    (_cor2, 'i')
							    in  call 'erlang':'and'
								    (_cor14, _cor15) ->
						      let <_2276> =
							  %% Line 517
							  call 'erlang':'*'
							      (Len, 8)
						      in  let <_cor3> =
							      %% Line 517
							      call 'erlang':'bsl'
								  (1, _2276)
							  in  %% Line 517
							      call 'erlang':'-'
								  (N, _cor3)
						  %% Line 491
						  <> when 'true' ->
						      N
						end
					    in  %% Line 494
						{{_cor2,_cor16},RemBs}
					( <_cor13> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',IntBs})
					  -| ['compiler_generated'] )
				      end
			      ( <_cor11> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_4986})
				-| ['compiler_generated'] )
			    end
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5863})
		      -| ['compiler_generated'] )
		  end
	end
'decode_int_length'/2 =
    %% Line 498
    fun (_cor1,_cor0) ->
	let <_2425> =
	    %% Line 501
	    call 'erlang':'bsr'
		(_cor1, 5)
	in  %% Line 501
	    case _2425 of
	      %% Line 502
	      <7> when 'true' ->
		  let <_256> =
		      %% Line 503
		      apply 'decode_arg'/1
			  (_cor0)
		  in  %% Line 503
		      case _256 of
			<{Arg,ArgBs}> when 'true' ->
			    %% Line 504
			    case Arg of
			      %% Line 505
			      <{'u',L}> when 'true' ->
				  let <_cor3> =
				      %% Line 506
				      call 'erlang':'+'
					  (L, 9)
				  in  %% Line 506
				      {_cor3,ArgBs}
			      %% Line 507
			      <_cor9> when 'true' ->
				  %% Line 508
				  call 'erlang':'exit'
				      ({'beam_disasm',508,{'decode_int','weird_bignum_sublength',Arg}})
			    end
			( <_cor2> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_256})
			  -| ['compiler_generated'] )
		      end
	      %% Line 510
	      <L> when 'true' ->
		  let <_cor5> =
		      %% Line 511
		      call 'erlang':'+'
			  (_2425, 2)
		  in  %% Line 511
		      {_cor5,_cor0}
	    end
'decode_z_tagged'/4 =
    %% Line 523
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Tag,B,Bs,Literals>
	      when try
		    let <_cor4> =
			call 'erlang':'band'
			    (_cor2, 8)
		    in  call 'erlang':'=:='
			    (_cor4, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <N> =
		  %% Line 524
		  call 'erlang':'bsr'
		      (_cor2, 4)
	      in  %% Line 525
		  case N of
		    %% Line 526
		    <0> when 'true' ->
			%% Line 527
			apply 'decode_float'/1
			    (_cor1)
		    %% Line 528
		    <1> when 'true' ->
			%% Line 529
			{{_cor3,N},_cor1}
		    %% Line 530
		    <2> when 'true' ->
			%% Line 531
			apply 'decode_fr'/1
			    (_cor1)
		    %% Line 532
		    <3> when 'true' ->
			%% Line 533
			apply 'decode_alloc_list'/2
			    (_cor1, _cor0)
		    %% Line 534
		    <4> when 'true' ->
			let <_5471> =
			    %% Line 535
			    apply 'decode_arg'/1
				(_cor1)
			in  %% Line 535
			    case _5471 of
			      <{{'u',LitIndex},RestBs}> when 'true' ->
				  let <_5724> =
				      %% Line 536
				      call 'gb_trees':'get'
					  (LitIndex, _cor0)
				  in  %% Line 536
				      case _5724 of
					%% Line 537
					<Float>
					    when call 'erlang':'is_float'
						  (_5724) ->
					    %% Line 538
					    {{'float',_5724},RestBs}
					%% Line 539
					<Literal> when 'true' ->
					    %% Line 540
					    {{'literal',_5724},RestBs}
				      end
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_5471})
				-| ['compiler_generated'] )
			    end
		    %% Line 542
		    <_cor13> when 'true' ->
			%% Line 543
			call 'erlang':'exit'
			    ({'beam_disasm',543,{'decode_z_tagged',{'invalid_extended_tag',N}}})
		  end
	  %% Line 545
	  <_cor14,B,_cor15,_cor16> when 'true' ->
	      %% Line 546
	      call 'erlang':'exit'
		  ({'beam_disasm',546,{'decode_z_tagged',{'weird_value',_cor2}}})
	end
'decode_float'/1 =
    %% Line 550
    fun (_cor0) ->
	let <_4598> =
	    %% Line 584
	    apply 'take_bytes'/3
		(8, _cor0, [])
	in  %% Line 551
	    case _4598 of
	      <{FL,RestBs}> when 'true' ->
		  let <_3263> =
		      %% Line 552
		      call 'erlang':'list_to_binary'
			  (FL)
		  in  %% Line 552
		      case ( _3263
			     -| ['reuse_for_context'] ) of
			<#{#<Float>(64,1,'float',['unsigned'|['big']])}#> when 'true' ->
			    %% Line 553
			    {{'float',Float},RestBs}
			( <_cor2> when 'true' ->
			      do  primop 'bs_context_to_binary'
				      (_3263)
				  primop 'match_fail'
				      ({'badmatch',_3263})
			  -| ['compiler_generated'] )
		      end
	      ( <_cor1> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_4598})
		-| ['compiler_generated'] )
	    end
'decode_fr'/1 =
    %% Line 557
    fun (_cor0) ->
	let <_4423> =
	    %% Line 558
	    apply 'decode_arg'/1
		(_cor0)
	in  %% Line 558
	    case _4423 of
	      <{{'u',Fr},RestBs}> when 'true' ->
		  %% Line 559
		  {{'fr',Fr},RestBs}
	      ( <_cor1> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_4423})
		-| ['compiler_generated'] )
	    end
'decode_alloc_list'/2 =
    %% Line 561
    fun (_cor1,_cor0) ->
	let <_2641> =
	    %% Line 562
	    apply 'decode_arg'/1
		(_cor1)
	in  %% Line 562
	    case _2641 of
	      <{{'u',N},RestBs}> when 'true' ->
		  %% Line 563
		  apply 'decode_alloc_list_1'/4
		      (N, _cor0, RestBs, [])
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_2641})
		-| ['compiler_generated'] )
	    end
'decode_alloc_list_1'/4 =
    %% Line 565
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <0,_X_Literals,RestBs,Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 566
		  call 'lists':'reverse'
		      (_cor0)
	      in  %% Line 566
		  {{'u',{'alloc',_cor4}},_cor1}
	  %% Line 567
	  <N,Literals,Bs0,Acc> when 'true' ->
	      let <_2611> =
		  %% Line 568
		  apply 'decode_arg'/1
		      (_cor1)
	      in  %% Line 568
		  case _2611 of
		    <{{'u',Type},Bs1}> when 'true' ->
			let <_4007> =
			    %% Line 569
			    apply 'decode_arg'/1
				(Bs1)
			in  %% Line 569
			    case _4007 of
			      <{{'u',Val},Bs}> when 'true' ->
				  let <_cor9> =
				      %% Line 570
				      case Type of
					%% Line 571
					<0> when 'true' ->
					    {'words',Val}
					%% Line 572
					<1> when 'true' ->
					    {'floats',Val}
					%% Line 573
					<2> when 'true' ->
					    let <_cor7> =
						call 'gb_trees':'get'
						    (Val, _cor2)
					    in  {'literal',_cor7}
					( <_cor8> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',Type})
					  -| ['compiler_generated'] )
				      end
				  in  let <_cor11> =
					  %% Line 575
					  call 'erlang':'-'
					      (_cor3, 1)
				      in  %% Line 575
					  apply 'decode_alloc_list_1'/4
					      (_cor11, _cor2, Bs, [_cor9|_cor0])
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_4007})
				-| ['compiler_generated'] )
			    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_2611})
		      -| ['compiler_generated'] )
		  end
	end
'take_bytes'/3 =
    %% Line 586
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <N,[B|Bs],Acc>
	      when call 'erlang':'>'
		    (_cor2,
		     0) ->
	      let <_cor3> =
		  %% Line 587
		  call 'erlang':'-'
		      (_cor2, 1)
	      in  %% Line 587
		  apply 'take_bytes'/3
		      (_cor3, Bs, [B|_cor0])
	  %% Line 588
	  <0,Bs,Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 589
		  call 'lists':'reverse'
		      (_cor0)
	      in  %% Line 589
		  {_cor4,_cor1}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'take_bytes',3}}] )
	    -| ['compiler_generated'] )
	end
'build_arg'/2 =
    %% Line 599
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[B|Bs],N> when 'true' ->
	      let <_cor2> =
		  %% Line 600
		  call 'erlang':'bsl'
		      (_cor0, 8)
	      in  let <_cor3> =
		      %% Line 600
		      call 'erlang':'bor'
			  (_cor2, B)
		  in  %% Line 600
		      apply 'build_arg'/2
			  (Bs, _cor3)
	  %% Line 601
	  <[],N> when 'true' ->
	      _cor0
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'build_arg',2}}] )
	    -| ['compiler_generated'] )
	end
'decode_n_args'/4 =
    %% Line 608
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <N,Bs,Atoms,Literals>
	      when call 'erlang':'>='
		    (_cor3,
		     0) ->
	      %% Line 609
	      apply 'decode_n_args'/5
		  (_cor3, [], _cor2, _cor1, _cor0)
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'decode_n_args',4}}] )
	    -| ['compiler_generated'] )
	end
'decode_n_args'/5 =
    %% Line 611
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <N,Acc,Bs0,Atoms,Literals>
	      when call 'erlang':'>'
		    (_cor4,
		     0) ->
	      let <_3434> =
		  %% Line 612
		  apply 'decode_arg'/3
		      (_cor2, _cor1, _cor0)
	      in  %% Line 612
		  case _3434 of
		    <{A1,Bs}> when 'true' ->
			let <_cor6> =
			    %% Line 613
			    call 'erlang':'-'
				(_cor4, 1)
			in  %% Line 613
			    apply 'decode_n_args'/5
				(_cor6, [A1|_cor3], Bs, _cor1, _cor0)
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_3434})
		      -| ['compiler_generated'] )
		  end
	  %% Line 614
	  <0,Acc,Bs,_cor13,_cor14> when 'true' ->
	      let <_cor7> =
		  %% Line 615
		  call 'lists':'reverse'
		      (_cor3)
	      in  %% Line 615
		  {_cor7,_cor2}
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'decode_n_args',5}}] )
	    -| ['compiler_generated'] )
	end
'decode_tag'/1 =
    %% Line 623
    fun (_cor0) ->
	case _cor0 of
	  <0> when 'true' ->
	      'u'
	  %% Line 624
	  <1> when 'true' ->
	      'i'
	  %% Line 625
	  <2> when 'true' ->
	      'a'
	  %% Line 626
	  <3> when 'true' ->
	      'x'
	  %% Line 627
	  <4> when 'true' ->
	      'y'
	  %% Line 628
	  <5> when 'true' ->
	      'f'
	  %% Line 629
	  <6> when 'true' ->
	      'h'
	  %% Line 630
	  <7> when 'true' ->
	      'z'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'decode_tag',1}}] )
	    -| ['compiler_generated'] )
	end
'resolve_names'/7 =
    %% Line 648
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 649
	( letrec
	      'lc$^0'/1 =
		  fun (_cor9) ->
		      case _cor9 of
			<[Instr|_cor8]> when 'true' ->
			    let <_cor10> =
				apply 'resolve_inst'/7
				    (Instr, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
			    in  let <_cor11> =
				    apply 'lc$^0'/1
					(_cor8)
				in  ( [_cor10|_cor11]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_2524> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor9})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor6)
	  -| ['list_comprehension'] )
'resolve_inst'/7 =
    %% Line 657
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{'make_fun2',Args},_cor16,_cor17,_cor18,Lambdas,_cor19,M> when 'true' ->
	      let <_2867> =
		  %% Line 658
		  apply 'resolve_args'/1
		      (Args)
	      in  %% Line 658
		  case _2867 of
		    <[OldIndex|[]]> when 'true' ->
			let <_955> =
			    %% Line 660
			    call 'lists':'keyfind'
				(OldIndex, 1, _cor2)
			in  %% Line 659
			    case _955 of
			      <{_cor20,{F,A,_X_Lbl,_X_Index,NumFree,OldUniq}}>
				  when call 'erlang':'=:='
					(_cor20,
					 OldIndex) ->
				  %% Line 661
				  {'make_fun2',{_cor0,F,A},OldIndex,OldUniq,NumFree}
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_955})
				-| ['compiler_generated'] )
			    end
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_2867})
		      -| ['compiler_generated'] )
		  end
	  %% Line 662
	  <Instr,Imports,Str,Lbls,_X_Lambdas,_X_Literals,_X_M> when 'true' ->
	      %% Line 664
	      apply 'resolve_inst'/4
		  (_cor6, _cor5, _cor4, _cor3)
	end
'resolve_inst'/4 =
    %% Line 666
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'label',[{'u',L}|[]]},_cor175,_cor176,_cor177> when 'true' ->
	      %% Line 667
	      {'label',L}
	  %% Line 668
	  <FuncInfo,_cor178,_cor179,_cor180>
	      when try
		    let <_cor4> =
			call 'erlang':'element'
			    (1, _cor3)
		    in  call 'erlang':'=:='
			    (_cor4, 'func_info')
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      _cor3
	  %% Line 672
	  <{'call',[{'u',N}|[{'f',L}|[]]]},_cor181,_cor182,Lbls> when 'true' ->
	      let <_cor5> =
		  %% Line 1216
		  call 'gb_trees':'get'
		      (L, _cor0)
	      in  %% Line 673
		  {'call',N,_cor5}
	  %% Line 674
	  <{'call_last',[{'u',N}|[{'f',L}|[{'u',U}|[]]]]},_cor183,_cor184,Lbls> when 'true' ->
	      let <_cor6> =
		  %% Line 1216
		  call 'gb_trees':'get'
		      (L, _cor0)
	      in  %% Line 675
		  {'call_last',N,_cor6,U}
	  %% Line 676
	  <{'call_only',[{'u',N}|[{'f',L}|[]]]},_cor185,_cor186,Lbls> when 'true' ->
	      let <_cor7> =
		  %% Line 1216
		  call 'gb_trees':'get'
		      (L, _cor0)
	      in  %% Line 677
		  {'call_only',N,_cor7}
	  %% Line 678
	  <{'call_ext',[{'u',N}|[{'u',MFAix}|[]]]},Imports,_cor187,_cor188> when 'true' ->
	      let <_cor8> =
		  %% Line 679
		  call 'erlang':'+'
		      (MFAix, 1)
	      in  let <_cor9> =
		      %% Line 1216
		      call 'gb_trees':'get'
			  (_cor8, _cor2)
		  in  %% Line 679
		      {'call_ext',N,_cor9}
	  %% Line 680
	  <{'call_ext_last',[{'u',N}|[{'u',MFAix}|[{'u',X}|[]]]]},Imports,_cor189,_cor190> when 'true' ->
	      let <_cor10> =
		  %% Line 681
		  call 'erlang':'+'
		      (MFAix, 1)
	      in  let <_cor11> =
		      %% Line 1216
		      call 'gb_trees':'get'
			  (_cor10, _cor2)
		  in  %% Line 681
		      {'call_ext_last',N,_cor11,X}
	  %% Line 682
	  <{'bif0',Args},Imports,_cor191,_cor192> when 'true' ->
	      let <_3802> =
		  %% Line 683
		  apply 'resolve_args'/1
		      (Args)
	      in  %% Line 683
		  case _3802 of
		    <[Bif|[Reg|[]]]> when 'true' ->
			let <_cor13> =
			    %% Line 684
			    call 'erlang':'+'
				(Bif, 1)
			in  let <_2774> =
				%% Line 1216
				call 'gb_trees':'get'
				    (_cor13, _cor2)
			    in  %% Line 684
				case _2774 of
				  <{'extfunc',_X_Mod,BifName,_X_Arity}> when 'true' ->
				      %% Line 685
				      {'bif',BifName,'nofail',[],Reg}
				  ( <_cor14> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_2774})
				    -| ['compiler_generated'] )
				end
		    ( <_cor12> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_3802})
		      -| ['compiler_generated'] )
		  end
	  %% Line 686
	  <{'bif1',Args},Imports,_cor193,_cor194> when 'true' ->
	      let <_120> =
		  %% Line 687
		  apply 'resolve_args'/1
		      (Args)
	      in  %% Line 687
		  case _120 of
		    <[F|[Bif|[A1|[Reg|[]]]]]> when 'true' ->
			let <_cor16> =
			    %% Line 688
			    call 'erlang':'+'
				(Bif, 1)
			in  let <_5> =
				%% Line 1216
				call 'gb_trees':'get'
				    (_cor16, _cor2)
			    in  %% Line 688
				case _5 of
				  <{'extfunc',_X_Mod,BifName,_X_Arity}> when 'true' ->
				      %% Line 689
				      {'bif',BifName,F,[A1|[]],Reg}
				  ( <_cor17> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_5})
				    -| ['compiler_generated'] )
				end
		    ( <_cor15> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_120})
		      -| ['compiler_generated'] )
		  end
	  %% Line 690
	  <{'bif2',Args},Imports,_cor195,_cor196> when 'true' ->
	      let <_539> =
		  %% Line 691
		  apply 'resolve_args'/1
		      (Args)
	      in  %% Line 691
		  case _539 of
		    <[F|[Bif|[A1|[A2|[Reg|[]]]]]]> when 'true' ->
			let <_cor19> =
			    %% Line 692
			    call 'erlang':'+'
				(Bif, 1)
			in  let <_871> =
				%% Line 1216
				call 'gb_trees':'get'
				    (_cor19, _cor2)
			    in  %% Line 692
				case _871 of
				  <{'extfunc',_X_Mod,BifName,_X_Arity}> when 'true' ->
				      %% Line 693
				      {'bif',BifName,F,[A1|[A2|[]]],Reg}
				  ( <_cor20> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_871})
				    -| ['compiler_generated'] )
				end
		    ( <_cor18> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_539})
		      -| ['compiler_generated'] )
		  end
	  %% Line 694
	  <{'allocate',[{'u',X0}|[{'u',X1}|[]]]},_cor197,_cor198,_cor199> when 'true' ->
	      %% Line 695
	      {'allocate',X0,X1}
	  %% Line 696
	  <{'allocate_heap',[{'u',X0}|[{'u',X1}|[{'u',X2}|[]]]]},_cor200,_cor201,_cor202> when 'true' ->
	      %% Line 697
	      {'allocate_heap',X0,X1,X2}
	  %% Line 698
	  <{'allocate_zero',[{'u',X0}|[{'u',X1}|[]]]},_cor203,_cor204,_cor205> when 'true' ->
	      %% Line 699
	      {'allocate_zero',X0,X1}
	  %% Line 700
	  <{'allocate_heap_zero',[{'u',X0}|[{'u',X1}|[{'u',X2}|[]]]]},_cor206,_cor207,_cor208> when 'true' ->
	      %% Line 701
	      {'allocate_heap_zero',X0,X1,X2}
	  %% Line 702
	  <{'test_heap',[{'u',X0}|[{'u',X1}|[]]]},_cor209,_cor210,_cor211> when 'true' ->
	      %% Line 703
	      {'test_heap',X0,X1}
	  %% Line 704
	  <{'init',[Dst|[]]},_cor212,_cor213,_cor214> when 'true' ->
	      %% Line 705
	      {'init',Dst}
	  %% Line 706
	  <{'deallocate',[{'u',L}|[]]},_cor215,_cor216,_cor217> when 'true' ->
	      %% Line 707
	      {'deallocate',L}
	  %% Line 708
	  <{'return',[]},_cor218,_cor219,_cor220> when 'true' ->
	      %% Line 709
	      'return'
	  %% Line 710
	  <{'send',[]},_cor221,_cor222,_cor223> when 'true' ->
	      %% Line 711
	      'send'
	  %% Line 712
	  <{'remove_message',[]},_cor224,_cor225,_cor226> when 'true' ->
	      %% Line 713
	      'remove_message'
	  %% Line 714
	  <{'timeout',[]},_cor227,_cor228,_cor229> when 'true' ->
	      %% Line 715
	      'timeout'
	  %% Line 716
	  <{'loop_rec',[Lbl|[Dst|[]]]},_cor230,_cor231,_cor232> when 'true' ->
	      %% Line 717
	      {'loop_rec',Lbl,Dst}
	  %% Line 718
	  <{'loop_rec_end',[Lbl|[]]},_cor233,_cor234,_cor235> when 'true' ->
	      %% Line 719
	      {'loop_rec_end',Lbl}
	  %% Line 720
	  <{'wait',[Lbl|[]]},_cor236,_cor237,_cor238> when 'true' ->
	      %% Line 721
	      {'wait',Lbl}
	  %% Line 722
	  <{'wait_timeout',[Lbl|[Int|[]]]},_cor239,_cor240,_cor241> when 'true' ->
	      let <_cor21> =
		  %% Line 723
		  apply 'resolve_arg'/1
		      (Int)
	      in  %% Line 723
		  {'wait_timeout',Lbl,_cor21}
	  %% Line 724
	  <{'m_plus',Args},_cor242,_cor243,_cor244> when 'true' ->
	      let <_3969> =
		  %% Line 725
		  apply 'resolve_args'/1
		      (Args)
	      in  %% Line 725
		  case _3969 of
		    <[W|[SrcR1|[SrcR2|[DstR|[]]]]]> when 'true' ->
			%% Line 726
			{'arithbif','+',W,[SrcR1|[SrcR2|[]]],DstR}
		    ( <_cor22> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_3969})
		      -| ['compiler_generated'] )
		  end
	  %% Line 727
	  <{'m_minus',Args},_cor245,_cor246,_cor247> when 'true' ->
	      let <_923> =
		  %% Line 728
		  apply 'resolve_args'/1
		      (Args)
	      in  %% Line 728
		  case _923 of
		    <[W|[SrcR1|[SrcR2|[DstR|[]]]]]> when 'true' ->
			%% Line 729
			{'arithbif','-',W,[SrcR1|[SrcR2|[]]],DstR}
		    ( <_cor23> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_923})
		      -| ['compiler_generated'] )
		  end
	  %% Line 730
	  <{'m_times',Args},_cor248,_cor249,_cor250> when 'true' ->
	      let <_146> =
		  %% Line 731
		  apply 'resolve_args'/1
		      (Args)
	      in  %% Line 731
		  case _146 of
		    <[W|[SrcR1|[SrcR2|[DstR|[]]]]]> when 'true' ->
			%% Line 732
			{'arithbif','*',W,[SrcR1|[SrcR2|[]]],DstR}
		    ( <_cor24> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_146})
		      -| ['compiler_generated'] )
		  end
	  %% Line 733
	  <{'m_div',Args},_cor251,_cor252,_cor253> when 'true' ->
	      let <_4133> =
		  %% Line 734
		  apply 'resolve_args'/1
		      (Args)
	      in  %% Line 734
		  case _4133 of
		    <[W|[SrcR1|[SrcR2|[DstR|[]]]]]> when 'true' ->
			%% Line 735
			{'arithbif','/',W,[SrcR1|[SrcR2|[]]],DstR}
		    ( <_cor25> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4133})
		      -| ['compiler_generated'] )
		  end
	  %% Line 736
	  <{'int_div',Args},_cor254,_cor255,_cor256> when 'true' ->
	      let <_4964> =
		  %% Line 737
		  apply 'resolve_args'/1
		      (Args)
	      in  %% Line 737
		  case _4964 of
		    <[W|[SrcR1|[SrcR2|[DstR|[]]]]]> when 'true' ->
			%% Line 738
			{'arithbif','div',W,[SrcR1|[SrcR2|[]]],DstR}
		    ( <_cor26> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4964})
		      -| ['compiler_generated'] )
		  end
	  %% Line 739
	  <{'int_rem',Args},_cor257,_cor258,_cor259> when 'true' ->
	      let <_5971> =
		  %% Line 740
		  apply 'resolve_args'/1
		      (Args)
	      in  %% Line 740
		  case _5971 of
		    <[W|[SrcR1|[SrcR2|[DstR|[]]]]]> when 'true' ->
			%% Line 741
			{'arithbif','rem',W,[SrcR1|[SrcR2|[]]],DstR}
		    ( <_cor27> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5971})
		      -| ['compiler_generated'] )
		  end
	  %% Line 742
	  <{'int_band',Args},_cor260,_cor261,_cor262> when 'true' ->
	      let <_5643> =
		  %% Line 743
		  apply 'resolve_args'/1
		      (Args)
	      in  %% Line 743
		  case _5643 of
		    <[W|[SrcR1|[SrcR2|[DstR|[]]]]]> when 'true' ->
			%% Line 744
			{'arithbif','band',W,[SrcR1|[SrcR2|[]]],DstR}
		    ( <_cor28> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5643})
		      -| ['compiler_generated'] )
		  end
	  %% Line 745
	  <{'int_bor',Args},_cor263,_cor264,_cor265> when 'true' ->
	      let <_3774> =
		  %% Line 746
		  apply 'resolve_args'/1
		      (Args)
	      in  %% Line 746
		  case _3774 of
		    <[W|[SrcR1|[SrcR2|[DstR|[]]]]]> when 'true' ->
			%% Line 747
			{'arithbif','bor',W,[SrcR1|[SrcR2|[]]],DstR}
		    ( <_cor29> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_3774})
		      -| ['compiler_generated'] )
		  end
	  %% Line 748
	  <{'int_bxor',Args},_cor266,_cor267,_cor268> when 'true' ->
	      let <_1355> =
		  %% Line 749
		  apply 'resolve_args'/1
		      (Args)
	      in  %% Line 749
		  case _1355 of
		    <[W|[SrcR1|[SrcR2|[DstR|[]]]]]> when 'true' ->
			%% Line 750
			{'arithbif','bxor',W,[SrcR1|[SrcR2|[]]],DstR}
		    ( <_cor30> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_1355})
		      -| ['compiler_generated'] )
		  end
	  %% Line 751
	  <{'int_bsl',Args},_cor269,_cor270,_cor271> when 'true' ->
	      let <_5933> =
		  %% Line 752
		  apply 'resolve_args'/1
		      (Args)
	      in  %% Line 752
		  case _5933 of
		    <[W|[SrcR1|[SrcR2|[DstR|[]]]]]> when 'true' ->
			%% Line 753
			{'arithbif','bsl',W,[SrcR1|[SrcR2|[]]],DstR}
		    ( <_cor31> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5933})
		      -| ['compiler_generated'] )
		  end
	  %% Line 754
	  <{'int_bsr',Args},_cor272,_cor273,_cor274> when 'true' ->
	      let <_2068> =
		  %% Line 755
		  apply 'resolve_args'/1
		      (Args)
	      in  %% Line 755
		  case _2068 of
		    <[W|[SrcR1|[SrcR2|[DstR|[]]]]]> when 'true' ->
			%% Line 756
			{'arithbif','bsr',W,[SrcR1|[SrcR2|[]]],DstR}
		    ( <_cor32> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_2068})
		      -| ['compiler_generated'] )
		  end
	  %% Line 757
	  <{'int_bnot',Args},_cor275,_cor276,_cor277> when 'true' ->
	      let <_2041> =
		  %% Line 758
		  apply 'resolve_args'/1
		      (Args)
	      in  %% Line 758
		  case _2041 of
		    <[W|[SrcR|[DstR|[]]]]> when 'true' ->
			%% Line 759
			{'arithbif','bnot',W,[SrcR|[]],DstR}
		    ( <_cor33> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_2041})
		      -| ['compiler_generated'] )
		  end
	  %% Line 760
	  <{I = 'is_lt',Args0},_cor278,_cor279,_cor280> when 'true' ->
	      let <_3201> =
		  %% Line 761
		  apply 'resolve_args'/1
		      (Args0)
	      in  %% Line 761
		  case _3201 of
		    <[L|Args]> when 'true' ->
			%% Line 762
			{'test',I,L,Args}
		    ( <_cor34> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_3201})
		      -| ['compiler_generated'] )
		  end
	  %% Line 763
	  <{I = 'is_ge',Args0},_cor281,_cor282,_cor283> when 'true' ->
	      let <_930> =
		  %% Line 764
		  apply 'resolve_args'/1
		      (Args0)
	      in  %% Line 764
		  case _930 of
		    <[L|Args]> when 'true' ->
			%% Line 765
			{'test',I,L,Args}
		    ( <_cor35> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_930})
		      -| ['compiler_generated'] )
		  end
	  %% Line 766
	  <{I = 'is_eq',Args0},_cor284,_cor285,_cor286> when 'true' ->
	      let <_5040> =
		  %% Line 767
		  apply 'resolve_args'/1
		      (Args0)
	      in  %% Line 767
		  case _5040 of
		    <[L|Args]> when 'true' ->
			%% Line 768
			{'test',I,L,Args}
		    ( <_cor36> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5040})
		      -| ['compiler_generated'] )
		  end
	  %% Line 769
	  <{I = 'is_ne',Args0},_cor287,_cor288,_cor289> when 'true' ->
	      let <_400> =
		  %% Line 770
		  apply 'resolve_args'/1
		      (Args0)
	      in  %% Line 770
		  case _400 of
		    <[L|Args]> when 'true' ->
			%% Line 771
			{'test',I,L,Args}
		    ( <_cor37> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_400})
		      -| ['compiler_generated'] )
		  end
	  %% Line 772
	  <{I = 'is_eq_exact',Args0},_cor290,_cor291,_cor292> when 'true' ->
	      let <_5335> =
		  %% Line 773
		  apply 'resolve_args'/1
		      (Args0)
	      in  %% Line 773
		  case _5335 of
		    <[L|Args]> when 'true' ->
			%% Line 774
			{'test',I,L,Args}
		    ( <_cor38> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5335})
		      -| ['compiler_generated'] )
		  end
	  %% Line 775
	  <{I = 'is_ne_exact',Args0},_cor293,_cor294,_cor295> when 'true' ->
	      let <_2485> =
		  %% Line 776
		  apply 'resolve_args'/1
		      (Args0)
	      in  %% Line 776
		  case _2485 of
		    <[L|Args]> when 'true' ->
			%% Line 777
			{'test',I,L,Args}
		    ( <_cor39> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_2485})
		      -| ['compiler_generated'] )
		  end
	  %% Line 778
	  <{I = 'is_integer',Args0},_cor296,_cor297,_cor298> when 'true' ->
	      let <_4797> =
		  %% Line 779
		  apply 'resolve_args'/1
		      (Args0)
	      in  %% Line 779
		  case _4797 of
		    <[L|Args]> when 'true' ->
			%% Line 780
			{'test',I,L,Args}
		    ( <_cor40> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4797})
		      -| ['compiler_generated'] )
		  end
	  %% Line 781
	  <{I = 'is_float',Args0},_cor299,_cor300,_cor301> when 'true' ->
	      let <_81> =
		  %% Line 782
		  apply 'resolve_args'/1
		      (Args0)
	      in  %% Line 782
		  case _81 of
		    <[L|Args]> when 'true' ->
			%% Line 783
			{'test',I,L,Args}
		    ( <_cor41> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_81})
		      -| ['compiler_generated'] )
		  end
	  %% Line 784
	  <{I = 'is_number',Args0},_cor302,_cor303,_cor304> when 'true' ->
	      let <_675> =
		  %% Line 785
		  apply 'resolve_args'/1
		      (Args0)
	      in  %% Line 785
		  case _675 of
		    <[L|Args]> when 'true' ->
			%% Line 786
			{'test',I,L,Args}
		    ( <_cor42> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_675})
		      -| ['compiler_generated'] )
		  end
	  %% Line 787
	  <{I = 'is_atom',Args0},_cor305,_cor306,_cor307> when 'true' ->
	      let <_4974> =
		  %% Line 788
		  apply 'resolve_args'/1
		      (Args0)
	      in  %% Line 788
		  case _4974 of
		    <[L|Args]> when 'true' ->
			%% Line 789
			{'test',I,L,Args}
		    ( <_cor43> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4974})
		      -| ['compiler_generated'] )
		  end
	  %% Line 790
	  <{I = 'is_pid',Args0},_cor308,_cor309,_cor310> when 'true' ->
	      let <_557> =
		  %% Line 791
		  apply 'resolve_args'/1
		      (Args0)
	      in  %% Line 791
		  case _557 of
		    <[L|Args]> when 'true' ->
			%% Line 792
			{'test',I,L,Args}
		    ( <_cor44> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_557})
		      -| ['compiler_generated'] )
		  end
	  %% Line 793
	  <{I = 'is_reference',Args0},_cor311,_cor312,_cor313> when 'true' ->
	      let <_49> =
		  %% Line 794
		  apply 'resolve_args'/1
		      (Args0)
	      in  %% Line 794
		  case _49 of
		    <[L|Args]> when 'true' ->
			%% Line 795
			{'test',I,L,Args}
		    ( <_cor45> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_49})
		      -| ['compiler_generated'] )
		  end
	  %% Line 796
	  <{I = 'is_port',Args0},_cor314,_cor315,_cor316> when 'true' ->
	      let <_4193> =
		  %% Line 797
		  apply 'resolve_args'/1
		      (Args0)
	      in  %% Line 797
		  case _4193 of
		    <[L|Args]> when 'true' ->
			%% Line 798
			{'test',I,L,Args}
		    ( <_cor46> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4193})
		      -| ['compiler_generated'] )
		  end
	  %% Line 799
	  <{I = 'is_nil',Args0},_cor317,_cor318,_cor319> when 'true' ->
	      let <_2781> =
		  %% Line 800
		  apply 'resolve_args'/1
		      (Args0)
	      in  %% Line 800
		  case _2781 of
		    <[L|Args]> when 'true' ->
			%% Line 801
			{'test',I,L,Args}
		    ( <_cor47> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_2781})
		      -| ['compiler_generated'] )
		  end
	  %% Line 802
	  <{I = 'is_binary',Args0},_cor320,_cor321,_cor322> when 'true' ->
	      let <_2228> =
		  %% Line 803
		  apply 'resolve_args'/1
		      (Args0)
	      in  %% Line 803
		  case _2228 of
		    <[L|Args]> when 'true' ->
			%% Line 804
			{'test',I,L,Args}
		    ( <_cor48> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_2228})
		      -| ['compiler_generated'] )
		  end
	  %% Line 805
	  <{I = 'is_constant',Args0},_cor323,_cor324,_cor325> when 'true' ->
	      let <_4964> =
		  %% Line 806
		  apply 'resolve_args'/1
		      (Args0)
	      in  %% Line 806
		  case _4964 of
		    <[L|Args]> when 'true' ->
			%% Line 807
			{'test',I,L,Args}
		    ( <_cor49> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4964})
		      -| ['compiler_generated'] )
		  end
	  %% Line 808
	  <{I = 'is_list',Args0},_cor326,_cor327,_cor328> when 'true' ->
	      let <_5257> =
		  %% Line 809
		  apply 'resolve_args'/1
		      (Args0)
	      in  %% Line 809
		  case _5257 of
		    <[L|Args]> when 'true' ->
			%% Line 810
			{'test',I,L,Args}
		    ( <_cor50> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5257})
		      -| ['compiler_generated'] )
		  end
	  %% Line 811
	  <{I = 'is_nonempty_list',Args0},_cor329,_cor330,_cor331> when 'true' ->
	      let <_2967> =
		  %% Line 812
		  apply 'resolve_args'/1
		      (Args0)
	      in  %% Line 812
		  case _2967 of
		    <[L|Args]> when 'true' ->
			%% Line 813
			{'test',I,L,Args}
		    ( <_cor51> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_2967})
		      -| ['compiler_generated'] )
		  end
	  %% Line 814
	  <{I = 'is_tuple',Args0},_cor332,_cor333,_cor334> when 'true' ->
	      let <_1196> =
		  %% Line 815
		  apply 'resolve_args'/1
		      (Args0)
	      in  %% Line 815
		  case _1196 of
		    <[L|Args]> when 'true' ->
			%% Line 816
			{'test',I,L,Args}
		    ( <_cor52> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_1196})
		      -| ['compiler_generated'] )
		  end
	  %% Line 817
	  <{I = 'test_arity',Args0},_cor335,_cor336,_cor337> when 'true' ->
	      let <_2509> =
		  %% Line 818
		  apply 'resolve_args'/1
		      (Args0)
	      in  %% Line 818
		  case _2509 of
		    <[L|Args]> when 'true' ->
			%% Line 819
			{'test',I,L,Args}
		    ( <_cor53> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_2509})
		      -| ['compiler_generated'] )
		  end
	  %% Line 820
	  <{'select_val',Args},_cor338,_cor339,_cor340> when 'true' ->
	      %% Line 821
	      case Args of
		<[Reg|[FLbl|[{{'z',1},{'u',_X_Len},List0}|[]]]]> when 'true' ->
		    let <List> =
			%% Line 822
			apply 'resolve_args'/1
			    (List0)
		    in  %% Line 823
			{'select_val',Reg,FLbl,{'list',List}}
		( <_cor54> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',Args})
		  -| ['compiler_generated'] )
	      end
	  %% Line 824
	  <{'select_tuple_arity',Args},_cor341,_cor342,_cor343> when 'true' ->
	      %% Line 825
	      case Args of
		<[Reg|[FLbl|[{{'z',1},{'u',_X_Len},List0}|[]]]]> when 'true' ->
		    let <List> =
			%% Line 826
			apply 'resolve_args'/1
			    (List0)
		    in  %% Line 827
			{'select_tuple_arity',Reg,FLbl,{'list',List}}
		( <_cor56> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',Args})
		  -| ['compiler_generated'] )
	      end
	  %% Line 828
	  <{'jump',[Lbl|[]]},_cor344,_cor345,_cor346> when 'true' ->
	      %% Line 829
	      {'jump',Lbl}
	  %% Line 830
	  <{'catch',[Dst|[Lbl|[]]]},_cor347,_cor348,_cor349> when 'true' ->
	      %% Line 831
	      {'catch',Dst,Lbl}
	  %% Line 832
	  <{'catch_end',[Dst|[]]},_cor350,_cor351,_cor352> when 'true' ->
	      %% Line 833
	      {'catch_end',Dst}
	  %% Line 834
	  <{'move',[Src|[Dst|[]]]},_cor353,_cor354,_cor355> when 'true' ->
	      let <_cor58> =
		  %% Line 835
		  apply 'resolve_arg'/1
		      (Src)
	      in  %% Line 835
		  {'move',_cor58,Dst}
	  %% Line 836
	  <{'get_list',[Src|[Dst1|[Dst2|[]]]]},_cor356,_cor357,_cor358> when 'true' ->
	      %% Line 837
	      {'get_list',Src,Dst1,Dst2}
	  %% Line 838
	  <{'get_tuple_element',[Src|[{'u',Off}|[Dst|[]]]]},_cor359,_cor360,_cor361> when 'true' ->
	      let <_cor60> =
		  %% Line 839
		  apply 'resolve_arg'/1
		      (Src)
	      in  let <_cor59> =
		      %% Line 839
		      apply 'resolve_arg'/1
			  (Dst)
		  in  %% Line 839
		      {'get_tuple_element',_cor60,Off,_cor59}
	  %% Line 840
	  <{'set_tuple_element',[Src|[Dst|[{'u',Off}|[]]]]},_cor362,_cor363,_cor364> when 'true' ->
	      let <_cor62> =
		  %% Line 841
		  apply 'resolve_arg'/1
		      (Src)
	      in  let <_cor61> =
		      %% Line 841
		      apply 'resolve_arg'/1
			  (Dst)
		  in  %% Line 841
		      {'set_tuple_element',_cor62,_cor61,Off}
	  %% Line 842
	  <{'put_string',[{'u',Len}|[{'u',Off}|[Dst|[]]]]},_cor365,Strings,_cor366> when 'true' ->
	      let <_cor65> =
		  %% Line 843
		  case <> of
		    <>
			when call 'erlang':'>'
			      (Len,
			       0) ->
			let <_cor64> =
			    call 'erlang':'+'
				(Off, 1)
			in  let <_cor63> =
				call 'erlang':'+'
				    (Off, Len)
			    in  call 'erlang':'binary_to_list'
				    (_cor1, _cor64, _cor63)
		    %% Line 844
		    <> when 'true' ->
			[]
		  end
	      in  %% Line 846
		  {'put_string',Len,{'string',_cor65},Dst}
	  %% Line 847
	  <{'put_list',[Src1|[Src2|[Dst|[]]]]},_cor367,_cor368,_cor369> when 'true' ->
	      let <_cor68> =
		  %% Line 848
		  apply 'resolve_arg'/1
		      (Src1)
	      in  let <_cor67> =
		      %% Line 848
		      apply 'resolve_arg'/1
			  (Src2)
		  in  %% Line 848
		      {'put_list',_cor68,_cor67,Dst}
	  %% Line 849
	  <{'put_tuple',[{'u',Arity}|[Dst|[]]]},_cor370,_cor371,_cor372> when 'true' ->
	      %% Line 850
	      {'put_tuple',Arity,Dst}
	  %% Line 851
	  <{'put',[Src|[]]},_cor373,_cor374,_cor375> when 'true' ->
	      let <_cor69> =
		  %% Line 852
		  apply 'resolve_arg'/1
		      (Src)
	      in  %% Line 852
		  {'put',_cor69}
	  %% Line 853
	  <{'badmatch',[X|[]]},_cor376,_cor377,_cor378> when 'true' ->
	      let <_cor70> =
		  %% Line 854
		  apply 'resolve_arg'/1
		      (X)
	      in  %% Line 854
		  {'badmatch',_cor70}
	  %% Line 855
	  <{'if_end',[]},_cor379,_cor380,_cor381> when 'true' ->
	      %% Line 856
	      'if_end'
	  %% Line 857
	  <{'case_end',[X|[]]},_cor382,_cor383,_cor384> when 'true' ->
	      let <_cor71> =
		  %% Line 858
		  apply 'resolve_arg'/1
		      (X)
	      in  %% Line 858
		  {'case_end',_cor71}
	  %% Line 859
	  <{'call_fun',[{'u',N}|[]]},_cor385,_cor386,_cor387> when 'true' ->
	      %% Line 860
	      {'call_fun',N}
	  %% Line 861
	  <{'make_fun',Args},_cor388,_cor389,Lbls> when 'true' ->
	      let <_4807> =
		  %% Line 862
		  apply 'resolve_args'/1
		      (Args)
	      in  %% Line 862
		  case _4807 of
		    <[{'f',L}|[Magic|[FreeVars|[]]]]> when 'true' ->
			let <_cor73> =
			    %% Line 1216
			    call 'gb_trees':'get'
				(L, _cor0)
			in  %% Line 863
			    {'make_fun',_cor73,Magic,FreeVars}
		    ( <_cor72> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4807})
		      -| ['compiler_generated'] )
		  end
	  %% Line 864
	  <{I = 'is_function',Args0},_cor390,_cor391,_cor392> when 'true' ->
	      let <_1314> =
		  %% Line 865
		  apply 'resolve_args'/1
		      (Args0)
	      in  %% Line 865
		  case _1314 of
		    <[L|Args]> when 'true' ->
			%% Line 866
			{'test',I,L,Args}
		    ( <_cor74> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_1314})
		      -| ['compiler_generated'] )
		  end
	  %% Line 867
	  <{'call_ext_only',[{'u',N}|[{'u',MFAix}|[]]]},Imports,_cor393,_cor394> when 'true' ->
	      let <_cor75> =
		  %% Line 868
		  call 'erlang':'+'
		      (MFAix, 1)
	      in  let <_cor76> =
		      %% Line 1216
		      call 'gb_trees':'get'
			  (_cor75, _cor2)
		  in  %% Line 868
		      {'call_ext_only',N,_cor76}
	  %% Line 872
	  <{'bs_start_match',[F|[Reg|[]]]},_cor395,_cor396,_cor397> when 'true' ->
	      %% Line 873
	      {'bs_start_match',F,Reg}
	  %% Line 874
	  <{I = 'bs_get_integer',[Lbl|[Arg2|[{'u',N}|[{'u',U}|[Arg5|[]]]]]]},_cor398,_cor399,_cor400> when 'true' ->
	      let <_1649> =
		  %% Line 875
		  apply 'resolve_args'/1
		      ([Arg2|[Arg5|[]]])
	      in  %% Line 875
		  case _1649 of
		    <[A2|[A5|[]]]> when 'true' ->
			let <_cor78> = {%% Line 1200
			     'field_flags',U}
			in  %% Line 876
			    {'test',I,Lbl,[A2|[N|[_cor78|[A5|[]]]]]}
		    ( <_cor77> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_1649})
		      -| ['compiler_generated'] )
		  end
	  %% Line 877
	  <{I = 'bs_get_float',[Lbl|[Arg2|[{'u',N}|[{'u',U}|[Arg5|[]]]]]]},_cor401,_cor402,_cor403> when 'true' ->
	      let <_494> =
		  %% Line 878
		  apply 'resolve_args'/1
		      ([Arg2|[Arg5|[]]])
	      in  %% Line 878
		  case _494 of
		    <[A2|[A5|[]]]> when 'true' ->
			let <_cor80> = {%% Line 1200
			     'field_flags',U}
			in  %% Line 879
			    {'test',I,Lbl,[A2|[N|[_cor80|[A5|[]]]]]}
		    ( <_cor79> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_494})
		      -| ['compiler_generated'] )
		  end
	  %% Line 880
	  <{I = 'bs_get_binary',[Lbl|[Arg2|[{'u',N}|[{'u',U}|[Arg5|[]]]]]]},_cor404,_cor405,_cor406> when 'true' ->
	      let <_2528> =
		  %% Line 881
		  apply 'resolve_args'/1
		      ([Arg2|[Arg5|[]]])
	      in  %% Line 881
		  case _2528 of
		    <[A2|[A5|[]]]> when 'true' ->
			let <_cor82> = {%% Line 1200
			     'field_flags',U}
			in  %% Line 882
			    {'test',I,Lbl,[A2|[N|[_cor82|[A5|[]]]]]}
		    ( <_cor81> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_2528})
		      -| ['compiler_generated'] )
		  end
	  %% Line 883
	  <{'bs_skip_bits',[Lbl|[Arg2|[{'u',N}|[{'u',U}|[]]]]]},_cor407,_cor408,_cor409> when 'true' ->
	      let <A2> =
		  %% Line 884
		  apply 'resolve_arg'/1
		      (Arg2)
	      in  let <_cor84> = {%% Line 1200
		       'field_flags',U}
		  in  %% Line 885
		      {'test','bs_skip_bits',Lbl,[A2|[N|[_cor84|[]]]]}
	  %% Line 886
	  <{'bs_test_tail',[F|[{'u',N}|[]]]},_cor410,_cor411,_cor412> when 'true' ->
	      %% Line 887
	      {'test','bs_test_tail',F,[N|[]]}
	  %% Line 888
	  <{'bs_save',[{'u',N}|[]]},_cor413,_cor414,_cor415> when 'true' ->
	      %% Line 889
	      {'bs_save',N}
	  %% Line 890
	  <{'bs_restore',[{'u',N}|[]]},_cor416,_cor417,_cor418> when 'true' ->
	      %% Line 891
	      {'bs_restore',N}
	  %% Line 892
	  <{'bs_init',[{'u',N}|[{'u',U}|[]]]},_cor419,_cor420,_cor421> when 'true' ->
	      let <_cor85> = {%% Line 1200
		   'field_flags',U}
	      in  %% Line 893
		  {'bs_init',N,_cor85}
	  %% Line 894
	  <{'bs_final',[F|[X|[]]]},_cor422,_cor423,_cor424> when 'true' ->
	      %% Line 895
	      {'bs_final',F,X}
	  %% Line 896
	  <{'bs_put_integer',[Lbl|[Arg2|[{'u',N}|[{'u',U}|[Arg5|[]]]]]]},_cor425,_cor426,_cor427> when 'true' ->
	      let <_4607> =
		  %% Line 897
		  apply 'resolve_args'/1
		      ([Arg2|[Arg5|[]]])
	      in  %% Line 897
		  case _4607 of
		    <[A2|[A5|[]]]> when 'true' ->
			let <_cor87> = {%% Line 1200
			     'field_flags',U}
			in  %% Line 898
			    {'bs_put_integer',Lbl,A2,N,_cor87,A5}
		    ( <_cor86> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4607})
		      -| ['compiler_generated'] )
		  end
	  %% Line 899
	  <{'bs_put_binary',[Lbl|[Arg2|[{'u',N}|[{'u',U}|[Arg5|[]]]]]]},_cor428,_cor429,_cor430> when 'true' ->
	      let <_2131> =
		  %% Line 900
		  apply 'resolve_args'/1
		      ([Arg2|[Arg5|[]]])
	      in  %% Line 900
		  case _2131 of
		    <[A2|[A5|[]]]> when 'true' ->
			let <_cor89> = {%% Line 1200
			     'field_flags',U}
			in  %% Line 901
			    {'bs_put_binary',Lbl,A2,N,_cor89,A5}
		    ( <_cor88> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_2131})
		      -| ['compiler_generated'] )
		  end
	  %% Line 902
	  <{'bs_put_float',[Lbl|[Arg2|[{'u',N}|[{'u',U}|[Arg5|[]]]]]]},_cor431,_cor432,_cor433> when 'true' ->
	      let <_5695> =
		  %% Line 903
		  apply 'resolve_args'/1
		      ([Arg2|[Arg5|[]]])
	      in  %% Line 903
		  case _5695 of
		    <[A2|[A5|[]]]> when 'true' ->
			let <_cor91> = {%% Line 1200
			     'field_flags',U}
			in  %% Line 904
			    {'bs_put_float',Lbl,A2,N,_cor91,A5}
		    ( <_cor90> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5695})
		      -| ['compiler_generated'] )
		  end
	  %% Line 905
	  <{'bs_put_string',[{'u',Len}|[{'u',Off}|[]]]},_cor434,Strings,_cor435> when 'true' ->
	      let <_cor94> =
		  %% Line 906
		  case <> of
		    <>
			when call 'erlang':'>'
			      (Len,
			       0) ->
			let <_cor93> =
			    call 'erlang':'+'
				(Off, 1)
			in  let <_cor92> =
				call 'erlang':'+'
				    (Off, Len)
			    in  call 'erlang':'binary_to_list'
				    (_cor1, _cor93, _cor92)
		    %% Line 907
		    <> when 'true' ->
			[]
		  end
	      in  %% Line 909
		  {'bs_put_string',Len,{'string',_cor94}}
	  %% Line 910
	  <{'bs_need_buf',[{'u',N}|[]]},_cor436,_cor437,_cor438> when 'true' ->
	      %% Line 911
	      {'bs_need_buf',N}
	  %% Line 916
	  <{'fclearerror',[]},_cor439,_cor440,_cor441> when 'true' ->
	      %% Line 917
	      'fclearerror'
	  %% Line 918
	  <{'fcheckerror',[Arg|[]]},_cor442,_cor443,_cor444> when 'true' ->
	      let <_cor96> =
		  %% Line 919
		  apply 'resolve_arg'/1
		      (Arg)
	      in  %% Line 919
		  {'fcheckerror',_cor96}
	  %% Line 920
	  <{'fmove',Args},_cor445,_cor446,_cor447> when 'true' ->
	      let <_4617> =
		  %% Line 921
		  apply 'resolve_args'/1
		      (Args)
	      in  %% Line 921
		  case _4617 of
		    <[FR|[Reg|[]]]> when 'true' ->
			%% Line 922
			{'fmove',FR,Reg}
		    ( <_cor97> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4617})
		      -| ['compiler_generated'] )
		  end
	  %% Line 923
	  <{'fconv',Args},_cor448,_cor449,_cor450> when 'true' ->
	      let <_5609> =
		  %% Line 924
		  apply 'resolve_args'/1
		      (Args)
	      in  %% Line 924
		  case _5609 of
		    <[Reg|[FR|[]]]> when 'true' ->
			%% Line 925
			{'fconv',Reg,FR}
		    ( <_cor98> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5609})
		      -| ['compiler_generated'] )
		  end
	  %% Line 926
	  <{I = 'fadd',Args},_cor451,_cor452,_cor453> when 'true' ->
	      let <_1638> =
		  %% Line 927
		  apply 'resolve_args'/1
		      (Args)
	      in  %% Line 927
		  case _1638 of
		    <[F|[A1|[A2|[Reg|[]]]]]> when 'true' ->
			%% Line 928
			{'arithfbif',I,F,[A1|[A2|[]]],Reg}
		    ( <_cor99> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_1638})
		      -| ['compiler_generated'] )
		  end
	  %% Line 929
	  <{I = 'fsub',Args},_cor454,_cor455,_cor456> when 'true' ->
	      let <_3796> =
		  %% Line 930
		  apply 'resolve_args'/1
		      (Args)
	      in  %% Line 930
		  case _3796 of
		    <[F|[A1|[A2|[Reg|[]]]]]> when 'true' ->
			%% Line 931
			{'arithfbif',I,F,[A1|[A2|[]]],Reg}
		    ( <_cor100> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_3796})
		      -| ['compiler_generated'] )
		  end
	  %% Line 932
	  <{I = 'fmul',Args},_cor457,_cor458,_cor459> when 'true' ->
	      let <_677> =
		  %% Line 933
		  apply 'resolve_args'/1
		      (Args)
	      in  %% Line 933
		  case _677 of
		    <[F|[A1|[A2|[Reg|[]]]]]> when 'true' ->
			%% Line 934
			{'arithfbif',I,F,[A1|[A2|[]]],Reg}
		    ( <_cor101> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_677})
		      -| ['compiler_generated'] )
		  end
	  %% Line 935
	  <{I = 'fdiv',Args},_cor460,_cor461,_cor462> when 'true' ->
	      let <_5480> =
		  %% Line 936
		  apply 'resolve_args'/1
		      (Args)
	      in  %% Line 936
		  case _5480 of
		    <[F|[A1|[A2|[Reg|[]]]]]> when 'true' ->
			%% Line 937
			{'arithfbif',I,F,[A1|[A2|[]]],Reg}
		    ( <_cor102> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5480})
		      -| ['compiler_generated'] )
		  end
	  %% Line 938
	  <{'fnegate',Args},_cor463,_cor464,_cor465> when 'true' ->
	      let <_5983> =
		  %% Line 939
		  apply 'resolve_args'/1
		      (Args)
	      in  %% Line 939
		  case _5983 of
		    <[F|[Arg|[Reg|[]]]]> when 'true' ->
			%% Line 940
			{'arithfbif','fnegate',F,[Arg|[]],Reg}
		    ( <_cor103> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5983})
		      -| ['compiler_generated'] )
		  end
	  %% Line 945
	  <{'try',[Reg|[Lbl|[]]]},_cor466,_cor467,_cor468> when 'true' ->
	      %% Line 946
	      {'try',Reg,Lbl}
	  %% Line 947
	  <{'try_end',[Reg|[]]},_cor469,_cor470,_cor471> when 'true' ->
	      %% Line 948
	      {'try_end',Reg}
	  %% Line 949
	  <{'try_case',[Reg|[]]},_cor472,_cor473,_cor474> when 'true' ->
	      %% Line 950
	      {'try_case',Reg}
	  %% Line 951
	  <{'try_case_end',[Arg|[]]},_cor475,_cor476,_cor477> when 'true' ->
	      let <_cor104> =
		  %% Line 952
		  apply 'resolve_arg'/1
		      (Arg)
	      in  %% Line 952
		  {'try_case_end',_cor104}
	  %% Line 953
	  <{'raise',Regs = [_X_Reg1|[_X_Reg2|[]]]},_cor478,_cor479,_cor480> when 'true' ->
	      %% Line 954
	      {'raise',{'f',0},Regs,{'x',0}}
	  %% Line 960
	  <{'bs_init2',[Lbl|[Arg2|[{'u',W}|[{'u',R}|[{'u',F}|[Arg6|[]]]]]]]},_cor481,_cor482,_cor483> when 'true' ->
	      let <_915> =
		  %% Line 961
		  apply 'resolve_args'/1
		      ([Arg2|[Arg6|[]]])
	      in  %% Line 961
		  case _915 of
		    <[A2|[A6|[]]]> when 'true' ->
			let <_cor106> = {%% Line 1200
			     'field_flags',F}
			in  %% Line 962
			    {'bs_init2',Lbl,A2,W,R,_cor106,A6}
		    ( <_cor105> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_915})
		      -| ['compiler_generated'] )
		  end
	  %% Line 963
	  <{'bs_bits_to_bytes',[Lbl|[Arg2|[Arg3|[]]]]},_cor484,_cor485,_cor486> when 'true' ->
	      let <_5271> =
		  %% Line 964
		  apply 'resolve_args'/1
		      ([Arg2|[Arg3|[]]])
	      in  %% Line 964
		  case _5271 of
		    <[A2|[A3|[]]]> when 'true' ->
			%% Line 965
			{'bs_bits_to_bytes',Lbl,A2,A3}
		    ( <_cor107> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5271})
		      -| ['compiler_generated'] )
		  end
	  %% Line 966
	  <{I = 'bs_add',[Lbl|[Arg2|[Arg3|[Arg4|[Arg5|[]]]]]]},_cor487,_cor488,_cor489> when 'true' ->
	      let <_841> =
		  %% Line 967
		  apply 'resolve_args'/1
		      ([Arg2|[Arg3|[Arg4|[Arg5|[]]]]])
	      in  %% Line 967
		  case _841 of
		    <[A2|[A3|[A4|[A5|[]]]]]> when 'true' ->
			%% Line 968
			{I,Lbl,[A2|[A3|[A4|[]]]],A5}
		    ( <_cor108> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_841})
		      -| ['compiler_generated'] )
		  end
	  %% Line 973
	  <{'apply',[{'u',Arity}|[]]},_cor490,_cor491,_cor492> when 'true' ->
	      %% Line 974
	      {'apply',Arity}
	  %% Line 975
	  <{'apply_last',[{'u',Arity}|[{'u',D}|[]]]},_cor493,_cor494,_cor495> when 'true' ->
	      %% Line 976
	      {'apply_last',Arity,D}
	  %% Line 981
	  <{I = 'is_boolean',Args0},_cor496,_cor497,_cor498> when 'true' ->
	      let <_2586> =
		  %% Line 982
		  apply 'resolve_args'/1
		      (Args0)
	      in  %% Line 982
		  case _2586 of
		    <[L|Args]> when 'true' ->
			%% Line 983
			{'test',I,L,Args}
		    ( <_cor109> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_2586})
		      -| ['compiler_generated'] )
		  end
	  %% Line 988
	  <{I = 'is_function2',Args0},_cor499,_cor500,_cor501> when 'true' ->
	      let <_1469> =
		  %% Line 989
		  apply 'resolve_args'/1
		      (Args0)
	      in  %% Line 989
		  case _1469 of
		    <[L|Args]> when 'true' ->
			%% Line 990
			{'test',I,L,Args}
		    ( <_cor110> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_1469})
		      -| ['compiler_generated'] )
		  end
	  %% Line 995
	  <{I = 'bs_start_match2',[F|[Reg|[{'u',Live}|[{'u',Max}|[Ms|[]]]]]]},_cor502,_cor503,_cor504> when 'true' ->
	      %% Line 996
	      {'test',I,F,[Reg|[Live|[Max|[Ms|[]]]]]}
	  %% Line 997
	  <{I = 'bs_get_integer2',[Lbl|[Ms|[{'u',Live}|[Arg2|[{'u',N}|[{'u',U}|[Arg5|[]]]]]]]]},_cor505,_cor506,_cor507> when 'true' ->
	      let <_6143> =
		  %% Line 998
		  apply 'resolve_args'/1
		      ([Arg2|[Arg5|[]]])
	      in  %% Line 998
		  case _6143 of
		    <[A2|[A5|[]]]> when 'true' ->
			let <_cor112> = {%% Line 1200
			     'field_flags',U}
			in  %% Line 999
			    {'test',I,Lbl,[Ms|[Live|[A2|[N|[_cor112|[A5|[]]]]]]]}
		    ( <_cor111> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_6143})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1000
	  <{I = 'bs_get_binary2',[Lbl|[Ms|[{'u',Live}|[Arg2|[{'u',N}|[{'u',U}|[Arg5|[]]]]]]]]},_cor508,_cor509,_cor510> when 'true' ->
	      let <_4602> =
		  %% Line 1001
		  apply 'resolve_args'/1
		      ([Arg2|[Arg5|[]]])
	      in  %% Line 1001
		  case _4602 of
		    <[A2|[A5|[]]]> when 'true' ->
			let <_cor114> = {%% Line 1200
			     'field_flags',U}
			in  %% Line 1002
			    {'test',I,Lbl,[Ms|[Live|[A2|[N|[_cor114|[A5|[]]]]]]]}
		    ( <_cor113> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4602})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1003
	  <{I = 'bs_get_float2',[Lbl|[Ms|[{'u',Live}|[Arg2|[{'u',N}|[{'u',U}|[Arg5|[]]]]]]]]},_cor511,_cor512,_cor513> when 'true' ->
	      let <_4429> =
		  %% Line 1004
		  apply 'resolve_args'/1
		      ([Arg2|[Arg5|[]]])
	      in  %% Line 1004
		  case _4429 of
		    <[A2|[A5|[]]]> when 'true' ->
			let <_cor116> = {%% Line 1200
			     'field_flags',U}
			in  %% Line 1005
			    {'test',I,Lbl,[Ms|[Live|[A2|[N|[_cor116|[A5|[]]]]]]]}
		    ( <_cor115> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4429})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1006
	  <{I = 'bs_skip_bits2',[Lbl|[Ms|[Arg2|[{'u',N}|[{'u',U}|[]]]]]]},_cor514,_cor515,_cor516> when 'true' ->
	      let <A2> =
		  %% Line 1007
		  apply 'resolve_arg'/1
		      (Arg2)
	      in  let <_cor118> = {%% Line 1200
		       'field_flags',U}
		  in  %% Line 1008
		      {'test',I,Lbl,[Ms|[A2|[N|[_cor118|[]]]]]}
	  %% Line 1009
	  <{I = 'bs_test_tail2',[F|[Ms|[{'u',N}|[]]]]},_cor517,_cor518,_cor519> when 'true' ->
	      %% Line 1010
	      {'test',I,F,[Ms|[N|[]]]}
	  %% Line 1011
	  <{I = 'bs_save2',[Ms|[{'u',N}|[]]]},_cor520,_cor521,_cor522> when 'true' ->
	      %% Line 1012
	      {I,Ms,N}
	  %% Line 1013
	  <{I = 'bs_restore2',[Ms|[{'u',N}|[]]]},_cor523,_cor524,_cor525> when 'true' ->
	      %% Line 1014
	      {I,Ms,N}
	  %% Line 1015
	  <{I = 'bs_save2',[Ms|[Atom = {'atom',_cor526}|[]]]},_cor527,_cor528,_cor529> when 'true' ->
	      %% Line 1017
	      {I,Ms,Atom}
	  %% Line 1018
	  <{I = 'bs_restore2',[Ms|[Atom = {'atom',_cor530}|[]]]},_cor531,_cor532,_cor533> when 'true' ->
	      %% Line 1020
	      {I,Ms,Atom}
	  %% Line 1025
	  <{'gc_bif1',Args},Imports,_cor534,_cor535> when 'true' ->
	      let <_4255> =
		  %% Line 1026
		  apply 'resolve_args'/1
		      (Args)
	      in  %% Line 1026
		  case _4255 of
		    <[F|[Live|[Bif|[A1|[Reg|[]]]]]]> when 'true' ->
			let <_cor120> =
			    %% Line 1027
			    call 'erlang':'+'
				(Bif, 1)
			in  let <_227> =
				%% Line 1216
				call 'gb_trees':'get'
				    (_cor120, _cor2)
			    in  %% Line 1027
				case _227 of
				  <{'extfunc',_X_Mod,BifName,_X_Arity}> when 'true' ->
				      %% Line 1028
				      {'gc_bif',BifName,F,Live,[A1|[]],Reg}
				  ( <_cor121> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_227})
				    -| ['compiler_generated'] )
				end
		    ( <_cor119> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4255})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1029
	  <{'gc_bif2',Args},Imports,_cor536,_cor537> when 'true' ->
	      let <_4851> =
		  %% Line 1030
		  apply 'resolve_args'/1
		      (Args)
	      in  %% Line 1030
		  case _4851 of
		    <[F|[Live|[Bif|[A1|[A2|[Reg|[]]]]]]]> when 'true' ->
			let <_cor123> =
			    %% Line 1031
			    call 'erlang':'+'
				(Bif, 1)
			in  let <_871> =
				%% Line 1216
				call 'gb_trees':'get'
				    (_cor123, _cor2)
			    in  %% Line 1031
				case _871 of
				  <{'extfunc',_X_Mod,BifName,_X_Arity}> when 'true' ->
				      %% Line 1032
				      {'gc_bif',BifName,F,Live,[A1|[A2|[]]],Reg}
				  ( <_cor124> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_871})
				    -| ['compiler_generated'] )
				end
		    ( <_cor122> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4851})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1037
	  <{'gc_bif3',Args},Imports,_cor538,_cor539> when 'true' ->
	      let <_1560> =
		  %% Line 1038
		  apply 'resolve_args'/1
		      (Args)
	      in  %% Line 1038
		  case _1560 of
		    <[F|[Live|[Bif|[A1|[A2|[A3|[Reg|[]]]]]]]]> when 'true' ->
			let <_cor126> =
			    %% Line 1039
			    call 'erlang':'+'
				(Bif, 1)
			in  let <_1428> =
				%% Line 1216
				call 'gb_trees':'get'
				    (_cor126, _cor2)
			    in  %% Line 1039
				case _1428 of
				  <{'extfunc',_X_Mod,BifName,_X_Arity}> when 'true' ->
				      %% Line 1040
				      {'gc_bif',BifName,F,Live,[A1|[A2|[A3|[]]]],Reg}
				  ( <_cor127> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_1428})
				    -| ['compiler_generated'] )
				end
		    ( <_cor125> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_1560})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1045
	  <{'bs_final2',[X|[Y|[]]]},_cor540,_cor541,_cor542> when 'true' ->
	      %% Line 1046
	      {'bs_final2',X,Y}
	  %% Line 1051
	  <{I = 'is_bitstr',Args0},_cor543,_cor544,_cor545> when 'true' ->
	      let <_3607> =
		  %% Line 1052
		  apply 'resolve_args'/1
		      (Args0)
	      in  %% Line 1052
		  case _3607 of
		    <[L|Args]> when 'true' ->
			%% Line 1053
			{'test',I,L,Args}
		    ( <_cor128> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_3607})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1058
	  <{I = 'bs_context_to_binary',[Reg0|[]]},_cor546,_cor547,_cor548> when 'true' ->
	      let <Reg> =
		  %% Line 1059
		  apply 'resolve_arg'/1
		      (Reg0)
	      in  %% Line 1060
		  {I,Reg}
	  %% Line 1061
	  <{I = 'bs_test_unit',[F|[Ms|[{'u',N}|[]]]]},_cor549,_cor550,_cor551> when 'true' ->
	      %% Line 1062
	      {'test',I,F,[Ms|[N|[]]]}
	  %% Line 1063
	  <{I = 'bs_match_string',[F|[Ms|[{'u',Bits}|[{'u',Off}|[]]]]]},_cor552,Strings,_cor553> when 'true' ->
	      let <_cor130> =
		  %% Line 1064
		  call 'erlang':'+'
		      (Bits, 7)
	      in  let <Len> =
		      %% Line 1064
		      call 'erlang':'div'
			  (_cor130, 8)
		  in  let <_cor133> =
			  %% Line 1065
			  case <> of
			    %% Line 1066
			    <>
				when call 'erlang':'>'
				      (Len,
				       0) ->
				%% Line 1067
				case ( _cor1
				       -| ['reuse_for_context'] ) of
				  <#{#<_cor554>(Off,8,'binary',['unsigned'|['big']]),
				     #<Bin>(Len,8,'binary',['unsigned'|['big']]),
				     #<_cor555>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
				      Bin
				  ( <_cor132> when 'true' ->
					do  primop 'bs_context_to_binary'
						(_cor1)
					    primop 'match_fail'
						({'badmatch',_cor1})
				    -| ['compiler_generated'] )
				end
			    %% Line 1069
			    <> when 'true' ->
				#{}#
			  end
		      in  %% Line 1071
			  {'test',I,F,[Ms|[Bits|[_cor133|[]]]]}
	  %% Line 1072
	  <{I = 'bs_init_writable',[]},_cor556,_cor557,_cor558> when 'true' ->
	      I
	  %% Line 1074
	  <{I = 'bs_append',[Lbl|[Arg2|[{'u',W}|[{'u',R}|[{'u',U}|[Arg6|[{'u',F}|[Arg8|[]]]]]]]]]},_cor559,_cor560,_cor561> when 'true' ->
	      let <_5185> =
		  %% Line 1075
		  apply 'resolve_args'/1
		      ([Arg2|[Arg6|[Arg8|[]]]])
	      in  %% Line 1075
		  case _5185 of
		    <[A2|[A6|[A8|[]]]]> when 'true' ->
			let <_cor136> = {%% Line 1200
			     'field_flags',F}
			in  %% Line 1076
			    {I,Lbl,A2,W,R,U,A6,_cor136,A8}
		    ( <_cor135> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5185})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1077
	  <{I = 'bs_private_append',[Lbl|[Arg2|[{'u',U}|[Arg4|[{'u',F}|[Arg6|[]]]]]]]},_cor562,_cor563,_cor564> when 'true' ->
	      let <_832> =
		  %% Line 1078
		  apply 'resolve_args'/1
		      ([Arg2|[Arg4|[Arg6|[]]]])
	      in  %% Line 1078
		  case _832 of
		    <[A2|[A4|[A6|[]]]]> when 'true' ->
			let <_cor138> = {%% Line 1200
			     'field_flags',F}
			in  %% Line 1079
			    {I,Lbl,A2,U,A4,_cor138,A6}
		    ( <_cor137> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_832})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1080
	  <{I = 'trim',[{'u',N}|[{'u',Remaining}|[]]]},_cor565,_cor566,_cor567> when 'true' ->
	      %% Line 1081
	      {I,N,Remaining}
	  %% Line 1082
	  <{'bs_init_bits',[Lbl|[Arg2|[{'u',W}|[{'u',R}|[{'u',F}|[Arg6|[]]]]]]]},_cor568,_cor569,_cor570> when 'true' ->
	      let <_5579> =
		  %% Line 1083
		  apply 'resolve_args'/1
		      ([Arg2|[Arg6|[]]])
	      in  %% Line 1083
		  case _5579 of
		    <[A2|[A6|[]]]> when 'true' ->
			let <_cor140> = {%% Line 1200
			     'field_flags',F}
			in  %% Line 1084
			    {'bs_init_bits',Lbl,A2,W,R,_cor140,A6}
		    ( <_cor139> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5579})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1089
	  <{I = 'bs_get_utf8',[Lbl|[Arg2|[Arg3|[{'u',U}|[Arg4|[]]]]]]},_cor571,_cor572,_cor573> when 'true' ->
	      let <_5064> =
		  %% Line 1090
		  apply 'resolve_args'/1
		      ([Arg2|[Arg3|[Arg4|[]]]])
	      in  %% Line 1090
		  case _5064 of
		    <[A2|[A3|[A4|[]]]]> when 'true' ->
			let <_cor142> = {%% Line 1200
			     'field_flags',U}
			in  %% Line 1091
			    {'test',I,Lbl,[A2|[A3|[_cor142|[A4|[]]]]]}
		    ( <_cor141> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5064})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1092
	  <{I = 'bs_skip_utf8',[Lbl|[Arg2|[Arg3|[{'u',U}|[]]]]]},_cor574,_cor575,_cor576> when 'true' ->
	      let <_1622> =
		  %% Line 1093
		  apply 'resolve_args'/1
		      ([Arg2|[Arg3|[]]])
	      in  %% Line 1093
		  case _1622 of
		    <[A2|[A3|[]]]> when 'true' ->
			let <_cor144> = {%% Line 1200
			     'field_flags',U}
			in  %% Line 1094
			    {'test',I,Lbl,[A2|[A3|[_cor144|[]]]]}
		    ( <_cor143> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_1622})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1095
	  <{I = 'bs_get_utf16',[Lbl|[Arg2|[Arg3|[{'u',U}|[Arg4|[]]]]]]},_cor577,_cor578,_cor579> when 'true' ->
	      let <_5636> =
		  %% Line 1096
		  apply 'resolve_args'/1
		      ([Arg2|[Arg3|[Arg4|[]]]])
	      in  %% Line 1096
		  case _5636 of
		    <[A2|[A3|[A4|[]]]]> when 'true' ->
			let <_cor146> = {%% Line 1200
			     'field_flags',U}
			in  %% Line 1097
			    {'test',I,Lbl,[A2|[A3|[_cor146|[A4|[]]]]]}
		    ( <_cor145> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5636})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1098
	  <{I = 'bs_skip_utf16',[Lbl|[Arg2|[Arg3|[{'u',U}|[]]]]]},_cor580,_cor581,_cor582> when 'true' ->
	      let <_4666> =
		  %% Line 1099
		  apply 'resolve_args'/1
		      ([Arg2|[Arg3|[]]])
	      in  %% Line 1099
		  case _4666 of
		    <[A2|[A3|[]]]> when 'true' ->
			let <_cor148> = {%% Line 1200
			     'field_flags',U}
			in  %% Line 1100
			    {'test',I,Lbl,[A2|[A3|[_cor148|[]]]]}
		    ( <_cor147> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4666})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1101
	  <{I = 'bs_get_utf32',[Lbl|[Arg2|[Arg3|[{'u',U}|[Arg4|[]]]]]]},_cor583,_cor584,_cor585> when 'true' ->
	      let <_4063> =
		  %% Line 1102
		  apply 'resolve_args'/1
		      ([Arg2|[Arg3|[Arg4|[]]]])
	      in  %% Line 1102
		  case _4063 of
		    <[A2|[A3|[A4|[]]]]> when 'true' ->
			let <_cor150> = {%% Line 1200
			     'field_flags',U}
			in  %% Line 1103
			    {'test',I,Lbl,[A2|[A3|[_cor150|[A4|[]]]]]}
		    ( <_cor149> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_4063})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1104
	  <{I = 'bs_skip_utf32',[Lbl|[Arg2|[Arg3|[{'u',U}|[]]]]]},_cor586,_cor587,_cor588> when 'true' ->
	      let <_1181> =
		  %% Line 1105
		  apply 'resolve_args'/1
		      ([Arg2|[Arg3|[]]])
	      in  %% Line 1105
		  case _1181 of
		    <[A2|[A3|[]]]> when 'true' ->
			let <_cor152> = {%% Line 1200
			     'field_flags',U}
			in  %% Line 1106
			    {'test',I,Lbl,[A2|[A3|[_cor152|[]]]]}
		    ( <_cor151> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_1181})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1107
	  <{I = 'bs_utf8_size',[Lbl|[Arg2|[Arg3|[]]]]},_cor589,_cor590,_cor591> when 'true' ->
	      let <_5609> =
		  %% Line 1108
		  apply 'resolve_args'/1
		      ([Arg2|[Arg3|[]]])
	      in  %% Line 1108
		  case _5609 of
		    <[A2|[A3|[]]]> when 'true' ->
			%% Line 1109
			{I,Lbl,A2,A3}
		    ( <_cor153> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_5609})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1110
	  <{I = 'bs_put_utf8',[Lbl|[{'u',U}|[Arg3|[]]]]},_cor592,_cor593,_cor594> when 'true' ->
	      let <A3> =
		  %% Line 1111
		  apply 'resolve_arg'/1
		      (Arg3)
	      in  let <_cor155> = {%% Line 1200
		       'field_flags',U}
		  in  %% Line 1112
		      {I,Lbl,_cor155,A3}
	  %% Line 1113
	  <{I = 'bs_utf16_size',[Lbl|[Arg2|[Arg3|[]]]]},_cor595,_cor596,_cor597> when 'true' ->
	      let <_3292> =
		  %% Line 1114
		  apply 'resolve_args'/1
		      ([Arg2|[Arg3|[]]])
	      in  %% Line 1114
		  case _3292 of
		    <[A2|[A3|[]]]> when 'true' ->
			%% Line 1115
			{I,Lbl,A2,A3}
		    ( <_cor156> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_3292})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1116
	  <{I = 'bs_put_utf16',[Lbl|[{'u',U}|[Arg3|[]]]]},_cor598,_cor599,_cor600> when 'true' ->
	      let <A3> =
		  %% Line 1117
		  apply 'resolve_arg'/1
		      (Arg3)
	      in  let <_cor158> = {%% Line 1200
		       'field_flags',U}
		  in  %% Line 1118
		      {I,Lbl,_cor158,A3}
	  %% Line 1119
	  <{I = 'bs_put_utf32',[Lbl|[{'u',U}|[Arg3|[]]]]},_cor601,_cor602,_cor603> when 'true' ->
	      let <A3> =
		  %% Line 1120
		  apply 'resolve_arg'/1
		      (Arg3)
	      in  let <_cor160> = {%% Line 1200
		       'field_flags',U}
		  in  %% Line 1121
		      {I,Lbl,_cor160,A3}
	  %% Line 1126
	  <{'on_load',[]},_cor604,_cor605,_cor606> when 'true' ->
	      %% Line 1127
	      'on_load'
	  %% Line 1132
	  <{'recv_mark',[Lbl|[]]},_cor607,_cor608,_cor609> when 'true' ->
	      %% Line 1133
	      {'recv_mark',Lbl}
	  %% Line 1134
	  <{'recv_set',[Lbl|[]]},_cor610,_cor611,_cor612> when 'true' ->
	      %% Line 1135
	      {'recv_set',Lbl}
	  %% Line 1140
	  <{'line',[Index|[]]},_cor613,_cor614,_cor615> when 'true' ->
	      let <_cor161> =
		  %% Line 1141
		  apply 'resolve_arg'/1
		      (Index)
	      in  %% Line 1141
		  {'line',_cor161}
	  %% Line 1146
	  <{'put_map_assoc',Args},_cor616,_cor617,_cor618> when 'true' ->
	      %% Line 1147
	      case Args of
		<[FLbl|[Src|[Dst|[{'u',N}|[{{'z',1},{'u',_X_Len},List0}|[]]]]]]> when 'true' ->
		    let <List> =
			%% Line 1148
			apply 'resolve_args'/1
			    (List0)
		    in  %% Line 1149
			{'put_map_assoc',FLbl,Src,Dst,N,{'list',List}}
		( <_cor162> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',Args})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1150
	  <{'put_map_exact',Args},_cor619,_cor620,_cor621> when 'true' ->
	      %% Line 1151
	      case Args of
		<[FLbl|[Src|[Dst|[{'u',N}|[{{'z',1},{'u',_X_Len},List0}|[]]]]]]> when 'true' ->
		    let <List> =
			%% Line 1152
			apply 'resolve_args'/1
			    (List0)
		    in  %% Line 1153
			{'put_map_exact',FLbl,Src,Dst,N,{'list',List}}
		( <_cor164> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',Args})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1154
	  <{I = 'is_map',Args0},_cor622,_cor623,_cor624> when 'true' ->
	      let <_3743> =
		  %% Line 1155
		  apply 'resolve_args'/1
		      (Args0)
	      in  %% Line 1155
		  case _3743 of
		    <[FLbl|Args]> when 'true' ->
			%% Line 1156
			{'test',I,FLbl,Args}
		    ( <_cor166> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_3743})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1157
	  <{'has_map_fields',Args0},_cor625,_cor626,_cor627> when 'true' ->
	      %% Line 1158
	      case Args0 of
		<[FLbl|[Src|[{{'z',1},{'u',_X_Len},List0}|[]]]]> when 'true' ->
		    let <List> =
			%% Line 1159
			apply 'resolve_args'/1
			    (List0)
		    in  %% Line 1160
			{'test','has_map_fields',FLbl,Src,{'list',List}}
		( <_cor167> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',Args0})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1161
	  <{'get_map_elements',Args0},_cor628,_cor629,_cor630> when 'true' ->
	      %% Line 1162
	      case Args0 of
		<[FLbl|[Src|[{{'z',1},{'u',_X_Len},List0}|[]]]]> when 'true' ->
		    let <List> =
			%% Line 1163
			apply 'resolve_args'/1
			    (List0)
		    in  %% Line 1164
			{'get_map_elements',FLbl,Src,{'list',List}}
		( <_cor169> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',Args0})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1169
	  <X,_cor631,_cor632,_cor633> when 'true' ->
	      call 'erlang':'exit'
		  ({'beam_disasm',1169,{'resolve_inst',_cor3}})
	end
'resolve_args'/1 =
    %% Line 1175
    fun (_cor0) ->
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[A|_cor2]> when 'true' ->
			    let <_cor4> =
				apply 'resolve_arg'/1
				    (A)
			    in  let <_cor5> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [_cor4|_cor5]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_3665> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  case _cor0 of
		<[A|_cor2]> when 'true' ->
		    let <_cor4> =
			apply 'resolve_arg'/1
			    (A)
		    in  let <_cor5> =
			    apply 'lc$^0'/1
				(_cor2)
			in  ( [_cor4|_cor5]
			      -| ['compiler_generated'] )
		<[]> when 'true' ->
		    []
		( <_3665> when 'true' ->
		      primop 'match_fail'
			  ({'function_clause',_cor0})
		  -| ['compiler_generated'] )
	      end
	  -| ['list_comprehension'] )
'resolve_arg'/1 =
    %% Line 1177
    fun (_cor0) ->
	case _cor0 of
	  <Arg = {'x',N}>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_cor2> =
			call 'erlang':'>='
			    (N, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      _cor0
	  %% Line 1178
	  <Arg = {'y',N}>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_cor4> =
			call 'erlang':'>='
			    (N, 0)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      _cor0
	  %% Line 1179
	  <Arg = {'fr',N}>
	      when let <_cor5> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_cor6> =
			call 'erlang':'>='
			    (N, 0)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      _cor0
	  %% Line 1180
	  <Arg = {'f',N}>
	      when let <_cor7> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_cor8> =
			call 'erlang':'>='
			    (N, 0)
		    in  call 'erlang':'and'
			    (_cor7, _cor8) ->
	      _cor0
	  %% Line 1181
	  <Arg = {'u',_cor10}> when 'true' ->
	      %% Line 1188
	      case _cor0 of
		<{'u',N}>
		    when let <_cor1> =
			  call 'erlang':'is_integer'
			      (N)
		      in  let <_cor2> =
			      call 'erlang':'>='
				  (N, 0)
			  in  call 'erlang':'and'
				  (_cor1, _cor2) ->
		    N
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'function_clause',_cor0})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1182
	  <Arg = {'i',_cor11}> when 'true' ->
	      %% Line 1190
	      case _cor0 of
		<{'i',N}>
		    when call 'erlang':'is_integer'
			  (N) ->
		    {'integer',N}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'function_clause',_cor0})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1183
	  <Arg = {'atom',Atom}>
	      when call 'erlang':'is_atom'
		    (Atom) ->
	      _cor0
	  %% Line 1184
	  <Arg = {'float',F}>
	      when call 'erlang':'is_float'
		    (F) ->
	      _cor0
	  %% Line 1185
	  <Arg = {'literal',_cor12}> when 'true' ->
	      _cor0
	  %% Line 1186
	  <'nil'> when 'true' ->
	      'nil'
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'resolve_arg',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('beam_disasm')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('beam_disasm', _cor0)
end