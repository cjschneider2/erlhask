module 'beam_a' ['module'/2,
		 'module_info'/0,
		 'module_info'/1]
    attributes []
'module'/2 =
    %% Line 27
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Mod,Exp,Attr,Fs0,Lc},_X_Opt> when 'true' ->
	      let <_cor7> =
		  %% Line 28
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[F|_cor3]> when 'true' ->
				      let <_cor5> =
					  apply 'function'/1
					      (F)
				      in  let <_cor6> =
					      apply 'lc$^0'/1
						  (_cor3)
					  in  ( [_cor5|_cor6]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_421> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Fs0)
		    -| ['list_comprehension'] )
	      in  %% Line 29
		  {'ok',{Mod,Exp,Attr,_cor7,Lc}}
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'module',2}}] )
	    -| ['compiler_generated'] )
	end
'function'/1 =
    %% Line 31
    fun (_cor0) ->
	case _cor0 of
	  <{'function',Name,Arity,CLabel,Is0}> when 'true' ->
	      %% Line 32
	      try
		  let <Is1> =
		      %% Line 34
		      apply 'rename_instrs'/1
			  (Is0)
		  in  let <Is> =
			  %% Line 38
			  call 'beam_jump':'remove_unused_labels'
			      (Is1)
		      in  %% Line 39
			  {'function',Name,Arity,CLabel,Is}
	      of <_cor3> ->
		  _cor3
	      catch <_cor6,_cor5,_cor4> ->
		  let <Stack> =
		      %% Line 42
		      call 'erlang':'get_stacktrace'
			  ()
		  in  do  %% Line 43
			  call 'io':'fwrite'
			      ([70|[117|[110|[99|[116|[105|[111|[110|[58|[32|[126|[119|[47|[126|[119|[10]]]]]]]]]]]]]]]], [Name|[Arity|[]]])
			  %% Line 44
			  call 'erlang':'raise'
			      (_cor6, _cor5, Stack)
	  ( <_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'function',1}}] )
	    -| ['compiler_generated'] )
	end
'rename_instrs'/1 =
    %% Line 47
    fun (_cor0) ->
	case _cor0 of
	  <[{'apply_last',A,N}|Is]> when 'true' ->
	      let <_cor1> =
		  %% Line 48
		  apply 'rename_instrs'/1
		      (Is)
	      in  %% Line 48
		  [{'apply',A}|[{'deallocate',N}|['return'|_cor1]]]
	  %% Line 49
	  <[{'call_last',A,F,N}|Is]> when 'true' ->
	      let <_cor2> =
		  %% Line 50
		  apply 'rename_instrs'/1
		      (Is)
	      in  %% Line 50
		  [{'call',A,F}|[{'deallocate',N}|['return'|_cor2]]]
	  %% Line 51
	  <[{'call_ext_last',A,F,N}|Is]> when 'true' ->
	      let <_cor3> =
		  %% Line 52
		  apply 'rename_instrs'/1
		      (Is)
	      in  %% Line 52
		  [{'call_ext',A,F}|[{'deallocate',N}|['return'|_cor3]]]
	  %% Line 53
	  <[{'call_only',A,F}|Is]> when 'true' ->
	      let <_cor4> =
		  %% Line 54
		  apply 'rename_instrs'/1
		      (Is)
	      in  %% Line 54
		  [{'call',A,F}|['return'|_cor4]]
	  %% Line 55
	  <[{'call_ext_only',A,F}|Is]> when 'true' ->
	      let <_cor5> =
		  %% Line 56
		  apply 'rename_instrs'/1
		      (Is)
	      in  %% Line 56
		  [{'call_ext',A,F}|['return'|_cor5]]
	  %% Line 57
	  <[I|Is]> when 'true' ->
	      let <_cor6> =
		  %% Line 58
		  apply 'rename_instr'/1
		      (I)
	      in  let <_cor7> =
		      %% Line 58
		      apply 'rename_instrs'/1
			  (Is)
		  in  %% Line 58
		      [_cor6|_cor7]
	  %% Line 59
	  <[]> when 'true' ->
	      []
	  ( <_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'rename_instrs',1}}] )
	    -| ['compiler_generated'] )
	end
'rename_instr'/1 =
    %% Line 61
    fun (_cor0) ->
	case _cor0 of
	  <{I = 'bs_put_binary',F,Sz,U,Fl,Src}> when 'true' ->
	      %% Line 62
	      {'bs_put',F,{I,U,Fl},[Sz|[Src|[]]]}
	  %% Line 63
	  <{I = 'bs_put_float',F,Sz,U,Fl,Src}> when 'true' ->
	      %% Line 64
	      {'bs_put',F,{I,U,Fl},[Sz|[Src|[]]]}
	  %% Line 65
	  <{I = 'bs_put_integer',F,Sz,U,Fl,Src}> when 'true' ->
	      %% Line 66
	      {'bs_put',F,{I,U,Fl},[Sz|[Src|[]]]}
	  %% Line 67
	  <{I = 'bs_put_utf8',F,Fl,Src}> when 'true' ->
	      %% Line 68
	      {'bs_put',F,{I,Fl},[Src|[]]}
	  %% Line 69
	  <{I = 'bs_put_utf16',F,Fl,Src}> when 'true' ->
	      %% Line 70
	      {'bs_put',F,{I,Fl},[Src|[]]}
	  %% Line 71
	  <{I = 'bs_put_utf32',F,Fl,Src}> when 'true' ->
	      %% Line 72
	      {'bs_put',F,{I,Fl},[Src|[]]}
	  %% Line 73
	  <I = {'bs_put_string',_cor2,_cor3}> when 'true' ->
	      %% Line 74
	      {'bs_put',{'f',0},_cor0,[]}
	  %% Line 75
	  <{I = 'bs_add',F,[Src1|[Src2|[U|[]]]],Dst}>
	      when call 'erlang':'is_integer'
		    (U) ->
	      %% Line 76
	      {'bif',I,F,[Src1|[Src2|[{'integer',U}|[]]]],Dst}
	  %% Line 77
	  <{I = 'bs_utf8_size',F,Src,Dst}> when 'true' ->
	      %% Line 78
	      {'bif',I,F,[Src|[]],Dst}
	  %% Line 79
	  <{I = 'bs_utf16_size',F,Src,Dst}> when 'true' ->
	      %% Line 80
	      {'bif',I,F,[Src|[]],Dst}
	  %% Line 81
	  <{I = 'bs_init2',F,Sz,Extra,Live,Flags,Dst}> when 'true' ->
	      %% Line 82
	      {'bs_init',F,{I,Extra,Flags},Live,[Sz|[]],Dst}
	  %% Line 83
	  <{I = 'bs_init_bits',F,Sz,Extra,Live,Flags,Dst}> when 'true' ->
	      %% Line 84
	      {'bs_init',F,{I,Extra,Flags},Live,[Sz|[]],Dst}
	  %% Line 85
	  <{I = 'bs_append',F,Sz,Extra,Live,U,Src,Flags,Dst}> when 'true' ->
	      %% Line 86
	      {'bs_init',F,{I,Extra,U,Flags},Live,[Sz|[Src|[]]],Dst}
	  %% Line 87
	  <{I = 'bs_private_append',F,Sz,U,Src,Flags,Dst}> when 'true' ->
	      %% Line 88
	      {'bs_init',F,{I,U,Flags},'none',[Sz|[Src|[]]],Dst}
	  %% Line 89
	  <I = 'bs_init_writable'> when 'true' ->
	      %% Line 90
	      {'bs_init',{'f',0},_cor0,1,[{'x',0}],{'x',0}}
	  %% Line 91
	  <{'put_map_assoc',Fail,S,D,R,L}> when 'true' ->
	      %% Line 92
	      {'put_map',Fail,'assoc',S,D,R,L}
	  %% Line 93
	  <{'put_map_exact',Fail,S,D,R,L}> when 'true' ->
	      %% Line 94
	      {'put_map',Fail,'exact',S,D,R,L}
	  %% Line 95
	  <{'test','has_map_fields',Fail,Src,{'list',List}}> when 'true' ->
	      %% Line 96
	      {'test','has_map_fields',Fail,[Src|List]}
	  %% Line 97
	  <{I = 'select_val',Reg,Fail,{'list',List}}> when 'true' ->
	      %% Line 98
	      {'select',I,Reg,Fail,List}
	  %% Line 99
	  <{I = 'select_tuple_arity',Reg,Fail,{'list',List}}> when 'true' ->
	      %% Line 100
	      {'select',I,Reg,Fail,List}
	  %% Line 101
	  <'send'> when 'true' ->
	      %% Line 102
	      {'call_ext',2,'send'}
	  %% Line 103
	  <I> when 'true' ->
	      _cor0
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('beam_a')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('beam_a', _cor0)
end