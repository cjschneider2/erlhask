module 'cerl' ['abstract'/1,
	       'add_ann'/2,
	       'alias_pat'/1,
	       'alias_var'/1,
	       'ann_abstract'/2,
	       'ann_c_alias'/3,
	       'ann_c_apply'/3,
	       'ann_c_atom'/2,
	       'ann_c_binary'/2,
	       'ann_c_bitstr'/5,
	       'ann_c_bitstr'/6,
	       'ann_c_call'/4,
	       'ann_c_case'/3,
	       'ann_c_catch'/2,
	       'ann_c_char'/2,
	       'ann_c_clause'/3,
	       'ann_c_clause'/4,
	       'ann_c_cons'/3,
	       'ann_c_cons_skel'/3,
	       'ann_c_float'/2,
	       'ann_c_fname'/3,
	       'ann_c_fun'/3,
	       'ann_c_int'/2,
	       'ann_c_let'/4,
	       'ann_c_letrec'/3,
	       'ann_c_map'/2,
	       'ann_c_map'/3,
	       'ann_c_map_pair'/4,
	       'ann_c_module'/4,
	       'ann_c_module'/5,
	       'ann_c_nil'/1,
	       'ann_c_primop'/3,
	       'ann_c_receive'/2,
	       'ann_c_receive'/4,
	       'ann_c_seq'/3,
	       'ann_c_string'/2,
	       'ann_c_try'/6,
	       'ann_c_tuple'/2,
	       'ann_c_tuple_skel'/2,
	       'ann_c_values'/2,
	       'ann_c_var'/2,
	       'ann_make_data'/3,
	       'ann_make_data_skel'/3,
	       'ann_make_list'/2,
	       'ann_make_list'/3,
	       'ann_make_tree'/3,
	       'apply_args'/1,
	       'apply_arity'/1,
	       'apply_op'/1,
	       'atom_lit'/1,
	       'atom_name'/1,
	       'atom_val'/1,
	       'binary_segments'/1,
	       'bitstr_bitsize'/1,
	       'bitstr_flags'/1,
	       'bitstr_size'/1,
	       'bitstr_type'/1,
	       'bitstr_unit'/1,
	       'bitstr_val'/1,
	       'c_alias'/2,
	       'c_apply'/2,
	       'c_atom'/1,
	       'c_binary'/1,
	       'c_bitstr'/3,
	       'c_bitstr'/4,
	       'c_bitstr'/5,
	       'c_call'/3,
	       'c_case'/2,
	       'c_catch'/1,
	       'c_char'/1,
	       'c_clause'/2,
	       'c_clause'/3,
	       'c_cons'/2,
	       'c_cons_skel'/2,
	       'c_float'/1,
	       'c_fname'/2,
	       'c_fun'/2,
	       'c_int'/1,
	       'c_let'/3,
	       'c_letrec'/2,
	       'c_map'/1,
	       'c_map_pair'/2,
	       'c_module'/3,
	       'c_module'/4,
	       'c_nil'/0,
	       'c_primop'/2,
	       'c_receive'/1,
	       'c_receive'/3,
	       'c_seq'/2,
	       'c_string'/1,
	       'c_try'/5,
	       'c_tuple'/1,
	       'c_tuple_skel'/1,
	       'c_values'/1,
	       'c_var'/1,
	       'call_args'/1,
	       'call_arity'/1,
	       'call_module'/1,
	       'call_name'/1,
	       'case_arg'/1,
	       'case_arity'/1,
	       'case_clauses'/1,
	       'catch_body'/1,
	       'char_lit'/1,
	       'char_val'/1,
	       'clause_arity'/1,
	       'clause_body'/1,
	       'clause_guard'/1,
	       'clause_pats'/1,
	       'clause_vars'/1,
	       'concrete'/1,
	       'cons_hd'/1,
	       'cons_tl'/1,
	       'copy_ann'/2,
	       'data_arity'/1,
	       'data_es'/1,
	       'data_type'/1,
	       'float_lit'/1,
	       'float_val'/1,
	       'fname_arity'/1,
	       'fname_id'/1,
	       'fold_literal'/1,
	       'from_records'/1,
	       'fun_arity'/1,
	       'fun_body'/1,
	       'fun_vars'/1,
	       'get_ann'/1,
	       'int_lit'/1,
	       'int_val'/1,
	       'is_c_alias'/1,
	       'is_c_apply'/1,
	       'is_c_atom'/1,
	       'is_c_binary'/1,
	       'is_c_bitstr'/1,
	       'is_c_call'/1,
	       'is_c_case'/1,
	       'is_c_catch'/1,
	       'is_c_char'/1,
	       'is_c_clause'/1,
	       'is_c_cons'/1,
	       'is_c_float'/1,
	       'is_c_fname'/1,
	       'is_c_fun'/1,
	       'is_c_int'/1,
	       'is_c_let'/1,
	       'is_c_letrec'/1,
	       'is_c_list'/1,
	       'is_c_map_empty'/1,
	       'is_c_module'/1,
	       'is_c_nil'/1,
	       'is_c_primop'/1,
	       'is_c_receive'/1,
	       'is_c_seq'/1,
	       'is_c_string'/1,
	       'is_c_try'/1,
	       'is_c_tuple'/1,
	       'is_c_values'/1,
	       'is_c_var'/1,
	       'is_data'/1,
	       'is_leaf'/1,
	       'is_literal'/1,
	       'is_literal_term'/1,
	       'is_print_char'/1,
	       'is_print_string'/1,
	       'let_arg'/1,
	       'let_arity'/1,
	       'let_body'/1,
	       'let_vars'/1,
	       'letrec_body'/1,
	       'letrec_defs'/1,
	       'letrec_vars'/1,
	       'list_elements'/1,
	       'list_length'/1,
	       'make_data'/2,
	       'make_data_skel'/2,
	       'make_list'/1,
	       'make_list'/2,
	       'make_tree'/2,
	       'map_arg'/1,
	       'map_es'/1,
	       'map_pair_key'/1,
	       'map_pair_op'/1,
	       'map_pair_val'/1,
	       'meta'/1,
	       'module_attrs'/1,
	       'module_defs'/1,
	       'module_exports'/1,
	       'module_info'/0,
	       'module_info'/1,
	       'module_name'/1,
	       'module_vars'/1,
	       'pat_list_vars'/1,
	       'pat_vars'/1,
	       'primop_args'/1,
	       'primop_arity'/1,
	       'primop_name'/1,
	       'receive_action'/1,
	       'receive_clauses'/1,
	       'receive_timeout'/1,
	       'seq_arg'/1,
	       'seq_body'/1,
	       'set_ann'/2,
	       'string_lit'/1,
	       'string_val'/1,
	       'subtrees'/1,
	       'to_records'/1,
	       'try_arg'/1,
	       'try_body'/1,
	       'try_evars'/1,
	       'try_handler'/1,
	       'try_vars'/1,
	       'tuple_arity'/1,
	       'tuple_es'/1,
	       'type'/1,
	       'unfold_literal'/1,
	       'update_c_alias'/3,
	       'update_c_apply'/3,
	       'update_c_binary'/2,
	       'update_c_bitstr'/5,
	       'update_c_bitstr'/6,
	       'update_c_call'/4,
	       'update_c_case'/3,
	       'update_c_catch'/2,
	       'update_c_clause'/4,
	       'update_c_cons'/3,
	       'update_c_cons_skel'/3,
	       'update_c_fname'/2,
	       'update_c_fname'/3,
	       'update_c_fun'/3,
	       'update_c_let'/4,
	       'update_c_letrec'/3,
	       'update_c_map'/3,
	       'update_c_map_pair'/4,
	       'update_c_module'/5,
	       'update_c_primop'/3,
	       'update_c_receive'/4,
	       'update_c_seq'/3,
	       'update_c_try'/6,
	       'update_c_tuple'/2,
	       'update_c_tuple_skel'/2,
	       'update_c_values'/2,
	       'update_c_var'/2,
	       'update_data'/3,
	       'update_data_skel'/3,
	       'update_list'/2,
	       'update_list'/3,
	       'update_tree'/2,
	       'update_tree'/3,
	       'values_arity'/1,
	       'values_es'/1,
	       'var_name'/1]
    attributes [%% Line 137
		'export_type' =
		    %% Line 137
		    [{'c_binary',0}|[{'c_bitstr',0}|[{'c_call',0}|[{'c_clause',0}|[{'c_cons',0}|[{'c_fun',0}|[{'c_literal',0}|[{'c_map',0}|[{'c_map_pair',0}|[{'c_module',0}|[{'c_tuple',0}|[{'c_values',0}|[{'c_var',0}|[{'cerl',0}|[{'var_name',0}]]]]]]]]]]]]]]],
		%% Line 31
		'type' =
		    %% Line 31
		    [{{'record','c_alias'},[{'record_field',31,{'atom',31,'anno'},{'nil',31}}|[{'record_field',31,{'atom',31,'var'}}|[{'record_field',32,{'atom',32,'pat'}}]]],[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','c_apply'},[{'record_field',34,{'atom',34,'anno'},{'nil',34}}|[{'record_field',34,{'atom',34,'op'}}|[{'record_field',35,{'atom',35,'args'}}]]],[]}],
		%% Line 37
		'type' =
		    %% Line 37
		    [{{'record','c_binary'},[{'record_field',37,{'atom',37,'anno'},{'nil',37}}|[{'typed_record_field',{'record_field',37,{'atom',37,'segments'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'type',37,'list',[{'remote_type',37,[{'atom',37,'cerl'}|[{'atom',37,'c_bitstr'}|[[]]]]}]}]]}}]],[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','c_bitstr'},[{'record_field',39,{'atom',39,'anno'},{'nil',39}}|[{'record_field',39,{'atom',39,'val'}}|[{'record_field',40,{'atom',40,'size'}}|[{'record_field',41,{'atom',41,'unit'}}|[{'record_field',42,{'atom',42,'type'}}|[{'record_field',43,{'atom',43,'flags'}}]]]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{{'record','c_call'},[{'record_field',45,{'atom',45,'anno'},{'nil',45}}|[{'record_field',45,{'atom',45,'module'}}|[{'record_field',46,{'atom',46,'name'}}|[{'record_field',47,{'atom',47,'args'}}]]]],[]}],
		%% Line 49
		'type' =
		    %% Line 49
		    [{{'record','c_case'},[{'record_field',49,{'atom',49,'anno'},{'nil',49}}|[{'record_field',49,{'atom',49,'arg'}}|[{'record_field',50,{'atom',50,'clauses'}}]]],[]}],
		%% Line 52
		'type' =
		    %% Line 52
		    [{{'record','c_catch'},[{'record_field',52,{'atom',52,'anno'},{'nil',52}}|[{'record_field',52,{'atom',52,'body'}}]],[]}],
		%% Line 54
		'type' =
		    %% Line 54
		    [{{'record','c_clause'},[{'record_field',54,{'atom',54,'anno'},{'nil',54}}|[{'record_field',54,{'atom',54,'pats'}}|[{'record_field',55,{'atom',55,'guard'}}|[{'record_field',56,{'atom',56,'body'}}]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','c_cons'},[{'record_field',58,{'atom',58,'anno'},{'nil',58}}|[{'record_field',58,{'atom',58,'hd'}}|[{'record_field',59,{'atom',59,'tl'}}]]],[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{{'record','c_fun'},[{'record_field',61,{'atom',61,'anno'},{'nil',61}}|[{'record_field',61,{'atom',61,'vars'}}|[{'record_field',62,{'atom',62,'body'}}]]],[]}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{{'record','c_let'},[{'record_field',64,{'atom',64,'anno'},{'nil',64}}|[{'record_field',64,{'atom',64,'vars'}}|[{'record_field',65,{'atom',65,'arg'}}|[{'record_field',66,{'atom',66,'body'}}]]]],[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{{'record','c_letrec'},[{'record_field',68,{'atom',68,'anno'},{'nil',68}}|[{'record_field',68,{'atom',68,'defs'}}|[{'record_field',69,{'atom',69,'body'}}]]],[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{{'record','c_literal'},[{'record_field',71,{'atom',71,'anno'},{'nil',71}}|[{'record_field',71,{'atom',71,'val'}}]],[]}],
		%% Line 73
		'type' =
		    %% Line 73
		    [{{'record','c_map'},[{'record_field',73,{'atom',73,'anno'},{'nil',73}}|[{'typed_record_field',{'record_field',74,{'atom',74,'arg'},{'record',74,'c_literal',[{'record_field',74,{'atom',74,'val'},{'map',74,[]}}]}},{'type',74,'union',[{'remote_type',74,[{'atom',74,'cerl'}|[{'atom',74,'c_var'}|[[]]]]}|[{'remote_type',74,[{'atom',74,'cerl'}|[{'atom',74,'c_literal'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',75,{'atom',75,'es'}},{'type',75,'union',[{'atom',75,'undefined'}|[{'type',75,'list',[{'remote_type',75,[{'atom',75,'cerl'}|[{'atom',75,'c_map_pair'}|[[]]]]}]}]]}}]]],[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{{'record','c_map_pair'},[{'record_field',77,{'atom',77,'anno'},{'nil',77}}|[{'typed_record_field',{'record_field',78,{'atom',78,'op'}},{'type',78,'union',[{'atom',78,'undefined'}|[{'type',78,'record',[{'atom',78,'c_literal'}|[{'type',78,'field_type',[{'atom',78,'val'}|[{'atom',78,'assoc'}]]}]]}|[{'type',78,'record',[{'atom',78,'c_literal'}|[{'type',78,'field_type',[{'atom',78,'val'}|[{'atom',78,'exact'}]]}]]}]]]}}|[{'record_field',79,{'atom',79,'key'}}|[{'record_field',80,{'atom',80,'val'}}]]]],[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{{'record','c_module'},[{'record_field',82,{'atom',82,'anno'},{'nil',82}}|[{'record_field',82,{'atom',82,'name'}}|[{'record_field',83,{'atom',83,'exports'}}|[{'record_field',84,{'atom',84,'attrs'}}|[{'record_field',85,{'atom',85,'defs'}}]]]]],[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{{'record','c_primop'},[{'record_field',87,{'atom',87,'anno'},{'nil',87}}|[{'record_field',87,{'atom',87,'name'}}|[{'record_field',88,{'atom',88,'args'}}]]],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{{'record','c_receive'},[{'record_field',90,{'atom',90,'anno'},{'nil',90}}|[{'record_field',90,{'atom',90,'clauses'}}|[{'record_field',91,{'atom',91,'timeout'}}|[{'record_field',92,{'atom',92,'action'}}]]]],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{{'record','c_seq'},[{'record_field',94,{'atom',94,'anno'},{'nil',94}}|[{'record_field',94,{'atom',94,'arg'}}|[{'record_field',95,{'atom',95,'body'}}]]],[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','c_try'},[{'record_field',97,{'atom',97,'anno'},{'nil',97}}|[{'record_field',97,{'atom',97,'arg'}}|[{'record_field',98,{'atom',98,'vars'}}|[{'record_field',99,{'atom',99,'body'}}|[{'record_field',100,{'atom',100,'evars'}}|[{'record_field',101,{'atom',101,'handler'}}]]]]]],[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','c_tuple'},[{'record_field',103,{'atom',103,'anno'},{'nil',103}}|[{'record_field',103,{'atom',103,'es'}}]],[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{{'record','c_values'},[{'record_field',105,{'atom',105,'anno'},{'nil',105}}|[{'record_field',105,{'atom',105,'es'}}]],[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{{'record','c_var'},[{'record_field',107,{'atom',107,'anno'},{'nil',107}}|[{'typed_record_field',{'record_field',107,{'atom',107,'name'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'remote_type',107,[{'atom',107,'cerl'}|[{'atom',107,'var_name'}|[[]]]]}]]}}]],[]}],
		%% Line 143
		'type' =
		    %% Line 143
		    [{'c_alias',{'type',143,'record',[{'atom',143,'c_alias'}]},[]}],
		%% Line 144
		'type' =
		    %% Line 144
		    [{'c_apply',{'type',144,'record',[{'atom',144,'c_apply'}]},[]}],
		%% Line 145
		'type' =
		    %% Line 145
		    [{'c_binary',{'type',145,'record',[{'atom',145,'c_binary'}]},[]}],
		%% Line 146
		'type' =
		    %% Line 146
		    [{'c_bitstr',{'type',146,'record',[{'atom',146,'c_bitstr'}]},[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{'c_call',{'type',147,'record',[{'atom',147,'c_call'}]},[]}],
		%% Line 148
		'type' =
		    %% Line 148
		    [{'c_case',{'type',148,'record',[{'atom',148,'c_case'}]},[]}],
		%% Line 149
		'type' =
		    %% Line 149
		    [{'c_catch',{'type',149,'record',[{'atom',149,'c_catch'}]},[]}],
		%% Line 150
		'type' =
		    %% Line 150
		    [{'c_clause',{'type',150,'record',[{'atom',150,'c_clause'}]},[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{'c_cons',{'type',151,'record',[{'atom',151,'c_cons'}]},[]}],
		%% Line 152
		'type' =
		    %% Line 152
		    [{'c_fun',{'type',152,'record',[{'atom',152,'c_fun'}]},[]}],
		%% Line 153
		'type' =
		    %% Line 153
		    [{'c_let',{'type',153,'record',[{'atom',153,'c_let'}]},[]}],
		%% Line 154
		'type' =
		    %% Line 154
		    [{'c_letrec',{'type',154,'record',[{'atom',154,'c_letrec'}]},[]}],
		%% Line 155
		'type' =
		    %% Line 155
		    [{'c_literal',{'type',155,'record',[{'atom',155,'c_literal'}]},[]}],
		%% Line 156
		'type' =
		    %% Line 156
		    [{'c_map',{'type',156,'record',[{'atom',156,'c_map'}]},[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'c_map_pair',{'type',157,'record',[{'atom',157,'c_map_pair'}]},[]}],
		%% Line 158
		'type' =
		    %% Line 158
		    [{'c_module',{'type',158,'record',[{'atom',158,'c_module'}]},[]}],
		%% Line 159
		'type' =
		    %% Line 159
		    [{'c_primop',{'type',159,'record',[{'atom',159,'c_primop'}]},[]}],
		%% Line 160
		'type' =
		    %% Line 160
		    [{'c_receive',{'type',160,'record',[{'atom',160,'c_receive'}]},[]}],
		%% Line 161
		'type' =
		    %% Line 161
		    [{'c_seq',{'type',161,'record',[{'atom',161,'c_seq'}]},[]}],
		%% Line 162
		'type' =
		    %% Line 162
		    [{'c_try',{'type',162,'record',[{'atom',162,'c_try'}]},[]}],
		%% Line 163
		'type' =
		    %% Line 163
		    [{'c_tuple',{'type',163,'record',[{'atom',163,'c_tuple'}]},[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{'c_values',{'type',164,'record',[{'atom',164,'c_values'}]},[]}],
		%% Line 165
		'type' =
		    %% Line 165
		    [{'c_var',{'type',165,'record',[{'atom',165,'c_var'}]},[]}],
		%% Line 167
		'type' =
		    %% Line 167
		    [{'cerl',{'type',167,'union',[{'type',167,'c_alias',[]}|[{'type',167,'c_apply',[]}|[{'type',167,'c_binary',[]}|[{'type',167,'c_bitstr',[]}|[{'type',168,'c_call',[]}|[{'type',168,'c_case',[]}|[{'type',168,'c_catch',[]}|[{'type',168,'c_clause',[]}|[{'type',168,'c_cons',[]}|[{'type',169,'c_fun',[]}|[{'type',169,'c_let',[]}|[{'type',169,'c_letrec',[]}|[{'type',169,'c_literal',[]}|[{'type',170,'c_map',[]}|[{'type',170,'c_map_pair',[]}|[{'type',171,'c_module',[]}|[{'type',171,'c_primop',[]}|[{'type',171,'c_receive',[]}|[{'type',171,'c_seq',[]}|[{'type',172,'c_try',[]}|[{'type',172,'c_tuple',[]}|[{'type',172,'c_values',[]}|[{'type',172,'c_var',[]}]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 174
		'type' =
		    %% Line 174
		    [{'var_name',{'type',174,'union',[{'type',174,'integer',[]}|[{'type',174,'atom',[]}|[{'type',174,'tuple',[{'type',174,'atom',[]}|[{'type',174,'integer',[]}]]}]]]},[]}],
		%% Line 266
		'type' =
		    %% Line 266
		    [{'ctype',{'type',266,'union',[{'atom',266,'alias'}|[{'atom',266,'apply'}|[{'atom',266,'binary'}|[{'atom',266,'bitrst'}|[{'atom',266,'call'}|[{'atom',266,'case'}|[{'atom',267,'catch'}|[{'atom',267,'clause'}|[{'atom',267,'cons'}|[{'atom',267,'fun'}|[{'atom',267,'let'}|[{'atom',267,'letrec'}|[{'atom',268,'literal'}|[{'atom',268,'map'}|[{'atom',268,'map_pair'}|[{'atom',268,'module'}|[{'atom',268,'primop'}|[{'atom',269,'receive'}|[{'atom',269,'seq'}|[{'atom',269,'try'}|[{'atom',269,'tuple'}|[{'atom',269,'values'}|[{'atom',269,'var'}]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 271
		'spec' =
		    %% Line 271
		    [{{'type',1},[{'type',271,'fun',[{'type',271,'product',[{'type',271,'cerl',[]}]}|[{'type',271,'ctype',[]}]]}]}],
		%% Line 312
		'spec' =
		    %% Line 312
		    [{{'is_leaf',1},[{'type',312,'fun',[{'type',312,'product',[{'type',312,'cerl',[]}]}|[{'type',312,'boolean',[]}]]}]}],
		%% Line 330
		'spec' =
		    %% Line 330
		    [{{'get_ann',1},[{'type',330,'fun',[{'type',330,'product',[{'type',330,'cerl',[]}]}|[{'type',330,'list',[{'type',330,'term',[]}]}]]}]}],
		%% Line 345
		'spec' =
		    %% Line 345
		    [{{'set_ann',2},[{'type',345,'fun',[{'type',345,'product',[{'type',345,'cerl',[]}|[{'type',345,'list',[{'type',345,'term',[]}]}]]}|[{'type',345,'cerl',[]}]]}]}],
		%% Line 362
		'spec' =
		    %% Line 362
		    [{{'add_ann',2},[{'type',362,'fun',[{'type',362,'product',[{'type',362,'list',[{'type',362,'term',[]}]}|[{'type',362,'cerl',[]}]]}|[{'type',362,'cerl',[]}]]}]}],
		%% Line 379
		'spec' =
		    %% Line 379
		    [{{'copy_ann',2},[{'type',379,'fun',[{'type',379,'product',[{'type',379,'cerl',[]}|[{'type',379,'cerl',[]}]]}|[{'type',379,'cerl',[]}]]}]}],
		%% Line 400
		'spec' =
		    %% Line 400
		    [{{'abstract',1},[{'type',400,'fun',[{'type',400,'product',[{'type',400,'term',[]}]}|[{'type',400,'c_literal',[]}]]}]}],
		%% Line 409
		'spec' =
		    %% Line 409
		    [{{'ann_abstract',2},[{'type',409,'fun',[{'type',409,'product',[{'type',409,'list',[{'type',409,'term',[]}]}|[{'type',409,'term',[]}]]}|[{'type',409,'c_literal',[]}]]}]}],
		%% Line 423
		'spec' =
		    %% Line 423
		    [{{'is_literal_term',1},[{'type',423,'fun',[{'type',423,'product',[{'type',423,'term',[]}]}|[{'type',423,'boolean',[]}]]}]}],
		%% Line 437
		'spec' =
		    %% Line 437
		    [{{'is_literal_term_list',1},[{'type',437,'fun',[{'type',437,'product',[{'type',437,'list',[{'type',437,'term',[]}]}]}|[{'type',437,'boolean',[]}]]}]}],
		%% Line 465
		'spec' =
		    %% Line 465
		    [{{'concrete',1},[{'type',465,'fun',[{'type',465,'product',[{'type',465,'c_literal',[]}]}|[{'type',465,'term',[]}]]}]}],
		%% Line 484
		'spec' =
		    %% Line 484
		    [{{'is_literal',1},[{'type',484,'fun',[{'type',484,'product',[{'type',484,'cerl',[]}]}|[{'type',484,'boolean',[]}]]}]}],
		%% Line 511
		'spec' =
		    %% Line 511
		    [{{'fold_literal',1},[{'type',511,'fun',[{'type',511,'product',[{'type',511,'cerl',[]}]}|[{'type',511,'cerl',[]}]]}]}],
		%% Line 547
		'spec' =
		    %% Line 547
		    [{{'unfold_literal',1},[{'type',547,'fun',[{'type',547,'product',[{'type',547,'cerl',[]}]}|[{'type',547,'cerl',[]}]]}]}],
		%% Line 582
		'spec' =
		    %% Line 582
		    [{{'c_module',3},[{'type',582,'fun',[{'type',582,'product',[{'type',582,'cerl',[]}|[{'type',582,'list',[{'type',582,'cerl',[]}]}|[{'type',582,'list',[{'type',582,'tuple',[{'type',582,'cerl',[]}|[{'type',582,'cerl',[]}]]}]}]]]}|[{'type',582,'c_module',[]}]]}]}],
		%% Line 630
		'spec' =
		    %% Line 630
		    [{{'c_module',4},[{'type',630,'fun',[{'type',630,'product',[{'type',630,'cerl',[]}|[{'type',630,'list',[{'type',630,'cerl',[]}]}|[{'type',630,'list',[{'type',630,'tuple',[{'type',630,'cerl',[]}|[{'type',630,'cerl',[]}]]}]}|[{'type',630,'list',[{'type',630,'tuple',[{'type',630,'cerl',[]}|[{'type',630,'cerl',[]}]]}]}]]]]}|[{'type',631,'c_module',[]}]]}]}],
		%% Line 646
		'spec' =
		    %% Line 646
		    [{{'ann_c_module',4},[{'type',646,'fun',[{'type',646,'product',[{'type',646,'list',[{'type',646,'term',[]}]}|[{'type',646,'cerl',[]}|[{'type',646,'list',[{'type',646,'cerl',[]}]}|[{'type',646,'list',[{'type',646,'tuple',[{'type',646,'cerl',[]}|[{'type',646,'cerl',[]}]]}]}]]]]}|[{'type',647,'c_module',[]}]]}]}],
		%% Line 664
		'spec' =
		    %% Line 664
		    [{{'ann_c_module',5},[{'type',664,'fun',[{'type',664,'product',[{'type',664,'list',[{'type',664,'term',[]}]}|[{'type',664,'cerl',[]}|[{'type',664,'list',[{'type',664,'cerl',[]}]}|[{'type',665,'list',[{'type',665,'tuple',[{'type',665,'cerl',[]}|[{'type',665,'cerl',[]}]]}]}|[{'type',665,'list',[{'type',665,'tuple',[{'type',665,'cerl',[]}|[{'type',665,'cerl',[]}]]}]}]]]]]}|[{'type',665,'c_module',[]}]]}]}],
		%% Line 681
		'spec' =
		    %% Line 681
		    [{{'update_c_module',5},[{'type',681,'fun',[{'type',681,'product',[{'type',681,'c_module',[]}|[{'type',681,'cerl',[]}|[{'type',681,'list',[{'type',681,'cerl',[]}]}|[{'type',682,'list',[{'type',682,'tuple',[{'type',682,'cerl',[]}|[{'type',682,'cerl',[]}]]}]}|[{'type',682,'list',[{'type',682,'tuple',[{'type',682,'cerl',[]}|[{'type',682,'cerl',[]}]]}]}]]]]]}|[{'type',682,'c_module',[]}]]}]}],
		%% Line 696
		'spec' =
		    %% Line 696
		    [{{'is_c_module',1},[{'type',696,'fun',[{'type',696,'product',[{'type',696,'cerl',[]}]}|[{'type',696,'boolean',[]}]]}]}],
		%% Line 710
		'spec' =
		    %% Line 710
		    [{{'module_name',1},[{'type',710,'fun',[{'type',710,'product',[{'type',710,'c_module',[]}]}|[{'type',710,'cerl',[]}]]}]}],
		%% Line 723
		'spec' =
		    %% Line 723
		    [{{'module_exports',1},[{'type',723,'fun',[{'type',723,'product',[{'type',723,'c_module',[]}]}|[{'type',723,'list',[{'type',723,'cerl',[]}]}]]}]}],
		%% Line 736
		'spec' =
		    %% Line 736
		    [{{'module_attrs',1},[{'type',736,'fun',[{'type',736,'product',[{'type',736,'c_module',[]}]}|[{'type',736,'list',[{'type',736,'tuple',[{'type',736,'cerl',[]}|[{'type',736,'cerl',[]}]]}]}]]}]}],
		%% Line 749
		'spec' =
		    %% Line 749
		    [{{'module_defs',1},[{'type',749,'fun',[{'type',749,'product',[{'type',749,'c_module',[]}]}|[{'type',749,'list',[{'type',749,'tuple',[{'type',749,'cerl',[]}|[{'type',749,'cerl',[]}]]}]}]]}]}],
		%% Line 762
		'spec' =
		    %% Line 762
		    [{{'module_vars',1},[{'type',762,'fun',[{'type',762,'product',[{'type',762,'c_module',[]}]}|[{'type',762,'list',[{'type',762,'cerl',[]}]}]]}]}],
		%% Line 782
		'spec' =
		    %% Line 782
		    [{{'c_int',1},[{'type',782,'fun',[{'type',782,'product',[{'type',782,'integer',[]}]}|[{'type',782,'c_literal',[]}]]}]}],
		%% Line 791
		'spec' =
		    %% Line 791
		    [{{'ann_c_int',2},[{'type',791,'fun',[{'type',791,'product',[{'type',791,'list',[{'type',791,'term',[]}]}|[{'type',791,'integer',[]}]]}|[{'type',791,'c_literal',[]}]]}]}],
		%% Line 803
		'spec' =
		    %% Line 803
		    [{{'is_c_int',1},[{'type',803,'fun',[{'type',803,'product',[{'type',803,'cerl',[]}]}|[{'type',803,'boolean',[]}]]}]}],
		%% Line 816
		'spec' =
		    %% Line 816
		    [{{'int_val',1},[{'type',816,'fun',[{'type',816,'product',[{'type',816,'c_literal',[]}]}|[{'type',816,'integer',[]}]]}]}],
		%% Line 828
		'spec' =
		    %% Line 828
		    [{{'int_lit',1},[{'type',828,'fun',[{'type',828,'product',[{'type',828,'c_literal',[]}]}|[{'type',828,'string',[]}]]}]}],
		%% Line 850
		'spec' =
		    %% Line 850
		    [{{'c_float',1},[{'type',850,'fun',[{'type',850,'product',[{'type',850,'float',[]}]}|[{'type',850,'c_literal',[]}]]}]}],
		%% Line 859
		'spec' =
		    %% Line 859
		    [{{'ann_c_float',2},[{'type',859,'fun',[{'type',859,'product',[{'type',859,'list',[{'type',859,'term',[]}]}|[{'type',859,'float',[]}]]}|[{'type',859,'c_literal',[]}]]}]}],
		%% Line 871
		'spec' =
		    %% Line 871
		    [{{'is_c_float',1},[{'type',871,'fun',[{'type',871,'product',[{'type',871,'cerl',[]}]}|[{'type',871,'boolean',[]}]]}]}],
		%% Line 885
		'spec' =
		    %% Line 885
		    [{{'float_val',1},[{'type',885,'fun',[{'type',885,'product',[{'type',885,'c_literal',[]}]}|[{'type',885,'float',[]}]]}]}],
		%% Line 897
		'spec' =
		    %% Line 897
		    [{{'float_lit',1},[{'type',897,'fun',[{'type',897,'product',[{'type',897,'c_literal',[]}]}|[{'type',897,'string',[]}]]}]}],
		%% Line 920
		'spec' =
		    %% Line 920
		    [{{'c_atom',1},[{'type',920,'fun',[{'type',920,'product',[{'type',920,'union',[{'type',920,'atom',[]}|[{'type',920,'string',[]}]]}]}|[{'type',920,'c_literal',[]}]]}]}],
		%% Line 932
		'spec' =
		    %% Line 932
		    [{{'ann_c_atom',2},[{'type',932,'fun',[{'type',932,'product',[{'type',932,'list',[{'type',932,'term',[]}]}|[{'type',932,'union',[{'type',932,'atom',[]}|[{'type',932,'string',[]}]]}]]}|[{'type',932,'c_literal',[]}]]}]}],
		%% Line 947
		'spec' =
		    %% Line 947
		    [{{'is_c_atom',1},[{'type',947,'fun',[{'type',947,'product',[{'type',947,'cerl',[]}]}|[{'type',947,'boolean',[]}]]}]}],
		%% Line 960
		'spec' =
		    %% Line 960
		    [{{'atom_val',1},[{'type',960,'fun',[{'type',960,'product',[{'type',960,'c_literal',[]}]}|[{'type',960,'atom',[]}]]}]}],
		%% Line 972
		'spec' =
		    %% Line 972
		    [{{'atom_name',1},[{'type',972,'fun',[{'type',972,'product',[{'type',972,'c_literal',[]}]}|[{'type',972,'string',[]}]]}]}],
		%% Line 993
		'spec' =
		    %% Line 993
		    [{{'atom_lit',1},[{'type',993,'fun',[{'type',993,'product',[{'type',993,'cerl',[]}]}|[{'type',993,'nonempty_string',[]}]]}]}],
		%% Line 1022
		'spec' =
		    %% Line 1022
		    [{{'c_char',1},[{'type',1022,'fun',[{'type',1022,'product',[{'type',1022,'non_neg_integer',[]}]}|[{'type',1022,'c_literal',[]}]]}]}],
		%% Line 1031
		'spec' =
		    %% Line 1031
		    [{{'ann_c_char',2},[{'type',1031,'fun',[{'type',1031,'product',[{'type',1031,'list',[{'type',1031,'term',[]}]}|[{'type',1031,'char',[]}]]}|[{'type',1031,'c_literal',[]}]]}]}],
		%% Line 1050
		'spec' =
		    %% Line 1050
		    [{{'is_c_char',1},[{'type',1050,'fun',[{'type',1050,'product',[{'type',1050,'c_literal',[]}]}|[{'type',1050,'boolean',[]}]]}]}],
		%% Line 1070
		'spec' =
		    %% Line 1070
		    [{{'is_print_char',1},[{'type',1070,'fun',[{'type',1070,'product',[{'type',1070,'cerl',[]}]}|[{'type',1070,'boolean',[]}]]}]}],
		%% Line 1084
		'spec' =
		    %% Line 1084
		    [{{'char_val',1},[{'type',1084,'fun',[{'type',1084,'product',[{'type',1084,'c_literal',[]}]}|[{'type',1084,'char',[]}]]}]}],
		%% Line 1099
		'spec' =
		    %% Line 1099
		    [{{'char_lit',1},[{'type',1099,'fun',[{'type',1099,'product',[{'type',1099,'c_literal',[]}]}|[{'type',1099,'nonempty_string',[]}]]}]}],
		%% Line 1123
		'spec' =
		    %% Line 1123
		    [{{'c_string',1},[{'type',1123,'fun',[{'type',1123,'product',[{'type',1123,'string',[]}]}|[{'type',1123,'c_literal',[]}]]}]}],
		%% Line 1132
		'spec' =
		    %% Line 1132
		    [{{'ann_c_string',2},[{'type',1132,'fun',[{'type',1132,'product',[{'type',1132,'list',[{'type',1132,'term',[]}]}|[{'type',1132,'string',[]}]]}|[{'type',1132,'c_literal',[]}]]}]}],
		%% Line 1148
		'spec' =
		    %% Line 1148
		    [{{'is_c_string',1},[{'type',1148,'fun',[{'type',1148,'product',[{'type',1148,'cerl',[]}]}|[{'type',1148,'boolean',[]}]]}]}],
		%% Line 1168
		'spec' =
		    %% Line 1168
		    [{{'is_print_string',1},[{'type',1168,'fun',[{'type',1168,'product',[{'type',1168,'cerl',[]}]}|[{'type',1168,'boolean',[]}]]}]}],
		%% Line 1182
		'spec' =
		    %% Line 1182
		    [{{'string_val',1},[{'type',1182,'fun',[{'type',1182,'product',[{'type',1182,'c_literal',[]}]}|[{'type',1182,'string',[]}]]}]}],
		%% Line 1198
		'spec' =
		    %% Line 1198
		    [{{'string_lit',1},[{'type',1198,'fun',[{'type',1198,'product',[{'type',1198,'c_literal',[]}]}|[{'type',1198,'nonempty_string',[]}]]}]}],
		%% Line 1215
		'spec' =
		    %% Line 1215
		    [{{'c_nil',0},[{'type',1215,'fun',[{'type',1215,'product',[]}|[{'type',1215,'c_literal',[]}]]}]}],
		%% Line 1224
		'spec' =
		    %% Line 1224
		    [{{'ann_c_nil',1},[{'type',1224,'fun',[{'type',1224,'product',[{'type',1224,'list',[{'type',1224,'term',[]}]}]}|[{'type',1224,'c_literal',[]}]]}]}],
		%% Line 1235
		'spec' =
		    %% Line 1235
		    [{{'is_c_nil',1},[{'type',1235,'fun',[{'type',1235,'product',[{'type',1235,'cerl',[]}]}|[{'type',1235,'boolean',[]}]]}]}],
		%% Line 1271
		'spec' =
		    %% Line 1271
		    [{{'c_cons',2},[{'type',1271,'fun',[{'type',1271,'product',[{'type',1271,'cerl',[]}|[{'type',1271,'cerl',[]}]]}|[{'type',1271,'union',[{'type',1271,'c_literal',[]}|[{'type',1271,'c_cons',[]}]]}]]}]}],
		%% Line 1282
		'spec' =
		    %% Line 1282
		    [{{'ann_c_cons',3},[{'type',1282,'fun',[{'type',1282,'product',[{'type',1282,'list',[{'type',1282,'term',[]}]}|[{'type',1282,'cerl',[]}|[{'type',1282,'cerl',[]}]]]}|[{'type',1282,'union',[{'type',1282,'c_literal',[]}|[{'type',1282,'c_cons',[]}]]}]]}]}],
		%% Line 1294
		'spec' =
		    %% Line 1294
		    [{{'update_c_cons',3},[{'type',1294,'fun',[{'type',1294,'product',[{'type',1294,'union',[{'type',1294,'c_literal',[]}|[{'type',1294,'c_cons',[]}]]}|[{'type',1294,'cerl',[]}|[{'type',1294,'cerl',[]}]]]}|[{'type',1295,'union',[{'type',1295,'c_literal',[]}|[{'type',1295,'c_cons',[]}]]}]]}]}],
		%% Line 1332
		'spec' =
		    %% Line 1332
		    [{{'c_cons_skel',2},[{'type',1332,'fun',[{'type',1332,'product',[{'type',1332,'cerl',[]}|[{'type',1332,'cerl',[]}]]}|[{'type',1332,'c_cons',[]}]]}]}],
		%% Line 1342
		'spec' =
		    %% Line 1342
		    [{{'ann_c_cons_skel',3},[{'type',1342,'fun',[{'type',1342,'product',[{'type',1342,'list',[{'type',1342,'term',[]}]}|[{'type',1342,'cerl',[]}|[{'type',1342,'cerl',[]}]]]}|[{'type',1342,'c_cons',[]}]]}]}],
		%% Line 1352
		'spec' =
		    %% Line 1352
		    [{{'update_c_cons_skel',3},[{'type',1352,'fun',[{'type',1352,'product',[{'type',1352,'union',[{'type',1352,'c_cons',[]}|[{'type',1352,'c_literal',[]}]]}|[{'type',1352,'cerl',[]}|[{'type',1352,'cerl',[]}]]]}|[{'type',1352,'c_cons',[]}]]}]}],
		%% Line 1363
		'spec' =
		    %% Line 1363
		    [{{'is_c_cons',1},[{'type',1363,'fun',[{'type',1363,'product',[{'type',1363,'cerl',[]}]}|[{'type',1363,'boolean',[]}]]}]}],
		%% Line 1379
		'spec' =
		    %% Line 1379
		    [{{'cons_hd',1},[{'type',1379,'fun',[{'type',1379,'product',[{'type',1379,'union',[{'type',1379,'c_cons',[]}|[{'type',1379,'c_literal',[]}]]}]}|[{'type',1379,'cerl',[]}]]}]}],
		%% Line 1396
		'spec' =
		    %% Line 1396
		    [{{'cons_tl',1},[{'type',1396,'fun',[{'type',1396,'product',[{'type',1396,'union',[{'type',1396,'c_cons',[]}|[{'type',1396,'c_literal',[]}]]}]}|[{'type',1396,'cerl',[]}]]}]}],
		%% Line 1427
		'spec' =
		    %% Line 1427
		    [{{'is_c_list',1},[{'type',1427,'fun',[{'type',1427,'product',[{'type',1427,'cerl',[]}]}|[{'type',1427,'boolean',[]}]]}]}],
		%% Line 1458
		'spec' =
		    %% Line 1458
		    [{{'list_elements',1},[{'type',1458,'fun',[{'type',1458,'product',[{'type',1458,'union',[{'type',1458,'c_cons',[]}|[{'type',1458,'c_literal',[]}]]}]}|[{'type',1458,'list',[{'type',1458,'cerl',[]}]}]]}]}],
		%% Line 1488
		'spec' =
		    %% Line 1488
		    [{{'list_length',1},[{'type',1488,'fun',[{'type',1488,'product',[{'type',1488,'union',[{'type',1488,'c_cons',[]}|[{'type',1488,'c_literal',[]}]]}]}|[{'type',1488,'non_neg_integer',[]}]]}]}],
		%% Line 1502
		'spec' =
		    %% Line 1502
		    [{{'make_list',1},[{'type',1502,'fun',[{'type',1502,'product',[{'type',1502,'list',[{'type',1502,'cerl',[]}]}]}|[{'type',1502,'cerl',[]}]]}]}],
		%% Line 1523
		'spec' =
		    %% Line 1523
		    [{{'make_list',2},[{'type',1523,'fun',[{'type',1523,'product',[{'type',1523,'list',[{'type',1523,'cerl',[]}]}|[{'type',1523,'union',[{'type',1523,'cerl',[]}|[{'atom',1523,'none'}]]}]]}|[{'type',1523,'cerl',[]}]]}]}],
		%% Line 1532
		'spec' =
		    %% Line 1532
		    [{{'update_list',2},[{'type',1532,'fun',[{'type',1532,'product',[{'type',1532,'cerl',[]}|[{'type',1532,'list',[{'type',1532,'cerl',[]}]}]]}|[{'type',1532,'cerl',[]}]]}]}],
		%% Line 1545
		'spec' =
		    %% Line 1545
		    [{{'update_list',3},[{'type',1545,'fun',[{'type',1545,'product',[{'type',1545,'cerl',[]}|[{'type',1545,'list',[{'type',1545,'cerl',[]}]}|[{'type',1545,'union',[{'type',1545,'cerl',[]}|[{'atom',1545,'none'}]]}]]]}|[{'type',1545,'cerl',[]}]]}]}],
		%% Line 1554
		'spec' =
		    %% Line 1554
		    [{{'ann_make_list',2},[{'type',1554,'fun',[{'type',1554,'product',[{'type',1554,'list',[{'type',1554,'term',[]}]}|[{'type',1554,'list',[{'type',1554,'cerl',[]}]}]]}|[{'type',1554,'cerl',[]}]]}]}],
		%% Line 1567
		'spec' =
		    %% Line 1567
		    [{{'ann_make_list',3},[{'type',1567,'fun',[{'type',1567,'product',[{'type',1567,'list',[{'type',1567,'term',[]}]}|[{'type',1567,'list',[{'type',1567,'cerl',[]}]}|[{'type',1567,'union',[{'type',1567,'cerl',[]}|[{'atom',1567,'none'}]]}]]]}|[{'type',1567,'cerl',[]}]]}]}],
		%% Line 1580
		'spec' =
		    %% Line 1580
		    [{{'map_es',1},[{'type',1580,'fun',[{'type',1580,'product',[{'type',1580,'c_map',[]}]}|[{'type',1580,'list',[{'type',1580,'c_map_pair',[]}]}]]}]}],
		%% Line 1585
		'spec' =
		    %% Line 1585
		    [{{'map_arg',1},[{'type',1585,'fun',[{'type',1585,'product',[{'type',1585,'c_map',[]}]}|[{'type',1585,'union',[{'type',1585,'c_map',[]}|[{'type',1585,'c_literal',[]}]]}]]}]}],
		%% Line 1590
		'spec' =
		    %% Line 1590
		    [{{'c_map',1},[{'type',1590,'fun',[{'type',1590,'product',[{'type',1590,'list',[{'type',1590,'c_map_pair',[]}]}]}|[{'type',1590,'c_map',[]}]]}]}],
		%% Line 1595
		'spec' =
		    %% Line 1595
		    [{{'is_c_map_empty',1},[{'type',1595,'fun',[{'type',1595,'product',[{'type',1595,'union',[{'type',1595,'c_map',[]}|[{'type',1595,'c_literal',[]}]]}]}|[{'type',1595,'boolean',[]}]]}]}],
		%% Line 1601
		'spec' =
		    %% Line 1601
		    [{{'ann_c_map',2},[{'type',1601,'fun',[{'type',1601,'product',[{'type',1601,'list',[{'type',1601,'term',[]}]}|[{'type',1601,'list',[{'type',1601,'cerl',[]}]}]]}|[{'type',1601,'union',[{'type',1601,'c_map',[]}|[{'type',1601,'c_literal',[]}]]}]]}]}],
		%% Line 1606
		'spec' =
		    %% Line 1606
		    [{{'ann_c_map',3},[{'type',1606,'fun',[{'type',1606,'product',[{'type',1606,'list',[{'type',1606,'term',[]}]}|[{'type',1606,'union',[{'type',1606,'c_map',[]}|[{'type',1606,'c_literal',[]}]]}|[{'type',1606,'list',[{'type',1606,'c_map_pair',[]}]}]]]}|[{'type',1606,'union',[{'type',1606,'c_map',[]}|[{'type',1606,'c_literal',[]}]]}]]}]}],
		%% Line 1660
		'spec' =
		    %% Line 1660
		    [{{'c_map_pair',2},[{'type',1660,'fun',[{'type',1660,'product',[{'type',1660,'cerl',[]}|[{'type',1660,'cerl',[]}]]}|[{'type',1660,'c_map_pair',[]}]]}]}],
		%% Line 1665
		'spec' =
		    %% Line 1665
		    [{{'ann_c_map_pair',4},[{'type',1665,'fun',[{'type',1665,'product',[{'type',1665,'list',[{'type',1665,'term',[]}]}|[{'type',1665,'cerl',[]}|[{'type',1665,'cerl',[]}|[{'type',1665,'cerl',[]}]]]]}|[{'type',1666,'c_map_pair',[]}]]}]}],
		%% Line 1699
		'spec' =
		    %% Line 1699
		    [{{'c_tuple',1},[{'type',1699,'fun',[{'type',1699,'product',[{'type',1699,'list',[{'type',1699,'cerl',[]}]}]}|[{'type',1699,'union',[{'type',1699,'c_tuple',[]}|[{'type',1699,'c_literal',[]}]]}]]}]}],
		%% Line 1713
		'spec' =
		    %% Line 1713
		    [{{'ann_c_tuple',2},[{'type',1713,'fun',[{'type',1713,'product',[{'type',1713,'list',[{'type',1713,'term',[]}]}|[{'type',1713,'list',[{'type',1713,'cerl',[]}]}]]}|[{'type',1713,'union',[{'type',1713,'c_tuple',[]}|[{'type',1713,'c_literal',[]}]]}]]}]}],
		%% Line 1727
		'spec' =
		    %% Line 1727
		    [{{'update_c_tuple',2},[{'type',1727,'fun',[{'type',1727,'product',[{'type',1727,'union',[{'type',1727,'c_tuple',[]}|[{'type',1727,'c_literal',[]}]]}|[{'type',1727,'list',[{'type',1727,'cerl',[]}]}]]}|[{'type',1727,'union',[{'type',1727,'c_tuple',[]}|[{'type',1727,'c_literal',[]}]]}]]}]}],
		%% Line 1767
		'spec' =
		    %% Line 1767
		    [{{'c_tuple_skel',1},[{'type',1767,'fun',[{'type',1767,'product',[{'type',1767,'list',[{'type',1767,'cerl',[]}]}]}|[{'type',1767,'c_tuple',[]}]]}]}],
		%% Line 1776
		'spec' =
		    %% Line 1776
		    [{{'ann_c_tuple_skel',2},[{'type',1776,'fun',[{'type',1776,'product',[{'type',1776,'list',[{'type',1776,'term',[]}]}|[{'type',1776,'list',[{'type',1776,'cerl',[]}]}]]}|[{'type',1776,'c_tuple',[]}]]}]}],
		%% Line 1785
		'spec' =
		    %% Line 1785
		    [{{'update_c_tuple_skel',2},[{'type',1785,'fun',[{'type',1785,'product',[{'type',1785,'c_tuple',[]}|[{'type',1785,'list',[{'type',1785,'cerl',[]}]}]]}|[{'type',1785,'c_tuple',[]}]]}]}],
		%% Line 1798
		'spec' =
		    %% Line 1798
		    [{{'is_c_tuple',1},[{'type',1798,'fun',[{'type',1798,'product',[{'type',1798,'cerl',[]}]}|[{'type',1798,'boolean',[]}]]}]}],
		%% Line 1814
		'spec' =
		    %% Line 1814
		    [{{'tuple_es',1},[{'type',1814,'fun',[{'type',1814,'product',[{'type',1814,'union',[{'type',1814,'c_tuple',[]}|[{'type',1814,'c_literal',[]}]]}]}|[{'type',1814,'list',[{'type',1814,'cerl',[]}]}]]}]}],
		%% Line 1832
		'spec' =
		    %% Line 1832
		    [{{'tuple_arity',1},[{'type',1832,'fun',[{'type',1832,'product',[{'type',1832,'union',[{'type',1832,'c_tuple',[]}|[{'type',1832,'c_literal',[]}]]}]}|[{'type',1832,'non_neg_integer',[]}]]}]}],
		%% Line 1881
		'spec' =
		    %% Line 1881
		    [{{'c_var',1},[{'type',1881,'fun',[{'type',1881,'product',[{'type',1881,'var_name',[]}]}|[{'type',1881,'c_var',[]}]]}]}],
		%% Line 1891
		'spec' =
		    %% Line 1891
		    [{{'ann_c_var',2},[{'type',1891,'fun',[{'type',1891,'product',[{'type',1891,'list',[{'type',1891,'term',[]}]}|[{'type',1891,'var_name',[]}]]}|[{'type',1891,'c_var',[]}]]}]}],
		%% Line 1900
		'spec' =
		    %% Line 1900
		    [{{'update_c_var',2},[{'type',1900,'fun',[{'type',1900,'product',[{'type',1900,'c_var',[]}|[{'type',1900,'var_name',[]}]]}|[{'type',1900,'c_var',[]}]]}]}],
		%% Line 1913
		'spec' =
		    %% Line 1913
		    [{{'is_c_var',1},[{'type',1913,'fun',[{'type',1913,'product',[{'type',1913,'cerl',[]}]}|[{'type',1913,'boolean',[]}]]}]}],
		%% Line 1929
		'spec' =
		    %% Line 1929
		    [{{'c_fname',2},[{'type',1929,'fun',[{'type',1929,'product',[{'type',1929,'atom',[]}|[{'type',1929,'non_neg_integer',[]}]]}|[{'type',1929,'c_var',[]}]]}]}],
		%% Line 1940
		'spec' =
		    %% Line 1940
		    [{{'ann_c_fname',3},[{'type',1940,'fun',[{'type',1940,'product',[{'type',1940,'list',[{'type',1940,'term',[]}]}|[{'type',1940,'atom',[]}|[{'type',1940,'non_neg_integer',[]}]]]}|[{'type',1940,'c_var',[]}]]}]}],
		%% Line 1952
		'spec' =
		    %% Line 1952
		    [{{'update_c_fname',2},[{'type',1952,'fun',[{'type',1952,'product',[{'type',1952,'c_var',[]}|[{'type',1952,'atom',[]}]]}|[{'type',1952,'c_var',[]}]]}]}],
		%% Line 1964
		'spec' =
		    %% Line 1964
		    [{{'update_c_fname',3},[{'type',1964,'fun',[{'type',1964,'product',[{'type',1964,'c_var',[]}|[{'type',1964,'atom',[]}|[{'type',1964,'integer',[]}]]]}|[{'type',1964,'c_var',[]}]]}]}],
		%% Line 1979
		'spec' =
		    %% Line 1979
		    [{{'is_c_fname',1},[{'type',1979,'fun',[{'type',1979,'product',[{'type',1979,'cerl',[]}]}|[{'type',1979,'boolean',[]}]]}]}],
		%% Line 1993
		'spec' =
		    %% Line 1993
		    [{{'var_name',1},[{'type',1993,'fun',[{'type',1993,'product',[{'type',1993,'c_var',[]}]}|[{'type',1993,'var_name',[]}]]}]}],
		%% Line 2007
		'spec' =
		    %% Line 2007
		    [{{'fname_id',1},[{'type',2007,'fun',[{'type',2007,'product',[{'type',2007,'c_var',[]}]}|[{'type',2007,'atom',[]}]]}]}],
		%% Line 2020
		'spec' =
		    %% Line 2020
		    [{{'fname_arity',1},[{'type',2020,'fun',[{'type',2020,'product',[{'type',2020,'c_var',[]}]}|[{'type',2020,'byte',[]}]]}]}],
		%% Line 2040
		'spec' =
		    %% Line 2040
		    [{{'c_values',1},[{'type',2040,'fun',[{'type',2040,'product',[{'type',2040,'list',[{'type',2040,'cerl',[]}]}]}|[{'type',2040,'c_values',[]}]]}]}],
		%% Line 2049
		'spec' =
		    %% Line 2049
		    [{{'ann_c_values',2},[{'type',2049,'fun',[{'type',2049,'product',[{'type',2049,'list',[{'type',2049,'term',[]}]}|[{'type',2049,'list',[{'type',2049,'cerl',[]}]}]]}|[{'type',2049,'c_values',[]}]]}]}],
		%% Line 2058
		'spec' =
		    %% Line 2058
		    [{{'update_c_values',2},[{'type',2058,'fun',[{'type',2058,'product',[{'type',2058,'c_values',[]}|[{'type',2058,'list',[{'type',2058,'cerl',[]}]}]]}|[{'type',2058,'c_values',[]}]]}]}],
		%% Line 2071
		'spec' =
		    %% Line 2071
		    [{{'is_c_values',1},[{'type',2071,'fun',[{'type',2071,'product',[{'type',2071,'cerl',[]}]}|[{'type',2071,'boolean',[]}]]}]}],
		%% Line 2087
		'spec' =
		    %% Line 2087
		    [{{'values_es',1},[{'type',2087,'fun',[{'type',2087,'product',[{'type',2087,'c_values',[]}]}|[{'type',2087,'list',[{'type',2087,'cerl',[]}]}]]}]}],
		%% Line 2105
		'spec' =
		    %% Line 2105
		    [{{'values_arity',1},[{'type',2105,'fun',[{'type',2105,'product',[{'type',2105,'c_values',[]}]}|[{'type',2105,'non_neg_integer',[]}]]}]}],
		%% Line 2129
		'spec' =
		    %% Line 2129
		    [{{'c_binary',1},[{'type',2129,'fun',[{'type',2129,'product',[{'type',2129,'list',[{'type',2129,'cerl',[]}]}]}|[{'type',2129,'c_binary',[]}]]}]}],
		%% Line 2138
		'spec' =
		    %% Line 2138
		    [{{'ann_c_binary',2},[{'type',2138,'fun',[{'type',2138,'product',[{'type',2138,'list',[{'type',2138,'term',[]}]}|[{'type',2138,'list',[{'type',2138,'cerl',[]}]}]]}|[{'type',2138,'c_binary',[]}]]}]}],
		%% Line 2147
		'spec' =
		    %% Line 2147
		    [{{'update_c_binary',2},[{'type',2147,'fun',[{'type',2147,'product',[{'type',2147,'c_binary',[]}|[{'type',2147,'list',[{'type',2147,'cerl',[]}]}]]}|[{'type',2147,'c_binary',[]}]]}]}],
		%% Line 2160
		'spec' =
		    %% Line 2160
		    [{{'is_c_binary',1},[{'type',2160,'fun',[{'type',2160,'product',[{'type',2160,'cerl',[]}]}|[{'type',2160,'boolean',[]}]]}]}],
		%% Line 2176
		'spec' =
		    %% Line 2176
		    [{{'binary_segments',1},[{'type',2176,'fun',[{'type',2176,'product',[{'type',2176,'c_binary',[]}]}|[{'type',2176,'list',[{'type',2176,'cerl',[]}]}]]}]}],
		%% Line 2206
		'spec' =
		    %% Line 2206
		    [{{'c_bitstr',5},[{'type',2206,'fun',[{'type',2206,'product',[{'type',2206,'cerl',[]}|[{'type',2206,'cerl',[]}|[{'type',2206,'cerl',[]}|[{'type',2206,'cerl',[]}|[{'type',2206,'cerl',[]}]]]]]}|[{'type',2206,'c_bitstr',[]}]]}]}],
		%% Line 2217
		'spec' =
		    %% Line 2217
		    [{{'c_bitstr',4},[{'type',2217,'fun',[{'type',2217,'product',[{'type',2217,'cerl',[]}|[{'type',2217,'cerl',[]}|[{'type',2217,'cerl',[]}|[{'type',2217,'cerl',[]}]]]]}|[{'type',2217,'c_bitstr',[]}]]}]}],
		%% Line 2227
		'spec' =
		    %% Line 2227
		    [{{'c_bitstr',3},[{'type',2227,'fun',[{'type',2227,'product',[{'type',2227,'cerl',[]}|[{'type',2227,'cerl',[]}|[{'type',2227,'cerl',[]}]]]}|[{'type',2227,'c_bitstr',[]}]]}]}],
		%% Line 2238
		'spec' =
		    %% Line 2238
		    [{{'ann_c_bitstr',6},[{'type',2238,'fun',[{'type',2238,'product',[{'type',2238,'list',[{'type',2238,'term',[]}]}|[{'type',2238,'cerl',[]}|[{'type',2238,'cerl',[]}|[{'type',2238,'cerl',[]}|[{'type',2238,'cerl',[]}|[{'type',2238,'cerl',[]}]]]]]]}|[{'type',2239,'c_bitstr',[]}]]}]}],
		%% Line 2249
		'spec' =
		    %% Line 2249
		    [{{'ann_c_bitstr',5},[{'type',2249,'fun',[{'type',2249,'product',[{'type',2249,'list',[{'type',2249,'term',[]}]}|[{'type',2249,'cerl',[]}|[{'type',2249,'cerl',[]}|[{'type',2249,'cerl',[]}|[{'type',2249,'cerl',[]}]]]]]}|[{'type',2249,'c_bitstr',[]}]]}]}],
		%% Line 2260
		'spec' =
		    %% Line 2260
		    [{{'update_c_bitstr',6},[{'type',2260,'fun',[{'type',2260,'product',[{'type',2260,'c_bitstr',[]}|[{'type',2260,'cerl',[]}|[{'type',2260,'cerl',[]}|[{'type',2260,'cerl',[]}|[{'type',2260,'cerl',[]}|[{'type',2260,'cerl',[]}]]]]]]}|[{'type',2261,'c_bitstr',[]}]]}]}],
		%% Line 2272
		'spec' =
		    %% Line 2272
		    [{{'update_c_bitstr',5},[{'type',2272,'fun',[{'type',2272,'product',[{'type',2272,'c_bitstr',[]}|[{'type',2272,'cerl',[]}|[{'type',2272,'cerl',[]}|[{'type',2272,'cerl',[]}|[{'type',2272,'cerl',[]}]]]]]}|[{'type',2272,'c_bitstr',[]}]]}]}],
		%% Line 2284
		'spec' =
		    %% Line 2284
		    [{{'is_c_bitstr',1},[{'type',2284,'fun',[{'type',2284,'product',[{'type',2284,'cerl',[]}]}|[{'type',2284,'boolean',[]}]]}]}],
		%% Line 2298
		'spec' =
		    %% Line 2298
		    [{{'bitstr_val',1},[{'type',2298,'fun',[{'type',2298,'product',[{'type',2298,'c_bitstr',[]}]}|[{'type',2298,'cerl',[]}]]}]}],
		%% Line 2310
		'spec' =
		    %% Line 2310
		    [{{'bitstr_size',1},[{'type',2310,'fun',[{'type',2310,'product',[{'type',2310,'c_bitstr',[]}]}|[{'type',2310,'cerl',[]}]]}]}],
		%% Line 2326
		'spec' =
		    %% Line 2326
		    [{{'bitstr_bitsize',1},[{'type',2326,'fun',[{'type',2326,'product',[{'type',2326,'c_bitstr',[]}]}|[{'type',2326,'union',[{'atom',2326,'all'}|[{'atom',2326,'any'}|[{'atom',2326,'utf'}|[{'type',2326,'non_neg_integer',[]}]]]]}]]}]}],
		%% Line 2353
		'spec' =
		    %% Line 2353
		    [{{'bitstr_unit',1},[{'type',2353,'fun',[{'type',2353,'product',[{'type',2353,'c_bitstr',[]}]}|[{'type',2353,'cerl',[]}]]}]}],
		%% Line 2365
		'spec' =
		    %% Line 2365
		    [{{'bitstr_type',1},[{'type',2365,'fun',[{'type',2365,'product',[{'type',2365,'c_bitstr',[]}]}|[{'type',2365,'cerl',[]}]]}]}],
		%% Line 2377
		'spec' =
		    %% Line 2377
		    [{{'bitstr_flags',1},[{'type',2377,'fun',[{'type',2377,'product',[{'type',2377,'c_bitstr',[]}]}|[{'type',2377,'cerl',[]}]]}]}],
		%% Line 2399
		'spec' =
		    %% Line 2399
		    [{{'c_fun',2},[{'type',2399,'fun',[{'type',2399,'product',[{'type',2399,'list',[{'type',2399,'cerl',[]}]}|[{'type',2399,'cerl',[]}]]}|[{'type',2399,'c_fun',[]}]]}]}],
		%% Line 2409
		'spec' =
		    %% Line 2409
		    [{{'ann_c_fun',3},[{'type',2409,'fun',[{'type',2409,'product',[{'type',2409,'list',[{'type',2409,'term',[]}]}|[{'type',2409,'list',[{'type',2409,'cerl',[]}]}|[{'type',2409,'cerl',[]}]]]}|[{'type',2409,'c_fun',[]}]]}]}],
		%% Line 2419
		'spec' =
		    %% Line 2419
		    [{{'update_c_fun',3},[{'type',2419,'fun',[{'type',2419,'product',[{'type',2419,'c_fun',[]}|[{'type',2419,'list',[{'type',2419,'cerl',[]}]}|[{'type',2419,'cerl',[]}]]]}|[{'type',2419,'c_fun',[]}]]}]}],
		%% Line 2432
		'spec' =
		    %% Line 2432
		    [{{'is_c_fun',1},[{'type',2432,'fun',[{'type',2432,'product',[{'type',2432,'cerl',[]}]}|[{'type',2432,'boolean',[]}]]}]}],
		%% Line 2448
		'spec' =
		    %% Line 2448
		    [{{'fun_vars',1},[{'type',2448,'fun',[{'type',2448,'product',[{'type',2448,'c_fun',[]}]}|[{'type',2448,'list',[{'type',2448,'cerl',[]}]}]]}]}],
		%% Line 2460
		'spec' =
		    %% Line 2460
		    [{{'fun_body',1},[{'type',2460,'fun',[{'type',2460,'product',[{'type',2460,'c_fun',[]}]}|[{'type',2460,'cerl',[]}]]}]}],
		%% Line 2477
		'spec' =
		    %% Line 2477
		    [{{'fun_arity',1},[{'type',2477,'fun',[{'type',2477,'product',[{'type',2477,'c_fun',[]}]}|[{'type',2477,'non_neg_integer',[]}]]}]}],
		%% Line 2496
		'spec' =
		    %% Line 2496
		    [{{'c_seq',2},[{'type',2496,'fun',[{'type',2496,'product',[{'type',2496,'cerl',[]}|[{'type',2496,'cerl',[]}]]}|[{'type',2496,'c_seq',[]}]]}]}],
		%% Line 2506
		'spec' =
		    %% Line 2506
		    [{{'ann_c_seq',3},[{'type',2506,'fun',[{'type',2506,'product',[{'type',2506,'list',[{'type',2506,'term',[]}]}|[{'type',2506,'cerl',[]}|[{'type',2506,'cerl',[]}]]]}|[{'type',2506,'c_seq',[]}]]}]}],
		%% Line 2516
		'spec' =
		    %% Line 2516
		    [{{'update_c_seq',3},[{'type',2516,'fun',[{'type',2516,'product',[{'type',2516,'c_seq',[]}|[{'type',2516,'cerl',[]}|[{'type',2516,'cerl',[]}]]]}|[{'type',2516,'c_seq',[]}]]}]}],
		%% Line 2529
		'spec' =
		    %% Line 2529
		    [{{'is_c_seq',1},[{'type',2529,'fun',[{'type',2529,'product',[{'type',2529,'cerl',[]}]}|[{'type',2529,'boolean',[]}]]}]}],
		%% Line 2544
		'spec' =
		    %% Line 2544
		    [{{'seq_arg',1},[{'type',2544,'fun',[{'type',2544,'product',[{'type',2544,'c_seq',[]}]}|[{'type',2544,'cerl',[]}]]}]}],
		%% Line 2556
		'spec' =
		    %% Line 2556
		    [{{'seq_body',1},[{'type',2556,'fun',[{'type',2556,'product',[{'type',2556,'c_seq',[]}]}|[{'type',2556,'cerl',[]}]]}]}],
		%% Line 2581
		'spec' =
		    %% Line 2581
		    [{{'c_let',3},[{'type',2581,'fun',[{'type',2581,'product',[{'type',2581,'list',[{'type',2581,'cerl',[]}]}|[{'type',2581,'cerl',[]}|[{'type',2581,'cerl',[]}]]]}|[{'type',2581,'c_let',[]}]]}]}],
		%% Line 2590
		'spec' =
		    %% Line 2590
		    [{{'ann_c_let',4},[{'type',2590,'fun',[{'type',2590,'product',[{'type',2590,'list',[{'type',2590,'term',[]}]}|[{'type',2590,'list',[{'type',2590,'cerl',[]}]}|[{'type',2590,'cerl',[]}|[{'type',2590,'cerl',[]}]]]]}|[{'type',2590,'c_let',[]}]]}]}],
		%% Line 2599
		'spec' =
		    %% Line 2599
		    [{{'update_c_let',4},[{'type',2599,'fun',[{'type',2599,'product',[{'type',2599,'c_let',[]}|[{'type',2599,'list',[{'type',2599,'cerl',[]}]}|[{'type',2599,'cerl',[]}|[{'type',2599,'cerl',[]}]]]]}|[{'type',2599,'c_let',[]}]]}]}],
		%% Line 2613
		'spec' =
		    %% Line 2613
		    [{{'is_c_let',1},[{'type',2613,'fun',[{'type',2613,'product',[{'type',2613,'cerl',[]}]}|[{'type',2613,'boolean',[]}]]}]}],
		%% Line 2629
		'spec' =
		    %% Line 2629
		    [{{'let_vars',1},[{'type',2629,'fun',[{'type',2629,'product',[{'type',2629,'c_let',[]}]}|[{'type',2629,'list',[{'type',2629,'cerl',[]}]}]]}]}],
		%% Line 2641
		'spec' =
		    %% Line 2641
		    [{{'let_arg',1},[{'type',2641,'fun',[{'type',2641,'product',[{'type',2641,'c_let',[]}]}|[{'type',2641,'cerl',[]}]]}]}],
		%% Line 2653
		'spec' =
		    %% Line 2653
		    [{{'let_body',1},[{'type',2653,'fun',[{'type',2653,'product',[{'type',2653,'c_let',[]}]}|[{'type',2653,'cerl',[]}]]}]}],
		%% Line 2670
		'spec' =
		    %% Line 2670
		    [{{'let_arity',1},[{'type',2670,'fun',[{'type',2670,'product',[{'type',2670,'c_let',[]}]}|[{'type',2670,'non_neg_integer',[]}]]}]}],
		%% Line 2696
		'spec' =
		    %% Line 2696
		    [{{'c_letrec',2},[{'type',2696,'fun',[{'type',2696,'product',[{'type',2696,'list',[{'type',2696,'tuple',[{'type',2696,'cerl',[]}|[{'type',2696,'cerl',[]}]]}]}|[{'type',2696,'cerl',[]}]]}|[{'type',2696,'c_letrec',[]}]]}]}],
		%% Line 2706
		'spec' =
		    %% Line 2706
		    [{{'ann_c_letrec',3},[{'type',2706,'fun',[{'type',2706,'product',[{'type',2706,'list',[{'type',2706,'term',[]}]}|[{'type',2706,'list',[{'type',2706,'tuple',[{'type',2706,'cerl',[]}|[{'type',2706,'cerl',[]}]]}]}|[{'type',2706,'cerl',[]}]]]}|[{'type',2706,'c_letrec',[]}]]}]}],
		%% Line 2717
		'spec' =
		    %% Line 2717
		    [{{'update_c_letrec',3},[{'type',2717,'fun',[{'type',2717,'product',[{'type',2717,'c_letrec',[]}|[{'type',2717,'list',[{'type',2717,'tuple',[{'type',2717,'cerl',[]}|[{'type',2717,'cerl',[]}]]}]}|[{'type',2717,'cerl',[]}]]]}|[{'type',2717,'c_letrec',[]}]]}]}],
		%% Line 2730
		'spec' =
		    %% Line 2730
		    [{{'is_c_letrec',1},[{'type',2730,'fun',[{'type',2730,'product',[{'type',2730,'cerl',[]}]}|[{'type',2730,'boolean',[]}]]}]}],
		%% Line 2748
		'spec' =
		    %% Line 2748
		    [{{'letrec_defs',1},[{'type',2748,'fun',[{'type',2748,'product',[{'type',2748,'c_letrec',[]}]}|[{'type',2748,'list',[{'type',2748,'tuple',[{'type',2748,'cerl',[]}|[{'type',2748,'cerl',[]}]]}]}]]}]}],
		%% Line 2760
		'spec' =
		    %% Line 2760
		    [{{'letrec_body',1},[{'type',2760,'fun',[{'type',2760,'product',[{'type',2760,'c_letrec',[]}]}|[{'type',2760,'cerl',[]}]]}]}],
		%% Line 2776
		'spec' =
		    %% Line 2776
		    [{{'letrec_vars',1},[{'type',2776,'fun',[{'type',2776,'product',[{'type',2776,'c_letrec',[]}]}|[{'type',2776,'list',[{'type',2776,'cerl',[]}]}]]}]}],
		%% Line 2799
		'spec' =
		    %% Line 2799
		    [{{'c_case',2},[{'type',2799,'fun',[{'type',2799,'product',[{'type',2799,'cerl',[]}|[{'type',2799,'list',[{'type',2799,'cerl',[]}]}]]}|[{'type',2799,'c_case',[]}]]}]}],
		%% Line 2809
		'spec' =
		    %% Line 2809
		    [{{'ann_c_case',3},[{'type',2809,'fun',[{'type',2809,'product',[{'type',2809,'list',[{'type',2809,'term',[]}]}|[{'type',2809,'cerl',[]}|[{'type',2809,'list',[{'type',2809,'cerl',[]}]}]]]}|[{'type',2809,'c_case',[]}]]}]}],
		%% Line 2819
		'spec' =
		    %% Line 2819
		    [{{'update_c_case',3},[{'type',2819,'fun',[{'type',2819,'product',[{'type',2819,'c_case',[]}|[{'type',2819,'cerl',[]}|[{'type',2819,'list',[{'type',2819,'cerl',[]}]}]]]}|[{'type',2819,'c_case',[]}]]}]}],
		%% Line 2834
		'spec' =
		    %% Line 2834
		    [{{'is_c_case',1},[{'type',2834,'fun',[{'type',2834,'product',[{'type',2834,'cerl',[]}]}|[{'type',2834,'boolean',[]}]]}]}],
		%% Line 2848
		'spec' =
		    %% Line 2848
		    [{{'case_arg',1},[{'type',2848,'fun',[{'type',2848,'product',[{'type',2848,'c_case',[]}]}|[{'type',2848,'cerl',[]}]]}]}],
		%% Line 2862
		'spec' =
		    %% Line 2862
		    [{{'case_clauses',1},[{'type',2862,'fun',[{'type',2862,'product',[{'type',2862,'c_case',[]}]}|[{'type',2862,'list',[{'type',2862,'cerl',[]}]}]]}]}],
		%% Line 2878
		'spec' =
		    %% Line 2878
		    [{{'case_arity',1},[{'type',2878,'fun',[{'type',2878,'product',[{'type',2878,'c_case',[]}]}|[{'type',2878,'non_neg_integer',[]}]]}]}],
		%% Line 2890
		'spec' =
		    %% Line 2890
		    [{{'c_clause',2},[{'type',2890,'fun',[{'type',2890,'product',[{'type',2890,'list',[{'type',2890,'cerl',[]}]}|[{'type',2890,'cerl',[]}]]}|[{'type',2890,'c_clause',[]}]]}]}],
		%% Line 2916
		'spec' =
		    %% Line 2916
		    [{{'c_clause',3},[{'type',2916,'fun',[{'type',2916,'product',[{'type',2916,'list',[{'type',2916,'cerl',[]}]}|[{'type',2916,'cerl',[]}|[{'type',2916,'cerl',[]}]]]}|[{'type',2916,'c_clause',[]}]]}]}],
		%% Line 2927
		'spec' =
		    %% Line 2927
		    [{{'ann_c_clause',3},[{'type',2927,'fun',[{'type',2927,'product',[{'type',2927,'list',[{'type',2927,'term',[]}]}|[{'type',2927,'list',[{'type',2927,'cerl',[]}]}|[{'type',2927,'cerl',[]}]]]}|[{'type',2927,'c_clause',[]}]]}]}],
		%% Line 2938
		'spec' =
		    %% Line 2938
		    [{{'ann_c_clause',4},[{'type',2938,'fun',[{'type',2938,'product',[{'type',2938,'list',[{'type',2938,'term',[]}]}|[{'type',2938,'list',[{'type',2938,'cerl',[]}]}|[{'type',2938,'cerl',[]}|[{'type',2938,'cerl',[]}]]]]}|[{'type',2938,'c_clause',[]}]]}]}],
		%% Line 2948
		'spec' =
		    %% Line 2948
		    [{{'update_c_clause',4},[{'type',2948,'fun',[{'type',2948,'product',[{'type',2948,'c_clause',[]}|[{'type',2948,'list',[{'type',2948,'cerl',[]}]}|[{'type',2948,'cerl',[]}|[{'type',2948,'cerl',[]}]]]]}|[{'type',2948,'c_clause',[]}]]}]}],
		%% Line 2962
		'spec' =
		    %% Line 2962
		    [{{'is_c_clause',1},[{'type',2962,'fun',[{'type',2962,'product',[{'type',2962,'cerl',[]}]}|[{'type',2962,'boolean',[]}]]}]}],
		%% Line 2977
		'spec' =
		    %% Line 2977
		    [{{'clause_pats',1},[{'type',2977,'fun',[{'type',2977,'product',[{'type',2977,'c_clause',[]}]}|[{'type',2977,'list',[{'type',2977,'cerl',[]}]}]]}]}],
		%% Line 2989
		'spec' =
		    %% Line 2989
		    [{{'clause_guard',1},[{'type',2989,'fun',[{'type',2989,'product',[{'type',2989,'c_clause',[]}]}|[{'type',2989,'cerl',[]}]]}]}],
		%% Line 3001
		'spec' =
		    %% Line 3001
		    [{{'clause_body',1},[{'type',3001,'fun',[{'type',3001,'product',[{'type',3001,'c_clause',[]}]}|[{'type',3001,'cerl',[]}]]}]}],
		%% Line 3018
		'spec' =
		    %% Line 3018
		    [{{'clause_arity',1},[{'type',3018,'fun',[{'type',3018,'product',[{'type',3018,'c_clause',[]}]}|[{'type',3018,'non_neg_integer',[]}]]}]}],
		%% Line 3032
		'spec' =
		    %% Line 3032
		    [{{'clause_vars',1},[{'type',3032,'fun',[{'type',3032,'product',[{'type',3032,'c_clause',[]}]}|[{'type',3032,'list',[{'type',3032,'cerl',[]}]}]]}]}],
		%% Line 3048
		'spec' =
		    %% Line 3048
		    [{{'pat_vars',1},[{'type',3048,'fun',[{'type',3048,'product',[{'type',3048,'cerl',[]}]}|[{'type',3048,'list',[{'type',3048,'cerl',[]}]}]]}]}],
		%% Line 3086
		'spec' =
		    %% Line 3086
		    [{{'pat_list_vars',1},[{'type',3086,'fun',[{'type',3086,'product',[{'type',3086,'list',[{'type',3086,'cerl',[]}]}]}|[{'type',3086,'list',[{'type',3086,'cerl',[]}]}]]}]}],
		%% Line 3111
		'spec' =
		    %% Line 3111
		    [{{'c_alias',2},[{'type',3111,'fun',[{'type',3111,'product',[{'type',3111,'c_var',[]}|[{'type',3111,'cerl',[]}]]}|[{'type',3111,'c_alias',[]}]]}]}],
		%% Line 3121
		'spec' =
		    %% Line 3121
		    [{{'ann_c_alias',3},[{'type',3121,'fun',[{'type',3121,'product',[{'type',3121,'list',[{'type',3121,'term',[]}]}|[{'type',3121,'c_var',[]}|[{'type',3121,'cerl',[]}]]]}|[{'type',3121,'c_alias',[]}]]}]}],
		%% Line 3131
		'spec' =
		    %% Line 3131
		    [{{'update_c_alias',3},[{'type',3131,'fun',[{'type',3131,'product',[{'type',3131,'c_alias',[]}|[{'type',3131,'cerl',[]}|[{'type',3131,'cerl',[]}]]]}|[{'type',3131,'c_alias',[]}]]}]}],
		%% Line 3144
		'spec' =
		    %% Line 3144
		    [{{'is_c_alias',1},[{'type',3144,'fun',[{'type',3144,'product',[{'type',3144,'cerl',[]}]}|[{'type',3144,'boolean',[]}]]}]}],
		%% Line 3158
		'spec' =
		    %% Line 3158
		    [{{'alias_var',1},[{'type',3158,'fun',[{'type',3158,'product',[{'type',3158,'c_alias',[]}]}|[{'type',3158,'c_var',[]}]]}]}],
		%% Line 3170
		'spec' =
		    %% Line 3170
		    [{{'alias_pat',1},[{'type',3170,'fun',[{'type',3170,'product',[{'type',3170,'c_alias',[]}]}|[{'type',3170,'cerl',[]}]]}]}],
		%% Line 3182
		'spec' =
		    %% Line 3182
		    [{{'c_receive',1},[{'type',3182,'fun',[{'type',3182,'product',[{'type',3182,'list',[{'type',3182,'cerl',[]}]}]}|[{'type',3182,'c_receive',[]}]]}]}],
		%% Line 3204
		'spec' =
		    %% Line 3204
		    [{{'c_receive',3},[{'type',3204,'fun',[{'type',3204,'product',[{'type',3204,'list',[{'type',3204,'cerl',[]}]}|[{'type',3204,'cerl',[]}|[{'type',3204,'cerl',[]}]]]}|[{'type',3204,'c_receive',[]}]]}]}],
		%% Line 3215
		'spec' =
		    %% Line 3215
		    [{{'ann_c_receive',2},[{'type',3215,'fun',[{'type',3215,'product',[{'type',3215,'list',[{'type',3215,'term',[]}]}|[{'type',3215,'list',[{'type',3215,'cerl',[]}]}]]}|[{'type',3215,'c_receive',[]}]]}]}],
		%% Line 3226
		'spec' =
		    %% Line 3226
		    [{{'ann_c_receive',4},[{'type',3226,'fun',[{'type',3226,'product',[{'type',3226,'list',[{'type',3226,'term',[]}]}|[{'type',3226,'list',[{'type',3226,'cerl',[]}]}|[{'type',3226,'cerl',[]}|[{'type',3226,'cerl',[]}]]]]}|[{'type',3226,'c_receive',[]}]]}]}],
		%% Line 3237
		'spec' =
		    %% Line 3237
		    [{{'update_c_receive',4},[{'type',3237,'fun',[{'type',3237,'product',[{'type',3237,'c_receive',[]}|[{'type',3237,'list',[{'type',3237,'cerl',[]}]}|[{'type',3237,'cerl',[]}|[{'type',3237,'cerl',[]}]]]]}|[{'type',3237,'c_receive',[]}]]}]}],
		%% Line 3251
		'spec' =
		    %% Line 3251
		    [{{'is_c_receive',1},[{'type',3251,'fun',[{'type',3251,'product',[{'type',3251,'cerl',[]}]}|[{'type',3251,'boolean',[]}]]}]}],
		%% Line 3266
		'spec' =
		    %% Line 3266
		    [{{'receive_clauses',1},[{'type',3266,'fun',[{'type',3266,'product',[{'type',3266,'c_receive',[]}]}|[{'type',3266,'list',[{'type',3266,'cerl',[]}]}]]}]}],
		%% Line 3278
		'spec' =
		    %% Line 3278
		    [{{'receive_timeout',1},[{'type',3278,'fun',[{'type',3278,'product',[{'type',3278,'c_receive',[]}]}|[{'type',3278,'cerl',[]}]]}]}],
		%% Line 3290
		'spec' =
		    %% Line 3290
		    [{{'receive_action',1},[{'type',3290,'fun',[{'type',3290,'product',[{'type',3290,'c_receive',[]}]}|[{'type',3290,'cerl',[]}]]}]}],
		%% Line 3314
		'spec' =
		    %% Line 3314
		    [{{'c_apply',2},[{'type',3314,'fun',[{'type',3314,'product',[{'type',3314,'cerl',[]}|[{'type',3314,'list',[{'type',3314,'cerl',[]}]}]]}|[{'type',3314,'c_apply',[]}]]}]}],
		%% Line 3324
		'spec' =
		    %% Line 3324
		    [{{'ann_c_apply',3},[{'type',3324,'fun',[{'type',3324,'product',[{'type',3324,'list',[{'type',3324,'term',[]}]}|[{'type',3324,'cerl',[]}|[{'type',3324,'list',[{'type',3324,'cerl',[]}]}]]]}|[{'type',3324,'c_apply',[]}]]}]}],
		%% Line 3334
		'spec' =
		    %% Line 3334
		    [{{'update_c_apply',3},[{'type',3334,'fun',[{'type',3334,'product',[{'type',3334,'c_apply',[]}|[{'type',3334,'cerl',[]}|[{'type',3334,'list',[{'type',3334,'cerl',[]}]}]]]}|[{'type',3334,'c_apply',[]}]]}]}],
		%% Line 3347
		'spec' =
		    %% Line 3347
		    [{{'is_c_apply',1},[{'type',3347,'fun',[{'type',3347,'product',[{'type',3347,'cerl',[]}]}|[{'type',3347,'boolean',[]}]]}]}],
		%% Line 3362
		'spec' =
		    %% Line 3362
		    [{{'apply_op',1},[{'type',3362,'fun',[{'type',3362,'product',[{'type',3362,'c_apply',[]}]}|[{'type',3362,'cerl',[]}]]}]}],
		%% Line 3376
		'spec' =
		    %% Line 3376
		    [{{'apply_args',1},[{'type',3376,'fun',[{'type',3376,'product',[{'type',3376,'c_apply',[]}]}|[{'type',3376,'list',[{'type',3376,'cerl',[]}]}]]}]}],
		%% Line 3394
		'spec' =
		    %% Line 3394
		    [{{'apply_arity',1},[{'type',3394,'fun',[{'type',3394,'product',[{'type',3394,'c_apply',[]}]}|[{'type',3394,'non_neg_integer',[]}]]}]}],
		%% Line 3420
		'spec' =
		    %% Line 3420
		    [{{'c_call',3},[{'type',3420,'fun',[{'type',3420,'product',[{'type',3420,'cerl',[]}|[{'type',3420,'cerl',[]}|[{'type',3420,'list',[{'type',3420,'cerl',[]}]}]]]}|[{'type',3420,'c_call',[]}]]}]}],
		%% Line 3430
		'spec' =
		    %% Line 3430
		    [{{'ann_c_call',4},[{'type',3430,'fun',[{'type',3430,'product',[{'type',3430,'list',[{'type',3430,'term',[]}]}|[{'type',3430,'cerl',[]}|[{'type',3430,'cerl',[]}|[{'type',3430,'list',[{'type',3430,'cerl',[]}]}]]]]}|[{'type',3430,'c_call',[]}]]}]}],
		%% Line 3440
		'spec' =
		    %% Line 3440
		    [{{'update_c_call',4},[{'type',3440,'fun',[{'type',3440,'product',[{'type',3440,'cerl',[]}|[{'type',3440,'cerl',[]}|[{'type',3440,'cerl',[]}|[{'type',3440,'list',[{'type',3440,'cerl',[]}]}]]]]}|[{'type',3440,'c_call',[]}]]}]}],
		%% Line 3454
		'spec' =
		    %% Line 3454
		    [{{'is_c_call',1},[{'type',3454,'fun',[{'type',3454,'product',[{'type',3454,'cerl',[]}]}|[{'type',3454,'boolean',[]}]]}]}],
		%% Line 3468
		'spec' =
		    %% Line 3468
		    [{{'call_module',1},[{'type',3468,'fun',[{'type',3468,'product',[{'type',3468,'c_call',[]}]}|[{'type',3468,'cerl',[]}]]}]}],
		%% Line 3480
		'spec' =
		    %% Line 3480
		    [{{'call_name',1},[{'type',3480,'fun',[{'type',3480,'product',[{'type',3480,'c_call',[]}]}|[{'type',3480,'cerl',[]}]]}]}],
		%% Line 3494
		'spec' =
		    %% Line 3494
		    [{{'call_args',1},[{'type',3494,'fun',[{'type',3494,'product',[{'type',3494,'c_call',[]}]}|[{'type',3494,'list',[{'type',3494,'cerl',[]}]}]]}]}],
		%% Line 3512
		'spec' =
		    %% Line 3512
		    [{{'call_arity',1},[{'type',3512,'fun',[{'type',3512,'product',[{'type',3512,'c_call',[]}]}|[{'type',3512,'non_neg_integer',[]}]]}]}],
		%% Line 3536
		'spec' =
		    %% Line 3536
		    [{{'c_primop',2},[{'type',3536,'fun',[{'type',3536,'product',[{'type',3536,'cerl',[]}|[{'type',3536,'list',[{'type',3536,'cerl',[]}]}]]}|[{'type',3536,'c_primop',[]}]]}]}],
		%% Line 3546
		'spec' =
		    %% Line 3546
		    [{{'ann_c_primop',3},[{'type',3546,'fun',[{'type',3546,'product',[{'type',3546,'list',[{'type',3546,'term',[]}]}|[{'type',3546,'cerl',[]}|[{'type',3546,'list',[{'type',3546,'cerl',[]}]}]]]}|[{'type',3546,'c_primop',[]}]]}]}],
		%% Line 3556
		'spec' =
		    %% Line 3556
		    [{{'update_c_primop',3},[{'type',3556,'fun',[{'type',3556,'product',[{'type',3556,'cerl',[]}|[{'type',3556,'cerl',[]}|[{'type',3556,'list',[{'type',3556,'cerl',[]}]}]]]}|[{'type',3556,'c_primop',[]}]]}]}],
		%% Line 3569
		'spec' =
		    %% Line 3569
		    [{{'is_c_primop',1},[{'type',3569,'fun',[{'type',3569,'product',[{'type',3569,'cerl',[]}]}|[{'type',3569,'boolean',[]}]]}]}],
		%% Line 3584
		'spec' =
		    %% Line 3584
		    [{{'primop_name',1},[{'type',3584,'fun',[{'type',3584,'product',[{'type',3584,'c_primop',[]}]}|[{'type',3584,'cerl',[]}]]}]}],
		%% Line 3598
		'spec' =
		    %% Line 3598
		    [{{'primop_args',1},[{'type',3598,'fun',[{'type',3598,'product',[{'type',3598,'c_primop',[]}]}|[{'type',3598,'list',[{'type',3598,'cerl',[]}]}]]}]}],
		%% Line 3616
		'spec' =
		    %% Line 3616
		    [{{'primop_arity',1},[{'type',3616,'fun',[{'type',3616,'product',[{'type',3616,'c_primop',[]}]}|[{'type',3616,'non_neg_integer',[]}]]}]}],
		%% Line 3643
		'spec' =
		    %% Line 3643
		    [{{'c_try',5},[{'type',3643,'fun',[{'type',3643,'product',[{'type',3643,'cerl',[]}|[{'type',3643,'list',[{'type',3643,'cerl',[]}]}|[{'type',3643,'cerl',[]}|[{'type',3643,'list',[{'type',3643,'cerl',[]}]}|[{'type',3643,'cerl',[]}]]]]]}|[{'type',3643,'c_try',[]}]]}]}],
		%% Line 3655
		'spec' =
		    %% Line 3655
		    [{{'ann_c_try',6},[{'type',3655,'fun',[{'type',3655,'product',[{'type',3655,'list',[{'type',3655,'term',[]}]}|[{'type',3655,'cerl',[]}|[{'type',3655,'list',[{'type',3655,'cerl',[]}]}|[{'type',3655,'cerl',[]}|[{'type',3655,'list',[{'type',3655,'cerl',[]}]}|[{'type',3655,'cerl',[]}]]]]]]}|[{'type',3656,'c_try',[]}]]}]}],
		%% Line 3668
		'spec' =
		    %% Line 3668
		    [{{'update_c_try',6},[{'type',3668,'fun',[{'type',3668,'product',[{'type',3668,'c_try',[]}|[{'type',3668,'cerl',[]}|[{'type',3668,'list',[{'type',3668,'cerl',[]}]}|[{'type',3668,'cerl',[]}|[{'type',3668,'list',[{'type',3668,'cerl',[]}]}|[{'type',3668,'cerl',[]}]]]]]]}|[{'type',3669,'c_try',[]}]]}]}],
		%% Line 3683
		'spec' =
		    %% Line 3683
		    [{{'is_c_try',1},[{'type',3683,'fun',[{'type',3683,'product',[{'type',3683,'cerl',[]}]}|[{'type',3683,'boolean',[]}]]}]}],
		%% Line 3697
		'spec' =
		    %% Line 3697
		    [{{'try_arg',1},[{'type',3697,'fun',[{'type',3697,'product',[{'type',3697,'c_try',[]}]}|[{'type',3697,'cerl',[]}]]}]}],
		%% Line 3710
		'spec' =
		    %% Line 3710
		    [{{'try_vars',1},[{'type',3710,'fun',[{'type',3710,'product',[{'type',3710,'c_try',[]}]}|[{'type',3710,'list',[{'type',3710,'cerl',[]}]}]]}]}],
		%% Line 3722
		'spec' =
		    %% Line 3722
		    [{{'try_body',1},[{'type',3722,'fun',[{'type',3722,'product',[{'type',3722,'c_try',[]}]}|[{'type',3722,'cerl',[]}]]}]}],
		%% Line 3735
		'spec' =
		    %% Line 3735
		    [{{'try_evars',1},[{'type',3735,'fun',[{'type',3735,'product',[{'type',3735,'c_try',[]}]}|[{'type',3735,'list',[{'type',3735,'cerl',[]}]}]]}]}],
		%% Line 3748
		'spec' =
		    %% Line 3748
		    [{{'try_handler',1},[{'type',3748,'fun',[{'type',3748,'product',[{'type',3748,'c_try',[]}]}|[{'type',3748,'cerl',[]}]]}]}],
		%% Line 3770
		'spec' =
		    %% Line 3770
		    [{{'c_catch',1},[{'type',3770,'fun',[{'type',3770,'product',[{'type',3770,'cerl',[]}]}|[{'type',3770,'c_catch',[]}]]}]}],
		%% Line 3779
		'spec' =
		    %% Line 3779
		    [{{'ann_c_catch',2},[{'type',3779,'fun',[{'type',3779,'product',[{'type',3779,'list',[{'type',3779,'term',[]}]}|[{'type',3779,'cerl',[]}]]}|[{'type',3779,'c_catch',[]}]]}]}],
		%% Line 3788
		'spec' =
		    %% Line 3788
		    [{{'update_c_catch',2},[{'type',3788,'fun',[{'type',3788,'product',[{'type',3788,'c_catch',[]}|[{'type',3788,'cerl',[]}]]}|[{'type',3788,'c_catch',[]}]]}]}],
		%% Line 3801
		'spec' =
		    %% Line 3801
		    [{{'is_c_catch',1},[{'type',3801,'fun',[{'type',3801,'product',[{'type',3801,'cerl',[]}]}|[{'type',3801,'boolean',[]}]]}]}],
		%% Line 3815
		'spec' =
		    %% Line 3815
		    [{{'catch_body',1},[{'type',3815,'fun',[{'type',3815,'product',[{'type',3815,'c_catch',[]}]}|[{'type',3815,'cerl',[]}]]}]}],
		%% Line 3832
		'spec' =
		    %% Line 3832
		    [{{'to_records',1},[{'type',3832,'fun',[{'type',3832,'product',[{'type',3832,'cerl',[]}]}|[{'type',3832,'cerl',[]}]]}]}],
		%% Line 3852
		'spec' =
		    %% Line 3852
		    [{{'from_records',1},[{'type',3852,'fun',[{'type',3852,'product',[{'type',3852,'cerl',[]}]}|[{'type',3852,'cerl',[]}]]}]}],
		%% Line 3870
		'spec' =
		    %% Line 3870
		    [{{'is_data',1},[{'type',3870,'fun',[{'type',3870,'product',[{'type',3870,'cerl',[]}]}|[{'type',3870,'boolean',[]}]]}]}],
		%% Line 3905
		'type' =
		    %% Line 3905
		    [{'value',{'type',3905,'union',[{'type',3905,'integer',[]}|[{'type',3905,'float',[]}|[{'type',3905,'atom',[]}|[{'type',3905,'nil',[]}]]]]},[]}],
		%% Line 3906
		'type' =
		    %% Line 3906
		    [{'dtype',{'type',3906,'union',[{'atom',3906,'cons'}|[{'atom',3906,'tuple'}|[{'type',3906,'tuple',[{'atom',3906,'atomic'}|[{'type',3906,'value',[]}]]}]]]},[]}],
		%% Line 3907
		'type' =
		    %% Line 3907
		    [{'c_lct',{'type',3907,'union',[{'type',3907,'c_literal',[]}|[{'type',3907,'c_cons',[]}|[{'type',3907,'c_tuple',[]}]]]},[]}],
		%% Line 3909
		'spec' =
		    %% Line 3909
		    [{{'data_type',1},[{'type',3909,'fun',[{'type',3909,'product',[{'type',3909,'c_lct',[]}]}|[{'type',3909,'dtype',[]}]]}]}],
		%% Line 3940
		'spec' =
		    %% Line 3940
		    [{{'data_es',1},[{'type',3940,'fun',[{'type',3940,'product',[{'type',3940,'c_lct',[]}]}|[{'type',3940,'list',[{'type',3940,'cerl',[]}]}]]}]}],
		%% Line 3965
		'spec' =
		    %% Line 3965
		    [{{'data_arity',1},[{'type',3965,'fun',[{'type',3965,'product',[{'type',3965,'c_lct',[]}]}|[{'type',3965,'non_neg_integer',[]}]]}]}],
		%% Line 3996
		'spec' =
		    %% Line 3996
		    [{{'make_data',2},[{'type',3996,'fun',[{'type',3996,'product',[{'type',3996,'dtype',[]}|[{'type',3996,'list',[{'type',3996,'cerl',[]}]}]]}|[{'type',3996,'c_lct',[]}]]}]}],
		%% Line 4006
		'spec' =
		    %% Line 4006
		    [{{'ann_make_data',3},[{'type',4006,'fun',[{'type',4006,'product',[{'type',4006,'list',[{'type',4006,'term',[]}]}|[{'type',4006,'dtype',[]}|[{'type',4006,'list',[{'type',4006,'cerl',[]}]}]]]}|[{'type',4006,'c_lct',[]}]]}]}],
		%% Line 4016
		'spec' =
		    %% Line 4016
		    [{{'update_data',3},[{'type',4016,'fun',[{'type',4016,'product',[{'type',4016,'cerl',[]}|[{'type',4016,'dtype',[]}|[{'type',4016,'list',[{'type',4016,'cerl',[]}]}]]]}|[{'type',4016,'c_lct',[]}]]}]}],
		%% Line 4033
		'spec' =
		    %% Line 4033
		    [{{'make_data_skel',2},[{'type',4033,'fun',[{'type',4033,'product',[{'type',4033,'dtype',[]}|[{'type',4033,'list',[{'type',4033,'cerl',[]}]}]]}|[{'type',4033,'c_lct',[]}]]}]}],
		%% Line 4043
		'spec' =
		    %% Line 4043
		    [{{'ann_make_data_skel',3},[{'type',4043,'fun',[{'type',4043,'product',[{'type',4043,'list',[{'type',4043,'term',[]}]}|[{'type',4043,'dtype',[]}|[{'type',4043,'list',[{'type',4043,'cerl',[]}]}]]]}|[{'type',4043,'c_lct',[]}]]}]}],
		%% Line 4054
		'spec' =
		    %% Line 4054
		    [{{'update_data_skel',3},[{'type',4054,'fun',[{'type',4054,'product',[{'type',4054,'cerl',[]}|[{'type',4054,'dtype',[]}|[{'type',4054,'list',[{'type',4054,'cerl',[]}]}]]]}|[{'type',4054,'c_lct',[]}]]}]}],
		%% Line 4121
		'spec' =
		    %% Line 4121
		    [{{'subtrees',1},[{'type',4121,'fun',[{'type',4121,'product',[{'type',4121,'cerl',[]}]}|[{'type',4121,'list',[{'type',4121,'list',[{'type',4121,'cerl',[]}]}]}]]}]}],
		%% Line 4196
		'spec' =
		    %% Line 4196
		    [{{'update_tree',2},[{'type',4196,'fun',[{'type',4196,'product',[{'type',4196,'cerl',[]}|[{'type',4196,'nonempty_list',[{'type',4196,'list',[{'type',4196,'cerl',[]}]}]}]]}|[{'type',4196,'cerl',[]}]]}]}],
		%% Line 4214
		'spec' =
		    %% Line 4214
		    [{{'update_tree',3},[{'type',4214,'fun',[{'type',4214,'product',[{'type',4214,'cerl',[]}|[{'type',4214,'ctype',[]}|[{'type',4214,'nonempty_list',[{'type',4214,'list',[{'type',4214,'cerl',[]}]}]}]]]}|[{'type',4214,'cerl',[]}]]}]}],
		%% Line 4244
		'spec' =
		    %% Line 4244
		    [{{'make_tree',2},[{'type',4244,'fun',[{'type',4244,'product',[{'type',4244,'ctype',[]}|[{'type',4244,'nonempty_list',[{'type',4244,'list',[{'type',4244,'cerl',[]}]}]}]]}|[{'type',4244,'cerl',[]}]]}]}],
		%% Line 4258
		'spec' =
		    %% Line 4258
		    [{{'ann_make_tree',3},[{'type',4258,'fun',[{'type',4258,'product',[{'type',4258,'list',[{'type',4258,'term',[]}]}|[{'type',4258,'ctype',[]}|[{'type',4258,'nonempty_list',[{'type',4258,'list',[{'type',4258,'cerl',[]}]}]}]]]}|[{'type',4258,'cerl',[]}]]}]}],
		%% Line 4335
		'spec' =
		    %% Line 4335
		    [{{'meta',1},[{'type',4335,'fun',[{'type',4335,'product',[{'type',4335,'cerl',[]}]}|[{'type',4335,'cerl',[]}]]}]}],
		%% Line 4507
		'spec' =
		    %% Line 4507
		    [{{'make_lit_list',1},[{'type',4507,'fun',[{'type',4507,'product',[{'type',4507,'list',[{'var',4507,'_'}]}]}|[{'type',4507,'list',[{'type',4507,'record',[{'atom',4507,'c_literal'}]}]}]]}]}]]
'type'/1 =
    %% Line 273
    fun (_cor0) ->
	case _cor0 of
	  <{'c_alias',_cor2,_cor3,_cor4}> when 'true' ->
	      'alias'
	  %% Line 274
	  <{'c_apply',_cor5,_cor6,_cor7}> when 'true' ->
	      'apply'
	  %% Line 275
	  <{'c_binary',_cor8,_cor9}> when 'true' ->
	      'binary'
	  %% Line 276
	  <{'c_bitstr',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15}> when 'true' ->
	      'bitstr'
	  %% Line 277
	  <{'c_call',_cor16,_cor17,_cor18,_cor19}> when 'true' ->
	      'call'
	  %% Line 278
	  <{'c_case',_cor20,_cor21,_cor22}> when 'true' ->
	      'case'
	  %% Line 279
	  <{'c_catch',_cor23,_cor24}> when 'true' ->
	      'catch'
	  %% Line 280
	  <{'c_clause',_cor25,_cor26,_cor27,_cor28}> when 'true' ->
	      'clause'
	  %% Line 281
	  <{'c_cons',_cor29,_cor30,_cor31}> when 'true' ->
	      'cons'
	  %% Line 282
	  <{'c_fun',_cor32,_cor33,_cor34}> when 'true' ->
	      'fun'
	  %% Line 283
	  <{'c_let',_cor35,_cor36,_cor37,_cor38}> when 'true' ->
	      'let'
	  %% Line 284
	  <{'c_letrec',_cor39,_cor40,_cor41}> when 'true' ->
	      'letrec'
	  %% Line 285
	  <{'c_literal',_cor42,_cor43}> when 'true' ->
	      'literal'
	  %% Line 286
	  <{'c_map',_cor44,_cor45,_cor46}> when 'true' ->
	      'map'
	  %% Line 287
	  <{'c_map_pair',_cor47,_cor48,_cor49,_cor50}> when 'true' ->
	      'map_pair'
	  %% Line 288
	  <{'c_module',_cor51,_cor52,_cor53,_cor54,_cor55}> when 'true' ->
	      'module'
	  %% Line 289
	  <{'c_primop',_cor56,_cor57,_cor58}> when 'true' ->
	      'primop'
	  %% Line 290
	  <{'c_receive',_cor59,_cor60,_cor61,_cor62}> when 'true' ->
	      'receive'
	  %% Line 291
	  <{'c_seq',_cor63,_cor64,_cor65}> when 'true' ->
	      'seq'
	  %% Line 292
	  <{'c_try',_cor66,_cor67,_cor68,_cor69,_cor70,_cor71}> when 'true' ->
	      'try'
	  %% Line 293
	  <{'c_tuple',_cor72,_cor73}> when 'true' ->
	      'tuple'
	  %% Line 294
	  <{'c_values',_cor74,_cor75}> when 'true' ->
	      'values'
	  %% Line 295
	  <{'c_var',_cor76,_cor77}> when 'true' ->
	      'var'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'type',1}}] )
	    -| ['compiler_generated'] )
	end
'is_leaf'/1 =
    %% Line 314
    fun (_cor0) ->
	%% Line 315
	case apply 'type'/1
		 (_cor0) of
	  %% Line 316
	  <'literal'> when 'true' ->
	      'true'
	  %% Line 317
	  <'var'> when 'true' ->
	      'true'
	  %% Line 318
	  <_cor3> when 'true' ->
	      'false'
	end
'get_ann'/1 =
    %% Line 332
    fun (_cor0) ->
	%% Line 333
	call 'erlang':'element'
	    (2, _cor0)
'set_ann'/2 =
    %% Line 347
    fun (_cor1,_cor0) ->
	%% Line 348
	call 'erlang':'setelement'
	    (2, _cor1, _cor0)
'add_ann'/2 =
    %% Line 364
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    call 'erlang':'element'
		(2, _cor0)
	in  let <_cor3> =
		%% Line 365
		call 'erlang':'++'
		    (_cor1, _cor2)
	    in  call 'erlang':'setelement'
		    (2, _cor0, _cor3)
'copy_ann'/2 =
    %% Line 381
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    call 'erlang':'element'
		(2, _cor1)
	in  call 'erlang':'setelement'
		(2, _cor0, _cor2)
'abstract'/1 =
    %% Line 402
    fun (_cor0) ->
	%% Line 403
	{'c_literal',[],_cor0}
'ann_abstract'/2 =
    %% Line 411
    fun (_cor1,_cor0) ->
	%% Line 412
	{'c_literal',_cor1,_cor0}
'is_literal_term'/1 =
    %% Line 425
    fun (_cor0) ->
	case _cor0 of
	  <T>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      'true'
	  %% Line 426
	  <T>
	      when call 'erlang':'is_float'
		    (_cor0) ->
	      'true'
	  %% Line 427
	  <T>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      'true'
	  %% Line 428
	  <[]> when 'true' ->
	      'true'
	  %% Line 429
	  <[H|T]> when 'true' ->
	      let <_1985> =
		  %% Line 430
		  apply 'is_literal_term'/1
		      (H)
	      in  %% Line 430
		  ( case _1985 of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    apply 'is_literal_term'/1
				(T)
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    'false'
			-| ['compiler_generated'] )
		      ( <_cor1> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_1985}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 431
	  <T>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      let <_cor3> =
		  %% Line 432
		  call 'erlang':'tuple_to_list'
		      (_cor0)
	      in  %% Line 432
		  apply 'is_literal_term_list'/1
		      (_cor3)
	  %% Line 433
	  <B>
	      when call 'erlang':'is_bitstring'
		    (_cor0) ->
	      'true'
	  %% Line 434
	  <_cor5> when 'true' ->
	      %% Line 435
	      'false'
	end
'is_literal_term_list'/1 =
    %% Line 439
    fun (_cor0) ->
	case _cor0 of
	  <[T|Ts]> when 'true' ->
	      let <_24268> =
		  %% Line 440
		  apply 'is_literal_term'/1
		      (T)
	      in  %% Line 440
		  case _24268 of
		    %% Line 441
		    <'true'> when 'true' ->
			%% Line 442
			apply 'is_literal_term_list'/1
			    (Ts)
		    %% Line 443
		    <'false'> when 'true' ->
			%% Line 444
			'false'
		    ( <_cor1> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_24268})
		      -| ['compiler_generated'] )
		  end
	  %% Line 446
	  <[]> when 'true' ->
	      %% Line 447
	      'true'
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'is_literal_term_list',1}}] )
	    -| ['compiler_generated'] )
	end
'concrete'/1 =
    %% Line 467
    fun (_cor0) ->
	case _cor0 of
	  <{'c_literal',_cor2,V}> when 'true' ->
	      V
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'concrete',1}}] )
	    -| ['compiler_generated'] )
	end
'is_literal'/1 =
    %% Line 486
    fun (_cor0) ->
	case _cor0 of
	  <{'c_literal',_cor2,_cor3}> when 'true' ->
	      %% Line 487
	      'true'
	  %% Line 488
	  <_cor4> when 'true' ->
	      %% Line 489
	      'false'
	end
'fold_literal'/1 =
    %% Line 513
    fun (_cor0) ->
	%% Line 514
	case apply 'type'/1
		 (_cor0) of
	  %% Line 515
	  <'tuple'> when 'true' ->
	      let <_cor1> =
		  %% Line 1816
		  case _cor0 of
		    <{'c_tuple',_cor3,Es}> when 'true' ->
			Es
		    %% Line 1818
		    <{'c_literal',_cor4,V}> when 'true' ->
			let <_cor1> =
			    %% Line 1819
			    call 'erlang':'tuple_to_list'
				(V)
			in  %% Line 4509
			    case _cor1 of
			      <[_23616|Vs]> when 'true' ->
				  let <_22048> =
				      %% Line 4510
				      apply 'make_lit_list'/1
					  (Vs)
				  in  %% Line 4510
				      [{'c_literal',[],_23616}|_22048]
			      %% Line 4511
			      <[]> when 'true' ->
				  %% Line 4512
				  []
			      ( <_cor2> when 'true' ->
				    primop 'match_fail'
					({'function_clause',_cor1})
				-| ['compiler_generated'] )
			    end
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'function_clause',_cor0})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor2> =
		      %% Line 524
		      case _cor1 of
			<[E|Es]> when 'true' ->
			    let <_13446> =
				%% Line 525
				apply 'fold_literal'/1
				    (E)
			    in  let <_cor2> =
				    %% Line 525
				    apply 'fold_literal_list'/1
					(Es)
				in  %% Line 525
				    [_13446|_cor2]
			%% Line 526
			<[]> when 'true' ->
			    %% Line 527
			    []
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'function_clause',_cor1})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 516
		      apply 'update_c_tuple'/2
			  (_cor0, _cor2)
	  %% Line 517
	  <'cons'> when 'true' ->
	      let <_cor5> =
		  %% Line 1381
		  case _cor0 of
		    <{'c_cons',_cor2,Head,_cor3}> when 'true' ->
			Head
		    %% Line 1383
		    <{'c_literal',_cor4,[Head|_cor5]}> when 'true' ->
			%% Line 1384
			{'c_literal',[],Head}
		    ( <_cor1> when 'true' ->
			  primop 'match_fail'
			      ({'function_clause',_cor0})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor6> =
		      %% Line 518
		      apply 'fold_literal'/1
			  (_cor5)
		  in  let <_cor3> =
			  %% Line 1398
			  case _cor0 of
			    <{'c_cons',_cor2,_cor3,Tail}> when 'true' ->
				Tail
			    %% Line 1400
			    <{'c_literal',_cor4,[_12785|Tail]}> when 'true' ->
				%% Line 1401
				{'c_literal',[],Tail}
			    ( <_cor1> when 'true' ->
				  primop 'match_fail'
				      ({'function_clause',_cor0})
			      -| ['compiler_generated'] )
			  end
		      in  let <_cor4> =
			      %% Line 519
			      apply 'fold_literal'/1
				  (_cor3)
			  in  %% Line 518
			      apply 'update_c_cons'/3
				  (_cor0, _cor6, _cor4)
	  %% Line 520
	  <_cor9> when 'true' ->
	      _cor0
	end
'fold_literal_list'/1 =
    %% Line 524
    fun (_cor0) ->
	case _cor0 of
	  <[E|Es]> when 'true' ->
	      let <_cor1> =
		  %% Line 525
		  apply 'fold_literal'/1
		      (E)
	      in  let <_cor2> =
		      %% Line 525
		      apply 'fold_literal_list'/1
			  (Es)
		  in  %% Line 525
		      [_cor1|_cor2]
	  %% Line 526
	  <[]> when 'true' ->
	      %% Line 527
	      []
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'fold_literal_list',1}}] )
	    -| ['compiler_generated'] )
	end
'unfold_literal'/1 =
    %% Line 549
    fun (_cor0) ->
	%% Line 550
	case apply 'type'/1
		 (_cor0) of
	  %% Line 551
	  <'literal'> when 'true' ->
	      case _cor0 of
		<{'c_literal',_cor2,V}> when 'true' ->
		    let <_cor2> =
			%% Line 552
			apply 'unfold_concrete'/1
			    (V)
		    in  let <_23977> =
			    call 'erlang':'element'
				(2, _cor0)
			in  call 'erlang':'setelement'
				(2, _cor2, _23977)
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'function_clause',_cor0})
		  -| ['compiler_generated'] )
	      end
	  %% Line 553
	  <_cor5> when 'true' ->
	      _cor0
	end
'unfold_concrete'/1 =
    %% Line 557
    fun (_cor0) ->
	%% Line 558
	case _cor0 of
	  %% Line 559
	  <_cor7>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 560
		  call 'erlang':'tuple_to_list'
		      (_cor0)
	      in  let <_cor2> =
		      %% Line 567
		      case _cor1 of
			<[E|Es]> when 'true' ->
			    let <_9319> =
				%% Line 568
				apply 'unfold_concrete'/1
				    (E)
			    in  let <_cor2> =
				    %% Line 568
				    apply 'unfold_concrete_list'/1
					(Es)
				in  %% Line 568
				    [_9319|_cor2]
			%% Line 569
			<[]> when 'true' ->
			    %% Line 570
			    []
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'function_clause',_cor1})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 1770
		      {'c_tuple',[],_cor2}
	  %% Line 561
	  <[H|T]> when 'true' ->
	      let <_cor4> =
		  %% Line 562
		  apply 'unfold_concrete'/1
		      (H)
	      in  let <_cor3> =
		      %% Line 562
		      apply 'unfold_concrete'/1
			  (T)
		  in  %% Line 1335
		      {'c_cons',[],_cor4,_cor3}
	  %% Line 563
	  <_cor8> when 'true' ->
	      {'c_literal',[],_cor0}
	end
'unfold_concrete_list'/1 =
    %% Line 567
    fun (_cor0) ->
	case _cor0 of
	  <[E|Es]> when 'true' ->
	      let <_cor1> =
		  %% Line 568
		  apply 'unfold_concrete'/1
		      (E)
	      in  let <_cor2> =
		      %% Line 568
		      apply 'unfold_concrete_list'/1
			  (Es)
		  in  %% Line 568
		      [_cor1|_cor2]
	  %% Line 569
	  <[]> when 'true' ->
	      %% Line 570
	      []
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'unfold_concrete_list',1}}] )
	    -| ['compiler_generated'] )
	end
'c_module'/3 =
    %% Line 584
    fun (_cor2,_cor1,_cor0) ->
	%% Line 585
	{'c_module',[],_cor2,_cor1,[],_cor0}
'c_module'/4 =
    %% Line 633
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 634
	{'c_module',[],_cor3,_cor2,_cor1,_cor0}
'ann_c_module'/4 =
    %% Line 649
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 650
	{'c_module',_cor3,_cor2,_cor1,[],_cor0}
'ann_c_module'/5 =
    %% Line 667
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 668
	{'c_module',_cor4,_cor3,_cor2,_cor1,_cor0}
'update_c_module'/5 =
    %% Line 684
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    call 'erlang':'element'
		(2, _cor4)
	in  %% Line 685
	    {'c_module',_cor5,_cor3,_cor2,_cor1,_cor0}
'is_c_module'/1 =
    %% Line 698
    fun (_cor0) ->
	case _cor0 of
	  <{'c_module',_cor2,_cor3,_cor4,_cor5,_cor6}> when 'true' ->
	      %% Line 699
	      'true'
	  %% Line 700
	  <_cor7> when 'true' ->
	      %% Line 701
	      'false'
	end
'module_name'/1 =
    %% Line 712
    fun (_cor0) ->
	%% Line 713
	( case _cor0 of
	    ( <( {'c_module',_cor3,_rec0,_cor4,_cor5,_cor6}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec0
	      -| ['compiler_generated'] )
	    ( <_cor7> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_module'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'module_exports'/1 =
    %% Line 725
    fun (_cor0) ->
	%% Line 726
	( case _cor0 of
	    ( <( {'c_module',_cor3,_cor4,_rec1,_cor5,_cor6}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec1
	      -| ['compiler_generated'] )
	    ( <_cor7> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_module'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'module_attrs'/1 =
    %% Line 738
    fun (_cor0) ->
	%% Line 739
	( case _cor0 of
	    ( <( {'c_module',_cor3,_cor4,_cor5,_rec2,_cor6}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec2
	      -| ['compiler_generated'] )
	    ( <_cor7> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_module'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'module_defs'/1 =
    %% Line 751
    fun (_cor0) ->
	%% Line 752
	( case _cor0 of
	    ( <( {'c_module',_cor3,_cor4,_cor5,_cor6,_rec3}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec3
	      -| ['compiler_generated'] )
	    ( <_cor7> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_module'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'module_vars'/1 =
    %% Line 764
    fun (_cor0) ->
	%% Line 765
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[{F,_cor7}|_cor2]> when 'true' ->
			    let <_cor5> =
				apply 'lc$^0'/1
				    (_cor2)
			    in  ( [F|_cor5]
				  -| ['compiler_generated'] )
			( <[_cor1|_cor2]> when 'true' ->
			      apply 'lc$^0'/1
				  (_cor2)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_24791> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  ( case _cor0 of
		  ( <( {'c_module',_cor3,_cor4,_cor5,_cor6,_rec3}
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'lc$^0'/1
			    (_rec3)
		    -| ['compiler_generated'] )
		  ( <_cor7> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','c_module'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  -| ['list_comprehension'] )
'c_int'/1 =
    %% Line 784
    fun (_cor0) ->
	%% Line 785
	{'c_literal',[],_cor0}
'ann_c_int'/2 =
    %% Line 793
    fun (_cor1,_cor0) ->
	%% Line 794
	{'c_literal',_cor1,_cor0}
'is_c_int'/1 =
    %% Line 805
    fun (_cor0) ->
	case _cor0 of
	  <{'c_literal',_cor2,V}>
	      when call 'erlang':'is_integer'
		    (V) ->
	      %% Line 806
	      'true'
	  %% Line 807
	  <_cor3> when 'true' ->
	      %% Line 808
	      'false'
	end
'int_val'/1 =
    %% Line 818
    fun (_cor0) ->
	%% Line 819
	( case _cor0 of
	    ( <( {'c_literal',_cor3,_rec4}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec4
	      -| ['compiler_generated'] )
	    ( <_cor4> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_literal'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'int_lit'/1 =
    %% Line 830
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'c_literal',_cor3,_rec4}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 831
		  call 'erlang':'integer_to_list'
		      (_rec4)
	      -| ['compiler_generated'] )
	    ( <_cor4> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_literal'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'c_float'/1 =
    %% Line 852
    fun (_cor0) ->
	%% Line 853
	{'c_literal',[],_cor0}
'ann_c_float'/2 =
    %% Line 861
    fun (_cor1,_cor0) ->
	%% Line 862
	{'c_literal',_cor1,_cor0}
'is_c_float'/1 =
    %% Line 873
    fun (_cor0) ->
	case _cor0 of
	  <{'c_literal',_cor2,V}>
	      when call 'erlang':'is_float'
		    (V) ->
	      %% Line 874
	      'true'
	  %% Line 875
	  <_cor3> when 'true' ->
	      %% Line 876
	      'false'
	end
'float_val'/1 =
    %% Line 887
    fun (_cor0) ->
	%% Line 888
	( case _cor0 of
	    ( <( {'c_literal',_cor3,_rec5}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec5
	      -| ['compiler_generated'] )
	    ( <_cor4> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_literal'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'float_lit'/1 =
    %% Line 899
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'c_literal',_cor3,_rec5}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 900
		  call 'erlang':'float_to_list'
		      (_rec5)
	      -| ['compiler_generated'] )
	    ( <_cor4> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_literal'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'c_atom'/1 =
    %% Line 922
    fun (_cor0) ->
	case _cor0 of
	  <Name>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 923
	      {'c_literal',[],_cor0}
	  %% Line 924
	  <Name> when 'true' ->
	      let <_cor1> =
		  %% Line 925
		  call 'erlang':'list_to_atom'
		      (_cor0)
	      in  %% Line 925
		  {'c_literal',[],_cor1}
	end
'ann_c_atom'/2 =
    %% Line 934
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <As,Name>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 935
	      {'c_literal',_cor1,_cor0}
	  %% Line 936
	  <As,Name> when 'true' ->
	      let <_cor2> =
		  %% Line 937
		  call 'erlang':'list_to_atom'
		      (_cor0)
	      in  %% Line 937
		  {'c_literal',_cor1,_cor2}
	end
'is_c_atom'/1 =
    %% Line 949
    fun (_cor0) ->
	case _cor0 of
	  <{'c_literal',_cor2,V}>
	      when call 'erlang':'is_atom'
		    (V) ->
	      %% Line 950
	      'true'
	  %% Line 951
	  <_cor3> when 'true' ->
	      %% Line 952
	      'false'
	end
'atom_val'/1 =
    %% Line 962
    fun (_cor0) ->
	%% Line 963
	( case _cor0 of
	    ( <( {'c_literal',_cor3,_rec6}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec6
	      -| ['compiler_generated'] )
	    ( <_cor4> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_literal'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'atom_name'/1 =
    %% Line 974
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'c_literal',_cor3,_rec6}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 975
		  call 'erlang':'atom_to_list'
		      (_rec6)
	      -| ['compiler_generated'] )
	    ( <_cor4> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_literal'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'atom_lit'/1 =
    %% Line 995
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'c_literal',_cor3,_rec6}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor1> =
		      call 'erlang':'atom_to_list'
			  (_rec6)
		  in  %% Line 996
		      call 'io_lib':'write_string'
			  (_cor1, 39)
	      -| ['compiler_generated'] )
	    ( <_cor4> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_literal'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'c_char'/1 =
    %% Line 1024
    fun (_cor0) ->
	case _cor0 of
	  <Value>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'>='
			    (_cor0, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 1025
	      {'c_literal',[],_cor0}
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'c_char',1}}] )
	    -| ['compiler_generated'] )
	end
'ann_c_char'/2 =
    %% Line 1033
    fun (_cor1,_cor0) ->
	%% Line 1034
	{'c_literal',_cor1,_cor0}
'is_c_char'/1 =
    %% Line 1052
    fun (_cor0) ->
	case _cor0 of
	  <{'c_literal',_cor4,V}>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(V)
		in  let <_cor2> =
			call 'erlang':'>='
			    (V, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 4517
	      case V of
		<_12434>
		    when let <_cor1> =
			  call 'erlang':'>='
			      (V, 0)
		      in  let <_cor2> =
			      call 'erlang':'=<'
				  (V, 255)
			  in  call 'erlang':'and'
				  (_cor1, _cor2) ->
		    'true'
		%% Line 4518
		<_9669> when 'true' ->
		    'false'
	      end
	  %% Line 1054
	  <_cor5> when 'true' ->
	      %% Line 1055
	      'false'
	end
'is_print_char'/1 =
    %% Line 1072
    fun (_cor0) ->
	case _cor0 of
	  <{'c_literal',_cor4,V}>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(V)
		in  let <_cor2> =
			call 'erlang':'>='
			    (V, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 1073
	      apply 'is_print_char_value'/1
		  (V)
	  %% Line 1074
	  <_cor5> when 'true' ->
	      %% Line 1075
	      'false'
	end
'char_val'/1 =
    %% Line 1086
    fun (_cor0) ->
	%% Line 1087
	( case _cor0 of
	    ( <( {'c_literal',_cor3,_rec7}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec7
	      -| ['compiler_generated'] )
	    ( <_cor4> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_literal'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'char_lit'/1 =
    %% Line 1101
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'c_literal',_cor3,_rec7}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 1102
		  call 'io_lib':'write_char'
		      (_rec7)
	      -| ['compiler_generated'] )
	    ( <_cor4> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_literal'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'c_string'/1 =
    %% Line 1125
    fun (_cor0) ->
	%% Line 1126
	{'c_literal',[],_cor0}
'ann_c_string'/2 =
    %% Line 1134
    fun (_cor1,_cor0) ->
	%% Line 1135
	{'c_literal',_cor1,_cor0}
'is_c_string'/1 =
    %% Line 1150
    fun (_cor0) ->
	case _cor0 of
	  <{'c_literal',_cor2,V}> when 'true' ->
	      %% Line 1151
	      apply 'is_char_list'/1
		  (V)
	  %% Line 1152
	  <_cor3> when 'true' ->
	      %% Line 1153
	      'false'
	end
'is_print_string'/1 =
    %% Line 1170
    fun (_cor0) ->
	case _cor0 of
	  <{'c_literal',_cor2,V}> when 'true' ->
	      %% Line 1171
	      apply 'is_print_char_list'/1
		  (V)
	  %% Line 1172
	  <_cor3> when 'true' ->
	      %% Line 1173
	      'false'
	end
'string_val'/1 =
    %% Line 1184
    fun (_cor0) ->
	%% Line 1185
	( case _cor0 of
	    ( <( {'c_literal',_cor3,_rec8}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec8
	      -| ['compiler_generated'] )
	    ( <_cor4> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_literal'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'string_lit'/1 =
    %% Line 1200
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'c_literal',_cor3,_rec8}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 1201
		  call 'io_lib':'write_string'
		      (_rec8)
	      -| ['compiler_generated'] )
	    ( <_cor4> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_literal'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'c_nil'/0 =
    %% Line 1217
    fun () ->
	%% Line 1218
	{'c_literal',[],[]}
'ann_c_nil'/1 =
    %% Line 1226
    fun (_cor0) ->
	%% Line 1227
	{'c_literal',_cor0,[]}
'is_c_nil'/1 =
    %% Line 1237
    fun (_cor0) ->
	case _cor0 of
	  <{'c_literal',_cor2,[]}> when 'true' ->
	      %% Line 1238
	      'true'
	  %% Line 1239
	  <_cor3> when 'true' ->
	      %% Line 1240
	      'false'
	end
'c_cons'/2 =
    %% Line 1273
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'c_literal',_cor4,Head},{'c_literal',_cor5,Tail}> when 'true' ->
	      %% Line 1274
	      {'c_literal',[],[Head|Tail]}
	  %% Line 1275
	  <Head,Tail> when 'true' ->
	      %% Line 1276
	      {'c_cons',[],_cor1,_cor0}
	end
'ann_c_cons'/3 =
    %% Line 1284
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <As,{'c_literal',_cor6,Head},{'c_literal',_cor7,Tail}> when 'true' ->
	      %% Line 1285
	      {'c_literal',_cor2,[Head|Tail]}
	  %% Line 1286
	  <As,Head,Tail> when 'true' ->
	      %% Line 1287
	      {'c_cons',_cor2,_cor1,_cor0}
	end
'update_c_cons'/3 =
    %% Line 1297
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Node,{'c_literal',_cor8,Head},{'c_literal',_cor9,Tail}> when 'true' ->
	      let <_cor3> =
		  call 'erlang':'element'
		      (2, _cor2)
	      in  %% Line 1298
		  {'c_literal',_cor3,[Head|Tail]}
	  %% Line 1299
	  <Node,Head,Tail> when 'true' ->
	      let <_cor4> =
		  call 'erlang':'element'
		      (2, _cor2)
	      in  %% Line 1300
		  {'c_cons',_cor4,_cor1,_cor0}
	end
'c_cons_skel'/2 =
    %% Line 1334
    fun (_cor1,_cor0) ->
	%% Line 1335
	{'c_cons',[],_cor1,_cor0}
'ann_c_cons_skel'/3 =
    %% Line 1344
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1345
	{'c_cons',_cor2,_cor1,_cor0}
'update_c_cons_skel'/3 =
    %% Line 1354
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    call 'erlang':'element'
		(2, _cor2)
	in  %% Line 1355
	    {'c_cons',_cor3,_cor1,_cor0}
'is_c_cons'/1 =
    %% Line 1365
    fun (_cor0) ->
	case _cor0 of
	  <{'c_cons',_cor2,_cor3,_cor4}> when 'true' ->
	      %% Line 1366
	      'true'
	  %% Line 1367
	  <{'c_literal',_cor5,[_cor6|_cor7]}> when 'true' ->
	      %% Line 1368
	      'true'
	  %% Line 1369
	  <_cor8> when 'true' ->
	      %% Line 1370
	      'false'
	end
'cons_hd'/1 =
    %% Line 1381
    fun (_cor0) ->
	case _cor0 of
	  <{'c_cons',_cor2,Head,_cor3}> when 'true' ->
	      Head
	  %% Line 1383
	  <{'c_literal',_cor4,[Head|_cor5]}> when 'true' ->
	      %% Line 1384
	      {'c_literal',[],Head}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'cons_hd',1}}] )
	    -| ['compiler_generated'] )
	end
'cons_tl'/1 =
    %% Line 1398
    fun (_cor0) ->
	case _cor0 of
	  <{'c_cons',_cor2,_cor3,Tail}> when 'true' ->
	      Tail
	  %% Line 1400
	  <{'c_literal',_cor4,[_cor5|Tail]}> when 'true' ->
	      %% Line 1401
	      {'c_literal',[],Tail}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'cons_tl',1}}] )
	    -| ['compiler_generated'] )
	end
'is_c_list'/1 =
    %% Line 1429
    fun (_cor0) ->
	case _cor0 of
	  <{'c_cons',_cor2,_cor3,Tail}> when 'true' ->
	      %% Line 1430
	      apply 'is_c_list'/1
		  (Tail)
	  %% Line 1431
	  <{'c_literal',_cor4,V}> when 'true' ->
	      %% Line 1436
	      case V of
		<[_cor2|Tail]> when 'true' ->
		    %% Line 1437
		    apply 'is_proper_list'/1
			(Tail)
		%% Line 1438
		<[]> when 'true' ->
		    %% Line 1439
		    'true'
		%% Line 1440
		<_cor3> when 'true' ->
		    %% Line 1441
		    'false'
	      end
	  %% Line 1433
	  <_cor5> when 'true' ->
	      %% Line 1434
	      'false'
	end
'is_proper_list'/1 =
    %% Line 1436
    fun (_cor0) ->
	case _cor0 of
	  <[_cor2|Tail]> when 'true' ->
	      %% Line 1437
	      apply 'is_proper_list'/1
		  (Tail)
	  %% Line 1438
	  <[]> when 'true' ->
	      %% Line 1439
	      'true'
	  %% Line 1440
	  <_cor3> when 'true' ->
	      %% Line 1441
	      'false'
	end
'list_elements'/1 =
    %% Line 1460
    fun (_cor0) ->
	case _cor0 of
	  <{'c_cons',_cor3,Head,Tail}> when 'true' ->
	      let <_cor1> =
		  %% Line 1461
		  apply 'list_elements'/1
		      (Tail)
	      in  %% Line 1461
		  [Head|_cor1]
	  %% Line 1462
	  <{'c_literal',_cor4,V}> when 'true' ->
	      %% Line 1463
	      apply 'abstract_list'/1
		  (V)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'list_elements',1}}] )
	    -| ['compiler_generated'] )
	end
'abstract_list'/1 =
    %% Line 1465
    fun (_cor0) ->
	case _cor0 of
	  <[X|Xs]> when 'true' ->
	      let <_cor1> = {'c_literal',[],X}
	      in  let <_cor2> =
		      %% Line 1466
		      apply 'abstract_list'/1
			  (Xs)
		  in  %% Line 1466
		      [_cor1|_cor2]
	  %% Line 1467
	  <[]> when 'true' ->
	      %% Line 1468
	      []
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'abstract_list',1}}] )
	    -| ['compiler_generated'] )
	end
'list_length'/1 =
    %% Line 1490
    fun (_cor0) ->
	%% Line 1491
	apply 'list_length'/2
	    (_cor0, 0)
'list_length'/2 =
    %% Line 1493
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'c_cons',_cor6,_cor7,Tail},A> when 'true' ->
	      let <_cor2> =
		  %% Line 1494
		  call 'erlang':'+'
		      (_cor0, 1)
	      in  %% Line 1494
		  apply 'list_length'/2
		      (Tail, _cor2)
	  %% Line 1495
	  <{'c_literal',_cor8,V},A> when 'true' ->
	      let <_cor3> =
		  %% Line 1496
		  call 'erlang':'length'
		      (V)
	      in  %% Line 1496
		  call 'erlang':'+'
		      (_cor0, _cor3)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'list_length',2}}] )
	    -| ['compiler_generated'] )
	end
'make_list'/1 =
    %% Line 1504
    fun (_cor0) ->
	%% Line 1557
	apply 'ann_make_list'/3
	    ([], _cor0, 'none')
'make_list'/2 =
    %% Line 1525
    fun (_cor1,_cor0) ->
	%% Line 1526
	apply 'ann_make_list'/3
	    ([], _cor1, _cor0)
'update_list'/2 =
    %% Line 1534
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    call 'erlang':'element'
		(2, _cor1)
	in  %% Line 1557
	    apply 'ann_make_list'/3
		(_cor2, _cor0, 'none')
'update_list'/3 =
    %% Line 1547
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    call 'erlang':'element'
		(2, _cor2)
	in  %% Line 1548
	    apply 'ann_make_list'/3
		(_cor3, _cor1, _cor0)
'ann_make_list'/2 =
    %% Line 1556
    fun (_cor1,_cor0) ->
	%% Line 1557
	apply 'ann_make_list'/3
	    (_cor1, _cor0, 'none')
'ann_make_list'/3 =
    %% Line 1569
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <As,[H|T],Tail> when 'true' ->
	      let <_cor3> =
		  apply 'ann_make_list'/3
		      ([], T, _cor0)
	      in  %% Line 1570
		  apply 'ann_c_cons'/3
		      (_cor2, H, _cor3)
	  %% Line 1571
	  <As,[],'none'> when 'true' ->
	      {'c_literal',_cor2,[]}
	  %% Line 1573
	  <_cor7,[],Node> when 'true' ->
	      _cor0
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'ann_make_list',3}}] )
	    -| ['compiler_generated'] )
	end
'map_es'/1 =
    %% Line 1582
    fun (_cor0) ->
	case _cor0 of
	  <{'c_map',_cor2,_cor3,Es}> when 'true' ->
	      Es
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'map_es',1}}] )
	    -| ['compiler_generated'] )
	end
'map_arg'/1 =
    %% Line 1587
    fun (_cor0) ->
	case _cor0 of
	  <{'c_map',_cor2,M,_cor3}> when 'true' ->
	      M
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'map_arg',1}}] )
	    -| ['compiler_generated'] )
	end
'c_map'/1 =
    %% Line 1592
    fun (_cor0) ->
	%% Line 1593
	{'c_map',[],{'c_literal',[],~{}~},_cor0}
'is_c_map_empty'/1 =
    %% Line 1597
    fun (_cor0) ->
	case _cor0 of
	  <{'c_map',_cor5,_cor6,[]}> when 'true' ->
	      'true'
	  %% Line 1598
	  <{'c_literal',_cor7,M}>
	      when try
		    let <_cor1> =
			call 'erlang':'is_map'
			    (M)
		    in  let <_cor2> =
			    call 'erlang':'map_size'
				(M)
			in  let <_cor3> =
				call 'erlang':'=:='
				    (_cor2, 0)
			    in  call 'erlang':'and'
				    (_cor1, _cor3)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      'true'
	  %% Line 1599
	  <_cor8> when 'true' ->
	      'false'
	end
'ann_c_map'/2 =
    %% Line 1603
    fun (_cor1,_cor0) ->
	%% Line 1604
	apply 'ann_c_map'/3
	    (_cor1, {'c_literal',[],~{}~}, _cor0)
'ann_c_map'/3 =
    %% Line 1608
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <As,M = {'c_literal',_cor30,Mval},Es>
	      when try
		    let <_cor3> =
			call 'erlang':'is_map'
			    (Mval)
		    in  let <_cor4> =
			    call 'erlang':'map_size'
				(Mval)
			in  let <_cor5> =
				call 'erlang':'=:='
				    (_cor4, 0)
			    in  call 'erlang':'and'
				    (_cor3, _cor5)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor10> =
		  %% Line 1609
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor8) ->
				case _cor8 of
				  <[{'c_map_pair',_cor31,_cor32,Ck,Cv}|_cor7]> when 'true' ->
				      let <_cor9> =
					  apply 'lc$^0'/1
					      (_cor7)
				      in  ( [[Ck|[Cv|[]]]|_cor9]
					    -| ['compiler_generated'] )
				  ( <[_cor6|_cor7]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor7)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_6942> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor8})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (_cor0)
		    -| ['list_comprehension'] )
	      in  let <_cor18> =
		      %% Line 1610
		      fun (_cor15,_cor14) ->
			  %% Line 1611
			  ( case _cor14 of
			      ( <( 'true'
				   -| ['compiler_generated'] )> when 'true' ->
				    apply 'is_lit_list'/1
					(_cor15)
				-| ['compiler_generated'] )
			      ( <( 'false'
				   -| ['compiler_generated'] )> when 'true' ->
				    'false'
				-| ['compiler_generated'] )
			      ( <_cor12> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {( 'badarg'
						-| ['compiler_generated'] ),_cor14}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		  in  let <IsLit> =
			  %% Line 1610
			  call 'lists':'foldl'
			      (_cor18, %% Line 1612
				       'true', _cor10)
		      in  let <Fun> =
			      %% Line 1613
			      fun (_cor21) ->
				  let <_6727> =
				      apply 'lit_list_vals'/1
					  (_cor21)
				  in  case _6727 of
					<[K|[V|[]]]> when 'true' ->
					    {K,V}
					( <_cor20> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_6727})
					  -| ['compiler_generated'] )
				      end
			  in  %% Line 1614
			      case IsLit of
				%% Line 1615
				<'false'> when 'true' ->
				    %% Line 1616
				    {'c_map',_cor2,_cor1,_cor0}
				%% Line 1617
				<'true'> when 'true' ->
				    let <_cor24> =
					%% Line 1618
					call 'lists':'map'
					    (Fun, _cor10)
				    in  let <_cor25> =
					    %% Line 1618
					    call 'maps':'from_list'
						(_cor24)
					in  %% Line 1618
					    {'c_literal',_cor2,_cor25}
				( <_cor26> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',IsLit})
				  -| ['compiler_generated'] )
			      end
	  %% Line 1620
	  <As,{'c_literal',_cor33,M},Es>
	      when call 'erlang':'is_map'
		    (M) ->
	      %% Line 1621
	      apply 'fold_map_pairs'/3
		  (_cor2, _cor0, M)
	  %% Line 1622
	  <As,M,Es> when 'true' ->
	      %% Line 1623
	      {'c_map',_cor2,_cor1,_cor0}
	end
'fold_map_pairs'/3 =
    %% Line 1625
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <As,[],M> when 'true' ->
	      {'c_literal',_cor2,_cor0}
	  %% Line 1627
	  <As,[E = {'c_map_pair',_cor13,{'c_literal',_cor14,'assoc'},Ck,Cv}|Es],M> when 'true' ->
	      let <_20271> =
		  %% Line 1628
		  apply 'is_lit_list'/1
		      ([Ck|[Cv|[]]])
	      in  %% Line 1628
		  case _20271 of
		    %% Line 1629
		    <'true'> when 'true' ->
			let <_22724> =
			    %% Line 1630
			    apply 'lit_list_vals'/1
				([Ck|[Cv|[]]])
			in  %% Line 1630
			    case _22724 of
			      <[K|[V|[]]]> when 'true' ->
				  let <_cor4> =
				      %% Line 1631
				      call 'maps':'put'
					  (K, V, _cor0)
				  in  %% Line 1631
				      apply 'fold_map_pairs'/3
					  (_cor2, Es, _cor4)
			      ( <_cor3> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_22724})
				-| ['compiler_generated'] )
			    end
		    %% Line 1632
		    <'false'> when 'true' ->
			%% Line 1633
			{'c_map',_cor2,{'c_literal',_cor2,_cor0},[E|Es]}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_20271})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1636
	  <As,[E = {'c_map_pair',_cor15,{'c_literal',_cor16,'exact'},Ck,Cv}|Es],M> when 'true' ->
	      let <_14533> =
		  %% Line 1637
		  apply 'is_lit_list'/1
		      ([Ck|[Cv|[]]])
	      in  %% Line 1637
		  case _14533 of
		    %% Line 1638
		    <'true'> when 'true' ->
			let <_23749> =
			    %% Line 1639
			    apply 'lit_list_vals'/1
				([Ck|[Cv|[]]])
			in  %% Line 1639
			    case _23749 of
			      <[K|[V|[]]]> when 'true' ->
				  let <_18208> =
				      %% Line 1640
				      call 'maps':'is_key'
					  (K, _cor0)
				  in  %% Line 1640
				      case _18208 of
					%% Line 1641
					<'true'> when 'true' ->
					    let <_cor7> =
						call 'maps':'put'
						    (K, V, _cor0)
					    in  apply 'fold_map_pairs'/3
						    (_cor2, Es, _cor7)
					%% Line 1642
					<'false'> when 'true' ->
					    %% Line 1643
					    {'c_map',_cor2,{'c_literal',_cor2,_cor0},[E|Es]}
					( <_cor8> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_18208})
					  -| ['compiler_generated'] )
				      end
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_23749})
				-| ['compiler_generated'] )
			    end
		    %% Line 1645
		    <'false'> when 'true' ->
			%% Line 1646
			{'c_map',_cor2,{'c_literal',_cor2,_cor0},[E|Es]}
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_14533})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1648
	  <As,Es,M> when 'true' ->
	      %% Line 1649
	      {'c_map',_cor2,{'c_literal',_cor2,_cor0},_cor1}
	end
'update_c_map'/3 =
    %% Line 1653
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    call 'erlang':'element'
		(2, _cor2)
	in  %% Line 1654
	    {'c_map',_cor3,_cor1,_cor0}
'map_pair_key'/1 =
    %% Line 1656
    fun (_cor0) ->
	case _cor0 of
	  <{'c_map_pair',_cor2,_cor3,K,_cor4}> when 'true' ->
	      K
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'map_pair_key',1}}] )
	    -| ['compiler_generated'] )
	end
'map_pair_val'/1 =
    %% Line 1657
    fun (_cor0) ->
	case _cor0 of
	  <{'c_map_pair',_cor2,_cor3,_cor4,V}> when 'true' ->
	      V
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'map_pair_val',1}}] )
	    -| ['compiler_generated'] )
	end
'map_pair_op'/1 =
    %% Line 1658
    fun (_cor0) ->
	case _cor0 of
	  <{'c_map_pair',_cor2,Op,_cor3,_cor4}> when 'true' ->
	      Op
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'map_pair_op',1}}] )
	    -| ['compiler_generated'] )
	end
'c_map_pair'/2 =
    %% Line 1662
    fun (_cor1,_cor0) ->
	%% Line 1663
	{'c_map_pair',[],{'c_literal',[],'assoc'},_cor1,_cor0}
'ann_c_map_pair'/4 =
    %% Line 1668
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1669
	{'c_map_pair',_cor3,_cor2,_cor1,_cor0}
'update_c_map_pair'/4 =
    %% Line 1671
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    call 'erlang':'element'
		(2, _cor3)
	in  %% Line 1672
	    {'c_map_pair',_cor4,_cor2,_cor1,_cor0}
'c_tuple'/1 =
    %% Line 1701
    fun (_cor0) ->
	let <_13123> =
	    %% Line 1702
	    apply 'is_lit_list'/1
		(_cor0)
	in  %% Line 1702
	    case _13123 of
	      %% Line 1703
	      <'false'> when 'true' ->
		  %% Line 1704
		  {'c_tuple',[],_cor0}
	      %% Line 1705
	      <'true'> when 'true' ->
		  let <_cor1> =
		      %% Line 1706
		      apply 'lit_list_vals'/1
			  (_cor0)
		  in  let <_cor2> =
			  %% Line 1706
			  call 'erlang':'list_to_tuple'
			      (_cor1)
		      in  %% Line 1706
			  {'c_literal',[],_cor2}
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_13123})
		-| ['compiler_generated'] )
	    end
'ann_c_tuple'/2 =
    %% Line 1715
    fun (_cor1,_cor0) ->
	let <_13532> =
	    %% Line 1716
	    apply 'is_lit_list'/1
		(_cor0)
	in  %% Line 1716
	    case _13532 of
	      %% Line 1717
	      <'false'> when 'true' ->
		  %% Line 1718
		  {'c_tuple',_cor1,_cor0}
	      %% Line 1719
	      <'true'> when 'true' ->
		  let <_cor2> =
		      %% Line 1720
		      apply 'lit_list_vals'/1
			  (_cor0)
		  in  let <_cor3> =
			  %% Line 1720
			  call 'erlang':'list_to_tuple'
			      (_cor2)
		      in  %% Line 1720
			  {'c_literal',_cor1,_cor3}
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_13532})
		-| ['compiler_generated'] )
	    end
'update_c_tuple'/2 =
    %% Line 1729
    fun (_cor1,_cor0) ->
	let <_6303> =
	    %% Line 1730
	    apply 'is_lit_list'/1
		(_cor0)
	in  %% Line 1730
	    case _6303 of
	      %% Line 1731
	      <'false'> when 'true' ->
		  let <_cor2> =
		      call 'erlang':'element'
			  (2, _cor1)
		  in  %% Line 1732
		      {'c_tuple',_cor2,_cor0}
	      %% Line 1733
	      <'true'> when 'true' ->
		  let <_cor5> =
		      call 'erlang':'element'
			  (2, _cor1)
		  in  let <_cor3> =
			  %% Line 1734
			  apply 'lit_list_vals'/1
			      (_cor0)
		      in  let <_cor4> =
			      %% Line 1734
			      call 'erlang':'list_to_tuple'
				  (_cor3)
			  in  %% Line 1734
			      {'c_literal',_cor5,_cor4}
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_6303})
		-| ['compiler_generated'] )
	    end
'c_tuple_skel'/1 =
    %% Line 1769
    fun (_cor0) ->
	%% Line 1770
	{'c_tuple',[],_cor0}
'ann_c_tuple_skel'/2 =
    %% Line 1778
    fun (_cor1,_cor0) ->
	%% Line 1779
	{'c_tuple',_cor1,_cor0}
'update_c_tuple_skel'/2 =
    %% Line 1787
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    call 'erlang':'element'
		(2, _cor1)
	in  %% Line 1788
	    {'c_tuple',_cor2,_cor0}
'is_c_tuple'/1 =
    %% Line 1800
    fun (_cor0) ->
	case _cor0 of
	  <{'c_tuple',_cor2,_cor3}> when 'true' ->
	      %% Line 1801
	      'true'
	  %% Line 1802
	  <{'c_literal',_cor4,V}>
	      when call 'erlang':'is_tuple'
		    (V) ->
	      %% Line 1803
	      'true'
	  %% Line 1804
	  <_cor5> when 'true' ->
	      %% Line 1805
	      'false'
	end
'tuple_es'/1 =
    %% Line 1816
    fun (_cor0) ->
	case _cor0 of
	  <{'c_tuple',_cor3,Es}> when 'true' ->
	      Es
	  %% Line 1818
	  <{'c_literal',_cor4,V}> when 'true' ->
	      let <_cor1> =
		  %% Line 1819
		  call 'erlang':'tuple_to_list'
		      (V)
	      in  %% Line 1819
		  apply 'make_lit_list'/1
		      (_cor1)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'tuple_es',1}}] )
	    -| ['compiler_generated'] )
	end
'tuple_arity'/1 =
    %% Line 1834
    fun (_cor0) ->
	case _cor0 of
	  <{'c_tuple',_cor2,Es}> when 'true' ->
	      %% Line 1835
	      call 'erlang':'length'
		  (Es)
	  %% Line 1836
	  <{'c_literal',_cor3,V}>
	      when call 'erlang':'is_tuple'
		    (V) ->
	      %% Line 1837
	      call 'erlang':'tuple_size'
		  (V)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'tuple_arity',1}}] )
	    -| ['compiler_generated'] )
	end
'c_var'/1 =
    %% Line 1883
    fun (_cor0) ->
	%% Line 1884
	{'c_var',[],_cor0}
'ann_c_var'/2 =
    %% Line 1893
    fun (_cor1,_cor0) ->
	%% Line 1894
	{'c_var',_cor1,_cor0}
'update_c_var'/2 =
    %% Line 1902
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    call 'erlang':'element'
		(2, _cor1)
	in  %% Line 1903
	    {'c_var',_cor2,_cor0}
'is_c_var'/1 =
    %% Line 1915
    fun (_cor0) ->
	case _cor0 of
	  <{'c_var',_cor2,_cor3}> when 'true' ->
	      %% Line 1916
	      'true'
	  %% Line 1917
	  <_cor4> when 'true' ->
	      %% Line 1918
	      'false'
	end
'c_fname'/2 =
    %% Line 1931
    fun (_cor1,_cor0) ->
	let <_1273> = {_cor1,_cor0}
	in  {'c_var',[],_1273}
'ann_c_fname'/3 =
    %% Line 1942
    fun (_cor2,_cor1,_cor0) ->
	let <_22097> = {_cor1,_cor0}
	in  {'c_var',_cor2,_22097}
'update_c_fname'/2 =
    %% Line 1954
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'c_var',As,{_cor4,Arity}},Atom> when 'true' ->
	      %% Line 1955
	      {'c_var',As,{_cor0,Arity}}
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'update_c_fname',2}}] )
	    -| ['compiler_generated'] )
	end
'update_c_fname'/3 =
    %% Line 1966
    fun (_cor2,_cor1,_cor0) ->
	let <_13215> = {_cor1,_cor0}
	in  let <_1411> =
		call 'erlang':'element'
		    (2, _cor2)
	    in  {'c_var',_1411,_13215}
'is_c_fname'/1 =
    %% Line 1981
    fun (_cor0) ->
	case _cor0 of
	  <{'c_var',_cor6,{A,N}}>
	      when try
		    let <_cor1> =
			call 'erlang':'is_atom'
			    (A)
		    in  let <_cor2> =
			    call 'erlang':'is_integer'
				(N)
			in  let <_cor3> =
				call 'erlang':'>='
				    (N, 0)
			    in  let <_cor4> =
				    call 'erlang':'and'
					(_cor2, _cor3)
				in  call 'erlang':'and'
					(_cor1, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1982
	      'true'
	  %% Line 1983
	  <_cor7> when 'true' ->
	      %% Line 1984
	      'false'
	end
'var_name'/1 =
    %% Line 1995
    fun (_cor0) ->
	%% Line 1996
	( case _cor0 of
	    ( <( {'c_var',_cor3,_rec9}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec9
	      -| ['compiler_generated'] )
	    ( <_cor4> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_var'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'fname_id'/1 =
    %% Line 2009
    fun (_cor0) ->
	case _cor0 of
	  <{'c_var',_cor2,{A,_cor3}}> when 'true' ->
	      A
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'fname_id',1}}] )
	    -| ['compiler_generated'] )
	end
'fname_arity'/1 =
    %% Line 2022
    fun (_cor0) ->
	case _cor0 of
	  <{'c_var',_cor2,{_cor3,N}}> when 'true' ->
	      N
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'fname_arity',1}}] )
	    -| ['compiler_generated'] )
	end
'c_values'/1 =
    %% Line 2042
    fun (_cor0) ->
	%% Line 2043
	{'c_values',[],_cor0}
'ann_c_values'/2 =
    %% Line 2051
    fun (_cor1,_cor0) ->
	%% Line 2052
	{'c_values',_cor1,_cor0}
'update_c_values'/2 =
    %% Line 2060
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    call 'erlang':'element'
		(2, _cor1)
	in  %% Line 2061
	    {'c_values',_cor2,_cor0}
'is_c_values'/1 =
    %% Line 2073
    fun (_cor0) ->
	case _cor0 of
	  <{'c_values',_cor2,_cor3}> when 'true' ->
	      %% Line 2074
	      'true'
	  %% Line 2075
	  <_cor4> when 'true' ->
	      %% Line 2076
	      'false'
	end
'values_es'/1 =
    %% Line 2089
    fun (_cor0) ->
	%% Line 2090
	( case _cor0 of
	    ( <( {'c_values',_cor3,_rec10}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec10
	      -| ['compiler_generated'] )
	    ( <_cor4> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_values'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'values_arity'/1 =
    %% Line 2107
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'c_values',_cor3,_rec10}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 2108
		  call 'erlang':'length'
		      (_rec10)
	      -| ['compiler_generated'] )
	    ( <_cor4> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_values'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'c_binary'/1 =
    %% Line 2131
    fun (_cor0) ->
	%% Line 2132
	{'c_binary',[],_cor0}
'ann_c_binary'/2 =
    %% Line 2140
    fun (_cor1,_cor0) ->
	%% Line 2141
	{'c_binary',_cor1,_cor0}
'update_c_binary'/2 =
    %% Line 2149
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    call 'erlang':'element'
		(2, _cor1)
	in  %% Line 2150
	    {'c_binary',_cor2,_cor0}
'is_c_binary'/1 =
    %% Line 2162
    fun (_cor0) ->
	case _cor0 of
	  <{'c_binary',_cor2,_cor3}> when 'true' ->
	      %% Line 2163
	      'true'
	  %% Line 2164
	  <_cor4> when 'true' ->
	      %% Line 2165
	      'false'
	end
'binary_segments'/1 =
    %% Line 2178
    fun (_cor0) ->
	%% Line 2179
	( case _cor0 of
	    ( <( {'c_binary',_cor3,_rec11}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec11
	      -| ['compiler_generated'] )
	    ( <_cor4> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_binary'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'c_bitstr'/5 =
    %% Line 2208
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2209
	{'c_bitstr',[],_cor4,_cor3,_cor2,_cor1,_cor0}
'c_bitstr'/4 =
    %% Line 2219
    fun (_cor3,_cor2,_cor1,_cor0) ->
	{'c_bitstr',[],_cor3,_cor2,{'c_literal',[],1},_cor1,_cor0}
'c_bitstr'/3 =
    %% Line 2229
    fun (_cor2,_cor1,_cor0) ->
	{'c_bitstr',[],_cor2,{'c_literal',[],'all'},{'c_literal',[],1},_cor1,_cor0}
'ann_c_bitstr'/6 =
    %% Line 2241
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2242
	{'c_bitstr',_cor5,_cor4,_cor3,_cor2,_cor1,_cor0}
'ann_c_bitstr'/5 =
    %% Line 2251
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	{'c_bitstr',_cor4,_cor3,_cor2,{'c_literal',[],1},_cor1,_cor0}
'update_c_bitstr'/6 =
    %% Line 2263
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    call 'erlang':'element'
		(2, _cor5)
	in  %% Line 2264
	    {'c_bitstr',_cor6,_cor4,_cor3,_cor2,_cor1,_cor0}
'update_c_bitstr'/5 =
    %% Line 2274
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    call 'erlang':'element'
		(2, _cor4)
	in  {'c_bitstr',_cor6,_cor3,_cor2,{'c_literal',[],1},_cor1,_cor0}
'is_c_bitstr'/1 =
    %% Line 2286
    fun (_cor0) ->
	case _cor0 of
	  <{'c_bitstr',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7}> when 'true' ->
	      %% Line 2287
	      'true'
	  %% Line 2288
	  <_cor8> when 'true' ->
	      %% Line 2289
	      'false'
	end
'bitstr_val'/1 =
    %% Line 2300
    fun (_cor0) ->
	%% Line 2301
	( case _cor0 of
	    ( <( {'c_bitstr',_cor3,_rec12,_cor4,_cor5,_cor6,_cor7}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec12
	      -| ['compiler_generated'] )
	    ( <_cor8> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_bitstr'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'bitstr_size'/1 =
    %% Line 2312
    fun (_cor0) ->
	%% Line 2313
	( case _cor0 of
	    ( <( {'c_bitstr',_cor3,_cor4,_rec13,_cor5,_cor6,_cor7}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec13
	      -| ['compiler_generated'] )
	    ( <_cor8> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_bitstr'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'bitstr_bitsize'/1 =
    %% Line 2328
    fun (_cor0) ->
	%% Line 2329
	( case _cor0 of
	    ( <( {'c_bitstr',_cor14,_cor15,_rec14,_cor16,_cor17,_cor18}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_11903> =
		      case _rec14 of
			<{'c_literal',_cor2,_cor3}> when 'true' ->
			    'true'
			<_cor4> when 'true' ->
			    'false'
		      end
		  in  %% Line 2330
		      case _11903 of
			%% Line 2331
			<'true'> when 'true' ->
			    case _rec14 of
			      <{'c_literal',_cor2,V}> when 'true' ->
				  %% Line 2332
				  case V of
				    %% Line 2333
				    <'all'> when 'true' ->
					%% Line 2334
					'all'
				    %% Line 2335
				    <'undefined'> when 'true' ->
					case _cor17 of
					  <{'c_literal',_fol408,_fol409}> when 'true' ->
					      let <_10802> =
						  %% Line 2337
						  call 'erlang':'atom_to_list'
						      (_fol409)
					      in  %% Line 2337
						  case _10802 of
						    <[117|[116|[102|_cor26]]]> when 'true' ->
							%% Line 2338
							'utf'
						    ( <_cor7> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_10802})
						      -| ['compiler_generated'] )
						  end
					  ( <_cor1> when 'true' ->
						primop 'match_fail'
						    ({'function_clause',_cor17})
					    -| ['compiler_generated'] )
					end
				    %% Line 2339
				    <S>
					when call 'erlang':'is_integer'
					      (V) ->
					case _cor16 of
					  <{'c_literal',_fol410,_fol411}> when 'true' ->
					      %% Line 2340
					      call 'erlang':'*'
						  (V, _fol411)
					  ( <_cor1> when 'true' ->
						primop 'match_fail'
						    ({'function_clause',_cor16})
					    -| ['compiler_generated'] )
					end
				    ( <_cor11> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',V})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor1> when 'true' ->
				    primop 'match_fail'
					({'function_clause',_rec14})
				-| ['compiler_generated'] )
			    end
			%% Line 2342
			<'false'> when 'true' ->
			    %% Line 2343
			    'any'
			( <_cor12> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_11903})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_cor19> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_bitstr'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'bitstr_unit'/1 =
    %% Line 2355
    fun (_cor0) ->
	%% Line 2356
	( case _cor0 of
	    ( <( {'c_bitstr',_cor3,_cor4,_cor5,_rec17,_cor6,_cor7}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec17
	      -| ['compiler_generated'] )
	    ( <_cor8> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_bitstr'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'bitstr_type'/1 =
    %% Line 2367
    fun (_cor0) ->
	%% Line 2368
	( case _cor0 of
	    ( <( {'c_bitstr',_cor3,_cor4,_cor5,_cor6,_rec18,_cor7}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec18
	      -| ['compiler_generated'] )
	    ( <_cor8> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_bitstr'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'bitstr_flags'/1 =
    %% Line 2379
    fun (_cor0) ->
	%% Line 2380
	( case _cor0 of
	    ( <( {'c_bitstr',_cor3,_cor4,_cor5,_cor6,_cor7,_rec19}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec19
	      -| ['compiler_generated'] )
	    ( <_cor8> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_bitstr'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'c_fun'/2 =
    %% Line 2401
    fun (_cor1,_cor0) ->
	%% Line 2402
	{'c_fun',[],_cor1,_cor0}
'ann_c_fun'/3 =
    %% Line 2411
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2412
	{'c_fun',_cor2,_cor1,_cor0}
'update_c_fun'/3 =
    %% Line 2421
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    call 'erlang':'element'
		(2, _cor2)
	in  %% Line 2422
	    {'c_fun',_cor3,_cor1,_cor0}
'is_c_fun'/1 =
    %% Line 2434
    fun (_cor0) ->
	case _cor0 of
	  <{'c_fun',_cor2,_cor3,_cor4}> when 'true' ->
	      %% Line 2435
	      'true'
	  %% Line 2436
	  <_cor5> when 'true' ->
	      %% Line 2437
	      'false'
	end
'fun_vars'/1 =
    %% Line 2450
    fun (_cor0) ->
	%% Line 2451
	( case _cor0 of
	    ( <( {'c_fun',_cor3,_rec20,_cor4}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec20
	      -| ['compiler_generated'] )
	    ( <_cor5> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_fun'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'fun_body'/1 =
    %% Line 2462
    fun (_cor0) ->
	%% Line 2463
	( case _cor0 of
	    ( <( {'c_fun',_cor3,_cor4,_rec21}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec21
	      -| ['compiler_generated'] )
	    ( <_cor5> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_fun'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'fun_arity'/1 =
    %% Line 2479
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'c_fun',_cor3,_rec20,_cor4}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 2480
		  call 'erlang':'length'
		      (_rec20)
	      -| ['compiler_generated'] )
	    ( <_cor5> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_fun'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'c_seq'/2 =
    %% Line 2498
    fun (_cor1,_cor0) ->
	%% Line 2499
	{'c_seq',[],_cor1,_cor0}
'ann_c_seq'/3 =
    %% Line 2508
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2509
	{'c_seq',_cor2,_cor1,_cor0}
'update_c_seq'/3 =
    %% Line 2518
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    call 'erlang':'element'
		(2, _cor2)
	in  %% Line 2519
	    {'c_seq',_cor3,_cor1,_cor0}
'is_c_seq'/1 =
    %% Line 2531
    fun (_cor0) ->
	case _cor0 of
	  <{'c_seq',_cor2,_cor3,_cor4}> when 'true' ->
	      %% Line 2532
	      'true'
	  %% Line 2533
	  <_cor5> when 'true' ->
	      %% Line 2534
	      'false'
	end
'seq_arg'/1 =
    %% Line 2546
    fun (_cor0) ->
	%% Line 2547
	( case _cor0 of
	    ( <( {'c_seq',_cor3,_rec22,_cor4}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec22
	      -| ['compiler_generated'] )
	    ( <_cor5> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_seq'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'seq_body'/1 =
    %% Line 2558
    fun (_cor0) ->
	%% Line 2559
	( case _cor0 of
	    ( <( {'c_seq',_cor3,_cor4,_rec23}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec23
	      -| ['compiler_generated'] )
	    ( <_cor5> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_seq'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'c_let'/3 =
    %% Line 2583
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2584
	{'c_let',[],_cor2,_cor1,_cor0}
'ann_c_let'/4 =
    %% Line 2592
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2593
	{'c_let',_cor3,_cor2,_cor1,_cor0}
'update_c_let'/4 =
    %% Line 2601
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    call 'erlang':'element'
		(2, _cor3)
	in  %% Line 2602
	    {'c_let',_cor4,_cor2,_cor1,_cor0}
'is_c_let'/1 =
    %% Line 2615
    fun (_cor0) ->
	case _cor0 of
	  <{'c_let',_cor2,_cor3,_cor4,_cor5}> when 'true' ->
	      %% Line 2616
	      'true'
	  %% Line 2617
	  <_cor6> when 'true' ->
	      %% Line 2618
	      'false'
	end
'let_vars'/1 =
    %% Line 2631
    fun (_cor0) ->
	%% Line 2632
	( case _cor0 of
	    ( <( {'c_let',_cor3,_rec24,_cor4,_cor5}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec24
	      -| ['compiler_generated'] )
	    ( <_cor6> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_let'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'let_arg'/1 =
    %% Line 2643
    fun (_cor0) ->
	%% Line 2644
	( case _cor0 of
	    ( <( {'c_let',_cor3,_cor4,_rec25,_cor5}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec25
	      -| ['compiler_generated'] )
	    ( <_cor6> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_let'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'let_body'/1 =
    %% Line 2655
    fun (_cor0) ->
	%% Line 2656
	( case _cor0 of
	    ( <( {'c_let',_cor3,_cor4,_cor5,_rec26}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec26
	      -| ['compiler_generated'] )
	    ( <_cor6> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_let'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'let_arity'/1 =
    %% Line 2672
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'c_let',_cor3,_rec24,_cor4,_cor5}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 2673
		  call 'erlang':'length'
		      (_rec24)
	      -| ['compiler_generated'] )
	    ( <_cor6> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_let'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'c_letrec'/2 =
    %% Line 2698
    fun (_cor1,_cor0) ->
	%% Line 2699
	{'c_letrec',[],_cor1,_cor0}
'ann_c_letrec'/3 =
    %% Line 2708
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2709
	{'c_letrec',_cor2,_cor1,_cor0}
'update_c_letrec'/3 =
    %% Line 2719
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    call 'erlang':'element'
		(2, _cor2)
	in  %% Line 2720
	    {'c_letrec',_cor3,_cor1,_cor0}
'is_c_letrec'/1 =
    %% Line 2732
    fun (_cor0) ->
	case _cor0 of
	  <{'c_letrec',_cor2,_cor3,_cor4}> when 'true' ->
	      %% Line 2733
	      'true'
	  %% Line 2734
	  <_cor5> when 'true' ->
	      %% Line 2735
	      'false'
	end
'letrec_defs'/1 =
    %% Line 2750
    fun (_cor0) ->
	%% Line 2751
	( case _cor0 of
	    ( <( {'c_letrec',_cor3,_rec27,_cor4}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec27
	      -| ['compiler_generated'] )
	    ( <_cor5> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_letrec'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'letrec_body'/1 =
    %% Line 2762
    fun (_cor0) ->
	%% Line 2763
	( case _cor0 of
	    ( <( {'c_letrec',_cor3,_cor4,_rec28}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec28
	      -| ['compiler_generated'] )
	    ( <_cor5> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_letrec'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'letrec_vars'/1 =
    %% Line 2778
    fun (_cor0) ->
	%% Line 2779
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[{F,_cor7}|_cor2]> when 'true' ->
			    let <_cor5> =
				apply 'lc$^0'/1
				    (_cor2)
			    in  ( [F|_cor5]
				  -| ['compiler_generated'] )
			( <[_cor1|_cor2]> when 'true' ->
			      apply 'lc$^0'/1
				  (_cor2)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_21074> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  ( case _cor0 of
		  ( <( {'c_letrec',_cor3,_rec27,_cor4}
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'lc$^0'/1
			    (_rec27)
		    -| ['compiler_generated'] )
		  ( <_cor5> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','c_letrec'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  -| ['list_comprehension'] )
'c_case'/2 =
    %% Line 2801
    fun (_cor1,_cor0) ->
	%% Line 2802
	{'c_case',[],_cor1,_cor0}
'ann_c_case'/3 =
    %% Line 2811
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2812
	{'c_case',_cor2,_cor1,_cor0}
'update_c_case'/3 =
    %% Line 2821
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    call 'erlang':'element'
		(2, _cor2)
	in  %% Line 2822
	    {'c_case',_cor3,_cor1,_cor0}
'is_c_case'/1 =
    %% Line 2836
    fun (_cor0) ->
	case _cor0 of
	  <{'c_case',_cor2,_cor3,_cor4}> when 'true' ->
	      %% Line 2837
	      'true'
	  %% Line 2838
	  <_cor5> when 'true' ->
	      %% Line 2839
	      'false'
	end
'case_arg'/1 =
    %% Line 2850
    fun (_cor0) ->
	%% Line 2851
	( case _cor0 of
	    ( <( {'c_case',_cor3,_rec29,_cor4}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec29
	      -| ['compiler_generated'] )
	    ( <_cor5> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_case'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'case_clauses'/1 =
    %% Line 2864
    fun (_cor0) ->
	%% Line 2865
	( case _cor0 of
	    ( <( {'c_case',_cor3,_cor4,_rec30}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec30
	      -| ['compiler_generated'] )
	    ( <_cor5> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_case'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'case_arity'/1 =
    %% Line 2880
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'c_case',_cor3,_cor4,_rec30}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 2980
		  ( case call 'erlang':'hd'
			     (_rec30) of
		      ( <( {'c_clause',_fol412,_rec31,_fol413,_cor5}
			   -| ['compiler_generated'] )> when 'true' ->
			    %% Line 3021
			    call 'erlang':'length'
				(_rec31)
			-| ['compiler_generated'] )
		      ( <_cor6> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','c_clause'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor5> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_case'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'c_clause'/2 =
    %% Line 2892
    fun (_cor1,_cor0) ->
	%% Line 2919
	{'c_clause',[],_cor1,{'c_literal',[],'true'},_cor0}
'c_clause'/3 =
    %% Line 2918
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2919
	{'c_clause',[],_cor2,_cor1,_cor0}
'ann_c_clause'/3 =
    %% Line 2929
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2941
	{'c_clause',_cor2,_cor1,{'c_literal',[],'true'},_cor0}
'ann_c_clause'/4 =
    %% Line 2940
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2941
	{'c_clause',_cor3,_cor2,_cor1,_cor0}
'update_c_clause'/4 =
    %% Line 2950
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    call 'erlang':'element'
		(2, _cor3)
	in  %% Line 2951
	    {'c_clause',_cor4,_cor2,_cor1,_cor0}
'is_c_clause'/1 =
    %% Line 2964
    fun (_cor0) ->
	case _cor0 of
	  <{'c_clause',_cor2,_cor3,_cor4,_cor5}> when 'true' ->
	      %% Line 2965
	      'true'
	  %% Line 2966
	  <_cor6> when 'true' ->
	      %% Line 2967
	      'false'
	end
'clause_pats'/1 =
    %% Line 2979
    fun (_cor0) ->
	%% Line 2980
	( case _cor0 of
	    ( <( {'c_clause',_cor3,_rec31,_cor4,_cor5}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec31
	      -| ['compiler_generated'] )
	    ( <_cor6> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_clause'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'clause_guard'/1 =
    %% Line 2991
    fun (_cor0) ->
	%% Line 2992
	( case _cor0 of
	    ( <( {'c_clause',_cor3,_cor4,_rec32,_cor5}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec32
	      -| ['compiler_generated'] )
	    ( <_cor6> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_clause'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'clause_body'/1 =
    %% Line 3003
    fun (_cor0) ->
	%% Line 3004
	( case _cor0 of
	    ( <( {'c_clause',_cor3,_cor4,_cor5,_rec33}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec33
	      -| ['compiler_generated'] )
	    ( <_cor6> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_clause'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'clause_arity'/1 =
    %% Line 3020
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'c_clause',_cor3,_rec31,_cor4,_cor5}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 3021
		  call 'erlang':'length'
		      (_rec31)
	      -| ['compiler_generated'] )
	    ( <_cor6> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_clause'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'clause_vars'/1 =
    %% Line 3034
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'c_clause',_cor3,_rec31,_cor4,_cor5}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 3035
		  apply 'pat_list_vars'/1
		      (_rec31)
	      -| ['compiler_generated'] )
	    ( <_cor6> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_clause'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'pat_vars'/1 =
    %% Line 3050
    fun (_cor0) ->
	%% Line 3051
	apply 'pat_vars'/2
	    (_cor0, [])
'pat_vars'/2 =
    %% Line 3053
    fun (_cor1,_cor0) ->
	let <_11520> =
	    %% Line 3054
	    apply 'type'/1
		(_cor1)
	in  %% Line 3054
	    case _11520 of
	      %% Line 3055
	      <'var'> when 'true' ->
		  %% Line 3056
		  [_cor1|_cor0]
	      %% Line 3057
	      <'literal'> when 'true' ->
		  _cor0
	      %% Line 3059
	      <'cons'> when 'true' ->
		  let <_cor4> =
		      %% Line 3060
		      apply 'cons_hd'/1
			  (_cor1)
		  in  let <_cor2> =
			  %% Line 3060
			  apply 'cons_tl'/1
			      (_cor1)
		      in  let <_cor3> =
			      %% Line 3060
			      apply 'pat_vars'/2
				  (_cor2, _cor0)
			  in  %% Line 3060
			      apply 'pat_vars'/2
				  (_cor4, _cor3)
	      %% Line 3061
	      <'tuple'> when 'true' ->
		  let <_cor5> =
		      %% Line 3062
		      apply 'tuple_es'/1
			  (_cor1)
		  in  %% Line 3062
		      apply 'pat_list_vars'/2
			  (_cor5, _cor0)
	      %% Line 3063
	      <'map'> when 'true' ->
		  case _cor1 of
		    <{'c_map',_cor2,_cor3,Es}> when 'true' ->
			%% Line 3064
			apply 'pat_list_vars'/2
			    (Es, _cor0)
		    ( <_25101> when 'true' ->
			  primop 'match_fail'
			      ({'function_clause',_cor1})
		      -| ['compiler_generated'] )
		  end
	      %% Line 3065
	      <'map_pair'> when 'true' ->
		  case _cor1 of
		    <{'c_map_pair',_cor2,Op,_cor3,_cor4}> when 'true' ->
			%% Line 3066
			apply 'pat_list_vars'/2
			    ([Op|[_cor3|[_cor4|[]]]], _cor0)
		    ( <_19082> when 'true' ->
			  primop 'match_fail'
			      ({'function_clause',_cor1})
		      -| ['compiler_generated'] )
		  end
	      %% Line 3067
	      <'binary'> when 'true' ->
		  ( case _cor1 of
		      ( <( {'c_binary',_cor3,_rec11}
			   -| ['compiler_generated'] )> when 'true' ->
			    %% Line 3068
			    apply 'pat_list_vars'/2
				(_rec11, _cor0)
			-| ['compiler_generated'] )
		      ( <_cor4> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','c_binary'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 3069
	      <'bitstr'> when 'true' ->
		  ( case _cor1 of
		      ( <( {'c_bitstr',_cor3,_rec12,_cor4,_cor5,_cor6,_cor7}
			   -| ['compiler_generated'] )> when 'true' ->
			    %% Line 3070
			    apply 'pat_vars'/2
				(_rec12, _cor0)
			-| ['compiler_generated'] )
		      ( <_cor8> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','c_bitstr'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 3071
	      <'alias'> when 'true' ->
		  %% Line 3173
		  ( case _cor1 of
		      ( <( {'c_alias',_cor3,_cor4,_rec35}
			   -| ['compiler_generated'] )> when 'true' ->
			    apply 'pat_vars'/2
				(_rec35, [_cor4|_cor0])
			-| ['compiler_generated'] )
		      ( <_cor5> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','c_alias'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      ( <_cor14> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_11520})
		-| ['compiler_generated'] )
	    end
'pat_list_vars'/1 =
    %% Line 3088
    fun (_cor0) ->
	%% Line 3089
	apply 'pat_list_vars'/2
	    (_cor0, [])
'pat_list_vars'/2 =
    %% Line 3091
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[P|Ps],Vs> when 'true' ->
	      let <_cor2> =
		  %% Line 3092
		  apply 'pat_vars'/2
		      (P, _cor0)
	      in  %% Line 3092
		  apply 'pat_list_vars'/2
		      (Ps, _cor2)
	  %% Line 3093
	  <[],Vs> when 'true' ->
	      _cor0
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'pat_list_vars',2}}] )
	    -| ['compiler_generated'] )
	end
'c_alias'/2 =
    %% Line 3113
    fun (_cor1,_cor0) ->
	%% Line 3114
	{'c_alias',[],_cor1,_cor0}
'ann_c_alias'/3 =
    %% Line 3123
    fun (_cor2,_cor1,_cor0) ->
	%% Line 3124
	{'c_alias',_cor2,_cor1,_cor0}
'update_c_alias'/3 =
    %% Line 3133
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    call 'erlang':'element'
		(2, _cor2)
	in  %% Line 3134
	    {'c_alias',_cor3,_cor1,_cor0}
'is_c_alias'/1 =
    %% Line 3146
    fun (_cor0) ->
	case _cor0 of
	  <{'c_alias',_cor2,_cor3,_cor4}> when 'true' ->
	      %% Line 3147
	      'true'
	  %% Line 3148
	  <_cor5> when 'true' ->
	      %% Line 3149
	      'false'
	end
'alias_var'/1 =
    %% Line 3160
    fun (_cor0) ->
	%% Line 3161
	( case _cor0 of
	    ( <( {'c_alias',_cor3,_rec34,_cor4}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec34
	      -| ['compiler_generated'] )
	    ( <_cor5> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_alias'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'alias_pat'/1 =
    %% Line 3172
    fun (_cor0) ->
	%% Line 3173
	( case _cor0 of
	    ( <( {'c_alias',_cor3,_cor4,_rec35}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec35
	      -| ['compiler_generated'] )
	    ( <_cor5> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_alias'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'c_receive'/1 =
    %% Line 3184
    fun (_cor0) ->
	%% Line 3207
	{'c_receive',[],_cor0,{'c_literal',[],'infinity'},{'c_literal',[],'true'}}
'c_receive'/3 =
    %% Line 3206
    fun (_cor2,_cor1,_cor0) ->
	%% Line 3207
	{'c_receive',[],_cor2,_cor1,_cor0}
'ann_c_receive'/2 =
    %% Line 3217
    fun (_cor1,_cor0) ->
	%% Line 3229
	{'c_receive',_cor1,_cor0,{'c_literal',[],'infinity'},{'c_literal',[],'true'}}
'ann_c_receive'/4 =
    %% Line 3228
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 3229
	{'c_receive',_cor3,_cor2,_cor1,_cor0}
'update_c_receive'/4 =
    %% Line 3239
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    call 'erlang':'element'
		(2, _cor3)
	in  %% Line 3240
	    {'c_receive',_cor4,_cor2,_cor1,_cor0}
'is_c_receive'/1 =
    %% Line 3253
    fun (_cor0) ->
	case _cor0 of
	  <{'c_receive',_cor2,_cor3,_cor4,_cor5}> when 'true' ->
	      %% Line 3254
	      'true'
	  %% Line 3255
	  <_cor6> when 'true' ->
	      %% Line 3256
	      'false'
	end
'receive_clauses'/1 =
    %% Line 3268
    fun (_cor0) ->
	%% Line 3269
	( case _cor0 of
	    ( <( {'c_receive',_cor3,_rec36,_cor4,_cor5}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec36
	      -| ['compiler_generated'] )
	    ( <_cor6> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_receive'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'receive_timeout'/1 =
    %% Line 3280
    fun (_cor0) ->
	%% Line 3281
	( case _cor0 of
	    ( <( {'c_receive',_cor3,_cor4,_rec37,_cor5}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec37
	      -| ['compiler_generated'] )
	    ( <_cor6> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_receive'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'receive_action'/1 =
    %% Line 3292
    fun (_cor0) ->
	%% Line 3293
	( case _cor0 of
	    ( <( {'c_receive',_cor3,_cor4,_cor5,_rec38}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec38
	      -| ['compiler_generated'] )
	    ( <_cor6> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_receive'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'c_apply'/2 =
    %% Line 3316
    fun (_cor1,_cor0) ->
	%% Line 3317
	{'c_apply',[],_cor1,_cor0}
'ann_c_apply'/3 =
    %% Line 3326
    fun (_cor2,_cor1,_cor0) ->
	%% Line 3327
	{'c_apply',_cor2,_cor1,_cor0}
'update_c_apply'/3 =
    %% Line 3336
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    call 'erlang':'element'
		(2, _cor2)
	in  %% Line 3337
	    {'c_apply',_cor3,_cor1,_cor0}
'is_c_apply'/1 =
    %% Line 3349
    fun (_cor0) ->
	case _cor0 of
	  <{'c_apply',_cor2,_cor3,_cor4}> when 'true' ->
	      %% Line 3350
	      'true'
	  %% Line 3351
	  <_cor5> when 'true' ->
	      %% Line 3352
	      'false'
	end
'apply_op'/1 =
    %% Line 3364
    fun (_cor0) ->
	%% Line 3365
	( case _cor0 of
	    ( <( {'c_apply',_cor3,_rec39,_cor4}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec39
	      -| ['compiler_generated'] )
	    ( <_cor5> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_apply'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'apply_args'/1 =
    %% Line 3378
    fun (_cor0) ->
	%% Line 3379
	( case _cor0 of
	    ( <( {'c_apply',_cor3,_cor4,_rec40}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec40
	      -| ['compiler_generated'] )
	    ( <_cor5> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_apply'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'apply_arity'/1 =
    %% Line 3396
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'c_apply',_cor3,_cor4,_rec40}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 3397
		  call 'erlang':'length'
		      (_rec40)
	      -| ['compiler_generated'] )
	    ( <_cor5> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_apply'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'c_call'/3 =
    %% Line 3422
    fun (_cor2,_cor1,_cor0) ->
	%% Line 3423
	{'c_call',[],_cor2,_cor1,_cor0}
'ann_c_call'/4 =
    %% Line 3432
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 3433
	{'c_call',_cor3,_cor2,_cor1,_cor0}
'update_c_call'/4 =
    %% Line 3442
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    call 'erlang':'element'
		(2, _cor3)
	in  %% Line 3443
	    {'c_call',_cor4,_cor2,_cor1,_cor0}
'is_c_call'/1 =
    %% Line 3456
    fun (_cor0) ->
	case _cor0 of
	  <{'c_call',_cor2,_cor3,_cor4,_cor5}> when 'true' ->
	      %% Line 3457
	      'true'
	  %% Line 3458
	  <_cor6> when 'true' ->
	      %% Line 3459
	      'false'
	end
'call_module'/1 =
    %% Line 3470
    fun (_cor0) ->
	%% Line 3471
	( case _cor0 of
	    ( <( {'c_call',_cor3,_rec41,_cor4,_cor5}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec41
	      -| ['compiler_generated'] )
	    ( <_cor6> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_call'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'call_name'/1 =
    %% Line 3482
    fun (_cor0) ->
	%% Line 3483
	( case _cor0 of
	    ( <( {'c_call',_cor3,_cor4,_rec42,_cor5}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec42
	      -| ['compiler_generated'] )
	    ( <_cor6> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_call'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'call_args'/1 =
    %% Line 3496
    fun (_cor0) ->
	%% Line 3497
	( case _cor0 of
	    ( <( {'c_call',_cor3,_cor4,_cor5,_rec43}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec43
	      -| ['compiler_generated'] )
	    ( <_cor6> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_call'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'call_arity'/1 =
    %% Line 3514
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'c_call',_cor3,_cor4,_cor5,_rec43}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 3515
		  call 'erlang':'length'
		      (_rec43)
	      -| ['compiler_generated'] )
	    ( <_cor6> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_call'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'c_primop'/2 =
    %% Line 3538
    fun (_cor1,_cor0) ->
	%% Line 3539
	{'c_primop',[],_cor1,_cor0}
'ann_c_primop'/3 =
    %% Line 3548
    fun (_cor2,_cor1,_cor0) ->
	%% Line 3549
	{'c_primop',_cor2,_cor1,_cor0}
'update_c_primop'/3 =
    %% Line 3558
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    call 'erlang':'element'
		(2, _cor2)
	in  %% Line 3559
	    {'c_primop',_cor3,_cor1,_cor0}
'is_c_primop'/1 =
    %% Line 3571
    fun (_cor0) ->
	case _cor0 of
	  <{'c_primop',_cor2,_cor3,_cor4}> when 'true' ->
	      %% Line 3572
	      'true'
	  %% Line 3573
	  <_cor5> when 'true' ->
	      %% Line 3574
	      'false'
	end
'primop_name'/1 =
    %% Line 3586
    fun (_cor0) ->
	%% Line 3587
	( case _cor0 of
	    ( <( {'c_primop',_cor3,_rec44,_cor4}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec44
	      -| ['compiler_generated'] )
	    ( <_cor5> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_primop'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'primop_args'/1 =
    %% Line 3600
    fun (_cor0) ->
	%% Line 3601
	( case _cor0 of
	    ( <( {'c_primop',_cor3,_cor4,_rec45}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec45
	      -| ['compiler_generated'] )
	    ( <_cor5> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_primop'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'primop_arity'/1 =
    %% Line 3618
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'c_primop',_cor3,_cor4,_rec45}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 3619
		  call 'erlang':'length'
		      (_rec45)
	      -| ['compiler_generated'] )
	    ( <_cor5> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_primop'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'c_try'/5 =
    %% Line 3645
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 3646
	{'c_try',[],_cor4,_cor3,_cor2,_cor1,_cor0}
'ann_c_try'/6 =
    %% Line 3658
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 3659
	{'c_try',_cor5,_cor4,_cor3,_cor2,_cor1,_cor0}
'update_c_try'/6 =
    %% Line 3671
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    call 'erlang':'element'
		(2, _cor5)
	in  %% Line 3672
	    {'c_try',_cor6,_cor4,_cor3,_cor2,_cor1,_cor0}
'is_c_try'/1 =
    %% Line 3685
    fun (_cor0) ->
	case _cor0 of
	  <{'c_try',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7}> when 'true' ->
	      %% Line 3686
	      'true'
	  %% Line 3687
	  <_cor8> when 'true' ->
	      %% Line 3688
	      'false'
	end
'try_arg'/1 =
    %% Line 3699
    fun (_cor0) ->
	%% Line 3700
	( case _cor0 of
	    ( <( {'c_try',_cor3,_rec46,_cor4,_cor5,_cor6,_cor7}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec46
	      -| ['compiler_generated'] )
	    ( <_cor8> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_try'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'try_vars'/1 =
    %% Line 3712
    fun (_cor0) ->
	%% Line 3713
	( case _cor0 of
	    ( <( {'c_try',_cor3,_cor4,_rec47,_cor5,_cor6,_cor7}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec47
	      -| ['compiler_generated'] )
	    ( <_cor8> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_try'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'try_body'/1 =
    %% Line 3724
    fun (_cor0) ->
	%% Line 3725
	( case _cor0 of
	    ( <( {'c_try',_cor3,_cor4,_cor5,_rec48,_cor6,_cor7}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec48
	      -| ['compiler_generated'] )
	    ( <_cor8> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_try'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'try_evars'/1 =
    %% Line 3737
    fun (_cor0) ->
	%% Line 3738
	( case _cor0 of
	    ( <( {'c_try',_cor3,_cor4,_cor5,_cor6,_rec49,_cor7}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec49
	      -| ['compiler_generated'] )
	    ( <_cor8> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_try'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'try_handler'/1 =
    %% Line 3750
    fun (_cor0) ->
	%% Line 3751
	( case _cor0 of
	    ( <( {'c_try',_cor3,_cor4,_cor5,_cor6,_cor7,_rec50}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec50
	      -| ['compiler_generated'] )
	    ( <_cor8> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_try'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'c_catch'/1 =
    %% Line 3772
    fun (_cor0) ->
	%% Line 3773
	{'c_catch',[],_cor0}
'ann_c_catch'/2 =
    %% Line 3781
    fun (_cor1,_cor0) ->
	%% Line 3782
	{'c_catch',_cor1,_cor0}
'update_c_catch'/2 =
    %% Line 3790
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    call 'erlang':'element'
		(2, _cor1)
	in  %% Line 3791
	    {'c_catch',_cor2,_cor0}
'is_c_catch'/1 =
    %% Line 3803
    fun (_cor0) ->
	case _cor0 of
	  <{'c_catch',_cor2,_cor3}> when 'true' ->
	      %% Line 3804
	      'true'
	  %% Line 3805
	  <_cor4> when 'true' ->
	      %% Line 3806
	      'false'
	end
'catch_body'/1 =
    %% Line 3817
    fun (_cor0) ->
	%% Line 3818
	( case _cor0 of
	    ( <( {'c_catch',_cor3,_rec51}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec51
	      -| ['compiler_generated'] )
	    ( <_cor4> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','c_catch'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'to_records'/1 =
    %% Line 3834
    fun (_cor0) ->
	_cor0
'from_records'/1 =
    %% Line 3854
    fun (_cor0) ->
	_cor0
'is_data'/1 =
    %% Line 3872
    fun (_cor0) ->
	case _cor0 of
	  <{'c_literal',_cor2,_cor3}> when 'true' ->
	      %% Line 3873
	      'true'
	  %% Line 3874
	  <{'c_cons',_cor4,_cor5,_cor6}> when 'true' ->
	      %% Line 3875
	      'true'
	  %% Line 3876
	  <{'c_tuple',_cor7,_cor8}> when 'true' ->
	      %% Line 3877
	      'true'
	  %% Line 3878
	  <_cor9> when 'true' ->
	      %% Line 3879
	      'false'
	end
'data_type'/1 =
    %% Line 3911
    fun (_cor0) ->
	case _cor0 of
	  <{'c_literal',_cor3,V}> when 'true' ->
	      %% Line 3912
	      case V of
		%% Line 3913
		<[_cor4|_cor5]> when 'true' ->
		    %% Line 3914
		    'cons'
		%% Line 3915
		<_cor6>
		    when call 'erlang':'is_tuple'
			  (V) ->
		    %% Line 3916
		    'tuple'
		%% Line 3917
		<_cor7> when 'true' ->
		    %% Line 3918
		    {'atomic',V}
	      end
	  %% Line 3920
	  <{'c_cons',_cor8,_cor9,_cor10}> when 'true' ->
	      %% Line 3921
	      'cons'
	  %% Line 3922
	  <{'c_tuple',_cor11,_cor12}> when 'true' ->
	      %% Line 3923
	      'tuple'
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'data_type',1}}] )
	    -| ['compiler_generated'] )
	end
'data_es'/1 =
    %% Line 3942
    fun (_cor0) ->
	case _cor0 of
	  <{'c_literal',_cor4,V}> when 'true' ->
	      %% Line 3943
	      case V of
		%% Line 3944
		<[Head|Tail]> when 'true' ->
		    %% Line 3945
		    [{'c_literal',[],Head}|[{'c_literal',[],Tail}|[]]]
		%% Line 3946
		<_cor5>
		    when call 'erlang':'is_tuple'
			  (V) ->
		    let <_cor1> =
			%% Line 3947
			call 'erlang':'tuple_to_list'
			    (V)
		    in  %% Line 3947
			apply 'make_lit_list'/1
			    (_cor1)
		%% Line 3948
		<_cor6> when 'true' ->
		    %% Line 3949
		    []
	      end
	  %% Line 3951
	  <{'c_cons',_cor7,H,T}> when 'true' ->
	      %% Line 3952
	      [H|[T|[]]]
	  %% Line 3953
	  <{'c_tuple',_cor8,Es}> when 'true' ->
	      Es
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'data_es',1}}] )
	    -| ['compiler_generated'] )
	end
'data_arity'/1 =
    %% Line 3967
    fun (_cor0) ->
	case _cor0 of
	  <{'c_literal',_cor3,V}> when 'true' ->
	      %% Line 3968
	      case V of
		%% Line 3969
		<[_cor4|_cor5]> when 'true' ->
		    %% Line 3970
		    2
		%% Line 3971
		<_cor6>
		    when call 'erlang':'is_tuple'
			  (V) ->
		    %% Line 3972
		    call 'erlang':'tuple_size'
			(V)
		%% Line 3973
		<_cor7> when 'true' ->
		    %% Line 3974
		    0
	      end
	  %% Line 3976
	  <{'c_cons',_cor8,_cor9,_cor10}> when 'true' ->
	      %% Line 3977
	      2
	  %% Line 3978
	  <{'c_tuple',_cor11,Es}> when 'true' ->
	      %% Line 3979
	      call 'erlang':'length'
		  (Es)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'data_arity',1}}] )
	    -| ['compiler_generated'] )
	end
'make_data'/2 =
    %% Line 3998
    fun (_cor1,_cor0) ->
	%% Line 3999
	apply 'ann_make_data'/3
	    ([], _cor1, _cor0)
'ann_make_data'/3 =
    %% Line 4008
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <As,{'atomic',V},[]> when 'true' ->
	      {'c_literal',_cor2,V}
	  %% Line 4009
	  <As,'cons',[H|[T|[]]]> when 'true' ->
	      apply 'ann_c_cons'/3
		  (_cor2, H, T)
	  %% Line 4010
	  <As,'tuple',Es> when 'true' ->
	      apply 'ann_c_tuple'/2
		  (_cor2, _cor0)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'ann_make_data',3}}] )
	    -| ['compiler_generated'] )
	end
'update_data'/3 =
    %% Line 4018
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    call 'erlang':'element'
		(2, _cor2)
	in  %% Line 4019
	    apply 'ann_make_data'/3
		(_cor3, _cor1, _cor0)
'make_data_skel'/2 =
    %% Line 4035
    fun (_cor1,_cor0) ->
	%% Line 4036
	apply 'ann_make_data_skel'/3
	    ([], _cor1, _cor0)
'ann_make_data_skel'/3 =
    %% Line 4045
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <As,{'atomic',V},[]> when 'true' ->
	      {'c_literal',_cor2,V}
	  %% Line 4046
	  <As,'cons',[H|[T|[]]]> when 'true' ->
	      {'c_cons',_cor2,H,T}
	  %% Line 4047
	  <As,'tuple',Es> when 'true' ->
	      {'c_tuple',_cor2,_cor0}
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'ann_make_data_skel',3}}] )
	    -| ['compiler_generated'] )
	end
'update_data_skel'/3 =
    %% Line 4056
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    call 'erlang':'element'
		(2, _cor2)
	in  %% Line 4057
	    apply 'ann_make_data_skel'/3
		(_cor3, _cor1, _cor0)
'subtrees'/1 =
    %% Line 4123
    fun (_cor0) ->
	let <_4874> =
	    apply 'type'/1
		(_cor0)
	in  let <_7638> =
		case _4874 of
		  <'literal'> when 'true' ->
		      'true'
		  <'var'> when 'true' ->
		      'true'
		  <_cor3> when 'true' ->
		      'false'
		end
	    in  %% Line 4124
		case _7638 of
		  %% Line 4125
		  <'true'> when 'true' ->
		      %% Line 4126
		      []
		  %% Line 4127
		  <'false'> when 'true' ->
		      let <_18817> =
			  %% Line 4128
			  apply 'type'/1
			      (_cor0)
		      in  %% Line 4128
			  case _18817 of
			    %% Line 4129
			    <'values'> when 'true' ->
				( case _cor0 of
				    ( <( {'c_values',_cor3,_rec10}
					 -| ['compiler_generated'] )> when 'true' ->
					  %% Line 4130
					  [_rec10|[]]
				      -| ['compiler_generated'] )
				    ( <_cor4> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','c_values'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    %% Line 4131
			    <'binary'> when 'true' ->
				( case _cor0 of
				    ( <( {'c_binary',_cor3,_rec11}
					 -| ['compiler_generated'] )> when 'true' ->
					  %% Line 4132
					  [_rec11|[]]
				      -| ['compiler_generated'] )
				    ( <_cor4> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','c_binary'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    %% Line 4133
			    <'bitstr'> when 'true' ->
				( case _cor0 of
				    ( <( {'c_bitstr',_cor3,_rec12,_cor4,_cor5,_cor6,_cor7}
					 -| ['compiler_generated'] )> when 'true' ->
					  %% Line 4134
					  [[_rec12|[]]|[[_cor4|[]]|%% Line 4135
								   [[_cor5|[]]|[[_cor6|[]]|%% Line 4136
											   [[_cor7|[]]|[]]]]]]
				      -| ['compiler_generated'] )
				    ( <_cor8> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','c_bitstr'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    %% Line 4137
			    <'cons'> when 'true' ->
				let <_cor8> =
				    %% Line 4138
				    apply 'cons_hd'/1
					(_cor0)
				in  let <_cor9> =
					%% Line 4138
					apply 'cons_tl'/1
					    (_cor0)
				    in  %% Line 4138
					[[_cor8|[]]|[[_cor9|[]]|[]]]
			    %% Line 4139
			    <'tuple'> when 'true' ->
				let <_cor10> =
				    %% Line 4140
				    apply 'tuple_es'/1
					(_cor0)
				in  %% Line 4140
				    [_cor10|[]]
			    %% Line 4141
			    <'map'> when 'true' ->
				case _cor0 of
				  <{'c_map',_cor2,_cor3,Es}> when 'true' ->
				      %% Line 4142
				      [Es|[]]
				  ( <_cor1> when 'true' ->
					primop 'match_fail'
					    ({'function_clause',_cor0})
				    -| ['compiler_generated'] )
				end
			    %% Line 4143
			    <'map_pair'> when 'true' ->
				case _cor0 of
				  <{'c_map_pair',_cor2,Op,_cor3,_cor4}> when 'true' ->
				      %% Line 4144
				      [[Op|[]]|[[_cor3|[]]|[[_cor4|[]]|[]]]]
				  ( <_cor1> when 'true' ->
					primop 'match_fail'
					    ({'function_clause',_cor0})
				    -| ['compiler_generated'] )
				end
			    %% Line 4145
			    <'let'> when 'true' ->
				( case _cor0 of
				    ( <( {'c_let',_cor3,_rec24,_cor4,_cor5}
					 -| ['compiler_generated'] )> when 'true' ->
					  %% Line 4146
					  [_rec24|[[_cor4|[]]|[[_cor5|[]]|[]]]]
				      -| ['compiler_generated'] )
				    ( <_cor6> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','c_let'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    %% Line 4147
			    <'seq'> when 'true' ->
				( case _cor0 of
				    ( <( {'c_seq',_cor3,_rec22,_cor4}
					 -| ['compiler_generated'] )> when 'true' ->
					  %% Line 4148
					  [[_rec22|[]]|[[_cor4|[]]|[]]]
				      -| ['compiler_generated'] )
				    ( <_cor5> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','c_seq'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    %% Line 4149
			    <'apply'> when 'true' ->
				( case _cor0 of
				    ( <( {'c_apply',_cor3,_rec39,_cor4}
					 -| ['compiler_generated'] )> when 'true' ->
					  %% Line 4150
					  [[_rec39|[]]|[_cor4|[]]]
				      -| ['compiler_generated'] )
				    ( <_cor5> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','c_apply'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    %% Line 4151
			    <'call'> when 'true' ->
				( case _cor0 of
				    ( <( {'c_call',_cor3,_rec41,_cor4,_cor5}
					 -| ['compiler_generated'] )> when 'true' ->
					  %% Line 4152
					  [[_rec41|[]]|[[_cor4|[]]|%% Line 4153
								   [_cor5|[]]]]
				      -| ['compiler_generated'] )
				    ( <_cor6> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','c_call'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    %% Line 4154
			    <'primop'> when 'true' ->
				( case _cor0 of
				    ( <( {'c_primop',_cor3,_rec44,_cor4}
					 -| ['compiler_generated'] )> when 'true' ->
					  %% Line 4155
					  [[_rec44|[]]|[_cor4|[]]]
				      -| ['compiler_generated'] )
				    ( <_cor5> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','c_primop'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    %% Line 4156
			    <'case'> when 'true' ->
				( case _cor0 of
				    ( <( {'c_case',_cor3,_rec29,_cor4}
					 -| ['compiler_generated'] )> when 'true' ->
					  %% Line 4157
					  [[_rec29|[]]|[_cor4|[]]]
				      -| ['compiler_generated'] )
				    ( <_cor5> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','c_case'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    %% Line 4158
			    <'clause'> when 'true' ->
				( case _cor0 of
				    ( <( {'c_clause',_cor3,_rec31,_cor4,_cor5}
					 -| ['compiler_generated'] )> when 'true' ->
					  %% Line 4159
					  [_rec31|[[_cor4|[]]|%% Line 4160
							      [[_cor5|[]]|[]]]]
				      -| ['compiler_generated'] )
				    ( <_cor6> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','c_clause'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    %% Line 4161
			    <'alias'> when 'true' ->
				( case _cor0 of
				    ( <( {'c_alias',_cor3,_rec34,_cor4}
					 -| ['compiler_generated'] )> when 'true' ->
					  %% Line 4162
					  [[_rec34|[]]|[[_cor4|[]]|[]]]
				      -| ['compiler_generated'] )
				    ( <_cor5> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','c_alias'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    %% Line 4163
			    <'fun'> when 'true' ->
				( case _cor0 of
				    ( <( {'c_fun',_cor3,_rec20,_cor4}
					 -| ['compiler_generated'] )> when 'true' ->
					  %% Line 4164
					  [_rec20|[[_cor4|[]]|[]]]
				      -| ['compiler_generated'] )
				    ( <_cor5> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','c_fun'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    %% Line 4165
			    <'receive'> when 'true' ->
				( case _cor0 of
				    ( <( {'c_receive',_cor3,_rec36,_cor4,_cor5}
					 -| ['compiler_generated'] )> when 'true' ->
					  %% Line 4166
					  [_rec36|[[_cor4|[]]|%% Line 4167
							      [[_cor5|[]]|[]]]]
				      -| ['compiler_generated'] )
				    ( <_cor6> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','c_receive'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    %% Line 4168
			    <'try'> when 'true' ->
				( case _cor0 of
				    ( <( {'c_try',_cor3,_rec46,_cor4,_cor5,_cor6,_cor7}
					 -| ['compiler_generated'] )> when 'true' ->
					  %% Line 4169
					  [[_rec46|[]]|[_cor4|[[_cor5|[]]|%% Line 4170
									  [_cor6|[[_cor7|[]]|[]]]]]]
				      -| ['compiler_generated'] )
				    ( <_cor8> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','c_try'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    %% Line 4171
			    <'catch'> when 'true' ->
				( case _cor0 of
				    ( <( {'c_catch',_cor3,_rec51}
					 -| ['compiler_generated'] )> when 'true' ->
					  %% Line 4172
					  [[_rec51|[]]|[]]
				      -| ['compiler_generated'] )
				    ( <_cor4> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','c_catch'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    %% Line 4173
			    <'letrec'> when 'true' ->
				( case _cor0 of
				    ( <( {'c_letrec',_cor3,_rec27,_cor4}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <Es> =
					      %% Line 4174
					      apply 'unfold_tuples'/1
						  (_rec27)
					  in  %% Line 4175
					      [Es|[[_cor4|[]]|[]]]
				      -| ['compiler_generated'] )
				    ( <_cor5> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','c_letrec'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    %% Line 4176
			    <'module'> when 'true' ->
				( case _cor0 of
				    ( <( {'c_module',_cor3,_cor4,_cor5,_rec2,_cor6}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <As> =
					      %% Line 4177
					      apply 'unfold_tuples'/1
						  (_rec2)
					  in  let <Es> =
						  %% Line 4178
						  apply 'unfold_tuples'/1
						      (_cor6)
					      in  %% Line 4179
						  [[_cor4|[]]|[_cor5|[As|[Es|[]]]]]
				      -| ['compiler_generated'] )
				    ( <_cor7> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','c_module'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    ( <_cor54> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_18817})
			      -| ['compiler_generated'] )
			  end
		  ( <_cor55> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_7638})
		    -| ['compiler_generated'] )
		end
'update_tree'/2 =
    %% Line 4198
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    call 'erlang':'element'
		(2, _cor1)
	in  let <_cor2> =
		%% Line 4199
		apply 'type'/1
		    (_cor1)
	    in  %% Line 4199
		apply 'ann_make_tree'/3
		    (_cor3, _cor2, _cor0)
'update_tree'/3 =
    %% Line 4216
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    call 'erlang':'element'
		(2, _cor2)
	in  %% Line 4217
	    apply 'ann_make_tree'/3
		(_cor3, _cor1, _cor0)
'make_tree'/2 =
    %% Line 4246
    fun (_cor1,_cor0) ->
	%% Line 4247
	apply 'ann_make_tree'/3
	    ([], _cor1, _cor0)
'ann_make_tree'/3 =
    %% Line 4260
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <As,'values',[Es|[]]> when 'true' ->
	      {'c_values',_cor2,Es}
	  %% Line 4261
	  <As,'binary',[Ss|[]]> when 'true' ->
	      {'c_binary',_cor2,Ss}
	  %% Line 4262
	  <As,'bitstr',[[V|[]]|[[S|[]]|[[U|[]]|[[T|[]]|[[Fs|[]]|[]]]]]]> when 'true' ->
	      {'c_bitstr',_cor2,V,S,U,T,Fs}
	  %% Line 4264
	  <As,'cons',[[H|[]]|[[T|[]]|[]]]> when 'true' ->
	      apply 'ann_c_cons'/3
		  (_cor2, H, T)
	  %% Line 4265
	  <As,'tuple',[Es|[]]> when 'true' ->
	      apply 'ann_c_tuple'/2
		  (_cor2, Es)
	  %% Line 4266
	  <As,'map',[Es|[]]> when 'true' ->
	      apply 'ann_c_map'/3
		  (_cor2, {'c_literal',[],~{}~}, Es)
	  %% Line 4267
	  <As,'map',[[A|[]]|[Es|[]]]> when 'true' ->
	      apply 'ann_c_map'/3
		  (_cor2, A, Es)
	  %% Line 4268
	  <As,'map_pair',[[Op|[]]|[[K|[]]|[[V|[]]|[]]]]> when 'true' ->
	      {'c_map_pair',_cor2,Op,K,V}
	  %% Line 4269
	  <As,'let',[Vs|[[A|[]]|[[B|[]]|[]]]]> when 'true' ->
	      {'c_let',_cor2,Vs,A,B}
	  %% Line 4270
	  <As,'seq',[[A|[]]|[[B|[]]|[]]]> when 'true' ->
	      {'c_seq',_cor2,A,B}
	  %% Line 4271
	  <As,'apply',[[Op|[]]|[Es|[]]]> when 'true' ->
	      {'c_apply',_cor2,Op,Es}
	  %% Line 4272
	  <As,'call',[[M|[]]|[[N|[]]|[Es|[]]]]> when 'true' ->
	      {'c_call',_cor2,M,N,Es}
	  %% Line 4273
	  <As,'primop',[[N|[]]|[Es|[]]]> when 'true' ->
	      {'c_primop',_cor2,N,Es}
	  %% Line 4274
	  <As,'case',[[A|[]]|[Cs|[]]]> when 'true' ->
	      {'c_case',_cor2,A,Cs}
	  %% Line 4275
	  <As,'clause',[Ps|[[G|[]]|[[B|[]]|[]]]]> when 'true' ->
	      {'c_clause',_cor2,Ps,G,B}
	  %% Line 4276
	  <As,'alias',[[V|[]]|[[P|[]]|[]]]> when 'true' ->
	      {'c_alias',_cor2,V,P}
	  %% Line 4277
	  <As,'fun',[Vs|[[B|[]]|[]]]> when 'true' ->
	      {'c_fun',_cor2,Vs,B}
	  %% Line 4278
	  <As,'receive',[Cs|[[T|[]]|[[A|[]]|[]]]]> when 'true' ->
	      {'c_receive',_cor2,Cs,T,A}
	  %% Line 4280
	  <As,'try',[[E|[]]|[Vs|[[B|[]]|[Evs|[[H|[]]|[]]]]]]> when 'true' ->
	      {'c_try',_cor2,E,Vs,B,Evs,H}
	  %% Line 4282
	  <As,'catch',[[B|[]]|[]]> when 'true' ->
	      {'c_catch',_cor2,B}
	  %% Line 4283
	  <As,'letrec',[Es|[[B|[]]|[]]]> when 'true' ->
	      let <_cor3> =
		  %% Line 4555
		  case Es of
		    <[X|[Y|_1277]]> when 'true' ->
			let <_20367> =
			    %% Line 4556
			    apply 'fold_tuples'/1
				(_1277)
			in  %% Line 4556
			    [{X,Y}|_20367]
		    %% Line 4557
		    <[]> when 'true' ->
			%% Line 4558
			[]
		    ( <_943> when 'true' ->
			  primop 'match_fail'
			      ({'function_clause',Es})
		      -| ['compiler_generated'] )
		  end
	      in  {'c_letrec',_cor2,_cor3,B}
	  %% Line 4285
	  <As,'module',[[N|[]]|[Xs|[Es|[Ds|[]]]]]> when 'true' ->
	      let <_cor5> =
		  %% Line 4555
		  case Es of
		    <[X|[Y|_20820]]> when 'true' ->
			let <_15104> =
			    %% Line 4556
			    apply 'fold_tuples'/1
				(_20820)
			in  %% Line 4556
			    [{X,Y}|_15104]
		    %% Line 4557
		    <[]> when 'true' ->
			%% Line 4558
			[]
		    ( <_15975> when 'true' ->
			  primop 'match_fail'
			      ({'function_clause',Es})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor4> =
		      %% Line 4555
		      case Ds of
			<[X|[Y|_11618]]> when 'true' ->
			    let <_24837> =
				%% Line 4556
				apply 'fold_tuples'/1
				    (_11618)
			    in  %% Line 4556
				[{X,Y}|_24837]
			%% Line 4557
			<[]> when 'true' ->
			    %% Line 4558
			    []
			( <_10868> when 'true' ->
			      primop 'match_fail'
				  ({'function_clause',Ds})
			  -| ['compiler_generated'] )
		      end
		  in  {'c_module',_cor2,N,Xs,_cor5,_cor4}
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'ann_make_tree',3}}] )
	    -| ['compiler_generated'] )
	end
'meta'/1 =
    %% Line 4337
    fun (_cor0) ->
	let <_22324> =
	    %% Line 4339
	    apply 'type'/1
		(_cor0)
	in  %% Line 4339
	    case _22324 of
	      %% Line 4340
	      <'var'> when 'true' ->
		  let <_cor1> =
		      call 'erlang':'element'
			  (2, _cor0)
		  in  let <_13789> =
			  %% Line 4341
			  call 'lists':'member'
			      ('meta_var', _cor1)
		      in  %% Line 4341
			  case _13789 of
			    %% Line 4342
			    <'false'> when 'true' ->
				%% Line 4343
				apply 'meta_0'/2
				    ('var', _cor0)
			    %% Line 4344
			    <'true'> when 'true' ->
				let <_cor2> =
				    call 'erlang':'element'
					(2, _cor0)
				in  let <_cor3> =
					%% Line 4348
					call 'lists':'delete'
					    ('meta_var', _cor2)
				    in  call 'erlang':'setelement'
					    (2, _cor0, _cor3)
			    ( <_cor4> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_13789})
			      -| ['compiler_generated'] )
			  end
	      %% Line 4350
	      <Type> when 'true' ->
		  %% Line 4351
		  apply 'meta_0'/2
		      (_22324, _cor0)
	    end
'meta_0'/2 =
    %% Line 4354
    fun (_cor1,_cor0) ->
	let <_10915> =
	    call 'erlang':'element'
		(2, _cor0)
	in  %% Line 4355
	    case _10915 of
	      %% Line 4356
	      <[]> when 'true' ->
		  %% Line 4357
		  apply 'meta_1'/2
		      (_cor1, _cor0)
	      %% Line 4358
	      <As> when 'true' ->
		  let <_cor2> =
		      %% Line 4359
		      apply 'meta_1'/2
			  (_cor1, _cor0)
		  in  let <_cor3> = {'c_literal',[],_10915}
		      in  let <_25912> =
			      %% Line 4359
			      [_cor2|[_cor3|[]]]
			  in  {'c_call',[],{'c_literal',[],'cerl'},{'c_literal',[],'set_ann'},_25912}
	    end
'meta_1'/2 =
    %% Line 4362
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'literal',Node> when 'true' ->
	      case _cor0 of
		<{'c_literal',_cor2,V}> when 'true' ->
		    %% Line 4365
		    case V of
		      %% Line 4366
		      <_fol809>
			  when call 'erlang':'is_atom'
				(V) ->
			  let <_14496> =
			      %% Line 4367
			      [_cor0|[]]
			  in  {'c_call',[],{'c_literal',[],'cerl'},{'c_literal',[],'c_atom'},_14496}
		      %% Line 4368
		      <_fol810>
			  when call 'erlang':'is_integer'
				(V) ->
			  let <_3087> =
			      %% Line 4369
			      [_cor0|[]]
			  in  {'c_call',[],{'c_literal',[],'cerl'},{'c_literal',[],'c_int'},_3087}
		      %% Line 4370
		      <_fol811>
			  when call 'erlang':'is_float'
				(V) ->
			  let <_14533> =
			      %% Line 4371
			      [_cor0|[]]
			  in  {'c_call',[],{'c_literal',[],'cerl'},{'c_literal',[],'c_float'},_14533}
		      %% Line 4372
		      <[]> when 'true' ->
			  {'c_call',[],{'c_literal',[],'cerl'},{'c_literal',[],'c_nil'},[]}
		      %% Line 4374
		      <_cor139> when 'true' ->
			  let <_13923> =
			      %% Line 4375
			      [_cor0|[]]
			  in  {'c_call',[],{'c_literal',[],'cerl'},{'c_literal',[],'abstract'},_13923}
		    end
		( <_26335> when 'true' ->
		      primop 'match_fail'
			  ({'function_clause',_cor0})
		  -| ['compiler_generated'] )
	      end
	  %% Line 4377
	  <'var',Node> when 'true' ->
	      ( case _cor0 of
		  ( <( {'c_var',_cor3,_rec9}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor4> = {'c_literal',[],_rec9}
			in  let <_19863> =
				%% Line 4379
				[_cor4|[]]
			    in  {'c_call',[],{'c_literal',[],'cerl'},{'c_literal',[],'c_var'},_19863}
		    -| ['compiler_generated'] )
		  ( <_cor4> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','c_var'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 4380
	  <'values',Node> when 'true' ->
	      ( case _cor0 of
		  ( <( {'c_values',_cor3,_rec10}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor6> =
			    %% Line 4473
			    case _rec10 of
			      <[T|Ts]> when 'true' ->
				  let <_21684> =
				      %% Line 4474
				      apply 'meta'/1
					  (T)
				  in  let <_cor2> =
					  %% Line 4474
					  apply 'meta_list'/1
					      (Ts)
				      in  %% Line 4474
					  [_21684|_cor2]
			      %% Line 4475
			      <[]> when 'true' ->
				  %% Line 4476
				  []
			      ( <_cor3> when 'true' ->
				    primop 'match_fail'
					({'function_clause',_rec10})
				-| ['compiler_generated'] )
			    end
			in  let <_cor7> =
				apply 'ann_make_list'/3
				    ([], _cor6, 'none')
			    in  let <_20780> =
				    %% Line 4382
				    [_cor7|[]]
				in  {'c_call',[],{'c_literal',[],'cerl'},{'c_literal',[],'c_values'},_20780}
		    -| ['compiler_generated'] )
		  ( <_cor4> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','c_values'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 4383
	  <'binary',Node> when 'true' ->
	      ( case _cor0 of
		  ( <( {'c_binary',_cor3,_rec11}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor9> =
			    %% Line 4473
			    case _rec11 of
			      <[T|Ts]> when 'true' ->
				  let <_11845> =
				      %% Line 4474
				      apply 'meta'/1
					  (T)
				  in  let <_cor2> =
					  %% Line 4474
					  apply 'meta_list'/1
					      (Ts)
				      in  %% Line 4474
					  [_11845|_cor2]
			      %% Line 4475
			      <[]> when 'true' ->
				  %% Line 4476
				  []
			      ( <_cor3> when 'true' ->
				    primop 'match_fail'
					({'function_clause',_rec11})
				-| ['compiler_generated'] )
			    end
			in  let <_cor10> =
				apply 'ann_make_list'/3
				    ([], _cor9, 'none')
			    in  let <_4112> =
				    %% Line 4385
				    [_cor10|[]]
				in  {'c_call',[],{'c_literal',[],'cerl'},{'c_literal',[],'c_binary'},_4112}
		    -| ['compiler_generated'] )
		  ( <_cor4> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','c_binary'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 4386
	  <'bitstr',Node> when 'true' ->
	      ( case _cor0 of
		  ( <( {'c_bitstr',_cor3,_rec12,_cor4,_cor5,_cor6,_cor7}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor12> =
			    %% Line 4388
			    apply 'meta'/1
				(_rec12)
			in  let <_cor14> =
				%% Line 4389
				apply 'meta'/1
				    (_cor4)
			    in  let <_cor16> =
				    %% Line 4390
				    apply 'meta'/1
					(_cor5)
				in  let <_cor18> =
					%% Line 4391
					apply 'meta'/1
					    (_cor6)
				    in  let <_cor20> =
					    %% Line 4392
					    apply 'meta'/1
						(_cor7)
					in  %% Line 4387
					    apply 'meta_call'/2
						('c_bitstr', %% Line 4388
							     [_cor12|%% Line 4389
								     [_cor14|%% Line 4390
									     [_cor16|%% Line 4391
										     [_cor18|%% Line 4392
											     [_cor20|[]]]]]])
		    -| ['compiler_generated'] )
		  ( <_cor8> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','c_bitstr'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 4393
	  <'cons',Node> when 'true' ->
	      let <_6053> =
		  call 'erlang':'setelement'
		      (2, _cor0, %% Line 4479
				 [])
	      in  let <_3908> =
		      %% Line 4479
		      apply 'split_list'/2
			  (_6053, [])
		  in  %% Line 4397
		      case _3908 of
			%% Line 4398
			<{[H|[]],Node1}> when 'true' ->
			    let <_cor21> =
				%% Line 4399
				apply 'meta'/1
				    (H)
			    in  let <_cor22> =
				    %% Line 4399
				    apply 'meta'/1
					(Node1)
				in  let <_16802> =
					%% Line 4399
					[_cor21|[_cor22|[]]]
				    in  {'c_call',[],{'c_literal',[],'cerl'},{'c_literal',[],'c_cons'},_16802}
			%% Line 4400
			<{L,Node1}> when 'true' ->
			    let <_cor23> =
				%% Line 4473
				case L of
				  <[T|Ts]> when 'true' ->
				      let <_17998> =
					  %% Line 4474
					  apply 'meta'/1
					      (T)
				      in  let <_cor2> =
					      %% Line 4474
					      apply 'meta_list'/1
						  (Ts)
					  in  %% Line 4474
					      [_17998|_cor2]
				  %% Line 4475
				  <[]> when 'true' ->
				      %% Line 4476
				      []
				  ( <_cor3> when 'true' ->
					primop 'match_fail'
					    ({'function_clause',L})
				    -| ['compiler_generated'] )
				end
			    in  let <_cor24> =
				    apply 'ann_make_list'/3
					([], _cor23, 'none')
				in  let <_cor25> =
					%% Line 4402
					apply 'meta'/1
					    (Node1)
				    in  let <_23035> =
					    %% Line 4402
					    [_cor24|[_cor25|[]]]
					in  {'c_call',[],{'c_literal',[],'cerl'},{'c_literal',[],'make_list'},_23035}
			( <_cor26> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_3908})
			  -| ['compiler_generated'] )
		      end
	  %% Line 4404
	  <'tuple',Node> when 'true' ->
	      let <_cor27> =
		  case _cor0 of
		    <{'c_tuple',_cor3,Es}> when 'true' ->
			Es
		    <{'c_literal',_cor4,V}> when 'true' ->
			let <_16883> =
			    call 'erlang':'tuple_to_list'
				(V)
			in  %% Line 4509
			    case _16883 of
			      <[_25825|Vs]> when 'true' ->
				  let <_24981> =
				      %% Line 4510
				      apply 'make_lit_list'/1
					  (Vs)
				  in  %% Line 4510
				      [{'c_literal',[],_25825}|_24981]
			      %% Line 4511
			      <[]> when 'true' ->
				  %% Line 4512
				  []
			      ( <_cor2> when 'true' ->
				    primop 'match_fail'
					({'function_clause',_16883})
				-| ['compiler_generated'] )
			    end
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'function_clause',_cor0})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor28> =
		      %% Line 4473
		      case _cor27 of
			<[T|Ts]> when 'true' ->
			    let <_12889> =
				%% Line 4474
				apply 'meta'/1
				    (T)
			    in  let <_cor2> =
				    %% Line 4474
				    apply 'meta_list'/1
					(Ts)
				in  %% Line 4474
				    [_12889|_cor2]
			%% Line 4475
			<[]> when 'true' ->
			    %% Line 4476
			    []
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'function_clause',_cor27})
			  -| ['compiler_generated'] )
		      end
		  in  let <_cor29> =
			  apply 'ann_make_list'/3
			      ([], _cor28, 'none')
		      in  let <_24268> =
			      %% Line 4406
			      [_cor29|[]]
			  in  {'c_call',[],{'c_literal',[],'cerl'},{'c_literal',[],'c_tuple'},_24268}
	  %% Line 4407
	  <'let',Node> when 'true' ->
	      ( case _cor0 of
		  ( <( {'c_let',_cor3,_rec24,_cor4,_cor5}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor31> =
			    %% Line 4473
			    case _rec24 of
			      <[T|Ts]> when 'true' ->
				  let <_24770> =
				      %% Line 4474
				      apply 'meta'/1
					  (T)
				  in  let <_cor2> =
					  %% Line 4474
					  apply 'meta_list'/1
					      (Ts)
				      in  %% Line 4474
					  [_24770|_cor2]
			      %% Line 4475
			      <[]> when 'true' ->
				  %% Line 4476
				  []
			      ( <_cor3> when 'true' ->
				    primop 'match_fail'
					({'function_clause',_rec24})
				-| ['compiler_generated'] )
			    end
			in  let <_cor32> =
				apply 'ann_make_list'/3
				    ([], _cor31, 'none')
			    in  let <_cor34> =
				    %% Line 4410
				    apply 'meta'/1
					(_cor4)
				in  let <_cor36> =
					%% Line 4410
					apply 'meta'/1
					    (_cor5)
				    in  let <_25755> =
					    %% Line 4409
					    [_cor32|%% Line 4410
						    [_cor34|[_cor36|[]]]]
					in  {'c_call',[],{'c_literal',[],'cerl'},{'c_literal',[],'c_let'},_25755}
		    -| ['compiler_generated'] )
		  ( <_cor6> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','c_let'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 4411
	  <'seq',Node> when 'true' ->
	      ( case _cor0 of
		  ( <( {'c_seq',_cor3,_rec22,_cor4}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor38> =
			    %% Line 4413
			    apply 'meta'/1
				(_rec22)
			in  let <_cor40> =
				%% Line 4413
				apply 'meta'/1
				    (_cor4)
			    in  let <_9621> =
				    %% Line 4413
				    [_cor38|[_cor40|[]]]
				in  {'c_call',[],{'c_literal',[],'cerl'},{'c_literal',[],'c_seq'},_9621}
		    -| ['compiler_generated'] )
		  ( <_cor5> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','c_seq'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 4414
	  <'apply',Node> when 'true' ->
	      ( case _cor0 of
		  ( <( {'c_apply',_cor3,_rec39,_cor4}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor42> =
			    %% Line 4416
			    apply 'meta'/1
				(_rec39)
			in  let <_cor44> =
				%% Line 4473
				case _cor4 of
				  <[T|Ts]> when 'true' ->
				      let <_4714> =
					  %% Line 4474
					  apply 'meta'/1
					      (T)
				      in  let <_cor2> =
					      %% Line 4474
					      apply 'meta_list'/1
						  (Ts)
					  in  %% Line 4474
					      [_4714|_cor2]
				  %% Line 4475
				  <[]> when 'true' ->
				      %% Line 4476
				      []
				  ( <_fol926> when 'true' ->
					primop 'match_fail'
					    ({'function_clause',_cor4})
				    -| ['compiler_generated'] )
				end
			    in  let <_cor45> =
				    apply 'ann_make_list'/3
					([], _cor44, 'none')
				in  let <_21640> =
					%% Line 4416
					[_cor42|%% Line 4417
						[_cor45|[]]]
				    in  {'c_call',[],{'c_literal',[],'cerl'},{'c_literal',[],'c_apply'},_21640}
		    -| ['compiler_generated'] )
		  ( <_cor5> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','c_apply'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 4418
	  <'call',Node> when 'true' ->
	      ( case _cor0 of
		  ( <( {'c_call',_cor3,_rec41,_cor4,_cor5}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor47> =
			    %% Line 4420
			    apply 'meta'/1
				(_rec41)
			in  let <_cor49> =
				%% Line 4420
				apply 'meta'/1
				    (_cor4)
			    in  let <_cor51> =
				    %% Line 4473
				    case _cor5 of
				      <[T|Ts]> when 'true' ->
					  let <_22292> =
					      %% Line 4474
					      apply 'meta'/1
						  (T)
					  in  let <_cor2> =
						  %% Line 4474
						  apply 'meta_list'/1
						      (Ts)
					      in  %% Line 4474
						  [_22292|_cor2]
				      %% Line 4475
				      <[]> when 'true' ->
					  %% Line 4476
					  []
				      ( <_fol951> when 'true' ->
					    primop 'match_fail'
						({'function_clause',_cor5})
					-| ['compiler_generated'] )
				    end
				in  let <_cor52> =
					apply 'ann_make_list'/3
					    ([], _cor51, 'none')
				    in  let <_1654> =
					    %% Line 4420
					    [_cor47|[_cor49|%% Line 4421
							    [_cor52|[]]]]
					in  {'c_call',[],{'c_literal',[],'cerl'},{'c_literal',[],'c_call'},_1654}
		    -| ['compiler_generated'] )
		  ( <_cor6> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','c_call'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 4422
	  <'primop',Node> when 'true' ->
	      ( case _cor0 of
		  ( <( {'c_primop',_cor3,_rec44,_cor4}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor54> =
			    %% Line 4424
			    apply 'meta'/1
				(_rec44)
			in  let <_cor56> =
				%% Line 4473
				case _cor4 of
				  <[T|Ts]> when 'true' ->
				      let <_19740> =
					  %% Line 4474
					  apply 'meta'/1
					      (T)
				      in  let <_cor2> =
					      %% Line 4474
					      apply 'meta_list'/1
						  (Ts)
					  in  %% Line 4474
					      [_19740|_cor2]
				  %% Line 4475
				  <[]> when 'true' ->
				      %% Line 4476
				      []
				  ( <_fol961> when 'true' ->
					primop 'match_fail'
					    ({'function_clause',_cor4})
				    -| ['compiler_generated'] )
				end
			    in  let <_cor57> =
				    apply 'ann_make_list'/3
					([], _cor56, 'none')
				in  let <_13738> =
					%% Line 4424
					[_cor54|%% Line 4425
						[_cor57|[]]]
				    in  {'c_call',[],{'c_literal',[],'cerl'},{'c_literal',[],'c_primop'},_13738}
		    -| ['compiler_generated'] )
		  ( <_cor5> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','c_primop'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 4426
	  <'case',Node> when 'true' ->
	      ( case _cor0 of
		  ( <( {'c_case',_cor3,_rec29,_cor4}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor59> =
			    %% Line 4428
			    apply 'meta'/1
				(_rec29)
			in  let <_cor61> =
				%% Line 4473
				case _cor4 of
				  <[T|Ts]> when 'true' ->
				      let <_12603> =
					  %% Line 4474
					  apply 'meta'/1
					      (T)
				      in  let <_cor2> =
					      %% Line 4474
					      apply 'meta_list'/1
						  (Ts)
					  in  %% Line 4474
					      [_12603|_cor2]
				  %% Line 4475
				  <[]> when 'true' ->
				      %% Line 4476
				      []
				  ( <_fol971> when 'true' ->
					primop 'match_fail'
					    ({'function_clause',_cor4})
				    -| ['compiler_generated'] )
				end
			    in  let <_cor62> =
				    apply 'ann_make_list'/3
					([], _cor61, 'none')
				in  let <_22938> =
					%% Line 4428
					[_cor59|%% Line 4429
						[_cor62|[]]]
				    in  {'c_call',[],{'c_literal',[],'cerl'},{'c_literal',[],'c_case'},_22938}
		    -| ['compiler_generated'] )
		  ( <_cor5> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','c_case'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 4430
	  <'clause',Node> when 'true' ->
	      ( case _cor0 of
		  ( <( {'c_clause',_cor3,_rec31,_cor4,_cor5}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor64> =
			    %% Line 4473
			    case _rec31 of
			      <[T|Ts]> when 'true' ->
				  let <_26744> =
				      %% Line 4474
				      apply 'meta'/1
					  (T)
				  in  let <_cor2> =
					  %% Line 4474
					  apply 'meta_list'/1
					      (Ts)
				      in  %% Line 4474
					  [_26744|_cor2]
			      %% Line 4475
			      <[]> when 'true' ->
				  %% Line 4476
				  []
			      ( <_cor3> when 'true' ->
				    primop 'match_fail'
					({'function_clause',_rec31})
				-| ['compiler_generated'] )
			    end
			in  let <_cor65> =
				apply 'ann_make_list'/3
				    ([], _cor64, 'none')
			    in  let <_cor67> =
				    %% Line 4433
				    apply 'meta'/1
					(_cor4)
				in  let <_cor69> =
					%% Line 4434
					apply 'meta'/1
					    (_cor5)
				    in  let <_11996> =
					    %% Line 4432
					    [_cor65|%% Line 4433
						    [_cor67|%% Line 4434
							    [_cor69|[]]]]
					in  {'c_call',[],{'c_literal',[],'cerl'},{'c_literal',[],'c_clause'},_11996}
		    -| ['compiler_generated'] )
		  ( <_cor6> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','c_clause'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 4435
	  <'alias',Node> when 'true' ->
	      ( case _cor0 of
		  ( <( {'c_alias',_cor3,_rec34,_cor4}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor71> =
			    %% Line 4437
			    apply 'meta'/1
				(_rec34)
			in  let <_cor73> =
				%% Line 4437
				apply 'meta'/1
				    (_cor4)
			    in  let <_24991> =
				    %% Line 4437
				    [_cor71|[_cor73|[]]]
				in  {'c_call',[],{'c_literal',[],'cerl'},{'c_literal',[],'c_alias'},_24991}
		    -| ['compiler_generated'] )
		  ( <_cor5> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','c_alias'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 4438
	  <'fun',Node> when 'true' ->
	      ( case _cor0 of
		  ( <( {'c_fun',_cor3,_rec20,_cor4}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor75> =
			    %% Line 4473
			    case _rec20 of
			      <[T|Ts]> when 'true' ->
				  let <_5804> =
				      %% Line 4474
				      apply 'meta'/1
					  (T)
				  in  let <_cor2> =
					  %% Line 4474
					  apply 'meta_list'/1
					      (Ts)
				      in  %% Line 4474
					  [_5804|_cor2]
			      %% Line 4475
			      <[]> when 'true' ->
				  %% Line 4476
				  []
			      ( <_cor3> when 'true' ->
				    primop 'match_fail'
					({'function_clause',_rec20})
				-| ['compiler_generated'] )
			    end
			in  let <_cor76> =
				apply 'ann_make_list'/3
				    ([], _cor75, 'none')
			    in  let <_cor78> =
				    %% Line 4441
				    apply 'meta'/1
					(_cor4)
				in  let <_991> =
					%% Line 4440
					[_cor76|%% Line 4441
						[_cor78|[]]]
				    in  {'c_call',[],{'c_literal',[],'cerl'},{'c_literal',[],'c_fun'},_991}
		    -| ['compiler_generated'] )
		  ( <_cor5> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','c_fun'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 4442
	  <'receive',Node> when 'true' ->
	      ( case _cor0 of
		  ( <( {'c_receive',_cor3,_rec36,_cor4,_cor5}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor80> =
			    %% Line 4473
			    case _rec36 of
			      <[T|Ts]> when 'true' ->
				  let <_18351> =
				      %% Line 4474
				      apply 'meta'/1
					  (T)
				  in  let <_cor2> =
					  %% Line 4474
					  apply 'meta_list'/1
					      (Ts)
				      in  %% Line 4474
					  [_18351|_cor2]
			      %% Line 4475
			      <[]> when 'true' ->
				  %% Line 4476
				  []
			      ( <_cor3> when 'true' ->
				    primop 'match_fail'
					({'function_clause',_rec36})
				-| ['compiler_generated'] )
			    end
			in  let <_cor81> =
				apply 'ann_make_list'/3
				    ([], _cor80, 'none')
			    in  let <_cor83> =
				    %% Line 4445
				    apply 'meta'/1
					(_cor4)
				in  let <_cor85> =
					%% Line 4446
					apply 'meta'/1
					    (_cor5)
				    in  let <_19868> =
					    %% Line 4444
					    [_cor81|%% Line 4445
						    [_cor83|%% Line 4446
							    [_cor85|[]]]]
					in  {'c_call',[],{'c_literal',[],'cerl'},{'c_literal',[],'c_receive'},_19868}
		    -| ['compiler_generated'] )
		  ( <_cor6> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','c_receive'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 4447
	  <'try',Node> when 'true' ->
	      ( case _cor0 of
		  ( <( {'c_try',_cor3,_rec46,_cor4,_cor5,_cor6,_cor7}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor87> =
			    %% Line 4449
			    apply 'meta'/1
				(_rec46)
			in  let <_cor89> =
				%% Line 4473
				case _cor4 of
				  <[T|Ts]> when 'true' ->
				      let <_17478> =
					  %% Line 4474
					  apply 'meta'/1
					      (T)
				      in  let <_cor2> =
					      %% Line 4474
					      apply 'meta_list'/1
						  (Ts)
					  in  %% Line 4474
					      [_17478|_cor2]
				  %% Line 4475
				  <[]> when 'true' ->
				      %% Line 4476
				      []
				  ( <_fol1110> when 'true' ->
					primop 'match_fail'
					    ({'function_clause',_cor4})
				    -| ['compiler_generated'] )
				end
			    in  let <_cor90> =
				    apply 'ann_make_list'/3
					([], _cor89, 'none')
				in  let <_cor92> =
					%% Line 4451
					apply 'meta'/1
					    (_cor5)
				    in  let <_cor94> =
					    %% Line 4473
					    case _cor6 of
					      <[T|Ts]> when 'true' ->
						  let <_13166> =
						      %% Line 4474
						      apply 'meta'/1
							  (T)
						  in  let <_cor2> =
							  %% Line 4474
							  apply 'meta_list'/1
							      (Ts)
						      in  %% Line 4474
							  [_13166|_cor2]
					      %% Line 4475
					      <[]> when 'true' ->
						  %% Line 4476
						  []
					      ( <_fol1111> when 'true' ->
						    primop 'match_fail'
							({'function_clause',_cor6})
						-| ['compiler_generated'] )
					    end
					in  let <_cor95> =
						apply 'ann_make_list'/3
						    ([], _cor94, 'none')
					    in  let <_cor97> =
						    %% Line 4453
						    apply 'meta'/1
							(_cor7)
						in  %% Line 4448
						    apply 'meta_call'/2
							('c_try', %% Line 4449
								  [_cor87|%% Line 4450
									  [_cor90|%% Line 4451
										  [_cor92|%% Line 4452
											  [_cor95|%% Line 4453
												  [_cor97|[]]]]]])
		    -| ['compiler_generated'] )
		  ( <_cor8> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','c_try'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 4454
	  <'catch',Node> when 'true' ->
	      ( case _cor0 of
		  ( <( {'c_catch',_cor3,_rec51}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor99> =
			    %% Line 4455
			    apply 'meta'/1
				(_rec51)
			in  let <_3348> =
				%% Line 4455
				[_cor99|[]]
			    in  {'c_call',[],{'c_literal',[],'cerl'},{'c_literal',[],'c_catch'},_3348}
		    -| ['compiler_generated'] )
		  ( <_cor4> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','c_catch'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 4456
	  <'letrec',Node> when 'true' ->
	      let <_cor108> =
		  %% Line 4458
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor103) ->
				case _cor103 of
				  <[%% Line 4459
				    {N,F}|_cor101]> when 'true' ->
				      let <_cor104> =
					  apply 'meta'/1
					      (N)
				      in  let <_cor105> =
					      apply 'meta'/1
						  (F)
					  in  let <_24067> =
						  [_cor104|[_cor105|[]]]
					      in  let <_13123> =
						      %% Line 4495
						      case _24067 of
							<[{'c_literal',_cor2,_cor3}|Es]> when 'true' ->
							    %% Line 4496
							    apply 'is_lit_list'/1
								(Es)
							%% Line 4497
							<[_cor4|_cor5]> when 'true' ->
							    %% Line 4498
							    'false'
							%% Line 4499
							<[]> when 'true' ->
							    %% Line 4500
							    'true'
							( <_24206> when 'true' ->
							      primop 'match_fail'
								  ({'function_clause',_24067})
							  -| ['compiler_generated'] )
						      end
						  in  let <_cor106> =
							  case _13123 of
							    <'false'> when 'true' ->
								{'c_tuple',[],_24067}
							    <'true'> when 'true' ->
								let <_26982> =
								    %% Line 4502
								    case _24067 of
								      <[{'c_literal',_cor3,V}|Es]> when 'true' ->
									  let <_20677> =
									      %% Line 4503
									      apply 'lit_list_vals'/1
										  (Es)
									  in  %% Line 4503
									      [V|_20677]
								      %% Line 4504
								      <[]> when 'true' ->
									  %% Line 4505
									  []
								      ( <_cor2> when 'true' ->
									    primop 'match_fail'
										({'function_clause',_24067})
									-| ['compiler_generated'] )
								    end
								in  let <_cor2> =
									call 'erlang':'list_to_tuple'
									    (_26982)
								    in  {'c_literal',[],_cor2}
							    ( <_cor3> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_13123})
							      -| ['compiler_generated'] )
							  end
						      in  let <_cor107> =
							      %% Line 4459
							      apply 'lc$^0'/1
								  (_cor101)
							  in  ( [_cor106|_cor107]
								-| ['compiler_generated'] )
				  ( <[_cor100|_cor101]> when 'true' ->
					%% Line 4459
					apply 'lc$^0'/1
					    (_cor101)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_19837> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor103})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  ( case _cor0 of
			    ( <( {'c_letrec',_cor3,_rec27,_cor4}
				 -| ['compiler_generated'] )> when 'true' ->
				  apply 'lc$^0'/1
				      (_rec27)
			      -| ['compiler_generated'] )
			    ( <_cor5> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','c_letrec'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['list_comprehension'] )
	      in  let <_cor109> =
		      apply 'ann_make_list'/3
			  ([], _cor108, 'none')
		  in  ( case _cor0 of
			  ( <( {'c_letrec',_cor3,_cor4,_rec28}
			       -| ['compiler_generated'] )> when 'true' ->
				let <_cor111> =
				    %% Line 4460
				    apply 'meta'/1
					(_rec28)
				in  let <_15947> =
					%% Line 4458
					[_cor109|%% Line 4460
						 [_cor111|[]]]
				    in  {'c_call',[],{'c_literal',[],'cerl'},{'c_literal',[],'c_letrec'},_15947}
			    -| ['compiler_generated'] )
			  ( <_cor5> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','c_letrec'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  %% Line 4461
	  <'module',Node> when 'true' ->
	      ( case _cor0 of
		  ( <( {'c_module',_cor3,_rec0,_cor4,_cor5,_cor6}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor113> =
			    %% Line 4463
			    apply 'meta'/1
				(_rec0)
			in  let <_cor115> =
				%% Line 4473
				case _cor4 of
				  <[T|Ts]> when 'true' ->
				      let <_16082> =
					  %% Line 4474
					  apply 'meta'/1
					      (T)
				      in  let <_cor2> =
					      %% Line 4474
					      apply 'meta_list'/1
						  (Ts)
					  in  %% Line 4474
					      [_16082|_cor2]
				  %% Line 4475
				  <[]> when 'true' ->
				      %% Line 4476
				      []
				  ( <_fol1167> when 'true' ->
					primop 'match_fail'
					    ({'function_clause',_cor4})
				    -| ['compiler_generated'] )
				end
			    in  let <_cor116> =
				    apply 'ann_make_list'/3
					([], _cor115, 'none')
				in  let <_cor125> =
					%% Line 4465
					( letrec
					      'lc$^1'/1 =
						  fun (_cor120) ->
						      case _cor120 of
							<[%% Line 4466
							  {A,V}|_cor118]> when 'true' ->
							    let <_cor121> =
								apply 'meta'/1
								    (A)
							    in  let <_cor122> =
								    apply 'meta'/1
									(V)
								in  let <_12635> =
									[_cor121|[_cor122|[]]]
								    in  let <_13123> =
									    %% Line 4495
									    case _12635 of
									      <[{'c_literal',_cor2,_fol1116}|Es]> when 'true' ->
										  %% Line 4496
										  apply 'is_lit_list'/1
										      (Es)
									      %% Line 4497
									      <[_fol1117|_fol1118]> when 'true' ->
										  %% Line 4498
										  'false'
									      %% Line 4499
									      <[]> when 'true' ->
										  %% Line 4500
										  'true'
									      ( <_16077> when 'true' ->
										    primop 'match_fail'
											({'function_clause',_12635})
										-| ['compiler_generated'] )
									    end
									in  let <_cor123> =
										case _13123 of
										  <'false'> when 'true' ->
										      {'c_tuple',[],_12635}
										  <'true'> when 'true' ->
										      let <_2541> =
											  %% Line 4502
											  case _12635 of
											    <[{'c_literal',_fol1119,_17062}|Es]> when 'true' ->
												let <_978> =
												    %% Line 4503
												    apply 'lit_list_vals'/1
													(Es)
												in  %% Line 4503
												    [_17062|_978]
											    %% Line 4504
											    <[]> when 'true' ->
												%% Line 4505
												[]
											    ( <_cor2> when 'true' ->
												  primop 'match_fail'
												      ({'function_clause',_12635})
											      -| ['compiler_generated'] )
											  end
										      in  let <_cor2> =
											      call 'erlang':'list_to_tuple'
												  (_2541)
											  in  {'c_literal',[],_cor2}
										  ( <_fol1120> when 'true' ->
											primop 'match_fail'
											    ({'case_clause',_13123})
										    -| ['compiler_generated'] )
										end
									    in  let <_cor124> =
										    %% Line 4466
										    apply 'lc$^1'/1
											(_cor118)
										in  ( [_cor123|_cor124]
										      -| ['compiler_generated'] )
							( <[_cor117|_cor118]> when 'true' ->
							      %% Line 4466
							      apply 'lc$^1'/1
								  (_cor118)
							  -| ['compiler_generated'] )
							<[]> when 'true' ->
							    []
							( <_22225> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_cor120})
								-| [{'function_name',{'lc$^1',1}}] )
							  -| ['compiler_generated'] )
						      end
					  in  apply 'lc$^1'/1
						  (_cor5)
					  -| ['list_comprehension'] )
				    in  let <_cor126> =
					    apply 'ann_make_list'/3
						([], _cor125, 'none')
					in  let <_cor135> =
						%% Line 4467
						( letrec
						      'lc$^2'/1 =
							  fun (_cor130) ->
							      case _cor130 of
								<[%% Line 4468
								  {N,F}|_cor128]> when 'true' ->
								    let <_cor131> =
									apply 'meta'/1
									    (N)
								    in  let <_cor132> =
									    apply 'meta'/1
										(F)
									in  let <_20798> =
										[_cor131|[_cor132|[]]]
									    in  let <_13123> =
										    %% Line 4495
										    case _20798 of
										      <[{'c_literal',_cor2,_fol1125}|Es]> when 'true' ->
											  %% Line 4496
											  apply 'is_lit_list'/1
											      (Es)
										      %% Line 4497
										      <[_fol1126|_fol1127]> when 'true' ->
											  %% Line 4498
											  'false'
										      %% Line 4499
										      <[]> when 'true' ->
											  %% Line 4500
											  'true'
										      ( <_6639> when 'true' ->
											    primop 'match_fail'
												({'function_clause',_20798})
											-| ['compiler_generated'] )
										    end
										in  let <_cor133> =
											case _13123 of
											  <'false'> when 'true' ->
											      {'c_tuple',[],_20798}
											  <'true'> when 'true' ->
											      let <_20470> =
												  %% Line 4502
												  case _20798 of
												    <[{'c_literal',_fol1128,V}|Es]> when 'true' ->
													let <_22429> =
													    %% Line 4503
													    apply 'lit_list_vals'/1
														(Es)
													in  %% Line 4503
													    [V|_22429]
												    %% Line 4504
												    <[]> when 'true' ->
													%% Line 4505
													[]
												    ( <_cor2> when 'true' ->
													  primop 'match_fail'
													      ({'function_clause',_20798})
												      -| ['compiler_generated'] )
												  end
											      in  let <_cor2> =
												      call 'erlang':'list_to_tuple'
													  (_20470)
												  in  {'c_literal',[],_cor2}
											  ( <_fol1129> when 'true' ->
												primop 'match_fail'
												    ({'case_clause',_13123})
											    -| ['compiler_generated'] )
											end
										    in  let <_cor134> =
											    %% Line 4468
											    apply 'lc$^2'/1
												(_cor128)
											in  ( [_cor133|_cor134]
											      -| ['compiler_generated'] )
								( <[_cor127|_cor128]> when 'true' ->
								      %% Line 4468
								      apply 'lc$^2'/1
									  (_cor128)
								  -| ['compiler_generated'] )
								<[]> when 'true' ->
								    []
								( <_21039> when 'true' ->
								      ( primop 'match_fail'
									    ({'function_clause',_cor130})
									-| [{'function_name',{'lc$^2',1}}] )
								  -| ['compiler_generated'] )
							      end
						  in  apply 'lc$^2'/1
							  (_cor6)
						  -| ['list_comprehension'] )
					    in  let <_cor136> =
						    apply 'ann_make_list'/3
							([], _cor135, 'none')
						in  %% Line 4462
						    apply 'meta_call'/2
							('c_module', %% Line 4463
								     [_cor113|%% Line 4464
									      [_cor116|%% Line 4465
										       [_cor126|%% Line 4467
												[_cor136|%% Line 4468
													 []]]]])
		    -| ['compiler_generated'] )
		  ( <_cor7> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','c_module'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor138,_cor137> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'meta_1',2}}] )
	    -| ['compiler_generated'] )
	end
'meta_call'/2 =
    %% Line 4470
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    case _cor1 of
	      <Name>
		  when call 'erlang':'is_atom'
			(_cor1) ->
		  {'c_literal',[],_cor1}
	      <Name> when 'true' ->
		  let <_18048> =
		      call 'erlang':'list_to_atom'
			  (_cor1)
		  in  {'c_literal',[],_18048}
	    end
	in  {'c_call',[],{'c_literal',[],'cerl'},_cor2,_cor0}
'meta_list'/1 =
    %% Line 4473
    fun (_cor0) ->
	case _cor0 of
	  <[T|Ts]> when 'true' ->
	      let <_cor1> =
		  %% Line 4474
		  apply 'meta'/1
		      (T)
	      in  let <_cor2> =
		      %% Line 4474
		      apply 'meta_list'/1
			  (Ts)
		  in  %% Line 4474
		      [_cor1|_cor2]
	  %% Line 4475
	  <[]> when 'true' ->
	      %% Line 4476
	      []
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'meta_list',1}}] )
	    -| ['compiler_generated'] )
	end
'split_list'/2 =
    %% Line 4481
    fun (_cor1,_cor0) ->
	let <A> =
	    call 'erlang':'element'
		(2, _cor1)
	in  %% Line 4483
	    case apply 'type'/1
		     (_cor1) of
	      %% Line 4484
	      <'cons'>
		  when call 'erlang':'=:='
			(A,
			 []) ->
		  let <_cor4> =
		      %% Line 4485
		      apply 'cons_tl'/1
			  (_cor1)
		  in  let <_cor3> =
			  %% Line 4485
			  apply 'cons_hd'/1
			      (_cor1)
		      in  %% Line 4485
			  apply 'split_list'/2
			      (_cor4, [_cor3|_cor0])
	      %% Line 4486
	      <_cor9> when 'true' ->
		  let <_cor5> =
		      %% Line 4487
		      call 'lists':'reverse'
			  (_cor0)
		  in  %% Line 4487
		      {_cor5,_cor1}
	    end
'is_lit_list'/1 =
    %% Line 4495
    fun (_cor0) ->
	case _cor0 of
	  <[{'c_literal',_cor2,_cor3}|Es]> when 'true' ->
	      %% Line 4496
	      apply 'is_lit_list'/1
		  (Es)
	  %% Line 4497
	  <[_cor4|_cor5]> when 'true' ->
	      %% Line 4498
	      'false'
	  %% Line 4499
	  <[]> when 'true' ->
	      %% Line 4500
	      'true'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'is_lit_list',1}}] )
	    -| ['compiler_generated'] )
	end
'lit_list_vals'/1 =
    %% Line 4502
    fun (_cor0) ->
	case _cor0 of
	  <[{'c_literal',_cor3,V}|Es]> when 'true' ->
	      let <_cor1> =
		  %% Line 4503
		  apply 'lit_list_vals'/1
		      (Es)
	      in  %% Line 4503
		  [V|_cor1]
	  %% Line 4504
	  <[]> when 'true' ->
	      %% Line 4505
	      []
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'lit_list_vals',1}}] )
	    -| ['compiler_generated'] )
	end
'make_lit_list'/1 =
    %% Line 4509
    fun (_cor0) ->
	case _cor0 of
	  <[V|Vs]> when 'true' ->
	      let <_cor1> =
		  %% Line 4510
		  apply 'make_lit_list'/1
		      (Vs)
	      in  %% Line 4510
		  [{'c_literal',[],V}|_cor1]
	  %% Line 4511
	  <[]> when 'true' ->
	      %% Line 4512
	      []
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'make_lit_list',1}}] )
	    -| ['compiler_generated'] )
	end
'is_print_char_value'/1 =
    %% Line 4520
    fun (_cor0) ->
	case _cor0 of
	  <V>
	      when let <_cor1> =
		    call 'erlang':'>='
			(_cor0, 32)
		in  let <_cor2> =
			call 'erlang':'=<'
			    (_cor0, 126)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      'true'
	  %% Line 4521
	  <V>
	      when let <_cor3> =
		    call 'erlang':'>='
			(_cor0, 160)
		in  let <_cor4> =
			call 'erlang':'=<'
			    (_cor0, 255)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      'true'
	  %% Line 4522
	  <V>
	      when call 'erlang':'=:='
		    (_cor0,
		     8) ->
	      'true'
	  %% Line 4523
	  <V>
	      when call 'erlang':'=:='
		    (_cor0,
		     127) ->
	      'true'
	  %% Line 4524
	  <V>
	      when call 'erlang':'=:='
		    (_cor0,
		     27) ->
	      'true'
	  %% Line 4525
	  <V>
	      when call 'erlang':'=:='
		    (_cor0,
		     12) ->
	      'true'
	  %% Line 4526
	  <V>
	      when call 'erlang':'=:='
		    (_cor0,
		     10) ->
	      'true'
	  %% Line 4527
	  <V>
	      when call 'erlang':'=:='
		    (_cor0,
		     13) ->
	      'true'
	  %% Line 4528
	  <V>
	      when call 'erlang':'=:='
		    (_cor0,
		     32) ->
	      'true'
	  %% Line 4529
	  <V>
	      when call 'erlang':'=:='
		    (_cor0,
		     9) ->
	      'true'
	  %% Line 4530
	  <V>
	      when call 'erlang':'=:='
		    (_cor0,
		     11) ->
	      'true'
	  %% Line 4531
	  <V>
	      when call 'erlang':'=:='
		    (_cor0,
		     34) ->
	      'true'
	  %% Line 4532
	  <V>
	      when call 'erlang':'=:='
		    (_cor0,
		     39) ->
	      'true'
	  %% Line 4533
	  <V>
	      when call 'erlang':'=:='
		    (_cor0,
		     92) ->
	      'true'
	  %% Line 4534
	  <_cor6> when 'true' ->
	      'false'
	end
'is_char_list'/1 =
    %% Line 4536
    fun (_cor0) ->
	case _cor0 of
	  <[V|Vs]>
	      when call 'erlang':'is_integer'
		    (V) ->
	      let <_15635> =
		  case V of
		    <_23360>
			when let <_cor1> =
			      call 'erlang':'>='
				  (V, 0)
			  in  let <_cor2> =
				  call 'erlang':'=<'
				      (V, 255)
			      in  call 'erlang':'and'
				      (_cor1, _cor2) ->
			'true'
		    <_cor4> when 'true' ->
			'false'
		  end
	      in  %% Line 4537
		  ( case _15635 of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    apply 'is_char_list'/1
				(Vs)
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    'false'
			-| ['compiler_generated'] )
		      ( <_cor1> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_15635}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 4538
	  <[]> when 'true' ->
	      %% Line 4539
	      'true'
	  %% Line 4540
	  <_cor4> when 'true' ->
	      %% Line 4541
	      'false'
	end
'is_print_char_list'/1 =
    %% Line 4543
    fun (_cor0) ->
	case _cor0 of
	  <[V|Vs]>
	      when call 'erlang':'is_integer'
		    (V) ->
	      let <_19596> =
		  %% Line 4544
		  apply 'is_print_char_value'/1
		      (V)
	      in  %% Line 4544
		  ( case _19596 of
		      ( <( 'true'
			   -| ['compiler_generated'] )> when 'true' ->
			    apply 'is_print_char_list'/1
				(Vs)
			-| ['compiler_generated'] )
		      ( <( 'false'
			   -| ['compiler_generated'] )> when 'true' ->
			    'false'
			-| ['compiler_generated'] )
		      ( <_cor1> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {( 'badarg'
					-| ['compiler_generated'] ),_19596}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 4545
	  <[]> when 'true' ->
	      %% Line 4546
	      'true'
	  %% Line 4547
	  <_cor4> when 'true' ->
	      %% Line 4548
	      'false'
	end
'unfold_tuples'/1 =
    %% Line 4550
    fun (_cor0) ->
	case _cor0 of
	  <[{X,Y}|Ps]> when 'true' ->
	      let <_cor1> =
		  %% Line 4551
		  apply 'unfold_tuples'/1
		      (Ps)
	      in  %% Line 4551
		  [X|[Y|_cor1]]
	  %% Line 4552
	  <[]> when 'true' ->
	      %% Line 4553
	      []
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'unfold_tuples',1}}] )
	    -| ['compiler_generated'] )
	end
'fold_tuples'/1 =
    %% Line 4555
    fun (_cor0) ->
	case _cor0 of
	  <[X|[Y|Es]]> when 'true' ->
	      let <_cor1> =
		  %% Line 4556
		  apply 'fold_tuples'/1
		      (Es)
	      in  %% Line 4556
		  [{X,Y}|_cor1]
	  %% Line 4557
	  <[]> when 'true' ->
	      %% Line 4558
	      []
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'fold_tuples',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('cerl')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('cerl', _cor0)
end