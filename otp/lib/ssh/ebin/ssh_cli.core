module 'ssh_cli' ['handle_msg'/2,
		  'handle_ssh_msg'/2,
		  'init'/1,
		  'module_info'/0,
		  'module_info'/1,
		  'terminate'/2]
    attributes [%% Line 27
		'behaviour' =
		    %% Line 27
		    ['ssh_daemon_channel'],
		%% Line 64
		'type' =
		    %% Line 64
		    [{{'record','ssh'},[{'record_field',68,{'atom',68,'role'}}|[{'record_field',69,{'atom',69,'peer'}}|[{'record_field',71,{'atom',71,'c_vsn'}}|[{'record_field',72,{'atom',72,'s_vsn'}}|[{'record_field',74,{'atom',74,'c_version'}}|[{'record_field',75,{'atom',75,'s_version'}}|[{'record_field',77,{'atom',77,'c_keyinit'}}|[{'record_field',78,{'atom',78,'s_keyinit'}}|[{'record_field',80,{'atom',80,'algorithms'}}|[{'record_field',82,{'atom',82,'kex'}}|[{'record_field',83,{'atom',83,'hkey'}}|[{'record_field',84,{'atom',84,'key_cb'}}|[{'record_field',85,{'atom',85,'io_cb'}}|[{'record_field',87,{'atom',87,'send_mac'},{'atom',87,'none'}}|[{'record_field',88,{'atom',88,'send_mac_key'}}|[{'record_field',89,{'atom',89,'send_mac_size'},{'integer',89,0}}|[{'record_field',91,{'atom',91,'recv_mac'},{'atom',91,'none'}}|[{'record_field',92,{'atom',92,'recv_mac_key'}}|[{'record_field',93,{'atom',93,'recv_mac_size'},{'integer',93,0}}|[{'record_field',95,{'atom',95,'encrypt'},{'atom',95,'none'}}|[{'record_field',96,{'atom',96,'encrypt_keys'}}|[{'record_field',97,{'atom',97,'encrypt_block_size'},{'integer',97,8}}|[{'record_field',98,{'atom',98,'encrypt_ctx'}}|[{'record_field',100,{'atom',100,'decrypt'},{'atom',100,'none'}}|[{'record_field',101,{'atom',101,'decrypt_keys'}}|[{'record_field',102,{'atom',102,'decrypt_block_size'},{'integer',102,8}}|[{'record_field',103,{'atom',103,'decrypt_ctx'}}|[{'record_field',105,{'atom',105,'compress'},{'atom',105,'none'}}|[{'record_field',106,{'atom',106,'compress_ctx'}}|[{'record_field',107,{'atom',107,'decompress'},{'atom',107,'none'}}|[{'record_field',108,{'atom',108,'decompress_ctx'}}|[{'record_field',110,{'atom',110,'c_lng'},{'atom',110,'none'}}|[{'record_field',111,{'atom',111,'s_lng'},{'atom',111,'none'}}|[{'record_field',113,{'atom',113,'user_ack'},{'atom',113,'true'}}|[{'record_field',114,{'atom',114,'timeout'},{'atom',114,'infinity'}}|[{'record_field',116,{'atom',116,'shared_secret'}}|[{'record_field',117,{'atom',117,'exchanged_hash'}}|[{'record_field',118,{'atom',118,'session_id'}}|[{'record_field',120,{'atom',120,'opts'},{'nil',120}}|[{'record_field',121,{'atom',121,'send_sequence'},{'integer',121,0}}|[{'record_field',122,{'atom',122,'recv_sequence'},{'integer',122,0}}|[{'record_field',123,{'atom',123,'keyex_key'}}|[{'record_field',124,{'atom',124,'keyex_info'}}|[{'record_field',127,{'atom',127,'user'}}|[{'record_field',128,{'atom',128,'service'}}|[{'record_field',129,{'atom',129,'userauth_quiet_mode'}}|[{'record_field',130,{'atom',130,'userauth_supported_methods'}}|[{'record_field',131,{'atom',131,'userauth_methods'}}|[{'record_field',132,{'atom',132,'userauth_preference'}}|[{'record_field',133,{'atom',133,'available_host_keys'}}|[{'record_field',134,{'atom',134,'authenticated'},{'atom',134,'false'}}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 137
		'type' =
		    %% Line 137
		    [{{'record','alg'},[{'record_field',139,{'atom',139,'kex'}}|[{'record_field',140,{'atom',140,'hkey'}}|[{'record_field',141,{'atom',141,'send_mac'}}|[{'record_field',142,{'atom',142,'recv_mac'}}|[{'record_field',143,{'atom',143,'encrypt'}}|[{'record_field',144,{'atom',144,'decrypt'}}|[{'record_field',145,{'atom',145,'compress'}}|[{'record_field',146,{'atom',146,'decompress'}}|[{'record_field',147,{'atom',147,'c_lng'}}|[{'record_field',148,{'atom',148,'s_lng'}}]]]]]]]]]],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{{'record','ssh_key'},[{'record_field',153,{'atom',153,'type'}}|[{'record_field',154,{'atom',154,'public'}}|[{'record_field',155,{'atom',155,'private'}}|[{'record_field',156,{'atom',156,'comment'},{'string',156,[]}}]]]],[]}],
		%% Line 159
		'type' =
		    %% Line 159
		    [{{'record','ssh_pty'},[{'record_field',159,{'atom',159,'term'},{'string',159,[]}}|[{'record_field',160,{'atom',160,'width'},{'integer',160,80}}|[{'record_field',161,{'atom',161,'height'},{'integer',161,25}}|[{'record_field',162,{'atom',162,'pixel_width'},{'integer',162,1024}}|[{'record_field',163,{'atom',163,'pixel_height'},{'integer',163,768}}|[{'record_field',164,{'atom',164,'modes'},{'bin',164,[]}}]]]]]],[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'channel_id',{'type',24,'integer',[]},[]}],
		%% Line 55
		'type' =
		    %% Line 55
		    [{{'record','ssh_msg_global_request'},[{'record_field',57,{'atom',57,'name'}}|[{'record_field',58,{'atom',58,'want_reply'}}|[{'record_field',59,{'atom',59,'data'}}]]],[]}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{{'record','ssh_msg_request_success'},[{'record_field',64,{'atom',64,'data'}}],[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{{'record','ssh_msg_request_failure'},[],[]}],
		%% Line 72
		'type' =
		    %% Line 72
		    [{{'record','ssh_msg_channel_open'},[{'record_field',74,{'atom',74,'channel_type'}}|[{'record_field',75,{'atom',75,'sender_channel'}}|[{'record_field',76,{'atom',76,'initial_window_size'}}|[{'record_field',77,{'atom',77,'maximum_packet_size'}}|[{'record_field',78,{'atom',78,'data'}}]]]]],[]}],
		%% Line 81
		'type' =
		    %% Line 81
		    [{{'record','ssh_msg_channel_open_confirmation'},[{'record_field',83,{'atom',83,'recipient_channel'}}|[{'record_field',84,{'atom',84,'sender_channel'}}|[{'record_field',85,{'atom',85,'initial_window_size'}}|[{'record_field',86,{'atom',86,'maximum_packet_size'}}|[{'record_field',87,{'atom',87,'data'}}]]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','ssh_msg_channel_open_failure'},[{'record_field',103,{'atom',103,'recipient_channel'}}|[{'record_field',104,{'atom',104,'reason'}}|[{'record_field',105,{'atom',105,'description'}}|[{'record_field',106,{'atom',106,'lang'}}]]]],[]}],
		%% Line 110
		'type' =
		    %% Line 110
		    [{{'record','ssh_msg_channel_window_adjust'},[{'record_field',112,{'atom',112,'recipient_channel'}}|[{'record_field',113,{'atom',113,'bytes_to_add'}}]],[]}],
		%% Line 116
		'type' =
		    %% Line 116
		    [{{'record','ssh_msg_channel_data'},[{'record_field',118,{'atom',118,'recipient_channel'}}|[{'record_field',119,{'atom',119,'data'}}]],[]}],
		%% Line 129
		'type' =
		    %% Line 129
		    [{{'record','ssh_msg_channel_extended_data'},[{'record_field',131,{'atom',131,'recipient_channel'}}|[{'record_field',132,{'atom',132,'data_type_code'}}|[{'record_field',133,{'atom',133,'data'}}]]],[]}],
		%% Line 136
		'type' =
		    %% Line 136
		    [{{'record','ssh_msg_channel_eof'},[{'record_field',138,{'atom',138,'recipient_channel'}}],[]}],
		%% Line 141
		'type' =
		    %% Line 141
		    [{{'record','ssh_msg_channel_close'},[{'record_field',143,{'atom',143,'recipient_channel'}}],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{{'record','ssh_msg_channel_request'},[{'record_field',149,{'atom',149,'recipient_channel'}}|[{'record_field',150,{'atom',150,'request_type'}}|[{'record_field',151,{'atom',151,'want_reply'}}|[{'record_field',152,{'atom',152,'data'}}]]]],[]}],
		%% Line 156
		'type' =
		    %% Line 156
		    [{{'record','ssh_msg_channel_success'},[{'record_field',158,{'atom',158,'recipient_channel'}}],[]}],
		%% Line 162
		'type' =
		    %% Line 162
		    [{{'record','ssh_msg_channel_failure'},[{'record_field',164,{'atom',164,'recipient_channel'}}],[]}],
		%% Line 235
		'type' =
		    %% Line 235
		    [{{'record','channel'},[{'record_field',237,{'atom',237,'type'}}|[{'record_field',238,{'atom',238,'sys'}}|[{'record_field',239,{'atom',239,'user'}}|[{'record_field',240,{'atom',240,'flow_control'}}|[{'record_field',242,{'atom',242,'local_id'}}|[{'record_field',244,{'atom',244,'recv_window_size'}}|[{'record_field',245,{'atom',245,'recv_packet_size'}}|[{'record_field',246,{'atom',246,'recv_close'},{'atom',246,'false'}}|[{'record_field',248,{'atom',248,'remote_id'}}|[{'record_field',249,{'atom',249,'send_window_size'}}|[{'record_field',250,{'atom',250,'send_packet_size'}}|[{'record_field',251,{'atom',251,'sent_close'},{'atom',251,'false'}}|[{'record_field',252,{'atom',252,'send_buf'},{'nil',252}}]]]]]]]]]]]]],[]}],
		%% Line 255
		'type' =
		    %% Line 255
		    [{{'record','connection'},[{'record_field',256,{'atom',256,'requests'},{'nil',256}}|[{'record_field',257,{'atom',257,'channel_cache'}}|[{'record_field',258,{'atom',258,'port_bindings'}}|[{'record_field',259,{'atom',259,'channel_id_seed'}}|[{'record_field',260,{'atom',260,'cli_spec'}}|[{'record_field',261,{'atom',261,'address'}}|[{'record_field',262,{'atom',262,'port'}}|[{'record_field',263,{'atom',263,'options'}}|[{'record_field',264,{'atom',264,'exec'}}|[{'record_field',265,{'atom',265,'system_supervisor'}}|[{'record_field',266,{'atom',266,'sub_system_supervisor'}}|[{'record_field',267,{'atom',267,'connection_supervisor'}}]]]]]]]]]]]],[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{{'record','state'},[{'record_field',37,{'atom',37,'cm'}}|[{'record_field',38,{'atom',38,'channel'}}|[{'record_field',39,{'atom',39,'pty'}}|[{'record_field',40,{'atom',40,'group'}}|[{'record_field',41,{'atom',41,'buf'}}|[{'record_field',42,{'atom',42,'shell'}}|[{'record_field',43,{'atom',43,'exec'}}]]]]]]],[]}]]
'init'/1 =
    %% Line 55
    fun (_cor0) ->
	case _cor0 of
	  <[Shell|[Exec|[]]]> when 'true' ->
	      %% Line 56
	      {'ok',{'state','undefined','undefined','undefined','undefined','undefined',Shell,Exec}}
	  %% Line 57
	  <[Shell|[]]> when 'true' ->
	      %% Line 58
	      {'ok',{'state','undefined','undefined','undefined','undefined','undefined',Shell,'undefined'}}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'init',1}}] )
	    -| ['compiler_generated'] )
	end
'handle_ssh_msg'/2 =
    %% Line 65
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'ssh_cm',_X_ConnectionHandler,%% Line 66
					  {'data',_X_ChannelId,_X_Type,Data}},State = %% Line 67
										      {'state',_cor41,_cor42,_cor43,Group,_cor44,_cor45,_cor46}> when 'true' ->
	      let <List> =
		  %% Line 68
		  call 'erlang':'binary_to_list'
		      (Data)
	      in  do  %% Line 69
		      apply 'to_group'/2
			  (List, Group)
		      %% Line 70
		      {'ok',State}
	  %% Line 72
	  <{'ssh_cm',ConnectionHandler,%% Line 73
				       {'pty',ChannelId,WantReply,%% Line 74
								  {TermName,Width,Height,PixWidth,PixHeight,Modes}}},%% Line 75
														     State0> when 'true' ->
	      let <_cor4> =
		  %% Line 78
		  apply 'not_zero'/2
		      (Width, 80)
	      in  let <_cor3> =
		      %% Line 79
		      apply 'not_zero'/2
			  (Height, 24)
		  in  let <_rec0> =
			  %% Line 77
			  {'ssh_pty',TermName,_cor4,_cor3,%% Line 80
							  PixWidth,%% Line 81
								   PixHeight,%% Line 82
									     Modes}
		      in  let <_rec1> =
			      %% Line 83
			      apply 'empty_buf'/0
				  ()
			  in  %% Line 76
			      case State0 of
				<{'state',_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53}> when 'true' ->
				    let <_cor8> =
					%% Line 83
					call 'erlang':'setelement'
					    (6, State0, _rec1)
				    in  let <_cor10> =
					    call 'erlang':'setelement'
						(4, _cor8, _rec0)
					in  do  %% Line 84
						apply 'set_echo'/1
						    (_cor10)
						do  %% Line 85
						    call 'ssh_connection':'reply_request'
							(ConnectionHandler, WantReply, %% Line 86
										       'success', %% Line 86
												  ChannelId)
						    %% Line 87
						    {'ok',_cor10}
				( <_cor54> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','state'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
	  %% Line 89
	  <{'ssh_cm',ConnectionHandler,%% Line 90
				       {'env',ChannelId,WantReply,_X_Var,_X_Value}},%% Line 90
										    State> when 'true' ->
	      do  %% Line 91
		  call 'ssh_connection':'reply_request'
		      (ConnectionHandler, %% Line 92
					  WantReply, %% Line 92
						     'failure', %% Line 92
								ChannelId)
		  %% Line 93
		  {'ok',State}
	  %% Line 95
	  <{'ssh_cm',ConnectionHandler,%% Line 96
				       {'window_change',ChannelId,Width,Height,PixWidth,PixHeight}},State = %% Line 97
													    {'state',_cor55,_cor56,Pty0,_cor57,Buf,_cor58,_cor59}> when 'true' ->
	      %% Line 100
	      case Pty0 of
		<{'ssh_pty',%% Line 159
			    _rec4,%% Line 160
				  _rec5,%% Line 161
					_rec6,%% Line 162
					      _rec7,%% Line 163
						    _rec8,%% Line 164
							  _rec9}> when 'true' ->
		    let <_cor14> =
			{'ssh_pty',%% Line 159
				   _rec4,Width,Height,PixWidth,PixHeight,%% Line 164
									 _rec9}
		    in  %% Line 101
			case apply 'io_request'/3
				 ({'window_change',Pty0}, Buf, _cor14) of
			  <{Chars,NewBuf}> when 'true' ->
			      do  %% Line 102
				  apply 'write_chars'/3
				      (ConnectionHandler, ChannelId, Chars)
				  let <_cor18> =
				      %% Line 103
				      call 'erlang':'setelement'
					  (6, State, NewBuf)
				  in  let <_cor20> =
					  %% Line 103
					  call 'erlang':'setelement'
					      (4, _cor18, _cor14)
				      in  %% Line 103
					  {'ok',_cor20}
			  ( <_cor16> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor16})
			    -| ['compiler_generated'] )
			end
		( <_cor60> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','ssh_pty'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 105
	  <{'ssh_cm',ConnectionHandler,%% Line 106
				       {'shell',ChannelId,WantReply}},%% Line 106
								      State> when 'true' ->
	      let <NewState> =
		  %% Line 107
		  apply 'start_shell'/2
		      (ConnectionHandler, State)
	      in  do  %% Line 108
		      call 'ssh_connection':'reply_request'
			  (ConnectionHandler, WantReply, %% Line 109
							 'success', %% Line 109
								    ChannelId)
		      %% Line 111
		      case NewState of
			<{'state',_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75}> when 'true' ->
			    let <_cor23> =
				call 'erlang':'setelement'
				    (3, NewState, ChannelId)
			    in  let <_cor25> =
				    call 'erlang':'setelement'
					(2, _cor23, ConnectionHandler)
				in  {'ok',_cor25}
			( <_cor76> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 113
	  <{'ssh_cm',ConnectionHandler,%% Line 114
				       {'exec',ChannelId,WantReply,Cmd}},State = %% Line 114
										 {'state',_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,'undefined'}> when 'true' ->
	      %% Line 115
	      case apply 'exec'/1
		       (Cmd) of
		<{Reply,Status}> when 'true' ->
		    let <_cor27> =
			%% Line 117
			call 'io_lib':'format'
			    ([126|[112|[10]]], [Reply|[]])
		    in  do  %% Line 116
			    apply 'write_chars'/3
				(ConnectionHandler, %% Line 117
						    ChannelId, _cor27)
			    do  %% Line 118
				call 'ssh_connection':'reply_request'
				    (ConnectionHandler, WantReply, %% Line 119
								   'success', %% Line 119
									      ChannelId)
				do  %% Line 120
				    call 'ssh_connection':'exit_status'
					(ConnectionHandler, ChannelId, Status)
				    do  %% Line 121
					call 'ssh_connection':'send_eof'
					    (ConnectionHandler, ChannelId)
					let <_cor29> =
					    %% Line 122
					    call 'erlang':'setelement'
						(3, State, ChannelId)
					in  let <_cor31> =
						%% Line 122
						call 'erlang':'setelement'
						    (2, _cor29, ConnectionHandler)
					    in  %% Line 122
						{'stop',ChannelId,_cor31}
		( <_cor26> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor26})
		  -| ['compiler_generated'] )
	      end
	  %% Line 123
	  <{'ssh_cm',ConnectionHandler,%% Line 124
				       {'exec',ChannelId,WantReply,Cmd}},%% Line 124
									 State> when 'true' ->
	      let <NewState> =
		  %% Line 125
		  apply 'start_shell'/3
		      (ConnectionHandler, Cmd, State)
	      in  do  %% Line 126
		      call 'ssh_connection':'reply_request'
			  (ConnectionHandler, WantReply, %% Line 127
							 'success', %% Line 127
								    ChannelId)
		      %% Line 129
		      case NewState of
			<{'state',_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97}> when 'true' ->
			    let <_cor34> =
				call 'erlang':'setelement'
				    (3, NewState, ChannelId)
			    in  let <_cor36> =
				    call 'erlang':'setelement'
					(2, _cor34, ConnectionHandler)
				in  {'ok',_cor36}
			( <_cor98> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 131
	  <{'ssh_cm',_X_ConnectionHandler,{'eof',_X_ChannelId}},State> when 'true' ->
	      %% Line 132
	      {'ok',State}
	  %% Line 134
	  <{'ssh_cm',_cor99,{'signal',_cor100,_cor101}},State> when 'true' ->
	      %% Line 136
	      {'ok',State}
	  %% Line 138
	  <{'ssh_cm',_cor102,{'exit_signal',ChannelId,_cor103,Error,_cor104}},State> when 'true' ->
	      let <Report> =
		  %% Line 139
		  call 'io_lib':'format'
		      ([67|[111|[110|[110|[101|[99|[116|[105|[111|[110|[32|[99|[108|[111|[115|[101|[100|[32|[98|[121|[32|[112|[101|[101|[114|[32|[126|[110|[32|[69|[114|[114|[111|[114|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 140
																														       [Error|[]])
	      in  do  %% Line 141
		      call 'error_logger':'error_report'
			  (Report)
		      %% Line 142
		      {'stop',ChannelId,State}
	  %% Line 144
	  <{'ssh_cm',_cor105,{'exit_status',ChannelId,0}},State> when 'true' ->
	      %% Line 145
	      {'stop',ChannelId,State}
	  %% Line 147
	  <{'ssh_cm',_cor106,{'exit_status',ChannelId,Status}},State> when 'true' ->
	      let <Report> =
		  %% Line 149
		  call 'io_lib':'format'
		      ([67|[111|[110|[110|[101|[99|[116|[105|[111|[110|[32|[99|[108|[111|[115|[101|[100|[32|[98|[121|[32|[112|[101|[101|[114|[32|[126|[110|[32|[83|[116|[97|[116|[117|[115|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 150
																															    [Status|[]])
	      in  do  %% Line 151
		      call 'error_logger':'error_report'
			  (Report)
		      %% Line 152
		      {'stop',ChannelId,State}
	  ( <_cor40,_cor39> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor40,_cor39})
		  -| [{'function_name',{'handle_ssh_msg',2}}] )
	    -| ['compiler_generated'] )
	end
'handle_msg'/2 =
    %% Line 159
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'ssh_channel_up',ChannelId,ConnectionHandler},State = %% Line 160
								  {'state',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}>
	      when let <_cor20> =
		    call 'erlang':'=:='
			(_cor13, %% Line 161
				 ConnectionHandler)
		in  let <_cor21> =
			call 'erlang':'=:='
			    (_cor14, %% Line 160
				     ChannelId)
		    in  call 'erlang':'and'
			    (_cor20, _cor21) ->
	      %% Line 162
	      {'ok',State}
	  %% Line 164
	  <{Group,'set_unicode_state',_X_Arg},State> when 'true' ->
	      let <_cor2> =
		  %% Line 165
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 165
		      call 'erlang':'!'
			  (Group, {_cor2,'set_unicode_state','false'})
		      %% Line 166
		      {'ok',State}
	  %% Line 168
	  <{Group,'get_unicode_state'},State> when 'true' ->
	      let <_cor3> =
		  %% Line 169
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 169
		      call 'erlang':'!'
			  (Group, {_cor3,'get_unicode_state','false'})
		      %% Line 170
		      {'ok',State}
	  %% Line 172
	  <{Group,'tty_geometry'},State = {'state',_cor22,_cor23,%% Line 173
								 Pty,_cor24,_cor25,_cor26,_cor27}>
	      when call 'erlang':'=:='
		    (_cor24,
		     Group) ->
	      do  %% Line 175
		  case Pty of
		    %% Line 176
		    <{'ssh_pty',_cor28,Width,Height,_cor29,_cor30,_cor31}> when 'true' ->
			let <_cor4> =
			    %% Line 177
			    call 'erlang':'self'
				()
			in  %% Line 177
			    call 'erlang':'!'
				(Group, {_cor4,'tty_geometry',{Width,Height}})
		    %% Line 178
		    <_cor32> when 'true' ->
			let <_cor5> =
			    %% Line 184
			    call 'erlang':'self'
				()
			in  %% Line 184
			    call 'erlang':'!'
				(Group, {_cor5,'tty_geometry',{0,0}})
		  end
		  %% Line 186
		  {'ok',State}
	  %% Line 188
	  <{Group,Req},State = {'state',%% Line 189
					ConnectionHandler,%% Line 190
							  ChannelId,Pty,_cor33,Buf,_cor34,_cor35}>
	      when call 'erlang':'=:='
		    (_cor33,
		     Group) ->
	      %% Line 191
	      case apply 'io_request'/3
		       (Req, Buf, Pty) of
		<{Chars,NewBuf}> when 'true' ->
		    do  %% Line 192
			apply 'write_chars'/3
			    (ConnectionHandler, ChannelId, Chars)
			let <_cor10> =
			    %% Line 193
			    call 'erlang':'setelement'
				(6, State, NewBuf)
			in  %% Line 193
			    {'ok',_cor10}
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 195
	  <{'EXIT',Group,_X_Reason},State = {'state',_cor44,%% Line 196
							    ChannelId,_cor45,_cor46,_cor47,_cor48,_cor49}>
	      when call 'erlang':'=:='
		    (_cor46,
		     Group) ->
	      %% Line 197
	      {'stop',ChannelId,State}
	  %% Line 199
	  <_cor50,State> when 'true' ->
	      %% Line 200
	      {'ok',State}
	end
'terminate'/2 =
    %% Line 206
    fun (_cor1,_cor0) ->
	%% Line 207
	'ok'
'to_group'/2 =
    %% Line 213
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_X_Group> when 'true' ->
	      %% Line 214
	      'ok'
	  %% Line 215
	  <[3|Tail],Group> when 'true' ->
	      do  %% Line 216
		  call 'erlang':'exit'
		      (Group, 'interrupt')
		  %% Line 217
		  apply 'to_group'/2
		      (Tail, Group)
	  %% Line 218
	  <Data,Group> when 'true' ->
	      let <Func> =
		  %% Line 219
		  ( fun (_cor2) ->
			call 'erlang':'/='
			    (_cor2, 3)
		    -| [{'id',{0,0,'-to_group/2-fun-0-'}}] )
	      in  let <_cor7> =
		      %% Line 220
		      case call 'lists':'splitwith'
			       (Func, Data) of
			%% Line 221
			<{[],Right}> when 'true' ->
			    %% Line 222
			    Right
			%% Line 223
			<{Left,Right}> when 'true' ->
			    let <_cor5> =
				%% Line 224
				call 'erlang':'self'
				    ()
			    in  do  %% Line 224
				    call 'erlang':'!'
					(Group, {_cor5,{'data',Left}})
				    %% Line 225
				    Right
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor6})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 227
		      apply 'to_group'/2
			  (_cor7, Group)
	end
'exec'/1 =
    %% Line 229
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 230
	    apply 'scan'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 230
		apply 'parse'/1
		    (_cor1)
	    in  %% Line 230
		case apply 'eval'/1
			 (_cor2) of
		  %% Line 231
		  <{'error',_cor5}> when 'true' ->
		      %% Line 232
		      {_cor0,0}
		  %% Line 233
		  <Term> when 'true' ->
		      %% Line 234
		      Term
		end
'scan'/1 =
    %% Line 237
    fun (_cor0) ->
	%% Line 238
	call 'erl_scan':'string'
	    (_cor0)
'parse'/1 =
    %% Line 240
    fun (_cor0) ->
	case _cor0 of
	  <{'ok',Tokens,_cor2}> when 'true' ->
	      %% Line 241
	      call 'erl_parse':'parse_exprs'
		  (Tokens)
	  %% Line 242
	  <Error> when 'true' ->
	      %% Line 243
	      Error
	end
'eval'/1 =
    %% Line 245
    fun (_cor0) ->
	case _cor0 of
	  <{'ok',Expr_list}> when 'true' ->
	      let <_cor2> =
		  catch
		      let <_cor1> =
			  %% Line 247
			  call 'erl_eval':'new_bindings'
			      ()
		      in  %% Line 246
			  call 'erl_eval':'exprs'
			      (Expr_list, _cor1)
	      in  %% Line 246
		  case _cor2 of
		    %% Line 248
		    <{'value',Value,_X_NewBindings}> when 'true' ->
			%% Line 249
			{Value,0}
		    %% Line 250
		    <{'EXIT',{Error,_cor8}}> when 'true' ->
			%% Line 251
			{Error,-1}
		    %% Line 252
		    <Error> when 'true' ->
			%% Line 253
			{Error,-1}
		  end
	  %% Line 255
	  <Error> when 'true' ->
	      %% Line 256
	      {Error,-1}
	end
'io_request'/3 =
    %% Line 266
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'window_change',OldTty},Buf,Tty> when 'true' ->
	      %% Line 267
	      apply 'window_change'/3
		  (Tty, OldTty, Buf)
	  %% Line 268
	  <{'put_chars',Cs},Buf,Tty> when 'true' ->
	      let <_cor3> =
		  %% Line 269
		  apply 'bin_to_list'/1
		      (Cs)
	      in  %% Line 269
		  apply 'put_chars'/3
		      (_cor3, Buf, Tty)
	  %% Line 270
	  <{'put_chars','unicode',Cs},Buf,Tty> when 'true' ->
	      let <_cor4> =
		  %% Line 271
		  call 'unicode':'characters_to_list'
		      (Cs, 'unicode')
	      in  %% Line 271
		  apply 'put_chars'/3
		      (_cor4, Buf, Tty)
	  %% Line 272
	  <{'insert_chars',Cs},Buf,Tty> when 'true' ->
	      let <_cor5> =
		  %% Line 273
		  apply 'bin_to_list'/1
		      (Cs)
	      in  %% Line 273
		  apply 'insert_chars'/3
		      (_cor5, Buf, Tty)
	  %% Line 274
	  <{'insert_chars','unicode',Cs},Buf,Tty> when 'true' ->
	      let <_cor6> =
		  %% Line 275
		  call 'unicode':'characters_to_list'
		      (Cs, 'unicode')
	      in  %% Line 275
		  apply 'insert_chars'/3
		      (_cor6, Buf, Tty)
	  %% Line 276
	  <{'move_rel',N},Buf,Tty> when 'true' ->
	      %% Line 277
	      apply 'move_rel'/3
		  (N, Buf, Tty)
	  %% Line 278
	  <{'delete_chars',N},Buf,Tty> when 'true' ->
	      %% Line 279
	      apply 'delete_chars'/3
		  (N, Buf, Tty)
	  %% Line 280
	  <'beep',Buf,_X_Tty> when 'true' ->
	      %% Line 281
	      {[7],Buf}
	  %% Line 284
	  <{'get_geometry','columns'},Buf,Tty> when 'true' ->
	      %% Line 285
	      ( case Tty of
		  ( <( {'ssh_pty',_cor14,_rec15,_cor15,_cor16,_cor17,_cor18}
		       -| ['compiler_generated'] )> when 'true' ->
			{'ok',_rec15,Buf}
		    -| ['compiler_generated'] )
		  ( <_cor19> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','ssh_pty'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 286
	  <{'get_geometry','rows'},Buf,Tty> when 'true' ->
	      %% Line 287
	      ( case Tty of
		  ( <( {'ssh_pty',_cor20,_cor21,_rec16,_cor22,_cor23,_cor24}
		       -| ['compiler_generated'] )> when 'true' ->
			{'ok',_rec16,Buf}
		    -| ['compiler_generated'] )
		  ( <_cor25> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','ssh_pty'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 288
	  <{'requests',Rs},Buf,Tty> when 'true' ->
	      %% Line 289
	      apply 'io_requests'/4
		  (Rs, Buf, Tty, [])
	  %% Line 290
	  <'tty_geometry',Buf,Tty> when 'true' ->
	      %% Line 291
	      apply 'io_requests'/4
		  ([{'move_rel',0}|[{'put_chars','unicode',[10]}]], Buf, Tty, [])
	  %% Line 293
	  <_X_R,Buf,_X_Tty> when 'true' ->
	      %% Line 294
	      {[],Buf}
	end
'io_requests'/4 =
    %% Line 296
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[R|Rs],Buf,Tty,Acc> when 'true' ->
	      %% Line 297
	      case apply 'io_request'/3
		       (R, Buf, Tty) of
		<{Chars,NewBuf}> when 'true' ->
		    %% Line 298
		    apply 'io_requests'/4
			(Rs, NewBuf, Tty, [Acc|Chars])
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 299
	  <[],Buf,_X_Tty,Acc> when 'true' ->
	      %% Line 300
	      {Acc,Buf}
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'io_requests',4}}] )
	    -| ['compiler_generated'] )
	end
'ansi_tty'/2 =
    %% Line 304
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 305
	    call 'erlang':'integer_to_list'
		(_cor1)
	in  %% Line 305
	    [[27|[91]]|[_cor2|[_cor0|[]]]]
'get_tty_command'/3 =
    %% Line 307
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'up',N,_X_TerminalType> when 'true' ->
	      %% Line 308
	      apply 'ansi_tty'/2
		  (N, 65)
	  %% Line 309
	  <'down',N,_X_TerminalType> when 'true' ->
	      %% Line 310
	      apply 'ansi_tty'/2
		  (N, 66)
	  %% Line 311
	  <'right',N,_X_TerminalType> when 'true' ->
	      %% Line 312
	      apply 'ansi_tty'/2
		  (N, 67)
	  %% Line 313
	  <'left',N,_X_TerminalType> when 'true' ->
	      %% Line 314
	      apply 'ansi_tty'/2
		  (N, 68)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'get_tty_command',3}}] )
	    -| ['compiler_generated'] )
	end
'conv_buf'/5 =
    %% Line 323
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],AccBuf,AccBufTail,AccWrite,Col> when 'true' ->
	      let <_cor5> =
		  %% Line 324
		  call 'lists':'reverse'
		      (AccWrite)
	      in  %% Line 324
		  {AccBuf,AccBufTail,_cor5,Col}
	  %% Line 325
	  <[13|[10|Rest]],_X_AccBuf,AccBufTail,AccWrite,_X_Col> when 'true' ->
	      let <_cor6> =
		  %% Line 326
		  apply 'tl2'/1
		      (AccBufTail)
	      in  %% Line 326
		  apply 'conv_buf'/5
		      (Rest, [], _cor6, [10|[13|AccWrite]], 0)
	  %% Line 327
	  <[13|Rest],_X_AccBuf,AccBufTail,AccWrite,_X_Col> when 'true' ->
	      let <_cor7> =
		  %% Line 328
		  apply 'tl1'/1
		      (AccBufTail)
	      in  %% Line 328
		  apply 'conv_buf'/5
		      (Rest, [], _cor7, [13|AccWrite], 0)
	  %% Line 329
	  <[10|Rest],_X_AccBuf,AccBufTail,AccWrite,_X_Col> when 'true' ->
	      let <_cor8> =
		  %% Line 330
		  apply 'tl1'/1
		      (AccBufTail)
	      in  %% Line 330
		  apply 'conv_buf'/5
		      (Rest, [], _cor8, [10|[13|AccWrite]], 0)
	  %% Line 331
	  <[C|Rest],AccBuf,AccBufTail,AccWrite,Col> when 'true' ->
	      let <_cor10> =
		  %% Line 332
		  apply 'tl1'/1
		      (AccBufTail)
	      in  let <_cor9> =
		      %% Line 332
		      call 'erlang':'+'
			  (Col, 1)
		  in  %% Line 332
		      apply 'conv_buf'/5
			  (Rest, [C|AccBuf], _cor10, [C|AccWrite], _cor9)
	  ( <_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'conv_buf',5}}] )
	    -| ['compiler_generated'] )
	end
'put_chars'/3 =
    %% Line 337
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Chars,{Buf,BufTail,Col},_X_Tty> when 'true' ->
	      %% Line 338
	      case %% Line 339
		   apply 'conv_buf'/5
		       (Chars, Buf, BufTail, [], Col) of
		<{NewBuf,NewBufTail,WriteBuf,NewCol}> when 'true' ->
		    %% Line 340
		    {WriteBuf,{NewBuf,NewBufTail,NewCol}}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'put_chars',3}}] )
	    -| ['compiler_generated'] )
	end
'insert_chars'/3 =
    %% Line 343
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],{Buf,BufTail,Col},_X_Tty> when 'true' ->
	      %% Line 344
	      {[],{Buf,BufTail,Col}}
	  %% Line 345
	  <Chars,{Buf,BufTail,Col},Tty> when 'true' ->
	      %% Line 346
	      case %% Line 347
		   apply 'conv_buf'/5
		       (Chars, Buf, [], [], Col) of
		<{NewBuf,_X_NewBufTail,WriteBuf,NewCol}> when 'true' ->
		    let <_cor4> =
			%% Line 348
			call 'erlang':'length'
			    (BufTail)
		    in  let <_cor5> =
			    %% Line 348
			    call 'erlang':'+'
				(NewCol, _cor4)
			in  let <M> =
				%% Line 348
				apply 'move_cursor'/3
				    (_cor5, NewCol, Tty)
			    in  %% Line 349
				{[WriteBuf|[BufTail|M]],{NewBuf,BufTail,NewCol}}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'insert_chars',3}}] )
	    -| ['compiler_generated'] )
	end
'delete_chars'/3 =
    %% Line 352
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <0,{Buf,BufTail,Col},_X_Tty> when 'true' ->
	      %% Line 353
	      {[],{Buf,BufTail,Col}}
	  %% Line 354
	  <N,{Buf,BufTail,Col},Tty>
	      when call 'erlang':'>'
		    (N,
		     0) ->
	      let <NewBufTail> =
		  %% Line 355
		  apply 'nthtail'/2
		      (N, BufTail)
	      in  let <_cor4> =
		      %% Line 356
		      call 'erlang':'length'
			  (NewBufTail)
		  in  let <_cor5> =
			  %% Line 356
			  call 'erlang':'+'
			      (Col, _cor4)
		      in  let <_cor6> =
			      %% Line 356
			      call 'erlang':'+'
				  (_cor5, N)
			  in  let <M> =
				  %% Line 356
				  apply 'move_cursor'/3
				      (_cor6, Col, Tty)
			      in  let <_cor8> =
				      %% Line 357
				      call 'lists':'duplicate'
					  (N, 32)
				  in  %% Line 357
				      {[NewBufTail|[_cor8|M]],%% Line 358
							      {Buf,NewBufTail,Col}}
	  %% Line 359
	  <N,{Buf,BufTail,Col},Tty> when 'true' ->
	      let <_cor9> =
		  %% Line 360
		  call 'erlang':'-'
		      (N)
	      in  let <NewBuf> =
		      %% Line 360
		      apply 'nthtail'/2
			  (_cor9, Buf)
		  in  let <_cor12> =
			  %% Line 361
			  case call 'erlang':'+'
				   (Col, N) of
			    <V>
				when call 'erlang':'>='
				      (V,
				       0) ->
				V
			    <_cor24> when 'true' ->
				0
			  end
		      in  let <M1> =
			      %% Line 362
			      apply 'move_cursor'/3
				  (Col, _cor12, Tty)
			  in  let <_cor15> =
				  %% Line 363
				  call 'erlang':'length'
				      (BufTail)
			      in  let <_cor16> =
				      %% Line 363
				      call 'erlang':'+'
					  (_cor12, _cor15)
				  in  let <_cor17> =
					  %% Line 363
					  call 'erlang':'-'
					      (_cor16, N)
				      in  let <M2> =
					      %% Line 363
					      apply 'move_cursor'/3
						  (_cor17, _cor12, Tty)
					  in  let <_cor19> =
						  %% Line 364
						  call 'erlang':'-'
						      (N)
					      in  let <_cor20> =
						      %% Line 364
						      call 'lists':'duplicate'
							  (_cor19, 32)
						  in  %% Line 364
						      {[M1|[BufTail|[_cor20|M2]]],%% Line 365
										  {NewBuf,BufTail,_cor12}}
	  ( <_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21})
		  -| [{'function_name',{'delete_chars',3}}] )
	    -| ['compiler_generated'] )
	end
'window_change'/3 =
    %% Line 369
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Tty = {'ssh_pty',_cor34,_cor35,_cor36,_cor37,_cor38,_cor39},OldTty = {'ssh_pty',_cor40,_cor41,_cor42,_cor43,_cor44,_cor45},Buf>
	      when %% Line 370
		call 'erlang':'=='
		    (_cor41,
		     _cor35) ->
	      %% Line 371
	      {[],Buf}
	  %% Line 372
	  <Tty,OldTty,{Buf,BufTail,Col}> when 'true' ->
	      let <M1> =
		  %% Line 373
		  apply 'move_cursor'/3
		      (Col, 0, OldTty)
	      in  %% Line 374
		  ( case Tty of
		      ( <( {'ssh_pty',_cor46,_rec17,_cor47,_cor48,_cor49,_cor50}
			   -| ['compiler_generated'] )> when 'true' ->
			    ( case OldTty of
				( <( {'ssh_pty',_cor52,_rec18,_cor53,_cor54,_cor55,_cor56}
				     -| ['compiler_generated'] )> when 'true' ->
				      let <_cor21> =
					  call 'erlang':'-'
					      (_rec17, _rec18)
				      in  let <_cor22> =
					      call 'erlang':'max'
						  (_cor21, 0)
					  in  let <N> =
						  call 'erlang':'*'
						      (_cor22, 2)
					      in  let <_cor24> =
						      %% Line 375
						      call 'lists':'duplicate'
							  (N, 32)
						  in  let <S> =
							  %% Line 375
							  call 'lists':'reverse'
							      (Buf, [BufTail|_cor24])
						      in  let <_cor27> =
							      %% Line 376
							      call 'erlang':'length'
								  (Buf)
							  in  let <_cor26> =
								  %% Line 376
								  call 'erlang':'length'
								      (BufTail)
							      in  let <_cor28> =
								      %% Line 376
								      call 'erlang':'+'
									  (_cor27, _cor26)
								  in  let <_cor29> =
									  %% Line 376
									  call 'erlang':'+'
									      (_cor28, N)
								      in  let <M2> =
									      %% Line 376
									      apply 'move_cursor'/3
										  (_cor29, Col, Tty)
									  in  %% Line 377
									      {[M1|[S|M2]],{Buf,BufTail,Col}}
				  -| ['compiler_generated'] )
				( <_cor57> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','ssh_pty'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		      ( <_cor51> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','ssh_pty'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  ( <_cor33,_cor32,_cor31> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor33,_cor32,_cor31})
		  -| [{'function_name',{'window_change',3}}] )
	    -| ['compiler_generated'] )
	end
'step_over'/4 =
    %% Line 380
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <0,Buf,[10|BufTail],Col> when 'true' ->
	      let <_cor4> =
		  %% Line 381
		  call 'erlang':'+'
		      (Col, 1)
	      in  %% Line 381
		  {[10|Buf],BufTail,_cor4}
	  %% Line 382
	  <0,Buf,BufTail,Col> when 'true' ->
	      %% Line 383
	      {Buf,BufTail,Col}
	  %% Line 384
	  <N,[C|Buf],BufTail,Col>
	      when call 'erlang':'<'
		    (N,
		     0) ->
	      let <_cor6> =
		  %% Line 385
		  call 'erlang':'=='
		      (C, 10)
	      in  let <_cor5> =
		      %% Line 385
		      call 'erlang':'+'
			  (N, 1)
		  in  let <N1> =
			  %% Line 385
			  apply 'ifelse'/3
			      (_cor6, N, _cor5)
		      in  let <_cor8> =
			      %% Line 386
			      call 'erlang':'-'
				  (Col, 1)
			  in  %% Line 386
			      apply 'step_over'/4
				  (N1, Buf, [C|BufTail], _cor8)
	  %% Line 387
	  <N,Buf,[C|BufTail],Col>
	      when call 'erlang':'>'
		    (N,
		     0) ->
	      let <_cor10> =
		  %% Line 388
		  call 'erlang':'=='
		      (C, 10)
	      in  let <_cor9> =
		      %% Line 388
		      call 'erlang':'-'
			  (N, 1)
		  in  let <N1> =
			  %% Line 388
			  apply 'ifelse'/3
			      (_cor10, N, _cor9)
		      in  let <_cor12> =
			      %% Line 389
			      call 'erlang':'+'
				  (Col, 1)
			  in  %% Line 389
			      apply 'step_over'/4
				  (N1, [C|Buf], BufTail, _cor12)
	  ( <_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'step_over',4}}] )
	    -| ['compiler_generated'] )
	end
'empty_buf'/0 =
    %% Line 392
    fun () ->
	{[],[],0}
'col'/2 =
    %% Line 395
    fun (_cor1,_cor0) ->
	call 'erlang':'rem'
	    (_cor1, _cor0)
'row'/2 =
    %% Line 396
    fun (_cor1,_cor0) ->
	call 'erlang':'div'
	    (_cor1, _cor0)
'move_rel'/3 =
    %% Line 399
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <N,{Buf,BufTail,Col},Tty> when 'true' ->
	      %% Line 400
	      case apply 'step_over'/4
		       (N, Buf, BufTail, Col) of
		<{NewBuf,NewBufTail,NewCol}> when 'true' ->
		    let <M> =
			%% Line 401
			apply 'move_cursor'/3
			    (Col, NewCol, Tty)
		    in  %% Line 402
			{M,{NewBuf,NewBufTail,NewCol}}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'move_rel',3}}] )
	    -| ['compiler_generated'] )
	end
'move_cursor'/3 =
    %% Line 405
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <A,_cor18,_X_Tty>
	      when call 'erlang':'=:='
		    (_cor18,
		     A) ->
	      %% Line 406
	      []
	  %% Line 407
	  <From,To,{'ssh_pty',Type,Width,_cor19,_cor20,_cor21,_cor22}> when 'true' ->
	      let <_cor4> =
		  %% Line 408
		  apply 'col'/2
		      (To, Width)
	      in  let <_cor3> =
		      %% Line 408
		      apply 'col'/2
			  (From, Width)
		  in  let <_cor7> =
			  %% Line 408
			  case call 'erlang':'-'
				   (_cor4, _cor3) of
			    %% Line 409
			    <0> when 'true' ->
				[]
			    %% Line 410
			    <I>
				when call 'erlang':'<'
				      (I,
				       0) ->
				let <_cor5> =
				    call 'erlang':'-'
					(I)
				in  apply 'get_tty_command'/3
					('left', _cor5, Type)
			    %% Line 411
			    <I> when 'true' ->
				apply 'get_tty_command'/3
				    ('right', I, Type)
			  end
		      in  let <_cor10> =
			      %% Line 413
			      apply 'row'/2
				  (To, Width)
			  in  let <_cor9> =
				  %% Line 413
				  apply 'row'/2
				      (From, Width)
			      in  let <_cor13> =
				      %% Line 413
				      case call 'erlang':'-'
					       (_cor10, _cor9) of
					%% Line 414
					<0> when 'true' ->
					    []
					%% Line 415
					<J>
					    when call 'erlang':'<'
						  (J,
						   0) ->
					    let <_cor11> =
						call 'erlang':'-'
						    (J)
					    in  apply 'get_tty_command'/3
						    ('up', _cor11, Type)
					%% Line 416
					<J> when 'true' ->
					    apply 'get_tty_command'/3
						('down', J, Type)
				      end
				  in  %% Line 418
				      [_cor7|_cor13]
	  ( <_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15})
		  -| [{'function_name',{'move_cursor',3}}] )
	    -| ['compiler_generated'] )
	end
'write_chars'/3 =
    %% Line 423
    fun (_cor2,_cor1,_cor0) ->
	%% Line 424
	case call 'erlang':'iolist_size'
		 (_cor0) of
	  %% Line 425
	  <0> when 'true' ->
	      %% Line 426
	      'ok'
	  %% Line 427
	  <_cor7> when 'true' ->
	      %% Line 428
	      call 'ssh_connection':'send'
		  (_cor2, _cor1, %% Line 429
				 0, _cor0)
	end
'tl1'/1 =
    %% Line 433
    fun (_cor0) ->
	case _cor0 of
	  <[_cor2|A]> when 'true' ->
	      A
	  %% Line 434
	  <_cor3> when 'true' ->
	      []
	end
'tl2'/1 =
    %% Line 437
    fun (_cor0) ->
	case _cor0 of
	  <[_cor2|[_cor3|A]]> when 'true' ->
	      A
	  %% Line 438
	  <_cor4> when 'true' ->
	      []
	end
'nthtail'/2 =
    %% Line 441
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,A> when 'true' ->
	      A
	  %% Line 442
	  <N,[_cor5|A]>
	      when call 'erlang':'>'
		    (N,
		     0) ->
	      let <_cor2> =
		  call 'erlang':'-'
		      (N, 1)
	      in  apply 'nthtail'/2
		      (_cor2, A)
	  %% Line 443
	  <_cor6,_cor7> when 'true' ->
	      []
	end
'ifelse'/3 =
    %% Line 445
    fun (_cor2,_cor1,_cor0) ->
	%% Line 446
	case _cor2 of
	  %% Line 447
	  <'true'> when 'true' ->
	      _cor1
	  %% Line 448
	  <_cor7> when 'true' ->
	      _cor0
	end
'bin_to_list'/1 =
    %% Line 451
    fun (_cor0) ->
	case _cor0 of
	  <B>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 452
	      call 'erlang':'binary_to_list'
		  (B)
	  %% Line 453
	  <L>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor6> =
		  %% Line 454
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor3) ->
				case _cor3 of
				  <[A|_cor2]> when 'true' ->
				      let <_cor4> =
					  apply 'bin_to_list'/1
					      (A)
				      in  let <_cor5> =
					      apply 'lc$^0'/1
						  (_cor2)
					  in  ( [_cor4|_cor5]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor3> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor3})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (L)
		    -| ['list_comprehension'] )
	      in  %% Line 454
		  call 'lists':'flatten'
		      (_cor6)
	  %% Line 455
	  <I>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 456
	      I
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'bin_to_list',1}}] )
	    -| ['compiler_generated'] )
	end
'start_shell'/2 =
    %% Line 458
    fun (_cor1,_cor0) ->
	%% Line 459
	( case _cor0 of
	    ( <( {'state',_cor23,_cor24,_cor25,_cor26,_cor27,_rec19,_cor28}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <ConnectionInfo> =
		      %% Line 460
		      call 'ssh_connection_handler':'info'
			  (_cor1, %% Line 461
				  ['peer'|['user']])
		  in  let <_cor10> =
			  %% Line 462
			  case call 'erlang':'is_function'
				   (_rec19) of
			    %% Line 463
			    <'true'> when 'true' ->
				%% Line 464
				case %% Line 465
				     call 'proplists':'get_value'
					 ('user', ConnectionInfo) of
				  <{'ok',User}> when 'true' ->
				      %% Line 466
				      case call 'erlang':'fun_info'
					       (_rec19, 'arity') of
					%% Line 467
					<{'arity',1}> when 'true' ->
					    %% Line 468
					    ( fun () ->
						  apply _rec19
						      (User)
					      -| [{'id',{0,0,'-start_shell/2-fun-0-'}}] )
					%% Line 469
					<{'arity',2}> when 'true' ->
					    %% Line 470
					    case %% Line 471
						 call 'proplists':'get_value'
						     ('peer', ConnectionInfo) of
					      <[{_cor30,PeerAddr}|[]]> when 'true' ->
						  %% Line 472
						  ( fun () ->
							apply _rec19
							    (User, PeerAddr)
						    -| [{'id',{0,0,'-start_shell/2-fun-1-'}}] )
					      ( <_cor7> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor7})
						-| ['compiler_generated'] )
					    end
					%% Line 473
					<_cor31> when 'true' ->
					    _rec19
				      end
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor6})
				    -| ['compiler_generated'] )
				end
			    %% Line 476
			    <_cor32> when 'true' ->
				_rec19
			  end
		      in  let <Echo> =
			      %% Line 479
			      apply 'get_echo'/1
				  (_cor25)
			  in  let <_cor15> =
				  %% Line 480
				  call 'erlang':'self'
				      ()
			      in  let <Group> =
				      %% Line 480
				      call 'group':'start'
					  (_cor15, _cor10, [{'echo',Echo}|[]])
				  in  let <_rec21> =
					  %% Line 481
					  apply 'empty_buf'/0
					      ()
				      in  let <_cor19> =
					      %% Line 481
					      call 'erlang':'setelement'
						  (6, _cor0, _rec21)
					  in  %% Line 481
					      call 'erlang':'setelement'
						  (5, _cor19, Group)
	      -| ['compiler_generated'] )
	    ( <_cor29> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'start_shell'/3 =
    %% Line 483
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_ConnectionHandler,Cmd,State = {'state',_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,{M,F,A}}> when 'true' ->
	      let <_cor4> =
		  %% Line 484
		  call 'erlang':'self'
		      ()
	      in  let <_cor3> =
		      %% Line 484
		      call 'erlang':'++'
			  (A, [Cmd|[]])
		  in  let <Group> =
			  %% Line 484
			  call 'group':'start'
			      (_cor4, {M,F,_cor3}, [{'echo','false'}])
		      in  let <_rec23> =
			      %% Line 485
			      apply 'empty_buf'/0
				  ()
			  in  let <_cor8> =
				  %% Line 485
				  call 'erlang':'setelement'
				      (6, State, _rec23)
			      in  %% Line 485
				  call 'erlang':'setelement'
				      (5, _cor8, Group)
	  %% Line 486
	  <ConnectionHandler,Cmd,State = {'state',_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,Shell}>
	      when call 'erlang':'is_function'
		    (Shell) ->
	      let <ConnectionInfo> =
		  %% Line 488
		  call 'ssh_connection_handler':'info'
		      (ConnectionHandler, %% Line 489
					  ['peer'|['user']])
	      in  %% Line 490
		  case %% Line 491
		       call 'proplists':'get_value'
			   ('user', ConnectionInfo) of
		    <{'ok',User}> when 'true' ->
			let <_cor14> =
			    %% Line 493
			    case call 'erlang':'fun_info'
				     (Shell, 'arity') of
			      %% Line 494
			      <{'arity',1}> when 'true' ->
				  %% Line 495
				  ( fun () ->
					apply Shell
					    (Cmd)
				    -| [{'id',{0,0,'-start_shell/3-fun-0-'}}] )
			      %% Line 496
			      <{'arity',2}> when 'true' ->
				  %% Line 497
				  ( fun () ->
					apply Shell
					    (Cmd, User)
				    -| [{'id',{0,0,'-start_shell/3-fun-1-'}}] )
			      %% Line 498
			      <{'arity',3}> when 'true' ->
				  %% Line 499
				  case %% Line 500
				       call 'proplists':'get_value'
					   ('peer', ConnectionInfo) of
				    <[{_cor48,PeerAddr}|[]]> when 'true' ->
					%% Line 501
					( fun () ->
					      apply Shell
						  (Cmd, User, PeerAddr)
					  -| [{'id',{0,0,'-start_shell/3-fun-2-'}}] )
				    ( <_cor12> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor12})
				      -| ['compiler_generated'] )
				  end
			      %% Line 502
			      <_cor49> when 'true' ->
				  %% Line 503
				  Shell
			    end
			in  let <Echo> =
				%% Line 505
				apply 'get_echo'/1
				    (_cor44)
			    in  let <_cor19> =
				    %% Line 506
				    call 'erlang':'self'
					()
				in  let <Group> =
					%% Line 506
					call 'group':'start'
					    (_cor19, _cor14, [{'echo',Echo}|[]])
				    in  let <_rec26> =
					    %% Line 507
					    apply 'empty_buf'/0
						()
					in  let <_cor23> =
						%% Line 507
						call 'erlang':'setelement'
						    (6, State, _rec26)
					    in  %% Line 507
						call 'erlang':'setelement'
						    (5, _cor23, Group)
		    ( <_cor11> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor11})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25})
		  -| [{'function_name',{'start_shell',3}}] )
	    -| ['compiler_generated'] )
	end
'get_echo'/1 =
    %% Line 511
    fun (_cor0) ->
	case _cor0 of
	  <'undefined'> when 'true' ->
	      %% Line 512
	      'true'
	  %% Line 513
	  <{'ssh_pty',_cor3,_cor4,_cor5,_cor6,_cor7,Modes}> when 'true' ->
	      %% Line 514
	      case call 'proplists':'get_value'
		       ('echo', Modes, 1) of
		%% Line 515
		<0> when 'true' ->
		    %% Line 516
		    'false'
		%% Line 517
		<_cor8> when 'true' ->
		    %% Line 518
		    'true'
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'get_echo',1}}] )
	    -| ['compiler_generated'] )
	end
'set_echo'/1 =
    %% Line 523
    fun (_cor0) ->
	case _cor0 of
	  <{'state',_cor4,_cor5,_cor6,'undefined',_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 524
	      'ok'
	  %% Line 525
	  <{'state',_cor10,_cor11,Pty,Group,_cor12,_cor13,_cor14}> when 'true' ->
	      let <Echo> =
		  %% Line 526
		  apply 'get_echo'/1
		      (Pty)
	      in  let <_cor2> =
		      %% Line 527
		      call 'erlang':'self'
			  ()
		  in  %% Line 527
		      call 'erlang':'!'
			  (Group, {_cor2,'echo',Echo})
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'set_echo',1}}] )
	    -| ['compiler_generated'] )
	end
'not_zero'/2 =
    %% Line 529
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,B> when 'true' ->
	      %% Line 530
	      B
	  %% Line 531
	  <A,_cor4> when 'true' ->
	      %% Line 532
	      A
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('ssh_cli')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('ssh_cli', _cor0)
end