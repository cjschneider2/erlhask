module 'ssh_math' ['ipow'/3,
		   'module_info'/0,
		   'module_info'/1]
    attributes []
'ipow'/3 =
    %% Line 35
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <A,B,M>
	      when let <_cor3> =
		    call 'erlang':'>'
			(M, 0)
		in  let <_cor4> =
			call 'erlang':'>='
			    (B, 0)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      let <_cor5> =
		  %% Line 36
		  call 'crypto':'mod_pow'
		      (A, B, M)
	      in  %% Line 36
		  call 'crypto':'bytes_to_integer'
		      (_cor5)
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'ipow',3}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('ssh_math')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('ssh_math', _cor0)
end