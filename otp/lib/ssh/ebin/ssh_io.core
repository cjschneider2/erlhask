module 'ssh_io' ['format'/2,
		 'module_info'/0,
		 'module_info'/1,
		 'read_line'/2,
		 'read_password'/2,
		 'yes_no'/2]
    attributes []
'read_line'/2 =
    %% Line 29
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 30
	    apply 'listify'/1
		(_cor1)
	in  do  %% Line 30
		apply 'format'/2
		    ([126|[115]], [_cor2|[]])
		let <_cor4> =
		    %% Line 31
		    call 'proplists':'get_value'
			('user_pid', _cor0)
		in  let <_cor3> =
			%% Line 31
			call 'erlang':'self'
			    ()
		    in  do  %% Line 31
			    call 'erlang':'!'
				(_cor4, {_cor3,'question'})
			    %% Line 32
			    receive
			      %% Line 33
			      <Answer> when 'true' ->
				  %% Line 34
				  Answer
			    after 'infinity' ->
			      'true'
'yes_no'/2 =
    %% Line 37
    fun (_cor1,_cor0) ->
	do  %% Line 38
	    call 'io':'format'
		([126|[115|[32|[91|[121|[47|[110|[93|[63]]]]]]]]], [_cor1|[]])
	    %% Line 39
	    ( case _cor0 of
		( <( {'ssh',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_rec0,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <_cor5> =
			  call 'proplists':'get_value'
			      ('user_pid', _rec0)
		      in  let <_cor2> =
			      call 'erlang':'self'
				  ()
			  in  do  call 'erlang':'!'
				      (_cor5, {_cor2,'question'})
				  %% Line 40
				  receive
				    %% Line 41
				    <Answer> when 'true' ->
					%% Line 42
					case apply 'trim'/1
						 (Answer) of
					  %% Line 43
					  <[121]> when 'true' ->
					      'yes'
					  %% Line 44
					  <[110]> when 'true' ->
					      'no'
					  %% Line 45
					  <[89]> when 'true' ->
					      'yes'
					  %% Line 46
					  <[78]> when 'true' ->
					      'no'
					  %% Line 47
					  <'y'> when 'true' ->
					      'yes'
					  %% Line 48
					  <'n'> when 'true' ->
					      'no'
					  %% Line 49
					  <_cor60> when 'true' ->
					      do  %% Line 50
						  call 'io':'format'
						      ([112|[108|[101|[97|[115|[101|[32|[97|[110|[115|[119|[101|[114|[32|[121|[32|[111|[114|[32|[110|[10]]]]]]]]]]]]]]]]]]]]])
						  %% Line 51
						  apply 'yes_no'/2
						      (_cor1, _cor0)
					end
				  after 'infinity' ->
				    'true'
		  -| ['compiler_generated'] )
		( <_cor59> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','ssh'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'read_password'/2 =
    %% Line 56
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 57
	    apply 'listify'/1
		(_cor1)
	in  do  %% Line 57
		apply 'format'/2
		    ([126|[115]], [_cor2|[]])
		do  %% Line 58
		    case call 'erlang':'is_list'
			     (_cor0) of
		      %% Line 59
		      <'false'> when 'true' ->
			  %% Line 60
			  ( case _cor0 of
			      ( <( {'ssh',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_rec1,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62}
				   -| ['compiler_generated'] )> when 'true' ->
				    let <_cor6> =
					call 'proplists':'get_value'
					    ('user_pid', _rec1)
				    in  let <_cor3> =
					    call 'erlang':'self'
						()
					in  call 'erlang':'!'
						(_cor6, {_cor3,'user_password'})
				-| ['compiler_generated'] )
			      ( <_cor63> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','ssh'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      %% Line 61
		      <_cor64> when 'true' ->
			  let <_cor8> =
			      %% Line 62
			      call 'proplists':'get_value'
				  ('user_pid', _cor0)
			  in  let <_cor7> =
				  %% Line 62
				  call 'erlang':'self'
				      ()
			      in  %% Line 62
				  call 'erlang':'!'
				      (_cor8, {_cor7,'user_password'})
		    end
		    %% Line 64
		    receive
		      %% Line 65
		      <Answer> when 'true' ->
			  %% Line 66
			  case Answer of
			    %% Line 67
			    <[]> when 'true' ->
				%% Line 68
				apply 'read_password'/2
				    (_cor1, _cor0)
			    %% Line 69
			    <Pass> when 'true' ->
				Pass
			  end
		    after 'infinity' ->
		      'true'
'listify'/1 =
    %% Line 73
    fun (_cor0) ->
	case _cor0 of
	  <A>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 74
	      call 'erlang':'atom_to_list'
		  (A)
	  %% Line 75
	  <L>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 76
	      L
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'listify',1}}] )
	    -| ['compiler_generated'] )
	end
'format'/2 =
    %% Line 78
    fun (_cor1,_cor0) ->
	%% Line 79
	call 'io':'format'
	    (_cor1, _cor0)
'trim'/1 =
    %% Line 82
    fun (_cor0) ->
	case _cor0 of
	  <Line>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 83
		  apply 'trim1'/1
		      (Line)
	      in  let <_cor2> =
		      %% Line 83
		      call 'lists':'reverse'
			  (_cor1)
		  in  let <_cor3> =
			  %% Line 83
			  apply 'trim1'/1
			      (_cor2)
		      in  %% Line 83
			  call 'lists':'reverse'
			      (_cor3)
	  %% Line 84
	  <Line>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      let <_cor4> =
		  %% Line 85
		  call 'unicode':'characters_to_list'
		      (Line)
	      in  %% Line 85
		  apply 'trim'/1
		      (_cor4)
	  %% Line 86
	  <Other> when 'true' ->
	      Other
	end
'trim1'/1 =
    %% Line 88
    fun (_cor0) ->
	case _cor0 of
	  <[32|Cs]> when 'true' ->
	      apply 'trim'/1
		  (Cs)
	  %% Line 89
	  <[13|Cs]> when 'true' ->
	      apply 'trim'/1
		  (Cs)
	  %% Line 90
	  <[10|Cs]> when 'true' ->
	      apply 'trim'/1
		  (Cs)
	  %% Line 91
	  <[9|Cs]> when 'true' ->
	      apply 'trim'/1
		  (Cs)
	  %% Line 92
	  <Cs> when 'true' ->
	      Cs
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('ssh_io')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('ssh_io', _cor0)
end