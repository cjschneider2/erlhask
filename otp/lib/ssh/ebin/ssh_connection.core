module 'ssh_connection' ['adjust_window'/3,
			 'bind'/4,
			 'bound_channel'/3,
			 'cancel_tcpip_forward'/3,
			 'channel_adjust_window_msg'/2,
			 'channel_close_msg'/1,
			 'channel_data'/5,
			 'channel_data_msg'/3,
			 'channel_eof_msg'/1,
			 'channel_failure_msg'/1,
			 'channel_open_confirmation_msg'/4,
			 'channel_open_failure_msg'/4,
			 'channel_open_msg'/5,
			 'channel_request_msg'/4,
			 'channel_status_msg'/1,
			 'channel_success_msg'/1,
			 'close'/2,
			 'direct_tcpip'/6,
			 'direct_tcpip'/8,
			 'encode_ip'/1,
			 'exec'/4,
			 'exit_status'/3,
			 'global_request_msg'/3,
			 'handle_msg'/3,
			 'module_info'/0,
			 'module_info'/1,
			 'open_pty'/3,
			 'open_pty'/7,
			 'open_pty'/9,
			 'reply_request'/4,
			 'request_failure_msg'/0,
			 'request_success_msg'/1,
			 'send'/3,
			 'send'/4,
			 'send'/5,
			 'send_eof'/2,
			 'session_channel'/2,
			 'session_channel'/4,
			 'setenv'/5,
			 'shell'/2,
			 'signal'/3,
			 'subsystem'/4,
			 'tcpip_forward'/3,
			 'unbind'/3,
			 'unbind_channel'/2,
			 'window_change'/4,
			 'window_change'/6]
    attributes [%% Line 64
		'type' =
		    %% Line 64
		    [{{'record','ssh'},[{'record_field',68,{'atom',68,'role'}}|[{'record_field',69,{'atom',69,'peer'}}|[{'record_field',71,{'atom',71,'c_vsn'}}|[{'record_field',72,{'atom',72,'s_vsn'}}|[{'record_field',74,{'atom',74,'c_version'}}|[{'record_field',75,{'atom',75,'s_version'}}|[{'record_field',77,{'atom',77,'c_keyinit'}}|[{'record_field',78,{'atom',78,'s_keyinit'}}|[{'record_field',80,{'atom',80,'algorithms'}}|[{'record_field',82,{'atom',82,'kex'}}|[{'record_field',83,{'atom',83,'hkey'}}|[{'record_field',84,{'atom',84,'key_cb'}}|[{'record_field',85,{'atom',85,'io_cb'}}|[{'record_field',87,{'atom',87,'send_mac'},{'atom',87,'none'}}|[{'record_field',88,{'atom',88,'send_mac_key'}}|[{'record_field',89,{'atom',89,'send_mac_size'},{'integer',89,0}}|[{'record_field',91,{'atom',91,'recv_mac'},{'atom',91,'none'}}|[{'record_field',92,{'atom',92,'recv_mac_key'}}|[{'record_field',93,{'atom',93,'recv_mac_size'},{'integer',93,0}}|[{'record_field',95,{'atom',95,'encrypt'},{'atom',95,'none'}}|[{'record_field',96,{'atom',96,'encrypt_keys'}}|[{'record_field',97,{'atom',97,'encrypt_block_size'},{'integer',97,8}}|[{'record_field',98,{'atom',98,'encrypt_ctx'}}|[{'record_field',100,{'atom',100,'decrypt'},{'atom',100,'none'}}|[{'record_field',101,{'atom',101,'decrypt_keys'}}|[{'record_field',102,{'atom',102,'decrypt_block_size'},{'integer',102,8}}|[{'record_field',103,{'atom',103,'decrypt_ctx'}}|[{'record_field',105,{'atom',105,'compress'},{'atom',105,'none'}}|[{'record_field',106,{'atom',106,'compress_ctx'}}|[{'record_field',107,{'atom',107,'decompress'},{'atom',107,'none'}}|[{'record_field',108,{'atom',108,'decompress_ctx'}}|[{'record_field',110,{'atom',110,'c_lng'},{'atom',110,'none'}}|[{'record_field',111,{'atom',111,'s_lng'},{'atom',111,'none'}}|[{'record_field',113,{'atom',113,'user_ack'},{'atom',113,'true'}}|[{'record_field',114,{'atom',114,'timeout'},{'atom',114,'infinity'}}|[{'record_field',116,{'atom',116,'shared_secret'}}|[{'record_field',117,{'atom',117,'exchanged_hash'}}|[{'record_field',118,{'atom',118,'session_id'}}|[{'record_field',120,{'atom',120,'opts'},{'nil',120}}|[{'record_field',121,{'atom',121,'send_sequence'},{'integer',121,0}}|[{'record_field',122,{'atom',122,'recv_sequence'},{'integer',122,0}}|[{'record_field',123,{'atom',123,'keyex_key'}}|[{'record_field',124,{'atom',124,'keyex_info'}}|[{'record_field',127,{'atom',127,'user'}}|[{'record_field',128,{'atom',128,'service'}}|[{'record_field',129,{'atom',129,'userauth_quiet_mode'}}|[{'record_field',130,{'atom',130,'userauth_supported_methods'}}|[{'record_field',131,{'atom',131,'userauth_methods'}}|[{'record_field',132,{'atom',132,'userauth_preference'}}|[{'record_field',133,{'atom',133,'available_host_keys'}}|[{'record_field',134,{'atom',134,'authenticated'},{'atom',134,'false'}}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 137
		'type' =
		    %% Line 137
		    [{{'record','alg'},[{'record_field',139,{'atom',139,'kex'}}|[{'record_field',140,{'atom',140,'hkey'}}|[{'record_field',141,{'atom',141,'send_mac'}}|[{'record_field',142,{'atom',142,'recv_mac'}}|[{'record_field',143,{'atom',143,'encrypt'}}|[{'record_field',144,{'atom',144,'decrypt'}}|[{'record_field',145,{'atom',145,'compress'}}|[{'record_field',146,{'atom',146,'decompress'}}|[{'record_field',147,{'atom',147,'c_lng'}}|[{'record_field',148,{'atom',148,'s_lng'}}]]]]]]]]]],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{{'record','ssh_key'},[{'record_field',153,{'atom',153,'type'}}|[{'record_field',154,{'atom',154,'public'}}|[{'record_field',155,{'atom',155,'private'}}|[{'record_field',156,{'atom',156,'comment'},{'string',156,[]}}]]]],[]}],
		%% Line 159
		'type' =
		    %% Line 159
		    [{{'record','ssh_pty'},[{'record_field',159,{'atom',159,'term'},{'string',159,[]}}|[{'record_field',160,{'atom',160,'width'},{'integer',160,80}}|[{'record_field',161,{'atom',161,'height'},{'integer',161,25}}|[{'record_field',162,{'atom',162,'pixel_width'},{'integer',162,1024}}|[{'record_field',163,{'atom',163,'pixel_height'},{'integer',163,768}}|[{'record_field',164,{'atom',164,'modes'},{'bin',164,[]}}]]]]]],[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'channel_id',{'type',24,'integer',[]},[]}],
		%% Line 55
		'type' =
		    %% Line 55
		    [{{'record','ssh_msg_global_request'},[{'record_field',57,{'atom',57,'name'}}|[{'record_field',58,{'atom',58,'want_reply'}}|[{'record_field',59,{'atom',59,'data'}}]]],[]}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{{'record','ssh_msg_request_success'},[{'record_field',64,{'atom',64,'data'}}],[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{{'record','ssh_msg_request_failure'},[],[]}],
		%% Line 72
		'type' =
		    %% Line 72
		    [{{'record','ssh_msg_channel_open'},[{'record_field',74,{'atom',74,'channel_type'}}|[{'record_field',75,{'atom',75,'sender_channel'}}|[{'record_field',76,{'atom',76,'initial_window_size'}}|[{'record_field',77,{'atom',77,'maximum_packet_size'}}|[{'record_field',78,{'atom',78,'data'}}]]]]],[]}],
		%% Line 81
		'type' =
		    %% Line 81
		    [{{'record','ssh_msg_channel_open_confirmation'},[{'record_field',83,{'atom',83,'recipient_channel'}}|[{'record_field',84,{'atom',84,'sender_channel'}}|[{'record_field',85,{'atom',85,'initial_window_size'}}|[{'record_field',86,{'atom',86,'maximum_packet_size'}}|[{'record_field',87,{'atom',87,'data'}}]]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','ssh_msg_channel_open_failure'},[{'record_field',103,{'atom',103,'recipient_channel'}}|[{'record_field',104,{'atom',104,'reason'}}|[{'record_field',105,{'atom',105,'description'}}|[{'record_field',106,{'atom',106,'lang'}}]]]],[]}],
		%% Line 110
		'type' =
		    %% Line 110
		    [{{'record','ssh_msg_channel_window_adjust'},[{'record_field',112,{'atom',112,'recipient_channel'}}|[{'record_field',113,{'atom',113,'bytes_to_add'}}]],[]}],
		%% Line 116
		'type' =
		    %% Line 116
		    [{{'record','ssh_msg_channel_data'},[{'record_field',118,{'atom',118,'recipient_channel'}}|[{'record_field',119,{'atom',119,'data'}}]],[]}],
		%% Line 129
		'type' =
		    %% Line 129
		    [{{'record','ssh_msg_channel_extended_data'},[{'record_field',131,{'atom',131,'recipient_channel'}}|[{'record_field',132,{'atom',132,'data_type_code'}}|[{'record_field',133,{'atom',133,'data'}}]]],[]}],
		%% Line 136
		'type' =
		    %% Line 136
		    [{{'record','ssh_msg_channel_eof'},[{'record_field',138,{'atom',138,'recipient_channel'}}],[]}],
		%% Line 141
		'type' =
		    %% Line 141
		    [{{'record','ssh_msg_channel_close'},[{'record_field',143,{'atom',143,'recipient_channel'}}],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{{'record','ssh_msg_channel_request'},[{'record_field',149,{'atom',149,'recipient_channel'}}|[{'record_field',150,{'atom',150,'request_type'}}|[{'record_field',151,{'atom',151,'want_reply'}}|[{'record_field',152,{'atom',152,'data'}}]]]],[]}],
		%% Line 156
		'type' =
		    %% Line 156
		    [{{'record','ssh_msg_channel_success'},[{'record_field',158,{'atom',158,'recipient_channel'}}],[]}],
		%% Line 162
		'type' =
		    %% Line 162
		    [{{'record','ssh_msg_channel_failure'},[{'record_field',164,{'atom',164,'recipient_channel'}}],[]}],
		%% Line 235
		'type' =
		    %% Line 235
		    [{{'record','channel'},[{'record_field',237,{'atom',237,'type'}}|[{'record_field',238,{'atom',238,'sys'}}|[{'record_field',239,{'atom',239,'user'}}|[{'record_field',240,{'atom',240,'flow_control'}}|[{'record_field',242,{'atom',242,'local_id'}}|[{'record_field',244,{'atom',244,'recv_window_size'}}|[{'record_field',245,{'atom',245,'recv_packet_size'}}|[{'record_field',246,{'atom',246,'recv_close'},{'atom',246,'false'}}|[{'record_field',248,{'atom',248,'remote_id'}}|[{'record_field',249,{'atom',249,'send_window_size'}}|[{'record_field',250,{'atom',250,'send_packet_size'}}|[{'record_field',251,{'atom',251,'sent_close'},{'atom',251,'false'}}|[{'record_field',252,{'atom',252,'send_buf'},{'nil',252}}]]]]]]]]]]]]],[]}],
		%% Line 255
		'type' =
		    %% Line 255
		    [{{'record','connection'},[{'record_field',256,{'atom',256,'requests'},{'nil',256}}|[{'record_field',257,{'atom',257,'channel_cache'}}|[{'record_field',258,{'atom',258,'port_bindings'}}|[{'record_field',259,{'atom',259,'channel_id_seed'}}|[{'record_field',260,{'atom',260,'cli_spec'}}|[{'record_field',261,{'atom',261,'address'}}|[{'record_field',262,{'atom',262,'port'}}|[{'record_field',263,{'atom',263,'options'}}|[{'record_field',264,{'atom',264,'exec'}}|[{'record_field',265,{'atom',265,'system_supervisor'}}|[{'record_field',266,{'atom',266,'sub_system_supervisor'}}|[{'record_field',267,{'atom',267,'connection_supervisor'}}]]]]]]]]]]]],[]}],
		%% Line 52
		'type' =
		    %% Line 52
		    [{{'record','ssh_msg_disconnect'},[{'record_field',54,{'atom',54,'code'}}|[{'record_field',55,{'atom',55,'description'}}|[{'record_field',56,{'atom',56,'language'}}]]],[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{{'record','ssh_msg_ignore'},[{'record_field',61,{'atom',61,'data'}}],[]}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{{'record','ssh_msg_unimplemented'},[{'record_field',66,{'atom',66,'sequence'}}],[]}],
		%% Line 69
		'type' =
		    %% Line 69
		    [{{'record','ssh_msg_debug'},[{'record_field',71,{'atom',71,'always_display'}}|[{'record_field',72,{'atom',72,'message'}}|[{'record_field',73,{'atom',73,'language'}}]]],[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{{'record','ssh_msg_service_request'},[{'record_field',79,{'atom',79,'name'}}],[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{{'record','ssh_msg_service_accept'},[{'record_field',84,{'atom',84,'name'}}],[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{{'record','ssh_msg_kexinit'},[{'record_field',89,{'atom',89,'cookie'}}|[{'record_field',90,{'atom',90,'kex_algorithms'}}|[{'record_field',91,{'atom',91,'server_host_key_algorithms'}}|[{'record_field',92,{'atom',92,'encryption_algorithms_client_to_server'}}|[{'record_field',93,{'atom',93,'encryption_algorithms_server_to_client'}}|[{'record_field',94,{'atom',94,'mac_algorithms_client_to_server'}}|[{'record_field',95,{'atom',95,'mac_algorithms_server_to_client'}}|[{'record_field',96,{'atom',96,'compression_algorithms_client_to_server'}}|[{'record_field',97,{'atom',97,'compression_algorithms_server_to_client'}}|[{'record_field',98,{'atom',98,'languages_client_to_server'}}|[{'record_field',99,{'atom',99,'languages_server_to_client'}}|[{'record_field',100,{'atom',100,'first_kex_packet_follows'},{'atom',100,'false'}}|[{'record_field',102,{'atom',102,'reserved'},{'integer',102,0}}]]]]]]]]]]]]],[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{{'record','ssh_msg_kexdh_init'},[{'record_field',117,{'atom',117,'e'}}],[]}],
		%% Line 120
		'type' =
		    %% Line 120
		    [{{'record','ssh_msg_kexdh_reply'},[{'record_field',122,{'atom',122,'public_host_key'}}|[{'record_field',123,{'atom',123,'f'}}|[{'record_field',124,{'atom',124,'h_sig'}}]]],[]}],
		%% Line 127
		'type' =
		    %% Line 127
		    [{{'record','ssh_msg_newkeys'},[],[]}],
		%% Line 143
		'type' =
		    %% Line 143
		    [{{'record','ssh_msg_kex_dh_gex_request'},[{'record_field',145,{'atom',145,'min'}}|[{'record_field',146,{'atom',146,'n'}}|[{'record_field',147,{'atom',147,'max'}}]]],[]}],
		%% Line 150
		'type' =
		    %% Line 150
		    [{{'record','ssh_msg_kex_dh_gex_request_old'},[{'record_field',152,{'atom',152,'n'}}],[]}],
		%% Line 155
		'type' =
		    %% Line 155
		    [{{'record','ssh_msg_kex_dh_gex_group'},[{'record_field',157,{'atom',157,'p'}}|[{'record_field',158,{'atom',158,'g'}}]],[]}],
		%% Line 161
		'type' =
		    %% Line 161
		    [{{'record','ssh_msg_kex_dh_gex_init'},[{'record_field',163,{'atom',163,'e'}}],[]}],
		%% Line 166
		'type' =
		    %% Line 166
		    [{{'record','ssh_msg_kex_dh_gex_reply'},[{'record_field',168,{'atom',168,'public_host_key'}}|[{'record_field',169,{'atom',169,'f'}}|[{'record_field',170,{'atom',170,'h_sig'}}]]],[]}],
		%% Line 59
		'spec' =
		    %% Line 59
		    [{{'session_channel',2},[{'type',59,'fun',[{'type',59,'product',[{'type',59,'pid',[]}|[{'type',59,'timeout',[]}]]}|[{'type',59,'union',[{'type',59,'tuple',[{'atom',59,'ok'}|[{'type',59,'channel_id',[]}]]}|[{'type',59,'tuple',[{'atom',59,'error'}|[{'type',59,'term',[]}]]}]]}]]}]}],
		%% Line 60
		'spec' =
		    %% Line 60
		    [{{'session_channel',4},[{'type',60,'fun',[{'type',60,'product',[{'type',60,'pid',[]}|[{'type',60,'integer',[]}|[{'type',60,'integer',[]}|[{'type',60,'timeout',[]}]]]]}|[{'type',60,'union',[{'type',60,'tuple',[{'atom',60,'ok'}|[{'type',60,'channel_id',[]}]]}|[{'type',60,'tuple',[{'atom',60,'error'}|[{'type',60,'term',[]}]]}]]}]]}]}],
		%% Line 84
		'spec' =
		    %% Line 84
		    [{{'exec',4},[{'type',84,'fun',[{'type',84,'product',[{'type',84,'pid',[]}|[{'type',84,'channel_id',[]}|[{'type',84,'string',[]}|[{'type',84,'timeout',[]}]]]]}|[{'type',84,'union',[{'atom',84,'success'}|[{'atom',84,'failure'}]]}]]}]}],
		%% Line 94
		'spec' =
		    %% Line 94
		    [{{'shell',2},[{'type',94,'fun',[{'type',94,'product',[{'type',94,'pid',[]}|[{'type',94,'channel_id',[]}]]}|[{'var',94,'_'}]]}]}],
		%% Line 104
		'spec' =
		    %% Line 104
		    [{{'subsystem',4},[{'type',104,'fun',[{'type',104,'product',[{'type',104,'pid',[]}|[{'type',104,'channel_id',[]}|[{'type',104,'string',[]}|[{'type',104,'timeout',[]}]]]]}|[{'type',105,'union',[{'atom',105,'success'}|[{'atom',105,'failure'}|[{'type',105,'tuple',[{'atom',105,'error'}|[{'atom',105,'timeout'}]]}]]]}]]}]}],
		%% Line 114
		'spec' =
		    %% Line 114
		    [{{'send',3},[{'type',114,'fun',[{'type',114,'product',[{'type',114,'pid',[]}|[{'type',114,'channel_id',[]}|[{'type',114,'iodata',[]}]]]}|[{'type',115,'union',[{'atom',115,'ok'}|[{'type',115,'tuple',[{'atom',115,'error'}|[{'atom',115,'closed'}]]}]]}]]}]}],
		%% Line 116
		'spec' =
		    %% Line 116
		    [{{'send',4},[{'type',116,'fun',[{'type',116,'product',[{'type',116,'pid',[]}|[{'type',116,'channel_id',[]}|[{'type',116,'union',[{'type',116,'integer',[]}|[{'type',116,'iodata',[]}]]}|[{'type',116,'union',[{'type',116,'timeout',[]}|[{'type',116,'iodata',[]}]]}]]]]}|[{'type',117,'union',[{'atom',117,'ok'}|[{'type',117,'tuple',[{'atom',117,'error'}|[{'atom',117,'timeout'}]]}|[{'type',117,'tuple',[{'atom',117,'error'}|[{'atom',117,'closed'}]]}]]]}]]}]}],
		%% Line 118
		'spec' =
		    %% Line 118
		    [{{'send',5},[{'type',118,'fun',[{'type',118,'product',[{'type',118,'pid',[]}|[{'type',118,'channel_id',[]}|[{'type',118,'integer',[]}|[{'type',118,'iodata',[]}|[{'type',118,'timeout',[]}]]]]]}|[{'type',119,'union',[{'atom',119,'ok'}|[{'type',119,'tuple',[{'atom',119,'error'}|[{'atom',119,'timeout'}]]}|[{'type',119,'tuple',[{'atom',119,'error'}|[{'atom',119,'closed'}]]}]]]}]]}]}],
		%% Line 136
		'spec' =
		    %% Line 136
		    [{{'send_eof',2},[{'type',136,'fun',[{'type',136,'product',[{'type',136,'pid',[]}|[{'type',136,'channel_id',[]}]]}|[{'type',136,'union',[{'atom',136,'ok'}|[{'type',136,'tuple',[{'atom',136,'error'}|[{'atom',136,'closed'}]]}]]}]]}]}],
		%% Line 145
		'spec' =
		    %% Line 145
		    [{{'adjust_window',3},[{'type',145,'fun',[{'type',145,'product',[{'type',145,'pid',[]}|[{'type',145,'channel_id',[]}|[{'type',145,'integer',[]}]]]}|[{'atom',145,'ok'}]]}]}],
		%% Line 154
		'spec' =
		    %% Line 154
		    [{{'setenv',5},[{'type',154,'fun',[{'type',154,'product',[{'type',154,'pid',[]}|[{'type',154,'channel_id',[]}|[{'type',154,'string',[]}|[{'type',154,'string',[]}|[{'type',154,'timeout',[]}]]]]]}|[{'type',154,'union',[{'atom',154,'success'}|[{'atom',154,'failure'}]]}]]}]}],
		%% Line 166
		'spec' =
		    %% Line 166
		    [{{'close',2},[{'type',166,'fun',[{'type',166,'product',[{'type',166,'pid',[]}|[{'type',166,'channel_id',[]}]]}|[{'atom',166,'ok'}]]}]}],
		%% Line 175
		'spec' =
		    %% Line 175
		    [{{'reply_request',4},[{'type',175,'fun',[{'type',175,'product',[{'type',175,'pid',[]}|[{'type',175,'boolean',[]}|[{'type',175,'union',[{'atom',175,'success'}|[{'atom',175,'failure'}]]}|[{'type',175,'channel_id',[]}]]]]}|[{'atom',175,'ok'}]]}]}]]
'session_channel'/2 =
    %% Line 67
    fun (_cor1,_cor0) ->
	%% Line 68
	apply 'session_channel'/4
	    (_cor1, 65536, %% Line 69
			   32768, _cor0)
'session_channel'/4 =
    %% Line 72
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 74
	case call 'ssh_connection_handler':'open_channel'
		 (_cor3, [115|[101|[115|[115|[105|[111|[110]]]]]]], #{}#, _cor2, _cor1, _cor0) of
	  %% Line 77
	  <{'open',Channel}> when 'true' ->
	      %% Line 78
	      {'ok',Channel}
	  %% Line 79
	  <Error> when 'true' ->
	      %% Line 80
	      Error
	end
'exec'/4 =
    %% Line 89
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 90
	    call 'erlang':'self'
		()
	in  let <_cor5> =
		%% Line 91
		call 'erlang':'list_to_binary'
		    (_cor1)
	    in  let <_cor6> =
		    %% Line 91
		    call 'erlang':'size'
			(_cor5)
		in  let <_cor4> =
			%% Line 91
			call 'erlang':'list_to_binary'
			    (_cor1)
		    in  let <_cor7> =
			    %% Line 91
			    #{#<_cor6>(32,1,'integer',['unsigned'|['big']]),
			      #<_cor4>('all',8,'binary',['unsigned'|['big']])}#
			in  %% Line 90
			    call 'ssh_connection_handler':'request'
				(_cor3, _cor8, _cor2, [101|[120|[101|[99]]]], %% Line 91
									      'true', %% Line 91
										      [_cor7|[]], _cor0)
'shell'/2 =
    %% Line 100
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 101
	    call 'erlang':'self'
		()
	in  %% Line 101
	    call 'ssh_connection_handler':'request'
		(_cor1, _cor2, _cor0, %% Line 102
				      [115|[104|[101|[108|[108]]]]], %% Line 102
								     'false', %% Line 102
									      #{}#, %% Line 102
										    0)
'subsystem'/4 =
    %% Line 109
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 110
	    call 'erlang':'self'
		()
	in  let <_cor5> =
		%% Line 112
		call 'erlang':'list_to_binary'
		    (_cor1)
	    in  let <_cor6> =
		    %% Line 112
		    call 'erlang':'size'
			(_cor5)
		in  let <_cor4> =
			%% Line 112
			call 'erlang':'list_to_binary'
			    (_cor1)
		    in  let <_cor7> =
			    %% Line 112
			    #{#<_cor6>(32,1,'integer',['unsigned'|['big']]),
			      #<_cor4>('all',8,'binary',['unsigned'|['big']])}#
			in  %% Line 110
			    call 'ssh_connection_handler':'request'
				(_cor3, _cor8, _cor2, %% Line 111
						      [115|[117|[98|[115|[121|[115|[116|[101|[109]]]]]]]]], %% Line 112
													    'true', %% Line 112
														    [_cor7|[]], _cor0)
'send'/3 =
    %% Line 124
    fun (_cor2,_cor1,_cor0) ->
	%% Line 125
	apply 'send'/5
	    (_cor2, _cor1, 0, _cor0, 'infinity')
'send'/4 =
    %% Line 126
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <ConnectionHandler,ChannelId,Data,TimeOut>
	      when call 'erlang':'is_integer'
		    (TimeOut) ->
	      %% Line 127
	      apply 'send'/5
		  (ConnectionHandler, ChannelId, 0, Data, TimeOut)
	  %% Line 128
	  <ConnectionHandler,ChannelId,Data,'infinity'> when 'true' ->
	      %% Line 129
	      apply 'send'/5
		  (ConnectionHandler, ChannelId, 0, Data, 'infinity')
	  %% Line 130
	  <ConnectionHandler,ChannelId,Type,Data> when 'true' ->
	      %% Line 131
	      apply 'send'/5
		  (ConnectionHandler, ChannelId, Type, Data, 'infinity')
	end
'send'/5 =
    %% Line 132
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 133
	call 'ssh_connection_handler':'send'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'send_eof'/2 =
    %% Line 141
    fun (_cor1,_cor0) ->
	%% Line 142
	call 'ssh_connection_handler':'send_eof'
	    (_cor1, _cor0)
'adjust_window'/3 =
    %% Line 150
    fun (_cor2,_cor1,_cor0) ->
	%% Line 151
	call 'ssh_connection_handler':'adjust_window'
	    (_cor2, _cor1, _cor0)
'setenv'/5 =
    %% Line 160
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 162
	    call 'erlang':'list_to_binary'
		(_cor2)
	in  let <_cor7> =
		%% Line 162
		call 'erlang':'size'
		    (_cor6)
	    in  let <_cor5> =
		    %% Line 162
		    call 'erlang':'list_to_binary'
			(_cor2)
		in  let <_cor8> =
			%% Line 162
			#{#<_cor7>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor5>('all',8,'binary',['unsigned'|['big']])}#
		    in  let <_cor10> =
			    %% Line 162
			    call 'erlang':'list_to_binary'
				(_cor1)
			in  let <_cor11> =
				%% Line 162
				call 'erlang':'size'
				    (_cor10)
			    in  let <_cor9> =
				    %% Line 162
				    call 'erlang':'list_to_binary'
					(_cor1)
				in  let <_cor12> =
					%% Line 162
					#{#<_cor11>(32,1,'integer',['unsigned'|['big']]),
					  #<_cor9>('all',8,'binary',['unsigned'|['big']])}#
				    in  %% Line 161
					call 'ssh_connection_handler':'request'
					    (_cor4, _cor3, %% Line 162
							   [101|[110|[118]]], %% Line 162
									      'true', %% Line 162
										      [_cor8|[_cor12|[]]], _cor0)
'close'/2 =
    %% Line 171
    fun (_cor1,_cor0) ->
	%% Line 172
	call 'ssh_connection_handler':'close'
	    (_cor1, _cor0)
'reply_request'/4 =
    %% Line 180
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <ConnectionHandler,'true',Status,ChannelId> when 'true' ->
	      %% Line 181
	      call 'ssh_connection_handler':'reply_request'
		  (ConnectionHandler, Status, ChannelId)
	  %% Line 182
	  <_cor8,'false',_cor9,_cor10> when 'true' ->
	      %% Line 183
	      'ok'
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'reply_request',4}}] )
	    -| ['compiler_generated'] )
	end
'window_change'/4 =
    %% Line 190
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 191
	apply 'window_change'/6
	    (_cor3, _cor2, _cor1, _cor0, 0, 0)
'window_change'/6 =
    %% Line 192
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 196
	    #{#<_cor3>(32,1,'integer',['unsigned'|['big']])}#
	in  let <_cor7> =
		%% Line 196
		#{#<_cor2>(32,1,'integer',['unsigned'|['big']])}#
	    in  let <_cor8> =
		    %% Line 197
		    #{#<_cor1>(32,1,'integer',['unsigned'|['big']])}#
		in  let <_cor9> =
			%% Line 197
			#{#<_cor0>(32,1,'integer',['unsigned'|['big']])}#
		    in  %% Line 194
			call 'ssh_connection_handler':'request'
			    (_cor5, _cor4, %% Line 195
					   [119|[105|[110|[100|[111|[119|[45|[99|[104|[97|[110|[103|[101]]]]]]]]]]]]], %% Line 195
														       'false', %% Line 196
																[_cor6|[_cor7|%% Line 197
																	      [_cor8|[_cor9|[]]]]], %% Line 197
																				    0)
'signal'/3 =
    %% Line 199
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 201
	    call 'erlang':'list_to_binary'
		(_cor0)
	in  let <_cor5> =
		%% Line 201
		call 'erlang':'size'
		    (_cor4)
	    in  let <_cor3> =
		    %% Line 201
		    call 'erlang':'list_to_binary'
			(_cor0)
		in  let <_cor6> =
			%% Line 201
			#{#<_cor5>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor3>('all',8,'binary',['unsigned'|['big']])}#
		    in  %% Line 200
			call 'ssh_connection_handler':'request'
			    (_cor2, _cor1, %% Line 201
					   [115|[105|[103|[110|[97|[108]]]]]], %% Line 201
									       'false', %% Line 201
											[_cor6|[]], %% Line 201
												    0)
'exit_status'/3 =
    %% Line 204
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 206
	    #{#<_cor0>(32,1,'integer',['unsigned'|['big']])}#
	in  %% Line 205
	    call 'ssh_connection_handler':'request'
		(_cor2, _cor1, %% Line 206
			       [101|[120|[105|[116|[45|[115|[116|[97|[116|[117|[115]]]]]]]]]]], %% Line 206
												'false', %% Line 206
													 [_cor3|[]], %% Line 206
														     0)
'open_pty'/3 =
    %% Line 208
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 210
	    call 'os':'getenv'
		([84|[69|[82|[77]]]])
	in  %% Line 209
	    apply 'open_pty'/7
		(_cor2, _cor1, _cor3, %% Line 210
				      80, %% Line 210
					  24, %% Line 210
					      [], _cor0)
'open_pty'/7 =
    %% Line 212
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 213
	apply 'open_pty'/9
	    (_cor6, _cor5, _cor4, _cor3, _cor2, %% Line 214
						0, %% Line 214
						   0, _cor1, _cor0)
'open_pty'/9 =
    %% Line 216
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 220
	    call 'erlang':'list_to_binary'
		(_cor6)
	in  let <_cor11> =
		%% Line 220
		call 'erlang':'size'
		    (_cor10)
	    in  let <_cor9> =
		    %% Line 220
		    call 'erlang':'list_to_binary'
			(_cor6)
		in  let <_cor12> =
			%% Line 220
			#{#<_cor11>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor9>('all',8,'binary',['unsigned'|['big']])}#
		    in  let <_cor13> =
			    %% Line 221
			    #{#<_cor5>(32,1,'integer',['unsigned'|['big']])}#
			in  let <_cor14> =
				%% Line 221
				#{#<_cor4>(32,1,'integer',['unsigned'|['big']])}#
			    in  let <_cor15> =
				    %% Line 222
				    #{#<_cor3>(32,1,'integer',['unsigned'|['big']])}#
				in  let <_cor16> =
					%% Line 222
					#{#<_cor2>(32,1,'integer',['unsigned'|['big']])}#
				    in  let <_cor17> =
					    %% Line 223
					    apply 'encode_pty_opts'/1
						(_cor1)
					in  %% Line 218
					    call 'ssh_connection_handler':'request'
						(_cor8, _cor7, %% Line 219
							       [112|[116|[121|[45|[114|[101|[113]]]]]]], %% Line 219
													 'true', %% Line 220
														 [_cor12|%% Line 221
															 [_cor13|[_cor14|%% Line 222
																	 [_cor15|[_cor16|%% Line 223
																			 [_cor17|[]]]]]]], _cor0)
'direct_tcpip'/6 =
    %% Line 225
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 227
	apply 'direct_tcpip'/8
	    (_cor5, _cor4, _cor3, _cor2, _cor1, 65536, %% Line 228
						       32768, _cor0)
'direct_tcpip'/8 =
    %% Line 230
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 232
	    apply 'encode_ip'/1
		(_cor6)
	in  let <_cor8> =
		%% Line 232
		apply 'encode_ip'/1
		    (_cor4)
	    in  %% Line 232
		case <_cor9,_cor8> of
		  %% Line 233
		  <'false',_cor29> when 'true' ->
		      %% Line 234
		      {'error','einval'}
		  %% Line 235
		  <_cor30,'false'> when 'true' ->
		      %% Line 236
		      {'error','einval'}
		  %% Line 237
		  <RIP,OIP> when 'true' ->
		      let <_cor11> =
			  %% Line 240
			  call 'erlang':'list_to_binary'
			      (RIP)
		      in  let <_cor12> =
			      %% Line 240
			      call 'erlang':'size'
				  (_cor11)
			  in  let <_cor10> =
				  %% Line 240
				  call 'erlang':'list_to_binary'
				      (RIP)
			      in  let <_cor13> =
				      %% Line 240
				      #{#<_cor12>(32,1,'integer',['unsigned'|['big']]),
					#<_cor10>('all',8,'binary',['unsigned'|['big']])}#
				  in  let <_cor14> =
					  %% Line 241
					  #{#<_cor5>(32,1,'integer',['unsigned'|['big']])}#
				      in  let <_cor16> =
					      %% Line 242
					      call 'erlang':'list_to_binary'
						  (OIP)
					  in  let <_cor17> =
						  %% Line 242
						  call 'erlang':'size'
						      (_cor16)
					      in  let <_cor15> =
						      %% Line 242
						      call 'erlang':'list_to_binary'
							  (OIP)
						  in  let <_cor18> =
							  %% Line 242
							  #{#<_cor17>(32,1,'integer',['unsigned'|['big']]),
							    #<_cor15>('all',8,'binary',['unsigned'|['big']])}#
						      in  let <_cor19> =
							      %% Line 243
							      #{#<_cor3>(32,1,'integer',['unsigned'|['big']])}#
							  in  %% Line 238
							      call 'ssh_connection_handler':'open_channel'
								  (_cor7, %% Line 239
									  [100|[105|[114|[101|[99|[116|[45|[116|[99|[112|[105|[112]]]]]]]]]]]], %% Line 240
																		[_cor13|%% Line 241
																			[_cor14|%% Line 242
																				[_cor18|%% Line 243
																					[_cor19|[]]]]], _cor2, _cor1, _cor0)
		end
'tcpip_forward'/3 =
    %% Line 249
    fun (_cor2,_cor1,_cor0) ->
	%% Line 250
	case apply 'encode_ip'/1
		 (_cor1) of
	  %% Line 251
	  <'false'> when 'true' ->
	      %% Line 252
	      {'error','einval'}
	  %% Line 253
	  <IPStr> when 'true' ->
	      let <_cor4> =
		  %% Line 256
		  call 'erlang':'list_to_binary'
		      (IPStr)
	      in  let <_cor5> =
		      %% Line 256
		      call 'erlang':'size'
			  (_cor4)
		  in  let <_cor3> =
			  %% Line 256
			  call 'erlang':'list_to_binary'
			      (IPStr)
		      in  let <_cor6> =
			      %% Line 256
			      #{#<_cor5>(32,1,'integer',['unsigned'|['big']]),
				#<_cor3>('all',8,'binary',['unsigned'|['big']])}#
			  in  let <_cor7> =
				  %% Line 257
				  #{#<_cor0>(32,1,'integer',['unsigned'|['big']])}#
			      in  %% Line 254
				  call 'ssh_connection_handler':'global_request'
				      (_cor2, %% Line 255
					      [116|[99|[112|[105|[112|[45|[102|[111|[114|[119|[97|[114|[100]]]]]]]]]]]]], %% Line 255
															  'true', %% Line 256
																  [_cor6|%% Line 257
																	 [_cor7|[]]])
	end
'cancel_tcpip_forward'/3 =
    %% Line 260
    fun (_cor2,_cor1,_cor0) ->
	%% Line 261
	case apply 'encode_ip'/1
		 (_cor1) of
	  %% Line 262
	  <'false'> when 'true' ->
	      %% Line 263
	      {'error','einval'}
	  %% Line 264
	  <IPStr> when 'true' ->
	      let <_cor4> =
		  %% Line 267
		  call 'erlang':'list_to_binary'
		      (IPStr)
	      in  let <_cor5> =
		      %% Line 267
		      call 'erlang':'size'
			  (_cor4)
		  in  let <_cor3> =
			  %% Line 267
			  call 'erlang':'list_to_binary'
			      (IPStr)
		      in  let <_cor6> =
			      %% Line 267
			      #{#<_cor5>(32,1,'integer',['unsigned'|['big']]),
				#<_cor3>('all',8,'binary',['unsigned'|['big']])}#
			  in  let <_cor7> =
				  %% Line 268
				  #{#<_cor0>(32,1,'integer',['unsigned'|['big']])}#
			      in  %% Line 265
				  call 'ssh_connection_handler':'global_request'
				      (_cor2, %% Line 266
					      [99|[97|[110|[99|[101|[108|[45|[116|[99|[112|[105|[112|[45|[102|[111|[114|[119|[97|[114|[100]]]]]]]]]]]]]]]]]]]], %% Line 266
																				'true', %% Line 267
																					[_cor6|%% Line 268
																					       [_cor7|[]]])
	end
'l2b'/1 =
    %% Line 274
    fun (_cor0) ->
	case _cor0 of
	  <L>
	      when try
		    let <_cor1> =
			call 'erlang':'hd'
			    (_cor0)
		    in  call 'erlang':'is_integer'
			    (_cor1)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 275
	      try
		  call 'erlang':'list_to_binary'
		      (L)
	      of <_cor2> ->
		  _cor2
	      catch <_cor6,_cor5,_cor4> ->
		  %% Line 280
		  call 'unicode':'characters_to_binary'
		      (L)
	  %% Line 282
	  <[H|T]> when 'true' ->
	      let <_cor8> =
		  %% Line 283
		  apply 'l2b'/1
		      (H)
	      in  let <_cor7> =
		      %% Line 283
		      apply 'l2b'/1
			  (T)
		  in  %% Line 283
		      #{#<_cor8>('all',8,'binary',['unsigned'|['big']]),
			#<_cor7>('all',8,'binary',['unsigned'|['big']])}#
	  %% Line 284
	  <B>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      %% Line 285
	      B
	  %% Line 286
	  <[]> when 'true' ->
	      %% Line 287
	      #{}#
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'l2b',1}}] )
	    -| ['compiler_generated'] )
	end
'channel_data'/5 =
    %% Line 291
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <ChannelId,DataType,Data,Connection,From>
	      when %% Line 292
		call 'erlang':'is_list'
		    (Data) ->
	      let <_cor5> =
		  %% Line 295
		  apply 'l2b'/1
		      (Data)
	      in  %% Line 293
		  apply 'channel_data'/5
		      (ChannelId, DataType, _cor5, %% Line 295
						   Connection, %% Line 295
							       From)
	  %% Line 305
	  <ChannelId,DataType,Data,Connection = %% Line 306
						{'connection',_cor23,Cache,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33},%% Line 307
																		  From> when 'true' ->
	      %% Line 309
	      case call 'ssh_channel':'cache_lookup'
		       (Cache, ChannelId) of
		%% Line 310
		<Channel0 = {'channel',_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,Id,_cor42,_cor43,'false',_cor44}> when 'true' ->
		    let <_cor8> =
			%% Line 312
			call 'erlang':'setelement'
			    (5, Channel0, From)
		    in  %% Line 311
			case %% Line 312
			     apply 'update_send_window'/4
				 (_cor8, DataType, %% Line 313
						   Data, %% Line 313
							 Connection) of
			  <{SendList,Channel}> when 'true' ->
			      let <_cor13> =
				  %% Line 315
				  ( fun (_cor11) ->
					case _cor11 of
					  <{SendDataType,SendData}> when 'true' ->
					      let <_cor10> =
						  %% Line 317
						  apply 'channel_data_msg'/3
						      (Id, %% Line 318
							   SendDataType, %% Line 319
									 SendData)
					      in  %% Line 316
						  {'connection_reply',_cor10}
					  ( <_cor12> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor12})
						  -| [{'function_name',{'-channel_data/5-fun-0-',1}}] )
					    -| ['compiler_generated'] )
					end
				    -| [{'id',{0,0,'-channel_data/5-fun-0-'}}] )
			      in  let <Replies> =
				      %% Line 315
				      call 'lists':'map'
					  (_cor13, %% Line 320
						   SendList)
				  in  let <FlowCtrlMsgs> =
					  %% Line 321
					  apply 'flow_control'/3
					      (Replies, %% Line 322
							Channel, %% Line 323
								 Cache)
				      in  let <_cor16> =
					      %% Line 324
					      call 'erlang':'++'
						  (Replies, FlowCtrlMsgs)
					  in  %% Line 324
					      {{'replies',_cor16},Connection}
			  ( <_cor9> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor9})
			    -| ['compiler_generated'] )
			end
		%% Line 325
		<_cor59> when 'true' ->
		    do  %% Line 326
			call 'gen_fsm':'reply'
			    (From, {'error','closed'})
			%% Line 327
			{'noreply',Connection}
	      end
	  ( <_cor22,_cor21,_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19,_cor18})
		  -| [{'function_name',{'channel_data',5}}] )
	    -| ['compiler_generated'] )
	end
'handle_msg'/3 =
    %% Line 330
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'ssh_msg_channel_open_confirmation',ChannelId,%% Line 331
							  RemoteId,%% Line 332
								   WindowSz,%% Line 333
									    PacketSz,_cor149},Connection0 = %% Line 334
													    {'connection',_cor150,Cache,_cor151,_cor152,_cor153,_cor154,_cor155,_cor156,_cor157,_cor158,_cor159,_cor160},_cor161> when 'true' ->
	      %% Line 336
	      case %% Line 337
		   call 'ssh_channel':'cache_lookup'
		       (Cache, ChannelId) of
		<Channel = {'channel',_cor162,_cor163,_cor164,_cor165,_cor166,_cor167,_cor168,_cor169,'undefined',_cor170,_cor171,_cor172,_cor173}> when 'true' ->
		    let <_cor5> =
			%% Line 342
			call 'erlang':'setelement'
			    (12, Channel, PacketSz)
		    in  let <_cor6> =
			    %% Line 341
			    call 'erlang':'setelement'
				(11, _cor5, WindowSz)
			in  let <_cor8> =
				%% Line 340
				call 'erlang':'setelement'
				    (10, _cor6, RemoteId)
			    in  do  %% Line 339
				    call 'ssh_channel':'cache_update'
					(Cache, _cor8)
				    %% Line 343
				    case apply 'reply_msg'/3
					     (Channel, Connection0, {'open',ChannelId}) of
				      <{Reply,Connection}> when 'true' ->
					  %% Line 344
					  {{'replies',[Reply|[]]},Connection}
				      ( <_cor9> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor9})
					-| ['compiler_generated'] )
				    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 346
	  <{'ssh_msg_channel_open_failure',ChannelId,%% Line 347
						     Reason,%% Line 348
							    Descr,%% Line 349
								  Lang},Connection0 = %% Line 350
										      {'connection',_cor188,Cache,_cor189,_cor190,_cor191,_cor192,_cor193,_cor194,_cor195,_cor196,_cor197,_cor198},_cor199> when 'true' ->
	      let <Channel> =
		  %% Line 351
		  call 'ssh_channel':'cache_lookup'
		      (Cache, ChannelId)
	      in  do  %% Line 352
		      call 'ssh_channel':'cache_delete'
			  (Cache, ChannelId)
		      %% Line 353
		      case %% Line 354
			   apply 'reply_msg'/3
			       (Channel, Connection0, {'open_error',Reason,Descr,Lang}) of
			<{Reply,Connection}> when 'true' ->
			    %% Line 355
			    {{'replies',[Reply|[]]},Connection}
			( <_cor11> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor11})
			  -| ['compiler_generated'] )
		      end
	  %% Line 357
	  <{'ssh_msg_channel_success',ChannelId},Connection0 = %% Line 358
							       {'connection',_cor200,Cache,_cor201,_cor202,_cor203,_cor204,_cor205,_cor206,_cor207,_cor208,_cor209,_cor210},_cor211> when 'true' ->
	      let <Channel> =
		  %% Line 359
		  call 'ssh_channel':'cache_lookup'
		      (Cache, ChannelId)
	      in  %% Line 360
		  case apply 'reply_msg'/3
			   (Channel, Connection0, 'success') of
		    %% Line 361
		    <{[],Connection}> when 'true' ->
			%% Line 362
			{'noreply',Connection}
		    %% Line 363
		    <{Reply,Connection}> when 'true' ->
			%% Line 364
			{{'replies',[Reply|[]]},Connection}
		    ( <_cor13> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor13})
		      -| ['compiler_generated'] )
		  end
	  %% Line 367
	  <{'ssh_msg_channel_failure',ChannelId},Connection0 = %% Line 368
							       {'connection',_cor212,Cache,_cor213,_cor214,_cor215,_cor216,_cor217,_cor218,_cor219,_cor220,_cor221,_cor222},_cor223> when 'true' ->
	      let <Channel> =
		  %% Line 369
		  call 'ssh_channel':'cache_lookup'
		      (Cache, ChannelId)
	      in  %% Line 370
		  case apply 'reply_msg'/3
			   (Channel, Connection0, 'failure') of
		    %% Line 371
		    <{[],Connection}> when 'true' ->
			%% Line 372
			{'noreply',Connection}
		    %% Line 373
		    <{Reply,Connection}> when 'true' ->
			%% Line 374
			{{'replies',[Reply|[]]},Connection}
		    ( <_cor15> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor15})
		      -| ['compiler_generated'] )
		  end
	  %% Line 378
	  <{'ssh_msg_channel_eof',ChannelId},Connection0 = %% Line 379
							   {'connection',_cor224,Cache,_cor225,_cor226,_cor227,_cor228,_cor229,_cor230,_cor231,_cor232,_cor233,_cor234},_cor235> when 'true' ->
	      let <Channel> =
		  %% Line 380
		  call 'ssh_channel':'cache_lookup'
		      (Cache, ChannelId)
	      in  %% Line 381
		  case apply 'reply_msg'/3
			   (Channel, Connection0, {'eof',ChannelId}) of
		    <{Reply,Connection}> when 'true' ->
			%% Line 382
			{{'replies',[Reply|[]]},Connection}
		    ( <_cor17> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor17})
		      -| ['compiler_generated'] )
		  end
	  %% Line 384
	  <{'ssh_msg_channel_close',ChannelId},Connection0 = %% Line 385
							     {'connection',_cor236,Cache,_cor237,_cor238,_cor239,_cor240,_cor241,_cor242,_cor243,_cor244,_cor245,_cor246},_cor247> when 'true' ->
	      %% Line 387
	      case call 'ssh_channel':'cache_lookup'
		       (Cache, ChannelId) of
		%% Line 389
		<Channel = {'channel',_cor248,_cor249,_cor250,FlowControl,_cor251,_cor252,_cor253,_cor254,RemoteId,_cor255,_cor256,Closed,_cor257}> when 'true' ->
		    do  %% Line 390
			call 'ssh_channel':'cache_delete'
			    (Cache, ChannelId)
			%% Line 391
			case %% Line 392
			     apply 'reply_msg'/3
				 (Channel, Connection0, {'closed',ChannelId}) of
			  <{CloseMsg,Connection}> when 'true' ->
			      let <_cor21> =
				  %% Line 394
				  case Closed of
				    %% Line 395
				    <'true'> when 'true' ->
					[]
				    %% Line 396
				    <'false'> when 'true' ->
					let <RemoteCloseMsg> =
					    %% Line 397
					    apply 'channel_close_msg'/1
						(RemoteId)
					in  %% Line 398
					    [{'connection_reply',RemoteCloseMsg}|[]]
				    ( <_cor20> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor20})
				      -| ['compiler_generated'] )
				  end
			      in  let <_cor24> =
				      %% Line 403
				      case FlowControl of
					%% Line 404
					<'undefined'> when 'true' ->
					    []
					%% Line 405
					<From> when 'true' ->
					    %% Line 406
					    [{'flow_control',From,{'error','closed'}}|[]]
				      end
				  in  let <_cor26> =
					  %% Line 409
					  [CloseMsg|_cor24]
				      in  let <Replies> =
					      %% Line 409
					      call 'erlang':'++'
						  (_cor21, _cor26)
					  in  %% Line 410
					      {{'replies',Replies},Connection}
			  ( <_cor18> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor18})
			    -| ['compiler_generated'] )
			end
		%% Line 412
		<'undefined'> when 'true' ->
		    %% Line 413
		    {{'replies',[]},Connection0}
		( <_cor28> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor28})
		  -| ['compiler_generated'] )
	      end
	  %% Line 416
	  <{'ssh_msg_channel_data',ChannelId,%% Line 417
					     Data},Connection0 = %% Line 418
								 {'connection',_cor258,Cache,_cor259,_cor260,_cor261,_cor262,_cor263,_cor264,_cor265,_cor266,_cor267,_cor268},_cor269> when 'true' ->
	      %% Line 420
	      case call 'ssh_channel':'cache_lookup'
		       (Cache, ChannelId) of
		%% Line 421
		<Channel = {'channel',_cor270,_cor271,_cor272,_cor273,_cor274,Size,_cor275,_cor276,_cor277,_cor278,_cor279,_cor280,_cor281}> when 'true' ->
		    let <_cor29> =
			%% Line 422
			call 'erlang':'size'
			    (Data)
		    in  let <WantedSize> =
			    %% Line 422
			    call 'erlang':'-'
				(Size, _cor29)
			in  let <_cor33> =
				%% Line 424
				call 'erlang':'setelement'
				    (7, Channel, WantedSize)
			    in  do  %% Line 423
				    call 'ssh_channel':'cache_update'
					(Cache, _cor33)
				    %% Line 425
				    case %% Line 426
					 apply 'channel_data_reply'/5
					     (Cache, Channel, Connection0, 0, Data) of
				      <{Replies,Connection}> when 'true' ->
					  %% Line 427
					  {{'replies',Replies},Connection}
				      ( <_cor34> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor34})
					-| ['compiler_generated'] )
				    end
		%% Line 428
		<'undefined'> when 'true' ->
		    %% Line 429
		    {'noreply',Connection0}
		( <_cor35> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor35})
		  -| ['compiler_generated'] )
	      end
	  %% Line 432
	  <{'ssh_msg_channel_extended_data',ChannelId,%% Line 433
						      DataType,%% Line 434
							       Data},Connection0 = %% Line 435
										   {'connection',_cor296,Cache,_cor297,_cor298,_cor299,_cor300,_cor301,_cor302,_cor303,_cor304,_cor305,_cor306},_cor307> when 'true' ->
	      %% Line 437
	      case %% Line 438
		   call 'ssh_channel':'cache_lookup'
		       (Cache, ChannelId) of
		<Channel = {'channel',_cor308,_cor309,_cor310,_cor311,_cor312,Size,_cor313,_cor314,_cor315,_cor316,_cor317,_cor318,_cor319}> when 'true' ->
		    let <_cor37> =
			%% Line 439
			call 'erlang':'size'
			    (Data)
		    in  let <WantedSize> =
			    %% Line 439
			    call 'erlang':'-'
				(Size, _cor37)
			in  let <_cor41> =
				%% Line 441
				call 'erlang':'setelement'
				    (7, Channel, WantedSize)
			    in  do  %% Line 440
				    call 'ssh_channel':'cache_update'
					(Cache, _cor41)
				    %% Line 442
				    case %% Line 443
					 apply 'channel_data_reply'/5
					     (Cache, Channel, Connection0, DataType, Data) of
				      <{Replies,Connection}> when 'true' ->
					  %% Line 444
					  {{'replies',Replies},Connection}
				      ( <_cor42> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor42})
					-| ['compiler_generated'] )
				    end
		( <_cor36> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor36})
		  -| ['compiler_generated'] )
	      end
	  %% Line 446
	  <{'ssh_msg_channel_window_adjust',ChannelId,%% Line 447
						      Add},Connection = %% Line 448
									{'connection',_cor334,Cache,_cor335,_cor336,_cor337,_cor338,_cor339,_cor340,_cor341,_cor342,_cor343,_cor344},_cor345> when 'true' ->
	      %% Line 449
	      case %% Line 450
		   call 'ssh_channel':'cache_lookup'
		       (Cache, ChannelId) of
		<Channel0 = {'channel',_cor346,_cor347,_cor348,_cor349,_cor350,_cor351,_cor352,_cor353,RemoteId,Size,_cor354,_cor355,_cor356}> when 'true' ->
		    let <_rec4> =
			%% Line 453
			call 'erlang':'+'
			    (Size, Add)
		    in  let <_cor47> =
			    %% Line 453
			    call 'erlang':'setelement'
				(11, Channel0, _rec4)
			in  %% Line 452
			    case %% Line 453
				 apply 'update_send_window'/4
				     (_cor47, %% Line 454
					      0, %% Line 454
						 'undefined', %% Line 454
							      Connection) of
			      <{SendList,Channel}> when 'true' ->
				  let <_cor52> =
				      %% Line 456
				      ( fun (_cor50) ->
					    case _cor50 of
					      <{Type,Data}> when 'true' ->
						  let <_cor49> =
						      %% Line 457
						      apply 'channel_data_msg'/3
							  (RemoteId, Type, Data)
						  in  %% Line 457
						      {'connection_reply',_cor49}
					      ( <_cor51> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor51})
						      -| [{'function_name',{'-handle_msg/3-fun-0-',1}}] )
						-| ['compiler_generated'] )
					    end
					-| [{'id',{0,0,'-handle_msg/3-fun-0-'}}] )
				  in  let <Replies> =
					  %% Line 456
					  call 'lists':'map'
					      (_cor52, %% Line 458
						       SendList)
				      in  let <FlowCtrlMsgs> =
					      %% Line 459
					      apply 'flow_control'/2
						  (Channel, Cache)
					  in  let <_cor55> =
						  %% Line 460
						  call 'erlang':'++'
						      (Replies, FlowCtrlMsgs)
					      in  %% Line 460
						  {{'replies',_cor55},Connection}
			      ( <_cor48> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor48})
				-| ['compiler_generated'] )
			    end
		( <_cor43> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor43})
		  -| ['compiler_generated'] )
	      end
	  %% Line 462
	  <{'ssh_msg_channel_open',Type = [115|[101|[115|[115|[105|[111|[110]]]]]]],%% Line 463
										    RemoteId,%% Line 464
											     WindowSz,%% Line 465
												      PacketSz,_cor371},%% Line 465
															Connection0,%% Line 465
																    'server'> when 'true' ->
	      %% Line 467
	      try
		  apply 'setup_session'/5
		      (Connection0, RemoteId, %% Line 468
					      Type, %% Line 468
						    WindowSz, %% Line 468
							      PacketSz)
	      of <_cor56> ->
		  _cor56
	      catch <_cor60,_cor59,_cor58> ->
		  let <FailMsg> =
		      %% Line 472
		      apply 'channel_open_failure_msg'/4
			  (RemoteId, %% Line 473
				     2, %% Line 474
					[67|[111|[110|[110|[101|[99|[116|[105|[111|[110|[32|[114|[101|[102|[117|[115|[101|[100]]]]]]]]]]]]]]]]]], %% Line 474
																		  [101|[110]])
		  in  %% Line 475
		      {{'replies',[{'connection_reply',FailMsg}|[]]},%% Line 476
								     Connection0}
	  %% Line 479
	  <{'ssh_msg_channel_open',[115|[101|[115|[115|[105|[111|[110]]]]]]],%% Line 480
									     RemoteId,_cor375,_cor376,_cor377},%% Line 481
													       Connection,%% Line 481
															  'client'> when 'true' ->
	      let <FailMsg> =
		  %% Line 485
		  apply 'channel_open_failure_msg'/4
		      (RemoteId, %% Line 486
				 2, %% Line 487
				    [67|[111|[110|[110|[101|[99|[116|[105|[111|[110|[32|[114|[101|[102|[117|[115|[101|[100]]]]]]]]]]]]]]]]]], %% Line 487
																	      [101|[110]])
	      in  %% Line 488
		  {{'replies',[{'connection_reply',FailMsg}|[]]},%% Line 489
								 Connection}
	  %% Line 491
	  <{'ssh_msg_channel_open',Type = [102|[111|[114|[119|[97|[114|[100|[101|[100|[45|[116|[99|[112|[105|[112]]]]]]]]]]]]]]],%% Line 492
																 RemoteId,%% Line 493
																	  RWindowSz,%% Line 494
																		    RPacketSz,%% Line 495
																			      Data},Connection0 = %% Line 496
																						  {'connection',_cor378,Cache,_cor379,_cor380,_cor381,_cor382,_cor383,_cor384,_cor385,_cor386,_cor387,_cor388},%% Line 496
																																			       'server'> when 'true' ->
	      %% Line 498
	      case ( Data
		     -| ['reuse_for_context'] ) of
		<#{#<ALen>(32,1,'integer',['unsigned'|['big']]),
		   #<Address>(ALen,8,'binary',['unsigned'|['big']]),
		   #<Port>(32,1,'integer',['unsigned'|['big']]),
		   #<OLen>(32,1,'integer',['unsigned'|['big']]),
		   #<Orig>(OLen,8,'binary',['unsigned'|['big']]),
		   #<OrigPort>(32,1,'integer',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 500
		    case apply 'bound_channel'/3
			     (Address, Port, Connection0) of
		      %% Line 501
		      <'undefined'> when 'true' ->
			  let <FailMsg> =
			      %% Line 502
			      apply 'channel_open_failure_msg'/4
				  (RemoteId, %% Line 503
					     2, %% Line 504
						[67|[111|[110|[110|[101|[99|[116|[105|[111|[110|[32|[114|[101|[102|[117|[115|[101|[100]]]]]]]]]]]]]]]]]], %% Line 504
																			  [101|[110]])
			  in  %% Line 505
			      {{'replies',%% Line 506
					  [{'connection_reply',FailMsg}|[]]},%% Line 506
									     Connection0}
		      %% Line 507
		      <ChannelPid> when 'true' ->
			  %% Line 508
			  case apply 'new_channel_id'/1
				   (Connection0) of
			    <{ChannelId,Connection1}> when 'true' ->
				let <Channel> =
				    %% Line 511
				    {'channel',Type,%% Line 512
						    [110|[111|[110|[101]]]],%% Line 513
									    ChannelPid,'undefined',%% Line 514
												   ChannelId,65536,32768,'false','undefined',%% Line 517
																	     RWindowSz,%% Line 518
																		       RPacketSz,'false',[]}
				in  do  %% Line 519
					call 'ssh_channel':'cache_update'
					    (Cache, Channel)
					let <OpenConfMsg> =
					    %% Line 520
					    apply 'channel_open_confirmation_msg'/4
						(RemoteId, ChannelId, 65536, 32768)
					in  let <_cor71> =
						%% Line 525
						apply 'decode_ip'/1
						    (Address)
					    in  let <_cor70> =
						    %% Line 526
						    apply 'decode_ip'/1
							(Orig)
						in  %% Line 522
						    case %% Line 523
							 apply 'reply_msg'/3
							     (Channel, Connection1, %% Line 524
										    {'open',Channel,{'forwarded_tcpip',_cor71,%% Line 525
															      Port,_cor70,%% Line 526
																	  OrigPort}}) of
						      <{OpenMsg,Connection}> when 'true' ->
							  %% Line 527
							  {{'replies',[{'connection_reply',OpenConfMsg}|%% Line 528
													[OpenMsg|[]]]},%% Line 528
														       Connection}
						      ( <_cor72> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor72})
							-| ['compiler_generated'] )
						    end
			    ( <_cor65> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor65})
			      -| ['compiler_generated'] )
			  end
		    end
		( <_cor63> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor63)
			  primop 'match_fail'
			      ({'badmatch',_cor63})
		  -| ['compiler_generated'] )
	      end
	  %% Line 531
	  <{'ssh_msg_channel_open',[102|[111|[114|[119|[97|[114|[100|[101|[100|[45|[116|[99|[112|[105|[112]]]]]]]]]]]]]]],%% Line 532
															  RemoteId,_cor389,_cor390,_cor391},%% Line 533
																			    Connection,%% Line 533
																				       'client'> when 'true' ->
	      let <FailMsg> =
		  %% Line 536
		  apply 'channel_open_failure_msg'/4
		      (RemoteId, %% Line 537
				 2, %% Line 538
				    [67|[111|[110|[110|[101|[99|[116|[105|[111|[110|[32|[114|[101|[102|[117|[115|[101|[100]]]]]]]]]]]]]]]]]], %% Line 538
																	      [101|[110]])
	      in  %% Line 539
		  {{'replies',[{'connection_reply',FailMsg}|[]]},Connection}
	  %% Line 542
	  <{'ssh_msg_channel_open',_cor392,RemoteId,_cor393,_cor394,_cor395},Connection,_cor396> when 'true' ->
	      let <FailMsg> =
		  %% Line 543
		  apply 'channel_open_failure_msg'/4
		      (RemoteId, %% Line 544
				 1, %% Line 545
				    [78|[111|[116|[32|[97|[108|[108|[111|[119|[101|[100]]]]]]]]]]], %% Line 545
												    [101|[110]])
	      in  %% Line 546
		  {{'replies',[{'connection_reply',FailMsg}|[]]},Connection}
	  %% Line 548
	  <{'ssh_msg_channel_request',ChannelId,%% Line 549
						[101|[120|[105|[116|[45|[115|[116|[97|[116|[117|[115]]]]]]]]]]],_cor397,%% Line 550
															Data},Connection = %% Line 551
																	   {'connection',_cor398,Cache,_cor399,_cor400,_cor401,_cor402,_cor403,_cor404,_cor405,_cor406,_cor407,_cor408},_cor409> when 'true' ->
	      %% Line 552
	      case ( Data
		     -| ['reuse_for_context'] ) of
		<#{#<Status>(32,1,'integer',['unsigned'|['big']])}#> when 'true' ->
		    let <Channel> =
			%% Line 553
			call 'ssh_channel':'cache_lookup'
			    (Cache, ChannelId)
		    in  %% Line 554
			case %% Line 555
			     apply 'reply_msg'/3
				 (Channel, Connection, {'exit_status',ChannelId,Status}) of
			  <{Reply,_cor410}>
			      when call 'erlang':'=:='
				    (_cor410,
				     Connection) ->
			      %% Line 556
			      {{'replies',[Reply|[]]},Connection}
			  ( <_cor78> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor78})
			    -| ['compiler_generated'] )
			end
		( <_cor76> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor76)
			  primop 'match_fail'
			      ({'badmatch',_cor76})
		  -| ['compiler_generated'] )
	      end
	  %% Line 558
	  <{'ssh_msg_channel_request',ChannelId,%% Line 559
						[101|[120|[105|[116|[45|[115|[105|[103|[110|[97|[108]]]]]]]]]]],%% Line 560
														'false',%% Line 561
															Data},Connection0 = %% Line 562
																	    {'connection',_cor411,Cache,_cor412,_cor413,_cor414,_cor415,_cor416,_cor417,_cor418,_cor419,_cor420,_cor421},_cor422> when 'true' ->
	      %% Line 566
	      case ( Data
		     -| ['reuse_for_context'] ) of
		<#{#<SigLen>(32,1,'integer',['unsigned'|['big']]),
		   #<SigName>(SigLen,8,'binary',['unsigned'|['big']]),
		   #<_X_Core>(8,1,'integer',['unsigned'|['big']]),
		   #<ErrLen>(32,1,'integer',['unsigned'|['big']]),
		   #<Err>(ErrLen,8,'binary',['unsigned'|['big']]),
		   #<LangLen>(32,1,'integer',['unsigned'|['big']]),
		   #<Lang>(LangLen,8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <Channel> =
			%% Line 567
			call 'ssh_channel':'cache_lookup'
			    (Cache, ChannelId)
		    in  %% Line 568
			( case Channel of
			    ( <( {'channel',_cor423,_cor424,_cor425,_cor426,_cor427,_cor428,_cor429,_cor430,_rec6,_cor431,_cor432,_cor433,_cor434}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor86> =
				      %% Line 571
				      call 'erlang':'binary_to_list'
					  (SigName)
				  in  let <_cor85> =
					  %% Line 572
					  call 'erlang':'binary_to_list'
					      (Err)
				      in  let <_cor84> =
					      %% Line 573
					      call 'erlang':'binary_to_list'
						  (Lang)
					  in  %% Line 569
					      case apply 'reply_msg'/3
						       (Channel, Connection0, %% Line 570
									      {'exit_signal',ChannelId,_cor86,_cor85,_cor84}) of
						<{Reply,Connection}> when 'true' ->
						    let <CloseMsg> =
							%% Line 574
							apply 'channel_close_msg'/1
							    (_rec6)
						    in  %% Line 575
							{{'replies',[{'connection_reply',CloseMsg}|[Reply|[]]]},%% Line 576
														Connection}
						( <_cor87> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_cor87})
						  -| ['compiler_generated'] )
					      end
			      -| ['compiler_generated'] )
			    ( <_cor435> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','channel'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		( <_cor79> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor79)
			  primop 'match_fail'
			      ({'badmatch',_cor79})
		  -| ['compiler_generated'] )
	      end
	  %% Line 578
	  <{'ssh_msg_channel_request',ChannelId,%% Line 579
						[120|[111|[110|[45|[120|[111|[102|[102]]]]]]]],%% Line 580
											       'false',%% Line 581
												       Data},Connection = %% Line 582
															  {'connection',_cor436,Cache,_cor437,_cor438,_cor439,_cor440,_cor441,_cor442,_cor443,_cor444,_cor445,_cor446},_cor447> when 'true' ->
	      %% Line 583
	      case ( Data
		     -| ['reuse_for_context'] ) of
		<#{#<CDo>(8,1,'integer',['unsigned'|['big']])}#> when 'true' ->
		    let <Channel> =
			%% Line 584
			call 'ssh_channel':'cache_lookup'
			    (Cache, ChannelId)
		    in  let <_cor91> =
			    %% Line 586
			    call 'erlang':'=/='
				(CDo, 0)
			in  %% Line 585
			    case %% Line 586
				 apply 'reply_msg'/3
				     (Channel, Connection, {'xon_xoff',ChannelId,_cor91}) of
			      <{Reply,_cor448}>
				  when call 'erlang':'=:='
					(_cor448,
					 Connection) ->
				  %% Line 587
				  {{'replies',[Reply|[]]},Connection}
			      ( <_cor92> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor92})
				-| ['compiler_generated'] )
			    end
		( <_cor89> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor89)
			  primop 'match_fail'
			      ({'badmatch',_cor89})
		  -| ['compiler_generated'] )
	      end
	  %% Line 589
	  <{'ssh_msg_channel_request',ChannelId,%% Line 590
						[119|[105|[110|[100|[111|[119|[45|[99|[104|[97|[110|[103|[101]]]]]]]]]]]]],%% Line 591
															   'false',%% Line 592
																   Data},Connection0 = %% Line 593
																		       {'connection',_cor449,Cache,_cor450,_cor451,_cor452,_cor453,_cor454,_cor455,_cor456,_cor457,_cor458,_cor459},_cor460> when 'true' ->
	      %% Line 595
	      case ( Data
		     -| ['reuse_for_context'] ) of
		<#{#<Width>(32,1,'integer',['unsigned'|['big']]),
		   #<Height>(32,1,'integer',['unsigned'|['big']]),
		   #<PixWidth>(32,1,'integer',['unsigned'|['big']]),
		   #<PixHeight>(32,1,'integer',['unsigned'|['big']])}#> when 'true' ->
		    let <Channel> =
			%% Line 596
			call 'ssh_channel':'cache_lookup'
			    (Cache, ChannelId)
		    in  %% Line 597
			case %% Line 598
			     apply 'reply_msg'/3
				 (Channel, Connection0, {'window_change',ChannelId,%% Line 599
										   Width,%% Line 599
											 Height,%% Line 600
												PixWidth,%% Line 600
													 PixHeight}) of
			  <{Reply,Connection}> when 'true' ->
			      %% Line 601
			      {{'replies',[Reply|[]]},Connection}
			  ( <_cor95> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor95})
			    -| ['compiler_generated'] )
			end
		( <_cor93> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor93)
			  primop 'match_fail'
			      ({'badmatch',_cor93})
		  -| ['compiler_generated'] )
	      end
	  %% Line 603
	  <{'ssh_msg_channel_request',ChannelId,%% Line 604
						[115|[105|[103|[110|[97|[108]]]]]],_cor461,%% Line 605
											   Data},Connection0 = %% Line 606
													       {'connection',_cor462,Cache,_cor463,_cor464,_cor465,_cor466,_cor467,_cor468,_cor469,_cor470,_cor471,_cor472},_cor473> when 'true' ->
	      %% Line 607
	      case ( Data
		     -| ['reuse_for_context'] ) of
		<#{#<SigLen>(32,1,'integer',['unsigned'|['big']]),
		   #<SigName>(SigLen,8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <Channel> =
			%% Line 609
			call 'ssh_channel':'cache_lookup'
			    (Cache, ChannelId)
		    in  let <_cor98> =
			    %% Line 612
			    call 'erlang':'binary_to_list'
				(SigName)
			in  %% Line 610
			    case %% Line 611
				 apply 'reply_msg'/3
				     (Channel, Connection0, {'signal',ChannelId,_cor98}) of
			      <{Reply,Connection}> when 'true' ->
				  %% Line 613
				  {{'replies',[Reply|[]]},Connection}
			      ( <_cor99> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor99})
				-| ['compiler_generated'] )
			    end
		( <_cor96> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor96)
			  primop 'match_fail'
			      ({'badmatch',_cor96})
		  -| ['compiler_generated'] )
	      end
	  %% Line 615
	  <{'ssh_msg_channel_request',ChannelId,%% Line 616
						[115|[117|[98|[115|[121|[115|[116|[101|[109]]]]]]]]],%% Line 617
												     WantReply,%% Line 618
													       Data},Connection = %% Line 619
																  {'connection',_cor474,Cache,_cor475,_cor476,_cor477,_cor478,_cor479,_cor480,_cor481,_cor482,_cor483,_cor484},%% Line 619
																													       'server'> when 'true' ->
	      %% Line 620
	      case ( Data
		     -| ['reuse_for_context'] ) of
		<#{#<SsLen>(32,1,'integer',['unsigned'|['big']]),
		   #<SsName>(SsLen,8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 622
		    case %% Line 623
			 call 'ssh_channel':'cache_lookup'
			     (Cache, ChannelId) of
		      <Channel0 = {'channel',_cor485,_cor486,_cor487,_cor488,_cor489,_cor490,_cor491,_cor492,RemoteId,_cor493,_cor494,_cor495,_cor496}> when 'true' ->
			  let <_cor102> =
			      %% Line 625
			      call 'erlang':'binary_to_list'
				  (SsName)
			  in  let <ReplyMsg> =
				  %% Line 625
				  {'subsystem',ChannelId,WantReply,_cor102}
			      in  %% Line 627
				  try
				      %% Line 628
				      case apply 'start_subsytem'/4
					       (SsName, Connection, Channel0, ReplyMsg) of
					<{'ok',Pid}> when 'true' ->
					    do  %% Line 629
						call 'erlang':'monitor'
						    ('process', Pid)
						let <_cor107> =
						    %% Line 630
						    call 'erlang':'setelement'
							(4, Channel0, Pid)
						in  do  %% Line 631
							call 'ssh_channel':'cache_update'
							    (Cache, _cor107)
							let <_cor109> =
							    %% Line 633
							    apply 'channel_success_msg'/1
								(RemoteId)
							in  let <Reply> = {%% Line 632
								 'connection_reply',_cor109}
							    in  %% Line 634
								{{'replies',[Reply|[]]},Connection}
					( <_cor104> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor104})
					  -| ['compiler_generated'] )
				      end
				  of <_cor111> ->
				      _cor111
				  catch <_cor114,_cor113,_cor112> ->
				      let <_cor115> =
					  %% Line 638
					  apply 'channel_failure_msg'/1
					      (RemoteId)
				      in  let <ErrorReply> = {%% Line 637
					       'connection_reply',_cor115}
					  in  %% Line 639
					      {{'replies',[ErrorReply|[]]},Connection}
		      ( <_cor101> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor101})
			-| ['compiler_generated'] )
		    end
		( <_cor100> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor100)
			  primop 'match_fail'
			      ({'badmatch',_cor100})
		  -| ['compiler_generated'] )
	      end
	  %% Line 642
	  <{'ssh_msg_channel_request',_cor514,[115|[117|[98|[115|[121|[115|[116|[101|[109]]]]]]]]],_cor515,_cor516},%% Line 643
														    Connection,%% Line 643
															       'client'> when 'true' ->
	      %% Line 645
	      {{'replies',[]},Connection}
	  %% Line 647
	  <{'ssh_msg_channel_request',ChannelId,%% Line 648
						[112|[116|[121|[45|[114|[101|[113]]]]]]],%% Line 649
											 WantReply,%% Line 650
												   Data},Connection = %% Line 651
														      {'connection',_cor517,Cache,_cor518,_cor519,_cor520,_cor521,_cor522,_cor523,_cor524,_cor525,_cor526,_cor527},%% Line 651
																												   'server'> when 'true' ->
	      %% Line 655
	      case ( Data
		     -| ['reuse_for_context'] ) of
		<#{#<TermLen>(32,1,'integer',['unsigned'|['big']]),
		   #<BTermName>(TermLen,8,'binary',['unsigned'|['big']]),
		   #<Width>(32,1,'integer',['unsigned'|['big']]),
		   #<Height>(32,1,'integer',['unsigned'|['big']]),
		   #<PixWidth>(32,1,'integer',['unsigned'|['big']]),
		   #<PixHeight>(32,1,'integer',['unsigned'|['big']]),
		   #<Modes>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <TermName> =
			%% Line 656
			call 'erlang':'binary_to_list'
			    (BTermName)
		    in  let <_cor119> =
			    %% Line 659
			    apply 'decode_pty_opts'/1
				(Modes)
			in  let <PtyRequest> =
				%% Line 658
				{TermName,Width,Height,%% Line 659
						       PixWidth,%% Line 659
								PixHeight,_cor119}
			    in  let <Channel> =
				    %% Line 661
				    call 'ssh_channel':'cache_lookup'
					(Cache, ChannelId)
				in  %% Line 663
				    apply 'handle_cli_msg'/3
					(Connection, Channel, %% Line 664
							      {'pty',ChannelId,WantReply,PtyRequest})
		( <_cor117> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor117)
			  primop 'match_fail'
			      ({'badmatch',_cor117})
		  -| ['compiler_generated'] )
	      end
	  %% Line 666
	  <{'ssh_msg_channel_request',_cor528,[112|[116|[121|[45|[114|[101|[113]]]]]]],_cor529,_cor530},%% Line 667
													Connection,%% Line 667
														   'client'> when 'true' ->
	      %% Line 669
	      {{'replies',[]},Connection}
	  %% Line 671
	  <{'ssh_msg_channel_request',ChannelId,%% Line 672
						[115|[104|[101|[108|[108]]]]],%% Line 673
									      WantReply,_cor531},Connection = %% Line 674
													      {'connection',_cor532,Cache,_cor533,_cor534,_cor535,_cor536,_cor537,_cor538,_cor539,_cor540,_cor541,_cor542},%% Line 674
																											   'server'> when 'true' ->
	      let <Channel> =
		  %% Line 676
		  call 'ssh_channel':'cache_lookup'
		      (Cache, ChannelId)
	      in  %% Line 678
		  apply 'handle_cli_msg'/3
		      (Connection, Channel, %% Line 679
					    {'shell',ChannelId,WantReply})
	  %% Line 681
	  <{'ssh_msg_channel_request',_cor543,[115|[104|[101|[108|[108]]]]],_cor544,_cor545},%% Line 682
											     Connection,%% Line 682
													'client'> when 'true' ->
	      %% Line 684
	      {{'replies',[]},Connection}
	  %% Line 686
	  <{'ssh_msg_channel_request',ChannelId,%% Line 687
						[101|[120|[101|[99]]]],%% Line 688
								       WantReply,%% Line 689
										 Data},Connection = %% Line 690
												    {'connection',_cor546,Cache,_cor547,_cor548,_cor549,_cor550,_cor551,_cor552,_cor553,_cor554,_cor555,_cor556},%% Line 690
																										 'server'> when 'true' ->
	      %% Line 691
	      case ( Data
		     -| ['reuse_for_context'] ) of
		<#{#<Len>(32,1,'integer',['unsigned'|['big']]),
		   #<Command>(Len,8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <Channel> =
			%% Line 693
			call 'ssh_channel':'cache_lookup'
			    (Cache, ChannelId)
		    in  let <_cor125> =
			    %% Line 696
			    call 'erlang':'binary_to_list'
				(Command)
			in  %% Line 695
			    apply 'handle_cli_msg'/3
				(Connection, Channel, %% Line 696
						      {'exec',ChannelId,WantReply,_cor125})
		( <_cor123> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor123)
			  primop 'match_fail'
			      ({'badmatch',_cor123})
		  -| ['compiler_generated'] )
	      end
	  %% Line 698
	  <{'ssh_msg_channel_request',_cor557,[101|[120|[101|[99]]]],_cor558,_cor559},%% Line 699
										      Connection,%% Line 699
												 'client'> when 'true' ->
	      %% Line 701
	      {{'replies',[]},Connection}
	  %% Line 703
	  <{'ssh_msg_channel_request',ChannelId,%% Line 704
						[101|[110|[118]]],%% Line 705
								  WantReply,%% Line 706
									    Data},Connection = %% Line 707
											       {'connection',_cor560,Cache,_cor561,_cor562,_cor563,_cor564,_cor565,_cor566,_cor567,_cor568,_cor569,_cor570},%% Line 707
																									    'server'> when 'true' ->
	      %% Line 710
	      case ( Data
		     -| ['reuse_for_context'] ) of
		<#{#<VarLen>(32,1,'integer',['unsigned'|['big']]),
		   #<Var>(VarLen,8,'binary',['unsigned'|['big']]),
		   #<ValueLen>(32,1,'integer',['unsigned'|['big']]),
		   #<Value>(ValueLen,8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <Channel> =
			%% Line 712
			call 'ssh_channel':'cache_lookup'
			    (Cache, ChannelId)
		    in  %% Line 714
			apply 'handle_cli_msg'/3
			    (Connection, Channel, %% Line 715
						  {'env',ChannelId,WantReply,Var,Value})
		( <_cor126> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor126)
			  primop 'match_fail'
			      ({'badmatch',_cor126})
		  -| ['compiler_generated'] )
	      end
	  %% Line 717
	  <{'ssh_msg_channel_request',_cor571,[101|[110|[118]]],_cor572,_cor573},%% Line 718
										 Connection,%% Line 718
											    'client'> when 'true' ->
	      %% Line 720
	      {{'replies',[]},Connection}
	  %% Line 722
	  <{'ssh_msg_channel_request',ChannelId,%% Line 723
						_X_Other,%% Line 724
							 WantReply,_cor574},Connection = %% Line 725
											 {'connection',_cor575,Cache,_cor576,_cor577,_cor578,_cor579,_cor580,_cor581,_cor582,_cor583,_cor584,_cor585},_cor586> when 'true' ->
	      %% Line 726
	      case <> of
		<>
		    when call 'erlang':'=:='
			  (WantReply,
			   'true') ->
		    %% Line 727
		    case call 'ssh_channel':'cache_lookup'
			     (Cache, ChannelId) of
		      %% Line 728
		      <{'channel',_cor587,_cor588,_cor589,_cor590,_cor591,_cor592,_cor593,_cor594,RemoteId,_cor595,_cor596,_cor597,_cor598}> when 'true' ->
			  let <FailMsg> =
			      %% Line 729
			      apply 'channel_failure_msg'/1
				  (RemoteId)
			  in  %% Line 730
			      {{'replies',[{'connection_reply',FailMsg}|[]]},%% Line 731
									     Connection}
		      %% Line 732
		      <'undefined'> when 'true' ->
			  %% Line 733
			  {'noreply',Connection}
		      ( <_cor129> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor129})
			-| ['compiler_generated'] )
		    end
		%% Line 735
		<> when 'true' ->
		    %% Line 736
		    {'noreply',Connection}
	      end
	  %% Line 739
	  <{'ssh_msg_global_request',_X_Type,%% Line 740
					     WantReply,%% Line 741
						       _X_Data},%% Line 741
								Connection,_cor599> when 'true' ->
	      %% Line 742
	      case <> of
		<>
		    when call 'erlang':'=:='
			  (WantReply,
			   'true') ->
		    let <FailMsg> =
			%% Line 743
			apply 'request_failure_msg'/0
			    ()
		    in  %% Line 744
			{{'replies',[{'connection_reply',FailMsg}|[]]},%% Line 745
								       Connection}
		%% Line 746
		<> when 'true' ->
		    %% Line 747
		    {'noreply',Connection}
	      end
	  %% Line 750
	  <{'ssh_msg_request_failure'},Connection = %% Line 751
						    {'connection',[{_cor600,From}|Rest],_cor601,_cor602,_cor603,_cor604,_cor605,_cor606,_cor607,_cor608,_cor609,_cor610,_cor611},_cor612> when 'true' ->
	      let <_cor133> =
		  %% Line 753
		  call 'erlang':'setelement'
		      (2, Connection, Rest)
	      in  %% Line 752
		  {{'replies',[{'channel_requst_reply',From,{'failure',#{}#}}|[]]},_cor133}
	  %% Line 754
	  <{'ssh_msg_request_success',Data},Connection = %% Line 755
							 {'connection',[{_cor626,From}|Rest],_cor627,_cor628,_cor629,_cor630,_cor631,_cor632,_cor633,_cor634,_cor635,_cor636,_cor637},_cor638> when 'true' ->
	      let <_cor136> =
		  %% Line 757
		  call 'erlang':'setelement'
		      (2, Connection, Rest)
	      in  %% Line 756
		  {{'replies',[{'channel_requst_reply',From,{'success',Data}}|[]]},_cor136}
	  %% Line 759
	  <{'ssh_msg_disconnect',Code,%% Line 760
				      Description,%% Line 761
						  _X_Lang},Connection0 = %% Line 762
									 {'connection',_cor652,Cache,_cor653,_cor654,_cor655,_cor656,_cor657,_cor658,_cor659,_cor660,_cor661,_cor662},_cor663> when 'true' ->
	      let <_cor144> =
		  %% Line 764
		  ( fun (_cor141,_cor140) ->
			case <_cor141,_cor140> of
			  <Channel,{Connection1,Acc}> when 'true' ->
			      %% Line 768
			      ( case Channel of
				  ( <( {'channel',_cor664,_cor665,_cor666,_cor667,_rec10,_cor668,_cor669,_cor670,_cor671,_cor672,_cor673,_cor674,_cor675}
				       -| ['compiler_generated'] )> when 'true' ->
					case apply 'reply_msg'/3
						 (Channel, Connection1, {'closed',_rec10}) of
					  <{Reply,Connection2}> when 'true' ->
					      %% Line 769
					      {Connection2,[Reply|Acc]}
					  ( <_cor139> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor139})
					    -| ['compiler_generated'] )
					end
				    -| ['compiler_generated'] )
				  ( <_cor676> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','channel'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  ( <_cor143,_cor142> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor143,_cor142})
				  -| [{'function_name',{'-handle_msg/3-fun-1-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-handle_msg/3-fun-1-'}}] )
	      in  %% Line 763
		  case %% Line 764
		       call 'ssh_channel':'cache_foldl'
			   (_cor144, %% Line 770
				     {Connection0,[]}, %% Line 770
						       Cache) of
		    <{Connection,Replies}> when 'true' ->
			do  %% Line 772
			    call 'ssh_channel':'cache_delete'
				(Cache)
			    %% Line 773
			    {'disconnect',{Code,Description},{{'replies',Replies},Connection}}
		    ( <_cor145> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor145})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor148,_cor147,_cor146> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor148,_cor147,_cor146})
		  -| [{'function_name',{'handle_msg',3}}] )
	    -| ['compiler_generated'] )
	end
'handle_cli_msg'/3 =
    %% Line 775
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Connection = {'connection',_cor17,Cache,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27},Channel0 = %% Line 776
																     {'channel',_cor28,_cor29,'undefined',_cor30,%% Line 778
																						 ChannelId,_cor31,_cor32,_cor33,%% Line 777
																										RemoteId,_cor34,_cor35,_cor36,_cor37},%% Line 778
																														      Reply0> when 'true' ->
	      let <_cor3> =
		  catch
		      %% Line 780
		      apply 'start_cli'/2
			  (Connection, ChannelId)
	      in  %% Line 780
		  case _cor3 of
		    %% Line 781
		    <{'ok',Pid}> when 'true' ->
			do  %% Line 782
			    call 'erlang':'monitor'
				('process', Pid)
			    let <_cor6> =
				%% Line 783
				call 'erlang':'setelement'
				    (4, Channel0, Pid)
			    in  do  %% Line 784
				    call 'ssh_channel':'cache_update'
					(Cache, _cor6)
				    let <_cor8> =
					%% Line 786
					apply 'channel_success_msg'/1
					    (RemoteId)
				    in  let <Reply> = {%% Line 785
					     'connection_reply',_cor8}
					in  %% Line 787
					    {{'replies',[{'channel_data',Pid,Reply0}|[Reply|[]]]},Connection}
		    %% Line 788
		    <_X_Other> when 'true' ->
			let <_cor10> =
			    %% Line 790
			    apply 'channel_failure_msg'/1
				(RemoteId)
			in  let <Reply> = {%% Line 789
				 'connection_reply',_cor10}
			    in  %% Line 791
				{{'replies',[Reply|[]]},Connection}
		  end
	  %% Line 794
	  <Connection0,Channel,Reply0> when 'true' ->
	      %% Line 795
	      case apply 'reply_msg'/3
		       (Channel, Connection0, Reply0) of
		<{Reply,Connection}> when 'true' ->
		    %% Line 796
		    {{'replies',[Reply|[]]},Connection}
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor13})
		  -| ['compiler_generated'] )
	      end
	end
'channel_eof_msg'/1 =
    %% Line 798
    fun (_cor0) ->
	%% Line 799
	{'ssh_msg_channel_eof',_cor0}
'channel_close_msg'/1 =
    %% Line 801
    fun (_cor0) ->
	%% Line 802
	{'ssh_msg_channel_close',_cor0}
'channel_status_msg'/1 =
    %% Line 804
    fun (_cor0) ->
	case _cor0 of
	  <{'success',ChannelId}> when 'true' ->
	      %% Line 805
	      apply 'channel_success_msg'/1
		  (ChannelId)
	  %% Line 806
	  <{'failure',ChannelId}> when 'true' ->
	      %% Line 807
	      apply 'channel_failure_msg'/1
		  (ChannelId)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'channel_status_msg',1}}] )
	    -| ['compiler_generated'] )
	end
'channel_success_msg'/1 =
    %% Line 809
    fun (_cor0) ->
	%% Line 810
	{'ssh_msg_channel_success',_cor0}
'channel_failure_msg'/1 =
    %% Line 812
    fun (_cor0) ->
	%% Line 813
	{'ssh_msg_channel_failure',_cor0}
'channel_adjust_window_msg'/2 =
    %% Line 815
    fun (_cor1,_cor0) ->
	%% Line 816
	{'ssh_msg_channel_window_adjust',_cor1,_cor0}
'channel_data_msg'/3 =
    %% Line 819
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <ChannelId,0,Data> when 'true' ->
	      %% Line 820
	      {'ssh_msg_channel_data',ChannelId,%% Line 821
						Data}
	  %% Line 822
	  <ChannelId,Type,Data> when 'true' ->
	      %% Line 823
	      {'ssh_msg_channel_extended_data',ChannelId,%% Line 824
							 Type,%% Line 825
							      Data}
	end
'channel_open_msg'/5 =
    %% Line 827
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 828
	{'ssh_msg_channel_open',_cor4,_cor3,_cor2,_cor1,_cor0}
'channel_open_confirmation_msg'/4 =
    %% Line 835
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 836
	{'ssh_msg_channel_open_confirmation',_cor3,_cor2,_cor1,_cor0,'undefined'}
'channel_open_failure_msg'/4 =
    %% Line 841
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 842
	{'ssh_msg_channel_open_failure',_cor3,_cor2,_cor1,_cor0}
'channel_request_msg'/4 =
    %% Line 847
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 848
	{'ssh_msg_channel_request',_cor3,_cor2,_cor1,_cor0}
'global_request_msg'/3 =
    %% Line 853
    fun (_cor2,_cor1,_cor0) ->
	%% Line 854
	{'ssh_msg_global_request',_cor2,_cor1,_cor0}
'request_failure_msg'/0 =
    %% Line 857
    fun () ->
	%% Line 858
	{'ssh_msg_request_failure'}
'request_success_msg'/1 =
    %% Line 860
    fun (_cor0) ->
	%% Line 861
	{'ssh_msg_request_success',_cor0}
'bind'/4 =
    %% Line 863
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 866
	( case _cor0 of
	    ( <( {'connection',_cor14,_cor15,_rec12,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor6> =
		      call 'lists':'keydelete'
			  ({_cor3,_cor2}, 1, _rec12)
		  in  let <Binds> =
			  [{{_cor3,_cor2},_cor1}|_cor6]
		      in  %% Line 867
			  call 'erlang':'setelement'
			      (4, _cor0, Binds)
	      -| ['compiler_generated'] )
	    ( <_cor25> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','connection'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'unbind'/3 =
    %% Line 869
    fun (_cor2,_cor1,_cor0) ->
	%% Line 873
	( case _cor0 of
	    ( <( {'connection',_cor11,_cor12,_rec16,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_rec14> =
		      call 'lists':'keydelete'
			  ({_cor2,_cor1}, 1, _rec16)
		  in  call 'erlang':'setelement'
			  (4, _cor0, _rec14)
	      -| ['compiler_generated'] )
	    ( <_cor22> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','connection'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'unbind_channel'/2 =
    %% Line 874
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 875
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor6) ->
			  case _cor6 of
			    <[{Bind,ChannelP}|_cor3]>
				when %% Line 877
				  call 'erlang':'=/='
				      (ChannelP,
				       _cor1) ->
				let <_cor7> =
				    %% Line 876
				    apply 'lc$^0'/1
					(_cor3)
				in  ( [{Bind,ChannelP}|_cor7]
				      -| ['compiler_generated'] )
			    ( <[_cor2|_cor3]> when 'true' ->
				  %% Line 876
				  apply 'lc$^0'/1
				      (_cor3)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor6> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor6})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  %% Line 876
		  ( case _cor0 of
		      ( <( {'connection',_cor14,_cor15,_rec17,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24}
			   -| ['compiler_generated'] )> when 'true' ->
			    apply 'lc$^0'/1
				(_rec17)
			-| ['compiler_generated'] )
		      ( <_cor25> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','connection'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['list_comprehension'] )
	in  %% Line 878
	    case _cor0 of
	      <{'connection',_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37}> when 'true' ->
		  call 'erlang':'setelement'
		      (4, _cor0, _cor8)
	      ( <_cor38> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','connection'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
'bound_channel'/3 =
    %% Line 880
    fun (_cor2,_cor1,_cor0) ->
	%% Line 881
	( case _cor0 of
	    ( <( {'connection',_cor9,_cor10,_rec19,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'lists':'keysearch'
			   ({_cor2,_cor1}, 1, _rec19) of
		    %% Line 882
		    <{'value',{{_cor21,_cor22},ChannelPid}}>
			when let <_cor23> =
			      call 'erlang':'=:='
				  (_cor21, _cor2)
			  in  let <_cor24> =
				  call 'erlang':'=:='
				      (_cor22, _cor1)
			      in  call 'erlang':'and'
				      (_cor23, _cor24) ->
			ChannelPid
		    %% Line 883
		    <_cor25> when 'true' ->
			'undefined'
		  end
	      -| ['compiler_generated'] )
	    ( <_cor20> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','connection'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'encode_ip'/1 =
    %% Line 886
    fun (_cor0) ->
	case _cor0 of
	  <Addr>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      let <_cor1> =
		  catch
		      %% Line 887
		      call 'inet_parse':'ntoa'
			  (Addr)
	      in  %% Line 887
		  case _cor1 of
		    %% Line 888
		    <{'EXIT',_cor6}> when 'true' ->
			'false'
		    %% Line 889
		    <A> when 'true' ->
			A
		  end
	  %% Line 891
	  <Addr>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 892
	      case call 'inet_parse':'address'
		       (Addr) of
		%% Line 893
		<{'ok',_cor7}> when 'true' ->
		    Addr
		%% Line 894
		<Error> when 'true' ->
		    %% Line 895
		    case call 'inet':'getaddr'
			     (Addr, 'inet') of
		      %% Line 896
		      <{'ok',A}> when 'true' ->
			  %% Line 897
			  call 'inet_parse':'ntoa'
			      (A)
		      %% Line 898
		      <_cor8>
			  when call 'erlang':'=:='
				(_cor8,
				 Error) ->
			  'false'
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor3})
			-| ['compiler_generated'] )
		    end
	      end
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'encode_ip',1}}] )
	    -| ['compiler_generated'] )
	end
'start_channel'/4 =
    %% Line 902
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 903
	apply 'start_channel'/5
	    (_cor3, _cor2, _cor1, _cor0, 'undefined')
'start_channel'/5 =
    %% Line 905
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <ChildSpec> =
	    %% Line 906
	    apply 'child_spec'/4
		(_cor4, _cor3, _cor2, _cor0)
	in  let <ChannelSup> =
		%% Line 907
		call 'ssh_subsystem_sup':'channel_supervisor'
		    (_cor1)
	    in  %% Line 908
		call 'ssh_channel_sup':'start_child'
		    (ChannelSup, ChildSpec)
'setup_session'/5 =
    %% Line 913
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Connection0 = {'connection',_cor15,Cache,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25},%% Line 914
															   RemoteId,%% Line 915
																    Type,%% Line 915
																	 WindowSize,%% Line 915
																		    PacketSize> when 'true' ->
	      %% Line 916
	      case apply 'new_channel_id'/1
		       (Connection0) of
		<{ChannelId,Connection}> when 'true' ->
		    let <Channel> =
			%% Line 918
			{'channel',Type,%% Line 919
					[115|[115|[104]]],'undefined','undefined',%% Line 920
										  ChannelId,65536,%% Line 922
												  32768,'false',%% Line 925
														RemoteId,%% Line 923
															 WindowSize,%% Line 924
																    PacketSize,'false',[]}
		    in  do  %% Line 927
			    call 'ssh_channel':'cache_update'
				(Cache, Channel)
			    let <OpenConfMsg> =
				%% Line 928
				apply 'channel_open_confirmation_msg'/4
				    (RemoteId, ChannelId, 65536, %% Line 930
								 32768)
			    in  %% Line 932
				{{'replies',[{'connection_reply',OpenConfMsg}|[]]},Connection}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'setup_session',5}}] )
	    -| ['compiler_generated'] )
	end
'check_subsystem'/2 =
    %% Line 935
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <SsName = [115|[102|[116|[112]]]],Options> when 'true' ->
	      %% Line 936
	      case call 'proplists':'get_value'
		       ('subsystems', Options, 'no_subsys') of
		%% Line 937
		<'no_subsys'> when 'true' ->
		    %% Line 938
		    case call 'ssh_sftpd':'subsystem_spec'
			     ([]) of
		      <{_cor8,{Cb,Opts}}>
			  when call 'erlang':'=:='
				(_cor8,
				 SsName) ->
			  %% Line 939
			  {Cb,Opts}
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 940
		<SubSystems> when 'true' ->
		    %% Line 941
		    call 'proplists':'get_value'
			(SsName, SubSystems, {'none',[]})
	      end
	  %% Line 944
	  <SsName,Options> when 'true' ->
	      let <Subsystems> =
		  %% Line 945
		  call 'proplists':'get_value'
		      ('subsystems', Options, [])
	      in  %% Line 946
		  case call 'proplists':'get_value'
			   (SsName, Subsystems, {'none',[]}) of
		    %% Line 947
		    <Fun>
			when call 'erlang':'is_function'
			      (Fun) ->
			%% Line 948
			{Fun,[]}
		    %% Line 949
		    <Value = {_cor9,_cor10}> when 'true' ->
			%% Line 950
			Value
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	end
'child_spec'/4 =
    %% Line 953
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Name> =
	    %% Line 954
	    call 'erlang':'make_ref'
		()
	in  let <_cor5> =
		%% Line 955
		call 'erlang':'self'
		    ()
	    in  let <StartFunc> =
		    %% Line 955
		    {'ssh_channel','start_link',[_cor5|[_cor2|[_cor3|[_cor1|[_cor0|[]]]]]]}
		in  %% Line 959
		    {Name,StartFunc,'temporary',3600,'worker',['ssh_channel']}
'start_cli'/2 =
    %% Line 961
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'connection',_cor4,_cor5,_cor6,_cor7,'no_cli',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14},_cor15> when 'true' ->
	      %% Line 962
	      {'error','cli_disabled'}
	  %% Line 963
	  <{'connection',_cor16,_cor17,_cor18,_cor19,{CbModule,Args},_cor20,_cor21,_cor22,Exec,_cor23,%% Line 964
												      SubSysSup,_cor24},%% Line 964
															ChannelId> when 'true' ->
	      %% Line 965
	      apply 'start_channel'/5
		  (CbModule, ChannelId, Args, SubSysSup, Exec)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'start_cli',2}}] )
	    -| ['compiler_generated'] )
	end
'start_subsytem'/4 =
    %% Line 967
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <BinName,{'connection',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,Options,_cor19,_cor20,%% Line 968
													SubSysSup,_cor21},%% Line 969
															  {'channel',_cor22,_cor23,_cor24,_cor25,ChannelId,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33},%% Line 969
																												    _X_ReplyMsg> when 'true' ->
	      let <Name> =
		  %% Line 970
		  call 'erlang':'binary_to_list'
		      (BinName)
	      in  %% Line 971
		  case apply 'check_subsystem'/2
			   (Name, Options) of
		    %% Line 972
		    <{Callback,Opts}>
			when let <_cor5> =
			      call 'erlang':'is_atom'
				  (Callback)
			  in  let <_cor6> =
				  call 'erlang':'=/='
				      (Callback, 'none')
			      in  call 'erlang':'and'
				      (_cor5, _cor6) ->
			%% Line 973
			apply 'start_channel'/4
			    (Callback, ChannelId, Opts, SubSysSup)
		    %% Line 974
		    <{Other,_cor34}>
			when call 'erlang':'=/='
			      (Other,
			       'none') ->
			%% Line 975
			{'error','legacy_option_not_supported'}
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'start_subsytem',4}}] )
	    -| ['compiler_generated'] )
	end
'channel_data_reply'/5 =
    %% Line 978
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_cor11,Channel = {'channel',_cor12,_cor13,_cor14,_cor15,ChannelId,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23},%% Line 979
																      Connection0,%% Line 979
																		  DataType,%% Line 979
																			   Data> when 'true' ->
	      %% Line 980
	      case %% Line 981
		   apply 'reply_msg'/3
		       (Channel, Connection0, {'data',ChannelId,DataType,Data}) of
		<{Reply,Connection}> when 'true' ->
		    %% Line 982
		    {[Reply|[]],Connection}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'channel_data_reply',5}}] )
	    -| ['compiler_generated'] )
	end
'new_channel_id'/1 =
    %% Line 984
    fun (_cor0) ->
	%% Line 985
	( case _cor0 of
	    ( <( {'connection',_cor9,_cor10,_cor11,_rec20,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_rec21> =
		      %% Line 986
		      call 'erlang':'+'
			  (_rec20, 1)
		  in  let <_cor7> =
			  %% Line 986
			  call 'erlang':'setelement'
			      (5, _cor0, _rec21)
		      in  %% Line 986
			  {_rec20,_cor7}
	      -| ['compiler_generated'] )
	    ( <_cor20> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','connection'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'reply_msg'/3 =
    %% Line 988
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Channel,Connection,Reply = {'open',_cor6}> when 'true' ->
	      %% Line 989
	      apply 'request_reply_or_data'/3
		  (Channel, Connection, Reply)
	  %% Line 990
	  <Channel,Connection,Reply = {'open_error',_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 991
	      apply 'request_reply_or_data'/3
		  (Channel, Connection, Reply)
	  %% Line 992
	  <Channel,Connection,Reply = 'success'> when 'true' ->
	      %% Line 993
	      apply 'request_reply_or_data'/3
		  (Channel, Connection, Reply)
	  %% Line 994
	  <Channel,Connection,Reply = 'failure'> when 'true' ->
	      %% Line 995
	      apply 'request_reply_or_data'/3
		  (Channel, Connection, Reply)
	  %% Line 996
	  <Channel,Connection,Reply = {'closed',_cor10}> when 'true' ->
	      %% Line 997
	      apply 'request_reply_or_data'/3
		  (Channel, Connection, Reply)
	  %% Line 998
	  <'undefined',Connection,_X_Reply> when 'true' ->
	      %% Line 999
	      {'noreply',Connection}
	  %% Line 1000
	  <{'channel',_cor11,_cor12,ChannelPid,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22},Connection,Reply> when 'true' ->
	      %% Line 1001
	      {{'channel_data',ChannelPid,Reply},Connection}
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'reply_msg',3}}] )
	    -| ['compiler_generated'] )
	end
'request_reply_or_data'/3 =
    %% Line 1004
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'channel',_cor13,_cor14,ChannelPid,_cor15,ChannelId,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23},Connection = %% Line 1005
																      {'connection',Requests,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34},%% Line 1006
																													   Reply> when 'true' ->
	      %% Line 1007
	      case call 'lists':'keysearch'
		       (ChannelId, 1, Requests) of
		%% Line 1008
		<{'value',{_cor35,From}}>
		    when call 'erlang':'=:='
			  (_cor35,
			   ChannelId) ->
		    let <_rec23> =
			%% Line 1011
			call 'lists':'keydelete'
			    (ChannelId, 1, Requests)
		    in  let <_cor6> =
			    %% Line 1010
			    call 'erlang':'setelement'
				(2, Connection, _rec23)
			in  %% Line 1009
			    {{'channel_requst_reply',From,Reply},_cor6}
		%% Line 1012
		<'false'>
		    when let <_cor7> =
			  call 'erlang':'=:='
			      (Reply, 'success')
		      in  let <_cor8> =
			      call 'erlang':'=:='
				  (Reply, 'failure')
			  in  call 'erlang':'or'
				  (_cor7, _cor8) ->
		    %% Line 1013
		    {[],Connection}
		%% Line 1014
		<'false'> when 'true' ->
		    %% Line 1015
		    {{'channel_data',ChannelPid,Reply},Connection}
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'request_reply_or_data',3}}] )
	    -| ['compiler_generated'] )
	end
'update_send_window'/4 =
    %% Line 1018
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Channel,_cor13,'undefined',%% Line 1019
				      {'connection',_cor14,Cache,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24}> when 'true' ->
	      %% Line 1020
	      ( case Channel of
		  ( <( {'channel',_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_rec25}
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'do_update_send_window'/3
			    (Channel, _rec25, Cache)
		    -| ['compiler_generated'] )
		  ( <_cor37> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','channel'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1022
	  <Channel,DataType,Data,%% Line 1023
				 {'connection',_cor38,Cache,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48}> when 'true' ->
	      %% Line 1024
	      ( case Channel of
		  ( <( {'channel',_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_rec26}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor8> =
			    call 'erlang':'++'
				(_rec26, [{DataType,Data}|[]])
			in  apply 'do_update_send_window'/3
				(Channel, _cor8, Cache)
		    -| ['compiler_generated'] )
		  ( <_cor61> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','channel'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'update_send_window',4}}] )
	    -| ['compiler_generated'] )
	end
'do_update_send_window'/3 =
    %% Line 1026
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1028
	( case _cor2 of
	    ( <( {'channel',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_rec27,_cor26,_cor27}
		 -| ['compiler_generated'] )> when 'true' ->
		  case apply 'get_window'/3
			   (_cor1, _rec27, _cor25) of
		    <{Buf1,NewSz,Buf2}> when 'true' ->
			let <_cor9> =
			    %% Line 1031
			    call 'erlang':'setelement'
				(14, _cor2, Buf2)
			in  let <_cor11> =
				%% Line 1031
				call 'erlang':'setelement'
				    (11, _cor9, NewSz)
			    in  do  %% Line 1032
				    call 'ssh_channel':'cache_update'
					(_cor0, _cor11)
				    %% Line 1033
				    {Buf1,_cor11}
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor7})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor28> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','channel'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'get_window'/3 =
    %% Line 1035
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1036
	apply 'get_window'/4
	    (_cor2, _cor1, _cor0, [])
'get_window'/4 =
    %% Line 1038
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Bs,_X_PSz,0,Acc> when 'true' ->
	      let <_cor4> =
		  %% Line 1039
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 1039
		  {_cor4,0,Bs}
	  %% Line 1040
	  <[B0 = {DataType,Bin}|Bs],PSz,WSz,Acc> when 'true' ->
	      let <BSz> =
		  %% Line 1041
		  call 'erlang':'size'
		      (Bin)
	      in  %% Line 1042
		  case <> of
		    <>
			when call 'erlang':'=<'
			      (BSz,
			       WSz) ->
			%% Line 1043
			case <> of
			  <>
			      when call 'erlang':'=<'
				    (BSz,
				     PSz) ->
			      let <_cor6> =
				  %% Line 1044
				  call 'erlang':'-'
				      (WSz, BSz)
			      in  %% Line 1044
				  apply 'get_window'/4
				      (Bs, PSz, _cor6, [B0|Acc])
			  %% Line 1045
			  <> when 'true' ->
			      %% Line 1046
			      case ( Bin
				     -| ['reuse_for_context'] ) of
				<#{#<Bin1>(PSz,8,'binary',['unsigned'|['big']]),
				   #<Bin2>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
				    let <_cor9> =
					%% Line 1047
					call 'erlang':'setelement'
					    (2, B0, Bin2)
				    in  let <_cor8> =
					    %% Line 1048
					    call 'erlang':'-'
						(WSz, PSz)
					in  %% Line 1047
					    apply 'get_window'/4
						([_cor9|Bs], %% Line 1048
							     PSz, _cor8, %% Line 1049
									 [{DataType,Bin1}|Acc])
				( <_cor7> when 'true' ->
				      do  primop 'bs_context_to_binary'
					      (_cor7)
					  primop 'match_fail'
					      ({'badmatch',_cor7})
				  -| ['compiler_generated'] )
			      end
			end
		    %% Line 1051
		    <>
			when call 'erlang':'=<'
			      (WSz,
			       PSz) ->
			%% Line 1052
			case ( Bin
			       -| ['reuse_for_context'] ) of
			  <#{#<Bin1>(WSz,8,'binary',['unsigned'|['big']]),
			     #<Bin2>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			      let <_cor12> =
				  %% Line 1053
				  call 'erlang':'setelement'
				      (2, B0, Bin2)
			      in  let <_cor11> =
				      %% Line 1054
				      call 'erlang':'-'
					  (WSz, WSz)
				  in  %% Line 1053
				      apply 'get_window'/4
					  ([_cor12|Bs], %% Line 1054
							PSz, _cor11, %% Line 1055
								     [{DataType,Bin1}|Acc])
			  ( <_cor10> when 'true' ->
				do  primop 'bs_context_to_binary'
					(_cor10)
				    primop 'match_fail'
					({'badmatch',_cor10})
			    -| ['compiler_generated'] )
			end
		    %% Line 1056
		    <> when 'true' ->
			%% Line 1057
			case ( Bin
			       -| ['reuse_for_context'] ) of
			  <#{#<Bin1>(PSz,8,'binary',['unsigned'|['big']]),
			     #<Bin2>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
			      let <_cor15> =
				  %% Line 1058
				  call 'erlang':'setelement'
				      (2, B0, Bin2)
			      in  let <_cor14> =
				      %% Line 1059
				      call 'erlang':'-'
					  (WSz, PSz)
				  in  %% Line 1058
				      apply 'get_window'/4
					  ([_cor15|Bs], %% Line 1059
							PSz, _cor14, %% Line 1060
								     [{DataType,Bin1}|Acc])
			  ( <_cor13> when 'true' ->
				do  primop 'bs_context_to_binary'
					(_cor13)
				    primop 'match_fail'
					({'badmatch',_cor13})
			    -| ['compiler_generated'] )
			end
		  end
	  %% Line 1062
	  <[],_X_PSz,WSz,Acc> when 'true' ->
	      let <_cor16> =
		  %% Line 1063
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 1063
		  {_cor16,WSz,[]}
	  ( <_cor20,_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17})
		  -| [{'function_name',{'get_window',4}}] )
	    -| ['compiler_generated'] )
	end
'flow_control'/2 =
    %% Line 1065
    fun (_cor1,_cor0) ->
	%% Line 1066
	apply 'flow_control'/3
	    (['window_adjusted'], _cor1, _cor0)
'flow_control'/3 =
    %% Line 1068
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],Channel,Cache> when 'true' ->
	      do  %% Line 1069
		  call 'ssh_channel':'cache_update'
		      (Cache, Channel)
		  %% Line 1070
		  []
	  %% Line 1072
	  <[_cor6|_cor7],Channel = {'channel',_cor8,_cor9,_cor10,From,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,%% Line 1073
															      []},%% Line 1073
																  Cache>
	      when %% Line 1073
		call 'erlang':'=/='
		    (From,
		     'undefined') ->
	      %% Line 1074
	      [{'flow_control',Cache,Channel,From,'ok'}|[]]
	  %% Line 1075
	  <_cor19,_cor20,_cor21> when 'true' ->
	      %% Line 1076
	      []
	end
'encode_pty_opts'/1 =
    %% Line 1079
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1080
	    apply 'encode_pty_opts2'/1
		(_cor0)
	in  let <Bin> =
		%% Line 1080
		call 'erlang':'list_to_binary'
		    (_cor1)
	    in  let <Len> =
		    %% Line 1081
		    call 'erlang':'size'
			(Bin)
		in  %% Line 1082
		    #{#<Len>(32,1,'integer',['unsigned'|['big']]),
		      #<Bin>('all',8,'binary',['unsigned'|['big']])}#
'encode_pty_opts2'/1 =
    %% Line 1084
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 1085
	      [0]
	  %% Line 1086
	  <[{'vintr',Value}|Opts]> when 'true' ->
	      let <_cor1> =
		  %% Line 1087
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor2> =
		      %% Line 1087
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1087
		      [1|[_cor1|_cor2]]
	  %% Line 1088
	  <[{'vquit',Value}|Opts]> when 'true' ->
	      let <_cor3> =
		  %% Line 1089
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor4> =
		      %% Line 1089
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1089
		      [2|[_cor3|_cor4]]
	  %% Line 1090
	  <[{'verase',Value}|Opts]> when 'true' ->
	      let <_cor5> =
		  %% Line 1091
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor6> =
		      %% Line 1091
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1091
		      [3|[_cor5|_cor6]]
	  %% Line 1092
	  <[{'vkill',Value}|Opts]> when 'true' ->
	      let <_cor7> =
		  %% Line 1093
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor8> =
		      %% Line 1093
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1093
		      [4|[_cor7|_cor8]]
	  %% Line 1094
	  <[{'veof',Value}|Opts]> when 'true' ->
	      let <_cor9> =
		  %% Line 1095
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor10> =
		      %% Line 1095
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1095
		      [5|[_cor9|_cor10]]
	  %% Line 1096
	  <[{'veol',Value}|Opts]> when 'true' ->
	      let <_cor11> =
		  %% Line 1097
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor12> =
		      %% Line 1097
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1097
		      [6|[_cor11|_cor12]]
	  %% Line 1098
	  <[{'veol2',Value}|Opts]> when 'true' ->
	      let <_cor13> =
		  %% Line 1099
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor14> =
		      %% Line 1099
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1099
		      [7|[_cor13|_cor14]]
	  %% Line 1100
	  <[{'vstart',Value}|Opts]> when 'true' ->
	      let <_cor15> =
		  %% Line 1101
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor16> =
		      %% Line 1101
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1101
		      [8|[_cor15|_cor16]]
	  %% Line 1102
	  <[{'vstop',Value}|Opts]> when 'true' ->
	      let <_cor17> =
		  %% Line 1103
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor18> =
		      %% Line 1103
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1103
		      [9|[_cor17|_cor18]]
	  %% Line 1104
	  <[{'vsusp',Value}|Opts]> when 'true' ->
	      let <_cor19> =
		  %% Line 1105
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor20> =
		      %% Line 1105
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1105
		      [10|[_cor19|_cor20]]
	  %% Line 1106
	  <[{'vdsusp',Value}|Opts]> when 'true' ->
	      let <_cor21> =
		  %% Line 1107
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor22> =
		      %% Line 1107
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1107
		      [11|[_cor21|_cor22]]
	  %% Line 1108
	  <[{'vreprint',Value}|Opts]> when 'true' ->
	      let <_cor23> =
		  %% Line 1109
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor24> =
		      %% Line 1109
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1109
		      [12|[_cor23|_cor24]]
	  %% Line 1110
	  <[{'vwerase',Value}|Opts]> when 'true' ->
	      let <_cor25> =
		  %% Line 1111
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor26> =
		      %% Line 1111
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1111
		      [13|[_cor25|_cor26]]
	  %% Line 1112
	  <[{'vlnext',Value}|Opts]> when 'true' ->
	      let <_cor27> =
		  %% Line 1113
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor28> =
		      %% Line 1113
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1113
		      [14|[_cor27|_cor28]]
	  %% Line 1114
	  <[{'vflush',Value}|Opts]> when 'true' ->
	      let <_cor29> =
		  %% Line 1115
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor30> =
		      %% Line 1115
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1115
		      [15|[_cor29|_cor30]]
	  %% Line 1116
	  <[{'vswtch',Value}|Opts]> when 'true' ->
	      let <_cor31> =
		  %% Line 1117
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor32> =
		      %% Line 1117
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1117
		      [16|[_cor31|_cor32]]
	  %% Line 1118
	  <[{'vstatus',Value}|Opts]> when 'true' ->
	      let <_cor33> =
		  %% Line 1119
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor34> =
		      %% Line 1119
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1119
		      [17|[_cor33|_cor34]]
	  %% Line 1120
	  <[{'vdiscard',Value}|Opts]> when 'true' ->
	      let <_cor35> =
		  %% Line 1121
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor36> =
		      %% Line 1121
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1121
		      [18|[_cor35|_cor36]]
	  %% Line 1122
	  <[{'ignpar',Value}|Opts]> when 'true' ->
	      let <_cor37> =
		  %% Line 1123
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor38> =
		      %% Line 1123
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1123
		      [30|[_cor37|_cor38]]
	  %% Line 1124
	  <[{'parmrk',Value}|Opts]> when 'true' ->
	      let <_cor39> =
		  %% Line 1125
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor40> =
		      %% Line 1125
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1125
		      [31|[_cor39|_cor40]]
	  %% Line 1126
	  <[{'inpck',Value}|Opts]> when 'true' ->
	      let <_cor41> =
		  %% Line 1127
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor42> =
		      %% Line 1127
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1127
		      [32|[_cor41|_cor42]]
	  %% Line 1128
	  <[{'istrip',Value}|Opts]> when 'true' ->
	      let <_cor43> =
		  %% Line 1129
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor44> =
		      %% Line 1129
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1129
		      [33|[_cor43|_cor44]]
	  %% Line 1130
	  <[{'inlcr',Value}|Opts]> when 'true' ->
	      let <_cor45> =
		  %% Line 1131
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor46> =
		      %% Line 1131
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1131
		      [34|[_cor45|_cor46]]
	  %% Line 1132
	  <[{'igncr',Value}|Opts]> when 'true' ->
	      let <_cor47> =
		  %% Line 1133
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor48> =
		      %% Line 1133
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1133
		      [35|[_cor47|_cor48]]
	  %% Line 1134
	  <[{'icrnl',Value}|Opts]> when 'true' ->
	      let <_cor49> =
		  %% Line 1135
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor50> =
		      %% Line 1135
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1135
		      [36|[_cor49|_cor50]]
	  %% Line 1136
	  <[{'iuclc',Value}|Opts]> when 'true' ->
	      let <_cor51> =
		  %% Line 1137
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor52> =
		      %% Line 1137
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1137
		      [37|[_cor51|_cor52]]
	  %% Line 1138
	  <[{'ixon',Value}|Opts]> when 'true' ->
	      let <_cor53> =
		  %% Line 1139
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor54> =
		      %% Line 1139
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1139
		      [38|[_cor53|_cor54]]
	  %% Line 1140
	  <[{'ixany',Value}|Opts]> when 'true' ->
	      let <_cor55> =
		  %% Line 1141
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor56> =
		      %% Line 1141
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1141
		      [39|[_cor55|_cor56]]
	  %% Line 1142
	  <[{'ixoff',Value}|Opts]> when 'true' ->
	      let <_cor57> =
		  %% Line 1143
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor58> =
		      %% Line 1143
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1143
		      [40|[_cor57|_cor58]]
	  %% Line 1144
	  <[{'imaxbel',Value}|Opts]> when 'true' ->
	      let <_cor59> =
		  %% Line 1145
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor60> =
		      %% Line 1145
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1145
		      [41|[_cor59|_cor60]]
	  %% Line 1146
	  <[{'isig',Value}|Opts]> when 'true' ->
	      let <_cor61> =
		  %% Line 1147
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor62> =
		      %% Line 1147
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1147
		      [50|[_cor61|_cor62]]
	  %% Line 1148
	  <[{'icanon',Value}|Opts]> when 'true' ->
	      let <_cor63> =
		  %% Line 1149
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor64> =
		      %% Line 1149
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1149
		      [51|[_cor63|_cor64]]
	  %% Line 1150
	  <[{'xcase',Value}|Opts]> when 'true' ->
	      let <_cor65> =
		  %% Line 1151
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor66> =
		      %% Line 1151
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1151
		      [52|[_cor65|_cor66]]
	  %% Line 1152
	  <[{'echo',Value}|Opts]> when 'true' ->
	      let <_cor67> =
		  %% Line 1153
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor68> =
		      %% Line 1153
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1153
		      [53|[_cor67|_cor68]]
	  %% Line 1154
	  <[{'echoe',Value}|Opts]> when 'true' ->
	      let <_cor69> =
		  %% Line 1155
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor70> =
		      %% Line 1155
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1155
		      [54|[_cor69|_cor70]]
	  %% Line 1156
	  <[{'echok',Value}|Opts]> when 'true' ->
	      let <_cor71> =
		  %% Line 1157
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor72> =
		      %% Line 1157
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1157
		      [55|[_cor71|_cor72]]
	  %% Line 1158
	  <[{'echonl',Value}|Opts]> when 'true' ->
	      let <_cor73> =
		  %% Line 1159
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor74> =
		      %% Line 1159
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1159
		      [56|[_cor73|_cor74]]
	  %% Line 1160
	  <[{'noflsh',Value}|Opts]> when 'true' ->
	      let <_cor75> =
		  %% Line 1161
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor76> =
		      %% Line 1161
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1161
		      [57|[_cor75|_cor76]]
	  %% Line 1162
	  <[{'tostop',Value}|Opts]> when 'true' ->
	      let <_cor77> =
		  %% Line 1163
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor78> =
		      %% Line 1163
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1163
		      [58|[_cor77|_cor78]]
	  %% Line 1164
	  <[{'iexten',Value}|Opts]> when 'true' ->
	      let <_cor79> =
		  %% Line 1165
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor80> =
		      %% Line 1165
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1165
		      [59|[_cor79|_cor80]]
	  %% Line 1166
	  <[{'echoctl',Value}|Opts]> when 'true' ->
	      let <_cor81> =
		  %% Line 1167
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor82> =
		      %% Line 1167
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1167
		      [60|[_cor81|_cor82]]
	  %% Line 1168
	  <[{'echoke',Value}|Opts]> when 'true' ->
	      let <_cor83> =
		  %% Line 1169
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor84> =
		      %% Line 1169
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1169
		      [61|[_cor83|_cor84]]
	  %% Line 1170
	  <[{'pendin',Value}|Opts]> when 'true' ->
	      let <_cor85> =
		  %% Line 1171
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor86> =
		      %% Line 1171
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1171
		      [62|[_cor85|_cor86]]
	  %% Line 1172
	  <[{'opost',Value}|Opts]> when 'true' ->
	      let <_cor87> =
		  %% Line 1173
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor88> =
		      %% Line 1173
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1173
		      [70|[_cor87|_cor88]]
	  %% Line 1174
	  <[{'olcuc',Value}|Opts]> when 'true' ->
	      let <_cor89> =
		  %% Line 1175
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor90> =
		      %% Line 1175
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1175
		      [71|[_cor89|_cor90]]
	  %% Line 1176
	  <[{'onlcr',Value}|Opts]> when 'true' ->
	      let <_cor91> =
		  %% Line 1177
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor92> =
		      %% Line 1177
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1177
		      [72|[_cor91|_cor92]]
	  %% Line 1178
	  <[{'ocrnl',Value}|Opts]> when 'true' ->
	      let <_cor93> =
		  %% Line 1179
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor94> =
		      %% Line 1179
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1179
		      [73|[_cor93|_cor94]]
	  %% Line 1180
	  <[{'onocr',Value}|Opts]> when 'true' ->
	      let <_cor95> =
		  %% Line 1181
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor96> =
		      %% Line 1181
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1181
		      [74|[_cor95|_cor96]]
	  %% Line 1182
	  <[{'onlret',Value}|Opts]> when 'true' ->
	      let <_cor97> =
		  %% Line 1183
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor98> =
		      %% Line 1183
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1183
		      [75|[_cor97|_cor98]]
	  %% Line 1184
	  <[{'cs7',Value}|Opts]> when 'true' ->
	      let <_cor99> =
		  %% Line 1185
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor100> =
		      %% Line 1185
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1185
		      [90|[_cor99|_cor100]]
	  %% Line 1186
	  <[{'cs8',Value}|Opts]> when 'true' ->
	      let <_cor101> =
		  %% Line 1187
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor102> =
		      %% Line 1187
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1187
		      [91|[_cor101|_cor102]]
	  %% Line 1188
	  <[{'parenb',Value}|Opts]> when 'true' ->
	      let <_cor103> =
		  %% Line 1189
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor104> =
		      %% Line 1189
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1189
		      [92|[_cor103|_cor104]]
	  %% Line 1190
	  <[{'parodd',Value}|Opts]> when 'true' ->
	      let <_cor105> =
		  %% Line 1191
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor106> =
		      %% Line 1191
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1191
		      [93|[_cor105|_cor106]]
	  %% Line 1192
	  <[{'tty_op_ispeed',Value}|Opts]> when 'true' ->
	      let <_cor107> =
		  %% Line 1193
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor108> =
		      %% Line 1193
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1193
		      [128|[_cor107|_cor108]]
	  %% Line 1194
	  <[{'tty_op_ospeed',Value}|Opts]> when 'true' ->
	      let <_cor109> =
		  %% Line 1195
		  #{#<Value>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor110> =
		      %% Line 1195
		      apply 'encode_pty_opts2'/1
			  (Opts)
		  in  %% Line 1195
		      [129|[_cor109|_cor110]]
	  ( <_cor111> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor111})
		  -| [{'function_name',{'encode_pty_opts2',1}}] )
	    -| ['compiler_generated'] )
	end
'decode_pty_opts'/1 =
    %% Line 1197
    fun (_cor0) ->
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <#{}#> when 'true' ->
	      %% Line 1198
	      []
	  %% Line 1199
	  <#{#<0>(8,1,'integer',['unsigned'|['big']]),
	     #<0>(8,1,'integer',['unsigned'|['big']]),
	     #<0>(8,1,'integer',['unsigned'|['big']]),
	     #<0>(8,1,'integer',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 1200
	      []
	  %% Line 1201
	  <#{#<Len>(32,1,'integer',['unsigned'|['big']]),
	     #<Modes>(Len,8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 1202
	      apply 'decode_pty_opts2'/1
		  (Modes)
	  %% Line 1203
	  <Binary> when 'true' ->
	      do  primop 'bs_context_to_binary'
		      (Binary)
		  %% Line 1204
		  apply 'decode_pty_opts2'/1
		      (Binary)
	end
'decode_pty_opts2'/1 =
    %% Line 1206
    fun (_cor0) ->
	case ( _cor0
	       -| ['reuse_for_context'] ) of
	  <#{#<0>(8,1,'integer',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 1207
	      []
	  %% Line 1208
	  <#{#<Code>(8,1,'integer',['unsigned'|['big']]),
	     #<Value>(32,1,'integer',['unsigned'|['big']]),
	     #<Tail>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      let <_cor2> =
		  %% Line 1209
		  case Code of
		    %% Line 1210
		    <1> when 'true' ->
			'vintr'
		    %% Line 1211
		    <2> when 'true' ->
			'vquit'
		    %% Line 1212
		    <3> when 'true' ->
			'verase'
		    %% Line 1213
		    <4> when 'true' ->
			'vkill'
		    %% Line 1214
		    <5> when 'true' ->
			'veof'
		    %% Line 1215
		    <6> when 'true' ->
			'veol'
		    %% Line 1216
		    <7> when 'true' ->
			'veol2'
		    %% Line 1217
		    <8> when 'true' ->
			'vstart'
		    %% Line 1218
		    <9> when 'true' ->
			'vstop'
		    %% Line 1219
		    <10> when 'true' ->
			'vsusp'
		    %% Line 1220
		    <11> when 'true' ->
			'vdsusp'
		    %% Line 1221
		    <12> when 'true' ->
			'vreprint'
		    %% Line 1222
		    <13> when 'true' ->
			'vwerase'
		    %% Line 1223
		    <14> when 'true' ->
			'vlnext'
		    %% Line 1224
		    <15> when 'true' ->
			'vflush'
		    %% Line 1225
		    <16> when 'true' ->
			'vswtch'
		    %% Line 1226
		    <17> when 'true' ->
			'vstatus'
		    %% Line 1227
		    <18> when 'true' ->
			'vdiscard'
		    %% Line 1228
		    <30> when 'true' ->
			'ignpar'
		    %% Line 1229
		    <31> when 'true' ->
			'parmrk'
		    %% Line 1230
		    <32> when 'true' ->
			'inpck'
		    %% Line 1231
		    <33> when 'true' ->
			'istrip'
		    %% Line 1232
		    <34> when 'true' ->
			'inlcr'
		    %% Line 1233
		    <35> when 'true' ->
			'igncr'
		    %% Line 1234
		    <36> when 'true' ->
			'icrnl'
		    %% Line 1235
		    <37> when 'true' ->
			'iuclc'
		    %% Line 1236
		    <38> when 'true' ->
			'ixon'
		    %% Line 1237
		    <39> when 'true' ->
			'ixany'
		    %% Line 1238
		    <40> when 'true' ->
			'ixoff'
		    %% Line 1239
		    <41> when 'true' ->
			'imaxbel'
		    %% Line 1240
		    <50> when 'true' ->
			'isig'
		    %% Line 1241
		    <51> when 'true' ->
			'icanon'
		    %% Line 1242
		    <52> when 'true' ->
			'xcase'
		    %% Line 1243
		    <53> when 'true' ->
			'echo'
		    %% Line 1244
		    <54> when 'true' ->
			'echoe'
		    %% Line 1245
		    <55> when 'true' ->
			'echok'
		    %% Line 1246
		    <56> when 'true' ->
			'echonl'
		    %% Line 1247
		    <57> when 'true' ->
			'noflsh'
		    %% Line 1248
		    <58> when 'true' ->
			'tostop'
		    %% Line 1249
		    <59> when 'true' ->
			'iexten'
		    %% Line 1250
		    <60> when 'true' ->
			'echoctl'
		    %% Line 1251
		    <61> when 'true' ->
			'echoke'
		    %% Line 1252
		    <62> when 'true' ->
			'pendin'
		    %% Line 1253
		    <70> when 'true' ->
			'opost'
		    %% Line 1254
		    <71> when 'true' ->
			'olcuc'
		    %% Line 1255
		    <72> when 'true' ->
			'onlcr'
		    %% Line 1256
		    <73> when 'true' ->
			'ocrnl'
		    %% Line 1257
		    <74> when 'true' ->
			'onocr'
		    %% Line 1258
		    <75> when 'true' ->
			'onlret'
		    %% Line 1259
		    <90> when 'true' ->
			'cs7'
		    %% Line 1260
		    <91> when 'true' ->
			'cs8'
		    %% Line 1261
		    <92> when 'true' ->
			'parenb'
		    %% Line 1262
		    <93> when 'true' ->
			'parodd'
		    %% Line 1263
		    <128> when 'true' ->
			'tty_op_ispeed'
		    %% Line 1264
		    <129> when 'true' ->
			'tty_op_ospeed'
		    %% Line 1265
		    <_cor6> when 'true' ->
			Code
		  end
	      in  let <_cor4> =
		      %% Line 1267
		      apply 'decode_pty_opts2'/1
			  (Tail)
		  in  %% Line 1267
		      [{_cor2,Value}|_cor4]
	  ( <_cor5> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor5)
		    ( primop 'match_fail'
			  ({'function_clause',_cor5})
		      -| [{'function_name',{'decode_pty_opts2',1}}] )
	    -| ['compiler_generated'] )
	end
'decode_ip'/1 =
    %% Line 1269
    fun (_cor0) ->
	case _cor0 of
	  <Addr>
	      when call 'erlang':'is_binary'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 1270
		  call 'erlang':'binary_to_list'
		      (Addr)
	      in  %% Line 1270
		  case call 'inet_parse':'address'
			   (_cor1) of
		    %% Line 1271
		    <{'error',_cor4}> when 'true' ->
			Addr
		    %% Line 1272
		    <{'ok',A}> when 'true' ->
			A
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'decode_ip',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('ssh_connection')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('ssh_connection', _cor0)
end