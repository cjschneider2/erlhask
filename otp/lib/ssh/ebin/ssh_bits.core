module 'ssh_bits' ['encode'/2,
		   'erlint'/2,
		   'module_info'/0,
		   'module_info'/1,
		   'mpint'/1,
		   'name_list'/1,
		   'random'/1,
		   'string'/1]
    attributes []
'name_concat'/1 =
    %% Line 36
    fun (_cor0) ->
	case _cor0 of
	  <[Name|[]]>
	      when call 'erlang':'is_atom'
		    (Name) ->
	      call 'erlang':'atom_to_list'
		  (Name)
	  %% Line 37
	  <[Name|[]]>
	      when call 'erlang':'is_list'
		    (Name) ->
	      Name
	  %% Line 38
	  <[Name|Ns]> when 'true' ->
	      %% Line 39
	      case <> of
		<>
		    when call 'erlang':'is_atom'
			  (Name) ->
		    let <_cor1> =
			%% Line 40
			call 'erlang':'atom_to_list'
			    (Name)
		    in  let <_cor2> =
			    %% Line 40
			    apply 'name_concat'/1
				(Ns)
			in  %% Line 40
			    [_cor1|[[44]|_cor2]]
		%% Line 41
		<>
		    when call 'erlang':'is_list'
			  (Name) ->
		    let <_cor3> =
			%% Line 42
			apply 'name_concat'/1
			    (Ns)
		    in  %% Line 42
			[Name|[[44]|_cor3]]
		( <> when 'true' ->
		      primop 'match_fail'
			  ('if_clause')
		  -| ['compiler_generated'] )
	      end
	  %% Line 44
	  <[]> when 'true' ->
	      []
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'name_concat',1}}] )
	    -| ['compiler_generated'] )
	end
'name_list'/1 =
    %% Line 47
    fun (_cor0) ->
	let <_cor4> =
	    %% Line 48
	    ( fun (_cor2) ->
		  let <_cor1> =
		      call 'erlang':'size'
			  (_cor2)
		  in  #{#<_cor1>(32,1,'integer',['unsigned'|['big']]),
			#<_cor2>('all',8,'binary',['unsigned'|['big']])}#
	      -| [{'id',{0,0,'-name_list/1-fun-0-'}}] )
	in  let <_cor5> =
		%% Line 48
		apply 'name_concat'/1
		    (_cor0)
	    in  let <_cor6> =
		    %% Line 48
		    call 'erlang':'list_to_binary'
			(_cor5)
		in  %% Line 48
		    apply _cor4
			(_cor6)
'string'/1 =
    %% Line 51
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 52
	    call 'erlang':'list_to_binary'
		(_cor0)
	in  let <_cor3> =
		%% Line 52
		call 'erlang':'size'
		    (_cor2)
	    in  let <_cor1> =
		    %% Line 52
		    call 'erlang':'list_to_binary'
			(_cor0)
		in  %% Line 52
		    #{#<_cor3>(32,1,'integer',['unsigned'|['big']]),
		      #<_cor1>('all',8,'binary',['unsigned'|['big']])}#
'mpint'/1 =
    %% Line 56
    fun (_cor0) ->
	case _cor0 of
	  <X>
	      when call 'erlang':'<'
		    (_cor0,
		     0) ->
	      %% Line 57
	      case <> of
		<>
		    when call 'erlang':'=='
			  (X,
			   -1) ->
		    %% Line 58
		    #{#<0>(8,1,'integer',['unsigned'|['big']]),
		      #<0>(8,1,'integer',['unsigned'|['big']]),
		      #<0>(8,1,'integer',['unsigned'|['big']]),
		      #<1>(8,1,'integer',['unsigned'|['big']]),
		      #<255>(8,1,'integer',['unsigned'|['big']])}#
		%% Line 59
		<> when 'true' ->
		    %% Line 60
		    apply 'mpint_neg'/3
			(X, 0, [])
	      end
	  %% Line 62
	  <X> when 'true' ->
	      %% Line 63
	      case <> of
		<>
		    when call 'erlang':'=='
			  (X,
			   0) ->
		    %% Line 64
		    #{#<0>(8,1,'integer',['unsigned'|['big']]),
		      #<0>(8,1,'integer',['unsigned'|['big']]),
		      #<0>(8,1,'integer',['unsigned'|['big']]),
		      #<0>(8,1,'integer',['unsigned'|['big']])}#
		%% Line 65
		<> when 'true' ->
		    %% Line 66
		    apply 'mpint_pos'/3
			(X, 0, [])
	      end
	end
'mpint_neg'/3 =
    %% Line 69
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <-1,I,Ds = [MSB|_cor13]> when 'true' ->
	      %% Line 70
	      case <> of
		<>
		    when try
			  let <_cor3> =
			      call 'erlang':'band'
				  (MSB, 128)
			  in  call 'erlang':'=/='
				  (_cor3, 128)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <_cor5> =
			%% Line 71
			call 'erlang':'+'
			    (I, 1)
		    in  let <_cor4> =
			    %% Line 71
			    call 'erlang':'list_to_binary'
				([255|Ds])
			in  %% Line 71
			    #{#<_cor5>(32,1,'integer',['unsigned'|['big']]),
			      #<_cor4>('all',8,'binary',['unsigned'|['big']])}#
		%% Line 72
		<> when 'true' ->
		    let <_cor6> =
			%% Line 73
			call 'erlang':'list_to_binary'
			    (Ds)
		    in  %% Line 73
			#{#<I>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor6>('all',8,'binary',['unsigned'|['big']])}#
	      end
	  %% Line 75
	  <X,I,Ds> when 'true' ->
	      let <_cor9> =
		  %% Line 76
		  call 'erlang':'bsr'
		      (X, 8)
	      in  let <_cor8> =
		      %% Line 76
		      call 'erlang':'+'
			  (I, 1)
		  in  let <_cor7> =
			  %% Line 76
			  call 'erlang':'band'
			      (X, 255)
		      in  %% Line 76
			  apply 'mpint_neg'/3
			      (_cor9, _cor8, [_cor7|Ds])
	end
'mpint_pos'/3 =
    %% Line 78
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <0,I,Ds = [MSB|_cor13]> when 'true' ->
	      %% Line 79
	      case <> of
		<>
		    when try
			  let <_cor3> =
			      call 'erlang':'band'
				  (MSB, 128)
			  in  call 'erlang':'=='
				  (_cor3, 128)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <_cor5> =
			%% Line 80
			call 'erlang':'+'
			    (I, 1)
		    in  let <_cor4> =
			    %% Line 80
			    call 'erlang':'list_to_binary'
				([0|Ds])
			in  %% Line 80
			    #{#<_cor5>(32,1,'integer',['unsigned'|['big']]),
			      #<_cor4>('all',8,'binary',['unsigned'|['big']])}#
		%% Line 81
		<> when 'true' ->
		    let <_cor6> =
			%% Line 82
			call 'erlang':'list_to_binary'
			    (Ds)
		    in  %% Line 82
			#{#<I>(32,1,'integer',['unsigned'|['big']]),
			  #<_cor6>('all',8,'binary',['unsigned'|['big']])}#
	      end
	  %% Line 84
	  <X,I,Ds> when 'true' ->
	      let <_cor9> =
		  %% Line 85
		  call 'erlang':'bsr'
		      (X, 8)
	      in  let <_cor8> =
		      %% Line 85
		      call 'erlang':'+'
			  (I, 1)
		  in  let <_cor7> =
			  %% Line 85
			  call 'erlang':'band'
			      (X, 255)
		      in  %% Line 85
			  apply 'mpint_pos'/3
			      (_cor9, _cor8, [_cor7|Ds])
	end
'encode'/2 =
    %% Line 88
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 89
	    apply 'enc'/2
		(_cor1, _cor0)
	in  %% Line 89
	    call 'erlang':'list_to_binary'
		(_cor2)
'enc'/2 =
    %% Line 94
    fun (_cor1,_cor0) ->
	%% Line 95
	apply 'enc'/3
	    (_cor1, _cor0, 0)
'enc'/3 =
    %% Line 97
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Xs,['boolean'|Ts],Offset> when 'true' ->
	      let <X> =
		  %% Line 98
		  call 'erlang':'hd'
		      (Xs)
	      in  let <_cor5> =
		      %% Line 99
		      case X of
			<'true'> when 'true' ->
			    #{#<1>(8,1,'integer',['unsigned'|['big']])}#
			<'false'> when 'true' ->
			    #{#<0>(8,1,'integer',['unsigned'|['big']])}#
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor4})
			  -| ['compiler_generated'] )
		      end
		  in  let <_cor7> =
			  %% Line 99
			  call 'erlang':'tl'
			      (Xs)
		      in  let <_cor6> =
			      %% Line 99
			      call 'erlang':'+'
				  (Offset, 1)
			  in  let <_cor8> =
				  %% Line 99
				  apply 'enc'/3
				      (_cor7, Ts, _cor6)
			      in  %% Line 99
				  [_cor5|_cor8]
	  %% Line 100
	  <Xs,['byte'|Ts],Offset> when 'true' ->
	      let <X> =
		  %% Line 101
		  call 'erlang':'hd'
		      (Xs)
	      in  let <_cor10> =
		      %% Line 102
		      #{#<X>(8,1,'integer',['unsigned'|['big']])}#
		  in  let <_cor12> =
			  %% Line 102
			  call 'erlang':'tl'
			      (Xs)
		      in  let <_cor11> =
			      %% Line 102
			      call 'erlang':'+'
				  (Offset, 1)
			  in  let <_cor13> =
				  %% Line 102
				  apply 'enc'/3
				      (_cor12, Ts, _cor11)
			      in  %% Line 102
				  [_cor10|_cor13]
	  %% Line 103
	  <Xs,['uint16'|Ts],Offset> when 'true' ->
	      let <X> =
		  %% Line 104
		  call 'erlang':'hd'
		      (Xs)
	      in  let <_cor15> =
		      %% Line 105
		      #{#<X>(16,1,'integer',['unsigned'|['big']])}#
		  in  let <_cor17> =
			  %% Line 105
			  call 'erlang':'tl'
			      (Xs)
		      in  let <_cor16> =
			      %% Line 105
			      call 'erlang':'+'
				  (Offset, 2)
			  in  let <_cor18> =
				  %% Line 105
				  apply 'enc'/3
				      (_cor17, Ts, _cor16)
			      in  %% Line 105
				  [_cor15|_cor18]
	  %% Line 106
	  <Xs,['uint32'|Ts],Offset> when 'true' ->
	      let <X> =
		  %% Line 107
		  call 'erlang':'hd'
		      (Xs)
	      in  let <_cor20> =
		      %% Line 108
		      #{#<X>(32,1,'integer',['unsigned'|['big']])}#
		  in  let <_cor22> =
			  %% Line 108
			  call 'erlang':'tl'
			      (Xs)
		      in  let <_cor21> =
			      %% Line 108
			      call 'erlang':'+'
				  (Offset, 4)
			  in  let <_cor23> =
				  %% Line 108
				  apply 'enc'/3
				      (_cor22, Ts, _cor21)
			      in  %% Line 108
				  [_cor20|_cor23]
	  %% Line 109
	  <Xs,['uint64'|Ts],Offset> when 'true' ->
	      let <X> =
		  %% Line 110
		  call 'erlang':'hd'
		      (Xs)
	      in  let <_cor25> =
		      %% Line 111
		      #{#<X>(64,1,'integer',['unsigned'|['big']])}#
		  in  let <_cor27> =
			  %% Line 111
			  call 'erlang':'tl'
			      (Xs)
		      in  let <_cor26> =
			      %% Line 111
			      call 'erlang':'+'
				  (Offset, 8)
			  in  let <_cor28> =
				  %% Line 111
				  apply 'enc'/3
				      (_cor27, Ts, _cor26)
			      in  %% Line 111
				  [_cor25|_cor28]
	  %% Line 112
	  <Xs,['mpint'|Ts],Offset> when 'true' ->
	      let <_cor29> =
		  %% Line 113
		  call 'erlang':'hd'
		      (Xs)
	      in  let <Y> =
		      %% Line 113
		      apply 'mpint'/1
			  (_cor29)
		  in  let <_cor33> =
			  %% Line 114
			  call 'erlang':'tl'
			      (Xs)
		      in  let <_cor31> =
			      %% Line 114
			      call 'erlang':'size'
				  (Y)
			  in  let <_cor32> =
				  %% Line 114
				  call 'erlang':'+'
				      (Offset, _cor31)
			      in  let <_cor34> =
				      %% Line 114
				      apply 'enc'/3
					  (_cor33, Ts, _cor32)
				  in  %% Line 114
				      [Y|_cor34]
	  %% Line 115
	  <Xs,['string'|Ts],Offset> when 'true' ->
	      let <X0> =
		  %% Line 116
		  call 'erlang':'hd'
		      (Xs)
	      in  let <_cor37> =
		      %% Line 117
		      call 'erlang':'list_to_binary'
			  (X0)
		  in  let <_cor38> =
			  %% Line 117
			  call 'erlang':'size'
			      (_cor37)
		      in  let <_cor36> =
			      %% Line 117
			      call 'erlang':'list_to_binary'
				  (X0)
			  in  let <Y> =
				  %% Line 117
				  #{#<_cor38>(32,1,'integer',['unsigned'|['big']]),
				    #<_cor36>('all',8,'binary',['unsigned'|['big']])}#
			      in  let <_cor42> =
				      %% Line 118
				      call 'erlang':'tl'
					  (Xs)
				  in  let <_cor40> =
					  %% Line 118
					  call 'erlang':'size'
					      (Y)
				      in  let <_cor41> =
					      %% Line 118
					      call 'erlang':'+'
						  (Offset, _cor40)
					  in  let <_cor43> =
						  %% Line 118
						  apply 'enc'/3
						      (_cor42, Ts, _cor41)
					      in  %% Line 118
						  [Y|_cor43]
	  %% Line 119
	  <Xs,['string_utf8'|Ts],Offset> when 'true' ->
	      let <X0> =
		  %% Line 120
		  call 'erlang':'hd'
		      (Xs)
	      in  let <_cor46> =
		      %% Line 121
		      call 'unicode':'characters_to_binary'
			  (X0)
		  in  let <_cor47> =
			  %% Line 121
			  call 'erlang':'size'
			      (_cor46)
		      in  let <_cor45> =
			      %% Line 121
			      call 'unicode':'characters_to_binary'
				  (X0)
			  in  let <Y> =
				  %% Line 121
				  #{#<_cor47>(32,1,'integer',['unsigned'|['big']]),
				    #<_cor45>('all',8,'binary',['unsigned'|['big']])}#
			      in  let <_cor51> =
				      %% Line 122
				      call 'erlang':'tl'
					  (Xs)
				  in  let <_cor49> =
					  %% Line 122
					  call 'erlang':'size'
					      (Y)
				      in  let <_cor50> =
					      %% Line 122
					      call 'erlang':'+'
						  (Offset, _cor49)
					  in  let <_cor52> =
						  %% Line 122
						  apply 'enc'/3
						      (_cor51, Ts, _cor50)
					      in  %% Line 122
						  [Y|_cor52]
	  %% Line 123
	  <Xs,['binary'|Ts],Offset> when 'true' ->
	      let <X0> =
		  %% Line 124
		  call 'erlang':'hd'
		      (Xs)
	      in  let <_cor54> =
		      %% Line 125
		      call 'erlang':'size'
			  (X0)
		  in  let <Y> =
			  %% Line 125
			  #{#<_cor54>(32,1,'integer',['unsigned'|['big']]),
			    #<X0>('all',8,'binary',['unsigned'|['big']])}#
		      in  let <_cor58> =
			      %% Line 126
			      call 'erlang':'tl'
				  (Xs)
			  in  let <_cor56> =
				  %% Line 126
				  call 'erlang':'size'
				      (Y)
			      in  let <_cor57> =
				      %% Line 126
				      call 'erlang':'+'
					  (Offset, _cor56)
				  in  let <_cor59> =
					  %% Line 126
					  apply 'enc'/3
					      (_cor58, Ts, _cor57)
				      in  %% Line 126
					  [Y|_cor59]
	  %% Line 127
	  <Xs,['name_list'|Ts],Offset> when 'true' ->
	      let <X0> =
		  %% Line 128
		  call 'erlang':'hd'
		      (Xs)
	      in  let <_cor64> =
		      %% Line 129
		      ( fun (_cor62) ->
			    let <_cor61> =
				call 'erlang':'size'
				    (_cor62)
			    in  #{#<_cor61>(32,1,'integer',['unsigned'|['big']]),
				  #<_cor62>('all',8,'binary',['unsigned'|['big']])}#
			-| [{'id',{0,0,'-enc/3-fun-0-'}}] )
		  in  let <_cor65> =
			  %% Line 129
			  apply 'name_concat'/1
			      (X0)
		      in  let <_cor66> =
			      %% Line 129
			      call 'erlang':'list_to_binary'
				  (_cor65)
			  in  let <Y> =
				  %% Line 129
				  apply _cor64
				      (_cor66)
			      in  let <_cor70> =
				      %% Line 130
				      call 'erlang':'tl'
					  (Xs)
				  in  let <_cor68> =
					  %% Line 130
					  call 'erlang':'size'
					      (Y)
				      in  let <_cor69> =
					      %% Line 130
					      call 'erlang':'+'
						  (Offset, _cor68)
					  in  let <_cor71> =
						  %% Line 130
						  apply 'enc'/3
						      (_cor70, Ts, _cor69)
					      in  %% Line 130
						  [Y|_cor71]
	  %% Line 131
	  <Xs,['cookie'|Ts],Offset> when 'true' ->
	      let <_cor72> =
		  %% Line 132
		  apply 'random'/1
		      (16)
	      in  let <_cor74> =
		      %% Line 132
		      call 'erlang':'tl'
			  (Xs)
		  in  let <_cor73> =
			  %% Line 132
			  call 'erlang':'+'
			      (Offset, 16)
		      in  let <_cor75> =
			      %% Line 132
			      apply 'enc'/3
				  (_cor74, Ts, _cor73)
			  in  %% Line 132
			      [_cor72|_cor75]
	  %% Line 133
	  <Xs,[{'pad',N}|Ts],Offset> when 'true' ->
	      let <_cor76> =
		  %% Line 134
		  call 'erlang':'rem'
		      (Offset, N)
	      in  let <_cor77> =
		      %% Line 134
		      call 'erlang':'-'
			  (N, _cor76)
		  in  let <K> =
			  %% Line 134
			  call 'erlang':'rem'
			      (_cor77, N)
		      in  let <_cor79> =
			      %% Line 135
			      apply 'fill_bits'/2
				  (K, 0)
			  in  let <_cor80> =
				  %% Line 135
				  call 'erlang':'+'
				      (Offset, K)
			      in  let <_cor81> =
				      %% Line 135
				      apply 'enc'/3
					  (Xs, Ts, _cor80)
				  in  %% Line 135
				      [_cor79|_cor81]
	  %% Line 136
	  <Xs,['...'],_X_Offset> when 'true' ->
	      let <X> =
		  %% Line 137
		  call 'erlang':'hd'
		      (Xs)
	      in  %% Line 138
		  case <> of
		    <>
			when call 'erlang':'is_binary'
			      (X) ->
			%% Line 139
			[X|[]]
		    %% Line 140
		    <>
			when call 'erlang':'is_list'
			      (X) ->
			let <_cor83> =
			    %% Line 141
			    call 'erlang':'list_to_binary'
				(X)
			in  %% Line 141
			    [_cor83|[]]
		    %% Line 142
		    <>
			when call 'erlang':'=:='
			      (X,
			       'undefined') ->
			%% Line 143
			[]
		    ( <> when 'true' ->
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	  %% Line 145
	  <[],[],_cor87> when 'true' ->
	      %% Line 146
	      []
	  ( <_cor86,_cor85,_cor84> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor86,_cor85,_cor84})
		  -| [{'function_name',{'enc',3}}] )
	    -| ['compiler_generated'] )
	end
'erlint'/2 =
    %% Line 148
    fun (_cor1,_cor0) ->
	let <Sz> =
	    %% Line 149
	    call 'erlang':'*'
		(_cor1, 8)
	in  %% Line 150
	    case ( _cor0
		   -| ['reuse_for_context'] ) of
	      <#{#<Int>(Sz,1,'integer',['signed'|['big']])}#> when 'true' ->
		  %% Line 151
		  Int
	      ( <_cor3> when 'true' ->
		    do  primop 'bs_context_to_binary'
			    (_cor3)
			primop 'match_fail'
			    ({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'fill_bits'/2 =
    %% Line 156
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 157
	    apply 'fill'/2
		(_cor1, _cor0)
	in  %% Line 157
	    call 'erlang':'list_to_binary'
		(_cor2)
'fill'/2 =
    %% Line 159
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,_X_C> when 'true' ->
	      []
	  %% Line 160
	  <1,C> when 'true' ->
	      [C|[]]
	  %% Line 161
	  <N,C> when 'true' ->
	      let <_cor2> =
		  %% Line 162
		  call 'erlang':'div'
		      (N, 2)
	      in  let <Cs> =
		      %% Line 162
		      apply 'fill'/2
			  (_cor2, C)
		  in  let <Cs1> =
			  %% Line 163
			  [Cs|[Cs|[]]]
		      in  %% Line 164
			  case <> of
			    <>
				when try
				      let <_cor5> =
					  call 'erlang':'band'
					      (N, 1)
				      in  call 'erlang':'=='
					      (_cor5, 0)
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false' ->
				%% Line 165
				Cs1
			    %% Line 166
			    <> when 'true' ->
				%% Line 167
				[C|[Cs|[Cs|[]]]]
			  end
	end
'random'/1 =
    %% Line 174
    fun (_cor0) ->
	%% Line 175
	call 'crypto':'strong_rand_bytes'
	    (_cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('ssh_bits')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('ssh_bits', _cor0)
end