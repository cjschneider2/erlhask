module 'ssh_auth' ['handle_userauth_info_request'/3,
		   'handle_userauth_info_response'/2,
		   'handle_userauth_request'/3,
		   'init_userauth_request_msg'/1,
		   'keyboard_interactive_msg'/1,
		   'module_info'/0,
		   'module_info'/1,
		   'password_msg'/1,
		   'publickey_msg'/1,
		   'service_request_msg'/1,
		   'userauth_request_msg'/1]
    attributes [%% Line 11
		'type' =
		    %% Line 11
		    [{{'record','AttributePKCS-7'},[{'record_field',12,{'atom',12,'type'}}|[{'record_field',12,{'atom',12,'values'}}]],[]}],
		%% Line 14
		'type' =
		    %% Line 14
		    [{{'record','AlgorithmIdentifierPKSC-7'},[{'record_field',15,{'atom',15,'algorithm'}}|[{'record_field',15,{'atom',15,'parameters'},{'atom',15,'asn1_NOVALUE'}}]],[]}],
		%% Line 17
		'type' =
		    %% Line 17
		    [{{'record','AlgorithmIdentifierPKCS-10'},[{'record_field',18,{'atom',18,'algorithm'}}|[{'record_field',18,{'atom',18,'parameters'},{'atom',18,'asn1_NOVALUE'}}]],[]}],
		%% Line 20
		'type' =
		    %% Line 20
		    [{{'record','AttributePKCS-10'},[{'record_field',21,{'atom',21,'type'}}|[{'record_field',21,{'atom',21,'values'}}]],[]}],
		%% Line 23
		'type' =
		    %% Line 23
		    [{{'record','SubjectPublicKeyInfo-PKCS-10'},[{'record_field',24,{'atom',24,'algorithm'}}|[{'record_field',24,{'atom',24,'subjectPublicKey'}}]],[]}],
		%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','ECPrivateKey'},[{'record_field',27,{'atom',27,'version'}}|[{'record_field',27,{'atom',27,'privateKey'}}|[{'record_field',27,{'atom',27,'parameters'},{'atom',27,'asn1_NOVALUE'}}|[{'record_field',27,{'atom',27,'publicKey'},{'atom',27,'asn1_NOVALUE'}}]]]],[]}],
		%% Line 29
		'type' =
		    %% Line 29
		    [{{'record','DSAPrivateKey'},[{'record_field',30,{'atom',30,'version'}}|[{'record_field',30,{'atom',30,'p'}}|[{'record_field',30,{'atom',30,'q'}}|[{'record_field',30,{'atom',30,'g'}}|[{'record_field',30,{'atom',30,'y'}}|[{'record_field',30,{'atom',30,'x'}}]]]]]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','DHParameter'},[{'record_field',33,{'atom',33,'prime'}}|[{'record_field',33,{'atom',33,'base'}}|[{'record_field',33,{'atom',33,'privateValueLength'},{'atom',33,'asn1_NOVALUE'}}]]],[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{{'record','DigestInfoNull'},[{'record_field',36,{'atom',36,'digestAlgorithm'}}|[{'record_field',36,{'atom',36,'digest'}}]],[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','DigestInfoPKCS-1'},[{'record_field',39,{'atom',39,'digestAlgorithm'}}|[{'record_field',39,{'atom',39,'digest'}}]],[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','RSASSA-PSS-params'},[{'record_field',42,{'atom',42,'hashAlgorithm'}}|[{'record_field',42,{'atom',42,'maskGenAlgorithm'}}|[{'record_field',42,{'atom',42,'saltLength'},{'atom',42,'asn1_DEFAULT'}}|[{'record_field',42,{'atom',42,'trailerField'},{'atom',42,'asn1_DEFAULT'}}]]]],[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','AlgorithmNull'},[{'record_field',45,{'atom',45,'algorithm'}}|[{'record_field',45,{'atom',45,'parameters'}}]],[]}],
		%% Line 47
		'type' =
		    %% Line 47
		    [{{'record','Algorithm'},[{'record_field',48,{'atom',48,'algorithm'}}|[{'record_field',48,{'atom',48,'parameters'},{'atom',48,'asn1_NOVALUE'}}]],[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','OtherPrimeInfo'},[{'record_field',51,{'atom',51,'prime'}}|[{'record_field',51,{'atom',51,'exponent'}}|[{'record_field',51,{'atom',51,'coefficient'}}]]],[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{{'record','RSAPrivateKey'},[{'record_field',54,{'atom',54,'version'}}|[{'record_field',54,{'atom',54,'modulus'}}|[{'record_field',54,{'atom',54,'publicExponent'}}|[{'record_field',54,{'atom',54,'privateExponent'}}|[{'record_field',54,{'atom',54,'prime1'}}|[{'record_field',54,{'atom',54,'prime2'}}|[{'record_field',54,{'atom',54,'exponent1'}}|[{'record_field',54,{'atom',54,'exponent2'}}|[{'record_field',54,{'atom',54,'coefficient'}}|[{'record_field',54,{'atom',54,'otherPrimeInfos'},{'atom',54,'asn1_NOVALUE'}}]]]]]]]]]],[]}],
		%% Line 56
		'type' =
		    %% Line 56
		    [{{'record','RSAPublicKey'},[{'record_field',57,{'atom',57,'modulus'}}|[{'record_field',57,{'atom',57,'publicExponent'}}]],[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{{'record','Curve'},[{'record_field',60,{'atom',60,'a'}}|[{'record_field',60,{'atom',60,'b'}}|[{'record_field',60,{'atom',60,'seed'},{'atom',60,'asn1_NOVALUE'}}]]],[]}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{{'record','ECParameters'},[{'record_field',63,{'atom',63,'version'}}|[{'record_field',63,{'atom',63,'fieldID'}}|[{'record_field',63,{'atom',63,'curve'}}|[{'record_field',63,{'atom',63,'base'}}|[{'record_field',63,{'atom',63,'order'}}|[{'record_field',63,{'atom',63,'cofactor'},{'atom',63,'asn1_NOVALUE'}}]]]]]],[]}],
		%% Line 65
		'type' =
		    %% Line 65
		    [{{'record','Pentanomial'},[{'record_field',66,{'atom',66,'k1'}}|[{'record_field',66,{'atom',66,'k2'}}|[{'record_field',66,{'atom',66,'k3'}}]]],[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{{'record','Characteristic-two'},[{'record_field',69,{'atom',69,'m'}}|[{'record_field',69,{'atom',69,'basis'}}|[{'record_field',69,{'atom',69,'parameters'}}]]],[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{{'record','ECDSA-Sig-Value'},[{'record_field',72,{'atom',72,'r'}}|[{'record_field',72,{'atom',72,'s'}}]],[]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{{'record','FieldID'},[{'record_field',75,{'atom',75,'fieldType'}}|[{'record_field',75,{'atom',75,'parameters'}}]],[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{{'record','ValidationParms'},[{'record_field',78,{'atom',78,'seed'}}|[{'record_field',78,{'atom',78,'pgenCounter'}}]],[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{{'record','DomainParameters'},[{'record_field',81,{'atom',81,'p'}}|[{'record_field',81,{'atom',81,'g'}}|[{'record_field',81,{'atom',81,'q'}}|[{'record_field',81,{'atom',81,'j'},{'atom',81,'asn1_NOVALUE'}}|[{'record_field',81,{'atom',81,'validationParms'},{'atom',81,'asn1_NOVALUE'}}]]]]],[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{{'record','Dss-Sig-Value'},[{'record_field',84,{'atom',84,'r'}}|[{'record_field',84,{'atom',84,'s'}}]],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{{'record','Dss-Parms'},[{'record_field',87,{'atom',87,'p'}}|[{'record_field',87,{'atom',87,'q'}}|[{'record_field',87,{'atom',87,'g'}}]]],[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','ACClearAttrs'},[{'record_field',90,{'atom',90,'acIssuer'}}|[{'record_field',90,{'atom',90,'acSerial'}}|[{'record_field',90,{'atom',90,'attrs'}}]]],[]}],
		%% Line 92
		'type' =
		    %% Line 92
		    [{{'record','AAControls'},[{'record_field',93,{'atom',93,'pathLenConstraint'},{'atom',93,'asn1_NOVALUE'}}|[{'record_field',93,{'atom',93,'permittedAttrs'},{'atom',93,'asn1_NOVALUE'}}|[{'record_field',93,{'atom',93,'excludedAttrs'},{'atom',93,'asn1_NOVALUE'}}|[{'record_field',93,{'atom',93,'permitUnSpecified'},{'atom',93,'asn1_DEFAULT'}}]]]],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','SecurityCategory'},[{'record_field',96,{'atom',96,'type'}}|[{'record_field',96,{'atom',96,'value'}}]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','Clearance'},[{'record_field',99,{'atom',99,'policyId'}}|[{'record_field',99,{'atom',99,'classList'},{'atom',99,'asn1_DEFAULT'}}|[{'record_field',99,{'atom',99,'securityCategories'},{'atom',99,'asn1_NOVALUE'}}]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','RoleSyntax'},[{'record_field',102,{'atom',102,'roleAuthority'},{'atom',102,'asn1_NOVALUE'}}|[{'record_field',102,{'atom',102,'roleName'}}]],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{{'record','SvceAuthInfo'},[{'record_field',105,{'atom',105,'service'}}|[{'record_field',105,{'atom',105,'ident'}}|[{'record_field',105,{'atom',105,'authInfo'},{'atom',105,'asn1_NOVALUE'}}]]],[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{{'record','IetfAttrSyntax'},[{'record_field',108,{'atom',108,'policyAuthority'},{'atom',108,'asn1_NOVALUE'}}|[{'record_field',108,{'atom',108,'values'}}]],[]}],
		%% Line 110
		'type' =
		    %% Line 110
		    [{{'record','TargetCert'},[{'record_field',111,{'atom',111,'targetCertificate'}}|[{'record_field',111,{'atom',111,'targetName'},{'atom',111,'asn1_NOVALUE'}}|[{'record_field',111,{'atom',111,'certDigestInfo'},{'atom',111,'asn1_NOVALUE'}}]]],[]}],
		%% Line 113
		'type' =
		    %% Line 113
		    [{{'record','AttCertValidityPeriod'},[{'record_field',114,{'atom',114,'notBeforeTime'}}|[{'record_field',114,{'atom',114,'notAfterTime'}}]],[]}],
		%% Line 116
		'type' =
		    %% Line 116
		    [{{'record','IssuerSerial'},[{'record_field',117,{'atom',117,'issuer'}}|[{'record_field',117,{'atom',117,'serial'}}|[{'record_field',117,{'atom',117,'issuerUID'},{'atom',117,'asn1_NOVALUE'}}]]],[]}],
		%% Line 119
		'type' =
		    %% Line 119
		    [{{'record','V2Form'},[{'record_field',120,{'atom',120,'issuerName'},{'atom',120,'asn1_NOVALUE'}}|[{'record_field',120,{'atom',120,'baseCertificateID'},{'atom',120,'asn1_NOVALUE'}}|[{'record_field',120,{'atom',120,'objectDigestInfo'},{'atom',120,'asn1_NOVALUE'}}]]],[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{{'record','ObjectDigestInfo'},[{'record_field',123,{'atom',123,'digestedObjectType'}}|[{'record_field',123,{'atom',123,'otherObjectTypeID'},{'atom',123,'asn1_NOVALUE'}}|[{'record_field',123,{'atom',123,'digestAlgorithm'}}|[{'record_field',123,{'atom',123,'objectDigest'}}]]]],[]}],
		%% Line 125
		'type' =
		    %% Line 125
		    [{{'record','Holder'},[{'record_field',126,{'atom',126,'baseCertificateID'},{'atom',126,'asn1_NOVALUE'}}|[{'record_field',126,{'atom',126,'entityName'},{'atom',126,'asn1_NOVALUE'}}|[{'record_field',126,{'atom',126,'objectDigestInfo'},{'atom',126,'asn1_NOVALUE'}}]]],[]}],
		%% Line 128
		'type' =
		    %% Line 128
		    [{{'record','AttributeCertificateInfo'},[{'record_field',129,{'atom',129,'version'}}|[{'record_field',129,{'atom',129,'holder'}}|[{'record_field',129,{'atom',129,'issuer'}}|[{'record_field',129,{'atom',129,'signature'}}|[{'record_field',129,{'atom',129,'serialNumber'}}|[{'record_field',129,{'atom',129,'attrCertValidityPeriod'}}|[{'record_field',129,{'atom',129,'attributes'}}|[{'record_field',129,{'atom',129,'issuerUniqueID'},{'atom',129,'asn1_NOVALUE'}}|[{'record_field',129,{'atom',129,'extensions'},{'atom',129,'asn1_NOVALUE'}}]]]]]]]]],[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{{'record','AttributeCertificate'},[{'record_field',132,{'atom',132,'acinfo'}}|[{'record_field',132,{'atom',132,'signatureAlgorithm'}}|[{'record_field',132,{'atom',132,'signatureValue'}}]]],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{{'record','IssuingDistributionPoint'},[{'record_field',135,{'atom',135,'distributionPoint'},{'atom',135,'asn1_NOVALUE'}}|[{'record_field',135,{'atom',135,'onlyContainsUserCerts'},{'atom',135,'asn1_DEFAULT'}}|[{'record_field',135,{'atom',135,'onlyContainsCACerts'},{'atom',135,'asn1_DEFAULT'}}|[{'record_field',135,{'atom',135,'onlySomeReasons'},{'atom',135,'asn1_NOVALUE'}}|[{'record_field',135,{'atom',135,'indirectCRL'},{'atom',135,'asn1_DEFAULT'}}|[{'record_field',135,{'atom',135,'onlyContainsAttributeCerts'},{'atom',135,'asn1_DEFAULT'}}]]]]]],[]}],
		%% Line 137
		'type' =
		    %% Line 137
		    [{{'record','AccessDescription'},[{'record_field',138,{'atom',138,'accessMethod'}}|[{'record_field',138,{'atom',138,'accessLocation'}}]],[]}],
		%% Line 140
		'type' =
		    %% Line 140
		    [{{'record','DistributionPoint'},[{'record_field',141,{'atom',141,'distributionPoint'},{'atom',141,'asn1_NOVALUE'}}|[{'record_field',141,{'atom',141,'reasons'},{'atom',141,'asn1_NOVALUE'}}|[{'record_field',141,{'atom',141,'cRLIssuer'},{'atom',141,'asn1_NOVALUE'}}]]],[]}],
		%% Line 143
		'type' =
		    %% Line 143
		    [{{'record','PolicyConstraints'},[{'record_field',144,{'atom',144,'requireExplicitPolicy'},{'atom',144,'asn1_NOVALUE'}}|[{'record_field',144,{'atom',144,'inhibitPolicyMapping'},{'atom',144,'asn1_NOVALUE'}}]],[]}],
		%% Line 146
		'type' =
		    %% Line 146
		    [{{'record','GeneralSubtree'},[{'record_field',147,{'atom',147,'base'}}|[{'record_field',147,{'atom',147,'minimum'},{'atom',147,'asn1_DEFAULT'}}|[{'record_field',147,{'atom',147,'maximum'},{'atom',147,'asn1_NOVALUE'}}]]],[]}],
		%% Line 149
		'type' =
		    %% Line 149
		    [{{'record','NameConstraints'},[{'record_field',150,{'atom',150,'permittedSubtrees'},{'atom',150,'asn1_NOVALUE'}}|[{'record_field',150,{'atom',150,'excludedSubtrees'},{'atom',150,'asn1_NOVALUE'}}]],[]}],
		%% Line 152
		'type' =
		    %% Line 152
		    [{{'record','BasicConstraints'},[{'record_field',153,{'atom',153,'cA'},{'atom',153,'asn1_DEFAULT'}}|[{'record_field',153,{'atom',153,'pathLenConstraint'},{'atom',153,'asn1_NOVALUE'}}]],[]}],
		%% Line 155
		'type' =
		    %% Line 155
		    [{{'record','EDIPartyName'},[{'record_field',156,{'atom',156,'nameAssigner'},{'atom',156,'asn1_NOVALUE'}}|[{'record_field',156,{'atom',156,'partyName'}}]],[]}],
		%% Line 158
		'type' =
		    %% Line 158
		    [{{'record','AnotherName'},[{'record_field',159,{'atom',159,'type-id'}}|[{'record_field',159,{'atom',159,'value'}}]],[]}],
		%% Line 161
		'type' =
		    %% Line 161
		    [{{'record','PolicyMappings_SEQOF'},[{'record_field',162,{'atom',162,'issuerDomainPolicy'}}|[{'record_field',162,{'atom',162,'subjectDomainPolicy'}}]],[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{{'record','NoticeReference'},[{'record_field',165,{'atom',165,'organization'}}|[{'record_field',165,{'atom',165,'noticeNumbers'}}]],[]}],
		%% Line 167
		'type' =
		    %% Line 167
		    [{{'record','UserNotice'},[{'record_field',168,{'atom',168,'noticeRef'},{'atom',168,'asn1_NOVALUE'}}|[{'record_field',168,{'atom',168,'explicitText'},{'atom',168,'asn1_NOVALUE'}}]],[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{{'record','PolicyQualifierInfo'},[{'record_field',171,{'atom',171,'policyQualifierId'}}|[{'record_field',171,{'atom',171,'qualifier'}}]],[]}],
		%% Line 173
		'type' =
		    %% Line 173
		    [{{'record','PolicyInformation'},[{'record_field',174,{'atom',174,'policyIdentifier'}}|[{'record_field',174,{'atom',174,'policyQualifiers'},{'atom',174,'asn1_NOVALUE'}}]],[]}],
		%% Line 176
		'type' =
		    %% Line 176
		    [{{'record','PrivateKeyUsagePeriod'},[{'record_field',177,{'atom',177,'notBefore'},{'atom',177,'asn1_NOVALUE'}}|[{'record_field',177,{'atom',177,'notAfter'},{'atom',177,'asn1_NOVALUE'}}]],[]}],
		%% Line 179
		'type' =
		    %% Line 179
		    [{{'record','AuthorityKeyIdentifier'},[{'record_field',180,{'atom',180,'keyIdentifier'},{'atom',180,'asn1_NOVALUE'}}|[{'record_field',180,{'atom',180,'authorityCertIssuer'},{'atom',180,'asn1_NOVALUE'}}|[{'record_field',180,{'atom',180,'authorityCertSerialNumber'},{'atom',180,'asn1_NOVALUE'}}]]],[]}],
		%% Line 182
		'type' =
		    %% Line 182
		    [{{'record','EncryptedData'},[{'record_field',183,{'atom',183,'version'}}|[{'record_field',183,{'atom',183,'encryptedContentInfo'}}]],[]}],
		%% Line 185
		'type' =
		    %% Line 185
		    [{{'record','DigestedData'},[{'record_field',186,{'atom',186,'version'}}|[{'record_field',186,{'atom',186,'digestAlgorithm'}}|[{'record_field',186,{'atom',186,'contentInfo'}}|[{'record_field',186,{'atom',186,'digest'}}]]]],[]}],
		%% Line 188
		'type' =
		    %% Line 188
		    [{{'record','SignedAndEnvelopedData'},[{'record_field',189,{'atom',189,'version'}}|[{'record_field',189,{'atom',189,'recipientInfos'}}|[{'record_field',189,{'atom',189,'digestAlgorithms'}}|[{'record_field',189,{'atom',189,'encryptedContentInfo'}}|[{'record_field',189,{'atom',189,'certificates'},{'atom',189,'asn1_NOVALUE'}}|[{'record_field',189,{'atom',189,'crls'},{'atom',189,'asn1_NOVALUE'}}|[{'record_field',189,{'atom',189,'signerInfos'}}]]]]]]],[]}],
		%% Line 191
		'type' =
		    %% Line 191
		    [{{'record','RecipientInfo'},[{'record_field',192,{'atom',192,'version'}}|[{'record_field',192,{'atom',192,'issuerAndSerialNumber'}}|[{'record_field',192,{'atom',192,'keyEncryptionAlgorithm'}}|[{'record_field',192,{'atom',192,'encryptedKey'}}]]]],[]}],
		%% Line 194
		'type' =
		    %% Line 194
		    [{{'record','EncryptedContentInfo'},[{'record_field',195,{'atom',195,'contentType'}}|[{'record_field',195,{'atom',195,'contentEncryptionAlgorithm'}}|[{'record_field',195,{'atom',195,'encryptedContent'},{'atom',195,'asn1_NOVALUE'}}]]],[]}],
		%% Line 197
		'type' =
		    %% Line 197
		    [{{'record','EnvelopedData'},[{'record_field',198,{'atom',198,'version'}}|[{'record_field',198,{'atom',198,'recipientInfos'}}|[{'record_field',198,{'atom',198,'encryptedContentInfo'}}]]],[]}],
		%% Line 200
		'type' =
		    %% Line 200
		    [{{'record','DigestInfoPKCS-7'},[{'record_field',201,{'atom',201,'digestAlgorithm'}}|[{'record_field',201,{'atom',201,'digest'}}]],[]}],
		%% Line 203
		'type' =
		    %% Line 203
		    [{{'record','SignerInfo'},[{'record_field',204,{'atom',204,'version'}}|[{'record_field',204,{'atom',204,'issuerAndSerialNumber'}}|[{'record_field',204,{'atom',204,'digestAlgorithm'}}|[{'record_field',204,{'atom',204,'authenticatedAttributes'},{'atom',204,'asn1_NOVALUE'}}|[{'record_field',204,{'atom',204,'digestEncryptionAlgorithm'}}|[{'record_field',204,{'atom',204,'encryptedDigest'}}|[{'record_field',204,{'atom',204,'unauthenticatedAttributes'},{'atom',204,'asn1_NOVALUE'}}]]]]]]],[]}],
		%% Line 206
		'type' =
		    %% Line 206
		    [{{'record','SignerInfo_unauthenticatedAttributes_uaSet_SETOF'},[{'record_field',207,{'atom',207,'type'}}|[{'record_field',207,{'atom',207,'values'}}]],[]}],
		%% Line 209
		'type' =
		    %% Line 209
		    [{{'record','SignerInfo_unauthenticatedAttributes_uaSequence_SEQOF'},[{'record_field',210,{'atom',210,'type'}}|[{'record_field',210,{'atom',210,'values'}}]],[]}],
		%% Line 212
		'type' =
		    %% Line 212
		    [{{'record','SignedData'},[{'record_field',213,{'atom',213,'version'}}|[{'record_field',213,{'atom',213,'digestAlgorithms'}}|[{'record_field',213,{'atom',213,'contentInfo'}}|[{'record_field',213,{'atom',213,'certificates'},{'atom',213,'asn1_NOVALUE'}}|[{'record_field',213,{'atom',213,'crls'},{'atom',213,'asn1_NOVALUE'}}|[{'record_field',213,{'atom',213,'signerInfos'}}]]]]]],[]}],
		%% Line 215
		'type' =
		    %% Line 215
		    [{{'record','ContentInfo'},[{'record_field',216,{'atom',216,'contentType'}}|[{'record_field',216,{'atom',216,'content'},{'atom',216,'asn1_NOVALUE'}}]],[]}],
		%% Line 218
		'type' =
		    %% Line 218
		    [{{'record','KeyEncryptionAlgorithmIdentifier'},[{'record_field',219,{'atom',219,'algorithm'}}|[{'record_field',219,{'atom',219,'parameters'},{'atom',219,'asn1_NOVALUE'}}]],[]}],
		%% Line 221
		'type' =
		    %% Line 221
		    [{{'record','IssuerAndSerialNumber'},[{'record_field',222,{'atom',222,'issuer'}}|[{'record_field',222,{'atom',222,'serialNumber'}}]],[]}],
		%% Line 224
		'type' =
		    %% Line 224
		    [{{'record','DigestEncryptionAlgorithmIdentifier'},[{'record_field',225,{'atom',225,'algorithm'}}|[{'record_field',225,{'atom',225,'parameters'},{'atom',225,'asn1_NOVALUE'}}]],[]}],
		%% Line 227
		'type' =
		    %% Line 227
		    [{{'record','DigestAlgorithmIdentifier'},[{'record_field',228,{'atom',228,'algorithm'}}|[{'record_field',228,{'atom',228,'parameters'},{'atom',228,'asn1_NOVALUE'}}]],[]}],
		%% Line 230
		'type' =
		    %% Line 230
		    [{{'record','ContentEncryptionAlgorithmIdentifier'},[{'record_field',231,{'atom',231,'algorithm'}}|[{'record_field',231,{'atom',231,'parameters'},{'atom',231,'asn1_NOVALUE'}}]],[]}],
		%% Line 233
		'type' =
		    %% Line 233
		    [{{'record','SignerInfoAuthenticatedAttributes_aaSet_SETOF'},[{'record_field',234,{'atom',234,'type'}}|[{'record_field',234,{'atom',234,'values'}}]],[]}],
		%% Line 236
		'type' =
		    %% Line 236
		    [{{'record','SignerInfoAuthenticatedAttributes_aaSequence_SEQOF'},[{'record_field',237,{'atom',237,'type'}}|[{'record_field',237,{'atom',237,'values'}}]],[]}],
		%% Line 239
		'type' =
		    %% Line 239
		    [{{'record','CertificationRequest'},[{'record_field',240,{'atom',240,'certificationRequestInfo'}}|[{'record_field',240,{'atom',240,'signatureAlgorithm'}}|[{'record_field',240,{'atom',240,'signature'}}]]],[]}],
		%% Line 242
		'type' =
		    %% Line 242
		    [{{'record','CertificationRequest_signatureAlgorithm'},[{'record_field',243,{'atom',243,'algorithm'}}|[{'record_field',243,{'atom',243,'parameters'},{'atom',243,'asn1_NOVALUE'}}]],[]}],
		%% Line 245
		'type' =
		    %% Line 245
		    [{{'record','CertificationRequestInfo'},[{'record_field',246,{'atom',246,'version'}}|[{'record_field',246,{'atom',246,'subject'}}|[{'record_field',246,{'atom',246,'subjectPKInfo'}}|[{'record_field',246,{'atom',246,'attributes'}}]]]],[]}],
		%% Line 248
		'type' =
		    %% Line 248
		    [{{'record','CertificationRequestInfo_subjectPKInfo'},[{'record_field',249,{'atom',249,'algorithm'}}|[{'record_field',249,{'atom',249,'subjectPublicKey'}}]],[]}],
		%% Line 251
		'type' =
		    %% Line 251
		    [{{'record','CertificationRequestInfo_subjectPKInfo_algorithm'},[{'record_field',252,{'atom',252,'algorithm'}}|[{'record_field',252,{'atom',252,'parameters'},{'atom',252,'asn1_NOVALUE'}}]],[]}],
		%% Line 254
		'type' =
		    %% Line 254
		    [{{'record','CertificationRequestInfo_attributes_SETOF'},[{'record_field',255,{'atom',255,'type'}}|[{'record_field',255,{'atom',255,'values'}}]],[]}],
		%% Line 257
		'type' =
		    %% Line 257
		    [{{'record','TeletexDomainDefinedAttribute'},[{'record_field',258,{'atom',258,'type'}}|[{'record_field',258,{'atom',258,'value'}}]],[]}],
		%% Line 260
		'type' =
		    %% Line 260
		    [{{'record','PresentationAddress'},[{'record_field',261,{'atom',261,'pSelector'},{'atom',261,'asn1_NOVALUE'}}|[{'record_field',261,{'atom',261,'sSelector'},{'atom',261,'asn1_NOVALUE'}}|[{'record_field',261,{'atom',261,'tSelector'},{'atom',261,'asn1_NOVALUE'}}|[{'record_field',261,{'atom',261,'nAddresses'}}]]]],[]}],
		%% Line 263
		'type' =
		    %% Line 263
		    [{{'record','ExtendedNetworkAddress_e163-4-address'},[{'record_field',264,{'atom',264,'number'}}|[{'record_field',264,{'atom',264,'sub-address'},{'atom',264,'asn1_NOVALUE'}}]],[]}],
		%% Line 266
		'type' =
		    %% Line 266
		    [{{'record','PDSParameter'},[{'record_field',267,{'atom',267,'printable-string'},{'atom',267,'asn1_NOVALUE'}}|[{'record_field',267,{'atom',267,'teletex-string'},{'atom',267,'asn1_NOVALUE'}}]],[]}],
		%% Line 269
		'type' =
		    %% Line 269
		    [{{'record','UnformattedPostalAddress'},[{'record_field',270,{'atom',270,'printable-address'},{'atom',270,'asn1_NOVALUE'}}|[{'record_field',270,{'atom',270,'teletex-string'},{'atom',270,'asn1_NOVALUE'}}]],[]}],
		%% Line 272
		'type' =
		    %% Line 272
		    [{{'record','TeletexPersonalName'},[{'record_field',273,{'atom',273,'surname'}}|[{'record_field',273,{'atom',273,'given-name'},{'atom',273,'asn1_NOVALUE'}}|[{'record_field',273,{'atom',273,'initials'},{'atom',273,'asn1_NOVALUE'}}|[{'record_field',273,{'atom',273,'generation-qualifier'},{'atom',273,'asn1_NOVALUE'}}]]]],[]}],
		%% Line 275
		'type' =
		    %% Line 275
		    [{{'record','ExtensionAttribute'},[{'record_field',276,{'atom',276,'extension-attribute-type'}}|[{'record_field',276,{'atom',276,'extension-attribute-value'}}]],[]}],
		%% Line 278
		'type' =
		    %% Line 278
		    [{{'record','BuiltInDomainDefinedAttribute'},[{'record_field',279,{'atom',279,'type'}}|[{'record_field',279,{'atom',279,'value'}}]],[]}],
		%% Line 281
		'type' =
		    %% Line 281
		    [{{'record','PersonalName'},[{'record_field',282,{'atom',282,'surname'}}|[{'record_field',282,{'atom',282,'given-name'},{'atom',282,'asn1_NOVALUE'}}|[{'record_field',282,{'atom',282,'initials'},{'atom',282,'asn1_NOVALUE'}}|[{'record_field',282,{'atom',282,'generation-qualifier'},{'atom',282,'asn1_NOVALUE'}}]]]],[]}],
		%% Line 284
		'type' =
		    %% Line 284
		    [{{'record','BuiltInStandardAttributes'},[{'record_field',285,{'atom',285,'country-name'},{'atom',285,'asn1_NOVALUE'}}|[{'record_field',285,{'atom',285,'administration-domain-name'},{'atom',285,'asn1_NOVALUE'}}|[{'record_field',285,{'atom',285,'network-address'},{'atom',285,'asn1_NOVALUE'}}|[{'record_field',285,{'atom',285,'terminal-identifier'},{'atom',285,'asn1_NOVALUE'}}|[{'record_field',285,{'atom',285,'private-domain-name'},{'atom',285,'asn1_NOVALUE'}}|[{'record_field',285,{'atom',285,'organization-name'},{'atom',285,'asn1_NOVALUE'}}|[{'record_field',285,{'atom',285,'numeric-user-identifier'},{'atom',285,'asn1_NOVALUE'}}|[{'record_field',285,{'atom',285,'personal-name'},{'atom',285,'asn1_NOVALUE'}}|[{'record_field',285,{'atom',285,'organizational-unit-names'},{'atom',285,'asn1_NOVALUE'}}]]]]]]]]],[]}],
		%% Line 287
		'type' =
		    %% Line 287
		    [{{'record','ORAddress'},[{'record_field',288,{'atom',288,'built-in-standard-attributes'}}|[{'record_field',288,{'atom',288,'built-in-domain-defined-attributes'},{'atom',288,'asn1_NOVALUE'}}|[{'record_field',288,{'atom',288,'extension-attributes'},{'atom',288,'asn1_NOVALUE'}}]]],[]}],
		%% Line 290
		'type' =
		    %% Line 290
		    [{{'record','AlgorithmIdentifier'},[{'record_field',291,{'atom',291,'algorithm'}}|[{'record_field',291,{'atom',291,'parameters'},{'atom',291,'asn1_NOVALUE'}}]],[]}],
		%% Line 293
		'type' =
		    %% Line 293
		    [{{'record','TBSCertList'},[{'record_field',294,{'atom',294,'version'},{'atom',294,'asn1_NOVALUE'}}|[{'record_field',294,{'atom',294,'signature'}}|[{'record_field',294,{'atom',294,'issuer'}}|[{'record_field',294,{'atom',294,'thisUpdate'}}|[{'record_field',294,{'atom',294,'nextUpdate'},{'atom',294,'asn1_NOVALUE'}}|[{'record_field',294,{'atom',294,'revokedCertificates'},{'atom',294,'asn1_NOVALUE'}}|[{'record_field',294,{'atom',294,'crlExtensions'},{'atom',294,'asn1_NOVALUE'}}]]]]]]],[]}],
		%% Line 296
		'type' =
		    %% Line 296
		    [{{'record','TBSCertList_revokedCertificates_SEQOF'},[{'record_field',297,{'atom',297,'userCertificate'}}|[{'record_field',297,{'atom',297,'revocationDate'}}|[{'record_field',297,{'atom',297,'crlEntryExtensions'},{'atom',297,'asn1_NOVALUE'}}]]],[]}],
		%% Line 299
		'type' =
		    %% Line 299
		    [{{'record','CertificateList'},[{'record_field',300,{'atom',300,'tbsCertList'}}|[{'record_field',300,{'atom',300,'signatureAlgorithm'}}|[{'record_field',300,{'atom',300,'signature'}}]]],[]}],
		%% Line 302
		'type' =
		    %% Line 302
		    [{{'record','Extension'},[{'record_field',303,{'atom',303,'extnID'}}|[{'record_field',303,{'atom',303,'critical'},{'atom',303,'asn1_DEFAULT'}}|[{'record_field',303,{'atom',303,'extnValue'}}]]],[]}],
		%% Line 305
		'type' =
		    %% Line 305
		    [{{'record','SubjectPublicKeyInfo'},[{'record_field',306,{'atom',306,'algorithm'}}|[{'record_field',306,{'atom',306,'subjectPublicKey'}}]],[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{{'record','Validity'},[{'record_field',309,{'atom',309,'notBefore'}}|[{'record_field',309,{'atom',309,'notAfter'}}]],[]}],
		%% Line 311
		'type' =
		    %% Line 311
		    [{{'record','TBSCertificate'},[{'record_field',312,{'atom',312,'version'},{'atom',312,'asn1_DEFAULT'}}|[{'record_field',312,{'atom',312,'serialNumber'}}|[{'record_field',312,{'atom',312,'signature'}}|[{'record_field',312,{'atom',312,'issuer'}}|[{'record_field',312,{'atom',312,'validity'}}|[{'record_field',312,{'atom',312,'subject'}}|[{'record_field',312,{'atom',312,'subjectPublicKeyInfo'}}|[{'record_field',312,{'atom',312,'issuerUniqueID'},{'atom',312,'asn1_NOVALUE'}}|[{'record_field',312,{'atom',312,'subjectUniqueID'},{'atom',312,'asn1_NOVALUE'}}|[{'record_field',312,{'atom',312,'extensions'},{'atom',312,'asn1_NOVALUE'}}]]]]]]]]]],[]}],
		%% Line 314
		'type' =
		    %% Line 314
		    [{{'record','Certificate'},[{'record_field',315,{'atom',315,'tbsCertificate'}}|[{'record_field',315,{'atom',315,'signatureAlgorithm'}}|[{'record_field',315,{'atom',315,'signature'}}]]],[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{{'record','AttributeTypeAndValue'},[{'record_field',318,{'atom',318,'type'}}|[{'record_field',318,{'atom',318,'value'}}]],[]}],
		%% Line 320
		'type' =
		    %% Line 320
		    [{{'record','Attribute'},[{'record_field',321,{'atom',321,'type'}}|[{'record_field',321,{'atom',321,'values'}}]],[]}],
		%% Line 323
		'type' =
		    %% Line 323
		    [{{'record','Extension-Any'},[{'record_field',324,{'atom',324,'extnID'}}|[{'record_field',324,{'atom',324,'critical'},{'atom',324,'asn1_DEFAULT'}}|[{'record_field',324,{'atom',324,'extnValue'}}]]],[]}],
		%% Line 326
		'type' =
		    %% Line 326
		    [{{'record','OTPExtension'},[{'record_field',327,{'atom',327,'extnID'}}|[{'record_field',327,{'atom',327,'critical'},{'atom',327,'asn1_DEFAULT'}}|[{'record_field',327,{'atom',327,'extnValue'}}]]],[]}],
		%% Line 329
		'type' =
		    %% Line 329
		    [{{'record','OTPExtensionAttribute'},[{'record_field',330,{'atom',330,'extensionAttributeType'}}|[{'record_field',330,{'atom',330,'extensionAttributeValue'}}]],[]}],
		%% Line 332
		'type' =
		    %% Line 332
		    [{{'record','OTPCharacteristic-two'},[{'record_field',333,{'atom',333,'m'}}|[{'record_field',333,{'atom',333,'basis'}}|[{'record_field',333,{'atom',333,'parameters'}}]]],[]}],
		%% Line 335
		'type' =
		    %% Line 335
		    [{{'record','OTPFieldID'},[{'record_field',336,{'atom',336,'fieldType'}}|[{'record_field',336,{'atom',336,'parameters'}}]],[]}],
		%% Line 338
		'type' =
		    %% Line 338
		    [{{'record','PublicKeyAlgorithm'},[{'record_field',339,{'atom',339,'algorithm'}}|[{'record_field',339,{'atom',339,'parameters'},{'atom',339,'asn1_NOVALUE'}}]],[]}],
		%% Line 341
		'type' =
		    %% Line 341
		    [{{'record','SignatureAlgorithm-Any'},[{'record_field',342,{'atom',342,'algorithm'}}|[{'record_field',342,{'atom',342,'parameters'},{'atom',342,'asn1_NOVALUE'}}]],[]}],
		%% Line 344
		'type' =
		    %% Line 344
		    [{{'record','SignatureAlgorithm'},[{'record_field',345,{'atom',345,'algorithm'}}|[{'record_field',345,{'atom',345,'parameters'},{'atom',345,'asn1_NOVALUE'}}]],[]}],
		%% Line 347
		'type' =
		    %% Line 347
		    [{{'record','OTPSubjectPublicKeyInfo-Any'},[{'record_field',348,{'atom',348,'algorithm'}}|[{'record_field',348,{'atom',348,'subjectPublicKey'}}]],[]}],
		%% Line 350
		'type' =
		    %% Line 350
		    [{{'record','OTPSubjectPublicKeyInfo'},[{'record_field',351,{'atom',351,'algorithm'}}|[{'record_field',351,{'atom',351,'subjectPublicKey'}}]],[]}],
		%% Line 353
		'type' =
		    %% Line 353
		    [{{'record','OTPOLDSubjectPublicKeyInfo'},[{'record_field',354,{'atom',354,'algorithm'}}|[{'record_field',354,{'atom',354,'subjectPublicKey'}}]],[]}],
		%% Line 356
		'type' =
		    %% Line 356
		    [{{'record','OTPOLDSubjectPublicKeyInfo_algorithm'},[{'record_field',357,{'atom',357,'algo'}}|[{'record_field',357,{'atom',357,'parameters'},{'atom',357,'asn1_NOVALUE'}}]],[]}],
		%% Line 359
		'type' =
		    %% Line 359
		    [{{'record','OTPAttributeTypeAndValue'},[{'record_field',360,{'atom',360,'type'}}|[{'record_field',360,{'atom',360,'value'}}]],[]}],
		%% Line 362
		'type' =
		    %% Line 362
		    [{{'record','OTPTBSCertificate'},[{'record_field',363,{'atom',363,'version'},{'atom',363,'asn1_DEFAULT'}}|[{'record_field',363,{'atom',363,'serialNumber'}}|[{'record_field',363,{'atom',363,'signature'}}|[{'record_field',363,{'atom',363,'issuer'}}|[{'record_field',363,{'atom',363,'validity'}}|[{'record_field',363,{'atom',363,'subject'}}|[{'record_field',363,{'atom',363,'subjectPublicKeyInfo'}}|[{'record_field',363,{'atom',363,'issuerUniqueID'},{'atom',363,'asn1_NOVALUE'}}|[{'record_field',363,{'atom',363,'subjectUniqueID'},{'atom',363,'asn1_NOVALUE'}}|[{'record_field',363,{'atom',363,'extensions'},{'atom',363,'asn1_NOVALUE'}}]]]]]]]]]],[]}],
		%% Line 365
		'type' =
		    %% Line 365
		    [{{'record','OTPCertificate'},[{'record_field',366,{'atom',366,'tbsCertificate'}}|[{'record_field',366,{'atom',366,'signatureAlgorithm'}}|[{'record_field',366,{'atom',366,'signature'}}]]],[]}],
		%% Line 11
		'type' =
		    %% Line 11
		    [{{'record','AlgorithmIdentifierPKCS5v2-0'},[{'record_field',12,{'atom',12,'algorithm'}}|[{'record_field',12,{'atom',12,'parameters'},{'atom',12,'asn1_NOVALUE'}}]],[]}],
		%% Line 14
		'type' =
		    %% Line 14
		    [{{'record','PKAttribute'},[{'record_field',15,{'atom',15,'type'}}|[{'record_field',15,{'atom',15,'values'}}|[{'record_field',15,{'atom',15,'valuesWithContext'},{'atom',15,'asn1_NOVALUE'}}]]],[]}],
		%% Line 17
		'type' =
		    %% Line 17
		    [{{'record','PKAttribute_valuesWithContext_SETOF'},[{'record_field',18,{'atom',18,'value'}}|[{'record_field',18,{'atom',18,'contextList'}}]],[]}],
		%% Line 20
		'type' =
		    %% Line 20
		    [{{'record','AlgorithmIdentifierPKCS-8'},[{'record_field',21,{'atom',21,'algorithm'}}|[{'record_field',21,{'atom',21,'parameters'},{'atom',21,'asn1_NOVALUE'}}]],[]}],
		%% Line 23
		'type' =
		    %% Line 23
		    [{{'record','RC5-CBC-Parameters'},[{'record_field',24,{'atom',24,'version'}}|[{'record_field',24,{'atom',24,'rounds'}}|[{'record_field',24,{'atom',24,'blockSizeInBits'}}|[{'record_field',24,{'atom',24,'iv'},{'atom',24,'asn1_NOVALUE'}}]]]],[]}],
		%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','RC2-CBC-Parameter'},[{'record_field',27,{'atom',27,'rc2ParameterVersion'},{'atom',27,'asn1_NOVALUE'}}|[{'record_field',27,{'atom',27,'iv'}}]],[]}],
		%% Line 29
		'type' =
		    %% Line 29
		    [{{'record','PBMAC1-params'},[{'record_field',30,{'atom',30,'keyDerivationFunc'}}|[{'record_field',30,{'atom',30,'messageAuthScheme'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','PBMAC1-params_keyDerivationFunc'},[{'record_field',33,{'atom',33,'algorithm'}}|[{'record_field',33,{'atom',33,'parameters'},{'atom',33,'asn1_NOVALUE'}}]],[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{{'record','PBMAC1-params_messageAuthScheme'},[{'record_field',36,{'atom',36,'algorithm'}}|[{'record_field',36,{'atom',36,'parameters'},{'atom',36,'asn1_NOVALUE'}}]],[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','PBES2-params'},[{'record_field',39,{'atom',39,'keyDerivationFunc'}}|[{'record_field',39,{'atom',39,'encryptionScheme'}}]],[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','PBES2-params_keyDerivationFunc'},[{'record_field',42,{'atom',42,'algorithm'}}|[{'record_field',42,{'atom',42,'parameters'},{'atom',42,'asn1_NOVALUE'}}]],[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','PBES2-params_encryptionScheme'},[{'record_field',45,{'atom',45,'algorithm'}}|[{'record_field',45,{'atom',45,'parameters'},{'atom',45,'asn1_NOVALUE'}}]],[]}],
		%% Line 47
		'type' =
		    %% Line 47
		    [{{'record','PBEParameter'},[{'record_field',48,{'atom',48,'salt'}}|[{'record_field',48,{'atom',48,'iterationCount'}}]],[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','PBKDF2-params'},[{'record_field',51,{'atom',51,'salt'}}|[{'record_field',51,{'atom',51,'iterationCount'}}|[{'record_field',51,{'atom',51,'keyLength'},{'atom',51,'asn1_NOVALUE'}}|[{'record_field',51,{'atom',51,'prf'},{'atom',51,'asn1_DEFAULT'}}]]]],[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{{'record','PBKDF2-params_salt_otherSource'},[{'record_field',54,{'atom',54,'algorithm'}}|[{'record_field',54,{'atom',54,'parameters'},{'atom',54,'asn1_NOVALUE'}}]],[]}],
		%% Line 56
		'type' =
		    %% Line 56
		    [{{'record','PBKDF2-params_prf'},[{'record_field',57,{'atom',57,'algorithm'}}|[{'record_field',57,{'atom',57,'parameters'},{'atom',57,'asn1_NOVALUE'}}]],[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{{'record','Context'},[{'record_field',60,{'atom',60,'contextType'}}|[{'record_field',60,{'atom',60,'contextValues'}}|[{'record_field',60,{'atom',60,'fallback'},{'atom',60,'asn1_DEFAULT'}}]]],[]}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{{'record','EncryptedPrivateKeyInfo'},[{'record_field',63,{'atom',63,'encryptionAlgorithm'}}|[{'record_field',63,{'atom',63,'encryptedData'}}]],[]}],
		%% Line 65
		'type' =
		    %% Line 65
		    [{{'record','EncryptedPrivateKeyInfo_encryptionAlgorithm'},[{'record_field',66,{'atom',66,'algorithm'}}|[{'record_field',66,{'atom',66,'parameters'},{'atom',66,'asn1_NOVALUE'}}]],[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{{'record','Attributes_SETOF'},[{'record_field',69,{'atom',69,'type'}}|[{'record_field',69,{'atom',69,'values'}}|[{'record_field',69,{'atom',69,'valuesWithContext'},{'atom',69,'asn1_NOVALUE'}}]]],[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{{'record','Attributes_SETOF_valuesWithContext_SETOF'},[{'record_field',72,{'atom',72,'value'}}|[{'record_field',72,{'atom',72,'contextList'}}]],[]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{{'record','PrivateKeyInfo'},[{'record_field',75,{'atom',75,'version'}}|[{'record_field',75,{'atom',75,'privateKeyAlgorithm'}}|[{'record_field',75,{'atom',75,'privateKey'}}|[{'record_field',75,{'atom',75,'attributes'},{'atom',75,'asn1_NOVALUE'}}]]]],[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{{'record','PrivateKeyInfo_privateKeyAlgorithm'},[{'record_field',78,{'atom',78,'algorithm'}}|[{'record_field',78,{'atom',78,'parameters'},{'atom',78,'asn1_NOVALUE'}}]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','SubjectPublicKeyInfoAlgorithm'},[{'record_field',29,{'atom',29,'algorithm'}}|[{'record_field',30,{'atom',30,'parameters'},{'atom',30,'asn1_NOVALUE'}}]],[]}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{{'record','path_validation_state'},[{'record_field',44,{'atom',44,'valid_policy_tree'}}|[{'record_field',45,{'atom',45,'explicit_policy'}}|[{'record_field',46,{'atom',46,'inhibit_any_policy'}}|[{'record_field',47,{'atom',47,'policy_mapping'}}|[{'record_field',48,{'atom',48,'cert_num'}}|[{'record_field',49,{'atom',49,'last_cert'},{'atom',49,'false'}}|[{'record_field',50,{'atom',50,'permitted_subtrees'},{'atom',50,'no_constraints'}}|[{'record_field',51,{'atom',51,'excluded_subtrees'},{'nil',51}}|[{'record_field',52,{'atom',52,'working_public_key_algorithm'}}|[{'record_field',53,{'atom',53,'working_public_key'}}|[{'record_field',54,{'atom',54,'working_public_key_parameters'}}|[{'record_field',55,{'atom',55,'working_issuer_name'}}|[{'record_field',56,{'atom',56,'max_path_length'}}|[{'record_field',57,{'atom',57,'verify_fun'}}|[{'record_field',58,{'atom',58,'user_state'}}]]]]]]]]]]]]]]],[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{{'record','policy_tree_node'},[{'record_field',62,{'atom',62,'valid_policy'}}|[{'record_field',63,{'atom',63,'qualifier_set'}}|[{'record_field',64,{'atom',64,'criticality_indicator'}}|[{'record_field',65,{'atom',65,'expected_policy_set'}}]]]],[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{{'record','revoke_state'},[{'record_field',69,{'atom',69,'reasons_mask'}}|[{'record_field',70,{'atom',70,'cert_status'}}|[{'record_field',71,{'atom',71,'interim_reasons_mask'}}|[{'record_field',72,{'atom',72,'valid_ext'}}]]]],[]}],
		%% Line 75
		'type' =
		    %% Line 75
		    [{{'record','ECPoint'},[{'record_field',76,{'atom',76,'point'}}],[]}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{{'record','ssh'},[{'record_field',68,{'atom',68,'role'}}|[{'record_field',69,{'atom',69,'peer'}}|[{'record_field',71,{'atom',71,'c_vsn'}}|[{'record_field',72,{'atom',72,'s_vsn'}}|[{'record_field',74,{'atom',74,'c_version'}}|[{'record_field',75,{'atom',75,'s_version'}}|[{'record_field',77,{'atom',77,'c_keyinit'}}|[{'record_field',78,{'atom',78,'s_keyinit'}}|[{'record_field',80,{'atom',80,'algorithms'}}|[{'record_field',82,{'atom',82,'kex'}}|[{'record_field',83,{'atom',83,'hkey'}}|[{'record_field',84,{'atom',84,'key_cb'}}|[{'record_field',85,{'atom',85,'io_cb'}}|[{'record_field',87,{'atom',87,'send_mac'},{'atom',87,'none'}}|[{'record_field',88,{'atom',88,'send_mac_key'}}|[{'record_field',89,{'atom',89,'send_mac_size'},{'integer',89,0}}|[{'record_field',91,{'atom',91,'recv_mac'},{'atom',91,'none'}}|[{'record_field',92,{'atom',92,'recv_mac_key'}}|[{'record_field',93,{'atom',93,'recv_mac_size'},{'integer',93,0}}|[{'record_field',95,{'atom',95,'encrypt'},{'atom',95,'none'}}|[{'record_field',96,{'atom',96,'encrypt_keys'}}|[{'record_field',97,{'atom',97,'encrypt_block_size'},{'integer',97,8}}|[{'record_field',98,{'atom',98,'encrypt_ctx'}}|[{'record_field',100,{'atom',100,'decrypt'},{'atom',100,'none'}}|[{'record_field',101,{'atom',101,'decrypt_keys'}}|[{'record_field',102,{'atom',102,'decrypt_block_size'},{'integer',102,8}}|[{'record_field',103,{'atom',103,'decrypt_ctx'}}|[{'record_field',105,{'atom',105,'compress'},{'atom',105,'none'}}|[{'record_field',106,{'atom',106,'compress_ctx'}}|[{'record_field',107,{'atom',107,'decompress'},{'atom',107,'none'}}|[{'record_field',108,{'atom',108,'decompress_ctx'}}|[{'record_field',110,{'atom',110,'c_lng'},{'atom',110,'none'}}|[{'record_field',111,{'atom',111,'s_lng'},{'atom',111,'none'}}|[{'record_field',113,{'atom',113,'user_ack'},{'atom',113,'true'}}|[{'record_field',114,{'atom',114,'timeout'},{'atom',114,'infinity'}}|[{'record_field',116,{'atom',116,'shared_secret'}}|[{'record_field',117,{'atom',117,'exchanged_hash'}}|[{'record_field',118,{'atom',118,'session_id'}}|[{'record_field',120,{'atom',120,'opts'},{'nil',120}}|[{'record_field',121,{'atom',121,'send_sequence'},{'integer',121,0}}|[{'record_field',122,{'atom',122,'recv_sequence'},{'integer',122,0}}|[{'record_field',123,{'atom',123,'keyex_key'}}|[{'record_field',124,{'atom',124,'keyex_info'}}|[{'record_field',127,{'atom',127,'user'}}|[{'record_field',128,{'atom',128,'service'}}|[{'record_field',129,{'atom',129,'userauth_quiet_mode'}}|[{'record_field',130,{'atom',130,'userauth_supported_methods'}}|[{'record_field',131,{'atom',131,'userauth_methods'}}|[{'record_field',132,{'atom',132,'userauth_preference'}}|[{'record_field',133,{'atom',133,'available_host_keys'}}|[{'record_field',134,{'atom',134,'authenticated'},{'atom',134,'false'}}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 137
		'type' =
		    %% Line 137
		    [{{'record','alg'},[{'record_field',139,{'atom',139,'kex'}}|[{'record_field',140,{'atom',140,'hkey'}}|[{'record_field',141,{'atom',141,'send_mac'}}|[{'record_field',142,{'atom',142,'recv_mac'}}|[{'record_field',143,{'atom',143,'encrypt'}}|[{'record_field',144,{'atom',144,'decrypt'}}|[{'record_field',145,{'atom',145,'compress'}}|[{'record_field',146,{'atom',146,'decompress'}}|[{'record_field',147,{'atom',147,'c_lng'}}|[{'record_field',148,{'atom',148,'s_lng'}}]]]]]]]]]],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{{'record','ssh_key'},[{'record_field',153,{'atom',153,'type'}}|[{'record_field',154,{'atom',154,'public'}}|[{'record_field',155,{'atom',155,'private'}}|[{'record_field',156,{'atom',156,'comment'},{'string',156,[]}}]]]],[]}],
		%% Line 159
		'type' =
		    %% Line 159
		    [{{'record','ssh_pty'},[{'record_field',159,{'atom',159,'term'},{'string',159,[]}}|[{'record_field',160,{'atom',160,'width'},{'integer',160,80}}|[{'record_field',161,{'atom',161,'height'},{'integer',161,25}}|[{'record_field',162,{'atom',162,'pixel_width'},{'integer',162,1024}}|[{'record_field',163,{'atom',163,'pixel_height'},{'integer',163,768}}|[{'record_field',164,{'atom',164,'modes'},{'bin',164,[]}}]]]]]],[]}],
		%% Line 37
		'type' =
		    %% Line 37
		    [{{'record','ssh_msg_userauth_request'},[{'record_field',39,{'atom',39,'user'}}|[{'record_field',40,{'atom',40,'service'}}|[{'record_field',41,{'atom',41,'method'}}|[{'record_field',42,{'atom',42,'data'}}]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{{'record','ssh_msg_userauth_failure'},[{'record_field',47,{'atom',47,'authentications'}}|[{'record_field',48,{'atom',48,'partial_success'}}]],[]}],
		%% Line 51
		'type' =
		    %% Line 51
		    [{{'record','ssh_msg_userauth_success'},[],[]}],
		%% Line 55
		'type' =
		    %% Line 55
		    [{{'record','ssh_msg_userauth_banner'},[{'record_field',57,{'atom',57,'message'}}|[{'record_field',58,{'atom',58,'language'}}]],[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{{'record','ssh_msg_userauth_passwd_changereq'},[{'record_field',63,{'atom',63,'prompt'}}|[{'record_field',64,{'atom',64,'languge'}}]],[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{{'record','ssh_msg_userauth_pk_ok'},[{'record_field',69,{'atom',69,'algorithm_name'}}|[{'record_field',70,{'atom',70,'key_blob'}}]],[]}],
		%% Line 73
		'type' =
		    %% Line 73
		    [{{'record','ssh_msg_userauth_info_request'},[{'record_field',74,{'atom',74,'name'}}|[{'record_field',75,{'atom',75,'instruction'}}|[{'record_field',76,{'atom',76,'language_tag'}}|[{'record_field',77,{'atom',77,'num_prompts'}}|[{'record_field',78,{'atom',78,'data'}}]]]]],[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{{'record','ssh_msg_userauth_info_response'},[{'record_field',81,{'atom',81,'num_responses'}}|[{'record_field',82,{'atom',82,'data'}}]],[]}],
		%% Line 52
		'type' =
		    %% Line 52
		    [{{'record','ssh_msg_disconnect'},[{'record_field',54,{'atom',54,'code'}}|[{'record_field',55,{'atom',55,'description'}}|[{'record_field',56,{'atom',56,'language'}}]]],[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{{'record','ssh_msg_ignore'},[{'record_field',61,{'atom',61,'data'}}],[]}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{{'record','ssh_msg_unimplemented'},[{'record_field',66,{'atom',66,'sequence'}}],[]}],
		%% Line 69
		'type' =
		    %% Line 69
		    [{{'record','ssh_msg_debug'},[{'record_field',71,{'atom',71,'always_display'}}|[{'record_field',72,{'atom',72,'message'}}|[{'record_field',73,{'atom',73,'language'}}]]],[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{{'record','ssh_msg_service_request'},[{'record_field',79,{'atom',79,'name'}}],[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{{'record','ssh_msg_service_accept'},[{'record_field',84,{'atom',84,'name'}}],[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{{'record','ssh_msg_kexinit'},[{'record_field',89,{'atom',89,'cookie'}}|[{'record_field',90,{'atom',90,'kex_algorithms'}}|[{'record_field',91,{'atom',91,'server_host_key_algorithms'}}|[{'record_field',92,{'atom',92,'encryption_algorithms_client_to_server'}}|[{'record_field',93,{'atom',93,'encryption_algorithms_server_to_client'}}|[{'record_field',94,{'atom',94,'mac_algorithms_client_to_server'}}|[{'record_field',95,{'atom',95,'mac_algorithms_server_to_client'}}|[{'record_field',96,{'atom',96,'compression_algorithms_client_to_server'}}|[{'record_field',97,{'atom',97,'compression_algorithms_server_to_client'}}|[{'record_field',98,{'atom',98,'languages_client_to_server'}}|[{'record_field',99,{'atom',99,'languages_server_to_client'}}|[{'record_field',100,{'atom',100,'first_kex_packet_follows'},{'atom',100,'false'}}|[{'record_field',102,{'atom',102,'reserved'},{'integer',102,0}}]]]]]]]]]]]]],[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{{'record','ssh_msg_kexdh_init'},[{'record_field',117,{'atom',117,'e'}}],[]}],
		%% Line 120
		'type' =
		    %% Line 120
		    [{{'record','ssh_msg_kexdh_reply'},[{'record_field',122,{'atom',122,'public_host_key'}}|[{'record_field',123,{'atom',123,'f'}}|[{'record_field',124,{'atom',124,'h_sig'}}]]],[]}],
		%% Line 127
		'type' =
		    %% Line 127
		    [{{'record','ssh_msg_newkeys'},[],[]}],
		%% Line 143
		'type' =
		    %% Line 143
		    [{{'record','ssh_msg_kex_dh_gex_request'},[{'record_field',145,{'atom',145,'min'}}|[{'record_field',146,{'atom',146,'n'}}|[{'record_field',147,{'atom',147,'max'}}]]],[]}],
		%% Line 150
		'type' =
		    %% Line 150
		    [{{'record','ssh_msg_kex_dh_gex_request_old'},[{'record_field',152,{'atom',152,'n'}}],[]}],
		%% Line 155
		'type' =
		    %% Line 155
		    [{{'record','ssh_msg_kex_dh_gex_group'},[{'record_field',157,{'atom',157,'p'}}|[{'record_field',158,{'atom',158,'g'}}]],[]}],
		%% Line 161
		'type' =
		    %% Line 161
		    [{{'record','ssh_msg_kex_dh_gex_init'},[{'record_field',163,{'atom',163,'e'}}],[]}],
		%% Line 166
		'type' =
		    %% Line 166
		    [{{'record','ssh_msg_kex_dh_gex_reply'},[{'record_field',168,{'atom',168,'public_host_key'}}|[{'record_field',169,{'atom',169,'f'}}|[{'record_field',170,{'atom',170,'h_sig'}}]]],[]}]]
'publickey_msg'/1 =
    %% Line 39
    fun (_cor0) ->
	case _cor0 of
	  <[Alg|%% Line 42
		[Ssh = {'ssh',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,SessionId,Opts,_cor61,_cor62,_cor63,_cor64,User,Service,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70}|[]]]> when 'true' ->
	      let <KeyCb> =
		  %% Line 45
		  call 'proplists':'get_value'
		      ('key_cb', Opts, 'ssh_file')
	      in  %% Line 47
		  case call KeyCb:'user_key'
			   (Alg, Opts) of
		    %% Line 48
		    <{'ok',Key}> when 'true' ->
			let <StrAlgo> =
			    %% Line 49
			    apply 'algorithm_string'/1
				(Alg)
			in  let <PubKeyBlob> =
				%% Line 50
				apply 'encode_public_key'/1
				    (Key)
			    in  let <SigData> =
				    %% Line 51
				    apply 'build_sig_data'/5
					(SessionId, %% Line 52
						    User, %% Line 52
							  Service, %% Line 52
								   PubKeyBlob, %% Line 52
									       StrAlgo)
				in  let <Sig> =
					%% Line 53
					call 'ssh_transport':'sign'
					    (SigData, 'sha', Key)
				    in  let <_cor8> =
					    %% Line 54
					    call 'erlang':'list_to_binary'
						(StrAlgo)
					in  let <_cor9> =
						%% Line 54
						call 'erlang':'size'
						    (_cor8)
					    in  let <_cor7> =
						    %% Line 54
						    call 'erlang':'list_to_binary'
							(StrAlgo)
						in  let <_cor10> =
							%% Line 54
							#{#<_cor9>(32,1,'integer',['unsigned'|['big']]),
							  #<_cor7>('all',8,'binary',['unsigned'|['big']])}#
						    in  let <_cor11> =
							    %% Line 54
							    call 'erlang':'size'
								(Sig)
							in  let <_cor12> =
								%% Line 54
								#{#<_cor11>(32,1,'integer',['unsigned'|['big']]),
								  #<Sig>('all',8,'binary',['unsigned'|['big']])}#
							    in  let <SigBlob> =
								    %% Line 54
								    call 'erlang':'list_to_binary'
									([_cor10|[_cor12|[]]])
								in  let <_cor15> =
									%% Line 60
									call 'erlang':'list_to_binary'
									    (StrAlgo)
								    in  let <_cor16> =
									    %% Line 60
									    call 'erlang':'size'
										(_cor15)
									in  let <_cor14> =
										%% Line 60
										call 'erlang':'list_to_binary'
										    (StrAlgo)
									    in  let <_cor17> =
										    %% Line 60
										    #{#<_cor16>(32,1,'integer',['unsigned'|['big']]),
										      #<_cor14>('all',8,'binary',['unsigned'|['big']])}#
										in  let <_cor18> =
											%% Line 61
											call 'erlang':'size'
											    (PubKeyBlob)
										    in  let <_cor19> =
											    %% Line 61
											    #{#<_cor18>(32,1,'integer',['unsigned'|['big']]),
											      #<PubKeyBlob>('all',8,'binary',['unsigned'|['big']])}#
											in  let <_cor20> =
												%% Line 62
												call 'erlang':'size'
												    (SigBlob)
											    in  let <_cor21> =
												    %% Line 62
												    #{#<_cor20>(32,1,'integer',['unsigned'|['big']]),
												      #<SigBlob>('all',8,'binary',['unsigned'|['big']])}#
												in  %% Line 55
												    call 'ssh_transport':'ssh_packet'
													(%% Line 56
													 {'ssh_msg_userauth_request',User,%% Line 57
																	  Service,%% Line 58
																		  [112|[117|[98|[108|[105|[99|[107|[101|[121]]]]]]]]],%% Line 59
																								      [1|%% Line 60
																									 [_cor17|%% Line 61
																										 [_cor19|%% Line 62
																											 [_cor21|[]]]]]}, %% Line 63
																													  Ssh)
		    %% Line 64
		    <_X_Error> when 'true' ->
			%% Line 65
			'not_ok'
		  end
	  ( <_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23})
		  -| [{'function_name',{'publickey_msg',1}}] )
	    -| ['compiler_generated'] )
	end
'password_msg'/1 =
    %% Line 68
    fun (_cor0) ->
	case _cor0 of
	  <[Ssh = {'ssh',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,IoCb,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,Opts,_cor47,_cor48,_cor49,_cor50,%% Line 69
																																								  User,%% Line 69
																																								       Service,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56}|%% Line 69
																																															  []]> when 'true' ->
	      let <_cor2> =
		  %% Line 70
		  case call 'proplists':'get_value'
			   ('password', Opts) of
		    %% Line 71
		    <'undefined'> when 'true' ->
			%% Line 72
			apply 'user_interaction'/2
			    (IoCb, Ssh)
		    %% Line 73
		    <PW> when 'true' ->
			%% Line 74
			PW
		  end
	      in  %% Line 76
		  case _cor2 of
		    %% Line 77
		    <'not_ok'> when 'true' ->
			%% Line 78
			'not_ok'
		    %% Line 79
		    <_cor57> when 'true' ->
			let <_cor5> =
			    %% Line 86
			    call 'unicode':'characters_to_binary'
				(_cor2)
			in  let <_cor6> =
				%% Line 86
				call 'erlang':'size'
				    (_cor5)
			    in  let <_cor4> =
				    %% Line 86
				    call 'unicode':'characters_to_binary'
					(_cor2)
				in  let <_cor7> =
					%% Line 85
					#{#<0>(8,1,'integer',['unsigned'|['big']]),
					  #<_cor6>(%% Line 86
						   32,1,'integer',['unsigned'|['big']]),
					  #<_cor4>(%% Line 86
						   'all',8,'binary',['unsigned'|['big']])}#
				    in  %% Line 80
					call 'ssh_transport':'ssh_packet'
					    (%% Line 81
					     {'ssh_msg_userauth_request',User,%% Line 82
									      Service,%% Line 83
										      [112|[97|[115|[115|[119|[111|[114|[100]]]]]]]],_cor7}, %% Line 87
																	     Ssh)
		  end
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'password_msg',1}}] )
	    -| ['compiler_generated'] )
	end
'user_interaction'/2 =
    %% Line 90
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'ssh_no_io',_cor4> when 'true' ->
	      %% Line 91
	      'not_ok'
	  %% Line 92
	  <IoCb,Ssh> when 'true' ->
	      %% Line 93
	      call IoCb:'read_password'
		  ([115|[115|[104|[32|[112|[97|[115|[115|[119|[111|[114|[100|[58|[32]]]]]]]]]]]]]], Ssh)
	end
'keyboard_interactive_msg'/1 =
    %% Line 97
    fun (_cor0) ->
	case _cor0 of
	  <[Ssh = {'ssh',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,User,%% Line 98
																																								      Service,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53}|%% Line 98
																																															 []]> when 'true' ->
	      %% Line 99
	      call 'ssh_transport':'ssh_packet'
		  (%% Line 100
		   {'ssh_msg_userauth_request',User,%% Line 101
						    Service,%% Line 102
							    [107|[101|[121|[98|[111|[97|[114|[100|[45|[105|[110|[116|[101|[114|[97|[99|[116|[105|[118|[101]]]]]]]]]]]]]]]]]]]],%% Line 103
																					       #{#<0>(8,1,'integer',['unsigned'|['big']]),
																						 #<0>(8,1,'integer',['unsigned'|['big']]),
																						 #<0>(8,1,'integer',['unsigned'|['big']]),
																						 #<0>(8,1,'integer',['unsigned'|['big']]),
																						 #<0>(8,1,'integer',['unsigned'|['big']]),
																						 #<0>(8,1,'integer',['unsigned'|['big']]),
																						 #<0>(8,1,'integer',['unsigned'|['big']]),
																						 #<0>(8,1,'integer',['unsigned'|['big']])}#}, %% Line 105
																											      Ssh)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'keyboard_interactive_msg',1}}] )
	    -| ['compiler_generated'] )
	end
'service_request_msg'/1 =
    %% Line 107
    fun (_cor0) ->
	%% Line 109
	case _cor0 of
	  <{'ssh',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55}> when 'true' ->
	      let <_cor3> =
		  call 'erlang':'setelement'
		      (46, _cor0, [115|[115|[104|[45|[117|[115|[101|[114|[97|[117|[116|[104]]]]]]]]]]]])
	      in  call 'ssh_transport':'ssh_packet'
		      ({'ssh_msg_service_request',[115|[115|[104|[45|[117|[115|[101|[114|[97|[117|[116|[104]]]]]]]]]]]]}, _cor3)
	  ( <_cor56> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','ssh'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'init_userauth_request_msg'/1 =
    %% Line 111
    fun (_cor0) ->
	case _cor0 of
	  <Ssh = {'ssh',_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,Opts,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85}> when 'true' ->
	      %% Line 112
	      case apply 'user_name'/1
		       (Opts) of
		%% Line 113
		<{'ok',User}> when 'true' ->
		    let <Msg> =
			%% Line 114
			{'ssh_msg_userauth_request',User,%% Line 115
							 [115|[115|[104|[45|[99|[111|[110|[110|[101|[99|[116|[105|[111|[110]]]]]]]]]]]]]],%% Line 116
																	  [110|[111|[110|[101]]]],%% Line 117
																				  #{}#}
		    in  %% Line 118
			case call 'proplists':'get_value'
				 ('pref_public_key_algs', Opts, 'false') of
			  %% Line 119
			  <'false'> when 'true' ->
			      let <FirstAlg> =
				  %% Line 120
				  call 'proplists':'get_value'
				      ('public_key_alg', Opts, 'ssh-rsa')
			      in  let <SecondAlg> =
				      %% Line 121
				      apply 'other_alg'/1
					  (FirstAlg)
				  in  let <AllowUserInt> =
					  %% Line 122
					  call 'proplists':'get_value'
					      ('user_interaction', Opts, 'true')
				      in  let <Prefs> =
					      %% Line 123
					      apply 'method_preference'/3
						  (FirstAlg, SecondAlg, AllowUserInt)
					  in  let <_cor7> =
						  %% Line 125
						  call 'erlang':'setelement'
						      (50, Ssh, Prefs)
					      in  let <_cor8> =
						      %% Line 126
						      call 'erlang':'setelement'
							  (49, _cor7, 'none')
						  in  let <_cor9> =
							  %% Line 127
							  call 'erlang':'setelement'
							      (46, _cor8, [115|[115|[104|[45|[99|[111|[110|[110|[101|[99|[116|[105|[111|[110]]]]]]]]]]]]]])
						      in  let <_cor11> =
							      %% Line 124
							      call 'erlang':'setelement'
								  (45, _cor9, User)
							  in  %% Line 124
							      call 'ssh_transport':'ssh_packet'
								  (Msg, _cor11)
			  %% Line 128
			  <Algs> when 'true' ->
			      let <FirstAlg> =
				  %% Line 129
				  call 'lists':'nth'
				      (1, Algs)
			      in  let <_cor13> =
				      %% Line 130
				      call 'erlang':'length'
					  (Algs)
				  in  %% Line 130
				      case call 'erlang':'=:='
					       (_cor13, 2) of
					%% Line 131
					<'true'> when 'true' ->
					    let <SecondAlg> =
						%% Line 132
						apply 'other_alg'/1
						    (FirstAlg)
					    in  let <AllowUserInt> =
						    %% Line 133
						    call 'proplists':'get_value'
							('user_interaction', Opts, 'true')
						in  let <Prefs> =
							%% Line 134
							apply 'method_preference'/3
							    (FirstAlg, SecondAlg, AllowUserInt)
						    in  let <_cor18> =
							    %% Line 136
							    call 'erlang':'setelement'
								(50, Ssh, Prefs)
							in  let <_cor19> =
								%% Line 137
								call 'erlang':'setelement'
								    (49, _cor18, 'none')
							    in  let <_cor20> =
								    %% Line 138
								    call 'erlang':'setelement'
									(46, _cor19, [115|[115|[104|[45|[99|[111|[110|[110|[101|[99|[116|[105|[111|[110]]]]]]]]]]]]]])
								in  let <_cor22> =
									%% Line 135
									call 'erlang':'setelement'
									    (45, _cor20, User)
								    in  %% Line 135
									call 'ssh_transport':'ssh_packet'
									    (Msg, _cor22)
					%% Line 139
					<_cor190> when 'true' ->
					    let <AllowUserInt> =
						%% Line 140
						call 'proplists':'get_value'
						    ('user_interaction', Opts, 'true')
					    in  let <Prefs> =
						    %% Line 141
						    apply 'method_preference'/2
							(FirstAlg, AllowUserInt)
						in  let <_cor26> =
							%% Line 143
							call 'erlang':'setelement'
							    (50, Ssh, Prefs)
						    in  let <_cor27> =
							    %% Line 144
							    call 'erlang':'setelement'
								(49, _cor26, 'none')
							in  let <_cor28> =
								%% Line 145
								call 'erlang':'setelement'
								    (46, _cor27, [115|[115|[104|[45|[99|[111|[110|[110|[101|[99|[116|[105|[111|[110]]]]]]]]]]]]]])
							    in  let <_cor30> =
								    %% Line 142
								    call 'erlang':'setelement'
									(45, _cor28, User)
								in  %% Line 142
								    call 'ssh_transport':'ssh_packet'
									(Msg, _cor30)
				      end
			end
		%% Line 148
		<{'error','no_user'}> when 'true' ->
		    %% Line 150
		    call 'erlang':'throw'
			({'ssh_msg_disconnect',15,[67|[111|[117|[108|[100|[32|[110|[111|[116|[32|[100|[101|[116|[101|[114|[109|[105|[110|[101|[32|[116|[104|[101|[32|[117|[115|[101|[114|[115|[32|[110|[97|[109|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[101|[110]]})
		( <_cor34> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor34})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor35> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor35})
		  -| [{'function_name',{'init_userauth_request_msg',1}}] )
	    -| ['compiler_generated'] )
	end
'userauth_request_msg'/1 =
    %% Line 155
    fun (_cor0) ->
	case _cor0 of
	  <Ssh = {'ssh',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,[],_cor59,_cor60}> when 'true' ->
	      let <_cor2> =
		  %% Line 161
		  call 'ssh_transport':'ssh_packet'
		      ({'ssh_msg_disconnect',14,[85|[110|[97|[98|[108|[101|[32|[116|[111|[32|[99|[111|[110|[110|[101|[99|[116|[32|[117|[115|[105|[110|[103|[32|[116|[104|[101|[32|[97|[118|[97|[105|[108|[97|[98|[108|[101|[32|[97|[117|[116|[104|[101|[110|[116|[105|[99|[97|[116|[105|[111|[110|[32|[109|[101|[116|[104|[111|[100|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[101|[110]]}, Ssh)
	      in  %% Line 161
		  {'disconnect',{'ssh_msg_disconnect',14,[85|[110|[97|[98|[108|[101|[32|[116|[111|[32|[99|[111|[110|[110|[101|[99|[116|[32|[117|[115|[105|[110|[103|[32|[116|[104|[101|[32|[97|[118|[97|[105|[108|[97|[98|[108|[101|[32|[97|[117|[116|[104|[101|[110|[116|[105|[99|[97|[116|[105|[111|[110|[32|[109|[101|[116|[104|[111|[100|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[101|[110]]},_cor2}
	  %% Line 163
	  <Ssh0 = {'ssh',_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,Methods,%% Line 164
																																														  [{Pref,Module,%% Line 165
																																																Function,%% Line 165
																																																	 Args}|%% Line 165
																																																	       Prefs],_cor108,_cor109}> when 'true' ->
	      let <_cor5> =
		  %% Line 167
		  call 'erlang':'setelement'
		      (50, Ssh0, Prefs)
	      in  %% Line 168
		  case call 'lists':'member'
			   (Pref, Methods) of
		    %% Line 169
		    <'true'> when 'true' ->
			let <_cor7> =
			    %% Line 170
			    call 'erlang':'++'
				(Args, [_cor5|[]])
			in  %% Line 170
			    case call Module:Function
				     (_cor7) of
			      %% Line 171
			      <'not_ok'> when 'true' ->
				  %% Line 172
				  apply 'userauth_request_msg'/1
				      (_cor5)
			      %% Line 173
			      <Result> when 'true' ->
				  %% Line 174
				  Result
			    end
		    %% Line 176
		    <'false'> when 'true' ->
			%% Line 177
			apply 'userauth_request_msg'/1
			    (_cor5)
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor9})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10})
		  -| [{'function_name',{'userauth_request_msg',1}}] )
	    -| ['compiler_generated'] )
	end
'handle_userauth_request'/3 =
    %% Line 181
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'ssh_msg_service_request',Name = %% Line 182
					     [115|[115|[104|[45|[117|[115|[101|[114|[97|[117|[116|[104]]]]]]]]]]]]},_cor24,%% Line 183
															   Ssh> when 'true' ->
	      %% Line 185
	      case Ssh of
		<{'ssh',_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75}> when 'true' ->
		    let <_cor5> =
			call 'erlang':'setelement'
			    (46, Ssh, [115|[115|[104|[45|[99|[111|[110|[110|[101|[99|[116|[105|[111|[110]]]]]]]]]]]]]])
		    in  let <_cor6> =
			    call 'ssh_transport':'ssh_packet'
				({'ssh_msg_service_accept',Name}, _cor5)
			in  {'ok',_cor6}
		( <_cor76> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','ssh'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 187
	  <{'ssh_msg_userauth_request',User,%% Line 188
					    [115|[115|[104|[45|[99|[111|[110|[110|[101|[99|[116|[105|[111|[110]]]]]]]]]]]]]],%% Line 189
															     [112|[97|[115|[115|[119|[111|[114|[100]]]]]]]],%% Line 190
																					    Data},_cor77,Ssh = %% Line 191
																							       {'ssh',_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,Opts,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127}> when 'true' ->
	      %% Line 192
	      case ( Data
		     -| ['reuse_for_context'] ) of
		<#{#<_cor128>(8,1,'integer',['unsigned'|['big']]),
		   #<Sz>(32,1,'integer',['unsigned'|['big']]),
		   #<BinPwd>(Sz,8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <Password> =
			%% Line 193
			call 'unicode':'characters_to_list'
			    (BinPwd)
		    in  %% Line 194
			case apply 'check_password'/3
				 (User, Password, Opts) of
			  %% Line 195
			  <'true'> when 'true' ->
			      let <_cor9> =
				  %% Line 197
				  call 'ssh_transport':'ssh_packet'
				      ({'ssh_msg_userauth_success'}, Ssh)
			      in  %% Line 196
				  {'authorized',User,_cor9}
			  %% Line 198
			  <'false'> when 'true' ->
			      let <_cor10> =
				  %% Line 200
				  call 'ssh_transport':'ssh_packet'
				      ({'ssh_msg_userauth_failure',[],'false'}, %% Line 202
										Ssh)
			      in  %% Line 199
				  {'not_authorized',{User,{'error',[66|[97|[100|[32|[117|[115|[101|[114|[32|[111|[114|[32|[112|[97|[115|[115|[119|[111|[114|[100]]]]]]]]]]]]]]]]]]]]}},_cor10}
			  ( <_cor11> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor11})
			    -| ['compiler_generated'] )
			end
		( <_cor7> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor7)
			  primop 'match_fail'
			      ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 205
	  <{'ssh_msg_userauth_request',User,%% Line 206
					    [115|[115|[104|[45|[99|[111|[110|[110|[101|[99|[116|[105|[111|[110]]]]]]]]]]]]]],%% Line 207
															     [110|[111|[110|[101]]]],_cor129},_cor130,Ssh = %% Line 208
																					    {'ssh',_cor131,_cor132,_cor133,_cor134,_cor135,_cor136,_cor137,_cor138,_cor139,_cor140,_cor141,_cor142,_cor143,_cor144,_cor145,_cor146,_cor147,_cor148,_cor149,_cor150,_cor151,_cor152,_cor153,_cor154,_cor155,_cor156,_cor157,_cor158,_cor159,_cor160,_cor161,_cor162,_cor163,_cor164,_cor165,_cor166,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,Methods,_cor177,_cor178,_cor179,_cor180}> when 'true' ->
	      let <_cor12> =
		  %% Line 210
		  call 'ssh_transport':'ssh_packet'
		      (%% Line 211
		       {'ssh_msg_userauth_failure',Methods,%% Line 212
							   'false'}, %% Line 212
								     Ssh)
	      in  %% Line 209
		  {'not_authorized',{User,'undefined'},_cor12}
	  %% Line 214
	  <{'ssh_msg_userauth_request',User,%% Line 215
					    [115|[115|[104|[45|[99|[111|[110|[110|[101|[99|[116|[105|[111|[110]]]]]]]]]]]]]],%% Line 216
															     [112|[117|[98|[108|[105|[99|[107|[101|[121]]]]]]]]],%% Line 217
																						 Data},%% Line 218
																						       SessionId,Ssh = %% Line 218
																								       {'ssh',_cor181,_cor182,_cor183,_cor184,_cor185,_cor186,_cor187,_cor188,_cor189,_cor190,_cor191,_cor192,_cor193,_cor194,_cor195,_cor196,_cor197,_cor198,_cor199,_cor200,_cor201,_cor202,_cor203,_cor204,_cor205,_cor206,_cor207,_cor208,_cor209,_cor210,_cor211,_cor212,_cor213,_cor214,_cor215,_cor216,_cor217,_cor218,Opts,_cor219,_cor220,_cor221,_cor222,_cor223,_cor224,_cor225,_cor226,_cor227,_cor228,_cor229,_cor230}> when 'true' ->
	      %% Line 220
	      case ( Data
		     -| ['reuse_for_context'] ) of
		<#{#<HaveSig>(8,1,'integer',['unsigned'|['big']]),
		   #<ALen>(32,1,'integer',['unsigned'|['big']]),
		   #<BAlg>(ALen,8,'binary',['unsigned'|['big']]),
		   #<KLen>(32,1,'integer',['unsigned'|['big']]),
		   #<KeyBlob>(KLen,8,'binary',['unsigned'|['big']]),
		   #<SigWLen>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    let <Alg> =
			%% Line 221
			call 'erlang':'binary_to_list'
			    (BAlg)
		    in  %% Line 222
			case HaveSig of
			  %% Line 223
			  <1> when 'true' ->
			      %% Line 224
			      case apply 'verify_sig'/7
				       (SessionId, User, [115|[115|[104|[45|[99|[111|[110|[110|[101|[99|[116|[105|[111|[110]]]]]]]]]]]]]], Alg, %% Line 225
																		KeyBlob, %% Line 225
																			 SigWLen, %% Line 225
																				  Opts) of
				%% Line 226
				<'true'> when 'true' ->
				    let <_cor15> =
					%% Line 228
					call 'ssh_transport':'ssh_packet'
					    (%% Line 229
					     {'ssh_msg_userauth_success'}, %% Line 229
									   Ssh)
				    in  %% Line 227
					{'authorized',User,_cor15}
				%% Line 230
				<'false'> when 'true' ->
				    let <_cor16> =
					%% Line 232
					call 'ssh_transport':'ssh_packet'
					    ({'ssh_msg_userauth_failure',[112|[117|[98|[108|[105|[99|[107|[101|[121|[44|[112|[97|[115|[115|[119|[111|[114|[100]]]]]]]]]]]]]]]]]],'false'}, %% Line 234
																							   Ssh)
				    in  %% Line 231
					{'not_authorized',{User,'undefined'},_cor16}
				( <_cor17> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor17})
				  -| ['compiler_generated'] )
			      end
			  %% Line 236
			  <0> when 'true' ->
			      let <_cor18> =
				  %% Line 238
				  call 'ssh_transport':'ssh_packet'
				      (%% Line 239
				       {'ssh_msg_userauth_pk_ok',Alg,%% Line 240
								     KeyBlob}, %% Line 240
									       Ssh)
			      in  %% Line 237
				  {'not_authorized',{User,'undefined'},_cor18}
			  ( <_cor19> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor19})
			    -| ['compiler_generated'] )
			end
		( <_cor13> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor13)
			  primop 'match_fail'
			      ({'badmatch',_cor13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 243
	  <{'ssh_msg_userauth_request',User,%% Line 244
					    [115|[115|[104|[45|[99|[111|[110|[110|[101|[99|[116|[105|[111|[110]]]]]]]]]]]]]],%% Line 245
															     Other,_cor231},_cor232,Ssh = %% Line 246
																			  {'ssh',_cor233,_cor234,_cor235,_cor236,_cor237,_cor238,_cor239,_cor240,_cor241,_cor242,_cor243,_cor244,_cor245,_cor246,_cor247,_cor248,_cor249,_cor250,_cor251,_cor252,_cor253,_cor254,_cor255,_cor256,_cor257,_cor258,_cor259,_cor260,_cor261,_cor262,_cor263,_cor264,_cor265,_cor266,_cor267,_cor268,_cor269,_cor270,_cor271,_cor272,_cor273,_cor274,_cor275,_cor276,_cor277,_cor278,Methods,_cor279,_cor280,_cor281,_cor282}> when 'true' ->
	      let <_cor20> =
		  %% Line 248
		  call 'ssh_transport':'ssh_packet'
		      (%% Line 249
		       {'ssh_msg_userauth_failure',Methods,%% Line 250
							   'false'}, %% Line 250
								     Ssh)
	      in  %% Line 247
		  {'not_authorized',{User,{'authmethod',Other}},_cor20}
	  ( <_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21})
		  -| [{'function_name',{'handle_userauth_request',3}}] )
	    -| ['compiler_generated'] )
	end
'handle_userauth_info_request'/3 =
    %% Line 252
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <%% Line 253
	   {'ssh_msg_userauth_info_request',Name,%% Line 254
						 Instr,_cor17,%% Line 255
							      NumPrompts,%% Line 256
									 Data},%% Line 256
									       IoCb,Ssh = %% Line 257
											  {'ssh',_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,Opts,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67}> when 'true' ->
	      let <PromptInfos> =
		  %% Line 258
		  apply 'decode_keyboard_interactive_prompts'/2
		      (NumPrompts, Data)
	      in  let <Resps> =
		      %% Line 259
		      apply 'keyboard_interact_get_responses'/5
			  (IoCb, Opts, %% Line 260
				       Name, %% Line 260
					     Instr, %% Line 260
						    PromptInfos)
		  in  let <_cor10> =
			  %% Line 262
			  ( fun (_cor8) ->
				let <_cor6> =
				    call 'erlang':'list_to_binary'
					(_cor8)
				in  let <_cor7> =
					call 'erlang':'size'
					    (_cor6)
				    in  let <_cor5> =
					    call 'erlang':'list_to_binary'
						(_cor8)
					in  #{#<_cor7>(32,1,'integer',['unsigned'|['big']]),
					      #<_cor5>('all',8,'binary',['unsigned'|['big']])}#
			    -| [{'id',{0,0,'-handle_userauth_info_request/3-fun-0-'}}] )
		      in  let <_cor11> =
			      %% Line 262
			      call 'lists':'map'
				  (_cor10, %% Line 263
					   Resps)
			  in  let <RespBin> =
				  %% Line 261
				  call 'erlang':'list_to_binary'
				      (_cor11)
			      in  let <_cor13> =
				      %% Line 265
				      call 'ssh_transport':'ssh_packet'
					  (%% Line 266
					   {'ssh_msg_userauth_info_response',NumPrompts,%% Line 267
											RespBin}, %% Line 267
												  Ssh)
				  in  %% Line 264
				      {'ok',_cor13}
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'handle_userauth_info_request',3}}] )
	    -| ['compiler_generated'] )
	end
'handle_userauth_info_response'/2 =
    %% Line 269
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'ssh_msg_userauth_info_response',_cor4,_cor5},%% Line 270
							  _X_Auth> when 'true' ->
	      %% Line 271
	      call 'erlang':'throw'
		  ({'ssh_msg_disconnect',7,[83|[101|[114|[118|[101|[114|[32|[100|[111|[101|[115|[32|[110|[111|[116|[32|[115|[117|[112|[112|[111|[114|[116|[107|[101|[121|[98|[111|[97|[114|[100|[45|[105|[110|[116|[101|[114|[97|[99|[116|[105|[118|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[101|[110]]})
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'handle_userauth_info_response',2}}] )
	    -| ['compiler_generated'] )
	end
'method_preference'/3 =
    %% Line 279
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Alg1,Alg2,'true'> when 'true' ->
	      %% Line 280
	      [{[112|[117|[98|[108|[105|[99|[107|[101|[121]]]]]]]]],'ssh_auth','publickey_msg',[Alg1|[]]}|%% Line 281
													  [{[112|[117|[98|[108|[105|[99|[107|[101|[121]]]]]]]]],'ssh_auth','publickey_msg',[Alg2|[]]}|%% Line 282
																								      [{[112|[97|[115|[115|[119|[111|[114|[100]]]]]]]],'ssh_auth','password_msg',[]}|[{[107|[101|[121|[98|[111|[97|[114|[100|[45|[105|[110|[116|[101|[114|[97|[99|[116|[105|[118|[101]]]]]]]]]]]]]]]]]]]],'ssh_auth','keyboard_interactive_msg',[]}]]]]
	  %% Line 285
	  <Alg1,Alg2,'false'> when 'true' ->
	      %% Line 286
	      [{[112|[117|[98|[108|[105|[99|[107|[101|[121]]]]]]]]],'ssh_auth','publickey_msg',[Alg1|[]]}|%% Line 287
													  [{[112|[117|[98|[108|[105|[99|[107|[101|[121]]]]]]]]],'ssh_auth','publickey_msg',[Alg2|[]]}|%% Line 288
																								      [{[112|[97|[115|[115|[119|[111|[114|[100]]]]]]]],'ssh_auth','password_msg',[]}]]]
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'method_preference',3}}] )
	    -| ['compiler_generated'] )
	end
'method_preference'/2 =
    %% Line 290
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Alg1,'true'> when 'true' ->
	      %% Line 291
	      [{[112|[117|[98|[108|[105|[99|[107|[101|[121]]]]]]]]],'ssh_auth','publickey_msg',[Alg1|[]]}|%% Line 292
													  [{[112|[97|[115|[115|[119|[111|[114|[100]]]]]]]],'ssh_auth','password_msg',[]}|[{[107|[101|[121|[98|[111|[97|[114|[100|[45|[105|[110|[116|[101|[114|[97|[99|[116|[105|[118|[101]]]]]]]]]]]]]]]]]]]],'ssh_auth','keyboard_interactive_msg',[]}]]]
	  %% Line 295
	  <Alg1,'false'> when 'true' ->
	      %% Line 296
	      [{[112|[117|[98|[108|[105|[99|[107|[101|[121]]]]]]]]],'ssh_auth','publickey_msg',[Alg1|[]]}|%% Line 297
													  [{[112|[97|[115|[115|[119|[111|[114|[100]]]]]]]],'ssh_auth','password_msg',[]}]]
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'method_preference',2}}] )
	    -| ['compiler_generated'] )
	end
'user_name'/1 =
    %% Line 300
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 301
	    case call 'os':'type'
		     () of
	      %% Line 302
	      <{'win32',_cor8}> when 'true' ->
		  %% Line 303
		  [85|[83|[69|[82|[78|[65|[77|[69]]]]]]]]
	      %% Line 304
	      <{'unix',_cor9}> when 'true' ->
		  %% Line 305
		  [76|[79|[71|[78|[65|[77|[69]]]]]]]
	      ( <_cor1> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor1})
		-| ['compiler_generated'] )
	    end
	in  let <_cor4> =
		%% Line 307
		call 'os':'getenv'
		    (_cor2)
	    in  %% Line 307
		case call 'proplists':'get_value'
			 ('user', _cor0, _cor4) of
		  %% Line 308
		  <'false'> when 'true' ->
		      %% Line 309
		      case call 'os':'getenv'
			       ([85|[83|[69|[82]]]]) of
			%% Line 310
			<'false'> when 'true' ->
			    %% Line 311
			    {'error','no_user'}
			%% Line 312
			<User> when 'true' ->
			    %% Line 313
			    {'ok',User}
		      end
		  %% Line 315
		  <User> when 'true' ->
		      %% Line 316
		      {'ok',User}
		end
'check_password'/3 =
    %% Line 319
    fun (_cor2,_cor1,_cor0) ->
	%% Line 320
	case call 'proplists':'get_value'
		 ('pwdfun', _cor0) of
	  %% Line 321
	  <'undefined'> when 'true' ->
	      let <Static> =
		  %% Line 322
		  apply 'get_password_option'/2
		      (_cor0, _cor2)
	      in  %% Line 323
		  call 'erlang':'=='
		      (_cor1, Static)
	  %% Line 324
	  <Cheker> when 'true' ->
	      %% Line 325
	      apply Cheker
		  (_cor2, _cor1)
	end
'get_password_option'/2 =
    %% Line 328
    fun (_cor1,_cor0) ->
	let <Passwords> =
	    %% Line 329
	    call 'proplists':'get_value'
		('user_passwords', _cor1, [])
	in  %% Line 330
	    case call 'lists':'keysearch'
		     (_cor0, 1, Passwords) of
	      %% Line 331
	      <{'value',{_cor6,Pw}}>
		  when call 'erlang':'=:='
			(_cor6,
			 _cor0) ->
		  Pw
	      %% Line 332
	      <'false'> when 'true' ->
		  call 'proplists':'get_value'
		      ('password', _cor1, 'false')
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor3})
		-| ['compiler_generated'] )
	    end
'verify_sig'/7 =
    %% Line 335
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 336
	case apply 'decode_public_key_v2'/2
		 (_cor2, _cor3) of
	  <{'ok',Key}> when 'true' ->
	      let <KeyCb> =
		  %% Line 337
		  call 'proplists':'get_value'
		      ('key_cb', _cor0, 'ssh_file')
	      in  %% Line 339
		  case call KeyCb:'is_auth_key'
			   (Key, _cor5, _cor0) of
		    %% Line 340
		    <'true'> when 'true' ->
			let <PlainText> =
			    %% Line 341
			    apply 'build_sig_data'/5
				(_cor6, _cor5, _cor4, _cor2, _cor3)
			in  %% Line 343
			    case ( _cor1
				   -| ['reuse_for_context'] ) of
			      <#{#<AlgSigLen>(32,1,'integer',['unsigned'|['big']]),
				 #<AlgSig>(AlgSigLen,8,'binary',['unsigned'|['big']])}#> when 'true' ->
				  %% Line 345
				  case ( AlgSig
					 -| ['reuse_for_context'] ) of
				    <#{#<AlgLen>(32,1,'integer',['unsigned'|['big']]),
				       #<_X_Alg>(AlgLen,8,'binary',['unsigned'|['big']]),
				       #<SigLen>(32,1,'integer',['unsigned'|['big']]),
				       #<Sig>(SigLen,8,'binary',['unsigned'|['big']])}#> when 'true' ->
					%% Line 346
					call 'ssh_transport':'verify'
					    (PlainText, 'sha', Sig, Key)
				    ( <_cor11> when 'true' ->
					  do  primop 'bs_context_to_binary'
						  (_cor11)
					      primop 'match_fail'
						  ({'badmatch',_cor11})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor10> when 'true' ->
				    do  primop 'bs_context_to_binary'
					    (_cor10)
					primop 'match_fail'
					    ({'badmatch',_cor10})
				-| ['compiler_generated'] )
			    end
		    %% Line 347
		    <'false'> when 'true' ->
			%% Line 348
			'false'
		    ( <_cor12> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor12})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor7})
	    -| ['compiler_generated'] )
	end
'build_sig_data'/5 =
    %% Line 351
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 352
	    call 'erlang':'size'
		(_cor4)
	in  let <_cor6> =
		%% Line 352
		#{#<_cor5>(32,1,'integer',['unsigned'|['big']]),
		  #<_cor4>('all',8,'binary',['unsigned'|['big']])}#
	    in  let <_cor8> =
		    %% Line 354
		    call 'unicode':'characters_to_binary'
			(_cor3)
		in  let <_cor9> =
			%% Line 354
			call 'erlang':'size'
			    (_cor8)
		    in  let <_cor7> =
			    %% Line 354
			    call 'unicode':'characters_to_binary'
				(_cor3)
			in  let <_cor10> =
				%% Line 354
				#{#<_cor9>(32,1,'integer',['unsigned'|['big']]),
				  #<_cor7>('all',8,'binary',['unsigned'|['big']])}#
			    in  let <_cor12> =
				    %% Line 355
				    call 'erlang':'list_to_binary'
					(_cor2)
				in  let <_cor13> =
					%% Line 355
					call 'erlang':'size'
					    (_cor12)
				    in  let <_cor11> =
					    %% Line 355
					    call 'erlang':'list_to_binary'
						(_cor2)
					in  let <_cor14> =
						%% Line 355
						#{#<_cor13>(32,1,'integer',['unsigned'|['big']]),
						  #<_cor11>('all',8,'binary',['unsigned'|['big']])}#
					    in  let <_cor18> =
						    %% Line 358
						    call 'erlang':'list_to_binary'
							(_cor0)
						in  let <_cor19> =
							%% Line 358
							call 'erlang':'size'
							    (_cor18)
						    in  let <_cor17> =
							    %% Line 358
							    call 'erlang':'list_to_binary'
								(_cor0)
							in  let <_cor20> =
								%% Line 358
								#{#<_cor19>(32,1,'integer',['unsigned'|['big']]),
								  #<_cor17>('all',8,'binary',['unsigned'|['big']])}#
							    in  let <_cor21> =
								    %% Line 359
								    call 'erlang':'size'
									(_cor1)
								in  let <_cor22> =
									%% Line 359
									#{#<_cor21>(32,1,'integer',['unsigned'|['big']]),
									  #<_cor1>('all',8,'binary',['unsigned'|['big']])}#
								    in  let <Sig> =
									    %% Line 352
									    [_cor6|%% Line 353
										   [50|%% Line 354
										       [_cor10|%% Line 355
											       [_cor14|%% Line 356
												       [#{#<0>(8,1,'integer',['unsigned'|['big']]),
													  #<0>(8,1,'integer',['unsigned'|['big']]),
													  #<0>(8,1,'integer',['unsigned'|['big']]),
													  #<9>(8,1,'integer',['unsigned'|['big']]),
													  #<112>(8,1,'integer',['unsigned'|['big']]),
													  #<117>(8,1,'integer',['unsigned'|['big']]),
													  #<98>(8,1,'integer',['unsigned'|['big']]),
													  #<108>(8,1,'integer',['unsigned'|['big']]),
													  #<105>(8,1,'integer',['unsigned'|['big']]),
													  #<99>(8,1,'integer',['unsigned'|['big']]),
													  #<107>(8,1,'integer',['unsigned'|['big']]),
													  #<101>(8,1,'integer',['unsigned'|['big']]),
													  #<121>(8,1,'integer',['unsigned'|['big']])}#|%% Line 357
																		       [1|%% Line 358
																			  [_cor20|%% Line 359
																				  [_cor22|[]]]]]]]]]
									in  %% Line 360
									    call 'erlang':'list_to_binary'
										(Sig)
'algorithm_string'/1 =
    %% Line 362
    fun (_cor0) ->
	case _cor0 of
	  <'ssh-rsa'> when 'true' ->
	      %% Line 363
	      [115|[115|[104|[45|[114|[115|[97]]]]]]]
	  %% Line 364
	  <'ssh-dss'> when 'true' ->
	      %% Line 365
	      [115|[115|[104|[45|[100|[115|[115]]]]]]]
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'algorithm_string',1}}] )
	    -| ['compiler_generated'] )
	end
'decode_keyboard_interactive_prompts'/2 =
    %% Line 367
    fun (_cor1,_cor0) ->
	%% Line 368
	call 'ssh_message':'decode_keyboard_interactive_prompts'
	    (_cor0, [])
'keyboard_interact_get_responses'/5 =
    %% Line 370
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <NumPrompts> =
	    %% Line 371
	    call 'erlang':'length'
		(_cor0)
	in  %% Line 372
	    case call 'proplists':'get_value'
		     ('keyboard_interact_fun', _cor3) of
	      %% Line 373
	      <'undefined'>
		  when call 'erlang':'=='
			(NumPrompts,
			 1) ->
		  %% Line 376
		  case call 'proplists':'get_value'
			   ('password', _cor3) of
		    %% Line 377
		    <'undefined'> when 'true' ->
			apply 'keyboard_interact'/5
			    (_cor4, _cor2, _cor1, _cor0, _cor3)
		    %% Line 378
		    <PW> when 'true' ->
			[PW|[]]
		  end
	      %% Line 380
	      <'undefined'> when 'true' ->
		  %% Line 381
		  apply 'keyboard_interact'/5
		      (_cor4, _cor2, _cor1, _cor0, _cor3)
	      %% Line 382
	      <KbdInteractFun> when 'true' ->
		  let <_cor9> =
		      %% Line 383
		      ( fun (_cor7) ->
			    case _cor7 of
			      <{Prompt,_X_Echo}> when 'true' ->
				  Prompt
			      ( <_cor8> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor8})
				      -| [{'function_name',{'-keyboard_interact_get_responses/5-fun-0-',1}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-keyboard_interact_get_responses/5-fun-0-'}}] )
		  in  let <Prompts> =
			  %% Line 383
			  call 'lists':'map'
			      (_cor9, _cor0)
		      in  %% Line 385
			  case apply KbdInteractFun
				   (_cor2, _cor1, Prompts) of
			    %% Line 386
			    <Rs>
				when try
				      let <_cor11> =
					  call 'erlang':'length'
					      (Rs)
				      in  call 'erlang':'=='
					      (_cor11, NumPrompts)
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false' ->
				%% Line 387
				Rs
			    %% Line 388
			    <Rs> when 'true' ->
				%% Line 389
				call 'erlang':'error'
				    ({'mismatching_number_of_responses',%% Line 390
									{'got',Rs},%% Line 391
										   {'expected',NumPrompts}})
			  end
	    end
'keyboard_interact'/5 =
    %% Line 395
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 396
	    case <> of
	      <>
		  when call 'erlang':'=/='
			(_cor3,
			 []) ->
		  call _cor4:'format'
		      ([126|[115]], [_cor3|[]])
	      %% Line 397
	      <> when 'true' ->
		  'ok'
	    end
	    do  %% Line 399
		case <> of
		  <>
		      when call 'erlang':'=/='
			    (_cor2,
			     []) ->
		      call _cor4:'format'
			  ([126|[115]], [_cor2|[]])
		  %% Line 400
		  <> when 'true' ->
		      'ok'
		end
		let <_cor7> =
		    %% Line 402
		    ( fun (_cor5) ->
			  case _cor5 of
			    <{Prompt,'true'}> when 'true' ->
				call _cor4:'read_line'
				    (Prompt, _cor0)
			    %% Line 403
			    <{Prompt,'false'}> when 'true' ->
				call _cor4:'read_password'
				    (Prompt, _cor0)
			    ( <_cor6> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor6})
				    -| [{'function_name',{'-keyboard_interact/5-fun-0-',1}}] )
			      -| ['compiler_generated'] )
			  end
		      -| [{'id',{0,0,'-keyboard_interact/5-fun-0-'}}] )
		in  %% Line 402
		    call 'lists':'map'
			(_cor7, _cor1)
'other_alg'/1 =
    %% Line 407
    fun (_cor0) ->
	case _cor0 of
	  <'ssh-rsa'> when 'true' ->
	      %% Line 408
	      'ssh-dss'
	  %% Line 409
	  <'ssh-dss'> when 'true' ->
	      %% Line 410
	      'ssh-rsa'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'other_alg',1}}] )
	    -| ['compiler_generated'] )
	end
'decode_public_key_v2'/2 =
    %% Line 411
    fun (_cor1,_cor0) ->
	case <( _cor1
		-| ['reuse_for_context'] ),_cor0> of
	  <#{#<Len0>(32,1,'integer',['unsigned'|['big']]),
	     #<_cor10>(Len0,8,'binary',['unsigned'|['big']]),
	     #<%% Line 412
	       Len1>(%% Line 412
		     32,1,'integer',['unsigned'|['big']]),
	     #<%% Line 412
	       BinE>(%% Line 412
		     Len1,8,'binary',['unsigned'|['big']]),
	     #<%% Line 413
	       Len2>(%% Line 413
		     32,1,'integer',['unsigned'|['big']]),
	     #<%% Line 413
	       BinN>(%% Line 413
		     Len2,8,'binary',['unsigned'|['big']])}#,%% Line 414
							     [115|[115|[104|[45|[114|[115|[97]]]]]]]> when 'true' ->
	      let <E> =
		  %% Line 415
		  call 'ssh_bits':'erlint'
		      (Len1, BinE)
	      in  let <N> =
		      %% Line 416
		      call 'ssh_bits':'erlint'
			  (Len2, BinN)
		  in  %% Line 417
		      {'ok',{'RSAPublicKey',N,E}}
	  %% Line 418
	  <#{#<Len0>(32,1,'integer',['unsigned'|['big']]),
	     #<_cor11>(Len0,8,'binary',['unsigned'|['big']]),
	     #<%% Line 419
	       Len1>(%% Line 419
		     32,1,'integer',['unsigned'|['big']]),
	     #<%% Line 419
	       BinP>(%% Line 419
		     Len1,8,'binary',['unsigned'|['big']]),
	     #<%% Line 420
	       Len2>(%% Line 420
		     32,1,'integer',['unsigned'|['big']]),
	     #<%% Line 420
	       BinQ>(%% Line 420
		     Len2,8,'binary',['unsigned'|['big']]),
	     #<%% Line 421
	       Len3>(%% Line 421
		     32,1,'integer',['unsigned'|['big']]),
	     #<%% Line 421
	       BinG>(%% Line 421
		     Len3,8,'binary',['unsigned'|['big']]),
	     #<%% Line 422
	       Len4>(%% Line 422
		     32,1,'integer',['unsigned'|['big']]),
	     #<%% Line 422
	       BinY>(%% Line 422
		     Len4,8,'binary',['unsigned'|['big']])}#,%% Line 423
							     [115|[115|[104|[45|[100|[115|[115]]]]]]]> when 'true' ->
	      let <P> =
		  %% Line 424
		  call 'ssh_bits':'erlint'
		      (Len1, BinP)
	      in  let <Q> =
		      %% Line 425
		      call 'ssh_bits':'erlint'
			  (Len2, BinQ)
		  in  let <G> =
			  %% Line 426
			  call 'ssh_bits':'erlint'
			      (Len3, BinG)
		      in  let <Y> =
			      %% Line 427
			      call 'ssh_bits':'erlint'
				  (Len4, BinY)
			  in  %% Line 428
			      {'ok',{Y,{'Dss-Parms',P,Q,G}}}
	  %% Line 430
	  <_cor12,_cor13> when 'true' ->
	      %% Line 431
	      {'error','bad_format'}
	end
'encode_public_key'/1 =
    %% Line 433
    fun (_cor0) ->
	case _cor0 of
	  <{'RSAPrivateKey',_cor2,N,E,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 434
	      call 'ssh_bits':'encode'
		  ([[115|[115|[104|[45|[114|[115|[97]]]]]]]|[E|[N|[]]]], ['string'|['mpint'|['mpint']]])
	  %% Line 435
	  <{'DSAPrivateKey',_cor10,P,Q,G,Y,_cor11}> when 'true' ->
	      %% Line 436
	      call 'ssh_bits':'encode'
		  ([[115|[115|[104|[45|[100|[115|[115]]]]]]]|[P|[Q|[G|[Y|[]]]]]], ['string'|['mpint'|['mpint'|['mpint'|['mpint']]]]])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'encode_public_key',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('ssh_auth')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('ssh_auth', _cor0)
end