module 'ssh_transport' ['decompress'/2,
			'decrypt_blocks'/3,
			'decrypt_first_block'/2,
			'handle_hello_version'/1,
			'handle_kex_dh_gex_group'/2,
			'handle_kex_dh_gex_reply'/2,
			'handle_kex_dh_gex_request'/2,
			'handle_kexdh_init'/2,
			'handle_kexdh_reply'/2,
			'handle_kexinit_msg'/3,
			'handle_new_keys'/2,
			'hello_version_msg'/1,
			'is_valid_mac'/3,
			'key_exchange_init_msg'/1,
			'key_init'/3,
			'module_info'/0,
			'module_info'/1,
			'msg_data'/1,
			'new_keys_message'/1,
			'next_seqnum'/1,
			'pack'/2,
			'sign'/3,
			'ssh_packet'/2,
			'unpack'/3,
			'verify'/4,
			'versions'/2]
    attributes [%% Line 11
		'type' =
		    %% Line 11
		    [{{'record','AttributePKCS-7'},[{'record_field',12,{'atom',12,'type'}}|[{'record_field',12,{'atom',12,'values'}}]],[]}],
		%% Line 14
		'type' =
		    %% Line 14
		    [{{'record','AlgorithmIdentifierPKSC-7'},[{'record_field',15,{'atom',15,'algorithm'}}|[{'record_field',15,{'atom',15,'parameters'},{'atom',15,'asn1_NOVALUE'}}]],[]}],
		%% Line 17
		'type' =
		    %% Line 17
		    [{{'record','AlgorithmIdentifierPKCS-10'},[{'record_field',18,{'atom',18,'algorithm'}}|[{'record_field',18,{'atom',18,'parameters'},{'atom',18,'asn1_NOVALUE'}}]],[]}],
		%% Line 20
		'type' =
		    %% Line 20
		    [{{'record','AttributePKCS-10'},[{'record_field',21,{'atom',21,'type'}}|[{'record_field',21,{'atom',21,'values'}}]],[]}],
		%% Line 23
		'type' =
		    %% Line 23
		    [{{'record','SubjectPublicKeyInfo-PKCS-10'},[{'record_field',24,{'atom',24,'algorithm'}}|[{'record_field',24,{'atom',24,'subjectPublicKey'}}]],[]}],
		%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','ECPrivateKey'},[{'record_field',27,{'atom',27,'version'}}|[{'record_field',27,{'atom',27,'privateKey'}}|[{'record_field',27,{'atom',27,'parameters'},{'atom',27,'asn1_NOVALUE'}}|[{'record_field',27,{'atom',27,'publicKey'},{'atom',27,'asn1_NOVALUE'}}]]]],[]}],
		%% Line 29
		'type' =
		    %% Line 29
		    [{{'record','DSAPrivateKey'},[{'record_field',30,{'atom',30,'version'}}|[{'record_field',30,{'atom',30,'p'}}|[{'record_field',30,{'atom',30,'q'}}|[{'record_field',30,{'atom',30,'g'}}|[{'record_field',30,{'atom',30,'y'}}|[{'record_field',30,{'atom',30,'x'}}]]]]]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','DHParameter'},[{'record_field',33,{'atom',33,'prime'}}|[{'record_field',33,{'atom',33,'base'}}|[{'record_field',33,{'atom',33,'privateValueLength'},{'atom',33,'asn1_NOVALUE'}}]]],[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{{'record','DigestInfoNull'},[{'record_field',36,{'atom',36,'digestAlgorithm'}}|[{'record_field',36,{'atom',36,'digest'}}]],[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','DigestInfoPKCS-1'},[{'record_field',39,{'atom',39,'digestAlgorithm'}}|[{'record_field',39,{'atom',39,'digest'}}]],[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','RSASSA-PSS-params'},[{'record_field',42,{'atom',42,'hashAlgorithm'}}|[{'record_field',42,{'atom',42,'maskGenAlgorithm'}}|[{'record_field',42,{'atom',42,'saltLength'},{'atom',42,'asn1_DEFAULT'}}|[{'record_field',42,{'atom',42,'trailerField'},{'atom',42,'asn1_DEFAULT'}}]]]],[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','AlgorithmNull'},[{'record_field',45,{'atom',45,'algorithm'}}|[{'record_field',45,{'atom',45,'parameters'}}]],[]}],
		%% Line 47
		'type' =
		    %% Line 47
		    [{{'record','Algorithm'},[{'record_field',48,{'atom',48,'algorithm'}}|[{'record_field',48,{'atom',48,'parameters'},{'atom',48,'asn1_NOVALUE'}}]],[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','OtherPrimeInfo'},[{'record_field',51,{'atom',51,'prime'}}|[{'record_field',51,{'atom',51,'exponent'}}|[{'record_field',51,{'atom',51,'coefficient'}}]]],[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{{'record','RSAPrivateKey'},[{'record_field',54,{'atom',54,'version'}}|[{'record_field',54,{'atom',54,'modulus'}}|[{'record_field',54,{'atom',54,'publicExponent'}}|[{'record_field',54,{'atom',54,'privateExponent'}}|[{'record_field',54,{'atom',54,'prime1'}}|[{'record_field',54,{'atom',54,'prime2'}}|[{'record_field',54,{'atom',54,'exponent1'}}|[{'record_field',54,{'atom',54,'exponent2'}}|[{'record_field',54,{'atom',54,'coefficient'}}|[{'record_field',54,{'atom',54,'otherPrimeInfos'},{'atom',54,'asn1_NOVALUE'}}]]]]]]]]]],[]}],
		%% Line 56
		'type' =
		    %% Line 56
		    [{{'record','RSAPublicKey'},[{'record_field',57,{'atom',57,'modulus'}}|[{'record_field',57,{'atom',57,'publicExponent'}}]],[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{{'record','Curve'},[{'record_field',60,{'atom',60,'a'}}|[{'record_field',60,{'atom',60,'b'}}|[{'record_field',60,{'atom',60,'seed'},{'atom',60,'asn1_NOVALUE'}}]]],[]}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{{'record','ECParameters'},[{'record_field',63,{'atom',63,'version'}}|[{'record_field',63,{'atom',63,'fieldID'}}|[{'record_field',63,{'atom',63,'curve'}}|[{'record_field',63,{'atom',63,'base'}}|[{'record_field',63,{'atom',63,'order'}}|[{'record_field',63,{'atom',63,'cofactor'},{'atom',63,'asn1_NOVALUE'}}]]]]]],[]}],
		%% Line 65
		'type' =
		    %% Line 65
		    [{{'record','Pentanomial'},[{'record_field',66,{'atom',66,'k1'}}|[{'record_field',66,{'atom',66,'k2'}}|[{'record_field',66,{'atom',66,'k3'}}]]],[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{{'record','Characteristic-two'},[{'record_field',69,{'atom',69,'m'}}|[{'record_field',69,{'atom',69,'basis'}}|[{'record_field',69,{'atom',69,'parameters'}}]]],[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{{'record','ECDSA-Sig-Value'},[{'record_field',72,{'atom',72,'r'}}|[{'record_field',72,{'atom',72,'s'}}]],[]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{{'record','FieldID'},[{'record_field',75,{'atom',75,'fieldType'}}|[{'record_field',75,{'atom',75,'parameters'}}]],[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{{'record','ValidationParms'},[{'record_field',78,{'atom',78,'seed'}}|[{'record_field',78,{'atom',78,'pgenCounter'}}]],[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{{'record','DomainParameters'},[{'record_field',81,{'atom',81,'p'}}|[{'record_field',81,{'atom',81,'g'}}|[{'record_field',81,{'atom',81,'q'}}|[{'record_field',81,{'atom',81,'j'},{'atom',81,'asn1_NOVALUE'}}|[{'record_field',81,{'atom',81,'validationParms'},{'atom',81,'asn1_NOVALUE'}}]]]]],[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{{'record','Dss-Sig-Value'},[{'record_field',84,{'atom',84,'r'}}|[{'record_field',84,{'atom',84,'s'}}]],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{{'record','Dss-Parms'},[{'record_field',87,{'atom',87,'p'}}|[{'record_field',87,{'atom',87,'q'}}|[{'record_field',87,{'atom',87,'g'}}]]],[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','ACClearAttrs'},[{'record_field',90,{'atom',90,'acIssuer'}}|[{'record_field',90,{'atom',90,'acSerial'}}|[{'record_field',90,{'atom',90,'attrs'}}]]],[]}],
		%% Line 92
		'type' =
		    %% Line 92
		    [{{'record','AAControls'},[{'record_field',93,{'atom',93,'pathLenConstraint'},{'atom',93,'asn1_NOVALUE'}}|[{'record_field',93,{'atom',93,'permittedAttrs'},{'atom',93,'asn1_NOVALUE'}}|[{'record_field',93,{'atom',93,'excludedAttrs'},{'atom',93,'asn1_NOVALUE'}}|[{'record_field',93,{'atom',93,'permitUnSpecified'},{'atom',93,'asn1_DEFAULT'}}]]]],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','SecurityCategory'},[{'record_field',96,{'atom',96,'type'}}|[{'record_field',96,{'atom',96,'value'}}]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','Clearance'},[{'record_field',99,{'atom',99,'policyId'}}|[{'record_field',99,{'atom',99,'classList'},{'atom',99,'asn1_DEFAULT'}}|[{'record_field',99,{'atom',99,'securityCategories'},{'atom',99,'asn1_NOVALUE'}}]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','RoleSyntax'},[{'record_field',102,{'atom',102,'roleAuthority'},{'atom',102,'asn1_NOVALUE'}}|[{'record_field',102,{'atom',102,'roleName'}}]],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{{'record','SvceAuthInfo'},[{'record_field',105,{'atom',105,'service'}}|[{'record_field',105,{'atom',105,'ident'}}|[{'record_field',105,{'atom',105,'authInfo'},{'atom',105,'asn1_NOVALUE'}}]]],[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{{'record','IetfAttrSyntax'},[{'record_field',108,{'atom',108,'policyAuthority'},{'atom',108,'asn1_NOVALUE'}}|[{'record_field',108,{'atom',108,'values'}}]],[]}],
		%% Line 110
		'type' =
		    %% Line 110
		    [{{'record','TargetCert'},[{'record_field',111,{'atom',111,'targetCertificate'}}|[{'record_field',111,{'atom',111,'targetName'},{'atom',111,'asn1_NOVALUE'}}|[{'record_field',111,{'atom',111,'certDigestInfo'},{'atom',111,'asn1_NOVALUE'}}]]],[]}],
		%% Line 113
		'type' =
		    %% Line 113
		    [{{'record','AttCertValidityPeriod'},[{'record_field',114,{'atom',114,'notBeforeTime'}}|[{'record_field',114,{'atom',114,'notAfterTime'}}]],[]}],
		%% Line 116
		'type' =
		    %% Line 116
		    [{{'record','IssuerSerial'},[{'record_field',117,{'atom',117,'issuer'}}|[{'record_field',117,{'atom',117,'serial'}}|[{'record_field',117,{'atom',117,'issuerUID'},{'atom',117,'asn1_NOVALUE'}}]]],[]}],
		%% Line 119
		'type' =
		    %% Line 119
		    [{{'record','V2Form'},[{'record_field',120,{'atom',120,'issuerName'},{'atom',120,'asn1_NOVALUE'}}|[{'record_field',120,{'atom',120,'baseCertificateID'},{'atom',120,'asn1_NOVALUE'}}|[{'record_field',120,{'atom',120,'objectDigestInfo'},{'atom',120,'asn1_NOVALUE'}}]]],[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{{'record','ObjectDigestInfo'},[{'record_field',123,{'atom',123,'digestedObjectType'}}|[{'record_field',123,{'atom',123,'otherObjectTypeID'},{'atom',123,'asn1_NOVALUE'}}|[{'record_field',123,{'atom',123,'digestAlgorithm'}}|[{'record_field',123,{'atom',123,'objectDigest'}}]]]],[]}],
		%% Line 125
		'type' =
		    %% Line 125
		    [{{'record','Holder'},[{'record_field',126,{'atom',126,'baseCertificateID'},{'atom',126,'asn1_NOVALUE'}}|[{'record_field',126,{'atom',126,'entityName'},{'atom',126,'asn1_NOVALUE'}}|[{'record_field',126,{'atom',126,'objectDigestInfo'},{'atom',126,'asn1_NOVALUE'}}]]],[]}],
		%% Line 128
		'type' =
		    %% Line 128
		    [{{'record','AttributeCertificateInfo'},[{'record_field',129,{'atom',129,'version'}}|[{'record_field',129,{'atom',129,'holder'}}|[{'record_field',129,{'atom',129,'issuer'}}|[{'record_field',129,{'atom',129,'signature'}}|[{'record_field',129,{'atom',129,'serialNumber'}}|[{'record_field',129,{'atom',129,'attrCertValidityPeriod'}}|[{'record_field',129,{'atom',129,'attributes'}}|[{'record_field',129,{'atom',129,'issuerUniqueID'},{'atom',129,'asn1_NOVALUE'}}|[{'record_field',129,{'atom',129,'extensions'},{'atom',129,'asn1_NOVALUE'}}]]]]]]]]],[]}],
		%% Line 131
		'type' =
		    %% Line 131
		    [{{'record','AttributeCertificate'},[{'record_field',132,{'atom',132,'acinfo'}}|[{'record_field',132,{'atom',132,'signatureAlgorithm'}}|[{'record_field',132,{'atom',132,'signatureValue'}}]]],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{{'record','IssuingDistributionPoint'},[{'record_field',135,{'atom',135,'distributionPoint'},{'atom',135,'asn1_NOVALUE'}}|[{'record_field',135,{'atom',135,'onlyContainsUserCerts'},{'atom',135,'asn1_DEFAULT'}}|[{'record_field',135,{'atom',135,'onlyContainsCACerts'},{'atom',135,'asn1_DEFAULT'}}|[{'record_field',135,{'atom',135,'onlySomeReasons'},{'atom',135,'asn1_NOVALUE'}}|[{'record_field',135,{'atom',135,'indirectCRL'},{'atom',135,'asn1_DEFAULT'}}|[{'record_field',135,{'atom',135,'onlyContainsAttributeCerts'},{'atom',135,'asn1_DEFAULT'}}]]]]]],[]}],
		%% Line 137
		'type' =
		    %% Line 137
		    [{{'record','AccessDescription'},[{'record_field',138,{'atom',138,'accessMethod'}}|[{'record_field',138,{'atom',138,'accessLocation'}}]],[]}],
		%% Line 140
		'type' =
		    %% Line 140
		    [{{'record','DistributionPoint'},[{'record_field',141,{'atom',141,'distributionPoint'},{'atom',141,'asn1_NOVALUE'}}|[{'record_field',141,{'atom',141,'reasons'},{'atom',141,'asn1_NOVALUE'}}|[{'record_field',141,{'atom',141,'cRLIssuer'},{'atom',141,'asn1_NOVALUE'}}]]],[]}],
		%% Line 143
		'type' =
		    %% Line 143
		    [{{'record','PolicyConstraints'},[{'record_field',144,{'atom',144,'requireExplicitPolicy'},{'atom',144,'asn1_NOVALUE'}}|[{'record_field',144,{'atom',144,'inhibitPolicyMapping'},{'atom',144,'asn1_NOVALUE'}}]],[]}],
		%% Line 146
		'type' =
		    %% Line 146
		    [{{'record','GeneralSubtree'},[{'record_field',147,{'atom',147,'base'}}|[{'record_field',147,{'atom',147,'minimum'},{'atom',147,'asn1_DEFAULT'}}|[{'record_field',147,{'atom',147,'maximum'},{'atom',147,'asn1_NOVALUE'}}]]],[]}],
		%% Line 149
		'type' =
		    %% Line 149
		    [{{'record','NameConstraints'},[{'record_field',150,{'atom',150,'permittedSubtrees'},{'atom',150,'asn1_NOVALUE'}}|[{'record_field',150,{'atom',150,'excludedSubtrees'},{'atom',150,'asn1_NOVALUE'}}]],[]}],
		%% Line 152
		'type' =
		    %% Line 152
		    [{{'record','BasicConstraints'},[{'record_field',153,{'atom',153,'cA'},{'atom',153,'asn1_DEFAULT'}}|[{'record_field',153,{'atom',153,'pathLenConstraint'},{'atom',153,'asn1_NOVALUE'}}]],[]}],
		%% Line 155
		'type' =
		    %% Line 155
		    [{{'record','EDIPartyName'},[{'record_field',156,{'atom',156,'nameAssigner'},{'atom',156,'asn1_NOVALUE'}}|[{'record_field',156,{'atom',156,'partyName'}}]],[]}],
		%% Line 158
		'type' =
		    %% Line 158
		    [{{'record','AnotherName'},[{'record_field',159,{'atom',159,'type-id'}}|[{'record_field',159,{'atom',159,'value'}}]],[]}],
		%% Line 161
		'type' =
		    %% Line 161
		    [{{'record','PolicyMappings_SEQOF'},[{'record_field',162,{'atom',162,'issuerDomainPolicy'}}|[{'record_field',162,{'atom',162,'subjectDomainPolicy'}}]],[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{{'record','NoticeReference'},[{'record_field',165,{'atom',165,'organization'}}|[{'record_field',165,{'atom',165,'noticeNumbers'}}]],[]}],
		%% Line 167
		'type' =
		    %% Line 167
		    [{{'record','UserNotice'},[{'record_field',168,{'atom',168,'noticeRef'},{'atom',168,'asn1_NOVALUE'}}|[{'record_field',168,{'atom',168,'explicitText'},{'atom',168,'asn1_NOVALUE'}}]],[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{{'record','PolicyQualifierInfo'},[{'record_field',171,{'atom',171,'policyQualifierId'}}|[{'record_field',171,{'atom',171,'qualifier'}}]],[]}],
		%% Line 173
		'type' =
		    %% Line 173
		    [{{'record','PolicyInformation'},[{'record_field',174,{'atom',174,'policyIdentifier'}}|[{'record_field',174,{'atom',174,'policyQualifiers'},{'atom',174,'asn1_NOVALUE'}}]],[]}],
		%% Line 176
		'type' =
		    %% Line 176
		    [{{'record','PrivateKeyUsagePeriod'},[{'record_field',177,{'atom',177,'notBefore'},{'atom',177,'asn1_NOVALUE'}}|[{'record_field',177,{'atom',177,'notAfter'},{'atom',177,'asn1_NOVALUE'}}]],[]}],
		%% Line 179
		'type' =
		    %% Line 179
		    [{{'record','AuthorityKeyIdentifier'},[{'record_field',180,{'atom',180,'keyIdentifier'},{'atom',180,'asn1_NOVALUE'}}|[{'record_field',180,{'atom',180,'authorityCertIssuer'},{'atom',180,'asn1_NOVALUE'}}|[{'record_field',180,{'atom',180,'authorityCertSerialNumber'},{'atom',180,'asn1_NOVALUE'}}]]],[]}],
		%% Line 182
		'type' =
		    %% Line 182
		    [{{'record','EncryptedData'},[{'record_field',183,{'atom',183,'version'}}|[{'record_field',183,{'atom',183,'encryptedContentInfo'}}]],[]}],
		%% Line 185
		'type' =
		    %% Line 185
		    [{{'record','DigestedData'},[{'record_field',186,{'atom',186,'version'}}|[{'record_field',186,{'atom',186,'digestAlgorithm'}}|[{'record_field',186,{'atom',186,'contentInfo'}}|[{'record_field',186,{'atom',186,'digest'}}]]]],[]}],
		%% Line 188
		'type' =
		    %% Line 188
		    [{{'record','SignedAndEnvelopedData'},[{'record_field',189,{'atom',189,'version'}}|[{'record_field',189,{'atom',189,'recipientInfos'}}|[{'record_field',189,{'atom',189,'digestAlgorithms'}}|[{'record_field',189,{'atom',189,'encryptedContentInfo'}}|[{'record_field',189,{'atom',189,'certificates'},{'atom',189,'asn1_NOVALUE'}}|[{'record_field',189,{'atom',189,'crls'},{'atom',189,'asn1_NOVALUE'}}|[{'record_field',189,{'atom',189,'signerInfos'}}]]]]]]],[]}],
		%% Line 191
		'type' =
		    %% Line 191
		    [{{'record','RecipientInfo'},[{'record_field',192,{'atom',192,'version'}}|[{'record_field',192,{'atom',192,'issuerAndSerialNumber'}}|[{'record_field',192,{'atom',192,'keyEncryptionAlgorithm'}}|[{'record_field',192,{'atom',192,'encryptedKey'}}]]]],[]}],
		%% Line 194
		'type' =
		    %% Line 194
		    [{{'record','EncryptedContentInfo'},[{'record_field',195,{'atom',195,'contentType'}}|[{'record_field',195,{'atom',195,'contentEncryptionAlgorithm'}}|[{'record_field',195,{'atom',195,'encryptedContent'},{'atom',195,'asn1_NOVALUE'}}]]],[]}],
		%% Line 197
		'type' =
		    %% Line 197
		    [{{'record','EnvelopedData'},[{'record_field',198,{'atom',198,'version'}}|[{'record_field',198,{'atom',198,'recipientInfos'}}|[{'record_field',198,{'atom',198,'encryptedContentInfo'}}]]],[]}],
		%% Line 200
		'type' =
		    %% Line 200
		    [{{'record','DigestInfoPKCS-7'},[{'record_field',201,{'atom',201,'digestAlgorithm'}}|[{'record_field',201,{'atom',201,'digest'}}]],[]}],
		%% Line 203
		'type' =
		    %% Line 203
		    [{{'record','SignerInfo'},[{'record_field',204,{'atom',204,'version'}}|[{'record_field',204,{'atom',204,'issuerAndSerialNumber'}}|[{'record_field',204,{'atom',204,'digestAlgorithm'}}|[{'record_field',204,{'atom',204,'authenticatedAttributes'},{'atom',204,'asn1_NOVALUE'}}|[{'record_field',204,{'atom',204,'digestEncryptionAlgorithm'}}|[{'record_field',204,{'atom',204,'encryptedDigest'}}|[{'record_field',204,{'atom',204,'unauthenticatedAttributes'},{'atom',204,'asn1_NOVALUE'}}]]]]]]],[]}],
		%% Line 206
		'type' =
		    %% Line 206
		    [{{'record','SignerInfo_unauthenticatedAttributes_uaSet_SETOF'},[{'record_field',207,{'atom',207,'type'}}|[{'record_field',207,{'atom',207,'values'}}]],[]}],
		%% Line 209
		'type' =
		    %% Line 209
		    [{{'record','SignerInfo_unauthenticatedAttributes_uaSequence_SEQOF'},[{'record_field',210,{'atom',210,'type'}}|[{'record_field',210,{'atom',210,'values'}}]],[]}],
		%% Line 212
		'type' =
		    %% Line 212
		    [{{'record','SignedData'},[{'record_field',213,{'atom',213,'version'}}|[{'record_field',213,{'atom',213,'digestAlgorithms'}}|[{'record_field',213,{'atom',213,'contentInfo'}}|[{'record_field',213,{'atom',213,'certificates'},{'atom',213,'asn1_NOVALUE'}}|[{'record_field',213,{'atom',213,'crls'},{'atom',213,'asn1_NOVALUE'}}|[{'record_field',213,{'atom',213,'signerInfos'}}]]]]]],[]}],
		%% Line 215
		'type' =
		    %% Line 215
		    [{{'record','ContentInfo'},[{'record_field',216,{'atom',216,'contentType'}}|[{'record_field',216,{'atom',216,'content'},{'atom',216,'asn1_NOVALUE'}}]],[]}],
		%% Line 218
		'type' =
		    %% Line 218
		    [{{'record','KeyEncryptionAlgorithmIdentifier'},[{'record_field',219,{'atom',219,'algorithm'}}|[{'record_field',219,{'atom',219,'parameters'},{'atom',219,'asn1_NOVALUE'}}]],[]}],
		%% Line 221
		'type' =
		    %% Line 221
		    [{{'record','IssuerAndSerialNumber'},[{'record_field',222,{'atom',222,'issuer'}}|[{'record_field',222,{'atom',222,'serialNumber'}}]],[]}],
		%% Line 224
		'type' =
		    %% Line 224
		    [{{'record','DigestEncryptionAlgorithmIdentifier'},[{'record_field',225,{'atom',225,'algorithm'}}|[{'record_field',225,{'atom',225,'parameters'},{'atom',225,'asn1_NOVALUE'}}]],[]}],
		%% Line 227
		'type' =
		    %% Line 227
		    [{{'record','DigestAlgorithmIdentifier'},[{'record_field',228,{'atom',228,'algorithm'}}|[{'record_field',228,{'atom',228,'parameters'},{'atom',228,'asn1_NOVALUE'}}]],[]}],
		%% Line 230
		'type' =
		    %% Line 230
		    [{{'record','ContentEncryptionAlgorithmIdentifier'},[{'record_field',231,{'atom',231,'algorithm'}}|[{'record_field',231,{'atom',231,'parameters'},{'atom',231,'asn1_NOVALUE'}}]],[]}],
		%% Line 233
		'type' =
		    %% Line 233
		    [{{'record','SignerInfoAuthenticatedAttributes_aaSet_SETOF'},[{'record_field',234,{'atom',234,'type'}}|[{'record_field',234,{'atom',234,'values'}}]],[]}],
		%% Line 236
		'type' =
		    %% Line 236
		    [{{'record','SignerInfoAuthenticatedAttributes_aaSequence_SEQOF'},[{'record_field',237,{'atom',237,'type'}}|[{'record_field',237,{'atom',237,'values'}}]],[]}],
		%% Line 239
		'type' =
		    %% Line 239
		    [{{'record','CertificationRequest'},[{'record_field',240,{'atom',240,'certificationRequestInfo'}}|[{'record_field',240,{'atom',240,'signatureAlgorithm'}}|[{'record_field',240,{'atom',240,'signature'}}]]],[]}],
		%% Line 242
		'type' =
		    %% Line 242
		    [{{'record','CertificationRequest_signatureAlgorithm'},[{'record_field',243,{'atom',243,'algorithm'}}|[{'record_field',243,{'atom',243,'parameters'},{'atom',243,'asn1_NOVALUE'}}]],[]}],
		%% Line 245
		'type' =
		    %% Line 245
		    [{{'record','CertificationRequestInfo'},[{'record_field',246,{'atom',246,'version'}}|[{'record_field',246,{'atom',246,'subject'}}|[{'record_field',246,{'atom',246,'subjectPKInfo'}}|[{'record_field',246,{'atom',246,'attributes'}}]]]],[]}],
		%% Line 248
		'type' =
		    %% Line 248
		    [{{'record','CertificationRequestInfo_subjectPKInfo'},[{'record_field',249,{'atom',249,'algorithm'}}|[{'record_field',249,{'atom',249,'subjectPublicKey'}}]],[]}],
		%% Line 251
		'type' =
		    %% Line 251
		    [{{'record','CertificationRequestInfo_subjectPKInfo_algorithm'},[{'record_field',252,{'atom',252,'algorithm'}}|[{'record_field',252,{'atom',252,'parameters'},{'atom',252,'asn1_NOVALUE'}}]],[]}],
		%% Line 254
		'type' =
		    %% Line 254
		    [{{'record','CertificationRequestInfo_attributes_SETOF'},[{'record_field',255,{'atom',255,'type'}}|[{'record_field',255,{'atom',255,'values'}}]],[]}],
		%% Line 257
		'type' =
		    %% Line 257
		    [{{'record','TeletexDomainDefinedAttribute'},[{'record_field',258,{'atom',258,'type'}}|[{'record_field',258,{'atom',258,'value'}}]],[]}],
		%% Line 260
		'type' =
		    %% Line 260
		    [{{'record','PresentationAddress'},[{'record_field',261,{'atom',261,'pSelector'},{'atom',261,'asn1_NOVALUE'}}|[{'record_field',261,{'atom',261,'sSelector'},{'atom',261,'asn1_NOVALUE'}}|[{'record_field',261,{'atom',261,'tSelector'},{'atom',261,'asn1_NOVALUE'}}|[{'record_field',261,{'atom',261,'nAddresses'}}]]]],[]}],
		%% Line 263
		'type' =
		    %% Line 263
		    [{{'record','ExtendedNetworkAddress_e163-4-address'},[{'record_field',264,{'atom',264,'number'}}|[{'record_field',264,{'atom',264,'sub-address'},{'atom',264,'asn1_NOVALUE'}}]],[]}],
		%% Line 266
		'type' =
		    %% Line 266
		    [{{'record','PDSParameter'},[{'record_field',267,{'atom',267,'printable-string'},{'atom',267,'asn1_NOVALUE'}}|[{'record_field',267,{'atom',267,'teletex-string'},{'atom',267,'asn1_NOVALUE'}}]],[]}],
		%% Line 269
		'type' =
		    %% Line 269
		    [{{'record','UnformattedPostalAddress'},[{'record_field',270,{'atom',270,'printable-address'},{'atom',270,'asn1_NOVALUE'}}|[{'record_field',270,{'atom',270,'teletex-string'},{'atom',270,'asn1_NOVALUE'}}]],[]}],
		%% Line 272
		'type' =
		    %% Line 272
		    [{{'record','TeletexPersonalName'},[{'record_field',273,{'atom',273,'surname'}}|[{'record_field',273,{'atom',273,'given-name'},{'atom',273,'asn1_NOVALUE'}}|[{'record_field',273,{'atom',273,'initials'},{'atom',273,'asn1_NOVALUE'}}|[{'record_field',273,{'atom',273,'generation-qualifier'},{'atom',273,'asn1_NOVALUE'}}]]]],[]}],
		%% Line 275
		'type' =
		    %% Line 275
		    [{{'record','ExtensionAttribute'},[{'record_field',276,{'atom',276,'extension-attribute-type'}}|[{'record_field',276,{'atom',276,'extension-attribute-value'}}]],[]}],
		%% Line 278
		'type' =
		    %% Line 278
		    [{{'record','BuiltInDomainDefinedAttribute'},[{'record_field',279,{'atom',279,'type'}}|[{'record_field',279,{'atom',279,'value'}}]],[]}],
		%% Line 281
		'type' =
		    %% Line 281
		    [{{'record','PersonalName'},[{'record_field',282,{'atom',282,'surname'}}|[{'record_field',282,{'atom',282,'given-name'},{'atom',282,'asn1_NOVALUE'}}|[{'record_field',282,{'atom',282,'initials'},{'atom',282,'asn1_NOVALUE'}}|[{'record_field',282,{'atom',282,'generation-qualifier'},{'atom',282,'asn1_NOVALUE'}}]]]],[]}],
		%% Line 284
		'type' =
		    %% Line 284
		    [{{'record','BuiltInStandardAttributes'},[{'record_field',285,{'atom',285,'country-name'},{'atom',285,'asn1_NOVALUE'}}|[{'record_field',285,{'atom',285,'administration-domain-name'},{'atom',285,'asn1_NOVALUE'}}|[{'record_field',285,{'atom',285,'network-address'},{'atom',285,'asn1_NOVALUE'}}|[{'record_field',285,{'atom',285,'terminal-identifier'},{'atom',285,'asn1_NOVALUE'}}|[{'record_field',285,{'atom',285,'private-domain-name'},{'atom',285,'asn1_NOVALUE'}}|[{'record_field',285,{'atom',285,'organization-name'},{'atom',285,'asn1_NOVALUE'}}|[{'record_field',285,{'atom',285,'numeric-user-identifier'},{'atom',285,'asn1_NOVALUE'}}|[{'record_field',285,{'atom',285,'personal-name'},{'atom',285,'asn1_NOVALUE'}}|[{'record_field',285,{'atom',285,'organizational-unit-names'},{'atom',285,'asn1_NOVALUE'}}]]]]]]]]],[]}],
		%% Line 287
		'type' =
		    %% Line 287
		    [{{'record','ORAddress'},[{'record_field',288,{'atom',288,'built-in-standard-attributes'}}|[{'record_field',288,{'atom',288,'built-in-domain-defined-attributes'},{'atom',288,'asn1_NOVALUE'}}|[{'record_field',288,{'atom',288,'extension-attributes'},{'atom',288,'asn1_NOVALUE'}}]]],[]}],
		%% Line 290
		'type' =
		    %% Line 290
		    [{{'record','AlgorithmIdentifier'},[{'record_field',291,{'atom',291,'algorithm'}}|[{'record_field',291,{'atom',291,'parameters'},{'atom',291,'asn1_NOVALUE'}}]],[]}],
		%% Line 293
		'type' =
		    %% Line 293
		    [{{'record','TBSCertList'},[{'record_field',294,{'atom',294,'version'},{'atom',294,'asn1_NOVALUE'}}|[{'record_field',294,{'atom',294,'signature'}}|[{'record_field',294,{'atom',294,'issuer'}}|[{'record_field',294,{'atom',294,'thisUpdate'}}|[{'record_field',294,{'atom',294,'nextUpdate'},{'atom',294,'asn1_NOVALUE'}}|[{'record_field',294,{'atom',294,'revokedCertificates'},{'atom',294,'asn1_NOVALUE'}}|[{'record_field',294,{'atom',294,'crlExtensions'},{'atom',294,'asn1_NOVALUE'}}]]]]]]],[]}],
		%% Line 296
		'type' =
		    %% Line 296
		    [{{'record','TBSCertList_revokedCertificates_SEQOF'},[{'record_field',297,{'atom',297,'userCertificate'}}|[{'record_field',297,{'atom',297,'revocationDate'}}|[{'record_field',297,{'atom',297,'crlEntryExtensions'},{'atom',297,'asn1_NOVALUE'}}]]],[]}],
		%% Line 299
		'type' =
		    %% Line 299
		    [{{'record','CertificateList'},[{'record_field',300,{'atom',300,'tbsCertList'}}|[{'record_field',300,{'atom',300,'signatureAlgorithm'}}|[{'record_field',300,{'atom',300,'signature'}}]]],[]}],
		%% Line 302
		'type' =
		    %% Line 302
		    [{{'record','Extension'},[{'record_field',303,{'atom',303,'extnID'}}|[{'record_field',303,{'atom',303,'critical'},{'atom',303,'asn1_DEFAULT'}}|[{'record_field',303,{'atom',303,'extnValue'}}]]],[]}],
		%% Line 305
		'type' =
		    %% Line 305
		    [{{'record','SubjectPublicKeyInfo'},[{'record_field',306,{'atom',306,'algorithm'}}|[{'record_field',306,{'atom',306,'subjectPublicKey'}}]],[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{{'record','Validity'},[{'record_field',309,{'atom',309,'notBefore'}}|[{'record_field',309,{'atom',309,'notAfter'}}]],[]}],
		%% Line 311
		'type' =
		    %% Line 311
		    [{{'record','TBSCertificate'},[{'record_field',312,{'atom',312,'version'},{'atom',312,'asn1_DEFAULT'}}|[{'record_field',312,{'atom',312,'serialNumber'}}|[{'record_field',312,{'atom',312,'signature'}}|[{'record_field',312,{'atom',312,'issuer'}}|[{'record_field',312,{'atom',312,'validity'}}|[{'record_field',312,{'atom',312,'subject'}}|[{'record_field',312,{'atom',312,'subjectPublicKeyInfo'}}|[{'record_field',312,{'atom',312,'issuerUniqueID'},{'atom',312,'asn1_NOVALUE'}}|[{'record_field',312,{'atom',312,'subjectUniqueID'},{'atom',312,'asn1_NOVALUE'}}|[{'record_field',312,{'atom',312,'extensions'},{'atom',312,'asn1_NOVALUE'}}]]]]]]]]]],[]}],
		%% Line 314
		'type' =
		    %% Line 314
		    [{{'record','Certificate'},[{'record_field',315,{'atom',315,'tbsCertificate'}}|[{'record_field',315,{'atom',315,'signatureAlgorithm'}}|[{'record_field',315,{'atom',315,'signature'}}]]],[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{{'record','AttributeTypeAndValue'},[{'record_field',318,{'atom',318,'type'}}|[{'record_field',318,{'atom',318,'value'}}]],[]}],
		%% Line 320
		'type' =
		    %% Line 320
		    [{{'record','Attribute'},[{'record_field',321,{'atom',321,'type'}}|[{'record_field',321,{'atom',321,'values'}}]],[]}],
		%% Line 323
		'type' =
		    %% Line 323
		    [{{'record','Extension-Any'},[{'record_field',324,{'atom',324,'extnID'}}|[{'record_field',324,{'atom',324,'critical'},{'atom',324,'asn1_DEFAULT'}}|[{'record_field',324,{'atom',324,'extnValue'}}]]],[]}],
		%% Line 326
		'type' =
		    %% Line 326
		    [{{'record','OTPExtension'},[{'record_field',327,{'atom',327,'extnID'}}|[{'record_field',327,{'atom',327,'critical'},{'atom',327,'asn1_DEFAULT'}}|[{'record_field',327,{'atom',327,'extnValue'}}]]],[]}],
		%% Line 329
		'type' =
		    %% Line 329
		    [{{'record','OTPExtensionAttribute'},[{'record_field',330,{'atom',330,'extensionAttributeType'}}|[{'record_field',330,{'atom',330,'extensionAttributeValue'}}]],[]}],
		%% Line 332
		'type' =
		    %% Line 332
		    [{{'record','OTPCharacteristic-two'},[{'record_field',333,{'atom',333,'m'}}|[{'record_field',333,{'atom',333,'basis'}}|[{'record_field',333,{'atom',333,'parameters'}}]]],[]}],
		%% Line 335
		'type' =
		    %% Line 335
		    [{{'record','OTPFieldID'},[{'record_field',336,{'atom',336,'fieldType'}}|[{'record_field',336,{'atom',336,'parameters'}}]],[]}],
		%% Line 338
		'type' =
		    %% Line 338
		    [{{'record','PublicKeyAlgorithm'},[{'record_field',339,{'atom',339,'algorithm'}}|[{'record_field',339,{'atom',339,'parameters'},{'atom',339,'asn1_NOVALUE'}}]],[]}],
		%% Line 341
		'type' =
		    %% Line 341
		    [{{'record','SignatureAlgorithm-Any'},[{'record_field',342,{'atom',342,'algorithm'}}|[{'record_field',342,{'atom',342,'parameters'},{'atom',342,'asn1_NOVALUE'}}]],[]}],
		%% Line 344
		'type' =
		    %% Line 344
		    [{{'record','SignatureAlgorithm'},[{'record_field',345,{'atom',345,'algorithm'}}|[{'record_field',345,{'atom',345,'parameters'},{'atom',345,'asn1_NOVALUE'}}]],[]}],
		%% Line 347
		'type' =
		    %% Line 347
		    [{{'record','OTPSubjectPublicKeyInfo-Any'},[{'record_field',348,{'atom',348,'algorithm'}}|[{'record_field',348,{'atom',348,'subjectPublicKey'}}]],[]}],
		%% Line 350
		'type' =
		    %% Line 350
		    [{{'record','OTPSubjectPublicKeyInfo'},[{'record_field',351,{'atom',351,'algorithm'}}|[{'record_field',351,{'atom',351,'subjectPublicKey'}}]],[]}],
		%% Line 353
		'type' =
		    %% Line 353
		    [{{'record','OTPOLDSubjectPublicKeyInfo'},[{'record_field',354,{'atom',354,'algorithm'}}|[{'record_field',354,{'atom',354,'subjectPublicKey'}}]],[]}],
		%% Line 356
		'type' =
		    %% Line 356
		    [{{'record','OTPOLDSubjectPublicKeyInfo_algorithm'},[{'record_field',357,{'atom',357,'algo'}}|[{'record_field',357,{'atom',357,'parameters'},{'atom',357,'asn1_NOVALUE'}}]],[]}],
		%% Line 359
		'type' =
		    %% Line 359
		    [{{'record','OTPAttributeTypeAndValue'},[{'record_field',360,{'atom',360,'type'}}|[{'record_field',360,{'atom',360,'value'}}]],[]}],
		%% Line 362
		'type' =
		    %% Line 362
		    [{{'record','OTPTBSCertificate'},[{'record_field',363,{'atom',363,'version'},{'atom',363,'asn1_DEFAULT'}}|[{'record_field',363,{'atom',363,'serialNumber'}}|[{'record_field',363,{'atom',363,'signature'}}|[{'record_field',363,{'atom',363,'issuer'}}|[{'record_field',363,{'atom',363,'validity'}}|[{'record_field',363,{'atom',363,'subject'}}|[{'record_field',363,{'atom',363,'subjectPublicKeyInfo'}}|[{'record_field',363,{'atom',363,'issuerUniqueID'},{'atom',363,'asn1_NOVALUE'}}|[{'record_field',363,{'atom',363,'subjectUniqueID'},{'atom',363,'asn1_NOVALUE'}}|[{'record_field',363,{'atom',363,'extensions'},{'atom',363,'asn1_NOVALUE'}}]]]]]]]]]],[]}],
		%% Line 365
		'type' =
		    %% Line 365
		    [{{'record','OTPCertificate'},[{'record_field',366,{'atom',366,'tbsCertificate'}}|[{'record_field',366,{'atom',366,'signatureAlgorithm'}}|[{'record_field',366,{'atom',366,'signature'}}]]],[]}],
		%% Line 11
		'type' =
		    %% Line 11
		    [{{'record','AlgorithmIdentifierPKCS5v2-0'},[{'record_field',12,{'atom',12,'algorithm'}}|[{'record_field',12,{'atom',12,'parameters'},{'atom',12,'asn1_NOVALUE'}}]],[]}],
		%% Line 14
		'type' =
		    %% Line 14
		    [{{'record','PKAttribute'},[{'record_field',15,{'atom',15,'type'}}|[{'record_field',15,{'atom',15,'values'}}|[{'record_field',15,{'atom',15,'valuesWithContext'},{'atom',15,'asn1_NOVALUE'}}]]],[]}],
		%% Line 17
		'type' =
		    %% Line 17
		    [{{'record','PKAttribute_valuesWithContext_SETOF'},[{'record_field',18,{'atom',18,'value'}}|[{'record_field',18,{'atom',18,'contextList'}}]],[]}],
		%% Line 20
		'type' =
		    %% Line 20
		    [{{'record','AlgorithmIdentifierPKCS-8'},[{'record_field',21,{'atom',21,'algorithm'}}|[{'record_field',21,{'atom',21,'parameters'},{'atom',21,'asn1_NOVALUE'}}]],[]}],
		%% Line 23
		'type' =
		    %% Line 23
		    [{{'record','RC5-CBC-Parameters'},[{'record_field',24,{'atom',24,'version'}}|[{'record_field',24,{'atom',24,'rounds'}}|[{'record_field',24,{'atom',24,'blockSizeInBits'}}|[{'record_field',24,{'atom',24,'iv'},{'atom',24,'asn1_NOVALUE'}}]]]],[]}],
		%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','RC2-CBC-Parameter'},[{'record_field',27,{'atom',27,'rc2ParameterVersion'},{'atom',27,'asn1_NOVALUE'}}|[{'record_field',27,{'atom',27,'iv'}}]],[]}],
		%% Line 29
		'type' =
		    %% Line 29
		    [{{'record','PBMAC1-params'},[{'record_field',30,{'atom',30,'keyDerivationFunc'}}|[{'record_field',30,{'atom',30,'messageAuthScheme'}}]],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','PBMAC1-params_keyDerivationFunc'},[{'record_field',33,{'atom',33,'algorithm'}}|[{'record_field',33,{'atom',33,'parameters'},{'atom',33,'asn1_NOVALUE'}}]],[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{{'record','PBMAC1-params_messageAuthScheme'},[{'record_field',36,{'atom',36,'algorithm'}}|[{'record_field',36,{'atom',36,'parameters'},{'atom',36,'asn1_NOVALUE'}}]],[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','PBES2-params'},[{'record_field',39,{'atom',39,'keyDerivationFunc'}}|[{'record_field',39,{'atom',39,'encryptionScheme'}}]],[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','PBES2-params_keyDerivationFunc'},[{'record_field',42,{'atom',42,'algorithm'}}|[{'record_field',42,{'atom',42,'parameters'},{'atom',42,'asn1_NOVALUE'}}]],[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','PBES2-params_encryptionScheme'},[{'record_field',45,{'atom',45,'algorithm'}}|[{'record_field',45,{'atom',45,'parameters'},{'atom',45,'asn1_NOVALUE'}}]],[]}],
		%% Line 47
		'type' =
		    %% Line 47
		    [{{'record','PBEParameter'},[{'record_field',48,{'atom',48,'salt'}}|[{'record_field',48,{'atom',48,'iterationCount'}}]],[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','PBKDF2-params'},[{'record_field',51,{'atom',51,'salt'}}|[{'record_field',51,{'atom',51,'iterationCount'}}|[{'record_field',51,{'atom',51,'keyLength'},{'atom',51,'asn1_NOVALUE'}}|[{'record_field',51,{'atom',51,'prf'},{'atom',51,'asn1_DEFAULT'}}]]]],[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{{'record','PBKDF2-params_salt_otherSource'},[{'record_field',54,{'atom',54,'algorithm'}}|[{'record_field',54,{'atom',54,'parameters'},{'atom',54,'asn1_NOVALUE'}}]],[]}],
		%% Line 56
		'type' =
		    %% Line 56
		    [{{'record','PBKDF2-params_prf'},[{'record_field',57,{'atom',57,'algorithm'}}|[{'record_field',57,{'atom',57,'parameters'},{'atom',57,'asn1_NOVALUE'}}]],[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{{'record','Context'},[{'record_field',60,{'atom',60,'contextType'}}|[{'record_field',60,{'atom',60,'contextValues'}}|[{'record_field',60,{'atom',60,'fallback'},{'atom',60,'asn1_DEFAULT'}}]]],[]}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{{'record','EncryptedPrivateKeyInfo'},[{'record_field',63,{'atom',63,'encryptionAlgorithm'}}|[{'record_field',63,{'atom',63,'encryptedData'}}]],[]}],
		%% Line 65
		'type' =
		    %% Line 65
		    [{{'record','EncryptedPrivateKeyInfo_encryptionAlgorithm'},[{'record_field',66,{'atom',66,'algorithm'}}|[{'record_field',66,{'atom',66,'parameters'},{'atom',66,'asn1_NOVALUE'}}]],[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{{'record','Attributes_SETOF'},[{'record_field',69,{'atom',69,'type'}}|[{'record_field',69,{'atom',69,'values'}}|[{'record_field',69,{'atom',69,'valuesWithContext'},{'atom',69,'asn1_NOVALUE'}}]]],[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{{'record','Attributes_SETOF_valuesWithContext_SETOF'},[{'record_field',72,{'atom',72,'value'}}|[{'record_field',72,{'atom',72,'contextList'}}]],[]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{{'record','PrivateKeyInfo'},[{'record_field',75,{'atom',75,'version'}}|[{'record_field',75,{'atom',75,'privateKeyAlgorithm'}}|[{'record_field',75,{'atom',75,'privateKey'}}|[{'record_field',75,{'atom',75,'attributes'},{'atom',75,'asn1_NOVALUE'}}]]]],[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{{'record','PrivateKeyInfo_privateKeyAlgorithm'},[{'record_field',78,{'atom',78,'algorithm'}}|[{'record_field',78,{'atom',78,'parameters'},{'atom',78,'asn1_NOVALUE'}}]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','SubjectPublicKeyInfoAlgorithm'},[{'record_field',29,{'atom',29,'algorithm'}}|[{'record_field',30,{'atom',30,'parameters'},{'atom',30,'asn1_NOVALUE'}}]],[]}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{{'record','path_validation_state'},[{'record_field',44,{'atom',44,'valid_policy_tree'}}|[{'record_field',45,{'atom',45,'explicit_policy'}}|[{'record_field',46,{'atom',46,'inhibit_any_policy'}}|[{'record_field',47,{'atom',47,'policy_mapping'}}|[{'record_field',48,{'atom',48,'cert_num'}}|[{'record_field',49,{'atom',49,'last_cert'},{'atom',49,'false'}}|[{'record_field',50,{'atom',50,'permitted_subtrees'},{'atom',50,'no_constraints'}}|[{'record_field',51,{'atom',51,'excluded_subtrees'},{'nil',51}}|[{'record_field',52,{'atom',52,'working_public_key_algorithm'}}|[{'record_field',53,{'atom',53,'working_public_key'}}|[{'record_field',54,{'atom',54,'working_public_key_parameters'}}|[{'record_field',55,{'atom',55,'working_issuer_name'}}|[{'record_field',56,{'atom',56,'max_path_length'}}|[{'record_field',57,{'atom',57,'verify_fun'}}|[{'record_field',58,{'atom',58,'user_state'}}]]]]]]]]]]]]]]],[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{{'record','policy_tree_node'},[{'record_field',62,{'atom',62,'valid_policy'}}|[{'record_field',63,{'atom',63,'qualifier_set'}}|[{'record_field',64,{'atom',64,'criticality_indicator'}}|[{'record_field',65,{'atom',65,'expected_policy_set'}}]]]],[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{{'record','revoke_state'},[{'record_field',69,{'atom',69,'reasons_mask'}}|[{'record_field',70,{'atom',70,'cert_status'}}|[{'record_field',71,{'atom',71,'interim_reasons_mask'}}|[{'record_field',72,{'atom',72,'valid_ext'}}]]]],[]}],
		%% Line 75
		'type' =
		    %% Line 75
		    [{{'record','ECPoint'},[{'record_field',76,{'atom',76,'point'}}],[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{{'record','hostent'},[{'typed_record_field',{'record_field',24,{'atom',24,'h_name'}},{'type',24,'union',[{'atom',24,'undefined'}|[{'remote_type',24,[{'atom',24,'inet'}|[{'atom',24,'hostname'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',25,{'atom',25,'h_aliases'},{'nil',25}},{'type',25,'list',[{'remote_type',25,[{'atom',25,'inet'}|[{'atom',25,'hostname'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'h_addrtype'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'inet'}|[{'atom',26,'inet6'}]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'h_length'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'type',27,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'h_addr_list'},{'nil',28}},{'type',28,'list',[{'remote_type',28,[{'atom',28,'inet'}|[{'atom',28,'ip_address'}|[[]]]]}]}}]]]]],[]}],
		%% Line 52
		'type' =
		    %% Line 52
		    [{{'record','ssh_msg_disconnect'},[{'record_field',54,{'atom',54,'code'}}|[{'record_field',55,{'atom',55,'description'}}|[{'record_field',56,{'atom',56,'language'}}]]],[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{{'record','ssh_msg_ignore'},[{'record_field',61,{'atom',61,'data'}}],[]}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{{'record','ssh_msg_unimplemented'},[{'record_field',66,{'atom',66,'sequence'}}],[]}],
		%% Line 69
		'type' =
		    %% Line 69
		    [{{'record','ssh_msg_debug'},[{'record_field',71,{'atom',71,'always_display'}}|[{'record_field',72,{'atom',72,'message'}}|[{'record_field',73,{'atom',73,'language'}}]]],[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{{'record','ssh_msg_service_request'},[{'record_field',79,{'atom',79,'name'}}],[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{{'record','ssh_msg_service_accept'},[{'record_field',84,{'atom',84,'name'}}],[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{{'record','ssh_msg_kexinit'},[{'record_field',89,{'atom',89,'cookie'}}|[{'record_field',90,{'atom',90,'kex_algorithms'}}|[{'record_field',91,{'atom',91,'server_host_key_algorithms'}}|[{'record_field',92,{'atom',92,'encryption_algorithms_client_to_server'}}|[{'record_field',93,{'atom',93,'encryption_algorithms_server_to_client'}}|[{'record_field',94,{'atom',94,'mac_algorithms_client_to_server'}}|[{'record_field',95,{'atom',95,'mac_algorithms_server_to_client'}}|[{'record_field',96,{'atom',96,'compression_algorithms_client_to_server'}}|[{'record_field',97,{'atom',97,'compression_algorithms_server_to_client'}}|[{'record_field',98,{'atom',98,'languages_client_to_server'}}|[{'record_field',99,{'atom',99,'languages_server_to_client'}}|[{'record_field',100,{'atom',100,'first_kex_packet_follows'},{'atom',100,'false'}}|[{'record_field',102,{'atom',102,'reserved'},{'integer',102,0}}]]]]]]]]]]]]],[]}],
		%% Line 115
		'type' =
		    %% Line 115
		    [{{'record','ssh_msg_kexdh_init'},[{'record_field',117,{'atom',117,'e'}}],[]}],
		%% Line 120
		'type' =
		    %% Line 120
		    [{{'record','ssh_msg_kexdh_reply'},[{'record_field',122,{'atom',122,'public_host_key'}}|[{'record_field',123,{'atom',123,'f'}}|[{'record_field',124,{'atom',124,'h_sig'}}]]],[]}],
		%% Line 127
		'type' =
		    %% Line 127
		    [{{'record','ssh_msg_newkeys'},[],[]}],
		%% Line 143
		'type' =
		    %% Line 143
		    [{{'record','ssh_msg_kex_dh_gex_request'},[{'record_field',145,{'atom',145,'min'}}|[{'record_field',146,{'atom',146,'n'}}|[{'record_field',147,{'atom',147,'max'}}]]],[]}],
		%% Line 150
		'type' =
		    %% Line 150
		    [{{'record','ssh_msg_kex_dh_gex_request_old'},[{'record_field',152,{'atom',152,'n'}}],[]}],
		%% Line 155
		'type' =
		    %% Line 155
		    [{{'record','ssh_msg_kex_dh_gex_group'},[{'record_field',157,{'atom',157,'p'}}|[{'record_field',158,{'atom',158,'g'}}]],[]}],
		%% Line 161
		'type' =
		    %% Line 161
		    [{{'record','ssh_msg_kex_dh_gex_init'},[{'record_field',163,{'atom',163,'e'}}],[]}],
		%% Line 166
		'type' =
		    %% Line 166
		    [{{'record','ssh_msg_kex_dh_gex_reply'},[{'record_field',168,{'atom',168,'public_host_key'}}|[{'record_field',169,{'atom',169,'f'}}|[{'record_field',170,{'atom',170,'h_sig'}}]]],[]}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{{'record','ssh'},[{'record_field',68,{'atom',68,'role'}}|[{'record_field',69,{'atom',69,'peer'}}|[{'record_field',71,{'atom',71,'c_vsn'}}|[{'record_field',72,{'atom',72,'s_vsn'}}|[{'record_field',74,{'atom',74,'c_version'}}|[{'record_field',75,{'atom',75,'s_version'}}|[{'record_field',77,{'atom',77,'c_keyinit'}}|[{'record_field',78,{'atom',78,'s_keyinit'}}|[{'record_field',80,{'atom',80,'algorithms'}}|[{'record_field',82,{'atom',82,'kex'}}|[{'record_field',83,{'atom',83,'hkey'}}|[{'record_field',84,{'atom',84,'key_cb'}}|[{'record_field',85,{'atom',85,'io_cb'}}|[{'record_field',87,{'atom',87,'send_mac'},{'atom',87,'none'}}|[{'record_field',88,{'atom',88,'send_mac_key'}}|[{'record_field',89,{'atom',89,'send_mac_size'},{'integer',89,0}}|[{'record_field',91,{'atom',91,'recv_mac'},{'atom',91,'none'}}|[{'record_field',92,{'atom',92,'recv_mac_key'}}|[{'record_field',93,{'atom',93,'recv_mac_size'},{'integer',93,0}}|[{'record_field',95,{'atom',95,'encrypt'},{'atom',95,'none'}}|[{'record_field',96,{'atom',96,'encrypt_keys'}}|[{'record_field',97,{'atom',97,'encrypt_block_size'},{'integer',97,8}}|[{'record_field',98,{'atom',98,'encrypt_ctx'}}|[{'record_field',100,{'atom',100,'decrypt'},{'atom',100,'none'}}|[{'record_field',101,{'atom',101,'decrypt_keys'}}|[{'record_field',102,{'atom',102,'decrypt_block_size'},{'integer',102,8}}|[{'record_field',103,{'atom',103,'decrypt_ctx'}}|[{'record_field',105,{'atom',105,'compress'},{'atom',105,'none'}}|[{'record_field',106,{'atom',106,'compress_ctx'}}|[{'record_field',107,{'atom',107,'decompress'},{'atom',107,'none'}}|[{'record_field',108,{'atom',108,'decompress_ctx'}}|[{'record_field',110,{'atom',110,'c_lng'},{'atom',110,'none'}}|[{'record_field',111,{'atom',111,'s_lng'},{'atom',111,'none'}}|[{'record_field',113,{'atom',113,'user_ack'},{'atom',113,'true'}}|[{'record_field',114,{'atom',114,'timeout'},{'atom',114,'infinity'}}|[{'record_field',116,{'atom',116,'shared_secret'}}|[{'record_field',117,{'atom',117,'exchanged_hash'}}|[{'record_field',118,{'atom',118,'session_id'}}|[{'record_field',120,{'atom',120,'opts'},{'nil',120}}|[{'record_field',121,{'atom',121,'send_sequence'},{'integer',121,0}}|[{'record_field',122,{'atom',122,'recv_sequence'},{'integer',122,0}}|[{'record_field',123,{'atom',123,'keyex_key'}}|[{'record_field',124,{'atom',124,'keyex_info'}}|[{'record_field',127,{'atom',127,'user'}}|[{'record_field',128,{'atom',128,'service'}}|[{'record_field',129,{'atom',129,'userauth_quiet_mode'}}|[{'record_field',130,{'atom',130,'userauth_supported_methods'}}|[{'record_field',131,{'atom',131,'userauth_methods'}}|[{'record_field',132,{'atom',132,'userauth_preference'}}|[{'record_field',133,{'atom',133,'available_host_keys'}}|[{'record_field',134,{'atom',134,'authenticated'},{'atom',134,'false'}}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]}],
		%% Line 137
		'type' =
		    %% Line 137
		    [{{'record','alg'},[{'record_field',139,{'atom',139,'kex'}}|[{'record_field',140,{'atom',140,'hkey'}}|[{'record_field',141,{'atom',141,'send_mac'}}|[{'record_field',142,{'atom',142,'recv_mac'}}|[{'record_field',143,{'atom',143,'encrypt'}}|[{'record_field',144,{'atom',144,'decrypt'}}|[{'record_field',145,{'atom',145,'compress'}}|[{'record_field',146,{'atom',146,'decompress'}}|[{'record_field',147,{'atom',147,'c_lng'}}|[{'record_field',148,{'atom',148,'s_lng'}}]]]]]]]]]],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{{'record','ssh_key'},[{'record_field',153,{'atom',153,'type'}}|[{'record_field',154,{'atom',154,'public'}}|[{'record_field',155,{'atom',155,'private'}}|[{'record_field',156,{'atom',156,'comment'},{'string',156,[]}}]]]],[]}],
		%% Line 159
		'type' =
		    %% Line 159
		    [{{'record','ssh_pty'},[{'record_field',159,{'atom',159,'term'},{'string',159,[]}}|[{'record_field',160,{'atom',160,'width'},{'integer',160,80}}|[{'record_field',161,{'atom',161,'height'},{'integer',161,25}}|[{'record_field',162,{'atom',162,'pixel_width'},{'integer',162,1024}}|[{'record_field',163,{'atom',163,'pixel_height'},{'integer',163,768}}|[{'record_field',164,{'atom',164,'modes'},{'bin',164,[]}}]]]]]],[]}]]
'versions'/2 =
    %% Line 45
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'client',Options> when 'true' ->
	      let <Vsn> =
		  %% Line 46
		  call 'proplists':'get_value'
		      ('vsn', Options, {2,0})
	      in  let <Version> =
		      %% Line 47
		      apply 'format_version'/1
			  (Vsn)
		  in  %% Line 48
		      {Vsn,Version}
	  %% Line 49
	  <'server',Options> when 'true' ->
	      let <Vsn> =
		  %% Line 50
		  call 'proplists':'get_value'
		      ('vsn', Options, {2,0})
	      in  let <Version> =
		      %% Line 51
		      apply 'format_version'/1
			  (Vsn)
		  in  %% Line 52
		      {Vsn,Version}
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'versions',2}}] )
	    -| ['compiler_generated'] )
	end
'hello_version_msg'/1 =
    %% Line 54
    fun (_cor0) ->
	%% Line 55
	[_cor0|[[13|[10]]]]
'next_seqnum'/1 =
    %% Line 57
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 58
	    call 'erlang':'+'
		(_cor0, 1)
	in  %% Line 58
	    call 'erlang':'band'
		(_cor1, 4294967295)
'decrypt_first_block'/2 =
    %% Line 60
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Bin,Ssh0 = {'ssh',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,BlockSize,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55}> when 'true' ->
	      %% Line 61
	      case ( Bin
		     -| ['reuse_for_context'] ) of
		<#{#<EncBlock>(BlockSize,8,'binary',['unsigned'|['big']]),
		   #<EncData>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		    %% Line 62
		    case %% Line 63
			 apply 'decrypt'/2
			     (Ssh0, EncBlock) of
		      <{Ssh,DecData = #{#<PacketLen>(32,1,'integer',['unsigned'|['big']]),
					#<_cor56>('all',8,'binary',['unsigned'|['big']])}#}> when 'true' ->
			  %% Line 64
			  {Ssh,PacketLen,DecData,EncData}
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor2)
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'decrypt_first_block',2}}] )
	    -| ['compiler_generated'] )
	end
'decrypt_blocks'/3 =
    %% Line 66
    fun (_cor2,_cor1,_cor0) ->
	%% Line 67
	case ( _cor2
	       -| ['reuse_for_context'] ) of
	  <#{#<EncBlocks>(_cor1,8,'binary',['unsigned'|['big']]),
	     #<EncData>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      %% Line 68
	      case apply 'decrypt'/2
		       (_cor0, EncBlocks) of
		<{Ssh,DecData}> when 'true' ->
		    %% Line 69
		    {Ssh,DecData,EncData}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		do  primop 'bs_context_to_binary'
			(_cor3)
		    primop 'match_fail'
			({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'is_valid_mac'/3 =
    %% Line 71
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_cor7,_cor8,{'ssh',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,0,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58}> when 'true' ->
	      %% Line 72
	      'true'
	  %% Line 73
	  <Mac,Data,{'ssh',_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,Algorithm,%% Line 74
																		     Key,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,%% Line 74
																																						   SeqNum,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106}> when 'true' ->
	      let <_cor3> =
		  %% Line 75
		  apply 'mac'/4
		      (Algorithm, Key, SeqNum, Data)
	      in  %% Line 75
		  call 'erlang':'=='
		      (Mac, _cor3)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'is_valid_mac',3}}] )
	    -| ['compiler_generated'] )
	end
'yes_no'/2 =
    %% Line 77
    fun (_cor1,_cor0) ->
	%% Line 78
	( case _cor1 of
	    ( <( {'ssh',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_rec0,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55}
		 -| ['compiler_generated'] )> when 'true' ->
		  call _rec0:'yes_no'
		      (_cor0, _cor1)
	      -| ['compiler_generated'] )
	    ( <_cor56> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','ssh'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'format_version'/1 =
    %% Line 80
    fun (_cor0) ->
	case _cor0 of
	  <{Major,Minor}> when 'true' ->
	      let <_cor4> =
		  %% Line 81
		  call 'erlang':'integer_to_list'
		      (Major)
	      in  let <_cor1> =
		      %% Line 82
		      call 'erlang':'integer_to_list'
			  (Minor)
		  in  let <_cor2> =
			  %% Line 82
			  call 'erlang':'++'
			      (_cor1, [45|[69|[114|[108|[97|[110|[103]]]]]]])
		      in  let <_cor3> =
			      %% Line 81
			      [46|_cor2]
			  in  let <_cor5> =
				  %% Line 81
				  call 'erlang':'++'
				      (_cor4, _cor3)
			      in  %% Line 81
				  [83|[83|[72|[45|_cor5]]]]
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'format_version',1}}] )
	    -| ['compiler_generated'] )
	end
'handle_hello_version'/1 =
    %% Line 84
    fun (_cor0) ->
	let <StrVersion> =
	    %% Line 85
	    apply 'trim_tail'/1
		(_cor0)
	in  %% Line 86
	    case call 'string':'tokens'
		     (_cor0, [45]) of
	      %% Line 87
	      <[_cor4|[[50|[46|[48]]]|_cor5]]> when 'true' ->
		  %% Line 88
		  {{2,0},StrVersion}
	      %% Line 89
	      <[_cor6|[[49|[46|[57|[57]]]]|_cor7]]> when 'true' ->
		  %% Line 90
		  {{2,0},StrVersion}
	      %% Line 91
	      <[_cor8|[[49|[46|[51]]]|_cor9]]> when 'true' ->
		  %% Line 92
		  {{1,3},StrVersion}
	      %% Line 93
	      <[_cor10|[[49|[46|[53]]]|_cor11]]> when 'true' ->
		  %% Line 94
		  {{1,5},StrVersion}
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
'key_exchange_init_msg'/1 =
    %% Line 97
    fun (_cor0) ->
	let <Msg> =
	    %% Line 98
	    apply 'kex_init'/1
		(_cor0)
	in  %% Line 99
	    case apply 'ssh_packet'/2
		     (Msg, _cor0) of
	      <{SshPacket,Ssh}> when 'true' ->
		  %% Line 100
		  {Msg,SshPacket,Ssh}
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor2})
		-| ['compiler_generated'] )
	    end
'kex_init'/1 =
    %% Line 102
    fun (_cor0) ->
	case _cor0 of
	  <{'ssh',Role,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,Opts,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,HostKeyAlgs,_cor53}> when 'true' ->
	      let <Random> =
		  %% Line 103
		  call 'ssh_bits':'random'
		      (16)
	      in  let <_cor3> =
		      %% Line 104
		      case call 'proplists':'get_value'
			       ('compression', Opts, 'none') of
			%% Line 105
			<'openssh_zlib'> when 'true' ->
			    [[122|[108|[105|[98|[64|[111|[112|[101|[110|[115|[115|[104|[46|[99|[111|[109]]]]]]]]]]]]]]]]|[[110|[111|[110|[101]]]]]]
			%% Line 106
			<'zlib'> when 'true' ->
			    [[122|[108|[105|[98]]]]|[[110|[111|[110|[101]]]]]]
			%% Line 107
			<'none'> when 'true' ->
			    [[110|[111|[110|[101]]]]|[[122|[108|[105|[98]]]]]]
			( <_cor2> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor2})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 109
		      apply 'kexinit_messsage'/4
			  (Role, Random, _cor3, HostKeyAlgs)
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'kex_init',1}}] )
	    -| ['compiler_generated'] )
	end
'key_init'/3 =
    %% Line 111
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'client',Ssh,Value> when 'true' ->
	      %% Line 112
	      case Ssh of
		<{'ssh',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60}> when 'true' ->
		    call 'erlang':'setelement'
			(8, Ssh, Value)
		( <_cor61> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','ssh'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 113
	  <'server',Ssh,Value> when 'true' ->
	      %% Line 114
	      case Ssh of
		<{'ssh',_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112}> when 'true' ->
		    call 'erlang':'setelement'
			(9, Ssh, Value)
		( <_cor113> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','ssh'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'key_init',3}}] )
	    -| ['compiler_generated'] )
	end
'kexinit_messsage'/4 =
    %% Line 116
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'client',Random,Compression,HostKeyAlgs> when 'true' ->
	      %% Line 117
	      {'ssh_msg_kexinit',%% Line 118
				 Random,%% Line 119
					[[100|[105|[102|[102|[105|[101|[45|[104|[101|[108|[108|[109|[97|[110|[45|[103|[114|[111|[117|[112|[49|[45|[115|[104|[97|[49]]]]]]]]]]]]]]]]]]]]]]]]]]],%% Line 120
																							       HostKeyAlgs,%% Line 121
																									   [[97|[101|[115|[49|[50|[56|[45|[99|[98|[99]]]]]]]]]]|[[51|[100|[101|[115|[45|[99|[98|[99]]]]]]]]]],%% Line 122
																																					      [[97|[101|[115|[49|[50|[56|[45|[99|[98|[99]]]]]]]]]]|[[51|[100|[101|[115|[45|[99|[98|[99]]]]]]]]]],%% Line 123
																																																		 [[104|[109|[97|[99|[45|[115|[104|[97|[49]]]]]]]]]],%% Line 124
																																																								    [[104|[109|[97|[99|[45|[115|[104|[97|[49]]]]]]]]]],%% Line 125
																																																														       Compression,%% Line 126
																																																																   Compression,%% Line 127
																																																																	       [],%% Line 128
																																																																		  [],'false',0}
	  %% Line 131
	  <'server',Random,Compression,HostKeyAlgs> when 'true' ->
	      %% Line 132
	      {'ssh_msg_kexinit',%% Line 133
				 Random,%% Line 134
					[[100|[105|[102|[102|[105|[101|[45|[104|[101|[108|[108|[109|[97|[110|[45|[103|[114|[111|[117|[112|[49|[45|[115|[104|[97|[49]]]]]]]]]]]]]]]]]]]]]]]]]]],%% Line 135
																							       HostKeyAlgs,%% Line 136
																									   [[97|[101|[115|[49|[50|[56|[45|[99|[98|[99]]]]]]]]]]|[[51|[100|[101|[115|[45|[99|[98|[99]]]]]]]]]],%% Line 137
																																					      [[97|[101|[115|[49|[50|[56|[45|[99|[98|[99]]]]]]]]]]|[[51|[100|[101|[115|[45|[99|[98|[99]]]]]]]]]],%% Line 138
																																																		 [[104|[109|[97|[99|[45|[115|[104|[97|[49]]]]]]]]]],%% Line 139
																																																								    [[104|[109|[97|[99|[45|[115|[104|[97|[49]]]]]]]]]],%% Line 140
																																																														       Compression,%% Line 141
																																																																   Compression,%% Line 142
																																																																	       [],%% Line 143
																																																																		  [],'false',0}
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'kexinit_messsage',4}}] )
	    -| ['compiler_generated'] )
	end
'new_keys_message'/1 =
    %% Line 146
    fun (_cor0) ->
	%% Line 147
	case %% Line 148
	     apply 'ssh_packet'/2
		 ({'ssh_msg_newkeys'}, _cor0) of
	  <{SshPacket,Ssh}> when 'true' ->
	      %% Line 149
	      {'ok',SshPacket,Ssh}
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'handle_kexinit_msg'/3 =
    %% Line 151
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <CounterPart = {'ssh_msg_kexinit',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29},Own = {'ssh_msg_kexinit',_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42},Ssh0 = %% Line 152
																																    {'ssh','client',_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92}> when 'true' ->
	      %% Line 153
	      case apply 'select_algorithm'/3
		       ('client', Own, CounterPart) of
		<{'ok',Algoritms}> when 'true' ->
		    %% Line 154
		    case apply 'verify_algorithm'/1
			     (Algoritms) of
		      %% Line 155
		      <'true'> when 'true' ->
			  %% Line 156
			  ( case Algoritms of
			      ( <( {'alg',_rec3,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101}
				   -| ['compiler_generated'] )> when 'true' ->
				    let <_cor6> =
					%% Line 157
					call 'erlang':'setelement'
					    (10, Ssh0, Algoritms)
				    in  apply 'key_exchange_first_msg'/2
					    (_rec3, _cor6)
				-| ['compiler_generated'] )
			      ( <_cor102> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','alg'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      %% Line 158
		      <_cor155> when 'true' ->
			  %% Line 160
			  call 'erlang':'throw'
			      ({'ssh_msg_disconnect',2,[83|[101|[108|[101|[99|[116|[105|[111|[110|[32|[111|[102|[32|[107|[101|[121|[32|[101|[120|[99|[104|[97|[110|[103|[101|[32|[97|[108|[103|[111|[114|[105|[116|[104|[109|[32|[102|[97|[105|[108|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[101|[110]]})
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 166
	  <CounterPart = {'ssh_msg_kexinit',_cor156,_cor157,_cor158,_cor159,_cor160,_cor161,_cor162,_cor163,_cor164,_cor165,_cor166,_cor167,_cor168},Own = {'ssh_msg_kexinit',_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181},Ssh = %% Line 167
																																			     {'ssh','server',_cor182,_cor183,_cor184,_cor185,_cor186,_cor187,_cor188,_cor189,_cor190,_cor191,_cor192,_cor193,_cor194,_cor195,_cor196,_cor197,_cor198,_cor199,_cor200,_cor201,_cor202,_cor203,_cor204,_cor205,_cor206,_cor207,_cor208,_cor209,_cor210,_cor211,_cor212,_cor213,_cor214,_cor215,_cor216,_cor217,_cor218,_cor219,_cor220,_cor221,_cor222,_cor223,_cor224,_cor225,_cor226,_cor227,_cor228,_cor229,_cor230,_cor231}> when 'true' ->
	      %% Line 168
	      case apply 'select_algorithm'/3
		       ('server', CounterPart, Own) of
		<{'ok',Algoritms}> when 'true' ->
		    let <_cor13> =
			%% Line 169
			call 'erlang':'setelement'
			    (10, Ssh, Algoritms)
		    in  %% Line 169
			{'ok',_cor13}
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor10})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'handle_kexinit_msg',3}}] )
	    -| ['compiler_generated'] )
	end
'verify_algorithm'/1 =
    %% Line 174
    fun (_cor0) ->
	case _cor0 of
	  <{'alg','diffie-hellman-group1-sha1',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10}> when 'true' ->
	      %% Line 175
	      'true'
	  %% Line 176
	  <{'alg','diffie-hellman-group-exchange-sha1',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}> when 'true' ->
	      %% Line 177
	      'true'
	  %% Line 178
	  <_cor20> when 'true' ->
	      %% Line 179
	      'false'
	end
'key_exchange_first_msg'/2 =
    %% Line 181
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'diffie-hellman-group1-sha1',Ssh0> when 'true' ->
	      %% Line 182
	      case apply 'dh_group1'/0
		       () of
		<{G,P}> when 'true' ->
		    %% Line 183
		    case apply 'dh_gen_key'/3
			     (G, P, 1024) of
		      <{Private,Public}> when 'true' ->
			  %% Line 184
			  case apply 'ssh_packet'/2
				   ({'ssh_msg_kexdh_init',Public}, Ssh0) of
			    <{SshPacket,Ssh1}> when 'true' ->
				let <_rec6> = {%% Line 186
				     {Private,Public},%% Line 186
						      {G,P}}
				in  %% Line 186
				    case Ssh1 of
				      <{'ssh',_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69}> when 'true' ->
					  let <_cor8> =
					      call 'erlang':'setelement'
						  (43, Ssh1, _rec6)
					  in  {'ok',SshPacket,_cor8}
				      ( <_cor70> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','ssh'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
			    ( <_cor4> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor4})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 188
	  <'diffie-hellman-group-exchange-sha1',Ssh0> when 'true' ->
	      %% Line 192
	      case %% Line 193
		   apply 'ssh_packet'/2
		       ({'ssh_msg_kex_dh_gex_request',512,1024,4096}, %% Line 195
								      Ssh0) of
		<{SshPacket,Ssh1}> when 'true' ->
		    %% Line 197
		    case Ssh1 of
		      <{'ssh',_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121}> when 'true' ->
			  let <_cor16> =
			      call 'erlang':'setelement'
				  (44, Ssh1, {512,4096,1024})
			  in  {'ok',SshPacket,_cor16}
		      ( <_cor122> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','ssh'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor12})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17})
		  -| [{'function_name',{'key_exchange_first_msg',2}}] )
	    -| ['compiler_generated'] )
	end
'handle_kexdh_init'/2 =
    %% Line 200
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'ssh_msg_kexdh_init',E},Ssh0> when 'true' ->
	      %% Line 201
	      case apply 'dh_group1'/0
		       () of
		<{G,P}> when 'true' ->
		    %% Line 202
		    case apply 'dh_gen_key'/3
			     (G, P, 1024) of
		      <{Private,Public}> when 'true' ->
			  let <K> =
			      %% Line 203
			      call 'ssh_math':'ipow'
				  (E, Private, P)
			  in  let <Key> =
				  %% Line 204
				  apply 'get_host_key'/1
				      (Ssh0)
			      in  let <H> =
				      %% Line 205
				      apply 'kex_h'/5
					  (Ssh0, Key, E, Public, K)
				  in  let <H_SIG> =
					  %% Line 206
					  apply 'sign_host_key'/3
					      (Ssh0, Key, H)
				      in  %% Line 207
					  case apply 'ssh_packet'/2
						   ({'ssh_msg_kexdh_reply',Key,%% Line 208
									       Public,%% Line 209
										      H_SIG}, %% Line 210
											      Ssh0) of
					    <{SshPacket,Ssh1}> when 'true' ->
						let <_rec10> = {%% Line 212
						     {Private,Public},%% Line 212
								      {G,P}}
						in  let <_rec11> =
							%% Line 215
							apply 'sid'/2
							    (Ssh1, H)
						    in  %% Line 213
							case Ssh1 of
							  <{'ssh',_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69}> when 'true' ->
							      let <_cor12> =
								  call 'erlang':'setelement'
								      (43, Ssh1, _rec10)
							      in  let <_cor13> =
								      %% Line 215
								      call 'erlang':'setelement'
									  (39, _cor12, _rec11)
								  in  let <_cor14> =
									  %% Line 214
									  call 'erlang':'setelement'
									      (38, _cor13, H)
								      in  let <_cor16> =
									      call 'erlang':'setelement'
										  (37, _cor14, K)
									  in  {'ok',SshPacket,_cor16}
							  ( <_cor70> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {'badrecord','ssh'}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
					    ( <_cor8> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor8})
					      -| ['compiler_generated'] )
					  end
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17})
		  -| [{'function_name',{'handle_kexdh_init',2}}] )
	    -| ['compiler_generated'] )
	end
'handle_kex_dh_gex_group'/2 =
    %% Line 217
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'ssh_msg_kex_dh_gex_group',P,G},Ssh0> when 'true' ->
	      %% Line 218
	      case apply 'dh_gen_key'/3
		       (G, P, 1024) of
		<{Private,Public}> when 'true' ->
		    %% Line 219
		    case %% Line 220
			 apply 'ssh_packet'/2
			     ({'ssh_msg_kex_dh_gex_init',Public}, Ssh0) of
		      <{SshPacket,Ssh1}> when 'true' ->
			  let <_rec13> = {%% Line 222
			       {Private,Public},%% Line 222
						{G,P}}
			  in  %% Line 222
			      case Ssh1 of
				<{'ssh',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60}> when 'true' ->
				    let <_cor7> =
					call 'erlang':'setelement'
					    (43, Ssh1, _rec13)
				    in  {'ok',SshPacket,_cor7}
				( <_cor61> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','ssh'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'handle_kex_dh_gex_group',2}}] )
	    -| ['compiler_generated'] )
	end
'handle_new_keys'/2 =
    %% Line 224
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'ssh_msg_newkeys'},Ssh0> when 'true' ->
	      %% Line 225
	      try
		  apply 'install_alg'/1
		      (Ssh0)
	      of <_cor2> ->
		  case _cor2 of
		    %% Line 226
		    <Ssh = {'ssh',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59}> when 'true' ->
			%% Line 227
			{'ok',Ssh}
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'try_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	      catch <_cor6,_cor5,_cor4> ->
		  case <_cor6,_cor5,_cor4> of
		    %% Line 229
		    <'error',_X_Error,_cor60> when 'true' ->
			%% Line 230
			call 'erlang':'throw'
			    ({'ssh_msg_disconnect',2,[73|[110|[115|[116|[97|[108|[108|[32|[97|[108|[103|[32|[102|[97|[105|[108|[101|[100]]]]]]]]]]]]]]]]]],[101|[110]]})
		    ( <_cor6,_cor5,_cor4> when 'true' ->
			  primop 'raise'
			      (_cor4, _cor5)
		      -| ['compiler_generated'] )
		  end
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'handle_new_keys',2}}] )
	    -| ['compiler_generated'] )
	end
'handle_kexdh_reply'/2 =
    %% Line 237
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'ssh_msg_kexdh_reply',HostKey,F,%% Line 238
					    H_SIG},Ssh0 = %% Line 239
							  {'ssh',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,{{Private,Public},{_X_G,P}},_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64}> when 'true' ->
	      let <K> =
		  %% Line 240
		  call 'ssh_math':'ipow'
		      (F, Private, P)
	      in  let <H> =
		      %% Line 241
		      apply 'kex_h'/5
			  (Ssh0, HostKey, Public, F, K)
		  in  %% Line 243
		      case apply 'verify_host_key'/4
			       (Ssh0, HostKey, H, H_SIG) of
			%% Line 244
			<'ok'> when 'true' ->
			    %% Line 245
			    case apply 'ssh_packet'/2
				     ({'ssh_msg_newkeys'}, Ssh0) of
			      <{SshPacket,Ssh}> when 'true' ->
				  let <_rec15> =
				      %% Line 248
				      apply 'sid'/2
					  (Ssh, H)
				  in  %% Line 246
				      case Ssh of
					<{'ssh',_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115}> when 'true' ->
					    let <_cor7> =
						%% Line 248
						call 'erlang':'setelement'
						    (39, Ssh, _rec15)
					    in  let <_cor8> =
						    %% Line 247
						    call 'erlang':'setelement'
							(38, _cor7, H)
						in  let <_cor10> =
							call 'erlang':'setelement'
							    (37, _cor8, K)
						    in  {'ok',SshPacket,_cor10}
					( <_cor116> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','ssh'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
			      ( <_cor4> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor4})
				-| ['compiler_generated'] )
			    end
			%% Line 249
			<Error> when 'true' ->
			    %% Line 254
			    call 'erlang':'throw'
				({Error,{'ssh_msg_disconnect',3,[75|[101|[121|[32|[101|[120|[99|[104|[97|[110|[103|[101|[32|[102|[97|[105|[108|[101|[100]]]]]]]]]]]]]]]]]]],[101|[110]]}})
		      end
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'handle_kexdh_reply',2}}] )
	    -| ['compiler_generated'] )
	end
'handle_kex_dh_gex_request'/2 =
    %% Line 257
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'ssh_msg_kex_dh_gex_request',_X_Min,%% Line 258
						_X_NBits,%% Line 259
							 _X_Max},%% Line 259
								 Ssh0> when 'true' ->
	      %% Line 260
	      case apply 'dh_group1'/0
		       () of
		<{G,P}> when 'true' ->
		    %% Line 261
		    case apply 'dh_gen_key'/3
			     (G, P, 1024) of
		      <{Private,Public}> when 'true' ->
			  %% Line 262
			  case %% Line 263
			       apply 'ssh_packet'/2
				   ({'ssh_msg_kex_dh_gex_group',P,G}, Ssh0) of
			    <{SshPacket,Ssh}> when 'true' ->
				let <_rec17> = {%% Line 265
				     {Private,Public},%% Line 265
						      {G,P}}
				in  %% Line 265
				    case Ssh of
				      <{'ssh',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61}> when 'true' ->
					  let <_cor8> =
					      call 'erlang':'setelement'
						  (43, Ssh, _rec17)
					  in  {'ok',SshPacket,_cor8}
				      ( <_cor62> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','ssh'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
			    ( <_cor4> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor4})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'handle_kex_dh_gex_request',2}}] )
	    -| ['compiler_generated'] )
	end
'handle_kex_dh_gex_reply'/2 =
    %% Line 267
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'ssh_msg_kex_dh_gex_reply',HostKey,%% Line 268
					       F,%% Line 269
						 H_SIG},Ssh0 = %% Line 270
							       {'ssh',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,{{Private,Public},{G,P}},%% Line 271
																																															      {Min,Max,NBits},_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63}> when 'true' ->
	      let <K> =
		  %% Line 273
		  call 'ssh_math':'ipow'
		      (F, Private, P)
	      in  let <H> =
		      %% Line 274
		      apply 'kex_h'/10
			  (Ssh0, HostKey, Min, NBits, Max, P, G, Public, F, K)
		  in  %% Line 276
		      case apply 'verify_host_key'/4
			       (Ssh0, HostKey, H, H_SIG) of
			%% Line 277
			<'ok'> when 'true' ->
			    %% Line 278
			    case apply 'ssh_packet'/2
				     ({'ssh_msg_newkeys'}, Ssh0) of
			      <{SshPacket,Ssh}> when 'true' ->
				  let <_rec19> =
				      %% Line 281
				      apply 'sid'/2
					  (Ssh, H)
				  in  %% Line 279
				      case Ssh of
					<{'ssh',_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114}> when 'true' ->
					    let <_cor7> =
						%% Line 281
						call 'erlang':'setelement'
						    (39, Ssh, _rec19)
					    in  let <_cor8> =
						    %% Line 280
						    call 'erlang':'setelement'
							(38, _cor7, H)
						in  let <_cor10> =
							call 'erlang':'setelement'
							    (37, _cor8, K)
						    in  {'ok',SshPacket,_cor10}
					( <_cor115> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','ssh'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
			      ( <_cor4> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor4})
				-| ['compiler_generated'] )
			    end
			%% Line 282
			<_X_Error> when 'true' ->
			    %% Line 287
			    call 'erlang':'throw'
				({'ssh_msg_disconnect',3,[75|[101|[121|[32|[101|[120|[99|[104|[97|[110|[103|[101|[32|[102|[97|[105|[108|[101|[100]]]]]]]]]]]]]]]]]]],[101|[110]]})
		      end
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'handle_kex_dh_gex_reply',2}}] )
	    -| ['compiler_generated'] )
	end
'sid'/2 =
    %% Line 291
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'ssh',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,'undefined',_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53},H> when 'true' ->
	      %% Line 292
	      H
	  %% Line 293
	  <{'ssh',_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,Id,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103},_cor104> when 'true' ->
	      %% Line 294
	      Id
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'sid',2}}] )
	    -| ['compiler_generated'] )
	end
'get_host_key'/1 =
    %% Line 299
    fun (_cor0) ->
	%% Line 300
	case _cor0 of
	  <{'ssh',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,ALG,_cor14,_cor15,Mod,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,Opts,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53}> when 'true' ->
	      %% Line 302
	      ( case ALG of
		  ( <( {'alg',_cor54,_rec21,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62}
		       -| ['compiler_generated'] )> when 'true' ->
			case call Mod:'host_key'
				 (_rec21, Opts) of
			  %% Line 303
			  <{'ok',Key = {'RSAPrivateKey',_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73}}> when 'true' ->
			      %% Line 304
			      Key
			  %% Line 305
			  <{'ok',Key = {'DSAPrivateKey',_cor74,_cor75,_cor76,_cor77,_cor78,_cor79}}> when 'true' ->
			      %% Line 306
			      Key
			  %% Line 307
			  <Result> when 'true' ->
			      %% Line 308
			      call 'erlang':'exit'
				  ({'error',{Result,'unsupported_key_type'}})
			end
		    -| ['compiler_generated'] )
		  ( <_cor63> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','alg'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'sign_host_key'/3 =
    %% Line 311
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Ssh,Private = {'RSAPrivateKey',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19},H> when 'true' ->
	      %% Line 313
	      apply 'sign'/3
		  (H, 'sha', Private)
	  %% Line 314
	  <_X_Ssh,Private = {'DSAPrivateKey',_cor20,_cor21,_cor22,_cor23,_cor24,_cor25},H> when 'true' ->
	      %% Line 316
	      apply 'sign'/3
		  (H, 'sha', Private)
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'sign_host_key',3}}] )
	    -| ['compiler_generated'] )
	end
'verify_host_key'/4 =
    %% Line 318
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 319
	case apply 'verify'/4
		 (_cor1, 'sha', _cor0, _cor2) of
	  %% Line 320
	  <'false'> when 'true' ->
	      %% Line 321
	      {'error','bad_signature'}
	  %% Line 322
	  <'true'> when 'true' ->
	      let <_cor4> =
		  %% Line 323
		  apply 'public_algo'/1
		      (_cor2)
	      in  %% Line 323
		  apply 'known_host_key'/3
		      (_cor3, _cor2, _cor4)
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'public_algo'/1 =
    %% Line 326
    fun (_cor0) ->
	case _cor0 of
	  <{'RSAPublicKey',_cor2,_cor3}> when 'true' ->
	      %% Line 327
	      'ssh-rsa'
	  %% Line 328
	  <{_cor4,{'Dss-Parms',_cor5,_cor6,_cor7}}> when 'true' ->
	      %% Line 329
	      'ssh-dss'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'public_algo',1}}] )
	    -| ['compiler_generated'] )
	end
'accepted_host'/3 =
    %% Line 331
    fun (_cor2,_cor1,_cor0) ->
	%% Line 332
	case call 'proplists':'get_value'
		 ('silently_accept_hosts', _cor0, 'false') of
	  %% Line 333
	  <'true'> when 'true' ->
	      %% Line 334
	      'yes'
	  %% Line 335
	  <'false'> when 'true' ->
	      let <_cor3> =
		  %% Line 336
		  call 'erlang':'++'
		      (_cor1, [32|[97|[99|[99|[101|[112|[116]]]]]]])
	      in  let <_cor4> =
		      %% Line 336
		      call 'erlang':'++'
			  ([78|[101|[119|[32|[104|[111|[115|[116|[32]]]]]]]]], _cor3)
		  in  %% Line 336
		      apply 'yes_no'/2
			  (_cor2, _cor4)
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'known_host_key'/3 =
    %% Line 339
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Ssh = {'ssh',_cor9,Peer,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,Mod,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,Opts,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56},%% Line 340
																																														      Public,%% Line 340
																																															     Alg> when 'true' ->
	      let <PeerName> =
		  %% Line 341
		  apply 'peer_name'/1
		      (Peer)
	      in  %% Line 342
		  case call Mod:'is_host_key'
			   (Public, PeerName, Alg, Opts) of
		    %% Line 343
		    <'true'> when 'true' ->
			%% Line 344
			'ok'
		    %% Line 345
		    <'false'> when 'true' ->
			%% Line 346
			case apply 'accepted_host'/3
				 (Ssh, PeerName, Opts) of
			  %% Line 347
			  <'yes'> when 'true' ->
			      %% Line 348
			      call Mod:'add_host_key'
				  (PeerName, Public, Opts)
			  %% Line 349
			  <'no'> when 'true' ->
			      %% Line 350
			      {'error','rejected'}
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor4})
			    -| ['compiler_generated'] )
			end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'known_host_key',3}}] )
	    -| ['compiler_generated'] )
	end
'select_algorithm'/3 =
    %% Line 361
    fun (_cor2,_cor1,_cor0) ->
	%% Line 362
	case apply 'select_encrypt_decrypt'/3
		 (_cor2, _cor1, _cor0) of
	  <{Encrypt,Decrypt}> when 'true' ->
	      %% Line 363
	      case apply 'select_send_recv_mac'/3
		       (_cor2, _cor1, _cor0) of
		<{SendMac,RecvMac}> when 'true' ->
		    %% Line 364
		    case %% Line 365
			 apply 'select_compression_decompression'/3
			     (_cor2, _cor1, _cor0) of
		      <{Compression,Decompression}> when 'true' ->
			  %% Line 367
			  ( case _cor1 of
			      ( <( {'ssh_msg_kexinit',_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_rec22,_cor42,_cor43,_cor44}
				   -| ['compiler_generated'] )> when 'true' ->
				    %% Line 368
				    ( case _cor0 of
					( <( {'ssh_msg_kexinit',_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_rec23,_cor55,_cor56,_cor57}
					     -| ['compiler_generated'] )> when 'true' ->
					      let <C_Lng> =
						  apply 'select'/2
						      (_rec22, _rec23)
					      in  let <S_Lng> =
						      %% Line 369
						      apply 'select'/2
							  (_cor42, _cor55)
						  in  let <HKey> =
							  %% Line 371
							  apply 'select_all'/2
							      (_cor35, _cor48)
						      in  let <_cor22> =
							      %% Line 373
							      case HKey of
								%% Line 374
								<[]> when 'true' ->
								    'undefined'
								%% Line 375
								<[HK0|_cor111]> when 'true' ->
								    HK0
								( <_cor21> when 'true' ->
								      primop 'match_fail'
									  ({'case_clause',_cor21})
								  -| ['compiler_generated'] )
							      end
							  in  let <Kex> =
								  %% Line 379
								  apply 'select'/2
								      (_cor34, _cor47)
							      in  let <Alg> =
								      %% Line 382
								      {'alg',Kex,_cor22,%% Line 386
											SendMac,%% Line 387
												RecvMac,%% Line 384
													Encrypt,%% Line 385
														Decrypt,%% Line 388
															Compression,%% Line 389
																    Decompression,%% Line 390
																		  C_Lng,%% Line 391
																			S_Lng}
								  in  %% Line 392
								      {'ok',Alg}
					  -| ['compiler_generated'] )
					( <_cor58> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','ssh_msg_kexinit'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			      ( <_cor45> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','ssh_msg_kexinit'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor5})
			-| ['compiler_generated'] )
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'select_encrypt_decrypt'/3 =
    %% Line 394
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'client',Client,Server> when 'true' ->
	      %% Line 396
	      ( case Client of
		  ( <( {'ssh_msg_kexinit',_cor26,_cor27,_cor28,_rec30,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 397
			( case Server of
			    ( <( {'ssh_msg_kexinit',_cor39,_cor40,_cor41,_rec31,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <Encrypt> =
				      apply 'select'/2
					  (_rec30, _rec31)
				  in  let <Decrypt> =
					  %% Line 399
					  apply 'select'/2
					      (_cor29, _cor42)
				      in  %% Line 401
					  {Encrypt,Decrypt}
			      -| ['compiler_generated'] )
			    ( <_cor51> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','ssh_msg_kexinit'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_cor38> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','ssh_msg_kexinit'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 402
	  <'server',Client,Server> when 'true' ->
	      %% Line 404
	      ( case Client of
		  ( <( {'ssh_msg_kexinit',_cor78,_cor79,_cor80,_rec34,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 405
			( case Server of
			    ( <( {'ssh_msg_kexinit',_cor91,_cor92,_cor93,_rec35,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <Decrypt> =
				      apply 'select'/2
					  (_rec34, _rec35)
				  in  let <Encrypt> =
					  %% Line 407
					  apply 'select'/2
					      (_cor81, _cor94)
				      in  %% Line 409
					  {Encrypt,Decrypt}
			      -| ['compiler_generated'] )
			    ( <_cor103> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','ssh_msg_kexinit'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_cor90> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','ssh_msg_kexinit'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23})
		  -| [{'function_name',{'select_encrypt_decrypt',3}}] )
	    -| ['compiler_generated'] )
	end
'select_send_recv_mac'/3 =
    %% Line 411
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'client',Client,Server> when 'true' ->
	      %% Line 412
	      ( case Client of
		  ( <( {'ssh_msg_kexinit',_cor26,_cor27,_cor28,_cor29,_cor30,_rec38,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 413
			( case Server of
			    ( <( {'ssh_msg_kexinit',_cor39,_cor40,_cor41,_cor42,_cor43,_rec39,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <SendMac> =
				      apply 'select'/2
					  (_rec38, _rec39)
				  in  let <RecvMac> =
					  %% Line 414
					  apply 'select'/2
					      (_cor31, _cor44)
				      in  %% Line 416
					  {SendMac,RecvMac}
			      -| ['compiler_generated'] )
			    ( <_cor51> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','ssh_msg_kexinit'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_cor38> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','ssh_msg_kexinit'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 417
	  <'server',Client,Server> when 'true' ->
	      %% Line 418
	      ( case Client of
		  ( <( {'ssh_msg_kexinit',_cor78,_cor79,_cor80,_cor81,_cor82,_rec42,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 419
			( case Server of
			    ( <( {'ssh_msg_kexinit',_cor91,_cor92,_cor93,_cor94,_cor95,_rec43,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <RecvMac> =
				      apply 'select'/2
					  (_rec42, _rec43)
				  in  let <SendMac> =
					  %% Line 420
					  apply 'select'/2
					      (_cor83, _cor96)
				      in  %% Line 422
					  {SendMac,RecvMac}
			      -| ['compiler_generated'] )
			    ( <_cor103> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','ssh_msg_kexinit'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_cor90> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','ssh_msg_kexinit'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23})
		  -| [{'function_name',{'select_send_recv_mac',3}}] )
	    -| ['compiler_generated'] )
	end
'select_compression_decompression'/3 =
    %% Line 424
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'client',Client,Server> when 'true' ->
	      %% Line 426
	      ( case Client of
		  ( <( {'ssh_msg_kexinit',_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_rec46,_cor33,_cor34,_cor35,_cor36,_cor37}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 427
			( case Server of
			    ( <( {'ssh_msg_kexinit',_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_rec47,_cor46,_cor47,_cor48,_cor49,_cor50}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <Compression> =
				      apply 'select'/2
					  (_rec46, _rec47)
				  in  let <Decomprssion> =
					  %% Line 429
					  apply 'select'/2
					      (_cor33, _cor46)
				      in  %% Line 431
					  {Compression,Decomprssion}
			      -| ['compiler_generated'] )
			    ( <_cor51> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','ssh_msg_kexinit'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_cor38> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','ssh_msg_kexinit'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 432
	  <'server',Client,Server> when 'true' ->
	      %% Line 434
	      ( case Client of
		  ( <( {'ssh_msg_kexinit',_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_rec50,_cor85,_cor86,_cor87,_cor88,_cor89}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 435
			( case Server of
			    ( <( {'ssh_msg_kexinit',_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_rec51,_cor98,_cor99,_cor100,_cor101,_cor102}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <Decomprssion> =
				      apply 'select'/2
					  (_rec50, _rec51)
				  in  let <Compression> =
					  %% Line 437
					  apply 'select'/2
					      (_cor85, _cor98)
				      in  %% Line 439
					  {Compression,Decomprssion}
			      -| ['compiler_generated'] )
			    ( <_cor103> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','ssh_msg_kexinit'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		  ( <_cor90> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','ssh_msg_kexinit'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor25,_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor25,_cor24,_cor23})
		  -| [{'function_name',{'select_compression_decompression',3}}] )
	    -| ['compiler_generated'] )
	end
'install_alg'/1 =
    %% Line 441
    fun (_cor0) ->
	let <SSH1> =
	    %% Line 442
	    apply 'alg_final'/1
		(_cor0)
	in  let <SSH2> =
		%% Line 443
		apply 'alg_setup'/1
		    (SSH1)
	    in  %% Line 444
		apply 'alg_init'/1
		    (SSH2)
'alg_setup'/1 =
    %% Line 446
    fun (_cor0) ->
	%% Line 447
	( case _cor0 of
	    ( <( {'ssh',_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_rec54,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 448
		  ( case _rec54 of
		      ( <( {'alg',_rec68,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_rec60> =
				%% Line 453
				apply 'mac_digest_size'/1
				    (_cor107)
			    in  let <_rec62> =
				    %% Line 455
				    apply 'mac_digest_size'/1
					(_cor108)
				in  let <_cor41> =
					%% Line 459
					call 'erlang':'setelement'
					    (34, _cor0, _cor114)
				    in  let <_cor42> =
					    %% Line 458
					    call 'erlang':'setelement'
						(33, _cor41, _cor113)
					in  let <_cor43> =
						%% Line 457
						call 'erlang':'setelement'
						    (31, _cor42, _cor112)
					    in  let <_cor44> =
						    %% Line 456
						    call 'erlang':'setelement'
							(29, _cor43, _cor111)
						in  let <_cor45> =
							%% Line 451
							call 'erlang':'setelement'
							    (25, _cor44, _cor110)
						    in  let <_cor46> =
							    %% Line 450
							    call 'erlang':'setelement'
								(21, _cor45, _cor109)
							in  let <_cor47> =
								%% Line 455
								call 'erlang':'setelement'
								    (20, _cor46, _rec62)
							    in  let <_cor48> =
								    %% Line 454
								    call 'erlang':'setelement'
									(18, _cor47, _cor108)
								in  let <_cor49> =
									%% Line 453
									call 'erlang':'setelement'
									    (17, _cor48, _rec60)
								    in  let <_cor50> =
									    %% Line 452
									    call 'erlang':'setelement'
										(15, _cor49, _cor107)
									in  let <_cor51> =
										%% Line 449
										call 'erlang':'setelement'
										    (12, _cor50, _cor106)
									    in  let <_cor52> =
										    call 'erlang':'setelement'
											(11, _cor51, _rec68)
										in  %% Line 460
										    call 'erlang':'setelement'
											(10, _cor52, 'undefined')
			-| ['compiler_generated'] )
		      ( <_cor115> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','alg'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor105> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','ssh'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'alg_init'/1 =
    %% Line 463
    fun (_cor0) ->
	%% Line 464
	case apply 'send_mac_init'/1
		 (_cor0) of
	  <{'ok',SSH1}> when 'true' ->
	      %% Line 465
	      case apply 'recv_mac_init'/1
		       (SSH1) of
		<{'ok',SSH2}> when 'true' ->
		    %% Line 466
		    case apply 'encrypt_init'/1
			     (SSH2) of
		      <{'ok',SSH3}> when 'true' ->
			  %% Line 467
			  case apply 'decrypt_init'/1
				   (SSH3) of
			    <{'ok',SSH4}> when 'true' ->
				%% Line 468
				case apply 'compress_init'/1
					 (SSH4) of
				  <{'ok',SSH5}> when 'true' ->
				      %% Line 469
				      case apply 'decompress_init'/1
					       (SSH5) of
					<{'ok',SSH6}> when 'true' ->
					    %% Line 470
					    SSH6
					( <_cor6> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor6})
					  -| ['compiler_generated'] )
				      end
				  ( <_cor5> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor5})
				    -| ['compiler_generated'] )
				end
			    ( <_cor4> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor4})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'alg_final'/1 =
    %% Line 472
    fun (_cor0) ->
	%% Line 473
	case apply 'send_mac_final'/1
		 (_cor0) of
	  <{'ok',SSH1}> when 'true' ->
	      %% Line 474
	      case apply 'recv_mac_final'/1
		       (SSH1) of
		<{'ok',SSH2}> when 'true' ->
		    %% Line 475
		    case apply 'encrypt_final'/1
			     (SSH2) of
		      <{'ok',SSH3}> when 'true' ->
			  %% Line 476
			  case apply 'decrypt_final'/1
				   (SSH3) of
			    <{'ok',SSH4}> when 'true' ->
				%% Line 477
				case apply 'compress_final'/1
					 (SSH4) of
				  <{'ok',SSH5}> when 'true' ->
				      %% Line 478
				      case apply 'decompress_final'/1
					       (SSH5) of
					<{'ok',SSH6}> when 'true' ->
					    %% Line 479
					    SSH6
					( <_cor6> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor6})
					  -| ['compiler_generated'] )
				      end
				  ( <_cor5> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor5})
				    -| ['compiler_generated'] )
				end
			    ( <_cor4> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor4})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'select_all'/2 =
    %% Line 481
    fun (_cor1,_cor0) ->
	let <A> =
	    %% Line 482
	    call 'erlang':'--'
		(_cor1, _cor0)
	in  let <_cor6> =
		%% Line 484
		( fun (_cor4) ->
		      call 'erlang':'list_to_atom'
			  (_cor4)
		  -| [{'id',{0,0,'-select_all/2-fun-0-'}}] )
	    in  let <_cor3> =
		    %% Line 484
		    call 'erlang':'--'
			(_cor1, A)
		in  %% Line 484
		    call 'lists':'map'
			(_cor6, _cor3)
'select'/2 =
    %% Line 486
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],[]> when 'true' ->
	      %% Line 487
	      'none'
	  %% Line 488
	  <CL,SL> when 'true' ->
	      %% Line 489
	      case apply 'select_all'/2
		       (CL, SL) of
		%% Line 490
		<[]> when 'true' ->
		    'undefined'
		%% Line 491
		<[ALG|_cor7]> when 'true' ->
		    ALG
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	end
'ssh_packet'/2 =
    %% Line 495
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Msg = {'ssh_msg_kexinit',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21},Ssh0> when 'true' ->
	      let <BinMsg> =
		  %% Line 496
		  call 'ssh_message':'encode'
		      (Msg)
	      in  %% Line 497
		  ( case Ssh0 of
		      ( <( {'ssh',_rec80,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <Ssh> =
				apply 'key_init'/3
				    (_rec80, Ssh0, BinMsg)
			    in  %% Line 498
				apply 'pack'/2
				    (BinMsg, Ssh)
			-| ['compiler_generated'] )
		      ( <_cor72> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','ssh'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 500
	  <Msg,Ssh> when 'true' ->
	      let <BinMsg> =
		  %% Line 501
		  call 'ssh_message':'encode'
		      (Msg)
	      in  %% Line 502
		  apply 'pack'/2
		      (BinMsg, Ssh)
	end
'pack'/2 =
    %% Line 504
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Data0,Ssh0 = {'ssh',_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,%% Line 505
															  MacAlg,%% Line 506
																 MacKey,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,BlockSize,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,%% Line 505
																																						   SeqNum,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73}>
	      when %% Line 507
		call 'erlang':'is_binary'
		    (Data0) ->
	      %% Line 508
	      case apply 'compress'/2
		       (Ssh0, Data0) of
		<{Ssh1,Data}> when 'true' ->
		    let <_cor3> =
			%% Line 509
			call 'erlang':'size'
			    (Data)
		    in  let <_cor5> =
			    %% Line 509
			    call 'erlang':'+'
				(5, _cor3)
			in  let <_cor6> =
				%% Line 509
				call 'erlang':'rem'
				    (_cor5, BlockSize)
			    in  let <_cor7> =
				    %% Line 509
				    call 'erlang':'-'
					(BlockSize, _cor6)
				in  let <PL> =
					%% Line 509
					call 'erlang':'rem'
					    (_cor7, BlockSize)
				    in  let <_cor9> =
					    %% Line 510
					    case <> of
					      <>
						  when call 'erlang':'<'
							(PL,
							 4) ->
						  call 'erlang':'+'
						      (PL, BlockSize)
					      %% Line 511
					      <> when 'true' ->
						  PL
					    end
					in  let <Padding> =
						%% Line 513
						call 'ssh_bits':'random'
						    (_cor9)
					    in  let <_cor13> =
						    %% Line 514
						    call 'erlang':'+'
							(1, _cor9)
						in  let <_cor12> =
							%% Line 514
							call 'erlang':'size'
							    (Data)
						    in  let <PacketLen> =
							    %% Line 514
							    call 'erlang':'+'
								(_cor13, _cor12)
							in  let <PacketData> =
								%% Line 515
								#{#<PacketLen>(32,1,'integer',['unsigned'|['big']]),
								  #<_cor9>(8,1,'integer',['unsigned'|['big']]),
								  #<%% Line 516
								    Data>(%% Line 516
									  'all',8,'binary',['unsigned'|['big']]),
								  #<%% Line 516
								    Padding>(%% Line 516
									     'all',8,'binary',['unsigned'|['big']])}#
							    in  %% Line 517
								case apply 'encrypt'/2
									 (Ssh1, PacketData) of
								  <{Ssh2,EncPacket}> when 'true' ->
								      let <MAC> =
									  %% Line 518
									  apply 'mac'/4
									      (MacAlg, MacKey, SeqNum, PacketData)
								      in  let <Packet> =
									      %% Line 519
									      [EncPacket|[MAC|[]]]
									  in  let <_cor19> =
										  %% Line 520
										  call 'erlang':'+'
										      (SeqNum, 1)
									      in  let <_rec81> =
										      %% Line 520
										      call 'erlang':'band'
											  (_cor19, 4294967295)
										  in  %% Line 520
										      case Ssh2 of
											<{'ssh',_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124}> when 'true' ->
											    let <_cor23> =
												call 'erlang':'setelement'
												    (41, Ssh2, _rec81)
											    in  %% Line 521
												{Packet,_cor23}
											( <_cor125> when 'true' ->
											      ( call ( 'erlang'
												       -| ['compiler_generated'] ):( 'error'
																     -| ['compiler_generated'] )
												    (( {'badrecord','ssh'}
												       -| ['compiler_generated'] ))
												-| ['compiler_generated'] )
											  -| ['compiler_generated'] )
										      end
								  ( <_cor16> when 'true' ->
									primop 'match_fail'
									    ({'badmatch',_cor16})
								    -| ['compiler_generated'] )
								end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26,_cor25})
		  -| [{'function_name',{'pack',2}}] )
	    -| ['compiler_generated'] )
	end
'unpack'/3 =
    %% Line 523
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <EncodedSoFar,ReminingLenght,Ssh0 = {'ssh',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,MacSize,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64}> when 'true' ->
	      let <SshLength> =
		  %% Line 524
		  call 'erlang':'-'
		      (ReminingLenght, MacSize)
	      in  let <NoMac,Mac,Rest> =
		      %% Line 525
		      case MacSize of
			%% Line 526
			<0> when 'true' ->
			    %% Line 528
			    case ( EncodedSoFar
				   -| ['reuse_for_context'] ) of
			      <#{#<NoMac0>(SshLength,8,'binary',['unsigned'|['big']]),
				 #<Rest0>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
				  %% Line 529
				  <NoMac0,#{}#,Rest0>
			      ( <_cor4> when 'true' ->
				    do  primop 'bs_context_to_binary'
					    (_cor4)
					primop 'match_fail'
					    ({'badmatch',_cor4})
				-| ['compiler_generated'] )
			    end
			%% Line 530
			<_cor65> when 'true' ->
			    %% Line 533
			    case ( EncodedSoFar
				   -| ['reuse_for_context'] ) of
			      <#{#<NoMac0>(SshLength,8,'binary',['unsigned'|['big']]),
				 #<Mac0>(MacSize,8,'binary',['unsigned'|['big']]),
				 #<Rest0>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
				  %% Line 534
				  <NoMac0,Mac0,Rest0>
			      ( <_cor5> when 'true' ->
				    do  primop 'bs_context_to_binary'
					    (_cor5)
					primop 'match_fail'
					    ({'badmatch',_cor5})
				-| ['compiler_generated'] )
			    end
		      end
		  in  let <_cor10> =
			  %% Line 537
			  case SshLength of
			    %% Line 538
			    <0> when 'true' ->
				%% Line 539
				{Ssh0,#{}#,#{}#}
			    %% Line 540
			    <_cor66> when 'true' ->
				%% Line 541
				apply 'decrypt_blocks'/3
				    (NoMac, SshLength, Ssh0)
			  end
		      in  %% Line 536
			  case _cor10 of
			    <{Ssh1,DecData,#{}#}> when 'true' ->
				%% Line 543
				{Ssh1,DecData,Rest,Mac}
			    ( <_cor11> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor11})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'unpack',3}}] )
	    -| ['compiler_generated'] )
	end
'msg_data'/1 =
    %% Line 545
    fun (_cor0) ->
	%% Line 546
	case _cor0 of
	  <#{#<Len>(32,1,'integer',['unsigned'|['big']]),
	     #<PaddingLen>(8,1,'integer',['unsigned'|['big']]),
	     #<_cor6>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
	      let <_cor2> =
		  %% Line 547
		  call 'erlang':'-'
		      (Len, PaddingLen)
	      in  let <DataLen> =
		      %% Line 547
		      call 'erlang':'-'
			  (_cor2, 1)
		  in  %% Line 549
		      case ( _cor0
			     -| ['reuse_for_context'] ) of
			<#{#<_cor7>(32,1,'integer',['unsigned'|['big']]),
			   #<_cor8>(8,1,'integer',['unsigned'|['big']]),
			   #<Data>(DataLen,8,'binary',['unsigned'|['big']]),
			   #<_cor9>(PaddingLen,8,'binary',['unsigned'|['big']])}#> when 'true' ->
			    %% Line 550
			    Data
			( <_cor4> when 'true' ->
			      do  primop 'bs_context_to_binary'
				      (_cor4)
				  primop 'match_fail'
				      ({'badmatch',_cor4})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'sign'/3 =
    %% Line 552
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <SigData,Hash,Key = {'DSAPrivateKey',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13}> when 'true' ->
	      let <DerSignature> =
		  %% Line 553
		  call 'public_key':'sign'
		      (SigData, Hash, Key)
	      in  %% Line 554
		  case call 'public_key':'der_decode'
			   ('Dss-Sig-Value', DerSignature) of
		    <{'Dss-Sig-Value',R,S}> when 'true' ->
			%% Line 555
			#{#<R>(160,1,'integer',['unsigned'|['big']]),
			  #<S>(160,1,'integer',['unsigned'|['big']])}#
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 556
	  <SigData,Hash,Key> when 'true' ->
	      %% Line 557
	      call 'public_key':'sign'
		  (SigData, Hash, Key)
	end
'verify'/4 =
    %% Line 559
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <PlainText,Hash,Sig,Key = {_cor10,{'Dss-Parms',_cor11,_cor12,_cor13}}> when 'true' ->
	      %% Line 560
	      case ( Sig
		     -| ['reuse_for_context'] ) of
		<#{#<R>(160,1,'integer',['unsigned'|['big']]),
		   #<S>(160,1,'integer',['unsigned'|['big']])}#> when 'true' ->
		    let <Signature> =
			%% Line 561
			call 'public_key':'der_encode'
			    ('Dss-Sig-Value', {'Dss-Sig-Value',R,S})
		    in  %% Line 562
			call 'public_key':'verify'
			    (PlainText, Hash, Signature, Key)
		( <_cor4> when 'true' ->
		      do  primop 'bs_context_to_binary'
			      (_cor4)
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 563
	  <PlainText,Hash,Sig,Key> when 'true' ->
	      %% Line 564
	      call 'public_key':'verify'
		  (PlainText, Hash, Sig, Key)
	end
'encrypt_init'/1 =
    %% Line 614
    fun (_cor0) ->
	case _cor0 of
	  <Ssh = {'ssh',_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,'none',_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81}> when 'true' ->
	      %% Line 615
	      {'ok',Ssh}
	  %% Line 616
	  <Ssh = {'ssh','client',_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,'3des-cbc',_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130}> when 'true' ->
	      let <IV> =
		  %% Line 617
		  apply 'hash'/3
		      (Ssh, [65], 64)
	      in  %% Line 618
		  case apply 'hash'/3
			   (Ssh, [67], 192) of
		    <#{#<K1>(8,8,'binary',['unsigned'|['big']]),
		       #<K2>(8,8,'binary',['unsigned'|['big']]),
		       #<K3>(8,8,'binary',['unsigned'|['big']])}#> when 'true' ->
			let <_rec83> = {%% Line 619
			     K1,%% Line 619
				K2,%% Line 619
				   K3}
			in  let <_cor5> =
				%% Line 621
				call 'erlang':'setelement'
				    (24, Ssh, IV)
			    in  let <_cor6> =
				    %% Line 620
				    call 'erlang':'setelement'
					(23, _cor5, 8)
				in  let <_cor8> =
					%% Line 619
					call 'erlang':'setelement'
					    (22, _cor6, _rec83)
				    in  %% Line 619
					{'ok',_cor8}
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	  %% Line 622
	  <Ssh = {'ssh','server',_cor183,_cor184,_cor185,_cor186,_cor187,_cor188,_cor189,_cor190,_cor191,_cor192,_cor193,_cor194,_cor195,_cor196,_cor197,_cor198,_cor199,_cor200,'3des-cbc',_cor201,_cor202,_cor203,_cor204,_cor205,_cor206,_cor207,_cor208,_cor209,_cor210,_cor211,_cor212,_cor213,_cor214,_cor215,_cor216,_cor217,_cor218,_cor219,_cor220,_cor221,_cor222,_cor223,_cor224,_cor225,_cor226,_cor227,_cor228,_cor229,_cor230,_cor231}> when 'true' ->
	      let <IV> =
		  %% Line 623
		  apply 'hash'/3
		      (Ssh, [66], 64)
	      in  %% Line 624
		  case apply 'hash'/3
			   (Ssh, [68], 192) of
		    <#{#<K1>(8,8,'binary',['unsigned'|['big']]),
		       #<K2>(8,8,'binary',['unsigned'|['big']]),
		       #<K3>(8,8,'binary',['unsigned'|['big']])}#> when 'true' ->
			let <_rec85> = {%% Line 625
			     K1,%% Line 625
				K2,%% Line 625
				   K3}
			in  let <_cor13> =
				%% Line 627
				call 'erlang':'setelement'
				    (24, Ssh, IV)
			    in  let <_cor14> =
				    %% Line 626
				    call 'erlang':'setelement'
					(23, _cor13, 8)
				in  let <_cor16> =
					%% Line 625
					call 'erlang':'setelement'
					    (22, _cor14, _rec85)
				    in  %% Line 625
					{'ok',_cor16}
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor10})
		      -| ['compiler_generated'] )
		  end
	  %% Line 628
	  <Ssh = {'ssh','client',_cor284,_cor285,_cor286,_cor287,_cor288,_cor289,_cor290,_cor291,_cor292,_cor293,_cor294,_cor295,_cor296,_cor297,_cor298,_cor299,_cor300,_cor301,'aes128-cbc',_cor302,_cor303,_cor304,_cor305,_cor306,_cor307,_cor308,_cor309,_cor310,_cor311,_cor312,_cor313,_cor314,_cor315,_cor316,_cor317,_cor318,_cor319,_cor320,_cor321,_cor322,_cor323,_cor324,_cor325,_cor326,_cor327,_cor328,_cor329,_cor330,_cor331,_cor332}> when 'true' ->
	      let <IV> =
		  %% Line 629
		  apply 'hash'/3
		      (Ssh, [65], 128)
	      in  %% Line 630
		  case apply 'hash'/3
			   (Ssh, [67], 128) of
		    <#{#<K>(16,8,'binary',['unsigned'|['big']])}#> when 'true' ->
			let <_cor20> =
			    %% Line 633
			    call 'erlang':'setelement'
				(24, Ssh, IV)
			in  let <_cor21> =
				%% Line 632
				call 'erlang':'setelement'
				    (23, _cor20, 16)
			    in  let <_cor23> =
				    %% Line 631
				    call 'erlang':'setelement'
					(22, _cor21, K)
				in  %% Line 631
				    {'ok',_cor23}
		    ( <_cor18> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor18})
		      -| ['compiler_generated'] )
		  end
	  %% Line 634
	  <Ssh = {'ssh','server',_cor385,_cor386,_cor387,_cor388,_cor389,_cor390,_cor391,_cor392,_cor393,_cor394,_cor395,_cor396,_cor397,_cor398,_cor399,_cor400,_cor401,_cor402,'aes128-cbc',_cor403,_cor404,_cor405,_cor406,_cor407,_cor408,_cor409,_cor410,_cor411,_cor412,_cor413,_cor414,_cor415,_cor416,_cor417,_cor418,_cor419,_cor420,_cor421,_cor422,_cor423,_cor424,_cor425,_cor426,_cor427,_cor428,_cor429,_cor430,_cor431,_cor432,_cor433}> when 'true' ->
	      let <IV> =
		  %% Line 635
		  apply 'hash'/3
		      (Ssh, [66], 128)
	      in  %% Line 636
		  case apply 'hash'/3
			   (Ssh, [68], 128) of
		    <#{#<K>(16,8,'binary',['unsigned'|['big']])}#> when 'true' ->
			let <_cor27> =
			    %% Line 639
			    call 'erlang':'setelement'
				(24, Ssh, IV)
			in  let <_cor28> =
				%% Line 638
				call 'erlang':'setelement'
				    (23, _cor27, 16)
			    in  let <_cor30> =
				    %% Line 637
				    call 'erlang':'setelement'
					(22, _cor28, K)
				in  %% Line 637
				    {'ok',_cor30}
		    ( <_cor25> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor25})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor31> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor31})
		  -| [{'function_name',{'encrypt_init',1}}] )
	    -| ['compiler_generated'] )
	end
'encrypt_final'/1 =
    %% Line 641
    fun (_cor0) ->
	%% Line 642
	case _cor0 of
	  <{'ssh',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58}> when 'true' ->
	      let <_cor2> =
		  %% Line 645
		  call 'erlang':'setelement'
		      (24, _cor0, 'undefined')
	      in  let <_cor3> =
		      %% Line 644
		      call 'erlang':'setelement'
			  (23, _cor2, 8)
		  in  let <_cor4> =
			  %% Line 643
			  call 'erlang':'setelement'
			      (22, _cor3, 'undefined')
		      in  let <_cor6> =
			      call 'erlang':'setelement'
				  (21, _cor4, 'none')
			  in  {'ok',_cor6}
	  ( <_cor59> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','ssh'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'encrypt'/2 =
    %% Line 648
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Ssh = {'ssh',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,'none',_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63},Data> when 'true' ->
	      %% Line 649
	      {Ssh,Data}
	  %% Line 650
	  <Ssh = {'ssh',_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,'3des-cbc',%% Line 651
																					{K1,K2,K3},_cor83,%% Line 652
																							  IV0,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111},%% Line 652
																																																	       Data> when 'true' ->
	      let <Enc> =
		  %% Line 653
		  call 'crypto':'block_encrypt'
		      ('des3_cbc', [K1|[K2|[K3|[]]]], IV0, Data)
	      in  let <IV> =
		      %% Line 654
		      call 'crypto':'next_iv'
			  ('des3_cbc', Enc)
		  in  let <_cor6> =
			  %% Line 655
			  call 'erlang':'setelement'
			      (24, Ssh, IV)
		      in  %% Line 655
			  {_cor6,Enc}
	  %% Line 656
	  <Ssh = {'ssh',_cor164,_cor165,_cor166,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181,_cor182,'aes128-cbc',%% Line 657
																							     K,_cor183,%% Line 658
																								       IV0,_cor184,_cor185,_cor186,_cor187,_cor188,_cor189,_cor190,_cor191,_cor192,_cor193,_cor194,_cor195,_cor196,_cor197,_cor198,_cor199,_cor200,_cor201,_cor202,_cor203,_cor204,_cor205,_cor206,_cor207,_cor208,_cor209,_cor210,_cor211},%% Line 658
																																																					    Data> when 'true' ->
	      let <Enc> =
		  %% Line 659
		  call 'crypto':'block_encrypt'
		      ('aes_cbc128', K, IV0, Data)
	      in  let <IV> =
		      %% Line 660
		      call 'crypto':'next_iv'
			  ('aes_cbc', Enc)
		  in  let <_cor11> =
			  %% Line 661
			  call 'erlang':'setelement'
			      (24, Ssh, IV)
		      in  %% Line 661
			  {_cor11,Enc}
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'encrypt',2}}] )
	    -| ['compiler_generated'] )
	end
'decrypt_init'/1 =
    %% Line 668
    fun (_cor0) ->
	case _cor0 of
	  <Ssh = {'ssh',_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,'none',_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89}> when 'true' ->
	      %% Line 669
	      {'ok',Ssh}
	  %% Line 670
	  <Ssh = {'ssh','client',_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,'3des-cbc',_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,_cor133,_cor134,_cor135,_cor136,_cor137,_cor138}> when 'true' ->
	      let <_cor2> =
		  %% Line 671
		  apply 'hash'/3
		      (Ssh, [66], 64)
	      in  %% Line 673
		  case apply 'hash'/3
			   (Ssh, [68], 192) of
		    <#{#<K1>(8,8,'binary',['unsigned'|['big']]),
		       #<K2>(8,8,'binary',['unsigned'|['big']]),
		       #<K3>(8,8,'binary',['unsigned'|['big']])}#> when 'true' ->
			let <_rec92> = {%% Line 674
			     K1,%% Line 674
				K2,%% Line 674
				   K3}
			in  let <_cor7> =
				%% Line 674
				call 'erlang':'setelement'
				    (28, Ssh, _cor2)
			    in  let <_cor8> =
				    %% Line 675
				    call 'erlang':'setelement'
					(27, _cor7, 8)
				in  let <_cor10> =
					%% Line 674
					call 'erlang':'setelement'
					    (26, _cor8, _rec92)
				    in  %% Line 674
					{'ok',_cor10}
		    ( <_cor4> when 'true' ->
			  do  primop 'bs_context_to_binary'
				  (_cor4)
			      primop 'match_fail'
				  ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 676
	  <Ssh = {'ssh','server',_cor191,_cor192,_cor193,_cor194,_cor195,_cor196,_cor197,_cor198,_cor199,_cor200,_cor201,_cor202,_cor203,_cor204,_cor205,_cor206,_cor207,_cor208,_cor209,_cor210,_cor211,_cor212,'3des-cbc',_cor213,_cor214,_cor215,_cor216,_cor217,_cor218,_cor219,_cor220,_cor221,_cor222,_cor223,_cor224,_cor225,_cor226,_cor227,_cor228,_cor229,_cor230,_cor231,_cor232,_cor233,_cor234,_cor235,_cor236,_cor237,_cor238,_cor239}> when 'true' ->
	      let <_cor12> =
		  %% Line 677
		  apply 'hash'/3
		      (Ssh, [65], 64)
	      in  %% Line 679
		  case apply 'hash'/3
			   (Ssh, [67], 192) of
		    <#{#<K1>(8,8,'binary',['unsigned'|['big']]),
		       #<K2>(8,8,'binary',['unsigned'|['big']]),
		       #<K3>(8,8,'binary',['unsigned'|['big']])}#> when 'true' ->
			let <_rec94> = {%% Line 680
			     K1,%% Line 680
				K2,%% Line 680
				   K3}
			in  let <_cor17> =
				%% Line 680
				call 'erlang':'setelement'
				    (28, Ssh, _cor12)
			    in  let <_cor18> =
				    %% Line 681
				    call 'erlang':'setelement'
					(27, _cor17, 8)
				in  let <_cor20> =
					%% Line 680
					call 'erlang':'setelement'
					    (26, _cor18, _rec94)
				    in  %% Line 680
					{'ok',_cor20}
		    ( <_cor14> when 'true' ->
			  do  primop 'bs_context_to_binary'
				  (_cor14)
			      primop 'match_fail'
				  ({'badmatch',_cor14})
		      -| ['compiler_generated'] )
		  end
	  %% Line 682
	  <Ssh = {'ssh','client',_cor292,_cor293,_cor294,_cor295,_cor296,_cor297,_cor298,_cor299,_cor300,_cor301,_cor302,_cor303,_cor304,_cor305,_cor306,_cor307,_cor308,_cor309,_cor310,_cor311,_cor312,_cor313,'aes128-cbc',_cor314,_cor315,_cor316,_cor317,_cor318,_cor319,_cor320,_cor321,_cor322,_cor323,_cor324,_cor325,_cor326,_cor327,_cor328,_cor329,_cor330,_cor331,_cor332,_cor333,_cor334,_cor335,_cor336,_cor337,_cor338,_cor339,_cor340}> when 'true' ->
	      let <_cor22> =
		  %% Line 683
		  apply 'hash'/3
		      (Ssh, [66], 128)
	      in  %% Line 685
		  case apply 'hash'/3
			   (Ssh, [68], 128) of
		    <#{#<K>(16,8,'binary',['unsigned'|['big']])}#> when 'true' ->
			let <_cor26> =
			    %% Line 686
			    call 'erlang':'setelement'
				(28, Ssh, _cor22)
			in  let <_cor27> =
				%% Line 687
				call 'erlang':'setelement'
				    (27, _cor26, 16)
			    in  let <_cor29> =
				    %% Line 686
				    call 'erlang':'setelement'
					(26, _cor27, K)
				in  %% Line 686
				    {'ok',_cor29}
		    ( <_cor24> when 'true' ->
			  do  primop 'bs_context_to_binary'
				  (_cor24)
			      primop 'match_fail'
				  ({'badmatch',_cor24})
		      -| ['compiler_generated'] )
		  end
	  %% Line 688
	  <Ssh = {'ssh','server',_cor393,_cor394,_cor395,_cor396,_cor397,_cor398,_cor399,_cor400,_cor401,_cor402,_cor403,_cor404,_cor405,_cor406,_cor407,_cor408,_cor409,_cor410,_cor411,_cor412,_cor413,_cor414,'aes128-cbc',_cor415,_cor416,_cor417,_cor418,_cor419,_cor420,_cor421,_cor422,_cor423,_cor424,_cor425,_cor426,_cor427,_cor428,_cor429,_cor430,_cor431,_cor432,_cor433,_cor434,_cor435,_cor436,_cor437,_cor438,_cor439,_cor440,_cor441}> when 'true' ->
	      let <_cor31> =
		  %% Line 689
		  apply 'hash'/3
		      (Ssh, [65], 128)
	      in  %% Line 691
		  case apply 'hash'/3
			   (Ssh, [67], 128) of
		    <#{#<K>(16,8,'binary',['unsigned'|['big']])}#> when 'true' ->
			let <_cor35> =
			    %% Line 692
			    call 'erlang':'setelement'
				(28, Ssh, _cor31)
			in  let <_cor36> =
				%% Line 693
				call 'erlang':'setelement'
				    (27, _cor35, 16)
			    in  let <_cor38> =
				    %% Line 692
				    call 'erlang':'setelement'
					(26, _cor36, K)
				in  %% Line 692
				    {'ok',_cor38}
		    ( <_cor33> when 'true' ->
			  do  primop 'bs_context_to_binary'
				  (_cor33)
			      primop 'match_fail'
				  ({'badmatch',_cor33})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor39> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor39})
		  -| [{'function_name',{'decrypt_init',1}}] )
	    -| ['compiler_generated'] )
	end
'decrypt_final'/1 =
    %% Line 696
    fun (_cor0) ->
	%% Line 697
	case _cor0 of
	  <{'ssh',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58}> when 'true' ->
	      let <_cor2> =
		  %% Line 699
		  call 'erlang':'setelement'
		      (28, _cor0, 'undefined')
	      in  let <_cor3> =
		      %% Line 700
		      call 'erlang':'setelement'
			  (27, _cor2, 8)
		  in  let <_cor4> =
			  %% Line 698
			  call 'erlang':'setelement'
			      (26, _cor3, 'undefined')
		      in  let <_cor6> =
			      call 'erlang':'setelement'
				  (25, _cor4, 'none')
			  in  {'ok',_cor6}
	  ( <_cor59> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','ssh'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'decrypt'/2 =
    %% Line 702
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Ssh = {'ssh',_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,'none',_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64},Data> when 'true' ->
	      %% Line 703
	      {Ssh,Data}
	  %% Line 704
	  <Ssh = {'ssh',_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,'3des-cbc',Keys,_cor88,%% Line 705
																										IV0,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112},%% Line 705
																																																	  Data> when 'true' ->
	      %% Line 706
	      case Keys of
		<{K1,K2,K3}> when 'true' ->
		    let <Dec> =
			%% Line 707
			call 'crypto':'block_decrypt'
			    ('des3_cbc', [K1|[K2|[K3|[]]]], IV0, Data)
		    in  let <IV> =
			    %% Line 708
			    call 'crypto':'next_iv'
				('des3_cbc', Data)
			in  let <_cor7> =
				%% Line 709
				call 'erlang':'setelement'
				    (28, Ssh, IV)
			    in  %% Line 709
				{_cor7,Dec}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 710
	  <Ssh = {'ssh',_cor165,_cor166,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181,_cor182,_cor183,_cor184,_cor185,_cor186,_cor187,'aes128-cbc',Key,_cor188,%% Line 711
																													 IV0,_cor189,_cor190,_cor191,_cor192,_cor193,_cor194,_cor195,_cor196,_cor197,_cor198,_cor199,_cor200,_cor201,_cor202,_cor203,_cor204,_cor205,_cor206,_cor207,_cor208,_cor209,_cor210,_cor211,_cor212},%% Line 711
																																																					      Data> when 'true' ->
	      let <Dec> =
		  %% Line 712
		  call 'crypto':'block_decrypt'
		      ('aes_cbc128', Key, IV0, Data)
	      in  let <IV> =
		      %% Line 713
		      call 'crypto':'next_iv'
			  ('aes_cbc', Data)
		  in  let <_cor12> =
			  %% Line 714
			  call 'erlang':'setelement'
			      (28, Ssh, IV)
		      in  %% Line 714
			  {_cor12,Dec}
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'decrypt',2}}] )
	    -| ['compiler_generated'] )
	end
'compress_init'/1 =
    %% Line 724
    fun (_cor0) ->
	%% Line 725
	apply 'compress_init'/2
	    (_cor0, 1)
'compress_init'/2 =
    %% Line 727
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Ssh = {'ssh',_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,'none',_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63},_cor64> when 'true' ->
	      %% Line 728
	      {'ok',Ssh}
	  %% Line 729
	  <Ssh = {'ssh',_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,'zlib',_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114},Level> when 'true' ->
	      let <Zlib> =
		  %% Line 730
		  call 'zlib':'open'
		      ()
	      in  %% Line 731
		  case call 'zlib':'deflateInit'
			   (Zlib, Level) of
		    <'ok'> when 'true' ->
			let <_cor6> =
			    %% Line 732
			    call 'erlang':'setelement'
				(30, Ssh, Zlib)
			in  %% Line 732
			    {'ok',_cor6}
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	  %% Line 733
	  <Ssh = {'ssh',_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181,_cor182,_cor183,_cor184,_cor185,_cor186,_cor187,_cor188,_cor189,_cor190,_cor191,_cor192,_cor193,'zlib@openssh.com',_cor194,_cor195,_cor196,_cor197,_cor198,_cor199,_cor200,_cor201,_cor202,_cor203,_cor204,_cor205,_cor206,_cor207,_cor208,_cor209,_cor210,_cor211,_cor212,_cor213,_cor214,_cor215,_cor216},Level> when 'true' ->
	      let <Zlib> =
		  %% Line 734
		  call 'zlib':'open'
		      ()
	      in  %% Line 735
		  case call 'zlib':'deflateInit'
			   (Zlib, Level) of
		    <'ok'> when 'true' ->
			let <_cor11> =
			    %% Line 736
			    call 'erlang':'setelement'
				(30, Ssh, Zlib)
			in  %% Line 736
			    {'ok',_cor11}
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor8})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'compress_init',2}}] )
	    -| ['compiler_generated'] )
	end
'compress_final'/1 =
    %% Line 738
    fun (_cor0) ->
	case _cor0 of
	  <Ssh = {'ssh',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,'none',_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59}> when 'true' ->
	      %% Line 739
	      {'ok',Ssh}
	  %% Line 740
	  <Ssh = {'ssh',_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,'zlib',Context,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108}> when 'true' ->
	      do  %% Line 741
		  call 'zlib':'close'
		      (Context)
		  let <_cor2> =
		      %% Line 742
		      call 'erlang':'setelement'
			  (30, Ssh, 'undefined')
		  in  let <_cor4> =
			  %% Line 742
			  call 'erlang':'setelement'
			      (29, _cor2, 'none')
		      in  %% Line 742
			  {'ok',_cor4}
	  %% Line 743
	  <Ssh = {'ssh',_cor161,_cor162,_cor163,_cor164,_cor165,_cor166,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181,_cor182,_cor183,_cor184,_cor185,_cor186,_cor187,'zlib@openssh.com',_cor188,_cor189,_cor190,_cor191,_cor192,_cor193,_cor194,_cor195,_cor196,_cor197,_cor198,_cor199,_cor200,_cor201,_cor202,_cor203,_cor204,_cor205,_cor206,_cor207,_cor208,_cor209,'false'}> when 'true' ->
	      %% Line 744
	      {'ok',Ssh}
	  %% Line 745
	  <Ssh = {'ssh',_cor210,_cor211,_cor212,_cor213,_cor214,_cor215,_cor216,_cor217,_cor218,_cor219,_cor220,_cor221,_cor222,_cor223,_cor224,_cor225,_cor226,_cor227,_cor228,_cor229,_cor230,_cor231,_cor232,_cor233,_cor234,_cor235,_cor236,'zlib@openssh.com',Context,_cor237,_cor238,_cor239,_cor240,_cor241,_cor242,_cor243,_cor244,_cor245,_cor246,_cor247,_cor248,_cor249,_cor250,_cor251,_cor252,_cor253,_cor254,_cor255,_cor256,_cor257,'true'}> when 'true' ->
	      do  %% Line 746
		  call 'zlib':'close'
		      (Context)
		  let <_cor6> =
		      %% Line 747
		      call 'erlang':'setelement'
			  (30, Ssh, 'undefined')
		  in  let <_cor8> =
			  %% Line 747
			  call 'erlang':'setelement'
			      (29, _cor6, 'none')
		      in  %% Line 747
			  {'ok',_cor8}
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'compress_final',1}}] )
	    -| ['compiler_generated'] )
	end
'compress'/2 =
    %% Line 749
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Ssh = {'ssh',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,'none',_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57},Data> when 'true' ->
	      %% Line 750
	      {Ssh,Data}
	  %% Line 751
	  <Ssh = {'ssh',_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,'zlib',Context,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106},Data> when 'true' ->
	      let <Compressed> =
		  %% Line 752
		  call 'zlib':'deflate'
		      (Context, Data, 'sync')
	      in  let <_cor3> =
		      %% Line 753
		      call 'erlang':'list_to_binary'
			  (Compressed)
		  in  %% Line 753
		      {Ssh,_cor3}
	  %% Line 754
	  <Ssh = {'ssh',_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,_cor133,'zlib@openssh.com',_cor134,_cor135,_cor136,_cor137,_cor138,_cor139,_cor140,_cor141,_cor142,_cor143,_cor144,_cor145,_cor146,_cor147,_cor148,_cor149,_cor150,_cor151,_cor152,_cor153,_cor154,_cor155,'false'},Data> when 'true' ->
	      %% Line 755
	      {Ssh,Data}
	  %% Line 756
	  <Ssh = {'ssh',_cor156,_cor157,_cor158,_cor159,_cor160,_cor161,_cor162,_cor163,_cor164,_cor165,_cor166,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181,_cor182,'zlib@openssh.com',Context,_cor183,_cor184,_cor185,_cor186,_cor187,_cor188,_cor189,_cor190,_cor191,_cor192,_cor193,_cor194,_cor195,_cor196,_cor197,_cor198,_cor199,_cor200,_cor201,_cor202,_cor203,'true'},Data> when 'true' ->
	      let <Compressed> =
		  %% Line 757
		  call 'zlib':'deflate'
		      (Context, Data, 'sync')
	      in  let <_cor5> =
		      %% Line 758
		      call 'erlang':'list_to_binary'
			  (Compressed)
		  in  %% Line 758
		      {Ssh,_cor5}
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'compress',2}}] )
	    -| ['compiler_generated'] )
	end
'decompress_init'/1 =
    %% Line 764
    fun (_cor0) ->
	case _cor0 of
	  <Ssh = {'ssh',_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,'none',_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61}> when 'true' ->
	      %% Line 765
	      {'ok',Ssh}
	  %% Line 766
	  <Ssh = {'ssh',_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,'zlib',_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111}> when 'true' ->
	      let <Zlib> =
		  %% Line 767
		  call 'zlib':'open'
		      ()
	      in  %% Line 768
		  case call 'zlib':'inflateInit'
			   (Zlib) of
		    <'ok'> when 'true' ->
			let <_cor5> =
			    %% Line 769
			    call 'erlang':'setelement'
				(32, Ssh, Zlib)
			in  %% Line 769
			    {'ok',_cor5}
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	  %% Line 770
	  <Ssh = {'ssh',_cor164,_cor165,_cor166,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181,_cor182,_cor183,_cor184,_cor185,_cor186,_cor187,_cor188,_cor189,_cor190,_cor191,_cor192,'zlib@openssh.com',_cor193,_cor194,_cor195,_cor196,_cor197,_cor198,_cor199,_cor200,_cor201,_cor202,_cor203,_cor204,_cor205,_cor206,_cor207,_cor208,_cor209,_cor210,_cor211,_cor212,_cor213}> when 'true' ->
	      let <Zlib> =
		  %% Line 771
		  call 'zlib':'open'
		      ()
	      in  %% Line 772
		  case call 'zlib':'inflateInit'
			   (Zlib) of
		    <'ok'> when 'true' ->
			let <_cor10> =
			    %% Line 773
			    call 'erlang':'setelement'
				(32, Ssh, Zlib)
			in  %% Line 773
			    {'ok',_cor10}
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor7})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11})
		  -| [{'function_name',{'decompress_init',1}}] )
	    -| ['compiler_generated'] )
	end
'decompress_final'/1 =
    %% Line 775
    fun (_cor0) ->
	case _cor0 of
	  <Ssh = {'ssh',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,'none',_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59}> when 'true' ->
	      %% Line 776
	      {'ok',Ssh}
	  %% Line 777
	  <Ssh = {'ssh',_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,'zlib',Context,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108}> when 'true' ->
	      do  %% Line 778
		  call 'zlib':'close'
		      (Context)
		  let <_cor2> =
		      %% Line 779
		      call 'erlang':'setelement'
			  (32, Ssh, 'undefined')
		  in  let <_cor4> =
			  %% Line 779
			  call 'erlang':'setelement'
			      (31, _cor2, 'none')
		      in  %% Line 779
			  {'ok',_cor4}
	  %% Line 780
	  <Ssh = {'ssh',_cor161,_cor162,_cor163,_cor164,_cor165,_cor166,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181,_cor182,_cor183,_cor184,_cor185,_cor186,_cor187,_cor188,_cor189,'zlib@openssh.com',_cor190,_cor191,_cor192,_cor193,_cor194,_cor195,_cor196,_cor197,_cor198,_cor199,_cor200,_cor201,_cor202,_cor203,_cor204,_cor205,_cor206,_cor207,_cor208,_cor209,'false'}> when 'true' ->
	      %% Line 781
	      {'ok',Ssh}
	  %% Line 782
	  <Ssh = {'ssh',_cor210,_cor211,_cor212,_cor213,_cor214,_cor215,_cor216,_cor217,_cor218,_cor219,_cor220,_cor221,_cor222,_cor223,_cor224,_cor225,_cor226,_cor227,_cor228,_cor229,_cor230,_cor231,_cor232,_cor233,_cor234,_cor235,_cor236,_cor237,_cor238,'zlib@openssh.com',Context,_cor239,_cor240,_cor241,_cor242,_cor243,_cor244,_cor245,_cor246,_cor247,_cor248,_cor249,_cor250,_cor251,_cor252,_cor253,_cor254,_cor255,_cor256,_cor257,'true'}> when 'true' ->
	      do  %% Line 783
		  call 'zlib':'close'
		      (Context)
		  let <_cor6> =
		      %% Line 784
		      call 'erlang':'setelement'
			  (32, Ssh, 'undefined')
		  in  let <_cor8> =
			  %% Line 784
			  call 'erlang':'setelement'
			      (31, _cor6, 'none')
		      in  %% Line 784
			  {'ok',_cor8}
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'decompress_final',1}}] )
	    -| ['compiler_generated'] )
	end
'decompress'/2 =
    %% Line 786
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Ssh = {'ssh',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,'none',_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57},Data> when 'true' ->
	      %% Line 787
	      {Ssh,Data}
	  %% Line 788
	  <Ssh = {'ssh',_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,'zlib',Context,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95,_cor96,_cor97,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106},Data> when 'true' ->
	      let <Decompressed> =
		  %% Line 789
		  call 'zlib':'inflate'
		      (Context, Data)
	      in  let <_cor3> =
		      %% Line 790
		      call 'erlang':'list_to_binary'
			  (Decompressed)
		  in  %% Line 790
		      {Ssh,_cor3}
	  %% Line 791
	  <Ssh = {'ssh',_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113,_cor114,_cor115,_cor116,_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126,_cor127,_cor128,_cor129,_cor130,_cor131,_cor132,_cor133,_cor134,_cor135,'zlib@openssh.com',_cor136,_cor137,_cor138,_cor139,_cor140,_cor141,_cor142,_cor143,_cor144,_cor145,_cor146,_cor147,_cor148,_cor149,_cor150,_cor151,_cor152,_cor153,_cor154,_cor155,'false'},Data> when 'true' ->
	      %% Line 792
	      {Ssh,Data}
	  %% Line 793
	  <Ssh = {'ssh',_cor156,_cor157,_cor158,_cor159,_cor160,_cor161,_cor162,_cor163,_cor164,_cor165,_cor166,_cor167,_cor168,_cor169,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176,_cor177,_cor178,_cor179,_cor180,_cor181,_cor182,_cor183,_cor184,'zlib@openssh.com',Context,_cor185,_cor186,_cor187,_cor188,_cor189,_cor190,_cor191,_cor192,_cor193,_cor194,_cor195,_cor196,_cor197,_cor198,_cor199,_cor200,_cor201,_cor202,_cor203,'true'},Data> when 'true' ->
	      let <Decompressed> =
		  %% Line 794
		  call 'zlib':'inflate'
		      (Context, Data)
	      in  let <_cor5> =
		      %% Line 795
		      call 'erlang':'list_to_binary'
			  (Decompressed)
		  in  %% Line 795
		      {Ssh,_cor5}
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'decompress',2}}] )
	    -| ['compiler_generated'] )
	end
'send_mac_init'/1 =
    %% Line 812
    fun (_cor0) ->
	%% Line 813
	( case _cor0 of
	    ( <( {'ssh',_rec109,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68}
		 -| ['compiler_generated'] )> when 'true' ->
		  case _rec109 of
		    %% Line 814
		    <'client'> when 'true' ->
			let <KeySize> =
			    %% Line 815
			    apply 'mac_key_size'/1
				(_cor31)
			in  let <Key> =
				%% Line 816
				apply 'hash'/3
				    (_cor0, [69], KeySize)
			    in  let <_cor9> =
				    %% Line 817
				    call 'erlang':'setelement'
					(16, _cor0, Key)
				in  %% Line 817
				    {'ok',_cor9}
		    %% Line 818
		    <'server'> when 'true' ->
			let <KeySize> =
			    %% Line 819
			    apply 'mac_key_size'/1
				(_cor31)
			in  let <Key> =
				%% Line 820
				apply 'hash'/3
				    (_cor0, [70], KeySize)
			    in  let <_cor16> =
				    %% Line 821
				    call 'erlang':'setelement'
					(16, _cor0, Key)
				in  %% Line 821
				    {'ok',_cor16}
		    ( <_cor17> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor17})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor69> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','ssh'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'send_mac_final'/1 =
    %% Line 824
    fun (_cor0) ->
	%% Line 825
	case _cor0 of
	  <{'ssh',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56}> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'setelement'
		      (16, _cor0, 'undefined')
	      in  let <_cor4> =
		      call 'erlang':'setelement'
			  (15, _cor2, 'none')
		  in  {'ok',_cor4}
	  ( <_cor57> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','ssh'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'recv_mac_init'/1 =
    %% Line 827
    fun (_cor0) ->
	%% Line 828
	( case _cor0 of
	    ( <( {'ssh',_rec115,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68}
		 -| ['compiler_generated'] )> when 'true' ->
		  case _rec115 of
		    %% Line 829
		    <'client'> when 'true' ->
			let <_cor5> =
			    %% Line 830
			    apply 'mac_key_size'/1
				(_cor34)
			in  let <Key> =
				%% Line 830
				apply 'hash'/3
				    (_cor0, [70], _cor5)
			    in  let <_cor9> =
				    %% Line 831
				    call 'erlang':'setelement'
					(19, _cor0, Key)
				in  %% Line 831
				    {'ok',_cor9}
		    %% Line 832
		    <'server'> when 'true' ->
			let <_cor12> =
			    %% Line 833
			    apply 'mac_key_size'/1
				(_cor34)
			in  let <Key> =
				%% Line 833
				apply 'hash'/3
				    (_cor0, [69], _cor12)
			    in  let <_cor16> =
				    %% Line 834
				    call 'erlang':'setelement'
					(19, _cor0, Key)
				in  %% Line 834
				    {'ok',_cor16}
		    ( <_cor17> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor17})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor69> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','ssh'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'recv_mac_final'/1 =
    %% Line 837
    fun (_cor0) ->
	%% Line 838
	case _cor0 of
	  <{'ssh',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56}> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'setelement'
		      (19, _cor0, 'undefined')
	      in  let <_cor4> =
		      call 'erlang':'setelement'
			  (18, _cor2, 'none')
		  in  {'ok',_cor4}
	  ( <_cor57> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','ssh'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'mac'/4 =
    %% Line 840
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'none',_cor14,_cor15,_cor16> when 'true' ->
	      %% Line 841
	      #{}#
	  %% Line 842
	  <'hmac-sha1',Key,SeqNum,Data> when 'true' ->
	      let <_cor4> =
		  %% Line 843
		  #{#<SeqNum>(32,1,'integer',['unsigned'|['big']])}#
	      in  %% Line 843
		  call 'crypto':'hmac'
		      ('sha', Key, [_cor4|[Data|[]]])
	  %% Line 844
	  <'hmac-sha1-96',Key,SeqNum,Data> when 'true' ->
	      let <_cor6> =
		  %% Line 845
		  #{#<SeqNum>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor5> =
		      %% Line 845
		      apply 'mac_digest_size'/1
			  ('hmac-sha1-96')
		  in  %% Line 845
		      call 'crypto':'hmac'
			  ('sha', Key, [_cor6|[Data|[]]], _cor5)
	  %% Line 846
	  <'hmac-md5',Key,SeqNum,Data> when 'true' ->
	      let <_cor7> =
		  %% Line 847
		  #{#<SeqNum>(32,1,'integer',['unsigned'|['big']])}#
	      in  %% Line 847
		  call 'crypto':'hmac'
		      ('md5', Key, [_cor7|[Data|[]]])
	  %% Line 848
	  <'hmac-md5-96',Key,SeqNum,Data> when 'true' ->
	      let <_cor9> =
		  %% Line 849
		  #{#<SeqNum>(32,1,'integer',['unsigned'|['big']])}#
	      in  let <_cor8> =
		      %% Line 849
		      apply 'mac_digest_size'/1
			  ('hmac-md5-96')
		  in  %% Line 849
		      call 'crypto':'hmac'
			  ('md5', Key, [_cor9|[Data|[]]], _cor8)
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'mac',4}}] )
	    -| ['compiler_generated'] )
	end
'hash'/3 =
    %% Line 852
    fun (_cor2,_cor1,_cor0) ->
	%% Line 854
	( case _cor2 of
	    ( <( {'ssh',_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_rec121,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor12> =
		      case _rec121 of
			%% Line 855
			<'diffie-hellman-group1-sha1'> when 'true' ->
			    %% Line 856
			    ( fun (_cor5) ->
				  call 'crypto':'hash'
				      ('sha', _cor5)
			      -| [{'id',{0,0,'-hash/3-fun-0-'}}] )
			%% Line 857
			<'diffie-hellman-group-exchange-sha1'> when 'true' ->
			    %% Line 858
			    ( fun (_cor7) ->
				  call 'crypto':'hash'
				      ('sha', _cor7)
			      -| [{'id',{0,0,'-hash/3-fun-1-'}}] )
			%% Line 859
			<_cor68> when 'true' ->
			    %% Line 860
			    call 'erlang':'exit'
				({'bad_algorithm',_rec121})
		      end
		  in  %% Line 862
		      apply 'hash'/4
			  (_cor2, _cor1, _cor0, _cor12)
	      -| ['compiler_generated'] )
	    ( <_cor67> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','ssh'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'hash'/4 =
    %% Line 864
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_X_SSH,_X_Char,0,_X_HASH> when 'true' ->
	      %% Line 865
	      #{}#
	  %% Line 866
	  <SSH,Char,N,HASH> when 'true' ->
	      %% Line 867
	      ( case SSH of
		  ( <( {'ssh',_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_rec123,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70}
		       -| ['compiler_generated'] )> when 'true' ->
			let <K> =
			    call 'ssh_bits':'mpint'
				(_rec123)
			in  let <K1> =
				%% Line 870
				apply HASH
				    ([K|[_cor56|[Char|[_cor57|[]]]]])
			    in  let <Sz> =
				    %% Line 871
				    call 'erlang':'div'
					(N, 8)
				in  let <_cor15> =
					%% Line 872
					call 'erlang':'-'
					    (N, 128)
				    in  %% Line 872
					case apply 'hash'/5
						 (K, _cor56, K1, _cor15, HASH) of
					  <#{#<Key>(Sz,8,'binary',['unsigned'|['big']]),
					     #<_cor174>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
					      %% Line 873
					      Key
					  ( <_cor16> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor16})
					    -| ['compiler_generated'] )
					end
		    -| ['compiler_generated'] )
		  ( <_cor71> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','ssh'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'hash'/5 =
    %% Line 875
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_K,_X_H,Ki,N,_X_HASH>
	      when call 'erlang':'=<'
		    (N,
		     0) ->
	      %% Line 876
	      Ki
	  %% Line 877
	  <K,H,Ki,N,HASH> when 'true' ->
	      let <Kj> =
		  %% Line 878
		  apply HASH
		      ([K|[H|[Ki|[]]]])
	      in  let <_cor7> =
		      %% Line 879
		      #{#<Ki>('all',8,'binary',['unsigned'|['big']]),
			#<Kj>('all',8,'binary',['unsigned'|['big']])}#
		  in  let <_cor6> =
			  %% Line 879
			  call 'erlang':'-'
			      (N, 128)
		      in  %% Line 879
			  apply 'hash'/5
			      (K, H, _cor7, _cor6, HASH)
	end
'kex_h'/5 =
    %% Line 881
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 882
	( case _cor4 of
	    ( <( {'ssh',_cor20,_cor21,_cor22,_cor23,_rec126,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor13> =
		      %% Line 884
		      call 'ssh_message':'encode_host_key'
			  (_cor3)
		  in  let <L> =
			  call 'ssh_bits':'encode'
			      ([_rec126|[_cor24|%% Line 883
						[_cor25|[_cor26|%% Line 884
								[_cor13|[_cor2|[_cor1|[_cor0|[]]]]]]]]], %% Line 885
													 ['string'|['string'|['binary'|['binary'|['binary'|['mpint'|['mpint'|['mpint']]]]]]]])
		      in  %% Line 887
			  call 'crypto':'hash'
			      ('sha', L)
	      -| ['compiler_generated'] )
	    ( <_cor70> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','ssh'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'kex_h'/10 =
    %% Line 890
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor34> =
	    %% Line 891
	    case <> of
	      <>
		  when let <_cor11> =
			call 'erlang':'=='
			    (_cor7, -1)
		    in  let <_cor13> =
			    call 'erlang':'=='
				(_cor5, -1)
			in  call 'erlang':'or'
				(_cor11, _cor13) ->
		  %% Line 895
		  ( case _cor9 of
		      ( <( {'ssh',_cor46,_cor47,_cor48,_cor49,_rec130,_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75,_cor76,_cor77,_cor78,_cor79,_cor80,_cor81,_cor82,_cor83,_cor84,_cor85,_cor86,_cor87,_cor88,_cor89,_cor90,_cor91,_cor92,_cor93,_cor94,_cor95}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_cor23> =
				%% Line 897
				call 'ssh_message':'encode_host_key'
				    (_cor8)
			    in  call 'ssh_bits':'encode'
				    ([_rec130|[_cor50|%% Line 896
						      [_cor51|[_cor52|%% Line 897
								      [_cor23|[_cor6|[_cor4|[_cor3|[_cor2|[_cor1|[_cor0|[]]]]]]]]]]]], ['string'|['string'|['binary'|['binary'|['binary'|['uint32'|['mpint'|['mpint'|['mpint'|['mpint'|['mpint']]]]]]]]]]])
			-| ['compiler_generated'] )
		      ( <_cor96> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','ssh'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 899
	      <> when 'true' ->
		  %% Line 903
		  ( case _cor9 of
		      ( <( {'ssh',_cor250,_cor251,_cor252,_cor253,_rec134,_cor254,_cor255,_cor256,_cor257,_cor258,_cor259,_cor260,_cor261,_cor262,_cor263,_cor264,_cor265,_cor266,_cor267,_cor268,_cor269,_cor270,_cor271,_cor272,_cor273,_cor274,_cor275,_cor276,_cor277,_cor278,_cor279,_cor280,_cor281,_cor282,_cor283,_cor284,_cor285,_cor286,_cor287,_cor288,_cor289,_cor290,_cor291,_cor292,_cor293,_cor294,_cor295,_cor296,_cor297,_cor298,_cor299}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_cor33> =
				%% Line 905
				call 'ssh_message':'encode_host_key'
				    (_cor8)
			    in  call 'ssh_bits':'encode'
				    ([_rec134|[_cor254|%% Line 904
						       [_cor255|[_cor256|%% Line 905
									 [_cor33|[_cor7|[_cor6|[_cor5|%% Line 906
												      [_cor4|[_cor3|[_cor2|[_cor1|[_cor0|[]]]]]]]]]]]]]], ['string'|['string'|['binary'|['binary'|['binary'|['uint32'|['uint32'|['uint32'|['mpint'|['mpint'|['mpint'|['mpint'|['mpint']]]]]]]]]]]]])
			-| ['compiler_generated'] )
		      ( <_cor300> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','ssh'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	    end
	in  %% Line 908
	    call 'crypto':'hash'
		('sha', _cor34)
'mac_key_size'/1 =
    %% Line 910
    fun (_cor0) ->
	case _cor0 of
	  <'hmac-sha1'> when 'true' ->
	      160
	  %% Line 911
	  <'hmac-sha1-96'> when 'true' ->
	      160
	  %% Line 912
	  <'hmac-md5'> when 'true' ->
	      128
	  %% Line 913
	  <'hmac-md5-96'> when 'true' ->
	      128
	  %% Line 914
	  <'none'> when 'true' ->
	      0
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'mac_key_size',1}}] )
	    -| ['compiler_generated'] )
	end
'mac_digest_size'/1 =
    %% Line 916
    fun (_cor0) ->
	case _cor0 of
	  <'hmac-sha1'> when 'true' ->
	      20
	  %% Line 917
	  <'hmac-sha1-96'> when 'true' ->
	      12
	  %% Line 918
	  <'hmac-md5'> when 'true' ->
	      20
	  %% Line 919
	  <'hmac-md5-96'> when 'true' ->
	      12
	  %% Line 920
	  <'none'> when 'true' ->
	      0
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'mac_digest_size',1}}] )
	    -| ['compiler_generated'] )
	end
'peer_name'/1 =
    %% Line 922
    fun (_cor0) ->
	case _cor0 of
	  <{Host,_cor2}> when 'true' ->
	      %% Line 923
	      Host
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'peer_name',1}}] )
	    -| ['compiler_generated'] )
	end
'dh_group1'/0 =
    %% Line 931
    fun () ->
	%% Line 932
	{2,179769313486231590770839156793787453197860296048756011706444423684197180216158519368947833795864925541502180565485980503646440548199239100050792877003355816639229553136239076508735759914822574862575007425302077447712589550957937778424442426617334727629299387668709205606050270810842907692932019128194467627007}
'dh_gen_key'/3 =
    %% Line 934
    fun (_cor2,_cor1,_cor0) ->
	%% Line 935
	case call 'crypto':'generate_key'
		 ('dh', [_cor1|[_cor2|[]]]) of
	  <{Public,Private}> when 'true' ->
	      let <_cor5> =
		  %% Line 936
		  call 'crypto':'bytes_to_integer'
		      (Private)
	      in  let <_cor4> =
		      %% Line 936
		      call 'crypto':'bytes_to_integer'
			  (Public)
		  in  %% Line 936
		      {_cor5,_cor4}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'trim_tail'/1 =
    %% Line 938
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 939
	    call 'lists':'reverse'
		(_cor0)
	in  let <_cor2> =
		%% Line 939
		apply 'trim_head'/1
		    (_cor1)
	    in  %% Line 939
		call 'lists':'reverse'
		    (_cor2)
'trim_head'/1 =
    %% Line 941
    fun (_cor0) ->
	case _cor0 of
	  <[32|Cs]> when 'true' ->
	      apply 'trim_head'/1
		  (Cs)
	  %% Line 942
	  <[9|Cs]> when 'true' ->
	      apply 'trim_head'/1
		  (Cs)
	  %% Line 943
	  <[10|Cs]> when 'true' ->
	      apply 'trim_head'/1
		  (Cs)
	  %% Line 944
	  <[13|Cs]> when 'true' ->
	      apply 'trim_head'/1
		  (Cs)
	  %% Line 945
	  <Cs> when 'true' ->
	      Cs
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('ssh_transport')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('ssh_transport', _cor0)
end