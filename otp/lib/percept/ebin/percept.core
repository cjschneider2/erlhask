module 'percept' ['analyze'/1,
		  'module_info'/0,
		  'module_info'/1,
		  'profile'/1,
		  'profile'/2,
		  'profile'/3,
		  'start'/2,
		  'start_webserver'/0,
		  'start_webserver'/1,
		  'stop'/1,
		  'stop_profile'/0,
		  'stop_webserver'/0,
		  'stop_webserver'/1]
    attributes [%% Line 27
		'behaviour' =
		    %% Line 27
		    ['application'],
		%% Line 26
		'type' =
		    %% Line 26
		    [{'timestamp',{'type',26,'tuple',[{'type',26,'non_neg_integer',[]}|[{'type',26,'non_neg_integer',[]}|[{'type',26,'non_neg_integer',[]}]]]},[]}],
		%% Line 27
		'type' =
		    %% Line 27
		    [{'true_mfa',{'type',27,'tuple',[{'type',27,'atom',[]}|[{'type',27,'atom',[]}|[{'type',27,'union',[{'type',27,'byte',[]}|[{'type',27,'list',[]}]]}]]]},[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{'state',{'type',28,'union',[{'atom',28,'active'}|[{'atom',28,'inactive'}]]},[]}],
		%% Line 29
		'type' =
		    %% Line 29
		    [{'scheduler_id',{'type',29,'tuple',[{'atom',29,'scheduler_id'}|[{'type',29,'non_neg_integer',[]}]]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{{'record','activity'},[{'record_field',36,{'atom',36,'timestamp'}}|[{'record_field',37,{'atom',37,'id'}}|[{'record_field',38,{'atom',38,'state'},{'atom',38,'undefined'}}|[{'record_field',39,{'atom',39,'where'},{'atom',39,'undefined'}}|[{'record_field',40,{'atom',40,'runnable_count'},{'integer',40,0}}]]]]],[]}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{{'record','information'},[{'record_field',44,{'atom',44,'id'}}|[{'record_field',45,{'atom',45,'name'},{'atom',45,'undefined'}}|[{'record_field',46,{'atom',46,'entry'},{'atom',46,'undefined'}}|[{'record_field',47,{'atom',47,'start'},{'atom',47,'undefined'}}|[{'record_field',48,{'atom',48,'stop'},{'atom',48,'undefined'}}|[{'record_field',49,{'atom',49,'parent'},{'atom',49,'undefined'}}|[{'record_field',50,{'atom',50,'children'},{'nil',50}}]]]]]]],[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{'percept_option',{'type',53,'union',[{'atom',53,'procs'}|[{'atom',53,'ports'}|[{'atom',53,'exclusive'}|[{'atom',53,'scheduler'}]]]]},[]}],
		%% Line 88
		'spec' =
		    %% Line 88
		    [{{'profile',1},[{'type',88,'fun',[{'type',88,'product',[{'ann_type',88,[{'var',88,'Filename'}|[{'remote_type',88,[{'atom',88,'file'}|[{'atom',88,'filename'}|[[]]]]}]]}]}|[{'type',89,'union',[{'type',89,'tuple',[{'atom',89,'ok'}|[{'type',89,'port',[]}]]}|[{'type',89,'tuple',[{'atom',89,'already_started'}|[{'type',89,'port',[]}]]}]]}]]}]}],
		%% Line 97
		'spec' =
		    %% Line 97
		    [{{'profile',2},[{'type',97,'fun',[{'type',97,'product',[{'ann_type',97,[{'var',97,'Filename'}|[{'remote_type',97,[{'atom',97,'file'}|[{'atom',97,'filename'}|[[]]]]}]]}|[{'ann_type',98,[{'var',98,'Options'}|[{'type',98,'list',[{'type',98,'percept_option',[]}]}]]}]]}|[{'type',99,'union',[{'type',99,'tuple',[{'atom',99,'ok'}|[{'type',99,'port',[]}]]}|[{'type',99,'tuple',[{'atom',99,'already_started'}|[{'type',99,'port',[]}]]}]]}]]}]}],
		%% Line 107
		'spec' =
		    %% Line 107
		    [{{'profile',3},[{'type',107,'fun',[{'type',107,'product',[{'ann_type',107,[{'var',107,'Filename'}|[{'remote_type',107,[{'atom',107,'file'}|[{'atom',107,'filename'}|[[]]]]}]]}|[{'ann_type',108,[{'var',108,'Entry'}|[{'type',108,'tuple',[{'type',108,'atom',[]}|[{'type',108,'atom',[]}|[{'type',108,'list',[]}]]]}]]}|[{'ann_type',109,[{'var',109,'Options'}|[{'type',109,'list',[{'type',109,'percept_option',[]}]}]]}]]]}|[{'type',110,'union',[{'atom',110,'ok'}|[{'type',110,'tuple',[{'atom',110,'already_started'}|[{'type',110,'port',[]}]]}|[{'type',110,'tuple',[{'atom',110,'error'}|[{'atom',110,'not_started'}]]}]]]}]]}]}],
		%% Line 115
		'spec' =
		    %% Line 115
		    [{{'stop_profile',0},[{'type',115,'fun',[{'type',115,'product',[]}|[{'type',115,'union',[{'atom',115,'ok'}|[{'type',115,'tuple',[{'atom',115,'error'}|[{'atom',115,'not_started'}]]}]]}]]}]}],
		%% Line 126
		'spec' =
		    %% Line 126
		    [{{'analyze',1},[{'type',126,'fun',[{'type',126,'product',[{'ann_type',126,[{'var',126,'Filename'}|[{'remote_type',126,[{'atom',126,'file'}|[{'atom',126,'filename'}|[[]]]]}]]}]}|[{'type',127,'union',[{'atom',127,'ok'}|[{'type',127,'tuple',[{'atom',127,'error'}|[{'type',127,'any',[]}]]}]]}]]}]}],
		%% Line 143
		'spec' =
		    %% Line 143
		    [{{'start_webserver',0},[{'type',143,'fun',[{'type',143,'product',[]}|[{'type',144,'union',[{'type',144,'tuple',[{'atom',144,'started'}|[{'type',144,'string',[]}|[{'type',144,'pos_integer',[]}]]]}|[{'type',144,'tuple',[{'atom',144,'error'}|[{'type',144,'any',[]}]]}]]}]]}]}],
		%% Line 156
		'spec' =
		    %% Line 156
		    [{{'start_webserver',1},[{'type',156,'fun',[{'type',156,'product',[{'ann_type',156,[{'var',156,'Port'}|[{'type',156,'non_neg_integer',[]}]]}]}|[{'type',157,'union',[{'type',157,'tuple',[{'atom',157,'started'}|[{'type',157,'string',[]}|[{'type',157,'pos_integer',[]}]]]}|[{'type',157,'tuple',[{'atom',157,'error'}|[{'type',157,'any',[]}]]}]]}]]}]}]]
'start'/2 =
    %% Line 65
    fun (_cor1,_cor0) ->
	%% Line 67
	apply 'start_webserver'/1
	    (0)
'stop'/1 =
    %% Line 73
    fun (_cor0) ->
	%% Line 75
	apply 'stop_webserver'/1
	    (0)
'profile'/1 =
    %% Line 91
    fun (_cor0) ->
	%% Line 92
	call 'percept_profile':'start'
	    (_cor0, ['procs'])
'profile'/2 =
    %% Line 101
    fun (_cor1,_cor0) ->
	%% Line 102
	call 'percept_profile':'start'
	    (_cor1, _cor0)
'profile'/3 =
    %% Line 112
    fun (_cor2,_cor1,_cor0) ->
	%% Line 113
	call 'percept_profile':'start'
	    (_cor2, _cor1, _cor0)
'stop_profile'/0 =
    %% Line 120
    fun () ->
	%% Line 121
	call 'percept_profile':'stop'
	    ()
'analyze'/1 =
    %% Line 129
    fun (_cor0) ->
	%% Line 130
	case call 'percept_db':'start'
		 () of
	  %% Line 131
	  <{'started',DB}> when 'true' ->
	      %% Line 132
	      apply 'parse_and_insert'/2
		  (_cor0, DB)
	  %% Line 133
	  <{'restarted',DB}> when 'true' ->
	      %% Line 134
	      apply 'parse_and_insert'/2
		  (_cor0, DB)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'start_webserver'/0 =
    %% Line 146
    fun () ->
	%% Line 147
	apply 'start_webserver'/1
	    (0)
'start_webserver'/1 =
    %% Line 159
    fun (_cor0) ->
	case _cor0 of
	  <Port>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      do  %% Line 160
		  call 'application':'load'
		      ('percept')
		  %% Line 161
		  case call 'erlang':'whereis'
			   ('percept_httpd') of
		    %% Line 162
		    <'undefined'> when 'true' ->
			%% Line 163
			case apply 'get_webserver_config'/2
				 ([112|[101|[114|[99|[101|[112|[116]]]]]]], Port) of
			  <{'ok',Config}> when 'true' ->
			      do  %% Line 164
				  call 'inets':'start'
				      ()
				  %% Line 165
				  case call 'inets':'start'
					   ('httpd', Config) of
				    %% Line 166
				    <{'ok',Pid}> when 'true' ->
					let <_cor2> =
					    %% Line 167
					    call 'inets':'services_info'
						()
					in  let <AssignedPort> =
						%% Line 167
						apply 'find_service_port_from_pid'/2
						    (_cor2, Pid)
					    in  %% Line 168
						case call 'inet':'gethostname'
							 () of
						  <{'ok',Host}> when 'true' ->
						      let <_cor5> =
							  %% Line 170
							  ( fun () ->
								apply 'service_memory'/1
								    ({Pid,AssignedPort,Host})
							    -| [{'id',{0,0,'-start_webserver/1-fun-0-'}}] )
						      in  let <Mem> =
							      %% Line 170
							      call 'erlang':'spawn'
								  (_cor5)
							  in  do  %% Line 171
								  call 'erlang':'register'
								      ('percept_httpd', Mem)
								  %% Line 172
								  {'started',Host,AssignedPort}
						  ( <_cor4> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor4})
						    -| ['compiler_generated'] )
						end
				    %% Line 173
				    <{'error',Reason}> when 'true' ->
					%% Line 174
					{'error',{'inets',Reason}}
				    ( <_cor7> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor7})
				      -| ['compiler_generated'] )
				  end
			  ( <_cor1> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor1})
			    -| ['compiler_generated'] )
			end
		    %% Line 176
		    <_cor10> when 'true' ->
			%% Line 177
			{'error','already_started'}
		  end
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'start_webserver',1}}] )
	    -| ['compiler_generated'] )
	end
'stop_webserver'/0 =
    %% Line 183
    fun () ->
	%% Line 184
	case call 'erlang':'whereis'
		 ('percept_httpd') of
	  %% Line 185
	  <'undefined'> when 'true' ->
	      %% Line 186
	      {'error','not_started'}
	  %% Line 187
	  <Pid> when 'true' ->
	      %% Line 188
	      apply 'do_stop'/2
		  ([], Pid)
	end
'do_stop'/2 =
    %% Line 191
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Pid> when 'true' ->
	      let <_cor2> =
		  %% Line 192
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 192
		      call 'erlang':'!'
			  (Pid, {_cor2,'get_port'})
		      let <_cor3> =
			  %% Line 193
			  receive
			    <P> when 'true' ->
				P
			  after 'infinity' ->
			    'true'
		      in  %% Line 194
			  apply 'do_stop'/2
			      (_cor3, Pid)
	  %% Line 195
	  <Port,[]> when 'true' ->
	      %% Line 196
	      case call 'erlang':'whereis'
		       ('percept_httpd') of
		%% Line 197
		<'undefined'> when 'true' ->
		    %% Line 198
		    {'error','not_started'}
		%% Line 199
		<Pid> when 'true' ->
		    %% Line 200
		    apply 'do_stop'/2
			(Port, Pid)
	      end
	  %% Line 202
	  <Port,Pid> when 'true' ->
	      let <_cor6> =
		  %% Line 203
		  call 'inets':'services_info'
		      ()
	      in  %% Line 203
		  case apply 'find_service_pid_from_port'/2
			   (_cor6, Port) of
		    %% Line 204
		    <'undefined'> when 'true' ->
			%% Line 205
			{'error','not_started'}
		    %% Line 206
		    <Pid2> when 'true' ->
			do  %% Line 207
			    call 'erlang':'!'
				(Pid, 'quit')
			    %% Line 208
			    call 'inets':'stop'
				('httpd', Pid2)
		  end
	end
'stop_webserver'/1 =
    %% Line 215
    fun (_cor0) ->
	%% Line 216
	apply 'do_stop'/2
	    (_cor0, [])
'parse_and_insert'/2 =
    %% Line 226
    fun (_cor1,_cor0) ->
	do  %% Line 227
	    call 'io':'format'
		([80|[97|[114|[115|[105|[110|[103|[58|[32|[126|[112|[32|[126|[110]]]]]]]]]]]]]], [_cor1|[]])
	    let <T0> =
		%% Line 228
		call 'erlang':'now'
		    ()
	    in  let <_cor3> =
		    %% Line 229
		    call 'erlang':'self'
			()
		in  let <_cor4> =
			%% Line 229
			apply 'mk_trace_parser'/1
			    (_cor3)
		    in  let <Pid> =
			    %% Line 229
			    call 'dbg':'trace_client'
				('file', _cor1, _cor4)
			in  let <Ref> =
				%% Line 230
				call 'erlang':'monitor'
				    ('process', Pid)
			    in  %% Line 231
				apply 'parse_and_insert_loop'/5
				    (_cor1, Pid, Ref, _cor0, T0)
'parse_and_insert_loop'/5 =
    %% Line 233
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 234
	receive
	  %% Line 235
	  <{'DOWN',_cor17,'process',_cor18,'noproc'}>
	      when let <_cor19> =
		    call 'erlang':'=:='
			(_cor17, _cor2)
		in  let <_cor20> =
			call 'erlang':'=:='
			    (_cor18, _cor3)
		    in  call 'erlang':'and'
			    (_cor19, _cor20) ->
	      do  %% Line 236
		  call 'io':'format'
		      ([73|[110|[99|[111|[114|[114|[101|[99|[116|[32|[102|[105|[108|[101|[32|[111|[114|[32|[109|[97|[108|[102|[111|[114|[109|[101|[100|[32|[116|[114|[97|[99|[101|[32|[102|[105|[108|[101|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor4|[]])
		  %% Line 237
		  {'error','file'}
	  %% Line 238
	  <{'parse_complete',{_cor21,Count}}>
	      when call 'erlang':'=:='
		    (_cor21,
		     _cor3) ->
	      do  %% Line 239
		  receive
		    <{'DOWN',_cor22,'process',_cor23,'normal'}>
			when let <_cor24> =
			      call 'erlang':'=:='
				  (_cor22, _cor2)
			  in  let <_cor25> =
				  call 'erlang':'=:='
				      (_cor23, _cor3)
			      in  call 'erlang':'and'
				      (_cor24, _cor25) ->
			'ok'
		  after 0 ->
		    'ok'
		  do  %% Line 240
		      call 'erlang':'!'
			  (_cor1, {'action','consolidate'})
		      let <T1> =
			  %% Line 241
			  call 'erlang':'now'
			      ()
		      in  let <_cor6> =
			      %% Line 242
			      call 'timer':'now_diff'
				  (T1, _cor0)
			  in  let <_cor7> =
				  %% Line 242
				  call 'erlang':'/'
				      (_cor6, 1000000)
			      in  do  %% Line 242
				      call 'io':'format'
					  ([80|[97|[114|[115|[101|[100|[32|[126|[112|[32|[101|[110|[116|[114|[105|[101|[115|[32|[105|[110|[32|[126|[112|[32|[115|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Count|[_cor7|[]]])
				      let <_cor8> =
					  %% Line 243
					  call 'percept_db':'select'
					      ({'information','procs'})
				      in  let <_cor9> =
					      %% Line 243
					      call 'erlang':'length'
						  (_cor8)
					  in  do  %% Line 243
						  call 'io':'format'
						      ([32|[32|[32|[32|[126|[112|[32|[99|[114|[101|[97|[116|[101|[100|[32|[112|[114|[111|[99|[101|[115|[115|[101|[115|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor9|[]])
						  let <_cor10> =
						      %% Line 244
						      call 'percept_db':'select'
							  ({'information','ports'})
						  in  let <_cor11> =
							  %% Line 244
							  call 'erlang':'length'
							      (_cor10)
						      in  do  %% Line 244
							      call 'io':'format'
								  ([32|[32|[32|[32|[126|[112|[32|[111|[112|[101|[110|[101|[100|[32|[112|[111|[114|[116|[115|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]], [_cor11|[]])
							      %% Line 245
							      'ok'
	  %% Line 246
	  <{'DOWN',_cor26,'process',_cor27,'normal'}>
	      when let <_cor28> =
		    call 'erlang':'=:='
			(_cor26, _cor2)
		in  let <_cor29> =
			call 'erlang':'=:='
			    (_cor27, _cor3)
		    in  call 'erlang':'and'
			    (_cor28, _cor29) ->
	      apply 'parse_and_insert_loop'/5
		  (_cor4, _cor3, _cor2, _cor1, _cor0)
	  %% Line 247
	  <{'DOWN',_cor30,'process',_cor31,Reason}>
	      when let <_cor32> =
		    call 'erlang':'=:='
			(_cor30, _cor2)
		in  let <_cor33> =
			call 'erlang':'=:='
			    (_cor31, _cor3)
		    in  call 'erlang':'and'
			    (_cor32, _cor33) ->
	      {'error',Reason}
	after 'infinity' ->
	  'true'
'mk_trace_parser'/1 =
    %% Line 250
    fun (_cor0) ->
	%% Line 251
	{( 'trace_parser'/2
	   -| [{'id',{0,0,'-mk_trace_parser/1-fun-0-'}}] ),{0,_cor0}}
'trace_parser'/2 =
    %% Line 253
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'end_of_trace',{Count,Pid}> when 'true' ->
	      let <_cor2> =
		  %% Line 254
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 254
		      call 'erlang':'!'
			  (Pid, {'parse_complete',{_cor2,Count}})
		      %% Line 255
		      receive
			%% Line 256
			<{'ack',_cor6}>
			    when call 'erlang':'=:='
				  (_cor6,
				   Pid) ->
			    %% Line 257
			    'ok'
		      after 'infinity' ->
			'true'
	  %% Line 259
	  <Trace,{Count,Pid}> when 'true' ->
	      do  %% Line 260
		  call 'percept_db':'insert'
		      (Trace)
		  let <_cor3> =
		      %% Line 261
		      call 'erlang':'+'
			  (Count, 1)
		  in  %% Line 261
		      {_cor3,Pid}
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'trace_parser',2}}] )
	    -| ['compiler_generated'] )
	end
'find_service_pid_from_port'/2 =
    %% Line 263
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_cor5> when 'true' ->
	      %% Line 264
	      'undefined'
	  %% Line 265
	  <[{_cor6,Pid,Options}|Services],Port> when 'true' ->
	      %% Line 266
	      case call 'lists':'keyfind'
		       ('port', 1, Options) of
		%% Line 267
		<'false'> when 'true' ->
		    %% Line 268
		    apply 'find_service_pid_from_port'/2
			(Services, Port)
		%% Line 269
		<{'port',_cor7}>
		    when call 'erlang':'=:='
			  (_cor7,
			   Port) ->
		    %% Line 270
		    Pid
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'find_service_pid_from_port',2}}] )
	    -| ['compiler_generated'] )
	end
'find_service_port_from_pid'/2 =
    %% Line 273
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_cor5> when 'true' ->
	      %% Line 274
	      'undefined'
	  %% Line 275
	  <[{_cor6,Pid,Options}|_cor7],_cor8>
	      when call 'erlang':'=:='
		    (_cor8,
		     Pid) ->
	      %% Line 276
	      case call 'lists':'keyfind'
		       ('port', 1, Options) of
		%% Line 277
		<'false'> when 'true' ->
		    %% Line 278
		    'undefined'
		%% Line 279
		<{'port',Port}> when 'true' ->
		    %% Line 280
		    Port
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 282
	  <[{_cor9,_cor10,_cor11}|Services],Pid> when 'true' ->
	      %% Line 283
	      apply 'find_service_port_from_pid'/2
		  (Services, Pid)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'find_service_port_from_pid',2}}] )
	    -| ['compiler_generated'] )
	end
'service_memory'/1 =
    %% Line 287
    fun (_cor0) ->
	case _cor0 of
	  <{Pid,Port,Host}> when 'true' ->
	      %% Line 288
	      receive
		%% Line 289
		<'quit'> when 'true' ->
		    %% Line 290
		    'ok'
		%% Line 291
		<{Reply,'get_port'}> when 'true' ->
		    do  %% Line 292
			call 'erlang':'!'
			    (Reply, Port)
			%% Line 293
			apply 'service_memory'/1
			    ({Pid,Port,Host})
		%% Line 294
		<{Reply,'get_host'}> when 'true' ->
		    do  %% Line 295
			call 'erlang':'!'
			    (Reply, Host)
			%% Line 296
			apply 'service_memory'/1
			    ({Pid,Port,Host})
		%% Line 297
		<{Reply,'get_pid'}> when 'true' ->
		    do  %% Line 298
			call 'erlang':'!'
			    (Reply, Pid)
			%% Line 299
			apply 'service_memory'/1
			    ({Pid,Port,Host})
	      after 'infinity' ->
		'true'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'service_memory',1}}] )
	    -| ['compiler_generated'] )
	end
'get_webserver_config'/2 =
    %% Line 304
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Servername,Port>
	      when let <_cor2> =
		    call 'erlang':'is_list'
			(Servername)
		in  let <_cor3> =
			call 'erlang':'is_integer'
			    (Port)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <Path> =
		  %% Line 305
		  call 'code':'priv_dir'
		      ('percept')
	      in  let <Root> =
		      %% Line 306
		      call 'filename':'join'
			  ([Path|[[115|[101|[114|[118|[101|[114|[95|[114|[111|[111|[116]]]]]]]]]]]]])
		  in  let <MimeTypesFile> =
			  %% Line 307
			  call 'filename':'join'
			      ([Root|[[99|[111|[110|[102]]]]|[[109|[105|[109|[101|[46|[116|[121|[112|[101|[115]]]]]]]]]]]]])
		      in  %% Line 308
			  case call 'httpd_conf':'load_mime_types'
				   (MimeTypesFile) of
			    <{'ok',MimeTypes}> when 'true' ->
				let <_cor8> =
				    %% Line 312
				    call 'filename':'join'
					([Root|[[104|[116|[100|[111|[99|[115]]]]]]]])
				in  let <_cor9> =
					%% Line 317
					call 'filename':'join'
					    ([Root|[[99|[103|[105|[45|[98|[105|[110]]]]]]]]])
				    in  let <_cor10> =
					    %% Line 318
					    call 'filename':'join'
						([Root|[[115|[99|[114|[105|[112|[116|[115]]]]]]]]])
					in  let <_cor11> =
						%% Line 318
						call 'erlang':'++'
						    (_cor10, [47])
					    in  let <_cor12> =
						    %% Line 319
						    call 'filename':'join'
							([Root|[[105|[109|[97|[103|[101|[115]]]]]]]])
						in  let <_cor13> =
							%% Line 319
							call 'erlang':'++'
							    (_cor12, [47])
						    in  let <_cor14> =
							    %% Line 320
							    call 'filename':'join'
								([Root|[[99|[115|[115]]]]])
							in  let <_cor15> =
								%% Line 320
								call 'erlang':'++'
								    (_cor14, [47])
							    in  let <Config> =
								    %% Line 309
								    [%% Line 311
								     {'server_root',Root}|%% Line 312
											  [{'document_root',_cor8}|%% Line 315
														   [{'eval_script_alias',{[47|[101|[118|[97|[108]]]]],['io']}}|%% Line 316
																					       [{'erl_script_alias',{[47|[99|[103|[105|[45|[98|[105|[110]]]]]]]],['percept_graph'|['percept_html'|['io']]]}}|%% Line 317
																																			     [{'script_alias',{[47|[99|[103|[105|[45|[98|[105|[110|[47]]]]]]]]],_cor9}}|%% Line 318
																																													[{'alias',{[47|[106|[97|[118|[97|[115|[99|[114|[105|[112|[116|[47]]]]]]]]]]]],_cor11}}|%% Line 319
																																																							       [{'alias',{[47|[105|[109|[97|[103|[101|[115|[47]]]]]]]],_cor13}}|%% Line 320
																																																																[{'alias',{[47|[99|[115|[115|[47]]]]],_cor15}}|%% Line 327
																																																																					       [{'default_type',[116|[101|[120|[116|[47|[112|[108|[97|[105|[110]]]]]]]]]]}|%% Line 328
																																																																															   [{'directory_index',[[105|[110|[100|[101|[120|[46|[104|[116|[109|[108]]]]]]]]]]]}|%% Line 329
																																																																																									     [{'mime_types',MimeTypes}|%% Line 330
																																																																																												       [{'modules',['mod_alias'|['mod_esi'|['mod_actions'|['mod_cgi'|['mod_include'|['mod_dir'|['mod_get'|['mod_head']]]]]]]]}|%% Line 341
																																																																																																											       [{'com_type','ip_comm'}|%% Line 342
																																																																																																														       [{'server_name',Servername}|%% Line 343
																																																																																																																		   [{'bind_address','any'}|%% Line 344
																																																																																																																					   [{'port',Port}|[]]]]]]]]]]]]]]]]]
								in  %% Line 345
								    {'ok',Config}
			    ( <_cor7> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor7})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17})
		  -| [{'function_name',{'get_webserver_config',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('percept')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('percept', _cor0)
end