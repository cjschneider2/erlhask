module 'egd_primitives' ['arc'/4,
			 'arc'/5,
			 'arc_to_edges'/3,
			 'color'/1,
			 'convex_hull'/1,
			 'create'/2,
			 'edges'/1,
			 'filledEllipse'/4,
			 'filledRectangle'/4,
			 'filledTriangle'/5,
			 'info'/1,
			 'line'/4,
			 'line'/5,
			 'module_info'/0,
			 'module_info'/1,
			 'object_info'/1,
			 'pixel'/3,
			 'polygon'/3,
			 'rectangle'/4,
			 'rgb_float2byte'/1,
			 'text'/5]
    attributes [%% Line 19
		'type' =
		    %% Line 19
		    [{'rgba_float',{'type',19,'tuple',[{'type',19,'float',[]}|[{'type',19,'float',[]}|[{'type',19,'float',[]}|[{'type',19,'float',[]}]]]]},[]}],
		%% Line 20
		'type' =
		    %% Line 20
		    [{'rgba_byte',{'type',20,'tuple',[{'type',20,'byte',[]}|[{'type',20,'byte',[]}|[{'type',20,'byte',[]}|[{'type',20,'byte',[]}]]]]},[]}],
		%% Line 21
		'type' =
		    %% Line 21
		    [{'rgb',{'type',21,'tuple',[{'type',21,'byte',[]}|[{'type',21,'byte',[]}|[{'type',21,'byte',[]}]]]},[]}],
		%% Line 23
		'type' =
		    %% Line 23
		    [{{'record','image_object'},[{'record_field',24,{'atom',24,'type'}}|[{'record_field',25,{'atom',25,'points'},{'nil',25}}|[{'record_field',26,{'atom',26,'span'}}|[{'record_field',27,{'atom',27,'internals'}}|[{'record_field',28,{'atom',28,'intervals'}}|[{'record_field',29,{'atom',29,'color'}}]]]]]],[]}],
		%% Line 31
		'type' =
		    %% Line 31
		    [{{'record','image'},[{'record_field',32,{'atom',32,'width'}}|[{'record_field',33,{'atom',33,'height'}}|[{'record_field',34,{'atom',34,'objects'},{'nil',34}}|[{'record_field',35,{'atom',35,'background'},{'tuple',35,[{'float',35,1.00000000000000000000e+00}|[{'float',35,1.00000000000000000000e+00}|[{'float',35,1.00000000000000000000e+00}|[{'float',35,1.00000000000000000000e+00}]]]]}}|[{'record_field',36,{'atom',36,'image'}}]]]]],[]}]]
'info'/1 =
    %% Line 55
    fun (_cor0) ->
	%% Line 56
	( case _cor0 of
	    ( <( {'image',_rec0,_cor17,_cor18,_cor19,_cor20}
		 -| ['compiler_generated'] )> when 'true' ->
		  do  %% Line 57
		      call 'io':'format'
			  ([68|[105|[109|[101|[110|[115|[105|[111|[110|[115|[58|[32|[126|[112|[32|[120|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]], [_rec0|[_cor17|[]]])
		      let <_cor9> =
			  %% Line 58
			  call 'erlang':'length'
			      (_cor18)
		      in  do  %% Line 58
			      call 'io':'format'
				  ([78|[117|[109|[98|[101|[114|[32|[111|[102|[32|[105|[109|[97|[103|[101|[32|[111|[98|[106|[101|[99|[116|[115|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor9|[]])
			      let <TotalPoints> =
				  %% Line 59
				  apply 'info_objects'/2
				      (_cor18, 0)
			      in  let <_cor14> =
				      %% Line 60
				      call 'erlang':'*'
					  (100, TotalPoints)
				  in  let <_cor13> =
					  %% Line 60
					  call 'erlang':'*'
					      (_rec0, _cor17)
				      in  let <_cor15> =
					      %% Line 60
					      call 'erlang':'/'
						  (_cor14, _cor13)
					  in  do  %% Line 60
						  call 'io':'format'
						      ([84|[111|[116|[97|[108|[32|[112|[111|[105|[110|[116|[115|[58|[32|[126|[112|[32|[91|[126|[112|[32|[37|[93|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]], [TotalPoints|[_cor15|[]]])
						  %% Line 61
						  'ok'
	      -| ['compiler_generated'] )
	    ( <_cor21> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','image'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'info_objects'/2 =
    %% Line 63
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],N> when 'true' ->
	      N
	  %% Line 64
	  <[O|Os],N> when 'true' ->
	      %% Line 65
	      ( case O of
		  ( <( {'image_object',_cor8,_rec4,_cor9,_cor10,_cor11,_cor12}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Points> =
			    call 'erlang':'length'
				(_rec4)
			in  let <_cor5> =
				%% Line 66
				call 'erlang':'+'
				    (N, Points)
			    in  %% Line 66
				apply 'info_objects'/2
				    (Os, _cor5)
		    -| ['compiler_generated'] )
		  ( <_cor13> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','image_object'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'info_objects',2}}] )
	    -| ['compiler_generated'] )
	end
'object_info'/1 =
    %% Line 68
    fun (_cor0) ->
	%% Line 69
	( case _cor0 of
	    ( <( {'image_object',_rec5,_cor11,_cor12,_cor13,_cor14,_cor15}
		 -| ['compiler_generated'] )> when 'true' ->
		  do  call 'io':'format'
			  ([79|[98|[106|[101|[99|[116|[32|[105|[110|[102|[111|[114|[109|[97|[116|[105|[111|[110|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]], [_rec5|[]])
		      let <_cor5> =
			  %% Line 70
			  call 'erlang':'length'
			      (_cor11)
		      in  do  %% Line 70
			      call 'io':'format'
				  ([45|[32|[78|[117|[109|[98|[101|[114|[32|[111|[102|[32|[112|[111|[105|[110|[116|[115|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]], [_cor5|[]])
			      do  %% Line 71
				  call 'io':'format'
				      ([45|[32|[32|[32|[32|[32|[66|[111|[117|[110|[100|[105|[110|[103|[32|[98|[111|[120|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]], [_cor12|[]])
				  do  %% Line 72
				      call 'io':'format'
					  ([45|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[67|[111|[108|[111|[114|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]], [_cor15|[]])
				      %% Line 73
				      'ok'
	      -| ['compiler_generated'] )
	    ( <_cor16> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','image_object'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'line'/4 =
    %% Line 77
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 82
	    apply 'span'/1
		([_cor2|[_cor1|[]]])
	in  %% Line 83
	    ( case _cor3 of
		( <( {'image',_cor14,_cor15,_rec11,_cor16,_cor17}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <_rec9> =
			  [{'image_object','line',[_cor2|[_cor1|[]]],_cor4,'undefined','undefined',_cor0}|_rec11]
		      in  call 'erlang':'setelement'
			      (4, _cor3, _rec9)
		  -| ['compiler_generated'] )
		( <_cor18> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','image'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'line'/5 =
    %% Line 85
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 90
	    apply 'span'/1
		([_cor3|[_cor2|[]]])
	in  %% Line 92
	    ( case _cor4 of
		( <( {'image',_cor16,_cor17,_rec14,_cor18,_cor19}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <_rec12> =
			  [{'image_object','line',[_cor3|[_cor2|[]]],_cor5,_cor1,'undefined',_cor0}|_rec14]
		      in  call 'erlang':'setelement'
			      (4, _cor4, _rec12)
		  -| ['compiler_generated'] )
		( <_cor20> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','image'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'arc'/4 =
    %% Line 94
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <I,Sp = {Sx,Sy},Ep = {Ex,Ey},Color> when 'true' ->
	      let <X> =
		  %% Line 95
		  call 'erlang':'-'
		      (Ex, Sx)
	      in  let <Y> =
		      %% Line 96
		      call 'erlang':'-'
			  (Ey, Sy)
		  in  let <_cor7> =
			  %% Line 97
			  call 'erlang':'*'
			      (X, X)
		      in  let <_cor6> =
			      %% Line 97
			      call 'erlang':'*'
				  (Y, Y)
			  in  let <_cor8> =
				  %% Line 97
				  call 'erlang':'+'
				      (_cor7, _cor6)
			      in  let <_cor9> =
				      %% Line 97
				      call 'math':'sqrt'
					  (_cor8)
				  in  let <R> =
					  %% Line 97
					  call 'erlang':'/'
					      (_cor9, 2)
				      in  %% Line 98
					  apply 'arc'/5
					      (I, Sp, Ep, R, Color)
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'arc',4}}] )
	    -| ['compiler_generated'] )
	end
'arc'/5 =
    %% Line 100
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor17> =
	    %% Line 101
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor7) ->
			  case _cor7 of
			    <[%% Line 105
			      {X,Y}|_cor6]> when 'true' ->
				let <_cor9> =
				    %% Line 102
				    call 'erlang':'+'
					(X, _cor1)
				in  let <_cor8> =
					%% Line 102
					call 'erlang':'+'
					    (Y, _cor1)
				    in  let <_cor11> =
					    %% Line 103
					    call 'erlang':'+'
						(X, _cor1)
					in  let <_cor10> =
						%% Line 103
						call 'erlang':'-'
						    (Y, _cor1)
					    in  let <_cor13> =
						    %% Line 104
						    call 'erlang':'-'
							(X, _cor1)
						in  let <_cor12> =
							%% Line 104
							call 'erlang':'+'
							    (Y, _cor1)
						    in  let <_cor15> =
							    %% Line 105
							    call 'erlang':'-'
								(X, _cor1)
							in  let <_cor14> =
								%% Line 105
								call 'erlang':'-'
								    (Y, _cor1)
							    in  let <_cor16> =
								    %% Line 105
								    apply 'lc$^0'/1
									(_cor6)
								in  ( [%% Line 102
								       [{_cor9,_cor8}|%% Line 103
										      [{_cor11,_cor10}|%% Line 104
												       [{_cor13,_cor12}|%% Line 105
															[{_cor15,_cor14}|[]]]]]|_cor16]
								      -| ['compiler_generated'] )
			    ( <[_cor5|_cor6]> when 'true' ->
				  %% Line 105
				  apply 'lc$^0'/1
				      (_cor6)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor7> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor7})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (%% Line 105
		       [_cor3|[_cor2|[]]])
	      -| ['list_comprehension'] )
	in  let <SpanPts> =
		%% Line 101
		call 'lists':'flatten'
		    (_cor17)
	    in  let <_cor19> =
		    %% Line 112
		    apply 'span'/1
			(SpanPts)
		in  %% Line 113
		    ( case _cor4 of
			( <( {'image',_cor30,_cor31,_rec17,_cor32,_cor33}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_rec15> =
				  [{'image_object','arc',[_cor3|[_cor2|[]]],_cor19,_cor1,'undefined',_cor0}|_rec17]
			      in  call 'erlang':'setelement'
				      (4, _cor4, _rec15)
			  -| ['compiler_generated'] )
			( <_cor34> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','image'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
'pixel'/3 =
    %% Line 115
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 120
	    apply 'span'/1
		([_cor1|[]])
	in  %% Line 121
	    ( case _cor2 of
		( <( {'image',_cor12,_cor13,_rec20,_cor14,_cor15}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <_rec18> =
			  [{'image_object','pixel',[_cor1|[]],_cor3,'undefined','undefined',_cor0}|_rec20]
		      in  call 'erlang':'setelement'
			      (4, _cor2, _rec18)
		  -| ['compiler_generated'] )
		( <_cor16> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','image'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'rectangle'/4 =
    %% Line 123
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 128
	    apply 'span'/1
		([_cor2|[_cor1|[]]])
	in  %% Line 129
	    ( case _cor3 of
		( <( {'image',_cor14,_cor15,_rec23,_cor16,_cor17}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <_rec21> =
			  [{'image_object','rectangle',[_cor2|[_cor1|[]]],_cor4,'undefined','undefined',_cor0}|_rec23]
		      in  call 'erlang':'setelement'
			      (4, _cor3, _rec21)
		  -| ['compiler_generated'] )
		( <_cor18> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','image'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'filledRectangle'/4 =
    %% Line 131
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 136
	    apply 'span'/1
		([_cor2|[_cor1|[]]])
	in  %% Line 137
	    ( case _cor3 of
		( <( {'image',_cor14,_cor15,_rec26,_cor16,_cor17}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <_rec24> =
			  [{'image_object','filled_rectangle',[_cor2|[_cor1|[]]],_cor4,'undefined','undefined',_cor0}|_rec26]
		      in  call 'erlang':'setelement'
			      (4, _cor3, _rec24)
		  -| ['compiler_generated'] )
		( <_cor18> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','image'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'filledEllipse'/4 =
    %% Line 139
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 140
	case apply 'span'/1
		 ([_cor2|[_cor1|[]]]) of
	  <Span = {X0,Y0,X1,Y1}> when 'true' ->
	      let <_cor5> =
		  %% Line 141
		  call 'erlang':'-'
		      (X1, X0)
	      in  let <Xr> =
		      %% Line 141
		      call 'erlang':'/'
			  (_cor5, 2)
		  in  let <_cor7> =
			  %% Line 142
			  call 'erlang':'-'
			      (Y1, Y0)
		      in  let <Yr> =
			      %% Line 142
			      call 'erlang':'/'
				  (_cor7, 2)
			  in  let <_cor9> =
				  %% Line 143
				  call 'erlang':'-'
				      (X0)
			      in  let <Xp> =
				      %% Line 143
				      call 'erlang':'-'
					  (_cor9, Xr)
				  in  let <_cor11> =
					  %% Line 144
					  call 'erlang':'-'
					      (Y0)
				      in  let <Yp> =
					      %% Line 144
					      call 'erlang':'-'
						  (_cor11, Yr)
					  in  let <_cor14> =
						  %% Line 150
						  call 'erlang':'*'
						      (Xr, Xr)
					      in  let <_cor13> =
						      %% Line 150
						      call 'erlang':'*'
							  (Yr, Yr)
						  in  %% Line 151
						      ( case _cor3 of
							  ( <( {'image',_cor24,_cor25,_rec29,_cor26,_cor27}
							       -| ['compiler_generated'] )> when 'true' ->
								let <_rec27> =
								    [{'image_object','filled_ellipse',[_cor2|[_cor1|[]]],Span,{Xp,Yp,_cor14,_cor13},'undefined',_cor0}|_rec29]
								in  call 'erlang':'setelement'
									(4, _cor3, _rec27)
							    -| ['compiler_generated'] )
							  ( <_cor28> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {'badrecord','image'}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
							-| ['compiler_generated'] )
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'filledTriangle'/5 =
    %% Line 153
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 158
	    apply 'span'/1
		([_cor3|[_cor2|[_cor1|[]]]])
	in  %% Line 159
	    ( case _cor4 of
		( <( {'image',_cor16,_cor17,_rec32,_cor18,_cor19}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <_rec30> =
			  [{'image_object','filled_triangle',[_cor3|[_cor2|[_cor1|[]]]],_cor5,'undefined','undefined',_cor0}|_rec32]
		      in  call 'erlang':'setelement'
			      (4, _cor4, _rec30)
		  -| ['compiler_generated'] )
		( <_cor20> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','image'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'polygon'/3 =
    %% Line 162
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 167
	    apply 'span'/1
		(_cor1)
	in  %% Line 168
	    ( case _cor2 of
		( <( {'image',_cor12,_cor13,_rec35,_cor14,_cor15}
		     -| ['compiler_generated'] )> when 'true' ->
		      let <_rec33> =
			  [{'image_object','polygon',_cor1,_cor3,'undefined','undefined',_cor0}|_rec35]
		      in  call 'erlang':'setelement'
			      (4, _cor2, _rec33)
		  -| ['compiler_generated'] )
		( <_cor16> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','image'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'create'/2 =
    %% Line 170
    fun (_cor1,_cor0) ->
	%% Line 171
	{'image',_cor1,_cor0,[],{1.00000000000000000000e+00,1.00000000000000000000e+00,1.00000000000000000000e+00,1.00000000000000000000e+00},'undefined'}
'color'/1 =
    %% Line 174
    fun (_cor0) ->
	case _cor0 of
	  <Color>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      let <_cor1> =
		  apply 'name_to_color'/1
		      ({Color,255})
	      in  apply 'rgba_byte2float'/1
		      (_cor1)
	  %% Line 175
	  <{Color,A}>
	      when call 'erlang':'is_atom'
		    (Color) ->
	      let <_cor2> =
		  apply 'name_to_color'/1
		      ({Color,A})
	      in  apply 'rgba_byte2float'/1
		      (_cor2)
	  %% Line 176
	  <{R,G,B}> when 'true' ->
	      apply 'rgba_byte2float'/1
		  ({R,G,B,255})
	  %% Line 177
	  <C> when 'true' ->
	      apply 'rgba_byte2float'/1
		  (C)
	end
'name_to_color'/1 =
    %% Line 180
    fun (_cor0) ->
	case _cor0 of
	  <{'black',A}> when 'true' ->
	      {0,0,0,A}
	  %% Line 181
	  <{'silver',A}> when 'true' ->
	      {192,192,192,A}
	  %% Line 182
	  <{'gray',A}> when 'true' ->
	      {128,128,128,A}
	  %% Line 183
	  <{'white',A}> when 'true' ->
	      {128,0,0,A}
	  %% Line 184
	  <{'maroon',A}> when 'true' ->
	      {255,0,0,A}
	  %% Line 185
	  <{'red',A}> when 'true' ->
	      {128,0,128,A}
	  %% Line 186
	  <{'purple',A}> when 'true' ->
	      {128,0,128,A}
	  %% Line 187
	  <{'fuchia',A}> when 'true' ->
	      {255,0,255,A}
	  %% Line 188
	  <{'green',A}> when 'true' ->
	      {0,128,0,A}
	  %% Line 189
	  <{'lime',A}> when 'true' ->
	      {0,255,0,A}
	  %% Line 190
	  <{'olive',A}> when 'true' ->
	      {128,128,0,A}
	  %% Line 191
	  <{'yellow',A}> when 'true' ->
	      {255,255,0,A}
	  %% Line 192
	  <{'navy',A}> when 'true' ->
	      {0,0,128,A}
	  %% Line 193
	  <{'blue',A}> when 'true' ->
	      {0,0,255,A}
	  %% Line 194
	  <{'teal',A}> when 'true' ->
	      {0,128,0,A}
	  %% Line 195
	  <{'aqua',A}> when 'true' ->
	      {0,255,155,A}
	  %% Line 198
	  <{'steelblue',A}> when 'true' ->
	      {70,130,180,A}
	  %% Line 199
	  <{'royalblue',A}> when 'true' ->
	      {4,22,144,A}
	  %% Line 200
	  <{'cornflowerblue',A}> when 'true' ->
	      {100,149,237,A}
	  %% Line 201
	  <{'lightsteelblue',A}> when 'true' ->
	      {176,196,222,A}
	  %% Line 202
	  <{'mediumslateblue',A}> when 'true' ->
	      {123,104,238,A}
	  %% Line 203
	  <{'slateblue',A}> when 'true' ->
	      {106,90,205,A}
	  %% Line 204
	  <{'darkslateblue',A}> when 'true' ->
	      {72,61,139,A}
	  %% Line 205
	  <{'midnightblue',A}> when 'true' ->
	      {25,25,112,A}
	  %% Line 206
	  <{'darkblue',A}> when 'true' ->
	      {0,0,139,A}
	  %% Line 207
	  <{'mediumblue',A}> when 'true' ->
	      {0,0,205,A}
	  %% Line 208
	  <{'dodgerblue',A}> when 'true' ->
	      {30,144,255,A}
	  %% Line 209
	  <{'deepskyblue',A}> when 'true' ->
	      {0,191,255,A}
	  %% Line 210
	  <{'lightskyblue',A}> when 'true' ->
	      {135,206,250,A}
	  %% Line 211
	  <{'skyblue',A}> when 'true' ->
	      {135,206,235,A}
	  %% Line 212
	  <{'lightblue',A}> when 'true' ->
	      {173,216,230,A}
	  %% Line 213
	  <{'powderblue',A}> when 'true' ->
	      {176,224,230,A}
	  %% Line 214
	  <{'azure',A}> when 'true' ->
	      {240,255,255,A}
	  %% Line 215
	  <{'lightcyan',A}> when 'true' ->
	      {224,255,255,A}
	  %% Line 216
	  <{'paleturquoise',A}> when 'true' ->
	      {175,238,238,A}
	  %% Line 217
	  <{'mediumturquoise',A}> when 'true' ->
	      {72,209,204,A}
	  %% Line 218
	  <{'lightseagreen',A}> when 'true' ->
	      {32,178,170,A}
	  %% Line 219
	  <{'darkcyan',A}> when 'true' ->
	      {0,139,139,A}
	  %% Line 220
	  <{'cadetblue',A}> when 'true' ->
	      {95,158,160,A}
	  %% Line 221
	  <{'darkturquoise',A}> when 'true' ->
	      {0,206,209,A}
	  %% Line 222
	  <{'cyan',A}> when 'true' ->
	      {0,255,255,A}
	  %% Line 223
	  <{'turquoise',A}> when 'true' ->
	      {64,224,208,A}
	  %% Line 224
	  <{'aquamarine',A}> when 'true' ->
	      {127,255,212,A}
	  %% Line 225
	  <{'mediumaquamarine',A}> when 'true' ->
	      {102,205,170,A}
	  %% Line 226
	  <{'darkseagreen',A}> when 'true' ->
	      {143,188,143,A}
	  %% Line 227
	  <{'mediumseagreen',A}> when 'true' ->
	      {60,179,113,A}
	  %% Line 228
	  <{'seagreen',A}> when 'true' ->
	      {46,139,87,A}
	  %% Line 229
	  <{'darkgreen',A}> when 'true' ->
	      {0,100,0,A}
	  %% Line 230
	  <{'forestgreen',A}> when 'true' ->
	      {34,139,34,A}
	  %% Line 231
	  <{'limegreen',A}> when 'true' ->
	      {50,205,50,A}
	  %% Line 232
	  <{'chartreuse',A}> when 'true' ->
	      {127,255,0,A}
	  %% Line 233
	  <{'lawngreen',A}> when 'true' ->
	      {124,252,0,A}
	  %% Line 234
	  <{'greenyellow',A}> when 'true' ->
	      {173,255,47,A}
	  %% Line 235
	  <{'yellowgreen',A}> when 'true' ->
	      {154,205,50,A}
	  %% Line 236
	  <{'palegreen',A}> when 'true' ->
	      {152,251,152,A}
	  %% Line 237
	  <{'lightgreen',A}> when 'true' ->
	      {144,238,144,A}
	  %% Line 238
	  <{'springgreen',A}> when 'true' ->
	      {0,255,127,A}
	  %% Line 239
	  <{'mediumspringgreen',A}> when 'true' ->
	      {0,250,154,A}
	  %% Line 240
	  <{'darkolivegreen',A}> when 'true' ->
	      {85,107,47,A}
	  %% Line 241
	  <{'olivedrab',A}> when 'true' ->
	      {107,142,35,A}
	  %% Line 242
	  <{'darkkhaki',A}> when 'true' ->
	      {189,183,107,A}
	  %% Line 243
	  <{'darkgoldenrod',A}> when 'true' ->
	      {184,134,11,A}
	  %% Line 244
	  <{'goldenrod',A}> when 'true' ->
	      {218,165,32,A}
	  %% Line 245
	  <{'gold',A}> when 'true' ->
	      {255,215,0,A}
	  %% Line 246
	  <{'khaki',A}> when 'true' ->
	      {240,230,140,A}
	  %% Line 247
	  <{'palegoldenrod',A}> when 'true' ->
	      {238,232,170,A}
	  %% Line 248
	  <{'blanchedalmond',A}> when 'true' ->
	      {255,235,205,A}
	  %% Line 249
	  <{'moccasin',A}> when 'true' ->
	      {255,228,181,A}
	  %% Line 250
	  <{'wheat',A}> when 'true' ->
	      {245,222,179,A}
	  %% Line 251
	  <{'navajowhite',A}> when 'true' ->
	      {255,222,173,A}
	  %% Line 252
	  <{'burlywood',A}> when 'true' ->
	      {222,184,135,A}
	  %% Line 253
	  <{'tan',A}> when 'true' ->
	      {210,180,140,A}
	  %% Line 254
	  <{'rosybrown',A}> when 'true' ->
	      {188,143,143,A}
	  %% Line 255
	  <{'sienna',A}> when 'true' ->
	      {160,82,45,A}
	  %% Line 256
	  <{'saddlebrown',A}> when 'true' ->
	      {139,69,19,A}
	  %% Line 257
	  <{'chocolate',A}> when 'true' ->
	      {210,105,30,A}
	  %% Line 258
	  <{'peru',A}> when 'true' ->
	      {205,133,63,A}
	  %% Line 259
	  <{'sandybrown',A}> when 'true' ->
	      {244,164,96,A}
	  %% Line 260
	  <{'darkred',A}> when 'true' ->
	      {139,0,0,A}
	  %% Line 261
	  <{'brown',A}> when 'true' ->
	      {165,42,42,A}
	  %% Line 262
	  <{'firebrick',A}> when 'true' ->
	      {178,34,34,A}
	  %% Line 263
	  <{'indianred',A}> when 'true' ->
	      {205,92,92,A}
	  %% Line 264
	  <{'lightcoral',A}> when 'true' ->
	      {240,128,128,A}
	  %% Line 265
	  <{'salmon',A}> when 'true' ->
	      {250,128,114,A}
	  %% Line 266
	  <{'darksalmon',A}> when 'true' ->
	      {233,150,122,A}
	  %% Line 267
	  <{'lightsalmon',A}> when 'true' ->
	      {255,160,122,A}
	  %% Line 268
	  <{'coral',A}> when 'true' ->
	      {255,127,80,A}
	  %% Line 269
	  <{'tomato',A}> when 'true' ->
	      {255,99,71,A}
	  %% Line 270
	  <{'darkorange',A}> when 'true' ->
	      {255,140,0,A}
	  %% Line 271
	  <{'orange',A}> when 'true' ->
	      {255,165,0,A}
	  %% Line 272
	  <{'orangered',A}> when 'true' ->
	      {255,69,0,A}
	  %% Line 273
	  <{'crimson',A}> when 'true' ->
	      {220,20,60,A}
	  %% Line 274
	  <{'deeppink',A}> when 'true' ->
	      {255,20,147,A}
	  %% Line 275
	  <{'fuchsia',A}> when 'true' ->
	      {255,0,255,A}
	  %% Line 276
	  <{'magenta',A}> when 'true' ->
	      {255,0,255,A}
	  %% Line 277
	  <{'hotpink',A}> when 'true' ->
	      {255,105,180,A}
	  %% Line 278
	  <{'lightpink',A}> when 'true' ->
	      {255,182,193,A}
	  %% Line 279
	  <{'pink',A}> when 'true' ->
	      {255,192,203,A}
	  %% Line 280
	  <{'palevioletred',A}> when 'true' ->
	      {219,112,147,A}
	  %% Line 281
	  <{'mediumvioletred',A}> when 'true' ->
	      {199,21,133,A}
	  %% Line 282
	  <{'darkmagenta',A}> when 'true' ->
	      {139,0,139,A}
	  %% Line 283
	  <{'mediumpurple',A}> when 'true' ->
	      {147,112,219,A}
	  %% Line 284
	  <{'blueviolet',A}> when 'true' ->
	      {138,43,226,A}
	  %% Line 285
	  <{'indigo',A}> when 'true' ->
	      {75,0,130,A}
	  %% Line 286
	  <{'darkviolet',A}> when 'true' ->
	      {148,0,211,A}
	  %% Line 287
	  <{'darkorchid',A}> when 'true' ->
	      {153,50,204,A}
	  %% Line 288
	  <{'mediumorchid',A}> when 'true' ->
	      {186,85,211,A}
	  %% Line 289
	  <{'orchid',A}> when 'true' ->
	      {218,112,214,A}
	  %% Line 290
	  <{'violet',A}> when 'true' ->
	      {238,130,238,A}
	  %% Line 291
	  <{'plum',A}> when 'true' ->
	      {221,160,221,A}
	  %% Line 292
	  <{'thistle',A}> when 'true' ->
	      {216,191,216,A}
	  %% Line 293
	  <{'lavender',A}> when 'true' ->
	      {230,230,250,A}
	  %% Line 294
	  <{'ghostwhite',A}> when 'true' ->
	      {248,248,255,A}
	  %% Line 295
	  <{'aliceblue',A}> when 'true' ->
	      {240,248,255,A}
	  %% Line 296
	  <{'mintcream',A}> when 'true' ->
	      {245,255,250,A}
	  %% Line 297
	  <{'honeydew',A}> when 'true' ->
	      {240,255,240,A}
	  %% Line 298
	  <{'lightgoldenrodyellow',A}> when 'true' ->
	      {250,250,210,A}
	  %% Line 299
	  <{'lemonchiffon',A}> when 'true' ->
	      {255,250,205,A}
	  %% Line 300
	  <{'cornsilk',A}> when 'true' ->
	      {255,248,220,A}
	  %% Line 301
	  <{'lightyellow',A}> when 'true' ->
	      {255,255,224,A}
	  %% Line 302
	  <{'ivory',A}> when 'true' ->
	      {255,255,240,A}
	  %% Line 303
	  <{'floralwhite',A}> when 'true' ->
	      {255,250,240,A}
	  %% Line 304
	  <{'linen',A}> when 'true' ->
	      {250,240,230,A}
	  %% Line 305
	  <{'oldlace',A}> when 'true' ->
	      {253,245,230,A}
	  %% Line 306
	  <{'antiquewhite',A}> when 'true' ->
	      {250,235,215,A}
	  %% Line 307
	  <{'bisque',A}> when 'true' ->
	      {255,228,196,A}
	  %% Line 308
	  <{'peachpuff',A}> when 'true' ->
	      {255,218,185,A}
	  %% Line 309
	  <{'papayawhip',A}> when 'true' ->
	      {255,239,213,A}
	  %% Line 310
	  <{'beige',A}> when 'true' ->
	      {245,245,220,A}
	  %% Line 311
	  <{'seashell',A}> when 'true' ->
	      {255,245,238,A}
	  %% Line 312
	  <{'lavenderblush',A}> when 'true' ->
	      {255,240,245,A}
	  %% Line 313
	  <{'mistyrose',A}> when 'true' ->
	      {255,228,225,A}
	  %% Line 314
	  <{'snow',A}> when 'true' ->
	      {255,250,250,A}
	  %% Line 315
	  <{'whitesmoke',A}> when 'true' ->
	      {245,245,245,A}
	  %% Line 316
	  <{'gainsboro',A}> when 'true' ->
	      {220,220,220,A}
	  %% Line 317
	  <{'lightgrey',A}> when 'true' ->
	      {211,211,211,A}
	  %% Line 318
	  <{'darkgray',A}> when 'true' ->
	      {169,169,169,A}
	  %% Line 319
	  <{'lightslategray',A}> when 'true' ->
	      {119,136,153,A}
	  %% Line 320
	  <{'slategray',A}> when 'true' ->
	      {112,128,144,A}
	  %% Line 321
	  <{'dimgray',A}> when 'true' ->
	      {105,105,105,A}
	  %% Line 322
	  <{'darkslategray',A}> when 'true' ->
	      {47,79,79,A}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'name_to_color',1}}] )
	    -| ['compiler_generated'] )
	end
'text'/5 =
    %% Line 324
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <I,Sp = {Xs,Ys},Font,Text,Color> when 'true' ->
	      %% Line 325
	      case call 'egd_font':'size'
		       (Font) of
		<{FW,FH}> when 'true' ->
		    let <Length> =
			%% Line 326
			call 'erlang':'length'
			    (Text)
		    in  let <_cor9> =
			    %% Line 327
			    call 'erlang':'*'
				(Length, FW)
			in  let <_cor10> =
				%% Line 327
				call 'erlang':'+'
				    (Xs, _cor9)
			    in  let <_cor7> =
				    %% Line 327
				    call 'erlang':'+'
					(Ys, FH)
				in  let <_cor8> =
					%% Line 327
					call 'erlang':'+'
					    (_cor7, 5)
				    in  let <Ep> = {_cor10,_cor8}
					in  let <_cor12> =
						%% Line 332
						apply 'span'/1
						    ([Sp|[Ep|[]]])
					    in  %% Line 334
						( case I of
						    ( <( {'image',_cor23,_cor24,_rec38,_cor25,_cor26}
							 -| ['compiler_generated'] )> when 'true' ->
							  let <_rec36> =
							      [{'image_object','text_horizontal',[Sp|[]],_cor12,{Font,Text},'undefined',Color}|_rec38]
							  in  call 'erlang':'setelement'
								  (4, I, _rec36)
						      -| ['compiler_generated'] )
						    ( <_cor27> when 'true' ->
							  ( call ( 'erlang'
								   -| ['compiler_generated'] ):( 'error'
												 -| ['compiler_generated'] )
								(( {'badrecord','image'}
								   -| ['compiler_generated'] ))
							    -| ['compiler_generated'] )
						      -| ['compiler_generated'] )
						  end
						  -| ['compiler_generated'] )
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor22,_cor21,_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19,_cor18})
		  -| [{'function_name',{'text',5}}] )
	    -| ['compiler_generated'] )
	end
'arc_to_edges'/3 =
    %% Line 347
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <P0,P1,D>
	      when try
		    let <_cor3> =
			call 'erlang':'abs'
			    (D)
		    in  call 'erlang':'<'
			    (_cor3, 5.00000000000000000000e-01)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      [{P0,P1}|[]]
	  %% Line 348
	  <{X0,Y0},{X1,Y1},D> when 'true' ->
	      let <Vx> =
		  %% Line 349
		  call 'erlang':'-'
		      (X1, X0)
	      in  let <Vy> =
		      %% Line 350
		      call 'erlang':'-'
			  (Y1, Y0)
		  in  let <_cor6> =
			  %% Line 352
			  call 'erlang':'*'
			      (5.00000000000000000000e-01, Vx)
		      in  let <Mx> =
			      %% Line 352
			      call 'erlang':'+'
				  (X0, _cor6)
			  in  let <_cor8> =
				  %% Line 353
				  call 'erlang':'*'
				      (5.00000000000000000000e-01, Vy)
			      in  let <My> =
				      %% Line 353
				      call 'erlang':'+'
					  (Y0, _cor8)
				  in  let <_cor11> =
					  %% Line 356
					  call 'erlang':'*'
					      (Vx, Vx)
				      in  let <_cor10> =
					      %% Line 356
					      call 'erlang':'*'
						  (Vy, Vy)
					  in  let <_cor12> =
						  %% Line 356
						  call 'erlang':'+'
						      (_cor11, _cor10)
					      in  let <L> =
						      %% Line 356
						      call 'math':'sqrt'
							  (_cor12)
						  in  let <_cor14> =
							  %% Line 357
							  call 'erlang':'*'
							      (D, Vx)
						      in  let <Sx> =
							      %% Line 357
							      call 'erlang':'/'
								  (_cor14, L)
							  in  let <_cor16> =
								  %% Line 358
								  call 'erlang':'*'
								      (D, Vy)
							      in  let <Sy> =
								      %% Line 358
								      call 'erlang':'/'
									  (_cor16, L)
								  in  let <_cor18> =
									  %% Line 360
									  call 'erlang':'-'
									      (Mx, Sy)
								      in  let <Bx> =
									      %% Line 360
									      call 'erlang':'trunc'
										  (_cor18)
									  in  let <_cor20> =
										  %% Line 361
										  call 'erlang':'+'
										      (My, Sx)
									      in  let <By> =
										      %% Line 361
										      call 'erlang':'trunc'
											  (_cor20)
										  in  let <_cor24> =
											  %% Line 363
											  call 'erlang':'/'
											      (D, 4)
										      in  let <_cor25> =
											      %% Line 363
											      apply 'arc_to_edges'/3
												  ({X0,Y0}, {Bx,By}, _cor24)
											  in  let <_cor22> =
												  %% Line 363
												  call 'erlang':'/'
												      (D, 4)
											      in  let <_cor23> =
												      %% Line 363
												      apply 'arc_to_edges'/3
													  ({Bx,By}, {X1,Y1}, _cor22)
												  in  %% Line 363
												      call 'erlang':'++'
													  (_cor25, _cor23)
	  ( <_cor28,_cor27,_cor26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor28,_cor27,_cor26})
		  -| [{'function_name',{'arc_to_edges',3}}] )
	    -| ['compiler_generated'] )
	end
'edges'/1 =
    %% Line 371
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      []
	  %% Line 372
	  <Pts = [P0|_cor2]> when 'true' ->
	      apply 'edges'/3
		  (Pts, P0, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'edges',1}}] )
	    -| ['compiler_generated'] )
	end
'edges'/3 =
    %% Line 373
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[P1|[]],P0,Out> when 'true' ->
	      [{P1,P0}|Out]
	  %% Line 374
	  <[P1|[P2|Pts]],P0,Out> when 'true' ->
	      apply 'edges'/3
		  ([P2|Pts], P0, [{P1,P2}|Out])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'edges',3}}] )
	    -| ['compiler_generated'] )
	end
'convex_hull'/1 =
    %% Line 382
    fun (_cor0) ->
	let <P0> =
	    %% Line 383
	    apply 'lower_right'/1
		(_cor0)
	in  let <_cor8> =
		%% Line 384
		( fun (_cor5,_cor4) ->
		      %% Line 386
		      case apply 'point_side'/2
			       ({_cor4,P0}, _cor5) of
			%% Line 387
			<'left'> when 'true' ->
			    'true'
			%% Line 388
			<_cor11> when 'true' ->
			    'false'
		      end
		  -| [{'id',{0,0,'-convex_hull/1-fun-0-'}}] )
	    in  let <_cor2> =
		    %% Line 390
		    call 'erlang':'--'
			(_cor0, [P0|[]])
		in  %% Line 384
		    case call 'lists':'sort'
			     (_cor8, _cor2) of
		      <[P1|Ps1]> when 'true' ->
			  %% Line 391
			  apply 'convex_hull'/2
			      (Ps1, [P1|[P0|[]]])
		      ( <_cor9> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor9})
			-| ['compiler_generated'] )
		    end
'convex_hull'/2 =
    %% Line 393
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],W> when 'true' ->
	      W
	  %% Line 394
	  <[P|Pts],[P1|[P2|W]]> when 'true' ->
	      %% Line 395
	      case apply 'point_side'/2
		       ({P2,P1}, P) of
		%% Line 396
		<'left'> when 'true' ->
		    apply 'convex_hull'/2
			(Pts, [P|[P1|[P2|W]]])
		%% Line 397
		<_cor5> when 'true' ->
		    apply 'convex_hull'/2
			([P|Pts], [P2|W])
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'convex_hull',2}}] )
	    -| ['compiler_generated'] )
	end
'lower_right'/1 =
    %% Line 400
    fun (_cor0) ->
	case _cor0 of
	  <[P|Pts]> when 'true' ->
	      apply 'lower_right'/2
		  (P, Pts)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'lower_right',1}}] )
	    -| ['compiler_generated'] )
	end
'lower_right'/2 =
    %% Line 401
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <P,[]> when 'true' ->
	      P
	  %% Line 402
	  <{X0,Y0},[{_cor6,Y}|Pts]>
	      when call 'erlang':'<'
		    (Y,
		     Y0) ->
	      apply 'lower_right'/2
		  ({X0,Y0}, Pts)
	  %% Line 403
	  <{X0,Y0},[{X,Y}|Pts]>
	      when let <_cor2> =
		    call 'erlang':'<'
			(X, X0)
		in  let <_cor3> =
			call 'erlang':'<'
			    (Y, Y0)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      apply 'lower_right'/2
		  ({X0,Y0}, Pts)
	  %% Line 404
	  <_cor7,[P|Pts]> when 'true' ->
	      apply 'lower_right'/2
		  (P, Pts)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'lower_right',2}}] )
	    -| ['compiler_generated'] )
	end
'point_side'/2 =
    %% Line 406
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{{X0,Y0},{X1,Y1}},{X2,Y2}> when 'true' ->
	      let <_cor6> =
		  call 'erlang':'-'
		      (X1, X0)
	      in  let <_cor5> =
		      call 'erlang':'-'
			  (Y2, Y0)
		  in  let <_cor7> =
			  call 'erlang':'*'
			      (_cor6, _cor5)
		      in  let <_cor3> =
			      call 'erlang':'-'
				  (X2, X0)
			  in  let <_cor2> =
				  call 'erlang':'-'
				      (Y1, Y0)
			      in  let <_cor4> =
				      call 'erlang':'*'
					  (_cor3, _cor2)
				  in  let <_cor8> =
					  call 'erlang':'-'
					      (_cor7, _cor4)
				      in  apply 'point_side'/1
					      (_cor8)
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'point_side',2}}] )
	    -| ['compiler_generated'] )
	end
'point_side'/1 =
    %% Line 407
    fun (_cor0) ->
	case _cor0 of
	  <D>
	      when call 'erlang':'>'
		    (_cor0,
		     0) ->
	      'left'
	  %% Line 408
	  <D>
	      when call 'erlang':'<'
		    (_cor0,
		     0) ->
	      'right'
	  %% Line 409
	  <_cor2> when 'true' ->
	      'on_line'
	end
'span'/1 =
    %% Line 413
    fun (_cor0) ->
	let <_cor5> =
	    %% Line 414
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[{TX,_cor18}|_cor2]> when 'true' ->
				let <_cor4> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [TX|_cor4]
				      -| ['compiler_generated'] )
			    ( <[_cor1|_cor2]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor2)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor3> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor3})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  let <_cor11> =
		%% Line 415
		( letrec
		      'lc$^1'/1 =
			  fun (_cor9) ->
			      case _cor9 of
				<[{_cor19,TY}|_cor8]> when 'true' ->
				    let <_cor10> =
					apply 'lc$^1'/1
					    (_cor8)
				    in  ( [TY|_cor10]
					  -| ['compiler_generated'] )
				( <[_cor7|_cor8]> when 'true' ->
				      apply 'lc$^1'/1
					  (_cor8)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor9> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor9})
					-| [{'function_name',{'lc$^1',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^1'/1
			  (_cor0)
		  -| ['list_comprehension'] )
	    in  let <Xmin> =
		    %% Line 416
		    call 'lists':'min'
			(_cor5)
		in  let <Xmax> =
			%% Line 417
			call 'lists':'max'
			    (_cor5)
		    in  let <Ymin> =
			    %% Line 418
			    call 'lists':'min'
				(_cor11)
			in  let <Ymax> =
				%% Line 419
				call 'lists':'max'
				    (_cor11)
			    in  %% Line 420
				{Xmin,Ymin,Xmax,Ymax}
'rgb_float2byte'/1 =
    %% Line 422
    fun (_cor0) ->
	case _cor0 of
	  <{R,G,B}> when 'true' ->
	      apply 'rgb_float2byte'/1
		  ({R,G,B,1.00000000000000000000e+00})
	  %% Line 423
	  <{R,G,B,A}> when 'true' ->
	      let <_cor7> =
		  %% Line 424
		  call 'erlang':'*'
		      (R, 255)
	      in  let <_cor8> =
		      %% Line 424
		      call 'erlang':'trunc'
			  (_cor7)
		  in  let <_cor5> =
			  %% Line 424
			  call 'erlang':'*'
			      (G, 255)
		      in  let <_cor6> =
			      %% Line 424
			      call 'erlang':'trunc'
				  (_cor5)
			  in  let <_cor3> =
				  %% Line 424
				  call 'erlang':'*'
				      (B, 255)
			      in  let <_cor4> =
				      %% Line 424
				      call 'erlang':'trunc'
					  (_cor3)
				  in  let <_cor1> =
					  %% Line 424
					  call 'erlang':'*'
					      (A, 255)
				      in  let <_cor2> =
					      %% Line 424
					      call 'erlang':'trunc'
						  (_cor1)
					  in  %% Line 424
					      {_cor8,_cor6,_cor4,_cor2}
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'rgb_float2byte',1}}] )
	    -| ['compiler_generated'] )
	end
'rgba_byte2float'/1 =
    %% Line 426
    fun (_cor0) ->
	case _cor0 of
	  <{R,G,B,A}> when 'true' ->
	      let <_cor4> =
		  %% Line 427
		  call 'erlang':'/'
		      (R, 255)
	      in  let <_cor3> =
		      %% Line 427
		      call 'erlang':'/'
			  (G, 255)
		  in  let <_cor2> =
			  %% Line 427
			  call 'erlang':'/'
			      (B, 255)
		      in  let <_cor1> =
			      %% Line 427
			      call 'erlang':'/'
				  (A, 255)
			  in  %% Line 427
			      {_cor4,_cor3,_cor2,_cor1}
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'rgba_byte2float',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('egd_primitives')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('egd_primitives', _cor0)
end