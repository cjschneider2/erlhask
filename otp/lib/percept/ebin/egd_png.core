module 'egd_png' ['binary'/3,
		  'module_info'/0,
		  'module_info'/1]
    attributes [%% Line 19
		'type' =
		    %% Line 19
		    [{'rgba_float',{'type',19,'tuple',[{'type',19,'float',[]}|[{'type',19,'float',[]}|[{'type',19,'float',[]}|[{'type',19,'float',[]}]]]]},[]}],
		%% Line 20
		'type' =
		    %% Line 20
		    [{'rgba_byte',{'type',20,'tuple',[{'type',20,'byte',[]}|[{'type',20,'byte',[]}|[{'type',20,'byte',[]}|[{'type',20,'byte',[]}]]]]},[]}],
		%% Line 21
		'type' =
		    %% Line 21
		    [{'rgb',{'type',21,'tuple',[{'type',21,'byte',[]}|[{'type',21,'byte',[]}|[{'type',21,'byte',[]}]]]},[]}],
		%% Line 23
		'type' =
		    %% Line 23
		    [{{'record','image_object'},[{'record_field',24,{'atom',24,'type'}}|[{'record_field',25,{'atom',25,'points'},{'nil',25}}|[{'record_field',26,{'atom',26,'span'}}|[{'record_field',27,{'atom',27,'internals'}}|[{'record_field',28,{'atom',28,'intervals'}}|[{'record_field',29,{'atom',29,'color'}}]]]]]],[]}],
		%% Line 31
		'type' =
		    %% Line 31
		    [{{'record','image'},[{'record_field',32,{'atom',32,'width'}}|[{'record_field',33,{'atom',33,'height'}}|[{'record_field',34,{'atom',34,'objects'},{'nil',34}}|[{'record_field',35,{'atom',35,'background'},{'tuple',35,[{'float',35,1.00000000000000000000e+00}|[{'float',35,1.00000000000000000000e+00}|[{'float',35,1.00000000000000000000e+00}|[{'float',35,1.00000000000000000000e+00}]]]]}}|[{'record_field',36,{'atom',36,'image'}}]]]]],[]}]]
'binary'/3 =
    %% Line 59
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <W,H,Bitmap>
	      when call 'erlang':'is_binary'
		    (Bitmap) ->
	      let <Z> =
		  %% Line 60
		  call 'zlib':'open'
		      ()
	      in  let <Binary> =
		      %% Line 61
		      apply 'bitmap2png'/4
			  (W, H, Bitmap, Z)
		  in  do  %% Line 62
			  call 'zlib':'close'
			      (Z)
			  %% Line 63
			  Binary
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'binary',3}}] )
	    -| ['compiler_generated'] )
	end
'bitmap2png'/4 =
    %% Line 70
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 71
	    apply 'png_type'/1
		('r8g8b8')
	in  let <_cor5> =
		%% Line 71
		#{#<73>(8,1,'integer',['unsigned'|['big']]),
		  #<72>(8,1,'integer',['unsigned'|['big']]),
		  #<68>(8,1,'integer',['unsigned'|['big']]),
		  #<82>(8,1,'integer',['unsigned'|['big']]),
		  #<_cor3>(32,1,'integer',['unsigned'|['big']]),
		  #<_cor2>(32,1,'integer',['unsigned'|['big']]),
		  #<8>(8,1,'integer',['unsigned'|['big']]),
		  #<_cor4>(8,1,'integer',['unsigned'|['big']]),
		  #<0>(8,1,'integer',['unsigned'|['big']]),
		  #<0>(8,1,'integer',['unsigned'|['big']]),
		  #<0>(8,1,'integer',['unsigned'|['big']])}#
	    in  let <HDR> =
		    %% Line 71
		    apply 'create_chunk'/2
			(_cor5, _cor0)
		in  let <_cor7> =
			%% Line 72
			call 'erlang':'*'
			    (3, _cor3)
		    in  let <_cor8> =
			    %% Line 72
			    apply 'compress_image'/4
				(0, _cor7, _cor1, [])
			in  let <DATA> =
				%% Line 72
				apply 'create_chunk'/2
				    ([[73|[68|[65|[84]]]]|[_cor8|[]]], _cor0)
			    in  let <END> =
				    %% Line 73
				    apply 'create_chunk'/2
					(#{#<73>(8,1,'integer',['unsigned'|['big']]),
					   #<69>(8,1,'integer',['unsigned'|['big']]),
					   #<78>(8,1,'integer',['unsigned'|['big']]),
					   #<68>(8,1,'integer',['unsigned'|['big']])}#, _cor0)
				in  %% Line 74
				    call 'erlang':'list_to_binary'
					([137|[80|[78|[71|[13|[10|[26|[10|[HDR|[DATA|[END|[]]]]]]]]]]]])
'compress_image'/4 =
    %% Line 76
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Pos> =
	    %% Line 77
	    call 'erlang':'*'
		(_cor3, _cor2)
	in  %% Line 78
	    case _cor1 of
	      %% Line 79
	      <#{#<_cor16>(Pos,8,'binary',['unsigned'|['big']]),
		 #<Row>(_cor2,8,'binary',['unsigned'|['big']]),
		 #<_cor17>('all',8,'binary',['unsigned'|['big']])}#> when 'true' ->
		  let <Filtered> =
		      %% Line 80
		      apply 'filter_row'/2
			  (Row, _cor2)
		  in  let <_cor6> =
			  %% Line 81
			  call 'erlang':'+'
			      (_cor3, 1)
		      in  %% Line 81
			  apply 'compress_image'/4
			      (_cor6, _cor2, _cor1, [Filtered|_cor0])
	      %% Line 82
	      <_cor18>
		  when try
			let <_cor7> =
			    call 'erlang':'size'
				(_cor1)
			in  call 'erlang':'=='
				(Pos, _cor7)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  let <_cor8> =
		      %% Line 83
		      call 'lists':'reverse'
			  (_cor0)
		  in  let <Filtered> =
			  %% Line 83
			  call 'erlang':'list_to_binary'
			      (_cor8)
		      in  %% Line 84
			  call 'zlib':'compress'
			      (Filtered)
	      ( <_cor11> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor11})
		-| ['compiler_generated'] )
	    end
'filter_row'/2 =
    %% Line 88
    fun (_cor1,_cor0) ->
	%% Line 89
	[0|[_cor1|[]]]
'png_type'/1 =
    %% Line 95
    fun (_cor0) ->
	case _cor0 of
	  <'r8g8b8'> when 'true' ->
	      2
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'png_type',1}}] )
	    -| ['compiler_generated'] )
	end
'create_chunk'/2 =
    %% Line 97
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Bin,Z>
	      when call 'erlang':'is_list'
		    (Bin) ->
	      let <_cor2> =
		  %% Line 98
		  call 'erlang':'list_to_binary'
		      (Bin)
	      in  %% Line 98
		  apply 'create_chunk'/2
		      (_cor2, Z)
	  %% Line 99
	  <Bin,Z>
	      when call 'erlang':'is_binary'
		    (Bin) ->
	      let <_cor3> =
		  %% Line 100
		  call 'erlang':'size'
		      (Bin)
	      in  let <Sz> =
		      %% Line 100
		      call 'erlang':'-'
			  (_cor3, 4)
		  in  let <Crc> =
			  %% Line 101
			  call 'zlib':'crc32'
			      (Z, Bin)
		      in  %% Line 102
			  #{#<Sz>(32,1,'integer',['unsigned'|['big']]),
			    #<Bin>('all',8,'binary',['unsigned'|['big']]),
			    #<Crc>(32,1,'integer',['unsigned'|['big']])}#
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'create_chunk',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('egd_png')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('egd_png', _cor0)
end