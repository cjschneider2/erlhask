module 'percept_image' ['activities'/3,
			'activities'/4,
			'graph'/3,
			'graph'/4,
			'module_info'/0,
			'module_info'/1,
			'percentage'/3,
			'proc_lifetime'/5]
    attributes []
'graph'/4 =
    %% Line 35
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Width,Height,{RXmin,RYmin,RXmax,RYmax},Data> when 'true' ->
	      let <_cor9> =
		  %% Line 36
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor6) ->
				case _cor6 of
				  <[{X,Y1,Y2}|_cor5]> when 'true' ->
				      let <_cor7> =
					  call 'erlang':'+'
					      (Y1, Y2)
				      in  let <_cor8> =
					      apply 'lc$^0'/1
						  (_cor5)
					  in  ( [{X,_cor7}|_cor8]
						-| ['compiler_generated'] )
				  ( <[_cor4|_cor5]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor5)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_2245> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor6})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (_cor0)
		    -| ['list_comprehension'] )
	      in  let <_794> =
		      %% Line 37
		      call 'percept_analyzer':'minmax'
			  (_cor9)
		  in  %% Line 38
		      case _794 of
			<{Xmin,Ymin,Xmax,Ymax}> when 'true' ->
			    let <_cor16> =
				%% Line 39
				call 'lists':'min'
				    ([RXmin|[Xmin|[]]])
			    in  let <_cor15> =
				    %% Line 40
				    call 'lists':'min'
					([RYmin|[Ymin|[]]])
				in  let <_cor14> =
					%% Line 41
					call 'lists':'max'
					    ([RXmax|[Xmax|[]]])
				    in  let <_cor13> =
					    %% Line 42
					    call 'lists':'max'
						([RYmax|[Ymax|[]]])
					in  %% Line 39
					    apply 'graf1'/4
						(_cor3, _cor2, {_cor16,_cor15,_cor14,_cor13}, _cor0)
			( <_cor12> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_794})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor20,_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'graph',4}}] )
	    -| ['compiler_generated'] )
	end
'graph'/3 =
    %% Line 55
    fun (_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 56
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[{X,Y1,Y2}|_cor4]> when 'true' ->
				let <_cor6> =
				    call 'erlang':'+'
					(Y1, Y2)
				in  let <_cor7> =
					apply 'lc$^0'/1
					    (_cor4)
				    in  ( [{X,_cor6}|_cor7]
					  -| ['compiler_generated'] )
			    ( <[_cor3|_cor4]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor4)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_1096> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  let <Bounds> =
		%% Line 57
		call 'percept_analyzer':'minmax'
		    (_cor8)
	    in  %% Line 58
		apply 'graf1'/4
		    (_cor2, _cor1, Bounds, _cor0)
'graf1'/4 =
    %% Line 60
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Width,Height,{Xmin,Ymin,Xmax,Ymax},Data> when 'true' ->
	      let <_cor7> =
		  %% Line 63
		  call 'erlang':'-'
		      (_cor3, 40)
	      in  let <_cor5> =
		      %% Line 63
		      call 'erlang':'-'
			  (_cor2, 17)
		  in  let <GrafArea> =
			  %% Line 63
			  {'graph_area',20,4,_cor7,_cor5}
		      in  let <_cor11> =
			      %% Line 64
			      call 'erlang':'-'
				  (_cor2, 13)
			  in  let <_cor10> =
				  %% Line 64
				  call 'erlang':'-'
				      (_cor3, 40)
			      in  let <XticksArea> =
				      %% Line 64
				      {'graph_area',20,_cor11,_cor10,13}
				  in  let <_cor13> =
					  %% Line 65
					  call 'erlang':'-'
					      (_cor2, 17)
				      in  let <YticksArea> =
					      %% Line 65
					      {'graph_area',1,4,20,_cor13}
					  in  let <Image> =
						  %% Line 69
						  call 'egd':'create'
						      (_cor3, _cor2)
					      in  let <Black> =
						      %% Line 73
						      call 'egd':'color'
							  (Image, {0,0,0})
						  in  let <ProcColor> =
							  %% Line 74
							  call 'egd':'color'
							      (Image, {0,255,0})
						      in  let <PortColor> =
							      %% Line 75
							      call 'egd':'color'
								  (Image, {255,0,0})
							  in  do  do  %% Line 78
								      apply 'draw_graf'/5
									  (Image, _cor0, {Black,ProcColor,PortColor}, GrafArea, {Xmin,Ymin,Xmax,Ymax})
								      do  %% Line 79
									  apply 'draw_xticks'/5
									      (Image, Black, XticksArea, {Xmin,Xmax}, _cor0)
									  %% Line 80
									  apply 'draw_yticks'/4
									      (Image, Black, YticksArea, {Ymin,Ymax})
								  let <Binary> =
								      %% Line 83
								      call 'egd':'render'
									  (Image, 'png')
								  in  do  %% Line 84
									  call 'egd':'destroy'
									      (Image)
									  Binary
	  ( <_cor23,_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'graf1',4}}] )
	    -| ['compiler_generated'] )
	end
'draw_graf'/5 =
    %% Line 93
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Im,Data,Colors,GA = {'graph_area',X0,Y0,Width,Height},{Xmin,_X_Ymin,Xmax,Ymax}> when 'true' ->
	      let <_cor5> =
		  %% Line 94
		  call 'erlang':'-'
		      (Xmax, Xmin)
	      in  let <Dx> =
		      %% Line 94
		      call 'erlang':'/'
			  (Width, _cor5)
		  in  let <Dy> =
			  %% Line 95
			  call 'erlang':'/'
			      (Height, Ymax)
		      in  let <_cor26> =
			      %% Line 96
			      ( letrec
				    'lc$^0'/1 =
					fun (_cor10) ->
					    case _cor10 of
					      <[{X,Y1,Y2}|_cor9]> when 'true' ->
						  let <_cor21> =
						      call 'erlang':'*'
							  (X, Dx)
						  in  let <_cor22> =
							  call 'erlang':'+'
							      (X0, _cor21)
						      in  let <_cor20> =
							      call 'erlang':'*'
								  (Xmin, Dx)
							  in  let <_cor23> =
								  call 'erlang':'-'
								      (_cor22, _cor20)
							      in  let <_cor24> =
								      call 'erlang':'trunc'
									  (_cor23)
								  in  let <_cor17> =
									  call 'erlang':'+'
									      (Y0, Height)
								      in  let <_cor16> =
									      call 'erlang':'*'
										  (Y1, Dy)
									  in  let <_cor18> =
										  call 'erlang':'-'
										      (_cor17, _cor16)
									      in  let <_cor19> =
										      call 'erlang':'trunc'
											  (_cor18)
										  in  let <_cor13> =
											  call 'erlang':'+'
											      (Y0, Height)
										      in  let <_cor11> =
											      call 'erlang':'+'
												  (Y1, Y2)
											  in  let <_cor12> =
												  call 'erlang':'*'
												      (_cor11, Dy)
											      in  let <_cor14> =
												      call 'erlang':'-'
													  (_cor13, _cor12)
												  in  let <_cor15> =
													  call 'erlang':'trunc'
													      (_cor14)
												      in  let <_cor25> =
													      apply 'lc$^0'/1
														  (_cor9)
													  in  ( [{_cor24,_cor19,_cor15}|_cor25]
														-| ['compiler_generated'] )
					      ( <[_cor8|_cor9]> when 'true' ->
						    apply 'lc$^0'/1
							(_cor9)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_683> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor10})
						      -| [{'function_name',{'lc$^0',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^0'/1
					(_cor3)
				-| ['list_comprehension'] )
			  in  %% Line 97
			      apply 'draw_graf'/4
				  (_cor4, _cor26, _cor2, _cor1)
	  ( <_cor32,_cor31,_cor30,_cor29,_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'draw_graf',5}}] )
	    -| ['compiler_generated'] )
	end
'draw_graf'/4 =
    %% Line 99
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Im,[{X1,Yproc1,Yport1}|[{X2,Yproc2,Yport2}|Data]],C,GA>
	      when try
		    let <_cor4> =
			call 'erlang':'-'
			    (X2, X1)
		    in  call 'erlang':'<'
			    (_cor4, 1)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 100
	      apply 'draw_graf'/4
		  (_cor3, [{X1,[{Yproc2,Yport2}|[{Yproc1,Yport1}|[]]]}|Data], _cor1, _cor0)
	  %% Line 102
	  <Im,[{X1,Ys1}|[{X2,Yproc2,Yport2}|Data]],C,GA>
	      when try
		    let <_cor5> =
			call 'erlang':'-'
			    (X2, X1)
		    in  let <_cor6> =
			    call 'erlang':'<'
				(_cor5, 1)
			in  let <_cor7> =
				call 'erlang':'is_list'
				    (Ys1)
			    in  call 'erlang':'and'
				    (_cor6, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 103
	      apply 'draw_graf'/4
		  (_cor3, [{X1,[{Yproc2,Yport2}|Ys1]}|Data], _cor1, _cor0)
	  %% Line 105
	  <Im,[{X1,Yproc1,Yport1}|[{X2,Yproc2,Yport2}|Data]],C = {B,PrC,PoC},GA = {'graph_area',_cor31,Y0,_cor32,H}> when 'true' ->
	      let <_cor8> =
		  %% Line 106
		  call 'erlang':'+'
		      (Y0, H)
	      in  let <GyZero> =
		      %% Line 106
		      call 'erlang':'trunc'
			  (_cor8)
		  in  do  do  %% Line 107
			      call 'egd':'filledRectangle'
				  (_cor3, {X1,GyZero}, {X2,Yproc1}, PrC)
			      do  %% Line 108
				  call 'egd':'filledRectangle'
				      (_cor3, {X1,Yproc1}, {X2,Yport1}, PoC)
				  do  %% Line 109
				      call 'egd':'line'
					  (_cor3, {X1,Yport1}, {X2,Yport1}, B)
				      do  %% Line 110
					  call 'egd':'line'
					      (_cor3, {X1,Yport2}, {X1,Yport1}, B)
					  %% Line 111
					  call 'egd':'line'
					      (_cor3, {X2,Yport1}, {X2,Yport2}, B)
			  %% Line 112
			  apply 'draw_graf'/4
			      (_cor3, [{X2,Yproc2,Yport2}|Data], _cor1, _cor0)
	  %% Line 114
	  <Im,[{X1,Ys1 = [{Yproc1,Yport1}|_cor33]}|[{X2,Yproc2,Yport2}|Data]],C = {B,PrC,PoC},GA = {'graph_area',_cor34,Y0,_cor35,H}> when 'true' ->
	      let <_cor10> =
		  %% Line 115
		  call 'erlang':'+'
		      (Y0, H)
	      in  let <GyZero> =
		      %% Line 115
		      call 'erlang':'trunc'
			  (_cor10)
		  in  let <_cor16> =
			  %% Line 116
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor14) ->
					case _cor14 of
					  <[{Yp,_cor36}|_cor13]> when 'true' ->
					      let <_cor15> =
						  apply 'lc$^0'/1
						      (_cor13)
					      in  ( [Yp|_cor15]
						    -| ['compiler_generated'] )
					  ( <[_cor12|_cor13]> when 'true' ->
						apply 'lc$^0'/1
						    (_cor13)
					    -| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_2162> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor14})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (Ys1)
			    -| ['list_comprehension'] )
		      in  let <_cor22> =
			      %% Line 117
			      ( letrec
				    'lc$^1'/1 =
					fun (_cor20) ->
					    case _cor20 of
					      <[{_cor37,Yp}|_cor19]> when 'true' ->
						  let <_cor21> =
						      apply 'lc$^1'/1
							  (_cor19)
						  in  ( [Yp|_cor21]
							-| ['compiler_generated'] )
					      ( <[_cor18|_cor19]> when 'true' ->
						    apply 'lc$^1'/1
							(_cor19)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_3569> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor20})
						      -| [{'function_name',{'lc$^1',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^1'/1
					(Ys1)
				-| ['list_comprehension'] )
			  in  let <YprMin> =
				  %% Line 119
				  call 'lists':'min'
				      (_cor16)
			      in  let <YprMax> =
				      %% Line 120
				      call 'lists':'max'
					  (_cor16)
				  in  let <YpoMax> =
					  %% Line 121
					  call 'lists':'max'
					      (_cor22)
				      in  do  do  %% Line 122
						  call 'egd':'filledRectangle'
						      (_cor3, {X1,GyZero}, {X2,Yproc1}, PrC)
						  do  %% Line 123
						      call 'egd':'filledRectangle'
							  (_cor3, {X1,Yproc1}, {X2,Yport1}, PoC)
						      do  %% Line 124
							  call 'egd':'filledRectangle'
							      (_cor3, {X1,Yport1}, {X2,Yport1}, B)
							  do  %% Line 125
							      call 'egd':'filledRectangle'
								  (_cor3, {X2,Yport1}, {X2,Yport2}, B)
							      do  %% Line 127
								  call 'egd':'filledRectangle'
								      (_cor3, {X1,GyZero}, {X1,YprMin}, PrC)
								  do  %% Line 128
								      call 'egd':'filledRectangle'
									  (_cor3, {X1,YprMax}, {X1,YpoMax}, PoC)
								      %% Line 129
								      call 'egd':'filledRectangle'
									  (_cor3, {X1,YprMax}, {X1,YprMin}, B)
					      %% Line 131
					      apply 'draw_graf'/4
						  (_cor3, [{X2,Yproc2,Yport2}|Data], _cor1, _cor0)
	  %% Line 132
	  <_cor38,_cor39,_cor40,_cor41> when 'true' ->
	      'ok'
	end
'draw_xticks'/5 =
    %% Line 134
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Image,Color,XticksArea,{Xmin,Xmax},Data> when 'true' ->
	      %% Line 135
	      case _cor2 of
		<{'graph_area',X0,Y0,Width,_cor48}> when 'true' ->
		    let <_cor6> =
			%% Line 137
			call 'erlang':'-'
			    (Xmax, Xmin)
		    in  let <DX> =
			    %% Line 137
			    call 'erlang':'/'
				(Width, _cor6)
			in  let <_cor8> =
				%% Line 138
				call 'erlang':'*'
				    (Xmin, DX)
			    in  let <Offset> =
				    %% Line 138
				    call 'erlang':'-'
					(X0, _cor8)
				in  let <Y> =
					%% Line 139
					call 'erlang':'trunc'
					    (Y0)
				    in  let <_965> =
					    %% Line 311
					    call 'code':'priv_dir'
						('percept')
					in  let <Filename> =
						%% Line 311
						call 'filename':'join'
						    ([_965|[[102|[111|[110|[116|[115]]]]]|[[54|[120|[49|[49|[95|[108|[97|[116|[105|[110|[49|[46|[119|[105|[110|[103|[115|[102|[111|[110|[116]]]]]]]]]]]]]]]]]]]]]]]])
					    in  let <Font> =
						    %% Line 312
						    call 'egd_font':'load'
							(Filename)
						in  let <_3376> =
							%% Line 141
							call 'egd_font':'size'
							    (Font)
						    in  %% Line 141
							case _3376 of
							  <{FontW,_X_FontH}> when 'true' ->
							      let <_cor15> =
								  %% Line 142
								  call 'erlang':'trunc'
								      (X0)
							      in  let <_cor13> =
								      %% Line 142
								      call 'erlang':'+'
									  (X0, Width)
								  in  let <_cor14> =
									  %% Line 142
									  call 'erlang':'trunc'
									      (_cor13)
								      in  do  %% Line 142
									      call 'egd':'filledRectangle'
										  (_cor4, {_cor15,Y}, {_cor14,Y}, _cor3)
									      let <_cor42> =
										  %% Line 144
										  fun (_cor39,_cor38) ->
										      case <_cor39,_cor38> of
											<{X,_cor49,_cor50},PX> when 'true' ->
											    let <_cor16> =
												%% Line 145
												call 'erlang':'*'
												    (X, DX)
											    in  let <_cor17> =
												    %% Line 145
												    call 'erlang':'+'
													(Offset, _cor16)
												in  let <X1> =
													%% Line 145
													call 'erlang':'trunc'
													    (_cor17)
												    in  %% Line 151
													case <> of
													  %% Line 152
													  <>
													      when call 'erlang':'>'
														    (X1,
														     _cor38) ->
													      let <_cor19> =
														  %% Line 153
														  call 'erlang':'float'
														      (X)
													      in  let <_cor20> =
														      %% Line 153
														      call 'io_lib':'format'
															  ([126|[46|[51|[102]]]], [_cor19|[]])
														  in  let <Text> =
															  %% Line 153
															  call 'lists':'flatten'
															      (_cor20)
														      in  let <TextLength> =
															      %% Line 154
															      call 'erlang':'length'
																  (Text)
															  in  let <TextWidth> =
																  %% Line 155
																  call 'erlang':'*'
																      (TextLength, FontW)
															      in  %% Line 157
																  case <> of
																    %% Line 158
																    <>
																	when try
																	      let <_cor25> =
																		  call 'erlang':'/'
																		      (TextWidth, 2)
																	      in  let <_cor26> =
																		      call 'erlang':'round'
																			  (_cor25)
																		  in  let <_cor27> =
																			  call 'erlang':'+'
																			      (_cor38, _cor26)
																		      in  let <_cor28> =
																			      call 'erlang':'+'
																				  (_cor27, 2)
																			  in  call 'erlang':'>'
																				  (X1, _cor28)
																	  of <Try> ->
																	      Try
																	  catch <T,R> ->
																	      'false' ->
																	let <_cor30> =
																	    %% Line 159
																	    call 'erlang':'-'
																		(Y, 3)
																	in  let <_cor29> =
																		%% Line 159
																		call 'erlang':'+'
																		    (Y, 3)
																	    in  do  %% Line 159
																		    call 'egd':'line'
																			(_cor4, {X1,_cor30}, {X1,_cor29}, _cor3)
																		    let <_cor32> =
																			%% Line 160
																			call 'erlang':'/'
																			    (TextWidth, 2)
																		    in  let <_cor33> =
																			    %% Line 160
																			    call 'erlang':'round'
																				(_cor32)
																			in  let <_cor34> =
																				%% Line 160
																				call 'erlang':'-'
																				    (X1, _cor33)
																			    in  let <_cor31> =
																				    %% Line 160
																				    call 'erlang':'+'
																					(Y, 2)
																				in  do  %% Line 160
																					apply 'text'/5
																					    (_cor4, {_cor34,_cor31}, Font, Text, _cor3)
																					let <_cor35> =
																					    %% Line 161
																					    call 'erlang':'/'
																						(TextWidth, 2)
																					in  let <_cor36> =
																						%% Line 161
																						call 'erlang':'round'
																						    (_cor35)
																					    in  let <_cor37> =
																						    %% Line 161
																						    call 'erlang':'+'
																							(X1, _cor36)
																						in  %% Line 161
																						    call 'erlang':'+'
																							(_cor37, 2)
																    %% Line 162
																    <> when 'true' ->
																	_cor38
																  end
													  %% Line 165
													  <> when 'true' ->
													      _cor38
													end
											( <_cor41,_cor40> when 'true' ->
											      ( primop 'match_fail'
												    ({'function_clause',_cor39,_cor38})
												-| [{'function_name',{'-draw_xticks/5-fun-0-',2}}] )
											  -| ['compiler_generated'] )
										      end
									      in  %% Line 143
										  call 'lists':'foldl'
										      (_cor42, %% Line 168
											       0, _cor0)
							  ( <_cor12> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_3376})
							    -| ['compiler_generated'] )
							end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor47,_cor46,_cor45,_cor44,_cor43> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'draw_xticks',5}}] )
	    -| ['compiler_generated'] )
	end
'draw_yticks'/4 =
    %% Line 170
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Im,Color,TickArea,{_cor24,Ymax}> when 'true' ->
	      %% Line 171
	      case _cor1 of
		<{'graph_area',X0,Y0,Width,Height}> when 'true' ->
		    let <_1108> =
			%% Line 311
			call 'code':'priv_dir'
			    ('percept')
		    in  let <Filename> =
			    %% Line 311
			    call 'filename':'join'
				([_1108|[[102|[111|[110|[116|[115]]]]]|[[54|[120|[49|[49|[95|[108|[97|[116|[105|[110|[49|[46|[119|[105|[110|[103|[115|[102|[111|[110|[116]]]]]]]]]]]]]]]]]]]]]]]])
			in  let <Font> =
				%% Line 312
				call 'egd_font':'load'
				    (Filename)
			    in  let <_cor6> =
				    %% Line 173
				    call 'erlang':'+'
					(X0, Width)
				in  let <X> =
					%% Line 173
					call 'erlang':'trunc'
					    (_cor6)
				    in  let <Dy> =
					    %% Line 174
					    call 'erlang':'/'
						(Height, Ymax)
					in  let <_cor14> =
						%% Line 175
						case <> of
						  %% Line 176
						  <>
						      when try
							    let <_cor9> =
								call 'erlang':'*'
								    (Ymax, 12)
							    in  let <_cor10> =
								    call 'erlang':'/'
									(Height, _cor9)
								in  call 'erlang':'<'
									(_cor10, 1.00000000000000000000e+00)
							of <Try> ->
							    Try
							catch <T,R> ->
							    'false' ->
						      let <_cor11> =
							  call 'erlang':'*'
							      (Ymax, 15)
						      in  let <_cor12> =
							      call 'erlang':'/'
								  (_cor11, Height)
							  in  let <_cor13> =
								  call 'erlang':'+'
								      (1, _cor12)
							      in  call 'erlang':'round'
								      (_cor13)
						  %% Line 177
						  <> when 'true' ->
						      1
						end
					    in  let <_cor18> =
						    %% Line 179
						    call 'erlang':'+'
							(0, Y0)
						in  let <_cor19> =
							%% Line 179
							call 'erlang':'trunc'
							    (_cor18)
						    in  let <_cor16> =
							    %% Line 179
							    call 'erlang':'+'
								(Y0, Height)
							in  let <_cor17> =
								%% Line 179
								call 'erlang':'trunc'
								    (_cor16)
							    in  do  %% Line 179
								    call 'egd':'filledRectangle'
									(_cor3, {X,_cor19}, {X,_cor17}, _cor2)
								    %% Line 180
								    apply 'draw_yticks0'/7
									(_cor3, Font, _cor2, 0, _cor14, Ymax, {X,Height,Dy})
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor23,_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'draw_yticks',4}}] )
	    -| ['compiler_generated'] )
	end
'draw_yticks0'/7 =
    %% Line 182
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Im,Font,Color,Yi,Yts,Ymax,Area>
	      when call 'erlang':'<'
		    (_cor3,
		     _cor1) ->
	      %% Line 183
	      case _cor0 of
		<{X,Height,Dy}> when 'true' ->
		    let <_cor8> =
			%% Line 184
			call 'erlang':'*'
			    (_cor3, Dy)
		    in  let <_cor9> =
			    %% Line 184
			    call 'erlang':'-'
				(Height, _cor8)
			in  let <_cor10> =
				%% Line 184
				call 'erlang':'+'
				    (_cor9, 3)
			    in  let <Y> =
				    %% Line 184
				    call 'erlang':'round'
					(_cor10)
				in  let <_cor13> =
					%% Line 186
					call 'erlang':'-'
					    (X, 3)
				    in  let <_cor12> =
					    %% Line 186
					    call 'erlang':'+'
						(X, 3)
					in  do  %% Line 186
						call 'egd':'filledRectangle'
						    (_cor6, {_cor13,Y}, {_cor12,Y}, _cor4)
						let <_cor14> =
						    %% Line 187
						    call 'io_lib':'format'
							([126|[112]], [_cor3|[]])
						in  let <Text> =
							%% Line 187
							call 'lists':'flatten'
							    (_cor14)
						    in  let <_cor16> =
							    %% Line 188
							    call 'erlang':'-'
								(Y, 4)
							in  do  %% Line 188
								apply 'text'/5
								    (_cor6, {0,_cor16}, _cor5, Text, _cor4)
								let <_cor17> =
								    %% Line 189
								    call 'erlang':'+'
									(_cor3, _cor2)
								in  %% Line 189
								    apply 'draw_yticks0'/7
									(_cor6, _cor5, _cor4, _cor17, _cor2, _cor1, _cor0)
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor0})
		  -| ['compiler_generated'] )
	      end
	  %% Line 190
	  <_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31> when 'true' ->
	      'ok'
	end
'activities'/4 =
    %% Line 205
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Width,Height,{UXmin,UXmax},Activities> when 'true' ->
	      let <_cor8> =
		  %% Line 206
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor6) ->
				case _cor6 of
				  <[{X,_cor18}|_cor5]> when 'true' ->
				      let <_cor7> =
					  apply 'lc$^0'/1
					      (_cor5)
				      in  ( [X|_cor7]
					    -| ['compiler_generated'] )
				  ( <[_cor4|_cor5]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor5)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_1851> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor6})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (_cor0)
		    -| ['list_comprehension'] )
	      in  let <Xmin> =
		      %% Line 207
		      call 'lists':'min'
			  (_cor8)
		  in  let <Xmax> =
			  %% Line 208
			  call 'lists':'max'
			      (_cor8)
		      in  let <_cor13> =
			      %% Line 209
			      call 'lists':'min'
				  ([Xmin|[UXmin|[]]])
			  in  let <_cor12> =
				  %% Line 209
				  call 'lists':'max'
				      ([UXmax|[Xmax|[]]])
			      in  %% Line 209
				  apply 'activities0'/4
				      (_cor3, _cor2, {_cor13,_cor12}, _cor0)
	  ( <_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'activities',4}}] )
	    -| ['compiler_generated'] )
	end
'activities'/3 =
    %% Line 211
    fun (_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 212
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[{X,_cor14}|_cor4]> when 'true' ->
				let <_cor6> =
				    apply 'lc$^0'/1
					(_cor4)
				in  ( [X|_cor6]
				      -| ['compiler_generated'] )
			    ( <[_cor3|_cor4]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor4)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_264> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  let <Xmin> =
		%% Line 213
		call 'lists':'min'
		    (_cor7)
	    in  let <Xmax> =
		    %% Line 214
		    call 'lists':'max'
			(_cor7)
		in  %% Line 215
		    apply 'activities0'/4
			(_cor2, _cor1, {Xmin,Xmax}, _cor0)
'activities0'/4 =
    %% Line 217
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Width,Height,{Xmin,Xmax},Activities> when 'true' ->
	      let <Image> =
		  %% Line 218
		  call 'egd':'create'
		      (_cor3, _cor2)
	      in  let <Grey> =
		      %% Line 219
		      call 'egd':'color'
			  (Image, {200,200,200})
		  in  let <_cor8> =
			  %% Line 221
			  call 'erlang':'-'
			      (_cor3, 40)
		      in  let <ActivityArea> =
			      %% Line 221
			      {'graph_area',20,0,_cor8,_cor2}
			  in  do  do  %% Line 222
				      call 'egd':'filledRectangle'
					  (Image, {0,0}, {_cor3,_cor2}, Grey)
				      %% Line 223
				      apply 'draw_activity'/4
					  (Image, {Xmin,Xmax}, ActivityArea, _cor0)
				  let <Binary> =
				      %% Line 224
				      call 'egd':'render'
					  (Image, 'png')
				  in  do  %% Line 225
					  call 'egd':'destroy'
					      (Image)
					  Binary
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'activities0',4}}] )
	    -| ['compiler_generated'] )
	end
'draw_activity'/4 =
    %% Line 228
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Image,{Xmin,Xmax},Area = {'graph_area',_cor13,_cor14,Width,_cor15},Acts> when 'true' ->
	      let <White> =
		  %% Line 229
		  call 'egd':'color'
		      ({255,255,255})
	      in  let <Green> =
		      %% Line 230
		      call 'egd':'color'
			  ({0,250,0})
		  in  let <Black> =
			  %% Line 231
			  call 'egd':'color'
			      ({0,0,0})
		      in  let <_cor7> =
			      %% Line 233
			      call 'erlang':'-'
				  (Xmax, Xmin)
			  in  let <Dx> =
				  %% Line 233
				  call 'erlang':'/'
				      (Width, _cor7)
			      in  %% Line 235
				  apply 'draw_activity'/6
				      (_cor3, {Xmin,Xmax}, _cor1, {White,Green,Black}, Dx, _cor0)
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'draw_activity',4}}] )
	    -| ['compiler_generated'] )
	end
'draw_activity'/6 =
    %% Line 237
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_cor27,_cor28,_cor29,_cor30,_cor31,[_cor32|[]]> when 'true' ->
	      'ok'
	  %% Line 238
	  <Image,{Xmin,Xmax},Area = {'graph_area',X0,_cor33,_cor34,Height},{Cw,Cg,Cb},Dx,[{Xa1,State}|[{Xa2,Act2}|Acts]]> when 'true' ->
	      let <_cor7> =
		  %% Line 239
		  call 'erlang':'*'
		      (_cor1, Xa1)
	      in  let <_cor8> =
		      %% Line 239
		      call 'erlang':'+'
			  (X0, _cor7)
		  in  let <_cor6> =
			  %% Line 239
			  call 'erlang':'*'
			      (Xmin, _cor1)
		      in  let <_cor9> =
			      %% Line 239
			      call 'erlang':'-'
				  (_cor8, _cor6)
			  in  let <X1> =
				  %% Line 239
				  call 'erlang':'trunc'
				      (_cor9)
			      in  let <_cor12> =
				      %% Line 240
				      call 'erlang':'*'
					  (_cor1, Xa2)
				  in  let <_cor13> =
					  %% Line 240
					  call 'erlang':'+'
					      (X0, _cor12)
				      in  let <_cor11> =
					      %% Line 240
					      call 'erlang':'*'
						  (Xmin, _cor1)
					  in  let <_cor14> =
						  %% Line 240
						  call 'erlang':'-'
						      (_cor13, _cor11)
					      in  let <X2> =
						      %% Line 240
						      call 'erlang':'trunc'
							  (_cor14)
						  in  do  %% Line 242
							  case State of
							    %% Line 243
							    <'inactive'> when 'true' ->
								let <_cor16> =
								    %% Line 244
								    call 'erlang':'-'
									(Height, 1)
								in  do  %% Line 244
									call 'egd':'filledRectangle'
									    (_cor5, {X1,0}, {X2,_cor16}, Cw)
									let <_cor17> =
									    %% Line 245
									    call 'erlang':'-'
										(Height, 1)
									in  %% Line 245
									    call 'egd':'rectangle'
										(_cor5, {X1,0}, {X2,_cor17}, Cb)
							    %% Line 246
							    <'active'> when 'true' ->
								let <_cor18> =
								    %% Line 247
								    call 'erlang':'-'
									(Height, 1)
								in  do  %% Line 247
									call 'egd':'filledRectangle'
									    (_cor5, {X1,0}, {X2,_cor18}, Cg)
									let <_cor19> =
									    %% Line 248
									    call 'erlang':'-'
										(Height, 1)
									in  %% Line 248
									    call 'egd':'rectangle'
										(_cor5, {X1,0}, {X2,_cor19}, Cb)
							    ( <_cor20> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',State})
							      -| ['compiler_generated'] )
							  end
							  %% Line 250
							  apply 'draw_activity'/6
							      (_cor5, {Xmin,Xmax}, _cor3, {Cw,Cg,Cb}, _cor1, [{Xa2,Act2}|Acts])
	  ( <_cor26,_cor25,_cor24,_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'draw_activity',6}}] )
	    -| ['compiler_generated'] )
	end
'proc_lifetime'/5 =
    %% Line 259
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 260
	    call 'erlang':'round'
		(_cor4)
	in  let <_cor5> =
		%% Line 260
		call 'erlang':'round'
		    (_cor3)
	    in  let <Im> =
		    %% Line 260
		    call 'egd':'create'
			(_cor6, _cor5)
		in  let <Black> =
			%% Line 261
			call 'egd':'color'
			    (Im, {0,0,0})
		    in  let <Green> =
			    %% Line 262
			    call 'egd':'color'
				(Im, {0,255,0})
			in  let <_cor10> =
				%% Line 266
				call 'erlang':'-'
				    (_cor4, 1)
			    in  let <DX> =
				    %% Line 266
				    call 'erlang':'/'
					(_cor10, _cor0)
				in  let <_cor12> =
					%% Line 267
					call 'erlang':'*'
					    (DX, _cor2)
				    in  let <X1> =
					    %% Line 267
					    call 'erlang':'round'
						(_cor12)
					in  let <_cor14> =
						%% Line 268
						call 'erlang':'*'
						    (DX, _cor1)
					    in  let <X2> =
						    %% Line 268
						    call 'erlang':'round'
							(_cor14)
						in  let <_cor16> =
							%% Line 271
							call 'erlang':'-'
							    (_cor3, 1)
						    in  do  %% Line 271
							    call 'egd':'filledRectangle'
								(Im, {X1,0}, {X2,_cor16}, Green)
							    let <_cor17> =
								%% Line 272
								call 'erlang':'-'
								    (_cor3, 1)
							    in  do  %% Line 272
								    call 'egd':'rectangle'
									(Im, {X1,0}, {X2,_cor17}, Black)
								    let <Binary> =
									%% Line 274
									call 'egd':'render'
									    (Im, 'png')
								    in  do  %% Line 275
									    call 'egd':'destroy'
										(Im)
									    Binary
'percentage'/3 =
    %% Line 283
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 284
	    call 'erlang':'round'
		(_cor2)
	in  let <_cor3> =
		%% Line 284
		call 'erlang':'round'
		    (_cor1)
	    in  let <Im> =
		    %% Line 284
		    call 'egd':'create'
			(_cor4, _cor3)
		in  let <_72> =
			%% Line 311
			call 'code':'priv_dir'
			    ('percept')
		    in  let <Filename> =
			    %% Line 311
			    call 'filename':'join'
				([_72|[[102|[111|[110|[116|[115]]]]]|[[54|[120|[49|[49|[95|[108|[97|[116|[105|[110|[49|[46|[119|[105|[110|[103|[115|[102|[111|[110|[116]]]]]]]]]]]]]]]]]]]]]]]])
			in  let <Font> =
				%% Line 312
				call 'egd_font':'load'
				    (Filename)
			    in  let <Black> =
				    %% Line 286
				    call 'egd':'color'
					(Im, {0,0,0})
				in  let <Green> =
					%% Line 287
					call 'egd':'color'
					    (Im, {0,255,0})
				    in  let <_cor11> =
					    %% Line 291
					    call 'erlang':'-'
						(_cor2, 1)
					in  let <_cor9> =
						%% Line 291
						call 'erlang':'-'
						    (_cor2, 1)
					    in  let <_cor10> =
						    %% Line 291
						    call 'erlang':'*'
							(_cor0, _cor9)
						in  let <_cor12> =
							%% Line 291
							call 'erlang':'-'
							    (_cor11, _cor10)
						    in  let <X> =
							    %% Line 291
							    call 'erlang':'round'
								(_cor12)
							in  let <_cor15> =
								%% Line 294
								call 'erlang':'-'
								    (_cor2, 1)
							    in  let <_cor14> =
								    %% Line 294
								    call 'erlang':'-'
									(_cor1, 1)
								in  do  %% Line 294
									call 'egd':'filledRectangle'
									    (Im, {X,0}, {_cor15,_cor14}, Green)
									let <_191> =
									    %% Line 295
									    call 'egd_font':'size'
										(Font)
									in  %% Line 295
									    case _191 of
									      <{FontW,_cor33}> when 'true' ->
										  let <_cor17> =
										      %% Line 296
										      call 'erlang':'*'
											  (100, _cor0)
										  in  let <_cor18> =
											  %% Line 296
											  call 'erlang':'round'
											      (_cor17)
										      in  let <_cor19> =
											      %% Line 296
											      call 'io_lib':'format'
												  ([126|[46|[49|[48|[66|[32|[37]]]]]]], [_cor18|[]])
											  in  let <String> =
												  %% Line 296
												  call 'lists':'flatten'
												      (_cor19)
											      in  let <_cor24> =
												      %% Line 299
												      call 'erlang':'/'
													  (_cor2, 2)
												  in  let <_cor21> =
													  %% Line 299
													  call 'erlang':'length'
													      (String)
												      in  let <_cor22> =
													      %% Line 299
													      call 'erlang':'*'
														  (FontW, _cor21)
													  in  let <_cor23> =
														  %% Line 299
														  call 'erlang':'/'
														      (_cor22, 2)
													      in  let <_cor25> =
														      %% Line 299
														      call 'erlang':'-'
															  (_cor24, _cor23)
														  in  let <_cor26> =
															  %% Line 299
															  call 'erlang':'round'
															      (_cor25)
														      in  do  %% Line 298
															      apply 'text'/5
																  (Im, %% Line 299
																       {_cor26,0}, Font, String, Black)
															      let <_cor28> =
																  %% Line 303
																  call 'erlang':'-'
																      (_cor2, 1)
															      in  let <_cor27> =
																      %% Line 303
																      call 'erlang':'-'
																	  (_cor1, 1)
																  in  do  %% Line 303
																	  call 'egd':'rectangle'
																	      (Im, {X,0}, {_cor28,_cor27}, Black)
																	  let <Binary> =
																	      %% Line 305
																	      call 'egd':'render'
																		  (Im, 'png')
																	  in  do  %% Line 306
																		  call 'egd':'destroy'
																		      (Im)
																		  Binary
									      ( <_cor16> when 'true' ->
										    primop 'match_fail'
											({'badmatch',_191})
										-| ['compiler_generated'] )
									    end
'text'/5 =
    %% Line 314
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Image,{X,Y},Font,Text,Color> when 'true' ->
	      let <_cor5> =
		  %% Line 315
		  call 'erlang':'-'
		      (Y, 2)
	      in  %% Line 315
		  call 'egd':'text'
		      (_cor4, {X,_cor5}, _cor2, _cor1, _cor0)
	  ( <_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'text',5}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('percept_image')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('percept_image', _cor0)
end