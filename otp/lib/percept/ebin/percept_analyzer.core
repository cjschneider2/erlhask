module 'percept_analyzer' ['activities2count'/2,
			   'activities2count'/3,
			   'activities2count2'/2,
			   'analyze_activities'/2,
			   'mean'/1,
			   'minmax'/1,
			   'minmax_activities'/2,
			   'module_info'/0,
			   'module_info'/1,
			   'runnable_count'/1,
			   'runnable_count'/2,
			   'seconds2ts'/2,
			   'waiting_activities'/1]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{'timestamp',{'type',26,'tuple',[{'type',26,'non_neg_integer',[]}|[{'type',26,'non_neg_integer',[]}|[{'type',26,'non_neg_integer',[]}]]]},[]}],
		%% Line 27
		'type' =
		    %% Line 27
		    [{'true_mfa',{'type',27,'tuple',[{'type',27,'atom',[]}|[{'type',27,'atom',[]}|[{'type',27,'union',[{'type',27,'byte',[]}|[{'type',27,'list',[]}]]}]]]},[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{'state',{'type',28,'union',[{'atom',28,'active'}|[{'atom',28,'inactive'}]]},[]}],
		%% Line 29
		'type' =
		    %% Line 29
		    [{'scheduler_id',{'type',29,'tuple',[{'atom',29,'scheduler_id'}|[{'type',29,'non_neg_integer',[]}]]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{{'record','activity'},[{'record_field',36,{'atom',36,'timestamp'}}|[{'record_field',37,{'atom',37,'id'}}|[{'record_field',38,{'atom',38,'state'},{'atom',38,'undefined'}}|[{'record_field',39,{'atom',39,'where'},{'atom',39,'undefined'}}|[{'record_field',40,{'atom',40,'runnable_count'},{'integer',40,0}}]]]]],[]}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{{'record','information'},[{'record_field',44,{'atom',44,'id'}}|[{'record_field',45,{'atom',45,'name'},{'atom',45,'undefined'}}|[{'record_field',46,{'atom',46,'entry'},{'atom',46,'undefined'}}|[{'record_field',47,{'atom',47,'start'},{'atom',47,'undefined'}}|[{'record_field',48,{'atom',48,'stop'},{'atom',48,'undefined'}}|[{'record_field',49,{'atom',49,'parent'},{'atom',49,'undefined'}}|[{'record_field',50,{'atom',50,'children'},{'nil',50}}]]]]]]],[]}]]
'minmax'/1 =
    %% Line 55
    fun (_cor0) ->
	let <_cor5> =
	    %% Line 56
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[{X,_X_Y}|_cor2]> when 'true' ->
				let <_cor4> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [X|_cor4]
				      -| ['compiler_generated'] )
			    ( <[_cor1|_cor2]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor2)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor3> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor3})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  let <_cor11> =
		%% Line 57
		( letrec
		      'lc$^1'/1 =
			  fun (_cor9) ->
			      case _cor9 of
				<[{_X_X,Y}|_cor8]> when 'true' ->
				    let <_cor10> =
					apply 'lc$^1'/1
					    (_cor8)
				    in  ( [Y|_cor10]
					  -| ['compiler_generated'] )
				( <[_cor7|_cor8]> when 'true' ->
				      apply 'lc$^1'/1
					  (_cor8)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor9> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor9})
					-| [{'function_name',{'lc$^1',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^1'/1
			  (_cor0)
		  -| ['list_comprehension'] )
	    in  let <_cor16> =
		    %% Line 58
		    call 'lists':'min'
			(_cor5)
		in  let <_cor15> =
			%% Line 58
			call 'lists':'min'
			    (_cor11)
		    in  let <_cor14> =
			    %% Line 58
			    call 'lists':'max'
				(_cor5)
			in  let <_cor13> =
				%% Line 58
				call 'lists':'max'
				    (_cor11)
			    in  %% Line 58
				{_cor16,_cor15,_cor14,_cor13}
'mean'/1 =
    %% Line 67
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      {0,0,0}
	  %% Line 68
	  <[Value|[]]> when 'true' ->
	      {Value,0,1}
	  %% Line 69
	  <List> when 'true' ->
	      apply 'mean'/2
		  (List, {0,0,0})
	end
'mean'/2 =
    %% Line 71
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],{Sum,SumSquare,N}> when 'true' ->
	      let <Mean> =
		  %% Line 72
		  call 'erlang':'/'
		      (Sum, N)
	      in  let <_cor4> =
		      %% Line 73
		      call 'erlang':'*'
			  (Sum, Sum)
		  in  let <_cor5> =
			  %% Line 73
			  call 'erlang':'/'
			      (_cor4, N)
		      in  let <_cor6> =
			      %% Line 73
			      call 'erlang':'-'
				  (SumSquare, _cor5)
			  in  let <_cor3> =
				  %% Line 73
				  call 'erlang':'-'
				      (N, 1)
			      in  let <_cor7> =
				      %% Line 73
				      call 'erlang':'/'
					  (_cor6, _cor3)
				  in  let <StdDev> =
					  %% Line 73
					  call 'math':'sqrt'
					      (_cor7)
				      in  %% Line 74
					  {Mean,StdDev,N}
	  %% Line 75
	  <[Value|List],{Sum,SumSquare,N}> when 'true' ->
	      let <_cor12> =
		  %% Line 76
		  call 'erlang':'+'
		      (Sum, Value)
	      in  let <_cor10> =
		      %% Line 76
		      call 'erlang':'*'
			  (Value, Value)
		  in  let <_cor11> =
			  %% Line 76
			  call 'erlang':'+'
			      (SumSquare, _cor10)
		      in  let <_cor9> =
			      %% Line 76
			      call 'erlang':'+'
				  (N, 1)
			  in  %% Line 76
			      apply 'mean'/2
				  (List, {_cor12,_cor11,_cor9})
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'mean',2}}] )
	    -| ['compiler_generated'] )
	end
'activities2count2'/2 =
    %% Line 80
    fun (_cor1,_cor0) ->
	let <Start> =
	    %% Line 81
	    apply 'inactive_start_states'/1
		(_cor1)
	in  %% Line 82
	    apply 'activities2count2'/4
		(_cor1, _cor0, Start, [])
'activities2count2'/4 =
    %% Line 84
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_cor24,_cor25,Out> when 'true' ->
	      call 'lists':'reverse'
		  (Out)
	  %% Line 85
	  <[{'activity',Ts,Id,'active',_cor26,_cor27}|Acts],StartTs,{Proc,Port},Out>
	      when call 'erlang':'is_pid'
		    (Id) ->
	      let <_cor7> =
		  %% Line 86
		  call 'erlang':'+'
		      (Proc, 1)
	      in  let <_cor5> =
		      %% Line 86
		      call 'timer':'now_diff'
			  (Ts, StartTs)
		  in  let <_cor6> =
			  %% Line 86
			  call 'erlang':'/'
			      (_cor5, 1000000)
		      in  let <_cor4> =
			      %% Line 86
			      call 'erlang':'+'
				  (Proc, 1)
			  in  %% Line 86
			      apply 'activities2count2'/4
				  (Acts, StartTs, {_cor7,Port}, [{_cor6,_cor4,Port}|Out])
	  %% Line 87
	  <[{'activity',Ts,Id,'inactive',_cor28,_cor29}|Acts],StartTs,{Proc,Port},Out>
	      when call 'erlang':'is_pid'
		    (Id) ->
	      let <_cor11> =
		  %% Line 88
		  call 'erlang':'-'
		      (Proc, 1)
	      in  let <_cor9> =
		      %% Line 88
		      call 'timer':'now_diff'
			  (Ts, StartTs)
		  in  let <_cor10> =
			  %% Line 88
			  call 'erlang':'/'
			      (_cor9, 1000000)
		      in  let <_cor8> =
			      %% Line 88
			      call 'erlang':'-'
				  (Proc, 1)
			  in  %% Line 88
			      apply 'activities2count2'/4
				  (Acts, StartTs, {_cor11,Port}, [{_cor10,_cor8,Port}|Out])
	  %% Line 89
	  <[{'activity',Ts,Id,'active',_cor30,_cor31}|Acts],StartTs,{Proc,Port},Out>
	      when call 'erlang':'is_port'
		    (Id) ->
	      let <_cor15> =
		  %% Line 90
		  call 'erlang':'+'
		      (Port, 1)
	      in  let <_cor13> =
		      %% Line 90
		      call 'timer':'now_diff'
			  (Ts, StartTs)
		  in  let <_cor14> =
			  %% Line 90
			  call 'erlang':'/'
			      (_cor13, 1000000)
		      in  let <_cor12> =
			      %% Line 90
			      call 'erlang':'+'
				  (Port, 1)
			  in  %% Line 90
			      apply 'activities2count2'/4
				  (Acts, StartTs, {Proc,_cor15}, [{_cor14,Proc,_cor12}|Out])
	  %% Line 91
	  <[{'activity',Ts,Id,'inactive',_cor32,_cor33}|Acts],StartTs,{Proc,Port},Out>
	      when call 'erlang':'is_port'
		    (Id) ->
	      let <_cor19> =
		  %% Line 92
		  call 'erlang':'-'
		      (Port, 1)
	      in  let <_cor17> =
		      %% Line 92
		      call 'timer':'now_diff'
			  (Ts, StartTs)
		  in  let <_cor18> =
			  %% Line 92
			  call 'erlang':'/'
			      (_cor17, 1000000)
		      in  let <_cor16> =
			      %% Line 92
			      call 'erlang':'-'
				  (Port, 1)
			  in  %% Line 92
			      apply 'activities2count2'/4
				  (Acts, StartTs, {Proc,_cor19}, [{_cor18,Proc,_cor16}|Out])
	  ( <_cor23,_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21,_cor20})
		  -| [{'function_name',{'activities2count2',4}}] )
	    -| ['compiler_generated'] )
	end
'inactive_start_states'/1 =
    %% Line 95
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 96
	    call 'dict':'new'
		()
	in  let <D> =
		%% Line 96
		apply 'activity_start_states'/2
		    (_cor0, _cor1)
	    in  let <_cor11> =
		    %% Line 97
		    ( fun (_cor7,_cor6,_cor5) ->
			  case <_cor7,_cor6,_cor5> of
			    %% Line 98
			    <K,'inactive',{Procs,Ports}>
				when call 'erlang':'is_pid'
				      (K) ->
				let <_cor3> =
				    call 'erlang':'+'
					(Procs, 1)
				in  {_cor3,Ports}
			    %% Line 99
			    <K,'inactive',{Procs,Ports}>
				when call 'erlang':'is_port'
				      (K) ->
				let <_cor4> =
				    call 'erlang':'+'
					(Ports, 1)
				in  {Procs,_cor4}
			    %% Line 100
			    <_cor13,_cor14,{Procs,Ports}> when 'true' ->
				{Procs,Ports}
			    ( <_cor10,_cor9,_cor8> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor10,_cor9,_cor8})
				    -| [{'function_name',{'-inactive_start_states/1-fun-0-',3}}] )
			      -| ['compiler_generated'] )
			  end
		      -| [{'id',{0,0,'-inactive_start_states/1-fun-0-'}}] )
		in  %% Line 97
		    call 'dict':'fold'
			(_cor11, %% Line 101
				 {0,0}, %% Line 101
					D)
'activity_start_states'/2 =
    %% Line 102
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],D> when 'true' ->
	      D
	  %% Line 103
	  <[{'activity',_cor6,Id,State,_cor7,_cor8}|Acts],D> when 'true' ->
	      %% Line 104
	      case call 'dict':'is_key'
		       (Id, D) of
		%% Line 105
		<'true'> when 'true' ->
		    apply 'activity_start_states'/2
			(Acts, D)
		%% Line 106
		<'false'> when 'true' ->
		    let <_cor2> =
			call 'dict':'store'
			    (Id, State, D)
		    in  apply 'activity_start_states'/2
			    (Acts, _cor2)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'activity_start_states',2}}] )
	    -| ['compiler_generated'] )
	end
'activities2count'/2 =
    %% Line 122
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Acts,StartTs>
	      when call 'erlang':'is_list'
		    (Acts) ->
	      apply 'activities2count'/3
		  (Acts, StartTs, 'separated')
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'activities2count',2}}] )
	    -| ['compiler_generated'] )
	end
'activities2count'/3 =
    %% Line 124
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Acts,StartTs,Type>
	      when call 'erlang':'is_list'
		    (Acts) ->
	      apply 'activities2count_loop'/4
		  (Acts, {StartTs,{0,0}}, Type, [])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'activities2count',3}}] )
	    -| ['compiler_generated'] )
	end
'activities2count_loop'/4 =
    %% Line 126
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_cor20,_cor21,Out> when 'true' ->
	      call 'lists':'reverse'
		  (Out)
	  %% Line 127
	  <%% Line 128
	   [{'activity',Ts,Id,_cor22,_cor23,Rc}|Acts],%% Line 129
						      {StartTs,{Procs,Ports}},%% Line 129
									      'separated',%% Line 129
											  Out> when 'true' ->
	      let <_cor4> =
		  %% Line 131
		  call 'timer':'now_diff'
		      (Ts, StartTs)
	      in  let <Time> =
		      %% Line 131
		      call 'erlang':'/'
			  (_cor4, 1000000)
		  in  %% Line 132
		      case Id of
			%% Line 133
			<_cor24>
			    when call 'erlang':'is_port'
				  (Id) ->
			    let <Entry> = {%% Line 134
				 Time,%% Line 134
				      Procs,%% Line 134
					    Rc}
			    in  %% Line 135
				apply 'activities2count_loop'/4
				    (Acts, {StartTs,{Procs,Rc}}, 'separated', [Entry|Out])
			%% Line 136
			<_cor27>
			    when call 'erlang':'is_pid'
				  (Id) ->
			    let <Entry> = {%% Line 137
				 Time,%% Line 137
				      Rc,%% Line 137
					 Ports}
			    in  %% Line 138
				apply 'activities2count_loop'/4
				    (Acts, {StartTs,{Rc,Ports}}, 'separated', [Entry|Out])
			%% Line 139
			<_cor30> when 'true' ->
			    %% Line 140
			    apply 'activities2count_loop'/4
				(Acts, {StartTs,{Procs,Ports}}, 'separated', Out)
		      end
	  %% Line 142
	  <%% Line 143
	   [{'activity',Ts,Id,_cor31,_cor32,Rc}|Acts],%% Line 144
						      {StartTs,{Procs,Ports}},%% Line 144
									      'summated',%% Line 144
											 Out> when 'true' ->
	      let <_cor9> =
		  %% Line 146
		  call 'timer':'now_diff'
		      (Ts, StartTs)
	      in  let <Time> =
		      %% Line 146
		      call 'erlang':'/'
			  (_cor9, 1000000)
		  in  %% Line 147
		      case Id of
			%% Line 148
			<_cor33>
			    when call 'erlang':'is_port'
				  (Id) ->
			    let <_cor11> =
				%% Line 149
				call 'erlang':'+'
				    (Procs, Rc)
			    in  let <Entry> = {%% Line 149
				     Time,_cor11}
				in  %% Line 150
				    apply 'activities2count_loop'/4
					(Acts, {StartTs,{Procs,Rc}}, 'summated', [Entry|Out])
			%% Line 151
			<_cor36>
			    when call 'erlang':'is_pid'
				  (Id) ->
			    let <_cor13> =
				%% Line 152
				call 'erlang':'+'
				    (Rc, Ports)
			    in  let <Entry> = {%% Line 152
				     Time,_cor13}
				in  %% Line 153
				    apply 'activities2count_loop'/4
					(Acts, {StartTs,{Rc,Ports}}, 'summated', [Entry|Out])
			( <_cor15> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor15})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor19,_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17,_cor16})
		  -| [{'function_name',{'activities2count_loop',4}}] )
	    -| ['compiler_generated'] )
	end
'waiting_activities'/1 =
    %% Line 167
    fun (_cor0) ->
	let <ListedMfas> =
	    %% Line 168
	    apply 'waiting_activities_mfa_list'/2
		(_cor0, [])
	in  let <_cor8> =
		%% Line 170
		( fun (_cor5,_cor4) ->
		      %% Line 171
		      case call 'erlang':'get'
			       ({'waiting_mfa',_cor5}) of
			<{Total,WaitingTimes}> when 'true' ->
			    do  %% Line 174
				call 'erlang':'erase'
				    ({'waiting_mfa',_cor5})
				let <Stats> =
				    %% Line 177
				    apply 'mean'/1
					(WaitingTimes)
				in  %% Line 179
				    [{Total,_cor5,Stats}|_cor4]
			( <_cor2> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor2})
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-waiting_activities/1-fun-0-'}}] )
	    in  let <Unsorted> =
		    %% Line 169
		    call 'lists':'foldl'
			(_cor8, %% Line 180
				[], %% Line 180
				    ListedMfas)
		in  let <_cor14> =
			%% Line 181
			( fun (_cor11,_cor10) ->
			      case <_cor11,_cor10> of
				<{A,_cor16,_cor17},{B,_cor18,_cor19}> when 'true' ->
				    %% Line 182
				    case <> of
				      %% Line 183
				      <>
					  when call 'erlang':'>'
						(A,
						 B) ->
					  'true'
				      %% Line 184
				      <> when 'true' ->
					  'false'
				    end
				( <_cor13,_cor12> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor13,_cor12})
					-| [{'function_name',{'-waiting_activities/1-fun-1-',2}}] )
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-waiting_activities/1-fun-1-'}}] )
		    in  %% Line 181
			call 'lists':'sort'
			    (_cor14, %% Line 186
				     Unsorted)
'waiting_activities_mfa_list'/2 =
    %% Line 197
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],ListedMfas> when 'true' ->
	      ListedMfas
	  %% Line 198
	  <[Activity|Activities],ListedMfas> when 'true' ->
	      %% Line 199
	      case Activity of
		<{'activity',Time,Pid,Act,MFA,_cor22}> when 'true' ->
		    %% Line 200
		    case Act of
		      %% Line 201
		      <'active'> when 'true' ->
			  %% Line 202
			  apply 'waiting_activities_mfa_list'/2
			      (Activities, ListedMfas)
		      %% Line 203
		      <'inactive'> when 'true' ->
			  %% Line 206
			  case Activities of
			    %% Line 207
			    <[]> when 'true' ->
				%% Line 208
				case call 'percept_db':'select'
					 ('information', Pid) of
				  <[Info|[]]> when 'true' ->
				      %% Line 209
				      ( case Info of
					  ( <( {'information',_cor23,_cor24,_cor25,_cor26,_rec0,_cor27,_cor28}
					       -| ['compiler_generated'] )> when 'true' ->
						let <_cor35,Waited> =
						    case _rec0 of
						      %% Line 210
						      <'undefined'> when 'true' ->
							  let <_cor6> =
							      %% Line 213
							      call 'percept_db':'select'
								  ({'system','stop_ts'})
							  in  let <_cor7> =
								  %% Line 212
								  call 'timer':'now_diff'
								      (_cor6, %% Line 214
									      Time)
							      in  let <Waited> =
								      %% Line 214
								      call 'erlang':'/'
									  (_cor7, 1000000)
								  in  <Waited,Waited>
						      %% Line 215
						      <Time2> when 'true' ->
							  let <_cor9> =
							      %% Line 216
							      call 'timer':'now_diff'
								  (Time2, Time)
							  in  let <Waited> =
								  %% Line 216
								  call 'erlang':'/'
								      (_cor9, 1000000)
							      in  <Waited,Waited>
						    end
						in  %% Line 218
						    case call 'erlang':'get'
							     ({'waiting_mfa',MFA}) of
						      %% Line 219
						      <'undefined'> when 'true' ->
							  do  %% Line 220
							      call 'erlang':'put'
								  ({'waiting_mfa',MFA}, {Waited,[Waited|[]]})
							      %% Line 221
							      [MFA|ListedMfas]
						      %% Line 222
						      <{Total,TimedMfa}> when 'true' ->
							  let <_cor12> =
							      %% Line 223
							      call 'erlang':'+'
								  (Total, Waited)
							  in  do  %% Line 223
								  call 'erlang':'put'
								      ({'waiting_mfa',MFA}, {_cor12,[Waited|TimedMfa]})
								  %% Line 224
								  ListedMfas
						      ( <_cor13> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_cor13})
							-| ['compiler_generated'] )
						    end
					    -| ['compiler_generated'] )
					  ( <_cor29> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','information'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  ( <_cor3> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor3})
				    -| ['compiler_generated'] )
				end
			    %% Line 226
			    <[{'activity',Time2,_cor30,'active',_cor31,_cor32}|_cor33]>
				when call 'erlang':'=:='
				      (_cor30,
				       Pid) ->
				let <_cor14> =
				    %% Line 228
				    call 'timer':'now_diff'
					(Time2, Time)
				in  let <Waited> =
					%% Line 228
					call 'erlang':'/'
					    (_cor14, 1000000)
				    in  %% Line 231
					case call 'erlang':'get'
						 ({'waiting_mfa',MFA}) of
					  %% Line 232
					  <'undefined'> when 'true' ->
					      do  %% Line 234
						  call 'erlang':'put'
						      ({'waiting_mfa',MFA}, {Waited,[Waited|[]]})
						  %% Line 235
						  apply 'waiting_activities_mfa_list'/2
						      (Activities, [MFA|ListedMfas])
					  %% Line 236
					  <{Total,TimedMfa}> when 'true' ->
					      let <_cor16> =
						  %% Line 237
						  call 'erlang':'+'
						      (Total, Waited)
					      in  do  %% Line 237
						      call 'erlang':'put'
							  ({'waiting_mfa',MFA}, {_cor16,[Waited|TimedMfa]})
						      %% Line 238
						      apply 'waiting_activities_mfa_list'/2
							  (Activities, ListedMfas)
					  ( <_cor17> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor17})
					    -| ['compiler_generated'] )
					end
			    %% Line 240
			    <_cor34> when 'true' ->
				'error'
			  end
		      ( <_cor19> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor19})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20})
		  -| [{'function_name',{'waiting_activities_mfa_list',2}}] )
	    -| ['compiler_generated'] )
	end
'seconds2ts'/2 =
    %% Line 254
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Seconds,{Ms,S,Us}> when 'true' ->
	      let <_cor2> =
		  %% Line 256
		  call 'erlang':'trunc'
		      (Seconds)
	      in  let <MsInteger> =
		      %% Line 256
		      call 'erlang':'div'
			  (_cor2, 1000000)
		  in  let <SInteger> =
			  %% Line 259
			  call 'erlang':'trunc'
			      (Seconds)
		      in  let <_cor5> =
			      %% Line 262
			      call 'erlang':'-'
				  (Seconds, SInteger)
			  in  let <_cor6> =
				  %% Line 262
				  call 'erlang':'*'
				      (_cor5, 1000000)
			      in  let <UsInteger> =
				      %% Line 262
				      call 'erlang':'trunc'
					  (_cor6)
				  in  let <_cor8> =
					  %% Line 266
					  call 'erlang':'+'
					      (UsInteger, Us)
				      in  let <UsOut> =
					      %% Line 266
					      call 'erlang':'rem'
						  (_cor8, 1000000)
					  in  let <_cor12> =
						  %% Line 267
						  call 'erlang':'+'
						      (SInteger, S)
					      in  let <_cor10> =
						      %% Line 267
						      call 'erlang':'+'
							  (UsInteger, Us)
						  in  let <_cor11> =
							  %% Line 267
							  call 'erlang':'div'
							      (_cor10, 1000000)
						      in  let <_cor13> =
							      %% Line 267
							      call 'erlang':'+'
								  (_cor12, _cor11)
							  in  let <SOut> =
								  %% Line 267
								  call 'erlang':'rem'
								      (_cor13, 1000000)
							      in  let <_cor20> =
								      %% Line 268
								      call 'erlang':'+'
									  (MsInteger, Ms)
								  in  let <_cor17> =
									  %% Line 268
									  call 'erlang':'+'
									      (SInteger, S)
								      in  let <_cor15> =
									      %% Line 268
									      call 'erlang':'+'
										  (UsInteger, Us)
									  in  let <_cor16> =
										  %% Line 268
										  call 'erlang':'div'
										      (_cor15, 1000000)
									      in  let <_cor18> =
										      %% Line 268
										      call 'erlang':'+'
											  (_cor17, _cor16)
										  in  let <_cor19> =
											  %% Line 268
											  call 'erlang':'div'
											      (_cor18, 1000000)
										      in  let <MsOut> =
											      %% Line 268
											      call 'erlang':'+'
												  (_cor20, _cor19)
											  in  %% Line 270
											      {MsOut,SOut,UsOut}
	  ( <_cor23,_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22})
		  -| [{'function_name',{'seconds2ts',2}}] )
	    -| ['compiler_generated'] )
	end
'analyze_activities'/2 =
    %% Line 281
    fun (_cor1,_cor0) ->
	let <RunnableCount> =
	    %% Line 282
	    apply 'runnable_count'/2
		(_cor0, 0)
	in  %% Line 283
	    apply 'analyze_runnable_activities'/2
		(_cor1, RunnableCount)
'runnable_count'/1 =
    %% Line 299
    fun (_cor0) ->
	let <Threshold> =
	    %% Line 300
	    apply 'runnable_count_threshold'/1
		(_cor0)
	in  %% Line 301
	    apply 'runnable_count'/3
		(_cor0, Threshold, [])
'runnable_count_threshold'/1 =
    %% Line 303
    fun (_cor0) ->
	let <CountedActs> =
	    %% Line 304
	    apply 'runnable_count'/2
		(_cor0, 0)
	in  let <_cor6> =
		%% Line 305
		( letrec
		      'lc$^0'/1 =
			  fun (_cor4) ->
			      case _cor4 of
				<[{C,_cor10}|_cor3]> when 'true' ->
				    let <_cor5> =
					apply 'lc$^0'/1
					    (_cor3)
				    in  ( [C|_cor5]
					  -| ['compiler_generated'] )
				( <[_cor2|_cor3]> when 'true' ->
				      apply 'lc$^0'/1
					  (_cor3)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor4> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor4})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (CountedActs)
		  -| ['list_comprehension'] )
	    in  let <Min> =
		    %% Line 306
		    call 'lists':'min'
			(_cor6)
		in  %% Line 307
		    call 'erlang':'-'
			(0, Min)
'runnable_count'/2 =
    %% Line 311
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Activities,StartCount>
	      when call 'erlang':'is_integer'
		    (StartCount) ->
	      %% Line 312
	      apply 'runnable_count'/3
		  (Activities, StartCount, [])
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'runnable_count',2}}] )
	    -| ['compiler_generated'] )
	end
'runnable_count'/3 =
    %% Line 313
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_cor13,Out> when 'true' ->
	      %% Line 314
	      call 'lists':'reverse'
		  (Out)
	  %% Line 315
	  <[A|As],PrevCount,Out> when 'true' ->
	      %% Line 316
	      ( case A of
		  ( <( {'activity',_cor14,_cor15,_rec1,_cor16,_cor17}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec1 of
			  %% Line 317
			  <'active'> when 'true' ->
			      let <_cor6> =
				  %% Line 318
				  call 'erlang':'+'
				      (PrevCount, 1)
			      in  let <_cor5> =
				      %% Line 318
				      call 'erlang':'+'
					  (PrevCount, 1)
				  in  %% Line 318
				      apply 'runnable_count'/3
					  (As, _cor6, [{_cor5,A}|Out])
			  %% Line 319
			  <'inactive'> when 'true' ->
			      let <_cor8> =
				  %% Line 320
				  call 'erlang':'-'
				      (PrevCount, 1)
			      in  let <_cor7> =
				      %% Line 320
				      call 'erlang':'-'
					  (PrevCount, 1)
				  in  %% Line 320
				      apply 'runnable_count'/3
					  (As, _cor8, [{_cor7,A}|Out])
			  ( <_cor9> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor9})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor18> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','activity'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'runnable_count',3}}] )
	    -| ['compiler_generated'] )
	end
'analyze_runnable_activities'/2 =
    %% Line 328
    fun (_cor1,_cor0) ->
	%% Line 329
	apply 'analyze_runnable_activities'/3
	    (_cor1, _cor0, [])
'analyze_runnable_activities'/3 =
    %% Line 331
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_z,[],Out> when 'true' ->
	      %% Line 332
	      call 'lists':'reverse'
		  (Out)
	  %% Line 333
	  <Threshold,[{Rc,Act}|RunnableActs],Out> when 'true' ->
	      %% Line 334
	      case <> of
		%% Line 335
		<>
		    when call 'erlang':'=<'
			  (Rc,
			   Threshold) ->
		    %% Line 336
		    apply 'analyze_runnable_activities'/3
			(Threshold, RunnableActs, [{Rc,Act}|Out])
		%% Line 337
		<> when 'true' ->
		    %% Line 338
		    apply 'analyze_runnable_activities'/3
			(Threshold, RunnableActs, Out)
	      end
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'analyze_runnable_activities',3}}] )
	    -| ['compiler_generated'] )
	end
'minmax_activities'/2 =
    %% Line 357
    fun (_cor1,_cor0) ->
	%% Line 358
	apply 'minmax_activities'/3
	    (_cor1, _cor0, {_cor0,_cor0})
'minmax_activities'/3 =
    %% Line 359
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_cor15,Out> when 'true' ->
	      %% Line 360
	      Out
	  %% Line 361
	  <[A|Acts],Count,{Min,Max}> when 'true' ->
	      %% Line 362
	      ( case A of
		  ( <( {'activity',_cor16,_cor17,_rec2,_cor18,_cor19}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec2 of
			  %% Line 363
			  <'active'> when 'true' ->
			      let <_cor7> =
				  %% Line 364
				  call 'erlang':'+'
				      (Count, 1)
			      in  let <_cor5> =
				      %% Line 364
				      call 'erlang':'+'
					  (Count, 1)
				  in  let <_cor6> =
					  %% Line 364
					  call 'lists':'max'
					      ([_cor5|[Max|[]]])
				      in  %% Line 364
					  apply 'minmax_activities'/3
					      (Acts, _cor7, {Min,_cor6})
			  %% Line 365
			  <'inactive'> when 'true' ->
			      let <_cor10> =
				  %% Line 366
				  call 'erlang':'-'
				      (Count, 1)
			      in  let <_cor8> =
				      %% Line 366
				      call 'erlang':'-'
					  (Count, 1)
				  in  let <_cor9> =
					  %% Line 366
					  call 'lists':'min'
					      ([_cor8|[Min|[]]])
				      in  %% Line 366
					  apply 'minmax_activities'/3
					      (Acts, _cor10, {_cor9,Max})
			  ( <_cor11> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor11})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor20> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','activity'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'minmax_activities',3}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('percept_analyzer')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('percept_analyzer', _cor0)
end