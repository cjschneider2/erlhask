module 'egd' ['arc'/4,
	      'arc'/5,
	      'color'/1,
	      'color'/2,
	      'create'/2,
	      'destroy'/1,
	      'filledEllipse'/4,
	      'filledRectangle'/4,
	      'filledTriangle'/5,
	      'information'/1,
	      'line'/4,
	      'module_info'/0,
	      'module_info'/1,
	      'polygon'/3,
	      'rectangle'/4,
	      'render'/1,
	      'render'/2,
	      'render'/3,
	      'save'/2,
	      'text'/5]
    attributes [%% Line 19
		'type' =
		    %% Line 19
		    [{'rgba_float',{'type',19,'tuple',[{'type',19,'float',[]}|[{'type',19,'float',[]}|[{'type',19,'float',[]}|[{'type',19,'float',[]}]]]]},[]}],
		%% Line 20
		'type' =
		    %% Line 20
		    [{'rgba_byte',{'type',20,'tuple',[{'type',20,'byte',[]}|[{'type',20,'byte',[]}|[{'type',20,'byte',[]}|[{'type',20,'byte',[]}]]]]},[]}],
		%% Line 21
		'type' =
		    %% Line 21
		    [{'rgb',{'type',21,'tuple',[{'type',21,'byte',[]}|[{'type',21,'byte',[]}|[{'type',21,'byte',[]}]]]},[]}],
		%% Line 23
		'type' =
		    %% Line 23
		    [{{'record','image_object'},[{'record_field',24,{'atom',24,'type'}}|[{'record_field',25,{'atom',25,'points'},{'nil',25}}|[{'record_field',26,{'atom',26,'span'}}|[{'record_field',27,{'atom',27,'internals'}}|[{'record_field',28,{'atom',28,'intervals'}}|[{'record_field',29,{'atom',29,'color'}}]]]]]],[]}],
		%% Line 31
		'type' =
		    %% Line 31
		    [{{'record','image'},[{'record_field',32,{'atom',32,'width'}}|[{'record_field',33,{'atom',33,'height'}}|[{'record_field',34,{'atom',34,'objects'},{'nil',34}}|[{'record_field',35,{'atom',35,'background'},{'tuple',35,[{'float',35,1.00000000000000000000e+00}|[{'float',35,1.00000000000000000000e+00}|[{'float',35,1.00000000000000000000e+00}|[{'float',35,1.00000000000000000000e+00}]]]]}}|[{'record_field',36,{'atom',36,'image'}}]]]]],[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{'egd_image',{'type',50,'pid',[]},[]}],
		%% Line 51
		'type' =
		    %% Line 51
		    [{'point',{'type',51,'tuple',[{'type',51,'non_neg_integer',[]}|[{'type',51,'non_neg_integer',[]}]]},[]}],
		%% Line 52
		'type' =
		    %% Line 52
		    [{'render_option',{'type',52,'union',[{'type',52,'tuple',[{'atom',52,'render_engine'}|[{'atom',52,'opaque'}]]}|[{'type',52,'tuple',[{'atom',52,'render_engine'}|[{'atom',52,'alpha'}]]}]]},[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{'color',{'type',53,'tuple',[{'type',53,'float',[]}|[{'type',53,'float',[]}|[{'type',53,'float',[]}|[{'type',53,'float',[]}]]]]},[]}],
		%% Line 64
		'spec' =
		    %% Line 64
		    [{{'create',2},[{'type',64,'fun',[{'type',64,'product',[{'ann_type',64,[{'var',64,'Width'}|[{'type',64,'integer',[]}]]}|[{'ann_type',64,[{'var',64,'Height'}|[{'type',64,'integer',[]}]]}]]}|[{'type',64,'egd_image',[]}]]}]}],
		%% Line 73
		'spec' =
		    %% Line 73
		    [{{'destroy',1},[{'type',73,'fun',[{'type',73,'product',[{'ann_type',73,[{'var',73,'Image'}|[{'type',73,'egd_image',[]}]]}]}|[{'atom',73,'ok'}]]}]}],
		%% Line 83
		'spec' =
		    %% Line 83
		    [{{'render',1},[{'type',83,'fun',[{'type',83,'product',[{'ann_type',83,[{'var',83,'Image'}|[{'type',83,'egd_image',[]}]]}]}|[{'type',83,'binary',[]}]]}]}],
		%% Line 99
		'spec' =
		    %% Line 99
		    [{{'render',3},[{'type',99,'fun',[{'type',99,'product',[{'ann_type',100,[{'var',100,'Image'}|[{'type',100,'egd_image',[]}]]}|[{'ann_type',101,[{'var',101,'Type'}|[{'type',101,'union',[{'atom',101,'png'}|[{'atom',101,'raw_bitmap'}|[{'atom',101,'eps'}]]]}]]}|[{'ann_type',102,[{'var',102,'Options'}|[{'type',102,'list',[{'type',102,'render_option',[]}]}]]}]]]}|[{'type',102,'binary',[]}]]}]}],
		%% Line 121
		'spec' =
		    %% Line 121
		    [{{'line',4},[{'type',121,'fun',[{'type',121,'product',[{'ann_type',122,[{'var',122,'Image'}|[{'type',122,'egd_image',[]}]]}|[{'ann_type',123,[{'var',123,'P1'}|[{'type',123,'point',[]}]]}|[{'ann_type',124,[{'var',124,'P2'}|[{'type',124,'point',[]}]]}|[{'ann_type',125,[{'var',125,'Color'}|[{'type',125,'color',[]}]]}]]]]}|[{'atom',125,'ok'}]]}]}],
		%% Line 137
		'spec' =
		    %% Line 137
		    [{{'color',1},[{'type',137,'fun',[{'type',137,'product',[{'ann_type',137,[{'var',137,'Value'}|[{'type',137,'union',[{'type',137,'tuple',[{'type',137,'byte',[]}|[{'type',137,'byte',[]}|[{'type',137,'byte',[]}]]]}|[{'type',137,'tuple',[{'type',137,'byte',[]}|[{'type',137,'byte',[]}|[{'type',137,'byte',[]}|[{'type',137,'byte',[]}]]]]}|[{'type',137,'atom',[]}]]]}]]}]}|[{'type',138,'color',[]}]]}]}]]
'create'/2 =
    %% Line 66
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 67
	    ( fun () ->
		  let <_cor3> =
		      call 'erlang':'trunc'
			  (_cor1)
		  in  let <_cor2> =
			  call 'erlang':'trunc'
			      (_cor0)
		      in  apply 'init'/2
			      (_cor3, _cor2)
	      -| [{'id',{0,0,'-create/2-fun-0-'}}] )
	in  %% Line 67
	    call 'erlang':'spawn_link'
		(_cor4)
'destroy'/1 =
    %% Line 75
    fun (_cor0) ->
	do  %% Line 76
	    apply 'cast'/2
		(_cor0, 'destroy')
	    %% Line 77
	    'ok'
'render'/1 =
    %% Line 85
    fun (_cor0) ->
	%% Line 86
	apply 'render'/3
	    (_cor0, 'png', [{'render_engine','opaque'}])
'render'/2 =
    %% Line 91
    fun (_cor1,_cor0) ->
	%% Line 92
	apply 'render'/3
	    (_cor1, _cor0, [{'render_engine','opaque'}])
'render'/3 =
    %% Line 104
    fun (_cor2,_cor1,_cor0) ->
	%% Line 105
	case call 'proplists':'lookup'
		 ('render_engine', _cor0) of
	  <{'render_engine',RenderType}> when 'true' ->
	      %% Line 106
	      apply 'call'/2
		  (_cor2, {'render',_cor1,RenderType})
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'information'/1 =
    %% Line 114
    fun (_cor0) ->
	do  %% Line 115
	    apply 'cast'/2
		(_cor0, 'information')
	    %% Line 116
	    'ok'
'line'/4 =
    %% Line 127
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 128
	    apply 'cast'/2
		(_cor3, {'line',_cor2,_cor1,_cor0})
	    %% Line 129
	    'ok'
'color'/1 =
    %% Line 140
    fun (_cor0) ->
	%% Line 141
	call 'egd_primitives':'color'
	    (_cor0)
'color'/2 =
    %% Line 147
    fun (_cor1,_cor0) ->
	%% Line 148
	call 'egd_primitives':'color'
	    (_cor0)
'text'/5 =
    %% Line 153
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 154
	    apply 'cast'/2
		(_cor4, {'text',_cor3,_cor2,_cor1,_cor0})
	    %% Line 155
	    'ok'
'rectangle'/4 =
    %% Line 160
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 161
	    apply 'cast'/2
		(_cor3, {'rectangle',_cor2,_cor1,_cor0})
	    %% Line 162
	    'ok'
'filledRectangle'/4 =
    %% Line 167
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 168
	    apply 'cast'/2
		(_cor3, {'filled_rectangle',_cor2,_cor1,_cor0})
	    %% Line 169
	    'ok'
'filledEllipse'/4 =
    %% Line 174
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 175
	    apply 'cast'/2
		(_cor3, {'filled_ellipse',_cor2,_cor1,_cor0})
	    %% Line 176
	    'ok'
'filledTriangle'/5 =
    %% Line 182
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 183
	    apply 'cast'/2
		(_cor4, {'filled_triangle',_cor3,_cor2,_cor1,_cor0})
	    %% Line 184
	    'ok'
'polygon'/3 =
    %% Line 190
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 191
	    apply 'cast'/2
		(_cor2, {'polygon',_cor1,_cor0})
	    %% Line 192
	    'ok'
'arc'/4 =
    %% Line 198
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 199
	    apply 'cast'/2
		(_cor3, {'arc',_cor2,_cor1,_cor0})
	    %% Line 200
	    'ok'
'arc'/5 =
    %% Line 206
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 207
	    apply 'cast'/2
		(_cor4, {'arc',_cor3,_cor2,_cor1,_cor0})
	    %% Line 208
	    'ok'
'save'/2 =
    %% Line 213
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Binary,Filename>
	      when call 'erlang':'is_binary'
		    (Binary) ->
	      do  %% Line 214
		  call 'file':'write_file'
		      (Filename, Binary)
		  %% Line 215
		  'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'save',2}}] )
	    -| ['compiler_generated'] )
	end
'cast'/2 =
    %% Line 220
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 221
	    call 'erlang':'self'
		()
	in  %% Line 221
	    call 'erlang':'!'
		(_cor1, {'egd',_cor2,_cor0})
'call'/2 =
    %% Line 223
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 224
	    call 'erlang':'self'
		()
	in  do  %% Line 224
		call 'erlang':'!'
		    (_cor1, {'egd',_cor2,_cor0})
		%% Line 225
		receive
		  <{'egd',_cor5,Result}>
		      when call 'erlang':'=:='
			    (_cor5,
			     _cor1) ->
		      Result
		after 'infinity' ->
		  'true'
'init'/2 =
    %% Line 231
    fun (_cor1,_cor0) ->
	let <Image> =
	    %% Line 232
	    call 'egd_primitives':'create'
		(_cor1, _cor0)
	in  %% Line 233
	    apply 'loop'/1
		(Image)
'loop'/1 =
    %% Line 235
    fun (_cor0) ->
	%% Line 236
	receive
	  %% Line 238
	  <{'egd',_X_Pid,'destroy'}> when 'true' ->
	      'ok'
	  %% Line 241
	  <{'egd',Pid,{'render',BinaryType,RenderType}}> when 'true' ->
	      %% Line 242
	      case BinaryType of
		%% Line 243
		<'raw_bitmap'> when 'true' ->
		    let <Bitmap> =
			%% Line 244
			call 'egd_render':'binary'
			    (_cor0, RenderType)
		    in  let <_cor2> =
			    %% Line 245
			    call 'erlang':'self'
				()
			in  do  %% Line 245
				call 'erlang':'!'
				    (Pid, {'egd',_cor2,Bitmap})
				%% Line 246
				apply 'loop'/1
				    (_cor0)
		%% Line 247
		<'eps'> when 'true' ->
		    let <Eps> =
			%% Line 248
			call 'egd_render':'eps'
			    (_cor0)
		    in  let <_cor4> =
			    %% Line 249
			    call 'erlang':'self'
				()
			in  do  %% Line 249
				call 'erlang':'!'
				    (Pid, {'egd',_cor4,Eps})
				%% Line 250
				apply 'loop'/1
				    (_cor0)
		%% Line 251
		<'png'> when 'true' ->
		    let <Bitmap> =
			%% Line 252
			call 'egd_render':'binary'
			    (_cor0, RenderType)
		    in  %% Line 254
			( case _cor0 of
			    ( <( {'image',_rec0,_cor24,_cor25,_cor26,_cor27}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <Png> =
				      call 'egd_png':'binary'
					  (_rec0, _cor24, %% Line 256
							  Bitmap)
				  in  let <_cor11> =
					  %% Line 257
					  call 'erlang':'self'
					      ()
				      in  do  %% Line 257
					      call 'erlang':'!'
						  (Pid, {'egd',_cor11,Png})
					      %% Line 258
					      apply 'loop'/1
						  (_cor0)
			      -| ['compiler_generated'] )
			    ( <_cor28> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','image'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		%% Line 259
		<Unhandled> when 'true' ->
		    let <_cor12> =
			%% Line 260
			call 'erlang':'self'
			    ()
		    in  do  %% Line 260
			    call 'erlang':'!'
				(Pid, {'egd',_cor12,{'error',{'format',Unhandled}}})
			    %% Line 261
			    apply 'loop'/1
				(_cor0)
	      end
	  %% Line 265
	  <{'egd',_X_Pid,{'line',P1,P2,C}}> when 'true' ->
	      let <_cor14> =
		  %% Line 266
		  call 'egd_primitives':'line'
		      (_cor0, P1, P2, C)
	      in  %% Line 266
		  apply 'loop'/1
		      (_cor14)
	  %% Line 267
	  <{'egd',_X_Pid,{'text',P,Font,Text,C}}> when 'true' ->
	      let <_cor15> =
		  %% Line 268
		  call 'egd_primitives':'text'
		      (_cor0, P, Font, Text, C)
	      in  %% Line 268
		  apply 'loop'/1
		      (_cor15)
	  %% Line 269
	  <{'egd',_X_Pid,{'filled_ellipse',P1,P2,C}}> when 'true' ->
	      let <_cor16> =
		  %% Line 270
		  call 'egd_primitives':'filledEllipse'
		      (_cor0, P1, P2, C)
	      in  %% Line 270
		  apply 'loop'/1
		      (_cor16)
	  %% Line 271
	  <{'egd',_X_Pid,{'filled_rectangle',P1,P2,C}}> when 'true' ->
	      let <_cor17> =
		  %% Line 272
		  call 'egd_primitives':'filledRectangle'
		      (_cor0, P1, P2, C)
	      in  %% Line 272
		  apply 'loop'/1
		      (_cor17)
	  %% Line 273
	  <{'egd',_X_Pid,{'filled_triangle',P1,P2,P3,C}}> when 'true' ->
	      let <_cor18> =
		  %% Line 274
		  call 'egd_primitives':'filledTriangle'
		      (_cor0, P1, P2, P3, C)
	      in  %% Line 274
		  apply 'loop'/1
		      (_cor18)
	  %% Line 275
	  <{'egd',_X_Pid,{'polygon',Pts,C}}> when 'true' ->
	      let <_cor19> =
		  %% Line 276
		  call 'egd_primitives':'polygon'
		      (_cor0, Pts, C)
	      in  %% Line 276
		  apply 'loop'/1
		      (_cor19)
	  %% Line 277
	  <{'egd',_X_Pid,{'arc',P1,P2,C}}> when 'true' ->
	      let <_cor20> =
		  %% Line 278
		  call 'egd_primitives':'arc'
		      (_cor0, P1, P2, C)
	      in  %% Line 278
		  apply 'loop'/1
		      (_cor20)
	  %% Line 279
	  <{'egd',_X_Pid,{'arc',P1,P2,D,C}}> when 'true' ->
	      let <_cor21> =
		  %% Line 280
		  call 'egd_primitives':'arc'
		      (_cor0, P1, P2, D, C)
	      in  %% Line 280
		  apply 'loop'/1
		      (_cor21)
	  %% Line 281
	  <{'egd',_X_Pid,{'rectangle',P1,P2,C}}> when 'true' ->
	      let <_cor22> =
		  %% Line 282
		  call 'egd_primitives':'rectangle'
		      (_cor0, P1, P2, C)
	      in  %% Line 282
		  apply 'loop'/1
		      (_cor22)
	  %% Line 283
	  <{'egd',_X_Pid,'information'}> when 'true' ->
	      do  %% Line 284
		  call 'egd_primitives':'info'
		      (_cor0)
		  %% Line 285
		  apply 'loop'/1
		      (_cor0)
	  %% Line 286
	  <_cor34> when 'true' ->
	      %% Line 287
	      apply 'loop'/1
		  (_cor0)
	after 'infinity' ->
	  'true'
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('egd')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('egd', _cor0)
end