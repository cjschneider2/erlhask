module 'ts_install_cth' ['id'/1,
			 'init'/2,
			 'module_info'/0,
			 'module_info'/1,
			 'on_tc_fail'/3,
			 'on_tc_skip'/3,
			 'post_end_per_group'/4,
			 'post_end_per_suite'/4,
			 'post_end_per_testcase'/4,
			 'post_init_per_group'/4,
			 'post_init_per_suite'/4,
			 'pre_end_per_group'/3,
			 'pre_end_per_suite'/3,
			 'pre_init_per_group'/3,
			 'pre_init_per_suite'/3,
			 'pre_init_per_testcase'/3,
			 'terminate'/1]
    attributes [%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}],
		%% Line 52
		'type' =
		    %% Line 52
		    [{'config',{'remote_type',52,[{'atom',52,'proplists'}|[{'atom',52,'proplist'}|[[]]]]},[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{'reason',{'type',53,'term',[]},[]}],
		%% Line 54
		'type' =
		    %% Line 54
		    [{'skip_or_fail',{'type',54,'union',[{'type',54,'tuple',[{'atom',54,'skip'}|[{'type',54,'reason',[]}]]}|[{'type',55,'tuple',[{'atom',55,'auto_skip'}|[{'type',55,'reason',[]}]]}|[{'type',56,'tuple',[{'atom',56,'fail'}|[{'type',56,'reason',[]}]]}]]]},[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','state'},[{'record_field',58,{'atom',58,'ts_conf_dir'}}|[{'record_field',58,{'atom',58,'target_system'}}|[{'record_field',58,{'atom',58,'install_opts'}}|[{'record_field',58,{'atom',58,'nodenames'}}|[{'record_field',58,{'atom',58,'nodes'}}]]]]],[]}],
		%% Line 61
		'spec' =
		    %% Line 61
		    [{{'id',1},[{'type',61,'fun',[{'type',61,'product',[{'ann_type',61,[{'var',61,'Opts'}|[{'type',61,'term',[]}]]}]}|[{'ann_type',62,[{'var',62,'Id'}|[{'type',62,'term',[]}]]}]]}]}],
		%% Line 67
		'spec' =
		    %% Line 67
		    [{{'init',2},[{'type',67,'fun',[{'type',67,'product',[{'ann_type',67,[{'var',67,'Id'}|[{'type',67,'term',[]}]]}|[{'ann_type',67,[{'var',67,'Opts'}|[{'remote_type',67,[{'atom',67,'proplists'}|[{'atom',67,'proplist'}|[[]]]]}]]}]]}|[{'type',68,'tuple',[{'atom',68,'ok'}|[{'ann_type',68,[{'var',68,'State'}|[{'type',68,'record',[{'atom',68,'state'}]}]]}]]}]]}]}],
		%% Line 82
		'spec' =
		    %% Line 82
		    [{{'pre_init_per_suite',3},[{'type',82,'fun',[{'type',82,'product',[{'ann_type',82,[{'var',82,'Suite'}|[{'type',82,'atom',[]}]]}|[{'ann_type',83,[{'var',83,'Config'}|[{'type',83,'config',[]}]]}|[{'ann_type',84,[{'var',84,'State'}|[{'type',84,'record',[{'atom',84,'state'}]}]]}]]]}|[{'type',85,'tuple',[{'type',85,'union',[{'type',85,'config',[]}|[{'type',85,'skip_or_fail',[]}]]}|[{'ann_type',85,[{'var',85,'NewState'}|[{'type',85,'record',[{'atom',85,'state'}]}]]}]]}]]}]}],
		%% Line 115
		'spec' =
		    %% Line 115
		    [{{'post_init_per_suite',4},[{'type',115,'fun',[{'type',115,'product',[{'ann_type',115,[{'var',115,'Suite'}|[{'type',115,'atom',[]}]]}|[{'ann_type',116,[{'var',116,'Config'}|[{'type',116,'config',[]}]]}|[{'ann_type',117,[{'var',117,'Return'}|[{'type',117,'union',[{'type',117,'config',[]}|[{'type',117,'skip_or_fail',[]}]]}]]}|[{'ann_type',118,[{'var',118,'State'}|[{'type',118,'record',[{'atom',118,'state'}]}]]}]]]]}|[{'type',119,'tuple',[{'type',119,'union',[{'type',119,'config',[]}|[{'type',119,'skip_or_fail',[]}]]}|[{'ann_type',119,[{'var',119,'NewState'}|[{'type',119,'record',[{'atom',119,'state'}]}]]}]]}]]}]}],
		%% Line 125
		'spec' =
		    %% Line 125
		    [{{'pre_end_per_suite',3},[{'type',125,'fun',[{'type',125,'product',[{'ann_type',125,[{'var',125,'Suite'}|[{'type',125,'atom',[]}]]}|[{'ann_type',126,[{'var',126,'Config'}|[{'type',126,'union',[{'type',126,'config',[]}|[{'type',126,'skip_or_fail',[]}]]}]]}|[{'ann_type',127,[{'var',127,'State'}|[{'type',127,'record',[{'atom',127,'state'}]}]]}]]]}|[{'type',128,'tuple',[{'type',128,'union',[{'atom',128,'ok'}|[{'type',128,'skip_or_fail',[]}]]}|[{'ann_type',128,[{'var',128,'NewState'}|[{'type',128,'record',[{'atom',128,'state'}]}]]}]]}]]}]}],
		%% Line 133
		'spec' =
		    %% Line 133
		    [{{'post_end_per_suite',4},[{'type',133,'fun',[{'type',133,'product',[{'ann_type',133,[{'var',133,'Suite'}|[{'type',133,'atom',[]}]]}|[{'ann_type',134,[{'var',134,'Config'}|[{'type',134,'config',[]}]]}|[{'ann_type',135,[{'var',135,'Return'}|[{'type',135,'term',[]}]]}|[{'ann_type',136,[{'var',136,'State'}|[{'type',136,'record',[{'atom',136,'state'}]}]]}]]]]}|[{'type',137,'tuple',[{'type',137,'union',[{'atom',137,'ok'}|[{'type',137,'skip_or_fail',[]}]]}|[{'ann_type',137,[{'var',137,'NewState'}|[{'type',137,'record',[{'atom',137,'state'}]}]]}]]}]]}]}],
		%% Line 142
		'spec' =
		    %% Line 142
		    [{{'pre_init_per_group',3},[{'type',142,'fun',[{'type',142,'product',[{'ann_type',142,[{'var',142,'Group'}|[{'type',142,'atom',[]}]]}|[{'ann_type',143,[{'var',143,'Config'}|[{'type',143,'config',[]}]]}|[{'ann_type',144,[{'var',144,'State'}|[{'type',144,'record',[{'atom',144,'state'}]}]]}]]]}|[{'type',145,'tuple',[{'type',145,'union',[{'type',145,'config',[]}|[{'type',145,'skip_or_fail',[]}]]}|[{'ann_type',145,[{'var',145,'NewState'}|[{'type',145,'record',[{'atom',145,'state'}]}]]}]]}]]}]}],
		%% Line 150
		'spec' =
		    %% Line 150
		    [{{'post_init_per_group',4},[{'type',150,'fun',[{'type',150,'product',[{'ann_type',150,[{'var',150,'Group'}|[{'type',150,'atom',[]}]]}|[{'ann_type',151,[{'var',151,'Config'}|[{'type',151,'config',[]}]]}|[{'ann_type',152,[{'var',152,'Return'}|[{'type',152,'union',[{'type',152,'config',[]}|[{'type',152,'skip_or_fail',[]}]]}]]}|[{'ann_type',153,[{'var',153,'State'}|[{'type',153,'record',[{'atom',153,'state'}]}]]}]]]]}|[{'type',154,'tuple',[{'type',154,'union',[{'type',154,'config',[]}|[{'type',154,'skip_or_fail',[]}]]}|[{'ann_type',154,[{'var',154,'NewState'}|[{'type',154,'record',[{'atom',154,'state'}]}]]}]]}]]}]}],
		%% Line 159
		'spec' =
		    %% Line 159
		    [{{'pre_end_per_group',3},[{'type',159,'fun',[{'type',159,'product',[{'ann_type',159,[{'var',159,'Group'}|[{'type',159,'atom',[]}]]}|[{'ann_type',160,[{'var',160,'Config'}|[{'type',160,'union',[{'type',160,'config',[]}|[{'type',160,'skip_or_fail',[]}]]}]]}|[{'ann_type',161,[{'var',161,'State'}|[{'type',161,'record',[{'atom',161,'state'}]}]]}]]]}|[{'type',162,'tuple',[{'type',162,'union',[{'atom',162,'ok'}|[{'type',162,'skip_or_fail',[]}]]}|[{'ann_type',162,[{'var',162,'NewState'}|[{'type',162,'record',[{'atom',162,'state'}]}]]}]]}]]}]}],
		%% Line 167
		'spec' =
		    %% Line 167
		    [{{'post_end_per_group',4},[{'type',167,'fun',[{'type',167,'product',[{'ann_type',167,[{'var',167,'Group'}|[{'type',167,'atom',[]}]]}|[{'ann_type',168,[{'var',168,'Config'}|[{'type',168,'config',[]}]]}|[{'ann_type',169,[{'var',169,'Return'}|[{'type',169,'term',[]}]]}|[{'ann_type',170,[{'var',170,'State'}|[{'type',170,'record',[{'atom',170,'state'}]}]]}]]]]}|[{'type',171,'tuple',[{'type',171,'union',[{'atom',171,'ok'}|[{'type',171,'skip_or_fail',[]}]]}|[{'ann_type',171,[{'var',171,'NewState'}|[{'type',171,'record',[{'atom',171,'state'}]}]]}]]}]]}]}],
		%% Line 176
		'spec' =
		    %% Line 176
		    [{{'pre_init_per_testcase',3},[{'type',176,'fun',[{'type',176,'product',[{'ann_type',176,[{'var',176,'TC'}|[{'type',176,'atom',[]}]]}|[{'ann_type',177,[{'var',177,'Config'}|[{'type',177,'config',[]}]]}|[{'ann_type',178,[{'var',178,'State'}|[{'type',178,'record',[{'atom',178,'state'}]}]]}]]]}|[{'type',179,'tuple',[{'type',179,'union',[{'type',179,'config',[]}|[{'type',179,'skip_or_fail',[]}]]}|[{'ann_type',179,[{'var',179,'NewState'}|[{'type',179,'record',[{'atom',179,'state'}]}]]}]]}]]}]}],
		%% Line 184
		'spec' =
		    %% Line 184
		    [{{'post_end_per_testcase',4},[{'type',184,'fun',[{'type',184,'product',[{'ann_type',184,[{'var',184,'TC'}|[{'type',184,'atom',[]}]]}|[{'ann_type',185,[{'var',185,'Config'}|[{'type',185,'config',[]}]]}|[{'ann_type',186,[{'var',186,'Return'}|[{'type',186,'term',[]}]]}|[{'ann_type',187,[{'var',187,'State'}|[{'type',187,'record',[{'atom',187,'state'}]}]]}]]]]}|[{'type',188,'tuple',[{'type',188,'union',[{'atom',188,'ok'}|[{'type',188,'skip_or_fail',[]}]]}|[{'ann_type',188,[{'var',188,'NewState'}|[{'type',188,'record',[{'atom',188,'state'}]}]]}]]}]]}]}],
		%% Line 193
		'spec' =
		    %% Line 193
		    [{{'on_tc_fail',3},[{'type',193,'fun',[{'type',193,'product',[{'ann_type',193,[{'var',193,'TC'}|[{'type',193,'union',[{'atom',193,'init_per_suite'}|[{'atom',193,'end_per_suite'}|[{'atom',194,'init_per_group'}|[{'atom',194,'end_per_group'}|[{'type',194,'atom',[]}]]]]]}]]}|[{'ann_type',195,[{'var',195,'Reason'}|[{'type',195,'term',[]}]]}|[{'ann_type',195,[{'var',195,'State'}|[{'type',195,'record',[{'atom',195,'state'}]}]]}]]]}|[{'ann_type',196,[{'var',196,'NewState'}|[{'type',196,'record',[{'atom',196,'state'}]}]]}]]}]}],
		%% Line 201
		'spec' =
		    %% Line 201
		    [{{'on_tc_skip',3},[{'type',201,'fun',[{'type',201,'product',[{'ann_type',201,[{'var',201,'TC'}|[{'type',201,'union',[{'atom',201,'end_per_suite'}|[{'atom',201,'init_per_group'}|[{'atom',201,'end_per_group'}|[{'type',201,'atom',[]}]]]]}]]}|[{'type',202,'union',[{'type',202,'tuple',[{'atom',202,'tc_auto_skip'}|[{'type',202,'tuple',[{'atom',202,'failed'}|[{'type',202,'tuple',[{'ann_type',202,[{'var',202,'Mod'}|[{'type',202,'atom',[]}]]}|[{'ann_type',202,[{'var',202,'Function'}|[{'type',202,'atom',[]}]]}|[{'ann_type',203,[{'var',203,'Reason'}|[{'type',203,'term',[]}]]}]]]}]]}]]}|[{'type',204,'tuple',[{'atom',204,'tc_user_skip'}|[{'type',204,'tuple',[{'atom',204,'skipped'}|[{'ann_type',204,[{'var',204,'Reason'}|[{'type',204,'term',[]}]]}]]}]]}]]}|[{'ann_type',205,[{'var',205,'State'}|[{'type',205,'record',[{'atom',205,'state'}]}]]}]]]}|[{'ann_type',206,[{'var',206,'NewState'}|[{'type',206,'record',[{'atom',206,'state'}]}]]}]]}]}],
		%% Line 211
		'spec' =
		    %% Line 211
		    [{{'terminate',1},[{'type',211,'fun',[{'type',211,'product',[{'ann_type',211,[{'var',211,'State'}|[{'type',211,'record',[{'atom',211,'state'}]}]]}]}|[{'type',212,'term',[]}]]}]}]]
'id'/1 =
    %% Line 63
    fun (_cor0) ->
	%% Line 64
	'ts_install_cth'
'init'/2 =
    %% Line 69
    fun (_cor1,_cor0) ->
	let <Nodenames> =
	    %% Line 70
	    call 'proplists':'get_value'
		('nodenames', _cor0, 0)
	in  let <Nodes> =
		%% Line 71
		call 'proplists':'get_value'
		    ('nodes', _cor0, 0)
	    in  let <TSConfDir> =
		    %% Line 72
		    call 'proplists':'get_value'
			('ts_conf_dir', _cor0)
		in  let <TargetSystem> =
			%% Line 73
			call 'proplists':'get_value'
			    ('target_system', _cor0, 'install_local')
		    in  let <InstallOpts> =
			    %% Line 74
			    call 'proplists':'get_value'
				('install_opts', _cor0, [])
			in  %% Line 75
			    {'ok',{'state',%% Line 77
					   TSConfDir,%% Line 78
						     TargetSystem,%% Line 79
								  InstallOpts,Nodenames,%% Line 76
											Nodes}}
'pre_init_per_suite'/3 =
    %% Line 86
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Suite,Config,State = {'state','undefined',_cor29,_cor30,_cor31,_cor32}> when 'true' ->
	      let <DataDir> =
		  %% Line 87
		  call 'proplists':'get_value'
		      ('data_dir', Config)
	      in  let <_cor4> =
		      %% Line 90
		      call 'filename':'split'
			  (DataDir)
		  in  let <_cor5> =
			  %% Line 90
			  call 'lists':'reverse'
			      (_cor4)
		      in  let <_cor6> =
			      %% Line 90
			      call 'erlang':'tl'
				  (_cor5)
			  in  let <_cor7> =
				  %% Line 89
				  call 'lists':'reverse'
				      (_cor6)
			      in  let <ParentDir> =
				      %% Line 88
				      call 'filename':'join'
					  (_cor7)
				  in  let <TSConfDir> =
					  %% Line 91
					  call 'filename':'join'
					      ([ParentDir|[[46|[46]]|[[116|[101|[115|[116|[95|[115|[101|[114|[118|[101|[114]]]]]]]]]]]]]])
				      in  let <_cor12> =
					      %% Line 92
					      call 'erlang':'setelement'
						  (2, State, TSConfDir)
					  in  %% Line 92
					      apply 'pre_init_per_suite'/3
						  (Suite, Config, _cor12)
	  %% Line 93
	  <_X_Suite,Config,State> when 'true' ->
	      let <DataDir> =
		  %% Line 94
		  call 'proplists':'get_value'
		      ('data_dir', Config)
	      in  %% Line 95
		  try
		      %% Line 97
		      ( case State of
			  ( <( {'state',_rec1,_cor39,_cor40,_cor41,_cor42}
			       -| ['compiler_generated'] )> when 'true' ->
				let <_cor16> =
				    call 'filename':'join'
					(_rec1, [118|[97|[114|[105|[97|[98|[108|[101|[115]]]]]]]]])
				in  case call 'file':'consult'
					     (_cor16) of
				      <{'ok',Variables}> when 'true' ->
					  do  %% Line 98
					      case call 'proplists':'get_value'
						       ('cross', Variables) of
						%% Line 99
						<[121|[101|[115]]]> when 'true' ->
						    %% Line 100
						    call 'ct':'log'
							([78|[111|[116|[32|[109|[97|[107|[105|[110|[103|[32|[100|[97|[116|[97|[32|[100|[105|[114|[32|[97|[115|[32|[116|[101|[115|[116|[115|[32|[104|[97|[118|[101|[32|[98|[101|[101|[110|[32|[99|[114|[111|[115|[115|[32|[99|[111|[109|[112|[105|[108|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
						%% Line 101
						<_cor44> when 'true' ->
						    %% Line 102
						    call 'ts_lib':'make_non_erlang'
							(DataDir, Variables)
					      end
					      let <_cor19> =
						  %% Line 105
						  apply 'add_node_name'/2
						      (Config, State)
					      in  %% Line 105
						  {_cor19,State}
				      ( <_cor17> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor17})
					-| ['compiler_generated'] )
				    end
			    -| ['compiler_generated'] )
			  ( <_cor43> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','state'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  of <_cor20> ->
		      _cor20
		  catch <_cor23,_cor22,_cor21> ->
		      case <_cor23,_cor22,_cor21> of
			%% Line 106
			<'error',{'badmatch',{'error','enoent'}},_cor45> when 'true' ->
			    let <_cor24> =
				%% Line 107
				apply 'add_node_name'/2
				    (Config, State)
			    in  %% Line 107
				{_cor24,State}
			%% Line 108
			<Error,Reason,_cor46> when 'true' ->
			    let <Stack> =
				%% Line 109
				call 'erlang':'get_stacktrace'
				    ()
			    in  do  %% Line 110
				    call 'ct':'pal'
					([126|[112|[32|[102|[97|[105|[108|[101|[100|[33|[32|[126|[112|[58|[123|[126|[112|[44|[126|[112|[125]]]]]]]]]]]]]]]]]]]]], ['ts_install_cth'|[Error|[Reason|[Stack|[]]]]])
				    %% Line 111
				    {{'fail',{'ts_install_cth',{Error,Reason,Stack}}},State}
		      end
	end
'post_init_per_suite'/4 =
    %% Line 120
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 121
	    call 'test_server_ctrl':'kill_slavenodes'
		()
	    %% Line 122
	    {_cor1,_cor0}
'pre_end_per_suite'/3 =
    %% Line 129
    fun (_cor2,_cor1,_cor0) ->
	%% Line 130
	{_cor1,_cor0}
'post_end_per_suite'/4 =
    %% Line 138
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 139
	{_cor1,_cor0}
'pre_init_per_group'/3 =
    %% Line 146
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 147
	    apply 'add_node_name'/2
		(_cor1, _cor0)
	in  %% Line 147
	    {_cor3,_cor0}
'post_init_per_group'/4 =
    %% Line 155
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 156
	{_cor1,_cor0}
'pre_end_per_group'/3 =
    %% Line 163
    fun (_cor2,_cor1,_cor0) ->
	%% Line 164
	{_cor1,_cor0}
'post_end_per_group'/4 =
    %% Line 172
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 173
	{_cor1,_cor0}
'pre_init_per_testcase'/3 =
    %% Line 180
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 181
	    apply 'add_node_name'/2
		(_cor1, _cor0)
	in  %% Line 181
	    {_cor3,_cor0}
'post_end_per_testcase'/4 =
    %% Line 189
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 190
	{_cor1,_cor0}
'on_tc_fail'/3 =
    %% Line 197
    fun (_cor2,_cor1,_cor0) ->
	_cor0
'on_tc_skip'/3 =
    %% Line 207
    fun (_cor2,_cor1,_cor0) ->
	_cor0
'terminate'/1 =
    %% Line 213
    fun (_cor0) ->
	%% Line 214
	'ok'
'add_node_name'/2 =
    %% Line 221
    fun (_cor1,_cor0) ->
	%% Line 222
	case call 'proplists':'get_value'
		 ('nodenames', _cor1) of
	  %% Line 223
	  <'undefined'> when 'true' ->
	      %% Line 226
	      ( case _cor0 of
		  ( <( {'state',_cor8,_cor9,_cor10,_rec2,_cor11}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor4> =
			    apply 'generate_nodenames'/1
				(_rec2)
			in  call 'lists':'keystore'
				('nodenames', 1, _cor1, {'nodenames',_cor4})
		    -| ['compiler_generated'] )
		  ( <_cor12> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 227
	  <_X_Else> when 'true' ->
	      _cor1
	end
'generate_nodenames'/1 =
    %% Line 233
    fun (_cor0) ->
	%% Line 234
	case call 'inet':'gethostname'
		 () of
	  <{'ok',Name}> when 'true' ->
	      %% Line 235
	      apply 'generate_nodenames2'/3
		  (_cor0, [Name|[]], [])
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'generate_nodenames2'/3 =
    %% Line 237
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <0,_X_Hosts,Acc> when 'true' ->
	      %% Line 238
	      Acc
	  %% Line 239
	  <N,Hosts,Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 240
		  call 'erlang':'length'
		      (Hosts)
	      in  let <_cor4> =
		      %% Line 240
		      call 'erlang':'rem'
			  (N, _cor3)
		  in  let <_cor5> =
			  %% Line 240
			  call 'erlang':'+'
			      (_cor4, 1)
		      in  let <Host> =
			      %% Line 240
			      call 'lists':'nth'
				  (_cor5, Hosts)
			  in  let <_cor8> =
				  %% Line 241
				  apply 'temp_nodename'/2
				      ([110|[111|[100]]], [])
			      in  let <_cor7> =
				      %% Line 241
				      [64|Host]
				  in  let <_cor9> =
					  %% Line 241
					  call 'erlang':'++'
					      (_cor8, _cor7)
				      in  let <Name> =
					      %% Line 241
					      call 'erlang':'list_to_atom'
						  (_cor9)
					  in  let <_cor11> =
						  %% Line 242
						  call 'erlang':'-'
						      (N, 1)
					      in  %% Line 242
						  apply 'generate_nodenames2'/3
						      (_cor11, Hosts, [Name|Acc])
	end
'temp_nodename'/2 =
    %% Line 244
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Acc> when 'true' ->
	      %% Line 245
	      call 'lists':'flatten'
		  (Acc)
	  %% Line 246
	  <[Chr|Base],Acc> when 'true' ->
	      %% Line 247
	      case call 'erlang':'now'
		       () of
		<{A,B,C}> when 'true' ->
		    let <_cor3> =
			%% Line 248
			call 'erlang':'bxor'
			    (Chr, A)
		    in  let <_cor4> =
			    %% Line 248
			    call 'erlang':'bxor'
				(_cor3, B)
			in  let <_cor5> =
				%% Line 248
				call 'erlang':'+'
				    (_cor4, A)
			    in  let <_cor6> =
				    %% Line 248
				    call 'erlang':'bxor'
					(_cor5, C)
				in  let <_cor7> =
					%% Line 248
					call 'erlang':'+'
					    (_cor6, B)
				    in  let <_cor8> =
					    %% Line 248
					    call 'erlang':'integer_to_list'
						(_cor7)
					in  let <New> =
						%% Line 248
						[Chr|_cor8]
					    in  %% Line 249
						apply 'temp_nodename'/2
						    (Base, [New|Acc])
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'temp_nodename',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('ts_install_cth')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('ts_install_cth', _cor0)
end