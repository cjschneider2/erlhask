module 'ts_benchmark' ['benchmarks'/0,
		       'handle_event'/2,
		       'init'/1,
		       'module_info'/0,
		       'module_info'/1,
		       'run'/3]
    attributes [%% Line 20
		'type' =
		    %% Line 20
		    [{{'record','event'},[{'record_field',20,{'atom',20,'name'}}|[{'record_field',21,{'atom',21,'node'}}|[{'record_field',22,{'atom',22,'data'}}]]],[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}],
		%% Line 55
		'type' =
		    %% Line 55
		    [{{'record','state'},[{'record_field',55,{'atom',55,'spec'}}|[{'record_field',55,{'atom',55,'suite'}}|[{'record_field',55,{'atom',55,'tc'}}|[{'record_field',55,{'atom',55,'stats_dir'}}]]]],[]}]]
'benchmarks'/0 =
    %% Line 31
    fun () ->
	%% Line 32
	case call 'file':'get_cwd'
		 () of
	  <{'ok',Cwd}> when 'true' ->
	      %% Line 33
	      call 'ts_lib':'specialized_specs'
		  (Cwd, [98|[101|[110|[99|[104]]]]])
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor0})
	    -| ['compiler_generated'] )
	end
'run'/3 =
    %% Line 35
    fun (_cor2,_cor1,_cor0) ->
	%% Line 36
	case call 'file':'get_cwd'
		 () of
	  <{'ok',Cwd}> when 'true' ->
	      %% Line 37
	      case call 'calendar':'local_time'
		       () of
		<{{YY,MM,DD},{HH,Mi,SS}}> when 'true' ->
		    let <BName> =
			%% Line 38
			call 'lists':'concat'
			    ([YY|[[95]|[MM|[[95]|[DD|[[84]|[HH|[[95]|[Mi|[[95]|[SS|[]]]]]]]]]]]])
		    in  let <BDir> =
			    %% Line 39
			    call 'filename':'join'
				([Cwd|[BName|[]]])
			in  do  %% Line 40
				call 'file':'make_dir'
				    (BDir)
				do  %% Line 41
				    ( letrec
					  'lc$^0'/1 =
					      fun (_cor9) ->
						  case _cor9 of
						    <[%% Line 44
						      Spec|_cor8]> when 'true' ->
							let <_cor12> =
							    call 'erlang':'atom_to_list'
								(Spec)
							in  let <_cor10> =
								%% Line 42
								call 'erlang':'atom_to_list'
								    (Spec)
							    in  let <_cor11> =
								    %% Line 42
								    call 'erlang':'++'
									(_cor10, [95|[98|[101|[110|[99|[104|[46|[115|[112|[101|[99]]]]]]]]]]])
								in  do  call 'ts_run':'run'
									    (_cor12, %% Line 42
										     [{'spec',[_cor11|[]]}|[]], %% Line 43
														[{'event_handler',{'ts_benchmark',[Spec|[BDir|[]]]}}|_cor1], _cor0)
									%% Line 44
									apply 'lc$^0'/1
									    (_cor8)
						    <[]> when 'true' ->
							[]
						    ( <_cor9> when 'true' ->
							  ( primop 'match_fail'
								({'function_clause',_cor9})
							    -| [{'function_name',{'lc$^0',1}}] )
						      -| ['compiler_generated'] )
						  end
				      in  apply 'lc$^0'/1
					      (_cor2)
				      -| ['list_comprehension'] )
				    let <_cor15> =
					%% Line 45
					call 'filename':'join'
					    (Cwd, [108|[97|[116|[101|[115|[116|[95|[98|[101|[110|[99|[104|[109|[97|[114|[107]]]]]]]]]]]]]]]])
				    in  do  %% Line 45
					    call 'file':'delete'
						(_cor15)
					    let <_cor16> =
						%% Line 46
						call 'filename':'join'
						    (Cwd, [108|[97|[116|[101|[115|[116|[95|[98|[101|[110|[99|[104|[109|[97|[114|[107]]]]]]]]]]]]]]]])
					    in  %% Line 46
						case call 'file':'open'
							 (_cor16, ['write']) of
						  <{'ok',D}> when 'true' ->
						      do  %% Line 47
							  call 'io':'format'
							      (D, BDir, [])
							  %% Line 48
							  call 'file':'close'
							      (D)
						  ( <_cor17> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor17})
						    -| ['compiler_generated'] )
						end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'init'/1 =
    %% Line 57
    fun (_cor0) ->
	case _cor0 of
	  <[Spec|[Dir|[]]]> when 'true' ->
	      %% Line 58
	      {'ok',{'state',Spec,'undefined','undefined',Dir}}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'init',1}}] )
	    -| ['compiler_generated'] )
	end
'handle_event'/2 =
    %% Line 60
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'event','tc_start',_cor26,{Suite,Tc}},State> when 'true' ->
	      %% Line 61
	      case State of
		<{'state',_cor27,_cor28,_cor29,_cor30}> when 'true' ->
		    let <_cor3> =
			call 'erlang':'setelement'
			    (4, State, Tc)
		    in  let <_cor5> =
			    call 'erlang':'setelement'
				(3, _cor3, Suite)
			in  {'ok',_cor5}
		( <_cor31> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 62
	  <{'event','benchmark_data',_cor32,Data},State> when 'true' ->
	      %% Line 63
	      ( case State of
		  ( <( {'state',_rec1,_cor33,_cor34,_cor35}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Spec> =
			    call 'proplists':'get_value'
				('application', Data, _rec1)
			in  let <Suite> =
				%% Line 64
				call 'proplists':'get_value'
				    ('suite', Data, _cor33)
			    in  let <Tc> =
				    %% Line 65
				    call 'proplists':'get_value'
					('name', Data, _cor34)
				in  let <Value> =
					%% Line 66
					call 'proplists':'get_value'
					    ('value', Data)
				    in  let <_cor18> =
					    %% Line 69
					    apply 'e'/1
						(Spec)
					in  let <_cor19> =
						%% Line 69
						apply 'e'/1
						    (Suite)
					    in  let <_cor20> =
						    %% Line 70
						    apply 'e'/1
							(Tc)
						in  let <_cor21> =
							%% Line 69
							call 'lists':'concat'
							    ([_cor18|[[45]|[_cor19|[[45]|%% Line 70
											 [_cor20|[[46|[101|[98|[101|[110|[99|[104]]]]]]]]]]]]])
						    in  let <_cor22> =
							    %% Line 67
							    call 'filename':'join'
								(%% Line 68
								 [_cor35|%% Line 69
									 [_cor21|%% Line 70
										 []]])
							in  %% Line 67
							    case call 'file':'open'
								     (_cor22, %% Line 71
									      ['append']) of
							      <{'ok',D}> when 'true' ->
								  do  %% Line 72
								      call 'io':'format'
									  (D, [126|[112|[126|[110]]]], [Value|[]])
								      do  %% Line 73
									  call 'file':'close'
									      (D)
									  %% Line 74
									  {'ok',State}
							      ( <_cor23> when 'true' ->
								    primop 'match_fail'
									({'badmatch',_cor23})
								-| ['compiler_generated'] )
							    end
		    -| ['compiler_generated'] )
		  ( <_cor36> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 75
	  <_X_Event,State> when 'true' ->
	      %% Line 76
	      {'ok',State}
	end
'e'/1 =
    %% Line 79
    fun (_cor0) ->
	case _cor0 of
	  <Atom>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 80
	      Atom
	  %% Line 81
	  <Str>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor3> =
		  %% Line 82
		  ( fun (_cor1) ->
			case _cor1 of
			  <47> when 'true' ->
			      %% Line 83
			      92
			  %% Line 84
			  <C> when 'true' ->
			      %% Line 85
			      C
			end
		    -| [{'id',{0,0,'-e/1-fun-0-'}}] )
	      in  %% Line 82
		  call 'lists':'map'
		      (_cor3, %% Line 86
			      Str)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'e',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('ts_benchmark')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('ts_benchmark', _cor0)
end