module 'ts_autoconf_win32' ['configure'/0,
			    'module_info'/0,
			    'module_info'/1]
    attributes []
'configure'/0 =
    %% Line 27
    fun () ->
	%% Line 28
	case apply 'variables'/0
		 () of
	  %% Line 29
	  <{'ok',Vars}> when 'true' ->
	      %% Line 30
	      call 'ts_lib':'subst_file'
		  ([99|[111|[110|[102|[95|[118|[97|[114|[115|[46|[105|[110]]]]]]]]]]]], [99|[111|[110|[102|[95|[118|[97|[114|[115]]]]]]]]], Vars)
	  %% Line 31
	  <Error> when 'true' ->
	      %% Line 32
	      Error
	end
'variables'/0 =
    %% Line 35
    fun () ->
	let <_cor0> =
	    %% Line 36
	    apply 'tests'/0
		()
	in  %% Line 36
	    apply 'run_tests'/2
		(_cor0, [])
'run_tests'/2 =
    %% Line 38
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Prompt,Tester}|Rest],Vars> when 'true' ->
	      do  %% Line 39
		  call 'io':'format'
		      ([99|[104|[101|[99|[107|[105|[110|[103|[32|[126|[115|[46|[46|[46|[32]]]]]]]]]]]]]]], [Prompt|[]])
		  let <_cor2> =
		      catch
			  %% Line 40
			  apply Tester
			      (Vars)
		  in  %% Line 40
		      case _cor2 of
			%% Line 41
			<{'EXIT',Reason}> when 'true' ->
			    do  %% Line 42
				call 'io':'format'
				    ([70|[65|[73|[76|[69|[68|[126|[110|[69|[120|[105|[116|[32|[115|[116|[97|[116|[117|[115|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]], [Reason|[]])
				%% Line 43
				{'error','auto_conf_failed'}
			%% Line 44
			<{Result,NewVars}> when 'true' ->
			    let <_cor3> =
				%% Line 45
				call 'lists':'concat'
				    ([Result|[]])
			    in  do  %% Line 45
				    call 'io':'format'
					([126|[115|[126|[110]]]], [_cor3|[]])
				    %% Line 46
				    apply 'run_tests'/2
					(Rest, NewVars)
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor4})
			  -| ['compiler_generated'] )
		      end
	  %% Line 48
	  <[],Vars> when 'true' ->
	      %% Line 49
	      {'ok',Vars}
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'run_tests',2}}] )
	    -| ['compiler_generated'] )
	end
'tests'/0 =
    %% Line 53
    fun () ->
	%% Line 54
	[{[104|[111|[115|[116|[32|[115|[121|[115|[116|[101|[109|[32|[116|[121|[112|[101]]]]]]]]]]]]]]]],( 'system_type'/1
													  -| [{'id',{0,0,'-tests/0-fun-0-'}}] )}|%% Line 55
																		 [{[67|[80|[85|[32|[116|[121|[112|[101]]]]]]]],( 'cpu'/1
																								 -| [{'id',{0,0,'-tests/0-fun-1-'}}] )}|%% Line 56
																													[{[102|[111|[114|[32|[67|[32|[99|[111|[109|[112|[105|[108|[101|[114]]]]]]]]]]]]]],( 'c_compiler'/1
																																							    -| [{'id',{0,0,'-tests/0-fun-2-'}}] )}|%% Line 57
																																												   [{[102|[111|[114|[32|[109|[97|[107|[101|[32|[112|[114|[111|[103|[114|[97|[109]]]]]]]]]]]]]]]],( 'make'/1
																																																								   -| [{'id',{0,0,'-tests/0-fun-3-'}}] )}|%% Line 58
																																																													  [{[102|[111|[114|[32|[108|[111|[99|[97|[116|[105|[111|[110|[32|[111|[102|[32|[83|[83|[76|[32|[108|[105|[98|[114|[97|[114|[105|[101|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]],( 'ssl'/1
																																																																																		 -| [{'id',{0,0,'-tests/0-fun-4-'}}] )}|%% Line 59
																																																																																							[{[102|[111|[114|[32|[108|[111|[99|[97|[116|[105|[111|[110|[32|[111|[102|[32|[74|[97|[118|[97|[32|[99|[111|[109|[112|[105|[108|[101|[114]]]]]]]]]]]]]]]]]]]]]]]]]]]]],( 'javac'/1
																																																																																																												-| [{'id',{0,0,'-tests/0-fun-5-'}}] )}|[]]]]]]]
'system_type'/1 =
    %% Line 61
    fun (_cor0) ->
	let <_cor4> =
	    %% Line 62
	    case call 'os':'type'
		     () of
	      %% Line 63
	      <{'win32','nt'}> when 'true' ->
		  %% Line 64
		  case call 'os':'version'
			   () of
		    %% Line 65
		    <{4,_cor7,_cor8}> when 'true' ->
			[87|[105|[110|[100|[111|[119|[115|[32|[78|[84]]]]]]]]]]
		    %% Line 66
		    <{5,0,_cor9}> when 'true' ->
			[87|[105|[110|[100|[111|[119|[115|[32|[50|[48|[48|[48]]]]]]]]]]]]
		    %% Line 67
		    <{5,1,_cor10}> when 'true' ->
			[87|[105|[110|[100|[111|[119|[115|[32|[88|[80]]]]]]]]]]
		    %% Line 68
		    <{5,2,_cor11}> when 'true' ->
			[87|[105|[110|[100|[111|[119|[115|[32|[50|[48|[48|[51]]]]]]]]]]]]
		    %% Line 69
		    <{6,0,_cor12}> when 'true' ->
			[87|[105|[110|[100|[111|[119|[115|[32|[86|[105|[115|[116|[97]]]]]]]]]]]]]
		    %% Line 70
		    <{6,1,_cor13}> when 'true' ->
			[87|[105|[110|[100|[111|[119|[115|[32|[55]]]]]]]]]
		    %% Line 71
		    <{_cor14,_cor15,_cor16}> when 'true' ->
			[87|[105|[110|[100|[111|[119|[115|[32|[78|[67|[67|[45|[49|[55|[48|[49|[45|[68]]]]]]]]]]]]]]]]]]
		    ( <_cor1> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor1})
		      -| ['compiler_generated'] )
		  end
	      %% Line 73
	      <{'win32','windows'}> when 'true' ->
		  %% Line 74
		  case call 'os':'version'
			   () of
		    %% Line 75
		    <{4,0,_cor17}> when 'true' ->
			[87|[105|[110|[100|[111|[119|[115|[32|[57|[53]]]]]]]]]]
		    %% Line 76
		    <{4,10,_cor18}> when 'true' ->
			[87|[105|[110|[100|[111|[119|[115|[32|[57|[56]]]]]]]]]]
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	      %% Line 78
	      <{'win32',_cor19}> when 'true' ->
		  [87|[105|[110|[100|[111|[119|[115]]]]]]]
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor3})
		-| ['compiler_generated'] )
	    end
	in  %% Line 80
	    {_cor4,[{'host_os',_cor4}|[{'host',[119|[105|[110|[51|[50]]]]]}|_cor0]]}
'cpu'/1 =
    %% Line 82
    fun (_cor0) ->
	let <Arch> =
	    %% Line 83
	    call 'os':'getenv'
		([80|[82|[79|[67|[69|[83|[83|[79|[82|[95|[65|[82|[67|[72|[73|[84|[69|[67|[84|[85|[82|[69]]]]]]]]]]]]]]]]]]]]]])
	in  let <Level0> =
		%% Line 84
		call 'os':'getenv'
		    ([80|[82|[79|[67|[69|[83|[83|[79|[82|[95|[76|[101|[118|[101|[108]]]]]]]]]]]]]]])
	    in  let <_cor5> =
		    %% Line 85
		    case <Arch,Level0> of
		      %% Line 86
		      <[120|[56|[54]]],Level>
			  when call 'erlang':'is_list'
				(Level) ->
			  let <_cor3> =
			      %% Line 87
			      call 'erlang':'++'
				  (Level, [56|[54]])
			  in  %% Line 87
			      [105|_cor3]
		      %% Line 88
		      <Other,_X_Level>
			  when call 'erlang':'is_list'
				(Other) ->
			  %% Line 89
			  Other
		      %% Line 90
		      <'false',_cor8> when 'true' ->
			  %% Line 91
			  [105|[51|[56|[54]]]]
		      ( <_fol1,_fol2> when 'true' ->
			    let <_cor4> = {_fol1,_fol2}
			    in  primop 'match_fail'
				    ({'case_clause',_cor4})
			-| ['compiler_generated'] )
		    end
		in  %% Line 93
		    {_cor5,[{'host_cpu',_cor5}|_cor0]}
'c_compiler'/1 =
    %% Line 95
    fun (_cor0) ->
	%% Line 96
	try
	    let <CompTests> =
		%% Line 97
		[{'msc',( 'visual_cxx'/1
			  -| [{'id',{0,0,'-c_compiler/1-fun-0-'}}] )}|%% Line 98
								      [{'gnuc',( 'mingw32'/1
										 -| [{'id',{0,0,'-c_compiler/1-fun-1-'}}] )}|[]]]
	    in  let <_cor4> =
		    %% Line 101
		    case call 'erlang':'system_info'
			     ('c_compiler_used') of
		      %% Line 102
		      <{UsedCmplr,_cor14}> when 'true' ->
			  do  %% Line 103
			      case call 'lists':'keysearch'
				       (UsedCmplr, 1, CompTests) of
				%% Line 104
				<{'value',{_cor15,CompTest}}>
				    when call 'erlang':'=:='
					  (_cor15,
					   UsedCmplr) ->
				    %% Line 105
				    apply CompTest
					(_cor0)
				%% Line 106
				<_cor16> when 'true' ->
				    'ok'
			      end
			      %% Line 109
			      UsedCmplr
		      %% Line 110
		      <'undefined'> when 'true' ->
			  %% Line 111
			  'undefined'
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor3})
			-| ['compiler_generated'] )
		    end
		in  let <_cor8> =
			%% Line 114
			( fun (_cor6) ->
			      case _cor6 of
				<{Cmplr,_X_CmplrTst}>
				    when call 'erlang':'=:='
					  (Cmplr,
					   _cor4) ->
				    %% Line 115
				    'ok'
				%% Line 116
				<{_X_Cmplr,CmplrTst}> when 'true' ->
				    %% Line 117
				    apply CmplrTst
					(_cor0)
				( <_cor7> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor7})
					-| [{'function_name',{'-c_compiler/1-fun-2-',1}}] )
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-c_compiler/1-fun-2-'}}] )
		    in  do  %% Line 114
			    call 'lists':'foreach'
				(_cor8, %% Line 119
					CompTests)
			    %% Line 120
			    {'no',_cor0}
	of <_cor9> ->
	    _cor9
	catch <_cor12,_cor11,_cor10> ->
	    case <_cor12,_cor11,_cor10> of
	      %% Line 122
	      <'throw',Res = {_X_Path,_X_NewVars},_cor17> when 'true' ->
		  Res
	      ( <_cor12,_cor11,_cor10> when 'true' ->
		    primop 'raise'
			(_cor10, _cor11)
		-| ['compiler_generated'] )
	    end
'visual_cxx'/1 =
    %% Line 125
    fun (_cor0) ->
	%% Line 126
	case call 'os':'find_executable'
		 ([99|[108]]) of
	  %% Line 127
	  <'false'> when 'true' ->
	      %% Line 128
	      {'no',_cor0}
	  %% Line 129
	  <Path>
	      when call 'erlang':'is_list'
		    (Path) ->
	      let <DEFAULT_THR_LIB,ERTS_THR_LIB,DLL,DBG_LINK,DBG_COMP,OPT> =
		  %% Line 136
		  case apply 'is_debug_build'/0
			   () of
		    %% Line 137
		    <'true'> when 'true' ->
			%% Line 138
			<[45|[77|[84|[100|[32]]]]],[45|[77|[68|[100|[32]]]]],[45|[76|[68|[100|[32]]]]],[45|[100|[101|[98|[117|[103|[32|[45|[112|[100|[98|[58|[110|[111|[110|[101|[32]]]]]]]]]]]]]]]]],[45|[90|[55|[32|[45|[68|[68|[69|[66|[85|[71]]]]]]]]]]],[32]>
		    %% Line 144
		    <'false'> when 'true' ->
			%% Line 145
			<[45|[77|[84|[32]]]],[45|[77|[68|[32]]]],[45|[76|[68|[32]]]],[32],[32],[45|[79|[120|[32]]]]>
		    ( <_cor1> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor1})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor5> =
		      %% Line 153
		      call 'erlang':'++'
			  (OPT, DBG_COMP)
		  in  let <_cor6> =
			  %% Line 153
			  call 'erlang':'++'
			      ([45|[68|[95|[95|[87|[73|[78|[51|[50|[95|[95|[32]]]]]]]]]]]], _cor5)
		      in  let <ERTS_CFLAGS> =
			      %% Line 153
			      call 'erlang':'++'
				  (ERTS_THR_LIB, _cor6)
			  in  let <_cor10> =
				  %% Line 159
				  call 'erlang':'++'
				      (ERTS_THR_LIB, DLL)
			      in  let <_cor11> =
				      %% Line 160
				      call 'erlang':'++'
					  (DBG_LINK, [107|[101|[114|[110|[101|[108|[51|[50|[46|[108|[105|[98]]]]]]]]]]]])
				  in  let <_cor12> =
					  %% Line 160
					  call 'erlang':'++'
					      ([45|[108|[105|[110|[107|[32]]]]]], _cor11)
				      in  let <_cor13> =
					      %% Line 162
					      call 'erlang':'++'
						  ([45|[68|[95|[95|[87|[73|[78|[51|[50|[95|[95|[32]]]]]]]]]]]], DBG_COMP)
					  in  let <_cor14> =
						  %% Line 162
						  call 'erlang':'++'
						      (DEFAULT_THR_LIB, _cor13)
					      in  let <_cor15> =
						      %% Line 163
						      call 'erlang':'++'
							  ([45|[68|[95|[95|[87|[73|[78|[51|[50|[95|[95|[32]]]]]]]]]]]], DBG_COMP)
						  in  let <_cor16> =
							  %% Line 163
							  call 'erlang':'++'
							      (DEFAULT_THR_LIB, _cor15)
						      in  let <_cor17> =
							      %% Line 165
							      call 'erlang':'++'
								  (ERTS_CFLAGS, DLL)
							  in  let <_cor18> =
								  %% Line 167
								  apply 'common_c_defs'/0
								      ()
							      in  let <_cor19> =
								      %% Line 169
								      call 'erlang':'++'
									  (ERTS_THR_LIB, [119|[115|[50|[95|[51|[50|[46|[108|[105|[98]]]]]]]]]])
								  in  let <_cor20> =
									  %% Line 170
									  call 'erlang':'++'
									      (DBG_LINK, [119|[115|[50|[95|[51|[50|[46|[108|[105|[98]]]]]]]]]])
								      in  let <_cor21> =
									      %% Line 170
									      call 'erlang':'++'
										  ([45|[108|[105|[110|[107|[32]]]]]], _cor20)
									  in  let <_cor22> =
										  %% Line 170
										  call 'erlang':'++'
										      (DEFAULT_THR_LIB, _cor21)
									      in  %% Line 156
										  call 'erlang':'throw'
										      ({Path,[{'CC',[99|[108|[32|[45|[110|[111|[108|[111|[103|[111]]]]]]]]]]}|%% Line 157
																			      [{'LD',[99|[108|[32|[45|[110|[111|[108|[111|[103|[111]]]]]]]]]]}|%% Line 158
																											       [{'SHLIB_LD',[99|[108|[32|[45|[110|[111|[108|[111|[103|[111]]]]]]]]]]}|%% Line 159
																																				      [{'SHLIB_LDFLAGS',_cor10}|%% Line 160
																																								[{'SHLIB_LDLIBS',_cor12}|%% Line 161
																																											 [{'SHLIB_EXTRACT_ALL',[]}|%% Line 162
																																														   [{'CFLAGS',_cor14}|%% Line 163
																																																      [{'EI_CFLAGS',_cor16}|%% Line 164
																																																			    [{'ERTS_CFLAGS',ERTS_CFLAGS}|%% Line 165
																																																							 [{'SHLIB_CFLAGS',_cor17}|%% Line 166
																																																										  [{'CROSSLDFLAGS',[]}|%% Line 167
																																																												       [{'DEFS',_cor18}|%% Line 168
																																																															[{'SHLIB_SUFFIX',[46|[100|[108|[108]]]]}|%% Line 169
																																																																				 [{'ERTS_LIBS',_cor19}|%% Line 170
																																																																						       [{'LIBS',_cor22}|%% Line 171
																																																																									[{'obj',[46|[111|[98|[106]]]]}|%% Line 172
																																																																												       [{'exe',[46|[101|[120|[101]]]]}|%% Line 173
																																																																																       [{'test_c_compiler',[123|[109|[115|[99|[44|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100|[125]]]]]]]]]]]]]]]]}|_cor0]]]]]]]]]]]]]]]]]]})
	  ( <_cor23> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor23})
	    -| ['compiler_generated'] )
	end
'mingw32'/1 =
    %% Line 177
    fun (_cor0) ->
	%% Line 179
	case call 'os':'find_executable'
		 ([109|[105|[110|[103|[119|[51|[50|[45|[103|[99|[99]]]]]]]]]]]) of
	  %% Line 180
	  <'false'> when 'true' ->
	      %% Line 181
	      {'no',_cor0}
	  %% Line 182
	  <Path>
	      when call 'erlang':'is_list'
		    (Path) ->
	      let <DBG_COMP,OPT> =
		  %% Line 185
		  case apply 'is_debug_build'/0
			   () of
		    %% Line 186
		    <'true'> when 'true' ->
			%% Line 187
			<[45|[68|[68|[69|[66|[85|[71]]]]]]],[32]>
		    %% Line 189
		    <'false'> when 'true' ->
			%% Line 190
			<[32],[45|[79|[50|[32]]]]>
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor6> =
		      %% Line 194
		      call 'erlang':'++'
			  (OPT, DBG_COMP)
		  in  let <_cor7> =
			  %% Line 194
			  [45|[103|[32|_cor6]]]
		      in  let <ERTS_CFLAGS> =
			      %% Line 194
			      call 'erlang':'++'
				  ([45|[68|[95|[95|[87|[73|[78|[51|[50|[95|[95|[32]]]]]]]]]]]], _cor7)
			  in  let <_cor11> =
				  %% Line 203
				  call 'erlang':'++'
				      ([45|[68|[95|[95|[87|[73|[78|[51|[50|[95|[95|[32]]]]]]]]]]]], DBG_COMP)
			      in  let <_cor12> =
				      %% Line 204
				      call 'erlang':'++'
					  ([45|[68|[95|[95|[87|[73|[78|[51|[50|[95|[95|[32]]]]]]]]]]]], DBG_COMP)
				  in  let <_cor13> =
					  %% Line 208
					  apply 'common_c_defs'/0
					      ()
				      in  %% Line 197
					  call 'erlang':'throw'
					      ({Path,[{'CC',[109|[105|[110|[103|[119|[51|[50|[45|[103|[99|[99]]]]]]]]]]]}|%% Line 198
															  [{'LD',[109|[105|[110|[103|[119|[51|[50|[45|[103|[99|[99]]]]]]]]]]]}|%% Line 199
																							       [{'SHLIB_LD',[109|[105|[110|[103|[119|[51|[50|[45|[103|[99|[99]]]]]]]]]]]}|%% Line 200
																																	  [{'SHLIB_LDFLAGS',[45|[115|[104|[97|[114|[101|[100|[32]]]]]]]]}|%% Line 201
																																									  [{'SHLIB_LDLIBS',[32|[45|[108|[107|[101|[114|[110|[101|[108|[51|[50]]]]]]]]]]]}|%% Line 202
																																																			  [{'SHLIB_EXTRACT_ALL',[]}|%% Line 203
																																																						    [{'CFLAGS',_cor11}|%% Line 204
																																																								       [{'EI_CFLAGS',_cor12}|%% Line 205
																																																											     [{'ERTS_CFLAGS',ERTS_CFLAGS}|%% Line 206
																																																															  [{'SHLIB_CFLAGS',ERTS_CFLAGS}|%% Line 207
																																																																			[{'CROSSLDFLAGS',[]}|%% Line 208
																																																																					     [{'DEFS',_cor13}|%% Line 209
																																																																							      [{'SHLIB_SUFFIX',[46|[100|[108|[108]]]]}|%% Line 210
																																																																												       [{'ERTS_LIBS',[45|[108|[119|[115|[50|[95|[51|[50]]]]]]]]}|%% Line 211
																																																																																				 [{'LIBS',[45|[108|[119|[115|[50|[95|[51|[50]]]]]]]]}|%% Line 212
																																																																																										      [{'obj',[46|[111]]}|%% Line 213
																																																																																													  [{'exe',[46|[101|[120|[101]]]]}|%% Line 214
																																																																																																	  [{'test_c_compiler',[123|[103|[110|[117|[99|[44|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100|[125]]]]]]]]]]]]]]]]]}|_cor0]]]]]]]]]]]]]]]]]]})
	  ( <_cor14> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor14})
	    -| ['compiler_generated'] )
	end
'common_c_defs'/0 =
    %% Line 218
    fun () ->
	%% Line 219
	[45|[68|[72|[65|[86|[69|[95|[83|[84|[82|[69|[82|[82|[79|[82|[61|[49]]]]]]]]]]]]]]]]]
'make'/1 =
    %% Line 221
    fun (_cor0) ->
	%% Line 222
	try
	    do  %% Line 223
		apply 'find_make'/2
		    ([110|[109|[97|[107|[101|[32|[45|[110|[111|[108|[111|[103|[111]]]]]]]]]]]]], _cor0)
		%% Line 224
		apply 'find_make'/2
		    ([109|[105|[110|[103|[119|[51|[50|[45|[109|[97|[107|[101]]]]]]]]]]]], _cor0)
	of <_cor1> ->
	    _cor1
	catch <_cor4,_cor3,_cor2> ->
	    case <_cor4,_cor3,_cor2> of
	      %% Line 226
	      <'throw',Res = {_X_Path,_X_NewVars},_cor6> when 'true' ->
		  Res
	      ( <_cor4,_cor3,_cor2> when 'true' ->
		    primop 'raise'
			(_cor2, _cor3)
		-| ['compiler_generated'] )
	    end
'find_make'/2 =
    %% Line 229
    fun (_cor1,_cor0) ->
	%% Line 230
	case call 'string':'tokens'
		 (_cor1, [32|[9]]) of
	  <[Make|_cor6]> when 'true' ->
	      %% Line 231
	      case call 'os':'find_executable'
		       (Make) of
		%% Line 232
		<'false'> when 'true' ->
		    %% Line 233
		    {'no',_cor0}
		%% Line 234
		<Path>
		    when call 'erlang':'is_list'
			  (Path) ->
		    %% Line 235
		    call 'erlang':'throw'
			({Path,[{'make_command',_cor1}|_cor0]})
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'ssl'/1 =
    %% Line 238
    fun (_cor0) ->
	%% Line 239
	{[119|[105|[110|[51|[50]]]]],[{'SSLEAY_ROOT',[119|[105|[110|[51|[50]]]]]}|_cor0]}
'javac'/1 =
    %% Line 241
    fun (_cor0) ->
	%% Line 242
	case call 'os':'find_executable'
		 ([106|[97|[118|[97|[99]]]]]) of
	  %% Line 243
	  <'false'> when 'true' ->
	      %% Line 244
	      {'no',_cor0}
	  %% Line 245
	  <Path>
	      when call 'erlang':'is_list'
		    (Path) ->
	      %% Line 246
	      {Path,[{'JAVAC',[106|[97|[118|[97|[99]]]]]}|_cor0]}
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'is_debug_build'/0 =
    %% Line 249
    fun () ->
	let <_cor1> =
	    catch
		let <_cor0> =
		    %% Line 250
		    call 'erlang':'system_info'
			('system_version')
		in  %% Line 250
		    call 'string':'str'
			(_cor0, [100|[101|[98|[117|[103]]]]])
	in  %% Line 250
	    case _cor1 of
	      %% Line 251
	      <Int>
		  when let <_cor2> =
			call 'erlang':'is_integer'
			    (_cor1)
		    in  let <_cor3> =
			    call 'erlang':'>'
				(_cor1, 0)
			in  call 'erlang':'and'
				(_cor2, _cor3) ->
		  %% Line 252
		  'true'
	      %% Line 253
	      <_cor5> when 'true' ->
		  %% Line 254
		  'false'
	    end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('ts_autoconf_win32')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('ts_autoconf_win32', _cor0)
end