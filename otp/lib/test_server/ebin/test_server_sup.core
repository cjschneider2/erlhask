module 'test_server_sup' ['app_test'/2,
			  'appup_test'/1,
			  'call_crash'/5,
			  'call_trace'/1,
			  'capture_get'/1,
			  'check_new_crash_dumps'/0,
			  'cleanup_crash_dumps'/0,
			  'crash_dump_dir'/0,
			  'format_loc'/1,
			  'framework_call'/2,
			  'framework_call'/3,
			  'framework_call'/4,
			  'get_os_family'/0,
			  'get_username'/0,
			  'hostatom'/0,
			  'hostatom'/1,
			  'hoststr'/0,
			  'hoststr'/1,
			  'messages_get'/1,
			  'module_info'/0,
			  'module_info'/1,
			  'tar_crash_dumps'/0,
			  'timecall'/3,
			  'timetrap'/2,
			  'timetrap'/3,
			  'timetrap'/4,
			  'timetrap_cancel'/1,
			  'unique_name'/0,
			  'util_start'/0,
			  'util_stop'/0]
    attributes []
'timetrap'/2 =
    %% Line 50
    fun (_cor1,_cor0) ->
	%% Line 51
	apply 'timetrap'/4
	    (_cor1, _cor1, 'true', _cor0)
'timetrap'/3 =
    %% Line 53
    fun (_cor2,_cor1,_cor0) ->
	%% Line 54
	apply 'timetrap'/4
	    (_cor2, _cor2, _cor1, _cor0)
'timetrap'/4 =
    %% Line 56
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 57
	    call 'erlang':'process_flag'
		('priority', 'max')
	    let <_cor7> =
		%% Line 58
		case <> of
		  <>
		      when let <_cor4> =
			    call 'erlang':'=:='
				(_cor1, 'false')
			in  let <_cor5> =
				call 'erlang':'is_boolean'
				    (_cor1)
			    in  call 'erlang':'and'
				    (_cor4, _cor5) ->
		      _cor3
		  %% Line 59
		  <> when 'true' ->
		      let <_cor6> =
			  call 'test_server':'timetrap_scale_factor'
			      ()
		      in  call 'erlang':'*'
			      (_cor6, _cor3)
		end
	    in  let <TruncTO> =
		    %% Line 61
		    call 'erlang':'trunc'
			(_cor7)
		in  %% Line 62
		    receive
		      
		    after %% Line 63
			  TruncTO ->
		      %% Line 64
		      case call 'erlang':'is_process_alive'
			       (_cor0) of
			%% Line 65
			<'true'> when 'true' ->
			    let <_cor10> =
				%% Line 66
				case <> of
				  <>
				      when call 'erlang':'=='
					    (_cor3,
					     _cor2) ->
				      TruncTO
				  %% Line 67
				  <> when 'true' ->
				      _cor2
				end
			    in  let <MFLs> =
				    %% Line 68
				    call 'test_server':'get_loc'
					(_cor0)
				in  let <Mon> =
					%% Line 69
					call 'erlang':'monitor'
					    ('process', _cor0)
				    in  let <Trap> = {%% Line 70
					     'timetrap_timeout',_cor10,%% Line 70
								       MFLs}
					in  do  %% Line 71
						call 'erlang':'exit'
						    (_cor0, Trap)
						%% Line 72
						receive
						  %% Line 73
						  <{'DOWN',_cor20,'process',_cor21,_cor22}>
						      when let <_cor23> =
							    call 'erlang':'=:='
								(_cor20, Mon)
							in  let <_cor24> =
								call 'erlang':'=:='
								    (_cor21, _cor0)
							    in  call 'erlang':'and'
								    (_cor23, _cor24) ->
						      %% Line 74
						      'ok'
						after %% Line 75
						      10000 ->
						  do  catch
							  %% Line 77
							  call 'error_logger':'warning_msg'
							      (%% Line 78
							       [84|[101|[115|[116|[99|[97|[115|[101|[32|[112|[114|[111|[99|[101|[115|[115|[32|[126|[119|[32|[110|[111|[116|[32|[114|[101|[115|[112|[111|[110|[100|[105|[110|[103|[32|[116|[111|[32|[116|[105|[109|[101|[116|[114|[97|[112|[32|[116|[105|[109|[101|[111|[117|[116|[58|[126|[110|[32|[32|[126|[112|[46|[126|[110|[75|[105|[108|[108|[105|[110|[103|[32|[116|[101|[115|[116|[99|[97|[115|[101|[46|[46|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 83
																																																																				       [_cor0|[Trap|[]]])
						      %% Line 84
						      call 'erlang':'exit'
							  (_cor0, 'kill')
			%% Line 86
			<'false'> when 'true' ->
			    %% Line 87
			    'ok'
			( <_cor15> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor15})
			  -| ['compiler_generated'] )
		      end
'timetrap_cancel'/1 =
    %% Line 96
    fun (_cor0) ->
	do  %% Line 97
	    call 'erlang':'unlink'
		(_cor0)
	    let <MonRef> =
		%% Line 98
		call 'erlang':'monitor'
		    ('process', _cor0)
	    in  do  %% Line 99
		    call 'erlang':'exit'
			(_cor0, 'kill')
		    %% Line 100
		    receive
		      <{'DOWN',_cor3,_cor4,_cor5,_cor6}>
			  when call 'erlang':'=:='
				(_cor3,
				 MonRef) ->
			  'ok'
		    after %% Line 102
			  2000 ->
		      do  %% Line 103
			  call 'erlang':'demonitor'
			      (MonRef, ['flush'])
			  %% Line 104
			  'ok'
'capture_get'/1 =
    %% Line 107
    fun (_cor0) ->
	%% Line 108
	receive
	  %% Line 109
	  <{'captured',Msg}> when 'true' ->
	      %% Line 110
	      apply 'capture_get'/1
		  ([Msg|_cor0])
	after %% Line 111
	      0 ->
	  %% Line 112
	  call 'lists':'reverse'
	      (_cor0)
'messages_get'/1 =
    %% Line 115
    fun (_cor0) ->
	%% Line 116
	receive
	  %% Line 117
	  <Msg> when 'true' ->
	      %% Line 118
	      apply 'messages_get'/1
		  ([Msg|_cor0])
	after %% Line 119
	      0 ->
	  %% Line 120
	  call 'lists':'reverse'
	      (_cor0)
'timecall'/3 =
    %% Line 123
    fun (_cor2,_cor1,_cor0) ->
	let <Befor> =
	    %% Line 124
	    call 'erlang':'now'
		()
	in  let <Val> =
		%% Line 125
		call 'erlang':'apply'
		    (_cor2, _cor1, _cor0)
	    in  let <After> =
		    %% Line 126
		    call 'erlang':'now'
			()
		in  let <_cor16> =
			%% Line 128
			call 'erlang':'element'
			    (1, After)
		    in  let <_cor17> =
			    %% Line 128
			    call 'erlang':'*'
				(_cor16, 1000000)
			in  let <_cor15> =
				%% Line 128
				call 'erlang':'element'
				    (2, After)
			    in  let <_cor18> =
				    %% Line 128
				    call 'erlang':'+'
					(_cor17, _cor15)
				in  let <_cor13> =
					%% Line 128
					call 'erlang':'element'
					    (3, After)
				    in  let <_cor14> =
					    %% Line 128
					    call 'erlang':'/'
						(_cor13, 1000000)
					in  let <_cor19> =
						%% Line 128
						call 'erlang':'+'
						    (_cor18, _cor14)
					    in  let <_cor9> =
						    %% Line 129
						    call 'erlang':'element'
							(1, Befor)
						in  let <_cor10> =
							%% Line 129
							call 'erlang':'*'
							    (_cor9, 1000000)
						    in  let <_cor8> =
							    %% Line 129
							    call 'erlang':'element'
								(2, Befor)
							in  let <_cor11> =
								%% Line 129
								call 'erlang':'+'
								    (_cor10, _cor8)
							    in  let <_cor6> =
								    %% Line 129
								    call 'erlang':'element'
									(3, Befor)
								in  let <_cor7> =
									%% Line 129
									call 'erlang':'/'
									    (_cor6, 1000000)
								    in  let <_cor12> =
									    %% Line 129
									    call 'erlang':'+'
										(_cor11, _cor7)
									in  let <Elapsed> =
										%% Line 128
										call 'erlang':'-'
										    (_cor19, _cor12)
									    in  %% Line 130
										{Elapsed,Val}
'call_crash'/5 =
    %% Line 134
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <OldTrapExit> =
	    %% Line 135
	    call 'erlang':'process_flag'
		('trap_exit', 'true')
	in  let <Pid> =
		%% Line 136
		call 'erlang':'spawn_link'
		    (_cor2, _cor1, _cor0)
	    in  let <_cor7> =
		    %% Line 138
		    receive
		      %% Line 139
		      <{'EXIT',_cor14}>
			  when call 'erlang':'=:='
				(_cor14,
				 _cor3) ->
			  %% Line 140
			  'ok'
		      %% Line 141
		      <{'EXIT',_cor15,_cor16}>
			  when let <_cor17> =
				call 'erlang':'=:='
				    (_cor15, Pid)
			    in  let <_cor18> =
				    call 'erlang':'=:='
					(_cor16, _cor3)
				in  call 'erlang':'and'
					(_cor17, _cor18) ->
			  %% Line 142
			  'ok'
		      %% Line 143
		      <{'EXIT',_X_Reason}>
			  when call 'erlang':'=:='
				(_cor3,
				 'any') ->
			  %% Line 144
			  'ok'
		      %% Line 145
		      <{'EXIT',_cor19,_X_Reason}>
			  when let <_cor20> =
				call 'erlang':'=:='
				    (_cor19, Pid)
			    in  let <_cor21> =
				    call 'erlang':'=:='
					(_cor3, 'any')
				in  call 'erlang':'and'
					(_cor20, _cor21) ->
			  %% Line 146
			  'ok'
		      %% Line 147
		      <{'EXIT',Reason}> when 'true' ->
			  do  %% Line 148
			      call 'test_server':'format'
				  (12, [87|[114|[111|[110|[103|[32|[99|[114|[97|[115|[104|[32|[114|[101|[97|[115|[111|[110|[46|[32|[87|[97|[110|[116|[101|[100|[32|[126|[112|[44|[32|[103|[111|[116|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 149
																															     [_cor3|[Reason|[]]])
			      %% Line 150
			      call 'erlang':'exit'
				  ({'wrong_crash_reason',Reason})
		      %% Line 151
		      <{'EXIT',_cor22,Reason}>
			  when call 'erlang':'=:='
				(_cor22,
				 Pid) ->
			  do  %% Line 152
			      call 'test_server':'format'
				  (12, [87|[114|[111|[110|[103|[32|[99|[114|[97|[115|[104|[32|[114|[101|[97|[115|[111|[110|[46|[32|[87|[97|[110|[116|[101|[100|[32|[126|[112|[44|[32|[103|[111|[116|[32|[126|[112|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 153
																															     [_cor3|[Reason|[]]])
			      %% Line 154
			      call 'erlang':'exit'
				  ({'wrong_crash_reason',Reason})
		      %% Line 155
		      <{'EXIT',OtherPid,Reason}>
			  when call 'erlang':'=:='
				(OldTrapExit,
				 'false') ->
			  %% Line 156
			  call 'erlang':'exit'
			      ({'EXIT',OtherPid,Reason})
		    after %% Line 157
			  apply 'do_trunc'/1
			      (_cor4) ->
		      %% Line 158
		      call 'erlang':'exit'
			  ('call_crash_timeout')
		in  do  %% Line 160
			call 'erlang':'process_flag'
			    ('trap_exit', OldTrapExit)
			_cor7
'do_trunc'/1 =
    %% Line 163
    fun (_cor0) ->
	case _cor0 of
	  <'infinity'> when 'true' ->
	      'infinity'
	  %% Line 164
	  <T> when 'true' ->
	      call 'erlang':'trunc'
		  (T)
	end
'app_test'/2 =
    %% Line 179
    fun (_cor1,_cor0) ->
	%% Line 180
	case apply 'is_app'/1
		 (_cor1) of
	  %% Line 181
	  <{'ok',AppFile}> when 'true' ->
	      %% Line 182
	      apply 'do_app_tests'/3
		  (AppFile, _cor1, _cor0)
	  %% Line 183
	  <Error> when 'true' ->
	      %% Line 184
	      call 'test_server':'fail'
		  (Error)
	end
'is_app'/1 =
    %% Line 187
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 188
	    call 'code':'lib_dir'
		(_cor0)
	in  let <_cor2> =
		%% Line 189
		call 'erlang':'atom_to_list'
		    (_cor0)
	    in  let <_cor3> =
		    %% Line 189
		    call 'erlang':'++'
			(_cor2, [46|[97|[112|[112]]]])
		in  let <_cor4> =
			%% Line 188
			call 'filename':'join'
			    ([_cor1|[[101|[98|[105|[110]]]]|%% Line 189
							    [_cor3|[]]]])
		    in  %% Line 188
			case call 'file':'consult'
				 (_cor4) of
			  %% Line 190
			  <{'ok',[{'application',_cor7,AppFile}|[]]}>
			      when call 'erlang':'=:='
				    (_cor7,
				     _cor0) ->
			      %% Line 191
			      {'ok',AppFile}
			  %% Line 192
			  <_cor8> when 'true' ->
			      do  %% Line 193
				  call 'test_server':'format'
				      ('minor', %% Line 194
						[65|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[40|[46|[97|[112|[112|[41|[32|[102|[105|[108|[101|[32|[110|[111|[116|[32|[102|[111|[117|[110|[100|[44|[32|[111|[114|[32|[105|[116|[32|[104|[97|[115|[32|[118|[101|[114|[121|[32|[98|[97|[100|[32|[115|[121|[110|[116|[97|[120|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
				  %% Line 196
				  {'error','not_an_application'}
			end
'do_app_tests'/3 =
    %% Line 200
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 209
	    apply 'fill_dictionary'/1
		([{'missing_fields',[]}|[{'missing_mods',[]}|[{'superfluous_mods_in_ebin',[]}|[{'export_all_mods',[]}|[{'missing_apps',[]}]]]]])
	    do  %% Line 212
		apply 'check_fields'/2
		    (['description'|['modules'|['registered'|['applications']]]], _cor2)
		%% Line 215
		case call 'lists':'keysearch'
			 ('modules', 1, _cor2) of
		  <{'value',{'modules',Mods}}> when 'true' ->
		      let <_cor5> =
			  %% Line 216
			  apply 'get_ebin_modnames'/1
			      (_cor1)
		      in  let <EBinList> =
			      %% Line 216
			      call 'lists':'sort'
				  (_cor5)
			  in  let <_cor7> =
				  %% Line 217
				  call 'lists':'sort'
				      (Mods)
			      in  %% Line 217
				  case apply 'common'/2
					   (_cor7, EBinList) of
				    <{Missing,Extra}> when 'true' ->
					do  %% Line 218
					    call 'erlang':'put'
						('superfluous_mods_in_ebin', Extra)
					    do  %% Line 219
						call 'erlang':'put'
						    ('missing_mods', Missing)
						do  %% Line 222
						    apply 'app_check_export_all'/1
							(Mods)
						    %% Line 225
						    case %% Line 226
							 call 'lists':'keysearch'
							     ('applications', 1, _cor2) of
						      <{'value',{'applications',Apps}}> when 'true' ->
							  do  %% Line 227
							      apply 'check_apps'/1
								  (Apps)
							      let <A> =
								  %% Line 229
								  apply 'check_dict'/2
								      ('missing_fields', [73|[110|[99|[111|[110|[115|[105|[115|[116|[101|[110|[116|[32|[97|[112|[112|[32|[102|[105|[108|[101|[44|[32|[109|[105|[115|[115|[105|[110|[103|[32|[102|[105|[101|[108|[100|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
							      in  let <B> =
								      %% Line 231
								      apply 'check_dict'/2
									  ('missing_mods', [73|[110|[99|[111|[110|[115|[105|[115|[116|[101|[110|[116|[32|[97|[112|[112|[32|[102|[105|[108|[101|[44|[32|[109|[105|[115|[115|[105|[110|[103|[32|[109|[111|[100|[117|[108|[101|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
								  in  let <C> =
									  %% Line 233
									  apply 'check_dict_tolerant'/3
									      ('superfluous_mods_in_ebin', [73|[110|[99|[111|[110|[115|[105|[115|[116|[101|[110|[116|[32|[97|[112|[112|[32|[102|[105|[108|[101|[44|[32|[77|[111|[100|[117|[108|[101|[115|[32|[110|[111|[116|[32|[105|[110|[99|[108|[117|[100|[101|[100|[32|[105|[110|[32|[97|[112|[112|[32|[102|[105|[108|[101|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], _cor0)
								      in  let <D> =
									      %% Line 235
									      apply 'check_dict'/2
										  ('export_all_mods', [73|[110|[99|[111|[110|[115|[105|[115|[116|[101|[110|[116|[32|[97|[112|[112|[32|[102|[105|[108|[101|[44|[32|[77|[111|[100|[117|[108|[101|[115|[32|[104|[97|[118|[101|[32|[96|[101|[120|[112|[111|[114|[116|[95|[97|[108|[108|[39|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
									  in  let <E> =
										  %% Line 237
										  apply 'check_dict'/2
										      ('missing_apps', [73|[110|[99|[111|[110|[115|[105|[115|[116|[101|[110|[116|[32|[97|[112|[112|[32|[102|[105|[108|[101|[44|[32|[109|[105|[115|[115|[105|[110|[103|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
									      in  do  %% Line 240
										      apply 'erase_dictionary'/1
											  ([{'missing_fields',[]}|[{'missing_mods',[]}|[{'superfluous_mods_in_ebin',[]}|[{'export_all_mods',[]}|[{'missing_apps',[]}]]]]])
										      let <_cor15> =
											  %% Line 241
											  call 'erlang':'+'
											      (A, B)
										      in  let <_cor16> =
											      %% Line 241
											      call 'erlang':'+'
												  (_cor15, C)
											  in  let <_cor17> =
												  %% Line 241
												  call 'erlang':'+'
												      (_cor16, D)
											      in  %% Line 241
												  case call 'erlang':'+'
													   (_cor17, E) of
												    %% Line 242
												    <5> when 'true' ->
													%% Line 243
													'ok'
												    %% Line 244
												    <_cor22> when 'true' ->
													%% Line 245
													call 'test_server':'fail'
													    ()
												  end
						      ( <_cor9> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor9})
							-| ['compiler_generated'] )
						    end
				    ( <_cor8> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor8})
				      -| ['compiler_generated'] )
				  end
		  ( <_cor4> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor4})
		    -| ['compiler_generated'] )
		end
'app_check_export_all'/1 =
    %% Line 248
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 249
	      'ok'
	  %% Line 250
	  <[Mod|Mods]> when 'true' ->
	      let <_cor1> =
		  catch
		      %% Line 251
		      call Mod:'module_info'
			  ('compile')
	      in  %% Line 251
		  case _cor1 of
		    %% Line 252
		    <{'EXIT',{'undef',_cor7}}> when 'true' ->
			%% Line 253
			apply 'app_check_export_all'/1
			    (Mods)
		    %% Line 254
		    <COpts> when 'true' ->
			%% Line 255
			case call 'lists':'keysearch'
				 ('options', 1, COpts) of
			  %% Line 256
			  <'false'> when 'true' ->
			      %% Line 257
			      apply 'app_check_export_all'/1
				  (Mods)
			  %% Line 258
			  <{'value',{'options',List}}> when 'true' ->
			      %% Line 259
			      case call 'lists':'member'
				       ('export_all', List) of
				%% Line 260
				<'true'> when 'true' ->
				    let <_cor2> =
					%% Line 261
					call 'erlang':'get'
					    ('export_all_mods')
				    in  do  %% Line 261
					    call 'erlang':'put'
						('export_all_mods', [Mod|_cor2])
					    %% Line 262
					    apply 'app_check_export_all'/1
						(Mods)
				%% Line 263
				<'false'> when 'true' ->
				    %% Line 264
				    apply 'app_check_export_all'/1
					(Mods)
				( <_cor3> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor3})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor4})
			    -| ['compiler_generated'] )
			end
		  end
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'app_check_export_all',1}}] )
	    -| ['compiler_generated'] )
	end
'appup_test'/1 =
    %% Line 280
    fun (_cor0) ->
	%% Line 281
	case apply 'is_app'/1
		 (_cor0) of
	  %% Line 282
	  <{'ok',AppFile}> when 'true' ->
	      let <_cor1> =
		  %% Line 283
		  call 'proplists':'get_value'
		      ('vsn', AppFile)
	      in  %% Line 283
		  case apply 'is_appup'/2
			   (_cor0, _cor1) of
		    %% Line 284
		    <{'ok',Up,Down}> when 'true' ->
			let <StartMod> =
			    %% Line 285
			    call 'proplists':'get_value'
				('mod', AppFile)
			in  let <Modules> =
				%% Line 286
				call 'proplists':'get_value'
				    ('modules', AppFile)
			    in  %% Line 287
				apply 'do_appup_tests'/5
				    (StartMod, _cor0, Up, Down, Modules)
		    %% Line 288
		    <Error> when 'true' ->
			%% Line 289
			call 'test_server':'fail'
			    (Error)
		  end
	  %% Line 291
	  <Error> when 'true' ->
	      %% Line 292
	      call 'test_server':'fail'
		  (Error)
	end
'is_appup'/2 =
    %% Line 295
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 296
	    call 'erlang':'atom_to_list'
		(_cor1)
	in  let <AppupFile> =
		%% Line 296
		call 'erlang':'++'
		    (_cor2, [46|[97|[112|[112|[117|[112]]]]]])
	    in  let <_cor4> =
		    %% Line 297
		    call 'code':'lib_dir'
			(_cor1)
		in  let <AppupPath> =
			%% Line 297
			call 'filename':'join'
			    ([_cor4|[[101|[98|[105|[110]]]]|[AppupFile|[]]]])
		    in  %% Line 298
			case call 'file':'consult'
				 (AppupPath) of
			  %% Line 299
			  <{'ok',[{_cor11,Up,Down}|[]]}>
			      when let <_cor12> =
				    call 'erlang':'=:='
					(_cor11, _cor0)
				in  let <_cor6> =
					call 'erlang':'is_list'
					    (Up)
				    in  let <_cor7> =
					    call 'erlang':'is_list'
						(Down)
					in  let <_cor13> =
						call 'erlang':'and'
						    (_cor6, _cor7)
					    in  call 'erlang':'and'
						    (_cor12, _cor13) ->
			      %% Line 300
			      {'ok',Up,Down}
			  %% Line 301
			  <_cor14> when 'true' ->
			      do  %% Line 302
				  call 'test_server':'format'
				      (%% Line 303
				       'minor', %% Line 304
						[65|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[117|[112|[103|[114|[97|[100|[101|[32|[40|[46|[97|[112|[112|[117|[112|[41|[32|[102|[105|[108|[101|[32|[110|[111|[116|[32|[102|[111|[117|[110|[100|[44|[32|[111|[114|[32|[105|[116|[32|[104|[97|[115|[32|[118|[101|[114|[121|[32|[98|[97|[100|[32|[115|[121|[110|[116|[97|[120|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
				  %% Line 306
				  {'error','appup_not_readable'}
			end
'do_appup_tests'/5 =
    %% Line 309
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <'undefined',Application,Up,Down,_X_Modules> when 'true' ->
	      %% Line 311
	      case Up of
		%% Line 312
		<[{#{#<46>(8,1,'integer',['unsigned'|['big']]),
		     #<42>(8,1,'integer',['unsigned'|['big']])}#,[{'restart_application',_cor14}|[]]}|[]]>
		    when call 'erlang':'=:='
			  (_cor14,
			   Application) ->
		    %% Line 313
		    case Down of
		      %% Line 314
		      <[{#{#<46>(8,1,'integer',['unsigned'|['big']]),
			   #<42>(8,1,'integer',['unsigned'|['big']])}#,[{'restart_application',_cor15}|[]]}|[]]>
			  when call 'erlang':'=:='
				(_cor15,
				 Application) ->
			  %% Line 315
			  'ok'
		      %% Line 316
		      <_cor16> when 'true' ->
			  do  %% Line 317
			      call 'test_server':'format'
				  (%% Line 318
				   'minor', %% Line 319
					    [76|[105|[98|[114|[97|[114|[121|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[110|[101|[101|[100|[115|[32|[114|[101|[115|[116|[97|[114|[116|[95|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[100|[111|[119|[110|[103|[114|[97|[100|[101|[32|[105|[110|[115|[116|[114|[117|[99|[116|[105|[111|[110|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
			      %% Line 321
			      {'error','library_downgrade_instruction_malformed'}
		    end
		%% Line 323
		<_cor17> when 'true' ->
		    do  %% Line 324
			call 'test_server':'format'
			    (%% Line 325
			     'minor', %% Line 326
				      [76|[105|[98|[114|[97|[114|[121|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[110|[101|[101|[100|[115|[32|[114|[101|[115|[116|[97|[114|[116|[95|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[117|[112|[103|[114|[97|[100|[101|[32|[105|[110|[115|[116|[114|[117|[99|[116|[105|[111|[110|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
			%% Line 328
			{'error','library_upgrade_instruction_malformed'}
	      end
	  %% Line 330
	  <_cor18,_X_Application,Up,Down,Modules> when 'true' ->
	      %% Line 332
	      case apply 'check_appup_clauses_plausible'/3
		       (Up, 'up', Modules) of
		%% Line 333
		<'ok'> when 'true' ->
		    %% Line 334
		    case apply 'check_appup_clauses_plausible'/3
			     (Down, 'down', Modules) of
		      %% Line 335
		      <'ok'> when 'true' ->
			  %% Line 336
			  call 'test_server':'format'
			      ('minor', [79|[75|[126|[110]]]])
		      %% Line 337
		      <Error> when 'true' ->
			  do  %% Line 338
			      call 'test_server':'format'
				  ('minor', [69|[82|[82|[79|[82|[32|[126|[112|[126|[110]]]]]]]]]], [Error|[]])
			      %% Line 339
			      call 'test_server':'fail'
				  (Error)
		    end
		%% Line 341
		<Error> when 'true' ->
		    do  %% Line 342
			call 'test_server':'format'
			    ('minor', [69|[82|[82|[79|[82|[32|[126|[112|[126|[110]]]]]]]]]], [Error|[]])
			%% Line 343
			call 'test_server':'fail'
			    (Error)
	      end
	end
'check_appup_clauses_plausible'/3 =
    %% Line 346
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_X_Direction,_X_Modules> when 'true' ->
	      %% Line 347
	      'ok'
	  %% Line 348
	  <[{Re,Instrs}|Rest],Direction,Modules>
	      when %% Line 349
		call 'erlang':'is_binary'
		    (Re) ->
	      %% Line 350
	      case call 're':'compile'
		       (Re) of
		%% Line 351
		<{'ok',_cor9}> when 'true' ->
		    %% Line 352
		    case apply 'check_appup_instructions'/3
			     (Instrs, Direction, Modules) of
		      %% Line 353
		      <'ok'> when 'true' ->
			  %% Line 354
			  apply 'check_appup_clauses_plausible'/3
			      (Rest, Direction, Modules)
		      %% Line 355
		      <Error> when 'true' ->
			  %% Line 356
			  Error
		    end
		%% Line 358
		<{'error',Error}> when 'true' ->
		    %% Line 359
		    {'error',{'version_regex_malformed',Re,Error}}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 361
	  <[{V,Instrs}|Rest],Direction,Modules>
	      when %% Line 362
		call 'erlang':'is_list'
		    (V) ->
	      %% Line 363
	      case apply 'check_appup_instructions'/3
		       (Instrs, Direction, Modules) of
		%% Line 364
		<'ok'> when 'true' ->
		    %% Line 365
		    apply 'check_appup_clauses_plausible'/3
			(Rest, Direction, Modules)
		%% Line 366
		<Error> when 'true' ->
		    %% Line 367
		    Error
	      end
	  %% Line 369
	  <Clause,_X_Direction,_X_Modules> when 'true' ->
	      %% Line 370
	      {'error',{'clause_malformed',Clause}}
	end
'check_appup_instructions'/3 =
    %% Line 372
    fun (_cor2,_cor1,_cor0) ->
	%% Line 373
	case apply 'check_instructions'/6
		 (_cor1, _cor2, _cor2, [], [], _cor0) of
	  %% Line 374
	  <{_X_Good,[]}> when 'true' ->
	      %% Line 375
	      'ok'
	  %% Line 376
	  <{_cor7,Bad}> when 'true' ->
	      %% Line 377
	      {'error',{'bad_instructions',Bad}}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'check_instructions'/6 =
    %% Line 380
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_cor17,[],_cor18,Good,Bad,_cor19> when 'true' ->
	      let <_cor7> =
		  %% Line 381
		  call 'lists':'reverse'
		      (Good)
	      in  let <_cor6> =
		      %% Line 381
		      call 'lists':'reverse'
			  (Bad)
		  in  %% Line 381
		      {_cor7,_cor6}
	  %% Line 382
	  <UpDown,[Instr|Rest],All,Good,Bad,Modules> when 'true' ->
	      let <_cor8> =
		  catch
		      %% Line 383
		      apply 'check_instruction'/4
			  (UpDown, Instr, All, Modules)
	      in  %% Line 383
		  case _cor8 of
		    %% Line 384
		    <'ok'> when 'true' ->
			%% Line 385
			apply 'check_instructions'/6
			    (UpDown, Rest, All, [Instr|Good], Bad, Modules)
		    %% Line 386
		    <{'error',Reason}> when 'true' ->
			let <NewBad> =
			    %% Line 387
			    [{Instr,Reason}|Bad]
			in  %% Line 388
			    apply 'check_instructions'/6
				(UpDown, Rest, All, Good, NewBad, Modules)
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor10})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'check_instructions',6}}] )
	    -| ['compiler_generated'] )
	end
'check_instruction'/4 =
    %% Line 391
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'up',{'add_module',Module},_cor12,Modules> when 'true' ->
	      %% Line 393
	      apply 'check_module'/2
		  (Module, Modules)
	  %% Line 394
	  <'down',{'add_module',Module},_cor13,Modules> when 'true' ->
	      let <_cor4> =
		  catch
		      %% Line 396
		      apply 'check_module'/2
			  (Module, Modules)
	      in  %% Line 396
		  case _cor4 of
		    %% Line 397
		    <{'error',{'unknown_module',_cor14,_cor15}}>
			when let <_cor16> =
			      call 'erlang':'=:='
				  (_cor14, Module)
			  in  let <_cor17> =
				  call 'erlang':'=:='
				      (_cor15, Modules)
			      in  call 'erlang':'and'
				      (_cor16, _cor17) ->
			'ok'
		    %% Line 398
		    <'ok'> when 'true' ->
			call 'erlang':'throw'
			    ({'error',{'existing_readded_module',Module}})
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	  %% Line 400
	  <_cor18,{'load_module',Module},_cor19,Modules> when 'true' ->
	      %% Line 401
	      apply 'check_module'/2
		  (Module, Modules)
	  %% Line 402
	  <_cor20,{'load_module',Module,DepMods},_cor21,Modules> when 'true' ->
	      do  %% Line 403
		  apply 'check_module'/2
		      (Module, Modules)
		  %% Line 404
		  apply 'check_depend'/1
		      (DepMods)
	  %% Line 405
	  <_cor22,{'load_module',Module,Pre,Post,DepMods},_cor23,Modules> when 'true' ->
	      do  %% Line 406
		  apply 'check_module'/2
		      (Module, Modules)
		  do  %% Line 407
		      apply 'check_depend'/1
			  (DepMods)
		      do  %% Line 408
			  apply 'check_purge'/1
			      (Pre)
			  %% Line 409
			  apply 'check_purge'/1
			      (Post)
	  %% Line 410
	  <'up',{'delete_module',Module},_cor24,Modules> when 'true' ->
	      let <_cor6> =
		  catch
		      %% Line 411
		      apply 'check_module'/2
			  (Module, Modules)
	      in  %% Line 411
		  case _cor6 of
		    %% Line 412
		    <{'error',{'unknown_module',_cor25,_cor26}}>
			when let <_cor27> =
			      call 'erlang':'=:='
				  (_cor25, Module)
			  in  let <_cor28> =
				  call 'erlang':'=:='
				      (_cor26, Modules)
			      in  call 'erlang':'and'
				      (_cor27, _cor28) ->
			%% Line 413
			'ok'
		    %% Line 414
		    <'ok'> when 'true' ->
			%% Line 415
			call 'erlang':'throw'
			    ({'error',{'existing_module_deleted',Module}})
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
	  %% Line 417
	  <'down',{'delete_module',Module},_cor29,Modules> when 'true' ->
	      %% Line 418
	      apply 'check_module'/2
		  (Module, Modules)
	  %% Line 419
	  <_cor30,{'update',Module},_cor31,Modules> when 'true' ->
	      %% Line 420
	      apply 'check_module'/2
		  (Module, Modules)
	  %% Line 421
	  <_cor32,{'update',Module,'supervisor'},_cor33,Modules> when 'true' ->
	      %% Line 422
	      apply 'check_module'/2
		  (Module, Modules)
	  %% Line 423
	  <_cor34,{'update',Module,DepMods},_cor35,Modules>
	      when %% Line 424
		call 'erlang':'is_list'
		    (DepMods) ->
	      %% Line 425
	      apply 'check_module'/2
		  (Module, Modules)
	  %% Line 426
	  <_cor36,{'update',Module,Change},_cor37,Modules> when 'true' ->
	      do  %% Line 427
		  apply 'check_module'/2
		      (Module, Modules)
		  %% Line 428
		  apply 'check_change'/1
		      (Change)
	  %% Line 429
	  <_cor38,{'update',Module,Change,DepMods},_cor39,Modules> when 'true' ->
	      do  %% Line 430
		  apply 'check_module'/2
		      (Module, Modules)
		  do  %% Line 431
		      apply 'check_change'/1
			  (Change)
		      %% Line 432
		      apply 'check_depend'/1
			  (DepMods)
	  %% Line 433
	  <_cor40,{'update',Module,Change,Pre,Post,DepMods},_cor41,Modules> when 'true' ->
	      do  %% Line 434
		  apply 'check_module'/2
		      (Module, Modules)
		  do  %% Line 435
		      apply 'check_change'/1
			  (Change)
		      do  %% Line 436
			  apply 'check_purge'/1
			      (Pre)
			  do  %% Line 437
			      apply 'check_purge'/1
				  (Post)
			      %% Line 438
			      apply 'check_depend'/1
				  (DepMods)
	  %% Line 439
	  <_cor42,%% Line 440
		  {'update',Module,Timeout,Change,Pre,Post,DepMods},_cor43,%% Line 442
									   Modules> when 'true' ->
	      do  %% Line 443
		  apply 'check_module'/2
		      (Module, Modules)
		  do  %% Line 444
		      apply 'check_timeout'/1
			  (Timeout)
		      do  %% Line 445
			  apply 'check_change'/1
			      (Change)
			  do  %% Line 446
			      apply 'check_purge'/1
				  (Pre)
			      do  %% Line 447
				  apply 'check_purge'/1
				      (Post)
				  %% Line 448
				  apply 'check_depend'/1
				      (DepMods)
	  %% Line 449
	  <_cor44,%% Line 450
		  {'update',Module,ModType,Timeout,Change,Pre,Post,DepMods},_cor45,%% Line 452
										   Modules> when 'true' ->
	      do  %% Line 453
		  apply 'check_module'/2
		      (Module, Modules)
		  do  %% Line 454
		      apply 'check_mod_type'/1
			  (ModType)
		      do  %% Line 455
			  apply 'check_timeout'/1
			      (Timeout)
			  do  %% Line 456
			      apply 'check_change'/1
				  (Change)
			      do  %% Line 457
				  apply 'check_purge'/1
				      (Pre)
				  do  %% Line 458
				      apply 'check_purge'/1
					  (Post)
				      %% Line 459
				      apply 'check_depend'/1
					  (DepMods)
	  %% Line 460
	  <_cor46,{'restart_application',Application},_cor47,_cor48> when 'true' ->
	      %% Line 461
	      apply 'check_application'/1
		  (Application)
	  %% Line 462
	  <_cor49,{'remove_application',Application},_cor50,_cor51> when 'true' ->
	      %% Line 463
	      apply 'check_application'/1
		  (Application)
	  %% Line 464
	  <_cor52,{'add_application',Application},_cor53,_cor54> when 'true' ->
	      %% Line 465
	      apply 'check_application'/1
		  (Application)
	  %% Line 466
	  <_cor55,{'add_application',Application,Type},_cor56,_cor57> when 'true' ->
	      do  %% Line 467
		  apply 'check_application'/1
		      (Application)
		  %% Line 468
		  apply 'check_restart_type'/1
		      (Type)
	  %% Line 469
	  <_cor58,Instr,_cor59,_cor60> when 'true' ->
	      %% Line 470
	      call 'erlang':'throw'
		  ({'error',{'low_level_or_invalid_instruction',Instr}})
	end
'check_module'/2 =
    %% Line 472
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 473
	    call 'erlang':'is_atom'
		(_cor1)
	in  let <_cor2> =
		%% Line 473
		call 'lists':'member'
		    (_cor1, _cor0)
	    in  %% Line 473
		case <_cor3,_cor2> of
		  %% Line 474
		  <'true','true'> when 'true' ->
		      'ok'
		  %% Line 475
		  <'true','false'> when 'true' ->
		      call 'erlang':'throw'
			  ({'error',{'unknown_module',_cor1}})
		  %% Line 476
		  <'false',_cor7> when 'true' ->
		      call 'erlang':'throw'
			  ({'error',{'bad_module',_cor1}})
		  ( <_fol32,_fol33> when 'true' ->
			let <_cor4> = {_fol32,_fol33}
			in  primop 'match_fail'
				({'case_clause',_cor4})
		    -| ['compiler_generated'] )
		end
'check_application'/1 =
    %% Line 479
    fun (_cor0) ->
	%% Line 480
	case <> of
	  %% Line 481
	  <>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      'ok'
	  %% Line 482
	  <> when 'true' ->
	      call 'erlang':'throw'
		  ({'error',{'bad_application',_cor0}})
	end
'check_depend'/1 =
    %% Line 485
    fun (_cor0) ->
	case _cor0 of
	  <Dep>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      'ok'
	  %% Line 486
	  <Dep> when 'true' ->
	      call 'erlang':'throw'
		  ({'error',{'bad_depend',Dep}})
	end
'check_restart_type'/1 =
    %% Line 488
    fun (_cor0) ->
	case _cor0 of
	  <'permanent'> when 'true' ->
	      'ok'
	  %% Line 489
	  <'transient'> when 'true' ->
	      'ok'
	  %% Line 490
	  <'temporary'> when 'true' ->
	      'ok'
	  %% Line 491
	  <'load'> when 'true' ->
	      'ok'
	  %% Line 492
	  <'none'> when 'true' ->
	      'ok'
	  %% Line 493
	  <Type> when 'true' ->
	      call 'erlang':'throw'
		  ({'error',{'bad_restart_type',Type}})
	end
'check_timeout'/1 =
    %% Line 495
    fun (_cor0) ->
	case _cor0 of
	  <T>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'>'
			    (_cor0, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      'ok'
	  %% Line 496
	  <'default'> when 'true' ->
	      'ok'
	  %% Line 497
	  <'infinity'> when 'true' ->
	      'ok'
	  %% Line 498
	  <T> when 'true' ->
	      call 'erlang':'throw'
		  ({'error',{'bad_timeout',T}})
	end
'check_mod_type'/1 =
    %% Line 500
    fun (_cor0) ->
	case _cor0 of
	  <'static'> when 'true' ->
	      'ok'
	  %% Line 501
	  <'dynamic'> when 'true' ->
	      'ok'
	  %% Line 502
	  <Type> when 'true' ->
	      call 'erlang':'throw'
		  ({'error',{'bad_mod_type',Type}})
	end
'check_purge'/1 =
    %% Line 504
    fun (_cor0) ->
	case _cor0 of
	  <'soft_purge'> when 'true' ->
	      'ok'
	  %% Line 505
	  <'brutal_purge'> when 'true' ->
	      'ok'
	  %% Line 506
	  <Purge> when 'true' ->
	      call 'erlang':'throw'
		  ({'error',{'bad_purge',Purge}})
	end
'check_change'/1 =
    %% Line 508
    fun (_cor0) ->
	case _cor0 of
	  <'soft'> when 'true' ->
	      'ok'
	  %% Line 509
	  <{'advanced',_cor2}> when 'true' ->
	      'ok'
	  %% Line 510
	  <Change> when 'true' ->
	      call 'erlang':'throw'
		  ({'error',{'bad_change',Change}})
	end
'common'/2 =
    %% Line 516
    fun (_cor1,_cor0) ->
	%% Line 517
	apply 'common'/4
	    (_cor1, _cor0, [], [])
'common'/4 =
    %% Line 519
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[X|Rest1],[_cor10|Rest2],A1,A2>
	      when call 'erlang':'=:='
		    (_cor10,
		     X) ->
	      %% Line 520
	      apply 'common'/4
		  (Rest1, Rest2, A1, A2)
	  %% Line 521
	  <[X|Rest1],[Y|Rest2],A1,A2>
	      when call 'erlang':'<'
		    (X,
		     Y) ->
	      %% Line 522
	      apply 'common'/4
		  (Rest1, [Y|Rest2], [X|A1], A2)
	  %% Line 523
	  <[X|Rest1],[Y|Rest2],A1,A2> when 'true' ->
	      %% Line 524
	      apply 'common'/4
		  ([X|Rest1], Rest2, A1, [Y|A2])
	  %% Line 525
	  <[],L,A1,A2> when 'true' ->
	      let <_cor4> =
		  %% Line 526
		  call 'erlang':'++'
		      (L, A2)
	      in  %% Line 526
		  {A1,_cor4}
	  %% Line 527
	  <L,[],A1,A2> when 'true' ->
	      let <_cor5> =
		  %% Line 528
		  call 'erlang':'++'
		      (L, A1)
	      in  %% Line 528
		  {_cor5,A2}
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'common',4}}] )
	    -| ['compiler_generated'] )
	end
'check_apps'/1 =
    %% Line 530
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 531
	      'ok'
	  %% Line 532
	  <[App|Apps]> when 'true' ->
	      do  %% Line 533
		  case apply 'is_app'/1
			   (App) of
		    %% Line 534
		    <{'ok',_X_AppFile}> when 'true' ->
			'ok'
		    %% Line 536
		    <{'error',_cor4}> when 'true' ->
			let <_cor1> =
			    %% Line 537
			    call 'erlang':'get'
				('missing_apps')
			in  %% Line 537
			    call 'erlang':'put'
				('missing_apps', [App|_cor1])
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
		  %% Line 539
		  apply 'check_apps'/1
		      (Apps)
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'check_apps',1}}] )
	    -| ['compiler_generated'] )
	end
'check_fields'/2 =
    %% Line 541
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_X_AppFile> when 'true' ->
	      %% Line 542
	      'ok'
	  %% Line 543
	  <[L|Ls],AppFile> when 'true' ->
	      do  %% Line 544
		  apply 'check_field'/2
		      (L, AppFile)
		  %% Line 545
		  apply 'check_fields'/2
		      (Ls, AppFile)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'check_fields',2}}] )
	    -| ['compiler_generated'] )
	end
'check_field'/2 =
    %% Line 547
    fun (_cor1,_cor0) ->
	%% Line 548
	case call 'lists':'keymember'
		 (_cor1, 1, _cor0) of
	  %% Line 549
	  <'true'> when 'true' ->
	      %% Line 550
	      'ok'
	  %% Line 551
	  <'false'> when 'true' ->
	      let <_cor2> =
		  %% Line 552
		  call 'erlang':'get'
		      ('missing_fields')
	      in  do  %% Line 552
		      call 'erlang':'put'
			  ('missing_fields', [_cor1|_cor2])
		      %% Line 553
		      'ok'
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'check_dict'/2 =
    %% Line 556
    fun (_cor1,_cor0) ->
	%% Line 557
	case call 'erlang':'get'
		 (_cor1) of
	  %% Line 558
	  <[]> when 'true' ->
	      %% Line 559
	      1
	  %% Line 560
	  <List> when 'true' ->
	      do  %% Line 561
		  call 'io':'format'
		      ([42|[42|[32|[126|[116|[115|[32|[40|[126|[116|[115|[41|[32|[45|[62|[126|[110|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]], [_cor0|[_cor1|[List|[]]]])
		  %% Line 562
		  0
	end
'check_dict_tolerant'/3 =
    %% Line 565
    fun (_cor2,_cor1,_cor0) ->
	%% Line 566
	case call 'erlang':'get'
		 (_cor2) of
	  %% Line 567
	  <[]> when 'true' ->
	      %% Line 568
	      1
	  %% Line 569
	  <List> when 'true' ->
	      do  %% Line 570
		  call 'io':'format'
		      ([42|[42|[32|[126|[116|[115|[32|[40|[126|[116|[115|[41|[32|[45|[62|[126|[110|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]], [_cor1|[_cor2|[List|[]]]])
		  %% Line 571
		  case _cor0 of
		    %% Line 572
		    <'pedantic'> when 'true' ->
			%% Line 573
			0
		    %% Line 574
		    <_cor8> when 'true' ->
			%% Line 575
			1
		  end
	end
'get_ebin_modnames'/1 =
    %% Line 579
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 580
	    call 'code':'lib_dir'
		(_cor0)
	in  let <_cor2> =
		%% Line 581
		call 'code':'objfile_extension'
		    ()
	    in  let <_cor3> =
		    %% Line 581
		    [42|_cor2]
		in  let <Wc> =
			%% Line 580
			call 'filename':'join'
			    ([_cor1|[[101|[98|[105|[110]]]]|%% Line 581
							    [_cor3|[]]]])
		    in  let <TheFun> =
			    %% Line 582
			    ( fun (_cor9,_cor8) ->
				  let <_cor5> =
				      %% Line 584
				      call 'filename':'basename'
					  (_cor9)
				  in  let <_cor6> =
					  %% Line 583
					  call 'filename':'rootname'
					      (_cor5)
				      in  let <_cor7> =
					      %% Line 583
					      call 'erlang':'list_to_atom'
						  (_cor6)
					  in  %% Line 583
					      [_cor7|_cor8]
			      -| [{'id',{0,0,'-get_ebin_modnames/1-fun-0-'}}] )
			in  let <_cor13> =
				%% Line 585
				call 'filelib':'wildcard'
				    (Wc)
			    in  %% Line 585
				call 'lists':'foldl'
				    (TheFun, [], _cor13)
'cleanup_crash_dumps'/0 =
    %% Line 592
    fun () ->
	let <Dir> =
	    %% Line 593
	    apply 'crash_dump_dir'/0
		()
	in  let <_cor1> =
		%% Line 594
		call 'filename':'join'
		    (Dir, [101|[114|[108|[95|[99|[114|[97|[115|[104|[95|[100|[117|[109|[112|[42]]]]]]]]]]]]]]])
	    in  let <Dumps> =
		    %% Line 594
		    call 'filelib':'wildcard'
			(_cor1)
		in  %% Line 595
		    apply 'delete_files'/1
			(Dumps)
'crash_dump_dir'/0 =
    %% Line 597
    fun () ->
	let <_cor0> =
	    %% Line 598
	    call 'code':'which'
		('test_server_sup')
	in  %% Line 598
	    call 'filename':'dirname'
		(_cor0)
'tar_crash_dumps'/0 =
    %% Line 600
    fun () ->
	let <Dir> =
	    %% Line 601
	    apply 'crash_dump_dir'/0
		()
	in  let <_cor1> =
		%% Line 602
		call 'filename':'join'
		    (Dir, [101|[114|[108|[95|[99|[114|[97|[115|[104|[95|[100|[117|[109|[112|[42]]]]]]]]]]]]]]])
	    in  %% Line 602
		case call 'filelib':'wildcard'
			 (_cor1) of
		  %% Line 603
		  <[]> when 'true' ->
		      {'error','no_crash_dumps'}
		  %% Line 604
		  <Dumps> when 'true' ->
		      let <TarFileName> =
			  %% Line 605
			  call 'filename':'join'
			      (Dir, [99|[114|[97|[115|[104|[95|[100|[117|[109|[112|[115|[46|[116|[97|[114|[46|[103|[122]]]]]]]]]]]]]]]]]])
		      in  %% Line 606
			  case call 'erl_tar':'open'
				   (TarFileName, ['write'|['compressed']]) of
			    <{'ok',Tar}> when 'true' ->
				let <_cor8> =
				    %% Line 608
				    ( fun (_cor6) ->
					  let <_cor4> =
					      %% Line 609
					      call 'filename':'basename'
						  (_cor6)
					  in  let <_cor11> =
						  %% Line 609
						  call 'erl_tar':'add'
						      (Tar, _cor6, _cor4, [])
					      in  %% Line 609
						  case _cor11 of
						    <'ok'> when 'true' ->
							( _cor11
							  -| ['compiler_generated'] )
						    ( <_cor5> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor5})
						      -| ['compiler_generated'] )
						  end
				      -| [{'id',{0,0,'-tar_crash_dumps/0-fun-0-'}}] )
				in  do  %% Line 607
					call 'lists':'foreach'
					    (_cor8, %% Line 611
						    Dumps)
					%% Line 612
					case call 'erl_tar':'close'
						 (Tar) of
					  <'ok'> when 'true' ->
					      do  %% Line 613
						  apply 'delete_files'/1
						      (Dumps)
						  %% Line 614
						  {'ok',TarFileName}
					  ( <_cor9> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor9})
					    -| ['compiler_generated'] )
					end
			    ( <_cor3> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor3})
			      -| ['compiler_generated'] )
			  end
		end
'check_new_crash_dumps'/0 =
    %% Line 618
    fun () ->
	let <Dir> =
	    %% Line 619
	    apply 'crash_dump_dir'/0
		()
	in  let <_cor1> =
		%% Line 620
		call 'filename':'join'
		    (Dir, [101|[114|[108|[95|[99|[114|[97|[115|[104|[95|[100|[117|[109|[112|[42]]]]]]]]]]]]]]])
	    in  let <Dumps> =
		    %% Line 620
		    call 'filelib':'wildcard'
			(_cor1)
		in  %% Line 621
		    case call 'erlang':'length'
			     (Dumps) of
		      %% Line 622
		      <0> when 'true' ->
			  %% Line 623
			  'ok'
		      %% Line 624
		      <Num> when 'true' ->
			  do  %% Line 625
			      call 'test_server_ctrl':'format'
				  ('minor', %% Line 626
					    [70|[111|[117|[110|[100|[32|[126|[119|[32|[99|[114|[97|[115|[104|[32|[100|[117|[109|[112|[115|[58|[126|[110]]]]]]]]]]]]]]]]]]]]]]], %% Line 626
																						[Num|[]])
			      do  %% Line 627
				  apply 'append_files_to_logfile'/1
				      (Dumps)
				  %% Line 628
				  apply 'delete_files'/1
				      (Dumps)
		    end
'append_files_to_logfile'/1 =
    %% Line 631
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      'ok'
	  %% Line 632
	  <[File|Files]> when 'true' ->
	      let <NodeName> =
		  %% Line 633
		  apply 'from'/2
		      (46, File)
	      in  do  %% Line 634
		      call 'test_server_ctrl':'format'
			  ('minor', [67|[114|[97|[115|[104|[32|[100|[117|[109|[112|[32|[102|[114|[111|[109|[32|[110|[111|[100|[101|[32|[126|[116|[112|[58|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]], [NodeName|[]])
		      let <Fd> =
			  %% Line 635
			  call 'erlang':'get'
			      ('test_server_minor_fd')
		      in  do  %% Line 636
			      case call 'file':'read_file'
				       (File) of
				%% Line 637
				<{'ok',Bin}> when 'true' ->
				    %% Line 638
				    case call 'file':'write'
					     (Fd, Bin) of
				      %% Line 639
				      <'ok'> when 'true' ->
					  'ok'
				      %% Line 641
				      <{'error',Error}> when 'true' ->
					  let <_cor3> =
					      %% Line 646
					      call 'file':'format_error'
						  (Error)
					  in  %% Line 645
					      call 'io':'format'
						  (Fd, [85|[110|[97|[98|[108|[101|[32|[116|[111|[32|[119|[114|[105|[116|[101|[32|[116|[104|[101|[32|[99|[114|[97|[115|[104|[32|[100|[117|[109|[112|[32|[116|[111|[32|[116|[104|[105|[115|[32|[102|[105|[108|[101|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 646
																																									       [_cor3|[]])
				      ( <_cor4> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor4})
					-| ['compiler_generated'] )
				    end
				%% Line 648
				<_X_Error> when 'true' ->
				    %% Line 649
				    call 'io':'format'
					(Fd, [70|[97|[105|[108|[101|[100|[32|[116|[111|[32|[114|[101|[97|[100|[58|[32|[126|[116|[115|[10]]]]]]]]]]]]]]]]]]]], [File|[]])
			      end
			      %% Line 651
			      apply 'append_files_to_logfile'/1
				  (Files)
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'append_files_to_logfile',1}}] )
	    -| ['compiler_generated'] )
	end
'delete_files'/1 =
    %% Line 653
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      'ok'
	  %% Line 654
	  <[File|Files]> when 'true' ->
	      do  %% Line 655
		  call 'io':'format'
		      ([68|[101|[108|[101|[116|[105|[110|[103|[32|[102|[105|[108|[101|[58|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]], [File|[]])
		  do  %% Line 656
		      case call 'file':'delete'
			       (File) of
			%% Line 657
			<{'error',_cor5}> when 'true' ->
			    let <_cor1> =
				%% Line 658
				call 'erlang':'++'
				    (File, [46|[111|[108|[100]]]])
			    in  %% Line 658
				case call 'file':'rename'
					 (File, _cor1) of
				  %% Line 659
				  <{'error',Error}> when 'true' ->
				      %% Line 660
				      call 'io':'format'
					  ([67|[111|[117|[108|[100|[32|[110|[101|[105|[116|[104|[101|[114|[32|[100|[101|[108|[101|[116|[101|[32|[110|[111|[114|[32|[114|[101|[110|[97|[109|[101|[32|[102|[105|[108|[101|[32|[126|[116|[115|[58|[32|[126|[116|[115|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 661
																																								 [File|[Error|[]]])
				  %% Line 662
				  <_cor6> when 'true' ->
				      'ok'
				end
			%% Line 665
			<_cor7> when 'true' ->
			    'ok'
		      end
		      %% Line 668
		      apply 'delete_files'/1
			  (Files)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'delete_files',1}}] )
	    -| ['compiler_generated'] )
	end
'erase_dictionary'/1 =
    %% Line 677
    fun (_cor0) ->
	case _cor0 of
	  <[{Var,_X_Val}|Vars]> when 'true' ->
	      do  %% Line 678
		  call 'erlang':'erase'
		      (Var)
		  %% Line 679
		  apply 'erase_dictionary'/1
		      (Vars)
	  %% Line 680
	  <[]> when 'true' ->
	      %% Line 681
	      'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'erase_dictionary',1}}] )
	    -| ['compiler_generated'] )
	end
'fill_dictionary'/1 =
    %% Line 688
    fun (_cor0) ->
	case _cor0 of
	  <[{Var,Val}|Vars]> when 'true' ->
	      do  %% Line 689
		  call 'erlang':'put'
		      (Var, Val)
		  %% Line 690
		  apply 'fill_dictionary'/1
		      (Vars)
	  %% Line 691
	  <[]> when 'true' ->
	      %% Line 692
	      []
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'fill_dictionary',1}}] )
	    -| ['compiler_generated'] )
	end
'get_username'/0 =
    %% Line 700
    fun () ->
	%% Line 701
	apply 'getenv_any'/1
	    ([[85|[83|[69|[82]]]]|[[85|[83|[69|[82|[78|[65|[77|[69]]]]]]]]]])
'getenv_any'/1 =
    %% Line 703
    fun (_cor0) ->
	case _cor0 of
	  <[Key|Rest]> when 'true' ->
	      let <_cor1> =
		  catch
		      %% Line 704
		      call 'os':'getenv'
			  (Key)
	      in  %% Line 704
		  case _cor1 of
		    %% Line 705
		    <String>
			when call 'erlang':'is_list'
			      (_cor1) ->
			String
		    %% Line 706
		    <'false'> when 'true' ->
			apply 'getenv_any'/1
			    (Rest)
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	  %% Line 708
	  <[]> when 'true' ->
	      []
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'getenv_any',1}}] )
	    -| ['compiler_generated'] )
	end
'get_os_family'/0 =
    %% Line 715
    fun () ->
	%% Line 716
	case call 'os':'type'
		 () of
	  <{OsFamily,_X_OsName}> when 'true' ->
	      %% Line 717
	      OsFamily
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor0})
	    -| ['compiler_generated'] )
	end
'hostatom'/0 =
    %% Line 725
    fun () ->
	let <_cor0> =
	    %% Line 726
	    call 'erlang':'node'
		()
	in  %% Line 726
	    apply 'hostatom'/1
		(_cor0)
'hostatom'/1 =
    %% Line 727
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 728
	    apply 'hoststr'/1
		(_cor0)
	in  %% Line 728
	    call 'erlang':'list_to_atom'
		(_cor1)
'hoststr'/0 =
    %% Line 729
    fun () ->
	let <_cor0> =
	    %% Line 730
	    call 'erlang':'node'
		()
	in  %% Line 730
	    apply 'hoststr'/1
		(_cor0)
'hoststr'/1 =
    %% Line 731
    fun (_cor0) ->
	case _cor0 of
	  <Node>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 732
		  call 'erlang':'atom_to_list'
		      (Node)
	      in  %% Line 732
		  apply 'hoststr'/1
		      (_cor1)
	  %% Line 733
	  <Node>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 734
	      apply 'from'/2
		  (64, Node)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'hoststr',1}}] )
	    -| ['compiler_generated'] )
	end
'from'/2 =
    %% Line 736
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <H,[_cor4|T]>
	      when call 'erlang':'=:='
		    (_cor4,
		     H) ->
	      T
	  %% Line 737
	  <H,[_cor5|T]> when 'true' ->
	      apply 'from'/2
		  (H, T)
	  %% Line 738
	  <_X_H,[]> when 'true' ->
	      []
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'from',2}}] )
	    -| ['compiler_generated'] )
	end
'framework_call'/2 =
    %% Line 745
    fun (_cor1,_cor0) ->
	%% Line 746
	apply 'framework_call'/3
	    (_cor1, _cor0, 'ok')
'framework_call'/3 =
    %% Line 747
    fun (_cor2,_cor1,_cor0) ->
	let <CB> =
	    %% Line 748
	    call 'os':'getenv'
		([84|[69|[83|[84|[95|[83|[69|[82|[86|[69|[82|[95|[70|[82|[65|[77|[69|[87|[79|[82|[75]]]]]]]]]]]]]]]]]]]]])
	in  %% Line 749
	    apply 'framework_call'/4
		(CB, _cor2, _cor1, _cor0)
'framework_call'/4 =
    %% Line 750
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <FW,_X_Func,_X_Args,DefaultReturn>
	      when let <_cor4> =
		    %% Line 751
		    call 'erlang':'=:='
			(FW, 'false')
		in  let <_cor5> =
			%% Line 751
			call 'erlang':'=:='
			    (FW, [117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]])
		    in  %% Line 751
			call 'erlang':'or'
			    (_cor4, _cor5) ->
	      %% Line 752
	      DefaultReturn
	  %% Line 753
	  <Callback,Func,Args,DefaultReturn> when 'true' ->
	      let <Mod> =
		  %% Line 754
		  call 'erlang':'list_to_atom'
		      (Callback)
	      in  do  %% Line 755
		      case call 'code':'is_loaded'
			       (Mod) of
			%% Line 756
			<'false'> when 'true' ->
			    call 'code':'load_file'
				(Mod)
			%% Line 757
			<_cor27> when 'true' ->
			    'ok'
		      end
		      let <_cor8> =
			  %% Line 759
			  call 'erlang':'length'
			      (Args)
		      in  %% Line 759
			  case call 'erlang':'function_exported'
				   (Mod, Func, _cor8) of
			    %% Line 760
			    <'true'> when 'true' ->
				let <EH> =
				    %% Line 761
				    ( fun (_cor9) ->
					  call 'erlang':'exit'
					      ({'fw_error',{Mod,Func,_cor9}})
				      -| [{'id',{0,0,'-framework_call/4-fun-0-'}}] )
				in  let <_cor13> =
					%% Line 762
					case Func of
					  %% Line 763
					  <'end_tc'> when 'true' ->
					      'true'
					  %% Line 764
					  <'init_tc'> when 'true' ->
					      'true'
					  %% Line 765
					  <_cor28> when 'true' ->
					      'false'
					end
				    in  do  %% Line 767
					    case _cor13 of
					      %% Line 768
					      <'true'> when 'true' ->
						  %% Line 769
						  call 'test_server':'set_tc_state'
						      ({'framework',Mod,Func})
					      %% Line 770
					      <'false'> when 'true' ->
						  'ok'
					      ( <_cor15> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor15})
						-| ['compiler_generated'] )
					    end
					    %% Line 773
					    try
						call 'erlang':'apply'
						    (Mod, Func, Args)
					    of <_cor16> ->
						_cor16
					    catch <_cor20,_cor19,_cor18> ->
						case <_cor20,_cor19,_cor18> of
						  %% Line 777
						  <'exit',Why,_cor29> when 'true' ->
						      %% Line 778
						      apply EH
							  (Why)
						  %% Line 779
						  <'error',Why,_cor30> when 'true' ->
						      let <_cor21> =
							  %% Line 780
							  call 'erlang':'get_stacktrace'
							      ()
						      in  %% Line 780
							  apply EH
							      ({Why,_cor21})
						  %% Line 781
						  <'throw',Why,_cor31> when 'true' ->
						      %% Line 782
						      apply EH
							  (Why)
						  ( <_cor20,_cor19,_cor18> when 'true' ->
							primop 'raise'
							    (_cor18, _cor19)
						    -| ['compiler_generated'] )
						end
			    %% Line 784
			    <'false'> when 'true' ->
				%% Line 785
				DefaultReturn
			    ( <_cor22> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor22})
			      -| ['compiler_generated'] )
			  end
	end
'format_loc'/1 =
    %% Line 795
    fun (_cor0) ->
	case _cor0 of
	  <[{Mod,Func,Line}|[]]> when 'true' ->
	      let <_cor1> =
		  %% Line 796
		  apply 'format_loc1'/1
		      ({Mod,Func,Line})
	      in  %% Line 796
		  [_cor1|[]]
	  %% Line 797
	  <[{Mod,Func,Line}|Rest]> when 'true' ->
	      let <_cor2> =
		  %% Line 798
		  apply 'format_loc1'/1
		      ({Mod,Func,Line})
	      in  let <_cor3> =
		      %% Line 798
		      apply 'format_loc1'/1
			  (Rest)
		  in  %% Line 798
		      [[91]|[_cor2|[[44|[10]]|_cor3]]]
	  %% Line 799
	  <[{Mod,LineOrFunc}|[]]> when 'true' ->
	      %% Line 800
	      apply 'format_loc'/1
		  ({Mod,LineOrFunc})
	  %% Line 801
	  <{Mod,Func}>
	      when call 'erlang':'is_atom'
		    (Func) ->
	      %% Line 802
	      call 'io_lib':'format'
		  ([123|[126|[119|[44|[126|[119|[125]]]]]]], [Mod|[Func|[]]])
	  %% Line 803
	  <Loc> when 'true' ->
	      %% Line 804
	      call 'io_lib':'format'
		  ([126|[112]], [Loc|[]])
	end
'format_loc1'/1 =
    %% Line 806
    fun (_cor0) ->
	case _cor0 of
	  <[{Mod,Func,Line}|[]]> when 'true' ->
	      let <_cor1> =
		  %% Line 807
		  apply 'format_loc1'/1
		      ({Mod,Func,Line})
	      in  %% Line 807
		  [[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32]]]]]]]]]]]]]]|[_cor1|[[93]]]]
	  %% Line 808
	  <[{Mod,Func,Line}|Rest]> when 'true' ->
	      let <_cor2> =
		  %% Line 809
		  apply 'format_loc1'/1
		      ({Mod,Func,Line})
	      in  let <_cor3> =
		      %% Line 809
		      apply 'format_loc1'/1
			  (Rest)
		  in  %% Line 809
		      [[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32]]]]]]]]]]]]]]|[_cor2|[[44|[10]]|_cor3]]]
	  %% Line 810
	  <{Mod,Func,Line}> when 'true' ->
	      let <ModStr> =
		  %% Line 811
		  call 'erlang':'atom_to_list'
		      (Mod)
	      in  let <_cor6> =
		      %% Line 812
		      call 'erlang':'get'
			  ('test_server_logopts')
		  in  let <_cor7> =
			  %% Line 812
			  call 'lists':'member'
			      ('no_src', _cor6)
		      in  let <_cor5> =
			      %% Line 813
			      call 'lists':'reverse'
				  (ModStr)
			  in  %% Line 812
			      case <_cor7,_cor5> of
				%% Line 814
				<'false',[69|[84|[73|[85|[83|[95|_cor12]]]]]]> when 'true' ->
				    let <_cor8> =
					%% Line 817
					apply 'downcase'/1
					    (ModStr)
				    in  let <_cor9> =
					    %% Line 817
					    call 'test_server_ctrl':'uri_encode'
						(_cor8)
					in  %% Line 815
					    call 'io_lib':'format'
						([123|[126|[119|[44|[126|[119|[44|[60|[97|[32|[104|[114|[101|[102|[61|[34|[126|[116|[115|[126|[116|[115|[35|[126|[119|[34|[62|[126|[119|[60|[47|[97|[62|[125]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 816
																														[Mod|[Func|%% Line 817
																															   [_cor9|%% Line 818
																																  [[46|[115|[114|[99|[46|[104|[116|[109|[108]]]]]]]]]|[Line|[Line|[]]]]]]])
				%% Line 819
				<_fol58,_fol59> when 'true' ->
				    %% Line 820
				    call 'io_lib':'format'
					([123|[126|[119|[44|[126|[119|[44|[126|[119|[125]]]]]]]]]], [Mod|[Func|[Line|[]]]])
			      end
	  ( <_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11})
		  -| [{'function_name',{'format_loc1',1}}] )
	    -| ['compiler_generated'] )
	end
'downcase'/1 =
    %% Line 823
    fun (_cor0) ->
	apply 'downcase'/2
	    (_cor0, [])
'downcase'/2 =
    %% Line 824
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Uc|Rest],Result>
	      when let <_cor2> =
		    call 'erlang':'=<'
			(65, Uc)
		in  let <_cor3> =
			call 'erlang':'=<'
			    (Uc, 90)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor4> =
		  %% Line 825
		  call 'erlang':'-'
		      (Uc, 65)
	      in  let <_cor5> =
		      %% Line 825
		      call 'erlang':'+'
			  (_cor4, 97)
		  in  %% Line 825
		      apply 'downcase'/2
			  (Rest, [_cor5|Result])
	  %% Line 826
	  <[C|Rest],Result> when 'true' ->
	      %% Line 827
	      apply 'downcase'/2
		  (Rest, [C|Result])
	  %% Line 828
	  <[],Result> when 'true' ->
	      %% Line 829
	      call 'lists':'reverse'
		  (Result)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'downcase',2}}] )
	    -| ['compiler_generated'] )
	end
'util_start'/0 =
    %% Line 835
    fun () ->
	let <Starter> =
	    %% Line 836
	    call 'erlang':'self'
		()
	in  %% Line 837
	    case call 'erlang':'whereis'
		     ('test_server_sup') of
	      %% Line 838
	      <'undefined'> when 'true' ->
		  let <_cor2> =
		      %% Line 839
		      ( fun () ->
			    let <_cor1> =
				%% Line 840
				call 'erlang':'self'
				    ()
			    in  do  %% Line 840
				    call 'erlang':'register'
					('test_server_sup', _cor1)
				    %% Line 841
				    apply 'util_loop'/1
					({'util_state',Starter,'undefined'})
			-| [{'id',{0,0,'-util_start/0-fun-0-'}}] )
		  in  %% Line 839
		      call 'erlang':'spawn_link'
			  (_cor2)
	      %% Line 843
	      <_X_Pid> when 'true' ->
		  %% Line 844
		  'ok'
	    end
'util_stop'/0 =
    %% Line 851
    fun () ->
	%% Line 852
	try
	    let <_cor0> =
		call 'erlang':'self'
		    ()
	    in  call 'erlang':'!'
		    ('test_server_sup', {_cor0,'stop'})
	of <_cor1> ->
	    %% Line 854
	    receive
	      <{'test_server_sup','stopped'}> when 'true' ->
		  'ok'
	    after %% Line 855
		  5000 ->
	      let <_cor2> =
		  %% Line 855
		  call 'erlang':'whereis'
		      ('test_server_sup')
	      in  %% Line 855
		  call 'erlang':'exit'
		      (_cor2, 'kill')
	catch <_cor6,_cor5,_cor4> ->
	    %% Line 859
	    'ok'
'unique_name'/0 =
    %% Line 865
    fun () ->
	let <_cor0> =
	    %% Line 866
	    call 'erlang':'self'
		()
	in  do  %% Line 866
		call 'erlang':'!'
		    ('test_server_sup', {_cor0,'unique_name'})
		%% Line 867
		receive
		  <{'test_server_sup',Name}> when 'true' ->
		      Name
		after %% Line 868
		      5000 ->
		  %% Line 868
		  call 'erlang':'exit'
		      ({'test_server_sup','no_util_process'})
'util_loop'/1 =
    %% Line 874
    fun (_cor0) ->
	%% Line 875
	receive
	  %% Line 876
	  <{From,'unique_name'}> when 'true' ->
	      %% Line 877
	      case call 'erlang':'now'
		       () of
		<{_cor19,S,Us}> when 'true' ->
		    let <_cor2> =
			%% Line 878
			call 'erlang':'/'
			    (Us, 1000)
		    in  let <Ms> =
			    %% Line 878
			    call 'erlang':'trunc'
				(_cor2)
			in  let <_cor4> =
				%% Line 879
				call 'io_lib':'format'
				    ([126|[119|[46|[126|[119]]]]], [S|[Ms|[]]])
			    in  let <Name> =
				    %% Line 879
				    call 'lists':'flatten'
					(_cor4)
				in  %% Line 880
				    case <> of
				      <>
					  when ( try
						  ( case <> of
						      ( <>
							    when ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'is_record'
												     -| ['compiler_generated'] )
								    (_cor0,
								     ( 'util_state'
								       -| ['compiler_generated'] ),
								     ( 3
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] ) ->
							    let <_cor10> =
								( call 'erlang':'element'
								      (3, _cor0)
								  -| ['compiler_generated'] )
							    in  ( call 'erlang':'=='
								      (Name, _cor10)
								  -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						      ( <> when 'true' ->
							    'false'
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      of <Try> ->
						  Try
					      catch <T,R> ->
						  'false'
					      -| ['compiler_generated'] ) ->
					  do  %% Line 881
					      call 'timer':'sleep'
						  (1)
					      let <_cor12> =
						  %% Line 882
						  call 'erlang':'self'
						      ()
					      in  do  %% Line 882
						      call 'erlang':'!'
							  (_cor12, {From,'unique_name'})
						      %% Line 883
						      apply 'util_loop'/1
							  (_cor0)
				      %% Line 884
				      <> when 'true' ->
					  do  %% Line 885
					      call 'erlang':'!'
						  (From, {'test_server_sup',Name})
					      %% Line 886
					      case _cor0 of
						<{'util_state',_cor20,_cor21}> when 'true' ->
						    let <_cor15> =
							call 'erlang':'setelement'
							    (3, _cor0, Name)
						    in  apply 'util_loop'/1
							    (_cor15)
						( <_cor22> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','util_state'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
				    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 888
	  <{From,'stop'}> when 'true' ->
	      do  catch
		      %% Line 889
		      ( case _cor0 of
			  ( <( {'util_state',_rec1,_cor23}
			       -| ['compiler_generated'] )> when 'true' ->
				call 'erlang':'unlink'
				    (_rec1)
			    -| ['compiler_generated'] )
			  ( <_cor24> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','util_state'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  do  %% Line 890
		      call 'erlang':'!'
			  (From, {'test_server_sup','stopped'})
		      %% Line 891
		      'ok'
	after 'infinity' ->
	  'true'
'call_trace'/1 =
    %% Line 900
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 901
		apply 'try_call_trace'/1
		    (_cor0)
	in  %% Line 901
	    case _cor1 of
	      %% Line 902
	      <{'EXIT',Reason}> when 'true' ->
		  do  %% Line 903
		      call 'erlang':'display'
			  (Reason)
		      %% Line 904
		      call 'erlang':'exit'
			  (Reason)
	      %% Line 905
	      <Ok> when 'true' ->
		  %% Line 906
		  Ok
	    end
'try_call_trace'/1 =
    %% Line 909
    fun (_cor0) ->
	%% Line 910
	case call 'file':'consult'
		 (_cor0) of
	  %% Line 911
	  <{'ok',Terms}> when 'true' ->
	      do  %% Line 912
		  call 'dbg':'tracer'
		      ()
		  let <_cor1> =
		      %% Line 914
		      call 'erlang':'self'
			  ()
		  in  do  %% Line 914
			  call 'dbg':'p'
			      (_cor1, ['sos'|['call']])
			  let <_cor6> =
			      %% Line 915
			      ( fun (_cor4) ->
				    case _cor4 of
				      <{'m',M}> when 'true' ->
					  %% Line 916
					  case call 'dbg':'tpl'
						   (M, [{'_',[],[{'return_trace'}]}]) of
					    %% Line 917
					    <{'error',What}> when 'true' ->
						call 'erlang':'exit'
						    ({'error',{'tracing_failed',What}})
					    %% Line 918
					    <_cor9> when 'true' ->
						'ok'
					  end
				      %% Line 920
				      <{'f',M,F}> when 'true' ->
					  %% Line 921
					  case call 'dbg':'tpl'
						   (M, F, [{'_',[],[{'return_trace'}]}]) of
					    %% Line 922
					    <{'error',What}> when 'true' ->
						call 'erlang':'exit'
						    ({'error',{'tracing_failed',What}})
					    %% Line 923
					    <_cor10> when 'true' ->
						'ok'
					  end
				      %% Line 925
				      <Huh> when 'true' ->
					  %% Line 926
					  call 'erlang':'exit'
					      ({'error',{'unrecognized_trace_term',Huh}})
				    end
				-| [{'id',{0,0,'-try_call_trace/1-fun-0-'}}] )
			  in  do  %% Line 915
				  call 'lists':'foreach'
				      (_cor6, %% Line 927
					      Terms)
				  %% Line 928
				  'ok'
	  %% Line 929
	  <{_cor11,Error}> when 'true' ->
	      %% Line 930
	      call 'erlang':'exit'
		  ({'error',{'tracing_failed',_cor0,Error}})
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor7})
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('test_server_sup')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('test_server_sup', _cor0)
end