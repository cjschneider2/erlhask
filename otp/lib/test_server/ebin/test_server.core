module 'test_server' ['adjusted_sleep'/1,
		      'app_test'/1,
		      'app_test'/2,
		      'appup_test'/1,
		      'break'/1,
		      'break'/2,
		      'break'/3,
		      'call_crash'/3,
		      'call_crash'/4,
		      'call_crash'/5,
		      'capture_get'/0,
		      'capture_start'/0,
		      'capture_stop'/0,
		      'comment'/1,
		      'continue'/0,
		      'continue'/1,
		      'cover_analyse'/2,
		      'cover_compile'/1,
		      'do_times'/2,
		      'do_times'/4,
		      'fail'/0,
		      'fail'/1,
		      'format'/1,
		      'format'/2,
		      'format'/3,
		      'get_loc'/1,
		      'get_timetrap_info'/0,
		      'hours'/1,
		      'init_purify'/0,
		      'init_target_info'/0,
		      'is_commercial'/0,
		      'is_cover'/0,
		      'is_debug'/0,
		      'is_native'/1,
		      'is_release_available'/1,
		      'lookup_config'/2,
		      'm_out_of_n'/3,
		      'make_priv_dir'/0,
		      'messages_get'/0,
		      'minutes'/1,
		      'module_info'/0,
		      'module_info'/1,
		      'os_type'/0,
		      'permit_io'/2,
		      'purify_format'/2,
		      'purify_is_running'/0,
		      'purify_new_fds_inuse'/0,
		      'purify_new_leaks'/0,
		      'run_on_shielded_node'/2,
		      'run_test_case_apply'/1,
		      'seconds'/1,
		      'set_tc_state'/1,
		      'sleep'/1,
		      'start_node'/3,
		      'stop_node'/1,
		      'temp_name'/1,
		      'timecall'/3,
		      'timetrap'/1,
		      'timetrap_cancel'/0,
		      'timetrap_cancel'/1,
		      'timetrap_scale_factor'/0,
		      'wait_for_node'/1]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','target_info'},[{'record_field',26,{'atom',26,'os_family'}}|[{'record_field',27,{'atom',27,'os_type'}}|[{'record_field',28,{'atom',28,'host'}}|[{'record_field',29,{'atom',29,'version'}}|[{'record_field',30,{'atom',30,'system_version'}}|[{'record_field',31,{'atom',31,'root_dir'}}|[{'record_field',32,{'atom',32,'test_server_dir'}}|[{'record_field',33,{'atom',33,'emulator'}}|[{'record_field',34,{'atom',34,'otp_release'}}|[{'record_field',35,{'atom',35,'username'}}|[{'record_field',36,{'atom',36,'cookie'}}|[{'record_field',37,{'atom',37,'naming'}}|[{'record_field',38,{'atom',38,'master'}}]]]]]]]]]]]]],[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{{'record','par'},[{'record_field',46,{'atom',46,'type'}}|[{'record_field',47,{'atom',47,'target'}}|[{'record_field',48,{'atom',48,'naming'}}|[{'record_field',49,{'atom',49,'master'}}|[{'record_field',50,{'atom',50,'cookie'}}]]]]],[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{{'record','cover'},[{'record_field',53,{'atom',53,'app'}}|[{'record_field',54,{'atom',54,'file'}}|[{'record_field',55,{'atom',55,'incl'}}|[{'record_field',56,{'atom',56,'excl'}}|[{'record_field',57,{'atom',57,'level'}}|[{'record_field',58,{'atom',58,'mods'}}|[{'record_field',59,{'atom',59,'stop'},{'atom',59,'true'}}|[{'record_field',60,{'atom',60,'cross'}}]]]]]]]],[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}],
		%% Line 430
		'type' =
		    %% Line 430
		    [{'tc_status',{'type',430,'union',[{'atom',430,'starting'}|[{'atom',430,'running'}|[{'atom',430,'init_per_testcase'}|[{'atom',431,'end_per_testcase'}|[{'type',431,'tuple',[{'atom',431,'framework'}|[{'type',431,'atom',[]}|[{'type',431,'atom',[]}]]]}|[{'atom',432,'tc'}]]]]]]},[]}],
		%% Line 433
		'type' =
		    %% Line 433
		    [{{'record','st'},[{'typed_record_field',{'record_field',435,{'atom',435,'ref'}},{'type',435,'union',[{'atom',435,'undefined'}|[{'type',435,'reference',[]}]]}}|[{'typed_record_field',{'record_field',436,{'atom',436,'pid'}},{'type',436,'union',[{'atom',436,'undefined'}|[{'type',436,'pid',[]}]]}}|[{'typed_record_field',{'record_field',437,{'atom',437,'mf'}},{'type',437,'union',[{'atom',437,'undefined'}|[{'type',437,'tuple',[{'type',437,'atom',[]}|[{'type',437,'atom',[]}]]}]]}}|[{'typed_record_field',{'record_field',438,{'atom',438,'last_known_loc'}},{'type',438,'union',[{'atom',438,'undefined'}|[{'type',438,'term',[]}]]}}|[{'typed_record_field',{'record_field',439,{'atom',439,'status'}},{'type',439,'union',[{'type',439,'tc_status',[]}|[{'atom',439,'undefined'}]]}}|[{'typed_record_field',{'record_field',440,{'atom',440,'ret_val'}},{'type',440,'union',[{'atom',440,'undefined'}|[{'type',440,'term',[]}]]}}|[{'typed_record_field',{'record_field',441,{'atom',441,'comment'}},{'type',441,'union',[{'atom',441,'undefined'}|[{'type',441,'list',[{'type',441,'char',[]}]}]]}}|[{'typed_record_field',{'record_field',442,{'atom',442,'timeout'}},{'type',442,'union',[{'atom',442,'undefined'}|[{'type',442,'non_neg_integer',[]}|[{'atom',442,'infinity'}]]]}}|[{'typed_record_field',{'record_field',443,{'atom',443,'config'}},{'type',443,'union',[{'type',443,'list',[]}|[{'atom',443,'undefined'}]]}}|[{'typed_record_field',{'record_field',444,{'atom',444,'end_conf_pid'}},{'type',444,'union',[{'type',444,'pid',[]}|[{'atom',444,'undefined'}]]}}]]]]]]]]]],[]}]]
'init_target_info'/0 =
    %% Line 63
    fun () ->
	%% Line 64
	case call 'code':'objfile_extension'
		 () of
	  <[46|Emu]> when 'true' ->
	      %% Line 65
	      case call 'init':'script_id'
		       () of
		<{_cor13,OTPRel}> when 'true' ->
		    let <_cor2> =
			%% Line 66
			call 'code':'which'
			    ('test_server')
		    in  let <_cor3> =
			    %% Line 66
			    call 'filename':'dirname'
				(_cor2)
			in  let <TestServerDir> =
				%% Line 66
				call 'filename':'absname'
				    (_cor3)
			    in  let <_cor12> =
				    %% Line 67
				    call 'test_server_sup':'get_os_family'
					()
				in  let <_cor11> =
					%% Line 68
					call 'os':'type'
					    ()
				    in  let <_cor10> =
					    %% Line 69
					    call 'erlang':'system_info'
						('version')
					in  let <_cor9> =
						%% Line 70
						call 'erlang':'system_info'
						    ('system_version')
					    in  let <_cor8> =
						    %% Line 71
						    call 'code':'root_dir'
							()
						in  let <_cor7> =
							%% Line 75
							call 'test_server_sup':'get_username'
							    ()
						    in  let <_cor5> =
							    %% Line 76
							    call 'erlang':'get_cookie'
								()
							in  let <_cor6> =
								%% Line 76
								call 'erlang':'atom_to_list'
								    (_cor5)
							    in  %% Line 67
								{'target_info',_cor12,_cor11,'undefined',_cor10,_cor9,_cor8,%% Line 72
															    TestServerDir,%% Line 73
																	  Emu,%% Line 74
																	      OTPRel,_cor7,_cor6,'undefined','undefined'}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor0})
	    -| ['compiler_generated'] )
	end
'init_purify'/0 =
    %% Line 78
    fun () ->
	%% Line 79
	apply 'purify_new_leaks'/0
	    ()
'cover_compile'/1 =
    %% Line 99
    fun (_cor0) ->
	case _cor0 of
	  <CoverInfo = {'cover','none',_cor50,Include,_cor51,_cor52,_cor53,_cor54,Cross}> when 'true' ->
	      let <_cor3> =
		  %% Line 100
		  ( fun (_cor1) ->
			case _cor1 of
			  <{_cor55,M}> when 'true' ->
			      M
			  ( <_cor2> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor2})
				  -| [{'function_name',{'-cover_compile/1-fun-0-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-cover_compile/1-fun-0-'}}] )
	      in  let <CrossMods> =
		      %% Line 100
		      call 'lists':'flatmap'
			  (_cor3, Cross)
		  in  let <CompileMods> =
			  %% Line 101
			  call 'erlang':'++'
			      (Include, CrossMods)
		      in  %% Line 102
			  case call 'erlang':'length'
				   (CompileMods) of
			    %% Line 103
			    <0> when 'true' ->
				do  %% Line 104
				    call 'io':'fwrite'
					([87|[65|[82|[78|[73|[78|[71|[58|[32|[78|[111|[32|[109|[111|[100|[117|[108|[101|[115|[32|[116|[111|[32|[99|[111|[118|[101|[114|[32|[99|[111|[109|[112|[105|[108|[101|[33|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
				    do  %% Line 105
					call 'cover':'start'
					    ()
					let <_cor8> =
					    %% Line 106
					    call 'erlang':'setelement'
						(7, CoverInfo, [])
					in  %% Line 106
					    {'ok',_cor8}
			    %% Line 107
			    <N> when 'true' ->
				do  %% Line 108
				    call 'io':'fwrite'
					([67|[111|[118|[101|[114|[32|[99|[111|[109|[112|[105|[108|[105|[110|[103|[32|[126|[119|[32|[109|[111|[100|[117|[108|[101|[115|[32|[45|[32|[116|[104|[105|[115|[32|[109|[97|[121|[32|[116|[97|[107|[101|[32|[115|[111|[109|[101|[32|[116|[105|[109|[101|[46|[46|[46|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 109
																																													[N|[]])
				    do  %% Line 110
					apply 'do_cover_compile'/1
					    (CompileMods)
					do  %% Line 111
					    call 'io':'fwrite'
						([100|[111|[110|[101|[10|[10]]]]]], [])
					    let <_cor11> =
						%% Line 112
						call 'erlang':'setelement'
						    (7, CoverInfo, Include)
					    in  %% Line 112
						{'ok',_cor11}
			  end
	  %% Line 114
	  <CoverInfo = {'cover',App,_cor74,Include,'all',_cor75,_cor76,_cor77,Cross}> when 'true' ->
	      let <_cor15> =
		  %% Line 115
		  ( fun (_cor13) ->
			case _cor13 of
			  <{_cor78,M}> when 'true' ->
			      M
			  ( <_cor14> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor14})
				  -| [{'function_name',{'-cover_compile/1-fun-1-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-cover_compile/1-fun-1-'}}] )
	      in  let <CrossMods> =
		      %% Line 115
		      call 'lists':'flatmap'
			  (_cor15, Cross)
		  in  let <CompileMods> =
			  %% Line 116
			  call 'erlang':'++'
			      (Include, CrossMods)
		      in  %% Line 117
			  case call 'erlang':'length'
				   (CompileMods) of
			    %% Line 118
			    <0> when 'true' ->
				do  %% Line 119
				    call 'io':'fwrite'
					([87|[65|[82|[78|[73|[78|[71|[58|[32|[78|[111|[32|[109|[111|[100|[117|[108|[101|[115|[32|[116|[111|[32|[99|[111|[118|[101|[114|[32|[99|[111|[109|[112|[105|[108|[101|[33|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
				    do  %% Line 120
					call 'cover':'start'
					    ()
					let <_cor20> =
					    %% Line 121
					    call 'erlang':'setelement'
						(7, CoverInfo, [])
					in  %% Line 121
					    {'ok',_cor20}
			    %% Line 122
			    <N> when 'true' ->
				do  %% Line 123
				    call 'io':'fwrite'
					([67|[111|[118|[101|[114|[32|[99|[111|[109|[112|[105|[108|[105|[110|[103|[32|[39|[126|[119|[39|[32|[40|[126|[119|[32|[102|[105|[108|[101|[115|[41|[32|[45|[32|[116|[104|[105|[115|[32|[109|[97|[121|[32|[116|[97|[107|[101|[32|[115|[111|[109|[101|[32|[116|[105|[109|[101|[46|[46|[46|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 124
																																																 [App|[N|[]]])
				    do  %% Line 125
					call 'io':'format'
					    ([10|[87|[65|[82|[78|[73|[78|[71|[58|[32|[65|[108|[108|[32|[109|[111|[100|[117|[108|[101|[115|[32|[105|[110|[32|[39|[126|[119|[39|[32|[97|[114|[101|[32|[101|[120|[99|[108|[117|[100|[101|[100|[10|[79|[110|[108|[121|[32|[99|[111|[118|[101|[114|[32|[99|[111|[109|[112|[105|[108|[105|[110|[103|[32|[109|[111|[100|[117|[108|[101|[115|[32|[105|[110|[32|[105|[110|[99|[108|[117|[100|[101|[32|[108|[105|[115|[116|[32|[97|[110|[100|[32|[116|[104|[101|[32|[109|[111|[100|[117|[108|[101|[115|[10|[105|[110|[32|[116|[104|[101|[32|[99|[114|[111|[115|[115|[32|[99|[111|[118|[101|[114|[32|[102|[105|[108|[101|[58|[10|[126|[116|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 128
																																																																																																			       [App|[CompileMods|[]]])
					do  %% Line 129
					    apply 'do_cover_compile'/1
						(CompileMods)
					    do  %% Line 130
						call 'io':'fwrite'
						    ([100|[111|[110|[101|[10|[10]]]]]], [])
						let <_cor23> =
						    %% Line 131
						    call 'erlang':'setelement'
							(7, CoverInfo, Include)
						in  %% Line 131
						    {'ok',_cor23}
			  end
	  %% Line 133
	  <CoverInfo = {'cover',App,_cor97,Include,Exclude,_cor98,_cor99,_cor100,Cross}> when 'true' ->
	      let <_cor27> =
		  %% Line 134
		  ( fun (_cor25) ->
			case _cor25 of
			  <{_cor101,M}> when 'true' ->
			      M
			  ( <_cor26> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor26})
				  -| [{'function_name',{'-cover_compile/1-fun-2-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-cover_compile/1-fun-2-'}}] )
	      in  let <CrossMods> =
		      %% Line 134
		      call 'lists':'flatmap'
			  (_cor27, Cross)
		  in  %% Line 135
		      case call 'code':'lib_dir'
			       (App) of
			%% Line 136
			<{'error','bad_name'}> when 'true' ->
			    %% Line 137
			    case call 'erlang':'++'
				     (Include, CrossMods) of
			      %% Line 138
			      <[]> when 'true' ->
				  do  %% Line 139
				      call 'io':'format'
					  ([10|[87|[65|[82|[78|[73|[78|[71|[58|[32|[67|[97|[110|[39|[116|[32|[102|[105|[110|[100|[32|[108|[105|[98|[95|[100|[105|[114|[32|[102|[111|[114|[32|[39|[126|[119|[39|[10|[78|[111|[116|[32|[99|[111|[118|[101|[114|[32|[99|[111|[109|[112|[105|[108|[105|[110|[103|[33|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 140
																																														      [App|[]])
				      %% Line 141
				      {'error','application_not_found'}
			      %% Line 142
			      <CompileMods> when 'true' ->
				  let <_cor29> =
				      %% Line 145
				      call 'erlang':'length'
					  (CompileMods)
				  in  do  %% Line 143
					  call 'io':'fwrite'
					      ([67|[111|[118|[101|[114|[32|[99|[111|[109|[112|[105|[108|[105|[110|[103|[32|[39|[126|[119|[39|[32|[40|[126|[119|[32|[102|[105|[108|[101|[115|[41|[32|[45|[32|[116|[104|[105|[115|[32|[109|[97|[121|[32|[116|[97|[107|[101|[32|[115|[111|[109|[101|[32|[116|[105|[109|[101|[46|[46|[46|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 145
																																																       [App|[_cor29|[]]])
					  do  %% Line 146
					      call 'io':'format'
						  ([10|[87|[65|[82|[78|[73|[78|[71|[58|[32|[67|[97|[110|[39|[116|[32|[102|[105|[110|[100|[32|[108|[105|[98|[95|[100|[105|[114|[32|[102|[111|[114|[32|[39|[126|[119|[39|[10|[79|[110|[108|[121|[32|[99|[111|[118|[101|[114|[32|[99|[111|[109|[112|[105|[108|[105|[110|[103|[32|[109|[111|[100|[117|[108|[101|[115|[32|[105|[110|[32|[105|[110|[99|[108|[117|[100|[101|[32|[108|[105|[115|[116|[58|[32|[126|[116|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 148
																																																																				 [App|[Include|[]]])
					      do  %% Line 149
						  apply 'do_cover_compile'/1
						      (CompileMods)
						  do  %% Line 150
						      call 'io':'fwrite'
							  ([100|[111|[110|[101|[10|[10]]]]]], [])
						      let <_cor32> =
							  %% Line 151
							  call 'erlang':'setelement'
							      (7, CoverInfo, Include)
						      in  %% Line 151
							  {'ok',_cor32}
			    end
			%% Line 153
			<LibDir> when 'true' ->
			    let <EbinDir> =
				%% Line 154
				call 'filename':'join'
				    ([LibDir|[[101|[98|[105|[110]]]]]])
			    in  let <WC> =
				    %% Line 155
				    call 'filename':'join'
					(EbinDir, [42|[46|[98|[101|[97|[109]]]]]])
				in  let <_cor36> =
					%% Line 156
					call 'filelib':'wildcard'
					    (WC)
				    in  let <AllMods> =
					    %% Line 156
					    apply 'module_names'/1
						(_cor36)
					in  let <_cor38> =
						%% Line 157
						call 'erlang':'++'
						    (AllMods, Include)
					    in  let <AnalyseMods> =
						    %% Line 157
						    call 'erlang':'--'
							(_cor38, Exclude)
						in  let <CompileMods> =
							%% Line 158
							call 'erlang':'++'
							    (AnalyseMods, CrossMods)
						    in  %% Line 159
							case call 'erlang':'length'
								 (CompileMods) of
							  %% Line 160
							  <0> when 'true' ->
							      do  %% Line 161
								  call 'io':'fwrite'
								      ([87|[65|[82|[78|[73|[78|[71|[58|[32|[78|[111|[32|[109|[111|[100|[117|[108|[101|[115|[32|[116|[111|[32|[99|[111|[118|[101|[114|[32|[99|[111|[109|[112|[105|[108|[101|[33|[10|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
								  do  %% Line 162
								      call 'cover':'start'
									  ()
								      let <_cor43> =
									  %% Line 163
									  call 'erlang':'setelement'
									      (7, CoverInfo, [])
								      in  %% Line 163
									  {'ok',_cor43}
							  %% Line 164
							  <N> when 'true' ->
							      do  %% Line 165
								  call 'io':'fwrite'
								      ([67|[111|[118|[101|[114|[32|[99|[111|[109|[112|[105|[108|[105|[110|[103|[32|[39|[126|[119|[39|[32|[40|[126|[119|[32|[102|[105|[108|[101|[115|[41|[32|[45|[32|[116|[104|[105|[115|[32|[109|[97|[121|[32|[116|[97|[107|[101|[32|[115|[111|[109|[101|[32|[116|[105|[109|[101|[46|[46|[46|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 166
																																																			       [App|[N|[]]])
								  do  %% Line 167
								      apply 'do_cover_compile'/1
									  (CompileMods)
								      do  %% Line 168
									  call 'io':'fwrite'
									      ([100|[111|[110|[101|[10|[10]]]]]], [])
									  let <_cor46> =
									      %% Line 169
									      call 'erlang':'setelement'
										  (7, CoverInfo, AnalyseMods)
									  in  %% Line 169
									      {'ok',_cor46}
							end
		      end
	  ( <_cor49> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor49})
		  -| [{'function_name',{'cover_compile',1}}] )
	    -| ['compiler_generated'] )
	end
'module_names'/1 =
    %% Line 174
    fun (_cor0) ->
	%% Line 175
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[Beam|_cor2]> when 'true' ->
			    let <_cor4> =
				call 'filename':'rootname'
				    (Beam)
			    in  let <_cor5> =
				    call 'filename':'basename'
					(_cor4)
				in  let <_cor6> =
					call 'erlang':'list_to_atom'
					    (_cor5)
				    in  let <_cor7> =
					    apply 'lc$^0'/1
						(_cor2)
					in  ( [_cor6|_cor7]
					      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'do_cover_compile'/1 =
    %% Line 178
    fun (_cor0) ->
	do  %% Line 179
	    call 'cover':'start'
		()
	    let <_cor4> =
		%% Line 180
		( fun (_cor2) ->
		      apply 'do_cover_compile1'/1
			  (_cor2)
		  -| [{'id',{0,0,'-do_cover_compile/1-fun-0-'}}] )
	    in  let <_cor1> =
		    %% Line 180
		    call 'lists':'usort'
			(_cor0)
		in  do  %% Line 180
			apply 'pmap1'/2
			    (_cor4, _cor1)
			%% Line 181
			'ok'
'do_cover_compile1'/1 =
    %% Line 183
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 184
	    call 'code':'is_sticky'
		(_cor0)
	in  let <_cor1> =
		%% Line 184
		call 'code':'is_loaded'
		    (_cor0)
	    in  %% Line 184
		case <_cor2,_cor1> of
		  %% Line 185
		  <'true',_cor8> when 'true' ->
		      do  %% Line 186
			  call 'code':'unstick_mod'
			      (_cor0)
			  do  %% Line 187
			      case call 'cover':'compile_beam'
				       (_cor0) of
				%% Line 188
				<{'ok',_cor9}> when 'true' ->
				    'ok'
				%% Line 190
				<Error> when 'true' ->
				    %% Line 191
				    call 'io':'fwrite'
					([10|[87|[65|[82|[78|[73|[78|[71|[58|[32|[67|[111|[117|[108|[100|[32|[110|[111|[116|[32|[99|[111|[118|[101|[114|[32|[99|[111|[109|[112|[105|[108|[101|[32|[126|[119|[58|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 192
																																	    [_cor0|[Error|[]]])
			      end
			      %% Line 194
			      call 'code':'stick_mod'
				  (_cor0)
		  %% Line 195
		  <'false','false'> when 'true' ->
		      %% Line 196
		      case call 'code':'load_file'
			       (_cor0) of
			%% Line 197
			<{'module',_cor10}> when 'true' ->
			    %% Line 198
			    apply 'do_cover_compile1'/1
				(_cor0)
			%% Line 199
			<Error> when 'true' ->
			    %% Line 200
			    call 'io':'fwrite'
				([10|[87|[65|[82|[78|[73|[78|[71|[58|[32|[67|[111|[117|[108|[100|[32|[110|[111|[116|[32|[108|[111|[97|[100|[32|[126|[119|[58|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor0|[Error|[]]])
		      end
		  %% Line 202
		  <'false',_cor11> when 'true' ->
		      %% Line 203
		      case call 'cover':'compile_beam'
			       (_cor0) of
			%% Line 204
			<{'ok',_cor12}> when 'true' ->
			    %% Line 205
			    'ok'
			%% Line 206
			<Error> when 'true' ->
			    %% Line 207
			    call 'io':'fwrite'
				([10|[87|[65|[82|[78|[73|[78|[71|[58|[32|[67|[111|[117|[108|[100|[32|[110|[111|[116|[32|[99|[111|[118|[101|[114|[32|[99|[111|[109|[112|[105|[108|[101|[32|[126|[119|[58|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 208
																																    [_cor0|[Error|[]]])
		      end
		  ( <_fol118,_fol119> when 'true' ->
			let <_cor6> = {_fol118,_fol119}
			in  primop 'match_fail'
				({'case_clause',_cor6})
		    -| ['compiler_generated'] )
		end
'pmap1'/2 =
    %% Line 212
    fun (_cor1,_cor0) ->
	let <NTot> =
	    %% Line 213
	    call 'erlang':'length'
		(_cor0)
	in  let <_cor3> =
		%% Line 214
		call 'erlang':'system_info'
		    ('schedulers')
	    in  let <NProcs> =
		    %% Line 214
		    call 'erlang':'*'
			(_cor3, 2)
		in  let <_cor5> =
			%% Line 215
			call 'erlang':'div'
			    (NTot, NProcs)
		    in  let <NPerProc> =
			    %% Line 215
			    call 'erlang':'+'
				(_cor5, 1)
			in  let <_cor18> =
				%% Line 219
				( fun (_cor15,_cor14) ->
				      case <_cor15,_cor14> of
					<_cor22,{L,Ps}> when 'true' ->
					    let <_cor9> =
						%% Line 220
						case <> of
						  <>
						      when try
							    let <_cor8> =
								call 'erlang':'length'
								    (L)
							    in  call 'erlang':'>='
								    (_cor8, NPerProc)
							of <Try> ->
							    Try
							catch <T,R> ->
							    'false' ->
						      call 'lists':'split'
							  (NPerProc, L)
						  %% Line 221
						  <> when 'true' ->
						      {L,[]}
						end
					    in  %% Line 220
						case _cor9 of
						  <{L1,L2}> when 'true' ->
						      let <_cor12> =
							  %% Line 224
							  ( fun () ->
								let <_cor11> =
								    %% Line 225
								    call 'lists':'map'
									(_cor1, L1)
								in  %% Line 225
								    call 'erlang':'exit'
									(_cor11)
							    -| [{'id',{0,0,'-pmap1/2-fun-0-'}}] )
						      in  %% Line 223
							  case %% Line 224
							       call 'erlang':'spawn_monitor'
								   (_cor12) of
							    <{P,_X_Ref}> when 'true' ->
								%% Line 227
								{L2,[P|Ps]}
							    ( <_cor13> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_cor13})
							      -| ['compiler_generated'] )
							  end
						  ( <_cor10> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor10})
						    -| ['compiler_generated'] )
						end
					( <_cor17,_cor16> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor17,_cor16})
						-| [{'function_name',{'-pmap1/2-fun-1-',2}}] )
					  -| ['compiler_generated'] )
				      end
				  -| [{'id',{0,0,'-pmap1/2-fun-1-'}}] )
			    in  let <_cor7> =
				    %% Line 230
				    call 'lists':'seq'
					(1, NProcs)
				in  %% Line 217
				    case %% Line 218
					 call 'lists':'foldr'
					     (_cor18, %% Line 229
						      {_cor0,[]}, _cor7) of
				      <{[],Pids}> when 'true' ->
					  %% Line 231
					  apply 'collect'/2
					      (Pids, [])
				      ( <_cor19> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor19})
					-| ['compiler_generated'] )
				    end
'collect'/2 =
    %% Line 233
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Acc> when 'true' ->
	      %% Line 234
	      call 'lists':'append'
		  (Acc)
	  %% Line 235
	  <[Pid|Pids],Acc> when 'true' ->
	      %% Line 236
	      receive
		%% Line 237
		<{'DOWN',_X_Ref,'process',_cor4,Result}>
		    when call 'erlang':'=:='
			  (_cor4,
			   Pid) ->
		    %% Line 239
		    apply 'collect'/2
			(Pids, [Result|Acc])
	      after 'infinity' ->
		'true'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'collect',2}}] )
	    -| ['compiler_generated'] )
	end
'cover_analyse'/2 =
    %% Line 269
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Dir,{'cover',_cor33,_cor34,_cor35,_cor36,Analyse,Modules,Stop,_cor37}> when 'true' ->
	      do  %% Line 270
		  call 'io':'fwrite'
		      ('user', [67|[111|[118|[101|[114|[32|[97|[110|[97|[108|[121|[115|[105|[110|[103|[46|[46|[46|[32]]]]]]]]]]]]]]]]]]], [])
		  let <_cor19> =
		      %% Line 272
		      case Analyse of
			%% Line 273
			<'details'> when 'true' ->
			    let <_cor2> =
				%% Line 274
				call 'filename':'join'
				    (Dir, [97|[108|[108|[46|[99|[111|[118|[101|[114|[100|[97|[116|[97]]]]]]]]]]]]])
			    in  %% Line 274
				case call 'cover':'export'
					 (_cor2) of
				  %% Line 275
				  <'ok'> when 'true' ->
				      %% Line 276
				      ( fun (_cor7) ->
					    let <_cor3> =
						%% Line 278
						call 'erlang':'atom_to_list'
						    (_cor7)
					    in  let <_cor4> =
						    %% Line 278
						    call 'erlang':'++'
							(_cor3, %% Line 279
								[46|[67|[79|[86|[69|[82|[46|[104|[116|[109|[108]]]]]]]]]]])
						in  let <OutFile> =
							%% Line 277
							call 'filename':'join'
							    (Dir, _cor4)
						    in  %% Line 280
							case call 'cover':'analyse_to_file'
								 (_cor7, OutFile, ['html']) of
							  %% Line 281
							  <{'ok',_cor38}> when 'true' ->
							      %% Line 282
							      {'file',OutFile}
							  %% Line 283
							  <Error> when 'true' ->
							      %% Line 284
							      Error
							end
					-| [{'id',{0,0,'-cover_analyse/2-fun-0-'}}] )
				  %% Line 287
				  <Error> when 'true' ->
				      %% Line 288
				      ( fun (_cor9) ->
					    Error
					-| [{'id',{0,0,'-cover_analyse/2-fun-1-'}}] )
				end
			%% Line 290
			<'overview'> when 'true' ->
			    let <_cor12> =
				%% Line 291
				call 'filename':'join'
				    (Dir, [97|[108|[108|[46|[99|[111|[118|[101|[114|[100|[97|[116|[97]]]]]]]]]]]]])
			    in  %% Line 291
				case call 'cover':'export'
					 (_cor12) of
				  %% Line 292
				  <'ok'> when 'true' ->
				      %% Line 293
				      ( fun (_cor13) ->
					    'undefined'
					-| [{'id',{0,0,'-cover_analyse/2-fun-2-'}}] )
				  %% Line 294
				  <Error> when 'true' ->
				      %% Line 295
				      ( fun (_cor15) ->
					    Error
					-| [{'id',{0,0,'-cover_analyse/2-fun-3-'}}] )
				end
			( <_cor18> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor18})
			  -| ['compiler_generated'] )
		      end
		  in  let <_cor25> =
			  %% Line 299
			  ( fun (_cor23) ->
				%% Line 300
				case call 'cover':'analyse'
					 (_cor23, 'module') of
				  %% Line 301
				  <{'ok',{_cor42,{Cov,NotCov}}}>
				      when call 'erlang':'=:='
					    (_cor42,
					     _cor23) ->
				      let <_cor21> =
					  %% Line 302
					  apply _cor19
					      (_cor23)
				      in  %% Line 302
					  {_cor23,{Cov,NotCov,_cor21}}
				  %% Line 303
				  <Err> when 'true' ->
				      do  %% Line 304
					  call 'io':'fwrite'
					      ('user', %% Line 305
						       [10|[87|[65|[82|[78|[73|[78|[71|[58|[32|[65|[110|[97|[108|[121|[115|[105|[115|[32|[102|[97|[105|[108|[101|[100|[32|[102|[111|[114|[32|[126|[119|[46|[32|[82|[101|[97|[115|[111|[110|[58|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 306
																																					       [_cor23|[Err|[]]])
					  %% Line 307
					  {_cor23,Err}
				end
			    -| [{'id',{0,0,'-cover_analyse/2-fun-4-'}}] )
		      in  let <R> =
			      %% Line 298
			      apply 'pmap2'/2
				  (_cor25, %% Line 309
					   Modules)
			  in  do  %% Line 310
				  call 'io':'fwrite'
				      ('user', [100|[111|[110|[101|[10|[10]]]]]], [])
				  do  %% Line 312
				      case Stop of
					%% Line 313
					<'true'> when 'true' ->
					    let <_cor27> =
						%% Line 314
						call 'erlang':'node'
						    ()
					    in  let <Sticky> =
						    %% Line 314
						    apply 'unstick_all_sticky'/1
							(_cor27)
						in  do  %% Line 315
							call 'cover':'stop'
							    ()
							let <_cor29> =
							    %% Line 316
							    call 'erlang':'node'
								()
							in  %% Line 316
							    apply 'stick_all_sticky'/2
								(_cor29, Sticky)
					%% Line 317
					<'false'> when 'true' ->
					    'ok'
					( <_cor30> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor30})
					  -| ['compiler_generated'] )
				      end
				      %% Line 320
				      R
	  ( <_cor32,_cor31> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor32,_cor31})
		  -| [{'function_name',{'cover_analyse',2}}] )
	    -| ['compiler_generated'] )
	end
'pmap2'/2 =
    %% Line 322
    fun (_cor1,_cor0) ->
	let <Collector> =
	    %% Line 323
	    call 'erlang':'self'
		()
	in  let <_cor8> =
		%% Line 324
		( fun (_cor6) ->
		      let <_cor5> =
			  %% Line 325
			  ( fun () ->
				let <_cor4> =
				    %% Line 326
				    call 'erlang':'self'
					()
				in  let <_cor3> =
					%% Line 326
					apply _cor1
					    (_cor6)
				    in  %% Line 326
					call 'erlang':'!'
					    (Collector, {'res',_cor4,_cor3})
			    -| [{'id',{0,0,'-pmap2/2-fun-0-'}}] )
		      in  %% Line 325
			  call 'erlang':'spawn'
			      (_cor5)
		  -| [{'id',{0,0,'-pmap2/2-fun-1-'}}] )
	    in  let <Pids> =
		    %% Line 324
		    call 'lists':'map'
			(_cor8, _cor0)
		in  let <_cor12> =
			%% Line 329
			( fun (_cor10) ->
			      %% Line 330
			      receive
				%% Line 331
				<{'res',_cor15,Res}>
				    when call 'erlang':'=:='
					  (_cor15,
					   _cor10) ->
				    %% Line 332
				    Res
			      after 'infinity' ->
				'true'
			  -| [{'id',{0,0,'-pmap2/2-fun-2-'}}] )
		    in  %% Line 329
			call 'lists':'map'
			    (_cor12, %% Line 334
				     Pids)
'do_cover_for_node'/2 =
    %% Line 336
    fun (_cor1,_cor0) ->
	%% Line 337
	apply 'do_cover_for_node'/3
	    (_cor1, _cor0, 'true')
'do_cover_for_node'/3 =
    %% Line 338
    fun (_cor2,_cor1,_cor0) ->
	let <MainCoverNode> =
	    %% Line 343
	    call 'cover':'get_main_node'
		()
	in  let <_cor4> =
		%% Line 345
		case <> of
		  <>
		      when call 'erlang':'=:='
			    (_cor0,
			     'true') ->
		      apply 'unstick_all_sticky'/2
			  (MainCoverNode, _cor2)
		  %% Line 346
		  <> when 'true' ->
		      'ok'
		end
	    in  do  %% Line 348
		    call 'rpc':'call'
			(MainCoverNode, 'cover', _cor1, [_cor2|[]])
		    %% Line 349
		    case <> of
		      <>
			  when call 'erlang':'=:='
				(_cor0,
				 'true') ->
			  apply 'stick_all_sticky'/2
			      (_cor2, _cor4)
		      %% Line 350
		      <> when 'true' ->
			  'ok'
		    end
'unstick_all_sticky'/1 =
    %% Line 353
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 354
	    call 'erlang':'node'
		()
	in  %% Line 354
	    apply 'unstick_all_sticky'/2
		(_cor1, _cor0)
'unstick_all_sticky'/2 =
    %% Line 355
    fun (_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 357
	    ( fun (_cor4) ->
		  %% Line 358
		  case call 'code':'is_sticky'
			   (_cor4) of
		    %% Line 359
		    <'true'> when 'true' ->
			do  %% Line 360
			    call 'rpc':'call'
				(_cor0, 'code', 'unstick_mod', [_cor4|[]])
			    %% Line 361
			    'true'
		    %% Line 362
		    <'false'> when 'true' ->
			%% Line 363
			'false'
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-unstick_all_sticky/2-fun-0-'}}] )
	in  let <_cor2> =
		%% Line 366
		call 'rpc':'call'
		    (_cor1, 'cover', 'modules', [])
	    in  %% Line 356
		call 'lists':'filter'
		    (_cor6, _cor2)
'stick_all_sticky'/2 =
    %% Line 368
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 370
	    ( fun (_cor2) ->
		  %% Line 371
		  call 'rpc':'call'
		      (_cor1, 'code', 'stick_mod', [_cor2|[]])
	      -| [{'id',{0,0,'-stick_all_sticky/2-fun-0-'}}] )
	in  %% Line 369
	    call 'lists':'foreach'
		(_cor4, _cor0)
'run_test_case_apply'/1 =
    %% Line 412
    fun (_cor0) ->
	case _cor0 of
	  <{CaseNum,Mod,Func,Args,Name,%% Line 413
				       RunInit,%% Line 413
					       TimetrapData}> when 'true' ->
	      do  %% Line 414
		  apply 'purify_format'/2
		      ([84|[101|[115|[116|[32|[99|[97|[115|[101|[32|[35|[126|[119|[32|[126|[119|[58|[126|[119|[47|[49]]]]]]]]]]]]]]]]]]]]], [CaseNum|[Mod|[Func|[]]]])
		  do  %% Line 415
		      case call 'os':'getenv'
			       ([84|[83|[95|[82|[85|[78|[95|[86|[65|[76|[71|[82|[73|[78|[68]]]]]]]]]]]]]]]) of
			%% Line 416
			<'false'> when 'true' ->
			    'ok'
			%% Line 418
			<_cor12> when 'true' ->
			    let <_cor4> =
				%% Line 419
				call 'erlang':'atom_to_list'
				    (Mod)
			    in  let <_cor1> =
				    %% Line 420
				    call 'erlang':'atom_to_list'
					(Func)
				in  let <_cor2> =
					%% Line 420
					call 'erlang':'++'
					    (_cor1, [45])
				    in  let <_cor3> =
					    %% Line 419
					    [46|_cor2]
					in  let <_cor5> =
						%% Line 419
						call 'erlang':'++'
						    (_cor4, _cor3)
					    in  %% Line 419
						call 'os':'putenv'
						    ([86|[65|[76|[71|[82|[73|[78|[68|[95|[76|[79|[71|[70|[73|[76|[69|[95|[73|[78|[70|[73|[88]]]]]]]]]]]]]]]]]]]]]], _cor5)
		      end
		      let <ProcBef> =
			  %% Line 422
			  call 'erlang':'system_info'
			      ('process_count')
		      in  let <Result> =
			      %% Line 423
			      apply 'run_test_case_apply'/6
				  (Mod, Func, Args, Name, RunInit, %% Line 424
								   TimetrapData)
			  in  let <ProcAft> =
				  %% Line 425
				  call 'erlang':'system_info'
				      ('process_count')
			      in  do  %% Line 426
				      apply 'purify_new_leaks'/0
					  ()
				      let <DetFail> =
					  %% Line 427
					  call 'erlang':'get'
					      ('test_server_detected_fail')
				      in  %% Line 428
					  {Result,DetFail,ProcBef,ProcAft}
	  ( <_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11})
		  -| [{'function_name',{'run_test_case_apply',1}}] )
	    -| ['compiler_generated'] )
	end
'run_test_case_apply'/6 =
    %% Line 447
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 448
	case call 'file':'get_cwd'
		 () of
	  <{'ok',Cwd}> when 'true' ->
	      let <_cor8> =
		  %% Line 449
		  case _cor3 of
		    %% Line 450
		    <[Args1|[]]>
			when call 'erlang':'is_list'
			      (Args1) ->
			%% Line 451
			call 'lists':'keydelete'
			    ('tc_group_result', 1, Args1)
		    %% Line 452
		    <_cor23> when 'true' ->
			_cor3
		  end
	      in  do  %% Line 455
		      apply 'print'/3
			  ('minor', [84|[101|[115|[116|[32|[99|[97|[115|[101|[32|[115|[116|[97|[114|[116|[101|[100|[32|[119|[105|[116|[104|[58|[10|[126|[119|[58|[126|[119|[40|[126|[116|[112|[41|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor5|[_cor4|[_cor8|[]]]])
		      do  %% Line 456
			  apply 'print'/3
			      ('minor', [67|[117|[114|[114|[101|[110|[116|[32|[100|[105|[114|[101|[99|[116|[111|[114|[121|[32|[105|[115|[32|[126|[116|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]], [Cwd|[]])
			  do  %% Line 457
			      apply 'print_timestamp'/2
				  ('minor', [83|[116|[97|[114|[116|[101|[100|[32|[97|[116|[32]]]]]]]]]]])
			      do  %% Line 458
				  apply 'print'/4
				      ('minor', [], [], 'internal_raw')
				  let <TCCallback> =
				      %% Line 459
				      call 'erlang':'get'
					  ('test_server_testcase_callback')
				  in  let <LogOpts> =
					  %% Line 460
					  call 'erlang':'get'
					      ('test_server_logopts')
				      in  let <Ref> =
					      %% Line 461
					      call 'erlang':'make_ref'
						  ()
					  in  let <_cor13> =
						  %% Line 464
						  ( fun () ->
							%% Line 465
							apply 'run_test_case_eval'/9
							    (_cor5, _cor4, _cor3, _cor2, Ref, _cor1, _cor0, %% Line 467
													    LogOpts, %% Line 467
														     TCCallback)
						    -| [{'id',{0,0,'-run_test_case_apply/6-fun-0-'}}] )
					      in  let <Pid> =
						      %% Line 463
						      call 'erlang':'spawn_link'
							  (_cor13)
						  in  do  %% Line 469
							  call 'erlang':'put'
							      ('test_server_detected_fail', [])
							  let <_cor15> =
							      %% Line 472
							      call 'erlang':'hd'
								  (_cor3)
							  in  let <St> =
								  %% Line 470
								  {'st',Ref,Pid,{_cor5,_cor4},'unknown',%% Line 471
													'starting',%% Line 471
														   [],%% Line 471
														      [],%% Line 471
															 'infinity',_cor15,'undefined'}
							      in  %% Line 473
								  apply 'run_test_case_msgloop'/1
								      (St)
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'run_test_case_msgloop'/1 =
    %% Line 484
    fun (_cor0) ->
	case _cor0 of
	  <St0 = {'st',Ref,Pid,_cor137,_cor138,_cor139,_cor140,_cor141,_cor142,_cor143,EndConfPid0}> when 'true' ->
	      %% Line 485
	      receive
		%% Line 486
		<{Tag = 'set_tc_state',From,{Status,Config0}}> when 'true' ->
		    let <_cor6> =
			%% Line 487
			case Config0 of
			  %% Line 488
			  <'unknown'> when 'true' ->
			      _cor143
			  %% Line 489
			  <_cor164> when 'true' ->
			      Config0
			end
		    in  let <_cor9> =
			    %% Line 491
			    call 'erlang':'setelement'
				(10, St0, _cor6)
			in  let <_cor11> =
				%% Line 491
				call 'erlang':'setelement'
				    (6, _cor9, Status)
			    in  let <_cor13> =
				    %% Line 492
				    call 'erlang':'self'
					()
				in  do  %% Line 492
					call 'erlang':'!'
					    (From, {_cor13,Tag,'ok'})
					%% Line 493
					apply 'run_test_case_msgloop'/1
					    (_cor11)
		%% Line 494
		<Abort = {'abort_current_testcase',_cor176,_cor177}>
		    when call 'erlang':'=:='
			  (_cor139,
			   'starting') ->
		    let <_cor20> =
			%% Line 498
			call 'erlang':'self'
			    ()
		    in  do  %% Line 498
			    call 'erlang':'!'
				(_cor20, Abort)
			    do  %% Line 499
				call 'erlang':'yield'
				    ()
				%% Line 500
				apply 'run_test_case_msgloop'/1
				    (St0)
		%% Line 501
		<{'abort_current_testcase',Reason,From}> when 'true' ->
		    let <_cor22> =
			%% Line 502
			case call 'erlang':'is_process_alive'
				 (Pid) of
			  %% Line 503
			  <'true'> when 'true' ->
			      apply 'get_loc'/1
				  (Pid)
			  %% Line 504
			  <'false'> when 'true' ->
			      'unknown'
			  ( <_cor21> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor21})
			    -| ['compiler_generated'] )
			end
		    in  let <Mon> =
			    %% Line 506
			    call 'erlang':'monitor'
				('process', Pid)
			in  do  %% Line 507
				call 'erlang':'exit'
				    (Pid, {'testcase_aborted',Reason,_cor22})
				do  %% Line 508
				    call 'erlang':'yield'
					()
				    let <_cor25> =
					%% Line 509
					call 'erlang':'self'
					    ()
				    in  do  %% Line 509
					    call 'erlang':'!'
						(From, {_cor25,'abort_current_testcase','ok'})
					    let <_cor42> =
						%% Line 510
						receive
						  %% Line 511
						  <{'DOWN',_cor178,'process',_cor179,_cor180}>
						      when let <_cor181> =
							    call 'erlang':'=:='
								(_cor178, Mon)
							in  let <_cor182> =
								call 'erlang':'=:='
								    (_cor179, Pid)
							    in  call 'erlang':'and'
								    (_cor181, _cor182) ->
						      %% Line 512
						      St0
						after %% Line 513
						      10000 ->
						  do  %% Line 515
						      call 'erlang':'exit'
							  (Pid, 'kill')
						      let <_cor26> =
							  %% Line 518
							  call 'io_lib':'format'
							      ([65|[98|[111|[114|[116|[101|[100|[58|[32|[126|[112]]]]]]]]]]], %% Line 519
															      [Reason|[]])
						      in  let <Error> =
							      %% Line 518
							      call 'lists':'flatten'
								  (_cor26)
							  in  let <_cor34> =
								  %% Line 520
								  ( letrec
									'lc$^0'/1 =
									    fun (_cor31) ->
										case _cor31 of
										  <[%% Line 521
										    S|_cor29]> when 'true' ->
										      let <_cor32> =
											  call 'string':'strip'
											      (S, 'left')
										      in  let <_cor33> =
											      %% Line 521
											      apply 'lc$^0'/1
												  (_cor29)
											  in  ( [_cor32|_cor33]
												-| ['compiler_generated'] )
										  <[]> when 'true' ->
										      []
										  ( <_cor31> when 'true' ->
											( primop 'match_fail'
											      ({'function_clause',_cor31})
											  -| [{'function_name',{'lc$^0',1}}] )
										    -| ['compiler_generated'] )
										end
								    in  let <_cor30> =
									    %% Line 521
									    call 'string':'tokens'
										(Error, %% Line 522
											[10])
									in  apply 'lc$^0'/1
										(_cor30)
								    -| ['list_comprehension'] )
							      in  let <Error1> =
								      %% Line 520
								      call 'lists':'flatten'
									  (_cor34)
								  in  let <_cor38> =
									  %% Line 523
									  case <> of
									    <>
										when try
										      let <_cor36> =
											  call 'erlang':'length'
											      (Error1)
										      in  call 'erlang':'>'
											      (_cor36, 63)
										  of <Try> ->
										      Try
										  catch <T,R> ->
										      'false' ->
										let <_cor37> =
										    %% Line 524
										    call 'string':'substr'
											(Error1, 1, 60)
										in  %% Line 524
										    call 'erlang':'++'
											(_cor37, [46|[46|[46]]])
									    %% Line 525
									    <> when 'true' ->
										%% Line 526
										Error1
									  end
								      in  %% Line 528
									  call 'erlang':'setelement'
									      (8, St0, _cor38)
					    in  %% Line 530
						apply 'run_test_case_msgloop'/1
						    (_cor42)
		%% Line 531
		<{'sync_apply',From,MFA}> when 'true' ->
		    do  %% Line 532
			apply 'do_sync_apply'/3
			    ('false', From, MFA)
			%% Line 533
			apply 'run_test_case_msgloop'/1
			    (St0)
		%% Line 534
		<{'sync_apply_proxy',Proxy,From,MFA}> when 'true' ->
		    do  %% Line 535
			apply 'do_sync_apply'/3
			    (Proxy, From, MFA)
			%% Line 536
			apply 'run_test_case_msgloop'/1
			    (St0)
		%% Line 537
		<{'comment',NewComment0}> when 'true' ->
		    let <NewComment1> =
			%% Line 538
			call 'test_server_ctrl':'to_string'
			    (NewComment0)
		    in  let <NewComment> =
			    %% Line 539
			    call 'test_server_sup':'framework_call'
				('format_comment', %% Line 540
						   [NewComment1|[]], %% Line 541
								     NewComment1)
			in  let <_cor48> =
				%% Line 542
				call 'erlang':'setelement'
				    (8, St0, NewComment)
			    in  %% Line 542
				apply 'run_test_case_msgloop'/1
				    (_cor48)
		%% Line 543
		<{'read_comment',From}> when 'true' ->
		    let <_cor51> =
			%% Line 544
			call 'erlang':'self'
			    ()
		    in  do  %% Line 544
			    call 'erlang':'!'
				(From, {_cor51,'read_comment',_cor141})
			    %% Line 545
			    apply 'run_test_case_msgloop'/1
				(St0)
		%% Line 546
		<{'make_priv_dir',From}> when 'true' ->
		    let <_cor55> =
			%% Line 547
			case _cor143 of
			  %% Line 548
			  <'undefined'> when 'true' ->
			      []
			  %% Line 549
			  <Config0> when 'true' ->
			      Config0
			end
		    in  let <_cor59> =
			    %% Line 552
			    case call 'proplists':'get_value'
				     ('priv_dir', _cor55) of
			      %% Line 553
			      <'undefined'> when 'true' ->
				  %% Line 554
				  {'error','no_priv_dir_in_config'}
			      %% Line 555
			      <PrivDir> when 'true' ->
				  %% Line 556
				  case call 'file':'make_dir'
					   (PrivDir) of
				    %% Line 557
				    <'ok'> when 'true' ->
					%% Line 558
					'ok'
				    %% Line 559
				    <{'error','eexist'}> when 'true' ->
					%% Line 560
					'ok'
				    %% Line 561
				    <MkDirError> when 'true' ->
					%% Line 562
					{'error',{MkDirError,PrivDir}}
				  end
			    end
			in  let <_cor61> =
				%% Line 565
				call 'erlang':'self'
				    ()
			    in  do  %% Line 565
				    call 'erlang':'!'
					(From, {_cor61,'make_priv_dir',_cor59})
				    %% Line 566
				    apply 'run_test_case_msgloop'/1
					(St0)
		%% Line 567
		<{'EXIT',_cor225,{_cor226,Time,Value,Loc,Opts}}>
		    when let <_cor227> =
			  call 'erlang':'=:='
			      (_cor225, Pid)
		      in  let <_cor228> =
			      call 'erlang':'=:='
				  (_cor226, Ref)
			  in  call 'erlang':'and'
				  (_cor227, _cor228) ->
		    let <_cor62> =
			%% Line 568
			call 'erlang':'/'
			    (Time, 1000000)
		    in  let <RetVal> =
			    %% Line 568
			    {_cor62,Value,Loc,Opts}
			in  let <_cor66> =
				%% Line 569
				call 'erlang':'setelement'
				    (10, St0, 'undefined')
			    in  let <St> =
				    %% Line 569
				    apply 'setup_termination'/2
					(RetVal, _cor66)
				in  %% Line 570
				    apply 'run_test_case_msgloop'/1
					(St)
		%% Line 571
		<{'EXIT',_cor240,Reason}>
		    when call 'erlang':'=:='
			  (_cor240,
			   Pid) ->
		    let <_cor79> =
			%% Line 576
			case Reason of
			  %% Line 577
			  <{What,[Loc0 = {_X_M,_X_F,A,[{'file',_cor241}|_cor242]}|_cor243]}>
			      when %% Line 578
				call 'erlang':'is_integer'
				    (A) ->
			      let <Loc> =
				  %% Line 579
				  apply 'rewrite_loc_item'/1
				      (Loc0)
			      in  let <_rec15> =
				      %% Line 580
				      [Loc|[]]
				  in  let <_cor72> =
					  %% Line 580
					  call 'erlang':'setelement'
					      (5, St0, _rec15)
				      in  %% Line 580
					  apply 'handle_tc_exit'/2
					      (What, _cor72)
			  %% Line 581
			  <{What,[Details|[Loc0 = {_X_M,_X_F,A,[{'file',_cor255}|_cor256]}|_cor257]]}>
			      when %% Line 582
				call 'erlang':'is_integer'
				    (A) ->
			      let <Loc> =
				  %% Line 583
				  apply 'rewrite_loc_item'/1
				      (Loc0)
			      in  let <_rec17> =
				      %% Line 584
				      [Loc|[]]
				  in  let <_cor77> =
					  %% Line 584
					  call 'erlang':'setelement'
					      (5, St0, _rec17)
				      in  %% Line 584
					  apply 'handle_tc_exit'/2
					      ({What,Details}, _cor77)
			  %% Line 585
			  <_cor269> when 'true' ->
			      %% Line 586
			      apply 'handle_tc_exit'/2
				  (Reason, St0)
			end
		    in  %% Line 588
			apply 'run_test_case_msgloop'/1
			    (_cor79)
		%% Line 589
		<{_cor270,{'call_end_conf',Data,_X_Result}}>
		    when call 'erlang':'=:='
			  (_cor270,
			   EndConfPid0) ->
		    %% Line 590
		    case <Ref,Pid,_cor137,_cor138,_cor139,_cor140,_cor141,_cor142,_cor143,EndConfPid0> of
		      <_cor271,_cor272,{Mod,Func},_cor273,_cor274,_cor275,_cor276,_cor277,CurrConf,_cor278> when 'true' ->
			  %% Line 591
			  case CurrConf of
			    %% Line 592
			    <_cor279>
				when call 'erlang':'is_list'
				      (CurrConf) ->
				%% Line 593
				case Data of
				  <{_X_Mod,_X_Func,TCPid,TCExitReason,Loc}> when 'true' ->
				      let <_cor83> =
					  %% Line 595
					  call 'erlang':'self'
					      ()
				      in  do  %% Line 594
					      apply 'spawn_fw_call'/7
						  (Mod, Func, CurrConf, TCPid, %% Line 595
									       TCExitReason, %% Line 595
											     Loc, _cor83)
					      let <_cor85> =
						  %% Line 596
						  call 'erlang':'setelement'
						      (11, St0, 'undefined')
					      in  let <_cor87> =
						      %% Line 596
						      call 'erlang':'setelement'
							  (10, _cor85, 'undefined')
						  in  %% Line 597
						      apply 'run_test_case_msgloop'/1
							  (_cor87)
				  ( <_cor82> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor82})
				    -| ['compiler_generated'] )
				end
			    %% Line 598
			    <_cor291> when 'true' ->
				%% Line 599
				apply 'run_test_case_msgloop'/1
				    (St0)
			  end
		      ( <_fol362,_fol363,_fol364,_fol365,_fol366,_fol367,_fol368,_fol369,_fol370,_fol371> when 'true' ->
			    let <_cor81> =
				( {'st',_fol362,_fol363,_fol364,_fol365,_fol366,_fol367,_fol368,_fol369,_fol370,_fol371}
				  -| ['compiler_generated'] )
			    in  primop 'match_fail'
				    ({'badmatch',_cor81})
			-| ['compiler_generated'] )
		    end
		%% Line 601
		<{_X_FwCallPid,'fw_notify_done',{T,Value,Loc,Opts,AddToComment}}> when 'true' ->
		    let <RetVal> =
			%% Line 603
			{T,Value,Loc,Opts}
		    in  let <_cor97> =
			    %% Line 605
			    case AddToComment of
			      %% Line 606
			      <'undefined'> when 'true' ->
				  _cor141
			      %% Line 608
			      <_cor302> when 'true' ->
				  %% Line 609
				  case <> of
				    <>
					when call 'erlang':'=:='
					      (_cor141,
					       []) ->
					%% Line 610
					AddToComment
				    %% Line 611
				    <> when 'true' ->
					let <_cor94> =
					    %% Line 613
					    call 'test_server_ctrl':'xhtml'
						([60|[98|[114|[62]]]], %% Line 614
								       [60|[98|[114|[32|[47|[62]]]]]])
					in  let <_cor95> =
						%% Line 614
						call 'erlang':'++'
						    (_cor94, %% Line 615
							     AddToComment)
					    in  %% Line 612
						call 'erlang':'++'
						    (_cor141, _cor95)
				  end
			    end
			in  let <_cor100> =
				%% Line 619
				call 'erlang':'setelement'
				    (10, St0, 'undefined')
			    in  let <_cor102> =
				    %% Line 618
				    call 'erlang':'setelement'
					(8, _cor100, _cor97)
				in  let <St> =
					%% Line 618
					apply 'setup_termination'/2
					    (RetVal, _cor102)
				    in  %% Line 620
					apply 'run_test_case_msgloop'/1
					    (St)
		%% Line 621
		<{'EXIT',_X_FwCallPid,{'fw_notify_done',Func,Error}}> when 'true' ->
		    let <CB> =
			%% Line 623
			call 'os':'getenv'
			    ([84|[69|[83|[84|[95|[83|[69|[82|[86|[69|[82|[95|[70|[82|[65|[77|[69|[87|[79|[82|[75]]]]]]]]]]]]]]]]]]]]])
		    in  let <_cor109> =
			    %% Line 624
			    case CB of
			      %% Line 625
			      <FW>
				  when let <_cor105> =
					call 'erlang':'=:='
					    (CB, 'false')
				    in  let <_cor106> =
					    call 'erlang':'=:='
						(CB, [117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]])
					in  call 'erlang':'or'
						(_cor105, _cor106) ->
				  %% Line 626
				  [{'test_server',Func}|[]]
			      %% Line 627
			      <_cor314> when 'true' ->
				  let <_cor107> =
				      %% Line 628
				      call 'erlang':'list_to_atom'
					  (CB)
				  in  %% Line 628
				      [{_cor107,Func}|[]]
			    end
			in  let <RetVal> = {%% Line 630
				 'died',%% Line 630
					{'framework_error',_cor109,Error},_cor109}
			    in  let <_cor113> =
				    %% Line 632
				    call 'erlang':'setelement'
					(10, St0, 'undefined')
				in  let <_cor115> =
					%% Line 631
					call 'erlang':'setelement'
					    (8, _cor113, [70|[114|[97|[109|[101|[119|[111|[114|[107|[32|[101|[114|[114|[111|[114]]]]]]]]]]]]]]])
				    in  let <St> =
					    %% Line 631
					    apply 'setup_termination'/2
						(RetVal, _cor115)
					in  %% Line 633
					    apply 'run_test_case_msgloop'/1
						(St)
		%% Line 634
		<{'failed',File,Line}> when 'true' ->
		    let <_cor117> =
			%% Line 636
			call 'erlang':'get'
			    ('test_server_detected_fail')
		    in  do  %% Line 635
			    call 'erlang':'put'
				('test_server_detected_fail', %% Line 636
							      [{File,Line}|_cor117])
			    %% Line 637
			    apply 'run_test_case_msgloop'/1
				(St0)
		%% Line 639
		<{'user_timetrap',_cor326,_X_TrapTime,StartTime,E = {'user_timetrap_error',_cor327},_cor328}>
		    when call 'erlang':'=:='
			  (_cor326,
			   Pid) ->
		    do  %% Line 640
			case apply 'update_user_timetraps'/2
				 (Pid, StartTime) of
			  %% Line 641
			  <'proceed'> when 'true' ->
			      let <_cor118> =
				  %% Line 642
				  call 'erlang':'self'
				      ()
			      in  %% Line 642
				  call 'erlang':'!'
				      (_cor118, {'abort_current_testcase',E,Pid})
			  %% Line 643
			  <'ignore'> when 'true' ->
			      'ok'
			  ( <_cor119> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor119})
			    -| ['compiler_generated'] )
			end
			%% Line 646
			apply 'run_test_case_msgloop'/1
			    (St0)
		%% Line 647
		<{'user_timetrap',_cor329,TrapTime,StartTime,ElapsedTime,Scale}>
		    when call 'erlang':'=:='
			  (_cor329,
			   Pid) ->
		    do  %% Line 650
			case apply 'update_user_timetraps'/2
				 (Pid, StartTime) of
			  %% Line 651
			  <'proceed'> when 'true' ->
			      let <_cor120> =
				  %% Line 652
				  case <> of
				    <>
					when call 'erlang':'is_integer'
					      (TrapTime) ->
					%% Line 653
					call 'erlang':'+'
					    (TrapTime, ElapsedTime)
				    %% Line 654
				    <> when 'true' ->
					%% Line 655
					TrapTime
				  end
			      in  %% Line 657
				  apply 'timetrap'/4
				      (TrapTime, _cor120, Pid, Scale)
			  %% Line 658
			  <'ignore'> when 'true' ->
			      'ok'
			  ( <_cor122> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor122})
			    -| ['compiler_generated'] )
			end
			%% Line 661
			apply 'run_test_case_msgloop'/1
			    (St0)
		%% Line 662
		<{'timetrap_cancel_one',Handle,_X_From}> when 'true' ->
		    do  %% Line 663
			apply 'timetrap_cancel_one'/2
			    (Handle, 'false')
			%% Line 664
			apply 'run_test_case_msgloop'/1
			    (St0)
		%% Line 665
		<{'timetrap_cancel_all',TCPid,_X_From}> when 'true' ->
		    do  %% Line 666
			apply 'timetrap_cancel_all'/2
			    (TCPid, 'false')
			%% Line 667
			apply 'run_test_case_msgloop'/1
			    (St0)
		%% Line 668
		<{'get_timetrap_info',From,TCPid}> when 'true' ->
		    let <Info> =
			%% Line 669
			apply 'get_timetrap_info'/2
			    (TCPid, 'false')
		    in  let <_cor124> =
			    %% Line 670
			    call 'erlang':'self'
				()
			in  do  %% Line 670
				call 'erlang':'!'
				    (From, {_cor124,'get_timetrap_info',Info})
				%% Line 671
				apply 'run_test_case_msgloop'/1
				    (St0)
		%% Line 672
		<_X_Other>
		    when let <_cor125> =
			  call 'erlang':'is_tuple'
			      (_X_Other)
		      in  call 'erlang':'not'
			      (_cor125) ->
		    %% Line 674
		    apply 'run_test_case_msgloop'/1
			(St0)
		%% Line 675
		<_X_Other>
		    when try
			  let <_cor126> =
			      call 'erlang':'element'
				  (1, _X_Other)
			  in  let <_cor127> =
				  call 'erlang':'=/='
				      (_cor126, 'EXIT')
			      in  let <_cor128> =
				      %% Line 676
				      call 'erlang':'element'
					  (1, _X_Other)
				  in  let <_cor129> =
					  %% Line 676
					  call 'erlang':'=/='
					      (_cor128, 'started')
				      in  let <_cor130> =
					      %% Line 677
					      call 'erlang':'element'
						  (1, _X_Other)
					  in  let <_cor131> =
						  %% Line 677
						  call 'erlang':'=/='
						      (_cor130, 'finished')
					      in  let <_cor132> =
						      %% Line 678
						      call 'erlang':'element'
							  (1, _X_Other)
						  in  let <_cor133> =
							  %% Line 678
							  call 'erlang':'=/='
							      (_cor132, 'print')
						      in  let <_cor134> =
							      call 'erlang':'and'
								  (_cor131, _cor133)
							  in  let <_cor135> =
								  call 'erlang':'and'
								      (_cor129, _cor134)
							      in  call 'erlang':'and'
								      (_cor127, _cor135)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    %% Line 680
		    apply 'run_test_case_msgloop'/1
			(St0)
	      after _cor142 ->
		%% Line 683
		call 'erlang':'append_element'
		    (_cor140, _cor141)
	  ( <_cor136> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor136})
		  -| [{'function_name',{'run_test_case_msgloop',1}}] )
	    -| ['compiler_generated'] )
	end
'setup_termination'/2 =
    %% Line 686
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <RetVal,St = {'st',_cor7,Pid,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15}> when 'true' ->
	      do  %% Line 687
		  apply 'timetrap_cancel_all'/2
		      (Pid, 'false')
		  let <_cor3> =
		      %% Line 688
		      call 'erlang':'setelement'
			  (9, St, 20)
		  in  %% Line 688
		      call 'erlang':'setelement'
			  (7, _cor3, RetVal)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'setup_termination',2}}] )
	    -| ['compiler_generated'] )
	end
'set_tc_state'/1 =
    %% Line 690
    fun (_cor0) ->
	%% Line 691
	apply 'set_tc_state'/2
	    (_cor0, 'unknown')
'set_tc_state'/2 =
    %% Line 692
    fun (_cor1,_cor0) ->
	%% Line 693
	apply 'tc_supervisor_req'/2
	    ('set_tc_state', {_cor1,_cor0})
'handle_tc_exit'/2 =
    %% Line 695
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'killed',St> when 'true' ->
	      %% Line 699
	      case St of
		<{'st',_cor32,Pid,{Mod,Func},_cor33,_cor34,_cor35,_cor36,_cor37,Config,_cor38}> when 'true' ->
		    let <_cor4> =
			%% Line 701
			call 'erlang':'self'
			    ()
		    in  do  %% Line 701
			    apply 'spawn_fw_call'/7
				(Mod, Func, Config, Pid, 'testcase_aborted_or_killed', 'unknown', _cor4)
			    %% Line 702
			    St
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 703
	  <{'testcase_aborted',Msg = {'user_timetrap_error',_cor39},_cor40},St> when 'true' ->
	      %% Line 704
	      case St of
		<{'st',_cor41,Pid,{Mod,Func},_cor42,_cor43,_cor44,_cor45,_cor46,Config,_cor47}> when 'true' ->
		    let <_cor6> =
			%% Line 705
			call 'erlang':'self'
			    ()
		    in  do  %% Line 705
			    apply 'spawn_fw_call'/7
				(Mod, Func, Config, Pid, Msg, 'unknown', _cor6)
			    %% Line 706
			    St
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 707
	  <Reason,St = {'st',_cor48,%% Line 708
				    Pid,_cor49,_cor50,{'framework',FwMod,FwFunc},_cor51,_cor52,_cor53,%% Line 708
												      Config,_cor54}> when 'true' ->
	      let <_cor8> =
		  %% Line 709
		  case Reason of
		    %% Line 710
		    <{'timetrap_timeout',TVal,_cor55}> when 'true' ->
			%% Line 711
			{'timetrap',TVal}
		    %% Line 712
		    <{E = 'testcase_aborted',AbortReason,_cor56}> when 'true' ->
			%% Line 713
			{E,AbortReason}
		    %% Line 714
		    <{'fw_error',{_cor57,_cor58,FwError}}>
			when let <_cor59> =
			      call 'erlang':'=:='
				  (_cor57, FwMod)
			  in  let <_cor60> =
				  call 'erlang':'=:='
				      (_cor58, FwFunc)
			      in  call 'erlang':'and'
				      (_cor59, _cor60) ->
			%% Line 715
			FwError
		    %% Line 716
		    <Other> when 'true' ->
			%% Line 717
			Other
		  end
	      in  let <Error> = {%% Line 719
		       'framework_error',_cor8}
		  in  let <_cor11> =
			  %% Line 720
			  call 'erlang':'self'
			      ()
		      in  do  %% Line 720
			      apply 'spawn_fw_call'/7
				  (FwMod, FwFunc, Config, Pid, Error, 'unknown', _cor11)
			      %% Line 721
			      St
	  %% Line 722
	  <Reason,St = {'st',_cor61,Pid,{Mod,Func},_cor62,'tc',_cor63,_cor64,_cor65,Config0,_cor66}>
	      when %% Line 723
		call 'erlang':'is_list'
		    (Config0) ->
	      let <R,Loc1,F> =
		  %% Line 724
		  case Reason of
		    %% Line 725
		    <{E = 'timetrap_timeout',TVal,Loc0}> when 'true' ->
			%% Line 726
			<{E,TVal},Loc0,E>
		    %% Line 727
		    <{E = 'testcase_aborted',AbortReason,Loc0}> when 'true' ->
			let <Msg> = {%% Line 728
			     E,%% Line 728
			       AbortReason}
			in  %% Line 729
			    <Msg,Loc0,Msg>
		    %% Line 730
		    <Other> when 'true' ->
			%% Line 731
			<Other,'unknown',Other>
		  end
	      in  let <Timeout> =
		      %% Line 733
		      apply 'end_conf_timeout'/2
			  (Reason, St)
		  in  let <Config> =
			  %% Line 734
			  [{'tc_status',{'failed',F}}|Config0]
		      in  let <EndConfPid> =
			      %% Line 735
			      apply 'call_end_conf'/7
				  (Mod, Func, Pid, R, Loc1, Config, Timeout)
			  in  %% Line 736
			      call 'erlang':'setelement'
				  (11, St, EndConfPid)
	  %% Line 737
	  <Reason,St = {'st',_cor78,Pid,{Mod,Func0},_cor79,%% Line 738
							   Status,_cor80,_cor81,_cor82,Config,_cor83}> when 'true' ->
	      let <R,Loc1> =
		  %% Line 739
		  case Reason of
		    %% Line 740
		    <{E = 'timetrap_timeout',TVal,Loc0}> when 'true' ->
			%% Line 741
			<{E,TVal},Loc0>
		    %% Line 742
		    <{E = 'testcase_aborted',AbortReason,Loc0}> when 'true' ->
			%% Line 743
			<{E,AbortReason},Loc0>
		    %% Line 744
		    <Other> when 'true' ->
			%% Line 745
			<Other,_cor79>
		  end
	      in  let <_cor27> =
		      %% Line 747
		      case Status of
			%% Line 748
			<F = 'init_per_testcase'> when 'true' ->
			    {F,Func0}
			%% Line 749
			<F = 'end_per_testcase'> when 'true' ->
			    {F,Func0}
			%% Line 750
			<_cor94> when 'true' ->
			    Func0
		      end
		  in  let <_cor29> =
			  %% Line 752
			  call 'erlang':'self'
			      ()
		      in  do  %% Line 752
			      apply 'spawn_fw_call'/7
				  (Mod, _cor27, Config, Pid, R, Loc1, _cor29)
			      %% Line 753
			      St
	  ( <_cor31,_cor30> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor31,_cor30})
		  -| [{'function_name',{'handle_tc_exit',2}}] )
	    -| ['compiler_generated'] )
	end
'end_conf_timeout'/2 =
    %% Line 755
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'timetrap_timeout',Timeout,_cor5},_cor6> when 'true' ->
	      %% Line 756
	      Timeout
	  %% Line 757
	  <_cor7,{'st',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,Config,_cor16}>
	      when call 'erlang':'is_list'
		    (Config) ->
	      %% Line 758
	      call 'proplists':'get_value'
		  ('default_timeout', Config, 60000)
	  %% Line 759
	  <_cor17,_cor18> when 'true' ->
	      60000
	end
'call_end_conf'/7 =
    %% Line 762
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Starter> =
	    %% Line 763
	    call 'erlang':'self'
		()
	in  let <Data> =
		%% Line 764
		{_cor6,_cor5,_cor4,_cor3,_cor2}
	    in  %% Line 765
		case call 'erlang':'function_exported'
			 (_cor6, 'end_per_testcase', 2) of
		  %% Line 766
		  <'false'> when 'true' ->
		      let <_cor10> =
			  %% Line 767
			  ( fun () ->
				let <_cor9> =
				    %% Line 768
				    call 'erlang':'self'
					()
				in  %% Line 768
				    call 'erlang':'!'
					(Starter, {_cor9,{'call_end_conf',Data,'ok'}})
			    -| [{'id',{0,0,'-call_end_conf/7-fun-0-'}}] )
		      in  %% Line 767
			  call 'erlang':'spawn_link'
			      (_cor10)
		  %% Line 770
		  <'true'> when 'true' ->
		      %% Line 771
		      apply 'do_call_end_conf'/6
			  (Starter, _cor6, _cor5, Data, _cor1, _cor0)
		  ( <_cor11> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor11})
		    -| ['compiler_generated'] )
		end
'do_call_end_conf'/6 =
    %% Line 774
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <EndConfProc> =
	    %% Line 776
	    ( fun () ->
		  do  %% Line 777
		      call 'erlang':'process_flag'
			  ('trap_exit', 'true')
		      let <Supervisor> =
			  %% Line 778
			  call 'erlang':'self'
			      ()
		      in  let <EndConfApply> =
			      %% Line 780
			      ( fun () ->
				    do  %% Line 781
					apply 'timetrap'/1
					    (_cor0)
					let <_cor7> =
					    catch
						%% Line 782
						call _cor4:'end_per_testcase'
						    (_cor3, _cor1)
					in  do  %% Line 782
						case _cor7 of
						  %% Line 783
						  <{'EXIT',Why}> when 'true' ->
						      do  %% Line 784
							  call 'timer':'sleep'
							      (1)
							  let <_cor8> =
							      %% Line 785
							      call 'erlang':'group_leader'
								  ()
							  in  %% Line 785
							      call 'erlang':'!'
								  (_cor8, {'printout',12,%% Line 786
											 [87|[65|[82|[78|[73|[78|[71|[33|[32|[126|[119|[58|[101|[110|[100|[95|[112|[101|[114|[95|[116|[101|[115|[116|[99|[97|[115|[101|[40|[126|[119|[44|[32|[126|[112|[41|[32|[99|[114|[97|[115|[104|[101|[100|[33|[10|[9|[82|[101|[97|[115|[111|[110|[58|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],%% Line 789
																																																		       [_cor4|[_cor3|[_cor1|[Why|[]]]]]})
						  %% Line 790
						  <_cor23> when 'true' ->
						      'ok'
						end
						let <_cor10> =
						    %% Line 793
						    call 'erlang':'self'
							()
						in  %% Line 793
						    call 'erlang':'!'
							(Supervisor, {_cor10,'end_conf'})
				-| [{'id',{0,0,'-do_call_end_conf/6-fun-0-'}}] )
			  in  let <Pid> =
				  %% Line 795
				  call 'erlang':'spawn_link'
				      (EndConfApply)
			      in  %% Line 796
				  receive
				    %% Line 797
				    <{_cor24,'end_conf'}>
					when call 'erlang':'=:='
					      (_cor24,
					       Pid) ->
					let <_cor13> =
					    %% Line 798
					    call 'erlang':'self'
						()
					in  %% Line 798
					    call 'erlang':'!'
						(_cor5, {_cor13,{'call_end_conf',_cor2,'ok'}})
				    %% Line 799
				    <{'EXIT',_cor25,Reason}>
					when call 'erlang':'=:='
					      (_cor25,
					       Pid) ->
					let <_cor14> =
					    %% Line 800
					    call 'erlang':'group_leader'
						()
					in  do  %% Line 800
						call 'erlang':'!'
						    (_cor14, {'printout',12,%% Line 801
									    [87|[65|[82|[78|[73|[78|[71|[33|[32|[126|[119|[58|[101|[110|[100|[95|[112|[101|[114|[95|[116|[101|[115|[116|[99|[97|[115|[101|[40|[126|[119|[44|[32|[126|[112|[41|[32|[102|[97|[105|[108|[101|[100|[33|[10|[9|[82|[101|[97|[115|[111|[110|[58|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],%% Line 803
																																																     [_cor4|[_cor3|[_cor1|[Reason|[]]]]]})
						let <_cor15> =
						    %% Line 804
						    call 'erlang':'self'
							()
						in  %% Line 804
						    call 'erlang':'!'
							(_cor5, {_cor15,{'call_end_conf',_cor2,{'error',Reason}}})
				    %% Line 805
				    <{'EXIT',_X_OtherPid,Reason}> when 'true' ->
					%% Line 807
					call 'erlang':'exit'
					    (Reason)
				  after 'infinity' ->
				    'true'
	      -| [{'id',{0,0,'-do_call_end_conf/6-fun-1-'}}] )
	in  %% Line 810
	    call 'erlang':'spawn_link'
		(EndConfProc)
'spawn_fw_call'/7 =
    %% Line 812
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Mod,{'init_per_testcase',Func},CurrConf,Pid,Why = %% Line 813
							     {'timetrap_timeout',TVal},%% Line 814
										       Loc,%% Line 814
											   SendTo> when 'true' ->
	      let <FwCall> =
		  %% Line 816
		  ( fun () ->
			let <Skip> = {%% Line 817
			     'skip',%% Line 817
				    {'failed',{Mod,'init_per_testcase',Why}}}
			in  let <_cor8> =
				catch
				    %% Line 820
				    apply 'do_end_tc_call'/4
					(Mod, Func, {Pid,Skip,[CurrConf|[]]}, Why)
			    in  do  %% Line 820
				    case _cor8 of
				      %% Line 821
				      <{'EXIT',FwEndTCErr}> when 'true' ->
					  %% Line 822
					  call 'erlang':'exit'
					      ({'fw_notify_done','end_tc',FwEndTCErr})
				      %% Line 823
				      <_cor47> when 'true' ->
					  'ok'
				    end
				    let <_cor11> =
					%% Line 827
					call 'erlang':'self'
					    ()
				    in  let <_cor10> =
					    %% Line 828
					    call 'erlang':'/'
						(TVal, 1000)
					in  %% Line 827
					    call 'erlang':'!'
						(SendTo, {_cor11,'fw_notify_done',%% Line 828
										  {_cor10,Skip,Loc,[],'undefined'}})
		    -| [{'id',{0,0,'-spawn_fw_call/7-fun-0-'}}] )
	      in  %% Line 830
		  call 'erlang':'spawn_link'
		      (FwCall)
	  %% Line 832
	  <Mod,{'end_per_testcase',Func},EndConf,Pid,Why = %% Line 833
							   {'timetrap_timeout',TVal},%% Line 833
										     _X_Loc,%% Line 833
											    SendTo> when 'true' ->
	      let <FwCall> =
		  %% Line 835
		  ( fun () ->
			let <RetVal,Report> =
			    %% Line 837
			    case call 'proplists':'get_value'
				     ('tc_status', EndConf) of
			      %% Line 838
			      <'undefined'> when 'true' ->
				  let <E> = {%% Line 839
				       'failed',%% Line 839
						{Mod,'end_per_testcase',Why}}
				  in  %% Line 840
				      <E,E>
			      %% Line 841
			      <E = {'failed',Reason}> when 'true' ->
				  %% Line 842
				  <E,{'error',Reason}>
			      %% Line 843
			      <Result> when 'true' ->
				  let <E> = {%% Line 844
				       'failed',%% Line 844
						{Mod,'end_per_testcase',Why}}
				  in  %% Line 845
				      <Result,E>
			    end
			in  let <_cor18> =
				%% Line 847
				call 'erlang':'group_leader'
				    ()
			    in  do  %% Line 847
				    call 'erlang':'!'
					(_cor18, {'printout',12,%% Line 848
								[87|[65|[82|[78|[73|[78|[71|[33|[32|[126|[119|[58|[101|[110|[100|[95|[112|[101|[114|[95|[116|[101|[115|[116|[99|[97|[115|[101|[40|[126|[119|[44|[32|[126|[112|[41|[32|[102|[97|[105|[108|[101|[100|[33|[10|[9|[82|[101|[97|[115|[111|[110|[58|[32|[116|[105|[109|[101|[116|[114|[97|[112|[32|[116|[105|[109|[101|[111|[117|[116|[32|[97|[102|[116|[101|[114|[32|[126|[119|[32|[109|[115|[33|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],%% Line 850
																																																																		    [Mod|[Func|[EndConf|[TVal|[]]]]]})
				    let <FailLoc> =
					%% Line 851
					call 'proplists':'get_value'
					    ('tc_fail_loc', EndConf)
				    in  let <_cor20> =
					    catch
						%% Line 852
						apply 'do_end_tc_call'/4
						    (Mod, Func, %% Line 853
								{Pid,Report,[EndConf|[]]}, %% Line 853
											   Why)
					in  do  %% Line 852
						case _cor20 of
						  %% Line 854
						  <{'EXIT',FwEndTCErr}> when 'true' ->
						      %% Line 855
						      call 'erlang':'exit'
							  ({'fw_notify_done','end_tc',FwEndTCErr})
						  %% Line 856
						  <_cor48> when 'true' ->
						      'ok'
						end
						let <_cor24> =
						    %% Line 863
						    call 'erlang':'self'
							()
						in  let <_cor23> =
							%% Line 864
							call 'erlang':'/'
							    (TVal, 1000)
						    in  %% Line 863
							call 'erlang':'!'
							    (SendTo, {_cor24,'fw_notify_done',%% Line 864
											      {_cor23,RetVal,FailLoc,[],[60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34|[114|[101|[100|[34|[62|[87|[65|[82|[78|[73|[78|[71|[58|[32|[101|[110|[100|[95|[112|[101|[114|[95|[116|[101|[115|[116|[99|[97|[115|[101|[32|[116|[105|[109|[101|[100|[32|[111|[117|[116|[33|[60|[47|[102|[111|[110|[116|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}})
		    -| [{'id',{0,0,'-spawn_fw_call/7-fun-1-'}}] )
	      in  %% Line 866
		  call 'erlang':'spawn_link'
		      (FwCall)
	  %% Line 868
	  <FwMod,FwFunc,_cor49,_X_Pid,{'framework_error',FwError},_cor50,SendTo> when 'true' ->
	      let <FwCall> =
		  %% Line 870
		  ( fun () ->
			do  %% Line 871
			    call 'test_server_sup':'framework_call'
				('report', ['framework_error'|%% Line 872
							      [{{FwMod,FwFunc},%% Line 873
									       FwError}|%% Line 873
											[]]])
			    let <_cor26> =
				%% Line 876
				call 'io_lib':'format'
				    ([60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34|[114|[101|[100|[34|[62|[87|[65|[82|[78|[73|[78|[71|[33|[32|[126|[119|[58|[126|[119|[32|[102|[97|[105|[108|[101|[100|[33|[60|[47|[102|[111|[110|[116|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 878
																																					 [FwMod|[FwFunc|[]]])
			    in  let <Comment> =
				    %% Line 875
				    call 'lists':'flatten'
					(_cor26)
				in  let <_cor28> =
					%% Line 880
					call 'erlang':'self'
					    ()
				    in  %% Line 880
					call 'erlang':'!'
					    (SendTo, {_cor28,'fw_notify_done',%% Line 881
									      {'died',{'error',{FwMod,FwFunc,FwError}},%% Line 882
														       {FwMod,FwFunc},%% Line 882
																      [],%% Line 882
																	 Comment}})
		    -| [{'id',{0,0,'-spawn_fw_call/7-fun-2-'}}] )
	      in  %% Line 884
		  call 'erlang':'spawn_link'
		      (FwCall)
	  %% Line 886
	  <Mod,Func,CurrConf,Pid,Error,Loc,SendTo> when 'true' ->
	      let <_cor31> =
		  %% Line 887
		  case Func of
		    %% Line 888
		    <{_X_InitOrEndPerTC,F}> when 'true' ->
			F
		    %% Line 889
		    <F> when 'true' ->
			F
		  end
	      in  let <FwCall> =
		      %% Line 892
		      ( fun () ->
			    let <_cor33> =
				catch
				    %% Line 893
				    apply 'fw_error_notify'/5
					(Mod, _cor31, [], %% Line 894
							  Error, %% Line 894
								 Loc)
			    in  do  %% Line 893
				    case _cor33 of
				      %% Line 895
				      <{'EXIT',FwErrorNotifyErr}> when 'true' ->
					  %% Line 896
					  call 'erlang':'exit'
					      ({'fw_notify_done','error_notification',%% Line 897
										      FwErrorNotifyErr})
				      %% Line 898
				      <_cor51> when 'true' ->
					  'ok'
				    end
				    let <Conf> =
					%% Line 901
					[{'tc_status',{'failed',Error}}|CurrConf]
				    in  let <_cor36> =
					    catch
						%% Line 902
						apply 'do_end_tc_call'/4
						    (Mod, _cor31, %% Line 903
								  {Pid,Error,[Conf|[]]}, %% Line 903
											 Error)
					in  do  %% Line 902
						case _cor36 of
						  %% Line 904
						  <{'EXIT',FwEndTCErr}> when 'true' ->
						      %% Line 905
						      call 'erlang':'exit'
							  ({'fw_notify_done','end_tc',FwEndTCErr})
						  %% Line 906
						  <_cor52> when 'true' ->
						      'ok'
						end
						let <_cor38> =
						    %% Line 910
						    call 'erlang':'self'
							()
						in  %% Line 910
						    call 'erlang':'!'
							(SendTo, {_cor38,'fw_notify_done',{'died',Error,Loc,[],'undefined'}})
			-| [{'id',{0,0,'-spawn_fw_call/7-fun-3-'}}] )
		  in  %% Line 912
		      call 'erlang':'spawn_link'
			  (FwCall)
	end
'start_job_proxy'/0 =
    %% Line 919
    fun () ->
	let <_cor1> =
	    %% Line 920
	    ( fun () ->
		  apply 'job_proxy_msgloop'/0
		      ()
	      -| [{'id',{0,0,'-start_job_proxy/0-fun-0-'}}] )
	in  let <_cor2> =
		%% Line 920
		call 'erlang':'spawn'
		    (_cor1)
	    in  let <_cor0> =
		    %% Line 920
		    call 'erlang':'self'
			()
		in  do  %% Line 920
			call 'erlang':'group_leader'
			    (_cor2, _cor0)
			%% Line 920
			'ok'
'io_reply_proxy'/1 =
    %% Line 923
    fun (_cor0) ->
	%% Line 924
	receive
	  %% Line 925
	  <IoReply>
	      when try
		    let <_cor1> =
			call 'erlang':'is_tuple'
			    (IoReply)
		    in  let <_cor2> =
			    %% Line 926
			    call 'erlang':'element'
				(1, IoReply)
			in  let <_cor3> =
				%% Line 926
				call 'erlang':'=:='
				    (_cor2, 'io_reply')
			    in  call 'erlang':'and'
				    (_cor1, _cor3)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 927
	      call 'erlang':'!'
		  (_cor0, IoReply)
	  %% Line 928
	  <_cor5> when 'true' ->
	      %% Line 929
	      apply 'io_reply_proxy'/1
		  (_cor0)
	after 'infinity' ->
	  'true'
'job_proxy_msgloop'/0 =
    %% Line 932
    fun () ->
	do  %% Line 933
	    receive
	      %% Line 940
	      <IoReq>
		  when try
			let <_cor0> =
			    call 'erlang':'tuple_size'
				(IoReq)
			in  let <_cor1> =
				call 'erlang':'>='
				    (_cor0, 2)
			    in  let <_cor2> =
				    %% Line 941
				    call 'erlang':'element'
					(1, IoReq)
				in  let <_cor3> =
					%% Line 941
					call 'erlang':'=:='
					    (_cor2, 'io_request')
				    in  call 'erlang':'and'
					    (_cor1, _cor3)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  let <_cor5> =
		      %% Line 943
		      ( fun () ->
			    let <_cor4> =
				call 'erlang':'element'
				    (2, IoReq)
			    in  apply 'io_reply_proxy'/1
				    (_cor4)
			-| [{'id',{0,0,'-job_proxy_msgloop/0-fun-0-'}}] )
		  in  let <ReplyProxy> =
			  %% Line 943
			  call 'erlang':'spawn'
			      (_cor5)
		      in  let <_cor8> =
			      %% Line 944
			      call 'erlang':'group_leader'
				  ()
			  in  let <_cor7> =
				  %% Line 944
				  call 'erlang':'setelement'
				      (2, IoReq, ReplyProxy)
			      in  %% Line 944
				  call 'erlang':'!'
				      (_cor8, _cor7)
	      %% Line 947
	      <{'sync_apply',From,MFA}> when 'true' ->
		  let <_cor10> =
		      %% Line 948
		      call 'erlang':'group_leader'
			  ()
		  in  let <_cor9> =
			  %% Line 948
			  call 'erlang':'self'
			      ()
		      in  %% Line 948
			  call 'erlang':'!'
			      (_cor10, {'sync_apply_proxy',_cor9,From,MFA})
	      %% Line 949
	      <{'sync_result_proxy',To,Result}> when 'true' ->
		  %% Line 950
		  call 'erlang':'!'
		      (To, {'sync_result',Result})
	      %% Line 955
	      <Msg> when 'true' ->
		  let <_cor11> =
		      %% Line 956
		      call 'erlang':'group_leader'
			  ()
		  in  %% Line 956
		      call 'erlang':'!'
			  (_cor11, Msg)
	    after 'infinity' ->
	      'ok'
	    %% Line 958
	    apply 'job_proxy_msgloop'/0
		()
'run_test_case_eval'/9 =
    %% Line 963
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 965
	    call 'erlang':'put'
		('test_server_multiply_timetraps', _cor2)
	    do  %% Line 966
		call 'erlang':'put'
		    ('test_server_logopts', _cor1)
		let <Where> =
		    %% Line 967
		    [{_cor8,_cor7}|[]]
		in  do  %% Line 968
			call 'erlang':'put'
			    ('test_server_loc', Where)
			let <FWInitResult> =
			    %% Line 970
			    call 'test_server_sup':'framework_call'
				('init_tc', [_cor8|[_cor7|[_cor6|[]]]], %% Line 971
									{'ok',_cor6})
			in  do  %% Line 972
				apply 'set_tc_state'/1
				    ('running')
				let <_cor18> =
				    %% Line 974
				    case FWInitResult of
				      %% Line 975
				      <{'ok',Args}> when 'true' ->
					  %% Line 976
					  apply 'run_test_case_eval1'/6
					      (_cor8, _cor7, Args, _cor5, _cor3, _cor0)
				      %% Line 977
				      <Error = {'error',_X_Reason}> when 'true' ->
					  let <NewResult> =
					      %% Line 978
					      apply 'do_end_tc_call'/4
						  (_cor8, _cor7, {Error,_cor6}, %% Line 979
										{'auto_skip',{'failed',Error}})
					  in  %% Line 980
					      {{0,NewResult},Where,[]}
				      %% Line 981
				      <{'fail',Reason}> when 'true' ->
					  let <_cor12> =
					      %% Line 982
					      call 'erlang':'hd'
						  (_cor6)
					  in  let <Conf> =
						  %% Line 982
						  [{'tc_status',{'failed',Reason}}|_cor12]
					      in  do  %% Line 983
						      apply 'fw_error_notify'/4
							  (_cor8, _cor7, Conf, Reason)
						      let <NewResult> =
							  %% Line 984
							  apply 'do_end_tc_call'/4
							      (_cor8, _cor7, {{'error',Reason},[Conf|[]]}, %% Line 985
													   {'fail',Reason})
						      in  %% Line 986
							  {{0,NewResult},Where,[]}
				      %% Line 987
				      <Skip = {'skip',_X_Reason}> when 'true' ->
					  let <NewResult> =
					      %% Line 988
					      apply 'do_end_tc_call'/4
						  (_cor8, _cor7, {Skip,_cor6}, Skip)
					  in  %% Line 989
					      {{0,NewResult},Where,[]}
				      %% Line 990
				      <AutoSkip = {'auto_skip',_X_Reason}> when 'true' ->
					  let <NewResult> =
					      %% Line 992
					      apply 'do_end_tc_call'/4
						  (_cor8, _cor7, {AutoSkip,_cor6}, AutoSkip)
					  in  %% Line 993
					      {{0,NewResult},Where,[]}
				      ( <_cor17> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor17})
					-| ['compiler_generated'] )
				    end
				in  %% Line 973
				    case _cor18 of
				      <{{Time,Value},Loc,Opts}> when 'true' ->
					  %% Line 995
					  call 'erlang':'exit'
					      ({_cor4,Time,Value,Loc,Opts})
				      ( <_cor19> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor19})
					-| ['compiler_generated'] )
				    end
'run_test_case_eval1'/6 =
    %% Line 997
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 998
	case _cor1 of
	  %% Line 999
	  <'run_init'> when 'true' ->
	      let <_cor6> =
		  %% Line 1000
		  call 'erlang':'hd'
		      (_cor3)
	      in  do  %% Line 1000
		      apply 'set_tc_state'/2
			  ('init_per_testcase', _cor6)
		      do  %% Line 1001
			  apply 'ensure_timetrap'/1
			      (_cor3)
			  %% Line 1002
			  case apply 'init_per_testcase'/3
				   (_cor5, _cor4, _cor3) of
			    %% Line 1003
			    <Skip = {'skip',Reason}> when 'true' ->
				let <Line> =
				    %% Line 1004
				    apply 'get_loc'/0
					()
				in  let <_cor8> =
					%% Line 1005
					call 'erlang':'hd'
					    (_cor3)
				    in  let <Conf> =
					    %% Line 1005
					    [{'tc_status',{'skipped',Reason}}|_cor8]
					in  let <NewRes> =
						%% Line 1006
						apply 'do_end_tc_call'/4
						    (_cor5, _cor4, {Skip,[Conf|[]]}, Skip)
					    in  %% Line 1007
						{{0,NewRes},Line,[]}
			    %% Line 1008
			    <{'skip_and_save',Reason,SaveCfg}> when 'true' ->
				let <Line> =
				    %% Line 1009
				    apply 'get_loc'/0
					()
				in  let <_cor12> =
					%% Line 1011
					call 'erlang':'hd'
					    (_cor3)
				    in  let <Conf> =
					    %% Line 1010
					    [{'tc_status',{'skipped',Reason}}|%% Line 1011
									      [{'save_config',SaveCfg}|_cor12]]
					in  let <NewRes> =
						%% Line 1012
						apply 'do_end_tc_call'/4
						    (_cor5, _cor4, {{'skip',Reason},[Conf|[]]}, %% Line 1013
												{'skip',Reason})
					    in  %% Line 1014
						{{0,NewRes},Line,[]}
			    %% Line 1015
			    <FailTC = {'fail',Reason}> when 'true' ->
				let <_cor15> =
				    %% Line 1016
				    call 'erlang':'hd'
					(_cor3)
				in  let <EndConf> =
					%% Line 1016
					[{'tc_status',{'failed',Reason}}|_cor15]
				    in  do  %% Line 1017
					    apply 'fw_error_notify'/4
						(_cor5, _cor4, EndConf, Reason)
					    let <NewRes> =
						%% Line 1018
						apply 'do_end_tc_call'/4
						    (_cor5, _cor4, %% Line 1019
								   {{'error',Reason},[EndConf|[]]}, %% Line 1020
												    FailTC)
					    in  %% Line 1021
						{{0,NewRes},[{_cor5,_cor4}|[]],[]}
			    %% Line 1022
			    <{'ok',NewConf}> when 'true' ->
				let <NewConf1> =
				    %% Line 1024
				    apply 'user_callback'/5
					(_cor0, _cor5, _cor4, 'init', NewConf)
				in  do  %% Line 1026
					apply 'set_tc_state'/2
					    ('tc', NewConf1)
					let <_cor20> =
					    %% Line 1028
					    apply 'ts_tc'/3
						(_cor5, _cor4, [NewConf1|[]])
					in  let <_cor19> =
						%% Line 1028
						apply 'get_loc'/0
						    ()
					    in  %% Line 1028
						case <_cor20,_cor19> of
						  <{T,Return},Loc> when 'true' ->
						      let <EndConf,TSReturn,FWReturn> =
							  %% Line 1030
							  case Return of
							    %% Line 1031
							    <{E,TCError}>
								when let <_cor22> =
								      call 'erlang':'=:='
									  (E, 'EXIT')
								  in  let <_cor23> =
									  call 'erlang':'=:='
									      (E, 'failed')
								      in  call 'erlang':'or'
									      (_cor22, _cor23) ->
								do  %% Line 1032
								    apply 'fw_error_notify'/5
									(_cor5, _cor4, NewConf1, %% Line 1033
												 TCError, %% Line 1033
													  Loc)
								    %% Line 1034
								    <[{'tc_status',{'failed',TCError}}|%% Line 1035
												       [{'tc_fail_loc',Loc}|NewConf1]],%% Line 1036
																       Return,%% Line 1036
																	      {'error',TCError}>
							    %% Line 1037
							    <SaveCfg = {'save_config',_cor51}> when 'true' ->
								%% Line 1038
								<[{'tc_status','ok'}|[SaveCfg|NewConf1]],Return,'ok'>
							    %% Line 1039
							    <{'skip_and_save',Why,SaveCfg}> when 'true' ->
								let <Skip> = {%% Line 1040
								     'skip',%% Line 1040
									    Why}
								in  %% Line 1041
								    <[{'tc_status',{'skipped',Why}}|%% Line 1042
												    [{'save_config',SaveCfg}|NewConf1]],%% Line 1043
																	Skip,%% Line 1043
																	     Skip>
							    %% Line 1044
							    <{'skip',Why}> when 'true' ->
								%% Line 1045
								<[{'tc_status',{'skipped',Why}}|NewConf1],Return,Return>
							    %% Line 1046
							    <_cor52> when 'true' ->
								%% Line 1047
								<[{'tc_status','ok'}|NewConf1],Return,'ok'>
							  end
						      in  let <EndConf1> =
							      %% Line 1050
							      apply 'user_callback'/5
								  (_cor0, _cor5, _cor4, 'end', EndConf)
							  in  let <FWReturn1,TSReturn1,EndConf2> =
								  %% Line 1053
								  case apply 'end_per_testcase'/3
									   (_cor5, _cor4, EndConf1) of
								    %% Line 1054
								    <SaveCfg1 = {'save_config',_cor53}> when 'true' ->
									let <_cor29> =
									    %% Line 1055
									    call 'lists':'keydelete'
										('save_config', 1, %% Line 1056
												   EndConf1)
									in  %% Line 1055
									    <FWReturn,TSReturn,[SaveCfg1|_cor29]>
								    %% Line 1057
								    <{'fail',ReasonToFail}> when 'true' ->
									do  %% Line 1059
									    apply 'fw_error_notify'/4
										(_cor5, _cor4, EndConf1, ReasonToFail)
									    %% Line 1060
									    <{'error',ReasonToFail},{'failed',ReasonToFail},EndConf1>
								    %% Line 1061
								    <Failure = {'failed',{_cor54,'end_per_testcase',_cor55}}>
									when call 'erlang':'=:='
									      (FWReturn,
									       'ok') ->
									%% Line 1064
									<Failure,TSReturn,EndConf1>
								    %% Line 1065
								    <_cor56> when 'true' ->
									%% Line 1068
									<FWReturn,TSReturn,EndConf1>
								  end
							      in  %% Line 1071
								  case apply 'do_end_tc_call'/4
									   (_cor5, _cor4, %% Line 1072
											  {FWReturn1,[EndConf2|[]]}, %% Line 1072
														     TSReturn1) of
								    %% Line 1073
								    <NewReturn = {'failed',Reason}> when 'true' ->
									do  %% Line 1074
									    apply 'fw_error_notify'/4
										(_cor5, _cor4, EndConf2, Reason)
									    %% Line 1075
									    {{T,NewReturn},[{_cor5,_cor4}|[]],[]}
								    %% Line 1076
								    <NewReturn> when 'true' ->
									%% Line 1077
									{{T,NewReturn},Loc,[]}
								  end
						  ( <_fol620,_fol621> when 'true' ->
							let <_cor21> = {_fol620,_fol621}
							in  primop 'match_fail'
								({'badmatch',_cor21})
						    -| ['compiler_generated'] )
						end
			    ( <_cor34> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor34})
			      -| ['compiler_generated'] )
			  end
	  %% Line 1080
	  <'skip_init'> when 'true' ->
	      let <_cor35> =
		  %% Line 1081
		  call 'erlang':'hd'
		      (_cor3)
	      in  do  %% Line 1081
		      apply 'set_tc_state'/2
			  ('running', _cor35)
		      let <Args1> =
			  %% Line 1083
			  apply 'user_callback'/5
			      (_cor0, _cor5, _cor4, 'init', _cor3)
		      in  do  %% Line 1084
			      apply 'ensure_timetrap'/1
				  (Args1)
			      let <_cor37> =
				  %% Line 1088
				  case <> of
				    <>
					when call 'erlang':'=:='
					      (_cor2,
					       'undefined') ->
					Args1
				    %% Line 1089
				    <> when 'true' ->
					[_cor2|Args1]
				  end
			      in  let <_cor40> =
				      %% Line 1092
				      apply 'ts_tc'/3
					  (_cor5, _cor4, _cor37)
				  in  let <_cor39> =
					  %% Line 1092
					  apply 'get_loc'/0
					      ()
				      in  %% Line 1092
					  case <_cor40,_cor39> of
					    <{T,Return},Loc> when 'true' ->
						let <Return1> =
						    %% Line 1094
						    apply 'user_callback'/5
							(_cor0, _cor5, _cor4, 'end', Return)
						in  %% Line 1095
						    case apply 'process_return_val'/6
							     ([Return1|[]], _cor5, _cor4, %% Line 1096
											  Args1, %% Line 1096
												 [{_cor5,_cor4}|[]], %% Line 1096
														     Return1) of
						      <{Return2,Opts}> when 'true' ->
							  %% Line 1097
							  {{T,Return2},Loc,Opts}
						      ( <_cor43> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor43})
							-| ['compiler_generated'] )
						    end
					    ( <_fol622,_fol623> when 'true' ->
						  let <_cor41> = {_fol622,_fol623}
						  in  primop 'match_fail'
							  ({'badmatch',_cor41})
					      -| ['compiler_generated'] )
					  end
	  ( <_cor44> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor44})
	    -| ['compiler_generated'] )
	end
'do_end_tc_call'/4 =
    %% Line 1100
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <FwMod> =
	    %% Line 1101
	    call 'os':'getenv'
		([84|[69|[83|[84|[95|[83|[69|[82|[86|[69|[82|[95|[70|[82|[65|[77|[69|[87|[79|[82|[75]]]]]]]]]]]]]]]]]]]]])
	in  let <Ref> =
		%% Line 1102
		call 'erlang':'make_ref'
		    ()
	    in  %% Line 1103
		case <> of
		  <>
		      when let <_cor6> =
			    call 'erlang':'=='
				(FwMod, [99|[116|[95|[102|[114|[97|[109|[101|[119|[111|[114|[107]]]]]]]]]]]])
			in  let <_cor7> =
				call 'erlang':'=='
				    (FwMod, [117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]])
			    in  let <_cor8> =
				    call 'erlang':'=:='
					(FwMod, 'false')
				in  let <_cor9> =
					call 'erlang':'or'
					    (_cor7, _cor8)
				    in  call 'erlang':'or'
					    (_cor6, _cor9) ->
		      %% Line 1104
		      case call 'test_server_sup':'framework_call'
			       (%% Line 1105
				'end_tc', %% Line 1105
					  [_cor3|[_cor2|[_cor1|[_cor0|[]]]]], %% Line 1105
									      'ok') of
			%% Line 1106
			<{'fail',FWReason}> when 'true' ->
			    %% Line 1107
			    {'failed',FWReason}
			%% Line 1108
			<'ok'> when 'true' ->
			    %% Line 1109
			    case _cor0 of
			      %% Line 1110
			      <{'fail',Reason}> when 'true' ->
				  %% Line 1111
				  {'failed',Reason}
			      %% Line 1112
			      <_cor17> when 'true' ->
				  _cor0
			    end
			%% Line 1115
			<NewReturn> when 'true' ->
			    %% Line 1116
			    NewReturn
		      end
		  %% Line 1118
		  <> when 'true' ->
		      %% Line 1119
		      case call 'test_server_sup':'framework_call'
			       (FwMod, 'end_tc', %% Line 1120
						 [_cor3|[_cor2|[_cor1|[]]]], %% Line 1120
									     Ref) of
			%% Line 1121
			<{'fail',FWReason}> when 'true' ->
			    %% Line 1122
			    {'failed',FWReason}
			%% Line 1123
			<_X_Else> when 'true' ->
			    _cor0
		      end
		end
'process_return_val'/6 =
    %% Line 1130
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Return|[]],M,F,A,Loc,Final>
	      when call 'erlang':'is_list'
		    (Return) ->
	      let <_cor13> =
		  %% Line 1133
		  ( fun (_cor11) ->
			case _cor11 of
			  <Val>
			      when call 'erlang':'is_tuple'
				    (_cor11) ->
			      let <_cor10> =
				  %% Line 1134
				  ( fun (_cor8) ->
					let <_cor7> =
					    call 'erlang':'element'
						(1, Val)
					in  call 'erlang':'=='
						(_cor8, _cor7)
				    -| [{'id',{0,0,'-process_return_val/6-fun-0-'}}] )
			      in  %% Line 1134
				  call 'lists':'any'
				      (_cor10, ['skip'|['skip_and_save'|['save_config'|['comment'|['return_group_result']]]]])
			  %% Line 1135
			  <'ok'> when 'true' ->
			      %% Line 1136
			      'true'
			  %% Line 1137
			  <_cor22> when 'true' ->
			      %% Line 1138
			      'false'
			end
		    -| [{'id',{0,0,'-process_return_val/6-fun-1-'}}] )
	      in  %% Line 1133
		  case call 'lists':'all'
			   (_cor13, %% Line 1139
				    Return) of
		    %% Line 1140
		    <'true'> when 'true' ->
			%% Line 1141
			apply 'process_return_val1'/7
			    (Return, M, F, A, Loc, Final, [])
		    %% Line 1142
		    <'false'> when 'true' ->
			%% Line 1143
			case apply 'do_end_tc_call'/4
				 (M, F, {'ok',A}, Return) of
			  %% Line 1144
			  <Failed = {'failed',FWReason}> when 'true' ->
			      do  %% Line 1145
				  apply 'fw_error_notify'/4
				      (M, F, A, FWReason)
				  %% Line 1146
				  {Failed,[]}
			  %% Line 1147
			  <NewReturn> when 'true' ->
			      %% Line 1148
			      {NewReturn,[]}
			end
		    ( <_cor15> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor15})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1153
	  <Return,M,F,A,Loc,Final> when 'true' ->
	      %% Line 1154
	      apply 'process_return_val1'/7
		  (Return, M, F, A, Loc, Final, [])
	end
'process_return_val1'/7 =
    %% Line 1156
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Failed = {E,TCError}|_cor21],M,F,A = [Args|[]],Loc,_cor22,SaveOpts>
	      when let <_cor7> =
		    %% Line 1157
		    call 'erlang':'=:='
			(E, 'EXIT')
		in  let <_cor8> =
			%% Line 1158
			call 'erlang':'=:='
			    (E, 'failed')
		    in  %% Line 1157
			call 'erlang':'or'
			    (_cor7, _cor8) ->
	      do  %% Line 1159
		  apply 'fw_error_notify'/5
		      (M, F, A, TCError, Loc)
		  %% Line 1160
		  case apply 'do_end_tc_call'/4
			   (M, F, {{'error',TCError},%% Line 1161
						     [[{'tc_status',{'failed',TCError}}|Args]|[]]}, %% Line 1162
												    Failed) of
		    %% Line 1163
		    <{'failed',FWReason}> when 'true' ->
			%% Line 1164
			{{'failed',FWReason},SaveOpts}
		    %% Line 1165
		    <NewReturn> when 'true' ->
			%% Line 1166
			{NewReturn,SaveOpts}
		  end
	  %% Line 1168
	  <[SaveCfg = {'save_config',_cor23}|Opts],M,F,[Args|[]],Loc,Final,SaveOpts> when 'true' ->
	      %% Line 1169
	      apply 'process_return_val1'/7
		  (Opts, M, F, [[SaveCfg|Args]|[]], Loc, Final, SaveOpts)
	  %% Line 1170
	  <[{'skip_and_save',Why,SaveCfg}|Opts],M,F,[Args|[]],Loc,_cor24,SaveOpts> when 'true' ->
	      %% Line 1171
	      apply 'process_return_val1'/7
		  (Opts, M, F, [[{'save_config',SaveCfg}|Args]|[]], Loc, {'skip',Why}, SaveOpts)
	  %% Line 1172
	  <[GR = {'return_group_result',_cor25}|Opts],M,F,A,Loc,Final,SaveOpts> when 'true' ->
	      %% Line 1173
	      apply 'process_return_val1'/7
		  (Opts, M, F, A, Loc, Final, [GR|SaveOpts])
	  %% Line 1174
	  <[RetVal = {Tag,_cor26}|Opts],M,F,A,Loc,_cor27,SaveOpts>
	      when let <_cor10> =
		    call 'erlang':'=:='
			(Tag, 'skip')
		in  let <_cor11> =
			%% Line 1175
			call 'erlang':'=:='
			    (Tag, 'comment')
		    in  call 'erlang':'or'
			    (_cor10, _cor11) ->
	      %% Line 1176
	      apply 'process_return_val1'/7
		  (Opts, M, F, A, Loc, RetVal, SaveOpts)
	  %% Line 1177
	  <[_cor28|Opts],M,F,A,Loc,Final,SaveOpts> when 'true' ->
	      %% Line 1178
	      apply 'process_return_val1'/7
		  (Opts, M, F, A, Loc, Final, SaveOpts)
	  %% Line 1179
	  <[],M,F,A,_X_Loc,Final,SaveOpts> when 'true' ->
	      %% Line 1180
	      case apply 'do_end_tc_call'/4
		       (M, F, {Final,A}, Final) of
		%% Line 1181
		<{'failed',FWReason}> when 'true' ->
		    %% Line 1182
		    {{'failed',FWReason},SaveOpts}
		%% Line 1183
		<NewReturn> when 'true' ->
		    let <_cor12> =
			%% Line 1184
			call 'lists':'reverse'
			    (SaveOpts)
		    in  %% Line 1184
			{NewReturn,_cor12}
	      end
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'process_return_val1',7}}] )
	    -| ['compiler_generated'] )
	end
'user_callback'/5 =
    %% Line 1187
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <'undefined',_cor14,_cor15,_cor16,Args> when 'true' ->
	      %% Line 1188
	      Args
	  %% Line 1189
	  <{CBMod,CBFunc},Mod,Func,InitOrEnd,[Args|[]]>
	      when call 'erlang':'is_list'
		    (Args) ->
	      let <_cor5> =
		  catch
		      %% Line 1190
		      call CBMod:CBFunc
			  (InitOrEnd, Mod, Func, Args)
	      in  %% Line 1190
		  case _cor5 of
		    %% Line 1191
		    <Args1>
			when call 'erlang':'is_list'
			      (_cor5) ->
			%% Line 1192
			[Args1|[]]
		    %% Line 1193
		    <_cor17> when 'true' ->
			%% Line 1194
			[Args|[]]
		  end
	  %% Line 1196
	  <{CBMod,CBFunc},Mod,Func,InitOrEnd,Args> when 'true' ->
	      let <_cor7> =
		  catch
		      %% Line 1197
		      call CBMod:CBFunc
			  (InitOrEnd, Mod, Func, Args)
	      in  %% Line 1197
		  case _cor7 of
		    %% Line 1198
		    <Args1>
			when call 'erlang':'is_list'
			      (_cor7) ->
			%% Line 1199
			Args1
		    %% Line 1200
		    <_cor18> when 'true' ->
			%% Line 1201
			Args
		  end
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'user_callback',5}}] )
	    -| ['compiler_generated'] )
	end
'init_per_testcase'/3 =
    %% Line 1204
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 1205
	    case call 'code':'is_loaded'
		     (_cor2) of
	      %% Line 1206
	      <'false'> when 'true' ->
		  call 'code':'load_file'
		      (_cor2)
	      %% Line 1207
	      <_cor9> when 'true' ->
		  'ok'
	    end
	    %% Line 1209
	    case call 'erlang':'function_exported'
		     (_cor2, 'init_per_testcase', 2) of
	      %% Line 1210
	      <'true'> when 'true' ->
		  %% Line 1211
		  apply 'do_init_per_testcase'/2
		      (_cor2, [_cor1|_cor0])
	      %% Line 1212
	      <'false'> when 'true' ->
		  %% Line 1214
		  case _cor0 of
		    <[Config|[]]> when 'true' ->
			%% Line 1215
			{'ok',Config}
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor5})
		-| ['compiler_generated'] )
	    end
'do_init_per_testcase'/2 =
    %% Line 1218
    fun (_cor1,_cor0) ->
	%% Line 1219
	try
	    call 'erlang':'apply'
		(_cor1, 'init_per_testcase', _cor0)
	of <_cor2> ->
	    case _cor2 of
	      %% Line 1220
	      <{Skip,Reason}>
		  when let <_cor3> =
			call 'erlang':'=:='
			    (Skip, 'skip')
		    in  let <_cor4> =
			    call 'erlang':'=:='
				(Skip, 'skipped')
			in  call 'erlang':'or'
				(_cor3, _cor4) ->
		  %% Line 1221
		  {'skip',Reason}
	      %% Line 1222
	      <Res = {'skip_and_save',_cor30,_cor31}> when 'true' ->
		  %% Line 1223
		  Res
	      %% Line 1224
	      <NewConf>
		  when call 'erlang':'is_list'
			(_cor2) ->
		  let <_cor7> =
		      %% Line 1225
		      ( fun (_cor5) ->
			    case _cor5 of
			      <T>
				  when call 'erlang':'is_tuple'
					(_cor5) ->
				  'false'
			      %% Line 1226
			      <_cor32> when 'true' ->
				  'true'
			    end
			-| [{'id',{0,0,'-do_init_per_testcase/2-fun-0-'}}] )
		  in  %% Line 1225
		      case call 'lists':'filter'
			       (_cor7, %% Line 1226
				       NewConf) of
			%% Line 1227
			<[]> when 'true' ->
			    %% Line 1228
			    {'ok',NewConf}
			%% Line 1229
			<Bad> when 'true' ->
			    let <_cor8> =
				%% Line 1230
				call 'erlang':'group_leader'
				    ()
			    in  do  %% Line 1230
				    call 'erlang':'!'
					(_cor8, {'printout',12,%% Line 1231
							       [69|[82|[82|[79|[82|[33|[32|[105|[110|[105|[116|[95|[112|[101|[114|[95|[116|[101|[115|[116|[99|[97|[115|[101|[32|[104|[97|[115|[32|[114|[101|[116|[117|[114|[110|[101|[100|[32|[98|[97|[100|[32|[101|[108|[101|[109|[101|[110|[116|[115|[32|[105|[110|[32|[67|[111|[110|[102|[105|[103|[58|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],%% Line 1232
																																																					     [Bad|[]]})
				    %% Line 1233
				    {'skip',{'failed',{_cor1,'init_per_testcase','bad_return'}}}
		      end
	      %% Line 1235
	      <Res = {'fail',_X_Reason}> when 'true' ->
		  %% Line 1236
		  Res
	      %% Line 1237
	      <_X_Other> when 'true' ->
		  let <_cor10> =
		      %% Line 1238
		      call 'erlang':'group_leader'
			  ()
		  in  do  %% Line 1238
			  call 'erlang':'!'
			      (_cor10, {'printout',12,[69|[82|[82|[79|[82|[33|[32|[105|[110|[105|[116|[95|[112|[101|[114|[95|[116|[101|[115|[116|[99|[97|[115|[101|[32|[100|[105|[100|[32|[110|[111|[116|[32|[114|[101|[116|[117|[114|[110|[32|[97|[32|[67|[111|[110|[102|[105|[103|[32|[108|[105|[115|[116|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[]})
			  %% Line 1241
			  {'skip',{'failed',{_cor1,'init_per_testcase','bad_return'}}}
	    end
	catch <_cor14,_cor13,_cor12> ->
	    case <_cor14,_cor13,_cor12> of
	      %% Line 1243
	      <'throw',{Skip,Reason},_cor33>
		  when let <_cor15> =
			call 'erlang':'=:='
			    (Skip, 'skip')
		    in  let <_cor16> =
			    call 'erlang':'=:='
				(Skip, 'skipped')
			in  call 'erlang':'or'
				(_cor15, _cor16) ->
		  %% Line 1244
		  {'skip',Reason}
	      %% Line 1245
	      <'exit',{Skip,Reason},_cor34>
		  when let <_cor17> =
			call 'erlang':'=:='
			    (Skip, 'skip')
		    in  let <_cor18> =
			    call 'erlang':'=:='
				(Skip, 'skipped')
			in  call 'erlang':'or'
				(_cor17, _cor18) ->
		  %% Line 1246
		  {'skip',Reason}
	      %% Line 1247
	      <'throw',Other,_cor35> when 'true' ->
		  let <_cor19> =
		      %% Line 1248
		      call 'erlang':'get_stacktrace'
			  ()
		  in  do  %% Line 1248
			  apply 'set_loc'/1
			      (_cor19)
			  let <Line> =
			      %% Line 1249
			      apply 'get_loc'/0
				  ()
			  in  let <FormattedLoc> =
				  %% Line 1250
				  call 'test_server_sup':'format_loc'
				      (Line)
			      in  let <_cor22> =
				      %% Line 1251
				      call 'erlang':'group_leader'
					  ()
				  in  do  %% Line 1251
					  call 'erlang':'!'
					      (_cor22, {'printout',12,%% Line 1252
								      [69|[82|[82|[79|[82|[33|[32|[105|[110|[105|[116|[95|[112|[101|[114|[95|[116|[101|[115|[116|[99|[97|[115|[101|[32|[116|[104|[114|[111|[119|[110|[33|[10|[9|[76|[111|[99|[97|[116|[105|[111|[110|[58|[32|[126|[116|[115|[10|[9|[82|[101|[97|[115|[111|[110|[58|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],%% Line 1254
																																																		 [FormattedLoc|[Other|[]]]})
					  %% Line 1255
					  {'skip',{'failed',{_cor1,'init_per_testcase',Other}}}
	      %% Line 1256
	      <_cor36,Reason0,_cor37> when 'true' ->
		  let <Stk> =
		      %% Line 1257
		      call 'erlang':'get_stacktrace'
			  ()
		  in  let <Reason> = {%% Line 1258
			   Reason0,%% Line 1258
				   Stk}
		      in  do  %% Line 1259
			      apply 'set_loc'/1
				  (Stk)
			      let <Line> =
				  %% Line 1260
				  apply 'get_loc'/0
				      ()
			      in  let <FormattedLoc> =
				      %% Line 1261
				      call 'test_server_sup':'format_loc'
					  (Line)
				  in  let <_cor27> =
					  %% Line 1262
					  call 'erlang':'group_leader'
					      ()
				      in  do  %% Line 1262
					      call 'erlang':'!'
						  (_cor27, {'printout',12,%% Line 1263
									  [69|[82|[82|[79|[82|[33|[32|[105|[110|[105|[116|[95|[112|[101|[114|[95|[116|[101|[115|[116|[99|[97|[115|[101|[32|[99|[114|[97|[115|[104|[101|[100|[33|[10|[9|[76|[111|[99|[97|[116|[105|[111|[110|[58|[32|[126|[116|[115|[10|[9|[82|[101|[97|[115|[111|[110|[58|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],%% Line 1265
																																																			 [FormattedLoc|[Reason|[]]]})
					      %% Line 1266
					      {'skip',{'failed',{_cor1,'init_per_testcase',Reason}}}
	    end
'end_per_testcase'/3 =
    %% Line 1269
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1270
	case call 'erlang':'function_exported'
		 (_cor2, 'end_per_testcase', 2) of
	  %% Line 1271
	  <'true'> when 'true' ->
	      %% Line 1272
	      apply 'do_end_per_testcase'/4
		  (_cor2, 'end_per_testcase', _cor1, _cor0)
	  %% Line 1273
	  <'false'> when 'true' ->
	      %% Line 1275
	      case call 'erlang':'function_exported'
		       (_cor2, 'fin_per_testcase', 2) of
		%% Line 1276
		<'true'> when 'true' ->
		    %% Line 1277
		    apply 'do_end_per_testcase'/4
			(_cor2, 'fin_per_testcase', _cor1, _cor0)
		%% Line 1278
		<'false'> when 'true' ->
		    %% Line 1279
		    'ok'
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'do_end_per_testcase'/4 =
    %% Line 1283
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 1284
	    apply 'set_tc_state'/2
		('end_per_testcase', _cor0)
	    %% Line 1285
	    try
		call _cor3:_cor2
		    (_cor1, _cor0)
	    of <_cor4> ->
		case _cor4 of
		  %% Line 1286
		  <SaveCfg = {'save_config',_cor34}> when 'true' ->
		      %% Line 1287
		      SaveCfg
		  %% Line 1288
		  <Fail = {'fail',_cor35}> when 'true' ->
		      %% Line 1289
		      Fail
		  %% Line 1290
		  <_cor36> when 'true' ->
		      %% Line 1291
		      'ok'
		end
	    catch <_cor8,_cor7,_cor6> ->
		case <_cor8,_cor7,_cor6> of
		  %% Line 1293
		  <'throw',Other,_cor37> when 'true' ->
		      let <_cor11> =
			  %% Line 1294
			  case apply 'read_comment'/0
				   () of
			    %% Line 1295
			    <[]> when 'true' ->
				[]
			    %% Line 1296
			    <Cmt> when 'true' ->
				let <_cor9> =
				    call 'test_server_ctrl':'xhtml'
					([60|[98|[114|[62]]]], %% Line 1297
							       [60|[98|[114|[32|[47|[62]]]]]])
				in  call 'erlang':'++'
					(Cmt, _cor9)
			  end
		      in  let <_cor13> =
			      %% Line 1299
			      call 'erlang':'get_stacktrace'
				  ()
			  in  do  %% Line 1299
				  apply 'set_loc'/1
				      (_cor13)
				  let <_cor14> =
				      %% Line 1300
				      call 'io_lib':'format'
					  ([126|[116|[115|[60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34|[114|[101|[100|[34|[62|[87|[65|[82|[78|[73|[78|[71|[58|[32|[126|[119|[32|[116|[104|[114|[111|[119|[110|[33|[60|[47|[102|[111|[110|[116|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1302
																																						      [_cor11|[_cor2|[]]])
				  in  do  %% Line 1300
					  apply 'comment'/1
					      (_cor14)
					  let <_cor17> =
					      %% Line 1303
					      call 'erlang':'group_leader'
						  ()
					  in  let <_cor15> =
						  %% Line 1308
						  apply 'get_loc'/0
						      ()
					      in  let <_cor16> =
						      %% Line 1308
						      call 'test_server_sup':'format_loc'
							  (_cor15)
						  in  do  %% Line 1303
							  call 'erlang':'!'
							      (_cor17, {'printout',12,%% Line 1304
										      [87|[65|[82|[78|[73|[78|[71|[58|[32|[126|[119|[32|[116|[104|[114|[111|[119|[110|[33|[10|[82|[101|[97|[115|[111|[110|[58|[32|[126|[112|[10|[76|[105|[110|[101|[58|[32|[126|[116|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],%% Line 1307
																																						       [_cor2|[Other|%% Line 1308
																																								     [_cor16|[]]]]})
							  %% Line 1309
							  {'failed',{_cor3,'end_per_testcase',Other}}
		  %% Line 1310
		  <Class,Reason,_cor38> when 'true' ->
		      let <Stk> =
			  %% Line 1311
			  call 'erlang':'get_stacktrace'
			      ()
		      in  do  %% Line 1312
			      apply 'set_loc'/1
				  (Stk)
			      let <_cor20> =
				  %% Line 1313
				  case Class of
				    %% Line 1314
				    <'exit'> when 'true' ->
					{'EXIT',Reason}
				    %% Line 1315
				    <'error'> when 'true' ->
					{'EXIT',{Reason,Stk}}
				    ( <_cor19> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor19})
				      -| ['compiler_generated'] )
				  end
			      in  let <_cor24> =
				      %% Line 1317
				      case apply 'read_comment'/0
					       () of
					%% Line 1318
					<[]> when 'true' ->
					    []
					%% Line 1319
					<Cmt> when 'true' ->
					    let <_cor22> =
						call 'test_server_ctrl':'xhtml'
						    ([60|[98|[114|[62]]]], %% Line 1320
									   [60|[98|[114|[32|[47|[62]]]]]])
					    in  call 'erlang':'++'
						    (Cmt, _cor22)
				      end
				  in  let <_cor26> =
					  %% Line 1322
					  call 'io_lib':'format'
					      ([126|[116|[115|[60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34|[114|[101|[100|[34|[62|[87|[65|[82|[78|[73|[78|[71|[58|[32|[126|[119|[32|[99|[114|[97|[115|[104|[101|[100|[33|[60|[47|[102|[111|[110|[116|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1324
																																							      [_cor24|[_cor2|[]]])
				      in  do  %% Line 1322
					      apply 'comment'/1
						  (_cor26)
					      let <_cor29> =
						  %% Line 1325
						  call 'erlang':'group_leader'
						      ()
					      in  let <_cor27> =
						      %% Line 1330
						      apply 'get_loc'/0
							  ()
						  in  let <_cor28> =
							  %% Line 1330
							  call 'test_server_sup':'format_loc'
							      (_cor27)
						      in  do  %% Line 1325
							      call 'erlang':'!'
								  (_cor29, {'printout',12,%% Line 1326
											  [87|[65|[82|[78|[73|[78|[71|[58|[32|[126|[119|[32|[99|[114|[97|[115|[104|[101|[100|[33|[10|[82|[101|[97|[115|[111|[110|[58|[32|[126|[112|[10|[76|[105|[110|[101|[58|[32|[126|[116|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],%% Line 1329
																																							       [_cor2|[Reason|%% Line 1330
																																									      [_cor28|[]]]]})
							      %% Line 1331
							      {'failed',{_cor3,'end_per_testcase',_cor20}}
		end
'get_loc'/0 =
    %% Line 1334
    fun () ->
	%% Line 1335
	call 'erlang':'get'
	    ('test_server_loc')
'get_loc'/1 =
    %% Line 1337
    fun (_cor0) ->
	%% Line 1338
	case %% Line 1339
	     call 'erlang':'process_info'
		 (_cor0, ['current_stacktrace'|['dictionary']]) of
	  <[{'current_stacktrace',Stk0}|[{'dictionary',Dict}|[]]]> when 'true' ->
	      let <_cor4> =
		  %% Line 1340
		  ( fun (_cor2) ->
			case _cor2 of
			  <{Key,Val}> when 'true' ->
			      call 'erlang':'put'
				  (Key, Val)
			  ( <_cor3> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor3})
				  -| [{'function_name',{'-get_loc/1-fun-0-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-get_loc/1-fun-0-'}}] )
	      in  do  %% Line 1340
		      call 'lists':'foreach'
			  (_cor4, Dict)
		      let <_cor10> =
			  %% Line 1341
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor7) ->
					case _cor7 of
					  <[Loc|_cor6]> when 'true' ->
					      let <_cor8> =
						  apply 'rewrite_loc_item'/1
						      (Loc)
					      in  let <_cor9> =
						      apply 'lc$^0'/1
							  (_cor6)
						  in  ( [_cor8|_cor9]
							-| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor7> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor7})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (Stk0)
			    -| ['list_comprehension'] )
		      in  do  %% Line 1342
			      case call 'erlang':'get'
				       ('test_server_loc') of
				%% Line 1343
				<[{Suite,Case}|[]]> when 'true' ->
				    let <_cor18> =
					%% Line 1347
					( letrec
					      'lc$^1'/1 =
						  fun (_cor16) ->
						      case _cor16 of
							<[{S,C,_X_L}|_cor13]>
							    when let <_cor14> =
								  call 'erlang':'=='
								      (S, Suite)
							      in  let <_cor15> =
								      call 'erlang':'=='
									  (C, Case)
								  in  call 'erlang':'and'
									  (_cor14, _cor15) ->
							    let <_cor17> =
								apply 'lc$^1'/1
								    (_cor13)
							    in  ( ['match'|_cor17]
								  -| ['compiler_generated'] )
							( <[_cor12|_cor13]> when 'true' ->
							      apply 'lc$^1'/1
								  (_cor13)
							  -| ['compiler_generated'] )
							<[]> when 'true' ->
							    []
							( <_cor16> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_cor16})
								-| [{'function_name',{'lc$^1',1}}] )
							  -| ['compiler_generated'] )
						      end
					  in  apply 'lc$^1'/1
						  (_cor10)
					  -| ['list_comprehension'] )
				    in  %% Line 1347
					case _cor18 of
					  %% Line 1348
					  <['match'|_cor22]> when 'true' ->
					      call 'erlang':'put'
						  ('test_server_loc', _cor10)
					  %% Line 1349
					  <_cor23> when 'true' ->
					      'ok'
					end
				%% Line 1351
				<_cor24> when 'true' ->
				    %% Line 1352
				    call 'erlang':'put'
					('test_server_loc', _cor10)
			      end
			      %% Line 1354
			      apply 'get_loc'/0
				  ()
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'fw_error_notify'/4 =
    %% Line 1356
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1357
	call 'test_server_sup':'framework_call'
	    ('error_notification', %% Line 1358
				   [_cor3|[_cor2|[[_cor1|[]]|%% Line 1359
							     [{_cor0,'unknown'}|[]]]]])
'fw_error_notify'/5 =
    %% Line 1360
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1361
	call 'test_server_sup':'framework_call'
	    ('error_notification', %% Line 1362
				   [_cor4|[_cor3|[[_cor2|[]]|%% Line 1363
							     [{_cor1,_cor0}|[]]]]])
'print'/3 =
    %% Line 1376
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1377
	call 'test_server_ctrl':'print'
	    (_cor2, _cor1, _cor0)
'print'/4 =
    %% Line 1379
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1380
	call 'test_server_ctrl':'print'
	    (_cor3, _cor2, _cor1, _cor0)
'print_timestamp'/2 =
    %% Line 1389
    fun (_cor1,_cor0) ->
	%% Line 1390
	call 'test_server_ctrl':'print_timestamp'
	    (_cor1, _cor0)
'lookup_config'/2 =
    %% Line 1402
    fun (_cor1,_cor0) ->
	%% Line 1403
	case call 'lists':'keysearch'
		 (_cor1, 1, _cor0) of
	  %% Line 1404
	  <{'value',{_cor5,Val}}>
	      when call 'erlang':'=:='
		    (_cor5,
		     _cor1) ->
	      %% Line 1405
	      Val
	  %% Line 1406
	  <_cor6> when 'true' ->
	      do  %% Line 1407
		  call 'io':'format'
		      ([67|[111|[117|[108|[100|[32|[110|[111|[116|[32|[102|[105|[110|[100|[32|[101|[108|[101|[109|[101|[110|[116|[32|[126|[112|[32|[105|[110|[32|[67|[111|[110|[102|[105|[103|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor1|[]])
		  %% Line 1408
		  'undefined'
	end
'ts_tc'/3 =
    %% Line 1412
    fun (_cor2,_cor1,_cor0) ->
	let <Before> =
	    %% Line 1413
	    call 'erlang':'now'
		()
	in  let <_cor10> =
		%% Line 1414
		try
		    %% Line 1415
		    call 'erlang':'apply'
			(_cor2, _cor1, _cor0)
		of <_cor4> ->
		    _cor4
		catch <_cor7,_cor6,_cor5> ->
		    case <_cor7,_cor6,_cor5> of
		      %% Line 1417
		      <'throw',{'skip',Reason},_cor31> when 'true' ->
			  {'skip',Reason}
		      %% Line 1418
		      <'throw',{'skipped',Reason},_cor32> when 'true' ->
			  {'skip',Reason}
		      %% Line 1419
		      <'exit',{'skip',Reason},_cor33> when 'true' ->
			  {'skip',Reason}
		      %% Line 1420
		      <'exit',{'skipped',Reason},_cor34> when 'true' ->
			  {'skip',Reason}
		      %% Line 1421
		      <Type,Reason,_cor35> when 'true' ->
			  let <Stk> =
			      %% Line 1422
			      call 'erlang':'get_stacktrace'
				  ()
			  in  do  %% Line 1423
				  apply 'set_loc'/1
				      (Stk)
				  %% Line 1424
				  case Type of
				    %% Line 1425
				    <'throw'> when 'true' ->
					%% Line 1426
					{'failed',{'thrown',Reason}}
				    %% Line 1427
				    <'error'> when 'true' ->
					%% Line 1428
					{'EXIT',{Reason,Stk}}
				    %% Line 1429
				    <'exit'> when 'true' ->
					%% Line 1430
					{'EXIT',Reason}
				    ( <_cor9> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor9})
				      -| ['compiler_generated'] )
				  end
		    end
	    in  let <After> =
		    %% Line 1433
		    call 'erlang':'now'
			()
		in  let <_cor23> =
			%% Line 1435
			call 'erlang':'element'
			    (1, After)
		    in  let <_cor24> =
			    %% Line 1435
			    call 'erlang':'*'
				(_cor23, 1000000000000)
			in  let <_cor21> =
				%% Line 1436
				call 'erlang':'element'
				    (2, After)
			    in  let <_cor22> =
				    %% Line 1436
				    call 'erlang':'*'
					(_cor21, 1000000)
				in  let <_cor25> =
					%% Line 1436
					call 'erlang':'+'
					    (_cor24, _cor22)
				    in  let <_cor20> =
					    %% Line 1436
					    call 'erlang':'element'
						(3, After)
					in  let <_cor26> =
						%% Line 1436
						call 'erlang':'+'
						    (_cor25, _cor20)
					    in  let <_cor16> =
						    %% Line 1437
						    call 'erlang':'element'
							(1, Before)
						in  let <_cor17> =
							%% Line 1437
							call 'erlang':'*'
							    (_cor16, 1000000000000)
						    in  let <_cor14> =
							    %% Line 1438
							    call 'erlang':'element'
								(2, Before)
							in  let <_cor15> =
								%% Line 1438
								call 'erlang':'*'
								    (_cor14, 1000000)
							    in  let <_cor18> =
								    %% Line 1438
								    call 'erlang':'+'
									(_cor17, _cor15)
								in  let <_cor13> =
									%% Line 1438
									call 'erlang':'element'
									    (3, Before)
								    in  let <_cor19> =
									    %% Line 1438
									    call 'erlang':'+'
										(_cor18, _cor13)
									in  let <Elapsed> =
										%% Line 1436
										call 'erlang':'-'
										    (_cor26, _cor19)
									    in  %% Line 1439
										{Elapsed,_cor10}
'set_loc'/1 =
    %% Line 1441
    fun (_cor0) ->
	let <_cor6> =
	    %% Line 1442
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor3) ->
			  case _cor3 of
			    <[I = {_cor11,_cor12,_cor13,_cor14}|_cor2]> when 'true' ->
				let <_cor4> =
				    apply 'rewrite_loc_item'/1
					(I)
				in  let <_cor5> =
					apply 'lc$^0'/1
					    (_cor2)
				    in  ( [_cor4|_cor5]
					  -| ['compiler_generated'] )
			    ( <[_cor1|_cor2]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor2)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor3> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor3})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  let <_cor8> =
		%% Line 1442
		case _cor6 of
		  %% Line 1443
		  <[{M,F,0}|Stack]> when 'true' ->
		      %% Line 1444
		      [{M,F}|Stack]
		  %% Line 1445
		  <Other> when 'true' ->
		      %% Line 1446
		      Other
		end
	    in  %% Line 1448
		call 'erlang':'put'
		    ('test_server_loc', _cor8)
'rewrite_loc_item'/1 =
    %% Line 1450
    fun (_cor0) ->
	case _cor0 of
	  <{M,F,_cor3,Loc}> when 'true' ->
	      let <_cor1> =
		  %% Line 1451
		  call 'proplists':'get_value'
		      ('line', Loc, 0)
	      in  %% Line 1451
		  {M,F,_cor1}
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'rewrite_loc_item',1}}] )
	    -| ['compiler_generated'] )
	end
'format'/1 =
    %% Line 1477
    fun (_cor0) ->
	%% Line 1478
	apply 'format'/3
	    ('minor', _cor0, [])
'format'/2 =
    %% Line 1480
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'major',Format> when 'true' ->
	      %% Line 1481
	      apply 'format'/3
		  ('major', Format, [])
	  %% Line 1482
	  <'minor',Format> when 'true' ->
	      %% Line 1483
	      apply 'format'/3
		  ('minor', Format, [])
	  %% Line 1484
	  <Detail,Format>
	      when call 'erlang':'is_integer'
		    (Detail) ->
	      %% Line 1485
	      apply 'format'/3
		  (Detail, Format, [])
	  %% Line 1486
	  <Format,Args> when 'true' ->
	      %% Line 1487
	      apply 'format'/3
		  ('minor', Format, Args)
	end
'format'/3 =
    %% Line 1489
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    catch
		%% Line 1491
		call 'io_lib':'format'
		    (_cor1, _cor0)
	in  let <_cor5> =
		%% Line 1491
		case _cor3 of
		  %% Line 1492
		  <{'EXIT',_cor10}> when 'true' ->
		      %% Line 1493
		      call 'io_lib':'format'
			  ([105|[108|[108|[101|[103|[97|[108|[32|[102|[111|[114|[109|[97|[116|[59|[32|[126|[112|[32|[119|[105|[116|[104|[32|[97|[114|[103|[115|[32|[126|[112|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1494
																										       [_cor1|[_cor0|[]]])
		  %% Line 1495
		  <Valid> when 'true' ->
		      Valid
		end
	    in  %% Line 1497
		apply 'log'/1
		    ({_cor2,_cor5})
'log'/1 =
    %% Line 1499
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 1500
	    call 'erlang':'group_leader'
		()
	in  let <_cor1> =
		%% Line 1500
		call 'erlang':'self'
		    ()
	    in  do  %% Line 1500
		    call 'erlang':'!'
			(_cor2, {'structured_io',_cor1,_cor0})
		    %% Line 1501
		    'ok'
'capture_start'/0 =
    %% Line 1513
    fun () ->
	let <_cor1> =
	    %% Line 1514
	    call 'erlang':'group_leader'
		()
	in  let <_cor0> =
		%% Line 1514
		call 'erlang':'self'
		    ()
	    in  do  %% Line 1514
		    call 'erlang':'!'
			(_cor1, {'capture',_cor0})
		    %% Line 1515
		    'ok'
'capture_stop'/0 =
    %% Line 1517
    fun () ->
	let <_cor0> =
	    %% Line 1518
	    call 'erlang':'group_leader'
		()
	in  do  %% Line 1518
		call 'erlang':'!'
		    (_cor0, {'capture','false'})
		%% Line 1519
		'ok'
'capture_get'/0 =
    %% Line 1530
    fun () ->
	%% Line 1531
	call 'test_server_sup':'capture_get'
	    ([])
'messages_get'/0 =
    %% Line 1538
    fun () ->
	%% Line 1539
	call 'test_server_sup':'messages_get'
	    ([])
'permit_io'/2 =
    %% Line 1545
    fun (_cor1,_cor0) ->
	%% Line 1546
	call 'erlang':'!'
	    (_cor1, {'permit_io',_cor0})
'sleep'/1 =
    %% Line 1554
    fun (_cor0) ->
	case _cor0 of
	  <'infinity'> when 'true' ->
	      %% Line 1555
	      receive
		
	      after %% Line 1556
		    'infinity' ->
		%% Line 1557
		'ok'
	  %% Line 1559
	  <MSecs> when 'true' ->
	      do  %% Line 1560
		  receive
		    
		  after %% Line 1561
			call 'erlang':'trunc'
			    (MSecs) ->
		    'ok'
		  %% Line 1564
		  'ok'
	end
'adjusted_sleep'/1 =
    %% Line 1575
    fun (_cor0) ->
	case _cor0 of
	  <'infinity'> when 'true' ->
	      %% Line 1576
	      receive
		
	      after %% Line 1577
		    'infinity' ->
		%% Line 1578
		'ok'
	  %% Line 1580
	  <MSecs> when 'true' ->
	      let <Multiplier,ScaleFactor> =
		  %% Line 1582
		  case call 'test_server_ctrl':'get_timetrap_parameters'
			   () of
		    %% Line 1583
		    <{'undefined','undefined'}> when 'true' ->
			%% Line 1584
			<1,1>
		    %% Line 1585
		    <{'undefined','false'}> when 'true' ->
			%% Line 1586
			<1,1>
		    %% Line 1587
		    <{'undefined','true'}> when 'true' ->
			let <_cor1> =
			    %% Line 1588
			    apply 'timetrap_scale_factor'/0
				()
			in  %% Line 1588
			    <1,_cor1>
		    %% Line 1589
		    <{'infinity',_cor9}> when 'true' ->
			%% Line 1590
			<'infinity',1>
		    %% Line 1591
		    <{Mult,'undefined'}> when 'true' ->
			%% Line 1592
			<Mult,1>
		    %% Line 1593
		    <{Mult,'false'}> when 'true' ->
			%% Line 1594
			<Mult,1>
		    %% Line 1595
		    <{Mult,'true'}> when 'true' ->
			let <_cor2> =
			    %% Line 1596
			    apply 'timetrap_scale_factor'/0
				()
			in  %% Line 1596
			    <Mult,_cor2>
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor6> =
		      %% Line 1599
		      call 'erlang':'*'
			  (MSecs, Multiplier)
		  in  let <_cor7> =
			  %% Line 1599
			  call 'erlang':'*'
			      (_cor6, ScaleFactor)
		      in  do  %% Line 1598
			      receive
				
			      after %% Line 1599
				    call 'erlang':'trunc'
					(_cor7) ->
				'ok'
			      %% Line 1602
			      'ok'
	end
'fail'/1 =
    %% Line 1609
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1610
	    apply 'cast_to_list'/1
		(_cor0)
	in  do  %% Line 1610
		apply 'comment'/1
		    (_cor1)
		%% Line 1611
		try
		    %% Line 1612
		    call 'erlang':'exit'
			({'suite_failed',_cor0})
		of <_cor2> ->
		    _cor2
		catch <_cor5,_cor4,_cor3> ->
		    let <_cor10,Stk> =
			%% Line 1615
			case call 'erlang':'get_stacktrace'
				 () of
			  %% Line 1616
			  <[{'test_server','fail',1,_cor9}|Stk]> when 'true' ->
			      <'ok',Stk>
			  %% Line 1617
			  <Stk> when 'true' ->
			      <'ok',Stk>
			end
		    in  %% Line 1619
			call 'erlang':'raise'
			    (_cor5, _cor4, Stk)
'cast_to_list'/1 =
    %% Line 1622
    fun (_cor0) ->
	case _cor0 of
	  <X>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      X
	  %% Line 1623
	  <X>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      call 'erlang':'atom_to_list'
		  (X)
	  %% Line 1624
	  <X> when 'true' ->
	      let <_cor1> =
		  call 'io_lib':'format'
		      ([126|[112]], [X|[]])
	      in  call 'lists':'flatten'
		      (_cor1)
	end
'fail'/0 =
    %% Line 1633
    fun () ->
	%% Line 1634
	try
	    %% Line 1635
	    call 'erlang':'exit'
		('suite_failed')
	of <_cor0> ->
	    _cor0
	catch <_cor3,_cor2,_cor1> ->
	    let <_cor7,Stk> =
		%% Line 1638
		case call 'erlang':'get_stacktrace'
			 () of
		  %% Line 1639
		  <[{'test_server','fail',0,_cor6}|Stk]> when 'true' ->
		      <'ok',Stk>
		  %% Line 1640
		  <Stk> when 'true' ->
		      <'ok',Stk>
		end
	    in  %% Line 1642
		call 'erlang':'raise'
		    (_cor3, _cor2, Stk)
'break'/1 =
    %% Line 1650
    fun (_cor0) ->
	%% Line 1651
	apply 'break'/2
	    ('test_server', _cor0)
'break'/2 =
    %% Line 1653
    fun (_cor1,_cor0) ->
	%% Line 1654
	apply 'break'/3
	    (_cor1, '', _cor0)
'break'/3 =
    %% Line 1656
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 1657
	    apply 'timetrap_cancel'/0
		()
	    let <TCName,CntArg,PName> =
		%% Line 1659
		case <> of
		  <>
		      when call 'erlang':'=:='
			    (_cor1,
			     '') ->
		      %% Line 1660
		      <[],[],'test_server_break_process'>
		  %% Line 1661
		  <> when 'true' ->
		      let <Str> =
			  %% Line 1662
			  call 'erlang':'atom_to_list'
			      (_cor1)
		      in  let <_cor4> =
			      %% Line 1664
			      call 'erlang':'++'
				  ([116|[101|[115|[116|[95|[115|[101|[114|[118|[101|[114|[95|[98|[114|[101|[97|[107|[95|[112|[114|[111|[99|[101|[115|[115|[95]]]]]]]]]]]]]]]]]]]]]]]]]], Str)
			  in  let <_cor5> =
				  %% Line 1664
				  call 'erlang':'list_to_atom'
				      (_cor4)
			      in  %% Line 1663
				  <[32|Str],Str,_cor5>
		end
	    in  let <_cor8> =
		    %% Line 1672
		    call 'erlang':'self'
			()
		in  do  %% Line 1666
			call 'io':'format'
			    ('user', %% Line 1667
				     [10|[10|[10|[45|[45|[45|[32|[83|[69|[77|[73|[65|[85|[84|[79|[77|[65|[84|[73|[67|[32|[84|[69|[83|[84|[73|[78|[71|[32|[45|[45|[45|[10|[84|[104|[101|[32|[116|[101|[115|[116|[32|[99|[97|[115|[101|[126|[116|[115|[32|[101|[120|[101|[99|[117|[116|[101|[115|[32|[111|[110|[32|[112|[114|[111|[99|[101|[115|[115|[32|[126|[119|[10|[10|[10|[126|[116|[115|[10|[10|[10|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[10|[10|[67|[111|[110|[116|[105|[110|[117|[101|[32|[119|[105|[116|[104|[32|[45|[45|[62|[32|[126|[119|[58|[99|[111|[110|[116|[105|[110|[117|[101|[40|[126|[116|[115|[41|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1672
																																																																																																								[TCName|[_cor8|[_cor0|[_cor2|[CntArg|[]]]]]])
			do  %% Line 1673
			    case call 'erlang':'whereis'
				     (PName) of
			      %% Line 1674
			      <'undefined'> when 'true' ->
				  let <_cor9> =
				      %% Line 1675
				      call 'erlang':'self'
					  ()
				  in  %% Line 1675
				      apply 'spawn_break_process'/2
					  (_cor9, PName)
			      %% Line 1676
			      <OldBreakProcess> when 'true' ->
				  do  %% Line 1677
				      call 'erlang':'!'
					  (OldBreakProcess, 'cancel')
				      let <_cor10> =
					  %% Line 1678
					  call 'erlang':'self'
					      ()
				      in  %% Line 1678
					  apply 'spawn_break_process'/2
					      (_cor10, PName)
			    end
			    %% Line 1680
			    receive
			      <'continue'> when 'true' ->
				  'ok'
			    after 'infinity' ->
			      'true'
'spawn_break_process'/2 =
    %% Line 1682
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1683
	    ( fun () ->
		  let <_cor2> =
		      %% Line 1684
		      call 'erlang':'self'
			  ()
		  in  do  %% Line 1684
			  call 'erlang':'register'
			      (_cor0, _cor2)
			  %% Line 1685
			  receive
			    %% Line 1686
			    <'continue'> when 'true' ->
				apply 'continue'/1
				    (_cor1)
			    %% Line 1687
			    <'cancel'> when 'true' ->
				'ok'
			  after 'infinity' ->
			    'true'
	      -| [{'id',{0,0,'-spawn_break_process/2-fun-0-'}}] )
	in  %% Line 1683
	    call 'erlang':'spawn'
		(_cor3)
'continue'/0 =
    %% Line 1691
    fun () ->
	%% Line 1692
	case call 'erlang':'whereis'
		 ('test_server_break_process') of
	  %% Line 1693
	  <'undefined'> when 'true' ->
	      'ok'
	  %% Line 1694
	  <BreakProcess> when 'true' ->
	      call 'erlang':'!'
		  (BreakProcess, 'continue')
	end
'continue'/1 =
    %% Line 1697
    fun (_cor0) ->
	case _cor0 of
	  <TestCase>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 1699
		  call 'erlang':'atom_to_list'
		      (TestCase)
	      in  let <_cor2> =
		      %% Line 1698
		      call 'erlang':'++'
			  ([116|[101|[115|[116|[95|[115|[101|[114|[118|[101|[114|[95|[98|[114|[101|[97|[107|[95|[112|[114|[111|[99|[101|[115|[115|[95]]]]]]]]]]]]]]]]]]]]]]]]]], _cor1)
		  in  let <PName> =
			  %% Line 1698
			  call 'erlang':'list_to_atom'
			      (_cor2)
		      in  %% Line 1700
			  case call 'erlang':'whereis'
				   (PName) of
			    %% Line 1701
			    <'undefined'> when 'true' ->
				'ok'
			    %% Line 1702
			    <BreakProcess> when 'true' ->
				call 'erlang':'!'
				    (BreakProcess, 'continue')
			  end
	  %% Line 1705
	  <Pid>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      %% Line 1706
	      call 'erlang':'!'
		  (Pid, 'continue')
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'continue',1}}] )
	    -| ['compiler_generated'] )
	end
'timetrap_scale_factor'/0 =
    %% Line 1714
    fun () ->
	let <_cor0> =
	    %% Line 1716
	    ( fun () ->
		  apply 'has_lock_checking'/0
		      ()
	      -| [{'id',{0,0,'-timetrap_scale_factor/0-fun-0-'}}] )
	in  let <_cor1> =
		%% Line 1717
		( fun () ->
		      apply 'has_superfluous_schedulers'/0
			  ()
		  -| [{'id',{0,0,'-timetrap_scale_factor/0-fun-1-'}}] )
	    in  let <_cor2> =
		    %% Line 1718
		    ( fun () ->
			  apply 'purify_is_running'/0
			      ()
		      -| [{'id',{0,0,'-timetrap_scale_factor/0-fun-2-'}}] )
		in  let <_cor3> =
			%% Line 1719
			( fun () ->
			      apply 'is_debug'/0
				  ()
			  -| [{'id',{0,0,'-timetrap_scale_factor/0-fun-3-'}}] )
		    in  let <_cor4> =
			    %% Line 1720
			    ( fun () ->
				  apply 'is_cover'/0
				      ()
			      -| [{'id',{0,0,'-timetrap_scale_factor/0-fun-4-'}}] )
			in  %% Line 1715
			    apply 'timetrap_scale_factor'/1
				([%% Line 1716
				  {2,_cor0}|%% Line 1717
					    [{3,_cor1}|%% Line 1718
						       [{5,_cor2}|%% Line 1719
								  [{6,_cor3}|%% Line 1720
									     [{10,_cor4}|%% Line 1721
											 []]]]]])
'timetrap_scale_factor'/1 =
    %% Line 1723
    fun (_cor0) ->
	let <_cor11> =
	    %% Line 1725
	    ( fun (_cor8,_cor7) ->
		  call 'erlang':'*'
		      (_cor7, _cor8)
	      -| [{'id',{0,0,'-timetrap_scale_factor/1-fun-0-'}}] )
	in  let <_cor6> =
		%% Line 1725
		( letrec
		      'lc$^0'/1 =
			  fun (_cor3) ->
			      case _cor3 of
				<[{S,F}|_cor2]> when 'true' ->
				    ( case apply F
					       () of
					<'true'> when 'true' ->
					    let <_cor4> =
						apply 'lc$^0'/1
						    (_cor2)
					    in  ( [S|_cor4]
						  -| ['compiler_generated'] )
					( <'false'> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor2)
					  -| ['compiler_generated'] )
					( <_cor5> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor5})
					  -| ['compiler_generated'] )
				      end
				      -| ['list_comprehension'] )
				( <[_cor1|_cor2]> when 'true' ->
				      apply 'lc$^0'/1
					  (_cor2)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor3> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor3})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (_cor0)
		  -| ['list_comprehension'] )
	    in  %% Line 1725
		call 'lists':'foldl'
		    (_cor11, 1, _cor6)
'timetrap'/1 =
    %% Line 1734
    fun (_cor0) ->
	let <_cor17> =
	    %% Line 1736
	    case call 'erlang':'get'
		     ('test_server_multiply_timetraps') of
	      %% Line 1737
	      <'undefined'> when 'true' ->
		  let <_cor3> =
		      ( fun (_cor1) ->
			    _cor1
			-| [{'id',{0,0,'-timetrap/1-fun-0-'}}] )
		  in  {_cor3,'true'}
	      %% Line 1738
	      <{'undefined','false'}> when 'true' ->
		  let <_cor6> =
		      ( fun (_cor4) ->
			    _cor4
			-| [{'id',{0,0,'-timetrap/1-fun-1-'}}] )
		  in  {_cor6,'false'}
	      %% Line 1739
	      <{'undefined',_cor21}> when 'true' ->
		  let <_cor9> =
		      ( fun (_cor7) ->
			    _cor7
			-| [{'id',{0,0,'-timetrap/1-fun-2-'}}] )
		  in  {_cor9,'true'}
	      %% Line 1740
	      <{'infinity',_cor22}> when 'true' ->
		  let <_cor12> =
		      ( fun (_cor10) ->
			    'infinity'
			-| [{'id',{0,0,'-timetrap/1-fun-3-'}}] )
		  in  {_cor12,'false'}
	      %% Line 1741
	      <{Int,Scale}> when 'true' ->
		  let <_cor15> =
		      ( fun (_cor13) ->
			    case _cor13 of
			      <'infinity'> when 'true' ->
				  'infinity'
			      %% Line 1742
			      <T> when 'true' ->
				  call 'erlang':'*'
				      (T, Int)
			    end
			-| [{'id',{0,0,'-timetrap/1-fun-4-'}}] )
		  in  {_cor15,%% Line 1742
			      Scale}
	      ( <_cor16> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor16})
		-| ['compiler_generated'] )
	    end
	in  let <_cor19> =
		%% Line 1744
		call 'erlang':'self'
		    ()
	    in  %% Line 1744
		apply 'timetrap'/4
		    (_cor0, _cor0, _cor19, _cor17)
'timetrap'/3 =
    %% Line 1749
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1750
	apply 'timetrap'/4
	    (_cor2, _cor2, _cor1, _cor0)
'timetrap'/4 =
    %% Line 1752
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Timeout0,TimeToReport0,TCPid,MultAndScale = {Multiplier,Scale}> when 'true' ->
	      let <Timeout> =
		  %% Line 1755
		  apply 'time_ms'/3
		      (Timeout0, TCPid, MultAndScale)
	      in  let <Timeout1> =
		      %% Line 1756
		      apply Multiplier
			  (Timeout)
		  in  let <_cor6> =
			  %% Line 1757
			  case <> of
			    <>
				when call 'erlang':'=='
				      (Timeout0,
				       TimeToReport0) ->
				%% Line 1758
				Timeout1
			    %% Line 1759
			    <> when 'true' ->
				%% Line 1762
				apply 'time_ms_check'/1
				    (TimeToReport0)
			  end
		      in  let <_cor8> =
			      %% Line 1764
			      call 'erlang':'self'
				  ()
			  in  let <_cor9> =
				  %% Line 1764
				  call 'erlang':'=='
				      (_cor8, TCPid)
			      in  do  %% Line 1764
				      apply 'cancel_default_timetrap'/1
					  (_cor9)
				      let <_cor11> =
					  %% Line 1765
					  case Timeout1 of
					    %% Line 1766
					    <'infinity'> when 'true' ->
						%% Line 1767
						'infinity'
					    %% Line 1768
					    <_cor19> when 'true' ->
						%% Line 1769
						call 'erlang':'spawn_link'
						    ('test_server_sup', 'timetrap', [Timeout1|[_cor6|%% Line 1770
												     [Scale|[TCPid|[]]]]])
					  end
				      in  do  %% Line 1776
					      case call 'erlang':'get'
						       ('test_server_timetraps') of
						%% Line 1777
						<'undefined'> when 'true' ->
						    %% Line 1778
						    call 'erlang':'put'
							('test_server_timetraps', [{_cor11,TCPid,{_cor6,Scale}}|[]])
						%% Line 1779
						<List> when 'true' ->
						    let <List1> =
							%% Line 1780
							call 'lists':'delete'
							    ({'infinity',TCPid,{'infinity','false'}}, List)
						    in  %% Line 1781
							call 'erlang':'put'
							    ('test_server_timetraps', [{_cor11,TCPid,{_cor6,Scale}}|List1])
					      end
					      _cor11
	  ( <_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'timetrap',4}}] )
	    -| ['compiler_generated'] )
	end
'ensure_timetrap'/1 =
    %% Line 1785
    fun (_cor0) ->
	%% Line 1786
	case call 'erlang':'get'
		 ('test_server_timetraps') of
	  %% Line 1787
	  <[_cor9|_cor10]> when 'true' ->
	      %% Line 1788
	      'ok'
	  %% Line 1789
	  <_cor11> when 'true' ->
	      do  %% Line 1790
		  case call 'erlang':'get'
			   ('test_server_default_timetrap') of
		    %% Line 1791
		    <'undefined'> when 'true' ->
			'ok'
		    %% Line 1792
		    <Garbage> when 'true' ->
			do  %% Line 1793
			    call 'erlang':'erase'
				('test_server_default_timetrap')
			    %% Line 1794
			    apply 'format'/2
				([61|[61|[61|[32|[87|[65|[82|[78|[73|[78|[71|[58|[32|[103|[97|[114|[98|[97|[103|[101|[32|[105|[110|[32|[116|[101|[115|[116|[95|[115|[101|[114|[118|[101|[114|[95|[100|[101|[102|[97|[117|[108|[116|[95|[116|[105|[109|[101|[116|[114|[97|[112|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1796
																																												     [Garbage|[]])
		  end
		  let <_cor3> =
		      %% Line 1798
		      case call 'lists':'keysearch'
			       ('default_timeout', 1, _cor0) of
			%% Line 1799
			<{'value',{'default_timeout',Tmo}}> when 'true' ->
			    Tmo
			%% Line 1800
			<_cor12> when 'true' ->
			    60
		      end
		  in  do  %% Line 1802
			  apply 'format'/2
			      ([61|[61|[61|[32|[116|[101|[115|[116|[95|[115|[101|[114|[118|[101|[114|[32|[115|[101|[116|[116|[105|[110|[103|[32|[100|[101|[102|[97|[117|[108|[116|[32|[116|[105|[109|[101|[116|[114|[97|[112|[32|[111|[102|[32|[126|[112|[32|[115|[101|[99|[111|[110|[100|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1804
																																												  [_cor3|[]])
			  let <_cor5> =
			      %% Line 1805
			      apply 'seconds'/1
				  (_cor3)
			  in  let <_cor6> =
				  %% Line 1805
				  apply 'timetrap'/1
				      (_cor5)
			      in  %% Line 1805
				  call 'erlang':'put'
				      ('test_server_default_timetrap', _cor6)
	end
'cancel_default_timetrap'/1 =
    %% Line 1809
    fun (_cor0) ->
	case _cor0 of
	  <'false'> when 'true' ->
	      %% Line 1810
	      'ok'
	  %% Line 1811
	  <'true'> when 'true' ->
	      %% Line 1812
	      case call 'erlang':'get'
		       ('test_server_default_timetrap') of
		%% Line 1813
		<'undefined'> when 'true' ->
		    %% Line 1814
		    'ok'
		%% Line 1815
		<TimeTrap>
		    when call 'erlang':'is_pid'
			  (TimeTrap) ->
		    do  %% Line 1816
			apply 'timetrap_cancel'/1
			    (TimeTrap)
			do  %% Line 1817
			    call 'erlang':'erase'
				('test_server_default_timetrap')
			    do  %% Line 1818
				apply 'format'/1
				    ([61|[61|[61|[32|[116|[101|[115|[116|[95|[115|[101|[114|[118|[101|[114|[32|[99|[97|[110|[99|[101|[108|[101|[100|[32|[100|[101|[102|[97|[117|[108|[116|[32|[116|[105|[109|[101|[116|[114|[97|[112|[32|[115|[105|[110|[99|[101|[32|[97|[110|[111|[116|[104|[101|[114|[32|[116|[105|[109|[101|[116|[114|[97|[112|[32|[119|[97|[115|[32|[115|[101|[116|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
				%% Line 1820
				'ok'
		%% Line 1821
		<Garbage> when 'true' ->
		    do  %% Line 1822
			call 'erlang':'erase'
			    ('test_server_default_timetrap')
			do  %% Line 1823
			    apply 'format'/2
				([61|[61|[61|[32|[87|[65|[82|[78|[73|[78|[71|[58|[32|[103|[97|[114|[98|[97|[103|[101|[32|[105|[110|[32|[116|[101|[115|[116|[95|[115|[101|[114|[118|[101|[114|[95|[100|[101|[102|[97|[117|[108|[116|[95|[116|[105|[109|[101|[116|[114|[97|[112|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1825
																																												     [Garbage|[]])
			    %% Line 1826
			    'error'
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'cancel_default_timetrap',1}}] )
	    -| ['compiler_generated'] )
	end
'time_ms'/3 =
    %% Line 1829
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'hours',N},_cor10,_cor11> when 'true' ->
	      apply 'hours'/1
		  (N)
	  %% Line 1830
	  <{'minutes',N},_cor12,_cor13> when 'true' ->
	      apply 'minutes'/1
		  (N)
	  %% Line 1831
	  <{'seconds',N},_cor14,_cor15> when 'true' ->
	      apply 'seconds'/1
		  (N)
	  %% Line 1832
	  <{Other,_X_N},_cor16,_cor17> when 'true' ->
	      do  %% Line 1833
		  apply 'format'/2
		      ([61|[61|[61|[32|[69|[82|[82|[79|[82|[58|[32|[73|[110|[118|[97|[108|[105|[100|[32|[116|[105|[109|[101|[32|[115|[112|[101|[99|[105|[102|[105|[99|[97|[116|[105|[111|[110|[58|[32|[126|[112|[46|[32|[83|[104|[111|[117|[108|[100|[32|[98|[101|[32|[115|[101|[99|[111|[110|[100|[115|[44|[32|[109|[105|[110|[117|[116|[101|[115|[44|[32|[111|[114|[32|[104|[111|[117|[114|[115|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1834
																																																												   [Other|[]])
		  %% Line 1835
		  call 'erlang':'exit'
		      ({'invalid_time_format',Other})
	  %% Line 1836
	  <Ms,_cor18,_cor19>
	      when call 'erlang':'is_integer'
		    (Ms) ->
	      Ms
	  %% Line 1837
	  <'infinity',_cor20,_cor21> when 'true' ->
	      'infinity'
	  %% Line 1838
	  <Fun,TCPid,MultAndScale>
	      when call 'erlang':'is_function'
		    (Fun) ->
	      %% Line 1839
	      apply 'time_ms_apply'/3
		  (Fun, TCPid, MultAndScale)
	  %% Line 1840
	  <MFA = {M,F,A},TCPid,MultAndScale>
	      when try
		    let <_cor3> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor4> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor5> =
				call 'erlang':'is_list'
				    (A)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1841
	      apply 'time_ms_apply'/3
		  (MFA, TCPid, MultAndScale)
	  %% Line 1842
	  <Other,_cor22,_cor23> when 'true' ->
	      call 'erlang':'exit'
		  ({'invalid_time_format',Other})
	end
'time_ms_check'/1 =
    %% Line 1844
    fun (_cor0) ->
	case _cor0 of
	  <MFA = {M,F,A}>
	      when try
		    let <_cor1> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor2> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor3> =
				call 'erlang':'is_list'
				    (A)
			    in  let <_cor4> =
				    call 'erlang':'and'
					(_cor2, _cor3)
				in  call 'erlang':'and'
					(_cor1, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1845
	      MFA
	  %% Line 1846
	  <Fun>
	      when call 'erlang':'is_function'
		    (_cor0) ->
	      %% Line 1847
	      Fun
	  %% Line 1848
	  <Other> when 'true' ->
	      %% Line 1849
	      apply 'time_ms'/3
		  (Other, 'undefined', 'undefined')
	end
'time_ms_apply'/3 =
    %% Line 1851
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1852
	case call 'erlang':'process_info'
		 (_cor1, 'group_leader') of
	  <{_cor11,GL}> when 'true' ->
	      let <WhoAmI> =
		  %% Line 1853
		  call 'erlang':'self'
		      ()
	      in  let <T0> =
		      %% Line 1854
		      call 'erlang':'now'
			  ()
		  in  let <_cor6> =
			  %% Line 1856
			  ( fun () ->
				%% Line 1857
				apply 'user_timetrap_supervisor'/6
				    (_cor2, WhoAmI, _cor1, %% Line 1858
							   GL, %% Line 1858
							       T0, _cor0)
			    -| [{'id',{0,0,'-time_ms_apply/3-fun-0-'}}] )
		      in  let <UserTTSup> =
			      %% Line 1856
			      call 'erlang':'spawn'
				  (_cor6)
			  in  %% Line 1860
			      receive
				%% Line 1861
				<{_cor12,'infinity'}>
				    when call 'erlang':'=:='
					  (_cor12,
					   UserTTSup) ->
				    do  %% Line 1863
					apply 'save_user_timetrap'/3
					    (_cor1, UserTTSup, T0)
					%% Line 1866
					apply 'timetrap'/3
					    ('infinity', _cor1, _cor0)
			      after %% Line 1867
				    5000 ->
				do  %% Line 1868
				    call 'erlang':'exit'
					(UserTTSup, 'kill')
				    %% Line 1869
				    case <> of
				      <>
					  when call 'erlang':'/='
						(WhoAmI,
						 GL) ->
					  %% Line 1870
					  call 'erlang':'exit'
					      ({'user_timetrap_error','time_ms_apply'})
				      %% Line 1871
				      <> when 'true' ->
					  do  %% Line 1872
					      apply 'format'/2
						  ([61|[61|[61|[32|[69|[82|[82|[79|[82|[58|[32|[85|[115|[101|[114|[32|[116|[105|[109|[101|[116|[114|[97|[112|[32|[101|[120|[101|[99|[117|[116|[105|[111|[110|[32|[102|[97|[105|[108|[101|[100|[33]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
					      %% Line 1873
					      'ignore'
				    end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'user_timetrap_supervisor'/6 =
    %% Line 1877
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 1878
	    call 'erlang':'process_flag'
		('trap_exit', 'true')
	    let <_cor6> =
		%% Line 1879
		call 'erlang':'self'
		    ()
	    in  do  %% Line 1879
		    call 'erlang':'!'
			(_cor4, {_cor6,'infinity'})
		    let <MonRef> =
			%% Line 1880
			call 'erlang':'monitor'
			    ('process', _cor3)
		    in  let <UserTTSup> =
			    %% Line 1881
			    call 'erlang':'self'
				()
			in  do  %% Line 1882
				call 'erlang':'group_leader'
				    (_cor2, UserTTSup)
				let <_cor9> =
				    %% Line 1883
				    ( fun () ->
					  apply 'call_user_timetrap'/2
					      (_cor5, UserTTSup)
				      -| [{'id',{0,0,'-user_timetrap_supervisor/6-fun-0-'}}] )
				in  let <UserTT> =
					%% Line 1883
					call 'erlang':'spawn_link'
					    (_cor9)
				    in  %% Line 1884
					receive
					  %% Line 1885
					  <{_cor26,Result}>
					      when call 'erlang':'=:='
						    (_cor26,
						     UserTT) ->
					      do  %% Line 1886
						  call 'erlang':'demonitor'
						      (MonRef, ['flush'])
						  let <_cor11> =
						      %% Line 1887
						      call 'erlang':'now'
							  ()
						  in  let <_cor12> =
							  %% Line 1887
							  call 'timer':'now_diff'
							      (_cor11, _cor1)
						      in  let <_cor13> =
							      %% Line 1887
							      call 'erlang':'/'
								  (_cor12, 1000)
							  in  let <Elapsed> =
								  %% Line 1887
								  call 'erlang':'trunc'
								      (_cor13)
							      in  %% Line 1888
								  try
								      apply 'time_ms_check'/1
									  (Result)
								  of <_cor15> ->
								      %% Line 1892
								      call 'erlang':'!'
									  (_cor2, {'user_timetrap',_cor3,_cor15,_cor1,Elapsed,_cor0})
								  catch <_cor19,_cor18,_cor17> ->
								      %% Line 1896
								      call 'erlang':'!'
									  (_cor2, {'user_timetrap',_cor3,0,_cor1,Elapsed,_cor0})
					  %% Line 1898
					  <{'EXIT',_cor30,Error}>
					      when let <_cor31> =
						    call 'erlang':'=:='
							(_cor30, UserTT)
						in  let <_cor32> =
							call 'erlang':'=/='
							    (Error, 'normal')
						    in  call 'erlang':'and'
							    (_cor31, _cor32) ->
					      do  %% Line 1899
						  call 'erlang':'demonitor'
						      (MonRef, ['flush'])
						  %% Line 1900
						  call 'erlang':'!'
						      (_cor2, {'user_timetrap',_cor3,0,_cor1,{'user_timetrap_error',Error},_cor0})
					  %% Line 1902
					  <{'DOWN',_cor33,_cor34,_cor35,_cor36}>
					      when call 'erlang':'=:='
						    (_cor33,
						     MonRef) ->
					      do  %% Line 1903
						  call 'erlang':'demonitor'
						      (MonRef, ['flush'])
						  %% Line 1904
						  call 'erlang':'exit'
						      (UserTT, 'kill')
					after 'infinity' ->
					  'true'
'call_user_timetrap'/2 =
    %% Line 1907
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Func,Sup>
	      when call 'erlang':'is_function'
		    (Func) ->
	      %% Line 1908
	      try
		  apply Func
		      ()
	      of <_cor2> ->
		  let <_cor3> =
		      %% Line 1910
		      call 'erlang':'self'
			  ()
		  in  %% Line 1910
		      call 'erlang':'!'
			  (Sup, {_cor3,_cor2})
	      catch <_cor7,_cor6,_cor5> ->
		  let <_cor8> =
		      %% Line 1912
		      call 'erlang':'get_stacktrace'
			  ()
		  in  %% Line 1912
		      call 'erlang':'exit'
			  ({_cor6,_cor8})
	  %% Line 1914
	  <{M,F,A},Sup> when 'true' ->
	      %% Line 1915
	      try
		  call 'erlang':'apply'
		      (M, F, A)
	      of <_cor9> ->
		  let <_cor10> =
		      %% Line 1917
		      call 'erlang':'self'
			  ()
		  in  %% Line 1917
		      call 'erlang':'!'
			  (Sup, {_cor10,_cor9})
	      catch <_cor14,_cor13,_cor12> ->
		  let <_cor15> =
		      %% Line 1919
		      call 'erlang':'get_stacktrace'
			  ()
		  in  %% Line 1919
		      call 'erlang':'exit'
			  ({_cor13,_cor15})
	  ( <_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16})
		  -| [{'function_name',{'call_user_timetrap',2}}] )
	    -| ['compiler_generated'] )
	end
'save_user_timetrap'/3 =
    %% Line 1922
    fun (_cor2,_cor1,_cor0) ->
	let <NewUserTT> = {_cor2,%% Line 1925
		   {_cor1,_cor0}}
	in  %% Line 1926
	    case call 'erlang':'get'
		     ('test_server_user_timetrap') of
	      %% Line 1927
	      <'undefined'> when 'true' ->
		  %% Line 1928
		  call 'erlang':'put'
		      ('test_server_user_timetrap', [NewUserTT|[]])
	      %% Line 1929
	      <UserTTSups> when 'true' ->
		  %% Line 1930
		  case call 'proplists':'get_value'
			   (_cor2, UserTTSups) of
		    %% Line 1931
		    <'undefined'> when 'true' ->
			%% Line 1932
			call 'erlang':'put'
			    ('test_server_user_timetrap', %% Line 1933
							  [NewUserTT|UserTTSups])
		    %% Line 1934
		    <PrevTTSup> when 'true' ->
			do  %% Line 1936
			    apply 'remove_user_timetrap'/1
				(PrevTTSup)
			    let <_cor4> =
				%% Line 1938
				call 'proplists':'delete'
				    (_cor2, %% Line 1939
					    UserTTSups)
			    in  %% Line 1937
				call 'erlang':'put'
				    ('test_server_user_timetrap', %% Line 1938
								  [NewUserTT|_cor4])
		  end
	    end
'update_user_timetraps'/2 =
    %% Line 1943
    fun (_cor1,_cor0) ->
	%% Line 1945
	case call 'erlang':'get'
		 ('test_server_user_timetrap') of
	  %% Line 1946
	  <'undefined'> when 'true' ->
	      %% Line 1947
	      'proceed'
	  %% Line 1948
	  <UserTTs> when 'true' ->
	      %% Line 1949
	      case call 'proplists':'get_value'
		       (_cor1, UserTTs) of
		%% Line 1950
		<{_X_UserTTSup,_cor9}>
		    when call 'erlang':'=:='
			  (_cor9,
			   _cor0) ->
		    let <_cor2> =
			%% Line 1952
			call 'proplists':'delete'
			    (_cor1, UserTTs)
		    in  do  %% Line 1951
			    call 'erlang':'put'
				('test_server_user_timetrap', _cor2)
			    %% Line 1953
			    'proceed'
		%% Line 1954
		<{OtherUserTTSup,OtherStartTime}> when 'true' ->
		    %% Line 1955
		    case call 'timer':'now_diff'
			     (OtherStartTime, _cor0) of
		      %% Line 1956
		      <Diff>
			  when call 'erlang':'>='
				(Diff,
				 0) ->
			  %% Line 1957
			  'ignore'
		      %% Line 1958
		      <_cor10> when 'true' ->
			  do  %% Line 1959
			      call 'erlang':'exit'
				  (OtherUserTTSup, 'kill')
			      let <_cor3> =
				  %% Line 1961
				  call 'proplists':'delete'
				      (_cor1, UserTTs)
			      in  do  %% Line 1960
				      call 'erlang':'put'
					  ('test_server_user_timetrap', _cor3)
				      %% Line 1962
				      'proceed'
		    end
		%% Line 1964
		<'undefined'> when 'true' ->
		    %% Line 1965
		    'proceed'
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	end
'remove_user_timetrap'/1 =
    %% Line 1969
    fun (_cor0) ->
	%% Line 1970
	call 'erlang':'exit'
	    (_cor0, 'kill')
'timetrap_cancel'/1 =
    %% Line 1977
    fun (_cor0) ->
	%% Line 1978
	apply 'timetrap_cancel_one'/2
	    (_cor0, 'true')
'timetrap_cancel_one'/2 =
    %% Line 1980
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'infinity',_X_SendToServer> when 'true' ->
	      %% Line 1981
	      'ok'
	  %% Line 1982
	  <Handle,SendToServer> when 'true' ->
	      do  %% Line 1983
		  case call 'erlang':'get'
			   ('test_server_timetraps') of
		    %% Line 1984
		    <'undefined'> when 'true' ->
			'ok'
		    %% Line 1986
		    <[{_cor9,_cor10,_cor11}|[]]>
			when call 'erlang':'=:='
			      (_cor9,
			       Handle) ->
			%% Line 1987
			call 'erlang':'erase'
			    ('test_server_timetraps')
		    %% Line 1988
		    <Timers> when 'true' ->
			%% Line 1989
			case call 'lists':'keysearch'
				 (Handle, 1, Timers) of
			  %% Line 1990
			  <{'value',_cor12}> when 'true' ->
			      let <_cor2> =
				  %% Line 1992
				  call 'lists':'keydelete'
				      (Handle, 1, Timers)
			      in  %% Line 1991
				  call 'erlang':'put'
				      ('test_server_timetraps', _cor2)
			  %% Line 1993
			  <'false'>
			      when call 'erlang':'=:='
				    (SendToServer,
				     'true') ->
			      let <_cor4> =
				  %% Line 1994
				  call 'erlang':'group_leader'
				      ()
			      in  let <_cor3> =
				      %% Line 1994
				      call 'erlang':'self'
					  ()
				  in  %% Line 1994
				      call 'erlang':'!'
					  (_cor4, {'timetrap_cancel_one',Handle,_cor3})
			  %% Line 1995
			  <'false'> when 'true' ->
			      'ok'
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor5})
			    -| ['compiler_generated'] )
			end
		  end
		  %% Line 1999
		  call 'test_server_sup':'timetrap_cancel'
		      (Handle)
	end
'timetrap_cancel'/0 =
    %% Line 2005
    fun () ->
	let <_cor0> =
	    %% Line 2006
	    call 'erlang':'self'
		()
	in  %% Line 2006
	    apply 'timetrap_cancel_all'/2
		(_cor0, 'true')
'timetrap_cancel_all'/2 =
    %% Line 2008
    fun (_cor1,_cor0) ->
	do  %% Line 2009
	    case call 'erlang':'get'
		     ('test_server_timetraps') of
	      %% Line 2010
	      <'undefined'> when 'true' ->
		  'ok'
	      %% Line 2012
	      <Timers> when 'true' ->
		  %% Line 2013
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[%% Line 2014
				    {Handle,Pid,_cor15}|_cor3]>
				      when %% Line 2014
					call 'erlang':'=='
					    (Pid,
					     _cor1) ->
				      do  apply 'timetrap_cancel_one'/2
					      (Handle, 'false')
					  %% Line 2014
					  apply 'lc$^0'/1
					      (_cor3)
				  ( <[_cor2|_cor3]> when 'true' ->
					%% Line 2014
					apply 'lc$^0'/1
					    (_cor3)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (%% Line 2014
			     Timers)
		    -| ['list_comprehension'] )
	    end
	    do  %% Line 2016
		case call 'erlang':'get'
			 ('test_server_user_timetrap') of
		  %% Line 2017
		  <'undefined'> when 'true' ->
		      'ok'
		  %% Line 2019
		  <UserTTs> when 'true' ->
		      %% Line 2020
		      case call 'proplists':'get_value'
			       (_cor1, UserTTs) of
			%% Line 2021
			<{UserTTSup,_X_StartTime}> when 'true' ->
			    do  %% Line 2022
				apply 'remove_user_timetrap'/1
				    (UserTTSup)
				let <_cor8> =
				    %% Line 2024
				    call 'proplists':'delete'
					(_cor1, UserTTs)
				in  %% Line 2023
				    call 'erlang':'put'
					('test_server_user_timetrap', _cor8)
			%% Line 2025
			<'undefined'> when 'true' ->
			    'ok'
			( <_cor9> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor9})
			  -| ['compiler_generated'] )
		      end
		end
		do  %% Line 2029
		    case <> of
		      <>
			  when call 'erlang':'=:='
				(_cor0,
				 'true') ->
			  let <_cor12> =
			      %% Line 2030
			      call 'erlang':'group_leader'
				  ()
			  in  let <_cor11> =
				  %% Line 2030
				  call 'erlang':'self'
				      ()
			      in  %% Line 2030
				  call 'erlang':'!'
				      (_cor12, {'timetrap_cancel_all',_cor1,_cor11})
		      %% Line 2031
		      <> when 'true' ->
			  'ok'
		    end
		    %% Line 2034
		    'ok'
'get_timetrap_info'/0 =
    %% Line 2040
    fun () ->
	let <_cor0> =
	    %% Line 2041
	    call 'erlang':'self'
		()
	in  %% Line 2041
	    apply 'get_timetrap_info'/2
		(_cor0, 'true')
'get_timetrap_info'/2 =
    %% Line 2043
    fun (_cor1,_cor0) ->
	%% Line 2044
	case call 'erlang':'get'
		 ('test_server_timetraps') of
	  %% Line 2045
	  <'undefined'> when 'true' ->
	      %% Line 2046
	      'undefined'
	  %% Line 2047
	  <Timers> when 'true' ->
	      let <_cor8> =
		  %% Line 2048
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor6) ->
				case _cor6 of
				  <[{Handle,Pid,Info}|_cor3]>
				      when let <_cor4> =
					    %% Line 2049
					    call 'erlang':'=='
						(Pid, _cor1)
					in  let <_cor5> =
						%% Line 2049
						call 'erlang':'=/='
						    (Handle, 'infinity')
					    in  %% Line 2049
						call 'erlang':'and'
						    (_cor4, _cor5) ->
				      let <_cor7> =
					  apply 'lc$^0'/1
					      (_cor3)
				      in  ( [Info|_cor7]
					    -| ['compiler_generated'] )
				  ( <[_cor2|_cor3]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor3)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor6> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor6})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Timers)
		    -| ['list_comprehension'] )
	      in  %% Line 2048
		  case _cor8 of
		    %% Line 2050
		    <[I|_cor13]> when 'true' ->
			%% Line 2051
			I
		    %% Line 2052
		    <[]>
			when call 'erlang':'=:='
			      (_cor0,
			       'true') ->
			%% Line 2053
			apply 'tc_supervisor_req'/1
			    ({'get_timetrap_info',_cor1})
		    %% Line 2054
		    <[]> when 'true' ->
			%% Line 2055
			'undefined'
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor9})
		      -| ['compiler_generated'] )
		  end
	end
'hours'/1 =
    %% Line 2068
    fun (_cor0) ->
	let <_cor1> =
	    call 'erlang':'*'
		(_cor0, 1000)
	in  let <_cor2> =
		call 'erlang':'*'
		    (_cor1, 60)
	    in  let <_cor3> =
		    call 'erlang':'*'
			(_cor2, 60)
		in  call 'erlang':'trunc'
			(_cor3)
'minutes'/1 =
    %% Line 2069
    fun (_cor0) ->
	let <_cor1> =
	    call 'erlang':'*'
		(_cor0, 1000)
	in  let <_cor2> =
		call 'erlang':'*'
		    (_cor1, 60)
	    in  call 'erlang':'trunc'
		    (_cor2)
'seconds'/1 =
    %% Line 2070
    fun (_cor0) ->
	let <_cor1> =
	    call 'erlang':'*'
		(_cor0, 1000)
	in  call 'erlang':'trunc'
		(_cor1)
'tc_supervisor_req'/1 =
    %% Line 2077
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2078
	    call 'erlang':'group_leader'
		()
	in  let <Pid> =
		%% Line 2078
		call 'test_server_gl':'get_tc_supervisor'
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 2079
		    call 'erlang':'self'
			()
		in  do  %% Line 2079
			call 'erlang':'!'
			    (Pid, {_cor0,_cor3})
			%% Line 2080
			receive
			  %% Line 2081
			  <{_cor5,_cor6,Result}>
			      when let <_cor7> =
				    call 'erlang':'=:='
					(_cor5, Pid)
				in  let <_cor8> =
					call 'erlang':'=:='
					    (_cor6, _cor0)
				    in  call 'erlang':'and'
					    (_cor7, _cor8) ->
			      %% Line 2082
			      Result
			after %% Line 2083
			      5000 ->
			  %% Line 2084
			  call 'erlang':'error'
			      ('no_answer_from_tc_supervisor')
'tc_supervisor_req'/2 =
    %% Line 2087
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2088
	    call 'erlang':'group_leader'
		()
	in  let <Pid> =
		%% Line 2088
		call 'test_server_gl':'get_tc_supervisor'
		    (_cor2)
	    in  let <_cor4> =
		    %% Line 2089
		    call 'erlang':'self'
			()
		in  do  %% Line 2089
			call 'erlang':'!'
			    (Pid, {_cor1,_cor4,_cor0})
			%% Line 2090
			receive
			  %% Line 2091
			  <{_cor7,_cor8,Result}>
			      when let <_cor9> =
				    call 'erlang':'=:='
					(_cor7, Pid)
				in  let <_cor10> =
					call 'erlang':'=:='
					    (_cor8, _cor1)
				    in  call 'erlang':'and'
					    (_cor9, _cor10) ->
			      %% Line 2092
			      Result
			after %% Line 2093
			      5000 ->
			  %% Line 2094
			  call 'erlang':'error'
			      ('no_answer_from_tc_supervisor')
'timecall'/3 =
    %% Line 2104
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2105
	call 'test_server_sup':'timecall'
	    (_cor2, _cor1, _cor0)
'do_times'/4 =
    %% Line 2114
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <N,M,F,A>
	      when call 'erlang':'>'
		    (N,
		     0) ->
	      do  %% Line 2115
		  call 'erlang':'apply'
		      (M, F, A)
		  let <_cor4> =
		      %% Line 2116
		      call 'erlang':'-'
			  (N, 1)
		  in  %% Line 2116
		      apply 'do_times'/4
			  (_cor4, M, F, A)
	  %% Line 2117
	  <0,_cor9,_cor10,_cor11> when 'true' ->
	      %% Line 2118
	      'ok'
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'do_times',4}}] )
	    -| ['compiler_generated'] )
	end
'do_times'/2 =
    %% Line 2120
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <N,Fun>
	      when call 'erlang':'>'
		    (N,
		     0) ->
	      do  %% Line 2121
		  apply Fun
		      ()
		  let <_cor2> =
		      %% Line 2122
		      call 'erlang':'-'
			  (N, 1)
		  in  %% Line 2122
		      apply 'do_times'/2
			  (_cor2, Fun)
	  %% Line 2123
	  <0,_cor5> when 'true' ->
	      %% Line 2124
	      'ok'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'do_times',2}}] )
	    -| ['compiler_generated'] )
	end
'm_out_of_n'/3 =
    %% Line 2151
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <0,_cor11,_cor12> when 'true' ->
	      %% Line 2152
	      'ok'
	  %% Line 2153
	  <M,0,_cor13> when 'true' ->
	      %% Line 2154
	      call 'erlang':'exit'
		  ({'m_out_of_n_failed',{M,'left_to_do'}})
	  %% Line 2155
	  <M,N,Fun> when 'true' ->
	      let <_cor3> =
		  catch
		      %% Line 2156
		      apply Fun
			  ()
	      in  %% Line 2156
		  case _cor3 of
		    %% Line 2157
		    <{'EXIT',_cor14}> when 'true' ->
			let <_cor4> =
			    %% Line 2158
			    call 'erlang':'-'
				(N, 1)
			in  %% Line 2158
			    apply 'm_out_of_n'/3
				(M, _cor4, Fun)
		    %% Line 2159
		    <_X_Other> when 'true' ->
			let <_cor6> =
			    %% Line 2160
			    call 'erlang':'-'
				(M, 1)
			in  let <_cor5> =
				%% Line 2160
				call 'erlang':'-'
				    (N, 1)
			    in  %% Line 2160
				apply 'm_out_of_n'/3
				    (_cor6, _cor5, Fun)
		  end
	end
'call_crash'/3 =
    %% Line 2180
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2181
	apply 'call_crash'/4
	    ('infinity', _cor2, _cor1, _cor0)
'call_crash'/4 =
    %% Line 2182
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2183
	apply 'call_crash'/5
	    (_cor3, 'any', _cor2, _cor1, _cor0)
'call_crash'/5 =
    %% Line 2184
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2185
	call 'test_server_sup':'call_crash'
	    (_cor4, _cor3, _cor2, _cor1, _cor0)
'start_node'/3 =
    %% Line 2232
    fun (_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 2234
	    ( fun (_cor5) ->
		  %% Line 2235
		  case apply 'firstname'/1
			   (_cor5) of
		    %% Line 2236
		    <_cor20>
			when call 'erlang':'=:='
			      (_cor20,
			       _cor2) ->
			%% Line 2237
			apply 'format'/2
			    ([61|[61|[61|[32|[87|[65|[82|[78|[73|[78|[71|[58|[32|[84|[114|[121|[105|[110|[103|[32|[116|[111|[32|[115|[116|[97|[114|[116|[32|[110|[111|[100|[101|[32|[39|[126|[119|[39|[32|[119|[104|[101|[110|[32|[110|[111|[100|[101|[32|[119|[105|[116|[104|[32|[115|[97|[109|[101|[32|[102|[105|[114|[115|[116|[32|[110|[97|[109|[101|[32|[101|[120|[105|[115|[116|[115|[58|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2238
																																																											      [_cor2|[_cor5|[]]])
		    %% Line 2239
		    <_X_other> when 'true' ->
			'ok'
		  end
	      -| [{'id',{0,0,'-start_node/3-fun-0-'}}] )
	in  let <_cor3> =
		%% Line 2242
		call 'erlang':'nodes'
		    ()
	    in  do  %% Line 2233
		    call 'lists':'foreach'
			(_cor7, _cor3)
		    let <_cor9> =
			%% Line 2244
			call 'erlang':'group_leader'
			    ()
		    in  let <_cor8> =
			    %% Line 2245
			    call 'erlang':'self'
				()
			in  do  %% Line 2244
				call 'erlang':'!'
				    (_cor9, {'sync_apply',_cor8,%% Line 2246
								{'test_server_ctrl','start_node',[_cor2|[_cor1|[_cor0|[]]]]}})
				let <_cor10> =
				    %% Line 2247
				    receive
				      <{'sync_result',R}> when 'true' ->
					  R
				    after 'infinity' ->
				      'true'
				in  %% Line 2249
				    case _cor10 of
				      %% Line 2250
				      <{'ok',Node}> when 'true' ->
					  let <_cor13> =
					      %% Line 2254
					      case apply 'is_cover'/1
						       (Node) of
						%% Line 2255
						<'true'> when 'true' ->
						    %% Line 2256
						    call 'proplists':'get_value'
							('start_cover', _cor0, 'true')
						%% Line 2257
						<'false'> when 'true' ->
						    %% Line 2258
						    'false'
						( <_cor12> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor12})
						  -| ['compiler_generated'] )
					      end
					  in  do  %% Line 2261
						  call 'net_adm':'ping'
						      (Node)
						  do  %% Line 2262
						      case _cor13 of
							%% Line 2263
							<'true'> when 'true' ->
							    %% Line 2264
							    apply 'do_cover_for_node'/2
								(Node, 'start')
							%% Line 2265
							<_cor21> when 'true' ->
							    'ok'
						      end
						      %% Line 2268
						      {'ok',Node}
				      %% Line 2269
				      <{'fail',Reason}> when 'true' ->
					  apply 'fail'/1
					      (Reason)
				      %% Line 2270
				      <Error> when 'true' ->
					  Error
				    end
'firstname'/1 =
    %% Line 2273
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2274
	    call 'erlang':'atom_to_list'
		(_cor0)
	in  let <_cor2> =
		%% Line 2274
		apply 'upto'/2
		    (64, _cor1)
	    in  %% Line 2274
		call 'erlang':'list_to_atom'
		    (_cor2)
'upto'/2 =
    %% Line 2277
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <H,[_cor5|_X_T]>
	      when call 'erlang':'=:='
		    (_cor5,
		     H) ->
	      []
	  %% Line 2278
	  <H,[X|T]> when 'true' ->
	      let <_cor2> =
		  apply 'upto'/2
		      (H, T)
	      in  [X|_cor2]
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'upto',2}}] )
	    -| ['compiler_generated'] )
	end
'wait_for_node'/1 =
    %% Line 2288
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 2289
	    call 'erlang':'group_leader'
		()
	in  let <_cor1> =
		%% Line 2290
		call 'erlang':'self'
		    ()
	    in  do  %% Line 2289
		    call 'erlang':'!'
			(_cor2, {'sync_apply',_cor1,%% Line 2291
						    {'test_server_ctrl','wait_for_node',[_cor0|[]]}})
		    let <_cor3> =
			%% Line 2292
			receive
			  <{'sync_result',R}> when 'true' ->
			      R
			after 'infinity' ->
			  'true'
		    in  do  %% Line 2293
			    case _cor3 of
			      %% Line 2294
			      <'ok'> when 'true' ->
				  do  %% Line 2295
				      call 'net_adm':'ping'
					  (_cor0)
				      %% Line 2296
				      case apply 'is_cover'/1
					       (_cor0) of
					%% Line 2297
					<'true'> when 'true' ->
					    %% Line 2298
					    apply 'do_cover_for_node'/2
						(_cor0, 'start')
					%% Line 2299
					<_cor8> when 'true' ->
					    'ok'
				      end
			      %% Line 2302
			      <_cor9> when 'true' ->
				  'ok'
			    end
			    _cor3
'stop_node'/1 =
    %% Line 2313
    fun (_cor0) ->
	let <Cover> =
	    %% Line 2314
	    apply 'is_cover'/1
		(_cor0)
	in  do  %% Line 2315
		case <> of
		  <>
		      when call 'erlang':'=:='
			    (Cover,
			     'true') ->
		      apply 'do_cover_for_node'/3
			  (_cor0, 'flush', 'false')
		  %% Line 2316
		  <> when 'true' ->
		      'ok'
		end
		let <_cor3> =
		    %% Line 2318
		    call 'erlang':'group_leader'
			()
		in  let <_cor2> =
			%% Line 2318
			call 'erlang':'self'
			    ()
		    in  do  %% Line 2318
			    call 'erlang':'!'
				(_cor3, {'sync_apply',_cor2,{'test_server_ctrl','stop_node',[_cor0|[]]}})
			    let <_cor4> =
				%% Line 2319
				receive
				  <{'sync_result',R}> when 'true' ->
				      R
				after 'infinity' ->
				  'true'
			    in  %% Line 2320
				case _cor4 of
				  %% Line 2321
				  <'ok'> when 'true' ->
				      do  %% Line 2322
					  call 'erlang':'monitor_node'
					      (_cor0, 'true')
					  do  %% Line 2323
					      call 'slave':'stop'
						  (_cor0)
					      %% Line 2324
					      receive
						%% Line 2325
						<{'nodedown',_cor9}>
						    when call 'erlang':'=:='
							  (_cor9,
							   _cor0) ->
						    do  %% Line 2326
							apply 'format'/3
							    ('minor', [83|[116|[111|[112|[112|[101|[100|[32|[115|[108|[97|[118|[101|[32|[110|[111|[100|[101|[58|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]], [_cor0|[]])
							do  %% Line 2327
							    apply 'format'/3
								('major', [61|[110|[111|[100|[101|[95|[115|[116|[111|[112|[32|[32|[32|[32|[32|[126|[119]]]]]]]]]]]]]]]]], [_cor0|[]])
							    do  %% Line 2328
								case <> of
								  <>
								      when call 'erlang':'=:='
									    (Cover,
									     'true') ->
								      apply 'do_cover_for_node'/3
									  (_cor0, 'stop', 'false')
								  %% Line 2329
								  <> when 'true' ->
								      'ok'
								end
								%% Line 2331
								'true'
					      after %% Line 2332
						    30000 ->
						do  %% Line 2333
						    apply 'format'/2
							([61|[61|[61|[32|[87|[65|[82|[78|[73|[78|[71|[58|[32|[78|[111|[100|[101|[32|[126|[119|[32|[100|[111|[101|[115|[32|[110|[111|[116|[32|[115|[101|[101|[109|[32|[116|[111|[32|[116|[101|[114|[109|[105|[110|[97|[116|[101|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2334
																																								    [_cor0|[]])
						    do  %% Line 2335
							call 'erlang':'monitor_node'
							    (_cor0, 'false')
							do  %% Line 2336
							    receive
							      <{'nodedown',_cor10}>
								  when call 'erlang':'=:='
									(_cor10,
									 _cor0) ->
								  'ok'
							    after 0 ->
							      'ok'
							    %% Line 2337
							    'false'
				  %% Line 2339
				  <{'error',_X_Reason}> when 'true' ->
				      do  %% Line 2343
					  apply 'format'/2
					      ([61|[61|[61|[32|[87|[65|[82|[78|[73|[78|[71|[58|[32|[65|[116|[116|[101|[109|[112|[116|[32|[116|[111|[32|[115|[116|[111|[112|[32|[97|[32|[110|[111|[110|[101|[120|[105|[115|[116|[105|[110|[103|[32|[115|[108|[97|[118|[101|[110|[111|[100|[101|[32|[40|[126|[119|[41|[126|[110|[61|[61|[61|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[84|[114|[121|[105|[110|[103|[32|[116|[111|[32|[107|[105|[108|[108|[32|[105|[116|[32|[97|[110|[121|[119|[97|[121|[33|[33|[33]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2345
																																																																										   [_cor0|[]])
					  %% Line 2346
					  case call 'net_adm':'ping'
						   (_cor0) of
					    %% Line 2347
					    <'pong'> when 'true' ->
						do  %% Line 2348
						    call 'erlang':'monitor_node'
							(_cor0, 'true')
						    do  %% Line 2349
							call 'slave':'stop'
							    (_cor0)
							%% Line 2350
							receive
							  %% Line 2351
							  <{'nodedown',_cor11}>
							      when call 'erlang':'=:='
								    (_cor11,
								     _cor0) ->
							      do  %% Line 2352
								  apply 'format'/3
								      ('minor', [83|[116|[111|[112|[112|[101|[100|[32|[115|[108|[97|[118|[101|[32|[110|[111|[100|[101|[58|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]], [_cor0|[]])
								  do  %% Line 2353
								      apply 'format'/3
									  ('major', [61|[110|[111|[100|[101|[95|[115|[116|[111|[112|[32|[32|[32|[32|[32|[126|[119]]]]]]]]]]]]]]]]], [_cor0|[]])
								      do  %% Line 2354
									  case <> of
									    <>
										when call 'erlang':'=:='
										      (Cover,
										       'true') ->
										apply 'do_cover_for_node'/3
										    (_cor0, 'stop', 'false')
									    %% Line 2355
									    <> when 'true' ->
										'ok'
									  end
									  %% Line 2357
									  'true'
							after %% Line 2358
							      30000 ->
							  do  %% Line 2359
							      apply 'format'/2
								  ([61|[61|[61|[32|[87|[65|[82|[78|[73|[78|[71|[58|[32|[78|[111|[100|[101|[32|[126|[119|[32|[100|[111|[101|[115|[32|[110|[111|[116|[32|[115|[101|[101|[109|[32|[116|[111|[32|[116|[101|[114|[109|[105|[110|[97|[116|[101|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2360
																																									      [_cor0|[]])
							      do  %% Line 2361
								  call 'erlang':'monitor_node'
								      (_cor0, 'false')
								  do  %% Line 2362
								      receive
									<{'nodedown',_cor12}>
									    when call 'erlang':'=:='
										  (_cor12,
										   _cor0) ->
									    'ok'
								      after 0 ->
									'ok'
								      %% Line 2363
								      'false'
					    %% Line 2365
					    <'pang'> when 'true' ->
						do  %% Line 2366
						    case <> of
						      <>
							  when call 'erlang':'=:='
								(Cover,
								 'true') ->
							  apply 'do_cover_for_node'/3
							      (_cor0, 'stop', 'false')
						      %% Line 2367
						      <> when 'true' ->
							  'ok'
						    end
						    %% Line 2369
						    'false'
					    ( <_cor6> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor6})
					      -| ['compiler_generated'] )
					  end
				  ( <_cor7> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor7})
				    -| ['compiler_generated'] )
				end
'is_release_available'/1 =
    %% Line 2380
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 2381
	    call 'erlang':'group_leader'
		()
	in  let <_cor1> =
		%% Line 2382
		call 'erlang':'self'
		    ()
	    in  do  %% Line 2381
		    call 'erlang':'!'
			(_cor2, {'sync_apply',_cor1,%% Line 2383
						    {'test_server_ctrl','is_release_available',[_cor0|[]]}})
		    %% Line 2384
		    receive
		      <{'sync_result',R}> when 'true' ->
			  R
		    after 'infinity' ->
		      'true'
'run_on_shielded_node'/2 =
    %% Line 2409
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Fun,CArgs>
	      when try
		    let <_cor2> =
			call 'erlang':'is_function'
			    (Fun)
		    in  let <_cor3> =
			    call 'erlang':'is_list'
				(CArgs)
			in  call 'erlang':'and'
				(_cor2, _cor3)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2410
	      case call 'erlang':'now'
		       () of
		<{A,B,C}> when 'true' ->
		    let <_cor10> =
			%% Line 2411
			call 'erlang':'integer_to_list'
			    (A)
		    in  let <_cor7> =
			    %% Line 2411
			    call 'erlang':'integer_to_list'
				(B)
			in  let <_cor5> =
				%% Line 2412
				call 'erlang':'integer_to_list'
				    (C)
			    in  let <_cor6> =
				    %% Line 2412
				    [45|_cor5]
				in  let <_cor8> =
					%% Line 2412
					call 'erlang':'++'
					    (_cor7, _cor6)
				    in  let <_cor9> =
					    %% Line 2411
					    [45|_cor8]
					in  let <_cor11> =
						%% Line 2411
						call 'erlang':'++'
						    (_cor10, _cor9)
					    in  let <Name> =
						    %% Line 2411
						    call 'erlang':'++'
							([115|[104|[105|[101|[108|[100|[101|[100|[95|[110|[111|[100|[101|[45]]]]]]]]]]]]]], _cor11)
						in  let <_cor13> =
							%% Line 2413
							call 'erlang':'++'
							    ([45|[104|[105|[100|[100|[101|[110|[32]]]]]]]], CArgs)
						    in  let <_cor15> =
							    %% Line 2413
							    case apply 'start_node'/3
								     (Name, 'slave', [{'args',_cor13}|[]]) of
							      %% Line 2414
							      <{'ok',N}> when 'true' ->
								  N
							      %% Line 2415
							      <Err> when 'true' ->
								  apply 'fail'/1
								      ({'failed_to_start_shielded_node',Err})
							    end
							in  let <Master> =
								%% Line 2417
								call 'erlang':'self'
								    ()
							    in  let <Ref> =
								    %% Line 2418
								    call 'erlang':'make_ref'
									()
								in  let <_cor20> =
									%% Line 2420
									( fun () ->
									      do  %% Line 2421
										  apply 'start_job_proxy'/0
										      ()
										  do  %% Line 2422
										      receive
											%% Line 2423
											<_cor25>
											    when call 'erlang':'=:='
												  (_cor25,
												   Ref) ->
											    let <_cor19> =
												%% Line 2424
												apply Fun
												    ()
											    in  %% Line 2424
												call 'erlang':'!'
												    (Master, {Ref,_cor19})
										      after 'infinity' ->
											'ok'
										      %% Line 2426
										      receive
											
										      after 'infinity' ->
											'infinity'
									  -| [{'id',{0,0,'-run_on_shielded_node/2-fun-0-'}}] )
								    in  let <Slave> =
									    %% Line 2419
									    call 'erlang':'spawn'
										(_cor15, _cor20)
									in  let <MRef> =
										%% Line 2428
										call 'erlang':'monitor'
										    ('process', Slave)
									    in  do  %% Line 2429
										    call 'erlang':'!'
											(Slave, Ref)
										    %% Line 2430
										    receive
										      %% Line 2431
										      <{'DOWN',_cor26,_cor27,_cor28,Info}>
											  when call 'erlang':'=:='
												(_cor26,
												 MRef) ->
											  do  %% Line 2432
											      apply 'stop_node'/1
												  (_cor15)
											      %% Line 2433
											      apply 'fail'/1
												  (Info)
										      %% Line 2434
										      <{_cor29,Res}>
											  when call 'erlang':'=:='
												(_cor29,
												 Ref) ->
											  do  %% Line 2435
											      apply 'stop_node'/1
												  (_cor15)
											      %% Line 2436
											      receive
												%% Line 2437
												<{'DOWN',_cor30,_cor31,_cor32,_cor33}>
												    when call 'erlang':'=:='
													  (_cor30,
													   MRef) ->
												    %% Line 2438
												    Res
											      after 'infinity' ->
												'true'
										    after 'infinity' ->
										      'true'
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23})
		  -| [{'function_name',{'run_on_shielded_node',2}}] )
	    -| ['compiler_generated'] )
	end
'is_shielded'/1 =
    %% Line 2443
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 2444
	    apply 'cast_to_list'/1
		(_cor0)
	in  let <_cor1> =
		%% Line 2444
		call 'erlang':'node'
		    ()
	    in  let <_cor2> =
		    %% Line 2444
		    call 'erlang':'atom_to_list'
			(_cor1)
		in  %% Line 2444
		    case <_cor3,_cor2> of
		      %% Line 2445
		      <[115|[104|[105|[101|[108|[100|[101|[100|[95|[110|[111|[100|[101|_cor6]]]]]]]]]]]]],_cor7> when 'true' ->
			  'true'
		      %% Line 2446
		      <_cor8,[115|[104|[105|[101|[108|[100|[101|[100|[95|[110|[111|[100|[101|_cor9]]]]]]]]]]]]]> when 'true' ->
			  'true'
		      %% Line 2447
		      <_fol767,_fol768> when 'true' ->
			  'false'
		    end
'same_version'/1 =
    %% Line 2450
    fun (_cor0) ->
	let <ThisVersion> =
	    %% Line 2451
	    call 'erlang':'system_info'
		('version')
	in  let <OtherVersion> =
		%% Line 2452
		call 'rpc':'call'
		    (_cor0, 'erlang', 'system_info', ['version'])
	    in  %% Line 2453
		call 'erlang':'=:='
		    (ThisVersion, OtherVersion)
'is_cover'/1 =
    %% Line 2455
    fun (_cor0) ->
	%% Line 2456
	case apply 'is_cover'/0
		 () of
	  %% Line 2457
	  <'true'> when 'true' ->
	      %% Line 2458
	      ( case apply 'is_shielded'/1
			 (_cor0) of
		  ( <'false'> when 'true' ->
			apply 'same_version'/1
			    (_cor0)
		    -| ['compiler_generated'] )
		  ( <'true'> when 'true' ->
			'false'
		    -| ['compiler_generated'] )
		  ( <_cor_variable> when 'true' ->
			call 'erlang':'error'
			    ('badarg')
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 2459
	  <'false'> when 'true' ->
	      %% Line 2460
	      'false'
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'temp_name'/1 =
    %% Line 2470
    fun (_cor0) ->
	%% Line 2471
	case call 'erlang':'now'
		 () of
	  <{A,B,C}> when 'true' ->
	      let <_cor2> =
		  %% Line 2472
		  call 'erlang':'bxor'
		      (A, B)
	      in  let <RandomNum> =
		      %% Line 2472
		      call 'erlang':'bxor'
			  (_cor2, C)
		  in  let <_cor4> =
			  %% Line 2473
			  call 'erlang':'integer_to_list'
			      (RandomNum)
		      in  let <RandomName> =
			      %% Line 2473
			      call 'erlang':'++'
				  (_cor0, _cor4)
			  in  let <_cor6> =
				  %% Line 2474
				  call 'filename':'dirname'
				      (_cor0)
			      in  %% Line 2474
				  case call 'file':'list_dir'
					   (_cor6) of
				    <{'ok',Files}> when 'true' ->
					%% Line 2475
					case call 'lists':'member'
						 (RandomName, Files) of
					  %% Line 2476
					  <'true'> when 'true' ->
					      %% Line 2478
					      apply 'temp_name'/1
						  (_cor0)
					  %% Line 2479
					  <'false'> when 'true' ->
					      %% Line 2480
					      RandomName
					  ( <_cor8> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor8})
					    -| ['compiler_generated'] )
					end
				    ( <_cor7> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor7})
				      -| ['compiler_generated'] )
				  end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'app_test'/1 =
    %% Line 2486
    fun (_cor0) ->
	%% Line 2487
	apply 'app_test'/2
	    (_cor0, 'pedantic')
'app_test'/2 =
    %% Line 2488
    fun (_cor1,_cor0) ->
	%% Line 2489
	call 'test_server_sup':'app_test'
	    (_cor1, _cor0)
'appup_test'/1 =
    %% Line 2494
    fun (_cor0) ->
	%% Line 2495
	call 'test_server_sup':'appup_test'
	    (_cor0)
'is_native'/1 =
    %% Line 2502
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 2503
		call _cor0:'module_info'
		    ('native_addresses')
	in  %% Line 2503
	    case _cor1 of
	      %% Line 2504
	      <[_cor4|_cor5]> when 'true' ->
		  'true'
	      %% Line 2505
	      <_X_Other> when 'true' ->
		  'false'
	    end
'comment'/1 =
    %% Line 2519
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2520
	    call 'erlang':'group_leader'
		()
	in  do  %% Line 2520
		call 'erlang':'!'
		    (_cor1, {'comment',_cor0})
		%% Line 2521
		'ok'
'read_comment'/0 =
    %% Line 2528
    fun () ->
	%% Line 2529
	apply 'tc_supervisor_req'/1
	    ('read_comment')
'make_priv_dir'/0 =
    %% Line 2536
    fun () ->
	%% Line 2537
	apply 'tc_supervisor_req'/1
	    ('make_priv_dir')
'os_type'/0 =
    %% Line 2544
    fun () ->
	%% Line 2545
	call 'os':'type'
	    ()
'is_cover'/0 =
    %% Line 2552
    fun () ->
	%% Line 2553
	case call 'erlang':'whereis'
		 ('cover_server') of
	  %% Line 2554
	  <'undefined'> when 'true' ->
	      'false'
	  %% Line 2555
	  <_cor1> when 'true' ->
	      'true'
	end
'is_debug'/0 =
    %% Line 2562
    fun () ->
	let <_cor0> =
	    catch
		%% Line 2563
		call 'erlang':'system_info'
		    ('debug_compiled')
	in  %% Line 2563
	    case _cor0 of
	      %% Line 2564
	      <{'EXIT',_cor6}> when 'true' ->
		  let <_cor1> =
		      %% Line 2565
		      call 'erlang':'system_info'
			  ('system_version')
		  in  %% Line 2565
		      case call 'string':'str'
			       (_cor1, [100|[101|[98|[117|[103]]]]]) of
			%% Line 2566
			<Int>
			    when let <_cor2> =
				  call 'erlang':'is_integer'
				      (Int)
			      in  let <_cor3> =
				      call 'erlang':'>'
					  (Int, 0)
				  in  call 'erlang':'and'
					  (_cor2, _cor3) ->
			    'true'
			%% Line 2567
			<_cor7> when 'true' ->
			    'false'
		      end
	      %% Line 2569
	      <Res> when 'true' ->
		  %% Line 2570
		  Res
	    end
'has_lock_checking'/0 =
    %% Line 2577
    fun () ->
	let <_cor0> =
	    catch
		%% Line 2578
		call 'erlang':'system_info'
		    ('lock_checking')
	in  %% Line 2578
	    case _cor0 of
	      %% Line 2579
	      <{'EXIT',_cor2}> when 'true' ->
		  'false'
	      %% Line 2580
	      <Res> when 'true' ->
		  Res
	    end
'has_superfluous_schedulers'/0 =
    %% Line 2588
    fun () ->
	let <_cor2> =
	    catch
		let <_cor1> =
		    %% Line 2589
		    call 'erlang':'system_info'
			('schedulers')
		in  let <_cor0> =
			%% Line 2590
			call 'erlang':'system_info'
			    ('logical_processors')
		    in  %% Line 2589
			{_cor1,_cor0}
	in  %% Line 2589
	    case _cor2 of
	      %% Line 2591
	      <{S,P}>
		  when try
			let <_cor3> =
			    call 'erlang':'is_integer'
				(S)
			in  let <_cor4> =
				call 'erlang':'is_integer'
				    (P)
			    in  let <_cor5> =
				    call 'erlang':'>'
					(S, P)
				in  let <_cor6> =
					call 'erlang':'and'
					    (_cor4, _cor5)
				    in  call 'erlang':'and'
					    (_cor3, _cor6)
		    of <Try> ->
			Try
		    catch <T,R> ->
			'false' ->
		  'true'
	      %% Line 2592
	      <_cor8> when 'true' ->
		  'false'
	    end
'is_commercial'/0 =
    %% Line 2602
    fun () ->
	let <_cor0> =
	    %% Line 2603
	    call 'erlang':'system_info'
		('system_version')
	in  %% Line 2603
	    case call 'string':'str'
		     (_cor0, [115|[111|[117|[114|[99|[101]]]]]]) of
	      %% Line 2604
	      <Int>
		  when let <_cor1> =
			call 'erlang':'is_integer'
			    (Int)
		    in  let <_cor2> =
			    call 'erlang':'>'
				(Int, 0)
			in  call 'erlang':'and'
				(_cor1, _cor2) ->
		  'false'
	      %% Line 2605
	      <_cor4> when 'true' ->
		  'true'
	    end
'purify_is_running'/0 =
    %% Line 2616
    fun () ->
	let <_cor0> =
	    catch
		%% Line 2617
		call 'erlang':'system_info'
		    ({'error_checker','running'})
	in  %% Line 2617
	    case _cor0 of
	      %% Line 2618
	      <{'EXIT',_cor2}> when 'true' ->
		  'false'
	      %% Line 2619
	      <Res> when 'true' ->
		  Res
	    end
'purify_new_leaks'/0 =
    %% Line 2629
    fun () ->
	let <_cor0> =
	    catch
		%% Line 2630
		call 'erlang':'system_info'
		    ({'error_checker','memory'})
	in  %% Line 2630
	    case _cor0 of
	      %% Line 2631
	      <{'EXIT',_cor2}> when 'true' ->
		  'false'
	      %% Line 2632
	      <Leaked>
		  when call 'erlang':'is_integer'
			(_cor0) ->
		  Leaked
	      ( <_cor1> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor1})
		-| ['compiler_generated'] )
	    end
'purify_new_fds_inuse'/0 =
    %% Line 2642
    fun () ->
	let <_cor0> =
	    catch
		%% Line 2643
		call 'erlang':'system_info'
		    ({'error_checker','fd'})
	in  %% Line 2643
	    case _cor0 of
	      %% Line 2644
	      <{'EXIT',_cor2}> when 'true' ->
		  'false'
	      %% Line 2645
	      <Inuse>
		  when call 'erlang':'is_integer'
			(_cor0) ->
		  Inuse
	      ( <_cor1> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor1})
		-| ['compiler_generated'] )
	    end
'purify_format'/2 =
    %% Line 2654
    fun (_cor1,_cor0) ->
	do  catch
		let <_cor2> =
		    %% Line 2655
		    call 'io_lib':'format'
			(_cor1, _cor0)
		in  %% Line 2655
		    call 'erlang':'system_info'
			({'error_checker',_cor2})
	    %% Line 2656
	    'ok'
'do_sync_apply'/3 =
    %% Line 2664
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Proxy,From,{M,F,A}> when 'true' ->
	      let <Result> =
		  %% Line 2665
		  call 'erlang':'apply'
		      (M, F, A)
	      in  %% Line 2666
		  case <> of
		    <>
			when call 'erlang':'is_pid'
			      (Proxy) ->
			call 'erlang':'!'
			    (Proxy, {'sync_result_proxy',From,Result})
		    %% Line 2667
		    <> when 'true' ->
			call 'erlang':'!'
			    (From, {'sync_result',Result})
		  end
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'do_sync_apply',3}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('test_server')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('test_server', _cor0)
end