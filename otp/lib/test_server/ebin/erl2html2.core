module 'erl2html2' ['convert'/2,
		    'convert'/3,
		    'module_info'/0,
		    'module_info'/1]
    attributes []
'convert'/2 =
    %% Line 27
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_X_Dest> when 'true' ->
	      %% Line 28
	      'ok'
	  %% Line 29
	  <File,Dest> when 'true' ->
	      let <Encoding> =
		  %% Line 39
		  apply 'encoding'/1
		      (File)
	      in  let <_cor4> =
		      %% Line 46
		      apply 'html_encoding'/1
			  (Encoding)
		  in  let <_cor5> =
			  %% Line 47
			  apply 'to_raw_list'/2
			      (File, Encoding)
		      in  let <Header> =
			      %% Line 40
			      [[60|[33|[68|[79|[67|[84|[89|[80|[69|[32|[72|[84|[77|[76|[32|[80|[85|[66|[76|[73|[67|[32|[34|[45|[47|[47|[87|[51|[67|[47|[47|[68|[84|[68|[32|[72|[84|[77|[76|[32|[51|[46|[50|[32|[70|[105|[110|[97|[108|[47|[47|[69|[78|[34|[62|[10|[60|[33|[45|[45|[32|[97|[117|[116|[111|[103|[101|[110|[101|[114|[97|[116|[101|[100|[32|[98|[121|[32|[39]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 42
																																																							 [[101|[114|[108|[50|[104|[116|[109|[108|[50]]]]]]]]]|[[39|[46|[32|[45|[45|[62|[10|[60|[104|[116|[109|[108|[62|[10|[60|[104|[101|[97|[100|[62|[10|[60|[109|[101|[116|[97|[32|[104|[116|[116|[112|[45|[101|[113|[117|[105|[118|[61|[34|[67|[111|[110|[116|[101|[110|[116|[45|[84|[121|[112|[101|[34|[32|[99|[111|[110|[116|[101|[110|[116|[61|[34|[116|[101|[120|[116|[47|[104|[116|[109|[108|[59|[99|[104|[97|[114|[115|[101|[116|[61]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 46
																																																																																																																					      [_cor4|[[34|[47|[62|[10|[60|[116|[105|[116|[108|[101|[62]]]]]]]]]]]|%% Line 47
																																																																																																																														  [_cor5|[[60|[47|[116|[105|[116|[108|[101|[62|[10|[60|[47|[104|[101|[97|[100|[62|[10|[10|[60|[98|[111|[100|[121|[32|[98|[103|[99|[111|[108|[111|[114|[61|[34|[119|[104|[105|[116|[101|[34|[32|[116|[101|[120|[116|[61|[34|[98|[108|[97|[99|[107|[34|[32|[108|[105|[110|[107|[61|[34|[98|[108|[117|[101|[34|[32|[118|[108|[105|[110|[107|[61|[34|[112|[117|[114|[112|[108|[101|[34|[32|[97|[108|[105|[110|[107|[61|[34|[114|[101|[100|[34|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
			  in  %% Line 51
			      apply 'convert'/3
				  (File, Dest, Header)
	end
'convert'/3 =
    %% Line 54
    fun (_cor2,_cor1,_cor0) ->
	%% Line 56
	case apply 'parse_file'/1
		 (_cor2) of
	  %% Line 57
	  <{'ok',Functions}> when 'true' ->
	      %% Line 60
	      case call 'file':'open'
		       (_cor2, ['raw'|[{'read_ahead',10000}]]) of
		%% Line 61
		<{'ok',SFd}> when 'true' ->
		    %% Line 62
		    case call 'file':'open'
			     (_cor1, ['write'|['raw']]) of
		      %% Line 63
		      <{'ok',DFd}> when 'true' ->
			  do  %% Line 64
			      call 'file':'write'
				  (DFd, [_cor0|[[60|[112|[114|[101|[62|[10]]]]]]]])
			      let <_cor3> =
				  %% Line 65
				  apply 'encoding'/1
				      (_cor2)
			      in  let <_X_Lines> =
				      %% Line 65
				      apply 'build_html'/4
					  (SFd, DFd, _cor3, Functions)
				  in  let <_cor5> =
					  %% Line 66
					  apply 'footer'/0
					      ()
				      in  do  %% Line 66
					      call 'file':'write'
						  (DFd, [[60|[47|[112|[114|[101|[62|[10]]]]]]]|[_cor5|%% Line 67
												      [[60|[47|[98|[111|[100|[121|[62|[10|[60|[47|[104|[116|[109|[108|[62|[10]]]]]]]]]]]]]]]]]]])
					      do  %% Line 71
						  call 'file':'close'
						      (SFd)
						  do  %% Line 72
						      call 'file':'close'
							  (DFd)
						      %% Line 73
						      'ok'
		      %% Line 74
		      <Error> when 'true' ->
			  %% Line 75
			  Error
		    end
		%% Line 77
		<Error> when 'true' ->
		    %% Line 78
		    Error
	      end
	  %% Line 80
	  <Error> when 'true' ->
	      %% Line 81
	      Error
	end
'parse_file'/1 =
    %% Line 91
    fun (_cor0) ->
	%% Line 92
	case call 'epp':'open'
		 (_cor0, [], []) of
	  %% Line 93
	  <{'ok',Epp}> when 'true' ->
	      let <Forms> =
		  %% Line 94
		  apply 'parse_file'/3
		      (Epp, _cor0, 'false')
	      in  do  %% Line 95
		      call 'epp':'close'
			  (Epp)
		      %% Line 96
		      {'ok',Forms}
	  %% Line 97
	  <{'error',E}> when 'true' ->
	      %% Line 98
	      {'error',E}
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'parse_file'/3 =
    %% Line 102
    fun (_cor2,_cor1,_cor0) ->
	%% Line 103
	case call 'epp':'parse_erl_form'
		 (_cor2) of
	  %% Line 104
	  <{'ok',Form}> when 'true' ->
	      %% Line 105
	      case Form of
		%% Line 106
		<{'attribute',_cor16,'file',{_cor17,_cor18}}>
		    when call 'erlang':'=:='
			  (_cor17,
			   _cor1) ->
		    %% Line 107
		    apply 'parse_file'/3
			(_cor2, _cor1, 'true')
		%% Line 108
		<{'attribute',_cor19,'file',{_X_OtherFile,_cor20}}> when 'true' ->
		    %% Line 109
		    apply 'parse_file'/3
			(_cor2, _cor1, 'false')
		%% Line 110
		<{'function',L,F,A,[_cor21|C]}>
		    when call 'erlang':'=:='
			  (_cor0,
			   'true') ->
		    let <_cor7> =
			%% Line 111
			( letrec
			      'lc$^0'/1 =
				  fun (_cor5) ->
				      case _cor5 of
					<[{'clause',CL,_cor22,_cor23,_cor24}|_cor4]> when 'true' ->
					    let <_cor6> =
						apply 'lc$^0'/1
						    (_cor4)
					    in  ( [{'clause',CL}|_cor6]
						  -| ['compiler_generated'] )
					( <[_cor3|_cor4]> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor4)
					  -| ['compiler_generated'] )
					<[]> when 'true' ->
					    []
					( <_cor5> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor5})
						-| [{'function_name',{'lc$^0',1}}] )
					  -| ['compiler_generated'] )
				      end
			  in  apply 'lc$^0'/1
				  (C)
			  -| ['list_comprehension'] )
		    in  let <_cor10> =
			    %% Line 112
			    call 'erlang':'atom_to_list'
				(F)
			in  let <_cor9> =
				%% Line 113
				apply 'parse_file'/3
				    (_cor2, _cor1, 'true')
			    in  %% Line 112
				[{_cor10,A,L}|call 'erlang':'++'
						  (_cor7, _cor9)]
		%% Line 114
		<_cor25> when 'true' ->
		    %% Line 115
		    apply 'parse_file'/3
			(_cor2, _cor1, _cor0)
	      end
	  %% Line 117
	  <{'error',_X_E}> when 'true' ->
	      %% Line 118
	      apply 'parse_file'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 119
	  <{'eof',_X_Location}> when 'true' ->
	      %% Line 120
	      []
	  ( <_cor12> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor12})
	    -| ['compiler_generated'] )
	end
'build_html'/4 =
    %% Line 125
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 126
	    call 'file':'read_line'
		(_cor3)
	in  %% Line 126
	    apply 'build_html'/7
		(_cor3, _cor2, _cor1, _cor4, 1, _cor0, 'false')
'build_html'/7 =
    %% Line 128
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <SFd,DFd,Encoding,{'ok',Str},L,[{F,A,_cor23}|Functions],_X_IsFuncDef>
	      when call 'erlang':'=:='
		    (_cor23,
		     L) ->
	      let <_cor7> =
		  %% Line 129
		  call 'erlang':'integer_to_list'
		      (A)
	      in  let <_cor8> =
		      %% Line 129
		      [45|_cor7]
		  in  let <_cor9> =
			  %% Line 129
			  call 'erlang':'++'
			      (F, _cor8)
		      in  let <FALink> =
			      %% Line 129
			      call 'test_server_ctrl':'uri_encode'
				  (_cor9, 'utf8')
			  in  let <_cor11> =
				  %% Line 130
				  apply 'to_raw_list'/2
				      (FALink, Encoding)
			      in  do  %% Line 130
				      call 'file':'write'
					  (DFd, [[60|[97|[32|[110|[97|[109|[101|[61|[34]]]]]]]]]|[_cor11|[[34|[47|[62]]]]]])
				      %% Line 131
				      apply 'build_html'/7
					  (SFd, DFd, Encoding, {'ok',Str}, L, Functions, 'true')
	  %% Line 132
	  <SFd,DFd,Encoding,{'ok',Str},L,[{'clause',_cor24}|Functions],_X_IsFuncDef>
	      when call 'erlang':'=:='
		    (_cor24,
		     L) ->
	      %% Line 133
	      apply 'build_html'/7
		  (SFd, DFd, Encoding, {'ok',Str}, L, Functions, 'true')
	  %% Line 134
	  <SFd,DFd,Encoding,{'ok',Str},L,Functions,IsFuncDef> when 'true' ->
	      let <LStr> =
		  %% Line 135
		  apply 'line_number'/1
		      (L)
	      in  let <Str1> =
		      %% Line 136
		      apply 'line'/2
			  (Str, IsFuncDef)
		  in  do  %% Line 137
			  call 'file':'write'
			      (DFd, [LStr|[Str1|[]]])
			  let <_cor15> =
			      %% Line 138
			      call 'file':'read_line'
				  (SFd)
			  in  let <_cor14> =
				  %% Line 138
				  call 'erlang':'+'
				      (L, 1)
			      in  %% Line 138
				  apply 'build_html'/7
				      (SFd, DFd, Encoding, _cor15, _cor14, Functions, 'false')
	  %% Line 139
	  <_X_SFd,_X_DFd,_X_Encoding,'eof',L,_X_Functions,_X_IsFuncDef> when 'true' ->
	      %% Line 140
	      L
	  ( <_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21,_cor20,_cor19,_cor18,_cor17,_cor16})
		  -| [{'function_name',{'build_html',7}}] )
	    -| ['compiler_generated'] )
	end
'line_number'/1 =
    %% Line 142
    fun (_cor0) ->
	let <LStr> =
	    %% Line 143
	    call 'erlang':'integer_to_list'
		(_cor0)
	in  let <_cor4> =
		%% Line 145
		case call 'erlang':'length'
			 (LStr) of
		  %% Line 146
		  <Length>
		      when call 'erlang':'<'
			    (Length,
			     5) ->
		      let <_cor2> =
			  %% Line 147
			  call 'erlang':'-'
			      (5, Length)
		      in  %% Line 147
			  call 'lists':'duplicate'
			      (_cor2, 32)
		  %% Line 148
		  <_cor7> when 'true' ->
		      %% Line 149
		      []
		end
	    in  %% Line 151
		[[60|[97|[32|[110|[97|[109|[101|[61|[34]]]]]]]]]|[LStr|[[34|[47|[62]]]|[_cor4|[LStr|[[58|[32]]]]]]]]
'line'/2 =
    %% Line 153
    fun (_cor1,_cor0) ->
	let <Str1> =
	    %% Line 154
	    apply 'htmlize'/1
		(_cor1)
	in  %% Line 155
	    apply 'possibly_enhance'/2
		(Str1, _cor0)
'htmlize'/1 =
    %% Line 159
    fun (_cor0) ->
	case _cor0 of
	  <[60|Str]> when 'true' ->
	      let <_cor1> =
		  %% Line 160
		  apply 'htmlize'/1
		      (Str)
	      in  %% Line 160
		  [38|[108|[116|[59|_cor1]]]]
	  %% Line 161
	  <[62|Str]> when 'true' ->
	      let <_cor2> =
		  %% Line 162
		  apply 'htmlize'/1
		      (Str)
	      in  %% Line 162
		  [38|[103|[116|[59|_cor2]]]]
	  %% Line 163
	  <[38|Str]> when 'true' ->
	      let <_cor3> =
		  %% Line 164
		  apply 'htmlize'/1
		      (Str)
	      in  %% Line 164
		  [38|[97|[109|[112|[59|_cor3]]]]]
	  %% Line 165
	  <[34|Str]> when 'true' ->
	      let <_cor4> =
		  %% Line 166
		  apply 'htmlize'/1
		      (Str)
	      in  %% Line 166
		  [38|[113|[117|[111|[116|[59|_cor4]]]]]]
	  %% Line 167
	  <[Ch|Str]> when 'true' ->
	      let <_cor5> =
		  %% Line 168
		  apply 'htmlize'/1
		      (Str)
	      in  %% Line 168
		  [Ch|_cor5]
	  %% Line 169
	  <[]> when 'true' ->
	      %% Line 170
	      []
	  ( <_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6})
		  -| [{'function_name',{'htmlize',1}}] )
	    -| ['compiler_generated'] )
	end
'possibly_enhance'/2 =
    %% Line 174
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Str,'true'> when 'true' ->
	      let <_cor4> =
		  %% Line 175
		  ( fun (_cor2) ->
			case _cor2 of
			  <40> when 'true' ->
			      'false'
			  <_cor9> when 'true' ->
			      'true'
			end
		    -| [{'id',{0,0,'-possibly_enhance/2-fun-0-'}}] )
	      in  %% Line 175
		  case call 'lists':'splitwith'
			   (_cor4, Str) of
		    %% Line 176
		    <{_cor10,[]}> when 'true' ->
			Str
		    %% Line 177
		    <{F,A}> when 'true' ->
			[[60|[98|[62]]]|[F|[[60|[47|[98|[62]]]]|[A|[]]]]]
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	  %% Line 179
	  <Str = [37|_cor11],_cor12> when 'true' ->
	      let <_cor6> =
		  %% Line 180
		  call 'erlang':'--'
		      (Str, [10])
	      in  %% Line 180
		  [[60|[105|[62]]]|[_cor6|[[60|[47|[105|[62]]]]|[[10]]]]]
	  %% Line 181
	  <Str = [45|_cor13],_cor14> when 'true' ->
	      %% Line 182
	      apply 'possibly_enhance'/2
		  (Str, 'true')
	  %% Line 183
	  <Str,'false'> when 'true' ->
	      %% Line 184
	      Str
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'possibly_enhance',2}}] )
	    -| ['compiler_generated'] )
	end
'footer'/0 =
    %% Line 188
    fun () ->
	%% Line 189
	[]
'encoding'/1 =
    %% Line 193
    fun (_cor0) ->
	%% Line 194
	case call 'epp':'read_encoding'
		 (_cor0) of
	  %% Line 195
	  <'none'> when 'true' ->
	      %% Line 196
	      call 'epp':'default_encoding'
		  ()
	  %% Line 197
	  <E> when 'true' ->
	      %% Line 198
	      E
	end
'html_encoding'/1 =
    %% Line 203
    fun (_cor0) ->
	case _cor0 of
	  <'latin1'> when 'true' ->
	      %% Line 204
	      [105|[115|[111|[45|[56|[56|[53|[57|[45|[49]]]]]]]]]]
	  %% Line 205
	  <'utf8'> when 'true' ->
	      %% Line 206
	      [117|[116|[102|[45|[56]]]]]
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'html_encoding',1}}] )
	    -| ['compiler_generated'] )
	end
'to_raw_list'/2 =
    %% Line 222
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <X,'latin1'>
	      when call 'erlang':'is_list'
		    (X) ->
	      %% Line 223
	      X
	  %% Line 224
	  <X,'utf8'>
	      when call 'erlang':'is_list'
		    (X) ->
	      let <_cor2> =
		  %% Line 225
		  call 'unicode':'characters_to_binary'
		      (X)
	      in  %% Line 225
		  call 'erlang':'binary_to_list'
		      (_cor2)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'to_raw_list',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('erl2html2')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('erl2html2', _cor0)
end