module 'test_server_ctrl' ['abort'/0,
			   'abort_current_testcase'/1,
			   'add_case'/2,
			   'add_case'/3,
			   'add_case_with_skip'/3,
			   'add_case_with_skip'/4,
			   'add_cases'/2,
			   'add_cases'/3,
			   'add_cases_with_skip'/3,
			   'add_cases_with_skip'/4,
			   'add_conf'/3,
			   'add_conf_with_skip'/4,
			   'add_dir'/2,
			   'add_dir'/3,
			   'add_dir_with_skip'/3,
			   'add_dir_with_skip'/4,
			   'add_module'/1,
			   'add_module'/2,
			   'add_module_with_skip'/2,
			   'add_module_with_skip'/3,
			   'add_spec'/1,
			   'add_tests_with_skip'/3,
			   'cover'/1,
			   'cover'/2,
			   'cover'/3,
			   'cover_analyse'/2,
			   'cover_compile'/7,
			   'create_priv_dir'/1,
			   'cross_cover_analyse'/2,
			   'do_spec'/2,
			   'do_spec_list'/2,
			   'do_test_cases'/4,
			   'format'/1,
			   'format'/2,
			   'format'/3,
			   'get_hosts'/0,
			   'get_levels'/0,
			   'get_target_info'/0,
			   'get_timetrap_parameters'/0,
			   'handle_call'/3,
			   'handle_cast'/2,
			   'handle_info'/2,
			   'i'/0,
			   'idle_notify'/1,
			   'init'/1,
			   'is_release_available'/1,
			   'jobs'/0,
			   'kill_slavenodes'/0,
			   'module_info'/0,
			   'module_info'/1,
			   'multiply_timetraps'/1,
			   'node_started'/1,
			   'p'/1,
			   'p'/3,
			   'pi'/2,
			   'pi'/4,
			   'print'/2,
			   'print'/3,
			   'print'/4,
			   'print_timestamp'/2,
			   'reject_io_reqs'/1,
			   'run_test'/1,
			   'scale_timetraps'/1,
			   'set_levels'/3,
			   'set_random_seed'/1,
			   'start'/0,
			   'start'/1,
			   'start_get_totals'/1,
			   'start_link'/1,
			   'start_node'/3,
			   'stop'/0,
			   'stop_get_totals'/0,
			   'stop_node'/1,
			   'stop_trace'/0,
			   't'/0,
			   't'/1,
			   'terminate'/2,
			   'testcase_callback'/1,
			   'to_string'/1,
			   'trc'/1,
			   'uri_encode'/1,
			   'uri_encode'/2,
			   'wait_finish'/0,
			   'wait_for_node'/1,
			   'xhtml'/2]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','target_info'},[{'record_field',26,{'atom',26,'os_family'}}|[{'record_field',27,{'atom',27,'os_type'}}|[{'record_field',28,{'atom',28,'host'}}|[{'record_field',29,{'atom',29,'version'}}|[{'record_field',30,{'atom',30,'system_version'}}|[{'record_field',31,{'atom',31,'root_dir'}}|[{'record_field',32,{'atom',32,'test_server_dir'}}|[{'record_field',33,{'atom',33,'emulator'}}|[{'record_field',34,{'atom',34,'otp_release'}}|[{'record_field',35,{'atom',35,'username'}}|[{'record_field',36,{'atom',36,'cookie'}}|[{'record_field',37,{'atom',37,'naming'}}|[{'record_field',38,{'atom',38,'master'}}]]]]]]]]]]]]],[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{{'record','par'},[{'record_field',46,{'atom',46,'type'}}|[{'record_field',47,{'atom',47,'target'}}|[{'record_field',48,{'atom',48,'naming'}}|[{'record_field',49,{'atom',49,'master'}}|[{'record_field',50,{'atom',50,'cookie'}}]]]]],[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{{'record','cover'},[{'record_field',53,{'atom',53,'app'}}|[{'record_field',54,{'atom',54,'file'}}|[{'record_field',55,{'atom',55,'incl'}}|[{'record_field',56,{'atom',56,'excl'}}|[{'record_field',57,{'atom',57,'level'}}|[{'record_field',58,{'atom',58,'mods'}}|[{'record_field',59,{'atom',59,'stop'},{'atom',59,'true'}}|[{'record_field',60,{'atom',60,'cross'}}]]]]]]]],[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}],
		%% Line 113
		'type' =
		    %% Line 113
		    [{{'record','state'},[{'record_field',113,{'atom',113,'jobs'},{'nil',113}}|[{'record_field',113,{'atom',113,'levels'},{'tuple',113,[{'integer',113,1}|[{'integer',113,19}|[{'integer',113,10}]]]}}|[{'record_field',113,{'atom',113,'reject_io_reqs'},{'atom',113,'false'}}|[{'record_field',114,{'atom',114,'multiply_timetraps'},{'integer',114,1}}|[{'record_field',114,{'atom',114,'scale_timetraps'},{'atom',114,'true'}}|[{'record_field',115,{'atom',115,'create_priv_dir'},{'atom',115,'auto_per_run'}}|[{'record_field',115,{'atom',115,'finish'},{'atom',115,'false'}}|[{'record_field',116,{'atom',116,'target_info'}}|[{'record_field',116,{'atom',116,'trc'},{'atom',116,'false'}}|[{'record_field',116,{'atom',116,'cover'},{'atom',116,'false'}}|[{'record_field',116,{'atom',116,'wait_for_node'},{'nil',116}}|[{'record_field',117,{'atom',117,'testcase_callback'},{'atom',117,'undefined'}}|[{'record_field',117,{'atom',117,'idle_notify'},{'nil',117}}|[{'record_field',118,{'atom',118,'get_totals'},{'atom',118,'false'}}|[{'record_field',118,{'atom',118,'random_seed'},{'atom',118,'undefined'}}]]]]]]]]]]]]]]],[]}],
		%% Line 4533
		'type' =
		    %% Line 4533
		    [{{'record','cc'},[{'record_field',4533,{'atom',4533,'mod'}}|[{'record_field',4534,{'atom',4534,'skip'}}]],[]}]]
'add_dir'/2 =
    %% Line 123
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,Job = [Dir|_X_Dirs]>
	      when call 'erlang':'is_list'
		    (Dir) ->
	      let <_cor7> =
		  %% Line 124
		  apply 'cast_to_list'/1
		      (Name)
	      in  let <_cor5> =
		      %% Line 125
		      ( fun (_cor3) ->
			    let <_cor2> =
				apply 'cast_to_list'/1
				    (_cor3)
			    in  {'dir',_cor2}
			-| [{'id',{0,0,'-add_dir/2-fun-0-'}}] )
		  in  let <_cor6> =
			  %% Line 125
			  call 'lists':'map'
			      (_cor5, Job)
		      in  %% Line 124
			  apply 'add_job'/2
			      (_cor7, _cor6)
	  %% Line 126
	  <Name,Dir> when 'true' ->
	      let <_cor9> =
		  %% Line 127
		  apply 'cast_to_list'/1
		      (Name)
	      in  let <_cor8> =
		      %% Line 127
		      apply 'cast_to_list'/1
			  (Dir)
		  in  %% Line 127
		      apply 'add_job'/2
			  (_cor9, {'dir',_cor8})
	end
'add_dir'/3 =
    %% Line 129
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,Job = [Dir|_X_Dirs],Pattern>
	      when call 'erlang':'is_list'
		    (Dir) ->
	      let <_cor9> =
		  %% Line 130
		  apply 'cast_to_list'/1
		      (Name)
	      in  let <_cor7> =
		      %% Line 131
		      ( fun (_cor5) ->
			    let <_cor4> =
				apply 'cast_to_list'/1
				    (_cor5)
			    in  let <_cor3> =
				    %% Line 132
				    apply 'cast_to_list'/1
					(Pattern)
				in  {'dir',_cor4,_cor3}
			-| [{'id',{0,0,'-add_dir/3-fun-0-'}}] )
		  in  let <_cor8> =
			  %% Line 131
			  call 'lists':'map'
			      (_cor7, %% Line 132
				      Job)
		      in  %% Line 130
			  apply 'add_job'/2
			      (_cor9, _cor8)
	  %% Line 133
	  <Name,Dir,Pattern> when 'true' ->
	      let <_cor12> =
		  %% Line 134
		  apply 'cast_to_list'/1
		      (Name)
	      in  let <_cor11> =
		      %% Line 134
		      apply 'cast_to_list'/1
			  (Dir)
		  in  let <_cor10> =
			  %% Line 134
			  apply 'cast_to_list'/1
			      (Pattern)
		      in  %% Line 134
			  apply 'add_job'/2
			      (_cor12, {'dir',_cor11,_cor10})
	end
'add_module'/1 =
    %% Line 136
    fun (_cor0) ->
	case _cor0 of
	  <Mod>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 137
		  call 'erlang':'atom_to_list'
		      (Mod)
	      in  %% Line 137
		  apply 'add_job'/2
		      (_cor1, {Mod,'all'})
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'add_module',1}}] )
	    -| ['compiler_generated'] )
	end
'add_module'/2 =
    %% Line 139
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,Mods>
	      when call 'erlang':'is_list'
		    (Mods) ->
	      let <_cor6> =
		  %% Line 140
		  apply 'cast_to_list'/1
		      (Name)
	      in  let <_cor4> =
		      %% Line 140
		      ( fun (_cor2) ->
			    {_cor2,'all'}
			-| [{'id',{0,0,'-add_module/2-fun-0-'}}] )
		  in  let <_cor5> =
			  %% Line 140
			  call 'lists':'map'
			      (_cor4, Mods)
		      in  %% Line 140
			  apply 'add_job'/2
			      (_cor6, _cor5)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'add_module',2}}] )
	    -| ['compiler_generated'] )
	end
'add_conf'/3 =
    %% Line 142
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,Mod,Conf>
	      when call 'erlang':'is_tuple'
		    (Conf) ->
	      let <_cor3> =
		  %% Line 143
		  apply 'cast_to_list'/1
		      (Name)
	      in  %% Line 143
		  apply 'add_job'/2
		      (_cor3, {Mod,[Conf|[]]})
	  %% Line 145
	  <Name,Mod,Confs>
	      when call 'erlang':'is_list'
		    (Confs) ->
	      let <_cor4> =
		  %% Line 146
		  apply 'cast_to_list'/1
		      (Name)
	      in  %% Line 146
		  apply 'add_job'/2
		      (_cor4, {Mod,Confs})
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'add_conf',3}}] )
	    -| ['compiler_generated'] )
	end
'add_case'/2 =
    %% Line 148
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Mod,Case>
	      when let <_cor2> =
		    call 'erlang':'is_atom'
			(Mod)
		in  let <_cor3> =
			call 'erlang':'is_atom'
			    (Case)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor4> =
		  %% Line 149
		  call 'erlang':'atom_to_list'
		      (Mod)
	      in  %% Line 149
		  apply 'add_job'/2
		      (_cor4, {Mod,Case})
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'add_case',2}}] )
	    -| ['compiler_generated'] )
	end
'add_case'/3 =
    %% Line 151
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,Mod,Case>
	      when let <_cor3> =
		    call 'erlang':'is_atom'
			(Mod)
		in  let <_cor4> =
			call 'erlang':'is_atom'
			    (Case)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 152
	      apply 'add_job'/2
		  (Name, {Mod,Case})
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'add_case',3}}] )
	    -| ['compiler_generated'] )
	end
'add_cases'/2 =
    %% Line 154
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Mod,Cases>
	      when let <_cor2> =
		    call 'erlang':'is_atom'
			(Mod)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (Cases)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor4> =
		  %% Line 155
		  call 'erlang':'atom_to_list'
		      (Mod)
	      in  %% Line 155
		  apply 'add_job'/2
		      (_cor4, {Mod,Cases})
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'add_cases',2}}] )
	    -| ['compiler_generated'] )
	end
'add_cases'/3 =
    %% Line 157
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,Mod,Cases>
	      when let <_cor3> =
		    call 'erlang':'is_atom'
			(Mod)
		in  let <_cor4> =
			call 'erlang':'is_list'
			    (Cases)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      %% Line 158
	      apply 'add_job'/2
		  (Name, {Mod,Cases})
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'add_cases',3}}] )
	    -| ['compiler_generated'] )
	end
'add_spec'/1 =
    %% Line 160
    fun (_cor0) ->
	let <Name> =
	    %% Line 161
	    call 'filename':'rootname'
		(_cor0, [46|[115|[112|[101|[99]]]]])
	in  %% Line 162
	    case call 'filelib':'is_file'
		     (_cor0) of
	      %% Line 163
	      <'true'> when 'true' ->
		  apply 'add_job'/2
		      (Name, {'spec',_cor0})
	      %% Line 164
	      <'false'> when 'true' ->
		  {'error','nofile'}
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
'add_dir_with_skip'/3 =
    %% Line 170
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,Job = [Dir|_X_Dirs],Skip>
	      when call 'erlang':'is_list'
		    (Dir) ->
	      let <_cor8> =
		  %% Line 171
		  apply 'cast_to_list'/1
		      (Name)
	      in  let <_cor6> =
		      %% Line 172
		      ( fun (_cor4) ->
			    let <_cor3> =
				apply 'cast_to_list'/1
				    (_cor4)
			    in  {'dir',_cor3}
			-| [{'id',{0,0,'-add_dir_with_skip/3-fun-0-'}}] )
		  in  let <_cor7> =
			  %% Line 172
			  call 'lists':'map'
			      (_cor6, Job)
		      in  %% Line 171
			  apply 'add_job'/3
			      (_cor8, _cor7, %% Line 173
					     Skip)
	  %% Line 174
	  <Name,Dir,Skip> when 'true' ->
	      let <_cor10> =
		  %% Line 175
		  apply 'cast_to_list'/1
		      (Name)
	      in  let <_cor9> =
		      %% Line 175
		      apply 'cast_to_list'/1
			  (Dir)
		  in  %% Line 175
		      apply 'add_job'/3
			  (_cor10, {'dir',_cor9}, Skip)
	end
'add_dir_with_skip'/4 =
    %% Line 177
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Name,Job = [Dir|_X_Dirs],Pattern,Skip>
	      when call 'erlang':'is_list'
		    (Dir) ->
	      let <_cor10> =
		  %% Line 178
		  apply 'cast_to_list'/1
		      (Name)
	      in  let <_cor8> =
		      %% Line 179
		      ( fun (_cor6) ->
			    let <_cor5> =
				apply 'cast_to_list'/1
				    (_cor6)
			    in  let <_cor4> =
				    %% Line 180
				    apply 'cast_to_list'/1
					(Pattern)
				in  {'dir',_cor5,_cor4}
			-| [{'id',{0,0,'-add_dir_with_skip/4-fun-0-'}}] )
		  in  let <_cor9> =
			  %% Line 179
			  call 'lists':'map'
			      (_cor8, %% Line 180
				      Job)
		      in  %% Line 178
			  apply 'add_job'/3
			      (_cor10, _cor9, %% Line 181
					      Skip)
	  %% Line 182
	  <Name,Dir,Pattern,Skip> when 'true' ->
	      let <_cor13> =
		  %% Line 183
		  apply 'cast_to_list'/1
		      (Name)
	      in  let <_cor12> =
		      %% Line 184
		      apply 'cast_to_list'/1
			  (Dir)
		  in  let <_cor11> =
			  %% Line 184
			  apply 'cast_to_list'/1
			      (Pattern)
		      in  %% Line 183
			  apply 'add_job'/3
			      (_cor13, %% Line 184
				       {'dir',_cor12,_cor11}, %% Line 184
							      Skip)
	end
'add_module_with_skip'/2 =
    %% Line 186
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Mod,Skip>
	      when call 'erlang':'is_atom'
		    (Mod) ->
	      let <_cor2> =
		  %% Line 187
		  call 'erlang':'atom_to_list'
		      (Mod)
	      in  %% Line 187
		  apply 'add_job'/3
		      (_cor2, {Mod,'all'}, Skip)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'add_module_with_skip',2}}] )
	    -| ['compiler_generated'] )
	end
'add_module_with_skip'/3 =
    %% Line 189
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,Mods,Skip>
	      when call 'erlang':'is_list'
		    (Mods) ->
	      let <_cor7> =
		  %% Line 190
		  apply 'cast_to_list'/1
		      (Name)
	      in  let <_cor5> =
		      %% Line 190
		      ( fun (_cor3) ->
			    {_cor3,'all'}
			-| [{'id',{0,0,'-add_module_with_skip/3-fun-0-'}}] )
		  in  let <_cor6> =
			  %% Line 190
			  call 'lists':'map'
			      (_cor5, Mods)
		      in  %% Line 190
			  apply 'add_job'/3
			      (_cor7, _cor6, Skip)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'add_module_with_skip',3}}] )
	    -| ['compiler_generated'] )
	end
'add_conf_with_skip'/4 =
    %% Line 192
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Name,Mod,Conf,Skip>
	      when call 'erlang':'is_tuple'
		    (Conf) ->
	      let <_cor4> =
		  %% Line 193
		  apply 'cast_to_list'/1
		      (Name)
	      in  %% Line 193
		  apply 'add_job'/3
		      (_cor4, {Mod,[Conf|[]]}, Skip)
	  %% Line 195
	  <Name,Mod,Confs,Skip>
	      when call 'erlang':'is_list'
		    (Confs) ->
	      let <_cor5> =
		  %% Line 196
		  apply 'cast_to_list'/1
		      (Name)
	      in  %% Line 196
		  apply 'add_job'/3
		      (_cor5, {Mod,Confs}, Skip)
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'add_conf_with_skip',4}}] )
	    -| ['compiler_generated'] )
	end
'add_case_with_skip'/3 =
    %% Line 198
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Mod,Case,Skip>
	      when let <_cor3> =
		    call 'erlang':'is_atom'
			(Mod)
		in  let <_cor4> =
			call 'erlang':'is_atom'
			    (Case)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      let <_cor5> =
		  %% Line 199
		  call 'erlang':'atom_to_list'
		      (Mod)
	      in  %% Line 199
		  apply 'add_job'/3
		      (_cor5, {Mod,Case}, Skip)
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'add_case_with_skip',3}}] )
	    -| ['compiler_generated'] )
	end
'add_case_with_skip'/4 =
    %% Line 201
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Name,Mod,Case,Skip>
	      when let <_cor4> =
		    call 'erlang':'is_atom'
			(Mod)
		in  let <_cor5> =
			call 'erlang':'is_atom'
			    (Case)
		    in  call 'erlang':'and'
			    (_cor4, _cor5) ->
	      %% Line 202
	      apply 'add_job'/3
		  (Name, {Mod,Case}, Skip)
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'add_case_with_skip',4}}] )
	    -| ['compiler_generated'] )
	end
'add_cases_with_skip'/3 =
    %% Line 204
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Mod,Cases,Skip>
	      when let <_cor3> =
		    call 'erlang':'is_atom'
			(Mod)
		in  let <_cor4> =
			call 'erlang':'is_list'
			    (Cases)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      let <_cor5> =
		  %% Line 205
		  call 'erlang':'atom_to_list'
		      (Mod)
	      in  %% Line 205
		  apply 'add_job'/3
		      (_cor5, {Mod,Cases}, Skip)
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'add_cases_with_skip',3}}] )
	    -| ['compiler_generated'] )
	end
'add_cases_with_skip'/4 =
    %% Line 207
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Name,Mod,Cases,Skip>
	      when let <_cor4> =
		    call 'erlang':'is_atom'
			(Mod)
		in  let <_cor5> =
			call 'erlang':'is_list'
			    (Cases)
		    in  call 'erlang':'and'
			    (_cor4, _cor5) ->
	      %% Line 208
	      apply 'add_job'/3
		  (Name, {Mod,Cases}, Skip)
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'add_cases_with_skip',4}}] )
	    -| ['compiler_generated'] )
	end
'add_tests_with_skip'/3 =
    %% Line 210
    fun (_cor2,_cor1,_cor0) ->
	let <_cor9> =
	    %% Line 212
	    ( fun (_cor7) ->
		  case _cor7 of
		    <{Dir,'all','all'}> when 'true' ->
			%% Line 213
			{Dir,{'dir',Dir}}
		    %% Line 214
		    <{Dir,Mods,'all'}> when 'true' ->
			let <_cor5> =
			    %% Line 215
			    ( fun (_cor3) ->
				  {_cor3,'all'}
			      -| [{'id',{0,0,'-add_tests_with_skip/3-fun-0-'}}] )
			in  let <_cor6> =
				%% Line 215
				call 'lists':'map'
				    (_cor5, Mods)
			    in  %% Line 215
				{Dir,_cor6}
		    %% Line 216
		    <{Dir,Mod,Cases}> when 'true' ->
			%% Line 217
			{Dir,{Mod,Cases}}
		    ( <_cor8> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor8})
			    -| [{'function_name',{'-add_tests_with_skip/3-fun-1-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-add_tests_with_skip/3-fun-1-'}}] )
	in  let <_cor10> =
		%% Line 212
		call 'lists':'map'
		    (_cor9, _cor1)
	    in  %% Line 211
		apply 'add_job'/3
		    (_cor2, _cor10, _cor0)
'parse_cmd_line'/1 =
    %% Line 224
    fun (_cor0) ->
	%% Line 225
	apply 'parse_cmd_line'/7
	    (_cor0, [], [], 'local', 'false', 'false', 'undefined')
'parse_cmd_line'/7 =
    %% Line 227
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <['SPEC'|[Spec|Cmds]],SpecList,Names,Param,Trc,Cov,TCCB> when 'true' ->
	      %% Line 228
	      case call 'file':'consult'
		       (Spec) of
		%% Line 229
		<{'ok',TermList}> when 'true' ->
		    let <Name> =
			%% Line 230
			call 'filename':'rootname'
			    (Spec)
		    in  let <_cor8> =
			    %% Line 231
			    call 'erlang':'++'
				(TermList, SpecList)
			in  %% Line 231
			    apply 'parse_cmd_line'/7
				(Cmds, _cor8, [Name|Names], Param, %% Line 232
								   Trc, %% Line 232
									Cov, %% Line 232
									     TCCB)
		%% Line 233
		<{'error',Reason}> when 'true' ->
		    let <_cor9> =
			%% Line 234
			call 'file':'format_error'
			    (Reason)
		    in  do  %% Line 234
			    call 'io':'format'
				([67|[97|[110|[39|[116|[32|[111|[112|[101|[110|[32|[126|[119|[58|[32|[126|[112|[10]]]]]]]]]]]]]]]]]], [Spec|[_cor9|[]]])
			    %% Line 235
			    apply 'parse_cmd_line'/7
				(Cmds, SpecList, Names, Param, Trc, Cov, TCCB)
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 237
	  <['NAME'|[Name|Cmds]],SpecList,Names,Param,Trc,Cov,TCCB> when 'true' ->
	      let <_cor11> =
		  %% Line 238
		  call 'erlang':'atom_to_list'
		      (Name)
	      in  %% Line 238
		  apply 'parse_cmd_line'/7
		      (Cmds, SpecList, [{'name',_cor11}|Names], %% Line 239
								Param, %% Line 239
								       Trc, %% Line 239
									    Cov, %% Line 239
										 TCCB)
	  %% Line 240
	  <['SKIPMOD'|[Mod|Cmds]],SpecList,Names,Param,Trc,Cov,TCCB> when 'true' ->
	      %% Line 241
	      apply 'parse_cmd_line'/7
		  (Cmds, [{'skip',{Mod,[98|[121|[32|[99|[111|[109|[109|[97|[110|[100|[32|[108|[105|[110|[101]]]]]]]]]]]]]]]}}|SpecList], Names, %% Line 242
																		Param, %% Line 242
																		       Trc, %% Line 242
																			    Cov, %% Line 242
																				 TCCB)
	  %% Line 243
	  <['SKIPCASE'|[Mod|[Case|Cmds]]],SpecList,Names,Param,Trc,Cov,TCCB> when 'true' ->
	      %% Line 244
	      apply 'parse_cmd_line'/7
		  (Cmds, [{'skip',{Mod,Case,[98|[121|[32|[99|[111|[109|[109|[97|[110|[100|[32|[108|[105|[110|[101]]]]]]]]]]]]]]]}}|SpecList], Names, %% Line 245
																		     Param, %% Line 245
																			    Trc, %% Line 245
																				 Cov, %% Line 245
																				      TCCB)
	  %% Line 246
	  <['DIR'|[Dir|Cmds]],SpecList,Names,Param,Trc,Cov,TCCB> when 'true' ->
	      let <Name> =
		  %% Line 247
		  call 'filename':'basename'
		      (Dir)
	      in  %% Line 248
		  apply 'parse_cmd_line'/7
		      (Cmds, [{'topcase',{'dir',Name}}|SpecList], [Name|Names], %% Line 249
										Param, %% Line 249
										       Trc, %% Line 249
											    Cov, %% Line 249
												 TCCB)
	  %% Line 250
	  <['MODULE'|[Mod|Cmds]],SpecList,Names,Param,Trc,Cov,TCCB> when 'true' ->
	      let <_cor13> =
		  %% Line 251
		  call 'erlang':'atom_to_list'
		      (Mod)
	      in  %% Line 251
		  apply 'parse_cmd_line'/7
		      (Cmds, [{'topcase',{Mod,'all'}}|SpecList], [_cor13|Names], %% Line 252
										 Param, %% Line 252
											Trc, %% Line 252
											     Cov, %% Line 252
												  TCCB)
	  %% Line 253
	  <['CASE'|[Mod|[Case|Cmds]]],SpecList,Names,Param,Trc,Cov,TCCB> when 'true' ->
	      let <_cor14> =
		  %% Line 254
		  call 'erlang':'atom_to_list'
		      (Mod)
	      in  %% Line 254
		  apply 'parse_cmd_line'/7
		      (Cmds, [{'topcase',{Mod,Case}}|SpecList], [_cor14|Names], %% Line 255
										Param, %% Line 255
										       Trc, %% Line 255
											    Cov, %% Line 255
												 TCCB)
	  %% Line 256
	  <['TRACE'|[Trc|Cmds]],SpecList,Names,Param,_X_Trc,Cov,TCCB> when 'true' ->
	      %% Line 257
	      apply 'parse_cmd_line'/7
		  (Cmds, SpecList, Names, Param, Trc, Cov, TCCB)
	  %% Line 258
	  <['COVER'|[App|[CF|[Analyse|Cmds]]]],SpecList,Names,Param,Trc,_X_Cov,TCCB> when 'true' ->
	      %% Line 259
	      apply 'parse_cmd_line'/7
		  (Cmds, SpecList, Names, Param, Trc, {{App,CF},Analyse}, TCCB)
	  %% Line 260
	  <['TESTCASE_CALLBACK'|[Mod|[Func|Cmds]]],SpecList,Names,Param,Trc,Cov,_cor27> when 'true' ->
	      %% Line 261
	      apply 'parse_cmd_line'/7
		  (Cmds, SpecList, Names, Param, Trc, Cov, {Mod,Func})
	  %% Line 262
	  <[Obj|_X_Cmds],_X_SpecList,_X_Names,_X_Param,_X_Trc,_X_Cov,_X_TCCB> when 'true' ->
	      do  %% Line 263
		  call 'io':'format'
		      ([126|[119|[58|[32|[66|[97|[100|[32|[97|[114|[103|[117|[109|[101|[110|[116|[58|[32|[126|[119|[10]]]]]]]]]]]]]]]]]]]]], ['test_server_ctrl'|[Obj|[]]])
		  do  %% Line 264
		      call 'io':'format'
			  ([32|[85|[115|[101|[32|[116|[104|[101|[32|[96|[116|[115|[39|[32|[109|[111|[100|[117|[108|[101|[32|[116|[111|[32|[115|[116|[97|[114|[116|[32|[116|[101|[115|[116|[115|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
		      do  %% Line 265
			  call 'io':'format'
			      ([32|[40|[73|[102|[32|[121|[111|[117|[32|[65|[82|[69|[32|[117|[115|[105|[110|[103|[32|[96|[116|[115|[39|[44|[32|[116|[104|[101|[114|[101|[32|[105|[115|[32|[97|[32|[98|[117|[103|[32|[105|[110|[32|[96|[116|[115|[39|[46|[41|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
			  %% Line 266
			  call 'erlang':'halt'
			      (1)
	  %% Line 267
	  <[],SpecList,Names,Param,Trc,Cov,TCCB> when 'true' ->
	      let <NameList> =
		  %% Line 268
		  call 'lists':'reverse'
		      (Names, [[115|[117|[105|[116|[101]]]]]])
	      in  let <_cor17> =
		      %% Line 269
		      case call 'lists':'keysearch'
			       ('name', 1, NameList) of
			%% Line 270
			<{'value',{'name',N}}> when 'true' ->
			    N
			%% Line 271
			<'false'> when 'true' ->
			    call 'erlang':'hd'
				(NameList)
			( <_cor16> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor16})
			  -| ['compiler_generated'] )
		      end
		  in  let <_cor19> =
			  %% Line 273
			  call 'lists':'reverse'
			      (SpecList)
		      in  %% Line 273
			  {_cor19,_cor17,Param,Trc,Cov,TCCB}
	  ( <_cor26,_cor25,_cor24,_cor23,_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26,_cor25,_cor24,_cor23,_cor22,_cor21,_cor20})
		  -| [{'function_name',{'parse_cmd_line',7}}] )
	    -| ['compiler_generated'] )
	end
'cast_to_list'/1 =
    %% Line 280
    fun (_cor0) ->
	case _cor0 of
	  <X>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      X
	  %% Line 281
	  <X>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      call 'erlang':'atom_to_list'
		  (X)
	  %% Line 282
	  <X> when 'true' ->
	      let <_cor1> =
		  call 'io_lib':'format'
		      ([126|[119]], [X|[]])
	      in  call 'lists':'flatten'
		      (_cor1)
	end
'start'/1 =
    %% Line 288
    fun (_cor0) ->
	%% Line 289
	apply 'start'/0
	    ()
'start_link'/1 =
    %% Line 290
    fun (_cor0) ->
	%% Line 291
	apply 'start_link'/0
	    ()
'start'/0 =
    %% Line 294
    fun () ->
	%% Line 295
	case call 'gen_server':'start'
		 ({'local','test_server_ctrl'}, 'test_server_ctrl', [], []) of
	  %% Line 296
	  <{'ok',Pid}> when 'true' ->
	      %% Line 297
	      {'ok',Pid}
	  %% Line 298
	  <Other> when 'true' ->
	      %% Line 299
	      Other
	end
'start_link'/0 =
    %% Line 302
    fun () ->
	%% Line 303
	case call 'gen_server':'start_link'
		 ({'local','test_server_ctrl'}, 'test_server_ctrl', [], []) of
	  %% Line 304
	  <{'ok',Pid}> when 'true' ->
	      %% Line 305
	      {'ok',Pid}
	  %% Line 306
	  <Other> when 'true' ->
	      %% Line 307
	      Other
	end
'run_test'/1 =
    %% Line 310
    fun (_cor0) ->
	do  %% Line 311
	    call 'erlang':'process_flag'
		('trap_exit', 'true')
	    %% Line 312
	    case apply 'parse_cmd_line'/1
		     (_cor0) of
	      <{SpecList,Name,Param,Trc,Cov,TCCB}> when 'true' ->
		  %% Line 313
		  case apply 'start_link'/1
			   (Param) of
		    <{'ok',_X_TSPid}> when 'true' ->
			do  %% Line 314
			    case Trc of
			      %% Line 315
			      <'false'> when 'true' ->
				  'ok'
			      %% Line 316
			      <File> when 'true' ->
				  apply 'trc'/1
				      (File)
			    end
			    do  %% Line 318
				case Cov of
				  %% Line 319
				  <'false'> when 'true' ->
				      'ok'
				  %% Line 320
				  <{{App,CoverFile},Analyse}> when 'true' ->
				      let <_cor4> =
					  apply 'maybe_file'/1
					      (CoverFile)
				      in  apply 'cover'/3
					      (App, _cor4, Analyse)
				  ( <_cor5> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor5})
				    -| ['compiler_generated'] )
				end
				do  %% Line 322
				    apply 'testcase_callback'/1
					(TCCB)
				    do  %% Line 323
					apply 'add_job'/2
					    (Name, {'command_line',SpecList})
					%% Line 325
					apply 'wait_finish'/0
					    ()
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor2})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor1> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor1})
		-| ['compiler_generated'] )
	    end
'maybe_file'/1 =
    %% Line 328
    fun (_cor0) ->
	case _cor0 of
	  <'none'> when 'true' ->
	      %% Line 329
	      'none'
	  %% Line 330
	  <CoverFile> when 'true' ->
	      %% Line 331
	      call 'erlang':'atom_to_list'
		  (CoverFile)
	end
'idle_notify'/1 =
    %% Line 333
    fun (_cor0) ->
	%% Line 334
	case apply 'controller_call'/1
		 ({'idle_notify',_cor0}) of
	  <{'ok',Pid}> when 'true' ->
	      %% Line 335
	      Pid
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'start_get_totals'/1 =
    %% Line 337
    fun (_cor0) ->
	%% Line 338
	case apply 'controller_call'/1
		 ({'start_get_totals',_cor0}) of
	  <{'ok',Pid}> when 'true' ->
	      %% Line 339
	      Pid
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'stop_get_totals'/0 =
    %% Line 341
    fun () ->
	%% Line 342
	case apply 'controller_call'/1
		 ('stop_get_totals') of
	  <'ok'> when 'true' ->
	      %% Line 343
	      'ok'
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor0})
	    -| ['compiler_generated'] )
	end
'wait_finish'/0 =
    %% Line 345
    fun () ->
	let <OldTrap> =
	    %% Line 346
	    call 'erlang':'process_flag'
		('trap_exit', 'true')
	in  %% Line 347
	    case apply 'finish'/1
		     ('true') of
	      <{'ok',Pid}> when 'true' ->
		  do  %% Line 348
		      call 'erlang':'link'
			  (Pid)
		      do  %% Line 349
			  receive
			    %% Line 350
			    <{'EXIT',_cor2,_cor3}>
				when call 'erlang':'=:='
				      (_cor2,
				       Pid) ->
				'ok'
			  after 'infinity' ->
			    'ok'
			  do  %% Line 353
			      call 'erlang':'process_flag'
				  ('trap_exit', OldTrap)
			      %% Line 354
			      'ok'
	      ( <_cor1> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor1})
		-| ['compiler_generated'] )
	    end
'abort_current_testcase'/1 =
    %% Line 356
    fun (_cor0) ->
	%% Line 357
	apply 'controller_call'/1
	    ({'abort_current_testcase',_cor0})
'abort'/0 =
    %% Line 359
    fun () ->
	let <OldTrap> =
	    %% Line 360
	    call 'erlang':'process_flag'
		('trap_exit', 'true')
	in  %% Line 361
	    case apply 'finish'/1
		     ('abort') of
	      <{'ok',Pid}> when 'true' ->
		  do  %% Line 362
		      call 'erlang':'link'
			  (Pid)
		      do  %% Line 363
			  receive
			    %% Line 364
			    <{'EXIT',_cor2,_cor3}>
				when call 'erlang':'=:='
				      (_cor2,
				       Pid) ->
				'ok'
			  after 'infinity' ->
			    'ok'
			  do  %% Line 367
			      call 'erlang':'process_flag'
				  ('trap_exit', OldTrap)
			      %% Line 368
			      'ok'
	      ( <_cor1> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor1})
		-| ['compiler_generated'] )
	    end
'finish'/1 =
    %% Line 370
    fun (_cor0) ->
	%% Line 371
	apply 'controller_call'/1
	    ({'finish',_cor0})
'stop'/0 =
    %% Line 373
    fun () ->
	%% Line 374
	apply 'controller_call'/1
	    ('stop')
'jobs'/0 =
    %% Line 376
    fun () ->
	%% Line 377
	apply 'controller_call'/1
	    ('jobs')
'get_levels'/0 =
    %% Line 379
    fun () ->
	%% Line 380
	apply 'controller_call'/1
	    ('get_levels')
'set_levels'/3 =
    %% Line 382
    fun (_cor2,_cor1,_cor0) ->
	%% Line 383
	apply 'controller_call'/1
	    ({'set_levels',_cor2,_cor1,_cor0})
'reject_io_reqs'/1 =
    %% Line 385
    fun (_cor0) ->
	%% Line 386
	apply 'controller_call'/1
	    ({'reject_io_reqs',_cor0})
'multiply_timetraps'/1 =
    %% Line 388
    fun (_cor0) ->
	%% Line 389
	apply 'controller_call'/1
	    ({'multiply_timetraps',_cor0})
'scale_timetraps'/1 =
    %% Line 391
    fun (_cor0) ->
	%% Line 392
	apply 'controller_call'/1
	    ({'scale_timetraps',_cor0})
'get_timetrap_parameters'/0 =
    %% Line 394
    fun () ->
	%% Line 395
	apply 'controller_call'/1
	    ('get_timetrap_parameters')
'create_priv_dir'/1 =
    %% Line 397
    fun (_cor0) ->
	%% Line 398
	apply 'controller_call'/1
	    ({'create_priv_dir',_cor0})
'trc'/1 =
    %% Line 400
    fun (_cor0) ->
	%% Line 401
	apply 'controller_call'/2
	    ({'trace',_cor0}, 40000)
'stop_trace'/0 =
    %% Line 403
    fun () ->
	%% Line 404
	apply 'controller_call'/1
	    ('stop_trace')
'node_started'/1 =
    %% Line 406
    fun (_cor0) ->
	%% Line 407
	call 'gen_server':'cast'
	    ('test_server_ctrl', {'node_started',_cor0})
'cover'/2 =
    %% Line 409
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <App,Analyse>
	      when call 'erlang':'is_atom'
		    (App) ->
	      %% Line 410
	      apply 'cover'/3
		  (App, 'none', Analyse)
	  %% Line 411
	  <CoverFile,Analyse> when 'true' ->
	      %% Line 412
	      apply 'cover'/3
		  ('none', CoverFile, Analyse)
	end
'cover'/3 =
    %% Line 413
    fun (_cor2,_cor1,_cor0) ->
	%% Line 414
	case apply 'read_cover_file'/1
		 (_cor1) of
	  <{Excl,Incl,Cross}> when 'true' ->
	      let <CoverInfo> =
		  %% Line 415
		  {'cover',_cor2,_cor1,%% Line 418
				       Incl,%% Line 417
					    Excl,_cor0,'undefined','true',%% Line 419
									  Cross}
	      in  %% Line 421
		  apply 'controller_call'/1
		      ({'cover',CoverInfo})
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'cover'/1 =
    %% Line 423
    fun (_cor0) ->
	%% Line 424
	apply 'controller_call'/1
	    ({'cover',_cor0})
'cover_compile'/7 =
    %% Line 426
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 427
	apply 'cover_compile'/1
	    ({'cover',_cor6,_cor5,_cor3,_cor4,_cor1,'undefined',_cor0,_cor2})
'testcase_callback'/1 =
    %% Line 435
    fun (_cor0) ->
	%% Line 436
	apply 'controller_call'/1
	    ({'testcase_callback',_cor0})
'set_random_seed'/1 =
    %% Line 438
    fun (_cor0) ->
	%% Line 439
	apply 'controller_call'/1
	    ({'set_random_seed',_cor0})
'kill_slavenodes'/0 =
    %% Line 441
    fun () ->
	%% Line 442
	apply 'controller_call'/1
	    ('kill_slavenodes')
'get_hosts'/0 =
    %% Line 444
    fun () ->
	%% Line 445
	call 'erlang':'get'
	    ('test_server_hosts')
'add_job'/2 =
    %% Line 449
    fun (_cor1,_cor0) ->
	%% Line 450
	apply 'add_job'/3
	    (_cor1, _cor0, [])
'add_job'/3 =
    %% Line 452
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 454
	    case _cor2 of
	      %% Line 455
	      <[46]> when 'true' ->
		  [99|[117|[114|[114|[101|[110|[116|[95|[100|[105|[114]]]]]]]]]]]
	      %% Line 456
	      <[46|[46]]> when 'true' ->
		  [112|[97|[114|[101|[110|[116|[95|[100|[105|[114]]]]]]]]]]
	      %% Line 457
	      <Other> when 'true' ->
		  Other
	    end
	in  let <Dir> =
		%% Line 459
		call 'filename':'absname'
		    (_cor4)
	    in  %% Line 460
		apply 'controller_call'/1
		    ({'add_job',Dir,_cor4,_cor1,_cor0})
'controller_call'/1 =
    %% Line 462
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 463
		call 'gen_server':'call'
		    ('test_server_ctrl', _cor0, 'infinity')
	in  %% Line 463
	    case _cor1 of
	      %% Line 464
	      <{'EXIT',{{'badarg',_cor4},{'gen_server','call',_cor5}}}> when 'true' ->
		  %% Line 465
		  call 'erlang':'exit'
		      ('test_server_ctrl_not_running')
	      %% Line 466
	      <{'EXIT',Reason}> when 'true' ->
		  %% Line 467
		  call 'erlang':'exit'
		      (Reason)
	      %% Line 468
	      <Other> when 'true' ->
		  %% Line 469
		  Other
	    end
'controller_call'/2 =
    %% Line 471
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    catch
		%% Line 472
		call 'gen_server':'call'
		    ('test_server_ctrl', _cor1, _cor0)
	in  %% Line 472
	    case _cor2 of
	      %% Line 473
	      <{'EXIT',{{'badarg',_cor6},{'gen_server','call',_cor7}}}> when 'true' ->
		  %% Line 474
		  call 'erlang':'exit'
		      ('test_server_ctrl_not_running')
	      %% Line 475
	      <{'EXIT',Reason}> when 'true' ->
		  %% Line 476
		  call 'erlang':'exit'
		      (Reason)
	      %% Line 477
	      <Other> when 'true' ->
		  %% Line 478
		  Other
	    end
'init'/1 =
    %% Line 489
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      do  %% Line 490
		  case call 'os':'getenv'
			   ([84|[69|[83|[84|[95|[83|[69|[82|[86|[69|[82|[95|[67|[65|[76|[76|[95|[84|[82|[65|[67|[69]]]]]]]]]]]]]]]]]]]]]]) of
		    %% Line 491
		    <'false'> when 'true' ->
			'ok'
		    %% Line 493
		    <[]> when 'true' ->
			'ok'
		    %% Line 495
		    <TraceSpec> when 'true' ->
			%% Line 496
			call 'test_server_sup':'call_trace'
			    (TraceSpec)
		  end
		  do  %% Line 498
		      call 'erlang':'process_flag'
			  ('trap_exit', 'true')
		      do  %% Line 500
			  case call 'init':'get_argument'
				   ('test_server_format_exception') of
			    %% Line 501
			    <{'ok',[[TSFE|[]]|[]]}> when 'true' ->
				let <_cor2> =
				    %% Line 502
				    call 'erlang':'list_to_atom'
					(TSFE)
				in  %% Line 502
				    call 'application':'set_env'
					('test_server', 'format_exception', _cor2)
			    %% Line 503
			    <_cor20> when 'true' ->
				'ok'
			  end
			  do  %% Line 506
			      call 'test_server_sup':'cleanup_crash_dumps'
				  ()
			      do  %% Line 507
				  call 'test_server_sup':'util_start'
				      ()
				  let <TI0> =
				      %% Line 509
				      call 'test_server':'init_target_info'
					  ()
				  in  let <TargetHost> =
					  %% Line 510
					  call 'test_server_sup':'hoststr'
					      ()
				      in  let <_rec0> =
					      %% Line 512
					      apply 'naming'/0
						  ()
					  in  %% Line 511
					      case TI0 of
						<{'target_info',_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33}> when 'true' ->
						    let <_cor9> =
							%% Line 513
							call 'erlang':'setelement'
							    (14, TI0, TargetHost)
						    in  let <_cor10> =
							    %% Line 512
							    call 'erlang':'setelement'
								(13, _cor9, _rec0)
							in  let <_cor12> =
								call 'erlang':'setelement'
								    (4, _cor10, TargetHost)
							    in  do  %% Line 514
								    call 'ets':'new'
									('slave_tab', ['named_table'|['set'|['public'|[{'keypos',2}]]]])
								    %% Line 515
								    ( case _cor12 of
									( <( {'target_info',_cor35,_cor36,_rec2,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46}
									     -| ['compiler_generated'] )> when 'true' ->
									      do  apply 'set_hosts'/1
										      ([_rec2|[]])
										  let <_cor18> =
										      {'state',[],{1,19,10},'false',1,'true','auto_per_run','false',_cor12,'false','false',[],'undefined',[],'false','undefined'}
										  in  %% Line 516
										      {'ok',_cor18}
									  -| ['compiler_generated'] )
									( <_cor47> when 'true' ->
									      ( call ( 'erlang'
										       -| ['compiler_generated'] ):( 'error'
														     -| ['compiler_generated'] )
										    (( {'badrecord','target_info'}
										       -| ['compiler_generated'] ))
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								      end
								      -| ['compiler_generated'] )
						( <_cor34> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','target_info'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
	  ( <_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19})
		  -| [{'function_name',{'init',1}}] )
	    -| ['compiler_generated'] )
	end
'naming'/0 =
    %% Line 518
    fun () ->
	let <_cor0> =
	    %% Line 519
	    call 'test_server_sup':'hoststr'
		()
	in  %% Line 519
	    case call 'lists':'member'
		     (46, _cor0) of
	      %% Line 520
	      <'true'> when 'true' ->
		  [45|[110|[97|[109|[101]]]]]
	      %% Line 521
	      <'false'> when 'true' ->
		  [45|[115|[110|[97|[109|[101]]]]]]
	      ( <_cor1> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor1})
		-| ['compiler_generated'] )
	    end
'handle_call'/3 =
    %% Line 531
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'kill_slavenodes',_X_From,State> when 'true' ->
	      let <Nodes> =
		  %% Line 532
		  call 'test_server_node':'kill_nodes'
		      ()
	      in  %% Line 533
		  {'reply',Nodes,State}
	  %% Line 540
	  <{'set_hosts',Hosts},_X_From,State> when 'true' ->
	      do  %% Line 541
		  apply 'set_hosts'/1
		      (Hosts)
		  %% Line 542
		  {'reply','ok',State}
	  %% Line 551
	  <'get_hosts',_X_From,State> when 'true' ->
	      let <Hosts> =
		  %% Line 552
		  apply 'get_hosts'/0
		      ()
	      in  %% Line 553
		  {'reply',Hosts,State}
	  %% Line 578
	  <{'add_job',Dir,Name,TopCase,Skip},_X_From,State> when 'true' ->
	      let <LogDir> =
		  %% Line 579
		  call 'erlang':'++'
		      (Dir, [46|[108|[111|[103|[115]]]]])
	      in  %% Line 581
		  ( case State of
		      ( <( {'state',_cor191,_cor192,_cor193,_cor194,_cor195,_cor196,_cor197,_cor198,_cor199,_rec4,_cor200,_cor201,_cor202,_cor203,_cor204}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_cor9> =
				case _rec4 of
				  %% Line 582
				  <'false'> when 'true' ->
				      []
				  %% Line 583
				  <CoverInfo> when 'true' ->
				      [{'cover',CoverInfo}|[]]
				end
			    in  let <_cor14> =
				    %% Line 586
				    case _cor204 of
				      %% Line 587
				      <'undefined'> when 'true' ->
					  _cor9
				      %% Line 588
				      <Seed> when 'true' ->
					  [{'random_seed',Seed}|_cor9]
				    end
				in  %% Line 590
				    case call 'lists':'keysearch'
					     (Name, 1, _cor191) of
				      %% Line 591
				      <'false'> when 'true' ->
					  %% Line 592
					  case TopCase of
					    %% Line 593
					    <{'spec',SpecName}> when 'true' ->
						let <Pid> =
						    %% Line 594
						    apply 'spawn_tester'/10
							(%% Line 595
							 'test_server_ctrl', %% Line 595
									     'do_spec', %% Line 596
											[SpecName|[{_cor194,_cor195}|%% Line 597
														     []]], %% Line 598
															   LogDir, %% Line 598
																   Name, _cor192, _cor193, _cor196, _cor201, _cor14)
						in  let <NewJobs> =
							%% Line 602
							[{Name,Pid}|_cor191]
						    in  let <_cor36> =
							    %% Line 603
							    call 'erlang':'setelement'
								(2, State, NewJobs)
							in  %% Line 603
							    {'reply','ok',_cor36}
					    %% Line 604
					    <{'command_line',SpecList}> when 'true' ->
						let <Pid> =
						    %% Line 605
						    apply 'spawn_tester'/10
							(%% Line 606
							 'test_server_ctrl', %% Line 606
									     'do_spec_list', %% Line 607
											     [SpecList|[{_cor194,_cor195}|%% Line 608
															  []]], %% Line 609
																LogDir, %% Line 609
																	Name, _cor192, _cor193, _cor196, _cor201, _cor14)
						in  let <NewJobs> =
							%% Line 613
							[{Name,Pid}|_cor191]
						    in  let <_cor55> =
							    %% Line 614
							    call 'erlang':'setelement'
								(2, State, NewJobs)
							in  %% Line 614
							    {'reply','ok',_cor55}
					    %% Line 615
					    <_cor478> when 'true' ->
						%% Line 616
						case _cor203 of
						  %% Line 617
						  <{CliPid,Fun}> when 'true' ->
						      let <Result> =
							  %% Line 618
							  apply 'count_test_cases'/2
							      (TopCase, Skip)
						      in  do  %% Line 619
							      apply Fun
								  (CliPid, Result)
							      %% Line 620
							      {'reply','ok',State}
						  %% Line 621
						  <_cor494> when 'true' ->
						      let <Cfg> =
							  %% Line 622
							  apply 'make_config'/1
							      ([])
						      in  let <Pid> =
							      %% Line 623
							      apply 'spawn_tester'/10
								  (%% Line 624
								   'test_server_ctrl', %% Line 624
										       'do_test_cases', %% Line 625
													[TopCase|[Skip|[Cfg|%% Line 626
															    [{_cor194,_cor195}|%% Line 627
																	       []]]]], %% Line 628
																		       LogDir, %% Line 628
																			       Name, _cor192, _cor193, _cor196, _cor201, _cor14)
							  in  let <NewJobs> =
								  %% Line 632
								  [{Name,Pid}|_cor191]
							      in  let <_cor78> =
								      %% Line 633
								      call 'erlang':'setelement'
									  (2, State, NewJobs)
								  in  %% Line 633
								      {'reply','ok',_cor78}
						end
					  end
				      %% Line 636
				      <_cor616> when 'true' ->
					  %% Line 637
					  {'reply',{'error','name_already_in_use'},State}
				    end
			-| ['compiler_generated'] )
		      ( <_cor205> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 648
	  <'jobs',_X_From,State> when 'true' ->
	      %% Line 649
	      ( case State of
		  ( <( {'state',_rec32,_cor617,_cor618,_cor619,_cor620,_cor621,_cor622,_cor623,_cor624,_cor625,_cor626,_cor627,_cor628,_cor629,_cor630}
		       -| ['compiler_generated'] )> when 'true' ->
			{'reply',_rec32,State}
		    -| ['compiler_generated'] )
		  ( <_cor631> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 659
	  <{'abort_current_testcase',Reason},_X_From,State> when 'true' ->
	      %% Line 660
	      ( case State of
		  ( <( {'state',_rec33,_cor632,_cor633,_cor634,_cor635,_cor636,_cor637,_cor638,_cor639,_cor640,_cor641,_cor642,_cor643,_cor644,_cor645}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec33 of
			  %% Line 661
			  <[{_cor647,Pid}|_cor648]> when 'true' ->
			      let <_cor86> =
				  %% Line 662
				  call 'erlang':'self'
				      ()
			      in  do  %% Line 662
				      call 'erlang':'!'
					  (Pid, {'abort_current_testcase',Reason,_cor86})
				      %% Line 663
				      receive
					%% Line 664
					<{_cor649,'abort_current_testcase',Result}>
					    when call 'erlang':'=:='
						  (_cor649,
						   Pid) ->
					    %% Line 665
					    {'reply',Result,State}
				      after %% Line 666
					    10000 ->
					%% Line 667
					{'reply',{'error','no_testcase_running'},State}
			  %% Line 669
			  <_cor650> when 'true' ->
			      %% Line 670
			      {'reply',{'error','no_testcase_running'},State}
			end
		    -| ['compiler_generated'] )
		  ( <_cor646> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 681
	  <{'finish',Fini},_X_From,State> when 'true' ->
	      %% Line 682
	      ( case State of
		  ( <( {'state',_rec34,_cor651,_cor652,_cor653,_cor654,_cor655,_cor656,_cor657,_cor658,_cor659,_cor660,_cor661,_cor662,_cor663,_cor664}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec34 of
			  %% Line 683
			  <[]> when 'true' ->
			      let <_cor94> =
				  %% Line 684
				  ( fun (_cor92) ->
					case _cor92 of
					  <{Cli,Fun}> when 'true' ->
					      apply Fun
						  (Cli, Fini)
					  ( <_cor93> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor93})
						  -| [{'function_name',{'-handle_call/3-fun-0-',1}}] )
					    -| ['compiler_generated'] )
					end
				    -| [{'id',{0,0,'-handle_call/3-fun-0-'}}] )
			      in  do  %% Line 684
				      call 'lists':'foreach'
					  (_cor94, _cor662)
				      let <_cor97> =
					  %% Line 686
					  call 'erlang':'setelement'
					      (8, State, 'false')
				      in  let <_cor99> =
					      %% Line 687
					      call 'erlang':'self'
						  ()
					  in  %% Line 687
					      {'stop','shutdown',{'ok',_cor99},_cor97}
			  %% Line 688
			  <_X_SomeJobs> when 'true' ->
			      let <_cor102> =
				  %% Line 689
				  call 'erlang':'setelement'
				      (8, State, Fini)
			      in  let <_cor104> =
				      %% Line 690
				      call 'erlang':'self'
					  ()
				  in  %% Line 690
				      {'reply',{'ok',_cor104},_cor102}
			end
		    -| ['compiler_generated'] )
		  ( <_cor665> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 700
	  <{'idle_notify',Fun},{Cli,_X_Ref},State> when 'true' ->
	      %% Line 701
	      ( case State of
		  ( <( {'state',_rec38,_cor713,_cor714,_cor715,_cor716,_cor717,_cor718,_cor719,_cor720,_cor721,_cor722,_cor723,_cor724,_cor725,_cor726}
		       -| ['compiler_generated'] )> when 'true' ->
			do  case _rec38 of
			      %% Line 702
			      <[]> when 'true' ->
				  let <_cor108> =
				      call 'erlang':'self'
					  ()
				  in  call 'erlang':'!'
					  (_cor108, 'report_idle')
			      %% Line 703
			      <_cor728> when 'true' ->
				  'ok'
			    end
			    let <_cor117> =
				%% Line 706
				call 'erlang':'self'
				    ()
			    in  let <_rec40> =
				    %% Line 706
				    [{Cli,Fun}|_cor724]
				in  let <_cor116> =
					%% Line 706
					call 'erlang':'setelement'
					    (14, State, _rec40)
				    in  %% Line 706
					{'reply',{'ok',_cor117},_cor116}
		    -| ['compiler_generated'] )
		  ( <_cor727> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 715
	  <{'start_get_totals',Fun},{Cli,_X_Ref},State> when 'true' ->
	      let <_cor122> =
		  %% Line 716
		  call 'erlang':'self'
		      ()
	      in  let <_rec42> = {%% Line 716
		       Cli,%% Line 716
			   Fun}
		  in  %% Line 716
		      case State of
			<{'state',_cor760,_cor761,_cor762,_cor763,_cor764,_cor765,_cor766,_cor767,_cor768,_cor769,_cor770,_cor771,_cor772,_cor773,_cor774}> when 'true' ->
			    let <_cor121> =
				call 'erlang':'setelement'
				    (15, State, _rec42)
			    in  {'reply',{'ok',_cor122},_cor121}
			( <_cor775> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','state'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  %% Line 725
	  <'stop_get_totals',{_X_Cli,_X_Ref},State> when 'true' ->
	      %% Line 726
	      case State of
		<{'state',_cor776,_cor777,_cor778,_cor779,_cor780,_cor781,_cor782,_cor783,_cor784,_cor785,_cor786,_cor787,_cor788,_cor789,_cor790}> when 'true' ->
		    let <_cor125> =
			call 'erlang':'setelement'
			    (15, State, 'false')
		    in  {'reply','ok',_cor125}
		( <_cor791> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 744
	  <'get_levels',_X_From,State> when 'true' ->
	      %% Line 745
	      ( case State of
		  ( <( {'state',_cor792,_rec45,_cor793,_cor794,_cor795,_cor796,_cor797,_cor798,_cor799,_cor800,_cor801,_cor802,_cor803,_cor804,_cor805}
		       -| ['compiler_generated'] )> when 'true' ->
			{'reply',_rec45,State}
		    -| ['compiler_generated'] )
		  ( <_cor806> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 755
	  <{'set_levels',Show,Major,Minor},_X_From,State> when 'true' ->
	      let <_rec46> = {%% Line 756
		   Show,%% Line 756
			Major,%% Line 756
			      Minor}
	      in  %% Line 756
		  case State of
		    <{'state',_cor807,_cor808,_cor809,_cor810,_cor811,_cor812,_cor813,_cor814,_cor815,_cor816,_cor817,_cor818,_cor819,_cor820,_cor821}> when 'true' ->
			let <_cor131> =
			    call 'erlang':'setelement'
				(3, State, _rec46)
			in  {'reply','ok',_cor131}
		    ( <_cor822> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','state'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 764
	  <{'reject_io_reqs',Bool},_X_From,State> when 'true' ->
	      %% Line 765
	      case State of
		<{'state',_cor823,_cor824,_cor825,_cor826,_cor827,_cor828,_cor829,_cor830,_cor831,_cor832,_cor833,_cor834,_cor835,_cor836,_cor837}> when 'true' ->
		    let <_cor134> =
			call 'erlang':'setelement'
			    (4, State, Bool)
		    in  {'reply','ok',_cor134}
		( <_cor838> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 773
	  <{'multiply_timetraps',N},_X_From,State> when 'true' ->
	      %% Line 774
	      case State of
		<{'state',_cor839,_cor840,_cor841,_cor842,_cor843,_cor844,_cor845,_cor846,_cor847,_cor848,_cor849,_cor850,_cor851,_cor852,_cor853}> when 'true' ->
		    let <_cor137> =
			call 'erlang':'setelement'
			    (5, State, N)
		    in  {'reply','ok',_cor137}
		( <_cor854> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 783
	  <{'scale_timetraps',Bool},_X_From,State> when 'true' ->
	      %% Line 784
	      case State of
		<{'state',_cor855,_cor856,_cor857,_cor858,_cor859,_cor860,_cor861,_cor862,_cor863,_cor864,_cor865,_cor866,_cor867,_cor868,_cor869}> when 'true' ->
		    let <_cor140> =
			call 'erlang':'setelement'
			    (6, State, Bool)
		    in  {'reply','ok',_cor140}
		( <_cor870> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 793
	  <'get_timetrap_parameters',_X_From,State> when 'true' ->
	      %% Line 794
	      ( case State of
		  ( <( {'state',_cor871,_cor872,_cor873,_rec51,_cor874,_cor875,_cor876,_cor877,_cor878,_cor879,_cor880,_cor881,_cor882,_cor883,_cor884}
		       -| ['compiler_generated'] )> when 'true' ->
			{'reply',{_rec51,_cor874},State}
		    -| ['compiler_generated'] )
		  ( <_cor885> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 814
	  <{'trace',TraceFile},_X_From,State = {'state',_cor901,_cor902,_cor903,_cor904,_cor905,_cor906,_cor907,_cor908,'false',_cor909,_cor910,_cor911,_cor912,_cor913,_cor914}> when 'true' ->
	      %% Line 816
	      case call 'test_server_node':'start_tracer_node'
		       (TraceFile, _cor908) of
		%% Line 817
		<{'ok',Tracer}> when 'true' ->
		    let <_cor150> =
			call 'erlang':'setelement'
			    (10, State, Tracer)
		    in  {'reply','ok',_cor150}
		%% Line 818
		<Error> when 'true' ->
		    {'reply',Error,State}
	      end
	  %% Line 820
	  <{'trace',_X_TraceFile},_X_From,State> when 'true' ->
	      %% Line 821
	      {'reply',{'error','already_tracing'},State}
	  %% Line 829
	  <'stop_trace',_X_From,State = {'state',_cor946,_cor947,_cor948,_cor949,_cor950,_cor951,_cor952,_cor953,'false',_cor954,_cor955,_cor956,_cor957,_cor958,_cor959}> when 'true' ->
	      %% Line 830
	      {'reply',{'error','not_tracing'},State}
	  %% Line 831
	  <'stop_trace',_X_From,State> when 'true' ->
	      %% Line 832
	      ( case State of
		  ( <( {'state',_cor960,_cor961,_cor962,_cor963,_cor964,_cor965,_cor966,_cor967,_rec55,_cor968,_cor969,_cor970,_cor971,_cor972,_cor973}
		       -| ['compiler_generated'] )> when 'true' ->
			let <R> =
			    call 'test_server_node':'stop_tracer_node'
				(_rec55)
			in  let <_cor157> =
				%% Line 833
				call 'erlang':'setelement'
				    (10, State, 'false')
			    in  %% Line 833
				{'reply',R,_cor157}
		    -| ['compiler_generated'] )
		  ( <_cor974> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 841
	  <{'cover',CoverInfo},_X_From,State> when 'true' ->
	      %% Line 842
	      case State of
		<{'state',_cor991,_cor992,_cor993,_cor994,_cor995,_cor996,_cor997,_cor998,_cor999,_cor1000,_cor1001,_cor1002,_cor1003,_cor1004,_cor1005}> when 'true' ->
		    let <_cor160> =
			call 'erlang':'setelement'
			    (11, State, CoverInfo)
		    in  {'reply','ok',_cor160}
		( <_cor1006> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 853
	  <{'create_priv_dir',Value},_X_From,State> when 'true' ->
	      %% Line 854
	      case State of
		<{'state',_cor1007,_cor1008,_cor1009,_cor1010,_cor1011,_cor1012,_cor1013,_cor1014,_cor1015,_cor1016,_cor1017,_cor1018,_cor1019,_cor1020,_cor1021}> when 'true' ->
		    let <_cor163> =
			call 'erlang':'setelement'
			    (7, State, Value)
		    in  {'reply','ok',_cor163}
		( <_cor1022> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 866
	  <{'testcase_callback',ModFunc},_X_From,State> when 'true' ->
	      do  %% Line 867
		  case ModFunc of
		    %% Line 868
		    <{Mod,Func}> when 'true' ->
			do  %% Line 869
			    case call 'code':'is_loaded'
				     (Mod) of
			      %% Line 870
			      <{'file',_cor1023}> when 'true' ->
				  'ok'
			      %% Line 872
			      <'false'> when 'true' ->
				  %% Line 873
				  call 'code':'load_file'
				      (Mod)
			      ( <_cor164> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor164})
				-| ['compiler_generated'] )
			    end
			    %% Line 875
			    case call 'erlang':'function_exported'
				     (Mod, Func, 4) of
			      %% Line 876
			      <'true'> when 'true' ->
				  'ok'
			      %% Line 878
			      <'false'> when 'true' ->
				  %% Line 879
				  call 'io':'format'
				      ('user', %% Line 880
					       [87|[65|[82|[78|[73|[78|[71|[33|[32|[67|[97|[108|[108|[98|[97|[99|[107|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[119|[58|[126|[119|[47|[52|[32|[117|[110|[100|[101|[102|[105|[110|[101|[100|[46|[126|[110|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 881
																																								[Mod|[Func|[]]])
			      ( <_cor165> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor165})
				-| ['compiler_generated'] )
			    end
		    %% Line 883
		    <_cor1024> when 'true' ->
			'ok'
		  end
		  %% Line 886
		  case State of
		    <{'state',_cor1025,_cor1026,_cor1027,_cor1028,_cor1029,_cor1030,_cor1031,_cor1032,_cor1033,_cor1034,_cor1035,_cor1036,_cor1037,_cor1038,_cor1039}> when 'true' ->
			let <_cor169> =
			    call 'erlang':'setelement'
				(13, State, ModFunc)
			in  {'reply','ok',_cor169}
		    ( <_cor1040> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','state'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 894
	  <{'set_random_seed',Seed},_X_From,State> when 'true' ->
	      %% Line 895
	      case State of
		<{'state',_cor1041,_cor1042,_cor1043,_cor1044,_cor1045,_cor1046,_cor1047,_cor1048,_cor1049,_cor1050,_cor1051,_cor1052,_cor1053,_cor1054,_cor1055}> when 'true' ->
		    let <_cor172> =
			call 'erlang':'setelement'
			    (16, State, Seed)
		    in  {'reply','ok',_cor172}
		( <_cor1056> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 903
	  <'stop',_X_From,State> when 'true' ->
	      %% Line 904
	      {'stop','shutdown','ok',State}
	  %% Line 913
	  <'get_target_info',_X_From,State> when 'true' ->
	      %% Line 914
	      ( case State of
		  ( <( {'state',_cor1057,_cor1058,_cor1059,_cor1060,_cor1061,_cor1062,_cor1063,_rec61,_cor1064,_cor1065,_cor1066,_cor1067,_cor1068,_cor1069,_cor1070}
		       -| ['compiler_generated'] )> when 'true' ->
			{'reply',_rec61,State}
		    -| ['compiler_generated'] )
		  ( <_cor1071> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 922
	  <{'start_node',Name,Type,Options},From,State> when 'true' ->
	      %% Line 925
	      ( case State of
		  ( <( {'state',_cor1072,_cor1073,_cor1074,_cor1075,_cor1076,_cor1077,_cor1078,_rec62,_cor1079,_cor1080,_cor1081,_cor1082,_cor1083,_cor1084,_cor1085}
		       -| ['compiler_generated'] )> when 'true' ->
			do  call 'test_server_node':'start_node'
				(Name, Type, Options, From, _rec62)
			    %% Line 926
			    {'noreply',State}
		    -| ['compiler_generated'] )
		  ( <_cor1086> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 935
	  <{'wait_for_node',Node},From,State> when 'true' ->
	      let <_cor181> =
		  %% Line 937
		  case call 'ets':'lookup'
			   ('slave_tab', Node) of
		    %% Line 938
		    <[]> when 'true' ->
			%% Line 939
			( case State of
			    ( <( {'state',_cor1087,_cor1088,_cor1089,_cor1090,_cor1091,_cor1092,_cor1093,_cor1094,_cor1095,_cor1096,_rec63,_cor1097,_cor1098,_cor1099,_cor1100}
				 -| ['compiler_generated'] )> when 'true' ->
				  [{Node,From}|_rec63]
			      -| ['compiler_generated'] )
			    ( <_cor1101> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 940
		    <_cor1102> when 'true' ->
			do  %% Line 941
			    call 'gen_server':'reply'
				(From, 'ok')
			    %% Line 942
			    ( case State of
				( <( {'state',_cor1103,_cor1104,_cor1105,_cor1106,_cor1107,_cor1108,_cor1109,_cor1110,_cor1111,_cor1112,_rec64,_cor1113,_cor1114,_cor1115,_cor1116}
				     -| ['compiler_generated'] )> when 'true' ->
				      _rec64
				  -| ['compiler_generated'] )
				( <_cor1117> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','state'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		  end
	      in  %% Line 944
		  case State of
		    <{'state',_cor1118,_cor1119,_cor1120,_cor1121,_cor1122,_cor1123,_cor1124,_cor1125,_cor1126,_cor1127,_cor1128,_cor1129,_cor1130,_cor1131,_cor1132}> when 'true' ->
			let <_cor185> =
			    call 'erlang':'setelement'
				(12, State, _cor181)
			in  {'noreply',_cor185}
		    ( <_cor1133> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','state'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 952
	  <{'stop_node',Name},_X_From,State> when 'true' ->
	      let <R> =
		  %% Line 953
		  call 'test_server_node':'stop_node'
		      (Name)
	      in  %% Line 954
		  {'reply',R,State}
	  %% Line 961
	  <{'is_release_available',Release},_X_From,State> when 'true' ->
	      let <R> =
		  %% Line 962
		  call 'test_server_node':'is_release_available'
		      (Release)
	      in  %% Line 963
		  {'reply',R,State}
	  ( <_cor190,_cor189,_cor188> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor190,_cor189,_cor188})
		  -| [{'function_name',{'handle_call',3}}] )
	    -| ['compiler_generated'] )
	end
'set_hosts'/1 =
    %% Line 966
    fun (_cor0) ->
	%% Line 967
	call 'erlang':'put'
	    ('test_server_hosts', _cor0)
'handle_cast'/2 =
    %% Line 974
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'node_started',Node},State> when 'true' ->
	      %% Line 975
	      ( case State of
		  ( <( {'state',_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_rec66,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31}
		       -| ['compiler_generated'] )> when 'true' ->
			do  case _rec66 of
			      %% Line 976
			      <'false'> when 'true' ->
				  'ok'
			      %% Line 977
			      <Trc> when 'true' ->
				  call 'test_server_node':'trace_nodes'
				      (Trc, [Node|[]])
			    end
			    let <_cor11> =
				%% Line 980
				case call 'lists':'keysearch'
					 (Node, 1, _cor27) of
				  %% Line 981
				  <{'value',{_cor48,From}}>
				      when call 'erlang':'=:='
					    (_cor48,
					     Node) ->
				      do  %% Line 982
					  call 'gen_server':'reply'
					      (From, 'ok')
					  %% Line 983
					  call 'lists':'keydelete'
					      (Node, 1, _cor27)
				  %% Line 984
				  <'false'> when 'true' ->
				      _cor27
				  ( <_cor10> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor10})
				    -| ['compiler_generated'] )
				end
			    in  let <_cor15> =
				    %% Line 987
				    call 'erlang':'setelement'
					(12, State, _cor11)
				in  %% Line 987
				    {'noreply',_cor15}
		    -| ['compiler_generated'] )
		  ( <_cor32> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16})
		  -| [{'function_name',{'handle_cast',2}}] )
	    -| ['compiler_generated'] )
	end
'handle_info'/2 =
    %% Line 998
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'report_idle',State> when 'true' ->
	      %% Line 999
	      ( case State of
		  ( <( {'state',_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_rec71,_cor60,_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor9> =
			    %% Line 1000
			    ( fun (_cor7) ->
				  case _cor7 of
				    <{Cli,Fun}> when 'true' ->
					apply Fun
					    (Cli, _rec71)
				    ( <_cor8> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor8})
					    -| [{'function_name',{'-handle_info/2-fun-0-',1}}] )
				      -| ['compiler_generated'] )
				  end
			      -| [{'id',{0,0,'-handle_info/2-fun-0-'}}] )
			in  do  %% Line 1000
				call 'lists':'foreach'
				    (_cor9, _cor65)
				let <_cor12> =
				    %% Line 1002
				    call 'erlang':'setelement'
					(14, State, [])
				in  %% Line 1002
				    {'noreply',_cor12}
		    -| ['compiler_generated'] )
		  ( <_cor68> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1005
	  <{'EXIT',Pid,Reason},State> when 'true' ->
	      %% Line 1006
	      ( case State of
		  ( <( {'state',_rec74,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107,_cor108,_cor109,_cor110,_cor111,_cor112,_cor113}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'lists':'keysearch'
				 (Pid, 2, _rec74) of
			  %% Line 1007
			  <'false'> when 'true' ->
			      %% Line 1009
			      {'noreply',State}
			  %% Line 1010
			  <{'value',{Name,_cor115}}> when 'true' ->
			      let <NewJobs> =
				  %% Line 1011
				  call 'lists':'keydelete'
				      (Pid, 2, _rec74)
			      in  do  %% Line 1012
				      case Reason of
					%% Line 1013
					<'normal'> when 'true' ->
					    'ok'
					%% Line 1015
					<'killed'> when 'true' ->
					    %% Line 1016
					    call 'io':'format'
						([83|[117|[105|[116|[101|[32|[126|[116|[115|[32|[119|[97|[115|[32|[107|[105|[108|[108|[101|[100|[10]]]]]]]]]]]]]]]]]]]]], [Name|[]])
					%% Line 1017
					<_X_Other> when 'true' ->
					    %% Line 1018
					    call 'io':'format'
						([83|[117|[105|[116|[101|[32|[126|[116|[115|[32|[119|[97|[115|[32|[107|[105|[108|[108|[101|[100|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1019
																																[Name|[Reason|[]]])
				      end
				      let <_cor21> =
					  %% Line 1021
					  call 'erlang':'setelement'
					      (2, State, NewJobs)
				      in  %% Line 1022
					  ( case _cor21 of
					      ( <( {'state',_cor147,_cor148,_cor149,_cor150,_cor151,_cor152,_rec77,_cor153,_cor154,_cor155,_cor156,_cor157,_cor158,_cor159,_cor160}
						   -| ['compiler_generated'] )> when 'true' ->
						    %% Line 1023
						    case NewJobs of
						      %% Line 1024
						      <[]> when 'true' ->
							  let <_cor30> =
							      %% Line 1025
							      ( fun (_cor28) ->
								    case _cor28 of
								      <{Cli,Fun}> when 'true' ->
									  apply Fun
									      (Cli, _rec77)
								      ( <_cor29> when 'true' ->
									    ( primop 'match_fail'
										  ({'function_clause',_cor29})
									      -| [{'function_name',{'-handle_info/2-fun-1-',1}}] )
									-| ['compiler_generated'] )
								    end
								-| [{'id',{0,0,'-handle_info/2-fun-1-'}}] )
							  in  do  %% Line 1025
								  call 'lists':'foreach'
								      (_cor30, _cor158)
								  %% Line 1027
								  case _rec77 of
								    %% Line 1028
								    <'false'> when 'true' ->
									let <_cor33> =
									    %% Line 1029
									    call 'erlang':'setelement'
										(14, _cor21, [])
									in  %% Line 1029
									    {'noreply',_cor33}
								    %% Line 1030
								    <_cor193> when 'true' ->
									let <_cor36> =
									    %% Line 1034
									    call 'erlang':'setelement'
										(8, _cor21, 'false')
									in  %% Line 1034
									    {'stop','shutdown',_cor36}
								  end
						      %% Line 1036
						      <_cor210> when 'true' ->
							  %% Line 1037
							  case _rec77 of
							    %% Line 1038
							    <'abort'> when 'true' ->
								let <_cor42> =
								    %% Line 1039
								    ( fun (_cor40) ->
									  case _cor40 of
									    <{Cli,Fun}> when 'true' ->
										apply Fun
										    (Cli, _rec77)
									    ( <_cor41> when 'true' ->
										  ( primop 'match_fail'
											({'function_clause',_cor41})
										    -| [{'function_name',{'-handle_info/2-fun-2-',1}}] )
									      -| ['compiler_generated'] )
									  end
								      -| [{'id',{0,0,'-handle_info/2-fun-2-'}}] )
								in  do  %% Line 1039
									call 'lists':'foreach'
									    (_cor42, _cor158)
									let <_cor45> =
									    %% Line 1041
									    call 'erlang':'setelement'
										(8, _cor21, 'false')
									in  %% Line 1041
									    {'stop','shutdown',_cor45}
							    %% Line 1042
							    <_cor242> when 'true' ->
								%% Line 1043
								{'noreply',_cor21}
							  end
						    end
						-| ['compiler_generated'] )
					      ( <_cor161> when 'true' ->
						    ( call ( 'erlang'
							     -| ['compiler_generated'] ):( 'error'
											   -| ['compiler_generated'] )
							  (( {'badrecord','state'}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					    -| ['compiler_generated'] )
			  ( <_cor48> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor48})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor114> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1057
	  <{'tcp_closed',Sock},State = {'state',_cor243,_cor244,_cor245,_cor246,_cor247,_cor248,_cor249,_cor250,_cor251,_cor252,_cor253,_cor254,_cor255,_cor256,_cor257}>
	      when call 'erlang':'=:='
		    (_cor251,
		     Sock) ->
	      let <_cor51> =
		  %% Line 1060
		  call 'erlang':'setelement'
		      (10, State, 'false')
	      in  %% Line 1060
		  {'noreply',_cor51}
	  %% Line 1061
	  <{'tcp_closed',Sock},State> when 'true' ->
	      do  %% Line 1062
		  call 'test_server_node':'nodedown'
		      (Sock)
		  %% Line 1063
		  {'noreply',State}
	  %% Line 1064
	  <_cor274,State> when 'true' ->
	      %% Line 1066
	      {'noreply',State}
	end
'terminate'/2 =
    %% Line 1075
    fun (_cor1,_cor0) ->
	do  %% Line 1076
	    call 'test_server_sup':'util_stop'
		()
	    %% Line 1077
	    ( case _cor0 of
		( <( {'state',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_rec84,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22}
		     -| ['compiler_generated'] )> when 'true' ->
		      do  case _rec84 of
			    %% Line 1078
			    <'false'> when 'true' ->
				'ok'
			    %% Line 1079
			    <Sock> when 'true' ->
				call 'test_server_node':'stop_tracer_node'
				    (Sock)
			  end
			  do  %% Line 1081
			      apply 'kill_all_jobs'/1
				  (_cor9)
			      do  %% Line 1082
				  call 'test_server_node':'kill_nodes'
				      ()
				  %% Line 1083
				  'ok'
		  -| ['compiler_generated'] )
		( <_cor23> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'kill_all_jobs'/1 =
    %% Line 1085
    fun (_cor0) ->
	case _cor0 of
	  <[{_X_Name,JobPid}|Jobs]> when 'true' ->
	      do  %% Line 1086
		  call 'erlang':'exit'
		      (JobPid, 'kill')
		  %% Line 1087
		  apply 'kill_all_jobs'/1
		      (Jobs)
	  %% Line 1088
	  <[]> when 'true' ->
	      %% Line 1089
	      'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'kill_all_jobs',1}}] )
	    -| ['compiler_generated'] )
	end
'spawn_tester'/10 =
    %% Line 1117
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 1119
	    ( fun () ->
		  %% Line 1120
		  apply 'init_tester'/10
		      (_cor9, _cor8, _cor7, _cor6, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
	      -| [{'id',{0,0,'-spawn_tester/10-fun-0-'}}] )
	in  %% Line 1119
	    call 'erlang':'spawn_link'
		(_cor10)
'init_tester'/10 =
    %% Line 1124
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Mod,Func,Args,Dir,Name,Levels = {_cor53,_cor54,MinLev},%% Line 1125
								  RejectIoReqs,%% Line 1125
									       CreatePrivDir,%% Line 1125
											     TCCallback,%% Line 1125
													ExtraTools> when 'true' ->
	      do  %% Line 1126
		  call 'erlang':'process_flag'
		      ('trap_exit', 'true')
		  do  %% Line 1127
		      call 'test_server_io':'start_link'
			  ()
		      do  %% Line 1128
			  call 'erlang':'put'
			      ('test_server_name', Name)
			  do  %% Line 1129
			      call 'erlang':'put'
				  ('test_server_dir', Dir)
			      do  %% Line 1130
				  call 'erlang':'put'
				      ('test_server_total_time', 0)
				  do  %% Line 1131
				      call 'erlang':'put'
					  ('test_server_ok', 0)
				      do  %% Line 1132
					  call 'erlang':'put'
					      ('test_server_failed', 0)
					  do  %% Line 1133
					      call 'erlang':'put'
						  ('test_server_skipped', {0,0})
					      do  %% Line 1134
						  call 'erlang':'put'
						      ('test_server_minor_level', MinLev)
						  do  %% Line 1135
						      call 'erlang':'put'
							  ('test_server_create_priv_dir', CreatePrivDir)
						      let <_cor10> =
							  %% Line 1136
							  call 'proplists':'get_value'
							      ('random_seed', ExtraTools)
						      in  do  %% Line 1136
							      call 'erlang':'put'
								  ('test_server_random_seed', _cor10)
							      do  %% Line 1137
								  call 'erlang':'put'
								      ('test_server_testcase_callback', TCCallback)
								  do  %% Line 1138
								      case call 'os':'getenv'
									       ([84|[69|[83|[84|[95|[83|[69|[82|[86|[69|[82|[95|[70|[82|[65|[77|[69|[87|[79|[82|[75]]]]]]]]]]]]]]]]]]]]]) of
									%% Line 1139
									<FW>
									    when let <_cor11> =
										  call 'erlang':'=:='
										      (FW, 'false')
									      in  let <_cor12> =
										      call 'erlang':'=:='
											  (FW, [117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]])
										  in  call 'erlang':'or'
											  (_cor11, _cor12) ->
									    %% Line 1140
									    call 'erlang':'put'
										('test_server_framework', '$none')
									%% Line 1141
									<FW> when 'true' ->
									    let <_cor13> =
										%% Line 1142
										call 'erlang':'list_to_atom'
										    (FW)
									    in  do  %% Line 1142
										    call 'erlang':'put'
											('test_server_framework_name', _cor13)
										    %% Line 1143
										    case call 'os':'getenv'
											     ([84|[69|[83|[84|[95|[83|[69|[82|[86|[69|[82|[95|[70|[82|[65|[77|[69|[87|[79|[82|[75|[95|[78|[65|[77|[69]]]]]]]]]]]]]]]]]]]]]]]]]]) of
										      %% Line 1144
										      <FWName>
											  when let <_cor14> =
												call 'erlang':'=:='
												    (FWName, 'false')
											    in  let <_cor15> =
												    call 'erlang':'=:='
													(FWName, [117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]])
												in  call 'erlang':'or'
													(_cor14, _cor15) ->
											  %% Line 1145
											  call 'erlang':'put'
											      ('test_server_framework_name', '$none')
										      %% Line 1146
										      <FWName> when 'true' ->
											  let <_cor16> =
											      %% Line 1147
											      call 'erlang':'list_to_atom'
												  (FWName)
											  in  %% Line 1147
											      call 'erlang':'put'
												  ('test_server_framework_name', _cor16)
										    end
								      end
								      let <LogOpts> =
									  %% Line 1152
									  call 'test_server_sup':'framework_call'
									      ('get_logopts', [], [])
								      in  do  %% Line 1153
									      call 'erlang':'put'
										  ('test_server_logopts', LogOpts)
									      let <StartedExtraTools> =
										  %% Line 1155
										  apply 'start_extra_tools'/1
										      (ExtraTools)
									      in  do  %% Line 1157
										      call 'test_server_io':'set_job_name'
											  (Name)
										      let <_cor21> =
											  %% Line 1159
											  call 'lists':'member'
											      ('no_nl', LogOpts)
										      in  let <_cor22> =
											      %% Line 1159
											      call 'erlang':'not'
												  (_cor21)
											  in  do  %% Line 1158
												  call 'test_server_io':'set_gl_props'
												      ([{'levels',Levels}|%% Line 1159
															  [{'auto_nl',_cor22}|%% Line 1160
																	      [{'reject_io_reqs',RejectIoReqs}|[]]]])
												  let <_cor24> =
												      %% Line 1161
												      call 'test_server_io':'get_gl'
													  ('true')
												  in  let <_cor23> =
													  %% Line 1161
													  call 'erlang':'self'
													      ()
												      in  do  %% Line 1161
													      call 'erlang':'group_leader'
														  (_cor24, _cor23)
													      %% Line 1162
													      case apply 'ts_tc'/3
														       (Mod, Func, Args) of
														<{TimeMy,Result}> when 'true' ->
														    do  %% Line 1163
															apply 'set_io_buffering'/1
															    ('undefined')
															do  %% Line 1164
															    call 'test_server_io':'set_job_name'
																('undefined')
															    do  catch
																    %% Line 1165
																    apply 'stop_extra_tools'/1
																	(StartedExtraTools)
																do  %% Line 1166
																    case Result of
																      %% Line 1167
																      <{'EXIT','test_suites_done'}> when 'true' ->
																	  'ok'
																      %% Line 1169
																      <{'EXIT',_X_Pid,Reason}> when 'true' ->
																	  %% Line 1170
																	  apply 'print'/3
																	      (1, [69|[88|[73|[84|[44|[32|[114|[101|[97|[115|[111|[110|[32|[126|[112]]]]]]]]]]]]]]], [Reason|[]])
																      %% Line 1171
																      <{'EXIT',Reason}> when 'true' ->
																	  do  %% Line 1172
																	      apply 'report_severe_error'/1
																		  (Reason)
																	      %% Line 1173
																	      apply 'print'/3
																		  (1, [69|[88|[73|[84|[44|[32|[114|[101|[97|[115|[111|[110|[32|[126|[112]]]]]]]]]]]]]]], [Reason|[]])
																      ( <_cor26> when 'true' ->
																	    primop 'match_fail'
																		({'case_clause',_cor26})
																	-| ['compiler_generated'] )
																    end
																    let <Time> =
																	%% Line 1175
																	call 'erlang':'/'
																	    (TimeMy, 1000000)
																    in  let <_cor29> =
																	    %% Line 1177
																	    case call 'erlang':'get'
																		     ('test_server_failed') of
																	      %% Line 1178
																	      <0> when 'true' ->
																		  [79|[107]]
																	      %% Line 1179
																	      <_cor55> when 'true' ->
																		  [70|[65|[73|[76|[69|[68]]]]]]
																	    end
																	in  let <SkippedN,SkipStr> =
																		%% Line 1182
																		case call 'erlang':'get'
																			 ('test_server_skipped') of
																		  %% Line 1183
																		  <{0,0}> when 'true' ->
																		      %% Line 1184
																		      <0,[]>
																		  %% Line 1185
																		  <{USkipped,ASkipped}> when 'true' ->
																		      let <Skipped> =
																			  %% Line 1186
																			  call 'erlang':'+'
																			      (USkipped, ASkipped)
																		      in  let <_cor32> =
																			      %% Line 1187
																			      call 'io_lib':'format'
																				  ([44|[32|[126|[119|[32|[83|[107|[105|[112|[112|[101|[100]]]]]]]]]]]], [Skipped|[]])
																			  in  %% Line 1187
																			      <Skipped,_cor32>
																		  ( <_cor33> when 'true' ->
																			primop 'match_fail'
																			    ({'case_clause',_cor33})
																		    -| ['compiler_generated'] )
																		end
																	    in  let <OkN> =
																		    %% Line 1189
																		    call 'erlang':'get'
																			('test_server_ok')
																		in  let <FailedN> =
																			%% Line 1190
																			call 'erlang':'get'
																			    ('test_server_failed')
																		    in  let <_cor38> =
																			    %% Line 1195
																			    call 'erlang':'+'
																				(OkN, FailedN)
																			in  let <_cor39> =
																				%% Line 1195
																				call 'erlang':'+'
																				    (_cor38, SkippedN)
																			    in  do  %% Line 1191
																				    apply 'print'/3
																					('html', [10|[60|[47|[116|[98|[111|[100|[121|[62|[10|[60|[116|[102|[111|[111|[116|[62|[10|[60|[116|[114|[62|[60|[116|[100|[62|[60|[47|[116|[100|[62|[60|[116|[100|[62|[60|[98|[62|[84|[79|[84|[65|[76|[60|[47|[98|[62|[60|[47|[116|[100|[62|[60|[116|[100|[62|[60|[47|[116|[100|[62|[60|[116|[100|[62|[60|[47|[116|[100|[62|[60|[116|[100|[62|[60|[47|[116|[100|[62|[60|[116|[100|[62|[126|[46|[51|[102|[115|[60|[47|[116|[100|[62|[60|[116|[100|[62|[60|[98|[62|[126|[116|[115|[60|[47|[98|[62|[60|[47|[116|[100|[62|[60|[116|[100|[62|[126|[119|[32|[79|[107|[44|[32|[126|[119|[32|[70|[97|[105|[108|[101|[100|[126|[116|[115|[32|[111|[102|[32|[126|[119|[60|[47|[116|[100|[62|[60|[47|[116|[114|[62|[10|[60|[47|[116|[102|[111|[111|[116|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1195
																																																																																																																																			       [Time|[_cor29|[OkN|[FailedN|[SkipStr|[_cor39|[]]]]]]])
																				    do  %% Line 1197
																					call 'test_server_io':'stop'
																					    (['major'|['html'|['unexpected_io']]])
																					%% Line 1198
																					case call 'erlang':'get'
																						 ('test_server_unexpected_footer') of
																					  <{UnexpectedIoName,UnexpectedIoFooter}> when 'true' ->
																					      %% Line 1199
																					      case apply 'open_html_file'/2
																						       (UnexpectedIoName, ['append']) of
																						<{'ok',UnexpectedIoFd}> when 'true' ->
																						    let <_cor42> =
																							%% Line 1200
																							call 'erlang':'++'
																							    ([10|[60|[47|[112|[114|[101|[62|[10]]]]]]]], UnexpectedIoFooter)
																						    in  do  %% Line 1200
																							    call 'io':'put_chars'
																								(UnexpectedIoFd, _cor42)
																							    do  %% Line 1201
																								call 'file':'close'
																								    (UnexpectedIoFd)
																								%% Line 1202
																								'ok'
																						( <_cor41> when 'true' ->
																						      primop 'match_fail'
																							  ({'badmatch',_cor41})
																						  -| ['compiler_generated'] )
																					      end
																					  ( <_cor40> when 'true' ->
																						primop 'match_fail'
																						    ({'badmatch',_cor40})
																					    -| ['compiler_generated'] )
																					end
														( <_cor25> when 'true' ->
														      primop 'match_fail'
															  ({'badmatch',_cor25})
														  -| ['compiler_generated'] )
													      end
	  ( <_cor52,_cor51,_cor50,_cor49,_cor48,_cor47,_cor46,_cor45,_cor44,_cor43> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor52,_cor51,_cor50,_cor49,_cor48,_cor47,_cor46,_cor45,_cor44,_cor43})
		  -| [{'function_name',{'init_tester',10}}] )
	    -| ['compiler_generated'] )
	end
'report_severe_error'/1 =
    %% Line 1204
    fun (_cor0) ->
	%% Line 1205
	call 'test_server_sup':'framework_call'
	    ('report', ['severe_error'|[_cor0|[]]])
'ts_tc'/3 =
    %% Line 1208
    fun (_cor2,_cor1,_cor0) ->
	let <Before> =
	    %% Line 1209
	    call 'erlang':'now'
		()
	in  let <_cor4> =
		catch
		    %% Line 1210
		    call 'erlang':'apply'
			(_cor2, _cor1, _cor0)
	    in  let <After> =
		    %% Line 1211
		    call 'erlang':'now'
			()
		in  let <Elapsed> =
			%% Line 1212
			apply 'elapsed_time'/2
			    (Before, After)
		    in  %% Line 1213
			{Elapsed,_cor4}
'elapsed_time'/2 =
    %% Line 1215
    fun (_cor1,_cor0) ->
	let <_cor12> =
	    %% Line 1216
	    call 'erlang':'element'
		(1, _cor0)
	in  let <_cor13> =
		%% Line 1216
		call 'erlang':'*'
		    (_cor12, 1000000000000)
	    in  let <_cor10> =
		    %% Line 1217
		    call 'erlang':'element'
			(2, _cor0)
		in  let <_cor11> =
			%% Line 1217
			call 'erlang':'*'
			    (_cor10, 1000000)
		    in  let <_cor14> =
			    %% Line 1216
			    call 'erlang':'+'
				(_cor13, _cor11)
			in  let <_cor9> =
				%% Line 1217
				call 'erlang':'element'
				    (3, _cor0)
			    in  let <_cor15> =
				    %% Line 1217
				    call 'erlang':'+'
					(_cor14, _cor9)
				in  let <_cor5> =
					%% Line 1218
					call 'erlang':'element'
					    (1, _cor1)
				    in  let <_cor6> =
					    %% Line 1218
					    call 'erlang':'*'
						(_cor5, 1000000000000)
					in  let <_cor3> =
						%% Line 1219
						call 'erlang':'element'
						    (2, _cor1)
					    in  let <_cor4> =
						    %% Line 1219
						    call 'erlang':'*'
							(_cor3, 1000000)
						in  let <_cor7> =
							%% Line 1218
							call 'erlang':'+'
							    (_cor6, _cor4)
						    in  let <_cor2> =
							    %% Line 1219
							    call 'erlang':'element'
								(3, _cor1)
							in  let <_cor8> =
								%% Line 1219
								call 'erlang':'+'
								    (_cor7, _cor2)
							    in  %% Line 1217
								call 'erlang':'-'
								    (_cor15, _cor8)
'start_extra_tools'/1 =
    %% Line 1221
    fun (_cor0) ->
	%% Line 1222
	apply 'start_extra_tools'/2
	    (_cor0, [])
'start_extra_tools'/2 =
    %% Line 1223
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'cover',CoverInfo}|ExtraTools],Started> when 'true' ->
	      %% Line 1224
	      case apply 'start_cover'/1
		       (CoverInfo) of
		%% Line 1225
		<{'ok',NewCoverInfo}> when 'true' ->
		    %% Line 1226
		    apply 'start_extra_tools'/2
			(ExtraTools, [{'cover',NewCoverInfo}|Started])
		%% Line 1227
		<{'error',_cor5}> when 'true' ->
		    %% Line 1228
		    apply 'start_extra_tools'/2
			(ExtraTools, Started)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1230
	  <[_cor6|ExtraTools],Started> when 'true' ->
	      %% Line 1231
	      apply 'start_extra_tools'/2
		  (ExtraTools, Started)
	  %% Line 1232
	  <[],Started> when 'true' ->
	      %% Line 1233
	      Started
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'start_extra_tools',2}}] )
	    -| ['compiler_generated'] )
	end
'stop_extra_tools'/1 =
    %% Line 1235
    fun (_cor0) ->
	let <TestDir> =
	    %% Line 1236
	    call 'erlang':'get'
		('test_server_log_dir_base')
	in  do  %% Line 1237
		case call 'lists':'keymember'
			 ('cover', 1, _cor0) of
		  %% Line 1238
		  <'false'> when 'true' ->
		      %% Line 1239
		      apply 'write_default_coverlog'/1
			  (TestDir)
		  %% Line 1240
		  <'true'> when 'true' ->
		      'ok'
		  ( <_cor2> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor2})
		    -| ['compiler_generated'] )
		end
		%% Line 1243
		apply 'stop_extra_tools'/2
		    (_cor0, TestDir)
'stop_extra_tools'/2 =
    %% Line 1245
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'cover',CoverInfo}|ExtraTools],TestDir> when 'true' ->
	      do  %% Line 1246
		  apply 'stop_cover'/2
		      (CoverInfo, TestDir)
		  %% Line 1247
		  apply 'stop_extra_tools'/2
		      (ExtraTools, TestDir)
	  %% Line 1250
	  <[],_cor4> when 'true' ->
	      %% Line 1251
	      'ok'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'stop_extra_tools',2}}] )
	    -| ['compiler_generated'] )
	end
'do_spec'/2 =
    %% Line 1266
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <SpecName,TimetrapSpec>
	      when call 'erlang':'is_list'
		    (SpecName) ->
	      %% Line 1267
	      case call 'file':'consult'
		       (SpecName) of
		%% Line 1268
		<{'ok',TermList}> when 'true' ->
		    %% Line 1269
		    apply 'do_spec_list'/2
			(TermList, TimetrapSpec)
		%% Line 1270
		<{'error',Reason}> when 'true' ->
		    do  %% Line 1271
			call 'io':'format'
			    ([67|[97|[110|[39|[116|[32|[111|[112|[101|[110|[32|[126|[116|[115|[58|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]], [SpecName|[Reason|[]]])
			%% Line 1272
			{'error',{'cant_open_spec',Reason}}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'do_spec',2}}] )
	    -| ['compiler_generated'] )
	end
'do_spec_list'/2 =
    %% Line 1315
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 1318
	    case call 'lists':'keysearch'
		     ('hosts', 1, _cor1) of
	      %% Line 1319
	      <{'value',{'hosts',Hosts0}}> when 'true' ->
		  let <_cor5> =
		      %% Line 1320
		      ( fun (_cor3) ->
			    apply 'cast_to_list'/1
				(_cor3)
			-| [{'id',{0,0,'-do_spec_list/2-fun-0-'}}] )
		  in  let <Hosts> =
			  %% Line 1320
			  call 'lists':'map'
			      (_cor5, Hosts0)
		      in  do  %% Line 1321
			      apply 'controller_call'/1
				  ({'set_hosts',Hosts})
			      %% Line 1322
			      call 'lists':'keydelete'
				  ('hosts', 1, _cor1)
	      %% Line 1323
	      <_cor14> when 'true' ->
		  _cor1
	    end
	in  let <DefaultConfig> =
		%% Line 1326
		apply 'make_config'/1
		    ([{'nodes',[]}])
	    in  %% Line 1327
		case apply 'do_spec_terms'/4
			 (_cor8, [], [], DefaultConfig) of
		  <{TopCases,SkipList,Config}> when 'true' ->
		      %% Line 1328
		      apply 'do_test_cases'/4
			  (TopCases, SkipList, Config, _cor0)
		  ( <_cor11> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor11})
		    -| ['compiler_generated'] )
		end
'do_spec_terms'/4 =
    %% Line 1330
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],TopCases,SkipList,Config> when 'true' ->
	      %% Line 1331
	      {TopCases,SkipList,Config}
	  %% Line 1332
	  <[{'topcase',TopCase}|Terms],TopCases,SkipList,Config> when 'true' ->
	      %% Line 1333
	      apply 'do_spec_terms'/4
		  (Terms, [TopCase|TopCases], SkipList, Config)
	  %% Line 1334
	  <[{'skip',Skip}|Terms],TopCases,SkipList,Config> when 'true' ->
	      %% Line 1335
	      apply 'do_spec_terms'/4
		  (Terms, TopCases, [Skip|SkipList], Config)
	  %% Line 1336
	  <[{'nodes',Nodes}|Terms],TopCases,SkipList,Config> when 'true' ->
	      let <_cor4> =
		  %% Line 1338
		  apply 'update_config'/2
		      (Config, {'nodes',Nodes})
	      in  %% Line 1337
		  apply 'do_spec_terms'/4
		      (Terms, TopCases, SkipList, _cor4)
	  %% Line 1339
	  <[{'diskless',How}|Terms],TopCases,SkipList,Config> when 'true' ->
	      let <_cor5> =
		  %% Line 1341
		  apply 'update_config'/2
		      (Config, {'diskless',How})
	      in  %% Line 1340
		  apply 'do_spec_terms'/4
		      (Terms, TopCases, SkipList, _cor5)
	  %% Line 1342
	  <[{'config',MoreConfig}|Terms],TopCases,SkipList,Config> when 'true' ->
	      let <_cor6> =
		  %% Line 1343
		  call 'erlang':'++'
		      (Config, MoreConfig)
	      in  %% Line 1343
		  apply 'do_spec_terms'/4
		      (Terms, TopCases, SkipList, _cor6)
	  %% Line 1344
	  <[{'default_timeout',Tmo}|Terms],TopCases,SkipList,Config> when 'true' ->
	      let <_cor7> =
		  %% Line 1346
		  apply 'update_config'/2
		      (Config, {'default_timeout',Tmo})
	      in  %% Line 1345
		  apply 'do_spec_terms'/4
		      (Terms, TopCases, SkipList, _cor7)
	  %% Line 1348
	  <[{'require_nodenames',NumNames}|Terms],TopCases,SkipList,Config> when 'true' ->
	      let <NodeNames0> =
		  %% Line 1349
		  apply 'generate_nodenames'/1
		      (NumNames)
	      in  let <NodeNames> =
		      %% Line 1350
		      call 'lists':'delete'
			  ([], NodeNames0)
		  in  let <_cor10> =
			  %% Line 1352
			  apply 'update_config'/2
			      (Config, {'nodenames',NodeNames})
		      in  %% Line 1351
			  apply 'do_spec_terms'/4
			      (Terms, TopCases, SkipList, _cor10)
	  %% Line 1353
	  <[Other|Terms],TopCases,SkipList,Config> when 'true' ->
	      do  %% Line 1354
		  call 'io':'format'
		      ([42|[42|[32|[87|[65|[82|[78|[73|[78|[71|[58|[32|[83|[112|[101|[99|[32|[102|[105|[108|[101|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[117|[110|[107|[110|[111|[119|[110|[32|[100|[105|[114|[101|[99|[116|[105|[118|[101|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1355
																																							 [Other|[]])
		  %% Line 1356
		  apply 'do_spec_terms'/4
		      (Terms, TopCases, SkipList, Config)
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'do_spec_terms',4}}] )
	    -| ['compiler_generated'] )
	end
'generate_nodenames'/1 =
    %% Line 1360
    fun (_cor0) ->
	let <_cor5> =
	    %% Line 1361
	    case apply 'controller_call'/1
		     ('get_hosts') of
	      %% Line 1362
	      <[]> when 'true' ->
		  %% Line 1364
		  ( case apply 'controller_call'/1
			     ('get_target_info') of
		      ( <( {'target_info',_cor8,_cor9,_rec86,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19}
			   -| ['compiler_generated'] )> when 'true' ->
			    [_rec86|[]]
			-| ['compiler_generated'] )
		      ( <_cor20> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','target_info'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 1365
	      <List> when 'true' ->
		  %% Line 1366
		  List
	    end
	in  %% Line 1368
	    apply 'generate_nodenames2'/3
		(_cor0, _cor5, [])
'generate_nodenames2'/3 =
    %% Line 1370
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <0,_X_Hosts,Acc> when 'true' ->
	      %% Line 1371
	      Acc
	  %% Line 1372
	  <N,Hosts,Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 1373
		  call 'erlang':'length'
		      (Hosts)
	      in  let <_cor4> =
		      %% Line 1373
		      call 'erlang':'rem'
			  (N, _cor3)
		  in  let <_cor5> =
			  %% Line 1373
			  call 'erlang':'+'
			      (_cor4, 1)
		      in  let <Host> =
			      %% Line 1373
			      call 'lists':'nth'
				  (_cor5, Hosts)
			  in  let <_cor8> =
				  %% Line 1374
				  apply 'temp_nodename'/2
				      ([110|[111|[100]]], [])
			      in  let <_cor7> =
				      %% Line 1374
				      [64|Host]
				  in  let <_cor9> =
					  %% Line 1374
					  call 'erlang':'++'
					      (_cor8, _cor7)
				      in  let <Name> =
					      %% Line 1374
					      call 'erlang':'list_to_atom'
						  (_cor9)
					  in  let <_cor11> =
						  %% Line 1375
						  call 'erlang':'-'
						      (N, 1)
					      in  %% Line 1375
						  apply 'generate_nodenames2'/3
						      (_cor11, Hosts, [Name|Acc])
	end
'temp_nodename'/2 =
    %% Line 1377
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Acc> when 'true' ->
	      %% Line 1378
	      call 'lists':'flatten'
		  (Acc)
	  %% Line 1379
	  <[Chr|Base],Acc> when 'true' ->
	      %% Line 1380
	      case call 'erlang':'now'
		       () of
		<{A,B,C}> when 'true' ->
		    let <_cor3> =
			%% Line 1381
			call 'erlang':'bxor'
			    (Chr, A)
		    in  let <_cor4> =
			    %% Line 1381
			    call 'erlang':'bxor'
				(_cor3, B)
			in  let <_cor5> =
				%% Line 1381
				call 'erlang':'+'
				    (_cor4, A)
			    in  let <_cor6> =
				    %% Line 1381
				    call 'erlang':'bxor'
					(_cor5, C)
				in  let <_cor7> =
					%% Line 1381
					call 'erlang':'+'
					    (_cor6, B)
				    in  let <_cor8> =
					    %% Line 1381
					    call 'erlang':'integer_to_list'
						(_cor7)
					in  let <New> =
						%% Line 1381
						[Chr|_cor8]
					    in  %% Line 1382
						apply 'temp_nodename'/2
						    (Base, [New|Acc])
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'temp_nodename',2}}] )
	    -| ['compiler_generated'] )
	end
'count_test_cases'/2 =
    %% Line 1394
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <TopCases,SkipCases>
	      when call 'erlang':'is_list'
		    (TopCases) ->
	      %% Line 1395
	      case apply 'collect_all_cases'/2
		       (TopCases, SkipCases) of
		%% Line 1396
		<Error = {'error',_X_Why}> when 'true' ->
		    %% Line 1397
		    Error
		%% Line 1398
		<TestSpec> when 'true' ->
		    let <_cor4> =
			%% Line 1399
			apply 'get_suites'/2
			    (TestSpec, [])
		    in  let <_cor3> =
			    %% Line 1400
			    case apply 'remove_conf'/1
				     (TestSpec) of
			      %% Line 1401
			      <{'repeats',_cor8}> when 'true' ->
				  %% Line 1402
				  'unknown'
			      %% Line 1403
			      <TestSpec1> when 'true' ->
				  %% Line 1404
				  call 'erlang':'length'
				      (TestSpec1)
			    end
			in  %% Line 1399
			    {_cor4,_cor3}
	      end
	  %% Line 1408
	  <TopCase,SkipCases> when 'true' ->
	      %% Line 1409
	      apply 'count_test_cases'/2
		  ([TopCase|[]], SkipCases)
	end
'remove_conf'/1 =
    %% Line 1412
    fun (_cor0) ->
	%% Line 1413
	apply 'remove_conf'/3
	    (_cor0, [], 'false')
'remove_conf'/3 =
    %% Line 1415
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'conf',_X_Ref,Props,_X_MF}|Cases],NoConf,Repeats> when 'true' ->
	      %% Line 1416
	      case apply 'get_repeat'/1
		       (Props) of
		%% Line 1417
		<'undefined'> when 'true' ->
		    %% Line 1418
		    apply 'remove_conf'/3
			(Cases, NoConf, Repeats)
		%% Line 1419
		<{_X_RepType,1}> when 'true' ->
		    %% Line 1420
		    apply 'remove_conf'/3
			(Cases, NoConf, Repeats)
		%% Line 1421
		<_cor13> when 'true' ->
		    %% Line 1422
		    apply 'remove_conf'/3
			(Cases, NoConf, 'true')
	      end
	  %% Line 1424
	  <[{'make',_X_Ref,_X_MF}|Cases],NoConf,Repeats> when 'true' ->
	      %% Line 1425
	      apply 'remove_conf'/3
		  (Cases, NoConf, Repeats)
	  %% Line 1426
	  <[{'skip_case',{{_X_M,'all'},_X_Cmt},_X_Mode}|Cases],NoConf,Repeats> when 'true' ->
	      %% Line 1427
	      apply 'remove_conf'/3
		  (Cases, NoConf, Repeats)
	  %% Line 1428
	  <[{'skip_case',{Type,_X_Ref,_X_MF,_X_Cmt}}|Cases],%% Line 1429
							    NoConf,%% Line 1429
								   Repeats>
	      when let <_cor4> =
		    %% Line 1429
		    call 'erlang':'=:='
			(Type, 'conf')
		in  let <_cor5> =
			%% Line 1430
			call 'erlang':'=:='
			    (Type, 'make')
		    in  %% Line 1429
			call 'erlang':'or'
			    (_cor4, _cor5) ->
	      %% Line 1431
	      apply 'remove_conf'/3
		  (Cases, NoConf, Repeats)
	  %% Line 1432
	  <[{'skip_case',{Type,_X_Ref,_X_MF,_X_Cmt},_X_Mode}|Cases],%% Line 1433
								    NoConf,%% Line 1433
									   Repeats>
	      when let <_cor6> =
		    %% Line 1433
		    call 'erlang':'=:='
			(Type, 'conf')
		in  let <_cor7> =
			%% Line 1434
			call 'erlang':'=:='
			    (Type, 'make')
		    in  %% Line 1433
			call 'erlang':'or'
			    (_cor6, _cor7) ->
	      %% Line 1435
	      apply 'remove_conf'/3
		  (Cases, NoConf, Repeats)
	  %% Line 1436
	  <[C = {Mod,'error_in_suite',_cor14}|Cases],NoConf,Repeats> when 'true' ->
	      let <FwMod> =
		  %% Line 1437
		  apply 'get_fw_mod'/1
		      ('test_server_ctrl')
	      in  %% Line 1438
		  case <> of
		    <>
			when call 'erlang':'=='
			      (Mod,
			       FwMod) ->
			%% Line 1439
			apply 'remove_conf'/3
			    (Cases, NoConf, Repeats)
		    %% Line 1440
		    <> when 'true' ->
			%% Line 1441
			apply 'remove_conf'/3
			    (Cases, [C|NoConf], Repeats)
		  end
	  %% Line 1443
	  <[C|Cases],NoConf,Repeats> when 'true' ->
	      %% Line 1444
	      apply 'remove_conf'/3
		  (Cases, [C|NoConf], Repeats)
	  %% Line 1445
	  <[],NoConf,'true'> when 'true' ->
	      let <_cor9> =
		  %% Line 1446
		  call 'lists':'reverse'
		      (NoConf)
	      in  %% Line 1446
		  {'repeats',_cor9}
	  %% Line 1447
	  <[],NoConf,'false'> when 'true' ->
	      %% Line 1448
	      call 'lists':'reverse'
		  (NoConf)
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'remove_conf',3}}] )
	    -| ['compiler_generated'] )
	end
'get_suites'/2 =
    %% Line 1450
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'skip_case',{{Mod,_X_F},_X_Cmt},_X_Mode}|Tests],Mods>
	      when call 'erlang':'is_atom'
		    (Mod) ->
	      %% Line 1451
	      case apply 'add_mod'/2
		       (Mod, Mods) of
		%% Line 1452
		<'true'> when 'true' ->
		    apply 'get_suites'/2
			(Tests, [Mod|Mods])
		%% Line 1453
		<'false'> when 'true' ->
		    apply 'get_suites'/2
			(Tests, Mods)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1455
	  <[{Mod,_X_Case}|Tests],Mods>
	      when call 'erlang':'is_atom'
		    (Mod) ->
	      %% Line 1456
	      case apply 'add_mod'/2
		       (Mod, Mods) of
		%% Line 1457
		<'true'> when 'true' ->
		    apply 'get_suites'/2
			(Tests, [Mod|Mods])
		%% Line 1458
		<'false'> when 'true' ->
		    apply 'get_suites'/2
			(Tests, Mods)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1460
	  <[{Mod,_X_Func,_X_Args}|Tests],Mods>
	      when call 'erlang':'is_atom'
		    (Mod) ->
	      %% Line 1461
	      case apply 'add_mod'/2
		       (Mod, Mods) of
		%% Line 1462
		<'true'> when 'true' ->
		    apply 'get_suites'/2
			(Tests, [Mod|Mods])
		%% Line 1463
		<'false'> when 'true' ->
		    apply 'get_suites'/2
			(Tests, Mods)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1465
	  <[_cor7|Tests],Mods> when 'true' ->
	      %% Line 1466
	      apply 'get_suites'/2
		  (Tests, Mods)
	  %% Line 1468
	  <[],Mods> when 'true' ->
	      %% Line 1469
	      call 'lists':'reverse'
		  (Mods)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'get_suites',2}}] )
	    -| ['compiler_generated'] )
	end
'add_mod'/2 =
    %% Line 1471
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1472
	    call 'erlang':'atom_to_list'
		(_cor1)
	in  %% Line 1472
	    case call 'string':'rstr'
		     (_cor2, [95|[83|[85|[73|[84|[69]]]]]]) of
	      %% Line 1473
	      <0> when 'true' ->
		  'false'
	      %% Line 1474
	      <_cor7> when 'true' ->
		  %% Line 1475
		  case call 'lists':'member'
			   (_cor1, _cor0) of
		    %% Line 1476
		    <'true'> when 'true' ->
			'false'
		    %% Line 1477
		    <'false'> when 'true' ->
			'true'
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	    end
'do_test_cases'/4 =
    %% Line 1499
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <TopCases,SkipCases,%% Line 1500
			      Config,%% Line 1500
				     MultiplyTimetrap>
	      when let <_cor4> =
		    %% Line 1500
		    call 'erlang':'is_integer'
			(MultiplyTimetrap)
		in  let <_cor5> =
			%% Line 1501
			call 'erlang':'=:='
			    (MultiplyTimetrap, 'infinity')
		    in  %% Line 1500
			call 'erlang':'or'
			    (_cor4, _cor5) ->
	      %% Line 1502
	      apply 'do_test_cases'/4
		  (TopCases, SkipCases, Config, {MultiplyTimetrap,'true'})
	  %% Line 1504
	  <TopCases,SkipCases,%% Line 1505
			      Config,%% Line 1505
				     TimetrapData>
	      when let <_cor6> =
		    %% Line 1505
		    call 'erlang':'is_list'
			(TopCases)
		in  let <_cor7> =
			%% Line 1506
			call 'erlang':'is_tuple'
			    (TimetrapData)
		    in  %% Line 1505
			call 'erlang':'and'
			    (_cor6, _cor7) ->
	      %% Line 1507
	      case apply 'start_log_file'/0
		       () of
		<{'ok',TestDir}> when 'true' ->
		    let <FwMod> =
			%% Line 1508
			apply 'get_fw_mod'/1
			    ('test_server_ctrl')
		    in  %% Line 1509
			case apply 'collect_all_cases'/2
				 (TopCases, SkipCases) of
			  %% Line 1510
			  <{'error',Why}> when 'true' ->
			      do  %% Line 1511
				  apply 'print'/3
				      (1, [69|[114|[114|[111|[114|[32|[115|[116|[97|[114|[116|[105|[110|[103|[58|[32|[126|[112]]]]]]]]]]]]]]]]]], [Why|[]])
				  %% Line 1512
				  call 'erlang':'exit'
				      ('test_suites_done')
			  %% Line 1513
			  <TestSpec0> when 'true' ->
			      let <_cor11> =
				  %% Line 1514
				  case apply 'remove_conf'/1
					   (TestSpec0) of
				    %% Line 1515
				    <{'repeats',_cor95}> when 'true' ->
					'unknown'
				    %% Line 1516
				    <TS> when 'true' ->
					call 'erlang':'length'
					    (TS)
				  end
			      in  do  %% Line 1518
				      call 'erlang':'put'
					  ('test_server_cases', _cor11)
				      do  %% Line 1519
					  call 'erlang':'put'
					      ('test_server_case_num', 0)
					  let <TestSpec> =
					      %% Line 1522
					      apply 'add_init_and_end_per_suite'/4
						  (TestSpec0, 'undefined', 'undefined', FwMod)
					  in  let <TI> =
						  %% Line 1524
						  apply 'get_target_info'/0
						      ()
					      in  let <_cor15> =
						      %% Line 1526
						      apply 'print_if_known'/3
							  (_cor11, {[44|[32|[126|[119|[32|[116|[101|[115|[116|[32|[99|[97|[115|[101|[115]]]]]]]]]]]]]]],[_cor11|[]]}, %% Line 1527
																				      {[32|[40|[119|[105|[116|[104|[32|[114|[101|[112|[101|[97|[116|[101|[100|[32|[116|[101|[115|[116|[32|[99|[97|[115|[101|[115|[41]]]]]]]]]]]]]]]]]]]]]]]]]]],[]})
						  in  do  %% Line 1525
							  apply 'print'/3
							      (1, [83|[116|[97|[114|[116|[105|[110|[103|[32|[116|[101|[115|[116|[126|[116|[115]]]]]]]]]]]]]]]], %% Line 1526
																				[_cor15|%% Line 1527
																					[]])
							  let <Test> =
							      %% Line 1528
							      call 'erlang':'get'
								  ('test_server_name')
							  in  let <_cor19> =
								  %% Line 1529
								  case <> of
								    <>
									when call 'erlang':'is_list'
									      (Test) ->
									let <_cor17> =
									    %% Line 1530
									    call 'io_lib':'format'
										([126|[116|[115]]], [Test|[]])
									in  %% Line 1530
									    call 'lists':'flatten'
										(_cor17)
								    %% Line 1531
								    <> when 'true' ->
									let <_cor18> =
									    %% Line 1532
									    call 'io_lib':'format'
										([126|[116|[112]]], [Test|[]])
									in  %% Line 1532
									    call 'lists':'flatten'
										(_cor18)
								  end
							      in  let <_cor21> =
								      %% Line 1534
								      call 'erlang':'++'
									  (_cor19, [32|[114|[101|[115|[117|[108|[116|[115]]]]]]]])
								  in  let <TestDescr> =
									  %% Line 1534
									  call 'erlang':'++'
									      ([84|[101|[115|[116|[32]]]]], _cor21)
								      in  do  %% Line 1536
									      call 'test_server_sup':'framework_call'
										  ('report', ['tests_start'|[{Test,_cor11}|[]]])
									      let <Header,Footer> =
										  %% Line 1539
										  case call 'test_server_sup':'framework_call'
											   ('get_html_wrapper', %% Line 1540
														[TestDescr|['true'|[TestDir|%% Line 1541
																	    [{[],[2|[3|[4|[7|[8]]]]],[1|[6]]}]]]], %% Line 1541
																						   []) of
										    %% Line 1542
										    <Empty>
											when let <_cor23> =
											      call 'erlang':'=:='
												  (Empty, [])
											  in  let <_cor25> =
												  try
												      let <_cor24> =
													  call 'erlang':'element'
													      (2, Empty)
												      in  call 'erlang':'=:='
													      (_cor24, [])
												  of <Try> ->
												      Try
												  catch <T,R> ->
												      'false'
											      in  call 'erlang':'or'
												      (_cor23, _cor25) ->
											do  %% Line 1543
											    call 'erlang':'put'
												('basic_html', 'true')
											    let <_cor26> =
												%% Line 1544
												apply 'html_header'/1
												    (TestDescr)
											    in  %% Line 1544
												<[_cor26|%% Line 1545
													 [[60|[104|[50|[62|[82|[101|[115|[117|[108|[116|[115|[32|[102|[111|[114|[32|[116|[101|[115|[116|[32]]]]]]]]]]]]]]]]]]]]]|[_cor19|[[60|[47|[104|[50|[62|[10]]]]]]]]]],%% Line 1546
																																	     [10|[60|[47|[98|[111|[100|[121|[62|[10|[60|[47|[104|[116|[109|[108|[62|[10]]]]]]]]]]]]]]]]]>
										    %% Line 1547
										    <{'basic_html',Html0,Html1}> when 'true' ->
											do  %% Line 1548
											    call 'erlang':'put'
												('basic_html', 'true')
											    let <_cor27> =
												%% Line 1549
												call 'erlang':'++'
												    (Html0, [[60|[104|[49|[62|[82|[101|[115|[117|[108|[116|[115|[32|[102|[111|[114|[32|[60|[105|[62]]]]]]]]]]]]]]]]]]]|[_cor19|[[60|[47|[105|[62|[60|[47|[104|[49|[62|[10]]]]]]]]]]]]])
											    in  <_cor27,%% Line 1550
													Html1>
										    %% Line 1551
										    <{'xhtml',Html0,Html1}> when 'true' ->
											do  %% Line 1552
											    call 'erlang':'put'
												('basic_html', 'false')
											    let <_cor28> =
												%% Line 1553
												call 'erlang':'++'
												    (Html0, [[60|[104|[49|[62|[82|[101|[115|[117|[108|[116|[115|[32|[102|[111|[114|[32|[60|[105|[62]]]]]]]]]]]]]]]]]]]|[_cor19|[[60|[47|[105|[62|[60|[47|[104|[49|[62|[10]]]]]]]]]]]]])
											    in  <_cor28,%% Line 1554
													Html1>
										    ( <_cor29> when 'true' ->
											  primop 'match_fail'
											      ({'case_clause',_cor29})
										      -| ['compiler_generated'] )
										  end
									      in  do  %% Line 1557
										      apply 'print'/2
											  ('html', Header)
										      let <_cor32> =
											  %% Line 1559
											  apply 'xhtml'/2
											      ([60|[112|[62]]], [60|[104|[52|[62]]]])
										      in  do  %% Line 1559
											      apply 'print'/2
												  ('html', _cor32)
											      do  %% Line 1560
												  apply 'print_timestamp'/2
												      ('html', [84|[101|[115|[116|[32|[115|[116|[97|[114|[116|[101|[100|[32|[97|[116|[32]]]]]]]]]]]]]]]])
												  let <_cor33> =
												      %% Line 1561
												      apply 'xhtml'/2
													  ([60|[47|[112|[62]]]], [60|[47|[104|[52|[62]]]]])
												  in  do  %% Line 1561
													  apply 'print'/2
													      ('html', _cor33)
													  let <_cor34> =
													      %% Line 1563
													      apply 'xhtml'/2
														  ([10|[60|[112|[62|[60|[98|[62|[72|[111|[115|[116|[32|[105|[110|[102|[111|[58|[60|[47|[98|[62|[60|[98|[114|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1564
																															       [10|[60|[112|[62|[60|[98|[62|[72|[111|[115|[116|[32|[105|[110|[102|[111|[58|[60|[47|[98|[62|[60|[98|[114|[32|[47|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]])
													  in  do  %% Line 1563
														  apply 'print'/2
														      ('html', _cor34)
														  let <_cor36> =
														      %% Line 1565
														      call 'test_server_sup':'hoststr'
															  ()
														  in  let <_cor35> =
															  %% Line 1565
															  call 'test_server_sup':'get_username'
															      ()
														      in  do  %% Line 1565
															      apply 'print_who'/2
																  (_cor36, _cor35)
															      let <_cor39> =
																  %% Line 1566
																  apply 'xhtml'/2
																      ([60|[98|[114|[62|[85|[115|[101|[100|[32|[69|[114|[108|[97|[110|[103|[32|[118|[126|[116|[115|[32|[105|[110|[32|[60|[116|[116|[62|[126|[116|[115|[60|[47|[116|[116|[62|[60|[47|[112|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1567
																																													   [60|[98|[114|[32|[47|[62|[85|[115|[101|[100|[32|[69|[114|[108|[97|[110|[103|[32|[118|[126|[116|[115|[32|[105|[110|[32|[34|[126|[116|[115|[34|[60|[47|[112|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
															      in  let <_cor37> =
																      %% Line 1568
																      call 'erlang':'system_info'
																	  ('version')
																  in  let <_cor38> =
																	  %% Line 1568
																	  call 'code':'root_dir'
																	      ()
																      in  do  %% Line 1566
																	      apply 'print'/3
																		  ('html', _cor39, %% Line 1568
																				   [_cor37|[_cor38|[]]])
																	      do  %% Line 1570
																		  case <> of
																		    <>
																			when call 'erlang':'=:='
																			      (FwMod,
																			       'test_server_ctrl') ->
																			let <_cor40> =
																			    %% Line 1571
																			    apply 'xhtml'/2
																				([10|[60|[112|[62|[60|[98|[62|[84|[97|[114|[103|[101|[116|[32|[73|[110|[102|[111|[58|[60|[47|[98|[62|[60|[98|[114|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1572
																																						       [10|[60|[112|[62|[60|[98|[62|[84|[97|[114|[103|[101|[116|[32|[73|[110|[102|[111|[58|[60|[47|[98|[62|[60|[98|[114|[32|[47|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
																			in  do  %% Line 1571
																				apply 'print'/2
																				    ('html', _cor40)
																				%% Line 1573
																				( case TI of
																				    ( <( {'target_info',_cor96,_cor97,_rec87,_cor98,_cor99,_cor100,_cor101,_cor102,_cor103,_cor104,_cor105,_cor106,_cor107}
																					 -| ['compiler_generated'] )> when 'true' ->
																					  do  apply 'print_who'/2
																						  (_rec87, _cor104)
																					      let <_cor49> =
																						  %% Line 1574
																						  apply 'xhtml'/2
																						      ([60|[98|[114|[62|[85|[115|[101|[100|[32|[69|[114|[108|[97|[110|[103|[32|[118|[126|[116|[115|[32|[105|[110|[32|[60|[116|[116|[62|[126|[116|[115|[60|[47|[116|[116|[62|[60|[47|[112|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1575
																																																			   [60|[98|[114|[32|[47|[62|[85|[115|[101|[100|[32|[69|[114|[108|[97|[110|[103|[32|[118|[126|[116|[115|[32|[105|[110|[32|[34|[126|[116|[115|[34|[60|[47|[112|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
																					      in  %% Line 1574
																						  apply 'print'/3
																						      ('html', _cor49, %% Line 1576
																								       [_cor98|[_cor100|[]]])
																				      -| ['compiler_generated'] )
																				    ( <_cor108> when 'true' ->
																					  ( call ( 'erlang'
																						   -| ['compiler_generated'] ):( 'error'
																										 -| ['compiler_generated'] )
																						(( {'badrecord','target_info'}
																						   -| ['compiler_generated'] ))
																					    -| ['compiler_generated'] )
																				      -| ['compiler_generated'] )
																				  end
																				  -| ['compiler_generated'] )
																		    %% Line 1577
																		    <> when 'true' ->
																			%% Line 1578
																			case call 'test_server_sup':'framework_call'
																				 ('target_info', []) of
																			  %% Line 1579
																			  <TargetInfo>
																			      when try
																				    let <_cor50> =
																					call 'erlang':'is_list'
																					    (TargetInfo)
																				    in  let <_cor51> =
																					    %% Line 1580
																					    call 'erlang':'length'
																						(TargetInfo)
																					in  let <_cor52> =
																						%% Line 1580
																						call 'erlang':'>'
																						    (_cor51, 0)
																					    in  call 'erlang':'and'
																						    (_cor50, _cor52)
																				of <Try> ->
																				    Try
																				catch <T,R> ->
																				    'false' ->
																			      let <_cor53> =
																				  %% Line 1581
																				  apply 'xhtml'/2
																				      ([10|[60|[112|[62|[60|[98|[62|[84|[97|[114|[103|[101|[116|[32|[105|[110|[102|[111|[58|[60|[47|[98|[62|[60|[98|[114|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1582
																																							      [10|[60|[112|[62|[60|[98|[62|[84|[97|[114|[103|[101|[116|[32|[105|[110|[102|[111|[58|[60|[47|[98|[62|[60|[98|[114|[32|[47|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
																			      in  do  %% Line 1581
																				      apply 'print'/2
																					  ('html', _cor53)
																				      %% Line 1583
																				      apply 'print'/3
																					  ('html', [126|[116|[115|[60|[47|[112|[62|[10]]]]]]]], [TargetInfo|[]])
																			  %% Line 1584
																			  <_cor148> when 'true' ->
																			      'ok'
																			end
																		  end
																		  let <_cor57> =
																		      %% Line 1589
																		      case call 'erlang':'get'
																			       ('test_server_cover_log_dir') of
																			%% Line 1590
																			<'undefined'> when 'true' ->
																			    %% Line 1591
																			    [99|[111|[118|[101|[114|[46|[104|[116|[109|[108]]]]]]]]]]
																			%% Line 1592
																			<AbsLogDir> when 'true' ->
																			    let <AbsLog> =
																				%% Line 1593
																				call 'filename':'join'
																				    (AbsLogDir, [99|[111|[118|[101|[114|[46|[104|[116|[109|[108]]]]]]]]]])
																			    in  %% Line 1594
																				apply 'make_relative'/2
																				    (AbsLog, TestDir)
																		      end
																		  in  do  %% Line 1596
																			  apply 'print'/3
																			      ('html', %% Line 1597
																				       [60|[112|[62|[60|[117|[108|[62|[10|[60|[108|[105|[62|[60|[97|[32|[104|[114|[101|[102|[61|[34|[126|[116|[115|[34|[62|[70|[117|[108|[108|[32|[116|[101|[120|[116|[117|[97|[108|[32|[108|[111|[103|[60|[47|[97|[62|[60|[47|[108|[105|[62|[10|[60|[108|[105|[62|[60|[97|[32|[104|[114|[101|[102|[61|[34|[126|[116|[115|[34|[62|[67|[111|[118|[101|[114|[97|[103|[101|[32|[108|[111|[103|[60|[47|[97|[62|[60|[47|[108|[105|[62|[10|[60|[108|[105|[62|[60|[97|[32|[104|[114|[101|[102|[61|[34|[126|[116|[115|[34|[62|[85|[110|[101|[120|[112|[101|[99|[116|[101|[100|[32|[73|[47|[79|[32|[108|[111|[103|[60|[47|[97|[62|[60|[47|[108|[105|[62|[10|[60|[47|[117|[108|[62|[60|[47|[112|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1601
																																																																																																																										   [[115|[117|[105|[116|[101|[46|[108|[111|[103]]]]]]]]]|[_cor57|[[117|[110|[101|[120|[112|[101|[99|[116|[101|[100|[95|[105|[111|[46|[108|[111|[103|[46|[104|[116|[109|[108]]]]]]]]]]]]]]]]]]]]]]]]])
																			  let <_cor64> =
																			      %% Line 1604
																			      apply 'xhtml'/2
																				  ([[60|[116|[97|[98|[108|[101|[32|[98|[103|[99|[111|[108|[111|[114|[61|[34|[119|[104|[105|[116|[101|[34|[32|[98|[111|[114|[100|[101|[114|[61|[34|[51|[34|[32|[99|[101|[108|[108|[112|[97|[100|[100|[105|[110|[103|[61|[34|[53|[34|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|[[60|[116|[104|[101|[97|[100|[62|[10]]]]]]]]]], %% Line 1606
																																																													      [[60|[116|[97|[98|[108|[101|[32|[105|[100|[61|[34]]]]]]]]]]]|[[83|[111|[114|[116|[97|[98|[108|[101|[84|[97|[98|[108|[101]]]]]]]]]]]]]|[[34|[62|[10]]]|[[60|[116|[104|[101|[97|[100|[62|[10]]]]]]]]]]]])
																			  in  let <_cor65> =
																				  %% Line 1607
																				  call 'erlang':'++'
																				      (_cor64, [60|[116|[114|[62|[60|[116|[104|[62|[78|[117|[109|[60|[47|[116|[104|[62|[60|[116|[104|[62|[77|[111|[100|[117|[108|[101|[60|[47|[116|[104|[62|[60|[116|[104|[62|[71|[114|[111|[117|[112|[60|[47|[116|[104|[62|[60|[116|[104|[62|[67|[97|[115|[101|[60|[47|[116|[104|[62|[60|[116|[104|[62|[76|[111|[103|[60|[47|[116|[104|[62|[60|[116|[104|[62|[84|[105|[109|[101|[60|[47|[116|[104|[62|[60|[116|[104|[62|[82|[101|[115|[117|[108|[116|[60|[47|[116|[104|[62|[60|[116|[104|[62|[67|[111|[109|[109|[101|[110|[116|[60|[47|[116|[104|[62|[60|[47|[116|[114|[62|[10|[60|[47|[116|[104|[101|[97|[100|[62|[10|[60|[116|[98|[111|[100|[121|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
																			      in  let <_cor66> =
																				      %% Line 1603
																				      call 'erlang':'++'
																					  ([60|[112|[62|[126|[116|[115|[60|[47|[112|[62|[10]]]]]]]]]]], _cor65)
																				  in  let <_cor59> =
																					  %% Line 1612
																					  apply 'xhtml'/2
																					      ([10|[60|[98|[114|[62|[10]]]]]], [10|[60|[98|[114|[32|[47|[62|[10]]]]]]]])
																				      in  let <_cor60> =
																					      %% Line 1612
																					      call 'erlang':'++'
																						  ([60|[105|[62|[69|[120|[101|[99|[117|[116|[105|[110|[103|[32|[60|[98|[62|[126|[119|[60|[47|[98|[62|[32|[116|[101|[115|[116|[32|[99|[97|[115|[101|[115|[46|[46|[46|[60|[47|[105|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], _cor59)
																					  in  let <_cor61> =
																						  %% Line 1611
																						  apply 'print_if_known'/3
																						      (_cor11, {_cor60,%% Line 1612
																								       [_cor11|[]]}, %% Line 1613
																										     {[],[]})
																					      in  do  %% Line 1602
																						      apply 'print'/3
																							  ('html', _cor66, %% Line 1611
																									   [_cor61|%% Line 1613
																										   []])
																						      let <_cor67> =
																							  %% Line 1615
																							  call 'erlang':'get'
																							      ('test_server_cases')
																						      in  do  %% Line 1615
																							      apply 'print'/3
																								  ('major', [61|[99|[97|[115|[101|[115|[32|[32|[32|[32|[32|[32|[32|[32|[32|[126|[119]]]]]]]]]]]]]]]]], [_cor67|[]])
																							      %% Line 1616
																							      ( case TI of
																								  ( <( {'target_info',_cor149,_cor150,_cor151,_cor152,_cor153,_cor154,_cor155,_cor156,_cor157,_rec91,_cor158,_cor159,_cor160}
																								       -| ['compiler_generated'] )> when 'true' ->
																									do  apply 'print'/3
																										('major', [61|[117|[115|[101|[114|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[126|[116|[115]]]]]]]]]]]]]]]]]], [_rec91|[]])
																									    do  %% Line 1617
																										apply 'print'/3
																										    ('major', [61|[104|[111|[115|[116|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[126|[116|[115]]]]]]]]]]]]]]]]]], [_cor151|[]])
																										do  %% Line 1620
																										    case apply 'controller_call'/1
																											     ('get_hosts') of
																										      %% Line 1621
																										      <[]> when 'true' ->
																											  do  %% Line 1622
																											      apply 'print'/3
																												  ('major', [61|[104|[111|[115|[116|[115|[32|[32|[32|[32|[32|[32|[32|[32|[32|[126|[116|[115]]]]]]]]]]]]]]]]]], [_cor151|[]])
																											      %% Line 1623
																											      apply 'controller_call'/1
																												  ({'set_hosts',[_cor151|[]]})
																										      %% Line 1624
																										      <Hosts> when 'true' ->
																											  let <_cor78> =
																											      %% Line 1625
																											      ( fun (_cor76) ->
																												    [_cor76|[[32]]]
																												-| [{'id',{0,0,'-do_test_cases/4-fun-0-'}}] )
																											  in  let <_cor79> =
																												  %% Line 1625
																												  call 'lists':'map'
																												      (_cor78, Hosts)
																											      in  let <Str> =
																												      %% Line 1625
																												      call 'lists':'flatten'
																													  (_cor79)
																												  in  %% Line 1626
																												      apply 'print'/3
																													  ('major', [61|[104|[111|[115|[116|[115|[32|[32|[32|[32|[32|[32|[32|[32|[32|[126|[116|[115]]]]]]]]]]]]]]]]]], [Str|[]])
																										    end
																										    do  %% Line 1628
																											apply 'print'/3
																											    ('major', [61|[101|[109|[117|[108|[97|[116|[111|[114|[95|[118|[115|[110|[32|[32|[126|[116|[115]]]]]]]]]]]]]]]]]], [_cor152|[]])
																											do  %% Line 1629
																											    apply 'print'/3
																												('major', [61|[101|[109|[117|[108|[97|[116|[111|[114|[32|[32|[32|[32|[32|[32|[126|[116|[115]]]]]]]]]]]]]]]]]], [_cor156|[]])
																											    do  %% Line 1630
																												apply 'print'/3
																												    ('major', [61|[111|[116|[112|[95|[114|[101|[108|[101|[97|[115|[101|[32|[32|[32|[126|[116|[115]]]]]]]]]]]]]]]]]], [_cor157|[]])
																												let <_cor88> =
																												    %% Line 1632
																												    apply 'timestamp_get'/1
																													([])
																												in  let <_cor89> =
																													%% Line 1632
																													call 'lists':'flatten'
																													    (_cor88)
																												    in  do  %% Line 1631
																													    apply 'print'/3
																														('major', [61|[115|[116|[97|[114|[116|[101|[100|[32|[32|[32|[32|[32|[32|[32|[126|[115]]]]]]]]]]]]]]]]], %% Line 1632
																																											[_cor89|[]])
																													    do  %% Line 1634
																														call 'test_server_io':'set_footer'
																														    (Footer)
																														%% Line 1636
																														apply 'run_test_cases'/3
																														    (TestSpec, Config, TimetrapData)
																								    -| ['compiler_generated'] )
																								  ( <_cor161> when 'true' ->
																									( call ( 'erlang'
																										 -| ['compiler_generated'] ):( 'error'
																													       -| ['compiler_generated'] )
																									      (( {'badrecord','target_info'}
																										 -| ['compiler_generated'] ))
																									  -| ['compiler_generated'] )
																								    -| ['compiler_generated'] )
																								end
																								-| ['compiler_generated'] )
			end
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1639
	  <TopCase,SkipCases,Config,TimetrapSpec> when 'true' ->
	      %% Line 1641
	      apply 'do_test_cases'/4
		  ([TopCase|[]], SkipCases, Config, TimetrapSpec)
	end
'start_log_file'/0 =
    %% Line 1654
    fun () ->
	let <Dir> =
	    %% Line 1655
	    call 'erlang':'get'
		('test_server_dir')
	in  do  %% Line 1656
		case call 'file':'make_dir'
			 (Dir) of
		  %% Line 1657
		  <'ok'> when 'true' ->
		      'ok'
		  %% Line 1659
		  <{'error','eexist'}> when 'true' ->
		      'ok'
		  %% Line 1661
		  <MkDirError> when 'true' ->
		      %% Line 1662
		      apply 'log_file_error'/2
			  (MkDirError, Dir)
		end
		let <_cor2> =
		    %% Line 1664
		    call 'filename':'join'
			(Dir, [114|[117|[110|[46]]]])
		in  let <TestDir> =
			%% Line 1664
			apply 'timestamp_filename_get'/1
			    (_cor2)
		    in  let <_cor8> =
			    %% Line 1666
			    case call 'file':'make_dir'
				     (TestDir) of
			      %% Line 1667
			      <'ok'> when 'true' ->
				  %% Line 1668
				  TestDir
			      %% Line 1669
			      <{'error','eexist'}> when 'true' ->
				  do  %% Line 1670
				      call 'timer':'sleep'
					  (1000)
				      let <_cor4> =
					  %% Line 1672
					  call 'filename':'join'
					      (Dir, [114|[117|[110|[46]]]])
				      in  let <TestDirX> =
					      %% Line 1672
					      apply 'timestamp_filename_get'/1
						  (_cor4)
					  in  %% Line 1673
					      case call 'file':'make_dir'
						       (TestDirX) of
						%% Line 1674
						<'ok'> when 'true' ->
						    %% Line 1675
						    TestDirX
						%% Line 1676
						<MkDirError2> when 'true' ->
						    %% Line 1677
						    apply 'log_file_error'/2
							(MkDirError2, TestDirX)
					      end
			      %% Line 1679
			      <MkDirError2> when 'true' ->
				  %% Line 1680
				  apply 'log_file_error'/2
				      (MkDirError2, TestDir)
			    end
			in  let <FilenameMode> =
				%% Line 1682
				call 'file':'native_name_encoding'
				    ()
			    in  let <_cor12> =
				    %% Line 1683
				    call 'filename':'join'
					(Dir, [108|[97|[115|[116|[95|[110|[97|[109|[101]]]]]]]]])
				in  let <_cor11> =
					%% Line 1684
					call 'erlang':'++'
					    (_cor8, [10])
				    in  %% Line 1683
					case apply 'write_file'/3
						 (_cor12, _cor11, %% Line 1685
								  FilenameMode) of
					  <'ok'> when 'true' ->
					      let <_cor14> =
						  %% Line 1686
						  call 'erlang':'++'
						      (_cor8, [10])
					      in  %% Line 1686
						  case apply 'write_file'/3
							   ([108|[97|[115|[116|[95|[110|[97|[109|[101]]]]]]]]], _cor14, FilenameMode) of
						    <'ok'> when 'true' ->
							do  %% Line 1687
							    call 'erlang':'put'
								('test_server_log_dir_base', _cor8)
							    let <MajorName> =
								%% Line 1689
								call 'filename':'join'
								    (_cor8, [115|[117|[105|[116|[101|[46|[108|[111|[103]]]]]]]]])
							    in  let <HtmlName> =
								    %% Line 1690
								    call 'erlang':'++'
									(MajorName, [46|[104|[116|[109|[108]]]]])
								in  let <UnexpectedName> =
									%% Line 1691
									call 'filename':'join'
									    (_cor8, [117|[110|[101|[120|[112|[101|[99|[116|[101|[100|[95|[105|[111|[46|[108|[111|[103|[46|[104|[116|[109|[108]]]]]]]]]]]]]]]]]]]]]])
								    in  %% Line 1693
									case apply 'open_utf8_file'/1
										 (MajorName) of
									  <{'ok',Major}> when 'true' ->
									      %% Line 1694
									      case apply 'open_html_file'/1
										       (HtmlName) of
										<{'ok',Html}> when 'true' ->
										    let <UnexpHeader,UnexpFooter> =
											%% Line 1697
											case call 'test_server_sup':'framework_call'
												 ('get_html_wrapper', %% Line 1698
														      [[85|[110|[101|[120|[112|[101|[99|[116|[101|[100|[32|[73|[47|[79|[32|[108|[111|[103]]]]]]]]]]]]]]]]]]|['false'|%% Line 1699
																												     [TestDir|['undefined']]]], %% Line 1699
																																[]) of
											  %% Line 1700
											  <UEmpty>
											      when let <_cor21> =
												    call 'erlang':'=:='
													(UEmpty, [])
												in  let <_cor23> =
													try
													    let <_cor22> =
														call 'erlang':'element'
														    (2, UEmpty)
													    in  call 'erlang':'=:='
														    (_cor22, [])
													of <Try> ->
													    Try
													catch <T,R> ->
													    'false'
												    in  call 'erlang':'or'
													    (_cor21, _cor23) ->
											      let <_cor24> =
												  %% Line 1701
												  apply 'html_header'/1
												      ([85|[110|[101|[120|[112|[101|[99|[116|[101|[100|[32|[73|[47|[79|[32|[108|[111|[103]]]]]]]]]]]]]]]]]])
											      in  <_cor24,%% Line 1701
													  [10|[60|[47|[98|[111|[100|[121|[62|[10|[60|[47|[104|[116|[109|[108|[62|[10]]]]]]]]]]]]]]]]]>
											  %% Line 1702
											  <{'basic_html',UH,UF}> when 'true' ->
											      %% Line 1703
											      <UH,UF>
											  %% Line 1704
											  <{'xhtml',UH,UF}> when 'true' ->
											      %% Line 1705
											      <UH,UF>
											  ( <_cor25> when 'true' ->
												primop 'match_fail'
												    ({'case_clause',_cor25})
											    -| ['compiler_generated'] )
											end
										    in  %% Line 1708
											case apply 'open_html_file'/1
												 (UnexpectedName) of
											  <{'ok',Unexpected}> when 'true' ->
											      let <_cor29> =
												  %% Line 1710
												  apply 'xhtml'/2
												      ([60|[98|[114|[62|[10|[60|[104|[50|[62|[85|[110|[101|[120|[112|[101|[99|[116|[101|[100|[32|[73|[47|[79|[60|[47|[104|[50|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1711
																															       [60|[98|[114|[32|[47|[62|[10|[60|[104|[51|[62|[85|[110|[101|[120|[112|[101|[99|[116|[101|[100|[32|[73|[47|[79|[60|[47|[104|[51|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
											      in  do  %% Line 1709
												      call 'io':'put_chars'
													  (Unexpected, [UnexpHeader|%% Line 1710
																    [_cor29|%% Line 1712
																	    [[10|[60|[112|[114|[101|[62|[10]]]]]]]]]])
												      do  %% Line 1713
													  call 'erlang':'put'
													      ('test_server_unexpected_footer', {UnexpectedName,UnexpFooter})
													  do  %% Line 1715
													      call 'test_server_io':'set_fd'
														  ('major', Major)
													      do  %% Line 1716
														  call 'test_server_io':'set_fd'
														      ('html', Html)
														  do  %% Line 1717
														      call 'test_server_io':'set_fd'
															  ('unexpected_io', Unexpected)
														      let <_cor32> =
															  %% Line 1719
															  call 'filename':'absname'
															      ([108|[97|[115|[116|[95|[116|[101|[115|[116|[46|[104|[116|[109|[108]]]]]]]]]]]]]])
														      in  let <_cor30> =
															      %% Line 1720
															      call 'filename':'basename'
																  (Dir)
															  in  do  %% Line 1719
																  apply 'make_html_link'/3
																      (_cor32, %% Line 1720
																	       HtmlName, _cor30)
																  let <LinkName> =
																      %% Line 1721
																      call 'filename':'join'
																	  (Dir, [108|[97|[115|[116|[95|[108|[105|[110|[107]]]]]]]]])
																  in  let <_cor35> =
																	  %% Line 1722
																	  call 'erlang':'++'
																	      (LinkName, [46|[104|[116|[109|[108]]]]])
																      in  let <_cor34> =
																	      %% Line 1723
																	      call 'filename':'basename'
																		  (Dir)
																	  in  do  %% Line 1722
																		  apply 'make_html_link'/3
																		      (_cor35, HtmlName, _cor34)
																		  let <PrivDir> =
																		      %% Line 1725
																		      call 'filename':'join'
																			  (_cor8, [108|[111|[103|[95|[112|[114|[105|[118|[97|[116|[101]]]]]]]]]]])
																		  in  %% Line 1726
																		      case call 'file':'make_dir'
																			       (PrivDir) of
																			<'ok'> when 'true' ->
																			    let <_cor38> =
																				%% Line 1727
																				call 'erlang':'++'
																				    (PrivDir, [47])
																			    in  do  %% Line 1727
																				    call 'erlang':'put'
																					('test_server_priv_dir', _cor38)
																				    do  %% Line 1728
																					apply 'print_timestamp'/2
																					    ('major', [83|[117|[105|[116|[101|[32|[115|[116|[97|[114|[116|[101|[100|[32|[97|[116|[32]]]]]]]]]]]]]]]]])
																					let <_cor39> =
																					    %% Line 1730
																					    call 'lists':'flatten'
																						(_cor8)
																					in  let <LogInfo> =
																						%% Line 1730
																						[{'topdir',Dir}|[{'rundir',_cor39}|[]]]
																					    in  do  %% Line 1731
																						    call 'test_server_sup':'framework_call'
																							('report', ['loginfo'|[LogInfo|[]]])
																						    %% Line 1732
																						    {'ok',_cor8}
																			( <_cor37> when 'true' ->
																			      primop 'match_fail'
																				  ({'badmatch',_cor37})
																			  -| ['compiler_generated'] )
																		      end
											  ( <_cor28> when 'true' ->
												primop 'match_fail'
												    ({'badmatch',_cor28})
											    -| ['compiler_generated'] )
											end
										( <_cor20> when 'true' ->
										      primop 'match_fail'
											  ({'badmatch',_cor20})
										  -| ['compiler_generated'] )
									      end
									  ( <_cor19> when 'true' ->
										primop 'match_fail'
										    ({'badmatch',_cor19})
									    -| ['compiler_generated'] )
									end
						    ( <_cor15> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor15})
						      -| ['compiler_generated'] )
						  end
					  ( <_cor13> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor13})
					    -| ['compiler_generated'] )
					end
'log_file_error'/2 =
    %% Line 1734
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1735
	    call 'lists':'flatten'
		(_cor0)
	in  %% Line 1735
	    call 'erlang':'exit'
		({'cannot_create_log_dir',{_cor1,_cor2}})
'make_html_link'/3 =
    %% Line 1737
    fun (_cor2,_cor1,_cor0) ->
	let <TargetL> =
	    %% Line 1739
	    call 'filename':'split'
		(_cor1)
	in  let <_cor4> =
		%% Line 1740
		call 'filename':'dirname'
		    (_cor2)
	    in  let <PwdL> =
		    %% Line 1740
		    call 'filename':'split'
			(_cor4)
		in  let <_cor11> =
			%% Line 1741
			case call 'lists':'prefix'
				 (PwdL, TargetL) of
			  %% Line 1742
			  <'true'> when 'true' ->
			      let <_cor6> =
				  %% Line 1743
				  call 'erlang':'length'
				      (PwdL)
			      in  let <_cor7> =
				      %% Line 1743
				      call 'lists':'nthtail'
					  (_cor6, TargetL)
				  in  let <_cor8> =
					  %% Line 1743
					  call 'filename':'join'
					      (_cor7)
				      in  %% Line 1743
					  apply 'uri_encode'/1
					      (_cor8)
			  %% Line 1744
			  <'false'> when 'true' ->
			      let <_cor9> =
				  %% Line 1745
				  apply 'uri_encode'/1
				      (_cor1)
			      in  %% Line 1745
				  call 'erlang':'++'
				      ([102|[105|[108|[101|[58]]]]], _cor9)
			  ( <_cor10> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor10})
			    -| ['compiler_generated'] )
			end
		    in  let <_cor13> =
			    %% Line 1747
			    apply 'html_header'/1
				(_cor0)
			in  let <H> =
				%% Line 1747
				[_cor13|%% Line 1748
					[[60|[104|[49|[62|[76|[97|[115|[116|[32|[116|[101|[115|[116|[60|[47|[104|[49|[62|[10|[60|[97|[32|[104|[114|[101|[102|[61|[34]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 1749
																								 [_cor11|[[34|[62]]|[_cor0|[[60|[47|[97|[62|[10|[60|[47|[98|[111|[100|[121|[62|[10|[60|[47|[104|[116|[109|[108|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]
			    in  let <_cor19> =
				    %% Line 1751
				    apply 'write_html_file'/2
					(_cor2, H)
				in  %% Line 1751
				    case _cor19 of
				      <'ok'> when 'true' ->
					  ( _cor19
					    -| ['compiler_generated'] )
				      ( <_cor15> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor15})
					-| ['compiler_generated'] )
				    end
'start_minor_log_file'/3 =
    %% Line 1767
    fun (_cor2,_cor1,_cor0) ->
	let <MFA> = {_cor2,_cor1,%% Line 1768
			 1}
	in  let <LogDir> =
		%% Line 1769
		call 'erlang':'get'
		    ('test_server_log_dir_base')
	    in  let <_cor5> =
		    %% Line 1770
		    call 'io_lib':'format'
			([126|[119|[46|[126|[119|[126|[116|[115]]]]]]]], [_cor2|[_cor1|[[46|[104|[116|[109|[108]]]]]]]])
		in  let <Name0> =
			%% Line 1770
			call 'lists':'flatten'
			    (_cor5)
		    in  let <Name> =
			    %% Line 1771
			    apply 'downcase'/1
				(Name0)
			in  let <AbsName> =
				%% Line 1772
				call 'filename':'join'
				    (LogDir, Name)
			    in  let <_cor13> =
				    %% Line 1773
				    ( case _cor0 of
					( <( 'true'
					     -| ['compiler_generated'] )> when 'true' ->
					      'true'
					  -| ['compiler_generated'] )
					( <( 'false'
					     -| ['compiler_generated'] )> when 'true' ->
					      let <_cor10> =
						  call 'file':'read_file_info'
						      (AbsName)
					      in  let <_cor11> =
						      call 'erlang':'element'
							  (1, _cor10)
						  in  call 'erlang':'=:='
							  (_cor11, 'ok')
					  -| ['compiler_generated'] )
					( <_cor9> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {( 'badarg'
							  -| ['compiler_generated'] ),_cor9}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				in  %% Line 1773
				    case _cor13 of
				      %% Line 1774
				      <'false'> when 'true' ->
					  %% Line 1775
					  apply 'start_minor_log_file1'/5
					      (_cor2, _cor1, LogDir, AbsName, MFA)
				      %% Line 1776
				      <'true'> when 'true' ->
					  let <Tag> =
					      %% Line 1777
					      call 'test_server_sup':'unique_name'
						  ()
					  in  let <_cor15> =
						  %% Line 1779
						  call 'io_lib':'format'
						      ([126|[119|[46|[126|[119|[46|[126|[116|[115|[126|[116|[115]]]]]]]]]]]], [_cor2|[_cor1|[Tag|%% Line 1780
																		 [[46|[104|[116|[109|[108]]]]]]]]])
					      in  let <Name1_0> =
						      %% Line 1779
						      call 'lists':'flatten'
							  (_cor15)
						  in  let <Name1> =
							  %% Line 1781
							  apply 'downcase'/1
							      (Name1_0)
						      in  let <AbsName1> =
							      %% Line 1782
							      call 'filename':'join'
								  (LogDir, Name1)
							  in  %% Line 1783
							      apply 'start_minor_log_file1'/5
								  (_cor2, _cor1, LogDir, AbsName1, MFA)
				      ( <_cor19> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor19})
					-| ['compiler_generated'] )
				    end
'start_minor_log_file1'/5 =
    %% Line 1786
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1787
	case apply 'open_html_file'/1
		 (_cor1) of
	  <{'ok',Fd}> when 'true' ->
	      let <_cor6> =
		  %% Line 1788
		  call 'erlang':'get'
		      ('test_server_minor_level')
	      in  let <Lev> =
		      %% Line 1788
		      call 'erlang':'+'
			  (_cor6, 1000)
		  in  do  %% Line 1789
			  call 'erlang':'put'
			      ('test_server_minor_fd', Fd)
			  let <_cor8> =
			      %% Line 1790
			      call 'erlang':'group_leader'
				  ()
			  in  do  %% Line 1790
				  call 'test_server_gl':'set_minor_fd'
				      (_cor8, Fd, _cor0)
				  let <TestDescr> =
				      %% Line 1792
				      call 'io_lib':'format'
					  ([84|[101|[115|[116|[32|[126|[119|[58|[126|[119|[32|[114|[101|[115|[117|[108|[116]]]]]]]]]]]]]]]]], [_cor4|[_cor3|[]]])
				  in  let <_cor10> =
					  %% Line 1796
					  call 'filename':'dirname'
					      (_cor1)
				      in  let <Header,Footer> =
					      %% Line 1794
					      case call 'test_server_sup':'framework_call'
						       ('get_html_wrapper', %% Line 1795
									    [TestDescr|['false'|%% Line 1796
												[_cor10|%% Line 1797
													['undefined']]]], %% Line 1797
															  []) of
						%% Line 1798
						<Empty>
						    when let <_cor11> =
							  call 'erlang':'=:='
							      (Empty, [])
						      in  let <_cor13> =
							      try
								  let <_cor12> =
								      call 'erlang':'element'
									  (2, Empty)
								  in  call 'erlang':'=:='
									  (_cor12, [])
							      of <Try> ->
								  Try
							      catch <T,R> ->
								  'false'
							  in  call 'erlang':'or'
								  (_cor11, _cor13) ->
						    do  %% Line 1799
							call 'erlang':'put'
							    ('basic_html', 'true')
							let <_cor14> =
							    %% Line 1800
							    apply 'html_header'/1
								(TestDescr)
							in  <_cor14,%% Line 1800
								    [10|[60|[47|[98|[111|[100|[121|[62|[10|[60|[47|[104|[116|[109|[108|[62|[10]]]]]]]]]]]]]]]]]>
						%% Line 1801
						<{'basic_html',Html0,Html1}> when 'true' ->
						    do  %% Line 1802
							call 'erlang':'put'
							    ('basic_html', 'true')
							%% Line 1803
							<Html0,Html1>
						%% Line 1804
						<{'xhtml',Html0,Html1}> when 'true' ->
						    do  %% Line 1805
							call 'erlang':'put'
							    ('basic_html', 'false')
							%% Line 1806
							<Html0,Html1>
						( <_cor15> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor15})
						  -| ['compiler_generated'] )
					      end
					  in  do  %% Line 1808
						  call 'erlang':'put'
						      ('test_server_minor_footer', Footer)
						  do  %% Line 1809
						      call 'io':'put_chars'
							  (Fd, Header)
						      let <_cor18> =
							  %% Line 1811
							  call 'erlang':'atom_to_list'
							      (_cor4)
						      in  let <_cor19> =
							      %% Line 1811
							      apply 'downcase'/1
								  (_cor18)
							  in  let <SrcListing> =
								  %% Line 1811
								  call 'erlang':'++'
								      (_cor19, [46|[115|[114|[99|[46|[104|[116|[109|[108]]]]]]]]])
							      in  let <_cor23> =
								      %% Line 1812
								      call 'filename':'join'
									  (_cor2, SrcListing)
								  in  let <_cor24> =
									  %% Line 1812
									  call 'filelib':'is_file'
									      (_cor23)
								      in  let <_cor21> =
									      %% Line 1813
									      call 'erlang':'get'
										  ('test_server_logopts')
									  in  let <_cor22> =
										  %% Line 1813
										  call 'lists':'member'
										      ('no_src', _cor21)
									      in  do  %% Line 1812
										      case <_cor24,_cor22> of
											%% Line 1814
											<'true','false'> when 'true' ->
											    let <_cor25> =
												%% Line 1816
												apply 'uri_encode'/1
												    (SrcListing)
											    in  let <_cor26> =
												    %% Line 1817
												    call 'erlang':'atom_to_list'
													(_cor3)
												in  let <_cor27> =
													%% Line 1817
													call 'erlang':'++'
													    (_cor26, [45|[49]])
												    in  let <_cor28> =
													    %% Line 1817
													    apply 'uri_encode'/2
														(_cor27, 'utf8')
													in  %% Line 1815
													    apply 'print'/3
														(Lev, [60|[97|[32|[104|[114|[101|[102|[61|[34|[126|[116|[115|[35|[126|[116|[115|[34|[62|[115|[111|[117|[114|[99|[101|[32|[99|[111|[100|[101|[32|[102|[111|[114|[32|[126|[119|[58|[126|[119|[47|[49|[60|[47|[97|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1816
																																														      [_cor25|%% Line 1817
																																															      [_cor28|%% Line 1818
																																																      [_cor4|[_cor3|[]]]]])
											%% Line 1819
											<_fol1930,_fol1931> when 'true' ->
											    'ok'
										      end
										      do  %% Line 1823
											  call 'io':'put_chars'
											      (Fd, [60|[112|[114|[101|[62|[10]]]]]])
											  _cor1
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'stop_minor_log_file'/0 =
    %% Line 1827
    fun () ->
	let <_cor0> =
	    %% Line 1828
	    call 'erlang':'group_leader'
		()
	in  do  %% Line 1828
		call 'test_server_gl':'unset_minor_fd'
		    (_cor0)
		let <Fd> =
		    %% Line 1829
		    call 'erlang':'get'
			('test_server_minor_fd')
		in  let <Footer> =
			%% Line 1830
			call 'erlang':'get'
			    ('test_server_minor_footer')
		    in  let <_cor3> =
			    %% Line 1831
			    call 'erlang':'++'
				([60|[47|[112|[114|[101|[62|[10]]]]]]], Footer)
			in  do  %% Line 1831
				call 'io':'put_chars'
				    (Fd, _cor3)
				%% Line 1832
				case call 'file':'close'
					 (Fd) of
				  <'ok'> when 'true' ->
				      %% Line 1833
				      call 'erlang':'put'
					  ('test_server_minor_fd', 'undefined')
				  ( <_cor4> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor4})
				    -| ['compiler_generated'] )
				end
'downcase'/1 =
    %% Line 1835
    fun (_cor0) ->
	apply 'downcase'/2
	    (_cor0, [])
'downcase'/2 =
    %% Line 1836
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Uc|Rest],Result>
	      when let <_cor2> =
		    call 'erlang':'=<'
			(65, Uc)
		in  let <_cor3> =
			call 'erlang':'=<'
			    (Uc, 90)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor4> =
		  %% Line 1837
		  call 'erlang':'-'
		      (Uc, 65)
	      in  let <_cor5> =
		      %% Line 1837
		      call 'erlang':'+'
			  (_cor4, 97)
		  in  %% Line 1837
		      apply 'downcase'/2
			  (Rest, [_cor5|Result])
	  %% Line 1838
	  <[C|Rest],Result> when 'true' ->
	      %% Line 1839
	      apply 'downcase'/2
		  (Rest, [C|Result])
	  %% Line 1840
	  <[],Result> when 'true' ->
	      %% Line 1841
	      call 'lists':'reverse'
		  (Result)
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'downcase',2}}] )
	    -| ['compiler_generated'] )
	end
'html_convert_modules'/3 =
    %% Line 1850
    fun (_cor2,_cor1,_cor0) ->
	let <Mods> =
	    %% Line 1851
	    apply 'html_isolate_modules'/2
		(_cor2, _cor0)
	in  do  %% Line 1852
		apply 'html_convert_modules'/1
		    (Mods)
		let <_cor5> =
		    %% Line 1853
		    call 'erlang':'get'
			('test_server_dir')
		in  let <_cor4> =
			%% Line 1853
			call 'erlang':'get'
			    ('test_server_log_dir_base')
		    in  %% Line 1853
			apply 'copy_html_files'/2
			    (_cor5, _cor4)
'html_isolate_modules'/2 =
    %% Line 1856
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1857
	    call 'sets':'new'
		()
	in  %% Line 1857
	    apply 'html_isolate_modules'/3
		(_cor1, _cor2, _cor0)
'html_isolate_modules'/3 =
    %% Line 1859
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],Set,_cor17> when 'true' ->
	      call 'sets':'to_list'
		  (Set)
	  %% Line 1860
	  <[{'skip_case',{_X_Case,_X_Cmt},_X_Mode}|Cases],Set,FwMod> when 'true' ->
	      %% Line 1861
	      apply 'html_isolate_modules'/3
		  (Cases, Set, FwMod)
	  %% Line 1862
	  <[{'conf',_X_Ref,Props,{FwMod,_X_Func}}|Cases],Set,_cor18>
	      when call 'erlang':'=:='
		    (_cor18,
		     FwMod) ->
	      let <_cor4> =
		  %% Line 1863
		  case call 'proplists':'get_value'
			   ('suite', Props) of
		    %% Line 1864
		    <'undefined'> when 'true' ->
			Set
		    %% Line 1865
		    <Mod> when 'true' ->
			call 'sets':'add_element'
			    (Mod, Set)
		  end
	      in  %% Line 1867
		  apply 'html_isolate_modules'/3
		      (Cases, _cor4, FwMod)
	  %% Line 1868
	  <[{'conf',_X_Ref,_X_Props,{Mod,_X_Func}}|Cases],Set,FwMod> when 'true' ->
	      let <_cor6> =
		  %% Line 1869
		  call 'sets':'add_element'
		      (Mod, Set)
	      in  %% Line 1869
		  apply 'html_isolate_modules'/3
		      (Cases, _cor6, FwMod)
	  %% Line 1870
	  <[{'skip_case',{'conf',_X_Ref,{FwMod,_X_Func},_X_Cmt},Mode}|Cases],%% Line 1871
									     Set,_cor19>
	      when call 'erlang':'=:='
		    (_cor19,
		     %% Line 1871
		     FwMod) ->
	      let <_cor7> =
		  %% Line 1872
		  apply 'get_props'/1
		      (Mode)
	      in  let <_cor9> =
		      %% Line 1872
		      case call 'proplists':'get_value'
			       ('suite', _cor7) of
			%% Line 1873
			<'undefined'> when 'true' ->
			    Set
			%% Line 1874
			<Mod> when 'true' ->
			    call 'sets':'add_element'
				(Mod, Set)
		      end
		  in  %% Line 1876
		      apply 'html_isolate_modules'/3
			  (Cases, _cor9, FwMod)
	  %% Line 1877
	  <[{'skip_case',{'conf',_X_Ref,{Mod,_X_Func},_X_Cmt},_X_Props}|Cases],%% Line 1878
									       Set,%% Line 1878
										   FwMod> when 'true' ->
	      let <_cor11> =
		  %% Line 1879
		  call 'sets':'add_element'
		      (Mod, Set)
	      in  %% Line 1879
		  apply 'html_isolate_modules'/3
		      (Cases, _cor11, FwMod)
	  %% Line 1880
	  <[{Mod,_X_Case}|Cases],Set,FwMod> when 'true' ->
	      let <_cor12> =
		  %% Line 1881
		  call 'sets':'add_element'
		      (Mod, Set)
	      in  %% Line 1881
		  apply 'html_isolate_modules'/3
		      (Cases, _cor12, FwMod)
	  %% Line 1882
	  <[{Mod,_X_Case,_X_Args}|Cases],Set,FwMod> when 'true' ->
	      let <_cor13> =
		  %% Line 1883
		  call 'sets':'add_element'
		      (Mod, Set)
	      in  %% Line 1883
		  apply 'html_isolate_modules'/3
		      (Cases, _cor13, FwMod)
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'html_isolate_modules',3}}] )
	    -| ['compiler_generated'] )
	end
'html_convert_modules'/1 =
    %% Line 1886
    fun (_cor0) ->
	case _cor0 of
	  <[Mod|Mods]> when 'true' ->
	      %% Line 1887
	      case call 'code':'which'
		       (Mod) of
		%% Line 1888
		<Path>
		    when call 'erlang':'is_list'
			  (Path) ->
		    let <_cor1> =
			%% Line 1889
			call 'filename':'rootname'
			    (Path)
		    in  let <SrcFile> =
			    %% Line 1889
			    call 'erlang':'++'
				(_cor1, [46|[101|[114|[108]]]])
			in  let <_cor7> =
				%% Line 1891
				case call 'file':'read_file_info'
					 (SrcFile) of
				  %% Line 1892
				  <{'ok',SInfo}> when 'true' ->
				      %% Line 1893
				      {SrcFile,SInfo}
				  %% Line 1894
				  <{'error',_cor17}> when 'true' ->
				      let <ModInfo> =
					  %% Line 1895
					  call Mod:'module_info'
					      ('compile')
				      in  %% Line 1896
					  case call 'proplists':'get_value'
						   ('source', ModInfo) of
					    %% Line 1897
					    <'undefined'> when 'true' ->
						%% Line 1898
						'undefined'
					    %% Line 1899
					    <OtherSrcFile> when 'true' ->
						%% Line 1900
						case call 'file':'read_file_info'
							 (OtherSrcFile) of
						  %% Line 1901
						  <{'ok',SInfo}> when 'true' ->
						      %% Line 1902
						      {OtherSrcFile,SInfo}
						  %% Line 1903
						  <{'error',_cor18}> when 'true' ->
						      %% Line 1904
						      'undefined'
						  ( <_cor4> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor4})
						    -| ['compiler_generated'] )
						end
					  end
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor6})
				    -| ['compiler_generated'] )
				end
			    in  %% Line 1908
				case _cor7 of
				  %% Line 1909
				  <'undefined'> when 'true' ->
				      %% Line 1910
				      apply 'html_convert_modules'/1
					  (Mods)
				  %% Line 1911
				  <{SrcFile1,SrcFileInfo}> when 'true' ->
				      let <DestDir> =
					  %% Line 1912
					  call 'erlang':'get'
					      ('test_server_dir')
				      in  let <Name> =
					      %% Line 1913
					      call 'erlang':'atom_to_list'
						  (Mod)
					  in  let <_cor11> =
						  %% Line 1915
						  apply 'downcase'/1
						      (Name)
					      in  let <_cor12> =
						      %% Line 1915
						      call 'erlang':'++'
							  (_cor11, [46|[115|[114|[99|[46|[104|[116|[109|[108]]]]]]]]])
						  in  let <DestFile> =
							  %% Line 1914
							  call 'filename':'join'
							      (DestDir, _cor12)
						      in  do  %% Line 1916
							      apply 'html_possibly_convert'/3
								  (SrcFile1, SrcFileInfo, DestFile)
							      %% Line 1917
							      apply 'html_convert_modules'/1
								  (Mods)
				  ( <_cor14> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor14})
				    -| ['compiler_generated'] )
				end
		%% Line 1919
		<_X_Other> when 'true' ->
		    %% Line 1920
		    apply 'html_convert_modules'/1
			(Mods)
	      end
	  %% Line 1922
	  <[]> when 'true' ->
	      'ok'
	  ( <_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16})
		  -| [{'function_name',{'html_convert_modules',1}}] )
	    -| ['compiler_generated'] )
	end
'html_possibly_convert'/3 =
    %% Line 1925
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1926
	case call 'file':'read_file_info'
		 (_cor0) of
	  %% Line 1927
	  <{'ok',DestInfo = {'file_info',_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39}}>
	      when ( try
		      ( case <> of
			  ( <>
				when ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'is_record'
									 -| ['compiler_generated'] )
					(_cor1,
					 ( 'file_info'
					   -| ['compiler_generated'] ),
					 ( 14
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] ) ->
				let <_cor13> =
				    ( call 'erlang':'element'
					  (6, _cor1)
				      -| ['compiler_generated'] )
				in  ( call 'erlang':'>='
					  (_cor31, _cor13)
				      -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				'false'
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
		  of <Try> ->
		      Try
		  catch <T,R> ->
		      'false'
		  -| ['compiler_generated'] ) ->
	      %% Line 1928
	      'ok'
	  %% Line 1929
	  <_cor40> when 'true' ->
	      let <OutDir> =
		  %% Line 1930
		  call 'erlang':'get'
		      ('test_server_log_dir_base')
	      in  let <_cor17> =
		      %% Line 1932
		      call 'erlang':'++'
			  ([77|[111|[100|[117|[108|[101|[32]]]]]]], _cor2)
		  in  let <_cor18> =
			  %% Line 1934
			  apply 'encoding'/1
			      (_cor2)
		      in  %% Line 1931
			  case call 'test_server_sup':'framework_call'
				   ('get_html_wrapper', %% Line 1932
							[_cor17|['false'|%% Line 1933
									 [OutDir|['undefined'|%% Line 1934
											      [_cor18|[]]]]]], %% Line 1934
													       []) of
			    %% Line 1935
			    <Empty>
				when let <_cor19> =
				      call 'erlang':'=:='
					  (Empty, [])
				  in  let <_cor21> =
					  try
					      let <_cor20> =
						  call 'erlang':'element'
						      (2, Empty)
					      in  call 'erlang':'=:='
						      (_cor20, [])
					  of <Try> ->
					      Try
					  catch <T,R> ->
					      'false'
				      in  call 'erlang':'or'
					      (_cor19, _cor21) ->
				%% Line 1936
				call 'erl2html2':'convert'
				    (_cor2, _cor0)
			    %% Line 1937
			    <{_cor41,Header,_cor42}> when 'true' ->
				%% Line 1938
				call 'erl2html2':'convert'
				    (_cor2, _cor0, Header)
			    ( <_cor22> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor22})
			      -| ['compiler_generated'] )
			  end
	end
'copy_html_files'/2 =
    %% Line 1943
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1944
	    call 'filename':'join'
		(_cor1, [42|[46|[115|[114|[99|[46|[104|[116|[109|[108]]]]]]]]]])
	in  let <Files> =
		%% Line 1944
		call 'filelib':'wildcard'
		    (_cor3)
	    in  let <_cor7> =
		    %% Line 1945
		    ( fun (_cor5) ->
			  apply 'copy_html_file'/2
			      (_cor5, _cor0)
		      -| [{'id',{0,0,'-copy_html_files/2-fun-0-'}}] )
		in  %% Line 1945
		    call 'lists':'foreach'
			(_cor7, Files)
'copy_html_file'/2 =
    %% Line 1947
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1948
	    call 'filename':'basename'
		(_cor1)
	in  let <Dest> =
		%% Line 1948
		call 'filename':'join'
		    (_cor0, _cor2)
	    in  %% Line 1949
		case call 'file':'read_file'
			 (_cor1) of
		  %% Line 1950
		  <{'ok',Bin}> when 'true' ->
		      let <_cor8> =
			  %% Line 1951
			  apply 'write_binary_file'/2
			      (Dest, Bin)
		      in  %% Line 1951
			  case _cor8 of
			    <'ok'> when 'true' ->
				( _cor8
				  -| ['compiler_generated'] )
			    ( <_cor4> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor4})
			      -| ['compiler_generated'] )
			  end
		  %% Line 1952
		  <{'error',_X_Reason}> when 'true' ->
		      %% Line 1953
		      call 'io':'format'
			  ([70|[105|[108|[101|[32|[126|[116|[115|[58|[32|[114|[101|[97|[100|[32|[102|[97|[105|[108|[101|[100|[10]]]]]]]]]]]]]]]]]]]]]], [_cor1|[]])
		  ( <_cor5> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor5})
		    -| ['compiler_generated'] )
		end
'add_init_and_end_per_suite'/4 =
    %% Line 1962
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Case = {'make',_cor43,_cor44}|Cases],LastMod,LastRef,FwMod> when 'true' ->
	      let <_cor4> =
		  %% Line 1963
		  apply 'add_init_and_end_per_suite'/4
		      (Cases, LastMod, LastRef, FwMod)
	      in  %% Line 1963
		  [Case|_cor4]
	  %% Line 1964
	  <[Case = {'skip_case',{{Mod,'all'},_cor45},_cor46}|Cases],LastMod,%% Line 1965
									    LastRef,%% Line 1965
										    FwMod>
	      when %% Line 1965
		call 'erlang':'=/='
		    (Mod,
		     LastMod) ->
	      %% Line 1966
	      case %% Line 1967
		   apply 'do_add_end_per_suite_and_skip'/4
		       (LastMod, LastRef, Mod, FwMod) of
		<{PreCases,NextMod,NextRef}> when 'true' ->
		    let <_cor6> =
			%% Line 1968
			apply 'add_init_and_end_per_suite'/4
			    (Cases, NextMod, %% Line 1969
					     NextRef, %% Line 1969
						      FwMod)
		    in  %% Line 1968
			call 'erlang':'++'
			    (PreCases, [Case|_cor6])
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1970
	  <[Case = {'skip_case',{{Mod,_cor47},_X_Cmt},_X_Mode}|Cases],%% Line 1971
								      LastMod,%% Line 1971
									      LastRef,%% Line 1971
										      FwMod>
	      when %% Line 1971
		call 'erlang':'=/='
		    (Mod,
		     LastMod) ->
	      %% Line 1972
	      case %% Line 1973
		   apply 'do_add_init_and_end_per_suite'/4
		       (LastMod, LastRef, Mod, FwMod) of
		<{PreCases,NextMod,NextRef}> when 'true' ->
		    let <_cor8> =
			%% Line 1974
			apply 'add_init_and_end_per_suite'/4
			    (Cases, NextMod, %% Line 1975
					     NextRef, %% Line 1975
						      FwMod)
		    in  %% Line 1974
			call 'erlang':'++'
			    (PreCases, [Case|_cor8])
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1976
	  <[Case = {'skip_case',{'conf',_cor48,{Mod,_cor49},_cor50},_cor51}|Cases],%% Line 1977
										   LastMod,%% Line 1977
											   LastRef,%% Line 1977
												   FwMod>
	      when %% Line 1977
		call 'erlang':'=/='
		    (Mod,
		     LastMod) ->
	      %% Line 1978
	      case %% Line 1979
		   apply 'do_add_init_and_end_per_suite'/4
		       (LastMod, LastRef, Mod, FwMod) of
		<{PreCases,NextMod,NextRef}> when 'true' ->
		    let <_cor10> =
			%% Line 1980
			apply 'add_init_and_end_per_suite'/4
			    (Cases, NextMod, %% Line 1981
					     NextRef, %% Line 1981
						      FwMod)
		    in  %% Line 1980
			call 'erlang':'++'
			    (PreCases, [Case|_cor10])
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1982
	  <[Case = {'skip_case',{'conf',_cor52,{Mod,_cor53},_cor54}}|Cases],LastMod,%% Line 1983
										    LastRef,%% Line 1983
											    FwMod>
	      when %% Line 1983
		call 'erlang':'=/='
		    (Mod,
		     LastMod) ->
	      %% Line 1984
	      case %% Line 1985
		   apply 'do_add_init_and_end_per_suite'/4
		       (LastMod, LastRef, Mod, FwMod) of
		<{PreCases,NextMod,NextRef}> when 'true' ->
		    let <_cor12> =
			%% Line 1986
			apply 'add_init_and_end_per_suite'/4
			    (Cases, NextMod, %% Line 1987
					     NextRef, %% Line 1987
						      FwMod)
		    in  %% Line 1986
			call 'erlang':'++'
			    (PreCases, [Case|_cor12])
		( <_cor11> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor11})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1988
	  <[Case = {'conf',Ref,Props,{FwMod,Func}}|Cases],LastMod,%% Line 1989
								  LastRef,_cor55>
	      when call 'erlang':'=:='
		    (_cor55,
		     %% Line 1989
		     FwMod) ->
	      %% Line 1993
	      case call 'proplists':'get_value'
		       ('suite', Props) of
		%% Line 1994
		<Suite>
		    when let <_cor13> =
			  call 'erlang':'=/='
			      (Suite, 'undefined')
		      in  let <_cor14> =
			      call 'erlang':'=/='
				  (Suite, LastMod)
			  in  call 'erlang':'and'
				  (_cor13, _cor14) ->
		    %% Line 1995
		    case %% Line 1996
			 apply 'do_add_init_and_end_per_suite'/4
			     (LastMod, LastRef, Suite, FwMod) of
		      <{PreCases,NextMod,NextRef}> when 'true' ->
			  let <_cor16> =
			      %% Line 1997
			      call 'proplists':'delete'
				  ('suite', Props)
			  in  let <Case1> =
				  %% Line 1997
				  {'conf',Ref,[{'suite',NextMod}|_cor16],%% Line 1998
									 {FwMod,Func}}
			      in  let <_cor18> =
				      %% Line 1999
				      apply 'add_init_and_end_per_suite'/4
					  (Cases, NextMod, %% Line 2000
							   NextRef, %% Line 2000
								    FwMod)
				  in  %% Line 1999
				      call 'erlang':'++'
					  (PreCases, [Case1|_cor18])
		      ( <_cor15> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor15})
			-| ['compiler_generated'] )
		    end
		%% Line 2001
		<_cor56> when 'true' ->
		    let <_cor19> =
			%% Line 2002
			apply 'add_init_and_end_per_suite'/4
			    (Cases, LastMod, LastRef, FwMod)
		    in  %% Line 2002
			[Case|_cor19]
	      end
	  %% Line 2004
	  <[Case = {'conf',_cor57,_cor58,{Mod,_cor59}}|Cases],LastMod,%% Line 2005
								      LastRef,%% Line 2005
									      FwMod>
	      when let <_cor21> =
		    %% Line 2005
		    call 'erlang':'=/='
			(Mod, LastMod)
		in  let <_cor22> =
			%% Line 2005
			call 'erlang':'=/='
			    (Mod, FwMod)
		    in  %% Line 2005
			call 'erlang':'and'
			    (_cor21, _cor22) ->
	      %% Line 2006
	      case %% Line 2007
		   apply 'do_add_init_and_end_per_suite'/4
		       (LastMod, LastRef, Mod, FwMod) of
		<{PreCases,NextMod,NextRef}> when 'true' ->
		    let <_cor24> =
			%% Line 2008
			apply 'add_init_and_end_per_suite'/4
			    (Cases, NextMod, %% Line 2009
					     NextRef, %% Line 2009
						      FwMod)
		    in  %% Line 2008
			call 'erlang':'++'
			    (PreCases, [Case|_cor24])
		( <_cor23> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor23})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2010
	  <[SkipCase|Cases],LastMod,LastRef,FwMod>
	      when %% Line 2011
		try
		    let <_cor25> =
			call 'erlang':'element'
			    (1, SkipCase)
		    in  call 'erlang':'=:='
			    (_cor25, 'skip_case')
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor26> =
		  %% Line 2012
		  apply 'add_init_and_end_per_suite'/4
		      (Cases, LastMod, LastRef, FwMod)
	      in  %% Line 2012
		  [SkipCase|_cor26]
	  %% Line 2013
	  <[Case = {'conf',_cor60,_cor61,_cor62}|Cases],LastMod,LastRef,FwMod> when 'true' ->
	      let <_cor27> =
		  %% Line 2014
		  apply 'add_init_and_end_per_suite'/4
		      (Cases, LastMod, LastRef, FwMod)
	      in  %% Line 2014
		  [Case|_cor27]
	  %% Line 2015
	  <[Case = {Mod,_cor63}|Cases],LastMod,LastRef,FwMod>
	      when let <_cor28> =
		    %% Line 2016
		    call 'erlang':'=/='
			(Mod, LastMod)
		in  let <_cor29> =
			%% Line 2016
			call 'erlang':'=/='
			    (Mod, FwMod)
		    in  %% Line 2016
			call 'erlang':'and'
			    (_cor28, _cor29) ->
	      %% Line 2017
	      case %% Line 2018
		   apply 'do_add_init_and_end_per_suite'/4
		       (LastMod, LastRef, Mod, FwMod) of
		<{PreCases,NextMod,NextRef}> when 'true' ->
		    let <_cor31> =
			%% Line 2019
			apply 'add_init_and_end_per_suite'/4
			    (Cases, NextMod, %% Line 2020
					     NextRef, %% Line 2020
						      FwMod)
		    in  %% Line 2019
			call 'erlang':'++'
			    (PreCases, [Case|_cor31])
		( <_cor30> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor30})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2021
	  <[Case = {Mod,_cor64,_cor65}|Cases],LastMod,LastRef,FwMod>
	      when let <_cor32> =
		    %% Line 2022
		    call 'erlang':'=/='
			(Mod, LastMod)
		in  let <_cor33> =
			%% Line 2022
			call 'erlang':'=/='
			    (Mod, FwMod)
		    in  %% Line 2022
			call 'erlang':'and'
			    (_cor32, _cor33) ->
	      %% Line 2023
	      case %% Line 2024
		   apply 'do_add_init_and_end_per_suite'/4
		       (LastMod, LastRef, Mod, FwMod) of
		<{PreCases,NextMod,NextRef}> when 'true' ->
		    let <_cor35> =
			%% Line 2025
			apply 'add_init_and_end_per_suite'/4
			    (Cases, NextMod, %% Line 2026
					     NextRef, %% Line 2026
						      FwMod)
		    in  %% Line 2025
			call 'erlang':'++'
			    (PreCases, [Case|_cor35])
		( <_cor34> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor34})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2027
	  <[Case|Cases],LastMod,LastRef,FwMod> when 'true' ->
	      let <_cor36> =
		  %% Line 2028
		  apply 'add_init_and_end_per_suite'/4
		      (Cases, LastMod, LastRef, FwMod)
	      in  %% Line 2028
		  [Case|_cor36]
	  %% Line 2029
	  <[],_X_LastMod,'undefined',_X_FwMod> when 'true' ->
	      %% Line 2030
	      []
	  %% Line 2031
	  <[],_X_LastMod,'skipped_suite',_X_FwMod> when 'true' ->
	      %% Line 2032
	      []
	  %% Line 2033
	  <[],LastMod,LastRef,FwMod> when 'true' ->
	      %% Line 2036
	      case call 'erlang':'function_exported'
		       (LastMod, 'end_per_suite', 1) of
		%% Line 2037
		<'true'> when 'true' ->
		    %% Line 2038
		    [{'conf',LastRef,[],{LastMod,'end_per_suite'}}|[]]
		%% Line 2039
		<'false'> when 'true' ->
		    %% Line 2041
		    case call 'erlang':'function_exported'
			     (FwMod, 'end_per_suite', 1) of
		      %% Line 2042
		      <'true'> when 'true' ->
			  %% Line 2043
			  [{'conf',LastRef,[{'suite',LastMod}|[]],{FwMod,'end_per_suite'}}|[]]
		      %% Line 2044
		      <'false'> when 'true' ->
			  %% Line 2045
			  [{'conf',LastRef,[],{LastMod,'end_per_suite'}}|[]]
		      ( <_cor37> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor37})
			-| ['compiler_generated'] )
		    end
		( <_cor38> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor38})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor42,_cor41,_cor40,_cor39> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor42,_cor41,_cor40,_cor39})
		  -| [{'function_name',{'add_init_and_end_per_suite',4}}] )
	    -| ['compiler_generated'] )
	end
'do_add_init_and_end_per_suite'/4 =
    %% Line 2049
    fun (_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 2050
	    case call 'code':'is_loaded'
		     (_cor1) of
	      %% Line 2051
	      <'false'> when 'true' ->
		  call 'code':'load_file'
		      (_cor1)
	      %% Line 2052
	      <_cor19> when 'true' ->
		  'ok'
	    end
	    let <Init,NextMod,NextRef> =
		%% Line 2055
		case call 'erlang':'function_exported'
			 (_cor1, 'init_per_suite', 1) of
		  %% Line 2056
		  <'true'> when 'true' ->
		      let <Ref> =
			  %% Line 2057
			  call 'erlang':'make_ref'
			      ()
		      in  %% Line 2058
			  <[{'conf',Ref,[],{_cor1,'init_per_suite'}}|[]],_cor1,Ref>
		  %% Line 2059
		  <'false'> when 'true' ->
		      %% Line 2061
		      case call 'erlang':'function_exported'
			       (_cor0, 'init_per_suite', 1) of
			%% Line 2062
			<'true'> when 'true' ->
			    let <Ref> =
				%% Line 2063
				call 'erlang':'make_ref'
				    ()
			    in  %% Line 2064
				<[{'conf',Ref,[{'suite',_cor1}|[]],%% Line 2065
								   {_cor0,'init_per_suite'}}|%% Line 2065
											     []],_cor1,%% Line 2065
												       Ref>
			%% Line 2066
			<'false'> when 'true' ->
			    %% Line 2067
			    <[],_cor1,'undefined'>
			( <_cor7> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor7})
			  -| ['compiler_generated'] )
		      end
		  ( <_cor8> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor8})
		    -| ['compiler_generated'] )
		end
	    in  let <_cor13> =
		    %% Line 2072
		    case <> of
		      <>
			  when call 'erlang':'=:='
				(_cor2,
				 'undefined') ->
			  %% Line 2073
			  Init
		      %% Line 2074
		      <>
			  when call 'erlang':'=:='
				(_cor2,
				 'skipped_suite') ->
			  %% Line 2075
			  Init
		      %% Line 2076
		      <> when 'true' ->
			  %% Line 2079
			  case call 'erlang':'function_exported'
				   (_cor3, 'end_per_suite', 1) of
			    %% Line 2080
			    <'true'> when 'true' ->
				%% Line 2081
				[{'conf',_cor2,[],{_cor3,'end_per_suite'}}|Init]
			    %% Line 2082
			    <'false'> when 'true' ->
				%% Line 2084
				case call 'erlang':'function_exported'
					 (_cor0, 'end_per_suite', 1) of
				  %% Line 2085
				  <'true'> when 'true' ->
				      %% Line 2086
				      [{'conf',_cor2,[{'suite',_cor1}|[]],%% Line 2087
									  {_cor0,'end_per_suite'}}|%% Line 2087
												   Init]
				  %% Line 2088
				  <'false'> when 'true' ->
				      %% Line 2089
				      [{'conf',_cor2,[],{_cor3,'end_per_suite'}}|Init]
				  ( <_cor11> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor11})
				    -| ['compiler_generated'] )
				end
			    ( <_cor12> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor12})
			      -| ['compiler_generated'] )
			  end
		    end
		in  %% Line 2093
		    {_cor13,NextMod,NextRef}
'do_add_end_per_suite_and_skip'/4 =
    %% Line 2095
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2096
	case _cor2 of
	  %% Line 2097
	  <No>
	      when let <_cor4> =
		    call 'erlang':'=:='
			(_cor2, 'undefined')
		in  let <_cor5> =
			call 'erlang':'=:='
			    (_cor2, 'skipped_suite')
		    in  call 'erlang':'or'
			    (_cor4, _cor5) ->
	      %% Line 2098
	      {[],_cor1,'skipped_suite'}
	  %% Line 2099
	  <_X_Ref> when 'true' ->
	      %% Line 2100
	      case call 'erlang':'function_exported'
		       (_cor3, 'end_per_suite', 1) of
		%% Line 2101
		<'true'> when 'true' ->
		    %% Line 2102
		    {[{'conf',_cor2,[],{_cor3,'end_per_suite'}}|[]],_cor1,%% Line 2103
									  'skipped_suite'}
		%% Line 2104
		<'false'> when 'true' ->
		    %% Line 2105
		    case call 'erlang':'function_exported'
			     (_cor0, 'end_per_suite', 1) of
		      %% Line 2106
		      <'true'> when 'true' ->
			  %% Line 2108
			  {[{'conf',_cor2,[],{_cor0,'end_per_suite'}}|[]],_cor1,%% Line 2109
										'skipped_suite'}
		      %% Line 2110
		      <'false'> when 'true' ->
			  %% Line 2111
			  {[{'conf',_cor2,[],{_cor3,'end_per_suite'}}|[]],_cor1,%% Line 2112
										'skipped_suite'}
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	end
'run_test_cases'/3 =
    %% Line 2123
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 2124
	    call 'test_server':'init_purify'
		()
	    let <_cor3> =
		%% Line 2125
		call 'erlang':'get'
		    ('test_server_logopts')
	    in  do  %% Line 2125
		    case call 'lists':'member'
			     ('no_src', _cor3) of
		      %% Line 2126
		      <'true'> when 'true' ->
			  'ok'
		      %% Line 2128
		      <'false'> when 'true' ->
			  let <FwMod> =
			      %% Line 2129
			      apply 'get_fw_mod'/1
				  ('test_server_ctrl')
			  in  %% Line 2130
			      apply 'html_convert_modules'/3
				  (_cor2, _cor1, FwMod)
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor5})
			-| ['compiler_generated'] )
		    end
		    do  %% Line 2133
			apply 'run_test_cases_loop'/5
			    (_cor2, [_cor1|[]], _cor0, [], [])
			let <AllSkippedN,UserSkipN,AutoSkipN,SkipStr> =
			    %% Line 2136
			    case call 'erlang':'get'
				     ('test_server_skipped') of
			      %% Line 2137
			      <{0,0}> when 'true' ->
				  <0,0,0,[]>
			      %% Line 2138
			      <{US,AS}> when 'true' ->
				  let <_cor8> =
				      call 'erlang':'+'
					  (US, AS)
				  in  let <_cor6> =
					  call 'erlang':'+'
					      (US, AS)
				      in  let <_cor7> =
					      call 'io_lib':'format'
						  ([44|[32|[126|[119|[32|[115|[107|[105|[112|[112|[101|[100]]]]]]]]]]]], [_cor6|[]])
					  in  <_cor8,US,AS,_cor7>
			      ( <_cor9> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor9})
				-| ['compiler_generated'] )
			    end
			in  let <OkN> =
				%% Line 2140
				call 'erlang':'get'
				    ('test_server_ok')
			    in  let <FailedN> =
				    %% Line 2141
				    call 'erlang':'get'
					('test_server_failed')
				in  let <_cor14> =
					%% Line 2143
					call 'erlang':'+'
					    (OkN, FailedN)
				    in  let <_cor15> =
					    %% Line 2143
					    call 'erlang':'+'
						(_cor14, AllSkippedN)
					in  do  %% Line 2142
						apply 'print'/3
						    (1, [84|[69|[83|[84|[32|[67|[79|[77|[80|[76|[69|[84|[69|[44|[32|[126|[119|[32|[111|[107|[44|[32|[126|[119|[32|[102|[97|[105|[108|[101|[100|[126|[116|[115|[32|[111|[102|[32|[126|[119|[32|[116|[101|[115|[116|[32|[99|[97|[115|[101|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2143
																																										      [OkN|[FailedN|[SkipStr|[_cor15|[]]]]])
						do  %% Line 2144
						    call 'test_server_sup':'framework_call'
							('report', ['tests_done'|%% Line 2145
										 [{OkN,FailedN,{UserSkipN,AutoSkipN}}|[]]])
						    let <_cor16> =
							%% Line 2146
							apply 'timestamp_get'/1
							    ([])
						    in  let <_cor17> =
							    %% Line 2146
							    call 'lists':'flatten'
								(_cor16)
							in  do  %% Line 2146
								apply 'print'/3
								    ('major', [61|[102|[105|[110|[105|[115|[104|[101|[100|[32|[32|[32|[32|[32|[32|[126|[115]]]]]]]]]]]]]]]]], [_cor17|[]])
								do  %% Line 2147
								    apply 'print'/3
									('major', [61|[102|[97|[105|[108|[101|[100|[32|[32|[32|[32|[32|[32|[32|[32|[126|[119]]]]]]]]]]]]]]]]], [FailedN|[]])
								    do  %% Line 2148
									apply 'print'/3
									    ('major', [61|[115|[117|[99|[99|[101|[115|[115|[102|[117|[108|[32|[32|[32|[32|[126|[119]]]]]]]]]]]]]]]]], [OkN|[]])
									do  %% Line 2149
									    apply 'print'/3
										('major', [61|[117|[115|[101|[114|[95|[115|[107|[105|[112|[112|[101|[100|[32|[32|[126|[119]]]]]]]]]]]]]]]]], [UserSkipN|[]])
									    do  %% Line 2150
										apply 'print'/3
										    ('major', [61|[97|[117|[116|[111|[95|[115|[107|[105|[112|[112|[101|[100|[32|[32|[126|[119]]]]]]]]]]]]]]]]], [AutoSkipN|[]])
										%% Line 2151
										call 'erlang':'exit'
										    ('test_suites_done')
'run_test_cases_loop'/5 =
    %% Line 2296
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{SkipTag,CaseData = {Type,_X_Ref,_X_Case,_X_Comment}}|Cases],%% Line 2297
									 Config,%% Line 2297
										TimetrapData,%% Line 2297
											     Mode,%% Line 2297
												  Status>
	      when %% Line 2298
		try
		    let <_cor5> =
			call 'erlang':'=:='
			    (SkipTag, 'auto_skip_case')
		    in  let <_cor6> =
			    call 'erlang':'=:='
				(SkipTag, 'skip_case')
			in  let <_cor7> =
				call 'erlang':'or'
				    (_cor5, _cor6)
			    in  let <_cor8> =
				    %% Line 2299
				    call 'erlang':'=:='
					(Type, 'conf')
				in  let <_cor9> =
					%% Line 2299
					call 'erlang':'=:='
					    (Type, 'make')
				    in  let <_cor10> =
					    %% Line 2299
					    call 'erlang':'or'
						(_cor8, _cor9)
					in  call 'erlang':'and'
						(_cor7, _cor10)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 2300
	      apply 'run_test_cases_loop'/5
		  ([{SkipTag,CaseData,Mode}|Cases], %% Line 2301
						    Config, %% Line 2301
							    TimetrapData, %% Line 2301
									  Mode, %% Line 2301
										Status)
	  %% Line 2303
	  <[{SkipTag,{Type,Ref,Case,Comment},SkipMode}|Cases],%% Line 2304
							      Config,%% Line 2304
								     TimetrapData,%% Line 2304
										  Mode,%% Line 2304
										       Status>
	      when %% Line 2305
		try
		    let <_cor11> =
			call 'erlang':'=:='
			    (SkipTag, 'auto_skip_case')
		    in  let <_cor12> =
			    call 'erlang':'=:='
				(SkipTag, 'skip_case')
			in  let <_cor13> =
				call 'erlang':'or'
				    (_cor11, _cor12)
			    in  let <_cor14> =
				    %% Line 2306
				    call 'erlang':'=:='
					(Type, 'conf')
				in  let <_cor15> =
					%% Line 2306
					call 'erlang':'=:='
					    (Type, 'make')
				    in  let <_cor16> =
					    %% Line 2306
					    call 'erlang':'or'
						(_cor14, _cor15)
					in  call 'erlang':'and'
						(_cor13, _cor16)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor17> =
		  %% Line 2307
		  call 'erlang':'get'
		      ('test_server_dir')
	      in  let <_cor18> =
		      %% Line 2307
		      call 'filename':'dirname'
			  (_cor17)
		  in  do  %% Line 2307
			  call 'file':'set_cwd'
			      (_cor18)
			  let <CurrIOHandler> =
			      %% Line 2308
			      call 'erlang':'get'
				  ('test_server_common_io_handler')
			  in  let <ParentMode> =
				  %% Line 2309
				  call 'erlang':'tl'
				      (Mode)
			      in  let <AutoOrUser,ReportTag> =
				      %% Line 2312
				      case <> of
					<>
					    when call 'erlang':'=:='
						  (SkipTag,
						   'auto_skip_case') ->
					    <'auto','tc_auto_skip'>
					%% Line 2313
					<>
					    when call 'erlang':'=:='
						  (SkipTag,
						   'skip_case') ->
					    <'user','tc_user_skip'>
					( <> when 'true' ->
					      primop 'match_fail'
						  ('if_clause')
					  -| ['compiler_generated'] )
				      end
				  in  let <_cor24> =
					  %% Line 2317
					  apply 'curr_ref'/1
					      (Mode)
				      in  let <_cor23> =
					      %% Line 2317
					      apply 'check_props'/2
						  ('parallel', Mode)
					  in  %% Line 2317
					      case <_cor24,_cor23> of
						%% Line 2318
						<_cor349,_cor350>
						    when let <_cor351> =
							  call 'erlang':'=:='
							      (_cor349, Ref)
						      in  let <_cor352> =
							      call 'erlang':'=:='
								  (_cor350, Ref)
							  in  call 'erlang':'and'
								  (_cor351, _cor352) ->
						    %% Line 2319
						    case apply 'check_props'/2
							     ('parallel', ParentMode) of
						      %% Line 2320
						      <'false'> when 'true' ->
							  do  %% Line 2323
							      apply 'handle_test_case_io_and_status'/0
								  ()
							      do  %% Line 2324
								  apply 'set_io_buffering'/1
								      ('undefined')
								  %% Line 2325
								  case apply 'skip_case'/7
									   (AutoOrUser, Ref, 0, Case, Comment, %% Line 2326
													       'false', %% Line 2326
															SkipMode) of
								    <{Mod,Func}> when 'true' ->
									let <_cor26> =
									    %% Line 2327
									    apply 'get_name'/1
										(SkipMode)
									in  let <ConfData> = {%% Line 2327
										 Mod,%% Line 2327
										     {Func,_cor26},%% Line 2327
												   Comment}
									    in  do  %% Line 2328
										    call 'test_server_sup':'framework_call'
											('report', %% Line 2329
												   [ReportTag|[ConfData|[]]])
										    let <_cor28> =
											%% Line 2331
											apply 'delete_status'/2
											    (Ref, Status)
										    in  %% Line 2330
											apply 'run_test_cases_loop'/5
											    (Cases, Config, TimetrapData, ParentMode, _cor28)
								    ( <_cor25> when 'true' ->
									  primop 'match_fail'
									      ({'badmatch',_cor25})
								      -| ['compiler_generated'] )
								  end
						      %% Line 2332
						      <_cor353> when 'true' ->
							  do  %% Line 2335
							      apply 'wait_for_cases'/1
								  (Ref)
							      %% Line 2336
							      case apply 'skip_case'/7
								       (AutoOrUser, Ref, 0, Case, Comment, %% Line 2337
													   'true', %% Line 2337
														   SkipMode) of
								<{Mod,Func}> when 'true' ->
								    let <_cor30> =
									%% Line 2338
									apply 'get_name'/1
									    (SkipMode)
								    in  let <ConfData> = {%% Line 2338
									     Mod,%% Line 2338
										 {Func,_cor30},%% Line 2338
											       Comment}
									in  do  %% Line 2339
										call 'test_server_sup':'framework_call'
										    ('report', [ReportTag|[ConfData|[]]])
										do  %% Line 2340
										    case CurrIOHandler of
										      %% Line 2341
										      <{_cor354,_cor355}>
											  when call 'erlang':'=:='
												(_cor354,
												 Ref) ->
											  %% Line 2345
											  apply 'set_io_buffering'/1
											      ('undefined')
										      %% Line 2346
										      <_cor356> when 'true' ->
											  'ok'
										    end
										    let <_cor33> =
											%% Line 2351
											apply 'delete_status'/2
											    (Ref, Status)
										    in  %% Line 2349
											apply 'run_test_cases_loop'/5
											    (Cases, Config, %% Line 2350
													    TimetrapData, %% Line 2350
															  ParentMode, _cor33)
								( <_cor29> when 'true' ->
								      primop 'match_fail'
									  ({'badmatch',_cor29})
								  -| ['compiler_generated'] )
							      end
						    end
						%% Line 2353
						<_cor357,'false'>
						    when call 'erlang':'=:='
							  (_cor357,
							   Ref) ->
						    %% Line 2356
						    case apply 'skip_case'/7
							     (AutoOrUser, Ref, 0, Case, Comment, %% Line 2357
												 'false', %% Line 2357
													  SkipMode) of
						      <{Mod,Func}> when 'true' ->
							  let <_cor36> =
							      %% Line 2358
							      apply 'get_name'/1
								  (SkipMode)
							  in  let <ConfData> = {%% Line 2358
								   Mod,%% Line 2358
								       {Func,_cor36},%% Line 2358
										     Comment}
							      in  do  %% Line 2359
								      call 'test_server_sup':'framework_call'
									  ('report', [ReportTag|[ConfData|[]]])
								      let <GrName> =
									  %% Line 2364
									  apply 'get_name'/1
									      (Mode)
								      in  let <_cor44> =
									      %% Line 2366
									      case apply 'get_tc_results'/1
										       (Status) of
										%% Line 2367
										<{_cor358,_cor359,Fails}>
										    when try
											  let <_cor39> =
											      call 'erlang':'length'
												  (Fails)
											  in  call 'erlang':'>'
												  (_cor39, 0)
										      of <Try> ->
											  Try
										      catch <T,R> ->
											  'false' ->
										    %% Line 2368
										    case call 'lists':'member'
											     ({'group_result',GrName}, Fails) of
										      %% Line 2369
										      <'true'> when 'true' ->
											  %% Line 2370
											  case apply 'check_prop'/2
												   ('sequence', ParentMode) of
											    %% Line 2371
											    <'false'> when 'true' ->
												%% Line 2372
												Cases
											    %% Line 2373
											    <ParentRef> when 'true' ->
												let <Reason> = {%% Line 2374
												     'group_result',%% Line 2374
														    GrName,%% Line 2374
															   'failed'}
												in  %% Line 2375
												    apply 'skip_cases_upto'/6
													(ParentRef, Cases, %% Line 2376
															   Reason, %% Line 2376
																   'tc', %% Line 2376
																	 ParentMode, %% Line 2377
																		     SkipTag)
											  end
										      %% Line 2379
										      <'false'> when 'true' ->
											  %% Line 2380
											  Cases
										      ( <_cor42> when 'true' ->
											    primop 'match_fail'
												({'case_clause',_cor42})
											-| ['compiler_generated'] )
										    end
										%% Line 2382
										<_cor360> when 'true' ->
										    %% Line 2383
										    Cases
									      end
									  in  let <_cor46> =
										  %% Line 2386
										  apply 'delete_status'/2
										      (Ref, Status)
									      in  %% Line 2385
										  apply 'run_test_cases_loop'/5
										      (_cor44, Config, TimetrapData, ParentMode, _cor46)
						      ( <_cor35> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor35})
							-| ['compiler_generated'] )
						    end
						%% Line 2387
						<_cor361,_cor362>
						    when call 'erlang':'=:='
							  (_cor361,
							   Ref) ->
						    %% Line 2390
						    case apply 'skip_case'/7
							     (AutoOrUser, Ref, 0, Case, Comment, %% Line 2391
												 'true', %% Line 2391
													 SkipMode) of
						      <{Mod,Func}> when 'true' ->
							  let <_cor48> =
							      %% Line 2392
							      apply 'get_name'/1
								  (SkipMode)
							  in  let <ConfData> = {%% Line 2392
								   Mod,%% Line 2392
								       {Func,_cor48},%% Line 2392
										     Comment}
							      in  do  %% Line 2393
								      call 'test_server_sup':'framework_call'
									  ('report', [ReportTag|[ConfData|[]]])
								      do  %% Line 2394
									  case CurrIOHandler of
									    %% Line 2395
									    <{_cor363,_cor364}>
										when call 'erlang':'=:='
										      (_cor363,
										       Ref) ->
										%% Line 2399
										apply 'set_io_buffering'/1
										    ('undefined')
									    %% Line 2400
									    <_cor365> when 'true' ->
										'ok'
									  end
									  let <_cor52> =
									      %% Line 2403
									      call 'erlang':'tl'
										  (Mode)
									  in  let <_cor51> =
										  %% Line 2404
										  apply 'delete_status'/2
										      (Ref, Status)
									      in  %% Line 2403
										  apply 'run_test_cases_loop'/5
										      (Cases, Config, TimetrapData, _cor52, _cor51)
						      ( <_cor47> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor47})
							-| ['compiler_generated'] )
						    end
						%% Line 2405
						<_cor366,'false'> when 'true' ->
						    %% Line 2408
						    case apply 'skip_case'/7
							     (AutoOrUser, Ref, 0, Case, Comment, %% Line 2409
												 'false', %% Line 2409
													  SkipMode) of
						      <{Mod,Func}> when 'true' ->
							  let <_cor54> =
							      %% Line 2410
							      apply 'get_name'/1
								  (SkipMode)
							  in  let <ConfData> = {%% Line 2410
								   Mod,%% Line 2410
								       {Func,_cor54},%% Line 2410
										     Comment}
							      in  do  %% Line 2411
								      call 'test_server_sup':'framework_call'
									  ('report', [ReportTag|[ConfData|[]]])
								      let <_cor56> =
									  %% Line 2413
									  apply 'conf'/2
									      (Ref, [])
								      in  %% Line 2412
									  apply 'run_test_cases_loop'/5
									      (Cases, Config, TimetrapData, %% Line 2413
													    [_cor56|Mode], %% Line 2413
															   Status)
						      ( <_cor53> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor53})
							-| ['compiler_generated'] )
						    end
						%% Line 2414
						<_cor367,Ref0>
						    when call 'erlang':'is_reference'
							  (Ref0) ->
						    do  %% Line 2418
							case <> of
							  <>
							      when call 'erlang':'=:='
								    (CurrIOHandler,
								     'undefined') ->
							      let <_cor57> =
								  %% Line 2419
								  call 'erlang':'self'
								      ()
							      in  %% Line 2419
								  apply 'set_io_buffering'/1
								      ({Ref,_cor57})
							  %% Line 2420
							  <> when 'true' ->
							      'ok'
							end
							%% Line 2423
							case apply 'skip_case'/7
								 (AutoOrUser, Ref, 0, Case, Comment, %% Line 2424
												     'true', %% Line 2424
													     SkipMode) of
							  <{Mod,Func}> when 'true' ->
							      let <_cor59> =
								  %% Line 2425
								  apply 'get_name'/1
								      (SkipMode)
							      in  let <ConfData> = {%% Line 2425
								       Mod,%% Line 2425
									   {Func,_cor59},%% Line 2425
											 Comment}
								  in  do  %% Line 2426
									  call 'test_server_sup':'framework_call'
									      ('report', [ReportTag|[ConfData|[]]])
									  let <_cor61> =
									      %% Line 2428
									      apply 'conf'/2
										  (Ref, [])
									  in  %% Line 2427
									      apply 'run_test_cases_loop'/5
										  (Cases, Config, TimetrapData, %% Line 2428
														[_cor61|Mode], %% Line 2428
															       Status)
							  ( <_cor58> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_cor58})
							    -| ['compiler_generated'] )
							end
						( <_fol1964,_fol1965> when 'true' ->
						      let <_cor62> = {_fol1964,_fol1965}
						      in  primop 'match_fail'
							      ({'case_clause',_cor62})
						  -| ['compiler_generated'] )
					      end
	  %% Line 2431
	  <[{'auto_skip_case',{Case,Comment},SkipMode}|Cases],%% Line 2432
							      Config,%% Line 2432
								     TimetrapData,%% Line 2432
										  Mode,%% Line 2432
										       Status> when 'true' ->
	      let <_cor64> =
		  %% Line 2433
		  call 'erlang':'get'
		      ('test_server_case_num')
	      in  let <_cor65> =
		      %% Line 2433
		      call 'erlang':'+'
			  (_cor64, 1)
		  in  let <_cor63> =
			  %% Line 2434
			  apply 'is_io_buffered'/0
			      ()
		      in  %% Line 2433
			  case apply 'skip_case'/7
				   ('auto', 'undefined', _cor65, %% Line 2434
								 Case, %% Line 2434
								       Comment, _cor63, %% Line 2434
											SkipMode) of
			    <{Mod,Func}> when 'true' ->
				let <_cor67> =
				    %% Line 2436
				    apply 'get_name'/1
					(SkipMode)
				in  do  %% Line 2435
					call 'test_server_sup':'framework_call'
					    ('report', ['tc_auto_skip'|%% Line 2436
								       [{Mod,{Func,_cor67},%% Line 2437
											   Comment}|%% Line 2437
												    []]])
					let <_cor68> =
					    %% Line 2439
					    apply 'update_status'/4
						('skipped', Mod, Func, Status)
					in  %% Line 2438
					    apply 'run_test_cases_loop'/5
						(Cases, Config, TimetrapData, Mode, _cor68)
			    ( <_cor66> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor66})
			      -| ['compiler_generated'] )
			  end
	  %% Line 2441
	  <[{'skip_case',{Case = {Mod,'all'},Comment},SkipMode}|Cases],%% Line 2442
								       Config,%% Line 2442
									      TimetrapData,%% Line 2442
											   Mode,%% Line 2442
												Status> when 'true' ->
	      do  %% Line 2443
		  apply 'skip_case'/7
		      ('user', 'undefined', 0, Case, Comment, 'false', SkipMode)
		  let <_cor69> =
		      %% Line 2445
		      apply 'get_name'/1
			  (SkipMode)
		  in  do  %% Line 2444
			  call 'test_server_sup':'framework_call'
			      ('report', ['tc_user_skip'|%% Line 2445
							 [{Mod,{'all',_cor69},%% Line 2446
									      Comment}|%% Line 2446
										       []]])
			  %% Line 2447
			  apply 'run_test_cases_loop'/5
			      (Cases, Config, TimetrapData, Mode, Status)
	  %% Line 2449
	  <[{'skip_case',{Case,Comment},SkipMode}|Cases],%% Line 2450
							 Config,%% Line 2450
								TimetrapData,%% Line 2450
									     Mode,%% Line 2450
										  Status> when 'true' ->
	      let <_cor71> =
		  %% Line 2451
		  call 'erlang':'get'
		      ('test_server_case_num')
	      in  let <_cor72> =
		      %% Line 2451
		      call 'erlang':'+'
			  (_cor71, 1)
		  in  let <_cor70> =
			  %% Line 2452
			  apply 'is_io_buffered'/0
			      ()
		      in  %% Line 2451
			  case apply 'skip_case'/7
				   ('user', 'undefined', _cor72, %% Line 2452
								 Case, %% Line 2452
								       Comment, _cor70, %% Line 2452
											SkipMode) of
			    <{Mod,Func}> when 'true' ->
				let <_cor74> =
				    %% Line 2454
				    apply 'get_name'/1
					(SkipMode)
				in  do  %% Line 2453
					call 'test_server_sup':'framework_call'
					    ('report', ['tc_user_skip'|%% Line 2454
								       [{Mod,{Func,_cor74},%% Line 2455
											   Comment}|%% Line 2455
												    []]])
					let <_cor75> =
					    %% Line 2457
					    apply 'update_status'/4
						('skipped', Mod, Func, Status)
					in  %% Line 2456
					    apply 'run_test_cases_loop'/5
						(Cases, Config, TimetrapData, Mode, _cor75)
			    ( <_cor73> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor73})
			      -| ['compiler_generated'] )
			  end
	  %% Line 2460
	  <Cs0 = [{'conf',Ref,Props,{Mod,Func}}|_X_Cases],%% Line 2461
							  Config,%% Line 2461
								 TimetrapData,%% Line 2461
									      Mode0,%% Line 2461
										    Status> when 'true' ->
	      let <CurrIOHandler> =
		  %% Line 2462
		  call 'erlang':'get'
		      ('test_server_common_io_handler')
	      in  let <_cor78> =
		      %% Line 2465
		      apply 'curr_ref'/1
			  (Mode0)
		  in  let <_cor77> =
			  %% Line 2465
			  apply 'check_props'/2
			      ('parallel', Mode0)
		      in  let <StartConf,Mode,IOHandler,ConfTime,Status1> =
			      %% Line 2465
			      case <_cor78,_cor77> of
				%% Line 2466
				<_cor368,_cor369>
				    when let <_cor370> =
					  call 'erlang':'=:='
					      (_cor368, Ref)
				      in  let <_cor371> =
					      call 'erlang':'=:='
						  (_cor369, Ref)
					  in  call 'erlang':'and'
						  (_cor370, _cor371) ->
				    let <_cor79> =
					%% Line 2467
					call 'erlang':'tl'
					    (Mode0)
				    in  %% Line 2467
					case apply 'check_props'/2
						 ('parallel', _cor79) of
					  %% Line 2468
					  <'false'> when 'true' ->
					      let <OkSkipFail> =
						  %% Line 2472
						  apply 'handle_test_case_io_and_status'/0
						      ()
					      in  let <_cor81> =
						      %% Line 2473
						      call 'erlang':'get'
							  ('test_server_dir')
						  in  let <_cor82> =
							  %% Line 2473
							  call 'filename':'dirname'
							      (_cor81)
						      in  do  %% Line 2473
							      call 'file':'set_cwd'
								  (_cor82)
							      let <After> =
								  %% Line 2474
								  call 'erlang':'now'
								      ()
							      in  let <Before> =
								      %% Line 2475
								      call 'erlang':'get'
									  ('test_server_parallel_start_time')
								  in  let <_cor85> =
									  %% Line 2476
									  apply 'elapsed_time'/2
									      (Before, After)
								      in  let <Elapsed> =
									      %% Line 2476
									      call 'erlang':'/'
										  (_cor85, 1000000)
									  in  do  %% Line 2477
										  call 'erlang':'put'
										      ('test_server_total_time', Elapsed)
										  let <_cor88> =
										      %% Line 2478
										      call 'erlang':'tl'
											  (Mode0)
										  in  let <_cor87> =
											  %% Line 2479
											  apply 'update_status'/3
											      (Ref, OkSkipFail, Status)
										      in  %% Line 2478
											  <'false',_cor88,'undefined',Elapsed,_cor87>
					  %% Line 2480
					  <_cor372> when 'true' ->
					      let <OkSkipFail> =
						  %% Line 2483
						  apply 'wait_for_cases'/1
						      (Ref)
					      in  let <_cor90> =
						      %% Line 2484
						      call 'erlang':'self'
							  ()
						  in  do  %% Line 2484
							  apply 'queue_test_case_io'/5
							      (Ref, _cor90, 0, Mod, Func)
							  let <_cor92> =
							      %% Line 2485
							      apply 'conf_start'/2
								  (Ref, Mode0)
							  in  let <_cor91> =
								  %% Line 2485
								  call 'erlang':'now'
								      ()
							      in  let <_cor93> =
								      %% Line 2485
								      apply 'elapsed_time'/2
									  (_cor92, _cor91)
								  in  let <Elapsed> =
									  %% Line 2485
									  call 'erlang':'/'
									      (_cor93, 1000000)
								      in  %% Line 2486
									  case CurrIOHandler of
									    %% Line 2487
									    <{_cor373,_cor374}>
										when call 'erlang':'=:='
										      (_cor373,
										       Ref) ->
										let <_cor96> =
										    %% Line 2491
										    call 'erlang':'tl'
											(Mode0)
										in  let <_cor95> =
											%% Line 2492
											apply 'update_status'/3
											    (Ref, OkSkipFail, Status)
										    in  %% Line 2491
											<'false',_cor96,'undefined',Elapsed,_cor95>
									    %% Line 2493
									    <_cor375> when 'true' ->
										let <_cor98> =
										    %% Line 2494
										    call 'erlang':'tl'
											(Mode0)
										in  let <_cor97> =
											%% Line 2495
											apply 'update_status'/3
											    (Ref, OkSkipFail, Status)
										    in  %% Line 2494
											<'false',_cor98,CurrIOHandler,Elapsed,_cor97>
									  end
					end
				%% Line 2498
				<_cor376,'false'>
				    when call 'erlang':'=:='
					  (_cor376,
					   Ref) ->
				    let <_cor105> =
					%% Line 2501
					call 'erlang':'tl'
					    (Mode0)
				    in  let <_cor102> =
					    %% Line 2502
					    apply 'conf_start'/2
						(Ref, Mode0)
					in  let <_cor101> =
						%% Line 2502
						call 'erlang':'now'
						    ()
					    in  let <_cor103> =
						    %% Line 2502
						    apply 'elapsed_time'/2
							(_cor102, _cor101)
						in  let <_cor104> =
							%% Line 2502
							call 'erlang':'/'
							    (_cor103, 1000000)
						    in  %% Line 2501
							<'false',_cor105,'undefined',_cor104,%% Line 2502
											     Status>
				%% Line 2503
				<_cor377,_cor378>
				    when call 'erlang':'=:='
					  (_cor377,
					   Ref) ->
				    let <_cor106> =
					%% Line 2506
					call 'erlang':'self'
					    ()
				    in  do  %% Line 2506
					    apply 'queue_test_case_io'/5
						(Ref, _cor106, 0, Mod, Func)
					    let <_cor108> =
						%% Line 2507
						apply 'conf_start'/2
						    (Ref, Mode0)
					    in  let <_cor107> =
						    %% Line 2507
						    call 'erlang':'now'
							()
						in  let <_cor109> =
							%% Line 2507
							apply 'elapsed_time'/2
							    (_cor108, _cor107)
						    in  let <Elapsed> =
							    %% Line 2507
							    call 'erlang':'/'
								(_cor109, 1000000)
							in  %% Line 2508
							    case CurrIOHandler of
							      %% Line 2509
							      <{_cor379,_cor380}>
								  when call 'erlang':'=:='
									(_cor379,
									 Ref) ->
								  let <_cor111> =
								      %% Line 2513
								      call 'erlang':'tl'
									  (Mode0)
								  in  %% Line 2513
								      <'false',_cor111,'undefined',Elapsed,Status>
							      %% Line 2514
							      <_cor381> when 'true' ->
								  let <_cor112> =
								      %% Line 2515
								      call 'erlang':'tl'
									  (Mode0)
								  in  %% Line 2515
								      <'false',_cor112,CurrIOHandler,Elapsed,Status>
							    end
				%% Line 2517
				<_cor382,'false'> when 'true' ->
				    do  %% Line 2520
					case call 'lists':'member'
						 ('parallel', Props) of
					  %% Line 2521
					  <'true'> when 'true' ->
					      let <_cor114> =
						  %% Line 2523
						  call 'erlang':'now'
						      ()
					      in  do  %% Line 2523
						      call 'erlang':'put'
							  ('test_server_parallel_start_time', _cor114)
						      %% Line 2524
						      call 'erlang':'put'
							  ('test_server_queued_io', [])
					  %% Line 2525
					  <'false'> when 'true' ->
					      'ok'
					  ( <_cor115> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor115})
					    -| ['compiler_generated'] )
					end
					let <_cor116> =
					    %% Line 2528
					    apply 'conf'/2
						(Ref, Props)
					in  %% Line 2528
					    <'true',[_cor116|Mode0],'undefined',0,Status>
				%% Line 2529
				<_cor383,_X_Ref0> when 'true' ->
				    let <_cor117> =
					%% Line 2532
					call 'erlang':'self'
					    ()
				    in  do  %% Line 2532
					    apply 'queue_test_case_io'/5
						(Ref, _cor117, 0, Mod, Func)
					    let <_cor120> =
						%% Line 2535
						case <> of
						  <>
						      when call 'erlang':'=:='
							    (CurrIOHandler,
							     'undefined') ->
						      let <_cor118> =
							  %% Line 2536
							  call 'erlang':'self'
							      ()
						      in  let <IOH> = {%% Line 2536
							       Ref,_cor118}
							  in  do  %% Line 2537
								  apply 'set_io_buffering'/1
								      (IOH)
								  %% Line 2538
								  IOH
						  %% Line 2539
						  <> when 'true' ->
						      %% Line 2540
						      CurrIOHandler
						end
					    in  let <_cor122> =
						    %% Line 2542
						    apply 'conf'/2
							(Ref, Props)
						in  %% Line 2542
						    <'true',[_cor122|Mode0],_cor120,0,Status>
			      end
			  in  let <_cor145> =
				  %% Line 2547
				  case <> of
				    <>
					when call 'erlang':'=:='
					      (StartConf,
					       'true') ->
					%% Line 2548
					case apply 'get_shuffle'/1
						 (Props) of
					  %% Line 2549
					  <'undefined'> when 'true' ->
					      %% Line 2550
					      {Cs0,'undefined'}
					  %% Line 2551
					  <{_cor384,'repeated'}> when 'true' ->
					      let <CurrSeed> =
						  %% Line 2554
						  call 'erlang':'get'
						      ('test_server_curr_random_seed')
					      in  let <_cor127> =
						      %% Line 2555
						      apply 'shuffle_cases'/3
							  (Ref, Cs0, CurrSeed)
						  in  %% Line 2555
						      {_cor127,{'shuffle',CurrSeed}}
					  %% Line 2556
					  <{_cor385,Seed}> when 'true' ->
					      let <_cor139> =
						  %% Line 2563
						  case call 'os':'getenv'
							   ([84|[83|[95|[82|[65|[78|[68|[79|[77|[95|[83|[69|[69|[68]]]]]]]]]]]]]]) of
						    %% Line 2564
						    <Undef>
							when let <_cor128> =
							      call 'erlang':'=:='
								  (Undef, 'false')
							  in  let <_cor129> =
								  call 'erlang':'=='
								      (Undef, [117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]])
							      in  call 'erlang':'or'
								      (_cor128, _cor129) ->
							%% Line 2565
							case call 'erlang':'get'
								 ('test_server_random_seed') of
							  %% Line 2566
							  <'undefined'> when 'true' ->
							      Seed
							  %% Line 2567
							  <TSRS> when 'true' ->
							      TSRS
							end
						    %% Line 2569
						    <NumStr> when 'true' ->
							let <_cor137> =
							    %% Line 2571
							    ( letrec
								  'lc$^0'/1 =
								      fun (_cor134) ->
									  case _cor134 of
									    <[%% Line 2572
									      NS|_cor132]> when 'true' ->
										let <_cor135> =
										    call 'erlang':'list_to_integer'
											(NS)
										in  let <_cor136> =
											%% Line 2572
											apply 'lc$^0'/1
											    (_cor132)
										    in  ( [_cor135|_cor136]
											  -| ['compiler_generated'] )
									    <[]> when 'true' ->
										[]
									    ( <_cor134> when 'true' ->
										  ( primop 'match_fail'
											({'function_clause',_cor134})
										    -| [{'function_name',{'lc$^0',1}}] )
									      -| ['compiler_generated'] )
									  end
							      in  let <_cor133> =
								      %% Line 2572
								      call 'string':'tokens'
									  (NumStr, [32|[58|[44]]])
								  in  apply 'lc$^0'/1
									  (_cor133)
							      -| ['list_comprehension'] )
							in  %% Line 2571
							    call 'erlang':'list_to_tuple'
								(_cor137)
						  end
					      in  let <_cor141> =
						      %% Line 2574
						      apply 'shuffle_cases'/3
							  (Ref, Cs0, _cor139)
						  in  %% Line 2574
						      {_cor141,{'shuffle',_cor139}}
					  ( <_cor142> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor142})
					    -| ['compiler_generated'] )
					end
				    %% Line 2576
				    <>
					when let <_cor143> =
					      call 'erlang':'=:='
						  (StartConf, 'false')
					  in  let <_cor144> =
						  call 'erlang':'is_boolean'
						      (StartConf)
					      in  call 'erlang':'and'
						      (_cor143, _cor144) ->
					%% Line 2577
					{Cs0,'undefined'}
				    ( <> when 'true' ->
					  primop 'match_fail'
					      ('if_clause')
				      -| ['compiler_generated'] )
				  end
			      in  %% Line 2546
				  case _cor145 of
				    <{Cs1 = [_X_Conf|Cases1],Shuffle}> when 'true' ->
					let <Repeating,Status2,Cases,ReportRepeatStop> =
					    %% Line 2584
					    case <> of
					      <>
						  when call 'erlang':'=:='
							(StartConf,
							 'true') ->
						  %% Line 2585
						  case apply 'get_repeat'/1
							   (Props) of
						    %% Line 2586
						    <'undefined'> when 'true' ->
							let <_cor148> =
							    %% Line 2590
							    apply 'new_status'/2
								(Ref, Status1)
							in  let <_cor147> =
								%% Line 2590
								( fun () ->
								      'ok'
								  -| [{'id',{0,0,'-run_test_cases_loop/5-fun-0-'}}] )
							    in  %% Line 2590
								<'false',_cor148,Cases1,_cor147>
						    %% Line 2591
						    <{_X_RepType,N}>
							when call 'erlang':'=<'
							      (N,
							       1) ->
							let <_cor150> =
							    %% Line 2592
							    apply 'new_status'/2
								(Ref, Status1)
							in  let <_cor149> =
								%% Line 2592
								( fun () ->
								      'ok'
								  -| [{'id',{0,0,'-run_test_cases_loop/5-fun-1-'}}] )
							    in  %% Line 2592
								<'false',_cor150,Cases1,_cor149>
						    %% Line 2593
						    <_cor386> when 'true' ->
							let <_cor151> =
							    %% Line 2594
							    call 'erlang':'make_ref'
								()
							in  %% Line 2594
							    case apply 'copy_cases'/3
								     (Ref, _cor151, Cs1) of
							      <{Copied,_cor387}> when 'true' ->
								  let <_cor154> =
								      %% Line 2595
								      apply 'new_status'/3
									  (Ref, Copied, Status1)
								  in  let <_cor153> =
									  %% Line 2595
									  ( fun () ->
										'ok'
									    -| [{'id',{0,0,'-run_test_cases_loop/5-fun-2-'}}] )
								      in  %% Line 2595
									  <'true',_cor154,Cases1,_cor153>
							      ( <_cor152> when 'true' ->
								    primop 'match_fail'
									({'badmatch',_cor152})
								-| ['compiler_generated'] )
							    end
						  end
					      %% Line 2597
					      <>
						  when let <_cor156> =
							call 'erlang':'=:='
							    (StartConf, 'false')
						    in  let <_cor157> =
							    call 'erlang':'is_boolean'
								(StartConf)
							in  call 'erlang':'and'
								(_cor156, _cor157) ->
						  let <_cor158> =
						      %% Line 2598
						      apply 'get_props'/1
							  (Mode0)
						  in  let <RepVal> =
							  %% Line 2598
							  apply 'get_repeat'/1
							      (_cor158)
						      in  let <ReportStop> =
							      %% Line 2600
							      ( fun () ->
								    do  %% Line 2601
									apply 'print'/3
									    ('minor', [126|[110|[42|[42|[42|[32|[83|[116|[111|[112|[112|[105|[110|[103|[32|[114|[101|[112|[101|[97|[116|[32|[111|[112|[101|[114|[97|[116|[105|[111|[110|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [RepVal|[]])
									%% Line 2602
									apply 'print'/3
									    (1, [83|[116|[111|[112|[112|[105|[110|[103|[32|[114|[101|[112|[101|[97|[116|[32|[111|[112|[101|[114|[97|[116|[105|[111|[110|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]], [RepVal|[]])
								-| [{'id',{0,0,'-run_test_cases_loop/5-fun-3-'}}] )
							  in  let <CopiedCases> =
								  %% Line 2604
								  apply 'get_copied_cases'/1
								      (Status1)
							      in  let <EndStatus> =
								      %% Line 2605
								      apply 'delete_status'/2
									  (Ref, Status1)
								  in  %% Line 2607
								      case RepVal of
									%% Line 2608
									<'undefined'> when 'true' ->
									    let <_cor163> =
										%% Line 2609
										( fun () ->
										      'ok'
										  -| [{'id',{0,0,'-run_test_cases_loop/5-fun-4-'}}] )
									    in  %% Line 2609
										<'false',EndStatus,Cases1,_cor163>
									%% Line 2610
									<{_X_RepType,N}>
									    when call 'erlang':'=<'
										  (N,
										   1) ->
									    let <_cor164> =
										%% Line 2611
										( fun () ->
										      'ok'
										  -| [{'id',{0,0,'-run_test_cases_loop/5-fun-5-'}}] )
									    in  %% Line 2611
										<'false',EndStatus,Cases1,_cor164>
									%% Line 2612
									<{'repeat',_cor388}> when 'true' ->
									    let <_cor166> =
										%% Line 2613
										call 'erlang':'++'
										    (CopiedCases, Cases1)
									    in  let <_cor165> =
										    %% Line 2613
										    ( fun () ->
											  'ok'
										      -| [{'id',{0,0,'-run_test_cases_loop/5-fun-6-'}}] )
										in  %% Line 2613
										    <'true',EndStatus,_cor166,_cor165>
									%% Line 2614
									<{'repeat_until_all_ok',_cor389}> when 'true' ->
									    let <RestCs,Fun> =
										%% Line 2615
										case apply 'get_tc_results'/1
											 (Status1) of
										  %% Line 2616
										  <{_cor390,_cor391,[]}> when 'true' ->
										      %% Line 2617
										      <Cases1,ReportStop>
										  %% Line 2618
										  <_cor392> when 'true' ->
										      let <_cor168> =
											  %% Line 2619
											  call 'erlang':'++'
											      (CopiedCases, Cases1)
										      in  let <_cor167> =
											      %% Line 2619
											      ( fun () ->
												    'ok'
												-| [{'id',{0,0,'-run_test_cases_loop/5-fun-7-'}}] )
											  in  <_cor168,_cor167>
										end
									    in  %% Line 2621
										<'true',EndStatus,RestCs,Fun>
									%% Line 2622
									<{'repeat_until_any_ok',_cor393}> when 'true' ->
									    let <RestCs,Fun> =
										%% Line 2623
										case apply 'get_tc_results'/1
											 (Status1) of
										  %% Line 2624
										  <{Ok,_cor394,_X_Fails}>
										      when try
											    let <_cor172> =
												call 'erlang':'length'
												    (Ok)
											    in  call 'erlang':'>'
												    (_cor172, 0)
											of <Try> ->
											    Try
											catch <T,R> ->
											    'false' ->
										      %% Line 2625
										      <Cases1,ReportStop>
										  %% Line 2626
										  <_cor395> when 'true' ->
										      let <_cor174> =
											  %% Line 2627
											  call 'erlang':'++'
											      (CopiedCases, Cases1)
										      in  let <_cor173> =
											      %% Line 2627
											      ( fun () ->
												    'ok'
												-| [{'id',{0,0,'-run_test_cases_loop/5-fun-8-'}}] )
											  in  <_cor174,_cor173>
										end
									    in  %% Line 2629
										<'true',EndStatus,RestCs,Fun>
									%% Line 2630
									<{'repeat_until_any_fail',_cor396}> when 'true' ->
									    let <RestCs,Fun> =
										%% Line 2631
										case apply 'get_tc_results'/1
											 (Status1) of
										  %% Line 2632
										  <{_cor397,_cor398,Fails}>
										      when try
											    let <_cor178> =
												call 'erlang':'length'
												    (Fails)
											    in  call 'erlang':'>'
												    (_cor178, 0)
											of <Try> ->
											    Try
											catch <T,R> ->
											    'false' ->
										      %% Line 2633
										      <Cases1,ReportStop>
										  %% Line 2634
										  <_cor399> when 'true' ->
										      let <_cor180> =
											  %% Line 2635
											  call 'erlang':'++'
											      (CopiedCases, Cases1)
										      in  let <_cor179> =
											      %% Line 2635
											      ( fun () ->
												    'ok'
												-| [{'id',{0,0,'-run_test_cases_loop/5-fun-9-'}}] )
											  in  <_cor180,_cor179>
										end
									    in  %% Line 2637
										<'true',EndStatus,RestCs,Fun>
									%% Line 2638
									<{'repeat_until_all_fail',_cor400}> when 'true' ->
									    let <RestCs,Fun> =
										%% Line 2639
										case apply 'get_tc_results'/1
											 (Status1) of
										  %% Line 2640
										  <{[],_cor401,_cor402}> when 'true' ->
										      %% Line 2641
										      <Cases1,ReportStop>
										  %% Line 2642
										  <_cor403> when 'true' ->
										      let <_cor185> =
											  %% Line 2643
											  call 'erlang':'++'
											      (CopiedCases, Cases1)
										      in  let <_cor184> =
											      %% Line 2643
											      ( fun () ->
												    'ok'
												-| [{'id',{0,0,'-run_test_cases_loop/5-fun-10-'}}] )
											  in  <_cor185,_cor184>
										end
									    in  %% Line 2645
										<'true',EndStatus,RestCs,Fun>
									( <_cor189> when 'true' ->
									      primop 'match_fail'
										  ({'case_clause',_cor189})
									  -| ['compiler_generated'] )
								      end
					      ( <> when 'true' ->
						    primop 'match_fail'
							('if_clause')
						-| ['compiler_generated'] )
					    end
					in  let <ReportAbortRepeat> =
						%% Line 2649
						( fun (_cor192) ->
						      case _cor192 of
							<What>
							    when call 'erlang':'=:='
								  (Repeating,
								   'true') ->
							    do  %% Line 2650
								apply 'print'/3
								    ('minor', [126|[110|[42|[42|[42|[32|[65|[98|[111|[114|[116|[105|[110|[103|[32|[114|[101|[112|[101|[97|[116|[32|[111|[112|[101|[114|[97|[116|[105|[111|[110|[32|[40|[99|[111|[110|[102|[105|[103|[117|[114|[97|[116|[105|[111|[110|[32|[99|[97|[115|[101|[32|[126|[119|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2651
																																																      [What|[]])
								%% Line 2652
								apply 'print'/3
								    (1, [65|[98|[111|[114|[116|[105|[110|[103|[32|[114|[101|[112|[101|[97|[116|[32|[111|[112|[101|[114|[97|[116|[105|[111|[110|[32|[40|[99|[111|[110|[102|[105|[103|[117|[114|[97|[116|[105|[111|[110|[32|[99|[97|[115|[101|[32|[126|[119|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2653
																																												[What|[]])
							%% Line 2654
							<_cor404> when 'true' ->
							    'ok'
						      end
						  -| [{'id',{0,0,'-run_test_cases_loop/5-fun-11-'}}] )
					    in  let <_cor200> =
						    %% Line 2656
						    case <> of
						      <>
							  when call 'erlang':'=:='
								(StartConf,
								 'true') ->
							  %% Line 2657
							  case <> of
							    <>
								when call 'erlang':'=:='
								      (Shuffle,
								       'undefined') ->
								%% Line 2658
								[{'tc_group_properties',Props}|[]]
							    %% Line 2659
							    <> when 'true' ->
								let <_cor195> =
								    %% Line 2661
								    apply 'delete_shuffle'/1
									(Props)
								in  %% Line 2660
								    [{'tc_group_properties',%% Line 2661
											    [Shuffle|_cor195]}|%% Line 2661
													       []]
							  end
						      %% Line 2663
						      <>
							  when let <_cor196> =
								call 'erlang':'=:='
								    (StartConf, 'false')
							    in  let <_cor197> =
								    call 'erlang':'is_boolean'
									(StartConf)
								in  call 'erlang':'and'
									(_cor196, _cor197) ->
							  %% Line 2664
							  case apply 'get_tc_results'/1
								   (Status1) of
							    <{TcOk,TcSkip,TcFail}> when 'true' ->
								let <_cor199> =
								    %% Line 2665
								    apply 'get_props'/1
									(Mode0)
								in  %% Line 2665
								    [{'tc_group_properties',_cor199}|%% Line 2666
												     [{'tc_group_result',[{'ok',TcOk}|%% Line 2667
																      [{'skipped',TcSkip}|%% Line 2668
																			  [{'failed',TcFail}|[]]]]}|%% Line 2668
																						    []]]
							    ( <_cor198> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_cor198})
							      -| ['compiler_generated'] )
							  end
						      ( <> when 'true' ->
							    primop 'match_fail'
								('if_clause')
							-| ['compiler_generated'] )
						    end
						in  let <SuiteName> =
							%% Line 2671
							call 'proplists':'get_value'
							    ('suite', Props)
						    in  let <_cor451,TSDirs> =
							    %% Line 2672
							    case call 'erlang':'get'
								     ('test_server_create_priv_dir') of
							      %% Line 2673
							      <'auto_per_run'> when 'true' ->
								  let <_cor203> =
								      %% Line 2674
								      call 'erlang':'get'
									  ('test_server_priv_dir')
								  in  let <_cor204> =
									  %% Line 2675
									  apply 'get_data_dir'/2
									      (Mod, SuiteName)
								      in  let <TSDirs> =
									      %% Line 2674
									      [{'priv_dir',_cor203}|%% Line 2675
												    [{'data_dir',_cor204}|[]]]
									  in  <TSDirs,TSDirs>
							      %% Line 2676
							      <_cor405> when 'true' ->
								  let <_cor206> =
								      %% Line 2677
								      apply 'get_data_dir'/2
									  (Mod, SuiteName)
								  in  let <TSDirs> =
									  %% Line 2677
									  [{'data_dir',_cor206}|[]]
								      in  <TSDirs,TSDirs>
							    end
							in  let <_cor219> =
								%% Line 2681
								case <> of
								  <>
								      when let <_cor209> =
									    call 'erlang':'=:='
										(StartConf, 'false')
									in  let <_cor210> =
										call 'erlang':'is_boolean'
										    (StartConf)
									    in  call 'erlang':'and'
										    (_cor209, _cor210) ->
								      let <_cor212> =
									  %% Line 2682
									  call 'erlang':'hd'
									      (Config)
								      in  let <_cor211> =
									      %% Line 2682
									      call 'erlang':'++'
										  (TSDirs, _cor200)
									  in  %% Line 2682
									      apply 'update_config'/2
										  (_cor212, _cor211)
								  %% Line 2683
								  <> when 'true' ->
								      let <_cor215> =
									  %% Line 2684
									  ( fun (_cor213) ->
										case _cor213 of
										  <{_X_Ref,[],_X_T}> when 'true' ->
										      []
										  %% Line 2685
										  <{_X_Ref,GrProps,_X_T}> when 'true' ->
										      [GrProps|[]]
										  ( <_cor214> when 'true' ->
											( primop 'match_fail'
											      ({'function_clause',_cor214})
											  -| [{'function_name',{'-run_test_cases_loop/5-fun-12-',1}}] )
										    -| ['compiler_generated'] )
										end
									    -| [{'id',{0,0,'-run_test_cases_loop/5-fun-12-'}}] )
								      in  let <GroupPath> =
									      %% Line 2684
									      call 'lists':'flatmap'
										  (_cor215, %% Line 2686
											    Mode0)
									  in  let <_cor218> =
										  %% Line 2687
										  call 'erlang':'hd'
										      (Config)
									      in  let <_cor217> =
										      %% Line 2688
										      call 'erlang':'++'
											  (TSDirs, [{'tc_group_path',GroupPath}|_cor200])
										  in  %% Line 2687
										      apply 'update_config'/2
											  (_cor218, _cor217)
								end
							    in  let <CurrMode> =
								    %% Line 2691
								    apply 'curr_mode'/3
									(Ref, Mode0, Mode)
								in  %% Line 2695
								    case apply 'run_test_case'/8
									     (Ref, 0, Mod, Func, [_cor219|[]], 'skip_init', TimetrapData, CurrMode) of
								      %% Line 2696
								      <{_cor406,NewCfg,_cor407}>
									  when let <_cor223> =
										call 'erlang':'=:='
										    (Func, 'init_per_suite')
									    in  let <_cor224> =
										    call 'erlang':'is_list'
											(NewCfg)
										in  call 'erlang':'and'
											(_cor223, _cor224) ->
									  let <_cor227> =
									      %% Line 2698
									      ( fun (_cor225) ->
										    case _cor225 of
										      <{_cor408,_cor409}> when 'true' ->
											  'false'
										      %% Line 2699
										      <_cor410> when 'true' ->
											  'true'
										    end
										-| [{'id',{0,0,'-run_test_cases_loop/5-fun-13-'}}] )
									  in  %% Line 2698
									      case call 'lists':'filter'
										       (_cor227, %% Line 2699
												 NewCfg) of
										%% Line 2700
										<[]> when 'true' ->
										    do  %% Line 2701
											apply 'set_io_buffering'/1
											    (IOHandler)
											do  %% Line 2702
											    apply 'stop_minor_log_file'/0
												()
											    %% Line 2703
											    apply 'run_test_cases_loop'/5
												(Cases, [NewCfg|Config], %% Line 2704
															 TimetrapData, %% Line 2704
																       Mode, %% Line 2704
																	     Status2)
										%% Line 2705
										<Bad> when 'true' ->
										    do  %% Line 2706
											apply 'print'/3
											    ('minor', %% Line 2707
												      [126|[110|[42|[42|[42|[32|[126|[119|[32|[114|[101|[116|[117|[114|[110|[101|[100|[32|[98|[97|[100|[32|[101|[108|[101|[109|[101|[110|[116|[115|[32|[105|[110|[32|[67|[111|[110|[102|[105|[103|[58|[32|[126|[112|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2708
																																														  [Func|[Bad|[]]])
											let <Reason> = {%% Line 2709
											     'failed',%% Line 2709
												      {Mod,'init_per_suite','bad_return'}}
											in  let <Cases2> =
												%% Line 2710
												apply 'skip_cases_upto'/6
												    (Ref, Cases, Reason, 'conf', CurrMode, %% Line 2711
																	   'auto_skip_case')
											    in  do  %% Line 2712
												    apply 'set_io_buffering'/1
													(IOHandler)
												    do  %% Line 2713
													apply 'stop_minor_log_file'/0
													    ()
													let <_cor230> =
													    %% Line 2715
													    apply 'delete_status'/2
														(Ref, Status2)
													in  %% Line 2714
													    apply 'run_test_cases_loop'/5
														(Cases2, Config, TimetrapData, Mode, _cor230)
									      end
								      %% Line 2717
								      <{_cor411,NewCfg,_cor412}>
									  when let <_cor232> =
										call 'erlang':'=:='
										    (StartConf, 'true')
									    in  let <_cor233> =
										    call 'erlang':'is_list'
											(NewCfg)
										in  call 'erlang':'and'
											(_cor232, _cor233) ->
									  do  %% Line 2718
									      apply 'print_conf_time'/1
										  (ConfTime)
									      do  %% Line 2719
										  apply 'set_io_buffering'/1
										      (IOHandler)
										  do  %% Line 2720
										      apply 'stop_minor_log_file'/0
											  ()
										      %% Line 2721
										      apply 'run_test_cases_loop'/5
											  (Cases, [NewCfg|Config], TimetrapData, Mode, Status2)
								      %% Line 2722
								      <{_cor413,{'framework_error',{FwMod,FwFunc},Reason},_cor414}> when 'true' ->
									  do  %% Line 2723
									      apply 'print'/3
										  ('minor', [126|[110|[42|[42|[42|[32|[126|[119|[32|[102|[97|[105|[108|[101|[100|[32|[105|[110|[32|[126|[119|[46|[32|[82|[101|[97|[115|[111|[110|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2724
																																				 [FwMod|[FwFunc|[Reason|[]]]])
									      do  %% Line 2725
										  apply 'print'/3
										      (1, [126|[119|[32|[102|[97|[105|[108|[101|[100|[32|[105|[110|[32|[126|[119|[46|[32|[82|[101|[97|[115|[111|[110|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [FwMod|[FwFunc|[Reason|[]]]])
										  %% Line 2726
										  call 'erlang':'exit'
										      ('framework_error')
								      %% Line 2727
								      <{_cor415,Fail,_cor416}>
									  when let <_cor235> =
										try
										    let <_cor234> =
											call 'erlang':'element'
											    (1, Fail)
										    in  call 'erlang':'=:='
											    (_cor234, 'EXIT')
										of <Try> ->
										    Try
										catch <T,R> ->
										    'false'
									    in  let <_cor237> =
										    %% Line 2728
										    try
											let <_cor236> =
											    call 'erlang':'element'
												(1, Fail)
											in  call 'erlang':'=:='
												(_cor236, 'timetrap_timeout')
										    of <Try> ->
											Try
										    catch <T,R> ->
											'false'
										in  let <_cor239> =
											%% Line 2729
											try
											    let <_cor238> =
												call 'erlang':'element'
												    (1, Fail)
											    in  call 'erlang':'=:='
												    (_cor238, 'user_timetrap_error')
											of <Try> ->
											    Try
											catch <T,R> ->
											    'false'
										    in  let <_cor241> =
											    %% Line 2730
											    try
												let <_cor240> =
												    call 'erlang':'element'
													(1, Fail)
												in  call 'erlang':'=:='
													(_cor240, 'failed')
											    of <Try> ->
												Try
											    catch <T,R> ->
												'false'
											in  let <_cor242> =
												%% Line 2729
												call 'erlang':'or'
												    (_cor239, _cor241)
											    in  let <_cor243> =
												    %% Line 2728
												    call 'erlang':'or'
													(_cor237, _cor242)
												in  call 'erlang':'or'
													(_cor235, _cor243) ->
									  let <Cases2,Config1,Status3> =
									      %% Line 2732
									      case <> of
										<>
										    when call 'erlang':'=:='
											  (StartConf,
											   'true') ->
										    do  %% Line 2733
											apply ReportAbortRepeat
											    ('failed')
											do  %% Line 2734
											    apply 'print'/3
												('minor', [126|[110|[42|[42|[42|[32|[126|[119|[32|[102|[97|[105|[108|[101|[100|[46|[126|[110|[32|[32|[32|[32|[83|[107|[105|[112|[112|[105|[110|[103|[32|[97|[108|[108|[32|[99|[97|[115|[101|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2735
																																									       [Func|[]])
											    let <Reason> = {%% Line 2736
												 'failed',%% Line 2736
													  {Mod,Func,Fail}}
											    in  let <_cor248> =
												    %% Line 2737
												    apply 'skip_cases_upto'/6
													(Ref, Cases, Reason, 'conf', CurrMode, %% Line 2738
																	       'auto_skip_case')
												in  let <_cor246> =
													%% Line 2740
													apply 'get_name'/1
													    (Mode)
												    in  let <_cor245> =
													    %% Line 2741
													    apply 'delete_status'/2
														(Ref, Status2)
													in  let <_cor247> =
														%% Line 2740
														apply 'update_status'/4
														    ('failed', 'group_result', _cor246, _cor245)
													    in  <_cor248,%% Line 2739
															 Config,_cor247>
										%% Line 2742
										<>
										    when let <_cor249> =
											  call 'erlang':'=:='
											      (StartConf, 'false')
										      in  let <_cor250> =
											      call 'erlang':'is_boolean'
												  (StartConf)
											  in  call 'erlang':'and'
												  (_cor249, _cor250) ->
										    do  %% Line 2743
											apply ReportRepeatStop
											    ()
											do  %% Line 2744
											    apply 'print_conf_time'/1
												(ConfTime)
											    let <_cor252> =
												%% Line 2745
												call 'erlang':'tl'
												    (Config)
											    in  let <_cor251> =
												    %% Line 2745
												    apply 'delete_status'/2
													(Ref, Status2)
												in  %% Line 2745
												    <Cases,_cor252,_cor251>
										( <> when 'true' ->
										      primop 'match_fail'
											  ('if_clause')
										  -| ['compiler_generated'] )
									      end
									  in  do  %% Line 2747
										  apply 'set_io_buffering'/1
										      (IOHandler)
										  do  %% Line 2748
										      apply 'stop_minor_log_file'/0
											  ()
										      %% Line 2749
										      apply 'run_test_cases_loop'/5
											  (Cases2, Config1, TimetrapData, Mode, Status3)
								      %% Line 2751
								      <{_cor417,{'auto_skip',SkipReason},_cor418}> when 'true' ->
									  let <Cases2,Config1,Status3> =
									      %% Line 2755
									      case <> of
										<>
										    when call 'erlang':'=:='
											  (StartConf,
											   'true') ->
										    do  %% Line 2756
											apply ReportAbortRepeat
											    ('auto_skipped')
											do  %% Line 2757
											    apply 'print'/3
												('minor', [126|[110|[42|[42|[42|[32|[126|[119|[32|[97|[117|[116|[111|[32|[115|[107|[105|[112|[112|[101|[100|[46|[126|[110|[32|[32|[32|[32|[83|[107|[105|[112|[112|[105|[110|[103|[32|[97|[108|[108|[32|[99|[97|[115|[101|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2758
																																														  [Func|[]])
											    let <_cor256> =
												%% Line 2759
												apply 'skip_cases_upto'/6
												    (Ref, Cases, SkipReason, 'conf', CurrMode, %% Line 2760
																	       'auto_skip_case')
											    in  let <_cor255> =
												    %% Line 2762
												    apply 'delete_status'/2
													(Ref, Status2)
												in  <_cor256,%% Line 2761
													     Config,_cor255>
										%% Line 2763
										<>
										    when let <_cor257> =
											  call 'erlang':'=:='
											      (StartConf, 'false')
										      in  let <_cor258> =
											      call 'erlang':'is_boolean'
												  (StartConf)
											  in  call 'erlang':'and'
												  (_cor257, _cor258) ->
										    do  %% Line 2764
											apply ReportRepeatStop
											    ()
											do  %% Line 2765
											    apply 'print_conf_time'/1
												(ConfTime)
											    let <_cor260> =
												%% Line 2766
												call 'erlang':'tl'
												    (Config)
											    in  let <_cor259> =
												    %% Line 2766
												    apply 'delete_status'/2
													(Ref, Status2)
												in  %% Line 2766
												    <Cases,_cor260,_cor259>
										( <> when 'true' ->
										      primop 'match_fail'
											  ('if_clause')
										  -| ['compiler_generated'] )
									      end
									  in  do  %% Line 2768
										  apply 'set_io_buffering'/1
										      (IOHandler)
										  do  %% Line 2769
										      apply 'stop_minor_log_file'/0
											  ()
										      %% Line 2770
										      apply 'run_test_cases_loop'/5
											  (Cases2, Config1, TimetrapData, Mode, Status3)
								      %% Line 2772
								      <{_cor419,{Skip,Reason},_cor420}>
									  when try
										let <_cor263> =
										    call 'erlang':'=:='
											(StartConf, 'true')
										in  let <_cor264> =
											call 'erlang':'=:='
											    (Skip, 'skip')
										    in  let <_cor265> =
											    call 'erlang':'=:='
												(Skip, 'skipped')
											in  let <_cor266> =
												call 'erlang':'or'
												    (_cor264, _cor265)
											    in  call 'erlang':'and'
												    (_cor263, _cor266)
									    of <Try> ->
										Try
									    catch <T,R> ->
										'false' ->
									  do  %% Line 2773
									      apply ReportAbortRepeat
										  ('skipped')
									      do  %% Line 2774
										  apply 'print'/3
										      ('minor', [126|[110|[42|[42|[42|[32|[126|[119|[32|[115|[107|[105|[112|[112|[101|[100|[46|[126|[110|[32|[32|[32|[32|[83|[107|[105|[112|[112|[105|[110|[103|[32|[97|[108|[108|[32|[99|[97|[115|[101|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2775
																																									    [Func|[]])
										  do  %% Line 2776
										      apply 'set_io_buffering'/1
											  (IOHandler)
										      do  %% Line 2777
											  apply 'stop_minor_log_file'/0
											      ()
											  let <_cor269> =
											      %% Line 2778
											      apply 'skip_cases_upto'/6
												  (Ref, Cases, Reason, 'conf', %% Line 2779
															       CurrMode, %% Line 2779
																	 'skip_case')
											  in  let <_cor268> =
												  %% Line 2780
												  call 'erlang':'hd'
												      (Config)
											      in  let <_cor267> =
												      %% Line 2781
												      apply 'delete_status'/2
													  (Ref, Status2)
												  in  %% Line 2778
												      apply 'run_test_cases_loop'/5
													  (_cor269, %% Line 2780
														    [_cor268|Config], %% Line 2780
																      TimetrapData, %% Line 2780
																		    Mode, _cor267)
								      %% Line 2782
								      <{_cor421,{'skip_and_save',Reason,_X_SavedConfig},_cor422}>
									  when call 'erlang':'=:='
										(StartConf,
										 'true') ->
									  do  %% Line 2783
									      apply ReportAbortRepeat
										  ('skipped')
									      do  %% Line 2784
										  apply 'print'/3
										      ('minor', [126|[110|[42|[42|[42|[32|[126|[119|[32|[115|[107|[105|[112|[112|[101|[100|[46|[126|[110|[32|[32|[32|[32|[83|[107|[105|[112|[112|[105|[110|[103|[32|[97|[108|[108|[32|[99|[97|[115|[101|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2785
																																									    [Func|[]])
										  do  %% Line 2786
										      apply 'set_io_buffering'/1
											  (IOHandler)
										      do  %% Line 2787
											  apply 'stop_minor_log_file'/0
											      ()
											  let <_cor272> =
											      %% Line 2788
											      apply 'skip_cases_upto'/6
												  (Ref, Cases, Reason, 'conf', %% Line 2789
															       CurrMode, %% Line 2789
																	 'skip_case')
											  in  let <_cor271> =
												  %% Line 2790
												  call 'erlang':'hd'
												      (Config)
											      in  let <_cor270> =
												      %% Line 2791
												      apply 'delete_status'/2
													  (Ref, Status2)
												  in  %% Line 2788
												      apply 'run_test_cases_loop'/5
													  (_cor272, %% Line 2790
														    [_cor271|Config], %% Line 2790
																      TimetrapData, %% Line 2790
																		    Mode, _cor270)
								      %% Line 2792
								      <{_cor423,_X_Other,_cor424}>
									  when call 'erlang':'=:='
										(Func,
										 'init_per_suite') ->
									  do  %% Line 2793
									      apply 'print'/3
										  ('minor', [126|[110|[42|[42|[42|[32|[105|[110|[105|[116|[95|[112|[101|[114|[95|[115|[117|[105|[116|[101|[32|[102|[97|[105|[108|[101|[100|[32|[116|[111|[32|[114|[101|[116|[117|[114|[110|[32|[97|[32|[67|[111|[110|[102|[105|[103|[32|[108|[105|[115|[116|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
									      let <Reason> = {%% Line 2794
										   'failed',%% Line 2794
											    {Mod,'init_per_suite','bad_return'}}
									      in  let <Cases2> =
										      %% Line 2795
										      apply 'skip_cases_upto'/6
											  (Ref, Cases, Reason, 'conf', CurrMode, %% Line 2796
																 'auto_skip_case')
										  in  do  %% Line 2797
											  apply 'set_io_buffering'/1
											      (IOHandler)
											  do  %% Line 2798
											      apply 'stop_minor_log_file'/0
												  ()
											      let <_cor275> =
												  %% Line 2800
												  apply 'delete_status'/2
												      (Ref, Status2)
											      in  %% Line 2799
												  apply 'run_test_cases_loop'/5
												      (Cases2, Config, TimetrapData, Mode, _cor275)
								      %% Line 2801
								      <{_cor425,_X_Other,_cor426}>
									  when call 'erlang':'=:='
										(StartConf,
										 'true') ->
									  do  %% Line 2802
									      apply 'print_conf_time'/1
										  (ConfTime)
									      do  %% Line 2803
										  apply 'set_io_buffering'/1
										      (IOHandler)
										  do  %% Line 2804
										      apply ReportRepeatStop
											  ()
										      do  %% Line 2805
											  apply 'stop_minor_log_file'/0
											      ()
											  let <_cor276> =
											      %% Line 2806
											      call 'erlang':'hd'
												  (Config)
											  in  %% Line 2806
											      apply 'run_test_cases_loop'/5
												  (Cases, [_cor276|Config], TimetrapData, %% Line 2807
																	  Mode, %% Line 2807
																		Status2)
								      %% Line 2808
								      <{_cor427,_X_EndConfRetVal,Opts}> when 'true' ->
									  let <GrName> =
									      %% Line 2815
									      apply 'get_name'/2
										  (Mode0, Func)
									  in  let <Cases2,Status3> =
										  %% Line 2817
										  case call 'lists':'keysearch'
											   ('return_group_result', 1, Opts) of
										    %% Line 2818
										    <{'value',{_cor428,'failed'}}> when 'true' ->
											let <_cor279> =
											    %% Line 2819
											    apply 'curr_ref'/1
												(Mode)
											in  let <_cor278> =
												%% Line 2819
												apply 'check_prop'/2
												    ('sequence', Mode)
											    in  %% Line 2819
												case <_cor279,_cor278> of
												  %% Line 2820
												  <ParentRef,_cor429>
												      when call 'erlang':'=:='
													    (_cor429,
													     ParentRef) ->
												      let <Reason> = {%% Line 2821
													   'group_result',%% Line 2821
															  GrName,%% Line 2821
																 'failed'}
												      in  let <_cor283> =
													      %% Line 2822
													      apply 'skip_cases_upto'/6
														  (ParentRef, Cases, Reason, 'tc', %% Line 2823
																		   Mode, %% Line 2823
																			 'auto_skip_case')
													  in  let <_cor281> =
														  %% Line 2825
														  apply 'delete_status'/2
														      (Ref, Status2)
													      in  let <_cor282> =
														      %% Line 2824
														      apply 'update_status'/4
															  ('failed', 'group_result', GrName, _cor281)
														  in  <_cor283,_cor282>
												  %% Line 2826
												  <_fol1968,_fol1969> when 'true' ->
												      let <_cor284> =
													  %% Line 2828
													  apply 'delete_status'/2
													      (Ref, Status2)
												      in  let <_cor285> =
													      %% Line 2827
													      apply 'update_status'/4
														  ('failed', 'group_result', GrName, _cor284)
													  in  %% Line 2827
													      <Cases,_cor285>
												end
										    %% Line 2830
										    <{'value',{_cor431,GroupResult}}> when 'true' ->
											let <_cor287> =
											    %% Line 2832
											    apply 'delete_status'/2
												(Ref, Status2)
											in  let <_cor288> =
												%% Line 2831
												apply 'update_status'/4
												    (GroupResult, 'group_result', GrName, _cor287)
											    in  %% Line 2831
												<Cases,_cor288>
										    %% Line 2833
										    <'false'> when 'true' ->
											let <_cor289> =
											    %% Line 2835
											    apply 'delete_status'/2
												(Ref, Status2)
											in  let <_cor290> =
												%% Line 2834
												apply 'update_status'/4
												    ('ok', 'group_result', GrName, _cor289)
											    in  %% Line 2834
												<Cases,_cor290>
										    ( <_cor291> when 'true' ->
											  primop 'match_fail'
											      ({'case_clause',_cor291})
										      -| ['compiler_generated'] )
										  end
									      in  do  %% Line 2837
										      apply 'print_conf_time'/1
											  (ConfTime)
										      do  %% Line 2838
											  apply ReportRepeatStop
											      ()
											  do  %% Line 2839
											      apply 'set_io_buffering'/1
												  (IOHandler)
											      do  %% Line 2840
												  apply 'stop_minor_log_file'/0
												      ()
												  let <_cor294> =
												      %% Line 2841
												      call 'erlang':'tl'
													  (Config)
												  in  %% Line 2841
												      apply 'run_test_cases_loop'/5
													  (Cases2, _cor294, TimetrapData, %% Line 2842
																	  Mode, %% Line 2842
																		Status3)
								      ( <_cor295> when 'true' ->
									    primop 'match_fail'
										({'case_clause',_cor295})
									-| ['compiler_generated'] )
								    end
				    ( <_cor146> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor146})
				      -| ['compiler_generated'] )
				  end
	  %% Line 2845
	  <[{'make',Ref,{Mod,Func,Args}}|Cases0],Config,TimetrapData,%% Line 2846
								     Mode,%% Line 2846
									  Status> when 'true' ->
	      %% Line 2847
	      case apply 'run_test_case'/7
		       (Ref, 0, Mod, Func, Args, 'skip_init', TimetrapData) of
		%% Line 2848
		<{_cor432,Why = {'EXIT',_cor433},_cor434}> when 'true' ->
		    do  %% Line 2849
			apply 'print'/3
			    ('minor', [126|[110|[42|[42|[42|[32|[126|[119|[32|[102|[97|[105|[108|[101|[100|[46|[126|[110|[32|[32|[32|[32|[83|[107|[105|[112|[112|[105|[110|[103|[32|[97|[108|[108|[32|[99|[97|[115|[101|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2850
																																	   [Func|[]])
			let <Reason> = {%% Line 2851
			     'failed',%% Line 2851
				      {Mod,Func,Why}}
			in  let <Cases> =
				%% Line 2852
				apply 'skip_cases_upto'/6
				    (Ref, Cases0, Reason, 'conf', Mode, %% Line 2853
									'auto_skip_case')
			    in  do  %% Line 2854
				    apply 'stop_minor_log_file'/0
					()
				    %% Line 2855
				    apply 'run_test_cases_loop'/5
					(Cases, Config, TimetrapData, Mode, Status)
		%% Line 2856
		<{_cor435,_X_Whatever,_cor436}> when 'true' ->
		    do  %% Line 2857
			apply 'stop_minor_log_file'/0
			    ()
			%% Line 2858
			apply 'run_test_cases_loop'/5
			    (Cases0, Config, TimetrapData, Mode, Status)
		( <_cor298> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor298})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2861
	  <[Conf = {'conf',_X_Ref,_X_Props,_X_X}|_X_Cases0],%% Line 2862
							    Config,%% Line 2862
								   _X_TimetrapData,%% Line 2862
										   _X_Mode,%% Line 2862
											   _X_Status> when 'true' ->
	      %% Line 2863
	      call 'erlang':'error'
		  ('badarg', [Conf|[Config|[]]])
	  %% Line 2865
	  <[{Mod,Case}|Cases],Config,TimetrapData,Mode,Status> when 'true' ->
	      let <_cor305> =
		  %% Line 2867
		  case call 'erlang':'get'
			   ('test_server_create_priv_dir') of
		    %% Line 2868
		    <'auto_per_run'> when 'true' ->
			let <_cor301> =
			    %% Line 2869
			    call 'erlang':'hd'
				(Config)
			in  let <_cor299> =
				%% Line 2869
				call 'erlang':'get'
				    ('test_server_priv_dir')
			    in  let <_cor300> =
				    %% Line 2870
				    apply 'get_data_dir'/1
					(Mod)
				in  %% Line 2869
				    apply 'update_config'/2
					(_cor301, [{'priv_dir',_cor299}|%% Line 2870
									[{'data_dir',_cor300}|[]]])
		    %% Line 2871
		    <_cor437> when 'true' ->
			let <_cor303> =
			    %% Line 2872
			    call 'erlang':'hd'
				(Config)
			in  let <_cor302> =
				%% Line 2872
				apply 'get_data_dir'/1
				    (Mod)
			    in  %% Line 2872
				apply 'update_config'/2
				    (_cor303, [{'data_dir',_cor302}|[]])
		  end
	      in  %% Line 2874
		  apply 'run_test_cases_loop'/5
		      ([{Mod,Case,[_cor305|[]]}|Cases], Config, %% Line 2875
								TimetrapData, %% Line 2875
									      Mode, %% Line 2875
										    Status)
	  %% Line 2877
	  <[{Mod,Func,Args}|Cases],Config,TimetrapData,Mode,Status> when 'true' ->
	      let <_cor308> =
		  %% Line 2879
		  apply 'get_fw_mod'/1
		      ('test_server_ctrl')
	      in  let <Num,RunInit> =
		      %% Line 2879
		      case _cor308 of
			%% Line 2880
			<_cor438>
			    when let <_cor439> =
				  call 'erlang':'=:='
				      (_cor308, Mod)
			      in  let <_cor440> =
				      call 'erlang':'=:='
					  (Func, 'error_in_suite')
				  in  call 'erlang':'and'
					  (_cor439, _cor440) ->
			    %% Line 2881
			    <-1,'skip_init'>
			%% Line 2882
			<_cor441> when 'true' ->
			    let <_cor310> =
				%% Line 2883
				call 'erlang':'get'
				    ('test_server_case_num')
			    in  let <_cor311> =
				    %% Line 2883
				    call 'erlang':'+'
					(_cor310, 1)
				in  let <_cor312> =
					%% Line 2883
					call 'erlang':'put'
					    ('test_server_case_num', _cor311)
				    in  <_cor312,%% Line 2884
						 'run_init'>
		      end
		  in  let <_cor317> =
			  %% Line 2890
			  apply 'check_prop'/2
			      ('parallel', Mode)
		      in  let <_cor319> =
			      %% Line 2890
			      ( case <> of
				  ( <>
					when call 'erlang':'=:='
					      (_cor317,
					       'false') ->
					apply 'is_io_buffered'/0
					    ()
				    -| ['compiler_generated'] )
				  ( <> when 'true' ->
					'false'
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  in  do  %% Line 2890
				  case _cor319 of
				    %% Line 2891
				    <'true'> when 'true' ->
					let <_cor321> =
					    %% Line 2894
					    call 'erlang':'self'
						()
					in  let <_cor320> =
						%% Line 2894
						call 'erlang':'+'
						    (Num, 1)
					    in  %% Line 2894
						apply 'queue_test_case_io'/5
						    ('undefined', _cor321, _cor320, Mod, Func)
				    %% Line 2895
				    <'false'> when 'true' ->
					'ok'
				    ( <_cor322> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor322})
				      -| ['compiler_generated'] )
				  end
				  let <_cor323> =
				      %% Line 2899
				      call 'erlang':'+'
					  (Num, 1)
				  in  %% Line 2899
				      case apply 'run_test_case'/8
					       ('undefined', _cor323, Mod, Func, Args, %% Line 2900
										       RunInit, %% Line 2900
												TimetrapData, %% Line 2900
													      Mode) of
					%% Line 2902
					<{_cor442,{'framework_error',{_cor443,FwFunc},Reason},_cor444}>
					    when call 'erlang':'=:='
						  (_cor443,
						   _cor308) ->
					    do  %% Line 2903
						apply 'print'/3
						    ('minor', [126|[110|[42|[42|[42|[32|[126|[119|[32|[102|[97|[105|[108|[101|[100|[32|[105|[110|[32|[126|[119|[46|[32|[82|[101|[97|[115|[111|[110|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2904
																																   [_cor308|[FwFunc|[Reason|[]]]])
						do  %% Line 2905
						    apply 'print'/3
							(1, [126|[119|[32|[102|[97|[105|[108|[101|[100|[32|[105|[110|[32|[126|[119|[46|[32|[82|[101|[97|[115|[111|[110|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor308|[FwFunc|[Reason|[]]]])
						    do  %% Line 2906
							apply 'stop_minor_log_file'/0
							    ()
							%% Line 2907
							call 'erlang':'exit'
							    ('framework_error')
					%% Line 2909
					<{Time,RetVal,_cor445}> when 'true' ->
					    let <Failed,Status1> =
						%% Line 2911
						case Time of
						  %% Line 2912
						  <'died'> when 'true' ->
						      let <_cor324> =
							  %% Line 2913
							  apply 'update_status'/4
							      ('failed', Mod, Func, Status)
						      in  %% Line 2913
							  <'true',_cor324>
						  %% Line 2914
						  <_cor446>
						      when call 'erlang':'is_tuple'
							    (RetVal) ->
						      %% Line 2915
						      case call 'erlang':'element'
							       (1, RetVal) of
							%% Line 2916
							<R>
							    when let <_cor325> =
								  call 'erlang':'=:='
								      (R, 'EXIT')
							      in  let <_cor326> =
								      call 'erlang':'=:='
									  (R, 'failed')
								  in  call 'erlang':'or'
									  (_cor325, _cor326) ->
							    let <_cor327> =
								%% Line 2917
								apply 'update_status'/4
								    ('failed', Mod, Func, Status)
							    in  %% Line 2917
								<'true',_cor327>
							%% Line 2918
							<R>
							    when let <_cor328> =
								  call 'erlang':'=:='
								      (R, 'skip')
							      in  let <_cor329> =
								      call 'erlang':'=:='
									  (R, 'skipped')
								  in  call 'erlang':'or'
									  (_cor328, _cor329) ->
							    let <_cor330> =
								%% Line 2919
								apply 'update_status'/4
								    ('skipped', Mod, Func, Status)
							    in  %% Line 2919
								<'false',_cor330>
							%% Line 2920
							<_cor447> when 'true' ->
							    let <_cor331> =
								%% Line 2921
								apply 'update_status'/4
								    ('ok', Mod, Func, Status)
							    in  %% Line 2921
								<'false',_cor331>
						      end
						  %% Line 2923
						  <_cor448> when 'true' ->
						      let <_cor333> =
							  %% Line 2924
							  apply 'update_status'/4
							      ('ok', Mod, Func, Status)
						      in  %% Line 2924
							  <'false',_cor333>
						end
					    in  %% Line 2926
						case apply 'check_prop'/2
							 ('sequence', Mode) of
						  %% Line 2927
						  <'false'> when 'true' ->
						      do  %% Line 2928
							  apply 'stop_minor_log_file'/0
							      ()
							  %% Line 2929
							  apply 'run_test_cases_loop'/5
							      (Cases, Config, TimetrapData, Mode, Status1)
						  %% Line 2930
						  <Ref> when 'true' ->
						      %% Line 2933
						      case <> of
							<>
							    when let <_cor337> =
								  call 'erlang':'=:='
								      (Failed, 'false')
							      in  let <_cor338> =
								      call 'erlang':'is_boolean'
									  (Failed)
								  in  call 'erlang':'and'
									  (_cor337, _cor338) ->
							    do  %% Line 2934
								apply 'stop_minor_log_file'/0
								    ()
								%% Line 2935
								apply 'run_test_cases_loop'/5
								    (Cases, Config, TimetrapData, Mode, Status1)
							%% Line 2936
							<> when 'true' ->
							    do  %% Line 2937
								apply 'print'/3
								    ('minor', [126|[110|[42|[42|[42|[32|[126|[119|[32|[102|[97|[105|[108|[101|[100|[46|[126|[110|[32|[32|[32|[32|[83|[107|[105|[112|[112|[105|[110|[103|[32|[97|[108|[108|[32|[111|[116|[104|[101|[114|[32|[99|[97|[115|[101|[115|[32|[105|[110|[32|[115|[101|[113|[117|[101|[110|[99|[101|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2939
																																																			   [Func|[]])
								let <Reason> = {%% Line 2940
								     'failed',%% Line 2940
									      {Mod,Func}}
								in  let <Cases2> =
									%% Line 2941
									apply 'skip_cases_upto'/6
									    (Ref, Cases, Reason, 'tc', %% Line 2942
												       Mode, %% Line 2942
													     'auto_skip_case')
								    in  do  %% Line 2943
									    apply 'stop_minor_log_file'/0
										()
									    %% Line 2944
									    apply 'run_test_cases_loop'/5
										(Cases2, Config, TimetrapData, Mode, Status1)
						      end
						end
					%% Line 2949
					<Pid> when 'true' ->
					    let <_cor342> =
						%% Line 2952
						call 'erlang':'+'
						    (Num, 1)
					    in  do  %% Line 2952
						    apply 'queue_test_case_io'/5
							('undefined', Pid, _cor342, Mod, Func)
						    %% Line 2953
						    apply 'run_test_cases_loop'/5
							(Cases, Config, TimetrapData, Mode, Status)
				      end
	  %% Line 2957
	  <[],_X_Config,_X_TimetrapData,_cor449,_cor450> when 'true' ->
	      %% Line 2958
	      'ok'
	  ( <_cor348,_cor347,_cor346,_cor345,_cor344> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor348,_cor347,_cor346,_cor345,_cor344})
		  -| [{'function_name',{'run_test_cases_loop',5}}] )
	    -| ['compiler_generated'] )
	end
'new_status'/2 =
    %% Line 2963
    fun (_cor1,_cor0) ->
	%% Line 2964
	[{_cor1,{{[],[],[]},[]}}|_cor0]
'new_status'/3 =
    %% Line 2966
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2967
	[{_cor2,{{[],[],[]},_cor1}}|_cor0]
'delete_status'/2 =
    %% Line 2969
    fun (_cor1,_cor0) ->
	%% Line 2970
	call 'lists':'keydelete'
	    (_cor1, 1, _cor0)
'update_status'/4 =
    %% Line 2972
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <'ok',Mod,Func,[{Ref,{{Ok,Skip,Fail},Cs}}|Status]> when 'true' ->
	      let <_cor4> =
		  %% Line 2973
		  call 'erlang':'++'
		      (Ok, [{Mod,Func}|[]])
	      in  %% Line 2973
		  [{Ref,{{_cor4,Skip,Fail},Cs}}|Status]
	  %% Line 2975
	  <'skipped',Mod,Func,[{Ref,{{Ok,Skip,Fail},Cs}}|Status]> when 'true' ->
	      let <_cor5> =
		  %% Line 2976
		  call 'erlang':'++'
		      (Skip, [{Mod,Func}|[]])
	      in  %% Line 2976
		  [{Ref,{{Ok,_cor5,Fail},Cs}}|Status]
	  %% Line 2978
	  <'failed',Mod,Func,[{Ref,{{Ok,Skip,Fail},Cs}}|Status]> when 'true' ->
	      let <_cor6> =
		  %% Line 2979
		  call 'erlang':'++'
		      (Fail, [{Mod,Func}|[]])
	      in  %% Line 2979
		  [{Ref,{{Ok,Skip,_cor6},Cs}}|Status]
	  %% Line 2981
	  <_cor11,_cor12,_cor13,[]> when 'true' ->
	      %% Line 2982
	      []
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'update_status',4}}] )
	    -| ['compiler_generated'] )
	end
'update_status'/3 =
    %% Line 2984
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Ref,{Ok,Skip,Fail},[{_cor9,{{Ok0,Skip0,Fail0},Cs}}|Status]>
	      when call 'erlang':'=:='
		    (_cor9,
		     Ref) ->
	      let <_cor5> =
		  %% Line 2985
		  call 'erlang':'++'
		      (Ok0, Ok)
	      in  let <_cor4> =
		      %% Line 2985
		      call 'erlang':'++'
			  (Skip0, Skip)
		  in  let <_cor3> =
			  %% Line 2985
			  call 'erlang':'++'
			      (Fail0, Fail)
		      in  %% Line 2985
			  [{Ref,{{_cor5,_cor4,_cor3},Cs}}|Status]
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'update_status',3}}] )
	    -| ['compiler_generated'] )
	end
'get_copied_cases'/1 =
    %% Line 2987
    fun (_cor0) ->
	case _cor0 of
	  <[{_cor2,{_cor3,Cases}}|_X_Status]> when 'true' ->
	      %% Line 2988
	      Cases
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_copied_cases',1}}] )
	    -| ['compiler_generated'] )
	end
'get_tc_results'/1 =
    %% Line 2990
    fun (_cor0) ->
	case _cor0 of
	  <[{_cor2,{OkSkipFail,_cor3}}|_X_Status]> when 'true' ->
	      %% Line 2991
	      OkSkipFail
	  %% Line 2992
	  <[]> when 'true' ->
	      %% Line 2993
	      {[],[],[]}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_tc_results',1}}] )
	    -| ['compiler_generated'] )
	end
'conf'/2 =
    %% Line 2995
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2996
	    call 'erlang':'now'
		()
	in  %% Line 2996
	    {_cor1,_cor0,_cor2}
'curr_ref'/1 =
    %% Line 2998
    fun (_cor0) ->
	case _cor0 of
	  <[{Ref,_X_Props,_cor2}|_cor3]> when 'true' ->
	      %% Line 2999
	      Ref
	  %% Line 3000
	  <[]> when 'true' ->
	      %% Line 3001
	      'undefined'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'curr_ref',1}}] )
	    -| ['compiler_generated'] )
	end
'curr_mode'/3 =
    %% Line 3003
    fun (_cor2,_cor1,_cor0) ->
	%% Line 3004
	case apply 'curr_ref'/1
		 (_cor0) of
	  %% Line 3005
	  <_cor7>
	      when call 'erlang':'=:='
		    (_cor7,
		     _cor2) ->
	      _cor0
	  %% Line 3006
	  <_cor8> when 'true' ->
	      _cor1
	end
'get_props'/1 =
    %% Line 3009
    fun (_cor0) ->
	case _cor0 of
	  <[{_cor2,Props,_cor3}|_cor4]> when 'true' ->
	      %% Line 3010
	      Props
	  %% Line 3011
	  <[]> when 'true' ->
	      %% Line 3012
	      []
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_props',1}}] )
	    -| ['compiler_generated'] )
	end
'check_prop'/2 =
    %% Line 3014
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Attrib,[]> when 'true' ->
	      %% Line 3015
	      'false'
	  %% Line 3016
	  <Attrib,[{Ref,Props,_cor5}|_cor6]> when 'true' ->
	      %% Line 3017
	      case call 'lists':'member'
		       (Attrib, Props) of
		%% Line 3018
		<'true'> when 'true' ->
		    Ref
		%% Line 3019
		<'false'> when 'true' ->
		    'false'
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'check_prop',2}}] )
	    -| ['compiler_generated'] )
	end
'check_props'/2 =
    %% Line 3022
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 3023
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[{R,Ps,_cor11}|_cor3]> when 'true' ->
				( case call 'lists':'member'
					   (_cor1, Ps) of
				    <'true'> when 'true' ->
					let <_cor5> =
					    apply 'lc$^0'/1
						(_cor3)
					in  ( [R|_cor5]
					      -| ['compiler_generated'] )
				    ( <'false'> when 'true' ->
					  apply 'lc$^0'/1
					      (_cor3)
				      -| ['compiler_generated'] )
				    ( <_cor6> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor6})
				      -| ['compiler_generated'] )
				  end
				  -| ['list_comprehension'] )
			    ( <[_cor2|_cor3]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor3)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 3023
	    case _cor7 of
	      %% Line 3024
	      <[]> when 'true' ->
		  'false'
	      %% Line 3025
	      <[Ref|_cor12]> when 'true' ->
		  Ref
	      ( <_cor8> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor8})
		-| ['compiler_generated'] )
	    end
'get_name'/2 =
    %% Line 3028
    fun (_cor1,_cor0) ->
	%% Line 3029
	case apply 'get_name'/1
		 (_cor1) of
	  %% Line 3030
	  <'undefined'> when 'true' ->
	      _cor0
	  %% Line 3031
	  <Name> when 'true' ->
	      Name
	end
'get_name'/1 =
    %% Line 3034
    fun (_cor0) ->
	case _cor0 of
	  <[{_X_Ref,Props,_cor2}|_cor3]> when 'true' ->
	      %% Line 3035
	      call 'proplists':'get_value'
		  ('name', Props)
	  %% Line 3036
	  <[]> when 'true' ->
	      %% Line 3037
	      'undefined'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_name',1}}] )
	    -| ['compiler_generated'] )
	end
'conf_start'/2 =
    %% Line 3039
    fun (_cor1,_cor0) ->
	%% Line 3040
	case call 'lists':'keysearch'
		 (_cor1, 1, _cor0) of
	  %% Line 3041
	  <{'value',{_cor5,_cor6,T}}> when 'true' ->
	      T
	  %% Line 3042
	  <'false'> when 'true' ->
	      0
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'get_data_dir'/1 =
    %% Line 3046
    fun (_cor0) ->
	%% Line 3047
	apply 'get_data_dir'/2
	    (_cor0, 'undefined')
'get_data_dir'/2 =
    %% Line 3049
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 3050
	    case <> of
	      <>
		  when call 'erlang':'=:='
			(_cor0,
			 'undefined') ->
		  _cor1
	      %% Line 3051
	      <> when 'true' ->
		  _cor0
	    end
	in  %% Line 3053
	    case call 'code':'which'
		     (_cor2) of
	      %% Line 3054
	      <'non_existing'> when 'true' ->
		  do  %% Line 3055
		      apply 'print'/3
			  (12, [84|[104|[101|[32|[109|[111|[100|[117|[108|[101|[32|[126|[119|[32|[105|[115|[32|[110|[111|[116|[32|[108|[111|[97|[100|[101|[100]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor1|[]])
		      %% Line 3056
		      []
	      %% Line 3057
	      <'cover_compiled'> when 'true' ->
		  let <MainCoverNode> =
		      %% Line 3058
		      call 'cover':'get_main_node'
			  ()
		  in  %% Line 3059
		      case call 'rpc':'call'
			       (MainCoverNode, 'cover', 'is_compiled', [_cor2|[]]) of
			<{'file',File}> when 'true' ->
			    %% Line 3060
			    apply 'do_get_data_dir'/2
				(_cor2, File)
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor5})
			  -| ['compiler_generated'] )
		      end
	      %% Line 3061
	      <FullPath> when 'true' ->
		  %% Line 3062
		  apply 'do_get_data_dir'/2
		      (_cor2, FullPath)
	    end
'do_get_data_dir'/2 =
    %% Line 3065
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 3066
	    call 'filename':'dirname'
		(_cor0)
	in  let <_cor2> =
		%% Line 3066
		call 'erlang':'atom_to_list'
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 3066
		    call 'erlang':'++'
			(_cor2, [95|[100|[97|[116|[97|[47]]]]]])
		in  let <_cor4> =
			%% Line 3066
			[47|_cor3]
		    in  %% Line 3066
			call 'erlang':'++'
			    (_cor5, _cor4)
'print_conf_time'/1 =
    %% Line 3068
    fun (_cor0) ->
	case _cor0 of
	  <0> when 'true' ->
	      %% Line 3069
	      'ok'
	  %% Line 3070
	  <ConfTime> when 'true' ->
	      do  %% Line 3071
		  apply 'print'/3
		      ('major', [61|[103|[114|[111|[117|[112|[95|[116|[105|[109|[101|[32|[32|[32|[32|[126|[46|[51|[102|[115]]]]]]]]]]]]]]]]]]]], [ConfTime|[]])
		  %% Line 3072
		  apply 'print'/3
		      ('minor', [126|[110|[61|[61|[61|[32|[84|[111|[116|[97|[108|[32|[101|[120|[101|[99|[117|[116|[105|[111|[110|[32|[116|[105|[109|[101|[32|[111|[102|[32|[103|[114|[111|[117|[112|[58|[32|[126|[46|[51|[102|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [ConfTime|[]])
	end
'print_props'/2 =
    %% Line 3074
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor4,[]> when 'true' ->
	      %% Line 3075
	      'ok'
	  %% Line 3076
	  <'true',Props> when 'true' ->
	      do  %% Line 3077
		  apply 'print'/3
		      ('major', [61|[103|[114|[111|[117|[112|[95|[112|[114|[111|[112|[115|[32|[32|[32|[126|[112]]]]]]]]]]]]]]]]], [Props|[]])
		  %% Line 3078
		  apply 'print'/3
		      ('minor', [71|[114|[111|[117|[112|[32|[112|[114|[111|[112|[101|[114|[116|[105|[101|[115|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]], [Props|[]])
	  %% Line 3079
	  <_cor5,_cor6> when 'true' ->
	      %% Line 3080
	      'ok'
	end
'get_repeat'/1 =
    %% Line 3088
    fun (_cor0) ->
	%% Line 3089
	apply 'get_prop'/3
	    (['repeat'|['repeat_until_all_ok'|['repeat_until_any_ok'|['repeat_until_any_fail'|['repeat_until_all_fail']]]]], %% Line 3090
															     'forever', _cor0)
'update_repeat'/1 =
    %% Line 3092
    fun (_cor0) ->
	%% Line 3093
	case apply 'get_repeat'/1
		 (_cor0) of
	  %% Line 3094
	  <'undefined'> when 'true' ->
	      _cor0
	  %% Line 3096
	  <{RepType,N}> when 'true' ->
	      let <_cor4> =
		  %% Line 3098
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (N,
			       'forever') ->
			let <_cor1> =
			    %% Line 3099
			    call 'lists':'keydelete'
				(RepType, 1, _cor0)
			in  %% Line 3099
			    [{RepType,N}|_cor1]
		    %% Line 3100
		    <>
			when call 'erlang':'<'
			      (N,
			       3) ->
			%% Line 3101
			call 'lists':'keydelete'
			    (RepType, 1, _cor0)
		    %% Line 3102
		    <>
			when call 'erlang':'>='
			      (N,
			       3) ->
			let <_cor2> =
			    %% Line 3103
			    call 'erlang':'-'
				(N, 1)
			in  let <_cor3> =
				%% Line 3103
				call 'lists':'keydelete'
				    (RepType, 1, _cor0)
			    in  %% Line 3103
				[{RepType,_cor2}|_cor3]
		    ( <> when 'true' ->
			  primop 'match_fail'
			      ('if_clause')
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 3107
		  case apply 'get_shuffle'/1
			   (_cor4) of
		    %% Line 3108
		    <'undefined'> when 'true' ->
			_cor4
		    %% Line 3110
		    <_cor10> when 'true' ->
			let <_cor6> =
			    %% Line 3111
			    apply 'delete_shuffle'/1
				(_cor4)
			in  %% Line 3111
			    [{'shuffle','repeated'}|_cor6]
		  end
	  ( <_cor8> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor8})
	    -| ['compiler_generated'] )
	end
'get_shuffle'/1 =
    %% Line 3115
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 3116
	    call 'erlang':'now'
		()
	in  %% Line 3116
	    apply 'get_prop'/3
		(['shuffle'], _cor1, _cor0)
'delete_shuffle'/1 =
    %% Line 3118
    fun (_cor0) ->
	%% Line 3119
	apply 'delete_prop'/2
	    (['shuffle'], _cor0)
'get_prop'/3 =
    %% Line 3123
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Item|Items],Default,Props> when 'true' ->
	      %% Line 3124
	      case call 'lists':'keysearch'
		       (Item, 1, Props) of
		%% Line 3125
		<{'value',R}> when 'true' ->
		    %% Line 3126
		    R
		%% Line 3127
		<'false'> when 'true' ->
		    %% Line 3128
		    case call 'lists':'member'
			     (Item, Props) of
		      %% Line 3129
		      <'true'> when 'true' ->
			  %% Line 3130
			  {Item,Default}
		      %% Line 3131
		      <'false'> when 'true' ->
			  %% Line 3132
			  apply 'get_prop'/3
			      (Items, Default, Props)
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3135
	  <[],_X_Def,_X_Props> when 'true' ->
	      %% Line 3136
	      'undefined'
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'get_prop',3}}] )
	    -| ['compiler_generated'] )
	end
'delete_prop'/2 =
    %% Line 3138
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Item|Items],Props> when 'true' ->
	      let <_cor2> =
		  %% Line 3139
		  call 'lists':'keydelete'
		      (Item, 1, Props)
	      in  let <Props1> =
		      %% Line 3139
		      call 'lists':'delete'
			  (Item, _cor2)
		  in  %% Line 3140
		      apply 'delete_prop'/2
			  (Items, Props1)
	  %% Line 3141
	  <[],Props> when 'true' ->
	      %% Line 3142
	      Props
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'delete_prop',2}}] )
	    -| ['compiler_generated'] )
	end
'shuffle_cases'/3 =
    %% Line 3149
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Ref,Cases,'undefined'> when 'true' ->
	      let <_cor3> =
		  %% Line 3150
		  call 'erlang':'now'
		      ()
	      in  %% Line 3150
		  apply 'shuffle_cases'/3
		      (Ref, Cases, _cor3)
	  %% Line 3152
	  <Ref,[Start = {'conf',_cor10,_cor11,_cor12}|Cases],Seed>
	      when call 'erlang':'=:='
		    (_cor10,
		     Ref) ->
	      %% Line 3153
	      case apply 'cases_to_shuffle'/2
		       (Ref, Cases) of
		<{N,CasesToShuffle,Rest}> when 'true' ->
		    let <_cor5> =
			%% Line 3154
			call 'random':'uniform_s'
			    (N, Seed)
		    in  let <ShuffledCases> =
			    %% Line 3154
			    apply 'random_order'/4
				(N, _cor5, CasesToShuffle, [])
			in  %% Line 3155
			    [Start|call 'erlang':'++'
				       (ShuffledCases, Rest)]
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'shuffle_cases',3}}] )
	    -| ['compiler_generated'] )
	end
'cases_to_shuffle'/2 =
    %% Line 3157
    fun (_cor1,_cor0) ->
	%% Line 3158
	apply 'cases_to_shuffle'/4
	    (_cor1, _cor0, 1, [])
'cases_to_shuffle'/4 =
    %% Line 3160
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Ref,Cs = [{'conf',_cor15,_cor16,_cor17}|_cor18],N,Ix>
	      when call 'erlang':'=:='
		    (_cor15,
		     Ref) ->
	      let <_cor4> =
		  %% Line 3161
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 3161
		  {_cor4,Ix,Cs}
	  %% Line 3162
	  <Ref,Cs = [{'skip_case',{_cor19,_cor20,_cor21,_cor22},_cor23}|_cor24],N,Ix>
	      when call 'erlang':'=:='
		    (_cor20,
		     Ref) ->
	      let <_cor5> =
		  %% Line 3163
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 3163
		  {_cor5,Ix,Cs}
	  %% Line 3165
	  <Ref,[C = {'conf',Ref1,_cor25,_cor26}|Cs],N,Ix> when 'true' ->
	      %% Line 3166
	      case apply 'get_subcases'/3
		       (Ref1, Cs, []) of
		<{Cs1,Rest}> when 'true' ->
		    let <_cor7> =
			%% Line 3167
			call 'erlang':'+'
			    (N, 1)
		    in  %% Line 3167
			apply 'cases_to_shuffle'/4
			    (Ref, Rest, _cor7, [{N,[C|Cs1]}|Ix])
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3168
	  <Ref,[C = {'skip_case',{_cor27,Ref1,_cor28,_cor29},_cor30}|Cs],N,Ix> when 'true' ->
	      %% Line 3169
	      case apply 'get_subcases'/3
		       (Ref1, Cs, []) of
		<{Cs1,Rest}> when 'true' ->
		    let <_cor9> =
			%% Line 3170
			call 'erlang':'+'
			    (N, 1)
		    in  %% Line 3170
			apply 'cases_to_shuffle'/4
			    (Ref, Rest, _cor9, [{N,[C|Cs1]}|Ix])
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 3172
	  <Ref,[C|Cs],N,Ix> when 'true' ->
	      let <_cor10> =
		  %% Line 3173
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 3173
		  apply 'cases_to_shuffle'/4
		      (Ref, Cs, _cor10, [{N,[C|[]]}|Ix])
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'cases_to_shuffle',4}}] )
	    -| ['compiler_generated'] )
	end
'get_subcases'/3 =
    %% Line 3175
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <SubRef,[C = {'conf',_cor8,_cor9,_cor10}|Cs],SubCs>
	      when call 'erlang':'=:='
		    (_cor8,
		     SubRef) ->
	      let <_cor3> =
		  %% Line 3176
		  call 'lists':'reverse'
		      ([C|SubCs])
	      in  %% Line 3176
		  {_cor3,Cs}
	  %% Line 3177
	  <SubRef,[C = {'skip_case',{_cor11,_cor12,_cor13,_cor14},_cor15}|Cs],SubCs>
	      when call 'erlang':'=:='
		    (_cor12,
		     SubRef) ->
	      let <_cor4> =
		  %% Line 3178
		  call 'lists':'reverse'
		      ([C|SubCs])
	      in  %% Line 3178
		  {_cor4,Cs}
	  %% Line 3179
	  <SubRef,[C|Cs],SubCs> when 'true' ->
	      %% Line 3180
	      apply 'get_subcases'/3
		  (SubRef, Cs, [C|SubCs])
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'get_subcases',3}}] )
	    -| ['compiler_generated'] )
	end
'random_order'/4 =
    %% Line 3182
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <1,{_X_Pos,Seed},[{_X_Ix,CaseOrGroup}|[]],Shuffled> when 'true' ->
	      do  %% Line 3184
		  call 'erlang':'put'
		      ('test_server_curr_random_seed', Seed)
		  %% Line 3185
		  call 'erlang':'++'
		      (Shuffled, CaseOrGroup)
	  %% Line 3186
	  <N,{Pos,NewSeed},IxCases,Shuffled> when 'true' ->
	      let <_cor4> =
		  %% Line 3187
		  call 'erlang':'-'
		      (Pos, 1)
	      in  %% Line 3187
		  case call 'lists':'split'
			   (_cor4, IxCases) of
		    <{First,[{_X_Ix,CaseOrGroup}|Rest]}> when 'true' ->
			let <_cor10> =
			    %% Line 3188
			    call 'erlang':'-'
				(N, 1)
			in  let <_cor8> =
				%% Line 3188
				call 'erlang':'-'
				    (N, 1)
			    in  let <_cor9> =
				    %% Line 3188
				    call 'random':'uniform_s'
					(_cor8, NewSeed)
				in  let <_cor7> =
					%% Line 3189
					call 'erlang':'++'
					    (First, Rest)
				    in  let <_cor6> =
					    %% Line 3189
					    call 'erlang':'++'
						(Shuffled, CaseOrGroup)
					in  %% Line 3188
					    apply 'random_order'/4
						(_cor10, _cor9, _cor7, _cor6)
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'random_order',4}}] )
	    -| ['compiler_generated'] )
	end
'skip_case'/7 =
    %% Line 3199
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 3200
	    case _cor3 of
	      %% Line 3201
	      <{M,F,_X_A}> when 'true' ->
		  {M,F}
	      %% Line 3202
	      <{M,F}> when 'true' ->
		  {M,F}
	      ( <_cor7> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor7})
		-| ['compiler_generated'] )
	    end
	in  %% Line 3200
	    case _cor8 of
	      <MF = {Mod,Func}> when 'true' ->
		  do  %% Line 3204
		      case <> of
			<>
			    when call 'erlang':'=:='
				  (_cor1,
				   'true') ->
			    let <_cor10> =
				%% Line 3205
				call 'erlang':'self'
				    ()
			    in  do  %% Line 3205
				    apply 'queue_test_case_io'/5
					(_cor5, _cor10, _cor4, Mod, Func)
				    let <_cor12> =
					%% Line 3206
					call 'erlang':'self'
					    ()
				    in  let <_cor11> =
					    %% Line 3206
					    call 'erlang':'self'
						()
					in  do  %% Line 3206
						call 'erlang':'!'
						    (_cor12, {'started',_cor5,_cor11,_cor4,Mod,Func})
						do  %% Line 3207
						    call 'test_server_io':'start_transaction'
							()
						    do  %% Line 3208
							apply 'skip_case1'/6
							    (_cor6, _cor4, Mod, Func, _cor2, _cor0)
							do  %% Line 3209
							    call 'test_server_io':'end_transaction'
								()
							    let <_cor14> =
								%% Line 3210
								call 'erlang':'self'
								    ()
							    in  let <_cor13> =
								    %% Line 3210
								    call 'erlang':'self'
									()
								in  %% Line 3210
								    call 'erlang':'!'
									(_cor14, {'finished',_cor5,_cor13,_cor4,Mod,Func,'skipped',{0,'skipped',[]}})
			%% Line 3211
			<>
			    when let <_cor15> =
				  call 'erlang':'=:='
				      (_cor1, 'false')
			      in  let <_cor16> =
				      call 'erlang':'is_boolean'
					  (_cor1)
				  in  call 'erlang':'and'
					  (_cor15, _cor16) ->
			    %% Line 3212
			    apply 'skip_case1'/6
				(_cor6, _cor4, Mod, Func, _cor2, _cor0)
			( <> when 'true' ->
			      primop 'match_fail'
				  ('if_clause')
			  -| ['compiler_generated'] )
		      end
		      %% Line 3214
		      MF
	      ( <_cor9> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor9})
		-| ['compiler_generated'] )
	    end
'skip_case1'/6 =
    %% Line 3216
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 3217
	    call 'erlang':'>'
		(_cor4, 0)
	in  %% Line 3217
	    case apply 'get_font_style'/2
		     (_cor6, _cor0) of
	      <{{Col0,Col1},_cor59}> when 'true' ->
		  let <_cor8> =
		      %% Line 3218
		      case <> of
			<>
			    when call 'erlang':'=:='
				  (_cor5,
				   'auto') ->
			    [35|[70|[70|[65|[54|[52|[68]]]]]]]
			%% Line 3219
			<>
			    when call 'erlang':'=:='
				  (_cor5,
				   'user') ->
			    [35|[70|[70|[56|[48|[48|[48]]]]]]]
			( <> when 'true' ->
			      primop 'match_fail'
				  ('if_clause')
			  -| ['compiler_generated'] )
		      end
		  in  do  %% Line 3221
			  apply 'print'/3
			      ('major', [126|[110|[61|[99|[97|[115|[101|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[126|[119|[58|[126|[119]]]]]]]]]]]]]]]]]]]]]], [_cor3|[_cor2|[]]])
			  let <_cor12> =
			      %% Line 3222
			      case apply 'get_name'/1
				       (_cor0) of
				%% Line 3223
				<'undefined'> when 'true' ->
				    %% Line 3224
				    []
				%% Line 3225
				<GrName> when 'true' ->
				    let <GrName1> =
					%% Line 3226
					apply 'cast_to_list'/1
					    (GrName)
				    in  do  %% Line 3227
					    apply 'print'/3
						('major', [61|[103|[114|[111|[117|[112|[95|[112|[114|[111|[112|[115|[32|[32|[32|[126|[112]]]]]]]]]]]]]]]]], [[{'name',GrName1}|[]]|[]])
					    %% Line 3228
					    GrName1
			      end
			  in  let <_cor14> =
				  %% Line 3230
				  apply 'timestamp_get'/1
				      ([])
			      in  let <_cor15> =
				      %% Line 3230
				      call 'lists':'flatten'
					  (_cor14)
				  in  do  %% Line 3230
					  apply 'print'/3
					      ('major', [61|[115|[116|[97|[114|[116|[101|[100|[32|[32|[32|[32|[32|[32|[32|[126|[115]]]]]]]]]]]]]]]]], [_cor15|[]])
					  let <Comment1> =
					      %% Line 3231
					      apply 'reason_to_string'/1
						  (_cor1)
					  in  do  %% Line 3232
						  case <> of
						    <>
							when call 'erlang':'=:='
							      (_cor5,
							       'auto') ->
							%% Line 3233
							apply 'print'/3
							    ('major', [61|[114|[101|[115|[117|[108|[116|[32|[32|[32|[32|[32|[32|[32|[32|[97|[117|[116|[111|[95|[115|[107|[105|[112|[112|[101|[100|[58|[32|[126|[116|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Comment1|[]])
						    %% Line 3234
						    <>
							when call 'erlang':'=:='
							      (_cor5,
							       'user') ->
							%% Line 3235
							apply 'print'/3
							    ('major', [61|[114|[101|[115|[117|[108|[116|[32|[32|[32|[32|[32|[32|[32|[32|[115|[107|[105|[112|[112|[101|[100|[58|[32|[126|[116|[115]]]]]]]]]]]]]]]]]]]]]]]]]]], [Comment1|[]])
						    ( <> when 'true' ->
							  primop 'match_fail'
							      ('if_clause')
						      -| ['compiler_generated'] )
						  end
						  do  %% Line 3237
						      case <> of
							<>
							    when call 'erlang':'=='
								  (_cor4,
								   0) ->
							    %% Line 3238
							    apply 'print'/3
								(2, [42|[42|[42|[32|[83|[107|[105|[112|[112|[105|[110|[103|[32|[126|[119|[32|[42|[42|[42]]]]]]]]]]]]]]]]]]], [{_cor3,_cor2}|[]])
							%% Line 3239
							<> when 'true' ->
							    %% Line 3240
							    apply 'print'/3
								(2, [42|[42|[42|[32|[83|[107|[105|[112|[112|[105|[110|[103|[32|[116|[101|[115|[116|[32|[99|[97|[115|[101|[32|[35|[126|[119|[32|[126|[119|[32|[42|[42|[42]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor4|[{_cor3,_cor2}|[]]])
						      end
						      let <_cor17> =
							  %% Line 3242
							  apply 'odd_or_even'/0
							      ()
						      in  let <TR> =
							      %% Line 3242
							      apply 'xhtml'/2
								  ([60|[116|[114|[32|[118|[97|[108|[105|[103|[110|[61|[34|[116|[111|[112|[34|[62]]]]]]]]]]]]]]]]], [[60|[116|[114|[32|[99|[108|[97|[115|[115|[61|[34]]]]]]]]]]]|[_cor17|[[34|[62]]]]])
							  in  let <_cor20> =
								  %% Line 3243
								  case apply 'get_name'/1
									   (_cor0) of
								    %% Line 3244
								    <'undefined'> when 'true' ->
									[]
								    %% Line 3245
								    <Name> when 'true' ->
									apply 'cast_to_list'/1
									    (Name)
								  end
							      in  %% Line 3243
								  case _cor20 of
								    <_cor60>
									when call 'erlang':'=:='
									      (_cor20,
									       _cor12) ->
									let <_cor24> =
									    %% Line 3253
									    call 'erlang':'++'
										(Col1, [60|[47|[116|[100|[62|[60|[116|[100|[62|[60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34|[126|[116|[115|[34|[62|[83|[75|[73|[80|[80|[69|[68|[60|[47|[102|[111|[110|[116|[62|[60|[47|[116|[100|[62|[60|[116|[100|[62|[126|[116|[115|[60|[47|[116|[100|[62|[60|[47|[116|[114|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
									in  let <_cor25> =
										%% Line 3253
										call 'erlang':'++'
										    ([48|[46|[48|[48|[48|[115]]]]]], _cor24)
									    in  let <_cor26> =
										    %% Line 3253
										    call 'erlang':'++'
											(Col0, _cor25)
										in  let <_cor27> =
											%% Line 3253
											call 'erlang':'++'
											    ([60|[47|[116|[100|[62|[60|[116|[100|[62]]]]]]]]], _cor26)
										    in  let <_cor28> =
											    %% Line 3252
											    call 'erlang':'++'
												(Col1, _cor27)
											in  let <_cor29> =
												%% Line 3252
												[60|[32|[62|_cor28]]]
											    in  let <_cor30> =
												    %% Line 3252
												    call 'erlang':'++'
													(Col0, _cor29)
												in  let <_cor31> =
													%% Line 3252
													call 'erlang':'++'
													    ([60|[47|[116|[100|[62|[60|[116|[100|[62]]]]]]]]], _cor30)
												    in  let <_cor32> =
													    %% Line 3251
													    call 'erlang':'++'
														(Col1, _cor31)
													in  let <_cor33> =
														%% Line 3251
														[126|[119|_cor32]]
													    in  let <_cor34> =
														    %% Line 3251
														    call 'erlang':'++'
															(Col0, _cor33)
														in  let <_cor35> =
															%% Line 3251
															call 'erlang':'++'
															    ([60|[47|[116|[100|[62|[60|[116|[100|[62]]]]]]]]], _cor34)
														    in  let <_cor36> =
															    %% Line 3250
															    call 'erlang':'++'
																(Col1, _cor35)
															in  let <_cor37> =
																%% Line 3250
																[126|[116|[115|_cor36]]]
															    in  let <_cor38> =
																    %% Line 3250
																    call 'erlang':'++'
																	(Col0, _cor37)
																in  let <_cor39> =
																	%% Line 3250
																	call 'erlang':'++'
																	    ([60|[47|[116|[100|[62|[60|[116|[100|[62]]]]]]]]], _cor38)
																    in  let <_cor40> =
																	    %% Line 3249
																	    call 'erlang':'++'
																		(Col1, _cor39)
																	in  let <_cor41> =
																		%% Line 3249
																		[126|[119|_cor40]]
																	    in  let <_cor42> =
																		    %% Line 3249
																		    call 'erlang':'++'
																			(Col0, _cor41)
																		in  let <_cor43> =
																			%% Line 3249
																			call 'erlang':'++'
																			    ([60|[47|[116|[100|[62|[60|[116|[100|[62]]]]]]]]], _cor42)
																		    in  let <_cor44> =
																			    %% Line 3248
																			    call 'erlang':'++'
																				(Col1, _cor43)
																			in  let <_cor45> =
																				%% Line 3248
																				[126|[116|[115|_cor44]]]
																			    in  let <_cor46> =
																				    %% Line 3248
																				    call 'erlang':'++'
																					(Col0, _cor45)
																				in  let <_cor47> =
																					%% Line 3248
																					[60|[116|[100|[62|_cor46]]]]
																				    in  let <_cor48> =
																					    %% Line 3248
																					    call 'erlang':'++'
																						(TR, _cor47)
																					in  let <_cor22> =
																						%% Line 3256
																						apply 'num2str'/1
																						    (_cor4)
																					    in  let <_cor23> =
																						    %% Line 3256
																						    apply 'fw_name'/1
																							(_cor3)
																						in  do  %% Line 3247
																							apply 'print'/3
																							    ('html', _cor48, %% Line 3256
																									     [_cor22|[_cor23|[_cor12|[_cor2|[_cor8|[Comment1|[]]]]]]])
																							%% Line 3258
																							case <> of
																							  <>
																							      when call 'erlang':'>'
																								    (_cor4,
																								     0) ->
																							      %% Line 3259
																							      case call 'erlang':'get'
																								       ('test_server_skipped') of
																								<{US,AS}> when 'true' ->
																								    do  %% Line 3260
																									case _cor5 of
																									  %% Line 3261
																									  <'user'> when 'true' ->
																									      let <_cor50> =
																										  call 'erlang':'+'
																										      (US, 1)
																									      in  call 'erlang':'put'
																										      ('test_server_skipped', {_cor50,AS})
																									  %% Line 3262
																									  <'auto'> when 'true' ->
																									      let <_cor51> =
																										  call 'erlang':'+'
																										      (AS, 1)
																									      in  call 'erlang':'put'
																										      ('test_server_skipped', {US,_cor51})
																									  ( <_cor52> when 'true' ->
																										primop 'match_fail'
																										    ({'case_clause',_cor52})
																									    -| ['compiler_generated'] )
																									end
																									%% Line 3264
																									call 'erlang':'put'
																									    ('test_server_case_num', _cor4)
																								( <_cor49> when 'true' ->
																								      primop 'match_fail'
																									  ({'badmatch',_cor49})
																								  -| ['compiler_generated'] )
																							      end
																							  %% Line 3265
																							  <> when 'true' ->
																							      %% Line 3266
																							      'ok'
																							end
								    ( <_cor21> when 'true' ->
									  primop 'match_fail'
									      ({'badmatch',_cor21})
								      -| ['compiler_generated'] )
								  end
	      ( <_cor7> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor7})
		-| ['compiler_generated'] )
	    end
'skip_cases_upto'/6 =
    %% Line 3276
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 3277
	case %% Line 3278
	     apply 'modify_cases_upto'/3
		 (_cor5, {'skip',_cor3,_cor2,_cor1,_cor0}, _cor4) of
	  <{_cor13,Modified,Rest}> when 'true' ->
	      %% Line 3279
	      call 'erlang':'++'
		  (Modified, Rest)
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'copy_cases'/3 =
    %% Line 3287
    fun (_cor2,_cor1,_cor0) ->
	%% Line 3288
	case apply 'modify_cases_upto'/3
		 (_cor2, {'copy',_cor1}, _cor0) of
	  <{Original,Altered,Rest}> when 'true' ->
	      let <_cor4> =
		  %% Line 3289
		  call 'erlang':'++'
		      (Altered, Rest)
	      in  let <_cor5> =
		      %% Line 3289
		      call 'erlang':'++'
			  (Original, _cor4)
		  in  %% Line 3289
		      {Altered,_cor5}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'modify_cases_upto'/3 =
    %% Line 3301
    fun (_cor2,_cor1,_cor0) ->
	%% Line 3302
	case apply 'modify_cases_upto'/5
		 (_cor2, _cor1, _cor0, [], []) of
	  <{Original,Altered,Rest}> when 'true' ->
	      let <_cor5> =
		  %% Line 3303
		  call 'lists':'reverse'
		      (Original)
	      in  let <_cor4> =
		      %% Line 3303
		      call 'lists':'reverse'
			  (Altered)
		  in  %% Line 3303
		      {_cor5,_cor4,Rest}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'modify_cases_upto'/5 =
    %% Line 3306
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Ref,Op = {'copy',NewRef},[C = {'conf',_cor15,Props,MF}|T],Orig,Alt>
	      when call 'erlang':'=:='
		    (_cor15,
		     Ref) ->
	      let <_cor5> =
		  %% Line 3307
		  apply 'update_repeat'/1
		      (Props)
	      in  %% Line 3307
		  apply 'modify_cases_upto'/5
		      (Ref, Op, T, [C|Orig], [{'conf',NewRef,_cor5,MF}|Alt])
	  %% Line 3309
	  <Ref,ModOp,Cases,Orig,Alt> when 'true' ->
	      let <_cor8> =
		  %% Line 3312
		  ( fun (_cor6) ->
			case _cor6 of
			  <{_cor16,R,_cor17,_cor18}>
			      when call 'erlang':'=='
				    (R,
				     Ref) ->
			      'true'
			  %% Line 3313
			  <{_cor19,R,_cor20}>
			      when call 'erlang':'=='
				    (R,
				     Ref) ->
			      'true'
			  %% Line 3314
			  <{'skip_case',{_cor21,R,_cor22,_cor23},_cor24}>
			      when call 'erlang':'=='
				    (R,
				     Ref) ->
			      'true'
			  %% Line 3315
			  <{'skip_case',{_cor25,R,_cor26,_cor27}}>
			      when call 'erlang':'=='
				    (R,
				     Ref) ->
			      'true'
			  %% Line 3316
			  <_cor28> when 'true' ->
			      'false'
			end
		    -| [{'id',{0,0,'-modify_cases_upto/5-fun-0-'}}] )
	      in  %% Line 3312
		  case call 'lists':'any'
			   (_cor8, %% Line 3317
				   Cases) of
		    %% Line 3318
		    <'true'> when 'true' ->
			%% Line 3319
			apply 'modify_cases_upto1'/5
			    (Ref, ModOp, Cases, Orig, Alt)
		    %% Line 3320
		    <'false'> when 'true' ->
			%% Line 3321
			{[],[],Cases}
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor9})
		      -| ['compiler_generated'] )
		  end
	end
'modify_cases_upto1'/5 =
    %% Line 3325
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Ref,{'skip',Reason,'conf',Mode,'skip_case'},%% Line 3326
						       [{'conf',_cor15,_X_Props,MF}|T],%% Line 3326
										       Orig,%% Line 3326
											    Alt>
	      when call 'erlang':'=:='
		    (_cor15,
		     %% Line 3326
		     Ref) ->
	      %% Line 3327
	      {Orig,[{'skip_case',{'conf',Ref,MF,Reason},Mode}|Alt],T}
	  %% Line 3328
	  <Ref,{'skip',Reason,'conf',Mode,'auto_skip_case'},%% Line 3329
							    [{'conf',_cor16,_X_Props,MF}|T],%% Line 3329
											    Orig,%% Line 3329
												 Alt>
	      when call 'erlang':'=:='
		    (_cor16,
		     %% Line 3329
		     Ref) ->
	      %% Line 3330
	      {Orig,[{'auto_skip_case',{'conf',Ref,MF,Reason},Mode}|Alt],T}
	  %% Line 3331
	  <Ref,{'copy',NewRef},[C = {'conf',_cor17,Props,MF}|T],Orig,Alt>
	      when call 'erlang':'=:='
		    (_cor17,
		     Ref) ->
	      let <_cor5> =
		  %% Line 3332
		  apply 'update_repeat'/1
		      (Props)
	      in  %% Line 3332
		  {[C|Orig],[{'conf',NewRef,_cor5,MF}|Alt],T}
	  %% Line 3335
	  <Ref,{'skip',_cor18,'tc',_cor19,_cor20},Cs = %% Line 3336
						       [{'conf',_cor21,_X_Props,_X_MF}|_cor22],%% Line 3336
											       Orig,%% Line 3336
												    Alt>
	      when call 'erlang':'=:='
		    (_cor21,
		     %% Line 3336
		     Ref) ->
	      %% Line 3337
	      {Orig,Alt,Cs}
	  %% Line 3340
	  <Ref,{'skip',Reason,_cor23,Mode,SkipType},%% Line 3341
						    [{'make',_cor24,MF}|T],%% Line 3341
									   Orig,%% Line 3341
										Alt>
	      when call 'erlang':'=:='
		    (_cor24,
		     %% Line 3341
		     Ref) ->
	      %% Line 3342
	      {Orig,[{SkipType,{'make',Ref,MF,Reason},Mode}|Alt],T}
	  %% Line 3343
	  <Ref,{'copy',NewRef},[M = {'make',_cor25,MF}|T],Orig,Alt>
	      when call 'erlang':'=:='
		    (_cor25,
		     Ref) ->
	      %% Line 3344
	      {[M|Orig],[{'make',NewRef,MF}|Alt],T}
	  %% Line 3347
	  <Ref,{'skip',Reason,_cor26,Mode,SkipType},%% Line 3348
						    [{'skip_case',{Type,_cor27,MF,_X_Cmt},_cor28}|T],%% Line 3348
												     Orig,%% Line 3348
													  Alt>
	      when call 'erlang':'=:='
		    (_cor27,
		     %% Line 3348
		     Ref) ->
	      %% Line 3349
	      {Orig,[{SkipType,{Type,Ref,MF,Reason},Mode}|Alt],T}
	  %% Line 3350
	  <Ref,{'skip',Reason,_cor29,Mode,SkipType},%% Line 3351
						    [{'skip_case',{Type,_cor30,MF,_X_Cmt}}|T],%% Line 3351
											      Orig,%% Line 3351
												   Alt>
	      when call 'erlang':'=:='
		    (_cor30,
		     %% Line 3351
		     Ref) ->
	      %% Line 3352
	      {Orig,[{SkipType,{Type,Ref,MF,Reason},Mode}|Alt],T}
	  %% Line 3353
	  <Ref,{'copy',NewRef},%% Line 3354
			       [C = {'skip_case',{Type,_cor31,MF,Cmt},Mode}|T],%% Line 3354
									       Orig,%% Line 3354
										    Alt>
	      when call 'erlang':'=:='
		    (_cor31,
		     %% Line 3354
		     Ref) ->
	      %% Line 3355
	      {[C|Orig],[{'skip_case',{Type,NewRef,MF,Cmt},Mode}|Alt],T}
	  %% Line 3356
	  <Ref,{'copy',NewRef},%% Line 3357
			       [C = {'skip_case',{Type,_cor32,MF,Cmt}}|T],%% Line 3357
									  Orig,%% Line 3357
									       Alt>
	      when call 'erlang':'=:='
		    (_cor32,
		     %% Line 3357
		     Ref) ->
	      %% Line 3358
	      {[C|Orig],[{'skip_case',{Type,NewRef,MF,Cmt}}|Alt],T}
	  %% Line 3361
	  <Ref,ModOp,[MF = {'skip_case',{_X_F,_X_Cmt},_X_Mode}|T],Orig,Alt> when 'true' ->
	      %% Line 3362
	      apply 'modify_cases_upto1'/5
		  (Ref, ModOp, T, [MF|Orig], [MF|Alt])
	  %% Line 3365
	  <Ref,Op = {'skip',Reason,_cor33,Mode,'skip_case'},%% Line 3366
							    [MF = {_X_M,_X_F}|T],%% Line 3366
										 Orig,%% Line 3366
										      Alt> when 'true' ->
	      %% Line 3367
	      apply 'modify_cases_upto1'/5
		  (Ref, Op, T, Orig, [{'skip_case',{MF,Reason},Mode}|Alt])
	  %% Line 3368
	  <Ref,Op = {'skip',Reason,_cor34,Mode,'auto_skip_case'},%% Line 3369
								 [MF = {_X_M,_X_F}|T],%% Line 3369
										      Orig,%% Line 3369
											   Alt> when 'true' ->
	      %% Line 3370
	      apply 'modify_cases_upto1'/5
		  (Ref, Op, T, Orig, [{'auto_skip_case',{MF,Reason},Mode}|Alt])
	  %% Line 3371
	  <Ref,CopyOp,[MF = {_X_M,_X_F}|T],Orig,Alt> when 'true' ->
	      %% Line 3372
	      apply 'modify_cases_upto1'/5
		  (Ref, CopyOp, T, [MF|Orig], [MF|Alt])
	  %% Line 3375
	  <Ref,{'skip',Reason,FType,Mode,SkipType},%% Line 3376
						   [{'conf',OtherRef,Props,_X_MF}|T],%% Line 3376
										     Orig,%% Line 3376
											  Alt> when 'true' ->
	      %% Line 3377
	      case call 'erlang':'hd'
		       (Mode) of
		%% Line 3378
		<{_cor35,_cor36,_cor37}>
		    when call 'erlang':'=:='
			  (_cor35,
			   OtherRef) ->
		    let <_cor6> =
			%% Line 3379
			call 'erlang':'tl'
			    (Mode)
		    in  %% Line 3379
			apply 'modify_cases_upto1'/5
			    (Ref, {'skip',Reason,FType,_cor6,SkipType}, %% Line 3380
									T, %% Line 3380
									   Orig, %% Line 3380
										 Alt)
		%% Line 3381
		<_cor38> when 'true' ->
		    let <_cor7> =
			%% Line 3382
			apply 'conf'/2
			    (OtherRef, Props)
		    in  let <Mode1> =
			    %% Line 3382
			    [_cor7|Mode]
			in  %% Line 3383
			    apply 'modify_cases_upto1'/5
				(Ref, {'skip',Reason,FType,Mode1,SkipType}, %% Line 3384
									    T, %% Line 3384
									       Orig, %% Line 3384
										     Alt)
	      end
	  %% Line 3388
	  <Ref,Op = {'skip',_cor39,_cor40,_cor41,_cor42},[_X_Other|T],Orig,Alt> when 'true' ->
	      %% Line 3389
	      apply 'modify_cases_upto1'/5
		  (Ref, Op, T, Orig, Alt)
	  %% Line 3390
	  <Ref,CopyOp,[C|T],Orig,Alt> when 'true' ->
	      %% Line 3391
	      apply 'modify_cases_upto1'/5
		  (Ref, CopyOp, T, [C|Orig], [C|Alt])
	  ( <_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'modify_cases_upto1',5}}] )
	    -| ['compiler_generated'] )
	end
'set_io_buffering'/1 =
    %% Line 3401
    fun (_cor0) ->
	%% Line 3402
	call 'erlang':'put'
	    ('test_server_common_io_handler', _cor0)
'is_io_buffered'/0 =
    %% Line 3409
    fun () ->
	let <_cor0> =
	    %% Line 3410
	    call 'erlang':'get'
		('test_server_common_io_handler')
	in  %% Line 3410
	    call 'erlang':'=/='
		(_cor0, 'undefined')
'queue_test_case_io'/5 =
    %% Line 3421
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Entry> =
	    %% Line 3422
	    {_cor4,_cor3,_cor2,_cor1,_cor0}
	in  let <_cor6> =
		%% Line 3425
		call 'erlang':'get'
		    ('test_server_queued_io')
	    in  let <_cor7> =
		    %% Line 3425
		    call 'erlang':'++'
			(_cor6, [Entry|[]])
		in  %% Line 3424
		    call 'erlang':'put'
			('test_server_queued_io', _cor7)
'wait_for_cases'/1 =
    %% Line 3436
    fun (_cor0) ->
	%% Line 3437
	case call 'erlang':'get'
		 ('test_server_queued_io') of
	  %% Line 3438
	  <[]> when 'true' ->
	      %% Line 3439
	      {[],[],[]}
	  %% Line 3440
	  <Cases> when 'true' ->
	      let <_cor3> =
		  %% Line 3442
		  ( fun (_cor1) ->
			case _cor1 of
			  <{R,_cor7,_cor8,_cor9,_cor10}>
			      when call 'erlang':'=='
				    (R,
				     _cor0) ->
			      'false'
			  %% Line 3443
			  <_cor11> when 'true' ->
			      'true'
			end
		    -| [{'id',{0,0,'-wait_for_cases/1-fun-0-'}}] )
	      in  %% Line 3441
		  case %% Line 3442
		       call 'lists':'dropwhile'
			   (_cor3, %% Line 3444
				   Cases) of
		    <[_X_Start|TCs]> when 'true' ->
			%% Line 3445
			apply 'wait_and_resend'/5
			    (_cor0, TCs, [], [], [])
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	end
'wait_and_resend'/5 =
    %% Line 3448
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Ref,[{OtherRef,_cor22,0,_cor23,_cor24}|Ps],%% Line 3449
						      Ok,%% Line 3449
							 Skip,%% Line 3449
							      Fail>
	      when let <_cor5> =
		    %% Line 3449
		    call 'erlang':'is_reference'
			(OtherRef)
		in  let <_cor6> =
			%% Line 3450
			call 'erlang':'/='
			    (OtherRef, Ref)
		    in  %% Line 3449
			call 'erlang':'and'
			    (_cor5, _cor6) ->
	      let <Ps1> =
		  %% Line 3452
		  apply 'rm_cases_upto'/2
		      (OtherRef, Ps)
	      in  %% Line 3453
		  apply 'wait_and_resend'/5
		      (Ref, Ps1, Ok, Skip, Fail)
	  %% Line 3455
	  <Ref,Cases = [{_cor25,CurrPid,CaseNum,Mod,Func}|Ps],Ok,Skip,Fail> when 'true' ->
	      %% Line 3456
	      receive
		%% Line 3457
		<Msg = {'finished',_X_Ref,_cor26,_cor27,_cor28,_cor29,Result,_X_RetVal}>
		    when let <_cor34> =
			  call 'erlang':'=:='
			      (_cor26, CurrPid)
		      in  let <_cor32> =
			      call 'erlang':'=:='
				  (_cor27, CaseNum)
			  in  let <_cor30> =
				  call 'erlang':'=:='
				      (_cor28, Mod)
			      in  let <_cor31> =
				      call 'erlang':'=:='
					  (_cor29, Func)
				  in  let <_cor33> =
					  call 'erlang':'and'
					      (_cor30, _cor31)
				      in  let <_cor35> =
					      call 'erlang':'and'
						  (_cor32, _cor33)
					  in  call 'erlang':'and'
						  (_cor34, _cor35) ->
		    let <_cor8> =
			%% Line 3460
			call 'erlang':'self'
			    ()
		    in  do  %% Line 3460
			    call 'erlang':'!'
				(_cor8, Msg)
			    let <MF> = {%% Line 3461
				 Mod,%% Line 3461
				     Func}
			    in  let <Ok1,Skip1,Fail1> =
				    %% Line 3463
				    case Result of
				      %% Line 3464
				      <'ok'> when 'true' ->
					  <[MF|Ok],Skip,Fail>
				      %% Line 3465
				      <'skipped'> when 'true' ->
					  <Ok,[MF|Skip],Fail>
				      %% Line 3466
				      <'failed'> when 'true' ->
					  <Ok,Skip,[MF|Fail]>
				      ( <_cor10> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor10})
					-| ['compiler_generated'] )
				    end
				in  %% Line 3468
				    apply 'wait_and_resend'/5
					(Ref, Ps, Ok1, Skip1, Fail1)
		%% Line 3469
		<{'EXIT',_cor36,Reason}>
		    when let <_cor37> =
			  call 'erlang':'=:='
			      (_cor36, CurrPid)
		      in  let <_cor38> =
			      call 'erlang':'=/='
				  (Reason, 'normal')
			  in  call 'erlang':'and'
				  (_cor37, _cor38) ->
		    %% Line 3471
		    case call 'lists':'keysearch'
			     (CurrPid, 2, Cases) of
		      <{'value',{_cor39,_cor40,_cor41,_cor42,_cor43}}>
			  when let <_cor46> =
				call 'erlang':'=:='
				    (_cor41, CaseNum)
			    in  let <_cor44> =
				    call 'erlang':'=:='
					(_cor42, Mod)
				in  let <_cor45> =
					call 'erlang':'=:='
					    (_cor43, Func)
				    in  let <_cor47> =
					    call 'erlang':'and'
						(_cor44, _cor45)
					in  call 'erlang':'and'
						(_cor46, _cor47) ->
			  do  %% Line 3472
			      apply 'print'/3
				  (1, [69|[114|[114|[111|[114|[33|[32|[80|[114|[111|[99|[101|[115|[115|[32|[102|[111|[114|[32|[116|[101|[115|[116|[32|[99|[97|[115|[101|[32|[35|[126|[119|[32|[40|[126|[119|[58|[126|[119|[41|[32|[100|[105|[101|[100|[33|[32|[82|[101|[97|[115|[111|[110|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 3473
																																												      [CaseNum|[Mod|[Func|[Reason|[]]]]])
			      %% Line 3474
			      call 'erlang':'exit'
				  ({'unexpected_termination',{CaseNum,Mod,Func},{CurrPid,Reason}})
		      ( <_cor13> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor13})
			-| ['compiler_generated'] )
		    end
	      after 'infinity' ->
		'true'
	  %% Line 3477
	  <_cor48,[],Ok,Skip,Fail> when 'true' ->
	      let <_cor16> =
		  %% Line 3478
		  call 'lists':'reverse'
		      (Ok)
	      in  let <_cor15> =
		      %% Line 3478
		      call 'lists':'reverse'
			  (Skip)
		  in  let <_cor14> =
			  %% Line 3478
			  call 'lists':'reverse'
			      (Fail)
		      in  %% Line 3478
			  {_cor16,_cor15,_cor14}
	  ( <_cor21,_cor20,_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19,_cor18,_cor17})
		  -| [{'function_name',{'wait_and_resend',5}}] )
	    -| ['compiler_generated'] )
	end
'rm_cases_upto'/2 =
    %% Line 3480
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Ref,[{_cor4,_cor5,0,_cor6,_cor7}|Ps]>
	      when call 'erlang':'=:='
		    (_cor4,
		     Ref) ->
	      %% Line 3481
	      Ps
	  %% Line 3482
	  <Ref,[_cor8|Ps]> when 'true' ->
	      %% Line 3483
	      apply 'rm_cases_upto'/2
		  (Ref, Ps)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'rm_cases_upto',2}}] )
	    -| ['compiler_generated'] )
	end
'handle_test_case_io_and_status'/0 =
    %% Line 3520
    fun () ->
	%% Line 3521
	case call 'erlang':'get'
		 ('test_server_queued_io') of
	  %% Line 3522
	  <[]> when 'true' ->
	      %% Line 3523
	      {[],[],[]}
	  %% Line 3524
	  <Cases> when 'true' ->
	      let <Result> =
		  %% Line 3526
		  apply 'handle_io_and_exit_loop'/5
		      ([], Cases, [], [], [])
	      in  let <Main> =
		      %% Line 3527
		      call 'erlang':'self'
			  ()
		  in  let <_cor4> =
			  %% Line 3529
			  ( fun (_cor2) ->
				case _cor2 of
				  <{_cor6,Pid,_cor7,_cor8,_cor9}>
				      when call 'erlang':'/='
					    (Pid,
					     Main) ->
				      %% Line 3530
				      receive
					%% Line 3531
					<{'EXIT',_cor10,'normal'}>
					    when call 'erlang':'=:='
						  (_cor10,
						   Pid) ->
					    'ok'
				      after %% Line 3533
					    1000 ->
					%% Line 3533
					'ok'
				  %% Line 3535
				  <_cor11> when 'true' ->
				      %% Line 3536
				      'ok'
				end
			    -| [{'id',{0,0,'-handle_test_case_io_and_status/0-fun-0-'}}] )
		      in  do  %% Line 3529
			      call 'lists':'foreach'
				  (_cor4, %% Line 3537
					  Cases)
			      %% Line 3538
			      Result
	end
'handle_io_and_exit_loop'/5 =
    %% Line 3542
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],Cases = [{'undefined',CurrPid,CaseNum,Mod,Func}|Ps],Ok,Skip,Fail> when 'true' ->
	      %% Line 3544
	      receive
		%% Line 3545
		<{'started',_cor21,_cor22,_cor23,_cor24,_cor25}>
		    when let <_cor30> =
			  call 'erlang':'=:='
			      (_cor22, CurrPid)
		      in  let <_cor28> =
			      call 'erlang':'=:='
				  (_cor23, CaseNum)
			  in  let <_cor26> =
				  call 'erlang':'=:='
				      (_cor24, Mod)
			      in  let <_cor27> =
				      call 'erlang':'=:='
					  (_cor25, Func)
				  in  let <_cor29> =
					  call 'erlang':'and'
					      (_cor26, _cor27)
				      in  let <_cor31> =
					      call 'erlang':'and'
						  (_cor28, _cor29)
					  in  call 'erlang':'and'
						  (_cor30, _cor31) ->
		    let <_cor5> =
			%% Line 3547
			call 'erlang':'self'
			    ()
		    in  let <Ok1,Skip1,Fail1> =
			    %% Line 3547
			    case apply 'handle_io_and_exits'/6
				     (_cor5, CurrPid, CaseNum, Mod, Func, Cases) of
			      %% Line 3548
			      <{'ok',MF}> when 'true' ->
				  <[MF|Ok],Skip,Fail>
			      %% Line 3549
			      <{'skipped',MF}> when 'true' ->
				  <Ok,[MF|Skip],Fail>
			      %% Line 3550
			      <{'failed',MF}> when 'true' ->
				  <Ok,Skip,[MF|Fail]>
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor6})
				-| ['compiler_generated'] )
			    end
			in  %% Line 3552
			    apply 'handle_io_and_exit_loop'/5
				([], Ps, Ok1, Skip1, Fail1)
	      after %% Line 3554
		    1000 ->
		%% Line 3555
		call 'erlang':'exit'
		    ({'testcase_failed_to_start',Mod,Func})
	  %% Line 3559
	  <Refs,Cases = [{Ref,CurrPid,CaseNum,Mod,Func}|Ps],Ok,Skip,Fail> when 'true' ->
	      %% Line 3560
	      receive
		%% Line 3561
		<{'started',_cor32,_cor33,_cor34,_cor35,_cor36}>
		    when let <_cor41> =
			  call 'erlang':'=:='
			      (_cor33, CurrPid)
		      in  let <_cor39> =
			      call 'erlang':'=:='
				  (_cor34, CaseNum)
			  in  let <_cor37> =
				  call 'erlang':'=:='
				      (_cor35, Mod)
			      in  let <_cor38> =
				      call 'erlang':'=:='
					  (_cor36, Func)
				  in  let <_cor40> =
					  call 'erlang':'and'
					      (_cor37, _cor38)
				      in  let <_cor42> =
					      call 'erlang':'and'
						  (_cor39, _cor40)
					  in  call 'erlang':'and'
						  (_cor41, _cor42) ->
		    let <_cor9> =
			%% Line 3562
			call 'erlang':'self'
			    ()
		    in  do  %% Line 3562
			    apply 'handle_io_and_exits'/6
				(_cor9, CurrPid, CaseNum, Mod, Func, Cases)
			    let <_cor11> =
				%% Line 3564
				case Refs of
				  %% Line 3565
				  <[_cor43|Rs]>
				      when call 'erlang':'=:='
					    (_cor43,
					     Ref) ->
				      %% Line 3566
				      Rs
				  %% Line 3567
				  <_cor44>
				      when call 'erlang':'is_reference'
					    (Ref) ->
				      %% Line 3568
				      [Ref|Refs]
				  %% Line 3569
				  <_cor45> when 'true' ->
				      %% Line 3570
				      Refs
				end
			    in  %% Line 3572
				apply 'handle_io_and_exit_loop'/5
				    (_cor11, Ps, Ok, Skip, Fail)
	      after %% Line 3574
		    1000 ->
		%% Line 3575
		call 'erlang':'exit'
		    ({'testcase_failed_to_start',Mod,Func})
	  %% Line 3578
	  <_cor46,[],Ok,Skip,Fail> when 'true' ->
	      let <_cor15> =
		  %% Line 3579
		  call 'lists':'reverse'
		      (Ok)
	      in  let <_cor14> =
		      %% Line 3579
		      call 'lists':'reverse'
			  (Skip)
		  in  let <_cor13> =
			  %% Line 3579
			  call 'lists':'reverse'
			      (Fail)
		      in  %% Line 3579
			  {_cor15,_cor14,_cor13}
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16})
		  -| [{'function_name',{'handle_io_and_exit_loop',5}}] )
	    -| ['compiler_generated'] )
	end
'handle_io_and_exits'/6 =
    %% Line 3581
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 3582
	receive
	  %% Line 3583
	  <{Tag = 'abort_current_testcase',_X_Reason,From}> when 'true' ->
	      let <_cor6> =
		  %% Line 3586
		  call 'erlang':'self'
		      ()
	      in  do  %% Line 3586
		      call 'erlang':'!'
			  (From, {_cor6,Tag,{'error','parallel_group'}})
		      %% Line 3587
		      apply 'handle_io_and_exits'/6
			  (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
	  %% Line 3589
	  <{'finished',_cor21,_cor22,_cor23,_cor24,_cor25,Result,_X_RetVal}>
	      when let <_cor30> =
		    call 'erlang':'=:='
			(_cor22, _cor5)
		in  let <_cor28> =
			call 'erlang':'=:='
			    (_cor23, _cor3)
		    in  let <_cor26> =
			    call 'erlang':'=:='
				(_cor24, _cor2)
			in  let <_cor27> =
				call 'erlang':'=:='
				    (_cor25, _cor1)
			    in  let <_cor29> =
				    call 'erlang':'and'
					(_cor26, _cor27)
				in  let <_cor31> =
					call 'erlang':'and'
					    (_cor28, _cor29)
				    in  call 'erlang':'and'
					    (_cor30, _cor31) ->
	      do  %% Line 3590
		  call 'test_server_io':'print_buffered'
		      (_cor4)
		  %% Line 3591
		  {Result,{_cor2,_cor1}}
	  %% Line 3593
	  <{'finished',_cor32,_cor33,_cor34,_cor35,_cor36,Result,RetVal}>
	      when let <_cor41> =
		    call 'erlang':'=:='
			(_cor33, _cor4)
		in  let <_cor39> =
			call 'erlang':'=:='
			    (_cor34, _cor3)
		    in  let <_cor37> =
			    call 'erlang':'=:='
				(_cor35, _cor2)
			in  let <_cor38> =
				call 'erlang':'=:='
				    (_cor36, _cor1)
			    in  let <_cor40> =
				    call 'erlang':'and'
					(_cor37, _cor38)
				in  let <_cor42> =
					call 'erlang':'and'
					    (_cor39, _cor40)
				    in  call 'erlang':'and'
					    (_cor41, _cor42) ->
	      do  %% Line 3594
		  call 'test_server_io':'print_buffered'
		      (_cor4)
		  do  %% Line 3595
		      case Result of
			%% Line 3596
			<'ok'> when 'true' ->
			    let <_cor7> =
				%% Line 3597
				call 'erlang':'get'
				    ('test_server_ok')
			    in  let <_cor8> =
				    %% Line 3597
				    call 'erlang':'+'
					(_cor7, 1)
				in  %% Line 3597
				    call 'erlang':'put'
					('test_server_ok', _cor8)
			%% Line 3598
			<'failed'> when 'true' ->
			    let <_cor9> =
				%% Line 3599
				call 'erlang':'get'
				    ('test_server_failed')
			    in  let <_cor10> =
				    %% Line 3599
				    call 'erlang':'+'
					(_cor9, 1)
				in  %% Line 3599
				    call 'erlang':'put'
					('test_server_failed', _cor10)
			%% Line 3600
			<'skipped'> when 'true' ->
			    let <_cor11> =
				%% Line 3602
				call 'erlang':'get'
				    ('test_server_skipped')
			    in  let <SkipCounters> =
				    %% Line 3602
				    apply 'update_skip_counters'/2
					(RetVal, _cor11)
				in  %% Line 3603
				    call 'erlang':'put'
					('test_server_skipped', SkipCounters)
			( <_cor13> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor13})
			  -| ['compiler_generated'] )
		      end
		      %% Line 3605
		      {Result,{_cor2,_cor1}}
	  %% Line 3608
	  <{'EXIT',TCPid,Reason}>
	      when call 'erlang':'=/='
		    (Reason,
		     'normal') ->
	      do  %% Line 3609
		  call 'test_server_io':'print_buffered'
		      (_cor4)
		  %% Line 3610
		  case call 'lists':'keysearch'
			   (TCPid, 2, _cor0) of
		    <{'value',{_cor43,_cor44,Num,M,F}}> when 'true' ->
			do  %% Line 3611
			    apply 'print'/3
				(1, [69|[114|[114|[111|[114|[33|[32|[80|[114|[111|[99|[101|[115|[115|[32|[102|[111|[114|[32|[116|[101|[115|[116|[32|[99|[97|[115|[101|[32|[35|[126|[119|[32|[40|[126|[119|[58|[126|[119|[41|[32|[100|[105|[101|[100|[33|[32|[82|[101|[97|[115|[111|[110|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 3612
																																												    [Num|[M|[F|[Reason|[]]]]])
			    %% Line 3613
			    call 'erlang':'exit'
				({'unexpected_termination',{Num,M,F},{TCPid,Reason}})
		    ( <_cor14> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor14})
		      -| ['compiler_generated'] )
		  end
	after 'infinity' ->
	  'true'
'run_test_case'/7 =
    %% Line 3637
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 3638
	    call 'erlang':'get'
		('test_server_dir')
	in  let <_cor8> =
		%% Line 3638
		call 'filename':'dirname'
		    (_cor7)
	    in  do  %% Line 3638
		    call 'file':'set_cwd'
			(_cor8)
		    let <_cor9> =
			%% Line 3640
			call 'erlang':'self'
			    ()
		    in  %% Line 3639
			apply 'run_test_case1'/9
			    (_cor6, _cor5, _cor4, _cor3, _cor2, _cor1, _cor0, %% Line 3640
									      [], _cor9)
'run_test_case'/8 =
    %% Line 3642
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Ref,Num,Mod,Func,Args,'skip_init',TimetrapData,Mode> when 'true' ->
	      let <_cor8> =
		  %% Line 3645
		  call 'erlang':'self'
		      ()
	      in  %% Line 3644
		  apply 'run_test_case1'/9
		      (Ref, Num, Mod, Func, Args, 'skip_init', %% Line 3645
							       TimetrapData, %% Line 3645
									     Mode, _cor8)
	  %% Line 3647
	  <Ref,Num,Mod,Func,Args,RunInit,TimetrapData,Mode> when 'true' ->
	      let <_cor9> =
		  %% Line 3648
		  call 'erlang':'get'
		      ('test_server_dir')
	      in  let <_cor10> =
		      %% Line 3648
		      call 'filename':'dirname'
			  (_cor9)
		  in  do  %% Line 3648
			  call 'file':'set_cwd'
			      (_cor10)
			  let <Main> =
			      %% Line 3649
			      call 'erlang':'self'
				  ()
			  in  %% Line 3650
			      case apply 'check_prop'/2
				       ('parallel', Mode) of
				%% Line 3651
				<'false'> when 'true' ->
				    %% Line 3653
				    apply 'run_test_case1'/9
					(Ref, Num, Mod, Func, Args, RunInit, %% Line 3654
									     TimetrapData, %% Line 3654
											   Mode, %% Line 3654
												 Main)
				%% Line 3655
				<_X_Ref> when 'true' ->
				    let <Dictionary> =
					%% Line 3657
					call 'erlang':'get'
					    ()
				    in  let <_cor13> =
					    %% Line 3658
					    call 'erlang':'self'
						()
					in  %% Line 3658
					    case call 'erlang':'process_info'
						     (_cor13, 'dictionary') of
					      <{'dictionary',_cor30}>
						  when call 'erlang':'=:='
							(_cor30,
							 Dictionary) ->
						  let <_cor20> =
						      %% Line 3660
						      ( fun () ->
							    do  %% Line 3661
								call 'erlang':'process_flag'
								    ('trap_exit', 'true')
								do  %% Line 3662
								    ( letrec
									  'lc$^0'/1 =
									      fun (_cor17) ->
										  case _cor17 of
										    <[{Key,Val}|_cor16]> when 'true' ->
											do  call 'erlang':'put'
												(Key, Val)
											    apply 'lc$^0'/1
												(_cor16)
										    ( <[_cor15|_cor16]> when 'true' ->
											  apply 'lc$^0'/1
											      (_cor16)
										      -| ['compiler_generated'] )
										    <[]> when 'true' ->
											[]
										    ( <_cor17> when 'true' ->
											  ( primop 'match_fail'
												({'function_clause',_cor17})
											    -| [{'function_name',{'lc$^0',1}}] )
										      -| ['compiler_generated'] )
										  end
								      in  apply 'lc$^0'/1
									      (Dictionary)
								      -| ['list_comprehension'] )
								    do  %% Line 3663
									apply 'set_io_buffering'/1
									    ({'tc',Main})
									%% Line 3664
									apply 'run_test_case1'/9
									    (Ref, Num, Mod, Func, Args, RunInit, %% Line 3665
														 TimetrapData, %% Line 3665
															       Mode, %% Line 3665
																     Main)
							-| [{'id',{0,0,'-run_test_case/8-fun-0-'}}] )
						  in  %% Line 3659
						      call 'erlang':'spawn_link'
							  (_cor20)
					      ( <_cor14> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor14})
						-| ['compiler_generated'] )
					    end
			      end
	end
'run_test_case1'/9 =
    %% Line 3669
    fun (_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor10> =
	    %% Line 3671
	    call 'erlang':'self'
		()
	in  let <_cor11> =
		%% Line 3671
		call 'erlang':'=='
		    (_cor0, _cor10)
	    in  let <_cor12> =
		    %% Line 3671
		    call 'test_server_io':'get_gl'
			(_cor11)
		in  let <_cor9> =
			%% Line 3671
			call 'erlang':'self'
			    ()
		    in  do  %% Line 3671
			    call 'erlang':'group_leader'
				(_cor12, _cor9)
			    do  %% Line 3675
				case apply 'is_io_buffered'/0
					 () of
				  %% Line 3676
				  <'false'> when 'true' ->
				      'ok'
				  %% Line 3677
				  <'true'> when 'true' ->
				      do  %% Line 3678
					  call 'test_server_io':'start_transaction'
					      ()
					  let <_cor13> =
					      %% Line 3679
					      call 'erlang':'self'
						  ()
					  in  %% Line 3679
					      call 'erlang':'!'
						  (_cor0, {'started',_cor8,_cor13,_cor7,_cor6,_cor5})
				  ( <_cor14> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor14})
				    -| ['compiler_generated'] )
				end
				let <TSDir> =
				    %% Line 3681
				    call 'erlang':'get'
					('test_server_dir')
				in  do  %% Line 3683
					apply 'print'/3
					    ('major', [61|[99|[97|[115|[101|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[126|[119|[58|[126|[119]]]]]]]]]]]]]]]]]]]], [_cor6|[_cor5|[]]])
					let <_cor16> =
					    %% Line 3684
					    call 'erlang':'self'
						()
					in  let <_cor17> =
						%% Line 3684
						call 'erlang':'/='
						    (_cor16, _cor0)
					    in  let <MinorName> =
						    %% Line 3684
						    apply 'start_minor_log_file'/3
							(_cor6, _cor5, _cor17)
						in  do  %% Line 3685
							apply 'print'/4
							    ('minor', [60|[97|[32|[110|[97|[109|[101|[61|[34|[116|[111|[112|[34|[62|[60|[47|[97|[62]]]]]]]]]]]]]]]]]], [], 'internal_raw')
							let <MinorBase> =
							    %% Line 3686
							    call 'filename':'basename'
								(MinorName)
							in  let <_cor20> =
								%% Line 3687
								call 'filename':'basename'
								    (MinorName)
							    in  do  %% Line 3687
								    apply 'print'/3
									('major', [61|[108|[111|[103|[102|[105|[108|[101|[32|[32|[32|[32|[32|[32|[32|[126|[116|[115]]]]]]]]]]]]]]]]]], [_cor20|[]])
								    let <_cor34> =
									%% Line 3691
									case call 'erlang':'get'
										 ('test_server_create_priv_dir') of
									  %% Line 3692
									  <'auto_per_run'> when 'true' ->
									      let <_cor21> =
										  %% Line 3693
										  call 'erlang':'hd'
										      (_cor4)
									      in  %% Line 3693
										  apply 'update_config'/2
										      (_cor21, [{'tc_logfile',MinorName}|[]])
									  %% Line 3694
									  <PrivDirMode> when 'true' ->
									      let <RunDir> =
										  %% Line 3696
										  call 'filename':'dirname'
										      (MinorName)
									      in  let <_cor26> =
										      %% Line 3698
										      case <> of
											<>
											    when call 'erlang':'=='
												  (_cor7,
												   0) ->
											    %% Line 3699
											    case call 'erlang':'now'
												     () of
											      <{_cor120,S,Us}> when 'true' ->
												  let <_cor24> =
												      %% Line 3700
												      call 'io_lib':'format'
													  ([46|[126|[119|[46|[126|[119]]]]]], [S|[Us|[]]])
												  in  %% Line 3700
												      call 'lists':'flatten'
													  (_cor24)
											      ( <_cor23> when 'true' ->
												    primop 'match_fail'
													({'badmatch',_cor23})
												-| ['compiler_generated'] )
											    end
											%% Line 3701
											<> when 'true' ->
											    let <_cor25> =
												%% Line 3702
												call 'io_lib':'format'
												    ([46|[126|[119]]], [_cor7|[]])
											    in  %% Line 3702
												call 'lists':'flatten'
												    (_cor25)
										      end
										  in  let <_cor28> =
											  %% Line 3704
											  call 'filename':'join'
											      (RunDir, [108|[111|[103|[95|[112|[114|[105|[118|[97|[116|[101]]]]]]]]]]])
										      in  let <PrivDir> =
											      %% Line 3704
											      call 'erlang':'++'
												  (_cor28, _cor26)
											  in  do  %% Line 3705
												  case <> of
												    <>
													when call 'erlang':'=:='
													      (PrivDirMode,
													       'auto_per_tc') ->
													%% Line 3706
													case call 'file':'make_dir'
														 (PrivDir) of
													  <'ok'> when 'true' ->
													      'ok'
													  ( <_cor30> when 'true' ->
														primop 'match_fail'
														    ({'badmatch',_cor30})
													    -| ['compiler_generated'] )
													end
												    %% Line 3707
												    <>
													when call 'erlang':'=:='
													      (PrivDirMode,
													       'manual_per_tc') ->
													'ok'
												    ( <> when 'true' ->
													  primop 'match_fail'
													      ('if_clause')
												      -| ['compiler_generated'] )
												  end
												  let <_cor32> =
												      %% Line 3710
												      call 'erlang':'hd'
													  (_cor4)
												  in  let <_cor31> =
													  %% Line 3710
													  call 'erlang':'++'
													      (PrivDir, [47])
												      in  %% Line 3710
													  apply 'update_config'/2
													      (_cor32, [{'priv_dir',_cor31}|%% Line 3711
																	    [{'tc_logfile',MinorName}|[]]])
									end
								    in  let <GrName> =
									    %% Line 3713
									    apply 'get_name'/1
										(_cor1)
									in  do  %% Line 3714
										call 'test_server_sup':'framework_call'
										    ('report', %% Line 3715
											       ['tc_start'|[{{_cor6,{_cor5,GrName}},%% Line 3716
																    MinorName}|%% Line 3716
																	       []]])
										let <_cor38> =
										    %% Line 3718
										    call 'erlang':'=:='
											(_cor3, 'skip_init')
										in  let <_cor37> =
											%% Line 3718
											apply 'get_props'/1
											    (_cor1)
										    in  do  %% Line 3718
											    apply 'print_props'/2
												(_cor38, _cor37)
											    let <_cor40> =
												%% Line 3719
												case GrName of
												  %% Line 3720
												  <'undefined'> when 'true' ->
												      []
												  %% Line 3721
												  <Name> when 'true' ->
												      apply 'cast_to_list'/1
													  (Name)
												end
											    in  let <_cor42> =
												    %% Line 3723
												    apply 'timestamp_get'/1
													([])
												in  let <_cor43> =
													%% Line 3723
													call 'lists':'flatten'
													    (_cor42)
												    in  do  %% Line 3723
													    apply 'print'/3
														('major', [61|[115|[116|[97|[114|[116|[101|[100|[32|[32|[32|[32|[32|[32|[32|[126|[115]]]]]]]]]]]]]]]]], [_cor43|[]])
													    let <_cor44> =
														%% Line 3724
														call 'erlang':'=:='
														    (_cor3, 'run_init')
													    in  %% Line 3724
														case apply 'get_font_style'/2
															 (_cor44, _cor1) of
														  <{{Col0,Col1},Style}> when 'true' ->
														      let <_cor46> =
															  %% Line 3725
															  apply 'odd_or_even'/0
															      ()
														      in  let <TR> =
															      %% Line 3725
															      apply 'xhtml'/2
																  ([60|[116|[114|[32|[118|[97|[108|[105|[103|[110|[61|[34|[116|[111|[112|[34|[62]]]]]]]]]]]]]]]]], [[60|[116|[114|[32|[99|[108|[97|[115|[115|[61|[34]]]]]]]]]]]|[_cor46|[[34|[62]]]]])
															  in  let <EncMinorBase> =
																  %% Line 3726
																  apply 'uri_encode'/1
																      (MinorBase)
															      in  let <_cor51> =
																      %% Line 3729
																      call 'erlang':'++'
																	  (Col1, [60|[47|[116|[100|[62|[60|[116|[100|[62|[60|[97|[32|[104|[114|[101|[102|[61|[34|[126|[116|[115|[34|[62|[126|[119|[60|[47|[97|[62|[60|[47|[116|[100|[62|[60|[116|[100|[62|[60|[97|[32|[104|[114|[101|[102|[61|[34|[126|[116|[115|[35|[116|[111|[112|[34|[62|[60|[60|[47|[97|[62|[32|[60|[97|[32|[104|[114|[101|[102|[61|[34|[126|[116|[115|[35|[101|[110|[100|[34|[62|[62|[60|[47|[97|[62|[60|[47|[116|[100|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
																  in  let <_cor52> =
																	  %% Line 3729
																	  [126|[116|[115|_cor51]]]
																      in  let <_cor53> =
																	      %% Line 3729
																	      call 'erlang':'++'
																		  (Col0, _cor52)
																	  in  let <_cor54> =
																		  %% Line 3729
																		  call 'erlang':'++'
																		      ([60|[47|[116|[100|[62|[60|[116|[100|[62]]]]]]]]], _cor53)
																	      in  let <_cor55> =
																		      %% Line 3728
																		      call 'erlang':'++'
																			  (Col1, _cor54)
																		  in  let <_cor56> =
																			  %% Line 3728
																			  [126|[119|_cor55]]
																		      in  let <_cor57> =
																			      %% Line 3728
																			      call 'erlang':'++'
																				  (Col0, _cor56)
																			  in  let <_cor58> =
																				  %% Line 3728
																				  call 'erlang':'++'
																				      ([60|[47|[116|[100|[62|[60|[116|[100|[62]]]]]]]]], _cor57)
																			      in  let <_cor59> =
																				      %% Line 3727
																				      call 'erlang':'++'
																					  (Col1, _cor58)
																				  in  let <_cor60> =
																					  %% Line 3727
																					  [126|[116|[115|_cor59]]]
																				      in  let <_cor61> =
																					      %% Line 3727
																					      call 'erlang':'++'
																						  (Col0, _cor60)
																					  in  let <_cor62> =
																						  %% Line 3727
																						  [60|[116|[100|[62|_cor61]]]]
																					      in  let <_cor63> =
																						      %% Line 3727
																						      call 'erlang':'++'
																							  (TR, _cor62)
																						  in  let <_cor49> =
																							  %% Line 3732
																							  apply 'num2str'/1
																							      (_cor7)
																						      in  let <_cor50> =
																							      %% Line 3732
																							      apply 'fw_name'/1
																								  (_cor6)
																							  in  do  %% Line 3727
																								  apply 'print'/3
																								      ('html', _cor63, %% Line 3732
																										       [_cor49|[_cor50|[_cor40|[EncMinorBase|[_cor5|%% Line 3733
																																    [EncMinorBase|[EncMinorBase|[]]]]]]]])
																								  let <_cor64> =
																								      %% Line 3735
																								      call 'erlang':'make_fun'
																									  ('erlang', 'yield', 0)
																								  in  do  %% Line 3735
																									  apply 'do_unless_parallel'/2
																									      (_cor0, _cor64)
																									  %% Line 3738
																									  case %% Line 3739
																									       apply 'run_test_case_apply'/7
																										   (_cor7, _cor6, _cor5, [_cor34|[]], GrName, _cor3, _cor2) of
																									    <{Result,DetectedFail,ProcsBefore,ProcsAfter}> when 'true' ->
																										let <_cor67> =
																										    %% Line 3742
																										    case Result of
																										      %% Line 3743
																										      <Normal = {_X_Time,_X_RetVal,_X_Loc,_X_Opts,_X_Comment}> when 'true' ->
																											  Normal
																										      %% Line 3744
																										      <{'died',DReason,DLoc,DCmt}> when 'true' ->
																											  {'died',DReason,DLoc,[],DCmt}
																										      ( <_cor66> when 'true' ->
																											    primop 'match_fail'
																												({'case_clause',_cor66})
																											-| ['compiler_generated'] )
																										    end
																										in  %% Line 3741
																										    case _cor67 of
																										      <{Time,RetVal,Loc,Opts,Comment}> when 'true' ->
																											  do  %% Line 3747
																											      apply 'print'/4
																												  ('minor', [60|[97|[32|[110|[97|[109|[101|[61|[34|[101|[110|[100|[34|[62|[60|[47|[97|[62]]]]]]]]]]]]]]]]]], [], 'internal_raw')
																											      do  %% Line 3748
																												  apply 'print'/4
																												      ('minor', [10], [], 'internal_raw')
																												  do  %% Line 3749
																												      apply 'print_timestamp'/2
																													  ('minor', [69|[110|[100|[101|[100|[32|[97|[116|[32]]]]]]]]])
																												      let <_cor69> =
																													  %% Line 3750
																													  apply 'timestamp_get'/1
																													      ([])
																												      in  let <_cor70> =
																													      %% Line 3750
																													      call 'lists':'flatten'
																														  (_cor69)
																													  in  do  %% Line 3750
																														  apply 'print'/3
																														      ('major', [61|[101|[110|[100|[101|[100|[32|[32|[32|[32|[32|[32|[32|[32|[32|[126|[115]]]]]]]]]]]]]]]]], [_cor70|[]])
																														  let <_cor72> =
																														      %% Line 3752
																														      ( fun () ->
																															    let <_cor71> =
																																call 'filename':'dirname'
																																    (TSDir)
																															    in  call 'file':'set_cwd'
																																    (_cor71)
																															-| [{'id',{0,0,'-run_test_case1/9-fun-0-'}}] )
																														  in  do  %% Line 3752
																															  apply 'do_unless_parallel'/2
																															      (_cor0, _cor72)
																															  let <_cor85> =
																															      %% Line 3756
																															      case <Time,RetVal> of
																																%% Line 3757
																																<'died',{'timetrap_timeout',TimetrapTimeout}> when 'true' ->
																																    %% Line 3758
																																    apply 'progress'/10
																																	('failed', _cor7, _cor6, _cor5, GrName, Loc, %% Line 3759
																																						     'timetrap_timeout', %% Line 3759
																																									 TimetrapTimeout, %% Line 3759
																																											  Comment, %% Line 3759
																																												   Style)
																																%% Line 3760
																																<'died',Reason> when 'true' ->
																																    %% Line 3761
																																    apply 'progress'/10
																																	('failed', _cor7, _cor6, _cor5, GrName, Loc, Reason, %% Line 3762
																																							     Time, %% Line 3762
																																								   Comment, %% Line 3762
																																									    Style)
																																%% Line 3763
																																<_cor122,{'EXIT',{Skip,Reason}}>
																																    when let <_cor73> =
																																	  call 'erlang':'=:='
																																	      (Skip, 'skip')
																																      in  let <_cor74> =
																																	      call 'erlang':'=:='
																																		  (Skip, 'skipped')
																																	  in  let <_cor75> =
																																		  %% Line 3764
																																		  call 'erlang':'=:='
																																		      (Skip, 'auto_skip')
																																	      in  let <_cor76> =
																																		      call 'erlang':'or'
																																			  (_cor74, _cor75)
																																		  in  call 'erlang':'or'
																																			  (_cor73, _cor76) ->
																																    %% Line 3765
																																    apply 'progress'/10
																																	('skip', _cor7, _cor6, _cor5, GrName, Loc, Reason, %% Line 3766
																																							   Time, %% Line 3766
																																								 Comment, %% Line 3766
																																									  Style)
																																%% Line 3767
																																<_cor123,{'EXIT',_X_Pid,{Skip,Reason}}>
																																    when let <_cor77> =
																																	  call 'erlang':'=:='
																																	      (Skip, 'skip')
																																      in  let <_cor78> =
																																	      call 'erlang':'=:='
																																		  (Skip, 'skipped')
																																	  in  call 'erlang':'or'
																																		  (_cor77, _cor78) ->
																																    %% Line 3768
																																    apply 'progress'/10
																																	('skip', _cor7, _cor6, _cor5, GrName, Loc, Reason, %% Line 3769
																																							   Time, %% Line 3769
																																								 Comment, %% Line 3769
																																									  Style)
																																%% Line 3770
																																<_cor124,{'EXIT',_X_Pid,Reason}> when 'true' ->
																																    %% Line 3771
																																    apply 'progress'/10
																																	('failed', _cor7, _cor6, _cor5, GrName, Loc, Reason, %% Line 3772
																																							     Time, %% Line 3772
																																								   Comment, %% Line 3772
																																									    Style)
																																%% Line 3773
																																<_cor125,{'EXIT',Reason}> when 'true' ->
																																    %% Line 3774
																																    apply 'progress'/10
																																	('failed', _cor7, _cor6, _cor5, GrName, Loc, Reason, %% Line 3775
																																							     Time, %% Line 3775
																																								   Comment, %% Line 3775
																																									    Style)
																																%% Line 3776
																																<_cor126,{Fail,Reason}>
																																    when let <_cor79> =
																																	  call 'erlang':'=:='
																																	      (Fail, 'fail')
																																      in  let <_cor80> =
																																	      call 'erlang':'=:='
																																		  (Fail, 'failed')
																																	  in  call 'erlang':'or'
																																		  (_cor79, _cor80) ->
																																    %% Line 3777
																																    apply 'progress'/10
																																	('failed', _cor7, _cor6, _cor5, GrName, Loc, Reason, %% Line 3778
																																							     Time, %% Line 3778
																																								   Comment, %% Line 3778
																																									    Style)
																																%% Line 3779
																																<_cor127,Reason = {'auto_skip',_X_Why}> when 'true' ->
																																    %% Line 3780
																																    apply 'progress'/10
																																	('skip', _cor7, _cor6, _cor5, GrName, Loc, Reason, %% Line 3781
																																							   Time, %% Line 3781
																																								 Comment, %% Line 3781
																																									  Style)
																																%% Line 3782
																																<_cor128,{Skip,Reason}>
																																    when let <_cor81> =
																																	  call 'erlang':'=:='
																																	      (Skip, 'skip')
																																      in  let <_cor82> =
																																	      call 'erlang':'=:='
																																		  (Skip, 'skipped')
																																	  in  call 'erlang':'or'
																																		  (_cor81, _cor82) ->
																																    %% Line 3783
																																    apply 'progress'/10
																																	('skip', _cor7, _cor6, _cor5, GrName, Loc, Reason, %% Line 3784
																																							   Time, %% Line 3784
																																								 Comment, %% Line 3784
																																									  Style)
																																%% Line 3785
																																<_cor129,_cor130>
																																    when let <_cor131> =
																																	  call 'erlang':'=:='
																																	      (_cor129, Time)
																																      in  let <_cor132> =
																																	      call 'erlang':'=:='
																																		  (_cor130, RetVal)
																																	  in  call 'erlang':'and'
																																		  (_cor131, _cor132) ->
																																    %% Line 3786
																																    case DetectedFail of
																																      %% Line 3787
																																      <[]> when 'true' ->
																																	  %% Line 3788
																																	  apply 'progress'/10
																																	      ('ok', _cor7, _cor6, _cor5, GrName, Loc, RetVal, %% Line 3789
																																							       Time, %% Line 3789
																																								     Comment, %% Line 3789
																																									      Style)
																																      %% Line 3791
																																      <Reason> when 'true' ->
																																	  %% Line 3792
																																	  apply 'progress'/10
																																	      ('failed', _cor7, _cor6, _cor5, GrName, Loc, Reason, %% Line 3793
																																								   Time, %% Line 3793
																																									 Comment, %% Line 3793
																																										  Style)
																																    end
																																( <_fol2046,_fol2047> when 'true' ->
																																      let <_cor84> = {_fol2046,_fol2047}
																																      in  primop 'match_fail'
																																	      ({'case_clause',_cor84})
																																  -| ['compiler_generated'] )
																															      end
																															  in  do  %% Line 3799
																																  case <_cor3,_cor85> of
																																    %% Line 3800
																																    <'skip_init',_cor133> when 'true' ->
																																	'ok'
																																    %% Line 3802
																																    <_cor134,'ok'> when 'true' ->
																																	let <_cor87> =
																																	    %% Line 3803
																																	    call 'erlang':'get'
																																		('test_server_ok')
																																	in  let <_cor88> =
																																		%% Line 3803
																																		call 'erlang':'+'
																																		    (_cor87, 1)
																																	    in  %% Line 3803
																																		call 'erlang':'put'
																																		    ('test_server_ok', _cor88)
																																    %% Line 3804
																																    <_cor135,'failed'> when 'true' ->
																																	let <_cor89> =
																																	    %% Line 3805
																																	    call 'erlang':'get'
																																		('test_server_failed')
																																	in  let <_cor90> =
																																		%% Line 3805
																																		call 'erlang':'+'
																																		    (_cor89, 1)
																																	    in  %% Line 3805
																																		call 'erlang':'put'
																																		    ('test_server_failed', _cor90)
																																    %% Line 3806
																																    <_cor136,'skip'> when 'true' ->
																																	%% Line 3807
																																	case call 'erlang':'get'
																																		 ('test_server_skipped') of
																																	  <{US,AS}> when 'true' ->
																																	      let <_cor92> =
																																		  %% Line 3808
																																		  call 'erlang':'+'
																																		      (US, 1)
																																	      in  %% Line 3808
																																		  call 'erlang':'put'
																																		      ('test_server_skipped', {_cor92,AS})
																																	  ( <_cor91> when 'true' ->
																																		primop 'match_fail'
																																		    ({'badmatch',_cor91})
																																	    -| ['compiler_generated'] )
																																	end
																																    %% Line 3809
																																    <_cor137,'auto_skip'> when 'true' ->
																																	%% Line 3810
																																	case call 'erlang':'get'
																																		 ('test_server_skipped') of
																																	  <{US,AS}> when 'true' ->
																																	      let <_cor94> =
																																		  %% Line 3811
																																		  call 'erlang':'+'
																																		      (AS, 1)
																																	      in  %% Line 3811
																																		  call 'erlang':'put'
																																		      ('test_server_skipped', {US,_cor94})
																																	  ( <_cor93> when 'true' ->
																																		primop 'match_fail'
																																		    ({'badmatch',_cor93})
																																	    -| ['compiler_generated'] )
																																	end
																																    ( <_fol2048,_fol2049> when 'true' ->
																																	  let <_cor95> = {_fol2048,_fol2049}
																																	  in  primop 'match_fail'
																																		  ({'case_clause',_cor95})
																																      -| ['compiler_generated'] )
																																  end
																																  do  %% Line 3815
																																      case call 'erlang':'self'
																																	       () of
																																	%% Line 3816
																																	<_cor138>
																																	    when call 'erlang':'=:='
																																		  (_cor138,
																																		   _cor0) ->
																																	    do  %% Line 3817
																																		case call 'test_server_sup':'framework_call'
																																			 ('warn', ['processes'], 'true') of
																																		  %% Line 3818
																																		  <'true'> when 'true' ->
																																		      %% Line 3819
																																		      case <> of
																																			<>
																																			    when call 'erlang':'<'
																																				  (ProcsBefore,
																																				   ProcsAfter) ->
																																			    let <_cor96> =
																																				%% Line 3822
																																				call 'erlang':'-'
																																				    (ProcsAfter, ProcsBefore)
																																			    in  %% Line 3820
																																				apply 'print'/3
																																				    ('minor', %% Line 3821
																																					      [87|[65|[82|[78|[73|[78|[71|[58|[32|[126|[119|[32|[109|[111|[114|[101|[32|[112|[114|[111|[99|[101|[115|[115|[101|[115|[32|[105|[110|[32|[115|[121|[115|[116|[101|[109|[32|[97|[102|[116|[101|[114|[32|[116|[101|[115|[116|[32|[99|[97|[115|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 3822
																																																																										   [_cor96|[]])
																																			%% Line 3823
																																			<>
																																			    when call 'erlang':'>'
																																				  (ProcsBefore,
																																				   ProcsAfter) ->
																																			    let <_cor97> =
																																				%% Line 3826
																																				call 'erlang':'-'
																																				    (ProcsBefore, ProcsAfter)
																																			    in  %% Line 3824
																																				apply 'print'/3
																																				    ('minor', %% Line 3825
																																					      [87|[65|[82|[78|[73|[78|[71|[58|[32|[126|[119|[32|[108|[101|[115|[115|[32|[112|[114|[111|[99|[101|[115|[115|[101|[115|[32|[105|[110|[32|[115|[121|[115|[116|[101|[109|[32|[97|[102|[116|[101|[114|[32|[116|[101|[115|[116|[32|[99|[97|[115|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 3826
																																																																										   [_cor97|[]])
																																			%% Line 3827
																																			<> when 'true' ->
																																			    'ok'
																																		      end
																																		  %% Line 3829
																																		  <'false'> when 'true' ->
																																		      'ok'
																																		  ( <_cor98> when 'true' ->
																																			primop 'match_fail'
																																			    ({'case_clause',_cor98})
																																		    -| ['compiler_generated'] )
																																		end
																																		%% Line 3832
																																		case call 'test_server_sup':'framework_call'
																																			 ('warn', ['nodes'], 'true') of
																																		  %% Line 3833
																																		  <'true'> when 'true' ->
																																		      let <_cor99> =
																																			  catch
																																			      %% Line 3834
																																			      apply 'controller_call'/1
																																				  ('kill_slavenodes')
																																		      in  %% Line 3834
																																			  case _cor99 of
																																			    %% Line 3835
																																			    <Exit = {'EXIT',_cor139}> when 'true' ->
																																				%% Line 3836
																																				apply 'print'/3
																																				    ('minor', %% Line 3837
																																					      [87|[65|[82|[78|[73|[78|[71|[58|[32|[84|[104|[101|[114|[101|[32|[109|[105|[103|[104|[116|[32|[98|[101|[32|[115|[108|[97|[118|[101|[110|[111|[100|[101|[115|[32|[108|[101|[102|[116|[32|[105|[110|[32|[116|[104|[101|[32|[115|[121|[115|[116|[101|[109|[46|[32|[73|[32|[116|[114|[105|[101|[100|[32|[116|[111|[32|[107|[105|[108|[108|[32|[116|[104|[101|[109|[44|[32|[98|[117|[116|[32|[73|[32|[102|[97|[105|[108|[101|[100|[58|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 3839
																																																																																																							       [Exit|[]])
																																			    %% Line 3840
																																			    <[]> when 'true' ->
																																				'ok'
																																			    %% Line 3841
																																			    <List> when 'true' ->
																																				let <_cor100> =
																																				    %% Line 3845
																																				    call 'erlang':'length'
																																					(List)
																																				in  %% Line 3842
																																				    apply 'print'/3
																																					('minor', [87|[65|[82|[78|[73|[78|[71|[58|[32|[126|[119|[32|[115|[108|[97|[118|[101|[32|[110|[111|[100|[101|[115|[32|[105|[110|[32|[115|[121|[115|[116|[101|[109|[32|[97|[102|[116|[101|[114|[32|[116|[101|[115|[116|[99|[97|[115|[101|[46|[32|[84|[114|[105|[101|[100|[32|[116|[111|[32|[107|[105|[108|[108|[101|[100|[32|[116|[104|[101|[109|[46|[126|[110|[32|[32|[32|[32|[32|[32|[32|[32|[32|[78|[97|[109|[101|[115|[58|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 3845
																																																																																																					 [_cor100|[List|[]]])
																																			  end
																																		  %% Line 3847
																																		  <'false'> when 'true' ->
																																		      'ok'
																																		  ( <_cor104> when 'true' ->
																																			primop 'match_fail'
																																			    ({'case_clause',_cor104})
																																		    -| ['compiler_generated'] )
																																		end
																																	%% Line 3850
																																	<_cor140> when 'true' ->
																																	    'ok'
																																      end
																																      do  %% Line 3856
																																	  case <> of
																																	    <>
																																		when call 'erlang':'is_number'
																																		      (Time) ->
																																		let <_cor106> =
																																		    %% Line 3857
																																		    call 'erlang':'get'
																																			('test_server_total_time')
																																		in  let <_cor107> =
																																			%% Line 3857
																																			call 'erlang':'+'
																																			    (_cor106, Time)
																																		    in  %% Line 3857
																																			call 'erlang':'put'
																																			    ('test_server_total_time', _cor107)
																																	    %% Line 3858
																																	    <> when 'true' ->
																																		'ok'
																																	  end
																																	  do  %% Line 3861
																																	      call 'test_server_sup':'check_new_crash_dumps'
																																		  ()
																																	      do  %% Line 3865
																																		  case apply 'is_io_buffered'/0
																																			   () of
																																		    %% Line 3866
																																		    <'false'> when 'true' ->
																																			'ok'
																																		    %% Line 3868
																																		    <'true'> when 'true' ->
																																			do  %% Line 3869
																																			    call 'test_server_io':'end_transaction'
																																				()
																																			    let <_cor109> =
																																				%% Line 3870
																																				call 'erlang':'self'
																																				    ()
																																			    in  let <_cor108> =
																																				    %% Line 3871
																																				    case <> of
																																				      <>
																																					  when call 'erlang':'=:='
																																						(_cor85,
																																						 'skip') ->
																																					  'skipped'
																																				      <>
																																					  when call 'erlang':'=:='
																																						(_cor85,
																																						 'auto_skip') ->
																																					  'skipped'
																																				      <> when 'true' ->
																																					  _cor85
																																				    end
																																				in  %% Line 3870
																																				    call 'erlang':'!'
																																					(_cor0, {'finished',_cor8,_cor109,_cor7,_cor6,_cor5,_cor108,%% Line 3871
																																												    {Time,RetVal,Opts}})
																																		    ( <_cor110> when 'true' ->
																																			  primop 'match_fail'
																																			      ({'case_clause',_cor110})
																																		      -| ['compiler_generated'] )
																																		  end
																																		  %% Line 3873
																																		  {Time,RetVal,Opts}
																										      ( <_cor68> when 'true' ->
																											    primop 'match_fail'
																												({'badmatch',_cor68})
																											-| ['compiler_generated'] )
																										    end
																									    ( <_cor65> when 'true' ->
																										  primop 'match_fail'
																										      ({'badmatch',_cor65})
																									      -| ['compiler_generated'] )
																									  end
														  ( <_cor45> when 'true' ->
															primop 'match_fail'
															    ({'badmatch',_cor45})
														    -| ['compiler_generated'] )
														end
'do_unless_parallel'/2 =
    %% Line 3880
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Main,Action>
	      when call 'erlang':'is_function'
		    (Action,
		     0) ->
	      %% Line 3881
	      case call 'erlang':'self'
		       () of
		%% Line 3882
		<_cor5>
		    when call 'erlang':'=:='
			  (_cor5,
			   Main) ->
		    apply Action
			()
		%% Line 3883
		<_cor6> when 'true' ->
		    'ok'
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'do_unless_parallel',2}}] )
	    -| ['compiler_generated'] )
	end
'num2str'/1 =
    %% Line 3886
    fun (_cor0) ->
	case _cor0 of
	  <0> when 'true' ->
	      []
	  %% Line 3887
	  <N> when 'true' ->
	      call 'erlang':'integer_to_list'
		  (N)
	end
'progress'/10 =
    %% Line 3897
    fun (_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor9,_cor8,_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <'skip',CaseNum,Mod,Func,GrName,Loc,Reason,Time,%% Line 3898
							  Comment,%% Line 3898
								  {St0,St1}> when 'true' ->
	      let <_cor11> =
		  %% Line 3901
		  ( fun () ->
			{[35|[70|[70|[65|[54|[52|[68]]]]]]],'auto_skip','auto_skipped'}
		    -| [{'id',{0,0,'-progress/10-fun-0-'}}] )
	      in  let <_cor10> =
		      %% Line 3902
		      ( fun () ->
			    {[35|[70|[70|[56|[48|[48|[48]]]]]]],'skip','skipped'}
			-| [{'id',{0,0,'-progress/10-fun-1-'}}] )
		  in  %% Line 3899
		      case %% Line 3900
			   apply 'if_auto_skip'/3
			       (Reason, _cor11, _cor10) of
			<{Reason1,{Color,Ret,ReportTag}}> when 'true' ->
			    do  %% Line 3903
				apply 'print'/3
				    ('major', [61|[114|[101|[115|[117|[108|[116|[32|[32|[32|[32|[32|[32|[32|[32|[126|[119|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]], [ReportTag|[Reason1|[]]])
				let <_cor13> =
				    %% Line 3905
				    call 'erlang':'get'
					('test_server_cases')
				in  let <_cor14> =
					%% Line 3905
					apply 'get_info_str'/4
					    (Mod, Func, CaseNum, _cor13)
				    in  do  %% Line 3904
					    apply 'print'/3
						(1, [42|[42|[42|[32|[83|[75|[73|[80|[80|[69|[68|[32|[126|[116|[115|[32|[42|[42|[42]]]]]]]]]]]]]]]]]]], %% Line 3905
																		       [_cor14|[]])
					    do  %% Line 3906
						call 'test_server_sup':'framework_call'
						    ('report', ['tc_done'|[{Mod,{Func,GrName},%% Line 3907
											      {ReportTag,Reason1}}|%% Line 3907
														   []]])
						let <ReasonStr> =
						    %% Line 3908
						    apply 'reason_to_string'/1
							(Reason1)
						in  let <_cor22> =
							%% Line 3909
							( letrec
							      'lc$^0'/1 =
								  fun (_cor19) ->
								      case _cor19 of
									<[%% Line 3910
									  S|_cor17]> when 'true' ->
									    let <_cor20> =
										call 'string':'strip'
										    (S, 'left')
									    in  let <_cor21> =
										    %% Line 3910
										    apply 'lc$^0'/1
											(_cor17)
										in  ( [_cor20|_cor21]
										      -| ['compiler_generated'] )
									<[]> when 'true' ->
									    []
									( <_cor19> when 'true' ->
									      ( primop 'match_fail'
										    ({'function_clause',_cor19})
										-| [{'function_name',{'lc$^0',1}}] )
									  -| ['compiler_generated'] )
								      end
							  in  let <_cor18> =
								  %% Line 3910
								  call 'string':'tokens'
								      (ReasonStr, [10])
							      in  apply 'lc$^0'/1
								      (_cor18)
							  -| ['list_comprehension'] )
						    in  let <ReasonStr1> =
							    %% Line 3909
							    call 'lists':'flatten'
								(_cor22)
							in  let <_cor26> =
								%% Line 3912
								case <> of
								  <>
								      when try
									    let <_cor24> =
										call 'erlang':'length'
										    (ReasonStr1)
									    in  call 'erlang':'>'
										    (_cor24, 80)
									of <Try> ->
									    Try
									catch <T,R> ->
									    'false' ->
								      let <_cor25> =
									  %% Line 3913
									  call 'string':'substr'
									      (ReasonStr1, 1, 77)
								      in  %% Line 3913
									  call 'erlang':'++'
									      (_cor25, [46|[46|[46]]])
								  %% Line 3914
								  <> when 'true' ->
								      %% Line 3915
								      ReasonStr1
								end
							    in  let <_cor32> =
								    %% Line 3917
								    case Comment of
								      %% Line 3918
								      <[]> when 'true' ->
									  []
								      %% Line 3919
								      <_cor149> when 'true' ->
									  let <_cor30> =
									      apply 'xhtml'/2
										  ([60|[98|[114|[62|[40]]]]], [60|[98|[114|[32|[47|[62|[40]]]]]]])
									  in  let <_cor28> =
										  apply 'to_string'/1
										      (Comment)
									      in  let <_cor29> =
										      call 'erlang':'++'
											  (_cor28, [41])
										  in  call 'erlang':'++'
											  (_cor30, _cor29)
								    end
								in  let <_cor34> =
									%% Line 3922
									call 'erlang':'++'
									    (St1, [60|[47|[116|[100|[62|[60|[116|[100|[62|[60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34|[126|[116|[115|[34|[62|[83|[75|[73|[80|[80|[69|[68|[60|[47|[102|[111|[110|[116|[62|[60|[47|[116|[100|[62|[60|[116|[100|[62|[126|[116|[115|[126|[116|[115|[60|[47|[116|[100|[62|[60|[47|[116|[114|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
								    in  let <_cor35> =
									    %% Line 3922
									    call 'erlang':'++'
										([126|[46|[51|[102|[115]]]]], _cor34)
									in  let <_cor36> =
										%% Line 3922
										call 'erlang':'++'
										    (St0, _cor35)
									    in  let <_cor37> =
										    %% Line 3922
										    [60|[116|[100|[62|_cor36]]]]
										in  do  %% Line 3921
											apply 'print'/3
											    ('html', _cor37, %% Line 3925
													     [Time|[Color|[_cor26|[_cor32|[]]]]])
											let <FormatLoc> =
											    %% Line 3926
											    call 'test_server_sup':'format_loc'
												(Loc)
											in  do  %% Line 3927
												apply 'print'/3
												    ('minor', [61|[61|[61|[32|[108|[111|[99|[97|[116|[105|[111|[110|[32|[126|[116|[115]]]]]]]]]]]]]]]], [FormatLoc|[]])
												do  %% Line 3928
												    apply 'print'/3
													('minor', [61|[61|[61|[32|[114|[101|[97|[115|[111|[110|[32|[61|[32|[126|[116|[115]]]]]]]]]]]]]]]], [ReasonStr1|[]])
												    %% Line 3929
												    Ret
			( <_cor12> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor12})
			  -| ['compiler_generated'] )
		      end
	  %% Line 3931
	  <'failed',CaseNum,Mod,Func,GrName,Loc,'timetrap_timeout',T,%% Line 3932
								     Comment0,%% Line 3932
									      {St0,St1}> when 'true' ->
	      do  %% Line 3933
		  apply 'print'/3
		      ('major', [61|[114|[101|[115|[117|[108|[116|[32|[32|[32|[32|[32|[32|[32|[32|[102|[97|[105|[108|[101|[100|[58|[32|[116|[105|[109|[101|[111|[117|[116|[44|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Loc|[]])
		  let <_cor39> =
		      %% Line 3935
		      call 'erlang':'get'
			  ('test_server_cases')
		  in  let <_cor40> =
			  %% Line 3935
			  apply 'get_info_str'/4
			      (Mod, Func, CaseNum, _cor39)
		      in  do  %% Line 3934
			      apply 'print'/3
				  (1, [42|[42|[42|[32|[70|[65|[73|[76|[69|[68|[32|[126|[116|[115|[32|[42|[42|[42]]]]]]]]]]]]]]]]]], %% Line 3935
																    [_cor40|[]])
			      do  %% Line 3936
				  call 'test_server_sup':'framework_call'
				      ('report', %% Line 3937
						 ['tc_done'|[{Mod,{Func,GrName},%% Line 3938
										{'failed','timetrap_timeout'}}|%% Line 3938
													       []]])
				  let <_cor41> =
				      %% Line 3939
				      apply 'get_last_loc'/1
					  (Loc)
				  in  let <FormatLastLoc> =
					  %% Line 3939
					  call 'test_server_sup':'format_loc'
					      (_cor41)
				      in  let <ErrorReason> =
					      %% Line 3940
					      call 'io_lib':'format'
						  ([123|[116|[105|[109|[101|[116|[114|[97|[112|[95|[116|[105|[109|[101|[111|[117|[116|[44|[126|[116|[115|[125]]]]]]]]]]]]]]]]]]]]]], [FormatLastLoc|[]])
					  in  let <_cor50> =
						  %% Line 3942
						  case Comment0 of
						    %% Line 3943
						    <[]> when 'true' ->
							let <_cor44> =
							    call 'erlang':'++'
								(ErrorReason, [60|[47|[102|[111|[110|[116|[62]]]]]]])
							in  call 'erlang':'++'
								([60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34|[114|[101|[100|[34|[62]]]]]]]]]]]]]]]]]], _cor44)
						    %% Line 3944
						    <_cor150> when 'true' ->
							let <_cor46> =
							    %% Line 3945
							    apply 'xhtml'/2
								([60|[47|[102|[111|[110|[116|[62|[60|[98|[114|[62]]]]]]]]]]], [60|[47|[102|[111|[110|[116|[62|[60|[98|[114|[32|[47|[62]]]]]]]]]]]]])
							in  let <_cor45> =
								%% Line 3945
								apply 'to_string'/1
								    (Comment0)
							    in  let <_cor47> =
								    %% Line 3945
								    call 'erlang':'++'
									(_cor46, _cor45)
								in  let <_cor48> =
									call 'erlang':'++'
									    (ErrorReason, _cor47)
								    in  call 'erlang':'++'
									    ([60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34|[114|[101|[100|[34|[62]]]]]]]]]]]]]]]]]], _cor48)
						  end
					      in  let <_cor53> =
						      %% Line 3948
						      call 'erlang':'++'
							  (St1, [60|[47|[116|[100|[62|[60|[116|[100|[62|[60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34|[114|[101|[100|[34|[62|[70|[65|[73|[76|[69|[68|[60|[47|[102|[111|[110|[116|[62|[60|[47|[116|[100|[62|[60|[116|[100|[62|[126|[116|[115|[60|[47|[116|[100|[62|[60|[47|[116|[114|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
						  in  let <_cor54> =
							  %% Line 3948
							  call 'erlang':'++'
							      ([126|[46|[51|[102|[115]]]]], _cor53)
						      in  let <_cor55> =
							      %% Line 3948
							      call 'erlang':'++'
								  (St0, _cor54)
							  in  let <_cor56> =
								  %% Line 3948
								  [60|[116|[100|[62|_cor55]]]]
							      in  let <_cor52> =
								      %% Line 3951
								      call 'erlang':'/'
									  (T, 1000)
								  in  do  %% Line 3947
									  apply 'print'/3
									      ('html', _cor56, %% Line 3951
											       [_cor52|[_cor50|[]]])
									  let <FormatLoc> =
									      %% Line 3952
									      call 'test_server_sup':'format_loc'
										  (Loc)
									  in  do  %% Line 3953
										  apply 'print'/3
										      ('minor', [61|[61|[61|[32|[108|[111|[99|[97|[116|[105|[111|[110|[32|[126|[116|[115]]]]]]]]]]]]]]]], [FormatLoc|[]])
										  do  %% Line 3954
										      apply 'print'/3
											  ('minor', [61|[61|[61|[32|[114|[101|[97|[115|[111|[110|[32|[61|[32|[116|[105|[109|[101|[116|[114|[97|[112|[32|[116|[105|[109|[101|[111|[117|[116]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
										      %% Line 3955
										      'failed'
	  %% Line 3957
	  <'failed',CaseNum,Mod,Func,GrName,Loc,{'testcase_aborted',Reason},_X_T,%% Line 3958
										 Comment0,%% Line 3958
											  {St0,St1}> when 'true' ->
	      do  %% Line 3959
		  apply 'print'/3
		      ('major', [61|[114|[101|[115|[117|[108|[116|[32|[32|[32|[32|[32|[32|[32|[32|[102|[97|[105|[108|[101|[100|[58|[32|[116|[101|[115|[116|[99|[97|[115|[101|[95|[97|[98|[111|[114|[116|[101|[100|[44|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Loc|[]])
		  let <_cor58> =
		      %% Line 3961
		      call 'erlang':'get'
			  ('test_server_cases')
		  in  let <_cor59> =
			  %% Line 3961
			  apply 'get_info_str'/4
			      (Mod, Func, CaseNum, _cor58)
		      in  do  %% Line 3960
			      apply 'print'/3
				  (1, [42|[42|[42|[32|[70|[65|[73|[76|[69|[68|[32|[126|[116|[115|[32|[42|[42|[42]]]]]]]]]]]]]]]]]], %% Line 3961
																    [_cor59|[]])
			      do  %% Line 3962
				  call 'test_server_sup':'framework_call'
				      ('report', %% Line 3963
						 ['tc_done'|[{Mod,{Func,GrName},%% Line 3964
										{'failed','testcase_aborted'}}|%% Line 3964
													       []]])
				  let <_cor60> =
				      %% Line 3965
				      apply 'get_last_loc'/1
					  (Loc)
				  in  let <FormatLastLoc> =
					  %% Line 3965
					  call 'test_server_sup':'format_loc'
					      (_cor60)
				      in  let <ErrorReason> =
					      %% Line 3966
					      call 'io_lib':'format'
						  ([123|[116|[101|[115|[116|[99|[97|[115|[101|[95|[97|[98|[111|[114|[116|[101|[100|[44|[126|[116|[115|[125]]]]]]]]]]]]]]]]]]]]]], [FormatLastLoc|[]])
					  in  let <_cor69> =
						  %% Line 3968
						  case Comment0 of
						    %% Line 3969
						    <[]> when 'true' ->
							let <_cor63> =
							    call 'erlang':'++'
								(ErrorReason, [60|[47|[102|[111|[110|[116|[62]]]]]]])
							in  call 'erlang':'++'
								([60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34|[114|[101|[100|[34|[62]]]]]]]]]]]]]]]]]], _cor63)
						    %% Line 3970
						    <_cor151> when 'true' ->
							let <_cor65> =
							    %% Line 3971
							    apply 'xhtml'/2
								([60|[47|[102|[111|[110|[116|[62|[60|[98|[114|[62]]]]]]]]]]], [60|[47|[102|[111|[110|[116|[62|[60|[98|[114|[32|[47|[62]]]]]]]]]]]]])
							in  let <_cor64> =
								%% Line 3971
								apply 'to_string'/1
								    (Comment0)
							    in  let <_cor66> =
								    %% Line 3971
								    call 'erlang':'++'
									(_cor65, _cor64)
								in  let <_cor67> =
									call 'erlang':'++'
									    (ErrorReason, _cor66)
								    in  call 'erlang':'++'
									    ([60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34|[114|[101|[100|[34|[62]]]]]]]]]]]]]]]]]], _cor67)
						  end
					      in  let <_cor71> =
						      %% Line 3974
						      call 'erlang':'++'
							  (St1, [60|[47|[116|[100|[62|[60|[116|[100|[62|[60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34|[114|[101|[100|[34|[62|[70|[65|[73|[76|[69|[68|[60|[47|[102|[111|[110|[116|[62|[60|[47|[116|[100|[62|[60|[116|[100|[62|[126|[116|[115|[60|[47|[116|[100|[62|[60|[47|[116|[114|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
						  in  let <_cor72> =
							  %% Line 3974
							  [100|[105|[101|[100|_cor71]]]]
						      in  let <_cor73> =
							      %% Line 3974
							      call 'erlang':'++'
								  (St0, _cor72)
							  in  let <_cor74> =
								  %% Line 3974
								  [60|[116|[100|[62|_cor73]]]]
							      in  do  %% Line 3973
								      apply 'print'/3
									  ('html', _cor74, %% Line 3977
											   [_cor69|[]])
								      let <FormatLoc> =
									  %% Line 3978
									  call 'test_server_sup':'format_loc'
									      (Loc)
								      in  do  %% Line 3979
									      apply 'print'/3
										  ('minor', [61|[61|[61|[32|[108|[111|[99|[97|[116|[105|[111|[110|[32|[126|[116|[115]]]]]]]]]]]]]]]], [FormatLoc|[]])
									      do  %% Line 3980
										  apply 'print'/3
										      ('minor', [61|[61|[61|[32|[114|[101|[97|[115|[111|[110|[32|[61|[32|[123|[116|[101|[115|[116|[99|[97|[115|[101|[95|[97|[98|[111|[114|[116|[101|[100|[44|[126|[112|[125]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Reason|[]])
										  %% Line 3981
										  'failed'
	  %% Line 3983
	  <'failed',CaseNum,Mod,Func,GrName,'unknown',Reason,Time,%% Line 3984
								  Comment0,%% Line 3984
									   {St0,St1}> when 'true' ->
	      do  %% Line 3985
		  apply 'print'/3
		      ('major', [61|[114|[101|[115|[117|[108|[116|[32|[32|[32|[32|[32|[32|[32|[32|[102|[97|[105|[108|[101|[100|[58|[32|[126|[112|[44|[32|[126|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Reason|['unknown']])
		  let <_cor76> =
		      %% Line 3987
		      call 'erlang':'get'
			  ('test_server_cases')
		  in  let <_cor77> =
			  %% Line 3987
			  apply 'get_info_str'/4
			      (Mod, Func, CaseNum, _cor76)
		      in  do  %% Line 3986
			      apply 'print'/3
				  (1, [42|[42|[42|[32|[70|[65|[73|[76|[69|[68|[32|[126|[116|[115|[32|[42|[42|[42]]]]]]]]]]]]]]]]]], %% Line 3987
																    [_cor77|[]])
			      do  %% Line 3988
				  call 'test_server_sup':'framework_call'
				      ('report', ['tc_done'|[{Mod,{Func,GrName},%% Line 3989
										{'failed',Reason}}|%% Line 3989
												   []]])
				  let <_cor78> =
				      %% Line 3990
				      case <> of
					<>
					    when call 'erlang':'is_float'
						  (Time) ->
					    [126|[46|[51|[102|[115]]]]]
					%% Line 3991
					<> when 'true' ->
					    [126|[119]]
				      end
				  in  let <TimeStr> =
					  %% Line 3990
					  call 'io_lib':'format'
					      (_cor78, %% Line 3992
						       [Time|[]])
				      in  let <_cor80> =
					      %% Line 3993
					      call 'io_lib':'format'
						  ([126|[112]], [Reason|[]])
					  in  let <ErrorReason> =
						  %% Line 3993
						  call 'lists':'flatten'
						      (_cor80)
					      in  let <_cor88> =
						      %% Line 3994
						      ( letrec
							    'lc$^1'/1 =
								fun (_cor85) ->
								    case _cor85 of
								      <[%% Line 3995
									S|_cor83]> when 'true' ->
									  let <_cor86> =
									      call 'string':'strip'
										  (S, 'left')
									  in  let <_cor87> =
										  %% Line 3995
										  apply 'lc$^1'/1
										      (_cor83)
									      in  ( [_cor86|_cor87]
										    -| ['compiler_generated'] )
								      <[]> when 'true' ->
									  []
								      ( <_cor85> when 'true' ->
									    ( primop 'match_fail'
										  ({'function_clause',_cor85})
									      -| [{'function_name',{'lc$^1',1}}] )
									-| ['compiler_generated'] )
								    end
							in  let <_cor84> =
								%% Line 3995
								call 'string':'tokens'
								    (ErrorReason, [10])
							    in  apply 'lc$^1'/1
								    (_cor84)
							-| ['list_comprehension'] )
						  in  let <ErrorReason1> =
							  %% Line 3994
							  call 'lists':'flatten'
							      (_cor88)
						      in  let <_cor92> =
							      %% Line 3997
							      case <> of
								<>
								    when try
									  let <_cor90> =
									      call 'erlang':'length'
										  (ErrorReason1)
									  in  call 'erlang':'>'
										  (_cor90, 63)
								      of <Try> ->
									  Try
								      catch <T,R> ->
									  'false' ->
								    let <_cor91> =
									%% Line 3998
									call 'string':'substr'
									    (ErrorReason1, 1, 60)
								    in  %% Line 3998
									call 'erlang':'++'
									    (_cor91, [46|[46|[46]]])
								%% Line 3999
								<> when 'true' ->
								    %% Line 4000
								    ErrorReason1
							      end
							  in  let <_cor100> =
								  %% Line 4003
								  case Comment0 of
								    %% Line 4004
								    <[]> when 'true' ->
									let <_cor94> =
									    call 'erlang':'++'
										(_cor92, [60|[47|[102|[111|[110|[116|[62]]]]]]])
									in  call 'erlang':'++'
										([60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34|[114|[101|[100|[34|[62]]]]]]]]]]]]]]]]]], _cor94)
								    %% Line 4005
								    <_cor152> when 'true' ->
									let <_cor96> =
									    %% Line 4006
									    apply 'xhtml'/2
										([60|[47|[102|[111|[110|[116|[62|[60|[98|[114|[62]]]]]]]]]]], [60|[47|[102|[111|[110|[116|[62|[60|[98|[114|[32|[47|[62]]]]]]]]]]]]])
									in  let <_cor95> =
										%% Line 4007
										apply 'to_string'/1
										    (Comment0)
									    in  let <_cor97> =
										    %% Line 4006
										    call 'erlang':'++'
											(_cor96, _cor95)
										in  let <_cor98> =
											call 'erlang':'++'
											    (_cor92, _cor97)
										    in  call 'erlang':'++'
											    ([60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34|[114|[101|[100|[34|[62]]]]]]]]]]]]]]]]]], _cor98)
								  end
							      in  let <_cor102> =
								      %% Line 4010
								      call 'erlang':'++'
									  (St1, [60|[47|[116|[100|[62|[60|[116|[100|[62|[60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34|[114|[101|[100|[34|[62|[70|[65|[73|[76|[69|[68|[60|[47|[102|[111|[110|[116|[62|[60|[47|[116|[100|[62|[60|[116|[100|[62|[126|[116|[115|[60|[47|[116|[100|[62|[60|[47|[116|[114|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
								  in  let <_cor103> =
									  %% Line 4010
									  [126|[116|[115|_cor102]]]
								      in  let <_cor104> =
									      %% Line 4010
									      call 'erlang':'++'
										  (St0, _cor103)
									  in  let <_cor105> =
										  %% Line 4010
										  [60|[116|[100|[62|_cor104]]]]
									      in  do  %% Line 4009
										      apply 'print'/3
											  ('html', _cor105, %% Line 4013
													    [TimeStr|[_cor100|[]]])
										      do  %% Line 4014
											  apply 'print'/3
											      ('minor', [61|[61|[61|[32|[108|[111|[99|[97|[116|[105|[111|[110|[32|[126|[119]]]]]]]]]]]]]]], ['unknown'])
											  %% Line 4015
											  case apply 'format_exception'/1
												   (Reason) of
											    <{FStr,FormattedReason}> when 'true' ->
												let <_cor107> =
												    %% Line 4016
												    call 'erlang':'++'
													([61|[61|[61|[32|[114|[101|[97|[115|[111|[110|[32|[61|[32]]]]]]]]]]]]], FStr)
												in  do  %% Line 4016
													apply 'print'/3
													    ('minor', _cor107, [FormattedReason|[]])
													%% Line 4017
													'failed'
											    ( <_cor106> when 'true' ->
												  primop 'match_fail'
												      ({'badmatch',_cor106})
											      -| ['compiler_generated'] )
											  end
	  %% Line 4019
	  <'failed',CaseNum,Mod,Func,GrName,Loc,Reason,Time,%% Line 4020
							    Comment0,%% Line 4020
								     {St0,St1}> when 'true' ->
	      do  %% Line 4021
		  apply 'print'/3
		      ('major', [61|[114|[101|[115|[117|[108|[116|[32|[32|[32|[32|[32|[32|[32|[32|[102|[97|[105|[108|[101|[100|[58|[32|[126|[112|[44|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Reason|[Loc|[]]])
		  let <_cor108> =
		      %% Line 4023
		      call 'erlang':'get'
			  ('test_server_cases')
		  in  let <_cor109> =
			  %% Line 4023
			  apply 'get_info_str'/4
			      (Mod, Func, CaseNum, _cor108)
		      in  do  %% Line 4022
			      apply 'print'/3
				  (1, [42|[42|[42|[32|[70|[65|[73|[76|[69|[68|[32|[126|[116|[115|[32|[42|[42|[42]]]]]]]]]]]]]]]]]], %% Line 4023
																    [_cor109|[]])
			      do  %% Line 4024
				  call 'test_server_sup':'framework_call'
				      ('report', ['tc_done'|[{Mod,{Func,GrName},%% Line 4025
										{'failed',Reason}}|%% Line 4025
												   []]])
				  let <_cor110> =
				      %% Line 4026
				      case <> of
					<>
					    when call 'erlang':'is_float'
						  (Time) ->
					    [126|[46|[51|[102|[115]]]]]
					%% Line 4027
					<> when 'true' ->
					    [126|[119]]
				      end
				  in  let <TimeStr> =
					  %% Line 4026
					  call 'io_lib':'format'
					      (_cor110, %% Line 4028
							[Time|[]])
				      in  let <_cor115> =
					      %% Line 4030
					      case Comment0 of
						%% Line 4031
						<[]> when 'true' ->
						    []
						%% Line 4032
						<_cor153> when 'true' ->
						    let <_cor113> =
							apply 'xhtml'/2
							    ([60|[98|[114|[62]]]], [60|[98|[114|[32|[47|[62]]]]]])
						    in  let <_cor112> =
							    apply 'to_string'/1
								(Comment0)
							in  call 'erlang':'++'
								(_cor113, _cor112)
					      end
					  in  let <_cor117> =
						  %% Line 4034
						  apply 'get_last_loc'/1
						      (Loc)
					      in  let <FormatLastLoc> =
						      %% Line 4034
						      call 'test_server_sup':'format_loc'
							  (_cor117)
						  in  let <_cor119> =
							  %% Line 4036
							  call 'erlang':'++'
							      (St1, [60|[47|[116|[100|[62|[60|[116|[100|[62|[60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34|[114|[101|[100|[34|[62|[70|[65|[73|[76|[69|[68|[60|[47|[102|[111|[110|[116|[62|[60|[47|[116|[100|[62|[60|[116|[100|[62|[60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34|[114|[101|[100|[34|[62|[126|[116|[115|[60|[47|[102|[111|[110|[116|[62|[126|[116|[115|[60|[47|[116|[100|[62|[60|[47|[116|[114|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
						      in  let <_cor120> =
							      %% Line 4036
							      [126|[116|[115|_cor119]]]
							  in  let <_cor121> =
								  %% Line 4036
								  call 'erlang':'++'
								      (St0, _cor120)
							      in  let <_cor122> =
								      %% Line 4036
								      [60|[116|[100|[62|_cor121]]]]
								  in  do  %% Line 4035
									  apply 'print'/3
									      ('html', _cor122, %% Line 4039
												[TimeStr|[FormatLastLoc|[_cor115|[]]]])
									  let <FormatLoc> =
									      %% Line 4040
									      call 'test_server_sup':'format_loc'
										  (Loc)
									  in  do  %% Line 4041
										  apply 'print'/3
										      ('minor', [61|[61|[61|[32|[108|[111|[99|[97|[116|[105|[111|[110|[32|[126|[116|[115]]]]]]]]]]]]]]]], [FormatLoc|[]])
										  %% Line 4042
										  case apply 'format_exception'/1
											   (Reason) of
										    <{FStr,FormattedReason}> when 'true' ->
											let <_cor125> =
											    %% Line 4043
											    call 'erlang':'++'
												([61|[61|[61|[32|[114|[101|[97|[115|[111|[110|[32|[61|[32]]]]]]]]]]]]], FStr)
											in  do  %% Line 4043
												apply 'print'/3
												    ('minor', _cor125, [FormattedReason|[]])
												%% Line 4044
												'failed'
										    ( <_cor124> when 'true' ->
											  primop 'match_fail'
											      ({'badmatch',_cor124})
										      -| ['compiler_generated'] )
										  end
	  %% Line 4046
	  <'ok',_X_CaseNum,Mod,Func,GrName,_X_Loc,RetVal,Time,%% Line 4047
							      Comment0,%% Line 4047
								       {St0,St1}> when 'true' ->
	      do  %% Line 4048
		  apply 'print'/3
		      ('minor', [115|[117|[99|[99|[101|[115|[115|[102|[117|[108|[108|[121|[32|[99|[111|[109|[112|[108|[101|[116|[101|[100|[32|[116|[101|[115|[116|[32|[99|[97|[115|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
		  do  %% Line 4049
		      call 'test_server_sup':'framework_call'
			  ('report', ['tc_done'|[{Mod,{Func,GrName},'ok'}|[]]])
		      let <_cor133> =
			  %% Line 4051
			  case RetVal of
			    %% Line 4052
			    <{'comment',RetComment}> when 'true' ->
				let <String> =
				    %% Line 4053
				    apply 'to_string'/1
					(RetComment)
				in  let <HtmlCmt> =
					%% Line 4054
					call 'test_server_sup':'framework_call'
					    ('format_comment', %% Line 4055
							       [String|[]], %% Line 4056
									    String)
				    in  do  %% Line 4057
					    apply 'print'/3
						('major', [61|[114|[101|[115|[117|[108|[116|[32|[32|[32|[32|[32|[32|[32|[32|[111|[107|[58|[32|[126|[116|[115]]]]]]]]]]]]]]]]]]]]]], [String|[]])
					    let <_cor128> =
						%% Line 4058
						call 'erlang':'++'
						    (HtmlCmt, [60|[47|[116|[100|[62]]]]])
					    in  %% Line 4058
						[60|[116|[100|[62|_cor128]]]]
			    %% Line 4059
			    <_cor154> when 'true' ->
				do  %% Line 4060
				    apply 'print'/3
					('major', [61|[114|[101|[115|[117|[108|[116|[32|[32|[32|[32|[32|[32|[32|[32|[111|[107]]]]]]]]]]]]]]]]], [])
				    %% Line 4061
				    case Comment0 of
				      %% Line 4062
				      <[]> when 'true' ->
					  [60|[116|[100|[62|[60|[47|[116|[100|[62]]]]]]]]]
				      %% Line 4063
				      <_cor155> when 'true' ->
					  let <_cor129> =
					      apply 'to_string'/1
						  (Comment0)
					  in  let <_cor130> =
						  call 'erlang':'++'
						      (_cor129, [60|[47|[116|[100|[62]]]]])
					      in  [60|[116|[100|[62|_cor130]]]]
				    end
			  end
		      in  do  %% Line 4066
			      apply 'print'/3
				  ('major', [61|[101|[108|[97|[112|[115|[101|[100|[32|[32|[32|[32|[32|[32|[32|[126|[112]]]]]]]]]]]]]]]]], [Time|[]])
			      let <_cor135> =
				  %% Line 4068
				  call 'erlang':'++'
				      (St1, [60|[47|[116|[100|[62|[60|[116|[100|[62|[60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61|[34|[103|[114|[101|[101|[110|[34|[62|[79|[107|[60|[47|[102|[111|[110|[116|[62|[60|[47|[116|[100|[62|[126|[116|[115|[60|[47|[116|[114|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
			      in  let <_cor136> =
				      %% Line 4068
				      call 'erlang':'++'
					  ([126|[46|[51|[102|[115]]]]], _cor135)
				  in  let <_cor137> =
					  %% Line 4068
					  call 'erlang':'++'
					      (St0, _cor136)
				      in  let <_cor138> =
					      %% Line 4068
					      [60|[116|[100|[62|_cor137]]]]
					  in  do  %% Line 4067
						  apply 'print'/3
						      ('html', _cor138, %% Line 4071
									[Time|[_cor133|[]]])
						  do  %% Line 4072
						      apply 'print'/3
							  ('minor', [61|[61|[61|[32|[114|[101|[116|[117|[114|[110|[101|[100|[32|[118|[97|[108|[117|[101|[32|[61|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]], [RetVal|[]])
						      %% Line 4073
						      'ok'
	  ( <_cor148,_cor147,_cor146,_cor145,_cor144,_cor143,_cor142,_cor141,_cor140,_cor139> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor148,_cor147,_cor146,_cor145,_cor144,_cor143,_cor142,_cor141,_cor140,_cor139})
		  -| [{'function_name',{'progress',10}}] )
	    -| ['compiler_generated'] )
	end
'get_fw_mod'/1 =
    %% Line 4078
    fun (_cor0) ->
	%% Line 4079
	case call 'erlang':'get'
		 ('test_server_framework') of
	  %% Line 4080
	  <'undefined'> when 'true' ->
	      %% Line 4081
	      case call 'os':'getenv'
		       ([84|[69|[83|[84|[95|[83|[69|[82|[86|[69|[82|[95|[70|[82|[65|[77|[69|[87|[79|[82|[75]]]]]]]]]]]]]]]]]]]]]) of
		%% Line 4082
		<FW>
		    when let <_cor1> =
			  call 'erlang':'=:='
			      (FW, 'false')
		      in  let <_cor2> =
			      call 'erlang':'=:='
				  (FW, [117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]])
			  in  call 'erlang':'or'
				  (_cor1, _cor2) ->
		    _cor0
		%% Line 4084
		<FW> when 'true' ->
		    %% Line 4085
		    call 'erlang':'list_to_atom'
			(FW)
	      end
	  %% Line 4087
	  <'$none'> when 'true' ->
	      _cor0
	  %% Line 4088
	  <FW> when 'true' ->
	      FW
	end
'fw_name'/1 =
    %% Line 4091
    fun (_cor0) ->
	case _cor0 of
	  <'test_server_ctrl'> when 'true' ->
	      %% Line 4092
	      'test_server'
	  %% Line 4093
	  <Mod> when 'true' ->
	      %% Line 4094
	      case call 'erlang':'get'
		       ('test_server_framework_name') of
		%% Line 4095
		<'undefined'> when 'true' ->
		    %% Line 4096
		    case apply 'get_fw_mod'/1
			     ('undefined') of
		      %% Line 4097
		      <'undefined'> when 'true' ->
			  %% Line 4098
			  Mod
		      %% Line 4099
		      <_cor8>
			  when call 'erlang':'=:='
				(_cor8,
				 Mod) ->
			  %% Line 4100
			  case call 'os':'getenv'
				   ([84|[69|[83|[84|[95|[83|[69|[82|[86|[69|[82|[95|[70|[82|[65|[77|[69|[87|[79|[82|[75|[95|[78|[65|[77|[69]]]]]]]]]]]]]]]]]]]]]]]]]]) of
			    %% Line 4101
			    <FWName>
				when let <_cor1> =
				      call 'erlang':'=:='
					  (FWName, 'false')
				  in  let <_cor2> =
					  call 'erlang':'=:='
					      (FWName, [117|[110|[100|[101|[102|[105|[110|[101|[100]]]]]]]]])
				      in  call 'erlang':'or'
					      (_cor1, _cor2) ->
				%% Line 4102
				Mod
			    %% Line 4103
			    <FWName> when 'true' ->
				%% Line 4104
				call 'erlang':'list_to_atom'
				    (FWName)
			  end
		      %% Line 4106
		      <_cor9> when 'true' ->
			  %% Line 4107
			  Mod
		    end
		%% Line 4109
		<'$none'> when 'true' ->
		    %% Line 4110
		    Mod
		%% Line 4111
		<FWName> when 'true' ->
		    %% Line 4112
		    case apply 'get_fw_mod'/1
			     (Mod) of
		      %% Line 4113
		      <_cor10>
			  when call 'erlang':'=:='
				(_cor10,
				 Mod) ->
			  FWName
		      %% Line 4114
		      <_cor11> when 'true' ->
			  Mod
		    end
	      end
	end
'if_auto_skip'/3 =
    %% Line 4118
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Reason = {'failed',{_cor10,'init_per_testcase',_cor11}},True,_X_False> when 'true' ->
	      let <_cor3> =
		  %% Line 4119
		  apply True
		      ()
	      in  %% Line 4119
		  {Reason,_cor3}
	  %% Line 4120
	  <{'skip',Reason = {'failed',{_cor12,'init_per_testcase',_cor13}}},True,_X_False> when 'true' ->
	      let <_cor4> =
		  %% Line 4121
		  apply True
		      ()
	      in  %% Line 4121
		  {Reason,_cor4}
	  %% Line 4122
	  <{'auto_skip',Reason},True,_X_False> when 'true' ->
	      let <_cor5> =
		  %% Line 4123
		  apply True
		      ()
	      in  %% Line 4123
		  {Reason,_cor5}
	  %% Line 4124
	  <Reason,_X_True,False> when 'true' ->
	      let <_cor6> =
		  %% Line 4125
		  apply False
		      ()
	      in  %% Line 4125
		  {Reason,_cor6}
	end
'update_skip_counters'/2 =
    %% Line 4127
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{_X_T,Pat,_X_Opts},{US,AS}> when 'true' ->
	      let <_cor5> =
		  %% Line 4128
		  ( fun () ->
			let <_cor4> =
			    call 'erlang':'+'
				(AS, 1)
			in  {US,_cor4}
		    -| [{'id',{0,0,'-update_skip_counters/2-fun-0-'}}] )
	      in  let <_cor3> =
		      %% Line 4128
		      ( fun () ->
			    let <_cor2> =
				call 'erlang':'+'
				    (US, 1)
			    in  {_cor2,AS}
			-| [{'id',{0,0,'-update_skip_counters/2-fun-1-'}}] )
		  in  %% Line 4128
		      case apply 'if_auto_skip'/3
			       (Pat, _cor5, _cor3) of
			<{_cor14,Result}> when 'true' ->
			    %% Line 4129
			    Result
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
	  %% Line 4130
	  <Pat,{US,AS}> when 'true' ->
	      let <_cor10> =
		  %% Line 4131
		  ( fun () ->
			let <_cor9> =
			    call 'erlang':'+'
				(AS, 1)
			in  {US,_cor9}
		    -| [{'id',{0,0,'-update_skip_counters/2-fun-2-'}}] )
	      in  let <_cor8> =
		      %% Line 4131
		      ( fun () ->
			    let <_cor7> =
				call 'erlang':'+'
				    (US, 1)
			    in  {_cor7,AS}
			-| [{'id',{0,0,'-update_skip_counters/2-fun-3-'}}] )
		  in  %% Line 4131
		      case apply 'if_auto_skip'/3
			       (Pat, _cor10, _cor8) of
			<{_cor15,Result}> when 'true' ->
			    %% Line 4132
			    Result
			( <_cor11> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor11})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'update_skip_counters',2}}] )
	    -| ['compiler_generated'] )
	end
'get_info_str'/4 =
    %% Line 4134
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Mod,Func,0,_X_Cases> when 'true' ->
	      %% Line 4135
	      call 'io_lib':'format'
		  ([126|[119]], [{Mod,Func}|[]])
	  %% Line 4136
	  <_X_Mod,_X_Func,CaseNum,'unknown'> when 'true' ->
	      let <_cor4> =
		  %% Line 4137
		  call 'erlang':'integer_to_list'
		      (CaseNum)
	      in  %% Line 4137
		  call 'erlang':'++'
		      ([116|[101|[115|[116|[32|[99|[97|[115|[101|[32]]]]]]]]]], _cor4)
	  %% Line 4138
	  <_X_Mod,_X_Func,CaseNum,Cases> when 'true' ->
	      let <_cor7> =
		  %% Line 4139
		  call 'erlang':'integer_to_list'
		      (CaseNum)
	      in  let <_cor5> =
		      %% Line 4140
		      call 'erlang':'integer_to_list'
			  (Cases)
		  in  let <_cor6> =
			  %% Line 4140
			  [32|[111|[102|[32|_cor5]]]]
		      in  let <_cor8> =
			      %% Line 4139
			      call 'erlang':'++'
				  (_cor7, _cor6)
			  in  %% Line 4139
			      call 'erlang':'++'
				  ([116|[101|[115|[116|[32|[99|[97|[115|[101|[32]]]]]]]]]], _cor8)
	end
'print_if_known'/3 =
    %% Line 4142
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Known,{SK,AK},{SU,AU}> when 'true' ->
	      let <S,A> =
		  %% Line 4143
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (Known,
			       'unknown') ->
			<SU,AU>
		    %% Line 4144
		    <> when 'true' ->
			<SK,AK>
		  end
	      in  %% Line 4146
		  call 'io_lib':'format'
		      (S, A)
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'print_if_known',3}}] )
	    -| ['compiler_generated'] )
	end
'to_string'/1 =
    %% Line 4148
    fun (_cor0) ->
	case _cor0 of
	  <Term>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor1> =
		  catch
		      %% Line 4149
		      call 'io_lib':'format'
			  ([126|[116|[115]]], [Term|[]])
	      in  %% Line 4149
		  case _cor1 of
		    %% Line 4150
		    <{'EXIT',_cor6}> when 'true' ->
			let <_cor2> =
			    call 'io_lib':'format'
				([126|[112]], [Term|[]])
			in  call 'lists':'flatten'
				(_cor2)
		    %% Line 4151
		    <String> when 'true' ->
			call 'lists':'flatten'
			    (String)
		  end
	  %% Line 4153
	  <Term> when 'true' ->
	      let <_cor4> =
		  %% Line 4154
		  call 'io_lib':'format'
		      ([126|[112]], [Term|[]])
	      in  %% Line 4154
		  call 'lists':'flatten'
		      (_cor4)
	end
'get_last_loc'/1 =
    %% Line 4156
    fun (_cor0) ->
	case _cor0 of
	  <Loc>
	      when call 'erlang':'is_tuple'
		    (_cor0) ->
	      %% Line 4157
	      Loc
	  %% Line 4158
	  <[Loc|_cor2]>
	      when call 'erlang':'is_tuple'
		    (Loc) ->
	      %% Line 4159
	      [Loc|[]]
	  %% Line 4160
	  <Loc> when 'true' ->
	      %% Line 4161
	      Loc
	end
'reason_to_string'/1 =
    %% Line 4163
    fun (_cor0) ->
	case _cor0 of
	  <{'failed',{_cor5,FailFunc,'bad_return'}}> when 'true' ->
	      let <_cor1> =
		  %% Line 4164
		  call 'erlang':'atom_to_list'
		      (FailFunc)
	      in  %% Line 4164
		  call 'erlang':'++'
		      (_cor1, [32|[98|[97|[100|[32|[114|[101|[116|[117|[114|[110|[32|[118|[97|[108|[117|[101]]]]]]]]]]]]]]]]])
	  %% Line 4165
	  <{'failed',{_cor6,FailFunc,{'timetrap_timeout',_cor7}}}> when 'true' ->
	      let <_cor2> =
		  %% Line 4166
		  call 'erlang':'atom_to_list'
		      (FailFunc)
	      in  %% Line 4166
		  call 'erlang':'++'
		      (_cor2, [32|[116|[105|[109|[101|[100|[32|[111|[117|[116]]]]]]]]]])
	  %% Line 4167
	  <FWInitFail = {'failed',{_X_CB,'init_tc',_X_Reason}}> when 'true' ->
	      %% Line 4168
	      apply 'to_string'/1
		  (FWInitFail)
	  %% Line 4169
	  <{'failed',{_cor8,FailFunc,_cor9}}> when 'true' ->
	      let <_cor3> =
		  %% Line 4170
		  call 'erlang':'atom_to_list'
		      (FailFunc)
	      in  %% Line 4170
		  call 'erlang':'++'
		      (_cor3, [32|[102|[97|[105|[108|[101|[100]]]]]]])
	  %% Line 4171
	  <Other> when 'true' ->
	      %% Line 4172
	      apply 'to_string'/1
		  (Other)
	end
'get_font_style'/2 =
    %% Line 4179
    fun (_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 4180
	    case <> of
	      <>
		  when let <_cor2> =
			call 'erlang':'=:='
			    (_cor1, 'false')
		    in  let <_cor3> =
			    call 'erlang':'is_boolean'
				(_cor1)
			in  call 'erlang':'and'
				(_cor2, _cor3) ->
		  %% Line 4181
		  'default'
	      %% Line 4182
	      <> when 'true' ->
		  %% Line 4183
		  case apply 'check_prop'/2
			   ('parallel', _cor0) of
		    %% Line 4184
		    <'false'> when 'true' ->
			%% Line 4185
			case apply 'check_prop'/2
				 ('sequence', _cor0) of
			  %% Line 4186
			  <'false'> when 'true' ->
			      %% Line 4187
			      'default'
			  %% Line 4188
			  <_cor17> when 'true' ->
			      %% Line 4189
			      'sequence'
			end
		    %% Line 4191
		    <_cor18> when 'true' ->
			%% Line 4192
			'parallel'
		  end
	    end
	in  %% Line 4195
	    case apply 'get_font_style1'/1
		     (_cor6) of
	      <{Col,St0,St1}> when 'true' ->
		  let <_cor13> =
		      %% Line 4196
		      call 'erlang':'++'
			  (Col, [62])
		  in  let <_cor14> =
			  %% Line 4196
			  call 'erlang':'++'
			      ([60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61]]]]]]]]]]]], _cor13)
		      in  let <_cor10> =
			      %% Line 4197
			      [62|St0]
			  in  let <_cor11> =
				  %% Line 4197
				  call 'erlang':'++'
				      (Col, _cor10)
			      in  let <_cor12> =
				      %% Line 4197
				      call 'erlang':'++'
					  ([60|[102|[111|[110|[116|[32|[99|[111|[108|[111|[114|[61]]]]]]]]]]]], _cor11)
				  in  let <_cor9> =
					  %% Line 4197
					  call 'erlang':'++'
					      (St1, [60|[47|[102|[111|[110|[116|[62]]]]]]])
				      in  %% Line 4196
					  {{_cor14,[60|[47|[102|[111|[110|[116|[62]]]]]]]},%% Line 4197
											   {_cor12,_cor9}}
	      ( <_cor8> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor8})
		-| ['compiler_generated'] )
	    end
'get_font_style1'/1 =
    %% Line 4199
    fun (_cor0) ->
	case _cor0 of
	  <'parallel'> when 'true' ->
	      %% Line 4200
	      {[34|[100|[97|[114|[107|[115|[108|[97|[116|[101|[103|[114|[97|[121|[34]]]]]]]]]]]]]]],[60|[105|[62]]],[60|[47|[105|[62]]]]}
	  %% Line 4201
	  <'sequence'> when 'true' ->
	      %% Line 4203
	      {[34|[115|[97|[100|[100|[108|[101|[98|[114|[111|[119|[110|[34]]]]]]]]]]]]],[],[]}
	  %% Line 4204
	  <'default'> when 'true' ->
	      %% Line 4205
	      {[34|[98|[108|[97|[99|[107|[34]]]]]]],[],[]}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_font_style1',1}}] )
	    -| ['compiler_generated'] )
	end
'format_exception'/1 =
    %% Line 4221
    fun (_cor0) ->
	case _cor0 of
	  <Reason = {_X_Error,Stack}>
	      when call 'erlang':'is_list'
		    (Stack) ->
	      %% Line 4222
	      case apply 'get_fw_mod'/1
		       ('undefined') of
		%% Line 4223
		<'undefined'> when 'true' ->
		    %% Line 4224
		    case call 'application':'get_env'
			     ('test_server', 'format_exception') of
		      %% Line 4225
		      <{'ok','false'}> when 'true' ->
			  %% Line 4226
			  {[126|[112]],Reason}
		      %% Line 4227
		      <_cor5> when 'true' ->
			  %% Line 4228
			  apply 'do_format_exception'/1
			      (Reason)
		    end
		%% Line 4230
		<FW> when 'true' ->
		    %% Line 4231
		    case call 'application':'get_env'
			     (FW, 'format_exception') of
		      %% Line 4232
		      <{'ok','false'}> when 'true' ->
			  %% Line 4233
			  {[126|[112]],Reason}
		      %% Line 4234
		      <_cor6> when 'true' ->
			  %% Line 4235
			  apply 'do_format_exception'/1
			      (Reason)
		    end
	      end
	  %% Line 4238
	  <Error> when 'true' ->
	      %% Line 4239
	      apply 'format_exception'/1
		  ({Error,[]})
	end
'do_format_exception'/1 =
    %% Line 4241
    fun (_cor0) ->
	case _cor0 of
	  <Reason = {Error,Stack}> when 'true' ->
	      let <StackFun> =
		  %% Line 4242
		  ( fun (_cor3,_cor2,_cor1) ->
			'false'
		    -| [{'id',{0,0,'-do_format_exception/1-fun-0-'}}] )
	      in  let <PF> =
		      %% Line 4243
		      ( fun (_cor12,_cor11) ->
			    let <_cor8> =
				%% Line 4244
				call 'erlang':'integer_to_list'
				    (_cor11)
			    in  let <_cor9> =
				    %% Line 4244
				    call 'erlang':'++'
					(_cor8, [112])
				in  let <_cor10> =
					%% Line 4244
					[126|[46|_cor9]]
				    in  %% Line 4244
					call 'io_lib':'format'
					    (_cor10, [_cor12|[]])
			-| [{'id',{0,0,'-do_format_exception/1-fun-1-'}}] )
		  in  let <_cor16> =
			  catch
			      %% Line 4246
			      call 'lib':'format_exception'
				  (1, 'error', Error, Stack, StackFun, PF)
		      in  %% Line 4246
			  case _cor16 of
			    %% Line 4247
			    <{'EXIT',_cor24}> when 'true' ->
				%% Line 4248
				{[126|[112]],Reason}
			    %% Line 4249
			    <Formatted> when 'true' ->
				let <Formatted1> =
				    %% Line 4250
				    call 're':'replace'
					(Formatted, [101|[120|[99|[101|[112|[116|[105|[111|[110|[32|[101|[114|[114|[111|[114|[58|[32]]]]]]]]]]]]]]]]], [], [{'return','list'}])
				in  let <_cor18> =
					%% Line 4251
					call 'lists':'flatten'
					    (Formatted1)
				    in  %% Line 4251
					{[126|[116|[115]]],_cor18}
			  end
	  ( <_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20})
		  -| [{'function_name',{'do_format_exception',1}}] )
	    -| ['compiler_generated'] )
	end
'run_test_case_apply'/7 =
    %% Line 4270
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 4272
	call 'test_server':'run_test_case_apply'
	    ({_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0})
'print'/2 =
    %% Line 4284
    fun (_cor1,_cor0) ->
	%% Line 4285
	apply 'print'/3
	    (_cor1, _cor0, [])
'print'/3 =
    %% Line 4287
    fun (_cor2,_cor1,_cor0) ->
	%% Line 4288
	apply 'print'/4
	    (_cor2, _cor1, _cor0, 'internal')
'print'/4 =
    %% Line 4290
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Msg> =
	    %% Line 4291
	    call 'io_lib':'format'
		(_cor2, _cor1)
	in  %% Line 4292
	    apply 'print_or_buffer'/3
		(_cor3, Msg, _cor0)
'print_or_buffer'/3 =
    %% Line 4294
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 4295
	    call 'erlang':'group_leader'
		()
	in  %% Line 4295
	    call 'test_server_gl':'print'
		(_cor3, _cor2, _cor1, _cor0)
'print_timestamp'/2 =
    %% Line 4304
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 4305
	    apply 'timestamp_get'/1
		(_cor0)
	in  %% Line 4305
	    apply 'print'/3
		(_cor1, _cor2, [])
'print_who'/2 =
    %% Line 4312
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 4313
	    case _cor0 of
	      %% Line 4314
	      <[]> when 'true' ->
		  []
	      %% Line 4315
	      <_cor7> when 'true' ->
		  [32|[98|[121|[32|_cor0]]]]
	    end
	in  %% Line 4317
	    apply 'print'/3
		('html', [82|[117|[110|[126|[116|[115|[32|[111|[110|[32|[126|[116|[115]]]]]]]]]]]]], [_cor3|[_cor1|[]]])
'format'/1 =
    %% Line 4336
    fun (_cor0) ->
	%% Line 4337
	apply 'format'/3
	    ('minor', _cor0, [])
'format'/2 =
    %% Line 4339
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'major',Format> when 'true' ->
	      %% Line 4340
	      apply 'format'/3
		  ('major', Format, [])
	  %% Line 4341
	  <'minor',Format> when 'true' ->
	      %% Line 4342
	      apply 'format'/3
		  ('minor', Format, [])
	  %% Line 4343
	  <Detail,Format>
	      when call 'erlang':'is_integer'
		    (Detail) ->
	      %% Line 4344
	      apply 'format'/3
		  (Detail, Format, [])
	  %% Line 4345
	  <Format,Args> when 'true' ->
	      %% Line 4346
	      apply 'format'/3
		  ('minor', Format, Args)
	end
'format'/3 =
    %% Line 4348
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    catch
		%% Line 4350
		call 'io_lib':'format'
		    (_cor1, _cor0)
	in  let <_cor5> =
		%% Line 4350
		case _cor3 of
		  %% Line 4351
		  <{'EXIT',_cor11}> when 'true' ->
		      %% Line 4352
		      call 'io_lib':'format'
			  ([105|[108|[108|[101|[103|[97|[108|[32|[102|[111|[114|[109|[97|[116|[59|[32|[126|[112|[32|[119|[105|[116|[104|[32|[97|[114|[103|[115|[32|[126|[112|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 4353
																										       [_cor1|[_cor0|[]]])
		  %% Line 4354
		  <Valid> when 'true' ->
		      Valid
		end
	    in  let <_cor7> =
		    %% Line 4356
		    call 'erlang':'self'
			()
		in  %% Line 4356
		    apply 'print_or_buffer'/3
			(_cor2, _cor5, _cor7)
'xhtml'/2 =
    %% Line 4361
    fun (_cor1,_cor0) ->
	%% Line 4362
	case call 'erlang':'get'
		 ('basic_html') of
	  %% Line 4363
	  <'true'> when 'true' ->
	      _cor1
	  %% Line 4364
	  <_cor5> when 'true' ->
	      _cor0
	end
'odd_or_even'/0 =
    %% Line 4370
    fun () ->
	%% Line 4371
	case call 'erlang':'get'
		 ('odd_or_even') of
	  %% Line 4372
	  <'even'> when 'true' ->
	      do  %% Line 4373
		  call 'erlang':'put'
		      ('odd_or_even', 'odd')
		  %% Line 4374
		  [101|[118|[101|[110]]]]
	  %% Line 4375
	  <_cor1> when 'true' ->
	      do  %% Line 4376
		  call 'erlang':'put'
		      ('odd_or_even', 'even')
		  %% Line 4377
		  [111|[100|[100]]]
	end
'timestamp_filename_get'/1 =
    %% Line 4386
    fun (_cor0) ->
	%% Line 4387
	apply 'timestamp_get_internal'/2
	    (_cor0, %% Line 4388
		    [126|[116|[115|[126|[119|[45|[126|[50|[46|[50|[46|[48|[119|[45|[126|[50|[46|[50|[46|[48|[119|[95|[126|[50|[46|[50|[46|[48|[119|[46|[126|[50|[46|[50|[46|[48|[119|[46|[126|[50|[46|[50|[46|[48|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
'timestamp_get'/1 =
    %% Line 4396
    fun (_cor0) ->
	%% Line 4397
	apply 'timestamp_get_internal'/2
	    (_cor0, %% Line 4398
		    [126|[116|[115|[126|[119|[45|[126|[50|[46|[50|[46|[48|[119|[45|[126|[50|[46|[50|[46|[48|[119|[32|[126|[50|[46|[50|[46|[48|[119|[58|[126|[50|[46|[50|[46|[48|[119|[58|[126|[50|[46|[50|[46|[48|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
'timestamp_get_internal'/2 =
    %% Line 4400
    fun (_cor1,_cor0) ->
	%% Line 4401
	case apply 'time_get'/0
		 () of
	  <{YY,MM,DD,H,M,S}> when 'true' ->
	      %% Line 4402
	      call 'io_lib':'format'
		  (_cor0, [_cor1|[YY|[MM|[DD|[H|[M|[S|[]]]]]]]])
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'time_get'/0 =
    %% Line 4416
    fun () ->
	%% Line 4417
	case call 'erlang':'date'
		 () of
	  <{YY,MM,DD}> when 'true' ->
	      %% Line 4418
	      case call 'erlang':'time'
		       () of
		<{H,M,S}> when 'true' ->
		    %% Line 4419
		    case call 'erlang':'date'
			     () of
		      %% Line 4420
		      <{_cor3,_cor4,_cor5}>
			  when let <_cor8> =
				call 'erlang':'=:='
				    (_cor3, YY)
			    in  let <_cor6> =
				    call 'erlang':'=:='
					(_cor4, MM)
				in  let <_cor7> =
					call 'erlang':'=:='
					    (_cor5, DD)
				    in  let <_cor9> =
					    call 'erlang':'and'
						(_cor6, _cor7)
					in  call 'erlang':'and'
						(_cor8, _cor9) ->
			  %% Line 4421
			  {YY,MM,DD,H,M,S}
		      %% Line 4422
		      <_X_NewDay> when 'true' ->
			  %% Line 4424
			  apply 'time_get'/0
			      ()
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor0})
	    -| ['compiler_generated'] )
	end
'make_config'/1 =
    %% Line 4435
    fun (_cor0) ->
	_cor0
'update_config'/2 =
    %% Line 4447
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Config,{Key,Val}> when 'true' ->
	      %% Line 4448
	      case call 'lists':'keymember'
		       (Key, 1, Config) of
		%% Line 4449
		<'true'> when 'true' ->
		    %% Line 4450
		    call 'lists':'keyreplace'
			(Key, 1, Config, {Key,Val})
		%% Line 4451
		<'false'> when 'true' ->
		    %% Line 4452
		    [{Key,Val}|Config]
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 4454
	  <Config,[Assoc|Assocs]> when 'true' ->
	      let <NewConfig> =
		  %% Line 4455
		  apply 'update_config'/2
		      (Config, Assoc)
	      in  %% Line 4456
		  apply 'update_config'/2
		      (NewConfig, Assocs)
	  %% Line 4457
	  <Config,[]> when 'true' ->
	      %% Line 4458
	      Config
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'update_config',2}}] )
	    -| ['compiler_generated'] )
	end
'collect_all_cases'/2 =
    %% Line 4536
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Top,Skip>
	      when call 'erlang':'is_list'
		    (Skip) ->
	      %% Line 4538
	      case apply 'collect_cases'/3
		       (Top, {'cc',[],Skip}, []) of
		%% Line 4539
		<{'ok',Cases,_X_St}> when 'true' ->
		    Cases
		%% Line 4540
		<Other> when 'true' ->
		    Other
	      end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'collect_all_cases',2}}] )
	    -| ['compiler_generated'] )
	end
'collect_cases'/3 =
    %% Line 4545
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],St,_cor81> when 'true' ->
	      {'ok',[],St}
	  %% Line 4546
	  <[Case|Cs0],St0,Mode> when 'true' ->
	      %% Line 4547
	      case apply 'collect_cases'/3
		       (Case, St0, Mode) of
		%% Line 4548
		<{'ok',FlatCases1,St1}> when 'true' ->
		    %% Line 4549
		    case apply 'collect_cases'/3
			     (Cs0, St1, Mode) of
		      %% Line 4550
		      <{'ok',FlatCases2,St}> when 'true' ->
			  let <_cor3> =
			      %% Line 4551
			      call 'erlang':'++'
				  (FlatCases1, FlatCases2)
			  in  %% Line 4551
			      {'ok',_cor3,St}
		      %% Line 4552
		      <Error = {'error',_X_Reason}> when 'true' ->
			  Error
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor4})
			-| ['compiler_generated'] )
		    end
		%% Line 4554
		<Error = {'error',_X_Reason}> when 'true' ->
		    Error
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 4558
	  <{'module',Case},St = {'cc',_cor82,_cor83},Mode>
	      when let <_cor6> =
		    call 'erlang':'is_atom'
			(Case)
		in  let <_cor12> =
			call 'erlang':'is_atom'
			    (_cor82)
		    in  call 'erlang':'and'
			    (_cor6, _cor12) ->
	      %% Line 4559
	      apply 'collect_case'/3
		  ({_cor82,Case}, St, Mode)
	  %% Line 4560
	  <{'module',Mod,Case},St,Mode> when 'true' ->
	      %% Line 4561
	      apply 'collect_case'/3
		  ({Mod,Case}, St, Mode)
	  %% Line 4562
	  <{'module',Mod,Case,Args},St,Mode> when 'true' ->
	      %% Line 4563
	      apply 'collect_case'/3
		  ({Mod,Case,Args}, St, Mode)
	  %% Line 4565
	  <{'dir',SubDir},St,Mode> when 'true' ->
	      %% Line 4566
	      apply 'collect_files'/4
		  (SubDir, [42|[95|[83|[85|[73|[84|[69]]]]]]], St, Mode)
	  %% Line 4567
	  <{'dir',SubDir,Pattern},St,Mode> when 'true' ->
	      let <_cor16> =
		  %% Line 4568
		  call 'erlang':'++'
		      (Pattern, [42])
	      in  %% Line 4568
		  apply 'collect_files'/4
		      (SubDir, _cor16, St, Mode)
	  %% Line 4570
	  <{'conf',InitF,CaseList,FinMF},St,Mode>
	      when call 'erlang':'is_atom'
		    (InitF) ->
	      %% Line 4571
	      ( case St of
		  ( <( {'cc',_rec99,_cor86}
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'collect_cases'/3
			    ({'conf',[],{_rec99,InitF},CaseList,FinMF}, St, Mode)
		    -| ['compiler_generated'] )
		  ( <_cor87> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','cc'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 4572
	  <{'conf',InitMF,CaseList,FinF},St,Mode>
	      when call 'erlang':'is_atom'
		    (FinF) ->
	      %% Line 4573
	      ( case St of
		  ( <( {'cc',_rec100,_cor88}
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'collect_cases'/3
			    ({'conf',[],InitMF,CaseList,{_rec100,FinF}}, St, Mode)
		    -| ['compiler_generated'] )
		  ( <_cor89> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','cc'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 4574
	  <{'conf',InitMF,CaseList,FinMF},St0,Mode> when 'true' ->
	      %% Line 4575
	      apply 'collect_cases'/3
		  ({'conf',[],InitMF,CaseList,FinMF}, St0, Mode)
	  %% Line 4576
	  <{'conf',Props,InitF,CaseList,FinMF},St,Mode>
	      when call 'erlang':'is_atom'
		    (InitF) ->
	      %% Line 4577
	      case apply 'init_props'/1
		       (Props) of
		%% Line 4578
		<{'error',_cor90}> when 'true' ->
		    %% Line 4579
		    {'ok',[],St}
		%% Line 4580
		<Props1> when 'true' ->
		    %% Line 4581
		    ( case St of
			( <( {'cc',_rec101,_cor91}
			     -| ['compiler_generated'] )> when 'true' ->
			      apply 'collect_cases'/3
				  ({'conf',Props1,{_rec101,InitF},CaseList,FinMF}, %% Line 4582
										   St, %% Line 4582
										       Mode)
			  -| ['compiler_generated'] )
			( <_cor92> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','cc'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 4584
	  <{'conf',Props,InitMF,CaseList,FinF},St,Mode>
	      when call 'erlang':'is_atom'
		    (FinF) ->
	      %% Line 4585
	      case apply 'init_props'/1
		       (Props) of
		%% Line 4586
		<{'error',_cor93}> when 'true' ->
		    %% Line 4587
		    {'ok',[],St}
		%% Line 4588
		<Props1> when 'true' ->
		    %% Line 4589
		    ( case St of
			( <( {'cc',_rec102,_cor94}
			     -| ['compiler_generated'] )> when 'true' ->
			      apply 'collect_cases'/3
				  ({'conf',Props1,InitMF,CaseList,{_rec102,FinF}}, %% Line 4590
										   St, %% Line 4590
										       Mode)
			  -| ['compiler_generated'] )
			( <_cor95> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','cc'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 4592
	  <Conf = {'conf',Props,InitMF,CaseList,FinMF},St,Mode> when 'true' ->
	      %% Line 4593
	      case apply 'init_props'/1
		       (Props) of
		%% Line 4594
		<{'error',_cor96}> when 'true' ->
		    %% Line 4595
		    {'ok',[],St}
		%% Line 4596
		<Props1> when 'true' ->
		    let <Ref> =
			%% Line 4597
			call 'erlang':'make_ref'
			    ()
		    in  %% Line 4598
			( case St of
			    ( <( {'cc',_cor97,_rec103}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor33> =
				      %% Line 4599
				      call 'lists':'delete'
					  ('suite', Props1)
				  in  let <Props2> =
					  %% Line 4599
					  [{'suite',_cor97}|_cor33]
				      in  let <Mode1> =
					      %% Line 4600
					      [{Ref,Props2,'undefined'}|Mode]
					  in  %% Line 4601
					      case apply 'in_skip_list'/2
						       ({_cor97,Conf}, _rec103) of
						%% Line 4602
						<{'true',Comment}> when 'true' ->
						    let <_cor38> =
							%% Line 4604
							[{'conf',Ref,[],FinMF}|[]]
						    in  %% Line 4603
							{'ok',[{'skip_case',{'conf',Ref,InitMF,Comment},Mode1}|_cor38],%% Line 4604
														       St}
						%% Line 4605
						<{'true',Name,Comment}>
						    when call 'erlang':'is_atom'
							  (Name) ->
						    %% Line 4606
						    case apply 'collect_cases'/3
							     (CaseList, St, Mode1) of
						      %% Line 4607
						      <Empty = {'ok',[],_X_St}> when 'true' ->
							  %% Line 4608
							  Empty
						      %% Line 4609
						      <{'ok',FlatCases,St1}> when 'true' ->
							  let <_cor39> =
							      %% Line 4611
							      apply 'keep_name'/1
								  (Props1)
							  in  let <Cases2Skip> =
								  %% Line 4610
								  call 'erlang':'++'
								      (FlatCases, [{'conf',Ref,_cor39,%% Line 4612
												      FinMF}|%% Line 4612
													     []])
							      in  let <Skipped> =
								      %% Line 4613
								      apply 'skip_cases_upto'/6
									  (Ref, Cases2Skip, Comment, %% Line 4614
												     'conf', %% Line 4614
													     Mode1, %% Line 4614
														    'skip_case')
								  in  %% Line 4615
								      {'ok',[{'skip_case',{'conf',Ref,InitMF,Comment},Mode1}|%% Line 4616
															     Skipped],%% Line 4616
																      St1}
						      %% Line 4617
						      <Error = {'error',_X_Reason}> when 'true' ->
							  %% Line 4618
							  Error
						      ( <_cor42> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_cor42})
							-| ['compiler_generated'] )
						    end
						%% Line 4620
						<{'true',ToSkip,_cor103}>
						    when call 'erlang':'is_list'
							  (ToSkip) ->
						    let <_rec106> =
							%% Line 4622
							call 'erlang':'++'
							    (ToSkip, _rec103)
						    in  let <_cor46> =
							    %% Line 4622
							    call 'erlang':'setelement'
								(3, St, _rec106)
							in  %% Line 4621
							    case apply 'collect_cases'/3
								     (CaseList, _cor46, %% Line 4622
											Mode1) of
							      %% Line 4623
							      <Empty = {'ok',[],_X_St}> when 'true' ->
								  %% Line 4624
								  Empty
							      %% Line 4625
							      <{'ok',FlatCases,St1}> when 'true' ->
								  let <_cor50> =
								      %% Line 4628
								      apply 'keep_name'/1
									  (Props1)
								  in  let <_cor51> =
									  %% Line 4627
									  call 'erlang':'++'
									      (FlatCases, [{'conf',Ref,_cor50,%% Line 4629
													      FinMF}|%% Line 4629
														     []])
								      in  %% Line 4629
									  case St1 of
									    <{'cc',_cor107,_cor108}> when 'true' ->
										let <_cor49> =
										    call 'erlang':'setelement'
											(3, St1, _rec103)
										in  {'ok',[{'conf',Ref,Props1,InitMF}|_cor51],_cor49}
									    ( <_cor109> when 'true' ->
										  ( call ( 'erlang'
											   -| ['compiler_generated'] ):( 'error'
															 -| ['compiler_generated'] )
											(( {'badrecord','cc'}
											   -| ['compiler_generated'] ))
										    -| ['compiler_generated'] )
									      -| ['compiler_generated'] )
									  end
							      %% Line 4630
							      <Error = {'error',_X_Reason}> when 'true' ->
								  %% Line 4631
								  Error
							      ( <_cor52> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_cor52})
								-| ['compiler_generated'] )
							    end
						%% Line 4633
						<'false'> when 'true' ->
						    %% Line 4634
						    case apply 'collect_cases'/3
							     (CaseList, St, Mode1) of
						      %% Line 4635
						      <Empty = {'ok',[],_X_St}> when 'true' ->
							  %% Line 4636
							  Empty
						      %% Line 4637
						      <{'ok',FlatCases,St1}> when 'true' ->
							  let <_cor53> =
							      %% Line 4640
							      apply 'keep_name'/1
								  (Props1)
							  in  let <_cor54> =
								  %% Line 4639
								  call 'erlang':'++'
								      (FlatCases, [{'conf',Ref,_cor53,%% Line 4641
												      FinMF}|%% Line 4641
													     []])
							      in  %% Line 4638
								  {'ok',[{'conf',Ref,Props1,InitMF}|_cor54],%% Line 4641
													    St1}
						      %% Line 4642
						      <Error = {'error',_X_Reason}> when 'true' ->
							  %% Line 4643
							  Error
						      ( <_cor55> when 'true' ->
							    primop 'match_fail'
								({'case_clause',_cor55})
							-| ['compiler_generated'] )
						    end
						( <_cor56> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor56})
						  -| ['compiler_generated'] )
					      end
			      -| ['compiler_generated'] )
			    ( <_cor98> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','cc'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
	      end
	  %% Line 4648
	  <{'make',InitMFA,CaseList,FinMFA},St0,Mode> when 'true' ->
	      %% Line 4649
	      case apply 'collect_cases'/3
		       (CaseList, St0, Mode) of
		%% Line 4650
		<Empty = {'ok',[],_X_St}> when 'true' ->
		    Empty
		%% Line 4651
		<{'ok',FlatCases,St}> when 'true' ->
		    let <Ref> =
			%% Line 4652
			call 'erlang':'make_ref'
			    ()
		    in  let <_cor59> =
			    %% Line 4653
			    call 'erlang':'++'
				(FlatCases, %% Line 4654
					    [{'make',Ref,FinMFA}|[]])
			in  %% Line 4653
			    {'ok',[{'make',Ref,InitMFA}|_cor59],%% Line 4654
								St}
		%% Line 4655
		<Error = {'error',_X_Reason}> when 'true' ->
		    Error
		( <_cor60> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor60})
		  -| ['compiler_generated'] )
	      end
	  %% Line 4658
	  <{Module,Cases},St,Mode>
	      when call 'erlang':'is_list'
		    (Cases) ->
	      let <_cor64> =
		  catch
		      %% Line 4659
		      case St of
			<{'cc',_cor110,_cor111}> when 'true' ->
			    let <_cor63> =
				call 'erlang':'setelement'
				    (2, St, Module)
			    in  apply 'collect_case'/4
				    (Cases, _cor63, [], Mode)
			( <_cor112> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','cc'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	      in  %% Line 4659
		  case _cor64 of
		    %% Line 4660
		    <{'ok',NewCases,NewSt}> when 'true' ->
			%% Line 4661
			{'ok',NewCases,NewSt}
		    %% Line 4662
		    <Other> when 'true' ->
			%% Line 4663
			{'error',Other}
		  end
	  %% Line 4666
	  <Spec = {_X_Mod,_X_Case},St,Mode> when 'true' ->
	      %% Line 4667
	      apply 'collect_case'/3
		  (Spec, St, Mode)
	  %% Line 4669
	  <Spec = {_X_Mod,_X_Case,_X_Args},St,Mode> when 'true' ->
	      %% Line 4670
	      apply 'collect_case'/3
		  (Spec, St, Mode)
	  %% Line 4671
	  <Case,St = {'cc',_cor113,_cor114},Mode>
	      when let <_cor66> =
		    call 'erlang':'is_atom'
			(Case)
		in  let <_cor72> =
			call 'erlang':'is_atom'
			    (_cor113)
		    in  call 'erlang':'and'
			    (_cor66, _cor72) ->
	      %% Line 4672
	      apply 'collect_case'/3
		  ({_cor113,Case}, St, Mode)
	  %% Line 4673
	  <Other,St,_X_Mode> when 'true' ->
	      %% Line 4674
	      ( case St of
		  ( <( {'cc',_rec111,_cor117}
		       -| ['compiler_generated'] )> when 'true' ->
			{'error',{'bad_subtest_spec',_rec111,Other}}
		    -| ['compiler_generated'] )
		  ( <_cor118> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','cc'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'collect_case'/3 =
    %% Line 4676
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{Mod,Conf = {'conf',_cor10,_cor11,_cor12,_cor13}},St,Mode> when 'true' ->
	      %% Line 4677
	      apply 'collect_case_invoke'/5
		  (Mod, Conf, [], St, Mode)
	  %% Line 4679
	  <MFA,St,Mode> when 'true' ->
	      %% Line 4680
	      ( case St of
		  ( <( {'cc',_cor14,_rec112}
		       -| ['compiler_generated'] )> when 'true' ->
			case apply 'in_skip_list'/2
				 (MFA, _rec112) of
			  %% Line 4681
			  <{'true',Comment}> when 'true' ->
			      %% Line 4682
			      {'ok',[{'skip_case',{MFA,Comment},Mode}|[]],St}
			  %% Line 4683
			  <'false'> when 'true' ->
			      %% Line 4684
			      case MFA of
				%% Line 4685
				<{Mod,Case}> when 'true' ->
				    apply 'collect_case_invoke'/5
					(Mod, Case, MFA, St, Mode)
				%% Line 4686
				<{_X_Mod,_X_Case,_X_Args}> when 'true' ->
				    {'ok',[MFA|[]],St}
				( <_cor5> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor5})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor6})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor15> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','cc'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'collect_case'/4 =
    %% Line 4690
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],St,Acc,_X_Mode> when 'true' ->
	      %% Line 4691
	      {'ok',Acc,St}
	  %% Line 4693
	  <[Case|Cases],St,Acc,Mode> when 'true' ->
	      %% Line 4694
	      ( case St of
		  ( <( {'cc',_rec113,_cor12}
		       -| ['compiler_generated'] )> when 'true' ->
			case apply 'collect_case'/3
				 ({_rec113,Case}, St, Mode) of
			  <{'ok',FlatCases,NewSt}> when 'true' ->
			      let <_cor7> =
				  %% Line 4695
				  call 'erlang':'++'
				      (Acc, FlatCases)
			      in  %% Line 4695
				  apply 'collect_case'/4
				      (Cases, NewSt, _cor7, Mode)
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor13> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','cc'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'collect_case',4}}] )
	    -| ['compiler_generated'] )
	end
'collect_case_invoke'/5 =
    %% Line 4697
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 4698
	case apply 'get_fw_mod'/1
		 ('undefined') of
	  %% Line 4699
	  <'undefined'> when 'true' ->
	      let <_cor5> =
		  catch
		      %% Line 4700
		      call _cor4:_cor3
			  ('suite')
	      in  %% Line 4700
		  case _cor5 of
		    %% Line 4701
		    <{'EXIT',_cor14}> when 'true' ->
			%% Line 4702
			{'ok',[_cor2|[]],_cor1}
		    %% Line 4703
		    <Suite> when 'true' ->
			%% Line 4704
			apply 'collect_subcases'/6
			    (_cor4, _cor3, _cor2, _cor1, Suite, _cor0)
		  end
	  %% Line 4706
	  <_cor15> when 'true' ->
	      let <Suite> =
		  %% Line 4707
		  call 'test_server_sup':'framework_call'
		      ('get_suite', %% Line 4708
				    [_cor4|[_cor3|[]]], %% Line 4709
							[])
	      in  %% Line 4710
		  apply 'collect_subcases'/6
		      (_cor4, _cor3, _cor2, _cor1, Suite, _cor0)
	end
'collect_subcases'/6 =
    %% Line 4713
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 4714
	case _cor1 of
	  %% Line 4715
	  <[]>
	      when call 'erlang':'=:='
		    (_cor4,
		     'all') ->
	      {'ok',[],_cor2}
	  %% Line 4716
	  <[]>
	      when try
		    let <_cor6> =
			call 'erlang':'element'
			    (1, _cor4)
		    in  call 'erlang':'=:='
			    (_cor6, 'conf')
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      {'ok',[],_cor2}
	  %% Line 4717
	  <[]> when 'true' ->
	      {'ok',[_cor3|[]],_cor2}
	  %% Line 4720
	  <{'req',ReqList}> when 'true' ->
	      %% Line 4721
	      apply 'collect_case_deny'/7
		  (_cor5, _cor4, _cor3, ReqList, [], _cor2, _cor0)
	  %% Line 4722
	  <{'req',ReqList,SubCases}> when 'true' ->
	      %% Line 4723
	      apply 'collect_case_deny'/7
		  (_cor5, _cor4, _cor3, ReqList, SubCases, _cor2, _cor0)
	  %% Line 4725
	  <{Skip,Reason}>
	      when let <_cor7> =
		    call 'erlang':'=:='
			(Skip, 'skip')
		in  let <_cor8> =
			call 'erlang':'=:='
			    (Skip, 'skipped')
		    in  call 'erlang':'or'
			    (_cor7, _cor8) ->
	      %% Line 4726
	      {'ok',[{'skip_case',{_cor3,Reason},_cor0}|[]],_cor2}
	  %% Line 4727
	  <{'error',Reason}> when 'true' ->
	      %% Line 4728
	      call 'erlang':'throw'
		  (Reason)
	  %% Line 4729
	  <SubCases> when 'true' ->
	      %% Line 4730
	      apply 'collect_case_subcases'/5
		  (_cor5, _cor4, SubCases, _cor2, _cor0)
	end
'collect_case_subcases'/5 =
    %% Line 4733
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 4734
	( case _cor1 of
	    ( <( {'cc',_rec114,_cor20}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor10> =
		      %% Line 4735
		      call 'erlang':'setelement'
			  (2, _cor1, _cor4)
		  in  %% Line 4735
		      case apply 'collect_cases'/3
			       (_cor2, _cor10, _cor0) of
			%% Line 4736
			<{'ok',FlatCases,St}> when 'true' ->
			    %% Line 4737
			    case St of
			      <{'cc',_cor25,_cor26}> when 'true' ->
				  let <_cor13> =
				      call 'erlang':'setelement'
					  (2, St, _rec114)
				  in  {'ok',FlatCases,_cor13}
			      ( <_cor27> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','cc'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			%% Line 4738
			<{'error',Reason}> when 'true' ->
			    %% Line 4739
			    {'error',{{_cor4,_cor3},Reason}}
			( <_cor14> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor14})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_cor21> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cc'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'collect_files'/4 =
    %% Line 4742
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 4743
	case call 'file':'get_cwd'
		 () of
	  <{'ok',Cwd}> when 'true' ->
	      let <Dir1> =
		  %% Line 4744
		  call 'filename':'join'
		      (Cwd, _cor3)
	      in  let <_cor6> =
		      %% Line 4745
		      call 'code':'objfile_extension'
			  ()
		  in  let <_cor7> =
			  %% Line 4745
			  call 'erlang':'++'
			      (_cor2, _cor6)
		      in  let <Wc> =
			      %% Line 4745
			      call 'filename':'join'
				  ([Dir1|[_cor7|[]]])
			  in  let <_cor9> =
				  catch
				      %% Line 4746
				      call 'filelib':'wildcard'
					  (Wc)
			      in  %% Line 4746
				  case _cor9 of
				    %% Line 4747
				    <{'EXIT',Reason}> when 'true' ->
					do  %% Line 4748
					    call 'io':'format'
						([67|[111|[117|[108|[100|[32|[110|[111|[116|[32|[99|[111|[108|[108|[101|[99|[116|[32|[102|[105|[108|[101|[115|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Reason|[]])
					    %% Line 4749
					    {'error',{'collect_fail',_cor3,_cor2}}
				    %% Line 4750
				    <Mods0> when 'true' ->
					let <_cor16> =
					    %% Line 4751
					    ( letrec
						  'lc$^0'/1 =
						      fun (_cor13) ->
							  case _cor13 of
							    <[Mod|_cor11]> when 'true' ->
								let <_cor14> =
								    apply 'path_to_module'/1
									(Mod)
								in  let <_cor15> =
									apply 'lc$^0'/1
									    (_cor11)
								    in  ( [{_cor14,'all'}|_cor15]
									  -| ['compiler_generated'] )
							    <[]> when 'true' ->
								[]
							    ( <_cor13> when 'true' ->
								  ( primop 'match_fail'
									({'function_clause',_cor13})
								    -| [{'function_name',{'lc$^0',1}}] )
							      -| ['compiler_generated'] )
							  end
					      in  let <_cor12> =
						      call 'lists':'sort'
							  (Mods0)
						  in  apply 'lc$^0'/1
							  (_cor12)
					      -| ['list_comprehension'] )
					in  %% Line 4752
					    apply 'collect_cases'/3
						(_cor16, _cor1, _cor0)
				  end
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'path_to_module'/1 =
    %% Line 4755
    fun (_cor0) ->
	case _cor0 of
	  <Path>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 4760
		  call 'filename':'basename'
		      (Path)
	      in  let <_cor2> =
		      %% Line 4760
		      call 'filename':'rootname'
			  (_cor1)
		  in  %% Line 4760
		      call 'erlang':'list_to_atom'
			  (_cor2)
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'path_to_module',1}}] )
	    -| ['compiler_generated'] )
	end
'collect_case_deny'/7 =
    %% Line 4762
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 4763
	( case _cor1 of
	    ( <( {'cc',_cor18,_rec117}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor9> =
		      apply 'check_deny'/2
			  (_cor3, _rec117)
		  in  case <_cor9,_cor2> of
			%% Line 4764
			<{'denied',Comment},_X_SubCases> when 'true' ->
			    %% Line 4765
			    {'ok',[{'skip_case',{_cor4,Comment},_cor0}|[]],_cor1}
			%% Line 4766
			<'granted',[]> when 'true' ->
			    %% Line 4767
			    {'ok',[_cor4|[]],_cor1}
			%% Line 4768
			<'granted',_cor20>
			    when call 'erlang':'=:='
				  (_cor20,
				   _cor2) ->
			    %% Line 4769
			    apply 'collect_case_subcases'/5
				(_cor6, _cor5, _cor2, _cor1, _cor0)
			( <_fol2151,_fol2152> when 'true' ->
			      let <_cor10> = {_fol2151,_fol2152}
			      in  primop 'match_fail'
				      ({'case_clause',_cor10})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_cor19> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cc'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'check_deny'/2 =
    %% Line 4772
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Req|Reqs],DenyList> when 'true' ->
	      %% Line 4773
	      case apply 'check_deny_req'/2
		       (Req, DenyList) of
		%% Line 4774
		<Denied = {'denied',_X_Comment}> when 'true' ->
		    Denied
		%% Line 4775
		<'granted'> when 'true' ->
		    apply 'check_deny'/2
			(Reqs, DenyList)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 4777
	  <[],_X_DenyList> when 'true' ->
	      'granted'
	  %% Line 4778
	  <Req,DenyList> when 'true' ->
	      apply 'check_deny'/2
		  ([Req|[]], DenyList)
	end
'check_deny_req'/2 =
    %% Line 4780
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Req,Val},DenyList> when 'true' ->
	      %% Line 4782
	      case call 'lists':'keysearch'
		       (Req, 1, DenyList) of
		%% Line 4783
		<{'value',{_X_Req,DenyVal}}>
		    when call 'erlang':'>='
			  (Val,
			   DenyVal) ->
		    let <_cor2> =
			%% Line 4784
			call 'io_lib':'format'
			    ([82|[101|[113|[117|[105|[114|[101|[109|[101|[110|[116|[32|[126|[112|[61|[126|[112]]]]]]]]]]]]]]]]], [Req|[Val|[]]])
		    in  %% Line 4784
			{'denied',_cor2}
		%% Line 4785
		<_cor8> when 'true' ->
		    %% Line 4786
		    apply 'check_deny_req'/2
			(Req, DenyList)
	      end
	  %% Line 4788
	  <Req,DenyList> when 'true' ->
	      %% Line 4789
	      case call 'lists':'member'
		       (Req, DenyList) of
		%% Line 4790
		<'true'> when 'true' ->
		    let <_cor4> =
			call 'io_lib':'format'
			    ([82|[101|[113|[117|[105|[114|[101|[109|[101|[110|[116|[32|[126|[112]]]]]]]]]]]]]], [Req|[]])
		    in  {'denied',_cor4}
		%% Line 4791
		<'false'> when 'true' ->
		    'granted'
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	end
'in_skip_list'/2 =
    %% Line 4794
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Mod,{'conf',Props,InitMF,_X_CaseList,_X_FinMF}},SkipList> when 'true' ->
	      %% Line 4795
	      case apply 'in_skip_list'/2
		       (InitMF, SkipList) of
		%% Line 4796
		<Yes = {'true',_cor19}> when 'true' ->
		    %% Line 4797
		    Yes
		%% Line 4798
		<_cor20> when 'true' ->
		    %% Line 4799
		    case call 'proplists':'get_value'
			     ('name', Props) of
		      %% Line 4800
		      <'undefined'> when 'true' ->
			  %% Line 4801
			  'false'
		      %% Line 4802
		      <Name> when 'true' ->
			  let <_cor10> =
			      %% Line 4805
			      ( fun (_cor8) ->
				    case _cor8 of
				      <{M,{'conf',SProps,_cor21,SCaseList,_cor22},Cmt}>
					  when %% Line 4806
					    call 'erlang':'=='
						(M,
						 Mod) ->
					  %% Line 4807
					  case call 'proplists':'get_value'
						   ('name', SProps) of
					    %% Line 4808
					    <'all'> when 'true' ->
						%% Line 4809
						[{M,'all',Cmt}|[]]
					    %% Line 4810
					    <_cor23>
						when call 'erlang':'=:='
						      (_cor23,
						       Name) ->
						%% Line 4811
						case SCaseList of
						  %% Line 4812
						  <'all'> when 'true' ->
						      %% Line 4813
						      [{M,'all',Cmt}|[]]
						  %% Line 4814
						  <_cor24> when 'true' ->
						      %% Line 4815
						      ( letrec
							    'lc$^0'/1 =
								fun (_cor4) ->
								    case _cor4 of
								      <[F|_cor3]> when 'true' ->
									  let <_cor5> =
									      apply 'lc$^0'/1
										  (_cor3)
									  in  ( [{M,F,Cmt}|_cor5]
										-| ['compiler_generated'] )
								      <[]> when 'true' ->
									  []
								      ( <_cor4> when 'true' ->
									    ( primop 'match_fail'
										  ({'function_clause',_cor4})
									      -| [{'function_name',{'lc$^0',1}}] )
									-| ['compiler_generated'] )
								    end
							in  apply 'lc$^0'/1
								(SCaseList)
							-| ['list_comprehension'] )
						end
					    %% Line 4817
					    <_cor25> when 'true' ->
						%% Line 4818
						[]
					  end
				      %% Line 4820
				      <_cor26> when 'true' ->
					  %% Line 4821
					  []
				    end
				-| [{'id',{0,0,'-in_skip_list/2-fun-0-'}}] )
			  in  let <ToSkip> =
				  %% Line 4804
				  call 'lists':'flatmap'
				      (_cor10, %% Line 4822
					       SkipList)
			      in  %% Line 4823
				  case ToSkip of
				    %% Line 4824
				    <[]> when 'true' ->
					%% Line 4825
					'false'
				    %% Line 4826
				    <_cor27> when 'true' ->
					%% Line 4827
					case call 'lists':'keysearch'
						 ('all', 2, ToSkip) of
					  %% Line 4828
					  <{'value',{_cor28,_cor29,Cmt}}> when 'true' ->
					      {'true',Name,Cmt}
					  %% Line 4829
					  <_cor30> when 'true' ->
					      {'true',ToSkip,[]}
					end
				  end
		    end
	      end
	  %% Line 4835
	  <{Mod,Func,_X_Args},SkipList> when 'true' ->
	      %% Line 4836
	      apply 'in_skip_list'/2
		  ({Mod,Func}, SkipList)
	  %% Line 4837
	  <{Mod,Func},[{_cor31,Funcs,Comment}|SkipList]>
	      when let <_cor32> =
		    call 'erlang':'=:='
			(_cor31, Mod)
		in  let <_cor33> =
			call 'erlang':'is_list'
			    (Funcs)
		    in  call 'erlang':'and'
			    (_cor32, _cor33) ->
	      %% Line 4838
	      case call 'lists':'member'
		       (Func, Funcs) of
		%% Line 4839
		<'true'> when 'true' ->
		    %% Line 4840
		    {'true',Comment}
		%% Line 4841
		<_cor34> when 'true' ->
		    %% Line 4842
		    apply 'in_skip_list'/2
			({Mod,Func}, SkipList)
	      end
	  %% Line 4844
	  <{Mod,Func},[{_cor35,_cor36,Comment}|_X_SkipList]>
	      when let <_cor37> =
		    call 'erlang':'=:='
			(_cor35, Mod)
		in  let <_cor38> =
			call 'erlang':'=:='
			    (_cor36, Func)
		    in  call 'erlang':'and'
			    (_cor37, _cor38) ->
	      %% Line 4845
	      {'true',Comment}
	  %% Line 4846
	  <{Mod,_X_Func},[{_cor39,Comment}|_X_SkipList]>
	      when call 'erlang':'=:='
		    (_cor39,
		     Mod) ->
	      %% Line 4847
	      {'true',Comment}
	  %% Line 4848
	  <{Mod,Func},[_cor40|SkipList]> when 'true' ->
	      %% Line 4849
	      apply 'in_skip_list'/2
		  ({Mod,Func}, SkipList)
	  %% Line 4850
	  <_cor41,[]> when 'true' ->
	      %% Line 4851
	      'false'
	  ( <_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17})
		  -| [{'function_name',{'in_skip_list',2}}] )
	    -| ['compiler_generated'] )
	end
'init_props'/1 =
    %% Line 4854
    fun (_cor0) ->
	%% Line 4855
	case apply 'get_repeat'/1
		 (_cor0) of
	  %% Line 4856
	  <Repeat = {_X_RepType,N}>
	      when call 'erlang':'<'
		    (N,
		     2) ->
	      %% Line 4857
	      case <> of
		<>
		    when call 'erlang':'=='
			  (N,
			   0) ->
		    %% Line 4858
		    {'error',{'invalid_property',Repeat}}
		%% Line 4859
		<> when 'true' ->
		    %% Line 4860
		    call 'lists':'delete'
			(Repeat, _cor0)
	      end
	  %% Line 4862
	  <_cor3> when 'true' ->
	      _cor0
	end
'keep_name'/1 =
    %% Line 4866
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 4867
	    ( fun (_cor1) ->
		  case _cor1 of
		    <{'name',_cor5}> when 'true' ->
			'true'
		    %% Line 4868
		    <{'suite',_cor6}> when 'true' ->
			'true'
		    %% Line 4869
		    <_cor7> when 'true' ->
			'false'
		  end
	      -| [{'id',{0,0,'-keep_name/1-fun-0-'}}] )
	in  %% Line 4867
	    call 'lists':'filter'
		(_cor3, _cor0)
'get_target_info'/0 =
    %% Line 4880
    fun () ->
	%% Line 4881
	apply 'controller_call'/1
	    ('get_target_info')
'start_node'/3 =
    %% Line 4889
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 4890
	    call 'test_server':'timetrap_scale_factor'
		()
	in  let <T> =
		%% Line 4890
		call 'erlang':'*'
		    (200000, _cor3)
	    in  do  %% Line 4891
		    apply 'format'/3
			('minor', [65|[116|[116|[101|[109|[112|[116|[32|[116|[111|[32|[115|[116|[97|[114|[116|[32|[126|[119|[32|[110|[111|[100|[101|[32|[126|[112|[32|[119|[105|[116|[104|[32|[111|[112|[116|[105|[111|[110|[115|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 4892
																																			   [_cor1|[_cor2|[_cor0|[]]]])
		    %% Line 4893
		    case apply 'controller_call'/2
			     ({'start_node',_cor2,_cor1,_cor0}, T) of
		      %% Line 4894
		      <{{'ok',Nodename},Host,Cmd,Info,Warning}> when 'true' ->
			  do  %% Line 4895
			      apply 'format'/3
				  ('minor', %% Line 4896
					    [83|[117|[99|[99|[101|[115|[115|[102|[117|[108|[108|[121|[32|[115|[116|[97|[114|[116|[101|[100|[32|[110|[111|[100|[101|[32|[126|[119|[32|[111|[110|[32|[126|[116|[112|[32|[119|[105|[116|[104|[32|[99|[111|[109|[109|[97|[110|[100|[58|[32|[126|[116|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 4897
																																											    [Nodename|[Host|[Cmd|[]]]])
			      do  %% Line 4898
				  apply 'format'/3
				      ('major', [61|[110|[111|[100|[101|[95|[115|[116|[97|[114|[116|[32|[32|[32|[32|[126|[119]]]]]]]]]]]]]]]]], [Nodename|[]])
				  do  %% Line 4899
				      case Info of
					%% Line 4900
					<[]> when 'true' ->
					    'ok'
					%% Line 4901
					<_cor12> when 'true' ->
					    apply 'format'/2
						('minor', Info)
				      end
				      do  %% Line 4903
					  case Warning of
					    %% Line 4904
					    <[]> when 'true' ->
						'ok'
					    %% Line 4905
					    <_cor13> when 'true' ->
						do  %% Line 4906
						    apply 'format'/2
							(1, Warning)
						    %% Line 4907
						    apply 'format'/2
							('minor', Warning)
					  end
					  %% Line 4909
					  {'ok',Nodename}
		      %% Line 4910
		      <{'fail',{Ret,Host,Cmd}}> when 'true' ->
			  do  %% Line 4911
			      apply 'format'/3
				  ('minor', %% Line 4912
					    [70|[97|[105|[108|[101|[100|[32|[116|[111|[32|[115|[116|[97|[114|[116|[32|[110|[111|[100|[101|[32|[126|[116|[112|[32|[111|[110|[32|[126|[116|[112|[32|[119|[105|[116|[104|[32|[99|[111|[109|[109|[97|[110|[100|[58|[32|[126|[116|[115|[126|[110|[82|[101|[97|[115|[111|[110|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 4914
																																																	[_cor2|[Host|[Cmd|[Ret|[]]]]])
			      %% Line 4915
			      {'fail',Ret}
		      %% Line 4916
		      <{Ret,'undefined','undefined'}> when 'true' ->
			  do  %% Line 4917
			      apply 'format'/3
				  ('minor', [70|[97|[105|[108|[101|[100|[32|[116|[111|[32|[115|[116|[97|[114|[116|[32|[110|[111|[100|[101|[32|[126|[116|[112|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor2|[Ret|[]]])
			      %% Line 4918
			      Ret
		      %% Line 4919
		      <{Ret,Host,Cmd}> when 'true' ->
			  do  %% Line 4920
			      apply 'format'/3
				  ('minor', %% Line 4921
					    [70|[97|[105|[108|[101|[100|[32|[116|[111|[32|[115|[116|[97|[114|[116|[32|[110|[111|[100|[101|[32|[126|[116|[112|[32|[111|[110|[32|[126|[116|[112|[32|[119|[105|[116|[104|[32|[99|[111|[109|[109|[97|[110|[100|[58|[32|[126|[116|[115|[126|[110|[82|[101|[97|[115|[111|[110|[58|[32|[126|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 4923
																																																	[_cor2|[Host|[Cmd|[Ret|[]]]]])
			      %% Line 4924
			      Ret
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor8})
			-| ['compiler_generated'] )
		    end
'wait_for_node'/1 =
    %% Line 4934
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 4935
	    call 'test_server':'timetrap_scale_factor'
		()
	in  let <T> =
		%% Line 4935
		call 'erlang':'*'
		    (10000, _cor1)
	    in  let <_cor3> =
		    catch
			%% Line 4936
			apply 'controller_call'/2
			    ({'wait_for_node',_cor0}, T)
		in  %% Line 4936
		    case _cor3 of
		      %% Line 4937
		      <{'EXIT',{'timeout',_cor6}}> when 'true' ->
			  {'error','timeout'}
		      %% Line 4938
		      <'ok'> when 'true' ->
			  'ok'
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor4})
			-| ['compiler_generated'] )
		    end
'is_release_available'/1 =
    %% Line 4948
    fun (_cor0) ->
	%% Line 4949
	apply 'controller_call'/1
	    ({'is_release_available',_cor0})
'stop_node'/1 =
    %% Line 4956
    fun (_cor0) ->
	%% Line 4957
	apply 'controller_call'/1
	    ({'stop_node',_cor0})
'i'/0 =
    %% Line 4964
    fun () ->
	do  %% Line 4965
	    apply 'hformat'/5
		([80|[105|[100]]], [73|[110|[105|[116|[105|[97|[108|[32|[67|[97|[108|[108]]]]]]]]]]]], [67|[117|[114|[114|[101|[110|[116|[32|[70|[117|[110|[99|[116|[105|[111|[110]]]]]]]]]]]]]]]], [82|[101|[100|[117|[99|[116|[115]]]]]]], [77|[115|[103|[115]]]])
	    let <Line> =
		%% Line 4966
		call 'lists':'duplicate'
		    (27, [45])
	    in  do  %% Line 4967
		    apply 'hformat'/5
			(Line, Line, Line, Line, Line)
		    let <_cor1> =
			%% Line 4968
			call 'erlang':'processes'
			    ()
		    in  %% Line 4968
			apply 'display_info'/3
			    (_cor1, 0, 0)
'p'/3 =
    %% Line 4970
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 4971
	    apply 'ts_pid'/3
		(_cor2, _cor1, _cor0)
	in  %% Line 4971
	    apply 'pinfo'/1
		(_cor3)
'p'/1 =
    %% Line 4972
    fun (_cor0) ->
	case _cor0 of
	  <X>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      let <_cor1> =
		  %% Line 4973
		  call 'erlang':'whereis'
		      (X)
	      in  %% Line 4973
		  apply 'pinfo'/1
		      (_cor1)
	  %% Line 4974
	  <{A,B,C}> when 'true' ->
	      let <_cor2> =
		  %% Line 4975
		  apply 'ts_pid'/3
		      (A, B, C)
	      in  %% Line 4975
		  apply 'pinfo'/1
		      (_cor2)
	  %% Line 4976
	  <X> when 'true' ->
	      %% Line 4977
	      apply 'pinfo'/1
		  (X)
	end
't'/0 =
    %% Line 4979
    fun () ->
	%% Line 4980
	apply 't'/1
	    ('wall_clock')
't'/1 =
    %% Line 4981
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 4982
	    call 'erlang':'statistics'
		(_cor0)
	in  %% Line 4982
	    call 'erlang':'element'
		(1, _cor1)
'pi'/2 =
    %% Line 4984
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 4985
	    apply 'p'/1
		(_cor0)
	in  %% Line 4985
	    call 'lists':'keysearch'
		(_cor1, 1, _cor2)
'pi'/4 =
    %% Line 4986
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 4987
	    apply 'p'/3
		(_cor2, _cor1, _cor0)
	in  %% Line 4987
	    call 'lists':'keysearch'
		(_cor3, 1, _cor4)
'ts_pid'/3 =
    %% Line 4990
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <X,Y,Z>
	      when try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (X)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(Y)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (Z)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor13> =
		  %% Line 4991
		  call 'erlang':'integer_to_list'
		      (X)
	      in  let <_cor10> =
		      %% Line 4992
		      call 'erlang':'integer_to_list'
			  (Y)
		  in  let <_cor7> =
			  %% Line 4993
			  call 'erlang':'integer_to_list'
			      (Z)
		      in  let <_cor8> =
			      %% Line 4993
			      call 'erlang':'++'
				  (_cor7, [62])
			  in  let <_cor9> =
				  %% Line 4992
				  [46|_cor8]
			      in  let <_cor11> =
				      %% Line 4992
				      call 'erlang':'++'
					  (_cor10, _cor9)
				  in  let <_cor12> =
					  %% Line 4991
					  [46|_cor11]
				      in  let <_cor14> =
					      %% Line 4991
					      call 'erlang':'++'
						  (_cor13, _cor12)
					  in  let <_cor15> =
						  %% Line 4991
						  [60|_cor14]
					      in  %% Line 4991
						  call 'erlang':'list_to_pid'
						      (_cor15)
	  ( <_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16})
		  -| [{'function_name',{'ts_pid',3}}] )
	    -| ['compiler_generated'] )
	end
'display_info'/3 =
    %% Line 5006
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Pid|T],R,M> when 'true' ->
	      %% Line 5007
	      case apply 'pinfo'/1
		       (Pid) of
		%% Line 5008
		<'undefined'> when 'true' ->
		    %% Line 5009
		    apply 'display_info'/3
			(T, R, M)
		%% Line 5010
		<Info> when 'true' ->
		    let <Call> =
			%% Line 5011
			apply 'fetch'/2
			    ('initial_call', Info)
		    in  let <_cor6> =
			    %% Line 5012
			    case apply 'fetch'/2
				     ('current_function', Info) of
			      %% Line 5013
			      <{Mod,F,Args}>
				  when call 'erlang':'is_list'
					(Args) ->
				  let <_cor4> =
				      %% Line 5014
				      call 'erlang':'length'
					  (Args)
				  in  %% Line 5014
				      {Mod,F,_cor4}
			      %% Line 5015
			      <Other> when 'true' ->
				  %% Line 5016
				  Other
			    end
			in  let <Reds> =
				%% Line 5018
				apply 'fetch'/2
				    ('reductions', Info)
			    in  let <_cor9> =
				    %% Line 5019
				    apply 'fetch'/2
					('messages', Info)
				in  let <LM> =
					%% Line 5019
					call 'erlang':'length'
					    (_cor9)
				    in  let <_cor13> =
					    %% Line 5020
					    call 'io_lib':'format'
						([126|[119]], [Pid|[]])
					in  let <_cor12> =
						%% Line 5021
						call 'io_lib':'format'
						    ([126|[119]], [Call|[]])
					    in  let <_cor11> =
						    %% Line 5022
						    call 'io_lib':'format'
							([126|[119]], [_cor6|[]])
						in  do  %% Line 5020
							apply 'pformat'/5
							    (_cor13, _cor12, _cor11, %% Line 5022
										     Reds, %% Line 5022
											   LM)
							let <_cor15> =
							    %% Line 5023
							    call 'erlang':'+'
								(R, Reds)
							in  let <_cor14> =
								%% Line 5023
								call 'erlang':'+'
								    (M, LM)
							    in  %% Line 5023
								apply 'display_info'/3
								    (T, _cor15, _cor14)
	      end
	  %% Line 5025
	  <[],R,M> when 'true' ->
	      let <Line> =
		  %% Line 5026
		  call 'lists':'duplicate'
		      (27, [45])
	      in  do  %% Line 5027
		      apply 'hformat'/5
			  (Line, Line, Line, Line, Line)
		      %% Line 5028
		      apply 'pformat'/5
			  ([84|[111|[116|[97|[108]]]]], [], [], R, M)
	  ( <_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18})
		  -| [{'function_name',{'display_info',3}}] )
	    -| ['compiler_generated'] )
	end
'hformat'/5 =
    %% Line 5030
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 5031
	call 'io':'format'
	    ([126|[45|[49|[48|[115|[32|[126|[45|[50|[55|[115|[32|[126|[45|[50|[55|[115|[32|[126|[56|[115|[32|[126|[52|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor4|[_cor3|[_cor2|[_cor1|[_cor0|[]]]]]])
'pformat'/5 =
    %% Line 5033
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 5034
	call 'io':'format'
	    ([126|[45|[49|[48|[115|[32|[126|[45|[50|[55|[115|[32|[126|[45|[50|[55|[115|[32|[126|[56|[119|[32|[126|[52|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor4|[_cor3|[_cor2|[_cor1|[_cor0|[]]]]]])
'fetch'/2 =
    %% Line 5036
    fun (_cor1,_cor0) ->
	%% Line 5037
	case call 'lists':'keysearch'
		 (_cor1, 1, _cor0) of
	  %% Line 5038
	  <{'value',{_cor5,Val}}> when 'true' ->
	      %% Line 5039
	      Val
	  %% Line 5040
	  <_cor6> when 'true' ->
	      %% Line 5041
	      0
	end
'pinfo'/1 =
    %% Line 5044
    fun (_cor0) ->
	let <Node> =
	    %% Line 5045
	    call 'erlang':'node'
		()
	in  %% Line 5046
	    case call 'erlang':'node'
		     (_cor0) of
	      %% Line 5047
	      <_cor5>
		  when call 'erlang':'=:='
			(_cor5,
			 Node) ->
		  %% Line 5048
		  call 'erlang':'process_info'
		      (_cor0)
	      %% Line 5049
	      <_cor6> when 'true' ->
		  let <_cor2> =
		      %% Line 5050
		      call 'erlang':'node'
			  (_cor0)
		  in  %% Line 5050
		      call 'rpc':'call'
			  (_cor2, 'erlang', 'process_info', [_cor0|[]])
	    end
'start_cover'/1 =
    %% Line 5114
    fun (_cor0) ->
	case _cor0 of
	  <CoverInfo = {'cover',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 5115
	      apply 'cover_compile'/1
		  (CoverInfo)
	  %% Line 5116
	  <CoverInfo = {'log',CoverLogDir}> when 'true' ->
	      do  %% Line 5118
		  call 'erlang':'put'
		      ('test_server_cover_log_dir', CoverLogDir)
		  %% Line 5119
		  {'ok',CoverInfo}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'start_cover',1}}] )
	    -| ['compiler_generated'] )
	end
'cover_compile'/1 =
    %% Line 5121
    fun (_cor0) ->
	%% Line 5122
	call 'test_server':'cover_compile'
	    (_cor0)
'read_cover_file'/1 =
    %% Line 5128
    fun (_cor0) ->
	case _cor0 of
	  <'none'> when 'true' ->
	      %% Line 5129
	      {[],[],[]}
	  %% Line 5130
	  <CoverFile> when 'true' ->
	      %% Line 5131
	      case call 'file':'consult'
		       (CoverFile) of
		%% Line 5132
		<{'ok',List}> when 'true' ->
		    %% Line 5133
		    case apply 'check_cover_file'/4
			     (List, [], [], []) of
		      %% Line 5134
		      <{'ok',Exclude,Include,Cross}> when 'true' ->
			  {Exclude,Include,Cross}
		      %% Line 5135
		      <'error'> when 'true' ->
			  do  %% Line 5136
			      call 'io':'fwrite'
				  ([70|[97|[117|[108|[116|[121|[32|[102|[111|[114|[109|[97|[116|[32|[111|[102|[32|[67|[111|[118|[101|[114|[70|[105|[108|[101|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [CoverFile|[]])
			      %% Line 5137
			      {[],[],[]}
		      ( <_cor1> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor1})
			-| ['compiler_generated'] )
		    end
		%% Line 5139
		<{'error',Reason}> when 'true' ->
		    do  %% Line 5140
			call 'io':'fwrite'
			    ([67|[97|[110|[39|[116|[32|[114|[101|[97|[100|[32|[67|[111|[118|[101|[114|[70|[105|[108|[101|[32|[126|[116|[115|[10|[82|[101|[97|[115|[111|[110|[58|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 5141
																												       [CoverFile|[Reason|[]]])
			%% Line 5142
			{[],[],[]}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	end
'check_cover_file'/4 =
    %% Line 5145
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'exclude','all'}|Rest],_cor17,Include,Cross> when 'true' ->
	      %% Line 5146
	      apply 'check_cover_file'/4
		  (Rest, 'all', Include, Cross)
	  %% Line 5147
	  <[{'exclude',Exclude}|Rest],_cor18,Include,Cross> when 'true' ->
	      let <_cor6> =
		  %% Line 5148
		  ( fun (_cor4) ->
			call 'erlang':'is_atom'
			    (_cor4)
		    -| [{'id',{0,0,'-check_cover_file/4-fun-0-'}}] )
	      in  %% Line 5148
		  case call 'lists':'all'
			   (_cor6, Exclude) of
		    %% Line 5149
		    <'true'> when 'true' ->
			%% Line 5150
			apply 'check_cover_file'/4
			    (Rest, Exclude, Include, Cross)
		    %% Line 5151
		    <'false'> when 'true' ->
			%% Line 5152
			'error'
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
	  %% Line 5154
	  <[{'include',Include}|Rest],Exclude,_cor19,Cross> when 'true' ->
	      let <_cor10> =
		  %% Line 5155
		  ( fun (_cor8) ->
			call 'erlang':'is_atom'
			    (_cor8)
		    -| [{'id',{0,0,'-check_cover_file/4-fun-1-'}}] )
	      in  %% Line 5155
		  case call 'lists':'all'
			   (_cor10, Include) of
		    %% Line 5156
		    <'true'> when 'true' ->
			%% Line 5157
			apply 'check_cover_file'/4
			    (Rest, Exclude, Include, Cross)
		    %% Line 5158
		    <'false'> when 'true' ->
			%% Line 5159
			'error'
		    ( <_cor11> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor11})
		      -| ['compiler_generated'] )
		  end
	  %% Line 5161
	  <[{'cross',Cross}|Rest],Exclude,Include,_cor20> when 'true' ->
	      %% Line 5162
	      case apply 'check_cross'/1
		       (Cross) of
		%% Line 5163
		<'true'> when 'true' ->
		    %% Line 5164
		    apply 'check_cover_file'/4
			(Rest, Exclude, Include, Cross)
		%% Line 5165
		<'false'> when 'true' ->
		    %% Line 5166
		    'error'
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 5168
	  <[],Exclude,Include,Cross> when 'true' ->
	      %% Line 5169
	      {'ok',Exclude,Include,Cross}
	  ( <_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'check_cover_file',4}}] )
	    -| ['compiler_generated'] )
	end
'check_cross'/1 =
    %% Line 5171
    fun (_cor0) ->
	case _cor0 of
	  <[{Tag,Modules}|Rest]> when 'true' ->
	      let <_cor3> =
		  %% Line 5172
		  ( fun (_cor1) ->
			call 'erlang':'is_atom'
			    (_cor1)
		    -| [{'id',{0,0,'-check_cross/1-fun-0-'}}] )
	      in  %% Line 5172
		  case call 'lists':'all'
			   (_cor3, [Tag|Modules]) of
		    %% Line 5173
		    <'true'> when 'true' ->
			%% Line 5174
			apply 'check_cross'/1
			    (Rest)
		    %% Line 5175
		    <'false'> when 'true' ->
			%% Line 5176
			'false'
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 5178
	  <[]> when 'true' ->
	      %% Line 5179
	      'true'
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'check_cross',1}}] )
	    -| ['compiler_generated'] )
	end
'stop_cover'/2 =
    %% Line 5190
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <CoverInfo = {'cover',_cor4,_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11},TestDir> when 'true' ->
	      %% Line 5191
	      apply 'cover_analyse'/2
		  (CoverInfo, TestDir)
	  %% Line 5192
	  <_X_CoverInfo,_X_TestDir> when 'true' ->
	      %% Line 5194
	      'ok'
	end
'make_relative'/2 =
    %% Line 5196
    fun (_cor1,_cor0) ->
	let <DirTokens> =
	    %% Line 5197
	    call 'filename':'split'
		(_cor1)
	in  let <VsTokens> =
		%% Line 5198
		call 'filename':'split'
		    (_cor0)
	    in  let <_cor4> =
		    %% Line 5199
		    apply 'make_relative1'/2
			(DirTokens, VsTokens)
		in  %% Line 5199
		    call 'filename':'join'
			(_cor4)
'make_relative1'/2 =
    %% Line 5201
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[T|DirTs],[_cor16|VsTs]>
	      when call 'erlang':'=:='
		    (_cor16,
		     T) ->
	      %% Line 5202
	      apply 'make_relative1'/2
		  (DirTs, VsTs)
	  %% Line 5203
	  <Last = [_X_File|[]],[]> when 'true' ->
	      %% Line 5204
	      Last
	  %% Line 5205
	  <Last = [_X_File|[]],VsTs> when 'true' ->
	      let <_cor6> =
		  %% Line 5206
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[_cor17|_cor3]> when 'true' ->
				      let <_cor5> =
					  apply 'lc$^0'/1
					      (_cor3)
				      in  ( [[46|[46|[47]]]|_cor5]
					    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (VsTs)
		    -| ['list_comprehension'] )
	      in  %% Line 5207
		  call 'erlang':'++'
		      (_cor6, Last)
	  %% Line 5208
	  <DirTs,[]> when 'true' ->
	      %% Line 5209
	      DirTs
	  %% Line 5210
	  <DirTs,VsTs> when 'true' ->
	      let <_cor12> =
		  %% Line 5211
		  ( letrec
			'lc$^1'/1 =
			    fun (_cor10) ->
				case _cor10 of
				  <[_cor18|_cor9]> when 'true' ->
				      let <_cor11> =
					  apply 'lc$^1'/1
					      (_cor9)
				      in  ( [[46|[46|[47]]]|_cor11]
					    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor10> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor10})
					  -| [{'function_name',{'lc$^1',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^1'/1
			    (VsTs)
		    -| ['list_comprehension'] )
	      in  %% Line 5212
		  call 'erlang':'++'
		      (_cor12, DirTs)
	end
'cover_analyse'/2 =
    %% Line 5215
    fun (_cor1,_cor0) ->
	do  %% Line 5216
	    apply 'write_default_cross_coverlog'/1
		(_cor0)
	    let <_cor2> =
		%% Line 5218
		call 'filename':'join'
		    (_cor0, [99|[111|[118|[101|[114|[46|[104|[116|[109|[108]]]]]]]]]])
	    in  %% Line 5218
		case apply 'open_html_file'/1
			 (_cor2) of
		  <{'ok',CoverLog}> when 'true' ->
		      do  %% Line 5219
			  apply 'write_coverlog_header'/1
			      (CoverLog)
			  %% Line 5223
			  case _cor1 of
			    <{'cover',App,CoverFile,_cor25,Excluded,_cor26,_cor27,_cor28,Cross}> when 'true' ->
				do  %% Line 5224
				    call 'io':'fwrite'
					(CoverLog, [60|[104|[49|[62|[67|[111|[118|[101|[114|[97|[103|[101|[32|[102|[111|[114|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[39|[126|[119|[39|[60|[47|[104|[49|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [App|[]])
				    do  %% Line 5225
					call 'io':'fwrite'
					    (CoverLog, %% Line 5226
						       [60|[112|[62|[60|[97|[32|[104|[114|[101|[102|[61|[34|[126|[116|[115|[34|[62|[67|[111|[118|[101|[114|[100|[97|[116|[97|[32|[99|[111|[108|[108|[101|[99|[116|[101|[100|[32|[111|[118|[101|[114|[32|[97|[108|[108|[32|[116|[101|[115|[116|[115|[60|[47|[97|[62|[60|[47|[112|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 5227
																																																[[99|[114|[111|[115|[115|[95|[99|[111|[118|[101|[114|[46|[104|[116|[109|[108]]]]]]]]]]]]]]]]])
					do  %% Line 5229
					    call 'io':'fwrite'
						(CoverLog, [60|[112|[62|[67|[111|[118|[101|[114|[70|[105|[108|[101|[58|[32|[60|[99|[111|[100|[101|[62|[126|[116|[112|[60|[47|[99|[111|[100|[101|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [CoverFile|[]])
					    do  %% Line 5230
						apply 'write_cross_cover_info'/2
						    (_cor0, Cross)
						let <_cor5> =
						    %% Line 5232
						    call 'cover':'imported_modules'
							()
						in  do  %% Line 5232
							case call 'erlang':'length'
								 (_cor5) of
							  %% Line 5233
							  <Imps>
							      when call 'erlang':'>'
								    (Imps,
								     0) ->
							      %% Line 5234
							      call 'io':'fwrite'
								  (CoverLog, %% Line 5235
									     [60|[112|[62|[65|[110|[97|[108|[121|[115|[105|[115|[32|[105|[110|[99|[108|[117|[100|[101|[115|[32|[100|[97|[116|[97|[32|[102|[114|[111|[109|[32|[126|[119|[32|[105|[109|[112|[111|[114|[116|[101|[100|[32|[109|[111|[100|[117|[108|[101|[40|[115|[41|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 5236
																																																 [Imps|[]])
							  %% Line 5237
							  <_cor29> when 'true' ->
							      'ok'
							end
							do  %% Line 5241
							    call 'io':'fwrite'
								(CoverLog, [60|[112|[62|[69|[120|[99|[108|[117|[100|[101|[100|[32|[109|[111|[100|[117|[108|[101|[40|[115|[41|[58|[32|[60|[99|[111|[100|[101|[62|[126|[116|[112|[60|[47|[99|[111|[100|[101|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Excluded|[]])
							    let <Coverage> =
								%% Line 5243
								call 'test_server':'cover_analyse'
								    (_cor0, _cor1)
							    in  let <_cor9> =
								    %% Line 5244
								    call 'filename':'join'
									(_cor0, [99|[111|[118|[101|[114|[46|[108|[111|[103]]]]]]]]])
								in  let <_cor8> =
									%% Line 5245
									call 'erlang':'term_to_binary'
									    (Coverage)
								    in  do  %% Line 5244
									    apply 'write_binary_file'/2
										(_cor9, _cor8)
									    let <_cor12> =
										%% Line 5247
										( fun (_cor10) ->
										      case _cor10 of
											<{_X_M,{_cor30,_cor31,_cor32}}> when 'true' ->
											    'false'
											%% Line 5248
											<_cor33> when 'true' ->
											    'true'
										      end
										  -| [{'id',{0,0,'-cover_analyse/2-fun-0-'}}] )
									    in  do  %% Line 5247
										    case call 'lists':'filter'
											     (_cor12, %% Line 5249
												      Coverage) of
										      %% Line 5250
										      <[]> when 'true' ->
											  'ok'
										      %% Line 5252
										      <Bad> when 'true' ->
											  let <_cor13> =
											      %% Line 5255
											      call 'erlang':'length'
												  (Bad)
											  in  let <_cor18> =
												  %% Line 5255
												  ( letrec
													'lc$^0'/1 =
													    fun (_cor16) ->
														case _cor16 of
														  <[{BadM,{_cor34,_X_Why}}|_cor15]> when 'true' ->
														      let <_cor17> =
															  apply 'lc$^0'/1
															      (_cor15)
														      in  ( [BadM|_cor17]
															    -| ['compiler_generated'] )
														  ( <[_cor14|_cor15]> when 'true' ->
															apply 'lc$^0'/1
															    (_cor15)
														    -| ['compiler_generated'] )
														  <[]> when 'true' ->
														      []
														  ( <_cor16> when 'true' ->
															( primop 'match_fail'
															      ({'function_clause',_cor16})
															  -| [{'function_name',{'lc$^0',1}}] )
														    -| ['compiler_generated'] )
														end
												    in  apply 'lc$^0'/1
													    (Bad)
												    -| ['list_comprehension'] )
											      in  %% Line 5253
												  call 'io':'fwrite'
												      (CoverLog, [60|[112|[62|[65|[110|[97|[108|[121|[115|[105|[115|[32|[102|[97|[105|[108|[101|[100|[32|[102|[111|[114|[32|[126|[119|[32|[109|[111|[100|[117|[108|[101|[40|[115|[41|[58|[32|[60|[99|[111|[100|[101|[62|[126|[119|[60|[47|[99|[111|[100|[101|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 5255
																																																			   [_cor13|[_cor18|[]]])
										    end
										    let <TotPercent> =
											%% Line 5258
											apply 'write_cover_result_table'/2
											    (CoverLog, Coverage)
										    in  let <_cor22> =
											    %% Line 5259
											    call 'filename':'join'
												(_cor0, [116|[111|[116|[97|[108|[95|[99|[111|[118|[101|[114|[46|[108|[111|[103]]]]]]]]]]]]]]])
											in  let <_cor21> =
												%% Line 5260
												call 'erlang':'term_to_binary'
												    (TotPercent)
											    in  %% Line 5259
												apply 'write_binary_file'/2
												    (_cor22, _cor21)
			    ( <_cor4> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor4})
			      -| ['compiler_generated'] )
			  end
		  ( <_cor3> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor3})
		    -| ['compiler_generated'] )
		end
'cross_cover_analyse'/2 =
    %% Line 5271
    fun (_cor1,_cor0) ->
	let <TagDirs> =
	    %% Line 5272
	    apply 'get_latest_run_dirs'/1
		(_cor0)
	in  let <TagMods> =
		%% Line 5273
		apply 'get_all_cross_info'/2
		    (TagDirs, [])
	    in  let <TagDirMods> =
		    %% Line 5274
		    apply 'add_cross_modules'/2
			(TagMods, TagDirs)
		in  let <CoverdataFiles> =
			%% Line 5275
			apply 'get_coverdata_files'/1
			    (TagDirMods)
		    in  let <_cor8> =
			    %% Line 5276
			    ( fun (_cor6) ->
				  call 'cover':'import'
				      (_cor6)
			      -| [{'id',{0,0,'-cross_cover_analyse/2-fun-0-'}}] )
			in  do  %% Line 5276
				call 'lists':'foreach'
				    (_cor8, CoverdataFiles)
				do  %% Line 5277
				    call 'io':'fwrite'
					([67|[111|[118|[101|[114|[32|[97|[110|[97|[108|[121|[115|[105|[110|[103|[46|[46|[46|[10]]]]]]]]]]]]]]]]]]], [])
				    let <_cor22> =
					%% Line 5279
					case _cor1 of
					  %% Line 5280
					  <'details'> when 'true' ->
					      %% Line 5281
					      ( fun (_cor14,_cor13) ->
						    let <_cor9> =
							%% Line 5283
							call 'erlang':'atom_to_list'
							    (_cor13)
						    in  let <_cor10> =
							    %% Line 5283
							    call 'erlang':'++'
								(_cor9, %% Line 5284
									[46|[67|[82|[79|[83|[83|[95|[67|[79|[86|[69|[82|[46|[104|[116|[109|[108]]]]]]]]]]]]]]]]])
							in  let <OutFile> =
								%% Line 5282
								call 'filename':'join'
								    (_cor14, _cor10)
							    in  %% Line 5285
								case call 'cover':'analyse_to_file'
									 (_cor13, OutFile, ['html']) of
								  %% Line 5286
								  <{'ok',_cor27}> when 'true' ->
								      %% Line 5287
								      {'file',OutFile}
								  %% Line 5288
								  <Error> when 'true' ->
								      %% Line 5289
								      Error
								end
						-| [{'id',{0,0,'-cross_cover_analyse/2-fun-1-'}}] )
					  %% Line 5292
					  <_cor28> when 'true' ->
					      %% Line 5293
					      ( fun (_cor18,_cor17) ->
						    'undefined'
						-| [{'id',{0,0,'-cross_cover_analyse/2-fun-2-'}}] )
					end
				    in  let <Coverage> =
					    %% Line 5295
					    apply 'analyse_tests'/3
						(TagDirMods, _cor22, [])
					in  do  %% Line 5296
						call 'cover':'stop'
						    ()
						%% Line 5297
						apply 'write_cross_cover_logs'/2
						    (Coverage, TagDirMods)
'write_cross_cover_info'/2 =
    %% Line 5299
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Dir,[]> when 'true' ->
	      %% Line 5300
	      'ok'
	  %% Line 5301
	  <Dir,Cross> when 'true' ->
	      let <_cor3> =
		  %% Line 5302
		  call 'filename':'join'
		      (Dir, [99|[114|[111|[115|[115|[95|[99|[111|[118|[101|[114|[46|[105|[110|[102|[111]]]]]]]]]]]]]]]])
	      in  let <_cor2> =
		      %% Line 5303
		      call 'erlang':'term_to_binary'
			  (Cross)
		  in  %% Line 5302
		      apply 'write_binary_file'/2
			  (_cor3, _cor2)
	end
'write_cross_cover_logs'/2 =
    %% Line 5307
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Tag,Coverage}|T],TagDirMods> when 'true' ->
	      do  %% Line 5308
		  case call 'lists':'keyfind'
			   (Tag, 1, TagDirMods) of
		    %% Line 5309
		    <{_cor9,Dir,Mods}>
			when call 'erlang':'=/='
			      (Mods,
			       []) ->
			let <_cor3> =
			    %% Line 5310
			    call 'filename':'join'
				(Dir, [99|[114|[111|[115|[115|[95|[99|[111|[118|[101|[114|[46|[108|[111|[103]]]]]]]]]]]]]]])
			in  let <_cor2> =
				%% Line 5311
				call 'erlang':'term_to_binary'
				    (Coverage)
			    in  do  %% Line 5310
				    apply 'write_binary_file'/2
					(_cor3, _cor2)
				    let <CoverLogName> =
					%% Line 5312
					call 'filename':'join'
					    (Dir, [99|[114|[111|[115|[115|[95|[99|[111|[118|[101|[114|[46|[104|[116|[109|[108]]]]]]]]]]]]]]]])
				    in  %% Line 5313
					case apply 'open_html_file'/1
						 (CoverLogName) of
					  <{'ok',CoverLog}> when 'true' ->
					      do  %% Line 5314
						  apply 'write_coverlog_header'/1
						      (CoverLog)
						  do  %% Line 5315
						      call 'io':'fwrite'
							  (CoverLog, %% Line 5316
								     [60|[104|[49|[62|[67|[111|[118|[101|[114|[97|[103|[101|[32|[114|[101|[115|[117|[108|[116|[115|[32|[102|[111|[114|[32|[39|[126|[119|[39|[32|[102|[114|[111|[109|[32|[97|[108|[108|[32|[116|[101|[115|[116|[115|[60|[47|[104|[49|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 5317
																																											       [Tag|[]])
						      do  %% Line 5318
							  apply 'write_cover_result_table'/2
							      (CoverLog, Coverage)
							  %% Line 5319
							  call 'io':'fwrite'
							      ([87|[114|[105|[116|[116|[101|[110|[32|[102|[105|[108|[101|[32|[126|[116|[112|[10]]]]]]]]]]]]]]]]], [CoverLogName|[]])
					  ( <_cor5> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor5})
					    -| ['compiler_generated'] )
					end
		    %% Line 5320
		    <_cor10> when 'true' ->
			'ok'
		  end
		  %% Line 5323
		  apply 'write_cross_cover_logs'/2
		      (T, TagDirMods)
	  %% Line 5324
	  <[],_cor11> when 'true' ->
	      %% Line 5325
	      call 'io':'fwrite'
		  ([100|[111|[110|[101|[10]]]]], [])
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'write_cross_cover_logs',2}}] )
	    -| ['compiler_generated'] )
	end
'get_latest_run_dirs'/1 =
    %% Line 5328
    fun (_cor0) ->
	case _cor0 of
	  <[{Tag,Dir}|Rest]> when 'true' ->
	      let <_cor1> =
		  %% Line 5329
		  apply 'get_latest_run_dir'/1
		      (Dir)
	      in  let <_cor2> =
		      %% Line 5329
		      apply 'get_latest_run_dirs'/1
			  (Rest)
		  in  %% Line 5329
		      [{Tag,_cor1}|_cor2]
	  %% Line 5330
	  <[]> when 'true' ->
	      %% Line 5331
	      []
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'get_latest_run_dirs',1}}] )
	    -| ['compiler_generated'] )
	end
'get_latest_run_dir'/1 =
    %% Line 5333
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 5334
	    call 'filename':'join'
		(_cor0, [114|[117|[110|[46|[91|[49|[45|[50|[93|[42]]]]]]]]]])
	in  %% Line 5334
	    case call 'filelib':'wildcard'
		     (_cor1) of
	      %% Line 5335
	      <[]> when 'true' ->
		  _cor0
	      %% Line 5337
	      <[H|T]> when 'true' ->
		  %% Line 5338
		  apply 'get_latest_dir'/2
		      (T, H)
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
'get_latest_dir'/2 =
    %% Line 5341
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Latest>
	      when call 'erlang':'>'
		    (H,
		     Latest) ->
	      %% Line 5342
	      apply 'get_latest_dir'/2
		  (T, H)
	  %% Line 5343
	  <[_cor4|T],Latest> when 'true' ->
	      %% Line 5344
	      apply 'get_latest_dir'/2
		  (T, Latest)
	  %% Line 5345
	  <[],Latest> when 'true' ->
	      %% Line 5346
	      Latest
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'get_latest_dir',2}}] )
	    -| ['compiler_generated'] )
	end
'get_all_cross_info'/2 =
    %% Line 5348
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{_X_Tag,Dir}|Rest],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 5349
		  call 'filename':'join'
		      (Dir, [99|[114|[111|[115|[115|[95|[99|[111|[118|[101|[114|[46|[105|[110|[102|[111]]]]]]]]]]]]]]]])
	      in  %% Line 5349
		  case call 'file':'read_file'
			   (_cor2) of
		    %% Line 5350
		    <{'ok',Bin}> when 'true' ->
			let <TagMods> =
			    %% Line 5351
			    call 'erlang':'binary_to_term'
				(Bin)
			in  let <_cor4> =
				%% Line 5352
				call 'erlang':'++'
				    (TagMods, Acc)
			    in  %% Line 5352
				apply 'get_all_cross_info'/2
				    (Rest, _cor4)
		    %% Line 5353
		    <_cor8> when 'true' ->
			%% Line 5354
			apply 'get_all_cross_info'/2
			    (Rest, Acc)
		  end
	  %% Line 5356
	  <[],Acc> when 'true' ->
	      %% Line 5357
	      Acc
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'get_all_cross_info',2}}] )
	    -| ['compiler_generated'] )
	end
'add_cross_modules'/2 =
    %% Line 5360
    fun (_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 5361
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[{Tag,Dir}|_cor3]> when 'true' ->
				let <_cor5> =
				    apply 'lc$^0'/1
					(_cor3)
				in  ( [{Tag,Dir,[]}|_cor5]
				      -| ['compiler_generated'] )
			    ( <[_cor2|_cor3]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor3)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 5361
	    apply 'do_add_cross_modules'/2
		(_cor1, _cor6)
'do_add_cross_modules'/2 =
    %% Line 5362
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Tag,Mods1}|TagMods],TagDirMods> when 'true' ->
	      let <_cor5> =
		  %% Line 5364
		  case call 'lists':'keytake'
			   (Tag, 1, TagDirMods) of
		    %% Line 5365
		    <{'value',{_cor14,Dir,Mods},Rest}>
			when call 'erlang':'=:='
			      (_cor14,
			       Tag) ->
			let <_cor2> =
			    %% Line 5366
			    call 'lists':'sort'
				(Mods1)
			in  let <_cor3> =
				%% Line 5366
				call 'lists':'umerge'
				    (_cor2, Mods)
			    in  %% Line 5366
				[{Tag,Dir,_cor3}|Rest]
		    %% Line 5367
		    <'false'> when 'true' ->
			%% Line 5368
			TagDirMods
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 5370
		  apply 'do_add_cross_modules'/2
		      (TagMods, _cor5)
	  %% Line 5371
	  <[],TagDirMods> when 'true' ->
	      %% Line 5373
	      ( letrec
		    'lc$^0'/1 =
			fun (_cor9) ->
			    case _cor9 of
			      <[{Tag,Dir,Mods}|_cor8]> when 'true' ->
				  let <_cor10> =
				      call 'lists':'reverse'
					  (Mods)
				  in  let <_cor11> =
					  apply 'lc$^0'/1
					      (_cor8)
				      in  ( [{Tag,Dir,_cor10}|_cor11]
					    -| ['compiler_generated'] )
			      ( <[_cor7|_cor8]> when 'true' ->
				    apply 'lc$^0'/1
					(_cor8)
				-| ['compiler_generated'] )
			      <[]> when 'true' ->
				  []
			      ( <_cor9> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor9})
				      -| [{'function_name',{'lc$^0',1}}] )
				-| ['compiler_generated'] )
			    end
		in  apply 'lc$^0'/1
			(TagDirMods)
		-| ['list_comprehension'] )
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'do_add_cross_modules',2}}] )
	    -| ['compiler_generated'] )
	end
'get_coverdata_files'/1 =
    %% Line 5376
    fun (_cor0) ->
	let <_cor4> =
	    %% Line 5378
	    ( fun (_cor2) ->
		  case _cor2 of
		    <{_cor6,LatestDir,_cor7}> when 'true' ->
			let <_cor1> =
			    %% Line 5379
			    call 'filename':'join'
				(LatestDir, [97|[108|[108|[46|[99|[111|[118|[101|[114|[100|[97|[116|[97]]]]]]]]]]]]])
			in  %% Line 5379
			    call 'filelib':'wildcard'
				(_cor1)
		    ( <_cor3> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor3})
			    -| [{'function_name',{'-get_coverdata_files/1-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-get_coverdata_files/1-fun-0-'}}] )
	in  %% Line 5377
	    call 'lists':'flatmap'
		(_cor4, _cor0)
'analyse_tests'/3 =
    %% Line 5386
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{Tag,LastTest,Modules}|T],DetailsFun,Acc> when 'true' ->
	      let <Cov> =
		  %% Line 5387
		  apply 'analyse_modules'/4
		      (LastTest, Modules, DetailsFun, [])
	      in  %% Line 5388
		  apply 'analyse_tests'/3
		      (T, DetailsFun, [{Tag,Cov}|Acc])
	  %% Line 5389
	  <[],_X_DetailsFun,Acc> when 'true' ->
	      %% Line 5390
	      Acc
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'analyse_tests',3}}] )
	    -| ['compiler_generated'] )
	end
'analyse_modules'/4 =
    %% Line 5394
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Dir,[M|Modules],DetailsFun,Acc> when 'true' ->
	      %% Line 5395
	      case call 'cover':'analyse'
		       (M, 'module') of
		<{'ok',{_cor11,{Cov,NotCov}}}>
		    when call 'erlang':'=:='
			  (_cor11,
			   M) ->
		    let <_cor5> =
			%% Line 5396
			apply DetailsFun
			    (Dir, M)
		    in  let <Acc1> =
			    %% Line 5396
			    [{M,{Cov,NotCov,_cor5}}|Acc]
			in  %% Line 5397
			    apply 'analyse_modules'/4
				(Dir, Modules, DetailsFun, Acc1)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 5398
	  <_X_Dir,[],_X_DetailsFun,Acc> when 'true' ->
	      %% Line 5399
	      Acc
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'analyse_modules',4}}] )
	    -| ['compiler_generated'] )
	end
'write_coverlog_header'/1 =
    %% Line 5403
    fun (_cor0) ->
	let <_cor2> =
	    catch
		let <_cor1> =
		    %% Line 5404
		    apply 'html_header'/1
			([67|[111|[118|[101|[114|[97|[103|[101|[32|[114|[101|[115|[117|[108|[116|[115]]]]]]]]]]]]]]]])
		in  %% Line 5404
		    call 'io':'put_chars'
			(_cor0, _cor1)
	in  %% Line 5404
	    case _cor2 of
	      %% Line 5405
	      <{'EXIT',Reason}> when 'true' ->
		  do  %% Line 5406
		      call 'io':'format'
			  ([10|[10|[69|[82|[82|[79|[82|[58|[32|[67|[111|[117|[108|[100|[32|[110|[111|[116|[32|[119|[114|[105|[116|[101|[32|[110|[111|[114|[109|[97|[108|[32|[104|[101|[97|[100|[105|[110|[103|[32|[105|[110|[32|[99|[111|[118|[101|[114|[108|[111|[103|[46|[10|[67|[111|[118|[101|[114|[76|[111|[103|[58|[32|[126|[119|[10|[82|[101|[97|[115|[111|[110|[58|[32|[126|[112|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 5409
																																																									   [_cor0|[Reason|[]]])
		      %% Line 5410
		      call 'io':'format'
			  (_cor0, [60|[104|[116|[109|[108|[62|[60|[98|[111|[100|[121|[62|[10]]]]]]]]]]]]], [])
	      %% Line 5411
	      <_cor5> when 'true' ->
		  %% Line 5412
		  'ok'
	    end
'format_analyse'/4 =
    %% Line 5416
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <M,Cov,NotCov,'undefined'> when 'true' ->
	      let <_cor4> =
		  %% Line 5421
		  apply 'pc'/2
		      (Cov, NotCov)
	      in  %% Line 5417
		  call 'io_lib':'fwrite'
		      ([60|[116|[114|[62|[60|[116|[100|[62|[126|[119|[60|[47|[116|[100|[62|[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62|[126|[119|[32|[37|[60|[47|[116|[100|[62|[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62|[126|[119|[60|[47|[116|[100|[62|[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62|[126|[119|[60|[47|[116|[100|[62|[60|[47|[116|[114|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 5421
																																																																			   [M|[_cor4|[Cov|[NotCov|[]]]]])
	  %% Line 5422
	  <M,Cov,NotCov,{'file',File}> when 'true' ->
	      let <_cor5> =
		  %% Line 5427
		  call 'filename':'basename'
		      (File)
	      in  let <_cor6> =
		      %% Line 5427
		      apply 'uri_encode'/1
			  (_cor5)
		  in  let <_cor7> =
			  %% Line 5428
			  apply 'pc'/2
			      (Cov, NotCov)
		      in  %% Line 5423
			  call 'io_lib':'fwrite'
			      ([60|[116|[114|[62|[60|[116|[100|[62|[60|[97|[32|[104|[114|[101|[102|[61|[34|[126|[116|[115|[34|[62|[126|[119|[60|[47|[97|[62|[60|[47|[116|[100|[62|[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62|[126|[119|[32|[37|[60|[47|[116|[100|[62|[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62|[126|[119|[60|[47|[116|[100|[62|[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62|[126|[119|[60|[47|[116|[100|[62|[60|[47|[116|[114|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 5427
																																																																																    [_cor6|%% Line 5428
																																																																																	   [M|[_cor7|[Cov|[NotCov|[]]]]]])
	  %% Line 5429
	  <M,Cov,NotCov,{'lines',Lines}> when 'true' ->
	      let <_cor8> =
		  %% Line 5430
		  call 'erlang':'atom_to_list'
		      (M)
	      in  let <CoverOutName> =
		      %% Line 5430
		      call 'erlang':'++'
			  (_cor8, [46|[67|[79|[86|[69|[82|[46|[104|[116|[109|[108]]]]]]]]]]])
		  in  %% Line 5431
		      case apply 'open_html_file'/1
			       (CoverOutName) of
			<{'ok',CoverOut}> when 'true' ->
			    do  %% Line 5432
				apply 'write_not_covered'/3
				    (CoverOut, M, Lines)
				%% Line 5433
				case call 'file':'close'
					 (CoverOut) of
				  <'ok'> when 'true' ->
				      let <_cor12> =
					  %% Line 5438
					  apply 'uri_encode'/1
					      (CoverOutName)
				      in  let <_cor13> =
					      %% Line 5438
					      apply 'pc'/2
						  (Cov, NotCov)
					  in  %% Line 5434
					      call 'io_lib':'fwrite'
						  ([60|[116|[114|[62|[60|[116|[100|[62|[60|[97|[32|[104|[114|[101|[102|[61|[34|[126|[116|[115|[34|[62|[126|[119|[60|[47|[97|[62|[60|[47|[116|[100|[62|[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62|[126|[119|[32|[37|[60|[47|[116|[100|[62|[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62|[126|[119|[60|[47|[116|[100|[62|[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62|[126|[119|[60|[47|[116|[100|[62|[60|[47|[116|[114|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 5438
																																																																																			[_cor12|[M|[_cor13|[Cov|[NotCov|[]]]]]])
				  ( <_cor11> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor11})
				    -| ['compiler_generated'] )
				end
			( <_cor10> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor10})
			  -| ['compiler_generated'] )
		      end
	  %% Line 5439
	  <M,Cov,NotCov,{'error',_cor19}> when 'true' ->
	      let <_cor14> =
		  %% Line 5444
		  apply 'pc'/2
		      (Cov, NotCov)
	      in  %% Line 5440
		  call 'io_lib':'fwrite'
		      ([60|[116|[114|[62|[60|[116|[100|[62|[126|[119|[60|[47|[116|[100|[62|[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62|[126|[119|[32|[37|[60|[47|[116|[100|[62|[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62|[126|[119|[60|[47|[116|[100|[62|[60|[116|[100|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62|[126|[119|[60|[47|[116|[100|[62|[60|[47|[116|[114|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 5444
																																																																			   [M|[_cor14|[Cov|[NotCov|[]]]]])
	  ( <_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'format_analyse',4}}] )
	    -| ['compiler_generated'] )
	end
'pc'/2 =
    %% Line 5447
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,0> when 'true' ->
	      %% Line 5448
	      0
	  %% Line 5449
	  <Cov,NotCov> when 'true' ->
	      let <_cor2> =
		  %% Line 5450
		  call 'erlang':'+'
		      (Cov, NotCov)
	      in  let <_cor3> =
		      %% Line 5450
		      call 'erlang':'/'
			  (Cov, _cor2)
		  in  let <_cor4> =
			  %% Line 5450
			  call 'erlang':'*'
			      (_cor3, 100)
		      in  %% Line 5450
			  call 'erlang':'round'
			      (_cor4)
	end
'write_not_covered'/3 =
    %% Line 5453
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 5454
	    call 'erlang':'atom_to_list'
		(_cor1)
	in  let <_cor4> =
		%% Line 5454
		call 'erlang':'++'
		    ([67|[111|[118|[101|[114|[97|[103|[101|[32|[114|[101|[115|[117|[108|[116|[115|[32|[102|[111|[114|[32]]]]]]]]]]]]]]]]]]]]], _cor3)
	    in  let <_cor5> =
		    %% Line 5454
		    apply 'html_header'/1
			(_cor4)
		in  do  %% Line 5454
			call 'io':'put_chars'
			    (_cor2, _cor5)
			do  %% Line 5455
			    call 'io':'fwrite'
				(_cor2, %% Line 5456
					[84|[104|[101|[32|[102|[111|[108|[108|[111|[119|[105|[110|[103|[32|[108|[105|[110|[101|[115|[32|[105|[110|[32|[109|[111|[100|[117|[108|[101|[32|[126|[119|[32|[97|[114|[101|[32|[110|[111|[116|[32|[99|[111|[118|[101|[114|[101|[100|[58|[10|[60|[116|[97|[98|[108|[101|[32|[98|[111|[114|[100|[101|[114|[61|[51|[32|[99|[101|[108|[108|[112|[97|[100|[100|[105|[110|[103|[61|[53|[62|[10|[60|[116|[104|[62|[76|[105|[110|[101|[32|[78|[117|[109|[98|[101|[114|[60|[47|[116|[104|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 5459
																																																																													[_cor1|[]])
			    let <_cor8> =
				%% Line 5460
				( fun (_cor6) ->
				      case _cor6 of
					<{{_X_M,Line},{0,1}}> when 'true' ->
					    %% Line 5461
					    call 'io':'fwrite'
						(_cor2, [60|[116|[114|[62|[60|[116|[100|[62|[126|[119|[60|[47|[116|[100|[62|[60|[47|[116|[114|[62|[10]]]]]]]]]]]]]]]]]]]]], [Line|[]])
					%% Line 5462
					<_cor12> when 'true' ->
					    %% Line 5463
					    'ok'
				      end
				  -| [{'id',{0,0,'-write_not_covered/3-fun-0-'}}] )
			    in  do  %% Line 5460
				    call 'lists':'foreach'
					(_cor8, _cor0)
				    %% Line 5466
				    call 'io':'put_chars'
					(_cor2, [60|[47|[116|[97|[98|[108|[101|[62|[10|[60|[47|[98|[111|[100|[121|[62|[10|[60|[47|[104|[116|[109|[108|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]])
'write_default_coverlog'/1 =
    %% Line 5469
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 5470
	    call 'filename':'join'
		(_cor0, [99|[111|[118|[101|[114|[46|[104|[116|[109|[108]]]]]]]]]])
	in  %% Line 5470
	    case apply 'open_html_file'/1
		     (_cor1) of
	      <{'ok',CoverLog}> when 'true' ->
		  do  %% Line 5471
		      apply 'write_coverlog_header'/1
			  (CoverLog)
		      do  %% Line 5472
			  call 'io':'put_chars'
			      (CoverLog, [67|[111|[118|[101|[114|[32|[116|[111|[111|[108|[32|[105|[115|[32|[110|[111|[116|[32|[117|[115|[101|[100|[10|[60|[47|[98|[111|[100|[121|[62|[60|[47|[104|[116|[109|[108|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
			  let <_cor5> =
			      %% Line 5473
			      call 'file':'close'
				  (CoverLog)
			  in  %% Line 5473
			      case _cor5 of
				<'ok'> when 'true' ->
				    ( _cor5
				      -| ['compiler_generated'] )
				( <_cor3> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor3})
				  -| ['compiler_generated'] )
			      end
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor2})
		-| ['compiler_generated'] )
	    end
'write_default_cross_coverlog'/1 =
    %% Line 5475
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 5477
	    call 'filename':'join'
		(_cor0, [99|[114|[111|[115|[115|[95|[99|[111|[118|[101|[114|[46|[104|[116|[109|[108]]]]]]]]]]]]]]]])
	in  %% Line 5476
	    case %% Line 5477
		 apply 'open_html_file'/1
		     (_cor1) of
	      <{'ok',CrossCoverLog}> when 'true' ->
		  do  %% Line 5478
		      apply 'write_coverlog_header'/1
			  (CrossCoverLog)
		      let <_cor3> =
			  %% Line 5481
			  apply 'xhtml'/2
			      ([60|[98|[114|[62]]]], [60|[98|[114|[32|[47|[62]]]]]])
		      in  do  %% Line 5479
			      call 'io':'put_chars'
				  (CrossCoverLog, %% Line 5480
						  [[78|[111|[32|[99|[114|[111|[115|[115|[32|[99|[111|[118|[101|[114|[32|[109|[111|[100|[117|[108|[101|[115|[32|[101|[120|[105|[115|[116|[32|[102|[111|[114|[32|[116|[104|[105|[115|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[44]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 5481
																																										 [_cor3|%% Line 5482
																																											[[111|[114|[32|[99|[114|[111|[115|[115|[32|[99|[111|[118|[101|[114|[32|[97|[110|[97|[108|[121|[115|[105|[115|[32|[105|[115|[32|[110|[111|[116|[32|[99|[111|[109|[112|[108|[101|[116|[101|[100|[46|[10|[60|[47|[98|[111|[100|[121|[62|[60|[47|[104|[116|[109|[108|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
			      let <_cor6> =
				  %% Line 5484
				  call 'file':'close'
				      (CrossCoverLog)
			      in  %% Line 5484
				  case _cor6 of
				    <'ok'> when 'true' ->
					( _cor6
					  -| ['compiler_generated'] )
				    ( <_cor4> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor4})
				      -| ['compiler_generated'] )
				  end
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor2})
		-| ['compiler_generated'] )
	    end
'write_cover_result_table'/2 =
    %% Line 5486
    fun (_cor1,_cor0) ->
	do  %% Line 5487
	    call 'io':'fwrite'
		(_cor1, %% Line 5488
			[60|[112|[62|[60|[116|[97|[98|[108|[101|[32|[98|[111|[114|[100|[101|[114|[61|[51|[32|[99|[101|[108|[108|[112|[97|[100|[100|[105|[110|[103|[61|[53|[62|[10|[60|[116|[114|[62|[60|[116|[104|[62|[77|[111|[100|[117|[108|[101|[60|[47|[116|[104|[62|[60|[116|[104|[62|[67|[111|[118|[101|[114|[101|[100|[32|[40|[37|[41|[60|[47|[116|[104|[62|[60|[116|[104|[62|[67|[111|[118|[101|[114|[101|[100|[32|[40|[76|[105|[110|[101|[115|[41|[60|[47|[116|[104|[62|[60|[116|[104|[62|[78|[111|[116|[32|[99|[111|[118|[101|[114|[101|[100|[32|[40|[76|[105|[110|[101|[115|[41|[60|[47|[116|[104|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 5491
																																																																																										    [])
	    let <_cor9> =
		%% Line 5493
		( fun (_cor6,_cor5) ->
		      case <_cor6,_cor5> of
			<{M,{Cov,NotCov,Details}},{AccCov,AccNotCov}> when 'true' ->
			    let <Str> =
				%% Line 5494
				apply 'format_analyse'/4
				    (M, Cov, NotCov, Details)
			    in  do  %% Line 5495
				    call 'io':'fwrite'
					(_cor1, [126|[116|[115]]], [Str|[]])
				    let <_cor4> =
					%% Line 5496
					call 'erlang':'+'
					    (AccCov, Cov)
				    in  let <_cor3> =
					    %% Line 5496
					    call 'erlang':'+'
						(AccNotCov, NotCov)
					in  %% Line 5496
					    {_cor4,_cor3}
			%% Line 5497
			<{_X_M,{'error',_X_Reason}},{AccCov,AccNotCov}> when 'true' ->
			    %% Line 5498
			    {AccCov,AccNotCov}
			( <_cor8,_cor7> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor8,_cor7})
				-| [{'function_name',{'-write_cover_result_table/2-fun-0-',2}}] )
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-write_cover_result_table/2-fun-0-'}}] )
	    in  %% Line 5492
		case %% Line 5493
		     call 'lists':'foldl'
			 (_cor9, %% Line 5500
				 {0,0}, _cor0) of
		  <{TotCov,TotNotCov}> when 'true' ->
		      let <TotPercent> =
			  %% Line 5502
			  apply 'pc'/2
			      (TotCov, TotNotCov)
		      in  do  %% Line 5503
			      call 'io':'fwrite'
				  (_cor1, %% Line 5504
					  [60|[116|[114|[62|[60|[116|[104|[32|[97|[108|[105|[103|[110|[61|[108|[101|[102|[116|[62|[84|[111|[116|[97|[108|[60|[47|[116|[104|[62|[60|[116|[104|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62|[126|[119|[32|[37|[60|[47|[116|[104|[62|[60|[116|[104|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62|[126|[119|[60|[47|[116|[104|[62|[60|[116|[104|[32|[97|[108|[105|[103|[110|[61|[114|[105|[103|[104|[116|[62|[126|[119|[60|[47|[116|[104|[62|[60|[47|[116|[114|[62|[10|[60|[47|[116|[97|[98|[108|[101|[62|[10|[60|[47|[98|[111|[100|[121|[62|[10|[60|[47|[104|[116|[109|[108|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 5509
																																																																																																    [TotPercent|[TotCov|[TotNotCov|[]]]])
			      %% Line 5510
			      case call 'file':'close'
				       (_cor1) of
				<'ok'> when 'true' ->
				    %% Line 5511
				    TotPercent
				( <_cor12> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor12})
				  -| ['compiler_generated'] )
			      end
		  ( <_cor10> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor10})
		    -| ['compiler_generated'] )
		end
'html_header'/1 =
    %% Line 5518
    fun (_cor0) ->
	%% Line 5519
	[[60|[33|[68|[79|[67|[84|[89|[80|[69|[32|[72|[84|[77|[76|[32|[80|[85|[66|[76|[73|[67|[32|[34|[45|[47|[47|[87|[51|[67|[47|[47|[68|[84|[68|[32|[72|[84|[77|[76|[32|[51|[46|[50|[32|[70|[105|[110|[97|[108|[47|[47|[69|[78|[34|[62|[10|[60|[33|[45|[45|[32|[97|[117|[116|[111|[103|[101|[110|[101|[114|[97|[116|[101|[100|[32|[98|[121|[32|[39]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 5520
																																																				   [[116|[101|[115|[116|[95|[115|[101|[114|[118|[101|[114|[95|[99|[116|[114|[108]]]]]]]]]]]]]]]]|[[39|[46|[32|[45|[45|[62|[10|[60|[104|[116|[109|[108|[62|[10|[60|[104|[101|[97|[100|[62|[10|[60|[116|[105|[116|[108|[101|[62]]]]]]]]]]]]]]]]]]]]]]]]]]]]|%% Line 5523
																																																																																			  [_cor0|[[60|[47|[116|[105|[116|[108|[101|[62|[10|[60|[109|[101|[116|[97|[32|[104|[116|[116|[112|[45|[101|[113|[117|[105|[118|[61|[34|[99|[97|[99|[104|[101|[45|[99|[111|[110|[116|[114|[111|[108|[34|[32|[99|[111|[110|[116|[101|[110|[116|[61|[34|[110|[111|[45|[99|[97|[99|[104|[101|[34|[62|[10|[60|[109|[101|[116|[97|[32|[104|[116|[116|[112|[45|[101|[113|[117|[105|[118|[61|[34|[99|[111|[110|[116|[101|[110|[116|[45|[116|[121|[112|[101|[34|[32|[99|[111|[110|[116|[101|[110|[116|[61|[34|[116|[101|[120|[116|[47|[104|[116|[109|[108|[59|[32|[99|[104|[97|[114|[115|[101|[116|[61|[117|[116|[102|[45|[56|[34|[62|[10|[60|[47|[104|[101|[97|[100|[62|[10|[60|[98|[111|[100|[121|[32|[98|[103|[99|[111|[108|[111|[114|[61|[34|[119|[104|[105|[116|[101|[34|[32|[116|[101|[120|[116|[61|[34|[98|[108|[97|[99|[107|[34|[32|[108|[105|[110|[107|[61|[34|[98|[108|[117|[101|[34|[32|[118|[108|[105|[110|[107|[61|[34|[112|[117|[114|[112|[108|[101|[34|[32|[97|[108|[105|[110|[107|[61|[34|[114|[101|[100|[34|[62|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
'open_html_file'/1 =
    %% Line 5530
    fun (_cor0) ->
	%% Line 5531
	apply 'open_utf8_file'/1
	    (_cor0)
'open_html_file'/2 =
    %% Line 5533
    fun (_cor1,_cor0) ->
	%% Line 5534
	apply 'open_utf8_file'/2
	    (_cor1, _cor0)
'write_html_file'/2 =
    %% Line 5536
    fun (_cor1,_cor0) ->
	%% Line 5537
	apply 'write_file'/3
	    (_cor1, _cor0, 'utf8')
'open_utf8_file'/1 =
    %% Line 5541
    fun (_cor0) ->
	%% Line 5542
	case call 'file':'open'
		 (_cor0, ( ['write'|[{'encoding','utf8'}]]
			   -| ['compiler_generated'] )) of
	  %% Line 5543
	  <{'error',Reason}> when 'true' ->
	      {'error',{Reason,{_cor0,( ['write'|[{'encoding','utf8'}]]
					-| ['compiler_generated'] )}}}
	  %% Line 5544
	  <Result> when 'true' ->
	      Result
	end
'open_utf8_file'/2 =
    %% Line 5547
    fun (_cor1,_cor0) ->
	%% Line 5548
	let <_cor3> =
	    ( [( {'encoding','utf8'}
		 -| ['compiler_generated'] )|_cor0]
	      -| ['compiler_generated'] )
	in  let <AllOpts> =
		( [( {'encoding','utf8'}
		     -| ['compiler_generated'] )|_cor0]
		  -| ['compiler_generated'] )
	    in  case call 'file':'open'
			 (_cor1, _cor3) of
		  %% Line 5549
		  <{'error',Reason}> when 'true' ->
		      {'error',{Reason,{_cor1,AllOpts}}}
		  %% Line 5550
		  <Result> when 'true' ->
		      Result
		end
'write_file'/3 =
    %% Line 5554
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <File,Content,'latin1'> when 'true' ->
	      %% Line 5555
	      call 'file':'write_file'
		  (File, Content)
	  %% Line 5556
	  <File,Content,'utf8'> when 'true' ->
	      let <_cor3> =
		  %% Line 5557
		  call 'unicode':'characters_to_binary'
		      (Content)
	      in  %% Line 5557
		  apply 'write_binary_file'/2
		      (File, _cor3)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'write_file',3}}] )
	    -| ['compiler_generated'] )
	end
'write_binary_file'/2 =
    %% Line 5560
    fun (_cor1,_cor0) ->
	%% Line 5561
	call 'file':'write_file'
	    (_cor1, _cor0)
'uri_encode'/1 =
    %% Line 5564
    fun (_cor0) ->
	let <Encoding> =
	    %% Line 5565
	    call 'file':'native_name_encoding'
		()
	in  %% Line 5566
	    apply 'uri_encode'/2
		(_cor0, Encoding)
'uri_encode'/2 =
    %% Line 5568
    fun (_cor1,_cor0) ->
	let <Components> =
	    %% Line 5569
	    call 'filename':'split'
		(_cor1)
	in  let <_cor8> =
		%% Line 5570
		( letrec
		      'lc$^0'/1 =
			  fun (_cor5) ->
			      case _cor5 of
				<[C|_cor4]> when 'true' ->
				    let <_cor6> =
					apply 'uri_encode_comp'/2
					    (C, _cor0)
				    in  let <_cor7> =
					    apply 'lc$^0'/1
						(_cor4)
					in  ( [_cor6|_cor7]
					      -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor5> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor5})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (Components)
		  -| ['list_comprehension'] )
	    in  %% Line 5570
		call 'filename':'join'
		    (_cor8)
'uri_encode_comp'/2 =
    %% Line 5578
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Char|Chars],Encoding> when 'true' ->
	      let <_cor2> =
		  %% Line 5579
		  apply 'reserved'/0
		      ()
	      in  let <Reserved> =
		      %% Line 5579
		      call 'sets':'is_element'
			  (Char, _cor2)
		  in  let <_cor7> =
			  %% Line 5580
			  ( case <> of
			      ( <>
				    when call 'erlang':'>'
					  (Char,
					   127) ->
				    call 'erlang':'=:='
					(Encoding, 'latin1')
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    'false'
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      in  let <_cor9> =
			      %% Line 5580
			      ( case _cor7 of
				  ( <( 'true'
				       -| ['compiler_generated'] )> when 'true' ->
					'true'
				    -| ['compiler_generated'] )
				  ( <( 'false'
				       -| ['compiler_generated'] )> when 'true' ->
					Reserved
				    -| ['compiler_generated'] )
				  ( <_cor4> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {( 'badarg'
						    -| ['compiler_generated'] ),_cor4}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  in  %% Line 5580
			      case _cor9 of
				%% Line 5581
				<'true'> when 'true' ->
				    let <_cor11> =
					%% Line 5582
					call 'http_util':'integer_to_hexlist'
					    (Char)
				    in  let <_cor10> =
					    %% Line 5583
					    apply 'uri_encode_comp'/2
						(Chars, Encoding)
					in  %% Line 5582
					    [37|call 'erlang':'++'
						    (_cor11, _cor10)]
				%% Line 5584
				<'false'> when 'true' ->
				    let <_cor12> =
					%% Line 5585
					apply 'uri_encode_comp'/2
					    (Chars, Encoding)
				    in  %% Line 5585
					[Char|_cor12]
				( <_cor13> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor13})
				  -| ['compiler_generated'] )
			      end
	  %% Line 5587
	  <[],_cor16> when 'true' ->
	      %% Line 5588
	      []
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14})
		  -| [{'function_name',{'uri_encode_comp',2}}] )
	    -| ['compiler_generated'] )
	end
'reserved'/0 =
    %% Line 5592
    fun () ->
	%% Line 5593
	call 'sets':'from_list'
	    ([59|[38|[61|[43|[44|[63|[35|[91|[93|[60|[62|[34|[123|[125|[124|[92|[39|[94|[37|[32]]]]]]]]]]]]]]]]]]]])
'encoding'/1 =
    %% Line 5597
    fun (_cor0) ->
	%% Line 5598
	case call 'epp':'read_encoding'
		 (_cor0) of
	  %% Line 5599
	  <'none'> when 'true' ->
	      %% Line 5600
	      call 'epp':'default_encoding'
		  ()
	  %% Line 5601
	  <E> when 'true' ->
	      %% Line 5602
	      E
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('test_server_ctrl')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('test_server_ctrl', _cor0)
end