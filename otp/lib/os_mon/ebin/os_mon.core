module 'os_mon' ['call'/2,
		 'call'/3,
		 'get_env'/2,
		 'init'/1,
		 'module_info'/0,
		 'module_info'/1,
		 'open_port'/2,
		 'start'/2,
		 'stop'/1]
    attributes [%% Line 21
		'behaviour' =
		    %% Line 21
		    ['application'],
		%% Line 22
		'behaviour' =
		    %% Line 22
		    ['supervisor']]
'call'/2 =
    %% Line 37
    fun (_cor1,_cor0) ->
	%% Line 38
	apply 'call'/3
	    (_cor1, _cor0, 5000)
'call'/3 =
    %% Line 40
    fun (_cor2,_cor1,_cor0) ->
	%% Line 41
	try
	    let <_cor3> =
		apply 'server_name'/1
		    (_cor2)
	    in  call 'gen_server':'call'
		    (_cor3, _cor1, _cor0)
	of <_cor4> ->
	    _cor4
	catch <_cor7,_cor6,_cor5> ->
	    case <_cor7,_cor6,_cor5> of
	      %% Line 43
	      <'exit',{'noproc',Call},_cor18> when 'true' ->
		  let <_cor8> =
		      %% Line 45
		      call 'application':'which_applications'
			  ()
		  in  %% Line 44
		      case call 'lists':'keysearch'
			       ('os_mon', 1, _cor8) of
			%% Line 46
			<{'value',_X_AppInfo}> when 'true' ->
			    %% Line 47
			    case apply 'startp'/1
				     (_cor2) of
			      %% Line 48
			      <'true'> when 'true' ->
				  %% Line 49
				  call 'erlang':'exit'
				      ({'noproc',Call})
			      %% Line 50
			      <'false'> when 'true' ->
				  let <_cor10> =
				      %% Line 54
				      call 'erlang':'self'
					  ()
				  in  do  %% Line 53
					  call 'error_logger':'warning_msg'
					      ([79|[83|[95|[77|[79|[78|[32|[40|[126|[112|[41|[32|[99|[97|[108|[108|[101|[100|[32|[98|[121|[32|[126|[112|[44|[32|[117|[110|[97|[118|[97|[105|[108|[97|[98|[108|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 54
																																     [_cor2|[_cor10|[]]])
					  %% Line 55
					  call _cor2:'dummy_reply'
					      (_cor1)
			      ( <_cor11> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor11})
				-| ['compiler_generated'] )
			    end
			%% Line 57
			<'false'> when 'true' ->
			    let <_cor13> =
				%% Line 59
				call 'erlang':'self'
				    ()
			    in  do  %% Line 59
				    call 'error_logger':'warning_msg'
					([79|[83|[95|[77|[79|[78|[32|[40|[126|[112|[41|[32|[99|[97|[108|[108|[101|[100|[32|[98|[121|[32|[126|[112|[44|[32|[110|[111|[116|[32|[115|[116|[97|[114|[116|[101|[100|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor2|[_cor13|[]]])
				    %% Line 60
				    call _cor2:'dummy_reply'
					(_cor1)
			( <_cor14> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor14})
			  -| ['compiler_generated'] )
		      end
	      ( <_cor7,_cor6,_cor5> when 'true' ->
		    primop 'raise'
			(_cor5, _cor6)
		-| ['compiler_generated'] )
	    end
'get_env'/2 =
    %% Line 64
    fun (_cor1,_cor0) ->
	%% Line 65
	case call 'application':'get_env'
		 ('os_mon', _cor0) of
	  %% Line 66
	  <{'ok',Value}> when 'true' ->
	      %% Line 67
	      case call _cor1:'param_type'
		       (_cor0, Value) of
		%% Line 68
		<'true'> when 'true' ->
		    %% Line 69
		    Value
		%% Line 70
		<'false'> when 'true' ->
		    do  %% Line 74
			call 'error_logger':'warning_msg'
			    ([79|[83|[95|[77|[79|[78|[32|[40|[126|[112|[41|[44|[32|[105|[103|[110|[111|[114|[105|[110|[103|[32|[98|[97|[100|[32|[99|[111|[110|[102|[105|[103|[117|[114|[97|[116|[105|[111|[110|[32|[112|[97|[114|[97|[109|[101|[116|[101|[114|[32|[40|[126|[112|[61|[126|[112|[41|[126|[110|[85|[115|[105|[110|[103|[32|[100|[101|[102|[97|[117|[108|[116|[32|[118|[97|[108|[117|[101|[32|[105|[110|[115|[116|[101|[97|[100|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 75
																																																																	       [_cor1|[_cor0|[Value|[]]]])
			%% Line 76
			call _cor1:'param_default'
			    (_cor0)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 78
	  <'undefined'> when 'true' ->
	      %% Line 79
	      call _cor1:'param_default'
		  (_cor0)
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'open_port'/2 =
    %% Line 82
    fun (_cor1,_cor0) ->
	let <PrivDir> =
	    %% Line 83
	    call 'code':'priv_dir'
		('os_mon')
	in  let <ReleasedPath> =
		%% Line 84
		call 'filename':'join'
		    ([PrivDir|[[98|[105|[110]]]|[_cor1|[]]]])
	    in  %% Line 86
		case call 'filelib':'is_regular'
			 (ReleasedPath) of
		  %% Line 87
		  <'true'> when 'true' ->
		      let <_cor4> =
			  %% Line 88
			  call 'erlang':'++'
			      (ReleasedPath, [34])
		      in  let <_cor5> =
			      %% Line 88
			      [34|_cor4]
			  in  %% Line 88
			      call 'erlang':'open_port'
				  ({'spawn',_cor5}, _cor0)
		  %% Line 89
		  <'false'> when 'true' ->
		      let <_cor6> =
			  %% Line 93
			  call 'erlang':'system_info'
			      ('system_architecture')
		      in  let <ArchPath> =
			      %% Line 92
			      call 'filename':'join'
				  (%% Line 93
				   [PrivDir|[[98|[105|[110]]]|[_cor6|[_cor1|[]]]]])
			  in  let <_cor8> =
				  %% Line 94
				  call 'erlang':'++'
				      (ArchPath, [34])
			      in  let <_cor9> =
				      %% Line 94
				      [34|_cor8]
				  in  %% Line 94
				      call 'erlang':'open_port'
					  ({'spawn',_cor9}, _cor0)
		  ( <_cor10> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor10})
		    -| ['compiler_generated'] )
		end
'start'/2 =
    %% Line 102
    fun (_cor1,_cor0) ->
	%% Line 103
	call 'supervisor':'start_link'
	    ({'local','os_mon_sup'}, 'os_mon', [])
'stop'/1 =
    %% Line 105
    fun (_cor0) ->
	%% Line 106
	'ok'
'init'/1 =
    %% Line 112
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      let <_cor2> =
		  %% Line 113
		  case call 'os':'type'
			   () of
		    %% Line 114
		    <{'win32',_cor19}> when 'true' ->
			%% Line 115
			{'one_for_one',5,3600}
		    %% Line 116
		    <_cor20> when 'true' ->
			%% Line 117
			{'one_for_one',4,3600}
		  end
	      in  let <_cor4> =
		      %% Line 119
		      apply 'startp'/1
			  ('sysinfo')
		  in  let <SysInf> =
			  %% Line 119
			  apply 'childspec'/2
			      ('sysinfo', _cor4)
		      in  let <_cor6> =
			      %% Line 120
			      apply 'startp'/1
				  ('disksup')
			  in  let <DskSup> =
				  %% Line 120
				  apply 'childspec'/2
				      ('disksup', _cor6)
			      in  let <_cor8> =
				      %% Line 121
				      apply 'startp'/1
					  ('memsup')
				  in  let <MemSup> =
					  %% Line 121
					  apply 'childspec'/2
					      ('memsup', _cor8)
				      in  let <_cor10> =
					      %% Line 122
					      apply 'startp'/1
						  ('cpu_sup')
					  in  let <CpuSup> =
						  %% Line 122
						  apply 'childspec'/2
						      ('cpu_sup', _cor10)
					      in  let <_cor12> =
						      %% Line 123
						      apply 'startp'/1
							  ('os_sup')
						  in  let <OsSup> =
							  %% Line 123
							  apply 'childspec'/2
							      ('os_sup', _cor12)
						      in  let <_cor14> =
							      %% Line 124
							      call 'erlang':'++'
								  (CpuSup, OsSup)
							  in  let <_cor15> =
								  %% Line 124
								  call 'erlang':'++'
								      (MemSup, _cor14)
							      in  let <_cor16> =
								      %% Line 124
								      call 'erlang':'++'
									  (DskSup, _cor15)
								  in  let <_cor17> =
									  %% Line 124
									  call 'erlang':'++'
									      (SysInf, _cor16)
								      in  %% Line 124
									  {'ok',{_cor2,_cor17}}
	  ( <_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18})
		  -| [{'function_name',{'init',1}}] )
	    -| ['compiler_generated'] )
	end
'childspec'/2 =
    %% Line 126
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Service,'false'> when 'true' ->
	      %% Line 127
	      []
	  %% Line 128
	  <'cpu_sup','true'> when 'true' ->
	      %% Line 129
	      [{'cpu_sup',{'cpu_sup','start_link',[]},'permanent',2000,'worker',['cpu_sup']}]
	  %% Line 131
	  <'disksup','true'> when 'true' ->
	      %% Line 132
	      [{'disksup',{'disksup','start_link',[]},'permanent',2000,'worker',['disksup']}]
	  %% Line 134
	  <'memsup','true'> when 'true' ->
	      %% Line 135
	      [{'memsup',{'memsup','start_link',[]},'permanent',2000,'worker',['memsup']}]
	  %% Line 137
	  <'os_sup','true'> when 'true' ->
	      let <OS> =
		  %% Line 138
		  call 'os':'type'
		      ()
	      in  let <_cor4> =
		      %% Line 139
		      case OS of
			%% Line 140
			<{'win32',_cor8}> when 'true' ->
			    'nteventlog'
			%% Line 141
			<_cor9> when 'true' ->
			    'os_sup'
		      end
		  in  %% Line 143
		      [{'os_sup',{'os_sup','start_link',[OS|[]]},%% Line 144
								 'permanent',%% Line 144
									     10000,%% Line 144
										   'worker',%% Line 144
											    [_cor4|[]]}|%% Line 144
													[]]
	  %% Line 145
	  <'sysinfo','true'> when 'true' ->
	      %% Line 146
	      [{'os_mon_sysinfo',{'os_mon_sysinfo','start_link',[]},'permanent',2000,'worker',['os_mon_sysinfo']}]
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'childspec',2}}] )
	    -| ['compiler_generated'] )
	end
'startp'/1 =
    %% Line 153
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 155
	    call 'os':'type'
		()
	in  let <_cor2> =
		%% Line 155
		apply 'services'/1
		    (_cor1)
	    in  %% Line 155
		case call 'lists':'member'
			 (_cor0, _cor2) of
		  %% Line 156
		  <'true'> when 'true' ->
		      %% Line 158
		      case apply 'start_param'/1
			       (_cor0) of
			%% Line 159
			<'none'> when 'true' ->
			    %% Line 160
			    'true'
			%% Line 161
			<Param> when 'true' ->
			    %% Line 163
			    case call 'application':'get_env'
				     ('os_mon', Param) of
			      %% Line 164
			      <{'ok','true'}> when 'true' ->
				  %% Line 165
				  'true'
			      %% Line 166
			      <_cor7> when 'true' ->
				  %% Line 167
				  'false'
			    end
		      end
		  %% Line 170
		  <'false'> when 'true' ->
		      %% Line 171
		      'false'
		  ( <_cor5> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor5})
		    -| ['compiler_generated'] )
		end
'services'/1 =
    %% Line 174
    fun (_cor0) ->
	case _cor0 of
	  <{'unix','sunos'}> when 'true' ->
	      %% Line 175
	      ['cpu_sup'|['disksup'|['memsup'|['os_sup']]]]
	  %% Line 176
	  <{'unix',_cor2}> when 'true' ->
	      %% Line 177
	      ['cpu_sup'|['disksup'|['memsup']]]
	  %% Line 178
	  <{'win32',_cor3}> when 'true' ->
	      %% Line 179
	      ['disksup'|['memsup'|['os_sup'|['sysinfo']]]]
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'services',1}}] )
	    -| ['compiler_generated'] )
	end
'server_name'/1 =
    %% Line 181
    fun (_cor0) ->
	case _cor0 of
	  <'cpu_sup'> when 'true' ->
	      'cpu_sup'
	  %% Line 182
	  <'disksup'> when 'true' ->
	      'disksup'
	  %% Line 183
	  <'memsup'> when 'true' ->
	      'memsup'
	  %% Line 184
	  <'os_sup'> when 'true' ->
	      'os_sup_server'
	  %% Line 185
	  <'sysinfo'> when 'true' ->
	      'os_mon_sysinfo'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'server_name',1}}] )
	    -| ['compiler_generated'] )
	end
'start_param'/1 =
    %% Line 187
    fun (_cor0) ->
	case _cor0 of
	  <'cpu_sup'> when 'true' ->
	      'start_cpu_sup'
	  %% Line 188
	  <'disksup'> when 'true' ->
	      'start_disksup'
	  %% Line 189
	  <'memsup'> when 'true' ->
	      'start_memsup'
	  %% Line 190
	  <'os_sup'> when 'true' ->
	      'start_os_sup'
	  %% Line 191
	  <'sysinfo'> when 'true' ->
	      'none'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'start_param',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('os_mon')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('os_mon', _cor0)
end