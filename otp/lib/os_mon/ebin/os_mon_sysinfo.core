module 'os_mon_sysinfo' ['code_change'/3,
			 'get_disk_info'/0,
			 'get_disk_info'/1,
			 'get_mem_info'/0,
			 'handle_call'/3,
			 'handle_cast'/2,
			 'handle_info'/2,
			 'init'/1,
			 'module_info'/0,
			 'module_info'/1,
			 'start_link'/0,
			 'terminate'/2]
    attributes [%% Line 20
		'behaviour' =
		    %% Line 20
		    ['gen_server']]
'start_link'/0 =
    %% Line 40
    fun () ->
	%% Line 41
	call 'gen_server':'start_link'
	    ({'local','os_mon_sysinfo'}, 'os_mon_sysinfo', [], [])
'get_disk_info'/0 =
    %% Line 43
    fun () ->
	%% Line 44
	call 'gen_server':'call'
	    ('os_mon_sysinfo', 'get_disk_info')
'get_disk_info'/1 =
    %% Line 46
    fun (_cor0) ->
	%% Line 47
	call 'gen_server':'call'
	    ('os_mon_sysinfo', {'get_disk_info',_cor0})
'get_mem_info'/0 =
    %% Line 49
    fun () ->
	%% Line 50
	call 'gen_server':'call'
	    ('os_mon_sysinfo', 'get_mem_info')
'init'/1 =
    %% Line 56
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      do  %% Line 57
		  call 'erlang':'process_flag'
		      ('trap_exit', 'true')
		  do  %% Line 58
		      call 'erlang':'process_flag'
			  ('priority', 'low')
		      %% Line 59
		      case call 'os':'type'
			       () of
			%% Line 60
			<{'win32',_X_OSname}> when 'true' ->
			    let <_cor2> =
				apply 'start_portprogram'/0
				    ()
			    in  %% Line 63
				{'ok',{'state',_cor2}}
			%% Line 61
			<OS> when 'true' ->
			    call 'erlang':'exit'
				({'unsupported_os',OS})
		      end
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'init',1}}] )
	    -| ['compiler_generated'] )
	end
'handle_call'/3 =
    %% Line 65
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'get_disk_info',_X_From,State> when 'true' ->
	      %% Line 66
	      ( case State of
		  ( <( {'state',_rec0}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor5> =
			    apply 'get_disk_info1'/1
				(_rec0)
			in  {'reply',_cor5,State}
		    -| ['compiler_generated'] )
		  ( <_cor15> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 67
	  <{'get_disk_info',RootList},_X_From,State> when 'true' ->
	      %% Line 68
	      ( case State of
		  ( <( {'state',_rec1}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor8> =
			    apply 'get_disk_info1'/2
				(_rec1, RootList)
			in  {'reply',_cor8,State}
		    -| ['compiler_generated'] )
		  ( <_cor16> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 69
	  <'get_mem_info',_X_From,State> when 'true' ->
	      %% Line 70
	      ( case State of
		  ( <( {'state',_rec2}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor11> =
			    apply 'get_mem_info1'/1
				(_rec2)
			in  {'reply',_cor11,State}
		    -| ['compiler_generated'] )
		  ( <_cor17> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'handle_call',3}}] )
	    -| ['compiler_generated'] )
	end
'handle_cast'/2 =
    %% Line 72
    fun (_cor1,_cor0) ->
	%% Line 73
	{'noreply',_cor0}
'handle_info'/2 =
    %% Line 75
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'EXIT',_X_Port,Reason},State> when 'true' ->
	      %% Line 76
	      case State of
		<{'state',_rec4}> when 'true' ->
		    {'stop',{'port_died',Reason},{'state','not_used'}}
		( <_cor7> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 77
	  <_X_Info,State> when 'true' ->
	      %% Line 78
	      {'noreply',State}
	end
'terminate'/2 =
    %% Line 80
    fun (_cor1,_cor0) ->
	%% Line 81
	( case _cor0 of
	    ( <( {'state',_rec5}
		 -| ['compiler_generated'] )> when 'true' ->
		  do  case _rec5 of
			%% Line 82
			<'not_used'> when 'true' ->
			    'ok'
			%% Line 84
			<Port> when 'true' ->
			    %% Line 85
			    call 'erlang':'port_close'
				(Port)
		      end
		      %% Line 87
		      'ok'
	      -| ['compiler_generated'] )
	    ( <_cor7> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'code_change'/3 =
    %% Line 91
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Vsn,PrevState,[49|[46|[56]]]> when 'true' ->
	      do  %% Line 92
		  case Vsn of
		    %% Line 95
		    <{'down',_X_Vsn}> when 'true' ->
			%% Line 96
			call 'erlang':'process_flag'
			    ('trap_exit', 'false')
		    %% Line 99
		    <_X_Vsn> when 'true' ->
			%% Line 100
			call 'erlang':'process_flag'
			    ('trap_exit', 'true')
		  end
		  %% Line 102
		  {'ok',PrevState}
	  %% Line 103
	  <_X_OldVsn,State,_X_Extra> when 'true' ->
	      %% Line 104
	      {'ok',State}
	end
'start_portprogram'/0 =
    %% Line 110
    fun () ->
	let <Port> =
	    %% Line 111
	    call 'os_mon':'open_port'
		([119|[105|[110|[51|[50|[115|[121|[115|[105|[110|[102|[111|[46|[101|[120|[101]]]]]]]]]]]]]]]], [{'packet',1}])
	in  %% Line 112
	    receive
	      %% Line 113
	      <{_cor1,{'data',[111]}}>
		  when call 'erlang':'=:='
			(_cor1,
			 Port) ->
		  %% Line 114
		  Port
	      %% Line 115
	      <{_cor2,{'data',Data}}>
		  when call 'erlang':'=:='
			(_cor2,
			 Port) ->
		  %% Line 116
		  call 'erlang':'exit'
		      ({'port_error',Data})
	      %% Line 117
	      <{'EXIT',_cor3,Reason}>
		  when call 'erlang':'=:='
			(_cor3,
			 Port) ->
		  %% Line 118
		  call 'erlang':'exit'
		      ({'port_died',Reason})
	    after %% Line 119
		  5000 ->
	      %% Line 120
	      call 'erlang':'exit'
		  ({'port_error','timeout'})
'get_disk_info1'/1 =
    %% Line 123
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 124
	    call 'erlang':'self'
		()
	in  do  %% Line 124
		call 'erlang':'!'
		    (_cor0, {_cor1,{'command',[100]}})
		%% Line 125
		apply 'get_data'/2
		    (_cor0, [])
'get_disk_info1'/2 =
    %% Line 127
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 128
	    call 'erlang':'self'
		()
	in  let <_cor7> =
		%% Line 128
		( letrec
		      'lc$^0'/1 =
			  fun (_cor4) ->
			      case _cor4 of
				<[P|_cor3]> when 'true' ->
				    let <_cor5> =
					call 'erlang':'++'
					    (P, [0])
				    in  let <_cor6> =
					    apply 'lc$^0'/1
						(_cor3)
					in  ( [_cor5|_cor6]
					      -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor4> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor4})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (_cor0)
		  -| ['list_comprehension'] )
	    in  do  %% Line 128
		    call 'erlang':'!'
			(_cor1, {_cor8,{'command',[100|_cor7]}})
		    %% Line 129
		    apply 'get_data'/2
			(_cor1, [])
'get_mem_info1'/1 =
    %% Line 131
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 132
	    call 'erlang':'self'
		()
	in  do  %% Line 132
		call 'erlang':'!'
		    (_cor0, {_cor1,{'command',[109]}})
		%% Line 133
		apply 'get_data'/2
		    (_cor0, [])
'get_data'/2 =
    %% Line 135
    fun (_cor1,_cor0) ->
	%% Line 136
	receive
	  %% Line 137
	  <{_cor4,{'data',[111]}}>
	      when call 'erlang':'=:='
		    (_cor4,
		     _cor1) ->
	      %% Line 138
	      call 'lists':'reverse'
		  (_cor0)
	  %% Line 139
	  <{_cor5,{'data',Bytes}}>
	      when call 'erlang':'=:='
		    (_cor5,
		     _cor1) ->
	      %% Line 140
	      apply 'get_data'/2
		  (_cor1, [Bytes|_cor0])
	  %% Line 141
	  <{'EXIT',_cor6,Reason}>
	      when call 'erlang':'=:='
		    (_cor6,
		     _cor1) ->
	      %% Line 142
	      call 'erlang':'exit'
		  ({'port_died',Reason})
	after %% Line 143
	      5000 ->
	  %% Line 144
	  call 'lists':'reverse'
	      (_cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('os_mon_sysinfo')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('os_mon_sysinfo', _cor0)
end