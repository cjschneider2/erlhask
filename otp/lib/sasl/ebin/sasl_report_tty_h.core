module 'sasl_report_tty_h' ['handle_call'/2,
			    'handle_event'/2,
			    'handle_info'/2,
			    'init'/1,
			    'module_info'/0,
			    'module_info'/1,
			    'terminate'/2]
    attributes []
'init'/1 =
    %% Line 31
    fun (_cor0) ->
	%% Line 33
	{'ok',_cor0}
'handle_event'/2 =
    %% Line 35
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Type,GL,_X_Msg},_cor8>
	      when let <_cor9> =
		    call 'erlang':'=:='
			(_cor8, Type)
		in  let <_cor10> =
			try
			    let <_cor3> =
				call 'erlang':'node'
				    (GL)
			    in  let <_cor2> =
				    call 'erlang':'node'
					()
				in  call 'erlang':'/='
					(_cor3, _cor2)
			of <Try> ->
			    Try
			catch <T,R> ->
			    'false'
		    in  call 'erlang':'and'
			    (_cor9, _cor10) ->
	      %% Line 36
	      {'ok',Type}
	  %% Line 37
	  <Event,Type> when 'true' ->
	      let <_cor4> =
		  %% Line 38
		  apply 'tag_event'/1
		      (Event)
	      in  let <_X_> =
		      %% Line 38
		      ( call 'sasl_report':'write_report'
			    ('standard_io', Type, _cor4)
			-| ['result_not_wanted'] )
		  in  %% Line 39
		      {'ok',Type}
	end
'handle_info'/2 =
    %% Line 41
    fun (_cor1,_cor0) ->
	{'ok',_cor0}
'handle_call'/2 =
    %% Line 43
    fun (_cor1,_cor0) ->
	{'error','bad_query'}
'terminate'/2 =
    %% Line 45
    fun (_cor1,_cor0) ->
	%% Line 46
	[]
'tag_event'/1 =
    %% Line 48
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 49
	    call 'calendar':'local_time'
		()
	in  %% Line 49
	    {_cor1,_cor0}
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('sasl_report_tty_h')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('sasl_report_tty_h', _cor0)
end