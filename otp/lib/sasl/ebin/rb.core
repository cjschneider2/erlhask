module 'rb' ['code_change'/3,
	     'filter'/1,
	     'filter'/2,
	     'grep'/1,
	     'h'/0,
	     'handle_call'/3,
	     'handle_cast'/2,
	     'handle_info'/2,
	     'help'/0,
	     'init'/1,
	     'list'/0,
	     'list'/1,
	     'log_list'/0,
	     'log_list'/1,
	     'module_info'/0,
	     'module_info'/1,
	     'rescan'/0,
	     'rescan'/1,
	     'show'/0,
	     'show'/1,
	     'start'/0,
	     'start'/1,
	     'start_link'/1,
	     'start_log'/1,
	     'stop'/0,
	     'stop_log'/0,
	     'terminate'/2]
    attributes [%% Line 21
		'behaviour' =
		    %% Line 21
		    ['gen_server']]
'start'/0 =
    %% Line 46
    fun () ->
	apply 'start'/1
	    ([])
'start'/1 =
    %% Line 47
    fun (_cor0) ->
	%% Line 48
	call 'supervisor':'start_child'
	    ('sasl_sup', %% Line 49
			 {'rb_server',{'rb','start_link',[_cor0|[]]},%% Line 50
								     'temporary',%% Line 50
										 'brutal_kill',%% Line 50
											       'worker',%% Line 50
													['rb']})
'start_link'/1 =
    %% Line 52
    fun (_cor0) ->
	%% Line 53
	call 'gen_server':'start_link'
	    ({'local','rb_server'}, 'rb', _cor0, [])
'stop'/0 =
    %% Line 55
    fun () ->
	%% Line 56
	call 'supervisor':'terminate_child'
	    ('sasl_sup', 'rb_server')
'rescan'/0 =
    %% Line 58
    fun () ->
	apply 'rescan'/1
	    ([])
'rescan'/1 =
    %% Line 59
    fun (_cor0) ->
	%% Line 60
	apply 'call'/1
	    ({'rescan',_cor0})
'list'/0 =
    %% Line 62
    fun () ->
	apply 'list'/1
	    ('all')
'list'/1 =
    %% Line 63
    fun (_cor0) ->
	apply 'call'/1
	    ({'list',_cor0})
'log_list'/0 =
    %% Line 65
    fun () ->
	apply 'log_list'/1
	    ('all')
'log_list'/1 =
    %% Line 66
    fun (_cor0) ->
	apply 'call'/1
	    ({'log_list',_cor0})
'show'/0 =
    %% Line 68
    fun () ->
	%% Line 69
	apply 'call'/1
	    ('show')
'show'/1 =
    %% Line 71
    fun (_cor0) ->
	case _cor0 of
	  <Number>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 72
	      apply 'call'/1
		  ({'show_number',Number})
	  %% Line 73
	  <Type>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 74
	      apply 'call'/1
		  ({'show_type',Type})
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'show',1}}] )
	    -| ['compiler_generated'] )
	end
'grep'/1 =
    %% Line 76
    fun (_cor0) ->
	apply 'call'/1
	    ({'grep',_cor0})
'filter'/1 =
    %% Line 78
    fun (_cor0) ->
	case _cor0 of
	  <Filters>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 79
	      apply 'call'/1
		  ({'filter',Filters})
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'filter',1}}] )
	    -| ['compiler_generated'] )
	end
'filter'/2 =
    %% Line 81
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Filters,FDates>
	      when try
		    ( case <> of
			( <>
			      when call 'erlang':'is_list'
				    (Filters) ->
			      call 'erlang':'is_tuple'
				  (FDates)
			  -| ['compiler_generated'] )
			( <> when 'true' ->
			      'false'
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 82
	      apply 'call'/1
		  ({'filter',{Filters,FDates}})
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'filter',2}}] )
	    -| ['compiler_generated'] )
	end
'start_log'/1 =
    %% Line 84
    fun (_cor0) ->
	apply 'call'/1
	    ({'start_log',_cor0})
'stop_log'/0 =
    %% Line 86
    fun () ->
	apply 'call'/1
	    ('stop_log')
'h'/0 =
    %% Line 88
    fun () ->
	apply 'help'/0
	    ()
'help'/0 =
    %% Line 89
    fun () ->
	do  %% Line 90
	    call 'io':'format'
		([126|[110|[82|[101|[112|[111|[114|[116|[32|[66|[114|[111|[119|[115|[101|[114|[32|[84|[111|[111|[108|[32|[45|[32|[117|[115|[97|[103|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	    do  %% Line 91
		call 'io':'format'
		    ([61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[61|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
		do  %% Line 92
		    call 'io':'format'
			([114|[98|[58|[115|[116|[97|[114|[116|[40|[41|[32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[115|[116|[97|[114|[116|[32|[116|[104|[101|[32|[114|[98|[95|[115|[101|[114|[118|[101|[114|[32|[119|[105|[116|[104|[32|[100|[101|[102|[97|[117|[108|[116|[32|[111|[112|[116|[105|[111|[110|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
		    do  %% Line 93
			call 'io':'format'
			    ([114|[98|[58|[115|[116|[97|[114|[116|[40|[79|[112|[116|[105|[111|[110|[115|[41|[32|[32|[45|[32|[119|[104|[101|[114|[101|[32|[79|[112|[116|[105|[111|[110|[115|[32|[105|[115|[32|[97|[32|[108|[105|[115|[116|[32|[111|[102|[58|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
			do  %% Line 94
			    apply 'print_options'/0
				()
			    do  %% Line 95
				call 'io':'format'
				    ([114|[98|[58|[104|[40|[41|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[112|[114|[105|[110|[116|[32|[116|[104|[105|[115|[32|[104|[101|[108|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
				do  %% Line 96
				    call 'io':'format'
					([114|[98|[58|[104|[101|[108|[112|[40|[41|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[112|[114|[105|[110|[116|[32|[116|[104|[105|[115|[32|[104|[101|[108|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
				    do  %% Line 97
					call 'io':'format'
					    ([114|[98|[58|[108|[105|[115|[116|[40|[41|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[108|[105|[115|[116|[32|[97|[108|[108|[32|[114|[101|[112|[111|[114|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
					do  %% Line 98
					    call 'io':'format'
						([114|[98|[58|[108|[105|[115|[116|[40|[84|[121|[112|[101|[41|[32|[32|[32|[32|[32|[32|[45|[32|[108|[105|[115|[116|[32|[97|[108|[108|[32|[114|[101|[112|[111|[114|[116|[115|[32|[111|[102|[32|[116|[121|[112|[101|[32|[84|[121|[112|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
					    do  %% Line 99
						call 'io':'format'
						    ([114|[98|[58|[108|[111|[103|[95|[108|[105|[115|[116|[40|[41|[32|[32|[32|[32|[32|[32|[45|[32|[108|[111|[103|[32|[108|[105|[115|[116|[32|[111|[102|[32|[97|[108|[108|[32|[114|[101|[112|[111|[114|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
						do  %% Line 100
						    call 'io':'format'
							([114|[98|[58|[108|[111|[103|[95|[108|[105|[115|[116|[40|[84|[121|[112|[101|[41|[32|[32|[45|[32|[108|[111|[103|[32|[108|[105|[115|[116|[32|[111|[102|[32|[97|[108|[108|[32|[114|[101|[112|[111|[114|[116|[115|[32|[111|[102|[32|[116|[121|[112|[101|[32|[84|[121|[112|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
						    do  %% Line 101
							call 'io':'format'
							    ([32|[32|[32|[32|[32|[32|[99|[117|[114|[114|[101|[110|[116|[108|[121|[32|[115|[117|[112|[112|[111|[114|[116|[101|[100|[32|[116|[121|[112|[101|[115|[32|[97|[114|[101|[58|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
							do  %% Line 102
							    apply 'print_types'/0
								()
							    do  %% Line 103
								call 'io':'format'
								    ([114|[98|[58|[103|[114|[101|[112|[40|[82|[101|[103|[69|[120|[112|[41|[32|[32|[32|[32|[32|[32|[45|[32|[112|[114|[105|[110|[116|[32|[114|[101|[112|[111|[114|[116|[115|[32|[99|[111|[110|[116|[97|[105|[110|[105|[110|[103|[32|[82|[101|[103|[69|[120|[112|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
								do  %% Line 104
								    call 'io':'format'
									([32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[82|[101|[103|[69|[120|[112|[32|[109|[117|[115|[116|[32|[98|[101|[32|[97|[32|[118|[97|[108|[105|[100|[32|[97|[114|[103|[117|[109|[101|[110|[116|[32|[102|[111|[114|[32|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
								    do  %% Line 105
									call 'io':'format'
									    ([32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[116|[104|[101|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[114|[101|[58|[114|[117|[110|[47|[50|[32|[111|[114|[32|[114|[101|[58|[114|[117|[110|[47|[51|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
									do  %% Line 106
									    call 'io':'format'
										([114|[98|[58|[102|[105|[108|[116|[101|[114|[40|[70|[105|[108|[116|[101|[114|[115|[41|[32|[45|[32|[112|[114|[105|[110|[116|[32|[114|[101|[112|[111|[114|[116|[115|[32|[109|[97|[116|[99|[104|[105|[110|[103|[32|[70|[105|[108|[116|[101|[114|[115|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
									    do  %% Line 107
										call 'io':'format'
										    ([32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[114|[101|[112|[111|[114|[116|[115|[32|[109|[117|[115|[116|[32|[98|[101|[32|[112|[114|[111|[112|[108|[105|[115|[116|[115|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
										do  %% Line 108
										    call 'io':'format'
											([32|[32|[32|[32|[32|[32|[70|[105|[108|[116|[101|[114|[115|[32|[105|[115|[32|[97|[32|[108|[105|[115|[116|[32|[111|[102|[32|[116|[117|[112|[108|[101|[115|[32|[111|[102|[32|[116|[104|[101|[32|[102|[111|[108|[108|[111|[119|[105|[110|[103|[32|[102|[111|[114|[109|[58|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
										    do  %% Line 109
											apply 'print_filters'/0
											    ()
											do  %% Line 110
											    call 'io':'format'
												([114|[98|[58|[102|[105|[108|[116|[101|[114|[40|[70|[105|[108|[116|[101|[114|[115|[44|[32|[68|[97|[116|[101|[115|[41|[32|[32|[45|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
											    do  %% Line 111
												call 'io':'format'
												    ([32|[32|[32|[32|[32|[32|[115|[97|[109|[101|[32|[97|[115|[32|[114|[98|[58|[102|[105|[108|[116|[101|[114|[47|[49|[32|[98|[117|[116|[32|[97|[99|[99|[101|[112|[116|[115|[32|[100|[97|[116|[101|[32|[114|[97|[110|[103|[101|[115|[32|[116|[111|[32|[102|[105|[108|[116|[101|[114|[32|[114|[101|[112|[111|[114|[116|[115|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
												do  %% Line 112
												    call 'io':'format'
													([32|[32|[32|[32|[32|[32|[68|[97|[116|[101|[115|[32|[109|[117|[115|[116|[32|[98|[101|[32|[111|[102|[32|[116|[104|[101|[32|[102|[111|[108|[108|[111|[119|[105|[110|[103|[32|[102|[111|[114|[109|[58|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
												    do  %% Line 113
													apply 'print_dates'/0
													    ()
													do  %% Line 114
													    call 'io':'format'
														([114|[98|[58|[114|[101|[115|[99|[97|[110|[40|[41|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[114|[101|[115|[99|[97|[110|[115|[32|[116|[104|[101|[32|[114|[101|[112|[111|[114|[116|[32|[100|[105|[114|[101|[99|[116|[111|[114|[121|[32|[119|[105|[116|[104|[32|[115|[97|[109|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
													    do  %% Line 115
														call 'io':'format'
														    ([32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[111|[112|[116|[105|[111|[110|[115|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
														do  %% Line 116
														    call 'io':'format'
															([114|[98|[58|[114|[101|[115|[99|[97|[110|[40|[79|[112|[116|[105|[111|[110|[115|[41|[32|[45|[32|[114|[101|[115|[99|[97|[110|[115|[32|[116|[104|[101|[32|[114|[101|[112|[111|[114|[116|[32|[100|[105|[114|[101|[99|[116|[111|[114|[121|[32|[119|[105|[116|[104|[32|[110|[101|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
														    do  %% Line 117
															call 'io':'format'
															    ([32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[111|[112|[116|[105|[111|[110|[115|[46|[32|[79|[112|[116|[105|[111|[110|[115|[32|[105|[115|[32|[115|[97|[109|[101|[32|[97|[115|[32|[105|[110|[32|[115|[116|[97|[114|[116|[47|[49|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
															do  %% Line 118
															    call 'io':'format'
																([114|[98|[58|[115|[104|[111|[119|[40|[78|[117|[109|[98|[101|[114|[41|[32|[32|[32|[32|[45|[32|[112|[114|[105|[110|[116|[32|[114|[101|[112|[111|[114|[116|[32|[110|[111|[32|[78|[117|[109|[98|[101|[114|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
															    do  %% Line 119
																call 'io':'format'
																    ([114|[98|[58|[115|[104|[111|[119|[40|[84|[121|[112|[101|[41|[32|[32|[32|[32|[32|[32|[45|[32|[112|[114|[105|[110|[116|[32|[97|[108|[108|[32|[114|[101|[112|[111|[114|[116|[115|[32|[111|[102|[32|[116|[121|[112|[101|[32|[84|[121|[112|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
																do  %% Line 120
																    call 'io':'format'
																	([114|[98|[58|[115|[104|[111|[119|[40|[41|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[112|[114|[105|[110|[116|[32|[97|[108|[108|[32|[114|[101|[112|[111|[114|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
																    do  %% Line 121
																	call 'io':'format'
																	    ([114|[98|[58|[115|[116|[97|[114|[116|[95|[108|[111|[103|[40|[70|[105|[108|[101|[41|[32|[45|[32|[114|[101|[100|[105|[114|[101|[99|[116|[32|[97|[108|[108|[32|[114|[101|[112|[111|[114|[116|[115|[32|[116|[111|[32|[102|[105|[108|[101|[32|[111|[114|[32|[105|[111|[95|[100|[101|[118|[105|[99|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
																	do  %% Line 122
																	    call 'io':'format'
																		([114|[98|[58|[115|[116|[111|[112|[95|[108|[111|[103|[40|[41|[32|[32|[32|[32|[32|[32|[45|[32|[99|[108|[111|[115|[101|[32|[116|[104|[101|[32|[108|[111|[103|[32|[102|[105|[108|[101|[32|[97|[110|[100|[32|[114|[101|[100|[105|[114|[101|[99|[116|[32|[116|[111|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
																	    do  %% Line 123
																		call 'io':'format'
																		    ([32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[115|[116|[97|[110|[100|[97|[114|[100|[95|[105|[111|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
																		%% Line 124
																		call 'io':'format'
																		    ([114|[98|[58|[115|[116|[111|[112|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[115|[116|[111|[112|[32|[116|[104|[101|[32|[114|[98|[95|[115|[101|[114|[118|[101|[114|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
'call'/1 =
    %% Line 133
    fun (_cor0) ->
	%% Line 134
	call 'gen_server':'call'
	    ('rb_server', _cor0, 'infinity')
'print_options'/0 =
    %% Line 139
    fun () ->
	do  %% Line 140
	    call 'io':'format'
		([32|[32|[32|[32|[32|[32|[123|[115|[116|[97|[114|[116|[95|[108|[111|[103|[44|[32|[70|[105|[108|[101|[78|[97|[109|[101|[125|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	    do  %% Line 141
		call 'io':'format'
		    ([32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[100|[101|[102|[97|[117|[108|[116|[58|[32|[115|[116|[97|[110|[100|[97|[114|[100|[95|[105|[111|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
		do  %% Line 142
		    call 'io':'format'
			([32|[32|[32|[32|[32|[32|[123|[109|[97|[120|[44|[32|[77|[97|[120|[78|[111|[79|[102|[82|[101|[112|[111|[114|[116|[115|[125|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
		    do  %% Line 143
			call 'io':'format'
			    ([32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[77|[97|[120|[78|[111|[79|[102|[82|[101|[112|[111|[114|[116|[115|[32|[115|[104|[111|[117|[108|[100|[32|[98|[101|[32|[97|[110|[32|[105|[110|[116|[101|[103|[101|[114|[32|[111|[114|[32|[39|[97|[108|[108|[39|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
			do  %% Line 144
			    call 'io':'format'
				([32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[100|[101|[102|[97|[117|[108|[116|[58|[32|[97|[108|[108|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]])
			    do  %% Line 145
				call 'io':'format'
				    ([32|[32|[32|[32|[32|[32|[123|[114|[101|[112|[111|[114|[116|[95|[100|[105|[114|[44|[32|[68|[105|[114|[83|[116|[114|[105|[110|[103|[125|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
				do  %% Line 146
				    call 'io':'format'
					([32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[68|[105|[114|[83|[116|[114|[105|[110|[103|[32|[115|[104|[111|[117|[108|[100|[32|[98|[101|[32|[97|[32|[115|[116|[114|[105|[110|[103|[32|[119|[105|[116|[104|[111|[117|[116|[32|[116|[114|[97|[105|[108|[105|[110|[103|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
				    do  %% Line 147
					call 'io':'format'
					    ([32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[100|[105|[114|[101|[99|[116|[111|[114|[121|[32|[100|[101|[108|[105|[109|[105|[116|[101|[114|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
					do  %% Line 148
					    call 'io':'format'
						([32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[100|[101|[102|[97|[117|[108|[116|[58|[32|[123|[115|[97|[115|[108|[44|[32|[101|[114|[114|[111|[114|[95|[108|[111|[103|[103|[101|[114|[95|[109|[102|[95|[100|[105|[114|[125|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
					    do  %% Line 149
						call 'io':'format'
						    ([32|[32|[32|[32|[32|[32|[123|[116|[121|[112|[101|[44|[32|[82|[101|[112|[111|[114|[116|[84|[121|[112|[101|[125|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]])
						do  %% Line 150
						    call 'io':'format'
							([32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[82|[101|[112|[111|[114|[116|[84|[121|[112|[101|[32|[115|[104|[111|[117|[108|[100|[32|[98|[101|[32|[97|[32|[115|[117|[112|[112|[111|[114|[116|[101|[100|[32|[116|[121|[112|[101|[44|[32|[39|[97|[108|[108|[39|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
						    do  %% Line 151
							call 'io':'format'
							    ([32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[111|[114|[32|[97|[32|[108|[105|[115|[116|[32|[111|[102|[32|[115|[117|[112|[112|[111|[114|[116|[101|[100|[32|[116|[121|[112|[101|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
							do  %% Line 152
							    call 'io':'format'
								([32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[100|[101|[102|[97|[117|[108|[116|[58|[32|[97|[108|[108|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]])
							    do  %% Line 153
								call 'io':'format'
								    ([32|[32|[32|[32|[32|[32|[123|[97|[98|[111|[114|[116|[95|[111|[110|[95|[101|[114|[114|[111|[114|[44|[32|[66|[111|[111|[108|[125|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
								do  %% Line 154
								    call 'io':'format'
									([32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[66|[111|[111|[108|[58|[32|[116|[114|[117|[101|[32|[124|[32|[102|[97|[108|[115|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
								    %% Line 155
								    call 'io':'format'
									([32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[100|[101|[102|[97|[117|[108|[116|[58|[32|[102|[97|[108|[115|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]])
'print_types'/0 =
    %% Line 157
    fun () ->
	do  %% Line 158
	    call 'io':'format'
		([32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[99|[114|[97|[115|[104|[95|[114|[101|[112|[111|[114|[116|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]])
	    do  %% Line 159
		call 'io':'format'
		    ([32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[95|[114|[101|[112|[111|[114|[116|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
		do  %% Line 160
		    call 'io':'format'
			([32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[112|[114|[111|[103|[114|[101|[115|[115|[126|[110]]]]]]]]]]]]]]]]]]]]])
		    %% Line 161
		    call 'io':'format'
			([32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[101|[114|[114|[111|[114|[126|[110]]]]]]]]]]]]]]]]]])
'print_filters'/0 =
    %% Line 163
    fun () ->
	do  %% Line 164
	    call 'io':'format'
		([32|[32|[32|[32|[32|[32|[45|[32|[123|[75|[101|[121|[44|[32|[86|[97|[108|[117|[101|[125|[126|[110]]]]]]]]]]]]]]]]]]]]]])
	    do  %% Line 165
		call 'io':'format'
		    ([32|[32|[32|[32|[32|[32|[32|[32|[105|[110|[99|[108|[117|[100|[101|[115|[32|[114|[101|[112|[111|[114|[116|[32|[99|[111|[110|[116|[97|[105|[110|[105|[110|[103|[32|[123|[75|[101|[121|[44|[32|[86|[97|[108|[117|[101|[125|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
		do  %% Line 166
		    call 'io':'format'
			([32|[32|[32|[32|[32|[32|[45|[32|[123|[75|[101|[121|[44|[32|[86|[97|[108|[117|[101|[44|[32|[110|[111|[125|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]])
		    do  %% Line 167
			call 'io':'format'
			    ([32|[32|[32|[32|[32|[32|[32|[32|[101|[120|[99|[108|[117|[100|[101|[115|[32|[114|[101|[112|[111|[114|[116|[32|[99|[111|[110|[116|[97|[105|[110|[105|[110|[103|[32|[123|[75|[101|[121|[44|[32|[86|[97|[108|[117|[101|[125|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
			do  %% Line 168
			    call 'io':'format'
				([32|[32|[32|[32|[32|[32|[45|[32|[123|[75|[101|[121|[44|[32|[82|[101|[103|[69|[120|[112|[44|[32|[114|[101|[125|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]])
			    do  %% Line 169
				call 'io':'format'
				    ([32|[32|[32|[32|[32|[32|[32|[32|[82|[101|[103|[69|[120|[112|[32|[109|[117|[115|[116|[32|[98|[101|[32|[97|[32|[118|[97|[108|[105|[100|[32|[97|[114|[103|[117|[109|[101|[110|[116|[32|[102|[111|[114|[32|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
				do  %% Line 170
				    call 'io':'format'
					([32|[32|[32|[32|[32|[32|[32|[32|[116|[104|[101|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[114|[101|[58|[114|[117|[110|[47|[50|[32|[111|[114|[32|[114|[101|[58|[114|[117|[110|[47|[51|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
				    do  %% Line 171
					call 'io':'format'
					    ([32|[32|[32|[32|[32|[32|[45|[32|[123|[75|[101|[121|[44|[32|[82|[101|[103|[69|[120|[112|[44|[32|[114|[101|[44|[32|[110|[111|[125|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
					%% Line 172
					call 'io':'format'
					    ([32|[32|[32|[32|[32|[32|[32|[32|[101|[120|[99|[108|[117|[100|[101|[115|[32|[114|[101|[112|[111|[114|[116|[32|[99|[111|[110|[116|[97|[105|[110|[105|[110|[103|[32|[123|[75|[101|[121|[44|[32|[82|[101|[103|[69|[120|[112|[125|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
'print_dates'/0 =
    %% Line 174
    fun () ->
	do  %% Line 175
	    call 'io':'format'
		([32|[32|[32|[32|[32|[32|[45|[32|[123|[83|[116|[97|[114|[116|[68|[97|[116|[101|[44|[32|[69|[110|[100|[68|[97|[116|[101|[125|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	    do  %% Line 176
		call 'io':'format'
		    ([32|[32|[32|[32|[32|[32|[32|[32|[83|[116|[97|[114|[116|[68|[97|[116|[101|[32|[61|[32|[69|[110|[100|[68|[97|[116|[101|[32|[61|[32|[123|[123|[89|[44|[77|[44|[68|[125|[44|[123|[72|[44|[77|[44|[83|[125|[125|[32|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
		do  %% Line 177
		    call 'io':'format'
			([32|[32|[32|[32|[32|[32|[32|[32|[112|[114|[105|[110|[116|[115|[32|[116|[104|[101|[32|[114|[101|[112|[111|[114|[116|[115|[32|[119|[105|[116|[104|[32|[100|[97|[116|[101|[32|[98|[101|[116|[119|[101|[101|[110|[32|[83|[116|[97|[114|[116|[68|[97|[116|[101|[32|[97|[110|[100|[32|[69|[110|[100|[68|[97|[116|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
		    do  %% Line 178
			call 'io':'format'
			    ([32|[32|[32|[32|[32|[32|[45|[32|[123|[83|[116|[97|[114|[116|[68|[97|[116|[101|[44|[32|[102|[114|[111|[109|[125|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]])
			do  %% Line 179
			    call 'io':'format'
				([32|[32|[32|[32|[32|[32|[32|[32|[112|[114|[105|[110|[116|[115|[32|[116|[104|[101|[32|[114|[101|[112|[111|[114|[116|[115|[32|[119|[105|[116|[104|[32|[100|[97|[116|[101|[32|[103|[114|[101|[97|[116|[101|[114|[32|[116|[104|[97|[110|[32|[83|[116|[97|[114|[116|[68|[97|[116|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
			    do  %% Line 180
				call 'io':'format'
				    ([32|[32|[32|[32|[32|[32|[45|[32|[123|[69|[110|[100|[68|[97|[116|[101|[44|[32|[116|[111|[125|[126|[110]]]]]]]]]]]]]]]]]]]]]]])
				%% Line 181
				call 'io':'format'
				    ([32|[32|[32|[32|[32|[32|[32|[32|[112|[114|[105|[110|[116|[115|[32|[116|[104|[101|[32|[114|[101|[112|[111|[114|[116|[115|[32|[119|[105|[116|[104|[32|[100|[97|[116|[101|[32|[108|[101|[115|[115|[101|[114|[32|[116|[104|[97|[110|[32|[83|[116|[97|[114|[116|[68|[97|[116|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
'init'/1 =
    %% Line 183
    fun (_cor0) ->
	do  %% Line 184
	    call 'erlang':'process_flag'
		('priority', 'low')
	    do  %% Line 185
		call 'erlang':'process_flag'
		    ('trap_exit', 'true')
		let <Log> =
		    %% Line 186
		    apply 'get_option'/3
			(_cor0, 'start_log', 'standard_io')
		in  let <Device> =
			%% Line 187
			apply 'open_log_file'/1
			    (Log)
		    in  let <Dir> =
			    %% Line 188
			    apply 'get_report_dir'/1
				(_cor0)
			in  let <Max> =
				%% Line 189
				apply 'get_option'/3
				    (_cor0, 'max', 'all')
			    in  let <Type> =
				    %% Line 190
				    apply 'get_option'/3
					(_cor0, 'type', 'all')
				in  let <Abort> =
					%% Line 191
					apply 'get_option'/3
					    (_cor0, 'abort_on_error', 'false')
				    in  let <_cor7> =
					    %% Line 192
					    call 'erlang':'++'
						(Dir, [47])
					in  let <Data> =
						%% Line 192
						apply 'scan_files'/3
						    (_cor7, Max, Type)
					    in  let <_cor9> =
						    %% Line 193
						    call 'erlang':'++'
							(Dir, [47])
						in  %% Line 193
						    {'ok',{'state',_cor9,Data,Device,%% Line 194
										     Max,%% Line 194
											 Type,%% Line 194
											      Abort,%% Line 194
												    Log}}
'handle_call'/3 =
    %% Line 196
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'rescan',Options},_X_From,State> when 'true' ->
	      let <Device,Log1> =
		  %% Line 198
		  case apply 'get_option'/3
			   (Options, 'start_log', {'undefined'}) of
		    %% Line 199
		    <{'undefined'}> when 'true' ->
			%% Line 200
			( case State of
			    ( <( {'state',_cor78,_cor79,_rec0,_cor80,_cor81,_cor82,_cor83}
				 -| ['compiler_generated'] )> when 'true' ->
				  <_rec0,_cor83>
			      -| ['compiler_generated'] )
			    ( <_cor84> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 201
		    <Log> when 'true' ->
			%% Line 202
			( case State of
			    ( <( {'state',_cor92,_cor93,_rec2,_cor94,_cor95,_cor96,_cor97}
				 -| ['compiler_generated'] )> when 'true' ->
				  do  apply 'close_device'/1
					  (_rec2)
				      let <_cor9> =
					  %% Line 203
					  apply 'open_log_file'/1
					      (Log)
				      in  <_cor9,%% Line 203
						 Log>
			      -| ['compiler_generated'] )
			    ( <_cor98> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		  end
	      in  %% Line 205
		  ( case State of
		      ( <( {'state',_cor99,_cor100,_cor101,_rec3,_cor102,_cor103,_cor104}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <Max> =
				apply 'get_option'/3
				    (Options, 'max', _rec3)
			    in  let <Type> =
				    %% Line 206
				    apply 'get_option'/3
					(Options, 'type', _cor102)
				in  let <Abort> =
					%% Line 207
					apply 'get_option'/3
					    (Options, 'abort_on_error', 'false')
				    in  let <Data> =
					    %% Line 208
					    apply 'scan_files'/3
						(_cor99, Max, Type)
					in  let <_cor25> =
						%% Line 210
						{'state',_cor99,Data,Device,Max,Type,Abort,Log1}
					    in  %% Line 211
						{'reply','ok',_cor25}
			-| ['compiler_generated'] )
		      ( <_cor105> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 212
	  <_cor121,_X_From,{'state',_cor122,'undefined',_cor123,_cor124,_cor125,_cor126,_cor127}> when 'true' ->
	      %% Line 213
	      {'reply',{'error','no_data'},{'state','undefined','undefined','undefined','undefined','undefined','undefined','undefined'}}
	  %% Line 214
	  <{'list',Type},_X_From,State> when 'true' ->
	      %% Line 215
	      ( case State of
		  ( <( {'state',_cor128,_rec14,_cor129,_cor130,_cor131,_cor132,_cor133}
		       -| ['compiler_generated'] )> when 'true' ->
			do  apply 'print_list'/3
				('standard_io', _rec14, Type)
			    %% Line 216
			    {'reply','ok',State}
		    -| ['compiler_generated'] )
		  ( <_cor134> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 217
	  <{'log_list',Type},_X_From,State> when 'true' ->
	      %% Line 218
	      ( case State of
		  ( <( {'state',_cor135,_cor136,_rec15,_cor137,_cor138,_cor139,_cor140}
		       -| ['compiler_generated'] )> when 'true' ->
			do  apply 'print_list'/3
				(_rec15, _cor136, Type)
			    %% Line 219
			    {'reply','ok',State}
		    -| ['compiler_generated'] )
		  ( <_cor141> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 220
	  <{'start_log',FileName},_X_From,State> when 'true' ->
	      let <NewDevice> =
		  %% Line 221
		  apply 'open_log_file'/1
		      (FileName)
	      in  %% Line 222
		  case State of
		    <{'state',_cor149,_cor150,_cor151,_cor152,_cor153,_cor154,_cor155}> when 'true' ->
			let <_cor36> =
			    call 'erlang':'setelement'
				(4, State, NewDevice)
			in  {'reply','ok',_cor36}
		    ( <_cor156> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','state'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	  %% Line 223
	  <'stop_log',_X_From,State> when 'true' ->
	      %% Line 224
	      ( case State of
		  ( <( {'state',_cor157,_cor158,_rec18,_cor159,_cor160,_cor161,_cor162}
		       -| ['compiler_generated'] )> when 'true' ->
			do  apply 'close_device'/1
				(_rec18)
			    let <_cor41> =
				%% Line 225
				call 'erlang':'setelement'
				    (4, State, 'standard_io')
			    in  %% Line 225
				{'reply','ok',_cor41}
		    -| ['compiler_generated'] )
		  ( <_cor163> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 226
	  <{'show_number',Number},_X_From,State> when 'true' ->
	      %% Line 227
	      case State of
		<{'state',Dir,Data,Device,_cor172,_cor173,Abort,Log}> when 'true' ->
		    let <NewDevice> =
			%% Line 228
			apply 'print_report_by_num'/6
			    (Dir, Data, Number, Device, Abort, Log)
		    in  let <_cor46> =
			    %% Line 229
			    call 'erlang':'setelement'
				(4, State, NewDevice)
			in  %% Line 229
			    {'reply','ok',_cor46}
		( <_cor42> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor42})
		  -| ['compiler_generated'] )
	      end
	  %% Line 230
	  <{'show_type',Type},_X_From,State> when 'true' ->
	      %% Line 231
	      case State of
		<{'state',Dir,Data,Device,_cor182,_cor183,Abort,Log}> when 'true' ->
		    let <NewDevice> =
			%% Line 232
			apply 'print_typed_reports'/6
			    (Dir, Data, Type, Device, Abort, Log)
		    in  let <_cor51> =
			    %% Line 233
			    call 'erlang':'setelement'
				(4, State, NewDevice)
			in  %% Line 233
			    {'reply','ok',_cor51}
		( <_cor47> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor47})
		  -| ['compiler_generated'] )
	      end
	  %% Line 234
	  <'show',_X_From,State> when 'true' ->
	      %% Line 235
	      case State of
		<{'state',Dir,Data,Device,_cor192,_cor193,Abort,Log}> when 'true' ->
		    let <NewDevice> =
			%% Line 236
			apply 'print_all_reports'/5
			    (Dir, Data, Device, Abort, Log)
		    in  let <_cor56> =
			    %% Line 237
			    call 'erlang':'setelement'
				(4, State, NewDevice)
			in  %% Line 237
			    {'reply','ok',_cor56}
		( <_cor52> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor52})
		  -| ['compiler_generated'] )
	      end
	  %% Line 238
	  <{'grep',RegExp},_X_From,State> when 'true' ->
	      %% Line 239
	      case State of
		<{'state',Dir,Data,Device,_cor202,_cor203,Abort,Log}> when 'true' ->
		    %% Line 240
		    try
			apply 'print_grep_reports'/6
			    (Dir, Data, RegExp, Device, Abort, Log)
		    of <_cor58> ->
			let <_cor61> =
			    %% Line 242
			    call 'erlang':'setelement'
				(4, State, _cor58)
			in  %% Line 242
			    {'reply','ok',_cor61}
		    catch <_cor65,_cor64,_cor63> ->
			case <_cor65,_cor64,_cor63> of
			  %% Line 244
			  <'error',Error,_cor212> when 'true' ->
			      %% Line 245
			      {'reply',{'error',Error},State}
			  ( <_cor65,_cor64,_cor63> when 'true' ->
				primop 'raise'
				    (_cor63, _cor64)
			    -| ['compiler_generated'] )
			end
		( <_cor57> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor57})
		  -| ['compiler_generated'] )
	      end
	  %% Line 247
	  <{'filter',Filters},_X_From,State> when 'true' ->
	      %% Line 248
	      case State of
		<{'state',Dir,Data,Device,_cor213,_cor214,Abort,Log}> when 'true' ->
		    %% Line 249
		    try
			apply 'filter_all_reports'/6
			    (Dir, Data, Filters, Device, Abort, Log)
		    of <_cor67> ->
			let <_cor70> =
			    %% Line 251
			    call 'erlang':'setelement'
				(4, State, _cor67)
			in  %% Line 251
			    {'reply','ok',_cor70}
		    catch <_cor74,_cor73,_cor72> ->
			case <_cor74,_cor73,_cor72> of
			  %% Line 253
			  <'error',Error,_cor223> when 'true' ->
			      %% Line 254
			      {'reply',{'error',Error},State}
			  ( <_cor74,_cor73,_cor72> when 'true' ->
				primop 'raise'
				    (_cor72, _cor73)
			    -| ['compiler_generated'] )
			end
		( <_cor66> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor66})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor77,_cor76,_cor75> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor77,_cor76,_cor75})
		  -| [{'function_name',{'handle_call',3}}] )
	    -| ['compiler_generated'] )
	end
'terminate'/2 =
    %% Line 257
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Reason,{'state',_cor4,_cor5,Device,_cor6,_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 258
	      apply 'close_device'/1
		  (Device)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'terminate',2}}] )
	    -| ['compiler_generated'] )
	end
'handle_cast'/2 =
    %% Line 260
    fun (_cor1,_cor0) ->
	%% Line 261
	{'noreply',_cor0}
'handle_info'/2 =
    %% Line 262
    fun (_cor1,_cor0) ->
	%% Line 263
	{'noreply',_cor0}
'code_change'/3 =
    %% Line 264
    fun (_cor2,_cor1,_cor0) ->
	%% Line 265
	{'ok',_cor1}
'open_log_file'/1 =
    %% Line 272
    fun (_cor0) ->
	case _cor0 of
	  <'standard_io'> when 'true' ->
	      'standard_io'
	  %% Line 273
	  <Fd>
	      when let <_cor1> =
		    call 'erlang':'is_atom'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'=/='
			    (_cor0, 'standard_error')
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      %% Line 274
	      case call 'erlang':'whereis'
		       (Fd) of
		%% Line 275
		<'undefined'> when 'true' ->
		    do  call 'io':'format'
			    ([114|[98|[58|[32|[82|[101|[103|[105|[115|[116|[101|[114|[101|[100|[32|[110|[97|[109|[101|[32|[110|[111|[116|[32|[102|[111|[117|[110|[100|[32|[39|[126|[115|[39|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 276
																														[Fd|[]])
			do  %% Line 277
			    call 'io':'format'
				([114|[98|[58|[32|[85|[115|[105|[110|[103|[32|[115|[116|[97|[110|[100|[97|[114|[100|[95|[105|[111|[126|[110]]]]]]]]]]]]]]]]]]]]]]])
			    %% Line 278
			    apply 'open_log_file'/1
				('standard_io')
		%% Line 279
		<Pid> when 'true' ->
		    apply 'open_log_file'/1
			(Pid)
	      end
	  %% Line 281
	  <Fd>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      Fd
	  %% Line 282
	  <FileName>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 283
	      case call 'file':'open'
		       (FileName, ['write'|['append']]) of
		%% Line 284
		<{'ok',Fd}> when 'true' ->
		    Fd
		%% Line 285
		<Error> when 'true' ->
		    do  %% Line 286
			call 'io':'format'
			    ([114|[98|[58|[32|[67|[97|[110|[110|[111|[116|[32|[111|[112|[101|[110|[32|[102|[105|[108|[101|[32|[39|[126|[115|[39|[32|[40|[126|[119|[41|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 287
																										      [FileName|[Error|[]]])
			do  %% Line 288
			    call 'io':'format'
				([114|[98|[58|[32|[85|[115|[105|[110|[103|[32|[115|[116|[97|[110|[100|[97|[114|[100|[95|[105|[111|[126|[110]]]]]]]]]]]]]]]]]]]]]]])
			    %% Line 289
			    'standard_io'
	      end
	  %% Line 291
	  <'standard_error'> when 'true' ->
	      do  %% Line 292
		  call 'io':'format'
		      ([114|[98|[58|[32|[85|[115|[105|[110|[103|[32|[115|[116|[97|[110|[100|[97|[114|[100|[95|[105|[111|[126|[110]]]]]]]]]]]]]]]]]]]]]]])
		  %% Line 293
		  'standard_io'
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'open_log_file',1}}] )
	    -| ['compiler_generated'] )
	end
'close_device'/1 =
    %% Line 295
    fun (_cor0) ->
	case _cor0 of
	  <Fd>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      catch
		  %% Line 296
		  call 'file':'close'
		      (Fd)
	  %% Line 297
	  <_cor2> when 'true' ->
	      'ok'
	end
'get_option'/3 =
    %% Line 299
    fun (_cor2,_cor1,_cor0) ->
	%% Line 300
	case call 'lists':'keysearch'
		 (_cor1, 1, _cor2) of
	  %% Line 301
	  <{'value',{_X_Key,Value}}> when 'true' ->
	      Value
	  %% Line 302
	  <_cor7> when 'true' ->
	      _cor0
	end
'get_report_dir'/1 =
    %% Line 305
    fun (_cor0) ->
	%% Line 306
	case call 'lists':'keysearch'
		 ('report_dir', 1, _cor0) of
	  %% Line 307
	  <{'value',{_X_Key,RptDir}}> when 'true' ->
	      RptDir
	  %% Line 308
	  <_cor5> when 'true' ->
	      let <_cor1> =
		  catch
		      %% Line 309
		      call 'application':'get_env'
			  ('sasl', 'error_logger_mf_dir')
	      in  %% Line 309
		  case _cor1 of
		    %% Line 310
		    <{'ok',Dir}> when 'true' ->
			Dir
		    %% Line 311
		    <_cor6> when 'true' ->
			%% Line 312
			call 'erlang':'exit'
			    ([99|[97|[110|[110|[111|[116|[32|[108|[111|[99|[97|[116|[101|[32|[114|[101|[112|[111|[114|[116|[32|[100|[105|[114|[101|[99|[116|[111|[114|[121]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
		  end
	end
'scan_files'/3 =
    %% Line 327
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 328
	    call 'erlang':'++'
		(_cor2, [47|[105|[110|[100|[101|[120]]]]]])
	in  %% Line 328
	    case call 'file':'open'
		     (_cor3, ['raw'|['read']]) of
	      %% Line 329
	      <{'ok',Fd}> when 'true' ->
		  let <_cor4> =
		      catch
			  %% Line 330
			  call 'file':'read'
			      (Fd, 1)
		  in  %% Line 330
		      case _cor4 of
			%% Line 331
			<{'ok',[LastWritten|[]]}> when 'true' ->
			    %% Line 332
			    case call 'file':'close'
				     (Fd) of
			      <'ok'> when 'true' ->
				  let <Files> =
				      %% Line 333
				      apply 'make_file_list'/2
					  (_cor2, LastWritten)
				  in  %% Line 334
				      apply 'scan_files'/4
					  (_cor2, Files, _cor1, _cor0)
			      ( <_cor5> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor5})
				-| ['compiler_generated'] )
			    end
			%% Line 335
			<_X_X> when 'true' ->
			    let <_X_> =
				%% Line 336
				( call 'file':'close'
				      (Fd)
				  -| ['result_not_wanted'] )
			    in  %% Line 337
				call 'erlang':'exit'
				    ([99|[97|[110|[110|[111|[116|[32|[114|[101|[97|[100|[32|[116|[104|[101|[32|[105|[110|[100|[101|[120|[32|[102|[105|[108|[101]]]]]]]]]]]]]]]]]]]]]]]]]])
		      end
	      %% Line 339
	      <_X_X> when 'true' ->
		  call 'erlang':'exit'
		      ([99|[97|[110|[110|[111|[116|[32|[114|[101|[97|[100|[32|[116|[104|[101|[32|[105|[110|[100|[101|[120|[32|[102|[105|[108|[101]]]]]]]]]]]]]]]]]]]]]]]]]])
	    end
'make_file_list'/2 =
    %% Line 342
    fun (_cor1,_cor0) ->
	%% Line 343
	case call 'file':'list_dir'
		 (_cor1) of
	  %% Line 344
	  <{'ok',FileNames}> when 'true' ->
	      let <_cor6> =
		  %% Line 345
		  ( fun (_cor4) ->
			let <_cor2> =
			    catch
				%% Line 346
				call 'erlang':'list_to_integer'
				    (_cor4)
			in  %% Line 346
			    case _cor2 of
			      %% Line 347
			      <Int>
				  when call 'erlang':'is_integer'
					(_cor2) ->
				  %% Line 348
				  {'true',Int}
			      %% Line 349
			      <_cor12> when 'true' ->
				  %% Line 350
				  'false'
			    end
		    -| [{'id',{0,0,'-make_file_list/2-fun-0-'}}] )
	      in  let <FileNumbers> =
		      %% Line 345
		      call 'lists':'zf'
			  (_cor6, %% Line 353
				  FileNames)
		  in  let <_cor8> =
			  %% Line 354
			  call 'lists':'sort'
			      (FileNumbers)
		      in  %% Line 354
			  apply 'shift'/2
			      (_cor8, _cor0)
	  %% Line 355
	  <_cor13> when 'true' ->
	      call 'erlang':'exit'
		  ({'bad_directory',_cor1})
	end
'shift'/2 =
    %% Line 358
    fun (_cor1,_cor0) ->
	%% Line 359
	apply 'shift'/3
	    (_cor1, _cor0, [])
'shift'/3 =
    %% Line 361
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[H|T],_cor7,Res>
	      when call 'erlang':'=:='
		    (_cor7,
		     H) ->
	      let <_cor3> =
		  %% Line 362
		  call 'lists':'reverse'
		      (T)
	      in  %% Line 362
		  [H|call 'erlang':'++'
			 (Res, _cor3)]
	  %% Line 363
	  <[H|T],First,Res> when 'true' ->
	      %% Line 364
	      apply 'shift'/3
		  (T, First, [H|Res])
	  %% Line 365
	  <[],_cor8,Res> when 'true' ->
	      %% Line 366
	      Res
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'shift',3}}] )
	    -| ['compiler_generated'] )
	end
'scan_files'/4 =
    %% Line 374
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 375
	apply 'scan_files'/6
	    (_cor3, 1, _cor2, [], _cor1, _cor0)
'scan_files'/6 =
    %% Line 376
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Dir,_cor17,[],Res,_X_Max,_X_Type> when 'true' ->
	      Res
	  %% Line 377
	  <_X_Dir,_cor18,_X_Files,Res,Max,_X_Type>
	      when call 'erlang':'=<'
		    (Max,
		     0) ->
	      Res
	  %% Line 378
	  <Dir,No,[H|T],Res,Max,Type> when 'true' ->
	      let <Data> =
		  %% Line 379
		  apply 'get_report_data_from_file'/5
		      (Dir, No, H, Max, Type)
	      in  let <Len> =
		      %% Line 380
		      call 'erlang':'length'
			  (Data)
		  in  let <NewMax> =
			  %% Line 381
			  apply 'dec_max'/2
			      (Max, Len)
		      in  let <NewNo> =
			      %% Line 382
			      call 'erlang':'+'
				  (No, Len)
			  in  let <NewData> =
				  %% Line 383
				  call 'erlang':'++'
				      (Data, Res)
			      in  %% Line 384
				  apply 'scan_files'/6
				      (Dir, NewNo, T, NewData, NewMax, Type)
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'scan_files',6}}] )
	    -| ['compiler_generated'] )
	end
'dec_max'/2 =
    %% Line 386
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'all',_cor4> when 'true' ->
	      'all'
	  %% Line 387
	  <X,Y> when 'true' ->
	      call 'erlang':'-'
		  (X, Y)
	end
'get_report_data_from_file'/5 =
    %% Line 389
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Fname> =
	    %% Line 390
	    call 'erlang':'integer_to_list'
		(_cor2)
	in  let <FileName> =
		%% Line 391
		call 'lists':'concat'
		    ([_cor4|[Fname|[]]])
	    in  %% Line 392
		case call 'file':'open'
			 (FileName, ['read']) of
		  %% Line 393
		  <{'ok',Fd}>
		      when call 'erlang':'is_pid'
			    (Fd) ->
		      apply 'read_reports'/5
			  (_cor3, Fd, Fname, _cor1, _cor0)
		  %% Line 394
		  <_cor14> when 'true' ->
		      let <_cor7> =
			  call 'erlang':'++'
			      ([67|[97|[110|[39|[116|[32|[111|[112|[101|[110|[32|[102|[105|[108|[101|[32]]]]]]]]]]]]]]]], Fname)
		      in  [{_cor3,'unknown',_cor7,[63|[63|[63]]],Fname,0}|[]]
		end
'read_reports'/5 =
    %% Line 405
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 406
	    call 'io':'format'
		([114|[98|[58|[32|[114|[101|[97|[100|[105|[110|[103|[32|[114|[101|[112|[111|[114|[116|[46|[46|[46]]]]]]]]]]]]]]]]]]]]])
	    let <_cor5> =
		catch
		    %% Line 407
		    apply 'read_reports'/3
			(_cor3, [], _cor0)
	    in  %% Line 407
		case _cor5 of
		  %% Line 408
		  <{'ok',Res}> when 'true' ->
		      %% Line 409
		      case call 'file':'close'
			       (_cor3) of
			<'ok'> when 'true' ->
			    do  %% Line 410
				call 'io':'format'
				    ([100|[111|[110|[101|[46|[126|[110]]]]]]])
				let <_cor8> =
				    %% Line 412
				    case <> of
				      %% Line 413
				      <>
					  when try
						let <_cor7> =
						    call 'erlang':'length'
							(Res)
						in  call 'erlang':'>'
							(_cor7, _cor1)
					    of <Try> ->
						Try
					    catch <T,R> ->
						'false' ->
					  %% Line 414
					  call 'lists':'sublist'
					      (Res, 1, _cor1)
				      %% Line 415
				      <> when 'true' ->
					  %% Line 416
					  Res
				    end
				in  %% Line 418
				    apply 'add_report_data'/3
					(_cor8, _cor4, _cor2)
			( <_cor6> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor6})
			  -| ['compiler_generated'] )
		      end
		  %% Line 419
		  <{'error',[Problem|Res]}> when 'true' ->
		      let <_X_> =
			  %% Line 420
			  ( call 'file':'close'
				(_cor3)
			    -| ['result_not_wanted'] )
		      in  do  %% Line 421
			      call 'io':'format'
				  ([69|[114|[114|[111|[114|[58|[32|[126|[112|[126|[110]]]]]]]]]]], [Problem|[]])
			      let <_cor11> =
				  %% Line 423
				  call 'erlang':'length'
				      (Res)
			      in  do  %% Line 422
				      call 'io':'format'
					  ([83|[97|[108|[118|[97|[103|[101|[100|[32|[126|[112|[32|[101|[110|[116|[114|[105|[101|[115|[32|[102|[114|[111|[109|[32|[99|[111|[114|[114|[117|[112|[116|[32|[114|[101|[112|[111|[114|[116|[32|[102|[105|[108|[101|[32|[126|[115|[46|[46|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 423
																																										      [_cor11|[_cor2|[]]])
				      let <_cor13> =
					  %% Line 425
					  case <> of
					    %% Line 426
					    <>
						when try
						      let <_cor12> =
							  call 'erlang':'+'
							      (1, call 'erlang':'length'
								      (Res))
						      in  call 'erlang':'>'
							      (_cor12, _cor1)
						  of <Try> ->
						      Try
						  catch <T,R> ->
						      'false' ->
						%% Line 427
						call 'lists':'sublist'
						    ([Problem|Res], 1, _cor1)
					    %% Line 428
					    <> when 'true' ->
						%% Line 429
						[Problem|Res]
					  end
				      in  %% Line 431
					  apply 'add_report_data'/3
					      (_cor13, _cor4, _cor2)
		  %% Line 432
		  <Else> when 'true' ->
		      do  %% Line 433
			  call 'io':'format'
			      ([101|[114|[114|[32|[126|[112|[126|[110]]]]]]]], [Else|[]])
			  let <_cor15> =
			      %% Line 434
			      call 'erlang':'++'
				  ([67|[97|[110|[39|[116|[32|[114|[101|[97|[100|[32|[114|[101|[112|[111|[114|[116|[115|[32|[102|[114|[111|[109|[32|[102|[105|[108|[101|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]], _cor2)
			  in  %% Line 434
			      [{_cor4,'unknown',_cor15,%% Line 435
						       [63|[63|[63]]],_cor2,%% Line 435
									    0}|%% Line 435
									       []]
		end
'add_report_data'/3 =
    %% Line 445
    fun (_cor2,_cor1,_cor0) ->
	%% Line 446
	apply 'add_report_data'/4
	    (_cor2, _cor1, _cor0, [])
'add_report_data'/4 =
    %% Line 447
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{Type,ShortDescr,Date,FilePos}|T],No,FName,Res> when 'true' ->
	      let <_cor4> =
		  %% Line 448
		  call 'erlang':'+'
		      (No, 1)
	      in  %% Line 448
		  apply 'add_report_data'/4
		      (T, _cor4, FName, %% Line 449
					[{No,Type,ShortDescr,Date,FName,FilePos}|Res])
	  %% Line 450
	  <[],_X_No,_X_FName,Res> when 'true' ->
	      Res
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'add_report_data',4}}] )
	    -| ['compiler_generated'] )
	end
'read_reports'/3 =
    %% Line 452
    fun (_cor2,_cor1,_cor0) ->
	%% Line 453
	case call 'file':'position'
		 (_cor2, 'cur') of
	  <{'ok',FilePos}> when 'true' ->
	      let <_cor4> =
		  catch
		      %% Line 454
		      apply 'read_report'/1
			  (_cor2)
	      in  %% Line 454
		  case _cor4 of
		    %% Line 455
		    <{'ok',Report}> when 'true' ->
			let <RealType> =
			    %% Line 456
			    apply 'get_type'/1
				(Report)
			in  %% Line 457
			    case apply 'get_short_descr'/1
				     (Report) of
			      <{ShortDescr,Date}> when 'true' ->
				  let <Rep> =
				      %% Line 458
				      {RealType,ShortDescr,Date,FilePos}
				  in  %% Line 459
				      case <> of
					%% Line 460
					<>
					    when call 'erlang':'=:='
						  (_cor0,
						   'all') ->
					    %% Line 461
					    apply 'read_reports'/3
						(_cor2, [Rep|_cor1], _cor0)
					%% Line 462
					<>
					    when call 'erlang':'=='
						  (RealType,
						   _cor0) ->
					    %% Line 463
					    apply 'read_reports'/3
						(_cor2, [Rep|_cor1], _cor0)
					%% Line 464
					<>
					    when call 'erlang':'is_list'
						  (_cor0) ->
					    %% Line 465
					    case call 'lists':'member'
						     (RealType, _cor0) of
					      %% Line 466
					      <'true'> when 'true' ->
						  %% Line 467
						  apply 'read_reports'/3
						      (_cor2, [Rep|_cor1], _cor0)
					      %% Line 468
					      <_cor13> when 'true' ->
						  %% Line 469
						  apply 'read_reports'/3
						      (_cor2, _cor1, _cor0)
					    end
					%% Line 471
					<> when 'true' ->
					    %% Line 472
					    apply 'read_reports'/3
						(_cor2, _cor1, _cor0)
				      end
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor6})
				-| ['compiler_generated'] )
			    end
		    %% Line 474
		    <{'error',Error}> when 'true' ->
			%% Line 475
			{'error',[{'unknown',Error,[],FilePos}|_cor1]}
		    %% Line 476
		    <'eof'> when 'true' ->
			%% Line 477
			{'ok',_cor1}
		    %% Line 478
		    <{'EXIT',Reason}> when 'true' ->
			%% Line 479
			[{'unknown',Reason,[],FilePos}|_cor1]
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor9})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'read_report'/1 =
    %% Line 482
    fun (_cor0) ->
	%% Line 483
	case call 'io':'get_chars'
		 (_cor0, '', 2) of
	  %% Line 484
	  <[Hi|[Lo|[]]]> when 'true' ->
	      let <Size> =
		  %% Line 485
		  apply 'get_int16'/2
		      (Hi, Lo)
	      in  %% Line 486
		  case call 'io':'get_chars'
			   (_cor0, '', Size) of
		    %% Line 487
		    <'eof'> when 'true' ->
			%% Line 488
			{'error',[80|[114|[101|[109|[97|[116|[117|[114|[101|[32|[101|[110|[100|[32|[111|[102|[32|[102|[105|[108|[101]]]]]]]]]]]]]]]]]]]]]}
		    %% Line 489
		    <List> when 'true' ->
			let <Bin> =
			    %% Line 490
			    call 'erlang':'list_to_binary'
				(List)
			in  let <Ref> =
				%% Line 491
				call 'erlang':'make_ref'
				    ()
			    in  let <_cor5> =
				    catch
					let <_cor4> =
					    %% Line 492
					    call 'erlang':'binary_to_term'
						(Bin)
					in  %% Line 492
					    {Ref,_cor4}
				in  %% Line 492
				    case _cor5 of
				      %% Line 493
				      <{'EXIT',_cor10}> when 'true' ->
					  %% Line 494
					  {'error',[73|[110|[99|[111|[109|[112|[108|[101|[116|[101|[32|[101|[114|[108|[97|[110|[103|[32|[116|[101|[114|[109|[32|[105|[110|[32|[108|[111|[103]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}
				      %% Line 495
				      <{_cor11,Term}>
					  when call 'erlang':'=:='
						(_cor11,
						 Ref) ->
					  %% Line 496
					  {'ok',Term}
				      ( <_cor6> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor6})
					-| ['compiler_generated'] )
				    end
		  end
	  %% Line 499
	  <'eof'> when 'true' ->
	      %% Line 500
	      'eof'
	  ( <_cor8> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor8})
	    -| ['compiler_generated'] )
	end
'get_int16'/2 =
    %% Line 503
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 504
	    call 'erlang':'bsl'
		(_cor1, 8)
	in  let <_cor4> =
		%% Line 504
		call 'erlang':'band'
		    (_cor3, 65280)
	    in  let <_cor2> =
		    %% Line 504
		    call 'erlang':'band'
			(_cor0, 255)
		in  %% Line 504
		    call 'erlang':'bor'
			(_cor4, _cor2)
'get_type'/1 =
    %% Line 511
    fun (_cor0) ->
	case _cor0 of
	  <{_X_Time,{'error_report',_X_Pid,{_cor2,'crash_report',_cor3}}}> when 'true' ->
	      %% Line 512
	      'crash_report'
	  %% Line 513
	  <{_X_Time,{'error_report',_X_Pid,{_cor4,'supervisor_report',_cor5}}}> when 'true' ->
	      %% Line 514
	      'supervisor_report'
	  %% Line 515
	  <{_X_Time,{'info_report',_X_Pid,{_cor6,'progress',_cor7}}}> when 'true' ->
	      %% Line 516
	      'progress'
	  %% Line 517
	  <{_X_Time,{Type,_cor8,_cor9}}> when 'true' ->
	      Type
	  %% Line 518
	  <_cor10> when 'true' ->
	      'unknown'
	end
'get_short_descr'/1 =
    %% Line 520
    fun (_cor0) ->
	case _cor0 of
	  <{{Date,Time},{'error_report',Pid,{_cor19,'crash_report',Rep}}}> when 'true' ->
	      %% Line 521
	      case Rep of
		<[OwnRep|_cor20]> when 'true' ->
		    let <_cor4> =
			%% Line 523
			case call 'lists':'keysearch'
				 ('registered_name', 1, OwnRep) of
			  %% Line 524
			  <{'value',{_X_Key,[]}}> when 'true' ->
			      %% Line 525
			      case call 'lists':'keysearch'
				       ('initial_call', 1, OwnRep) of
				%% Line 526
				<{'value',{_X_K,{M,_X_F,_X_A}}}> when 'true' ->
				    M
				%% Line 527
				<_cor21> when 'true' ->
				    Pid
			      end
			  %% Line 529
			  <{'value',{_X_Key,N}}> when 'true' ->
			      N
			  %% Line 530
			  <_cor22> when 'true' ->
			      Pid
			end
		    in  let <_cor6> =
			    %% Line 532
			    call 'io_lib':'format'
				([126|[119]], [_cor4|[]])
			in  let <NameStr> =
				%% Line 532
				call 'lists':'flatten'
				    (_cor6)
			    in  let <_cor8> =
				    %% Line 533
				    apply 'date_str'/2
					(Date, Time)
				in  %% Line 533
				    {NameStr,_cor8}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 534
	  <{{Date,Time},{'error_report',Pid,{_cor23,'supervisor_report',Rep}}}> when 'true' ->
	      let <_cor10> =
		  %% Line 536
		  case call 'lists':'keysearch'
			   ('supervisor', 1, Rep) of
		    %% Line 537
		    <{'value',{_X_Key,N}}>
			when call 'erlang':'is_atom'
			      (N) ->
			N
		    %% Line 538
		    <_cor24> when 'true' ->
			Pid
		  end
	      in  let <_cor12> =
		      %% Line 540
		      call 'io_lib':'format'
			  ([126|[119]], [_cor10|[]])
		  in  let <NameStr> =
			  %% Line 540
			  call 'lists':'flatten'
			      (_cor12)
		      in  let <_cor14> =
			      %% Line 541
			      apply 'date_str'/2
				  (Date, Time)
			  in  %% Line 541
			      {NameStr,_cor14}
	  %% Line 542
	  <{{Date,Time},{_X_Type,Pid,_cor25}}> when 'true' ->
	      let <_cor15> =
		  %% Line 543
		  call 'io_lib':'format'
		      ([126|[119]], [Pid|[]])
	      in  let <NameStr> =
		      %% Line 543
		      call 'lists':'flatten'
			  (_cor15)
		  in  let <_cor17> =
			  %% Line 544
			  apply 'date_str'/2
			      (Date, Time)
		      in  %% Line 544
			  {NameStr,_cor17}
	  %% Line 545
	  <_cor26> when 'true' ->
	      %% Line 546
	      {[63|[63|[63]]],[63|[63|[63]]]}
	end
'date_str'/2 =
    %% Line 548
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Date = {Y,Mo,D},Time = {H,Mi,S}> when 'true' ->
	      %% Line 549
	      case call 'application':'get_env'
		       ('sasl', 'utc_log') of
		%% Line 550
		<{'ok','true'}> when 'true' ->
		    %% Line 551
		    case %% Line 552
			 apply 'local_time_to_universal_time'/1
			     ({Date,Time}) of
		      <{{YY,MoMo,DD},{HH,MiMi,SS}}> when 'true' ->
			  let <_cor3> =
			      %% Line 553
			      call 'io_lib':'format'
				  ([126|[119|[45|[126|[50|[46|[50|[46|[48|[119|[45|[126|[50|[46|[50|[46|[48|[119|[32|[126|[50|[46|[50|[46|[48|[119|[58|[126|[50|[46|[50|[46|[48|[119|[58|[126|[50|[46|[50|[46|[48|[119|[32|[85|[84|[67]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 555
																																		      [YY|[MoMo|[DD|[HH|[MiMi|[SS|[]]]]]]])
			  in  %% Line 553
			      call 'lists':'flatten'
				  (_cor3)
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 556
		<_cor8> when 'true' ->
		    let <_cor4> =
			%% Line 557
			call 'io_lib':'format'
			    ([126|[119|[45|[126|[50|[46|[50|[46|[48|[119|[45|[126|[50|[46|[50|[46|[48|[119|[32|[126|[50|[46|[50|[46|[48|[119|[58|[126|[50|[46|[50|[46|[48|[119|[58|[126|[50|[46|[50|[46|[48|[119]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 559
																															    [Y|[Mo|[D|[H|[Mi|[S|[]]]]]]])
		    in  %% Line 557
			call 'lists':'flatten'
			    (_cor4)
	      end
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'date_str',2}}] )
	    -| ['compiler_generated'] )
	end
'local_time_to_universal_time'/1 =
    %% Line 562
    fun (_cor0) ->
	case _cor0 of
	  <{Date,Time}> when 'true' ->
	      %% Line 563
	      case call 'calendar':'local_time_to_universal_time_dst'
		       ({Date,Time}) of
		%% Line 564
		<[UCT|[]]> when 'true' ->
		    %% Line 565
		    UCT
		%% Line 566
		<[UCT1|[_X_UCT2|[]]]> when 'true' ->
		    %% Line 567
		    UCT1
		%% Line 568
		<[]> when 'true' ->
		    %% Line 569
		    {Date,Time}
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'local_time_to_universal_time',1}}] )
	    -| ['compiler_generated'] )
	end
'print_list'/3 =
    %% Line 573
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 575
	    apply 'find_width'/2
		([{[78|[111]],[84|[121|[112|[101]]]],[80|[114|[111|[99|[101|[115|[115]]]]]]],[68|[97|[116|[101|[32|[32|[32|[32|[32|[84|[105|[109|[101]]]]]]]]]]]]]}|_cor1], 0)
	in  let <Width> =
		%% Line 575
		call 'erlang':'+'
		    (_cor4, 1)
	    in  let <_cor6> =
		    %% Line 576
		    apply 'find_date_width'/2
			([{[78|[111]],[84|[121|[112|[101]]]],[80|[114|[111|[99|[101|[115|[115]]]]]]],[68|[97|[116|[101|[32|[32|[32|[32|[32|[84|[105|[109|[101]]]]]]]]]]]]]}|_cor1], 0)
		in  let <DateWidth> =
			%% Line 576
			call 'erlang':'+'
			    (_cor6, 1)
		    in  let <Format> =
			    %% Line 577
			    call 'lists':'concat'
				([[126|[52|[115|[126|[50|[48|[115|[32|[126]]]]]]]]]|[Width|[[115|[126|[50|[48|[115|[126|[110]]]]]]]]]])
			in  do  %% Line 578
				call 'io':'format'
				    (_cor2, Format, [[78|[111]]|[[84|[121|[112|[101]]]]|[[80|[114|[111|[99|[101|[115|[115]]]]]]]|[[68|[97|[116|[101|[32|[32|[32|[32|[32|[84|[105|[109|[101]]]]]]]]]]]]]]]]])
				do  %% Line 579
				    call 'io':'format'
					(_cor2, Format, [[61|[61]]|[[61|[61|[61|[61]]]]|[[61|[61|[61|[61|[61|[61|[61]]]]]]]|[[61|[61|[61|[61|[32|[32|[32|[32|[32|[61|[61|[61|[61]]]]]]]]]]]]]]]]])
				    %% Line 580
				    apply 'print_list'/5
					(_cor2, _cor1, _cor0, Width, DateWidth)
'print_list'/5 =
    %% Line 581
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_cor10,[],_cor11,_cor12,_cor13> when 'true' ->
	      'true'
	  %% Line 582
	  <Fd,[H|T],Type,Width,DateWidth> when 'true' ->
	      do  %% Line 583
		  apply 'print_one_report'/5
		      (Fd, H, Type, Width, DateWidth)
		  %% Line 584
		  apply 'print_list'/5
		      (Fd, T, Type, Width, DateWidth)
	  ( <_cor9,_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'print_list',5}}] )
	    -| ['compiler_generated'] )
	end
'find_width'/2 =
    %% Line 586
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Width> when 'true' ->
	      Width
	  %% Line 587
	  <[H|T],Width> when 'true' ->
	      let <_cor2> =
		  %% Line 588
		  call 'erlang':'element'
		      (3, H)
	      in  let <Try> =
		      %% Line 588
		      call 'erlang':'length'
			  (_cor2)
		  in  %% Line 589
		      case <> of
			%% Line 590
			<>
			    when call 'erlang':'>'
				  (Try,
				   Width) ->
			    apply 'find_width'/2
				(T, Try)
			%% Line 591
			<> when 'true' ->
			    apply 'find_width'/2
				(T, Width)
		      end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'find_width',2}}] )
	    -| ['compiler_generated'] )
	end
'find_date_width'/2 =
    %% Line 593
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Width> when 'true' ->
	      Width
	  %% Line 594
	  <[H|T],Width> when 'true' ->
	      let <_cor2> =
		  %% Line 595
		  call 'erlang':'element'
		      (4, H)
	      in  let <Try> =
		      %% Line 595
		      call 'erlang':'length'
			  (_cor2)
		  in  %% Line 596
		      case <> of
			%% Line 597
			<>
			    when call 'erlang':'>'
				  (Try,
				   Width) ->
			    apply 'find_date_width'/2
				(T, Try)
			%% Line 598
			<> when 'true' ->
			    apply 'find_date_width'/2
				(T, Width)
		      end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'find_date_width',2}}] )
	    -| ['compiler_generated'] )
	end
'print_one_report'/5 =
    %% Line 601
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Fd,{No,RealType,ShortDescr,Date,_X_Fname,_X_FilePos},%% Line 602
								WantedType,%% Line 603
									   Width,%% Line 603
										 DateWidth> when 'true' ->
	      %% Line 604
	      case <> of
		%% Line 605
		<>
		    when call 'erlang':'=:='
			  (WantedType,
			   'all') ->
		    %% Line 606
		    apply 'print_short_descr'/7
			(Fd, No, RealType, ShortDescr, Date, Width, %% Line 607
								    DateWidth)
		%% Line 608
		<>
		    when call 'erlang':'=='
			  (WantedType,
			   RealType) ->
		    %% Line 609
		    apply 'print_short_descr'/7
			(Fd, No, RealType, ShortDescr, Date, Width, %% Line 610
								    DateWidth)
		%% Line 611
		<> when 'true' ->
		    'ok'
	      end
	  ( <_cor9,_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'print_one_report',5}}] )
	    -| ['compiler_generated'] )
	end
'print_short_descr'/7 =
    %% Line 614
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Format> =
	    %% Line 615
	    call 'lists':'concat'
		([[126|[52|[119|[126|[50|[48|[119|[32|[126]]]]]]]]]|[_cor1|[[115|[126]]|[_cor0|[[115|[126|[110]]]]]]]])
	in  let <_cor8> =
		%% Line 618
		call 'io_lib':'format'
		    ([126|[115]], [_cor3|[]])
	    in  %% Line 616
		call 'io':'format'
		    (_cor6, Format, [_cor5|%% Line 617
					   [_cor4|%% Line 618
						  [_cor8|%% Line 619
							 [_cor2|[]]]]])
'print_report_by_num'/6 =
    %% Line 621
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 622
	case apply 'print_report'/6
		 (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0) of
	  <{_cor13,Device1}> when 'true' ->
	      %% Line 623
	      Device1
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'print_typed_reports'/6 =
    %% Line 625
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Dir,[],_X_Type,Device,_X_Abort,_X_Log> when 'true' ->
	      %% Line 626
	      Device
	  %% Line 627
	  <Dir,Data,Type,Device,Abort,Log> when 'true' ->
	      let <_cor6> =
		  %% Line 629
		  call 'erlang':'hd'
		      (Data)
	      in  let <_cor10> =
		      %% Line 629
		      case call 'erlang':'element'
			       (2, _cor6) of
			%% Line 630
			<_cor19>
			    when call 'erlang':'=:='
				  (_cor19,
				   Type) ->
			    let <_cor7> =
				%% Line 631
				call 'erlang':'hd'
				    (Data)
			    in  let <_cor8> =
				    %% Line 631
				    call 'erlang':'element'
					(1, _cor7)
				in  %% Line 631
				    apply 'print_report'/6
					(Dir, Data, _cor8, Device, Abort, Log)
			%% Line 632
			<_cor20> when 'true' ->
			    %% Line 633
			    {'proceed',Device}
		      end
		  in  %% Line 628
		      case _cor10 of
			<{Next,Device1}> when 'true' ->
			    %% Line 635
			    case <> of
			      <>
				  when call 'erlang':'=:='
					(Next,
					 'abort') ->
				  %% Line 636
				  Device1
			      %% Line 637
			      <> when 'true' ->
				  let <_cor12> =
				      %% Line 638
				      call 'erlang':'tl'
					  (Data)
				  in  %% Line 638
				      apply 'print_typed_reports'/6
					  (Dir, _cor12, Type, Device1, Abort, Log)
			    end
			( <_cor11> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor11})
			  -| ['compiler_generated'] )
		      end
	end
'print_all_reports'/5 =
    %% Line 641
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Dir,[],Device,_X_Abort,_X_Log> when 'true' ->
	      %% Line 642
	      Device
	  %% Line 643
	  <Dir,Data,Device,Abort,Log> when 'true' ->
	      let <_cor5> =
		  %% Line 644
		  call 'erlang':'hd'
		      (Data)
	      in  let <_cor6> =
		      %% Line 644
		      call 'erlang':'element'
			  (1, _cor5)
		  in  %% Line 644
		      case apply 'print_report'/6
			       (Dir, Data, _cor6, %% Line 645
						  Device, %% Line 645
							  Abort, %% Line 645
								 Log) of
			<{Next,Device1}> when 'true' ->
			    %% Line 646
			    case <> of
			      <>
				  when call 'erlang':'=:='
					(Next,
					 'abort') ->
				  %% Line 647
				  Device1
			      %% Line 648
			      <> when 'true' ->
				  let <_cor8> =
				      %% Line 649
				      call 'erlang':'tl'
					  (Data)
				  in  %% Line 649
				      apply 'print_all_reports'/5
					  (Dir, _cor8, Device1, Abort, Log)
			    end
			( <_cor7> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor7})
			  -| ['compiler_generated'] )
		      end
	end
'print_report'/6 =
    %% Line 652
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 653
	case apply 'find_report'/2
		 (_cor4, _cor3) of
	  %% Line 654
	  <{Fname,FilePosition}> when 'true' ->
	      let <FileName> =
		  %% Line 655
		  call 'lists':'concat'
		      ([_cor5|[Fname|[]]])
	      in  %% Line 656
		  case call 'file':'open'
			   (FileName, ['read']) of
		    %% Line 657
		    <{'ok',Fd}> when 'true' ->
			%% Line 658
			apply 'read_rep'/5
			    (Fd, FilePosition, _cor2, _cor1, _cor0)
		    %% Line 659
		    <_cor15> when 'true' ->
			do  %% Line 660
			    call 'io':'format'
				([114|[98|[58|[32|[99|[97|[110|[39|[116|[32|[111|[112|[101|[110|[32|[102|[105|[108|[101|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]], [Fname|[]])
			    %% Line 661
			    {'proceed',_cor2}
		  end
	  %% Line 663
	  <'no_report'> when 'true' ->
	      %% Line 664
	      {'proceed',_cor2}
	  ( <_cor8> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor8})
	    -| ['compiler_generated'] )
	end
'find_report'/2 =
    %% Line 667
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{No,_X_Type,_X_Descr,_X_Date,Fname,FilePosition}|_X_T],_cor4>
	      when call 'erlang':'=:='
		    (_cor4,
		     No) ->
	      %% Line 668
	      {Fname,FilePosition}
	  %% Line 669
	  <[_X_H|T],No> when 'true' ->
	      %% Line 670
	      apply 'find_report'/2
		  (T, No)
	  %% Line 671
	  <[],No> when 'true' ->
	      do  %% Line 672
		  call 'io':'format'
		      ([84|[104|[101|[114|[101|[32|[105|[115|[32|[110|[111|[32|[114|[101|[112|[111|[114|[116|[32|[119|[105|[116|[104|[32|[110|[117|[109|[98|[101|[114|[32|[126|[112|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [No|[]])
		  %% Line 673
		  'no_report'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'find_report',2}}] )
	    -| ['compiler_generated'] )
	end
'print_grep_reports'/6 =
    %% Line 675
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Dir,[],_X_RegExp,Device,_X_Abort,_X_Log> when 'true' ->
	      %% Line 676
	      Device
	  %% Line 677
	  <Dir,Data,RegExp,Device,Abort,Log> when 'true' ->
	      let <_cor6> =
		  %% Line 678
		  call 'erlang':'hd'
		      (Data)
	      in  let <_cor7> =
		      %% Line 678
		      call 'erlang':'element'
			  (1, _cor6)
		  in  %% Line 678
		      case apply 'print_grep_report'/7
			       (Dir, Data, _cor7, %% Line 679
						  Device, %% Line 679
							  RegExp, %% Line 679
								  Abort, %% Line 679
									 Log) of
			<{Next,Device1}> when 'true' ->
			    %% Line 680
			    case <> of
			      <>
				  when call 'erlang':'=:='
					(Next,
					 'abort') ->
				  %% Line 681
				  Device1
			      %% Line 682
			      <> when 'true' ->
				  let <_cor9> =
				      %% Line 683
				      call 'erlang':'tl'
					  (Data)
				  in  %% Line 683
				      apply 'print_grep_reports'/6
					  (Dir, _cor9, RegExp, Device1, Abort, Log)
			    end
			( <_cor8> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor8})
			  -| ['compiler_generated'] )
		      end
	end
'print_grep_report'/7 =
    %% Line 686
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 687
	case apply 'find_report'/2
		 (_cor5, _cor4) of
	  <{Fname,FilePosition}> when 'true' ->
	      let <FileName> =
		  %% Line 688
		  call 'lists':'concat'
		      ([_cor6|[Fname|[]]])
	      in  %% Line 689
		  case call 'file':'open'
			   (FileName, ['read']) of
		    %% Line 690
		    <{'ok',Fd}>
			when call 'erlang':'is_pid'
			      (Fd) ->
			%% Line 691
			apply 'check_rep'/7
			    (Fd, FilePosition, _cor3, _cor2, _cor4, _cor1, _cor0)
		    %% Line 692
		    <_cor17> when 'true' ->
			do  %% Line 693
			    call 'io':'format'
				([114|[98|[58|[32|[99|[97|[110|[39|[116|[32|[111|[112|[101|[110|[32|[102|[105|[108|[101|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]], [Fname|[]])
			    %% Line 694
			    {'proceed',_cor3}
		  end
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor7})
	    -| ['compiler_generated'] )
	end
'check_rep'/7 =
    %% Line 697
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 698
	case apply 'read_rep_msg'/2
		 (_cor6, _cor5) of
	  %% Line 699
	  <{Date,Msg}> when 'true' ->
	      let <_cor7> =
		  %% Line 700
		  call 'io_lib':'format'
		      ([126|[112]], [Msg|[]])
	      in  let <MsgStr> =
		      %% Line 700
		      call 'lists':'flatten'
			  (_cor7)
		  in  %% Line 701
		      case apply 'run_re'/2
			       (MsgStr, _cor3) of
			%% Line 702
			<'match'> when 'true' ->
			    do  %% Line 703
				call 'io':'format'
				    ([70|[111|[117|[110|[100|[32|[109|[97|[116|[99|[104|[32|[105|[110|[32|[114|[101|[112|[111|[114|[116|[32|[110|[117|[109|[98|[101|[114|[32|[126|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor2|[]])
				let <_cor9> =
				    catch
					%% Line 704
					call 'rb_format_supp':'print'
					    (Date, Msg, _cor4)
				in  %% Line 704
				    case _cor9 of
				      %% Line 705
				      <{'EXIT',_cor20}> when 'true' ->
					  %% Line 706
					  apply 'handle_bad_form'/5
					      (Date, Msg, _cor4, _cor1, _cor0)
				      %% Line 707
				      <_cor21> when 'true' ->
					  %% Line 708
					  {'proceed',_cor4}
				    end
			%% Line 710
			<_cor22> when 'true' ->
			    %% Line 711
			    {'proceed',_cor4}
		      end
	  %% Line 713
	  <_cor23> when 'true' ->
	      do  %% Line 714
		  call 'io':'format'
		      ([114|[98|[58|[32|[67|[97|[110|[110|[111|[116|[32|[114|[101|[97|[100|[32|[102|[114|[111|[109|[32|[102|[105|[108|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]])
		  %% Line 715
		  {'proceed',_cor4}
	end
'run_re'/2 =
    %% Line 718
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Subject,{Regexp,Options}> when 'true' ->
	      %% Line 719
	      apply 'run_re'/3
		  (Subject, Regexp, Options)
	  %% Line 720
	  <Subject,Regexp> when 'true' ->
	      %% Line 721
	      apply 'run_re'/3
		  (Subject, Regexp, [])
	end
'run_re'/3 =
    %% Line 723
    fun (_cor2,_cor1,_cor0) ->
	%% Line 724
	case call 're':'run'
		 (_cor2, _cor1, _cor0) of
	  %% Line 725
	  <'nomatch'> when 'true' ->
	      %% Line 726
	      'nomatch'
	  %% Line 727
	  <_cor7> when 'true' ->
	      %% Line 728
	      'match'
	end
'filter_all_reports'/6 =
    %% Line 731
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <_X_Dir,[],_X_Filters,Device,_X_Abort,_X_Log> when 'true' ->
	      %% Line 732
	      Device
	  %% Line 733
	  <Dir,Data,Filters,Device,Abort,Log> when 'true' ->
	      let <_cor6> =
		  %% Line 734
		  call 'erlang':'hd'
		      (Data)
	      in  let <_cor7> =
		      %% Line 734
		      call 'erlang':'element'
			  (1, _cor6)
		  in  %% Line 734
		      case apply 'filter_report'/7
			       (Dir, Data, Filters, _cor7, %% Line 735
							   Device, %% Line 735
								   Abort, %% Line 735
									  Log) of
			<{Next,Device1}> when 'true' ->
			    %% Line 736
			    case <> of
			      <>
				  when call 'erlang':'=:='
					(Next,
					 'abort') ->
				  %% Line 737
				  Device1
			      %% Line 738
			      <> when 'true' ->
				  let <_cor9> =
				      %% Line 739
				      call 'erlang':'tl'
					  (Data)
				  in  %% Line 739
				      apply 'filter_all_reports'/6
					  (Dir, _cor9, Filters, Device1, Abort, Log)
			    end
			( <_cor8> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor8})
			  -| ['compiler_generated'] )
		      end
	end
'filter_report'/7 =
    %% Line 742
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 743
	case apply 'find_report'/2
		 (_cor5, _cor3) of
	  %% Line 744
	  <{Fname,FilePosition}> when 'true' ->
	      let <FileName> =
		  %% Line 745
		  call 'lists':'concat'
		      ([_cor6|[Fname|[]]])
	      in  %% Line 746
		  case call 'file':'open'
			   (FileName, ['read']) of
		    %% Line 747
		    <{'ok',Fd}> when 'true' ->
			%% Line 748
			apply 'filter_rep'/6
			    (_cor4, Fd, FilePosition, _cor2, _cor1, _cor0)
		    %% Line 749
		    <_cor17> when 'true' ->
			do  %% Line 750
			    call 'io':'format'
				([114|[98|[58|[32|[99|[97|[110|[39|[116|[32|[111|[112|[101|[110|[32|[102|[105|[108|[101|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]], [Fname|[]])
			    %% Line 751
			    {'proceed',_cor2}
		  end
	  %% Line 753
	  <'no_report'> when 'true' ->
	      %% Line 754
	      {'proceed',_cor2}
	  ( <_cor9> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor9})
	    -| ['compiler_generated'] )
	end
'filter_rep'/6 =
    %% Line 757
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{Filters,FDates},Fd,FilePosition,Device,Abort,Log> when 'true' ->
	      let <RepMsg> =
		  %% Line 758
		  apply 'read_rep_msg'/2
		      (Fd, FilePosition)
	      in  %% Line 759
		  case RepMsg of
		    %% Line 760
		    <{_X_DateStr,{Date,_X_Msg}}> when 'true' ->
			%% Line 761
			case apply 'compare_dates'/2
				 (Date, FDates) of
			  %% Line 762
			  <'true'> when 'true' ->
			      %% Line 763
			      apply 'print_filter_report'/5
				  (RepMsg, Filters, Device, Abort, Log)
			  %% Line 764
			  <_cor17> when 'true' ->
			      %% Line 765
			      {'proceed',Device}
			end
		    %% Line 767
		    <_cor18> when 'true' ->
			do  %% Line 768
			    call 'io':'format'
				([114|[98|[58|[32|[67|[97|[110|[110|[111|[116|[32|[114|[101|[97|[100|[32|[102|[114|[111|[109|[32|[102|[105|[108|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]])
			    %% Line 769
			    {'proceed',Device}
		  end
	  %% Line 771
	  <Filters,Fd,FilePosition,Device,Abort,Log> when 'true' ->
	      %% Line 773
	      case apply 'read_rep_msg'/2
		       (Fd, FilePosition) of
		%% Line 774
		<{Date,Msg}> when 'true' ->
		    %% Line 775
		    apply 'print_filter_report'/5
			({Date,Msg}, Filters, Device, Abort, Log)
		%% Line 776
		<_cor19> when 'true' ->
		    do  %% Line 777
			call 'io':'format'
			    ([114|[98|[58|[32|[67|[97|[110|[110|[111|[116|[32|[114|[101|[97|[100|[32|[102|[114|[111|[109|[32|[102|[105|[108|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]])
			%% Line 778
			{'proceed',Device}
	      end
	end
'filter_report'/2 =
    %% Line 781
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_X_Msg> when 'true' ->
	      %% Line 782
	      'true'
	  %% Line 783
	  <[{Key,Value}|T],Msg> when 'true' ->
	      %% Line 784
	      case call 'proplists':'get_value'
		       (Key, Msg) of
		%% Line 785
		<_cor14>
		    when call 'erlang':'=:='
			  (_cor14,
			   Value) ->
		    %% Line 786
		    apply 'filter_report'/2
			(T, Msg)
		%% Line 787
		<_cor15> when 'true' ->
		    %% Line 788
		    'false'
	      end
	  %% Line 790
	  <[{Key,Value,'no'}|T],Msg> when 'true' ->
	      %% Line 791
	      case call 'proplists':'get_value'
		       (Key, Msg) of
		%% Line 792
		<_cor16>
		    when call 'erlang':'=:='
			  (_cor16,
			   Value) ->
		    %% Line 793
		    'false'
		%% Line 794
		<_cor17> when 'true' ->
		    %% Line 795
		    apply 'filter_report'/2
			(T, Msg)
	      end
	  %% Line 797
	  <[{Key,RegExp,'re'}|T],Msg> when 'true' ->
	      %% Line 798
	      case call 'proplists':'get_value'
		       (Key, Msg) of
		%% Line 799
		<'undefined'> when 'true' ->
		    %% Line 800
		    'false'
		%% Line 801
		<Value> when 'true' ->
		    let <_cor4> =
			%% Line 802
			call 'io_lib':'format'
			    ([126|[112]], [Value|[]])
		    in  let <Subject> =
			    %% Line 802
			    call 'lists':'flatten'
				(_cor4)
			in  %% Line 803
			    case apply 'run_re'/2
				     (Subject, RegExp) of
			      %% Line 804
			      <'match'> when 'true' ->
				  %% Line 805
				  apply 'filter_report'/2
				      (T, Msg)
			      %% Line 806
			      <_cor18> when 'true' ->
				  'false'
			    end
	      end
	  %% Line 809
	  <[{Key,RegExp,'re','no'}|T],Msg> when 'true' ->
	      %% Line 810
	      case call 'proplists':'get_value'
		       (Key, Msg) of
		%% Line 811
		<'undefined'> when 'true' ->
		    %% Line 812
		    'true'
		%% Line 813
		<Value> when 'true' ->
		    let <_cor8> =
			%% Line 814
			call 'io_lib':'format'
			    ([126|[112]], [Value|[]])
		    in  let <Subject> =
			    %% Line 814
			    call 'lists':'flatten'
				(_cor8)
			in  %% Line 815
			    case apply 'run_re'/2
				     (Subject, RegExp) of
			      %% Line 816
			      <'match'> when 'true' ->
				  'false'
			      %% Line 817
			      <_cor19> when 'true' ->
				  apply 'filter_report'/2
				      (T, Msg)
			    end
	      end
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'filter_report',2}}] )
	    -| ['compiler_generated'] )
	end
'get_compare_dates'/2 =
    %% Line 821
    fun (_cor1,_cor0) ->
	%% Line 822
	case call 'application':'get_env'
		 ('sasl', 'utc_log') of
	  %% Line 823
	  <{'ok','true'}> when 'true' ->
	      let <_cor3> =
		  %% Line 824
		  apply 'local_time_to_universal_time'/1
		      (_cor1)
	      in  let <_cor2> =
		      %% Line 825
		      apply 'local_time_to_universal_time'/1
			  (_cor0)
		  in  %% Line 824
		      {_cor3,_cor2}
	  %% Line 826
	  <_cor7> when 'true' ->
	      %% Line 827
	      {_cor1,_cor0}
	end
'get_compare_dates'/3 =
    %% Line 829
    fun (_cor2,_cor1,_cor0) ->
	%% Line 830
	case call 'application':'get_env'
		 ('sasl', 'utc_log') of
	  %% Line 831
	  <{'ok','true'}> when 'true' ->
	      let <_cor5> =
		  %% Line 832
		  apply 'local_time_to_universal_time'/1
		      (_cor2)
	      in  let <_cor4> =
		      %% Line 833
		      apply 'local_time_to_universal_time'/1
			  (_cor1)
		  in  let <_cor3> =
			  %% Line 834
			  apply 'local_time_to_universal_time'/1
			      (_cor0)
		      in  %% Line 832
			  {_cor5,_cor4,_cor3}
	  %% Line 835
	  <_cor10> when 'true' ->
	      %% Line 836
	      {_cor2,_cor1,_cor0}
	end
'compare_dates'/2 =
    %% Line 839
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Date,{CompareDate,'from'}> when 'true' ->
	      %% Line 840
	      case apply 'get_compare_dates'/2
		       (Date, CompareDate) of
		<{Date2,DateFrom}> when 'true' ->
		    let <_cor4> =
			%% Line 841
			call 'calendar':'datetime_to_gregorian_seconds'
			    (Date2)
		    in  let <_cor3> =
			    %% Line 842
			    call 'calendar':'datetime_to_gregorian_seconds'
				(DateFrom)
			in  %% Line 841
			    call 'erlang':'>='
				(_cor4, _cor3)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 843
	  <Date,{CompareDate,'to'}> when 'true' ->
	      %% Line 844
	      case apply 'get_compare_dates'/2
		       (Date, CompareDate) of
		<{Date2,DateTo}> when 'true' ->
		    let <_cor7> =
			%% Line 845
			call 'calendar':'datetime_to_gregorian_seconds'
			    (Date2)
		    in  let <_cor6> =
			    %% Line 846
			    call 'calendar':'datetime_to_gregorian_seconds'
				(DateTo)
			in  %% Line 845
			    call 'erlang':'=<'
				(_cor7, _cor6)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 847
	  <Date,{From,To}> when 'true' ->
	      %% Line 848
	      case apply 'get_compare_dates'/3
		       (Date, From, To) of
		<{Date2,DateFrom,DateTo}> when 'true' ->
		    let <_cor11> =
			%% Line 849
			call 'calendar':'datetime_to_gregorian_seconds'
			    (Date2)
		    in  let <_cor10> =
			    %% Line 850
			    call 'calendar':'datetime_to_gregorian_seconds'
				(DateFrom)
			in  %% Line 851
			    ( case <> of
				( <>
				      when call 'erlang':'>='
					    (_cor11,
					     _cor10) ->
				      let <_cor13> =
					  %% Line 852
					  call 'calendar':'datetime_to_gregorian_seconds'
					      (Date2)
				      in  let <_cor12> =
					      %% Line 853
					      call 'calendar':'datetime_to_gregorian_seconds'
						  (DateTo)
					  in  %% Line 852
					      call 'erlang':'=<'
						  (_cor13, _cor12)
				  -| ['compiler_generated'] )
				( <> when 'true' ->
				      'false'
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor8})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15})
		  -| [{'function_name',{'compare_dates',2}}] )
	    -| ['compiler_generated'] )
	end
'print_filter_report'/5 =
    %% Line 855
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <{Date,Msg},Filters,Device,Abort,Log> when 'true' ->
	      %% Line 856
	      case Msg of
		<{_X_D,M}> when 'true' ->
		    %% Line 857
		    case M of
		      <{_cor16,_cor17,M2}> when 'true' ->
			  %% Line 858
			  case M2 of
			    %% Line 859
			    <{_cor18,_cor19,Report}> when 'true' ->
				%% Line 860
				case apply 'filter_report'/2
					 (Filters, Report) of
				  %% Line 861
				  <'true'> when 'true' ->
				      let <_cor7> =
					  catch
					      %% Line 862
					      call 'rb_format_supp':'print'
						  (Date, Msg, Device)
				      in  %% Line 862
					  case _cor7 of
					    %% Line 863
					    <{'EXIT',_cor20}> when 'true' ->
						%% Line 864
						apply 'handle_bad_form'/5
						    (Date, Msg, Device, Abort, Log)
					    %% Line 865
					    <_cor21> when 'true' ->
						%% Line 866
						{'proceed',Device}
					  end
				  %% Line 868
				  <_cor22> when 'true' ->
				      %% Line 869
				      {'proceed',Device}
				end
			    %% Line 871
			    <_cor23> when 'true' ->
				%% Line 872
				{'proceed',Device}
			  end
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'print_filter_report',5}}] )
	    -| ['compiler_generated'] )
	end
'read_rep'/5 =
    %% Line 875
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 876
	case apply 'read_rep_msg'/2
		 (_cor4, _cor3) of
	  %% Line 877
	  <{Date,Msg}> when 'true' ->
	      let <_cor5> =
		  catch
		      %% Line 878
		      call 'rb_format_supp':'print'
			  (Date, Msg, _cor2)
	      in  %% Line 878
		  case _cor5 of
		    %% Line 879
		    <{'EXIT',_cor13}> when 'true' ->
			%% Line 880
			apply 'handle_bad_form'/5
			    (Date, Msg, _cor2, _cor1, _cor0)
		    %% Line 881
		    <_cor14> when 'true' ->
			%% Line 882
			{'proceed',_cor2}
		  end
	  %% Line 884
	  <_cor15> when 'true' ->
	      do  %% Line 885
		  call 'io':'format'
		      ([114|[98|[58|[32|[67|[97|[110|[110|[111|[116|[32|[114|[101|[97|[100|[32|[102|[114|[111|[109|[32|[102|[105|[108|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]])
		  %% Line 886
		  {'proceed',_cor2}
	end
'handle_bad_form'/5 =
    %% Line 889
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 890
	    call 'io':'format'
		([114|[98|[58|[32|[69|[82|[82|[79|[82|[33|[32|[65|[32|[114|[101|[112|[111|[114|[116|[32|[111|[110|[32|[98|[97|[100|[32|[102|[111|[114|[109|[32|[119|[97|[115|[32|[101|[110|[99|[111|[117|[110|[116|[101|[114|[101|[100|[46|[32|[73|[116|[32|[99|[97|[110|[32|[110|[111|[116|[32|[98|[101|[32|[112|[114|[105|[110|[116|[101|[100|[32|[116|[111|[32|[116|[104|[101|[32|[108|[111|[103|[46|[126|[110|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	    do  %% Line 892
		call 'io':'format'
		    ([68|[101|[116|[97|[105|[108|[115|[58|[126|[110|[126|[112|[32|[126|[112|[126|[110|[126|[110]]]]]]]]]]]]]]]]]]], [_cor4|[_cor3|[]]])
		let <_cor6> =
		    %% Line 893
		    apply 'open_log_file'/1
			(_cor0)
		in  %% Line 893
		    case <_cor1,_cor2,_cor6> of
		      %% Line 894
		      <'true','standard_io','standard_io'> when 'true' ->
			  do  %% Line 895
			      call 'io':'format'
				  ([114|[98|[58|[32|[76|[111|[103|[103|[105|[110|[103|[32|[97|[98|[111|[114|[116|[101|[100|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]])
			      %% Line 896
			      {'abort',_cor2}
		      %% Line 897
		      <'false','standard_io','standard_io'> when 'true' ->
			  do  %% Line 898
			      call 'io':'format'
				  ([114|[98|[58|[32|[76|[111|[103|[103|[105|[110|[103|[32|[114|[101|[115|[117|[109|[101|[100|[46|[46|[46|[126|[110|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]])
			      %% Line 899
			      {'proceed',_cor2}
		      %% Line 900
		      <_cor18,_cor19,'standard_io'> when 'true' ->
			  do  %% Line 901
			      call 'io':'format'
				  ([114|[98|[58|[32|[67|[97|[110|[32|[110|[111|[116|[32|[114|[101|[111|[112|[101|[110|[32|[126|[112|[46|[32|[76|[111|[103|[103|[105|[110|[103|[32|[97|[98|[111|[114|[116|[101|[100|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor0|[]])
			      %% Line 902
			      {'abort',_cor2}
		      %% Line 903
		      <'true',_cor20,NewDevice> when 'true' ->
			  do  %% Line 904
			      call 'io':'format'
				  (NewDevice, [126|[110|[126|[110|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[32|[82|[66|[32|[69|[82|[82|[79|[82|[32|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[126|[110|[65|[32|[114|[101|[112|[111|[114|[116|[32|[111|[110|[32|[98|[97|[100|[32|[102|[111|[114|[109|[32|[119|[97|[115|[32|[101|[110|[99|[111|[117|[110|[116|[101|[114|[101|[100|[32|[104|[101|[114|[101|[32|[97|[110|[100|[32|[116|[104|[101|[32|[108|[111|[103|[103|[105|[110|[103|[126|[110|[112|[114|[111|[99|[101|[115|[115|[32|[119|[97|[115|[32|[97|[98|[111|[114|[116|[101|[100|[46|[32|[78|[111|[116|[101|[32|[116|[104|[97|[116|[32|[116|[104|[101|[114|[101|[32|[109|[97|[121|[32|[119|[101|[108|[108|[32|[98|[101|[32|[114|[101|[109|[97|[105|[110|[105|[110|[103|[126|[110|[114|[101|[112|[111|[114|[116|[115|[32|[116|[104|[97|[116|[32|[104|[97|[118|[101|[110|[39|[116|[32|[121|[101|[116|[32|[98|[101|[101|[110|[32|[108|[111|[103|[103|[101|[100|[46|[32|[80|[108|[101|[97|[115|[101|[32|[115|[101|[101|[32|[116|[104|[101|[32|[114|[98|[126|[110|[109|[97|[110|[117|[97|[108|[32|[102|[111|[114|[32|[109|[111|[114|[101|[32|[105|[110|[102|[111|[46|[126|[110|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[42|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 910
																																																																																																																																																																																																																																			     [])
			      do  %% Line 911
				  call 'io':'format'
				      ([114|[98|[58|[32|[76|[111|[103|[103|[105|[110|[103|[32|[97|[98|[111|[114|[116|[101|[100|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]])
				  %% Line 912
				  {'abort',NewDevice}
		      %% Line 913
		      <'false',_cor21,NewDevice> when 'true' ->
			  do  %% Line 914
			      call 'io':'format'
				  (NewDevice, %% Line 915
					      [126|[110|[32|[32|[32|[42|[42|[42|[42|[42|[42|[42|[42|[42|[32|[82|[66|[58|[32|[85|[78|[80|[82|[73|[78|[84|[65|[66|[76|[69|[32|[82|[69|[80|[79|[82|[84|[32|[42|[42|[42|[42|[42|[42|[42|[42|[126|[110|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 915
																																					       [])
			      do  %% Line 916
				  call 'io':'format'
				      ([114|[98|[58|[32|[76|[111|[103|[103|[105|[110|[103|[32|[114|[101|[115|[117|[109|[101|[100|[46|[46|[46|[126|[110|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]])
				  %% Line 917
				  {'proceed',NewDevice}
		      ( <_fol274,_fol275,_fol276> when 'true' ->
			    let <_cor12> = {_fol274,_fol275,_fol276}
			    in  primop 'match_fail'
				    ({'case_clause',_cor12})
			-| ['compiler_generated'] )
		    end
'read_rep_msg'/2 =
    %% Line 920
    fun (_cor1,_cor0) ->
	%% Line 921
	case call 'file':'position'
		 (_cor1, {'bof',_cor0}) of
	  <{'ok',_cor11}> when 'true' ->
	      let <_cor3> =
		  catch
		      %% Line 923
		      apply 'read_report'/1
			  (_cor1)
	      in  let <_cor6> =
		      %% Line 923
		      case _cor3 of
			%% Line 924
			<{'ok',Report}> when 'true' ->
			    %% Line 925
			    case apply 'get_short_descr'/1
				     (Report) of
			      <{_X_ShortDescr,Date}> when 'true' ->
				  %% Line 926
				  {Date,Report}
			      ( <_cor4> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor4})
				-| ['compiler_generated'] )
			    end
			%% Line 927
			<_cor12> when 'true' ->
			    'error'
		      end
		  in  %% Line 929
		      case call 'file':'close'
			       (_cor1) of
			<'ok'> when 'true' ->
			    _cor6
			( <_cor8> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor8})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('rb')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('rb', _cor0)
end