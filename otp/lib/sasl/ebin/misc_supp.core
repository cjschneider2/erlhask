module 'misc_supp' ['assq'/2,
		    'format_pdict'/3,
		    'format_tuples'/2,
		    'is_string'/1,
		    'module_info'/0,
		    'module_info'/1,
		    'multi_map'/2,
		    'passq'/2]
    attributes []
'format_pdict'/3 =
    %% Line 42
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'normal',_X_PDict,_X_Exclude> when 'true' ->
	      %% Line 43
	      []
	  %% Line 44
	  <'all',PDict,Exclude> when 'true' ->
	      %% Line 45
	      case apply 'format_tuples'/2
		       (PDict, ['$sys_dict$'|Exclude]) of
		%% Line 46
		<[]> when 'true' ->
		    []
		%% Line 47
		<Data> when 'true' ->
		    [{'newline',1}|Data]
	      end
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'format_pdict',3}}] )
	    -| ['compiler_generated'] )
	end
'format_tuples'/2 =
    %% Line 55
    fun (_cor1,_cor0) ->
	%% Line 56
	case apply 'format_tuples'/3
		 (_cor1, _cor0, []) of
	  %% Line 57
	  <[]> when 'true' ->
	      []
	  %% Line 58
	  <Data> when 'true' ->
	      [{'data',Data}|[]]
	end
'format_tuples'/3 =
    %% Line 60
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_X_Exclude,Res> when 'true' ->
	      Res
	  %% Line 61
	  <[{Key,Value}|T],Exclude,Res> when 'true' ->
	      %% Line 62
	      case call 'lists':'member'
		       (Key, Exclude) of
		%% Line 63
		<'true'> when 'true' ->
		    %% Line 64
		    apply 'format_tuples'/3
			(T, Exclude, Res)
		%% Line 65
		<'false'> when 'true' ->
		    %% Line 66
		    apply 'format_tuples'/3
			(T, Exclude, [{Key,Value}|Res])
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'format_tuples',3}}] )
	    -| ['compiler_generated'] )
	end
'assq'/2 =
    %% Line 74
    fun (_cor1,_cor0) ->
	%% Line 75
	case call 'lists':'keysearch'
		 (_cor1, 1, _cor0) of
	  %% Line 76
	  <{'value',{_cor5,Val}}>
	      when call 'erlang':'=:='
		    (_cor5,
		     _cor1) ->
	      {'value',Val}
	  %% Line 77
	  <_cor6> when 'true' ->
	      'false'
	end
'passq'/2 =
    %% Line 81
    fun (_cor1,_cor0) ->
	%% Line 82
	case call 'lists':'keysearch'
		 (_cor1, 1, _cor0) of
	  %% Line 83
	  <{'value',{_cor5,Val}}>
	      when call 'erlang':'=:='
		    (_cor5,
		     _cor1) ->
	      Val
	  %% Line 84
	  <_cor6> when 'true' ->
	      'undefined'
	end
'is_string'/1 =
    %% Line 88
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      'false'
	  %% Line 89
	  <X> when 'true' ->
	      apply 'is_string_2'/1
		  (X)
	end
'is_string_2'/1 =
    %% Line 91
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      'true'
	  %% Line 92
	  <[H|T]>
	      when try
		    let <_cor1> =
			call 'erlang':'is_integer'
			    (H)
		    in  let <_cor2> =
			    call 'erlang':'>='
				(H, 32)
			in  let <_cor3> =
				call 'erlang':'=<'
				    (H, 255)
			    in  let <_cor4> =
				    call 'erlang':'and'
					(_cor2, _cor3)
				in  call 'erlang':'and'
					(_cor1, _cor4)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 93
	      apply 'is_string_2'/1
		  (T)
	  %% Line 94
	  <_cor6> when 'true' ->
	      'false'
	end
'multi_map'/2 =
    %% Line 102
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Func,[[]|_X_ListOfLists]> when 'true' ->
	      []
	  %% Line 103
	  <Func,ListOfLists> when 'true' ->
	      let <_cor4> =
		  %% Line 104
		  ( fun (_cor2) ->
			call 'erlang':'hd'
			    (_cor2)
		    -| [{'id',{0,0,'-multi_map/2-fun-0-'}}] )
	      in  let <_cor5> =
		      %% Line 104
		      call 'lists':'map'
			  (_cor4, ListOfLists)
		  in  let <_cor6> =
			  %% Line 104
			  call 'erlang':'apply'
			      (Func, _cor5)
		      in  let <_cor9> =
			      %% Line 106
			      ( fun (_cor7) ->
				    call 'erlang':'tl'
					(_cor7)
				-| [{'id',{0,0,'-multi_map/2-fun-1-'}}] )
			  in  let <_cor10> =
				  %% Line 106
				  call 'lists':'map'
				      (_cor9, ListOfLists)
			      in  let <_cor11> =
				      %% Line 105
				      apply 'multi_map'/2
					  (Func, _cor10)
				  in  %% Line 104
				      [_cor6|_cor11]
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('misc_supp')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('misc_supp', _cor0)
end