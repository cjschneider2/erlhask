module 'systools_make' ['format_error'/1,
			'format_warning'/1,
			'get_release'/2,
			'get_release'/3,
			'get_release'/4,
			'make_hybrid_boot'/5,
			'make_script'/1,
			'make_script'/2,
			'make_script'/3,
			'make_tar'/1,
			'make_tar'/2,
			'module_info'/0,
			'module_info'/1,
			'pack_app'/1,
			'read_application'/4,
			'read_release'/2]
    attributes [%% Line 26
		'type' =
		    %% Line 26
		    [{{'record','release'},[{'record_field',28,{'atom',28,'name'}}|[{'record_field',29,{'atom',29,'vsn'}}|[{'record_field',30,{'atom',30,'erts_vsn'}}|[{'record_field',31,{'atom',31,'applications'}}|[{'record_field',34,{'atom',34,'incl_apps'}}]]]]],[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','application'},[{'record_field',40,{'atom',40,'name'}}|[{'record_field',41,{'atom',41,'type'},{'atom',41,'permanent'}}|[{'record_field',42,{'atom',42,'vsn'},{'string',42,[]}}|[{'record_field',43,{'atom',43,'id'},{'string',43,[]}}|[{'record_field',44,{'atom',44,'description'},{'string',44,[]}}|[{'record_field',45,{'atom',45,'modules'},{'nil',45}}|[{'record_field',48,{'atom',48,'uses'},{'nil',48}}|[{'record_field',50,{'atom',50,'includes'},{'nil',50}}|[{'record_field',52,{'atom',52,'regs'},{'nil',52}}|[{'record_field',55,{'atom',55,'env'},{'nil',55}}|[{'record_field',57,{'atom',57,'maxT'},{'atom',57,'infinity'}}|[{'record_field',59,{'atom',59,'maxP'},{'atom',59,'infinity'}}|[{'record_field',61,{'atom',61,'mod'},{'nil',61}}|[{'record_field',63,{'atom',63,'start_phases'}}|[{'record_field',66,{'atom',66,'dir'},{'string',66,[]}}]]]]]]]]]]]]]]],[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}]]
'make_script'/1 =
    %% Line 64
    fun (_cor0) ->
	case _cor0 of
	  <RelName>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 65
	      apply 'make_script'/2
		  (RelName, [])
	  %% Line 66
	  <RelName> when 'true' ->
	      let <_cor0> =
		  %% Line 67
		  [RelName|[]]
	      in  %% Line 125
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {( 'badarg'
			      -| ['compiler_generated'] ),RelName}
			   -| ['compiler_generated'] ), ( _cor0
							  -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	end
'make_script'/2 =
    %% Line 69
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <RelName,Flags>
	      when let <_cor2> =
		    call 'erlang':'is_list'
			(RelName)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (Flags)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 70
	      case apply 'get_outdir'/1
		       (Flags) of
		%% Line 71
		<[]> when 'true' ->
		    %% Line 72
		    apply 'make_script'/3
			(RelName, RelName, Flags)
		%% Line 73
		<OutDir> when 'true' ->
		    let <_cor4> =
			%% Line 78
			call 'filename':'basename'
			    (RelName)
		    in  let <Output> =
			    %% Line 78
			    call 'filename':'join'
				(OutDir, _cor4)
			in  %% Line 79
			    apply 'make_script'/3
				(RelName, Output, Flags)
	      end
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'make_script',2}}] )
	    -| ['compiler_generated'] )
	end
'make_script'/3 =
    %% Line 82
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <RelName,Output,Flags>
	      when try
		    let <_cor3> =
			call 'erlang':'is_list'
			    (RelName)
		    in  let <_cor4> =
			    %% Line 83
			    call 'erlang':'is_list'
				(Output)
			in  let <_cor5> =
				%% Line 84
				call 'erlang':'is_list'
				    (Flags)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 85
	      case apply 'check_args_script'/1
		       (Flags) of
		%% Line 86
		<[]> when 'true' ->
		    let <Path0> =
			%% Line 87
			apply 'get_path'/1
			    (Flags)
		    in  let <Path1> =
			    %% Line 88
			    apply 'mk_path'/1
				(Path0)
			in  let <_cor9> =
				%% Line 89
				call 'code':'get_path'
				    ()
			    in  let <_cor10> =
				    %% Line 89
				    call 'erlang':'++'
					(Path1, _cor9)
				in  let <Path> =
					%% Line 89
					apply 'make_set'/1
					    (_cor10)
				    in  let <_cor13> =
					    %% Line 90
					    call 'lists':'member'
						('src_tests', Flags)
					in  let <_cor12> =
						%% Line 90
						apply 'xref_p'/1
						    (Flags)
					    in  let <ModTestP> = {_cor13,_cor12}
						in  let <_cor15> =
							%% Line 91
							apply 'machine'/1
							    (Flags)
						    in  %% Line 91
							case apply 'get_release'/4
								 (RelName, Path, ModTestP, _cor15) of
							  %% Line 92
							  <{'ok',Release,Appls,Warnings0}> when 'true' ->
							      let <Warnings> =
								  %% Line 93
								  apply 'wsasl'/2
								      (Flags, Warnings0)
							      in  %% Line 94
								  case call 'systools_lib':'werror'
									   (Flags, Warnings) of
								    %% Line 95
								    <'true'> when 'true' ->
									%% Line 96
									apply 'return'/3
									    ('ok', Warnings, Flags)
								    %% Line 97
								    <'false'> when 'true' ->
									%% Line 98
									case apply 'generate_script'/4
										 (Output, Release, Appls, Flags) of
									  %% Line 99
									  <'ok'> when 'true' ->
									      %% Line 100
									      apply 'return'/3
										  ('ok', Warnings, Flags)
									  %% Line 101
									  <Error> when 'true' ->
									      %% Line 102
									      apply 'return'/3
										  (Error, Warnings, Flags)
									end
								    ( <_cor18> when 'true' ->
									  primop 'match_fail'
									      ({'case_clause',_cor18})
								      -| ['compiler_generated'] )
								  end
							  %% Line 105
							  <Error> when 'true' ->
							      %% Line 106
							      apply 'return'/3
								  (Error, [], Flags)
							end
		%% Line 108
		<ErrorVars> when 'true' ->
		    let <_cor0> =
			%% Line 109
			[RelName|[Flags|[]]]
		    in  %% Line 125
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),ErrorVars}
				 -| ['compiler_generated'] ), ( _cor0
								-| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
	      end
	  %% Line 112
	  <RelName,_X_Output,Flags>
	      when call 'erlang':'is_list'
		    (Flags) ->
	      let <_cor0> =
		  %% Line 113
		  [RelName|[Flags|[]]]
	      in  %% Line 125
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {( 'badarg'
			      -| ['compiler_generated'] ),RelName}
			   -| ['compiler_generated'] ), ( _cor0
							  -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	  %% Line 114
	  <RelName,_X_Output,Flags> when 'true' ->
	      let <_cor0> =
		  %% Line 115
		  [RelName|[Flags|[]]]
	      in  %% Line 125
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {( 'badarg'
			      -| ['compiler_generated'] ),Flags}
			   -| ['compiler_generated'] ), ( _cor0
							  -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	end
'wsasl'/2 =
    %% Line 118
    fun (_cor1,_cor0) ->
	%% Line 119
	case call 'lists':'member'
		 ('no_warn_sasl', _cor1) of
	  %% Line 120
	  <'true'> when 'true' ->
	      call 'lists':'delete'
		  ({'warning','missing_sasl'}, _cor0)
	  %% Line 121
	  <'false'> when 'true' ->
	      _cor0
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'badarg'/2 =
    %% Line 124
    fun (_cor1,_cor0) ->
	%% Line 125
	call 'erlang':'error'
	    ({'badarg',_cor1}, _cor0)
'machine'/1 =
    %% Line 127
    fun (_cor0) ->
	%% Line 128
	case apply 'get_flag'/2
		 ('machine', _cor0) of
	  %% Line 129
	  <{'machine',Machine}>
	      when call 'erlang':'is_atom'
		    (Machine) ->
	      Machine
	  %% Line 130
	  <_cor3> when 'true' ->
	      'false'
	end
'get_path'/1 =
    %% Line 133
    fun (_cor0) ->
	%% Line 134
	case apply 'get_flag'/2
		 ('path', _cor0) of
	  %% Line 135
	  <{'path',Path}>
	      when call 'erlang':'is_list'
		    (Path) ->
	      Path
	  %% Line 136
	  <_cor3> when 'true' ->
	      []
	end
'get_outdir'/1 =
    %% Line 139
    fun (_cor0) ->
	%% Line 140
	case apply 'get_flag'/2
		 ('outdir', _cor0) of
	  %% Line 141
	  <{'outdir',OutDir}>
	      when call 'erlang':'is_list'
		    (OutDir) ->
	      %% Line 142
	      OutDir
	  %% Line 143
	  <_cor3> when 'true' ->
	      %% Line 144
	      []
	end
'return'/3 =
    %% Line 147
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'ok',Warnings,Flags> when 'true' ->
	      %% Line 148
	      case call 'lists':'member'
		       ('silent', Flags) of
		%% Line 149
		<'true'> when 'true' ->
		    %% Line 150
		    case call 'systools_lib':'werror'
			     (Flags, Warnings) of
		      %% Line 151
		      <'true'> when 'true' ->
			  %% Line 152
			  'error'
		      %% Line 153
		      <'false'> when 'true' ->
			  %% Line 154
			  {'ok','systools_make',Warnings}
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor3})
			-| ['compiler_generated'] )
		    end
		%% Line 156
		<_cor13> when 'true' ->
		    %% Line 157
		    case call 'lists':'member'
			     ('warnings_as_errors', Flags) of
		      %% Line 158
		      <'true'> when 'true' ->
			  let <_cor4> =
			      %% Line 159
			      apply 'format_warning'/2
				  (Warnings, 'true')
			  in  do  %% Line 159
				  call 'io':'format'
				      ([126|[116|[115]]], [_cor4|[]])
				  %% Line 160
				  'error'
		      %% Line 161
		      <'false'> when 'true' ->
			  let <_cor5> =
			      %% Line 162
			      apply 'format_warning'/1
				  (Warnings)
			  in  do  %% Line 162
				  call 'io':'format'
				      ([126|[116|[115]]], [_cor5|[]])
				  %% Line 163
				  'ok'
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor6})
			-| ['compiler_generated'] )
		    end
	      end
	  %% Line 166
	  <{'error',Mod,Error},_cor14,Flags> when 'true' ->
	      %% Line 167
	      case call 'lists':'member'
		       ('silent', Flags) of
		%% Line 168
		<'true'> when 'true' ->
		    %% Line 169
		    {'error',Mod,Error}
		%% Line 170
		<_cor15> when 'true' ->
		    let <_cor8> =
			%% Line 171
			call Mod:'format_error'
			    (Error)
		    in  do  %% Line 171
			    call 'io':'format'
				([126|[116|[115]]], [_cor8|[]])
			    %% Line 172
			    'error'
	      end
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'return',3}}] )
	    -| ['compiler_generated'] )
	end
'make_hybrid_boot'/5 =
    %% Line 193
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	catch
	    %% Line 194
	    apply 'do_make_hybrid_boot'/5
		(_cor4, _cor3, _cor2, _cor1, _cor0)
'do_make_hybrid_boot'/5 =
    %% Line 195
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 196
	case call 'erlang':'binary_to_term'
		 (_cor3) of
	  <{'script',{_X_RelName1,_X_RelVsn1},Script1}> when 'true' ->
	      %% Line 197
	      case call 'erlang':'binary_to_term'
		       (_cor2) of
		<{'script',{RelName2,_X_RelVsn2},Script2}> when 'true' ->
		    let <MatchPaths> =
			%% Line 198
			apply 'get_regexp_path'/1
			    (_cor1)
		    in  let <NewScript1> =
			    %% Line 199
			    apply 'replace_paths'/2
				(Script1, MatchPaths)
			in  %% Line 200
			    case apply 'get_apps'/4
				     (Script2, 'undefined', 'undefined', 'undefined') of
			      <{Kernel,Stdlib,Sasl}> when 'true' ->
				  let <NewScript2> =
				      %% Line 201
				      apply 'replace_apps'/4
					  (NewScript1, Kernel, Stdlib, Sasl)
				  in  let <NewScript3> =
					  %% Line 202
					  apply 'add_apply_upgrade'/2
					      (NewScript2, _cor0)
				      in  let <Boot> =
					      %% Line 203
					      call 'erlang':'term_to_binary'
						  ({'script',{RelName2,_cor4},NewScript3})
					  in  %% Line 204
					      {'ok',Boot}
			      ( <_cor9> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor9})
				-| ['compiler_generated'] )
			    end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'get_regexp_path'/1 =
    %% Line 207
    fun (_cor0) ->
	case _cor0 of
	  <{KernelPath,StdlibPath,SaslPath}> when 'true' ->
	      %% Line 208
	      case call 're':'compile'
		       ([107|[101|[114|[110|[101|[108|[45|[91|[48|[45|[57|[46|[93|[43]]]]]]]]]]]]]], ['unicode']) of
		<{'ok',KernelMP}> when 'true' ->
		    %% Line 209
		    case call 're':'compile'
			     ([115|[116|[100|[108|[105|[98|[45|[91|[48|[45|[57|[46|[93|[43]]]]]]]]]]]]]], ['unicode']) of
		      <{'ok',StdlibMP}> when 'true' ->
			  %% Line 210
			  case call 're':'compile'
				   ([115|[97|[115|[108|[45|[91|[48|[45|[57|[46|[93|[43]]]]]]]]]]]], ['unicode']) of
			    <{'ok',SaslMP}> when 'true' ->
				%% Line 211
				[{KernelMP,KernelPath}|[{StdlibMP,StdlibPath}|[{SaslMP,SaslPath}|[]]]]
			    ( <_cor3> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor3})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'get_regexp_path',1}}] )
	    -| ['compiler_generated'] )
	end
'replace_paths'/2 =
    %% Line 215
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'path',Path}|Script],MatchPaths> when 'true' ->
	      let <_cor2> =
		  %% Line 216
		  apply 'replace_path'/2
		      (Path, MatchPaths)
	      in  let <_cor3> =
		      %% Line 216
		      apply 'replace_paths'/2
			  (Script, MatchPaths)
		  in  %% Line 216
		      [{'path',_cor2}|_cor3]
	  %% Line 217
	  <[Stuff|Script],MatchPaths> when 'true' ->
	      let <_cor4> =
		  %% Line 218
		  apply 'replace_paths'/2
		      (Script, MatchPaths)
	      in  %% Line 218
		  [Stuff|_cor4]
	  %% Line 219
	  <[],_cor7> when 'true' ->
	      %% Line 220
	      []
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'replace_paths',2}}] )
	    -| ['compiler_generated'] )
	end
'replace_path'/2 =
    %% Line 222
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Path|Paths],MatchPaths> when 'true' ->
	      let <_cor2> =
		  %% Line 223
		  apply 'do_replace_path'/2
		      (Path, MatchPaths)
	      in  let <_cor3> =
		      %% Line 223
		      apply 'replace_path'/2
			  (Paths, MatchPaths)
		  in  %% Line 223
		      [_cor2|_cor3]
	  %% Line 224
	  <[],_cor6> when 'true' ->
	      %% Line 225
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'replace_path',2}}] )
	    -| ['compiler_generated'] )
	end
'do_replace_path'/2 =
    %% Line 227
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Path,[{MP,ReplacePath}|MatchPaths]> when 'true' ->
	      %% Line 228
	      case call 're':'run'
		       (Path, MP, [{'capture','none'}]) of
		%% Line 229
		<'nomatch'> when 'true' ->
		    apply 'do_replace_path'/2
			(Path, MatchPaths)
		%% Line 230
		<'match'> when 'true' ->
		    ReplacePath
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 232
	  <Path,[]> when 'true' ->
	      %% Line 233
	      Path
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'do_replace_path',2}}] )
	    -| ['compiler_generated'] )
	end
'get_apps'/4 =
    %% Line 236
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Kernel = {'kernelProcess','application_controller',%% Line 237
							       {'application_controller','start',[{'application','kernel',_cor8}|[]]}}|%% Line 238
																       Script],_cor9,%% Line 238
																		     Stdlib,%% Line 238
																			    Sasl> when 'true' ->
	      %% Line 239
	      apply 'get_apps'/4
		  (Script, Kernel, Stdlib, Sasl)
	  %% Line 240
	  <[Stdlib = {'apply',{'application','load',[{'application','stdlib',_cor10}|[]]}}|Script],%% Line 241
												   Kernel,_cor11,%% Line 241
														 Sasl> when 'true' ->
	      %% Line 242
	      apply 'get_apps'/4
		  (Script, Kernel, Stdlib, Sasl)
	  %% Line 243
	  <[Sasl = {'apply',{'application','load',[{'application','sasl',_cor12}|[]]}}|_X_Script],%% Line 244
												  Kernel,%% Line 244
													 Stdlib,_cor13> when 'true' ->
	      %% Line 245
	      {Kernel,Stdlib,Sasl}
	  %% Line 246
	  <[_cor14|Script],Kernel,Stdlib,Sasl> when 'true' ->
	      %% Line 247
	      apply 'get_apps'/4
		  (Script, Kernel, Stdlib, Sasl)
	  %% Line 248
	  <[],'undefined',_cor15,_cor16> when 'true' ->
	      %% Line 249
	      call 'erlang':'throw'
		  ({'error',{'app_not_found','kernel'}})
	  %% Line 250
	  <[],_cor17,'undefined',_cor18> when 'true' ->
	      %% Line 251
	      call 'erlang':'throw'
		  ({'error',{'app_not_found','stdlib'}})
	  %% Line 252
	  <[],_cor19,_cor20,'undefined'> when 'true' ->
	      %% Line 253
	      call 'erlang':'throw'
		  ({'error',{'app_not_found','sasl'}})
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'get_apps',4}}] )
	    -| ['compiler_generated'] )
	end
'replace_apps'/4 =
    %% Line 257
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'kernelProcess','application_controller',%% Line 258
						      {'application_controller','start',[{'application','kernel',_cor11}|[]]}}|%% Line 259
															       Script],%% Line 259
																       Kernel,%% Line 259
																	      Stdlib,%% Line 259
																		     Sasl> when 'true' ->
	      let <_cor4> =
		  %% Line 260
		  apply 'replace_apps'/4
		      (Script, 'undefined', Stdlib, Sasl)
	      in  %% Line 260
		  [Kernel|_cor4]
	  %% Line 261
	  <[{'apply',{'application','load',[{'application','stdlib',_cor12}|[]]}}|Script],%% Line 262
											  Kernel,%% Line 262
												 Stdlib,%% Line 262
													Sasl> when 'true' ->
	      let <_cor5> =
		  %% Line 263
		  apply 'replace_apps'/4
		      (Script, Kernel, 'undefined', Sasl)
	      in  %% Line 263
		  [Stdlib|_cor5]
	  %% Line 264
	  <[{'apply',{'application','load',[{'application','sasl',_cor13}|[]]}}|Script],%% Line 265
											_X_Kernel,%% Line 265
												  _X_Stdlib,%% Line 265
													    Sasl> when 'true' ->
	      %% Line 266
	      [Sasl|Script]
	  %% Line 267
	  <[Stuff|Script],Kernel,Stdlib,Sasl> when 'true' ->
	      let <_cor6> =
		  %% Line 268
		  apply 'replace_apps'/4
		      (Script, Kernel, Stdlib, Sasl)
	      in  %% Line 268
		  [Stuff|_cor6]
	  %% Line 269
	  <[],'undefined','undefined',_cor14> when 'true' ->
	      %% Line 270
	      call 'erlang':'throw'
		  ({'error',{'app_not_replaced','sasl'}})
	  %% Line 271
	  <[],'undefined',_cor15,_cor16> when 'true' ->
	      %% Line 272
	      call 'erlang':'throw'
		  ({'error',{'app_not_replaced','stdlib'}})
	  %% Line 273
	  <[],_cor17,_cor18,_cor19> when 'true' ->
	      %% Line 274
	      call 'erlang':'throw'
		  ({'error',{'app_not_replaced','kernel'}})
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'replace_apps',4}}] )
	    -| ['compiler_generated'] )
	end
'add_apply_upgrade'/2 =
    %% Line 279
    fun (_cor1,_cor0) ->
	%% Line 280
	case call 'lists':'reverse'
		 (_cor1) of
	  <[{'progress','started'}|RevScript]> when 'true' ->
	      %% Line 281
	      call 'lists':'reverse'
		  ([{'progress','started'}|%% Line 282
					   [{'apply',{'release_handler','new_emulator_upgrade',_cor0}}|%% Line 283
												       RevScript]])
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'make_tar'/1 =
    %% Line 321
    fun (_cor0) ->
	case _cor0 of
	  <RelName>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 322
	      apply 'make_tar'/2
		  (RelName, [])
	  %% Line 323
	  <RelName> when 'true' ->
	      let <_cor0> =
		  %% Line 324
		  [RelName|[]]
	      in  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {( 'badarg'
			      -| ['compiler_generated'] ),%% Line 324
							  RelName}
			   -| ['compiler_generated'] ), ( _cor0
							  -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	end
'make_tar'/2 =
    %% Line 326
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <RelName,Flags>
	      when let <_cor2> =
		    call 'erlang':'is_list'
			(RelName)
		in  let <_cor3> =
			call 'erlang':'is_list'
			    (Flags)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 327
	      case apply 'check_args_tar'/1
		       (Flags) of
		%% Line 328
		<[]> when 'true' ->
		    let <Path0> =
			%% Line 329
			apply 'get_path'/1
			    (Flags)
		    in  let <Path1> =
			    %% Line 330
			    apply 'mk_path'/1
				(Path0)
			in  let <_cor6> =
				%% Line 331
				call 'code':'get_path'
				    ()
			    in  let <_cor7> =
				    %% Line 331
				    call 'erlang':'++'
					(Path1, _cor6)
				in  let <Path> =
					%% Line 331
					apply 'make_set'/1
					    (_cor7)
				    in  let <_cor10> =
					    %% Line 332
					    call 'lists':'member'
						('src_tests', Flags)
					in  let <_cor9> =
						%% Line 332
						apply 'xref_p'/1
						    (Flags)
					    in  let <ModTestP> = {_cor10,_cor9}
						in  let <_cor12> =
							%% Line 333
							apply 'machine'/1
							    (Flags)
						    in  %% Line 333
							case apply 'get_release'/4
								 (RelName, Path, ModTestP, _cor12) of
							  %% Line 334
							  <{'ok',Release,Appls,Warnings}> when 'true' ->
							      let <_cor13> =
								  catch
								      %% Line 335
								      apply 'mk_tar'/5
									  (RelName, Release, Appls, Flags, Path1)
							      in  %% Line 335
								  case _cor13 of
								    %% Line 336
								    <'ok'> when 'true' ->
									%% Line 337
									apply 'return'/3
									    ('ok', Warnings, Flags)
								    %% Line 338
								    <Error> when 'true' ->
									%% Line 339
									apply 'return'/3
									    (Error, Warnings, Flags)
								  end
							  %% Line 341
							  <Error> when 'true' ->
							      %% Line 342
							      apply 'return'/3
								  (Error, [], Flags)
							end
		%% Line 344
		<ErrorVars> when 'true' ->
		    let <_cor0> =
			%% Line 345
			[RelName|[Flags|[]]]
		    in  ( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {( 'badarg'
				    -| ['compiler_generated'] ),%% Line 345
								ErrorVars}
				 -| ['compiler_generated'] ), ( _cor0
								-| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
	      end
	  %% Line 347
	  <RelName,Flags>
	      when call 'erlang':'is_list'
		    (Flags) ->
	      let <_cor0> =
		  %% Line 348
		  [RelName|[Flags|[]]]
	      in  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {( 'badarg'
			      -| ['compiler_generated'] ),%% Line 348
							  RelName}
			   -| ['compiler_generated'] ), ( _cor0
							  -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	  %% Line 349
	  <RelName,Flags> when 'true' ->
	      let <_cor0> =
		  %% Line 350
		  [RelName|[Flags|[]]]
	      in  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {( 'badarg'
			      -| ['compiler_generated'] ),%% Line 350
							  Flags}
			   -| ['compiler_generated'] ), ( _cor0
							  -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	end
'get_release'/2 =
    %% Line 358
    fun (_cor1,_cor0) ->
	%% Line 359
	apply 'get_release'/4
	    (_cor1, _cor0, {'false','false'}, 'false')
'get_release'/3 =
    %% Line 361
    fun (_cor2,_cor1,_cor0) ->
	%% Line 362
	apply 'get_release'/4
	    (_cor2, _cor1, _cor0, 'false')
'get_release'/4 =
    %% Line 364
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    catch
		%% Line 365
		apply 'get_release1'/4
		    (_cor3, _cor2, _cor1, _cor0)
	in  %% Line 365
	    case _cor4 of
	      %% Line 366
	      <{'error',Error}> when 'true' ->
		  %% Line 367
		  {'error','systools_make',Error}
	      %% Line 368
	      <{'EXIT',Why}> when 'true' ->
		  %% Line 369
		  {'error','systools_make',{'EXIT',Why}}
	      %% Line 370
	      <Answer> when 'true' ->
		  %% Line 371
		  Answer
	    end
'get_release1'/4 =
    %% Line 374
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 375
	case apply 'read_release'/2
		 (_cor3, _cor2) of
	  <{'ok',Release,Warnings1}> when 'true' ->
	      %% Line 376
	      case apply 'collect_applications'/2
		       (Release, _cor2) of
		<{'ok',Appls0}> when 'true' ->
		    %% Line 377
		    case apply 'check_applications'/1
			     (Appls0) of
		      <{'ok',Appls1}> when 'true' ->
			  %% Line 378
			  case apply 'sort_used_and_incl_appls'/2
				   (Appls1, Release) of
			    <{'ok',Appls2}> when 'true' ->
				%% Line 379
				case apply 'check_modules'/4
					 (Appls2, _cor2, _cor1, _cor0) of
				  <{'ok',Warnings2}> when 'true' ->
				      %% Line 380
				      case apply 'sort_appls'/1
					       (Appls2) of
					<{'ok',Appls}> when 'true' ->
					    let <_cor10> =
						%% Line 381
						call 'erlang':'++'
						    (Warnings1, Warnings2)
					    in  %% Line 381
						{'ok',Release,Appls,_cor10}
					( <_cor9> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor9})
					  -| ['compiler_generated'] )
				      end
				  ( <_cor8> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor8})
				    -| ['compiler_generated'] )
				end
			    ( <_cor7> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor7})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'read_release'/2 =
    %% Line 386
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 387
	    call 'erlang':'++'
		(_cor1, [46|[114|[101|[108]]]])
	in  %% Line 387
	    case apply 'read_file'/2
		     (_cor2, [[46]|_cor0]) of
	      %% Line 388
	      <{'ok',Release,_X_FullName}> when 'true' ->
		  %% Line 389
		  apply 'check_rel'/1
		      (Release)
	      %% Line 390
	      <{'error',Error}> when 'true' ->
		  %% Line 391
		  call 'erlang':'throw'
		      ({'error','systools_make',Error})
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor3})
		-| ['compiler_generated'] )
	    end
'check_rel'/1 =
    %% Line 394
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 395
		apply 'check_rel1'/1
		    (_cor0)
	in  %% Line 395
	    case _cor1 of
	      %% Line 396
	      <{'ok',{Name,Vsn,Evsn,Appl,Incl},Ws}> when 'true' ->
		  %% Line 397
		  {'ok',{'release',Name,Vsn,%% Line 398
					    Evsn,%% Line 399
						 Appl,%% Line 400
						      Incl},%% Line 401
							    Ws}
	      %% Line 402
	      <{'error',Error}> when 'true' ->
		  %% Line 403
		  call 'erlang':'throw'
		      ({'error','systools_make',Error})
	      %% Line 404
	      <Error> when 'true' ->
		  %% Line 405
		  call 'erlang':'throw'
		      ({'error','systools_make',Error})
	    end
'check_rel1'/1 =
    %% Line 408
    fun (_cor0) ->
	case _cor0 of
	  <{'release',{Name,Vsn},{'erts',EVsn},Appl}>
	      when call 'erlang':'is_list'
		    (Appl) ->
	      %% Line 409
	      case apply 'check_name'/1
		       (Name) of
		<_cor6>
		    when call 'erlang':'=:='
			  (_cor6,
			   Name) ->
		    %% Line 410
		    case apply 'check_vsn'/1
			     (Vsn) of
		      <_cor7>
			  when call 'erlang':'=:='
				(_cor7,
				 Vsn) ->
			  %% Line 411
			  case apply 'check_evsn'/1
				   (EVsn) of
			    <_cor8>
				when call 'erlang':'=:='
				      (_cor8,
				       EVsn) ->
				%% Line 412
				case apply 'check_appl'/1
					 (Appl) of
				  <{{Appls,Incls},Ws}> when 'true' ->
				      %% Line 413
				      {'ok',{Name,Vsn,EVsn,Appls,Incls},Ws}
				  ( <_cor4> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor4})
				    -| ['compiler_generated'] )
				end
			    ( <_cor3> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor3})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 414
	  <_cor9> when 'true' ->
	      %% Line 415
	      {'error','badly_formatted_release'}
	end
'check_name'/1 =
    %% Line 417
    fun (_cor0) ->
	%% Line 418
	case apply 'string_p'/1
		 (_cor0) of
	  %% Line 419
	  <'true'> when 'true' ->
	      _cor0
	  %% Line 421
	  <_cor3> when 'true' ->
	      %% Line 422
	      call 'erlang':'throw'
		  ({'error',{'illegal_name',_cor0}})
	end
'check_vsn'/1 =
    %% Line 425
    fun (_cor0) ->
	%% Line 426
	case apply 'string_p'/1
		 (_cor0) of
	  %% Line 427
	  <'true'> when 'true' ->
	      _cor0
	  %% Line 429
	  <_cor3> when 'true' ->
	      %% Line 430
	      call 'erlang':'throw'
		  ({'error',{'illegal_form',_cor0}})
	end
'check_evsn'/1 =
    %% Line 433
    fun (_cor0) ->
	%% Line 434
	case apply 'string_p'/1
		 (_cor0) of
	  %% Line 435
	  <'true'> when 'true' ->
	      _cor0
	  %% Line 437
	  <_cor3> when 'true' ->
	      %% Line 438
	      call 'erlang':'throw'
		  ({'error',{'illegal_form',{'erts',_cor0}}})
	end
'check_appl'/1 =
    %% Line 441
    fun (_cor0) ->
	let <_cor22> =
	    %% Line 442
	    ( fun (_cor20) ->
		  case _cor20 of
		    <{App,Vsn}>
			when call 'erlang':'is_atom'
			      (App) ->
			let <_cor1> =
			    %% Line 443
			    apply 'string_p'/1
				(Vsn)
			in  %% Line 443
			    call 'erlang':'not'
				(_cor1)
		    %% Line 444
		    <{App,Vsn,Incl}>
			when let <_cor2> =
			      call 'erlang':'is_atom'
				  (App)
			  in  let <_cor3> =
				  call 'erlang':'is_list'
				      (Incl)
			      in  call 'erlang':'and'
				      (_cor2, _cor3) ->
			let <_cor5> =
			    %% Line 445
			    apply 'string_p'/1
				(Vsn)
			in  let <_cor4> =
				%% Line 445
				apply 'a_list_p'/1
				    (Incl)
			    in  %% Line 445
				case <_cor5,_cor4> of
				  %% Line 446
				  <'true','true'> when 'true' ->
				      'false'
				  %% Line 447
				  <_fol54,_fol55> when 'true' ->
				      'true'
				end
		    %% Line 449
		    <{App,Vsn,Type}>
			when let <_cor7> =
			      call 'erlang':'is_atom'
				  (App)
			  in  let <_cor8> =
				  call 'erlang':'is_atom'
				      (Type)
			      in  call 'erlang':'and'
				      (_cor7, _cor8) ->
			let <_cor10> =
			    %% Line 450
			    apply 'string_p'/1
				(Vsn)
			in  let <_cor9> =
				%% Line 450
				apply 'is_app_type'/1
				    (Type)
			    in  %% Line 450
				case <_cor10,_cor9> of
				  %% Line 451
				  <'true','true'> when 'true' ->
				      'false'
				  %% Line 452
				  <_fol58,_fol59> when 'true' ->
				      'true'
				end
		    %% Line 454
		    <{App,Vsn,Type,Incl}>
			when try
			      let <_cor12> =
				  call 'erlang':'is_atom'
				      (App)
			      in  let <_cor13> =
				      %% Line 455
				      call 'erlang':'is_atom'
					  (Type)
				  in  let <_cor14> =
					  %% Line 456
					  call 'erlang':'is_list'
					      (Incl)
				      in  let <_cor15> =
					      call 'erlang':'and'
						  (_cor13, _cor14)
					  in  call 'erlang':'and'
						  (_cor12, _cor15)
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			let <_cor18> =
			    %% Line 457
			    apply 'string_p'/1
				(Vsn)
			in  let <_cor17> =
				%% Line 457
				apply 'is_app_type'/1
				    (Type)
			    in  let <_cor16> =
				    %% Line 457
				    apply 'a_list_p'/1
					(Incl)
				in  %% Line 457
				    case <_cor18,_cor17,_cor16> of
				      %% Line 458
				      <'true','true','true'> when 'true' ->
					  'false'
				      %% Line 459
				      <_fol62,_fol63,_fol64> when 'true' ->
					  'true'
				    end
		    %% Line 461
		    <_cor30> when 'true' ->
			%% Line 462
			'true'
		  end
	      -| [{'id',{0,0,'-check_appl/1-fun-0-'}}] )
	in  %% Line 442
	    case call 'lists':'filter'
		     (_cor22, _cor0) of
	      %% Line 465
	      <[]> when 'true' ->
		  %% Line 466
		  case apply 'split_app_incl'/1
			   (_cor0) of
		    <{ApplsNoIncls,Incls}> when 'true' ->
			%% Line 467
			case apply 'mandatory_applications'/4
				 (ApplsNoIncls, 'undefined', %% Line 468
							     'undefined', %% Line 468
									  'undefined') of
			  <{'ok',Ws}> when 'true' ->
			      %% Line 469
			      {{ApplsNoIncls,Incls},Ws}
			  ( <_cor24> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor24})
			    -| ['compiler_generated'] )
			end
		    ( <_cor23> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor23})
		      -| ['compiler_generated'] )
		  end
	      %% Line 470
	      <Illegal> when 'true' ->
		  %% Line 471
		  call 'erlang':'throw'
		      ({'error',{'illegal_applications',Illegal}})
	    end
'mandatory_applications'/4 =
    %% Line 474
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'kernel',_cor8,Type}|Apps],'undefined',Stdlib,Sasl> when 'true' ->
	      %% Line 475
	      apply 'mandatory_applications'/4
		  (Apps, Type, Stdlib, Sasl)
	  %% Line 476
	  <[{'stdlib',_cor9,Type}|Apps],Kernel,'undefined',Sasl> when 'true' ->
	      %% Line 477
	      apply 'mandatory_applications'/4
		  (Apps, Kernel, Type, Sasl)
	  %% Line 478
	  <[{'sasl',_cor10,Type}|Apps],Kernel,Stdlib,'undefined'> when 'true' ->
	      %% Line 479
	      apply 'mandatory_applications'/4
		  (Apps, Kernel, Stdlib, Type)
	  %% Line 480
	  <[_cor11|Apps],Kernel,Stdlib,Sasl> when 'true' ->
	      %% Line 481
	      apply 'mandatory_applications'/4
		  (Apps, Kernel, Stdlib, Sasl)
	  %% Line 482
	  <[],Type,_cor12,_cor13>
	      when call 'erlang':'=/='
		    (Type,
		     'permanent') ->
	      %% Line 483
	      apply 'error_mandatory_application'/2
		  ('kernel', Type)
	  %% Line 484
	  <[],_cor14,Type,_cor15>
	      when call 'erlang':'=/='
		    (Type,
		     'permanent') ->
	      %% Line 485
	      apply 'error_mandatory_application'/2
		  ('stdlib', Type)
	  %% Line 486
	  <[],_cor16,_cor17,'undefined'> when 'true' ->
	      %% Line 487
	      {'ok',[{'warning','missing_sasl'}]}
	  %% Line 488
	  <[],_cor18,_cor19,_cor20> when 'true' ->
	      %% Line 489
	      {'ok',[]}
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'mandatory_applications',4}}] )
	    -| ['compiler_generated'] )
	end
'error_mandatory_application'/2 =
    %% Line 491
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <App,'undefined'> when 'true' ->
	      %% Line 492
	      call 'erlang':'throw'
		  ({'error',{'missing_mandatory_app',App}})
	  %% Line 493
	  <App,Type> when 'true' ->
	      %% Line 494
	      call 'erlang':'throw'
		  ({'error',{'mandatory_app',App,Type}})
	end
'split_app_incl'/1 =
    %% Line 496
    fun (_cor0) ->
	apply 'split_app_incl'/3
	    (_cor0, [], [])
'split_app_incl'/3 =
    %% Line 498
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{App,Vsn}|Appls],Apps,Incls> when 'true' ->
	      %% Line 499
	      apply 'split_app_incl'/3
		  (Appls, [{App,Vsn,'permanent'}|Apps], Incls)
	  %% Line 500
	  <[{App,Vsn,Incl}|Appls],Apps,Incls>
	      when call 'erlang':'is_list'
		    (Incl) ->
	      %% Line 501
	      apply 'split_app_incl'/3
		  (Appls, [{App,Vsn,'permanent'}|Apps], [{App,Incl}|Incls])
	  %% Line 502
	  <[{App,Vsn,Type}|Appls],Apps,Incls> when 'true' ->
	      %% Line 503
	      apply 'split_app_incl'/3
		  (Appls, [{App,Vsn,Type}|Apps], Incls)
	  %% Line 504
	  <[{App,Vsn,Type,Incl}|Appls],Apps,Incls>
	      when call 'erlang':'is_list'
		    (Incl) ->
	      %% Line 505
	      apply 'split_app_incl'/3
		  (Appls, [{App,Vsn,Type}|Apps], [{App,Incl}|Incls])
	  %% Line 506
	  <[],Apps,Incls> when 'true' ->
	      let <_cor4> =
		  %% Line 507
		  call 'lists':'reverse'
		      (Apps)
	      in  let <_cor3> =
		      %% Line 507
		      call 'lists':'reverse'
			  (Incls)
		  in  %% Line 507
		      {_cor4,_cor3}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'split_app_incl',3}}] )
	    -| ['compiler_generated'] )
	end
'collect_applications'/2 =
    %% Line 515
    fun (_cor1,_cor0) ->
	%% Line 516
	( case _cor1 of
	    ( <( {'release',_cor28,_cor29,_cor30,_rec0,_cor31}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor22> =
		      %% Line 518
		      ( fun (_cor19,_cor18) ->
			    case <_cor19,_cor18> of
			      <{Name,Vsn,Type},{Ok,Errs}> when 'true' ->
				  let <_cor8> =
				      %% Line 519
				      apply 'to_list'/1
					  (Name)
				  in  %% Line 519
				      case apply 'read_application'/4
					       (_cor8, Vsn, _cor0, _cor31) of
					%% Line 520
					<{'ok',A}> when 'true' ->
					    %% Line 521
					    ( case A of
						( <( {'application',_rec2,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51}
						     -| ['compiler_generated'] )> when 'true' ->
						      case <_rec2,_cor39> of
							%% Line 522
							<_cor68,_cor69>
							    when let <_cor70> =
								  call 'erlang':'=:='
								      (_cor68, Name)
							      in  let <_cor71> =
								      call 'erlang':'=:='
									  (_cor69, Vsn)
								  in  call 'erlang':'and'
									  (_cor70, _cor71) ->
							    let <_cor15> =
								%% Line 523
								call 'erlang':'setelement'
								    (3, A, Type)
							    in  %% Line 523
								{[{{Name,Vsn},_cor15}|Ok],%% Line 524
											  Errs}
							%% Line 525
							<_fol70,_fol71> when 'true' ->
							    %% Line 526
							    let <E> = {_fol70,_fol71}
							    in  {Ok,[{'bad_application_name',{Name,E}}|Errs]}
						      end
						  -| ['compiler_generated'] )
						( <_cor52> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','application'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					%% Line 528
					<{'error',What}> when 'true' ->
					    %% Line 529
					    {Ok,[{'error_reading',{Name,What}}|Errs]}
					( <_cor17> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor17})
					  -| ['compiler_generated'] )
				      end
			      ( <_cor21,_cor20> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor21,_cor20})
				      -| [{'function_name',{'-collect_applications/2-fun-0-',2}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-collect_applications/2-fun-0-'}}] )
		  in  %% Line 532
		      case call 'lists':'foldl'
			       (_cor22, {[],[]}, _rec0) of
			%% Line 533
			<{A,[]}> when 'true' ->
			    let <_cor24> =
				%% Line 534
				call 'lists':'reverse'
				    (A)
			    in  %% Line 534
				{'ok',_cor24}
			%% Line 535
			<{_cor88,Errs}> when 'true' ->
			    %% Line 536
			    call 'erlang':'throw'
				({'error',Errs})
			( <_cor25> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor25})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_cor32> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','release'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'read_application'/4 =
    %% Line 543
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 544
	apply 'read_application'/6
	    (_cor3, _cor2, _cor1, _cor0, 'false', 'no_fault')
'read_application'/6 =
    %% Line 546
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Name,Vsn,[Dir|Path],Incls,Found,FirstError> when 'true' ->
	      let <_cor6> =
		  %% Line 547
		  call 'erlang':'++'
		      (Name, [46|[97|[112|[112]]]])
	      in  %% Line 547
		  case apply 'read_file'/2
			   (_cor6, [Dir|[]]) of
		    %% Line 548
		    <{'ok',Term,FullName}> when 'true' ->
			%% Line 549
			case apply 'parse_application'/4
				 (Term, FullName, Vsn, Incls) of
			  %% Line 550
			  <{'error',{'no_valid_version',{_cor21,OtherVsn}}}>
			      when let <_cor22> =
				    call 'erlang':'=:='
					(_cor21, Vsn)
				in  let <_cor23> =
					call 'erlang':'=:='
					    (FirstError, 'no_fault')
				    in  call 'erlang':'and'
					    (_cor22, _cor23) ->
			      let <_cor7> =
				  %% Line 552
				  call 'erlang':'++'
				      (Name, [46|[97|[112|[112]]]])
			      in  let <_cor8> =
				      %% Line 552
				      call 'filename':'join'
					  (Dir, _cor7)
				  in  let <NFE> =
					  %% Line 551
					  {'no_valid_version',{{[115|[104|[111|[117|[108|[100|[32|[98|[101]]]]]]]]],Vsn},%% Line 552
															 {[102|[111|[117|[110|[100|[32|[102|[105|[108|[101]]]]]]]]]],_cor8,%% Line 553
																							   OtherVsn}}}
				      in  %% Line 554
					  apply 'read_application'/6
					      (Name, Vsn, Path, Incls, 'true', NFE)
			  %% Line 555
			  <{'error',{'no_valid_version',{_cor24,_X_OtherVsn}}}>
			      when call 'erlang':'=:='
				    (_cor24,
				     Vsn) ->
			      %% Line 556
			      apply 'read_application'/6
				  (Name, Vsn, Path, Incls, 'true', FirstError)
			  %% Line 557
			  <Res> when 'true' ->
			      %% Line 558
			      Res
			end
		    %% Line 560
		    <{'error',{'parse',_X_File,{Line,_X_Mod,Err}}}>
			when call 'erlang':'=:='
			      (FirstError,
			       'no_fault') ->
			let <_cor11> =
			    %% Line 562
			    call 'erlang':'++'
				(Name, [46|[97|[112|[112]]]])
			in  let <_cor12> =
				%% Line 562
				call 'filename':'join'
				    (Dir, _cor11)
			    in  %% Line 561
				apply 'read_application'/6
				    (Name, Vsn, Path, Incls, Found, %% Line 562
								    {'parse_error',{_cor12,Line,Err}})
		    %% Line 563
		    <{'error',{'parse',_X_File,_X_Err}}> when 'true' ->
			%% Line 564
			apply 'read_application'/6
			    (Name, Vsn, Path, Incls, Found, FirstError)
		    %% Line 565
		    <{'error',_X_Err}> when 'true' ->
			%% Line 566
			apply 'read_application'/6
			    (Name, Vsn, Path, Incls, Found, FirstError)
		    ( <_cor13> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor13})
		      -| ['compiler_generated'] )
		  end
	  %% Line 568
	  <Name,Vsn,[],_cor25,'true','no_fault'> when 'true' ->
	      %% Line 569
	      {'error',{'application_vsn',{Name,Vsn}}}
	  %% Line 570
	  <_X_Name,_X_Vsn,[],_cor26,'true',FirstError> when 'true' ->
	      %% Line 571
	      {'error',FirstError}
	  %% Line 572
	  <Name,_cor27,[],_cor28,_cor29,'no_fault'> when 'true' ->
	      let <_cor14> =
		  %% Line 573
		  call 'erlang':'++'
		      (Name, [46|[97|[112|[112]]]])
	      in  %% Line 573
		  {'error',{'not_found',_cor14}}
	  %% Line 574
	  <_X_Name,_cor30,[],_cor31,_cor32,FirstError> when 'true' ->
	      %% Line 575
	      {'error',FirstError}
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'read_application',6}}] )
	    -| ['compiler_generated'] )
	end
'parse_application'/4 =
    %% Line 577
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'application',Name,Dict},File,Vsn,Incls>
	      when let <_cor4> =
		    %% Line 578
		    call 'erlang':'is_atom'
			(Name)
		in  let <_cor5> =
			%% Line 579
			call 'erlang':'is_list'
			    (Dict)
		    in  %% Line 578
			call 'erlang':'and'
			    (_cor4, _cor5) ->
	      let <_cor7> =
		  catch
		      %% Line 582
		      apply 'get_items'/2
			  (['vsn'|['id'|['description'|['modules'|['registered'|['applications'|['included_applications'|['mod'|['start_phases'|['env'|['maxT'|['maxP']]]]]]]]]]]], Dict)
	      in  %% Line 582
		  case _cor7 of
		    %% Line 583
		    <[_cor15|[Id|[Desc|[Mods|[Regs|[Apps|[Incs0|[Mod|[Phases|[Env|[MaxT|[MaxP|[]]]]]]]]]]]]]>
			when call 'erlang':'=:='
			      (_cor15,
			       Vsn) ->
			%% Line 584
			case apply 'override_include'/3
				 (Name, Incs0, Incls) of
			  %% Line 585
			  <{'ok',Incs}> when 'true' ->
			      let <_cor8> =
				  %% Line 599
				  call 'filename':'dirname'
				      (File)
			      in  %% Line 586
				  {'ok',{'application',Name,'permanent',%% Line 587
									Vsn,%% Line 588
									    Id,%% Line 589
									       Desc,%% Line 590
										    Mods,%% Line 591
											 Apps,%% Line 592
											      Incs,%% Line 593
												   Regs,%% Line 596
													Env,%% Line 597
													    MaxT,%% Line 598
														 MaxP,%% Line 594
														      Mod,%% Line 595
															  Phases,_cor8}}
			  %% Line 600
			  <{'error',IncApps}> when 'true' ->
			      %% Line 601
			      {'error',{'override_include',IncApps}}
			  ( <_cor9> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor9})
			    -| ['compiler_generated'] )
			end
		    %% Line 603
		    <[OtherVsn|[_cor16|[_cor17|[_cor18|[_cor19|[_cor20|[_cor21|[_cor22|[_cor23|[_cor24|[_cor25|[_cor26|[]]]]]]]]]]]]]> when 'true' ->
			%% Line 604
			{'error',{'no_valid_version',{Vsn,OtherVsn}}}
		    %% Line 605
		    <Err> when 'true' ->
			%% Line 606
			{'error',{Err,{'application',Name,Dict}}}
		  end
	  %% Line 608
	  <Other,_cor27,_cor28,_cor29> when 'true' ->
	      %% Line 609
	      {'error',{'badly_formatted_application',Other}}
	end
'override_include'/3 =
    %% Line 614
    fun (_cor2,_cor1,_cor0) ->
	%% Line 615
	case call 'lists':'keysearch'
		 (_cor2, 1, _cor0) of
	  %% Line 616
	  <{'value',{_cor8,I}}>
	      when call 'erlang':'=:='
		    (_cor8,
		     _cor2) ->
	      %% Line 617
	      case apply 'specified'/2
		       (I, _cor1) of
		%% Line 618
		<[]> when 'true' ->
		    %% Line 619
		    {'ok',I}
		%% Line 620
		<NotSpec> when 'true' ->
		    %% Line 621
		    {'error',NotSpec}
	      end
	  %% Line 623
	  <_cor9> when 'true' ->
	      %% Line 624
	      {'ok',_cor1}
	end
'specified'/2 =
    %% Line 627
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[App|Incls],Spec> when 'true' ->
	      %% Line 628
	      case call 'lists':'member'
		       (App, Spec) of
		%% Line 629
		<'true'> when 'true' ->
		    %% Line 630
		    apply 'specified'/2
			(Incls, Spec)
		%% Line 631
		<_cor6> when 'true' ->
		    let <_cor2> =
			%% Line 632
			apply 'specified'/2
			    (Incls, Spec)
		    in  %% Line 632
			[App|_cor2]
	      end
	  %% Line 634
	  <[],_cor7> when 'true' ->
	      %% Line 635
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'specified',2}}] )
	    -| ['compiler_generated'] )
	end
'get_items'/2 =
    %% Line 637
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Dict> when 'true' ->
	      let <_cor2> =
		  %% Line 638
		  call 'lists':'keysearch'
		      (H, 1, Dict)
	      in  let <Item> =
		      %% Line 638
		      apply 'check_item'/2
			  (_cor2, H)
		  in  let <_cor4> =
			  %% Line 639
			  apply 'get_items'/2
			      (T, Dict)
		      in  %% Line 639
			  [Item|_cor4]
	  %% Line 640
	  <[],_X_Dict> when 'true' ->
	      %% Line 641
	      []
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'get_items',2}}] )
	    -| ['compiler_generated'] )
	end
'check_item'/2 =
    %% Line 643
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{_cor19,{'mod',{M,A}}},_cor20>
	      when call 'erlang':'is_atom'
		    (M) ->
	      %% Line 644
	      {M,A}
	  %% Line 645
	  <{_cor21,{'vsn',Vsn}},I> when 'true' ->
	      %% Line 646
	      case apply 'string_p'/1
		       (Vsn) of
		%% Line 647
		<'true'> when 'true' ->
		    Vsn
		%% Line 648
		<_cor22> when 'true' ->
		    call 'erlang':'throw'
			({'bad_param',I})
	      end
	  %% Line 650
	  <{_cor23,{'id',Id}},I> when 'true' ->
	      %% Line 651
	      case apply 'string_p'/1
		       (Id) of
		%% Line 652
		<'true'> when 'true' ->
		    Id
		%% Line 653
		<_cor24> when 'true' ->
		    call 'erlang':'throw'
			({'bad_param',I})
	      end
	  %% Line 655
	  <{_cor25,{'description',Desc}},I> when 'true' ->
	      %% Line 656
	      case apply 'string_p'/1
		       (Desc) of
		%% Line 657
		<'true'> when 'true' ->
		    Desc
		%% Line 658
		<_cor26> when 'true' ->
		    call 'erlang':'throw'
			({'bad_param',I})
	      end
	  %% Line 660
	  <{_cor27,{'applications',Apps}},I> when 'true' ->
	      %% Line 661
	      case apply 'a_list_p'/1
		       (Apps) of
		%% Line 662
		<'true'> when 'true' ->
		    Apps
		%% Line 663
		<_cor28> when 'true' ->
		    call 'erlang':'throw'
			({'bad_param',I})
	      end
	  %% Line 665
	  <{_cor29,{'included_applications',Apps}},I> when 'true' ->
	      %% Line 666
	      case apply 'a_list_p'/1
		       (Apps) of
		%% Line 667
		<'true'> when 'true' ->
		    Apps
		%% Line 668
		<_cor30> when 'true' ->
		    call 'erlang':'throw'
			({'bad_param',I})
	      end
	  %% Line 670
	  <{_cor31,{'registered',Regs}},I> when 'true' ->
	      %% Line 671
	      case apply 'a_list_p'/1
		       (Regs) of
		%% Line 672
		<'true'> when 'true' ->
		    Regs
		%% Line 673
		<_cor32> when 'true' ->
		    call 'erlang':'throw'
			({'bad_param',I})
	      end
	  %% Line 675
	  <{_cor33,{'modules',Mods}},I> when 'true' ->
	      %% Line 676
	      case apply 'a_list_p'/1
		       (Mods) of
		%% Line 677
		<'true'> when 'true' ->
		    Mods
		%% Line 678
		<_cor34> when 'true' ->
		    call 'erlang':'throw'
			({'bad_param',I})
	      end
	  %% Line 680
	  <{_cor35,{'start_phases',Phase}},I> when 'true' ->
	      %% Line 681
	      case apply 't_list_p'/1
		       (Phase) of
		%% Line 682
		<'true'> when 'true' ->
		    Phase
		%% Line 683
		<_cor36> when 'true' ->
		    call 'erlang':'throw'
			({'bad_param',I})
	      end
	  %% Line 685
	  <{_cor37,{'env',Env}},I> when 'true' ->
	      %% Line 686
	      case apply 't_list_p'/1
		       (Env) of
		%% Line 687
		<'true'> when 'true' ->
		    Env
		%% Line 688
		<_cor38> when 'true' ->
		    call 'erlang':'throw'
			({'bad_param',I})
	      end
	  %% Line 690
	  <{_cor39,{'maxT',MaxT}},I> when 'true' ->
	      %% Line 691
	      case MaxT of
		%% Line 692
		<_cor40>
		    when let <_cor11> =
			  call 'erlang':'is_integer'
			      (MaxT)
		      in  let <_cor12> =
			      call 'erlang':'>'
				  (MaxT, 0)
			  in  call 'erlang':'and'
				  (_cor11, _cor12) ->
		    MaxT
		%% Line 693
		<'infinity'> when 'true' ->
		    'infinity'
		%% Line 694
		<_cor43> when 'true' ->
		    call 'erlang':'throw'
			({'bad_param',I})
	      end
	  %% Line 696
	  <{_cor44,{'maxP',MaxP}},I> when 'true' ->
	      %% Line 697
	      case MaxP of
		%% Line 698
		<_cor45>
		    when let <_cor14> =
			  call 'erlang':'is_integer'
			      (MaxP)
		      in  let <_cor15> =
			      call 'erlang':'>'
				  (MaxP, 0)
			  in  call 'erlang':'and'
				  (_cor14, _cor15) ->
		    MaxP
		%% Line 699
		<'infinity'> when 'true' ->
		    'infinity'
		%% Line 700
		<_cor48> when 'true' ->
		    call 'erlang':'throw'
			({'bad_param',I})
	      end
	  %% Line 702
	  <'false','included_applications'> when 'true' ->
	      %% Line 703
	      []
	  %% Line 704
	  <'false','mod'> when 'true' ->
	      %% Line 705
	      []
	  %% Line 706
	  <'false','env'> when 'true' ->
	      %% Line 707
	      []
	  %% Line 708
	  <'false','id'> when 'true' ->
	      %% Line 709
	      []
	  %% Line 710
	  <'false','start_phases'> when 'true' ->
	      %% Line 711
	      'undefined'
	  %% Line 712
	  <'false','maxT'> when 'true' ->
	      %% Line 713
	      'infinity'
	  %% Line 714
	  <'false','maxP'> when 'true' ->
	      %% Line 715
	      'infinity'
	  %% Line 716
	  <_cor49,Item> when 'true' ->
	      %% Line 717
	      call 'erlang':'throw'
		  ({'missing_param',Item})
	end
'check_applications'/1 =
    %% Line 727
    fun (_cor0) ->
	do  %% Line 728
	    apply 'undef_appls'/1
		(_cor0)
	    do  %% Line 729
		apply 'dupl_regs'/1
		    (_cor0)
		let <_cor12> =
		    %% Line 731
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor7) ->
				  case _cor7 of
				    <[%% Line 732
				      {{App,Appv},A}|_cor2]> when 'true' ->
					( letrec
					      'lc$^1'/1 =
						  fun (_cor8) ->
						      case _cor8 of
							<[%% Line 733
							  IncApp|_cor4]> when 'true' ->
							    ( case A of
								( <( {'application',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_rec6}
								     -| ['compiler_generated'] )> when 'true' ->
								      let <_cor11> =
									  %% Line 733
									  apply 'lc$^1'/1
									      (_cor4)
								      in  ( [{IncApp,App,Appv,_rec6}|_cor11]
									    -| ['compiler_generated'] )
								  -| ['compiler_generated'] )
								( <_cor30> when 'true' ->
								      ( call ( 'erlang'
									       -| ['compiler_generated'] ):( 'error'
													     -| ['compiler_generated'] )
									    (( {'badrecord','application'}
									       -| ['compiler_generated'] ))
									-| ['compiler_generated'] )
								  -| ['compiler_generated'] )
							      end
							      -| ['compiler_generated'] )
							<[]> when 'true' ->
							    %% Line 732
							    apply 'lc$^0'/1
								(_cor2)
							( <_cor8> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_cor8})
								-| [{'function_name',{'lc$^1',1}}] )
							  -| ['compiler_generated'] )
						      end
					  in  %% Line 733
					      ( case A of
						  ( <( {'application',_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_rec5,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44}
						       -| ['compiler_generated'] )> when 'true' ->
							apply 'lc$^1'/1
							    (_rec5)
						    -| ['compiler_generated'] )
						  ( <_cor45> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','application'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					  -| ['list_comprehension'] )
				    ( <[_cor1|_cor2]> when 'true' ->
					  %% Line 732
					  apply 'lc$^0'/1
					      (_cor2)
				      -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor7> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor7})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lc$^0'/1
			      (_cor0)
		      -| ['list_comprehension'] )
		in  do  %% Line 734
			apply 'dupl_incls'/1
			    (_cor12)
			let <Res> =
			    %% Line 735
			    apply 'add_top_apps_to_uses'/3
				(_cor12, _cor0, [])
			in  %% Line 736
			    {'ok',Res}
'undef_appls'/1 =
    %% Line 740
    fun (_cor0) ->
	%% Line 741
	case apply 'undefined_applications'/1
		 (_cor0) of
	  %% Line 742
	  <[]> when 'true' ->
	      %% Line 743
	      'ok'
	  %% Line 744
	  <L> when 'true' ->
	      let <_cor1> =
		  %% Line 745
		  apply 'make_set'/1
		      (L)
	      in  %% Line 745
		  call 'erlang':'throw'
		      ({'error',{'undefined_applications',_cor1}})
	end
'dupl_regs'/1 =
    %% Line 748
    fun (_cor0) ->
	let <_cor12> =
	    %% Line 750
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor7) ->
			  case _cor7 of
			    <[%% Line 751
			      {{App,Appv},A}|_cor2]> when 'true' ->
				( letrec
				      'lc$^1'/1 =
					  fun (_cor8) ->
					      case _cor8 of
						<[%% Line 752
						  Name|_cor4]> when 'true' ->
						    ( case A of
							( <( {'application',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_rec8}
							     -| ['compiler_generated'] )> when 'true' ->
							      let <_cor11> =
								  %% Line 752
								  apply 'lc$^1'/1
								      (_cor4)
							      in  ( [{Name,App,Appv,_rec8}|_cor11]
								    -| ['compiler_generated'] )
							  -| ['compiler_generated'] )
							( <_cor30> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {'badrecord','application'}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						      -| ['compiler_generated'] )
						<[]> when 'true' ->
						    %% Line 751
						    apply 'lc$^0'/1
							(_cor2)
						( <_cor8> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor8})
							-| [{'function_name',{'lc$^1',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  %% Line 752
				      ( case A of
					  ( <( {'application',_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_rec7,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44}
					       -| ['compiler_generated'] )> when 'true' ->
						apply 'lc$^1'/1
						    (_rec7)
					    -| ['compiler_generated'] )
					  ( <_cor45> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','application'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  -| ['list_comprehension'] )
			    ( <[_cor1|_cor2]> when 'true' ->
				  %% Line 751
				  apply 'lc$^0'/1
				      (_cor2)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor7> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor7})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 753
	    case apply 'duplicates'/1
		     (_cor12) of
	      %% Line 754
	      <[]> when 'true' ->
		  %% Line 755
		  'ok'
	      %% Line 756
	      <Dups> when 'true' ->
		  %% Line 757
		  call 'erlang':'throw'
		      ({'error',{'duplicate_register',Dups}})
	    end
'dupl_incls'/1 =
    %% Line 761
    fun (_cor0) ->
	%% Line 762
	case apply 'duplicates'/1
		 (_cor0) of
	  %% Line 763
	  <[]> when 'true' ->
	      %% Line 764
	      'ok'
	  %% Line 765
	  <Dups> when 'true' ->
	      %% Line 766
	      call 'erlang':'throw'
		  ({'error',{'duplicate_include',Dups}})
	end
'add_top_apps_to_uses'/3 =
    %% Line 783
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_InclApps,[],Res> when 'true' ->
	      %% Line 785
	      Res
	  %% Line 786
	  <InclApps,[{Name,Appl}|Appls],Res> when 'true' ->
	      %% Line 787
	      ( case Appl of
		  ( <( {'application',_rec9,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41}
		       -| ['compiler_generated'] )> when 'true' ->
			let <MyTop> =
			    apply 'find_top_app'/2
				(_rec9, InclApps)
			in  let <F> =
				%% Line 788
				( fun (_cor12,_cor11) ->
				      case <_cor12,_cor11> of
					<UsedApp,AccIn>
					    when call 'erlang':'=='
						  (UsedApp,
						   MyTop) ->
					    %% Line 792
					    call 'erlang':'--'
						(AccIn, [MyTop|[]])
					%% Line 793
					<UsedApp,AccIn> when 'true' ->
					    %% Line 794
					    case call 'lists':'keysearch'
						     (UsedApp, 1, InclApps) of
					      %% Line 795
					      <'false'> when 'true' ->
						  %% Line 796
						  AccIn
					      %% Line 797
					      <{'value',{_cor43,DependApp,_cor44,_cor45}}> when 'true' ->
						  let <UsedAppTop> =
						      %% Line 798
						      apply 'find_top_app'/2
							  (DependApp, InclApps)
						  in  let <_cor7> =
							  %% Line 799
							  call 'lists':'member'
							      (UsedAppTop, AccIn)
						      in  %% Line 799
							  case <_cor7,MyTop> of
							    %% Line 800
							    <'true',_cor46> when 'true' ->
								%% Line 803
								call 'erlang':'--'
								    (AccIn, [UsedApp|[]])
							    %% Line 804
							    <_cor47,_cor48>
								when call 'erlang':'=:='
								      (_cor48,
								       UsedAppTop) ->
								%% Line 806
								AccIn
							    %% Line 807
							    <_fol160,_fol161> when 'true' ->
								let <AccIn1> =
								    %% Line 810
								    call 'erlang':'--'
									(AccIn, [UsedApp|[]])
								in  %% Line 811
								    call 'erlang':'++'
									(AccIn1, [UsedAppTop|[]])
							  end
					      ( <_cor10> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor10})
						-| ['compiler_generated'] )
					    end
				      end
				  -| [{'id',{0,0,'-add_top_apps_to_uses/3-fun-0-'}}] )
			    in  let <NewUses> =
				    %% Line 816
				    call 'lists':'foldl'
					(F, _cor33, _cor33)
				in  let <_cor23> =
					%% Line 818
					call 'erlang':'setelement'
					    (8, Appl, NewUses)
				    in  let <_cor24> =
					    %% Line 818
					    call 'erlang':'++'
						(Res, [{Name,_cor23}|[]])
					in  %% Line 817
					    apply 'add_top_apps_to_uses'/3
						(InclApps, Appls, _cor24)
		    -| ['compiler_generated'] )
		  ( <_cor42> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','application'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25})
		  -| [{'function_name',{'add_top_apps_to_uses',3}}] )
	    -| ['compiler_generated'] )
	end
'find_top_app'/2 =
    %% Line 822
    fun (_cor1,_cor0) ->
	%% Line 823
	case call 'lists':'keysearch'
		 (_cor1, 1, _cor0) of
	  %% Line 824
	  <'false'> when 'true' ->
	      _cor1
	  %% Line 826
	  <{'value',{_cor5,TopApp,_cor6,_cor7}}> when 'true' ->
	      %% Line 827
	      apply 'find_top_app'/2
		  (TopApp, _cor0)
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'undefined_applications'/1 =
    %% Line 837
    fun (_cor0) ->
	let <_cor7> =
	    %% Line 838
	    ( fun (_cor5) ->
		  case _cor5 of
		    <{_cor19,A}> when 'true' ->
			%% Line 839
			( case A of
			    ( <( {'application',_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_rec13,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33}
				 -| ['compiler_generated'] )> when 'true' ->
				  call 'erlang':'++'
				      (_rec13, _cor26)
			      -| ['compiler_generated'] )
			    ( <_cor34> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','application'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor6> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor6})
			    -| [{'function_name',{'-undefined_applications/1-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-undefined_applications/1-fun-0-'}}] )
	in  let <_cor8> =
		%% Line 838
		call 'lists':'map'
		    (_cor7, _cor0)
	    in  let <Uses> =
		    %% Line 838
		    call 'lists':'append'
			(_cor8)
		in  let <_cor12> =
			%% Line 841
			( fun (_cor10) ->
			      case _cor10 of
				<{{X,_cor50},_cor51}> when 'true' ->
				    X
				( <_cor11> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor11})
					-| [{'function_name',{'-undefined_applications/1-fun-1-',1}}] )
				  -| ['compiler_generated'] )
			      end
			  -| [{'id',{0,0,'-undefined_applications/1-fun-1-'}}] )
		    in  let <Defined> =
			    %% Line 841
			    call 'lists':'map'
				(_cor12, _cor0)
			in  let <_cor17> =
				%% Line 842
				( fun (_cor15) ->
				      let <_cor14> =
					  call 'lists':'member'
					      (_cor15, Defined)
				      in  call 'erlang':'not'
					      (_cor14)
				  -| [{'id',{0,0,'-undefined_applications/1-fun-2-'}}] )
			    in  %% Line 842
				call 'lists':'filter'
				    (_cor17, Uses)
'sort_used_and_incl_appls'/2 =
    %% Line 855
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Applications,Release>
	      when call 'erlang':'is_tuple'
		    (Release) ->
	      %% Line 857
	      ( case Release of
		  ( <( {'release',_cor25,_cor26,_cor27,_rec15,_cor28}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor4> =
			    apply 'sort_used_and_incl_appls'/2
				(Applications, _rec15)
			in  {'ok',_cor4}
		    -| ['compiler_generated'] )
		  ( <_cor29> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','release'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 859
	  <[{Tuple,Appl}|Appls],OrderedAppls> when 'true' ->
	      %% Line 861
	      ( case Appl of
		  ( <( {'application',_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_rec16,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor9> =
			    case _rec16 of
			      %% Line 862
			      <Incls>
				  when try
					let <_cor7> =
					    call 'erlang':'length'
						(_rec16)
					in  call 'erlang':'>'
						(_cor7, 1)
				    of <Try> ->
					Try
				    catch <T,R> ->
					'false' ->
				  %% Line 863
				  apply 'sort_appl_list'/2
				      (Incls, OrderedAppls)
			      %% Line 864
			      <Incls> when 'true' ->
				  %% Line 865
				  Incls
			    end
			in  let <_cor15> =
				%% Line 868
				case _cor36 of
				  %% Line 869
				  <Uses>
				      when try
					    let <_cor13> =
						call 'erlang':'length'
						    (_cor36)
					    in  call 'erlang':'>'
						    (_cor13, 1)
					of <Try> ->
					    Try
					catch <T,R> ->
					    'false' ->
				      %% Line 870
				      apply 'sort_appl_list'/2
					  (Uses, OrderedAppls)
				  %% Line 871
				  <Uses> when 'true' ->
				      %% Line 872
				      Uses
				end
			    in  let <_cor18> =
				    %% Line 874
				    call 'erlang':'setelement'
					(9, Appl, _cor9)
				in  let <_cor20> =
					%% Line 874
					call 'erlang':'setelement'
					    (8, _cor18, _cor15)
				    in  let <_cor22> =
					    %% Line 875
					    apply 'sort_used_and_incl_appls'/2
						(Appls, OrderedAppls)
					in  %% Line 875
					    [{Tuple,_cor20}|_cor22]
		    -| ['compiler_generated'] )
		  ( <_cor44> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','application'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 876
	  <[],_X_OrderedAppls> when 'true' ->
	      %% Line 877
	      []
	  ( <_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23})
		  -| [{'function_name',{'sort_used_and_incl_appls',2}}] )
	    -| ['compiler_generated'] )
	end
'sort_appl_list'/2 =
    %% Line 879
    fun (_cor1,_cor0) ->
	let <IndexedList> =
	    %% Line 880
	    apply 'find_pos'/2
		(_cor1, _cor0)
	in  let <SortedIndexedList> =
		%% Line 881
		call 'lists':'keysort'
		    (1, IndexedList)
	    in  let <_cor6> =
		    %% Line 882
		    ( fun (_cor4) ->
			  case _cor4 of
			    <{_X_Index,Name}> when 'true' ->
				Name
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'-sort_appl_list/2-fun-0-',1}}] )
			      -| ['compiler_generated'] )
			  end
		      -| [{'id',{0,0,'-sort_appl_list/2-fun-0-'}}] )
		in  %% Line 882
		    call 'lists':'map'
			(_cor6, SortedIndexedList)
'find_pos'/2 =
    %% Line 884
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Name|Incs],OrderedAppls> when 'true' ->
	      let <_cor2> =
		  %% Line 885
		  apply 'find_pos'/3
		      (1, Name, OrderedAppls)
	      in  let <_cor3> =
		      %% Line 885
		      apply 'find_pos'/2
			  (Incs, OrderedAppls)
		  in  %% Line 885
		      [_cor2|_cor3]
	  %% Line 886
	  <[],_X_OrderedAppls> when 'true' ->
	      %% Line 887
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'find_pos',2}}] )
	    -| ['compiler_generated'] )
	end
'find_pos'/3 =
    %% Line 889
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <N,Name,[{_cor7,_X_Vsn,_X_Type}|_X_OrderedAppls]>
	      when call 'erlang':'=:='
		    (_cor7,
		     Name) ->
	      %% Line 890
	      {N,Name}
	  %% Line 891
	  <N,Name,[_X_OtherAppl|OrderedAppls]> when 'true' ->
	      let <_cor3> =
		  %% Line 892
		  call 'erlang':'+'
		      (N, 1)
	      in  %% Line 892
		  apply 'find_pos'/3
		      (_cor3, Name, OrderedAppls)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'find_pos',3}}] )
	    -| ['compiler_generated'] )
	end
'check_modules'/4 =
    %% Line 901
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor15> =
	    %% Line 904
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor10) ->
			  case _cor10 of
			    <[%% Line 905
			      {{App,_X_Appv},A}|_cor5]> when 'true' ->
				( letrec
				      'lc$^1'/1 =
					  fun (_cor11) ->
					      case _cor11 of
						<[%% Line 906
						  Mod|_cor7]> when 'true' ->
						    ( case A of
							( <( {'application',_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_rec20}
							     -| ['compiler_generated'] )> when 'true' ->
							      let <_cor14> =
								  %% Line 906
								  apply 'lc$^1'/1
								      (_cor7)
							      in  ( [{Mod,App,_rec20}|_cor14]
								    -| ['compiler_generated'] )
							  -| ['compiler_generated'] )
							( <_cor37> when 'true' ->
							      ( call ( 'erlang'
								       -| ['compiler_generated'] ):( 'error'
												     -| ['compiler_generated'] )
								    (( {'badrecord','application'}
								       -| ['compiler_generated'] ))
								-| ['compiler_generated'] )
							  -| ['compiler_generated'] )
						      end
						      -| ['compiler_generated'] )
						<[]> when 'true' ->
						    %% Line 905
						    apply 'lc$^0'/1
							(_cor5)
						( <_cor11> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor11})
							-| [{'function_name',{'lc$^1',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  %% Line 906
				      ( case A of
					  ( <( {'application',_cor38,_cor39,_cor40,_cor41,_cor42,_rec19,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51}
					       -| ['compiler_generated'] )> when 'true' ->
						apply 'lc$^1'/1
						    (_rec19)
					    -| ['compiler_generated'] )
					  ( <_cor52> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','application'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  -| ['list_comprehension'] )
			    ( <[_cor4|_cor5]> when 'true' ->
				  %% Line 905
				  apply 'lc$^0'/1
				      (_cor5)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor10> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor10})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor3)
	      -| ['list_comprehension'] )
	in  %% Line 907
	    case apply 'duplicates'/1
		     (_cor15) of
	      %% Line 908
	      <[]> when 'true' ->
		  %% Line 909
		  case apply 'check_mods'/5
			   (_cor15, _cor3, _cor2, _cor1, _cor0) of
		    %% Line 910
		    <{'error',Errors}> when 'true' ->
			%% Line 911
			call 'erlang':'throw'
			    ({'error',{'modules',Errors}})
		    %% Line 912
		    <Return> when 'true' ->
			%% Line 913
			Return
		  end
	      %% Line 915
	      <Dups> when 'true' ->
		  %% Line 917
		  call 'erlang':'throw'
		      ({'error',{'duplicate_modules',Dups}})
	    end
'check_mods'/5 =
    %% Line 925
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Modules,Appls,Path,{SrcTestP,XrefP},Machine> when 'true' ->
	      let <SrcTestRes> =
		  %% Line 926
		  apply 'check_src'/5
		      (Modules, Appls, Path, SrcTestP, Machine)
	      in  let <XrefRes> =
		      %% Line 927
		      apply 'check_xref'/3
			  (Appls, Path, XrefP)
		  in  let <Res> =
			  %% Line 928
			  call 'erlang':'++'
			      (SrcTestRes, XrefRes)
		      in  let <_cor10> =
			      %% Line 929
			      ( fun (_cor8) ->
				    case _cor8 of
				      <{'error',_cor21}> when 'true' ->
					  'true'
				      %% Line 930
				      <_cor22> when 'true' ->
					  'false'
				    end
				-| [{'id',{0,0,'-check_mods/5-fun-0-'}}] )
			  in  %% Line 929
			      case call 'lists':'filter'
				       (_cor10, %% Line 932
						Res) of
				%% Line 933
				<[]> when 'true' ->
				    let <_cor13> =
					%% Line 934
					( fun (_cor11) ->
					      case _cor11 of
						<{'warning',_cor23}> when 'true' ->
						    'true'
						%% Line 935
						<_cor24> when 'true' ->
						    'false'
					      end
					  -| [{'id',{0,0,'-check_mods/5-fun-1-'}}] )
				    in  let <_cor14> =
					    %% Line 934
					    call 'lists':'filter'
						(_cor13, %% Line 937
							 Res)
					in  %% Line 934
					    {'ok',_cor14}
				%% Line 938
				<Errors> when 'true' ->
				    %% Line 939
				    {'error',Errors}
			      end
	  ( <_cor20,_cor19,_cor18,_cor17,_cor16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17,_cor16})
		  -| [{'function_name',{'check_mods',5}}] )
	    -| ['compiler_generated'] )
	end
'check_src'/5 =
    %% Line 942
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Modules,Appls,Path,'true',Machine> when 'true' ->
	      let <Ext> =
		  %% Line 943
		  apply 'objfile_extension'/1
		      (Machine)
	      in  let <IncPath> =
		      %% Line 944
		      apply 'create_include_path'/2
			  (Appls, Path)
		  in  let <_cor11> =
			  %% Line 945
			  ( fun (_cor9) ->
				%% Line 946
				case _cor9 of
				  <{Mod,App,Dir}> when 'true' ->
				      %% Line 947
				      case apply 'check_mod'/5
					       (Mod, App, Dir, Ext, IncPath) of
					%% Line 948
					<'ok'> when 'true' ->
					    %% Line 949
					    []
					%% Line 950
					<{'error',Error}> when 'true' ->
					    %% Line 951
					    [{'error',{Error,_cor9}}|[]]
					%% Line 952
					<{'warning',Warn}> when 'true' ->
					    %% Line 953
					    [{'warning',{Warn,_cor9}}|[]]
					( <_cor8> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor8})
					  -| ['compiler_generated'] )
				      end
				  ( <_cor7> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor7})
				    -| ['compiler_generated'] )
				end
			    -| [{'id',{0,0,'-check_src/5-fun-0-'}}] )
		      in  let <_cor12> =
			      %% Line 945
			      call 'lists':'map'
				  (_cor11, %% Line 956
					   Modules)
			  in  %% Line 945
			      call 'lists':'append'
				  (_cor12)
	  %% Line 957
	  <_cor18,_cor19,_cor20,_cor21,_cor22> when 'true' ->
	      %% Line 958
	      []
	end
'check_xref'/3 =
    %% Line 960
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_X_Appls,_X_Path,'false'> when 'true' ->
	      %% Line 961
	      []
	  %% Line 962
	  <Appls,Path,XrefP> when 'true' ->
	      let <_cor9> =
		  %% Line 963
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor5) ->
				case _cor5 of
				  <[{{App,_X_Appv},A}|_cor4]> when 'true' ->
				      ( case A of
					  ( <( {'application',_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_rec21}
					       -| ['compiler_generated'] )> when 'true' ->
						let <_cor8> =
						    apply 'lc$^0'/1
							(_cor4)
						in  ( [{App,_rec21}|_cor8]
						      -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					  ( <_cor44> when 'true' ->
						( call ( 'erlang'
							 -| ['compiler_generated'] ):( 'error'
										       -| ['compiler_generated'] )
						      (( {'badrecord','application'}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
					-| ['compiler_generated'] )
				  ( <[_cor3|_cor4]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor4)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor5> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor5})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (Appls)
		    -| ['list_comprehension'] )
	      in  let <AppDirs0> =
		      %% Line 964
		      call 'sofs':'relation'
			  (_cor9)
		  in  let <_cor14> =
			  %% Line 965
			  case XrefP of
			    %% Line 966
			    <'true'> when 'true' ->
				%% Line 967
				AppDirs0
			    %% Line 968
			    <{'true',Apps}> when 'true' ->
				let <_cor12> =
				    %% Line 969
				    call 'sofs':'set'
					(Apps)
				in  %% Line 969
				    call 'sofs':'restriction'
					(AppDirs0, _cor12)
			    ( <_cor13> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor13})
			      -| ['compiler_generated'] )
			  end
		      in  let <_cor17> =
			      catch
				  %% Line 972
				  call 'xref':'start'
				      ('systools_make', [{'xref_mode','modules'}])
			  in  do  %% Line 972
				  case _cor17 of
				    %% Line 973
				    <{'ok',_X_Pid}> when 'true' ->
					'ok'
				    %% Line 975
				    <{'error',{'already_started',_X_Pid}}> when 'true' ->
					do  %% Line 976
					    call 'xref':'stop'
						('systools_make')
					    %% Line 977
					    case call 'xref':'start'
						     ('systools_make', [{'xref_mode','modules'}]) of
					      <{'ok',_cor45}> when 'true' ->
						  'ok'
					      ( <_cor18> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor18})
						-| ['compiler_generated'] )
					    end
				    ( <_cor19> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor19})
				      -| ['compiler_generated'] )
				  end
				  %% Line 980
				  case call 'xref':'set_default'
					   ('systools_make', 'verbose', 'false') of
				    <{'ok',_cor46}> when 'true' ->
					let <_cor21> =
					    %% Line 981
					    call 'code':'get_path'
						()
					in  let <_cor23> =
						%% Line 981
						case <> of
						  %% Line 982
						  <>
						      when call 'erlang':'=='
							    (Path,
							     _cor21) ->
						      'code_path'
						  %% Line 983
						  <> when 'true' ->
						      Path
						end
					    in  %% Line 985
						case call 'xref':'set_library_path'
							 ('systools_make', _cor23) of
						  <'ok'> when 'true' ->
						      let <_cor26> =
							  %% Line 986
							  call 'sofs':'to_external'
							      (_cor14)
						      in  %% Line 986
							  apply 'check_xref'/1
							      (_cor26)
						  ( <_cor25> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor25})
						    -| ['compiler_generated'] )
						end
				    ( <_cor20> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor20})
				      -| ['compiler_generated'] )
				  end
	end
'check_xref'/1 =
    %% Line 988
    fun (_cor0) ->
	case _cor0 of
	  <[{App,AppDir}|Appls]> when 'true' ->
	      %% Line 989
	      case call 'xref':'add_application'
		       ('systools_make', AppDir, {'name',App}) of
		%% Line 990
		<{'ok',_X_App}> when 'true' ->
		    %% Line 991
		    apply 'check_xref'/1
			(Appls)
		%% Line 992
		<Error> when 'true' ->
		    do  %% Line 993
			call 'xref':'stop'
			    ('systools_make')
			%% Line 994
			[{'error',Error}|[]]
	      end
	  %% Line 996
	  <[]> when 'true' ->
	      let <_cor3> =
		  %% Line 997
		  case call 'xref':'analyze'
			   ('systools_make', 'undefined_functions') of
		    %% Line 998
		    <{'ok',[]}> when 'true' ->
			%% Line 999
			[]
		    %% Line 1000
		    <{'ok',Undefined}> when 'true' ->
			%% Line 1002
			apply 'adjust_for_hipe'/1
			    (Undefined)
		    %% Line 1003
		    <Error> when 'true' ->
			%% Line 1004
			[{'error',Error}|[]]
		  end
	      in  do  %% Line 1006
		      call 'xref':'stop'
			  ('systools_make')
		      _cor3
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'check_xref',1}}] )
	    -| ['compiler_generated'] )
	end
'adjust_for_hipe'/1 =
    %% Line 1009
    fun (_cor0) ->
	%% Line 1010
	case call 'erlang':'system_info'
		 ('hipe_architecture') of
	  %% Line 1011
	  <'undefined'> when 'true' ->
	      let <_cor3> =
		  %% Line 1012
		  ( fun (_cor1) ->
			case _cor1 of
			  <{'hipe_bifs',_cor11,_cor12}> when 'true' ->
			      'false'
			  %% Line 1013
			  <{'hipe',_cor13,_cor14}> when 'true' ->
			      'false'
			  %% Line 1014
			  <_cor15> when 'true' ->
			      'true'
			end
		    -| [{'id',{0,0,'-adjust_for_hipe/1-fun-0-'}}] )
	      in  let <U> =
		      %% Line 1012
		      call 'lists':'filter'
			  (_cor3, _cor0)
		  in  %% Line 1016
		      case <> of
			%% Line 1017
			<>
			    when call 'erlang':'=:='
				  ([],
				   U) ->
			    %% Line 1018
			    []
			%% Line 1019
			<> when 'true' ->
			    %% Line 1020
			    [{'warning',{'exref_undef',U}}|[]]
		      end
	  %% Line 1022
	  <_X_Arch> when 'true' ->
	      let <_cor7> =
		  %% Line 1024
		  ( fun (_cor5) ->
			case _cor5 of
			  <{'hipe_bifs','write_u64',2}> when 'true' ->
			      'false'
			  %% Line 1025
			  <_cor16> when 'true' ->
			      'true'
			end
		    -| [{'id',{0,0,'-adjust_for_hipe/1-fun-1-'}}] )
	      in  let <U> =
		      %% Line 1024
		      call 'lists':'filter'
			  (_cor7, _cor0)
		  in  %% Line 1027
		      [{'warning',{'exref_undef',U}}|[]]
	end
'xref_p'/1 =
    %% Line 1033
    fun (_cor0) ->
	%% Line 1034
	case call 'lists':'member'
		 ('exref', _cor0) of
	  %% Line 1035
	  <'true'> when 'true' ->
	      %% Line 1036
	      apply 'exists_xref'/1
		  ('true')
	  %% Line 1037
	  <_cor5> when 'true' ->
	      %% Line 1038
	      case apply 'get_flag'/2
		       ('exref', _cor0) of
		%% Line 1039
		<{'exref',Appls}>
		    when call 'erlang':'is_list'
			  (Appls) ->
		    %% Line 1040
		    case apply 'a_list_p'/1
			     (Appls) of
		      %% Line 1041
		      <'true'> when 'true' ->
			  apply 'exists_xref'/1
			      ({'true',Appls})
		      %% Line 1042
		      <_cor6> when 'true' ->
			  'false'
		    end
		%% Line 1044
		<_cor7> when 'true' ->
		    %% Line 1045
		    'false'
	      end
	end
'exists_xref'/1 =
    %% Line 1049
    fun (_cor0) ->
	%% Line 1050
	case call 'code':'ensure_loaded'
		 ('xref') of
	  %% Line 1051
	  <{'error',_cor3}> when 'true' ->
	      'false'
	  %% Line 1052
	  <_cor4> when 'true' ->
	      _cor0
	end
'objfile_extension'/1 =
    %% Line 1055
    fun (_cor0) ->
	case _cor0 of
	  <'false'> when 'true' ->
	      %% Line 1056
	      call 'code':'objfile_extension'
		  ()
	  %% Line 1057
	  <Machine> when 'true' ->
	      let <_cor1> =
		  %% Line 1058
		  call 'erlang':'atom_to_list'
		      (Machine)
	      in  %% Line 1058
		  [46|_cor1]
	end
'check_mod'/5 =
    %% Line 1060
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <ObjFile> =
	    %% Line 1061
	    apply 'mod_to_filename'/3
		(_cor2, _cor4, _cor1)
	in  %% Line 1062
	    case call 'file':'read_file_info'
		     (ObjFile) of
	      %% Line 1063
	      <{'ok',FileInfo}> when 'true' ->
		  %% Line 1064
		  ( case FileInfo of
		      ( <( {'file_info',_cor15,_cor16,_cor17,_cor18,_rec22,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26}
			   -| ['compiler_generated'] )> when 'true' ->
			    %% Line 1065
			    apply 'check_module'/4
				(_cor4, _cor2, _rec22, _cor0)
			-| ['compiler_generated'] )
		      ( <_cor27> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','file_info'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      %% Line 1066
	      <_cor28> when 'true' ->
		  %% Line 1067
		  {'error',{'module_not_found',_cor3,_cor4}}
	    end
'mod_to_filename'/3 =
    %% Line 1070
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1071
	    call 'erlang':'atom_to_list'
		(_cor1)
	in  let <_cor4> =
		%% Line 1071
		call 'erlang':'++'
		    (_cor3, _cor0)
	    in  %% Line 1071
		call 'filename':'join'
		    (_cor2, _cor4)
'check_module'/4 =
    %% Line 1073
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1074
	case apply 'smart_guess'/2
		 (_cor2, _cor0) of
	  <{SrcDirs,_X_IncDirs}> when 'true' ->
	      %% Line 1075
	      case apply 'locate_src'/2
		       (_cor3, SrcDirs) of
		%% Line 1076
		<{'ok',_X_FDir,_X_File,LastModTime}> when 'true' ->
		    %% Line 1077
		    case <> of
		      %% Line 1078
		      <>
			  when call 'erlang':'>'
				(LastModTime,
				 _cor1) ->
			  %% Line 1079
			  {'warning','obj_out_of_date'}
		      %% Line 1080
		      <> when 'true' ->
			  %% Line 1081
			  'ok'
		    end
		%% Line 1083
		<_cor10> when 'true' ->
		    %% Line 1084
		    {'warning','source_not_found'}
	      end
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'locate_src'/2 =
    %% Line 1087
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Mod,[Dir|Dirs]> when 'true' ->
	      let <File> =
		  %% Line 1088
		  apply 'mod_to_filename'/3
		      (Dir, Mod, [46|[101|[114|[108]]]])
	      in  %% Line 1089
		  case call 'file':'read_file_info'
			   (File) of
		    %% Line 1090
		    <{'ok',FileInfo}> when 'true' ->
			%% Line 1091
			( case FileInfo of
			    ( <( {'file_info',_cor9,_cor10,_cor11,_cor12,_rec23,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20}
				 -| ['compiler_generated'] )> when 'true' ->
				  %% Line 1092
				  {'ok',Dir,File,_rec23}
			      -| ['compiler_generated'] )
			    ( <_cor21> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','file_info'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 1093
		    <_cor22> when 'true' ->
			%% Line 1094
			apply 'locate_src'/2
			    (Mod, Dirs)
		  end
	  %% Line 1096
	  <_cor23,[]> when 'true' ->
	      %% Line 1097
	      'false'
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'locate_src',2}}] )
	    -| ['compiler_generated'] )
	end
'smart_guess'/2 =
    %% Line 1106
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1107
	    call 'filename':'split'
		(_cor1)
	in  %% Line 1107
	    case call 'lists':'reverse'
		     (_cor2) of
	      %% Line 1108
	      <[[101|[98|[105|[110]]]]|D]> when 'true' ->
		  let <D1> =
		      %% Line 1109
		      call 'lists':'reverse'
			  (D)
		  in  let <_cor4> =
			  %% Line 1110
			  call 'erlang':'++'
			      (D1, [[115|[114|[99]]]])
		      in  let <_cor5> =
			      %% Line 1110
			      call 'filename':'join'
				  (_cor4)
			  in  let <_cor6> =
				  %% Line 1111
				  call 'erlang':'++'
				      (D1, [[115|[114|[99]]]|[[101|[95|[115|[114|[99]]]]]]])
			      in  let <_cor7> =
				      %% Line 1111
				      call 'filename':'join'
					  (_cor6)
				  in  let <Dirs> =
					  %% Line 1110
					  [_cor5|%% Line 1111
						 [_cor7|[]]]
				      in  let <_cor9> =
					      %% Line 1112
					      call 'erlang':'++'
						  (Dirs, _cor0)
					  in  %% Line 1112
					      {Dirs,_cor9}
	      %% Line 1113
	      <_cor14> when 'true' ->
		  let <_cor10> =
		      %% Line 1114
		      [_cor1|_cor0]
		  in  %% Line 1114
		      {[_cor1|[]],_cor10}
	    end
'generate_script'/4 =
    %% Line 1124
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <PathFlag> =
	    %% Line 1125
	    apply 'path_flag'/1
		(_cor0)
	in  let <Variables> =
		%% Line 1126
		apply 'get_variables'/1
		    (_cor0)
	    in  let <Preloaded> =
		    %% Line 1127
		    apply 'preloaded'/0
			()
		in  let <Mandatory> =
			%% Line 1128
			apply 'mandatory_modules'/0
			    ()
		    in  %% Line 1129
			( case _cor2 of
			    ( <( {'release',_rec24,_cor40,_cor41,_cor42,_cor43}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_cor21> =
				      %% Line 1132
				      apply 'create_mandatory_path'/3
					  (_cor1, PathFlag, Variables)
				  in  let <_cor18> =
					  %% Line 1136
					  call 'erlang':'++'
					      (Mandatory, Preloaded)
				      in  let <_cor19> =
					      %% Line 1136
					      apply 'load_appl_mods'/4
						  (_cor1, _cor18, %% Line 1137
								  PathFlag, %% Line 1137
									    Variables)
					  in  let <_cor16> =
						  %% Line 1138
						  apply 'create_path'/3
						      (_cor1, PathFlag, Variables)
					      in  let <_cor14> =
						      %% Line 1139
						      apply 'create_kernel_procs'/1
							  (_cor1)
						  in  let <_cor12> =
							  %% Line 1140
							  apply 'create_load_appls'/1
							      (_cor1)
						      in  let <_cor10> =
							      %% Line 1141
							      apply 'create_start_appls'/1
								  (_cor1)
							  in  let <_cor8> =
								  %% Line 1142
								  call 'lists':'member'
								      ('no_dot_erlang', _cor0)
							      in  let <_cor9> =
								      %% Line 1142
								      apply 'script_end'/1
									  (_cor8)
								  in  let <_cor11> =
									  %% Line 1141
									  call 'erlang':'++'
									      (_cor10, _cor9)
								      in  let <_cor13> =
									      %% Line 1140
									      call 'erlang':'++'
										  (_cor12, _cor11)
									  in  let <_cor15> =
										  %% Line 1139
										  call 'erlang':'++'
										      (_cor14, _cor13)
									      in  let <_cor17> =
										      %% Line 1138
										      [{'path',_cor16}|_cor15]
										  in  let <_cor20> =
											  %% Line 1137
											  call 'erlang':'++'
											      (_cor19, _cor17)
										      in  let <_cor22> =
											      %% Line 1130
											      [{'preLoaded',Preloaded}|%% Line 1131
														       [{'progress','preloaded'}|%% Line 1132
																		 [{'path',_cor21}|%% Line 1133
																				  [{'primLoad',Mandatory}|%% Line 1135
																							  [{'kernel_load_completed'}|[{'progress','kernel_load_completed'}|_cor20]]]]]]
											  in  let <Script> = {'script',{_rec24,_cor40},_cor22}
											      in  let <ScriptFile> =
												      %% Line 1145
												      call 'erlang':'++'
													  (_cor3, [46|[115|[99|[114|[105|[112|[116]]]]]]])
												  in  %% Line 1146
												      case call 'file':'open'
													       (ScriptFile, ['write']) of
													%% Line 1147
													<{'ok',Fd}> when 'true' ->
													    let <_cor29> =
														%% Line 1149
														call 'erlang':'date'
														    ()
													    in  let <_cor30> =
														    %% Line 1149
														    call 'erlang':'time'
															()
														in  do  %% Line 1148
															call 'io':'format'
															    (Fd, [37|[37|[32|[115|[99|[114|[105|[112|[116|[32|[103|[101|[110|[101|[114|[97|[116|[101|[100|[32|[97|[116|[32|[126|[119|[32|[126|[119|[10|[126|[112|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1149
																																							   [_cor29|[_cor30|[Script|[]]]])
															%% Line 1150
															case call 'file':'close'
																 (Fd) of
															  %% Line 1151
															  <'ok'> when 'true' ->
															      let <BootFile> =
																  %% Line 1152
																  call 'erlang':'++'
																      (_cor3, [46|[98|[111|[111|[116]]]]])
															      in  let <_cor32> =
																      %% Line 1153
																      call 'erlang':'term_to_binary'
																	  (Script)
																  in  %% Line 1153
																      case call 'file':'write_file'
																	       (BootFile, _cor32) of
																	%% Line 1154
																	<'ok'> when 'true' ->
																	    %% Line 1155
																	    'ok'
																	%% Line 1156
																	<{'error',Reason}> when 'true' ->
																	    %% Line 1157
																	    {'error','systools_make',{'open',BootFile,Reason}}
																	( <_cor33> when 'true' ->
																	      primop 'match_fail'
																		  ({'case_clause',_cor33})
																	  -| ['compiler_generated'] )
																      end
															  %% Line 1159
															  <{'error',Reason}> when 'true' ->
															      %% Line 1160
															      {'error','systools_make',{'close',ScriptFile,Reason}}
															  ( <_cor34> when 'true' ->
																primop 'match_fail'
																    ({'case_clause',_cor34})
															    -| ['compiler_generated'] )
															end
													%% Line 1162
													<{'error',Reason}> when 'true' ->
													    %% Line 1163
													    {'error','systools_make',{'open',ScriptFile,Reason}}
													( <_cor35> when 'true' ->
													      primop 'match_fail'
														  ({'case_clause',_cor35})
													  -| ['compiler_generated'] )
												      end
			      -| ['compiler_generated'] )
			    ( <_cor44> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','release'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
'path_flag'/1 =
    %% Line 1166
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 1167
	    call 'lists':'member'
		('local', _cor0)
	in  let <_cor1> =
		%% Line 1167
		call 'lists':'member'
		    ('otp_build', _cor0)
	    in  %% Line 1167
		case <_cor2,_cor1> of
		  %% Line 1168
		  <'true',_cor5> when 'true' ->
		      'local'
		  %% Line 1169
		  <_cor6,'true'> when 'true' ->
		      'otp_build'
		  %% Line 1170
		  <_cor7,_cor8> when 'true' ->
		      'true'
		end
'get_variables'/1 =
    %% Line 1173
    fun (_cor0) ->
	%% Line 1174
	case apply 'get_flag'/2
		 ('variables', _cor0) of
	  %% Line 1175
	  <{'variables',Variables}>
	      when call 'erlang':'is_list'
		    (Variables) ->
	      %% Line 1176
	      apply 'valid_variables'/1
		  (Variables)
	  %% Line 1177
	  <_cor3> when 'true' ->
	      %% Line 1178
	      []
	end
'valid_variables'/1 =
    %% Line 1181
    fun (_cor0) ->
	case _cor0 of
	  <[{Var,Path}|Variables]>
	      when let <_cor1> =
		    call 'erlang':'is_list'
			(Var)
		in  let <_cor2> =
			call 'erlang':'is_list'
			    (Path)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      let <_cor3> =
		  %% Line 1182
		  apply 'rm_tlsl'/1
		      (Path)
	      in  let <_cor4> =
		      %% Line 1182
		      apply 'valid_variables'/1
			  (Variables)
		  in  %% Line 1182
		      [{Var,_cor3}|_cor4]
	  %% Line 1183
	  <[{Var,Path}|Variables]>
	      when let <_cor5> =
		    call 'erlang':'is_atom'
			(Var)
		in  let <_cor6> =
			call 'erlang':'is_list'
			    (Path)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      let <_cor8> =
		  %% Line 1184
		  apply 'to_list'/1
		      (Var)
	      in  let <_cor7> =
		      %% Line 1184
		      apply 'rm_tlsl'/1
			  (Path)
		  in  let <_cor9> =
			  %% Line 1184
			  apply 'valid_variables'/1
			      (Variables)
		      in  %% Line 1184
			  [{_cor8,_cor7}|_cor9]
	  %% Line 1185
	  <[_cor11|Variables]> when 'true' ->
	      %% Line 1186
	      apply 'valid_variables'/1
		  (Variables)
	  %% Line 1187
	  <_cor12> when 'true' ->
	      %% Line 1188
	      []
	end
'rm_tlsl'/1 =
    %% Line 1190
    fun (_cor0) ->
	let <_cor1> =
	    call 'lists':'reverse'
		(_cor0)
	in  apply 'rm_tlsl1'/1
		(_cor1)
'rm_tlsl1'/1 =
    %% Line 1191
    fun (_cor0) ->
	case _cor0 of
	  <[47|P]> when 'true' ->
	      apply 'rm_tlsl1'/1
		  (P)
	  %% Line 1192
	  <P> when 'true' ->
	      call 'lists':'reverse'
		  (P)
	end
'create_start_appls'/1 =
    %% Line 1198
    fun (_cor0) ->
	let <_cor4> =
	    %% Line 1199
	    ( fun (_cor2) ->
		  case _cor2 of
		    <{_cor8,A}> when 'true' ->
			%% Line 1200
			( case A of
			    ( <( {'application',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_rec26,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22}
				 -| ['compiler_generated'] )> when 'true' ->
				  _rec26
			      -| ['compiler_generated'] )
			    ( <_cor23> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','application'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor3> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor3})
			    -| [{'function_name',{'-create_start_appls/1-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-create_start_appls/1-fun-0-'}}] )
	in  let <_cor5> =
		%% Line 1199
		call 'lists':'map'
		    (_cor4, _cor0)
	    in  let <Included> =
		    %% Line 1199
		    call 'lists':'append'
			(_cor5)
		in  %% Line 1202
		    apply 'create_start_appls'/2
			(_cor0, Included)
'create_start_appls'/2 =
    %% Line 1204
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{_cor23,A}|T],Incl> when 'true' ->
	      %% Line 1205
	      ( case A of
		  ( <( {'application',_rec27,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 1206
			case call 'lists':'member'
				 (_rec27, Incl) of
			  %% Line 1207
			  <'false'>
			      when ( call 'erlang':'=:='
				      (_cor24,
				       'none')
				  -| ['compiler_generated'] ) ->
			      %% Line 1208
			      apply 'create_start_appls'/2
				  (T, Incl)
			  %% Line 1209
			  <'false'>
			      when ( call 'erlang':'=:='
				      (_cor24,
				       'load')
				  -| ['compiler_generated'] ) ->
			      %% Line 1210
			      apply 'create_start_appls'/2
				  (T, Incl)
			  %% Line 1211
			  <'false'> when 'true' ->
			      let <_cor19> =
				  %% Line 1213
				  apply 'create_start_appls'/2
				      (T, Incl)
			      in  %% Line 1212
				  [{'apply',{'application','start_boot',[_rec27|[_cor24|[]]]}}|_cor19]
			  %% Line 1214
			  <_cor54> when 'true' ->
			      %% Line 1215
			      apply 'create_start_appls'/2
				  (T, Incl)
			end
		    -| ['compiler_generated'] )
		  ( <_cor38> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','application'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1217
	  <[],_cor55> when 'true' ->
	      %% Line 1218
	      []
	  ( <_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor22,_cor21})
		  -| [{'function_name',{'create_start_appls',2}}] )
	    -| ['compiler_generated'] )
	end
'create_load_appls'/1 =
    %% Line 1223
    fun (_cor0) ->
	case _cor0 of
	  <[{{'kernel',_cor10},_cor11}|T]> when 'true' ->
	      %% Line 1224
	      apply 'create_load_appls'/1
		  (T)
	  %% Line 1225
	  <[{_cor12,A = {'application',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27}}|T]>
	      when call 'erlang':'=:='
		    (_cor14,
		     'none') ->
	      %% Line 1226
	      apply 'create_load_appls'/1
		  (T)
	  %% Line 1227
	  <[{_cor28,A}|T]> when 'true' ->
	      let <_cor7> =
		  %% Line 1228
		  apply 'pack_app'/1
		      (A)
	      in  let <_cor8> =
		      %% Line 1229
		      apply 'create_load_appls'/1
			  (T)
		  in  %% Line 1228
		      [{'apply',{'application','load',[_cor7|[]]}}|_cor8]
	  %% Line 1230
	  <[]> when 'true' ->
	      %% Line 1231
	      [{'progress','applications_loaded'}]
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'create_load_appls',1}}] )
	    -| ['compiler_generated'] )
	end
'script_end'/1 =
    %% Line 1236
    fun (_cor0) ->
	case _cor0 of
	  <'false'> when 'true' ->
	      %% Line 1237
	      [{'apply',{'c','erlangrc',[]}}|[{'progress','started'}]]
	  %% Line 1239
	  <'true'> when 'true' ->
	      %% Line 1240
	      [{'progress','started'}]
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'script_end',1}}] )
	    -| ['compiler_generated'] )
	end
'sort_appls'/1 =
    %% Line 1252
    fun (_cor0) ->
	let <_cor1> =
	    apply 'sort_appls'/4
		(_cor0, [], [], [])
	in  {'ok',_cor1}
'sort_appls'/4 =
    %% Line 1254
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{N,A}|T],Missing,Circular,Visited> when 'true' ->
	      %% Line 1255
	      case N of
		<{Name,_X_Vsn}> when 'true' ->
		    %% Line 1256
		    ( case A of
			( <( {'application',_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_rec29,_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51,_cor52}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <_cor7> =
				  call 'lists':'reverse'
				      (_rec29)
			      in  case apply 'find_all'/6
					   (Name, _cor7, %% Line 1257
							 T, %% Line 1257
							    Visited, %% Line 1257
								     [], %% Line 1257
									 []) of
				    <{Uses,T1,NotFnd1}> when 'true' ->
					let <_cor11> =
					    %% Line 1258
					    call 'lists':'reverse'
						(_cor45)
					in  %% Line 1258
					    case apply 'find_all'/6
						     (Name, _cor11, %% Line 1259
								    T1, %% Line 1259
									Visited, %% Line 1259
										 [], %% Line 1259
										     []) of
					      <{Incs,T2,NotFnd2}> when 'true' ->
						  let <_cor13> =
						      %% Line 1260
						      call 'erlang':'++'
							  (NotFnd2, Missing)
						  in  let <Missing1> =
							  %% Line 1260
							  call 'erlang':'++'
							      (NotFnd1, _cor13)
						      in  %% Line 1261
							  case call 'erlang':'++'
								   (Uses, Incs) of
							    %% Line 1262
							    <[]> when 'true' ->
								let <_cor15> =
								    %% Line 1266
								    apply 'sort_appls'/4
									(T, Missing1, Circular, [N|Visited])
								in  %% Line 1266
								    [{N,A}|_cor15]
							    %% Line 1267
							    <L> when 'true' ->
								let <_cor23> =
								    %% Line 1271
								    ( letrec
									  'lc$^0'/1 =
									      fun (_cor20) ->
										  case _cor20 of
										    <[{N1,_cor69}|_cor17]> when 'true' ->
											( letrec
											      'lc$^1'/1 =
												  fun (_cor21) ->
												      case _cor21 of
													<[N2|_cor19]>
													    when call 'erlang':'=='
														  (N1,
														   N2) ->
													    let <_cor22> =
														apply 'lc$^1'/1
														    (_cor19)
													    in  ( [N1|_cor22]
														  -| ['compiler_generated'] )
													( <[N2|_cor19]> when 'true' ->
													      apply 'lc$^1'/1
														  (_cor19)
													  -| ['compiler_generated'] )
													<[]> when 'true' ->
													    apply 'lc$^0'/1
														(_cor17)
													( <_cor21> when 'true' ->
													      ( primop 'match_fail'
														    ({'function_clause',_cor21})
														-| [{'function_name',{'lc$^1',1}}] )
													  -| ['compiler_generated'] )
												      end
											  in  apply 'lc$^1'/1
												  (Visited)
											  -| ['list_comprehension'] )
										    ( <[_cor16|_cor17]> when 'true' ->
											  apply 'lc$^0'/1
											      (_cor17)
										      -| ['compiler_generated'] )
										    <[]> when 'true' ->
											[]
										    ( <_cor20> when 'true' ->
											  ( primop 'match_fail'
												({'function_clause',_cor20})
											    -| [{'function_name',{'lc$^0',1}}] )
										      -| ['compiler_generated'] )
										  end
								      in  apply 'lc$^0'/1
									      (L)
								      -| ['list_comprehension'] )
								in  let <_cor26> =
									%% Line 1272
									case _cor23 of
									  %% Line 1273
									  <[]> when 'true' ->
									      Circular
									  %% Line 1274
									  <_cor70> when 'true' ->
									      [N|call 'erlang':'++'
										     (_cor23, Circular)]
									end
								    in  let <_cor28> =
									    %% Line 1278
									    call 'erlang':'++'
										(L, [{N,A}|T2])
									in  let <Apps> =
										%% Line 1278
										apply 'del_apps'/2
										    (_cor23, _cor28)
									    in  %% Line 1279
										apply 'sort_appls'/4
										    (Apps, Missing1, _cor26, [N|Visited])
							  end
					      ( <_cor12> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor12})
						-| ['compiler_generated'] )
					    end
				    ( <_cor8> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor8})
				      -| ['compiler_generated'] )
				  end
			  -| ['compiler_generated'] )
			( <_cor53> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','application'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1281
	  <[],[],[],_cor71> when 'true' ->
	      %% Line 1282
	      []
	  %% Line 1283
	  <[],Missing,[],_cor72> when 'true' ->
	      let <_cor31> =
		  %% Line 1285
		  apply 'make_set'/1
		      (Missing)
	      in  %% Line 1285
		  call 'erlang':'throw'
		      ({'error',{'undefined_applications',_cor31}})
	  %% Line 1286
	  <[],[],Circular,_cor73> when 'true' ->
	      let <_cor32> =
		  %% Line 1287
		  apply 'make_set'/1
		      (Circular)
	      in  %% Line 1287
		  call 'erlang':'throw'
		      ({'error',{'circular_dependencies',_cor32}})
	  %% Line 1288
	  <[],Missing,Circular,_cor74> when 'true' ->
	      let <_cor33> =
		  %% Line 1289
		  apply 'make_set'/1
		      (Circular)
	      in  let <_cor34> =
		      %% Line 1290
		      apply 'make_set'/1
			  (Missing)
		  in  %% Line 1289
		      call 'erlang':'throw'
			  ({'error',{'apps',[{'circular_dependencies',_cor33}|%% Line 1290
									      [{'undefined_applications',_cor34}|[]]]}})
	  ( <_cor38,_cor37,_cor36,_cor35> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor38,_cor37,_cor36,_cor35})
		  -| [{'function_name',{'sort_appls',4}}] )
	    -| ['compiler_generated'] )
	end
'find_all'/6 =
    %% Line 1292
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <CheckingApp,[Name|T],L,Visited,Found,NotFound> when 'true' ->
	      %% Line 1293
	      case apply 'find_app'/2
		       (Name, L) of
		%% Line 1294
		<{'value',App}> when 'true' ->
		    %% Line 1295
		    case App of
		      <{_X_A,R}> when 'true' ->
			  %% Line 1298
			  ( case R of
			      ( <( {'application',_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_rec31,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33}
				   -| ['compiler_generated'] )> when 'true' ->
				    case call 'lists':'member'
					     (CheckingApp, _rec31) of
				      %% Line 1299
				      <'true'> when 'true' ->
					  %% Line 1300
					  case call 'lists':'keymember'
						   (Name, 1, Visited) of
					    %% Line 1301
					    <'true'> when 'true' ->
						%% Line 1302
						apply 'find_all'/6
						    (CheckingApp, T, L, Visited, Found, NotFound)
					    %% Line 1303
					    <'false'> when 'true' ->
						%% Line 1304
						apply 'find_all'/6
						    (CheckingApp, T, L, Visited, Found, [Name|NotFound])
					    ( <_cor9> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor9})
					      -| ['compiler_generated'] )
					  end
				      %% Line 1306
				      <'false'> when 'true' ->
					  let <_cor10> =
					      %% Line 1307
					      call 'erlang':'--'
						  (L, [App|[]])
					  in  %% Line 1307
					      apply 'find_all'/6
						  (CheckingApp, T, _cor10, Visited, [App|Found], NotFound)
				      ( <_cor11> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor11})
					-| ['compiler_generated'] )
				    end
				-| ['compiler_generated'] )
			      ( <_cor34> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','application'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
		%% Line 1309
		<'false'> when 'true' ->
		    %% Line 1310
		    case call 'lists':'keymember'
			     (Name, 1, Visited) of
		      %% Line 1311
		      <'true'> when 'true' ->
			  %% Line 1312
			  apply 'find_all'/6
			      (CheckingApp, T, L, Visited, Found, NotFound)
		      %% Line 1313
		      <'false'> when 'true' ->
			  %% Line 1314
			  apply 'find_all'/6
			      (CheckingApp, T, L, Visited, Found, [Name|NotFound])
		      ( <_cor12> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor12})
			-| ['compiler_generated'] )
		    end
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1317
	  <_X_CheckingApp,[],L,_X_Visited,Found,NotFound> when 'true' ->
	      %% Line 1318
	      {Found,L,NotFound}
	  ( <_cor19,_cor18,_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'find_all',6}}] )
	    -| ['compiler_generated'] )
	end
'find_app'/2 =
    %% Line 1320
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,[{{_cor4,Vsn},Application}|_cor5]>
	      when call 'erlang':'=:='
		    (_cor4,
		     Name) ->
	      %% Line 1321
	      {'value',{{Name,Vsn},Application}}
	  %% Line 1322
	  <Name,[_cor6|T]> when 'true' ->
	      %% Line 1323
	      apply 'find_app'/2
		  (Name, T)
	  %% Line 1324
	  <_X_Name,[]> when 'true' ->
	      %% Line 1325
	      'false'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'find_app',2}}] )
	    -| ['compiler_generated'] )
	end
'del_apps'/2 =
    %% Line 1327
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Name|T],L> when 'true' ->
	      let <_cor2> =
		  %% Line 1328
		  call 'lists':'keydelete'
		      (Name, 1, L)
	      in  %% Line 1328
		  apply 'del_apps'/2
		      (T, _cor2)
	  %% Line 1329
	  <[],L> when 'true' ->
	      %% Line 1330
	      L
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'del_apps',2}}] )
	    -| ['compiler_generated'] )
	end
'create_path'/3 =
    %% Line 1341
    fun (_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 1342
	    ( fun (_cor3) ->
		  case _cor3 of
		    <{{Name,Vsn},App}> when 'true' ->
			%% Line 1343
			apply 'cr_path'/5
			    (Name, Vsn, App, _cor1, _cor0)
		    ( <_cor4> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor4})
			    -| [{'function_name',{'-create_path/3-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-create_path/3-fun-0-'}}] )
	in  let <_cor6> =
		%% Line 1342
		call 'lists':'map'
		    (_cor5, _cor2)
	    in  %% Line 1342
		apply 'make_set'/1
		    (_cor6)
'cr_path'/5 =
    %% Line 1349
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Name,Vsn,_cor26,'true',[]> when 'true' ->
	      let <_cor6> =
		  %% Line 1350
		  apply 'to_list'/1
		      (Name)
	      in  let <_cor5> =
		      %% Line 1350
		      [45|Vsn]
		  in  let <_cor7> =
			  %% Line 1350
			  call 'erlang':'++'
			      (_cor6, _cor5)
		      in  %% Line 1350
			  call 'filename':'join'
			      ([[36|[82|[79|[79|[84]]]]]|[[108|[105|[98]]]|[_cor7|[[101|[98|[105|[110]]]]]]]])
	  %% Line 1351
	  <Name,Vsn,App,'true',Variables> when 'true' ->
	      %% Line 1352
	      ( case App of
		  ( <( {'application',_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_rec32}
		       -| ['compiler_generated'] )> when 'true' ->
			let <N> =
			    %% Line 1353
			    apply 'to_list'/1
				(Name)
			in  let <_cor12> =
				%% Line 1354
				[45|Vsn]
			    in  let <_cor13> =
				    %% Line 1354
				    call 'erlang':'++'
					(N, _cor12)
				in  let <Tail> =
					%% Line 1354
					[_cor13|[[101|[98|[105|[110]]]]]]
				    in  %% Line 1355
					case apply 'variable_dir'/4
						 (_rec32, N, Vsn, Variables) of
					  %% Line 1356
					  <{'ok',VarDir}> when 'true' ->
					      let <_cor15> =
						  %% Line 1357
						  [VarDir|Tail]
					      in  %% Line 1357
						  call 'filename':'join'
						      (_cor15)
					  %% Line 1358
					  <_cor42> when 'true' ->
					      let <_cor16> =
						  %% Line 1359
						  [[36|[82|[79|[79|[84]]]]]|[[108|[105|[98]]]|Tail]]
					      in  %% Line 1359
						  call 'filename':'join'
						      (_cor16)
					end
		    -| ['compiler_generated'] )
		  ( <_cor41> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','application'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1361
	  <Name,_cor43,_cor44,'otp_build',_cor45> when 'true' ->
	      let <_cor18> =
		  %% Line 1362
		  apply 'to_list'/1
		      (Name)
	      in  %% Line 1362
		  call 'filename':'join'
		      ([[36|[82|[79|[79|[84]]]]]|[[108|[105|[98]]]|[_cor18|[[101|[98|[105|[110]]]]]]]])
	  %% Line 1363
	  <_cor46,_cor47,App,_cor48,_cor49> when 'true' ->
	      %% Line 1364
	      ( case App of
		  ( <( {'application',_cor50,_cor51,_cor52,_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59,_cor60,_cor61,_cor62,_cor63,_rec33}
		       -| ['compiler_generated'] )> when 'true' ->
			call 'filename':'absname'
			    (_rec33)
		    -| ['compiler_generated'] )
		  ( <_cor64> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','application'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	end
'variable_dir'/4 =
    %% Line 1366
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Dir,Name,Vsn,[{Var,Path}|Variables]> when 'true' ->
	      %% Line 1367
	      case call 'lists':'prefix'
		       (Path, Dir) of
		%% Line 1368
		<'true'> when 'true' ->
		    let <D0> =
			%% Line 1369
			apply 'strip_prefix'/2
			    (Path, Dir)
		    in  %% Line 1370
			case apply 'strip_name_ebin'/3
				 (D0, Name, Vsn) of
			  %% Line 1371
			  <{'ok',D}> when 'true' ->
			      let <_cor5> =
				  %% Line 1372
				  [36|Var]
			      in  let <_cor6> =
				      %% Line 1372
				      [_cor5|D]
				  in  let <_cor7> =
					  %% Line 1372
					  call 'filename':'join'
					      (_cor6)
				      in  %% Line 1372
					  {'ok',_cor7}
			  %% Line 1373
			  <_cor17> when 'true' ->
			      let <_cor8> =
				  %% Line 1376
				  [36|Var]
			      in  let <_cor9> =
				      %% Line 1376
				      [_cor8|D0]
				  in  let <_cor10> =
					  %% Line 1376
					  call 'filename':'join'
					      (_cor9)
				      in  %% Line 1376
					  {'ok',_cor10}
			end
		%% Line 1378
		<_cor18> when 'true' ->
		    %% Line 1379
		    apply 'variable_dir'/4
			(Dir, Name, Vsn, Variables)
	      end
	  %% Line 1381
	  <_X_Dir,_cor19,_cor20,[]> when 'true' ->
	      %% Line 1382
	      'false'
	  ( <_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'variable_dir',4}}] )
	    -| ['compiler_generated'] )
	end
'strip_prefix'/2 =
    %% Line 1384
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1385
	    call 'filename':'split'
		(_cor1)
	in  let <L> =
		%% Line 1385
		call 'erlang':'length'
		    (_cor2)
	    in  let <_cor4> =
		    %% Line 1386
		    call 'filename':'split'
			(_cor0)
		in  %% Line 1386
		    call 'lists':'nthtail'
			(L, _cor4)
'strip_name_ebin'/3 =
    %% Line 1388
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1389
	    [45|_cor0]
	in  let <FullName> =
		%% Line 1389
		call 'erlang':'++'
		    (_cor1, _cor3)
	    in  %% Line 1390
		case call 'lists':'reverse'
			 (_cor2) of
		  %% Line 1391
		  <[[101|[98|[105|[110]]]]|[_cor11|D]]>
		      when call 'erlang':'=:='
			    (_cor11,
			     _cor1) ->
		      let <_cor5> =
			  call 'lists':'reverse'
			      (D)
		      in  {'ok',_cor5}
		  %% Line 1392
		  <[[101|[98|[105|[110]]]]|[_cor12|D]]>
		      when call 'erlang':'=:='
			    (_cor12,
			     FullName) ->
		      let <_cor6> =
			  call 'lists':'reverse'
			      (D)
		      in  {'ok',_cor6}
		  %% Line 1393
		  <_cor13> when 'true' ->
		      'false'
		end
'create_mandatory_path'/3 =
    %% Line 1397
    fun (_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 1399
	    ( fun (_cor5) ->
		  case _cor5 of
		    <{{Name,Vsn},A}> when 'true' ->
			%% Line 1400
			case call 'lists':'member'
				 (Name, ['kernel'|['stdlib']]) of
			  %% Line 1401
			  <'true'> when 'true' ->
			      %% Line 1402
			      apply 'cr_path'/5
				  (Name, Vsn, A, _cor1, _cor0)
			  %% Line 1403
			  <_cor12> when 'true' ->
			      %% Line 1404
			      []
			end
		    ( <_cor6> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor6})
			    -| [{'function_name',{'-create_mandatory_path/3-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-create_mandatory_path/3-fun-0-'}}] )
	in  let <_cor8> =
		%% Line 1399
		call 'lists':'map'
		    (_cor7, _cor2)
	    in  %% Line 1399
		apply 'make_set'/1
		    (_cor8)
'load_appl_mods'/4 =
    %% Line 1412
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{{Name,Vsn},A}|Appls],Mand,PathFlag,Variables> when 'true' ->
	      %% Line 1413
	      ( case A of
		  ( <( {'application',_cor19,_cor20,_cor21,_cor22,_cor23,_rec34,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor12> =
			    %% Line 1414
			    ( fun (_cor10) ->
				  let <_cor9> =
				      call 'lists':'member'
					  (_cor10, Mand)
				  in  call 'erlang':'not'
					  (_cor9)
			      -| [{'id',{0,0,'-load_appl_mods/4-fun-0-'}}] )
			in  let <_cor13> =
				%% Line 1414
				call 'lists':'filter'
				    (_cor12, _rec34)
			    in  let <_cor8> =
				    %% Line 1415
				    apply 'cr_path'/5
					(Name, Vsn, A, PathFlag, Variables)
				in  let <_cor14> =
					%% Line 1414
					apply 'load_commands'/2
					    (_cor13, _cor8)
				    in  let <_cor7> =
					    %% Line 1416
					    apply 'load_appl_mods'/4
						(Appls, Mand, PathFlag, Variables)
					in  %% Line 1415
					    call 'erlang':'++'
						(_cor14, _cor7)
		    -| ['compiler_generated'] )
		  ( <_cor33> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','application'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1420
	  <[],_cor34,_cor35,_cor36> when 'true' ->
	      %% Line 1421
	      [{'progress','modules_loaded'}]
	  ( <_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'load_appl_mods',4}}] )
	    -| ['compiler_generated'] )
	end
'load_commands'/2 =
    %% Line 1423
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1424
	    call 'filename':'join'
		([_cor0|[]])
	in  let <_cor3> =
		%% Line 1425
		call 'lists':'sort'
		    (_cor1)
	    in  %% Line 1424
		[{'path',[_cor2|[]]}|%% Line 1425
				     [{'primLoad',_cor3}|[]]]
'pack_app'/1 =
    %% Line 1430
    fun (_cor0) ->
	case _cor0 of
	  <{'application',Name,_cor3,V,Id,D,M,%% Line 1431
					      App,%% Line 1431
						  Incs,%% Line 1431
						       Regs,%% Line 1432
							    Env,%% Line 1432
								MaxT,%% Line 1432
								     MaxP,%% Line 1431
									  Mod,%% Line 1431
									      SF,_cor4}> when 'true' ->
	      let <_cor1> =
		  %% Line 1444
		  apply 'behave'/1
		      ([{'start_phases',SF}|[{'mod',Mod}|[]]])
	      in  %% Line 1433
		  {'application',Name,%% Line 1434
				      [{'description',D}|%% Line 1435
							 [{'vsn',V}|%% Line 1436
								    [{'id',Id}|%% Line 1437
									       [{'modules',M}|%% Line 1438
											      [{'registered',Regs}|%% Line 1439
														   [{'applications',App}|%% Line 1440
																	 [{'included_applications',Incs}|%% Line 1441
																					 [{'env',Env}|%% Line 1442
																						      [{'maxT',MaxT}|%% Line 1443
																								     [{'maxP',MaxP}|_cor1]]]]]]]]]]}
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'pack_app',1}}] )
	    -| ['compiler_generated'] )
	end
'behave'/1 =
    %% Line 1446
    fun (_cor0) ->
	case _cor0 of
	  <[{'mod',[]}|T]> when 'true' ->
	      %% Line 1447
	      apply 'behave'/1
		  (T)
	  %% Line 1448
	  <[{'start_phases','undefined'}|T]> when 'true' ->
	      %% Line 1449
	      apply 'behave'/1
		  (T)
	  %% Line 1450
	  <[H|T]> when 'true' ->
	      let <_cor1> =
		  %% Line 1451
		  apply 'behave'/1
		      (T)
	      in  %% Line 1451
		  [H|_cor1]
	  %% Line 1452
	  <[]> when 'true' ->
	      %% Line 1453
	      []
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'behave',1}}] )
	    -| ['compiler_generated'] )
	end
'mandatory_modules'/0 =
    %% Line 1462
    fun () ->
	%% Line 1464
	['error_handler']
'preloaded'/0 =
    %% Line 1469
    fun () ->
	%% Line 1471
	['erl_prim_loader'|['erlang'|['erts_internal'|['init'|['otp_ring0'|['prim_eval'|['prim_file'|['prim_inet'|['prim_zip'|['zlib']]]]]]]]]]
'kernel_processes'/0 =
    %% Line 1480
    fun () ->
	let <_cor7> =
	    %% Line 1484
	    ( fun (_cor5) ->
		  let <_cor2> =
		      %% Line 1485
		      ( fun (_cor0) ->
			    case _cor0 of
			      <{{'kernel',_cor8},_X_App}> when 'true' ->
				  'true'
			      %% Line 1486
			      <_cor9> when 'true' ->
				  'false'
			    end
			-| [{'id',{0,0,'-kernel_processes/0-fun-0-'}}] )
		  in  %% Line 1485
		      case call 'lists':'filter'
			       (_cor2, _cor5) of
			<[{_cor10,App}|[]]> when 'true' ->
			    let <_cor4> =
				%% Line 1489
				apply 'pack_app'/1
				    (App)
			    in  %% Line 1489
				[_cor4|[]]
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor3})
			  -| ['compiler_generated'] )
		      end
	      -| [{'id',{0,0,'-kernel_processes/0-fun-1-'}}] )
	in  %% Line 1481
	    [{'heart','heart','start',[]}|%% Line 1482
					  [{'error_logger','error_logger','start_link',[]}|%% Line 1483
											   [{'application_controller','application_controller','start',_cor7}|%% Line 1491
																			      []]]]
'create_kernel_procs'/1 =
    %% Line 1496
    fun (_cor0) ->
	let <_cor5> =
	    %% Line 1497
	    ( fun (_cor3) ->
		  case _cor3 of
		    <{Name,Mod,Func,Args}>
			when call 'erlang':'is_function'
			      (Args) ->
			let <_cor2> =
			    %% Line 1498
			    apply Args
				(_cor0)
			in  %% Line 1498
			    {'kernelProcess',Name,{Mod,Func,_cor2}}
		    %% Line 1499
		    <{Name,Mod,Func,Args}> when 'true' ->
			%% Line 1500
			{'kernelProcess',Name,{Mod,Func,Args}}
		    ( <_cor4> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor4})
			    -| [{'function_name',{'-create_kernel_procs/1-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-create_kernel_procs/1-fun-0-'}}] )
	in  let <_cor1> =
		%% Line 1502
		apply 'kernel_processes'/0
		    ()
	    in  let <_cor6> =
		    %% Line 1497
		    call 'lists':'map'
			(_cor5, _cor1)
		in  %% Line 1502
		    call 'erlang':'++'
			(_cor6, %% Line 1503
				[{'progress','init_kernel_started'}])
'mk_tar'/5 =
    %% Line 1528
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 1529
	    case apply 'get_outdir'/1
		     (_cor1) of
	      %% Line 1530
	      <[]> when 'true' ->
		  %% Line 1531
		  call 'erlang':'++'
		      (_cor4, [46|[116|[97|[114|[46|[103|[122]]]]]]])
	      %% Line 1532
	      <OutDir> when 'true' ->
		  let <_cor5> =
		      %% Line 1533
		      call 'filename':'basename'
			  (_cor4)
		  in  let <_cor6> =
			  %% Line 1533
			  call 'filename':'join'
			      (OutDir, _cor5)
		      in  %% Line 1534
			  call 'erlang':'++'
			      (_cor6, [46|[116|[97|[114|[46|[103|[122]]]]]]])
	    end
	in  let <Tar> =
		%% Line 1536
		apply 'open_main_tar'/1
		    (_cor8)
	    in  let <_cor11> =
		    catch
			%% Line 1537
			apply 'mk_tar'/6
			    (Tar, _cor4, _cor3, _cor2, _cor1, _cor0)
		in  %% Line 1537
		    case _cor11 of
		      %% Line 1538
		      <{'error',Error}> when 'true' ->
			  let <_X_> =
			      %% Line 1539
			      apply 'del_tar'/2
				  (Tar, _cor8)
			  in  %% Line 1540
			      {'error','systools_make',Error}
		      %% Line 1541
		      <{'EXIT',Reason}> when 'true' ->
			  let <_X_> =
			      %% Line 1542
			      apply 'del_tar'/2
				  (Tar, _cor8)
			  in  %% Line 1543
			      {'error','systools_make',Reason}
		      %% Line 1544
		      <_cor21> when 'true' ->
			  %% Line 1545
			  case call 'erl_tar':'close'
				   (Tar) of
			    %% Line 1546
			    <'ok'> when 'true' ->
				'ok'
			    %% Line 1547
			    <{'error',Reason}> when 'true' ->
				{'error','systools_make',{'close',_cor8,Reason}}
			    ( <_cor14> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor14})
			      -| ['compiler_generated'] )
			  end
		    end
'open_main_tar'/1 =
    %% Line 1551
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 1552
		apply 'open_tar'/1
		    (_cor0)
	in  %% Line 1552
	    case _cor1 of
	      %% Line 1553
	      <{'error',Error}> when 'true' ->
		  %% Line 1554
		  call 'erlang':'throw'
		      ({'error','systools_make',Error})
	      %% Line 1555
	      <Tar> when 'true' ->
		  %% Line 1556
		  Tar
	    end
'mk_tar'/6 =
    %% Line 1559
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Variables> =
	    %% Line 1560
	    apply 'get_variables'/1
		(_cor1)
	in  do  %% Line 1561
		apply 'add_applications'/5
		    (_cor2, _cor5, Variables, _cor1, 'false')
		do  %% Line 1562
		    apply 'add_variable_tars'/4
			(Variables, _cor2, _cor5, _cor1)
		    do  %% Line 1563
			apply 'add_system_files'/4
			    (_cor5, _cor4, _cor3, _cor0)
			%% Line 1564
			apply 'add_erts_bin'/3
			    (_cor5, _cor3, _cor1)
'add_applications'/5 =
    %% Line 1566
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor12> =
	    %% Line 1567
	    ( fun (_cor9,_cor8) ->
		  case <_cor9,_cor8> of
		    <{{Name,Vsn},App},Errs> when 'true' ->
			let <_cor6> =
			    catch
				let <_cor5> =
				    %% Line 1568
				    apply 'to_list'/1
					(Name)
				in  %% Line 1568
				    apply 'add_appl'/7
					(_cor5, Vsn, App, _cor3, _cor2, _cor1, _cor0)
			in  %% Line 1568
			    case _cor6 of
			      %% Line 1570
			      <'ok'> when 'true' ->
				  %% Line 1571
				  Errs
			      %% Line 1572
			      <{'error',What}> when 'true' ->
				  %% Line 1573
				  [{'error_add_appl',{Name,What}}|Errs]
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor7})
				-| ['compiler_generated'] )
			    end
		    ( <_cor11,_cor10> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor11,_cor10})
			    -| [{'function_name',{'-add_applications/5-fun-0-',2}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-add_applications/5-fun-0-'}}] )
	in  %% Line 1576
	    case call 'lists':'foldl'
		     (_cor12, [], _cor4) of
	      %% Line 1577
	      <[]> when 'true' ->
		  %% Line 1578
		  'ok'
	      %% Line 1579
	      <Errors> when 'true' ->
		  %% Line 1580
		  call 'erlang':'throw'
		      ({'error',Errors})
	    end
'add_variable_tars'/4 =
    %% Line 1587
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Variable|Variables],Appls,Tar,Flags> when 'true' ->
	      do  %% Line 1588
		  apply 'add_variable_tar'/4
		      (Variable, Appls, Tar, Flags)
		  %% Line 1589
		  apply 'add_variable_tars'/4
		      (Variables, Appls, Tar, Flags)
	  %% Line 1590
	  <[],_cor8,_cor9,_cor10> when 'true' ->
	      %% Line 1591
	      'ok'
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'add_variable_tars',4}}] )
	    -| ['compiler_generated'] )
	end
'add_variable_tar'/4 =
    %% Line 1593
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{Variable,P},Appls,Tar,Flags> when 'true' ->
	      %% Line 1594
	      case apply 'var_tar_flag'/1
		       (Flags) of
		%% Line 1595
		<'omit'> when 'true' ->
		    %% Line 1596
		    'ok'
		%% Line 1597
		<Flag> when 'true' ->
		    let <TarName> =
			%% Line 1598
			call 'erlang':'++'
			    (Variable, [46|[116|[97|[114|[46|[103|[122]]]]]]])
		    in  let <VarTar> =
			    %% Line 1599
			    apply 'open_tar'/1
				(TarName)
			in  let <_cor6> =
				catch
				    %% Line 1600
				    apply 'add_applications'/5
					(Appls, VarTar, [{Variable,P}|[]], %% Line 1601
									   Flags, %% Line 1601
										  Variable)
			    in  %% Line 1600
				case _cor6 of
				  %% Line 1602
				  <'ok'>
				      when call 'erlang':'=:='
					    (Flag,
					     'include') ->
				      do  %% Line 1603
					  apply 'close_tar'/2
					      (VarTar, TarName)
					  do  %% Line 1604
					      apply 'add_to_tar'/3
						  (Tar, TarName, TarName)
					      %% Line 1605
					      apply 'del_file'/1
						  (TarName)
				  %% Line 1606
				  <'ok'>
				      when call 'erlang':'=:='
					    (Flag,
					     'ownfile') ->
				      %% Line 1607
				      apply 'close_tar'/2
					  (VarTar, TarName)
				  %% Line 1608
				  <Error> when 'true' ->
				      let <_X_> =
					  %% Line 1609
					  apply 'del_tar'/2
					      (VarTar, TarName)
				      in  %% Line 1610
					  call 'erlang':'throw'
					      (Error)
				end
	      end
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'add_variable_tar',4}}] )
	    -| ['compiler_generated'] )
	end
'var_tar_flag'/1 =
    %% Line 1614
    fun (_cor0) ->
	%% Line 1615
	case apply 'get_flag'/2
		 ('var_tar', _cor0) of
	  %% Line 1616
	  <{'var_tar',Flag}> when 'true' ->
	      %% Line 1617
	      case call 'lists':'member'
		       (Flag, ['include'|['ownfile'|['omit']]]) of
		%% Line 1618
		<'true'> when 'true' ->
		    Flag
		%% Line 1619
		<_cor4> when 'true' ->
		    'include'
	      end
	  %% Line 1621
	  <_cor5> when 'true' ->
	      %% Line 1622
	      'include'
	end
'add_system_files'/4 =
    %% Line 1630
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1631
	( case _cor1 of
	    ( <( {'release',_cor30,_rec35,_cor31,_cor32,_cor33}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <RelName0> =
		      %% Line 1632
		      call 'filename':'basename'
			  (_cor2)
		  in  let <RelVsnDir> =
			  %% Line 1634
			  call 'filename':'join'
			      ([114|[101|[108|[101|[97|[115|[101|[115]]]]]]]], _rec35)
		      in  let <_cor11> =
			      %% Line 1642
			      call 'erlang':'++'
				  (_cor2, [46|[114|[101|[108]]]])
			  in  let <_cor9> =
				  %% Line 1643
				  call 'erlang':'++'
				      (RelName0, [46|[114|[101|[108]]]])
			      in  let <_cor10> =
				      %% Line 1643
				      call 'filename':'join'
					  ([114|[101|[108|[101|[97|[115|[101|[115]]]]]]]], _cor9)
				  in  do  %% Line 1642
					  apply 'add_to_tar'/3
					      (_cor3, _cor11, _cor10)
					  let <_cor14> =
					      %% Line 1644
					      call 'erlang':'++'
						  (_cor2, [46|[114|[101|[108]]]])
					  in  let <_cor12> =
						  %% Line 1645
						  call 'erlang':'++'
						      (RelName0, [46|[114|[101|[108]]]])
					      in  let <_cor13> =
						      %% Line 1645
						      call 'filename':'join'
							  (RelVsnDir, _cor12)
						  in  do  %% Line 1644
							  apply 'add_to_tar'/3
							      (_cor3, _cor14, _cor13)
							  let <_cor16> =
							      %% Line 1655
							      case call 'filename':'dirname'
								       (_cor2) of
								%% Line 1656
								<[46]> when 'true' ->
								    %% Line 1657
								    [[46]|_cor0]
								%% Line 1658
								<RelDir> when 'true' ->
								    %% Line 1659
								    [RelDir|[[46]|_cor0]]
							      end
							  in  let <_cor18> =
								  %% Line 1662
								  call 'erlang':'++'
								      (RelName0, [46|[98|[111|[111|[116]]]]])
							      in  do  %% Line 1662
								      case apply 'lookup_file'/2
									       (_cor18, _cor16) of
									%% Line 1663
									<'false'> when 'true' ->
									    let <_cor19> =
										%% Line 1664
										call 'erlang':'++'
										    (RelName0, [46|[98|[111|[111|[116]]]]])
									    in  %% Line 1664
										call 'erlang':'throw'
										    ({'error',{'tar_error',{'add',_cor19,'enoent'}}})
									%% Line 1665
									<Boot> when 'true' ->
									    let <_cor20> =
										%% Line 1666
										call 'filename':'join'
										    (RelVsnDir, [115|[116|[97|[114|[116|[46|[98|[111|[111|[116]]]]]]]]]])
									    in  %% Line 1666
										apply 'add_to_tar'/3
										    (_cor3, Boot, _cor20)
								      end
								      do  %% Line 1669
									  case apply 'lookup_file'/2
										   ([114|[101|[108|[117|[112]]]]], _cor16) of
									    %% Line 1670
									    <'false'> when 'true' ->
										'ok'
									    %% Line 1672
									    <Relup> when 'true' ->
										do  %% Line 1673
										    apply 'check_relup'/1
											(Relup)
										    let <_cor22> =
											%% Line 1674
											call 'filename':'join'
											    (RelVsnDir, [114|[101|[108|[117|[112]]]]])
										    in  %% Line 1674
											apply 'add_to_tar'/3
											    (_cor3, Relup, _cor22)
									  end
									  do  %% Line 1677
									      case apply 'lookup_file'/2
										       ([115|[121|[115|[46|[99|[111|[110|[102|[105|[103]]]]]]]]]], _cor16) of
										%% Line 1678
										<'false'> when 'true' ->
										    'ok'
										%% Line 1680
										<Sys> when 'true' ->
										    do  %% Line 1681
											apply 'check_sys_config'/1
											    (Sys)
											let <_cor24> =
											    %% Line 1682
											    call 'filename':'join'
												(RelVsnDir, [115|[121|[115|[46|[99|[111|[110|[102|[105|[103]]]]]]]]]])
											in  %% Line 1682
											    apply 'add_to_tar'/3
												(_cor3, Sys, _cor24)
									      end
									      %% Line 1685
									      'ok'
	      -| ['compiler_generated'] )
	    ( <_cor34> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','release'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'lookup_file'/2 =
    %% Line 1687
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Name,[Dir|Path]> when 'true' ->
	      let <File> =
		  %% Line 1688
		  call 'filename':'join'
		      (Dir, Name)
	      in  %% Line 1689
		  case call 'filelib':'is_file'
			   (File) of
		    %% Line 1690
		    <'true'> when 'true' ->
			%% Line 1691
			File
		    %% Line 1692
		    <'false'> when 'true' ->
			%% Line 1693
			apply 'lookup_file'/2
			    (Name, Path)
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1695
	  <_X_Name,[]> when 'true' ->
	      %% Line 1696
	      'false'
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'lookup_file',2}}] )
	    -| ['compiler_generated'] )
	end
'check_relup'/1 =
    %% Line 1699
    fun (_cor0) ->
	%% Line 1700
	case call 'file':'consult'
		 (_cor0) of
	  %% Line 1701
	  <{'ok',[{Vsn,UpFrom,DownTo}|[]]}>
	      when try
		    let <_cor1> =
			call 'erlang':'is_list'
			    (Vsn)
		    in  let <_cor2> =
			    call 'erlang':'hd'
				(Vsn)
			in  let <_cor3> =
				call 'erlang':'is_integer'
				    (_cor2)
			    in  let <_cor4> =
				    %% Line 1702
				    call 'erlang':'is_list'
					(UpFrom)
				in  let <_cor5> =
					%% Line 1702
					call 'erlang':'is_list'
					    (DownTo)
				    in  let <_cor6> =
					    call 'erlang':'and'
						(_cor4, _cor5)
					in  let <_cor7> =
						call 'erlang':'and'
						    (_cor3, _cor6)
					    in  call 'erlang':'and'
						    (_cor1, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1703
	      'ok'
	  %% Line 1704
	  <{'ok',_cor10}> when 'true' ->
	      %% Line 1705
	      call 'erlang':'throw'
		  ({'error',{'tar_error',{'add',[114|[101|[108|[117|[112]]]]],['invalid_format']}}})
	  %% Line 1706
	  <Other> when 'true' ->
	      %% Line 1707
	      call 'erlang':'throw'
		  ({'error',{'tar_error',{'add',[114|[101|[108|[117|[112]]]]],[Other|[]]}}})
	end
'check_sys_config'/1 =
    %% Line 1711
    fun (_cor0) ->
	%% Line 1712
	case call 'file':'consult'
		 (_cor0) of
	  %% Line 1713
	  <{'ok',[SysConfig|[]]}> when 'true' ->
	      let <_cor8> =
		  %% Line 1714
		  ( fun (_cor6) ->
			case _cor6 of
			  <{App,KeyVals}>
			      when let <_cor1> =
				    call 'erlang':'is_atom'
					(App)
				in  let <_cor2> =
					%% Line 1715
					call 'erlang':'is_list'
					    (KeyVals)
				    in  call 'erlang':'and'
					    (_cor1, _cor2) ->
			      %% Line 1716
			      'true'
			  %% Line 1717
			  <OtherConfig>
			      when try
				    let <_cor3> =
					call 'erlang':'is_list'
					    (_cor6)
				    in  let <_cor4> =
					    %% Line 1718
					    call 'erlang':'hd'
						(_cor6)
					in  let <_cor5> =
						%% Line 1718
						call 'erlang':'is_integer'
						    (_cor4)
					    in  call 'erlang':'and'
						    (_cor3, _cor5)
				of <Try> ->
				    Try
				catch <T,R> ->
				    'false' ->
			      %% Line 1719
			      'true'
			  %% Line 1720
			  <_cor12> when 'true' ->
			      %% Line 1721
			      'false'
			end
		    -| [{'id',{0,0,'-check_sys_config/1-fun-0-'}}] )
	      in  %% Line 1714
		  case call 'lists':'all'
			   (_cor8, %% Line 1723
				   SysConfig) of
		    %% Line 1724
		    <'true'> when 'true' ->
			%% Line 1725
			'ok'
		    %% Line 1726
		    <'false'> when 'true' ->
			%% Line 1727
			call 'erlang':'throw'
			    ({'error',{'tar_error',{'add',[115|[121|[115|[46|[99|[111|[110|[102|[105|[103]]]]]]]]]],['invalid_format']}}})
		    ( <_cor9> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor9})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1730
	  <{'ok',_cor13}> when 'true' ->
	      %% Line 1731
	      call 'erlang':'throw'
		  ({'error',{'tar_error',{'add',[115|[121|[115|[46|[99|[111|[110|[102|[105|[103]]]]]]]]]],['invalid_format']}}})
	  %% Line 1732
	  <Other> when 'true' ->
	      %% Line 1733
	      call 'erlang':'throw'
		  ({'error',{'tar_error',{'add',[115|[121|[115|[46|[99|[111|[110|[102|[105|[103]]]]]]]]]],[Other|[]]}}})
	end
'add_appl'/7 =
    %% Line 1742
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1743
	( case _cor4 of
	    ( <( {'application',_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_rec36}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 1744
		  case apply 'add_to'/5
			   (_rec36, _cor6, _cor5, _cor2, _cor0) of
		    %% Line 1745
		    <'false'> when 'true' ->
			%% Line 1746
			'ok'
		    %% Line 1747
		    <{'ok',ToDir}> when 'true' ->
			let <ADir> =
			    %% Line 1748
			    apply 'appDir'/1
				(_rec36)
			in  do  %% Line 1749
				apply 'add_priv'/3
				    (ADir, ToDir, _cor3)
				do  %% Line 1750
				    case apply 'get_flag'/2
					     ('dirs', _cor1) of
				      %% Line 1751
				      <{'dirs',Dirs}> when 'true' ->
					  %% Line 1752
					  apply 'add_dirs'/4
					      (ADir, Dirs, ToDir, _cor3)
				      %% Line 1753
				      <_cor48> when 'true' ->
					  'ok'
				    end
				    let <BinDir> =
					%% Line 1756
					call 'filename':'join'
					    (ToDir, [101|[98|[105|[110]]]])
				    in  let <_cor15> =
					    %% Line 1758
					    call 'erlang':'++'
						(_cor6, [46|[97|[112|[112]]]])
					in  let <_cor16> =
						%% Line 1758
						call 'filename':'join'
						    (_rec36, _cor15)
					    in  let <_cor13> =
						    %% Line 1759
						    call 'erlang':'++'
							(_cor6, [46|[97|[112|[112]]]])
						in  let <_cor14> =
							%% Line 1759
							call 'filename':'join'
							    (BinDir, _cor13)
						    in  do  %% Line 1757
							    apply 'add_to_tar'/3
								(_cor3, _cor16, _cor14)
							    let <_cor23> =
								%% Line 1760
								( fun (_cor21) ->
								      apply 'to_list'/1
									  (_cor21)
								  -| [{'id',{0,0,'-add_appl/7-fun-0-'}}] )
							    in  let <_cor24> =
								    %% Line 1760
								    call 'lists':'map'
									(_cor23, _cor38)
								in  let <_cor17> =
									%% Line 1765
									apply 'machine'/1
									    (_cor1)
								    in  let <_cor18> =
									    %% Line 1765
									    apply 'objfile_extension'/1
										(_cor17)
									in  %% Line 1760
									    apply 'add_modules'/5
										(_cor24, _cor3, _rec36, %% Line 1764
													BinDir, _cor18)
		    ( <_cor25> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor25})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor47> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','application'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'add_to'/5 =
    %% Line 1773
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1774
	case apply 'var_dir'/4
		 (_cor4, _cor3, _cor2, _cor1) of
	  %% Line 1775
	  <{'ok',_cor18,RestPath}>
	      when call 'erlang':'=:='
		    (_cor18,
		     _cor0) ->
	      let <_cor5> =
		  %% Line 1776
		  [45|_cor2]
	      in  let <_cor6> =
		      %% Line 1776
		      call 'erlang':'++'
			  (_cor3, _cor5)
		  in  let <_cor7> =
			  %% Line 1776
			  call 'erlang':'++'
			      (RestPath, [_cor6|[]])
		      in  let <_cor8> =
			      %% Line 1776
			      call 'filename':'join'
				  (_cor7)
			  in  %% Line 1776
			      {'ok',_cor8}
	  %% Line 1777
	  <{'ok',_cor19,_cor20}> when 'true' ->
	      %% Line 1778
	      'false'
	  %% Line 1779
	  <_cor21>
	      when call 'erlang':'=:='
		    (_cor0,
		     'false') ->
	      let <_cor9> =
		  %% Line 1780
		  [45|_cor2]
	      in  let <_cor10> =
		      %% Line 1780
		      call 'erlang':'++'
			  (_cor3, _cor9)
		  in  let <_cor11> =
			  %% Line 1780
			  call 'filename':'join'
			      ([108|[105|[98]]], _cor10)
		      in  %% Line 1780
			  {'ok',_cor11}
	  %% Line 1781
	  <_cor22> when 'true' ->
	      %% Line 1782
	      'false'
	end
'var_dir'/4 =
    %% Line 1785
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Dir,Name,Vsn,[{Var,Path}|Variables]> when 'true' ->
	      %% Line 1786
	      case call 'lists':'prefix'
		       (Path, Dir) of
		%% Line 1787
		<'true'> when 'true' ->
		    let <D0> =
			%% Line 1788
			apply 'strip_prefix'/2
			    (Path, Dir)
		    in  %% Line 1789
			case apply 'strip_name_ebin'/3
				 (D0, Name, Vsn) of
			  %% Line 1790
			  <{'ok',D}> when 'true' ->
			      %% Line 1791
			      {'ok',Var,D}
			  %% Line 1792
			  <_cor11> when 'true' ->
			      %% Line 1793
			      'false'
			end
		%% Line 1795
		<_cor12> when 'true' ->
		    %% Line 1796
		    apply 'var_dir'/4
			(Dir, Name, Vsn, Variables)
	      end
	  %% Line 1798
	  <_X_Dir,_cor13,_cor14,[]> when 'true' ->
	      %% Line 1799
	      'false'
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'var_dir',4}}] )
	    -| ['compiler_generated'] )
	end
'appDir'/1 =
    %% Line 1801
    fun (_cor0) ->
	%% Line 1802
	case call 'filename':'basename'
		 (_cor0) of
	  %% Line 1803
	  <[101|[98|[105|[110]]]]> when 'true' ->
	      call 'filename':'dirname'
		  (_cor0)
	  %% Line 1804
	  <_cor3> when 'true' ->
	      _cor0
	end
'add_modules'/5 =
    %% Line 1807
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor11> =
	    %% Line 1808
	    ( fun (_cor9) ->
		  let <_cor7> =
		      %% Line 1810
		      call 'erlang':'++'
			  (_cor9, _cor0)
		  in  let <_cor8> =
			  %% Line 1810
			  call 'filename':'join'
			      (_cor2, _cor7)
		      in  let <_cor5> =
			      %% Line 1811
			      call 'erlang':'++'
				  (_cor9, _cor0)
			  in  let <_cor6> =
				  %% Line 1811
				  call 'filename':'join'
				      (_cor1, _cor5)
			      in  %% Line 1809
				  apply 'add_to_tar'/3
				      (_cor3, _cor8, _cor6)
	      -| [{'id',{0,0,'-add_modules/5-fun-0-'}}] )
	in  %% Line 1808
	    call 'lists':'foreach'
		(_cor11, _cor4)
'add_dirs'/4 =
    %% Line 1818
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 1819
	    ( fun (_cor5) ->
		  catch
		      let <_cor4> =
			  apply 'to_list'/1
			      (_cor5)
		      in  apply 'add_dir'/4
			      (_cor3, _cor4, _cor1, _cor0)
	      -| [{'id',{0,0,'-add_dirs/4-fun-0-'}}] )
	in  %% Line 1819
	    call 'lists':'foreach'
		(_cor7, _cor2)
'add_dir'/4 =
    %% Line 1822
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <FromD> =
	    %% Line 1823
	    call 'filename':'join'
		(_cor3, _cor2)
	in  %% Line 1824
	    case apply 'dirp'/1
		     (FromD) of
	      %% Line 1825
	      <'true'> when 'true' ->
		  let <_cor5> =
		      %% Line 1826
		      call 'filename':'join'
			  (_cor1, _cor2)
		  in  %% Line 1826
		      apply 'add_to_tar'/3
			  (_cor0, FromD, _cor5)
	      %% Line 1827
	      <_cor11> when 'true' ->
		  %% Line 1828
		  'ok'
	    end
'add_priv'/3 =
    %% Line 1834
    fun (_cor2,_cor1,_cor0) ->
	let <Priv> =
	    %% Line 1835
	    call 'filename':'join'
		(_cor2, [112|[114|[105|[118]]]])
	in  %% Line 1836
	    case apply 'dirp'/1
		     (Priv) of
	      %% Line 1837
	      <'true'> when 'true' ->
		  let <_cor4> =
		      %% Line 1838
		      call 'filename':'join'
			  (_cor1, [112|[114|[105|[118]]]])
		  in  %% Line 1838
		      apply 'add_to_tar'/3
			  (_cor0, Priv, _cor4)
	      %% Line 1839
	      <_cor9> when 'true' ->
		  %% Line 1840
		  'ok'
	    end
'add_erts_bin'/3 =
    %% Line 1843
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1844
	case apply 'get_flag'/2
		 ('erts', _cor0) of
	  %% Line 1845
	  <{'erts',ErtsDir}> when 'true' ->
	      %% Line 1846
	      ( case _cor1 of
		  ( <( {'release',_cor15,_cor16,_rec38,_cor17,_cor18}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor6> =
			    %% Line 1847
			    apply 'to_list'/1
				(ErtsDir)
			in  let <_cor7> =
				%% Line 1848
				call 'erlang':'++'
				    ([101|[114|[116|[115|[45]]]]], _rec38)
			    in  let <FromDir> =
				    %% Line 1847
				    call 'filename':'join'
					([_cor6|%% Line 1848
						[_cor7|[[98|[105|[110]]]]]])
				in  do  %% Line 1849
					apply 'dirp'/1
					    (FromDir)
					let <_cor9> =
					    %% Line 1850
					    call 'erlang':'++'
						([101|[114|[116|[115|[45]]]]], _rec38)
					in  let <ToDir> =
						%% Line 1850
						call 'filename':'join'
						    (_cor9, [98|[105|[110]]])
					    in  %% Line 1851
						apply 'add_to_tar'/3
						    (_cor2, FromDir, ToDir)
		    -| ['compiler_generated'] )
		  ( <_cor19> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','release'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1852
	  <_cor20> when 'true' ->
	      %% Line 1853
	      'ok'
	end
'open_tar'/1 =
    %% Line 1859
    fun (_cor0) ->
	%% Line 1860
	case call 'erl_tar':'open'
		 (_cor0, ['write'|['compressed']]) of
	  %% Line 1861
	  <{'ok',Tar}> when 'true' ->
	      %% Line 1862
	      Tar
	  %% Line 1863
	  <{'error',Error}> when 'true' ->
	      %% Line 1864
	      call 'erlang':'throw'
		  ({'error',{'tar_error',{'open',_cor0,Error}}})
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'close_tar'/2 =
    %% Line 1867
    fun (_cor1,_cor0) ->
	%% Line 1868
	case call 'erl_tar':'close'
		 (_cor1) of
	  %% Line 1869
	  <'ok'> when 'true' ->
	      'ok'
	  %% Line 1870
	  <{'error',Reason}> when 'true' ->
	      call 'erlang':'throw'
		  ({'error',{'close',_cor0,Reason}})
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'del_tar'/2 =
    %% Line 1873
    fun (_cor1,_cor0) ->
	let <_X_> =
	    %% Line 1874
	    ( call 'erl_tar':'close'
		  (_cor1)
	      -| ['result_not_wanted'] )
	in  %% Line 1875
	    call 'file':'delete'
		(_cor0)
'add_to_tar'/3 =
    %% Line 1877
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1878
	case call 'erl_tar':'add'
		 (_cor2, _cor1, _cor0, ['compressed'|['dereference']]) of
	  %% Line 1879
	  <'ok'> when 'true' ->
	      'ok'
	  %% Line 1880
	  <{'error',Error}> when 'true' ->
	      %% Line 1881
	      call 'erlang':'throw'
		  ({'error',{'tar_error',{'add',_cor1,Error}}})
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'make_set'/1 =
    %% Line 1888
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      []
	  %% Line 1889
	  <[[]|T]> when 'true' ->
	      %% Line 1890
	      apply 'make_set'/1
		  (T)
	  %% Line 1891
	  <[H|T]> when 'true' ->
	      let <_cor6> =
		  %% Line 1892
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor4) ->
				case _cor4 of
				  <[Y|_cor2]>
				      when %% Line 1893
					call 'erlang':'=/='
					    (Y,
					     H) ->
				      let <_cor5> =
					  apply 'lc$^0'/1
					      (_cor2)
				      in  ( [Y|_cor5]
					    -| ['compiler_generated'] )
				  ( <[Y|_cor2]> when 'true' ->
					apply 'lc$^0'/1
					    (_cor2)
				    -| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor4> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor4})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  let <_cor3> =
			    apply 'make_set'/1
				(T)
			in  apply 'lc$^0'/1
				(_cor3)
		    -| ['list_comprehension'] )
	      in  %% Line 1892
		  [H|_cor6]
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'make_set',1}}] )
	    -| ['compiler_generated'] )
	end
'to_list'/1 =
    %% Line 1895
    fun (_cor0) ->
	case _cor0 of
	  <A>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      call 'erlang':'atom_to_list'
		  (A)
	  %% Line 1896
	  <L> when 'true' ->
	      L
	end
'mk_path'/1 =
    %% Line 1898
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 1899
	    ( fun (_cor1) ->
		  case _cor1 of
		    <Dir>
			when call 'erlang':'is_atom'
			      (_cor1) ->
			call 'erlang':'atom_to_list'
			    (Dir)
		    %% Line 1900
		    <Dir> when 'true' ->
			Dir
		  end
	      -| [{'id',{0,0,'-mk_path/1-fun-0-'}}] )
	in  let <Path1> =
		%% Line 1899
		call 'lists':'map'
		    (_cor3, _cor0)
	    in  %% Line 1902
		call 'systools_lib':'get_path'
		    (Path1)
'duplicates'/1 =
    %% Line 1908
    fun (_cor0) ->
	let <_cor1> =
	    call 'lists':'keysort'
		(1, _cor0)
	in  apply 'duplicates'/2
		(_cor1, [])
'duplicates'/2 =
    %% Line 1910
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H1|[H2|T]],L> when 'true' ->
	      let <_cor3> =
		  %% Line 1911
		  call 'erlang':'element'
		      (1, H1)
	      in  let <_cor2> =
		      %% Line 1911
		      call 'erlang':'element'
			  (1, H2)
		  in  %% Line 1911
		      case <_cor3,_cor2> of
			%% Line 1912
			<X,_cor7>
			    when call 'erlang':'=:='
				  (_cor7,
				   X) ->
			    apply 'duplicates'/2
				([H2|T], [{H1,H2}|L])
			%% Line 1913
			<_fol578,_fol579> when 'true' ->
			    apply 'duplicates'/2
				([H2|T], L)
		      end
	  %% Line 1915
	  <_cor9,L> when 'true' ->
	      L
	end
'read_file'/2 =
    %% Line 1921
    fun (_cor1,_cor0) ->
	%% Line 1922
	case call 'file':'path_open'
		 (_cor0, _cor1, ['read']) of
	  %% Line 1923
	  <{'ok',Stream,FullName}> when 'true' ->
	      let <_cor3> =
		  %% Line 1924
		  case call 'systools_lib':'read_term_from_stream'
			   (Stream, _cor1) of
		    %% Line 1925
		    <{'ok',Term}> when 'true' ->
			%% Line 1926
			{'ok',Term,FullName}
		    %% Line 1927
		    <Other> when 'true' ->
			%% Line 1928
			Other
		  end
	      in  %% Line 1930
		  case call 'file':'close'
			   (Stream) of
		    %% Line 1931
		    <'ok'> when 'true' ->
			_cor3
		    %% Line 1932
		    <{'error',Error}> when 'true' ->
			{'error',{'close',_cor1,Error}}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1934
	  <_X_Other> when 'true' ->
	      %% Line 1935
	      {'error',{'not_found',_cor1}}
	end
'del_file'/1 =
    %% Line 1938
    fun (_cor0) ->
	%% Line 1939
	case call 'file':'delete'
		 (_cor0) of
	  %% Line 1940
	  <'ok'> when 'true' ->
	      'ok'
	  %% Line 1941
	  <{'error',Error}> when 'true' ->
	      %% Line 1942
	      call 'erlang':'throw'
		  ({'error',{'delete',_cor0,Error}})
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'dirp'/1 =
    %% Line 1945
    fun (_cor0) ->
	%% Line 1946
	case call 'file':'read_file_info'
		 (_cor0) of
	  %% Line 1947
	  <{'ok',FileInfo}> when 'true' ->
	      ( case FileInfo of
		  ( <( {'file_info',_cor5,_rec39,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16}
		       -| ['compiler_generated'] )> when 'true' ->
			call 'erlang':'=:='
			    (_rec39, 'directory')
		    -| ['compiler_generated'] )
		  ( <_cor17> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','file_info'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 1948
	  <_cor18> when 'true' ->
	      'false'
	end
'create_include_path'/2 =
    %% Line 1960
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 1961
	    ( fun (_cor3) ->
		  case _cor3 of
		    <{_cor18,A}> when 'true' ->
			( case A of
			    ( <( {'application',_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_rec40}
				 -| ['compiler_generated'] )> when 'true' ->
				  _rec40
			      -| ['compiler_generated'] )
			    ( <_cor33> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','application'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor4> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor4})
			    -| [{'function_name',{'-create_include_path/2-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-create_include_path/2-fun-0-'}}] )
	in  let <FoundAppDirs> =
		%% Line 1961
		call 'lists':'map'
		    (_cor5, _cor1)
	    in  let <_cor15> =
		    %% Line 1962
		    ( fun (_cor13) ->
			  let <_cor9> =
			      %% Line 1963
			      call 'filename':'split'
				  (_cor13)
			  in  %% Line 1963
			      case call 'lists':'reverse'
				       (_cor9) of
				%% Line 1964
				<[[101|[98|[105|[110]]]]|D]> when 'true' ->
				    let <_cor10> =
					%% Line 1965
					call 'lists':'reverse'
					    (D)
				    in  let <_cor11> =
					    %% Line 1965
					    call 'erlang':'++'
						(_cor10, [[105|[110|[99|[108|[117|[100|[101]]]]]]]])
					in  %% Line 1965
					    call 'filename':'join'
						(_cor11)
				%% Line 1966
				<_cor34> when 'true' ->
				    %% Line 1967
				    call 'filename':'join'
					(_cor13, [105|[110|[99|[108|[117|[100|[101]]]]]]])
			      end
		      -| [{'id',{0,0,'-create_include_path/2-fun-1-'}}] )
		in  let <_cor7> =
			%% Line 1970
			apply 'no_dupl'/2
			    (_cor0, FoundAppDirs)
		    in  let <_cor8> =
			    %% Line 1970
			    call 'erlang':'++'
				(FoundAppDirs, _cor7)
			in  %% Line 1962
			    call 'lists':'map'
				(_cor15, _cor8)
'no_dupl'/2 =
    %% Line 1972
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Dir|Path],FoundAppDirs> when 'true' ->
	      %% Line 1973
	      case call 'lists':'member'
		       (Dir, FoundAppDirs) of
		%% Line 1974
		<'true'> when 'true' ->
		    %% Line 1975
		    apply 'no_dupl'/2
			(Path, FoundAppDirs)
		%% Line 1976
		<_cor6> when 'true' ->
		    let <_cor2> =
			%% Line 1977
			apply 'no_dupl'/2
			    (Path, FoundAppDirs)
		    in  %% Line 1977
			[Dir|_cor2]
	      end
	  %% Line 1979
	  <[],_cor7> when 'true' ->
	      %% Line 1980
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'no_dupl',2}}] )
	    -| ['compiler_generated'] )
	end
'is_app_type'/1 =
    %% Line 1982
    fun (_cor0) ->
	case _cor0 of
	  <'permanent'> when 'true' ->
	      'true'
	  %% Line 1983
	  <'transient'> when 'true' ->
	      'true'
	  %% Line 1984
	  <'temporary'> when 'true' ->
	      'true'
	  %% Line 1985
	  <'none'> when 'true' ->
	      'true'
	  %% Line 1986
	  <'load'> when 'true' ->
	      'true'
	  %% Line 1987
	  <_cor2> when 'true' ->
	      'false'
	end
'string_p'/1 =
    %% Line 1991
    fun (_cor0) ->
	%% Line 1992
	case call 'unicode':'characters_to_list'
		 (_cor0) of
	  %% Line 1993
	  <_cor3>
	      when call 'erlang':'=:='
		    (_cor3,
		     _cor0) ->
	      'true'
	  %% Line 1994
	  <_cor4> when 'true' ->
	      'false'
	end
't_list_p'/1 =
    %% Line 2000
    fun (_cor0) ->
	case _cor0 of
	  <[{A,_cor2}|T]>
	      when call 'erlang':'is_atom'
		    (A) ->
	      apply 't_list_p'/1
		  (T)
	  %% Line 2001
	  <[]> when 'true' ->
	      'true'
	  %% Line 2002
	  <_cor3> when 'true' ->
	      'false'
	end
'a_list_p'/1 =
    %% Line 2006
    fun (_cor0) ->
	case _cor0 of
	  <[A|T]>
	      when call 'erlang':'is_atom'
		    (A) ->
	      apply 'a_list_p'/1
		  (T)
	  %% Line 2007
	  <[]> when 'true' ->
	      'true'
	  %% Line 2008
	  <_cor2> when 'true' ->
	      'false'
	end
'get_flag'/2 =
    %% Line 2012
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <F,[{_cor4,D}|_cor5]>
	      when call 'erlang':'=:='
		    (_cor4,
		     F) ->
	      {F,D}
	  %% Line 2013
	  <F,[_cor6|Fs]> when 'true' ->
	      apply 'get_flag'/2
		  (F, Fs)
	  %% Line 2014
	  <_cor7,_cor8> when 'true' ->
	      'false'
	end
'check_args_script'/1 =
    %% Line 2017
    fun (_cor0) ->
	%% Line 2018
	apply 'cas'/2
	    (_cor0, [])
'cas'/2 =
    %% Line 2020
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],X> when 'true' ->
	      %% Line 2021
	      X
	  %% Line 2023
	  <[{'path',P}|Args],X>
	      when call 'erlang':'is_list'
		    (P) ->
	      %% Line 2024
	      case apply 'check_path'/1
		       (P) of
		%% Line 2025
		<'ok'> when 'true' ->
		    %% Line 2026
		    apply 'cas'/2
			(Args, X)
		%% Line 2027
		<'error'> when 'true' ->
		    let <_cor2> =
			%% Line 2028
			call 'erlang':'++'
			    (X, [{'path',P}|[]])
		    in  %% Line 2028
			apply 'cas'/2
			    (Args, _cor2)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2031
	  <['silent'|Args],X> when 'true' ->
	      %% Line 2032
	      apply 'cas'/2
		  (Args, X)
	  %% Line 2034
	  <['local'|Args],X> when 'true' ->
	      %% Line 2035
	      apply 'cas'/2
		  (Args, X)
	  %% Line 2037
	  <['src_tests'|Args],X> when 'true' ->
	      %% Line 2038
	      apply 'cas'/2
		  (Args, X)
	  %% Line 2040
	  <[{'variables',V}|Args],X>
	      when call 'erlang':'is_list'
		    (V) ->
	      %% Line 2041
	      case apply 'check_vars'/1
		       (V) of
		%% Line 2042
		<'ok'> when 'true' ->
		    %% Line 2043
		    apply 'cas'/2
			(Args, X)
		%% Line 2044
		<'error'> when 'true' ->
		    let <_cor4> =
			%% Line 2045
			call 'erlang':'++'
			    (X, [{'variables',V}|[]])
		    in  %% Line 2045
			apply 'cas'/2
			    (Args, _cor4)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2048
	  <[{'machine',M}|Args],X>
	      when call 'erlang':'is_atom'
		    (M) ->
	      %% Line 2049
	      apply 'cas'/2
		  (Args, X)
	  %% Line 2051
	  <['exref'|Args],X> when 'true' ->
	      %% Line 2052
	      apply 'cas'/2
		  (Args, X)
	  %% Line 2054
	  <[{'exref',Apps}|Args],X>
	      when call 'erlang':'is_list'
		    (Apps) ->
	      %% Line 2055
	      case apply 'check_apps'/1
		       (Apps) of
		%% Line 2056
		<'ok'> when 'true' ->
		    %% Line 2057
		    apply 'cas'/2
			(Args, X)
		%% Line 2058
		<'error'> when 'true' ->
		    let <_cor6> =
			%% Line 2059
			call 'erlang':'++'
			    (X, [{'exref',Apps}|[]])
		    in  %% Line 2059
			apply 'cas'/2
			    (Args, _cor6)
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2062
	  <[{'outdir',Dir}|Args],X>
	      when call 'erlang':'is_list'
		    (Dir) ->
	      %% Line 2063
	      apply 'cas'/2
		  (Args, X)
	  %% Line 2065
	  <['otp_build'|Args],X> when 'true' ->
	      %% Line 2066
	      apply 'cas'/2
		  (Args, X)
	  %% Line 2068
	  <['warnings_as_errors'|Args],X> when 'true' ->
	      %% Line 2069
	      apply 'cas'/2
		  (Args, X)
	  %% Line 2071
	  <['no_warn_sasl'|Args],X> when 'true' ->
	      %% Line 2072
	      apply 'cas'/2
		  (Args, X)
	  %% Line 2074
	  <['no_module_tests'|Args],X> when 'true' ->
	      %% Line 2075
	      apply 'cas'/2
		  (Args, X)
	  %% Line 2076
	  <['no_dot_erlang'|Args],X> when 'true' ->
	      %% Line 2077
	      apply 'cas'/2
		  (Args, X)
	  %% Line 2080
	  <[Y|Args],X> when 'true' ->
	      let <_cor8> =
		  %% Line 2081
		  call 'erlang':'++'
		      (X, [Y|[]])
	      in  %% Line 2081
		  apply 'cas'/2
		      (Args, _cor8)
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'cas',2}}] )
	    -| ['compiler_generated'] )
	end
'check_args_tar'/1 =
    %% Line 2086
    fun (_cor0) ->
	%% Line 2087
	apply 'cat'/2
	    (_cor0, {'undef','undef','undef','undef','undef','undef','undef','undef','undef','undef',[]})
'cat'/2 =
    %% Line 2089
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],{_X_Path,_X_Sil,_X_Dirs,_X_Erts,_X_Test,_X_Var,_X_VarTar,_X_Mach,_X_Xref,_X_XrefApps,X}> when 'true' ->
	      %% Line 2090
	      X
	  %% Line 2092
	  <[{'path',P}|Args],{Path,Sil,Dirs,Erts,Test,%% Line 2093
						      Var,%% Line 2093
							  VarTar,%% Line 2093
								 Mach,%% Line 2093
								      Xref,%% Line 2093
									   XrefApps,%% Line 2093
										    X}>
	      when %% Line 2093
		call 'erlang':'is_list'
		    (P) ->
	      %% Line 2094
	      case apply 'check_path'/1
		       (P) of
		%% Line 2095
		<'ok'> when 'true' ->
		    %% Line 2096
		    apply 'cat'/2
			(Args, {P,Sil,Dirs,Erts,Test,Var,VarTar,Mach,Xref,XrefApps,X})
		%% Line 2097
		<'error'> when 'true' ->
		    let <_cor2> =
			%% Line 2099
			call 'erlang':'++'
			    (X, [{'path',P}|[]])
		    in  %% Line 2098
			apply 'cat'/2
			    (Args, {Path,Sil,Dirs,Erts,Test,%% Line 2099
							    Var,%% Line 2099
								VarTar,%% Line 2099
								       Mach,%% Line 2099
									    Xref,%% Line 2099
										 XrefApps,_cor2})
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2102
	  <['silent'|Args],{Path,_X_Sil,Dirs,Erts,Test,Var,VarTar,Mach,Xref,XrefApps,X}> when 'true' ->
	      %% Line 2103
	      apply 'cat'/2
		  (Args, {Path,'silent',Dirs,Erts,Test,Var,VarTar,Mach,Xref,XrefApps,X})
	  %% Line 2105
	  <[{'dirs',D}|Args],{Path,Sil,Dirs,Erts,Test,%% Line 2106
						      Var,%% Line 2106
							  VarTar,%% Line 2106
								 Mach,%% Line 2106
								      Xref,%% Line 2106
									   XrefApps,%% Line 2106
										    X}> when 'true' ->
	      %% Line 2107
	      case apply 'check_dirs'/1
		       (D) of
		%% Line 2108
		<'ok'> when 'true' ->
		    %% Line 2109
		    apply 'cat'/2
			(Args, {Path,Sil,D,Erts,Test,Var,VarTar,Mach,Xref,XrefApps,X})
		%% Line 2110
		<'error'> when 'true' ->
		    let <_cor4> =
			%% Line 2112
			call 'erlang':'++'
			    (X, [{'dirs',D}|[]])
		    in  %% Line 2111
			apply 'cat'/2
			    (Args, {Path,Sil,Dirs,Erts,Test,%% Line 2112
							    Var,%% Line 2112
								VarTar,%% Line 2112
								       Mach,%% Line 2112
									    Xref,%% Line 2112
										 XrefApps,_cor4})
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2115
	  <[{'erts',E}|Args],{Path,Sil,Dirs,_X_Erts,Test,%% Line 2116
							 Var,%% Line 2116
							     VarTar,%% Line 2116
								    Mach,%% Line 2116
									 Xref,%% Line 2116
									      XrefApps,%% Line 2116
										       X}>
	      when %% Line 2116
		call 'erlang':'is_list'
		    (E) ->
	      %% Line 2117
	      apply 'cat'/2
		  (Args, {Path,Sil,Dirs,E,Test,Var,VarTar,Mach,Xref,XrefApps,X})
	  %% Line 2119
	  <['src_tests'|Args],{Path,Sil,Dirs,Erts,_X_Test,Var,VarTar,Mach,Xref,XrefApps,X}> when 'true' ->
	      %% Line 2120
	      apply 'cat'/2
		  (Args, {Path,Sil,Dirs,Erts,'src_tests',Var,VarTar,Mach,%% Line 2121
									 Xref,%% Line 2121
									      XrefApps,%% Line 2121
										       X})
	  %% Line 2123
	  <[{'variables',V}|Args],{Path,Sil,Dirs,Erts,Test,Var,VarTar,Mach,Xref,XrefApps,X}>
	      when call 'erlang':'is_list'
		    (V) ->
	      %% Line 2124
	      case apply 'check_vars'/1
		       (V) of
		%% Line 2125
		<'ok'> when 'true' ->
		    %% Line 2126
		    apply 'cat'/2
			(Args, {Path,Sil,Dirs,Erts,Test,V,VarTar,Mach,Xref,XrefApps,X})
		%% Line 2127
		<'error'> when 'true' ->
		    let <_cor6> =
			%% Line 2129
			call 'erlang':'++'
			    (X, [{'variables',V}|[]])
		    in  %% Line 2128
			apply 'cat'/2
			    (Args, {Path,Sil,Dirs,Erts,Test,Var,VarTar,Mach,%% Line 2129
									    Xref,%% Line 2129
										 XrefApps,_cor6})
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2132
	  <[{'var_tar',VT}|Args],{Path,Sil,Dirs,Erts,Test,%% Line 2133
							  Var,%% Line 2133
							      _X_VarTar,%% Line 2133
									Mach,%% Line 2133
									     Xref,%% Line 2133
										  XrefApps,%% Line 2133
											   X}>
	      when %% Line 2133
		call 'erlang':'=:='
		    (VT,
		     'include') ->
	      %% Line 2134
	      apply 'cat'/2
		  (Args, {Path,Sil,Dirs,Erts,Test,Var,'include',Mach,Xref,XrefApps,X})
	  %% Line 2135
	  <[{'var_tar',VT}|Args],{Path,Sil,Dirs,Erts,Test,%% Line 2136
							  Var,%% Line 2136
							      _X_VarTar,%% Line 2136
									Mach,%% Line 2136
									     Xref,%% Line 2136
										  XrefApps,%% Line 2136
											   X}>
	      when %% Line 2136
		call 'erlang':'=:='
		    (VT,
		     'ownfile') ->
	      %% Line 2137
	      apply 'cat'/2
		  (Args, {Path,Sil,Dirs,Erts,Test,Var,'ownfile',Mach,Xref,XrefApps,X})
	  %% Line 2138
	  <[{'var_tar',VT}|Args],{Path,Sil,Dirs,Erts,Test,%% Line 2139
							  Var,%% Line 2139
							      _X_VarTar,%% Line 2139
									Mach,%% Line 2139
									     Xref,%% Line 2139
										  XrefApps,%% Line 2139
											   X}>
	      when %% Line 2139
		call 'erlang':'=:='
		    (VT,
		     'omit') ->
	      %% Line 2140
	      apply 'cat'/2
		  (Args, {Path,Sil,Dirs,Erts,Test,Var,'omit',Mach,Xref,XrefApps,X})
	  %% Line 2142
	  <[{'machine',M}|Args],{Path,Sil,Dirs,Erts,Test,%% Line 2143
							 Var,%% Line 2143
							     VarTar,%% Line 2143
								    Mach,%% Line 2143
									 Xref,%% Line 2143
									      XrefApps,%% Line 2143
										       X}>
	      when %% Line 2143
		call 'erlang':'is_atom'
		    (M) ->
	      %% Line 2144
	      apply 'cat'/2
		  (Args, {Path,Sil,Dirs,Erts,Test,Var,VarTar,Mach,Xref,XrefApps,X})
	  %% Line 2146
	  <['exref'|Args],{Path,Sil,Dirs,Erts,Test,Var,VarTar,Mach,_X_Xref,XrefApps,X}> when 'true' ->
	      %% Line 2147
	      apply 'cat'/2
		  (Args, {Path,Sil,Dirs,Erts,Test,Var,VarTar,Mach,'exref',XrefApps,X})
	  %% Line 2149
	  <[{'exref',Apps}|Args],{Path,Sil,Dirs,Erts,Test,Var,VarTar,Mach,Xref,XrefApps,X}>
	      when call 'erlang':'is_list'
		    (Apps) ->
	      %% Line 2150
	      case apply 'check_apps'/1
		       (Apps) of
		%% Line 2151
		<'ok'> when 'true' ->
		    %% Line 2152
		    apply 'cat'/2
			(Args, {Path,Sil,Dirs,Erts,Test,Var,VarTar,Mach,%% Line 2153
									Xref,%% Line 2153
									     Apps,%% Line 2153
										  X})
		%% Line 2154
		<'error'> when 'true' ->
		    let <_cor8> =
			%% Line 2156
			call 'erlang':'++'
			    (X, [{'exref',Apps}|[]])
		    in  %% Line 2155
			apply 'cat'/2
			    (Args, {Path,Sil,Dirs,Erts,Test,Var,VarTar,Mach,%% Line 2156
									    Xref,%% Line 2156
										 XrefApps,_cor8})
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2159
	  <[{'outdir',Dir}|Args],{Path,Sil,Dirs,Erts,Test,Var,VarTar,Mach,Xref,XrefApps,X}>
	      when call 'erlang':'is_list'
		    (Dir) ->
	      %% Line 2160
	      apply 'cat'/2
		  (Args, {Path,Sil,Dirs,Erts,Test,Var,VarTar,Mach,%% Line 2161
								  Xref,%% Line 2161
								       XrefApps,%% Line 2161
										X})
	  %% Line 2163
	  <['otp_build'|Args],{Path,Sil,Dirs,Erts,Test,Var,VarTar,Mach,Xref,XrefApps,X}> when 'true' ->
	      %% Line 2164
	      apply 'cat'/2
		  (Args, {Path,Sil,Dirs,Erts,Test,Var,VarTar,Mach,Xref,XrefApps,X})
	  %% Line 2166
	  <['no_module_tests'|Args],{Path,Sil,Dirs,Erts,Test,Var,VarTar,Mach,Xref,XrefApps,X}> when 'true' ->
	      %% Line 2167
	      apply 'cat'/2
		  (Args, {Path,Sil,Dirs,Erts,Test,Var,VarTar,Mach,Xref,XrefApps,X})
	  %% Line 2169
	  <[Y|Args],{Path,Sil,Dirs,Erts,Test,Var,VarTar,Mach,Xref,XrefApps,X}> when 'true' ->
	      let <_cor10> =
		  %% Line 2170
		  call 'erlang':'++'
		      (X, [Y|[]])
	      in  %% Line 2170
		  apply 'cat'/2
		      (Args, {Path,Sil,Dirs,Erts,Test,Var,VarTar,Mach,Xref,XrefApps,_cor10})
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11})
		  -| [{'function_name',{'cat',2}}] )
	    -| ['compiler_generated'] )
	end
'check_path'/1 =
    %% Line 2172
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 2173
	      'ok'
	  %% Line 2174
	  <[H|T]>
	      when call 'erlang':'is_list'
		    (H) ->
	      %% Line 2175
	      apply 'check_path'/1
		  (T)
	  %% Line 2176
	  <[_X_H|_X_T]> when 'true' ->
	      %% Line 2177
	      'error'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'check_path',1}}] )
	    -| ['compiler_generated'] )
	end
'check_dirs'/1 =
    %% Line 2179
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 2180
	      'ok'
	  %% Line 2181
	  <[H|T]>
	      when call 'erlang':'is_atom'
		    (H) ->
	      %% Line 2182
	      apply 'check_dirs'/1
		  (T)
	  %% Line 2183
	  <[_X_H|_X_T]> when 'true' ->
	      %% Line 2184
	      'error'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'check_dirs',1}}] )
	    -| ['compiler_generated'] )
	end
'check_vars'/1 =
    %% Line 2186
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 2187
	      'ok'
	  %% Line 2188
	  <[{Name,Dir}|T]> when 'true' ->
	      %% Line 2189
	      case <> of
		%% Line 2190
		<>
		    when let <_cor1> =
			  call 'erlang':'is_atom'
			      (Name)
		      in  let <_cor2> =
			      call 'erlang':'is_list'
				  (Dir)
			  in  call 'erlang':'and'
				  (_cor1, _cor2) ->
		    %% Line 2191
		    apply 'check_vars'/1
			(T)
		%% Line 2192
		<>
		    when let <_cor3> =
			  call 'erlang':'is_list'
			      (Name)
		      in  let <_cor4> =
			      call 'erlang':'is_list'
				  (Dir)
			  in  call 'erlang':'and'
				  (_cor3, _cor4) ->
		    %% Line 2193
		    apply 'check_vars'/1
			(T)
		%% Line 2194
		<> when 'true' ->
		    %% Line 2195
		    'error'
	      end
	  %% Line 2197
	  <_cor6> when 'true' ->
	      %% Line 2198
	      'error'
	end
'check_apps'/1 =
    %% Line 2200
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 2201
	      'ok'
	  %% Line 2202
	  <[H|T]>
	      when call 'erlang':'is_atom'
		    (H) ->
	      %% Line 2203
	      apply 'check_apps'/1
		  (T)
	  %% Line 2204
	  <_cor2> when 'true' ->
	      %% Line 2205
	      'error'
	end
'format_error'/1 =
    %% Line 2209
    fun (_cor0) ->
	case _cor0 of
	  <'badly_formatted_release'> when 'true' ->
	      %% Line 2210
	      call 'io_lib':'format'
		  ([83|[121|[110|[116|[97|[120|[32|[101|[114|[114|[111|[114|[32|[105|[110|[32|[116|[104|[101|[32|[114|[101|[108|[101|[97|[115|[101|[32|[102|[105|[108|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
	  %% Line 2211
	  <{'illegal_name',Name}> when 'true' ->
	      %% Line 2212
	      call 'io_lib':'format'
		  ([73|[108|[108|[101|[103|[97|[108|[32|[110|[97|[109|[101|[32|[40|[126|[112|[41|[32|[105|[110|[32|[116|[104|[101|[32|[114|[101|[108|[101|[97|[115|[101|[32|[102|[105|[108|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Name|[]])
	  %% Line 2213
	  <{'illegal_form',Form}> when 'true' ->
	      %% Line 2214
	      call 'io_lib':'format'
		  ([73|[108|[108|[101|[103|[97|[108|[32|[116|[97|[103|[32|[105|[110|[32|[116|[104|[101|[32|[114|[101|[108|[101|[97|[115|[101|[32|[102|[105|[108|[101|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Form|[]])
	  %% Line 2215
	  <{'missing_parameter',Par}> when 'true' ->
	      %% Line 2216
	      call 'io_lib':'format'
		  ([77|[105|[115|[115|[105|[110|[103|[32|[112|[97|[114|[97|[109|[101|[116|[101|[114|[32|[40|[126|[112|[41|[32|[105|[110|[32|[116|[104|[101|[32|[114|[101|[108|[101|[97|[115|[101|[32|[102|[105|[108|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Par|[]])
	  %% Line 2217
	  <{'illegal_applications',Names}> when 'true' ->
	      %% Line 2218
	      call 'io_lib':'format'
		  ([73|[108|[108|[101|[103|[97|[108|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[115|[32|[105|[110|[32|[116|[104|[101|[32|[114|[101|[108|[101|[97|[115|[101|[32|[102|[105|[108|[101|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2219
																																			   [Names|[]])
	  %% Line 2220
	  <{'missing_mandatory_app',Name}> when 'true' ->
	      %% Line 2221
	      call 'io_lib':'format'
		  ([77|[97|[110|[100|[97|[116|[111|[114|[121|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[126|[119|[32|[109|[117|[115|[116|[32|[98|[101|[32|[115|[112|[101|[99|[105|[102|[105|[101|[100|[32|[105|[110|[32|[116|[104|[101|[32|[114|[101|[108|[101|[97|[115|[101|[32|[102|[105|[108|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2222
																																																  [Name|[]])
	  %% Line 2223
	  <{'mandatory_app',Name,Type}> when 'true' ->
	      %% Line 2224
	      call 'io_lib':'format'
		  ([77|[97|[110|[100|[97|[116|[111|[114|[121|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[126|[119|[32|[109|[117|[115|[116|[32|[98|[101|[32|[111|[102|[32|[116|[121|[112|[101|[32|[39|[112|[101|[114|[109|[97|[110|[101|[110|[116|[39|[32|[105|[110|[32|[116|[104|[101|[32|[114|[101|[108|[101|[97|[115|[101|[32|[102|[105|[108|[101|[46|[32|[73|[115|[32|[39|[126|[112|[39|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2225
																																																													       [Name|[Type|[]]])
	  %% Line 2226
	  <{'duplicate_register',Dups}> when 'true' ->
	      let <_cor3> =
		  %% Line 2228
		  ( fun (_cor1) ->
			case _cor1 of
			  <{{Reg,App1,_cor18,_cor19},{_cor20,App2,_cor21,_cor22}}>
			      when call 'erlang':'=:='
				    (_cor20,
				     Reg) ->
			      %% Line 2229
			      call 'io_lib':'format'
				  ([9|[126|[119|[32|[114|[101|[103|[105|[115|[116|[101|[114|[101|[100|[32|[105|[110|[32|[126|[119|[32|[97|[110|[100|[32|[126|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2230
																									  [Reg|[App1|[App2|[]]]])
			  ( <_cor2> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor2})
				  -| [{'function_name',{'-format_error/1-fun-0-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-format_error/1-fun-0-'}}] )
	      in  let <_cor4> =
		      %% Line 2228
		      call 'lists':'map'
			  (_cor3, %% Line 2231
				  Dups)
		  in  %% Line 2227
		      call 'io_lib':'format'
			  ([68|[117|[112|[108|[105|[99|[97|[116|[101|[100|[32|[114|[101|[103|[105|[115|[116|[101|[114|[32|[110|[97|[109|[101|[115|[58|[32|[126|[110|[126|[116|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2228
																										    [_cor4|%% Line 2231
																											   []])
	  %% Line 2232
	  <{'undefined_applications',Apps}> when 'true' ->
	      %% Line 2233
	      call 'io_lib':'format'
		  ([85|[110|[100|[101|[102|[105|[110|[101|[100|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[115|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Apps|[]])
	  %% Line 2234
	  <{'duplicate_modules',Dups}> when 'true' ->
	      let <_cor7> =
		  %% Line 2236
		  ( fun (_cor5) ->
			case _cor5 of
			  <{{Mod,App1,_cor23},{_cor24,App2,_cor25}}>
			      when call 'erlang':'=:='
				    (_cor24,
				     Mod) ->
			      %% Line 2237
			      call 'io_lib':'format'
				  ([9|[126|[119|[32|[115|[112|[101|[99|[105|[102|[105|[101|[100|[32|[105|[110|[32|[126|[119|[32|[97|[110|[100|[32|[126|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2238
																								   [Mod|[App1|[App2|[]]]])
			  ( <_cor6> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor6})
				  -| [{'function_name',{'-format_error/1-fun-1-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-format_error/1-fun-1-'}}] )
	      in  let <_cor8> =
		      %% Line 2236
		      call 'lists':'map'
			  (_cor7, %% Line 2239
				  Dups)
		  in  %% Line 2235
		      call 'io_lib':'format'
			  ([68|[117|[112|[108|[105|[99|[97|[116|[101|[100|[32|[109|[111|[100|[117|[108|[101|[115|[58|[32|[126|[110|[126|[116|[115]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2236
																					    [_cor8|%% Line 2239
																						   []])
	  %% Line 2240
	  <{'included_and_used',Dups}> when 'true' ->
	      %% Line 2241
	      call 'io_lib':'format'
		  ([65|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[115|[32|[98|[111|[116|[104|[32|[117|[115|[101|[100|[32|[97|[110|[100|[32|[105|[110|[99|[108|[117|[100|[101|[100|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Dups|[]])
	  %% Line 2242
	  <{'duplicate_include',Dups}> when 'true' ->
	      let <_cor11> =
		  %% Line 2244
		  ( fun (_cor9) ->
			case _cor9 of
			  <{{Name,App1,_cor26,_cor27},{_cor28,App2,_cor29,_cor30}}>
			      when call 'erlang':'=:='
				    (_cor28,
				     Name) ->
			      %% Line 2245
			      call 'io_lib':'format'
				  ([9|[126|[119|[32|[105|[110|[99|[108|[117|[100|[101|[100|[32|[105|[110|[32|[126|[119|[32|[97|[110|[100|[32|[126|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2246
																							     [Name|[App1|[App2|[]]]])
			  ( <_cor10> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor10})
				  -| [{'function_name',{'-format_error/1-fun-2-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-format_error/1-fun-2-'}}] )
	      in  let <_cor12> =
		      %% Line 2244
		      call 'lists':'map'
			  (_cor11, %% Line 2247
				   Dups)
		  in  %% Line 2243
		      call 'io_lib':'format'
			  ([68|[117|[112|[108|[105|[99|[97|[116|[101|[100|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[105|[110|[99|[108|[117|[100|[101|[100|[58|[32|[126|[110|[126|[116|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2244
																														     [_cor12|%% Line 2247
																															     []])
	  %% Line 2248
	  <{'modules',ModErrs}> when 'true' ->
	      %% Line 2249
	      apply 'format_errors'/1
		  (ModErrs)
	  %% Line 2250
	  <{'circular_dependencies',Apps}> when 'true' ->
	      %% Line 2251
	      call 'io_lib':'format'
		  ([67|[105|[114|[99|[117|[108|[97|[114|[32|[100|[101|[112|[101|[110|[100|[101|[110|[99|[105|[101|[115|[32|[97|[109|[111|[110|[103|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[115|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Apps|[]])
	  %% Line 2252
	  <{'not_found',File}> when 'true' ->
	      %% Line 2253
	      call 'io_lib':'format'
		  ([70|[105|[108|[101|[32|[110|[111|[116|[32|[102|[111|[117|[110|[100|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]], [File|[]])
	  %% Line 2254
	  <{'parse',File,{Line,Mod,What}}> when 'true' ->
	      let <Str> =
		  %% Line 2255
		  call Mod:'format_error'
		      (What)
	      in  %% Line 2256
		  call 'io_lib':'format'
		      ([126|[116|[115|[58|[126|[119|[58|[32|[126|[116|[115|[10]]]]]]]]]]]], [File|[Line|[Str|[]]]])
	  %% Line 2257
	  <{'read',File}> when 'true' ->
	      %% Line 2258
	      call 'io_lib':'format'
		  ([67|[97|[110|[110|[111|[116|[32|[114|[101|[97|[100|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]], [File|[]])
	  %% Line 2259
	  <{'open',File,Error}> when 'true' ->
	      let <_cor14> =
		  %% Line 2261
		  call 'file':'format_error'
		      (Error)
	      in  %% Line 2260
		  call 'io_lib':'format'
		      ([67|[97|[110|[110|[111|[116|[32|[111|[112|[101|[110|[32|[126|[112|[32|[45|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]], %% Line 2261
																		     [File|[_cor14|[]]])
	  %% Line 2262
	  <{'close',File,Error}> when 'true' ->
	      let <_cor15> =
		  %% Line 2264
		  call 'file':'format_error'
		      (Error)
	      in  %% Line 2263
		  call 'io_lib':'format'
		      ([67|[97|[110|[110|[111|[116|[32|[99|[108|[111|[115|[101|[32|[126|[112|[32|[45|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]], %% Line 2264
																			  [File|[_cor15|[]]])
	  %% Line 2265
	  <{'delete',File,Error}> when 'true' ->
	      let <_cor16> =
		  %% Line 2267
		  call 'file':'format_error'
		      (Error)
	      in  %% Line 2266
		  call 'io_lib':'format'
		      ([67|[97|[110|[110|[111|[116|[32|[100|[101|[108|[101|[116|[101|[32|[126|[112|[32|[45|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2267
																				 [File|[_cor16|[]]])
	  %% Line 2268
	  <{'tar_error',What}> when 'true' ->
	      %% Line 2269
	      apply 'form_tar_err'/1
		  (What)
	  %% Line 2270
	  <ListOfErrors>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      %% Line 2271
	      apply 'format_errors'/1
		  (ListOfErrors)
	  %% Line 2272
	  <E> when 'true' ->
	      call 'io_lib':'format'
		  ([126|[112|[126|[110]]]], [E|[]])
	end
'format_errors'/1 =
    %% Line 2274
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 2275
	    ( fun (_cor1) ->
		  case _cor1 of
		    <{'error',E}> when 'true' ->
			apply 'form_err'/1
			    (E)
		    %% Line 2276
		    <E> when 'true' ->
			apply 'form_err'/1
			    (E)
		  end
	      -| [{'id',{0,0,'-format_errors/1-fun-0-'}}] )
	in  %% Line 2275
	    call 'lists':'map'
		(_cor3, _cor0)
'form_err'/1 =
    %% Line 2279
    fun (_cor0) ->
	case _cor0 of
	  <{'bad_application_name',{Name,Found}}> when 'true' ->
	      %% Line 2280
	      call 'io_lib':'format'
		  ([126|[112|[58|[32|[77|[105|[115|[109|[97|[116|[99|[104|[101|[100|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[105|[100|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Name|[Found|[]]])
	  %% Line 2281
	  <{'error_reading',{Name,What}}> when 'true' ->
	      let <_cor1> =
		  %% Line 2282
		  apply 'form_reading'/1
		      (What)
	      in  %% Line 2282
		  call 'io_lib':'format'
		      ([126|[112|[58|[32|[126|[116|[115|[126|[110]]]]]]]]], [Name|[_cor1|[]]])
	  %% Line 2283
	  <{'module_not_found',App,Mod}> when 'true' ->
	      %% Line 2284
	      call 'io_lib':'format'
		  ([126|[119|[58|[32|[77|[111|[100|[117|[108|[101|[32|[40|[126|[119|[41|[32|[110|[111|[116|[32|[102|[111|[117|[110|[100|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]], [App|[Mod|[]]])
	  %% Line 2285
	  <{'error_add_appl',{Name,{'tar_error',What}}}> when 'true' ->
	      let <_cor2> =
		  %% Line 2286
		  apply 'form_tar_err'/1
		      (What)
	      in  %% Line 2286
		  call 'io_lib':'format'
		      ([126|[112|[58|[32|[126|[116|[115|[126|[110]]]]]]]]], [Name|[_cor2|[]]])
	  %% Line 2287
	  <E> when 'true' ->
	      %% Line 2288
	      call 'io_lib':'format'
		  ([126|[112|[126|[110]]]], [E|[]])
	end
'form_reading'/1 =
    %% Line 2290
    fun (_cor0) ->
	case _cor0 of
	  <{'not_found',File}> when 'true' ->
	      %% Line 2291
	      call 'io_lib':'format'
		  ([70|[105|[108|[101|[32|[110|[111|[116|[32|[102|[111|[117|[110|[100|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]], [File|[]])
	  %% Line 2292
	  <{'application_vsn',{Name,Vsn}}> when 'true' ->
	      %% Line 2293
	      call 'io_lib':'format'
		  ([65|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[126|[116|[115|[32|[119|[105|[116|[104|[32|[118|[101|[114|[115|[105|[111|[110|[32|[126|[112|[32|[110|[111|[116|[32|[102|[111|[117|[110|[100|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Name|[Vsn|[]]])
	  %% Line 2294
	  <{'parse',File,{Line,Mod,What}}> when 'true' ->
	      let <Str> =
		  %% Line 2295
		  call Mod:'format_error'
		      (What)
	      in  %% Line 2296
		  call 'io_lib':'format'
		      ([126|[116|[115|[58|[126|[119|[58|[32|[126|[116|[115|[10]]]]]]]]]]]], [File|[Line|[Str|[]]]])
	  %% Line 2297
	  <{'read',File}> when 'true' ->
	      %% Line 2298
	      call 'io_lib':'format'
		  ([67|[97|[110|[110|[111|[116|[32|[114|[101|[97|[100|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]], [File|[]])
	  %% Line 2299
	  <{{'bad_param',P},_cor3}> when 'true' ->
	      %% Line 2300
	      call 'io_lib':'format'
		  ([66|[97|[100|[32|[112|[97|[114|[97|[109|[101|[116|[101|[114|[32|[105|[110|[32|[46|[97|[112|[112|[32|[102|[105|[108|[101|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [P|[]])
	  %% Line 2301
	  <{{'missing_param',P},_cor4}> when 'true' ->
	      %% Line 2302
	      call 'io_lib':'format'
		  ([77|[105|[115|[115|[105|[110|[103|[32|[112|[97|[114|[97|[109|[101|[116|[101|[114|[32|[105|[110|[32|[46|[97|[112|[112|[32|[102|[105|[108|[101|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [P|[]])
	  %% Line 2303
	  <{'badly_formatted_application',_cor5}> when 'true' ->
	      %% Line 2304
	      call 'io_lib':'format'
		  ([83|[121|[110|[116|[97|[120|[32|[101|[114|[114|[111|[114|[32|[105|[110|[32|[46|[97|[112|[112|[32|[102|[105|[108|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]], [])
	  %% Line 2305
	  <{'override_include',Apps}> when 'true' ->
	      %% Line 2306
	      call 'io_lib':'format'
		  ([84|[114|[105|[101|[100|[32|[116|[111|[32|[105|[110|[99|[108|[117|[100|[101|[32|[110|[111|[116|[32|[40|[105|[110|[32|[46|[97|[112|[112|[32|[102|[105|[108|[101|[41|[32|[115|[112|[101|[99|[105|[102|[105|[101|[100|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[115|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2307
																																																[Apps|[]])
	  %% Line 2308
	  <{'no_valid_version',{{_cor6,SVsn},{_cor7,File,FVsn}}}> when 'true' ->
	      %% Line 2309
	      call 'io_lib':'format'
		  ([78|[111|[32|[118|[97|[108|[105|[100|[32|[118|[101|[114|[115|[105|[111|[110|[32|[40|[126|[112|[41|[32|[111|[102|[32|[46|[97|[112|[112|[32|[102|[105|[108|[101|[32|[102|[111|[117|[110|[100|[46|[32|[70|[111|[117|[110|[100|[32|[102|[105|[108|[101|[32|[126|[112|[32|[119|[105|[116|[104|[32|[118|[101|[114|[115|[105|[111|[110|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2310
																																																						     [SVsn|[File|[FVsn|[]]]])
	  %% Line 2311
	  <{'parse_error',{File,Line,Error}}> when 'true' ->
	      %% Line 2312
	      call 'io_lib':'format'
		  ([80|[97|[114|[115|[101|[32|[101|[114|[114|[111|[114|[32|[105|[110|[32|[102|[105|[108|[101|[58|[32|[126|[112|[46|[32|[32|[76|[105|[110|[101|[58|[32|[126|[119|[32|[32|[69|[114|[114|[111|[114|[58|[32|[126|[112|[59|[32|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [File|[Line|[Error|[]]]])
	  %% Line 2313
	  <W> when 'true' ->
	      %% Line 2314
	      call 'io_lib':'format'
		  ([126|[112|[126|[110]]]], [W|[]])
	end
'form_tar_err'/1 =
    %% Line 2316
    fun (_cor0) ->
	case _cor0 of
	  <{'open',File,Error}> when 'true' ->
	      let <_cor1> =
		  %% Line 2318
		  call 'erl_tar':'format_error'
		      (Error)
	      in  %% Line 2317
		  call 'io_lib':'format'
		      ([67|[97|[110|[110|[111|[116|[32|[111|[112|[101|[110|[32|[116|[97|[114|[32|[102|[105|[108|[101|[32|[126|[116|[115|[32|[45|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2318
																									      [File|[_cor1|[]]])
	  %% Line 2319
	  <{'add',File,Error}> when 'true' ->
	      let <_cor2> =
		  %% Line 2321
		  call 'erl_tar':'format_error'
		      (Error)
	      in  %% Line 2320
		  call 'io_lib':'format'
		      ([67|[97|[110|[110|[111|[116|[32|[97|[100|[100|[32|[102|[105|[108|[101|[32|[126|[116|[115|[32|[116|[111|[32|[116|[97|[114|[32|[102|[105|[108|[101|[32|[45|[32|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2321
																														     [File|[_cor2|[]]])
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'form_tar_err',1}}] )
	    -| ['compiler_generated'] )
	end
'format_warning'/1 =
    %% Line 2325
    fun (_cor0) ->
	%% Line 2326
	apply 'format_warning'/2
	    (_cor0, 'false')
'format_warning'/2 =
    %% Line 2328
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 2329
	    case _cor0 of
	      %% Line 2330
	      <'true'> when 'true' ->
		  %% Line 2331
		  []
	      %% Line 2332
	      <'false'> when 'true' ->
		  %% Line 2333
		  [42|[87|[65|[82|[78|[73|[78|[71|[42|[32]]]]]]]]]]
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
	in  let <_cor7> =
		%% Line 2335
		( fun (_cor5) ->
		      case _cor5 of
			<{'warning',W}> when 'true' ->
			    apply 'form_warn'/2
				(_cor3, W)
			( <_cor6> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor6})
				-| [{'function_name',{'-format_warning/2-fun-0-',1}}] )
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-format_warning/2-fun-0-'}}] )
	    in  %% Line 2335
		call 'lists':'map'
		    (_cor7, _cor1)
'form_warn'/2 =
    %% Line 2337
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Prefix,{'source_not_found',{Mod,_cor7,App,_cor8,_cor9}}> when 'true' ->
	      %% Line 2338
	      call 'io_lib':'format'
		  ([126|[116|[115|[126|[119|[58|[32|[83|[111|[117|[114|[99|[101|[32|[99|[111|[100|[101|[32|[110|[111|[116|[32|[102|[111|[117|[110|[100|[58|[32|[126|[119|[46|[101|[114|[108|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2339
																													     [Prefix|[App|[Mod|[]]]])
	  %% Line 2340
	  <Prefix,{{'parse_error',File},{_cor10,_cor11,App,_cor12,_cor13}}> when 'true' ->
	      %% Line 2341
	      call 'io_lib':'format'
		  ([126|[116|[115|[126|[119|[58|[32|[80|[97|[114|[115|[101|[32|[101|[114|[114|[111|[114|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2342
																			     [Prefix|[App|[File|[]]]])
	  %% Line 2343
	  <Prefix,{'obj_out_of_date',{Mod,_cor14,App,_cor15,_cor16}}> when 'true' ->
	      %% Line 2344
	      call 'io_lib':'format'
		  ([126|[116|[115|[126|[119|[58|[32|[79|[98|[106|[101|[99|[116|[32|[99|[111|[100|[101|[32|[40|[126|[119|[41|[32|[111|[117|[116|[32|[111|[102|[32|[100|[97|[116|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2345
																												    [Prefix|[App|[Mod|[]]]])
	  %% Line 2346
	  <Prefix,{'exref_undef',Undef}> when 'true' ->
	      let <F> =
		  %% Line 2347
		  ( fun (_cor2) ->
			case _cor2 of
			  <{M,F,A}> when 'true' ->
			      %% Line 2348
			      call 'io_lib':'format'
				  ([126|[116|[115|[85|[110|[100|[101|[102|[105|[110|[101|[100|[32|[102|[117|[110|[99|[116|[105|[111|[110|[32|[126|[119|[58|[126|[119|[47|[126|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2349
																											      [Prefix|[M|[F|[A|[]]]]])
			  ( <_cor3> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor3})
				  -| [{'function_name',{'-form_warn/2-fun-0-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-form_warn/2-fun-0-'}}] )
	      in  %% Line 2351
		  call 'lists':'map'
		      (F, Undef)
	  %% Line 2352
	  <Prefix,'missing_sasl'> when 'true' ->
	      %% Line 2353
	      call 'io_lib':'format'
		  ([126|[116|[115|[58|[32|[77|[105|[115|[115|[105|[110|[103|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[115|[97|[115|[108|[46|[32|[67|[97|[110|[32|[110|[111|[116|[32|[117|[112|[103|[114|[97|[100|[101|[32|[119|[105|[116|[104|[32|[116|[104|[105|[115|[32|[114|[101|[108|[101|[97|[115|[101|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2355
																																																	    [Prefix|[]])
	  %% Line 2356
	  <Prefix,What> when 'true' ->
	      %% Line 2357
	      call 'io_lib':'format'
		  ([126|[116|[115|[32|[126|[112|[126|[110]]]]]]]], [Prefix|[What|[]]])
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('systools_make')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('systools_make', _cor0)
end