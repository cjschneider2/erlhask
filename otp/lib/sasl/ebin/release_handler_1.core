module 'release_handler_1' ['check_old_processes'/2,
			    'check_script'/2,
			    'eval_script'/1,
			    'eval_script'/5,
			    'get_current_vsn'/1,
			    'get_supervised_procs'/0,
			    'module_info'/0,
			    'module_info'/1]
    attributes []
'check_script'/2 =
    %% Line 50
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <['restart_new_emulator'|Script],LibDirs> when 'true' ->
	      %% Line 53
	      apply 'do_check_script'/3
		  (Script, LibDirs, [])
	  %% Line 54
	  <Script,LibDirs> when 'true' ->
	      let <_cor2> =
		  catch
		      %% Line 55
		      apply 'check_old_processes'/2
			  (Script, 'soft_purge')
	      in  %% Line 55
		  case _cor2 of
		    %% Line 56
		    <{'ok',PurgeMods}> when 'true' ->
			%% Line 57
			apply 'do_check_script'/3
			    (Script, LibDirs, PurgeMods)
		    %% Line 58
		    <{'error',Mod}> when 'true' ->
			%% Line 59
			{'error',{'old_processes',Mod}}
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	end
'do_check_script'/3 =
    %% Line 62
    fun (_cor2,_cor1,_cor0) ->
	%% Line 63
	case apply 'split_instructions'/1
		 (_cor2) of
	  <{Before,After}> when 'true' ->
	      let <_cor9> =
		  catch
		      let <_cor8> =
			  %% Line 64
			  ( fun (_cor5,_cor4) ->
				%% Line 65
				apply 'eval'/2
				    (_cor5, _cor4)
			    -| [{'id',{0,0,'-do_check_script/3-fun-0-'}}] )
		      in  %% Line 64
			  call 'lists':'foldl'
			      (_cor8, %% Line 67
				      {'eval_state',[],[],[],[],_cor1,[],[],[],[]}, %% Line 68
										    Before)
	      in  %% Line 64
		  case _cor9 of
		    %% Line 69
		    <EvalState2 = {'eval_state',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24}> when ( 'true'
															-| ['compiler_generated'] ) ->
			let <_cor10> =
			    catch
				%% Line 70
				apply 'syntax_check_script'/1
				    (After)
			in  %% Line 70
			    case _cor10 of
			      %% Line 71
			      <'ok'> when 'true' ->
				  %% Line 72
				  {'ok',_cor0}
			      %% Line 73
			      <Other> when 'true' ->
				  %% Line 74
				  {'error',Other}
			    end
		    %% Line 76
		    <{'error',Error}> when 'true' ->
			%% Line 77
			{'error',Error}
		    %% Line 78
		    <Other> when 'true' ->
			%% Line 79
			{'error',Other}
		  end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'eval_script'/1 =
    %% Line 83
    fun (_cor0) ->
	%% Line 84
	apply 'eval_script'/5
	    (_cor0, [], [], [], [])
'eval_script'/5 =
    %% Line 86
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    catch
		%% Line 87
		apply 'check_old_processes'/2
		    (_cor4, 'soft_purge')
	in  %% Line 87
	    case _cor5 of
	      %% Line 88
	      <{'ok',_cor31}> when 'true' ->
		  %% Line 89
		  case apply 'split_instructions'/1
			   (_cor4) of
		    <{Before,After}> when 'true' ->
			let <_cor12> =
			    catch
				let <_cor11> =
				    %% Line 90
				    ( fun (_cor8,_cor7) ->
					  %% Line 91
					  apply 'eval'/2
					      (_cor8, _cor7)
				      -| [{'id',{0,0,'-eval_script/5-fun-0-'}}] )
				in  %% Line 90
				    call 'lists':'foldl'
					(_cor11, %% Line 93
						 {'eval_state',[],[],[],_cor3,_cor2,[],[],_cor1,_cor0}, %% Line 97
													Before)
			in  %% Line 90
			    case _cor12 of
			      %% Line 98
			      <EvalState2 = {'eval_state',_cor32,_cor33,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39,_cor40}> when ( 'true'
																  -| ['compiler_generated'] ) ->
				  let <_cor13> =
				      catch
					  %% Line 99
					  apply 'syntax_check_script'/1
					      (After)
				  in  %% Line 99
				      case _cor13 of
					%% Line 100
					<'ok'> when 'true' ->
					    let <_cor19> =
						catch
						    let <_cor18> =
							%% Line 102
							( fun (_cor15,_cor14) ->
							      %% Line 103
							      apply 'eval'/2
								  (_cor15, _cor14)
							  -| [{'id',{0,0,'-eval_script/5-fun-1-'}}] )
						    in  %% Line 101
							call 'lists':'foldl'
							    (_cor18, %% Line 106
								     EvalState2, %% Line 107
										 After)
					    in  %% Line 101
						case _cor19 of
						  %% Line 108
						  <EvalState4 = {'eval_state',_cor41,_cor42,_cor43,_cor44,_cor45,_cor46,_cor47,_cor48,_cor49}> when %% Line 109
																		    ( 'true'
																		      -| ['compiler_generated'] ) ->
						      %% Line 110
						      {'ok',_cor46}
						  %% Line 111
						  <'restart_emulator'> when 'true' ->
						      %% Line 112
						      'restart_emulator'
						  %% Line 113
						  <Error> when 'true' ->
						      %% Line 114
						      {'EXIT',Error}
						end
					%% Line 116
					<Other> when 'true' ->
					    %% Line 117
					    {'error',Other}
				      end
			      %% Line 119
			      <{'error',Error}> when 'true' ->
				  {'error',Error}
			      %% Line 120
			      <Other> when 'true' ->
				  {'error',Other}
			    end
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	      %% Line 122
	      <{'error',Mod}> when 'true' ->
		  %% Line 123
		  {'error',{'old_processes',Mod}}
	      ( <_cor25> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor25})
		-| ['compiler_generated'] )
	    end
'split_instructions'/1 =
    %% Line 129
    fun (_cor0) ->
	%% Line 130
	apply 'split_instructions'/2
	    (_cor0, [])
'split_instructions'/2 =
    %% Line 131
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <['point_of_no_return'|T],Before> when 'true' ->
	      let <_cor2> =
		  %% Line 132
		  call 'lists':'reverse'
		      (Before)
	      in  %% Line 132
		  {_cor2,['point_of_no_return'|T]}
	  %% Line 133
	  <[H|T],Before> when 'true' ->
	      %% Line 134
	      apply 'split_instructions'/2
		  (T, [H|Before])
	  %% Line 135
	  <[],Before> when 'true' ->
	      let <_cor3> =
		  %% Line 136
		  call 'lists':'reverse'
		      (Before)
	      in  %% Line 136
		  {[],_cor3}
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'split_instructions',2}}] )
	    -| ['compiler_generated'] )
	end
'check_old_processes'/2 =
    %% Line 160
    fun (_cor1,_cor0) ->
	let <Procs> =
	    %% Line 161
	    call 'erlang':'processes'
		()
	in  let <_cor5> =
		%% Line 163
		( fun (_cor3) ->
		      case _cor3 of
			<{'load',{Mod,PPM,_X_PostPurgeMethod}}>
			    when call 'erlang':'=='
				  (PPM,
				   _cor0) ->
			    %% Line 164
			    apply 'check_old_code'/3
				(Mod, Procs, _cor0)
			%% Line 165
			<{'remove',{Mod,PPM,_X_PostPurgeMethod}}>
			    when call 'erlang':'=='
				  (PPM,
				   _cor0) ->
			    %% Line 166
			    apply 'check_old_code'/3
				(Mod, Procs, _cor0)
			%% Line 167
			<_cor9> when 'true' ->
			    []
		      end
		  -| [{'id',{0,0,'-check_old_processes/2-fun-0-'}}] )
	    in  let <_cor6> =
		    %% Line 162
		    call 'lists':'flatmap'
			(_cor5, _cor1)
		in  %% Line 162
		    {'ok',_cor6}
'check_old_code'/3 =
    %% Line 171
    fun (_cor2,_cor1,_cor0) ->
	%% Line 172
	case call 'erlang':'check_old_code'
		 (_cor2) of
	  %% Line 173
	  <'true'>
	      when call 'erlang':'=:='
		    (_cor0,
		     'soft_purge') ->
	      %% Line 174
	      apply 'do_check_old_code'/2
		  (_cor2, _cor1)
	  %% Line 175
	  <'true'>
	      when call 'erlang':'=:='
		    (_cor0,
		     'brutal_purge') ->
	      let <_cor3> =
		  catch
		      %% Line 176
		      apply 'do_check_old_code'/2
			  (_cor2, _cor1)
	      in  %% Line 176
		  case _cor3 of
		    %% Line 177
		    <{'error',_cor9}>
			when call 'erlang':'=:='
			      (_cor9,
			       _cor2) ->
			[]
		    %% Line 178
		    <R> when 'true' ->
			R
		  end
	  %% Line 180
	  <'false'> when 'true' ->
	      %% Line 181
	      []
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'do_check_old_code'/2 =
    %% Line 185
    fun (_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 187
	    ( fun (_cor3) ->
		  %% Line 188
		  case call 'erlang':'check_process_code'
			   (_cor3, _cor1) of
		    %% Line 189
		    <'false'> when 'true' ->
			'ok'
		    %% Line 190
		    <'true'> when 'true' ->
			call 'erlang':'throw'
			    ({'error',_cor1})
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-do_check_old_code/2-fun-0-'}}] )
	in  do  %% Line 186
		call 'lists':'foreach'
		    (_cor5, _cor0)
		%% Line 194
		[_cor1|[]]
'syntax_check_script'/1 =
    %% Line 199
    fun (_cor0) ->
	case _cor0 of
	  <['point_of_no_return'|Script]> when 'true' ->
	      %% Line 200
	      apply 'syntax_check_script'/1
		  (Script)
	  %% Line 201
	  <[{'load',{_cor2,_cor3,_cor4}}|Script]> when 'true' ->
	      %% Line 202
	      apply 'syntax_check_script'/1
		  (Script)
	  %% Line 203
	  <[{'remove',{_cor5,_cor6,_cor7}}|Script]> when 'true' ->
	      %% Line 204
	      apply 'syntax_check_script'/1
		  (Script)
	  %% Line 205
	  <[{'purge',_cor8}|Script]> when 'true' ->
	      %% Line 206
	      apply 'syntax_check_script'/1
		  (Script)
	  %% Line 207
	  <[{'suspend',_cor9}|Script]> when 'true' ->
	      %% Line 208
	      apply 'syntax_check_script'/1
		  (Script)
	  %% Line 209
	  <[{'resume',_cor10}|Script]> when 'true' ->
	      %% Line 210
	      apply 'syntax_check_script'/1
		  (Script)
	  %% Line 211
	  <[{'code_change',_cor11}|Script]> when 'true' ->
	      %% Line 212
	      apply 'syntax_check_script'/1
		  (Script)
	  %% Line 213
	  <[{'code_change',_cor12,_cor13}|Script]> when 'true' ->
	      %% Line 214
	      apply 'syntax_check_script'/1
		  (Script)
	  %% Line 215
	  <[{'stop',_cor14}|Script]> when 'true' ->
	      %% Line 216
	      apply 'syntax_check_script'/1
		  (Script)
	  %% Line 217
	  <[{'start',_cor15}|Script]> when 'true' ->
	      %% Line 218
	      apply 'syntax_check_script'/1
		  (Script)
	  %% Line 219
	  <[{'sync_nodes',_cor16,{_cor17,_cor18,_cor19}}|Script]> when 'true' ->
	      %% Line 220
	      apply 'syntax_check_script'/1
		  (Script)
	  %% Line 221
	  <[{'sync_nodes',_cor20,_cor21}|Script]> when 'true' ->
	      %% Line 222
	      apply 'syntax_check_script'/1
		  (Script)
	  %% Line 223
	  <[{'apply',{_cor22,_cor23,_cor24}}|Script]> when 'true' ->
	      %% Line 224
	      apply 'syntax_check_script'/1
		  (Script)
	  %% Line 225
	  <['restart_emulator'|Script]> when 'true' ->
	      %% Line 226
	      apply 'syntax_check_script'/1
		  (Script)
	  %% Line 227
	  <[Illegal|_X_Script]> when 'true' ->
	      %% Line 228
	      call 'erlang':'throw'
		  ({'illegal_instruction_after_point_of_no_return',Illegal})
	  %% Line 229
	  <[]> when 'true' ->
	      %% Line 230
	      'ok'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'syntax_check_script',1}}] )
	    -| ['compiler_generated'] )
	end
'eval'/2 =
    %% Line 308
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'load_object_code',{Lib,LibVsn,Modules}},EvalState> when 'true' ->
	      %% Line 309
	      ( case EvalState of
		  ( <( {'eval_state',_cor127,_cor128,_cor129,_cor130,_rec1,_cor131,_cor132,_cor133,_cor134}
		       -| ['compiler_generated'] )> when 'true' ->
			case call 'lists':'keysearch'
				 (Lib, 1, _rec1) of
			  %% Line 310
			  <{'value',LibInfo = {_cor136,_cor137,LibDir}}>
			      when let <_cor138> =
				    call 'erlang':'=:='
					(_cor136, Lib)
				in  let <_cor139> =
					call 'erlang':'=:='
					    (_cor137, LibVsn)
				    in  call 'erlang':'and'
					    (_cor138, _cor139) ->
			      let <Ext> =
				  %% Line 311
				  call 'code':'objfile_extension'
				      ()
			      in  let <_cor17> =
				      %% Line 313
				      ( fun (_cor14,_cor13) ->
					    case <_cor14,_cor13> of
					      <Mod,{Bins,Vsns}> when 'true' ->
						  let <File> =
						      %% Line 314
						      call 'lists':'concat'
							  ([Mod|[Ext|[]]])
						  in  let <FName> =
							  %% Line 315
							  call 'filename':'join'
							      ([LibDir|[[101|[98|[105|[110]]]]|[File|[]]]])
						      in  %% Line 316
							  case call 'erl_prim_loader':'get_file'
								   (FName) of
							    %% Line 317
							    <{'ok',Bin,FName2}> when 'true' ->
								let <NVsns> =
								    %% Line 318
								    apply 'add_vsns'/3
									(Mod, Bin, Vsns)
								in  %% Line 319
								    {[{Mod,Bin,FName2}|Bins],NVsns}
							    %% Line 320
							    <'error'> when 'true' ->
								%% Line 321
								call 'erlang':'throw'
								    ({'error',{'no_such_file',FName}})
							    ( <_cor12> when 'true' ->
								  primop 'match_fail'
								      ({'case_clause',_cor12})
							      -| ['compiler_generated'] )
							  end
					      ( <_cor16,_cor15> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor16,_cor15})
						      -| [{'function_name',{'-eval/2-fun-0-',2}}] )
						-| ['compiler_generated'] )
					    end
					-| [{'id',{0,0,'-eval/2-fun-0-'}}] )
				  in  %% Line 312
				      case %% Line 313
					   call 'lists':'foldl'
					       (_cor17, %% Line 324
							{_cor127,_cor132}, %% Line 326
									   Modules) of
					<{NewBins,NewVsns}> when 'true' ->
					    let <NewLibs> =
						%% Line 327
						call 'lists':'keystore'
						    (Lib, 1, _cor133, LibInfo)
					    in  let <_cor23> =
						    %% Line 329
						    call 'erlang':'setelement'
							(9, EvalState, NewLibs)
						in  let <_cor24> =
							%% Line 330
							call 'erlang':'setelement'
							    (8, _cor23, NewVsns)
						    in  %% Line 328
							call 'erlang':'setelement'
							    (2, _cor24, NewBins)
					( <_cor18> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor18})
					  -| ['compiler_generated'] )
				      end
			  %% Line 331
			  <{'value',{_cor177,LibVsn2,_X_LibDir}}>
			      when call 'erlang':'=:='
				    (_cor177,
				     Lib) ->
			      %% Line 332
			      call 'erlang':'throw'
				  ({'error',{'bad_lib_vsn',Lib,LibVsn2}})
			  ( <_cor26> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor26})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor135> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','eval_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 334
	  <'point_of_no_return',EvalState> when 'true' ->
	      let <_cor30> =
		  %% Line 335
		  case apply 'get_opt'/3
			   ('update_paths', EvalState, 'false') of
		    %% Line 336
		    <'false'> when 'true' ->
			%% Line 337
			( case EvalState of
			    ( <( {'eval_state',_cor178,_cor179,_cor180,_cor181,_cor182,_cor183,_cor184,_rec6,_cor185}
				 -| ['compiler_generated'] )> when 'true' ->
				  _rec6
			      -| ['compiler_generated'] )
			    ( <_cor186> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','eval_state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 338
		    <'true'> when 'true' ->
			%% Line 339
			( case EvalState of
			    ( <( {'eval_state',_cor187,_cor188,_cor189,_cor190,_rec7,_cor191,_cor192,_cor193,_cor194}
				 -| ['compiler_generated'] )> when 'true' ->
				  _rec7
			      -| ['compiler_generated'] )
			    ( <_cor195> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','eval_state'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor29> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor29})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor35> =
		      %% Line 341
		      ( fun (_cor33) ->
			    case _cor33 of
			      <{Lib,_X_LibVsn,LibDir}> when 'true' ->
				  let <Ebin> =
				      %% Line 342
				      call 'filename':'join'
					  (LibDir, [101|[98|[105|[110]]]])
				  in  %% Line 343
				      call 'code':'replace_path'
					  (Lib, Ebin)
			      ( <_cor34> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_cor34})
				      -| [{'function_name',{'-eval/2-fun-1-',1}}] )
				-| ['compiler_generated'] )
			    end
			-| [{'id',{0,0,'-eval/2-fun-1-'}}] )
		  in  do  %% Line 341
			  call 'lists':'foreach'
			      (_cor35, _cor30)
			  %% Line 346
			  EvalState
	  %% Line 347
	  <{'load',{Mod,_X_PrePurgeMethod,PostPurgeMethod}},EvalState> when 'true' ->
	      %% Line 348
	      ( case EvalState of
		  ( <( {'eval_state',_rec8,_cor196,_cor197,_cor198,_cor199,_cor200,_cor201,_cor202,_cor203}
		       -| ['compiler_generated'] )> when 'true' ->
			%% Line 349
			case call 'lists':'keysearch'
				 (Mod, 1, _rec8) of
			  <{'value',{_X_Mod,Bin,File}}> when 'true' ->
			      %% Line 352
			      case call 'code':'load_binary'
				       (Mod, File, Bin) of
				<{'module',_cor205}> when 'true' ->
				    let <Unpurged> =
					%% Line 355
					apply 'do_soft_purge'/3
					    (Mod, PostPurgeMethod, _cor200)
				    in  let <_rec10> =
					    %% Line 356
					    call 'lists':'keydelete'
						(Mod, 1, _rec8)
					in  let <_cor46> =
						%% Line 357
						call 'erlang':'setelement'
						    (7, EvalState, Unpurged)
					    in  %% Line 356
						call 'erlang':'setelement'
						    (2, _cor46, _rec10)
				( <_cor40> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor40})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor39> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor39})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_cor204> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','eval_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 358
	  <{'remove',{Mod,_X_PrePurgeMethod,PostPurgeMethod}},EvalState> when 'true' ->
	      do  %% Line 361
		  call 'code':'purge'
		      (Mod)
		  do  %% Line 362
		      call 'code':'delete'
			  (Mod)
		      %% Line 365
		      ( case EvalState of
			  ( <( {'eval_state',_cor225,_cor226,_cor227,_cor228,_cor229,_rec12,_cor230,_cor231,_cor232}
			       -| ['compiler_generated'] )> when 'true' ->
				let <Unpurged> =
				    apply 'do_soft_purge'/3
					(Mod, PostPurgeMethod, _rec12)
				in  %% Line 366
				    call 'erlang':'setelement'
					(7, EvalState, Unpurged)
			    -| ['compiler_generated'] )
			  ( <_cor233> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','eval_state'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  %% Line 367
	  <{'purge',Modules},EvalState> when 'true' ->
	      let <_cor55> =
		  %% Line 371
		  ( fun (_cor53) ->
			call 'code':'purge'
			    (_cor53)
		    -| [{'id',{0,0,'-eval/2-fun-2-'}}] )
	      in  do  %% Line 371
		      call 'lists':'foreach'
			  (_cor55, Modules)
		      %% Line 372
		      EvalState
	  %% Line 373
	  <{'suspend',Modules},EvalState> when 'true' ->
	      let <Procs> =
		  %% Line 374
		  apply 'get_supervised_procs'/0
		      ()
	      in  let <_cor68> =
		      %% Line 376
		      ( fun (_cor65,_cor64) ->
			    let <Module,Def> =
				%% Line 377
				case _cor65 of
				  %% Line 378
				  <{Mod,ModTimeout}> when 'true' ->
				      %% Line 379
				      <Mod,ModTimeout>
				  %% Line 380
				  <Mod> when 'true' ->
				      %% Line 381
				      <Mod,'default'>
				end
			    in  let <Timeout> =
				    %% Line 383
				    apply 'get_opt'/3
					('suspend_timeout', EvalState, Def)
				in  let <Pids> =
					%% Line 384
					apply 'suspend'/3
					    (Module, Procs, Timeout)
				    in  %% Line 385
					[{Module,Pids}|_cor64]
			-| [{'id',{0,0,'-eval/2-fun-3-'}}] )
		  in  %% Line 387
		      ( case EvalState of
			  ( <( {'eval_state',_cor244,_cor245,_rec14,_cor246,_cor247,_cor248,_cor249,_cor250,_cor251}
			       -| ['compiler_generated'] )> when 'true' ->
				let <NewSuspended> =
				    call 'lists':'foldl'
					(_cor68, _rec14, %% Line 388
							 Modules)
				in  %% Line 389
				    call 'erlang':'setelement'
					(4, EvalState, NewSuspended)
			    -| ['compiler_generated'] )
			  ( <_cor252> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','eval_state'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  %% Line 390
	  <{'resume',Modules},EvalState> when 'true' ->
	      let <_cor81> =
		  %% Line 392
		  ( fun (_cor78,_cor77) ->
			let <_cor76> =
			    %% Line 393
			    ( fun (_cor74) ->
				  case _cor74 of
				    <{Mod2,Pids}>
					when call 'erlang':'=='
					      (Mod2,
					       _cor78) ->
					do  %% Line 394
					    apply 'resume'/1
						(Pids)
					    %% Line 395
					    'false'
				    %% Line 396
				    <_cor263> when 'true' ->
					%% Line 397
					'true'
				  end
			      -| [{'id',{0,0,'-eval/2-fun-4-'}}] )
			in  %% Line 393
			    call 'lists':'filter'
				(_cor76, _cor77)
		    -| [{'id',{0,0,'-eval/2-fun-5-'}}] )
	      in  %% Line 401
		  ( case EvalState of
		      ( <( {'eval_state',_cor264,_cor265,_rec16,_cor266,_cor267,_cor268,_cor269,_cor270,_cor271}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <NewSuspended> =
				call 'lists':'foldl'
				    (_cor81, _rec16, %% Line 402
						     Modules)
			    in  %% Line 403
				call 'erlang':'setelement'
				    (4, EvalState, NewSuspended)
			-| ['compiler_generated'] )
		      ( <_cor272> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','eval_state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 404
	  <{'code_change',Modules},EvalState> when 'true' ->
	      %% Line 405
	      apply 'eval'/2
		  ({'code_change','up',Modules}, EvalState)
	  %% Line 406
	  <{'code_change',Mode,Modules},EvalState> when 'true' ->
	      %% Line 407
	      ( case EvalState of
		  ( <( {'eval_state',_cor283,_cor284,_rec18,_cor285,_cor286,_cor287,_cor288,_cor289,_cor290}
		       -| ['compiler_generated'] )> when 'true' ->
			let <Timeout> =
			    %% Line 409
			    apply 'get_opt'/3
				('code_change_timeout', EvalState, 'default')
			in  let <_cor98> =
				%% Line 410
				( fun (_cor96) ->
				      case _cor96 of
					<{Mod,Extra}> when 'true' ->
					    let <_cor93> =
						%% Line 412
						case call 'lists':'keysearch'
							 (Mod, 1, _cor288) of
						  %% Line 413
						  <{'value',{_cor301,OldVsn,_X_NewVsn}}>
						      when let <_cor302> =
							    call 'erlang':'=:='
								(_cor301, Mod)
							in  let <_cor303> =
								%% Line 414
								call 'erlang':'=:='
								    (Mode, 'up')
							    in  call 'erlang':'and'
								    (_cor302, _cor303) ->
						      %% Line 414
						      OldVsn
						  %% Line 415
						  <{'value',{_cor304,_X_OldVsn,NewVsn}}>
						      when let <_cor305> =
							    call 'erlang':'=:='
								(_cor304, Mod)
							in  let <_cor306> =
								%% Line 416
								call 'erlang':'=:='
								    (Mode, 'down')
							    in  call 'erlang':'and'
								    (_cor305, _cor306) ->
						      %% Line 416
						      {'down',NewVsn}
						  %% Line 417
						  <_cor307>
						      when call 'erlang':'=:='
							    (Mode,
							     'up') ->
						      'undefined'
						  %% Line 418
						  <_cor308> when 'true' ->
						      {'down','undefined'}
						end
					    in  %% Line 420
						case call 'lists':'keysearch'
							 (Mod, 1, _rec18) of
						  %% Line 421
						  <{'value',{_X_Mod,Pids}}> when 'true' ->
						      %% Line 422
						      apply 'change_code'/5
							  (Pids, Mod, _cor93, Extra, Timeout)
						  %% Line 423
						  <_cor309> when 'true' ->
						      'ok'
						end
					( <_cor97> when 'true' ->
					      ( primop 'match_fail'
						    ({'function_clause',_cor97})
						-| [{'function_name',{'-eval/2-fun-6-',1}}] )
					  -| ['compiler_generated'] )
				      end
				  -| [{'id',{0,0,'-eval/2-fun-6-'}}] )
			    in  do  %% Line 410
				    call 'lists':'foreach'
					(_cor98, %% Line 426
						 Modules)
				    %% Line 427
				    EvalState
		    -| ['compiler_generated'] )
		  ( <_cor291> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','eval_state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 428
	  <{'stop',Modules},EvalState> when 'true' ->
	      let <Procs> =
		  %% Line 429
		  apply 'get_supervised_procs'/0
		      ()
	      in  let <_cor107> =
		      %% Line 431
		      ( fun (_cor104,_cor103) ->
			    let <Procs2> =
				%% Line 432
				apply 'stop'/2
				    (_cor104, Procs)
			    in  %% Line 433
				[{_cor104,Procs2}|_cor103]
			-| [{'id',{0,0,'-eval/2-fun-7-'}}] )
		  in  %% Line 435
		      ( case EvalState of
			  ( <( {'eval_state',_cor310,_rec20,_cor311,_cor312,_cor313,_cor314,_cor315,_cor316,_cor317}
			       -| ['compiler_generated'] )> when 'true' ->
				let <NewStopped> =
				    call 'lists':'foldl'
					(_cor107, _rec20, %% Line 436
							  Modules)
				in  %% Line 437
				    call 'erlang':'setelement'
					(3, EvalState, NewStopped)
			    -| ['compiler_generated'] )
			  ( <_cor318> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','eval_state'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  %% Line 438
	  <{'start',Modules},EvalState> when 'true' ->
	      let <_cor120> =
		  %% Line 440
		  ( fun (_cor117,_cor116) ->
			let <_cor115> =
			    %% Line 441
			    ( fun (_cor113) ->
				  case _cor113 of
				    <{Mod2,Procs}>
					when call 'erlang':'=='
					      (Mod2,
					       _cor117) ->
					do  %% Line 442
					    apply 'start'/1
						(Procs)
					    %% Line 443
					    'false'
				    %% Line 444
				    <_cor329> when 'true' ->
					%% Line 445
					'true'
				  end
			      -| [{'id',{0,0,'-eval/2-fun-8-'}}] )
			in  %% Line 441
			    call 'lists':'filter'
				(_cor115, _cor116)
		    -| [{'id',{0,0,'-eval/2-fun-9-'}}] )
	      in  %% Line 449
		  ( case EvalState of
		      ( <( {'eval_state',_cor330,_rec22,_cor331,_cor332,_cor333,_cor334,_cor335,_cor336,_cor337}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <NewStopped> =
				call 'lists':'foldl'
				    (_cor120, _rec22, %% Line 450
						      Modules)
			    in  %% Line 451
				call 'erlang':'setelement'
				    (3, EvalState, NewStopped)
			-| ['compiler_generated'] )
		      ( <_cor338> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','eval_state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 452
	  <{'sync_nodes',Id,{M,F,A}},EvalState> when 'true' ->
	      let <_cor124> =
		  %% Line 453
		  call 'erlang':'apply'
		      (M, F, A)
	      in  do  %% Line 453
		      apply 'sync_nodes'/2
			  (Id, _cor124)
		      %% Line 454
		      EvalState
	  %% Line 455
	  <{'sync_nodes',Id,Nodes},EvalState> when 'true' ->
	      do  %% Line 456
		  apply 'sync_nodes'/2
		      (Id, Nodes)
		  %% Line 457
		  EvalState
	  %% Line 458
	  <{'apply',{M,F,A}},EvalState> when 'true' ->
	      do  %% Line 459
		  call 'erlang':'apply'
		      (M, F, A)
		  %% Line 460
		  EvalState
	  %% Line 461
	  <'restart_emulator',_X_EvalState> when 'true' ->
	      %% Line 462
	      call 'erlang':'throw'
		  ('restart_emulator')
	  %% Line 463
	  <'restart_new_emulator',_X_EvalState> when 'true' ->
	      %% Line 464
	      call 'erlang':'throw'
		  ('restart_new_emulator')
	  ( <_cor126,_cor125> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor126,_cor125})
		  -| [{'function_name',{'eval',2}}] )
	    -| ['compiler_generated'] )
	end
'get_opt'/3 =
    %% Line 466
    fun (_cor2,_cor1,_cor0) ->
	%% Line 467
	( case _cor1 of
	    ( <( {'eval_state',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_rec24}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'lists':'keysearch'
			   (_cor2, 1, _rec24) of
		    %% Line 468
		    <{'value',{_X_Tag,Value}}> when 'true' ->
			Value
		    %% Line 469
		    <'false'> when 'true' ->
			_cor0
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_cor17> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','eval_state'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'suspend'/3 =
    %% Line 480
    fun (_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 481
	    ( fun (_cor6) ->
		  case _cor6 of
		    <{_X_Sup,_X_Name,Pid,Mods}> when 'true' ->
			%% Line 482
			case call 'lists':'member'
				 (_cor2, Mods) of
			  %% Line 483
			  <'true'> when 'true' ->
			      let <_cor3> =
				  catch
				      %% Line 484
				      apply 'sys_suspend'/2
					  (Pid, _cor0)
			      in  %% Line 484
				  case _cor3 of
				    %% Line 485
				    <'ok'> when 'true' ->
					{'true',Pid}
				    %% Line 486
				    <_cor12> when 'true' ->
					do  catch
						%% Line 489
						call 'sys':'resume'
						    (Pid)
					    %% Line 490
					    'false'
				  end
			  %% Line 492
			  <'false'> when 'true' ->
			      %% Line 493
			      'false'
			  ( <_cor5> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor5})
			    -| ['compiler_generated'] )
			end
		    ( <_cor7> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor7})
			    -| [{'function_name',{'-suspend/3-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-suspend/3-fun-0-'}}] )
	in  %% Line 481
	    call 'lists':'zf'
		(_cor8, _cor1)
'sys_suspend'/2 =
    %% Line 498
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pid,'default'> when 'true' ->
	      %% Line 499
	      call 'sys':'suspend'
		  (Pid)
	  %% Line 500
	  <Pid,Timeout> when 'true' ->
	      %% Line 501
	      call 'sys':'suspend'
		  (Pid, Timeout)
	end
'resume'/1 =
    %% Line 503
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 504
	    ( fun (_cor1) ->
		  catch
		      call 'sys':'resume'
			  (_cor1)
	      -| [{'id',{0,0,'-resume/1-fun-0-'}}] )
	in  %% Line 504
	    call 'lists':'foreach'
		(_cor3, _cor0)
'change_code'/5 =
    %% Line 506
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Fun> =
	    %% Line 507
	    ( fun (_cor6) ->
		  %% Line 508
		  case apply 'sys_change_code'/5
			   (_cor6, _cor3, _cor2, _cor1, _cor0) of
		    %% Line 509
		    <'ok'> when 'true' ->
			%% Line 510
			'ok'
		    %% Line 511
		    <{'error',Reason}> when 'true' ->
			%% Line 512
			call 'erlang':'throw'
			    ({'code_change_failed',_cor6,_cor3,_cor2,Reason})
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor5})
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-change_code/5-fun-0-'}}] )
	in  %% Line 515
	    call 'lists':'foreach'
		(Fun, _cor4)
'sys_change_code'/5 =
    %% Line 517
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Pid,Mod,Vsn,Extra,'default'> when 'true' ->
	      %% Line 518
	      call 'sys':'change_code'
		  (Pid, Mod, Vsn, Extra)
	  %% Line 519
	  <Pid,Mod,Vsn,Extra,Timeout> when 'true' ->
	      %% Line 520
	      call 'sys':'change_code'
		  (Pid, Mod, Vsn, Extra, Timeout)
	end
'stop'/2 =
    %% Line 522
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 523
	    ( fun (_cor5) ->
		  case _cor5 of
		    <{'undefined',_X_Name,_X_Pid,_X_Mods}> when 'true' ->
			%% Line 524
			'false'
		    %% Line 525
		    <{Sup,Name,_X_Pid,Mods}> when 'true' ->
			%% Line 526
			case call 'lists':'member'
				 (_cor1, Mods) of
			  %% Line 527
			  <'true'> when 'true' ->
			      let <_cor2> =
				  catch
				      %% Line 528
				      call 'supervisor':'terminate_child'
					  (%% Line 529
					   Sup, %% Line 529
						Name)
			      in  %% Line 528
				  case _cor2 of
				    %% Line 530
				    <'ok'> when 'true' ->
					{'true',{Sup,Name}}
				    %% Line 531
				    <_cor10> when 'true' ->
					'false'
				  end
			  %% Line 533
			  <'false'> when 'true' ->
			      'false'
			  ( <_cor4> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor4})
			    -| ['compiler_generated'] )
			end
		    ( <_cor6> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor6})
			    -| [{'function_name',{'-stop/2-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-stop/2-fun-0-'}}] )
	in  %% Line 523
	    call 'lists':'zf'
		(_cor7, _cor0)
'start'/1 =
    %% Line 538
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 539
	    ( fun (_cor1) ->
		  case _cor1 of
		    <{Sup,Name}> when 'true' ->
			catch
			    %% Line 540
			    call 'supervisor':'restart_child'
				(Sup, Name)
		    ( <_cor2> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor2})
			    -| [{'function_name',{'-start/1-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-start/1-fun-0-'}}] )
	in  %% Line 539
	    call 'lists':'foreach'
		(_cor3, _cor0)
'get_supervised_procs'/0 =
    %% Line 578
    fun () ->
	let <_cor6> =
	    %% Line 580
	    ( fun (_cor3,_cor2) ->
		  let <_cor1> =
		      %% Line 583
		      call 'application_controller':'get_master'
			  (_cor3)
		  in  %% Line 581
		      apply 'get_master_procs'/3
			  (_cor3, _cor2, _cor1)
	      -| [{'id',{0,0,'-get_supervised_procs/0-fun-0-'}}] )
	in  let <_cor0> =
		%% Line 586
		apply 'get_application_names'/0
		    ()
	    in  %% Line 579
		call 'lists':'foldl'
		    (_cor6, %% Line 585
			    [], _cor0)
'get_supervised_procs'/4 =
    %% Line 588
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_cor14,Root,Procs,{'ok',SupMod}> when 'true' ->
	      let <_cor4> =
		  %% Line 589
		  apply 'get_proc_state'/1
		      (Root)
	      in  let <_cor5> =
		      %% Line 589
		      apply 'maybe_supervisor_which_children'/3
			  (_cor4, SupMod, Root)
		  in  let <_cor6> =
			  %% Line 589
			  apply 'get_procs'/2
			      (_cor5, Root)
		      in  %% Line 589
			  call 'erlang':'++'
			      (_cor6, %% Line 590
				      [{'undefined','undefined',Root,[SupMod|[]]}|Procs])
	  %% Line 591
	  <Application,Root,Procs,{'error',_cor15}> when 'true' ->
	      do  %% Line 592
		  call 'error_logger':'error_msg'
		      ([114|[101|[108|[101|[97|[115|[101|[95|[104|[97|[110|[100|[108|[101|[114|[58|[32|[99|[97|[110|[110|[111|[116|[32|[102|[105|[110|[100|[32|[116|[111|[112|[32|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[32|[102|[111|[114|[32|[97|[112|[112|[108|[105|[99|[97|[116|[105|[111|[110|[32|[126|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 593
																																																	[Application|[]])
		  let <_cor7> =
		      %% Line 594
		      apply 'get_proc_state'/1
			  (Root)
		  in  let <_cor8> =
			  %% Line 594
			  apply 'maybe_supervisor_which_children'/3
			      (_cor7, Application, Root)
		      in  let <_cor9> =
			      %% Line 594
			      apply 'get_procs'/2
				  (_cor8, Root)
			  in  %% Line 594
			      call 'erlang':'++'
				  (_cor9, Procs)
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'get_supervised_procs',4}}] )
	    -| ['compiler_generated'] )
	end
'get_application_names'/0 =
    %% Line 596
    fun () ->
	let <_cor3> =
	    %% Line 597
	    ( fun (_cor1) ->
		  case _cor1 of
		    <{Application,_X_Name,_X_Vsn}> when 'true' ->
			%% Line 598
			Application
		    ( <_cor2> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor2})
			    -| [{'function_name',{'-get_application_names/0-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-get_application_names/0-fun-0-'}}] )
	in  let <_cor0> =
		%% Line 600
		call 'application':'which_applications'
		    ()
	    in  %% Line 597
		call 'lists':'map'
		    (_cor3, _cor0)
'get_master_procs'/3 =
    %% Line 602
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Application,Procs,Pid>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      %% Line 603
	      case call 'application_master':'get_child'
		       (Pid) of
		<{Root,_X_AppMod}> when 'true' ->
		    let <_cor4> =
			%% Line 604
			apply 'get_supervisor_module'/1
			    (Root)
		    in  %% Line 604
			apply 'get_supervised_procs'/4
			    (Application, Root, Procs, _cor4)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 605
	  <_cor8,Procs,_cor9> when 'true' ->
	      %% Line 606
	      Procs
	end
'get_procs'/2 =
    %% Line 608
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Name,Pid,'worker','dynamic'}|T],Sup>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      let <Mods> =
		  %% Line 609
		  apply 'maybe_get_dynamic_mods'/2
		      (Name, Pid)
	      in  let <_cor3> =
		      %% Line 610
		      apply 'get_procs'/2
			  (T, Sup)
		  in  %% Line 610
		      [{Sup,Name,Pid,Mods}|_cor3]
	  %% Line 611
	  <[{Name,Pid,'worker',Mods}|T],Sup>
	      when let <_cor4> =
		    call 'erlang':'is_pid'
			(Pid)
		in  let <_cor5> =
			call 'erlang':'is_list'
			    (Mods)
		    in  call 'erlang':'and'
			    (_cor4, _cor5) ->
	      let <_cor6> =
		  %% Line 612
		  apply 'get_procs'/2
		      (T, Sup)
	      in  %% Line 612
		  [{Sup,Name,Pid,Mods}|_cor6]
	  %% Line 613
	  <[{Name,Pid,'supervisor',Mods}|T],Sup>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      let <_cor10> =
		  %% Line 614
		  apply 'get_procs'/2
		      (T, Sup)
	      in  let <_cor7> =
		      %% Line 615
		      apply 'get_proc_state'/1
			  (Pid)
		  in  let <_cor8> =
			  %% Line 615
			  apply 'maybe_supervisor_which_children'/3
			      (_cor7, Name, Pid)
		      in  let <_cor9> =
			      %% Line 615
			      apply 'get_procs'/2
				  (_cor8, Pid)
			  in  %% Line 614
			      [{Sup,Name,Pid,Mods}|call 'erlang':'++'
						       (_cor10, _cor9)]
	  %% Line 616
	  <[_X_H|T],Sup> when 'true' ->
	      %% Line 617
	      apply 'get_procs'/2
		  (T, Sup)
	  %% Line 618
	  <_cor13,_X_Sup> when 'true' ->
	      %% Line 619
	      []
	end
'get_proc_state'/1 =
    %% Line 621
    fun (_cor0) ->
	%% Line 622
	case call 'sys':'get_status'
		 (_cor0) of
	  <{'status',_cor3,{'module',_cor4},[_cor5|[State|[_cor6|[_cor7|[_cor8|[]]]]]]}> when 'true' ->
	      %% Line 623
	      State
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'maybe_supervisor_which_children'/3 =
    %% Line 625
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'suspended',Name,Pid> when 'true' ->
	      do  %% Line 626
		  call 'error_logger':'error_msg'
		      ([114|[101|[108|[101|[97|[115|[101|[95|[104|[97|[110|[100|[108|[101|[114|[58|[32|[97|[32|[119|[104|[105|[99|[104|[95|[99|[104|[105|[108|[100|[114|[101|[110|[32|[99|[97|[108|[108|[32|[116|[111|[32|[126|[112|[32|[40|[126|[119|[41|[32|[119|[97|[115|[32|[97|[118|[111|[105|[100|[101|[100|[46|[32|[84|[104|[105|[115|[32|[115|[117|[112|[101|[114|[118|[105|[115|[111|[114|[32|[105|[115|[32|[115|[117|[115|[112|[101|[110|[100|[101|[100|[32|[97|[110|[100|[32|[115|[104|[111|[117|[108|[100|[32|[108|[105|[107|[101|[108|[121|[32|[98|[101|[32|[117|[112|[103|[114|[97|[100|[101|[100|[32|[100|[105|[102|[102|[101|[114|[101|[110|[116|[108|[121|[46|[32|[69|[120|[105|[116|[105|[110|[103|[32|[46|[46|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 629
																																																																																																												    [Name|[Pid|[]]])
		  %% Line 630
		  call 'erlang':'error'
		      ('suspended_supervisor')
	  %% Line 632
	  <State,Name,Pid> when 'true' ->
	      let <_cor3> =
		  catch
		      %% Line 633
		      call 'supervisor':'which_children'
			  (Pid)
	      in  %% Line 633
		  case _cor3 of
		    %% Line 634
		    <Res>
			when call 'erlang':'is_list'
			      (_cor3) ->
			%% Line 635
			Res
		    %% Line 636
		    <Other> when 'true' ->
			do  %% Line 637
			    call 'error_logger':'error_msg'
				([114|[101|[108|[101|[97|[115|[101|[95|[104|[97|[110|[100|[108|[101|[114|[58|[32|[126|[112|[126|[110|[101|[114|[114|[111|[114|[32|[100|[117|[114|[105|[110|[103|[32|[97|[32|[119|[104|[105|[99|[104|[95|[99|[104|[105|[108|[100|[114|[101|[110|[32|[99|[97|[108|[108|[32|[116|[111|[32|[126|[112|[32|[40|[126|[119|[41|[46|[32|[91|[83|[116|[97|[116|[101|[58|[32|[126|[112|[93|[32|[69|[120|[105|[116|[105|[110|[103|[32|[46|[46|[46|[32|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 640
																																																																						   [Other|[Name|[Pid|[State|[]]]]])
			    %% Line 641
			    call 'erlang':'error'
				('which_children_failed')
		  end
	end
'maybe_get_dynamic_mods'/2 =
    %% Line 644
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    catch
		let <_cor2> =
		    %% Line 645
		    call 'erlang':'self'
			()
		in  %% Line 645
		    call 'gen':'call'
			(_cor0, _cor2, 'get_modules')
	in  %% Line 645
	    case _cor3 of
	      %% Line 646
	      <{'ok',Res}> when 'true' ->
		  %% Line 647
		  Res
	      %% Line 648
	      <Other> when 'true' ->
		  do  %% Line 649
		      call 'error_logger':'error_msg'
			  ([114|[101|[108|[101|[97|[115|[101|[95|[104|[97|[110|[100|[108|[101|[114|[58|[32|[126|[112|[126|[110|[101|[114|[114|[111|[114|[32|[100|[117|[114|[105|[110|[103|[32|[97|[32|[103|[101|[116|[95|[109|[111|[100|[117|[108|[101|[115|[32|[99|[97|[108|[108|[32|[116|[111|[32|[126|[112|[32|[40|[126|[119|[41|[44|[32|[116|[104|[101|[114|[101|[32|[109|[97|[121|[32|[98|[101|[32|[97|[110|[32|[101|[114|[114|[111|[114|[32|[105|[110|[32|[105|[116|[39|[115|[32|[99|[104|[105|[108|[100|[115|[112|[101|[99|[46|[32|[69|[120|[105|[116|[105|[110|[103|[32|[46|[46|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 653
																																																																																							      [Other|[_cor1|[_cor0|[]]]])
		      %% Line 654
		      call 'erlang':'error'
			  ('get_modules_failed')
	    end
'get_supervisor_module'/1 =
    %% Line 677
    fun (_cor0) ->
	let <_cor1> =
	    catch
		%% Line 678
		apply 'get_supervisor_module1'/1
		    (_cor0)
	in  %% Line 678
	    case _cor1 of
	      %% Line 679
	      <{'ok',Module}>
		  when call 'erlang':'is_atom'
			(Module) ->
		  %% Line 680
		  {'ok',Module}
	      %% Line 681
	      <_X_Other> when 'true' ->
		  do  %% Line 682
		      call 'io':'format'
			  ([126|[119|[58|[32|[114|[101|[97|[115|[111|[110|[58|[32|[126|[119|[126|[110]]]]]]]]]]]]]]]], [_cor0|[_X_Other|[]]])
		      %% Line 683
		      {'error','undefined'}
	    end
'get_supervisor_module1'/1 =
    %% Line 686
    fun (_cor0) ->
	%% Line 688
	case call 'sys':'get_status'
		 (_cor0) of
	  <{'status',_X_Pid,{'module',_X_Mod},[_X_PDict|[_X_SysState|[_X_Parent|[_X_Dbg|[Misc|[]]]]]]}> when 'true' ->
	      let <_cor3> =
		  %% Line 690
		  case Misc of
		    %% Line 691
		    <[_X_Name|[State1|[_X_Type|[_X_Time|[]]]]]> when 'true' ->
			%% Line 692
			State1
		    %% Line 693
		    <[_X_Header|[_X_Data|[{'data',[{[83|[116|[97|[116|[101]]]]],State2}|[]]}|[]]]]> when 'true' ->
			%% Line 694
			State2
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor5> =
		      %% Line 697
		      call 'erlang':'element'
			  (9, _cor3)
		  in  %% Line 697
		      {'ok',_cor5}
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'do_soft_purge'/3 =
    %% Line 710
    fun (_cor2,_cor1,_cor0) ->
	let <IsNoOldProcsLeft> =
	    %% Line 711
	    call 'code':'soft_purge'
		(_cor2)
	in  %% Line 712
	    case call 'lists':'keymember'
		     (_cor2, 1, _cor0) of
	      %% Line 713
	      <'true'>
		  when call 'erlang':'=:='
			(IsNoOldProcsLeft,
			 'true') ->
		  call 'lists':'keydelete'
		      (_cor2, 1, _cor0)
	      %% Line 714
	      <'true'> when 'true' ->
		  _cor0
	      %% Line 715
	      <'false'>
		  when call 'erlang':'=:='
			(IsNoOldProcsLeft,
			 'true') ->
		  _cor0
	      %% Line 716
	      <'false'> when 'true' ->
		  [{_cor2,_cor1}|_cor0]
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor4})
		-| ['compiler_generated'] )
	    end
'sync_nodes'/2 =
    %% Line 725
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 726
	    call 'erlang':'node'
		()
	in  let <NNodes> =
		%% Line 726
		call 'lists':'delete'
		    (_cor2, _cor0)
	    in  let <_cor7> =
		    %% Line 727
		    ( fun (_cor5) ->
			  let <_cor4> =
			      %% Line 728
			      call 'erlang':'node'
				  ()
			  in  %% Line 728
			      call 'erlang':'!'
				  ({'release_handler',_cor5}, {'sync_nodes',_cor1,_cor4})
		      -| [{'id',{0,0,'-sync_nodes/2-fun-0-'}}] )
		in  do  %% Line 727
			call 'lists':'foreach'
			    (_cor7, %% Line 730
				    NNodes)
			let <_cor10> =
			    %% Line 731
			    ( fun (_cor8) ->
				  %% Line 732
				  receive
				    %% Line 733
				    <{'sync_nodes',_cor13,_cor14}>
					when let <_cor15> =
					      call 'erlang':'=:='
						  (_cor13, _cor1)
					  in  let <_cor16> =
						  call 'erlang':'=:='
						      (_cor14, _cor8)
					      in  call 'erlang':'and'
						      (_cor15, _cor16) ->
					%% Line 734
					'ok'
				    %% Line 735
				    <{'nodedown',_cor17}>
					when call 'erlang':'=:='
					      (_cor17,
					       _cor8) ->
					%% Line 736
					call 'erlang':'throw'
					    ({'sync_error',{'nodedown',_cor8}})
				  after 'infinity' ->
				    'true'
			      -| [{'id',{0,0,'-sync_nodes/2-fun-1-'}}] )
			in  %% Line 731
			    call 'lists':'foreach'
				(_cor10, %% Line 739
					 NNodes)
'add_vsns'/3 =
    %% Line 741
    fun (_cor2,_cor1,_cor0) ->
	let <OldVsn> =
	    %% Line 742
	    apply 'get_current_vsn'/1
		(_cor2)
	in  let <NewVsn> =
		%% Line 743
		apply 'get_vsn'/1
		    (_cor1)
	    in  %% Line 744
		case call 'lists':'keysearch'
			 (_cor2, 1, _cor0) of
		  %% Line 745
		  <{'value',{_cor11,OldVsn0,NewVsn0}}>
		      when call 'erlang':'=:='
			    (_cor11,
			     _cor2) ->
		      let <_cor6> =
			  %% Line 747
			  apply 'replace_undefined'/2
			      (OldVsn0, OldVsn)
		      in  let <_cor5> =
			      %% Line 748
			      apply 'replace_undefined'/2
				  (NewVsn0, NewVsn)
			  in  %% Line 746
			      call 'lists':'keyreplace'
				  (_cor2, 1, _cor0, {_cor2,_cor6,_cor5})
		  %% Line 749
		  <'false'> when 'true' ->
		      %% Line 750
		      [{_cor2,OldVsn,NewVsn}|_cor0]
		  ( <_cor7> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor7})
		    -| ['compiler_generated'] )
		end
'replace_undefined'/2 =
    %% Line 753
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'undefined',Vsn> when 'true' ->
	      Vsn
	  %% Line 754
	  <Vsn,_cor4> when 'true' ->
	      Vsn
	end
'get_current_vsn'/1 =
    %% Line 768
    fun (_cor0) ->
	let <File> =
	    %% Line 769
	    call 'code':'which'
		(_cor0)
	in  %% Line 770
	    case call 'erl_prim_loader':'get_file'
		     (File) of
	      %% Line 771
	      <{'ok',Bin,_X_File2}> when 'true' ->
		  %% Line 772
		  apply 'get_vsn'/1
		      (Bin)
	      %% Line 773
	      <'error'> when 'true' ->
		  %% Line 776
		  'undefined'
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
'get_vsn'/1 =
    %% Line 785
    fun (_cor0) ->
	%% Line 786
	case call 'beam_lib':'version'
		 (_cor0) of
	  <{'ok',{_X_Mod,Vsn}}> when 'true' ->
	      %% Line 787
	      case call 'misc_supp':'is_string'
		       (Vsn) of
		%% Line 788
		<'true'> when 'true' ->
		    %% Line 789
		    Vsn
		%% Line 790
		<'false'> when 'true' ->
		    %% Line 793
		    case Vsn of
		      %% Line 794
		      <[VsnTerm|[]]> when 'true' ->
			  %% Line 795
			  VsnTerm
		      %% Line 796
		      <_cor5> when 'true' ->
			  %% Line 797
			  Vsn
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('release_handler_1')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('release_handler_1', _cor0)
end