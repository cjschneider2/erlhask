module 'si_sasl_supp' ['abbrevs'/0,
		       'code_change'/3,
		       'do_best_printout'/4,
		       'expand_abbrev'/2,
		       'h'/0,
		       'handle_call'/3,
		       'handle_cast'/2,
		       'handle_info'/2,
		       'help'/0,
		       'init'/1,
		       'make_pid'/1,
		       'make_pid'/3,
		       'module_info'/0,
		       'module_info'/1,
		       'p'/1,
		       'pi'/1,
		       'pi'/2,
		       'pi'/3,
		       'pi'/4,
		       'pi_impl'/2,
		       'ppi'/1,
		       'ppi'/3,
		       'ppi_impl'/1,
		       'process_abbrevs'/0,
		       'si_exec'/2,
		       'start'/0,
		       'start'/1,
		       'start_link'/1,
		       'start_log'/1,
		       'start_log_impl'/1,
		       'status_info'/1,
		       'stop'/0,
		       'stop_log'/0,
		       'terminate'/2,
		       'valid_opt'/1]
    attributes [%% Line 21
		'behaviour' =
		    %% Line 21
		    ['gen_server'],
		%% Line 114
		'type' =
		    %% Line 114
		    [{{'record','state'},[],[]}]]
'h'/0 =
    %% Line 57
    fun () ->
	apply 'print_help'/0
	    ()
'help'/0 =
    %% Line 58
    fun () ->
	apply 'print_help'/0
	    ()
'si_exec'/2 =
    %% Line 60
    fun (_cor1,_cor0) ->
	apply 'call'/1
	    ({'si_exec',_cor1,_cor0})
'start_log'/1 =
    %% Line 62
    fun (_cor0) ->
	%% Line 63
	apply 'call'/1
	    ({'start_log',_cor0})
'stop_log'/0 =
    %% Line 65
    fun () ->
	%% Line 66
	apply 'call'/1
	    ('stop_log')
'abbrevs'/0 =
    %% Line 68
    fun () ->
	let <_cor0> =
	    %% Line 69
	    apply 'process_abbrevs'/0
		()
	in  %% Line 69
	    call 'io':'format'
		([126|[112]], [_cor0|[]])
'pi'/1 =
    %% Line 78
    fun (_cor0) ->
	%% Line 79
	apply 'si_exec'/2
	    ({'si_sasl_supp','pi_impl'}, ['normal'|[_cor0|[]]])
'pi'/2 =
    %% Line 81
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 82
	    apply 'valid_opt'/1
		(_cor1)
	in  %% Line 82
	    apply 'si_exec'/2
		({'si_sasl_supp','pi_impl'}, [_cor2|[_cor0|[]]])
'pi'/3 =
    %% Line 84
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <A,B,C>
	      when try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (A)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(B)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (C)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 85
	      apply 'si_exec'/2
		  ({'si_sasl_supp','pi_impl'}, ['normal'|[{A,B,C}|[]]])
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'pi',3}}] )
	    -| ['compiler_generated'] )
	end
'pi'/4 =
    %% Line 87
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Opt,A,B,C>
	      when try
		    let <_cor4> =
			call 'erlang':'is_integer'
			    (A)
		    in  let <_cor5> =
			    call 'erlang':'is_integer'
				(B)
			in  let <_cor6> =
				call 'erlang':'is_integer'
				    (C)
			    in  let <_cor7> =
				    call 'erlang':'and'
					(_cor5, _cor6)
				in  call 'erlang':'and'
					(_cor4, _cor7)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor8> =
		  %% Line 88
		  apply 'valid_opt'/1
		      (Opt)
	      in  %% Line 88
		  apply 'si_exec'/2
		      ({'si_sasl_supp','pi_impl'}, [_cor8|[{A,B,C}|[]]])
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'pi',4}}] )
	    -| ['compiler_generated'] )
	end
'ppi'/1 =
    %% Line 93
    fun (_cor0) ->
	%% Line 94
	case call 'erlang':'whereis'
		 ('si_server') of
	  %% Line 95
	  <'undefined'> when 'true' ->
	      %% Line 96
	      apply 'ppi_impl'/1
		  (_cor0)
	  %% Line 97
	  <_cor3> when 'true' ->
	      %% Line 98
	      apply 'si_exec'/2
		  ({'si_sasl_supp','ppi_impl'}, [_cor0|[]])
	end
'ppi'/3 =
    %% Line 100
    fun (_cor2,_cor1,_cor0) ->
	%% Line 101
	case call 'erlang':'whereis'
		 ('si_server') of
	  %% Line 102
	  <'undefined'> when 'true' ->
	      %% Line 103
	      apply 'ppi_impl'/1
		  ({_cor2,_cor1,_cor0})
	  %% Line 104
	  <_cor7> when 'true' ->
	      %% Line 105
	      apply 'si_exec'/2
		  ({'si_sasl_supp','ppi_impl'}, [{_cor2,_cor1,_cor0}|[]])
	end
'start'/0 =
    %% Line 116
    fun () ->
	apply 'start'/1
	    ([])
'start'/1 =
    %% Line 117
    fun (_cor0) ->
	%% Line 118
	call 'supervisor':'start_child'
	    ('sasl_sup', %% Line 119
			 {'si_server',{'si_sasl_supp','start_link',[_cor0|[]]},%% Line 120
									       'temporary',%% Line 120
											   'brutal_kill',%% Line 120
													 'worker',%% Line 120
														  ['si_sasl_supp']})
'start_link'/1 =
    %% Line 122
    fun (_cor0) ->
	%% Line 123
	call 'gen_server':'start_link'
	    ({'local','si_server'}, 'si_sasl_supp', [], [])
'stop'/0 =
    %% Line 125
    fun () ->
	do  %% Line 126
	    apply 'call'/1
		('stop')
	    %% Line 127
	    call 'supervisor':'delete_child'
		('sasl_sup', 'si_server')
'init'/1 =
    %% Line 130
    fun (_cor0) ->
	do  %% Line 131
	    call 'erlang':'process_flag'
		('trap_exit', 'true')
	    let <_cor1> =
		%% Line 132
		apply 'get_option'/3
		    (_cor0, 'start_log', 'standard_io')
	    in  do  %% Line 132
		    apply 'start_log_impl'/1
			(_cor1)
		    %% Line 133
		    {'ok',{'state'}}
'handle_call'/3 =
    %% Line 141
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'si_exec',Fun,Args},_X_From,State> when 'true' ->
	      let <_cor3> =
		  catch
		      %% Line 142
		      call 'erlang':'apply'
			  (Fun, Args)
	      in  %% Line 142
		  case _cor3 of
		    %% Line 143
		    <{'EXIT',Reason}> when 'true' ->
			let <_cor4> =
			    %% Line 144
			    call 'erlang':'get'
				('device')
			in  do  %% Line 144
				apply 'print_error'/3
				    (_cor4, %% Line 145
					    [83|[73|[32|[105|[110|[116|[101|[114|[110|[97|[108|[32|[101|[114|[114|[111|[114|[46|[32|[82|[101|[97|[115|[111|[110|[58|[32|[126|[119|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 146
																											    [Reason|[]])
				%% Line 147
				{'stop','shutdown',{'internal_error',Reason},State}
		    %% Line 148
		    <{'error',Reason}> when 'true' ->
			let <_cor5> =
			    %% Line 149
			    call 'erlang':'get'
				('device')
			in  do  %% Line 149
				apply 'print_error'/3
				    (_cor5, [126|[110|[83|[73|[32|[101|[114|[114|[111|[114|[58|[32|[126|[119|[126|[110]]]]]]]]]]]]]]]], [Reason|[]])
				%% Line 150
				{'reply',{'error',Reason},State}
		    %% Line 151
		    <X> when 'true' ->
			%% Line 152
			{'reply',X,State}
		  end
	  %% Line 154
	  <{'start_log',FileName},_X_From,State> when 'true' ->
	      do  %% Line 155
		  apply 'start_log_impl'/1
		      (FileName)
		  %% Line 156
		  {'reply','ok',State}
	  %% Line 157
	  <'stop_log',_X_From,State> when 'true' ->
	      do  %% Line 158
		  apply 'start_log_impl'/1
		      ('standard_io')
		  %% Line 159
		  {'reply','ok',State}
	  %% Line 160
	  <'stop',_X_From,State> when 'true' ->
	      do  %% Line 161
		  apply 'start_log_impl'/1
		      ('standard_io')
		  %% Line 162
		  {'stop','normal','stopped',State}
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'handle_call',3}}] )
	    -| ['compiler_generated'] )
	end
'terminate'/2 =
    %% Line 164
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 165
	    ( call 'erlang':'get'
		  ('device')
	      -| ['result_not_wanted'] )
	in  do  %% Line 165
		apply 'close_device'/1
		    (_cor2)
		%% Line 166
		'ok'
'handle_cast'/2 =
    %% Line 168
    fun (_cor1,_cor0) ->
	%% Line 169
	{'noreply',_cor0}
'handle_info'/2 =
    %% Line 170
    fun (_cor1,_cor0) ->
	%% Line 171
	{'noreply',_cor0}
'code_change'/3 =
    %% Line 172
    fun (_cor2,_cor1,_cor0) ->
	%% Line 173
	{'ok',_cor1}
'close_device'/1 =
    %% Line 175
    fun (_cor0) ->
	case _cor0 of
	  <'standard_io'> when 'true' ->
	      'ok'
	  %% Line 176
	  <Fd> when 'true' ->
	      call 'file':'close'
		  (Fd)
	end
'print_error'/3 =
    %% Line 178
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'standard_io',_cor6,_cor7> when 'true' ->
	      'ok'
	  %% Line 179
	  <Device,Format,Args> when 'true' ->
	      %% Line 180
	      call 'io':'format'
		  (Device, Format, Args)
	end
'get_option'/3 =
    %% Line 182
    fun (_cor2,_cor1,_cor0) ->
	%% Line 183
	case call 'lists':'keysearch'
		 (_cor1, 1, _cor2) of
	  %% Line 184
	  <{'value',{_X_Key,Value}}> when 'true' ->
	      Value
	  %% Line 185
	  <_cor7> when 'true' ->
	      _cor0
	end
'open_log_file'/2 =
    %% Line 188
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'undefined',NewFile> when 'true' ->
	      %% Line 189
	      apply 'open_log_file'/1
		  (NewFile)
	  %% Line 190
	  <'standard_io',NewFile> when 'true' ->
	      %% Line 191
	      apply 'open_log_file'/1
		  (NewFile)
	  %% Line 192
	  <OldFile,NewFile> when 'true' ->
	      let <_X_> =
		  %% Line 193
		  ( call 'file':'close'
			(OldFile)
		    -| ['result_not_wanted'] )
	      in  %% Line 194
		  apply 'open_log_file'/1
		      (NewFile)
	end
'open_log_file'/1 =
    %% Line 196
    fun (_cor0) ->
	case _cor0 of
	  <'standard_io'> when 'true' ->
	      'standard_io'
	  %% Line 197
	  <FileName> when 'true' ->
	      %% Line 198
	      case call 'file':'open'
		       (FileName, ['write']) of
		%% Line 199
		<{'ok',Fd}> when 'true' ->
		    Fd
		%% Line 200
		<Error> when 'true' ->
		    do  %% Line 201
			call 'io':'format'
			    ([115|[105|[95|[115|[97|[115|[108|[95|[115|[117|[112|[112|[58|[32|[67|[97|[110|[110|[111|[116|[32|[111|[112|[101|[110|[32|[102|[105|[108|[101|[32|[39|[126|[115|[39|[32|[40|[126|[119|[41|[46|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 202
																																		[FileName|[Error|[]]])
			do  %% Line 203
			    call 'io':'format'
				([115|[105|[95|[115|[97|[115|[108|[95|[115|[117|[112|[112|[58|[32|[85|[115|[105|[110|[103|[32|[115|[116|[97|[110|[100|[97|[114|[100|[95|[105|[111|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
			    %% Line 204
			    'standard_io'
	      end
	end
'call'/1 =
    %% Line 214
    fun (_cor0) ->
	%% Line 215
	call 'gen_server':'call'
	    ('si_server', _cor0, 'infinity')
'make_pid'/3 =
    %% Line 222
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <A,B,C>
	      when try
		    let <_cor3> =
			call 'erlang':'is_integer'
			    (A)
		    in  let <_cor4> =
			    call 'erlang':'is_integer'
				(B)
			in  let <_cor5> =
				call 'erlang':'is_integer'
				    (C)
			    in  let <_cor6> =
				    call 'erlang':'and'
					(_cor4, _cor5)
				in  call 'erlang':'and'
					(_cor3, _cor6)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor7> =
		  %% Line 223
		  call 'lists':'concat'
		      ([[60]|[A|[[46]|[B|[[46]|[C|[[62]]]]]]]])
	      in  %% Line 223
		  call 'erlang':'list_to_pid'
		      (_cor7)
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'make_pid',3}}] )
	    -| ['compiler_generated'] )
	end
'make_pid'/1 =
    %% Line 224
    fun (_cor0) ->
	case _cor0 of
	  <P>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      P
	  %% Line 225
	  <'undefined'> when 'true' ->
	      'undefined'
	  %% Line 226
	  <P>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      %% Line 227
	      case call 'erlang':'whereis'
		       (P) of
		%% Line 228
		<'undefined'> when 'true' ->
		    let <_cor1> =
			%% Line 229
			apply 'process_abbrevs'/0
			    ()
		    in  %% Line 229
			case apply 'expand_abbrev'/2
				 (P, _cor1) of
			  %% Line 230
			  <{'error',Reason}> when 'true' ->
			      {'error',Reason}
			  %% Line 231
			  <{'value',{_X_Abbrev,FullName}}> when 'true' ->
			      %% Line 232
			      case call 'erlang':'whereis'
				       (FullName) of
				%% Line 233
				<'undefined'> when 'true' ->
				    %% Line 234
				    {'error',{'process not registered',P}}
				%% Line 235
				<Pid> when 'true' ->
				    Pid
			      end
			  ( <_cor3> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor3})
			    -| ['compiler_generated'] )
			end
		%% Line 238
		<Pid> when 'true' ->
		    Pid
	      end
	  %% Line 240
	  <P>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      call 'erlang':'list_to_pid'
		  (P)
	  %% Line 241
	  <{A,B,C}> when 'true' ->
	      apply 'make_pid'/3
		  (A, B, C)
	  %% Line 242
	  <X> when 'true' ->
	      {'error',{'can not make a pid of',X}}
	end
'process_abbrevs'/0 =
    %% Line 244
    fun () ->
	%% Line 245
	[{'init','init'}|[{'fs','file_server'}]]
'expand_abbrev'/2 =
    %% Line 252
    fun (_cor1,_cor0) ->
	%% Line 253
	case call 'lists':'keysearch'
		 (_cor1, 1, _cor0) of
	  %% Line 254
	  <{'value',{Abbrev,FullName}}> when 'true' ->
	      %% Line 255
	      {'value',{Abbrev,FullName}}
	  %% Line 256
	  <_cor6> when 'true' ->
	      %% Line 257
	      case call 'lists':'keysearch'
		       (_cor1, 2, _cor0) of
		%% Line 258
		<{'value',{Abbrev,FullName}}> when 'true' ->
		    %% Line 259
		    {'value',{Abbrev,FullName}}
		%% Line 260
		<_cor7> when 'true' ->
		    %% Line 261
		    {'error',{'invalid process name',_cor1}}
	      end
	end
'status_info'/1 =
    %% Line 271
    fun (_cor0) ->
	case _cor0 of
	  <Pid>
	      when call 'erlang':'is_pid'
		    (_cor0) ->
	      let <_cor1> =
		  catch
		      %% Line 272
		      call 'sys':'get_status'
			  (Pid, 5000)
	      in  %% Line 272
		  case _cor1 of
		    %% Line 273
		    <{'status',_cor4,Type,Info}>
			when call 'erlang':'=:='
			      (_cor4,
			       Pid) ->
			%% Line 274
			{'status_info',Pid,Type,Info}
		    %% Line 275
		    <_cor5> when 'true' ->
			%% Line 276
			{'error',{'process does not respond',Pid}}
		  end
	  %% Line 279
	  <X> when 'true' ->
	      %% Line 280
	      {'error',{'not a pid',X}}
	end
'start_log_impl'/1 =
    %% Line 285
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 286
	    call 'erlang':'get'
		('device')
	in  let <_cor2> =
		%% Line 286
		apply 'open_log_file'/2
		    (_cor1, _cor0)
	    in  %% Line 286
		call 'erlang':'put'
		    ('device', _cor2)
'valid_opt'/1 =
    %% Line 288
    fun (_cor0) ->
	case _cor0 of
	  <'all'> when 'true' ->
	      'all'
	  %% Line 289
	  <_X_Opt> when 'true' ->
	      'normal'
	end
'print_help'/0 =
    %% Line 292
    fun () ->
	do  %% Line 293
	    apply 'p'/1
		([45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[80|[82|[79|[67|[69|[83|[83|[69|[83|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	    do  %% Line 294
		apply 'p'/1
		    ([115|[105|[95|[115|[97|[115|[108|[95|[115|[117|[112|[112|[58|[112|[105|[40|[91|[79|[112|[116|[44|[93|[32|[80|[105|[100|[41|[32|[32|[32|[45|[32|[70|[111|[114|[109|[97|[116|[116|[101|[100|[32|[105|[110|[102|[111|[114|[109|[97|[116|[105|[111|[110|[32|[97|[98|[111|[117|[116|[32|[97|[110|[121|[32|[112|[114|[111|[99|[101|[115|[115|[32|[116|[104|[97|[116]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
		do  %% Line 295
		    apply 'p'/1
			([32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[83|[73|[32|[114|[101|[99|[111|[103|[110|[105|[115|[101|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
		    do  %% Line 296
			apply 'p'/1
			    ([115|[105|[95|[115|[97|[115|[108|[95|[115|[117|[112|[112|[58|[112|[105|[40|[91|[79|[112|[116|[44|[93|[32|[65|[44|[66|[44|[67|[41|[32|[45|[32|[83|[97|[109|[101|[32|[97|[115|[32|[115|[105|[95|[115|[97|[115|[108|[95|[115|[117|[112|[112|[58|[112|[105|[40|[123|[65|[44|[32|[66|[44|[32|[67|[125|[41|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
			do  %% Line 297
			    apply 'p'/1
				([115|[105|[95|[115|[97|[115|[108|[95|[115|[117|[112|[112|[58|[112|[112|[105|[40|[80|[105|[100|[41|[32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[80|[114|[101|[116|[116|[121|[32|[102|[111|[114|[109|[97|[116|[105|[110|[103|[32|[111|[102|[32|[112|[114|[111|[99|[101|[115|[115|[95|[105|[110|[102|[111|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
			    do  %% Line 298
				apply 'p'/1
				    ([32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[87|[111|[114|[107|[115|[32|[102|[111|[114|[32|[97|[110|[121|[32|[112|[114|[111|[99|[101|[115|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
				do  %% Line 299
				    apply 'p'/1
					([45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[77|[73|[83|[67|[32|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32|[45|[32]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
				    do  %% Line 300
					apply 'p'/1
					    ([115|[105|[95|[115|[97|[115|[108|[95|[115|[117|[112|[112|[58|[97|[98|[98|[114|[101|[118|[115|[40|[41|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[76|[105|[115|[116|[115|[32|[118|[97|[108|[105|[100|[32|[97|[98|[98|[114|[101|[118|[105|[97|[116|[105|[111|[110|[115|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
					do  %% Line 301
					    apply 'p'/1
						([115|[105|[95|[115|[97|[115|[108|[95|[115|[117|[112|[112|[58|[115|[116|[97|[114|[116|[95|[108|[111|[103|[40|[70|[105|[108|[101|[78|[110|[97|[109|[101|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
					    do  %% Line 302
						apply 'p'/1
						    ([115|[105|[95|[115|[97|[115|[108|[95|[115|[117|[112|[112|[58|[115|[116|[111|[112|[95|[108|[111|[103|[40|[41]]]]]]]]]]]]]]]]]]]]]]])
						do  %% Line 303
						    apply 'p'/1
							([115|[105|[95|[115|[97|[115|[108|[95|[115|[117|[112|[112|[58|[115|[116|[97|[114|[116|[40|[41|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[83|[116|[97|[114|[116|[115|[32|[83|[116|[97|[116|[117|[115|[32|[73|[110|[115|[112|[101|[99|[116|[105|[111|[110|[32|[40|[116|[104|[101|[32|[115|[105|[95|[115|[101|[114|[118|[101|[114|[41|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
						    do  %% Line 304
							apply 'p'/1
							    ([115|[105|[95|[115|[97|[115|[108|[95|[115|[117|[112|[112|[58|[115|[116|[97|[114|[116|[40|[91|[123|[115|[116|[97|[114|[116|[95|[108|[111|[103|[44|[32|[70|[105|[108|[101|[78|[97|[109|[101|[125|[93|[41]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
							%% Line 305
							apply 'p'/1
							    ([115|[105|[95|[115|[97|[115|[108|[95|[115|[117|[112|[112|[58|[115|[116|[111|[112|[40|[41|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[32|[45|[32|[83|[104|[117|[116|[32|[100|[111|[119|[110|[32|[83|[73|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
'p'/1 =
    %% Line 310
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 311
	    call 'lists':'append'
		(_cor0, [126|[110]])
	in  %% Line 311
	    call 'io':'format'
		(_cor1)
'pi_impl'/2 =
    %% Line 313
    fun (_cor1,_cor0) ->
	%% Line 314
	case apply 'make_pid'/1
		 (_cor0) of
	  %% Line 315
	  <Pid>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      %% Line 316
	      case apply 'status_info'/1
		       (Pid) of
		%% Line 317
		<{'status_info',_cor7,{'module',Module},Data}>
		    when call 'erlang':'=:='
			  (_cor7,
			   Pid) ->
		    %% Line 318
		    apply 'do_best_printout'/4
			(_cor1, Pid, Module, Data)
		%% Line 319
		<{'error',Reason}> when 'true' ->
		    let <_X_> =
			%% Line 320
			apply 'ppi_impl'/1
			    (Pid)
		    in  %% Line 321
			{'error',{[99|[97|[110|[32|[110|[111|[116|[32|[103|[101|[116|[32|[115|[116|[97|[116|[117|[115|[32|[105|[110|[102|[111|[32|[102|[114|[111|[109|[32|[112|[114|[111|[99|[101|[115|[115|[58]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],_cor0,%% Line 323
																															   Reason}}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 325
	  <{'error',Reason}> when 'true' ->
	      %% Line 326
	      {'error',Reason}
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'do_best_printout'/4 =
    %% Line 334
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Opt,Pid,Mod,Data>
	      when call 'erlang':'is_pid'
		    (Pid) ->
	      let <_cor4> =
		  %% Line 335
		  call 'erlang':'get'
		      ('device')
	      in  %% Line 335
		  case apply 'print_info'/5
			   (_cor4, Pid, {Mod,'format_status'}, Opt, Data) of
		    %% Line 336
		    <'ok'> when 'true' ->
			'ok'
		    %% Line 337
		    <{'error',Reason}> when 'true' ->
			let <_X_> =
			    %% Line 338
			    apply 'ppi_impl'/1
				(Pid)
			in  %% Line 339
			    {'error',Reason}
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'do_best_printout',4}}] )
	    -| ['compiler_generated'] )
	end
'ppi_impl'/1 =
    %% Line 342
    fun (_cor0) ->
	%% Line 343
	case apply 'make_pid'/1
		 (_cor0) of
	  %% Line 344
	  <P>
	      when call 'erlang':'is_pid'
		    (P) ->
	      %% Line 345
	      case call 'erlang':'process_info'
		       (P) of
		%% Line 346
		<'undefined'> when 'true' ->
		    %% Line 347
		    {'error',{'dead process',P}}
		%% Line 348
		<PI> when 'true' ->
		    let <_cor2> =
			%% Line 349
			case call 'erlang':'get'
				 ('device') of
			  %% Line 350
			  <'undefined'> when 'true' ->
			      'standard_io'
			  %% Line 351
			  <X> when 'true' ->
			      X
			end
		    in  do  %% Line 353
			    call 'io':'format'
				(_cor2, [126|[110|[80|[114|[101|[116|[116|[121|[32|[80|[114|[111|[99|[101|[115|[115|[32|[73|[110|[102|[111|[126|[110]]]]]]]]]]]]]]]]]]]]]]], [])
			    do  %% Line 354
				call 'io':'format'
				    (_cor2, [45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[45|[126|[110]]]]]]]]]]]]]]]]]]]]], [])
				%% Line 355
				call 'io':'format'
				    (_cor2, [126|[112|[126|[110]]]], [PI|[]])
	      end
	  %% Line 357
	  <_cor7> when 'true' ->
	      {'error',{'no_pid',_cor0}}
	end
'print_info'/5 =
    %% Line 360
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Device,Pid,{Module,Func},Opt,Data> when 'true' ->
	      %% Line 361
	      case call 'erlang':'function_exported'
		       (Module, Func, 2) of
		%% Line 362
		<'true'> when 'true' ->
		    let <_cor5> =
			catch
			    %% Line 363
			    call Module:Func
				(Opt, Data)
		    in  %% Line 363
			case _cor5 of
			  %% Line 364
			  <Format>
			      when call 'erlang':'is_list'
				    (_cor5) ->
			      let <_cor6> =
				  %% Line 366
				  apply 'add_pid_to_format'/2
				      (Pid, Format)
			      in  do  %% Line 365
				      call 'format_lib_supp':'print_info'
					  (Device, 79, _cor6)
				      %% Line 367
				      'ok'
			  %% Line 368
			  <Other> when 'true' ->
			      {'error',{'invalid format',Other}}
			end
		%% Line 370
		<_cor14> when 'true' ->
		    %% Line 371
		    {'error',{'no_such_function',Module,Func}}
	      end
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'print_info',5}}] )
	    -| ['compiler_generated'] )
	end
'add_pid_to_format'/2 =
    %% Line 374
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Pid,[{'header',H}|T]> when 'true' ->
	      %% Line 375
	      [{'header',H}|[{'data',[{[80|[105|[100]]],Pid}|[]]}|T]]
	  %% Line 376
	  <Pid,List> when 'true' ->
	      %% Line 377
	      [{'data',[{[80|[105|[100]]],Pid}|[]]}|List]
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('si_sasl_supp')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('si_sasl_supp', _cor0)
end