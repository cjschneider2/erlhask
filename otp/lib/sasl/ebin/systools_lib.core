module 'systools_lib' ['file_term2binary'/2,
		       'get_dirs'/1,
		       'get_path'/1,
		       'module_info'/0,
		       'module_info'/1,
		       'read_term'/1,
		       'read_term_from_stream'/2,
		       'werror'/2]
    attributes [%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}]]
'file_term2binary'/2 =
    %% Line 34
    fun (_cor1,_cor0) ->
	%% Line 35
	case apply 'read_term'/1
		 (_cor1) of
	  %% Line 36
	  <{'ok',Term}> when 'true' ->
	      let <_cor2> =
		  %% Line 37
		  call 'erlang':'term_to_binary'
		      (Term)
	      in  %% Line 37
		  case call 'file':'write_file'
			   (_cor0, _cor2) of
		    %% Line 38
		    <'ok'> when 'true' ->
			'ok'
		    %% Line 39
		    <{'error',Error}> when 'true' ->
			{'error',{'open',_cor0,Error}}
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	  %% Line 41
	  <Other> when 'true' ->
	      %% Line 42
	      Other
	end
'read_term'/1 =
    %% Line 52
    fun (_cor0) ->
	%% Line 53
	case call 'file':'open'
		 (_cor0, ['read']) of
	  %% Line 54
	  <{'ok',Stream}> when 'true' ->
	      let <Res> =
		  %% Line 55
		  apply 'read_term_from_stream'/2
		      (Stream, _cor0)
	      in  %% Line 56
		  case call 'file':'close'
			   (Stream) of
		    %% Line 57
		    <'ok'> when 'true' ->
			Res
		    %% Line 58
		    <{'error',Error}> when 'true' ->
			{'error',{'close',_cor0,Error}}
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor2})
		      -| ['compiler_generated'] )
		  end
	  %% Line 60
	  <{'error',Error}> when 'true' ->
	      %% Line 61
	      {'error',{'open',_cor0,Error}}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'read_term_from_stream'/2 =
    %% Line 64
    fun (_cor1,_cor0) ->
	let <_X_> =
	    %% Line 65
	    ( call 'epp':'set_encoding'
		  (_cor1)
	      -| ['result_not_wanted'] )
	in  %% Line 67
	    case call 'io':'request'
		     (_cor1, {'get_until','','erl_scan','tokens',[1]}) of
	      %% Line 68
	      <{'ok',Toks,_X_EndLine}> when 'true' ->
		  %% Line 69
		  case call 'erl_parse':'parse_term'
			   (Toks) of
		    %% Line 70
		    <{'ok',Term}> when 'true' ->
			%% Line 71
			{'ok',Term}
		    %% Line 72
		    <{'error',Error}> when 'true' ->
			%% Line 73
			{'error',{'parse',_cor0,Error}}
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor4})
		      -| ['compiler_generated'] )
		  end
	      %% Line 75
	      <{'error',_X_E,_X_EndLine}> when 'true' ->
		  %% Line 76
		  {'error',{'read',_cor0}}
	      %% Line 77
	      <{'eof',_X_EndLine}> when 'true' ->
		  %% Line 78
		  {'error',{'read',_cor0}}
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor5})
		-| ['compiler_generated'] )
	    end
'get_dirs'/1 =
    %% Line 94
    fun (_cor0) ->
	case _cor0 of
	  <RegPath>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <Names> =
		  %% Line 95
		  call 'filename':'split'
		      (RegPath)
	      in  let <ExpNames> =
		      %% Line 96
		      apply 'expand_names'/1
			  (Names)
		  in  catch
			  %% Line 97
			  apply 'get_dirs'/3
			      (ExpNames, [], 'true')
	  %% Line 98
	  <_cor4> when 'true' ->
	      %% Line 99
	      {'error','badarg'}
	end
'get_path'/1 =
    %% Line 101
    fun (_cor0) ->
	case _cor0 of
	  <RegPath>
	      when call 'erlang':'is_list'
		    (_cor0) ->
	      let <F> =
		  %% Line 102
		  ( fun (_cor2) ->
			%% Line 103
			case apply 'get_dirs'/1
				 (_cor2) of
			  %% Line 104
			  <{'ok',Dirs}> when 'true' ->
			      {'true',Dirs}
			  %% Line 105
			  <_cor7> when 'true' ->
			      'false'
			end
		    -| [{'id',{0,0,'-get_path/1-fun-0-'}}] )
	      in  let <_cor5> =
		      %% Line 108
		      call 'lists':'zf'
			  (F, RegPath)
		  in  %% Line 108
		      apply 'flat'/2
			  (_cor5, [])
	  %% Line 109
	  <_cor8> when 'true' ->
	      %% Line 110
	      []
	end
'expand_names'/1 =
    %% Line 121
    fun (_cor0) ->
	let <_cor5> =
	    %% Line 122
	    ( fun (_cor3) ->
		  case _cor3 of
		    <[42]> when 'true' ->
			%% Line 123
			{'true',[91|[94|[47|[93|[43]]]]]}
		    %% Line 124
		    <N> when 'true' ->
			%% Line 125
			case call 'lists':'member'
				 (42, N) of
			  %% Line 126
			  <'true'> when 'true' ->
			      let <_cor1> =
				  apply 'expand'/2
				      (N, [])
			      in  {'true',_cor1}
			  %% Line 127
			  <_cor7> when 'true' ->
			      {'false',N}
			end
		  end
	      -| [{'id',{0,0,'-expand_names/1-fun-0-'}}] )
	in  %% Line 122
	    call 'lists':'map'
		(_cor5, _cor0)
'expand'/2 =
    %% Line 131
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[42|T],Ack> when 'true' ->
	      let <_cor2> =
		  %% Line 132
		  call 'erlang':'++'
		      ([42|[93|[47|[94|[91]]]]], Ack)
	      in  %% Line 132
		  apply 'expand'/2
		      (T, _cor2)
	  %% Line 133
	  <[H|T],Ack> when 'true' ->
	      %% Line 134
	      apply 'expand'/2
		  (T, [H|Ack])
	  %% Line 135
	  <[],Ack> when 'true' ->
	      %% Line 136
	      call 'lists':'reverse'
		  (Ack)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'expand',2}}] )
	    -| ['compiler_generated'] )
	end
'get_dirs'/3 =
    %% Line 146
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'false',Name}|T],F,Root> when 'true' ->
	      let <_cor3> =
		  %% Line 147
		  apply 'add_dir'/3
		      (Name, F, Root)
	      in  %% Line 147
		  apply 'get_dirs'/3
		      (T, _cor3, 'false')
	  %% Line 148
	  <[{'true',RegName}|T],F,Root> when 'true' ->
	      let <_cor4> =
		  %% Line 149
		  apply 'add_dirs'/3
		      (RegName, F, Root)
	      in  %% Line 149
		  apply 'get_dirs'/3
		      (T, _cor4, 'false')
	  %% Line 150
	  <[],F,_cor8> when 'true' ->
	      %% Line 151
	      {'ok',F}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'get_dirs',3}}] )
	    -| ['compiler_generated'] )
	end
'add_dir'/3 =
    %% Line 153
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Name,[],'true'> when 'true' ->
	      %% Line 154
	      case apply 'dir_p'/1
		       (Name) of
		%% Line 155
		<'true'> when 'true' ->
		    [Name|[]]
		%% Line 156
		<_cor12> when 'true' ->
		    []
	      end
	  %% Line 158
	  <Name,Dirs,_X_Root> when 'true' ->
	      let <_cor8> =
		  %% Line 159
		  ( fun (_cor6) ->
			let <D> =
			    %% Line 160
			    call 'filename':'join'
				(_cor6, Name)
			in  %% Line 161
			    case apply 'dir_p'/1
				     (D) of
			      %% Line 162
			      <'true'> when 'true' ->
				  {'true',D}
			      %% Line 163
			      <_cor13> when 'true' ->
				  'false'
			    end
		    -| [{'id',{0,0,'-add_dir/3-fun-0-'}}] )
	      in  %% Line 159
		  call 'lists':'zf'
		      (_cor8, %% Line 165
			      Dirs)
	end
'add_dirs'/3 =
    %% Line 167
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <RegName,_X_Dirs,'true'> when 'true' ->
	      %% Line 168
	      case apply 'regexp_match'/3
		       (RegName, [46], 'true') of
		%% Line 169
		<{'true',AddDirs}> when 'true' ->
		    AddDirs
		%% Line 170
		<_cor11> when 'true' ->
		    []
	      end
	  %% Line 172
	  <RegName,Dirs,Root> when 'true' ->
	      let <Fun> =
		  %% Line 173
		  ( fun (_cor4) ->
			%% Line 174
			apply 'regexp_match'/3
			    (RegName, _cor4, Root)
		    -| [{'id',{0,0,'-add_dirs/3-fun-0-'}}] )
	      in  let <_cor7> =
		      %% Line 176
		      call 'lists':'zf'
			  (Fun, Dirs)
		  in  %% Line 176
		      apply 'flat'/2
			  (_cor7, [])
	end
'regexp_match'/3 =
    %% Line 185
    fun (_cor2,_cor1,_cor0) ->
	%% Line 186
	case call 'file':'list_dir'
		 (_cor1) of
	  %% Line 187
	  <{'ok',Files}>
	      when try
		    let <_cor3> =
			call 'erlang':'length'
			    (Files)
		    in  call 'erlang':'>'
			    (_cor3, 0)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 188
	      case call 're':'compile'
		       (_cor2, ['unicode']) of
		%% Line 189
		<{'ok',MP}> when 'true' ->
		    let <FR> =
			%% Line 190
			( fun (_cor7) ->
			      %% Line 191
			      case call 're':'run'
				       (_cor7, MP, [{'capture','first','list'}]) of
				%% Line 192
				<{'match',[_cor16|[]]}>
				    when call 'erlang':'=:='
					  (_cor16,
					   _cor7) ->
				    let <DirF> =
					%% Line 193
					apply 'join'/3
					    (_cor1, _cor7, _cor0)
				    in  %% Line 194
					case apply 'dir_p'/1
						 (DirF) of
					  %% Line 195
					  <'true'> when 'true' ->
					      %% Line 196
					      {'true',DirF}
					  %% Line 197
					  <_cor17> when 'true' ->
					      %% Line 198
					      'false'
					end
				%% Line 200
				<_cor18> when 'true' ->
				    %% Line 201
				    'false'
			      end
			  -| [{'id',{0,0,'-regexp_match/3-fun-0-'}}] )
		    in  let <_cor10> =
			    %% Line 204
			    call 'lists':'zf'
				(FR, Files)
			in  %% Line 204
			    {'true',_cor10}
		%% Line 205
		<_cor19> when 'true' ->
		    %% Line 206
		    'false'
	      end
	  %% Line 208
	  <_cor20> when 'true' ->
	      %% Line 209
	      'false'
	end
'join'/3 =
    %% Line 213
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <_cor6,F,'true'> when 'true' ->
	      F
	  %% Line 214
	  <Dir,F,_cor7> when 'true' ->
	      call 'filename':'join'
		  (Dir, F)
	end
'dir_p'/1 =
    %% Line 216
    fun (_cor0) ->
	%% Line 217
	case call 'file':'read_file_info'
		 (_cor0) of
	  %% Line 218
	  <{'ok',Info = {'file_info',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21}}>
	      when call 'erlang':'=:='
		    (_cor10,
		     'directory') ->
	      'true'
	  %% Line 219
	  <_cor22> when 'true' ->
	      'false'
	end
'flat'/2 =
    %% Line 223
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],Ack>
	      when try
		    let <_cor2> =
			call 'erlang':'hd'
			    (H)
		    in  call 'erlang':'is_list'
			    (_cor2)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_cor3> =
		  %% Line 224
		  call 'lists':'reverse'
		      (H)
	      in  let <_cor4> =
		      %% Line 224
		      call 'erlang':'++'
			  (_cor3, Ack)
		  in  %% Line 224
		      apply 'flat'/2
			  (T, _cor4)
	  %% Line 225
	  <[[]|T],Ack> when 'true' ->
	      %% Line 226
	      apply 'flat'/2
		  (T, Ack)
	  %% Line 227
	  <[H|T],Ack> when 'true' ->
	      %% Line 228
	      apply 'flat'/2
		  (T, [H|Ack])
	  %% Line 229
	  <[],Ack> when 'true' ->
	      %% Line 230
	      call 'lists':'reverse'
		  (Ack)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'flat',2}}] )
	    -| ['compiler_generated'] )
	end
'werror'/2 =
    %% Line 232
    fun (_cor1,_cor0) ->
	%% Line 233
	( case call 'lists':'member'
		   ('warnings_as_errors', _cor1) of
	    ( <( 'true'
		 -| ['compiler_generated'] )> when 'true' ->
		  call 'erlang':'=/='
		      (_cor0, [])
	      -| ['compiler_generated'] )
	    ( <( 'false'
		 -| ['compiler_generated'] )> when 'true' ->
		  'false'
	      -| ['compiler_generated'] )
	    ( <_cor2> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {( 'badarg'
			      -| ['compiler_generated'] ),_cor2}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('systools_lib')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('systools_lib', _cor0)
end