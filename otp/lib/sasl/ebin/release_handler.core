module 'release_handler' ['check_install_release'/1,
			  'check_install_release'/2,
			  'code_change'/3,
			  'create_RELEASES'/1,
			  'create_RELEASES'/2,
			  'create_RELEASES'/4,
			  'do_copy_file'/2,
			  'do_copy_files'/1,
			  'do_copy_files'/2,
			  'do_ensure_RELEASES'/1,
			  'do_remove_files'/1,
			  'do_rename_files'/1,
			  'do_write_file'/2,
			  'do_write_file'/3,
			  'do_write_release'/3,
			  'downgrade_app'/2,
			  'downgrade_app'/3,
			  'downgrade_script'/3,
			  'eval_appup_script'/4,
			  'handle_call'/3,
			  'handle_cast'/2,
			  'handle_info'/2,
			  'init'/1,
			  'install_file'/2,
			  'install_release'/1,
			  'install_release'/2,
			  'make_permanent'/1,
			  'module_info'/0,
			  'module_info'/1,
			  'new_emulator_upgrade'/2,
			  'reboot_old_release'/1,
			  'remove_file'/1,
			  'remove_release'/1,
			  'set_removed'/1,
			  'set_unpacked'/2,
			  'start_link'/0,
			  'terminate'/2,
			  'unpack_release'/1,
			  'upgrade_app'/2,
			  'upgrade_script'/2,
			  'which_releases'/0,
			  'which_releases'/1]
    attributes [%% Line 20
		'behaviour' =
		    %% Line 20
		    ['gen_server'],
		%% Line 24
		'type' =
		    %% Line 24
		    [{{'record','file_info'},[{'typed_record_field',{'record_field',25,{'atom',25,'size'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'type'}},{'type',26,'union',[{'atom',26,'undefined'}|[{'atom',26,'device'}|[{'atom',26,'directory'}|[{'atom',26,'other'}|[{'atom',26,'regular'}|[{'atom',26,'symlink'}]]]]]]}}|[{'typed_record_field',{'record_field',27,{'atom',27,'access'}},{'type',27,'union',[{'atom',27,'undefined'}|[{'atom',27,'read'}|[{'atom',27,'write'}|[{'atom',27,'read_write'}|[{'atom',27,'none'}]]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'atime'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'remote_type',28,[{'atom',28,'file'}|[{'atom',28,'date_time'}|[[]]]]}|[{'type',28,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',32,{'atom',32,'mtime'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'remote_type',32,[{'atom',32,'file'}|[{'atom',32,'date_time'}|[[]]]]}|[{'type',32,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',34,{'atom',34,'ctime'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'remote_type',34,[{'atom',34,'file'}|[{'atom',34,'date_time'}|[[]]]]}|[{'type',34,'non_neg_integer',[]}]]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'mode'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'links'}},{'type',43,'union',[{'atom',43,'undefined'}|[{'type',43,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'major_device'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'minor_device'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'inode'}},{'type',53,'union',[{'atom',53,'undefined'}|[{'type',53,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'uid'}},{'type',54,'union',[{'atom',54,'undefined'}|[{'type',54,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'gid'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'non_neg_integer',[]}]]}}]]]]]]]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','file_descriptor'},[{'typed_record_field',{'record_field',59,{'atom',59,'module'}},{'type',59,'union',[{'atom',59,'undefined'}|[{'type',59,'module',[]}]]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'data'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'term',[]}]]}}]],[]}],
		%% Line 47
		'type' =
		    %% Line 47
		    [{{'record','state'},[{'record_field',47,{'atom',47,'unpurged'},{'nil',47}}|[{'record_field',48,{'atom',48,'root'}}|[{'record_field',49,{'atom',49,'rel_dir'}}|[{'record_field',50,{'atom',50,'releases'}}|[{'record_field',51,{'atom',51,'timer'}}|[{'record_field',52,{'atom',52,'start_prg'}}|[{'record_field',53,{'atom',53,'masters'},{'atom',53,'false'}}|[{'record_field',54,{'atom',54,'client_dir'},{'atom',54,'false'}}|[{'record_field',55,{'atom',55,'static_emulator'},{'atom',55,'false'}}|[{'record_field',56,{'atom',56,'pre_sync_nodes'},{'nil',56}}]]]]]]]]]],[]}],
		%% Line 75
		'type' =
		    %% Line 75
		    [{{'record','release'},[{'record_field',75,{'atom',75,'name'}}|[{'record_field',75,{'atom',75,'vsn'}}|[{'record_field',75,{'atom',75,'erts_vsn'}}|[{'record_field',75,{'atom',75,'libs'},{'nil',75}}|[{'record_field',75,{'atom',75,'status'}}]]]]],[]}]]
'start_link'/0 =
    %% Line 141
    fun () ->
	%% Line 142
	call 'gen_server':'start_link'
	    ({'local','release_handler'}, 'release_handler', [], [])
'unpack_release'/1 =
    %% Line 157
    fun (_cor0) ->
	%% Line 158
	apply 'call'/1
	    ({'unpack_release',_cor0})
'check_install_release'/1 =
    %% Line 175
    fun (_cor0) ->
	%% Line 176
	apply 'check_install_release'/2
	    (_cor0, [])
'check_install_release'/2 =
    %% Line 178
    fun (_cor1,_cor0) ->
	%% Line 179
	case apply 'check_check_install_options'/2
		 (_cor0, 'false') of
	  %% Line 180
	  <{'ok',Purge}> when 'true' ->
	      %% Line 181
	      apply 'call'/1
		  ({'check_install_release',_cor1,Purge})
	  %% Line 182
	  <Error> when 'true' ->
	      %% Line 183
	      Error
	end
'check_check_install_options'/2 =
    %% Line 186
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <['purge'|Opts],_cor4> when 'true' ->
	      %% Line 187
	      apply 'check_check_install_options'/2
		  (Opts, 'true')
	  %% Line 188
	  <[Illegal|_cor5],_X_Purge> when 'true' ->
	      %% Line 189
	      {'error',{'illegal_option',Illegal}}
	  %% Line 190
	  <[],Purge> when 'true' ->
	      %% Line 191
	      {'ok',Purge}
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'check_check_install_options',2}}] )
	    -| ['compiler_generated'] )
	end
'install_release'/1 =
    %% Line 209
    fun (_cor0) ->
	%% Line 210
	apply 'call'/1
	    ({'install_release',_cor0,'restart',[]})
'install_release'/2 =
    %% Line 213
    fun (_cor1,_cor0) ->
	%% Line 214
	case apply 'check_install_options'/3
		 (_cor0, 'restart', []) of
	  %% Line 215
	  <{'ok',ErrorAction,InstallOpt}> when 'true' ->
	      %% Line 216
	      apply 'call'/1
		  ({'install_release',_cor1,ErrorAction,InstallOpt})
	  %% Line 217
	  <Error> when 'true' ->
	      %% Line 218
	      Error
	end
'check_install_options'/3 =
    %% Line 221
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Opt|Opts],ErrAct,InstOpts> when 'true' ->
	      %% Line 222
	      case apply 'install_option'/1
		       (Opt) of
		%% Line 223
		<{'error_action',EAct}> when 'true' ->
		    %% Line 224
		    apply 'check_install_options'/3
			(Opts, EAct, InstOpts)
		%% Line 225
		<'true'> when 'true' ->
		    %% Line 226
		    apply 'check_install_options'/3
			(Opts, ErrAct, [Opt|InstOpts])
		%% Line 227
		<'false'> when 'true' ->
		    %% Line 228
		    {'error',{'illegal_option',Opt}}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 230
	  <[],ErrAct,InstOpts> when 'true' ->
	      %% Line 231
	      {'ok',ErrAct,InstOpts}
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'check_install_options',3}}] )
	    -| ['compiler_generated'] )
	end
'install_option'/1 =
    %% Line 233
    fun (_cor0) ->
	case _cor0 of
	  <Opt = {'error_action','reboot'}> when 'true' ->
	      Opt
	  %% Line 234
	  <Opt = {'error_action','restart'}> when 'true' ->
	      Opt
	  %% Line 235
	  <{'code_change_timeout',TimeOut}> when 'true' ->
	      %% Line 236
	      apply 'check_timeout'/1
		  (TimeOut)
	  %% Line 237
	  <{'suspend_timeout',TimeOut}> when 'true' ->
	      %% Line 238
	      apply 'check_timeout'/1
		  (TimeOut)
	  %% Line 239
	  <{'update_paths',Bool}>
	      when let <_cor1> =
		    call 'erlang':'=:='
			(Bool, 'true')
		in  let <_cor2> =
			call 'erlang':'=:='
			    (Bool, 'false')
		    in  call 'erlang':'or'
			    (_cor1, _cor2) ->
	      %% Line 240
	      'true'
	  %% Line 241
	  <_X_Opt> when 'true' ->
	      'false'
	end
'check_timeout'/1 =
    %% Line 243
    fun (_cor0) ->
	case _cor0 of
	  <'infinity'> when 'true' ->
	      'true'
	  %% Line 244
	  <Int>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'>'
			    (_cor0, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      'true'
	  %% Line 245
	  <_X_Else> when 'true' ->
	      'false'
	end
'new_emulator_upgrade'/2 =
    %% Line 255
    fun (_cor1,_cor0) ->
	let <Result> =
	    %% Line 256
	    apply 'call'/1
		({'install_release',_cor1,'reboot',_cor0})
	in  do  %% Line 257
		call 'error_logger':'info_msg'
		    (%% Line 258
		     [126|[119|[58|[105|[110|[115|[116|[97|[108|[108|[95|[114|[101|[108|[101|[97|[115|[101|[40|[126|[112|[44|[126|[112|[41|[32|[99|[111|[109|[112|[108|[101|[116|[101|[100|[32|[97|[102|[116|[101|[114|[32|[110|[111|[100|[101|[32|[114|[101|[115|[116|[97|[114|[116|[32|[119|[105|[116|[104|[32|[110|[101|[119|[32|[101|[109|[117|[108|[97|[116|[111|[114|[32|[118|[101|[114|[115|[105|[111|[110|[126|[110|[82|[101|[115|[117|[108|[116|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 259
																																																																						    ['release_handler'|[_cor1|[_cor0|[Result|[]]]]])
		%% Line 260
		Result
'make_permanent'/1 =
    %% Line 271
    fun (_cor0) ->
	%% Line 272
	apply 'call'/1
	    ({'make_permanent',_cor0})
'reboot_old_release'/1 =
    %% Line 277
    fun (_cor0) ->
	%% Line 278
	apply 'call'/1
	    ({'reboot_old_release',_cor0})
'remove_release'/1 =
    %% Line 287
    fun (_cor0) ->
	%% Line 288
	apply 'call'/1
	    ({'remove_release',_cor0})
'set_unpacked'/2 =
    %% Line 306
    fun (_cor1,_cor0) ->
	%% Line 307
	apply 'call'/1
	    ({'set_unpacked',_cor1,_cor0})
'set_removed'/1 =
    %% Line 316
    fun (_cor0) ->
	%% Line 317
	apply 'call'/1
	    ({'set_removed',_cor0})
'install_file'/2 =
    %% Line 327
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Vsn,File>
	      when call 'erlang':'is_list'
		    (File) ->
	      %% Line 328
	      apply 'call'/1
		  ({'install_file',File,Vsn})
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'install_file',2}}] )
	    -| ['compiler_generated'] )
	end
'which_releases'/0 =
    %% Line 334
    fun () ->
	%% Line 335
	apply 'call'/1
	    ('which_releases')
'which_releases'/1 =
    %% Line 341
    fun (_cor0) ->
	let <Releases> =
	    %% Line 342
	    apply 'which_releases'/0
		()
	in  %% Line 343
	    apply 'get_releases_with_status'/3
		(Releases, _cor0, [])
'check_script'/2 =
    %% Line 348
    fun (_cor1,_cor0) ->
	%% Line 349
	call 'release_handler_1':'check_script'
	    (_cor1, _cor0)
'eval_script'/5 =
    %% Line 366
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	catch
	    %% Line 367
	    call 'release_handler_1':'eval_script'
		(_cor4, _cor3, _cor2, _cor1, _cor0)
'create_RELEASES'/1 =
    %% Line 374
    fun (_cor0) ->
	case _cor0 of
	  <[Root|[RelFile|LibDirs]]> when 'true' ->
	      let <_cor1> =
		  %% Line 375
		  call 'filename':'join'
		      (Root, [114|[101|[108|[101|[97|[115|[101|[115]]]]]]]])
	      in  %% Line 375
		  apply 'create_RELEASES'/4
		      (Root, _cor1, RelFile, LibDirs)
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'create_RELEASES',1}}] )
	    -| ['compiler_generated'] )
	end
'create_RELEASES'/2 =
    %% Line 377
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 378
	    call 'filename':'join'
		(_cor1, [114|[101|[108|[101|[97|[115|[101|[115]]]]]]]])
	in  %% Line 378
	    apply 'create_RELEASES'/4
		(_cor1, _cor2, _cor0, [])
'create_RELEASES'/4 =
    %% Line 380
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    catch
		%% Line 381
		apply 'check_rel'/4
		    (_cor3, _cor1, _cor0, 'false')
	in  %% Line 381
	    case _cor4 of
	      %% Line 382
	      <{'error',Reason}> when 'true' ->
		  %% Line 383
		  {'error',Reason}
	      %% Line 384
	      <Rel> when 'true' ->
		  %% Line 385
		  case Rel of
		    <{'release',_cor14,_cor15,_cor16,_cor17,_cor18}> when 'true' ->
			let <_cor7> =
			    call 'erlang':'setelement'
				(6, Rel, 'permanent')
			in  catch
				%% Line 386
				apply 'write_releases'/3
				    (_cor2, [_cor7|[]], 'false')
		    ( <_cor19> when 'true' ->
			  ( call ( 'erlang'
				   -| ['compiler_generated'] ):( 'error'
								 -| ['compiler_generated'] )
				(( {'badrecord','release'}
				   -| ['compiler_generated'] ))
			    -| ['compiler_generated'] )
		      -| ['compiler_generated'] )
		  end
	    end
'upgrade_app'/2 =
    %% Line 399
    fun (_cor1,_cor0) ->
	%% Line 400
	try
	    apply 'upgrade_script'/2
		(_cor1, _cor0)
	of <_cor2> ->
	    case _cor2 of
	      %% Line 401
	      <{'ok',NewVsn,Script}> when 'true' ->
		  %% Line 402
		  apply 'eval_appup_script'/4
		      (_cor1, NewVsn, _cor0, Script)
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'try_clause',_cor3})
		-| ['compiler_generated'] )
	    end
	catch <_cor6,_cor5,_cor4> ->
	    case <_cor6,_cor5,_cor4> of
	      %% Line 404
	      <'throw',Reason,_cor9> when 'true' ->
		  %% Line 405
		  {'error',Reason}
	      ( <_cor6,_cor5,_cor4> when 'true' ->
		    primop 'raise'
			(_cor4, _cor5)
		-| ['compiler_generated'] )
	    end
'downgrade_app'/2 =
    %% Line 421
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 422
	    call 'filename':'basename'
		(_cor0)
	in  %% Line 422
	    case call 'string':'tokens'
		     (_cor2, [45]) of
	      %% Line 423
	      <[_X_AppS|[OldVsn|[]]]> when 'true' ->
		  %% Line 424
		  apply 'downgrade_app'/3
		      (_cor1, OldVsn, _cor0)
	      %% Line 425
	      <_cor6> when 'true' ->
		  %% Line 426
		  {'error',{'unknown_version',_cor1}}
	    end
'downgrade_app'/3 =
    %% Line 428
    fun (_cor2,_cor1,_cor0) ->
	%% Line 429
	try
	    apply 'downgrade_script'/3
		(_cor2, _cor1, _cor0)
	of <_cor3> ->
	    case _cor3 of
	      %% Line 430
	      <{'ok',Script}> when 'true' ->
		  %% Line 431
		  apply 'eval_appup_script'/4
		      (_cor2, _cor1, _cor0, Script)
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'try_clause',_cor4})
		-| ['compiler_generated'] )
	    end
	catch <_cor7,_cor6,_cor5> ->
	    case <_cor7,_cor6,_cor5> of
	      %% Line 433
	      <'throw',Reason,_cor11> when 'true' ->
		  %% Line 434
		  {'error',Reason}
	      ( <_cor7,_cor6,_cor5> when 'true' ->
		    primop 'raise'
			(_cor5, _cor6)
		-| ['compiler_generated'] )
	    end
'upgrade_script'/2 =
    %% Line 437
    fun (_cor1,_cor0) ->
	let <OldVsn> =
	    %% Line 438
	    apply 'ensure_running'/1
		(_cor1)
	in  let <OldDir> =
		%% Line 439
		call 'code':'lib_dir'
		    (_cor1)
	    in  %% Line 440
		case apply 'find_script'/4
			 (_cor1, _cor0, OldVsn, 'up') of
		  <{NewVsn,Script}> when 'true' ->
		      let <OldAppl> =
			  %% Line 441
			  apply 'read_app'/3
			      (_cor1, OldVsn, OldDir)
		      in  let <NewAppl> =
			      %% Line 442
			      apply 'read_app'/3
				  (_cor1, NewVsn, _cor0)
			  in  %% Line 443
			      case call 'systools_rc':'translate_scripts'
				       ('up', %% Line 444
					      [Script|[]], %% Line 444
							   [NewAppl|[]], %% Line 444
									 [OldAppl|[]]) of
				%% Line 445
				<{'ok',LowLevelScript}> when 'true' ->
				    %% Line 446
				    {'ok',NewVsn,LowLevelScript}
				%% Line 447
				<{'error',_X_SystoolsRC,Reason}> when 'true' ->
				    %% Line 448
				    call 'erlang':'throw'
					(Reason)
				( <_cor7> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor7})
				  -| ['compiler_generated'] )
			      end
		  ( <_cor4> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor4})
		    -| ['compiler_generated'] )
		end
'downgrade_script'/3 =
    %% Line 451
    fun (_cor2,_cor1,_cor0) ->
	let <NewVsn> =
	    %% Line 452
	    apply 'ensure_running'/1
		(_cor2)
	in  let <NewDir> =
		%% Line 453
		call 'code':'lib_dir'
		    (_cor2)
	    in  %% Line 454
		case apply 'find_script'/4
			 (_cor2, NewDir, _cor1, 'down') of
		  <{_cor12,Script}>
		      when call 'erlang':'=:='
			    (_cor12,
			     NewVsn) ->
		      let <OldAppl> =
			  %% Line 455
			  apply 'read_app'/3
			      (_cor2, _cor1, _cor0)
		      in  let <NewAppl> =
			      %% Line 456
			      apply 'read_app'/3
				  (_cor2, NewVsn, NewDir)
			  in  %% Line 457
			      case call 'systools_rc':'translate_scripts'
				       ('dn', %% Line 458
					      [Script|[]], %% Line 458
							   [OldAppl|[]], %% Line 458
									 [NewAppl|[]]) of
				%% Line 459
				<{'ok',LowLevelScript}> when 'true' ->
				    %% Line 460
				    {'ok',LowLevelScript}
				%% Line 461
				<{'error',_X_SystoolsRC,Reason}> when 'true' ->
				    %% Line 462
				    call 'erlang':'throw'
					(Reason)
				( <_cor8> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor8})
				  -| ['compiler_generated'] )
			      end
		  ( <_cor5> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor5})
		    -| ['compiler_generated'] )
		end
'eval_appup_script'/4 =
    %% Line 465
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <EnvBefore> =
	    %% Line 466
	    call 'application_controller':'prep_config_change'
		()
	in  let <AppSpecL> =
		%% Line 467
		apply 'read_appspec'/2
		    (_cor3, _cor1)
	    in  let <Res> =
		    %% Line 468
		    call 'release_handler_1':'eval_script'
			(_cor0, %% Line 469
				[], %% Line 470
				    [{_cor3,_cor2,_cor1}|[]], %% Line 471
							      [{_cor3,_cor2,_cor1}|[]], %% Line 472
											[])
		in  do  %% Line 473
			case Res of
			  %% Line 474
			  <{'ok',_X_Unpurged}> when 'true' ->
			      do  %% Line 475
				  call 'application_controller':'change_application_data'
				      (AppSpecL, [])
				  %% Line 476
				  call 'application_controller':'config_change'
				      (EnvBefore)
			  %% Line 477
			  <_X_Res> when 'true' ->
			      'ok'
			end
			%% Line 480
			Res
'ensure_running'/1 =
    %% Line 482
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 483
	    call 'application':'which_applications'
		()
	in  %% Line 483
	    case call 'lists':'keysearch'
		     (_cor0, 1, _cor1) of
	      %% Line 484
	      <{'value',{_X_App,_X_Descr,Vsn}}> when 'true' ->
		  %% Line 485
		  Vsn
	      %% Line 486
	      <'false'> when 'true' ->
		  %% Line 487
		  call 'erlang':'throw'
		      ({'app_not_running',_cor0})
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
'find_script'/4 =
    %% Line 490
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 491
	    call 'erlang':'atom_to_list'
		(_cor3)
	in  let <_cor5> =
		%% Line 491
		call 'erlang':'++'
		    (_cor4, [46|[97|[112|[112|[117|[112]]]]]])
	    in  let <Appup> =
		    %% Line 491
		    call 'filename':'join'
			([_cor2|[[101|[98|[105|[110]]]]|[_cor5|[]]]])
		in  %% Line 492
		    case call 'file':'consult'
			     (Appup) of
		      %% Line 493
		      <{'ok',[{NewVsn,UpFromScripts,DownToScripts}|[]]}> when 'true' ->
			  let <_cor8> =
			      %% Line 494
			      case _cor0 of
				%% Line 495
				<'up'> when 'true' ->
				    UpFromScripts
				%% Line 496
				<'down'> when 'true' ->
				    DownToScripts
				( <_cor7> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor7})
				  -| ['compiler_generated'] )
			      end
			  in  %% Line 498
			      case call 'systools_relup':'appup_search_for_version'
				       (_cor1, _cor8) of
				%% Line 499
				<{'ok',Script}> when 'true' ->
				    %% Line 500
				    {NewVsn,Script}
				%% Line 501
				<'error'> when 'true' ->
				    %% Line 502
				    call 'erlang':'throw'
					({'version_not_in_appup',_cor1})
				( <_cor10> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor10})
				  -| ['compiler_generated'] )
			      end
		      %% Line 504
		      <{'error','enoent'}> when 'true' ->
			  %% Line 505
			  call 'erlang':'throw'
			      ('no_appup_found')
		      %% Line 506
		      <{'error',Reason}> when 'true' ->
			  %% Line 507
			  call 'erlang':'throw'
			      (Reason)
		      ( <_cor11> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor11})
			-| ['compiler_generated'] )
		    end
'read_app'/3 =
    %% Line 510
    fun (_cor2,_cor1,_cor0) ->
	let <AppS> =
	    %% Line 511
	    call 'erlang':'atom_to_list'
		(_cor2)
	in  let <_cor4> =
		%% Line 512
		call 'filename':'join'
		    (_cor0, [101|[98|[105|[110]]]])
	    in  let <Path> =
		    %% Line 512
		    [_cor4|[]]
		in  %% Line 513
		    case call 'systools_make':'read_application'
			     (AppS, _cor1, Path, []) of
		      %% Line 514
		      <{'ok',Appl}> when 'true' ->
			  %% Line 515
			  Appl
		      %% Line 516
		      <{'error',{'not_found',_X_AppFile}}> when 'true' ->
			  %% Line 517
			  call 'erlang':'throw'
			      ({'no_app_found',_cor1,_cor0})
		      %% Line 518
		      <{'error',Reason}> when 'true' ->
			  %% Line 519
			  call 'erlang':'throw'
			      (Reason)
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor6})
			-| ['compiler_generated'] )
		    end
'read_appspec'/2 =
    %% Line 522
    fun (_cor1,_cor0) ->
	let <AppS> =
	    %% Line 523
	    call 'erlang':'atom_to_list'
		(_cor1)
	in  let <_cor3> =
		%% Line 524
		call 'filename':'join'
		    (_cor0, [101|[98|[105|[110]]]])
	    in  let <Path> =
		    %% Line 524
		    [_cor3|[]]
		in  let <_cor5> =
			%% Line 525
			call 'erlang':'++'
			    (AppS, [46|[97|[112|[112]]]])
		    in  %% Line 525
			case call 'file':'path_consult'
				 (Path, _cor5) of
			  %% Line 526
			  <{'ok',AppSpecL,_X_File}> when 'true' ->
			      %% Line 527
			      AppSpecL
			  %% Line 528
			  <{'error',Reason}> when 'true' ->
			      %% Line 529
			      call 'erlang':'throw'
				  (Reason)
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor6})
			    -| ['compiler_generated'] )
			end
'call'/1 =
    %% Line 535
    fun (_cor0) ->
	%% Line 536
	call 'gen_server':'call'
	    ('release_handler', _cor0, 'infinity')
'init'/1 =
    %% Line 542
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 543
	      case call 'init':'get_argument'
		       ('root') of
		<{'ok',[[Root|[]]|[]]}> when 'true' ->
		    %% Line 544
		    case apply 'is_client'/0
			     () of
		      <{CliDir,Masters}> when 'true' ->
			  let <_cor5> =
			      %% Line 546
			      case call 'application':'get_env'
				       ('sasl', 'releases_dir') of
				%% Line 547
				<'undefined'> when 'true' ->
				    %% Line 548
				    case call 'os':'getenv'
					     ([82|[69|[76|[68|[73|[82]]]]]]) of
				      %% Line 549
				      <'false'> when 'true' ->
					  %% Line 550
					  case <> of
					    %% Line 551
					    <>
						when call 'erlang':'=:='
						      (CliDir,
						       'false') ->
						%% Line 552
						call 'filename':'join'
						    ([Root|[[114|[101|[108|[101|[97|[115|[101|[115]]]]]]]]]])
					    %% Line 553
					    <> when 'true' ->
						%% Line 554
						call 'filename':'join'
						    ([CliDir|[[114|[101|[108|[101|[97|[115|[101|[115]]]]]]]]]])
					  end
				      %% Line 556
				      <RELDIR> when 'true' ->
					  %% Line 557
					  RELDIR
				    end
				%% Line 559
				<{'ok',Dir}> when 'true' ->
				    %% Line 560
				    Dir
				( <_cor4> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor4})
				  -| ['compiler_generated'] )
			      end
			  in  let <_cor7> =
				  %% Line 563
				  call 'filename':'join'
				      (_cor5, [82|[69|[76|[69|[65|[83|[69|[83]]]]]]]])
			      in  let <_cor10> =
				      %% Line 563
				      case apply 'consult'/2
					       (_cor7, Masters) of
					%% Line 564
					<{'ok',[Term|[]]}> when 'true' ->
					    %% Line 565
					    apply 'transform_release'/3
						(_cor5, Term, Masters)
					%% Line 566
					<_cor20> when 'true' ->
					    %% Line 567
					    case call 'init':'script_id'
						     () of
					      <{Name,Vsn}> when 'true' ->
						  %% Line 568
						  [{'release',Name,Vsn,'undefined',[],'permanent'}|[]]
					      ( <_cor8> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor8})
						-| ['compiler_generated'] )
					    end
				      end
				  in  let <_cor14> =
					  %% Line 571
					  case call 'application':'get_env'
						   ('start_prg') of
					    %% Line 572
					    <{'ok',Found2}>
						when call 'erlang':'is_list'
						      (Found2) ->
						%% Line 573
						{'do_check',Found2}
					    %% Line 574
					    <_cor21> when 'true' ->
						let <_cor12> =
						    %% Line 575
						    call 'filename':'join'
							([Root|[[98|[105|[110]]]|[[115|[116|[97|[114|[116]]]]]]]])
						in  %% Line 575
						    {'no_check',_cor12}
					  end
				      in  let <_cor17> =
					      %% Line 578
					      case call 'application':'get_env'
						       ('static_emulator') of
						%% Line 579
						<{'ok',SFlag}>
						    when call 'erlang':'is_atom'
							  (SFlag) ->
						    SFlag
						%% Line 580
						<_cor22> when 'true' ->
						    'false'
					      end
					  in  %% Line 582
					      {'ok',{'state',[],Root,_cor5,_cor10,'undefined',_cor14,%% Line 583
												     Masters,%% Line 584
													     CliDir,_cor17,[]}}
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19})
		  -| [{'function_name',{'init',1}}] )
	    -| ['compiler_generated'] )
	end
'handle_call'/3 =
    %% Line 586
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'unpack_release',ReleaseName},_X_From,S = {'state',_cor117,_cor118,_cor119,_cor120,_cor121,_cor122,_cor123,_cor124,_cor125,_cor126}>
	      when %% Line 587
		call 'erlang':'=:='
		    (_cor123,
		     'false') ->
	      let <_cor15> =
		  catch
		      %% Line 588
		      apply 'do_unpack_release'/4
			  (_cor118, _cor119, %% Line 589
					     ReleaseName, _cor120)
	      in  %% Line 588
		  case _cor15 of
		    %% Line 590
		    <{'ok',NewReleases,Vsn}> when 'true' ->
			let <_cor18> =
			    %% Line 591
			    call 'erlang':'setelement'
				(5, S, NewReleases)
			in  %% Line 591
			    {'reply',{'ok',Vsn},_cor18}
		    %% Line 592
		    <{'error',Reason}> when 'true' ->
			%% Line 593
			{'reply',{'error',Reason},S}
		    %% Line 594
		    <{'EXIT',Reason}> when 'true' ->
			%% Line 595
			{'reply',{'error',Reason},S}
		    ( <_cor19> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor19})
		      -| ['compiler_generated'] )
		  end
	  %% Line 597
	  <{'unpack_release',_X_ReleaseName},_X_From,S> when 'true' ->
	      %% Line 598
	      {'reply',{'error','client_node'},S}
	  %% Line 600
	  <{'check_install_release',Vsn,Purge},_X_From,S> when 'true' ->
	      let <_cor26> =
		  catch
		      %% Line 601
		      ( case S of
			  ( <( {'state',_cor168,_cor169,_rec5,_cor170,_cor171,_cor172,_cor173,_cor174,_cor175,_cor176}
			       -| ['compiler_generated'] )> when 'true' ->
				apply 'do_check_install_release'/5
				    (_rec5, %% Line 602
					    Vsn, _cor170, _cor173, %% Line 605
								   Purge)
			    -| ['compiler_generated'] )
			  ( <_cor177> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','state'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	      in  %% Line 601
		  case _cor26 of
		    %% Line 606
		    <{'ok',CurrentVsn,Descr}> when 'true' ->
			%% Line 607
			{'reply',{'ok',CurrentVsn,Descr},S}
		    %% Line 608
		    <{'error',Reason}> when 'true' ->
			%% Line 609
			{'reply',{'error',Reason},S}
		    %% Line 610
		    <{'EXIT',Reason}> when 'true' ->
			%% Line 611
			{'reply',{'error',Reason},S}
		    ( <_cor27> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor27})
		      -| ['compiler_generated'] )
		  end
	  %% Line 614
	  <{'install_release',Vsn,ErrorAction,Opts},From,S> when 'true' ->
	      let <NS> =
		  %% Line 615
		  apply 'resend_sync_nodes'/1
		      (S)
	      in  let <_cor29> =
		      catch
			  %% Line 616
			  apply 'do_install_release'/3
			      (S, Vsn, Opts)
		  in  %% Line 616
		      case _cor29 of
			%% Line 617
			<{'ok',NewReleases,[],CurrentVsn,Descr}> when 'true' ->
			    %% Line 618
			    case NS of
			      <{'state',_cor198,_cor199,_cor200,_cor201,_cor202,_cor203,_cor204,_cor205,_cor206,_cor207}> when 'true' ->
				  let <_cor32> =
				      call 'erlang':'setelement'
					  (5, NS, NewReleases)
				  in  {'reply',{'ok',CurrentVsn,Descr},_cor32}
			      ( <_cor208> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','state'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			%% Line 619
			<{'ok',NewReleases,Unpurged,CurrentVsn,Descr}> when 'true' ->
			    %% Line 621
			    ( case S of
				( <( {'state',_cor209,_cor210,_cor211,_cor212,_rec9,_cor213,_cor214,_cor215,_cor216,_cor217}
				     -| ['compiler_generated'] )> when 'true' ->
				      let <_cor37> =
					  case _rec9 of
					    %% Line 622
					    <'undefined'> when 'true' ->
						%% Line 623
						case call 'timer':'send_interval'
							 (10000, 'timeout') of
						  <{'ok',Ref}> when 'true' ->
						      %% Line 624
						      Ref
						  ( <_cor35> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_cor35})
						    -| ['compiler_generated'] )
						end
					    %% Line 625
					    <Ref> when 'true' ->
						Ref
					  end
				      in  %% Line 627
					  case NS of
					    <{'state',_cor219,_cor220,_cor221,_cor222,_cor223,_cor224,_cor225,_cor226,_cor227,_cor228}> when 'true' ->
						let <_cor40> =
						    %% Line 628
						    call 'erlang':'setelement'
							(6, NS, _cor37)
						in  let <_cor41> =
							call 'erlang':'setelement'
							    (5, _cor40, NewReleases)
						    in  let <_cor43> =
							    call 'erlang':'setelement'
								(2, _cor41, Unpurged)
							in  %% Line 629
							    {'reply',{'ok',CurrentVsn,Descr},_cor43}
					    ( <_cor229> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','state'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
				  -| ['compiler_generated'] )
				( <_cor218> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','state'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			%% Line 630
			<{'error',Reason}> when 'true' ->
			    %% Line 631
			    {'reply',{'error',Reason},NS}
			%% Line 632
			<{'restart_emulator',CurrentVsn,Descr}> when 'true' ->
			    do  %% Line 633
				call 'gen_server':'reply'
				    (From, {'ok',CurrentVsn,Descr})
				do  %% Line 634
				    call 'init':'reboot'
					()
				    %% Line 635
				    {'noreply',NS}
			%% Line 636
			<{'restart_new_emulator',CurrentVsn,Descr}> when 'true' ->
			    do  %% Line 637
				call 'gen_server':'reply'
				    (From, {'continue_after_restart',CurrentVsn,Descr})
				do  %% Line 638
				    call 'init':'reboot'
					()
				    %% Line 639
				    {'noreply',NS}
			%% Line 640
			<{'EXIT',Reason}> when 'true' ->
			    do  %% Line 641
				call 'io':'format'
				    ([114|[101|[108|[101|[97|[115|[101|[95|[104|[97|[110|[100|[108|[101|[114|[58|[105|[110|[115|[116|[97|[108|[108|[95|[114|[101|[108|[101|[97|[115|[101|[40|[86|[115|[110|[61|[126|[112|[32|[79|[112|[116|[115|[61|[126|[112|[41|[32|[102|[97|[105|[108|[101|[100|[44|[32|[82|[101|[97|[115|[111|[110|[61|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 643
																																																				   [Vsn|[Opts|[Reason|[]]]])
				do  %% Line 644
				    call 'gen_server':'reply'
					(From, {'error',Reason})
				    do  %% Line 645
					case ErrorAction of
					  %% Line 646
					  <'restart'> when 'true' ->
					      %% Line 647
					      call 'init':'restart'
						  ()
					  %% Line 648
					  <'reboot'> when 'true' ->
					      %% Line 649
					      call 'init':'reboot'
						  ()
					  ( <_cor45> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor45})
					    -| ['compiler_generated'] )
					end
					%% Line 651
					{'noreply',NS}
			( <_cor46> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor46})
			  -| ['compiler_generated'] )
		      end
	  %% Line 654
	  <{'make_permanent',Vsn},_X_From,S> when 'true' ->
	      let <_cor47> =
		  catch
		      %% Line 655
		      apply 'do_make_permanent'/2
			  (S, Vsn)
	      in  %% Line 655
		  case _cor47 of
		    %% Line 656
		    <{'ok',Releases,Unpurged}> when 'true' ->
			%% Line 657
			case S of
			  <{'state',_cor230,_cor231,_cor232,_cor233,_cor234,_cor235,_cor236,_cor237,_cor238,_cor239}> when 'true' ->
			      let <_cor49> =
				  call 'erlang':'setelement'
				      (5, S, Releases)
			      in  let <_cor51> =
				      call 'erlang':'setelement'
					  (2, _cor49, Unpurged)
				  in  {'reply','ok',_cor51}
			  ( <_cor240> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','state'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    %% Line 658
		    <{'error',Reason}> when 'true' ->
			%% Line 659
			{'reply',{'error',Reason},S}
		    %% Line 660
		    <{'EXIT',Reason}> when 'true' ->
			%% Line 661
			{'reply',{'error',Reason},S}
		    ( <_cor52> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor52})
		      -| ['compiler_generated'] )
		  end
	  %% Line 664
	  <{'reboot_old_release',Vsn},From,S> when 'true' ->
	      let <_cor53> =
		  catch
		      %% Line 665
		      apply 'do_reboot_old_release'/2
			  (S, Vsn)
	      in  %% Line 665
		  case _cor53 of
		    %% Line 666
		    <'ok'> when 'true' ->
			do  %% Line 667
			    call 'gen_server':'reply'
				(From, 'ok')
			    do  %% Line 668
				call 'init':'reboot'
				    ()
				%% Line 669
				{'noreply',S}
		    %% Line 670
		    <{'error',Reason}> when 'true' ->
			%% Line 671
			{'reply',{'error',Reason},S}
		    %% Line 672
		    <{'EXIT',Reason}> when 'true' ->
			%% Line 673
			{'reply',{'error',Reason},S}
		    ( <_cor54> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor54})
		      -| ['compiler_generated'] )
		  end
	  %% Line 676
	  <{'remove_release',Vsn},_X_From,S = {'state',_cor241,_cor242,_cor243,_cor244,_cor245,_cor246,_cor247,_cor248,_cor249,_cor250}>
	      when %% Line 677
		call 'erlang':'=:='
		    (_cor247,
		     'false') ->
	      let <_cor67> =
		  catch
		      %% Line 678
		      apply 'do_remove_release'/4
			  (_cor242, _cor243, %% Line 679
					     Vsn, _cor244)
	      in  %% Line 678
		  case _cor67 of
		    %% Line 680
		    <{'ok',NewReleases}> when 'true' ->
			let <_cor70> =
			    %% Line 681
			    call 'erlang':'setelement'
				(5, S, NewReleases)
			in  %% Line 681
			    {'reply','ok',_cor70}
		    %% Line 682
		    <{'error',Reason}> when 'true' ->
			%% Line 683
			{'reply',{'error',Reason},S}
		    %% Line 684
		    <{'EXIT',Reason}> when 'true' ->
			%% Line 685
			{'reply',{'error',Reason},S}
		    ( <_cor71> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor71})
		      -| ['compiler_generated'] )
		  end
	  %% Line 687
	  <{'remove_release',_X_Vsn},_X_From,S> when 'true' ->
	      %% Line 688
	      {'reply',{'error','client_node'},S}
	  %% Line 690
	  <{'set_unpacked',RelFile,LibDirs},_X_From,S> when 'true' ->
	      %% Line 691
	      ( case S of
		  ( <( {'state',_cor292,_rec16,_cor293,_cor294,_cor295,_cor296,_cor297,_cor298,_cor299,_cor300}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor81> =
			    catch
				%% Line 692
				apply 'do_set_unpacked'/6
				    (_rec16, _cor293, RelFile, %% Line 693
							       LibDirs, _cor294, _cor297)
			in  %% Line 692
			    case _cor81 of
			      %% Line 695
			      <{'ok',NewReleases,Vsn}> when 'true' ->
				  let <_cor84> =
				      %% Line 696
				      call 'erlang':'setelement'
					  (5, S, NewReleases)
				  in  %% Line 696
				      {'reply',{'ok',Vsn},_cor84}
			      %% Line 697
			      <{'error',Reason}> when 'true' ->
				  %% Line 698
				  {'reply',{'error',Reason},S}
			      %% Line 699
			      <{'EXIT',Reason}> when 'true' ->
				  %% Line 700
				  {'reply',{'error',Reason},S}
			      ( <_cor85> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor85})
				-| ['compiler_generated'] )
			    end
		    -| ['compiler_generated'] )
		  ( <_cor301> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 703
	  <{'set_removed',Vsn},_X_From,S> when 'true' ->
	      let <_cor92> =
		  catch
		      %% Line 704
		      ( case S of
			  ( <( {'state',_cor343,_cor344,_rec21,_cor345,_cor346,_cor347,_cor348,_cor349,_cor350,_cor351}
			       -| ['compiler_generated'] )> when 'true' ->
				apply 'do_set_removed'/4
				    (_rec21, Vsn, _cor345, _cor348)
			    -| ['compiler_generated'] )
			  ( <_cor352> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','state'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	      in  %% Line 704
		  case _cor92 of
		    %% Line 707
		    <{'ok',NewReleases}> when 'true' ->
			%% Line 708
			case S of
			  <{'state',_cor373,_cor374,_cor375,_cor376,_cor377,_cor378,_cor379,_cor380,_cor381,_cor382}> when 'true' ->
			      let <_cor95> =
				  call 'erlang':'setelement'
				      (5, S, NewReleases)
			      in  {'reply','ok',_cor95}
			  ( <_cor383> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','state'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
		    %% Line 709
		    <{'error',Reason}> when 'true' ->
			%% Line 710
			{'reply',{'error',Reason},S}
		    %% Line 711
		    <{'EXIT',Reason}> when 'true' ->
			%% Line 712
			{'reply',{'error',Reason},S}
		    ( <_cor96> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor96})
		      -| ['compiler_generated'] )
		  end
	  %% Line 715
	  <{'install_file',File,Vsn},_X_From,S> when 'true' ->
	      %% Line 717
	      ( case S of
		  ( <( {'state',_cor384,_cor385,_cor386,_rec25,_cor387,_cor388,_cor389,_cor390,_cor391,_cor392}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_cor105> =
			    case call 'lists':'keysearch'
				     (Vsn, 3, _rec25) of
			      %% Line 718
			      <{'value',_cor394}> when 'true' ->
				  let <Dir> =
				      %% Line 719
				      call 'filename':'join'
					  ([_cor386|[Vsn|[]]])
				  in  catch
					  %% Line 720
					  apply 'copy_file'/3
					      (File, Dir, _cor389)
			      %% Line 721
			      <_cor415> when 'true' ->
				  %% Line 722
				  {'error',{'no_such_release',Vsn}}
			    end
			in  %% Line 724
			    {'reply',_cor105,S}
		    -| ['compiler_generated'] )
		  ( <_cor393> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 726
	  <'which_releases',_X_From,S> when 'true' ->
	      let <_cor112> =
		  %% Line 727
		  ( fun (_cor110) ->
			case _cor110 of
			  <{'release',Name,Vsn,_cor416,Libs,%% Line 728
							    Status}> when 'true' ->
			      let <_cor109> =
				  %% Line 729
				  apply 'mk_lib_name'/1
				      (Libs)
			      in  %% Line 729
				  {Name,Vsn,_cor109,Status}
			  ( <_cor111> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor111})
				  -| [{'function_name',{'-handle_call/3-fun-0-',1}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-handle_call/3-fun-0-'}}] )
	      in  %% Line 730
		  ( case S of
		      ( <( {'state',_cor417,_cor418,_cor419,_rec28,_cor420,_cor421,_cor422,_cor423,_cor424,_cor425}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <Reply> =
				call 'lists':'map'
				    (_cor112, _rec28)
			    in  %% Line 731
				{'reply',Reply,S}
			-| ['compiler_generated'] )
		      ( <_cor426> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','state'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  ( <_cor116,_cor115,_cor114> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor116,_cor115,_cor114})
		  -| [{'function_name',{'handle_call',3}}] )
	    -| ['compiler_generated'] )
	end
'mk_lib_name'/1 =
    %% Line 733
    fun (_cor0) ->
	case _cor0 of
	  <[{LibName,Vsn,_X_Dir}|T]> when 'true' ->
	      let <_cor1> =
		  %% Line 734
		  call 'lists':'concat'
		      ([LibName|[[45]|[Vsn|[]]]])
	      in  let <_cor2> =
		      %% Line 734
		      apply 'mk_lib_name'/1
			  (T)
		  in  %% Line 734
		      [_cor1|_cor2]
	  %% Line 735
	  <[]> when 'true' ->
	      []
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'mk_lib_name',1}}] )
	    -| ['compiler_generated'] )
	end
'handle_info'/2 =
    %% Line 737
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'timeout',S> when 'true' ->
	      %% Line 738
	      ( case S of
		  ( <( {'state',_rec29,_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32}
		       -| ['compiler_generated'] )> when 'true' ->
			case apply 'soft_purge'/1
				 (_rec29) of
			  %% Line 739
			  <[]> when 'true' ->
			      let <_X_> =
				  %% Line 740
				  ( call 'timer':'cancel'
					(_cor27)
				    -| ['result_not_wanted'] )
			      in  let <_cor8> =
				      %% Line 741
				      call 'erlang':'setelement'
					  (6, S, 'undefined')
				  in  let <_cor10> =
					  %% Line 741
					  call 'erlang':'setelement'
					      (2, _cor8, [])
				      in  %% Line 741
					  {'noreply',_cor10}
			  %% Line 742
			  <Unpurged> when 'true' ->
			      let <_cor13> =
				  %% Line 743
				  call 'erlang':'setelement'
				      (2, S, Unpurged)
			      in  %% Line 743
				  {'noreply',_cor13}
			end
		    -| ['compiler_generated'] )
		  ( <_cor33> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 746
	  <{'sync_nodes',Id,Node},S> when 'true' ->
	      %% Line 747
	      ( case S of
		  ( <( {'state',_cor66,_cor67,_cor68,_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_rec33}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_rec34> =
			    %% Line 748
			    [{'sync_nodes',Id,Node}|_rec33]
			in  let <_cor21> =
				%% Line 748
				call 'erlang':'setelement'
				    (11, S, _rec34)
			    in  %% Line 748
				{'noreply',_cor21}
		    -| ['compiler_generated'] )
		  ( <_cor75> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','state'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 750
	  <Msg,State> when 'true' ->
	      do  %% Line 751
		  call 'error_logger':'info_msg'
		      ([114|[101|[108|[101|[97|[115|[101|[95|[104|[97|[110|[100|[108|[101|[114|[58|[32|[103|[111|[116|[32|[117|[110|[107|[110|[111|[119|[110|[32|[109|[101|[115|[115|[97|[103|[101|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Msg|[]])
		  %% Line 752
		  {'noreply',State}
	end
'terminate'/2 =
    %% Line 754
    fun (_cor1,_cor0) ->
	%% Line 755
	'ok'
'handle_cast'/2 =
    %% Line 757
    fun (_cor1,_cor0) ->
	%% Line 758
	{'noreply',_cor0}
'code_change'/3 =
    %% Line 759
    fun (_cor2,_cor1,_cor0) ->
	%% Line 760
	{'ok',_cor1}
'is_client'/0 =
    %% Line 765
    fun () ->
	%% Line 766
	case call 'application':'get_env'
		 ('masters') of
	  %% Line 767
	  <{'ok',Masters}> when 'true' ->
	      let <Alive> =
		  %% Line 768
		  call 'erlang':'is_alive'
		      ()
	      in  %% Line 769
		  case apply 'atom_list'/1
			   (Masters) of
		    %% Line 770
		    <'true'>
			when call 'erlang':'=:='
			      (Alive,
			       'true') ->
			%% Line 771
			case call 'application':'get_env'
				 ('client_directory') of
			  %% Line 772
			  <{'ok',ClientDir}> when 'true' ->
			      %% Line 773
			      case apply 'int_list'/1
				       (ClientDir) of
				%% Line 774
				<'true'> when 'true' ->
				    %% Line 775
				    {ClientDir,Masters}
				%% Line 776
				<_cor5> when 'true' ->
				    %% Line 777
				    call 'erlang':'exit'
					({'bad_parameter','client_directory',%% Line 778
									     ClientDir})
			      end
			  %% Line 780
			  <_cor6> when 'true' ->
			      %% Line 781
			      {'false','false'}
			end
		    %% Line 783
		    <_cor7> when 'true' ->
			%% Line 784
			call 'erlang':'exit'
			    ({'bad_parameter','masters',Masters})
		  end
	  %% Line 786
	  <_cor8> when 'true' ->
	      %% Line 787
	      {'false','false'}
	end
'atom_list'/1 =
    %% Line 790
    fun (_cor0) ->
	case _cor0 of
	  <[A|T]>
	      when call 'erlang':'is_atom'
		    (A) ->
	      apply 'atom_list'/1
		  (T)
	  %% Line 791
	  <[]> when 'true' ->
	      'true'
	  %% Line 792
	  <_cor2> when 'true' ->
	      'false'
	end
'int_list'/1 =
    %% Line 794
    fun (_cor0) ->
	case _cor0 of
	  <[I|T]>
	      when call 'erlang':'is_integer'
		    (I) ->
	      apply 'int_list'/1
		  (T)
	  %% Line 795
	  <[]> when 'true' ->
	      'true'
	  %% Line 796
	  <_cor2> when 'true' ->
	      'false'
	end
'resend_sync_nodes'/1 =
    %% Line 798
    fun (_cor0) ->
	let <_cor6> =
	    %% Line 799
	    ( fun (_cor4) ->
		  let <_cor3> =
		      call 'erlang':'self'
			  ()
		  in  call 'erlang':'!'
			  (_cor3, _cor4)
	      -| [{'id',{0,0,'-resend_sync_nodes/1-fun-0-'}}] )
	in  %% Line 799
	    ( case _cor0 of
		( <( {'state',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_rec36}
		     -| ['compiler_generated'] )> when 'true' ->
		      do  call 'lists':'foreach'
			      (_cor6, _rec36)
			  %% Line 800
			  call 'erlang':'setelement'
			      (11, _cor0, [])
		  -| ['compiler_generated'] )
		( <_cor19> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','state'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	      -| ['compiler_generated'] )
'soft_purge'/1 =
    %% Line 802
    fun (_cor0) ->
	let <_cor4> =
	    %% Line 803
	    ( fun (_cor2) ->
		  case _cor2 of
		    <{Mod,_X_PostPurgeMethod}> when 'true' ->
			%% Line 804
			case call 'code':'soft_purge'
				 (Mod) of
			  %% Line 805
			  <'true'> when 'true' ->
			      'false'
			  %% Line 806
			  <'false'> when 'true' ->
			      'true'
			  ( <_cor1> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor1})
			    -| ['compiler_generated'] )
			end
		    ( <_cor3> when 'true' ->
			  ( primop 'match_fail'
				({'function_clause',_cor3})
			    -| [{'function_name',{'-soft_purge/1-fun-0-',1}}] )
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-soft_purge/1-fun-0-'}}] )
	in  %% Line 803
	    call 'lists':'filter'
		(_cor4, _cor0)
'brutal_purge'/1 =
    %% Line 811
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 812
	    ( fun (_cor1) ->
		  case _cor1 of
		    <{Mod,'brutal_purge'}> when 'true' ->
			do  call 'code':'purge'
				(Mod)
			    'false'
		    %% Line 813
		    <_cor5> when 'true' ->
			'true'
		  end
	      -| [{'id',{0,0,'-brutal_purge/1-fun-0-'}}] )
	in  %% Line 812
	    call 'lists':'filter'
		(_cor3, _cor0)
'do_unpack_release'/4 =
    %% Line 829
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 830
	    call 'erlang':'++'
		(_cor1, [46|[116|[97|[114|[46|[103|[122]]]]]]])
	in  let <Tar> =
		%% Line 830
		call 'filename':'join'
		    (_cor2, _cor4)
	    in  do  %% Line 831
		    apply 'do_check_file'/2
			(Tar, 'regular')
		    let <Rel> =
			%% Line 832
			call 'erlang':'++'
			    (_cor1, [46|[114|[101|[108]]]])
		    in  let <_cor7> =
			    %% Line 833
			    call 'filename':'join'
				([114|[101|[108|[101|[97|[115|[101|[115]]]]]]]], Rel)
			in  do  %% Line 833
				apply 'extract_rel_file'/3
				    (_cor7, Tar, _cor3)
				let <RelFile> =
				    %% Line 834
				    call 'filename':'join'
					(_cor2, Rel)
				in  let <Release> =
					%% Line 835
					apply 'check_rel'/3
					    (_cor3, RelFile, 'false')
				    in  %% Line 836
					case Release of
					  <{'release',_cor23,Vsn,_cor24,_cor25,_cor26}> when 'true' ->
					      do  %% Line 837
						  case call 'lists':'keysearch'
							   (Vsn, 3, _cor0) of
						    %% Line 838
						    <{'value',_cor27}> when 'true' ->
							call 'erlang':'throw'
							    ({'error',{'existing_release',Vsn}})
						    %% Line 839
						    <_cor28> when 'true' ->
							'ok'
						  end
						  do  %% Line 841
						      apply 'extract_tar'/2
							  (_cor3, Tar)
						      let <_cor14> =
							  %% Line 842
							  call 'erlang':'setelement'
							      (6, Release, 'unpacked')
						      in  let <NewReleases> =
							      %% Line 842
							      [_cor14|_cor0]
							  in  do  %% Line 843
								  apply 'write_releases'/3
								      (_cor2, NewReleases, 'false')
								  let <Dir> =
								      %% Line 848
								      call 'filename':'join'
									  ([_cor2|[Vsn|[]]])
								  in  do  %% Line 849
									  apply 'copy_file'/3
									      (RelFile, Dir, 'false')
									  let <_X_> =
									      %% Line 852
									      ( call 'file':'delete'
										    (Tar)
										-| ['result_not_wanted'] )
									  in  let <_X_> =
										  %% Line 853
										  ( call 'file':'delete'
											(RelFile)
										    -| ['result_not_wanted'] )
									      in  %% Line 855
										  {'ok',NewReleases,Vsn}
					  ( <_cor10> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor10})
					    -| ['compiler_generated'] )
					end
'check_rel'/3 =
    %% Line 857
    fun (_cor2,_cor1,_cor0) ->
	%% Line 858
	apply 'check_rel'/4
	    (_cor2, _cor1, [], _cor0)
'check_rel'/4 =
    %% Line 859
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 860
	case apply 'consult'/2
		 (_cor2, _cor0) of
	  %% Line 861
	  <{'ok',[RelData|[]]}> when 'true' ->
	      %% Line 862
	      apply 'check_rel_data'/4
		  (RelData, _cor3, _cor1, _cor0)
	  %% Line 863
	  <{'ok',_cor9}> when 'true' ->
	      %% Line 864
	      call 'erlang':'throw'
		  ({'error',{'bad_rel_file',_cor2}})
	  %% Line 865
	  <{'error',Reason}>
	      when call 'erlang':'is_tuple'
		    (Reason) ->
	      %% Line 866
	      call 'erlang':'throw'
		  ({'error',{'bad_rel_file',_cor2}})
	  %% Line 867
	  <{'error',FileError}> when 'true' ->
	      %% Line 868
	      call 'erlang':'throw'
		  ({'error',{FileError,_cor2}})
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'check_rel_data'/4 =
    %% Line 871
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'release',{Name,Vsn},{'erts',EVsn},Libs},Root,LibDirs,%% Line 872
								  Masters> when 'true' ->
	      let <_cor13> =
		  %% Line 874
		  ( fun (_cor11) ->
			let <Lib> =
			    %% Line 875
			    call 'erlang':'element'
				(1, _cor11)
			in  let <LibVsn> =
				%% Line 876
				call 'erlang':'element'
				    (2, _cor11)
			    in  let <LibName> =
				    %% Line 877
				    call 'lists':'concat'
					([Lib|[[45]|[LibVsn|[]]]])
				in  let <_cor9> =
					%% Line 879
					case call 'lists':'keysearch'
						 (Lib, 1, LibDirs) of
					  %% Line 880
					  <{'value',{_X_Lib,_X_Vsn,Dir}}> when 'true' ->
					      let <Path> =
						  %% Line 881
						  call 'filename':'join'
						      (Dir, LibName)
					      in  do  %% Line 882
						      apply 'check_path'/2
							  (Path, Masters)
						      %% Line 883
						      Path
					  %% Line 884
					  <_cor19> when 'true' ->
					      %% Line 885
					      call 'filename':'join'
						  ([Root|[[108|[105|[98]]]|[LibName|[]]]])
					end
				    in  %% Line 887
					{Lib,LibVsn,_cor9}
		    -| [{'id',{0,0,'-check_rel_data/4-fun-0-'}}] )
	      in  let <Libs2> =
		      %% Line 874
		      call 'lists':'map'
			  (_cor13, %% Line 889
				   Libs)
		  in  %% Line 890
		      {'release',Name,Vsn,EVsn,%% Line 891
					       Libs2,%% Line 891
						     'unpacking'}
	  %% Line 892
	  <RelData,_X_Root,_X_LibDirs,_X_Masters> when 'true' ->
	      %% Line 893
	      call 'erlang':'throw'
		  ({'error',{'bad_rel_data',RelData}})
	end
'check_path'/1 =
    %% Line 895
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 896
	    call 'file':'read_file_info'
		(_cor0)
	in  %% Line 896
	    apply 'check_path_response'/2
		(_cor0, _cor1)
'check_path'/2 =
    %% Line 897
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Path,'false'> when 'true' ->
	      apply 'check_path'/1
		  (Path)
	  %% Line 898
	  <Path,Masters> when 'true' ->
	      apply 'check_path_master'/2
		  (Masters, Path)
	end
'check_path_master'/2 =
    %% Line 905
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Master|Ms],Path> when 'true' ->
	      %% Line 906
	      case call 'rpc':'call'
		       (Master, 'file', 'read_file_info', [Path|[]]) of
		%% Line 907
		<{'badrpc',_cor5}> when 'true' ->
		    apply 'consult_master'/2
			(Ms, Path)
		%% Line 908
		<Res> when 'true' ->
		    apply 'check_path_response'/2
			(Path, Res)
	      end
	  %% Line 910
	  <[],_X_Path> when 'true' ->
	      %% Line 911
	      {'error','no_master'}
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'check_path_master',2}}] )
	    -| ['compiler_generated'] )
	end
'check_path_response'/2 =
    %% Line 913
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_X_Path,{'ok',Info = {'file_info',_cor10,_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22}}>
	      when call 'erlang':'=:='
		    (_cor11,
		     'directory') ->
	      %% Line 914
	      'ok'
	  %% Line 915
	  <Path,{'ok',_X_Info}> when 'true' ->
	      %% Line 916
	      call 'erlang':'throw'
		  ({'error',{'not_a_directory',Path}})
	  %% Line 917
	  <Path,{'error',_X_Reason}> when 'true' ->
	      %% Line 918
	      call 'erlang':'throw'
		  ({'error',{'no_such_directory',Path}})
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'check_path_response',2}}] )
	    -| ['compiler_generated'] )
	end
'do_check_install_release'/5 =
    %% Line 920
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 921
	case call 'lists':'keysearch'
		 (_cor3, 3, _cor2) of
	  %% Line 922
	  <{'value',{'release',_cor32,_cor33,_cor34,_cor35,'current'}}> when 'true' ->
	      %% Line 923
	      {'error',{'already_installed',_cor3}}
	  %% Line 924
	  <{'value',Release}> when 'true' ->
	      let <LatestRelease> =
		  %% Line 925
		  apply 'get_latest_release'/1
		      (_cor2)
	      in  let <VsnDir> =
		      %% Line 926
		      call 'filename':'join'
			  ([_cor4|[_cor3|[]]])
		  in  let <_cor7> =
			  %% Line 927
			  call 'filename':'join'
			      (VsnDir, [115|[116|[97|[114|[116|[46|[98|[111|[111|[116]]]]]]]]]])
		      in  do  %% Line 927
			      apply 'check_file'/3
				  (_cor7, 'regular', _cor1)
			      let <_cor8> =
				  %% Line 928
				  call 'filename':'join'
				      (VsnDir, [114|[101|[108|[117|[112]]]]])
			      in  let <IsRelup> =
				      %% Line 928
				      apply 'check_opt_file'/3
					  (_cor8, 'regular', _cor1)
				  in  let <_cor10> =
					  %% Line 929
					  call 'filename':'join'
					      (VsnDir, [115|[121|[115|[46|[99|[111|[110|[102|[105|[103]]]]]]]]]])
				      in  do  %% Line 929
					      apply 'check_opt_file'/3
						  (_cor10, 'regular', _cor1)
					      %% Line 932
					      ( case Release of
						  ( <( {'release',_cor36,_cor37,_cor38,_rec39,_cor39}
						       -| ['compiler_generated'] )> when 'true' ->
							let <_cor17> =
							    %% Line 933
							    ( fun (_cor15) ->
								  case _cor15 of
								    <{_X_Lib,_X_LibVsn,LibDir}> when 'true' ->
									do  %% Line 934
									    apply 'check_file'/3
										(LibDir, 'directory', _cor1)
									    let <Ebin> =
										%% Line 935
										call 'filename':'join'
										    (LibDir, [101|[98|[105|[110]]]])
									    in  %% Line 936
										apply 'check_file'/3
										    (Ebin, 'directory', _cor1)
								    ( <_cor16> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_cor16})
									    -| [{'function_name',{'-do_check_install_release/5-fun-0-',1}}] )
								      -| ['compiler_generated'] )
								  end
							      -| [{'id',{0,0,'-do_check_install_release/5-fun-0-'}}] )
							in  do  %% Line 933
								call 'lists':'foreach'
								    (_cor17, _rec39)
								%% Line 940
								case <> of
								  %% Line 941
								  <>
								      when call 'erlang':'=:='
									    (IsRelup,
									     'true') ->
								      %% Line 942
								      case apply 'get_rh_script'/4
									       (LatestRelease, Release, _cor4, _cor1) of
									%% Line 943
									<{'ok',{CurrentVsn,Descr,Script}}> when 'true' ->
									    let <_cor18> =
										catch
										    %% Line 944
										    apply 'check_script'/2
											(Script, _rec39)
									    in  %% Line 944
										case _cor18 of
										  %% Line 945
										  <{'ok',SoftPurgeMods}>
										      when call 'erlang':'=:='
											    (_cor0,
											     'true') ->
										      %% Line 949
										      case %% Line 950
											   call 'release_handler_1':'check_old_processes'
											       (%% Line 951
												Script, %% Line 951
													'brutal_purge') of
											<{'ok',BrutalPurgeMods}> when 'true' ->
											    let <_cor23> =
												%% Line 953
												( fun (_cor21) ->
												      catch
													  %% Line 954
													  call 'erlang':'purge_module'
													      (_cor21)
												  -| [{'id',{0,0,'-do_check_install_release/5-fun-1-'}}] )
											    in  let <_cor20> =
												    %% Line 956
												    call 'erlang':'++'
													(SoftPurgeMods, BrutalPurgeMods)
												in  do  %% Line 952
													call 'lists':'foreach'
													    (_cor23, _cor20)
													%% Line 957
													{'ok',CurrentVsn,Descr}
											( <_cor19> when 'true' ->
											      primop 'match_fail'
												  ({'badmatch',_cor19})
											  -| ['compiler_generated'] )
										      end
										  %% Line 958
										  <{'ok',_cor41}> when 'true' ->
										      %% Line 959
										      {'ok',CurrentVsn,Descr}
										  %% Line 960
										  <Else> when 'true' ->
										      %% Line 961
										      Else
										end
									%% Line 963
									<Error> when 'true' ->
									    %% Line 964
									    Error
								      end
								  %% Line 966
								  <> when 'true' ->
								      %% Line 967
								      {'ok',_cor3,[]}
								end
						    -| ['compiler_generated'] )
						  ( <_cor40> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','release'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
	  %% Line 969
	  <_cor42> when 'true' ->
	      %% Line 970
	      {'error',{'no_such_release',_cor3}}
	end
'do_install_release'/3 =
    %% Line 973
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'state',_cor28,%% Line 974
			   RootDir,%% Line 975
				   RelDir,%% Line 975
					  Releases,_cor29,StartPrg,%% Line 976
								   Masters,_cor30,%% Line 977
										  Static,_cor31},%% Line 978
												 Vsn,%% Line 978
												     Opts> when 'true' ->
	      %% Line 979
	      case call 'lists':'keysearch'
		       (Vsn, 3, Releases) of
		%% Line 980
		<{'value',{'release',_cor32,_cor33,_cor34,_cor35,'current'}}> when 'true' ->
		    %% Line 981
		    {'error',{'already_installed',Vsn}}
		%% Line 982
		<{'value',Release}> when 'true' ->
		    let <LatestRelease> =
			%% Line 983
			apply 'get_latest_release'/1
			    (Releases)
		    in  %% Line 984
			case apply 'get_rh_script'/4
				 (LatestRelease, Release, RelDir, Masters) of
			  %% Line 985
			  <{'ok',{_X_CurrentVsn,_X_Descr,['restart_new_emulator'|_X_Script]}}>
			      when %% Line 986
				call 'erlang':'=:='
				    (Static,
				     'true') ->
			      %% Line 987
			      call 'erlang':'throw'
				  ('static_emulator')
			  %% Line 988
			  <{'ok',{CurrentVsn,Descr,['restart_new_emulator'|_X_Script]}}> when 'true' ->
			      %% Line 996
			      case %% Line 997
				   apply 'new_emulator_make_tmp_release'/5
				       (LatestRelease, Release, %% Line 998
								RelDir, %% Line 998
									Opts, %% Line 998
									      Masters) of
				<{TmpVsn,TmpRelease}> when 'true' ->
				    let <NReleases> =
					%% Line 999
					[TmpRelease|Releases]
				    in  do  %% Line 1003
					    apply 'prepare_restart_new_emulator'/7
						(StartPrg, RootDir, %% Line 1004
								    RelDir, %% Line 1004
									    TmpVsn, %% Line 1004
										    TmpRelease, %% Line 1005
												NReleases, %% Line 1005
													   Masters)
					    %% Line 1006
					    {'restart_new_emulator',CurrentVsn,Descr}
				( <_cor4> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor4})
				  -| ['compiler_generated'] )
			      end
			  %% Line 1007
			  <{'ok',{CurrentVsn,Descr,Script}}> when 'true' ->
			      %% Line 1012
			      ( case LatestRelease of
				  ( <( {'release',_cor36,_rec40,_cor37,_cor38,_cor39}
				       -| ['compiler_generated'] )> when 'true' ->
					let <NReleases> =
					    apply 'new_emulator_rm_tmp_release'/6
						(_rec40, _cor37, %% Line 1014
								 Vsn, %% Line 1014
								      RelDir, %% Line 1014
									      Releases, %% Line 1014
											Masters)
					in  do  %% Line 1017
						apply 'mon_nodes'/1
						    ('true')
						let <EnvBefore> =
						    %% Line 1018
						    call 'application_controller':'prep_config_change'
							()
						in  let <Apps> =
							%% Line 1019
							apply 'change_appl_data'/3
							    (RelDir, Release, Masters)
						    in  %% Line 1020
							( case Release of
							    ( <( {'release',_cor46,_cor47,_cor48,_rec42,_cor49}
								 -| ['compiler_generated'] )> when 'true' ->
								  let <NewLibs> =
								      %% Line 1021
								      apply 'get_new_libs'/2
									  (_cor38, _rec42)
								  in  %% Line 1023
								      case apply 'eval_script'/5
									       (Script, Apps, _rec42, NewLibs, Opts) of
									%% Line 1024
									<{'ok',Unpurged}> when 'true' ->
									    do  %% Line 1025
										call 'application_controller':'config_change'
										    (EnvBefore)
										do  %% Line 1026
										    apply 'mon_nodes'/1
											('false')
										    let <NReleases1> =
											%% Line 1027
											apply 'set_status'/3
											    (Vsn, 'current', NReleases)
										    in  %% Line 1028
											{'ok',NReleases1,Unpurged,CurrentVsn,Descr}
									%% Line 1029
									<'restart_emulator'>
									    when call 'erlang':'=:='
										  (Static,
										   'true') ->
									    %% Line 1030
									    call 'erlang':'throw'
										('static_emulator')
									%% Line 1031
									<'restart_emulator'> when 'true' ->
									    do  %% Line 1032
										apply 'mon_nodes'/1
										    ('false')
										do  %% Line 1033
										    apply 'prepare_restart_new_emulator'/7
											(StartPrg, RootDir, %% Line 1034
													    RelDir, %% Line 1034
														    Vsn, %% Line 1034
															 Release, %% Line 1035
																  NReleases, %% Line 1035
																	     Masters)
										    %% Line 1036
										    {'restart_emulator',CurrentVsn,Descr}
									%% Line 1037
									<Else> when 'true' ->
									    do  %% Line 1038
										call 'application_controller':'config_change'
										    (EnvBefore)
										do  %% Line 1039
										    apply 'mon_nodes'/1
											('false')
										    %% Line 1040
										    Else
								      end
							      -| ['compiler_generated'] )
							    ( <_cor50> when 'true' ->
								  ( call ( 'erlang'
									   -| ['compiler_generated'] ):( 'error'
													 -| ['compiler_generated'] )
									(( {'badrecord','release'}
									   -| ['compiler_generated'] ))
								    -| ['compiler_generated'] )
							      -| ['compiler_generated'] )
							  end
							  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				  ( <_cor40> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','release'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			  %% Line 1042
			  <Error> when 'true' ->
			      %% Line 1043
			      Error
			end
		%% Line 1045
		<_cor61> when 'true' ->
		    %% Line 1046
		    {'error',{'no_such_release',Vsn}}
	      end
	  ( <_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25})
		  -| [{'function_name',{'do_install_release',3}}] )
	    -| ['compiler_generated'] )
	end
'new_emulator_make_tmp_release'/5 =
    %% Line 1049
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1050
	( case _cor4 of
	    ( <( {'release',_cor31,_rec45,_cor32,_cor33,_cor34}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 1051
		  ( case _cor3 of
		      ( <( {'release',_cor36,_rec46,_cor37,_cor38,_cor39}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <TmpVsn> =
				%% Line 1052
				call 'erlang':'++'
				    ([95|[95|[110|[101|[119|[95|[101|[109|[117|[108|[97|[116|[111|[114|[95|[95]]]]]]]]]]]]]]]], _rec45)
			    in  %% Line 1053
				case apply 'get_base_libs'/1
					 (_cor38) of
				  %% Line 1054
				  <{'ok',BaseLibs = {Kernel,Stdlib,Sasl},_cor46}> when 'true' ->
				      %% Line 1055
				      case apply 'get_base_libs'/1
					       (_cor38) of
					%% Line 1056
					<{'ok',_cor52,RestLibs}> when 'true' ->
					    let <TmpLibs> =
						%% Line 1058
						[Kernel|[Stdlib|[Sasl|RestLibs]]]
					    in  let <_cor22> =
						    %% Line 1062
						    {'release',_cor31,TmpVsn,_cor37,TmpLibs,'unpacked'}
						in  do  %% Line 1063
							apply 'new_emulator_make_hybrid_boot'/7
							    (_rec45, _rec46, TmpVsn, %% Line 1064
										     BaseLibs, _cor2, _cor1, _cor0)
							do  %% Line 1065
							    apply 'new_emulator_make_hybrid_config'/5
								(_rec45, _rec46, TmpVsn, _cor2, _cor0)
							    %% Line 1067
							    {TmpVsn,_cor22}
					%% Line 1068
					<{'error',{'missing',Missing}}> when 'true' ->
					    %% Line 1069
					    call 'erlang':'throw'
						({'error',{'missing_base_app',_rec45,Missing}})
					( <_cor24> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor24})
					  -| ['compiler_generated'] )
				      end
				  %% Line 1071
				  <{'error',{'missing',Missing}}> when 'true' ->
				      %% Line 1072
				      call 'erlang':'throw'
					  ({'error',{'missing_base_app',_rec46,Missing}})
				  ( <_cor25> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor25})
				    -| ['compiler_generated'] )
				end
			-| ['compiler_generated'] )
		      ( <_cor40> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','release'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor35> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','release'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'get_base_libs'/1 =
    %% Line 1078
    fun (_cor0) ->
	%% Line 1079
	apply 'get_base_libs'/5
	    (_cor0, 'undefined', 'undefined', 'undefined', [])
'get_base_libs'/5 =
    %% Line 1080
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Kernel = {'kernel',_cor11,_cor12}|Libs],'undefined',Stdlib,Sasl,Rest> when 'true' ->
	      %% Line 1081
	      apply 'get_base_libs'/5
		  (Libs, Kernel, Stdlib, Sasl, Rest)
	  %% Line 1082
	  <[Stdlib = {'stdlib',_cor13,_cor14}|Libs],Kernel,'undefined',Sasl,Rest> when 'true' ->
	      %% Line 1083
	      apply 'get_base_libs'/5
		  (Libs, Kernel, Stdlib, Sasl, Rest)
	  %% Line 1084
	  <[Sasl = {'sasl',_cor15,_cor16}|Libs],Kernel,Stdlib,'undefined',Rest> when 'true' ->
	      %% Line 1085
	      apply 'get_base_libs'/5
		  (Libs, Kernel, Stdlib, Sasl, Rest)
	  %% Line 1086
	  <[Lib|Libs],Kernel,Stdlib,Sasl,Rest> when 'true' ->
	      %% Line 1087
	      apply 'get_base_libs'/5
		  (Libs, Kernel, Stdlib, Sasl, [Lib|Rest])
	  %% Line 1088
	  <[],'undefined',_X_Stdlib,_X_Sasl,_X_Rest> when 'true' ->
	      %% Line 1089
	      {'error',{'missing','kernel'}}
	  %% Line 1090
	  <[],_X_Kernel,'undefined',_X_Sasl,_X_Rest> when 'true' ->
	      %% Line 1091
	      {'error',{'missing','stdlib'}}
	  %% Line 1092
	  <[],_X_Kernel,_X_Stdlib,'undefined',_X_Rest> when 'true' ->
	      %% Line 1093
	      {'error',{'missing','sasl'}}
	  %% Line 1094
	  <[],Kernel,Stdlib,Sasl,Rest> when 'true' ->
	      let <_cor5> =
		  %% Line 1095
		  call 'lists':'reverse'
		      (Rest)
	      in  %% Line 1095
		  {'ok',{Kernel,Stdlib,Sasl},_cor5}
	  ( <_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'get_base_libs',5}}] )
	    -| ['compiler_generated'] )
	end
'new_emulator_make_hybrid_boot'/7 =
    %% Line 1097
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <FromBootFile> =
	    %% Line 1098
	    call 'filename':'join'
		([_cor2|[_cor6|[[115|[116|[97|[114|[116|[46|[98|[111|[111|[116]]]]]]]]]]]]])
	in  let <ToBootFile> =
		%% Line 1099
		call 'filename':'join'
		    ([_cor2|[_cor5|[[115|[116|[97|[114|[116|[46|[98|[111|[111|[116]]]]]]]]]]]]])
	    in  let <TmpBootFile> =
		    %% Line 1100
		    call 'filename':'join'
			([_cor2|[_cor4|[[115|[116|[97|[114|[116|[46|[98|[111|[111|[116]]]]]]]]]]]]])
		in  do  %% Line 1101
			apply 'ensure_dir'/2
			    (TmpBootFile, _cor0)
			let <Args> =
			    %% Line 1102
			    [_cor5|[_cor1|[]]]
			in  %% Line 1103
			    case apply 'read_file'/2
				     (FromBootFile, _cor0) of
			      <{'ok',FromBoot}> when 'true' ->
				  %% Line 1104
				  case apply 'read_file'/2
					   (ToBootFile, _cor0) of
				    <{'ok',ToBoot}> when 'true' ->
					%% Line 1105
					case _cor3 of
					  <{{_cor26,_cor27,KernelPath},{_cor28,_cor29,StdlibPath},{_cor30,_cor31,SaslPath}}> when 'true' ->
					      let <_cor16> =
						  %% Line 1106
						  call 'filename':'join'
						      (KernelPath, [101|[98|[105|[110]]]])
					      in  let <_cor15> =
						      %% Line 1107
						      call 'filename':'join'
							  (StdlibPath, [101|[98|[105|[110]]]])
						  in  let <_cor14> =
							  %% Line 1108
							  call 'filename':'join'
							      (SaslPath, [101|[98|[105|[110]]]])
						      in  let <Paths> = {_cor16,_cor15,_cor14}
							  in  %% Line 1109
							      case call 'systools_make':'make_hybrid_boot'
								       (_cor4, FromBoot, ToBoot, Paths, Args) of
								%% Line 1110
								<{'ok',TmpBoot}> when 'true' ->
								    %% Line 1111
								    apply 'write_file'/3
									(TmpBootFile, TmpBoot, _cor0)
								%% Line 1112
								<{'error',Reason}> when 'true' ->
								    %% Line 1113
								    call 'erlang':'throw'
									({'error',{'could_not_create_hybrid_boot',Reason}})
								( <_cor18> when 'true' ->
								      primop 'match_fail'
									  ({'case_clause',_cor18})
								  -| ['compiler_generated'] )
							      end
					  ( <_cor13> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor13})
					    -| ['compiler_generated'] )
					end
				    ( <_cor12> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor12})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor11> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor11})
				-| ['compiler_generated'] )
			    end
'new_emulator_make_hybrid_config'/5 =
    %% Line 1116
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <FromFile> =
	    %% Line 1117
	    call 'filename':'join'
		([_cor1|[_cor4|[[115|[121|[115|[46|[99|[111|[110|[102|[105|[103]]]]]]]]]]]]])
	in  let <ToFile> =
		%% Line 1118
		call 'filename':'join'
		    ([_cor1|[_cor3|[[115|[121|[115|[46|[99|[111|[110|[102|[105|[103]]]]]]]]]]]]])
	    in  let <TmpFile> =
		    %% Line 1119
		    call 'filename':'join'
			([_cor1|[_cor2|[[115|[121|[115|[46|[99|[111|[110|[102|[105|[103]]]]]]]]]]]]])
		in  let <_cor9> =
			%% Line 1122
			case apply 'consult'/2
				 (FromFile, _cor0) of
			  %% Line 1123
			  <{'ok',[FC|[]]}> when 'true' ->
			      %% Line 1124
			      FC
			  %% Line 1125
			  <{'error',Error1}> when 'true' ->
			      do  %% Line 1126
				  call 'io':'format'
				      ([87|[97|[114|[110|[105|[110|[103|[58|[32|[126|[119|[32|[99|[97|[110|[32|[110|[111|[116|[32|[114|[101|[97|[100|[32|[126|[112|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1127
																												 ['release_handler'|[FromFile|[Error1|[]]]])
				  %% Line 1128
				  []
			  ( <_cor8> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor8})
			    -| ['compiler_generated'] )
			end
		    in  let <_cor17> =
			    %% Line 1132
			    case apply 'consult'/2
				     (ToFile, _cor0) of
			      %% Line 1133
			      <{'ok',[ToConfig|[]]}> when 'true' ->
				  %% Line 1134
				  ( letrec
					'lc$^0'/1 =
					    fun (_cor13) ->
						case _cor13 of
						  <[App|_cor12]> when 'true' ->
						      let <_cor14> =
							  call 'lists':'keyfind'
							      (App, 1, ToConfig)
						      in  let <_cor15> =
							      apply 'lc$^0'/1
								  (_cor12)
							  in  ( [_cor14|_cor15]
								-| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_cor13> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor13})
							  -| [{'function_name',{'lc$^0',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  apply 'lc$^0'/1
					    (['kernel'|['stdlib'|['sasl']]])
				    -| ['list_comprehension'] )
			      %% Line 1135
			      <{'error',Error2}> when 'true' ->
				  do  %% Line 1136
				      call 'io':'format'
					  ([87|[97|[114|[110|[105|[110|[103|[58|[32|[126|[119|[32|[99|[97|[110|[32|[110|[111|[116|[32|[114|[101|[97|[100|[32|[126|[112|[58|[32|[126|[112|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 1137
																												     ['release_handler'|[ToFile|[Error2|[]]]])
				      %% Line 1138
				      ['false'|['false'|['false']]]
			      ( <_cor16> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor16})
				-| ['compiler_generated'] )
			    end
			in  %% Line 1131
			    case _cor17 of
			      <[Kernel|[Stdlib|[Sasl|[]]]]> when 'true' ->
				  let <Config1> =
				      %% Line 1141
				      apply 'replace_config'/3
					  ('kernel', _cor9, Kernel)
				  in  let <Config2> =
					  %% Line 1142
					  apply 'replace_config'/3
					      ('stdlib', Config1, Stdlib)
				      in  let <Config3> =
					      %% Line 1143
					      apply 'replace_config'/3
						  ('sasl', Config2, Sasl)
					  in  let <ConfigStr> =
						  %% Line 1145
						  call 'io_lib':'format'
						      ([126|[112|[46|[126|[110]]]]], [Config3|[]])
					      in  %% Line 1146
						  apply 'write_file'/3
						      (TmpFile, ConfigStr, _cor0)
			      ( <_cor18> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor18})
				-| ['compiler_generated'] )
			    end
'replace_config'/3 =
    %% Line 1154
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <App,Config,'false'> when 'true' ->
	      %% Line 1155
	      call 'lists':'keydelete'
		  (App, 1, Config)
	  %% Line 1156
	  <App,Config,AppConfig> when 'true' ->
	      %% Line 1157
	      call 'lists':'keystore'
		  (App, 1, Config, AppConfig)
	end
'new_emulator_rm_tmp_release'/6 =
    %% Line 1160
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <TmpVsn = [95|[95|[110|[101|[119|[95|[101|[109|[117|[108|[97|[116|[111|[114|[95|[95|_cor14]]]]]]]]]]]]]]]],EVsn,NewVsn,%% Line 1161
																 RelDir,%% Line 1161
																	Releases,%% Line 1161
																		 Masters> when 'true' ->
	      do  %% Line 1162
		  case call 'os':'type'
			   () of
		    %% Line 1163
		    <{'win32','nt'}> when 'true' ->
			%% Line 1164
			apply 'rename_tmp_service'/3
			    (EVsn, TmpVsn, NewVsn)
		    %% Line 1165
		    <_cor15> when 'true' ->
			'ok'
		  end
		  let <_cor7> =
		      %% Line 1168
		      call 'filename':'join'
			  (RelDir, TmpVsn)
		  in  do  %% Line 1168
			  apply 'remove_dir'/2
			      (_cor7, Masters)
			  %% Line 1169
			  call 'lists':'keydelete'
			      (TmpVsn, 3, Releases)
	  %% Line 1170
	  <_cor16,_cor17,_cor18,_cor19,Releases,_cor20> when 'true' ->
	      %% Line 1171
	      Releases
	end
'rename_tmp_service'/3 =
    %% Line 1174
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 1175
	    call 'erlang':'node'
		()
	in  let <_cor5> =
		%% Line 1175
		call 'erlang':'atom_to_list'
		    (_cor4)
	    in  let <_cor6> =
		    %% Line 1175
		    call 'string':'tokens'
			(_cor5, [64])
		in  let <_cor7> =
			%% Line 1175
			call 'erlang':'hd'
			    (_cor6)
		    in  let <_cor3> =
			    %% Line 1175
			    [95|_cor1]
			in  let <FromName> =
				%% Line 1175
				call 'erlang':'++'
				    (_cor7, _cor3)
			    in  let <_cor10> =
				    %% Line 1176
				    call 'erlang':'node'
					()
				in  let <_cor11> =
					%% Line 1176
					call 'erlang':'atom_to_list'
					    (_cor10)
				    in  let <_cor12> =
					    %% Line 1176
					    call 'string':'tokens'
						(_cor11, [64])
					in  let <_cor13> =
						%% Line 1176
						call 'erlang':'hd'
						    (_cor12)
					    in  let <_cor9> =
						    %% Line 1176
						    [95|_cor0]
						in  let <ToName> =
							%% Line 1176
							call 'erlang':'++'
							    (_cor13, _cor9)
						    in  do  %% Line 1177
							    case call 'erlsrv':'get_service'
								     (_cor2, ToName) of
							      %% Line 1178
							      <{'error',_X_Error}> when 'true' ->
								  'ok'
							      %% Line 1180
							      <_X_Data> when 'true' ->
								  %% Line 1181
								  case call 'erlsrv':'remove_service'
									   (ToName) of
								    <{'ok',_cor20}> when 'true' ->
									'ok'
								    ( <_cor15> when 'true' ->
									  primop 'match_fail'
									      ({'badmatch',_cor15})
								      -| ['compiler_generated'] )
								  end
							    end
							    %% Line 1184
							    apply 'rename_service'/3
								(_cor2, FromName, ToName)
'rename_service'/3 =
    %% Line 1188
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1189
	case call 'erlsrv':'rename_service'
		 (_cor2, _cor1, _cor0) of
	  %% Line 1190
	  <{'ok',_cor8}> when 'true' ->
	      %% Line 1191
	      case call 'erlsrv':'get_service'
		       (_cor2, _cor0) of
		%% Line 1192
		<{'error',Error1}> when 'true' ->
		    %% Line 1193
		    call 'erlang':'throw'
			({'error',Error1})
		%% Line 1194
		<_X_Data2> when 'true' ->
		    %% Line 1195
		    'ok'
	      end
	  %% Line 1197
	  <Error2> when 'true' ->
	      %% Line 1198
	      call 'erlang':'throw'
		  ({'error',{'service_rename_failed',Error2}})
	end
'do_make_services_permanent'/4 =
    %% Line 1207
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 1208
	    call 'erlang':'node'
		()
	in  let <_cor6> =
		%% Line 1208
		call 'erlang':'atom_to_list'
		    (_cor5)
	    in  let <_cor7> =
		    %% Line 1208
		    call 'string':'tokens'
			(_cor6, [64])
		in  let <_cor8> =
			%% Line 1208
			call 'erlang':'hd'
			    (_cor7)
		    in  let <_cor4> =
			    %% Line 1209
			    [95|_cor3]
			in  let <PermName> =
				%% Line 1209
				call 'erlang':'++'
				    (_cor8, _cor4)
			    in  let <_cor11> =
				    %% Line 1210
				    call 'erlang':'node'
					()
				in  let <_cor12> =
					%% Line 1210
					call 'erlang':'atom_to_list'
					    (_cor11)
				    in  let <_cor13> =
					    %% Line 1210
					    call 'string':'tokens'
						(_cor12, [64])
					in  let <_cor14> =
						%% Line 1210
						call 'erlang':'hd'
						    (_cor13)
					    in  let <_cor10> =
						    %% Line 1211
						    [95|_cor2]
						in  let <Name> =
							%% Line 1211
							call 'erlang':'++'
							    (_cor14, _cor10)
						    in  %% Line 1212
							case call 'erlsrv':'get_service'
								 (_cor0, Name) of
							  %% Line 1213
							  <{'error',_X_Error}> when 'true' ->
							      let <_cor16> =
								  %% Line 1216
								  call 'os':'getenv'
								      ([69|[82|[76|[83|[82|[86|[95|[83|[69|[82|[86|[73|[67|[69|[95|[78|[65|[77|[69]]]]]]]]]]]]]]]]]]])
							      in  %% Line 1216
								  case <> of
								    %% Line 1217
								    <>
									when call 'erlang':'=='
									      (_cor16,
									       PermName) ->
									do  %% Line 1218
									    apply 'rename_service'/3
										(_cor0, PermName, Name)
									    do  %% Line 1223
										call 'os':'putenv'
										    ([69|[82|[76|[83|[82|[86|[95|[83|[69|[82|[86|[73|[67|[69|[95|[78|[65|[77|[69]]]]]]]]]]]]]]]]]]], Name)
										%% Line 1227
										call 'heart':'cycle'
										    ()
								    %% Line 1228
								    <> when 'true' ->
									%% Line 1229
									call 'erlang':'throw'
									    ({'error','service_name_missmatch'})
								  end
							  %% Line 1231
							  <Data> when 'true' ->
							      let <UpdData> =
								  %% Line 1232
								  call 'erlsrv':'new_service'
								      (Name, Data, [])
							      in  %% Line 1233
								  case call 'erlsrv':'store_service'
									   (_cor0, UpdData) of
								    %% Line 1234
								    <'ok'> when 'true' ->
									%% Line 1235
									case call 'erlsrv':'disable_service'
										 (_cor1, PermName) of
									  <{'ok',_cor29}> when 'true' ->
									      %% Line 1236
									      case call 'erlsrv':'enable_service'
										       (_cor0, Name) of
										<{'ok',_cor30}> when 'true' ->
										    %% Line 1237
										    case call 'erlsrv':'remove_service'
											     (PermName) of
										      <{'ok',_cor31}> when 'true' ->
											  do  %% Line 1239
											      call 'os':'putenv'
												  ([69|[82|[76|[83|[82|[86|[95|[83|[69|[82|[86|[73|[67|[69|[95|[78|[65|[77|[69]]]]]]]]]]]]]]]]]]], Name)
											      let <_cor32> =
												  %% Line 1240
												  call 'heart':'cycle'
												      ()
											      in  %% Line 1240
												  case _cor32 of
												    <'ok'> when 'true' ->
													( _cor32
													  -| ['compiler_generated'] )
												    ( <_cor22> when 'true' ->
													  primop 'match_fail'
													      ({'badmatch',_cor22})
												      -| ['compiler_generated'] )
												  end
										      ( <_cor21> when 'true' ->
											    primop 'match_fail'
												({'badmatch',_cor21})
											-| ['compiler_generated'] )
										    end
										( <_cor20> when 'true' ->
										      primop 'match_fail'
											  ({'badmatch',_cor20})
										  -| ['compiler_generated'] )
									      end
									  ( <_cor19> when 'true' ->
										primop 'match_fail'
										    ({'badmatch',_cor19})
									    -| ['compiler_generated'] )
									end
								    %% Line 1241
								    <Error4> when 'true' ->
									%% Line 1242
									call 'erlang':'throw'
									    (Error4)
								  end
							end
'do_make_permanent'/2 =
    %% Line 1246
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'state',%% Line 1247
		    Unpurged,_cor30,%% Line 1247
				    RelDir,Releases,_cor31,_cor32,%% Line 1248
								  Masters,_cor33,%% Line 1249
										 Static,_cor34},%% Line 1250
												Vsn> when 'true' ->
	      %% Line 1251
	      case call 'lists':'keysearch'
		       (Vsn, 3, Releases) of
		%% Line 1252
		<{'value',{'release',_cor35,_cor36,EVsn,_cor37,Status}}>
		    when %% Line 1253
		      try
			  let <_cor2> =
			      call 'erlang':'=/='
				  (Status, 'unpacked')
			  in  let <_cor3> =
				  call 'erlang':'=/='
				      (Status, 'old')
			      in  let <_cor4> =
				      call 'erlang':'=/='
					  (Status, 'permanent')
				  in  let <_cor5> =
					  call 'erlang':'and'
					      (_cor3, _cor4)
				      in  call 'erlang':'and'
					      (_cor2, _cor5)
		      of <Try> ->
			  Try
		      catch <T,R> ->
			  'false' ->
		    let <Dir> =
			%% Line 1254
			call 'filename':'join'
			    ([RelDir|[Vsn|[]]])
		    in  let <_cor8> =
			    catch
				let <_cor7> =
				    %% Line 1256
				    call 'filename':'join'
					(Dir, [115|[121|[115|[46|[99|[111|[110|[102|[105|[103]]]]]]]]]])
				in  %% Line 1256
				    apply 'check_file'/3
					(_cor7, %% Line 1257
						'regular', %% Line 1257
							   Masters)
			in  let <_cor10> =
				%% Line 1256
				case _cor8 of
				  %% Line 1258
				  <'ok'> when 'true' ->
				      call 'filename':'join'
					  (Dir, [115|[121|[115]]])
				  %% Line 1259
				  <_cor38> when 'true' ->
				      'false'
				end
			    in  let <Boot> =
				    %% Line 1261
				    call 'filename':'join'
					(Dir, [115|[116|[97|[114|[116|[46|[98|[111|[111|[116]]]]]]]]]])
				in  do  %% Line 1262
					apply 'check_file'/3
					    (Boot, 'regular', Masters)
					do  %% Line 1263
					    apply 'set_permanent_files'/5
						(RelDir, EVsn, Vsn, Masters, Static)
					    let <NewReleases> =
						%% Line 1264
						apply 'set_status'/3
						    (Vsn, 'permanent', Releases)
					    in  do  %% Line 1265
						    apply 'write_releases'/3
							(RelDir, NewReleases, Masters)
						    do  %% Line 1266
							case call 'os':'type'
								 () of
							  %% Line 1267
							  <{'win32','nt'}> when 'true' ->
							      %% Line 1268
							      case %% Line 1269
								   call 'lists':'keysearch'
								       ('permanent', 6, %% Line 1270
											Releases) of
								<{'value',PermanentRelease}> when 'true' ->
								    %% Line 1271
								    ( case PermanentRelease of
									( <( {'release',_cor39,_rec56,_cor40,_cor41,_cor42}
									     -| ['compiler_generated'] )> when 'true' ->
									      let <_cor21> =
										  catch
										      %% Line 1273
										      apply 'do_make_services_permanent'/4
											  (_rec56, %% Line 1274
												   Vsn, _cor40, %% Line 1276
														EVsn)
									      in  %% Line 1273
										  case _cor21 of
										    %% Line 1277
										    <{'error',Reason}> when 'true' ->
											%% Line 1278
											call 'erlang':'throw'
											    ({'error',{'service_update_failed',Reason}})
										    %% Line 1279
										    <_cor49> when 'true' ->
											'ok'
										  end
									  -| ['compiler_generated'] )
									( <_cor43> when 'true' ->
									      ( call ( 'erlang'
										       -| ['compiler_generated'] ):( 'error'
														     -| ['compiler_generated'] )
										    (( {'badrecord','release'}
										       -| ['compiler_generated'] ))
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								      end
								      -| ['compiler_generated'] )
								( <_cor14> when 'true' ->
								      primop 'match_fail'
									  ({'badmatch',_cor14})
								  -| ['compiler_generated'] )
							      end
							  %% Line 1282
							  <_cor50> when 'true' ->
							      'ok'
							end
							let <_cor24> =
							    %% Line 1285
							    call 'filename':'join'
								(Dir, [115|[116|[97|[114|[116]]]]])
							in  %% Line 1285
							    case call 'init':'make_permanent'
								     (_cor24, _cor10) of
							      <'ok'> when 'true' ->
								  let <_cor26> =
								      %% Line 1286
								      apply 'brutal_purge'/1
									  (Unpurged)
								  in  %% Line 1286
								      {'ok',NewReleases,_cor26}
							      ( <_cor25> when 'true' ->
								    primop 'match_fail'
									({'badmatch',_cor25})
								-| ['compiler_generated'] )
							    end
		%% Line 1287
		<{'value',{'release',_cor51,_cor52,_cor53,_cor54,'permanent'}}> when 'true' ->
		    %% Line 1288
		    {'ok',Releases,Unpurged}
		%% Line 1289
		<{'value',{'release',_cor55,_cor56,_cor57,_cor58,Status}}> when 'true' ->
		    %% Line 1290
		    {'error',{'bad_status',Status}}
		%% Line 1291
		<'false'> when 'true' ->
		    %% Line 1292
		    {'error',{'no_such_release',Vsn}}
		( <_cor27> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor27})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor29,_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29,_cor28})
		  -| [{'function_name',{'do_make_permanent',2}}] )
	    -| ['compiler_generated'] )
	end
'do_back_service'/4 =
    %% Line 1296
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 1297
	    call 'erlang':'node'
		()
	in  let <_cor5> =
		%% Line 1297
		call 'erlang':'atom_to_list'
		    (_cor4)
	    in  let <_cor6> =
		    %% Line 1297
		    call 'string':'tokens'
			(_cor5, [64])
		in  let <NN> =
			%% Line 1297
			call 'erlang':'hd'
			    (_cor6)
		    in  let <_cor8> =
			    %% Line 1298
			    [95|_cor3]
			in  let <OldName> =
				%% Line 1298
				call 'erlang':'++'
				    (NN, _cor8)
			    in  let <_cor10> =
				    %% Line 1299
				    [95|_cor2]
				in  let <CurrentName> =
					%% Line 1299
					call 'erlang':'++'
					    (NN, _cor10)
				    in  let <_cor13> =
					    %% Line 1300
					    case call 'erlsrv':'get_service'
						     (_cor0, CurrentName) of
					      %% Line 1301
					      <{'error',Error}> when 'true' ->
						  %% Line 1302
						  call 'erlang':'throw'
						      ({'error',Error})
					      %% Line 1303
					      <Data> when 'true' ->
						  %% Line 1304
						  call 'erlsrv':'new_service'
						      (OldName, Data, [])
					    end
					in  %% Line 1306
					    case ( call 'erlsrv':'store_service'
						       (_cor1, _cor13)
						   -| ['result_not_wanted'] ) of
					      %% Line 1307
					      <'ok'> when 'true' ->
						  %% Line 1308
						  case ( call 'erlsrv':'disable_service'
							     (_cor0, CurrentName)
							 -| ['result_not_wanted'] ) of
						    <{'ok',_cor35}> when 'true' ->
							%% Line 1309
							case ( call 'erlsrv':'enable_service'
								   (_cor1, OldName)
							       -| ['result_not_wanted'] ) of
							  <{'ok',_cor37}> when 'true' ->
							      let <_cor20> =
								  %% Line 1313
								  call 'erlsrv':'erlsrv'
								      (_cor1)
							      in  let <OldErlSrv> =
								      %% Line 1313
								      call 'filename':'nativename'
									  (_cor20)
								  in  let <_cor22> =
									  %% Line 1314
									  call 'erlsrv':'erlsrv'
									      (_cor0)
								      in  let <CurrentErlSrv> =
									      %% Line 1314
									      call 'filename':'nativename'
										  (_cor22)
									  in  let <_cor24> =
										  %% Line 1316
										  call 'erlang':'++'
										      ([32|[115|[116|[97|[114|[116|[32]]]]]]], OldName)
									      in  let <_cor25> =
										      %% Line 1316
										      call 'erlang':'++'
											  (OldErlSrv, _cor24)
										  in  let <_cor26> =
											  %% Line 1316
											  [32|[38|[32|_cor25]]]
										      in  let <_cor27> =
											      %% Line 1315
											      call 'erlang':'++'
												  (CurrentName, _cor26)
											  in  let <_cor28> =
												  %% Line 1315
												  call 'erlang':'++'
												      ([32|[114|[101|[109|[111|[118|[101|[32]]]]]]]], _cor27)
											      in  let <_cor29> =
												      %% Line 1315
												      call 'erlang':'++'
													  (CurrentErlSrv, _cor28)
												  in  %% Line 1315
												      case call 'heart':'set_cmd'
													       (_cor29) of
													%% Line 1317
													<'ok'> when 'true' ->
													    %% Line 1318
													    'ok'
													%% Line 1319
													<Error3> when 'true' ->
													    %% Line 1320
													    call 'erlang':'throw'
														({'error',{'heart:set_cmd() error',Error3}})
												      end
							  ( <_cor16> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_cor16})
							    -| ['compiler_generated'] )
							end
						    ( <_cor15> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor15})
						      -| ['compiler_generated'] )
						  end
					      %% Line 1310
					      <Error2> when 'true' ->
						  %% Line 1311
						  ( call 'erlang':'throw'
							(Error2)
						    -| ['result_not_wanted'] )
					    end
'do_reboot_old_release'/2 =
    %% Line 1323
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'state',_cor15,_cor16,%% Line 1324
				  RelDir,Releases,_cor17,_cor18,%% Line 1324
								Masters,_cor19,%% Line 1325
									       Static,_cor20},%% Line 1326
											      Vsn> when 'true' ->
	      %% Line 1327
	      case call 'lists':'keysearch'
		       (Vsn, 3, Releases) of
		%% Line 1328
		<{'value',{'release',_cor21,_cor22,EVsn,_cor23,'old'}}> when 'true' ->
		    let <_cor4> =
			%% Line 1329
			case call 'os':'type'
				 () of
			  %% Line 1330
			  <{'win32','nt'}> when 'true' ->
			      %% Line 1332
			      case call 'lists':'keysearch'
				       ('permanent', %% Line 1333
						     6, %% Line 1334
							Releases) of
				%% Line 1335
				<'false'> when 'true' ->
				    %% Line 1336
				    call 'lists':'keysearch'
					('current', %% Line 1337
						    6, %% Line 1338
						       Releases)
				%% Line 1339
				<{'value',CR}> when 'true' ->
				    %% Line 1340
				    CR
				( <_cor2> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor2})
				  -| ['compiler_generated'] )
			      end
			  %% Line 1342
			  <_cor24> when 'true' ->
			      %% Line 1343
			      'false'
			end
		    in  do  %% Line 1345
			    apply 'set_permanent_files'/5
				(RelDir, EVsn, Vsn, Masters, Static)
			    let <NewReleases> =
				%% Line 1346
				apply 'set_status'/3
				    (Vsn, 'permanent', Releases)
			    in  do  %% Line 1347
				    apply 'write_releases'/3
					(RelDir, NewReleases, Masters)
				    do  %% Line 1348
					case call 'os':'type'
						 () of
					  %% Line 1349
					  <{'win32','nt'}> when 'true' ->
					      %% Line 1352
					      ( case _cor4 of
						  ( <( {'release',_cor25,_rec58,_cor26,_cor27,_cor28}
						       -| ['compiler_generated'] )> when 'true' ->
							apply 'do_back_service'/4
							    (Vsn, _rec58, EVsn, _cor26)
						    -| ['compiler_generated'] )
						  ( <_cor29> when 'true' ->
							( call ( 'erlang'
								 -| ['compiler_generated'] ):( 'error'
											       -| ['compiler_generated'] )
							      (( {'badrecord','release'}
								 -| ['compiler_generated'] ))
							  -| ['compiler_generated'] )
						    -| ['compiler_generated'] )
						end
						-| ['compiler_generated'] )
					  %% Line 1354
					  <_cor35> when 'true' ->
					      'ok'
					end
					%% Line 1357
					'ok'
		%% Line 1358
		<{'value',{'release',_cor36,_cor37,_cor38,_cor39,Status}}> when 'true' ->
		    %% Line 1359
		    {'error',{'bad_status',Status}}
		%% Line 1360
		<'false'> when 'true' ->
		    %% Line 1361
		    {'error',{'no_such_release',Vsn}}
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor12})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'do_reboot_old_release',2}}] )
	    -| ['compiler_generated'] )
	end
'set_permanent_files'/5 =
    %% Line 1369
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <RelDir,EVsn,Vsn,'false',_cor17> when 'true' ->
	      let <_cor7> =
		  %% Line 1370
		  call 'filename':'join'
		      ([RelDir|[[115|[116|[97|[114|[116|[95|[101|[114|[108|[46|[100|[97|[116|[97]]]]]]]]]]]]]]]])
	      in  let <_cor5> =
		      %% Line 1371
		      [32|Vsn]
		  in  let <_cor6> =
			  %% Line 1371
			  call 'erlang':'++'
			      (EVsn, _cor5)
		      in  %% Line 1370
			  apply 'write_start'/3
			      (_cor7, _cor6, %% Line 1372
					     'false')
	  %% Line 1373
	  <RelDir,EVsn,Vsn,Masters,'false'> when 'true' ->
	      let <_cor10> =
		  %% Line 1374
		  call 'filename':'join'
		      ([RelDir|[[115|[116|[97|[114|[116|[95|[101|[114|[108|[46|[100|[97|[116|[97]]]]]]]]]]]]]]]])
	      in  let <_cor8> =
		      %% Line 1375
		      [32|Vsn]
		  in  let <_cor9> =
			  %% Line 1375
			  call 'erlang':'++'
			      (EVsn, _cor8)
		      in  %% Line 1374
			  apply 'write_start'/3
			      (_cor10, _cor9, %% Line 1376
					      Masters)
	  %% Line 1377
	  <RelDir,_X_EVsn,Vsn,Masters,_X_Static> when 'true' ->
	      let <VsnDir> =
		  %% Line 1378
		  call 'filename':'join'
		      ([RelDir|[Vsn|[]]])
	      in  %% Line 1379
		  apply 'set_static_files'/3
		      (VsnDir, RelDir, Masters)
	end
'do_remove_service'/1 =
    %% Line 1382
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 1386
	    call 'erlang':'node'
		()
	in  let <_cor3> =
		%% Line 1386
		call 'erlang':'atom_to_list'
		    (_cor2)
	    in  let <_cor4> =
		    %% Line 1386
		    call 'string':'tokens'
			(_cor3, [64])
		in  let <_cor5> =
			%% Line 1386
			call 'erlang':'hd'
			    (_cor4)
		    in  let <_cor1> =
			    %% Line 1387
			    [95|_cor0]
			in  let <ServiceName> =
				%% Line 1387
				call 'erlang':'++'
				    (_cor5, _cor1)
			    in  %% Line 1388
				case call 'erlsrv':'get_service'
					 (ServiceName) of
				  %% Line 1389
				  <{'error',_X_Error}> when 'true' ->
				      %% Line 1390
				      'ok'
				  %% Line 1391
				  <_X_Data> when 'true' ->
				      %% Line 1392
				      case call 'erlsrv':'remove_service'
					       (ServiceName) of
					<{'ok',_cor10}> when 'true' ->
					    %% Line 1393
					    'ok'
					( <_cor7> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor7})
					  -| ['compiler_generated'] )
				      end
				end
'do_remove_release'/4 =
    %% Line 1396
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1398
	case call 'lists':'keysearch'
		 (_cor1, 3, _cor0) of
	  %% Line 1399
	  <{'value',{'release',_cor24,_cor25,_cor26,_cor27,'permanent'}}> when 'true' ->
	      %% Line 1400
	      {'error',{'permanent',_cor1}}
	  %% Line 1401
	  <{'value',{'release',_cor28,_cor29,EVsn,RemoveLibs,_cor30}}>
	      when call 'erlang':'=:='
		    (_cor29,
		     _cor1) ->
	      do  %% Line 1402
		  case call 'os':'type'
			   () of
		    %% Line 1403
		    <{'win32','nt'}> when 'true' ->
			%% Line 1404
			apply 'do_remove_service'/1
			    (_cor1)
		    %% Line 1405
		    <_cor31> when 'true' ->
			'ok'
		  end
		  let <NewReleases> =
		      %% Line 1409
		      call 'lists':'keydelete'
			  (_cor1, 3, _cor0)
		  in  let <_cor10> =
			  %% Line 1411
			  ( fun (_cor7,_cor6) ->
				case <_cor7,_cor6> of
				  <{'release',_cor32,_cor33,_cor34,Libs,_cor35},Remove> when 'true' ->
				      %% Line 1412
				      apply 'diff_dir'/2
					  (Remove, Libs)
				  ( <_cor9,_cor8> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor9,_cor8})
					  -| [{'function_name',{'-do_remove_release/4-fun-0-',2}}] )
				    -| ['compiler_generated'] )
				end
			    -| [{'id',{0,0,'-do_remove_release/4-fun-0-'}}] )
		      in  let <RemoveThese> =
			      %% Line 1411
			      call 'lists':'foldl'
				  (_cor10, %% Line 1413
					   RemoveLibs, %% Line 1413
						       NewReleases)
			  in  let <_cor14> =
				  %% Line 1414
				  ( fun (_cor12) ->
					case _cor12 of
					  <{_X_Lib,_X_LVsn,LDir}> when 'true' ->
					      %% Line 1415
					      apply 'remove_file'/1
						  (LDir)
					  ( <_cor13> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor13})
						  -| [{'function_name',{'-do_remove_release/4-fun-1-',1}}] )
					    -| ['compiler_generated'] )
					end
				    -| [{'id',{0,0,'-do_remove_release/4-fun-1-'}}] )
			      in  do  %% Line 1414
				      call 'lists':'foreach'
					  (_cor14, %% Line 1416
						   RemoveThese)
				      let <_cor15> =
					  %% Line 1417
					  call 'filename':'join'
					      ([_cor2|[_cor1|[]]])
				      in  do  %% Line 1417
					      apply 'remove_file'/1
						  (_cor15)
					      do  %% Line 1418
						  case call 'lists':'keysearch'
							   (EVsn, 4, NewReleases) of
						    %% Line 1419
						    <{'value',_cor36}> when 'true' ->
							'ok'
						    %% Line 1420
						    <'false'> when 'true' ->
							let <_cor16> =
							    %% Line 1421
							    call 'erlang':'++'
								([101|[114|[116|[115|[45]]]]], EVsn)
							in  let <_cor17> =
								%% Line 1421
								call 'filename':'join'
								    (_cor3, _cor16)
							    in  %% Line 1421
								apply 'remove_file'/1
								    (_cor17)
						    ( <_cor18> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor18})
						      -| ['compiler_generated'] )
						  end
						  do  %% Line 1423
						      apply 'write_releases'/3
							  (_cor2, NewReleases, 'false')
						      %% Line 1424
						      {'ok',NewReleases}
	  %% Line 1425
	  <'false'> when 'true' ->
	      %% Line 1426
	      {'error',{'no_such_release',_cor1}}
	  ( <_cor19> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor19})
	    -| ['compiler_generated'] )
	end
'do_set_unpacked'/6 =
    %% Line 1429
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Release> =
	    %% Line 1430
	    apply 'check_rel'/4
		(_cor5, _cor3, _cor2, _cor0)
	in  %% Line 1431
	    case Release of
	      <{'release',_cor20,Vsn,_cor21,_cor22,_cor23}> when 'true' ->
		  do  %% Line 1432
		      case call 'lists':'keysearch'
			       (Vsn, 3, _cor1) of
			%% Line 1433
			<{'value',_cor24}> when 'true' ->
			    call 'erlang':'throw'
				({'error',{'existing_release',Vsn}})
			%% Line 1434
			<'false'> when 'true' ->
			    'ok'
			( <_cor8> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor8})
			  -| ['compiler_generated'] )
		      end
		      let <_cor11> =
			  %% Line 1436
			  call 'erlang':'setelement'
			      (6, Release, 'unpacked')
		      in  let <NewReleases> =
			      %% Line 1436
			      [_cor11|_cor1]
			  in  let <VsnDir> =
				  %% Line 1437
				  call 'filename':'join'
				      ([_cor4|[Vsn|[]]])
			      in  do  %% Line 1438
				      apply 'make_dir'/2
					  (VsnDir, _cor0)
				      do  %% Line 1439
					  apply 'write_releases'/3
					      (_cor4, NewReleases, _cor0)
					  %% Line 1440
					  {'ok',NewReleases,Vsn}
	      ( <_cor7> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor7})
		-| ['compiler_generated'] )
	    end
'do_set_removed'/4 =
    %% Line 1442
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1443
	case call 'lists':'keysearch'
		 (_cor2, 3, _cor1) of
	  %% Line 1444
	  <{'value',{'release',_cor10,_cor11,_cor12,_cor13,'permanent'}}> when 'true' ->
	      %% Line 1445
	      {'error',{'permanent',_cor2}}
	  %% Line 1446
	  <{'value',_cor14}> when 'true' ->
	      let <NewReleases> =
		  %% Line 1447
		  call 'lists':'keydelete'
		      (_cor2, 3, _cor1)
	      in  do  %% Line 1448
		      apply 'write_releases'/3
			  (_cor3, NewReleases, _cor0)
		      %% Line 1449
		      {'ok',NewReleases}
	  %% Line 1450
	  <'false'> when 'true' ->
	      %% Line 1451
	      {'error',{'no_such_release',_cor2}}
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'get_rh_script'/4 =
    %% Line 1473
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <{'release',_cor9,[95|[95|[110|[101|[119|[95|[101|[109|[117|[108|[97|[116|[111|[114|[95|[95|CurrentVsn]]]]]]]]]]]]]]]],_cor10,_cor11,_cor12},%% Line 1474
																		       {'release',_cor13,ToVsn,_cor14,_cor15,_cor16},%% Line 1475
																								     RelDir,%% Line 1476
																									    Masters> when 'true' ->
	      %% Line 1477
	      case %% Line 1478
		   apply 'do_get_rh_script'/4
		       (CurrentVsn, ToVsn, RelDir, Masters) of
		<{'ok',{Vsn,Descr,['restart_new_emulator'|Script]}}> when 'true' ->
		    %% Line 1479
		    {'ok',{Vsn,Descr,Script}}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1480
	  <{'release',_cor17,CurrentVsn,_cor18,_cor19,_cor20},%% Line 1481
							      {'release',_cor21,ToVsn,_cor22,_cor23,_cor24},%% Line 1482
													    RelDir,%% Line 1483
														   Masters> when 'true' ->
	      %% Line 1484
	      apply 'do_get_rh_script'/4
		  (CurrentVsn, ToVsn, RelDir, Masters)
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'get_rh_script',4}}] )
	    -| ['compiler_generated'] )
	end
'do_get_rh_script'/4 =
    %% Line 1486
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Relup> =
	    %% Line 1487
	    call 'filename':'join'
		([_cor1|[_cor2|[[114|[101|[108|[117|[112]]]]]]]])
	in  %% Line 1488
	    case apply 'try_upgrade'/4
		     (_cor2, _cor3, Relup, _cor0) of
	      %% Line 1489
	      <{'ok',RhScript}> when 'true' ->
		  %% Line 1490
		  {'ok',RhScript}
	      %% Line 1491
	      <_cor12> when 'true' ->
		  let <Relup2> =
		      %% Line 1492
		      call 'filename':'join'
			  ([_cor1|[_cor3|[[114|[101|[108|[117|[112]]]]]]]])
		  in  %% Line 1493
		      case apply 'try_downgrade'/4
			       (_cor2, _cor3, Relup2, _cor0) of
			%% Line 1494
			<{'ok',RhScript}> when 'true' ->
			    %% Line 1495
			    {'ok',RhScript}
			%% Line 1496
			<_cor13> when 'true' ->
			    %% Line 1497
			    call 'erlang':'throw'
				({'error',{'no_matching_relup',_cor2,_cor3}})
		      end
	    end
'try_upgrade'/4 =
    %% Line 1501
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1502
	case apply 'consult'/2
		 (_cor1, _cor0) of
	  %% Line 1503
	  <{'ok',[{_cor10,ListOfRhScripts,_cor11}|[]]}>
	      when call 'erlang':'=:='
		    (_cor10,
		     _cor3) ->
	      %% Line 1504
	      case call 'lists':'keysearch'
		       (_cor2, 1, ListOfRhScripts) of
		%% Line 1505
		<{'value',RhScript}> when 'true' ->
		    %% Line 1506
		    {'ok',RhScript}
		%% Line 1507
		<_cor12> when 'true' ->
		    %% Line 1508
		    'error'
	      end
	  %% Line 1510
	  <{'ok',_cor13}> when 'true' ->
	      %% Line 1511
	      call 'erlang':'throw'
		  ({'error',{'bad_relup_file',_cor1}})
	  %% Line 1512
	  <{'error',Reason}>
	      when call 'erlang':'is_tuple'
		    (Reason) ->
	      %% Line 1513
	      call 'erlang':'throw'
		  ({'error',{'bad_relup_file',_cor1}})
	  %% Line 1514
	  <{'error','enoent'}> when 'true' ->
	      %% Line 1515
	      'error'
	  %% Line 1516
	  <{'error',FileError}> when 'true' ->
	      %% Line 1517
	      call 'erlang':'throw'
		  ({'error',{FileError,_cor1}})
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'try_downgrade'/4 =
    %% Line 1520
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1521
	case apply 'consult'/2
		 (_cor1, _cor0) of
	  %% Line 1522
	  <{'ok',[{_cor10,_cor11,ListOfRhScripts}|[]]}>
	      when call 'erlang':'=:='
		    (_cor10,
		     _cor2) ->
	      %% Line 1523
	      case call 'lists':'keysearch'
		       (_cor3, 1, ListOfRhScripts) of
		%% Line 1524
		<{'value',RhScript}> when 'true' ->
		    %% Line 1525
		    {'ok',RhScript}
		%% Line 1526
		<_cor12> when 'true' ->
		    %% Line 1527
		    'error'
	      end
	  %% Line 1529
	  <{'ok',_cor13}> when 'true' ->
	      %% Line 1530
	      call 'erlang':'throw'
		  ({'error',{'bad_relup_file',_cor1}})
	  %% Line 1531
	  <{'error',Reason}>
	      when call 'erlang':'is_tuple'
		    (Reason) ->
	      %% Line 1532
	      call 'erlang':'throw'
		  ({'error',{'bad_relup_file',_cor1}})
	  %% Line 1533
	  <{'error',FileError}> when 'true' ->
	      %% Line 1534
	      call 'erlang':'throw'
		  ({'error',{FileError,_cor1}})
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'set_status'/3 =
    %% Line 1539
    fun (_cor2,_cor1,_cor0) ->
	let <_cor32> =
	    %% Line 1540
	    ( fun (_cor30) ->
		  case _cor30 of
		    <Release = {'release',_cor36,_cor37,_cor38,_cor39,_cor40}>
			when let <_cor8> =
			      call 'erlang':'=='
				  (_cor37, _cor2)
			  in  let <_cor11> =
				  %% Line 1541
				  call 'erlang':'=:='
				      (_cor40, 'permanent')
			      in  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'and'
									 -| ['compiler_generated'] )
					(_cor8, _cor11)
				    -| ['compiler_generated'] ) ->
			%% Line 1545
			'true'
		    %% Line 1546
		    <Release = {'release',_cor41,_cor42,_cor43,_cor44,_cor45}>
			when call 'erlang':'=='
			      (_cor42,
			       _cor2) ->
			let <_cor20> =
			    %% Line 1547
			    call 'erlang':'setelement'
				(6, Release, _cor1)
			in  %% Line 1547
			    {'true',_cor20}
		    %% Line 1548
		    <Release = {'release',_cor52,_cor53,_cor54,_cor55,_cor56}>
			when call 'erlang':'=='
			      (_cor56,
			       _cor1) ->
			let <_cor29> =
			    %% Line 1549
			    call 'erlang':'setelement'
				(6, Release, 'old')
			in  %% Line 1549
			    {'true',_cor29}
		    %% Line 1550
		    <_cor63> when 'true' ->
			%% Line 1551
			'true'
		  end
	      -| [{'id',{0,0,'-set_status/3-fun-0-'}}] )
	in  %% Line 1540
	    call 'lists':'zf'
		(_cor32, _cor0)
'get_latest_release'/1 =
    %% Line 1554
    fun (_cor0) ->
	%% Line 1555
	case call 'lists':'keysearch'
		 ('current', 6, _cor0) of
	  %% Line 1556
	  <{'value',Release}> when 'true' ->
	      %% Line 1557
	      Release
	  %% Line 1558
	  <'false'> when 'true' ->
	      %% Line 1559
	      case %% Line 1560
		   call 'lists':'keysearch'
		       ('permanent', 6, _cor0) of
		<{'value',Release}> when 'true' ->
		    %% Line 1561
		    Release
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'diff_dir'/2 =
    %% Line 1565
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[H|T],L> when 'true' ->
	      %% Line 1566
	      case apply 'memlib'/2
		       (H, L) of
		%% Line 1567
		<'true'> when 'true' ->
		    apply 'diff_dir'/2
			(T, L)
		%% Line 1568
		<'false'> when 'true' ->
		    let <_cor2> =
			apply 'diff_dir'/2
			    (T, L)
		    in  [H|_cor2]
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1570
	  <[],_cor6> when 'true' ->
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'diff_dir',2}}] )
	    -| ['compiler_generated'] )
	end
'memlib'/2 =
    %% Line 1572
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Lib,Vsn,_X_Dir},[{_cor4,_cor5,_X_Dir2}|_X_T]>
	      when let <_cor6> =
		    call 'erlang':'=:='
			(_cor4, Lib)
		in  let <_cor7> =
			call 'erlang':'=:='
			    (_cor5, Vsn)
		    in  call 'erlang':'and'
			    (_cor6, _cor7) ->
	      'true'
	  %% Line 1573
	  <Lib,[_X_H|T]> when 'true' ->
	      apply 'memlib'/2
		  (Lib, T)
	  %% Line 1574
	  <_X_Lib,[]> when 'true' ->
	      'false'
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'memlib',2}}] )
	    -| ['compiler_generated'] )
	end
'remove_file'/1 =
    %% Line 1577
    fun (_cor0) ->
	%% Line 1578
	case call 'file':'read_link_info'
		 (_cor0) of
	  %% Line 1579
	  <{'ok',Info = {'file_info',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27,_cor28}}>
	      when call 'erlang':'=:='
		    (_cor17,
		     'directory') ->
	      %% Line 1580
	      case call 'file':'list_dir'
		       (_cor0) of
		%% Line 1581
		<{'ok',Files}> when 'true' ->
		    let <_cor10> =
			%% Line 1582
			( fun (_cor8) ->
			      let <_cor7> =
				  %% Line 1583
				  call 'filename':'join'
				      (_cor0, _cor8)
			      in  %% Line 1583
				  apply 'remove_file'/1
				      (_cor7)
			  -| [{'id',{0,0,'-remove_file/1-fun-0-'}}] )
		    in  do  %% Line 1582
			    call 'lists':'foreach'
				(_cor10, %% Line 1584
					 Files)
			    %% Line 1585
			    case call 'file':'del_dir'
				     (_cor0) of
			      %% Line 1586
			      <'ok'> when 'true' ->
				  'ok'
			      %% Line 1587
			      <{'error',Reason}> when 'true' ->
				  call 'erlang':'throw'
				      ({'error',Reason})
			      ( <_cor11> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor11})
				-| ['compiler_generated'] )
			    end
		%% Line 1589
		<{'error',Reason}> when 'true' ->
		    %% Line 1590
		    call 'erlang':'throw'
			({'error',Reason})
		( <_cor12> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor12})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1592
	  <{'ok',_X_Info}> when 'true' ->
	      %% Line 1593
	      case call 'file':'delete'
		       (_cor0) of
		%% Line 1594
		<'ok'> when 'true' ->
		    'ok'
		%% Line 1595
		<{'error',Reason}> when 'true' ->
		    call 'erlang':'throw'
			({'error',Reason})
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1597
	  <{'error',_X_Reason}> when 'true' ->
	      %% Line 1598
	      call 'erlang':'throw'
		  ({'error',{'no_such_file',_cor0}})
	  ( <_cor14> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor14})
	    -| ['compiler_generated'] )
	end
'do_write_file'/2 =
    %% Line 1602
    fun (_cor1,_cor0) ->
	%% Line 1603
	apply 'do_write_file'/3
	    (_cor1, _cor0, [])
'do_write_file'/3 =
    %% Line 1604
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1605
	case call 'file':'open'
		 (_cor2, ['write'|_cor0]) of
	  %% Line 1606
	  <{'ok',Fd}> when 'true' ->
	      do  %% Line 1607
		  call 'io':'put_chars'
		      (Fd, _cor1)
		  let <_cor8> =
		      %% Line 1608
		      call 'file':'close'
			  (Fd)
		  in  %% Line 1608
		      case _cor8 of
			<'ok'> when 'true' ->
			    ( _cor8
			      -| ['compiler_generated'] )
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor3})
			  -| ['compiler_generated'] )
		      end
	  %% Line 1609
	  <{'error',Reason}> when 'true' ->
	      %% Line 1610
	      {'error',{Reason,_cor2}}
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'change_appl_data'/3 =
    %% Line 1617
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <RelDir,{'release',_cor16,Vsn,_cor17,_cor18,_cor19},Masters> when 'true' ->
	      let <Dir> =
		  %% Line 1618
		  call 'filename':'join'
		      ([RelDir|[Vsn|[]]])
	      in  let <BootFile> =
		      %% Line 1619
		      call 'filename':'join'
			  (Dir, [115|[116|[97|[114|[116|[46|[98|[111|[111|[116]]]]]]]]]])
		  in  %% Line 1620
		      case apply 'read_file'/2
			       (BootFile, Masters) of
			%% Line 1621
			<{'ok',Bin}> when 'true' ->
			    let <_cor5> =
				%% Line 1622
				call 'filename':'join'
				    (Dir, [115|[121|[115|[46|[99|[111|[110|[102|[105|[103]]]]]]]]]])
			    in  let <_cor7> =
				    %% Line 1622
				    case apply 'consult'/2
					     (_cor5, Masters) of
				      %% Line 1623
				      <{'ok',[Conf|[]]}> when 'true' ->
					  Conf
				      %% Line 1624
				      <_cor20> when 'true' ->
					  []
				    end
				in  let <_cor9> =
					%% Line 1626
					call 'erlang':'binary_to_term'
					    (Bin)
				    in  let <Appls> =
					    %% Line 1626
					    apply 'get_appls'/1
						(_cor9)
					in  %% Line 1627
					    case call 'application_controller':'change_application_data'
						     (Appls, _cor7) of
					      %% Line 1628
					      <'ok'> when 'true' ->
						  Appls
					      %% Line 1629
					      <{'error',Reason}> when 'true' ->
						  call 'erlang':'exit'
						      ({'change_appl_data',Reason})
					      ( <_cor11> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor11})
						-| ['compiler_generated'] )
					    end
			%% Line 1631
			<{'error',_X_Reason}> when 'true' ->
			    %% Line 1632
			    call 'erlang':'throw'
				({'error',{'no_such_file',BootFile}})
			( <_cor12> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor12})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13})
		  -| [{'function_name',{'change_appl_data',3}}] )
	    -| ['compiler_generated'] )
	end
'get_appls'/1 =
    %% Line 1639
    fun (_cor0) ->
	case _cor0 of
	  <{'script',_cor2,Script}> when 'true' ->
	      apply 'get_appls'/2
		  (Script, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'get_appls',1}}] )
	    -| ['compiler_generated'] )
	end
'get_appls'/2 =
    %% Line 1642
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'kernelProcess','application_controller',%% Line 1643
						      {'application_controller','start',[App|[]]}}|%% Line 1643
												   T],%% Line 1643
												      Res> when 'true' ->
	      %% Line 1644
	      apply 'get_appls'/2
		  (T, [App|Res])
	  %% Line 1646
	  <[{'apply',{'application','load',[App|[]]}}|T],Res> when 'true' ->
	      %% Line 1647
	      apply 'get_appls'/2
		  (T, [App|Res])
	  %% Line 1648
	  <[_cor4|T],Res> when 'true' ->
	      %% Line 1649
	      apply 'get_appls'/2
		  (T, Res)
	  %% Line 1650
	  <[],Res> when 'true' ->
	      %% Line 1651
	      Res
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'get_appls',2}}] )
	    -| ['compiler_generated'] )
	end
'mon_nodes'/1 =
    %% Line 1654
    fun (_cor0) ->
	case _cor0 of
	  <'true'> when 'true' ->
	      let <_cor4> =
		  %% Line 1655
		  call 'net_kernel':'monitor_nodes'
		      ('true')
	      in  %% Line 1655
		  case _cor4 of
		    <'ok'> when 'true' ->
			( _cor4
			  -| ['compiler_generated'] )
		    ( <_cor1> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor1})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1656
	  <'false'> when 'true' ->
	      %% Line 1657
	      case call 'net_kernel':'monitor_nodes'
		       ('false') of
		<'ok'> when 'true' ->
		    %% Line 1658
		    apply 'flush'/0
			()
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'mon_nodes',1}}] )
	    -| ['compiler_generated'] )
	end
'flush'/0 =
    %% Line 1660
    fun () ->
	%% Line 1661
	receive
	  %% Line 1662
	  <{'nodedown',_cor0}> when 'true' ->
	      apply 'flush'/0
		  ()
	  %% Line 1663
	  <{'nodeup',_cor1}> when 'true' ->
	      apply 'flush'/0
		  ()
	after %% Line 1665
	      0 ->
	  %% Line 1665
	  'ok'
'prepare_restart_nt'/3 =
    %% Line 1668
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'release',_cor30,Vsn,EVsn,_cor31,_cor32},%% Line 1669
						     {'release',_cor33,PermVsn,PermEVsn,_cor34,_cor35},%% Line 1670
												       DataFileName> when 'true' ->
	      let <_cor4> =
		  %% Line 1671
		  call 'erlang':'node'
		      ()
	      in  let <_cor5> =
		      %% Line 1671
		      call 'erlang':'atom_to_list'
			  (_cor4)
		  in  let <_cor6> =
			  %% Line 1671
			  call 'string':'tokens'
			      (_cor5, [64])
		      in  let <_cor7> =
			      %% Line 1671
			      call 'erlang':'hd'
				  (_cor6)
			  in  let <_cor3> =
				  %% Line 1672
				  [95|PermVsn]
			      in  let <CurrentServiceName> =
				      %% Line 1672
				      call 'erlang':'++'
					  (_cor7, _cor3)
				  in  let <_cor10> =
					  %% Line 1673
					  call 'erlang':'node'
					      ()
				      in  let <_cor11> =
					      %% Line 1673
					      call 'erlang':'atom_to_list'
						  (_cor10)
					  in  let <_cor12> =
						  %% Line 1673
						  call 'string':'tokens'
						      (_cor11, [64])
					      in  let <_cor13> =
						      %% Line 1673
						      call 'erlang':'hd'
							  (_cor12)
						  in  let <_cor9> =
							  %% Line 1674
							  [95|Vsn]
						      in  let <FutureServiceName> =
							      %% Line 1674
							      call 'erlang':'++'
								  (_cor13, _cor9)
							  in  let <_cor16> =
								  %% Line 1675
								  case call 'erlsrv':'get_service'
									   (PermEVsn, CurrentServiceName) of
								    %% Line 1676
								    <Error1 = {'error',_cor36}> when 'true' ->
									%% Line 1677
									call 'erlang':'throw'
									    (Error1)
								    %% Line 1678
								    <CS> when 'true' ->
									%% Line 1679
									CS
								  end
							      in  let <_cor18> =
								      %% Line 1683
								      call 'filename':'nativename'
									  (DataFileName)
								  in  let <FutureService> =
									  %% Line 1681
									  call 'erlsrv':'new_service'
									      (FutureServiceName, _cor16, _cor18, %% Line 1689
														  CurrentServiceName)
								      in  %% Line 1691
									  case call 'erlsrv':'store_service'
										   (EVsn, FutureService) of
									    %% Line 1692
									    <Error2 = {'error',_cor37}> when 'true' ->
										%% Line 1693
										call 'erlang':'throw'
										    (Error2)
									    %% Line 1694
									    <_X_X> when 'true' ->
										%% Line 1695
										case call 'erlsrv':'disable_service'
											 (EVsn, FutureServiceName) of
										  <{'ok',_cor38}> when 'true' ->
										      let <_cor21> =
											  %% Line 1696
											  call 'erlsrv':'erlsrv'
											      (EVsn)
										      in  let <ErlSrv> =
											      %% Line 1696
											      call 'filename':'nativename'
												  (_cor21)
											  in  let <_cor23> =
												  %% Line 1697
												  call 'erlang':'++'
												      ([32|[115|[116|[97|[114|[116|[95|[100|[105|[115|[97|[98|[108|[101|[100|[32]]]]]]]]]]]]]]]], FutureServiceName)
											      in  let <StartDisabled> =
												      %% Line 1697
												      call 'erlang':'++'
													  (ErlSrv, _cor23)
												  in  %% Line 1698
												      case call 'heart':'set_cmd'
													       (StartDisabled) of
													%% Line 1699
													<'ok'> when 'true' ->
													    %% Line 1700
													    'ok'
													%% Line 1701
													<Error3> when 'true' ->
													    %% Line 1702
													    call 'erlang':'throw'
														({'error',{'heart:set_cmd() error',Error3}})
												      end
										  ( <_cor20> when 'true' ->
											primop 'match_fail'
											    ({'badmatch',_cor20})
										    -| ['compiler_generated'] )
										end
									  end
	  ( <_cor29,_cor28,_cor27> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29,_cor28,_cor27})
		  -| [{'function_name',{'prepare_restart_nt',3}}] )
	    -| ['compiler_generated'] )
	end
'prepare_restart_new_emulator'/7 =
    %% Line 1710
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1712
	case call 'lists':'keysearch'
		 ('permanent', 6, _cor1) of
	  <{'value',PRelease}> when 'true' ->
	      let <NReleases1> =
		  %% Line 1713
		  apply 'set_status'/3
		      (_cor3, 'current', _cor1)
	      in  let <NReleases2> =
		      %% Line 1714
		      apply 'set_status'/3
			  (_cor3, 'tmp_current', NReleases1)
		  in  do  %% Line 1715
			  apply 'write_releases'/3
			      (_cor4, NReleases2, _cor0)
			  %% Line 1716
			  apply 'prepare_restart_new_emulator'/6
			      (_cor6, _cor5, _cor4, _cor2, %% Line 1717
							   PRelease, _cor0)
	  ( <_cor7> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor7})
	    -| ['compiler_generated'] )
	end
'prepare_restart_new_emulator'/6 =
    %% Line 1719
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1721
	case _cor2 of
	  <{'release',_cor21,Vsn,EVsn,_cor22,_cor23}> when 'true' ->
	      let <_cor7> =
		  %% Line 1722
		  [32|Vsn]
	      in  let <Data> =
		      %% Line 1722
		      call 'erlang':'++'
			  (EVsn, _cor7)
		  in  let <DataFile> =
			  %% Line 1723
			  apply 'write_new_start_erl'/3
			      (Data, _cor3, _cor0)
		      in  %% Line 1725
			  case call 'os':'type'
				   () of
			    %% Line 1726
			    <{'win32','nt'}> when 'true' ->
				do  %% Line 1727
				    apply 'write_ini_file'/3
					(_cor4, EVsn, _cor0)
				    %% Line 1728
				    apply 'prepare_restart_nt'/3
					(_cor2, _cor1, DataFile)
			    %% Line 1729
			    <{'unix',_cor24}> when 'true' ->
				let <StartP> =
				    %% Line 1730
				    apply 'check_start_prg'/2
					(_cor5, _cor0)
				in  let <_cor11> =
					%% Line 1731
					[32|DataFile]
				    in  let <_cor12> =
					    %% Line 1731
					    call 'erlang':'++'
						(StartP, _cor11)
					in  %% Line 1731
					    case call 'heart':'set_cmd'
						     (_cor12) of
					      %% Line 1732
					      <'ok'> when 'true' ->
						  %% Line 1733
						  'ok'
					      %% Line 1734
					      <Error> when 'true' ->
						  %% Line 1735
						  call 'erlang':'throw'
						      ({'error',{'heart:set_cmd() error',Error}})
					    end
			    ( <_cor14> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor14})
			      -| ['compiler_generated'] )
			  end
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'check_start_prg'/2 =
    %% Line 1739
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'do_check',StartPrg},Masters> when 'true' ->
	      do  %% Line 1740
		  apply 'check_file'/3
		      (StartPrg, 'regular', Masters)
		  %% Line 1741
		  StartPrg
	  %% Line 1742
	  <{_cor4,StartPrg},_cor5> when 'true' ->
	      %% Line 1743
	      StartPrg
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'check_start_prg',2}}] )
	    -| ['compiler_generated'] )
	end
'write_new_start_erl'/3 =
    %% Line 1745
    fun (_cor2,_cor1,_cor0) ->
	let <DataFile> =
	    %% Line 1746
	    call 'filename':'join'
		([_cor1|[[110|[101|[119|[95|[115|[116|[97|[114|[116|[95|[101|[114|[108|[46|[100|[97|[116|[97]]]]]]]]]]]]]]]]]]]])
	in  do  %% Line 1747
		apply 'write_file'/3
		    (DataFile, _cor2, _cor0)
		%% Line 1748
		DataFile
'transform_release'/3 =
    %% Line 1761
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1762
	case call 'init':'script_id'
		 () of
	  %% Line 1763
	  <{Name,TmpVsn = [95|[95|[110|[101|[119|[95|[101|[109|[117|[108|[97|[116|[111|[114|[95|[95|_cor20]]]]]]]]]]]]]]]]}> when 'true' ->
	      let <DReleases> =
		  %% Line 1768
		  call 'lists':'keydelete'
		      (TmpVsn, 3, _cor1)
	      in  do  %% Line 1769
		      apply 'write_releases'/3
			  (_cor2, DReleases, _cor0)
		      %% Line 1770
		      apply 'set_current'/2
			  ({Name,TmpVsn}, _cor1)
	  %% Line 1771
	  <ScriptId> when 'true' ->
	      let <F> =
		  %% Line 1772
		  ( fun (_cor12) ->
			case _cor12 of
			  <Release = {'release',_cor21,_cor22,_cor23,_cor24,_cor25}>
			      when call 'erlang':'=:='
				    (_cor25,
				     'tmp_current') ->
			      %% Line 1773
			      call 'erlang':'setelement'
				  (6, Release, 'unpacked')
			  %% Line 1774
			  <Release> when 'true' ->
			      Release
			end
		    -| [{'id',{0,0,'-transform_release/3-fun-0-'}}] )
	      in  %% Line 1776
		  case call 'lists':'map'
			   (F, _cor1) of
		    %% Line 1777
		    <_cor32>
			when call 'erlang':'=:='
			      (_cor32,
			       _cor1) ->
			_cor1
		    %% Line 1779
		    <DReleases> when 'true' ->
			do  %% Line 1780
			    apply 'write_releases'/3
				(_cor2, DReleases, _cor0)
			    %% Line 1781
			    apply 'set_current'/2
				(ScriptId, _cor1)
		  end
	end
'set_current'/2 =
    %% Line 1785
    fun (_cor1,_cor0) ->
	let <F1> =
	    %% Line 1786
	    ( fun (_cor19) ->
		  case _cor19 of
		    <Release = {'release',_cor24,_cor25,_cor26,_cor27,_cor28}>
			when call 'erlang':'=:='
			      (_cor28,
			       'tmp_current') ->
			%% Line 1787
			case _cor1 of
			  %% Line 1788
			  <{_X_Name,Vsn}>
			      when call 'erlang':'=='
				    (_cor25,
				     Vsn) ->
			      %% Line 1789
			      call 'erlang':'setelement'
				  (6, Release, 'current')
			  %% Line 1790
			  <_cor35> when 'true' ->
			      %% Line 1791
			      call 'erlang':'setelement'
				  (6, Release, 'unpacked')
			end
		    %% Line 1793
		    <Release> when 'true' ->
			Release
		  end
	      -| [{'id',{0,0,'-set_current/2-fun-0-'}}] )
	in  %% Line 1795
	    call 'lists':'map'
		(F1, _cor0)
'check_opt_file'/3 =
    %% Line 1804
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    catch
		%% Line 1805
		apply 'check_file'/3
		    (_cor2, _cor1, _cor0)
	in  %% Line 1805
	    case _cor3 of
	      %% Line 1806
	      <'ok'> when 'true' ->
		  %% Line 1807
		  'true'
	      %% Line 1808
	      <_X_Error> when 'true' ->
		  do  %% Line 1809
		      call 'io':'format'
			  ([87|[97|[114|[110|[105|[110|[103|[58|[32|[126|[112|[32|[109|[105|[115|[115|[105|[110|[103|[32|[40|[111|[112|[116|[105|[111|[110|[97|[108|[41|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [_cor2|[]])
		      %% Line 1810
		      'false'
	    end
'check_file'/3 =
    %% Line 1813
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <FileName,Type,'false'> when 'true' ->
	      %% Line 1814
	      apply 'do_check_file'/2
		  (FileName, Type)
	  %% Line 1815
	  <FileName,Type,Masters> when 'true' ->
	      %% Line 1816
	      apply 'check_file_masters'/3
		  (FileName, Type, Masters)
	end
'check_file_masters'/3 =
    %% Line 1819
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <FileName,Type,[Master|Masters]> when 'true' ->
	      do  %% Line 1820
		  apply 'do_check_file'/3
		      (Master, FileName, Type)
		  %% Line 1821
		  apply 'check_file_masters'/3
		      (FileName, Type, Masters)
	  %% Line 1822
	  <_X_FileName,_X_Type,[]> when 'true' ->
	      %% Line 1823
	      'ok'
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'check_file_masters',3}}] )
	    -| ['compiler_generated'] )
	end
'do_check_file'/2 =
    %% Line 1826
    fun (_cor1,_cor0) ->
	%% Line 1827
	case call 'file':'read_file_info'
		 (_cor1) of
	  %% Line 1828
	  <{'ok',Info = {'file_info',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23}}>
	      when call 'erlang':'=='
		    (_cor12,
		     _cor0) ->
	      'ok'
	  %% Line 1829
	  <{'error',_X_Reason}> when 'true' ->
	      call 'erlang':'throw'
		  ({'error',{'no_such_file',_cor1}})
	  ( <_cor8> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor8})
	    -| ['compiler_generated'] )
	end
'do_check_file'/3 =
    %% Line 1832
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1833
	case call 'rpc':'call'
		 (_cor2, 'file', 'read_file_info', [_cor1|[]]) of
	  %% Line 1834
	  <{'ok',Info = {'file_info',_cor13,_cor14,_cor15,_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25}}>
	      when call 'erlang':'=='
		    (_cor14,
		     _cor0) ->
	      'ok'
	  %% Line 1835
	  <_cor26> when 'true' ->
	      call 'erlang':'throw'
		  ({'error',{'no_such_file',{_cor2,_cor1}}})
	end
'extract_rel_file'/3 =
    %% Line 1842
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1843
	call 'erl_tar':'extract'
	    (_cor1, [{'files',[_cor2|[]]}|[{'cwd',_cor0}|['compressed']]])
'extract_tar'/2 =
    %% Line 1845
    fun (_cor1,_cor0) ->
	%% Line 1846
	case call 'erl_tar':'extract'
		 (_cor0, ['keep_old_files'|[{'cwd',_cor1}|['compressed']]]) of
	  %% Line 1847
	  <'ok'> when 'true' ->
	      %% Line 1848
	      'ok'
	  %% Line 1849
	  <{'error',Reason,Name}> when 'true' ->
	      %% Line 1850
	      call 'erlang':'throw'
		  ({'error',{'cannot_extract_file',Name,Reason}})
	  %% Line 1851
	  <{'error',{Name,Reason}}> when 'true' ->
	      %% Line 1852
	      call 'erlang':'throw'
		  ({'error',{'cannot_extract_file',Name,Reason}})
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'write_releases'/3 =
    %% Line 1855
    fun (_cor2,_cor1,_cor0) ->
	let <_cor14> =
	    %% Line 1860
	    ( fun (_cor12) ->
		  case _cor12 of
		    <Release = {'release',_cor19,_cor20,_cor21,_cor22,_cor23}>
			when call 'erlang':'=:='
			      (_cor23,
			       'current') ->
			let <_cor11> =
			    %% Line 1861
			    call 'erlang':'setelement'
				(6, Release, 'unpacked')
			in  %% Line 1861
			    {'true',_cor11}
		    %% Line 1862
		    <_cor30> when 'true' ->
			%% Line 1863
			'true'
		  end
	      -| [{'id',{0,0,'-write_releases/3-fun-0-'}}] )
	in  let <NewReleases> =
		%% Line 1860
		call 'lists':'zf'
		    (_cor14, _cor1)
	    in  %% Line 1865
		apply 'write_releases_1'/3
		    (_cor2, NewReleases, _cor0)
'write_releases_1'/3 =
    %% Line 1868
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Dir,NewReleases,'false'> when 'true' ->
	      %% Line 1869
	      case apply 'do_write_release'/3
		       (Dir, [82|[69|[76|[69|[65|[83|[69|[83]]]]]]]], NewReleases) of
		%% Line 1870
		<'ok'> when 'true' ->
		    'ok'
		%% Line 1871
		<Error> when 'true' ->
		    call 'erlang':'throw'
			(Error)
	      end
	  %% Line 1873
	  <Dir,NewReleases,Masters> when 'true' ->
	      do  %% Line 1874
		  apply 'all_masters'/1
		      (Masters)
		  %% Line 1875
		  apply 'write_releases_m'/3
		      (Dir, NewReleases, Masters)
	end
'do_write_release'/3 =
    %% Line 1877
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1878
	    call 'filename':'join'
		(_cor2, _cor1)
	in  %% Line 1878
	    case call 'file':'open'
		     (_cor3, ['write']) of
	      %% Line 1879
	      <{'ok',Fd}> when 'true' ->
		  %% Line 1880
		  case call 'io':'format'
			   (Fd, [126|[112|[46|[126|[110]]]]], [_cor0|[]]) of
		    <'ok'> when 'true' ->
			let <_cor10> =
			    %% Line 1881
			    call 'file':'close'
				(Fd)
			in  %% Line 1881
			    case _cor10 of
			      <'ok'> when 'true' ->
				  ( _cor10
				    -| ['compiler_generated'] )
			      ( <_cor5> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor5})
				-| ['compiler_generated'] )
			    end
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	      %% Line 1882
	      <{'error',Reason}> when 'true' ->
		  %% Line 1883
		  {'error',Reason}
	      ( <_cor6> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor6})
		-| ['compiler_generated'] )
	    end
'write_releases_m'/3 =
    %% Line 1897
    fun (_cor2,_cor1,_cor0) ->
	let <RelFile> =
	    %% Line 1898
	    call 'filename':'join'
		(_cor2, [82|[69|[76|[69|[65|[83|[69|[83]]]]]]]])
	in  let <Backup> =
		%% Line 1899
		call 'filename':'join'
		    (_cor2, [82|[69|[76|[69|[65|[83|[69|[83|[46|[98|[97|[99|[107|[117|[112]]]]]]]]]]]]]]])
	    in  let <Change> =
		    %% Line 1900
		    call 'filename':'join'
			(_cor2, [82|[69|[76|[69|[65|[83|[69|[83|[46|[99|[104|[97|[110|[103|[101]]]]]]]]]]]]]]])
		in  do  %% Line 1901
			apply 'ensure_RELEASES_exists'/2
			    (_cor0, RelFile)
			%% Line 1902
			case apply 'at_all_masters'/4
				 (_cor0, 'release_handler', 'do_copy_files', %% Line 1903
									     [RelFile|[[Backup|[Change|[]]]|[]]]) of
			  %% Line 1904
			  <'ok'> when 'true' ->
			      %% Line 1905
			      case apply 'at_all_masters'/4
				       (_cor0, 'release_handler', 'do_write_release', %% Line 1906
										      [_cor2|[[82|[69|[76|[69|[65|[83|[69|[83|[46|[99|[104|[97|[110|[103|[101]]]]]]]]]]]]]]]|[_cor1|[]]]]) of
				%% Line 1907
				<'ok'> when 'true' ->
				    %% Line 1908
				    case apply 'at_all_masters'/4
					     (_cor0, 'file', 'rename', %% Line 1909
								       [Change|[RelFile|[]]]) of
				      %% Line 1910
				      <'ok'> when 'true' ->
					  do  %% Line 1911
					      apply 'remove_files'/3
						  ('all', [Backup|[Change|[]]], _cor0)
					      %% Line 1912
					      'ok'
				      %% Line 1913
				      <{'error',{Master,R}}> when 'true' ->
					  do  %% Line 1914
					      apply 'takewhile'/5
						  (Master, _cor0, 'file', 'rename', %% Line 1915
										    [Backup|[RelFile|[]]])
					      do  %% Line 1916
						  apply 'remove_files'/3
						      ('all', [Backup|[Change|[]]], _cor0)
						  %% Line 1917
						  call 'erlang':'throw'
						      ({'error',{Master,R,'move_releases'}})
				      ( <_cor6> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor6})
					-| ['compiler_generated'] )
				    end
				%% Line 1919
				<{'error',{Master,R}}> when 'true' ->
				    do  %% Line 1920
					apply 'remove_files'/3
					    ('all', [Backup|[Change|[]]], _cor0)
					%% Line 1921
					call 'erlang':'throw'
					    ({'error',{Master,R,'update_releases'}})
				( <_cor7> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor7})
				  -| ['compiler_generated'] )
			      end
			  %% Line 1923
			  <{'error',{Master,R}}> when 'true' ->
			      do  %% Line 1924
				  apply 'remove_files'/3
				      (Master, [Backup|[Change|[]]], _cor0)
				  %% Line 1925
				  call 'erlang':'throw'
				      ({'error',{Master,R,'backup_releases'}})
			  ( <_cor8> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor8})
			    -| ['compiler_generated'] )
			end
'ensure_RELEASES_exists'/2 =
    %% Line 1928
    fun (_cor1,_cor0) ->
	%% Line 1929
	case apply 'at_all_masters'/4
		 (_cor1, 'release_handler', 'do_ensure_RELEASES', [_cor0|[]]) of
	  %% Line 1930
	  <'ok'> when 'true' ->
	      %% Line 1931
	      'ok'
	  %% Line 1932
	  <{'error',{Master,R}}> when 'true' ->
	      %% Line 1933
	      call 'erlang':'throw'
		  ({'error',{Master,R,'ensure_RELEASES_exists'}})
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'copy_file'/3 =
    %% Line 1936
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <File,Dir,'false'> when 'true' ->
	      %% Line 1937
	      case apply 'do_copy_file'/2
		       (File, Dir) of
		%% Line 1938
		<'ok'> when 'true' ->
		    'ok'
		%% Line 1939
		<Error> when 'true' ->
		    call 'erlang':'throw'
			(Error)
	      end
	  %% Line 1941
	  <File,Dir,Masters> when 'true' ->
	      do  %% Line 1942
		  apply 'all_masters'/1
		      (Masters)
		  %% Line 1943
		  apply 'copy_file_m'/3
		      (File, Dir, Masters)
	end
'copy_file_m'/3 =
    %% Line 1951
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <File,Dir,[Master|Masters]> when 'true' ->
	      %% Line 1952
	      case call 'rpc':'call'
		       (Master, 'release_handler', 'do_copy_file', [File|[Dir|[]]]) of
		%% Line 1953
		<'ok'> when 'true' ->
		    apply 'copy_file_m'/3
			(File, Dir, Masters)
		%% Line 1954
		<{'error',{Reason,F}}> when 'true' ->
		    call 'erlang':'throw'
			({'error',{Master,Reason,F}})
		%% Line 1955
		<Other> when 'true' ->
		    call 'erlang':'throw'
			({'error',{Master,Other,File}})
	      end
	  %% Line 1957
	  <_X_File,_X_Dir,[]> when 'true' ->
	      %% Line 1958
	      'ok'
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'copy_file_m',3}}] )
	    -| ['compiler_generated'] )
	end
'do_copy_file'/2 =
    %% Line 1960
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1961
	    call 'filename':'basename'
		(_cor1)
	in  let <File2> =
		%% Line 1961
		call 'filename':'join'
		    (_cor0, _cor2)
	    in  %% Line 1962
		apply 'do_copy_file1'/2
		    (_cor1, File2)
'do_copy_file1'/2 =
    %% Line 1964
    fun (_cor1,_cor0) ->
	%% Line 1965
	case call 'file':'read_file'
		 (_cor1) of
	  %% Line 1966
	  <{'ok',Bin}> when 'true' ->
	      %% Line 1967
	      case call 'file':'write_file'
		       (_cor0, Bin) of
		%% Line 1968
		<'ok'> when 'true' ->
		    'ok'
		%% Line 1969
		<{'error',Reason}> when 'true' ->
		    %% Line 1970
		    {'error',{Reason,_cor0}}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1972
	  <{'error',Reason}> when 'true' ->
	      %% Line 1973
	      {'error',{Reason,_cor1}}
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor3})
	    -| ['compiler_generated'] )
	end
'do_copy_files'/2 =
    %% Line 1979
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <File,[ToFile|ToFiles]> when 'true' ->
	      %% Line 1980
	      case apply 'do_copy_file1'/2
		       (File, ToFile) of
		%% Line 1981
		<'ok'> when 'true' ->
		    apply 'do_copy_files'/2
			(File, ToFiles)
		%% Line 1982
		<Error> when 'true' ->
		    Error
	      end
	  %% Line 1984
	  <_cor5,[]> when 'true' ->
	      %% Line 1985
	      'ok'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'do_copy_files',2}}] )
	    -| ['compiler_generated'] )
	end
'do_copy_files'/1 =
    %% Line 1990
    fun (_cor0) ->
	case _cor0 of
	  <[{Src,Dest}|Files]> when 'true' ->
	      %% Line 1991
	      case apply 'do_copy_file1'/2
		       (Src, Dest) of
		%% Line 1992
		<'ok'> when 'true' ->
		    apply 'do_copy_files'/1
			(Files)
		%% Line 1993
		<Error> when 'true' ->
		    Error
	      end
	  %% Line 1995
	  <[]> when 'true' ->
	      %% Line 1996
	      'ok'
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'do_copy_files',1}}] )
	    -| ['compiler_generated'] )
	end
'do_rename_files'/1 =
    %% Line 2001
    fun (_cor0) ->
	case _cor0 of
	  <[{Src,Dest}|Files]> when 'true' ->
	      %% Line 2002
	      case call 'file':'rename'
		       (Src, Dest) of
		%% Line 2003
		<'ok'> when 'true' ->
		    apply 'do_rename_files'/1
			(Files)
		%% Line 2004
		<Error> when 'true' ->
		    Error
	      end
	  %% Line 2006
	  <[]> when 'true' ->
	      %% Line 2007
	      'ok'
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'do_rename_files',1}}] )
	    -| ['compiler_generated'] )
	end
'do_remove_files'/1 =
    %% Line 2012
    fun (_cor0) ->
	case _cor0 of
	  <[File|Files]> when 'true' ->
	      let <_X_> =
		  %% Line 2013
		  ( call 'file':'delete'
			(File)
		    -| ['result_not_wanted'] )
	      in  %% Line 2014
		  apply 'do_remove_files'/1
		      (Files)
	  %% Line 2015
	  <[]> when 'true' ->
	      %% Line 2016
	      'ok'
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'do_remove_files',1}}] )
	    -| ['compiler_generated'] )
	end
'do_ensure_RELEASES'/1 =
    %% Line 2023
    fun (_cor0) ->
	%% Line 2024
	case call 'file':'read_file_info'
		 (_cor0) of
	  %% Line 2025
	  <{'ok',_cor3}> when 'true' ->
	      'ok'
	  %% Line 2026
	  <_cor4> when 'true' ->
	      apply 'do_write_file'/2
		  (_cor0, [91|[93|[46|[32]]]])
	end
'make_dir'/2 =
    %% Line 2032
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Dir,'false'> when 'true' ->
	      do  %% Line 2033
		  ( call 'file':'make_dir'
			(Dir)
		    -| ['result_not_wanted'] )
		  %% Line 2034
		  'ok'
	  %% Line 2035
	  <Dir,Masters> when 'true' ->
	      let <_cor5> =
		  %% Line 2036
		  ( fun (_cor3) ->
			call 'rpc':'call'
			    (_cor3, 'file', 'make_dir', [Dir|[]])
		    -| [{'id',{0,0,'-make_dir/2-fun-0-'}}] )
	      in  %% Line 2036
		  call 'lists':'foreach'
		      (_cor5, %% Line 2037
			      Masters)
	end
'all_masters'/1 =
    %% Line 2042
    fun (_cor0) ->
	%% Line 2043
	case call 'rpc':'multicall'
		 (_cor0, 'erlang', 'info', ['version']) of
	  %% Line 2044
	  <{_cor3,[]}> when 'true' ->
	      'ok'
	  %% Line 2045
	  <{_cor4,BadNodes}> when 'true' ->
	      call 'erlang':'throw'
		  ({'error',{'bad_masters',BadNodes}})
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'at_all_masters'/4 =
    %% Line 2053
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Master|Masters],M,F,A> when 'true' ->
	      %% Line 2054
	      case call 'rpc':'call'
		       (Master, M, F, A) of
		%% Line 2055
		<'ok'> when 'true' ->
		    apply 'at_all_masters'/4
			(Masters, M, F, A)
		%% Line 2056
		<Error> when 'true' ->
		    {'error',{Master,Error}}
	      end
	  %% Line 2058
	  <[],_cor9,_cor10,_cor11> when 'true' ->
	      %% Line 2059
	      'ok'
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'at_all_masters',4}}] )
	    -| ['compiler_generated'] )
	end
'takewhile'/5 =
    %% Line 2065
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 2066
	    ( fun (_cor5) ->
		  case _cor5 of
		    <Ma>
			when call 'erlang':'=='
			      (_cor5,
			       _cor4) ->
			%% Line 2067
			'false'
		    %% Line 2068
		    <Ma> when 'true' ->
			do  %% Line 2069
			    ( call 'rpc':'call'
				  (Ma, _cor2, _cor1, _cor0)
			      -| ['result_not_wanted'] )
			    %% Line 2070
			    'true'
		  end
	      -| [{'id',{0,0,'-takewhile/5-fun-0-'}}] )
	in  do  %% Line 2066
		( call 'lists':'takewhile'
		      (_cor7, _cor3)
		  -| ['result_not_wanted'] )
		%% Line 2072
		'ok'
'consult'/2 =
    %% Line 2074
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <File,'false'> when 'true' ->
	      call 'file':'consult'
		  (File)
	  %% Line 2075
	  <File,Masters> when 'true' ->
	      apply 'consult_master'/2
		  (Masters, File)
	end
'consult_master'/2 =
    %% Line 2082
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Master|Ms],File> when 'true' ->
	      %% Line 2083
	      case call 'rpc':'call'
		       (Master, 'file', 'consult', [File|[]]) of
		%% Line 2084
		<{'badrpc',_cor5}> when 'true' ->
		    apply 'consult_master'/2
			(Ms, File)
		%% Line 2085
		<Res> when 'true' ->
		    Res
	      end
	  %% Line 2087
	  <[],_X_File> when 'true' ->
	      %% Line 2088
	      {'error','no_master'}
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'consult_master',2}}] )
	    -| ['compiler_generated'] )
	end
'read_file'/2 =
    %% Line 2090
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <File,'false'> when 'true' ->
	      %% Line 2091
	      call 'file':'read_file'
		  (File)
	  %% Line 2092
	  <File,Masters> when 'true' ->
	      %% Line 2093
	      apply 'read_master'/2
		  (Masters, File)
	end
'write_file'/3 =
    %% Line 2095
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <File,Data,'false'> when 'true' ->
	      %% Line 2096
	      case call 'file':'write_file'
		       (File, Data) of
		%% Line 2097
		<'ok'> when 'true' ->
		    'ok'
		%% Line 2098
		<Error> when 'true' ->
		    call 'erlang':'throw'
			(Error)
	      end
	  %% Line 2100
	  <File,Data,Masters> when 'true' ->
	      %% Line 2101
	      case apply 'at_all_masters'/4
		       (Masters, 'file', 'write_file', [File|[Data|[]]]) of
		%% Line 2102
		<'ok'> when 'true' ->
		    'ok'
		%% Line 2103
		<Error> when 'true' ->
		    call 'erlang':'throw'
			(Error)
	      end
	end
'ensure_dir'/2 =
    %% Line 2106
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <File,'false'> when 'true' ->
	      %% Line 2107
	      case call 'filelib':'ensure_dir'
		       (File) of
		%% Line 2108
		<'ok'> when 'true' ->
		    'ok'
		%% Line 2109
		<Error> when 'true' ->
		    call 'erlang':'throw'
			(Error)
	      end
	  %% Line 2111
	  <File,Masters> when 'true' ->
	      %% Line 2112
	      case apply 'at_all_masters'/4
		       (Masters, 'filelib', 'ensure_dir', [File|[]]) of
		%% Line 2113
		<'ok'> when 'true' ->
		    'ok'
		%% Line 2114
		<Error> when 'true' ->
		    call 'erlang':'throw'
			(Error)
	      end
	end
'remove_dir'/2 =
    %% Line 2117
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Dir,'false'> when 'true' ->
	      %% Line 2118
	      apply 'remove_file'/1
		  (Dir)
	  %% Line 2119
	  <Dir,Masters> when 'true' ->
	      %% Line 2120
	      case apply 'at_all_masters'/4
		       (Masters, 'release_handler', 'remove_file', [Dir|[]]) of
		%% Line 2121
		<'ok'> when 'true' ->
		    'ok'
		%% Line 2122
		<Error> when 'true' ->
		    call 'erlang':'throw'
			(Error)
	      end
	end
'remove_files'/3 =
    %% Line 2127
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2128
	apply 'takewhile'/5
	    (_cor2, _cor0, 'release_handler', 'do_remove_files', [_cor1|[]])
'read_master'/2 =
    %% Line 2135
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Master|Ms],File> when 'true' ->
	      %% Line 2136
	      case call 'rpc':'call'
		       (Master, 'file', 'read_file', [File|[]]) of
		%% Line 2137
		<{'badrpc',_cor5}> when 'true' ->
		    apply 'read_master'/2
			(Ms, File)
		%% Line 2138
		<Res> when 'true' ->
		    Res
	      end
	  %% Line 2140
	  <[],_X_File> when 'true' ->
	      %% Line 2141
	      {'error','no_master'}
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'read_master',2}}] )
	    -| ['compiler_generated'] )
	end
'write_start'/3 =
    %% Line 2146
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <File,Data,'false'> when 'true' ->
	      %% Line 2147
	      case apply 'do_write_file'/2
		       (File, Data) of
		%% Line 2148
		<'ok'> when 'true' ->
		    'ok'
		%% Line 2149
		<Error> when 'true' ->
		    call 'erlang':'throw'
			(Error)
	      end
	  %% Line 2151
	  <File,Data,Masters> when 'true' ->
	      do  %% Line 2152
		  apply 'all_masters'/1
		      (Masters)
		  %% Line 2153
		  apply 'safe_write_file_m'/3
		      (File, Data, Masters)
	end
'set_static_files'/3 =
    %% Line 2166
    fun (_cor2,_cor1,_cor0) ->
	do  %% Line 2167
	    apply 'all_masters'/1
		(_cor0)
	    let <SrcBoot> =
		%% Line 2170
		call 'filename':'join'
		    (_cor2, [115|[116|[97|[114|[116|[46|[98|[111|[111|[116]]]]]]]]]])
	    in  let <DestBoot> =
		    %% Line 2171
		    call 'filename':'join'
			(_cor1, [115|[116|[97|[114|[116|[46|[98|[111|[111|[116]]]]]]]]]])
		in  let <BackupBoot> =
			%% Line 2172
			call 'filename':'join'
			    (_cor1, [115|[116|[97|[114|[116|[46|[98|[97|[99|[107|[117|[112]]]]]]]]]]]])
		    in  let <SrcConf> =
			    %% Line 2173
			    call 'filename':'join'
				(_cor2, [115|[121|[115|[46|[99|[111|[110|[102|[105|[103]]]]]]]]]])
			in  let <DestConf> =
				%% Line 2174
				call 'filename':'join'
				    (_cor1, [115|[121|[115|[46|[99|[111|[110|[102|[105|[103]]]]]]]]]])
			    in  let <BackupConf> =
				    %% Line 2175
				    call 'filename':'join'
					(_cor1, [115|[121|[115|[46|[98|[97|[99|[107|[117|[112]]]]]]]]]])
				in  %% Line 2177
				    case apply 'at_all_masters'/4
					     (_cor0, 'release_handler', 'do_copy_files', %% Line 2178
											 [[{DestBoot,BackupBoot}|%% Line 2179
														 [{DestConf,BackupConf}|[]]]|%% Line 2179
																	     []]) of
				      %% Line 2180
				      <'ok'> when 'true' ->
					  %% Line 2181
					  case apply 'at_all_masters'/4
						   (_cor0, 'release_handler', 'do_copy_files', %% Line 2182
											       [[{SrcBoot,DestBoot}|%% Line 2183
														    [{SrcConf,DestConf}|[]]]|%% Line 2183
																	     []]) of
					    %% Line 2184
					    <'ok'> when 'true' ->
						do  %% Line 2185
						    apply 'remove_files'/3
							('all', [BackupBoot|[BackupConf|[]]], _cor0)
						    %% Line 2186
						    'ok'
					    %% Line 2187
					    <{'error',{Master,R}}> when 'true' ->
						do  %% Line 2188
						    apply 'takewhile'/5
							(Master, _cor0, 'release_handler', 'do_rename_files', %% Line 2189
													      [{BackupBoot,DestBoot}|%% Line 2190
																     [{BackupConf,DestConf}|[]]])
						    do  %% Line 2191
							apply 'remove_files'/3
							    ('all', [BackupBoot|[BackupConf|[]]], _cor0)
							%% Line 2192
							call 'erlang':'throw'
							    ({'error',{Master,R,'copy_start_config'}})
					    ( <_cor11> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor11})
					      -| ['compiler_generated'] )
					  end
				      %% Line 2194
				      <{'error',{Master,R}}> when 'true' ->
					  do  %% Line 2195
					      apply 'remove_files'/3
						  (Master, [BackupBoot|[BackupConf|[]]], _cor0)
					      %% Line 2196
					      call 'erlang':'throw'
						  ({'error',{Master,R,'backup_start_config'}})
				      ( <_cor12> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor12})
					-| ['compiler_generated'] )
				    end
'write_ini_file'/3 =
    %% Line 2206
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 2207
	    call 'erlang':'++'
		([101|[114|[116|[115|[45]]]]], _cor1)
	in  let <BinDir> =
		%% Line 2207
		call 'filename':'join'
		    ([_cor2|[_cor3|[[98|[105|[110]]]]]])
	    in  let <_cor5> =
		    %% Line 2212
		    call 'filename':'nativename'
			(BinDir)
		in  let <_cor6> =
			%% Line 2213
			call 'filename':'nativename'
			    (_cor2)
		    in  let <Str0> =
			    %% Line 2208
			    call 'io_lib':'format'
				([91|[101|[114|[108|[97|[110|[103|[93|[126|[110|[66|[105|[110|[100|[105|[114|[61|[126|[116|[115|[126|[110|[80|[114|[111|[103|[110|[97|[109|[101|[61|[101|[114|[108|[126|[110|[82|[111|[111|[116|[100|[105|[114|[61|[126|[116|[115|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 2212
																																							      [_cor5|%% Line 2213
																																								     [_cor6|[]]])
			in  let <Str> =
				%% Line 2214
				call 're':'replace'
				    (Str0, [92|[92]], [92|[92|[92|[92]]]], [{'return','list'}|['global'|['unicode']]])
			    in  let <IniFile> =
				    %% Line 2215
				    call 'filename':'join'
					(BinDir, [101|[114|[108|[46|[105|[110|[105]]]]]]])
				in  %% Line 2216
				    apply 'do_write_ini_file'/3
					(IniFile, Str, _cor0)
'do_write_ini_file'/3 =
    %% Line 2218
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <File,Data,'false'> when 'true' ->
	      %% Line 2219
	      case apply 'do_write_file'/3
		       (File, Data, [{'encoding','utf8'}]) of
		%% Line 2220
		<'ok'> when 'true' ->
		    'ok'
		%% Line 2221
		<Error> when 'true' ->
		    call 'erlang':'throw'
			(Error)
	      end
	  %% Line 2223
	  <File,Data,Masters> when 'true' ->
	      do  %% Line 2224
		  apply 'all_masters'/1
		      (Masters)
		  %% Line 2225
		  apply 'safe_write_file_m'/4
		      (File, Data, [{'encoding','utf8'}], Masters)
	end
'safe_write_file_m'/3 =
    %% Line 2238
    fun (_cor2,_cor1,_cor0) ->
	%% Line 2239
	apply 'safe_write_file_m'/4
	    (_cor2, _cor1, [], _cor0)
'safe_write_file_m'/4 =
    %% Line 2240
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Backup> =
	    %% Line 2241
	    call 'erlang':'++'
		(_cor3, [46|[98|[97|[99|[107|[117|[112]]]]]]])
	in  let <Change> =
		%% Line 2242
		call 'erlang':'++'
		    (_cor3, [46|[99|[104|[97|[110|[103|[101]]]]]]])
	    in  %% Line 2243
		case apply 'at_all_masters'/4
			 (_cor0, 'release_handler', 'do_copy_files', %% Line 2244
								     [_cor3|[[Backup|[]]|[]]]) of
		  %% Line 2245
		  <'ok'> when 'true' ->
		      %% Line 2246
		      case apply 'at_all_masters'/4
			       (_cor0, 'release_handler', 'do_write_file', %% Line 2247
									   [Change|[_cor2|[_cor1|[]]]]) of
			%% Line 2248
			<'ok'> when 'true' ->
			    %% Line 2249
			    case apply 'at_all_masters'/4
				     (_cor0, 'file', 'rename', %% Line 2250
							       [Change|[_cor3|[]]]) of
			      %% Line 2251
			      <'ok'> when 'true' ->
				  do  %% Line 2252
				      apply 'remove_files'/3
					  ('all', [Backup|[Change|[]]], _cor0)
				      %% Line 2253
				      'ok'
			      %% Line 2254
			      <{'error',{Master,R}}> when 'true' ->
				  do  %% Line 2255
				      apply 'takewhile'/5
					  (Master, _cor0, 'file', 'rename', %% Line 2256
									    [Backup|[_cor3|[]]])
				      do  %% Line 2257
					  apply 'remove_files'/3
					      ('all', [Backup|[Change|[]]], _cor0)
					  let <_cor7> =
					      %% Line 2259
					      call 'filename':'basename'
						  (Change)
					  in  let <_cor6> =
						  %% Line 2260
						  call 'filename':'basename'
						      (_cor3)
					      in  %% Line 2258
						  call 'erlang':'throw'
						      ({'error',{Master,R,'rename',_cor7,_cor6}})
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor8})
				-| ['compiler_generated'] )
			    end
			%% Line 2262
			<{'error',{Master,R}}> when 'true' ->
			    do  %% Line 2263
				apply 'remove_files'/3
				    ('all', [Backup|[Change|[]]], _cor0)
				let <_cor9> =
				    %% Line 2264
				    call 'filename':'basename'
					(Change)
				in  %% Line 2264
				    call 'erlang':'throw'
					({'error',{Master,R,'write',_cor9}})
			( <_cor10> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor10})
			  -| ['compiler_generated'] )
		      end
		  %% Line 2266
		  <{'error',{Master,R}}> when 'true' ->
		      do  %% Line 2267
			  apply 'remove_files'/3
			      (Master, [Backup|[]], _cor0)
			  let <_cor12> =
			      %% Line 2269
			      call 'filename':'basename'
				  (_cor3)
			  in  let <_cor11> =
				  %% Line 2270
				  call 'filename':'basename'
				      (Backup)
			      in  %% Line 2268
				  call 'erlang':'throw'
				      ({'error',{Master,R,'backup',_cor12,_cor11}})
		  ( <_cor13> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor13})
		    -| ['compiler_generated'] )
		end
'get_new_libs'/2 =
    %% Line 2285
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{App,Vsn,_X_LibDir}|CurrentLibs],NewLibs> when 'true' ->
	      %% Line 2286
	      case call 'lists':'keyfind'
		       (App, 1, NewLibs) of
		%% Line 2287
		<LibInfo = {_cor6,NewVsn,_cor7}>
		    when let <_cor8> =
			  call 'erlang':'=:='
			      (_cor6, App)
		      in  let <_cor9> =
			      call 'erlang':'=/='
				  (NewVsn, Vsn)
			  in  call 'erlang':'and'
				  (_cor8, _cor9) ->
		    let <_cor2> =
			%% Line 2288
			apply 'get_new_libs'/2
			    (CurrentLibs, NewLibs)
		    in  %% Line 2288
			[LibInfo|_cor2]
		%% Line 2289
		<_cor10> when 'true' ->
		    %% Line 2290
		    apply 'get_new_libs'/2
			(CurrentLibs, NewLibs)
	      end
	  %% Line 2292
	  <[],_cor11> when 'true' ->
	      %% Line 2293
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'get_new_libs',2}}] )
	    -| ['compiler_generated'] )
	end
'get_releases_with_status'/3 =
    %% Line 2298
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_cor6,Acc> when 'true' ->
	      %% Line 2299
	      Acc
	  %% Line 2300
	  <[Head = {_cor7,_cor8,_cor9,ReleaseStatus}|Tail],%% Line 2301
							   Status,%% Line 2301
								  Acc>
	      when %% Line 2301
		call 'erlang':'=='
		    (ReleaseStatus,
		     Status) ->
	      %% Line 2302
	      apply 'get_releases_with_status'/3
		  (Tail, Status, [Head|Acc])
	  %% Line 2303
	  <[_cor10|Tail],Status,Acc> when 'true' ->
	      %% Line 2304
	      apply 'get_releases_with_status'/3
		  (Tail, Status, Acc)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'get_releases_with_status',3}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('release_handler')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('release_handler', _cor0)
end