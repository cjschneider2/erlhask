module 'hipe_icode2rtl' ['module_info'/0,
			 'module_info'/1,
			 'translate'/2,
			 'translate_instrs'/4]
    attributes [%% Line 301
		'type' =
		    %% Line 301
		    [{{'record','comp_servers'},[{'typed_record_field',{'record_field',301,{'atom',301,'pp_server'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'range'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'type'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}]]],[]}],
		%% Line 307
		'type' =
		    %% Line 307
		    [{'comp_option',{'type',307,'union',[{'type',307,'atom',[]}|[{'type',307,'tuple',[{'type',307,'atom',[]}|[{'type',307,'atom',[]}]]}]]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{'comp_options',{'type',308,'list',[{'type',308,'comp_option',[]}]},[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'hipe_architecture',{'type',311,'union',[{'atom',311,'amd64'}|[{'atom',311,'arm'}|[{'atom',311,'powerpc'}|[{'atom',311,'ppc64'}|[{'atom',311,'ultrasparc'}|[{'atom',311,'x86'}]]]]]]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{'hipe_map',{'type',313,'list',[{'type',313,'tuple',[{'type',313,'non_neg_integer',[]}|[{'type',314,'union',[{'atom',314,'unknown'}|[{'type',314,'tuple',[{'type',314,'union',[{'atom',314,'reg'}|[{'atom',314,'fp_reg'}|[{'atom',314,'spill'}]]]}|[{'type',315,'non_neg_integer',[]}]]}]]}]]}]},[]}],
		%% Line 316
		'type' =
		    %% Line 316
		    [{'hipe_temp_map',{'type',316,'tuple','any'},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{'hipe_spill_map',{'type',317,'list',[{'type',317,'tuple',[{'type',317,'non_neg_integer',[]}|[{'type',317,'tuple',[{'atom',317,'spill'}|[{'type',317,'non_neg_integer',[]}]]}]]}]},[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{'simple_const',{'type',35,'union',[{'type',35,'atom',[]}|[{'type',35,'nil',[]}|[{'type',35,'integer',[]}|[{'type',35,'float',[]}]]]]},[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{'structured_const',{'type',36,'union',[{'type',36,'list',[]}|[{'type',36,'tuple','any'}]]},[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'icode_lbl',{'type',38,'non_neg_integer',[]},[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','flat'},[{'typed_record_field',{'record_field',44,{'atom',44,'value'}},{'type',44,'union',[{'atom',44,'undefined'}|[{'type',44,'simple_const',[]}|[{'type',44,'structured_const',[]}|[{'type',44,'binary',[]}]]]]}}],[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{{'record','icode_const'},[{'typed_record_field',{'record_field',46,{'atom',46,'value'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'record',[{'atom',46,'flat'}]}]]}}],[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'variable_annotation',{'type',48,'tuple',[{'type',48,'atom',[]}|[{'type',48,'any',[]}|[{'type',48,'fun',[{'type',48,'product',[{'type',48,'any',[]}]}|[{'type',48,'string',[]}]]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','icode_variable'},[{'typed_record_field',{'record_field',50,{'atom',50,'name'}},{'type',50,'union',[{'atom',50,'undefined'}|[{'type',50,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'kind'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'atom',51,'var'}|[{'atom',51,'reg'}|[{'atom',51,'fvar'}]]]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'annotation'},{'nil',52}},{'type',52,'union',[{'type',52,'nil',[]}|[{'type',52,'variable_annotation',[]}]]}}]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'icode_if_op',{'type',58,'union',[{'atom',58,'>'}|[{'atom',58,'<'}|[{'atom',58,'>='}|[{'atom',58,'=<'}|[{'atom',58,'=:='}|[{'atom',58,'=/='}|[{'atom',58,'=='}|[{'atom',58,'/='}|[{'atom',59,'fixnum_eq'}|[{'atom',59,'fixnum_neq'}|[{'atom',59,'fixnum_lt'}|[{'atom',60,'fixnum_le'}|[{'atom',60,'fixnum_ge'}|[{'atom',60,'fixnum_gt'}|[{'atom',61,'op_exact_eqeq_2'}|[{'atom',61,'suspend_msg_timeout'}]]]]]]]]]]]]]]]]},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'icode_type_test',{'type',63,'union',[{'atom',63,'atom'}|[{'atom',63,'bignum'}|[{'atom',63,'binary'}|[{'atom',63,'bitstr'}|[{'atom',63,'boolean'}|[{'atom',64,'cons'}|[{'atom',64,'fixnum'}|[{'atom',64,'float'}|[{'atom',64,'function'}|[{'atom',65,'function2'}|[{'atom',65,'integer'}|[{'atom',65,'list'}|[{'atom',65,'map'}|[{'atom',65,'nil'}|[{'atom',66,'number'}|[{'atom',66,'pid'}|[{'atom',66,'port'}|[{'atom',66,'reference'}|[{'atom',66,'tuple'}|[{'type',67,'tuple',[{'atom',67,'atom'}|[{'type',67,'atom',[]}]]}|[{'type',67,'tuple',[{'atom',67,'integer'}|[{'type',67,'integer',[]}]]}|[{'type',68,'tuple',[{'atom',68,'record'}|[{'type',68,'atom',[]}|[{'type',68,'non_neg_integer',[]}]]]}|[{'type',69,'tuple',[{'atom',69,'tuple'}|[{'type',69,'non_neg_integer',[]}]]}]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{'icode_primop',{'type',71,'union',[{'type',71,'atom',[]}|[{'type',71,'tuple','any'}]]},[]}],
		%% Line 72
		'type' =
		    %% Line 72
		    [{'icode_funcall',{'type',72,'union',[{'type',72,'mfa',[]}|[{'type',72,'icode_primop',[]}]]},[]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{'icode_var',{'type',74,'record',[{'atom',74,'icode_variable'}|[{'type',74,'field_type',[{'atom',74,'kind'}|[{'atom',74,'var'}]]}]]},[]}],
		%% Line 75
		'type' =
		    %% Line 75
		    [{'icode_reg',{'type',75,'record',[{'atom',75,'icode_variable'}|[{'type',75,'field_type',[{'atom',75,'kind'}|[{'atom',75,'reg'}]]}]]},[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{'icode_fvar',{'type',76,'record',[{'atom',76,'icode_variable'}|[{'type',76,'field_type',[{'atom',76,'kind'}|[{'atom',76,'fvar'}]]}]]},[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{'icode_argument',{'type',77,'union',[{'type',77,'record',[{'atom',77,'icode_const'}]}|[{'type',77,'record',[{'atom',77,'icode_variable'}]}]]},[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{'icode_term_arg',{'type',78,'union',[{'type',78,'icode_var',[]}|[{'type',78,'record',[{'atom',78,'icode_const'}]}]]},[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{'icode_switch_case',{'type',80,'tuple',[{'type',80,'record',[{'atom',80,'icode_const'}]}|[{'type',80,'icode_lbl',[]}]]},[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'icode_call_type',{'type',82,'union',[{'atom',82,'local'}|[{'atom',82,'primop'}|[{'atom',82,'remote'}]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'icode_exit_class',{'type',83,'union',[{'atom',83,'error'}|[{'atom',83,'exit'}|[{'atom',83,'rethrow'}|[{'atom',83,'throw'}]]]]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{'icode_comment_text',{'type',85,'union',[{'type',85,'atom',[]}|[{'type',85,'string',[]}]]},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'icode_info',{'type',87,'list',[{'type',87,'tuple',[{'atom',87,'arg_types'}|[{'type',87,'list',[{'remote_type',87,[{'atom',87,'erl_types'}|[{'atom',87,'erl_type'}|[[]]]]}]}]]}]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','icode_label'},[{'typed_record_field',{'record_field',93,{'atom',93,'name'}},{'type',93,'union',[{'atom',93,'undefined'}|[{'type',93,'icode_lbl',[]}]]}}],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','icode_if'},[{'typed_record_field',{'record_field',95,{'atom',95,'op'}},{'type',95,'union',[{'atom',95,'undefined'}|[{'type',95,'icode_if_op',[]}]]}}|[{'typed_record_field',{'record_field',96,{'atom',96,'args'}},{'type',96,'union',[{'atom',96,'undefined'}|[{'type',96,'list',[{'type',96,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',97,{'atom',97,'true_label'}},{'type',97,'union',[{'atom',97,'undefined'}|[{'type',97,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'false_label'}},{'type',98,'union',[{'atom',98,'undefined'}|[{'type',98,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'p'}},{'type',99,'union',[{'atom',99,'undefined'}|[{'type',99,'float',[]}]]}}]]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','icode_switch_val'},[{'typed_record_field',{'record_field',101,{'atom',101,'term'}},{'type',101,'union',[{'atom',101,'undefined'}|[{'type',101,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',102,{'atom',102,'fail_label'}},{'type',102,'union',[{'atom',102,'undefined'}|[{'type',102,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'length'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'cases'}},{'type',104,'union',[{'atom',104,'undefined'}|[{'type',104,'list',[{'type',104,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','icode_switch_tuple_arity'},[{'typed_record_field',{'record_field',106,{'atom',106,'term'}},{'type',106,'union',[{'atom',106,'undefined'}|[{'type',106,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',107,{'atom',107,'fail_label'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'type',107,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',108,{'atom',108,'length'}},{'type',108,'union',[{'atom',108,'undefined'}|[{'type',108,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',109,{'atom',109,'cases'}},{'type',109,'union',[{'atom',109,'undefined'}|[{'type',109,'list',[{'type',109,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','icode_type'},[{'typed_record_field',{'record_field',111,{'atom',111,'test'}},{'type',111,'union',[{'atom',111,'undefined'}|[{'type',111,'icode_type_test',[]}]]}}|[{'typed_record_field',{'record_field',112,{'atom',112,'args'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'list',[{'type',112,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',113,{'atom',113,'true_label'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'false_label'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'p'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'float',[]}]]}}]]]]],[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{{'record','icode_goto'},[{'typed_record_field',{'record_field',117,{'atom',117,'label'}},{'type',117,'union',[{'atom',117,'undefined'}|[{'type',117,'icode_lbl',[]}]]}}],[]}],
		%% Line 119
		'type' =
		    %% Line 119
		    [{{'record','icode_move'},[{'typed_record_field',{'record_field',119,{'atom',119,'dst'}},{'type',119,'union',[{'atom',119,'undefined'}|[{'type',119,'record',[{'atom',119,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'src'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'record',[{'atom',120,'icode_variable'}]}|[{'type',120,'record',[{'atom',120,'icode_const'}]}]]]}}]],[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{{'record','icode_phi'},[{'typed_record_field',{'record_field',122,{'atom',122,'dst'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'type',122,'record',[{'atom',122,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'id'}},{'type',123,'union',[{'atom',123,'undefined'}|[{'type',123,'record',[{'atom',123,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'arglist'}},{'type',124,'union',[{'atom',124,'undefined'}|[{'type',124,'list',[{'type',124,'tuple',[{'type',124,'icode_lbl',[]}|[{'type',124,'record',[{'atom',124,'icode_variable'}]}]]}]}]]}}]]],[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{{'record','icode_call'},[{'typed_record_field',{'record_field',126,{'atom',126,'dstlist'}},{'type',126,'union',[{'atom',126,'undefined'}|[{'type',126,'list',[{'type',126,'record',[{'atom',126,'icode_variable'}]}]}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'fun'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'type',127,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'args'}},{'type',128,'union',[{'atom',128,'undefined'}|[{'type',128,'list',[{'type',128,'icode_argument',[]}]}]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'type'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'icode_call_type',[]}]]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'continuation'}},{'type',130,'union',[{'atom',130,'undefined'}|[{'type',130,'nil',[]}|[{'type',130,'icode_lbl',[]}]]]}}|[{'typed_record_field',{'record_field',131,{'atom',131,'fail_label'},{'nil',131}},{'type',131,'union',[{'type',131,'nil',[]}|[{'type',131,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'in_guard'},{'atom',132,'false'}},{'type',132,'boolean',[]}}]]]]]]],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{{'record','icode_enter'},[{'typed_record_field',{'record_field',134,{'atom',134,'fun'}},{'type',134,'union',[{'atom',134,'undefined'}|[{'type',134,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'args'}},{'type',135,'union',[{'atom',135,'undefined'}|[{'type',135,'list',[{'type',135,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'type'}},{'type',136,'union',[{'atom',136,'undefined'}|[{'type',136,'icode_call_type',[]}]]}}]]],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{{'record','icode_return'},[{'typed_record_field',{'record_field',138,{'atom',138,'vars'}},{'type',138,'union',[{'atom',138,'undefined'}|[{'type',138,'list',[{'type',138,'icode_var',[]}]}]]}}],[]}],
		%% Line 140
		'type' =
		    %% Line 140
		    [{{'record','icode_begin_try'},[{'typed_record_field',{'record_field',140,{'atom',140,'label'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'successor'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}]],[]}],
		%% Line 142
		'type' =
		    %% Line 142
		    [{{'record','icode_end_try'},[],[]}],
		%% Line 144
		'type' =
		    %% Line 144
		    [{{'record','icode_begin_handler'},[{'typed_record_field',{'record_field',144,{'atom',144,'dstlist'}},{'type',144,'union',[{'atom',144,'undefined'}|[{'type',144,'list',[{'type',144,'icode_var',[]}]}]]}}],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{{'record','icode_fail'},[{'typed_record_field',{'record_field',147,{'atom',147,'class'}},{'type',147,'union',[{'atom',147,'undefined'}|[{'type',147,'icode_exit_class',[]}]]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'args'}},{'type',148,'union',[{'atom',148,'undefined'}|[{'type',148,'list',[{'type',148,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'fail_label'},{'nil',149}},{'type',149,'union',[{'type',149,'nil',[]}|[{'type',149,'icode_lbl',[]}]]}}]]],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{{'record','icode_comment'},[{'typed_record_field',{'record_field',151,{'atom',151,'text'}},{'type',151,'union',[{'atom',151,'undefined'}|[{'type',151,'icode_comment_text',[]}]]}}],[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'icode_instr',{'type',157,'union',[{'type',157,'record',[{'atom',157,'icode_begin_handler'}]}|[{'type',157,'record',[{'atom',157,'icode_begin_try'}]}|[{'type',158,'record',[{'atom',158,'icode_call'}]}|[{'type',158,'record',[{'atom',158,'icode_comment'}]}|[{'type',158,'record',[{'atom',158,'icode_end_try'}]}|[{'type',159,'record',[{'atom',159,'icode_enter'}]}|[{'type',159,'record',[{'atom',159,'icode_fail'}]}|[{'type',160,'record',[{'atom',160,'icode_goto'}]}|[{'type',160,'record',[{'atom',160,'icode_if'}]}|[{'type',160,'record',[{'atom',160,'icode_label'}]}|[{'type',161,'record',[{'atom',161,'icode_move'}]}|[{'type',161,'record',[{'atom',161,'icode_phi'}]}|[{'type',161,'record',[{'atom',161,'icode_return'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_tuple_arity'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_val'}]}|[{'type',163,'record',[{'atom',163,'icode_type'}]}]]]]]]]]]]]]]]]]},[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{'icode_instrs',{'type',164,'list',[{'type',164,'icode_instr',[]}]},[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{{'record','icode'},[{'typed_record_field',{'record_field',170,{'atom',170,'fun'}},{'type',170,'union',[{'atom',170,'undefined'}|[{'type',170,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',171,{'atom',171,'params'}},{'type',171,'union',[{'atom',171,'undefined'}|[{'type',171,'list',[{'type',171,'icode_var',[]}]}]]}}|[{'typed_record_field',{'record_field',172,{'atom',172,'is_closure'}},{'type',172,'union',[{'atom',172,'undefined'}|[{'type',172,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',173,{'atom',173,'closure_arity'}},{'type',173,'union',[{'atom',173,'undefined'}|[{'type',173,'arity',[]}]]}}|[{'typed_record_field',{'record_field',174,{'atom',174,'is_leaf'}},{'type',174,'union',[{'atom',174,'undefined'}|[{'type',174,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',175,{'atom',175,'code'},{'nil',175}},{'type',175,'icode_instrs',[]}}|[{'typed_record_field',{'record_field',176,{'atom',176,'data'}},{'type',176,'union',[{'atom',176,'undefined'}|[{'type',176,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',177,{'atom',177,'var_range'}},{'type',177,'union',[{'atom',177,'undefined'}|[{'type',177,'tuple',[{'type',177,'non_neg_integer',[]}|[{'type',177,'non_neg_integer',[]}]]}]]}}|[{'typed_record_field',{'record_field',178,{'atom',178,'label_range'}},{'type',178,'union',[{'atom',178,'undefined'}|[{'type',178,'tuple',[{'type',178,'icode_lbl',[]}|[{'type',178,'icode_lbl',[]}]]}]]}}|[{'typed_record_field',{'record_field',179,{'atom',179,'info'},{'nil',179}},{'type',179,'icode_info',[]}}]]]]]]]]]],[]}],
		%% Line 180
		'type' =
		    %% Line 180
		    [{'icode',{'type',180,'record',[{'atom',180,'icode'}]},[]}]]
'translate'/2 =
    %% Line 53
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <IcodeRecord = {'icode',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23,_cor24,_cor25},Options> when 'true' ->
	      let <_1121> =
		  %% Line 58
		  call 'hipe_rtl_varmap':'init'
		      (_cor1)
	      in  %% Line 58
		  case _1121 of
		    <{Args,VarMap}> when 'true' ->
			let <MFA> =
			    %% Line 60
			    call 'hipe_icode':'icode_fun'
				(_cor1)
			in  let <ConstTab> =
				%% Line 61
				call 'hipe_consttab':'new'
				    ()
			    in  let <Icode> =
				    %% Line 63
				    call 'hipe_icode':'icode_code'
					(_cor1)
				in  let <IsClosure> =
					%% Line 64
					call 'hipe_icode':'icode_is_closure'
					    (_cor1)
				    in  let <IsLeaf> =
					    %% Line 65
					    call 'hipe_icode':'icode_is_leaf'
						(_cor1)
					in  let <IcodeInfo> =
						%% Line 66
						call 'hipe_icode':'icode_info'
						    (_cor1)
					    in  do  %% Line 69
						    call 'hipe_timing':'start_optional_timer'
							([73|[99|[111|[100|[101|[32|[116|[111|[32|[110|[101|[115|[116|[101|[100|[32|[82|[84|[76]]]]]]]]]]]]]]]]]]], 'hipe_icode2rtl')
						    let <_2813> =
							%% Line 71
							apply 'translate_instrs'/4
							    (Icode, VarMap, ConstTab, _cor0)
						    in  %% Line 70
							case _2813 of
							  <{Code,_X_VarMap1,ConstTab1}> when 'true' ->
							      do  do  %% Line 72
								      call 'hipe_timing':'stop_optional_timer'
									  ([73|[99|[111|[100|[101|[32|[116|[111|[32|[110|[101|[115|[116|[101|[100|[32|[82|[84|[76]]]]]]]]]]]]]]]]]]], 'hipe_icode2rtl')
								      %% Line 75
								      call 'hipe_timing':'start_optional_timer'
									  ([70|[108|[97|[116|[116|[101|[110|[32|[82|[84|[76]]]]]]]]]]], 'hipe_icode2rtl')
								  let <Code1> =
								      %% Line 76
								      call 'lists':'flatten'
									  (Code)
								  in  do  %% Line 77
									  call 'hipe_timing':'stop_optional_timer'
									      ([70|[108|[97|[116|[116|[101|[110|[32|[82|[84|[76]]]]]]]]]]], 'hipe_icode2rtl')
									  let <_cor12> =
									      %% Line 85
									      call 'hipe_gensym':'get_var'
										  ('rtl')
									  in  let <_cor11> =
										  %% Line 86
										  call 'hipe_gensym':'get_label'
										      ('rtl')
									      in  let <Rtl> =
										      %% Line 79
										      call 'hipe_rtl':'mk_rtl'
											  (MFA, Args, IsClosure, IsLeaf, Code1, ConstTab1, %% Line 85
																	   {1,_cor12}, %% Line 86
																		       {1,_cor11})
										  in  %% Line 89
										      call 'hipe_rtl':'rtl_info_update'
											  (Rtl, IcodeInfo)
							  ( <_cor9> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_2813})
							    -| ['compiler_generated'] )
							end
		    ( <_cor2> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_1121})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'translate',2}}] )
	    -| ['compiler_generated'] )
	end
'translate_instrs'/4 =
    %% Line 96
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 97
	apply 'translate_instrs'/5
	    (_cor3, _cor2, [], _cor1, _cor0)
'translate_instrs'/5 =
    %% Line 99
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],VarMap,RTL_Code,ConstTab,_X_Options> when 'true' ->
	      %% Line 100
	      {_cor2,_cor3,_cor1}
	  %% Line 101
	  <[I|Is],VarMap,AccCode,ConstTab,Options> when 'true' ->
	      let <_1290> =
		  %% Line 104
		  apply 'translate_instruction'/4
		      (I, _cor3, _cor1, _cor0)
	      in  %% Line 103
		  case _1290 of
		    <{Code,VarMap0,ConstTab0}> when 'true' ->
			%% Line 108
			apply 'translate_instrs'/5
			    (Is, VarMap0, [_cor2|[Code|[]]], ConstTab0, _cor0)
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_1290})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'translate_instrs',5}}] )
	    -| ['compiler_generated'] )
	end
'translate_instruction'/4 =
    %% Line 114
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 118
	case _cor3 of
	  %% Line 119
	  <{'icode_call',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17}> when 'true' ->
	      %% Line 120
	      apply 'gen_call'/3
		  (_cor3, _cor2, _cor1)
	  %% Line 121
	  <{'icode_comment',_cor18}> when 'true' ->
	      let <_cor4> =
		  %% Line 122
		  call 'hipe_icode':'comment_text'
		      (_cor3)
	      in  let <_cor5> =
		      %% Line 122
		      call 'hipe_rtl':'mk_comment'
			  (_cor4)
		  in  %% Line 122
		      {_cor5,_cor2,_cor1}
	  %% Line 123
	  <{'icode_enter',_cor19,_cor20,_cor21}> when 'true' ->
	      %% Line 124
	      apply 'gen_enter'/3
		  (_cor3, _cor2, _cor1)
	  %% Line 125
	  <{'icode_fail',_cor22,_cor23,_cor24}> when 'true' ->
	      %% Line 126
	      apply 'gen_fail'/3
		  (_cor3, _cor2, _cor1)
	  %% Line 127
	  <{'icode_goto',_cor25}> when 'true' ->
	      %% Line 128
	      apply 'gen_goto'/3
		  (_cor3, _cor2, _cor1)
	  %% Line 129
	  <{'icode_if',_cor26,_cor27,_cor28,_cor29,_cor30}> when 'true' ->
	      %% Line 130
	      apply 'gen_if'/3
		  (_cor3, _cor2, _cor1)
	  %% Line 131
	  <{'icode_label',_cor31}> when 'true' ->
	      let <LabelName> =
		  %% Line 306
		  call 'hipe_icode':'label_name'
		      (_cor3)
	      in  let <_2091> =
		      %% Line 307
		      call 'hipe_rtl_varmap':'icode_label2rtl_label'
			  (LabelName, _cor2)
		  in  %% Line 307
		      case _2091 of
			<{NewLabel,Map0}> when 'true' ->
			    %% Line 308
			    {NewLabel,Map0,_cor1}
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_2091})
			  -| ['compiler_generated'] )
		      end
	  %% Line 133
	  <{'icode_move',_cor32,_cor33}> when 'true' ->
	      %% Line 134
	      apply 'gen_move'/3
		  (_cor3, _cor2, _cor1)
	  %% Line 135
	  <{'icode_begin_handler',_cor34}> when 'true' ->
	      %% Line 136
	      call 'hipe_rtl_exceptions':'gen_begin_handler'
		  (_cor3, _cor2, _cor1)
	  %% Line 137
	  <{'icode_return',_cor35}> when 'true' ->
	      %% Line 138
	      apply 'gen_return'/3
		  (_cor3, _cor2, _cor1)
	  %% Line 139
	  <{'icode_switch_val',_cor36,_cor37,_cor38,_cor39}> when 'true' ->
	      %% Line 378
	      call 'hipe_rtl_mk_switch':'gen_switch_val'
		  (_cor3, _cor2, _cor1, _cor0)
	  %% Line 141
	  <{'icode_switch_tuple_arity',_cor40,_cor41,_cor42,_cor43}> when 'true' ->
	      %% Line 381
	      call 'hipe_rtl_mk_switch':'gen_switch_tuple'
		  (_cor3, _cor2, _cor1, _cor0)
	  %% Line 143
	  <{'icode_type',_cor44,_cor45,_cor46,_cor47,_cor48}> when 'true' ->
	      %% Line 144
	      apply 'gen_type'/3
		  (_cor3, _cor2, _cor1)
	  %% Line 145
	  <X> when 'true' ->
	      %% Line 146
	      call 'erlang':'exit'
		  ({'hipe_icode2rtl',{[117|[110|[107|[110|[111|[119|[110|[32|[73|[99|[111|[100|[101|[32|[105|[110|[115|[116|[114|[117|[99|[116|[105|[111|[110]]]]]]]]]]]]]]]]]]]]]]]]],_cor3}})
	end
'gen_call'/3 =
    %% Line 155
    fun (_cor2,_cor1,_cor0) ->
	let <Fun> =
	    %% Line 156
	    call 'hipe_icode':'call_fun'
		(_cor2)
	in  let <_cor4> =
		%% Line 157
		call 'hipe_icode':'call_dstlist'
		    (_cor2)
	    in  let <_1659> =
		    %% Line 157
		    call 'hipe_rtl_varmap':'ivs2rvs'
			(_cor4, _cor1)
		in  %% Line 157
		    case _1659 of
		      <{Dst,VarMap0}> when 'true' ->
			  let <Fail> =
			      %% Line 158
			      call 'hipe_icode':'call_fail_label'
				  (_cor2)
			  in  let <_cor7> =
				  %% Line 161
				  call 'hipe_icode':'call_args'
				      (_cor2)
			      in  let <_1857> =
				      %% Line 161
				      apply 'args_to_vars'/3
					  (_cor7, VarMap0, _cor0)
				  in  %% Line 160
				      case _1857 of
					<{Args,VarMap1,ConstTab1,InitCode}> when 'true' ->
					    let <IsGuard> =
						%% Line 163
						call 'hipe_icode':'call_in_guard'
						    (_cor2)
					    in  let <FailLblName,VarMap3> =
						    %% Line 166
						    case Fail of
						      %% Line 167
						      <[]> when 'true' ->
							  %% Line 168
							  <[],VarMap1>
						      %% Line 169
						      <_cor29> when 'true' ->
							  let <_663> =
							      %% Line 171
							      call 'hipe_rtl_varmap':'icode_label2rtl_label'
								  (Fail, VarMap1)
							  in  %% Line 170
							      case _663 of
								<{FLbl,VarMap2}> when 'true' ->
								    let <_cor11> =
									%% Line 172
									call 'hipe_rtl':'label_name'
									    (FLbl)
								    in  <_cor11,VarMap2>
								( <_cor10> when 'true' ->
								      primop 'match_fail'
									  ({'badmatch',_663})
								  -| ['compiler_generated'] )
							      end
						    end
						in  let <_168> =
							%% Line 176
							call 'hipe_icode':'call_continuation'
							    (_cor2)
						    in  let <ContLblName,ContLbl,VarMap4> =
							    %% Line 176
							    case _168 of
							      %% Line 177
							      <[]> when 'true' ->
								  let <CLbl> =
								      %% Line 178
								      call 'hipe_rtl':'mk_new_label'
									  ()
								  in  let <_cor16> =
									  %% Line 179
									  call 'hipe_rtl':'label_name'
									      (CLbl)
								      in  <_cor16,CLbl,VarMap3>
							      %% Line 180
							      <Cont> when 'true' ->
								  let <_283> =
								      %% Line 182
								      call 'hipe_rtl_varmap':'icode_label2rtl_label'
									  (_168, VarMap3)
								  in  %% Line 181
								      case _283 of
									<{CLbl,NewVarMap}> when 'true' ->
									    let <_cor18> =
										%% Line 183
										call 'hipe_rtl':'label_name'
										    (CLbl)
									    in  <_cor18,%% Line 183
											[],NewVarMap>
									( <_cor17> when 'true' ->
									      primop 'match_fail'
										  ({'badmatch',_283})
									  -| ['compiler_generated'] )
								      end
							    end
							in  let <_1416> =
								%% Line 187
								call 'hipe_icode':'call_type'
								    (_cor2)
							    in  let <_cor24> =
								    %% Line 187
								    case _1416 of
								      %% Line 188
								      <'primop'> when 'true' ->
									  %% Line 189
									  call 'hipe_rtl_primops':'gen_primop'
									      (%% Line 190
									       {Fun,Dst,Args,ContLblName,FailLblName}, IsGuard, ConstTab1)
								      %% Line 192
								      <Type> when 'true' ->
									  let <Call> =
									      %% Line 193
									      apply 'gen_call_1'/7
										  (Fun, Dst, Args, IsGuard, ContLblName, FailLblName, _1416)
									  in  %% Line 195
									      {Call,ConstTab1}
								    end
								in  %% Line 186
								    case _cor24 of
								      <{Code,ConstTab2}> when 'true' ->
									  %% Line 197
									  {[InitCode|[Code|[ContLbl|[]]]],VarMap4,ConstTab2}
								      ( <_cor25> when 'true' ->
									    primop 'match_fail'
										({'badmatch',_cor24})
									-| ['compiler_generated'] )
								    end
					( <_cor8> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_1857})
					  -| ['compiler_generated'] )
				      end
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_1659})
			-| ['compiler_generated'] )
		    end
'gen_call_1'/7 =
    %% Line 201
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Fun = {_X_M,_X_F,_X_A},Dst,Args,IsGuard,Cont,Fail,Type> when 'true' ->
	      let <_1798> =
		  %% Line 202
		  call 'hipe_rtl_primops':'gen_call_builtin'
		      (_cor6, _cor5, _cor4, _cor3, _cor2, _cor1)
	      in  %% Line 202
		  case _1798 of
		    %% Line 204
		    <[]> when 'true' ->
			let <_cor7> =
			    %% Line 210
			    case _cor0 of
			      <'remote'> when 'true' ->
				  'remote'
			      %% Line 211
			      <'local'> when 'true' ->
				  'not_remote'
			      ( <_957> when 'true' ->
				    primop 'match_fail'
					({'function_clause',_cor0})
				-| ['compiler_generated'] )
			    end
			in  %% Line 205
			    call 'hipe_rtl':'mk_call'
				(_cor5, _cor6, _cor4, _cor2, _cor1, _cor7)
		    %% Line 206
		    <Code> when 'true' ->
			_1798
		  end
	  ( <_cor15,_cor14,_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0})
		  -| [{'function_name',{'gen_call_1',7}}] )
	    -| ['compiler_generated'] )
	end
'gen_enter'/3 =
    %% Line 219
    fun (_cor2,_cor1,_cor0) ->
	let <Fun> =
	    %% Line 220
	    call 'hipe_icode':'enter_fun'
		(_cor2)
	in  let <_cor4> =
		%% Line 222
		call 'hipe_icode':'enter_args'
		    (_cor2)
	    in  let <_1626> =
		    %% Line 222
		    apply 'args_to_vars'/3
			(_cor4, _cor1, _cor0)
		in  %% Line 221
		    case _1626 of
		      <{Args,VarMap1,ConstTab1,InitCode}> when 'true' ->
			  let <_124> =
			      %% Line 224
			      call 'hipe_icode':'enter_type'
				  (_cor2)
			  in  let <_cor9> =
				  %% Line 224
				  case _124 of
				    %% Line 225
				    <'primop'> when 'true' ->
					%% Line 227
					call 'hipe_rtl_primops':'gen_enter_primop'
					    ({Fun,Args}, 'false', ConstTab1)
				    %% Line 228
				    <Type> when 'true' ->
					let <Call> =
					    %% Line 229
					    apply 'gen_enter_1'/3
						(Fun, Args, _124)
					in  %% Line 230
					    {Call,ConstTab1}
				  end
			      in  %% Line 223
				  case _cor9 of
				    <{Code1,ConstTab2}> when 'true' ->
					%% Line 232
					{[InitCode|[Code1|[]]],VarMap1,ConstTab2}
				    ( <_cor10> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor9})
				      -| ['compiler_generated'] )
				  end
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_1626})
			-| ['compiler_generated'] )
		    end
'gen_enter_1'/3 =
    %% Line 236
    fun (_cor2,_cor1,_cor0) ->
	let <_2010> =
	    %% Line 237
	    call 'hipe_rtl_primops':'gen_enter_builtin'
		(_cor2, _cor1)
	in  %% Line 237
	    case _2010 of
	      %% Line 238
	      <[]> when 'true' ->
		  let <_cor3> =
		      case _cor0 of
			<'remote'> when 'true' ->
			    'remote'
			<'local'> when 'true' ->
			    'not_remote'
			( <_88> when 'true' ->
			      primop 'match_fail'
				  ({'function_clause',_cor0})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 239
		      call 'hipe_rtl':'mk_enter'
			  (_cor2, _cor1, _cor3)
	      %% Line 240
	      <Code> when 'true' ->
		  _2010
	    end
'gen_fail'/3 =
    %% Line 250
    fun (_cor2,_cor1,_cor0) ->
	let <Fail> =
	    %% Line 251
	    call 'hipe_icode':'fail_label'
		(_cor2)
	in  let <Label,VarMap0> =
		%% Line 253
		case <> of
		  <>
		      when call 'erlang':'=:='
			    (Fail,
			     []) ->
		      %% Line 255
		      <[],_cor1>
		  %% Line 256
		  <> when 'true' ->
		      let <_823> =
			  %% Line 257
			  call 'hipe_rtl_varmap':'icode_label2rtl_label'
			      (Fail, _cor1)
		      in  %% Line 257
			  case _823 of
			    <{Lbl,Map}> when 'true' ->
				let <_cor5> =
				    %% Line 258
				    call 'hipe_rtl':'label_name'
					(Lbl)
				in  <_cor5,Map>
			    ( <_cor4> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_823})
			      -| ['compiler_generated'] )
			  end
		end
	    in  let <_cor8> =
		    %% Line 261
		    call 'hipe_icode':'fail_args'
			(_cor2)
		in  let <_626> =
			%% Line 261
			apply 'args_to_vars'/3
			    (_cor8, VarMap0, _cor0)
		    in  %% Line 260
			case _626 of
			  <{Args,VarMap1,ConstTab1,InitCode}> when 'true' ->
			      let <Class> =
				  %% Line 262
				  call 'hipe_icode':'fail_class'
				      (_cor2)
			      in  let <FailCode> =
				      %% Line 263
				      call 'hipe_rtl_exceptions':'gen_fail'
					  (Class, Args, Label)
				  in  %% Line 264
				      {[InitCode|[FailCode|[]]],VarMap1,ConstTab1}
			  ( <_cor9> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_626})
			    -| ['compiler_generated'] )
			end
'gen_goto'/3 =
    %% Line 272
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 274
	    call 'hipe_icode':'goto_label'
		(_cor2)
	in  let <_1710> =
		%% Line 274
		call 'hipe_rtl_varmap':'icode_label2rtl_label'
		    (_cor3, _cor1)
	    in  %% Line 273
		case _1710 of
		  <{Label,Map0}> when 'true' ->
		      let <_cor5> =
			  %% Line 275
			  call 'hipe_rtl':'label_name'
			      (Label)
		      in  let <_cor6> =
			      %% Line 275
			      call 'hipe_rtl':'mk_goto'
				  (_cor5)
			  in  %% Line 275
			      {_cor6,Map0,_cor0}
		  ( <_cor4> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_1710})
		    -| ['compiler_generated'] )
		end
'gen_if'/3 =
    %% Line 283
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 285
	    call 'hipe_icode':'if_args'
		(_cor2)
	in  let <_119> =
		%% Line 285
		apply 'args_to_vars'/3
		    (_cor3, _cor1, _cor0)
	    in  %% Line 284
		case _119 of
		  <{Args,VarMap1,ConstTab1,InitCode}> when 'true' ->
		      let <_cor5> =
			  %% Line 287
			  call 'hipe_icode':'if_true_label'
			      (_cor2)
		      in  let <_118> =
			      %% Line 287
			      call 'hipe_rtl_varmap':'icode_label2rtl_label'
				  (_cor5, VarMap1)
			  in  %% Line 286
			      case _118 of
				<{TrueLbl,VarMap2}> when 'true' ->
				    let <_cor7> =
					%% Line 289
					call 'hipe_icode':'if_false_label'
					    (_cor2)
				    in  let <_687> =
					    %% Line 289
					    call 'hipe_rtl_varmap':'icode_label2rtl_label'
						(_cor7, VarMap2)
					in  %% Line 288
					    case _687 of
					      <{FalseLbl,VarMap3}> when 'true' ->
						  let <_cor12> =
						      %% Line 291
						      call 'hipe_icode':'if_op'
							  (_cor2)
						  in  let <_cor11> =
							  %% Line 293
							  call 'hipe_rtl':'label_name'
							      (TrueLbl)
						      in  let <_cor10> =
							      %% Line 294
							      call 'hipe_rtl':'label_name'
								  (FalseLbl)
							  in  let <_cor9> =
								  %% Line 295
								  call 'hipe_icode':'if_pred'
								      (_cor2)
							      in  let <CondCode> =
								      %% Line 291
								      apply 'gen_cond'/5
									  (_cor12, Args, _cor11, _cor10, _cor9)
								  in  %% Line 296
								      {[InitCode|[CondCode|[]]],VarMap3,ConstTab1}
					      ( <_cor8> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_687})
						-| ['compiler_generated'] )
					    end
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_118})
				  -| ['compiler_generated'] )
			      end
		  ( <_cor4> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_119})
		    -| ['compiler_generated'] )
		end
'gen_move'/3 =
    %% Line 316
    fun (_cor2,_cor1,_cor0) ->
	let <MovedSrc> =
	    %% Line 317
	    call 'hipe_icode':'move_src'
		(_cor2)
	in  let <_cor4> =
		%% Line 319
		call 'hipe_icode':'move_dst'
		    (_cor2)
	    in  let <_695> =
		    %% Line 319
		    call 'hipe_rtl_varmap':'icode_var2rtl_var'
			(_cor4, _cor1)
		in  %% Line 318
		    case _695 of
		      <{Dst,VarMap0}> when 'true' ->
			  let <_1837> =
			      %% Line 320
			      call 'hipe_icode':'is_const'
				  (MovedSrc)
			  in  %% Line 320
			      case _1837 of
				%% Line 321
				<'true'> when 'true' ->
				    let <_608> =
					%% Line 322
					apply 'gen_const_move'/3
					    (Dst, MovedSrc, _cor0)
				    in  %% Line 322
					case _608 of
					  <{Code,NewConstMap}> when 'true' ->
					      %% Line 323
					      {[Code|[]],VarMap0,NewConstMap}
					  ( <_cor6> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_608})
					    -| ['compiler_generated'] )
					end
				%% Line 324
				<'false'> when 'true' ->
				    let <_2310> =
					%% Line 325
					call 'hipe_rtl_varmap':'icode_var2rtl_var'
					    (MovedSrc, VarMap0)
				    in  %% Line 325
					case _2310 of
					  <{Src,VarMap1}> when 'true' ->
					      let <_1863> =
						  %% Line 327
						  call 'hipe_icode':'is_fvar'
						      (MovedSrc)
					      in  let <_cor9> =
						      %% Line 327
						      case _1863 of
							%% Line 328
							<'true'> when 'true' ->
							    %% Line 329
							    call 'hipe_rtl':'mk_fmove'
								(Dst, Src)
							%% Line 330
							<'false'> when 'true' ->
							    %% Line 331
							    call 'hipe_rtl':'mk_move'
								(Dst, Src)
							( <_cor8> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_1863})
							  -| ['compiler_generated'] )
						      end
						  in  %% Line 333
						      {[_cor9|[]],VarMap1,_cor0}
					  ( <_cor7> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_2310})
					    -| ['compiler_generated'] )
					end
				( <_cor11> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_1837})
				  -| ['compiler_generated'] )
			      end
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_695})
			-| ['compiler_generated'] )
		    end
'gen_return'/3 =
    %% Line 342
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 344
	    call 'hipe_icode':'return_vars'
		(_cor2)
	in  let <_1114> =
		%% Line 344
		apply 'args_to_vars'/3
		    (_cor3, _cor1, _cor0)
	    in  %% Line 343
		case _1114 of
		  <{RetVars,VarMap0,ConstTab0,Code}> when 'true' ->
		      let <_cor5> =
			  %% Line 345
			  call 'hipe_rtl':'mk_return'
			      (RetVars)
		      in  let <_cor6> =
			      %% Line 345
			      call 'erlang':'++'
				  (Code, [_cor5|[]])
			  in  %% Line 345
			      {_cor6,VarMap0,ConstTab0}
		  ( <_cor4> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_1114})
		    -| ['compiler_generated'] )
		end
'gen_type'/3 =
    %% Line 389
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 391
	    call 'hipe_icode':'type_args'
		(_cor2)
	in  let <_56> =
		%% Line 391
		apply 'args_to_vars'/3
		    (_cor3, _cor1, _cor0)
	    in  %% Line 390
		case _56 of
		  <{Vars,Map0,NewConstTab,Code1}> when 'true' ->
		      let <_cor5> =
			  %% Line 393
			  call 'hipe_icode':'type_true_label'
			      (_cor2)
		      in  let <_1958> =
			      %% Line 393
			      call 'hipe_rtl_varmap':'icode_label2rtl_label'
				  (_cor5, Map0)
			  in  %% Line 392
			      case _1958 of
				<{TrueLbl,Map1}> when 'true' ->
				    let <_cor7> =
					%% Line 395
					call 'hipe_icode':'type_false_label'
					    (_cor2)
				    in  let <_1808> =
					    %% Line 395
					    call 'hipe_rtl_varmap':'icode_label2rtl_label'
						(_cor7, Map1)
					in  %% Line 394
					    case _1808 of
					      <{FalseLbl,Map2}> when 'true' ->
						  let <_cor12> =
						      %% Line 396
						      call 'hipe_icode':'type_test'
							  (_cor2)
						  in  let <_cor11> =
							  %% Line 397
							  call 'hipe_rtl':'label_name'
							      (TrueLbl)
						      in  let <_cor10> =
							      %% Line 398
							      call 'hipe_rtl':'label_name'
								  (FalseLbl)
							  in  let <_cor9> =
								  %% Line 399
								  call 'hipe_icode':'type_pred'
								      (_cor2)
							      in  let <_2513> =
								      %% Line 396
								      apply 'gen_type_test'/6
									  (Vars, _cor12, _cor11, _cor10, _cor9, NewConstTab)
								  in  %% Line 396
								      case _2513 of
									<{Code2,NewConstTab1}> when 'true' ->
									    let <_cor14> =
										%% Line 401
										call 'erlang':'++'
										    (Code1, Code2)
									    in  %% Line 401
										{_cor14,Map2,NewConstTab1}
									( <_cor13> when 'true' ->
									      primop 'match_fail'
										  ({'badmatch',_2513})
									  -| ['compiler_generated'] )
								      end
					      ( <_cor8> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_1808})
						-| ['compiler_generated'] )
					    end
				( <_cor6> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_1958})
				  -| ['compiler_generated'] )
			      end
		  ( <_cor4> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_56})
		    -| ['compiler_generated'] )
		end
'gen_type_test'/6 =
    %% Line 409
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[X|[]],Type,TrueLbl,FalseLbl,Pred,ConstTab> when 'true' ->
	      %% Line 410
	      case _cor4 of
		%% Line 411
		<'atom'> when 'true' ->
		    let <_cor6> =
			%% Line 412
			call 'hipe_tagscheme':'test_atom'
			    (X, _cor3, _cor2, _cor1)
		    in  %% Line 412
			{_cor6,_cor0}
		%% Line 413
		<'bignum'> when 'true' ->
		    let <_cor7> =
			%% Line 414
			call 'hipe_tagscheme':'test_bignum'
			    (X, _cor3, _cor2, _cor1)
		    in  %% Line 414
			{_cor7,_cor0}
		%% Line 415
		<'binary'> when 'true' ->
		    let <_cor8> =
			%% Line 416
			call 'hipe_tagscheme':'test_binary'
			    (X, _cor3, _cor2, _cor1)
		    in  %% Line 416
			{_cor8,_cor0}
		%% Line 417
		<'bitstr'> when 'true' ->
		    let <_cor9> =
			%% Line 418
			call 'hipe_tagscheme':'test_bitstr'
			    (X, _cor3, _cor2, _cor1)
		    in  %% Line 418
			{_cor9,_cor0}
		%% Line 419
		<'boolean'> when 'true' ->
		    let <TmpT> =
			%% Line 420
			call 'hipe_rtl':'mk_new_var'
			    ()
		    in  let <TmpF> =
			    %% Line 421
			    call 'hipe_rtl':'mk_new_var'
				()
			in  let <Lbl> =
				%% Line 422
				call 'hipe_rtl':'mk_new_label'
				    ()
			    in  let <_cor13> =
				    %% Line 423
				    call 'hipe_rtl':'mk_load_atom'
					(TmpT, 'true')
				in  let <_cor14> =
					%% Line 424
					call 'hipe_rtl':'label_name'
					    (Lbl)
				    in  let <_cor15> =
					    %% Line 424
					    call 'hipe_rtl':'mk_branch'
						(X, 'eq', TmpT, _cor3, _cor14, _cor1)
					in  let <_cor16> =
						%% Line 426
						call 'hipe_rtl':'mk_load_atom'
						    (TmpF, 'false')
					    in  let <_cor17> =
						    %% Line 427
						    call 'hipe_rtl':'mk_branch'
							(X, 'eq', TmpF, _cor3, _cor2, _cor1)
						in  %% Line 423
						    {[_cor13|%% Line 424
							     [_cor15|%% Line 425
								     [Lbl|%% Line 426
									  [_cor16|%% Line 427
										  [_cor17|[]]]]]],_cor0}
		%% Line 428
		<'cons'> when 'true' ->
		    let <_cor18> =
			%% Line 429
			call 'hipe_tagscheme':'test_cons'
			    (X, _cor3, _cor2, _cor1)
		    in  %% Line 429
			{_cor18,_cor0}
		%% Line 430
		<'fixnum'> when 'true' ->
		    let <_cor19> =
			%% Line 431
			call 'hipe_tagscheme':'test_fixnum'
			    (X, _cor3, _cor2, _cor1)
		    in  %% Line 431
			{_cor19,_cor0}
		%% Line 432
		<'float'> when 'true' ->
		    let <_cor20> =
			%% Line 433
			call 'hipe_tagscheme':'test_flonum'
			    (X, _cor3, _cor2, _cor1)
		    in  %% Line 433
			{_cor20,_cor0}
		%% Line 434
		<'function'> when 'true' ->
		    let <_cor21> =
			%% Line 435
			call 'hipe_tagscheme':'test_fun'
			    (X, _cor3, _cor2, _cor1)
		    in  %% Line 435
			{_cor21,_cor0}
		%% Line 436
		<'integer'> when 'true' ->
		    let <_cor22> =
			%% Line 437
			call 'hipe_tagscheme':'test_integer'
			    (X, _cor3, _cor2, _cor1)
		    in  %% Line 437
			{_cor22,_cor0}
		%% Line 438
		<'list'> when 'true' ->
		    let <_cor23> =
			%% Line 439
			call 'hipe_tagscheme':'test_list'
			    (X, _cor3, _cor2, _cor1)
		    in  %% Line 439
			{_cor23,_cor0}
		%% Line 440
		<'map'> when 'true' ->
		    let <_cor24> =
			%% Line 441
			call 'hipe_tagscheme':'test_map'
			    (X, _cor3, _cor2, _cor1)
		    in  %% Line 441
			{_cor24,_cor0}
		%% Line 442
		<'nil'> when 'true' ->
		    let <_cor25> =
			%% Line 443
			call 'hipe_tagscheme':'test_nil'
			    (X, _cor3, _cor2, _cor1)
		    in  %% Line 443
			{_cor25,_cor0}
		%% Line 444
		<'number'> when 'true' ->
		    let <_cor26> =
			%% Line 445
			call 'hipe_tagscheme':'test_number'
			    (X, _cor3, _cor2, _cor1)
		    in  %% Line 445
			{_cor26,_cor0}
		%% Line 446
		<'pid'> when 'true' ->
		    let <_cor27> =
			%% Line 447
			call 'hipe_tagscheme':'test_any_pid'
			    (X, _cor3, _cor2, _cor1)
		    in  %% Line 447
			{_cor27,_cor0}
		%% Line 448
		<'port'> when 'true' ->
		    let <_cor28> =
			%% Line 449
			call 'hipe_tagscheme':'test_any_port'
			    (X, _cor3, _cor2, _cor1)
		    in  %% Line 449
			{_cor28,_cor0}
		%% Line 450
		<'reference'> when 'true' ->
		    let <_cor29> =
			%% Line 451
			call 'hipe_tagscheme':'test_ref'
			    (X, _cor3, _cor2, _cor1)
		    in  %% Line 451
			{_cor29,_cor0}
		%% Line 452
		<'tuple'> when 'true' ->
		    let <_cor30> =
			%% Line 453
			call 'hipe_tagscheme':'test_tuple'
			    (X, _cor3, _cor2, _cor1)
		    in  %% Line 453
			{_cor30,_cor0}
		%% Line 454
		<{'atom',Atom}> when 'true' ->
		    let <Tmp> =
			%% Line 455
			call 'hipe_rtl':'mk_new_var'
			    ()
		    in  let <_cor32> =
			    %% Line 456
			    call 'hipe_rtl':'mk_load_atom'
				(Tmp, Atom)
			in  let <_cor33> =
				%% Line 457
				call 'hipe_rtl':'mk_branch'
				    (X, 'eq', Tmp, _cor3, _cor2, _cor1)
			    in  %% Line 456
				{[_cor32|%% Line 457
					 [_cor33|[]]],_cor0}
		%% Line 458
		<{'integer',N}>
		    when call 'erlang':'is_integer'
			  (N) ->
		    let <_2956> =
			%% Line 460
			call 'hipe_tagscheme':'is_fixnum'
			    (N)
		    in  %% Line 460
			case _2956 of
			  %% Line 461
			  <'true'> when 'true' ->
			      let <Int> =
				  %% Line 462
				  call 'hipe_tagscheme':'mk_fixnum'
				      (N)
			      in  let <_cor35> =
				      %% Line 463
				      call 'hipe_rtl':'mk_imm'
					  (Int)
				  in  let <_cor36> =
					  %% Line 463
					  call 'hipe_rtl':'mk_branch'
					      (X, 'eq', _cor35, _cor3, _cor2, _cor1)
				      in  %% Line 463
					  {_cor36,_cor0}
			  %% Line 466
			  <'false'> when 'true' ->
			      let <BignumLbl> =
				  %% Line 467
				  call 'hipe_rtl':'mk_new_label'
				      ()
			      in  let <RetLbl> =
				      %% Line 468
				      call 'hipe_rtl':'mk_new_label'
					  ()
				  in  let <BigN> =
					  %% Line 469
					  call 'hipe_rtl':'mk_new_var'
					      ()
				      in  let <Tmp> =
					      %% Line 470
					      call 'hipe_rtl':'mk_new_var'
						  ()
					  in  let <_1399> =
						  %% Line 471
						  apply 'gen_big_move'/3
						      (BigN, N, _cor0)
					      in  %% Line 471
						  case _1399 of
						    <{BigCode,NewConstTab}> when 'true' ->
							let <_cor47> =
							    %% Line 473
							    call 'hipe_rtl':'label_name'
								(BignumLbl)
							in  let <_cor46> =
								%% Line 473
								call 'erlang':'-'
								    (1, _cor1)
							    in  let <_cor48> =
								    %% Line 472
								    call 'hipe_tagscheme':'test_fixnum'
									(X, _cor2, _cor47, _cor46)
								in  let <_cor42> =
									%% Line 477
									call 'hipe_rtl':'label_name'
									    (RetLbl)
								    in  let <_cor43> =
									    %% Line 476
									    call 'hipe_rtl':'mk_call'
										([Tmp|[]], 'op_exact_eqeq_2', [X|[BigN|[]]], _cor42, %% Line 477
																     [], %% Line 477
																	 'not_remote')
									in  let <_cor44> =
										%% Line 479
										call 'hipe_rtl':'mk_imm'
										    (0)
									    in  let <_cor45> =
										    %% Line 479
										    call 'hipe_rtl':'mk_branch'
											(Tmp, 'ne', _cor44, _cor3, _cor2, _cor1)
										in  let <_cor49> =
											%% Line 472
											[_cor48|%% Line 474
												[BignumLbl|[BigCode|%% Line 476
														    [_cor43|%% Line 478
															    [RetLbl|%% Line 479
																    [_cor45|%% Line 480
																	    []]]]]]]
										    in  %% Line 472
											{_cor49,NewConstTab}
						    ( <_cor41> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_1399})
						      -| ['compiler_generated'] )
						  end
			  ( <_cor50> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_2956})
			    -| ['compiler_generated'] )
			end
		%% Line 483
		<{'record',A,S}> when 'true' ->
		    let <TupleLbl> =
			%% Line 484
			call 'hipe_rtl':'mk_new_label'
			    ()
		    in  let <TupleLblName> =
			    %% Line 485
			    call 'hipe_rtl':'label_name'
				(TupleLbl)
			in  let <AtomLab> =
				%% Line 486
				call 'hipe_rtl':'mk_new_label'
				    ()
			    in  let <AtomLabName> =
				    %% Line 487
				    call 'hipe_rtl':'label_name'
					(AtomLab)
				in  let <TagVar> =
					%% Line 488
					call 'hipe_rtl':'mk_new_var'
					    ()
				    in  let <TmpAtomVar> =
					    %% Line 489
					    call 'hipe_rtl':'mk_new_var'
						()
					in  let <_2734> =
						%% Line 491
						call 'hipe_rtl_primops':'gen_primop'
						    ({{'unsafe_element',1},[TagVar|[]],[X|[]],AtomLabName,%% Line 492
													  []}, %% Line 493
													       'false', _cor0)
					    in  %% Line 490
						case _2734 of
						  <{UntagCode,ConstTab1}> when 'true' ->
						      let <_cor61> =
							  %% Line 495
							  call 'hipe_tagscheme':'test_tuple_N'
							      (X, S, TupleLblName, _cor2, _cor1)
						      in  let <_cor58> =
							      %% Line 498
							      call 'hipe_rtl':'mk_load_atom'
								  (TmpAtomVar, A)
							  in  let <_cor59> =
								  %% Line 499
								  call 'hipe_rtl':'mk_branch'
								      (TagVar, 'eq', TmpAtomVar, _cor3, _cor2, _cor1)
							      in  let <_cor60> =
								      %% Line 496
								      [TupleLbl|call 'erlang':'++'
										    (UntagCode, %% Line 497
												[AtomLab|%% Line 498
													 [_cor58|%% Line 499
														 [_cor59|[]]]])]
								  in  let <Code> =
									  %% Line 495
									  call 'erlang':'++'
									      (_cor61, _cor60)
								      in  %% Line 500
									  {Code,ConstTab1}
						  ( <_cor57> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_2734})
						    -| ['compiler_generated'] )
						end
		%% Line 502
		<{'tuple',N}> when 'true' ->
		    let <_cor63> =
			%% Line 503
			call 'hipe_tagscheme':'test_tuple_N'
			    (X, N, _cor3, _cor2, _cor1)
		    in  %% Line 503
			{_cor63,_cor0}
		%% Line 504
		<Other> when 'true' ->
		    %% Line 505
		    call 'erlang':'exit'
			({'hipe_icode2rtl',{[117|[110|[107|[110|[111|[119|[110|[32|[116|[121|[112|[101]]]]]]]]]]]],_cor4}})
	      end
	  %% Line 507
	  <Z = [X|[Y|[]]],Type,TrueLbl,FalseLbl,Pred,ConstTab> when 'true' ->
	      %% Line 508
	      case _cor4 of
		%% Line 509
		<'function2'> when 'true' ->
		    let <_cor65> =
			%% Line 510
			call 'hipe_tagscheme':'test_fun2'
			    (X, Y, _cor3, _cor2, _cor1)
		    in  %% Line 510
			{_cor65,_cor0}
		%% Line 511
		<'fixnum'> when 'true' ->
		    let <_cor66> =
			%% Line 512
			call 'hipe_tagscheme':'test_fixnums'
			    (_cor5, _cor3, _cor2, _cor1)
		    in  %% Line 512
			{_cor66,_cor0}
		%% Line 513
		<Other> when 'true' ->
		    %% Line 514
		    call 'erlang':'exit'
			({'hipe_icode2rtl',{[117|[110|[107|[110|[111|[119|[110|[32|[116|[121|[112|[101]]]]]]]]]]]],_cor4}})
	      end
	  %% Line 516
	  <X,Type,TrueLbl,FalseLbl,Pred,ConstTab> when 'true' ->
	      %% Line 517
	      case _cor4 of
		%% Line 518
		<'fixnum'> when 'true' ->
		    let <_cor68> =
			%% Line 519
			call 'hipe_tagscheme':'test_fixnums'
			    (_cor5, _cor3, _cor2, _cor1)
		    in  %% Line 519
			{_cor68,_cor0}
		%% Line 520
		<Other> when 'true' ->
		    %% Line 521
		    call 'erlang':'exit'
			({'hipe_icode2rtl',{[116|[121|[112|[101|[32|[99|[97|[110|[110|[111|[116|[32|[104|[97|[118|[101|[32|[115|[101|[118|[101|[114|[97|[108|[32|[97|[114|[103|[117|[109|[101|[110|[116|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],_cor4}})
	      end
	end
'gen_cond'/5 =
    %% Line 530
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Tmp> =
	    %% Line 531
	    call 'hipe_rtl':'mk_new_reg_gcsafe'
		()
	in  let <GenLbl> =
		%% Line 532
		call 'hipe_rtl':'mk_new_label'
		    ()
	    in  let <TestRetLbl> =
		    %% Line 533
		    call 'hipe_rtl':'mk_new_label'
			()
		in  let <TestRetName> =
			%% Line 534
			call 'hipe_rtl':'label_name'
			    (TestRetLbl)
		    in  %% Line 536
			case _cor4 of
			  %% Line 537
			  <'fixnum_eq'> when 'true' ->
			      %% Line 538
			      case _cor3 of
				<[Arg1|[Arg2|[]]]> when 'true' ->
				    let <_cor10> =
					%% Line 539
					call 'hipe_rtl':'mk_branch'
					    (Arg1, 'eq', Arg2, _cor2, _cor1, _cor0)
				    in  %% Line 539
					[_cor10|%% Line 540
						[]]
				( <_cor9> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor3})
				  -| ['compiler_generated'] )
			      end
			  %% Line 541
			  <'=:='> when 'true' ->
			      %% Line 542
			      case _cor3 of
				<[Arg1|[Arg2|[]]]> when 'true' ->
				    let <_cor12> =
					%% Line 544
					call 'hipe_rtl':'label_name'
					    (GenLbl)
				    in  let <_cor13> =
					    %% Line 543
					    call 'hipe_rtl':'mk_branch'
						(Arg1, 'eq', Arg2, _cor2, _cor12, _cor0)
					in  let <_cor14> =
						%% Line 546
						call 'hipe_rtl':'mk_call'
						    ([Tmp|[]], 'op_exact_eqeq_2', _cor3, TestRetName, %% Line 547
												      [], %% Line 547
													  'not_remote')
					    in  let <_cor15> =
						    %% Line 549
						    call 'hipe_rtl':'mk_imm'
							(0)
						in  let <_cor16> =
							%% Line 549
							call 'hipe_rtl':'mk_branch'
							    (Tmp, 'ne', _cor15, _cor2, _cor1, _cor0)
						    in  %% Line 543
							[_cor13|%% Line 545
								[GenLbl|%% Line 546
									[_cor14|%% Line 548
										[TestRetLbl|%% Line 549
											    [_cor16|%% Line 550
												    []]]]]]
				( <_cor11> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor3})
				  -| ['compiler_generated'] )
			      end
			  %% Line 551
			  <'fixnum_neq'> when 'true' ->
			      %% Line 552
			      case _cor3 of
				<[Arg1|[Arg2|[]]]> when 'true' ->
				    let <_cor18> =
					%% Line 554
					call 'erlang':'-'
					    (1, _cor0)
				    in  let <_cor19> =
					    %% Line 553
					    call 'hipe_rtl':'mk_branch'
						(Arg1, 'eq', Arg2, _cor1, _cor2, _cor18)
					in  %% Line 553
					    [_cor19|%% Line 554
						    []]
				( <_cor17> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor3})
				  -| ['compiler_generated'] )
			      end
			  %% Line 555
			  <'=/='> when 'true' ->
			      %% Line 556
			      case _cor3 of
				<[Arg1|[Arg2|[]]]> when 'true' ->
				    let <_cor22> =
					%% Line 558
					call 'hipe_rtl':'label_name'
					    (GenLbl)
				    in  let <_cor21> =
					    %% Line 558
					    call 'erlang':'-'
						(1, _cor0)
					in  let <_cor23> =
						%% Line 557
						call 'hipe_rtl':'mk_branch'
						    (Arg1, 'eq', Arg2, _cor1, _cor22, _cor21)
					    in  let <_cor24> =
						    %% Line 560
						    call 'hipe_rtl':'mk_call'
							([Tmp|[]], 'op_exact_eqeq_2', _cor3, TestRetName, %% Line 561
													  [], %% Line 561
													      'not_remote')
						in  let <_cor25> =
							%% Line 563
							call 'hipe_rtl':'mk_imm'
							    (0)
						    in  let <_cor26> =
							    %% Line 563
							    call 'hipe_rtl':'mk_branch'
								(Tmp, 'ne', _cor25, _cor1, _cor2, _cor0)
							in  %% Line 557
							    [_cor23|%% Line 559
								    [GenLbl|%% Line 560
									    [_cor24|%% Line 562
										    [TestRetLbl|%% Line 563
												[_cor26|%% Line 564
													[]]]]]]
				( <_cor20> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor3})
				  -| ['compiler_generated'] )
			      end
			  %% Line 565
			  <'=='> when 'true' ->
			      %% Line 566
			      case _cor3 of
				<[Arg1|[Arg2|[]]]> when 'true' ->
				    let <_cor28> =
					%% Line 568
					call 'hipe_rtl':'label_name'
					    (GenLbl)
				    in  let <_cor29> =
					    %% Line 567
					    call 'hipe_rtl':'mk_branch'
						(Arg1, 'eq', Arg2, _cor2, _cor28, _cor0)
					in  let <_cor30> =
						%% Line 570
						call 'hipe_rtl':'mk_call'
						    ([Tmp|[]], 'cmp_2', _cor3, TestRetName, [], 'not_remote')
					    in  let <_cor31> =
						    %% Line 572
						    call 'hipe_rtl':'mk_imm'
							(0)
						in  let <_cor32> =
							%% Line 572
							call 'hipe_rtl':'mk_branch'
							    (Tmp, 'eq', _cor31, _cor2, _cor1, _cor0)
						    in  %% Line 567
							[_cor29|%% Line 569
								[GenLbl|%% Line 570
									[_cor30|%% Line 571
										[TestRetLbl|%% Line 572
											    [_cor32|%% Line 573
												    []]]]]]
				( <_cor27> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor3})
				  -| ['compiler_generated'] )
			      end
			  %% Line 574
			  <'/='> when 'true' ->
			      %% Line 575
			      case _cor3 of
				<[Arg1|[Arg2|[]]]> when 'true' ->
				    let <_cor35> =
					%% Line 577
					call 'hipe_rtl':'label_name'
					    (GenLbl)
				    in  let <_cor34> =
					    %% Line 577
					    call 'erlang':'-'
						(1, _cor0)
					in  let <_cor36> =
						%% Line 576
						call 'hipe_rtl':'mk_branch'
						    (Arg1, 'eq', Arg2, _cor1, _cor35, _cor34)
					    in  let <_cor37> =
						    %% Line 579
						    call 'hipe_rtl':'mk_call'
							([Tmp|[]], 'cmp_2', _cor3, TestRetName, [], 'not_remote')
						in  let <_cor38> =
							%% Line 581
							call 'hipe_rtl':'mk_imm'
							    (0)
						    in  let <_cor39> =
							    %% Line 581
							    call 'hipe_rtl':'mk_branch'
								(Tmp, 'ne', _cor38, _cor2, _cor1, _cor0)
							in  %% Line 576
							    [_cor36|%% Line 578
								    [GenLbl|%% Line 579
									    [_cor37|%% Line 580
										    [TestRetLbl|%% Line 581
												[_cor39|%% Line 582
													[]]]]]]
				( <_cor33> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor3})
				  -| ['compiler_generated'] )
			      end
			  %% Line 583
			  <'fixnum_gt'> when 'true' ->
			      %% Line 584
			      case _cor3 of
				<[Arg1|[Arg2|[]]]> when 'true' ->
				    let <_cor41> =
					%% Line 585
					call 'hipe_tagscheme':'fixnum_gt'
					    (Arg1, Arg2, _cor2, _cor1, _cor0)
				    in  %% Line 585
					[_cor41|[]]
				( <_cor40> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor3})
				  -| ['compiler_generated'] )
			      end
			  %% Line 586
			  <'fixnum_ge'> when 'true' ->
			      %% Line 587
			      case _cor3 of
				<[Arg1|[Arg2|[]]]> when 'true' ->
				    let <_cor43> =
					%% Line 588
					call 'hipe_tagscheme':'fixnum_ge'
					    (Arg1, Arg2, _cor2, _cor1, _cor0)
				    in  %% Line 588
					[_cor43|[]]
				( <_cor42> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor3})
				  -| ['compiler_generated'] )
			      end
			  %% Line 589
			  <'fixnum_lt'> when 'true' ->
			      %% Line 590
			      case _cor3 of
				<[Arg1|[Arg2|[]]]> when 'true' ->
				    let <_cor45> =
					%% Line 591
					call 'hipe_tagscheme':'fixnum_lt'
					    (Arg1, Arg2, _cor2, _cor1, _cor0)
				    in  %% Line 591
					[_cor45|[]]
				( <_cor44> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor3})
				  -| ['compiler_generated'] )
			      end
			  %% Line 592
			  <'fixnum_le'> when 'true' ->
			      %% Line 593
			      case _cor3 of
				<[Arg1|[Arg2|[]]]> when 'true' ->
				    let <_cor47> =
					%% Line 594
					call 'hipe_tagscheme':'fixnum_le'
					    (Arg1, Arg2, _cor2, _cor1, _cor0)
				    in  %% Line 594
					[_cor47|[]]
				( <_cor46> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor3})
				  -| ['compiler_generated'] )
			      end
			  %% Line 595
			  <'>'> when 'true' ->
			      %% Line 596
			      case _cor3 of
				<[Arg1|[Arg2|[]]]> when 'true' ->
				    let <_cor49> =
					%% Line 598
					call 'hipe_rtl':'label_name'
					    (GenLbl)
				    in  let <_cor50> =
					    %% Line 597
					    call 'hipe_tagscheme':'test_two_fixnums'
						(Arg1, Arg2, _cor49)
					in  let <_cor51> =
						%% Line 599
						call 'hipe_tagscheme':'fixnum_gt'
						    (Arg1, Arg2, _cor2, _cor1, _cor0)
					    in  let <_cor52> =
						    %% Line 601
						    call 'hipe_rtl':'mk_call'
							([Tmp|[]], 'cmp_2', _cor3, TestRetName, [], 'not_remote')
						in  let <_cor53> =
							%% Line 603
							call 'hipe_rtl':'mk_imm'
							    (0)
						    in  let <_cor54> =
							    %% Line 603
							    call 'hipe_rtl':'mk_branch'
								(Tmp, 'gt', _cor53, _cor2, _cor1, _cor0)
							in  %% Line 597
							    [_cor50|%% Line 599
								    [_cor51|%% Line 600
									    [GenLbl|%% Line 601
										    [_cor52|%% Line 602
											    [TestRetLbl|%% Line 603
													[_cor54|%% Line 604
														[]]]]]]]
				( <_cor48> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor3})
				  -| ['compiler_generated'] )
			      end
			  %% Line 605
			  <'<'> when 'true' ->
			      %% Line 606
			      case _cor3 of
				<[Arg1|[Arg2|[]]]> when 'true' ->
				    let <_cor56> =
					%% Line 608
					call 'hipe_rtl':'label_name'
					    (GenLbl)
				    in  let <_cor57> =
					    %% Line 607
					    call 'hipe_tagscheme':'test_two_fixnums'
						(Arg1, Arg2, _cor56)
					in  let <_cor58> =
						%% Line 609
						call 'hipe_tagscheme':'fixnum_lt'
						    (Arg1, Arg2, _cor2, _cor1, _cor0)
					    in  let <_cor59> =
						    %% Line 611
						    call 'hipe_rtl':'mk_call'
							([Tmp|[]], 'cmp_2', _cor3, TestRetName, [], 'not_remote')
						in  let <_cor60> =
							%% Line 613
							call 'hipe_rtl':'mk_imm'
							    (0)
						    in  let <_cor61> =
							    %% Line 613
							    call 'hipe_rtl':'mk_branch'
								(Tmp, 'lt', _cor60, _cor2, _cor1, _cor0)
							in  %% Line 607
							    [_cor57|%% Line 609
								    [_cor58|%% Line 610
									    [GenLbl|%% Line 611
										    [_cor59|%% Line 612
											    [TestRetLbl|%% Line 613
													[_cor61|%% Line 614
														[]]]]]]]
				( <_cor55> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor3})
				  -| ['compiler_generated'] )
			      end
			  %% Line 615
			  <'>='> when 'true' ->
			      %% Line 616
			      case _cor3 of
				<[Arg1|[Arg2|[]]]> when 'true' ->
				    let <_cor63> =
					%% Line 618
					call 'hipe_rtl':'label_name'
					    (GenLbl)
				    in  let <_cor64> =
					    %% Line 617
					    call 'hipe_tagscheme':'test_two_fixnums'
						(Arg1, Arg2, _cor63)
					in  let <_cor65> =
						%% Line 619
						call 'hipe_tagscheme':'fixnum_ge'
						    (Arg1, Arg2, _cor2, _cor1, _cor0)
					    in  let <_cor66> =
						    %% Line 621
						    call 'hipe_rtl':'mk_call'
							([Tmp|[]], 'cmp_2', _cor3, TestRetName, [], 'not_remote')
						in  let <_cor67> =
							%% Line 623
							call 'hipe_rtl':'mk_imm'
							    (0)
						    in  let <_cor68> =
							    %% Line 623
							    call 'hipe_rtl':'mk_branch'
								(Tmp, 'ge', _cor67, _cor2, _cor1, _cor0)
							in  %% Line 617
							    [_cor64|%% Line 619
								    [_cor65|%% Line 620
									    [GenLbl|%% Line 621
										    [_cor66|%% Line 622
											    [TestRetLbl|%% Line 623
													[_cor68|%% Line 624
														[]]]]]]]
				( <_cor62> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor3})
				  -| ['compiler_generated'] )
			      end
			  %% Line 625
			  <'=<'> when 'true' ->
			      %% Line 626
			      case _cor3 of
				<[Arg1|[Arg2|[]]]> when 'true' ->
				    let <_cor70> =
					%% Line 628
					call 'hipe_rtl':'label_name'
					    (GenLbl)
				    in  let <_cor71> =
					    %% Line 627
					    call 'hipe_tagscheme':'test_two_fixnums'
						(Arg1, Arg2, _cor70)
					in  let <_cor72> =
						%% Line 629
						call 'hipe_tagscheme':'fixnum_le'
						    (Arg1, Arg2, _cor2, _cor1, _cor0)
					    in  let <_cor73> =
						    %% Line 631
						    call 'hipe_rtl':'mk_call'
							([Tmp|[]], 'cmp_2', _cor3, TestRetName, [], 'not_remote')
						in  let <_cor74> =
							%% Line 633
							call 'hipe_rtl':'mk_imm'
							    (0)
						    in  let <_cor75> =
							    %% Line 633
							    call 'hipe_rtl':'mk_branch'
								(Tmp, 'le', _cor74, _cor2, _cor1, _cor0)
							in  %% Line 627
							    [_cor71|%% Line 629
								    [_cor72|%% Line 630
									    [GenLbl|%% Line 631
										    [_cor73|%% Line 632
											    [TestRetLbl|%% Line 633
													[_cor75|%% Line 634
														[]]]]]]]
				( <_cor69> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor3})
				  -| ['compiler_generated'] )
			      end
			  %% Line 635
			  <_X_Other> when 'true' ->
			      let <_cor76> =
				  %% Line 636
				  call 'hipe_rtl':'mk_call'
				      ([Tmp|[]], _cor4, _cor3, TestRetName, [], 'not_remote')
			      in  let <_cor77> =
				      %% Line 638
				      call 'hipe_rtl':'mk_imm'
					  (0)
				  in  let <_cor78> =
					  %% Line 638
					  call 'hipe_rtl':'mk_branch'
					      (Tmp, 'ne', _cor77, _cor2, _cor1, _cor0)
				      in  %% Line 636
					  [_cor76|%% Line 637
						  [TestRetLbl|%% Line 638
							      [_cor78|%% Line 639
								      []]]]
			end
'args_to_vars'/3 =
    %% Line 648
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Arg|Args],VarMap,ConstTab> when 'true' ->
	      let <_3265> =
		  %% Line 650
		  apply 'args_to_vars'/3
		      (Args, _cor1, _cor0)
	      in  %% Line 649
		  case _3265 of
		    <{Vars,VarMap1,ConstTab1,Code}> when 'true' ->
			let <_1173> =
			    %% Line 651
			    call 'hipe_icode':'is_variable'
				(Arg)
			in  %% Line 651
			    case _1173 of
			      %% Line 652
			      <'true'> when 'true' ->
				  let <_662> =
				      %% Line 653
				      call 'hipe_rtl_varmap':'icode_var2rtl_var'
					  (Arg, VarMap1)
				  in  %% Line 653
				      case _662 of
					<{Var,VarMap2}> when 'true' ->
					    %% Line 654
					    {[Var|Vars],VarMap2,ConstTab1,Code}
					( <_cor4> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_662})
					  -| ['compiler_generated'] )
				      end
			      %% Line 655
			      <'false'> when 'true' ->
				  %% Line 656
				  case apply 'type_of_const'/1
					   (Arg) of
				    %% Line 657
				    <'big'> when 'true' ->
					let <ConstVal> =
					    %% Line 658
					    call 'hipe_icode':'const_value'
						(Arg)
					in  let <_2468> =
						%% Line 659
						call 'hipe_consttab':'insert_term'
						    (ConstTab1, ConstVal)
					    in  %% Line 659
						case _2468 of
						  <{ConstTab2,Label}> when 'true' ->
						      let <NewArg> =
							  %% Line 660
							  call 'hipe_rtl':'mk_const_label'
							      (Label)
						      in  %% Line 661
							  {[NewArg|Vars],VarMap1,ConstTab2,Code}
						  ( <_cor6> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_2468})
						    -| ['compiler_generated'] )
						end
				    %% Line 662
				    <'fixnum'> when 'true' ->
					let <ConstVal> =
					    %% Line 663
					    call 'hipe_icode':'const_value'
						(Arg)
					in  let <_cor9> =
						%% Line 726
						case ConstVal of
						  <[]> when 'true' ->
						      call 'hipe_tagscheme':'mk_nil'
							  ()
						  %% Line 727
						  <X>
						      when call 'erlang':'is_integer'
							    (ConstVal) ->
						      call 'hipe_tagscheme':'mk_fixnum'
							  (ConstVal)
						  ( <_283> when 'true' ->
							primop 'match_fail'
							    ({'function_clause',ConstVal})
						    -| ['compiler_generated'] )
						end
					    in  let <NewArg> =
						    %% Line 664
						    call 'hipe_rtl':'mk_imm'
							(_cor9)
						in  %% Line 665
						    {[NewArg|Vars],VarMap1,ConstTab1,Code}
				    %% Line 666
				    <'nil'> when 'true' ->
					let <_cor11> =
					    %% Line 726
					    call 'hipe_tagscheme':'mk_nil'
						()
					in  let <NewArg> =
						%% Line 667
						call 'hipe_rtl':'mk_imm'
						    (_cor11)
					    in  %% Line 668
						{[NewArg|Vars],VarMap1,ConstTab1,Code}
				    %% Line 669
				    <_cor20> when 'true' ->
					let <Var> =
					    %% Line 670
					    call 'hipe_rtl':'mk_new_var'
						()
					in  let <_196> =
						%% Line 671
						apply 'gen_const_move'/3
						    (Var, Arg, ConstTab1)
					    in  %% Line 671
						case _196 of
						  <{Code2,ConstTab2}> when 'true' ->
						      %% Line 672
						      {[Var|Vars],VarMap1,ConstTab2,[Code2|[Code|[]]]}
						  ( <_cor14> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_196})
						    -| ['compiler_generated'] )
						end
				  end
			      ( <_cor16> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_1173})
				-| ['compiler_generated'] )
			    end
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_3265})
		      -| ['compiler_generated'] )
		  end
	  %% Line 675
	  <[],VarMap,ConstTab> when 'true' ->
	      %% Line 676
	      {[],_cor1,_cor0,[]}
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'args_to_vars',3}}] )
	    -| ['compiler_generated'] )
	end
'gen_const_move'/3 =
    %% Line 684
    fun (_cor2,_cor1,_cor0) ->
	let <ConstVal> =
	    %% Line 685
	    call 'hipe_icode':'const_value'
		(_cor1)
	in  let <_2710> =
		%% Line 686
		apply 'type_of_const'/1
		    (_cor1)
	    in  %% Line 686
		case _2710 of
		  %% Line 689
		  <'nil'> when 'true' ->
		      let <_cor4> =
			  %% Line 726
			  call 'hipe_tagscheme':'mk_nil'
			      ()
		      in  let <Src> =
			      %% Line 690
			      call 'hipe_rtl':'mk_imm'
				  (_cor4)
			  in  let <_cor6> =
				  %% Line 691
				  call 'hipe_rtl':'mk_move'
				      (_cor2, Src)
			      in  %% Line 691
				  {_cor6,_cor0}
		  %% Line 692
		  <'fixnum'> when 'true' ->
		      let <_cor7> =
			  %% Line 726
			  case ConstVal of
			    <[]> when 'true' ->
				call 'hipe_tagscheme':'mk_nil'
				    ()
			    %% Line 727
			    <X>
				when call 'erlang':'is_integer'
				      (ConstVal) ->
				call 'hipe_tagscheme':'mk_fixnum'
				    (ConstVal)
			    ( <_1779> when 'true' ->
				  primop 'match_fail'
				      ({'function_clause',ConstVal})
			      -| ['compiler_generated'] )
			  end
		      in  let <Src> =
			      %% Line 693
			      call 'hipe_rtl':'mk_imm'
				  (_cor7)
			  in  let <_cor9> =
				  %% Line 694
				  call 'hipe_rtl':'mk_move'
				      (_cor2, Src)
			      in  %% Line 694
				  {_cor9,_cor0}
		  %% Line 695
		  <'atom'> when 'true' ->
		      let <_cor10> =
			  %% Line 696
			  call 'hipe_rtl':'mk_load_atom'
			      (_cor2, ConstVal)
		      in  %% Line 696
			  {_cor10,_cor0}
		  %% Line 697
		  <'big'> when 'true' ->
		      %% Line 698
		      apply 'gen_big_move'/3
			  (_cor2, ConstVal, _cor0)
		  ( <_cor11> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_2710})
		    -| ['compiler_generated'] )
		end
'gen_big_move'/3 =
    %% Line 706
    fun (_cor2,_cor1,_cor0) ->
	let <_384> =
	    %% Line 707
	    call 'hipe_consttab':'insert_term'
		(_cor0, _cor1)
	in  %% Line 707
	    case _384 of
	      <{NewTab,Label}> when 'true' ->
		  let <_cor4> =
		      %% Line 708
		      call 'hipe_rtl':'mk_const_label'
			  (Label)
		  in  let <_cor5> =
			  %% Line 708
			  call 'hipe_rtl':'mk_move'
			      (_cor2, _cor4)
		      in  %% Line 708
			  {_cor5,NewTab}
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_384})
		-| ['compiler_generated'] )
	    end
'type_of_const'/1 =
    %% Line 711
    fun (_cor0) ->
	let <_93> =
	    %% Line 712
	    call 'hipe_icode':'const_value'
		(_cor0)
	in  %% Line 712
	    case _93 of
	      %% Line 713
	      <[]> when 'true' ->
		  %% Line 714
		  'nil'
	      %% Line 715
	      <X>
		  when call 'erlang':'is_integer'
			(_93) ->
		  let <_952> =
		      %% Line 716
		      call 'hipe_tagscheme':'is_fixnum'
			  (_93)
		  in  %% Line 716
		      case _952 of
			%% Line 717
			<'true'> when 'true' ->
			    'fixnum'
			%% Line 718
			<'false'> when 'true' ->
			    'big'
			( <_cor1> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_952})
			  -| ['compiler_generated'] )
		      end
	      %% Line 720
	      <A>
		  when call 'erlang':'is_atom'
			(_93) ->
		  %% Line 721
		  'atom'
	      %% Line 722
	      <_cor4> when 'true' ->
		  %% Line 723
		  'big'
	    end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_icode2rtl')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_icode2rtl', _cor0)
end