module 'hipe_icode_range' ['cfg'/4,
			   'module_info'/0,
			   'module_info'/1,
			   'new__info'/1,
			   'replace_nones'/1,
			   'return__info'/1,
			   'return_any_args'/2,
			   'return_none'/0,
			   'return_none_args'/2,
			   'update__info'/2]
    attributes [%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{'simple_const',{'type',35,'union',[{'type',35,'atom',[]}|[{'type',35,'nil',[]}|[{'type',35,'integer',[]}|[{'type',35,'float',[]}]]]]},[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{'structured_const',{'type',36,'union',[{'type',36,'list',[]}|[{'type',36,'tuple','any'}]]},[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'icode_lbl',{'type',38,'non_neg_integer',[]},[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','flat'},[{'typed_record_field',{'record_field',44,{'atom',44,'value'}},{'type',44,'union',[{'atom',44,'undefined'}|[{'type',44,'simple_const',[]}|[{'type',44,'structured_const',[]}|[{'type',44,'binary',[]}]]]]}}],[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{{'record','icode_const'},[{'typed_record_field',{'record_field',46,{'atom',46,'value'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'record',[{'atom',46,'flat'}]}]]}}],[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'variable_annotation',{'type',48,'tuple',[{'type',48,'atom',[]}|[{'type',48,'any',[]}|[{'type',48,'fun',[{'type',48,'product',[{'type',48,'any',[]}]}|[{'type',48,'string',[]}]]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','icode_variable'},[{'typed_record_field',{'record_field',50,{'atom',50,'name'}},{'type',50,'union',[{'atom',50,'undefined'}|[{'type',50,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'kind'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'atom',51,'var'}|[{'atom',51,'reg'}|[{'atom',51,'fvar'}]]]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'annotation'},{'nil',52}},{'type',52,'union',[{'type',52,'nil',[]}|[{'type',52,'variable_annotation',[]}]]}}]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'icode_if_op',{'type',58,'union',[{'atom',58,'>'}|[{'atom',58,'<'}|[{'atom',58,'>='}|[{'atom',58,'=<'}|[{'atom',58,'=:='}|[{'atom',58,'=/='}|[{'atom',58,'=='}|[{'atom',58,'/='}|[{'atom',59,'fixnum_eq'}|[{'atom',59,'fixnum_neq'}|[{'atom',59,'fixnum_lt'}|[{'atom',60,'fixnum_le'}|[{'atom',60,'fixnum_ge'}|[{'atom',60,'fixnum_gt'}|[{'atom',61,'op_exact_eqeq_2'}|[{'atom',61,'suspend_msg_timeout'}]]]]]]]]]]]]]]]]},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'icode_type_test',{'type',63,'union',[{'atom',63,'atom'}|[{'atom',63,'bignum'}|[{'atom',63,'binary'}|[{'atom',63,'bitstr'}|[{'atom',63,'boolean'}|[{'atom',64,'cons'}|[{'atom',64,'fixnum'}|[{'atom',64,'float'}|[{'atom',64,'function'}|[{'atom',65,'function2'}|[{'atom',65,'integer'}|[{'atom',65,'list'}|[{'atom',65,'map'}|[{'atom',65,'nil'}|[{'atom',66,'number'}|[{'atom',66,'pid'}|[{'atom',66,'port'}|[{'atom',66,'reference'}|[{'atom',66,'tuple'}|[{'type',67,'tuple',[{'atom',67,'atom'}|[{'type',67,'atom',[]}]]}|[{'type',67,'tuple',[{'atom',67,'integer'}|[{'type',67,'integer',[]}]]}|[{'type',68,'tuple',[{'atom',68,'record'}|[{'type',68,'atom',[]}|[{'type',68,'non_neg_integer',[]}]]]}|[{'type',69,'tuple',[{'atom',69,'tuple'}|[{'type',69,'non_neg_integer',[]}]]}]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{'icode_primop',{'type',71,'union',[{'type',71,'atom',[]}|[{'type',71,'tuple','any'}]]},[]}],
		%% Line 72
		'type' =
		    %% Line 72
		    [{'icode_funcall',{'type',72,'union',[{'type',72,'mfa',[]}|[{'type',72,'icode_primop',[]}]]},[]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{'icode_var',{'type',74,'record',[{'atom',74,'icode_variable'}|[{'type',74,'field_type',[{'atom',74,'kind'}|[{'atom',74,'var'}]]}]]},[]}],
		%% Line 75
		'type' =
		    %% Line 75
		    [{'icode_reg',{'type',75,'record',[{'atom',75,'icode_variable'}|[{'type',75,'field_type',[{'atom',75,'kind'}|[{'atom',75,'reg'}]]}]]},[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{'icode_fvar',{'type',76,'record',[{'atom',76,'icode_variable'}|[{'type',76,'field_type',[{'atom',76,'kind'}|[{'atom',76,'fvar'}]]}]]},[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{'icode_argument',{'type',77,'union',[{'type',77,'record',[{'atom',77,'icode_const'}]}|[{'type',77,'record',[{'atom',77,'icode_variable'}]}]]},[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{'icode_term_arg',{'type',78,'union',[{'type',78,'icode_var',[]}|[{'type',78,'record',[{'atom',78,'icode_const'}]}]]},[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{'icode_switch_case',{'type',80,'tuple',[{'type',80,'record',[{'atom',80,'icode_const'}]}|[{'type',80,'icode_lbl',[]}]]},[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'icode_call_type',{'type',82,'union',[{'atom',82,'local'}|[{'atom',82,'primop'}|[{'atom',82,'remote'}]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'icode_exit_class',{'type',83,'union',[{'atom',83,'error'}|[{'atom',83,'exit'}|[{'atom',83,'rethrow'}|[{'atom',83,'throw'}]]]]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{'icode_comment_text',{'type',85,'union',[{'type',85,'atom',[]}|[{'type',85,'string',[]}]]},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'icode_info',{'type',87,'list',[{'type',87,'tuple',[{'atom',87,'arg_types'}|[{'type',87,'list',[{'remote_type',87,[{'atom',87,'erl_types'}|[{'atom',87,'erl_type'}|[[]]]]}]}]]}]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','icode_label'},[{'typed_record_field',{'record_field',93,{'atom',93,'name'}},{'type',93,'union',[{'atom',93,'undefined'}|[{'type',93,'icode_lbl',[]}]]}}],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','icode_if'},[{'typed_record_field',{'record_field',95,{'atom',95,'op'}},{'type',95,'union',[{'atom',95,'undefined'}|[{'type',95,'icode_if_op',[]}]]}}|[{'typed_record_field',{'record_field',96,{'atom',96,'args'}},{'type',96,'union',[{'atom',96,'undefined'}|[{'type',96,'list',[{'type',96,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',97,{'atom',97,'true_label'}},{'type',97,'union',[{'atom',97,'undefined'}|[{'type',97,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'false_label'}},{'type',98,'union',[{'atom',98,'undefined'}|[{'type',98,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'p'}},{'type',99,'union',[{'atom',99,'undefined'}|[{'type',99,'float',[]}]]}}]]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','icode_switch_val'},[{'typed_record_field',{'record_field',101,{'atom',101,'term'}},{'type',101,'union',[{'atom',101,'undefined'}|[{'type',101,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',102,{'atom',102,'fail_label'}},{'type',102,'union',[{'atom',102,'undefined'}|[{'type',102,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'length'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'cases'}},{'type',104,'union',[{'atom',104,'undefined'}|[{'type',104,'list',[{'type',104,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','icode_switch_tuple_arity'},[{'typed_record_field',{'record_field',106,{'atom',106,'term'}},{'type',106,'union',[{'atom',106,'undefined'}|[{'type',106,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',107,{'atom',107,'fail_label'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'type',107,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',108,{'atom',108,'length'}},{'type',108,'union',[{'atom',108,'undefined'}|[{'type',108,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',109,{'atom',109,'cases'}},{'type',109,'union',[{'atom',109,'undefined'}|[{'type',109,'list',[{'type',109,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','icode_type'},[{'typed_record_field',{'record_field',111,{'atom',111,'test'}},{'type',111,'union',[{'atom',111,'undefined'}|[{'type',111,'icode_type_test',[]}]]}}|[{'typed_record_field',{'record_field',112,{'atom',112,'args'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'list',[{'type',112,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',113,{'atom',113,'true_label'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'false_label'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'p'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'float',[]}]]}}]]]]],[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{{'record','icode_goto'},[{'typed_record_field',{'record_field',117,{'atom',117,'label'}},{'type',117,'union',[{'atom',117,'undefined'}|[{'type',117,'icode_lbl',[]}]]}}],[]}],
		%% Line 119
		'type' =
		    %% Line 119
		    [{{'record','icode_move'},[{'typed_record_field',{'record_field',119,{'atom',119,'dst'}},{'type',119,'union',[{'atom',119,'undefined'}|[{'type',119,'record',[{'atom',119,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'src'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'record',[{'atom',120,'icode_variable'}]}|[{'type',120,'record',[{'atom',120,'icode_const'}]}]]]}}]],[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{{'record','icode_phi'},[{'typed_record_field',{'record_field',122,{'atom',122,'dst'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'type',122,'record',[{'atom',122,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'id'}},{'type',123,'union',[{'atom',123,'undefined'}|[{'type',123,'record',[{'atom',123,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'arglist'}},{'type',124,'union',[{'atom',124,'undefined'}|[{'type',124,'list',[{'type',124,'tuple',[{'type',124,'icode_lbl',[]}|[{'type',124,'record',[{'atom',124,'icode_variable'}]}]]}]}]]}}]]],[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{{'record','icode_call'},[{'typed_record_field',{'record_field',126,{'atom',126,'dstlist'}},{'type',126,'union',[{'atom',126,'undefined'}|[{'type',126,'list',[{'type',126,'record',[{'atom',126,'icode_variable'}]}]}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'fun'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'type',127,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'args'}},{'type',128,'union',[{'atom',128,'undefined'}|[{'type',128,'list',[{'type',128,'icode_argument',[]}]}]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'type'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'icode_call_type',[]}]]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'continuation'}},{'type',130,'union',[{'atom',130,'undefined'}|[{'type',130,'nil',[]}|[{'type',130,'icode_lbl',[]}]]]}}|[{'typed_record_field',{'record_field',131,{'atom',131,'fail_label'},{'nil',131}},{'type',131,'union',[{'type',131,'nil',[]}|[{'type',131,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'in_guard'},{'atom',132,'false'}},{'type',132,'boolean',[]}}]]]]]]],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{{'record','icode_enter'},[{'typed_record_field',{'record_field',134,{'atom',134,'fun'}},{'type',134,'union',[{'atom',134,'undefined'}|[{'type',134,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'args'}},{'type',135,'union',[{'atom',135,'undefined'}|[{'type',135,'list',[{'type',135,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'type'}},{'type',136,'union',[{'atom',136,'undefined'}|[{'type',136,'icode_call_type',[]}]]}}]]],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{{'record','icode_return'},[{'typed_record_field',{'record_field',138,{'atom',138,'vars'}},{'type',138,'union',[{'atom',138,'undefined'}|[{'type',138,'list',[{'type',138,'icode_var',[]}]}]]}}],[]}],
		%% Line 140
		'type' =
		    %% Line 140
		    [{{'record','icode_begin_try'},[{'typed_record_field',{'record_field',140,{'atom',140,'label'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'successor'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}]],[]}],
		%% Line 142
		'type' =
		    %% Line 142
		    [{{'record','icode_end_try'},[],[]}],
		%% Line 144
		'type' =
		    %% Line 144
		    [{{'record','icode_begin_handler'},[{'typed_record_field',{'record_field',144,{'atom',144,'dstlist'}},{'type',144,'union',[{'atom',144,'undefined'}|[{'type',144,'list',[{'type',144,'icode_var',[]}]}]]}}],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{{'record','icode_fail'},[{'typed_record_field',{'record_field',147,{'atom',147,'class'}},{'type',147,'union',[{'atom',147,'undefined'}|[{'type',147,'icode_exit_class',[]}]]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'args'}},{'type',148,'union',[{'atom',148,'undefined'}|[{'type',148,'list',[{'type',148,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'fail_label'},{'nil',149}},{'type',149,'union',[{'type',149,'nil',[]}|[{'type',149,'icode_lbl',[]}]]}}]]],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{{'record','icode_comment'},[{'typed_record_field',{'record_field',151,{'atom',151,'text'}},{'type',151,'union',[{'atom',151,'undefined'}|[{'type',151,'icode_comment_text',[]}]]}}],[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'icode_instr',{'type',157,'union',[{'type',157,'record',[{'atom',157,'icode_begin_handler'}]}|[{'type',157,'record',[{'atom',157,'icode_begin_try'}]}|[{'type',158,'record',[{'atom',158,'icode_call'}]}|[{'type',158,'record',[{'atom',158,'icode_comment'}]}|[{'type',158,'record',[{'atom',158,'icode_end_try'}]}|[{'type',159,'record',[{'atom',159,'icode_enter'}]}|[{'type',159,'record',[{'atom',159,'icode_fail'}]}|[{'type',160,'record',[{'atom',160,'icode_goto'}]}|[{'type',160,'record',[{'atom',160,'icode_if'}]}|[{'type',160,'record',[{'atom',160,'icode_label'}]}|[{'type',161,'record',[{'atom',161,'icode_move'}]}|[{'type',161,'record',[{'atom',161,'icode_phi'}]}|[{'type',161,'record',[{'atom',161,'icode_return'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_tuple_arity'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_val'}]}|[{'type',163,'record',[{'atom',163,'icode_type'}]}]]]]]]]]]]]]]]]]},[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{'icode_instrs',{'type',164,'list',[{'type',164,'icode_instr',[]}]},[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{{'record','icode'},[{'typed_record_field',{'record_field',170,{'atom',170,'fun'}},{'type',170,'union',[{'atom',170,'undefined'}|[{'type',170,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',171,{'atom',171,'params'}},{'type',171,'union',[{'atom',171,'undefined'}|[{'type',171,'list',[{'type',171,'icode_var',[]}]}]]}}|[{'typed_record_field',{'record_field',172,{'atom',172,'is_closure'}},{'type',172,'union',[{'atom',172,'undefined'}|[{'type',172,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',173,{'atom',173,'closure_arity'}},{'type',173,'union',[{'atom',173,'undefined'}|[{'type',173,'arity',[]}]]}}|[{'typed_record_field',{'record_field',174,{'atom',174,'is_leaf'}},{'type',174,'union',[{'atom',174,'undefined'}|[{'type',174,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',175,{'atom',175,'code'},{'nil',175}},{'type',175,'icode_instrs',[]}}|[{'typed_record_field',{'record_field',176,{'atom',176,'data'}},{'type',176,'union',[{'atom',176,'undefined'}|[{'type',176,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',177,{'atom',177,'var_range'}},{'type',177,'union',[{'atom',177,'undefined'}|[{'type',177,'tuple',[{'type',177,'non_neg_integer',[]}|[{'type',177,'non_neg_integer',[]}]]}]]}}|[{'typed_record_field',{'record_field',178,{'atom',178,'label_range'}},{'type',178,'union',[{'atom',178,'undefined'}|[{'type',178,'tuple',[{'type',178,'icode_lbl',[]}|[{'type',178,'icode_lbl',[]}]]}]]}}|[{'typed_record_field',{'record_field',179,{'atom',179,'info'},{'nil',179}},{'type',179,'icode_info',[]}}]]]]]]]]]],[]}],
		%% Line 180
		'type' =
		    %% Line 180
		    [{'icode',{'type',180,'record',[{'atom',180,'icode'}]},[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','apply_N'},[{'typed_record_field',{'record_field',28,{'atom',28,'arity'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'type',28,'arity',[]}]]}}],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','closure_element'},[{'typed_record_field',{'record_field',30,{'atom',30,'n'}},{'type',30,'union',[{'atom',30,'undefined'}|[{'type',30,'arity',[]}]]}}],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','element'},[{'typed_record_field',{'record_field',32,{'atom',32,'typeinfo'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'type',32,'list',[]}]]}}],[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','gc_test'},[{'typed_record_field',{'record_field',34,{'atom',34,'need'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'type',34,'non_neg_integer',[]}]]}}],[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{{'record','mkfun'},[{'typed_record_field',{'record_field',36,{'atom',36,'mfa'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'magic_num'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'integer',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'index'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'integer',[]}]]}}]]],[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','unsafe_element'},[{'typed_record_field',{'record_field',38,{'atom',38,'index'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'non_neg_integer',[]}]]}}],[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{{'record','unsafe_update_element'},[{'typed_record_field',{'record_field',40,{'atom',40,'index'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}],[]}],
		%% Line 301
		'type' =
		    %% Line 301
		    [{{'record','comp_servers'},[{'typed_record_field',{'record_field',301,{'atom',301,'pp_server'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'range'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'type'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}]]],[]}],
		%% Line 307
		'type' =
		    %% Line 307
		    [{'comp_option',{'type',307,'union',[{'type',307,'atom',[]}|[{'type',307,'tuple',[{'type',307,'atom',[]}|[{'type',307,'atom',[]}]]}]]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{'comp_options',{'type',308,'list',[{'type',308,'comp_option',[]}]},[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'hipe_architecture',{'type',311,'union',[{'atom',311,'amd64'}|[{'atom',311,'arm'}|[{'atom',311,'powerpc'}|[{'atom',311,'ppc64'}|[{'atom',311,'ultrasparc'}|[{'atom',311,'x86'}]]]]]]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{'hipe_map',{'type',313,'list',[{'type',313,'tuple',[{'type',313,'non_neg_integer',[]}|[{'type',314,'union',[{'atom',314,'unknown'}|[{'type',314,'tuple',[{'type',314,'union',[{'atom',314,'reg'}|[{'atom',314,'fp_reg'}|[{'atom',314,'spill'}]]]}|[{'type',315,'non_neg_integer',[]}]]}]]}]]}]},[]}],
		%% Line 316
		'type' =
		    %% Line 316
		    [{'hipe_temp_map',{'type',316,'tuple','any'},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{'hipe_spill_map',{'type',317,'list',[{'type',317,'tuple',[{'type',317,'non_neg_integer',[]}|[{'type',317,'tuple',[{'atom',317,'spill'}|[{'type',317,'non_neg_integer',[]}]]}]]}]},[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{'cfg_lbl',{'type',28,'non_neg_integer',[]},[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','cfg_info'},[{'typed_record_field',{'record_field',34,{'atom',34,'fun'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'type',34,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',35,{'atom',35,'start_label'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'cfg_lbl',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'is_closure'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',37,{'atom',37,'closure_arity'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'type',37,'arity',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'is_leaf'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'boolean',[]}]]}}|[{'record_field',39,{'atom',39,'params'}}|[{'record_field',40,{'atom',40,'info'},{'nil',40}}]]]]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'cfg_data',{'type',45,'tuple',[{'remote_type',45,[{'atom',45,'dict'}|[{'atom',45,'dict'}|[[]]]]}|[{'type',45,'list',[{'type',45,'cfg_lbl',[]}]}|[{'type',45,'non_neg_integer',[]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','cfg'},[{'typed_record_field',{'record_field',50,{'atom',50,'table'},{'call',50,{'remote',50,{'atom',50,'gb_trees'},{'atom',50,'empty'}},[]}},{'remote_type',50,[{'atom',50,'gb_trees'}|[{'atom',50,'tree'}|[[]]]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'info'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'type',51,'record',[{'atom',51,'cfg_info'}]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'data'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'cfg_data',[]}]]}}]]],[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{'cfg',{'type',53,'record',[{'atom',53,'cfg'}]},[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','bb'},[{'typed_record_field',{'record_field',28,{'atom',28,'code'},{'nil',28}},{'type',28,'list',[{'var',28,'_'}]}}],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{'bb',{'type',30,'record',[{'atom',30,'bb'}]},[]}],
		%% Line 55
		'type' =
		    %% Line 55
		    [{'range_tuple',{'type',55,'tuple',[{'type',55,'union',[{'atom',55,'neg_inf'}|[{'type',55,'integer',[]}]]}|[{'type',55,'union',[{'atom',55,'pos_inf'}|[{'type',55,'integer',[]}]]}]]},[]}],
		%% Line 56
		'type' =
		    %% Line 56
		    [{'range_rep',{'type',56,'union',[{'type',56,'range_tuple',[]}|[{'atom',56,'empty'}]]},[]}],
		%% Line 57
		'type' =
		    %% Line 57
		    [{'fun_name',{'type',57,'union',[{'type',57,'atom',[]}|[{'type',57,'tuple','any'}]]},[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'inf_integer',{'type',58,'union',[{'atom',58,'neg_inf'}|[{'atom',58,'pos_inf'}|[{'type',58,'integer',[]}]]]},[]}],
		%% Line 60
		'type' =
		    %% Line 60
		    [{{'record','range'},[{'typed_record_field',{'record_field',60,{'atom',60,'range'}},{'type',60,'union',[{'atom',60,'undefined'}|[{'type',60,'range_rep',[]}]]}}|[{'typed_record_field',{'record_field',61,{'atom',61,'other'}},{'type',61,'union',[{'atom',61,'undefined'}|[{'type',61,'boolean',[]}]]}}]],[]}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{'range',{'type',62,'record',[{'atom',62,'range'}]},[]}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{{'record','ann'},[{'typed_record_field',{'record_field',64,{'atom',64,'range'}},{'type',64,'union',[{'atom',64,'undefined'}|[{'type',64,'range',[]}]]}}|[{'typed_record_field',{'record_field',65,{'atom',65,'type'}},{'type',65,'union',[{'atom',65,'undefined'}|[{'remote_type',65,[{'atom',65,'erl_types'}|[{'atom',65,'erl_type'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',66,{'atom',66,'count'}},{'type',66,'union',[{'atom',66,'undefined'}|[{'type',66,'integer',[]}]]}}]]],[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{'ann',{'type',67,'record',[{'atom',67,'ann'}]},[]}],
		%% Line 69
		'type' =
		    %% Line 69
		    [{'range_anno',{'type',69,'tuple',[{'atom',69,'range_anno'}|[{'type',69,'ann',[]}|[{'type',69,'fun',[{'type',69,'product',[{'type',69,'ann',[]}]}|[{'type',69,'string',[]}]]}]]]},[]}],
		%% Line 70
		'type' =
		    %% Line 70
		    [{'args_fun',{'type',70,'fun',[{'type',70,'product',[{'type',70,'mfa',[]}|[{'type',70,'cfg',[]}]]}|[{'type',70,'list',[{'type',70,'range',[]}]}]]},[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{'call_fun',{'type',71,'fun',[{'type',71,'product',[{'type',71,'mfa',[]}|[{'type',71,'list',[{'type',71,'range',[]}]}]]}|[{'type',71,'range',[]}]]},[]}],
		%% Line 72
		'type' =
		    %% Line 72
		    [{'final_fun',{'type',72,'fun',[{'type',72,'product',[{'type',72,'mfa',[]}|[{'type',72,'list',[{'type',72,'range',[]}]}]]}|[{'atom',72,'ok'}]]},[]}],
		%% Line 73
		'type' =
		    %% Line 73
		    [{'data',{'type',73,'tuple',[{'type',73,'mfa',[]}|[{'type',73,'args_fun',[]}|[{'type',73,'call_fun',[]}|[{'type',73,'final_fun',[]}]]]]},[]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{'label',{'type',74,'non_neg_integer',[]},[]}],
		%% Line 75
		'type' =
		    %% Line 75
		    [{'info',{'remote_type',75,[{'atom',75,'gb_trees'}|[{'atom',75,'tree'}|[[]]]]},[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{'work_list',{'type',76,'tuple',[{'type',76,'list',[{'type',76,'label',[]}]}|[{'type',76,'list',[{'type',76,'label',[]}]}|[{'remote_type',76,[{'atom',76,'sets'}|[{'atom',76,'set'}|[[]]]]}]]]},[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{'variable',{'type',77,'record',[{'atom',77,'icode_variable'}]},[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{'annotated_variable',{'type',78,'record',[{'atom',78,'icode_variable'}]},[]}],
		%% Line 79
		'type' =
		    %% Line 79
		    [{'argument',{'type',79,'union',[{'type',79,'record',[{'atom',79,'icode_const'}]}|[{'type',79,'variable',[]}]]},[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{'three_range_fun',{'type',80,'fun',[{'type',80,'product',[{'type',80,'range',[]}|[{'type',80,'range',[]}|[{'type',80,'range',[]}]]]}|[{'type',80,'range',[]}]]},[]}],
		%% Line 81
		'type' =
		    %% Line 81
		    [{'instr_split_info',{'type',81,'tuple',[{'type',81,'icode_instr',[]}|[{'type',81,'list',[{'type',81,'tuple',[{'type',81,'label',[]}|[{'type',81,'info',[]}]]}]}]]},[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'last_instr_return',{'type',82,'tuple',[{'type',82,'instr_split_info',[]}|[{'type',82,'range',[]}]]},[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{{'record','state'},[{'typed_record_field',{'record_field',84,{'atom',84,'info_map'},{'call',84,{'remote',84,{'atom',84,'gb_trees'},{'atom',84,'empty'}},[]}},{'type',84,'info',[]}}|[{'typed_record_field',{'record_field',85,{'atom',85,'counter'},{'call',85,{'remote',85,{'atom',85,'dict'},{'atom',85,'new'}},[]}},{'remote_type',85,[{'atom',85,'dict'}|[{'atom',85,'dict'}|[[]]]]}}|[{'typed_record_field',{'record_field',86,{'atom',86,'cfg'}},{'type',86,'union',[{'atom',86,'undefined'}|[{'type',86,'cfg',[]}]]}}|[{'typed_record_field',{'record_field',87,{'atom',87,'liveness'},{'call',87,{'remote',87,{'atom',87,'gb_trees'},{'atom',87,'empty'}},[]}},{'remote_type',87,[{'atom',87,'gb_trees'}|[{'atom',87,'tree'}|[[]]]]}}|[{'typed_record_field',{'record_field',88,{'atom',88,'ret_type'}},{'type',88,'union',[{'atom',88,'undefined'}|[{'type',88,'range',[]}]]}}|[{'typed_record_field',{'record_field',89,{'atom',89,'lookup_fun'}},{'type',89,'union',[{'atom',89,'undefined'}|[{'type',89,'call_fun',[]}]]}}|[{'typed_record_field',{'record_field',90,{'atom',90,'result_action'}},{'type',90,'union',[{'atom',90,'undefined'}|[{'type',90,'final_fun',[]}]]}}]]]]]]],[]}],
		%% Line 100
		'spec' =
		    %% Line 100
		    [{{'cfg',4},[{'type',100,'fun',[{'type',100,'product',[{'type',100,'cfg',[]}|[{'type',100,'mfa',[]}|[{'type',100,'comp_options',[]}|[{'type',100,'record',[{'atom',100,'comp_servers'}]}]]]]}|[{'type',100,'cfg',[]}]]}]}],
		%% Line 110
		'spec' =
		    %% Line 110
		    [{{'concurrent_cfg',3},[{'type',110,'fun',[{'type',110,'product',[{'type',110,'cfg',[]}|[{'type',110,'mfa',[]}|[{'type',110,'pid',[]}]]]}|[{'type',110,'cfg',[]}]]}]}],
		%% Line 119
		'spec' =
		    %% Line 119
		    [{{'do_analysis',2},[{'type',119,'fun',[{'type',119,'product',[{'type',119,'cfg',[]}|[{'type',119,'mfa',[]}]]}|[{'type',119,'tuple',[{'type',119,'args_fun',[]}|[{'type',119,'call_fun',[]}|[{'type',119,'final_fun',[]}]]]}]]}]}],
		%% Line 130
		'spec' =
		    %% Line 130
		    [{{'do_rewrite',5},[{'type',130,'fun',[{'type',130,'product',[{'type',130,'cfg',[]}|[{'type',130,'mfa',[]}|[{'type',130,'args_fun',[]}|[{'type',130,'call_fun',[]}|[{'type',130,'final_fun',[]}]]]]]}|[{'type',130,'cfg',[]}]]}]}],
		%% Line 135
		'spec' =
		    %% Line 135
		    [{{'ordinary_cfg',2},[{'type',135,'fun',[{'type',135,'product',[{'type',135,'cfg',[]}|[{'type',135,'mfa',[]}]]}|[{'type',135,'cfg',[]}]]}]}],
		%% Line 141
		'spec' =
		    %% Line 141
		    [{{'common_rewrite',2},[{'type',141,'fun',[{'type',141,'product',[{'type',141,'cfg',[]}|[{'type',141,'data',[]}]]}|[{'type',141,'cfg',[]}]]}]}],
		%% Line 151
		'spec' =
		    %% Line 151
		    [{{'make_data',2},[{'type',151,'fun',[{'type',151,'product',[{'type',151,'cfg',[]}|[{'type',151,'mfa',[]}]]}|[{'type',151,'data',[]}]]}]}],
		%% Line 165
		'spec' =
		    %% Line 165
		    [{{'analyse',2},[{'type',165,'fun',[{'type',165,'product',[{'type',165,'cfg',[]}|[{'type',165,'data',[]}]]}|[{'atom',165,'ok'}]]}]}],
		%% Line 174
		'spec' =
		    %% Line 174
		    [{{'safe_analyse',2},[{'type',174,'fun',[{'type',174,'product',[{'type',174,'cfg',[]}|[{'type',174,'data',[]}]]}|[{'type',174,'record',[{'atom',174,'state'}]}]]}]}],
		%% Line 183
		'spec' =
		    %% Line 183
		    [{{'rewrite_blocks',1},[{'type',183,'fun',[{'type',183,'product',[{'type',183,'record',[{'atom',183,'state'}]}]}|[{'type',183,'record',[{'atom',183,'state'}]}]]}]}],
		%% Line 190
		'spec' =
		    %% Line 190
		    [{{'rewrite_blocks',3},[{'type',190,'fun',[{'type',190,'product',[{'type',190,'list',[{'type',190,'label',[]}]}|[{'type',190,'record',[{'atom',190,'state'}]}|[{'type',190,'list',[{'type',190,'label',[]}]}]]]}|[{'type',190,'record',[{'atom',190,'state'}]}]]}]}],
		%% Line 203
		'spec' =
		    %% Line 203
		    [{{'analyse_blocks',2},[{'type',203,'fun',[{'type',203,'product',[{'type',203,'record',[{'atom',203,'state'}]}|[{'type',203,'work_list',[]}]]}|[{'type',203,'record',[{'atom',203,'state'}]}]]}]}],
		%% Line 220
		'spec' =
		    %% Line 220
		    [{{'analyse_block',4},[{'type',220,'fun',[{'type',220,'product',[{'type',220,'label',[]}|[{'type',220,'info',[]}|[{'type',220,'record',[{'atom',220,'state'}]}|[{'type',220,'boolean',[]}]]]]}|[{'type',220,'tuple',[{'type',220,'record',[{'atom',220,'state'}]}|[{'type',220,'list',[{'type',220,'label',[]}]}]]}]]}]}],
		%% Line 231
		'spec' =
		    %% Line 231
		    [{{'analyse_BB',5},[{'type',231,'fun',[{'type',231,'product',[{'type',231,'list',[{'type',231,'icode_instr',[]}]}|[{'type',231,'info',[]}|[{'type',231,'list',[{'type',231,'icode_instr',[]}]}|[{'type',231,'boolean',[]}|[{'type',231,'call_fun',[]}]]]]]}|[{'type',232,'tuple',[{'type',232,'list',[{'type',232,'icode_instr',[]}]}|[{'type',232,'list',[{'type',232,'tuple',[{'type',232,'label',[]}|[{'type',232,'info',[]}]]}]}|[{'type',232,'range',[]}]]]}]]}]}],
		%% Line 242
		'spec' =
		    %% Line 242
		    [{{'analyse_insn',3},[{'type',242,'fun',[{'type',242,'product',[{'type',242,'icode_instr',[]}|[{'type',242,'info',[]}|[{'type',242,'call_fun',[]}]]]}|[{'type',242,'tuple',[{'type',242,'info',[]}|[{'type',242,'icode_instr',[]}]]}]]}]}],
		%% Line 257
		'spec' =
		    %% Line 257
		    [{{'handle_args',2},[{'type',257,'fun',[{'type',257,'product',[{'type',257,'icode_instr',[]}|[{'type',257,'info',[]}]]}|[{'type',257,'icode_instr',[]}]]}]}],
		%% Line 263
		'spec' =
		    %% Line 263
		    [{{'handle_args',3},[{'type',263,'fun',[{'type',263,'product',[{'type',263,'icode_instr',[]}|[{'type',263,'info',[]}|[{'type',263,'three_range_fun',[]}]]]}|[{'type',263,'icode_instr',[]}]]}]}],
		%% Line 273
		'spec' =
		    %% Line 273
		    [{{'join_info',3},[{'type',273,'fun',[{'type',273,'product',[{'type',273,'ann',[]}|[{'type',273,'range',[]}|[{'type',273,'three_range_fun',[]}]]]}|[{'type',273,'ann',[]}]]}]}],
		%% Line 283
		'spec' =
		    %% Line 283
		    [{{'join_three',3},[{'type',283,'fun',[{'type',283,'product',[{'type',283,'range',[]}|[{'type',283,'range',[]}|[{'type',283,'range',[]}]]]}|[{'type',283,'range',[]}]]}]}],
		%% Line 288
		'spec' =
		    %% Line 288
		    [{{'update_info',2},[{'type',288,'fun',[{'type',288,'product',[{'type',288,'variable',[]}|[{'type',288,'range',[]}]]}|[{'type',288,'annotated_variable',[]}]]}]}],
		%% Line 293
		'spec' =
		    %% Line 293
		    [{{'update_info',3},[{'type',293,'fun',[{'type',293,'product',[{'type',293,'variable',[]}|[{'type',293,'range',[]}|[{'type',293,'three_range_fun',[]}]]]}|[{'type',293,'annotated_variable',[]}]]}]}],
		%% Line 304
		'spec' =
		    %% Line 304
		    [{{'update_info1',3},[{'type',304,'fun',[{'type',304,'product',[{'type',304,'any',[]}|[{'type',304,'range',[]}|[{'type',304,'three_range_fun',[]}]]]}|[{'type',304,'range_anno',[]}]]}]}],
		%% Line 319
		'spec' =
		    %% Line 319
		    [{{'type_to_ann',1},[{'type',319,'fun',[{'type',319,'product',[{'remote_type',319,[{'atom',319,'erl_types'}|[{'atom',319,'erl_type'}|[[]]]]}]}|[{'type',319,'ann',[]}]]}]}],
		%% Line 324
		'spec' =
		    %% Line 324
		    [{{'make_range_anno',1},[{'type',324,'fun',[{'type',324,'product',[{'type',324,'ann',[]}]}|[{'type',324,'range_anno',[]}]]}]}],
		%% Line 329
		'spec' =
		    %% Line 329
		    [{{'update_three',3},[{'type',329,'fun',[{'type',329,'product',[{'type',329,'range',[]}|[{'type',329,'range',[]}|[{'type',329,'range',[]}]]]}|[{'type',329,'range',[]}]]}]}],
		%% Line 334
		'spec' =
		    %% Line 334
		    [{{'safe_widen',3},[{'type',334,'fun',[{'type',334,'product',[{'type',334,'range',[]}|[{'type',334,'range',[]}|[{'type',334,'range',[]}]]]}|[{'type',334,'range',[]}]]}]}],
		%% Line 366
		'spec' =
		    %% Line 366
		    [{{'widen',3},[{'type',366,'fun',[{'type',366,'product',[{'type',366,'range',[]}|[{'type',366,'range',[]}|[{'type',366,'range',[]}]]]}|[{'type',366,'range',[]}]]}]}],
		%% Line 398
		'spec' =
		    %% Line 398
		    [{{'analyse_call',2},[{'type',398,'fun',[{'type',398,'product',[{'type',398,'record',[{'atom',398,'icode_call'}]}|[{'type',398,'call_fun',[]}]]}|[{'type',398,'record',[{'atom',398,'icode_call'}]}]]}]}],
		%% Line 413
		'spec' =
		    %% Line 413
		    [{{'analyse_move',1},[{'type',413,'fun',[{'type',413,'product',[{'type',413,'record',[{'atom',413,'icode_move'}]}]}|[{'type',413,'record',[{'atom',413,'icode_move'}]}]]}]}],
		%% Line 422
		'spec' =
		    %% Line 422
		    [{{'analyse_begin_handler',1},[{'type',422,'fun',[{'type',422,'product',[{'type',422,'record',[{'atom',422,'icode_begin_handler'}]}]}|[{'type',422,'record',[{'atom',422,'icode_begin_handler'}]}]]}]}],
		%% Line 430
		'spec' =
		    %% Line 430
		    [{{'analyse_phi',1},[{'type',430,'fun',[{'type',430,'product',[{'type',430,'record',[{'atom',430,'icode_phi'}]}]}|[{'type',430,'record',[{'atom',430,'icode_phi'}]}]]}]}],
		%% Line 441
		'spec' =
		    %% Line 441
		    [{{'analyse_last_insn',4},[{'type',441,'fun',[{'type',441,'product',[{'type',441,'icode_instr',[]}|[{'type',441,'info',[]}|[{'type',441,'boolean',[]}|[{'type',441,'call_fun',[]}]]]]}|[{'type',442,'last_instr_return',[]}]]}]}],
		%% Line 463
		'spec' =
		    %% Line 463
		    [{{'analyse_return',2},[{'type',463,'fun',[{'type',463,'product',[{'type',463,'record',[{'atom',463,'icode_return'}]}|[{'type',463,'info',[]}]]}|[{'type',463,'last_instr_return',[]}]]}]}],
		%% Line 469
		'spec' =
		    %% Line 469
		    [{{'analyse_enter',3},[{'type',469,'fun',[{'type',469,'product',[{'type',469,'record',[{'atom',469,'icode_enter'}]}|[{'type',469,'info',[]}|[{'type',469,'call_fun',[]}]]]}|[{'type',469,'last_instr_return',[]}]]}]}],
		%% Line 478
		'spec' =
		    %% Line 478
		    [{{'analyse_switch_val',3},[{'type',478,'fun',[{'type',478,'product',[{'type',478,'record',[{'atom',478,'icode_switch_val'}]}|[{'type',478,'info',[]}|[{'type',478,'boolean',[]}]]]}|[{'type',478,'instr_split_info',[]}]]}]}],
		%% Line 499
		'spec' =
		    %% Line 499
		    [{{'update_infos',3},[{'type',499,'fun',[{'type',499,'product',[{'type',499,'argument',[]}|[{'type',499,'info',[]}|[{'type',499,'list',[{'type',499,'tuple',[{'type',499,'range',[]}|[{'type',499,'label',[]}]]}]}]]]}|[{'type',499,'list',[{'type',499,'tuple',[{'type',499,'label',[]}|[{'type',499,'info',[]}]]}]}]]}]}],
		%% Line 505
		'spec' =
		    %% Line 505
		    [{{'get_range_label_list',3},[{'type',505,'fun',[{'type',505,'product',[{'type',505,'list',[{'type',505,'tuple',[{'type',505,'argument',[]}|[{'type',505,'label',[]}]]}]}|[{'type',505,'range',[]}|[{'type',505,'list',[{'type',505,'tuple',[{'type',505,'range',[]}|[{'type',505,'label',[]}]]}]}]]]}|[{'type',506,'tuple',[{'type',506,'range',[]}|[{'type',506,'list',[{'type',506,'tuple',[{'type',506,'range',[]}|[{'type',506,'label',[]}]]}]}]]}]]}]}],
		%% Line 521
		'spec' =
		    %% Line 521
		    [{{'update_switch',3},[{'type',521,'fun',[{'type',521,'product',[{'type',521,'record',[{'atom',521,'icode_switch_val'}]}|[{'type',521,'list',[{'type',521,'tuple',[{'type',521,'range',[]}|[{'type',521,'label',[]}]]}]}|[{'type',521,'boolean',[]}]]]}|[{'type',522,'record',[{'atom',522,'icode_switch_val'}]}]]}]}],
		%% Line 536
		'spec' =
		    %% Line 536
		    [{{'label_range_list_to_cases',2},[{'type',536,'fun',[{'type',536,'product',[{'type',536,'list',[{'type',536,'tuple',[{'type',536,'range',[]}|[{'type',536,'label',[]}]]}]}|[{'type',536,'list',[{'type',536,'tuple',[{'type',536,'record',[{'atom',536,'icode_const'}]}|[{'type',536,'label',[]}]]}]}]]}|[{'type',537,'union',[{'atom',537,'no_update'}|[{'type',537,'list',[{'type',537,'tuple',[{'type',537,'record',[{'atom',537,'icode_const'}]}|[{'type',537,'label',[]}]]}]}]]}]]}]}],
		%% Line 547
		'spec' =
		    %% Line 547
		    [{{'analyse_switch_tuple_arity',2},[{'type',547,'fun',[{'type',547,'product',[{'type',547,'record',[{'atom',547,'icode_switch_tuple_arity'}]}|[{'type',547,'info',[]}]]}|[{'type',548,'tuple',[{'type',548,'record',[{'atom',548,'icode_switch_tuple_arity'}]}|[{'type',548,'list',[{'type',548,'tuple',[{'type',548,'label',[]}|[{'type',548,'info',[]}]]}]}]]}]]}]}],
		%% Line 559
		'spec' =
		    %% Line 559
		    [{{'analyse_goto',2},[{'type',559,'fun',[{'type',559,'product',[{'type',559,'record',[{'atom',559,'icode_goto'}]}|[{'type',559,'info',[]}]]}|[{'type',559,'tuple',[{'type',559,'record',[{'atom',559,'icode_goto'}]}|[{'type',559,'nonempty_list',[{'type',559,'tuple',[{'type',559,'label',[]}|[{'type',559,'info',[]}]]}]}]]}]]}]}],
		%% Line 565
		'spec' =
		    %% Line 565
		    [{{'analyse_fail',2},[{'type',565,'fun',[{'type',565,'product',[{'type',565,'record',[{'atom',565,'icode_fail'}]}|[{'type',565,'info',[]}]]}|[{'type',565,'tuple',[{'type',565,'record',[{'atom',565,'icode_fail'}]}|[{'type',565,'list',[{'type',565,'tuple',[{'type',565,'label',[]}|[{'type',565,'info',[]}]]}]}]]}]]}]}],
		%% Line 573
		'spec' =
		    %% Line 573
		    [{{'analyse_begin_try',2},[{'type',573,'fun',[{'type',573,'product',[{'type',573,'record',[{'atom',573,'icode_begin_try'}]}|[{'type',573,'info',[]}]]}|[{'type',574,'tuple',[{'type',574,'record',[{'atom',574,'icode_begin_try'}]}|[{'type',574,'nonempty_list',[{'type',574,'tuple',[{'type',574,'label',[]}|[{'type',574,'info',[]}]]}]}]]}]]}]}],
		%% Line 581
		'spec' =
		    %% Line 581
		    [{{'analyse_last_call',3},[{'type',581,'fun',[{'type',581,'product',[{'type',581,'record',[{'atom',581,'icode_call'}]}|[{'type',581,'info',[]}|[{'type',581,'call_fun',[]}]]]}|[{'type',582,'tuple',[{'type',582,'record',[{'atom',582,'icode_call'}]}|[{'type',582,'nonempty_list',[{'type',582,'tuple',[{'type',582,'label',[]}|[{'type',582,'info',[]}]]}]}]]}]]}]}],
		%% Line 596
		'spec' =
		    %% Line 596
		    [{{'analyse_if',3},[{'type',596,'fun',[{'type',596,'product',[{'type',596,'record',[{'atom',596,'icode_if'}]}|[{'type',596,'info',[]}|[{'type',596,'boolean',[]}]]]}|[{'type',597,'tuple',[{'type',597,'union',[{'type',597,'record',[{'atom',597,'icode_goto'}]}|[{'type',597,'record',[{'atom',597,'icode_if'}]}]]}|[{'type',597,'list',[{'type',597,'tuple',[{'type',597,'label',[]}|[{'type',597,'info',[]}]]}]}]]}]]}]}],
		%% Line 609
		'spec' =
		    %% Line 609
		    [{{'analyse_sane_if',5},[{'type',609,'fun',[{'type',609,'product',[{'type',609,'record',[{'atom',609,'icode_if'}]}|[{'type',609,'info',[]}|[{'type',609,'nonempty_list',[{'type',609,'argument',[]}]}|[{'type',610,'nonempty_list',[{'type',610,'range',[]}]}|[{'type',610,'boolean',[]}]]]]]}|[{'type',611,'tuple',[{'type',611,'union',[{'type',611,'record',[{'atom',611,'icode_goto'}]}|[{'type',611,'record',[{'atom',611,'icode_if'}]}]]}|[{'type',611,'list',[{'type',611,'tuple',[{'type',611,'label',[]}|[{'type',611,'info',[]}]]}]}]]}]]}]}],
		%% Line 680
		'spec' =
		    %% Line 680
		    [{{'normalize_name',1},[{'type',680,'fun',[{'type',680,'product',[{'type',680,'atom',[]}]}|[{'type',680,'atom',[]}]]}]}],
		%% Line 693
		'spec' =
		    %% Line 693
		    [{{'range_equality_propagation',2},[{'type',693,'fun',[{'type',693,'product',[{'type',693,'range',[]}|[{'type',693,'range',[]}]]}|[{'type',694,'tuple',[{'type',694,'range',[]}|[{'type',694,'range',[]}|[{'type',694,'range',[]}|[{'type',694,'range',[]}]]]]}]]}]}],
		%% Line 717
		'spec' =
		    %% Line 717
		    [{{'range_inequality_propagation',2},[{'type',717,'fun',[{'type',717,'product',[{'type',717,'range',[]}|[{'type',717,'range',[]}]]}|[{'type',718,'tuple',[{'type',718,'range',[]}|[{'type',718,'range',[]}|[{'type',718,'range',[]}|[{'type',718,'range',[]}]]]]}]]}]}],
		%% Line 774
		'spec' =
		    %% Line 774
		    [{{'analyse_type',3},[{'type',774,'fun',[{'type',774,'product',[{'type',774,'record',[{'atom',774,'icode_type'}]}|[{'type',774,'info',[]}|[{'type',774,'boolean',[]}]]]}|[{'type',775,'tuple',[{'type',775,'union',[{'type',775,'record',[{'atom',775,'icode_goto'}]}|[{'type',775,'record',[{'atom',775,'icode_type'}]}]]}|[{'type',775,'list',[{'type',775,'tuple',[{'type',775,'label',[]}|[{'type',775,'info',[]}]]}]}]]}]]}]}],
		%% Line 823
		'spec' =
		    %% Line 823
		    [{{'compare_with_integer',2},[{'type',823,'fun',[{'type',823,'product',[{'type',823,'integer',[]}|[{'type',823,'range',[]}]]}|[{'type',823,'tuple',[{'type',823,'range',[]}|[{'type',823,'range',[]}]]}]]}]}],
		%% Line 850
		'spec' =
		    %% Line 850
		    [{{'pp_ann',1},[{'type',850,'fun',[{'type',850,'product',[{'type',850,'union',[{'type',850,'ann',[]}|[{'remote_type',850,[{'atom',850,'erl_types'}|[{'atom',850,'erl_type'}|[[]]]]}]]}]}|[{'type',850,'string',[]}]]}]}],
		%% Line 861
		'spec' =
		    %% Line 861
		    [{{'pp_range',1},[{'type',861,'fun',[{'type',861,'product',[{'type',861,'range_rep',[]}]}|[{'type',861,'nonempty_string',[]}]]}]}],
		%% Line 868
		'spec' =
		    %% Line 868
		    [{{'val_to_string',1},[{'type',868,'fun',[{'type',868,'product',[{'type',868,'union',[{'atom',868,'pos_inf'}|[{'atom',868,'neg_inf'}|[{'type',868,'integer',[]}]]]}]}|[{'type',868,'string',[]}]]}]}],
		%% Line 874
		'spec' =
		    %% Line 874
		    [{{'range_from_type',1},[{'type',874,'fun',[{'type',874,'product',[{'remote_type',874,[{'atom',874,'erl_types'}|[{'atom',874,'erl_type'}|[[]]]]}]}|[{'type',874,'list',[{'type',874,'range',[]}]}]]}]}],
		%% Line 879
		'spec' =
		    %% Line 879
		    [{{'range_from_simple_type',1},[{'type',879,'fun',[{'type',879,'product',[{'remote_type',879,[{'atom',879,'erl_types'}|[{'atom',879,'erl_type'}|[[]]]]}]}|[{'type',879,'range',[]}]]}]}],
		%% Line 894
		'spec' =
		    %% Line 894
		    [{{'range_init',2},[{'type',894,'fun',[{'type',894,'product',[{'type',894,'range_rep',[]}|[{'type',894,'boolean',[]}]]}|[{'type',894,'range',[]}]]}]}],
		%% Line 906
		'spec' =
		    %% Line 906
		    [{{'range',1},[{'type',906,'fun',[{'type',906,'product',[{'type',906,'range',[]}]}|[{'type',906,'range_rep',[]}]]}]}],
		%% Line 910
		'spec' =
		    %% Line 910
		    [{{'other',1},[{'type',910,'fun',[{'type',910,'product',[{'type',910,'range',[]}]}|[{'type',910,'boolean',[]}]]}]}],
		%% Line 914
		'spec' =
		    %% Line 914
		    [{{'set_other',2},[{'type',914,'fun',[{'type',914,'product',[{'type',914,'range',[]}|[{'type',914,'boolean',[]}]]}|[{'type',914,'range',[]}]]}]}],
		%% Line 918
		'spec' =
		    %% Line 918
		    [{{'range__min',1},[{'type',918,'fun',[{'type',918,'product',[{'type',918,'range',[]}]}|[{'type',918,'union',[{'atom',918,'empty'}|[{'atom',918,'neg_inf'}|[{'type',918,'integer',[]}]]]}]]}]}],
		%% Line 923
		'spec' =
		    %% Line 923
		    [{{'range__max',1},[{'type',923,'fun',[{'type',923,'product',[{'type',923,'range',[]}]}|[{'type',923,'union',[{'atom',923,'empty'}|[{'atom',923,'pos_inf'}|[{'type',923,'integer',[]}]]]}]]}]}],
		%% Line 928
		'spec' =
		    %% Line 928
		    [{{'range__is_none',1},[{'type',928,'fun',[{'type',928,'product',[{'type',928,'range',[]}]}|[{'type',928,'boolean',[]}]]}]}],
		%% Line 933
		'spec' =
		    %% Line 933
		    [{{'range__is_empty',1},[{'type',933,'fun',[{'type',933,'product',[{'type',933,'range',[]}]}|[{'type',933,'boolean',[]}]]}]}],
		%% Line 938
		'spec' =
		    %% Line 938
		    [{{'remove_point_types',2},[{'type',938,'fun',[{'type',938,'product',[{'type',938,'range',[]}|[{'type',938,'list',[{'type',938,'range',[]}]}]]}|[{'type',938,'range',[]}]]}]}],
		%% Line 946
		'spec' =
		    %% Line 946
		    [{{'range__remove_constant',2},[{'type',946,'fun',[{'type',946,'product',[{'type',946,'range',[]}|[{'type',946,'range',[]}]]}|[{'type',946,'range',[]}]]}]}],
		%% Line 959
		'spec' =
		    %% Line 959
		    [{{'any_type',0},[{'type',959,'fun',[{'type',959,'product',[]}|[{'type',959,'range',[]}]]}]}],
		%% Line 964
		'spec' =
		    %% Line 964
		    [{{'any_range',0},[{'type',964,'fun',[{'type',964,'product',[]}|[{'type',964,'range',[]}]]}]}],
		%% Line 969
		'spec' =
		    %% Line 969
		    [{{'none_range',0},[{'type',969,'fun',[{'type',969,'product',[]}|[{'type',969,'range',[]}]]}]}],
		%% Line 974
		'spec' =
		    %% Line 974
		    [{{'none_type',0},[{'type',974,'fun',[{'type',974,'product',[]}|[{'type',974,'range',[]}]]}]}],
		%% Line 979
		'spec' =
		    %% Line 979
		    [{{'any_r',0},[{'type',979,'fun',[{'type',979,'product',[]}|[{'type',979,'tuple',[{'atom',979,'neg_inf'}|[{'atom',979,'pos_inf'}]]}]]}]}],
		%% Line 983
		'spec' =
		    %% Line 983
		    [{{'get_range_from_args',1},[{'type',983,'fun',[{'type',983,'product',[{'type',983,'list',[{'type',983,'argument',[]}]}]}|[{'type',983,'list',[{'type',983,'range',[]}]}]]}]}],
		%% Line 988
		'spec' =
		    %% Line 988
		    [{{'get_range_from_arg',1},[{'type',988,'fun',[{'type',988,'product',[{'type',988,'argument',[]}]}|[{'type',988,'range',[]}]]}]}],
		%% Line 1019
		'spec' =
		    %% Line 1019
		    [{{'inf',2},[{'type',1019,'fun',[{'type',1019,'product',[{'type',1019,'range',[]}|[{'type',1019,'range',[]}]]}|[{'type',1019,'range',[]}]]}]}],
		%% Line 1024
		'spec' =
		    %% Line 1024
		    [{{'range_inf',2},[{'type',1024,'fun',[{'type',1024,'product',[{'type',1024,'range_rep',[]}|[{'type',1024,'range_rep',[]}]]}|[{'type',1024,'range_rep',[]}]]}]}],
		%% Line 1038
		'spec' =
		    %% Line 1038
		    [{{'other_inf',2},[{'type',1038,'fun',[{'type',1038,'product',[{'type',1038,'boolean',[]}|[{'type',1038,'boolean',[]}]]}|[{'type',1038,'boolean',[]}]]}]}],
		%% Line 1042
		'spec' =
		    %% Line 1042
		    [{{'sup',1},[{'type',1042,'fun',[{'type',1042,'product',[{'type',1042,'nonempty_list',[{'type',1042,'range',[]}]}]}|[{'type',1042,'range',[]}]]}]}],
		%% Line 1049
		'spec' =
		    %% Line 1049
		    [{{'sup',2},[{'type',1049,'fun',[{'type',1049,'product',[{'type',1049,'range',[]}|[{'type',1049,'range',[]}]]}|[{'type',1049,'range',[]}]]}]}],
		%% Line 1054
		'spec' =
		    %% Line 1054
		    [{{'range_sup',2},[{'type',1054,'fun',[{'type',1054,'product',[{'type',1054,'range_rep',[]}|[{'type',1054,'range_rep',[]}]]}|[{'type',1054,'range_rep',[]}]]}]}],
		%% Line 1063
		'spec' =
		    %% Line 1063
		    [{{'other_sup',2},[{'type',1063,'fun',[{'type',1063,'product',[{'type',1063,'boolean',[]}|[{'type',1063,'boolean',[]}]]}|[{'type',1063,'boolean',[]}]]}]}],
		%% Line 1069
		'spec' =
		    %% Line 1069
		    [{{'analyse_call_or_enter_fun',4},[{'type',1069,'fun',[{'type',1069,'product',[{'type',1069,'fun_name',[]}|[{'type',1069,'list',[{'type',1069,'argument',[]}]}|[{'type',1070,'icode_call_type',[]}|[{'type',1070,'call_fun',[]}]]]]}|[{'type',1070,'list',[{'type',1070,'range',[]}]}]]}]}],
		%% Line 1118
		'type' =
		    %% Line 1118
		    [{'bin_operation',{'type',1118,'fun',[{'type',1118,'product',[{'type',1118,'range',[]}|[{'type',1118,'range',[]}]]}|[{'type',1118,'range',[]}]]},[]}],
		%% Line 1119
		'type' =
		    %% Line 1119
		    [{'unary_operation',{'type',1119,'fun',[{'type',1119,'product',[{'type',1119,'range',[]}]}|[{'type',1119,'range',[]}]]},[]}],
		%% Line 1121
		'spec' =
		    %% Line 1121
		    [{{'basic_type',1},[{'type',1121,'fun',[{'type',1121,'product',[{'type',1121,'fun_name',[]}]}|[{'type',1121,'union',[{'atom',1121,'not_int'}|[{'atom',1121,'not_analysed'}|[{'type',1122,'tuple',[{'atom',1122,'bin'}|[{'type',1122,'bin_operation',[]}]]}|[{'type',1123,'tuple',[{'atom',1123,'unary'}|[{'type',1123,'unary_operation',[]}]]}|[{'type',1124,'tuple',[{'atom',1124,'fcall'}|[{'type',1124,'mfa',[]}]]}|[{'type',1124,'tuple',[{'atom',1124,'hipe_bs_primop'}|[{'var',1124,'_'}]]}]]]]]]}]]}]}],
		%% Line 1199
		'spec' =
		    %% Line 1199
		    [{{'analyse_bs_get_integer',3},[{'type',1199,'fun',[{'type',1199,'product',[{'type',1199,'integer',[]}|[{'type',1199,'integer',[]}|[{'type',1199,'boolean',[]}]]]}|[{'type',1199,'range_tuple',[]}]]}]}],
		%% Line 1221
		'spec' =
		    %% Line 1221
		    [{{'range_add',2},[{'type',1221,'fun',[{'type',1221,'product',[{'type',1221,'range',[]}|[{'type',1221,'range',[]}]]}|[{'type',1221,'range',[]}]]}]}],
		%% Line 1229
		'spec' =
		    %% Line 1229
		    [{{'range_sub',2},[{'type',1229,'fun',[{'type',1229,'product',[{'type',1229,'range',[]}|[{'type',1229,'range',[]}]]}|[{'type',1229,'range',[]}]]}]}],
		%% Line 1241
		'spec' =
		    %% Line 1241
		    [{{'range_mult',2},[{'type',1241,'fun',[{'type',1241,'product',[{'type',1241,'range',[]}|[{'type',1241,'range',[]}]]}|[{'type',1241,'range',[]}]]}]}],
		%% Line 1281
		'spec' =
		    %% Line 1281
		    [{{'extreme_divisors',1},[{'type',1281,'fun',[{'type',1281,'product',[{'type',1281,'range',[]}]}|[{'type',1281,'range_tuple',[]}]]}]}],
		%% Line 1296
		'spec' =
		    %% Line 1296
		    [{{'range_div',2},[{'type',1296,'fun',[{'type',1296,'product',[{'type',1296,'range',[]}|[{'type',1296,'range',[]}]]}|[{'type',1296,'range',[]}]]}]}],
		%% Line 1313
		'spec' =
		    %% Line 1313
		    [{{'range_rem',2},[{'type',1313,'fun',[{'type',1313,'product',[{'type',1313,'range',[]}|[{'type',1313,'range',[]}]]}|[{'type',1313,'range',[]}]]}]}],
		%% Line 1339
		'spec' =
		    %% Line 1339
		    [{{'range_bsr',2},[{'type',1339,'fun',[{'type',1339,'product',[{'type',1339,'range',[]}|[{'type',1339,'range',[]}]]}|[{'type',1339,'range',[]}]]}]}],
		%% Line 1347
		'spec' =
		    %% Line 1347
		    [{{'range_bsl',2},[{'type',1347,'fun',[{'type',1347,'product',[{'type',1347,'range',[]}|[{'type',1347,'range',[]}]]}|[{'type',1347,'range',[]}]]}]}],
		%% Line 1366
		'spec' =
		    %% Line 1366
		    [{{'range_bnot',1},[{'type',1366,'fun',[{'type',1366,'product',[{'type',1366,'range',[]}]}|[{'type',1366,'range',[]}]]}]}],
		%% Line 1372
		'spec' =
		    %% Line 1372
		    [{{'width',1},[{'type',1372,'fun',[{'type',1372,'product',[{'type',1372,'union',[{'type',1372,'range_rep',[]}|[{'type',1372,'inf_integer',[]}]]}]}|[{'type',1372,'union',[{'atom',1372,'pos_inf'}|[{'type',1372,'non_neg_integer',[]}]]}]]}]}],
		%% Line 1380
		'spec' =
		    %% Line 1380
		    [{{'poswidth',2},[{'type',1380,'fun',[{'type',1380,'product',[{'type',1380,'non_neg_integer',[]}|[{'type',1380,'non_neg_integer',[]}]]}|[{'type',1380,'non_neg_integer',[]}]]}]}],
		%% Line 1388
		'spec' =
		    %% Line 1388
		    [{{'negwidth',2},[{'type',1388,'fun',[{'type',1388,'product',[{'type',1388,'neg_integer',[]}|[{'type',1388,'non_neg_integer',[]}]]}|[{'type',1388,'non_neg_integer',[]}]]}]}],
		%% Line 1396
		'spec' =
		    %% Line 1396
		    [{{'range_band',2},[{'type',1396,'fun',[{'type',1396,'product',[{'type',1396,'range',[]}|[{'type',1396,'range',[]}]]}|[{'type',1396,'range',[]}]]}]}],
		%% Line 1430
		'spec' =
		    %% Line 1430
		    [{{'range_bor',2},[{'type',1430,'fun',[{'type',1430,'product',[{'type',1430,'range',[]}|[{'type',1430,'range',[]}]]}|[{'type',1430,'range',[]}]]}]}],
		%% Line 1464
		'spec' =
		    %% Line 1464
		    [{{'classify_range',1},[{'type',1464,'fun',[{'type',1464,'product',[{'type',1464,'range',[]}]}|[{'type',1464,'union',[{'atom',1464,'minus_minus'}|[{'atom',1464,'minus_plus'}|[{'atom',1464,'plus_plus'}]]]}]]}]}],
		%% Line 1477
		'spec' =
		    %% Line 1477
		    [{{'classify_int_range',2},[{'type',1477,'fun',[{'type',1477,'product',[{'type',1477,'integer',[]}|[{'type',1477,'integer',[]}]]}|[{'type',1478,'union',[{'atom',1478,'minus_minus'}|[{'atom',1478,'minus_plus'}|[{'atom',1478,'plus_plus'}]]]}]]}]}],
		%% Line 1487
		'spec' =
		    %% Line 1487
		    [{{'range_bxor',2},[{'type',1487,'fun',[{'type',1487,'product',[{'type',1487,'range',[]}|[{'type',1487,'range',[]}]]}|[{'type',1487,'range',[]}]]}]}],
		%% Line 1534
		'spec' =
		    %% Line 1534
		    [{{'inf_max',1},[{'type',1534,'fun',[{'type',1534,'product',[{'type',1534,'nonempty_list',[{'type',1534,'inf_integer',[]}]}]}|[{'type',1534,'inf_integer',[]}]]}]}],
		%% Line 1544
		'spec' =
		    %% Line 1544
		    [{{'inf_min',1},[{'type',1544,'fun',[{'type',1544,'product',[{'type',1544,'nonempty_list',[{'type',1544,'inf_integer',[]}]}]}|[{'type',1544,'inf_integer',[]}]]}]}],
		%% Line 1554
		'spec' =
		    %% Line 1554
		    [{{'inf_abs',1},[{'type',1554,'fun',[{'type',1554,'product',[{'type',1554,'inf_integer',[]}]}|[{'type',1554,'union',[{'atom',1554,'pos_inf'}|[{'type',1554,'integer',[]}]]}]]}]}],
		%% Line 1561
		'spec' =
		    %% Line 1561
		    [{{'inf_add',2},[{'type',1561,'fun',[{'type',1561,'product',[{'type',1561,'inf_integer',[]}|[{'type',1561,'inf_integer',[]}]]}|[{'type',1561,'inf_integer',[]}]]}]}],
		%% Line 1570
		'spec' =
		    %% Line 1570
		    [{{'inf_inv',1},[{'type',1570,'fun',[{'type',1570,'product',[{'type',1570,'inf_integer',[]}]}|[{'type',1570,'inf_integer',[]}]]}]}],
		%% Line 1576
		'spec' =
		    %% Line 1576
		    [{{'inf_geq',2},[{'type',1576,'fun',[{'type',1576,'product',[{'type',1576,'inf_integer',[]}|[{'type',1576,'inf_integer',[]}]]}|[{'type',1576,'boolean',[]}]]}]}],
		%% Line 1584
		'spec' =
		    %% Line 1584
		    [{{'inf_greater_zero',1},[{'type',1584,'fun',[{'type',1584,'product',[{'type',1584,'inf_integer',[]}]}|[{'type',1584,'boolean',[]}]]}]}],
		%% Line 1591
		'spec' =
		    %% Line 1591
		    [{{'inf_div',2},[{'type',1591,'fun',[{'type',1591,'product',[{'type',1591,'inf_integer',[]}|[{'type',1591,'inf_integer',[]}]]}|[{'type',1591,'inf_integer',[]}]]}]}],
		%% Line 1620
		'spec' =
		    %% Line 1620
		    [{{'inf_mult',2},[{'type',1620,'fun',[{'type',1620,'product',[{'type',1620,'inf_integer',[]}|[{'type',1620,'inf_integer',[]}]]}|[{'type',1620,'inf_integer',[]}]]}]}],
		%% Line 1636
		'spec' =
		    %% Line 1636
		    [{{'inf_bsl',2},[{'type',1636,'fun',[{'type',1636,'product',[{'type',1636,'inf_integer',[]}|[{'type',1636,'inf_integer',[]}]]}|[{'type',1636,'inf_integer',[]}]]}]}],
		%% Line 1655
		'spec' =
		    %% Line 1655
		    [{{'state__init',2},[{'type',1655,'fun',[{'type',1655,'product',[{'type',1655,'cfg',[]}|[{'type',1655,'data',[]}]]}|[{'type',1655,'record',[{'atom',1655,'state'}]}]]}]}],
		%% Line 1678
		'spec' =
		    %% Line 1678
		    [{{'state__cfg',1},[{'type',1678,'fun',[{'type',1678,'product',[{'type',1678,'record',[{'atom',1678,'state'}]}]}|[{'type',1678,'cfg',[]}]]}]}],
		%% Line 1683
		'spec' =
		    %% Line 1683
		    [{{'state__bb',2},[{'type',1683,'fun',[{'type',1683,'product',[{'type',1683,'record',[{'atom',1683,'state'}]}|[{'type',1683,'label',[]}]]}|[{'type',1683,'bb',[]}]]}]}],
		%% Line 1690
		'spec' =
		    %% Line 1690
		    [{{'state__bb_add',3},[{'type',1690,'fun',[{'type',1690,'product',[{'type',1690,'record',[{'atom',1690,'state'}]}|[{'type',1690,'label',[]}|[{'type',1690,'bb',[]}]]]}|[{'type',1690,'record',[{'atom',1690,'state'}]}]]}]}],
		%% Line 1902
		'spec' =
		    %% Line 1902
		    [{{'replace_nones',1},[{'type',1902,'fun',[{'type',1902,'product',[{'type',1902,'list',[{'type',1902,'range',[]}]}]}|[{'type',1902,'list',[{'type',1902,'range',[]}]}]]}]}],
		%% Line 1912
		'spec' =
		    %% Line 1912
		    [{{'update__info',2},[{'type',1912,'fun',[{'type',1912,'product',[{'type',1912,'list',[{'type',1912,'range',[]}]}|[{'type',1912,'list',[{'type',1912,'range',[]}]}]]}|[{'type',1912,'tuple',[{'type',1912,'boolean',[]}|[{'type',1912,'list',[{'type',1912,'ann',[]}]}]]}]]}]}],
		%% Line 1922
		'spec' =
		    %% Line 1922
		    [{{'new__info',1},[{'type',1922,'fun',[{'type',1922,'product',[{'type',1922,'list',[{'type',1922,'range',[]}]}]}|[{'type',1922,'list',[{'type',1922,'ann',[]}]}]]}]}],
		%% Line 1926
		'spec' =
		    %% Line 1926
		    [{{'return__info',1},[{'type',1926,'fun',[{'type',1926,'product',[{'type',1926,'list',[{'type',1926,'ann',[]}]}]}|[{'type',1926,'list',[{'type',1926,'range',[]}]}]]}]}],
		%% Line 1930
		'spec' =
		    %% Line 1930
		    [{{'return_none',0},[{'type',1930,'fun',[{'type',1930,'product',[]}|[{'type',1930,'nonempty_list',[{'type',1930,'range',[]}]}]]}]}],
		%% Line 1934
		'spec' =
		    %% Line 1934
		    [{{'return_none_args',2},[{'type',1934,'fun',[{'type',1934,'product',[{'type',1934,'cfg',[]}|[{'type',1934,'mfa',[]}]]}|[{'type',1934,'list',[{'type',1934,'range',[]}]}]]}]}],
		%% Line 1943
		'spec' =
		    %% Line 1943
		    [{{'return_any_args',2},[{'type',1943,'fun',[{'type',1943,'product',[{'type',1943,'cfg',[]}|[{'type',1943,'mfa',[]}]]}|[{'type',1943,'list',[{'type',1943,'range',[]}]}]]}]}]]
'cfg'/4 =
    %% Line 102
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 103
	case call 'proplists':'get_bool'
		 ('concurrent_comp', _cor1) of
	  %% Line 104
	  <'true'> when 'true' ->
	      %% Line 105
	      ( case _cor0 of
		  ( <( {'comp_servers',_cor11,_rec0,_cor12}
		       -| ['compiler_generated'] )> when 'true' ->
			apply 'concurrent_cfg'/3
			    (_cor3, _cor2, _rec0)
		    -| ['compiler_generated'] )
		  ( <_cor13> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','comp_servers'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 106
	  <'false'> when 'true' ->
	      %% Line 107
	      apply 'ordinary_cfg'/2
		  (_cor3, _cor2)
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'concurrent_cfg'/3 =
    %% Line 112
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 113
	    call 'erlang':'self'
		()
	in  do  %% Line 113
		call 'erlang':'!'
		    (_cor0, {'ready',{_cor1,_cor3}})
		%% Line 114
		case apply 'do_analysis'/2
			 (_cor2, _cor1) of
		  <{ArgsFun,CallFun,FinalFun}> when 'true' ->
		      let <Ans> =
			  %% Line 115
			  apply 'do_rewrite'/5
			      (_cor2, _cor1, ArgsFun, CallFun, FinalFun)
		      in  do  %% Line 116
			      call 'erlang':'!'
				  (_cor0, {'done_rewrite',_cor1})
			      %% Line 117
			      Ans
		  ( <_cor4> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor4})
		    -| ['compiler_generated'] )
		end
'do_analysis'/2 =
    %% Line 121
    fun (_cor1,_cor0) ->
	%% Line 122
	receive
	  %% Line 123
	  <{'analyse',{ArgsFun,CallFun,FinalFun}}> when 'true' ->
	      do  %% Line 124
		  apply 'analyse'/2
		      (_cor1, {_cor0,ArgsFun,CallFun,FinalFun})
		  %% Line 125
		  apply 'do_analysis'/2
		      (_cor1, _cor0)
	  %% Line 126
	  <{'done',T = {_X_NewArgsFun,_X_NewCallFun,_X_NewFinalFun}}> when 'true' ->
	      %% Line 127
	      T
	after 'infinity' ->
	  'true'
'do_rewrite'/5 =
    %% Line 132
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 133
	apply 'common_rewrite'/2
	    (_cor4, {_cor3,_cor2,_cor1,_cor0})
'ordinary_cfg'/2 =
    %% Line 137
    fun (_cor1,_cor0) ->
	let <Data> =
	    %% Line 138
	    apply 'make_data'/2
		(_cor1, _cor0)
	in  %% Line 139
	    apply 'common_rewrite'/2
		(_cor1, Data)
'common_rewrite'/2 =
    %% Line 143
    fun (_cor1,_cor0) ->
	let <State> =
	    %% Line 144
	    apply 'safe_analyse'/2
		(_cor1, _cor0)
	in  let <State2> =
		%% Line 145
		apply 'rewrite_blocks'/1
		    (State)
	    in  let <Cfg1> =
		    %% Line 146
		    apply 'state__cfg'/1
			(State2)
		in  let <Cfg2> =
			%% Line 147
			call 'hipe_icode_cfg':'remove_unreachable_code'
			    (Cfg1)
		    in  let <Cfg3> =
			    %% Line 148
			    apply 'convert_cfg_to_types'/1
				(Cfg2)
			in  %% Line 149
			    call 'hipe_icode_type':'specialize'
				(Cfg3)
'make_data'/2 =
    %% Line 153
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Cfg,MFA = {_X_M,_X_F,A}> when 'true' ->
	      let <_cor4> =
		  %% Line 155
		  case call 'hipe_icode_cfg':'is_closure'
			   (Cfg) of
		    %% Line 156
		    <'true'> when 'true' ->
			let <_cor2> =
			    call 'hipe_icode_cfg':'closure_arity'
				(Cfg)
			in  call 'erlang':'+'
				(_cor2, 1)
		    %% Line 157
		    <'false'> when 'true' ->
			A
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor6> =
		      %% Line 159
		      apply 'any_type'/0
			  ()
		  in  let <Args> =
			  %% Line 159
			  call 'lists':'duplicate'
			      (_cor4, _cor6)
		      in  let <ArgsFun> =
			      %% Line 160
			      ( fun (_cor9,_cor8) ->
				    Args
				-| [{'id',{0,0,'-make_data/2-fun-0-'}}] )
			  in  let <CallFun> =
				  %% Line 161
				  ( fun (_cor14,_cor13) ->
					apply 'any_type'/0
					    ()
				    -| [{'id',{0,0,'-make_data/2-fun-1-'}}] )
			      in  let <FinalFun> =
				      %% Line 162
				      ( fun (_cor19,_cor18) ->
					    'ok'
					-| [{'id',{0,0,'-make_data/2-fun-2-'}}] )
				  in  %% Line 163
				      {MFA,ArgsFun,CallFun,FinalFun}
	  ( <_cor24,_cor23> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23})
		  -| [{'function_name',{'make_data',2}}] )
	    -| ['compiler_generated'] )
	end
'analyse'/2 =
    %% Line 167
    fun (_cor1,_cor0) ->
	%% Line 168
	try
	    %% Line 169
	    case apply 'safe_analyse'/2
		     (_cor1, _cor0) of
	      <{'state',_cor9,_cor10,_cor11,_cor12,_cor13,_cor14,_cor15}> when 'true' ->
		  %% Line 170
		  'ok'
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor2})
		-| ['compiler_generated'] )
	    end
	of <_cor3> ->
	    _cor3
	catch <_cor6,_cor5,_cor4> ->
	    case <_cor6,_cor5,_cor4> of
	      %% Line 171
	      <'throw','no_input',_cor16> when 'true' ->
		  'ok'
	      ( <_cor6,_cor5,_cor4> when 'true' ->
		    primop 'raise'
			(_cor4, _cor5)
		-| ['compiler_generated'] )
	    end
'safe_analyse'/2 =
    %% Line 176
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <CFG,Data = {MFA,_cor9,_cor10,_cor11}> when 'true' ->
	      let <State> =
		  %% Line 177
		  apply 'state__init'/2
		      (CFG, Data)
	      in  let <Work> =
		      %% Line 178
		      apply 'init_work'/1
			  (State)
		  in  let <NewState> =
			  %% Line 179
			  apply 'analyse_blocks'/2
			      (State, Work)
		      in  let <_cor5> =
			      %% Line 180
			      apply 'state__result_action'/1
				  (NewState)
			  in  let <_cor6> =
				  %% Line 180
				  apply 'state__ret_type'/1
				      (NewState)
			      in  do  %% Line 180
				      apply _cor5
					  (MFA, [_cor6|[]])
				      %% Line 181
				      NewState
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'safe_analyse',2}}] )
	    -| ['compiler_generated'] )
	end
'rewrite_blocks'/1 =
    %% Line 185
    fun (_cor0) ->
	let <CFG> =
	    %% Line 186
	    apply 'state__cfg'/1
		(_cor0)
	in  let <Start> =
		%% Line 187
		call 'hipe_icode_cfg':'start_label'
		    (CFG)
	    in  %% Line 188
		apply 'rewrite_blocks'/3
		    ([Start|[]], _cor0, [Start|[]])
'rewrite_blocks'/3 =
    %% Line 192
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Next|Rest],State,Visited> when 'true' ->
	      let <Info> =
		  %% Line 193
		  apply 'state__info_in'/2
		      (State, Next)
	      in  %% Line 194
		  case apply 'analyse_block'/4
			   (Next, Info, State, 'true') of
		    <{NewState,NewLabels}> when 'true' ->
			let <NewLabelsSet> =
			    %% Line 195
			    call 'ordsets':'from_list'
				(NewLabels)
			in  let <RealNew> =
				%% Line 196
				call 'ordsets':'subtract'
				    (NewLabelsSet, Visited)
			    in  let <NewVisited> =
				    %% Line 197
				    call 'ordsets':'union'
					([RealNew|[Visited|[[Next|[]]|[]]]])
				in  let <NewWork> =
					%% Line 198
					call 'ordsets':'union'
					    ([RealNew|[Rest|[]]])
				    in  %% Line 199
					apply 'rewrite_blocks'/3
					    (NewWork, NewState, NewVisited)
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 200
	  <[],State,_cor12> when 'true' ->
	      %% Line 201
	      State
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'rewrite_blocks',3}}] )
	    -| ['compiler_generated'] )
	end
'analyse_blocks'/2 =
    %% Line 205
    fun (_cor1,_cor0) ->
	%% Line 206
	case apply 'get_work'/1
		 (_cor0) of
	  %% Line 207
	  <'fixpoint'> when 'true' ->
	      _cor1
	  %% Line 209
	  <{Label,NewWork}> when 'true' ->
	      let <Info> =
		  %% Line 210
		  apply 'state__info_in'/2
		      (_cor1, Label)
	      in  let <_cor7> =
		      %% Line 212
		      try
			  apply 'analyse_block'/4
			      (Label, Info, _cor1, 'false')
		      of <_cor3> ->
			  _cor3
		      catch <_cor6,_cor5,_cor4> ->
			  case <_cor6,_cor5,_cor4> of
			    %% Line 213
			    <'throw','none_range',_cor13> when 'true' ->
				%% Line 214
				{_cor1,[]}
			    ( <_cor6,_cor5,_cor4> when 'true' ->
				  primop 'raise'
				      (_cor4, _cor5)
			      -| ['compiler_generated'] )
			  end
		  in  %% Line 211
		      case _cor7 of
			<{NewState,NewLabels}> when 'true' ->
			    let <NewWork2> =
				%% Line 216
				apply 'add_work'/2
				    (NewWork, NewLabels)
			    in  %% Line 217
				apply 'analyse_blocks'/2
				    (NewState, NewWork2)
			( <_cor8> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor8})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor10> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor10})
	    -| ['compiler_generated'] )
	end
'analyse_block'/4 =
    %% Line 222
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <BB> =
	    %% Line 223
	    apply 'state__bb'/2
		(_cor1, _cor3)
	in  let <Code> =
		%% Line 224
		call 'hipe_bb':'code'
		    (BB)
	    in  let <_cor6> =
		    %% Line 226
		    apply 'state__lookup_fun'/1
			(_cor1)
		in  %% Line 225
		    case %% Line 226
			 apply 'analyse_BB'/5
			     (Code, _cor2, [], _cor0, _cor6) of
		      <{NewCode,InfoList,RetType}> when 'true' ->
			  let <_cor8> =
			      %% Line 227
			      call 'hipe_bb':'mk_bb'
				  (NewCode)
			  in  let <State1> =
				  %% Line 227
				  apply 'state__bb_add'/3
				      (_cor1, _cor3, _cor8)
			      in  let <State2> =
				      %% Line 228
				      apply 'state__ret_type_update'/2
					  (State1, RetType)
				  in  %% Line 229
				      apply 'state__update_info'/3
					  (State2, InfoList, _cor0)
		      ( <_cor7> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor7})
			-| ['compiler_generated'] )
		    end
'analyse_BB'/5 =
    %% Line 234
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Last|[]],Info,Code,Rewrite,LookupFun> when 'true' ->
	      %% Line 235
	      case %% Line 236
		   apply 'analyse_last_insn'/4
		       (Last, Info, Rewrite, LookupFun) of
		<{{NewI,LabelInfoList},RetType}> when 'true' ->
		    let <_cor6> =
			%% Line 237
			call 'lists':'reverse'
			    ([NewI|Code])
		    in  %% Line 237
			{_cor6,LabelInfoList,RetType}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 238
	  <[Insn|InsnList],Info,Code,Rewrite,LookupFun> when 'true' ->
	      %% Line 239
	      case apply 'analyse_insn'/3
		       (Insn, Info, LookupFun) of
		<{NewInfo,NewI}> when 'true' ->
		    %% Line 240
		    apply 'analyse_BB'/5
			(InsnList, NewInfo, [NewI|Code], Rewrite, LookupFun)
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'analyse_BB',5}}] )
	    -| ['compiler_generated'] )
	end
'analyse_insn'/3 =
    %% Line 244
    fun (_cor2,_cor1,_cor0) ->
	let <NewI> =
	    %% Line 246
	    apply 'handle_args'/2
		(_cor2, _cor1)
	in  let <_cor5> =
		%% Line 248
		case NewI of
		  %% Line 249
		  <{'icode_call',_cor11,_cor12,_cor13,_cor14,_cor15,_cor16,_cor17}> when 'true' ->
		      apply 'analyse_call'/2
			  (NewI, _cor0)
		  %% Line 250
		  <{'icode_move',_cor18,_cor19}> when 'true' ->
		      apply 'analyse_move'/1
			  (NewI)
		  %% Line 251
		  <{'icode_phi',_cor20,_cor21,_cor22}> when 'true' ->
		      apply 'analyse_phi'/1
			  (NewI)
		  %% Line 252
		  <{'icode_begin_handler',_cor23}> when 'true' ->
		      apply 'analyse_begin_handler'/1
			  (NewI)
		  %% Line 253
		  <{'icode_comment',_cor24}> when 'true' ->
		      NewI
		  ( <_cor4> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor4})
		    -| ['compiler_generated'] )
		end
	    in  let <_cor7> =
		    %% Line 255
		    apply 'enter_vals'/2
			(_cor5, _cor1)
		in  %% Line 255
		    {_cor7,_cor5}
'handle_args'/2 =
    %% Line 259
    fun (_cor1,_cor0) ->
	let <WidenFun> = 'update_three'/3
	in  %% Line 261
	    apply 'handle_args'/3
		(_cor1, _cor0, WidenFun)
'handle_args'/3 =
    %% Line 265
    fun (_cor2,_cor1,_cor0) ->
	let <Uses> =
	    %% Line 266
	    call 'hipe_icode':'uses'
		(_cor2)
	in  let <_cor9> =
		%% Line 267
		( letrec
		      'lc$^0'/1 =
			  fun (_cor6) ->
			      case _cor6 of
				<[V|_cor5]> when 'true' ->
				    let <_cor7> =
					apply 'lookup'/2
					    (V, _cor1)
				    in  let <_cor8> =
					    apply 'lc$^0'/1
						(_cor5)
					in  ( [_cor7|_cor8]
					      -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor6> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor6})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (Uses)
		  -| ['list_comprehension'] )
	    in  let <JoinFun> =
		    %% Line 269
		    ( fun (_cor12,_cor11) ->
			  apply 'update_info'/3
			      (_cor12, _cor11, _cor0)
		      -| [{'id',{0,0,'-handle_args/3-fun-0-'}}] )
		in  let <NewUses> =
			%% Line 270
			call 'lists':'zipwith'
			    (JoinFun, Uses, _cor9)
		    in  let <_cor17> =
			    %% Line 271
			    call 'lists':'zip'
				(Uses, NewUses)
			in  %% Line 271
			    call 'hipe_icode':'subst_uses'
				(_cor17, _cor2)
'join_info'/3 =
    %% Line 275
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Ann = {'ann',R1,Type,1},R2,Fun> when 'true' ->
	      let <_cor3> =
		  %% Line 276
		  apply 'range_from_simple_type'/1
		      (Type)
	      in  let <_rec1> =
		      %% Line 276
		      apply Fun
			  (R1, R2, _cor3)
		  in  %% Line 276
		      call 'erlang':'setelement'
			  (2, Ann, _rec1)
	  %% Line 277
	  <Ann = {'ann',R1,Type,C},R2,_X_Fun>
	      when call 'erlang':'<'
		    (C,
		     1) ->
	      let <_cor7> =
		  %% Line 278
		  apply 'range_from_simple_type'/1
		      (Type)
	      in  %% Line 278
		  case apply 'join_three'/3
			   (R1, R2, _cor7) of
		    %% Line 279
		    <_cor19>
			when call 'erlang':'=:='
			      (_cor19,
			       R1) ->
			Ann
		    %% Line 280
		    <NewR> when 'true' ->
			let <_rec3> =
			    call 'erlang':'+'
				(C, 1)
			in  {'ann',NewR,Type,_rec3}
		  end
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'join_info',3}}] )
	    -| ['compiler_generated'] )
	end
'join_three'/3 =
    %% Line 285
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 286
	    apply 'sup'/2
		(_cor2, _cor1)
	in  %% Line 286
	    apply 'inf'/2
		(_cor3, _cor0)
'update_info'/2 =
    %% Line 290
    fun (_cor1,_cor0) ->
	%% Line 291
	apply 'update_info'/3
	    (_cor1, _cor0, ( 'update_three'/3
			     -| [{'id',{0,0,'-update_info/2-fun-0-'}}] ))
'update_info'/3 =
    %% Line 295
    fun (_cor2,_cor1,_cor0) ->
	%% Line 296
	case call 'hipe_icode':'is_annotated_variable'
		 (_cor2) of
	  %% Line 297
	  <'true'> when 'true' ->
	      let <Ann> =
		  %% Line 298
		  call 'hipe_icode':'variable_annotation'
		      (_cor2)
	      in  let <_cor4> =
		      %% Line 299
		      apply 'update_info1'/3
			  (Ann, _cor1, _cor0)
		  in  %% Line 299
		      call 'hipe_icode':'annotate_variable'
			  (_cor2, _cor4)
	  %% Line 300
	  <'false'> when 'true' ->
	      _cor2
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'update_info1'/3 =
    %% Line 306
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'range_anno',Ann,_cor9},R2,Fun> when 'true' ->
	      let <_cor3> =
		  %% Line 307
		  apply 'update_ann'/3
		      (Ann, R2, Fun)
	      in  %% Line 307
		  apply 'make_range_anno'/1
		      (_cor3)
	  %% Line 308
	  <{'type_anno',Type,_cor10},R2,Fun> when 'true' ->
	      let <_cor4> =
		  %% Line 309
		  apply 'type_to_ann'/1
		      (Type)
	      in  let <_cor5> =
		      %% Line 309
		      apply 'update_ann'/3
			  (_cor4, R2, Fun)
		  in  %% Line 309
		      apply 'make_range_anno'/1
			  (_cor5)
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'update_info1',3}}] )
	    -| ['compiler_generated'] )
	end
'update_ann'/3 =
    %% Line 311
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Ann = {'ann',R1,Type,1},R2,Fun> when 'true' ->
	      let <_cor3> =
		  %% Line 312
		  apply 'range_from_simple_type'/1
		      (Type)
	      in  let <_rec8> =
		      %% Line 312
		      apply Fun
			  (R1, R2, _cor3)
		  in  %% Line 312
		      call 'erlang':'setelement'
			  (2, Ann, _rec8)
	  %% Line 313
	  <Ann = {'ann',R1,Type,C},R2,_X_Fun> when 'true' ->
	      let <_cor7> =
		  %% Line 314
		  apply 'range_from_simple_type'/1
		      (Type)
	      in  %% Line 314
		  case apply 'update_three'/3
			   (R1, R2, _cor7) of
		    %% Line 315
		    <_cor19>
			when call 'erlang':'=:='
			      (_cor19,
			       R1) ->
			Ann
		    %% Line 316
		    <NewR> when 'true' ->
			let <_rec10> =
			    call 'erlang':'+'
				(C, 1)
			in  {'ann',NewR,Type,_rec10}
		  end
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'update_ann',3}}] )
	    -| ['compiler_generated'] )
	end
'type_to_ann'/1 =
    %% Line 321
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 322
	    apply 'range_from_simple_type'/1
		(_cor0)
	in  let <_cor1> =
		%% Line 322
		call 'erl_types':'t_limit'
		    (_cor0, 1)
	    in  %% Line 322
		{'ann',_cor2,_cor1,1}
'make_range_anno'/1 =
    %% Line 326
    fun (_cor0) ->
	%% Line 327
	{'range_anno',_cor0,( 'pp_ann'/1
			      -| [{'id',{0,0,'-make_range_anno/1-fun-0-'}}] )}
'update_three'/3 =
    %% Line 331
    fun (_cor2,_cor1,_cor0) ->
	%% Line 332
	apply 'inf'/2
	    (_cor1, _cor0)
'safe_widen'/3 =
    %% Line 336
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'range',Old,_cor31},{'range',New,_cor32},T = {'range',Wide,_cor33}> when 'true' ->
	      let <_cor24> =
		  %% Line 338
		  case <Old,New,Wide> of
		    %% Line 339
		    <{Min,Max1},{_cor34,Max2},{_cor35,Max}>
			when call 'erlang':'=:='
			      (_cor34,
			       Min) ->
			let <_cor3> =
			    %% Line 340
			    apply 'inf_max'/1
				([Max1|[Max2|[]]])
			in  let <_cor5> =
				%% Line 340
				apply 'next_up_limit'/1
				    (_cor3)
			    in  %% Line 340
				case apply 'inf_geq'/2
					 (_cor5, Max) of
				  %% Line 341
				  <'true'> when 'true' ->
				      {Min,Max}
				  %% Line 342
				  <'false'> when 'true' ->
				      {Min,_cor5}
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor6})
				    -| ['compiler_generated'] )
				end
		    %% Line 344
		    <{Min1,Max},{Min2,_cor36},{Min,_cor37}>
			when call 'erlang':'=:='
			      (_cor36,
			       Max) ->
			let <_cor7> =
			    %% Line 345
			    apply 'inf_min'/1
				([Min1|[Min2|[]]])
			in  let <_cor9> =
				%% Line 345
				apply 'next_down_limit'/1
				    (_cor7)
			    in  %% Line 345
				case apply 'inf_geq'/2
					 (Min, _cor9) of
				  %% Line 346
				  <'true'> when 'true' ->
				      {Min,Max}
				  %% Line 347
				  <'false'> when 'true' ->
				      {_cor9,Max}
				  ( <_cor10> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor10})
				    -| ['compiler_generated'] )
				end
		    %% Line 349
		    <{Min1,Max1},{Min2,Max2},{Min,Max}> when 'true' ->
			let <_cor11> =
			    %% Line 351
			    apply 'inf_max'/1
				([Max1|[Max2|[]]])
			in  let <_cor13> =
				%% Line 351
				apply 'next_up_limit'/1
				    (_cor11)
			    in  let <_cor15> =
				    %% Line 351
				    case apply 'inf_geq'/2
					     (_cor13, Max) of
				      %% Line 352
				      <'true'> when 'true' ->
					  Max
				      %% Line 353
				      <'false'> when 'true' ->
					  _cor13
				      ( <_cor14> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor14})
					-| ['compiler_generated'] )
				    end
				in  let <_cor17> =
					%% Line 356
					apply 'inf_min'/1
					    ([Min1|[Min2|[]]])
				    in  let <_cor19> =
					    %% Line 356
					    apply 'next_down_limit'/1
						(_cor17)
					in  let <_cor21> =
						%% Line 356
						case apply 'inf_geq'/2
							 (Min, _cor19) of
						  %% Line 357
						  <'true'> when 'true' ->
						      Min
						  %% Line 358
						  <'false'> when 'true' ->
						      _cor19
						  ( <_cor20> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor20})
						    -| ['compiler_generated'] )
						end
					    in  %% Line 360
						{_cor21,_cor15}
		    %% Line 361
		    <_fol98,_fol99,_fol100> when 'true' ->
			%% Line 362
			Wide
		  end
	      in  %% Line 364
		  call 'erlang':'setelement'
		      (2, T, _cor24)
	  ( <_cor30,_cor29,_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor30,_cor29,_cor28})
		  -| [{'function_name',{'safe_widen',3}}] )
	    -| ['compiler_generated'] )
	end
'widen'/3 =
    %% Line 368
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <{'range',Old,_cor27},{'range',New,_cor28},T = {'range',Wide,_cor29}> when 'true' ->
	      let <_cor20> =
		  %% Line 370
		  case <Old,New,Wide> of
		    %% Line 371
		    <{Min,_cor30},{_cor31,Max2},{_cor32,Max}>
			when call 'erlang':'=:='
			      (_cor31,
			       Min) ->
			let <_cor4> =
			    %% Line 372
			    apply 'next_up_limit'/1
				(Max2)
			in  %% Line 372
			    case apply 'inf_geq'/2
				     (_cor4, Max) of
			      %% Line 373
			      <'true'> when 'true' ->
				  {Min,Max}
			      %% Line 374
			      <'false'> when 'true' ->
				  {Min,_cor4}
			      ( <_cor5> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor5})
				-| ['compiler_generated'] )
			    end
		    %% Line 376
		    <{_cor33,Max},{Min2,_cor34},{Min,_cor35}>
			when call 'erlang':'=:='
			      (_cor34,
			       Max) ->
			let <_cor7> =
			    %% Line 377
			    apply 'next_down_limit'/1
				(Min2)
			in  %% Line 377
			    case apply 'inf_geq'/2
				     (Min, _cor7) of
			      %% Line 378
			      <'true'> when 'true' ->
				  {Min,Max}
			      %% Line 379
			      <'false'> when 'true' ->
				  {_cor7,Max}
			      ( <_cor8> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor8})
				-| ['compiler_generated'] )
			    end
		    %% Line 381
		    <_cor36,{Min2,Max2},{Min,Max}> when 'true' ->
			let <_cor10> =
			    %% Line 383
			    apply 'next_up_limit'/1
				(Max2)
			in  let <_cor12> =
				%% Line 383
				case apply 'inf_geq'/2
					 (_cor10, Max) of
				  %% Line 384
				  <'true'> when 'true' ->
				      Max
				  %% Line 385
				  <'false'> when 'true' ->
				      _cor10
				  ( <_cor11> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor11})
				    -| ['compiler_generated'] )
				end
			    in  let <_cor15> =
				    %% Line 388
				    apply 'next_down_limit'/1
					(Min2)
				in  let <_cor17> =
					%% Line 388
					case apply 'inf_geq'/2
						 (Min, _cor15) of
					  %% Line 389
					  <'true'> when 'true' ->
					      Min
					  %% Line 390
					  <'false'> when 'true' ->
					      _cor15
					  ( <_cor16> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_cor16})
					    -| ['compiler_generated'] )
					end
				    in  %% Line 392
					{_cor17,_cor12}
		    %% Line 393
		    <_fol112,_fol113,_fol114> when 'true' ->
			%% Line 394
			Wide
		  end
	      in  %% Line 396
		  call 'erlang':'setelement'
		      (2, T, _cor20)
	  ( <_cor26,_cor25,_cor24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26,_cor25,_cor24})
		  -| [{'function_name',{'widen',3}}] )
	    -| ['compiler_generated'] )
	end
'analyse_call'/2 =
    %% Line 400
    fun (_cor1,_cor0) ->
	%% Line 401
	case call 'hipe_icode':'call_dstlist'
		 (_cor1) of
	  %% Line 402
	  <[]> when 'true' ->
	      _cor1
	  %% Line 404
	  <Dsts> when 'true' ->
	      let <Args> =
		  %% Line 405
		  call 'hipe_icode':'args'
		      (_cor1)
	      in  let <Fun> =
		      %% Line 406
		      call 'hipe_icode':'call_fun'
			  (_cor1)
		  in  let <Type> =
			  %% Line 407
			  call 'hipe_icode':'call_type'
			      (_cor1)
		      in  let <DstRanges> =
			      %% Line 408
			      apply 'analyse_call_or_enter_fun'/4
				  (Fun, Args, Type, _cor0)
			  in  let <_cor12> =
				  %% Line 409
				  ( letrec
					'lc$^0'/1 =
					    fun (_cor9) ->
						case _cor9 of
						  <[{Var,R}|_cor7]> when 'true' ->
						      let <_cor10> =
							  apply 'update_info'/2
							      (Var, R)
						      in  let <_cor11> =
							      apply 'lc$^0'/1
								  (_cor7)
							  in  ( [_cor10|_cor11]
								-| ['compiler_generated'] )
						  ( <[_cor6|_cor7]> when 'true' ->
							apply 'lc$^0'/1
							    (_cor7)
						    -| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_cor9> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor9})
							  -| [{'function_name',{'lc$^0',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  let <_cor8> =
					    call 'lists':'zip'
						(Dsts, DstRanges)
					in  apply 'lc$^0'/1
						(_cor8)
				    -| ['list_comprehension'] )
			      in  let <_cor14> =
				      %% Line 410
				      call 'lists':'zip'
					  (Dsts, _cor12)
				  in  %% Line 410
				      call 'hipe_icode':'subst_defines'
					  (_cor14, _cor1)
	end
'analyse_move'/1 =
    %% Line 415
    fun (_cor0) ->
	let <Src> =
	    %% Line 416
	    call 'hipe_icode':'move_src'
		(_cor0)
	in  let <Dst> =
		%% Line 417
		call 'hipe_icode':'move_dst'
		    (_cor0)
	    in  let <Range> =
		    %% Line 418
		    apply 'get_range_from_arg'/1
			(Src)
		in  let <NewDst> =
			%% Line 419
			apply 'update_info'/2
			    (Dst, Range)
		    in  %% Line 420
			call 'hipe_icode':'subst_defines'
			    ([{Dst,NewDst}|[]], _cor0)
'analyse_begin_handler'/1 =
    %% Line 424
    fun (_cor0) ->
	let <_cor8> =
	    %% Line 426
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[%% Line 427
			      Dst|_cor2]> when 'true' ->
				let <_cor5> =
				    apply 'any_type'/0
					()
				in  let <_cor6> =
					apply 'update_info'/2
					    (Dst, _cor5)
				    in  let <_cor7> =
					    %% Line 427
					    apply 'lc$^0'/1
						(_cor2)
					in  ( [{Dst,_cor6}|_cor7]
					      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  let <_cor3> =
		      %% Line 427
		      call 'hipe_icode':'begin_handler_dstlist'
			  (_cor0)
		  in  apply 'lc$^0'/1
			  (_cor3)
	      -| ['list_comprehension'] )
	in  %% Line 428
	    call 'hipe_icode':'subst_defines'
		(_cor8, _cor0)
'analyse_phi'/1 =
    %% Line 432
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 433
	    call 'hipe_icode':'phi_arglist'
		(_cor0)
	in  %% Line 433
	    case call 'lists':'unzip'
		     (_cor1) of
	      <{_cor8,Args}> when 'true' ->
		  let <Dst> =
		      %% Line 434
		      call 'hipe_icode':'phi_dst'
			  (_cor0)
		  in  let <ArgRanges> =
			  %% Line 435
			  apply 'get_range_from_args'/1
			      (Args)
		      in  let <DstRange> =
			      %% Line 437
			      apply 'sup'/1
				  (ArgRanges)
			  in  let <NewDst> =
				  %% Line 438
				  apply 'update_info'/3
				      (Dst, DstRange, ( 'widen'/3
							-| [{'id',{0,0,'-analyse_phi/1-fun-0-'}}] ))
			      in  %% Line 439
				  call 'hipe_icode':'subst_defines'
				      ([{Dst,NewDst}|[]], _cor0)
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor2})
		-| ['compiler_generated'] )
	    end
'analyse_last_insn'/4 =
    %% Line 444
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <NewI> =
	    %% Line 446
	    apply 'handle_args'/2
		(_cor3, _cor2)
	in  %% Line 448
	    case NewI of
	      %% Line 449
	      <{'icode_return',_cor26}> when 'true' ->
		  apply 'analyse_return'/2
		      (NewI, _cor2)
	      %% Line 450
	      <{'icode_enter',_cor27,_cor28,_cor29}> when 'true' ->
		  apply 'analyse_enter'/3
		      (NewI, _cor2, _cor0)
	      %% Line 451
	      <{'icode_switch_val',_cor30,_cor31,_cor32,_cor33}> when 'true' ->
		  let <_cor6> =
		      %% Line 452
		      apply 'analyse_switch_val'/3
			  (NewI, _cor2, _cor1)
		  in  let <_cor5> =
			  %% Line 452
			  apply 'none_type'/0
			      ()
		      in  %% Line 452
			  {_cor6,_cor5}
	      %% Line 453
	      <{'icode_if',_cor34,_cor35,_cor36,_cor37,_cor38}> when 'true' ->
		  let <_cor8> =
		      apply 'analyse_if'/3
			  (NewI, _cor2, _cor1)
		  in  let <_cor7> =
			  apply 'none_type'/0
			      ()
		      in  {_cor8,_cor7}
	      %% Line 454
	      <{'icode_goto',_cor39}> when 'true' ->
		  let <_cor10> =
		      apply 'analyse_goto'/2
			  (NewI, _cor2)
		  in  let <_cor9> =
			  apply 'none_type'/0
			      ()
		      in  {_cor10,_cor9}
	      %% Line 455
	      <{'icode_type',_cor40,_cor41,_cor42,_cor43,_cor44}> when 'true' ->
		  let <_cor12> =
		      apply 'analyse_type'/3
			  (NewI, _cor2, _cor1)
		  in  let <_cor11> =
			  apply 'none_type'/0
			      ()
		      in  {_cor12,_cor11}
	      %% Line 456
	      <{'icode_fail',_cor45,_cor46,_cor47}> when 'true' ->
		  let <_cor14> =
		      apply 'analyse_fail'/2
			  (NewI, _cor2)
		  in  let <_cor13> =
			  apply 'none_type'/0
			      ()
		      in  {_cor14,_cor13}
	      %% Line 457
	      <{'icode_call',_cor48,_cor49,_cor50,_cor51,_cor52,_cor53,_cor54}> when 'true' ->
		  let <_cor16> =
		      apply 'analyse_last_call'/3
			  (NewI, _cor2, _cor0)
		  in  let <_cor15> =
			  apply 'none_type'/0
			      ()
		      in  {_cor16,_cor15}
	      %% Line 458
	      <{'icode_switch_tuple_arity',_cor55,_cor56,_cor57,_cor58}> when 'true' ->
		  let <_cor18> =
		      %% Line 459
		      apply 'analyse_switch_tuple_arity'/2
			  (NewI, _cor2)
		  in  let <_cor17> =
			  %% Line 459
			  apply 'none_type'/0
			      ()
		      in  %% Line 459
			  {_cor18,_cor17}
	      %% Line 460
	      <{'icode_begin_try',_cor59,_cor60}> when 'true' ->
		  let <_cor20> =
		      apply 'analyse_begin_try'/2
			  (NewI, _cor2)
		  in  let <_cor19> =
			  apply 'none_type'/0
			      ()
		      in  {_cor20,_cor19}
	      ( <_cor21> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor21})
		-| ['compiler_generated'] )
	    end
'analyse_return'/2 =
    %% Line 465
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 466
	    call 'hipe_icode':'return_vars'
		(_cor1)
	in  %% Line 466
	    case apply 'get_range_from_args'/1
		     (_cor2) of
	      <[RetRange|[]]> when 'true' ->
		  %% Line 467
		  {{_cor1,[]},RetRange}
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'analyse_enter'/3 =
    %% Line 471
    fun (_cor2,_cor1,_cor0) ->
	let <Args> =
	    %% Line 472
	    call 'hipe_icode':'args'
		(_cor2)
	in  let <Fun> =
		%% Line 473
		call 'hipe_icode':'enter_fun'
		    (_cor2)
	    in  let <CallType> =
		    %% Line 474
		    call 'hipe_icode':'enter_type'
			(_cor2)
		in  %% Line 475
		    case apply 'analyse_call_or_enter_fun'/4
			     (Fun, Args, CallType, _cor0) of
		      <[RetRange|[]]> when 'true' ->
			  %% Line 476
			  {{_cor2,[]},RetRange}
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
'analyse_switch_val'/3 =
    %% Line 480
    fun (_cor2,_cor1,_cor0) ->
	let <Var> =
	    %% Line 481
	    call 'hipe_icode':'switch_val_term'
		(_cor2)
	in  let <SwitchRange> =
		%% Line 482
		apply 'get_range_from_arg'/1
		    (Var)
	    in  let <Cases> =
		    %% Line 483
		    call 'hipe_icode':'switch_val_cases'
			(_cor2)
		in  %% Line 484
		    case apply 'get_range_label_list'/3
			     (Cases, SwitchRange, []) of
		      <{FailRange,LabelRangeList}> when 'true' ->
			  %% Line 485
			  case apply 'range__is_none'/1
				   (FailRange) of
			    %% Line 486
			    <'true'> when 'true' ->
				let <InfoList> =
				    %% Line 487
				    apply 'update_infos'/3
					(Var, _cor1, LabelRangeList)
				in  %% Line 488
				    case <> of
				      <>
					  when call 'erlang':'=:='
						(_cor0,
						 'true') ->
					  let <_cor8> =
					      apply 'update_switch'/3
						  (_cor2, LabelRangeList, 'false')
					  in  {_cor8,InfoList}
				      %% Line 489
				      <> when 'true' ->
					  {_cor2,InfoList}
				    end
			    %% Line 491
			    <'false'> when 'true' ->
				let <FailLabel> =
				    %% Line 492
				    call 'hipe_icode':'switch_val_fail_label'
					(_cor2)
				in  let <InfoList> =
					%% Line 493
					apply 'update_infos'/3
					    (Var, _cor1, [{FailRange,FailLabel}|LabelRangeList])
				    in  %% Line 494
					case <> of
					  <>
					      when call 'erlang':'=:='
						    (_cor0,
						     'true') ->
					      let <_cor11> =
						  apply 'update_switch'/3
						      (_cor2, LabelRangeList, 'true')
					      in  {_cor11,InfoList}
					  %% Line 495
					  <> when 'true' ->
					      {_cor2,InfoList}
					end
			    ( <_cor12> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor12})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
'update_infos'/3 =
    %% Line 501
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Arg,Info,[{Range,Label}|Rest]> when 'true' ->
	      let <_cor3> =
		  %% Line 502
		  apply 'enter_define'/2
		      ({Arg,Range}, Info)
	      in  let <_cor4> =
		      %% Line 502
		      apply 'update_infos'/3
			  (Arg, Info, Rest)
		  in  %% Line 502
		      [{Label,_cor3}|_cor4]
	  %% Line 503
	  <_cor8,_cor9,[]> when 'true' ->
	      []
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'update_infos',3}}] )
	    -| ['compiler_generated'] )
	end
'get_range_label_list'/3 =
    %% Line 508
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{Val,Label}|Cases],SRange,Acc> when 'true' ->
	      let <VRange> =
		  %% Line 509
		  apply 'get_range_from_arg'/1
		      (Val)
	      in  let <None> =
		      %% Line 510
		      apply 'none_type'/0
			  ()
		  in  %% Line 511
		      case apply 'inf'/2
			       (SRange, VRange) of
			%% Line 512
			<_cor11>
			    when call 'erlang':'=:='
				  (_cor11,
				   None) ->
			    %% Line 513
			    apply 'get_range_label_list'/3
				(Cases, SRange, Acc)
			%% Line 514
			<ResRange> when 'true' ->
			    %% Line 515
			    apply 'get_range_label_list'/3
				(Cases, SRange, [{ResRange,Label}|Acc])
		      end
	  %% Line 517
	  <[],SRange,Acc> when 'true' ->
	      %% Line 518
	      case call 'lists':'unzip'
		       (Acc) of
		<{PointTypes,_cor12}> when 'true' ->
		    let <_cor7> =
			%% Line 519
			apply 'remove_point_types'/2
			    (SRange, PointTypes)
		    in  %% Line 519
			{_cor7,Acc}
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'get_range_label_list',3}}] )
	    -| ['compiler_generated'] )
	end
'update_switch'/3 =
    %% Line 524
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 526
	    case apply 'label_range_list_to_cases'/2
		     (_cor1, []) of
	      %% Line 527
	      <'no_update'> when 'true' ->
		  _cor2
	      %% Line 529
	      <Cases> when 'true' ->
		  %% Line 530
		  call 'hipe_icode':'switch_val_cases_update'
		      (_cor2, Cases)
	    end
	in  %% Line 532
	    case <> of
	      <>
		  when call 'erlang':'=:='
			(_cor0,
			 'true') ->
		  _cor4
	      %% Line 533
	      <> when 'true' ->
		  _cor4
	    end
'label_range_list_to_cases'/2 =
    %% Line 539
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{{'range',{C,_cor5},'false'},Label}|Rest],%% Line 540
						      Acc>
	      when let <_cor6> =
		    call 'erlang':'=:='
			(_cor5, C)
		in  let <_cor7> =
			%% Line 540
			call 'erlang':'is_integer'
			    (C)
		    in  call 'erlang':'and'
			    (_cor6, _cor7) ->
	      let <_cor2> =
		  %% Line 541
		  call 'hipe_icode':'mk_const'
		      (C)
	      in  %% Line 541
		  apply 'label_range_list_to_cases'/2
		      (Rest, [{_cor2,Label}|Acc])
	  %% Line 542
	  <[{_X_NotAConstantRange,_X_Label}|_X_Rest],_X_Acc> when 'true' ->
	      %% Line 543
	      'no_update'
	  %% Line 544
	  <[],Acc> when 'true' ->
	      %% Line 545
	      call 'lists':'reverse'
		  (Acc)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'label_range_list_to_cases',2}}] )
	    -| ['compiler_generated'] )
	end
'analyse_switch_tuple_arity'/2 =
    %% Line 550
    fun (_cor1,_cor0) ->
	let <Var> =
	    %% Line 551
	    call 'hipe_icode':'switch_tuple_arity_term'
		(_cor1)
	in  let <_cor3> =
		%% Line 552
		apply 'get_range_from_arg'/1
		    (Var)
	    in  let <NewInfo> =
		    %% Line 552
		    apply 'enter_define'/2
			({Var,_cor3}, _cor0)
		in  let <Cases> =
			%% Line 553
			call 'hipe_icode':'switch_tuple_arity_cases'
			    (_cor1)
		    in  let <Fail> =
			    %% Line 554
			    call 'hipe_icode':'switch_tuple_arity_fail_label'
				(_cor1)
			in  %% Line 555
			    case call 'lists':'unzip'
				     (Cases) of
			      <{_cor16,Case_labels}> when 'true' ->
				  let <Labels> =
				      %% Line 556
				      [Fail|Case_labels]
				  in  let <_cor13> =
					  %% Line 557
					  ( letrec
						'lc$^0'/1 =
						    fun (_cor11) ->
							case _cor11 of
							  <[Label|_cor10]> when 'true' ->
							      let <_cor12> =
								  apply 'lc$^0'/1
								      (_cor10)
							      in  ( [{Label,NewInfo}|_cor12]
								    -| ['compiler_generated'] )
							  <[]> when 'true' ->
							      []
							  ( <_cor11> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_cor11})
								  -| [{'function_name',{'lc$^0',1}}] )
							    -| ['compiler_generated'] )
							end
					    in  apply 'lc$^0'/1
						    (Labels)
					    -| ['list_comprehension'] )
				      in  %% Line 557
					  {_cor1,_cor13}
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor7})
				-| ['compiler_generated'] )
			    end
'analyse_goto'/2 =
    %% Line 561
    fun (_cor1,_cor0) ->
	let <GotoLabel> =
	    %% Line 562
	    call 'hipe_icode':'goto_label'
		(_cor1)
	in  %% Line 563
	    {_cor1,[{GotoLabel,_cor0}|[]]}
'analyse_fail'/2 =
    %% Line 567
    fun (_cor1,_cor0) ->
	%% Line 568
	case call 'hipe_icode':'fail_label'
		 (_cor1) of
	  %% Line 569
	  <[]> when 'true' ->
	      {_cor1,[]}
	  %% Line 570
	  <Label> when 'true' ->
	      {_cor1,[{Label,_cor0}|[]]}
	end
'analyse_begin_try'/2 =
    %% Line 576
    fun (_cor1,_cor0) ->
	let <Label> =
	    %% Line 577
	    call 'hipe_icode':'begin_try_label'
		(_cor1)
	in  let <Successor> =
		%% Line 578
		call 'hipe_icode':'begin_try_successor'
		    (_cor1)
	    in  %% Line 579
		{_cor1,[{Label,_cor0}|[{Successor,_cor0}|[]]]}
'analyse_last_call'/3 =
    %% Line 584
    fun (_cor2,_cor1,_cor0) ->
	let <NewI> =
	    %% Line 586
	    apply 'analyse_call'/2
		(_cor2, _cor0)
	in  let <Continuation> =
		%% Line 587
		call 'hipe_icode':'call_continuation'
		    (_cor2)
	    in  let <NewInfo> =
		    %% Line 588
		    apply 'enter_vals'/2
			(NewI, _cor1)
		in  %% Line 589
		    case call 'hipe_icode':'call_fail_label'
			     (_cor2) of
		      %% Line 590
		      <[]> when 'true' ->
			  %% Line 591
			  {NewI,[{Continuation,NewInfo}|[]]}
		      %% Line 592
		      <Fail> when 'true' ->
			  %% Line 593
			  {NewI,[{Continuation,NewInfo}|[{Fail,_cor1}|[]]]}
		    end
'analyse_if'/3 =
    %% Line 599
    fun (_cor2,_cor1,_cor0) ->
	%% Line 600
	case call 'hipe_icode':'if_args'
		 (_cor2) of
	  %% Line 601
	  <Args = [_cor10|[_cor11|[]]]> when 'true' ->
	      let <_cor3> =
		  %% Line 602
		  apply 'get_range_from_args'/1
		      (Args)
	      in  %% Line 602
		  apply 'analyse_sane_if'/5
		      (_cor2, _cor1, Args, _cor3, _cor0)
	  %% Line 603
	  <_cor12> when 'true' ->
	      let <TrueLabel> =
		  %% Line 604
		  call 'hipe_icode':'if_true_label'
		      (_cor2)
	      in  let <FalseLabel> =
		      %% Line 605
		      call 'hipe_icode':'if_false_label'
			  (_cor2)
		  in  %% Line 606
		      {_cor2,[{TrueLabel,_cor1}|[{FalseLabel,_cor1}|[]]]}
	end
'analyse_sane_if'/5 =
    %% Line 613
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <If,Info,[Arg1|[Arg2|[]]],[Range1|[Range2|[]]],Rewrite> when 'true' ->
	      let <_cor5> =
		  %% Line 614
		  call 'hipe_icode':'if_op'
		      (If)
	      in  let <_cor60,FalseRange1,FalseRange2,TrueRange1,TrueRange2> =
		      %% Line 614
		      case apply 'normalize_name'/1
			       (_cor5) of
			%% Line 615
			<'>'> when 'true' ->
			    let <_cor44> =
				%% Line 617
				apply 'range_inequality_propagation'/2
				    (Range2, Range1)
			    in  %% Line 616
				case _cor44 of
				  <{TrueRange2,TrueRange1,FalseRange2,FalseRange1}> when 'true' ->
				      <( _cor44
					 -| ['compiler_generated'] ),FalseRange1,FalseRange2,TrueRange1,TrueRange2>
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor6})
				    -| ['compiler_generated'] )
				end
			%% Line 618
			<'<'> when 'true' ->
			    let <_cor45> =
				%% Line 620
				apply 'range_inequality_propagation'/2
				    (Range1, Range2)
			    in  %% Line 619
				case _cor45 of
				  <{TrueRange1,TrueRange2,FalseRange1,FalseRange2}> when 'true' ->
				      <( _cor45
					 -| ['compiler_generated'] ),FalseRange1,FalseRange2,TrueRange1,TrueRange2>
				  ( <_cor7> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor7})
				    -| ['compiler_generated'] )
				end
			%% Line 621
			<'>='> when 'true' ->
			    let <_cor46> =
				%% Line 623
				apply 'range_inequality_propagation'/2
				    (Range1, Range2)
			    in  %% Line 622
				case _cor46 of
				  <{FalseRange1,FalseRange2,TrueRange1,TrueRange2}> when 'true' ->
				      <( _cor46
					 -| ['compiler_generated'] ),FalseRange1,FalseRange2,TrueRange1,TrueRange2>
				  ( <_cor8> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor8})
				    -| ['compiler_generated'] )
				end
			%% Line 624
			<'=<'> when 'true' ->
			    let <_cor47> =
				%% Line 626
				apply 'range_inequality_propagation'/2
				    (Range2, Range1)
			    in  %% Line 625
				case _cor47 of
				  <{FalseRange2,FalseRange1,TrueRange2,TrueRange1}> when 'true' ->
				      <( _cor47
					 -| ['compiler_generated'] ),FalseRange1,FalseRange2,TrueRange1,TrueRange2>
				  ( <_cor9> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor9})
				    -| ['compiler_generated'] )
				end
			%% Line 627
			<'=:='> when 'true' ->
			    let <_cor48> =
				%% Line 629
				apply 'range_equality_propagation'/2
				    (Range1, Range2)
			    in  %% Line 628
				case _cor48 of
				  <{TrueRange1,TrueRange2,FalseRange1,FalseRange2}> when 'true' ->
				      <( _cor48
					 -| ['compiler_generated'] ),FalseRange1,FalseRange2,TrueRange1,TrueRange2>
				  ( <_cor10> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor10})
				    -| ['compiler_generated'] )
				end
			%% Line 630
			<'=/='> when 'true' ->
			    let <_cor49> =
				%% Line 632
				apply 'range_equality_propagation'/2
				    (Range1, Range2)
			    in  %% Line 631
				case _cor49 of
				  <{FalseRange1,FalseRange2,TrueRange1,TrueRange2}> when 'true' ->
				      <( _cor49
					 -| ['compiler_generated'] ),FalseRange1,FalseRange2,TrueRange1,TrueRange2>
				  ( <_cor11> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor11})
				    -| ['compiler_generated'] )
				end
			%% Line 633
			<'=='> when 'true' ->
			    %% Line 634
			    case %% Line 635
				 apply 'range_equality_propagation'/2
				     (Range1, Range2) of
			      <{TempTrueRange1,TempTrueRange2,FalseRange1,FalseRange2}> when 'true' ->
				  let <_cor13> =
				      %% Line 636
				      apply 'other'/1
					  (Range1)
				  in  let <TrueRange1> =
					  %% Line 636
					  apply 'set_other'/2
					      (TempTrueRange1, _cor13)
				      in  let <_cor15> =
					      %% Line 637
					      apply 'other'/1
						  (Range2)
					  in  let <TrueRange2> =
						  %% Line 637
						  apply 'set_other'/2
						      (TempTrueRange2, _cor15)
					      in  <TrueRange2,FalseRange1,FalseRange2,TrueRange1,TrueRange2>
			      ( <_cor12> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor12})
				-| ['compiler_generated'] )
			    end
			%% Line 638
			<'/='> when 'true' ->
			    %% Line 639
			    case %% Line 640
				 apply 'range_equality_propagation'/2
				     (Range1, Range2) of
			      <{TempFalseRange1,TempFalseRange2,TrueRange1,TrueRange2}> when 'true' ->
				  let <_cor18> =
				      %% Line 641
				      apply 'other'/1
					  (Range1)
				  in  let <FalseRange1> =
					  %% Line 641
					  apply 'set_other'/2
					      (TempFalseRange1, _cor18)
				      in  let <_cor20> =
					      %% Line 642
					      apply 'other'/1
						  (Range2)
					  in  let <FalseRange2> =
						  %% Line 642
						  apply 'set_other'/2
						      (TempFalseRange2, _cor20)
					      in  <FalseRange2,FalseRange1,FalseRange2,TrueRange1,TrueRange2>
			      ( <_cor17> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor17})
				-| ['compiler_generated'] )
			    end
			( <_cor22> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor22})
			  -| ['compiler_generated'] )
		      end
		  in  let <_cor27> =
			  %% Line 646
			  case call 'lists':'all'
				   (( 'range__is_none'/1
				      -| [{'id',{0,0,'-analyse_sane_if/5-fun-0-'}}] ), [TrueRange1|[TrueRange2|[]]]) of
			    %% Line 647
			    <'true'> when 'true' ->
				[]
			    %% Line 648
			    <'false'> when 'true' ->
				let <TrueLabel> =
				    %% Line 649
				    call 'hipe_icode':'if_true_label'
					(If)
				in  let <TrueArgRanges> =
					%% Line 650
					[{Arg1,TrueRange1}|[{Arg2,TrueRange2}|[]]]
				    in  let <TrueInfo> =
					    %% Line 651
					    apply 'enter_defines'/2
						(TrueArgRanges, Info)
					in  %% Line 652
					    [{TrueLabel,TrueInfo}|[]]
			    ( <_cor26> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor26})
			      -| ['compiler_generated'] )
			  end
		      in  let <_cor33> =
			      %% Line 656
			      case call 'lists':'all'
				       (( 'range__is_none'/1
					  -| [{'id',{0,0,'-analyse_sane_if/5-fun-1-'}}] ), [FalseRange1|[FalseRange2|[]]]) of
				%% Line 657
				<'true'> when 'true' ->
				    []
				%% Line 658
				<'false'> when 'true' ->
				    let <FalseLabel> =
					%% Line 659
					call 'hipe_icode':'if_false_label'
					    (If)
				    in  let <FalseArgRanges> =
					    %% Line 660
					    [{Arg1,FalseRange1}|[{Arg2,FalseRange2}|[]]]
					in  let <FalseInfo> =
						%% Line 661
						apply 'enter_defines'/2
						    (FalseArgRanges, Info)
					    in  %% Line 662
						[{FalseLabel,FalseInfo}|[]]
				( <_cor32> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor32})
				  -| ['compiler_generated'] )
			      end
			  in  let <UpdateInfo> =
				  %% Line 664
				  call 'erlang':'++'
				      (_cor27, _cor33)
			      in  let <_cor37> =
				      %% Line 666
				      case <> of
					<>
					    when call 'erlang':'=:='
						  (Rewrite,
						   'true') ->
					    %% Line 667
					    case UpdateInfo of
					      %% Line 668
					      <[]> when 'true' ->
						  %% Line 669
						  If
					      %% Line 670
					      <[{Label,_X_Info}|[]]> when 'true' ->
						  %% Line 671
						  call 'hipe_icode':'mk_goto'
						      (Label)
					      %% Line 672
					      <[_cor50|[_cor51|[]]]> when 'true' ->
						  %% Line 673
						  If
					      ( <_cor36> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor36})
						-| ['compiler_generated'] )
					    end
					%% Line 675
					<> when 'true' ->
					    %% Line 676
					    If
				      end
				  in  %% Line 678
				      {_cor37,UpdateInfo}
	  ( <_cor43,_cor42,_cor41,_cor40,_cor39> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor43,_cor42,_cor41,_cor40,_cor39})
		  -| [{'function_name',{'analyse_sane_if',5}}] )
	    -| ['compiler_generated'] )
	end
'normalize_name'/1 =
    %% Line 682
    fun (_cor0) ->
	%% Line 683
	case _cor0 of
	  %% Line 684
	  <'fixnum_eq'> when 'true' ->
	      '=:='
	  %% Line 685
	  <'fixnum_neq'> when 'true' ->
	      '=/='
	  %% Line 686
	  <'fixnum_gt'> when 'true' ->
	      '>'
	  %% Line 687
	  <'fixnum_lt'> when 'true' ->
	      '<'
	  %% Line 688
	  <'fixnum_ge'> when 'true' ->
	      '>='
	  %% Line 689
	  <'fixnum_le'> when 'true' ->
	      '=<'
	  %% Line 690
	  <_cor3> when 'true' ->
	      _cor0
	end
'range_equality_propagation'/2 =
    %% Line 696
    fun (_cor1,_cor0) ->
	let <True_range> =
	    %% Line 697
	    apply 'inf'/2
		(_cor1, _cor0)
	in  let <_cor4> =
		%% Line 698
		apply 'range'/1
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 698
		    apply 'range'/1
			(_cor0)
		in  let <_cor41,False_range_1,False_range_2> =
			%% Line 698
			case <_cor4,_cor3> of
			  %% Line 699
			  <{N,_cor18},{_cor19,_cor20}>
			      when let <_cor23> =
				    call 'erlang':'=:='
					(_cor18, N)
				in  let <_cor21> =
					call 'erlang':'=:='
					    (_cor19, N)
				    in  let <_cor22> =
					    call 'erlang':'=:='
						(_cor20, N)
					in  let <_cor24> =
						call 'erlang':'and'
						    (_cor21, _cor22)
					    in  call 'erlang':'and'
						    (_cor23, _cor24) ->
			      let <False_range_1> =
				  %% Line 700
				  apply 'none_range'/0
				      ()
			      in  let <False_range_2> =
				      %% Line 701
				      apply 'none_range'/0
					  ()
				  in  <False_range_2,False_range_1,False_range_2>
			  %% Line 702
			  <{N1,_cor25},{N2,_cor26}>
			      when let <_cor27> =
				    call 'erlang':'=:='
					(_cor25, N1)
				in  let <_cor28> =
					call 'erlang':'=:='
					    (_cor26, N2)
				    in  call 'erlang':'and'
					    (_cor27, _cor28) ->
			      <_cor0,_cor1,_cor0>
			  %% Line 705
			  <{N,_cor29},_cor30>
			      when call 'erlang':'=:='
				    (_cor29,
				     N) ->
			      let <_cor31> =
				  %% Line 707
				  apply 'compare_with_integer'/2
				      (N, _cor0)
			      in  %% Line 707
				  case _cor31 of
				    <{_cor32,False_range_2}> when 'true' ->
					<( _cor31
					   -| ['compiler_generated'] ),_cor1,False_range_2>
				    ( <_cor10> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor10})
				      -| ['compiler_generated'] )
				  end
			  %% Line 708
			  <_cor33,{N,_cor34}>
			      when call 'erlang':'=:='
				    (_cor34,
				     N) ->
			      let <_cor35> =
				  %% Line 710
				  apply 'compare_with_integer'/2
				      (N, _cor1)
			      in  %% Line 710
				  case _cor35 of
				    <{_cor36,False_range_1}> when 'true' ->
					<( _cor35
					   -| ['compiler_generated'] ),False_range_1,_cor0>
				    ( <_cor12> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor12})
				      -| ['compiler_generated'] )
				  end
			  %% Line 711
			  <_cor37,_cor38> when 'true' ->
			      <_cor0,_cor1,_cor0>
			end
		    in  %% Line 715
			{True_range,True_range,False_range_1,False_range_2}
'range_inequality_propagation'/2 =
    %% Line 721
    fun (_cor1,_cor0) ->
	let <R1_other> =
	    %% Line 722
	    apply 'other'/1
		(_cor1)
	in  let <R2_other> =
		%% Line 723
		apply 'other'/1
		    (_cor0)
	    in  let <_cor5> =
		    %% Line 725
		    apply 'range'/1
			(_cor1)
		in  let <_cor4> =
			%% Line 725
			apply 'range'/1
			    (_cor0)
		    in  let <R1_true_range,R1_false_range,R2_true_range,R2_false_range> =
			    %% Line 725
			    case <_cor5,_cor4> of
			      %% Line 726
			      <{N1,_cor36},{N2,_cor37}>
				  when let <_cor38> =
					call 'erlang':'=:='
					    (_cor36, N1)
				    in  let <_cor39> =
					    call 'erlang':'=:='
						(_cor37, N2)
					in  call 'erlang':'and'
						(_cor38, _cor39) ->
				  let <_cor6> =
				      %% Line 727
				      apply 'inf_add'/2
					  (N1, 1)
				  in  %% Line 727
				      case apply 'inf_geq'/2
					       (N2, _cor6) of
					%% Line 728
					<'true'> when 'true' ->
					    %% Line 729
					    <{N1,N1},'empty',{N2,N2},'empty'>
					%% Line 730
					<'false'> when 'true' ->
					    %% Line 731
					    <'empty',{N1,N1},'empty',{N2,N2}>
					( <_cor7> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor7})
					  -| ['compiler_generated'] )
				      end
			      %% Line 733
			      <{N1,_cor40},{Min2,Max2}>
				  when call 'erlang':'=:='
					(_cor40,
					 N1) ->
				  let <_cor8> =
				      %% Line 734
				      apply 'inf_add'/2
					  (N1, 1)
				  in  %% Line 734
				      case apply 'inf_geq'/2
					       (Min2, _cor8) of
					%% Line 735
					<'true'> when 'true' ->
					    let <_cor9> =
						%% Line 736
						apply 'inf_add'/2
						    (N1, 1)
					    in  %% Line 736
						<{N1,N1},'empty',{_cor9,Max2},'empty'>
					%% Line 737
					<'false'> when 'true' ->
					    %% Line 738
					    case apply 'inf_geq'/2
						     (N1, Max2) of
					      %% Line 739
					      <'true'> when 'true' ->
						  %% Line 740
						  <'empty',{N1,N1},'empty',{Min2,N1}>
					      %% Line 741
					      <'false'> when 'true' ->
						  let <_cor10> =
						      %% Line 742
						      apply 'inf_add'/2
							  (N1, 1)
						  in  %% Line 742
						      <{N1,N1},{N1,N1},{_cor10,Max2},{Min2,N1}>
					      ( <_cor11> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor11})
						-| ['compiler_generated'] )
					    end
					( <_cor12> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor12})
					  -| ['compiler_generated'] )
				      end
			      %% Line 745
			      <{Min1,Max1},{N2,_cor41}>
				  when call 'erlang':'=:='
					(_cor41,
					 N2) ->
				  let <_cor13> =
				      %% Line 746
				      apply 'inf_add'/2
					  (Max1, 1)
				  in  %% Line 746
				      case apply 'inf_geq'/2
					       (N2, _cor13) of
					%% Line 747
					<'true'> when 'true' ->
					    let <_cor15> =
						%% Line 748
						apply 'inf_add'/2
						    (N2, -1)
					    in  %% Line 748
						<{Min1,_cor15},'empty',{N2,N2},'empty'>
					%% Line 749
					<'false'> when 'true' ->
					    %% Line 750
					    case apply 'inf_geq'/2
						     (Min1, N2) of
					      %% Line 751
					      <'true'> when 'true' ->
						  %% Line 752
						  <'empty',{N2,Max1},'empty',{N2,N2}>
					      %% Line 753
					      <'false'> when 'true' ->
						  let <_cor17> =
						      %% Line 754
						      apply 'inf_add'/2
							  (N2, -1)
						  in  %% Line 754
						      <{Min1,_cor17},{N2,Max1},{N2,N2},{N2,N2}>
					      ( <_cor18> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor18})
						-| ['compiler_generated'] )
					    end
					( <_cor19> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor19})
					  -| ['compiler_generated'] )
				      end
			      %% Line 757
			      <'empty',{Min2,Max2}> when 'true' ->
				  %% Line 758
				  <'empty','empty',{Min2,Max2},{Min2,Max2}>
			      %% Line 759
			      <{Min1,Max1},'empty'> when 'true' ->
				  %% Line 760
				  <{Min1,Max1},{Min1,Max1},'empty','empty'>
			      %% Line 761
			      <'empty','empty'> when 'true' ->
				  %% Line 762
				  <'empty','empty','empty','empty'>
			      %% Line 763
			      <{Min1,Max1},{Min2,Max2}> when 'true' ->
				  let <_cor25> =
				      %% Line 764
				      apply 'inf_add'/2
					  (Max2, -1)
				  in  let <_cor26> =
					  %% Line 764
					  apply 'inf_min'/1
					      ([Max1|[_cor25|[]]])
				      in  let <_cor23> =
					      %% Line 765
					      apply 'inf_max'/1
						  ([Min1|[Min2|[]]])
					  in  let <_cor21> =
						  %% Line 766
						  apply 'inf_add'/2
						      (Min1, 1)
					      in  let <_cor22> =
						      %% Line 766
						      apply 'inf_max'/1
							  ([_cor21|[Min2|[]]])
						  in  let <_cor20> =
							  %% Line 767
							  apply 'inf_min'/1
							      ([Max1|[Max2|[]]])
						      in  %% Line 764
							  <{Min1,_cor26},%% Line 765
									 {_cor23,Max1},%% Line 766
										       {_cor22,Max2},%% Line 767
												     {Min2,_cor20}>
			      ( <_fol165,_fol166> when 'true' ->
				    let <_cor27> = {_fol165,_fol166}
				    in  primop 'match_fail'
					    ({'case_clause',_cor27})
				-| ['compiler_generated'] )
			    end
			in  let <_cor33> =
				%% Line 769
				apply 'range_init'/2
				    (R1_true_range, R1_other)
			    in  let <_cor32> =
				    %% Line 770
				    apply 'range_init'/2
					(R2_true_range, R2_other)
				in  let <_cor31> =
					%% Line 771
					apply 'range_init'/2
					    (R1_false_range, R1_other)
				    in  let <_cor30> =
					    %% Line 772
					    apply 'range_init'/2
						(R2_false_range, R2_other)
					in  %% Line 769
					    {_cor33,_cor32,_cor31,_cor30}
'analyse_type'/3 =
    %% Line 777
    fun (_cor2,_cor1,_cor0) ->
	let <TypeTest> =
	    %% Line 778
	    call 'hipe_icode':'type_test'
		(_cor2)
	in  %% Line 779
	    case call 'hipe_icode':'type_args'
		     (_cor2) of
	      <[Arg|_cor34]> when 'true' ->
		  let <OldVarRange> =
		      %% Line 780
		      apply 'get_range_from_arg'/1
			  (Arg)
		  in  let <_cor41,FalseRange,TrueRange> =
			  %% Line 781
			  case TypeTest of
			    %% Line 782
			    <{'integer',N}> when 'true' ->
				let <_cor35> =
				    %% Line 783
				    apply 'compare_with_integer'/2
					(N, OldVarRange)
				in  %% Line 783
				    case _cor35 of
				      <{TrueRange,FalseRange}> when 'true' ->
					  <( _cor35
					     -| ['compiler_generated'] ),FalseRange,TrueRange>
				      ( <_cor6> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_cor6})
					-| ['compiler_generated'] )
				    end
			    %% Line 784
			    <'integer'> when 'true' ->
				let <_cor7> =
				    %% Line 785
				    apply 'any_range'/0
					()
				in  let <TrueRange> =
					%% Line 785
					apply 'inf'/2
					    (_cor7, OldVarRange)
				    in  let <_cor9> =
					    %% Line 786
					    apply 'none_range'/0
						()
					in  let <FalseRange> =
						%% Line 786
						apply 'inf'/2
						    (_cor9, OldVarRange)
					    in  <FalseRange,FalseRange,TrueRange>
			    %% Line 787
			    <'number'> when 'true' ->
				<%% Line 788
				 ( OldVarRange
				   -| ['compiler_generated'] ),%% Line 788
							       OldVarRange,%% Line 788
									   OldVarRange>
			    %% Line 789
			    <_cor36> when 'true' ->
				let <_cor12> =
				    %% Line 790
				    apply 'none_range'/0
					()
				in  let <TrueRange> =
					%% Line 790
					apply 'inf'/2
					    (_cor12, OldVarRange)
				    in  <%% Line 791
					 OldVarRange,%% Line 791
						     OldVarRange,TrueRange>
			  end
		      in  let <TrueLabel> =
			      %% Line 793
			      call 'hipe_icode':'type_true_label'
				  (_cor2)
			  in  let <FalseLabel> =
				  %% Line 794
				  call 'hipe_icode':'type_false_label'
				      (_cor2)
			      in  let <TrueInfo> =
				      %% Line 795
				      apply 'enter_define'/2
					  ({Arg,TrueRange}, _cor1)
				  in  let <FalseInfo> =
					  %% Line 796
					  apply 'enter_define'/2
					      ({Arg,FalseRange}, _cor1)
				      in  let <_cor21> =
					      %% Line 798
					      case apply 'range__is_none'/1
						       (TrueRange) of
						%% Line 799
						<'true'> when 'true' ->
						    []
						%% Line 800
						<'false'> when 'true' ->
						    [{TrueLabel,TrueInfo}|[]]
						( <_cor20> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor20})
						  -| ['compiler_generated'] )
					      end
					  in  let <_cor24> =
						  %% Line 803
						  case apply 'range__is_none'/1
							   (FalseRange) of
						    %% Line 804
						    <'true'> when 'true' ->
							[]
						    %% Line 805
						    <'false'> when 'true' ->
							[{FalseLabel,FalseInfo}|[]]
						    ( <_cor23> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor23})
						      -| ['compiler_generated'] )
						  end
					      in  let <UpdateInfo> =
						      %% Line 807
						      call 'erlang':'++'
							  (_cor21, _cor24)
						  in  let <_cor28> =
							  %% Line 809
							  case <> of
							    <>
								when call 'erlang':'=:='
								      (_cor0,
								       'true') ->
								%% Line 810
								case UpdateInfo of
								  %% Line 811
								  <[]> when 'true' ->
								      _cor2
								  %% Line 813
								  <[{Label,_X_Info}|[]]> when 'true' ->
								      %% Line 814
								      call 'hipe_icode':'mk_goto'
									  (Label)
								  %% Line 815
								  <[_cor37|[_cor38|[]]]> when 'true' ->
								      _cor2
								  ( <_cor27> when 'true' ->
									primop 'match_fail'
									    ({'case_clause',_cor27})
								    -| ['compiler_generated'] )
								end
							    %% Line 818
							    <> when 'true' ->
								_cor2
							  end
						      in  let <_cor30> =
							      %% Line 821
							      call 'erlang':'++'
								  (_cor21, _cor24)
							  in  %% Line 821
							      {_cor28,_cor30}
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor4})
		-| ['compiler_generated'] )
	    end
'compare_with_integer'/2 =
    %% Line 825
    fun (_cor1,_cor0) ->
	let <TestRange> =
	    %% Line 826
	    apply 'range_init'/2
		({_cor1,_cor1}, 'false')
	in  let <TrueRange> =
		%% Line 827
		apply 'inf'/2
		    (TestRange, _cor0)
	    in  let <TempFalseRange> =
		    %% Line 829
		    apply 'range__remove_constant'/2
			(_cor0, TestRange)
		in  let <_cor14> =
			%% Line 831
			case apply 'range'/1
				 (TempFalseRange) of
			  %% Line 832
			  <MM = {Min,Max}> when 'true' ->
			      let <New_small> =
				  %% Line 833
				  apply 'inf_geq'/2
				      (Min, _cor1)
			      in  let <New_large> =
				      %% Line 834
				      apply 'inf_geq'/2
					  (_cor1, Max)
				  in  %% Line 835
				      case <> of
					<>
					    when let <_cor7> =
						  call 'erlang':'=:='
						      (New_small, 'true')
					      in  let <_cor8> =
						      call 'erlang':'=:='
							  (New_large, 'false')
						  in  call 'erlang':'and'
							  (_cor7, _cor8) ->
					    let <_cor9> =
						%% Line 836
						call 'erlang':'+'
						    (_cor1, 1)
					    in  %% Line 836
						{_cor9,Max}
					%% Line 837
					<>
					    when let <_cor10> =
						  call 'erlang':'=:='
						      (New_large, 'true')
					      in  let <_cor11> =
						      call 'erlang':'=:='
							  (New_small, 'false')
						  in  call 'erlang':'and'
							  (_cor10, _cor11) ->
					    let <_cor12> =
						%% Line 838
						call 'erlang':'-'
						    (_cor1, 1)
					    in  %% Line 838
						{Min,_cor12}
					%% Line 839
					<> when 'true' ->
					    %% Line 840
					    MM
				      end
			  %% Line 842
			  <Not_tuple> when 'true' ->
			      %% Line 843
			      Not_tuple
			end
		    in  let <_cor16> =
			    %% Line 845
			    apply 'other'/1
				(TempFalseRange)
			in  let <FalseRange> =
				%% Line 845
				apply 'range_init'/2
				    (_cor14, _cor16)
			    in  %% Line 846
				{TrueRange,FalseRange}
'pp_ann'/1 =
    %% Line 852
    fun (_cor0) ->
	case _cor0 of
	  <{'ann',{'range',R,'false'},_cor5,_cor6}> when 'true' ->
	      %% Line 853
	      apply 'pp_range'/1
		  (R)
	  %% Line 854
	  <{'ann',{'range','empty','true'},Type,_cor7}> when 'true' ->
	      %% Line 855
	      call 'erl_types':'t_to_string'
		  (Type)
	  %% Line 856
	  <{'ann',{'range',R,'true'},Type,_cor8}> when 'true' ->
	      let <_cor3> =
		  %% Line 857
		  apply 'pp_range'/1
		      (R)
	      in  let <_cor1> =
		      %% Line 857
		      call 'erl_types':'t_to_string'
			  (Type)
		  in  let <_cor2> =
			  %% Line 857
			  [32|[124|[32|_cor1]]]
		      in  %% Line 857
			  call 'erlang':'++'
			      (_cor3, _cor2)
	  %% Line 858
	  <Type> when 'true' ->
	      %% Line 859
	      call 'erl_types':'t_to_string'
		  (Type)
	end
'pp_range'/1 =
    %% Line 863
    fun (_cor0) ->
	case _cor0 of
	  <'empty'> when 'true' ->
	      %% Line 864
	      [110|[111|[110|[101]]]]
	  %% Line 865
	  <{Min,Max}> when 'true' ->
	      let <_cor3> =
		  %% Line 866
		  apply 'val_to_string'/1
		      (Min)
	      in  let <_cor1> =
		      %% Line 866
		      apply 'val_to_string'/1
			  (Max)
		  in  let <_cor2> =
			  %% Line 866
			  [46|[46|_cor1]]
		      in  %% Line 866
			  call 'erlang':'++'
			      (_cor3, _cor2)
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'pp_range',1}}] )
	    -| ['compiler_generated'] )
	end
'val_to_string'/1 =
    %% Line 870
    fun (_cor0) ->
	case _cor0 of
	  <'pos_inf'> when 'true' ->
	      [105|[110|[102]]]
	  %% Line 871
	  <'neg_inf'> when 'true' ->
	      [45|[105|[110|[102]]]]
	  %% Line 872
	  <X>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      call 'erlang':'integer_to_list'
		  (X)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'val_to_string',1}}] )
	    -| ['compiler_generated'] )
	end
'range_from_type'/1 =
    %% Line 876
    fun (_cor0) ->
	%% Line 877
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[T|_cor2]> when 'true' ->
			    let <_cor5> =
				apply 'range_from_simple_type'/1
				    (T)
			    in  let <_cor6> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [_cor5|_cor6]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  let <_cor3> =
		  call 'erl_types':'t_to_tlist'
		      (_cor0)
	      in  apply 'lc$^0'/1
		      (_cor3)
	  -| ['list_comprehension'] )
'range_from_simple_type'/1 =
    %% Line 881
    fun (_cor0) ->
	let <None> =
	    %% Line 882
	    call 'erl_types':'t_none'
		()
	in  let <_cor2> =
		%% Line 883
		call 'erl_types':'t_integer'
		    ()
	    in  %% Line 883
		case call 'erl_types':'t_inf'
			 (_cor2, _cor0) of
		  %% Line 884
		  <_cor11>
		      when call 'erlang':'=:='
			    (_cor11,
			     None) ->
		      %% Line 885
		      {'range','empty','true'}
		  %% Line 886
		  <_cor12>
		      when call 'erlang':'=:='
			    (_cor12,
			     _cor0) ->
		      let <_cor4> =
			  %% Line 887
			  call 'erl_types':'number_min'
			      (_cor0)
		      in  let <_cor3> =
			      %% Line 887
			      call 'erl_types':'number_max'
				  (_cor0)
			  in  let <Range> = {_cor4,_cor3}
			      in  %% Line 888
				  {'range',Range,'false'}
		  %% Line 889
		  <NewType> when 'true' ->
		      let <_cor7> =
			  %% Line 890
			  call 'erl_types':'number_min'
			      (NewType)
		      in  let <_cor6> =
			      %% Line 890
			      call 'erl_types':'number_max'
				  (NewType)
			  in  let <Range> = {_cor7,_cor6}
			      in  %% Line 891
				  {'range',Range,'true'}
		end
'range_init'/2 =
    %% Line 896
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Range = {Min,Max},Other> when 'true' ->
	      %% Line 897
	      case apply 'inf_geq'/2
		       (Max, Min) of
		%% Line 898
		<'true'> when 'true' ->
		    %% Line 899
		    {'range',Range,Other}
		%% Line 900
		<'false'> when 'true' ->
		    %% Line 901
		    {'range','empty',Other}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 903
	  <'empty',Other> when 'true' ->
	      %% Line 904
	      {'range','empty',Other}
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'range_init',2}}] )
	    -| ['compiler_generated'] )
	end
'range'/1 =
    %% Line 908
    fun (_cor0) ->
	case _cor0 of
	  <{'range',R,_cor2}> when 'true' ->
	      R
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'range',1}}] )
	    -| ['compiler_generated'] )
	end
'other'/1 =
    %% Line 912
    fun (_cor0) ->
	case _cor0 of
	  <{'range',_cor2,O}> when 'true' ->
	      O
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'other',1}}] )
	    -| ['compiler_generated'] )
	end
'set_other'/2 =
    %% Line 916
    fun (_cor1,_cor0) ->
	case _cor1 of
	  <{'range',_cor6,_cor7}> when 'true' ->
	      call 'erlang':'setelement'
		  (3, _cor1, _cor0)
	  ( <_cor8> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','range'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'range__min'/1 =
    %% Line 920
    fun (_cor0) ->
	case _cor0 of
	  <{'range','empty',_cor2}> when 'true' ->
	      'empty'
	  %% Line 921
	  <{'range',{Min,_cor3},_cor4}> when 'true' ->
	      Min
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'range__min',1}}] )
	    -| ['compiler_generated'] )
	end
'range__max'/1 =
    %% Line 925
    fun (_cor0) ->
	case _cor0 of
	  <{'range','empty',_cor2}> when 'true' ->
	      'empty'
	  %% Line 926
	  <{'range',{_cor3,Max},_cor4}> when 'true' ->
	      Max
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'range__max',1}}] )
	    -| ['compiler_generated'] )
	end
'range__is_none'/1 =
    %% Line 930
    fun (_cor0) ->
	case _cor0 of
	  <{'range','empty','false'}> when 'true' ->
	      'true'
	  %% Line 931
	  <{'range',_cor2,_cor3}> when 'true' ->
	      'false'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'range__is_none',1}}] )
	    -| ['compiler_generated'] )
	end
'range__is_empty'/1 =
    %% Line 935
    fun (_cor0) ->
	case _cor0 of
	  <{'range','empty',_cor2}> when 'true' ->
	      'true'
	  %% Line 936
	  <{'range',{_cor3,_cor4},_cor5}> when 'true' ->
	      'false'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'range__is_empty',1}}] )
	    -| ['compiler_generated'] )
	end
'remove_point_types'/2 =
    %% Line 940
    fun (_cor1,_cor0) ->
	let <Sorted> =
	    %% Line 941
	    call 'lists':'sort'
		(_cor0)
	in  let <FoldFun> =
		%% Line 942
		( fun (_cor4,_cor3) ->
		      apply 'range__remove_constant'/2
			  (_cor3, _cor4)
		  -| [{'id',{0,0,'-remove_point_types/2-fun-0-'}}] )
	    in  let <Range1> =
		    %% Line 943
		    call 'lists':'foldl'
			(FoldFun, _cor1, Sorted)
		in  let <_cor9> =
			%% Line 944
			call 'lists':'reverse'
			    (Sorted)
		    in  %% Line 944
			call 'lists':'foldl'
			    (FoldFun, Range1, _cor9)
'range__remove_constant'/2 =
    %% Line 948
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <R = {'range',{C,_cor14},_cor15},{'range',{_cor16,_cor17},_cor18}>
	      when let <_cor21> =
		    call 'erlang':'=:='
			(_cor14, C)
		in  let <_cor19> =
			call 'erlang':'=:='
			    (_cor16, C)
		    in  let <_cor20> =
			    call 'erlang':'=:='
				(_cor17, C)
			in  let <_cor22> =
				call 'erlang':'and'
				    (_cor19, _cor20)
			    in  call 'erlang':'and'
				    (_cor21, _cor22) ->
	      %% Line 949
	      call 'erlang':'setelement'
		  (2, R, 'empty')
	  %% Line 950
	  <R = {'range',{C,H},_cor26},{'range',{_cor27,_cor28},_cor29}>
	      when let <_cor30> =
		    call 'erlang':'=:='
			(_cor27, C)
		in  let <_cor31> =
			call 'erlang':'=:='
			    (_cor28, C)
		    in  call 'erlang':'and'
			    (_cor30, _cor31) ->
	      let <_cor4> =
		  %% Line 951
		  call 'erlang':'+'
		      (C, 1)
	      in  let <_rec19> = {_cor4,%% Line 951
			     H}
		  in  %% Line 951
		      call 'erlang':'setelement'
			  (2, R, _rec19)
	  %% Line 952
	  <R = {'range',{L,C},_cor35},{'range',{_cor36,_cor37},_cor38}>
	      when let <_cor39> =
		    call 'erlang':'=:='
			(_cor36, C)
		in  let <_cor40> =
			call 'erlang':'=:='
			    (_cor37, C)
		    in  call 'erlang':'and'
			    (_cor39, _cor40) ->
	      let <_cor8> =
		  %% Line 953
		  call 'erlang':'-'
		      (C, 1)
	      in  let <_rec21> = {%% Line 953
		       L,_cor8}
		  in  %% Line 953
		      call 'erlang':'setelement'
			  (2, R, _rec21)
	  %% Line 954
	  <R = {'range',_cor44,_cor45},{'range',{C,_cor46},_cor47}>
	      when call 'erlang':'=:='
		    (_cor46,
		     C) ->
	      %% Line 955
	      R
	  %% Line 956
	  <R = {'range',_cor48,_cor49},_cor50> when 'true' ->
	      %% Line 957
	      R
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'range__remove_constant',2}}] )
	    -| ['compiler_generated'] )
	end
'any_type'/0 =
    %% Line 961
    fun () ->
	let <_cor0> =
	    %% Line 962
	    apply 'any_r'/0
		()
	in  %% Line 962
	    {'range',_cor0,'true'}
'any_range'/0 =
    %% Line 966
    fun () ->
	let <_cor0> =
	    %% Line 967
	    apply 'any_r'/0
		()
	in  %% Line 967
	    {'range',_cor0,'false'}
'none_range'/0 =
    %% Line 971
    fun () ->
	%% Line 972
	{'range','empty','true'}
'none_type'/0 =
    %% Line 976
    fun () ->
	%% Line 977
	{'range','empty','false'}
'any_r'/0 =
    %% Line 981
    fun () ->
	{'neg_inf','pos_inf'}
'get_range_from_args'/1 =
    %% Line 985
    fun (_cor0) ->
	%% Line 986
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[Arg|_cor2]> when 'true' ->
			    let <_cor4> =
				apply 'get_range_from_arg'/1
				    (Arg)
			    in  let <_cor5> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [_cor4|_cor5]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'get_range_from_arg'/1 =
    %% Line 990
    fun (_cor0) ->
	%% Line 991
	case call 'hipe_icode':'is_const'
		 (_cor0) of
	  %% Line 992
	  <'true'> when 'true' ->
	      let <Value> =
		  %% Line 993
		  call 'hipe_icode':'const_value'
		      (_cor0)
	      in  %% Line 994
		  case <> of
		    %% Line 995
		    <>
			when call 'erlang':'is_integer'
			      (Value) ->
			%% Line 996
			{'range',{Value,Value},'false'}
		    %% Line 997
		    <> when 'true' ->
			%% Line 998
			{'range','empty','true'}
		  end
	  %% Line 1000
	  <'false'> when 'true' ->
	      %% Line 1001
	      case call 'hipe_icode':'is_annotated_variable'
		       (_cor0) of
		%% Line 1002
		<'true'> when 'true' ->
		    %% Line 1003
		    case call 'hipe_icode':'variable_annotation'
			     (_cor0) of
		      %% Line 1004
		      <{'range_anno',{'ann',Range,_cor7,_cor8},_cor9}> when 'true' ->
			  %% Line 1005
			  Range
		      %% Line 1006
		      <{'type_anno',Type,_cor10}> when 'true' ->
			  %% Line 1007
			  apply 'range_from_simple_type'/1
			      (Type)
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor3})
			-| ['compiler_generated'] )
		    end
		%% Line 1009
		<'false'> when 'true' ->
		    %% Line 1010
		    apply 'any_type'/0
			()
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor5})
	    -| ['compiler_generated'] )
	end
'inf'/2 =
    %% Line 1021
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'range',R1,O1},{'range',R2,O2}> when 'true' ->
	      let <_cor3> =
		  %% Line 1022
		  apply 'range_inf'/2
		      (R1, R2)
	      in  let <_cor2> =
		      %% Line 1022
		      apply 'other_inf'/2
			  (O1, O2)
		  in  %% Line 1022
		      {'range',_cor3,_cor2}
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'inf',2}}] )
	    -| ['compiler_generated'] )
	end
'range_inf'/2 =
    %% Line 1026
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'empty',_cor7> when 'true' ->
	      'empty'
	  %% Line 1027
	  <_cor8,'empty'> when 'true' ->
	      'empty'
	  %% Line 1028
	  <{Min1,Max1},{Min2,Max2}> when 'true' ->
	      let <NewMin> =
		  %% Line 1029
		  apply 'inf_max'/1
		      ([Min1|[Min2|[]]])
	      in  let <NewMax> =
		      %% Line 1030
		      apply 'inf_min'/1
			  ([Max1|[Max2|[]]])
		  in  %% Line 1031
		      case apply 'inf_geq'/2
			       (NewMax, NewMin) of
			%% Line 1032
			<'true'> when 'true' ->
			    %% Line 1033
			    {NewMin,NewMax}
			%% Line 1034
			<'false'> when 'true' ->
			    %% Line 1035
			    'empty'
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor4})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'range_inf',2}}] )
	    -| ['compiler_generated'] )
	end
'other_inf'/2 =
    %% Line 1040
    fun (_cor1,_cor0) ->
	call 'erlang':'and'
	    (_cor1, _cor0)
'sup'/1 =
    %% Line 1044
    fun (_cor0) ->
	case _cor0 of
	  <[R|[]]> when 'true' ->
	      %% Line 1045
	      R
	  %% Line 1046
	  <[R1|[R2|Rest]]> when 'true' ->
	      let <_cor1> =
		  %% Line 1047
		  apply 'sup'/2
		      (R1, R2)
	      in  %% Line 1047
		  apply 'sup'/1
		      ([_cor1|Rest])
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'sup',1}}] )
	    -| ['compiler_generated'] )
	end
'sup'/2 =
    %% Line 1051
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'range',R1,O1},{'range',R2,O2}> when 'true' ->
	      let <_cor3> =
		  %% Line 1052
		  apply 'range_sup'/2
		      (R1, R2)
	      in  let <_cor2> =
		      %% Line 1052
		      apply 'other_sup'/2
			  (O1, O2)
		  in  %% Line 1052
		      {'range',_cor3,_cor2}
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'sup',2}}] )
	    -| ['compiler_generated'] )
	end
'range_sup'/2 =
    %% Line 1056
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'empty',R> when 'true' ->
	      R
	  %% Line 1057
	  <R,'empty'> when 'true' ->
	      R
	  %% Line 1058
	  <{Min1,Max1},{Min2,Max2}> when 'true' ->
	      let <NewMin> =
		  %% Line 1059
		  apply 'inf_min'/1
		      ([Min1|[Min2|[]]])
	      in  let <NewMax> =
		      %% Line 1060
		      apply 'inf_max'/1
			  ([Max1|[Max2|[]]])
		  in  %% Line 1061
		      {NewMin,NewMax}
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'range_sup',2}}] )
	    -| ['compiler_generated'] )
	end
'other_sup'/2 =
    %% Line 1065
    fun (_cor1,_cor0) ->
	call 'erlang':'or'
	    (_cor1, _cor0)
'analyse_call_or_enter_fun'/4 =
    %% Line 1072
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1074
	case apply 'basic_type'/1
		 (_cor3) of
	  %% Line 1075
	  <{'bin',Operation}> when 'true' ->
	      %% Line 1076
	      case apply 'get_range_from_args'/1
		       (_cor2) of
		<[Arg_range1|[Arg_range2|[]]]> when 'true' ->
		    let <A1_is_empty> =
			%% Line 1077
			apply 'range__is_empty'/1
			    (Arg_range1)
		    in  let <A2_is_empty> =
			    %% Line 1078
			    apply 'range__is_empty'/1
				(Arg_range2)
			in  let <_cor9> =
				%% Line 1079
				( case A1_is_empty of
				    ( <( 'true'
					 -| ['compiler_generated'] )> when 'true' ->
					  'true'
				      -| ['compiler_generated'] )
				    ( <( 'false'
					 -| ['compiler_generated'] )> when 'true' ->
					  A2_is_empty
				      -| ['compiler_generated'] )
				    ( <_cor7> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {( 'badarg'
						      -| ['compiler_generated'] ),_cor7}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    in  %% Line 1079
				case _cor9 of
				  %% Line 1080
				  <'true'> when 'true' ->
				      let <_cor10> =
					  %% Line 1081
					  apply 'none_type'/0
					      ()
				      in  %% Line 1081
					  [_cor10|[]]
				  %% Line 1082
				  <'false'> when 'true' ->
				      let <_cor11> =
					  %% Line 1083
					  apply Operation
					      (Arg_range1, Arg_range2)
				      in  %% Line 1083
					  [_cor11|[]]
				  ( <_cor12> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor12})
				    -| ['compiler_generated'] )
				end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1085
	  <{'unary',Operation}> when 'true' ->
	      %% Line 1086
	      case apply 'get_range_from_args'/1
		       (_cor2) of
		<[Arg_range|[]]> when 'true' ->
		    %% Line 1087
		    case apply 'range__is_empty'/1
			     (Arg_range) of
		      %% Line 1088
		      <'true'> when 'true' ->
			  let <_cor14> =
			      %% Line 1089
			      apply 'none_type'/0
				  ()
			  in  %% Line 1089
			      [_cor14|[]]
		      %% Line 1090
		      <'false'> when 'true' ->
			  let <_cor15> =
			      %% Line 1091
			      apply Operation
				  (Arg_range)
			  in  %% Line 1091
			      [_cor15|[]]
		      ( <_cor16> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor16})
			-| ['compiler_generated'] )
		    end
		( <_cor13> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1093
	  <{'fcall',MFA}> when 'true' ->
	      %% Line 1094
	      case _cor1 of
		%% Line 1095
		<'local'> when 'true' ->
		    let <_cor17> =
			%% Line 1096
			apply 'get_range_from_args'/1
			    (_cor2)
		    in  let <Range> =
			    %% Line 1096
			    apply _cor0
				(MFA, _cor17)
			in  %% Line 1097
			    case apply 'range__is_none'/1
				     (Range) of
			      %% Line 1098
			      <'true'> when 'true' ->
				  %% Line 1099
				  call 'erlang':'throw'
				      ('none_range')
			      %% Line 1100
			      <'false'> when 'true' ->
				  %% Line 1101
				  [Range|[]]
			      ( <_cor19> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor19})
				-| ['compiler_generated'] )
			    end
		%% Line 1103
		<'remote'> when 'true' ->
		    let <_cor20> =
			%% Line 1104
			apply 'any_type'/0
			    ()
		    in  %% Line 1104
			[_cor20|[]]
		( <_cor21> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor21})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1106
	  <'not_int'> when 'true' ->
	      let <_cor22> =
		  %% Line 1107
		  apply 'any_type'/0
		      ()
	      in  %% Line 1107
		  [_cor22|[]]
	  %% Line 1108
	  <'not_analysed'> when 'true' ->
	      let <_cor23> =
		  %% Line 1109
		  apply 'any_type'/0
		      ()
	      in  %% Line 1109
		  [_cor23|[]]
	  %% Line 1110
	  <{'hipe_bs_primop',{'bs_get_integer',Size,Flags}}> when 'true' ->
	      let <_cor24> =
		  %% Line 1111
		  call 'erlang':'length'
		      (_cor2)
	      in  let <_cor25> =
		      %% Line 1111
		      call 'erlang':'=:='
			  (_cor24, 1)
		  in  %% Line 1111
		      case apply 'analyse_bs_get_integer'/3
			       (Size, Flags, _cor25) of
			<{Min,Max}> when 'true' ->
			    let <_cor27> =
				%% Line 1112
				apply 'any_type'/0
				    ()
			    in  %% Line 1112
				[{'range',{Min,Max},'false'}|[_cor27|[]]]
			( <_cor26> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor26})
			  -| ['compiler_generated'] )
		      end
	  %% Line 1113
	  <Primop = {'hipe_bs_primop',_cor34}> when 'true' ->
	      let <Type> =
		  %% Line 1114
		  call 'hipe_icode_primops':'type'
		      (Primop)
	      in  %% Line 1115
		  apply 'range_from_type'/1
		      (Type)
	  ( <_cor29> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor29})
	    -| ['compiler_generated'] )
	end
'basic_type'/1 =
    %% Line 1127
    fun (_cor0) ->
	case _cor0 of
	  <'+'> when 'true' ->
	      let <_cor5> =
		  ( fun (_cor2,_cor1) ->
			apply 'range_add'/2
			    (_cor2, _cor1)
		    -| [{'id',{0,0,'-basic_type/1-fun-0-'}}] )
	      in  {'bin',_cor5}
	  %% Line 1128
	  <'-'> when 'true' ->
	      let <_cor10> =
		  ( fun (_cor7,_cor6) ->
			apply 'range_sub'/2
			    (_cor7, _cor6)
		    -| [{'id',{0,0,'-basic_type/1-fun-1-'}}] )
	      in  {'bin',_cor10}
	  %% Line 1129
	  <'*'> when 'true' ->
	      let <_cor15> =
		  ( fun (_cor12,_cor11) ->
			apply 'range_mult'/2
			    (_cor12, _cor11)
		    -| [{'id',{0,0,'-basic_type/1-fun-2-'}}] )
	      in  {'bin',_cor15}
	  %% Line 1130
	  <'/'> when 'true' ->
	      'not_int'
	  %% Line 1131
	  <'div'> when 'true' ->
	      let <_cor20> =
		  ( fun (_cor17,_cor16) ->
			apply 'range_div'/2
			    (_cor17, _cor16)
		    -| [{'id',{0,0,'-basic_type/1-fun-3-'}}] )
	      in  {'bin',_cor20}
	  %% Line 1132
	  <'rem'> when 'true' ->
	      let <_cor25> =
		  ( fun (_cor22,_cor21) ->
			apply 'range_rem'/2
			    (_cor22, _cor21)
		    -| [{'id',{0,0,'-basic_type/1-fun-4-'}}] )
	      in  {'bin',_cor25}
	  %% Line 1133
	  <'bor'> when 'true' ->
	      let <_cor30> =
		  ( fun (_cor27,_cor26) ->
			apply 'range_bor'/2
			    (_cor27, _cor26)
		    -| [{'id',{0,0,'-basic_type/1-fun-5-'}}] )
	      in  {'bin',_cor30}
	  %% Line 1134
	  <'band'> when 'true' ->
	      let <_cor35> =
		  ( fun (_cor32,_cor31) ->
			apply 'range_band'/2
			    (_cor32, _cor31)
		    -| [{'id',{0,0,'-basic_type/1-fun-6-'}}] )
	      in  {'bin',_cor35}
	  %% Line 1135
	  <'bxor'> when 'true' ->
	      let <_cor40> =
		  ( fun (_cor37,_cor36) ->
			apply 'range_bxor'/2
			    (_cor37, _cor36)
		    -| [{'id',{0,0,'-basic_type/1-fun-7-'}}] )
	      in  {'bin',_cor40}
	  %% Line 1136
	  <'bnot'> when 'true' ->
	      let <_cor43> =
		  ( fun (_cor41) ->
			apply 'range_bnot'/1
			    (_cor41)
		    -| [{'id',{0,0,'-basic_type/1-fun-8-'}}] )
	      in  {'unary',_cor43}
	  %% Line 1137
	  <'bsl'> when 'true' ->
	      let <_cor48> =
		  ( fun (_cor45,_cor44) ->
			apply 'range_bsl'/2
			    (_cor45, _cor44)
		    -| [{'id',{0,0,'-basic_type/1-fun-9-'}}] )
	      in  {'bin',_cor48}
	  %% Line 1138
	  <'bsr'> when 'true' ->
	      let <_cor53> =
		  ( fun (_cor50,_cor49) ->
			apply 'range_bsr'/2
			    (_cor50, _cor49)
		    -| [{'id',{0,0,'-basic_type/1-fun-10-'}}] )
	      in  {'bin',_cor53}
	  %% Line 1140
	  <'unsafe_bor'> when 'true' ->
	      let <_cor58> =
		  %% Line 1141
		  ( fun (_cor55,_cor54) ->
			apply 'range_bor'/2
			    (_cor55, _cor54)
		    -| [{'id',{0,0,'-basic_type/1-fun-11-'}}] )
	      in  %% Line 1141
		  {'bin',_cor58}
	  %% Line 1142
	  <'unsafe_band'> when 'true' ->
	      let <_cor63> =
		  %% Line 1143
		  ( fun (_cor60,_cor59) ->
			apply 'range_band'/2
			    (_cor60, _cor59)
		    -| [{'id',{0,0,'-basic_type/1-fun-12-'}}] )
	      in  %% Line 1143
		  {'bin',_cor63}
	  %% Line 1144
	  <'unsafe_bxor'> when 'true' ->
	      let <_cor68> =
		  %% Line 1145
		  ( fun (_cor65,_cor64) ->
			apply 'range_bxor'/2
			    (_cor65, _cor64)
		    -| [{'id',{0,0,'-basic_type/1-fun-13-'}}] )
	      in  %% Line 1145
		  {'bin',_cor68}
	  %% Line 1146
	  <'unsafe_bnot'> when 'true' ->
	      let <_cor71> =
		  %% Line 1147
		  ( fun (_cor69) ->
			apply 'range_bnot'/1
			    (_cor69)
		    -| [{'id',{0,0,'-basic_type/1-fun-14-'}}] )
	      in  %% Line 1147
		  {'unary',_cor71}
	  %% Line 1148
	  <'unsafe_bsl'> when 'true' ->
	      let <_cor76> =
		  %% Line 1149
		  ( fun (_cor73,_cor72) ->
			apply 'range_bsl'/2
			    (_cor73, _cor72)
		    -| [{'id',{0,0,'-basic_type/1-fun-15-'}}] )
	      in  %% Line 1149
		  {'bin',_cor76}
	  %% Line 1150
	  <'unsafe_bsr'> when 'true' ->
	      let <_cor81> =
		  %% Line 1151
		  ( fun (_cor78,_cor77) ->
			apply 'range_bsr'/2
			    (_cor78, _cor77)
		    -| [{'id',{0,0,'-basic_type/1-fun-16-'}}] )
	      in  %% Line 1151
		  {'bin',_cor81}
	  %% Line 1152
	  <'unsafe_add'> when 'true' ->
	      let <_cor86> =
		  %% Line 1153
		  ( fun (_cor83,_cor82) ->
			apply 'range_add'/2
			    (_cor83, _cor82)
		    -| [{'id',{0,0,'-basic_type/1-fun-17-'}}] )
	      in  %% Line 1153
		  {'bin',_cor86}
	  %% Line 1154
	  <'unsafe_sub'> when 'true' ->
	      let <_cor91> =
		  %% Line 1155
		  ( fun (_cor88,_cor87) ->
			apply 'range_sub'/2
			    (_cor88, _cor87)
		    -| [{'id',{0,0,'-basic_type/1-fun-18-'}}] )
	      in  %% Line 1155
		  {'bin',_cor91}
	  %% Line 1156
	  <'extra_unsafe_add'> when 'true' ->
	      let <_cor96> =
		  %% Line 1157
		  ( fun (_cor93,_cor92) ->
			apply 'range_add'/2
			    (_cor93, _cor92)
		    -| [{'id',{0,0,'-basic_type/1-fun-19-'}}] )
	      in  %% Line 1157
		  {'bin',_cor96}
	  %% Line 1158
	  <'extra_unsafe_sub'> when 'true' ->
	      let <_cor101> =
		  %% Line 1159
		  ( fun (_cor98,_cor97) ->
			apply 'range_sub'/2
			    (_cor98, _cor97)
		    -| [{'id',{0,0,'-basic_type/1-fun-20-'}}] )
	      in  %% Line 1159
		  {'bin',_cor101}
	  %% Line 1161
	  <Primop = {'hipe_bs_primop',_cor103}> when 'true' ->
	      Primop
	  %% Line 1163
	  <'call_fun'> when 'true' ->
	      'not_analysed'
	  %% Line 1164
	  <'clear_timeout'> when 'true' ->
	      'not_analysed'
	  %% Line 1165
	  <'redtest'> when 'true' ->
	      'not_analysed'
	  %% Line 1166
	  <'set_timeout'> when 'true' ->
	      'not_analysed'
	  %% Line 1167
	  <{'apply_N',_cor104}> when 'true' ->
	      'not_analysed'
	  %% Line 1168
	  <{'closure_element',_cor105}> when 'true' ->
	      'not_analysed'
	  %% Line 1169
	  <{'gc_test',_cor106}> when 'true' ->
	      'not_analysed'
	  %% Line 1171
	  <'check_get_msg'> when 'true' ->
	      'not_analysed'
	  %% Line 1172
	  <'next_msg'> when 'true' ->
	      'not_analysed'
	  %% Line 1173
	  <'select_msg'> when 'true' ->
	      'not_analysed'
	  %% Line 1174
	  <'suspend_msg'> when 'true' ->
	      'not_analysed'
	  %% Line 1176
	  <'enter_fun'> when 'true' ->
	      'not_analysed'
	  %% Line 1177
	  <{'mkfun',_cor107,_cor108,_cor109}> when 'true' ->
	      'not_int'
	  %% Line 1178
	  <MFA = {_X_M,_X_F,_X_A}> when 'true' ->
	      {'fcall',MFA}
	  %% Line 1180
	  <'conv_to_float'> when 'true' ->
	      'not_int'
	  %% Line 1181
	  <'fclearerror'> when 'true' ->
	      'not_analysed'
	  %% Line 1182
	  <'fcheckerror'> when 'true' ->
	      'not_analysed'
	  %% Line 1183
	  <'fnegate'> when 'true' ->
	      'not_int'
	  %% Line 1184
	  <'fp_add'> when 'true' ->
	      'not_int'
	  %% Line 1185
	  <'fp_div'> when 'true' ->
	      'not_int'
	  %% Line 1186
	  <'fp_mul'> when 'true' ->
	      'not_int'
	  %% Line 1187
	  <'fp_sub'> when 'true' ->
	      'not_int'
	  %% Line 1188
	  <'unsafe_tag_float'> when 'true' ->
	      'not_int'
	  %% Line 1189
	  <'unsafe_untag_float'> when 'true' ->
	      'not_int'
	  %% Line 1191
	  <'cons'> when 'true' ->
	      'not_int'
	  %% Line 1192
	  <'mktuple'> when 'true' ->
	      'not_int'
	  %% Line 1193
	  <'unsafe_hd'> when 'true' ->
	      'not_analysed'
	  %% Line 1194
	  <'unsafe_tl'> when 'true' ->
	      'not_int'
	  %% Line 1195
	  <{'element',_cor110}> when 'true' ->
	      'not_analysed'
	  %% Line 1196
	  <{'unsafe_element',_cor111}> when 'true' ->
	      'not_analysed'
	  %% Line 1197
	  <{'unsafe_update_element',_cor112}> when 'true' ->
	      'not_analysed'
	  ( <_cor102> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor102})
		  -| [{'function_name',{'basic_type',1}}] )
	    -| ['compiler_generated'] )
	end
'analyse_bs_get_integer'/3 =
    %% Line 1201
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Size,Flags,'true'> when 'true' ->
	      let <Signed> =
		  %% Line 1202
		  call 'erlang':'band'
		      (Flags, 4)
	      in  let <_cor18,Max,Min> =
		      %% Line 1203
		      case <> of
			<>
			    when call 'erlang':'=:='
				  (Signed,
				   0) ->
			    let <_cor4> =
				%% Line 1204
				call 'erlang':'bsl'
				    (1, Size)
			    in  let <Max> =
				    %% Line 1204
				    call 'erlang':'-'
					(_cor4, 1)
				in  <%% Line 1205
				     0,Max,%% Line 1205
					   0>
			%% Line 1206
			<> when 'true' ->
			    let <_cor7> =
				%% Line 1207
				call 'erlang':'-'
				    (Size, 1)
			    in  let <_cor8> =
				    %% Line 1207
				    call 'erlang':'bsl'
					(1, _cor7)
				in  let <Max> =
					%% Line 1207
					call 'erlang':'-'
					    (_cor8, 1)
				    in  let <_cor10> =
					    %% Line 1208
					    call 'erlang':'-'
						(Size, 1)
					in  let <_cor11> =
						%% Line 1208
						call 'erlang':'bsl'
						    (1, _cor10)
					    in  let <Min> =
						    %% Line 1208
						    call 'erlang':'-'
							(_cor11)
						in  <Min,Max,Min>
		      end
		  in  %% Line 1210
		      {Min,Max}
	  %% Line 1211
	  <Size,Flags,'false'>
	      when let <_cor13> =
		    call 'erlang':'is_integer'
			(Size)
		in  let <_cor14> =
			%% Line 1212
			call 'erlang':'is_integer'
			    (Flags)
		    in  call 'erlang':'and'
			    (_cor13, _cor14) ->
	      %% Line 1213
	      apply 'any_r'/0
		  ()
	  ( <_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15})
		  -| [{'function_name',{'analyse_bs_get_integer',3}}] )
	    -| ['compiler_generated'] )
	end
'range_add'/2 =
    %% Line 1223
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1224
	    apply 'range__min'/1
		(_cor1)
	in  let <_cor2> =
		%% Line 1224
		apply 'range__min'/1
		    (_cor0)
	    in  let <NewMin> =
		    %% Line 1224
		    apply 'inf_add'/2
			(_cor3, _cor2)
		in  let <_cor6> =
			%% Line 1225
			apply 'range__max'/1
			    (_cor1)
		    in  let <_cor5> =
			    %% Line 1225
			    apply 'range__max'/1
				(_cor0)
			in  let <NewMax> =
				%% Line 1225
				apply 'inf_add'/2
				    (_cor6, _cor5)
			    in  let <_cor10> =
				    %% Line 1226
				    ( case apply 'other'/1
					       (_cor1) of
					( <( 'true'
					     -| ['compiler_generated'] )> when 'true' ->
					      'true'
					  -| ['compiler_generated'] )
					( <( 'false'
					     -| ['compiler_generated'] )> when 'true' ->
					      apply 'other'/1
						  (_cor0)
					  -| ['compiler_generated'] )
					( <_cor8> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {( 'badarg'
							  -| ['compiler_generated'] ),_cor8}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				in  %% Line 1227
				    apply 'range_init'/2
					({NewMin,NewMax}, _cor10)
'range_sub'/2 =
    %% Line 1231
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1232
	    apply 'range__max'/1
		(_cor0)
	in  let <_cor3> =
		%% Line 1232
		apply 'inf_inv'/1
		    (_cor2)
	    in  let <_cor4> =
		    %% Line 1233
		    apply 'range__min'/1
			(_cor0)
		in  let <_cor5> =
			%% Line 1233
			apply 'inf_inv'/1
			    (_cor4)
		    in  let <Min_sub> =
			    %% Line 1232
			    apply 'inf_min'/1
				([_cor3|%% Line 1233
					[_cor5|[]]])
			in  let <_cor7> =
				%% Line 1234
				apply 'range__max'/1
				    (_cor0)
			    in  let <_cor8> =
				    %% Line 1234
				    apply 'inf_inv'/1
					(_cor7)
				in  let <_cor9> =
					%% Line 1235
					apply 'range__min'/1
					    (_cor0)
				    in  let <_cor10> =
					    %% Line 1235
					    apply 'inf_inv'/1
						(_cor9)
					in  let <Max_sub> =
						%% Line 1234
						apply 'inf_max'/1
						    ([_cor8|%% Line 1235
							    [_cor10|[]]])
					    in  let <_cor12> =
						    %% Line 1236
						    apply 'range__min'/1
							(_cor1)
						in  let <NewMin> =
							%% Line 1236
							apply 'inf_add'/2
							    (_cor12, Min_sub)
						    in  let <_cor14> =
							    %% Line 1237
							    apply 'range__max'/1
								(_cor1)
							in  let <NewMax> =
								%% Line 1237
								apply 'inf_add'/2
								    (_cor14, Max_sub)
							    in  let <_cor18> =
								    %% Line 1238
								    ( case apply 'other'/1
									       (_cor1) of
									( <( 'true'
									     -| ['compiler_generated'] )> when 'true' ->
									      'true'
									  -| ['compiler_generated'] )
									( <( 'false'
									     -| ['compiler_generated'] )> when 'true' ->
									      apply 'other'/1
										  (_cor0)
									  -| ['compiler_generated'] )
									( <_cor16> when 'true' ->
									      ( call ( 'erlang'
										       -| ['compiler_generated'] ):( 'error'
														     -| ['compiler_generated'] )
										    (( {( 'badarg'
											  -| ['compiler_generated'] ),_cor16}
										       -| ['compiler_generated'] ))
										-| ['compiler_generated'] )
									  -| ['compiler_generated'] )
								      end
								      -| ['compiler_generated'] )
								in  %% Line 1239
								    apply 'range_init'/2
									({NewMin,NewMax}, _cor18)
'range_mult'/2 =
    %% Line 1243
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'range','empty','true'},_X_Range2> when 'true' ->
	      %% Line 1244
	      apply 'range_init'/2
		  ('empty', 'true')
	  %% Line 1245
	  <_X_Range1,{'range','empty','true'}> when 'true' ->
	      %% Line 1246
	      apply 'range_init'/2
		  ('empty', 'true')
	  %% Line 1247
	  <Range1,Range2> when 'true' ->
	      let <Min1> =
		  %% Line 1248
		  apply 'range__min'/1
		      (Range1)
	      in  let <Min2> =
		      %% Line 1249
		      apply 'range__min'/1
			  (Range2)
		  in  let <Max1> =
			  %% Line 1250
			  apply 'range__max'/1
			      (Range1)
		      in  let <Max2> =
			      %% Line 1251
			      apply 'range__max'/1
				  (Range2)
			  in  let <GreaterMin1> =
				  %% Line 1252
				  apply 'inf_greater_zero'/1
				      (Min1)
			      in  let <GreaterMin2> =
				      %% Line 1253
				      apply 'inf_greater_zero'/1
					  (Min2)
				  in  let <GreaterMax1> =
					  %% Line 1254
					  apply 'inf_greater_zero'/1
					      (Max1)
				      in  let <GreaterMax2> =
					      %% Line 1255
					      apply 'inf_greater_zero'/1
						  (Max2)
					  in  let <_cor28> =
						  %% Line 1257
						  case <> of
						    <>
							when call 'erlang':'=:='
							      (GreaterMin1,
							       'true') ->
							%% Line 1258
							case <> of
							  <>
							      when call 'erlang':'=:='
								    (GreaterMin2,
								     'true') ->
							      let <_cor11> =
								  apply 'inf_mult'/2
								      (Min1, Min2)
							      in  let <_cor10> =
								      apply 'inf_mult'/2
									  (Max1, Max2)
								  in  {_cor11,_cor10}
							  %% Line 1259
							  <>
							      when call 'erlang':'=:='
								    (GreaterMax2,
								     'true') ->
							      let <_cor13> =
								  apply 'inf_mult'/2
								      (Min2, Max1)
							      in  let <_cor12> =
								      apply 'inf_mult'/2
									  (Max2, Max1)
								  in  {_cor13,_cor12}
							  %% Line 1260
							  <> when 'true' ->
							      let <_cor15> =
								  apply 'inf_mult'/2
								      (Min2, Max1)
							      in  let <_cor14> =
								      apply 'inf_mult'/2
									  (Max2, Min1)
								  in  {_cor15,_cor14}
							end
						    %% Line 1263
						    <>
							when call 'erlang':'=:='
							      (GreaterMin2,
							       'true') ->
							let <_cor16> =
							    %% Line 1264
							    apply 'range_mult'/2
								(Range2, Range1)
							in  %% Line 1264
							    apply 'range'/1
								(_cor16)
						    %% Line 1265
						    <>
							when call 'erlang':'=:='
							      (GreaterMax1,
							       'true') ->
							%% Line 1266
							case <> of
							  <>
							      when call 'erlang':'=:='
								    (GreaterMax2,
								     'true') ->
							      let <_cor17> =
								  %% Line 1267
								  apply 'inf_mult'/2
								      (Min2, Max1)
							      in  let <_cor18> =
								      %% Line 1267
								      apply 'inf_mult'/2
									  (Max2, Min1)
								  in  let <NewMin> =
									  %% Line 1267
									  apply 'inf_min'/1
									      ([_cor17|[_cor18|[]]])
								      in  let <_cor20> =
									      %% Line 1268
									      apply 'inf_mult'/2
										  (Min2, Min1)
									  in  let <_cor21> =
										  %% Line 1268
										  apply 'inf_mult'/2
										      (Max2, Max1)
									      in  let <NewMax> =
										      %% Line 1268
										      apply 'inf_max'/1
											  ([_cor20|[_cor21|[]]])
										  in  %% Line 1269
										      {NewMin,NewMax}
							  %% Line 1270
							  <> when 'true' ->
							      let <_cor24> =
								  %% Line 1271
								  apply 'inf_mult'/2
								      (Min2, Max1)
							      in  let <_cor23> =
								      %% Line 1271
								      apply 'inf_mult'/2
									  (Min2, Min1)
								  in  %% Line 1271
								      {_cor24,_cor23}
							end
						    %% Line 1273
						    <>
							when call 'erlang':'=:='
							      (GreaterMax2,
							       'true') ->
							let <_cor25> =
							    %% Line 1274
							    apply 'range_mult'/2
								(Range2, Range1)
							in  %% Line 1274
							    apply 'range'/1
								(_cor25)
						    %% Line 1275
						    <> when 'true' ->
							let <_cor27> =
							    %% Line 1276
							    apply 'inf_mult'/2
								(Max1, Max2)
							in  let <_cor26> =
								%% Line 1276
								apply 'inf_mult'/2
								    (Min2, Min1)
							    in  %% Line 1276
								{_cor27,_cor26}
						  end
					      in  let <_cor32> =
						      %% Line 1278
						      ( case apply 'other'/1
								 (Range1) of
							  ( <( 'true'
							       -| ['compiler_generated'] )> when 'true' ->
								'true'
							    -| ['compiler_generated'] )
							  ( <( 'false'
							       -| ['compiler_generated'] )> when 'true' ->
								apply 'other'/1
								    (Range2)
							    -| ['compiler_generated'] )
							  ( <_cor30> when 'true' ->
								( call ( 'erlang'
									 -| ['compiler_generated'] ):( 'error'
												       -| ['compiler_generated'] )
								      (( {( 'badarg'
									    -| ['compiler_generated'] ),_cor30}
									 -| ['compiler_generated'] ))
								  -| ['compiler_generated'] )
							    -| ['compiler_generated'] )
							end
							-| ['compiler_generated'] )
						  in  %% Line 1279
						      apply 'range_init'/2
							  (_cor28, _cor32)
	end
'extreme_divisors'/1 =
    %% Line 1283
    fun (_cor0) ->
	case _cor0 of
	  <{'range',{0,0},_cor6}> when 'true' ->
	      {0,0}
	  %% Line 1284
	  <{'range',{0,Max},_cor7}> when 'true' ->
	      {1,Max}
	  %% Line 1285
	  <{'range',{Min,0},_cor8}> when 'true' ->
	      {Min,-1}
	  %% Line 1286
	  <{'range',{Min,Max},_cor9}> when 'true' ->
	      %% Line 1287
	      case apply 'inf_geq'/2
		       (Min, 0) of
		%% Line 1288
		<'true'> when 'true' ->
		    {Min,Max}
		%% Line 1289
		<'false'> when 'true' ->
		    %% Line 1290
		    case apply 'inf_geq'/2
			     (0, Max) of
		      %% Line 1291
		      <'true'> when 'true' ->
			  {Min,Max}
		      %% Line 1292
		      <'false'> when 'true' ->
			  {-1,1}
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'extreme_divisors',1}}] )
	    -| ['compiler_generated'] )
	end
'range_div'/2 =
    %% Line 1299
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <_cor14,{'range',{0,0},_cor15}> when 'true' ->
	      %% Line 1300
	      apply 'range_init'/2
		  ('empty', 'false')
	  %% Line 1301
	  <{'range','empty',_cor16},_cor17> when 'true' ->
	      %% Line 1302
	      apply 'range_init'/2
		  ('empty', 'false')
	  %% Line 1303
	  <_cor18,{'range','empty',_cor19}> when 'true' ->
	      %% Line 1304
	      apply 'range_init'/2
		  ('empty', 'false')
	  %% Line 1305
	  <Range1,Den> when 'true' ->
	      let <Min1> =
		  %% Line 1306
		  apply 'range__min'/1
		      (Range1)
	      in  let <Max1> =
		      %% Line 1307
		      apply 'range__max'/1
			  (Range1)
		  in  %% Line 1308
		      case apply 'extreme_divisors'/1
			       (Den) of
			<{Min2,Max2}> when 'true' ->
			    let <_cor5> =
				%% Line 1309
				apply 'inf_div'/2
				    (Min1, Min2)
			    in  let <_cor6> =
				    %% Line 1309
				    apply 'inf_div'/2
					(Min1, Max2)
				in  let <_cor7> =
					%% Line 1310
					apply 'inf_div'/2
					    (Max1, Min2)
				    in  let <_cor8> =
					    %% Line 1310
					    apply 'inf_div'/2
						(Max1, Max2)
					in  let <Min_max_list> =
						%% Line 1309
						[_cor5|[_cor6|%% Line 1310
							      [_cor7|[_cor8|[]]]]]
					    in  let <_cor11> =
						    %% Line 1311
						    apply 'inf_min'/1
							(Min_max_list)
						in  let <_cor10> =
							%% Line 1311
							apply 'inf_max'/1
							    (Min_max_list)
						    in  %% Line 1311
							apply 'range_init'/2
							    ({_cor11,_cor10}, 'false')
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor4})
			  -| ['compiler_generated'] )
		      end
	end
'range_rem'/2 =
    %% Line 1315
    fun (_cor1,_cor0) ->
	let <Min1> =
	    %% Line 1317
	    apply 'range__min'/1
		(_cor1)
	in  let <Max1> =
		%% Line 1318
		apply 'range__max'/1
		    (_cor1)
	    in  let <Min2> =
		    %% Line 1319
		    apply 'range__min'/1
			(_cor0)
		in  let <Max2> =
			%% Line 1320
			apply 'range__max'/1
			    (_cor0)
		    in  let <Min1_geq_zero> =
			    %% Line 1321
			    apply 'inf_geq'/2
				(Min1, 0)
			in  let <Max1_leq_zero> =
				%% Line 1322
				apply 'inf_geq'/2
				    (0, Max1)
			    in  let <_cor8> =
				    %% Line 1323
				    apply 'inf_abs'/1
					(Min2)
				in  let <_cor9> =
					%% Line 1323
					apply 'inf_abs'/1
					    (Max2)
				    in  let <Max_range2> =
					    %% Line 1323
					    apply 'inf_max'/1
						([_cor8|[_cor9|[]]])
					in  let <Max_range2_leq_zero> =
						%% Line 1324
						apply 'inf_geq'/2
						    (0, Max_range2)
					    in  let <_cor12> =
						    %% Line 1326
						    case <> of
						      <>
							  when call 'erlang':'=:='
								(Min1_geq_zero,
								 'true') ->
							  0
						      %% Line 1327
						      <>
							  when call 'erlang':'=:='
								(Max_range2_leq_zero,
								 'true') ->
							  Max_range2
						      %% Line 1328
						      <> when 'true' ->
							  apply 'inf_inv'/1
							      (Max_range2)
						    end
						in  let <_cor14> =
							%% Line 1331
							case <> of
							  <>
							      when call 'erlang':'=:='
								    (Max1_leq_zero,
								     'true') ->
							      0
							  %% Line 1332
							  <>
							      when call 'erlang':'=:='
								    (Max_range2_leq_zero,
								     'true') ->
							      apply 'inf_inv'/1
								  (Max_range2)
							  %% Line 1333
							  <> when 'true' ->
							      Max_range2
							end
						    in  %% Line 1335
							apply 'range_init'/2
							    ({_cor12,_cor14}, 'false')
'range_bsr'/2 =
    %% Line 1341
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Range1,Range2 = {'range',{Min,Max},_cor9}> when 'true' ->
	      let <_cor4> =
		  %% Line 1342
		  apply 'inf_inv'/1
		      (Max)
	      in  let <_cor3> =
		      %% Line 1342
		      apply 'inf_inv'/1
			  (Min)
		  in  let <_cor2> =
			  %% Line 1342
			  apply 'other'/1
			      (Range2)
		      in  let <New_Range2> =
			      %% Line 1342
			      apply 'range_init'/2
				  ({_cor4,_cor3}, _cor2)
			  in  %% Line 1343
			      apply 'range_bsl'/2
				  (Range1, New_Range2)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'range_bsr',2}}] )
	    -| ['compiler_generated'] )
	end
'range_bsl'/2 =
    %% Line 1349
    fun (_cor1,_cor0) ->
	let <Min1> =
	    %% Line 1350
	    apply 'range__min'/1
		(_cor1)
	in  let <Min2> =
		%% Line 1351
		apply 'range__min'/1
		    (_cor0)
	    in  let <Max1> =
		    %% Line 1352
		    apply 'range__max'/1
			(_cor1)
		in  let <Max2> =
			%% Line 1353
			apply 'range__max'/1
			    (_cor0)
		    in  let <Min1Geq0> =
			    %% Line 1354
			    apply 'inf_geq'/2
				(Min1, 0)
			in  let <_cor7> =
				%% Line 1355
				apply 'inf_geq'/2
				    (Max1, 0)
			    in  let <Max1Less0> =
				    %% Line 1355
				    call 'erlang':'not'
					(_cor7)
				in  let <_cor15> =
					%% Line 1357
					case <> of
					  <>
					      when call 'erlang':'=:='
						    (Min1Geq0,
						     'true') ->
					      let <_cor10> =
						  %% Line 1358
						  apply 'inf_bsl'/2
						      (Min1, Min2)
					      in  let <_cor9> =
						      %% Line 1358
						      apply 'inf_bsl'/2
							  (Max1, Max2)
						  in  %% Line 1358
						      {_cor10,_cor9}
					  %% Line 1359
					  <> when 'true' ->
					      %% Line 1360
					      case <> of
						<>
						    when Max1Less0 ->
						    let <_cor12> =
							apply 'inf_bsl'/2
							    (Min1, Max2)
						    in  let <_cor11> =
							    apply 'inf_bsl'/2
								(Max1, Min2)
							in  {_cor12,_cor11}
						%% Line 1361
						<> when 'true' ->
						    let <_cor14> =
							apply 'inf_bsl'/2
							    (Min1, Max2)
						    in  let <_cor13> =
							    apply 'inf_bsl'/2
								(Max1, Max2)
							in  {_cor14,_cor13}
					      end
					end
				    in  %% Line 1364
					apply 'range_init'/2
					    (_cor15, 'false')
'range_bnot'/1 =
    %% Line 1368
    fun (_cor0) ->
	let <Minus_one> =
	    %% Line 1369
	    apply 'range_init'/2
		({-1,-1}, 'false')
	in  let <_cor4> =
		%% Line 1370
		apply 'range_mult'/2
		    (_cor0, Minus_one)
	    in  %% Line 1370
		apply 'range_add'/2
		    (_cor4, Minus_one)
'width'/1 =
    %% Line 1374
    fun (_cor0) ->
	case _cor0 of
	  <{Min,Max}> when 'true' ->
	      let <_cor1> =
		  apply 'width'/1
		      (Min)
	      in  let <_cor2> =
		      apply 'width'/1
			  (Max)
		  in  apply 'inf_max'/1
			  ([_cor1|[_cor2|[]]])
	  %% Line 1375
	  <'pos_inf'> when 'true' ->
	      'pos_inf'
	  %% Line 1376
	  <'neg_inf'> when 'true' ->
	      'pos_inf'
	  %% Line 1377
	  <X>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor4> =
			call 'erlang':'>='
			    (_cor0, 0)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      apply 'poswidth'/2
		  (X, 0)
	  %% Line 1378
	  <X>
	      when let <_cor5> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor6> =
			call 'erlang':'<'
			    (_cor0, 0)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      apply 'negwidth'/2
		  (X, 0)
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'width',1}}] )
	    -| ['compiler_generated'] )
	end
'poswidth'/2 =
    %% Line 1382
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1383
	    call 'erlang':'bsl'
		(1, _cor0)
	in  %% Line 1383
	    case <> of
	      %% Line 1384
	      <>
		  when call 'erlang':'<'
			(_cor1,
			 _cor2) ->
		  _cor0
	      %% Line 1385
	      <> when 'true' ->
		  let <_cor3> =
		      call 'erlang':'+'
			  (_cor0, 1)
		  in  apply 'poswidth'/2
			  (_cor1, _cor3)
	    end
'negwidth'/2 =
    %% Line 1390
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1391
	    call 'erlang':'bsl'
		(-1, _cor0)
	in  %% Line 1391
	    case <> of
	      %% Line 1392
	      <>
		  when call 'erlang':'>'
			(_cor1,
			 _cor3) ->
		  _cor0
	      %% Line 1393
	      <> when 'true' ->
		  let <_cor4> =
		      call 'erlang':'+'
			  (_cor0, 1)
		  in  apply 'negwidth'/2
			  (_cor1, _cor4)
	    end
'range_band'/2 =
    %% Line 1398
    fun (_cor1,_cor0) ->
	%% Line 1399
	case apply 'range'/1
		 (_cor1) of
	  <MM1 = {_X_Min1,Max1}> when 'true' ->
	      %% Line 1400
	      case apply 'range'/1
		       (_cor0) of
		<MM2 = {_X_Min2,Max2}> when 'true' ->
		    let <Width1> =
			%% Line 1401
			apply 'width'/1
			    (MM1)
		    in  let <Width2> =
			    %% Line 1402
			    apply 'width'/1
				(MM2)
			in  let <_cor7> =
				%% Line 1404
				apply 'classify_range'/1
				    (_cor1)
			    in  let <_cor6> =
				    %% Line 1404
				    apply 'classify_range'/1
					(_cor0)
				in  let <_cor24> =
					%% Line 1404
					case <_cor7,_cor6> of
					  %% Line 1405
					  <'minus_minus','minus_minus'> when 'true' ->
					      let <Width> =
						  %% Line 1406
						  apply 'inf_max'/1
						      ([Width1|[Width2|[]]])
					      in  let <_cor11> =
						      %% Line 1407
						      apply 'inf_bsl'/2
							  (-1, Width)
						  in  %% Line 1407
						      {_cor11,-1}
					  %% Line 1408
					  <'minus_minus','minus_plus'> when 'true' ->
					      let <Width> =
						  %% Line 1409
						  apply 'inf_max'/1
						      ([Width1|[Width2|[]]])
					      in  let <_cor14> =
						      %% Line 1410
						      apply 'inf_bsl'/2
							  (-1, Width)
						  in  %% Line 1410
						      {_cor14,Max2}
					  %% Line 1411
					  <'minus_minus','plus_plus'> when 'true' ->
					      %% Line 1412
					      {0,Max2}
					  %% Line 1413
					  <'minus_plus','minus_minus'> when 'true' ->
					      let <Width> =
						  %% Line 1414
						  apply 'inf_max'/1
						      ([Width1|[Width2|[]]])
					      in  let <_cor17> =
						      %% Line 1415
						      apply 'inf_bsl'/2
							  (-1, Width)
						  in  %% Line 1415
						      {_cor17,Max1}
					  %% Line 1416
					  <'minus_plus','minus_plus'> when 'true' ->
					      let <Width> =
						  %% Line 1417
						  apply 'inf_max'/1
						      ([Width1|[Width2|[]]])
					      in  let <_cor21> =
						      %% Line 1418
						      apply 'inf_bsl'/2
							  (-1, Width)
						  in  let <_cor19> =
							  %% Line 1418
							  apply 'inf_max'/1
							      ([Max1|[Max2|[]]])
						      in  %% Line 1418
							  {_cor21,_cor19}
					  %% Line 1419
					  <'minus_plus','plus_plus'> when 'true' ->
					      %% Line 1420
					      {0,Max2}
					  %% Line 1421
					  <'plus_plus','minus_minus'> when 'true' ->
					      %% Line 1422
					      {0,Max1}
					  %% Line 1423
					  <'plus_plus','minus_plus'> when 'true' ->
					      %% Line 1424
					      {0,Max1}
					  %% Line 1425
					  <'plus_plus','plus_plus'> when 'true' ->
					      let <_cor22> =
						  %% Line 1426
						  apply 'inf_min'/1
						      ([Max1|[Max2|[]]])
					      in  %% Line 1426
						  {0,_cor22}
					  ( <_fol291,_fol292> when 'true' ->
						let <_cor23> = {_fol291,_fol292}
						in  primop 'match_fail'
							({'case_clause',_cor23})
					    -| ['compiler_generated'] )
					end
				    in  %% Line 1428
					apply 'range_init'/2
					    (_cor24, 'false')
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'range_bor'/2 =
    %% Line 1432
    fun (_cor1,_cor0) ->
	%% Line 1433
	case apply 'range'/1
		 (_cor1) of
	  <MM1 = {Min1,_X_Max1}> when 'true' ->
	      %% Line 1434
	      case apply 'range'/1
		       (_cor0) of
		<MM2 = {Min2,_X_Max2}> when 'true' ->
		    let <Width1> =
			%% Line 1435
			apply 'width'/1
			    (MM1)
		    in  let <Width2> =
			    %% Line 1436
			    apply 'width'/1
				(MM2)
			in  let <_cor7> =
				%% Line 1438
				apply 'classify_range'/1
				    (_cor1)
			    in  let <_cor6> =
				    %% Line 1438
				    apply 'classify_range'/1
					(_cor0)
				in  let <_cor32> =
					%% Line 1438
					case <_cor7,_cor6> of
					  %% Line 1439
					  <'minus_minus','minus_minus'> when 'true' ->
					      let <_cor9> =
						  %% Line 1440
						  apply 'inf_max'/1
						      ([Min1|[Min2|[]]])
					      in  %% Line 1440
						  {_cor9,-1}
					  %% Line 1441
					  <'minus_minus','minus_plus'> when 'true' ->
					      %% Line 1442
					      {Min1,-1}
					  %% Line 1443
					  <'minus_minus','plus_plus'> when 'true' ->
					      %% Line 1444
					      {Min1,-1}
					  %% Line 1445
					  <'minus_plus','minus_minus'> when 'true' ->
					      %% Line 1446
					      {Min2,-1}
					  %% Line 1447
					  <'minus_plus','minus_plus'> when 'true' ->
					      let <Width> =
						  %% Line 1448
						  apply 'inf_max'/1
						      ([Width1|[Width2|[]]])
					      in  let <_cor17> =
						      %% Line 1449
						      apply 'inf_min'/1
							  ([Min1|[Min2|[]]])
						  in  let <_cor14> =
							  %% Line 1449
							  apply 'inf_bsl'/2
							      (1, Width)
						      in  let <_cor16> =
							      %% Line 1449
							      apply 'inf_add'/2
								  (-1, _cor14)
							  in  %% Line 1449
							      {_cor17,_cor16}
					  %% Line 1450
					  <'minus_plus','plus_plus'> when 'true' ->
					      let <Width> =
						  %% Line 1451
						  apply 'inf_max'/1
						      ([Width1|[Width2|[]]])
					      in  let <_cor19> =
						      %% Line 1452
						      apply 'inf_bsl'/2
							  (1, Width)
						  in  let <_cor21> =
							  %% Line 1452
							  apply 'inf_add'/2
							      (-1, _cor19)
						      in  %% Line 1452
							  {Min1,_cor21}
					  %% Line 1453
					  <'plus_plus','minus_minus'> when 'true' ->
					      %% Line 1454
					      {Min2,-1}
					  %% Line 1455
					  <'plus_plus','minus_plus'> when 'true' ->
					      let <Width> =
						  %% Line 1456
						  apply 'inf_max'/1
						      ([Width1|[Width2|[]]])
					      in  let <_cor24> =
						      %% Line 1457
						      apply 'inf_bsl'/2
							  (1, Width)
						  in  let <_cor26> =
							  %% Line 1457
							  apply 'inf_add'/2
							      (-1, _cor24)
						      in  %% Line 1457
							  {Min2,_cor26}
					  %% Line 1458
					  <'plus_plus','plus_plus'> when 'true' ->
					      let <Width> =
						  %% Line 1459
						  apply 'inf_max'/1
						      ([Width1|[Width2|[]]])
					      in  let <_cor28> =
						      %% Line 1460
						      apply 'inf_bsl'/2
							  (1, Width)
						  in  let <_cor30> =
							  %% Line 1460
							  apply 'inf_add'/2
							      (-1, _cor28)
						      in  %% Line 1460
							  {0,_cor30}
					  ( <_fol295,_fol296> when 'true' ->
						let <_cor31> = {_fol295,_fol296}
						in  primop 'match_fail'
							({'case_clause',_cor31})
					    -| ['compiler_generated'] )
					end
				    in  %% Line 1462
					apply 'range_init'/2
					    (_cor32, 'false')
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'classify_range'/1 =
    %% Line 1466
    fun (_cor0) ->
	%% Line 1467
	case apply 'range'/1
		 (_cor0) of
	  %% Line 1468
	  <{'neg_inf',Number}>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(Number)
		in  let <_cor2> =
			call 'erlang':'<'
			    (Number, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      'minus_minus'
	  %% Line 1469
	  <{'neg_inf',Number}>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(Number)
		in  let <_cor4> =
			call 'erlang':'>='
			    (Number, 0)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      'minus_plus'
	  %% Line 1470
	  <{Number,'pos_inf'}>
	      when let <_cor5> =
		    call 'erlang':'is_integer'
			(Number)
		in  let <_cor6> =
			call 'erlang':'<'
			    (Number, 0)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      'minus_plus'
	  %% Line 1471
	  <{Number,'pos_inf'}>
	      when let <_cor7> =
		    call 'erlang':'is_integer'
			(Number)
		in  let <_cor8> =
			call 'erlang':'>='
			    (Number, 0)
		    in  call 'erlang':'and'
			    (_cor7, _cor8) ->
	      'plus_plus'
	  %% Line 1472
	  <{'neg_inf','pos_inf'}> when 'true' ->
	      'minus_plus'
	  %% Line 1473
	  <{Number1,Number2}>
	      when let <_cor9> =
		    call 'erlang':'is_integer'
			(Number1)
		in  let <_cor10> =
			call 'erlang':'is_integer'
			    (Number2)
		    in  call 'erlang':'and'
			    (_cor9, _cor10) ->
	      %% Line 1474
	      apply 'classify_int_range'/2
		  (Number1, Number2)
	  ( <_cor11> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor11})
	    -| ['compiler_generated'] )
	end
'classify_int_range'/2 =
    %% Line 1480
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Number1,_X_Number2>
	      when call 'erlang':'>='
		    (Number1,
		     0) ->
	      %% Line 1481
	      'plus_plus'
	  %% Line 1482
	  <_X_Number1,Number2>
	      when call 'erlang':'<'
		    (Number2,
		     0) ->
	      %% Line 1483
	      'minus_minus'
	  %% Line 1484
	  <_X_Number1,_X_Number2> when 'true' ->
	      %% Line 1485
	      'minus_plus'
	end
'range_bxor'/2 =
    %% Line 1489
    fun (_cor1,_cor0) ->
	%% Line 1490
	case apply 'range'/1
		 (_cor1) of
	  <MM1 = {Min1,Max1}> when 'true' ->
	      %% Line 1491
	      case apply 'range'/1
		       (_cor0) of
		<MM2 = {Min2,Max2}> when 'true' ->
		    let <Width1> =
			%% Line 1492
			apply 'width'/1
			    (MM1)
		    in  let <Width2> =
			    %% Line 1493
			    apply 'width'/1
				(MM2)
			in  let <_cor7> =
				%% Line 1495
				apply 'classify_range'/1
				    (_cor1)
			    in  let <_cor6> =
				    %% Line 1495
				    apply 'classify_range'/1
					(_cor0)
				in  let <_cor71> =
					%% Line 1495
					case <_cor7,_cor6> of
					  %% Line 1496
					  <'minus_minus','minus_minus'> when 'true' ->
					      let <Width> =
						  %% Line 1497
						  apply 'inf_max'/1
						      ([Width1|[Width2|[]]])
					      in  let <_cor9> =
						      %% Line 1498
						      apply 'inf_bsl'/2
							  (1, Width)
						  in  let <_cor11> =
							  %% Line 1498
							  apply 'inf_add'/2
							      (-1, _cor9)
						      in  %% Line 1498
							  {0,_cor11}
					  %% Line 1499
					  <'minus_minus','minus_plus'> when 'true' ->
					      let <_cor12> =
						  %% Line 1500
						  apply 'width'/1
						      ({0,Max2})
					      in  let <MinWidth> =
						      %% Line 1500
						      apply 'inf_max'/1
							  ([Width1|[_cor12|[]]])
						  in  let <_cor15> =
							  %% Line 1501
							  apply 'width'/1
							      ({Min2,-1})
						      in  let <MaxWidth> =
							      %% Line 1501
							      apply 'inf_max'/1
								  ([Width1|[_cor15|[]]])
							  in  let <_cor21> =
								  %% Line 1502
								  apply 'inf_bsl'/2
								      (-1, MinWidth)
							      in  let <_cor17> =
								      %% Line 1502
								      apply 'inf_bsl'/2
									  (1, MaxWidth)
								  in  let <_cor19> =
									  %% Line 1502
									  apply 'inf_add'/2
									      (-1, _cor17)
								      in  %% Line 1502
									  {_cor21,_cor19}
					  %% Line 1503
					  <'minus_minus','plus_plus'> when 'true' ->
					      let <Width> =
						  %% Line 1504
						  apply 'inf_max'/1
						      ([Width1|[Width2|[]]])
					      in  let <_cor25> =
						      %% Line 1505
						      apply 'inf_bsl'/2
							  (-1, Width)
						  in  %% Line 1505
						      {_cor25,-1}
					  %% Line 1506
					  <'minus_plus','minus_minus'> when 'true' ->
					      let <_cor26> =
						  %% Line 1507
						  apply 'width'/1
						      ({0,Max1})
					      in  let <MinWidth> =
						      %% Line 1507
						      apply 'inf_max'/1
							  ([Width2|[_cor26|[]]])
						  in  let <_cor29> =
							  %% Line 1508
							  apply 'width'/1
							      ({Min1,-1})
						      in  let <MaxWidth> =
							      %% Line 1508
							      apply 'inf_max'/1
								  ([Width2|[_cor29|[]]])
							  in  let <_cor35> =
								  %% Line 1509
								  apply 'inf_bsl'/2
								      (-1, MinWidth)
							      in  let <_cor31> =
								      %% Line 1509
								      apply 'inf_bsl'/2
									  (1, MaxWidth)
								  in  let <_cor33> =
									  %% Line 1509
									  apply 'inf_add'/2
									      (-1, _cor31)
								      in  %% Line 1509
									  {_cor35,_cor33}
					  %% Line 1510
					  <'minus_plus','minus_plus'> when 'true' ->
					      let <Width> =
						  %% Line 1511
						  apply 'inf_max'/1
						      ([Width1|[Width2|[]]])
					      in  let <_cor41> =
						      %% Line 1512
						      apply 'inf_bsl'/2
							  (-1, Width)
						  in  let <_cor37> =
							  %% Line 1512
							  apply 'inf_bsl'/2
							      (1, Width)
						      in  let <_cor39> =
							      %% Line 1512
							      apply 'inf_add'/2
								  (-1, _cor37)
							  in  %% Line 1512
							      {_cor41,_cor39}
					  %% Line 1513
					  <'minus_plus','plus_plus'> when 'true' ->
					      let <_cor43> =
						  %% Line 1514
						  apply 'width'/1
						      ({Min1,-1})
					      in  let <MinWidth> =
						      %% Line 1514
						      apply 'inf_max'/1
							  ([Width2|[_cor43|[]]])
						  in  let <_cor45> =
							  %% Line 1515
							  apply 'width'/1
							      ({0,Max1})
						      in  let <MaxWidth> =
							      %% Line 1515
							      apply 'inf_max'/1
								  ([Width2|[_cor45|[]]])
							  in  let <_cor51> =
								  %% Line 1516
								  apply 'inf_bsl'/2
								      (-1, MinWidth)
							      in  let <_cor47> =
								      %% Line 1516
								      apply 'inf_bsl'/2
									  (1, MaxWidth)
								  in  let <_cor49> =
									  %% Line 1516
									  apply 'inf_add'/2
									      (-1, _cor47)
								      in  %% Line 1516
									  {_cor51,_cor49}
					  %% Line 1517
					  <'plus_plus','minus_minus'> when 'true' ->
					      let <Width> =
						  %% Line 1518
						  apply 'inf_max'/1
						      ([Width1|[Width2|[]]])
					      in  let <_cor55> =
						      %% Line 1519
						      apply 'inf_bsl'/2
							  (-1, Width)
						  in  %% Line 1519
						      {_cor55,-1}
					  %% Line 1520
					  <'plus_plus','minus_plus'> when 'true' ->
					      let <_cor57> =
						  %% Line 1521
						  apply 'width'/1
						      ({Min2,-1})
					      in  let <MinWidth> =
						      %% Line 1521
						      apply 'inf_max'/1
							  ([Width1|[_cor57|[]]])
						  in  let <_cor59> =
							  %% Line 1522
							  apply 'width'/1
							      ({0,Max2})
						      in  let <MaxWidth> =
							      %% Line 1522
							      apply 'inf_max'/1
								  ([Width1|[_cor59|[]]])
							  in  let <_cor65> =
								  %% Line 1523
								  apply 'inf_bsl'/2
								      (-1, MinWidth)
							      in  let <_cor61> =
								      %% Line 1523
								      apply 'inf_bsl'/2
									  (1, MaxWidth)
								  in  let <_cor63> =
									  %% Line 1523
									  apply 'inf_add'/2
									      (-1, _cor61)
								      in  %% Line 1523
									  {_cor65,_cor63}
					  %% Line 1524
					  <'plus_plus','plus_plus'> when 'true' ->
					      let <Width> =
						  %% Line 1525
						  apply 'inf_max'/1
						      ([Width1|[Width2|[]]])
					      in  let <_cor67> =
						      %% Line 1526
						      apply 'inf_bsl'/2
							  (1, Width)
						  in  let <_cor69> =
							  %% Line 1526
							  apply 'inf_add'/2
							      (-1, _cor67)
						      in  %% Line 1526
							  {0,_cor69}
					  ( <_fol300,_fol301> when 'true' ->
						let <_cor70> = {_fol300,_fol301}
						in  primop 'match_fail'
							({'case_clause',_cor70})
					    -| ['compiler_generated'] )
					end
				    in  %% Line 1528
					apply 'range_init'/2
					    (_cor71, 'false')
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'inf_max'/1 =
    %% Line 1536
    fun (_cor0) ->
	case _cor0 of
	  <[H|T]> when 'true' ->
	      let <_cor6> =
		  %% Line 1537
		  ( fun (_cor3,_cor2) ->
			%% Line 1538
			case apply 'inf_geq'/2
				 (_cor3, _cor2) of
			  %% Line 1539
			  <'false'> when 'true' ->
			      _cor2
			  %% Line 1540
			  <'true'> when 'true' ->
			      _cor3
			  ( <_cor1> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor1})
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-inf_max/1-fun-0-'}}] )
	      in  %% Line 1537
		  call 'lists':'foldl'
		      (_cor6, %% Line 1542
			      H, %% Line 1542
				 T)
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'inf_max',1}}] )
	    -| ['compiler_generated'] )
	end
'inf_min'/1 =
    %% Line 1546
    fun (_cor0) ->
	case _cor0 of
	  <[H|T]> when 'true' ->
	      let <_cor6> =
		  %% Line 1547
		  ( fun (_cor3,_cor2) ->
			%% Line 1548
			case apply 'inf_geq'/2
				 (_cor3, _cor2) of
			  %% Line 1549
			  <'true'> when 'true' ->
			      _cor2
			  %% Line 1550
			  <'false'> when 'true' ->
			      _cor3
			  ( <_cor1> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor1})
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-inf_min/1-fun-0-'}}] )
	      in  %% Line 1547
		  call 'lists':'foldl'
		      (_cor6, %% Line 1552
			      H, %% Line 1552
				 T)
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'inf_min',1}}] )
	    -| ['compiler_generated'] )
	end
'inf_abs'/1 =
    %% Line 1556
    fun (_cor0) ->
	case _cor0 of
	  <'pos_inf'> when 'true' ->
	      'pos_inf'
	  %% Line 1557
	  <'neg_inf'> when 'true' ->
	      'pos_inf'
	  %% Line 1558
	  <Number>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'<'
			    (_cor0, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      call 'erlang':'-'
		  (Number)
	  %% Line 1559
	  <Number>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      Number
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'inf_abs',1}}] )
	    -| ['compiler_generated'] )
	end
'inf_add'/2 =
    %% Line 1563
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'pos_inf',_X_Number> when 'true' ->
	      'pos_inf'
	  %% Line 1564
	  <'neg_inf',_X_Number> when 'true' ->
	      'neg_inf'
	  %% Line 1565
	  <_X_Number,'pos_inf'> when 'true' ->
	      'pos_inf'
	  %% Line 1566
	  <_X_Number,'neg_inf'> when 'true' ->
	      'neg_inf'
	  %% Line 1567
	  <Number1,Number2>
	      when let <_cor2> =
		    call 'erlang':'is_integer'
			(Number1)
		in  let <_cor3> =
			call 'erlang':'is_integer'
			    (Number2)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      %% Line 1568
	      call 'erlang':'+'
		  (Number1, Number2)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'inf_add',2}}] )
	    -| ['compiler_generated'] )
	end
'inf_inv'/1 =
    %% Line 1572
    fun (_cor0) ->
	case _cor0 of
	  <'pos_inf'> when 'true' ->
	      'neg_inf'
	  %% Line 1573
	  <'neg_inf'> when 'true' ->
	      'pos_inf'
	  %% Line 1574
	  <Number> when 'true' ->
	      call 'erlang':'-'
		  (Number)
	end
'inf_geq'/2 =
    %% Line 1578
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'pos_inf',_cor4> when 'true' ->
	      'true'
	  %% Line 1579
	  <_cor5,'pos_inf'> when 'true' ->
	      'false'
	  %% Line 1580
	  <_cor6,'neg_inf'> when 'true' ->
	      'true'
	  %% Line 1581
	  <'neg_inf',_cor7> when 'true' ->
	      'false'
	  %% Line 1582
	  <A,B> when 'true' ->
	      call 'erlang':'>='
		  (A, B)
	end
'inf_greater_zero'/1 =
    %% Line 1586
    fun (_cor0) ->
	case _cor0 of
	  <'pos_inf'> when 'true' ->
	      'true'
	  %% Line 1587
	  <'neg_inf'> when 'true' ->
	      'false'
	  %% Line 1588
	  <Number>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'>='
			    (_cor0, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      'true'
	  %% Line 1589
	  <Number>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor4> =
			call 'erlang':'<'
			    (_cor0, 0)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      'false'
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'inf_greater_zero',1}}] )
	    -| ['compiler_generated'] )
	end
'inf_div'/2 =
    %% Line 1593
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Number,0> when 'true' ->
	      let <Greater> =
		  %% Line 1594
		  apply 'inf_greater_zero'/1
		      (Number)
	      in  %% Line 1595
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (Greater,
			       'true') ->
			'pos_inf'
		    %% Line 1596
		    <> when 'true' ->
			'neg_inf'
		  end
	  %% Line 1598
	  <'pos_inf',Number> when 'true' ->
	      let <Greater> =
		  %% Line 1599
		  apply 'inf_greater_zero'/1
		      (Number)
	      in  %% Line 1600
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (Greater,
			       'true') ->
			'pos_inf'
		    %% Line 1601
		    <> when 'true' ->
			'neg_inf'
		  end
	  %% Line 1603
	  <'neg_inf',Number> when 'true' ->
	      let <Greater> =
		  %% Line 1604
		  apply 'inf_greater_zero'/1
		      (Number)
	      in  %% Line 1605
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (Greater,
			       'true') ->
			'neg_inf'
		    %% Line 1606
		    <> when 'true' ->
			'pos_inf'
		  end
	  %% Line 1608
	  <Number,'pos_inf'> when 'true' ->
	      let <Greater> =
		  %% Line 1609
		  apply 'inf_greater_zero'/1
		      (Number)
	      in  %% Line 1610
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (Greater,
			       'true') ->
			'pos_inf'
		    %% Line 1611
		    <> when 'true' ->
			'neg_inf'
		  end
	  %% Line 1613
	  <Number,'neg_inf'> when 'true' ->
	      let <Greater> =
		  %% Line 1614
		  apply 'inf_greater_zero'/1
		      (Number)
	      in  %% Line 1615
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (Greater,
			       'true') ->
			'neg_inf'
		    %% Line 1616
		    <> when 'true' ->
			'pos_inf'
		  end
	  %% Line 1618
	  <Number1,Number2> when 'true' ->
	      call 'erlang':'div'
		  (Number1, Number2)
	end
'inf_mult'/2 =
    %% Line 1622
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'neg_inf',Number> when 'true' ->
	      let <Greater> =
		  %% Line 1623
		  apply 'inf_greater_zero'/1
		      (Number)
	      in  %% Line 1624
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (Greater,
			       'true') ->
			'neg_inf'
		    %% Line 1625
		    <> when 'true' ->
			'pos_inf'
		  end
	  %% Line 1627
	  <'pos_inf',Number> when 'true' ->
	      let <Greater> =
		  %% Line 1628
		  apply 'inf_greater_zero'/1
		      (Number)
	      in  %% Line 1629
		  case <> of
		    <>
			when call 'erlang':'=:='
			      (Greater,
			       'true') ->
			'pos_inf'
		    %% Line 1630
		    <> when 'true' ->
			'neg_inf'
		  end
	  %% Line 1632
	  <Number,'pos_inf'> when 'true' ->
	      apply 'inf_mult'/2
		  ('pos_inf', Number)
	  %% Line 1633
	  <Number,'neg_inf'> when 'true' ->
	      apply 'inf_mult'/2
		  ('neg_inf', Number)
	  %% Line 1634
	  <Number1,Number2> when 'true' ->
	      call 'erlang':'*'
		  (Number1, Number2)
	end
'inf_bsl'/2 =
    %% Line 1638
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <'pos_inf',_cor14> when 'true' ->
	      'pos_inf'
	  %% Line 1639
	  <'neg_inf',_cor15> when 'true' ->
	      'neg_inf'
	  %% Line 1640
	  <Number,'pos_inf'>
	      when let <_cor2> =
		    call 'erlang':'is_integer'
			(Number)
		in  let <_cor3> =
			call 'erlang':'>='
			    (Number, 0)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      'pos_inf'
	  %% Line 1641
	  <_cor16,'pos_inf'> when 'true' ->
	      'neg_inf'
	  %% Line 1642
	  <Number,'neg_inf'>
	      when let <_cor4> =
		    call 'erlang':'is_integer'
			(Number)
		in  let <_cor5> =
			call 'erlang':'>='
			    (Number, 0)
		    in  call 'erlang':'and'
			    (_cor4, _cor5) ->
	      0
	  %% Line 1643
	  <_X_Number,'neg_inf'> when 'true' ->
	      -1
	  %% Line 1644
	  <Number1,Number2>
	      when let <_cor6> =
		    call 'erlang':'is_integer'
			(Number1)
		in  let <_cor7> =
			call 'erlang':'is_integer'
			    (Number2)
		    in  call 'erlang':'and'
			    (_cor6, _cor7) ->
	      %% Line 1648
	      case <> of
		<>
		    when call 'erlang':'>'
			  (Number2,
			   128) ->
		    apply 'inf_bsl'/2
			(Number1, 'pos_inf')
		%% Line 1649
		<>
		    when call 'erlang':'<'
			  (Number2,
			   -128) ->
		    apply 'inf_bsl'/2
			(Number1, 'neg_inf')
		%% Line 1650
		<> when 'true' ->
		    call 'erlang':'bsl'
			(Number1, Number2)
	      end
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'inf_bsl',2}}] )
	    -| ['compiler_generated'] )
	end
'state__init'/2 =
    %% Line 1657
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Cfg,{MFA,ArgsFun,CallFun,FinalFun}> when 'true' ->
	      let <Start> =
		  %% Line 1658
		  call 'hipe_icode_cfg':'start_label'
		      (Cfg)
	      in  let <Params> =
		      %% Line 1659
		      call 'hipe_icode_cfg':'params'
			  (Cfg)
		  in  let <Ranges> =
			  %% Line 1660
			  apply ArgsFun
			      (MFA, Cfg)
		      in  let <_cor5> =
			      %% Line 1663
			      call 'hipe_icode_type':'unannotate_cfg'
				  (Cfg)
			  in  let <Liveness> =
				  %% Line 1663
				  call 'hipe_icode_ssa':'ssa_liveness__analyze'
				      (_cor5)
			      in  %% Line 1664
				  case call 'lists':'any'
					   (( 'range__is_none'/1
					      -| [{'id',{0,0,'-state__init/2-fun-0-'}}] ), Ranges) of
				    %% Line 1665
				    <'true'> when 'true' ->
					let <_cor7> =
					    %% Line 1666
					    apply 'none_type'/0
						()
					in  do  %% Line 1666
						apply FinalFun
						    (MFA, [_cor7|[]])
						%% Line 1667
						call 'erlang':'throw'
						    ('no_input')
				    %% Line 1668
				    <'false'> when 'true' ->
					let <NewParams> =
					    %% Line 1669
					    call 'lists':'zipwith'
						(( 'update_info'/2
						   -| [{'id',{0,0,'-state__init/2-fun-1-'}}] ), Params, Ranges)
					in  let <NewCfg> =
						%% Line 1670
						call 'hipe_icode_cfg':'params_update'
						    (Cfg, NewParams)
					    in  let <_cor10> =
						    %% Line 1671
						    call 'gb_trees':'empty'
							()
						in  let <Info> =
							%% Line 1671
							apply 'enter_defines'/2
							    (NewParams, _cor10)
						    in  let <_cor12> =
							    %% Line 1672
							    call 'gb_trees':'empty'
								()
							in  let <InfoMap> =
								%% Line 1672
								call 'gb_trees':'insert'
								    ({Start,'in'}, Info, _cor12)
							    in  let <_cor15> =
								    call 'dict':'new'
									()
								in  let <_cor14> =
									%% Line 1674
									apply 'none_type'/0
									    ()
								    in  %% Line 1673
									{'state',InfoMap,_cor15,NewCfg,Liveness,_cor14,%% Line 1675
														       CallFun,%% Line 1675
															       FinalFun}
				    ( <_cor16> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor16})
				      -| ['compiler_generated'] )
				  end
	  ( <_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17})
		  -| [{'function_name',{'state__init',2}}] )
	    -| ['compiler_generated'] )
	end
'state__cfg'/1 =
    %% Line 1680
    fun (_cor0) ->
	case _cor0 of
	  <{'state',_cor2,_cor3,Cfg,_cor4,_cor5,_cor6,_cor7}> when 'true' ->
	      %% Line 1681
	      Cfg
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'state__cfg',1}}] )
	    -| ['compiler_generated'] )
	end
'state__bb'/2 =
    %% Line 1685
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'state',_cor6,_cor7,Cfg,_cor8,_cor9,_cor10,_cor11},Label> when 'true' ->
	      let <BB> =
		  %% Line 1686
		  call 'hipe_icode_cfg':'bb'
		      (Cfg, Label)
	      in  %% Line 1687
		  case call 'hipe_bb':'is_bb'
			   (BB) of
		    <'true'> when 'true' ->
			%% Line 1688
			BB
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'state__bb',2}}] )
	    -| ['compiler_generated'] )
	end
'state__bb_add'/3 =
    %% Line 1692
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <S = {'state',_cor9,_cor10,Cfg,_cor11,_cor12,_cor13,_cor14},Label,BB> when 'true' ->
	      let <NewCfg> =
		  %% Line 1693
		  call 'hipe_icode_cfg':'bb_add'
		      (Cfg, Label, BB)
	      in  %% Line 1694
		  call 'erlang':'setelement'
		      (4, S, NewCfg)
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'state__bb_add',3}}] )
	    -| ['compiler_generated'] )
	end
'state__lookup_fun'/1 =
    %% Line 1696
    fun (_cor0) ->
	case _cor0 of
	  <{'state',_cor2,_cor3,_cor4,_cor5,_cor6,LF,_cor7}> when 'true' ->
	      LF
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'state__lookup_fun',1}}] )
	    -| ['compiler_generated'] )
	end
'state__result_action'/1 =
    %% Line 1698
    fun (_cor0) ->
	case _cor0 of
	  <{'state',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,RA}> when 'true' ->
	      RA
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'state__result_action',1}}] )
	    -| ['compiler_generated'] )
	end
'state__ret_type'/1 =
    %% Line 1700
    fun (_cor0) ->
	case _cor0 of
	  <{'state',_cor2,_cor3,_cor4,_cor5,RT,_cor6,_cor7}> when 'true' ->
	      RT
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'state__ret_type',1}}] )
	    -| ['compiler_generated'] )
	end
'state__ret_type_update'/2 =
    %% Line 1702
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <State = {'state',_cor7,_cor8,_cor9,_cor10,RT,_cor11,_cor12},NewType> when 'true' ->
	      let <TotType> =
		  %% Line 1703
		  apply 'sup'/2
		      (RT, NewType)
	      in  %% Line 1704
		  call 'erlang':'setelement'
		      (6, State, TotType)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'state__ret_type_update',2}}] )
	    -| ['compiler_generated'] )
	end
'state__info_in'/2 =
    %% Line 1706
    fun (_cor1,_cor0) ->
	%% Line 1707
	apply 'state__info'/2
	    (_cor1, {_cor0,'in'})
'state__info'/2 =
    %% Line 1709
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'state',IM,_cor4,_cor5,_cor6,_cor7,_cor8,_cor9},Key> when 'true' ->
	      %% Line 1710
	      call 'gb_trees':'get'
		  (Key, IM)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'state__info',2}}] )
	    -| ['compiler_generated'] )
	end
'state__update_info'/3 =
    %% Line 1712
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1713
	apply 'update_info'/4
	    (_cor1, _cor2, [], _cor0)
'update_info'/4 =
    %% Line 1715
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{Label,InfoIn}|Rest],State,LabelAcc,Rewrite> when 'true' ->
	      %% Line 1716
	      case apply 'state__info_in_update'/3
		       (State, Label, InfoIn) of
		%% Line 1717
		<'fixpoint'> when 'true' ->
		    %% Line 1718
		    case <> of
		      <>
			  when call 'erlang':'=:='
				(Rewrite,
				 'true') ->
			  %% Line 1719
			  apply 'update_info'/4
			      (Rest, State, [Label|LabelAcc], Rewrite)
		      %% Line 1720
		      <> when 'true' ->
			  %% Line 1721
			  apply 'update_info'/4
			      (Rest, State, LabelAcc, Rewrite)
		    end
		%% Line 1723
		<NewState> when 'true' ->
		    %% Line 1724
		    apply 'update_info'/4
			(Rest, NewState, [Label|LabelAcc], Rewrite)
	      end
	  %% Line 1726
	  <[],State,LabelAcc,_X_Rewrite> when 'true' ->
	      %% Line 1727
	      {State,LabelAcc}
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'update_info',4}}] )
	    -| ['compiler_generated'] )
	end
'state__info_in_update'/3 =
    %% Line 1729
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <S = {'state',IM,_cor30,_cor31,Liveness,_cor32,_cor33,_cor34},Label,Info> when 'true' ->
	      let <LabelIn> = {%% Line 1730
		   Label,%% Line 1730
			 'in'}
	      in  %% Line 1731
		  case call 'gb_trees':'lookup'
			   (LabelIn, IM) of
		    %% Line 1732
		    <'none'> when 'true' ->
			let <LiveIn> =
			    %% Line 1733
			    call 'hipe_icode_ssa':'ssa_liveness__livein'
				(Liveness, Label)
			in  let <_cor11> =
				%% Line 1734
				( letrec
				      'lc$^0'/1 =
					  fun (_cor7) ->
					      case _cor7 of
						<[Var|_cor6]> when 'true' ->
						    %% Line 1735
						    ( case call 'hipe_icode':'is_var'
							       (Var) of
							<'true'> when 'true' ->
							    let <_cor8> =
								call 'hipe_icode':'var_name'
								    (Var)
							    in  let <_cor9> =
								    apply 'lc$^0'/1
									(_cor6)
								in  ( [_cor8|_cor9]
								      -| ['compiler_generated'] )
							( <'false'> when 'true' ->
							      apply 'lc$^0'/1
								  (_cor6)
							  -| ['compiler_generated'] )
							( <_cor10> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_cor10})
							  -| ['compiler_generated'] )
						      end
						      -| ['list_comprehension'] )
						<[]> when 'true' ->
						    []
						( <_cor7> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor7})
							-| [{'function_name',{'lc$^0',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^0'/1
					  (LiveIn)
				  -| ['list_comprehension'] )
			    in  let <OldInfo> =
				    %% Line 1736
				    call 'gb_trees':'empty'
					()
				in  %% Line 1737
				    case apply 'join_info_in'/3
					     (_cor11, OldInfo, Info) of
				      %% Line 1738
				      <'fixpoint'> when 'true' ->
					  let <_rec25> =
					      %% Line 1739
					      call 'gb_trees':'insert'
						  (LabelIn, OldInfo, IM)
					  in  %% Line 1739
					      call 'erlang':'setelement'
						  (2, S, _rec25)
				      %% Line 1740
				      <NewInfo> when 'true' ->
					  let <_rec27> =
					      %% Line 1741
					      call 'gb_trees':'enter'
						  (LabelIn, NewInfo, IM)
					  in  %% Line 1741
					      call 'erlang':'setelement'
						  (2, S, _rec27)
				    end
		    %% Line 1743
		    <{'value',OldInfo}> when 'true' ->
			let <OldVars> =
			    %% Line 1744
			    call 'gb_trees':'keys'
				(OldInfo)
			in  %% Line 1745
			    case apply 'join_info_in'/3
				     (OldVars, OldInfo, Info) of
			      %% Line 1746
			      <'fixpoint'> when 'true' ->
				  %% Line 1747
				  'fixpoint'
			      %% Line 1748
			      <NewInfo> when 'true' ->
				  let <_rec29> =
				      %% Line 1749
				      call 'gb_trees':'update'
					  (LabelIn, NewInfo, IM)
				  in  %% Line 1749
				      call 'erlang':'setelement'
					  (2, S, _rec29)
			    end
		    ( <_cor26> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor26})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor29,_cor28,_cor27> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor29,_cor28,_cor27})
		  -| [{'function_name',{'state__info_in_update',3}}] )
	    -| ['compiler_generated'] )
	end
'join_info_in'/3 =
    %% Line 1753
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 1754
	    call 'gb_trees':'empty'
		()
	in  %% Line 1754
	    case apply 'join_info_in'/5
		     (_cor2, _cor1, _cor0, _cor3, 'false') of
	      %% Line 1755
	      <{Res,'true'}> when 'true' ->
		  Res
	      %% Line 1756
	      <{_cor8,'false'}> when 'true' ->
		  'fixpoint'
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor4})
		-| ['compiler_generated'] )
	    end
'join_info_in'/5 =
    %% Line 1759
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Var|Left],Info1,Info2,Acc,Changed> when 'true' ->
	      let <Type1> =
		  %% Line 1760
		  call 'gb_trees':'lookup'
		      (Var, Info1)
	      in  let <Type2> =
		      %% Line 1761
		      call 'gb_trees':'lookup'
			  (Var, Info2)
		  in  %% Line 1762
		      case <Type1,Type2> of
			%% Line 1763
			<'none','none'> when 'true' ->
			    let <_cor7> =
				%% Line 1764
				apply 'none_type'/0
				    ()
			    in  let <NewTree> =
				    %% Line 1764
				    call 'gb_trees':'insert'
					(Var, _cor7, Acc)
				in  %% Line 1765
				    apply 'join_info_in'/5
					(Left, Info1, Info2, NewTree, 'true')
			%% Line 1766
			<'none',{'value',Val}> when 'true' ->
			    let <NewTree> =
				%% Line 1767
				call 'gb_trees':'insert'
				    (Var, Val, Acc)
			    in  %% Line 1768
				apply 'join_info_in'/5
				    (Left, Info1, Info2, NewTree, 'true')
			%% Line 1769
			<{'value',Val},'none'> when 'true' ->
			    let <NewTree> =
				%% Line 1770
				call 'gb_trees':'insert'
				    (Var, Val, Acc)
			    in  %% Line 1771
				apply 'join_info_in'/5
				    (Left, Info1, Info2, NewTree, Changed)
			%% Line 1772
			<{'value',Val},{'value',_cor24}>
			    when call 'erlang':'=:='
				  (_cor24,
				   Val) ->
			    let <NewTree> =
				%% Line 1773
				call 'gb_trees':'insert'
				    (Var, Val, Acc)
			    in  %% Line 1774
				apply 'join_info_in'/5
				    (Left, Info1, Info2, NewTree, Changed)
			%% Line 1775
			<{'value',Val1},{'value',Val2}> when 'true' ->
			    let <_cor15,NewChanged> =
				%% Line 1777
				case apply 'sup'/2
					 (Val1, Val2) of
				  %% Line 1778
				  <_cor25>
				      when call 'erlang':'=:='
					    (_cor25,
					     Val1) ->
				      %% Line 1780
				      <Val1,Changed>
				  %% Line 1781
				  <Val> when 'true' ->
				      %% Line 1783
				      <Val,'true'>
				end
			    in  let <NewTree> =
				    %% Line 1785
				    call 'gb_trees':'insert'
					(Var, _cor15, Acc)
				in  %% Line 1786
				    apply 'join_info_in'/5
					(Left, Info1, Info2, NewTree, NewChanged)
			( <_fol431,_fol432> when 'true' ->
			      let <_cor18> = {_fol431,_fol432}
			      in  primop 'match_fail'
				      ({'case_clause',_cor18})
			  -| ['compiler_generated'] )
		      end
	  %% Line 1788
	  <[],_X_Info1,_X_Info2,Acc,NewChanged> when 'true' ->
	      %% Line 1789
	      {Acc,NewChanged}
	  ( <_cor23,_cor22,_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21,_cor20,_cor19})
		  -| [{'function_name',{'join_info_in',5}}] )
	    -| ['compiler_generated'] )
	end
'enter_defines'/2 =
    %% Line 1791
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Def|Rest],Info> when 'true' ->
	      let <_cor2> =
		  %% Line 1792
		  apply 'enter_define'/2
		      (Def, Info)
	      in  %% Line 1792
		  apply 'enter_defines'/2
		      (Rest, _cor2)
	  %% Line 1793
	  <[],Info> when 'true' ->
	      Info
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'enter_defines',2}}] )
	    -| ['compiler_generated'] )
	end
'enter_define'/2 =
    %% Line 1795
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{PossibleVar,Range = {'range',_cor9,_cor10}},Info> when 'true' ->
	      %% Line 1796
	      case call 'hipe_icode':'is_var'
		       (PossibleVar) of
		%% Line 1797
		<'true'> when 'true' ->
		    let <_cor2> =
			%% Line 1798
			call 'hipe_icode':'var_name'
			    (PossibleVar)
		    in  %% Line 1798
			call 'gb_trees':'enter'
			    (_cor2, Range, Info)
		%% Line 1799
		<'false'> when 'true' ->
		    %% Line 1800
		    Info
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1802
	  <PossibleVar,Info> when 'true' ->
	      %% Line 1803
	      case call 'hipe_icode':'is_var'
		       (PossibleVar) of
		%% Line 1804
		<'true'> when 'true' ->
		    %% Line 1805
		    case call 'hipe_icode':'variable_annotation'
			     (PossibleVar) of
		      %% Line 1806
		      <{'range_anno',{'ann',Range,_cor11,_cor12},_cor13}> when 'true' ->
			  let <_cor4> =
			      %% Line 1807
			      call 'hipe_icode':'var_name'
				  (PossibleVar)
			  in  %% Line 1807
			      call 'gb_trees':'enter'
				  (_cor4, Range, Info)
		      %% Line 1808
		      <_cor14> when 'true' ->
			  %% Line 1809
			  Info
		    end
		%% Line 1811
		<'false'> when 'true' ->
		    %% Line 1812
		    Info
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	end
'enter_vals'/2 =
    %% Line 1815
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1816
	    call 'hipe_icode':'args'
		(_cor1)
	in  let <NewInfo> =
		%% Line 1816
		apply 'enter_defines'/2
		    (_cor2, _cor0)
	    in  let <_cor4> =
		    %% Line 1817
		    call 'hipe_icode':'defines'
			(_cor1)
		in  %% Line 1817
		    apply 'enter_defines'/2
			(_cor4, NewInfo)
'lookup'/2 =
    %% Line 1819
    fun (_cor1,_cor0) ->
	%% Line 1820
	case call 'hipe_icode':'is_var'
		 (_cor1) of
	  %% Line 1821
	  <'true'> when 'true' ->
	      let <_cor2> =
		  %% Line 1822
		  call 'hipe_icode':'var_name'
		      (_cor1)
	      in  %% Line 1822
		  case call 'gb_trees':'lookup'
			   (_cor2, _cor0) of
		    %% Line 1823
		    <'none'> when 'true' ->
			%% Line 1824
			apply 'none_type'/0
			    ()
		    %% Line 1825
		    <{'value',Val}> when 'true' ->
			%% Line 1826
			Val
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1828
	  <'false'> when 'true' ->
	      %% Line 1829
	      apply 'none_type'/0
		  ()
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'init_work'/1 =
    %% Line 1837
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 1839
	    apply 'state__cfg'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 1839
		call 'hipe_icode_cfg':'start_label'
		    (_cor1)
	    in  let <Labels> =
		    %% Line 1839
		    [_cor2|[]]
		in  let <_cor4> =
			%% Line 1840
			call 'sets':'from_list'
			    (Labels)
		    in  %% Line 1840
			{Labels,[],_cor4}
'get_work'/1 =
    %% Line 1842
    fun (_cor0) ->
	case _cor0 of
	  <{[Label|Left],List,Set}> when 'true' ->
	      let <_cor1> =
		  %% Line 1843
		  call 'sets':'del_element'
		      (Label, Set)
	      in  let <NewWork> = {%% Line 1843
		       Left,%% Line 1843
			    List,_cor1}
		  in  %% Line 1844
		      {Label,NewWork}
	  %% Line 1845
	  <{[],[],_X_Set}> when 'true' ->
	      %% Line 1846
	      'fixpoint'
	  %% Line 1847
	  <{[],List,Set}> when 'true' ->
	      let <_cor3> =
		  %% Line 1848
		  call 'lists':'reverse'
		      (List)
	      in  %% Line 1848
		  apply 'get_work'/1
		      ({_cor3,[],Set})
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'get_work',1}}] )
	    -| ['compiler_generated'] )
	end
'add_work'/2 =
    %% Line 1850
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Work = {List1,List2,Set},[Label|Left]> when 'true' ->
	      %% Line 1851
	      case call 'sets':'is_element'
		       (Label, Set) of
		%% Line 1852
		<'true'> when 'true' ->
		    %% Line 1853
		    apply 'add_work'/2
			(Work, Left)
		%% Line 1854
		<'false'> when 'true' ->
		    let <_cor2> =
			%% Line 1856
			call 'sets':'add_element'
			    (Label, Set)
		    in  %% Line 1856
			apply 'add_work'/2
			    ({List1,[Label|List2],_cor2}, Left)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1858
	  <Work,[]> when 'true' ->
	      %% Line 1859
	      Work
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'add_work',2}}] )
	    -| ['compiler_generated'] )
	end
'convert_cfg_to_types'/1 =
    %% Line 1861
    fun (_cor0) ->
	let <Lbls> =
	    %% Line 1862
	    call 'hipe_icode_cfg':'reverse_postorder'
		(_cor0)
	in  %% Line 1863
	    call 'lists':'foldl'
		(( 'convert_lbl_to_type'/2
		   -| [{'id',{0,0,'-convert_cfg_to_types/1-fun-0-'}}] ), _cor0, Lbls)
'convert_lbl_to_type'/2 =
    %% Line 1865
    fun (_cor1,_cor0) ->
	let <BB> =
	    %% Line 1866
	    call 'hipe_icode_cfg':'bb'
		(_cor0, _cor1)
	in  let <Code> =
		%% Line 1867
		call 'hipe_bb':'code'
		    (BB)
	    in  let <_cor9> =
		    %% Line 1868
		    ( letrec
			  'lc$^0'/1 =
			      fun (_cor6) ->
				  case _cor6 of
				    <[I|_cor5]> when 'true' ->
					let <_cor7> =
					    apply 'convert_instr_to_type'/1
						(I)
					in  let <_cor8> =
						apply 'lc$^0'/1
						    (_cor5)
					    in  ( [_cor7|_cor8]
						  -| ['compiler_generated'] )
				    <[]> when 'true' ->
					[]
				    ( <_cor6> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_cor6})
					    -| [{'function_name',{'lc$^0',1}}] )
				      -| ['compiler_generated'] )
				  end
		      in  apply 'lc$^0'/1
			      (Code)
		      -| ['list_comprehension'] )
		in  let <_cor11> =
			%% Line 1869
			call 'hipe_bb':'mk_bb'
			    (_cor9)
		    in  %% Line 1869
			call 'hipe_icode_cfg':'bb_add'
			    (_cor0, _cor1, _cor11)
'convert_instr_to_type'/1 =
    %% Line 1871
    fun (_cor0) ->
	let <Uses> =
	    %% Line 1872
	    call 'hipe_icode':'uses'
		(_cor0)
	in  let <_cor8> =
		%% Line 1873
		( letrec
		      'lc$^0'/1 =
			  fun (_cor4) ->
			      case _cor4 of
				<[%% Line 1874
				  Use|_cor3]> when 'true' ->
				    %% Line 1874
				    ( case call 'hipe_icode':'is_annotated_variable'
					       (Use) of
					<'true'> when 'true' ->
					    let <_cor5> =
						apply 'convert_to_types'/1
						    (Use)
					    in  let <_cor6> =
						    apply 'lc$^0'/1
							(_cor3)
						in  ( [{Use,_cor5}|_cor6]
						      -| ['compiler_generated'] )
					( <'false'> when 'true' ->
					      apply 'lc$^0'/1
						  (_cor3)
					  -| ['compiler_generated'] )
					( <_cor7> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor7})
					  -| ['compiler_generated'] )
				      end
				      -| ['list_comprehension'] )
				<[]> when 'true' ->
				    []
				( <_cor4> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor4})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (%% Line 1874
			   Uses)
		  -| ['list_comprehension'] )
	    in  let <NewI> =
		    %% Line 1875
		    call 'hipe_icode':'subst_uses'
			(_cor8, _cor0)
		in  let <Defs> =
			%% Line 1876
			call 'hipe_icode':'defines'
			    (NewI)
		    in  let <_cor18> =
			    %% Line 1877
			    ( letrec
				  'lc$^1'/1 =
				      fun (_cor14) ->
					  case _cor14 of
					    <[%% Line 1878
					      Def|_cor13]> when 'true' ->
						%% Line 1878
						( case call 'hipe_icode':'is_annotated_variable'
							   (Def) of
						    <'true'> when 'true' ->
							let <_cor15> =
							    apply 'convert_to_types'/1
								(Def)
							in  let <_cor16> =
								apply 'lc$^1'/1
								    (_cor13)
							    in  ( [{Def,_cor15}|_cor16]
								  -| ['compiler_generated'] )
						    ( <'false'> when 'true' ->
							  apply 'lc$^1'/1
							      (_cor13)
						      -| ['compiler_generated'] )
						    ( <_cor17> when 'true' ->
							  primop 'match_fail'
							      ({'case_clause',_cor17})
						      -| ['compiler_generated'] )
						  end
						  -| ['list_comprehension'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor14> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor14})
						    -| [{'function_name',{'lc$^1',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^1'/1
				      (%% Line 1878
				       Defs)
			      -| ['list_comprehension'] )
			in  %% Line 1879
			    call 'hipe_icode':'subst_defines'
				(_cor18, NewI)
'convert_to_types'/1 =
    %% Line 1881
    fun (_cor0) ->
	let <_cor4> =
	    %% Line 1883
	    case call 'hipe_icode':'variable_annotation'
		     (_cor0) of
	      %% Line 1884
	      <{'range_anno',Ann,_cor7}> when 'true' ->
		  let <_cor2> =
		      %% Line 1885
		      apply 'convert_ann_to_types'/1
			  (Ann)
		  in  let <_cor1> =
			  %% Line 1885
			  call 'erlang':'make_fun'
			      ('erl_types', 't_to_string', 1)
		      in  %% Line 1885
			  {'type_anno',_cor2,_cor1}
	      %% Line 1886
	      <TypeAnn = {'type_anno',_cor8,_cor9}> when 'true' ->
		  %% Line 1887
		  TypeAnn
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor3})
		-| ['compiler_generated'] )
	    end
	in  %% Line 1889
	    call 'hipe_icode':'annotate_variable'
		(_cor0, _cor4)
'convert_ann_to_types'/1 =
    %% Line 1891
    fun (_cor0) ->
	case _cor0 of
	  <{'ann',{'range',{Min,Max},'false'},_cor2,_cor3}> when 'true' ->
	      %% Line 1892
	      call 'erl_types':'t_from_range_unsafe'
		  (Min, Max)
	  %% Line 1893
	  <{'ann',{'range','empty','false'},_cor4,_cor5}> when 'true' ->
	      %% Line 1894
	      call 'erl_types':'t_none'
		  ()
	  %% Line 1895
	  <{'ann',{'range',_cor6,'true'},Type,_cor7}> when 'true' ->
	      %% Line 1896
	      Type
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'convert_ann_to_types',1}}] )
	    -| ['compiler_generated'] )
	end
'replace_nones'/1 =
    %% Line 1903
    fun (_cor0) ->
	%% Line 1904
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[Arg|_cor2]> when 'true' ->
			    let <_cor4> =
				apply 'replace_none'/1
				    (Arg)
			    in  let <_cor5> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [_cor4|_cor5]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'replace_none'/1 =
    %% Line 1906
    fun (_cor0) ->
	%% Line 1907
	case apply 'range__is_none'/1
		 (_cor0) of
	  %% Line 1908
	  <'true'> when 'true' ->
	      apply 'any_type'/0
		  ()
	  %% Line 1909
	  <'false'> when 'true' ->
	      _cor0
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'update__info'/2 =
    %% Line 1913
    fun (_cor1,_cor0) ->
	let <SupFun> =
	    %% Line 1914
	    ( fun (_cor3,_cor2) ->
		  %% Line 1915
		  apply 'join_info'/3
		      (_cor3, _cor2, ( 'safe_widen'/3
				       -| [{'id',{0,0,'-update__info/2-fun-0-'}}] ))
	      -| [{'id',{0,0,'-update__info/2-fun-1-'}}] )
	in  let <EqFun> =
		%% Line 1917
		( fun (_cor8,_cor7) ->
		      call 'erlang':'=:='
			  (_cor8, _cor7)
		  -| [{'id',{0,0,'-update__info/2-fun-2-'}}] )
	    in  let <ResRanges> =
		    %% Line 1918
		    call 'lists':'zipwith'
			(SupFun, _cor0, _cor1)
		in  let <Change> =
			%% Line 1919
			call 'lists':'zipwith'
			    (EqFun, ResRanges, _cor0)
		    in  let <_cor16> =
			    %% Line 1920
			    ( fun (_cor14) ->
				  _cor14
			      -| [{'id',{0,0,'-update__info/2-fun-3-'}}] )
			in  let <_cor17> =
				%% Line 1920
				call 'lists':'all'
				    (_cor16, Change)
			    in  %% Line 1920
				{_cor17,ResRanges}
'new__info'/1 =
    %% Line 1923
    fun (_cor0) ->
	%% Line 1924
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[Range|_cor2]> when 'true' ->
			    let <_cor4> =
				call 'erl_types':'t_any'
				    ()
			    in  let <_cor5> =
				    apply 'lc$^0'/1
					(_cor2)
				in  ( [{'ann',Range,_cor4,1}|_cor5]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'return__info'/1 =
    %% Line 1927
    fun (_cor0) ->
	%% Line 1928
	( letrec
	      'lc$^0'/1 =
		  fun (_cor3) ->
		      case _cor3 of
			<[{'ann',Range,_cor6,_cor7}|_cor2]> when 'true' ->
			    let <_cor4> =
				apply 'lc$^0'/1
				    (_cor2)
			    in  ( [Range|_cor4]
				  -| ['compiler_generated'] )
			( <[_cor1|_cor2]> when 'true' ->
			      apply 'lc$^0'/1
				  (_cor2)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor3> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor3})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'return_none'/0 =
    %% Line 1931
    fun () ->
	let <_cor0> =
	    %% Line 1932
	    apply 'none_type'/0
		()
	in  %% Line 1932
	    [_cor0|[]]
'return_none_args'/2 =
    %% Line 1935
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Cfg,{_X_M,_X_F,A}> when 'true' ->
	      let <_cor4> =
		  %% Line 1937
		  case call 'hipe_icode_cfg':'is_closure'
			   (Cfg) of
		    %% Line 1938
		    <'true'> when 'true' ->
			let <_cor2> =
			    call 'hipe_icode_cfg':'closure_arity'
				(Cfg)
			in  call 'erlang':'+'
				(_cor2, 1)
		    %% Line 1939
		    <'false'> when 'true' ->
			A
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor6> =
		      %% Line 1941
		      apply 'none_type'/0
			  ()
		  in  %% Line 1941
		      call 'lists':'duplicate'
			  (_cor4, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'return_none_args',2}}] )
	    -| ['compiler_generated'] )
	end
'return_any_args'/2 =
    %% Line 1944
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Cfg,{_X_M,_X_F,A}> when 'true' ->
	      let <_cor4> =
		  %% Line 1946
		  case call 'hipe_icode_cfg':'is_closure'
			   (Cfg) of
		    %% Line 1947
		    <'true'> when 'true' ->
			let <_cor2> =
			    call 'hipe_icode_cfg':'closure_arity'
				(Cfg)
			in  call 'erlang':'+'
				(_cor2, 1)
		    %% Line 1948
		    <'false'> when 'true' ->
			A
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor3})
		      -| ['compiler_generated'] )
		  end
	      in  let <_cor6> =
		      %% Line 1950
		      apply 'any_type'/0
			  ()
		  in  %% Line 1950
		      call 'lists':'duplicate'
			  (_cor4, _cor6)
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'return_any_args',2}}] )
	    -| ['compiler_generated'] )
	end
'next_up_limit'/1 =
    %% Line 1954
    fun (_cor0) ->
	case _cor0 of
	  <X>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'<'
			    (_cor0, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      0
	  %% Line 1955
	  <X>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor4> =
			call 'erlang':'<'
			    (_cor0, 255)
		    in  call 'erlang':'and'
			    (_cor3, _cor4) ->
	      255
	  %% Line 1956
	  <X>
	      when let <_cor5> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor6> =
			call 'erlang':'<'
			    (_cor0, 1114111)
		    in  call 'erlang':'and'
			    (_cor5, _cor6) ->
	      1114111
	  %% Line 1957
	  <X>
	      when let <_cor7> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor8> =
			call 'erlang':'<'
			    (_cor0, 134217727)
		    in  call 'erlang':'and'
			    (_cor7, _cor8) ->
	      134217727
	  %% Line 1958
	  <X>
	      when let <_cor9> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor10> =
			call 'erlang':'<'
			    (_cor0, 2147483647)
		    in  call 'erlang':'and'
			    (_cor9, _cor10) ->
	      2147483647
	  %% Line 1959
	  <X>
	      when let <_cor11> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor12> =
			call 'erlang':'<'
			    (_cor0, 4294967295)
		    in  call 'erlang':'and'
			    (_cor11, _cor12) ->
	      4294967295
	  %% Line 1960
	  <X>
	      when let <_cor13> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor14> =
			call 'erlang':'<'
			    (_cor0, 17592186044415)
		    in  call 'erlang':'and'
			    (_cor13, _cor14) ->
	      17592186044415
	  %% Line 1961
	  <X>
	      when let <_cor15> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor16> =
			call 'erlang':'<'
			    (_cor0, 9223372036854775807)
		    in  call 'erlang':'and'
			    (_cor15, _cor16) ->
	      9223372036854775807
	  %% Line 1962
	  <_X_X> when 'true' ->
	      'pos_inf'
	end
'next_down_limit'/1 =
    %% Line 1964
    fun (_cor0) ->
	case _cor0 of
	  <X>
	      when let <_cor1> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor2> =
			call 'erlang':'>'
			    (_cor0, 0)
		    in  call 'erlang':'and'
			    (_cor1, _cor2) ->
	      0
	  %% Line 1965
	  <X>
	      when let <_cor3> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor5> =
			call 'erlang':'>'
			    (_cor0, -256)
		    in  call 'erlang':'and'
			    (_cor3, _cor5) ->
	      -256
	  %% Line 1966
	  <X>
	      when let <_cor6> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor8> =
			call 'erlang':'>'
			    (_cor0, -1114111)
		    in  call 'erlang':'and'
			    (_cor6, _cor8) ->
	      -1114111
	  %% Line 1967
	  <X>
	      when let <_cor9> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor11> =
			call 'erlang':'>'
			    (_cor0, -134217728)
		    in  call 'erlang':'and'
			    (_cor9, _cor11) ->
	      -134217728
	  %% Line 1968
	  <X>
	      when let <_cor12> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor14> =
			call 'erlang':'>'
			    (_cor0, -2147483648)
		    in  call 'erlang':'and'
			    (_cor12, _cor14) ->
	      -2147483648
	  %% Line 1969
	  <X>
	      when let <_cor15> =
		    call 'erlang':'is_integer'
			(_cor0)
		in  let <_cor17> =
			call 'erlang':'>'
			    (_cor0, -576460752303423488)
		    in  call 'erlang':'and'
			    (_cor15, _cor17) ->
	      -576460752303423488
	  %% Line 1970
	  <_X_X> when 'true' ->
	      'neg_inf'
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_icode_range')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_icode_range', _cor0)
end