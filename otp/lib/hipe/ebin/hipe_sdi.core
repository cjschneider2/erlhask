module 'hipe_sdi' ['module_info'/0,
		   'module_info'/1,
		   'pass1_add_label'/3,
		   'pass1_add_sdi'/4,
		   'pass1_init'/0,
		   'pass2'/1]
    attributes [%% Line 22
		'type' =
		    %% Line 22
		    [{{'record','sdi_info'},[{'typed_record_field',{'record_field',23,{'atom',23,'lb'}},{'type',23,'union',[{'atom',23,'undefined'}|[{'type',23,'integer',[]}]]}}|[{'typed_record_field',{'record_field',24,{'atom',24,'ub'}},{'type',24,'union',[{'atom',24,'undefined'}|[{'type',24,'integer',[]}]]}}|[{'typed_record_field',{'record_field',25,{'atom',25,'incr'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'byte',[]}]]}}]]],[]}],
		%% Line 37
		'type' =
		    %% Line 37
		    [{'hipe_array',{'type',37,'integer',[]},[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{'label',{'type',39,'non_neg_integer',[]},[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{'address',{'type',40,'non_neg_integer',[]},[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','label_data'},[{'typed_record_field',{'record_field',44,{'atom',44,'address'}},{'type',44,'union',[{'atom',44,'undefined'}|[{'type',44,'address',[]}]]}}|[{'typed_record_field',{'record_field',45,{'atom',45,'prevSdi'}},{'type',45,'union',[{'atom',45,'undefined'}|[{'type',45,'integer',[]}]]}}]],[]}],
		%% Line 47
		'type' =
		    %% Line 47
		    [{{'record','pre_sdi_data'},[{'typed_record_field',{'record_field',47,{'atom',47,'address'}},{'type',47,'union',[{'atom',47,'undefined'}|[{'type',47,'address',[]}]]}}|[{'typed_record_field',{'record_field',48,{'atom',48,'label'}},{'type',48,'union',[{'atom',48,'undefined'}|[{'type',48,'label',[]}]]}}|[{'typed_record_field',{'record_field',49,{'atom',49,'si'}},{'type',49,'union',[{'atom',49,'undefined'}|[{'type',49,'record',[{'atom',49,'sdi_info'}]}]]}}]]],[]}],
		%% Line 51
		'type' =
		    %% Line 51
		    [{{'record','pass1'},[{'typed_record_field',{'record_field',51,{'atom',51,'prevSdi'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'type',51,'integer',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'preS'},{'nil',52}},{'type',52,'list',[{'type',52,'record',[{'atom',52,'pre_sdi_data'}]}]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'labelMap'},{'call',53,{'remote',53,{'atom',53,'gb_trees'},{'atom',53,'empty'}},[]}},{'remote_type',53,[{'atom',53,'gb_trees'}|[{'atom',53,'tree'}|[[]]]]}}]]],[]}],
		%% Line 55
		'type' =
		    %% Line 55
		    [{{'record','sdi_data'},[{'typed_record_field',{'record_field',55,{'atom',55,'address'}},{'type',55,'union',[{'atom',55,'undefined'}|[{'type',55,'address',[]}]]}}|[{'typed_record_field',{'record_field',56,{'atom',56,'label_address'}},{'type',56,'union',[{'atom',56,'undefined'}|[{'type',56,'address',[]}]]}}|[{'typed_record_field',{'record_field',57,{'atom',57,'prevSdi'}},{'type',57,'union',[{'atom',57,'undefined'}|[{'type',57,'integer',[]}]]}}|[{'typed_record_field',{'record_field',58,{'atom',58,'si'}},{'type',58,'union',[{'atom',58,'undefined'}|[{'type',58,'record',[{'atom',58,'sdi_info'}]}]]}}]]]],[]}],
		%% Line 90
		'spec' =
		    %% Line 90
		    [{{'pass1_init',0},[{'type',90,'fun',[{'type',90,'product',[]}|[{'type',90,'record',[{'atom',90,'pass1'}]}]]}]}],
		%% Line 94
		'spec' =
		    %% Line 94
		    [{{'pass1_add_label',3},[{'type',94,'fun',[{'type',94,'product',[{'type',94,'record',[{'atom',94,'pass1'}]}|[{'type',94,'non_neg_integer',[]}|[{'type',94,'label',[]}]]]}|[{'type',94,'record',[{'atom',94,'pass1'}]}]]}]}],
		%% Line 101
		'spec' =
		    %% Line 101
		    [{{'pass1_add_sdi',4},[{'type',101,'fun',[{'type',101,'product',[{'type',101,'record',[{'atom',101,'pass1'}]}|[{'type',101,'non_neg_integer',[]}|[{'type',101,'label',[]}|[{'type',101,'record',[{'atom',101,'sdi_info'}]}]]]]}|[{'type',102,'record',[{'atom',102,'pass1'}]}]]}]}],
		%% Line 108
		'spec' =
		    %% Line 108
		    [{{'pass1_finalise',1},[{'type',108,'fun',[{'type',108,'product',[{'type',108,'record',[{'atom',108,'pass1'}]}]}|[{'type',108,'tuple',[{'type',108,'non_neg_integer',[]}|[{'type',108,'tuple','any'}|[{'remote_type',108,[{'atom',108,'gb_trees'}|[{'atom',108,'tree'}|[[]]]]}]]]}]]}]}],
		%% Line 112
		'spec' =
		    %% Line 112
		    [{{'pass1_finalise_preS',3},[{'type',112,'fun',[{'type',112,'product',[{'type',112,'list',[{'type',112,'record',[{'atom',112,'pre_sdi_data'}]}]}|[{'remote_type',112,[{'atom',112,'gb_trees'}|[{'atom',112,'tree'}|[[]]]]}|[{'type',112,'list',[{'type',112,'record',[{'atom',112,'sdi_data'}]}]}]]]}|[{'type',113,'tuple','any'}]]}]}],
		%% Line 125
		'spec' =
		    %% Line 125
		    [{{'pass2',1},[{'type',125,'fun',[{'type',125,'product',[{'type',125,'record',[{'atom',125,'pass1'}]}]}|[{'type',125,'tuple',[{'remote_type',125,[{'atom',125,'gb_trees'}|[{'atom',125,'tree'}|[[]]]]}|[{'type',125,'non_neg_integer',[]}]]}]]}]}],
		%% Line 143
		'spec' =
		    %% Line 143
		    [{{'mk_long',1},[{'type',143,'fun',[{'type',143,'product',[{'type',143,'non_neg_integer',[]}]}|[{'type',143,'hipe_array',[]}]]}]}],
		%% Line 174
		'spec' =
		    %% Line 174
		    [{{'mk_span',2},[{'type',174,'fun',[{'type',174,'product',[{'type',174,'non_neg_integer',[]}|[{'type',174,'tuple','any'}]]}|[{'type',174,'hipe_array',[]}]]}]}],
		%% Line 178
		'spec' =
		    %% Line 178
		    [{{'initSPAN',4},[{'type',178,'fun',[{'type',178,'product',[{'type',178,'non_neg_integer',[]}|[{'type',178,'non_neg_integer',[]}|[{'type',179,'tuple','any'}|[{'type',179,'hipe_array',[]}]]]]}|[{'type',179,'hipe_array',[]}]]}]}],
		%% Line 210
		'spec' =
		    %% Line 210
		    [{{'update_long',5},[{'type',210,'fun',[{'type',210,'product',[{'type',210,'non_neg_integer',[]}|[{'type',210,'tuple','any'}|[{'type',210,'hipe_array',[]}|[{'type',211,'tuple',[{'type',211,'non_neg_integer',[]}|[{'type',211,'tuple','any'}]]}|[{'type',211,'hipe_array',[]}]]]]]}|[{'atom',211,'ok'}]]}]}],
		%% Line 216
		'spec' =
		    %% Line 216
		    [{{'initWKL',4},[{'type',216,'fun',[{'type',216,'product',[{'type',216,'integer',[]}|[{'type',216,'tuple','any'}|[{'type',217,'hipe_array',[]}|[{'type',217,'list',[{'type',217,'non_neg_integer',[]}]}]]]]}|[{'type',217,'list',[{'type',217,'non_neg_integer',[]}]}]]}]}],
		%% Line 226
		'spec' =
		    %% Line 226
		    [{{'processWKL',5},[{'type',226,'fun',[{'type',226,'product',[{'type',226,'list',[{'type',226,'non_neg_integer',[]}]}|[{'type',226,'tuple','any'}|[{'type',226,'hipe_array',[]}|[{'type',227,'tuple',[{'type',227,'non_neg_integer',[]}|[{'type',227,'tuple','any'}]]}|[{'type',227,'hipe_array',[]}]]]]]}|[{'atom',227,'ok'}]]}]}],
		%% Line 233
		'spec' =
		    %% Line 233
		    [{{'updateChild',6},[{'type',233,'fun',[{'type',233,'product',[{'type',233,'non_neg_integer',[]}|[{'type',233,'list',[{'type',233,'non_neg_integer',[]}]}|[{'type',233,'tuple','any'}|[{'type',233,'hipe_array',[]}|[{'type',234,'tuple',[{'type',234,'non_neg_integer',[]}|[{'type',234,'tuple','any'}]]}|[{'type',234,'hipe_array',[]}]]]]]]}|[{'type',234,'list',[{'type',234,'non_neg_integer',[]}]}]]}]}],
		%% Line 247
		'spec' =
		    %% Line 247
		    [{{'parentsOfChild',2},[{'type',247,'fun',[{'type',247,'product',[{'type',247,'tuple',[{'type',247,'non_neg_integer',[]}|[{'type',247,'tuple','any'}]]}|[{'type',248,'non_neg_integer',[]}]]}|[{'type',248,'list',[{'type',248,'non_neg_integer',[]}]}]]}]}],
		%% Line 252
		'spec' =
		    %% Line 252
		    [{{'parentsOfChild',4},[{'type',252,'fun',[{'type',252,'product',[{'type',252,'integer',[]}|[{'type',252,'tuple','any'}|[{'type',252,'non_neg_integer',[]}|[{'type',253,'list',[{'type',253,'non_neg_integer',[]}]}]]]]}|[{'type',253,'list',[{'type',253,'non_neg_integer',[]}]}]]}]}],
		%% Line 268
		'spec' =
		    %% Line 268
		    [{{'updateParents',6},[{'type',268,'fun',[{'type',268,'product',[{'type',268,'list',[{'type',268,'non_neg_integer',[]}]}|[{'type',268,'non_neg_integer',[]}|[{'type',269,'byte',[]}|[{'type',269,'tuple','any'}|[{'type',269,'hipe_array',[]}|[{'type',270,'list',[{'type',270,'non_neg_integer',[]}]}]]]]]]}|[{'type',270,'list',[{'type',270,'non_neg_integer',[]}]}]]}]}],
		%% Line 276
		'spec' =
		    %% Line 276
		    [{{'updateParent',6},[{'type',276,'fun',[{'type',276,'product',[{'type',276,'non_neg_integer',[]}|[{'type',276,'non_neg_integer',[]}|[{'type',277,'byte',[]}|[{'type',277,'tuple','any'}|[{'type',277,'hipe_array',[]}|[{'type',278,'list',[{'type',278,'non_neg_integer',[]}]}]]]]]]}|[{'type',278,'list',[{'type',278,'non_neg_integer',[]}]}]]}]}],
		%% Line 291
		'spec' =
		    %% Line 291
		    [{{'updateWKL',4},[{'type',291,'fun',[{'type',291,'product',[{'type',291,'non_neg_integer',[]}|[{'type',291,'tuple','any'}|[{'type',292,'integer',[]}|[{'type',292,'list',[{'type',292,'non_neg_integer',[]}]}]]]]}|[{'type',292,'list',[{'type',292,'non_neg_integer',[]}]}]]}]}],
		%% Line 299
		'spec' =
		    %% Line 299
		    [{{'sdiSpanIsShort',2},[{'type',299,'fun',[{'type',299,'product',[{'type',299,'record',[{'atom',299,'sdi_data'}]}|[{'type',299,'integer',[]}]]}|[{'type',299,'boolean',[]}]]}]}],
		%% Line 303
		'spec' =
		    %% Line 303
		    [{{'sdiLongIncr',1},[{'type',303,'fun',[{'type',303,'product',[{'type',303,'record',[{'atom',303,'sdi_data'}]}]}|[{'type',303,'byte',[]}]]}]}],
		%% Line 317
		'spec' =
		    %% Line 317
		    [{{'mk_increment',2},[{'type',317,'fun',[{'type',317,'product',[{'type',317,'non_neg_integer',[]}|[{'type',317,'hipe_array',[]}]]}|[{'type',318,'tuple',[{'type',318,'hipe_array',[]}|[{'type',318,'non_neg_integer',[]}]]}]]}]}],
		%% Line 322
		'spec' =
		    %% Line 322
		    [{{'initINCR',5},[{'type',322,'fun',[{'type',322,'product',[{'type',322,'non_neg_integer',[]}|[{'type',322,'non_neg_integer',[]}|[{'type',322,'non_neg_integer',[]}|[{'type',323,'hipe_array',[]}|[{'type',323,'hipe_array',[]}]]]]]}|[{'type',323,'tuple',[{'type',323,'hipe_array',[]}|[{'type',323,'non_neg_integer',[]}]]}]]}]}],
		%% Line 342
		'spec' =
		    %% Line 342
		    [{{'adjust_label_map',2},[{'type',342,'fun',[{'type',342,'product',[{'remote_type',342,[{'atom',342,'gb_trees'}|[{'atom',342,'tree'}|[[]]]]}|[{'type',342,'hipe_array',[]}]]}|[{'remote_type',342,[{'atom',342,'gb_trees'}|[{'atom',342,'tree'}|[[]]]]}]]}]}],
		%% Line 346
		'type' =
		    %% Line 346
		    [{'label_pair',{'type',346,'tuple',[{'type',346,'label',[]}|[{'type',346,'record',[{'atom',346,'label_data'}]}]]},[]}],
		%% Line 348
		'spec' =
		    %% Line 348
		    [{{'applyIncr',3},[{'type',348,'fun',[{'type',348,'product',[{'type',348,'list',[{'type',348,'label_pair',[]}]}|[{'type',348,'hipe_array',[]}|[{'remote_type',348,[{'atom',348,'gb_trees'}|[{'atom',348,'tree'}|[[]]]]}]]]}|[{'remote_type',349,[{'atom',349,'gb_trees'}|[{'atom',349,'tree'}|[[]]]]}]]}]}],
		%% Line 363
		'spec' =
		    %% Line 363
		    [{{'vector_from_list',1},[{'type',363,'fun',[{'type',363,'product',[{'type',363,'list',[{'type',363,'record',[{'atom',363,'sdi_data'}]}]}]}|[{'type',363,'tuple','any'}]]}]}],
		%% Line 372
		'spec' =
		    %% Line 372
		    [{{'mk_array_of_zeros',1},[{'type',372,'fun',[{'type',372,'product',[{'type',372,'non_neg_integer',[]}]}|[{'type',372,'hipe_array',[]}]]}]}],
		%% Line 375
		'spec' =
		    %% Line 375
		    [{{'array_update',3},[{'type',375,'fun',[{'type',375,'product',[{'type',375,'hipe_array',[]}|[{'type',375,'non_neg_integer',[]}|[{'type',375,'integer',[]}]]]}|[{'type',375,'hipe_array',[]}]]}]}],
		%% Line 378
		'spec' =
		    %% Line 378
		    [{{'array_sub',2},[{'type',378,'fun',[{'type',378,'product',[{'type',378,'hipe_array',[]}|[{'type',378,'non_neg_integer',[]}]]}|[{'type',378,'integer',[]}]]}]}]]
'pass1_init'/0 =
    %% Line 91
    fun () ->
	let <_cor0> =
	    call 'gb_trees':'empty'
		()
	in  %% Line 92
	    {'pass1',-1,[],_cor0}
'pass1_add_label'/3 =
    %% Line 95
    fun (_cor2,_cor1,_cor0) ->
	%% Line 96
	case _cor2 of
	  <{'pass1',PrevSdi,_cor11,LabelMap}> when 'true' ->
	      let <LabelData> = {%% Line 97
		   'label_data',_cor1,%% Line 97
				      PrevSdi}
	      in  let <LabelMap2> =
		      %% Line 98
		      call 'gb_trees':'insert'
			  (_cor0, LabelData, LabelMap)
		  in  %% Line 99
		      call 'erlang':'setelement'
			  (4, _cor2, LabelMap2)
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'pass1_add_sdi'/4 =
    %% Line 103
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 104
	case _cor3 of
	  <{'pass1',PrevSdi,PreS,_cor14}> when 'true' ->
	      let <PreSdiData> =
		  %% Line 105
		  {'pre_sdi_data',_cor2,_cor1,_cor0}
	      in  let <_rec1> =
		      %% Line 106
		      call 'erlang':'+'
			  (PrevSdi, 1)
		  in  let <_rec2> =
			  %% Line 106
			  [PreSdiData|PreS]
		      in  %% Line 106
			  {'pass1',_rec1,_rec2,_cor14}
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'pass1_finalise'/1 =
    %% Line 109
    fun (_cor0) ->
	case _cor0 of
	  <{'pass1',PrevSdi,PreS,LabelMap}> when 'true' ->
	      let <_cor2> =
		  %% Line 110
		  call 'erlang':'+'
		      (PrevSdi, 1)
	      in  let <_cor1> =
		      %% Line 110
		      apply 'pass1_finalise_preS'/3
			  (PreS, LabelMap, [])
		  in  %% Line 110
		      {_cor2,_cor1,LabelMap}
	  ( <_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3})
		  -| [{'function_name',{'pass1_finalise',1}}] )
	    -| ['compiler_generated'] )
	end
'pass1_finalise_preS'/3 =
    %% Line 114
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_X_LabelMap,S> when 'true' ->
	      apply 'vector_from_list'/1
		  (S)
	  %% Line 115
	  <[PreSdiData|PreS],LabelMap,S> when 'true' ->
	      %% Line 116
	      case PreSdiData of
		<{'pre_sdi_data',Address,Label,SdiInfo}> when 'true' ->
		    %% Line 118
		    case call 'gb_trees':'get'
			     (Label, LabelMap) of
		      <{'label_data',LabelAddress,PrevSdi}> when 'true' ->
			  let <SdiData> =
			      %% Line 119
			      {'sdi_data',Address,LabelAddress,%% Line 120
							       PrevSdi,%% Line 120
								       SdiInfo}
			  in  %% Line 121
			      apply 'pass1_finalise_preS'/3
				  (PreS, LabelMap, [SdiData|S])
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor5})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'pass1_finalise_preS',3}}] )
	    -| ['compiler_generated'] )
	end
'pass2'/1 =
    %% Line 126
    fun (_cor0) ->
	%% Line 127
	case apply 'pass1_finalise'/1
		 (_cor0) of
	  <{N,SDIS,LabelMap}> when 'true' ->
	      let <LONG> =
		  %% Line 128
		  apply 'mk_long'/1
		      (N)
	      in  let <SPAN> =
		      %% Line 129
		      apply 'mk_span'/2
			  (N, SDIS)
		  in  let <PARENTS> =
			  %% Line 130
			  apply 'mk_parents'/2
			      (N, SDIS)
		      in  do  %% Line 131
			      apply 'update_long'/5
				  (N, SDIS, SPAN, PARENTS, LONG)
			      %% Line 132
			      case apply 'mk_increment'/2
				       (N, LONG) of
				<{INCREMENT,CodeSizeIncr}> when 'true' ->
				    let <_cor6> =
					%% Line 133
					apply 'adjust_label_map'/2
					    (LabelMap, INCREMENT)
				    in  %% Line 133
					{_cor6,CodeSizeIncr}
				( <_cor5> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor5})
				  -| ['compiler_generated'] )
			      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'mk_long'/1 =
    %% Line 144
    fun (_cor0) ->
	%% Line 145
	apply 'mk_array_of_zeros'/1
	    (_cor0)
'mk_span'/2 =
    %% Line 175
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 176
	    apply 'mk_array_of_zeros'/1
		(_cor1)
	in  %% Line 176
	    apply 'initSPAN'/4
		(0, _cor1, _cor0, _cor2)
'initSPAN'/4 =
    %% Line 180
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 181
	case <> of
	  <>
	      when call 'erlang':'>='
		    (_cor3,
		     _cor2) ->
	      _cor0
	  %% Line 182
	  <> when 'true' ->
	      %% Line 184
	      case apply 'vector_sub'/2
		       (_cor1, _cor3) of
		<{'sdi_data',SdiAddress,LabelAddress,_cor12,_cor13}> when 'true' ->
		    let <SdiSpan> =
			%% Line 185
			call 'erlang':'-'
			    (LabelAddress, SdiAddress)
		    in  do  %% Line 186
			    apply 'array_update'/3
				(_cor0, _cor3, SdiSpan)
			    let <_cor7> =
				%% Line 187
				call 'erlang':'+'
				    (_cor3, 1)
			    in  %% Line 187
				apply 'initSPAN'/4
				    (_cor7, _cor2, _cor1, _cor0)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	end
'mk_parents'/2 =
    %% Line 190
    fun (_cor1,_cor0) ->
	{_cor1,_cor0}
'update_long'/5 =
    %% Line 212
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 213
	    call 'erlang':'-'
		(_cor4, 1)
	in  let <WKL> =
		%% Line 213
		apply 'initWKL'/4
		    (_cor5, _cor3, _cor2, [])
	    in  %% Line 214
		apply 'processWKL'/5
		    (WKL, _cor3, _cor2, _cor1, _cor0)
'initWKL'/4 =
    %% Line 218
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 219
	case <> of
	  <>
	      when call 'erlang':'<'
		    (_cor3,
		     0) ->
	      _cor0
	  %% Line 220
	  <> when 'true' ->
	      let <SdiSpan> =
		  %% Line 221
		  apply 'array_sub'/2
		      (_cor1, _cor3)
	      in  let <WKL2> =
		      %% Line 222
		      apply 'updateWKL'/4
			  (_cor3, _cor2, SdiSpan, _cor0)
		  in  let <_cor6> =
			  %% Line 223
			  call 'erlang':'-'
			      (_cor3, 1)
		      in  %% Line 223
			  apply 'initWKL'/4
			      (_cor6, _cor2, _cor1, WKL2)
	end
'processWKL'/5 =
    %% Line 228
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_SDIS,_X_SPAN,_X_PARENTS,_X_LONG> when 'true' ->
	      'ok'
	  %% Line 229
	  <[Child|WKL],SDIS,SPAN,PARENTS,LONG> when 'true' ->
	      let <WKL2> =
		  %% Line 230
		  apply 'updateChild'/6
		      (Child, WKL, SDIS, SPAN, PARENTS, LONG)
	      in  %% Line 231
		  apply 'processWKL'/5
		      (WKL2, SDIS, SPAN, PARENTS, LONG)
	  ( <_cor10,_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'processWKL',5}}] )
	    -| ['compiler_generated'] )
	end
'updateChild'/6 =
    %% Line 235
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 236
	case apply 'array_sub'/2
		 (_cor2, _cor5) of
	  %% Line 237
	  <0> when 'true' ->
	      _cor4
	  %% Line 238
	  <_cor16> when 'true' ->
	      let <SdiData> =
		  %% Line 239
		  apply 'vector_sub'/2
		      (_cor3, _cor5)
	      in  let <Incr> =
		      %% Line 240
		      apply 'sdiLongIncr'/1
			  (SdiData)
		  in  do  %% Line 241
			  apply 'array_update'/3
			      (_cor0, _cor5, Incr)
			  do  %% Line 242
			      apply 'array_update'/3
				  (_cor2, _cor5, 0)
			      let <PS> =
				  %% Line 243
				  apply 'parentsOfChild'/2
				      (_cor1, _cor5)
			      in  %% Line 244
				  apply 'updateParents'/6
				      (PS, _cor5, Incr, _cor3, _cor2, _cor4)
	end
'parentsOfChild'/2 =
    %% Line 249
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{N,SDIS},Child> when 'true' ->
	      let <_cor2> =
		  %% Line 250
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 250
		  apply 'parentsOfChild'/4
		      (_cor2, SDIS, Child, [])
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'parentsOfChild',2}}] )
	    -| ['compiler_generated'] )
	end
'parentsOfChild'/4 =
    %% Line 254
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <-1,_X_SDIS,_X_Child,PS> when 'true' ->
	      PS
	  %% Line 255
	  <SdiNr,SDIS,Child,PS> when 'true' ->
	      %% Line 257
	      case apply 'vector_sub'/2
		       (SDIS, SdiNr) of
		<{'sdi_data',_cor20,_cor21,PrevSdi,_cor22}> when 'true' ->
		    let <LO,HI> =
			%% Line 259
			case <> of
			  <>
			      when call 'erlang':'=<'
				    (SdiNr,
				     PrevSdi) ->
			      let <_cor6> =
				  call 'erlang':'+'
				      (SdiNr, 1)
			      in  <_cor6,PrevSdi>
			  %% Line 260
			  <> when 'true' ->
			      let <_cor8> =
				  call 'erlang':'+'
				      (PrevSdi, 1)
			      in  let <_cor7> =
				      call 'erlang':'-'
					  (SdiNr, 1)
				  in  <_cor8,_cor7>
			end
		    in  let <_cor13> =
			    %% Line 263
			    case <> of
			      <>
				  when let <_cor11> =
					call 'erlang':'=<'
					    (LO, Child)
				    in  let <_cor12> =
					    call 'erlang':'=<'
						(Child, HI)
					in  call 'erlang':'and'
						(_cor11, _cor12) ->
				  [SdiNr|PS]
			      %% Line 264
			      <> when 'true' ->
				  PS
			    end
			in  let <_cor15> =
				%% Line 266
				call 'erlang':'-'
				    (SdiNr, 1)
			    in  %% Line 266
				apply 'parentsOfChild'/4
				    (_cor15, SDIS, Child, _cor13)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	end
'updateParents'/6 =
    %% Line 271
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_Child,_X_Incr,_X_SDIS,_X_SPAN,WKL> when 'true' ->
	      WKL
	  %% Line 272
	  <[P|PS],Child,Incr,SDIS,SPAN,WKL> when 'true' ->
	      let <WKL2> =
		  %% Line 273
		  apply 'updateParent'/6
		      (P, Child, Incr, SDIS, SPAN, WKL)
	      in  %% Line 274
		  apply 'updateParents'/6
		      (PS, Child, Incr, SDIS, SPAN, WKL2)
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'updateParents',6}}] )
	    -| ['compiler_generated'] )
	end
'updateParent'/6 =
    %% Line 279
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 280
	case apply 'array_sub'/2
		 (_cor1, _cor5) of
	  %% Line 281
	  <0> when 'true' ->
	      _cor0
	  %% Line 282
	  <OldSpan> when 'true' ->
	      let <_cor6> =
		  %% Line 284
		  case <> of
		    <>
			when call 'erlang':'<'
			      (_cor5,
			       _cor4) ->
			call 'erlang':'+'
			    (OldSpan, _cor3)
		    %% Line 285
		    <> when 'true' ->
			call 'erlang':'-'
			    (OldSpan, _cor3)
		  end
	      in  do  %% Line 287
		      apply 'array_update'/3
			  (_cor1, _cor5, _cor6)
		      %% Line 288
		      apply 'updateWKL'/4
			  (_cor5, _cor2, _cor6, _cor0)
	end
'updateWKL'/4 =
    %% Line 293
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 294
	    apply 'vector_sub'/2
		(_cor2, _cor3)
	in  %% Line 294
	    case apply 'sdiSpanIsShort'/2
		     (_cor4, _cor1) of
	      %% Line 295
	      <'true'> when 'true' ->
		  _cor0
	      %% Line 296
	      <'false'> when 'true' ->
		  [_cor3|_cor0]
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor5})
		-| ['compiler_generated'] )
	    end
'sdiSpanIsShort'/2 =
    %% Line 300
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'sdi_data',_cor6,_cor7,_cor8,{'sdi_info',LB,UB,_cor9}},SdiSpan> when 'true' ->
	      %% Line 301
	      ( case <> of
		  ( <>
			when call 'erlang':'>='
			      (SdiSpan,
			       LB) ->
			call 'erlang':'=<'
			    (SdiSpan, UB)
		    -| ['compiler_generated'] )
		  ( <> when 'true' ->
			'false'
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'sdiSpanIsShort',2}}] )
	    -| ['compiler_generated'] )
	end
'sdiLongIncr'/1 =
    %% Line 304
    fun (_cor0) ->
	case _cor0 of
	  <{'sdi_data',_cor2,_cor3,_cor4,{'sdi_info',_cor5,_cor6,Incr}}> when 'true' ->
	      Incr
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'sdiLongIncr',1}}] )
	    -| ['compiler_generated'] )
	end
'mk_increment'/2 =
    %% Line 319
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 320
	    apply 'mk_array_of_zeros'/1
		(_cor1)
	in  %% Line 320
	    apply 'initINCR'/5
		(0, 0, _cor1, _cor0, _cor2)
'initINCR'/5 =
    %% Line 324
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 325
	case <> of
	  <>
	      when call 'erlang':'>='
		    (_cor4,
		     _cor2) ->
	      {_cor0,_cor3}
	  %% Line 326
	  <> when 'true' ->
	      let <_cor5> =
		  %% Line 327
		  apply 'array_sub'/2
		      (_cor1, _cor4)
	      in  let <SdiIncr> =
		      %% Line 327
		      call 'erlang':'+'
			  (_cor3, _cor5)
		  in  do  %% Line 328
			  apply 'array_update'/3
			      (_cor0, _cor4, SdiIncr)
			  let <_cor7> =
			      %% Line 329
			      call 'erlang':'+'
				  (_cor4, 1)
			  in  %% Line 329
			      apply 'initINCR'/5
				  (_cor7, SdiIncr, _cor2, _cor1, _cor0)
	end
'adjust_label_map'/2 =
    %% Line 343
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 344
	    call 'gb_trees':'to_list'
		(_cor1)
	in  let <_cor2> =
		%% Line 344
		call 'gb_trees':'empty'
		    ()
	    in  %% Line 344
		apply 'applyIncr'/3
		    (_cor3, _cor0, _cor2)
'applyIncr'/3 =
    %% Line 350
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_X_INCREMENT,LabelMap> when 'true' ->
	      LabelMap
	  %% Line 351
	  <[{Label,LabelData}|List],INCREMENT,LabelMap> when 'true' ->
	      %% Line 352
	      case LabelData of
		<{'label_data',Address,PrevSdi}> when 'true' ->
		    let <_cor4> =
			%% Line 354
			case <> of
			  <>
			      when call 'erlang':'<'
				    (PrevSdi,
				     0) ->
			      0
			  %% Line 355
			  <> when 'true' ->
			      apply 'array_sub'/2
				  (INCREMENT, PrevSdi)
			end
		    in  let <_cor6> =
			    %% Line 357
			    call 'erlang':'+'
				(Address, _cor4)
			in  let <_cor7> =
				%% Line 357
				call 'gb_trees':'insert'
				    (Label, _cor6, LabelMap)
			    in  %% Line 357
				apply 'applyIncr'/3
				    (List, INCREMENT, _cor7)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'applyIncr',3}}] )
	    -| ['compiler_generated'] )
	end
'vector_from_list'/1 =
    %% Line 364
    fun (_cor0) ->
	call 'erlang':'list_to_tuple'
	    (_cor0)
'vector_sub'/2 =
    %% Line 366
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    call 'erlang':'+'
		(_cor0, 1)
	in  call 'erlang':'element'
		(_cor2, _cor1)
'mk_array_of_zeros'/1 =
    %% Line 373
    fun (_cor0) ->
	call 'hipe_bifs':'array'
	    (_cor0, 0)
'array_update'/3 =
    %% Line 376
    fun (_cor2,_cor1,_cor0) ->
	call 'hipe_bifs':'array_update'
	    (_cor2, _cor1, _cor0)
'array_sub'/2 =
    %% Line 379
    fun (_cor1,_cor0) ->
	call 'hipe_bifs':'array_sub'
	    (_cor1, _cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_sdi')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_sdi', _cor0)
end