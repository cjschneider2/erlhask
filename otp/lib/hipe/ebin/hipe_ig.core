module 'hipe_ig' ['add_edge'/4,
		  'adj_list'/1,
		  'build'/2,
		  'dec_node_degree'/2,
		  'get_moves'/1,
		  'get_node_degree'/2,
		  'is_trivially_colourable'/3,
		  'module_info'/0,
		  'module_info'/1,
		  'node_adj_list'/2,
		  'node_spill_cost'/2,
		  'nodes_are_adjacent'/3,
		  'remove_edge'/4,
		  'spill_costs'/1]
    attributes [%% Line 301
		'type' =
		    %% Line 301
		    [{{'record','comp_servers'},[{'typed_record_field',{'record_field',301,{'atom',301,'pp_server'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'range'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'type'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}]]],[]}],
		%% Line 307
		'type' =
		    %% Line 307
		    [{'comp_option',{'type',307,'union',[{'type',307,'atom',[]}|[{'type',307,'tuple',[{'type',307,'atom',[]}|[{'type',307,'atom',[]}]]}]]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{'comp_options',{'type',308,'list',[{'type',308,'comp_option',[]}]},[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'hipe_architecture',{'type',311,'union',[{'atom',311,'amd64'}|[{'atom',311,'arm'}|[{'atom',311,'powerpc'}|[{'atom',311,'ppc64'}|[{'atom',311,'ultrasparc'}|[{'atom',311,'x86'}]]]]]]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{'hipe_map',{'type',313,'list',[{'type',313,'tuple',[{'type',313,'non_neg_integer',[]}|[{'type',314,'union',[{'atom',314,'unknown'}|[{'type',314,'tuple',[{'type',314,'union',[{'atom',314,'reg'}|[{'atom',314,'fp_reg'}|[{'atom',314,'spill'}]]]}|[{'type',315,'non_neg_integer',[]}]]}]]}]]}]},[]}],
		%% Line 316
		'type' =
		    %% Line 316
		    [{'hipe_temp_map',{'type',316,'tuple','any'},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{'hipe_spill_map',{'type',317,'list',[{'type',317,'tuple',[{'type',317,'non_neg_integer',[]}|[{'type',317,'tuple',[{'atom',317,'spill'}|[{'type',317,'non_neg_integer',[]}]]}]]}]},[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{'cfg_lbl',{'type',28,'non_neg_integer',[]},[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','cfg_info'},[{'typed_record_field',{'record_field',34,{'atom',34,'fun'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'type',34,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',35,{'atom',35,'start_label'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'cfg_lbl',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'is_closure'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',37,{'atom',37,'closure_arity'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'type',37,'arity',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'is_leaf'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'boolean',[]}]]}}|[{'record_field',39,{'atom',39,'params'}}|[{'record_field',40,{'atom',40,'info'},{'nil',40}}]]]]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'cfg_data',{'type',45,'tuple',[{'remote_type',45,[{'atom',45,'dict'}|[{'atom',45,'dict'}|[[]]]]}|[{'type',45,'list',[{'type',45,'cfg_lbl',[]}]}|[{'type',45,'non_neg_integer',[]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','cfg'},[{'typed_record_field',{'record_field',50,{'atom',50,'table'},{'call',50,{'remote',50,{'atom',50,'gb_trees'},{'atom',50,'empty'}},[]}},{'remote_type',50,[{'atom',50,'gb_trees'}|[{'atom',50,'tree'}|[[]]]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'info'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'type',51,'record',[{'atom',51,'cfg_info'}]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'data'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'cfg_data',[]}]]}}]]],[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{'cfg',{'type',53,'record',[{'atom',53,'cfg'}]},[]}],
		%% Line 21
		'type' =
		    %% Line 21
		    [{'hipe_array',{'type',21,'integer',[]},[]}],
		%% Line 23
		'type' =
		    %% Line 23
		    [{{'record','spill_cost'},[{'typed_record_field',{'record_field',24,{'atom',24,'uses'}},{'type',24,'union',[{'atom',24,'undefined'}|[{'type',24,'hipe_array',[]}]]}}|[{'typed_record_field',{'record_field',25,{'atom',25,'bb_uses'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'hipe_array',[]}]]}}]],[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{{'record','igraph'},[{'record_field',68,{'atom',68,'adj_set'}}|[{'record_field',68,{'atom',68,'adj_list'}}|[{'record_field',68,{'atom',68,'ig_moves'}}|[{'record_field',68,{'atom',68,'degree'}}|[{'typed_record_field',{'record_field',69,{'atom',69,'spill_costs'}},{'type',69,'union',[{'atom',69,'undefined'}|[{'type',69,'record',[{'atom',69,'spill_cost'}]}]]}}|[{'typed_record_field',{'record_field',70,{'atom',70,'num_temps'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'non_neg_integer',[]}]]}}]]]]]],[]}],
		%% Line 159
		'type' =
		    %% Line 159
		    [{{'record','adjset'},[{'record_field',159,{'atom',159,'index'}}|[{'record_field',159,{'atom',159,'array'}}]],[]}],
		%% Line 160
		'type' =
		    %% Line 160
		    [{{'record','adjset_chunked'},[{'record_field',160,{'atom',160,'index'}}|[{'record_field',160,{'atom',160,'chunks'}}]],[]}],
		%% Line 162
		'spec' =
		    %% Line 162
		    [{{'adjset_new',1},[{'type',162,'fun',[{'type',162,'product',[{'type',162,'non_neg_integer',[]}]}|[{'type',162,'union',[{'type',162,'record',[{'atom',162,'adjset'}]}|[{'type',162,'record',[{'atom',162,'adjset_chunked'}]}]]}]]}]}],
		%% Line 306
		'spec' =
		    %% Line 306
		    [{{'spill_costs',1},[{'type',306,'fun',[{'type',306,'product',[{'type',306,'record',[{'atom',306,'igraph'}]}]}|[{'type',306,'record',[{'atom',306,'spill_cost'}]}]]}]}],
		%% Line 346
		'spec' =
		    %% Line 346
		    [{{'initial_ig',2},[{'type',346,'fun',[{'type',346,'product',[{'type',346,'non_neg_integer',[]}|[{'type',346,'atom',[]}]]}|[{'type',346,'record',[{'atom',346,'igraph'}]}]]}]}],
		%% Line 370
		'spec' =
		    %% Line 370
		    [{{'build',2},[{'type',370,'fun',[{'type',370,'product',[{'type',370,'record',[{'atom',370,'cfg'}]}|[{'type',370,'atom',[]}]]}|[{'type',370,'record',[{'atom',370,'igraph'}]}]]}]}],
		%% Line 570
		'spec' =
		    %% Line 570
		    [{{'nodes_are_adjacent',3},[{'type',570,'fun',[{'type',570,'product',[{'type',570,'integer',[]}|[{'type',570,'integer',[]}|[{'type',570,'record',[{'atom',570,'igraph'}]}]]]}|[{'type',570,'boolean',[]}]]}]}]]
'degree_new'/2 =
    %% Line 80
    fun (_cor1,_cor0) ->
	let <Degree> =
	    %% Line 81
	    call 'hipe_bifs':'array'
		(_cor1, 0)
	in  let <_cor3> =
		%% Line 82
		call _cor0:'allocatable'
		    ()
	    in  let <K> =
		    %% Line 82
		    call 'erlang':'length'
			(_cor3)
		in  let <Inf> =
			%% Line 83
			call 'erlang':'+'
			    (K, _cor1)
		    in  let <_cor6> =
			    %% Line 84
			    call _cor0:'all_precoloured'
				()
			in  %% Line 84
			    apply 'precoloured_to_inf_degree'/3
				(_cor6, Inf, Degree)
'precoloured_to_inf_degree'/3 =
    %% Line 86
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_X_Inf,Degree> when 'true' ->
	      Degree
	  %% Line 87
	  <[P|Ps],Inf,Degree> when 'true' ->
	      do  %% Line 88
		  call 'hipe_bifs':'array_update'
		      (Degree, P, Inf)
		  %% Line 89
		  apply 'precoloured_to_inf_degree'/3
		      (Ps, Inf, Degree)
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'precoloured_to_inf_degree',3}}] )
	    -| ['compiler_generated'] )
	end
'degree_inc'/2 =
    %% Line 91
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 92
	    call 'hipe_bifs':'array_sub'
		(_cor0, _cor1)
	in  let <_cor3> =
		%% Line 92
		call 'erlang':'+'
		    (_cor2, 1)
	    in  %% Line 92
		call 'hipe_bifs':'array_update'
		    (_cor0, _cor1, _cor3)
'degree_dec'/2 =
    %% Line 94
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 95
	    call 'hipe_bifs':'array_sub'
		(_cor0, _cor1)
	in  let <_cor3> =
		%% Line 95
		call 'erlang':'-'
		    (_cor2, 1)
	    in  %% Line 95
		call 'hipe_bifs':'array_update'
		    (_cor0, _cor1, _cor3)
'degree_get'/2 =
    %% Line 97
    fun (_cor1,_cor0) ->
	%% Line 98
	call 'hipe_bifs':'array_sub'
	    (_cor0, _cor1)
'degree_is_trivially_colourable'/3 =
    %% Line 100
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 101
	    call 'hipe_bifs':'array_sub'
		(_cor0, _cor2)
	in  %% Line 101
	    call 'erlang':'<'
		(_cor3, _cor1)
'adjset_new'/1 =
    %% Line 164
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 165
	    call 'erlang':'-'
		(_cor0, 1)
	in  let <_cor2> =
		%% Line 165
		call 'erlang':'*'
		    (_cor0, _cor1)
	    in  let <ArrayBits> =
		    %% Line 165
		    call 'erlang':'div'
			(_cor2, 2)
		in  let <Index> =
			%% Line 166
			apply 'adjset_mk_index'/2
			    (_cor0, [])
		    in  %% Line 167
			try
			    call 'hipe_bifs':'bitarray'
				(ArrayBits, 'false')
			of <_cor5> ->
			    %% Line 169
			    {'adjset',Index,_cor5}
			catch <_cor9,_cor8,_cor7> ->
			    let <_cor10> =
				%% Line 172
				apply 'adjset_mk_chunks'/1
				    (ArrayBits)
			    in  %% Line 172
				{'adjset_chunked',Index,_cor10}
'adjset_mk_chunks'/1 =
    %% Line 178
    fun (_cor0) ->
	let <_cor5> =
	    %% Line 180
	    case call 'erlang':'band'
		     (_cor0, 524287) of
	      %% Line 181
	      <0> when 'true' ->
		  []
	      %% Line 182
	      <LastChunkBits> when 'true' ->
		  let <_cor3> =
		      call 'hipe_bifs':'bitarray'
			  (LastChunkBits, 'false')
		  in  [_cor3|[]]
	    end
	in  let <N> =
		%% Line 184
		call 'erlang':'bsr'
		    (_cor0, 19)
	    in  %% Line 185
		apply 'adjset_mk_chunks'/2
		    (N, _cor5)
'adjset_mk_chunks'/2 =
    %% Line 187
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,Tail> when 'true' ->
	      %% Line 188
	      call 'erlang':'list_to_tuple'
		  (Tail)
	  %% Line 189
	  <N,Tail> when 'true' ->
	      let <_cor4> =
		  %% Line 190
		  call 'erlang':'-'
		      (N, 1)
	      in  let <_cor3> =
		      %% Line 190
		      call 'hipe_bifs':'bitarray'
			  (524288, 'false')
		  in  %% Line 190
		      apply 'adjset_mk_chunks'/2
			  (_cor4, [_cor3|Tail])
	end
'adjset_mk_index'/2 =
    %% Line 192
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,Tail> when 'true' ->
	      %% Line 193
	      call 'erlang':'list_to_tuple'
		  (Tail)
	  %% Line 194
	  <N,Tail> when 'true' ->
	      let <I> =
		  %% Line 195
		  call 'erlang':'-'
		      (N, 1)
	      in  let <_cor3> =
		      %% Line 196
		      call 'erlang':'-'
			  (I, 1)
		  in  let <_cor4> =
			  %% Line 196
			  call 'erlang':'*'
			      (I, _cor3)
		      in  let <_cor5> =
			      %% Line 196
			      call 'erlang':'div'
				  (_cor4, 2)
			  in  %% Line 196
			      apply 'adjset_mk_index'/2
				  (I, [_cor5|Tail])
	end
'adjset_add_edge'/3 =
    %% Line 198
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <U0,V0,{'adjset',Index,Array}> when 'true' ->
	      let <U,V> =
		  %% Line 200
		  case <> of
		    <>
			when call 'erlang':'<'
			      (U0,
			       V0) ->
			<U0,V0>
		    %% Line 201
		    <> when 'true' ->
			<V0,U0>
		  end
	      in  let <_cor5> =
		      %% Line 204
		      call 'erlang':'+'
			  (V, 1)
		  in  let <_cor6> =
			  %% Line 204
			  call 'erlang':'element'
			      (_cor5, Index)
		      in  let <BitNr> =
			      %% Line 204
			      call 'erlang':'+'
				  (_cor6, U)
			  in  %% Line 205
			      call 'hipe_bifs':'bitarray_update'
				  (Array, BitNr, 'true')
	  %% Line 206
	  <U0,V0,{'adjset_chunked',Index,Chunks}> when 'true' ->
	      let <U,V> =
		  %% Line 208
		  case <> of
		    <>
			when call 'erlang':'<'
			      (U0,
			       V0) ->
			<U0,V0>
		    %% Line 209
		    <> when 'true' ->
			<V0,U0>
		  end
	      in  let <_cor10> =
		      %% Line 212
		      call 'erlang':'+'
			  (V, 1)
		  in  let <_cor11> =
			  %% Line 212
			  call 'erlang':'element'
			      (_cor10, Index)
		      in  let <BitNr> =
			      %% Line 212
			      call 'erlang':'+'
				  (_cor11, U)
			  in  let <ChunkNr> =
				  %% Line 214
				  call 'erlang':'bsr'
				      (BitNr, 19)
			      in  let <ChunkBit> =
				      %% Line 215
				      call 'erlang':'band'
					  (BitNr, 524287)
				  in  let <_cor17> =
					  %% Line 216
					  call 'erlang':'+'
					      (ChunkNr, 1)
				      in  let <Chunk> =
					      %% Line 216
					      call 'erlang':'element'
						  (_cor17, Chunks)
					  in  %% Line 217
					      call 'hipe_bifs':'bitarray_update'
						  (Chunk, ChunkBit, 'true')
	  ( <_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19})
		  -| [{'function_name',{'adjset_add_edge',3}}] )
	    -| ['compiler_generated'] )
	end
'adjset_remove_edge'/3 =
    %% Line 219
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <U0,V0,{'adjset',Index,Array}> when 'true' ->
	      let <U,V> =
		  %% Line 221
		  case <> of
		    <>
			when call 'erlang':'<'
			      (U0,
			       V0) ->
			<U0,V0>
		    %% Line 222
		    <> when 'true' ->
			<V0,U0>
		  end
	      in  let <_cor5> =
		      %% Line 225
		      call 'erlang':'+'
			  (V, 1)
		  in  let <_cor6> =
			  %% Line 225
			  call 'erlang':'element'
			      (_cor5, Index)
		      in  let <BitNr> =
			      %% Line 225
			      call 'erlang':'+'
				  (_cor6, U)
			  in  %% Line 226
			      call 'hipe_bifs':'bitarray_update'
				  (Array, BitNr, 'false')
	  %% Line 227
	  <U0,V0,{'adjset_chunked',Index,Chunks}> when 'true' ->
	      let <U,V> =
		  %% Line 229
		  case <> of
		    <>
			when call 'erlang':'<'
			      (U0,
			       V0) ->
			<U0,V0>
		    %% Line 230
		    <> when 'true' ->
			<V0,U0>
		  end
	      in  let <_cor10> =
		      %% Line 233
		      call 'erlang':'+'
			  (V, 1)
		  in  let <_cor11> =
			  %% Line 233
			  call 'erlang':'element'
			      (_cor10, Index)
		      in  let <BitNr> =
			      %% Line 233
			      call 'erlang':'+'
				  (_cor11, U)
			  in  let <ChunkNr> =
				  %% Line 235
				  call 'erlang':'bsr'
				      (BitNr, 19)
			      in  let <ChunkBit> =
				      %% Line 236
				      call 'erlang':'band'
					  (BitNr, 524287)
				  in  let <_cor17> =
					  %% Line 237
					  call 'erlang':'+'
					      (ChunkNr, 1)
				      in  let <Chunk> =
					      %% Line 237
					      call 'erlang':'element'
						  (_cor17, Chunks)
					  in  %% Line 238
					      call 'hipe_bifs':'bitarray_update'
						  (Chunk, ChunkBit, 'false')
	  ( <_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19})
		  -| [{'function_name',{'adjset_remove_edge',3}}] )
	    -| ['compiler_generated'] )
	end
'adjset_are_adjacent'/3 =
    %% Line 240
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <U0,V0,{'adjset',Index,Array}> when 'true' ->
	      let <U,V> =
		  %% Line 242
		  case <> of
		    <>
			when call 'erlang':'<'
			      (U0,
			       V0) ->
			<U0,V0>
		    %% Line 243
		    <>
			when call 'erlang':'=:='
			      (U0,
			       V0) ->
			call 'erlang':'exit'
			    ({'hipe_ig','adjacent',U0,V0})
		    %% Line 244
		    <> when 'true' ->
			<V0,U0>
		  end
	      in  let <_cor5> =
		      %% Line 247
		      call 'erlang':'+'
			  (V, 1)
		  in  let <_cor6> =
			  %% Line 247
			  call 'erlang':'element'
			      (_cor5, Index)
		      in  let <BitNr> =
			      %% Line 247
			      call 'erlang':'+'
				  (_cor6, U)
			  in  %% Line 248
			      call 'hipe_bifs':'bitarray_sub'
				  (Array, BitNr)
	  %% Line 249
	  <U0,V0,{'adjset_chunked',Index,Chunks}> when 'true' ->
	      let <U,V> =
		  %% Line 251
		  case <> of
		    <>
			when call 'erlang':'<'
			      (U0,
			       V0) ->
			<U0,V0>
		    %% Line 252
		    <>
			when call 'erlang':'=:='
			      (U0,
			       V0) ->
			call 'erlang':'exit'
			    ({'hipe_ig','adjacent',U0,V0})
		    %% Line 253
		    <> when 'true' ->
			<V0,U0>
		  end
	      in  let <_cor10> =
		      %% Line 256
		      call 'erlang':'+'
			  (V, 1)
		  in  let <_cor11> =
			  %% Line 256
			  call 'erlang':'element'
			      (_cor10, Index)
		      in  let <BitNr> =
			      %% Line 256
			      call 'erlang':'+'
				  (_cor11, U)
			  in  let <ChunkNr> =
				  %% Line 258
				  call 'erlang':'bsr'
				      (BitNr, 19)
			      in  let <ChunkBit> =
				      %% Line 259
				      call 'erlang':'band'
					  (BitNr, 524287)
				  in  let <_cor17> =
					  %% Line 260
					  call 'erlang':'+'
					      (ChunkNr, 1)
				      in  let <Chunk> =
					      %% Line 260
					      call 'erlang':'element'
						  (_cor17, Chunks)
					  in  %% Line 261
					      call 'hipe_bifs':'bitarray_sub'
						  (Chunk, ChunkBit)
	  ( <_cor21,_cor20,_cor19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20,_cor19})
		  -| [{'function_name',{'adjset_are_adjacent',3}}] )
	    -| ['compiler_generated'] )
	end
'adj_set'/1 =
    %% Line 301
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'igraph',_rec0,_cor3,_cor4,_cor5,_cor6,_cor7}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec0
	      -| ['compiler_generated'] )
	    ( <_cor8> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','igraph'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'adj_list'/1 =
    %% Line 302
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'igraph',_cor3,_rec1,_cor4,_cor5,_cor6,_cor7}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec1
	      -| ['compiler_generated'] )
	    ( <_cor8> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','igraph'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'ig_moves'/1 =
    %% Line 303
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'igraph',_cor3,_cor4,_rec2,_cor5,_cor6,_cor7}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec2
	      -| ['compiler_generated'] )
	    ( <_cor8> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','igraph'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'degree'/1 =
    %% Line 304
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'igraph',_cor3,_cor4,_cor5,_rec3,_cor6,_cor7}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec3
	      -| ['compiler_generated'] )
	    ( <_cor8> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','igraph'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'spill_costs'/1 =
    %% Line 307
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'igraph',_cor3,_cor4,_cor5,_cor6,_rec4,_cor7}
		 -| ['compiler_generated'] )> when 'true' ->
		  _rec4
	      -| ['compiler_generated'] )
	    ( <_cor8> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','igraph'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'set_adj_list'/2 =
    %% Line 328
    fun (_cor1,_cor0) ->
	case _cor0 of
	  <{'igraph',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11}> when 'true' ->
	      call 'erlang':'setelement'
		  (3, _cor0, _cor1)
	  ( <_cor12> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','igraph'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'set_ig_moves'/2 =
    %% Line 329
    fun (_cor1,_cor0) ->
	case _cor0 of
	  <{'igraph',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11}> when 'true' ->
	      call 'erlang':'setelement'
		  (4, _cor0, _cor1)
	  ( <_cor12> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','igraph'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'set_spill_costs'/2 =
    %% Line 331
    fun (_cor1,_cor0) ->
	case _cor0 of
	  <{'igraph',_cor6,_cor7,_cor8,_cor9,_cor10,_cor11}> when 'true' ->
	      call 'erlang':'setelement'
		  (6, _cor0, _cor1)
	  ( <_cor12> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','igraph'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'initial_ig'/2 =
    %% Line 348
    fun (_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 349
	    apply 'adjset_new'/1
		(_cor1)
	in  let <_cor5> =
		%% Line 350
		call 'hipe_adj_list':'new'
		    (_cor1)
	    in  let <_cor4> =
		    %% Line 351
		    call 'hipe_ig_moves':'new'
			(_cor1)
		in  let <_cor3> =
			%% Line 352
			apply 'degree_new'/2
			    (_cor1, _cor0)
		    in  let <_cor2> =
			    %% Line 353
			    call 'hipe_spillcost':'new'
				(_cor1)
			in  %% Line 349
			    {'igraph',_cor6,_cor5,_cor4,_cor3,_cor2,_cor1}
'build'/2 =
    %% Line 372
    fun (_cor1,_cor0) ->
	let <BBs_in_out_liveness> =
	    %% Line 373
	    call _cor0:'analyze'
		(_cor1)
	in  let <Labels> =
		%% Line 374
		call _cor0:'labels'
		    (_cor1)
	    in  let <NumTemps> =
		    %% Line 376
		    call _cor0:'number_of_temporaries'
			(_cor1)
		in  let <IG0> =
			%% Line 377
			apply 'initial_ig'/2
			    (NumTemps, _cor0)
		    in  %% Line 380
			apply 'analyze_bbs'/5
			    (Labels, BBs_in_out_liveness, IG0, _cor1, _cor0)
'analyze_bbs'/5 =
    %% Line 403
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[],_cor19,IG,_cor20,_cor21> when 'true' ->
	      IG
	  %% Line 404
	  <[L|Ls],BBs_in_out_liveness,IG,CFG,Target> when 'true' ->
	      let <BB> =
		  %% Line 406
		  call Target:'bb'
		      (CFG, L)
	      in  let <BB_code> =
		      %% Line 408
		      call 'hipe_bb':'code'
			  (BB)
		  in  let <BB_liveout> =
			  %% Line 410
			  call Target:'liveout'
			      (BBs_in_out_liveness, L)
		      in  let <BB_liveout_numbers> =
			      %% Line 412
			      apply 'reg_numbers'/2
				  (BB_liveout, Target)
			  in  let <_cor9> =
				  %% Line 415
				  call 'ordsets':'from_list'
				      (BB_liveout_numbers)
			      in  %% Line 414
				  case apply 'analyze_bb_instructions'/4
					   (BB_code, _cor9, %% Line 416
							    IG, %% Line 417
								Target) of
				    <{_cor22,New_ig,Ref}> when 'true' ->
					let <_cor11> =
					    %% Line 419
					    apply 'spill_costs'/1
						(New_ig)
					in  let <_cor12> =
						%% Line 418
						call 'hipe_spillcost':'ref_in_bb'
						    (Ref, _cor11)
					    in  let <Newer_ig> =
						    %% Line 418
						    apply 'set_spill_costs'/2
							(_cor12, %% Line 420
								 New_ig)
						in  %% Line 421
						    apply 'analyze_bbs'/5
							(Ls, BBs_in_out_liveness, Newer_ig, CFG, Target)
				    ( <_cor10> when 'true' ->
					  primop 'match_fail'
					      ({'badmatch',_cor10})
				      -| ['compiler_generated'] )
				  end
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'analyze_bbs',5}}] )
	    -| ['compiler_generated'] )
	end
'analyze_bb_instructions'/4 =
    %% Line 445
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],Live,IG,_cor25> when 'true' ->
	      let <_cor4> =
		  call 'ordsets':'new'
		      ()
	      in  {Live,IG,_cor4}
	  %% Line 446
	  <[Instruction|Instructions],Live,IG,Target> when 'true' ->
	      %% Line 448
	      case apply 'analyze_bb_instructions'/4
		       (Instructions, Live, %% Line 449
					    IG, %% Line 449
						Target) of
		<{Live0,IG0,Ref}> when 'true' ->
		    %% Line 451
		    case call Target:'def_use'
			     (Instruction) of
		      <{Def,Use}> when 'true' ->
			  let <_cor7> =
			      %% Line 453
			      apply 'reg_numbers'/2
				  (Def, Target)
			  in  let <Def_numbers> =
				  %% Line 453
				  call 'ordsets':'from_list'
				      (_cor7)
			      in  let <_cor9> =
				      %% Line 454
				      apply 'reg_numbers'/2
					  (Use, Target)
				  in  let <Use_numbers> =
					  %% Line 454
					  call 'ordsets':'from_list'
					      (_cor9)
				      in  let <_cor11> =
					      %% Line 455
					      call 'ordsets':'union'
						  (Def_numbers, Use_numbers)
					  in  let <Ref_numbers> =
						  %% Line 455
						  call 'ordsets':'union'
						      (Ref, _cor11)
					      in  let <_cor13> =
						      %% Line 458
						      apply 'spill_costs'/1
							  (IG0)
						  in  let <_cor14> =
							  %% Line 457
							  call 'hipe_spillcost':'inc_costs'
							      (Use_numbers, _cor13)
						      in  let <IG1> =
							      %% Line 457
							      apply 'set_spill_costs'/2
								  (_cor14, %% Line 459
									   IG0)
							  in  %% Line 460
							      case apply 'analyze_move'/6
								       (Instruction, %% Line 461
										     Live0, %% Line 462
											    Def_numbers, %% Line 463
													 Use_numbers, %% Line 464
														      IG1, %% Line 465
															   Target) of
								<{Live1,IG2}> when 'true' ->
								    let <IG3> =
									%% Line 484
									apply 'interfere'/4
									    (Def_numbers, Live1, IG2, Target)
								    in  let <_cor19> =
									    %% Line 485
									    call 'ordsets':'subtract'
										(Live1, Def_numbers)
									in  let <Live3> =
										%% Line 485
										call 'ordsets':'union'
										    (Use_numbers, _cor19)
									    in  %% Line 486
										{Live3,IG3,Ref_numbers}
								( <_cor16> when 'true' ->
								      primop 'match_fail'
									  ({'badmatch',_cor16})
								  -| ['compiler_generated'] )
							      end
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor24,_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23,_cor22,_cor21})
		  -| [{'function_name',{'analyze_bb_instructions',4}}] )
	    -| ['compiler_generated'] )
	end
'analyze_move'/6 =
    %% Line 509
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 510
	case call _cor0:'is_move'
		 (_cor5) of
	  %% Line 511
	  <'true'> when 'true' ->
	      %% Line 512
	      case <_cor3,_cor2> of
		%% Line 513
		<[Dst|[]],[Src|[]]> when 'true' ->
		    let <_cor6> =
			%% Line 514
			apply 'ig_moves'/1
			    (_cor1)
		    in  let <_cor7> =
			    %% Line 514
			    call 'hipe_ig_moves':'new_move'
				(Dst, Src, _cor6)
			in  let <New_IG> =
				%% Line 514
				apply 'set_ig_moves'/2
				    (_cor7, _cor1)
			    in  let <New_live> =
				    %% Line 515
				    call 'ordsets':'del_element'
					(Src, _cor4)
				in  %% Line 516
				    {New_live,New_IG}
		%% Line 517
		<_fol32,_fol33> when 'true' ->
		    %% Line 518
		    {_cor4,_cor1}
	      end
	  %% Line 520
	  <_cor19> when 'true' ->
	      %% Line 521
	      {_cor4,_cor1}
	end
'interfere'/4 =
    %% Line 540
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_cor9,IG,_cor10> when 'true' ->
	      IG
	  %% Line 541
	  <[Define|Defines],Living,IG,Target> when 'true' ->
	      let <New_ig> =
		  %% Line 542
		  apply 'interfere_with_living'/4
		      (Define, Living, IG, Target)
	      in  %% Line 543
		  apply 'interfere'/4
		      (Defines, Living, New_ig, Target)
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'interfere',4}}] )
	    -| ['compiler_generated'] )
	end
'interfere_with_living'/4 =
    %% Line 561
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_cor9,[],IG,_cor10> when 'true' ->
	      IG
	  %% Line 562
	  <Define,[Live|Living],IG,Target> when 'true' ->
	      let <New_ig> =
		  %% Line 563
		  apply 'add_edge'/4
		      (Define, Live, IG, Target)
	      in  %% Line 564
		  apply 'interfere_with_living'/4
		      (Define, Living, New_ig, Target)
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'interfere_with_living',4}}] )
	    -| ['compiler_generated'] )
	end
'nodes_are_adjacent'/3 =
    %% Line 571
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 572
	    apply 'adj_set'/1
		(_cor0)
	in  %% Line 572
	    apply 'adjset_are_adjacent'/3
		(_cor2, _cor1, _cor3)
'node_adj_list'/2 =
    %% Line 578
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 579
	    apply 'adj_list'/1
		(_cor0)
	in  %% Line 579
	    call 'hipe_adj_list':'edges'
		(_cor1, _cor2)
'node_spill_cost'/2 =
    %% Line 585
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 586
	    apply 'spill_costs'/1
		(_cor0)
	in  %% Line 586
	    call 'hipe_spillcost':'spill_cost'
		(_cor1, _cor2)
'get_moves'/1 =
    %% Line 611
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 612
	    apply 'ig_moves'/1
		(_cor0)
	in  %% Line 612
	    call 'hipe_ig_moves':'get_moves'
		(_cor1)
'add_edge'/4 =
    %% Line 630
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <U,_cor15,IG,_cor16>
	      when call 'erlang':'=:='
		    (_cor15,
		     U) ->
	      IG
	  %% Line 631
	  <U,V,IG,Target> when 'true' ->
	      %% Line 632
	      case apply 'nodes_are_adjacent'/3
		       (U, V, IG) of
		%% Line 633
		<'true'> when 'true' ->
		    %% Line 634
		    IG
		%% Line 635
		<'false'> when 'true' ->
		    let <_cor4> =
			%% Line 636
			apply 'adj_set'/1
			    (IG)
		    in  let <_X_> =
			    %% Line 636
			    apply 'adjset_add_edge'/3
				(U, V, _cor4)
			in  let <Degree> =
				%% Line 637
				apply 'degree'/1
				    (IG)
			    in  let <_cor7> =
				    %% Line 638
				    apply 'adj_list'/1
					(IG)
				in  let <AdjList0> =
					%% Line 638
					apply 'interfere_if_uncolored'/5
					    (U, V, _cor7, Degree, Target)
				    in  let <AdjList1> =
					    %% Line 639
					    apply 'interfere_if_uncolored'/5
						(V, U, AdjList0, Degree, Target)
					in  %% Line 640
					    apply 'set_adj_list'/2
						(AdjList1, IG)
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	end
'remove_edge'/4 =
    %% Line 659
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <U,_cor15,IG,_cor16>
	      when call 'erlang':'=:='
		    (_cor15,
		     U) ->
	      IG
	  %% Line 660
	  <U,V,IG,Target> when 'true' ->
	      %% Line 661
	      case apply 'nodes_are_adjacent'/3
		       (U, V, IG) of
		%% Line 662
		<'false'> when 'true' ->
		    %% Line 663
		    IG
		%% Line 664
		<'true'> when 'true' ->
		    let <_cor4> =
			%% Line 665
			apply 'adj_set'/1
			    (IG)
		    in  let <_X_> =
			    %% Line 665
			    apply 'adjset_remove_edge'/3
				(U, V, _cor4)
			in  let <Degree> =
				%% Line 666
				apply 'degree'/1
				    (IG)
			    in  let <_cor7> =
				    %% Line 667
				    apply 'adj_list'/1
					(IG)
				in  let <AdjList0> =
					%% Line 667
					apply 'remove_if_uncolored'/5
					    (U, V, _cor7, Degree, Target)
				    in  let <AdjList1> =
					    %% Line 668
					    apply 'remove_if_uncolored'/5
						(V, U, AdjList0, Degree, Target)
					in  %% Line 669
					    apply 'set_adj_list'/2
						(AdjList1, IG)
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor10})
		  -| ['compiler_generated'] )
	      end
	end
'remove_if_uncolored'/5 =
    %% Line 693
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 694
	case call _cor0:'is_precoloured'
		 (_cor4) of
	  %% Line 695
	  <'false'> when 'true' ->
	      let <New_adj_list> =
		  %% Line 696
		  call 'hipe_adj_list':'remove_edge'
		      (_cor4, _cor3, _cor2)
	      in  do  %% Line 697
		      apply 'degree_dec'/2
			  (_cor4, _cor1)
		      %% Line 698
		      New_adj_list
	  %% Line 699
	  <'true'> when 'true' ->
	      _cor2
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'interfere_if_uncolored'/5 =
    %% Line 724
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 725
	case call _cor0:'is_precoloured'
		 (_cor4) of
	  %% Line 726
	  <'false'> when 'true' ->
	      let <New_adj_list> =
		  %% Line 727
		  call 'hipe_adj_list':'add_edge'
		      (_cor4, _cor3, _cor2)
	      in  do  %% Line 728
		      apply 'degree_inc'/2
			  (_cor4, _cor1)
		      %% Line 729
		      New_adj_list
	  %% Line 730
	  <'true'> when 'true' ->
	      _cor2
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'reg_numbers'/2 =
    %% Line 747
    fun (_cor1,_cor0) ->
	%% Line 748
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[X|_cor3]> when 'true' ->
			    let <_cor5> =
				call _cor0:'reg_nr'
				    (X)
			    in  let <_cor6> =
				    apply 'lc$^0'/1
					(_cor3)
				in  ( [_cor5|_cor6]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor1)
	  -| ['list_comprehension'] )
'get_node_degree'/2 =
    %% Line 768
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 769
	    apply 'degree'/1
		(_cor0)
	in  %% Line 769
	    apply 'degree_get'/2
		(_cor1, _cor2)
'dec_node_degree'/2 =
    %% Line 771
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 772
	    apply 'degree'/1
		(_cor0)
	in  do  %% Line 772
		apply 'degree_dec'/2
		    (_cor1, _cor2)
		_cor0
'is_trivially_colourable'/3 =
    %% Line 775
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 776
	    apply 'degree'/1
		(_cor0)
	in  %% Line 776
	    apply 'degree_is_trivially_colourable'/3
		(_cor2, _cor1, _cor3)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_ig')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_ig', _cor0)
end