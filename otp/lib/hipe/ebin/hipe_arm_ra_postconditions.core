module 'hipe_arm_ra_postconditions' ['check_and_rewrite'/3,
				     'check_and_rewrite2'/3,
				     'module_info'/0,
				     'module_info'/1]
    attributes [%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','arm_mfa'},[{'typed_record_field',{'record_field',38,{'atom',38,'m'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'atom',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'f'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'atom',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'a'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'arity',[]}]]}}]]],[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','arm_prim'},[{'record_field',39,{'atom',39,'prim'}}],[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{{'record','arm_sdesc'},[{'record_field',40,{'atom',40,'exnlab'}}|[{'record_field',40,{'atom',40,'fsize'}}|[{'typed_record_field',{'record_field',40,{'atom',40,'arity'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'arity',[]}]]}}|[{'record_field',40,{'atom',40,'live'}}]]]],[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','arm_temp'},[{'record_field',41,{'atom',41,'reg'}}|[{'record_field',41,{'atom',41,'type'}}|[{'record_field',41,{'atom',41,'allocatable'}}]]],[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{{'record','am2'},[{'record_field',87,{'atom',87,'src'}}|[{'record_field',87,{'atom',87,'sign'}}|[{'record_field',87,{'atom',87,'offset'}}]]],[]}],
		%% Line 88
		'type' =
		    %% Line 88
		    [{{'record','am3'},[{'record_field',88,{'atom',88,'src'}}|[{'record_field',88,{'atom',88,'sign'}}|[{'record_field',88,{'atom',88,'offset'}}]]],[]}],
		%% Line 92
		'type' =
		    %% Line 92
		    [{{'record','alu'},[{'record_field',92,{'atom',92,'aluop'}}|[{'record_field',92,{'atom',92,'s'}}|[{'record_field',92,{'atom',92,'dst'}}|[{'record_field',92,{'atom',92,'src'}}|[{'record_field',92,{'atom',92,'am1'}}]]]]],[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','b_fun'},[{'record_field',93,{'atom',93,'fun'}}|[{'record_field',93,{'atom',93,'linkage'}}]],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{{'record','b_label'},[{'record_field',94,{'atom',94,'cond'}}|[{'record_field',94,{'atom',94,'label'}}]],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','bl'},[{'record_field',95,{'atom',95,'fun'}}|[{'record_field',95,{'atom',95,'sdesc'}}|[{'record_field',95,{'atom',95,'linkage'}}]]],[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{{'record','blx'},[{'record_field',96,{'atom',96,'src'}}|[{'record_field',96,{'atom',96,'sdesc'}}]],[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','cmp'},[{'record_field',97,{'atom',97,'cmpop'}}|[{'record_field',97,{'atom',97,'src'}}|[{'record_field',97,{'atom',97,'am1'}}]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','comment'},[{'record_field',98,{'atom',98,'term'}}],[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{{'record','label'},[{'record_field',99,{'atom',99,'label'}}],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{{'record','load'},[{'record_field',100,{'atom',100,'ldop'}}|[{'record_field',100,{'atom',100,'dst'}}|[{'record_field',100,{'atom',100,'am2'}}]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','ldrsb'},[{'record_field',101,{'atom',101,'dst'}}|[{'record_field',101,{'atom',101,'am3'}}]],[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{{'record','move'},[{'record_field',102,{'atom',102,'movop'}}|[{'record_field',102,{'atom',102,'s'}}|[{'record_field',102,{'atom',102,'dst'}}|[{'record_field',102,{'atom',102,'am1'}}]]]],[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','pseudo_bc'},[{'record_field',103,{'atom',103,'cond'}}|[{'record_field',103,{'atom',103,'true_label'}}|[{'record_field',103,{'atom',103,'false_label'}}|[{'record_field',103,{'atom',103,'pred'}}]]]],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{{'record','pseudo_blr'},[],[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{{'record','pseudo_bx'},[{'record_field',105,{'atom',105,'src'}}],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','pseudo_call'},[{'record_field',106,{'atom',106,'funv'}}|[{'record_field',106,{'atom',106,'sdesc'}}|[{'record_field',106,{'atom',106,'contlab'}}|[{'record_field',106,{'atom',106,'linkage'}}]]]],[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{{'record','pseudo_call_prepare'},[{'record_field',107,{'atom',107,'nrstkargs'}}],[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{{'record','pseudo_li'},[{'record_field',108,{'atom',108,'dst'}}|[{'record_field',108,{'atom',108,'imm'}}|[{'record_field',108,{'atom',108,'label'}}]]],[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{{'record','pseudo_move'},[{'record_field',109,{'atom',109,'dst'}}|[{'record_field',109,{'atom',109,'src'}}]],[]}],
		%% Line 110
		'type' =
		    %% Line 110
		    [{{'record','pseudo_switch'},[{'record_field',110,{'atom',110,'jtab'}}|[{'record_field',110,{'atom',110,'index'}}|[{'record_field',110,{'atom',110,'labels'}}]]],[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','pseudo_tailcall'},[{'record_field',111,{'atom',111,'funv'}}|[{'record_field',111,{'atom',111,'arity'}}|[{'record_field',111,{'atom',111,'stkargs'}}|[{'record_field',111,{'atom',111,'linkage'}}]]]],[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{{'record','pseudo_tailcall_prepare'},[],[]}],
		%% Line 113
		'type' =
		    %% Line 113
		    [{{'record','smull'},[{'record_field',113,{'atom',113,'dstlo'}}|[{'record_field',113,{'atom',113,'dsthi'}}|[{'record_field',113,{'atom',113,'src1'}}|[{'record_field',113,{'atom',113,'src2'}}]]]],[]}],
		%% Line 114
		'type' =
		    %% Line 114
		    [{{'record','store'},[{'record_field',114,{'atom',114,'stop'}}|[{'record_field',114,{'atom',114,'src'}}|[{'record_field',114,{'atom',114,'am2'}}]]],[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 120
		'type' =
		    %% Line 120
		    [{{'record','defun'},[{'typed_record_field',{'record_field',120,{'atom',120,'mfa'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'mfa',[]}]]}}|[{'record_field',120,{'atom',120,'formals'}}|[{'record_field',120,{'atom',120,'code'}}|[{'typed_record_field',{'record_field',121,{'atom',121,'data'}},{'type',121,'union',[{'atom',121,'undefined'}|[{'type',121,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'isclosure'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'type',122,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'isleaf'}},{'type',123,'union',[{'atom',123,'undefined'}|[{'type',123,'boolean',[]}]]}}|[{'record_field',124,{'atom',124,'var_range'}}|[{'record_field',124,{'atom',124,'label_range'}}]]]]]]]],[]}]]
'check_and_rewrite'/3 =
    %% Line 27
    fun (_cor2,_cor1,_cor0) ->
	let <TempMap> =
	    %% Line 28
	    call 'hipe_temp_map':'cols2tuple'
		(_cor1, 'hipe_arm_specific')
	in  %% Line 29
	    apply 'check_and_rewrite2'/3
		(_cor2, TempMap, _cor0)
'check_and_rewrite2'/3 =
    %% Line 31
    fun (_cor2,_cor1,_cor0) ->
	let <Strategy> =
	    %% Line 32
	    apply 'strategy'/1
		(_cor0)
	in  %% Line 33
	    case _cor2 of
	      <{'defun',_cor15,_cor16,Code0,_cor17,_cor18,_cor19,_cor20,_cor21}> when 'true' ->
		  %% Line 34
		  case apply 'do_insns'/5
			   (Code0, _cor1, Strategy, [], 'false') of
		    <{Code1,DidSpill}> when 'true' ->
			let <_cor6> =
			    %% Line 35
			    call 'hipe_gensym':'get_var'
				('arm')
			in  let <VarRange> = {%% Line 35
				 0,_cor6}
			    in  let <_cor9> =
				    %% Line 36
				    call 'erlang':'setelement'
					(8, _cor2, VarRange)
				in  let <_cor11> =
					%% Line 36
					call 'erlang':'setelement'
					    (4, _cor9, Code1)
				    in  %% Line 36
					{_cor11,%% Line 37
						DidSpill}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor4})
		-| ['compiler_generated'] )
	    end
'strategy'/1 =
    %% Line 39
    fun (_cor0) ->
	%% Line 40
	case _cor0 of
	  %% Line 41
	  <'normal'> when 'true' ->
	      'new'
	  %% Line 42
	  <'linearscan'> when 'true' ->
	      'fixed'
	  %% Line 43
	  <'naive'> when 'true' ->
	      'fixed'
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'do_insns'/5 =
    %% Line 46
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[I|Insns],TempMap,Strategy,Accum,DidSpill0> when 'true' ->
	      %% Line 47
	      case apply 'do_insn'/3
		       (I, TempMap, Strategy) of
		<{NewIs,DidSpill1}> when 'true' ->
		    let <_cor7> =
			%% Line 48
			call 'lists':'reverse'
			    (NewIs, Accum)
		    in  let <_cor6> =
			    %% Line 48
			    call 'erlang':'or'
				(DidSpill0, DidSpill1)
			in  %% Line 48
			    apply 'do_insns'/5
				(Insns, TempMap, Strategy, _cor7, _cor6)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 49
	  <[],_X_TempMap,_X_Strategy,Accum,DidSpill> when 'true' ->
	      let <_cor8> =
		  %% Line 50
		  call 'lists':'reverse'
		      (Accum)
	      in  %% Line 50
		  {_cor8,DidSpill}
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'do_insns',5}}] )
	    -| ['compiler_generated'] )
	end
'do_insn'/3 =
    %% Line 52
    fun (_cor2,_cor1,_cor0) ->
	%% Line 53
	case _cor2 of
	  %% Line 54
	  <{'alu',_cor7,_cor8,_cor9,_cor10,_cor11}> when 'true' ->
	      apply 'do_alu'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 55
	  <{'cmp',_cor12,_cor13,_cor14}> when 'true' ->
	      apply 'do_cmp'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 56
	  <{'load',_cor15,_cor16,_cor17}> when 'true' ->
	      apply 'do_load'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 57
	  <{'ldrsb',_cor18,_cor19}> when 'true' ->
	      apply 'do_ldrsb'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 58
	  <{'move',_cor20,_cor21,_cor22,_cor23}> when 'true' ->
	      apply 'do_move'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 59
	  <{'pseudo_call',_cor24,_cor25,_cor26,_cor27}> when 'true' ->
	      apply 'do_pseudo_call'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 60
	  <{'pseudo_li',_cor28,_cor29,_cor30}> when 'true' ->
	      apply 'do_pseudo_li'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 61
	  <{'pseudo_move',_cor31,_cor32}> when 'true' ->
	      apply 'do_pseudo_move'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 62
	  <{'pseudo_switch',_cor33,_cor34,_cor35}> when 'true' ->
	      apply 'do_pseudo_switch'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 63
	  <{'pseudo_tailcall',_cor36,_cor37,_cor38,_cor39}> when 'true' ->
	      apply 'do_pseudo_tailcall'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 64
	  <{'smull',_cor40,_cor41,_cor42,_cor43}> when 'true' ->
	      apply 'do_smull'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 65
	  <{'store',_cor44,_cor45,_cor46}> when 'true' ->
	      apply 'do_store'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 66
	  <_cor47> when 'true' ->
	      {[_cor2|[]],'false'}
	end
'do_alu'/3 =
    %% Line 71
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'alu',_cor17,_cor18,Dst,Src,Am1},TempMap,Strategy> when 'true' ->
	      %% Line 72
	      case apply 'fix_dst'/3
		       (Dst, TempMap, Strategy) of
		<{FixDst,NewDst,DidSpill1}> when 'true' ->
		    %% Line 73
		    case apply 'fix_src1'/3
			     (Src, TempMap, Strategy) of
		      <{FixSrc,NewSrc,DidSpill2}> when 'true' ->
			  %% Line 74
			  case apply 'fix_am1'/3
				   (Am1, TempMap, Strategy) of
			    <{FixAm1,NewAm1,DidSpill3}> when 'true' ->
				let <_cor8> =
				    %% Line 75
				    {'alu',_cor17,_cor18,NewDst,NewSrc,NewAm1}
				in  let <_cor12> =
					%% Line 76
					call 'erlang':'++'
					    (FixAm1, [_cor8|FixDst])
				    in  let <_cor13> =
					    %% Line 76
					    call 'erlang':'++'
						(FixSrc, _cor12)
					in  let <_cor10> =
						%% Line 76
						call 'erlang':'or'
						    (DidSpill1, DidSpill2)
					    in  let <_cor11> =
						    %% Line 76
						    call 'erlang':'or'
							(_cor10, DidSpill3)
						in  %% Line 76
						    {_cor13,_cor11}
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'do_alu',3}}] )
	    -| ['compiler_generated'] )
	end
'do_cmp'/3 =
    %% Line 78
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'cmp',_cor15,Src,Am1},TempMap,Strategy> when 'true' ->
	      %% Line 79
	      case apply 'fix_src1'/3
		       (Src, TempMap, Strategy) of
		<{FixSrc,NewSrc,DidSpill1}> when 'true' ->
		    %% Line 80
		    case apply 'fix_am1'/3
			     (Am1, TempMap, Strategy) of
		      <{FixAm1,NewAm1,DidSpill2}> when 'true' ->
			  let <_cor7> =
			      %% Line 81
			      {'cmp',_cor15,NewSrc,NewAm1}
			  in  let <_cor10> =
				  %% Line 82
				  call 'erlang':'++'
				      (FixAm1, [_cor7|[]])
			      in  let <_cor11> =
				      %% Line 82
				      call 'erlang':'++'
					  (FixSrc, _cor10)
				  in  let <_cor9> =
					  %% Line 82
					  call 'erlang':'or'
					      (DidSpill1, DidSpill2)
				      in  %% Line 82
					  {_cor11,_cor9}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'do_cmp',3}}] )
	    -| ['compiler_generated'] )
	end
'do_load'/3 =
    %% Line 84
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'load',_cor14,Dst,Am2},TempMap,Strategy> when 'true' ->
	      %% Line 85
	      case apply 'fix_dst'/3
		       (Dst, TempMap, Strategy) of
		<{FixDst,NewDst,DidSpill1}> when 'true' ->
		    %% Line 86
		    case apply 'fix_am2'/3
			     (Am2, TempMap, Strategy) of
		      <{FixAm2,NewAm2,DidSpill2}> when 'true' ->
			  let <_cor7> =
			      %% Line 87
			      {'load',_cor14,NewDst,NewAm2}
			  in  let <_cor10> =
				  %% Line 88
				  call 'erlang':'++'
				      (FixAm2, [_cor7|FixDst])
			      in  let <_cor9> =
				      %% Line 88
				      call 'erlang':'or'
					  (DidSpill1, DidSpill2)
				  in  %% Line 88
				      {_cor10,_cor9}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'do_load',3}}] )
	    -| ['compiler_generated'] )
	end
'do_ldrsb'/3 =
    %% Line 90
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'ldrsb',Dst,Am3},TempMap,Strategy> when 'true' ->
	      %% Line 91
	      case apply 'fix_dst'/3
		       (Dst, TempMap, Strategy) of
		<{FixDst,NewDst,DidSpill1}> when 'true' ->
		    %% Line 92
		    case apply 'fix_am3'/3
			     (Am3, TempMap, Strategy) of
		      <{FixAm3,NewAm3,DidSpill2}> when 'true' ->
			  let <_cor7> = {%% Line 93
			       'ldrsb',%% Line 93
				       NewDst,%% Line 93
					      NewAm3}
			  in  let <_cor10> =
				  %% Line 94
				  call 'erlang':'++'
				      (FixAm3, [_cor7|FixDst])
			      in  let <_cor9> =
				      %% Line 94
				      call 'erlang':'or'
					  (DidSpill1, DidSpill2)
				  in  %% Line 94
				      {_cor10,_cor9}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'do_ldrsb',3}}] )
	    -| ['compiler_generated'] )
	end
'do_move'/3 =
    %% Line 96
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'move',_cor15,_cor16,Dst,Am1},TempMap,Strategy> when 'true' ->
	      %% Line 97
	      case apply 'fix_dst'/3
		       (Dst, TempMap, Strategy) of
		<{FixDst,NewDst,DidSpill1}> when 'true' ->
		    %% Line 98
		    case apply 'fix_am1'/3
			     (Am1, TempMap, Strategy) of
		      <{FixAm1,NewAm1,DidSpill2}> when 'true' ->
			  let <_cor6> =
			      %% Line 99
			      call 'erlang':'setelement'
				  (5, I, NewAm1)
			  in  let <_cor8> =
				  %% Line 99
				  call 'erlang':'setelement'
				      (4, _cor6, NewDst)
			      in  let <_cor11> =
				      %% Line 100
				      call 'erlang':'++'
					  (FixAm1, [_cor8|FixDst])
				  in  let <_cor10> =
					  %% Line 100
					  call 'erlang':'or'
					      (DidSpill1, DidSpill2)
				      in  %% Line 100
					  {_cor11,_cor10}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'do_move',3}}] )
	    -| ['compiler_generated'] )
	end
'do_pseudo_call'/3 =
    %% Line 102
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'pseudo_call',FunV,_cor12,_cor13,_cor14},TempMap,Strategy> when 'true' ->
	      %% Line 103
	      case apply 'fix_funv'/3
		       (FunV, TempMap, Strategy) of
		<{FixFunV,NewFunV,DidSpill}> when 'true' ->
		    let <_cor6> =
			%% Line 104
			call 'erlang':'setelement'
			    (2, I, NewFunV)
		    in  let <_cor8> =
			    %% Line 105
			    call 'erlang':'++'
				(FixFunV, [_cor6|[]])
			in  %% Line 105
			    {_cor8,DidSpill}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'do_pseudo_call',3}}] )
	    -| ['compiler_generated'] )
	end
'do_pseudo_li'/3 =
    %% Line 107
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'pseudo_li',Dst,_cor11,_cor12},TempMap,Strategy> when 'true' ->
	      %% Line 108
	      case apply 'fix_dst'/3
		       (Dst, TempMap, Strategy) of
		<{FixDst,NewDst,DidSpill}> when 'true' ->
		    let <_cor6> =
			%% Line 109
			call 'erlang':'setelement'
			    (2, I, NewDst)
		    in  %% Line 110
			{[_cor6|FixDst],DidSpill}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'do_pseudo_li',3}}] )
	    -| ['compiler_generated'] )
	end
'do_pseudo_move'/3 =
    %% Line 112
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'pseudo_move',Dst,Src},TempMap,Strategy> when 'true' ->
	      %% Line 117
	      case apply 'temp_is_spilled'/2
		       (Dst, TempMap) of
		%% Line 118
		<'true'> when 'true' ->
		    %% Line 119
		    case apply 'fix_src1'/3
			     (Src, TempMap, Strategy) of
		      <{FixSrc,NewSrc,DidSpill}> when 'true' ->
			  let <_cor6> =
			      %% Line 120
			      call 'erlang':'setelement'
				  (3, I, NewSrc)
			  in  let <_cor8> =
				  %% Line 121
				  call 'erlang':'++'
				      (FixSrc, [_cor6|[]])
			      in  %% Line 121
				  {_cor8,DidSpill}
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		%% Line 122
		<_cor16> when 'true' ->
		    %% Line 123
		    {[I|[]],'false'}
	      end
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'do_pseudo_move',3}}] )
	    -| ['compiler_generated'] )
	end
'do_pseudo_switch'/3 =
    %% Line 126
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'pseudo_switch',JTab,Index,_cor15},TempMap,Strategy> when 'true' ->
	      %% Line 127
	      case apply 'fix_src1'/3
		       (JTab, TempMap, Strategy) of
		<{FixJTab,NewJTab,DidSpill1}> when 'true' ->
		    %% Line 128
		    case apply 'fix_src2'/3
			     (Index, TempMap, Strategy) of
		      <{FixIndex,NewIndex,DidSpill2}> when 'true' ->
			  let <_cor7> =
			      %% Line 129
			      {'pseudo_switch',NewJTab,NewIndex,_cor15}
			  in  let <_cor10> =
				  %% Line 130
				  call 'erlang':'++'
				      (FixIndex, [_cor7|[]])
			      in  let <_cor11> =
				      %% Line 130
				      call 'erlang':'++'
					  (FixJTab, _cor10)
				  in  let <_cor9> =
					  %% Line 130
					  call 'erlang':'or'
					      (DidSpill1, DidSpill2)
				      in  %% Line 130
					  {_cor11,_cor9}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'do_pseudo_switch',3}}] )
	    -| ['compiler_generated'] )
	end
'do_pseudo_tailcall'/3 =
    %% Line 132
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'pseudo_tailcall',FunV,_cor12,_cor13,_cor14},TempMap,Strategy> when 'true' ->
	      %% Line 133
	      case apply 'fix_funv'/3
		       (FunV, TempMap, Strategy) of
		<{FixFunV,NewFunV,DidSpill}> when 'true' ->
		    let <_cor6> =
			%% Line 134
			call 'erlang':'setelement'
			    (2, I, NewFunV)
		    in  let <_cor8> =
			    %% Line 135
			    call 'erlang':'++'
				(FixFunV, [_cor6|[]])
			in  %% Line 135
			    {_cor8,DidSpill}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9})
		  -| [{'function_name',{'do_pseudo_tailcall',3}}] )
	    -| ['compiler_generated'] )
	end
'do_smull'/3 =
    %% Line 137
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'smull',DstLo,DstHi,Src1,Src2},TempMap,Strategy> when 'true' ->
	      %% Line 140
	      case apply 'fix_dst'/3
		       (DstLo, TempMap, Strategy) of
		<{FixDstLo,NewDstLo,DidSpill1}> when 'true' ->
		    %% Line 141
		    case apply 'fix_dst2'/3
			     (DstHi, TempMap, Strategy) of
		      <{FixDstHi,NewDstHi,DidSpill2}> when 'true' ->
			  %% Line 142
			  case apply 'fix_src2'/3
				   (Src1, TempMap, Strategy) of
			    <{FixSrc1,NewSrc1,DidSpill3}> when 'true' ->
				%% Line 143
				case apply 'fix_src1'/3
					 (Src2, TempMap, Strategy) of
				  <{FixSrc2,NewSrc2,DidSpill4}> when 'true' ->
				      let <_cor9> =
					  %% Line 144
					  {'smull',NewDstLo,NewDstHi,NewSrc1,NewSrc2}
				      in  let <_cor14> =
					      %% Line 145
					      call 'erlang':'++'
						  (FixDstLo, FixDstHi)
					  in  let <_cor15> =
						  %% Line 145
						  call 'erlang':'++'
						      (FixSrc2, [_cor9|_cor14])
					      in  let <_cor16> =
						      %% Line 145
						      call 'erlang':'++'
							  (FixSrc1, _cor15)
						  in  let <_cor11> =
							  %% Line 146
							  call 'erlang':'or'
							      (DidSpill1, DidSpill2)
						      in  let <_cor12> =
							      %% Line 146
							      call 'erlang':'or'
								  (_cor11, DidSpill3)
							  in  let <_cor13> =
								  %% Line 146
								  call 'erlang':'or'
								      (_cor12, DidSpill4)
							      in  %% Line 145
								  {_cor16,_cor13}
				  ( <_cor6> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor6})
				    -| ['compiler_generated'] )
				end
			    ( <_cor5> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor5})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'do_smull',3}}] )
	    -| ['compiler_generated'] )
	end
'do_store'/3 =
    %% Line 148
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I = {'store',_cor15,Src,Am2},TempMap,Strategy> when 'true' ->
	      %% Line 149
	      case apply 'fix_src1'/3
		       (Src, TempMap, Strategy) of
		<{FixSrc,NewSrc,DidSpill1}> when 'true' ->
		    %% Line 150
		    case apply 'fix_am2'/3
			     (Am2, TempMap, Strategy) of
		      <{FixAm2,NewAm2,DidSpill2}> when 'true' ->
			  let <_cor7> =
			      %% Line 151
			      {'store',_cor15,NewSrc,NewAm2}
			  in  let <_cor10> =
				  %% Line 152
				  call 'erlang':'++'
				      (FixAm2, [_cor7|[]])
			      in  let <_cor11> =
				      %% Line 152
				      call 'erlang':'++'
					  (FixSrc, _cor10)
				  in  let <_cor9> =
					  %% Line 152
					  call 'erlang':'or'
					      (DidSpill1, DidSpill2)
				      in  %% Line 152
					  {_cor11,_cor9}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12})
		  -| [{'function_name',{'do_store',3}}] )
	    -| ['compiler_generated'] )
	end
'fix_funv'/3 =
    %% Line 156
    fun (_cor2,_cor1,_cor0) ->
	%% Line 157
	case _cor2 of
	  %% Line 158
	  <{'arm_temp',_cor7,_cor8,_cor9}> when 'true' ->
	      apply 'fix_src3'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 159
	  <_cor10> when 'true' ->
	      {[],_cor2,'false'}
	end
'fix_am1'/3 =
    %% Line 162
    fun (_cor2,_cor1,_cor0) ->
	%% Line 163
	case _cor2 of
	  %% Line 164
	  <{'arm_temp',_cor14,_cor15,_cor16}> when 'true' ->
	      %% Line 165
	      apply 'fix_src2'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 166
	  <{Src2,'rrx'}> when 'true' ->
	      %% Line 167
	      case apply 'fix_src2'/3
		       (Src2, _cor1, _cor0) of
		<{Fix,New,DidSpill}> when 'true' ->
		    %% Line 168
		    {Fix,{New,'rrx'},DidSpill}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 169
	  <{Src2,ShiftOp,ShiftArg}> when 'true' ->
	      %% Line 170
	      case apply 'fix_src2'/3
		       (Src2, _cor1, _cor0) of
		<{FixSrc2,NewSrc2,DidSpill1}> when 'true' ->
		    let <_cor6> =
			%% Line 172
			case ShiftArg of
			  %% Line 173
			  <{'arm_temp',_cor17,_cor18,_cor19}> when 'true' ->
			      apply 'fix_src3'/3
				  (ShiftArg, _cor1, _cor0)
			  %% Line 174
			  <_cor20> when 'true' ->
			      {[],ShiftArg,'false'}
			end
		    in  %% Line 171
			case _cor6 of
			  <{FixArg,NewArg,DidSpill2}> when 'true' ->
			      let <_cor9> =
				  %% Line 177
				  call 'erlang':'++'
				      (FixArg, FixSrc2)
			      in  let <_cor8> =
				      %% Line 177
				      call 'erlang':'or'
					  (DidSpill1, DidSpill2)
				  in  %% Line 177
				      {_cor9,{NewSrc2,ShiftOp,NewArg},_cor8}
			  ( <_cor7> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor7})
			    -| ['compiler_generated'] )
			end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 178
	  <_cor21> when 'true' ->
	      {[],_cor2,'false'}
	end
'fix_am2'/3 =
    %% Line 181
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Am2 = {'am2',Src2,_cor14,Offset},TempMap,Strategy> when 'true' ->
	      %% Line 182
	      case apply 'fix_src2'/3
		       (Src2, TempMap, Strategy) of
		<{FixSrc2,NewSrc2,DidSpill1}> when 'true' ->
		    %% Line 183
		    case apply 'fix_am2offset'/3
			     (Offset, TempMap, Strategy) of
		      <{FixOffset,NewOffset,DidSpill2}> when 'true' ->
			  let <_cor7> =
			      %% Line 184
			      {'am2',NewSrc2,_cor14,NewOffset}
			  in  let <_cor10> =
				  %% Line 186
				  call 'erlang':'++'
				      (FixOffset, FixSrc2)
			      in  let <_cor9> =
				      %% Line 186
				      call 'erlang':'or'
					  (DidSpill1, DidSpill2)
				  in  %% Line 186
				      {_cor10,_cor7,_cor9}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'fix_am2',3}}] )
	    -| ['compiler_generated'] )
	end
'fix_am2offset'/3 =
    %% Line 188
    fun (_cor2,_cor1,_cor0) ->
	%% Line 189
	case _cor2 of
	  %% Line 190
	  <{'arm_temp',_cor9,_cor10,_cor11}> when 'true' ->
	      %% Line 191
	      apply 'fix_src3'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 192
	  <{Src3,'rrx'}> when 'true' ->
	      %% Line 193
	      case apply 'fix_src3'/3
		       (Src3, _cor1, _cor0) of
		<{Fix,New,DidSpill}> when 'true' ->
		    %% Line 194
		    {Fix,{New,'rrx'},DidSpill}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 195
	  <{Src3,ShiftOp,Imm5}> when 'true' ->
	      %% Line 196
	      case apply 'fix_src3'/3
		       (Src3, _cor1, _cor0) of
		<{Fix,New,DidSpill}> when 'true' ->
		    %% Line 197
		    {Fix,{New,ShiftOp,Imm5},DidSpill}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 198
	  <_cor12> when 'true' ->
	      %% Line 199
	      {[],_cor2,'false'}
	end
'fix_am3'/3 =
    %% Line 202
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Am3 = {'am3',Src2,_cor14,Offset},TempMap,Strategy> when 'true' ->
	      %% Line 203
	      case apply 'fix_src2'/3
		       (Src2, TempMap, Strategy) of
		<{FixSrc2,NewSrc2,DidSpill1}> when 'true' ->
		    %% Line 204
		    case apply 'fix_am3offset'/3
			     (Offset, TempMap, Strategy) of
		      <{FixOffset,NewOffset,DidSpill2}> when 'true' ->
			  let <_cor7> =
			      %% Line 205
			      {'am3',NewSrc2,_cor14,NewOffset}
			  in  let <_cor10> =
				  %% Line 207
				  call 'erlang':'++'
				      (FixOffset, FixSrc2)
			      in  let <_cor9> =
				      %% Line 207
				      call 'erlang':'or'
					  (DidSpill1, DidSpill2)
				  in  %% Line 207
				      {_cor10,_cor7,_cor9}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11})
		  -| [{'function_name',{'fix_am3',3}}] )
	    -| ['compiler_generated'] )
	end
'fix_am3offset'/3 =
    %% Line 209
    fun (_cor2,_cor1,_cor0) ->
	%% Line 210
	case _cor2 of
	  %% Line 211
	  <{'arm_temp',_cor7,_cor8,_cor9}> when 'true' ->
	      apply 'fix_src3'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 212
	  <_cor10> when 'true' ->
	      {[],_cor2,'false'}
	end
'fix_src1'/3 =
    %% Line 215
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 216
	    apply 'temp1'/1
		(_cor0)
	in  %% Line 216
	    apply 'fix_src'/3
		(_cor2, _cor1, _cor3)
'temp1'/1 =
    %% Line 218
    fun (_cor0) ->
	case _cor0 of
	  <'new'> when 'true' ->
	      []
	  %% Line 219
	  <'fixed'> when 'true' ->
	      call 'hipe_arm_registers':'temp1'
		  ()
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'temp1',1}}] )
	    -| ['compiler_generated'] )
	end
'fix_src2'/3 =
    %% Line 221
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 222
	    apply 'temp2'/1
		(_cor0)
	in  %% Line 222
	    apply 'fix_src'/3
		(_cor2, _cor1, _cor3)
'temp2'/1 =
    %% Line 224
    fun (_cor0) ->
	case _cor0 of
	  <'new'> when 'true' ->
	      []
	  %% Line 225
	  <'fixed'> when 'true' ->
	      call 'hipe_arm_registers':'temp2'
		  ()
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'temp2',1}}] )
	    -| ['compiler_generated'] )
	end
'fix_src3'/3 =
    %% Line 227
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 228
	    apply 'temp3'/1
		(_cor0)
	in  %% Line 228
	    apply 'fix_src'/3
		(_cor2, _cor1, _cor3)
'temp3'/1 =
    %% Line 230
    fun (_cor0) ->
	case _cor0 of
	  <'new'> when 'true' ->
	      []
	  %% Line 231
	  <'fixed'> when 'true' ->
	      call 'hipe_arm_registers':'temp3'
		  ()
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'temp3',1}}] )
	    -| ['compiler_generated'] )
	end
'fix_src'/3 =
    %% Line 233
    fun (_cor2,_cor1,_cor0) ->
	%% Line 234
	case apply 'temp_is_spilled'/2
		 (_cor2, _cor1) of
	  %% Line 235
	  <'true'> when 'true' ->
	      let <NewSrc> =
		  %% Line 236
		  apply 'clone'/2
		      (_cor2, _cor0)
	      in  let <_cor4> =
		      %% Line 237
		      call 'hipe_arm':'mk_pseudo_move'
			  (NewSrc, _cor2)
		  in  %% Line 237
		      {[_cor4|[]],%% Line 238
				  NewSrc,%% Line 239
					 'true'}
	  %% Line 240
	  <_cor9> when 'true' ->
	      %% Line 241
	      {[],_cor2,'false'}
	end
'fix_dst'/3 =
    %% Line 244
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 245
	    apply 'temp1'/1
		(_cor0)
	in  %% Line 245
	    apply 'fix_dst_common'/3
		(_cor2, _cor1, _cor3)
'fix_dst2'/3 =
    %% Line 247
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 248
	    apply 'temp3'/1
		(_cor0)
	in  %% Line 248
	    apply 'fix_dst_common'/3
		(_cor2, _cor1, _cor3)
'fix_dst_common'/3 =
    %% Line 250
    fun (_cor2,_cor1,_cor0) ->
	%% Line 251
	case apply 'temp_is_spilled'/2
		 (_cor2, _cor1) of
	  %% Line 252
	  <'true'> when 'true' ->
	      let <NewDst> =
		  %% Line 253
		  apply 'clone'/2
		      (_cor2, _cor0)
	      in  let <_cor4> =
		      %% Line 254
		      call 'hipe_arm':'mk_pseudo_move'
			  (_cor2, NewDst)
		  in  %% Line 254
		      {[_cor4|[]],NewDst,'true'}
	  %% Line 255
	  <_cor9> when 'true' ->
	      %% Line 256
	      {[],_cor2,'false'}
	end
'temp_is_spilled'/2 =
    %% Line 261
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Temp,[]> when 'true' ->
	      let <_cor2> =
		  %% Line 262
		  call 'hipe_arm':'temp_is_precoloured'
		      (Temp)
	      in  %% Line 262
		  call 'erlang':'not'
		      (_cor2)
	  %% Line 263
	  <Temp,TempMap> when 'true' ->
	      %% Line 264
	      case call 'hipe_arm':'temp_is_allocatable'
		       (Temp) of
		%% Line 265
		<'true'> when 'true' ->
		    let <Reg> =
			%% Line 266
			call 'hipe_arm':'temp_reg'
			    (Temp)
		    in  let <_cor5> =
			    %% Line 267
			    call 'erlang':'tuple_size'
				(TempMap)
			in  %% Line 267
			    ( case <> of
				( <>
				      when call 'erlang':'>'
					    (_cor5,
					     Reg) ->
				      call 'hipe_temp_map':'is_spilled'
					  (Reg, TempMap)
				  -| ['compiler_generated'] )
				( <> when 'true' ->
				      'false'
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		%% Line 268
		<'false'> when 'true' ->
		    'true'
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	end
'clone'/2 =
    %% Line 273
    fun (_cor1,_cor0) ->
	let <Type> =
	    %% Line 274
	    call 'hipe_arm':'temp_type'
		(_cor1)
	in  %% Line 275
	    case _cor0 of
	      %% Line 276
	      <[]> when 'true' ->
		  call 'hipe_arm':'mk_new_temp'
		      (Type)
	      %% Line 277
	      <Reg> when 'true' ->
		  call 'hipe_arm':'mk_temp'
		      (Reg, Type)
	    end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_arm_ra_postconditions')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_arm_ra_postconditions', _cor0)
end