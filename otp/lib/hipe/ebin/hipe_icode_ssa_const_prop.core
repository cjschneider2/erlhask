module 'hipe_icode_ssa_const_prop' ['module_info'/0,
				    'module_info'/1,
				    'propagate'/1]
    attributes [%% Line 301
		'type' =
		    %% Line 301
		    [{{'record','comp_servers'},[{'typed_record_field',{'record_field',301,{'atom',301,'pp_server'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'range'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'type'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}]]],[]}],
		%% Line 307
		'type' =
		    %% Line 307
		    [{'comp_option',{'type',307,'union',[{'type',307,'atom',[]}|[{'type',307,'tuple',[{'type',307,'atom',[]}|[{'type',307,'atom',[]}]]}]]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{'comp_options',{'type',308,'list',[{'type',308,'comp_option',[]}]},[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'hipe_architecture',{'type',311,'union',[{'atom',311,'amd64'}|[{'atom',311,'arm'}|[{'atom',311,'powerpc'}|[{'atom',311,'ppc64'}|[{'atom',311,'ultrasparc'}|[{'atom',311,'x86'}]]]]]]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{'hipe_map',{'type',313,'list',[{'type',313,'tuple',[{'type',313,'non_neg_integer',[]}|[{'type',314,'union',[{'atom',314,'unknown'}|[{'type',314,'tuple',[{'type',314,'union',[{'atom',314,'reg'}|[{'atom',314,'fp_reg'}|[{'atom',314,'spill'}]]]}|[{'type',315,'non_neg_integer',[]}]]}]]}]]}]},[]}],
		%% Line 316
		'type' =
		    %% Line 316
		    [{'hipe_temp_map',{'type',316,'tuple','any'},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{'hipe_spill_map',{'type',317,'list',[{'type',317,'tuple',[{'type',317,'non_neg_integer',[]}|[{'type',317,'tuple',[{'atom',317,'spill'}|[{'type',317,'non_neg_integer',[]}]]}]]}]},[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{'simple_const',{'type',35,'union',[{'type',35,'atom',[]}|[{'type',35,'nil',[]}|[{'type',35,'integer',[]}|[{'type',35,'float',[]}]]]]},[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{'structured_const',{'type',36,'union',[{'type',36,'list',[]}|[{'type',36,'tuple','any'}]]},[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'icode_lbl',{'type',38,'non_neg_integer',[]},[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','flat'},[{'typed_record_field',{'record_field',44,{'atom',44,'value'}},{'type',44,'union',[{'atom',44,'undefined'}|[{'type',44,'simple_const',[]}|[{'type',44,'structured_const',[]}|[{'type',44,'binary',[]}]]]]}}],[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{{'record','icode_const'},[{'typed_record_field',{'record_field',46,{'atom',46,'value'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'record',[{'atom',46,'flat'}]}]]}}],[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'variable_annotation',{'type',48,'tuple',[{'type',48,'atom',[]}|[{'type',48,'any',[]}|[{'type',48,'fun',[{'type',48,'product',[{'type',48,'any',[]}]}|[{'type',48,'string',[]}]]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','icode_variable'},[{'typed_record_field',{'record_field',50,{'atom',50,'name'}},{'type',50,'union',[{'atom',50,'undefined'}|[{'type',50,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'kind'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'atom',51,'var'}|[{'atom',51,'reg'}|[{'atom',51,'fvar'}]]]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'annotation'},{'nil',52}},{'type',52,'union',[{'type',52,'nil',[]}|[{'type',52,'variable_annotation',[]}]]}}]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'icode_if_op',{'type',58,'union',[{'atom',58,'>'}|[{'atom',58,'<'}|[{'atom',58,'>='}|[{'atom',58,'=<'}|[{'atom',58,'=:='}|[{'atom',58,'=/='}|[{'atom',58,'=='}|[{'atom',58,'/='}|[{'atom',59,'fixnum_eq'}|[{'atom',59,'fixnum_neq'}|[{'atom',59,'fixnum_lt'}|[{'atom',60,'fixnum_le'}|[{'atom',60,'fixnum_ge'}|[{'atom',60,'fixnum_gt'}|[{'atom',61,'op_exact_eqeq_2'}|[{'atom',61,'suspend_msg_timeout'}]]]]]]]]]]]]]]]]},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'icode_type_test',{'type',63,'union',[{'atom',63,'atom'}|[{'atom',63,'bignum'}|[{'atom',63,'binary'}|[{'atom',63,'bitstr'}|[{'atom',63,'boolean'}|[{'atom',64,'cons'}|[{'atom',64,'fixnum'}|[{'atom',64,'float'}|[{'atom',64,'function'}|[{'atom',65,'function2'}|[{'atom',65,'integer'}|[{'atom',65,'list'}|[{'atom',65,'map'}|[{'atom',65,'nil'}|[{'atom',66,'number'}|[{'atom',66,'pid'}|[{'atom',66,'port'}|[{'atom',66,'reference'}|[{'atom',66,'tuple'}|[{'type',67,'tuple',[{'atom',67,'atom'}|[{'type',67,'atom',[]}]]}|[{'type',67,'tuple',[{'atom',67,'integer'}|[{'type',67,'integer',[]}]]}|[{'type',68,'tuple',[{'atom',68,'record'}|[{'type',68,'atom',[]}|[{'type',68,'non_neg_integer',[]}]]]}|[{'type',69,'tuple',[{'atom',69,'tuple'}|[{'type',69,'non_neg_integer',[]}]]}]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{'icode_primop',{'type',71,'union',[{'type',71,'atom',[]}|[{'type',71,'tuple','any'}]]},[]}],
		%% Line 72
		'type' =
		    %% Line 72
		    [{'icode_funcall',{'type',72,'union',[{'type',72,'mfa',[]}|[{'type',72,'icode_primop',[]}]]},[]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{'icode_var',{'type',74,'record',[{'atom',74,'icode_variable'}|[{'type',74,'field_type',[{'atom',74,'kind'}|[{'atom',74,'var'}]]}]]},[]}],
		%% Line 75
		'type' =
		    %% Line 75
		    [{'icode_reg',{'type',75,'record',[{'atom',75,'icode_variable'}|[{'type',75,'field_type',[{'atom',75,'kind'}|[{'atom',75,'reg'}]]}]]},[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{'icode_fvar',{'type',76,'record',[{'atom',76,'icode_variable'}|[{'type',76,'field_type',[{'atom',76,'kind'}|[{'atom',76,'fvar'}]]}]]},[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{'icode_argument',{'type',77,'union',[{'type',77,'record',[{'atom',77,'icode_const'}]}|[{'type',77,'record',[{'atom',77,'icode_variable'}]}]]},[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{'icode_term_arg',{'type',78,'union',[{'type',78,'icode_var',[]}|[{'type',78,'record',[{'atom',78,'icode_const'}]}]]},[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{'icode_switch_case',{'type',80,'tuple',[{'type',80,'record',[{'atom',80,'icode_const'}]}|[{'type',80,'icode_lbl',[]}]]},[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'icode_call_type',{'type',82,'union',[{'atom',82,'local'}|[{'atom',82,'primop'}|[{'atom',82,'remote'}]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'icode_exit_class',{'type',83,'union',[{'atom',83,'error'}|[{'atom',83,'exit'}|[{'atom',83,'rethrow'}|[{'atom',83,'throw'}]]]]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{'icode_comment_text',{'type',85,'union',[{'type',85,'atom',[]}|[{'type',85,'string',[]}]]},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'icode_info',{'type',87,'list',[{'type',87,'tuple',[{'atom',87,'arg_types'}|[{'type',87,'list',[{'remote_type',87,[{'atom',87,'erl_types'}|[{'atom',87,'erl_type'}|[[]]]]}]}]]}]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','icode_label'},[{'typed_record_field',{'record_field',93,{'atom',93,'name'}},{'type',93,'union',[{'atom',93,'undefined'}|[{'type',93,'icode_lbl',[]}]]}}],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','icode_if'},[{'typed_record_field',{'record_field',95,{'atom',95,'op'}},{'type',95,'union',[{'atom',95,'undefined'}|[{'type',95,'icode_if_op',[]}]]}}|[{'typed_record_field',{'record_field',96,{'atom',96,'args'}},{'type',96,'union',[{'atom',96,'undefined'}|[{'type',96,'list',[{'type',96,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',97,{'atom',97,'true_label'}},{'type',97,'union',[{'atom',97,'undefined'}|[{'type',97,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'false_label'}},{'type',98,'union',[{'atom',98,'undefined'}|[{'type',98,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'p'}},{'type',99,'union',[{'atom',99,'undefined'}|[{'type',99,'float',[]}]]}}]]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','icode_switch_val'},[{'typed_record_field',{'record_field',101,{'atom',101,'term'}},{'type',101,'union',[{'atom',101,'undefined'}|[{'type',101,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',102,{'atom',102,'fail_label'}},{'type',102,'union',[{'atom',102,'undefined'}|[{'type',102,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'length'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'cases'}},{'type',104,'union',[{'atom',104,'undefined'}|[{'type',104,'list',[{'type',104,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','icode_switch_tuple_arity'},[{'typed_record_field',{'record_field',106,{'atom',106,'term'}},{'type',106,'union',[{'atom',106,'undefined'}|[{'type',106,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',107,{'atom',107,'fail_label'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'type',107,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',108,{'atom',108,'length'}},{'type',108,'union',[{'atom',108,'undefined'}|[{'type',108,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',109,{'atom',109,'cases'}},{'type',109,'union',[{'atom',109,'undefined'}|[{'type',109,'list',[{'type',109,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','icode_type'},[{'typed_record_field',{'record_field',111,{'atom',111,'test'}},{'type',111,'union',[{'atom',111,'undefined'}|[{'type',111,'icode_type_test',[]}]]}}|[{'typed_record_field',{'record_field',112,{'atom',112,'args'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'list',[{'type',112,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',113,{'atom',113,'true_label'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'false_label'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'p'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'float',[]}]]}}]]]]],[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{{'record','icode_goto'},[{'typed_record_field',{'record_field',117,{'atom',117,'label'}},{'type',117,'union',[{'atom',117,'undefined'}|[{'type',117,'icode_lbl',[]}]]}}],[]}],
		%% Line 119
		'type' =
		    %% Line 119
		    [{{'record','icode_move'},[{'typed_record_field',{'record_field',119,{'atom',119,'dst'}},{'type',119,'union',[{'atom',119,'undefined'}|[{'type',119,'record',[{'atom',119,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'src'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'record',[{'atom',120,'icode_variable'}]}|[{'type',120,'record',[{'atom',120,'icode_const'}]}]]]}}]],[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{{'record','icode_phi'},[{'typed_record_field',{'record_field',122,{'atom',122,'dst'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'type',122,'record',[{'atom',122,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'id'}},{'type',123,'union',[{'atom',123,'undefined'}|[{'type',123,'record',[{'atom',123,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'arglist'}},{'type',124,'union',[{'atom',124,'undefined'}|[{'type',124,'list',[{'type',124,'tuple',[{'type',124,'icode_lbl',[]}|[{'type',124,'record',[{'atom',124,'icode_variable'}]}]]}]}]]}}]]],[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{{'record','icode_call'},[{'typed_record_field',{'record_field',126,{'atom',126,'dstlist'}},{'type',126,'union',[{'atom',126,'undefined'}|[{'type',126,'list',[{'type',126,'record',[{'atom',126,'icode_variable'}]}]}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'fun'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'type',127,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'args'}},{'type',128,'union',[{'atom',128,'undefined'}|[{'type',128,'list',[{'type',128,'icode_argument',[]}]}]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'type'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'icode_call_type',[]}]]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'continuation'}},{'type',130,'union',[{'atom',130,'undefined'}|[{'type',130,'nil',[]}|[{'type',130,'icode_lbl',[]}]]]}}|[{'typed_record_field',{'record_field',131,{'atom',131,'fail_label'},{'nil',131}},{'type',131,'union',[{'type',131,'nil',[]}|[{'type',131,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'in_guard'},{'atom',132,'false'}},{'type',132,'boolean',[]}}]]]]]]],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{{'record','icode_enter'},[{'typed_record_field',{'record_field',134,{'atom',134,'fun'}},{'type',134,'union',[{'atom',134,'undefined'}|[{'type',134,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'args'}},{'type',135,'union',[{'atom',135,'undefined'}|[{'type',135,'list',[{'type',135,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'type'}},{'type',136,'union',[{'atom',136,'undefined'}|[{'type',136,'icode_call_type',[]}]]}}]]],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{{'record','icode_return'},[{'typed_record_field',{'record_field',138,{'atom',138,'vars'}},{'type',138,'union',[{'atom',138,'undefined'}|[{'type',138,'list',[{'type',138,'icode_var',[]}]}]]}}],[]}],
		%% Line 140
		'type' =
		    %% Line 140
		    [{{'record','icode_begin_try'},[{'typed_record_field',{'record_field',140,{'atom',140,'label'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'successor'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}]],[]}],
		%% Line 142
		'type' =
		    %% Line 142
		    [{{'record','icode_end_try'},[],[]}],
		%% Line 144
		'type' =
		    %% Line 144
		    [{{'record','icode_begin_handler'},[{'typed_record_field',{'record_field',144,{'atom',144,'dstlist'}},{'type',144,'union',[{'atom',144,'undefined'}|[{'type',144,'list',[{'type',144,'icode_var',[]}]}]]}}],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{{'record','icode_fail'},[{'typed_record_field',{'record_field',147,{'atom',147,'class'}},{'type',147,'union',[{'atom',147,'undefined'}|[{'type',147,'icode_exit_class',[]}]]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'args'}},{'type',148,'union',[{'atom',148,'undefined'}|[{'type',148,'list',[{'type',148,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'fail_label'},{'nil',149}},{'type',149,'union',[{'type',149,'nil',[]}|[{'type',149,'icode_lbl',[]}]]}}]]],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{{'record','icode_comment'},[{'typed_record_field',{'record_field',151,{'atom',151,'text'}},{'type',151,'union',[{'atom',151,'undefined'}|[{'type',151,'icode_comment_text',[]}]]}}],[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'icode_instr',{'type',157,'union',[{'type',157,'record',[{'atom',157,'icode_begin_handler'}]}|[{'type',157,'record',[{'atom',157,'icode_begin_try'}]}|[{'type',158,'record',[{'atom',158,'icode_call'}]}|[{'type',158,'record',[{'atom',158,'icode_comment'}]}|[{'type',158,'record',[{'atom',158,'icode_end_try'}]}|[{'type',159,'record',[{'atom',159,'icode_enter'}]}|[{'type',159,'record',[{'atom',159,'icode_fail'}]}|[{'type',160,'record',[{'atom',160,'icode_goto'}]}|[{'type',160,'record',[{'atom',160,'icode_if'}]}|[{'type',160,'record',[{'atom',160,'icode_label'}]}|[{'type',161,'record',[{'atom',161,'icode_move'}]}|[{'type',161,'record',[{'atom',161,'icode_phi'}]}|[{'type',161,'record',[{'atom',161,'icode_return'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_tuple_arity'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_val'}]}|[{'type',163,'record',[{'atom',163,'icode_type'}]}]]]]]]]]]]]]]]]]},[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{'icode_instrs',{'type',164,'list',[{'type',164,'icode_instr',[]}]},[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{{'record','icode'},[{'typed_record_field',{'record_field',170,{'atom',170,'fun'}},{'type',170,'union',[{'atom',170,'undefined'}|[{'type',170,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',171,{'atom',171,'params'}},{'type',171,'union',[{'atom',171,'undefined'}|[{'type',171,'list',[{'type',171,'icode_var',[]}]}]]}}|[{'typed_record_field',{'record_field',172,{'atom',172,'is_closure'}},{'type',172,'union',[{'atom',172,'undefined'}|[{'type',172,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',173,{'atom',173,'closure_arity'}},{'type',173,'union',[{'atom',173,'undefined'}|[{'type',173,'arity',[]}]]}}|[{'typed_record_field',{'record_field',174,{'atom',174,'is_leaf'}},{'type',174,'union',[{'atom',174,'undefined'}|[{'type',174,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',175,{'atom',175,'code'},{'nil',175}},{'type',175,'icode_instrs',[]}}|[{'typed_record_field',{'record_field',176,{'atom',176,'data'}},{'type',176,'union',[{'atom',176,'undefined'}|[{'type',176,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',177,{'atom',177,'var_range'}},{'type',177,'union',[{'atom',177,'undefined'}|[{'type',177,'tuple',[{'type',177,'non_neg_integer',[]}|[{'type',177,'non_neg_integer',[]}]]}]]}}|[{'typed_record_field',{'record_field',178,{'atom',178,'label_range'}},{'type',178,'union',[{'atom',178,'undefined'}|[{'type',178,'tuple',[{'type',178,'icode_lbl',[]}|[{'type',178,'icode_lbl',[]}]]}]]}}|[{'typed_record_field',{'record_field',179,{'atom',179,'info'},{'nil',179}},{'type',179,'icode_info',[]}}]]]]]]]]]],[]}],
		%% Line 180
		'type' =
		    %% Line 180
		    [{'icode',{'type',180,'record',[{'atom',180,'icode'}]},[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{'cfg_lbl',{'type',28,'non_neg_integer',[]},[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','cfg_info'},[{'typed_record_field',{'record_field',34,{'atom',34,'fun'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'type',34,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',35,{'atom',35,'start_label'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'cfg_lbl',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'is_closure'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',37,{'atom',37,'closure_arity'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'type',37,'arity',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'is_leaf'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'boolean',[]}]]}}|[{'record_field',39,{'atom',39,'params'}}|[{'record_field',40,{'atom',40,'info'},{'nil',40}}]]]]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'cfg_data',{'type',45,'tuple',[{'remote_type',45,[{'atom',45,'dict'}|[{'atom',45,'dict'}|[[]]]]}|[{'type',45,'list',[{'type',45,'cfg_lbl',[]}]}|[{'type',45,'non_neg_integer',[]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','cfg'},[{'typed_record_field',{'record_field',50,{'atom',50,'table'},{'call',50,{'remote',50,{'atom',50,'gb_trees'},{'atom',50,'empty'}},[]}},{'remote_type',50,[{'atom',50,'gb_trees'}|[{'atom',50,'tree'}|[[]]]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'info'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'type',51,'record',[{'atom',51,'cfg_info'}]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'data'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'cfg_data',[]}]]}}]]],[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{'cfg',{'type',53,'record',[{'atom',53,'cfg'}]},[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','apply_N'},[{'typed_record_field',{'record_field',28,{'atom',28,'arity'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'type',28,'arity',[]}]]}}],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','closure_element'},[{'typed_record_field',{'record_field',30,{'atom',30,'n'}},{'type',30,'union',[{'atom',30,'undefined'}|[{'type',30,'arity',[]}]]}}],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','element'},[{'typed_record_field',{'record_field',32,{'atom',32,'typeinfo'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'type',32,'list',[]}]]}}],[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','gc_test'},[{'typed_record_field',{'record_field',34,{'atom',34,'need'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'type',34,'non_neg_integer',[]}]]}}],[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{{'record','mkfun'},[{'typed_record_field',{'record_field',36,{'atom',36,'mfa'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'magic_num'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'integer',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'index'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'integer',[]}]]}}]]],[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','unsafe_element'},[{'typed_record_field',{'record_field',38,{'atom',38,'index'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'non_neg_integer',[]}]]}}],[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{{'record','unsafe_update_element'},[{'typed_record_field',{'record_field',40,{'atom',40,'index'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}],[]}],
		%% Line 38
		'spec' =
		    %% Line 38
		    [{{'propagate',1},[{'type',38,'fun',[{'type',38,'product',[{'type',38,'record',[{'atom',38,'cfg'}]}]}|[{'type',38,'record',[{'atom',38,'cfg'}]}]]}]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{{'record','env'},[{'typed_record_field',{'record_field',74,{'atom',74,'cfg'}},{'type',74,'union',[{'atom',74,'undefined'}|[{'type',74,'record',[{'atom',74,'cfg'}]}]]}}|[{'typed_record_field',{'record_field',75,{'atom',75,'executable_flags'},{'call',75,{'remote',75,{'atom',75,'gb_sets'},{'atom',75,'empty'}},[]}},{'remote_type',75,[{'atom',75,'gb_sets'}|[{'atom',75,'set'}|[[]]]]}}|[{'typed_record_field',{'record_field',76,{'atom',76,'handled_blocks'},{'call',76,{'remote',76,{'atom',76,'gb_sets'},{'atom',76,'empty'}},[]}},{'remote_type',76,[{'atom',76,'gb_sets'}|[{'atom',76,'set'}|[[]]]]}}|[{'typed_record_field',{'record_field',77,{'atom',77,'lattice_values'},{'call',77,{'remote',77,{'atom',77,'gb_trees'},{'atom',77,'empty'}},[]}},{'remote_type',77,[{'atom',77,'gb_trees'}|[{'atom',77,'tree'}|[[]]]]}}|[{'typed_record_field',{'record_field',78,{'atom',78,'ssa_edges'},{'call',78,{'remote',78,{'atom',78,'gb_trees'},{'atom',78,'empty'}},[]}},{'remote_type',78,[{'atom',78,'gb_trees'}|[{'atom',78,'tree'}|[[]]]]}}]]]]],[]}]]
'propagate'/1 =
    %% Line 40
    fun (_cor0) ->
	let <Environment> =
	    %% Line 41
	    apply 'create_env'/1
		(_cor0)
	in  let <_cor3> =
		%% Line 42
		call 'hipe_icode_cfg':'start_label'
		    (_cor0)
	    in  let <_cor2> =
		    %% Line 42
		    call 'hipe_icode_cfg':'start_label'
			(_cor0)
		in  let <StartEdge> = {_cor3,_cor2}
		    in  let <NewEnvironment> =
			    %% Line 43
			    apply 'scc'/3
				([StartEdge|[]], [], Environment)
			in  %% Line 44
			    apply 'update_cfg'/1
				(NewEnvironment)
'visit_expressions'/2 =
    %% Line 58
    fun (_cor1,_cor0) ->
	%% Line 59
	apply 'visit_expressions'/4
	    (_cor1, _cor0, [], [])
'visit_expressions'/4 =
    %% Line 61
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],Environment,FlowWork,SSAWork> when 'true' ->
	      %% Line 62
	      {FlowWork,SSAWork,Environment}
	  %% Line 63
	  <[Inst|Insts],Environment,FlowWork,SSAWork> when 'true' ->
	      %% Line 65
	      case apply 'visit_expression'/2
		       (Inst, Environment) of
		<{MoreFlowWork,MoreSSAWork,Environment1}> when 'true' ->
		    let <FlowWork1> =
			%% Line 66
			call 'erlang':'++'
			    (MoreFlowWork, FlowWork)
		    in  let <SSAWork1> =
			    %% Line 67
			    call 'erlang':'++'
				(MoreSSAWork, SSAWork)
			in  %% Line 68
			    apply 'visit_expressions'/4
				(Insts, Environment1, FlowWork1, SSAWork1)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'visit_expressions',4}}] )
	    -| ['compiler_generated'] )
	end
'create_env'/1 =
    %% Line 81
    fun (_cor0) ->
	let <_cor4> =
	    %% Line 83
	    call 'gb_sets':'empty'
		()
	in  let <_cor3> =
		%% Line 84
		call 'gb_sets':'empty'
		    ()
	    in  let <_cor2> =
		    %% Line 85
		    apply 'initialize_lattice'/1
			(_cor0)
		in  let <_cor1> =
			%% Line 86
			apply 'initialize_ssa_edges'/1
			    (_cor0)
		    in  %% Line 82
			{'env',_cor0,_cor4,_cor3,_cor2,_cor1}
'env__cfg'/1 =
    %% Line 89
    fun (_cor0) ->
	case _cor0 of
	  <{'env',CFG,_cor2,_cor3,_cor4,_cor5}> when 'true' ->
	      CFG
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'env__cfg',1}}] )
	    -| ['compiler_generated'] )
	end
'env__executable_flags'/1 =
    %% Line 90
    fun (_cor0) ->
	case _cor0 of
	  <{'env',_cor2,Flags,_cor3,_cor4,_cor5}> when 'true' ->
	      Flags
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'env__executable_flags',1}}] )
	    -| ['compiler_generated'] )
	end
'env__lattice_values'/1 =
    %% Line 91
    fun (_cor0) ->
	case _cor0 of
	  <{'env',_cor2,_cor3,_cor4,Values,_cor5}> when 'true' ->
	      Values
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'env__lattice_values',1}}] )
	    -| ['compiler_generated'] )
	end
'env__ssa_edges'/1 =
    %% Line 92
    fun (_cor0) ->
	case _cor0 of
	  <{'env',_cor2,_cor3,_cor4,_cor5,Edges}> when 'true' ->
	      Edges
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'env__ssa_edges',1}}] )
	    -| ['compiler_generated'] )
	end
'initialize_lattice'/1 =
    %% Line 101
    fun (_cor0) ->
	let <Lattice> =
	    %% Line 102
	    call 'gb_trees':'empty'
		()
	in  let <Parameters> =
		%% Line 103
		call 'hipe_icode_cfg':'params'
		    (_cor0)
	    in  let <Inserter> =
		    %% Line 104
		    ( fun (_cor4,_cor3) ->
			  %% Line 105
			  call 'gb_trees':'insert'
			      (_cor4, 'bottom', _cor3)
		      -| [{'id',{0,0,'-initialize_lattice/1-fun-0-'}}] )
		in  %% Line 107
		    call 'lists':'foldl'
			(Inserter, Lattice, Parameters)
'initialize_ssa_edges'/1 =
    %% Line 118
    fun (_cor0) ->
	let <IterateNodes> =
	    %% Line 120
	    ( fun (_cor18,_cor17) ->
		  let <IterateInstructions> =
		      %% Line 122
		      ( fun (_cor11,_cor10) ->
			    let <IterateArguments> =
				%% Line 124
				( fun (_cor5,_cor4) ->
				      let <Data> =
					  %% Line 125
					  call 'gb_trees':'lookup'
					      (_cor5, _cor4)
				      in  let <NewEdge> = {_cor18,_cor11}
					  in  %% Line 127
					      case Data of
						%% Line 128
						<'none'> when 'true' ->
						    %% Line 130
						    call 'gb_trees':'insert'
							(_cor5, [NewEdge|[]], _cor4)
						%% Line 131
						<{'value',EdgeList}> when 'true' ->
						    %% Line 133
						    call 'gb_trees':'update'
							(_cor5, [NewEdge|EdgeList], _cor4)
						( <_cor3> when 'true' ->
						      primop 'match_fail'
							  ({'case_clause',_cor3})
						  -| ['compiler_generated'] )
					      end
				  -| [{'id',{0,0,'-initialize_ssa_edges/1-fun-0-'}}] )
			    in  let <Arguments> =
				    %% Line 136
				    call 'hipe_icode':'uses'
					(_cor11)
				in  %% Line 137
				    call 'lists':'foldl'
					(IterateArguments, _cor10, Arguments)
			-| [{'id',{0,0,'-initialize_ssa_edges/1-fun-1-'}}] )
		  in  let <_cor15> =
			  %% Line 139
			  call 'hipe_icode_cfg':'bb'
			      (_cor0, _cor18)
		      in  let <Instructions> =
			      %% Line 139
			      call 'hipe_bb':'code'
				  (_cor15)
			  in  %% Line 140
			      call 'lists':'foldl'
				  (IterateInstructions, _cor17, Instructions)
	      -| [{'id',{0,0,'-initialize_ssa_edges/1-fun-2-'}}] )
	in  let <NodeList> =
		%% Line 142
		call 'hipe_icode_cfg':'labels'
		    (_cor0)
	    in  let <_cor23> =
		    %% Line 143
		    call 'gb_trees':'empty'
			()
		in  %% Line 143
		    call 'lists':'foldl'
			(IterateNodes, _cor23, NodeList)
'scc'/3 =
    %% Line 157
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],[],Environment> when 'true' ->
	      %% Line 158
	      Environment
	  %% Line 160
	  <[{Source,Destination}|FlowWorkList],SSAWorkList,Environment> when 'true' ->
	      %% Line 161
	      case apply 'executable'/2
		       ({Source,Destination}, Environment) of
		%% Line 162
		<'true'> when 'true' ->
		    %% Line 163
		    apply 'scc'/3
			(FlowWorkList, SSAWorkList, Environment)
		%% Line 164
		<'false'> when 'true' ->
		    let <Environment1> =
			%% Line 165
			apply 'mark_as_executable'/2
			    ({Source,Destination}, Environment)
		    in  let <Code> =
			    %% Line 166
			    apply 'extract_code'/2
				(Destination, Environment)
			in  %% Line 167
			    case %% Line 168
				 apply 'visit_phi_nodes'/4
				     (Code, Destination, Environment1, []) of
			      <{Environment2,Code1,ExtraSSA}> when 'true' ->
				  %% Line 169
				  case apply 'handled'/2
					   (Destination, Environment2) of
				    %% Line 170
				    <'true'> when 'true' ->
					let <_cor6> =
					    %% Line 171
					    call 'erlang':'++'
						(ExtraSSA, SSAWorkList)
					in  %% Line 171
					    apply 'scc'/3
						(FlowWorkList, _cor6, Environment2)
				    %% Line 172
				    <'false'> when 'true' ->
					%% Line 173
					case %% Line 174
					     apply 'visit_expressions'/2
						 (Code1, Environment2) of
					  <{MoreFlowDests,MoreSSAWork,Environment3}> when 'true' ->
					      let <_cor12> =
						  %% Line 175
						  ( letrec
							'lc$^0'/1 =
							    fun (_cor10) ->
								case _cor10 of
								  <[Node|_cor9]> when 'true' ->
								      let <_cor11> =
									  apply 'lc$^0'/1
									      (_cor9)
								      in  ( [{Destination,Node}|_cor11]
									    -| ['compiler_generated'] )
								  <[]> when 'true' ->
								      []
								  ( <_cor10> when 'true' ->
									( primop 'match_fail'
									      ({'function_clause',_cor10})
									  -| [{'function_name',{'lc$^0',1}}] )
								    -| ['compiler_generated'] )
								end
						    in  apply 'lc$^0'/1
							    (MoreFlowDests)
						    -| ['list_comprehension'] )
					      in  let <FlowWorkList1> =
						      %% Line 176
						      call 'erlang':'++'
							  (_cor12, FlowWorkList)
						  in  let <_cor15> =
							  %% Line 177
							  call 'erlang':'++'
							      (MoreSSAWork, SSAWorkList)
						      in  let <SSAWorkList1> =
							      %% Line 177
							      call 'erlang':'++'
								  (ExtraSSA, _cor15)
							  in  let <Environment4> =
								  %% Line 178
								  apply 'mark_as_handled'/2
								      (Destination, Environment3)
							      in  %% Line 179
								  apply 'scc'/3
								      (FlowWorkList1, SSAWorkList1, Environment4)
					  ( <_cor7> when 'true' ->
						primop 'match_fail'
						    ({'badmatch',_cor7})
					    -| ['compiler_generated'] )
					end
				    ( <_cor18> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor18})
				      -| ['compiler_generated'] )
				  end
			      ( <_cor5> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor5})
				-| ['compiler_generated'] )
			    end
		( <_cor19> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor19})
		  -| ['compiler_generated'] )
	      end
	  %% Line 183
	  <[],[{Node,Instruction}|SSAWorkList],Environment> when 'true' ->
	      %% Line 184
	      case apply 'reachable'/2
		       (Node, Environment) of
		%% Line 185
		<'true'> when 'true' ->
		    %% Line 186
		    case call 'hipe_icode':'is_phi'
			     (Instruction) of
		      %% Line 187
		      <'true'> when 'true' ->
			  %% Line 188
			  case apply 'visit_phi'/3
				   (Instruction, Node, Environment) of
			    <{Environment1,MoreSSA}> when 'true' ->
				let <_cor21> =
				    %% Line 189
				    call 'erlang':'++'
					(MoreSSA, SSAWorkList)
				in  %% Line 189
				    apply 'scc'/3
					([], _cor21, Environment1)
			    ( <_cor20> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor20})
			      -| ['compiler_generated'] )
			  end
		      %% Line 190
		      <'false'> when 'true' ->
			  %% Line 191
			  case %% Line 192
			       apply 'visit_expression'/2
				   (Instruction, Environment) of
			    <{MoreFlowDests,MoreSSAWork,Environment1}> when 'true' ->
				let <SSAWorkList1> =
				    %% Line 193
				    call 'erlang':'++'
					(MoreSSAWork, SSAWorkList)
				in  let <_cor28> =
					%% Line 194
					( letrec
					      'lc$^1'/1 =
						  fun (_cor26) ->
						      case _cor26 of
							<[Destination|_cor25]> when 'true' ->
							    let <_cor27> =
								apply 'lc$^1'/1
								    (_cor25)
							    in  ( [{Node,Destination}|_cor27]
								  -| ['compiler_generated'] )
							<[]> when 'true' ->
							    []
							( <_cor26> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_cor26})
								-| [{'function_name',{'lc$^1',1}}] )
							  -| ['compiler_generated'] )
						      end
					  in  apply 'lc$^1'/1
						  (MoreFlowDests)
					  -| ['list_comprehension'] )
				    in  %% Line 195
					apply 'scc'/3
					    (_cor28, SSAWorkList1, Environment1)
			    ( <_cor22> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor22})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor30> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor30})
			-| ['compiler_generated'] )
		    end
		%% Line 197
		<'false'> when 'true' ->
		    %% Line 198
		    apply 'scc'/3
			([], SSAWorkList, Environment)
		( <_cor31> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor31})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor34,_cor33,_cor32> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor34,_cor33,_cor32})
		  -| [{'function_name',{'scc',3}}] )
	    -| ['compiler_generated'] )
	end
'update_cfg'/1 =
    %% Line 210
    fun (_cor0) ->
	let <NodeList> =
	    %% Line 211
	    apply 'get_nodelist'/1
		(_cor0)
	in  let <CFG1> =
		%% Line 212
		apply 'update_nodes'/2
		    (NodeList, _cor0)
	    in  %% Line 214
		call 'hipe_icode_cfg':'remove_unreachable_code'
		    (CFG1)
'update_nodes'/2 =
    %% Line 226
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Environment> when 'true' ->
	      %% Line 227
	      apply 'env__cfg'/1
		  (Environment)
	  %% Line 228
	  <[Node|NodeList],Environment> when 'true' ->
	      let <_cor8> =
		  %% Line 230
		  case apply 'reachable'/2
			   (Node, Environment) of
		    %% Line 231
		    <'true'> when 'true' ->
			let <Instructions> =
			    %% Line 232
			    apply 'extract_code'/2
				(Node, Environment)
			in  let <Updater> =
				%% Line 233
				( fun (_cor3) ->
				      %% Line 234
				      apply 'update_instruction'/2
					  (_cor3, Environment)
				  -| [{'id',{0,0,'-update_nodes/2-fun-0-'}}] )
			    in  let <NewInstructions> =
				    %% Line 236
				    call 'lists':'flatmap'
					(Updater, Instructions)
				in  %% Line 237
				    apply 'update_code'/3
					(Node, NewInstructions, Environment)
		    %% Line 238
		    <'false'> when 'true' ->
			%% Line 239
			Environment
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor7})
		      -| ['compiler_generated'] )
		  end
	      in  %% Line 241
		  apply 'update_nodes'/2
		      (NodeList, _cor8)
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'update_nodes',2}}] )
	    -| ['compiler_generated'] )
	end
'update_code'/3 =
    %% Line 253
    fun (_cor2,_cor1,_cor0) ->
	let <CFG> =
	    %% Line 254
	    apply 'env__cfg'/1
		(_cor0)
	in  let <BB> =
		%% Line 255
		call 'hipe_icode_cfg':'bb'
		    (CFG, _cor2)
	    in  let <OrderedInstructions> =
		    %% Line 256
		    apply 'put_phi_nodes_first'/1
			(_cor1)
		in  let <NewBB> =
			%% Line 257
			call 'hipe_bb':'code_update'
			    (BB, OrderedInstructions)
		    in  let <NewCFG> =
			    %% Line 258
			    call 'hipe_icode_cfg':'bb_add'
				(CFG, _cor2, NewBB)
			in  %% Line 259
			    case _cor0 of
			      <{'env',_cor13,_cor14,_cor15,_cor16,_cor17}> when 'true' ->
				  call 'erlang':'setelement'
				      (2, _cor0, NewCFG)
			      ( <_cor18> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','env'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
'put_phi_nodes_first'/1 =
    %% Line 268
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 270
	    ( fun (_cor1) ->
		  call 'hipe_icode':'is_phi'
		      (_cor1)
	      -| [{'id',{0,0,'-put_phi_nodes_first/1-fun-0-'}}] )
	in  %% Line 269
	    case %% Line 270
		 apply 'partition'/2
		     (_cor3, _cor0) of
	      <{PhiInstructions,OtherInstructions}> when 'true' ->
		  %% Line 271
		  call 'erlang':'++'
		      (PhiInstructions, OtherInstructions)
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor4})
		-| ['compiler_generated'] )
	    end
'partition'/2 =
    %% Line 275
    fun (_cor1,_cor0) ->
	%% Line 276
	apply 'partition'/4
	    (_cor1, _cor0, [], [])
'partition'/4 =
    %% Line 278
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_X_Function,[],True,False> when 'true' ->
	      let <_cor5> =
		  %% Line 279
		  call 'lists':'reverse'
		      (True)
	      in  let <_cor4> =
		      %% Line 279
		      call 'lists':'reverse'
			  (False)
		  in  %% Line 279
		      {_cor5,_cor4}
	  %% Line 281
	  <Function,[Hd|Tail],True,False> when 'true' ->
	      %% Line 282
	      case apply Function
		       (Hd) of
		%% Line 283
		<'true'> when 'true' ->
		    %% Line 284
		    apply 'partition'/4
			(Function, Tail, [Hd|True], False)
		%% Line 285
		<'false'> when 'true' ->
		    %% Line 286
		    apply 'partition'/4
			(Function, Tail, True, [Hd|False])
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'partition',4}}] )
	    -| ['compiler_generated'] )
	end
'visit_phi_nodes'/4 =
    %% Line 300
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],CurrentNode,_X_Environment,_X_SSAWork> when 'true' ->
	      do  %% Line 301
		  call 'io':'format'
		      ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[88|[73|[84|[69|[68|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[64|[126|[119|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [{[126|[119|[58|[32|[118|[105|[115|[105|[116|[95|[112|[104|[105|[95|[110|[111|[100|[101|[115|[47|[52|[32|[66|[97|[115|[105|[99|[32|[98|[108|[111|[99|[107|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[110|[111|[32|[99|[111|[100|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],%% Line 302
																																																																				     'hipe_icode_ssa_const_prop',%% Line 302
																																																																								 CurrentNode}|%% Line 302
																																																																									      ['hipe_icode_ssa_const_prop'|[302]]])
		  %% Line 302
		  call 'erlang':'error'
		      ({'hipe_icode_ssa_const_prop',302,{[126|[119|[58|[32|[118|[105|[115|[105|[116|[95|[112|[104|[105|[95|[110|[111|[100|[101|[115|[47|[52|[32|[66|[97|[115|[105|[99|[32|[98|[108|[111|[99|[107|[32|[99|[111|[110|[116|[97|[105|[110|[115|[32|[110|[111|[32|[99|[111|[100|[101]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],'hipe_icode_ssa_const_prop',CurrentNode}})
	  %% Line 303
	  <Is = [Inst|Insts],Node,Environment,SSAWork> when 'true' ->
	      %% Line 304
	      case call 'hipe_icode':'is_phi'
		       (Inst) of
		%% Line 305
		<'true'> when 'true' ->
		    %% Line 306
		    case apply 'visit_phi'/3
			     (Inst, Node, Environment) of
		      <{Environment1,NewSSA}> when 'true' ->
			  let <_cor8> =
			      %% Line 307
			      call 'erlang':'++'
				  (NewSSA, SSAWork)
			  in  %% Line 307
			      apply 'visit_phi_nodes'/4
				  (Insts, Node, Environment1, _cor8)
		      ( <_cor7> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor7})
			-| ['compiler_generated'] )
		    end
		%% Line 308
		<'false'> when 'true' ->
		    %% Line 309
		    {Environment,Is,SSAWork}
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'visit_phi_nodes',4}}] )
	    -| ['compiler_generated'] )
	end
'visit_phi'/3 =
    %% Line 321
    fun (_cor2,_cor1,_cor0) ->
	let <ArgumentList> =
	    %% Line 322
	    call 'hipe_icode':'phi_arglist'
		(_cor2)
	in  let <Value> =
		%% Line 323
		apply 'get_phi_value'/4
		    (ArgumentList, _cor1, _cor0, 'top')
	    in  let <Name> =
		    %% Line 324
		    call 'hipe_icode':'phi_dst'
			(_cor2)
		in  %% Line 325
		    case apply 'update_lattice_value'/2
			     ({Name,Value}, _cor0) of
		      <{Environment1,SSAWork}> when 'true' ->
			  %% Line 326
			  {Environment1,SSAWork}
		      ( <_cor6> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor6})
			-| ['compiler_generated'] )
		    end
'get_phi_value'/4 =
    %% Line 342
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[],_X_CurrentNode,_X_Environment,CurrentValue> when 'true' ->
	      %% Line 343
	      CurrentValue
	  %% Line 344
	  <[{PredecessorNode,Variable}|ArgList],%% Line 345
						CurrentNode,%% Line 346
							    Environment,%% Line 347
									CurrentValue> when 'true' ->
	      %% Line 348
	      case apply 'executable'/2
		       ({PredecessorNode,CurrentNode}, Environment) of
		%% Line 349
		<'true'> when 'true' ->
		    let <NewValue> =
			%% Line 350
			apply 'lookup_lattice_value'/2
			    (Variable, Environment)
		    in  %% Line 351
			case NewValue of
			  %% Line 352
			  <'bottom'> when 'true' ->
			      %% Line 353
			      'bottom'
			  %% Line 354
			  <'top'> when 'true' ->
			      %% Line 355
			      apply 'get_phi_value'/4
				  (ArgList, CurrentNode, Environment, CurrentValue)
			  %% Line 356
			  <_cor13> when 'true' ->
			      %% Line 357
			      case CurrentValue of
				%% Line 358
				<'top'> when 'true' ->
				    %% Line 359
				    apply 'get_phi_value'/4
					(ArgList, CurrentNode, Environment, NewValue)
				%% Line 360
				<_cor14> when 'true' ->
				    %% Line 361
				    case <> of
				      %% Line 362
				      <>
					  when call 'erlang':'=:='
						(NewValue,
						 CurrentValue) ->
					  %% Line 363
					  apply 'get_phi_value'/4
					      (ArgList, CurrentNode, Environment, NewValue)
				      %% Line 364
				      <> when 'true' ->
					  %% Line 365
					  'bottom'
				    end
			      end
			end
		%% Line 369
		<'false'> when 'true' ->
		    %% Line 370
		    apply 'get_phi_value'/4
			(ArgList, CurrentNode, Environment, CurrentValue)
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'get_phi_value',4}}] )
	    -| ['compiler_generated'] )
	end
'reachable'/2 =
    %% Line 375
    fun (_cor1,_cor0) ->
	let <Predecessors> =
	    %% Line 376
	    apply 'predecessors'/2
		(_cor1, _cor0)
	in  let <Executable> =
		%% Line 377
		( fun (_cor3) ->
		      apply 'executable'/2
			  ({_cor3,_cor1}, _cor0)
		  -| [{'id',{0,0,'-reachable/2-fun-0-'}}] )
	    in  %% Line 378
		call 'lists':'any'
		    (Executable, Predecessors)
'mark_as_executable'/2 =
    %% Line 382
    fun (_cor1,_cor0) ->
	let <ExecutableFlags> =
	    %% Line 383
	    apply 'env__executable_flags'/1
		(_cor0)
	in  let <ExecutableFlags1> =
		%% Line 384
		call 'gb_sets':'add'
		    (_cor1, ExecutableFlags)
	    in  %% Line 385
		case _cor0 of
		  <{'env',_cor8,_cor9,_cor10,_cor11,_cor12}> when 'true' ->
		      call 'erlang':'setelement'
			  (3, _cor0, ExecutableFlags1)
		  ( <_cor13> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','env'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
'mark_as_handled'/2 =
    %% Line 389
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Node,Environment = {'env',_cor7,_cor8,Handled,_cor9,_cor10}> when 'true' ->
	      let <NewHandled> =
		  %% Line 390
		  call 'gb_sets':'add_element'
		      (Node, Handled)
	      in  %% Line 391
		  call 'erlang':'setelement'
		      (4, Environment, NewHandled)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'mark_as_handled',2}}] )
	    -| ['compiler_generated'] )
	end
'handled'/2 =
    %% Line 393
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Node,{'env',_cor4,_cor5,Handled,_cor6,_cor7}> when 'true' ->
	      %% Line 394
	      call 'gb_sets':'is_element'
		  (Node, Handled)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'handled',2}}] )
	    -| ['compiler_generated'] )
	end
'extract_code'/2 =
    %% Line 398
    fun (_cor1,_cor0) ->
	let <CFG> =
	    %% Line 399
	    apply 'env__cfg'/1
		(_cor0)
	in  %% Line 400
	    case call 'hipe_icode_cfg':'bb'
		     (CFG, _cor1) of
	      %% Line 401
	      <'not_found'> when 'true' ->
		  do  call 'io':'format'
			  ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[87|[97|[114|[110|[105|[110|[103|[58|[32|[91|[126|[115|[58|[126|[119|[93|[58|[32|[67|[111|[117|[108|[100|[32|[110|[111|[116|[32|[102|[105|[110|[100|[32|[108|[97|[98|[101|[108|[32|[126|[119|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], ['hipe_icode_ssa_const_prop'|[401|[_cor1|[]]]])
		      %% Line 402
		      []
	      %% Line 403
	      <BB> when 'true' ->
		  call 'hipe_bb':'code'
		      (BB)
	    end
'predecessors'/2 =
    %% Line 408
    fun (_cor1,_cor0) ->
	let <CFG> =
	    %% Line 409
	    apply 'env__cfg'/1
		(_cor0)
	in  %% Line 410
	    call 'hipe_icode_cfg':'pred'
		(CFG, _cor1)
'executable'/2 =
    %% Line 414
    fun (_cor1,_cor0) ->
	let <ExecutableFlags> =
	    %% Line 415
	    apply 'env__executable_flags'/1
		(_cor0)
	in  %% Line 416
	    call 'gb_sets':'is_member'
		(_cor1, ExecutableFlags)
'update_lattice_value'/2 =
    %% Line 420
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{[],_X_NewValue},Environment> when 'true' ->
	      %% Line 421
	      {Environment,[]}
	  %% Line 422
	  <{Names,NewValue},Environment>
	      when call 'erlang':'is_list'
		    (Names) ->
	      let <Update> =
		  %% Line 424
		  ( fun (_cor5,_cor4) ->
			case <_cor5,_cor4> of
			  <Dst,{Env,SSA}> when 'true' ->
			      %% Line 425
			      case %% Line 426
				   apply 'update_lattice_value'/2
				       ({Dst,NewValue}, Env) of
				<{NewEnv,NewSSA}> when 'true' ->
				    let <_cor3> =
					%% Line 427
					call 'erlang':'++'
					    (SSA, NewSSA)
				    in  %% Line 427
					{NewEnv,_cor3}
				( <_cor2> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor2})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor7,_cor6> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_cor7,_cor6})
				  -| [{'function_name',{'-update_lattice_value/2-fun-0-',2}}] )
			    -| ['compiler_generated'] )
			end
		    -| [{'id',{0,0,'-update_lattice_value/2-fun-0-'}}] )
	      in  %% Line 429
		  call 'lists':'foldl'
		      (Update, {Environment,[]}, Names)
	  %% Line 432
	  <{Name,NewValue},Environment> when 'true' ->
	      let <LatticeValues> =
		  %% Line 433
		  apply 'env__lattice_values'/1
		      (Environment)
	      in  let <LatticeValues1,SSAWork> =
		      %% Line 435
		      case call 'gb_trees':'lookup'
			       (Name, LatticeValues) of
			%% Line 436
			<'none'> when 'true' ->
			    let <_cor11> =
				%% Line 437
				call 'gb_trees':'insert'
				    (Name, NewValue, LatticeValues)
			    in  let <_cor10> =
				    %% Line 438
				    apply 'lookup_ssa_edges'/2
					(Name, Environment)
				in  <_cor11,_cor10>
			%% Line 439
			<{'value',_cor22}>
			    when call 'erlang':'=:='
				  (_cor22,
				   NewValue) ->
			    %% Line 440
			    <LatticeValues,[]>
			%% Line 441
			<{'value',_cor23}> when 'true' ->
			    let <_cor13> =
				%% Line 442
				call 'gb_trees':'update'
				    (Name, NewValue, LatticeValues)
			    in  let <_cor12> =
				    %% Line 443
				    apply 'lookup_ssa_edges'/2
					(Name, Environment)
				in  <_cor13,_cor12>
			( <_cor14> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor14})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 445
		      case Environment of
			<{'env',_cor24,_cor25,_cor26,_cor27,_cor28}> when 'true' ->
			    let <_cor19> =
				call 'erlang':'setelement'
				    (5, Environment, LatticeValues1)
			    in  {_cor19,SSAWork}
			( <_cor29> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','env'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
	  ( <_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20})
		  -| [{'function_name',{'update_lattice_value',2}}] )
	    -| ['compiler_generated'] )
	end
'lookup_ssa_edges'/2 =
    %% Line 449
    fun (_cor1,_cor0) ->
	let <SSAEdges> =
	    %% Line 450
	    apply 'env__ssa_edges'/1
		(_cor0)
	in  %% Line 451
	    case call 'gb_trees':'lookup'
		     (_cor1, SSAEdges) of
	      %% Line 452
	      <{'value',X}> when 'true' ->
		  %% Line 453
		  X
	      %% Line 454
	      <_cor6> when 'true' ->
		  %% Line 455
		  []
	    end
'get_nodelist'/1 =
    %% Line 460
    fun (_cor0) ->
	let <CFG> =
	    %% Line 461
	    apply 'env__cfg'/1
		(_cor0)
	in  %% Line 462
	    call 'hipe_icode_cfg':'labels'
		(CFG)
'visit_expression'/2 =
    %% Line 77
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 78
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[%% Line 79
			      Argument|_cor3]> when 'true' ->
				let <_cor6> =
				    apply 'lookup_lattice_value'/2
					(Argument, _cor0)
				in  let <_cor7> =
					%% Line 79
					apply 'lc$^0'/1
					    (_cor3)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  let <_cor4> =
		      %% Line 79
		      call 'hipe_icode':'args'
			  (_cor1)
		  in  apply 'lc$^0'/1
			  (_cor4)
	      -| ['list_comprehension'] )
	in  %% Line 80
	    case _cor1 of
	      %% Line 81
	      <{'icode_move',_cor13,_cor14}> when 'true' ->
		  %% Line 82
		  apply 'visit_move'/3
		      (_cor1, _cor8, _cor0)
	      %% Line 83
	      <{'icode_if',_cor15,_cor16,_cor17,_cor18,_cor19}> when 'true' ->
		  %% Line 84
		  apply 'visit_if'/3
		      (_cor1, _cor8, _cor0)
	      %% Line 85
	      <{'icode_goto',_cor20}> when 'true' ->
		  %% Line 86
		  apply 'visit_goto'/3
		      (_cor1, _cor8, _cor0)
	      %% Line 87
	      <{'icode_type',_cor21,_cor22,_cor23,_cor24,_cor25}> when 'true' ->
		  %% Line 88
		  apply 'visit_type'/3
		      (_cor1, _cor8, _cor0)
	      %% Line 89
	      <{'icode_call',_cor26,_cor27,_cor28,_cor29,_cor30,_cor31,_cor32}> when 'true' ->
		  %% Line 90
		  apply 'visit_call'/3
		      (_cor1, _cor8, _cor0)
	      %% Line 91
	      <{'icode_switch_val',_cor33,_cor34,_cor35,_cor36}> when 'true' ->
		  %% Line 92
		  apply 'visit_switch_val'/3
		      (_cor1, _cor8, _cor0)
	      %% Line 93
	      <{'icode_switch_tuple_arity',_cor37,_cor38,_cor39,_cor40}> when 'true' ->
		  %% Line 94
		  apply 'visit_switch_tuple_arity'/3
		      (_cor1, _cor8, _cor0)
	      %% Line 95
	      <{'icode_begin_handler',_cor41}> when 'true' ->
		  %% Line 96
		  apply 'visit_begin_handler'/3
		      (_cor1, _cor8, _cor0)
	      %% Line 97
	      <{'icode_begin_try',_cor42,_cor43}> when 'true' ->
		  %% Line 98
		  apply 'visit_begin_try'/3
		      (_cor1, _cor8, _cor0)
	      %% Line 99
	      <{'icode_fail',_cor44,_cor45,_cor46}> when 'true' ->
		  %% Line 100
		  apply 'visit_fail'/3
		      (_cor1, _cor8, _cor0)
	      %% Line 101
	      <_cor47> when 'true' ->
		  %% Line 103
		  {[],[],_cor0}
	    end
'visit_begin_try'/3 =
    %% Line 108
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Instruction,[],Environment> when 'true' ->
	      let <Label> =
		  %% Line 109
		  call 'hipe_icode':'begin_try_label'
		      (Instruction)
	      in  let <Successor> =
		      %% Line 110
		      call 'hipe_icode':'begin_try_successor'
			  (Instruction)
		  in  %% Line 111
		      {[Label|[Successor|[]]],[],Environment}
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'visit_begin_try',3}}] )
	    -| ['compiler_generated'] )
	end
'visit_begin_handler'/3 =
    %% Line 115
    fun (_cor2,_cor1,_cor0) ->
	let <Destinations> =
	    %% Line 116
	    call 'hipe_icode':'begin_handler_dstlist'
		(_cor2)
	in  let <_cor10> =
		%% Line 118
		( fun (_cor7,_cor6) ->
		      case <_cor7,_cor6> of
			<Dst,{Env0,Work0}> when 'true' ->
			    %% Line 119
			    case apply 'update_lattice_value'/2
				     ({Dst,'bottom'}, Env0) of
			      <{Env,Work}> when 'true' ->
				  let <_cor5> =
				      %% Line 120
				      call 'erlang':'++'
					  (Work, Work0)
				  in  %% Line 120
				      {Env,_cor5}
			      ( <_cor4> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor4})
				-| ['compiler_generated'] )
			    end
			( <_cor9,_cor8> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor9,_cor8})
				-| [{'function_name',{'-visit_begin_handler/3-fun-0-',2}}] )
			  -| ['compiler_generated'] )
		      end
		  -| [{'id',{0,0,'-visit_begin_handler/3-fun-0-'}}] )
	    in  %% Line 117
		case %% Line 118
		     call 'lists':'foldl'
			 (_cor10, %% Line 122
				  {_cor0,[]}, %% Line 123
					      Destinations) of
		  <{Environment1,SSAWork}> when 'true' ->
		      %% Line 124
		      {[],SSAWork,Environment1}
		  ( <_cor11> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor11})
		    -| ['compiler_generated'] )
		end
'visit_switch_val'/3 =
    %% Line 128
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Instruction,[Argument|[]],Environment> when 'true' ->
	      let <Cases> =
		  %% Line 129
		  call 'hipe_icode':'switch_val_cases'
		      (Instruction)
	      in  let <FailLabel> =
		      %% Line 130
		      call 'hipe_icode':'switch_val_fail_label'
			  (Instruction)
		  in  %% Line 131
		      case Argument of
			%% Line 132
			<'bottom'> when 'true' ->
			    let <_cor9> =
				%% Line 133
				( letrec
				      'lc$^0'/1 =
					  fun (_cor7) ->
					      case _cor7 of
						<[{_X_Value,Label}|_cor6]> when 'true' ->
						    let <_cor8> =
							apply 'lc$^0'/1
							    (_cor6)
						    in  ( [Label|_cor8]
							  -| ['compiler_generated'] )
						( <[_cor5|_cor6]> when 'true' ->
						      apply 'lc$^0'/1
							  (_cor6)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor7> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor7})
							-| [{'function_name',{'lc$^0',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^0'/1
					  (Cases)
				  -| ['list_comprehension'] )
			    in  let <FlowWork1> =
				    %% Line 134
				    [FailLabel|_cor9]
				in  %% Line 135
				    {FlowWork1,[],Environment}
			%% Line 136
			<_cor17> when 'true' ->
			    let <Target> =
				%% Line 137
				apply 'get_switch_target'/3
				    (Cases, Argument, FailLabel)
			    in  %% Line 138
				{[Target|[]],[],Environment}
		      end
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'visit_switch_val',3}}] )
	    -| ['compiler_generated'] )
	end
'visit_switch_tuple_arity'/3 =
    %% Line 143
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Instruction,[Argument|[]],Environment> when 'true' ->
	      let <Cases> =
		  %% Line 144
		  call 'hipe_icode':'switch_tuple_arity_cases'
		      (Instruction)
	      in  let <FailLabel> =
		      %% Line 145
		      call 'hipe_icode':'switch_tuple_arity_fail_label'
			  (Instruction)
		  in  %% Line 146
		      case Argument of
			%% Line 147
			<'bottom'> when 'true' ->
			    let <_cor9> =
				%% Line 148
				( letrec
				      'lc$^0'/1 =
					  fun (_cor7) ->
					      case _cor7 of
						<[{_X_Value,Label}|_cor6]> when 'true' ->
						    let <_cor8> =
							apply 'lc$^0'/1
							    (_cor6)
						    in  ( [Label|_cor8]
							  -| ['compiler_generated'] )
						( <[_cor5|_cor6]> when 'true' ->
						      apply 'lc$^0'/1
							  (_cor6)
						  -| ['compiler_generated'] )
						<[]> when 'true' ->
						    []
						( <_cor7> when 'true' ->
						      ( primop 'match_fail'
							    ({'function_clause',_cor7})
							-| [{'function_name',{'lc$^0',1}}] )
						  -| ['compiler_generated'] )
					      end
				  in  apply 'lc$^0'/1
					  (Cases)
				  -| ['list_comprehension'] )
			    in  let <FlowWork1> =
				    %% Line 149
				    [FailLabel|_cor9]
				in  %% Line 150
				    {FlowWork1,[],Environment}
			%% Line 151
			<Constant> when 'true' ->
			    let <UnTagged> =
				%% Line 152
				call 'hipe_icode':'const_value'
				    (Constant)
			    in  %% Line 153
				case <> of
				  %% Line 154
				  <>
				      when call 'erlang':'is_tuple'
					    (UnTagged) ->
				      let <_cor13> =
					  %% Line 155
					  call 'erlang':'tuple_size'
					      (UnTagged)
				      in  let <Target> =
					      %% Line 155
					      apply 'get_switch_target'/3
						  (Cases, _cor13, FailLabel)
					  in  %% Line 156
					      {[Target|[]],[],Environment}
				  %% Line 157
				  <> when 'true' ->
				      %% Line 158
				      {[FailLabel|[]],[],Environment}
				end
		      end
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'visit_switch_tuple_arity',3}}] )
	    -| ['compiler_generated'] )
	end
'get_switch_target'/3 =
    %% Line 164
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_X_Argument,FailLabel> when 'true' ->
	      %% Line 165
	      FailLabel
	  %% Line 166
	  <[{CaseValue,Target}|CaseList],Argument,FailLabel> when 'true' ->
	      %% Line 167
	      case <> of
		%% Line 168
		<>
		    when call 'erlang':'=:='
			  (CaseValue,
			   Argument) ->
		    %% Line 169
		    Target
		%% Line 170
		<> when 'true' ->
		    %% Line 171
		    apply 'get_switch_target'/3
			(CaseList, Argument, FailLabel)
	      end
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'get_switch_target',3}}] )
	    -| ['compiler_generated'] )
	end
'visit_move'/3 =
    %% Line 176
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Instruction,[SourceValue|[]],Environment> when 'true' ->
	      let <Destination> =
		  %% Line 177
		  call 'hipe_icode':'move_dst'
		      (Instruction)
	      in  %% Line 178
		  case apply 'update_lattice_value'/2
			   ({Destination,SourceValue}, %% Line 179
						       Environment) of
		    <{Environment1,SSAWork}> when 'true' ->
			%% Line 180
			{[],SSAWork,Environment1}
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'visit_move',3}}] )
	    -| ['compiler_generated'] )
	end
'visit_if'/3 =
    %% Line 184
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 186
	    call 'hipe_icode':'if_op'
		(_cor2)
	in  let <_cor9> =
		%% Line 186
		case apply 'evaluate_if'/2
			 (_cor3, _cor1) of
		  %% Line 187
		  <'true'> when 'true' ->
		      let <TrueLabel> =
			  %% Line 188
			  call 'hipe_icode':'if_true_label'
			      (_cor2)
		      in  %% Line 189
			  [TrueLabel|[]]
		  %% Line 190
		  <'false'> when 'true' ->
		      let <FalseLabel> =
			  %% Line 191
			  call 'hipe_icode':'if_false_label'
			      (_cor2)
		      in  %% Line 192
			  [FalseLabel|[]]
		  %% Line 193
		  <'bottom'> when 'true' ->
		      let <TrueLabel> =
			  %% Line 194
			  call 'hipe_icode':'if_true_label'
			      (_cor2)
		      in  let <FalseLabel> =
			      %% Line 195
			      call 'hipe_icode':'if_false_label'
				  (_cor2)
			  in  %% Line 196
			      [TrueLabel|[FalseLabel|[]]]
		  ( <_cor8> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor8})
		    -| ['compiler_generated'] )
		end
	    in  %% Line 198
		{_cor9,[],_cor0}
'visit_goto'/3 =
    %% Line 202
    fun (_cor2,_cor1,_cor0) ->
	let <GotoLabel> =
	    %% Line 203
	    call 'hipe_icode':'goto_label'
		(_cor2)
	in  let <FlowWork> =
		%% Line 204
		[GotoLabel|[]]
	    in  %% Line 205
		{FlowWork,[],_cor0}
'visit_fail'/3 =
    %% Line 209
    fun (_cor2,_cor1,_cor0) ->
	let <FlowWork> =
	    %% Line 210
	    call 'hipe_icode':'successors'
		(_cor2)
	in  %% Line 211
	    {FlowWork,[],_cor0}
'visit_type'/3 =
    %% Line 215
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 217
	    call 'hipe_icode':'type_test'
		(_cor2)
	in  let <_cor9> =
		%% Line 217
		case apply 'evaluate_type'/2
			 (_cor3, _cor1) of
		  %% Line 218
		  <'true'> when 'true' ->
		      let <TrueLabel> =
			  %% Line 219
			  call 'hipe_icode':'type_true_label'
			      (_cor2)
		      in  %% Line 220
			  [TrueLabel|[]]
		  %% Line 221
		  <'false'> when 'true' ->
		      let <FalseLabel> =
			  %% Line 222
			  call 'hipe_icode':'type_false_label'
			      (_cor2)
		      in  %% Line 223
			  [FalseLabel|[]]
		  %% Line 224
		  <'bottom'> when 'true' ->
		      let <TrueLabel> =
			  %% Line 225
			  call 'hipe_icode':'type_true_label'
			      (_cor2)
		      in  let <FalseLabel> =
			      %% Line 226
			      call 'hipe_icode':'type_false_label'
				  (_cor2)
			  in  %% Line 227
			      [TrueLabel|[FalseLabel|[]]]
		  ( <_cor8> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor8})
		    -| ['compiler_generated'] )
		end
	    in  %% Line 229
		{_cor9,[],_cor0}
'visit_call'/3 =
    %% Line 233
    fun (_cor2,_cor1,_cor0) ->
	let <Dsts> =
	    %% Line 234
	    call 'hipe_icode':'call_dstlist'
		(_cor2)
	in  let <Fun> =
		%% Line 235
		call 'hipe_icode':'call_fun'
		    (_cor2)
	    in  let <Fail> =
		    %% Line 236
		    apply 'call_fail_labels'/1
			(_cor2)
		in  let <Cont> =
			%% Line 237
			apply 'call_continuation_labels'/1
			    (_cor2)
		    in  %% Line 238
			apply 'visit_call'/6
			    (Dsts, _cor1, Fun, Cont, Fail, _cor0)
'visit_call'/6 =
    %% Line 240
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 242
	    ( fun (_cor6) ->
		  call 'erlang':'=:='
		      (_cor6, 'bottom')
	      -| [{'id',{0,0,'-visit_call/6-fun-0-'}}] )
	in  let <_cor28> =
		%% Line 242
		case call 'lists':'any'
			 (_cor8, _cor4) of
		  %% Line 243
		  <'true'> when 'true' ->
		      let <_cor10> =
			  %% Line 244
			  call 'erlang':'++'
			      (_cor1, _cor2)
		      in  let <_cor9> =
			      %% Line 244
			      apply 'update_lattice_value'/2
				  ({_cor5,'bottom'}, _cor0)
			  in  %% Line 244
			      {_cor10,_cor9}
		  %% Line 245
		  <'false'> when 'true' ->
		      let <_cor16> =
			  %% Line 246
			  ( letrec
				'lc$^0'/1 =
				    fun (_cor13) ->
					case _cor13 of
					  <[Argument|_cor12]> when 'true' ->
					      let <_cor14> =
						  call 'hipe_icode':'const_value'
						      (Argument)
					      in  let <_cor15> =
						      apply 'lc$^0'/1
							  (_cor12)
						  in  ( [_cor14|_cor15]
							-| ['compiler_generated'] )
					  <[]> when 'true' ->
					      []
					  ( <_cor13> when 'true' ->
						( primop 'match_fail'
						      ({'function_clause',_cor13})
						  -| [{'function_name',{'lc$^0',1}}] )
					    -| ['compiler_generated'] )
					end
			    in  apply 'lc$^0'/1
				    (_cor4)
			    -| ['list_comprehension'] )
		      in  %% Line 247
			  try
			      apply 'evaluate_call_or_enter'/2
				  (_cor16, _cor3)
			  of <_cor18> ->
			      case _cor18 of
				%% Line 248
				<'bottom'> when 'true' ->
				    let <_cor20> =
					%% Line 249
					call 'erlang':'++'
					    (_cor1, _cor2)
				    in  let <_cor19> =
					    %% Line 249
					    apply 'update_lattice_value'/2
						({_cor5,'bottom'}, _cor0)
					in  %% Line 249
					    {_cor20,_cor19}
				%% Line 250
				<Constant> when 'true' ->
				    let <_cor21> =
					%% Line 251
					apply 'update_lattice_value'/2
					    ({_cor5,Constant}, _cor0)
				    in  %% Line 251
					{_cor2,_cor21}
			      end
			  catch <_cor25,_cor24,_cor23> ->
			      let <_cor26> =
				  %% Line 254
				  apply 'update_lattice_value'/2
				      ({_cor5,'bottom'}, _cor0)
			      in  %% Line 254
				  {_cor1,_cor26}
		  ( <_cor27> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor27})
		    -| ['compiler_generated'] )
		end
	    in  %% Line 241
		case _cor28 of
		  <{FlowWork,{Environment1,SSAWork}}> when 'true' ->
		      %% Line 257
		      {FlowWork,SSAWork,Environment1}
		  ( <_cor29> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor29})
		    -| ['compiler_generated'] )
		end
'call_fail_labels'/1 =
    %% Line 261
    fun (_cor0) ->
	%% Line 262
	case call 'hipe_icode':'call_fail_label'
		 (_cor0) of
	  %% Line 263
	  <[]> when 'true' ->
	      []
	  %% Line 264
	  <Label> when 'true' ->
	      [Label|[]]
	end
'call_continuation_labels'/1 =
    %% Line 267
    fun (_cor0) ->
	%% Line 268
	case call 'hipe_icode':'call_continuation'
		 (_cor0) of
	  %% Line 269
	  <[]> when 'true' ->
	      []
	  %% Line 270
	  <Label> when 'true' ->
	      [Label|[]]
	end
'evaluate_call_or_enter'/2 =
    %% Line 276
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[Argument|[]],Fun> when 'true' ->
	      %% Line 277
	      case Fun of
		%% Line 278
		<'mktuple'> when 'true' ->
		    let <_cor2> =
			%% Line 279
			call 'erlang':'list_to_tuple'
			    ([Argument|[]])
		    in  %% Line 279
			call 'hipe_icode':'mk_const'
			    (_cor2)
		%% Line 280
		<'unsafe_untag_float'> when 'true' ->
		    let <_cor3> =
			%% Line 281
			call 'erlang':'float'
			    (Argument)
		    in  %% Line 281
			call 'hipe_icode':'mk_const'
			    (_cor3)
		%% Line 282
		<'conv_to_float'> when 'true' ->
		    let <_cor4> =
			%% Line 283
			call 'erlang':'float'
			    (Argument)
		    in  %% Line 283
			call 'hipe_icode':'mk_const'
			    (_cor4)
		%% Line 284
		<'fnegate'> when 'true' ->
		    let <_cor5> =
			%% Line 285
			call 'erlang':'-'
			    (0.00000000000000000000e+00, Argument)
		    in  %% Line 285
			call 'hipe_icode':'mk_const'
			    (_cor5)
		%% Line 286
		<'bnot'> when 'true' ->
		    %% Line 287
		    call 'hipe_icode':'mk_const'
			(Argument)
		%% Line 288
		<{'unsafe_element',N}> when 'true' ->
		    let <_cor6> =
			%% Line 289
			call 'erlang':'element'
			    (N, Argument)
		    in  %% Line 289
			call 'hipe_icode':'mk_const'
			    (_cor6)
		%% Line 290
		<{'erlang','hd',1}> when 'true' ->
		    let <_cor7> =
			%% Line 291
			call 'erlang':'hd'
			    (Argument)
		    in  %% Line 291
			call 'hipe_icode':'mk_const'
			    (_cor7)
		%% Line 292
		<{'erlang','tl',1}> when 'true' ->
		    let <_cor8> =
			%% Line 293
			call 'erlang':'tl'
			    (Argument)
		    in  %% Line 293
			call 'hipe_icode':'mk_const'
			    (_cor8)
		%% Line 294
		<{'erlang','atom_to_list',1}> when 'true' ->
		    let <_cor9> =
			%% Line 295
			call 'erlang':'atom_to_list'
			    (Argument)
		    in  %% Line 295
			call 'hipe_icode':'mk_const'
			    (_cor9)
		%% Line 296
		<{'erlang','list_to_atom',1}> when 'true' ->
		    let <_cor10> =
			%% Line 297
			call 'erlang':'list_to_atom'
			    (Argument)
		    in  %% Line 297
			call 'hipe_icode':'mk_const'
			    (_cor10)
		%% Line 298
		<{'erlang','tuple_to_list',1}> when 'true' ->
		    let <_cor11> =
			%% Line 299
			call 'erlang':'tuple_to_list'
			    (Argument)
		    in  %% Line 299
			call 'hipe_icode':'mk_const'
			    (_cor11)
		%% Line 300
		<{'erlang','list_to_tuple',1}> when 'true' ->
		    let <_cor12> =
			%% Line 301
			call 'erlang':'list_to_tuple'
			    (Argument)
		    in  %% Line 301
			call 'hipe_icode':'mk_const'
			    (_cor12)
		%% Line 302
		<{'erlang','length',1}> when 'true' ->
		    let <_cor13> =
			%% Line 303
			call 'erlang':'length'
			    (Argument)
		    in  %% Line 303
			call 'hipe_icode':'mk_const'
			    (_cor13)
		%% Line 304
		<{'erlang','size',1}> when 'true' ->
		    let <_cor14> =
			%% Line 305
			call 'erlang':'size'
			    (Argument)
		    in  %% Line 305
			call 'hipe_icode':'mk_const'
			    (_cor14)
		%% Line 306
		<{'erlang','bit_size',1}> when 'true' ->
		    let <_cor15> =
			%% Line 307
			call 'erlang':'bit_size'
			    (Argument)
		    in  %% Line 307
			call 'hipe_icode':'mk_const'
			    (_cor15)
		%% Line 308
		<{'erlang','byte_size',1}> when 'true' ->
		    let <_cor16> =
			%% Line 309
			call 'erlang':'byte_size'
			    (Argument)
		    in  %% Line 309
			call 'hipe_icode':'mk_const'
			    (_cor16)
		%% Line 310
		<{'erlang','tuple_size',1}> when 'true' ->
		    let <_cor17> =
			%% Line 311
			call 'erlang':'tuple_size'
			    (Argument)
		    in  %% Line 311
			call 'hipe_icode':'mk_const'
			    (_cor17)
		%% Line 312
		<{'erlang','abs',1}> when 'true' ->
		    let <_cor18> =
			%% Line 313
			call 'erlang':'abs'
			    (Argument)
		    in  %% Line 313
			call 'hipe_icode':'mk_const'
			    (_cor18)
		%% Line 314
		<{'erlang','round',1}> when 'true' ->
		    let <_cor19> =
			%% Line 315
			call 'erlang':'round'
			    (Argument)
		    in  %% Line 315
			call 'hipe_icode':'mk_const'
			    (_cor19)
		%% Line 316
		<{'erlang','trunc',1}> when 'true' ->
		    let <_cor20> =
			%% Line 317
			call 'erlang':'trunc'
			    (Argument)
		    in  %% Line 317
			call 'hipe_icode':'mk_const'
			    (_cor20)
		%% Line 318
		<_cor53> when 'true' ->
		    %% Line 319
		    'bottom'
	      end
	  %% Line 322
	  <[Argument1|[Argument2|[]]],Fun> when 'true' ->
	      %% Line 323
	      case Fun of
		%% Line 324
		<'+'> when 'true' ->
		    let <_cor22> =
			%% Line 325
			call 'erlang':'+'
			    (Argument1, Argument2)
		    in  %% Line 325
			call 'hipe_icode':'mk_const'
			    (_cor22)
		%% Line 326
		<'-'> when 'true' ->
		    let <_cor23> =
			%% Line 327
			call 'erlang':'-'
			    (Argument1, Argument2)
		    in  %% Line 327
			call 'hipe_icode':'mk_const'
			    (_cor23)
		%% Line 328
		<'*'> when 'true' ->
		    let <_cor24> =
			%% Line 329
			call 'erlang':'*'
			    (Argument1, Argument2)
		    in  %% Line 329
			call 'hipe_icode':'mk_const'
			    (_cor24)
		%% Line 330
		<'/'> when 'true' ->
		    let <_cor25> =
			%% Line 331
			call 'erlang':'/'
			    (Argument1, Argument2)
		    in  %% Line 331
			call 'hipe_icode':'mk_const'
			    (_cor25)
		%% Line 332
		<'band'> when 'true' ->
		    let <_cor26> =
			%% Line 333
			call 'erlang':'band'
			    (Argument1, Argument2)
		    in  %% Line 333
			call 'hipe_icode':'mk_const'
			    (_cor26)
		%% Line 334
		<'bor'> when 'true' ->
		    let <_cor27> =
			%% Line 335
			call 'erlang':'bor'
			    (Argument1, Argument2)
		    in  %% Line 335
			call 'hipe_icode':'mk_const'
			    (_cor27)
		%% Line 336
		<'bsl'> when 'true' ->
		    let <_cor28> =
			%% Line 337
			call 'erlang':'bsl'
			    (Argument1, Argument2)
		    in  %% Line 337
			call 'hipe_icode':'mk_const'
			    (_cor28)
		%% Line 338
		<'bsr'> when 'true' ->
		    let <_cor29> =
			%% Line 339
			call 'erlang':'bsr'
			    (Argument1, Argument2)
		    in  %% Line 339
			call 'hipe_icode':'mk_const'
			    (_cor29)
		%% Line 340
		<'bxor'> when 'true' ->
		    let <_cor30> =
			%% Line 341
			call 'erlang':'bxor'
			    (Argument1, Argument2)
		    in  %% Line 341
			call 'hipe_icode':'mk_const'
			    (_cor30)
		%% Line 342
		<'fp_add'> when 'true' ->
		    let <_cor31> =
			%% Line 343
			call 'erlang':'+'
			    (Argument1, Argument2)
		    in  let <_cor32> =
			    %% Line 343
			    call 'erlang':'float'
				(_cor31)
			in  %% Line 343
			    call 'hipe_icode':'mk_const'
				(_cor32)
		%% Line 344
		<'fp_sub'> when 'true' ->
		    let <_cor33> =
			%% Line 345
			call 'erlang':'-'
			    (Argument1, Argument2)
		    in  let <_cor34> =
			    %% Line 345
			    call 'erlang':'float'
				(_cor33)
			in  %% Line 345
			    call 'hipe_icode':'mk_const'
				(_cor34)
		%% Line 346
		<'fp_mul'> when 'true' ->
		    let <_cor35> =
			%% Line 347
			call 'erlang':'*'
			    (Argument1, Argument2)
		    in  let <_cor36> =
			    %% Line 347
			    call 'erlang':'float'
				(_cor35)
			in  %% Line 347
			    call 'hipe_icode':'mk_const'
				(_cor36)
		%% Line 348
		<'fp_div'> when 'true' ->
		    let <_cor37> =
			%% Line 349
			call 'erlang':'/'
			    (Argument1, Argument2)
		    in  %% Line 349
			call 'hipe_icode':'mk_const'
			    (_cor37)
		%% Line 350
		<'cons'> when 'true' ->
		    %% Line 351
		    call 'hipe_icode':'mk_const'
			([Argument1|Argument2])
		%% Line 352
		<'mktuple'> when 'true' ->
		    let <_cor38> =
			%% Line 353
			call 'erlang':'list_to_tuple'
			    ([Argument1|[Argument2|[]]])
		    in  %% Line 353
			call 'hipe_icode':'mk_const'
			    (_cor38)
		%% Line 354
		<{'unsafe_update_element',N}> when 'true' ->
		    let <_cor39> =
			%% Line 355
			call 'erlang':'setelement'
			    (N, Argument1, Argument2)
		    in  %% Line 355
			call 'hipe_icode':'mk_const'
			    (_cor39)
		%% Line 356
		<{'erlang','++',2}> when 'true' ->
		    let <_cor40> =
			%% Line 357
			call 'erlang':'++'
			    (Argument1, Argument2)
		    in  %% Line 357
			call 'hipe_icode':'mk_const'
			    (_cor40)
		%% Line 358
		<{'erlang','--',2}> when 'true' ->
		    let <_cor41> =
			%% Line 359
			call 'erlang':'--'
			    (Argument1, Argument2)
		    in  %% Line 359
			call 'hipe_icode':'mk_const'
			    (_cor41)
		%% Line 360
		<{'erlang','div',2}> when 'true' ->
		    let <_cor42> =
			%% Line 361
			call 'erlang':'div'
			    (Argument1, Argument2)
		    in  %% Line 361
			call 'hipe_icode':'mk_const'
			    (_cor42)
		%% Line 362
		<{'erlang','rem',2}> when 'true' ->
		    let <_cor43> =
			%% Line 363
			call 'erlang':'rem'
			    (Argument1, Argument2)
		    in  %% Line 363
			call 'hipe_icode':'mk_const'
			    (_cor43)
		%% Line 364
		<{'erlang','append_element',2}> when 'true' ->
		    let <_cor44> =
			%% Line 365
			call 'erlang':'append_element'
			    (Argument1, Argument2)
		    in  %% Line 365
			call 'hipe_icode':'mk_const'
			    (_cor44)
		%% Line 366
		<{'erlang','element',2}> when 'true' ->
		    let <_cor45> =
			%% Line 367
			call 'erlang':'element'
			    (Argument1, Argument2)
		    in  %% Line 367
			call 'hipe_icode':'mk_const'
			    (_cor45)
		%% Line 368
		<_X_Other> when 'true' ->
		    %% Line 370
		    'bottom'
	      end
	  %% Line 374
	  <Arguments,Fun> when 'true' ->
	      %% Line 375
	      case Fun of
		%% Line 376
		<'mktuple'> when 'true' ->
		    let <_cor47> =
			%% Line 377
			call 'erlang':'list_to_tuple'
			    (Arguments)
		    in  %% Line 377
			call 'hipe_icode':'mk_const'
			    (_cor47)
		%% Line 378
		<{'erlang','setelement',3}> when 'true' ->
		    %% Line 379
		    case Arguments of
		      <[Argument1|[Argument2|[Argument3|[]]]]> when 'true' ->
			  let <_cor49> =
			      %% Line 380
			      call 'erlang':'setelement'
				  (Argument1, Argument2, Argument3)
			  in  %% Line 380
			      call 'hipe_icode':'mk_const'
				  (_cor49)
		      ( <_cor48> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor48})
			-| ['compiler_generated'] )
		    end
		%% Line 381
		<_cor54> when 'true' ->
		    %% Line 382
		    'bottom'
	      end
	end
'evaluate_if'/2 =
    %% Line 387
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Conditional,[Argument1|[Argument2|[]]]> when 'true' ->
	      let <_cor3> =
		  %% Line 388
		  call 'erlang':'=:='
		      (Argument1, 'bottom')
	      in  let <_cor2> =
		      %% Line 388
		      call 'erlang':'=:='
			  (Argument2, 'bottom')
		  in  %% Line 388
		      case call 'erlang':'or'
			       (_cor3, _cor2) of
			%% Line 389
			<'true'> when 'true' ->
			    'bottom'
			%% Line 390
			<'false'> when 'true' ->
			    apply 'evaluate_if_const'/3
				(Conditional, Argument1, Argument2)
		      end
	  %% Line 392
	  <_X_Conditional,_X_Arguments> when 'true' ->
	      %% Line 393
	      'bottom'
	end
'evaluate_if_const'/3 =
    %% Line 397
    fun (_cor2,_cor1,_cor0) ->
	%% Line 398
	case _cor2 of
	  %% Line 399
	  <'=:='> when 'true' ->
	      call 'erlang':'=:='
		  (_cor1, _cor0)
	  %% Line 400
	  <'=='> when 'true' ->
	      call 'erlang':'=='
		  (_cor1, _cor0)
	  %% Line 401
	  <'=/='> when 'true' ->
	      call 'erlang':'=/='
		  (_cor1, _cor0)
	  %% Line 402
	  <'/='> when 'true' ->
	      call 'erlang':'/='
		  (_cor1, _cor0)
	  %% Line 403
	  <'<'> when 'true' ->
	      call 'erlang':'<'
		  (_cor1, _cor0)
	  %% Line 404
	  <'>='> when 'true' ->
	      call 'erlang':'>='
		  (_cor1, _cor0)
	  %% Line 405
	  <'=<'> when 'true' ->
	      call 'erlang':'=<'
		  (_cor1, _cor0)
	  %% Line 406
	  <'>'> when 'true' ->
	      call 'erlang':'>'
		  (_cor1, _cor0)
	  %% Line 407
	  <_cor7> when 'true' ->
	      'bottom'
	end
'evaluate_type'/2 =
    %% Line 412
    fun (_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 413
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[X|_cor3]>
				when call 'erlang':'=:='
				      (X,
				       'bottom') ->
				let <_cor5> =
				    apply 'lc$^0'/1
					(_cor3)
				in  ( [X|_cor5]
				      -| ['compiler_generated'] )
			    ( <[X|_cor3]> when 'true' ->
				  apply 'lc$^0'/1
				      (_cor3)
			      -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 413
	    case _cor6 of
	      %% Line 414
	      <[]> when 'true' ->
		  apply 'evaluate_type_const'/2
		      (_cor1, _cor0)
	      %% Line 415
	      <_cor10> when 'true' ->
		  'bottom'
	    end
'evaluate_type_const'/2 =
    %% Line 420
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Type,[Arg|Left]> when 'true' ->
	      let <_cor2> =
		  %% Line 422
		  call 'hipe_icode':'const_value'
		      (Arg)
	      in  let <_cor9> =
		      %% Line 422
		      case <Type,_cor2> of
			%% Line 423
			<'nil',[]> when 'true' ->
			    'true'
			%% Line 424
			<'nil',_cor14> when 'true' ->
			    'false'
			%% Line 425
			<'cons',[_cor15|_cor16]> when 'true' ->
			    'true'
			%% Line 426
			<'cons',_cor17> when 'true' ->
			    'false'
			%% Line 427
			<{'tuple',N},T>
			    when try
				  let <_cor3> =
				      call 'erlang':'tuple_size'
					  (T)
				  in  call 'erlang':'=:='
					  (_cor3, N)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    'true'
			%% Line 428
			<'atom',A>
			    when call 'erlang':'is_atom'
				  (A) ->
			    'true'
			%% Line 429
			<{'atom',A},_cor18>
			    when let <_cor19> =
				  call 'erlang':'=:='
				      (_cor18, A)
			      in  let <_cor20> =
				      call 'erlang':'is_atom'
					  (A)
				  in  call 'erlang':'and'
					  (_cor19, _cor20) ->
			    'true'
			%% Line 430
			<{'record',A,S},R>
			    when try
				  let <_cor4> =
				      call 'erlang':'tuple_size'
					  (R)
				  in  let <_cor5> =
					  call 'erlang':'=:='
					      (_cor4, S)
				      in  let <_cor6> =
					      %% Line 431
					      call 'erlang':'element'
						  (1, R)
					  in  let <_cor7> =
						  %% Line 431
						  call 'erlang':'=:='
						      (_cor6, A)
					      in  call 'erlang':'and'
						      (_cor5, _cor7)
			      of <Try> ->
				  Try
			      catch <T,R> ->
				  'false' ->
			    %% Line 431
			    'true'
			%% Line 432
			<{'record',_cor21,_cor22},_cor23> when 'true' ->
			    'false'
			%% Line 433
			<_fol94,_fol95> when 'true' ->
			    'bottom'
		      end
		  in  %% Line 435
		      case _cor9 of
			%% Line 436
			<'bottom'> when 'true' ->
			    'bottom'
			%% Line 437
			<'false'> when 'true' ->
			    'false'
			%% Line 438
			<'true'> when 'true' ->
			    apply 'evaluate_type_const'/2
				(Type, Left)
			( <_cor11> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor11})
			  -| ['compiler_generated'] )
		      end
	  %% Line 440
	  <_X_Type,[]> when 'true' ->
	      %% Line 441
	      'true'
	  ( <_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12})
		  -| [{'function_name',{'evaluate_type_const',2}}] )
	    -| ['compiler_generated'] )
	end
'update_instruction'/2 =
    %% Line 447
    fun (_cor1,_cor0) ->
	%% Line 448
	case _cor1 of
	  %% Line 449
	  <{'icode_call',_cor5,_cor6,_cor7,_cor8,_cor9,_cor10,_cor11}> when 'true' ->
	      %% Line 450
	      apply 'update_call'/2
		  (_cor1, _cor0)
	  %% Line 451
	  <{'icode_enter',_cor12,_cor13,_cor14}> when 'true' ->
	      %% Line 452
	      apply 'update_enter'/2
		  (_cor1, _cor0)
	  %% Line 453
	  <{'icode_if',_cor15,_cor16,_cor17,_cor18,_cor19}> when 'true' ->
	      %% Line 454
	      apply 'update_if'/2
		  (_cor1, _cor0)
	  %% Line 455
	  <{'icode_move',_cor20,_cor21}> when 'true' ->
	      %% Line 456
	      apply 'update_move'/2
		  (_cor1, _cor0)
	  %% Line 457
	  <{'icode_phi',_cor22,_cor23,_cor24}> when 'true' ->
	      %% Line 458
	      apply 'update_phi'/2
		  (_cor1, _cor0)
	  %% Line 459
	  <{'icode_switch_val',_cor25,_cor26,_cor27,_cor28}> when 'true' ->
	      %% Line 460
	      apply 'update_switch_val'/2
		  (_cor1, _cor0)
	  %% Line 461
	  <{'icode_type',_cor29,_cor30,_cor31,_cor32,_cor33}> when 'true' ->
	      %% Line 462
	      apply 'update_type'/2
		  (_cor1, _cor0)
	  %% Line 463
	  <{'icode_switch_tuple_arity',_cor34,_cor35,_cor36,_cor37}> when 'true' ->
	      %% Line 464
	      apply 'update_switch_tuple_arity'/2
		  (_cor1, _cor0)
	  %% Line 465
	  <_cor38> when 'true' ->
	      %% Line 469
	      [_cor1|[]]
	end
'update_call'/2 =
    %% Line 474
    fun (_cor1,_cor0) ->
	%% Line 476
	case call 'hipe_icode':'call_dstlist'
		 (_cor1) of
	  %% Line 477
	  <[Destination|[]]> when 'true' ->
	      %% Line 478
	      case apply 'lookup_lattice_value'/2
		       (Destination, _cor0) of
		%% Line 479
		<'bottom'> when 'true' ->
		    let <_cor3> =
			%% Line 481
			call 'hipe_icode':'call_args'
			    (_cor1)
		    in  let <NewArguments> =
			    %% Line 480
			    apply 'update_arguments'/2
				(_cor3, _cor0)
			in  let <_cor5> =
				%% Line 483
				call 'hipe_icode':'call_args_update'
				    (_cor1, NewArguments)
			    in  %% Line 483
				[_cor5|[]]
		%% Line 484
		<X> when 'true' ->
		    %% Line 486
		    case apply 'is_call_to_fp_op'/1
			     (_cor1) of
		      %% Line 487
		      <'true'> when 'true' ->
			  let <TmpIns> =
			      %% Line 489
			      call 'hipe_icode':'call_fun_update'
				  (_cor1, 'unsafe_untag_float')
			  in  let <_cor7> =
				  %% Line 490
				  call 'hipe_icode':'call_args_update'
				      (TmpIns, [X|[]])
			      in  %% Line 490
				  [_cor7|[]]
		      %% Line 491
		      <'false'> when 'true' ->
			  %% Line 492
			  case call 'hipe_icode':'call_continuation'
				   (_cor1) of
			    %% Line 493
			    <[]> when 'true' ->
				let <_cor8> =
				    %% Line 494
				    call 'hipe_icode':'mk_move'
					(Destination, X)
				in  %% Line 494
				    [_cor8|[]]
			    %% Line 495
			    <ContinuationLabel> when 'true' ->
				let <_cor9> =
				    %% Line 496
				    call 'hipe_icode':'mk_move'
					(Destination, X)
				in  let <_cor10> =
					%% Line 497
					call 'hipe_icode':'mk_goto'
					    (ContinuationLabel)
				    in  %% Line 496
					[_cor9|%% Line 497
					       [_cor10|[]]]
			  end
		      ( <_cor12> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor12})
			-| ['compiler_generated'] )
		    end
	      end
	  %% Line 510
	  <_cor19> when 'true' ->
	      %% Line 511
	      [_cor1|[]]
	end
'is_call_to_fp_op'/1 =
    %% Line 516
    fun (_cor0) ->
	%% Line 517
	case call 'hipe_icode':'call_fun'
		 (_cor0) of
	  %% Line 518
	  <'fp_add'> when 'true' ->
	      'true'
	  %% Line 519
	  <'fp_sub'> when 'true' ->
	      'true'
	  %% Line 520
	  <'fp_mul'> when 'true' ->
	      'true'
	  %% Line 521
	  <'fp_div'> when 'true' ->
	      'true'
	  %% Line 522
	  <'fnegate'> when 'true' ->
	      'true'
	  %% Line 523
	  <'conv_to_float'> when 'true' ->
	      'true'
	  %% Line 524
	  <'unsafe_untag_float'> when 'true' ->
	      'true'
	  %% Line 525
	  <_cor3> when 'true' ->
	      'false'
	end
'update_enter'/2 =
    %% Line 530
    fun (_cor1,_cor0) ->
	let <Args> =
	    %% Line 531
	    call 'hipe_icode':'enter_args'
		(_cor1)
	in  let <_cor8> =
		%% Line 532
		( letrec
		      'lc$^0'/1 =
			  fun (_cor5) ->
			      case _cor5 of
				<[X|_cor4]> when 'true' ->
				    let <_cor6> =
					apply 'lookup_lattice_value'/2
					    (X, _cor0)
				    in  let <_cor7> =
					    apply 'lc$^0'/1
						(_cor4)
					in  ( [_cor6|_cor7]
					      -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor5> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor5})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (Args)
		  -| ['list_comprehension'] )
	    in  let <Fun> =
		    %% Line 533
		    call 'hipe_icode':'enter_fun'
			(_cor1)
		in  let <_cor13> =
			%% Line 534
			( fun (_cor11) ->
			      call 'erlang':'=:='
				  (_cor11, 'bottom')
			  -| [{'id',{0,0,'-update_enter/2-fun-0-'}}] )
		    in  %% Line 534
			case call 'lists':'any'
				 (_cor13, _cor8) of
			  %% Line 535
			  <'true'> when 'true' ->
			      %% Line 536
			      apply 'update_enter_arguments'/2
				  (_cor1, _cor0)
			  %% Line 537
			  <'false'> when 'true' ->
			      let <_cor19> =
				  %% Line 538
				  ( letrec
					'lc$^1'/1 =
					    fun (_cor16) ->
						case _cor16 of
						  <[X|_cor15]> when 'true' ->
						      let <_cor17> =
							  call 'hipe_icode':'const_value'
							      (X)
						      in  let <_cor18> =
							      apply 'lc$^1'/1
								  (_cor15)
							  in  ( [_cor17|_cor18]
								-| ['compiler_generated'] )
						  <[]> when 'true' ->
						      []
						  ( <_cor16> when 'true' ->
							( primop 'match_fail'
							      ({'function_clause',_cor16})
							  -| [{'function_name',{'lc$^1',1}}] )
						    -| ['compiler_generated'] )
						end
				    in  apply 'lc$^1'/1
					    (_cor8)
				    -| ['list_comprehension'] )
			      in  %% Line 539
				  try
				      apply 'evaluate_call_or_enter'/2
					  (_cor19, Fun)
				  of <_cor21> ->
				      case _cor21 of
					%% Line 540
					<'bottom'> when 'true' ->
					    %% Line 541
					    apply 'update_enter_arguments'/2
						(_cor1, _cor0)
					%% Line 542
					<Const> when 'true' ->
					    let <Dst> =
						%% Line 543
						call 'hipe_icode':'mk_new_var'
						    ()
					    in  let <_cor23> =
						    %% Line 544
						    call 'hipe_icode':'mk_move'
							(Dst, Const)
						in  let <_cor24> =
							%% Line 545
							call 'hipe_icode':'mk_return'
							    ([Dst|[]])
						    in  %% Line 544
							[_cor23|%% Line 545
								[_cor24|[]]]
				      end
				  catch <_cor28,_cor27,_cor26> ->
				      %% Line 548
				      apply 'update_enter_arguments'/2
					  (_cor1, _cor0)
			  ( <_cor29> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor29})
			    -| ['compiler_generated'] )
			end
'update_enter_arguments'/2 =
    %% Line 552
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 553
	    call 'hipe_icode':'enter_args'
		(_cor1)
	in  let <NewArguments> =
		%% Line 553
		apply 'update_arguments'/2
		    (_cor2, _cor0)
	    in  let <_cor4> =
		    %% Line 554
		    call 'hipe_icode':'enter_args_update'
			(_cor1, NewArguments)
		in  %% Line 554
		    [_cor4|[]]
'update_if'/2 =
    %% Line 558
    fun (_cor1,_cor0) ->
	let <Args> =
	    %% Line 559
	    call 'hipe_icode':'if_args'
		(_cor1)
	in  let <_cor8> =
		%% Line 560
		( letrec
		      'lc$^0'/1 =
			  fun (_cor5) ->
			      case _cor5 of
				<[%% Line 561
				  Argument|_cor4]> when 'true' ->
				    let <_cor6> =
					apply 'lookup_lattice_value'/2
					    (Argument, _cor0)
				    in  let <_cor7> =
					    %% Line 561
					    apply 'lc$^0'/1
						(_cor4)
					in  ( [_cor6|_cor7]
					      -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor5> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor5})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (%% Line 561
			   Args)
		  -| ['list_comprehension'] )
	    in  let <Op> =
		    %% Line 562
		    call 'hipe_icode':'if_op'
			(_cor1)
		in  %% Line 563
		    case apply 'evaluate_if'/2
			     (Op, _cor8) of
		      %% Line 564
		      <'true'> when 'true' ->
			  let <TrueLabel> =
			      %% Line 565
			      call 'hipe_icode':'if_true_label'
				  (_cor1)
			  in  let <_cor12> =
				  %% Line 567
				  call 'hipe_icode':'mk_goto'
				      (TrueLabel)
			      in  %% Line 567
				  [_cor12|[]]
		      %% Line 568
		      <'false'> when 'true' ->
			  let <FalseLabel> =
			      %% Line 569
			      call 'hipe_icode':'if_false_label'
				  (_cor1)
			  in  let <_cor14> =
				  %% Line 571
				  call 'hipe_icode':'mk_goto'
				      (FalseLabel)
			      in  %% Line 571
				  [_cor14|[]]
		      %% Line 572
		      <'bottom'> when 'true' ->
			  %% Line 574
			  case call 'hipe_icode':'if_op'
				   (_cor1) of
			    <_cor27>
				when call 'erlang':'=:='
				      (_cor27,
				       Op) ->
				let <_cor18> =
				    %% Line 575
				    ( case <> of
					( <>
					      when call 'erlang':'=:='
						    (Op,
						     '=:=') ->
					      'true'
					  -| ['compiler_generated'] )
					( <> when 'true' ->
					      call 'erlang':'=:='
						  (Op, '=/=')
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				in  %% Line 575
				    case _cor18 of
				      %% Line 576
				      <'false'> when 'true' ->
					  [_cor1|[]]
				      %% Line 577
				      <'true'> when 'true' ->
					  %% Line 578
					  case Args of
					    <[Arg1|[Arg2|[]]]> when 'true' ->
						%% Line 579
						case _cor8 of
						  %% Line 580
						  <['bottom'|['bottom']]> when 'true' ->
						      %% Line 581
						      [_cor1|[]]
						  %% Line 582
						  <['bottom'|[X|[]]]> when 'true' ->
						      let <_cor20> =
							  %% Line 583
							  call 'hipe_icode':'const_value'
							      (X)
						      in  %% Line 583
							  apply 'conv_if_to_type'/3
							      (_cor1, _cor20, Arg1)
						  %% Line 584
						  <[X|['bottom']]> when 'true' ->
						      let <_cor21> =
							  %% Line 585
							  call 'hipe_icode':'const_value'
							      (X)
						      in  %% Line 585
							  apply 'conv_if_to_type'/3
							      (_cor1, _cor21, Arg2)
						  ( <_cor22> when 'true' ->
							primop 'match_fail'
							    ({'case_clause',_cor22})
						    -| ['compiler_generated'] )
						end
					    ( <_cor19> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor19})
					      -| ['compiler_generated'] )
					  end
				      ( <_cor23> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor23})
					-| ['compiler_generated'] )
				    end
			    ( <_cor15> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor15})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor24> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor24})
			-| ['compiler_generated'] )
		    end
'conv_if_to_type'/3 =
    %% Line 590
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <I,Const,Arg>
	      when let <_cor3> =
		    call 'erlang':'is_atom'
			(Const)
		in  let <_cor4> =
			%% Line 591
			call 'erlang':'is_integer'
			    (Const)
		    in  let <_cor5> =
			    %% Line 592
			    call 'erlang':'=:='
				(Const, [])
			in  let <_cor6> =
				%% Line 591
				call 'erlang':'or'
				    (_cor4, _cor5)
			    in  call 'erlang':'or'
				    (_cor3, _cor6) ->
	      let <_cor7> =
		  %% Line 594
		  case <> of
		    <>
			when call 'erlang':'is_atom'
			      (Const) ->
			{'atom',Const}
		    %% Line 595
		    <>
			when call 'erlang':'is_integer'
			      (Const) ->
			{'integer',Const}
		    %% Line 596
		    <> when 'true' ->
			'nil'
		  end
	      in  let <T,F> =
		      %% Line 599
		      case call 'hipe_icode':'if_op'
			       (I) of
			%% Line 600
			<'=:='> when 'true' ->
			    let <_cor10> =
				call 'hipe_icode':'if_true_label'
				    (I)
			    in  let <_cor9> =
				    call 'hipe_icode':'if_false_label'
					(I)
				in  <_cor10,_cor9>
			%% Line 601
			<'=/='> when 'true' ->
			    let <_cor12> =
				call 'hipe_icode':'if_false_label'
				    (I)
			    in  let <_cor11> =
				    call 'hipe_icode':'if_true_label'
					(I)
				in  <_cor12,_cor11>
			( <_cor13> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor13})
			  -| ['compiler_generated'] )
		      end
		  in  let <NewI> =
			  %% Line 603
			  call 'hipe_icode':'mk_type'
			      ([Arg|[]], _cor7, T, F)
		      in  %% Line 605
			  [NewI|[]]
	  %% Line 606
	  <I,_cor20,_cor21> when 'true' ->
	      %% Line 607
	      [I|[]]
	end
'update_move'/2 =
    %% Line 611
    fun (_cor1,_cor0) ->
	let <Destination> =
	    %% Line 612
	    call 'hipe_icode':'move_dst'
		(_cor1)
	in  %% Line 613
	    case apply 'lookup_lattice_value'/2
		     (Destination, _cor0) of
	      %% Line 614
	      <'bottom'> when 'true' ->
		  %% Line 615
		  [_cor1|[]]
	      %% Line 616
	      <X> when 'true' ->
		  %% Line 617
		  case call 'hipe_icode':'move_src'
			   (_cor1) of
		    %% Line 618
		    <_cor8>
			when call 'erlang':'=:='
			      (_cor8,
			       X) ->
			%% Line 619
			[_cor1|[]]
		    %% Line 620
		    <_cor9> when 'true' ->
			let <_cor3> =
			    %% Line 622
			    call 'hipe_icode':'move_src_update'
				(_cor1, X)
			in  %% Line 622
			    [_cor3|[]]
		  end
	    end
'update_phi'/2 =
    %% Line 629
    fun (_cor1,_cor0) ->
	let <Destination> =
	    %% Line 630
	    call 'hipe_icode':'phi_dst'
		(_cor1)
	in  %% Line 631
	    case apply 'lookup_lattice_value'/2
		     (Destination, _cor0) of
	      %% Line 632
	      <'bottom'> when 'true' ->
		  %% Line 633
		  [_cor1|[]]
	      %% Line 634
	      <X> when 'true' ->
		  let <_cor3> =
		      %% Line 636
		      call 'hipe_icode':'mk_move'
			  (Destination, X)
		  in  %% Line 636
		      [_cor3|[]]
	    end
'update_type'/2 =
    %% Line 641
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 642
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor5) ->
			  case _cor5 of
			    <[%% Line 643
			      Argument|_cor3]> when 'true' ->
				let <_cor6> =
				    apply 'lookup_lattice_value'/2
					(Argument, _cor0)
				in  let <_cor7> =
					%% Line 643
					apply 'lc$^0'/1
					    (_cor3)
				    in  ( [_cor6|_cor7]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor5> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor5})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  let <_cor4> =
		      %% Line 643
		      call 'hipe_icode':'type_args'
			  (_cor1)
		  in  apply 'lc$^0'/1
			  (_cor4)
	      -| ['list_comprehension'] )
	in  let <_cor10> =
		%% Line 644
		call 'hipe_icode':'type_test'
		    (_cor1)
	    in  %% Line 644
		case apply 'evaluate_type'/2
			 (_cor10, _cor8) of
		  %% Line 645
		  <'true'> when 'true' ->
		      let <TrueLabel> =
			  %% Line 646
			  call 'hipe_icode':'type_true_label'
			      (_cor1)
		      in  let <_cor12> =
			      %% Line 648
			      call 'hipe_icode':'mk_goto'
				  (TrueLabel)
			  in  %% Line 648
			      [_cor12|[]]
		  %% Line 649
		  <'false'> when 'true' ->
		      let <FalseLabel> =
			  %% Line 650
			  call 'hipe_icode':'type_false_label'
			      (_cor1)
		      in  let <_cor14> =
			      %% Line 652
			      call 'hipe_icode':'mk_goto'
				  (FalseLabel)
			  in  %% Line 652
			      [_cor14|[]]
		  %% Line 653
		  <'bottom'> when 'true' ->
		      %% Line 654
		      [_cor1|[]]
		  ( <_cor15> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor15})
		    -| ['compiler_generated'] )
		end
'update_switch_val'/2 =
    %% Line 659
    fun (_cor1,_cor0) ->
	let <Argument> =
	    %% Line 660
	    call 'hipe_icode':'switch_val_term'
		(_cor1)
	in  let <Value> =
		%% Line 661
		apply 'lookup_lattice_value'/2
		    (Argument, _cor0)
	    in  %% Line 662
		case Value of
		  %% Line 663
		  <'bottom'> when 'true' ->
		      %% Line 664
		      [_cor1|[]]
		  %% Line 665
		  <_cor11> when 'true' ->
		      let <Cases> =
			  %% Line 666
			  call 'hipe_icode':'switch_val_cases'
			      (_cor1)
		      in  let <FailLabel> =
			      %% Line 667
			      call 'hipe_icode':'switch_val_fail_label'
				  (_cor1)
			  in  let <Target> =
				  %% Line 668
				  apply 'get_switch_target'/3
				      (Cases, Value, FailLabel)
			      in  let <_cor7> =
				      %% Line 670
				      call 'hipe_icode':'mk_goto'
					  (Target)
				  in  %% Line 670
				      [_cor7|[]]
		end
'update_switch_tuple_arity'/2 =
    %% Line 675
    fun (_cor1,_cor0) ->
	let <Argument> =
	    %% Line 676
	    call 'hipe_icode':'switch_tuple_arity_term'
		(_cor1)
	in  %% Line 678
	    case apply 'lookup_lattice_value'/2
		     (Argument, _cor0) of
	      %% Line 679
	      <'bottom'> when 'true' ->
		  %% Line 680
		  [_cor1|[]]
	      %% Line 681
	      <Constant> when 'true' ->
		  let <UnTagged> =
		      %% Line 682
		      call 'hipe_icode':'const_value'
			  (Constant)
		  in  %% Line 683
		      case <> of
			%% Line 684
			<>
			    when call 'erlang':'is_tuple'
				  (UnTagged) ->
			    let <Cases> =
				%% Line 685
				call 'hipe_icode':'switch_tuple_arity_cases'
				    (_cor1)
			    in  let <FailLabel> =
				    %% Line 686
				    call 'hipe_icode':'switch_tuple_arity_fail_label'
					(_cor1)
				in  let <_cor7> =
					%% Line 687
					call 'erlang':'tuple_size'
					    (UnTagged)
				    in  let <Target> =
					    %% Line 687
					    apply 'get_switch_target'/3
						(Cases, _cor7, FailLabel)
					in  let <_cor9> =
						%% Line 689
						call 'hipe_icode':'mk_goto'
						    (Target)
					    in  %% Line 689
						[_cor9|[]]
			%% Line 690
			<> when 'true' ->
			    %% Line 691
			    [_cor1|[]]
		      end
	    end
'lookup_lattice_value'/2 =
    %% Line 700
    fun (_cor1,_cor0) ->
	let <LatticeValues> =
	    %% Line 701
	    apply 'env__lattice_values'/1
		(_cor0)
	in  %% Line 702
	    case call 'hipe_icode':'is_const'
		     (_cor1) of
	      %% Line 703
	      <'true'> when 'true' ->
		  _cor1
	      %% Line 705
	      <'false'> when 'true' ->
		  %% Line 706
		  case call 'gb_trees':'lookup'
			   (_cor1, LatticeValues) of
		    %% Line 707
		    <'none'> when 'true' ->
			do  %% Line 708
			    call 'io':'format'
				([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[87|[97|[114|[110|[105|[110|[103|[58|[32|[91|[126|[115|[58|[126|[119|[93|[58|[32|[69|[97|[114|[108|[105|[101|[114|[32|[99|[111|[109|[112|[105|[108|[101|[114|[32|[115|[116|[101|[112|[115|[32|[103|[101|[110|[101|[114|[97|[116|[101|[100|[32|[101|[114|[114|[111|[110|[101|[111|[117|[115|[32|[99|[111|[100|[101|[32|[102|[111|[114|[32|[88|[32|[61|[32|[126|[119|[46|[32|[87|[101|[32|[97|[114|[101|[32|[105|[103|[110|[111|[114|[105|[110|[103|[32|[116|[104|[105|[115|[46|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 709
																																																																																					  ['hipe_icode_ssa_const_prop'|[709|[_cor1|[]]]])
			    %% Line 710
			    'bottom'
		    %% Line 711
		    <{'value','top'}> when 'true' ->
			do  %% Line 712
			    call 'io':'format'
				([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[88|[73|[84|[69|[68|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[64|[126|[119|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [{[108|[111|[111|[107|[117|[112|[95|[108|[97|[116|[116|[105|[99|[101|[95|[118|[97|[108|[117|[101|[44|[32|[116|[111|[112]]]]]]]]]]]]]]]]]]]]]]]]],_cor1}|['hipe_icode_ssa_const_prop'|[712]]])
			    %% Line 712
			    call 'erlang':'error'
				({'hipe_icode_ssa_const_prop',712,{[108|[111|[111|[107|[117|[112|[95|[108|[97|[116|[116|[105|[99|[101|[95|[118|[97|[108|[117|[101|[44|[32|[116|[111|[112]]]]]]]]]]]]]]]]]]]]]]]]],_cor1}})
		    %% Line 713
		    <{'value',Y}> when 'true' ->
			%% Line 714
			Y
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor10})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor11> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor11})
		-| ['compiler_generated'] )
	    end
'update_arguments'/2 =
    %% Line 720
    fun (_cor1,_cor0) ->
	%% Line 721
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[%% Line 726
			  X|_cor3]> when 'true' ->
			    let <_cor6> =
				case apply 'lookup_lattice_value'/2
					 (X, _cor0) of
				  %% Line 722
				  <'bottom'> when 'true' ->
				      %% Line 723
				      X
				  %% Line 724
				  <Constant> when 'true' ->
				      %% Line 725
				      Constant
				end
			    in  let <_cor7> =
				    %% Line 726
				    apply 'lc$^0'/1
					(_cor3)
				in  ( [_cor6|_cor7]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor1)
	  -| ['list_comprehension'] )
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_icode_ssa_const_prop')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_icode_ssa_const_prop', _cor0)
end