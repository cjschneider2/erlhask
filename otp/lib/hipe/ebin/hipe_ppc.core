module 'hipe_ppc' ['cmpiop_word'/0,
		   'cmpliop_word'/0,
		   'cmplop_word'/0,
		   'cmpop_word'/0,
		   'defun_code'/1,
		   'defun_data'/1,
		   'defun_formals'/1,
		   'defun_is_closure'/1,
		   'defun_is_leaf'/1,
		   'defun_mfa'/1,
		   'defun_var_range'/1,
		   'is_label'/1,
		   'is_prim'/1,
		   'is_pseudo_fmove'/1,
		   'is_pseudo_move'/1,
		   'is_temp'/1,
		   'label_label'/1,
		   'ldop_to_ldxop'/1,
		   'ldop_word'/0,
		   'ldop_wordx'/0,
		   'mk_addi'/4,
		   'mk_alu'/4,
		   'mk_b_fun'/2,
		   'mk_b_label'/1,
		   'mk_bc'/3,
		   'mk_bctr'/1,
		   'mk_bctrl'/1,
		   'mk_bl'/3,
		   'mk_blr'/0,
		   'mk_cmp'/3,
		   'mk_comment'/1,
		   'mk_defun'/8,
		   'mk_fload'/4,
		   'mk_fp_binary'/4,
		   'mk_fp_unary'/3,
		   'mk_fstore'/4,
		   'mk_label'/1,
		   'mk_lfd'/3,
		   'mk_lfdx'/3,
		   'mk_li'/2,
		   'mk_li'/3,
		   'mk_load'/4,
		   'mk_load'/6,
		   'mk_loadx'/4,
		   'mk_mfa'/3,
		   'mk_mfspr'/2,
		   'mk_mtcr'/1,
		   'mk_mtspr'/2,
		   'mk_new_nonallocatable_temp'/1,
		   'mk_new_temp'/1,
		   'mk_prim'/1,
		   'mk_pseudo_bc'/4,
		   'mk_pseudo_call'/4,
		   'mk_pseudo_call_prepare'/1,
		   'mk_pseudo_fmove'/2,
		   'mk_pseudo_li'/2,
		   'mk_pseudo_move'/2,
		   'mk_pseudo_tailcall'/4,
		   'mk_pseudo_tailcall_prepare'/0,
		   'mk_sdesc'/4,
		   'mk_simm16'/1,
		   'mk_stfdx'/3,
		   'mk_store'/4,
		   'mk_store'/6,
		   'mk_storex'/4,
		   'mk_temp'/2,
		   'mk_uimm16'/1,
		   'mk_unary'/3,
		   'module_info'/0,
		   'module_info'/1,
		   'negate_bcond'/1,
		   'prim_prim'/1,
		   'pseudo_call_contlab'/1,
		   'pseudo_call_func'/1,
		   'pseudo_call_linkage'/1,
		   'pseudo_call_prepare_nrstkargs'/1,
		   'pseudo_call_sdesc'/1,
		   'pseudo_fmove_dst'/1,
		   'pseudo_fmove_src'/1,
		   'pseudo_move_dst'/1,
		   'pseudo_move_src'/1,
		   'pseudo_tailcall_func'/1,
		   'pseudo_tailcall_linkage'/1,
		   'pseudo_tailcall_stkargs'/1,
		   'stop_to_stxop'/1,
		   'stop_word'/0,
		   'stop_wordx'/0,
		   'temp_is_allocatable'/1,
		   'temp_is_precoloured'/1,
		   'temp_reg'/1,
		   'temp_type'/1]
    attributes [%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','ppc_mfa'},[{'typed_record_field',{'record_field',39,{'atom',39,'m'}},{'type',39,'union',[{'atom',39,'undefined'}|[{'type',39,'atom',[]}]]}}|[{'typed_record_field',{'record_field',39,{'atom',39,'f'}},{'type',39,'union',[{'atom',39,'undefined'}|[{'type',39,'atom',[]}]]}}|[{'typed_record_field',{'record_field',39,{'atom',39,'a'}},{'type',39,'union',[{'atom',39,'undefined'}|[{'type',39,'arity',[]}]]}}]]],[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{{'record','ppc_prim'},[{'record_field',40,{'atom',40,'prim'}}],[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','ppc_sdesc'},[{'record_field',41,{'atom',41,'exnlab'}}|[{'record_field',41,{'atom',41,'fsize'}}|[{'typed_record_field',{'record_field',41,{'atom',41,'arity'}},{'type',41,'union',[{'atom',41,'undefined'}|[{'type',41,'arity',[]}]]}}|[{'record_field',41,{'atom',41,'live'}}]]]],[]}],
		%% Line 42
		'type' =
		    %% Line 42
		    [{{'record','ppc_simm16'},[{'record_field',42,{'atom',42,'value'}}],[]}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{{'record','ppc_temp'},[{'record_field',43,{'atom',43,'reg'}}|[{'record_field',43,{'atom',43,'type'}}|[{'record_field',43,{'atom',43,'allocatable'}}]]],[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','ppc_uimm16'},[{'record_field',44,{'atom',44,'value'}}],[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{{'record','alu'},[{'record_field',76,{'atom',76,'aluop'}}|[{'record_field',76,{'atom',76,'dst'}}|[{'record_field',76,{'atom',76,'src1'}}|[{'record_field',76,{'atom',76,'src2'}}]]]],[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{{'record','b_fun'},[{'record_field',77,{'atom',77,'fun'}}|[{'record_field',77,{'atom',77,'linkage'}}]],[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{{'record','b_label'},[{'record_field',78,{'atom',78,'label'}}],[]}],
		%% Line 79
		'type' =
		    %% Line 79
		    [{{'record','bc'},[{'record_field',79,{'atom',79,'bcond'}}|[{'record_field',79,{'atom',79,'label'}}|[{'record_field',79,{'atom',79,'pred'}}]]],[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{{'record','bctr'},[{'record_field',80,{'atom',80,'labels'}}],[]}],
		%% Line 81
		'type' =
		    %% Line 81
		    [{{'record','bctrl'},[{'record_field',81,{'atom',81,'sdesc'}}],[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{{'record','bl'},[{'record_field',82,{'atom',82,'fun'}}|[{'record_field',82,{'atom',82,'sdesc'}}|[{'record_field',82,{'atom',82,'linkage'}}]]],[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{{'record','blr'},[],[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{{'record','cmp'},[{'record_field',84,{'atom',84,'cmpop'}}|[{'record_field',84,{'atom',84,'src1'}}|[{'record_field',84,{'atom',84,'src2'}}]]],[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','comment'},[{'record_field',85,{'atom',85,'term'}}],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{{'record','label'},[{'record_field',86,{'atom',86,'label'}}],[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{{'record','load'},[{'record_field',87,{'atom',87,'ldop'}}|[{'record_field',87,{'atom',87,'dst'}}|[{'record_field',87,{'atom',87,'disp'}}|[{'record_field',87,{'atom',87,'base'}}]]]],[]}],
		%% Line 88
		'type' =
		    %% Line 88
		    [{{'record','loadx'},[{'record_field',88,{'atom',88,'ldxop'}}|[{'record_field',88,{'atom',88,'dst'}}|[{'record_field',88,{'atom',88,'base1'}}|[{'record_field',88,{'atom',88,'base2'}}]]]],[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','mfspr'},[{'record_field',89,{'atom',89,'dst'}}|[{'record_field',89,{'atom',89,'spr'}}]],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{{'record','mtcr'},[{'record_field',90,{'atom',90,'src'}}],[]}],
		%% Line 91
		'type' =
		    %% Line 91
		    [{{'record','mtspr'},[{'record_field',91,{'atom',91,'spr'}}|[{'record_field',91,{'atom',91,'src'}}]],[]}],
		%% Line 92
		'type' =
		    %% Line 92
		    [{{'record','pseudo_bc'},[{'record_field',92,{'atom',92,'bcond'}}|[{'record_field',92,{'atom',92,'true_label'}}|[{'record_field',92,{'atom',92,'false_label'}}|[{'record_field',92,{'atom',92,'pred'}}]]]],[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','pseudo_call'},[{'record_field',93,{'atom',93,'func'}}|[{'record_field',93,{'atom',93,'sdesc'}}|[{'record_field',93,{'atom',93,'contlab'}}|[{'record_field',93,{'atom',93,'linkage'}}]]]],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{{'record','pseudo_call_prepare'},[{'record_field',94,{'atom',94,'nrstkargs'}}],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','pseudo_li'},[{'record_field',95,{'atom',95,'dst'}}|[{'record_field',95,{'atom',95,'imm'}}]],[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{{'record','pseudo_move'},[{'record_field',96,{'atom',96,'dst'}}|[{'record_field',96,{'atom',96,'src'}}]],[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','pseudo_tailcall'},[{'record_field',97,{'atom',97,'func'}}|[{'record_field',97,{'atom',97,'arity'}}|[{'record_field',97,{'atom',97,'stkargs'}}|[{'record_field',97,{'atom',97,'linkage'}}]]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','pseudo_tailcall_prepare'},[],[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{{'record','store'},[{'record_field',99,{'atom',99,'stop'}}|[{'record_field',99,{'atom',99,'src'}}|[{'record_field',99,{'atom',99,'disp'}}|[{'record_field',99,{'atom',99,'base'}}]]]],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{{'record','storex'},[{'record_field',100,{'atom',100,'stxop'}}|[{'record_field',100,{'atom',100,'src'}}|[{'record_field',100,{'atom',100,'base1'}}|[{'record_field',100,{'atom',100,'base2'}}]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','unary'},[{'record_field',101,{'atom',101,'unop'}}|[{'record_field',101,{'atom',101,'dst'}}|[{'record_field',101,{'atom',101,'src'}}]]],[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{{'record','lfd'},[{'record_field',102,{'atom',102,'dst'}}|[{'record_field',102,{'atom',102,'disp'}}|[{'record_field',102,{'atom',102,'base'}}]]],[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','lfdx'},[{'record_field',103,{'atom',103,'dst'}}|[{'record_field',103,{'atom',103,'base1'}}|[{'record_field',103,{'atom',103,'base2'}}]]],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{{'record','stfd'},[{'record_field',104,{'atom',104,'src'}}|[{'record_field',104,{'atom',104,'disp'}}|[{'record_field',104,{'atom',104,'base'}}]]],[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{{'record','stfdx'},[{'record_field',105,{'atom',105,'src'}}|[{'record_field',105,{'atom',105,'base1'}}|[{'record_field',105,{'atom',105,'base2'}}]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','fp_binary'},[{'record_field',106,{'atom',106,'fp_binop'}}|[{'record_field',106,{'atom',106,'dst'}}|[{'record_field',106,{'atom',106,'src1'}}|[{'record_field',106,{'atom',106,'src2'}}]]]],[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{{'record','fp_unary'},[{'record_field',107,{'atom',107,'fp_unop'}}|[{'record_field',107,{'atom',107,'dst'}}|[{'record_field',107,{'atom',107,'src'}}]]],[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{{'record','pseudo_fmove'},[{'record_field',108,{'atom',108,'dst'}}|[{'record_field',108,{'atom',108,'src'}}]],[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 114
		'type' =
		    %% Line 114
		    [{{'record','defun'},[{'typed_record_field',{'record_field',114,{'atom',114,'mfa'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'mfa',[]}]]}}|[{'record_field',114,{'atom',114,'formals'}}|[{'record_field',114,{'atom',114,'code'}}|[{'typed_record_field',{'record_field',115,{'atom',115,'data'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'isclosure'}},{'type',116,'union',[{'atom',116,'undefined'}|[{'type',116,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',117,{'atom',117,'isleaf'}},{'type',117,'union',[{'atom',117,'undefined'}|[{'type',117,'boolean',[]}]]}}|[{'record_field',118,{'atom',118,'var_range'}}|[{'record_field',118,{'atom',118,'label_range'}}]]]]]]]],[]}]]
'mk_temp'/3 =
    %% Line 152
    fun (_cor2,_cor1,_cor0) ->
	%% Line 153
	{'ppc_temp',_cor2,_cor1,_cor0}
'mk_temp'/2 =
    %% Line 154
    fun (_cor1,_cor0) ->
	apply 'mk_temp'/3
	    (_cor1, _cor0, 'true')
'mk_new_temp'/2 =
    %% Line 155
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 156
	    call 'hipe_gensym':'get_next_var'
		('ppc')
	in  %% Line 156
	    apply 'mk_temp'/3
		(_cor2, _cor1, _cor0)
'mk_new_temp'/1 =
    %% Line 157
    fun (_cor0) ->
	apply 'mk_new_temp'/2
	    (_cor0, 'true')
'mk_new_nonallocatable_temp'/1 =
    %% Line 158
    fun (_cor0) ->
	apply 'mk_new_temp'/2
	    (_cor0, 'false')
'is_temp'/1 =
    %% Line 159
    fun (_cor0) ->
	case _cor0 of
	  <{'ppc_temp',_cor3,_cor4,_cor5}> when 'true' ->
	      'true'
	  <_cor6> when 'true' ->
	      'false'
	end
'temp_reg'/1 =
    %% Line 160
    fun (_cor0) ->
	case _cor0 of
	  <{'ppc_temp',Reg,_cor2,_cor3}> when 'true' ->
	      Reg
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'temp_reg',1}}] )
	    -| ['compiler_generated'] )
	end
'temp_type'/1 =
    %% Line 161
    fun (_cor0) ->
	case _cor0 of
	  <{'ppc_temp',_cor2,Type,_cor3}> when 'true' ->
	      Type
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'temp_type',1}}] )
	    -| ['compiler_generated'] )
	end
'temp_is_allocatable'/1 =
    %% Line 162
    fun (_cor0) ->
	case _cor0 of
	  <{'ppc_temp',_cor2,_cor3,A}> when 'true' ->
	      A
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'temp_is_allocatable',1}}] )
	    -| ['compiler_generated'] )
	end
'temp_is_precoloured'/1 =
    %% Line 163
    fun (_cor0) ->
	case _cor0 of
	  <{'ppc_temp',Reg,Type,_cor3}> when 'true' ->
	      %% Line 164
	      case Type of
		%% Line 165
		<'double'> when 'true' ->
		    call 'hipe_ppc_registers':'is_precoloured_fpr'
			(Reg)
		%% Line 166
		<_cor4> when 'true' ->
		    call 'hipe_ppc_registers':'is_precoloured_gpr'
			(Reg)
	      end
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'temp_is_precoloured',1}}] )
	    -| ['compiler_generated'] )
	end
'mk_simm16'/1 =
    %% Line 169
    fun (_cor0) ->
	{'ppc_simm16',_cor0}
'mk_uimm16'/1 =
    %% Line 170
    fun (_cor0) ->
	{'ppc_uimm16',_cor0}
'mk_mfa'/3 =
    %% Line 172
    fun (_cor2,_cor1,_cor0) ->
	{'ppc_mfa',_cor2,_cor1,_cor0}
'mk_prim'/1 =
    %% Line 174
    fun (_cor0) ->
	{'ppc_prim',_cor0}
'is_prim'/1 =
    %% Line 175
    fun (_cor0) ->
	case _cor0 of
	  <{'ppc_prim',_cor3}> when 'true' ->
	      'true'
	  <_cor4> when 'true' ->
	      'false'
	end
'prim_prim'/1 =
    %% Line 176
    fun (_cor0) ->
	case _cor0 of
	  <{'ppc_prim',Prim}> when 'true' ->
	      Prim
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'prim_prim',1}}] )
	    -| ['compiler_generated'] )
	end
'mk_sdesc'/4 =
    %% Line 178
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 179
	{'ppc_sdesc',_cor3,_cor2,_cor1,_cor0}
'mk_alu'/4 =
    %% Line 181
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 182
	{'alu',_cor3,_cor2,_cor1,_cor0}
'mk_b_fun'/2 =
    %% Line 184
    fun (_cor1,_cor0) ->
	{'b_fun',_cor1,_cor0}
'mk_b_label'/1 =
    %% Line 186
    fun (_cor0) ->
	{'b_label',_cor0}
'mk_bc'/3 =
    %% Line 188
    fun (_cor2,_cor1,_cor0) ->
	{'bc',_cor2,_cor1,_cor0}
'mk_bctr'/1 =
    %% Line 190
    fun (_cor0) ->
	{'bctr',_cor0}
'mk_bctrl'/1 =
    %% Line 192
    fun (_cor0) ->
	{'bctrl',_cor0}
'mk_bl'/3 =
    %% Line 194
    fun (_cor2,_cor1,_cor0) ->
	{'bl',_cor2,_cor1,_cor0}
'mk_blr'/0 =
    %% Line 196
    fun () ->
	{'blr'}
'mk_cmp'/3 =
    %% Line 198
    fun (_cor2,_cor1,_cor0) ->
	{'cmp',_cor2,_cor1,_cor0}
'cmpop_word'/0 =
    %% Line 200
    fun () ->
	%% Line 201
	case call 'erlang':'get'
		 ('hipe_target_arch') of
	  %% Line 202
	  <'powerpc'> when 'true' ->
	      'cmp'
	  %% Line 203
	  <'ppc64'> when 'true' ->
	      'cmpd'
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor0})
	    -| ['compiler_generated'] )
	end
'cmpiop_word'/0 =
    %% Line 206
    fun () ->
	%% Line 207
	case call 'erlang':'get'
		 ('hipe_target_arch') of
	  %% Line 208
	  <'powerpc'> when 'true' ->
	      'cmpi'
	  %% Line 209
	  <'ppc64'> when 'true' ->
	      'cmpdi'
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor0})
	    -| ['compiler_generated'] )
	end
'cmplop_word'/0 =
    %% Line 212
    fun () ->
	%% Line 213
	case call 'erlang':'get'
		 ('hipe_target_arch') of
	  %% Line 214
	  <'powerpc'> when 'true' ->
	      'cmpl'
	  %% Line 215
	  <'ppc64'> when 'true' ->
	      'cmpld'
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor0})
	    -| ['compiler_generated'] )
	end
'cmpliop_word'/0 =
    %% Line 218
    fun () ->
	%% Line 219
	case call 'erlang':'get'
		 ('hipe_target_arch') of
	  %% Line 220
	  <'powerpc'> when 'true' ->
	      'cmpli'
	  %% Line 221
	  <'ppc64'> when 'true' ->
	      'cmpldi'
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor0})
	    -| ['compiler_generated'] )
	end
'mk_comment'/1 =
    %% Line 225
    fun (_cor0) ->
	{'comment',_cor0}
'mk_label'/1 =
    %% Line 227
    fun (_cor0) ->
	{'label',_cor0}
'is_label'/1 =
    %% Line 228
    fun (_cor0) ->
	case _cor0 of
	  <{'label',_cor3}> when 'true' ->
	      'true'
	  <_cor4> when 'true' ->
	      'false'
	end
'label_label'/1 =
    %% Line 229
    fun (_cor0) ->
	case _cor0 of
	  <{'label',Label}> when 'true' ->
	      Label
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'label_label',1}}] )
	    -| ['compiler_generated'] )
	end
'mk_li'/2 =
    %% Line 232
    fun (_cor1,_cor0) ->
	apply 'mk_li'/3
	    (_cor1, _cor0, [])
'mk_li'/3 =
    %% Line 234
    fun (_cor2,_cor1,_cor0) ->
	let <R0> =
	    %% Line 235
	    apply 'mk_temp'/2
		(0, 'untagged')
	in  %% Line 238
	    case <> of
	      <>
		  when let <_cor5> =
			call 'erlang':'>='
			    (_cor1, -2147483648)
		    in  let <_cor6> =
			    %% Line 239
			    call 'erlang':'=<'
				(_cor1, 2147483647)
			in  call 'erlang':'and'
				(_cor5, _cor6) ->
		  %% Line 240
		  apply 'mk_li32'/4
		      (_cor2, R0, _cor1, _cor0)
	      %% Line 241
	      <> when 'true' ->
		  let <Highest> =
		      %% Line 242
		      call 'erlang':'bsr'
			  (_cor1, 48)
		  in  let <_cor8> =
			  %% Line 243
			  call 'erlang':'bsr'
			      (_cor1, 32)
		      in  let <Higher> =
			      %% Line 243
			      call 'erlang':'band'
				  (_cor8, 65535)
			  in  let <_cor10> =
				  %% Line 244
				  call 'erlang':'bsr'
				      (_cor1, 16)
			      in  let <High> =
				      %% Line 244
				      call 'erlang':'band'
					  (_cor10, 65535)
				  in  let <Low> =
					  %% Line 245
					  call 'erlang':'band'
					      (_cor1, 65535)
				      in  let <_cor16> =
					      %% Line 247
					      case Low of
						%% Line 248
						<0> when 'true' ->
						    _cor0
						%% Line 249
						<_cor32> when 'true' ->
						    let <_cor13> =
							apply 'mk_uimm16'/1
							    (Low)
						    in  let <_cor14> =
							    apply 'mk_alu'/4
								('ori', _cor2, _cor2, _cor13)
							in  [_cor14|_cor0]
					      end
					  in  let <_cor21> =
						  %% Line 252
						  case High of
						    %% Line 253
						    <0> when 'true' ->
							_cor16
						    %% Line 254
						    <_cor33> when 'true' ->
							let <_cor18> =
							    apply 'mk_uimm16'/1
								(High)
							in  let <_cor19> =
								apply 'mk_alu'/4
								    ('oris', _cor2, _cor2, _cor18)
							    in  [_cor19|_cor16]
						  end
					      in  let <_cor23> =
						      %% Line 256
						      apply 'mk_simm16'/1
							  (Highest)
						  in  let <_cor24> =
							  %% Line 256
							  apply 'mk_alu'/4
							      ('addis', _cor2, R0, _cor23)
						      in  let <_cor25> =
							      %% Line 257
							      apply 'mk_uimm16'/1
								  (Higher)
							  in  let <_cor26> =
								  %% Line 257
								  apply 'mk_alu'/4
								      ('ori', _cor2, _cor2, _cor25)
							      in  let <_cor27> =
								      %% Line 258
								      apply 'mk_uimm16'/1
									  (32)
								  in  let <_cor28> =
									  %% Line 258
									  apply 'mk_alu'/4
									      ('sldi', _cor2, _cor2, _cor27)
								      in  %% Line 256
									  [_cor24|%% Line 257
										  [_cor26|%% Line 258
											  [_cor28|_cor21]]]
	    end
'mk_li32'/4 =
    %% Line 262
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 263
	case apply 'at_ha'/1
		 (_cor1) of
	  %% Line 264
	  <0> when 'true' ->
	      let <_cor4> =
		  %% Line 267
		  apply 'at_l'/1
		      (_cor1)
	      in  let <_cor5> =
		      %% Line 267
		      apply 'mk_simm16'/1
			  (_cor4)
		  in  let <_cor6> =
			  %% Line 267
			  apply 'mk_alu'/4
			      ('addi', _cor3, _cor2, _cor5)
		      in  %% Line 267
			  [_cor6|_cor0]
	  %% Line 268
	  <_cor21> when 'true' ->
	      let <_cor7> =
		  %% Line 271
		  call 'erlang':'bsr'
		      (_cor1, 16)
	      in  let <_cor8> =
		      %% Line 271
		      call 'erlang':'band'
			  (_cor7, 65535)
		  in  let <High> =
			  %% Line 271
			  apply 'simm16sext'/1
			      (_cor8)
		      in  let <_cor10> =
			      %% Line 272
			      apply 'mk_simm16'/1
				  (High)
			  in  let <_cor11> =
				  %% Line 272
				  apply 'mk_alu'/4
				      ('addis', _cor3, _cor2, _cor10)
			      in  let <_cor15> =
				      %% Line 273
				      case call 'erlang':'band'
					       (_cor1, 65535) of
					%% Line 274
					<0> when 'true' ->
					    _cor0
					%% Line 275
					<Low> when 'true' ->
					    let <_cor12> =
						apply 'mk_uimm16'/1
						    (Low)
					    in  let <_cor13> =
						    apply 'mk_alu'/4
							('ori', _cor3, _cor3, _cor12)
						in  [_cor13|_cor0]
				      end
				  in  %% Line 272
				      [_cor11|_cor15]
	end
'mk_addi'/4 =
    %% Line 279
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Low> =
	    %% Line 280
	    apply 'at_l'/1
		(_cor1)
	in  let <High> =
		%% Line 281
		apply 'at_ha'/1
		    (_cor1)
	    in  %% Line 282
		case High of
		  %% Line 283
		  <0> when 'true' ->
		      let <_cor6> =
			  %% Line 284
			  apply 'mk_simm16'/1
			      (Low)
		      in  let <_cor7> =
			      %% Line 284
			      apply 'mk_alu'/4
				  ('addi', _cor3, _cor2, _cor6)
			  in  %% Line 284
			      [_cor7|_cor0]
		  %% Line 286
		  <_cor20> when 'true' ->
		      %% Line 287
		      case Low of
			%% Line 288
			<0> when 'true' ->
			    let <_cor8> =
				%% Line 289
				apply 'mk_simm16'/1
				    (High)
			    in  let <_cor9> =
				    %% Line 289
				    apply 'mk_alu'/4
					('addis', _cor3, _cor2, _cor8)
				in  %% Line 289
				    [_cor9|_cor0]
			%% Line 291
			<_cor21> when 'true' ->
			    let <_cor10> =
				%% Line 292
				apply 'mk_simm16'/1
				    (Low)
			    in  let <_cor11> =
				    %% Line 292
				    apply 'mk_alu'/4
					('addi', _cor3, _cor2, _cor10)
				in  let <_cor12> =
					%% Line 293
					apply 'mk_simm16'/1
					    (High)
				    in  let <_cor13> =
					    %% Line 293
					    apply 'mk_alu'/4
						('addis', _cor3, _cor3, _cor12)
					in  %% Line 292
					    [_cor11|%% Line 293
						    [_cor13|_cor0]]
		      end
		end
'at_l'/1 =
    %% Line 298
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 299
	    call 'erlang':'band'
		(_cor0, 65535)
	in  %% Line 299
	    apply 'simm16sext'/1
		(_cor1)
'at_ha'/1 =
    %% Line 301
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 302
	    call 'erlang':'+'
		(_cor0, 32768)
	in  let <_cor2> =
		%% Line 302
		call 'erlang':'bsr'
		    (_cor1, 16)
	    in  let <_cor3> =
		    %% Line 302
		    call 'erlang':'band'
			(_cor2, 65535)
		in  %% Line 302
		    apply 'simm16sext'/1
			(_cor3)
'simm16sext'/1 =
    %% Line 304
    fun (_cor0) ->
	%% Line 305
	case <> of
	  <>
	      when call 'erlang':'>='
		    (_cor0,
		     32768) ->
	      call 'erlang':'bor'
		  (-65536, _cor0)
	  %% Line 306
	  <> when 'true' ->
	      _cor0
	end
'mk_load'/4 =
    %% Line 309
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 310
	{'load',_cor3,_cor2,_cor1,_cor0}
'mk_loadx'/4 =
    %% Line 312
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 313
	{'loadx',_cor3,_cor2,_cor1,_cor0}
'mk_load'/6 =
    %% Line 315
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <LdOp,Dst,Offset,Base,Scratch,Rest>
	      when call 'erlang':'is_integer'
		    (Offset) ->
	      let <_cor7> =
		  %% Line 317
		  case LdOp of
		    %% Line 318
		    <'ld'> when 'true' ->
			'true'
		    %% Line 319
		    <'ldx'> when 'true' ->
			'true'
		    %% Line 320
		    <_cor31> when 'true' ->
			'false'
		  end
	      in  %% Line 322
		  case <> of
		    <>
			when try
			      let <_cor10> =
				  call 'erlang':'>='
				      (Offset, -32768)
			      in  let <_cor11> =
				      call 'erlang':'=<'
					  (Offset, 32767)
				  in  %% Line 323
				      ( let <_cor15> =
					    ( case _cor7 of
						( <'false'> when 'true' ->
						      'true'
						  -| ['compiler_generated'] )
						( <'true'> when 'true' ->
						      let <_cor13> =
							  call 'erlang':'band'
							      (Offset, 3)
						      in  call 'erlang':'=:='
							      (_cor13, 0)
						  -| ['compiler_generated'] )
						( <_cor_variable> when 'true' ->
						      call 'erlang':'error'
							  ('badarg')
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					in  let <_cor17> =
						call 'erlang':'and'
						    (_cor11, ( _cor15
							       -| ['compiler_generated'] ))
					    in  call 'erlang':'and'
						    (_cor10, _cor17)
					-| ['compiler_generated'] )
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			let <_cor18> =
			    %% Line 324
			    apply 'mk_load'/4
				(LdOp, Dst, Offset, Base)
			in  %% Line 324
			    [_cor18|Rest]
		    %% Line 325
		    <> when 'true' ->
			let <LdxOp> =
			    %% Line 326
			    apply 'ldop_to_ldxop'/1
				(LdOp)
			in  let <DstReg> =
				%% Line 329
				apply 'temp_reg'/1
				    (Dst)
			    in  let <BaseReg> =
				    %% Line 330
				    apply 'temp_reg'/1
					(Base)
				in  let <_cor22> =
					%% Line 331
					case <> of
					  <>
					      when call 'erlang':'=/='
						    (DstReg,
						     BaseReg) ->
					      Dst
					  %% Line 332
					  <> when 'true' ->
					      apply 'mk_scratch'/1
						  (Scratch)
					end
				    in  let <_cor24> =
					    %% Line 336
					    apply 'mk_loadx'/4
						(LdxOp, Dst, Base, _cor22)
					in  %% Line 335
					    apply 'mk_li'/3
						(_cor22, Offset, %% Line 336
								 [_cor24|Rest])
		  end
	  ( <_cor30,_cor29,_cor28,_cor27,_cor26,_cor25> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor30,_cor29,_cor28,_cor27,_cor26,_cor25})
		  -| [{'function_name',{'mk_load',6}}] )
	    -| ['compiler_generated'] )
	end
'ldop_to_ldxop'/1 =
    %% Line 339
    fun (_cor0) ->
	%% Line 340
	case _cor0 of
	  %% Line 341
	  <'lbz'> when 'true' ->
	      'lbzx'
	  %% Line 342
	  <'lha'> when 'true' ->
	      'lhax'
	  %% Line 343
	  <'lhz'> when 'true' ->
	      'lhzx'
	  %% Line 344
	  <'lwa'> when 'true' ->
	      'lwax'
	  %% Line 345
	  <'lwz'> when 'true' ->
	      'lwzx'
	  %% Line 346
	  <'ld'> when 'true' ->
	      'ldx'
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'ldop_word'/0 =
    %% Line 349
    fun () ->
	%% Line 350
	case call 'erlang':'get'
		 ('hipe_target_arch') of
	  %% Line 351
	  <'powerpc'> when 'true' ->
	      'lwz'
	  %% Line 352
	  <'ppc64'> when 'true' ->
	      'ld'
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor0})
	    -| ['compiler_generated'] )
	end
'ldop_wordx'/0 =
    %% Line 355
    fun () ->
	%% Line 356
	case call 'erlang':'get'
		 ('hipe_target_arch') of
	  %% Line 357
	  <'powerpc'> when 'true' ->
	      'lwzx'
	  %% Line 358
	  <'ppc64'> when 'true' ->
	      'ldx'
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor0})
	    -| ['compiler_generated'] )
	end
'mk_scratch'/1 =
    %% Line 361
    fun (_cor0) ->
	%% Line 362
	case _cor0 of
	  %% Line 363
	  <0> when 'true' ->
	      apply 'mk_temp'/2
		  (0, 'untagged')
	  %% Line 364
	  <'new'> when 'true' ->
	      apply 'mk_new_temp'/1
		  ('untagged')
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'mk_mfspr'/2 =
    %% Line 367
    fun (_cor1,_cor0) ->
	{'mfspr',_cor1,_cor0}
'mk_mtcr'/1 =
    %% Line 369
    fun (_cor0) ->
	{'mtcr',_cor0}
'mk_mtspr'/2 =
    %% Line 371
    fun (_cor1,_cor0) ->
	{'mtspr',_cor1,_cor0}
'mk_pseudo_bc'/4 =
    %% Line 373
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 374
	case <> of
	  <>
	      when call 'erlang':'>='
		    (_cor0,
		     5.00000000000000000000e-01) ->
	      let <_cor5> =
		  %% Line 375
		  apply 'negate_bcond'/1
		      (_cor3)
	      in  let <_cor4> =
		      %% Line 376
		      call 'erlang':'-'
			  (1.00000000000000000000e+00, _cor0)
		  in  %% Line 375
		      apply 'mk_pseudo_bc_simple'/4
			  (_cor5, _cor1, _cor2, _cor4)
	  %% Line 377
	  <> when 'true' ->
	      %% Line 378
	      apply 'mk_pseudo_bc_simple'/4
		  (_cor3, _cor2, _cor1, _cor0)
	end
'mk_pseudo_bc_simple'/4 =
    %% Line 381
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <BCond,TrueLab,FalseLab,Pred>
	      when call 'erlang':'=<'
		    (Pred,
		     5.00000000000000000000e-01) ->
	      %% Line 382
	      {'pseudo_bc',BCond,TrueLab,%% Line 383
					 FalseLab,%% Line 383
						  Pred}
	  ( <_cor7,_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5,_cor4})
		  -| [{'function_name',{'mk_pseudo_bc_simple',4}}] )
	    -| ['compiler_generated'] )
	end
'negate_bcond'/1 =
    %% Line 385
    fun (_cor0) ->
	%% Line 386
	case _cor0 of
	  %% Line 387
	  <'lt'> when 'true' ->
	      'ge'
	  %% Line 388
	  <'ge'> when 'true' ->
	      'lt'
	  %% Line 389
	  <'gt'> when 'true' ->
	      'le'
	  %% Line 390
	  <'le'> when 'true' ->
	      'gt'
	  %% Line 391
	  <'eq'> when 'true' ->
	      'ne'
	  %% Line 392
	  <'ne'> when 'true' ->
	      'eq'
	  %% Line 393
	  <'so'> when 'true' ->
	      'ns'
	  %% Line 394
	  <'ns'> when 'true' ->
	      'so'
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'mk_pseudo_call'/4 =
    %% Line 397
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 398
	{'pseudo_call',_cor3,_cor2,_cor1,_cor0}
'pseudo_call_func'/1 =
    %% Line 399
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_call',FunC,_cor2,_cor3,_cor4}> when 'true' ->
	      FunC
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pseudo_call_func',1}}] )
	    -| ['compiler_generated'] )
	end
'pseudo_call_sdesc'/1 =
    %% Line 400
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_call',_cor2,SDesc,_cor3,_cor4}> when 'true' ->
	      SDesc
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pseudo_call_sdesc',1}}] )
	    -| ['compiler_generated'] )
	end
'pseudo_call_contlab'/1 =
    %% Line 401
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_call',_cor2,_cor3,ContLab,_cor4}> when 'true' ->
	      ContLab
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pseudo_call_contlab',1}}] )
	    -| ['compiler_generated'] )
	end
'pseudo_call_linkage'/1 =
    %% Line 402
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_call',_cor2,_cor3,_cor4,Linkage}> when 'true' ->
	      Linkage
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pseudo_call_linkage',1}}] )
	    -| ['compiler_generated'] )
	end
'mk_pseudo_call_prepare'/1 =
    %% Line 404
    fun (_cor0) ->
	%% Line 405
	{'pseudo_call_prepare',_cor0}
'pseudo_call_prepare_nrstkargs'/1 =
    %% Line 406
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_call_prepare',NrStkArgs}> when 'true' ->
	      %% Line 407
	      NrStkArgs
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pseudo_call_prepare_nrstkargs',1}}] )
	    -| ['compiler_generated'] )
	end
'mk_pseudo_li'/2 =
    %% Line 409
    fun (_cor1,_cor0) ->
	{'pseudo_li',_cor1,_cor0}
'mk_pseudo_move'/2 =
    %% Line 411
    fun (_cor1,_cor0) ->
	{'pseudo_move',_cor1,_cor0}
'is_pseudo_move'/1 =
    %% Line 412
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_move',_cor3,_cor4}> when 'true' ->
	      'true'
	  <_cor5> when 'true' ->
	      'false'
	end
'pseudo_move_dst'/1 =
    %% Line 413
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_move',Dst,_cor2}> when 'true' ->
	      Dst
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pseudo_move_dst',1}}] )
	    -| ['compiler_generated'] )
	end
'pseudo_move_src'/1 =
    %% Line 414
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_move',_cor2,Src}> when 'true' ->
	      Src
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pseudo_move_src',1}}] )
	    -| ['compiler_generated'] )
	end
'mk_pseudo_tailcall'/4 =
    %% Line 416
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 417
	{'pseudo_tailcall',_cor3,_cor2,_cor1,_cor0}
'pseudo_tailcall_func'/1 =
    %% Line 418
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_tailcall',FunC,_cor2,_cor3,_cor4}> when 'true' ->
	      FunC
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pseudo_tailcall_func',1}}] )
	    -| ['compiler_generated'] )
	end
'pseudo_tailcall_stkargs'/1 =
    %% Line 419
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_tailcall',_cor2,_cor3,StkArgs,_cor4}> when 'true' ->
	      StkArgs
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pseudo_tailcall_stkargs',1}}] )
	    -| ['compiler_generated'] )
	end
'pseudo_tailcall_linkage'/1 =
    %% Line 420
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_tailcall',_cor2,_cor3,_cor4,Linkage}> when 'true' ->
	      Linkage
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pseudo_tailcall_linkage',1}}] )
	    -| ['compiler_generated'] )
	end
'mk_pseudo_tailcall_prepare'/0 =
    %% Line 422
    fun () ->
	{'pseudo_tailcall_prepare'}
'mk_store'/4 =
    %% Line 424
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 425
	{'store',_cor3,_cor2,_cor1,_cor0}
'mk_storex'/4 =
    %% Line 427
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 428
	{'storex',_cor3,_cor2,_cor1,_cor0}
'mk_store'/6 =
    %% Line 430
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <StOp,Src,Offset,Base,Scratch,Rest>
	      when call 'erlang':'is_integer'
		    (Offset) ->
	      let <_cor7> =
		  %% Line 432
		  case StOp of
		    %% Line 433
		    <'std'> when 'true' ->
			'true'
		    %% Line 434
		    <'stdx'> when 'true' ->
			'true'
		    %% Line 435
		    <_cor28> when 'true' ->
			'false'
		  end
	      in  %% Line 437
		  case <> of
		    <>
			when try
			      let <_cor10> =
				  call 'erlang':'>='
				      (Offset, -32768)
			      in  let <_cor11> =
				      call 'erlang':'=<'
					  (Offset, 32767)
				  in  %% Line 438
				      ( let <_cor15> =
					    ( case _cor7 of
						( <'false'> when 'true' ->
						      'true'
						  -| ['compiler_generated'] )
						( <'true'> when 'true' ->
						      let <_cor13> =
							  call 'erlang':'band'
							      (Offset, 3)
						      in  call 'erlang':'=:='
							      (_cor13, 0)
						  -| ['compiler_generated'] )
						( <_cor_variable> when 'true' ->
						      call 'erlang':'error'
							  ('badarg')
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
					in  let <_cor17> =
						call 'erlang':'and'
						    (_cor11, ( _cor15
							       -| ['compiler_generated'] ))
					    in  call 'erlang':'and'
						    (_cor10, _cor17)
					-| ['compiler_generated'] )
			  of <Try> ->
			      Try
			  catch <T,R> ->
			      'false' ->
			let <_cor18> =
			    %% Line 439
			    apply 'mk_store'/4
				(StOp, Src, Offset, Base)
			in  %% Line 439
			    [_cor18|Rest]
		    %% Line 440
		    <> when 'true' ->
			let <StxOp> =
			    %% Line 441
			    apply 'stop_to_stxop'/1
				(StOp)
			in  let <Index> =
				%% Line 442
				apply 'mk_scratch'/1
				    (Scratch)
			    in  let <_cor21> =
				    %% Line 444
				    apply 'mk_storex'/4
					(StxOp, Src, Base, Index)
				in  %% Line 443
				    apply 'mk_li'/3
					(Index, Offset, %% Line 444
							[_cor21|Rest])
		  end
	  ( <_cor27,_cor26,_cor25,_cor24,_cor23,_cor22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor27,_cor26,_cor25,_cor24,_cor23,_cor22})
		  -| [{'function_name',{'mk_store',6}}] )
	    -| ['compiler_generated'] )
	end
'stop_to_stxop'/1 =
    %% Line 447
    fun (_cor0) ->
	%% Line 448
	case _cor0 of
	  %% Line 449
	  <'stb'> when 'true' ->
	      'stbx'
	  %% Line 450
	  <'sth'> when 'true' ->
	      'sthx'
	  %% Line 451
	  <'stw'> when 'true' ->
	      'stwx'
	  %% Line 452
	  <'std'> when 'true' ->
	      'stdx'
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'stop_word'/0 =
    %% Line 455
    fun () ->
	%% Line 456
	case call 'erlang':'get'
		 ('hipe_target_arch') of
	  %% Line 457
	  <'powerpc'> when 'true' ->
	      'stw'
	  %% Line 458
	  <'ppc64'> when 'true' ->
	      'std'
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor0})
	    -| ['compiler_generated'] )
	end
'stop_wordx'/0 =
    %% Line 461
    fun () ->
	%% Line 462
	case call 'erlang':'get'
		 ('hipe_target_arch') of
	  %% Line 463
	  <'powerpc'> when 'true' ->
	      'stwx'
	  %% Line 464
	  <'ppc64'> when 'true' ->
	      'stdx'
	  ( <_cor0> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor0})
	    -| ['compiler_generated'] )
	end
'mk_unary'/3 =
    %% Line 467
    fun (_cor2,_cor1,_cor0) ->
	{'unary',_cor2,_cor1,_cor0}
'mk_lfd'/3 =
    %% Line 469
    fun (_cor2,_cor1,_cor0) ->
	{'lfd',_cor2,_cor1,_cor0}
'mk_lfdx'/3 =
    %% Line 470
    fun (_cor2,_cor1,_cor0) ->
	{'lfdx',_cor2,_cor1,_cor0}
'mk_fload'/4 =
    %% Line 471
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Dst,Offset,Base,Scratch>
	      when call 'erlang':'is_integer'
		    (Offset) ->
	      %% Line 472
	      case <> of
		<>
		    when let <_cor5> =
			  call 'erlang':'>='
			      (Offset, -32768)
		      in  let <_cor6> =
			      call 'erlang':'=<'
				  (Offset, 32767)
			  in  call 'erlang':'and'
				  (_cor5, _cor6) ->
		    let <_cor7> =
			%% Line 473
			apply 'mk_lfd'/3
			    (Dst, Offset, Base)
		    in  %% Line 473
			[_cor7|[]]
		%% Line 474
		<> when 'true' ->
		    let <Index> =
			%% Line 475
			apply 'mk_scratch'/1
			    (Scratch)
		    in  let <_cor9> =
			    %% Line 476
			    apply 'mk_lfdx'/3
				(Dst, Base, Index)
			in  %% Line 476
			    apply 'mk_li'/3
				(Index, Offset, [_cor9|[]])
	      end
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'mk_fload',4}}] )
	    -| ['compiler_generated'] )
	end
'mk_stfd'/3 =
    %% Line 479
    fun (_cor2,_cor1,_cor0) ->
	{'stfd',_cor2,_cor1,_cor0}
'mk_stfdx'/3 =
    %% Line 480
    fun (_cor2,_cor1,_cor0) ->
	{'stfdx',_cor2,_cor1,_cor0}
'mk_fstore'/4 =
    %% Line 481
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Src,Offset,Base,Scratch>
	      when call 'erlang':'is_integer'
		    (Offset) ->
	      %% Line 482
	      case <> of
		<>
		    when let <_cor5> =
			  call 'erlang':'>='
			      (Offset, -32768)
		      in  let <_cor6> =
			      call 'erlang':'=<'
				  (Offset, 32767)
			  in  call 'erlang':'and'
				  (_cor5, _cor6) ->
		    let <_cor7> =
			%% Line 483
			apply 'mk_stfd'/3
			    (Src, Offset, Base)
		    in  %% Line 483
			[_cor7|[]]
		%% Line 484
		<> when 'true' ->
		    let <Index> =
			%% Line 485
			apply 'mk_scratch'/1
			    (Scratch)
		    in  let <_cor9> =
			    %% Line 486
			    apply 'mk_stfdx'/3
				(Src, Base, Index)
			in  %% Line 486
			    apply 'mk_li'/3
				(Index, Offset, [_cor9|[]])
	      end
	  ( <_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'mk_fstore',4}}] )
	    -| ['compiler_generated'] )
	end
'mk_fp_binary'/4 =
    %% Line 489
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 490
	{'fp_binary',_cor3,_cor2,_cor1,_cor0}
'mk_fp_unary'/3 =
    %% Line 492
    fun (_cor2,_cor1,_cor0) ->
	{'fp_unary',_cor2,_cor1,_cor0}
'mk_pseudo_fmove'/2 =
    %% Line 494
    fun (_cor1,_cor0) ->
	{'pseudo_fmove',_cor1,_cor0}
'is_pseudo_fmove'/1 =
    %% Line 495
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_fmove',_cor3,_cor4}> when 'true' ->
	      'true'
	  <_cor5> when 'true' ->
	      'false'
	end
'pseudo_fmove_dst'/1 =
    %% Line 496
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_fmove',Dst,_cor2}> when 'true' ->
	      Dst
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pseudo_fmove_dst',1}}] )
	    -| ['compiler_generated'] )
	end
'pseudo_fmove_src'/1 =
    %% Line 497
    fun (_cor0) ->
	case _cor0 of
	  <{'pseudo_fmove',_cor2,Src}> when 'true' ->
	      Src
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'pseudo_fmove_src',1}}] )
	    -| ['compiler_generated'] )
	end
'mk_defun'/8 =
    %% Line 499
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 500
	{'defun',_cor7,_cor6,_cor3,_cor2,_cor5,_cor4,_cor1,_cor0}
'defun_mfa'/1 =
    %% Line 503
    fun (_cor0) ->
	case _cor0 of
	  <{'defun',MFA,_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8}> when 'true' ->
	      MFA
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'defun_mfa',1}}] )
	    -| ['compiler_generated'] )
	end
'defun_formals'/1 =
    %% Line 504
    fun (_cor0) ->
	case _cor0 of
	  <{'defun',_cor2,Formals,_cor3,_cor4,_cor5,_cor6,_cor7,_cor8}> when 'true' ->
	      Formals
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'defun_formals',1}}] )
	    -| ['compiler_generated'] )
	end
'defun_is_closure'/1 =
    %% Line 505
    fun (_cor0) ->
	case _cor0 of
	  <{'defun',_cor2,_cor3,_cor4,_cor5,IsClosure,_cor6,_cor7,_cor8}> when 'true' ->
	      IsClosure
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'defun_is_closure',1}}] )
	    -| ['compiler_generated'] )
	end
'defun_is_leaf'/1 =
    %% Line 506
    fun (_cor0) ->
	case _cor0 of
	  <{'defun',_cor2,_cor3,_cor4,_cor5,_cor6,IsLeaf,_cor7,_cor8}> when 'true' ->
	      IsLeaf
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'defun_is_leaf',1}}] )
	    -| ['compiler_generated'] )
	end
'defun_code'/1 =
    %% Line 507
    fun (_cor0) ->
	case _cor0 of
	  <{'defun',_cor2,_cor3,Code,_cor4,_cor5,_cor6,_cor7,_cor8}> when 'true' ->
	      Code
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'defun_code',1}}] )
	    -| ['compiler_generated'] )
	end
'defun_data'/1 =
    %% Line 508
    fun (_cor0) ->
	case _cor0 of
	  <{'defun',_cor2,_cor3,_cor4,Data,_cor5,_cor6,_cor7,_cor8}> when 'true' ->
	      Data
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'defun_data',1}}] )
	    -| ['compiler_generated'] )
	end
'defun_var_range'/1 =
    %% Line 509
    fun (_cor0) ->
	case _cor0 of
	  <{'defun',_cor2,_cor3,_cor4,_cor5,_cor6,_cor7,VarRange,_cor8}> when 'true' ->
	      VarRange
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'defun_var_range',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_ppc')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_ppc', _cor0)
end