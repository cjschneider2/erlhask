module 'hipe_beam_to_icode' ['module'/2,
			     'module_info'/0,
			     'module_info'/1]
    attributes [%% Line 301
		'type' =
		    %% Line 301
		    [{{'record','comp_servers'},[{'typed_record_field',{'record_field',301,{'atom',301,'pp_server'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'range'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'type'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}]]],[]}],
		%% Line 307
		'type' =
		    %% Line 307
		    [{'comp_option',{'type',307,'union',[{'type',307,'atom',[]}|[{'type',307,'tuple',[{'type',307,'atom',[]}|[{'type',307,'atom',[]}]]}]]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{'comp_options',{'type',308,'list',[{'type',308,'comp_option',[]}]},[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'hipe_architecture',{'type',311,'union',[{'atom',311,'amd64'}|[{'atom',311,'arm'}|[{'atom',311,'powerpc'}|[{'atom',311,'ppc64'}|[{'atom',311,'ultrasparc'}|[{'atom',311,'x86'}]]]]]]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{'hipe_map',{'type',313,'list',[{'type',313,'tuple',[{'type',313,'non_neg_integer',[]}|[{'type',314,'union',[{'atom',314,'unknown'}|[{'type',314,'tuple',[{'type',314,'union',[{'atom',314,'reg'}|[{'atom',314,'fp_reg'}|[{'atom',314,'spill'}]]]}|[{'type',315,'non_neg_integer',[]}]]}]]}]]}]},[]}],
		%% Line 316
		'type' =
		    %% Line 316
		    [{'hipe_temp_map',{'type',316,'tuple','any'},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{'hipe_spill_map',{'type',317,'list',[{'type',317,'tuple',[{'type',317,'non_neg_integer',[]}|[{'type',317,'tuple',[{'atom',317,'spill'}|[{'type',317,'non_neg_integer',[]}]]}]]}]},[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{'simple_const',{'type',35,'union',[{'type',35,'atom',[]}|[{'type',35,'nil',[]}|[{'type',35,'integer',[]}|[{'type',35,'float',[]}]]]]},[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{'structured_const',{'type',36,'union',[{'type',36,'list',[]}|[{'type',36,'tuple','any'}]]},[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'icode_lbl',{'type',38,'non_neg_integer',[]},[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','flat'},[{'typed_record_field',{'record_field',44,{'atom',44,'value'}},{'type',44,'union',[{'atom',44,'undefined'}|[{'type',44,'simple_const',[]}|[{'type',44,'structured_const',[]}|[{'type',44,'binary',[]}]]]]}}],[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{{'record','icode_const'},[{'typed_record_field',{'record_field',46,{'atom',46,'value'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'record',[{'atom',46,'flat'}]}]]}}],[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'variable_annotation',{'type',48,'tuple',[{'type',48,'atom',[]}|[{'type',48,'any',[]}|[{'type',48,'fun',[{'type',48,'product',[{'type',48,'any',[]}]}|[{'type',48,'string',[]}]]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','icode_variable'},[{'typed_record_field',{'record_field',50,{'atom',50,'name'}},{'type',50,'union',[{'atom',50,'undefined'}|[{'type',50,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'kind'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'atom',51,'var'}|[{'atom',51,'reg'}|[{'atom',51,'fvar'}]]]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'annotation'},{'nil',52}},{'type',52,'union',[{'type',52,'nil',[]}|[{'type',52,'variable_annotation',[]}]]}}]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'icode_if_op',{'type',58,'union',[{'atom',58,'>'}|[{'atom',58,'<'}|[{'atom',58,'>='}|[{'atom',58,'=<'}|[{'atom',58,'=:='}|[{'atom',58,'=/='}|[{'atom',58,'=='}|[{'atom',58,'/='}|[{'atom',59,'fixnum_eq'}|[{'atom',59,'fixnum_neq'}|[{'atom',59,'fixnum_lt'}|[{'atom',60,'fixnum_le'}|[{'atom',60,'fixnum_ge'}|[{'atom',60,'fixnum_gt'}|[{'atom',61,'op_exact_eqeq_2'}|[{'atom',61,'suspend_msg_timeout'}]]]]]]]]]]]]]]]]},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'icode_type_test',{'type',63,'union',[{'atom',63,'atom'}|[{'atom',63,'bignum'}|[{'atom',63,'binary'}|[{'atom',63,'bitstr'}|[{'atom',63,'boolean'}|[{'atom',64,'cons'}|[{'atom',64,'fixnum'}|[{'atom',64,'float'}|[{'atom',64,'function'}|[{'atom',65,'function2'}|[{'atom',65,'integer'}|[{'atom',65,'list'}|[{'atom',65,'map'}|[{'atom',65,'nil'}|[{'atom',66,'number'}|[{'atom',66,'pid'}|[{'atom',66,'port'}|[{'atom',66,'reference'}|[{'atom',66,'tuple'}|[{'type',67,'tuple',[{'atom',67,'atom'}|[{'type',67,'atom',[]}]]}|[{'type',67,'tuple',[{'atom',67,'integer'}|[{'type',67,'integer',[]}]]}|[{'type',68,'tuple',[{'atom',68,'record'}|[{'type',68,'atom',[]}|[{'type',68,'non_neg_integer',[]}]]]}|[{'type',69,'tuple',[{'atom',69,'tuple'}|[{'type',69,'non_neg_integer',[]}]]}]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{'icode_primop',{'type',71,'union',[{'type',71,'atom',[]}|[{'type',71,'tuple','any'}]]},[]}],
		%% Line 72
		'type' =
		    %% Line 72
		    [{'icode_funcall',{'type',72,'union',[{'type',72,'mfa',[]}|[{'type',72,'icode_primop',[]}]]},[]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{'icode_var',{'type',74,'record',[{'atom',74,'icode_variable'}|[{'type',74,'field_type',[{'atom',74,'kind'}|[{'atom',74,'var'}]]}]]},[]}],
		%% Line 75
		'type' =
		    %% Line 75
		    [{'icode_reg',{'type',75,'record',[{'atom',75,'icode_variable'}|[{'type',75,'field_type',[{'atom',75,'kind'}|[{'atom',75,'reg'}]]}]]},[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{'icode_fvar',{'type',76,'record',[{'atom',76,'icode_variable'}|[{'type',76,'field_type',[{'atom',76,'kind'}|[{'atom',76,'fvar'}]]}]]},[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{'icode_argument',{'type',77,'union',[{'type',77,'record',[{'atom',77,'icode_const'}]}|[{'type',77,'record',[{'atom',77,'icode_variable'}]}]]},[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{'icode_term_arg',{'type',78,'union',[{'type',78,'icode_var',[]}|[{'type',78,'record',[{'atom',78,'icode_const'}]}]]},[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{'icode_switch_case',{'type',80,'tuple',[{'type',80,'record',[{'atom',80,'icode_const'}]}|[{'type',80,'icode_lbl',[]}]]},[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'icode_call_type',{'type',82,'union',[{'atom',82,'local'}|[{'atom',82,'primop'}|[{'atom',82,'remote'}]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'icode_exit_class',{'type',83,'union',[{'atom',83,'error'}|[{'atom',83,'exit'}|[{'atom',83,'rethrow'}|[{'atom',83,'throw'}]]]]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{'icode_comment_text',{'type',85,'union',[{'type',85,'atom',[]}|[{'type',85,'string',[]}]]},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'icode_info',{'type',87,'list',[{'type',87,'tuple',[{'atom',87,'arg_types'}|[{'type',87,'list',[{'remote_type',87,[{'atom',87,'erl_types'}|[{'atom',87,'erl_type'}|[[]]]]}]}]]}]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','icode_label'},[{'typed_record_field',{'record_field',93,{'atom',93,'name'}},{'type',93,'union',[{'atom',93,'undefined'}|[{'type',93,'icode_lbl',[]}]]}}],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','icode_if'},[{'typed_record_field',{'record_field',95,{'atom',95,'op'}},{'type',95,'union',[{'atom',95,'undefined'}|[{'type',95,'icode_if_op',[]}]]}}|[{'typed_record_field',{'record_field',96,{'atom',96,'args'}},{'type',96,'union',[{'atom',96,'undefined'}|[{'type',96,'list',[{'type',96,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',97,{'atom',97,'true_label'}},{'type',97,'union',[{'atom',97,'undefined'}|[{'type',97,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'false_label'}},{'type',98,'union',[{'atom',98,'undefined'}|[{'type',98,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'p'}},{'type',99,'union',[{'atom',99,'undefined'}|[{'type',99,'float',[]}]]}}]]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','icode_switch_val'},[{'typed_record_field',{'record_field',101,{'atom',101,'term'}},{'type',101,'union',[{'atom',101,'undefined'}|[{'type',101,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',102,{'atom',102,'fail_label'}},{'type',102,'union',[{'atom',102,'undefined'}|[{'type',102,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'length'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'cases'}},{'type',104,'union',[{'atom',104,'undefined'}|[{'type',104,'list',[{'type',104,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','icode_switch_tuple_arity'},[{'typed_record_field',{'record_field',106,{'atom',106,'term'}},{'type',106,'union',[{'atom',106,'undefined'}|[{'type',106,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',107,{'atom',107,'fail_label'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'type',107,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',108,{'atom',108,'length'}},{'type',108,'union',[{'atom',108,'undefined'}|[{'type',108,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',109,{'atom',109,'cases'}},{'type',109,'union',[{'atom',109,'undefined'}|[{'type',109,'list',[{'type',109,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','icode_type'},[{'typed_record_field',{'record_field',111,{'atom',111,'test'}},{'type',111,'union',[{'atom',111,'undefined'}|[{'type',111,'icode_type_test',[]}]]}}|[{'typed_record_field',{'record_field',112,{'atom',112,'args'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'list',[{'type',112,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',113,{'atom',113,'true_label'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'false_label'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'p'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'float',[]}]]}}]]]]],[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{{'record','icode_goto'},[{'typed_record_field',{'record_field',117,{'atom',117,'label'}},{'type',117,'union',[{'atom',117,'undefined'}|[{'type',117,'icode_lbl',[]}]]}}],[]}],
		%% Line 119
		'type' =
		    %% Line 119
		    [{{'record','icode_move'},[{'typed_record_field',{'record_field',119,{'atom',119,'dst'}},{'type',119,'union',[{'atom',119,'undefined'}|[{'type',119,'record',[{'atom',119,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'src'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'record',[{'atom',120,'icode_variable'}]}|[{'type',120,'record',[{'atom',120,'icode_const'}]}]]]}}]],[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{{'record','icode_phi'},[{'typed_record_field',{'record_field',122,{'atom',122,'dst'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'type',122,'record',[{'atom',122,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'id'}},{'type',123,'union',[{'atom',123,'undefined'}|[{'type',123,'record',[{'atom',123,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'arglist'}},{'type',124,'union',[{'atom',124,'undefined'}|[{'type',124,'list',[{'type',124,'tuple',[{'type',124,'icode_lbl',[]}|[{'type',124,'record',[{'atom',124,'icode_variable'}]}]]}]}]]}}]]],[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{{'record','icode_call'},[{'typed_record_field',{'record_field',126,{'atom',126,'dstlist'}},{'type',126,'union',[{'atom',126,'undefined'}|[{'type',126,'list',[{'type',126,'record',[{'atom',126,'icode_variable'}]}]}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'fun'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'type',127,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'args'}},{'type',128,'union',[{'atom',128,'undefined'}|[{'type',128,'list',[{'type',128,'icode_argument',[]}]}]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'type'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'icode_call_type',[]}]]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'continuation'}},{'type',130,'union',[{'atom',130,'undefined'}|[{'type',130,'nil',[]}|[{'type',130,'icode_lbl',[]}]]]}}|[{'typed_record_field',{'record_field',131,{'atom',131,'fail_label'},{'nil',131}},{'type',131,'union',[{'type',131,'nil',[]}|[{'type',131,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'in_guard'},{'atom',132,'false'}},{'type',132,'boolean',[]}}]]]]]]],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{{'record','icode_enter'},[{'typed_record_field',{'record_field',134,{'atom',134,'fun'}},{'type',134,'union',[{'atom',134,'undefined'}|[{'type',134,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'args'}},{'type',135,'union',[{'atom',135,'undefined'}|[{'type',135,'list',[{'type',135,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'type'}},{'type',136,'union',[{'atom',136,'undefined'}|[{'type',136,'icode_call_type',[]}]]}}]]],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{{'record','icode_return'},[{'typed_record_field',{'record_field',138,{'atom',138,'vars'}},{'type',138,'union',[{'atom',138,'undefined'}|[{'type',138,'list',[{'type',138,'icode_var',[]}]}]]}}],[]}],
		%% Line 140
		'type' =
		    %% Line 140
		    [{{'record','icode_begin_try'},[{'typed_record_field',{'record_field',140,{'atom',140,'label'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'successor'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}]],[]}],
		%% Line 142
		'type' =
		    %% Line 142
		    [{{'record','icode_end_try'},[],[]}],
		%% Line 144
		'type' =
		    %% Line 144
		    [{{'record','icode_begin_handler'},[{'typed_record_field',{'record_field',144,{'atom',144,'dstlist'}},{'type',144,'union',[{'atom',144,'undefined'}|[{'type',144,'list',[{'type',144,'icode_var',[]}]}]]}}],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{{'record','icode_fail'},[{'typed_record_field',{'record_field',147,{'atom',147,'class'}},{'type',147,'union',[{'atom',147,'undefined'}|[{'type',147,'icode_exit_class',[]}]]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'args'}},{'type',148,'union',[{'atom',148,'undefined'}|[{'type',148,'list',[{'type',148,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'fail_label'},{'nil',149}},{'type',149,'union',[{'type',149,'nil',[]}|[{'type',149,'icode_lbl',[]}]]}}]]],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{{'record','icode_comment'},[{'typed_record_field',{'record_field',151,{'atom',151,'text'}},{'type',151,'union',[{'atom',151,'undefined'}|[{'type',151,'icode_comment_text',[]}]]}}],[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'icode_instr',{'type',157,'union',[{'type',157,'record',[{'atom',157,'icode_begin_handler'}]}|[{'type',157,'record',[{'atom',157,'icode_begin_try'}]}|[{'type',158,'record',[{'atom',158,'icode_call'}]}|[{'type',158,'record',[{'atom',158,'icode_comment'}]}|[{'type',158,'record',[{'atom',158,'icode_end_try'}]}|[{'type',159,'record',[{'atom',159,'icode_enter'}]}|[{'type',159,'record',[{'atom',159,'icode_fail'}]}|[{'type',160,'record',[{'atom',160,'icode_goto'}]}|[{'type',160,'record',[{'atom',160,'icode_if'}]}|[{'type',160,'record',[{'atom',160,'icode_label'}]}|[{'type',161,'record',[{'atom',161,'icode_move'}]}|[{'type',161,'record',[{'atom',161,'icode_phi'}]}|[{'type',161,'record',[{'atom',161,'icode_return'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_tuple_arity'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_val'}]}|[{'type',163,'record',[{'atom',163,'icode_type'}]}]]]]]]]]]]]]]]]]},[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{'icode_instrs',{'type',164,'list',[{'type',164,'icode_instr',[]}]},[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{{'record','icode'},[{'typed_record_field',{'record_field',170,{'atom',170,'fun'}},{'type',170,'union',[{'atom',170,'undefined'}|[{'type',170,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',171,{'atom',171,'params'}},{'type',171,'union',[{'atom',171,'undefined'}|[{'type',171,'list',[{'type',171,'icode_var',[]}]}]]}}|[{'typed_record_field',{'record_field',172,{'atom',172,'is_closure'}},{'type',172,'union',[{'atom',172,'undefined'}|[{'type',172,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',173,{'atom',173,'closure_arity'}},{'type',173,'union',[{'atom',173,'undefined'}|[{'type',173,'arity',[]}]]}}|[{'typed_record_field',{'record_field',174,{'atom',174,'is_leaf'}},{'type',174,'union',[{'atom',174,'undefined'}|[{'type',174,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',175,{'atom',175,'code'},{'nil',175}},{'type',175,'icode_instrs',[]}}|[{'typed_record_field',{'record_field',176,{'atom',176,'data'}},{'type',176,'union',[{'atom',176,'undefined'}|[{'type',176,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',177,{'atom',177,'var_range'}},{'type',177,'union',[{'atom',177,'undefined'}|[{'type',177,'tuple',[{'type',177,'non_neg_integer',[]}|[{'type',177,'non_neg_integer',[]}]]}]]}}|[{'typed_record_field',{'record_field',178,{'atom',178,'label_range'}},{'type',178,'union',[{'atom',178,'undefined'}|[{'type',178,'tuple',[{'type',178,'icode_lbl',[]}|[{'type',178,'icode_lbl',[]}]]}]]}}|[{'typed_record_field',{'record_field',179,{'atom',179,'info'},{'nil',179}},{'type',179,'icode_info',[]}}]]]]]]]]]],[]}],
		%% Line 180
		'type' =
		    %% Line 180
		    [{'icode',{'type',180,'record',[{'atom',180,'icode'}]},[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','apply_N'},[{'typed_record_field',{'record_field',28,{'atom',28,'arity'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'type',28,'arity',[]}]]}}],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','closure_element'},[{'typed_record_field',{'record_field',30,{'atom',30,'n'}},{'type',30,'union',[{'atom',30,'undefined'}|[{'type',30,'arity',[]}]]}}],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','element'},[{'typed_record_field',{'record_field',32,{'atom',32,'typeinfo'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'type',32,'list',[]}]]}}],[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','gc_test'},[{'typed_record_field',{'record_field',34,{'atom',34,'need'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'type',34,'non_neg_integer',[]}]]}}],[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{{'record','mkfun'},[{'typed_record_field',{'record_field',36,{'atom',36,'mfa'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'magic_num'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'integer',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'index'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'integer',[]}]]}}]]],[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','unsafe_element'},[{'typed_record_field',{'record_field',38,{'atom',38,'index'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'non_neg_integer',[]}]]}}],[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{{'record','unsafe_update_element'},[{'typed_record_field',{'record_field',40,{'atom',40,'index'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}],[]}],
		%% Line 26
		'type' =
		    %% Line 26
		    [{'beam_instr',{'type',26,'union',[{'atom',26,'bs_init_writable'}|[{'atom',26,'fclearerror'}|[{'atom',26,'if_end'}|[{'atom',27,'remove_message'}|[{'atom',27,'return'}|[{'atom',27,'send'}|[{'atom',27,'timeout'}|[{'type',28,'tuple','any'}]]]]]]]]},[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','function'},[{'typed_record_field',{'record_field',34,{'atom',34,'name'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'type',34,'atom',[]}]]}}|[{'typed_record_field',{'record_field',35,{'atom',35,'arity'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'byte',[]}]]}}|[{'record_field',36,{'atom',36,'entry'}}|[{'typed_record_field',{'record_field',37,{'atom',37,'code'},{'nil',37}},{'type',37,'list',[{'type',37,'beam_instr',[]}]}}]]]],[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','beam_file'},[{'typed_record_field',{'record_field',39,{'atom',39,'module'}},{'type',39,'union',[{'atom',39,'undefined'}|[{'type',39,'module',[]}]]}}|[{'typed_record_field',{'record_field',40,{'atom',40,'labeled_exports'},{'nil',40}},{'type',40,'list',[{'remote_type',40,[{'atom',40,'beam_lib'}|[{'atom',40,'labeled_entry'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',41,{'atom',41,'attributes'},{'nil',41}},{'type',41,'list',[{'remote_type',41,[{'atom',41,'beam_lib'}|[{'atom',41,'attrib_entry'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',42,{'atom',42,'compile_info'},{'nil',42}},{'type',42,'list',[{'remote_type',42,[{'atom',42,'beam_lib'}|[{'atom',42,'compinfo_entry'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',43,{'atom',43,'code'},{'nil',43}},{'type',43,'list',[{'type',43,'record',[{'atom',43,'function'}]}]}}]]]]],[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{'hipe_beam_to_icode_ret',{'type',102,'list',[{'type',102,'tuple',[{'type',102,'mfa',[]}|[{'type',102,'record',[{'atom',102,'icode'}]}]]}]},[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{{'record','beam_const'},[{'typed_record_field',{'record_field',108,{'atom',108,'value'}},{'type',108,'union',[{'atom',108,'undefined'}|[{'type',108,'simple_const',[]}]]}}],[]}],
		%% Line 110
		'type' =
		    %% Line 110
		    [{{'record','closure_info'},[{'typed_record_field',{'record_field',110,{'atom',110,'mfa'}},{'type',110,'union',[{'atom',110,'undefined'}|[{'type',110,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',110,{'atom',110,'arity'}},{'type',110,'union',[{'atom',110,'undefined'}|[{'type',110,'arity',[]}]]}}|[{'typed_record_field',{'record_field',110,{'atom',110,'fv_arity'}},{'type',110,'union',[{'atom',110,'undefined'}|[{'type',110,'arity',[]}]]}}]]],[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{{'record','environment'},[{'typed_record_field',{'record_field',112,{'atom',112,'mfa'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',112,{'atom',112,'entry'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'non_neg_integer',[]}]]}}]],[]}],
		%% Line 123
		'spec' =
		    %% Line 123
		    [{{'module',2},[{'type',123,'fun',[{'type',123,'product',[{'type',123,'list',[{'type',123,'record',[{'atom',123,'function'}]}]}|[{'type',123,'comp_options',[]}]]}|[{'type',123,'hipe_beam_to_icode_ret',[]}]]}]}],
		%% Line 2347
		'spec' =
		    %% Line 2347
		    [{{'remove_dead_code',1},[{'type',2347,'fun',[{'type',2347,'product',[{'type',2347,'icode_instrs',[]}]}|[{'type',2347,'icode_instrs',[]}]]}]}],
		%% Line 2359
		'spec' =
		    %% Line 2359
		    [{{'skip_to_label',1},[{'type',2359,'fun',[{'type',2359,'product',[{'type',2359,'icode_instrs',[]}]}|[{'type',2359,'icode_instrs',[]}]]}]}]]
'module'/2 =
    %% Line 125
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 126
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[F|_cor3]> when 'true' ->
				let <_cor5> =
				    call 'beam_disasm':'function__code'
					(F)
				in  let <_cor6> =
					apply 'lc$^0'/1
					    (_cor3)
				    in  ( [_cor5|_cor6]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor1)
	      -| ['list_comprehension'] )
	in  %% Line 127
	    case apply 'preprocess_code'/1
		     (_cor7) of
	      <{ModCode,ClosureInfo}> when 'true' ->
		  do  %% Line 128
		      apply 'pp_beam'/2
			  (ModCode, _cor0)
		      %% Line 129
		      ( letrec
			    'lc$^1'/1 =
				fun (_cor12) ->
				    case _cor12 of
				      <[FunCode|_cor11]> when 'true' ->
					  let <_cor13> =
					      apply 'trans_beam_function_chunk'/2
						  (FunCode, ClosureInfo)
					  in  let <_cor14> =
						  apply 'lc$^1'/1
						      (_cor11)
					      in  ( [_cor13|_cor14]
						    -| ['compiler_generated'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor12> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor12})
					      -| [{'function_name',{'lc$^1',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^1'/1
				(ModCode)
			-| ['list_comprehension'] )
	      ( <_cor9> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor9})
		-| ['compiler_generated'] )
	    end
'trans_beam_function_chunk'/2 =
    %% Line 131
    fun (_cor1,_cor0) ->
	%% Line 132
	case apply 'find_mfa'/1
		 (_cor1) of
	  <MFA = {M,F,A}> when 'true' ->
	      let <Icode> =
		  %% Line 133
		  apply 'trans_mfa_code'/5
		      (M, F, A, _cor1, _cor0)
	      in  %% Line 134
		  {MFA,Icode}
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'trans_mfa_code'/5 =
    %% Line 140
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	do  %% Line 142
	    call 'hipe_gensym':'init'
		('icode')
	    let <FunArgs> =
		%% Line 144
		apply 'extract_fun_args'/1
		    (_cor2)
	    in  let <FunLbl> =
		    %% Line 146
		    apply 'mk_label'/1
			('new')
		in  let <_cor7> =
			%% Line 147
			call 'hipe_icode':'label_name'
			    (FunLbl)
		    in  let <Env1> =
			    %% Line 147
			    apply 'env__mk_env'/4
				(_cor4, _cor3, _cor2, _cor7)
			in  let <_cor9> =
				%% Line 148
				apply 'trans_fun'/2
				    (_cor1, Env1)
			    in  let <Code1> =
				    %% Line 148
				    call 'lists':'flatten'
					(_cor9)
				in  let <_cor11> =
					%% Line 149
					apply 'fix_catches'/1
					    (Code1)
				    in  let <Code2> =
					    %% Line 149
					    apply 'fix_fallthroughs'/1
						(_cor11)
					in  let <MFA> = {_cor4,_cor3,_cor2}
					    in  let <Leafness> =
						    %% Line 156
						    apply 'leafness'/1
							(Code2)
						in  let <IsLeaf> =
							%% Line 157
							apply 'is_leaf_code'/1
							    (Leafness)
						    in  let <_cor19> =
							    %% Line 160
							    case apply 'needs_redtest'/1
								     (Leafness) of
							      %% Line 161
							      <'false'> when 'true' ->
								  Code2
							      %% Line 162
							      <'true'> when 'true' ->
								  let <_cor17> =
								      apply 'mk_redtest'/0
									  ()
								  in  [_cor17|Code2]
							      ( <_cor18> when 'true' ->
								    primop 'match_fail'
									({'case_clause',_cor18})
								-| ['compiler_generated'] )
							    end
							in  let <Code4> =
								%% Line 159
								[FunLbl|_cor19]
							    in  let <_cor21> =
								    %% Line 164
								    apply 'get_closure_info'/2
									(MFA, _cor0)
								in  let <IsClosure> =
									%% Line 164
									call 'erlang':'=/='
									    (_cor21, 'not_a_closure')
								    in  let <_cor25> =
									    %% Line 166
									    apply 'remove_dead_code'/1
										(Code4)
									in  let <_cor24> =
										%% Line 167
										call 'hipe_gensym':'var_range'
										    ('icode')
									    in  let <_cor23> =
										    %% Line 168
										    call 'hipe_gensym':'label_range'
											('icode')
										in  let <Code5> =
											%% Line 165
											call 'hipe_icode':'mk_icode'
											    (MFA, FunArgs, IsClosure, IsLeaf, _cor25, _cor24, _cor23)
										    in  %% Line 170
											case apply 'get_closure_info'/2
												 (MFA, _cor0) of
											  %% Line 171
											  <'not_a_closure'> when 'true' ->
											      Code5
											  %% Line 172
											  <CI> when 'true' ->
											      %% Line 174
											      apply 'patch_closure_entry'/2
												  (Code5, CI)
											end
'mk_redtest'/0 =
    %% Line 179
    fun () ->
	call 'hipe_icode':'mk_primop'
	    ([], 'redtest', [])
'leafness'/1 =
    %% Line 181
    fun (_cor0) ->
	%% Line 182
	apply 'leafness'/2
	    (_cor0, 'true')
'leafness'/2 =
    %% Line 184
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],Leafness> when 'true' ->
	      %% Line 185
	      Leafness
	  %% Line 186
	  <[I|Is],Leafness> when 'true' ->
	      %% Line 187
	      case I of
		%% Line 188
		<{'icode_comment',_cor22}> when 'true' ->
		    let <_cor3> =
			%% Line 194
			case call 'hipe_icode':'comment_text'
				 (I) of
			  %% Line 195
			  <'tail_recursive'> when 'true' ->
			      'selfrec'
			  %% Line 196
			  <'self_tail_recursive'> when 'true' ->
			      'selfrec'
			  %% Line 197
			  <_cor23> when 'true' ->
			      Leafness
			end
		    in  %% Line 199
			apply 'leafness'/2
			    (Is, _cor3)
		%% Line 200
		<{'icode_call',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30}> when 'true' ->
		    %% Line 201
		    case call 'hipe_icode':'call_type'
			     (I) of
		      %% Line 202
		      <'primop'> when 'true' ->
			  %% Line 203
			  case call 'hipe_icode':'call_fun'
				   (I) of
			    %% Line 204
			    <'call_fun'> when 'true' ->
				'false'
			    %% Line 205
			    <'enter_fun'> when 'true' ->
				'false'
			    %% Line 206
			    <{'apply_N',_cor31}> when 'true' ->
				'false'
			    %% Line 207
			    <_cor32> when 'true' ->
				apply 'leafness'/2
				    (Is, Leafness)
			  end
		      %% Line 209
		      <T>
			  when try
				( case <> of
				    ( <>
					  when call 'erlang':'=:='
						(T,
						 'local') ->
					  'true'
				      -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  call 'erlang':'=:='
					      (T, 'remote')
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false' ->
			  %% Line 210
			  case call 'hipe_icode':'call_fun'
				   (I) of
			    <{M,F,A}> when 'true' ->
				%% Line 211
				case call 'erlang':'is_builtin'
					 (M, F, A) of
				  %% Line 212
				  <'true'> when 'true' ->
				      apply 'leafness'/2
					  (Is, Leafness)
				  %% Line 213
				  <'false'> when 'true' ->
				      'false'
				  ( <_cor10> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor10})
				    -| ['compiler_generated'] )
				end
			    ( <_cor9> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor9})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor11> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor11})
			-| ['compiler_generated'] )
		    end
		%% Line 216
		<{'icode_enter',_cor33,_cor34,_cor35}> when 'true' ->
		    %% Line 217
		    case call 'hipe_icode':'enter_type'
			     (I) of
		      %% Line 218
		      <'primop'> when 'true' ->
			  %% Line 219
			  case call 'hipe_icode':'enter_fun'
				   (I) of
			    %% Line 220
			    <'enter_fun'> when 'true' ->
				'false'
			    %% Line 221
			    <{'apply_N',_cor36}> when 'true' ->
				'false'
			    %% Line 222
			    <_cor37> when 'true' ->
				do  %% Line 225
				    call 'io':'format'
					([108|[101|[97|[102|[110|[101|[115|[115|[58|[32|[117|[110|[101|[120|[112|[101|[99|[116|[101|[100|[32|[101|[110|[116|[101|[114|[32|[116|[111|[32|[112|[114|[105|[109|[111|[112|[32|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [I|[]])
				    %% Line 226
				    'true'
			  end
		      %% Line 228
		      <T>
			  when try
				( case <> of
				    ( <>
					  when call 'erlang':'=:='
						(T,
						 'local') ->
					  'true'
				      -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  call 'erlang':'=:='
					      (T, 'remote')
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    of <Try> ->
				Try
			    catch <T,R> ->
				'false' ->
			  %% Line 229
			  case call 'hipe_icode':'enter_fun'
				   (I) of
			    <{M,F,A}> when 'true' ->
				%% Line 230
				case call 'erlang':'is_builtin'
					 (M, F, A) of
				  %% Line 231
				  <'true'> when 'true' ->
				      apply 'leafness'/2
					  (Is, Leafness)
				  %% Line 232
				  <_cor38> when 'true' ->
				      'false'
				end
			    ( <_cor16> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor16})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor18> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor18})
			-| ['compiler_generated'] )
		    end
		%% Line 235
		<_cor39> when 'true' ->
		    apply 'leafness'/2
			(Is, Leafness)
	      end
	  ( <_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor21,_cor20})
		  -| [{'function_name',{'leafness',2}}] )
	    -| ['compiler_generated'] )
	end
'is_leaf_code'/1 =
    %% Line 239
    fun (_cor0) ->
	%% Line 240
	case _cor0 of
	  %% Line 241
	  <'true'> when 'true' ->
	      'true'
	  %% Line 242
	  <'selfrec'> when 'true' ->
	      'true'
	  %% Line 243
	  <'false'> when 'true' ->
	      'false'
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'needs_redtest'/1 =
    %% Line 246
    fun (_cor0) ->
	%% Line 247
	case _cor0 of
	  %% Line 248
	  <'true'> when 'true' ->
	      'false'
	  %% Line 249
	  <'selfrec'> when 'true' ->
	      'true'
	  %% Line 250
	  <'false'> when 'true' ->
	      'true'
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'trans_fun'/2 =
    %% Line 258
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[F = {'label',_cor542}|[FI = {'func_info',_cor543,_cor544,_cor545}|Instructions]],Env> when 'true' ->
	      %% Line 260
	      apply 'trans_fun'/2
		  ([F|[{'line',[]}|[FI|Instructions]]], Env)
	  %% Line 261
	  <[{'label',B}|[{'label',_cor546}|%% Line 262
					   [{'func_info',M,F,A}|[{'label',L}|Instructions]]]],%% Line 262
											      Env> when 'true' ->
	      %% Line 263
	      apply 'trans_fun'/2
		  ([{'label',B}|[{'func_info',M,F,A}|[{'label',L}|Instructions]]], Env)
	  %% Line 264
	  <[{'label',B}|%% Line 265
			[{'line',_cor547}|%% Line 266
					  [{'func_info',{'atom',_X_M},{'atom',_X_F},_X_A}|%% Line 267
											  [{'label',L}|Instructions]]]],%% Line 267
															Env> when 'true' ->
	      let <Begin> =
		  %% Line 271
		  apply 'mk_label'/1
		      (B)
	      in  let <V> =
		      %% Line 272
		      apply 'mk_var'/1
			  ('new')
		  in  let <EntryPt> =
			  %% Line 273
			  apply 'mk_label'/1
			      (L)
		      in  let <_cor5> =
			      %% Line 274
			      call 'hipe_icode':'label_name'
				  (EntryPt)
			  in  let <Goto> =
				  %% Line 274
				  call 'hipe_icode':'mk_goto'
				      (_cor5)
			      in  let <_cor7> =
				      %% Line 275
				      call 'hipe_icode':'mk_const'
					  ('function_clause')
				  in  let <Mov> =
					  %% Line 275
					  call 'hipe_icode':'mk_move'
					      (V, _cor7)
				      in  let <Fail> =
					      %% Line 276
					      call 'hipe_icode':'mk_fail'
						  ([V|[]], 'error')
					  in  let <_cor10> =
						  %% Line 277
						  apply 'trans_fun'/2
						      (Instructions, Env)
					      in  %% Line 277
						  [Goto|[Begin|[Mov|[Fail|[EntryPt|_cor10]]]]]
	  %% Line 279
	  <[{'label',L1}|[{'label',L2}|Instructions]],Env> when 'true' ->
	      let <Lab1> =
		  %% Line 281
		  apply 'mk_label'/1
		      (L1)
	      in  let <Lab2> =
		      %% Line 282
		      apply 'mk_label'/1
			  (L2)
		  in  let <_cor13> =
			  %% Line 283
			  apply 'map_label'/1
			      (L2)
		      in  let <Goto> =
			      %% Line 283
			      call 'hipe_icode':'mk_goto'
				  (_cor13)
			  in  let <_cor15> =
				  %% Line 284
				  apply 'trans_fun'/2
				      (Instructions, Env)
			      in  %% Line 284
				  [Lab1|[Goto|[Lab2|_cor15]]]
	  %% Line 285
	  <[{'label',L}|Instructions],Env> when 'true' ->
	      let <_cor16> =
		  %% Line 286
		  apply 'mk_label'/1
		      (L)
	      in  let <_cor17> =
		      %% Line 286
		      apply 'trans_fun'/2
			  (Instructions, Env)
		  in  %% Line 286
		      [_cor16|_cor17]
	  %% Line 289
	  <[{'call',_X_N,MFA = {_X_M,_X_F,A}}|Instructions],Env> when 'true' ->
	      let <Args> =
		  %% Line 290
		  apply 'extract_fun_args'/1
		      (A)
	      in  let <_cor19> =
		      %% Line 291
		      apply 'mk_var'/1
			  ({'r',0})
		  in  let <Dst> =
			  %% Line 291
			  [_cor19|[]]
		      in  let <I> =
			      %% Line 292
			      apply 'trans_call'/4
				  (MFA, Dst, Args, 'local')
			  in  let <_cor22> =
				  %% Line 293
				  apply 'trans_fun'/2
				      (Instructions, Env)
			      in  %% Line 293
				  [I|_cor22]
	  %% Line 296
	  <[{'call_last',_X_N,MFA = {_X_M,_X_F,A},_cor548}|Instructions],Env> when 'true' ->
	      %% Line 299
	      case apply 'env__get_mfa'/1
		       (Env) of
		%% Line 300
		<_cor549>
		    when call 'erlang':'=:='
			  (_cor549,
			   MFA) ->
		    let <Entry> =
			%% Line 302
			apply 'env__get_entry'/1
			    (Env)
		    in  let <_cor24> =
			    %% Line 303
			    call 'hipe_icode':'mk_comment'
				('tail_recursive')
			in  let <_cor25> =
				%% Line 304
				call 'hipe_icode':'mk_goto'
				    (Entry)
			    in  let <_cor26> =
				    %% Line 304
				    apply 'trans_fun'/2
					(Instructions, Env)
				in  %% Line 303
				    [_cor24|%% Line 304
					    [_cor25|_cor26]]
		%% Line 305
		<_cor550> when 'true' ->
		    let <Args> =
			%% Line 306
			apply 'extract_fun_args'/1
			    (A)
		    in  let <I> =
			    %% Line 307
			    apply 'trans_enter'/3
				(MFA, Args, 'local')
			in  let <_cor29> =
				%% Line 308
				apply 'trans_fun'/2
				    (Instructions, Env)
			    in  %% Line 308
				[I|_cor29]
	      end
	  %% Line 313
	  <[{'call_only',_X_N,MFA = {_X_M,_X_F,A}}|Instructions],Env> when 'true' ->
	      %% Line 315
	      case apply 'env__get_mfa'/1
		       (Env) of
		%% Line 316
		<_cor551>
		    when call 'erlang':'=:='
			  (_cor551,
			   MFA) ->
		    let <Entry> =
			%% Line 317
			apply 'env__get_entry'/1
			    (Env)
		    in  let <_cor32> =
			    %% Line 318
			    call 'hipe_icode':'mk_comment'
				('self_tail_recursive')
			in  let <_cor33> =
				%% Line 319
				call 'hipe_icode':'mk_goto'
				    (Entry)
			    in  let <_cor34> =
				    %% Line 319
				    apply 'trans_fun'/2
					(Instructions, Env)
				in  %% Line 318
				    [_cor32|%% Line 319
					    [_cor33|_cor34]]
		%% Line 320
		<_cor552> when 'true' ->
		    let <Args> =
			%% Line 321
			apply 'extract_fun_args'/1
			    (A)
		    in  let <I> =
			    %% Line 322
			    apply 'trans_enter'/3
				(MFA, Args, 'local')
			in  let <_cor37> =
				%% Line 323
				apply 'trans_fun'/2
				    (Instructions, Env)
			    in  %% Line 323
				[I|_cor37]
	      end
	  %% Line 326
	  <[{'call_ext',_X_N,{'extfunc',M,F,A}}|Instructions],Env> when 'true' ->
	      let <Args> =
		  %% Line 327
		  apply 'extract_fun_args'/1
		      (A)
	      in  let <_cor40> =
		      %% Line 328
		      apply 'mk_var'/1
			  ({'r',0})
		  in  let <Dst> =
			  %% Line 328
			  [_cor40|[]]
		      in  let <I> =
			      %% Line 329
			      apply 'trans_call'/4
				  ({M,F,A}, Dst, Args, 'remote')
			  in  let <_cor43> =
				  %% Line 330
				  call 'hipe_icode':'mk_comment'
				      ('call_ext')
			      in  let <_cor44> =
				      %% Line 330
				      apply 'trans_fun'/2
					  (Instructions, Env)
				  in  %% Line 330
				      [_cor43|[I|_cor44]]
	  %% Line 332
	  <[{'call_ext_last',_X_N,{'extfunc',M,F,A},_cor553}|Instructions],Env> when 'true' ->
	      let <Args> =
		  %% Line 334
		  apply 'extract_fun_args'/1
		      (A)
	      in  let <I> =
		      %% Line 336
		      apply 'trans_enter'/3
			  ({M,F,A}, Args, 'remote')
		  in  let <_cor47> =
			  %% Line 337
			  call 'hipe_icode':'mk_comment'
			      ('call_ext_last')
		      in  let <_cor48> =
			      %% Line 337
			      apply 'trans_fun'/2
				  (Instructions, Env)
			  in  %% Line 337
			      [_cor47|[I|_cor48]]
	  %% Line 339
	  <[{'bif',BifName,'nofail',[],Reg}|Instructions],Env> when 'true' ->
	      let <BifInst> =
		  %% Line 340
		  apply 'trans_bif0'/2
		      (BifName, Reg)
	      in  let <_cor50> =
		      %% Line 341
		      apply 'trans_fun'/2
			  (Instructions, Env)
		  in  %% Line 341
		      [BifInst|_cor50]
	  %% Line 343
	  <[{'bif',BifName,{'f',Lbl},Args = [_cor554|[]],Reg}|Instructions],Env> when 'true' ->
	      %% Line 344
	      case apply 'trans_bif'/6
		       (1, BifName, Lbl, Args, Reg, Env) of
		<{BifInsts,Env1}> when 'true' ->
		    let <_cor52> =
			%% Line 345
			apply 'trans_fun'/2
			    (Instructions, Env1)
		    in  %% Line 345
			call 'erlang':'++'
			    (BifInsts, _cor52)
		( <_cor51> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor51})
		  -| ['compiler_generated'] )
	      end
	  %% Line 347
	  <[{'bif',BifName,{'f',Lbl},Args = [_cor555|[_cor556|[]]],Reg}|Instructions],Env> when 'true' ->
	      %% Line 348
	      case apply 'trans_bif'/6
		       (2, BifName, Lbl, Args, Reg, Env) of
		<{BifInsts,Env1}> when 'true' ->
		    let <_cor54> =
			%% Line 349
			apply 'trans_fun'/2
			    (Instructions, Env1)
		    in  %% Line 349
			call 'erlang':'++'
			    (BifInsts, _cor54)
		( <_cor53> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor53})
		  -| ['compiler_generated'] )
	      end
	  %% Line 351
	  <[{'bif',BifName,{'f',Lbl},Args = [_cor557|[_cor558|[_cor559|[]]]],Reg}|Instructions],Env> when 'true' ->
	      %% Line 352
	      case apply 'trans_bif'/6
		       (3, BifName, Lbl, Args, Reg, Env) of
		<{BifInsts,Env1}> when 'true' ->
		    let <_cor56> =
			%% Line 353
			apply 'trans_fun'/2
			    (Instructions, Env1)
		    in  %% Line 353
			call 'erlang':'++'
			    (BifInsts, _cor56)
		( <_cor55> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor55})
		  -| ['compiler_generated'] )
	      end
	  %% Line 355
	  <[{'allocate',StackSlots,_cor560}|Instructions],Env> when 'true' ->
	      let <_cor58> =
		  %% Line 356
		  apply 'trans_allocate'/1
		      (StackSlots)
	      in  let <_cor57> =
		      %% Line 356
		      apply 'trans_fun'/2
			  (Instructions, Env)
		  in  %% Line 356
		      call 'erlang':'++'
			  (_cor58, _cor57)
	  %% Line 358
	  <[{'allocate_heap',StackSlots,_cor561,_cor562}|Instructions],Env> when 'true' ->
	      let <_cor60> =
		  %% Line 359
		  apply 'trans_allocate'/1
		      (StackSlots)
	      in  let <_cor59> =
		      %% Line 359
		      apply 'trans_fun'/2
			  (Instructions, Env)
		  in  %% Line 359
		      call 'erlang':'++'
			  (_cor60, _cor59)
	  %% Line 361
	  <[{'allocate_zero',StackSlots,_cor563}|Instructions],Env> when 'true' ->
	      let <_cor62> =
		  %% Line 362
		  apply 'trans_allocate'/1
		      (StackSlots)
	      in  let <_cor61> =
		      %% Line 362
		      apply 'trans_fun'/2
			  (Instructions, Env)
		  in  %% Line 362
		      call 'erlang':'++'
			  (_cor62, _cor61)
	  %% Line 364
	  <[{'allocate_heap_zero',StackSlots,_cor564,_cor565}|Instructions],Env> when 'true' ->
	      let <_cor64> =
		  %% Line 365
		  apply 'trans_allocate'/1
		      (StackSlots)
	      in  let <_cor63> =
		      %% Line 365
		      apply 'trans_fun'/2
			  (Instructions, Env)
		  in  %% Line 365
		      call 'erlang':'++'
			  (_cor64, _cor63)
	  %% Line 367
	  <[{'test_heap',_cor566,_cor567}|Instructions],Env> when 'true' ->
	      %% Line 368
	      apply 'trans_fun'/2
		  (Instructions, Env)
	  %% Line 370
	  <[{'init',_cor568}|Instructions],Env> when 'true' ->
	      %% Line 371
	      apply 'trans_fun'/2
		  (Instructions, Env)
	  %% Line 373
	  <[{'deallocate',_cor569}|Instructions],Env> when 'true' ->
	      %% Line 374
	      apply 'trans_fun'/2
		  (Instructions, Env)
	  %% Line 376
	  <['return'|Instructions],Env> when 'true' ->
	      let <_cor65> =
		  %% Line 377
		  apply 'mk_var'/1
		      ({'r',0})
	      in  let <_cor66> =
		      %% Line 377
		      call 'hipe_icode':'mk_return'
			  ([_cor65|[]])
		  in  let <_cor67> =
			  %% Line 377
			  apply 'trans_fun'/2
			      (Instructions, Env)
		      in  %% Line 377
			  [_cor66|_cor67]
	  %% Line 379
	  <['send'|Instructions],Env> when 'true' ->
	      let <_cor70> =
		  %% Line 380
		  apply 'mk_var'/1
		      ({'r',0})
	      in  let <_cor68> =
		      %% Line 381
		      apply 'mk_var'/1
			  ({'x',0})
		  in  let <_cor69> =
			  %% Line 381
			  apply 'mk_var'/1
			      ({'x',1})
		      in  let <I> =
			      %% Line 380
			      call 'hipe_icode':'mk_call'
				  ([_cor70|[]], 'erlang', 'send', %% Line 381
								  [_cor68|[_cor69|[]]], %% Line 381
											'remote')
			  in  let <_cor72> =
				  %% Line 382
				  apply 'trans_fun'/2
				      (Instructions, Env)
			      in  %% Line 382
				  [I|_cor72]
	  %% Line 384
	  <['remove_message'|Instructions],Env> when 'true' ->
	      let <_cor73> =
		  %% Line 385
		  call 'hipe_icode':'mk_primop'
		      ([], 'select_msg', [])
	      in  let <_cor74> =
		      %% Line 385
		      apply 'trans_fun'/2
			  (Instructions, Env)
		  in  %% Line 385
		      [_cor73|_cor74]
	  %% Line 387
	  <['timeout'|Instructions],Env> when 'true' ->
	      let <_cor75> =
		  %% Line 388
		  call 'hipe_icode':'mk_primop'
		      ([], 'clear_timeout', [])
	      in  let <_cor76> =
		      %% Line 388
		      apply 'trans_fun'/2
			  (Instructions, Env)
		  in  %% Line 388
		      [_cor75|_cor76]
	  %% Line 390
	  <[{'loop_rec',{_cor570,Lbl},Reg}|Instructions],Env> when 'true' ->
	      %% Line 391
	      case apply 'get_constants_in_temps'/2
		       ([Reg|[]], Env) of
		<{Movs,[Temp|[]],Env1}> when 'true' ->
		    let <GotitLbl> =
			%% Line 392
			apply 'mk_label'/1
			    ('new')
		    in  let <_cor80> =
			    %% Line 394
			    call 'hipe_icode':'label_name'
				(GotitLbl)
			in  let <_cor79> =
				%% Line 395
				apply 'map_label'/1
				    (Lbl)
			    in  let <ChkGetMsg> =
				    %% Line 393
				    call 'hipe_icode':'mk_primop'
					([Temp|[]], 'check_get_msg', [], _cor80, _cor79)
				in  let <_cor82> =
					%% Line 396
					apply 'trans_fun'/2
					    (Instructions, Env1)
				    in  %% Line 396
					call 'erlang':'++'
					    (Movs, [ChkGetMsg|[GotitLbl|_cor82]])
		( <_cor77> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor77})
		  -| ['compiler_generated'] )
	      end
	  %% Line 398
	  <[{'loop_rec_end',{_cor571,Lbl}}|Instructions],Env> when 'true' ->
	      let <_cor83> =
		  %% Line 399
		  apply 'map_label'/1
		      (Lbl)
	      in  let <Loop> =
		      %% Line 399
		      call 'hipe_icode':'mk_goto'
			  (_cor83)
		  in  let <_cor85> =
			  %% Line 400
			  call 'hipe_icode':'mk_primop'
			      ([], 'next_msg', [])
		      in  let <_cor86> =
			      %% Line 400
			      apply 'trans_fun'/2
				  (Instructions, Env)
			  in  %% Line 400
			      [_cor85|[Loop|_cor86]]
	  %% Line 402
	  <[{'wait',{_cor572,Lbl}}|Instructions],Env> when 'true' ->
	      let <Susp> =
		  %% Line 403
		  call 'hipe_icode':'mk_primop'
		      ([], 'suspend_msg', [])
	      in  let <_cor88> =
		      %% Line 404
		      apply 'map_label'/1
			  (Lbl)
		  in  let <Loop> =
			  %% Line 404
			  call 'hipe_icode':'mk_goto'
			      (_cor88)
		      in  let <_cor90> =
			      %% Line 405
			      apply 'trans_fun'/2
				  (Instructions, Env)
			  in  %% Line 405
			      [Susp|[Loop|_cor90]]
	  %% Line 407
	  <[{'wait_timeout',{_cor573,Lbl},Reg}|Instructions],Env> when 'true' ->
	      %% Line 408
	      case apply 'get_constants_in_temps'/2
		       ([Reg|[]], Env) of
		<{Movs,Temps = [_cor574|[]],Env1}> when 'true' ->
		    let <SetTmout> =
			%% Line 409
			call 'hipe_icode':'mk_primop'
			    ([], 'set_timeout', Temps)
		    in  let <DoneLbl> =
			    %% Line 410
			    apply 'mk_label'/1
				('new')
			in  let <_cor95> =
				%% Line 412
				apply 'map_label'/1
				    (Lbl)
			    in  let <_cor94> =
				    %% Line 412
				    call 'hipe_icode':'label_name'
					(DoneLbl)
				in  let <SuspTmout> =
					%% Line 411
					call 'hipe_icode':'mk_if'
					    ('suspend_msg_timeout', [], _cor95, _cor94)
				    in  let <_cor97> =
					    %% Line 413
					    apply 'trans_fun'/2
						(Instructions, Env1)
					in  %% Line 413
					    call 'erlang':'++'
						(Movs, [SetTmout|[SuspTmout|[DoneLbl|_cor97]]])
		( <_cor91> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor91})
		  -| ['compiler_generated'] )
	      end
	  %% Line 415
	  <[{'recv_mark',{'f',_cor575}}|Instructions],Env> when 'true' ->
	      %% Line 416
	      apply 'trans_fun'/2
		  (Instructions, Env)
	  %% Line 417
	  <[{'recv_set',{'f',_cor576}}|Instructions],Env> when 'true' ->
	      %% Line 418
	      apply 'trans_fun'/2
		  (Instructions, Env)
	  %% Line 422
	  <[{'arithbif',ArithOp,{'f',L},SrcRs,DstR}|Instructions],Env> when 'true' ->
	      %% Line 423
	      case apply 'trans_arith'/5
		       (ArithOp, SrcRs, DstR, L, Env) of
		<{ICode,NewEnv}> when 'true' ->
		    let <_cor99> =
			%% Line 424
			apply 'trans_fun'/2
			    (Instructions, NewEnv)
		    in  %% Line 424
			call 'erlang':'++'
			    (ICode, _cor99)
		( <_cor98> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor98})
		  -| ['compiler_generated'] )
	      end
	  %% Line 429
	  <[{'test','is_lt',{'f',Lbl},[Arg1|[Arg2|[]]]}|Instructions],Env> when 'true' ->
	      %% Line 430
	      case apply 'trans_test_guard'/5
		       ('<', Lbl, Arg1, Arg2, Env) of
		<{ICode,Env1}> when 'true' ->
		    let <_cor101> =
			%% Line 431
			apply 'trans_fun'/2
			    (Instructions, Env1)
		    in  %% Line 431
			call 'erlang':'++'
			    (ICode, _cor101)
		( <_cor100> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor100})
		  -| ['compiler_generated'] )
	      end
	  %% Line 433
	  <[{'test','is_ge',{'f',Lbl},[Arg1|[Arg2|[]]]}|Instructions],Env> when 'true' ->
	      %% Line 434
	      case apply 'trans_test_guard'/5
		       ('>=', Lbl, Arg1, Arg2, Env) of
		<{ICode,Env1}> when 'true' ->
		    let <_cor103> =
			%% Line 435
			apply 'trans_fun'/2
			    (Instructions, Env1)
		    in  %% Line 435
			call 'erlang':'++'
			    (ICode, _cor103)
		( <_cor102> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor102})
		  -| ['compiler_generated'] )
	      end
	  %% Line 437
	  <[{'test','is_eq',{'f',Lbl},[Arg1|[Arg2|[]]]}|Instructions],Env> when 'true' ->
	      %% Line 438
	      case apply 'trans_is_eq'/4
		       (Lbl, Arg1, Arg2, Env) of
		<{ICode,Env1}> when 'true' ->
		    let <_cor105> =
			%% Line 439
			apply 'trans_fun'/2
			    (Instructions, Env1)
		    in  %% Line 439
			call 'erlang':'++'
			    (ICode, _cor105)
		( <_cor104> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor104})
		  -| ['compiler_generated'] )
	      end
	  %% Line 441
	  <[{'test','is_ne',{'f',Lbl},[Arg1|[Arg2|[]]]}|Instructions],Env> when 'true' ->
	      %% Line 442
	      case apply 'trans_is_ne'/4
		       (Lbl, Arg1, Arg2, Env) of
		<{ICode,Env1}> when 'true' ->
		    let <_cor107> =
			%% Line 443
			apply 'trans_fun'/2
			    (Instructions, Env1)
		    in  %% Line 443
			call 'erlang':'++'
			    (ICode, _cor107)
		( <_cor106> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor106})
		  -| ['compiler_generated'] )
	      end
	  %% Line 445
	  <[{'test','is_eq_exact',{'f',Lbl},[Arg1|[Arg2|[]]]}|Instructions],Env> when 'true' ->
	      %% Line 446
	      case apply 'trans_is_eq_exact'/4
		       (Lbl, Arg1, Arg2, Env) of
		<{ICode,Env1}> when 'true' ->
		    let <_cor109> =
			%% Line 447
			apply 'trans_fun'/2
			    (Instructions, Env1)
		    in  %% Line 447
			call 'erlang':'++'
			    (ICode, _cor109)
		( <_cor108> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor108})
		  -| ['compiler_generated'] )
	      end
	  %% Line 449
	  <[{'test','is_ne_exact',{'f',Lbl},[Arg1|[Arg2|[]]]}|Instructions],Env> when 'true' ->
	      %% Line 450
	      case apply 'trans_is_ne_exact'/4
		       (Lbl, Arg1, Arg2, Env) of
		<{ICode,Env1}> when 'true' ->
		    let <_cor111> =
			%% Line 451
			apply 'trans_fun'/2
			    (Instructions, Env1)
		    in  %% Line 451
			call 'erlang':'++'
			    (ICode, _cor111)
		( <_cor110> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor110})
		  -| ['compiler_generated'] )
	      end
	  %% Line 456
	  <[{'test','is_integer',{'f',Lbl},[Arg|[]]}|Instructions],Env> when 'true' ->
	      %% Line 457
	      case apply 'trans_type_test'/4
		       ('integer', Lbl, Arg, Env) of
		<{Code,Env1}> when 'true' ->
		    let <_cor113> =
			%% Line 458
			apply 'trans_fun'/2
			    (Instructions, Env1)
		    in  %% Line 458
			[Code|_cor113]
		( <_cor112> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor112})
		  -| ['compiler_generated'] )
	      end
	  %% Line 460
	  <[{'test','is_float',{'f',Lbl},[Arg|[]]}|Instructions],Env> when 'true' ->
	      %% Line 461
	      case apply 'trans_type_test'/4
		       ('float', Lbl, Arg, Env) of
		<{Code,Env1}> when 'true' ->
		    let <_cor115> =
			%% Line 462
			apply 'trans_fun'/2
			    (Instructions, Env1)
		    in  %% Line 462
			[Code|_cor115]
		( <_cor114> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor114})
		  -| ['compiler_generated'] )
	      end
	  %% Line 464
	  <[{'test','is_number',{'f',Lbl},[Arg|[]]}|Instructions],Env> when 'true' ->
	      %% Line 465
	      case apply 'trans_type_test'/4
		       ('number', Lbl, Arg, Env) of
		<{Code,Env1}> when 'true' ->
		    let <_cor117> =
			%% Line 466
			apply 'trans_fun'/2
			    (Instructions, Env1)
		    in  %% Line 466
			[Code|_cor117]
		( <_cor116> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor116})
		  -| ['compiler_generated'] )
	      end
	  %% Line 468
	  <[{'test','is_atom',{'f',Lbl},[Arg|[]]}|Instructions],Env> when 'true' ->
	      %% Line 469
	      case apply 'trans_type_test'/4
		       ('atom', Lbl, Arg, Env) of
		<{Code,Env1}> when 'true' ->
		    let <_cor119> =
			%% Line 470
			apply 'trans_fun'/2
			    (Instructions, Env1)
		    in  %% Line 470
			[Code|_cor119]
		( <_cor118> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor118})
		  -| ['compiler_generated'] )
	      end
	  %% Line 472
	  <[{'test','is_pid',{'f',Lbl},[Arg|[]]}|Instructions],Env> when 'true' ->
	      %% Line 473
	      case apply 'trans_type_test'/4
		       ('pid', Lbl, Arg, Env) of
		<{Code,Env1}> when 'true' ->
		    let <_cor121> =
			%% Line 474
			apply 'trans_fun'/2
			    (Instructions, Env1)
		    in  %% Line 474
			[Code|_cor121]
		( <_cor120> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor120})
		  -| ['compiler_generated'] )
	      end
	  %% Line 476
	  <[{'test','is_reference',{'f',Lbl},[Arg|[]]}|Instructions],Env> when 'true' ->
	      %% Line 477
	      case apply 'trans_type_test'/4
		       ('reference', Lbl, Arg, Env) of
		<{Code,Env1}> when 'true' ->
		    let <_cor123> =
			%% Line 478
			apply 'trans_fun'/2
			    (Instructions, Env1)
		    in  %% Line 478
			[Code|_cor123]
		( <_cor122> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor122})
		  -| ['compiler_generated'] )
	      end
	  %% Line 480
	  <[{'test','is_port',{'f',Lbl},[Arg|[]]}|Instructions],Env> when 'true' ->
	      %% Line 481
	      case apply 'trans_type_test'/4
		       ('port', Lbl, Arg, Env) of
		<{Code,Env1}> when 'true' ->
		    let <_cor125> =
			%% Line 482
			apply 'trans_fun'/2
			    (Instructions, Env1)
		    in  %% Line 482
			[Code|_cor125]
		( <_cor124> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor124})
		  -| ['compiler_generated'] )
	      end
	  %% Line 484
	  <[{'test','is_nil',{'f',Lbl},[Arg|[]]}|Instructions],Env> when 'true' ->
	      %% Line 485
	      case apply 'trans_type_test'/4
		       ('nil', Lbl, Arg, Env) of
		<{Code,Env1}> when 'true' ->
		    let <_cor127> =
			%% Line 486
			apply 'trans_fun'/2
			    (Instructions, Env1)
		    in  %% Line 486
			[Code|_cor127]
		( <_cor126> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor126})
		  -| ['compiler_generated'] )
	      end
	  %% Line 488
	  <[{'test','is_binary',{'f',Lbl},[Arg|[]]}|Instructions],Env> when 'true' ->
	      %% Line 489
	      case apply 'trans_type_test'/4
		       ('binary', Lbl, Arg, Env) of
		<{Code,Env1}> when 'true' ->
		    let <_cor129> =
			%% Line 490
			apply 'trans_fun'/2
			    (Instructions, Env1)
		    in  %% Line 490
			[Code|_cor129]
		( <_cor128> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor128})
		  -| ['compiler_generated'] )
	      end
	  %% Line 492
	  <[{'test','is_list',{'f',Lbl},[Arg|[]]}|Instructions],Env> when 'true' ->
	      %% Line 493
	      case apply 'trans_type_test'/4
		       ('list', Lbl, Arg, Env) of
		<{Code,Env1}> when 'true' ->
		    let <_cor131> =
			%% Line 494
			apply 'trans_fun'/2
			    (Instructions, Env1)
		    in  %% Line 494
			[Code|_cor131]
		( <_cor130> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor130})
		  -| ['compiler_generated'] )
	      end
	  %% Line 496
	  <[{'test','is_nonempty_list',{'f',Lbl},[Arg|[]]}|Instructions],Env> when 'true' ->
	      %% Line 497
	      case apply 'trans_type_test'/4
		       ('cons', Lbl, Arg, Env) of
		<{Code,Env1}> when 'true' ->
		    let <_cor133> =
			%% Line 498
			apply 'trans_fun'/2
			    (Instructions, Env1)
		    in  %% Line 498
			[Code|_cor133]
		( <_cor132> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor132})
		  -| ['compiler_generated'] )
	      end
	  %% Line 500
	  <[{'test','is_tuple',FLbl = {'f',_X_Lbl},[Xreg|[]]}|%% Line 501
							      [{'test','test_arity',_cor577,Args = [_cor578|[_cor579|[]]]}|Instructions]],%% Line 501
																	  Env>
	      when let <_cor580> =
		    call 'erlang':'=:='
			(_cor577, %% Line 501
				  FLbl)
		in  let <_cor581> =
			call 'erlang':'=:='
			    (_cor578, %% Line 501
				      Xreg)
		    in  call 'erlang':'and'
			    (_cor580, _cor581) ->
	      %% Line 502
	      apply 'trans_fun'/2
		  ([{'test','test_arity',FLbl,Args}|Instructions], Env)
	  %% Line 503
	  <[{'test','is_tuple',{_cor582,Lbl},[Arg|[]]}|Instructions],Env> when 'true' ->
	      %% Line 504
	      case apply 'trans_type_test'/4
		       ('tuple', Lbl, Arg, Env) of
		<{Code,Env1}> when 'true' ->
		    let <_cor135> =
			%% Line 505
			apply 'trans_fun'/2
			    (Instructions, Env1)
		    in  %% Line 505
			[Code|_cor135]
		( <_cor134> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor134})
		  -| ['compiler_generated'] )
	      end
	  %% Line 507
	  <[{'test','test_arity',{'f',Lbl},[Reg|[N|[]]]}|Instructions],Env> when 'true' ->
	      let <True> =
		  %% Line 508
		  apply 'mk_label'/1
		      ('new')
	      in  let <_cor139> =
		      %% Line 509
		      apply 'trans_arg'/1
			  (Reg)
		  in  let <_cor138> =
			  %% Line 510
			  call 'hipe_icode':'label_name'
			      (True)
		      in  let <_cor137> =
			      %% Line 510
			      apply 'map_label'/1
				  (Lbl)
			  in  let <I> =
				  %% Line 509
				  call 'hipe_icode':'mk_type'
				      ([_cor139|[]], {'tuple',N}, _cor138, _cor137)
			      in  let <_cor141> =
				      %% Line 511
				      apply 'trans_fun'/2
					  (Instructions, Env)
				  in  %% Line 511
				      [I|[True|_cor141]]
	  %% Line 513
	  <[{'test','is_map',{'f',Lbl},[Arg|[]]}|Instructions],Env> when 'true' ->
	      %% Line 514
	      case apply 'trans_type_test'/4
		       ('map', Lbl, Arg, Env) of
		<{Code,Env1}> when 'true' ->
		    let <_cor143> =
			%% Line 515
			apply 'trans_fun'/2
			    (Instructions, Env1)
		    in  %% Line 515
			[Code|_cor143]
		( <_cor142> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor142})
		  -| ['compiler_generated'] )
	      end
	  %% Line 518
	  <[{'select_val',Reg,{'f',Lbl},{'list',Cases}}|Instructions],Env> when 'true' ->
	      %% Line 519
	      case apply 'trans_select_stuff'/2
		       (Reg, Cases) of
		<{SwVar,CasePairs}> when 'true' ->
		    let <Len> =
			%% Line 520
			call 'erlang':'length'
			    (CasePairs)
		    in  let <_cor146> =
			    %% Line 521
			    apply 'map_label'/1
				(Lbl)
			in  let <I> =
				%% Line 521
				call 'hipe_icode':'mk_switch_val'
				    (SwVar, _cor146, Len, CasePairs)
			    in  let <_cor148> =
				    %% Line 523
				    apply 'trans_fun'/2
					(Instructions, Env)
				in  %% Line 523
				    [I|_cor148]
		( <_cor144> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor144})
		  -| ['compiler_generated'] )
	      end
	  %% Line 525
	  <[{'select_tuple_arity',Reg,{'f',Lbl},{'list',Cases}}|Instructions],Env> when 'true' ->
	      %% Line 526
	      case apply 'trans_select_stuff'/2
		       (Reg, Cases) of
		<{SwVar,CasePairs}> when 'true' ->
		    let <Len> =
			%% Line 527
			call 'erlang':'length'
			    (CasePairs)
		    in  let <_cor151> =
			    %% Line 528
			    apply 'map_label'/1
				(Lbl)
			in  let <I> =
				%% Line 528
				call 'hipe_icode':'mk_switch_tuple_arity'
				    (SwVar, _cor151, Len, CasePairs)
			    in  let <_cor153> =
				    %% Line 530
				    apply 'trans_fun'/2
					(Instructions, Env)
				in  %% Line 530
				    [I|_cor153]
		( <_cor149> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor149})
		  -| ['compiler_generated'] )
	      end
	  %% Line 532
	  <[{'jump',{_cor583,L}}|Instructions],Env> when 'true' ->
	      let <Label> =
		  %% Line 533
		  apply 'mk_label'/1
		      (L)
	      in  let <_cor155> =
		      %% Line 534
		      call 'hipe_icode':'label_name'
			  (Label)
		  in  let <I> =
			  %% Line 534
			  call 'hipe_icode':'mk_goto'
			      (_cor155)
		      in  let <_cor157> =
			      %% Line 535
			      apply 'trans_fun'/2
				  (Instructions, Env)
			  in  %% Line 535
			      [I|_cor157]
	  %% Line 537
	  <[{'move',Src,Dst}|Instructions],Env> when 'true' ->
	      let <Dst1> =
		  %% Line 538
		  apply 'mk_var'/1
		      (Dst)
	      in  let <Src1> =
		      %% Line 539
		      apply 'trans_arg'/1
			  (Src)
		  in  let <_cor160> =
			  %% Line 540
			  call 'hipe_icode':'mk_move'
			      (Dst1, Src1)
		      in  let <_cor161> =
			      %% Line 540
			      apply 'trans_fun'/2
				  (Instructions, Env)
			  in  %% Line 540
			      [_cor160|_cor161]
	  %% Line 542
	  <[{'catch',N,{_cor584,EndLabel}}|Instructions],Env> when 'true' ->
	      let <NewContLbl> =
		  %% Line 543
		  apply 'mk_label'/1
		      ('new')
	      in  let <_cor163> =
		      %% Line 544
		      apply 'trans_fun'/2
			  (Instructions, Env)
		  in  %% Line 544
		      [{'catch',N,EndLabel}|[NewContLbl|_cor163]]
	  %% Line 546
	  <[I = {'catch_end',_X_N}|Instructions],Env> when 'true' ->
	      let <_cor164> =
		  %% Line 547
		  apply 'trans_fun'/2
		      (Instructions, Env)
	      in  %% Line 547
		  [I|_cor164]
	  %% Line 549
	  <[{'try',N,{_cor585,EndLabel}}|Instructions],Env> when 'true' ->
	      let <NewContLbl> =
		  %% Line 550
		  apply 'mk_label'/1
		      ('new')
	      in  let <_cor166> =
		      %% Line 551
		      apply 'trans_fun'/2
			  (Instructions, Env)
		  in  %% Line 551
		      [{'try',N,EndLabel}|[NewContLbl|_cor166]]
	  %% Line 553
	  <[{'try_end',_X_N}|Instructions],Env> when 'true' ->
	      let <_cor167> =
		  %% Line 554
		  call 'hipe_icode':'mk_end_try'
		      ()
	      in  let <_cor168> =
		      %% Line 554
		      apply 'trans_fun'/2
			  (Instructions, Env)
		  in  %% Line 554
		      [_cor167|_cor168]
	  %% Line 556
	  <[I = {'try_case',_X_N}|Instructions],Env> when 'true' ->
	      let <_cor169> =
		  %% Line 557
		  apply 'trans_fun'/2
		      (Instructions, Env)
	      in  %% Line 557
		  [I|_cor169]
	  %% Line 559
	  <[{'try_case_end',Arg}|Instructions],Env> when 'true' ->
	      let <BadArg> =
		  %% Line 560
		  apply 'trans_arg'/1
		      (Arg)
	      in  let <ErrVar> =
		      %% Line 561
		      apply 'mk_var'/1
			  ('new')
		  in  let <_cor172> =
			  %% Line 562
			  apply 'mk_var'/1
			      ('new')
		      in  let <Vs> =
			      %% Line 562
			      [_cor172|[]]
			  in  let <_cor174> =
				  %% Line 563
				  call 'hipe_icode':'mk_const'
				      ('try_clause')
			      in  let <Atom> =
				      %% Line 563
				      call 'hipe_icode':'mk_move'
					  (ErrVar, _cor174)
				  in  let <Tuple> =
					  %% Line 564
					  call 'hipe_icode':'mk_primop'
					      (Vs, 'mktuple', [ErrVar|[BadArg|[]]])
				      in  let <Fail> =
					      %% Line 565
					      call 'hipe_icode':'mk_fail'
						  (Vs, 'error')
					  in  let <_cor178> =
						  %% Line 566
						  apply 'trans_fun'/2
						      (Instructions, Env)
					      in  %% Line 566
						  [Atom|[Tuple|[Fail|_cor178]]]
	  %% Line 568
	  <[{'raise',{'f',0},[Reg1|[Reg2|[]]],{'x',0}}|Instructions],Env> when 'true' ->
	      let <V1> =
		  %% Line 569
		  apply 'trans_arg'/1
		      (Reg1)
	      in  let <V2> =
		      %% Line 570
		      apply 'trans_arg'/1
			  (Reg2)
		  in  let <Fail> =
			  %% Line 571
			  call 'hipe_icode':'mk_fail'
			      ([V1|[V2|[]]], 'rethrow')
		      in  let <_cor182> =
			      %% Line 572
			      apply 'trans_fun'/2
				  (Instructions, Env)
			  in  %% Line 572
			      [Fail|_cor182]
	  %% Line 574
	  <[{'get_list',List,Head,Tail}|Instructions],Env> when 'true' ->
	      let <_cor183> =
		  %% Line 575
		  apply 'trans_arg'/1
		      (List)
	      in  let <TransList> =
		      %% Line 575
		      [_cor183|[]]
		  in  let <_cor185> =
			  %% Line 576
			  apply 'mk_var'/1
			      (Head)
		      in  let <I1> =
			      %% Line 576
			      call 'hipe_icode':'mk_primop'
				  ([_cor185|[]], 'unsafe_hd', TransList)
			  in  let <_cor187> =
				  %% Line 577
				  apply 'mk_var'/1
				      (Tail)
			      in  let <I2> =
				      %% Line 577
				      call 'hipe_icode':'mk_primop'
					  ([_cor187|[]], 'unsafe_tl', TransList)
				  in  %% Line 579
				      case <> of
					%% Line 580
					<>
					    when call 'erlang':'=/='
						  (Head,
						   List) ->
					    let <_cor189> =
						%% Line 581
						apply 'trans_fun'/2
						    (Instructions, Env)
					    in  %% Line 581
						[I1|[I2|_cor189]]
					%% Line 582
					<>
					    when call 'erlang':'=/='
						  (Tail,
						   List) ->
					    let <_cor190> =
						%% Line 583
						apply 'trans_fun'/2
						    (Instructions, Env)
					    in  %% Line 583
						[I2|[I1|_cor190]]
					%% Line 584
					<> when 'true' ->
					    do  %% Line 586
						call 'code_server':'error_msg'
						    ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[114|[114|[111|[114|[58|[32|[91|[126|[115|[58|[126|[119|[93|[58|[32|[104|[100|[32|[97|[110|[100|[32|[116|[108|[32|[114|[101|[103|[115|[32|[105|[100|[101|[110|[116|[105|[99|[97|[108|[32|[105|[110|[32|[103|[101|[116|[95|[108|[105|[115|[116|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], ['hipe_beam_to_icode'|[586]])
						%% Line 587
						call 'erlang':'error'
						    ('not_handled')
				      end
	  %% Line 590
	  <[{'get_tuple_element',Xreg,Index,Dst}|Instructions],Env> when 'true' ->
	      let <_cor197> =
		  %% Line 591
		  apply 'mk_var'/1
		      (Dst)
	      in  let <_cor196> =
		      %% Line 592
		      call 'erlang':'+'
			  (Index, 1)
		  in  let <_cor195> =
			  %% Line 593
			  apply 'trans_arg'/1
			      (Xreg)
		      in  let <I> =
			      %% Line 591
			      call 'hipe_icode':'mk_primop'
				  ([_cor197|[]], %% Line 592
						 {'unsafe_element',_cor196}, %% Line 593
									     [_cor195|[]])
			  in  let <_cor199> =
				  %% Line 594
				  apply 'trans_fun'/2
				      (Instructions, Env)
			      in  %% Line 594
				  [I|_cor199]
	  %% Line 596
	  <[{'set_tuple_element',Elem,Tuple,Index}|Instructions],Env> when 'true' ->
	      let <Elem1> =
		  %% Line 597
		  apply 'trans_arg'/1
		      (Elem)
	      in  let <_cor203> =
		      %% Line 598
		      apply 'mk_var'/1
			  (Tuple)
		  in  let <_cor202> =
			  %% Line 599
			  call 'erlang':'+'
			      (Index, 1)
		      in  let <_cor201> =
			      %% Line 600
			      apply 'mk_var'/1
				  (Tuple)
			  in  let <I> =
				  %% Line 598
				  call 'hipe_icode':'mk_primop'
				      ([_cor203|[]], %% Line 599
						     {'unsafe_update_element',_cor202}, %% Line 600
											[_cor201|[Elem1|[]]])
			      in  let <_cor205> =
				      %% Line 601
				      apply 'trans_fun'/2
					  (Instructions, Env)
				  in  %% Line 601
				      [I|_cor205]
	  %% Line 603
	  <[{'put_string',_X_Len,String,Dst}|Instructions],Env> when 'true' ->
	      let <_cor207> =
		  %% Line 604
		  apply 'mk_var'/1
		      (Dst)
	      in  let <_cor206> =
		      %% Line 604
		      apply 'trans_const'/1
			  (String)
		  in  let <Mov> =
			  %% Line 604
			  call 'hipe_icode':'mk_move'
			      (_cor207, _cor206)
		      in  let <_cor209> =
			      %% Line 605
			      apply 'trans_fun'/2
				  (Instructions, Env)
			  in  %% Line 605
			      [Mov|_cor209]
	  %% Line 607
	  <[{'put_list',Car,Cdr,Dest}|Instructions],Env> when 'true' ->
	      %% Line 608
	      case apply 'mk_move_and_var'/2
		       (Car, Env) of
		<{M1,V1,Env2}> when 'true' ->
		    %% Line 609
		    case apply 'mk_move_and_var'/2
			     (Cdr, Env2) of
		      <{M2,V2,Env3}> when 'true' ->
			  let <D> =
			      %% Line 610
			      apply 'mk_var'/1
				  (Dest)
			  in  let <_cor213> =
				  %% Line 611
				  call 'hipe_icode':'mk_primop'
				      ([D|[]], 'cons', [V1|[V2|[]]])
			      in  let <_cor214> =
				      %% Line 612
				      apply 'trans_fun'/2
					  (Instructions, Env3)
				  in  let <_cor215> =
					  %% Line 611
					  call 'erlang':'++'
					      (M2, [_cor213|_cor214])
				      in  %% Line 611
					  call 'erlang':'++'
					      (M1, _cor215)
		      ( <_cor211> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor211})
			-| ['compiler_generated'] )
		    end
		( <_cor210> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor210})
		  -| ['compiler_generated'] )
	      end
	  %% Line 614
	  <[{'put_tuple',_X_Size,Reg}|Instructions],Env> when 'true' ->
	      %% Line 615
	      case apply 'trans_puts'/2
		       (Instructions, Env) of
		<{Moves,Instructions2,Vars,Env2}> when 'true' ->
		    let <_cor217> =
			%% Line 616
			apply 'mk_var'/1
			    (Reg)
		    in  let <Dest> =
			    %% Line 616
			    [_cor217|[]]
			in  let <Src> =
				%% Line 617
				call 'lists':'reverse'
				    (Vars)
			    in  let <Primop> =
				    %% Line 618
				    call 'hipe_icode':'mk_primop'
					(Dest, 'mktuple', Src)
				in  let <_cor221> =
					%% Line 619
					apply 'trans_fun'/2
					    (Instructions2, Env2)
				    in  %% Line 619
					call 'erlang':'++'
					    (Moves, [Primop|_cor221])
		( <_cor216> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor216})
		  -| ['compiler_generated'] )
	      end
	  %% Line 622
	  <[{'badmatch',Arg}|Instructions],Env> when 'true' ->
	      let <BadVar> =
		  %% Line 623
		  apply 'trans_arg'/1
		      (Arg)
	      in  let <ErrVar> =
		      %% Line 624
		      apply 'mk_var'/1
			  ('new')
		  in  let <_cor224> =
			  %% Line 625
			  apply 'mk_var'/1
			      ('new')
		      in  let <Vs> =
			      %% Line 625
			      [_cor224|[]]
			  in  let <_cor226> =
				  %% Line 626
				  call 'hipe_icode':'mk_const'
				      ('badmatch')
			      in  let <Atom> =
				      %% Line 626
				      call 'hipe_icode':'mk_move'
					  (ErrVar, _cor226)
				  in  let <Tuple> =
					  %% Line 627
					  call 'hipe_icode':'mk_primop'
					      (Vs, 'mktuple', [ErrVar|[BadVar|[]]])
				      in  let <Fail> =
					      %% Line 628
					      call 'hipe_icode':'mk_fail'
						  (Vs, 'error')
					  in  let <_cor230> =
						  %% Line 629
						  apply 'trans_fun'/2
						      (Instructions, Env)
					      in  %% Line 629
						  [Atom|[Tuple|[Fail|_cor230]]]
	  %% Line 631
	  <['if_end'|Instructions],Env> when 'true' ->
	      let <V> =
		  %% Line 632
		  apply 'mk_var'/1
		      ('new')
	      in  let <_cor232> =
		      %% Line 633
		      call 'hipe_icode':'mk_const'
			  ('if_clause')
		  in  let <Mov> =
			  %% Line 633
			  call 'hipe_icode':'mk_move'
			      (V, _cor232)
		      in  let <Fail> =
			      %% Line 634
			      call 'hipe_icode':'mk_fail'
				  ([V|[]], 'error')
			  in  let <_cor235> =
				  %% Line 635
				  apply 'trans_fun'/2
				      (Instructions, Env)
			      in  %% Line 635
				  [Mov|[Fail|_cor235]]
	  %% Line 637
	  <[{'case_end',Arg}|Instructions],Env> when 'true' ->
	      let <BadArg> =
		  %% Line 638
		  apply 'trans_arg'/1
		      (Arg)
	      in  let <ErrVar> =
		      %% Line 639
		      apply 'mk_var'/1
			  ('new')
		  in  let <_cor238> =
			  %% Line 640
			  apply 'mk_var'/1
			      ('new')
		      in  let <Vs> =
			      %% Line 640
			      [_cor238|[]]
			  in  let <_cor240> =
				  %% Line 641
				  call 'hipe_icode':'mk_const'
				      ('case_clause')
			      in  let <Atom> =
				      %% Line 641
				      call 'hipe_icode':'mk_move'
					  (ErrVar, _cor240)
				  in  let <Tuple> =
					  %% Line 642
					  call 'hipe_icode':'mk_primop'
					      (Vs, 'mktuple', [ErrVar|[BadArg|[]]])
				      in  let <Fail> =
					      %% Line 643
					      call 'hipe_icode':'mk_fail'
						  (Vs, 'error')
					  in  let <_cor244> =
						  %% Line 644
						  apply 'trans_fun'/2
						      (Instructions, Env)
					      in  %% Line 644
						  [Atom|[Tuple|[Fail|_cor244]]]
	  %% Line 646
	  <[{'call_fun',N}|[{'deallocate',_cor586}|['return'|Instructions]]],Env> when 'true' ->
	      let <_cor245> =
		  %% Line 647
		  call 'erlang':'+'
		      (N, 1)
	      in  let <Args> =
		      %% Line 647
		      apply 'extract_fun_args'/1
			  (_cor245)
		  in  let <_cor247> =
			  %% Line 648
			  call 'hipe_icode':'mk_comment'
			      ('enter_fun')
		      in  let <_cor248> =
			      %% Line 649
			      call 'hipe_icode':'mk_enter_primop'
				  ('enter_fun', Args)
			  in  let <_cor249> =
				  %% Line 649
				  apply 'trans_fun'/2
				      (Instructions, Env)
			      in  %% Line 648
				  [_cor247|%% Line 649
					   [_cor248|_cor249]]
	  %% Line 651
	  <[{'call_fun',N}|Instructions],Env> when 'true' ->
	      let <_cor250> =
		  %% Line 652
		  call 'erlang':'+'
		      (N, 1)
	      in  let <Args> =
		      %% Line 652
		      apply 'extract_fun_args'/1
			  (_cor250)
		  in  let <_cor252> =
			  %% Line 653
			  apply 'mk_var'/1
			      ({'r',0})
		      in  let <Dst> =
			      %% Line 653
			      [_cor252|[]]
			  in  let <_cor254> =
				  %% Line 654
				  call 'hipe_icode':'mk_comment'
				      ('call_fun')
			      in  let <_cor255> =
				      %% Line 655
				      call 'hipe_icode':'mk_primop'
					  (Dst, 'call_fun', Args)
				  in  let <_cor256> =
					  %% Line 655
					  apply 'trans_fun'/2
					      (Instructions, Env)
				      in  %% Line 654
					  [_cor254|%% Line 655
						   [_cor255|_cor256]]
	  %% Line 657
	  <[{'patched_make_fun',MFA,Magic,FreeVarNum,Index}|Instructions],Env> when 'true' ->
	      let <Args> =
		  %% Line 658
		  apply 'extract_fun_args'/1
		      (FreeVarNum)
	      in  let <_cor258> =
		      %% Line 659
		      apply 'mk_var'/1
			  ({'r',0})
		  in  let <Dst> =
			  %% Line 659
			  [_cor258|[]]
		      in  let <Fun> =
			      %% Line 660
			      call 'hipe_icode':'mk_primop'
				  (Dst, %% Line 661
					{'mkfun',MFA,Magic,Index}, %% Line 662
								   Args)
			  in  let <_cor261> =
				  %% Line 664
				  apply 'trans_fun'/2
				      (Instructions, Env)
			      in  %% Line 664
				  [Fun|_cor261]
	  %% Line 666
	  <[{'test','is_function',{'f',Lbl},[Arg|[]]}|Instructions],Env> when 'true' ->
	      %% Line 667
	      case apply 'trans_type_test'/4
		       ('function', Lbl, Arg, Env) of
		<{Code,Env1}> when 'true' ->
		    let <_cor263> =
			%% Line 668
			apply 'trans_fun'/2
			    (Instructions, Env1)
		    in  %% Line 668
			[Code|_cor263]
		( <_cor262> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor262})
		  -| ['compiler_generated'] )
	      end
	  %% Line 670
	  <[{'call_ext_only',_X_N,{'extfunc',M,F,A}}|Instructions],Env> when 'true' ->
	      let <Args> =
		  %% Line 671
		  apply 'extract_fun_args'/1
		      (A)
	      in  let <I> =
		      %% Line 672
		      apply 'trans_enter'/3
			  ({M,F,A}, Args, 'remote')
		  in  let <_cor266> =
			  %% Line 673
			  call 'hipe_icode':'mk_comment'
			      ('call_ext_only')
		      in  let <_cor267> =
			      %% Line 673
			      apply 'trans_fun'/2
				  (Instructions, Env)
			  in  %% Line 673
			      [_cor266|[I|_cor267]]
	  %% Line 683
	  <[{'test','bs_start_match2',{'f',Lbl},[X|[_X_Live|[Max|[Ms|[]]]]]}|Instructions],Env> when 'true' ->
	      let <Bin> =
		  %% Line 684
		  apply 'trans_arg'/1
		      (X)
	      in  let <MsVar> =
		      %% Line 685
		      apply 'mk_var'/1
			  (Ms)
		  in  %% Line 686
		      apply 'trans_op_call'/6
			  ({'hipe_bs_primop',{'bs_start_match',Max}}, Lbl, [Bin|[]], %% Line 687
										     [MsVar|[]], %% Line 687
												 Env, %% Line 687
												      Instructions)
	  %% Line 688
	  <[{'test','bs_get_float2',{'f',Lbl},[Ms|[_X_Live|[Size|[Unit|[{'field_flags',Flags0}|[X|[]]]]]]]}|%% Line 689
													    Instructions],%% Line 689
															  Env> when 'true' ->
	      let <Dst> =
		  %% Line 690
		  apply 'mk_var'/1
		      (X)
	      in  let <MsVar> =
		      %% Line 691
		      apply 'mk_var'/1
			  (Ms)
		  in  let <Flags> =
			  %% Line 692
			  apply 'resolve_native_endianess'/1
			      (Flags0)
		      in  let <Name,Args> =
			      %% Line 694
			      case Size of
				%% Line 695
				<{'integer',NoBits}>
				    when let <_cor273> =
					  call 'erlang':'is_integer'
					      (NoBits)
				      in  let <_cor274> =
					      call 'erlang':'>='
						  (NoBits, 0)
					  in  call 'erlang':'and'
						  (_cor273, _cor274) ->
				    let <_cor275> =
					%% Line 696
					call 'erlang':'*'
					    (NoBits, Unit)
				    in  %% Line 696
					<{'bs_get_float',_cor275,Flags},[MsVar|[]]>
				%% Line 697
				<{'integer',NoBits}>
				    when let <_cor276> =
					  call 'erlang':'is_integer'
					      (NoBits)
				      in  let <_cor277> =
					      call 'erlang':'<'
						  (NoBits, 0)
					  in  call 'erlang':'and'
						  (_cor276, _cor277) ->
				    do  %% Line 698
					call 'io':'format'
					    ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[88|[73|[84|[69|[68|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[64|[126|[119|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [{'bad_bs_size_constant',Size}|['hipe_beam_to_icode'|[698]]])
					%% Line 698
					call 'erlang':'error'
					    ({'hipe_beam_to_icode',698,{'bad_bs_size_constant',Size}})
				%% Line 699
				<BitReg> when 'true' ->
				    let <Bits> =
					%% Line 700
					apply 'mk_var'/1
					    (BitReg)
				    in  %% Line 701
					<{'bs_get_float',Unit,Flags},[MsVar|[Bits|[]]]>
			      end
			  in  %% Line 703
			      apply 'trans_op_call'/6
				  ({'hipe_bs_primop',Name}, Lbl, Args, [Dst|[MsVar|[]]], Env, Instructions)
	  %% Line 704
	  <[{'test','bs_get_integer2',{'f',Lbl},[Ms|[_X_Live|[Size|[Unit|[{'field_flags',Flags0}|[X|[]]]]]]]}|%% Line 705
													      Instructions],%% Line 705
															    Env> when 'true' ->
	      let <Dst> =
		  %% Line 706
		  apply 'mk_var'/1
		      (X)
	      in  let <MsVar> =
		      %% Line 707
		      apply 'mk_var'/1
			  (Ms)
		  in  let <Flags> =
			  %% Line 708
			  apply 'resolve_native_endianess'/1
			      (Flags0)
		      in  let <Name,Args> =
			      %% Line 710
			      case Size of
				%% Line 711
				<{'integer',NoBits}>
				    when let <_cor288> =
					  call 'erlang':'is_integer'
					      (NoBits)
				      in  let <_cor289> =
					      call 'erlang':'>='
						  (NoBits, 0)
					  in  call 'erlang':'and'
						  (_cor288, _cor289) ->
				    let <_cor290> =
					%% Line 712
					call 'erlang':'*'
					    (NoBits, Unit)
				    in  %% Line 712
					<{'bs_get_integer',_cor290,Flags},[MsVar|[]]>
				%% Line 713
				<{'integer',NoBits}>
				    when let <_cor291> =
					  call 'erlang':'is_integer'
					      (NoBits)
				      in  let <_cor292> =
					      call 'erlang':'<'
						  (NoBits, 0)
					  in  call 'erlang':'and'
						  (_cor291, _cor292) ->
				    do  %% Line 714
					call 'io':'format'
					    ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[88|[73|[84|[69|[68|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[64|[126|[119|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [{'bad_bs_size_constant',Size}|['hipe_beam_to_icode'|[714]]])
					%% Line 714
					call 'erlang':'error'
					    ({'hipe_beam_to_icode',714,{'bad_bs_size_constant',Size}})
				%% Line 715
				<BitReg> when 'true' ->
				    let <Bits> =
					%% Line 716
					apply 'mk_var'/1
					    (BitReg)
				    in  %% Line 717
					<{'bs_get_integer',Unit,Flags},[MsVar|[Bits|[]]]>
			      end
			  in  %% Line 719
			      apply 'trans_op_call'/6
				  ({'hipe_bs_primop',Name}, Lbl, Args, [Dst|[MsVar|[]]], Env, Instructions)
	  %% Line 720
	  <[{'test','bs_get_binary2',{'f',Lbl},[Ms|[_X_Live|[Size|[Unit|[{'field_flags',Flags}|[X|[]]]]]]]}|%% Line 721
													    Instructions],%% Line 721
															  Env> when 'true' ->
	      let <MsVar> =
		  %% Line 722
		  apply 'mk_var'/1
		      (Ms)
	      in  let <Name,Args,Dsts> =
		      %% Line 724
		      case Size of
			%% Line 725
			<{'atom','all'}> when 'true' ->
			    %% Line 726
			    case <> of
			      <>
				  when call 'erlang':'=:='
					(Ms,
					 X) ->
				  let <_cor301> =
				      %% Line 727
				      apply 'mk_var'/1
					  (X)
				  in  %% Line 727
				      <{'bs_get_binary_all',Unit,Flags},[MsVar|[]],[_cor301|[]]>
			      %% Line 728
			      <> when 'true' ->
				  let <_cor302> =
				      %% Line 729
				      apply 'mk_var'/1
					  (X)
				  in  %% Line 729
				      <{'bs_get_binary_all_2',Unit,Flags},[MsVar|[]],[_cor302|[MsVar|[]]]>
			    end
			%% Line 731
			<{'integer',NoBits}>
			    when let <_cor303> =
				  call 'erlang':'is_integer'
				      (NoBits)
			      in  let <_cor304> =
				      call 'erlang':'>='
					  (NoBits, 0)
				  in  call 'erlang':'and'
					  (_cor303, _cor304) ->
			    let <_cor306> =
				%% Line 732
				call 'erlang':'*'
				    (NoBits, Unit)
			    in  let <_cor305> =
				    %% Line 732
				    apply 'mk_var'/1
					(X)
				in  %% Line 732
				    <{'bs_get_binary',_cor306,Flags},[MsVar|[]],[_cor305|[MsVar|[]]]>
			%% Line 733
			<{'integer',NoBits}>
			    when let <_cor307> =
				  call 'erlang':'is_integer'
				      (NoBits)
			      in  let <_cor308> =
				      call 'erlang':'<'
					  (NoBits, 0)
				  in  call 'erlang':'and'
					  (_cor307, _cor308) ->
			    do  %% Line 734
				call 'io':'format'
				    ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[88|[73|[84|[69|[68|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[64|[126|[119|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [{'bad_bs_size_constant',Size}|['hipe_beam_to_icode'|[734]]])
				%% Line 734
				call 'erlang':'error'
				    ({'hipe_beam_to_icode',734,{'bad_bs_size_constant',Size}})
			%% Line 735
			<BitReg> when 'true' ->
			    let <Bits> =
				%% Line 736
				apply 'mk_var'/1
				    (BitReg)
			    in  let <_cor313> =
				    %% Line 737
				    apply 'mk_var'/1
					(X)
				in  %% Line 737
				    <{'bs_get_binary',Unit,Flags},[MsVar|[Bits|[]]],[_cor313|[MsVar|[]]]>
		      end
		  in  %% Line 739
		      apply 'trans_op_call'/6
			  ({'hipe_bs_primop',Name}, Lbl, Args, Dsts, Env, Instructions)
	  %% Line 740
	  <[{'test','bs_skip_bits2',{'f',Lbl},[Ms|[Size|[NumBits|[{'field_flags',Flags}|[]]]]]}|%% Line 741
												Instructions],%% Line 741
													      Env> when 'true' ->
	      let <MsVar> =
		  %% Line 743
		  apply 'mk_var'/1
		      (Ms)
	      in  let <Name,Args> =
		      %% Line 745
		      case Size of
			%% Line 746
			<{'atom','all'}> when 'true' ->
			    %% Line 747
			    <{'bs_skip_bits_all',NumBits,Flags},[MsVar|[]]>
			%% Line 748
			<{'integer',BitSize}>
			    when let <_cor318> =
				  call 'erlang':'is_integer'
				      (BitSize)
			      in  let <_cor319> =
				      call 'erlang':'>='
					  (BitSize, 0)
				  in  call 'erlang':'and'
					  (_cor318, _cor319) ->
			    let <_cor320> =
				%% Line 749
				call 'erlang':'*'
				    (BitSize, NumBits)
			    in  %% Line 749
				<{'bs_skip_bits',_cor320},[MsVar|[]]>
			%% Line 750
			<{'integer',BitSize}>
			    when let <_cor321> =
				  call 'erlang':'is_integer'
				      (BitSize)
			      in  let <_cor322> =
				      call 'erlang':'<'
					  (BitSize, 0)
				  in  call 'erlang':'and'
					  (_cor321, _cor322) ->
			    do  %% Line 751
				call 'io':'format'
				    ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[88|[73|[84|[69|[68|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[64|[126|[119|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [{'bad_bs_size_constant',Size}|['hipe_beam_to_icode'|[751]]])
				%% Line 751
				call 'erlang':'error'
				    ({'hipe_beam_to_icode',751,{'bad_bs_size_constant',Size}})
			%% Line 752
			<X> when 'true' ->
			    let <Src> =
				%% Line 753
				apply 'mk_var'/1
				    (X)
			    in  %% Line 754
				<{'bs_skip_bits',NumBits},[MsVar|[Src|[]]]>
		      end
		  in  %% Line 756
		      apply 'trans_op_call'/6
			  ({'hipe_bs_primop',Name}, Lbl, Args, [MsVar|[]], Env, Instructions)
	  %% Line 757
	  <[{'test','bs_test_unit',{'f',Lbl},[Ms|[Unit|[]]]}|%% Line 758
							     Instructions],%% Line 758
									   Env> when 'true' ->
	      let <MsVar> =
		  %% Line 760
		  apply 'mk_var'/1
		      (Ms)
	      in  %% Line 761
		  apply 'trans_op_call'/6
		      ({'hipe_bs_primop',{'bs_test_unit',Unit}}, Lbl, %% Line 762
								      [MsVar|[]], %% Line 762
										  [], %% Line 762
										      Env, %% Line 762
											   Instructions)
	  %% Line 763
	  <[{'test','bs_match_string',{'f',Lbl},[Ms|[BitSize|[Bin|[]]]]}|%% Line 764
									 Instructions],%% Line 764
										       Env> when 'true' ->
	      let <True> =
		  %% Line 765
		  apply 'mk_label'/1
		      ('new')
	      in  let <FalseLabName> =
		      %% Line 766
		      apply 'map_label'/1
			  (Lbl)
		  in  let <TrueLabName> =
			  %% Line 767
			  call 'hipe_icode':'label_name'
			      (True)
		      in  let <MsVar> =
			      %% Line 768
			      apply 'mk_var'/1
				  (Ms)
			  in  let <TmpVar> =
				  %% Line 769
				  apply 'mk_var'/1
				      ('new')
			      in  let <ByteSize> =
				      %% Line 770
				      call 'erlang':'div'
					  (BitSize, 8)
				  in  let <ExtraBits> =
					  %% Line 771
					  call 'erlang':'rem'
					      (BitSize, 8)
				      in  let <WordSize> =
					      %% Line 772
					      call 'hipe_rtl_arch':'word_size'
						  ()
					  in  %% Line 773
					      case <> of
						<>
						    when call 'erlang':'=:='
							  (ExtraBits,
							   0) ->
						    %% Line 774
						    apply 'trans_op_call'/6
							({'hipe_bs_primop',{'bs_match_string',Bin,ByteSize}}, Lbl, %% Line 775
														   [MsVar|[]], %% Line 775
															       [MsVar|[]], %% Line 775
																	   Env, %% Line 775
																		Instructions)
						%% Line 776
						<>
						    when try
							  let <_cor339> =
							      call 'erlang':'*'
								  (WordSize, 8)
							  in  let <_cor340> =
								  call 'erlang':'-'
								      (_cor339, 5)
							      in  call 'erlang':'=<'
								      (BitSize, _cor340)
						      of <Try> ->
							  Try
						      catch <T,R> ->
							  'false' ->
						    %% Line 777
						    case ( Bin
							   -| ['reuse_for_context'] ) of
						      <#{#<Int>(BitSize,1,'integer',['unsigned'|['big']]),
							 #<_cor587>('all',1,'binary',['unsigned'|['big']])}#> when 'true' ->
							  %% Line 778
							  case apply 'trans_one_op_call'/5
								   ({'hipe_bs_primop',{'bs_get_integer',BitSize,0}}, Lbl, %% Line 779
															  [MsVar|[]], %% Line 779
																      [TmpVar|[MsVar|[]]], %% Line 779
																			   Env) of
							    <{I1,Env1}> when 'true' ->
								let <I2> =
								    %% Line 780
								    call 'hipe_icode':'mk_type'
									([TmpVar|[]], {'integer',Int}, TrueLabName, FalseLabName)
								in  let <_cor344> =
									%% Line 781
									apply 'trans_fun'/2
									    (Instructions, Env1)
								    in  let <_cor345> =
									    %% Line 781
									    [I2|[True|_cor344]]
									in  %% Line 781
									    call 'erlang':'++'
										(I1, _cor345)
							    ( <_cor342> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_cor342})
							      -| ['compiler_generated'] )
							  end
						      ( <_cor341> when 'true' ->
							    do  primop 'bs_context_to_binary'
								    (_cor341)
								primop 'match_fail'
								    ({'badmatch',_cor341})
							-| ['compiler_generated'] )
						    end
						%% Line 782
						<> when 'true' ->
						    %% Line 783
						    case ( Bin
							   -| ['reuse_for_context'] ) of
						      <#{#<RealBin>(ByteSize,8,'binary',['unsigned'|['big']]),
							 #<Int>(ExtraBits,1,'integer',['unsigned'|['big']]),
							 #<_cor588>('all',1,'binary',['unsigned'|['big']])}#> when 'true' ->
							  %% Line 784
							  case apply 'trans_one_op_call'/5
								   ({'hipe_bs_primop',{'bs_match_string',RealBin,ByteSize}}, Lbl, %% Line 785
																  [MsVar|[]], %% Line 785
																	      [MsVar|[]], %% Line 785
																			  Env) of
							    <{I1,Env1}> when 'true' ->
								%% Line 786
								case apply 'trans_one_op_call'/5
									 ({'hipe_bs_primop',{'bs_get_integer',ExtraBits,0}}, Lbl, %% Line 787
																  [MsVar|[]], %% Line 787
																	      [TmpVar|[MsVar|[]]], %% Line 787
																				   Env1) of
								  <{I2,Env2}> when 'true' ->
								      let <I3> =
									  %% Line 788
									  call 'hipe_icode':'mk_type'
									      ([TmpVar|[]], {'integer',Int}, TrueLabName, FalseLabName)
								      in  let <_cor350> =
									      %% Line 789
									      apply 'trans_fun'/2
										  (Instructions, Env2)
									  in  let <_cor351> =
										  %% Line 789
										  [I3|[True|_cor350]]
									      in  let <_cor352> =
										      %% Line 789
										      call 'erlang':'++'
											  (I2, _cor351)
										  in  %% Line 789
										      call 'erlang':'++'
											  (I1, _cor352)
								  ( <_cor348> when 'true' ->
									primop 'match_fail'
									    ({'badmatch',_cor348})
								    -| ['compiler_generated'] )
								end
							    ( <_cor347> when 'true' ->
								  primop 'match_fail'
								      ({'badmatch',_cor347})
							      -| ['compiler_generated'] )
							  end
						      ( <_cor346> when 'true' ->
							    do  primop 'bs_context_to_binary'
								    (_cor346)
								primop 'match_fail'
								    ({'badmatch',_cor346})
							-| ['compiler_generated'] )
						    end
					      end
	  %% Line 791
	  <[{'bs_context_to_binary',Var}|Instructions],Env> when 'true' ->
	      let <_cor353> =
		  %% Line 793
		  apply 'trans_arg'/1
		      (Var)
	      in  let <IVars> =
		      %% Line 793
		      [_cor353|[]]
		  in  let <_cor355> =
			  %% Line 794
			  call 'hipe_icode':'mk_primop'
			      (IVars, {'hipe_bs_primop','bs_context_to_binary'}, IVars)
		      in  let <_cor356> =
			      %% Line 795
			      apply 'trans_fun'/2
				  (Instructions, Env)
			  in  %% Line 794
			      [_cor355|_cor356]
	  %% Line 796
	  <[{'bs_append',{'f',Lbl},Size,W,R,U,Binary,{'field_flags',F},Dst}|%% Line 797
									    Instructions],%% Line 797
											  Env> when 'true' ->
	      let <SizeArg> =
		  %% Line 799
		  apply 'trans_arg'/1
		      (Size)
	      in  let <BinArg> =
		      %% Line 800
		      apply 'trans_arg'/1
			  (Binary)
		  in  let <IcodeDst> =
			  %% Line 801
			  apply 'mk_var'/1
			      (Dst)
		      in  let <Offset> =
			      %% Line 802
			      apply 'mk_var'/1
				  ('reg')
			  in  let <Base> =
				  %% Line 803
				  apply 'mk_var'/1
				      ('reg')
			      in  %% Line 804
				  apply 'trans_bin_call'/8
				      ({'hipe_bs_primop',{'bs_append',W,R,U,F}}, Lbl, [SizeArg|[BinArg|[]]], %% Line 805
													     [IcodeDst|[Base|[Offset|[]]]], %% Line 806
																	    Base, %% Line 806
																		  Offset, %% Line 806
																			  Env, %% Line 806
																			       Instructions)
	  %% Line 807
	  <[{'bs_private_append',{'f',Lbl},Size,U,Binary,{'field_flags',F},Dst}|%% Line 808
										Instructions],%% Line 808
											      Env> when 'true' ->
	      let <SizeArg> =
		  %% Line 810
		  apply 'trans_arg'/1
		      (Size)
	      in  let <BinArg> =
		      %% Line 811
		      apply 'trans_arg'/1
			  (Binary)
		  in  let <IcodeDst> =
			  %% Line 812
			  apply 'mk_var'/1
			      (Dst)
		      in  let <Offset> =
			      %% Line 813
			      apply 'mk_var'/1
				  ('reg')
			  in  let <Base> =
				  %% Line 814
				  apply 'mk_var'/1
				      ('reg')
			      in  %% Line 815
				  apply 'trans_bin_call'/8
				      ({'hipe_bs_primop',{'bs_private_append',U,F}}, %% Line 816
										     Lbl, %% Line 816
											  [SizeArg|[BinArg|[]]], %% Line 817
														 [IcodeDst|[Base|[Offset|[]]]], %% Line 818
																		Base, %% Line 818
																		      Offset, %% Line 818
																			      Env, %% Line 818
																				   Instructions)
	  %% Line 819
	  <['bs_init_writable'|Instructions],Env> when 'true' ->
	      let <_cor367> =
		  %% Line 820
		  apply 'mk_var'/1
		      ({'x',0})
	      in  let <Vars> =
		      %% Line 820
		      [_cor367|[]]
		  in  let <_cor369> =
			  %% Line 821
			  call 'hipe_icode':'mk_primop'
			      (Vars, {'hipe_bs_primop','bs_init_writable'}, Vars)
		      in  let <_cor370> =
			      %% Line 822
			      apply 'trans_fun'/2
				  (Instructions, Env)
			  in  %% Line 821
			      [_cor369|%% Line 822
				       [_cor370|[]]]
	  %% Line 823
	  <[{'bs_save2',Ms,IndexName}|Instructions],Env> when 'true' ->
	      let <_cor372> =
		  %% Line 825
		  case IndexName of
		    %% Line 826
		    <{'atom','start'}> when 'true' ->
			0
		    %% Line 827
		    <_cor589> when 'true' ->
			call 'erlang':'+'
			    (IndexName, 1)
		  end
	      in  let <_cor374> =
		      %% Line 829
		      apply 'mk_var'/1
			  (Ms)
		  in  let <MsVars> =
			  %% Line 829
			  [_cor374|[]]
		      in  let <_cor376> =
			      %% Line 830
			      call 'hipe_icode':'mk_primop'
				  (MsVars, {'hipe_bs_primop',{'bs_save',_cor372}}, MsVars)
			  in  let <_cor377> =
				  %% Line 831
				  apply 'trans_fun'/2
				      (Instructions, Env)
			      in  %% Line 830
				  [_cor376|_cor377]
	  %% Line 832
	  <[{'bs_restore2',Ms,IndexName}|Instructions],Env> when 'true' ->
	      let <_cor379> =
		  %% Line 834
		  case IndexName of
		    %% Line 835
		    <{'atom','start'}> when 'true' ->
			0
		    %% Line 836
		    <_cor590> when 'true' ->
			call 'erlang':'+'
			    (IndexName, 1)
		  end
	      in  let <_cor381> =
		      %% Line 838
		      apply 'mk_var'/1
			  (Ms)
		  in  let <MsVars> =
			  %% Line 838
			  [_cor381|[]]
		      in  let <_cor383> =
			      %% Line 839
			      call 'hipe_icode':'mk_primop'
				  (MsVars, {'hipe_bs_primop',{'bs_restore',_cor379}}, MsVars)
			  in  let <_cor384> =
				  %% Line 840
				  apply 'trans_fun'/2
				      (Instructions, Env)
			      in  %% Line 839
				  [_cor383|_cor384]
	  %% Line 841
	  <[{'test','bs_test_tail2',{'f',Lbl},[Ms|[Numbits|[]]]}|Instructions],Env> when 'true' ->
	      let <MsVar> =
		  %% Line 842
		  apply 'mk_var'/1
		      (Ms)
	      in  %% Line 843
		  apply 'trans_op_call'/6
		      ({'hipe_bs_primop',{'bs_test_tail',Numbits}}, %% Line 844
								    Lbl, %% Line 844
									 [MsVar|[]], %% Line 844
										     [], %% Line 844
											 Env, %% Line 844
											      Instructions)
	  %% Line 848
	  <[{'bs_init2',{'f',Lbl},Size,_X_Words,_X_LiveRegs,{'field_flags',Flags0},X}|%% Line 849
										      Instructions],%% Line 849
												    Env> when 'true' ->
	      let <Dst> =
		  %% Line 850
		  apply 'mk_var'/1
		      (X)
	      in  let <Flags> =
		      %% Line 851
		      apply 'resolve_native_endianess'/1
			  (Flags0)
		  in  let <Offset> =
			  %% Line 852
			  apply 'mk_var'/1
			      ('reg')
		      in  let <Base> =
			      %% Line 853
			      apply 'mk_var'/1
				  ('reg')
			  in  let <Name,Args> =
				  %% Line 855
				  case Size of
				    %% Line 856
				    <NoBytes>
					when call 'erlang':'is_integer'
					      (Size) ->
					%% Line 857
					<{'bs_init',Size,Flags},[]>
				    %% Line 858
				    <BitReg> when 'true' ->
					let <Bits> =
					    %% Line 859
					    apply 'mk_var'/1
						(BitReg)
					in  %% Line 860
					    <{'bs_init',Flags},[Bits|[]]>
				  end
			      in  %% Line 862
				  apply 'trans_bin_call'/8
				      ({'hipe_bs_primop',Name}, Lbl, Args, [Dst|[Base|[Offset|[]]]], %% Line 863
												     Base, %% Line 863
													   Offset, %% Line 863
														   Env, %% Line 863
															Instructions)
	  %% Line 864
	  <[{'bs_init_bits',{'f',Lbl},Size,_X_Words,_X_LiveRegs,{'field_flags',Flags0},X}|%% Line 865
											  Instructions],%% Line 865
													Env> when 'true' ->
	      let <Dst> =
		  %% Line 866
		  apply 'mk_var'/1
		      (X)
	      in  let <Flags> =
		      %% Line 867
		      apply 'resolve_native_endianess'/1
			  (Flags0)
		  in  let <Offset> =
			  %% Line 868
			  apply 'mk_var'/1
			      ('reg')
		      in  let <Base> =
			      %% Line 869
			      apply 'mk_var'/1
				  ('reg')
			  in  let <Name,Args> =
				  %% Line 871
				  case Size of
				    %% Line 872
				    <NoBits>
					when call 'erlang':'is_integer'
					      (Size) ->
					%% Line 873
					<{'bs_init_bits',NoBits,Flags},[]>
				    %% Line 874
				    <BitReg> when 'true' ->
					let <Bits> =
					    %% Line 875
					    apply 'mk_var'/1
						(BitReg)
					in  %% Line 876
					    <{'bs_init_bits',Flags},[Bits|[]]>
				  end
			      in  %% Line 878
				  apply 'trans_bin_call'/8
				      ({'hipe_bs_primop',Name}, Lbl, Args, [Dst|[Base|[Offset|[]]]], %% Line 879
												     Base, %% Line 879
													   Offset, %% Line 879
														   Env, %% Line 879
															Instructions)
	  %% Line 880
	  <[{'bs_add',{'f',Lbl},[Old|[New|[Unit|[]]]],Res}|Instructions],Env> when 'true' ->
	      let <Dst> =
		  %% Line 881
		  apply 'mk_var'/1
		      (Res)
	      in  let <Temp> =
		      %% Line 882
		      apply 'mk_var'/1
			  ('new')
		  in  let <_cor418> =
			  %% Line 884
			  case <New,Unit> of
			    %% Line 885
			    <{'integer',NewInt},_cor591> when 'true' ->
				let <_cor404> =
				    %% Line 886
				    call 'erlang':'*'
					(NewInt, Unit)
				in  let <_cor405> =
					%% Line 886
					call 'hipe_icode':'mk_const'
					    (_cor404)
				    in  let <_cor406> =
					    %% Line 886
					    call 'hipe_icode':'mk_move'
						(Temp, _cor405)
					in  %% Line 886
					    [_cor406|[]]
			    %% Line 887
			    <_cor592,1> when 'true' ->
				let <NewVar> =
				    %% Line 888
				    apply 'mk_var'/1
					(New)
				in  let <_cor408> =
					%% Line 889
					call 'hipe_icode':'mk_move'
					    (Temp, NewVar)
				    in  %% Line 889
					[_cor408|[]]
			    %% Line 890
			    <_fol16,_fol17> when 'true' ->
				let <NewVar> =
				    %% Line 891
				    apply 'mk_var'/1
					(New)
				in  %% Line 892
				    case <> of
				      <>
					  when call 'erlang':'=:='
						(Lbl,
						 0) ->
					  let <_cor410> =
					      %% Line 894
					      call 'hipe_icode':'mk_const'
						  (Unit)
					  in  let <_cor411> =
						  %% Line 893
						  call 'hipe_icode':'mk_primop'
						      ([Temp|[]], '*', %% Line 894
								       [NewVar|[_cor410|[]]])
					      in  %% Line 893
						  [_cor411|%% Line 894
							   []]
				      %% Line 895
				      <> when 'true' ->
					  let <Succ> =
					      %% Line 896
					      apply 'mk_label'/1
						  ('new')
					  in  let <_cor415> =
						  %% Line 898
						  call 'hipe_icode':'mk_const'
						      (Unit)
					      in  let <_cor414> =
						      %% Line 899
						      call 'hipe_icode':'label_name'
							  (Succ)
						  in  let <_cor413> =
							  %% Line 899
							  apply 'map_label'/1
							      (Lbl)
						      in  let <_cor416> =
							      %% Line 897
							      call 'hipe_icode':'mk_primop'
								  ([Temp|[]], '*', %% Line 898
										   [NewVar|[_cor415|[]]], _cor414, _cor413)
							  in  %% Line 897
							      [_cor416|%% Line 900
								       [Succ|[]]]
				    end
			  end
		      in  let <Succ2> =
			      %% Line 903
			      apply 'mk_label'/1
				  ('new')
			  in  let <FailLblName,FailCode> =
				  %% Line 905
				  case <> of
				    <>
					when call 'erlang':'=:='
					      (Lbl,
					       0) ->
					let <FailLbl> =
					    %% Line 906
					    apply 'mk_label'/1
						('new')
					in  let <_cor424> =
						%% Line 907
						call 'hipe_icode':'label_name'
						    (FailLbl)
					    in  let <_cor422> =
						    %% Line 909
						    call 'hipe_icode':'mk_const'
							('badarg')
						in  let <_cor423> =
							%% Line 909
							call 'hipe_icode':'mk_fail'
							    ([_cor422|[]], 'error')
						    in  <_cor424,%% Line 908
								 [FailLbl|%% Line 909
									  [_cor423|[]]]>
				    %% Line 910
				    <> when 'true' ->
					let <_cor425> =
					    %% Line 911
					    apply 'map_label'/1
						(Lbl)
					in  <_cor425,%% Line 911
						     []>
				  end
			      in  let <_cor430> =
				      %% Line 914
				      call 'hipe_icode':'mk_const'
					  (0)
				  in  let <_cor429> =
					  %% Line 915
					  call 'hipe_icode':'label_name'
					      (Succ2)
				      in  let <_cor431> =
					      %% Line 914
					      call 'hipe_icode':'mk_if'
						  ('>=', [Temp|[_cor430|[]]], _cor429, %% Line 915
										       FailLblName)
					  in  let <_cor428> =
						  %% Line 916
						  call 'erlang':'++'
						      (FailCode, [Succ2|[]])
					      in  let <IsPos> =
						      %% Line 914
						      [_cor431|_cor428]
						  in  let <_cor436> =
							  %% Line 918
							  case Old of
							    %% Line 919
							    <{'integer',OldInt}> when 'true' ->
								let <_cor433> =
								    %% Line 920
								    call 'hipe_icode':'mk_const'
									(OldInt)
								in  %% Line 920
								    call 'hipe_icode':'mk_primop'
									([Dst|[]], '+', [Temp|[_cor433|[]]])
							    %% Line 921
							    <_cor594> when 'true' ->
								let <OldVar> =
								    %% Line 922
								    apply 'mk_var'/1
									(Old)
								in  %% Line 923
								    call 'hipe_icode':'mk_primop'
									([Dst|[]], '+', [Temp|[OldVar|[]]])
							  end
						      in  let <_cor438> =
							      %% Line 925
							      apply 'trans_fun'/2
								  (Instructions, Env)
							  in  let <_cor439> =
								  %% Line 925
								  call 'erlang':'++'
								      (IsPos, [_cor436|_cor438])
							      in  %% Line 925
								  call 'erlang':'++'
								      (_cor418, _cor439)
	  %% Line 929
	  <[{'bs_utf8_size',{'f',Lbl},A2,A3}|Instructions],Env> when 'true' ->
	      let <Bin> =
		  %% Line 930
		  apply 'trans_arg'/1
		      (A2)
	      in  let <Dst> =
		      %% Line 931
		      apply 'mk_var'/1
			  (A3)
		  in  %% Line 932
		      apply 'trans_op_call'/6
			  ({'hipe_bs_primop','bs_utf8_size'}, Lbl, [Bin|[]], [Dst|[]], Env, Instructions)
	  %% Line 933
	  <[{'test','bs_get_utf8',{'f',Lbl},[Ms|[_X_Live|[{'field_flags',_X_Flags}|[X|[]]]]]}|%% Line 934
											      Instructions],%% Line 934
													    Env> when 'true' ->
	      %% Line 935
	      apply 'trans_bs_get_or_skip_utf8'/5
		  (Lbl, Ms, X, Instructions, Env)
	  %% Line 936
	  <[{'test','bs_skip_utf8',{'f',Lbl},[Ms|[_X_Live|[{'field_flags',_X_Flags}|[]]]]}|%% Line 937
											   Instructions],%% Line 937
													 Env> when 'true' ->
	      %% Line 938
	      apply 'trans_bs_get_or_skip_utf8'/5
		  (Lbl, Ms, 'new', Instructions, Env)
	  %% Line 939
	  <[{'bs_utf16_size',{'f',Lbl},A2,A3}|Instructions],Env> when 'true' ->
	      let <Bin> =
		  %% Line 940
		  apply 'trans_arg'/1
		      (A2)
	      in  let <Dst> =
		      %% Line 941
		      apply 'mk_var'/1
			  (A3)
		  in  %% Line 942
		      apply 'trans_op_call'/6
			  ({'hipe_bs_primop','bs_utf16_size'}, Lbl, [Bin|[]], [Dst|[]], Env, Instructions)
	  %% Line 943
	  <[{'test','bs_get_utf16',{'f',Lbl},[Ms|[_X_Live|[{'field_flags',Flags0}|[X|[]]]]]}|%% Line 944
											     Instructions],%% Line 944
													   Env> when 'true' ->
	      %% Line 945
	      apply 'trans_bs_get_or_skip_utf16'/6
		  (Lbl, Ms, Flags0, X, Instructions, Env)
	  %% Line 946
	  <[{'test','bs_skip_utf16',{'f',Lbl},[Ms|[_X_Live|[{'field_flags',Flags0}|[]]]]}|%% Line 947
											  Instructions],%% Line 947
													Env> when 'true' ->
	      %% Line 948
	      apply 'trans_bs_get_or_skip_utf16'/6
		  (Lbl, Ms, Flags0, 'new', Instructions, Env)
	  %% Line 949
	  <[{'test','bs_get_utf32',{'f',Lbl},[Ms|[_X_Live|[{'field_flags',Flags0}|[X|[]]]]]}|Instructions],Env> when 'true' ->
	      %% Line 950
	      apply 'trans_bs_get_or_skip_utf32'/6
		  (Lbl, Ms, Flags0, X, Instructions, Env)
	  %% Line 951
	  <[{'test','bs_skip_utf32',{'f',Lbl},[Ms|[_X_Live|[{'field_flags',Flags0}|[]]]]}|Instructions],Env> when 'true' ->
	      %% Line 952
	      apply 'trans_bs_get_or_skip_utf32'/6
		  (Lbl, Ms, Flags0, 'new', Instructions, Env)
	  %% Line 957
	  <['fclearerror'|Instructions],Env> when 'true' ->
	      %% Line 958
	      case call 'erlang':'get'
		       ('hipe_inline_fp') of
		%% Line 959
		<'true'> when 'true' ->
		    let <_cor444> =
			%% Line 960
			call 'hipe_icode':'mk_primop'
			    ([], 'fclearerror', [])
		    in  let <_cor445> =
			    %% Line 961
			    apply 'trans_fun'/2
				(Instructions, Env)
			in  %% Line 960
			    [_cor444|_cor445]
		%% Line 962
		<_cor595> when 'true' ->
		    %% Line 963
		    apply 'trans_fun'/2
			(Instructions, Env)
	      end
	  %% Line 966
	  <[{'fcheckerror',{_cor596,Fail}}|Instructions],Env> when 'true' ->
	      %% Line 967
	      case call 'erlang':'get'
		       ('hipe_inline_fp') of
		%% Line 968
		<'true'> when 'true' ->
		    let <ContLbl> =
			%% Line 969
			apply 'mk_label'/1
			    ('new')
		    in  %% Line 970
			case Fail of
			  %% Line 971
			  <0> when 'true' ->
			      let <_cor448> =
				  %% Line 973
				  call 'hipe_icode':'label_name'
				      (ContLbl)
			      in  let <_cor449> =
				      %% Line 972
				      call 'hipe_icode':'mk_primop'
					  ([], 'fcheckerror', [], _cor448, %% Line 973
									   [])
				  in  let <_cor450> =
					  %% Line 974
					  apply 'trans_fun'/2
					      (Instructions, Env)
				      in  %% Line 972
					  [_cor449|%% Line 974
						   [ContLbl|_cor450]]
			  %% Line 975
			  <_cor597> when 'true' ->
			      let <_cor452> =
				  %% Line 978
				  call 'hipe_icode':'label_name'
				      (ContLbl)
			      in  let <_cor451> =
				      %% Line 978
				      apply 'map_label'/1
					  (Fail)
				  in  %% Line 976
				      case %% Line 977
					   apply 'make_guard'/6
					       ([], 'fcheckerror', [], _cor452, _cor451, %% Line 978
											 Env) of
					<{Guard,Env1}> when 'true' ->
					    let <_cor454> =
						%% Line 979
						apply 'trans_fun'/2
						    (Instructions, Env1)
					    in  %% Line 979
						[Guard|[ContLbl|_cor454]]
					( <_cor453> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor453})
					  -| ['compiler_generated'] )
				      end
			end
		%% Line 981
		<_cor598> when 'true' ->
		    %% Line 982
		    apply 'trans_fun'/2
			(Instructions, Env)
	      end
	  %% Line 985
	  <[{'fmove',Src,Dst}|Instructions],Env> when 'true' ->
	      %% Line 986
	      case call 'erlang':'get'
		       ('hipe_inline_fp') of
		%% Line 987
		<'true'> when 'true' ->
		    let <Dst1> =
			%% Line 988
			apply 'mk_var'/1
			    (Dst)
		    in  let <Src1> =
			    %% Line 989
			    apply 'trans_arg'/1
				(Src)
			in  let <_cor460> =
				%% Line 990
				call 'hipe_icode':'is_fvar'
				    (Dst1)
			    in  let <_cor459> =
				    %% Line 991
				    call 'hipe_icode':'is_fvar'
					(Src1)
				in  %% Line 990
				    case <_cor460,_cor459> of
				      %% Line 992
				      <'true','true'> when 'true' ->
					  let <_cor461> =
					      %% Line 993
					      call 'hipe_icode':'mk_move'
						  (Dst1, Src1)
					  in  let <_cor462> =
						  %% Line 993
						  apply 'trans_fun'/2
						      (Instructions, Env)
					      in  %% Line 993
						  [_cor461|_cor462]
				      %% Line 994
				      <'false','true'> when 'true' ->
					  let <_cor463> =
					      %% Line 995
					      call 'hipe_icode':'mk_primop'
						  ([Dst1|[]], 'unsafe_tag_float', [Src1|[]])
					  in  let <_cor464> =
						  %% Line 996
						  apply 'trans_fun'/2
						      (Instructions, Env)
					      in  %% Line 995
						  [_cor463|_cor464]
				      %% Line 997
				      <'true','false'> when 'true' ->
					  let <_cor465> =
					      %% Line 998
					      call 'hipe_icode':'mk_primop'
						  ([Dst1|[]], 'unsafe_untag_float', [Src1|[]])
					  in  let <_cor466> =
						  %% Line 999
						  apply 'trans_fun'/2
						      (Instructions, Env)
					      in  %% Line 998
						  [_cor465|_cor466]
				      ( <_fol20,_fol21> when 'true' ->
					    let <_cor467> = {_fol20,_fol21}
					    in  primop 'match_fail'
						    ({'case_clause',_cor467})
					-| ['compiler_generated'] )
				    end
		%% Line 1001
		<_cor599> when 'true' ->
		    %% Line 1002
		    apply 'trans_fun'/2
			([{'move',Src,Dst}|Instructions], Env)
	      end
	  %% Line 1005
	  <[{'fconv',Eterm,FReg}|Instructions],Env> when 'true' ->
	      %% Line 1006
	      case call 'erlang':'get'
		       ('hipe_inline_fp') of
		%% Line 1007
		<'true'> when 'true' ->
		    let <Src> =
			%% Line 1008
			apply 'trans_arg'/1
			    (Eterm)
		    in  let <ContLbl> =
			    %% Line 1009
			    apply 'mk_label'/1
				('new')
			in  let <Dst> =
				%% Line 1010
				apply 'mk_var'/1
				    (FReg)
			    in  let <_cor472> =
				    %% Line 1012
				    call 'hipe_icode':'label_name'
					(ContLbl)
				in  let <_cor473> =
					%% Line 1011
					call 'hipe_icode':'mk_primop'
					    ([Dst|[]], 'conv_to_float', [Src|[]], _cor472, %% Line 1012
											   [])
				    in  let <_cor474> =
					    %% Line 1013
					    apply 'trans_fun'/2
						(Instructions, Env)
					in  %% Line 1011
					    [_cor473|%% Line 1013
						     [ContLbl|_cor474]]
		%% Line 1014
		<_cor600> when 'true' ->
		    %% Line 1015
		    apply 'trans_fun'/2
			([{'fmove',Eterm,FReg}|Instructions], Env)
	      end
	  %% Line 1018
	  <[{'arithfbif','fadd',Lab,SrcRs,DstR}|Instructions],Env> when 'true' ->
	      %% Line 1019
	      case call 'erlang':'get'
		       ('hipe_inline_fp') of
		%% Line 1020
		<'true'> when 'true' ->
		    %% Line 1021
		    apply 'trans_fun'/2
			([{'arithbif','fp_add',Lab,SrcRs,DstR}|Instructions], Env)
		%% Line 1022
		<_cor601> when 'true' ->
		    %% Line 1023
		    apply 'trans_fun'/2
			([{'arithbif','+',Lab,SrcRs,DstR}|Instructions], Env)
	      end
	  %% Line 1026
	  <[{'arithfbif','fsub',Lab,SrcRs,DstR}|Instructions],Env> when 'true' ->
	      %% Line 1027
	      case call 'erlang':'get'
		       ('hipe_inline_fp') of
		%% Line 1028
		<'true'> when 'true' ->
		    %% Line 1029
		    apply 'trans_fun'/2
			([{'arithbif','fp_sub',Lab,SrcRs,DstR}|Instructions], Env)
		%% Line 1030
		<_cor602> when 'true' ->
		    %% Line 1031
		    apply 'trans_fun'/2
			([{'arithbif','-',Lab,SrcRs,DstR}|Instructions], Env)
	      end
	  %% Line 1034
	  <[{'arithfbif','fmul',Lab,SrcRs,DstR}|Instructions],Env> when 'true' ->
	      %% Line 1035
	      case call 'erlang':'get'
		       ('hipe_inline_fp') of
		%% Line 1036
		<'true'> when 'true' ->
		    %% Line 1037
		    apply 'trans_fun'/2
			([{'arithbif','fp_mul',Lab,SrcRs,DstR}|Instructions], Env)
		%% Line 1038
		<_cor603> when 'true' ->
		    %% Line 1039
		    apply 'trans_fun'/2
			([{'arithbif','*',Lab,SrcRs,DstR}|Instructions], Env)
	      end
	  %% Line 1042
	  <[{'arithfbif','fdiv',Lab,SrcRs,DstR}|Instructions],Env> when 'true' ->
	      %% Line 1043
	      case call 'erlang':'get'
		       ('hipe_inline_fp') of
		%% Line 1044
		<'true'> when 'true' ->
		    %% Line 1045
		    apply 'trans_fun'/2
			([{'arithbif','fp_div',Lab,SrcRs,DstR}|Instructions], Env)
		%% Line 1046
		<_cor604> when 'true' ->
		    %% Line 1047
		    apply 'trans_fun'/2
			([{'arithbif','/',Lab,SrcRs,DstR}|Instructions], Env)
	      end
	  %% Line 1050
	  <[{'arithfbif','fnegate',Lab,[SrcR|[]],DestR}|Instructions],Env> when 'true' ->
	      %% Line 1051
	      case call 'erlang':'get'
		       ('hipe_inline_fp') of
		%% Line 1052
		<'true'> when 'true' ->
		    let <Src> =
			%% Line 1053
			apply 'trans_arg'/1
			    (SrcR)
		    in  let <Dst> =
			    %% Line 1054
			    apply 'mk_var'/1
				(DestR)
			in  let <_cor482> =
				%% Line 1055
				call 'hipe_icode':'mk_primop'
				    ([Dst|[]], 'fnegate', [Src|[]])
			    in  let <_cor483> =
				    %% Line 1056
				    apply 'trans_fun'/2
					(Instructions, Env)
				in  %% Line 1055
				    [_cor482|_cor483]
		%% Line 1057
		<_cor605> when 'true' ->
		    %% Line 1058
		    apply 'trans_fun'/2
			([{'arithbif','-',Lab,[{'float',0.00000000000000000000e+00}|[SrcR|[]]],DestR}|Instructions], Env)
	      end
	  %% Line 1063
	  <[{'apply',Arity}|Instructions],Env> when 'true' ->
	      let <_cor485> =
		  %% Line 1064
		  call 'erlang':'+'
		      (Arity, 2)
	      in  let <BeamArgs> =
		      %% Line 1064
		      apply 'extract_fun_args'/1
			  (_cor485)
		  in  %% Line 1065
		      case call 'lists':'split'
			       (Arity, BeamArgs) of
			<{Args,[M|[F|[]]]}> when 'true' ->
			    let <_cor488> =
				%% Line 1066
				apply 'mk_var'/1
				    ({'r',0})
			    in  let <Dst> =
				    %% Line 1066
				    [_cor488|[]]
				in  let <_cor490> =
					%% Line 1067
					call 'hipe_icode':'mk_comment'
					    ('apply')
				    in  let <_cor491> =
					    %% Line 1068
					    call 'hipe_icode':'mk_primop'
						(Dst, {'apply_N',Arity}, [M|[F|Args]])
					in  let <_cor492> =
						%% Line 1069
						apply 'trans_fun'/2
						    (Instructions, Env)
					    in  %% Line 1067
						[_cor490|%% Line 1068
							 [_cor491|_cor492]]
			( <_cor487> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor487})
			  -| ['compiler_generated'] )
		      end
	  %% Line 1070
	  <[{'apply_last',Arity,_X_N}|Instructions],Env> when 'true' ->
	      let <_cor493> =
		  %% Line 1071
		  call 'erlang':'+'
		      (Arity, 2)
	      in  let <BeamArgs> =
		      %% Line 1071
		      apply 'extract_fun_args'/1
			  (_cor493)
		  in  %% Line 1072
		      case call 'lists':'split'
			       (Arity, BeamArgs) of
			<{Args,[M|[F|[]]]}> when 'true' ->
			    let <_cor496> =
				%% Line 1073
				call 'hipe_icode':'mk_comment'
				    ('apply_last')
			    in  let <_cor497> =
				    %% Line 1074
				    call 'hipe_icode':'mk_enter_primop'
					({'apply_N',Arity}, [M|[F|Args]])
				in  let <_cor498> =
					%% Line 1075
					apply 'trans_fun'/2
					    (Instructions, Env)
				    in  %% Line 1073
					[_cor496|%% Line 1074
						 [_cor497|_cor498]]
			( <_cor495> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor495})
			  -| ['compiler_generated'] )
		      end
	  %% Line 1080
	  <[{'test','is_boolean',{'f',Lbl},[Arg|[]]}|Instructions],Env> when 'true' ->
	      %% Line 1081
	      case apply 'trans_type_test'/4
		       ('boolean', Lbl, Arg, Env) of
		<{Code,Env1}> when 'true' ->
		    let <_cor500> =
			%% Line 1082
			apply 'trans_fun'/2
			    (Instructions, Env1)
		    in  %% Line 1082
			[Code|_cor500]
		( <_cor499> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor499})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1087
	  <[{'test','is_function2',{'f',Lbl},[Arg|[Arity|[]]]}|Instructions],Env> when 'true' ->
	      %% Line 1088
	      case apply 'trans_type_test2'/5
		       ('function2', Lbl, Arg, Arity, Env) of
		<{Code,Env1}> when 'true' ->
		    let <_cor502> =
			%% Line 1089
			apply 'trans_fun'/2
			    (Instructions, Env1)
		    in  %% Line 1089
			[Code|_cor502]
		( <_cor501> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor501})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1093
	  <[{'gc_bif','-',Fail,_X_Live,[SrcR|[]],DstR}|Instructions],Env> when 'true' ->
	      %% Line 1095
	      apply 'trans_fun'/2
		  ([{'arithbif','-',Fail,[{'integer',0}|[SrcR|[]]],DstR}|Instructions], Env)
	  %% Line 1096
	  <[{'gc_bif','+',Fail,_X_Live,[SrcR|[]],DstR}|Instructions],Env> when 'true' ->
	      %% Line 1098
	      apply 'trans_fun'/2
		  ([{'bif','+',Fail,[SrcR|[]],DstR}|Instructions], Env)
	  %% Line 1099
	  <[{'gc_bif',Name,Fail,_X_Live,SrcRs,DstR}|Instructions],Env> when 'true' ->
	      let <_cor503> =
		  %% Line 1100
		  call 'erlang':'length'
		      (SrcRs)
	      in  %% Line 1100
		  case call 'erl_internal':'guard_bif'
			   (Name, _cor503) of
		    %% Line 1101
		    <'false'> when 'true' ->
			%% Line 1103
			apply 'trans_fun'/2
			    ([{'arithbif',Name,Fail,SrcRs,DstR}|Instructions], Env)
		    %% Line 1104
		    <'true'> when 'true' ->
			%% Line 1106
			apply 'trans_fun'/2
			    ([{'bif',Name,Fail,SrcRs,DstR}|Instructions], Env)
		    ( <_cor504> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor504})
		      -| ['compiler_generated'] )
		  end
	  %% Line 1112
	  <[{'test','is_bitstr',{'f',Lbl},[Arg|[]]}|Instructions],Env> when 'true' ->
	      %% Line 1113
	      case apply 'trans_type_test'/4
		       ('bitstr', Lbl, Arg, Env) of
		<{Code,Env1}> when 'true' ->
		    let <_cor506> =
			%% Line 1114
			apply 'trans_fun'/2
			    (Instructions, Env1)
		    in  %% Line 1114
			[Code|_cor506]
		( <_cor505> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor505})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1118
	  <[{'trim',N,NY}|Instructions],Env> when 'true' ->
	      let <Moves> =
		  %% Line 1120
		  apply 'trans_trim'/2
		      (N, NY)
	      in  let <_cor508> =
		      %% Line 1121
		      apply 'trans_fun'/2
			  (Instructions, Env)
		  in  %% Line 1121
		      call 'erlang':'++'
			  (Moves, _cor508)
	  %% Line 1125
	  <[{'line',_cor606}|Instructions],Env> when 'true' ->
	      %% Line 1126
	      apply 'trans_fun'/2
		  (Instructions, Env)
	  %% Line 1130
	  <[{'test','has_map_fields',{'f',Lbl},Map,{'list',Keys}}|Instructions],Env> when 'true' ->
	      %% Line 1131
	      case apply 'mk_move_and_var'/2
		       (Map, Env) of
		<{MapMove,MapVar,Env1}> when 'true' ->
		    let <_cor516> =
			%% Line 1136
			apply 'map_label'/1
			    (Lbl)
		    in  let <_cor514> =
			    %% Line 1137
			    ( letrec
				  'lc$^0'/1 =
				      fun (_cor512) ->
					  case _cor512 of
					    <[K|_cor511]> when 'true' ->
						let <_cor513> =
						    apply 'lc$^0'/1
							(_cor511)
						in  ( [[K|[{'r',0}]]|_cor513]
						      -| ['compiler_generated'] )
					    <[]> when 'true' ->
						[]
					    ( <_cor512> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_cor512})
						    -| [{'function_name',{'lc$^0',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^0'/1
				      (Keys)
			      -| ['list_comprehension'] )
			in  let <_cor515> =
				%% Line 1137
				call 'lists':'flatten'
				    (_cor514)
			    in  %% Line 1135
				case %% Line 1136
				     apply 'trans_map_query'/4
					 (MapVar, _cor516, Env1, _cor515) of
				  <{TestInstructions,_X_GetInstructions,Env2}> when 'true' ->
				      let <_cor518> =
					  %% Line 1138
					  apply 'trans_fun'/2
					      (Instructions, Env2)
				      in  %% Line 1138
					  [MapMove|[TestInstructions|_cor518]]
				  ( <_cor517> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor517})
				    -| ['compiler_generated'] )
				end
		( <_cor509> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor509})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1139
	  <[{'get_map_elements',{'f',Lbl},Map,{'list',KVPs}}|Instructions],Env> when 'true' ->
	      %% Line 1140
	      case apply 'mk_move_and_var'/2
		       (Map, Env) of
		<{MapMove,MapVar,Env1}> when 'true' ->
		    let <_cor520> =
			%% Line 1142
			apply 'map_label'/1
			    (Lbl)
		    in  %% Line 1141
			case %% Line 1142
			     apply 'trans_map_query'/4
				 (MapVar, _cor520, Env1, KVPs) of
			  <{TestInstructions,GetInstructions,Env2}> when 'true' ->
			      let <_cor522> =
				  %% Line 1143
				  apply 'trans_fun'/2
				      (Instructions, Env2)
			      in  %% Line 1143
				  [MapMove|[TestInstructions|[GetInstructions|_cor522]]]
			  ( <_cor521> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor521})
			    -| ['compiler_generated'] )
			end
		( <_cor519> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor519})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1145
	  <[{'put_map_assoc',{'f',Lbl},Map,Dst,_X_N,{'list',Pairs}}|Instructions],Env> when 'true' ->
	      %% Line 1146
	      case apply 'mk_move_and_var'/2
		       (Map, Env) of
		<{MapMove,MapVar,Env1}> when 'true' ->
		    let <TempMapVar> =
			%% Line 1147
			apply 'mk_var'/1
			    ('new')
		    in  let <TempMapMove> =
			    %% Line 1148
			    call 'hipe_icode':'mk_move'
				(TempMapVar, MapVar)
			in  let <_cor527> =
				%% Line 1150
				case <> of
				  %% Line 1151
				  <>
				      when call 'erlang':'>'
					    (Lbl,
					     0) ->
				      %% Line 1152
				      apply 'gen_put_map_instrs'/7
					  ('exists', 'assoc', TempMapVar, Dst, Lbl, Pairs, Env1)
				  %% Line 1153
				  <> when 'true' ->
				      %% Line 1154
				      apply 'gen_put_map_instrs'/7
					  ('new', 'assoc', TempMapVar, Dst, 'new', Pairs, Env1)
				end
			    in  %% Line 1150
				case _cor527 of
				  <{PutInstructions,Env2}> when 'true' ->
				      let <_cor529> =
					  %% Line 1156
					  apply 'trans_fun'/2
					      (Instructions, Env2)
				      in  %% Line 1156
					  [MapMove|[TempMapMove|[PutInstructions|_cor529]]]
				  ( <_cor528> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor528})
				    -| ['compiler_generated'] )
				end
		( <_cor523> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor523})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1158
	  <[{'put_map_exact',{'f',Lbl},Map,Dst,_X_N,{'list',Pairs}}|Instructions],Env> when 'true' ->
	      %% Line 1159
	      case apply 'mk_move_and_var'/2
		       (Map, Env) of
		<{MapMove,MapVar,Env1}> when 'true' ->
		    let <TempMapVar> =
			%% Line 1160
			apply 'mk_var'/1
			    ('new')
		    in  let <TempMapMove> =
			    %% Line 1161
			    call 'hipe_icode':'mk_move'
				(TempMapVar, MapVar)
			in  let <_cor534> =
				%% Line 1163
				case <> of
				  %% Line 1164
				  <>
				      when call 'erlang':'>'
					    (Lbl,
					     0) ->
				      %% Line 1165
				      apply 'gen_put_map_instrs'/7
					  ('exists', 'exact', TempMapVar, Dst, Lbl, Pairs, Env1)
				  %% Line 1166
				  <> when 'true' ->
				      %% Line 1167
				      apply 'gen_put_map_instrs'/7
					  ('new', 'exact', TempMapVar, Dst, 'new', Pairs, Env1)
				end
			    in  %% Line 1163
				case _cor534 of
				  <{PutInstructions,Env2}> when 'true' ->
				      let <_cor536> =
					  %% Line 1169
					  apply 'trans_fun'/2
					      (Instructions, Env2)
				      in  %% Line 1169
					  [MapMove|[TempMapMove|[PutInstructions|_cor536]]]
				  ( <_cor535> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor535})
				    -| ['compiler_generated'] )
				end
		( <_cor530> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor530})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1173
	  <[X|_cor607],_cor608> when 'true' ->
	      do  %% Line 1174
		  call 'io':'format'
		      ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[88|[73|[84|[69|[68|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[64|[126|[119|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [{'trans_fun/2',X}|['hipe_beam_to_icode'|[1174]]])
		  %% Line 1174
		  call 'erlang':'error'
		      ({'hipe_beam_to_icode',1174,{'trans_fun/2',X}})
	  %% Line 1175
	  <[],_cor609> when 'true' ->
	      %% Line 1176
	      []
	  ( <_cor541,_cor540> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor541,_cor540})
		  -| [{'function_name',{'trans_fun',2}}] )
	    -| ['compiler_generated'] )
	end
'trans_call'/4 =
    %% Line 1183
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <MFA = {M,F,_X_A},Dst,Args,Type> when 'true' ->
	      let <_cor4> =
		  %% Line 1184
		  ( fun () ->
			call 'hipe_icode':'mk_call'
			    (Dst, M, F, Args, Type)
		    -| [{'id',{0,0,'-trans_call/4-fun-0-'}}] )
	      in  %% Line 1184
		  apply 'handle_fail'/3
		      (MFA, Args, _cor4)
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'trans_call',4}}] )
	    -| ['compiler_generated'] )
	end
'trans_enter'/3 =
    %% Line 1186
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <MFA = {M,F,_X_A},Args,Type> when 'true' ->
	      let <_cor3> =
		  %% Line 1187
		  ( fun () ->
			call 'hipe_icode':'mk_enter'
			    (M, F, Args, Type)
		    -| [{'id',{0,0,'-trans_enter/3-fun-0-'}}] )
	      in  %% Line 1187
		  apply 'handle_fail'/3
		      (MFA, Args, _cor3)
	  ( <_cor6,_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5,_cor4})
		  -| [{'function_name',{'trans_enter',3}}] )
	    -| ['compiler_generated'] )
	end
'handle_fail'/3 =
    %% Line 1189
    fun (_cor2,_cor1,_cor0) ->
	%% Line 1190
	case _cor2 of
	  %% Line 1191
	  <{'erlang','exit',1}> when 'true' ->
	      %% Line 1192
	      call 'hipe_icode':'mk_fail'
		  (_cor1, 'exit')
	  %% Line 1193
	  <{'erlang','throw',1}> when 'true' ->
	      %% Line 1194
	      call 'hipe_icode':'mk_fail'
		  (_cor1, 'throw')
	  %% Line 1195
	  <{'erlang','fault',1}> when 'true' ->
	      %% Line 1196
	      call 'hipe_icode':'mk_fail'
		  (_cor1, 'error')
	  %% Line 1197
	  <{'erlang','fault',2}> when 'true' ->
	      %% Line 1198
	      call 'hipe_icode':'mk_fail'
		  (_cor1, 'error')
	  %% Line 1199
	  <{'erlang','error',1}> when 'true' ->
	      %% Line 1200
	      call 'hipe_icode':'mk_fail'
		  (_cor1, 'error')
	  %% Line 1201
	  <{'erlang','error',2}> when 'true' ->
	      %% Line 1202
	      call 'hipe_icode':'mk_fail'
		  (_cor1, 'error')
	  %% Line 1203
	  <_cor7> when 'true' ->
	      %% Line 1204
	      apply _cor0
		  ()
	end
'trans_bif0'/2 =
    %% Line 1212
    fun (_cor1,_cor0) ->
	let <BifRes> =
	    %% Line 1214
	    apply 'mk_var'/1
		(_cor0)
	in  %% Line 1215
	    call 'hipe_icode':'mk_call'
		([BifRes|[]], 'erlang', _cor1, [], 'remote')
'trans_bif'/6 =
    %% Line 1217
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <BifRes> =
	    %% Line 1219
	    apply 'mk_var'/1
		(_cor1)
	in  %% Line 1220
	    case apply 'get_constants_in_temps'/2
		     (_cor2, _cor0) of
	      <{Movs,SrcVars,Env1}> when 'true' ->
		  %% Line 1221
		  case _cor3 of
		    %% Line 1222
		    <0> when 'true' ->
			let <I> =
			    %% Line 1223
			    call 'hipe_icode':'mk_call'
				([BifRes|[]], 'erlang', _cor4, SrcVars, 'remote')
			in  let <_cor9> =
				%% Line 1224
				call 'erlang':'++'
				    (Movs, [I|[]])
			    in  %% Line 1224
				{_cor9,Env1}
		    %% Line 1225
		    <_cor19> when 'true' ->
			let <_cor10> =
			    %% Line 1228
			    apply 'map_label'/1
				(_cor3)
			in  %% Line 1226
			    case %% Line 1227
				 apply 'make_fallthrough_guard'/5
				     ([BifRes|[]], {'erlang',_cor4,_cor5}, SrcVars, _cor10, %% Line 1228
											    Env1) of
			      <{GuardI,Env2}> when 'true' ->
				  %% Line 1229
				  {[Movs|[GuardI|[]]],Env2}
			      ( <_cor11> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor11})
				-| ['compiler_generated'] )
			    end
		  end
	      ( <_cor7> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor7})
		-| ['compiler_generated'] )
	    end
'trans_op_call'/6 =
    %% Line 1232
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1233
	case apply 'trans_one_op_call'/5
		 (_cor5, _cor4, _cor3, _cor2, _cor1) of
	  <{Code,Env1}> when 'true' ->
	      let <_cor7> =
		  %% Line 1234
		  apply 'trans_fun'/2
		      (_cor0, Env1)
	      in  %% Line 1234
		  [Code|_cor7]
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor6})
	    -| ['compiler_generated'] )
	end
'trans_one_op_call'/5 =
    %% Line 1236
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1237
	case _cor3 of
	  %% Line 1238
	  <0> when 'true' ->
	      let <I> =
		  %% Line 1239
		  call 'hipe_icode':'mk_primop'
		      (_cor1, _cor4, _cor2)
	      in  %% Line 1240
		  {[I|[]],_cor0}
	  %% Line 1241
	  <_cor13> when 'true' ->
	      let <_cor6> =
		  %% Line 1242
		  apply 'map_label'/1
		      (_cor3)
	      in  %% Line 1242
		  apply 'make_fallthrough_guard'/5
		      (_cor1, _cor4, _cor2, _cor6, _cor0)
	end
'trans_bin_call'/8 =
    %% Line 1249
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor11> =
	    %% Line 1251
	    case _cor6 of
	      %% Line 1252
	      <0> when 'true' ->
		  let <I> =
		      %% Line 1253
		      call 'hipe_icode':'mk_primop'
			  (_cor4, _cor7, _cor5)
		  in  %% Line 1254
		      {[I|[]],_cor1}
	      %% Line 1255
	      <_cor22> when 'true' ->
		  let <_cor9> =
		      %% Line 1256
		      apply 'map_label'/1
			  (_cor6)
		  in  %% Line 1256
		      apply 'make_fallthrough_guard'/5
			  (_cor4, _cor7, _cor5, _cor9, _cor1)
	    end
	in  %% Line 1250
	    case _cor11 of
	      <{Code,Env1}> when 'true' ->
		  let <_cor13> =
		      %% Line 1258
		      apply 'trans_bin'/4
			  (_cor0, _cor3, _cor2, Env1)
		  in  %% Line 1258
		      [Code|_cor13]
	      ( <_cor12> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor12})
		-| ['compiler_generated'] )
	    end
'trans_bin'/4 =
    %% Line 1263
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'bs_put_float',{'f',Lbl},Size,Unit,{'field_flags',Flags0},Source}|%% Line 1264
									       Instructions],%% Line 1264
											     Base,%% Line 1264
												  Offset,%% Line 1264
													 Env> when 'true' ->
	      let <Flags> =
		  %% Line 1265
		  apply 'resolve_native_endianess'/1
		      (Flags0)
	      in  let <Src,SourceInstrs,ConstInfo> =
		      %% Line 1268
		      case apply 'is_var'/1
			       (Source) of
			%% Line 1269
			<'true'> when 'true' ->
			    let <_cor5> =
				%% Line 1270
				apply 'mk_var'/1
				    (Source)
			    in  <_cor5,%% Line 1270
				       [],%% Line 1270
					  'var'>
			%% Line 1271
			<'false'> when 'true' ->
			    %% Line 1272
			    case Source of
			      %% Line 1273
			      <{'float',X}>
				  when call 'erlang':'is_float'
					(X) ->
				  let <C> =
				      %% Line 1274
				      apply 'trans_const'/1
					  (Source)
				  in  let <SrcVar> =
					  %% Line 1275
					  apply 'mk_var'/1
					      ('new')
				      in  let <I> =
					      %% Line 1276
					      call 'hipe_icode':'mk_move'
						  (SrcVar, C)
					  in  %% Line 1277
					      <SrcVar,[I|[]],'pass'>
			      %% Line 1278
			      <_cor81> when 'true' ->
				  let <C> =
				      %% Line 1279
				      apply 'trans_const'/1
					  (Source)
				  in  let <SrcVar> =
					  %% Line 1280
					  apply 'mk_var'/1
					      ('new')
				      in  let <I> =
					      %% Line 1281
					      call 'hipe_icode':'mk_move'
						  (SrcVar, C)
					  in  %% Line 1282
					      <SrcVar,[I|[]],'fail'>
			    end
			( <_cor13> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor13})
			  -| ['compiler_generated'] )
		      end
		  in  let <Name,Args,Env2> =
			  %% Line 1287
			  case Size of
			    %% Line 1288
			    <{'integer',NoBits}>
				when let <_cor16> =
				      call 'erlang':'is_integer'
					  (NoBits)
				  in  let <_cor17> =
					  call 'erlang':'>='
					      (NoBits, 0)
				      in  call 'erlang':'and'
					      (_cor16, _cor17) ->
				let <_cor18> =
				    %% Line 1290
				    call 'erlang':'*'
					(NoBits, Unit)
				in  %% Line 1290
				    <{'bs_put_float',_cor18,Flags,ConstInfo},[Src|[Base|[Offset|[]]]],Env>
			    %% Line 1291
			    <{'integer',NoBits}>
				when let <_cor19> =
				      call 'erlang':'is_integer'
					  (NoBits)
				  in  let <_cor20> =
					  call 'erlang':'<'
					      (NoBits, 0)
				      in  call 'erlang':'and'
					      (_cor19, _cor20) ->
				do  %% Line 1292
				    call 'io':'format'
					([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[88|[73|[84|[69|[68|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[64|[126|[119|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [{'bad_bs_size_constant',Size}|['hipe_beam_to_icode'|[1292]]])
				    %% Line 1292
				    call 'erlang':'error'
					({'hipe_beam_to_icode',1292,{'bad_bs_size_constant',Size}})
			    %% Line 1293
			    <BitReg> when 'true' ->
				let <Bits> =
				    %% Line 1294
				    apply 'mk_var'/1
					(BitReg)
				in  %% Line 1295
				    <{'bs_put_float',Unit,Flags,ConstInfo},[Src|[Bits|[Base|[Offset|[]]]]],Env>
			  end
		      in  let <_cor28> =
			      %% Line 1299
			      apply 'trans_bin_call'/8
				  ({'hipe_bs_primop',Name}, Lbl, Args, [Offset|[]], Base, Offset, Env2, Instructions)
			  in  %% Line 1298
			      call 'erlang':'++'
				  (SourceInstrs, _cor28)
	  %% Line 1300
	  <[{'bs_put_binary',{'f',Lbl},Size,Unit,{'field_flags',Flags},Source}|%% Line 1301
									       Instructions],%% Line 1301
											     Base,%% Line 1301
												  Offset,%% Line 1301
													 Env> when 'true' ->
	      let <Src> =
		  %% Line 1303
		  apply 'trans_arg'/1
		      (Source)
	      in  let <Name,Args,Env2> =
		      %% Line 1306
		      case Size of
			%% Line 1307
			<{'atom','all'}> when 'true' ->
			    %% Line 1308
			    <{'bs_put_binary_all',Flags},[Src|[Base|[Offset|[]]]],Env>
			%% Line 1309
			<{'integer',NoBits}>
			    when let <_cor30> =
				  call 'erlang':'is_integer'
				      (NoBits)
			      in  let <_cor31> =
				      call 'erlang':'>='
					  (NoBits, 0)
				  in  call 'erlang':'and'
					  (_cor30, _cor31) ->
			    let <_cor32> =
				%% Line 1311
				call 'erlang':'*'
				    (NoBits, Unit)
			    in  %% Line 1311
				<{'bs_put_binary',_cor32,Flags},[Src|[Base|[Offset|[]]]],Env>
			%% Line 1312
			<{'integer',NoBits}>
			    when let <_cor33> =
				  call 'erlang':'is_integer'
				      (NoBits)
			      in  let <_cor34> =
				      call 'erlang':'<'
					  (NoBits, 0)
				  in  call 'erlang':'and'
					  (_cor33, _cor34) ->
			    do  %% Line 1313
				call 'io':'format'
				    ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[88|[73|[84|[69|[68|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[64|[126|[119|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [{'bad_bs_size_constant',Size}|['hipe_beam_to_icode'|[1313]]])
				%% Line 1313
				call 'erlang':'error'
				    ({'hipe_beam_to_icode',1313,{'bad_bs_size_constant',Size}})
			%% Line 1314
			<BitReg> when 'true' ->
			    let <Bits> =
				%% Line 1315
				apply 'mk_var'/1
				    (BitReg)
			    in  %% Line 1316
				<{'bs_put_binary',Unit,Flags},[Src|[Bits|[Base|[Offset|[]]]]],Env>
		      end
		  in  %% Line 1319
		      apply 'trans_bin_call'/8
			  ({'hipe_bs_primop',Name}, %% Line 1320
						    Lbl, %% Line 1320
							 Args, %% Line 1320
							       [Offset|[]], %% Line 1321
									    Base, %% Line 1321
										  Offset, %% Line 1321
											  Env2, %% Line 1321
												Instructions)
	  %% Line 1323
	  <[{'bs_put_string',SizeInBytes,{'string',String}}|Instructions],Base,%% Line 1324
									       Offset,%% Line 1324
										      Env> when 'true' ->
	      let <_cor42> =
		  %% Line 1325
		  call 'hipe_icode':'mk_primop'
		      ([Offset|[]], %% Line 1326
				    {'hipe_bs_primop',{'bs_put_string',String,SizeInBytes}}, %% Line 1327
											     [Base|[Offset|[]]])
	      in  let <_cor43> =
		      %% Line 1328
		      apply 'trans_bin'/4
			  (Instructions, Base, Offset, Env)
		  in  %% Line 1325
		      [_cor42|_cor43]
	  %% Line 1329
	  <[{'bs_put_integer',{'f',Lbl},Size,Unit,{'field_flags',Flags0},Source}|%% Line 1330
										 Instructions],%% Line 1330
											       Base,%% Line 1330
												    Offset,%% Line 1330
													   Env> when 'true' ->
	      let <Flags> =
		  %% Line 1331
		  apply 'resolve_native_endianess'/1
		      (Flags0)
	      in  let <Src,SrcInstrs,ConstInfo> =
		      %% Line 1336
		      case apply 'is_var'/1
			       (Source) of
			%% Line 1337
			<'true'> when 'true' ->
			    let <_cor45> =
				%% Line 1338
				apply 'mk_var'/1
				    (Source)
			    in  <_cor45,%% Line 1338
					[],%% Line 1338
					   'var'>
			%% Line 1339
			<'false'> when 'true' ->
			    %% Line 1340
			    case Source of
			      %% Line 1341
			      <{'integer',X}>
				  when call 'erlang':'is_integer'
					(X) ->
				  let <C> =
				      %% Line 1342
				      apply 'trans_const'/1
					  (Source)
				  in  let <SrcVar> =
					  %% Line 1343
					  apply 'mk_var'/1
					      ('new')
				      in  let <I> =
					      %% Line 1344
					      call 'hipe_icode':'mk_move'
						  (SrcVar, C)
					  in  %% Line 1345
					      <SrcVar,[I|[]],'pass'>
			      %% Line 1346
			      <_cor82> when 'true' ->
				  let <C> =
				      %% Line 1347
				      apply 'trans_const'/1
					  (Source)
				  in  let <SrcVar> =
					  %% Line 1348
					  apply 'mk_var'/1
					      ('new')
				      in  let <I> =
					      %% Line 1349
					      call 'hipe_icode':'mk_move'
						  (SrcVar, C)
					  in  %% Line 1350
					      <SrcVar,[I|[]],'fail'>
			    end
			( <_cor53> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor53})
			  -| ['compiler_generated'] )
		      end
		  in  let <Name,Args,Env2> =
			  %% Line 1355
			  case apply 'is_var'/1
				   (Size) of
			    %% Line 1356
			    <'true'> when 'true' ->
				let <SVar> =
				    %% Line 1357
				    apply 'mk_var'/1
					(Size)
				in  %% Line 1358
				    <{'bs_put_integer',Unit,Flags,ConstInfo},[SVar|[Base|[Offset|[]]]],Env>
			    %% Line 1359
			    <'false'> when 'true' ->
				%% Line 1360
				case Size of
				  %% Line 1361
				  <{'integer',NoBits}>
				      when call 'erlang':'>='
					    (NoBits,
					     0) ->
				      let <_cor57> =
					  %% Line 1362
					  call 'erlang':'*'
					      (NoBits, Unit)
				      in  %% Line 1362
					  <{'bs_put_integer',_cor57,Flags,ConstInfo},[Base|[Offset|[]]],Env>
				  %% Line 1363
				  <_cor83> when 'true' ->
				      do  %% Line 1364
					  call 'io':'format'
					      ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[88|[73|[84|[69|[68|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[64|[126|[119|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [{'bad_bs_size_constant',Size}|['hipe_beam_to_icode'|[1364]]])
					  %% Line 1364
					  call 'erlang':'error'
					      ({'hipe_beam_to_icode',1364,{'bad_bs_size_constant',Size}})
				end
			    ( <_cor62> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor62})
			      -| ['compiler_generated'] )
			  end
		      in  let <_cor65> =
			      %% Line 1367
			      apply 'trans_bin_call'/8
				  ({'hipe_bs_primop',Name}, %% Line 1368
							    Lbl, %% Line 1368
								 [Src|Args], %% Line 1368
									     [Offset|[]], %% Line 1368
											  Base, %% Line 1368
												Offset, %% Line 1368
													Env2, %% Line 1368
													      Instructions)
			  in  %% Line 1367
			      call 'erlang':'++'
				  (SrcInstrs, _cor65)
	  %% Line 1372
	  <[{'bs_put_utf8',{'f',Lbl},_X_FF,A3}|Instructions],Base,Offset,Env> when 'true' ->
	      let <Src> =
		  %% Line 1373
		  apply 'trans_arg'/1
		      (A3)
	      in  let <Args> =
		      %% Line 1374
		      [Src|[Base|[Offset|[]]]]
		  in  %% Line 1375
		      apply 'trans_bin_call'/8
			  ({'hipe_bs_primop','bs_put_utf8'}, Lbl, Args, [Offset|[]], Base, Offset, Env, Instructions)
	  %% Line 1376
	  <[{'bs_put_utf16',{'f',Lbl},{'field_flags',Flags0},A3}|Instructions],Base,Offset,Env> when 'true' ->
	      let <Src> =
		  %% Line 1377
		  apply 'trans_arg'/1
		      (A3)
	      in  let <Args> =
		      %% Line 1378
		      [Src|[Base|[Offset|[]]]]
		  in  let <Flags> =
			  %% Line 1379
			  apply 'resolve_native_endianess'/1
			      (Flags0)
		      in  let <Name> = {%% Line 1380
			       'bs_put_utf16',%% Line 1380
					      Flags}
			  in  %% Line 1381
			      apply 'trans_bin_call'/8
				  ({'hipe_bs_primop',Name}, Lbl, Args, [Offset|[]], Base, Offset, Env, Instructions)
	  %% Line 1382
	  <[{'bs_put_utf32',F = {'f',Lbl},FF = {'field_flags',_X_Flags0},A3}|Instructions],Base,Offset,Env> when 'true' ->
	      let <Src> =
		  %% Line 1383
		  apply 'trans_arg'/1
		      (A3)
	      in  %% Line 1384
		  apply 'trans_bin_call'/8
		      ({'hipe_bs_primop','bs_validate_unicode'}, Lbl, [Src|[]], [], Base, Offset, Env, %% Line 1385
												       [{'bs_put_integer',F,{'integer',32},1,FF,A3}|Instructions])
	  %% Line 1389
	  <[{'bs_final2',Src,Dst}|Instructions],_X_Base,Offset,Env> when 'true' ->
	      let <_cor74> =
		  %% Line 1390
		  apply 'mk_var'/1
		      (Dst)
	      in  let <_cor73> =
		      %% Line 1391
		      apply 'trans_arg'/1
			  (Src)
		  in  let <_cor75> =
			  %% Line 1390
			  call 'hipe_icode':'mk_primop'
			      ([_cor74|[]], {'hipe_bs_primop','bs_final'}, %% Line 1391
									   [_cor73|[Offset|[]]])
		      in  let <_cor76> =
			      %% Line 1392
			      apply 'trans_fun'/2
				  (Instructions, Env)
			  in  %% Line 1390
			      [_cor75|_cor76]
	  %% Line 1393
	  <Instructions,_X_Base,_X_Offset,Env> when 'true' ->
	      %% Line 1394
	      apply 'trans_fun'/2
		  (Instructions, Env)
	end
'trans_bs_get_or_skip_utf8'/5 =
    %% Line 1397
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Dst> =
	    %% Line 1398
	    apply 'mk_var'/1
		(_cor2)
	in  let <MsVar> =
		%% Line 1399
		apply 'mk_var'/1
		    (_cor3)
	    in  %% Line 1400
		apply 'trans_op_call'/6
		    ({'hipe_bs_primop','bs_get_utf8'}, _cor4, [MsVar|[]], [Dst|[MsVar|[]]], _cor0, _cor1)
'trans_bs_get_or_skip_utf16'/6 =
    %% Line 1403
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Dst> =
	    %% Line 1404
	    apply 'mk_var'/1
		(_cor2)
	in  let <MsVar> =
		%% Line 1405
		apply 'mk_var'/1
		    (_cor4)
	    in  let <Flags> =
		    %% Line 1406
		    apply 'resolve_native_endianess'/1
			(_cor3)
		in  let <Name> = {%% Line 1407
			 'bs_get_utf16',%% Line 1407
					Flags}
		    in  %% Line 1408
			apply 'trans_op_call'/6
			    ({'hipe_bs_primop',Name}, _cor5, [MsVar|[]], [Dst|[MsVar|[]]], _cor0, _cor1)
'trans_bs_get_or_skip_utf32'/6 =
    %% Line 1411
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Dst> =
	    %% Line 1412
	    apply 'mk_var'/1
		(_cor2)
	in  let <MsVar> =
		%% Line 1413
		apply 'mk_var'/1
		    (_cor4)
	    in  let <Flags> =
		    %% Line 1414
		    apply 'resolve_native_endianess'/1
			(_cor3)
		in  %% Line 1415
		    case apply 'trans_one_op_call'/5
			     ({'hipe_bs_primop',{'bs_get_integer',32,Flags}}, _cor5, %% Line 1416
										     [MsVar|[]], %% Line 1416
												 [Dst|[MsVar|[]]], _cor0) of
		      <{I1,Env1}> when 'true' ->
			  let <_cor10> =
			      %% Line 1417
			      apply 'trans_op_call'/6
				  ({'hipe_bs_primop','bs_validate_unicode_retract'}, _cor5, %% Line 1418
											    [Dst|[MsVar|[]]], %% Line 1418
													      [MsVar|[]], %% Line 1418
															  Env1, _cor1)
			  in  %% Line 1417
			      call 'erlang':'++'
				  (I1, _cor10)
		      ( <_cor9> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor9})
			-| ['compiler_generated'] )
		    end
'trans_arith'/5 =
    %% Line 1430
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1431
	case apply 'get_constants_in_temps'/2
		 (_cor3, _cor0) of
	  <{Movs,SrcVars,Env1}> when 'true' ->
	      let <DstVar> =
		  %% Line 1432
		  apply 'mk_var'/1
		      (_cor2)
	      in  %% Line 1435
		  case _cor1 of
		    %% Line 1436
		    <0> when 'true' ->
			let <_cor7> =
			    %% Line 1437
			    apply 'arith_op_name'/1
				(_cor4)
			in  let <Primop> =
				%% Line 1437
				call 'hipe_icode':'mk_primop'
				    ([DstVar|[]], _cor7, SrcVars)
			    in  let <_cor9> =
				    %% Line 1438
				    call 'erlang':'++'
					(Movs, [Primop|[]])
				in  %% Line 1438
				    {_cor9,Env1}
		    %% Line 1439
		    <_cor19> when 'true' ->
			let <_cor11> =
			    %% Line 1441
			    apply 'arith_op_name'/1
				(_cor4)
			in  let <_cor10> =
				%% Line 1442
				apply 'map_label'/1
				    (_cor1)
			    in  %% Line 1440
				case %% Line 1441
				     apply 'make_fallthrough_guard'/5
					 ([DstVar|[]], _cor11, SrcVars, _cor10, %% Line 1442
										Env1) of
				  <{Guard,Env2}> when 'true' ->
				      %% Line 1443
				      {[Movs|[Guard|[]]],Env2}
				  ( <_cor12> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_cor12})
				    -| ['compiler_generated'] )
				end
		  end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'arith_op_name'/1 =
    %% Line 1447
    fun (_cor0) ->
	case _cor0 of
	  <'+'> when 'true' ->
	      '+'
	  %% Line 1448
	  <'-'> when 'true' ->
	      '-'
	  %% Line 1449
	  <'*'> when 'true' ->
	      '*'
	  %% Line 1450
	  <'/'> when 'true' ->
	      '/'
	  %% Line 1451
	  <'div'> when 'true' ->
	      'div'
	  %% Line 1452
	  <'fp_add'> when 'true' ->
	      'fp_add'
	  %% Line 1453
	  <'fp_sub'> when 'true' ->
	      'fp_sub'
	  %% Line 1454
	  <'fp_mul'> when 'true' ->
	      'fp_mul'
	  %% Line 1455
	  <'fp_div'> when 'true' ->
	      'fp_div'
	  %% Line 1456
	  <'rem'> when 'true' ->
	      'rem'
	  %% Line 1457
	  <'bsl'> when 'true' ->
	      'bsl'
	  %% Line 1458
	  <'bsr'> when 'true' ->
	      'bsr'
	  %% Line 1459
	  <'band'> when 'true' ->
	      'band'
	  %% Line 1460
	  <'bor'> when 'true' ->
	      'bor'
	  %% Line 1461
	  <'bxor'> when 'true' ->
	      'bxor'
	  %% Line 1462
	  <'bnot'> when 'true' ->
	      'bnot'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'arith_op_name',1}}] )
	    -| ['compiler_generated'] )
	end
'trans_test_guard'/5 =
    %% Line 1467
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 1468
	case apply 'get_constants_in_temps'/2
		 ([_cor2|[_cor1|[]]], _cor0) of
	  <{Movs,Vars,Env1}> when 'true' ->
	      let <True> =
		  %% Line 1469
		  apply 'mk_label'/1
		      ('new')
	      in  let <_cor8> =
		      %% Line 1470
		      call 'hipe_icode':'label_name'
			  (True)
		  in  let <_cor7> =
			  %% Line 1470
			  apply 'map_label'/1
			      (_cor3)
		      in  let <I> =
			      %% Line 1470
			      call 'hipe_icode':'mk_if'
				  (_cor4, Vars, _cor8, _cor7)
			  in  %% Line 1471
			      {[Movs|[I|[True|[]]]],Env1}
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'make_fallthrough_guard'/5 =
    %% Line 1476
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <ContL> =
	    %% Line 1477
	    apply 'mk_label'/1
		('new')
	in  let <ContLName> =
		%% Line 1478
		call 'hipe_icode':'label_name'
		    (ContL)
	    in  %% Line 1479
		case apply 'clone_dsts'/1
			 (_cor4) of
		  <{Instrs,NewDsts}> when 'true' ->
		      %% Line 1480
		      case apply 'make_guard'/6
			       (NewDsts, _cor3, _cor2, ContLName, _cor1, _cor0) of
			<{Guard,Env1}> when 'true' ->
			    let <_cor9> =
				%% Line 1481
				[Guard|[ContL|Instrs]]
			    in  %% Line 1481
				{_cor9,Env1}
			( <_cor8> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor8})
			  -| ['compiler_generated'] )
		      end
		  ( <_cor7> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor7})
		    -| ['compiler_generated'] )
		end
'make_guard'/6 =
    %% Line 1487
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <Dests = [_cor19|_cor20],GuardOp,Args,ContLName,FailLName,Env> when 'true' ->
	      let <TmpFailL> =
		  %% Line 1488
		  apply 'mk_label'/1
		      ('new')
	      in  let <TmpFailLName> =
		      %% Line 1489
		      call 'hipe_icode':'label_name'
			  (TmpFailL)
		  in  let <GuardOpIns> =
			  %% Line 1490
			  call 'hipe_icode':'mk_guardop'
			      (Dests, GuardOp, Args, %% Line 1491
						     ContLName, %% Line 1491
								TmpFailLName)
		      in  let <_cor9> =
			      %% Line 1493
			      apply 'nillify_all'/1
				  (Dests)
			  in  let <_cor10> =
				  %% Line 1494
				  call 'hipe_icode':'mk_goto'
				      (FailLName)
			      in  let <FailCode> =
				      %% Line 1492
				      [TmpFailL|%% Line 1493
						[_cor9|%% Line 1494
						       [_cor10|[]]]]
				  in  %% Line 1495
				      {[GuardOpIns|FailCode],Env}
	  %% Line 1497
	  <[],GuardOp,Args,ContLName,FailLName,Env> when 'true' ->
	      let <_cor12> =
		  %% Line 1498
		  call 'hipe_icode':'mk_guardop'
		      ([], GuardOp, Args, ContLName, FailLName)
	      in  %% Line 1498
		  {[_cor12|[]],%% Line 1499
			       Env}
	  ( <_cor18,_cor17,_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'make_guard',6}}] )
	    -| ['compiler_generated'] )
	end
'nillify_all'/1 =
    %% Line 1501
    fun (_cor0) ->
	case _cor0 of
	  <[Var|Vars]> when 'true' ->
	      let <_cor1> =
		  %% Line 1502
		  call 'hipe_icode':'mk_const'
		      ([])
	      in  let <_cor2> =
		      %% Line 1502
		      call 'hipe_icode':'mk_move'
			  (Var, _cor1)
		  in  let <_cor3> =
			  %% Line 1502
			  apply 'nillify_all'/1
			      (Vars)
		      in  %% Line 1502
			  [_cor2|_cor3]
	  %% Line 1503
	  <[]> when 'true' ->
	      []
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'nillify_all',1}}] )
	    -| ['compiler_generated'] )
	end
'clone_dsts'/1 =
    %% Line 1505
    fun (_cor0) ->
	%% Line 1506
	apply 'clone_dsts'/3
	    (_cor0, [], [])
'clone_dsts'/3 =
    %% Line 1508
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Dest|Dests],Instrs,NewDests> when 'true' ->
	      %% Line 1509
	      case apply 'clone_dst'/1
		       (Dest) of
		<{I,ND}> when 'true' ->
		    %% Line 1510
		    apply 'clone_dsts'/3
			(Dests, [I|Instrs], [ND|NewDests])
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1511
	  <[],Instrs,NewDests> when 'true' ->
	      let <_cor5> =
		  %% Line 1512
		  call 'lists':'reverse'
		      (Instrs)
	      in  let <_cor4> =
		      %% Line 1512
		      call 'lists':'reverse'
			  (NewDests)
		  in  %% Line 1512
		      {_cor5,_cor4}
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'clone_dsts',3}}] )
	    -| ['compiler_generated'] )
	end
'clone_dst'/1 =
    %% Line 1514
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 1516
	    case call 'hipe_icode':'is_reg'
		     (_cor0) of
	      %% Line 1517
	      <'true'> when 'true' ->
		  %% Line 1518
		  apply 'mk_var'/1
		      ('reg')
	      %% Line 1519
	      <'false'> when 'true' ->
		  %% Line 1520
		  case call 'hipe_icode':'is_var'
			   (_cor0) of
		    <'true'> when 'true' ->
			%% Line 1521
			apply 'mk_var'/1
			    ('new')
		    ( <_cor1> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor1})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
	in  let <_cor5> =
		%% Line 1523
		call 'hipe_icode':'mk_move'
		    (_cor0, _cor3)
	    in  %% Line 1523
		{_cor5,_cor3}
'trans_type_test'/4 =
    %% Line 1531
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <True> =
	    %% Line 1532
	    apply 'mk_label'/1
		('new')
	in  %% Line 1533
	    case apply 'mk_move_and_var'/2
		     (_cor1, _cor0) of
	      <{Move,Var,Env1}> when 'true' ->
		  let <_cor7> =
		      %% Line 1535
		      call 'hipe_icode':'label_name'
			  (True)
		  in  let <_cor6> =
			  %% Line 1535
			  apply 'map_label'/1
			      (_cor2)
		      in  let <I> =
			      %% Line 1534
			      call 'hipe_icode':'mk_type'
				  ([Var|[]], _cor3, _cor7, _cor6)
			  in  %% Line 1536
			      {[Move|[I|[True|[]]]],Env1}
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor5})
		-| ['compiler_generated'] )
	    end
'trans_type_test2'/5 =
    %% Line 1542
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <'function2',Lbl,Arg,Arity,Env> when 'true' ->
	      let <True> =
		  %% Line 1543
		  apply 'mk_label'/1
		      ('new')
	      in  %% Line 1544
		  case apply 'mk_move_and_var'/2
			   (Arg, Env) of
		    <{Move1,Var1,Env1}> when 'true' ->
			%% Line 1545
			case apply 'mk_move_and_var'/2
				 (Arity, Env1) of
			  <{Move2,Var2,Env2}> when 'true' ->
			      let <_cor9> =
				  %% Line 1547
				  call 'hipe_icode':'label_name'
				      (True)
			      in  let <_cor8> =
				      %% Line 1547
				      apply 'map_label'/1
					  (Lbl)
				  in  let <I> =
					  %% Line 1546
					  call 'hipe_icode':'mk_type'
					      ([Var1|[Var2|[]]], 'function2', _cor9, _cor8)
				      in  %% Line 1548
					  {[Move1|[Move2|[I|[True|[]]]]],Env2}
			  ( <_cor7> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor7})
			    -| ['compiler_generated'] )
			end
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'trans_type_test2',5}}] )
	    -| ['compiler_generated'] )
	end
'trans_map_query'/4 =
    %% Line 1554
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_X_MapVar,_X_FailLabel,Env,[]> when 'true' ->
	      %% Line 1555
	      {[],[],Env}
	  %% Line 1556
	  <MapVar,FailLabel,Env,[Key|[Val|KVPs]]> when 'true' ->
	      %% Line 1557
	      case apply 'mk_move_and_var'/2
		       (Key, Env) of
		<{Move,KeyVar,Env1}> when 'true' ->
		    let <PassLabel> =
			%% Line 1558
			apply 'mk_label'/1
			    ('new')
		    in  let <BoolVar> =
			    %% Line 1559
			    call 'hipe_icode':'mk_new_var'
				()
			in  let <ValVar> =
				%% Line 1560
				apply 'mk_var'/1
				    (Val)
			    in  let <IsKeyCall> =
				    %% Line 1561
				    call 'hipe_icode':'mk_call'
					([BoolVar|[]], 'maps', 'is_key', [KeyVar|[MapVar|[]]], %% Line 1562
											       'remote')
				in  let <_cor10> =
					%% Line 1563
					call 'hipe_icode':'mk_const'
					    ('true')
				    in  let <_cor9> =
					    %% Line 1564
					    call 'hipe_icode':'label_name'
						(PassLabel)
					in  let <TrueTest> =
						%% Line 1563
						call 'hipe_icode':'mk_if'
						    ('=:=', [BoolVar|[_cor10|[]]], _cor9, %% Line 1564
											  FailLabel)
					    in  let <GetCall> =
						    %% Line 1565
						    call 'hipe_icode':'mk_call'
							([ValVar|[]], 'maps', 'get', [KeyVar|[MapVar|[]]], 'remote')
						in  %% Line 1566
						    case apply 'trans_map_query'/4
							     (MapVar, FailLabel, Env1, KVPs) of
						      <{TestList,GetList,Env2}> when 'true' ->
							  %% Line 1567
							  {[Move|[IsKeyCall|[TrueTest|[PassLabel|TestList]]]],[GetCall|GetList],Env2}
						      ( <_cor13> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_cor13})
							-| ['compiler_generated'] )
						    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'trans_map_query',4}}] )
	    -| ['compiler_generated'] )
	end
'gen_put_map_instrs'/7 =
    %% Line 1572
    fun (_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <'exists',Op,TempMapVar,Dst,FailLbl,Pairs,Env> when 'true' ->
	      let <TrueLabel> =
		  %% Line 1573
		  apply 'mk_label'/1
		      ('new')
	      in  let <_cor9> =
		      %% Line 1575
		      call 'hipe_icode':'label_name'
			  (TrueLabel)
		  in  let <_cor8> =
			  %% Line 1575
			  apply 'map_label'/1
			      (FailLbl)
		      in  let <IsMapCode> =
			      %% Line 1574
			      call 'hipe_icode':'mk_type'
				  ([TempMapVar|[]], 'map', _cor9, _cor8)
			  in  let <DstMapVar> =
				  %% Line 1576
				  apply 'mk_var'/1
				      (Dst)
			      in  let <_cor14> =
				      %% Line 1578
				      case Op of
					%% Line 1579
					<'assoc'> when 'true' ->
					    %% Line 1580
					    apply 'trans_put_map_assoc'/5
						(TempMapVar, DstMapVar, Pairs, Env, [])
					%% Line 1581
					<'exact'> when 'true' ->
					    let <_cor12> =
						%% Line 1583
						apply 'map_label'/1
						    (FailLbl)
					    in  %% Line 1582
						apply 'trans_put_map_exact'/6
						    (TempMapVar, DstMapVar, _cor12, %% Line 1583
										    Pairs, %% Line 1583
											   Env, %% Line 1583
												[])
					( <_cor13> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor13})
					  -| ['compiler_generated'] )
				      end
				  in  %% Line 1578
				      case _cor14 of
					<{ReturnLbl,PutInstructions,Env1}> when 'true' ->
					    %% Line 1585
					    {[IsMapCode|[TrueLabel|[PutInstructions|[ReturnLbl|[]]]]],Env1}
					( <_cor15> when 'true' ->
					      primop 'match_fail'
						  ({'badmatch',_cor15})
					  -| ['compiler_generated'] )
				      end
	  %% Line 1586
	  <'new',Op,TempMapVar,Dst,'new',Pairs,Env> when 'true' ->
	      let <TrueLabel> =
		  %% Line 1587
		  apply 'mk_label'/1
		      ('new')
	      in  let <FailLbl> =
		      %% Line 1588
		      apply 'mk_label'/1
			  ('new')
		  in  let <_cor19> =
			  %% Line 1590
			  call 'hipe_icode':'label_name'
			      (TrueLabel)
		      in  let <_cor18> =
			      %% Line 1591
			      call 'hipe_icode':'label_name'
				  (FailLbl)
			  in  let <IsMapCode> =
				  %% Line 1589
				  call 'hipe_icode':'mk_type'
				      ([TempMapVar|[]], 'map', _cor19, _cor18)
			      in  let <DstMapVar> =
				      %% Line 1592
				      apply 'mk_var'/1
					  (Dst)
				  in  let <_cor24> =
					  %% Line 1594
					  case Op of
					    %% Line 1595
					    <'assoc'> when 'true' ->
						%% Line 1596
						apply 'trans_put_map_assoc'/5
						    (TempMapVar, DstMapVar, Pairs, Env, [])
					    %% Line 1597
					    <'exact'> when 'true' ->
						let <_cor22> =
						    %% Line 1599
						    call 'hipe_icode':'label_name'
							(FailLbl)
						in  %% Line 1598
						    apply 'trans_put_map_exact'/6
							(TempMapVar, DstMapVar, _cor22, %% Line 1599
											Pairs, %% Line 1599
											       Env, %% Line 1599
												    [])
					    ( <_cor23> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor23})
					      -| ['compiler_generated'] )
					  end
				      in  %% Line 1594
					  case _cor24 of
					    <{ReturnLbl,PutInstructions,Env1}> when 'true' ->
						let <_cor26> =
						    %% Line 1601
						    call 'hipe_icode':'mk_const'
							('badarg')
						in  let <Fail> =
							%% Line 1601
							call 'hipe_icode':'mk_fail'
							    ([_cor26|[]], 'error')
						    in  %% Line 1602
							{[IsMapCode|[TrueLabel|[PutInstructions|[FailLbl|[Fail|[ReturnLbl|[]]]]]]],Env1}
					    ( <_cor25> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor25})
					      -| ['compiler_generated'] )
					  end
	  ( <_cor34,_cor33,_cor32,_cor31,_cor30,_cor29,_cor28> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor34,_cor33,_cor32,_cor31,_cor30,_cor29,_cor28})
		  -| [{'function_name',{'gen_put_map_instrs',7}}] )
	    -| ['compiler_generated'] )
	end
'trans_put_map_assoc'/5 =
    %% Line 1609
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <MapVar,DestMapVar,[],Env,Acc> when 'true' ->
	      let <MoveToReturnVar> =
		  %% Line 1610
		  call 'hipe_icode':'mk_move'
		      (DestMapVar, MapVar)
	      in  let <ReturnLbl> =
		      %% Line 1611
		      apply 'mk_label'/1
			  ('new')
		  in  let <_cor7> =
			  %% Line 1612
			  call 'hipe_icode':'label_name'
			      (ReturnLbl)
		      in  let <GotoReturn> =
			      %% Line 1612
			      call 'hipe_icode':'mk_goto'
				  (_cor7)
			  in  let <_cor9> =
				  %% Line 1613
				  call 'lists':'reverse'
				      ([GotoReturn|[MoveToReturnVar|Acc]])
			      in  %% Line 1613
				  {ReturnLbl,_cor9,Env}
	  %% Line 1614
	  <MapVar,DestMapVar,[Key|[Value|Rest]],Env,Acc> when 'true' ->
	      %% Line 1615
	      case apply 'mk_move_and_var'/2
		       (Key, Env) of
		<{MoveKey,KeyVar,Env1}> when 'true' ->
		    %% Line 1616
		    case apply 'mk_move_and_var'/2
			     (Value, Env1) of
		      <{MoveVal,ValVar,Env2}> when 'true' ->
			  let <BifCall> =
			      %% Line 1617
			      call 'hipe_icode':'mk_call'
				  ([MapVar|[]], 'maps', 'put', %% Line 1618
							       [KeyVar|[ValVar|[MapVar|[]]]], %% Line 1618
											      'remote')
			  in  %% Line 1619
			      apply 'trans_put_map_assoc'/5
				  (MapVar, DestMapVar, Rest, Env2, %% Line 1620
								   [BifCall|[MoveVal|[MoveKey|Acc]]])
		      ( <_cor11> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor11})
			-| ['compiler_generated'] )
		    end
		( <_cor10> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor10})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor17,_cor16,_cor15,_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15,_cor14,_cor13})
		  -| [{'function_name',{'trans_put_map_assoc',5}}] )
	    -| ['compiler_generated'] )
	end
'trans_put_map_exact'/6 =
    %% Line 1627
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <MapVar,DestMapVar,_X_FLbl,[],Env,Acc> when 'true' ->
	      let <MoveToReturnVar> =
		  %% Line 1628
		  call 'hipe_icode':'mk_move'
		      (DestMapVar, MapVar)
	      in  let <ReturnLbl> =
		      %% Line 1629
		      apply 'mk_label'/1
			  ('new')
		  in  let <_cor8> =
			  %% Line 1630
			  call 'hipe_icode':'label_name'
			      (ReturnLbl)
		      in  let <GotoReturn> =
			      %% Line 1630
			      call 'hipe_icode':'mk_goto'
				  (_cor8)
			  in  let <_cor10> =
				  %% Line 1631
				  call 'lists':'reverse'
				      ([GotoReturn|[MoveToReturnVar|Acc]])
			      in  %% Line 1631
				  {ReturnLbl,_cor10,Env}
	  %% Line 1632
	  <MapVar,DestMapVar,FLbl,[Key|[Value|Rest]],Env,Acc> when 'true' ->
	      let <SuccLbl> =
		  %% Line 1633
		  apply 'mk_label'/1
		      ('new')
	      in  %% Line 1634
		  case apply 'mk_move_and_var'/2
			   (Key, Env) of
		    <{MoveKey,KeyVar,Env1}> when 'true' ->
			%% Line 1635
			case apply 'mk_move_and_var'/2
				 (Value, Env1) of
			  <{MoveVal,ValVar,Env2}> when 'true' ->
			      let <IsKey> =
				  %% Line 1636
				  call 'hipe_icode':'mk_new_var'
				      ()
			      in  let <BifCallIsKey> =
				      %% Line 1637
				      call 'hipe_icode':'mk_call'
					  ([IsKey|[]], 'maps', 'is_key', %% Line 1638
									 [KeyVar|[MapVar|[]]], %% Line 1638
											       'remote')
				  in  let <_cor17> =
					  %% Line 1639
					  call 'hipe_icode':'mk_const'
					      ('true')
				      in  let <_cor16> =
					      %% Line 1640
					      call 'hipe_icode':'label_name'
						  (SuccLbl)
					  in  let <IsKeyTest> =
						  %% Line 1639
						  call 'hipe_icode':'mk_if'
						      ('=:=', [IsKey|[_cor17|[]]], _cor16, %% Line 1640
											   FLbl)
					      in  let <BifCallPut> =
						      %% Line 1641
						      call 'hipe_icode':'mk_call'
							  ([MapVar|[]], 'maps', 'put', %% Line 1642
										       [KeyVar|[ValVar|[MapVar|[]]]], %% Line 1642
														      'remote')
						  in  let <Acc1> =
							  %% Line 1643
							  [BifCallPut|[SuccLbl|[IsKeyTest|[BifCallIsKey|[MoveVal|[MoveKey|Acc]]]]]]
						      in  %% Line 1644
							  apply 'trans_put_map_exact'/6
							      (MapVar, DestMapVar, FLbl, Rest, Env2, Acc1)
			  ( <_cor13> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor13})
			    -| ['compiler_generated'] )
			end
		    ( <_cor12> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor12})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor26,_cor25,_cor24,_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor26,_cor25,_cor24,_cor23,_cor22,_cor21})
		  -| [{'function_name',{'trans_put_map_exact',6}}] )
	    -| ['compiler_generated'] )
	end
'trans_puts'/2 =
    %% Line 1651
    fun (_cor1,_cor0) ->
	%% Line 1652
	apply 'trans_puts'/4
	    (_cor1, [], [], _cor0)
'trans_puts'/4 =
    %% Line 1654
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'put',X}|Code],Vars,Moves,Env> when 'true' ->
	      %% Line 1655
	      case apply 'type'/1
		       (X) of
		%% Line 1656
		<'var'> when 'true' ->
		    let <Var> =
			%% Line 1657
			apply 'mk_var'/1
			    (X)
		    in  %% Line 1658
			apply 'trans_puts'/4
			    (Code, [Var|Vars], Moves, Env)
		%% Line 1659
		<{'beam_const',C}> when 'true' ->
		    let <Var> =
			%% Line 1660
			apply 'mk_var'/1
			    ('new')
		    in  let <_cor6> =
			    %% Line 1661
			    call 'hipe_icode':'mk_const'
				(C)
			in  let <Move> =
				%% Line 1661
				call 'hipe_icode':'mk_move'
				    (Var, _cor6)
			    in  %% Line 1662
				apply 'trans_puts'/4
				    (Code, [Var|Vars], [Move|Moves], Env)
		( <_cor8> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor8})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1664
	  <Code,Vars,Moves,Env> when 'true' ->
	      %% Line 1665
	      {Moves,Code,Vars,Env}
	end
'trans_is_eq_exact'/4 =
    %% Line 1673
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 1674
	    apply 'is_var'/1
		(_cor2)
	in  let <_cor4> =
		%% Line 1674
		apply 'is_var'/1
		    (_cor1)
	    in  %% Line 1674
		case <_cor5,_cor4> of
		  %% Line 1675
		  <'true','true'> when 'true' ->
		      let <True> =
			  %% Line 1676
			  apply 'mk_label'/1
			      ('new')
		      in  let <_cor9> =
			      %% Line 1678
			      apply 'mk_var'/1
				  (_cor2)
			  in  let <_cor10> =
				  %% Line 1678
				  apply 'mk_var'/1
				      (_cor1)
			      in  let <_cor8> =
				      %% Line 1679
				      call 'hipe_icode':'label_name'
					  (True)
				  in  let <_cor7> =
					  %% Line 1679
					  apply 'map_label'/1
					      (_cor3)
				      in  let <I> =
					      %% Line 1677
					      call 'hipe_icode':'mk_if'
						  ('=:=', %% Line 1678
							  [_cor9|[_cor10|[]]], _cor8, _cor7)
					  in  %% Line 1680
					      {[I|[True|[]]],_cor0}
		  %% Line 1681
		  <'true','false'> when 'true' ->
		      %% Line 1682
		      apply 'trans_is_eq_exact_var_const'/4
			  (_cor3, _cor2, _cor1, _cor0)
		  %% Line 1683
		  <'false','true'> when 'true' ->
		      %% Line 1684
		      apply 'trans_is_eq_exact_var_const'/4
			  (_cor3, _cor1, _cor2, _cor0)
		  %% Line 1685
		  <'false','false'> when 'true' ->
		      %% Line 1686
		      case <> of
			%% Line 1687
			<>
			    when call 'erlang':'=:='
				  (_cor2,
				   _cor1) ->
			    %% Line 1688
			    {[],_cor0}
			%% Line 1689
			<> when 'true' ->
			    let <Never> =
				%% Line 1690
				apply 'mk_label'/1
				    ('new')
			    in  let <_cor13> =
				    %% Line 1691
				    apply 'map_label'/1
					(_cor3)
				in  let <I> =
					%% Line 1691
					call 'hipe_icode':'mk_goto'
					    (_cor13)
				    in  %% Line 1692
					{[I|[Never|[]]],_cor0}
		      end
		  ( <_fol92,_fol93> when 'true' ->
			let <_cor16> = {_fol92,_fol93}
			in  primop 'match_fail'
				({'case_clause',_cor16})
		    -| ['compiler_generated'] )
		end
'trans_is_eq_exact_var_const'/4 =
    %% Line 1696
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <True> =
	    %% Line 1697
	    apply 'mk_label'/1
		('new')
	in  let <NewArg1> =
		%% Line 1698
		apply 'mk_var'/1
		    (_cor2)
	    in  let <TrueLabName> =
		    %% Line 1699
		    call 'hipe_icode':'label_name'
			(True)
		in  let <FalseLabName> =
			%% Line 1700
			apply 'map_label'/1
			    (_cor3)
		    in  let <_cor11> =
			    %% Line 1701
			    case _cor1 of
			      %% Line 1702
			      <{'float',Float}> when 'true' ->
				  let <_cor8> =
				      %% Line 1704
				      call 'hipe_icode':'mk_const'
					  (Float)
				  in  %% Line 1703
				      call 'hipe_icode':'mk_if'
					  ('=:=', %% Line 1704
						  [NewArg1|[_cor8|[]]], %% Line 1705
									TrueLabName, %% Line 1705
										     FalseLabName)
			      %% Line 1706
			      <{'literal',Literal}> when 'true' ->
				  let <_cor9> =
				      %% Line 1708
				      call 'hipe_icode':'mk_const'
					  (Literal)
				  in  %% Line 1707
				      call 'hipe_icode':'mk_if'
					  ('=:=', %% Line 1708
						  [NewArg1|[_cor9|[]]], %% Line 1709
									TrueLabName, %% Line 1709
										     FalseLabName)
			      %% Line 1710
			      <_cor17> when 'true' ->
				  %% Line 1711
				  call 'hipe_icode':'mk_type'
				      ([NewArg1|[]], _cor1, TrueLabName, FalseLabName)
			    end
			in  %% Line 1713
			    {[_cor11|[True|[]]],_cor0}
'trans_is_ne_exact'/4 =
    %% Line 1719
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 1720
	    apply 'is_var'/1
		(_cor2)
	in  let <_cor4> =
		%% Line 1720
		apply 'is_var'/1
		    (_cor1)
	    in  %% Line 1720
		case <_cor5,_cor4> of
		  %% Line 1721
		  <'true','true'> when 'true' ->
		      let <True> =
			  %% Line 1722
			  apply 'mk_label'/1
			      ('new')
		      in  let <_cor9> =
			      %% Line 1724
			      apply 'mk_var'/1
				  (_cor2)
			  in  let <_cor10> =
				  %% Line 1724
				  apply 'mk_var'/1
				      (_cor1)
			      in  let <_cor8> =
				      %% Line 1725
				      call 'hipe_icode':'label_name'
					  (True)
				  in  let <_cor7> =
					  %% Line 1725
					  apply 'map_label'/1
					      (_cor3)
				      in  let <I> =
					      %% Line 1723
					      call 'hipe_icode':'mk_if'
						  ('=/=', %% Line 1724
							  [_cor9|[_cor10|[]]], _cor8, _cor7)
					  in  %% Line 1726
					      {[I|[True|[]]],_cor0}
		  %% Line 1727
		  <'true','false'> when 'true' ->
		      %% Line 1728
		      apply 'trans_is_ne_exact_var_const'/4
			  (_cor3, _cor2, _cor1, _cor0)
		  %% Line 1729
		  <'false','true'> when 'true' ->
		      %% Line 1730
		      apply 'trans_is_ne_exact_var_const'/4
			  (_cor3, _cor1, _cor2, _cor0)
		  %% Line 1731
		  <'false','false'> when 'true' ->
		      %% Line 1732
		      case <> of
			%% Line 1733
			<>
			    when call 'erlang':'=/='
				  (_cor2,
				   _cor1) ->
			    %% Line 1734
			    {[],_cor0}
			%% Line 1735
			<> when 'true' ->
			    let <Never> =
				%% Line 1736
				apply 'mk_label'/1
				    ('new')
			    in  let <_cor13> =
				    %% Line 1737
				    apply 'map_label'/1
					(_cor3)
				in  let <I> =
					%% Line 1737
					call 'hipe_icode':'mk_goto'
					    (_cor13)
				    in  %% Line 1738
					{[I|[Never|[]]],_cor0}
		      end
		  ( <_fol102,_fol103> when 'true' ->
			let <_cor16> = {_fol102,_fol103}
			in  primop 'match_fail'
				({'case_clause',_cor16})
		    -| ['compiler_generated'] )
		end
'trans_is_ne_exact_var_const'/4 =
    %% Line 1742
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <True> =
	    %% Line 1743
	    apply 'mk_label'/1
		('new')
	in  let <NewArg1> =
		%% Line 1744
		apply 'mk_var'/1
		    (_cor2)
	    in  let <TrueLabName> =
		    %% Line 1745
		    call 'hipe_icode':'label_name'
			(True)
		in  let <FalseLabName> =
			%% Line 1746
			apply 'map_label'/1
			    (_cor3)
		    in  let <_cor11> =
			    %% Line 1747
			    case _cor1 of
			      %% Line 1748
			      <{'float',Float}> when 'true' ->
				  let <_cor8> =
				      %% Line 1750
				      call 'hipe_icode':'mk_const'
					  (Float)
				  in  %% Line 1749
				      call 'hipe_icode':'mk_if'
					  ('=/=', %% Line 1750
						  [NewArg1|[_cor8|[]]], %% Line 1751
									TrueLabName, %% Line 1751
										     FalseLabName)
			      %% Line 1752
			      <{'literal',Literal}> when 'true' ->
				  let <_cor9> =
				      %% Line 1754
				      call 'hipe_icode':'mk_const'
					  (Literal)
				  in  %% Line 1753
				      call 'hipe_icode':'mk_if'
					  ('=/=', %% Line 1754
						  [NewArg1|[_cor9|[]]], %% Line 1755
									TrueLabName, %% Line 1755
										     FalseLabName)
			      %% Line 1756
			      <_cor17> when 'true' ->
				  %% Line 1757
				  call 'hipe_icode':'mk_type'
				      ([NewArg1|[]], _cor1, FalseLabName, TrueLabName)
			    end
			in  %% Line 1759
			    {[_cor11|[True|[]]],_cor0}
'trans_is_eq'/4 =
    %% Line 1768
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 1769
	    apply 'is_var'/1
		(_cor2)
	in  let <_cor4> =
		%% Line 1769
		apply 'is_var'/1
		    (_cor1)
	    in  %% Line 1769
		case <_cor5,_cor4> of
		  %% Line 1770
		  <'true','true'> when 'true' ->
		      %% Line 1771
		      apply 'trans_test_guard'/5
			  ('==', _cor3, _cor2, _cor1, _cor0)
		  %% Line 1772
		  <'true','false'> when 'true' ->
		      %% Line 1773
		      case _cor1 of
			%% Line 1774
			<{'atom',_X_SomeAtom}> when 'true' ->
			    %% Line 1775
			    apply 'trans_is_eq_exact_var_const'/4
				(_cor3, _cor2, _cor1, _cor0)
			%% Line 1776
			<_cor16> when 'true' ->
			    %% Line 1777
			    apply 'trans_test_guard'/5
				('==', _cor3, _cor2, _cor1, _cor0)
		      end
		  %% Line 1779
		  <'false','true'> when 'true' ->
		      %% Line 1780
		      apply 'trans_is_eq'/4
			  (_cor3, _cor1, _cor2, _cor0)
		  %% Line 1781
		  <'false','false'> when 'true' ->
		      %% Line 1782
		      case <> of
			%% Line 1783
			<>
			    when call 'erlang':'=='
				  (_cor2,
				   _cor1) ->
			    %% Line 1784
			    {[],_cor0}
			%% Line 1785
			<> when 'true' ->
			    let <Never> =
				%% Line 1786
				apply 'mk_label'/1
				    ('new')
			    in  let <_cor8> =
				    %% Line 1787
				    apply 'map_label'/1
					(_cor3)
				in  let <I> =
					%% Line 1787
					call 'hipe_icode':'mk_goto'
					    (_cor8)
				    in  %% Line 1788
					{[I|[Never|[]]],_cor0}
		      end
		  ( <_fol112,_fol113> when 'true' ->
			let <_cor11> = {_fol112,_fol113}
			in  primop 'match_fail'
				({'case_clause',_cor11})
		    -| ['compiler_generated'] )
		end
'trans_is_ne'/4 =
    %% Line 1796
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 1797
	    apply 'is_var'/1
		(_cor2)
	in  let <_cor4> =
		%% Line 1797
		apply 'is_var'/1
		    (_cor1)
	    in  %% Line 1797
		case <_cor5,_cor4> of
		  %% Line 1798
		  <'true','true'> when 'true' ->
		      %% Line 1799
		      apply 'trans_test_guard'/5
			  ('/=', _cor3, _cor2, _cor1, _cor0)
		  %% Line 1800
		  <'true','false'> when 'true' ->
		      %% Line 1801
		      case _cor1 of
			%% Line 1802
			<{'atom',_X_SomeAtom}> when 'true' ->
			    %% Line 1803
			    apply 'trans_is_ne_exact_var_const'/4
				(_cor3, _cor2, _cor1, _cor0)
			%% Line 1804
			<_cor16> when 'true' ->
			    %% Line 1805
			    apply 'trans_test_guard'/5
				('/=', _cor3, _cor2, _cor1, _cor0)
		      end
		  %% Line 1807
		  <'false','true'> when 'true' ->
		      %% Line 1808
		      apply 'trans_is_ne'/4
			  (_cor3, _cor1, _cor2, _cor0)
		  %% Line 1809
		  <'false','false'> when 'true' ->
		      %% Line 1810
		      case <> of
			%% Line 1811
			<>
			    when call 'erlang':'/='
				  (_cor2,
				   _cor1) ->
			    %% Line 1812
			    {[],_cor0}
			%% Line 1813
			<> when 'true' ->
			    let <Never> =
				%% Line 1814
				apply 'mk_label'/1
				    ('new')
			    in  let <_cor8> =
				    %% Line 1815
				    apply 'map_label'/1
					(_cor3)
				in  let <I> =
					%% Line 1815
					call 'hipe_icode':'mk_goto'
					    (_cor8)
				    in  %% Line 1816
					{[I|[Never|[]]],_cor0}
		      end
		  ( <_fol118,_fol119> when 'true' ->
			let <_cor11> = {_fol118,_fol119}
			in  primop 'match_fail'
				({'case_clause',_cor11})
		    -| ['compiler_generated'] )
		end
'trans_allocate'/1 =
    %% Line 1825
    fun (_cor0) ->
	%% Line 1826
	apply 'trans_allocate'/2
	    (_cor0, [])
'trans_allocate'/2 =
    %% Line 1828
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,Acc> when 'true' ->
	      %% Line 1829
	      Acc
	  %% Line 1830
	  <N,Acc> when 'true' ->
	      let <_cor3> =
		  %% Line 1831
		  call 'erlang':'-'
		      (N, 1)
	      in  let <_cor4> =
		      %% Line 1831
		      apply 'mk_var'/1
			  ({'y',_cor3})
		  in  let <_cor2> =
			  %% Line 1832
			  call 'hipe_icode':'mk_const'
			      ('dummy_value')
		      in  let <Move> =
			      %% Line 1831
			      call 'hipe_icode':'mk_move'
				  (_cor4, _cor2)
			  in  let <_cor6> =
				  %% Line 1833
				  call 'erlang':'-'
				      (N, 1)
			      in  %% Line 1833
				  apply 'trans_allocate'/2
				      (_cor6, [Move|Acc])
	end
'trans_trim'/2 =
    %% Line 1839
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 1840
	    apply 'trans_trim'/4
		(_cor1, _cor0, 0, [])
	in  %% Line 1840
	    call 'lists':'reverse'
		(_cor2)
'trans_trim'/4 =
    %% Line 1842
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <_cor14,0,_cor15,Acc> when 'true' ->
	      %% Line 1843
	      Acc
	  %% Line 1844
	  <N,NY,Y,Acc> when 'true' ->
	      let <_cor5> =
		  %% Line 1845
		  apply 'mk_var'/1
		      ({'y',Y})
	      in  let <_cor4> =
		      %% Line 1845
		      apply 'mk_var'/1
			  ({'y',N})
		  in  let <Move> =
			  %% Line 1845
			  call 'hipe_icode':'mk_move'
			      (_cor5, _cor4)
		      in  let <_cor9> =
			      %% Line 1846
			      call 'erlang':'+'
				  (N, 1)
			  in  let <_cor8> =
				  %% Line 1846
				  call 'erlang':'-'
				      (NY, 1)
			      in  let <_cor7> =
				      %% Line 1846
				      call 'erlang':'+'
					  (Y, 1)
				  in  %% Line 1846
				      apply 'trans_trim'/4
					  (_cor9, _cor8, _cor7, [Move|Acc])
	end
'mk_move_and_var'/2 =
    %% Line 1851
    fun (_cor1,_cor0) ->
	%% Line 1852
	case apply 'type'/1
		 (_cor1) of
	  %% Line 1853
	  <'var'> when 'true' ->
	      let <V> =
		  %% Line 1854
		  apply 'mk_var'/1
		      (_cor1)
	      in  %% Line 1855
		  {[],V,_cor0}
	  %% Line 1856
	  <{'beam_const',C}> when 'true' ->
	      let <V> =
		  %% Line 1857
		  apply 'mk_var'/1
		      ('new')
	      in  let <_cor4> =
		      %% Line 1858
		      call 'hipe_icode':'mk_const'
			  (C)
		  in  let <_cor5> =
			  %% Line 1858
			  call 'hipe_icode':'mk_move'
			      (V, _cor4)
		      in  %% Line 1858
			  {[_cor5|[]],V,_cor0}
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'closure_info_mfa'/1 =
    %% Line 1865
    fun (_cor0) ->
	case _cor0 of
	  <{'closure_info',MFA,_cor2,_cor3}> when 'true' ->
	      MFA
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'closure_info_mfa',1}}] )
	    -| ['compiler_generated'] )
	end
'closure_info_arity'/1 =
    %% Line 1866
    fun (_cor0) ->
	case _cor0 of
	  <{'closure_info',_cor2,Arity,_cor3}> when 'true' ->
	      Arity
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'closure_info_arity',1}}] )
	    -| ['compiler_generated'] )
	end
'find_closure_info'/1 =
    %% Line 1869
    fun (_cor0) ->
	apply 'mod_find_closure_info'/2
	    (_cor0, [])
'mod_find_closure_info'/2 =
    %% Line 1871
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[FunCode|Fs],CI> when 'true' ->
	      let <_cor2> =
		  %% Line 1872
		  apply 'find_closure_info'/2
		      (FunCode, CI)
	      in  %% Line 1872
		  apply 'mod_find_closure_info'/2
		      (Fs, _cor2)
	  %% Line 1873
	  <[],CI> when 'true' ->
	      %% Line 1874
	      CI
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'mod_find_closure_info',2}}] )
	    -| ['compiler_generated'] )
	end
'find_closure_info'/2 =
    %% Line 1876
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'patched_make_fun',MFA = {_X_M,_X_F,A},_X_Magic,FreeVarNum,_X_Index}|BeamCode],%% Line 1877
											    ClosureInfo> when 'true' ->
	      let <_cor2> =
		  %% Line 1879
		  call 'erlang':'-'
		      (A, FreeVarNum)
	      in  let <_cor3> =
		      %% Line 1879
		      call 'erlang':'+'
			  (_cor2, 1)
		  in  let <NewClosure> =
			  %% Line 1879
			  {'closure_info',MFA,_cor3,FreeVarNum}
		      in  %% Line 1880
			  apply 'find_closure_info'/2
			      (BeamCode, [NewClosure|ClosureInfo])
	  %% Line 1881
	  <[_X_Inst|BeamCode],ClosureInfo> when 'true' ->
	      %% Line 1882
	      apply 'find_closure_info'/2
		  (BeamCode, ClosureInfo)
	  %% Line 1883
	  <[],ClosureInfo> when 'true' ->
	      %% Line 1884
	      ClosureInfo
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'find_closure_info',2}}] )
	    -| ['compiler_generated'] )
	end
'get_closure_info'/2 =
    %% Line 1890
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <MFA,[CI|Rest]> when 'true' ->
	      %% Line 1891
	      case apply 'closure_info_mfa'/1
		       (CI) of
		%% Line 1892
		<_cor5>
		    when call 'erlang':'=:='
			  (_cor5,
			   MFA) ->
		    CI
		%% Line 1893
		<_cor6> when 'true' ->
		    apply 'get_closure_info'/2
			(MFA, Rest)
	      end
	  %% Line 1895
	  <_cor7,[]> when 'true' ->
	      %% Line 1896
	      'not_a_closure'
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'get_closure_info',2}}] )
	    -| ['compiler_generated'] )
	end
'patch_closure_entry'/2 =
    %% Line 1907
    fun (_cor1,_cor0) ->
	let <Arity> =
	    %% Line 1908
	    apply 'closure_info_arity'/1
		(_cor0)
	in  let <_cor3> =
		%% Line 1911
		call 'hipe_icode':'icode_params'
		    (_cor1)
	    in  %% Line 1910
		case %% Line 1911
		     apply 'split_params'/3
			 (Arity, _cor3, []) of
		  <{Args,Closure,FreeVars}> when 'true' ->
		      %% Line 1912
		      case call 'hipe_icode':'icode_code'
			       (_cor1) of
			<[Start|_cor20]> when 'true' ->
			    %% Line 1913
			    case call 'hipe_icode':'icode_label_range'
				     (_cor1) of
			      <{_X_LMin,LMax}> when 'true' ->
				  let <_cor7> =
				      %% Line 1914
				      call 'erlang':'+'
					  (LMax, 1)
				  in  do  %% Line 1914
					  call 'hipe_gensym':'set_label'
					      ('icode', _cor7)
					  %% Line 1915
					  case call 'hipe_icode':'icode_var_range'
						   (_cor1) of
					    <{_X_VMin,VMax}> when 'true' ->
						let <_cor9> =
						    %% Line 1916
						    call 'erlang':'+'
							(VMax, 1)
						in  do  %% Line 1916
							call 'hipe_gensym':'set_var'
							    ('icode', _cor9)
							let <_cor10> =
							    %% Line 1918
							    call 'hipe_icode':'label_name'
								(Start)
							in  let <MoveCode> =
								%% Line 1917
								apply 'gen_get_free_vars'/3
								    (FreeVars, Closure, _cor10)
							    in  let <_cor12> =
								    %% Line 1920
								    call 'hipe_icode':'icode_code'
									(_cor1)
								in  let <_cor13> =
									%% Line 1919
									call 'erlang':'++'
									    (MoveCode, _cor12)
								    in  let <Icode1> =
									    %% Line 1919
									    call 'hipe_icode':'icode_code_update'
										(_cor1, _cor13)
									in  let <Icode2> =
										%% Line 1921
										call 'hipe_icode':'icode_params_update'
										    (Icode1, Args)
									    in  let <_cor16> =
										    %% Line 1923
										    call 'erlang':'-'
											(Arity, 1)
										in  %% Line 1923
										    call 'hipe_icode':'icode_closure_arity_update'
											(Icode2, _cor16)
					    ( <_cor8> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_cor8})
					      -| ['compiler_generated'] )
					  end
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor6})
				-| ['compiler_generated'] )
			    end
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor5})
			  -| ['compiler_generated'] )
		      end
		  ( <_cor4> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor4})
		    -| ['compiler_generated'] )
		end
'gen_get_free_vars'/3 =
    %% Line 1928
    fun (_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 1929
	    call 'hipe_icode':'mk_new_label'
		()
	in  let <_cor4> =
		%% Line 1930
		apply 'get_free_vars'/4
		    (_cor2, _cor1, 1, [])
	    in  let <_cor3> =
		    %% Line 1930
		    call 'hipe_icode':'mk_goto'
			(_cor0)
		in  let <_cor5> =
			%% Line 1930
			call 'erlang':'++'
			    (_cor4, [_cor3|[]])
		    in  %% Line 1929
			[_cor6|_cor5]
'get_free_vars'/4 =
    %% Line 1932
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[V|Vs],Closure,No,MoveCode> when 'true' ->
	      let <_cor5> =
		  %% Line 1934
		  call 'erlang':'+'
		      (No, 1)
	      in  let <_cor4> =
		      %% Line 1936
		      call 'hipe_icode':'mk_primop'
			  ([V|[]], {'closure_element',No}, [Closure|[]])
		  in  %% Line 1934
		      apply 'get_free_vars'/4
			  (Vs, Closure, _cor5, %% Line 1935
					       [_cor4|%% Line 1937
						      MoveCode])
	  %% Line 1938
	  <[],_cor10,_cor11,MoveCode> when 'true' ->
	      %% Line 1939
	      MoveCode
	  ( <_cor9,_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7,_cor6})
		  -| [{'function_name',{'get_free_vars',4}}] )
	    -| ['compiler_generated'] )
	end
'split_params'/3 =
    %% Line 1943
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <1,Params = [Closure|_X_OrgArgs],Args> when 'true' ->
	      let <_cor3> =
		  %% Line 1944
		  call 'lists':'reverse'
		      ([Closure|Args])
	      in  %% Line 1944
		  {_cor3,Closure,Params}
	  %% Line 1945
	  <1,[],Args> when 'true' ->
	      let <Closure> =
		  %% Line 1946
		  call 'hipe_icode':'mk_new_var'
		      ()
	      in  let <_cor5> =
		      %% Line 1947
		      call 'lists':'reverse'
			  ([Closure|Args])
		  in  %% Line 1947
		      {_cor5,Closure,[]}
	  %% Line 1948
	  <N,[ArgN|OrgArgs],Args> when 'true' ->
	      let <_cor6> =
		  %% Line 1949
		  call 'erlang':'-'
		      (N, 1)
	      in  %% Line 1949
		  apply 'split_params'/3
		      (_cor6, OrgArgs, [ArgN|Args])
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'split_params',3}}] )
	    -| ['compiler_generated'] )
	end
'preprocess_code'/1 =
    %% Line 1953
    fun (_cor0) ->
	let <PatchedCode> =
	    %% Line 1954
	    apply 'patch_R7_funs'/1
		(_cor0)
	in  let <ClosureInfo> =
		%% Line 1955
		apply 'find_closure_info'/1
		    (PatchedCode)
	    in  %% Line 1956
		{PatchedCode,ClosureInfo}
'patch_R7_funs'/1 =
    %% Line 1971
    fun (_cor0) ->
	%% Line 1972
	apply 'patch_make_funs'/2
	    (_cor0, 0)
'patch_make_funs'/2 =
    %% Line 1974
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[FunCode0|Fs],FunIndex0> when 'true' ->
	      %% Line 1975
	      case apply 'patch_make_funs'/3
		       (FunCode0, FunIndex0, []) of
		<{PatchedFunCode,FunIndex}> when 'true' ->
		    let <_cor3> =
			%% Line 1976
			apply 'patch_make_funs'/2
			    (Fs, FunIndex)
		    in  %% Line 1976
			[PatchedFunCode|_cor3]
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1977
	  <[],_cor6> when 'true' ->
	      []
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'patch_make_funs',2}}] )
	    -| ['compiler_generated'] )
	end
'patch_make_funs'/3 =
    %% Line 1979
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'make_fun',MFA,Magic,FreeVarNum}|Is],FunIndex,Acc> when 'true' ->
	      let <Patched> =
		  %% Line 1980
		  {'patched_make_fun',MFA,Magic,FreeVarNum,FunIndex}
	      in  let <_cor4> =
		      %% Line 1981
		      call 'erlang':'+'
			  (FunIndex, 1)
		  in  %% Line 1981
		      apply 'patch_make_funs'/3
			  (Is, _cor4, [Patched|Acc])
	  %% Line 1982
	  <[{'make_fun2',MFA,_X_BogusIndex,Magic,FreeVarNum}|Is],FunIndex,Acc> when 'true' ->
	      let <Patched> =
		  %% Line 1983
		  {'patched_make_fun',MFA,Magic,FreeVarNum,FunIndex}
	      in  let <_cor6> =
		      %% Line 1984
		      call 'erlang':'+'
			  (FunIndex, 1)
		  in  %% Line 1984
		      apply 'patch_make_funs'/3
			  (Is, _cor6, [Patched|Acc])
	  %% Line 1985
	  <[I|Is],FunIndex,Acc> when 'true' ->
	      %% Line 1986
	      apply 'patch_make_funs'/3
		  (Is, FunIndex, [I|Acc])
	  %% Line 1987
	  <[],FunIndex,Acc> when 'true' ->
	      let <_cor7> =
		  %% Line 1988
		  call 'lists':'reverse'
		      (Acc)
	      in  %% Line 1988
		  {_cor7,FunIndex}
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'patch_make_funs',3}}] )
	    -| ['compiler_generated'] )
	end
'find_mfa'/1 =
    %% Line 1992
    fun (_cor0) ->
	case _cor0 of
	  <[{'label',_cor10}|Code]> when 'true' ->
	      %% Line 1993
	      apply 'find_mfa'/1
		  (Code)
	  %% Line 1994
	  <[{'line',_cor11}|Code]> when 'true' ->
	      %% Line 1995
	      apply 'find_mfa'/1
		  (Code)
	  %% Line 1996
	  <[{'func_info',{'atom',M},{'atom',F},A}|_cor12]>
	      when %% Line 1997
		try
		    let <_cor1> =
			call 'erlang':'is_atom'
			    (M)
		    in  let <_cor2> =
			    call 'erlang':'is_atom'
				(F)
			in  let <_cor3> =
				call 'erlang':'is_integer'
				    (A)
			    in  let <_cor4> =
				    call 'erlang':'=<'
					(0, A)
				in  let <_cor5> =
					call 'erlang':'=<'
					    (A, 255)
				    in  let <_cor6> =
					    call 'erlang':'and'
						(_cor4, _cor5)
					in  let <_cor7> =
						call 'erlang':'and'
						    (_cor3, _cor6)
					    in  let <_cor8> =
						    call 'erlang':'and'
							(_cor2, _cor7)
						in  call 'erlang':'and'
							(_cor1, _cor8)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      %% Line 1998
	      {M,F,A}
	  ( <_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9})
		  -| [{'function_name',{'find_mfa',1}}] )
	    -| ['compiler_generated'] )
	end
'get_constants_in_temps'/2 =
    %% Line 2007
    fun (_cor1,_cor0) ->
	%% Line 2008
	apply 'get_constants_in_temps'/4
	    (_cor1, [], [], _cor0)
'get_constants_in_temps'/4 =
    %% Line 2010
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Arg|Args],Instrs,Temps,Env> when 'true' ->
	      %% Line 2011
	      case apply 'get_constant_in_temp'/2
		       (Arg, Env) of
		%% Line 2012
		<{'none',ArgVar,Env1}> when 'true' ->
		    %% Line 2013
		    apply 'get_constants_in_temps'/4
			(Args, Instrs, [ArgVar|Temps], Env1)
		%% Line 2014
		<{Instr,Temp,Env1}> when 'true' ->
		    %% Line 2015
		    apply 'get_constants_in_temps'/4
			(Args, [Instr|Instrs], [Temp|Temps], Env1)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2017
	  <[],Instrs,Temps,Env> when 'true' ->
	      let <_cor6> =
		  %% Line 2018
		  call 'lists':'reverse'
		      (Instrs)
	      in  let <_cor5> =
		      %% Line 2018
		      call 'lists':'reverse'
			  (Temps)
		  in  %% Line 2018
		      {_cor6,_cor5,Env}
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'get_constants_in_temps',4}}] )
	    -| ['compiler_generated'] )
	end
'get_constant_in_temp'/2 =
    %% Line 2021
    fun (_cor1,_cor0) ->
	%% Line 2022
	case apply 'is_var'/1
		 (_cor1) of
	  %% Line 2023
	  <'true'> when 'true' ->
	      let <_cor2> =
		  %% Line 2024
		  apply 'mk_var'/1
		      (_cor1)
	      in  %% Line 2024
		  {'none',_cor2,_cor0}
	  %% Line 2025
	  <'false'> when 'true' ->
	      let <Temp> =
		  %% Line 2026
		  apply 'mk_var'/1
		      ('new')
	      in  let <Const> =
		      %% Line 2027
		      apply 'trans_const'/1
			  (_cor1)
		  in  let <_cor5> =
			  %% Line 2028
			  call 'hipe_icode':'mk_move'
			      (Temp, Const)
		      in  %% Line 2028
			  {_cor5,Temp,_cor0}
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'extract_fun_args'/1 =
    %% Line 2035
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2036
	    apply 'extract_fun_args1'/1
		(_cor0)
	in  %% Line 2036
	    call 'lists':'reverse'
		(_cor1)
'extract_fun_args1'/1 =
    %% Line 2038
    fun (_cor0) ->
	case _cor0 of
	  <0> when 'true' ->
	      %% Line 2039
	      []
	  %% Line 2040
	  <1> when 'true' ->
	      let <_cor1> =
		  %% Line 2041
		  apply 'mk_var'/1
		      ({'r',0})
	      in  %% Line 2041
		  [_cor1|[]]
	  %% Line 2042
	  <N> when 'true' ->
	      let <_cor2> =
		  %% Line 2043
		  call 'erlang':'-'
		      (N, 1)
	      in  let <_cor3> =
		      %% Line 2043
		      apply 'mk_var'/1
			  ({'x',_cor2})
		  in  let <_cor4> =
			  %% Line 2043
			  call 'erlang':'-'
			      (N, 1)
		      in  let <_cor5> =
			      %% Line 2043
			      apply 'extract_fun_args1'/1
				  (_cor4)
			  in  %% Line 2043
			      [_cor3|_cor5]
	end
'trans_select_stuff'/2 =
    %% Line 2049
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 2050
	    case apply 'is_var'/1
		     (_cor1) of
	      %% Line 2051
	      <'true'> when 'true' ->
		  %% Line 2052
		  apply 'mk_var'/1
		      (_cor1)
	      %% Line 2053
	      <'false'> when 'true' ->
		  %% Line 2054
		  apply 'trans_const'/1
		      (_cor1)
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
	in  let <CasePairs> =
		%% Line 2056
		apply 'trans_case_list'/1
		    (_cor0)
	    in  %% Line 2057
		{_cor3,CasePairs}
'trans_case_list'/1 =
    %% Line 2059
    fun (_cor0) ->
	case _cor0 of
	  <[Symbol|[{'f',Lbl}|L]]> when 'true' ->
	      let <_cor2> =
		  %% Line 2060
		  apply 'trans_const'/1
		      (Symbol)
	      in  let <_cor1> =
		      %% Line 2060
		      apply 'map_label'/1
			  (Lbl)
		  in  let <_cor3> =
			  %% Line 2060
			  apply 'trans_case_list'/1
			      (L)
		      in  %% Line 2060
			  [{_cor2,_cor1}|_cor3]
	  %% Line 2061
	  <[]> when 'true' ->
	      %% Line 2062
	      []
	  ( <_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4})
		  -| [{'function_name',{'trans_case_list',1}}] )
	    -| ['compiler_generated'] )
	end
'trans_arg'/1 =
    %% Line 2068
    fun (_cor0) ->
	%% Line 2069
	case apply 'is_var'/1
		 (_cor0) of
	  %% Line 2070
	  <'true'> when 'true' ->
	      %% Line 2071
	      apply 'mk_var'/1
		  (_cor0)
	  %% Line 2072
	  <'false'> when 'true' ->
	      %% Line 2073
	      apply 'trans_const'/1
		  (_cor0)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'trans_const'/1 =
    %% Line 2080
    fun (_cor0) ->
	%% Line 2081
	case _cor0 of
	  %% Line 2082
	  <{'atom',Atom}>
	      when call 'erlang':'is_atom'
		    (Atom) ->
	      %% Line 2083
	      call 'hipe_icode':'mk_const'
		  (Atom)
	  %% Line 2084
	  <{'integer',N}>
	      when call 'erlang':'is_integer'
		    (N) ->
	      %% Line 2085
	      call 'hipe_icode':'mk_const'
		  (N)
	  %% Line 2086
	  <{'float',Float}>
	      when call 'erlang':'is_float'
		    (Float) ->
	      %% Line 2087
	      call 'hipe_icode':'mk_const'
		  (Float)
	  %% Line 2088
	  <{'string',String}> when 'true' ->
	      %% Line 2089
	      call 'hipe_icode':'mk_const'
		  (String)
	  %% Line 2090
	  <{'literal',Literal}> when 'true' ->
	      %% Line 2091
	      call 'hipe_icode':'mk_const'
		  (Literal)
	  %% Line 2092
	  <'nil'> when 'true' ->
	      %% Line 2093
	      call 'hipe_icode':'mk_const'
		  ([])
	  %% Line 2094
	  <Int>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      %% Line 2095
	      call 'hipe_icode':'mk_const'
		  (Int)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor1})
	    -| ['compiler_generated'] )
	end
'mk_var'/1 =
    %% Line 2108
    fun (_cor0) ->
	case _cor0 of
	  <{'r',0}> when 'true' ->
	      %% Line 2109
	      call 'hipe_icode':'mk_var'
		  (0)
	  %% Line 2110
	  <{'x',R}>
	      when call 'erlang':'is_integer'
		    (R) ->
	      let <V> =
		  %% Line 2111
		  call 'erlang':'*'
		      (5, R)
	      in  do  %% Line 2112
		      call 'hipe_gensym':'update_vrange'
			  ('icode', V)
		      %% Line 2113
		      call 'hipe_icode':'mk_var'
			  (V)
	  %% Line 2114
	  <{'y',R}>
	      when call 'erlang':'is_integer'
		    (R) ->
	      let <_cor2> =
		  %% Line 2115
		  call 'erlang':'*'
		      (5, R)
	      in  let <V> =
		      %% Line 2115
		      call 'erlang':'+'
			  (_cor2, 1)
		  in  do  %% Line 2116
			  call 'hipe_gensym':'update_vrange'
			      ('icode', V)
			  %% Line 2117
			  call 'hipe_icode':'mk_var'
			      (V)
	  %% Line 2118
	  <{'fr',R}>
	      when call 'erlang':'is_integer'
		    (R) ->
	      let <_cor4> =
		  %% Line 2119
		  call 'erlang':'*'
		      (5, R)
	      in  let <V> =
		      %% Line 2119
		      call 'erlang':'+'
			  (_cor4, 2)
		  in  do  %% Line 2120
			  call 'hipe_gensym':'update_vrange'
			      ('icode', V)
			  %% Line 2121
			  case call 'erlang':'get'
				   ('hipe_inline_fp') of
			    %% Line 2122
			    <'true'> when 'true' ->
				%% Line 2123
				call 'hipe_icode':'mk_fvar'
				    (V)
			    %% Line 2124
			    <_cor14> when 'true' ->
				%% Line 2125
				call 'hipe_icode':'mk_var'
				    (V)
			  end
	  %% Line 2127
	  <'new'> when 'true' ->
	      let <T> =
		  %% Line 2128
		  call 'hipe_gensym':'new_var'
		      ('icode')
	      in  let <_cor8> =
		      %% Line 2129
		      call 'erlang':'*'
			  (5, T)
		  in  let <V> =
			  %% Line 2129
			  call 'erlang':'+'
			      (_cor8, 3)
		      in  do  %% Line 2130
			      call 'hipe_gensym':'update_vrange'
				  ('icode', V)
			      %% Line 2131
			      call 'hipe_icode':'mk_var'
				  (V)
	  %% Line 2132
	  <'reg'> when 'true' ->
	      let <T> =
		  %% Line 2133
		  call 'hipe_gensym':'new_var'
		      ('icode')
	      in  let <_cor11> =
		      %% Line 2134
		      call 'erlang':'*'
			  (5, T)
		  in  let <V> =
			  %% Line 2134
			  call 'erlang':'+'
			      (_cor11, 4)
		      in  do  %% Line 2135
			      call 'hipe_gensym':'update_vrange'
				  ('icode', V)
			      %% Line 2136
			      call 'hipe_icode':'mk_reg'
				  (V)
	  ( <_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13})
		  -| [{'function_name',{'mk_var',1}}] )
	    -| ['compiler_generated'] )
	end
'mk_label'/1 =
    %% Line 2144
    fun (_cor0) ->
	case _cor0 of
	  <L>
	      when call 'erlang':'is_integer'
		    (_cor0) ->
	      let <LL> =
		  %% Line 2145
		  call 'erlang':'*'
		      (2, L)
	      in  do  %% Line 2146
		      call 'hipe_gensym':'update_lblrange'
			  ('icode', LL)
		      %% Line 2147
		      call 'hipe_icode':'mk_label'
			  (LL)
	  %% Line 2148
	  <'new'> when 'true' ->
	      let <L> =
		  %% Line 2149
		  call 'hipe_gensym':'new_label'
		      ('icode')
	      in  let <_cor3> =
		      %% Line 2150
		      call 'erlang':'*'
			  (2, L)
		  in  let <LL> =
			  %% Line 2150
			  call 'erlang':'+'
			      (_cor3, 1)
		      in  do  %% Line 2151
			      call 'hipe_gensym':'update_lblrange'
				  ('icode', LL)
			      %% Line 2152
			      call 'hipe_icode':'mk_label'
				  (LL)
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'mk_label',1}}] )
	    -| ['compiler_generated'] )
	end
'map_label'/1 =
    %% Line 2157
    fun (_cor0) ->
	%% Line 2158
	call 'erlang':'bsl'
	    (_cor0, 1)
'type'/1 =
    %% Line 2164
    fun (_cor0) ->
	case _cor0 of
	  <{'x',_cor2}> when 'true' ->
	      %% Line 2165
	      'var'
	  %% Line 2166
	  <{'y',_cor3}> when 'true' ->
	      %% Line 2167
	      'var'
	  %% Line 2168
	  <{'fr',_cor4}> when 'true' ->
	      %% Line 2169
	      'var'
	  %% Line 2170
	  <{'atom',A}>
	      when call 'erlang':'is_atom'
		    (A) ->
	      %% Line 2171
	      {'beam_const',A}
	  %% Line 2172
	  <'nil'> when 'true' ->
	      %% Line 2173
	      {'beam_const',[]}
	  %% Line 2174
	  <{'integer',X}>
	      when call 'erlang':'is_integer'
		    (X) ->
	      %% Line 2175
	      {'beam_const',X}
	  %% Line 2176
	  <{'float',X}>
	      when call 'erlang':'is_float'
		    (X) ->
	      %% Line 2177
	      {'beam_const',X}
	  %% Line 2178
	  <{'literal',X}> when 'true' ->
	      %% Line 2179
	      {'beam_const',X}
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'type',1}}] )
	    -| ['compiler_generated'] )
	end
'is_var'/1 =
    %% Line 2185
    fun (_cor0) ->
	case _cor0 of
	  <{'x',_cor2}> when 'true' ->
	      %% Line 2186
	      'true'
	  %% Line 2187
	  <{'y',_cor3}> when 'true' ->
	      %% Line 2188
	      'true'
	  %% Line 2189
	  <{'fr',_cor4}> when 'true' ->
	      %% Line 2190
	      'true'
	  %% Line 2191
	  <{'atom',A}>
	      when call 'erlang':'is_atom'
		    (A) ->
	      %% Line 2192
	      'false'
	  %% Line 2193
	  <'nil'> when 'true' ->
	      %% Line 2194
	      'false'
	  %% Line 2195
	  <{'integer',N}>
	      when call 'erlang':'is_integer'
		    (N) ->
	      %% Line 2196
	      'false'
	  %% Line 2197
	  <{'float',F}>
	      when call 'erlang':'is_float'
		    (F) ->
	      %% Line 2198
	      'false'
	  %% Line 2199
	  <{'literal',_X_Literal}> when 'true' ->
	      %% Line 2200
	      'false'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'is_var',1}}] )
	    -| ['compiler_generated'] )
	end
'fix_catches'/1 =
    %% Line 2206
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 2207
	    call 'gb_trees':'empty'
		()
	in  %% Line 2207
	    apply 'fix_catches'/2
		(_cor0, _cor1)
'fix_catches'/2 =
    %% Line 2215
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'catch',N,Lbl}|[ContLbl|Code]],HandledCatchLbls> when 'true' ->
	      %% Line 2216
	      apply 'fix_catch'/6
		  ('catch', Lbl, ContLbl, Code, HandledCatchLbls, {'catch_end',N})
	  %% Line 2217
	  <[{'try',N,Lbl}|[ContLbl|Code]],HandledCatchLbls> when 'true' ->
	      %% Line 2218
	      apply 'fix_catch'/6
		  ('try', Lbl, ContLbl, Code, HandledCatchLbls, {'try_case',N})
	  %% Line 2219
	  <[Instr|Code],HandledCatchLbls> when 'true' ->
	      let <_cor2> =
		  %% Line 2220
		  apply 'fix_catches'/2
		      (Code, HandledCatchLbls)
	      in  %% Line 2220
		  [Instr|_cor2]
	  %% Line 2221
	  <[],_X_HandledCatchLbls> when 'true' ->
	      %% Line 2222
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'fix_catches',2}}] )
	    -| ['compiler_generated'] )
	end
'fix_catch'/6 =
    %% Line 2224
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <TLbl> = {_cor5,_cor4}
	in  %% Line 2226
	    case call 'gb_trees':'lookup'
		     (TLbl, _cor1) of
	      %% Line 2227
	      <{'value',Catch}>
		  when call 'erlang':'is_integer'
			(Catch) ->
		  let <NewCode> =
		      %% Line 2228
		      apply 'fix_catches'/2
			  (_cor2, _cor1)
		  in  let <Cont> =
			  %% Line 2229
			  call 'hipe_icode':'label_name'
			      (_cor3)
		      in  let <_cor9> =
			      %% Line 2230
			      call 'hipe_icode':'mk_begin_try'
				  (Catch, Cont)
			  in  %% Line 2230
			      [_cor9|[_cor3|NewCode]]
	      %% Line 2231
	      <'none'> when 'true' ->
		  let <OldCatch> =
		      %% Line 2232
		      apply 'map_label'/1
			  (_cor4)
		  in  let <OldCatchLbl> =
			  %% Line 2233
			  call 'hipe_icode':'mk_label'
			      (OldCatch)
		      in  %% Line 2234
			  case apply 'split_code'/3
				   (_cor2, OldCatchLbl, _cor0) of
			    <{CodeToCatch,RestOfCode}> when 'true' ->
				let <NewCatchLbl> =
				    %% Line 2235
				    apply 'mk_label'/1
					('new')
				in  let <NewCatch> =
					%% Line 2236
					call 'hipe_icode':'label_name'
					    (NewCatchLbl)
				    in  let <RestOfCode1> =
					    %% Line 2238
					    apply 'fix_catches'/2
						(RestOfCode, _cor1)
					in  let <NewHandledCatchLbls> =
						%% Line 2240
						call 'gb_trees':'insert'
						    (TLbl, NewCatch, _cor1)
					    in  let <CatchedCode> =
						    %% Line 2241
						    apply 'fix_catches'/2
							(CodeToCatch, NewHandledCatchLbls)
						in  let <_cor18> =
							%% Line 2243
							apply 'mk_var'/1
							    ({'r',0})
						    in  let <_cor19> =
							    %% Line 2243
							    apply 'mk_var'/1
								({'x',1})
							in  let <_cor20> =
								%% Line 2243
								apply 'mk_var'/1
								    ({'x',2})
							    in  let <Vars> =
								    %% Line 2243
								    [_cor18|[_cor19|[_cor20|[]]]]
								in  let <Cont> =
									%% Line 2244
									call 'hipe_icode':'label_name'
									    (_cor3)
								    in  let <_cor30> =
									    %% Line 2245
									    call 'hipe_icode':'mk_begin_try'
										(NewCatch, Cont)
									in  let <_cor25> =
										%% Line 2247
										apply 'mk_label'/1
										    ('new')
									    in  let <_cor26> =
										    %% Line 2248
										    call 'hipe_icode':'mk_goto'
											(OldCatch)
										in  let <_cor27> =
											%% Line 2250
											call 'hipe_icode':'mk_begin_handler'
											    (Vars)
										    in  let <_cor23> =
											    %% Line 2251
											    apply 'catch_handler'/3
												(_cor5, Vars, OldCatchLbl)
											in  let <_cor24> =
												%% Line 2252
												call 'erlang':'++'
												    (_cor23, RestOfCode1)
											    in  let <_cor28> =
												    %% Line 2247
												    [_cor25|%% Line 2248
													    [_cor26|%% Line 2249
														    [NewCatchLbl|%% Line 2250
																 [_cor27|_cor24]]]]
												in  let <_cor29> =
													%% Line 2247
													call 'erlang':'++'
													    (CatchedCode, _cor28)
												    in  %% Line 2245
													[_cor30|[_cor3|_cor29]]
			    ( <_cor12> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor12})
			      -| ['compiler_generated'] )
			  end
	      ( <_cor31> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor31})
		-| ['compiler_generated'] )
	    end
'catch_handler'/3 =
    %% Line 2255
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <'try',_X_Vars,OldCatchLbl> when 'true' ->
	      %% Line 2258
	      [OldCatchLbl|[]]
	  %% Line 2259
	  <'catch',[TagVar|[ValueVar|[TraceVar|[]]]],OldCatchLbl> when 'true' ->
	      let <ContLbl> =
		  %% Line 2263
		  apply 'mk_label'/1
		      ('new')
	      in  let <Cont> =
		      %% Line 2264
		      call 'hipe_icode':'label_name'
			  (ContLbl)
		  in  let <ThrowLbl> =
			  %% Line 2265
			  apply 'mk_label'/1
			      ('new')
		      in  let <NoThrowLbl> =
			      %% Line 2266
			      apply 'mk_label'/1
				  ('new')
			  in  let <ExitLbl> =
				  %% Line 2267
				  apply 'mk_label'/1
				      ('new')
			      in  let <ErrorLbl> =
				      %% Line 2268
				      apply 'mk_label'/1
					  ('new')
				  in  let <Dst> =
					  %% Line 2269
					  apply 'mk_var'/1
					      ({'r',0})
				      in  let <_cor12> =
					      %% Line 2270
					      call 'hipe_icode':'mk_const'
						  ('throw')
					  in  let <_cor11> =
						  %% Line 2271
						  call 'hipe_icode':'label_name'
						      (ThrowLbl)
					      in  let <_cor10> =
						      %% Line 2272
						      call 'hipe_icode':'label_name'
							  (NoThrowLbl)
						  in  let <_cor13> =
							  %% Line 2270
							  call 'hipe_icode':'mk_if'
							      ('=:=', [TagVar|[_cor12|[]]], _cor11, _cor10)
						      in  let <_cor14> =
							      %% Line 2274
							      call 'hipe_icode':'mk_move'
								  (Dst, ValueVar)
							  in  let <_cor15> =
								  %% Line 2275
								  call 'hipe_icode':'mk_goto'
								      (Cont)
							      in  let <_cor18> =
								      %% Line 2277
								      call 'hipe_icode':'mk_const'
									  ('exit')
								  in  let <_cor17> =
									  %% Line 2278
									  call 'hipe_icode':'label_name'
									      (ExitLbl)
								      in  let <_cor16> =
									      %% Line 2279
									      call 'hipe_icode':'label_name'
										  (ErrorLbl)
									  in  let <_cor19> =
										  %% Line 2277
										  call 'hipe_icode':'mk_if'
										      ('=:=', [TagVar|[_cor18|[]]], _cor17, _cor16)
									      in  let <_cor20> =
										      %% Line 2281
										      call 'hipe_icode':'mk_const'
											  ('EXIT')
										  in  let <_cor21> =
											  %% Line 2281
											  call 'hipe_icode':'mk_primop'
											      ([Dst|[]], 'mktuple', [_cor20|%% Line 2282
															    [ValueVar|[]]])
										      in  let <_cor22> =
											      %% Line 2283
											      call 'hipe_icode':'mk_goto'
												  (Cont)
											  in  let <_cor23> =
												  %% Line 2287
												  call 'hipe_icode':'mk_call'
												      ([TraceVar|[]], 'erlang', 'get_stacktrace', [], 'remote')
											      in  let <_cor24> =
												      %% Line 2288
												      call 'hipe_icode':'mk_primop'
													  ([ValueVar|[]], 'mktuple', [ValueVar|[TraceVar|[]]])
												  in  let <_cor25> =
													  %% Line 2289
													  call 'hipe_icode':'label_name'
													      (ExitLbl)
												      in  let <_cor26> =
													      %% Line 2289
													      call 'hipe_icode':'mk_goto'
														  (_cor25)
													  in  let <_cor27> =
														  %% Line 2291
														  call 'hipe_icode':'mk_end_try'
														      ()
													      in  let <_cor28> =
														      %% Line 2292
														      call 'hipe_icode':'mk_goto'
															  (Cont)
														  in  %% Line 2270
														      [_cor13|%% Line 2273
															      [ThrowLbl|%% Line 2274
																	[_cor14|%% Line 2275
																		[_cor15|%% Line 2276
																			[NoThrowLbl|%% Line 2277
																				    [_cor19|%% Line 2280
																					    [ExitLbl|%% Line 2281
																						     [_cor21|%% Line 2283
																							     [_cor22|%% Line 2284
																								     [ErrorLbl|%% Line 2287
																									       [_cor23|%% Line 2288
																										       [_cor24|%% Line 2289
																											       [_cor26|%% Line 2290
																												       [OldCatchLbl|%% Line 2291
																														    [_cor27|%% Line 2292
																															    [_cor28|%% Line 2293
																																    [ContLbl|[]]]]]]]]]]]]]]]]]]
	  ( <_cor31,_cor30,_cor29> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor31,_cor30,_cor29})
		  -| [{'function_name',{'catch_handler',3}}] )
	    -| ['compiler_generated'] )
	end
'split_code'/3 =
    %% Line 2301
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[First|Code],Label,Instr> when 'true' ->
	      %% Line 2302
	      apply 'split_code'/5
		  (Code, Label, Instr, First, [])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'split_code',3}}] )
	    -| ['compiler_generated'] )
	end
'split_code'/5 =
    %% Line 2304
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Instr|Code],Label,_cor13,Prev,As>
	      when let <_cor14> =
		    call 'erlang':'=:='
			(_cor13, Instr)
		in  let <_cor15> =
			call 'erlang':'=:='
			    (Prev, Label)
		    in  call 'erlang':'and'
			    (_cor14, _cor15) ->
	      %% Line 2305
	      apply 'split_code_final'/2
		  (Code, As)
	  %% Line 2306
	  <[Other|_X_Code],Label,Instr,Prev,_X_As>
	      when call 'erlang':'=:='
		    (Prev,
		     Label) ->
	      do  %% Line 2307
		  call 'io':'format'
		      ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[88|[73|[84|[69|[68|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[64|[126|[119|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [{'missing_instr_after_label',Label,Instr,[Other|[Prev|_X_As]]}|['hipe_beam_to_icode'|[2307]]])
		  %% Line 2307
		  call 'erlang':'error'
		      ({'hipe_beam_to_icode',2307,{'missing_instr_after_label',Label,Instr,[Other|[Prev|_X_As]]}})
	  %% Line 2308
	  <[Other|Code],Label,Instr,Prev,As> when 'true' ->
	      %% Line 2309
	      apply 'split_code'/5
		  (Code, Label, Instr, Other, [Prev|As])
	  %% Line 2310
	  <[],_X_Label,_X_Instr,Prev,As> when 'true' ->
	      %% Line 2311
	      apply 'split_code_final'/2
		  ([], [Prev|As])
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'split_code',5}}] )
	    -| ['compiler_generated'] )
	end
'split_code_final'/2 =
    %% Line 2313
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 2314
	    call 'lists':'reverse'
		(_cor0)
	in  %% Line 2314
	    {_cor2,_cor1}
'fix_fallthroughs'/1 =
    %% Line 2320
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 2321
	      []
	  %% Line 2322
	  <[I|Is]> when 'true' ->
	      %% Line 2323
	      apply 'fix_fallthroughs'/3
		  (Is, I, [])
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'fix_fallthroughs',1}}] )
	    -| ['compiler_generated'] )
	end
'fix_fallthroughs'/3 =
    %% Line 2325
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[I1|Is],I0,Acc> when 'true' ->
	      %% Line 2326
	      case call 'hipe_icode':'is_label'
		       (I1) of
		%% Line 2327
		<'false'> when 'true' ->
		    %% Line 2328
		    apply 'fix_fallthroughs'/3
			(Is, I1, [I0|Acc])
		%% Line 2329
		<'true'> when 'true' ->
		    %% Line 2330
		    case call 'hipe_icode':'is_branch'
			     (I0) of
		      %% Line 2331
		      <'true'> when 'true' ->
			  %% Line 2332
			  apply 'fix_fallthroughs'/3
			      (Is, I1, [I0|Acc])
		      %% Line 2333
		      <'false'> when 'true' ->
			  let <_cor3> =
			      %% Line 2335
			      call 'hipe_icode':'label_name'
				  (I1)
			  in  let <Goto> =
				  %% Line 2335
				  call 'hipe_icode':'mk_goto'
				      (_cor3)
			      in  %% Line 2336
				  apply 'fix_fallthroughs'/3
				      (Is, I1, [Goto|[I0|Acc]])
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor5})
			-| ['compiler_generated'] )
		    end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2339
	  <[],I,Acc> when 'true' ->
	      %% Line 2340
	      call 'lists':'reverse'
		  ([I|Acc])
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'fix_fallthroughs',3}}] )
	    -| ['compiler_generated'] )
	end
'remove_dead_code'/1 =
    %% Line 2348
    fun (_cor0) ->
	case _cor0 of
	  <[I|Is]> when 'true' ->
	      %% Line 2349
	      case I of
		%% Line 2350
		<{'icode_fail',_cor6,_cor7,_cor8}> when 'true' ->
		    let <_cor1> =
			%% Line 2351
			apply 'skip_to_label'/1
			    (Is)
		    in  let <_cor2> =
			    %% Line 2351
			    apply 'remove_dead_code'/1
				(_cor1)
			in  %% Line 2351
			    [I|_cor2]
		%% Line 2352
		<_cor9> when 'true' ->
		    let <_cor3> =
			%% Line 2353
			apply 'remove_dead_code'/1
			    (Is)
		    in  %% Line 2353
			[I|_cor3]
	      end
	  %% Line 2355
	  <[]> when 'true' ->
	      %% Line 2356
	      []
	  ( <_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5})
		  -| [{'function_name',{'remove_dead_code',1}}] )
	    -| ['compiler_generated'] )
	end
'skip_to_label'/1 =
    %% Line 2360
    fun (_cor0) ->
	case _cor0 of
	  <Instrs = [I|Is]> when 'true' ->
	      %% Line 2361
	      case I of
		%% Line 2362
		<{'icode_label',_cor3}> when 'true' ->
		    Instrs
		%% Line 2363
		<_cor4> when 'true' ->
		    apply 'skip_to_label'/1
			(Is)
	      end
	  %% Line 2365
	  <[]> when 'true' ->
	      %% Line 2366
	      []
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'skip_to_label',1}}] )
	    -| ['compiler_generated'] )
	end
'resolve_native_endianess'/1 =
    %% Line 2372
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 2373
	    call 'erlang':'band'
		(_cor0, 16)
	in  let <_cor1> =
		%% Line 2373
		call 'hipe_rtl_arch':'endianess'
		    ()
	    in  %% Line 2373
		case <_cor2,_cor1> of
		  %% Line 2374
		  <16,'big'> when 'true' ->
		      %% Line 2375
		      call 'erlang':'band'
			  (_cor0, 5)
		  %% Line 2376
		  <16,'little'> when 'true' ->
		      let <_cor3> =
			  %% Line 2377
			  call 'erlang':'bor'
			      (_cor0, 2)
		      in  %% Line 2377
			  call 'erlang':'band'
			      (_cor3, 7)
		  %% Line 2378
		  <_fol156,_fol157> when 'true' ->
		      %% Line 2379
		      call 'erlang':'band'
			  (_cor0, 7)
		end
'pp_beam'/2 =
    %% Line 2386
    fun (_cor1,_cor0) ->
	%% Line 2387
	case call 'proplists':'get_value'
		 ('pp_beam', _cor0) of
	  %% Line 2388
	  <'true'> when 'true' ->
	      %% Line 2389
	      apply 'pp'/1
		  (_cor1)
	  %% Line 2390
	  <{'file',FileName}> when 'true' ->
	      %% Line 2391
	      case call 'file':'open'
		       (FileName, ['write']) of
		<{'ok',File}> when 'true' ->
		    %% Line 2392
		    apply 'pp'/2
			(File, _cor1)
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 2393
	  <_cor6> when 'true' ->
	      %% Line 2394
	      'ok'
	end
'pp'/1 =
    %% Line 2397
    fun (_cor0) ->
	%% Line 2398
	apply 'pp'/2
	    ('standard_io', _cor0)
'pp'/2 =
    %% Line 2400
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Stream,[]> when 'true' ->
	      %% Line 2401
	      case Stream of
		%% Line 2402
		<'standard_io'> when 'true' ->
		    'ok'
		%% Line 2403
		<_cor6> when 'true' ->
		    let <_cor7> =
			call 'file':'close'
			    (Stream)
		    in  case _cor7 of
			  <'ok'> when 'true' ->
			      ( _cor7
				-| ['compiler_generated'] )
			  ( <_cor2> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor2})
			    -| ['compiler_generated'] )
			end
	      end
	  %% Line 2405
	  <Stream,[FunCode|FunCodes]> when 'true' ->
	      do  %% Line 2406
		  apply 'pp_mfa'/2
		      (Stream, FunCode)
		  do  %% Line 2407
		      apply 'put_nl'/1
			  (Stream)
		      %% Line 2408
		      apply 'pp'/2
			  (Stream, FunCodes)
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'pp',2}}] )
	    -| ['compiler_generated'] )
	end
'pp_mfa'/2 =
    %% Line 2410
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 2411
	    ( fun (_cor2) ->
		  apply 'print_instr'/2
		      (_cor1, _cor2)
	      -| [{'id',{0,0,'-pp_mfa/2-fun-0-'}}] )
	in  %% Line 2411
	    call 'lists':'foreach'
		(_cor4, _cor0)
'print_instr'/2 =
    %% Line 2413
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Stream,{'label',Lbl}> when 'true' ->
	      %% Line 2414
	      call 'io':'format'
		  (Stream, [32|[32|[108|[97|[98|[101|[108|[32|[126|[112|[58|[10]]]]]]]]]]]], [Lbl|[]])
	  %% Line 2415
	  <Stream,Op> when 'true' ->
	      %% Line 2416
	      call 'io':'format'
		  (Stream, [32|[32|[32|[32|[126|[112|[10]]]]]]], [Op|[]])
	end
'put_nl'/1 =
    %% Line 2418
    fun (_cor0) ->
	%% Line 2419
	call 'io':'format'
	    (_cor0, [10], [])
'env__mk_env'/4 =
    %% Line 2426
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 2427
	{'environment',{_cor3,_cor2,_cor1},_cor0}
'env__get_mfa'/1 =
    %% Line 2430
    fun (_cor0) ->
	case _cor0 of
	  <{'environment',MFA,_cor2}> when 'true' ->
	      MFA
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'env__get_mfa',1}}] )
	    -| ['compiler_generated'] )
	end
'env__get_entry'/1 =
    %% Line 2433
    fun (_cor0) ->
	case _cor0 of
	  <{'environment',_cor2,EP}> when 'true' ->
	      EP
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'env__get_entry',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_beam_to_icode')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_beam_to_icode', _cor0)
end