module 'hipe_sparc_ra_postconditions_fp' ['check_and_rewrite'/2,
					  'module_info'/0,
					  'module_info'/1]
    attributes [%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','sparc_mfa'},[{'typed_record_field',{'record_field',38,{'atom',38,'m'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'atom',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'f'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'atom',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'a'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'arity',[]}]]}}]]],[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','sparc_prim'},[{'record_field',39,{'atom',39,'prim'}}],[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{{'record','sparc_sdesc'},[{'record_field',40,{'atom',40,'exnlab'}}|[{'record_field',40,{'atom',40,'fsize'}}|[{'typed_record_field',{'record_field',40,{'atom',40,'arity'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'arity',[]}]]}}|[{'record_field',40,{'atom',40,'live'}}]]]],[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','sparc_temp'},[{'record_field',41,{'atom',41,'reg'}}|[{'record_field',41,{'atom',41,'type'}}|[{'record_field',41,{'atom',41,'allocatable'}}]]],[]}],
		%% Line 42
		'type' =
		    %% Line 42
		    [{{'record','sparc_simm13'},[{'record_field',42,{'atom',42,'value'}}],[]}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{{'record','sparc_uimm5'},[{'record_field',43,{'atom',43,'value'}}],[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','sparc_uimm6'},[{'record_field',44,{'atom',44,'value'}}],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{{'record','sparc_uimm22'},[{'record_field',45,{'atom',45,'value'}}],[]}],
		%% Line 79
		'type' =
		    %% Line 79
		    [{{'record','alu'},[{'record_field',79,{'atom',79,'aluop'}}|[{'record_field',79,{'atom',79,'src1'}}|[{'record_field',79,{'atom',79,'src2'}}|[{'record_field',79,{'atom',79,'dst'}}]]]],[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{{'record','bp'},[{'record_field',80,{'atom',80,'cond'}}|[{'record_field',80,{'atom',80,'label'}}|[{'record_field',80,{'atom',80,'pred'}}]]],[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{{'record','call_rec'},[{'record_field',84,{'atom',84,'fun'}}|[{'record_field',84,{'atom',84,'sdesc'}}|[{'record_field',84,{'atom',84,'linkage'}}]]],[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','call_tail'},[{'record_field',85,{'atom',85,'fun'}}|[{'record_field',85,{'atom',85,'linkage'}}]],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{{'record','comment'},[{'record_field',86,{'atom',86,'term'}}],[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{{'record','jmp'},[{'record_field',87,{'atom',87,'src1'}}|[{'record_field',87,{'atom',87,'src2'}}|[{'record_field',87,{'atom',87,'labels'}}]]],[]}],
		%% Line 88
		'type' =
		    %% Line 88
		    [{{'record','jmpl'},[{'record_field',88,{'atom',88,'src'}}|[{'record_field',88,{'atom',88,'sdesc'}}]],[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','label'},[{'record_field',89,{'atom',89,'label'}}],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{{'record','pseudo_bp'},[{'record_field',90,{'atom',90,'cond'}}|[{'record_field',90,{'atom',90,'true_label'}}|[{'record_field',90,{'atom',90,'false_label'}}|[{'record_field',90,{'atom',90,'pred'}}]]]],[]}],
		%% Line 92
		'type' =
		    %% Line 92
		    [{{'record','pseudo_call'},[{'record_field',92,{'atom',92,'funv'}}|[{'record_field',92,{'atom',92,'sdesc'}}|[{'record_field',92,{'atom',92,'contlab'}}|[{'record_field',92,{'atom',92,'linkage'}}]]]],[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','pseudo_call_prepare'},[{'record_field',93,{'atom',93,'nrstkargs'}}],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{{'record','pseudo_move'},[{'record_field',94,{'atom',94,'src'}}|[{'record_field',94,{'atom',94,'dst'}}]],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','pseudo_ret'},[],[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{{'record','pseudo_set'},[{'record_field',96,{'atom',96,'imm'}}|[{'record_field',96,{'atom',96,'dst'}}]],[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','pseudo_tailcall'},[{'record_field',97,{'atom',97,'funv'}}|[{'record_field',97,{'atom',97,'arity'}}|[{'record_field',97,{'atom',97,'stkargs'}}|[{'record_field',97,{'atom',97,'linkage'}}]]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','pseudo_tailcall_prepare'},[],[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{{'record','rdy'},[{'record_field',99,{'atom',99,'dst'}}],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{{'record','sethi'},[{'record_field',100,{'atom',100,'uimm22'}}|[{'record_field',100,{'atom',100,'dst'}}]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','store'},[{'record_field',101,{'atom',101,'stop'}}|[{'record_field',101,{'atom',101,'src'}}|[{'record_field',101,{'atom',101,'base'}}|[{'record_field',101,{'atom',101,'disp'}}]]]],[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{{'record','fp_binary'},[{'record_field',102,{'atom',102,'fp_binop'}}|[{'record_field',102,{'atom',102,'src1'}}|[{'record_field',102,{'atom',102,'src2'}}|[{'record_field',102,{'atom',102,'dst'}}]]]],[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','fp_unary'},[{'record_field',103,{'atom',103,'fp_unop'}}|[{'record_field',103,{'atom',103,'src'}}|[{'record_field',103,{'atom',103,'dst'}}]]],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{{'record','pseudo_fload'},[{'record_field',104,{'atom',104,'base'}}|[{'record_field',104,{'atom',104,'disp'}}|[{'record_field',104,{'atom',104,'dst'}}|[{'record_field',104,{'atom',104,'is_single'}}]]]],[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{{'record','pseudo_fmove'},[{'record_field',105,{'atom',105,'src'}}|[{'record_field',105,{'atom',105,'dst'}}]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','pseudo_fstore'},[{'record_field',106,{'atom',106,'src'}}|[{'record_field',106,{'atom',106,'base'}}|[{'record_field',106,{'atom',106,'disp'}}]]],[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{{'record','defun'},[{'typed_record_field',{'record_field',112,{'atom',112,'mfa'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'mfa',[]}]]}}|[{'record_field',112,{'atom',112,'formals'}}|[{'record_field',112,{'atom',112,'code'}}|[{'typed_record_field',{'record_field',113,{'atom',113,'data'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'isclosure'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'isleaf'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'boolean',[]}]]}}|[{'record_field',116,{'atom',116,'var_range'}}|[{'record_field',116,{'atom',116,'label_range'}}]]]]]]]],[]}]]
'check_and_rewrite'/2 =
    %% Line 27
    fun (_cor1,_cor0) ->
	let <TempMap> =
	    %% Line 28
	    call 'hipe_temp_map':'cols2tuple'
		(_cor0, 'hipe_sparc_specific_fp')
	in  %% Line 29
	    case _cor1 of
	      <{'defun',_cor13,_cor14,Code0,_cor15,_cor16,_cor17,_cor18,_cor19}> when 'true' ->
		  %% Line 30
		  case apply 'do_insns'/4
			   (Code0, TempMap, [], 'false') of
		    <{Code1,DidSpill}> when 'true' ->
			let <_cor5> =
			    %% Line 31
			    call 'hipe_gensym':'get_var'
				('sparc')
			in  let <VarRange> = {%% Line 31
				 0,_cor5}
			    in  let <_cor8> =
				    %% Line 32
				    call 'erlang':'setelement'
					(8, _cor1, VarRange)
				in  let <_cor10> =
					%% Line 32
					call 'erlang':'setelement'
					    (4, _cor8, Code1)
				    in  %% Line 32
					{_cor10,%% Line 33
						DidSpill}
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'do_insns'/4 =
    %% Line 35
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[I|Insns],TempMap,Accum,DidSpill0> when 'true' ->
	      %% Line 36
	      case apply 'do_insn'/2
		       (I, TempMap) of
		<{NewIs,DidSpill1}> when 'true' ->
		    let <_cor6> =
			%% Line 37
			call 'lists':'reverse'
			    (NewIs, Accum)
		    in  let <_cor5> =
			    %% Line 37
			    call 'erlang':'or'
				(DidSpill0, DidSpill1)
			in  %% Line 37
			    apply 'do_insns'/4
				(Insns, TempMap, _cor6, _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 38
	  <[],_X_TempMap,Accum,DidSpill> when 'true' ->
	      let <_cor7> =
		  %% Line 39
		  call 'lists':'reverse'
		      (Accum)
	      in  %% Line 39
		  {_cor7,DidSpill}
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'do_insns',4}}] )
	    -| ['compiler_generated'] )
	end
'do_insn'/2 =
    %% Line 41
    fun (_cor1,_cor0) ->
	%% Line 42
	case _cor1 of
	  %% Line 43
	  <{'fp_binary',_cor5,_cor6,_cor7,_cor8}> when 'true' ->
	      apply 'do_fp_binary'/2
		  (_cor1, _cor0)
	  %% Line 44
	  <{'fp_unary',_cor9,_cor10,_cor11}> when 'true' ->
	      apply 'do_fp_unary'/2
		  (_cor1, _cor0)
	  %% Line 45
	  <{'pseudo_fload',_cor12,_cor13,_cor14,_cor15}> when 'true' ->
	      apply 'do_pseudo_fload'/2
		  (_cor1, _cor0)
	  %% Line 46
	  <{'pseudo_fmove',_cor16,_cor17}> when 'true' ->
	      apply 'do_pseudo_fmove'/2
		  (_cor1, _cor0)
	  %% Line 47
	  <{'pseudo_fstore',_cor18,_cor19,_cor20}> when 'true' ->
	      apply 'do_pseudo_fstore'/2
		  (_cor1, _cor0)
	  %% Line 48
	  <_cor21> when 'true' ->
	      {[_cor1|[]],'false'}
	end
'do_fp_binary'/2 =
    %% Line 53
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'fp_binary',_cor15,Src1,Src2,Dst},TempMap> when 'true' ->
	      %% Line 54
	      case apply 'fix_src'/2
		       (Src1, TempMap) of
		<{FixSrc1,NewSrc1,DidSpill1}> when 'true' ->
		    %% Line 55
		    case apply 'fix_src'/2
			     (Src2, TempMap) of
		      <{FixSrc2,NewSrc2,DidSpill2}> when 'true' ->
			  %% Line 56
			  case apply 'fix_dst'/2
				   (Dst, TempMap) of
			    <{FixDst,NewDst,DidSpill3}> when 'true' ->
				let <_cor7> =
				    %% Line 57
				    {'fp_binary',_cor15,NewSrc1,NewSrc2,NewDst}
				in  let <_cor11> =
					%% Line 58
					call 'erlang':'++'
					    (FixSrc2, [_cor7|FixDst])
				    in  let <_cor12> =
					    %% Line 58
					    call 'erlang':'++'
						(FixSrc1, _cor11)
					in  let <_cor9> =
						%% Line 58
						call 'erlang':'or'
						    (DidSpill1, DidSpill2)
					    in  let <_cor10> =
						    %% Line 58
						    call 'erlang':'or'
							(_cor9, DidSpill3)
						in  %% Line 58
						    {_cor12,_cor10}
			    ( <_cor4> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_cor4})
			      -| ['compiler_generated'] )
			  end
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13})
		  -| [{'function_name',{'do_fp_binary',2}}] )
	    -| ['compiler_generated'] )
	end
'do_fp_unary'/2 =
    %% Line 60
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'fp_unary',_cor12,Src,Dst},TempMap> when 'true' ->
	      %% Line 61
	      case apply 'fix_src'/2
		       (Src, TempMap) of
		<{FixSrc,NewSrc,DidSpill1}> when 'true' ->
		    %% Line 62
		    case apply 'fix_dst'/2
			     (Dst, TempMap) of
		      <{FixDst,NewDst,DidSpill2}> when 'true' ->
			  let <_cor6> =
			      %% Line 63
			      {'fp_unary',_cor12,NewSrc,NewDst}
			  in  let <_cor9> =
				  %% Line 64
				  call 'erlang':'++'
				      (FixSrc, [_cor6|FixDst])
			      in  let <_cor8> =
				      %% Line 64
				      call 'erlang':'or'
					  (DidSpill1, DidSpill2)
				  in  %% Line 64
				      {_cor9,_cor8}
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor3})
			-| ['compiler_generated'] )
		    end
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10})
		  -| [{'function_name',{'do_fp_unary',2}}] )
	    -| ['compiler_generated'] )
	end
'do_pseudo_fload'/2 =
    %% Line 66
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'pseudo_fload',_cor9,_cor10,Dst,_cor11},TempMap> when 'true' ->
	      %% Line 67
	      case apply 'fix_dst'/2
		       (Dst, TempMap) of
		<{FixDst,NewDst,DidSpill}> when 'true' ->
		    let <_cor5> =
			%% Line 68
			call 'erlang':'setelement'
			    (4, I, NewDst)
		    in  %% Line 69
			{[_cor5|FixDst],DidSpill}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7})
		  -| [{'function_name',{'do_pseudo_fload',2}}] )
	    -| ['compiler_generated'] )
	end
'do_pseudo_fmove'/2 =
    %% Line 71
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'pseudo_fmove',Src,Dst},TempMap> when 'true' ->
	      %% Line 72
	      case apply 'temp_is_spilled'/2
		       (Dst, TempMap) of
		%% Line 73
		<'true'> when 'true' ->
		    %% Line 74
		    case apply 'fix_src'/2
			     (Src, TempMap) of
		      <{FixSrc,NewSrc,DidSpill}> when 'true' ->
			  let <_cor5> =
			      %% Line 75
			      call 'erlang':'setelement'
				  (2, I, NewSrc)
			  in  let <_cor7> =
				  %% Line 76
				  call 'erlang':'++'
				      (FixSrc, [_cor5|[]])
			      in  %% Line 76
				  {_cor7,DidSpill}
		      ( <_cor2> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor2})
			-| ['compiler_generated'] )
		    end
		%% Line 77
		<_cor14> when 'true' ->
		    %% Line 78
		    {[I|[]],'false'}
	      end
	  ( <_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9})
		  -| [{'function_name',{'do_pseudo_fmove',2}}] )
	    -| ['compiler_generated'] )
	end
'do_pseudo_fstore'/2 =
    %% Line 81
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <I = {'pseudo_fstore',Src,_cor10,_cor11},TempMap> when 'true' ->
	      %% Line 82
	      case apply 'fix_src'/2
		       (Src, TempMap) of
		<{FixSrc,NewSrc,DidSpill}> when 'true' ->
		    let <_cor5> =
			%% Line 83
			call 'erlang':'setelement'
			    (2, I, NewSrc)
		    in  let <_cor7> =
			    %% Line 84
			    call 'erlang':'++'
				(FixSrc, [_cor5|[]])
			in  %% Line 84
			    {_cor7,DidSpill}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8})
		  -| [{'function_name',{'do_pseudo_fstore',2}}] )
	    -| ['compiler_generated'] )
	end
'fix_src'/2 =
    %% Line 88
    fun (_cor1,_cor0) ->
	%% Line 89
	case apply 'temp_is_spilled'/2
		 (_cor1, _cor0) of
	  %% Line 90
	  <'true'> when 'true' ->
	      let <NewSrc> =
		  %% Line 91
		  apply 'clone'/1
		      (_cor1)
	      in  let <_cor3> =
		      %% Line 92
		      call 'hipe_sparc':'mk_pseudo_fmove'
			  (_cor1, NewSrc)
		  in  %% Line 92
		      {[_cor3|[]],NewSrc,'true'}
	  %% Line 93
	  <_cor7> when 'true' ->
	      %% Line 94
	      {[],_cor1,'false'}
	end
'fix_dst'/2 =
    %% Line 97
    fun (_cor1,_cor0) ->
	%% Line 98
	case apply 'temp_is_spilled'/2
		 (_cor1, _cor0) of
	  %% Line 99
	  <'true'> when 'true' ->
	      let <NewDst> =
		  %% Line 100
		  apply 'clone'/1
		      (_cor1)
	      in  let <_cor3> =
		      %% Line 101
		      call 'hipe_sparc':'mk_pseudo_fmove'
			  (NewDst, _cor1)
		  in  %% Line 101
		      {[_cor3|[]],NewDst,'true'}
	  %% Line 102
	  <_cor7> when 'true' ->
	      %% Line 103
	      {[],_cor1,'false'}
	end
'temp_is_spilled'/2 =
    %% Line 108
    fun (_cor1,_cor0) ->
	%% Line 109
	case call 'hipe_sparc':'temp_is_allocatable'
		 (_cor1) of
	  %% Line 110
	  <'true'> when 'true' ->
	      let <Reg> =
		  %% Line 111
		  call 'hipe_sparc':'temp_reg'
		      (_cor1)
	      in  let <_cor4> =
		      %% Line 112
		      call 'erlang':'tuple_size'
			  (_cor0)
		  in  %% Line 112
		      ( case <> of
			  ( <>
				when call 'erlang':'>'
				      (_cor4,
				       Reg) ->
				call 'hipe_temp_map':'is_spilled'
				    (Reg, _cor0)
			    -| ['compiler_generated'] )
			  ( <> when 'true' ->
				'false'
			    -| ['compiler_generated'] )
			end
			-| ['compiler_generated'] )
	  %% Line 113
	  <'false'> when 'true' ->
	      'true'
	  ( <_cor6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor6})
	    -| ['compiler_generated'] )
	end
'clone'/1 =
    %% Line 118
    fun (_cor0) ->
	let <Type> =
	    %% Line 119
	    call 'hipe_sparc':'temp_type'
		(_cor0)
	in  %% Line 120
	    call 'hipe_sparc':'mk_new_temp'
		(Type)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_sparc_ra_postconditions_fp')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_sparc_ra_postconditions_fp', _cor0)
end