module 'hipe_arm_finalise' ['finalise'/1,
			    'module_info'/0,
			    'module_info'/1]
    attributes [%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','arm_mfa'},[{'typed_record_field',{'record_field',38,{'atom',38,'m'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'atom',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'f'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'atom',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'a'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'arity',[]}]]}}]]],[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','arm_prim'},[{'record_field',39,{'atom',39,'prim'}}],[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{{'record','arm_sdesc'},[{'record_field',40,{'atom',40,'exnlab'}}|[{'record_field',40,{'atom',40,'fsize'}}|[{'typed_record_field',{'record_field',40,{'atom',40,'arity'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'arity',[]}]]}}|[{'record_field',40,{'atom',40,'live'}}]]]],[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','arm_temp'},[{'record_field',41,{'atom',41,'reg'}}|[{'record_field',41,{'atom',41,'type'}}|[{'record_field',41,{'atom',41,'allocatable'}}]]],[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{{'record','am2'},[{'record_field',87,{'atom',87,'src'}}|[{'record_field',87,{'atom',87,'sign'}}|[{'record_field',87,{'atom',87,'offset'}}]]],[]}],
		%% Line 88
		'type' =
		    %% Line 88
		    [{{'record','am3'},[{'record_field',88,{'atom',88,'src'}}|[{'record_field',88,{'atom',88,'sign'}}|[{'record_field',88,{'atom',88,'offset'}}]]],[]}],
		%% Line 92
		'type' =
		    %% Line 92
		    [{{'record','alu'},[{'record_field',92,{'atom',92,'aluop'}}|[{'record_field',92,{'atom',92,'s'}}|[{'record_field',92,{'atom',92,'dst'}}|[{'record_field',92,{'atom',92,'src'}}|[{'record_field',92,{'atom',92,'am1'}}]]]]],[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','b_fun'},[{'record_field',93,{'atom',93,'fun'}}|[{'record_field',93,{'atom',93,'linkage'}}]],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{{'record','b_label'},[{'record_field',94,{'atom',94,'cond'}}|[{'record_field',94,{'atom',94,'label'}}]],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','bl'},[{'record_field',95,{'atom',95,'fun'}}|[{'record_field',95,{'atom',95,'sdesc'}}|[{'record_field',95,{'atom',95,'linkage'}}]]],[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{{'record','blx'},[{'record_field',96,{'atom',96,'src'}}|[{'record_field',96,{'atom',96,'sdesc'}}]],[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','cmp'},[{'record_field',97,{'atom',97,'cmpop'}}|[{'record_field',97,{'atom',97,'src'}}|[{'record_field',97,{'atom',97,'am1'}}]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','comment'},[{'record_field',98,{'atom',98,'term'}}],[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{{'record','label'},[{'record_field',99,{'atom',99,'label'}}],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{{'record','load'},[{'record_field',100,{'atom',100,'ldop'}}|[{'record_field',100,{'atom',100,'dst'}}|[{'record_field',100,{'atom',100,'am2'}}]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','ldrsb'},[{'record_field',101,{'atom',101,'dst'}}|[{'record_field',101,{'atom',101,'am3'}}]],[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{{'record','move'},[{'record_field',102,{'atom',102,'movop'}}|[{'record_field',102,{'atom',102,'s'}}|[{'record_field',102,{'atom',102,'dst'}}|[{'record_field',102,{'atom',102,'am1'}}]]]],[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','pseudo_bc'},[{'record_field',103,{'atom',103,'cond'}}|[{'record_field',103,{'atom',103,'true_label'}}|[{'record_field',103,{'atom',103,'false_label'}}|[{'record_field',103,{'atom',103,'pred'}}]]]],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{{'record','pseudo_blr'},[],[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{{'record','pseudo_bx'},[{'record_field',105,{'atom',105,'src'}}],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','pseudo_call'},[{'record_field',106,{'atom',106,'funv'}}|[{'record_field',106,{'atom',106,'sdesc'}}|[{'record_field',106,{'atom',106,'contlab'}}|[{'record_field',106,{'atom',106,'linkage'}}]]]],[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{{'record','pseudo_call_prepare'},[{'record_field',107,{'atom',107,'nrstkargs'}}],[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{{'record','pseudo_li'},[{'record_field',108,{'atom',108,'dst'}}|[{'record_field',108,{'atom',108,'imm'}}|[{'record_field',108,{'atom',108,'label'}}]]],[]}],
		%% Line 109
		'type' =
		    %% Line 109
		    [{{'record','pseudo_move'},[{'record_field',109,{'atom',109,'dst'}}|[{'record_field',109,{'atom',109,'src'}}]],[]}],
		%% Line 110
		'type' =
		    %% Line 110
		    [{{'record','pseudo_switch'},[{'record_field',110,{'atom',110,'jtab'}}|[{'record_field',110,{'atom',110,'index'}}|[{'record_field',110,{'atom',110,'labels'}}]]],[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','pseudo_tailcall'},[{'record_field',111,{'atom',111,'funv'}}|[{'record_field',111,{'atom',111,'arity'}}|[{'record_field',111,{'atom',111,'stkargs'}}|[{'record_field',111,{'atom',111,'linkage'}}]]]],[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{{'record','pseudo_tailcall_prepare'},[],[]}],
		%% Line 113
		'type' =
		    %% Line 113
		    [{{'record','smull'},[{'record_field',113,{'atom',113,'dstlo'}}|[{'record_field',113,{'atom',113,'dsthi'}}|[{'record_field',113,{'atom',113,'src1'}}|[{'record_field',113,{'atom',113,'src2'}}]]]],[]}],
		%% Line 114
		'type' =
		    %% Line 114
		    [{{'record','store'},[{'record_field',114,{'atom',114,'stop'}}|[{'record_field',114,{'atom',114,'src'}}|[{'record_field',114,{'atom',114,'am2'}}]]],[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 120
		'type' =
		    %% Line 120
		    [{{'record','defun'},[{'typed_record_field',{'record_field',120,{'atom',120,'mfa'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'mfa',[]}]]}}|[{'record_field',120,{'atom',120,'formals'}}|[{'record_field',120,{'atom',120,'code'}}|[{'typed_record_field',{'record_field',121,{'atom',121,'data'}},{'type',121,'union',[{'atom',121,'undefined'}|[{'type',121,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',122,{'atom',122,'isclosure'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'type',122,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'isleaf'}},{'type',123,'union',[{'atom',123,'undefined'}|[{'type',123,'boolean',[]}]]}}|[{'record_field',124,{'atom',124,'var_range'}}|[{'record_field',124,{'atom',124,'label_range'}}]]]]]]]],[]}]]
'finalise'/1 =
    %% Line 25
    fun (_cor0) ->
	%% Line 26
	case _cor0 of
	  <{'defun',_cor7,_cor8,Code0,_cor9,_cor10,_cor11,_cor12,_cor13}> when 'true' ->
	      let <_cor2> =
		  %% Line 27
		  apply 'expand'/1
		      (Code0)
	      in  let <Code1> =
		      %% Line 27
		      apply 'peep'/1
			  (_cor2)
		  in  %% Line 28
		      call 'erlang':'setelement'
			  (4, _cor0, Code1)
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'expand'/1 =
    %% Line 30
    fun (_cor0) ->
	%% Line 31
	apply 'expand_list'/2
	    (_cor0, [])
'expand_list'/2 =
    %% Line 33
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[I|Insns],Accum> when 'true' ->
	      let <_cor2> =
		  %% Line 34
		  apply 'expand_insn'/2
		      (I, Accum)
	      in  %% Line 34
		  apply 'expand_list'/2
		      (Insns, _cor2)
	  %% Line 35
	  <[],Accum> when 'true' ->
	      %% Line 36
	      call 'lists':'reverse'
		  (Accum)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'expand_list',2}}] )
	    -| ['compiler_generated'] )
	end
'expand_insn'/2 =
    %% Line 38
    fun (_cor1,_cor0) ->
	%% Line 39
	case _cor1 of
	  %% Line 40
	  <{'pseudo_bc',Cond,TrueLab,FalseLab,_cor18}> when 'true' ->
	      let <_cor2> =
		  %% Line 41
		  call 'hipe_arm':'mk_b_label'
		      (FalseLab)
	      in  let <_cor3> =
		      %% Line 42
		      call 'hipe_arm':'mk_b_label'
			  (Cond, TrueLab)
		  in  %% Line 41
		      [_cor2|%% Line 42
			     [_cor3|_cor0]]
	  %% Line 44
	  <{'pseudo_blr'}> when 'true' ->
	      let <_cor5> =
		  %% Line 45
		  call 'hipe_arm':'mk_pc'
		      ()
	      in  let <_cor4> =
		      %% Line 45
		      call 'hipe_arm':'mk_lr'
			  ()
		  in  let <_cor6> =
			  %% Line 45
			  call 'hipe_arm':'mk_move'
			      (_cor5, _cor4)
		      in  %% Line 45
			  [_cor6|_cor0]
	  %% Line 46
	  <{'pseudo_bx',Src}> when 'true' ->
	      let <_cor7> =
		  %% Line 47
		  call 'hipe_arm':'mk_pc'
		      ()
	      in  let <_cor8> =
		      %% Line 47
		      call 'hipe_arm':'mk_move'
			  (_cor7, Src)
		  in  %% Line 47
		      [_cor8|_cor0]
	  %% Line 48
	  <{'pseudo_call',FunV,SDesc,ContLab,Linkage}> when 'true' ->
	      let <_cor9> =
		  %% Line 49
		  call 'hipe_arm':'mk_b_label'
		      (ContLab)
	      in  let <_cor11> =
		      %% Line 50
		      case FunV of
			%% Line 51
			<{'arm_temp',_cor19,_cor20,_cor21}> when 'true' ->
			    call 'hipe_arm':'mk_blx'
				(FunV, SDesc)
			%% Line 52
			<_cor22> when 'true' ->
			    call 'hipe_arm':'mk_bl'
				(FunV, SDesc, Linkage)
		      end
		  in  %% Line 49
		      [_cor9|%% Line 50
			     [_cor11|_cor0]]
	  %% Line 55
	  <{'pseudo_switch',JTab,Index,_cor23}> when 'true' ->
	      let <PC> =
		  %% Line 56
		  call 'hipe_arm':'mk_pc'
		      ()
	      in  let <Am2> =
		      %% Line 57
		      call 'hipe_arm':'mk_am2'
			  (JTab, '+', {Index,'lsl',2})
		  in  let <_cor14> =
			  %% Line 58
			  call 'hipe_arm':'mk_load'
			      ('ldr', PC, Am2)
		      in  %% Line 58
			  [_cor14|_cor0]
	  %% Line 59
	  <{'pseudo_tailcall_prepare'}> when 'true' ->
	      _cor0
	  %% Line 61
	  <_cor24> when 'true' ->
	      %% Line 62
	      [_cor1|_cor0]
	end
'peep'/1 =
    %% Line 65
    fun (_cor0) ->
	%% Line 66
	apply 'peep_list'/2
	    (_cor0, [])
'peep_list'/2 =
    %% Line 68
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'b_label','al',Label}|Insns = [{'label',_cor4}|_cor5]],Accum>
	      when call 'erlang':'=:='
		    (_cor4,
		     Label) ->
	      %% Line 69
	      apply 'peep_list'/2
		  (Insns, Accum)
	  %% Line 70
	  <[I|Insns],Accum> when 'true' ->
	      %% Line 71
	      apply 'peep_list'/2
		  (Insns, [I|Accum])
	  %% Line 72
	  <[],Accum> when 'true' ->
	      %% Line 73
	      call 'lists':'reverse'
		  (Accum)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'peep_list',2}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_arm_finalise')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_arm_finalise', _cor0)
end