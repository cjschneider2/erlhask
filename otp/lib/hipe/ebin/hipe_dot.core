module 'hipe_dot' ['module_info'/0,
		   'module_info'/1,
		   'translate_digraph'/3,
		   'translate_digraph'/5,
		   'translate_list'/3,
		   'translate_list'/4,
		   'translate_list'/5]
    attributes [%% Line 35
		'type' =
		    %% Line 35
		    [{'gnode',{'type',35,'any',[]},[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{'edge',{'type',36,'tuple',[{'type',36,'gnode',[]}|[{'type',36,'gnode',[]}]]},[]}],
		%% Line 73
		'spec' =
		    %% Line 73
		    [{{'translate_digraph',3},[{'type',73,'fun',[{'type',73,'product',[{'remote_type',73,[{'atom',73,'digraph'}|[{'atom',73,'graph'}|[[]]]]}|[{'type',73,'string',[]}|[{'type',73,'string',[]}]]]}|[{'atom',73,'ok'}]]}]}],
		%% Line 79
		'spec' =
		    %% Line 79
		    [{{'translate_digraph',5},[{'type',79,'fun',[{'type',79,'product',[{'remote_type',79,[{'atom',79,'digraph'}|[{'atom',79,'graph'}|[[]]]]}|[{'type',79,'string',[]}|[{'type',79,'string',[]}|[{'type',80,'fun',[{'type',80,'product',[{'var',80,'_'}]}|[{'type',80,'string',[]}]]}|[{'type',80,'list',[{'var',80,'_'}]}]]]]]}|[{'atom',80,'ok'}]]}]}],
		%% Line 89
		'spec' =
		    %% Line 89
		    [{{'translate_list',3},[{'type',89,'fun',[{'type',89,'product',[{'type',89,'list',[{'type',89,'edge',[]}]}|[{'type',89,'string',[]}|[{'type',89,'string',[]}]]]}|[{'atom',89,'ok'}]]}]}],
		%% Line 95
		'spec' =
		    %% Line 95
		    [{{'translate_list',4},[{'type',95,'fun',[{'type',95,'product',[{'type',95,'list',[{'type',95,'edge',[]}]}|[{'type',95,'string',[]}|[{'type',95,'string',[]}|[{'type',95,'list',[{'var',95,'_'}]}]]]]}|[{'atom',95,'ok'}]]}]}],
		%% Line 101
		'spec' =
		    %% Line 101
		    [{{'translate_list',5},[{'type',101,'fun',[{'type',101,'product',[{'type',101,'list',[{'type',101,'edge',[]}]}|[{'type',101,'string',[]}|[{'type',101,'string',[]}|[{'type',102,'fun',[{'type',102,'product',[{'var',102,'_'}]}|[{'type',102,'string',[]}]]}|[{'type',102,'list',[{'var',102,'_'}]}]]]]]}|[{'atom',102,'ok'}]]}]}]]
'translate_digraph'/3 =
    %% Line 75
    fun (_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 77
	    ( fun (_cor3) ->
		  call 'io_lib':'format'
		      ([126|[112]], [_cor3|[]])
	      -| [{'id',{0,0,'-translate_digraph/3-fun-0-'}}] )
	in  %% Line 76
	    apply 'translate_digraph'/5
		(_cor2, _cor1, _cor0, _cor5, %% Line 77
					     [])
'translate_digraph'/5 =
    %% Line 82
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <_cor11> =
	    %% Line 83
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor8) ->
			  case _cor8 of
			    <[X|_cor6]> when 'true' ->
				let <_cor9> =
				    call 'digraph':'edge'
					(_cor4, X)
				in  let <_cor10> =
					apply 'lc$^0'/1
					    (_cor6)
				    in  ( [_cor9|_cor10]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor8> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor8})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  let <_cor7> =
		      call 'digraph':'edges'
			  (_cor4)
		  in  apply 'lc$^0'/1
			  (_cor7)
	      -| ['list_comprehension'] )
	in  let <_cor17> =
		%% Line 84
		( letrec
		      'lc$^1'/1 =
			  fun (_cor15) ->
			      case _cor15 of
				<[{_cor24,X,Y,_cor25}|_cor14]> when 'true' ->
				    let <_cor16> =
					apply 'lc$^1'/1
					    (_cor14)
				    in  ( [{X,Y}|_cor16]
					  -| ['compiler_generated'] )
				( <[_cor13|_cor14]> when 'true' ->
				      apply 'lc$^1'/1
					  (_cor14)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_cor15> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_cor15})
					-| [{'function_name',{'lc$^1',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^1'/1
			  (_cor11)
		  -| ['list_comprehension'] )
	    in  %% Line 85
		apply 'translate_list'/5
		    (_cor17, _cor3, _cor2, _cor1, _cor0)
'translate_list'/3 =
    %% Line 91
    fun (_cor2,_cor1,_cor0) ->
	let <_cor6> =
	    %% Line 93
	    ( fun (_cor4) ->
		  let <_cor3> =
		      call 'io_lib':'format'
			  ([126|[112]], [_cor4|[]])
		  in  call 'lists':'flatten'
			  (_cor3)
	      -| [{'id',{0,0,'-translate_list/3-fun-0-'}}] )
	in  %% Line 92
	    apply 'translate_list'/5
		(_cor2, _cor1, _cor0, _cor6, %% Line 93
					     [])
'translate_list'/4 =
    %% Line 97
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 99
	    ( fun (_cor5) ->
		  let <_cor4> =
		      call 'io_lib':'format'
			  ([126|[112]], [_cor5|[]])
		  in  call 'lists':'flatten'
			  (_cor4)
	      -| [{'id',{0,0,'-translate_list/4-fun-0-'}}] )
	in  %% Line 98
	    apply 'translate_list'/5
		(_cor3, _cor2, _cor1, _cor7, _cor0)
'translate_list'/5 =
    %% Line 104
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 105
	case call 'lists':'unzip'
		 (_cor4) of
	  <{NodeList1,NodeList2}> when 'true' ->
	      let <NodeList> =
		  %% Line 106
		  call 'erlang':'++'
		      (NodeList1, NodeList2)
	      in  let <NodeSet> =
		      %% Line 107
		      call 'ordsets':'from_list'
			  (NodeList)
		  in  let <Start> =
			  %% Line 108
			  [[100|[105|[103|[114|[97|[112|[104|[32]]]]]]]]|[_cor2|[[32|[123]]]]]
		      in  let <_cor14> =
			      %% Line 109
			      ( letrec
				    'lc$^0'/1 =
					fun (_cor11) ->
					    case _cor11 of
					      <[V|_cor10]> when 'true' ->
						  let <_cor12> =
						      apply 'node_format'/3
							  (_cor0, _cor1, V)
						  in  let <_cor13> =
							  apply 'lc$^0'/1
							      (_cor10)
						      in  ( [_cor12|_cor13]
							    -| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_cor11> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_cor11})
						      -| [{'function_name',{'lc$^0',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^0'/1
					(NodeSet)
				-| ['list_comprehension'] )
			  in  let <End> =
				  %% Line 110
				  [[103|[114|[97|[112|[104|[32|[91]]]]]]]|[_cor2|[[61]|[_cor2|[[93|[125]]]]]]]
			      in  let <_cor22> =
				      %% Line 111
				      ( letrec
					    'lc$^1'/1 =
						fun (_cor19) ->
						    case _cor19 of
						      <[{X,Y}|_cor18]> when 'true' ->
							  let <_cor20> =
							      apply 'edge_format'/4
								  (_cor0, _cor1, X, Y)
							  in  let <_cor21> =
								  apply 'lc$^1'/1
								      (_cor18)
							      in  ( [_cor20|_cor21]
								    -| ['compiler_generated'] )
						      ( <[_cor17|_cor18]> when 'true' ->
							    apply 'lc$^1'/1
								(_cor18)
							-| ['compiler_generated'] )
						      <[]> when 'true' ->
							  []
						      ( <_cor19> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_cor19})
							      -| [{'function_name',{'lc$^1',1}}] )
							-| ['compiler_generated'] )
						    end
					in  apply 'lc$^1'/1
						(_cor4)
					-| ['list_comprehension'] )
				  in  let <String> =
					  %% Line 112
					  [Start|[_cor14|[_cor22|[End|[]]]]]
				      in  let <_cor25> =
					      %% Line 114
					      call 'erlang':'list_to_binary'
						  (String)
					  in  let <_cor32> =
						  %% Line 114
						  call 'file':'write_file'
						      (_cor3, _cor25)
					      in  %% Line 114
						  case _cor32 of
						    <'ok'> when 'true' ->
							( _cor32
							  -| ['compiler_generated'] )
						    ( <_cor26> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_cor26})
						      -| ['compiler_generated'] )
						  end
	  ( <_cor5> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor5})
	    -| ['compiler_generated'] )
	end
'node_format'/3 =
    %% Line 118
    fun (_cor2,_cor1,_cor0) ->
	let <OptText> =
	    %% Line 119
	    apply 'nodeoptions'/3
		(_cor2, _cor1, _cor0)
	in  let <_cor4> =
		%% Line 120
		apply _cor1
		    (_cor0)
	    in  let <Tmp> =
		    %% Line 120
		    call 'io_lib':'format'
			([126|[112]], [_cor4|[]])
		in  let <String> =
			%% Line 121
			call 'lists':'flatten'
			    (Tmp)
		    in  %% Line 123
			case apply 'calc_dim'/1
				 (String) of
			  <{Width,Heigth}> when 'true' ->
			      let <_cor8> =
				  %% Line 124
				  call 'erlang':'div'
				      (Width, 7)
			      in  let <_cor9> =
				      %% Line 124
				      call 'erlang':'+'
					  (_cor8, 1)
				  in  let <W> =
					  %% Line 124
					  call 'erlang':'*'
					      (_cor9, 5.50000000000000044409e-01)
				      in  let <H> =
					      %% Line 125
					      call 'erlang':'*'
						  (Heigth, 4.00000000000000022204e-01)
					  in  let <SL> =
						  %% Line 126
						  call 'io_lib':'format'
						      ([126|[102]], [W|[]])
					      in  let <SH> =
						      %% Line 127
						      call 'io_lib':'format'
							  ([126|[102]], [H|[]])
						  in  %% Line 128
						      [String|[[32|[91|[119|[105|[100|[116|[104|[61]]]]]]]]|[SL|[[32|[104|[101|[105|[103|[116|[104|[61]]]]]]]]|[SH|[[32]|[OptText|[[93|[59|[10]]]]]]]]]]]
			  ( <_cor7> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor7})
			    -| ['compiler_generated'] )
			end
'edge_format'/4 =
    %% Line 130
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 132
	    apply 'edgeoptions'/4
		(_cor3, _cor2, _cor1, _cor0)
	in  let <_cor6> =
		%% Line 132
		case call 'lists':'flatten'
			 (_cor4) of
		  %% Line 133
		  <[]> when 'true' ->
		      %% Line 134
		      []
		  %% Line 135
		  <[_cor17|X]> when 'true' ->
		      %% Line 136
		      X
		  ( <_cor5> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_cor5})
		    -| ['compiler_generated'] )
		end
	    in  let <_cor8> =
		    %% Line 138
		    apply _cor2
			(_cor1)
		in  let <_cor9> =
			%% Line 138
			call 'io_lib':'format'
			    ([126|[112]], [_cor8|[]])
		    in  let <_cor10> =
			    %% Line 139
			    apply _cor2
				(_cor0)
			in  let <_cor11> =
				%% Line 139
				call 'io_lib':'format'
				    ([126|[112]], [_cor10|[]])
			    in  let <String> =
				    %% Line 138
				    [_cor9|[[32|[45|[62|[32]]]]|%% Line 139
								[_cor11|[]]]]
				in  %% Line 140
				    [String|[[32|[91]]|[_cor6|[[93|[59|[10]]]]]]]
'calc_dim'/1 =
    %% Line 142
    fun (_cor0) ->
	%% Line 143
	apply 'calc_dim'/4
	    (_cor0, 1, 0, 0)
'calc_dim'/4 =
    %% Line 145
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[92|[110|T]],H,TmpW,MaxW> when 'true' ->
	      let <_cor5> =
		  %% Line 146
		  call 'erlang':'+'
		      (H, 1)
	      in  let <_cor4> =
		      %% Line 146
		      call 'erlang':'max'
			  (TmpW, MaxW)
		  in  %% Line 146
		      apply 'calc_dim'/4
			  (T, _cor5, 0, _cor4)
	  %% Line 147
	  <[_cor12|T],H,TmpW,MaxW> when 'true' ->
	      let <_cor6> =
		  %% Line 148
		  call 'erlang':'+'
		      (TmpW, 1)
	      in  %% Line 148
		  apply 'calc_dim'/4
		      (T, H, _cor6, MaxW)
	  %% Line 149
	  <[],H,TmpW,MaxW> when 'true' ->
	      let <_cor7> =
		  %% Line 150
		  call 'erlang':'max'
		      (TmpW, MaxW)
	      in  %% Line 150
		  {_cor7,H}
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'calc_dim',4}}] )
	    -| ['compiler_generated'] )
	end
'edgeoptions'/4 =
    %% Line 152
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{'all_edges',{OptName,OptVal}}|T],Fun,V1,V2> when 'true' ->
	      %% Line 153
	      case apply 'legal_edgeoption'/1
		       (OptName) of
		%% Line 154
		<'true'> when 'true' ->
		    let <_cor4> =
			%% Line 155
			call 'io_lib':'format'
			    ([44|[126|[112|[61|[126|[112|[32]]]]]]], [OptName|[OptVal|[]]])
		    in  let <_cor5> =
			    %% Line 155
			    apply 'edgeoptions'/4
				(T, Fun, V1, V2)
			in  %% Line 155
			    [_cor4|_cor5]
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 159
	  <[{N1,N2,{OptName,OptVal}}|T],Fun,V1,V2> when 'true' ->
	      let <_cor9> =
		  %% Line 161
		  apply Fun
		      (N1)
	      in  let <_cor8> =
		      %% Line 161
		      apply Fun
			  (V1)
		  in  let <_cor13> =
			  %% Line 161
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (_cor9,
					   _cor8) ->
				    let <_cor11> =
					apply Fun
					    (N2)
				    in  let <_cor10> =
					    apply Fun
						(V2)
					in  call 'erlang':'=:='
						(_cor11, _cor10)
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    'false'
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      in  %% Line 160
			  case _cor13 of
			    %% Line 162
			    <'true'> when 'true' ->
				let <_cor14> =
				    %% Line 163
				    call 'io_lib':'format'
					([44|[126|[112|[61|[126|[112|[32]]]]]]], [OptName|[OptVal|[]]])
				in  let <_cor15> =
					%% Line 163
					apply 'edgeoptions'/4
					    (T, Fun, V1, V2)
				    in  %% Line 163
					[_cor14|_cor15]
			    %% Line 164
			    <'false'> when 'true' ->
				%% Line 165
				apply 'edgeoptions'/4
				    (T, Fun, V1, V2)
			    ( <_cor16> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor16})
			      -| ['compiler_generated'] )
			  end
	  %% Line 167
	  <[_cor21|T],Fun,V1,V2> when 'true' ->
	      %% Line 168
	      apply 'edgeoptions'/4
		  (T, Fun, V1, V2)
	  %% Line 169
	  <[],_cor22,_cor23,_cor24> when 'true' ->
	      %% Line 170
	      []
	  ( <_cor20,_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18,_cor17})
		  -| [{'function_name',{'edgeoptions',4}}] )
	    -| ['compiler_generated'] )
	end
'nodeoptions'/3 =
    %% Line 172
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'all_nodes',{OptName,OptVal}}|T],Fun,V> when 'true' ->
	      %% Line 173
	      case apply 'legal_nodeoption'/1
		       (OptName) of
		%% Line 174
		<'true'> when 'true' ->
		    let <_cor3> =
			%% Line 175
			call 'io_lib':'format'
			    ([44|[126|[112|[61|[126|[112|[32]]]]]]], [OptName|[OptVal|[]]])
		    in  let <_cor4> =
			    %% Line 175
			    apply 'nodeoptions'/3
				(T, Fun, V)
			in  %% Line 175
			    [_cor3|_cor4]
		%% Line 176
		<'false'> when 'true' ->
		    %% Line 177
		    apply 'nodeoptions'/3
			(T, Fun, V)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 179
	  <[{Node,{OptName,OptVal}}|T],Fun,V> when 'true' ->
	      let <_cor8> =
		  %% Line 180
		  apply Fun
		      (Node)
	      in  let <_cor7> =
		      %% Line 180
		      apply Fun
			  (V)
		  in  let <_cor10> =
			  %% Line 180
			  ( case <> of
			      ( <>
				    when call 'erlang':'=:='
					  (_cor8,
					   _cor7) ->
				    apply 'legal_nodeoption'/1
					(OptName)
				-| ['compiler_generated'] )
			      ( <> when 'true' ->
				    'false'
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
		      in  %% Line 180
			  case _cor10 of
			    %% Line 181
			    <'true'> when 'true' ->
				let <_cor11> =
				    %% Line 182
				    call 'io_lib':'format'
					([126|[112|[61|[126|[112|[32]]]]]], [OptName|[OptVal|[]]])
				in  let <_cor12> =
					%% Line 182
					apply 'nodeoptions'/3
					    (T, Fun, V)
				    in  %% Line 182
					[_cor11|_cor12]
			    %% Line 183
			    <'false'> when 'true' ->
				%% Line 184
				apply 'nodeoptions'/3
				    (T, Fun, V)
			    ( <_cor13> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_cor13})
			      -| ['compiler_generated'] )
			  end
	  %% Line 186
	  <[_cor17|T],Fun,V> when 'true' ->
	      %% Line 187
	      apply 'nodeoptions'/3
		  (T, Fun, V)
	  %% Line 188
	  <[],_X_Fun,_X_V> when 'true' ->
	      %% Line 189
	      []
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'nodeoptions',3}}] )
	    -| ['compiler_generated'] )
	end
'legal_nodeoption'/1 =
    %% Line 191
    fun (_cor0) ->
	case _cor0 of
	  <'bottomlabel'> when 'true' ->
	      'true'
	  %% Line 192
	  <'color'> when 'true' ->
	      'true'
	  %% Line 193
	  <'comment'> when 'true' ->
	      'true'
	  %% Line 194
	  <'distortion'> when 'true' ->
	      'true'
	  %% Line 195
	  <'fillcolor'> when 'true' ->
	      'true'
	  %% Line 196
	  <'fixedsize'> when 'true' ->
	      'true'
	  %% Line 197
	  <'fontcolor'> when 'true' ->
	      'true'
	  %% Line 198
	  <'fontname'> when 'true' ->
	      'true'
	  %% Line 199
	  <'fontsize'> when 'true' ->
	      'true'
	  %% Line 200
	  <'group'> when 'true' ->
	      'true'
	  %% Line 201
	  <'height'> when 'true' ->
	      'true'
	  %% Line 202
	  <'label'> when 'true' ->
	      'true'
	  %% Line 203
	  <'layer'> when 'true' ->
	      'true'
	  %% Line 204
	  <'orientation'> when 'true' ->
	      'true'
	  %% Line 205
	  <'peripheries'> when 'true' ->
	      'true'
	  %% Line 206
	  <'regular'> when 'true' ->
	      'true'
	  %% Line 207
	  <'shape'> when 'true' ->
	      'true'
	  %% Line 208
	  <'shapefile'> when 'true' ->
	      'true'
	  %% Line 209
	  <'sides'> when 'true' ->
	      'true'
	  %% Line 210
	  <'skew'> when 'true' ->
	      'true'
	  %% Line 211
	  <'style'> when 'true' ->
	      'true'
	  %% Line 212
	  <'toplabel'> when 'true' ->
	      'true'
	  %% Line 213
	  <'URL'> when 'true' ->
	      'true'
	  %% Line 214
	  <'z'> when 'true' ->
	      'true'
	  %% Line 215
	  <Option>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      'false'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'legal_nodeoption',1}}] )
	    -| ['compiler_generated'] )
	end
'legal_edgeoption'/1 =
    %% Line 217
    fun (_cor0) ->
	case _cor0 of
	  <Option>
	      when call 'erlang':'is_atom'
		    (_cor0) ->
	      'true'
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'legal_edgeoption',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_dot')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_dot', _cor0)
end