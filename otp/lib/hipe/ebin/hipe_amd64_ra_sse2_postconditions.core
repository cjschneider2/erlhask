module 'hipe_amd64_ra_sse2_postconditions' ['check_and_rewrite'/2,
					    'module_info'/0,
					    'module_info'/1]
    attributes [%% Line 64
		'type' =
		    %% Line 64
		    [{{'record','x86_temp'},[{'record_field',64,{'atom',64,'reg'}}|[{'record_field',64,{'atom',64,'type'}}|[{'record_field',64,{'atom',64,'allocatable'}}]]],[]}],
		%% Line 65
		'type' =
		    %% Line 65
		    [{{'record','x86_imm'},[{'record_field',65,{'atom',65,'value'}}],[]}],
		%% Line 66
		'type' =
		    %% Line 66
		    [{{'record','x86_mem'},[{'record_field',66,{'atom',66,'base'}}|[{'record_field',66,{'atom',66,'off'}}|[{'record_field',66,{'atom',66,'type'}}]]],[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{{'record','x86_fpreg'},[{'record_field',67,{'atom',67,'reg'}}|[{'record_field',67,{'atom',67,'pseudo'}}]],[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{{'record','x86_mfa'},[{'typed_record_field',{'record_field',68,{'atom',68,'m'}},{'type',68,'union',[{'atom',68,'undefined'}|[{'type',68,'atom',[]}]]}}|[{'typed_record_field',{'record_field',68,{'atom',68,'f'}},{'type',68,'union',[{'atom',68,'undefined'}|[{'type',68,'atom',[]}]]}}|[{'typed_record_field',{'record_field',68,{'atom',68,'a'}},{'type',68,'union',[{'atom',68,'undefined'}|[{'type',68,'arity',[]}]]}}]]],[]}],
		%% Line 69
		'type' =
		    %% Line 69
		    [{{'record','x86_prim'},[{'record_field',69,{'atom',69,'prim'}}],[]}],
		%% Line 70
		'type' =
		    %% Line 70
		    [{{'record','x86_sdesc'},[{'record_field',70,{'atom',70,'exnlab'}}|[{'record_field',70,{'atom',70,'fsize'}}|[{'typed_record_field',{'record_field',70,{'atom',70,'arity'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'arity',[]}]]}}|[{'typed_record_field',{'record_field',70,{'atom',70,'live'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'tuple','any'}]]}}]]]],[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{{'record','alu'},[{'record_field',78,{'atom',78,'aluop'}}|[{'record_field',78,{'atom',78,'src'}}|[{'record_field',78,{'atom',78,'dst'}}]]],[]}],
		%% Line 79
		'type' =
		    %% Line 79
		    [{{'record','call'},[{'record_field',79,{'atom',79,'fun'}}|[{'record_field',79,{'atom',79,'sdesc'}}|[{'record_field',79,{'atom',79,'linkage'}}]]],[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{{'record','cmovcc'},[{'record_field',80,{'atom',80,'cc'}}|[{'record_field',80,{'atom',80,'src'}}|[{'record_field',80,{'atom',80,'dst'}}]]],[]}],
		%% Line 81
		'type' =
		    %% Line 81
		    [{{'record','cmp'},[{'record_field',81,{'atom',81,'src'}}|[{'record_field',81,{'atom',81,'dst'}}]],[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{{'record','comment'},[{'record_field',82,{'atom',82,'term'}}],[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{{'record','fmove'},[{'record_field',83,{'atom',83,'src'}}|[{'record_field',83,{'atom',83,'dst'}}]],[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{{'record','fp_binop'},[{'record_field',84,{'atom',84,'op'}}|[{'record_field',84,{'atom',84,'src'}}|[{'record_field',84,{'atom',84,'dst'}}]]],[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','fp_unop'},[{'record_field',85,{'atom',85,'op'}}|[{'record_field',85,{'atom',85,'arg'}}]],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{{'record','imul'},[{'record_field',86,{'atom',86,'imm_opt'}}|[{'record_field',86,{'atom',86,'src'}}|[{'record_field',86,{'atom',86,'temp'}}]]],[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{{'record','jcc'},[{'record_field',87,{'atom',87,'cc'}}|[{'record_field',87,{'atom',87,'label'}}]],[]}],
		%% Line 88
		'type' =
		    %% Line 88
		    [{{'record','jmp_fun'},[{'record_field',88,{'atom',88,'fun'}}|[{'record_field',88,{'atom',88,'linkage'}}]],[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','jmp_label'},[{'record_field',89,{'atom',89,'label'}}],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{{'record','jmp_switch'},[{'record_field',90,{'atom',90,'temp'}}|[{'record_field',90,{'atom',90,'jtab'}}|[{'record_field',90,{'atom',90,'labels'}}]]],[]}],
		%% Line 91
		'type' =
		    %% Line 91
		    [{{'record','label'},[{'record_field',91,{'atom',91,'label'}}],[]}],
		%% Line 92
		'type' =
		    %% Line 92
		    [{{'record','lea'},[{'record_field',92,{'atom',92,'mem'}}|[{'record_field',92,{'atom',92,'temp'}}]],[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','move'},[{'record_field',93,{'atom',93,'src'}}|[{'record_field',93,{'atom',93,'dst'}}]],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{{'record','move64'},[{'record_field',94,{'atom',94,'imm'}}|[{'record_field',94,{'atom',94,'dst'}}]],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','movsx'},[{'record_field',95,{'atom',95,'src'}}|[{'record_field',95,{'atom',95,'dst'}}]],[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{{'record','movzx'},[{'record_field',96,{'atom',96,'src'}}|[{'record_field',96,{'atom',96,'dst'}}]],[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','pseudo_call'},[{'record_field',97,{'atom',97,'fun'}}|[{'record_field',97,{'atom',97,'sdesc'}}|[{'record_field',97,{'atom',97,'contlab'}}|[{'record_field',97,{'atom',97,'linkage'}}]]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','pseudo_jcc'},[{'record_field',98,{'atom',98,'cc'}}|[{'record_field',98,{'atom',98,'true_label'}}|[{'record_field',98,{'atom',98,'false_label'}}|[{'record_field',98,{'atom',98,'pred'}}]]]],[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{{'record','pseudo_spill'},[{'record_field',99,{'atom',99,'args'},{'nil',99}}],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{{'record','pseudo_tailcall'},[{'record_field',100,{'atom',100,'fun'}}|[{'record_field',100,{'atom',100,'arity'}}|[{'record_field',100,{'atom',100,'stkargs'}}|[{'record_field',100,{'atom',100,'linkage'}}]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','pseudo_tailcall_prepare'},[],[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{{'record','push'},[{'record_field',102,{'atom',102,'src'}}],[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','pop'},[{'record_field',103,{'atom',103,'dst'}}],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{{'record','ret'},[{'record_field',104,{'atom',104,'npop'}}],[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{{'record','shift'},[{'record_field',105,{'atom',105,'shiftop'}}|[{'record_field',105,{'atom',105,'src'}}|[{'record_field',105,{'atom',105,'dst'}}]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','test'},[{'record_field',106,{'atom',106,'src'}}|[{'record_field',106,{'atom',106,'dst'}}]],[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{{'record','defun'},[{'typed_record_field',{'record_field',112,{'atom',112,'mfa'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'mfa',[]}]]}}|[{'record_field',112,{'atom',112,'formals'}}|[{'record_field',112,{'atom',112,'code'}}|[{'typed_record_field',{'record_field',113,{'atom',113,'data'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'isclosure'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'isleaf'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'boolean',[]}]]}}|[{'record_field',116,{'atom',116,'var_range'}}|[{'record_field',116,{'atom',116,'label_range'}}]]]]]]]],[]}],
		%% Line 301
		'type' =
		    %% Line 301
		    [{{'record','comp_servers'},[{'typed_record_field',{'record_field',301,{'atom',301,'pp_server'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'range'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'type'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}]]],[]}],
		%% Line 307
		'type' =
		    %% Line 307
		    [{'comp_option',{'type',307,'union',[{'type',307,'atom',[]}|[{'type',307,'tuple',[{'type',307,'atom',[]}|[{'type',307,'atom',[]}]]}]]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{'comp_options',{'type',308,'list',[{'type',308,'comp_option',[]}]},[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'hipe_architecture',{'type',311,'union',[{'atom',311,'amd64'}|[{'atom',311,'arm'}|[{'atom',311,'powerpc'}|[{'atom',311,'ppc64'}|[{'atom',311,'ultrasparc'}|[{'atom',311,'x86'}]]]]]]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{'hipe_map',{'type',313,'list',[{'type',313,'tuple',[{'type',313,'non_neg_integer',[]}|[{'type',314,'union',[{'atom',314,'unknown'}|[{'type',314,'tuple',[{'type',314,'union',[{'atom',314,'reg'}|[{'atom',314,'fp_reg'}|[{'atom',314,'spill'}]]]}|[{'type',315,'non_neg_integer',[]}]]}]]}]]}]},[]}],
		%% Line 316
		'type' =
		    %% Line 316
		    [{'hipe_temp_map',{'type',316,'tuple','any'},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{'hipe_spill_map',{'type',317,'list',[{'type',317,'tuple',[{'type',317,'non_neg_integer',[]}|[{'type',317,'tuple',[{'atom',317,'spill'}|[{'type',317,'non_neg_integer',[]}]]}]]}]},[]}]]
'check_and_rewrite'/2 =
    %% Line 31
    fun (_cor1,_cor0) ->
	let <TempMap> =
	    %% Line 33
	    call 'hipe_temp_map':'cols2tuple'
		(_cor0, 'hipe_amd64_specific_sse2')
	in  %% Line 35
	    case _cor1 of
	      <{'defun',_cor13,_cor14,Code0,_cor15,_cor16,_cor17,_cor18,_cor19}> when 'true' ->
		  %% Line 36
		  case apply 'do_insns'/4
			   (Code0, TempMap, [], 'false') of
		    <{Code1,DidSpill}> when 'true' ->
			let <_cor5> =
			    %% Line 37
			    call 'hipe_gensym':'get_var'
				('x86')
			in  let <_rec0> = {%% Line 37
				 0,_cor5}
			    in  let <_cor8> =
				    %% Line 37
				    call 'erlang':'setelement'
					(8, _cor1, _rec0)
				in  let <_cor10> =
					%% Line 37
					call 'erlang':'setelement'
					    (4, _cor8, Code1)
				    in  %% Line 37
					{_cor10,%% Line 38
						DidSpill}
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor3})
		-| ['compiler_generated'] )
	    end
'do_insns'/4 =
    %% Line 40
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[I|Insns],TempMap,Accum,DidSpill0> when 'true' ->
	      %% Line 41
	      case apply 'do_insn'/2
		       (I, TempMap) of
		<{NewIs,DidSpill1}> when 'true' ->
		    let <_cor6> =
			%% Line 42
			call 'lists':'reverse'
			    (NewIs, Accum)
		    in  let <_cor5> =
			    %% Line 42
			    call 'erlang':'or'
				(DidSpill0, DidSpill1)
			in  %% Line 42
			    apply 'do_insns'/4
				(Insns, TempMap, _cor6, _cor5)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 43
	  <[],_X_TempMap,Accum,DidSpill> when 'true' ->
	      let <_cor7> =
		  %% Line 44
		  call 'lists':'reverse'
		      (Accum)
	      in  %% Line 44
		  {_cor7,DidSpill}
	  ( <_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'do_insns',4}}] )
	    -| ['compiler_generated'] )
	end
'do_insn'/2 =
    %% Line 46
    fun (_cor1,_cor0) ->
	%% Line 47
	case _cor1 of
	  %% Line 48
	  <{'fmove',_cor5,_cor6}> when 'true' ->
	      %% Line 49
	      apply 'do_fmove'/2
		  (_cor1, _cor0)
	  %% Line 50
	  <{'fp_unop',_cor7,_cor8}> when 'true' ->
	      %% Line 51
	      apply 'do_fp_unop'/2
		  (_cor1, _cor0)
	  %% Line 52
	  <{'fp_binop',_cor9,_cor10,_cor11}> when 'true' ->
	      %% Line 53
	      apply 'do_fp_binop'/2
		  (_cor1, _cor0)
	  %% Line 54
	  <_cor12> when 'true' ->
	      %% Line 56
	      {[_cor1|[]],'false'}
	end
'do_fp_binop'/2 =
    %% Line 60
    fun (_cor1,_cor0) ->
	%% Line 61
	case _cor1 of
	  <{'fp_binop',_cor10,Src,Dst}> when 'true' ->
	      %% Line 62
	      case apply 'is_mem_opnd'/2
		       (Dst, _cor0) of
		%% Line 63
		<'true'> when 'true' ->
		    let <Tmp> =
			%% Line 64
			apply 'clone'/1
			    (Dst)
		    in  let <_cor6> =
			    %% Line 66
			    {'fp_binop',_cor10,Src,Tmp}
			in  %% Line 65
			    {[{'fmove',Dst,Tmp}|%% Line 66
						[_cor6|%% Line 67
						       [{'fmove',Tmp,Dst}|[]]]],%% Line 68
										'true'}
		%% Line 69
		<'false'> when 'true' ->
		    %% Line 70
		    {[_cor1|[]],'false'}
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'do_fp_unop'/2 =
    %% Line 73
    fun (_cor1,_cor0) ->
	%% Line 74
	case _cor1 of
	  <{'fp_unop',_cor10,Arg}> when 'true' ->
	      %% Line 75
	      case apply 'is_mem_opnd'/2
		       (Arg, _cor0) of
		%% Line 76
		<'true'> when 'true' ->
		    let <Tmp> =
			%% Line 77
			apply 'clone'/1
			    (Arg)
		    in  let <_cor6> =
			    %% Line 79
			    call 'erlang':'setelement'
				(3, _cor1, Tmp)
			in  %% Line 78
			    {[{'fmove',Arg,Tmp}|%% Line 79
						[_cor6|%% Line 80
						       [{'fmove',Tmp,Arg}|[]]]],%% Line 81
										'true'}
		%% Line 82
		<'false'> when 'true' ->
		    %% Line 83
		    {[_cor1|[]],'false'}
		( <_cor7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor7})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'do_fmove'/2 =
    %% Line 87
    fun (_cor1,_cor0) ->
	%% Line 88
	case _cor1 of
	  <{'fmove',Src,Dst}> when 'true' ->
	      let <_cor4> =
		  %% Line 89
		  apply 'is_mem_opnd'/2
		      (Dst, _cor0)
	      in  let <_cor3> =
		      %% Line 89
		      apply 'is_mem_opnd'/2
			  (Src, _cor0)
		  in  %% Line 89
		      case call 'erlang':'and'
			       (_cor4, _cor3) of
			%% Line 90
			<'true'> when 'true' ->
			    let <Tmp> =
				%% Line 91
				apply 'clone'/1
				    (Src)
			    in  let <_cor8> = {%% Line 92
				     'fmove',%% Line 92
					     Tmp,%% Line 92
						 Dst}
				in  %% Line 92
				    {[{'fmove',Src,Tmp}|[_cor8|[]]],%% Line 93
								    'true'}
			%% Line 94
			<'false'> when 'true' ->
			    %% Line 95
			    {[_cor1|[]],'false'}
		      end
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'is_mem_opnd'/2 =
    %% Line 100
    fun (_cor1,_cor0) ->
	%% Line 102
	case _cor1 of
	  %% Line 103
	  <{'x86_mem',_cor14,_cor15,_cor16}> when 'true' ->
	      'true'
	  %% Line 104
	  <{'x86_temp',_cor17,_cor18,_cor19}> when 'true' ->
	      let <Reg> =
		  %% Line 105
		  call 'hipe_x86':'temp_reg'
		      (_cor1)
	      in  %% Line 106
		  case call 'hipe_x86':'temp_is_allocatable'
			   (_cor1) of
		    %% Line 107
		    <'true'> when 'true' ->
			let <_cor3> =
			    %% Line 108
			    call 'erlang':'tuple_size'
				(_cor0)
			in  %% Line 108
			    case call 'erlang':'>'
				     (_cor3, Reg) of
			      %% Line 109
			      <'true'> when 'true' ->
				  %% Line 110
				  case %% Line 111
				       call 'hipe_temp_map':'is_spilled'
					   (Reg, _cor0) of
				    %% Line 112
				    <'true'> when 'true' ->
					do  %% Line 113
					    case call 'erlang':'get'
						     ('counter_mfa_mem_temps') of
					      <'undefined'> when 'true' ->
						  'ok'
					      <_cor20> when 'true' ->
						  let <_cor4> =
						      call 'erlang':'get'
							  ('counter_mfa_mem_temps')
						  in  call 'erlang':'put'
							  ('counter_mfa_mem_temps', [Reg|_cor4])
					    end
					    %% Line 114
					    'true'
				    %% Line 115
				    <'false'> when 'true' ->
					'false'
				    ( <_cor6> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor6})
				      -| ['compiler_generated'] )
				  end
			      %% Line 117
			      <_cor21> when 'true' ->
				  'false'
			    end
		    %% Line 119
		    <'false'> when 'true' ->
			'true'
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor8})
		      -| ['compiler_generated'] )
		  end
	  %% Line 121
	  <_cor22> when 'true' ->
	      'false'
	end
'clone'/1 =
    %% Line 172
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 174
	    case _cor0 of
	      %% Line 175
	      <{'x86_mem',_cor5,_cor6,_cor7}> when 'true' ->
		  call 'hipe_x86':'mem_type'
		      (_cor0)
	      %% Line 176
	      <{'x86_temp',_cor8,_cor9,_cor10}> when 'true' ->
		  call 'hipe_x86':'temp_type'
		      (_cor0)
	      ( <_cor1> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor1})
		-| ['compiler_generated'] )
	    end
	in  %% Line 178
	    call 'hipe_x86':'mk_new_temp'
		(_cor2)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_amd64_ra_sse2_postconditions')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_amd64_ra_sse2_postconditions', _cor0)
end