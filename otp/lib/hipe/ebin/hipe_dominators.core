module 'hipe_dominators' ['domFrontier_create'/2,
			  'domFrontier_get'/2,
			  'domTree_create'/1,
			  'domTree_dominates'/3,
			  'domTree_getChildren'/2,
			  'module_info'/0,
			  'module_info'/1]
    attributes [%% Line 40
		'export_type' =
		    %% Line 40
		    [{'domTree',0}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{'cfg_lbl',{'type',28,'non_neg_integer',[]},[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','cfg_info'},[{'typed_record_field',{'record_field',34,{'atom',34,'fun'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'type',34,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',35,{'atom',35,'start_label'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'cfg_lbl',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'is_closure'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',37,{'atom',37,'closure_arity'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'type',37,'arity',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'is_leaf'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'boolean',[]}]]}}|[{'record_field',39,{'atom',39,'params'}}|[{'record_field',40,{'atom',40,'info'},{'nil',40}}]]]]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'cfg_data',{'type',45,'tuple',[{'remote_type',45,[{'atom',45,'dict'}|[{'atom',45,'dict'}|[[]]]]}|[{'type',45,'list',[{'type',45,'cfg_lbl',[]}]}|[{'type',45,'non_neg_integer',[]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','cfg'},[{'typed_record_field',{'record_field',50,{'atom',50,'table'},{'call',50,{'remote',50,{'atom',50,'gb_trees'},{'atom',50,'empty'}},[]}},{'remote_type',50,[{'atom',50,'gb_trees'}|[{'atom',50,'tree'}|[[]]]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'info'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'type',51,'record',[{'atom',51,'cfg_info'}]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'data'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'cfg_data',[]}]]}}]]],[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{'cfg',{'type',53,'record',[{'atom',53,'cfg'}]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','workDataCell'},[{'typed_record_field',{'record_field',50,{'atom',50,'dfnum'},{'integer',50,0}},{'type',50,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'dfparent'},{'atom',51,'none'}},{'type',51,'union',[{'atom',51,'none'}|[{'type',51,'cfg_lbl',[]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'semi'},{'atom',52,'none'}},{'type',52,'union',[{'atom',52,'none'}|[{'type',52,'cfg_lbl',[]}]]}}|[{'typed_record_field',{'record_field',53,{'atom',53,'ancestor'},{'atom',53,'none'}},{'type',53,'union',[{'atom',53,'none'}|[{'type',53,'cfg_lbl',[]}]]}}|[{'typed_record_field',{'record_field',54,{'atom',54,'best'},{'atom',54,'none'}},{'type',54,'union',[{'atom',54,'none'}|[{'type',54,'cfg_lbl',[]}]]}}|[{'typed_record_field',{'record_field',55,{'atom',55,'samedom'},{'atom',55,'none'}},{'type',55,'union',[{'atom',55,'none'}|[{'type',55,'cfg_lbl',[]}]]}}|[{'typed_record_field',{'record_field',56,{'atom',56,'bucket'},{'nil',56}},{'type',56,'list',[{'type',56,'cfg_lbl',[]}]}}]]]]]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{{'record','domTree'},[{'typed_record_field',{'record_field',58,{'atom',58,'root'}},{'type',58,'union',[{'atom',58,'undefined'}|[{'type',58,'cfg_lbl',[]}]]}}|[{'typed_record_field',{'record_field',59,{'atom',59,'size'},{'integer',59,0}},{'type',59,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',60,{'atom',60,'nodes'},{'call',60,{'remote',60,{'atom',60,'gb_trees'},{'atom',60,'empty'}},[]}},{'remote_type',60,[{'atom',60,'gb_trees'}|[{'atom',60,'tree'}|[[]]]]}}]]],[]}],
		%% Line 61
		'type' =
		    %% Line 61
		    [{'domTree',{'type',61,'record',[{'atom',61,'domTree'}]},[]}],
		%% Line 70
		'spec' =
		    %% Line 70
		    [{{'domTree_create',1},[{'type',70,'fun',[{'type',70,'product',[{'type',70,'cfg',[]}]}|[{'type',70,'domTree',[]}]]}]}],
		%% Line 180
		'spec' =
		    %% Line 180
		    [{{'domTree_getChildren',2},[{'type',180,'fun',[{'type',180,'product',[{'type',180,'cfg_lbl',[]}|[{'type',180,'domTree',[]}]]}|[{'type',180,'list',[{'type',180,'cfg_lbl',[]}]}]]}]}],
		%% Line 547
		'spec' =
		    %% Line 547
		    [{{'domTree_dominates',3},[{'type',547,'fun',[{'type',547,'product',[{'type',547,'cfg_lbl',[]}|[{'type',547,'cfg_lbl',[]}|[{'type',547,'domTree',[]}]]]}|[{'type',547,'boolean',[]}]]}]}],
		%% Line 593
		'type' =
		    %% Line 593
		    [{'domFrontier',{'remote_type',593,[{'atom',593,'gb_trees'}|[{'atom',593,'tree'}|[[]]]]},[]}],
		%% Line 604
		'spec' =
		    %% Line 604
		    [{{'domFrontier_create',2},[{'type',604,'fun',[{'type',604,'product',[{'type',604,'cfg',[]}|[{'type',604,'domTree',[]}]]}|[{'type',604,'domFrontier',[]}]]}]}],
		%% Line 623
		'spec' =
		    %% Line 623
		    [{{'domFrontier_get',2},[{'type',623,'fun',[{'type',623,'product',[{'type',623,'cfg_lbl',[]}|[{'type',623,'domFrontier',[]}]]}|[{'type',623,'list',[{'type',623,'cfg_lbl',[]}]}]]}]}]]
'domTree_create'/1 =
    %% Line 72
    fun (_cor0) ->
	%% Line 73
	case apply 'dfs'/1
		 (_cor0) of
	  <{WorkData,DFS,N}> when 'true' ->
	      let <_cor2> =
		  %% Line 74
		  call 'hipe_gen_cfg':'start_label'
		      (_cor0)
	      in  let <DomTree> =
		      %% Line 74
		      apply 'domTree_empty'/1
			  (_cor2)
		  in  %% Line 75
		      case apply 'getIdoms'/5
			       (_cor0, DomTree, WorkData, N, DFS) of
			<{DomData,WorkData2}> when 'true' ->
			    %% Line 76
			    apply 'finalize'/5
				(WorkData2, DomData, 1, N, DFS)
			( <_cor4> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_cor4})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'domTree_empty'/1 =
    %% Line 85
    fun (_cor0) ->
	let <_cor1> =
	    call 'gb_trees':'empty'
		()
	in  %% Line 86
	    {'domTree',_cor0,0,_cor1}
'domTree_createNode'/2 =
    %% Line 96
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 99
	    apply 'domTree_getNodes'/1
		(_cor0)
	in  let <_cor3> =
		%% Line 98
		call 'gb_trees':'enter'
		    (_cor1, {'none',[]}, _cor2)
	    in  let <DomTree2> =
		    %% Line 97
		    apply 'domTree_setNodes'/2
			(_cor0, _cor3)
		in  %% Line 100
		    apply 'domTree_incSize'/1
			(DomTree2)
'domTree_getNode'/2 =
    %% Line 110
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 111
	    apply 'domTree_getNodes'/1
		(_cor0)
	in  %% Line 111
	    call 'gb_trees':'lookup'
		(_cor1, _cor2)
'domTree_getNodes'/1 =
    %% Line 120
    fun (_cor0) ->
	case _cor0 of
	  <{'domTree',_cor2,_cor3,Nodes}> when 'true' ->
	      Nodes
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'domTree_getNodes',1}}] )
	    -| ['compiler_generated'] )
	end
'domTree_setNodes'/2 =
    %% Line 131
    fun (_cor1,_cor0) ->
	case _cor1 of
	  <{'domTree',_cor6,_cor7,_cor8}> when 'true' ->
	      call 'erlang':'setelement'
		  (4, _cor1, _cor0)
	  ( <_cor9> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','domTree'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'domTree_setSize'/2 =
    %% Line 142
    fun (_cor1,_cor0) ->
	case _cor1 of
	  <{'domTree',_cor6,_cor7,_cor8}> when 'true' ->
	      call 'erlang':'setelement'
		  (3, _cor1, _cor0)
	  ( <_cor9> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','domTree'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'domTree_incSize'/1 =
    %% Line 151
    fun (_cor0) ->
	let <Size> =
	    %% Line 152
	    apply 'domTree_getSize'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 153
		call 'erlang':'+'
		    (Size, 1)
	    in  %% Line 153
		apply 'domTree_setSize'/2
		    (_cor0, _cor2)
'domTree_getIDom'/2 =
    %% Line 164
    fun (_cor1,_cor0) ->
	%% Line 165
	case apply 'domTree_getNode'/2
		 (_cor1, _cor0) of
	  %% Line 166
	  <{'value',{IDom,_cor5}}> when 'true' ->
	      %% Line 167
	      IDom
	  %% Line 168
	  <'none'> when 'true' ->
	      %% Line 169
	      []
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'domTree_getChildren'/2 =
    %% Line 182
    fun (_cor1,_cor0) ->
	%% Line 183
	case apply 'domTree_getNode'/2
		 (_cor1, _cor0) of
	  %% Line 184
	  <{'value',{_cor5,Children}}> when 'true' ->
	      %% Line 185
	      Children
	  %% Line 186
	  <'none'> when 'true' ->
	      %% Line 187
	      []
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'domTree_getSize'/1 =
    %% Line 197
    fun (_cor0) ->
	case _cor0 of
	  <{'domTree',_cor2,Size,_cor3}> when 'true' ->
	      Size
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'domTree_getSize',1}}] )
	    -| ['compiler_generated'] )
	end
'domTree_getRoot'/1 =
    %% Line 206
    fun (_cor0) ->
	case _cor0 of
	  <{'domTree',Root,_cor2,_cor3}> when 'true' ->
	      Root
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'domTree_getRoot',1}}] )
	    -| ['compiler_generated'] )
	end
'domTree_addChild'/3 =
    %% Line 218
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 219
	    case apply 'domTree_getNode'/2
		     (_cor2, _cor0) of
	      %% Line 220
	      <{'value',Tuple}> when 'true' ->
		  %% Line 221
		  Tuple
	      %% Line 222
	      <'none'> when 'true' ->
		  %% Line 223
		  {'none',[]}
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor3})
		-| ['compiler_generated'] )
	    end
	in  %% Line 219
	    case _cor4 of
	      <{IDom,Children}> when 'true' ->
		  let <_cor8> =
		      %% Line 225
		      case call 'lists':'member'
			       (_cor1, Children) of
			%% Line 226
			<'true'> when 'true' ->
			    %% Line 227
			    apply 'domTree_getNodes'/1
				(_cor0)
			%% Line 228
			<'false'> when 'true' ->
			    let <_cor6> =
				%% Line 230
				apply 'domTree_getNodes'/1
				    (_cor0)
			    in  %% Line 229
				call 'gb_trees':'enter'
				    (_cor2, {IDom,[_cor1|Children]}, _cor6)
			( <_cor7> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor7})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 232
		      apply 'domTree_setNodes'/2
			  (_cor0, _cor8)
	      ( <_cor5> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor5})
		-| ['compiler_generated'] )
	    end
'setIDom'/3 =
    %% Line 244
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 245
	    case apply 'domTree_getNode'/2
		     (_cor2, _cor0) of
	      %% Line 246
	      <'none'> when 'true' ->
		  %% Line 247
		  apply 'domTree_createNode'/2
		      (_cor2, _cor0)
	      %% Line 248
	      <_cor13> when 'true' ->
		  _cor0
	    end
	in  let <DomTree2> =
		%% Line 251
		apply 'domTree_addChild'/3
		    (_cor1, _cor2, _cor4)
	    in  %% Line 252
		case apply 'domTree_getNode'/2
			 (_cor2, DomTree2) of
		  <{'value',{_cor14,Children}}> when 'true' ->
		      let <_cor8> =
			  %% Line 255
			  apply 'domTree_getNodes'/1
			      (DomTree2)
		      in  let <_cor9> =
			      %% Line 254
			      call 'gb_trees':'enter'
				  (_cor2, {_cor1,Children}, _cor8)
			  in  %% Line 253
			      apply 'domTree_setNodes'/2
				  (DomTree2, _cor9)
		  ( <_cor7> when 'true' ->
			primop 'match_fail'
			    ({'badmatch',_cor7})
		    -| ['compiler_generated'] )
		end
'lookup'/2 =
    %% Line 269
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{Field,Key},Table>
	      when call 'erlang':'is_integer'
		    (Key) ->
	      let <WD> =
		  %% Line 270
		  apply 'lookup_table'/2
		      (Key, Table)
	      in  %% Line 271
		  case Field of
		    %% Line 272
		    <'ancestor'> when 'true' ->
			( case WD of
			    ( <( {'workDataCell',_cor13,_cor14,_cor15,_rec2,_cor16,_cor17,_cor18}
				 -| ['compiler_generated'] )> when 'true' ->
				  _rec2
			      -| ['compiler_generated'] )
			    ( <_cor19> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','workDataCell'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 273
		    <'best'> when 'true' ->
			( case WD of
			    ( <( {'workDataCell',_cor20,_cor21,_cor22,_cor23,_rec3,_cor24,_cor25}
				 -| ['compiler_generated'] )> when 'true' ->
				  _rec3
			      -| ['compiler_generated'] )
			    ( <_cor26> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','workDataCell'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 274
		    <'bucket'> when 'true' ->
			( case WD of
			    ( <( {'workDataCell',_cor27,_cor28,_cor29,_cor30,_cor31,_cor32,_rec4}
				 -| ['compiler_generated'] )> when 'true' ->
				  _rec4
			      -| ['compiler_generated'] )
			    ( <_cor33> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','workDataCell'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 275
		    <'dfnum'> when 'true' ->
			( case WD of
			    ( <( {'workDataCell',_rec5,_cor34,_cor35,_cor36,_cor37,_cor38,_cor39}
				 -| ['compiler_generated'] )> when 'true' ->
				  _rec5
			      -| ['compiler_generated'] )
			    ( <_cor40> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','workDataCell'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 276
		    <'dfparent'> when 'true' ->
			( case WD of
			    ( <( {'workDataCell',_cor41,_rec6,_cor42,_cor43,_cor44,_cor45,_cor46}
				 -| ['compiler_generated'] )> when 'true' ->
				  _rec6
			      -| ['compiler_generated'] )
			    ( <_cor47> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','workDataCell'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 277
		    <'samedom'> when 'true' ->
			( case WD of
			    ( <( {'workDataCell',_cor48,_cor49,_cor50,_cor51,_cor52,_rec7,_cor53}
				 -| ['compiler_generated'] )> when 'true' ->
				  _rec7
			      -| ['compiler_generated'] )
			    ( <_cor54> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','workDataCell'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    %% Line 278
		    <'semi'> when 'true' ->
			( case WD of
			    ( <( {'workDataCell',_cor55,_cor56,_rec8,_cor57,_cor58,_cor59,_cor60}
				 -| ['compiler_generated'] )> when 'true' ->
				  _rec8
			      -| ['compiler_generated'] )
			    ( <_cor61> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','workDataCell'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		    ( <_cor10> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor10})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11})
		  -| [{'function_name',{'lookup',2}}] )
	    -| ['compiler_generated'] )
	end
'lookup_table'/2 =
    %% Line 281
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Key,Table>
	      when call 'erlang':'is_integer'
		    (Key) ->
	      %% Line 282
	      case call 'gb_trees':'lookup'
		       (Key, Table) of
		%% Line 283
		<{'value',Data}> when 'true' ->
		    %% Line 284
		    Data
		%% Line 285
		<'none'> when 'true' ->
		    %% Line 286
		    {'workDataCell',0,'none','none','none','none','none',[]}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor2})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'lookup_table',2}}] )
	    -| ['compiler_generated'] )
	end
'update'/3 =
    %% Line 302
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Key,{Field,Value},Table> when 'true' ->
	      let <_cor3> =
		  %% Line 303
		  apply 'lookup_table'/2
		      (Key, Table)
	      in  let <_cor4> =
		      %% Line 303
		      apply 'updateCell'/3
			  (Value, Field, _cor3)
		  in  %% Line 303
		      call 'gb_trees':'enter'
			  (Key, _cor4, Table)
	  %% Line 304
	  <Key,List,Table> when 'true' ->
	      let <_cor5> =
		  %% Line 305
		  apply 'lookup_table'/2
		      (Key, Table)
	      in  let <_cor6> =
		      %% Line 305
		      apply 'update'/2
			  (List, _cor5)
		  in  %% Line 305
		      call 'gb_trees':'enter'
			  (Key, _cor6, Table)
	end
'update'/2 =
    %% Line 307
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Field,Value}|T],WD> when 'true' ->
	      let <_cor2> =
		  %% Line 308
		  apply 'updateCell'/3
		      (Value, Field, WD)
	      in  %% Line 308
		  apply 'update'/2
		      (T, _cor2)
	  %% Line 309
	  <[],WD> when 'true' ->
	      WD
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'update',2}}] )
	    -| ['compiler_generated'] )
	end
'updateCell'/3 =
    %% Line 311
    fun (_cor2,_cor1,_cor0) ->
	%% Line 312
	case _cor1 of
	  %% Line 313
	  <'dfnum'> when 'true' ->
	      case _cor0 of
		<{'workDataCell',_cor21,_cor22,_cor23,_cor24,_cor25,_cor26,_cor27}> when 'true' ->
		    call 'erlang':'setelement'
			(2, _cor0, _cor2)
		( <_cor28> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','workDataCell'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 314
	  <'dfparent'> when 'true' ->
	      case _cor0 of
		<{'workDataCell',_cor29,_cor30,_cor31,_cor32,_cor33,_cor34,_cor35}> when 'true' ->
		    call 'erlang':'setelement'
			(3, _cor0, _cor2)
		( <_cor36> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','workDataCell'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 315
	  <'semi'> when 'true' ->
	      case _cor0 of
		<{'workDataCell',_cor37,_cor38,_cor39,_cor40,_cor41,_cor42,_cor43}> when 'true' ->
		    call 'erlang':'setelement'
			(4, _cor0, _cor2)
		( <_cor44> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','workDataCell'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 316
	  <'ancestor'> when 'true' ->
	      case _cor0 of
		<{'workDataCell',_cor45,_cor46,_cor47,_cor48,_cor49,_cor50,_cor51}> when 'true' ->
		    call 'erlang':'setelement'
			(5, _cor0, _cor2)
		( <_cor52> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','workDataCell'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 317
	  <'best'> when 'true' ->
	      case _cor0 of
		<{'workDataCell',_cor53,_cor54,_cor55,_cor56,_cor57,_cor58,_cor59}> when 'true' ->
		    call 'erlang':'setelement'
			(6, _cor0, _cor2)
		( <_cor60> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','workDataCell'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 318
	  <'samedom'> when 'true' ->
	      case _cor0 of
		<{'workDataCell',_cor61,_cor62,_cor63,_cor64,_cor65,_cor66,_cor67}> when 'true' ->
		    call 'erlang':'setelement'
			(7, _cor0, _cor2)
		( <_cor68> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','workDataCell'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 319
	  <'bucket'> when 'true' ->
	      case _cor0 of
		<{'workDataCell',_cor69,_cor70,_cor71,_cor72,_cor73,_cor74,_cor75}> when 'true' ->
		    call 'erlang':'setelement'
			(8, _cor0, _cor2)
		( <_cor76> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','workDataCell'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  ( <_cor17> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor17})
	    -| ['compiler_generated'] )
	end
'dfs'/1 =
    %% Line 332
    fun (_cor0) ->
	let <_cor3> =
	    %% Line 333
	    call 'hipe_gen_cfg':'start_label'
		(_cor0)
	in  let <_cor2> =
		%% Line 334
		call 'gb_trees':'empty'
		    ()
	    in  let <_cor1> =
		    %% Line 334
		    call 'gb_trees':'empty'
			()
		in  %% Line 333
		    case apply 'dfs'/6
			     (_cor0, _cor3, %% Line 334
					    'none', %% Line 334
						    1, _cor2, _cor1) of
		      <{WorkData,DFS,N}> when 'true' ->
			  let <_cor5> =
			      %% Line 335
			      call 'erlang':'-'
				  (N, 1)
			  in  %% Line 335
			      {WorkData,DFS,_cor5}
		      ( <_cor4> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor4})
			-| ['compiler_generated'] )
		    end
'dfs'/6 =
    %% Line 337
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 338
	case apply 'lookup'/2
		 ({'dfnum',_cor4}, _cor1) of
	  %% Line 339
	  <0> when 'true' ->
	      let <WorkData2> =
		  %% Line 340
		  apply 'update'/3
		      (_cor4, [{'dfnum',_cor2}|[{'dfparent',_cor3}|%% Line 341
								   [{'semi',_cor4}|[{'best',_cor4}|[]]]]], _cor1)
	      in  let <DFS2> =
		      %% Line 342
		      call 'gb_trees':'enter'
			  (_cor2, _cor4, _cor0)
		  in  let <_cor9> =
			  %% Line 343
			  call 'hipe_gen_cfg':'succ'
			      (_cor5, _cor4)
		      in  let <_cor8> =
			      %% Line 344
			      call 'erlang':'+'
				  (_cor2, 1)
			  in  %% Line 343
			      apply 'dfsTraverse'/6
				  (_cor9, _cor5, _cor4, _cor8, %% Line 344
							       WorkData2, %% Line 344
									  DFS2)
	  %% Line 345
	  <_cor17> when 'true' ->
	      {_cor1,_cor0,_cor2}
	end
'dfsTraverse'/6 =
    %% Line 364
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Node|T],CFG,Parent,N,WorkData,DFS> when 'true' ->
	      %% Line 365
	      case apply 'dfs'/6
		       (CFG, Node, Parent, N, WorkData, DFS) of
		<{WorkData2,DFS2,N2}> when 'true' ->
		    %% Line 366
		    apply 'dfsTraverse'/6
			(T, CFG, Parent, N2, WorkData2, DFS2)
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 367
	  <[],_cor13,_cor14,N,WorkData,DFS> when 'true' ->
	      {WorkData,DFS,N}
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'dfsTraverse',6}}] )
	    -| ['compiler_generated'] )
	end
'getIdoms'/5 =
    %% Line 384
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <CFG,DomData,WorkData,Index,DFS>
	      when let <_cor5> =
		    %% Line 385
		    call 'erlang':'is_integer'
			(Index)
		in  let <_cor6> =
			%% Line 385
			call 'erlang':'>'
			    (Index, 1)
		    in  %% Line 385
			call 'erlang':'and'
			    (_cor5, _cor6) ->
	      let <Node> =
		  %% Line 386
		  apply 'lookup_table'/2
		      (Index, DFS)
	      in  let <PredLst> =
		      %% Line 387
		      call 'hipe_gen_cfg':'pred'
			  (CFG, Node)
		  in  let <Par> =
			  %% Line 388
			  apply 'lookup'/2
			      ({'dfparent',Node}, WorkData)
		      in  let <DfNumN> =
			      %% Line 389
			      apply 'lookup'/2
				  ({'dfnum',Node}, WorkData)
			  in  %% Line 390
			      case apply 'getSemiDominator'/4
				       (PredLst, DfNumN, Par, WorkData) of
				<{S,WorkData2}> when 'true' ->
				    let <WorkData3> =
					%% Line 391
					apply 'update'/3
					    (Node, {'semi',S}, WorkData2)
				    in  let <OldBucket> =
					    %% Line 392
					    apply 'lookup'/2
						({'bucket',S}, WorkData3)
					in  let <WorkData4> =
						%% Line 393
						apply 'update'/3
						    (S, {'bucket',[Node|OldBucket]}, WorkData3)
					    in  let <WorkData5> =
						    %% Line 394
						    apply 'linkTrees'/3
							(Par, Node, WorkData4)
						in  let <_cor16> =
							%% Line 395
							apply 'lookup'/2
							    ({'bucket',Par}, WorkData5)
						    in  %% Line 395
							case apply 'filterBucket'/4
								 (_cor16, %% Line 396
									  Par, %% Line 396
									       WorkData5, %% Line 396
											  DomData) of
							  <{WorkData6,DomData2}> when 'true' ->
							      let <WorkData7> =
								  %% Line 397
								  apply 'update'/3
								      (Par, {'bucket',[]}, WorkData6)
							      in  let <_cor19> =
								      %% Line 398
								      call 'erlang':'-'
									  (Index, 1)
								  in  %% Line 398
								      apply 'getIdoms'/5
									  (CFG, DomData2, WorkData7, _cor19, DFS)
							  ( <_cor17> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_cor17})
							    -| ['compiler_generated'] )
							end
				( <_cor11> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_cor11})
				  -| ['compiler_generated'] )
			      end
	  %% Line 399
	  <_cor25,DomData,WorkData,1,_cor26> when 'true' ->
	      %% Line 400
	      {DomData,WorkData}
	  ( <_cor24,_cor23,_cor22,_cor21,_cor20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor24,_cor23,_cor22,_cor21,_cor20})
		  -| [{'function_name',{'getIdoms',5}}] )
	    -| ['compiler_generated'] )
	end
'getSemiDominator'/4 =
    %% Line 414
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Pred|Preds],DfNumChild,S,WorkData> when 'true' ->
	      let <_cor4> =
		  %% Line 416
		  apply 'lookup'/2
		      ({'dfnum',Pred}, WorkData)
	      in  let <Sp,WorkData3> =
		      %% Line 416
		      case <> of
			%% Line 417
			<>
			    when call 'erlang':'=<'
				  (_cor4,
				   DfNumChild) ->
			    %% Line 418
			    <Pred,WorkData>
			%% Line 419
			<> when 'true' ->
			    %% Line 420
			    case apply 'getAncestorWithLowestSemi'/2
				     (Pred, WorkData) of
			      <{AncLowSemi,WorkData2}> when 'true' ->
				  let <_cor6> =
				      %% Line 421
				      apply 'lookup'/2
					  ({'semi',AncLowSemi}, WorkData2)
				  in  <_cor6,%% Line 421
					     WorkData2>
			      ( <_cor5> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_cor5})
				-| ['compiler_generated'] )
			    end
		      end
		  in  let <_cor11> =
			  %% Line 423
			  apply 'lookup'/2
			      ({'dfnum',Sp}, WorkData3)
		      in  let <_cor10> =
			      %% Line 423
			      apply 'lookup'/2
				  ({'dfnum',S}, WorkData3)
			  in  let <_cor13> =
				  %% Line 423
				  case <> of
				    %% Line 424
				    <>
					when call 'erlang':'<'
					      (_cor11,
					       _cor10) ->
					Sp
				    %% Line 425
				    <> when 'true' ->
					S
				  end
			      in  %% Line 427
				  apply 'getSemiDominator'/4
				      (Preds, DfNumChild, _cor13, WorkData3)
	  %% Line 428
	  <[],_cor19,S,WorkData> when 'true' ->
	      %% Line 429
	      {S,WorkData}
	  ( <_cor18,_cor17,_cor16,_cor15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor18,_cor17,_cor16,_cor15})
		  -| [{'function_name',{'getSemiDominator',4}}] )
	    -| ['compiler_generated'] )
	end
'getAncestorWithLowestSemi'/2 =
    %% Line 444
    fun (_cor1,_cor0) ->
	let <Best> =
	    %% Line 445
	    apply 'lookup'/2
		({'best',_cor1}, _cor0)
	in  %% Line 446
	    case apply 'lookup'/2
		     ({'ancestor',_cor1}, _cor0) of
	      %% Line 447
	      <'none'> when 'true' ->
		  {Best,_cor0}
	      %% Line 448
	      <A> when 'true' ->
		  %% Line 449
		  case apply 'lookup'/2
			   ({'ancestor',A}, _cor0) of
		    %% Line 450
		    <'none'> when 'true' ->
			%% Line 451
			{Best,_cor0}
		    %% Line 452
		    <_cor17> when 'true' ->
			%% Line 453
			case apply 'getAncestorWithLowestSemi'/2
				 (A, _cor0) of
			  <{B,WorkData2}> when 'true' ->
			      let <AncA> =
				  %% Line 454
				  apply 'lookup'/2
				      ({'ancestor',A}, WorkData2)
			      in  let <WorkData3> =
				      %% Line 455
				      apply 'update'/3
					  (_cor1, {'ancestor',AncA}, WorkData2)
				  in  let <_cor6> =
					  %% Line 456
					  apply 'lookup'/2
					      ({'semi',B}, WorkData3)
				      in  let <DfSemiB> =
					      %% Line 456
					      apply 'lookup'/2
						  ({'dfnum',_cor6}, WorkData3)
					  in  let <BestN> =
						  %% Line 457
						  apply 'lookup'/2
						      ({'best',_cor1}, WorkData3)
					      in  let <SemiB> =
						      %% Line 458
						      apply 'lookup'/2
							  ({'semi',BestN}, WorkData3)
						  in  let <DfSemiBestN> =
							  %% Line 459
							  apply 'lookup'/2
							      ({'dfnum',SemiB}, WorkData3)
						      in  %% Line 460
							  case <> of
							    %% Line 461
							    <>
								when call 'erlang':'<'
								      (DfSemiB,
								       DfSemiBestN) ->
								let <_cor11> =
								    %% Line 462
								    apply 'update'/3
									(_cor1, {'best',B}, WorkData3)
								in  %% Line 462
								    {B,_cor11}
							    %% Line 463
							    <> when 'true' ->
								%% Line 464
								{BestN,WorkData3}
							  end
			  ( <_cor3> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor3})
			    -| ['compiler_generated'] )
			end
		  end
	    end
'linkTrees'/3 =
    %% Line 481
    fun (_cor2,_cor1,_cor0) ->
	%% Line 482
	apply 'update'/3
	    (_cor1, [{'ancestor',_cor2}|[{'best',_cor1}|[]]], _cor0)
'filterBucket'/4 =
    %% Line 498
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Node|Nodes],Parent,WorkData,DomData> when 'true' ->
	      %% Line 499
	      case apply 'getAncestorWithLowestSemi'/2
		       (Node, WorkData) of
		<{Y,WorkData2}> when 'true' ->
		    let <_cor6> =
			%% Line 501
			apply 'lookup'/2
			    ({'semi',Y}, WorkData2)
		    in  let <_cor5> =
			    %% Line 501
			    apply 'lookup'/2
				({'semi',Node}, WorkData2)
			in  let <WorkData3,DomData2> =
				%% Line 501
				case <> of
				  %% Line 502
				  <>
				      when call 'erlang':'=:='
					    (_cor6,
					     _cor5) ->
				      let <_cor7> =
					  apply 'setIDom'/3
					      (Node, Parent, DomData)
				      in  <WorkData2,_cor7>
				  %% Line 503
				  <> when 'true' ->
				      let <_cor8> =
					  apply 'update'/3
					      (Node, {'samedom',Y}, WorkData2)
				      in  <_cor8,DomData>
				end
			    in  %% Line 505
				apply 'filterBucket'/4
				    (Nodes, Parent, WorkData3, DomData2)
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 506
	  <[],_cor16,WorkData,DomData> when 'true' ->
	      %% Line 507
	      {WorkData,DomData}
	  ( <_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'filterBucket',4}}] )
	    -| ['compiler_generated'] )
	end
'finalize'/5 =
    %% Line 523
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <WorkData,DomData,N,Max,DFS>
	      when call 'erlang':'=<'
		    (N,
		     Max) ->
	      let <Node> =
		  %% Line 524
		  apply 'lookup_table'/2
		      (N, DFS)
	      in  %% Line 525
		  case apply 'lookup'/2
			   ({'samedom',Node}, WorkData) of
		    %% Line 526
		    <'none'> when 'true' ->
			let <_cor6> =
			    %% Line 527
			    call 'erlang':'+'
				(N, 1)
			in  %% Line 527
			    apply 'finalize'/5
				(WorkData, DomData, _cor6, Max, DFS)
		    %% Line 528
		    <SameDomN> when 'true' ->
			%% Line 529
			case apply 'domTree_getIDom'/2
				 (SameDomN, DomData) of
			  %% Line 530
			  <IdomSameDomN>
			      when call 'erlang':'is_integer'
				    (IdomSameDomN) ->
			      let <DomData2> =
				  %% Line 531
				  apply 'setIDom'/3
				      (Node, IdomSameDomN, DomData)
			      in  let <_cor8> =
				      %% Line 532
				      call 'erlang':'+'
					  (N, 1)
				  in  %% Line 532
				      apply 'finalize'/5
					  (WorkData, DomData2, _cor8, Max, DFS)
			  ( <_cor9> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor9})
			    -| ['compiler_generated'] )
			end
		  end
	  %% Line 535
	  <_cor16,DomData,_cor17,_cor18,_cor19> when 'true' ->
	      %% Line 536
	      DomData
	end
'domTree_dominates'/3 =
    %% Line 549
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <Node1,_cor10,_X_DomTree>
	      when call 'erlang':'=:='
		    (_cor10,
		     Node1) ->
	      %% Line 550
	      'true'
	  %% Line 551
	  <Node1,Node2,DomTree> when 'true' ->
	      let <Children> =
		  %% Line 552
		  apply 'domTree_getChildren'/2
		      (Node1, DomTree)
	      in  let <_cor6> =
		      %% Line 553
		      ( fun (_cor4) ->
			    apply 'domTree_dominates'/3
				(_cor4, Node2, DomTree)
			-| [{'id',{0,0,'-domTree_dominates/3-fun-0-'}}] )
		  in  %% Line 553
		      call 'lists':'any'
			  (_cor6, Children)
	end
'domFrontier_create'/2 =
    %% Line 606
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 607
	    apply 'domTree_getRoot'/1
		(_cor0)
	in  let <_cor2> =
		%% Line 607
		apply 'df__empty'/0
		    ()
	    in  %% Line 607
		apply 'df_create'/4
		    (_cor3, _cor1, _cor0, _cor2)
'df_create'/4 =
    %% Line 609
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Children> =
	    %% Line 610
	    apply 'domTree_getChildren'/2
		(_cor3, _cor1)
	in  let <Succ> =
		%% Line 611
		call 'hipe_gen_cfg':'succ'
		    (_cor2, _cor3)
	    in  let <DF1> =
		    %% Line 612
		    apply 'checkIDomList'/4
			(Succ, _cor3, _cor1, _cor0)
		in  %% Line 613
		    apply 'makeDFChildren'/5
			(Children, _cor3, _cor2, _cor1, DF1)
'domFrontier_get'/2 =
    %% Line 625
    fun (_cor1,_cor0) ->
	%% Line 626
	case call 'gb_trees':'lookup'
		 (_cor1, _cor0) of
	  %% Line 627
	  <{'value',List}> when 'true' ->
	      List
	  %% Line 628
	  <'none'> when 'true' ->
	      []
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor2})
	    -| ['compiler_generated'] )
	end
'df__empty'/0 =
    %% Line 637
    fun () ->
	%% Line 638
	call 'gb_trees':'empty'
	    ()
'df__add_to_node'/3 =
    %% Line 650
    fun (_cor2,_cor1,_cor0) ->
	%% Line 651
	case call 'gb_trees':'lookup'
		 (_cor2, _cor0) of
	  %% Line 652
	  <{'value',DFList}> when 'true' ->
	      %% Line 653
	      case call 'lists':'member'
		       (_cor1, DFList) of
		%% Line 654
		<'true'> when 'true' ->
		    _cor0
		%% Line 656
		<'false'> when 'true' ->
		    %% Line 657
		    call 'gb_trees':'update'
			(_cor2, [_cor1|DFList], _cor0)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 659
	  <'none'> when 'true' ->
	      %% Line 660
	      call 'gb_trees':'insert'
		  (_cor2, [_cor1|[]], _cor0)
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'makeDFChildren'/5 =
    %% Line 676
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Child|T],Parent,SuccMap,DomTree,DF> when 'true' ->
	      let <DF1> =
		  %% Line 677
		  apply 'df_create'/4
		      (Child, SuccMap, DomTree, DF)
	      in  let <_cor6> =
		      %% Line 678
		      apply 'domFrontier_get'/2
			  (Child, DF1)
		  in  let <DF2> =
			  %% Line 678
			  apply 'checkIDomList'/4
			      (_cor6, Parent, DomTree, DF1)
		      in  %% Line 679
			  apply 'makeDFChildren'/5
			      (T, Parent, SuccMap, DomTree, DF2)
	  %% Line 680
	  <[],_cor13,_cor14,_cor15,DF> when 'true' ->
	      %% Line 681
	      DF
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'makeDFChildren',5}}] )
	    -| ['compiler_generated'] )
	end
'checkIDomList'/4 =
    %% Line 693
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Node|T],Parent,DomTree,DF> when 'true' ->
	      let <DF1> =
		  %% Line 694
		  apply 'checkIDom'/4
		      (Node, Parent, DomTree, DF)
	      in  %% Line 695
		  apply 'checkIDomList'/4
		      (T, Parent, DomTree, DF1)
	  %% Line 696
	  <[],_cor9,_cor10,DF> when 'true' ->
	      %% Line 697
	      DF
	  ( <_cor8,_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6,_cor5})
		  -| [{'function_name',{'checkIDomList',4}}] )
	    -| ['compiler_generated'] )
	end
'checkIDom'/4 =
    %% Line 709
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 710
	case apply 'domTree_getIDom'/2
		 (_cor3, _cor1) of
	  %% Line 711
	  <_cor9>
	      when call 'erlang':'=:='
		    (_cor9,
		     _cor2) ->
	      _cor0
	  %% Line 713
	  <'none'> when 'true' ->
	      _cor0
	  %% Line 715
	  <_cor10> when 'true' ->
	      %% Line 716
	      apply 'df__add_to_node'/3
		  (_cor2, _cor3, _cor0)
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_dominators')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_dominators', _cor0)
end