module 'hipe_icode_heap_test' ['cfg'/1,
			       'module_info'/0,
			       'module_info'/1]
    attributes [%% Line 301
		'type' =
		    %% Line 301
		    [{{'record','comp_servers'},[{'typed_record_field',{'record_field',301,{'atom',301,'pp_server'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'range'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'type'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}]]],[]}],
		%% Line 307
		'type' =
		    %% Line 307
		    [{'comp_option',{'type',307,'union',[{'type',307,'atom',[]}|[{'type',307,'tuple',[{'type',307,'atom',[]}|[{'type',307,'atom',[]}]]}]]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{'comp_options',{'type',308,'list',[{'type',308,'comp_option',[]}]},[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'hipe_architecture',{'type',311,'union',[{'atom',311,'amd64'}|[{'atom',311,'arm'}|[{'atom',311,'powerpc'}|[{'atom',311,'ppc64'}|[{'atom',311,'ultrasparc'}|[{'atom',311,'x86'}]]]]]]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{'hipe_map',{'type',313,'list',[{'type',313,'tuple',[{'type',313,'non_neg_integer',[]}|[{'type',314,'union',[{'atom',314,'unknown'}|[{'type',314,'tuple',[{'type',314,'union',[{'atom',314,'reg'}|[{'atom',314,'fp_reg'}|[{'atom',314,'spill'}]]]}|[{'type',315,'non_neg_integer',[]}]]}]]}]]}]},[]}],
		%% Line 316
		'type' =
		    %% Line 316
		    [{'hipe_temp_map',{'type',316,'tuple','any'},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{'hipe_spill_map',{'type',317,'list',[{'type',317,'tuple',[{'type',317,'non_neg_integer',[]}|[{'type',317,'tuple',[{'atom',317,'spill'}|[{'type',317,'non_neg_integer',[]}]]}]]}]},[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{'simple_const',{'type',35,'union',[{'type',35,'atom',[]}|[{'type',35,'nil',[]}|[{'type',35,'integer',[]}|[{'type',35,'float',[]}]]]]},[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{'structured_const',{'type',36,'union',[{'type',36,'list',[]}|[{'type',36,'tuple','any'}]]},[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{'icode_lbl',{'type',38,'non_neg_integer',[]},[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','flat'},[{'typed_record_field',{'record_field',44,{'atom',44,'value'}},{'type',44,'union',[{'atom',44,'undefined'}|[{'type',44,'simple_const',[]}|[{'type',44,'structured_const',[]}|[{'type',44,'binary',[]}]]]]}}],[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{{'record','icode_const'},[{'typed_record_field',{'record_field',46,{'atom',46,'value'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'record',[{'atom',46,'flat'}]}]]}}],[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'variable_annotation',{'type',48,'tuple',[{'type',48,'atom',[]}|[{'type',48,'any',[]}|[{'type',48,'fun',[{'type',48,'product',[{'type',48,'any',[]}]}|[{'type',48,'string',[]}]]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','icode_variable'},[{'typed_record_field',{'record_field',50,{'atom',50,'name'}},{'type',50,'union',[{'atom',50,'undefined'}|[{'type',50,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'kind'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'atom',51,'var'}|[{'atom',51,'reg'}|[{'atom',51,'fvar'}]]]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'annotation'},{'nil',52}},{'type',52,'union',[{'type',52,'nil',[]}|[{'type',52,'variable_annotation',[]}]]}}]]],[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'icode_if_op',{'type',58,'union',[{'atom',58,'>'}|[{'atom',58,'<'}|[{'atom',58,'>='}|[{'atom',58,'=<'}|[{'atom',58,'=:='}|[{'atom',58,'=/='}|[{'atom',58,'=='}|[{'atom',58,'/='}|[{'atom',59,'fixnum_eq'}|[{'atom',59,'fixnum_neq'}|[{'atom',59,'fixnum_lt'}|[{'atom',60,'fixnum_le'}|[{'atom',60,'fixnum_ge'}|[{'atom',60,'fixnum_gt'}|[{'atom',61,'op_exact_eqeq_2'}|[{'atom',61,'suspend_msg_timeout'}]]]]]]]]]]]]]]]]},[]}],
		%% Line 63
		'type' =
		    %% Line 63
		    [{'icode_type_test',{'type',63,'union',[{'atom',63,'atom'}|[{'atom',63,'bignum'}|[{'atom',63,'binary'}|[{'atom',63,'bitstr'}|[{'atom',63,'boolean'}|[{'atom',64,'cons'}|[{'atom',64,'fixnum'}|[{'atom',64,'float'}|[{'atom',64,'function'}|[{'atom',65,'function2'}|[{'atom',65,'integer'}|[{'atom',65,'list'}|[{'atom',65,'map'}|[{'atom',65,'nil'}|[{'atom',66,'number'}|[{'atom',66,'pid'}|[{'atom',66,'port'}|[{'atom',66,'reference'}|[{'atom',66,'tuple'}|[{'type',67,'tuple',[{'atom',67,'atom'}|[{'type',67,'atom',[]}]]}|[{'type',67,'tuple',[{'atom',67,'integer'}|[{'type',67,'integer',[]}]]}|[{'type',68,'tuple',[{'atom',68,'record'}|[{'type',68,'atom',[]}|[{'type',68,'non_neg_integer',[]}]]]}|[{'type',69,'tuple',[{'atom',69,'tuple'}|[{'type',69,'non_neg_integer',[]}]]}]]]]]]]]]]]]]]]]]]]]]]]},[]}],
		%% Line 71
		'type' =
		    %% Line 71
		    [{'icode_primop',{'type',71,'union',[{'type',71,'atom',[]}|[{'type',71,'tuple','any'}]]},[]}],
		%% Line 72
		'type' =
		    %% Line 72
		    [{'icode_funcall',{'type',72,'union',[{'type',72,'mfa',[]}|[{'type',72,'icode_primop',[]}]]},[]}],
		%% Line 74
		'type' =
		    %% Line 74
		    [{'icode_var',{'type',74,'record',[{'atom',74,'icode_variable'}|[{'type',74,'field_type',[{'atom',74,'kind'}|[{'atom',74,'var'}]]}]]},[]}],
		%% Line 75
		'type' =
		    %% Line 75
		    [{'icode_reg',{'type',75,'record',[{'atom',75,'icode_variable'}|[{'type',75,'field_type',[{'atom',75,'kind'}|[{'atom',75,'reg'}]]}]]},[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{'icode_fvar',{'type',76,'record',[{'atom',76,'icode_variable'}|[{'type',76,'field_type',[{'atom',76,'kind'}|[{'atom',76,'fvar'}]]}]]},[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{'icode_argument',{'type',77,'union',[{'type',77,'record',[{'atom',77,'icode_const'}]}|[{'type',77,'record',[{'atom',77,'icode_variable'}]}]]},[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{'icode_term_arg',{'type',78,'union',[{'type',78,'icode_var',[]}|[{'type',78,'record',[{'atom',78,'icode_const'}]}]]},[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{'icode_switch_case',{'type',80,'tuple',[{'type',80,'record',[{'atom',80,'icode_const'}]}|[{'type',80,'icode_lbl',[]}]]},[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{'icode_call_type',{'type',82,'union',[{'atom',82,'local'}|[{'atom',82,'primop'}|[{'atom',82,'remote'}]]]},[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{'icode_exit_class',{'type',83,'union',[{'atom',83,'error'}|[{'atom',83,'exit'}|[{'atom',83,'rethrow'}|[{'atom',83,'throw'}]]]]},[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{'icode_comment_text',{'type',85,'union',[{'type',85,'atom',[]}|[{'type',85,'string',[]}]]},[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{'icode_info',{'type',87,'list',[{'type',87,'tuple',[{'atom',87,'arg_types'}|[{'type',87,'list',[{'remote_type',87,[{'atom',87,'erl_types'}|[{'atom',87,'erl_type'}|[[]]]]}]}]]}]},[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','icode_label'},[{'typed_record_field',{'record_field',93,{'atom',93,'name'}},{'type',93,'union',[{'atom',93,'undefined'}|[{'type',93,'icode_lbl',[]}]]}}],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','icode_if'},[{'typed_record_field',{'record_field',95,{'atom',95,'op'}},{'type',95,'union',[{'atom',95,'undefined'}|[{'type',95,'icode_if_op',[]}]]}}|[{'typed_record_field',{'record_field',96,{'atom',96,'args'}},{'type',96,'union',[{'atom',96,'undefined'}|[{'type',96,'list',[{'type',96,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',97,{'atom',97,'true_label'}},{'type',97,'union',[{'atom',97,'undefined'}|[{'type',97,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',98,{'atom',98,'false_label'}},{'type',98,'union',[{'atom',98,'undefined'}|[{'type',98,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',99,{'atom',99,'p'}},{'type',99,'union',[{'atom',99,'undefined'}|[{'type',99,'float',[]}]]}}]]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','icode_switch_val'},[{'typed_record_field',{'record_field',101,{'atom',101,'term'}},{'type',101,'union',[{'atom',101,'undefined'}|[{'type',101,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',102,{'atom',102,'fail_label'}},{'type',102,'union',[{'atom',102,'undefined'}|[{'type',102,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',103,{'atom',103,'length'}},{'type',103,'union',[{'atom',103,'undefined'}|[{'type',103,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',104,{'atom',104,'cases'}},{'type',104,'union',[{'atom',104,'undefined'}|[{'type',104,'list',[{'type',104,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','icode_switch_tuple_arity'},[{'typed_record_field',{'record_field',106,{'atom',106,'term'}},{'type',106,'union',[{'atom',106,'undefined'}|[{'type',106,'icode_var',[]}]]}}|[{'typed_record_field',{'record_field',107,{'atom',107,'fail_label'}},{'type',107,'union',[{'atom',107,'undefined'}|[{'type',107,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',108,{'atom',108,'length'}},{'type',108,'union',[{'atom',108,'undefined'}|[{'type',108,'non_neg_integer',[]}]]}}|[{'typed_record_field',{'record_field',109,{'atom',109,'cases'}},{'type',109,'union',[{'atom',109,'undefined'}|[{'type',109,'list',[{'type',109,'icode_switch_case',[]}]}]]}}]]]],[]}],
		%% Line 111
		'type' =
		    %% Line 111
		    [{{'record','icode_type'},[{'typed_record_field',{'record_field',111,{'atom',111,'test'}},{'type',111,'union',[{'atom',111,'undefined'}|[{'type',111,'icode_type_test',[]}]]}}|[{'typed_record_field',{'record_field',112,{'atom',112,'args'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'list',[{'type',112,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',113,{'atom',113,'true_label'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'false_label'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'p'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'float',[]}]]}}]]]]],[]}],
		%% Line 117
		'type' =
		    %% Line 117
		    [{{'record','icode_goto'},[{'typed_record_field',{'record_field',117,{'atom',117,'label'}},{'type',117,'union',[{'atom',117,'undefined'}|[{'type',117,'icode_lbl',[]}]]}}],[]}],
		%% Line 119
		'type' =
		    %% Line 119
		    [{{'record','icode_move'},[{'typed_record_field',{'record_field',119,{'atom',119,'dst'}},{'type',119,'union',[{'atom',119,'undefined'}|[{'type',119,'record',[{'atom',119,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',120,{'atom',120,'src'}},{'type',120,'union',[{'atom',120,'undefined'}|[{'type',120,'record',[{'atom',120,'icode_variable'}]}|[{'type',120,'record',[{'atom',120,'icode_const'}]}]]]}}]],[]}],
		%% Line 122
		'type' =
		    %% Line 122
		    [{{'record','icode_phi'},[{'typed_record_field',{'record_field',122,{'atom',122,'dst'}},{'type',122,'union',[{'atom',122,'undefined'}|[{'type',122,'record',[{'atom',122,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',123,{'atom',123,'id'}},{'type',123,'union',[{'atom',123,'undefined'}|[{'type',123,'record',[{'atom',123,'icode_variable'}]}]]}}|[{'typed_record_field',{'record_field',124,{'atom',124,'arglist'}},{'type',124,'union',[{'atom',124,'undefined'}|[{'type',124,'list',[{'type',124,'tuple',[{'type',124,'icode_lbl',[]}|[{'type',124,'record',[{'atom',124,'icode_variable'}]}]]}]}]]}}]]],[]}],
		%% Line 126
		'type' =
		    %% Line 126
		    [{{'record','icode_call'},[{'typed_record_field',{'record_field',126,{'atom',126,'dstlist'}},{'type',126,'union',[{'atom',126,'undefined'}|[{'type',126,'list',[{'type',126,'record',[{'atom',126,'icode_variable'}]}]}]]}}|[{'typed_record_field',{'record_field',127,{'atom',127,'fun'}},{'type',127,'union',[{'atom',127,'undefined'}|[{'type',127,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',128,{'atom',128,'args'}},{'type',128,'union',[{'atom',128,'undefined'}|[{'type',128,'list',[{'type',128,'icode_argument',[]}]}]]}}|[{'typed_record_field',{'record_field',129,{'atom',129,'type'}},{'type',129,'union',[{'atom',129,'undefined'}|[{'type',129,'icode_call_type',[]}]]}}|[{'typed_record_field',{'record_field',130,{'atom',130,'continuation'}},{'type',130,'union',[{'atom',130,'undefined'}|[{'type',130,'nil',[]}|[{'type',130,'icode_lbl',[]}]]]}}|[{'typed_record_field',{'record_field',131,{'atom',131,'fail_label'},{'nil',131}},{'type',131,'union',[{'type',131,'nil',[]}|[{'type',131,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',132,{'atom',132,'in_guard'},{'atom',132,'false'}},{'type',132,'boolean',[]}}]]]]]]],[]}],
		%% Line 134
		'type' =
		    %% Line 134
		    [{{'record','icode_enter'},[{'typed_record_field',{'record_field',134,{'atom',134,'fun'}},{'type',134,'union',[{'atom',134,'undefined'}|[{'type',134,'icode_funcall',[]}]]}}|[{'typed_record_field',{'record_field',135,{'atom',135,'args'}},{'type',135,'union',[{'atom',135,'undefined'}|[{'type',135,'list',[{'type',135,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',136,{'atom',136,'type'}},{'type',136,'union',[{'atom',136,'undefined'}|[{'type',136,'icode_call_type',[]}]]}}]]],[]}],
		%% Line 138
		'type' =
		    %% Line 138
		    [{{'record','icode_return'},[{'typed_record_field',{'record_field',138,{'atom',138,'vars'}},{'type',138,'union',[{'atom',138,'undefined'}|[{'type',138,'list',[{'type',138,'icode_var',[]}]}]]}}],[]}],
		%% Line 140
		'type' =
		    %% Line 140
		    [{{'record','icode_begin_try'},[{'typed_record_field',{'record_field',140,{'atom',140,'label'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}|[{'typed_record_field',{'record_field',140,{'atom',140,'successor'}},{'type',140,'union',[{'atom',140,'undefined'}|[{'type',140,'icode_lbl',[]}]]}}]],[]}],
		%% Line 142
		'type' =
		    %% Line 142
		    [{{'record','icode_end_try'},[],[]}],
		%% Line 144
		'type' =
		    %% Line 144
		    [{{'record','icode_begin_handler'},[{'typed_record_field',{'record_field',144,{'atom',144,'dstlist'}},{'type',144,'union',[{'atom',144,'undefined'}|[{'type',144,'list',[{'type',144,'icode_var',[]}]}]]}}],[]}],
		%% Line 147
		'type' =
		    %% Line 147
		    [{{'record','icode_fail'},[{'typed_record_field',{'record_field',147,{'atom',147,'class'}},{'type',147,'union',[{'atom',147,'undefined'}|[{'type',147,'icode_exit_class',[]}]]}}|[{'typed_record_field',{'record_field',148,{'atom',148,'args'}},{'type',148,'union',[{'atom',148,'undefined'}|[{'type',148,'list',[{'type',148,'icode_term_arg',[]}]}]]}}|[{'typed_record_field',{'record_field',149,{'atom',149,'fail_label'},{'nil',149}},{'type',149,'union',[{'type',149,'nil',[]}|[{'type',149,'icode_lbl',[]}]]}}]]],[]}],
		%% Line 151
		'type' =
		    %% Line 151
		    [{{'record','icode_comment'},[{'typed_record_field',{'record_field',151,{'atom',151,'text'}},{'type',151,'union',[{'atom',151,'undefined'}|[{'type',151,'icode_comment_text',[]}]]}}],[]}],
		%% Line 157
		'type' =
		    %% Line 157
		    [{'icode_instr',{'type',157,'union',[{'type',157,'record',[{'atom',157,'icode_begin_handler'}]}|[{'type',157,'record',[{'atom',157,'icode_begin_try'}]}|[{'type',158,'record',[{'atom',158,'icode_call'}]}|[{'type',158,'record',[{'atom',158,'icode_comment'}]}|[{'type',158,'record',[{'atom',158,'icode_end_try'}]}|[{'type',159,'record',[{'atom',159,'icode_enter'}]}|[{'type',159,'record',[{'atom',159,'icode_fail'}]}|[{'type',160,'record',[{'atom',160,'icode_goto'}]}|[{'type',160,'record',[{'atom',160,'icode_if'}]}|[{'type',160,'record',[{'atom',160,'icode_label'}]}|[{'type',161,'record',[{'atom',161,'icode_move'}]}|[{'type',161,'record',[{'atom',161,'icode_phi'}]}|[{'type',161,'record',[{'atom',161,'icode_return'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_tuple_arity'}]}|[{'type',162,'record',[{'atom',162,'icode_switch_val'}]}|[{'type',163,'record',[{'atom',163,'icode_type'}]}]]]]]]]]]]]]]]]]},[]}],
		%% Line 164
		'type' =
		    %% Line 164
		    [{'icode_instrs',{'type',164,'list',[{'type',164,'icode_instr',[]}]},[]}],
		%% Line 170
		'type' =
		    %% Line 170
		    [{{'record','icode'},[{'typed_record_field',{'record_field',170,{'atom',170,'fun'}},{'type',170,'union',[{'atom',170,'undefined'}|[{'type',170,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',171,{'atom',171,'params'}},{'type',171,'union',[{'atom',171,'undefined'}|[{'type',171,'list',[{'type',171,'icode_var',[]}]}]]}}|[{'typed_record_field',{'record_field',172,{'atom',172,'is_closure'}},{'type',172,'union',[{'atom',172,'undefined'}|[{'type',172,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',173,{'atom',173,'closure_arity'}},{'type',173,'union',[{'atom',173,'undefined'}|[{'type',173,'arity',[]}]]}}|[{'typed_record_field',{'record_field',174,{'atom',174,'is_leaf'}},{'type',174,'union',[{'atom',174,'undefined'}|[{'type',174,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',175,{'atom',175,'code'},{'nil',175}},{'type',175,'icode_instrs',[]}}|[{'typed_record_field',{'record_field',176,{'atom',176,'data'}},{'type',176,'union',[{'atom',176,'undefined'}|[{'type',176,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',177,{'atom',177,'var_range'}},{'type',177,'union',[{'atom',177,'undefined'}|[{'type',177,'tuple',[{'type',177,'non_neg_integer',[]}|[{'type',177,'non_neg_integer',[]}]]}]]}}|[{'typed_record_field',{'record_field',178,{'atom',178,'label_range'}},{'type',178,'union',[{'atom',178,'undefined'}|[{'type',178,'tuple',[{'type',178,'icode_lbl',[]}|[{'type',178,'icode_lbl',[]}]]}]]}}|[{'typed_record_field',{'record_field',179,{'atom',179,'info'},{'nil',179}},{'type',179,'icode_info',[]}}]]]]]]]]]],[]}],
		%% Line 180
		'type' =
		    %% Line 180
		    [{'icode',{'type',180,'record',[{'atom',180,'icode'}]},[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','apply_N'},[{'typed_record_field',{'record_field',28,{'atom',28,'arity'}},{'type',28,'union',[{'atom',28,'undefined'}|[{'type',28,'arity',[]}]]}}],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','closure_element'},[{'typed_record_field',{'record_field',30,{'atom',30,'n'}},{'type',30,'union',[{'atom',30,'undefined'}|[{'type',30,'arity',[]}]]}}],[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{{'record','element'},[{'typed_record_field',{'record_field',32,{'atom',32,'typeinfo'}},{'type',32,'union',[{'atom',32,'undefined'}|[{'type',32,'list',[]}]]}}],[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','gc_test'},[{'typed_record_field',{'record_field',34,{'atom',34,'need'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'type',34,'non_neg_integer',[]}]]}}],[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{{'record','mkfun'},[{'typed_record_field',{'record_field',36,{'atom',36,'mfa'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'magic_num'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'integer',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'index'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'integer',[]}]]}}]]],[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','unsafe_element'},[{'typed_record_field',{'record_field',38,{'atom',38,'index'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'non_neg_integer',[]}]]}}],[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{{'record','unsafe_update_element'},[{'typed_record_field',{'record_field',40,{'atom',40,'index'}},{'type',40,'union',[{'atom',40,'undefined'}|[{'type',40,'non_neg_integer',[]}]]}}],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{'cfg_lbl',{'type',28,'non_neg_integer',[]},[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','cfg_info'},[{'typed_record_field',{'record_field',34,{'atom',34,'fun'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'type',34,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',35,{'atom',35,'start_label'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'cfg_lbl',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'is_closure'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',37,{'atom',37,'closure_arity'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'type',37,'arity',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'is_leaf'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'boolean',[]}]]}}|[{'record_field',39,{'atom',39,'params'}}|[{'record_field',40,{'atom',40,'info'},{'nil',40}}]]]]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'cfg_data',{'type',45,'tuple',[{'remote_type',45,[{'atom',45,'dict'}|[{'atom',45,'dict'}|[[]]]]}|[{'type',45,'list',[{'type',45,'cfg_lbl',[]}]}|[{'type',45,'non_neg_integer',[]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','cfg'},[{'typed_record_field',{'record_field',50,{'atom',50,'table'},{'call',50,{'remote',50,{'atom',50,'gb_trees'},{'atom',50,'empty'}},[]}},{'remote_type',50,[{'atom',50,'gb_trees'}|[{'atom',50,'tree'}|[[]]]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'info'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'type',51,'record',[{'atom',51,'cfg_info'}]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'data'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'cfg_data',[]}]]}}]]],[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{'cfg',{'type',53,'record',[{'atom',53,'cfg'}]},[]}],
		%% Line 48
		'spec' =
		    %% Line 48
		    [{{'cfg',1},[{'type',48,'fun',[{'type',48,'product',[{'type',48,'record',[{'atom',48,'cfg'}]}]}|[{'type',48,'record',[{'atom',48,'cfg'}]}]]}]}]]
'cfg'/1 =
    %% Line 50
    fun (_cor0) ->
	let <Icode> =
	    %% Line 51
	    call 'hipe_icode_cfg':'cfg_to_linear'
		(_cor0)
	in  let <Code> =
		%% Line 52
		call 'hipe_icode':'icode_code'
		    (Icode)
	    in  let <ActualVmax> =
		    %% Line 53
		    call 'hipe_icode':'highest_var'
			(Code)
		in  let <ActualLmax> =
			%% Line 54
			call 'hipe_icode':'highest_label'
			    (Code)
		    in  let <_cor5> =
			    %% Line 55
			    call 'erlang':'+'
				(ActualLmax, 1)
			in  do  %% Line 55
				call 'hipe_gensym':'set_label'
				    ('icode', _cor5)
				let <_cor6> =
				    %% Line 56
				    call 'erlang':'+'
					(ActualVmax, 1)
				in  do  %% Line 56
					call 'hipe_gensym':'set_var'
					    ('icode', _cor6)
					let <EBBs> =
					    %% Line 57
					    call 'hipe_icode_ebb':'cfg'
						(_cor0)
					in  %% Line 58
					    case apply 'ebbs'/3
						     (EBBs, [], _cor0) of
					      <{EBBcode,_X_Visited}> when 'true' ->
						  let <NewCode> =
						      %% Line 59
						      apply 'add_gc_tests'/1
							  (EBBcode)
						  in  let <NewIcode> =
							  %% Line 60
							  call 'hipe_icode':'icode_code_update'
							      (Icode, NewCode)
						      in  %% Line 61
							  call 'hipe_icode_cfg':'linear_to_cfg'
							      (NewIcode)
					      ( <_cor8> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor8})
						-| ['compiler_generated'] )
					    end
'ebbs'/3 =
    %% Line 65
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[EBB|EBBs],Visited,CFG> when 'true' ->
	      %% Line 66
	      case call 'hipe_icode_ebb':'type'
		       (EBB) of
		%% Line 67
		<'node'> when 'true' ->
		    let <L> =
			%% Line 68
			call 'hipe_icode_ebb':'node_label'
			    (EBB)
		    in  %% Line 69
			case apply 'visited'/2
				 (L, Visited) of
			  %% Line 70
			  <'true'> when 'true' ->
			      %% Line 71
			      apply 'ebbs'/3
				  (EBBs, Visited, CFG)
			  %% Line 72
			  <'false'> when 'true' ->
			      let <_cor4> =
				  %% Line 73
				  call 'hipe_icode_cfg':'bb'
				      (CFG, L)
			      in  let <EBBCode> =
				      %% Line 73
				      call 'hipe_bb':'code'
					  (_cor4)
				  in  %% Line 74
				      case call 'hipe_icode_ebb':'node_successors'
					       (EBB) of
					%% Line 75
					<[Succ|Succs]> when 'true' ->
					    %% Line 76
					    case %% Line 77
						 apply 'ebbs'/3
						     ([Succ|[]], [L|Visited], CFG) of
					      <{[SuccCode|More],Visited1}> when 'true' ->
						  let <_cor7> =
						      %% Line 79
						      call 'erlang':'++'
							  (Succs, EBBs)
						  in  %% Line 78
						      case %% Line 79
							   apply 'ebbs'/3
							       (_cor7, Visited1, CFG) of
							<{[OtherCode|MoreOther],Visited2}> when 'true' ->
							    let <_cor9> =
								%% Line 80
								call 'hipe_icode':'mk_label'
								    (L)
							    in  let <_cor10> =
								    %% Line 80
								    [_cor9|call 'erlang':'++'
									       (EBBCode, SuccCode)]
								in  let <_cor11> =
									%% Line 80
									[_cor10|%% Line 81
										call 'erlang':'++'
										    (More, [OtherCode|MoreOther])]
								    in  %% Line 80
									{_cor11,%% Line 82
										Visited2}
							( <_cor8> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor8})
							  -| ['compiler_generated'] )
						      end
					      ( <_cor6> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor6})
						-| ['compiler_generated'] )
					    end
					%% Line 83
					<[]> when 'true' ->
					    %% Line 84
					    case apply 'ebbs'/3
						     (EBBs, [L|Visited], CFG) of
					      <{OtherCode,Visited1}> when 'true' ->
						  let <_cor13> =
						      %% Line 85
						      call 'hipe_icode':'mk_label'
							  (L)
						  in  %% Line 85
						      {[[_cor13|EBBCode]|OtherCode],Visited1}
					      ( <_cor12> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor12})
						-| ['compiler_generated'] )
					    end
					( <_cor14> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor14})
					  -| ['compiler_generated'] )
				      end
			  ( <_cor15> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor15})
			    -| ['compiler_generated'] )
			end
		%% Line 88
		<'leaf'> when 'true' ->
		    %% Line 89
		    apply 'ebbs'/3
			(EBBs, Visited, CFG)
		( <_cor16> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor16})
		  -| ['compiler_generated'] )
	      end
	  %% Line 91
	  <[],Visited,_cor20> when 'true' ->
	      %% Line 92
	      {[[]],Visited}
	  ( <_cor19,_cor18,_cor17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor19,_cor18,_cor17})
		  -| [{'function_name',{'ebbs',3}}] )
	    -| ['compiler_generated'] )
	end
'visited'/2 =
    %% Line 94
    fun (_cor1,_cor0) ->
	%% Line 95
	call 'lists':'member'
	    (_cor1, _cor0)
'add_gc_tests'/1 =
    %% Line 97
    fun (_cor0) ->
	case _cor0 of
	  <[[]|EBBCodes]> when 'true' ->
	      apply 'add_gc_tests'/1
		  (EBBCodes)
	  %% Line 98
	  <[EBBCode|EBBCodes]> when 'true' ->
	      %% Line 99
	      case apply 'need'/3
		       (EBBCode, 0, []) of
		%% Line 100
		<{Need,RestCode,[Lbl|Code]}> when 'true' ->
		    %% Line 101
		    case <> of
		      <>
			  when call 'erlang':'>'
				(Need,
				 0) ->
			  let <_cor3> =
			      %% Line 102
			      apply 'gc_test'/1
				  (Need)
			  in  let <_cor1> =
				  %% Line 102
				  apply 'add_gc_tests'/1
				      ([RestCode|EBBCodes])
			      in  let <_cor2> =
				      %% Line 102
				      call 'erlang':'++'
					  (Code, _cor1)
				  in  let <_cor4> =
					  %% Line 102
					  call 'erlang':'++'
					      (_cor3, _cor2)
				      in  %% Line 102
					  [Lbl|_cor4]
		      %% Line 103
		      <> when 'true' ->
			  let <_cor5> =
			      %% Line 104
			      apply 'add_gc_tests'/1
				  ([RestCode|EBBCodes])
			  in  %% Line 104
			      [Lbl|call 'erlang':'++'
				       (Code, _cor5)]
		    end
		%% Line 106
		<{0,RestCode,[]}> when 'true' ->
		    %% Line 107
		    apply 'add_gc_tests'/1
			([RestCode|EBBCodes])
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 109
	  <[]> when 'true' ->
	      []
	  ( <_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7})
		  -| [{'function_name',{'add_gc_tests',1}}] )
	    -| ['compiler_generated'] )
	end
'need'/3 =
    %% Line 111
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[I|Is],Need,Code> when 'true' ->
	      %% Line 112
	      case apply 'split'/1
		       (I) of
		%% Line 113
		<'true'> when 'true' ->
		    %% Line 114
		    case I of
		      %% Line 115
		      <{'icode_call',_cor24,_cor25,_cor26,_cor27,_cor28,_cor29,_cor30}> when 'true' ->
			  %% Line 116
			  case call 'hipe_icode':'call_continuation'
				   (I) of
			    %% Line 117
			    <[]> when 'true' ->
				let <NewLab> =
				    %% Line 118
				    call 'hipe_icode':'mk_new_label'
					()
				in  let <LabName> =
					%% Line 119
					call 'hipe_icode':'label_name'
					    (NewLab)
				    in  let <NewCall> =
					    %% Line 120
					    call 'hipe_icode':'call_set_continuation'
						(I, LabName)
					in  let <_cor7> =
						%% Line 121
						apply 'need'/1
						    (I)
					    in  let <_cor8> =
						    %% Line 121
						    call 'erlang':'+'
							(Need, _cor7)
						in  let <_cor6> =
							%% Line 121
							call 'lists':'reverse'
							    ([NewCall|Code])
						    in  %% Line 121
							{_cor8,[NewLab|Is],_cor6}
			    %% Line 122
			    <_cor31> when 'true' ->
				let <_cor10> =
				    %% Line 123
				    apply 'need'/1
					(I)
				in  let <_cor11> =
					%% Line 123
					call 'erlang':'+'
					    (Need, _cor10)
				    in  let <_cor9> =
					    %% Line 123
					    call 'lists':'reverse'
						([I|Code])
					in  %% Line 123
					    {_cor11,Is,_cor9}
			  end
		      %% Line 125
		      <_cor32> when 'true' ->
			  let <_cor14> =
			      %% Line 126
			      apply 'need'/1
				  (I)
			  in  let <_cor15> =
				  %% Line 126
				  call 'erlang':'+'
				      (Need, _cor14)
			      in  let <_cor13> =
				      %% Line 126
				      call 'lists':'reverse'
					  ([I|Code])
				  in  %% Line 126
				      {_cor15,Is,_cor13}
		    end
		%% Line 128
		<'false'> when 'true' ->
		    let <_cor17> =
			%% Line 129
			apply 'need'/1
			    (I)
		    in  let <_cor18> =
			    %% Line 129
			    call 'erlang':'+'
				(Need, _cor17)
			in  %% Line 129
			    apply 'need'/3
				(Is, _cor18, [I|Code])
		( <_cor19> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor19})
		  -| ['compiler_generated'] )
	      end
	  %% Line 131
	  <[],Need,Code> when 'true' ->
	      let <_cor20> =
		  %% Line 132
		  call 'lists':'reverse'
		      (Code)
	      in  %% Line 132
		  {Need,[],_cor20}
	  ( <_cor23,_cor22,_cor21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor23,_cor22,_cor21})
		  -| [{'function_name',{'need',3}}] )
	    -| ['compiler_generated'] )
	end
'need'/1 =
    %% Line 134
    fun (_cor0) ->
	%% Line 135
	case _cor0 of
	  %% Line 136
	  <{'icode_call',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13}> when 'true' ->
	      let <_cor2> =
		  %% Line 137
		  call 'hipe_icode':'call_fun'
		      (_cor0)
	      in  let <_cor1> =
		      %% Line 137
		      call 'hipe_icode':'call_args'
			  (_cor0)
		  in  %% Line 137
		      apply 'primop_need'/2
			  (_cor2, _cor1)
	  %% Line 138
	  <{'icode_enter',_cor14,_cor15,_cor16}> when 'true' ->
	      let <_cor4> =
		  %% Line 139
		  call 'hipe_icode':'enter_fun'
		      (_cor0)
	      in  let <_cor3> =
		      %% Line 139
		      call 'hipe_icode':'enter_args'
			  (_cor0)
		  in  %% Line 139
		      apply 'primop_need'/2
			  (_cor4, _cor3)
	  %% Line 140
	  <_cor17> when 'true' ->
	      %% Line 141
	      0
	end
'primop_need'/2 =
    %% Line 144
    fun (_cor1,_cor0) ->
	%% Line 145
	case _cor1 of
	  %% Line 146
	  <'cons'> when 'true' ->
	      %% Line 147
	      2
	  %% Line 148
	  <'mktuple'> when 'true' ->
	      let <_cor2> =
		  %% Line 149
		  call 'erlang':'length'
		      (_cor0)
	      in  %% Line 149
		  call 'erlang':'+'
		      (_cor2, 1)
	  %% Line 150
	  <{'mkfun',_cor8,_cor9,_cor10}> when 'true' ->
	      let <NumFree> =
		  %% Line 151
		  call 'erlang':'length'
		      (_cor0)
	      in  let <_cor4> =
		      %% Line 152
		      call 'hipe_bifs':'get_rts_param'
			  (11)
		  in  %% Line 152
		      call 'erlang':'+'
			  (_cor4, NumFree)
	  %% Line 153
	  <'unsafe_tag_float'> when 'true' ->
	      %% Line 154
	      3
	  %% Line 155
	  <_cor11> when 'true' ->
	      %% Line 156
	      0
	end
'gc_test'/1 =
    %% Line 159
    fun (_cor0) ->
	let <L> =
	    %% Line 160
	    call 'hipe_icode':'mk_new_label'
		()
	in  let <_cor3> =
		%% Line 162
		call 'hipe_icode':'label_name'
		    (L)
	    in  let <_cor2> =
		    %% Line 163
		    call 'hipe_icode':'label_name'
			(L)
		in  let <_cor4> =
			%% Line 161
			call 'hipe_icode':'mk_primop'
			    ([], {'gc_test',_cor0}, [], _cor3, _cor2)
		    in  %% Line 161
			[_cor4|%% Line 164
			       [L|[]]]
'split'/1 =
    %% Line 166
    fun (_cor0) ->
	%% Line 167
	case _cor0 of
	  %% Line 168
	  <{'icode_call',_cor7,_cor8,_cor9,_cor10,_cor11,_cor12,_cor13}> when 'true' ->
	      let <_cor1> =
		  call 'hipe_icode':'call_fun'
		      (_cor0)
	      in  let <_cor2> =
		      apply 'known_heap_need'/1
			  (_cor1)
		  in  call 'erlang':'not'
			  (_cor2)
	  %% Line 169
	  <{'icode_enter',_cor14,_cor15,_cor16}> when 'true' ->
	      let <_cor3> =
		  call 'hipe_icode':'enter_fun'
		      (_cor0)
	      in  let <_cor4> =
		      apply 'known_heap_need'/1
			  (_cor3)
		  in  call 'erlang':'not'
			  (_cor4)
	  %% Line 170
	  <_cor17> when 'true' ->
	      'false'
	end
'known_heap_need'/1 =
    %% Line 173
    fun (_cor0) ->
	%% Line 174
	case _cor0 of
	  %% Line 176
	  <'cons'> when 'true' ->
	      'true'
	  %% Line 177
	  <'fcheckerror'> when 'true' ->
	      'true'
	  %% Line 178
	  <'fclearerror'> when 'true' ->
	      'true'
	  %% Line 179
	  <'fnegate'> when 'true' ->
	      'true'
	  %% Line 180
	  <'fp_add'> when 'true' ->
	      'true'
	  %% Line 181
	  <'fp_div'> when 'true' ->
	      'true'
	  %% Line 182
	  <'fp_mul'> when 'true' ->
	      'true'
	  %% Line 183
	  <'fp_sub'> when 'true' ->
	      'true'
	  %% Line 184
	  <'mktuple'> when 'true' ->
	      'true'
	  %% Line 185
	  <'unsafe_hd'> when 'true' ->
	      'true'
	  %% Line 186
	  <'unsafe_tag_float'> when 'true' ->
	      'true'
	  %% Line 187
	  <'unsafe_tl'> when 'true' ->
	      'true'
	  %% Line 188
	  <'unsafe_untag_float'> when 'true' ->
	      'true'
	  %% Line 189
	  <{'element',_cor3}> when 'true' ->
	      'true'
	  %% Line 190
	  <{'unsafe_element',_cor4}> when 'true' ->
	      'true'
	  %% Line 191
	  <{'unsafe_update_element',_cor5}> when 'true' ->
	      'true'
	  %% Line 194
	  <{'erlang','element',2}> when 'true' ->
	      'true'
	  %% Line 195
	  <{'erlang','length',1}> when 'true' ->
	      'true'
	  %% Line 196
	  <{'erlang','self',0}> when 'true' ->
	      'true'
	  %% Line 197
	  <{'erlang','size',1}> when 'true' ->
	      'true'
	  %% Line 199
	  <_cor6> when 'true' ->
	      'false'
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_icode_heap_test')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_icode_heap_test', _cor0)
end