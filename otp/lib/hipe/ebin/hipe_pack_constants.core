module 'hipe_pack_constants' ['find_const'/2,
			      'mk_data_relocs'/2,
			      'module_info'/0,
			      'module_info'/1,
			      'pack_constants'/2,
			      'slim_constmap'/1,
			      'slim_refs'/1,
			      'slim_sorted_exportmap'/3]
    attributes [%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 301
		'type' =
		    %% Line 301
		    [{{'record','comp_servers'},[{'typed_record_field',{'record_field',301,{'atom',301,'pp_server'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'range'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'type'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}]]],[]}],
		%% Line 307
		'type' =
		    %% Line 307
		    [{'comp_option',{'type',307,'union',[{'type',307,'atom',[]}|[{'type',307,'tuple',[{'type',307,'atom',[]}|[{'type',307,'atom',[]}]]}]]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{'comp_options',{'type',308,'list',[{'type',308,'comp_option',[]}]},[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'hipe_architecture',{'type',311,'union',[{'atom',311,'amd64'}|[{'atom',311,'arm'}|[{'atom',311,'powerpc'}|[{'atom',311,'ppc64'}|[{'atom',311,'ultrasparc'}|[{'atom',311,'x86'}]]]]]]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{'hipe_map',{'type',313,'list',[{'type',313,'tuple',[{'type',313,'non_neg_integer',[]}|[{'type',314,'union',[{'atom',314,'unknown'}|[{'type',314,'tuple',[{'type',314,'union',[{'atom',314,'reg'}|[{'atom',314,'fp_reg'}|[{'atom',314,'spill'}]]]}|[{'type',315,'non_neg_integer',[]}]]}]]}]]}]},[]}],
		%% Line 316
		'type' =
		    %% Line 316
		    [{'hipe_temp_map',{'type',316,'tuple','any'},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{'hipe_spill_map',{'type',317,'list',[{'type',317,'tuple',[{'type',317,'non_neg_integer',[]}|[{'type',317,'tuple',[{'atom',317,'spill'}|[{'type',317,'non_neg_integer',[]}]]}]]}]},[]}],
		%% Line 32
		'type' =
		    %% Line 32
		    [{'const_num',{'type',32,'non_neg_integer',[]},[]}],
		%% Line 33
		'type' =
		    %% Line 33
		    [{'raw_data',{'type',33,'union',[{'type',33,'binary',[]}|[{'type',33,'number',[]}|[{'type',33,'list',[]}|[{'type',33,'tuple','any'}]]]]},[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{'addr',{'type',35,'non_neg_integer',[]},[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{'ref_p',{'type',36,'tuple',[{'ann_type',36,[{'var',36,'DataPos'}|[{'type',36,'hipe_constlbl',[]}]]}|[{'ann_type',36,[{'var',36,'CodeOffset'}|[{'type',36,'addr',[]}]]}]]},[]}],
		%% Line 37
		'type' =
		    %% Line 37
		    [{'ref',{'type',37,'union',[{'type',37,'ref_p',[]}|[{'type',37,'tuple',[{'atom',37,'sorted'}|[{'ann_type',37,[{'var',37,'Base'}|[{'type',37,'addr',[]}]]}|[{'type',37,'list',[{'type',37,'ref_p',[]}]}]]]}]]},[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{'mfa_refs',{'type',39,'tuple',[{'type',39,'mfa',[]}|[{'type',39,'list',[{'type',39,'ref',[]}]}]]},[]}],
		%% Line 42
		'type' =
		    %% Line 42
		    [{'fa',{'type',42,'tuple',[{'type',42,'atom',[]}|[{'type',42,'arity',[]}]]},[]}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{'export_map',{'type',43,'list',[{'type',43,'tuple',[{'type',43,'addr',[]}|[{'type',43,'module',[]}|[{'type',43,'atom',[]}|[{'type',43,'arity',[]}]]]]}]},[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{{'record','pcm_entry'},[{'typed_record_field',{'record_field',45,{'atom',45,'mfa'}},{'type',45,'union',[{'atom',45,'undefined'}|[{'type',45,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',46,{'atom',46,'label'}},{'type',46,'union',[{'atom',46,'undefined'}|[{'type',46,'hipe_constlbl',[]}]]}}|[{'typed_record_field',{'record_field',47,{'atom',47,'const_num'}},{'type',47,'union',[{'atom',47,'undefined'}|[{'type',47,'const_num',[]}]]}}|[{'typed_record_field',{'record_field',48,{'atom',48,'start'}},{'type',48,'union',[{'atom',48,'undefined'}|[{'type',48,'addr',[]}]]}}|[{'typed_record_field',{'record_field',49,{'atom',49,'type'}},{'type',49,'union',[{'atom',49,'undefined'}|[{'integer',49,0}|[{'integer',49,1}|[{'integer',49,2}]]]]}}|[{'typed_record_field',{'record_field',50,{'atom',50,'raw_data'}},{'type',50,'union',[{'atom',50,'undefined'}|[{'type',50,'raw_data',[]}]]}}]]]]]],[]}],
		%% Line 51
		'type' =
		    %% Line 51
		    [{'pcm_entry',{'type',51,'record',[{'atom',51,'pcm_entry'}]},[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{'label_map',{'remote_type',53,[{'atom',53,'gb_trees'}|[{'atom',53,'tree'}|[[{'type',53,'tuple',[{'type',53,'mfa',[]}|[{'type',53,'hipe_constlbl',[]}]]}|[{'type',53,'addr',[]}]]]]]},[]}],
		%% Line 56
		'type' =
		    %% Line 56
		    [{'data_relocs',{'type',56,'list',[{'type',56,'ref',[]}]},[]}],
		%% Line 57
		'type' =
		    %% Line 57
		    [{'packed_const_map',{'type',57,'list',[{'type',57,'pcm_entry',[]}]},[]}],
		%% Line 58
		'type' =
		    %% Line 58
		    [{'mfa_refs_map',{'type',58,'list',[{'type',58,'mfa_refs',[]}]},[]}],
		%% Line 59
		'type' =
		    %% Line 59
		    [{'slim_export_map',{'type',59,'list',[{'type',59,'union',[{'type',59,'addr',[]}|[{'type',59,'module',[]}|[{'type',59,'atom',[]}|[{'type',59,'arity',[]}|[{'type',59,'boolean',[]}]]]]]}]},[]}],
		%% Line 63
		'spec' =
		    %% Line 63
		    [{{'pack_constants',2},[{'type',63,'fun',[{'type',63,'product',[{'type',63,'list',[{'type',63,'tuple',[{'type',63,'mfa',[]}|[{'type',63,'list',[{'var',63,'_'}]}|[{'type',63,'hipe_consttab',[]}]]]}]}|[{'type',63,'ct_alignment',[]}]]}|[{'type',64,'tuple',[{'type',64,'ct_alignment',[]}|[{'type',64,'non_neg_integer',[]}|[{'type',64,'packed_const_map',[]}|[{'type',64,'mfa_refs_map',[]}]]]]}]]}]}],
		%% Line 173
		'type' =
		    %% Line 173
		    [{'ref_type',{'type',173,'range',[{'integer',173,0}|[{'integer',173,4}]]},[]}],
		%% Line 175
		'spec' =
		    %% Line 175
		    [{{'slim_refs',1},[{'type',175,'fun',[{'type',175,'product',[{'type',175,'list',[{'type',175,'tuple',[{'type',175,'ref_type',[]}|[{'type',175,'non_neg_integer',[]}|[{'type',175,'term',[]}]]]}]}]}|[{'type',176,'list',[{'type',176,'tuple',[{'type',176,'ref_type',[]}|[{'type',176,'list',[{'type',176,'tuple',[{'type',176,'term',[]}|[{'type',176,'list',[{'type',176,'non_neg_integer',[]}]}]]}]}]]}]}]]}]}],
		%% Line 215
		'spec' =
		    %% Line 215
		    [{{'slim_constmap',1},[{'type',215,'fun',[{'type',215,'product',[{'type',215,'packed_const_map',[]}]}|[{'type',215,'list',[{'type',215,'raw_data',[]}]}]]}]}],
		%% Line 233
		'spec' =
		    %% Line 233
		    [{{'find_const',2},[{'type',233,'fun',[{'type',233,'product',[{'type',233,'tuple',[{'type',233,'mfa',[]}|[{'type',233,'hipe_constlbl',[]}]]}|[{'type',233,'packed_const_map',[]}]]}|[{'type',233,'const_num',[]}]]}]}],
		%% Line 251
		'spec' =
		    %% Line 251
		    [{{'mk_data_relocs',2},[{'type',251,'fun',[{'type',251,'product',[{'type',251,'mfa_refs_map',[]}|[{'type',251,'label_map',[]}]]}|[{'type',251,'data_relocs',[]}]]}]}],
		%% Line 276
		'spec' =
		    %% Line 276
		    [{{'slim_sorted_exportmap',3},[{'type',276,'fun',[{'type',276,'product',[{'type',276,'export_map',[]}|[{'type',276,'list',[{'type',276,'mfa',[]}]}|[{'type',276,'list',[{'type',276,'fa',[]}]}]]]}|[{'type',276,'slim_export_map',[]}]]}]}]]
'pack_constants'/2 =
    %% Line 66
    fun (_cor1,_cor0) ->
	%% Line 67
	apply 'pack_constants'/6
	    (_cor1, 0, _cor0, 0, [], [])
'pack_constants'/6 =
    %% Line 69
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{MFA,_cor17,ConstTab}|Rest],Size,Align,ConstNo,Acc,Refs> when 'true' ->
	      let <Labels> =
		  %% Line 70
		  call 'hipe_consttab':'labels'
		      (ConstTab)
	      in  %% Line 72
		  case %% Line 73
		       apply 'pack_labels'/8
			   (Labels, MFA, ConstTab, Size, Align, ConstNo, Acc, []) of
		    <{NewSize,NewAlign,Map,NewConstNo,RefToLabels}> when 'true' ->
			let <_cor9> =
			    %% Line 75
			    case RefToLabels of
			      %% Line 76
			      <[]> when 'true' ->
				  Refs
			      %% Line 77
			      <_cor18> when 'true' ->
				  [{MFA,RefToLabels}|Refs]
			    end
			in  %% Line 79
			    apply 'pack_constants'/6
				(Rest, NewSize, NewAlign, NewConstNo, Map, _cor9)
		    ( <_cor7> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor7})
		      -| ['compiler_generated'] )
		  end
	  %% Line 80
	  <[],Size,Align,_cor19,Acc,Refs> when 'true' ->
	      %% Line 81
	      {Align,Size,Acc,Refs}
	  ( <_cor16,_cor15,_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'pack_constants',6}}] )
	    -| ['compiler_generated'] )
	end
'pack_labels'/8 =
    %% Line 88
    fun (_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor7,_cor6,_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[{_X_Label,'ref'}|Labels],MFA,ConstTab,Size,Align,ConstNo,Acc,Refs> when 'true' ->
	      %% Line 89
	      apply 'pack_labels'/8
		  (Labels, MFA, ConstTab, Size, Align, ConstNo, Acc, Refs)
	  %% Line 90
	  <[Label|Labels],MFA,ConstTab,AccSize,OldAlign,ConstNo,Acc,Refs> when 'true' ->
	      let <Const> =
		  %% Line 91
		  call 'hipe_consttab':'lookup'
		      (Label, ConstTab)
	      in  let <Align> =
		      %% Line 92
		      call 'hipe_consttab':'const_align'
			  (Const)
		  in  let <NewAlign> =
			  %% Line 93
			  call 'erlang':'max'
			      (Align, OldAlign)
		      in  let <_cor13> =
			      %% Line 95
			      case call 'erlang':'rem'
				       (AccSize, Align) of
				%% Line 96
				<0> when 'true' ->
				    AccSize
				%% Line 97
				<N> when 'true' ->
				    let <_cor11> =
					call 'erlang':'-'
					    (Align, N)
				    in  call 'erlang':'+'
					    (AccSize, _cor11)
			      end
			  in  let <RawType> =
				  %% Line 100
				  call 'hipe_consttab':'const_type'
				      (Const)
			      in  let <_cor17> =
				      %% Line 101
				      case RawType of
					<'term'> when 'true' ->
					    0
					<'sorted_block'> when 'true' ->
					    2
					<'block'> when 'true' ->
					    1
					( <_cor16> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor16})
					  -| ['compiler_generated'] )
				      end
				  in  let <RawData> =
					  %% Line 102
					  call 'hipe_consttab':'const_data'
					      (Const)
				      in  %% Line 103
					  case RawType of
					    %% Line 104
					    <'term'> when 'true' ->
						%% Line 108
						case call 'lists':'keyfind'
							 (RawData, 7, Acc) of
						  %% Line 109
						  <'false'> when 'true' ->
						      let <NewInfo> =
							  %% Line 110
							  {'pcm_entry',MFA,Label,ConstNo,%% Line 111
											 0,_cor17,%% Line 111
												  RawData}
						      in  let <_cor21> =
							      %% Line 112
							      call 'erlang':'+'
								  (ConstNo, 1)
							  in  %% Line 112
							      apply 'pack_labels'/8
								  (Labels, MFA, ConstTab, AccSize, OldAlign, _cor21, %% Line 113
														     [NewInfo|Acc], %% Line 113
																    Refs)
						  %% Line 114
						  <{'pcm_entry',_cor49,_cor50,OtherConstNo,_cor51,_cor52,_cor53}>
						      when let <_cor54> =
							    call 'erlang':'=:='
								(_cor52, _cor17)
							in  let <_cor55> =
								call 'erlang':'=:='
								    (_cor53, RawData)
							    in  call 'erlang':'and'
								    (_cor54, _cor55) ->
						      let <NewInfo> =
							  %% Line 115
							  {'pcm_entry',MFA,Label,OtherConstNo,%% Line 116
											      0,_cor17,%% Line 116
												       RawData}
						      in  %% Line 117
							  apply 'pack_labels'/8
							      (Labels, MFA, ConstTab, AccSize, OldAlign, ConstNo, %% Line 118
														  [NewInfo|Acc], %% Line 118
																 Refs)
						  %% Line 119
						  <_cor56> when 'true' ->
						      let <NewInfo> =
							  %% Line 120
							  {'pcm_entry',MFA,Label,ConstNo,%% Line 121
											 0,_cor17,%% Line 121
												  RawData}
						      in  let <_cor24> =
							      %% Line 122
							      call 'erlang':'+'
								  (ConstNo, 1)
							  in  %% Line 122
							      apply 'pack_labels'/8
								  (Labels, MFA, ConstTab, AccSize, OldAlign, _cor24, %% Line 123
														     [NewInfo|Acc], %% Line 123
																    Refs)
						end
					    %% Line 125
					    <'sorted_block'> when 'true' ->
						let <Need> =
						    %% Line 126
						    call 'hipe_consttab':'const_size'
							(Const)
						in  let <NewInfo> =
							%% Line 127
							{'pcm_entry',MFA,Label,ConstNo,_cor13,_cor17,%% Line 128
												     RawData}
						    in  let <_cor29> =
							    %% Line 129
							    call 'erlang':'+'
								(_cor13, Need)
							in  let <_cor28> =
								%% Line 129
								call 'erlang':'+'
								    (ConstNo, 1)
							    in  %% Line 129
								apply 'pack_labels'/8
								    (Labels, MFA, ConstTab, _cor29, NewAlign, _cor28, %% Line 130
														      [NewInfo|Acc], %% Line 130
																     Refs)
					    %% Line 131
					    <'block'> when 'true' ->
						let <Need> =
						    %% Line 132
						    call 'hipe_consttab':'const_size'
							(Const)
						in  let <_cor34> =
							%% Line 134
							case RawData of
							  %% Line 135
							  <{ElementType,ElementData}> when 'true' ->
							      %% Line 136
							      apply 'decompose_block'/3
								  (ElementType, ElementData, _cor13)
							  %% Line 137
							  <{ElementType,ElementData,SortOrder}> when 'true' ->
							      %% Line 138
							      case apply 'get_sorted_refs'/2
								       (ElementData, SortOrder) of
								<{TblData,TblRefs}> when 'true' ->
								    let <_cor32> =
									%% Line 139
									call 'hipe_consttab':'decompose'
									    ({ElementType,TblData})
								    in  %% Line 139
									{_cor32,%% Line 140
										[{'sorted',_cor13,TblRefs}|[]]}
								( <_cor31> when 'true' ->
								      primop 'match_fail'
									  ({'badmatch',_cor31})
								  -| ['compiler_generated'] )
							      end
							  ( <_cor33> when 'true' ->
								primop 'match_fail'
								    ({'case_clause',_cor33})
							    -| ['compiler_generated'] )
							end
						    in  %% Line 133
							case _cor34 of
							  <{Data,NewRefs}> when 'true' ->
							      let <NewInfo> =
								  %% Line 142
								  {'pcm_entry',MFA,Label,ConstNo,_cor13,_cor17,%% Line 143
													       Data}
							      in  let <_cor39> =
								      %% Line 144
								      call 'erlang':'+'
									  (_cor13, Need)
								  in  let <_cor38> =
									  %% Line 144
									  call 'erlang':'+'
									      (ConstNo, 1)
								      in  let <_cor37> =
									      %% Line 145
									      call 'erlang':'++'
										  (NewRefs, Refs)
									  in  %% Line 144
									      apply 'pack_labels'/8
										  (Labels, MFA, ConstTab, _cor39, NewAlign, _cor38, %% Line 145
																    [NewInfo|Acc], _cor37)
							  ( <_cor35> when 'true' ->
								primop 'match_fail'
								    ({'badmatch',_cor35})
							    -| ['compiler_generated'] )
							end
					    ( <_cor40> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor40})
					      -| ['compiler_generated'] )
					  end
	  %% Line 147
	  <[],_cor57,_cor58,Size,Align,ConstNo,Acc,Refs> when 'true' ->
	      %% Line 148
	      {Size,Align,Acc,ConstNo,Refs}
	  ( <_cor48,_cor47,_cor46,_cor45,_cor44,_cor43,_cor42,_cor41> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor48,_cor47,_cor46,_cor45,_cor44,_cor43,_cor42,_cor41})
		  -| [{'function_name',{'pack_labels',8}}] )
	    -| ['compiler_generated'] )
	end
'decompose_block'/3 =
    %% Line 150
    fun (_cor2,_cor1,_cor0) ->
	let <ElementSize> =
	    %% Line 151
	    call 'hipe_consttab':'size_of'
		(_cor2)
	in  %% Line 152
	    case apply 'get_refs'/3
		     (_cor1, _cor0, ElementSize) of
	      <{NewData,Refs}> when 'true' ->
		  let <_cor5> =
		      %% Line 153
		      call 'hipe_consttab':'decompose'
			  ({_cor2,NewData})
		  in  %% Line 153
		      {_cor5,Refs}
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor4})
		-| ['compiler_generated'] )
	    end
'get_refs'/3 =
    %% Line 155
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'label',L}|Rest],Pos,ElementSize> when 'true' ->
	      let <_cor3> =
		  %% Line 156
		  call 'erlang':'+'
		      (Pos, ElementSize)
	      in  %% Line 156
		  case apply 'get_refs'/3
			   (Rest, _cor3, ElementSize) of
		    <{NewData,Refs}> when 'true' ->
			%% Line 157
			{[0|NewData],[{L,Pos}|Refs]}
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor4})
		      -| ['compiler_generated'] )
		  end
	  %% Line 158
	  <[D|Rest],Pos,ElementSize> when 'true' ->
	      let <_cor5> =
		  %% Line 159
		  call 'erlang':'+'
		      (Pos, ElementSize)
	      in  %% Line 159
		  case apply 'get_refs'/3
			   (Rest, _cor5, ElementSize) of
		    <{NewData,Refs}> when 'true' ->
			%% Line 160
			{[D|NewData],Refs}
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor6})
		      -| ['compiler_generated'] )
		  end
	  %% Line 161
	  <[],_cor10,_cor11> when 'true' ->
	      %% Line 162
	      {[],[]}
	  ( <_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor9,_cor8,_cor7})
		  -| [{'function_name',{'get_refs',3}}] )
	    -| ['compiler_generated'] )
	end
'get_sorted_refs'/2 =
    %% Line 164
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{'label',L}|Rest],[Ordering|Os]> when 'true' ->
	      %% Line 165
	      case apply 'get_sorted_refs'/2
		       (Rest, Os) of
		<{NewData,Refs}> when 'true' ->
		    %% Line 166
		    {[0|NewData],[{L,Ordering}|Refs]}
		( <_cor2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 167
	  <[D|Rest],[_X_Ordering|Os]> when 'true' ->
	      %% Line 168
	      case apply 'get_sorted_refs'/2
		       (Rest, Os) of
		<{NewData,Refs}> when 'true' ->
		    %% Line 169
		    {[D|NewData],Refs}
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 170
	  <[],[]> when 'true' ->
	      %% Line 171
	      {[],[]}
	  ( <_cor5,_cor4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4})
		  -| [{'function_name',{'get_sorted_refs',2}}] )
	    -| ['compiler_generated'] )
	end
'slim_refs'/1 =
    %% Line 177
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      []
	  %% Line 178
	  <Refs> when 'true' ->
	      %% Line 179
	      case call 'lists':'keysort'
		       (1, Refs) of
		<[Ref|Rest]> when 'true' ->
		    let <_cor2> =
			%% Line 180
			call 'erlang':'element'
			    (1, Ref)
		    in  %% Line 180
			apply 'compact_ref_types'/4
			    (Rest, _cor2, [Ref|[]], [])
		( <_cor1> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor1})
		  -| ['compiler_generated'] )
	      end
	end
'compact_ref_types'/4 =
    %% Line 182
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Ref|Refs],Type,AccofType,Acc> when 'true' ->
	      %% Line 183
	      case call 'erlang':'element'
		       (1, Ref) of
		%% Line 184
		<_cor13>
		    when call 'erlang':'=:='
			  (_cor13,
			   Type) ->
		    %% Line 185
		    apply 'compact_ref_types'/4
			(Refs, Type, [Ref|AccofType], Acc)
		%% Line 186
		<NewType> when 'true' ->
		    let <_cor4> =
			%% Line 188
			apply 'compact_dests'/1
			    (AccofType)
		    in  let <_cor5> =
			    %% Line 188
			    call 'lists':'sort'
				(_cor4)
			in  %% Line 187
			    apply 'compact_ref_types'/4
				(Refs, NewType, [Ref|[]], %% Line 188
							  [{Type,_cor5}|Acc])
	      end
	  %% Line 190
	  <[],Type,AccofType,Acc> when 'true' ->
	      let <_cor7> =
		  %% Line 191
		  apply 'compact_dests'/1
		      (AccofType)
	      in  let <_cor8> =
		      %% Line 191
		      call 'lists':'sort'
			  (_cor7)
		  in  %% Line 191
		      [{Type,_cor8}|Acc]
	  ( <_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'compact_ref_types',4}}] )
	    -| ['compiler_generated'] )
	end
'compact_dests'/1 =
    %% Line 195
    fun (_cor0) ->
	%% Line 196
	case call 'lists':'keysort'
		 (3, _cor0) of
	  <[Ref|Rest]> when 'true' ->
	      let <_cor3> =
		  %% Line 197
		  call 'erlang':'element'
		      (3, Ref)
	      in  let <_cor2> =
		      %% Line 197
		      call 'erlang':'element'
			  (2, Ref)
		  in  %% Line 197
		      apply 'compact_dests'/4
			  (Rest, _cor3, [_cor2|[]], [])
	  ( <_cor1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor1})
	    -| ['compiler_generated'] )
	end
'compact_dests'/4 =
    %% Line 199
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[Ref|Refs],Dest,AccofDest,Acc> when 'true' ->
	      %% Line 200
	      case call 'erlang':'element'
		       (3, Ref) of
		%% Line 201
		<_cor11>
		    when call 'erlang':'=:='
			  (_cor11,
			   Dest) ->
		    let <_cor4> =
			%% Line 202
			call 'erlang':'element'
			    (2, Ref)
		    in  %% Line 202
			apply 'compact_dests'/4
			    (Refs, Dest, [_cor4|AccofDest], Acc)
		%% Line 203
		<NewDest> when 'true' ->
		    let <_cor5> =
			%% Line 204
			call 'erlang':'element'
			    (2, Ref)
		    in  %% Line 204
			apply 'compact_dests'/4
			    (Refs, NewDest, [_cor5|[]], [{Dest,AccofDest}|Acc])
	      end
	  %% Line 206
	  <[],Dest,AccofDest,Acc> when 'true' ->
	      %% Line 207
	      [{Dest,AccofDest}|Acc]
	  ( <_cor10,_cor9,_cor8,_cor7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8,_cor7})
		  -| [{'function_name',{'compact_dests',4}}] )
	    -| ['compiler_generated'] )
	end
'slim_constmap'/1 =
    %% Line 216
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 217
	    call 'gb_sets':'new'
		()
	in  %% Line 217
	    apply 'slim_constmap'/3
		(_cor0, _cor1, [])
'slim_constmap'/3 =
    %% Line 219
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{'pcm_entry',_cor8,_cor9,ConstNo,Offset,%% Line 220
						    Type,%% Line 220
							 Term}|%% Line 220
							       Rest],%% Line 220
								     Inserted,%% Line 220
									      Acc> when 'true' ->
	      %% Line 221
	      case call 'gb_sets':'is_member'
		       (ConstNo, Inserted) of
		%% Line 222
		<'true'> when 'true' ->
		    %% Line 223
		    apply 'slim_constmap'/3
			(Rest, Inserted, Acc)
		%% Line 224
		<'false'> when 'true' ->
		    let <NewInserted> =
			%% Line 225
			call 'gb_sets':'insert'
			    (ConstNo, Inserted)
		    in  %% Line 226
			apply 'slim_constmap'/3
			    (Rest, NewInserted, [ConstNo|[Offset|[Type|[Term|Acc]]]])
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 228
	  <[],_X_Inserted,Acc> when 'true' ->
	      Acc
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'slim_constmap',3}}] )
	    -| ['compiler_generated'] )
	end
'find_const'/2 =
    %% Line 235
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{MFA,Label},[E = {'pcm_entry',_cor8,_cor9,_cor10,_cor11,_cor12,_cor13}|_cor14]>
	      when let <_cor15> =
		    call 'erlang':'=:='
			(_cor8, MFA)
		in  let <_cor16> =
			call 'erlang':'=:='
			    (_cor9, Label)
		    in  call 'erlang':'and'
			    (_cor15, _cor16) ->
	      _cor10
	  %% Line 237
	  <N,[_cor23|R]> when 'true' ->
	      %% Line 238
	      apply 'find_const'/2
		  (N, R)
	  %% Line 239
	  <C,[]> when 'true' ->
	      do  %% Line 240
		  call 'io':'format'
		      ([60|[72|[105|[80|[69|[32|[40|[118|[32|[51|[46|[49|[49|[41|[62|[32|[69|[88|[73|[84|[69|[68|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[32|[126|[119|[32|[64|[126|[119|[58|[126|[119|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [{'constant_not_found',C}|['hipe_pack_constants'|[240]]])
		  %% Line 240
		  call 'erlang':'error'
		      ({'hipe_pack_constants',240,{'constant_not_found',C}})
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'find_const',2}}] )
	    -| ['compiler_generated'] )
	end
'mk_data_relocs'/2 =
    %% Line 253
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 254
	    apply 'mk_data_relocs'/3
		(_cor1, _cor0, [])
	in  %% Line 254
	    call 'lists':'flatten'
		(_cor2)
'mk_data_relocs'/3 =
    %% Line 256
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{MFA,Labels}|Rest],LabelMap,Acc> when 'true' ->
	      let <_cor16> =
		  %% Line 257
		  ( letrec
			'lc$^0'/1 =
			    fun (_cor5) ->
				case _cor5 of
				  <[%% Line 268
				    Label|_cor4]> when 'true' ->
				      let <_cor14> =
					  case Label of
					    %% Line 258
					    <{L,Pos}> when 'true' ->
						let <Offset> =
						    %% Line 259
						    apply 'find'/2
							({MFA,L}, LabelMap)
						in  %% Line 260
						    {Pos,Offset}
					    %% Line 261
					    <{'sorted',Base,OrderedLabels}> when 'true' ->
						let <_cor12> =
						    %% Line 262
						    ( letrec
							  'lc$^1'/1 =
							      fun (_cor9) ->
								  case _cor9 of
								    <[%% Line 266
								      {L,Order}|_cor8]> when 'true' ->
									let <Offset> =
									    %% Line 263
									    apply 'find'/2
										({MFA,L}, LabelMap)
									in  let <_cor11> =
										%% Line 266
										apply 'lc$^1'/1
										    (_cor8)
									    in  ( [%% Line 264
										   {Order,Offset}|_cor11]
										  -| ['compiler_generated'] )
								    ( <[_cor7|_cor8]> when 'true' ->
									  %% Line 266
									  apply 'lc$^1'/1
									      (_cor8)
								      -| ['compiler_generated'] )
								    <[]> when 'true' ->
									[]
								    ( <_cor9> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_cor9})
									    -| [{'function_name',{'lc$^1',1}}] )
								      -| ['compiler_generated'] )
								  end
						      in  apply 'lc$^1'/1
							      (%% Line 266
							       OrderedLabels)
						      -| ['list_comprehension'] )
						in  %% Line 262
						    {'sorted',Base,_cor12}
					    ( <_cor13> when 'true' ->
						  primop 'match_fail'
						      ({'case_clause',_cor13})
					      -| ['compiler_generated'] )
					  end
				      in  let <_cor15> =
					      %% Line 268
					      apply 'lc$^0'/1
						  (_cor4)
					  in  ( [_cor14|_cor15]
						-| ['compiler_generated'] )
				  <[]> when 'true' ->
				      []
				  ( <_cor5> when 'true' ->
					( primop 'match_fail'
					      ({'function_clause',_cor5})
					  -| [{'function_name',{'lc$^0',1}}] )
				    -| ['compiler_generated'] )
				end
		    in  apply 'lc$^0'/1
			    (%% Line 268
			     Labels)
		    -| ['list_comprehension'] )
	      in  %% Line 270
		  apply 'mk_data_relocs'/3
		      (Rest, LabelMap, [_cor16|[Acc|[]]])
	  %% Line 271
	  <[],_cor21,Acc> when 'true' ->
	      Acc
	  ( <_cor20,_cor19,_cor18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor20,_cor19,_cor18})
		  -| [{'function_name',{'mk_data_relocs',3}}] )
	    -| ['compiler_generated'] )
	end
'find'/2 =
    %% Line 273
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{MFA,L},LabelMap> when 'true' ->
	      %% Line 274
	      call 'gb_trees':'get'
		  ({MFA,L}, LabelMap)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'find',2}}] )
	    -| ['compiler_generated'] )
	end
'slim_sorted_exportmap'/3 =
    %% Line 278
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[{Addr,M,F,A}|Rest],Closures,Exports> when 'true' ->
	      let <IsClosure> =
		  %% Line 279
		  call 'lists':'member'
		      ({M,F,A}, Closures)
	      in  let <IsExported> =
		      %% Line 280
		      apply 'is_exported'/3
			  (F, A, Exports)
		  in  let <_cor5> =
			  %% Line 281
			  apply 'slim_sorted_exportmap'/3
			      (Rest, Closures, Exports)
		      in  %% Line 281
			  [Addr|[M|[F|[A|[IsClosure|[IsExported|_cor5]]]]]]
	  %% Line 282
	  <[],_cor9,_cor10> when 'true' ->
	      []
	  ( <_cor8,_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor8,_cor7,_cor6})
		  -| [{'function_name',{'slim_sorted_exportmap',3}}] )
	    -| ['compiler_generated'] )
	end
'is_exported'/3 =
    %% Line 284
    fun (_cor2,_cor1,_cor0) ->
	%% Line 285
	call 'lists':'member'
	    ({_cor2,_cor1}, _cor0)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_pack_constants')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_pack_constants', _cor0)
end