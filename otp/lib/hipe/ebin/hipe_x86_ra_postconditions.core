module 'hipe_x86_ra_postconditions' ['check_and_rewrite'/3,
				     'module_info'/0,
				     'module_info'/1]
    attributes [%% Line 64
		'type' =
		    %% Line 64
		    [{{'record','x86_temp'},[{'record_field',64,{'atom',64,'reg'}}|[{'record_field',64,{'atom',64,'type'}}|[{'record_field',64,{'atom',64,'allocatable'}}]]],[]}],
		%% Line 65
		'type' =
		    %% Line 65
		    [{{'record','x86_imm'},[{'record_field',65,{'atom',65,'value'}}],[]}],
		%% Line 66
		'type' =
		    %% Line 66
		    [{{'record','x86_mem'},[{'record_field',66,{'atom',66,'base'}}|[{'record_field',66,{'atom',66,'off'}}|[{'record_field',66,{'atom',66,'type'}}]]],[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{{'record','x86_fpreg'},[{'record_field',67,{'atom',67,'reg'}}|[{'record_field',67,{'atom',67,'pseudo'}}]],[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{{'record','x86_mfa'},[{'typed_record_field',{'record_field',68,{'atom',68,'m'}},{'type',68,'union',[{'atom',68,'undefined'}|[{'type',68,'atom',[]}]]}}|[{'typed_record_field',{'record_field',68,{'atom',68,'f'}},{'type',68,'union',[{'atom',68,'undefined'}|[{'type',68,'atom',[]}]]}}|[{'typed_record_field',{'record_field',68,{'atom',68,'a'}},{'type',68,'union',[{'atom',68,'undefined'}|[{'type',68,'arity',[]}]]}}]]],[]}],
		%% Line 69
		'type' =
		    %% Line 69
		    [{{'record','x86_prim'},[{'record_field',69,{'atom',69,'prim'}}],[]}],
		%% Line 70
		'type' =
		    %% Line 70
		    [{{'record','x86_sdesc'},[{'record_field',70,{'atom',70,'exnlab'}}|[{'record_field',70,{'atom',70,'fsize'}}|[{'typed_record_field',{'record_field',70,{'atom',70,'arity'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'arity',[]}]]}}|[{'typed_record_field',{'record_field',70,{'atom',70,'live'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'tuple','any'}]]}}]]]],[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{{'record','alu'},[{'record_field',78,{'atom',78,'aluop'}}|[{'record_field',78,{'atom',78,'src'}}|[{'record_field',78,{'atom',78,'dst'}}]]],[]}],
		%% Line 79
		'type' =
		    %% Line 79
		    [{{'record','call'},[{'record_field',79,{'atom',79,'fun'}}|[{'record_field',79,{'atom',79,'sdesc'}}|[{'record_field',79,{'atom',79,'linkage'}}]]],[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{{'record','cmovcc'},[{'record_field',80,{'atom',80,'cc'}}|[{'record_field',80,{'atom',80,'src'}}|[{'record_field',80,{'atom',80,'dst'}}]]],[]}],
		%% Line 81
		'type' =
		    %% Line 81
		    [{{'record','cmp'},[{'record_field',81,{'atom',81,'src'}}|[{'record_field',81,{'atom',81,'dst'}}]],[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{{'record','comment'},[{'record_field',82,{'atom',82,'term'}}],[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{{'record','fmove'},[{'record_field',83,{'atom',83,'src'}}|[{'record_field',83,{'atom',83,'dst'}}]],[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{{'record','fp_binop'},[{'record_field',84,{'atom',84,'op'}}|[{'record_field',84,{'atom',84,'src'}}|[{'record_field',84,{'atom',84,'dst'}}]]],[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','fp_unop'},[{'record_field',85,{'atom',85,'op'}}|[{'record_field',85,{'atom',85,'arg'}}]],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{{'record','imul'},[{'record_field',86,{'atom',86,'imm_opt'}}|[{'record_field',86,{'atom',86,'src'}}|[{'record_field',86,{'atom',86,'temp'}}]]],[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{{'record','jcc'},[{'record_field',87,{'atom',87,'cc'}}|[{'record_field',87,{'atom',87,'label'}}]],[]}],
		%% Line 88
		'type' =
		    %% Line 88
		    [{{'record','jmp_fun'},[{'record_field',88,{'atom',88,'fun'}}|[{'record_field',88,{'atom',88,'linkage'}}]],[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','jmp_label'},[{'record_field',89,{'atom',89,'label'}}],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{{'record','jmp_switch'},[{'record_field',90,{'atom',90,'temp'}}|[{'record_field',90,{'atom',90,'jtab'}}|[{'record_field',90,{'atom',90,'labels'}}]]],[]}],
		%% Line 91
		'type' =
		    %% Line 91
		    [{{'record','label'},[{'record_field',91,{'atom',91,'label'}}],[]}],
		%% Line 92
		'type' =
		    %% Line 92
		    [{{'record','lea'},[{'record_field',92,{'atom',92,'mem'}}|[{'record_field',92,{'atom',92,'temp'}}]],[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','move'},[{'record_field',93,{'atom',93,'src'}}|[{'record_field',93,{'atom',93,'dst'}}]],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{{'record','move64'},[{'record_field',94,{'atom',94,'imm'}}|[{'record_field',94,{'atom',94,'dst'}}]],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','movsx'},[{'record_field',95,{'atom',95,'src'}}|[{'record_field',95,{'atom',95,'dst'}}]],[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{{'record','movzx'},[{'record_field',96,{'atom',96,'src'}}|[{'record_field',96,{'atom',96,'dst'}}]],[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','pseudo_call'},[{'record_field',97,{'atom',97,'fun'}}|[{'record_field',97,{'atom',97,'sdesc'}}|[{'record_field',97,{'atom',97,'contlab'}}|[{'record_field',97,{'atom',97,'linkage'}}]]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','pseudo_jcc'},[{'record_field',98,{'atom',98,'cc'}}|[{'record_field',98,{'atom',98,'true_label'}}|[{'record_field',98,{'atom',98,'false_label'}}|[{'record_field',98,{'atom',98,'pred'}}]]]],[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{{'record','pseudo_spill'},[{'record_field',99,{'atom',99,'args'},{'nil',99}}],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{{'record','pseudo_tailcall'},[{'record_field',100,{'atom',100,'fun'}}|[{'record_field',100,{'atom',100,'arity'}}|[{'record_field',100,{'atom',100,'stkargs'}}|[{'record_field',100,{'atom',100,'linkage'}}]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','pseudo_tailcall_prepare'},[],[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{{'record','push'},[{'record_field',102,{'atom',102,'src'}}],[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','pop'},[{'record_field',103,{'atom',103,'dst'}}],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{{'record','ret'},[{'record_field',104,{'atom',104,'npop'}}],[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{{'record','shift'},[{'record_field',105,{'atom',105,'shiftop'}}|[{'record_field',105,{'atom',105,'src'}}|[{'record_field',105,{'atom',105,'dst'}}]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','test'},[{'record_field',106,{'atom',106,'src'}}|[{'record_field',106,{'atom',106,'dst'}}]],[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{{'record','defun'},[{'typed_record_field',{'record_field',112,{'atom',112,'mfa'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'mfa',[]}]]}}|[{'record_field',112,{'atom',112,'formals'}}|[{'record_field',112,{'atom',112,'code'}}|[{'typed_record_field',{'record_field',113,{'atom',113,'data'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'isclosure'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'isleaf'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'boolean',[]}]]}}|[{'record_field',116,{'atom',116,'var_range'}}|[{'record_field',116,{'atom',116,'label_range'}}]]]]]]]],[]}],
		%% Line 301
		'type' =
		    %% Line 301
		    [{{'record','comp_servers'},[{'typed_record_field',{'record_field',301,{'atom',301,'pp_server'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'range'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'type'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}]]],[]}],
		%% Line 307
		'type' =
		    %% Line 307
		    [{'comp_option',{'type',307,'union',[{'type',307,'atom',[]}|[{'type',307,'tuple',[{'type',307,'atom',[]}|[{'type',307,'atom',[]}]]}]]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{'comp_options',{'type',308,'list',[{'type',308,'comp_option',[]}]},[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'hipe_architecture',{'type',311,'union',[{'atom',311,'amd64'}|[{'atom',311,'arm'}|[{'atom',311,'powerpc'}|[{'atom',311,'ppc64'}|[{'atom',311,'ultrasparc'}|[{'atom',311,'x86'}]]]]]]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{'hipe_map',{'type',313,'list',[{'type',313,'tuple',[{'type',313,'non_neg_integer',[]}|[{'type',314,'union',[{'atom',314,'unknown'}|[{'type',314,'tuple',[{'type',314,'union',[{'atom',314,'reg'}|[{'atom',314,'fp_reg'}|[{'atom',314,'spill'}]]]}|[{'type',315,'non_neg_integer',[]}]]}]]}]]}]},[]}],
		%% Line 316
		'type' =
		    %% Line 316
		    [{'hipe_temp_map',{'type',316,'tuple','any'},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{'hipe_spill_map',{'type',317,'list',[{'type',317,'tuple',[{'type',317,'non_neg_integer',[]}|[{'type',317,'tuple',[{'atom',317,'spill'}|[{'type',317,'non_neg_integer',[]}]]}]]}]},[]}]]
'check_and_rewrite'/3 =
    %% Line 42
    fun (_cor2,_cor1,_cor0) ->
	let <TempMap> =
	    %% Line 44
	    call 'hipe_temp_map':'cols2tuple'
		(_cor1, 'hipe_x86_specific')
	in  %% Line 46
	    case _cor2 of
	      <{'defun',_cor15,_cor16,Code0,_cor17,_cor18,_cor19,_cor20,_cor21}> when 'true' ->
		  %% Line 47
		  case apply 'do_insns'/5
			   (Code0, TempMap, _cor0, [], 'false') of
		    <{Code1,DidSpill}> when 'true' ->
			let <_cor6> =
			    %% Line 48
			    call 'hipe_gensym':'get_var'
				('x86')
			in  let <_rec0> = {%% Line 48
				 0,_cor6}
			    in  let <_cor9> =
				    %% Line 48
				    call 'erlang':'setelement'
					(8, _cor2, _rec0)
				in  let <_cor11> =
					%% Line 48
					call 'erlang':'setelement'
					    (4, _cor9, Code1)
				    in  %% Line 48
					{_cor11,%% Line 49
						DidSpill}
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor4})
		-| ['compiler_generated'] )
	    end
'do_insns'/5 =
    %% Line 51
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[I|Insns],TempMap,Strategy,Accum,DidSpill0> when 'true' ->
	      %% Line 52
	      case apply 'do_insn'/3
		       (I, TempMap, Strategy) of
		<{NewIs,DidSpill1}> when 'true' ->
		    let <_cor7> =
			%% Line 53
			call 'lists':'reverse'
			    (NewIs, Accum)
		    in  let <_cor6> =
			    %% Line 53
			    call 'erlang':'or'
				(DidSpill0, DidSpill1)
			in  %% Line 53
			    apply 'do_insns'/5
				(Insns, TempMap, Strategy, _cor7, _cor6)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 54
	  <[],_X_TempMap,_X_Strategy,Accum,DidSpill> when 'true' ->
	      let <_cor8> =
		  %% Line 55
		  call 'lists':'reverse'
		      (Accum)
	      in  %% Line 55
		  {_cor8,DidSpill}
	  ( <_cor13,_cor12,_cor11,_cor10,_cor9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor13,_cor12,_cor11,_cor10,_cor9})
		  -| [{'function_name',{'do_insns',5}}] )
	    -| ['compiler_generated'] )
	end
'do_insn'/3 =
    %% Line 57
    fun (_cor2,_cor1,_cor0) ->
	%% Line 58
	case _cor2 of
	  %% Line 59
	  <{'alu',_cor7,_cor8,_cor9}> when 'true' ->
	      %% Line 60
	      apply 'do_alu'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 61
	  <{'cmp',_cor10,_cor11}> when 'true' ->
	      %% Line 62
	      apply 'do_cmp'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 63
	  <{'imul',_cor12,_cor13,_cor14}> when 'true' ->
	      %% Line 64
	      apply 'do_imul'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 65
	  <{'jmp_switch',_cor15,_cor16,_cor17}> when 'true' ->
	      %% Line 66
	      apply 'do_jmp_switch'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 67
	  <{'lea',_cor18,_cor19}> when 'true' ->
	      %% Line 68
	      apply 'do_lea'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 69
	  <{'move',_cor20,_cor21}> when 'true' ->
	      %% Line 70
	      apply 'do_move'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 71
	  <{'move64',_cor22,_cor23}> when 'true' ->
	      %% Line 72
	      apply 'do_move64'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 73
	  <{'movsx',_cor24,_cor25}> when 'true' ->
	      %% Line 74
	      apply 'do_movx'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 75
	  <{'movzx',_cor26,_cor27}> when 'true' ->
	      %% Line 76
	      apply 'do_movx'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 77
	  <{'fmove',_cor28,_cor29}> when 'true' ->
	      %% Line 78
	      apply 'do_fmove'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 79
	  <{'shift',_cor30,_cor31,_cor32}> when 'true' ->
	      %% Line 80
	      apply 'do_shift'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 81
	  <_cor33> when 'true' ->
	      %% Line 84
	      {[_cor2|[]],'false'}
	end
'do_alu'/3 =
    %% Line 89
    fun (_cor2,_cor1,_cor0) ->
	%% Line 90
	case _cor2 of
	  <{'alu',_cor13,Src0,Dst0}> when 'true' ->
	      %% Line 91
	      case %% Line 92
		   apply 'do_binary'/4
		       (Src0, Dst0, _cor1, _cor0) of
		<{FixSrc,Src,FixDst,Dst,DidSpill}> when 'true' ->
		    let <_cor7> =
			%% Line 93
			{'alu',_cor13,Src,Dst}
		    in  let <_cor8> =
			    %% Line 93
			    call 'erlang':'++'
				(FixDst, [_cor7|[]])
			in  let <_cor9> =
				%% Line 93
				call 'erlang':'++'
				    (FixSrc, _cor8)
			    in  %% Line 93
				{_cor9,DidSpill}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'do_cmp'/3 =
    %% Line 97
    fun (_cor2,_cor1,_cor0) ->
	%% Line 98
	case _cor2 of
	  <{'cmp',Src0,Dst0}> when 'true' ->
	      %% Line 99
	      case %% Line 100
		   apply 'do_binary'/4
		       (Src0, Dst0, _cor1, _cor0) of
		<{FixSrc,Src,FixDst,Dst,DidSpill}> when 'true' ->
		    let <_cor7> = {%% Line 101
			 'cmp',%% Line 101
			       Src,%% Line 101
				   Dst}
		    in  let <_cor8> =
			    %% Line 101
			    call 'erlang':'++'
				(FixDst, [_cor7|[]])
			in  let <_cor9> =
				%% Line 101
				call 'erlang':'++'
				    (FixSrc, _cor8)
			    in  %% Line 101
				{_cor9,DidSpill}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'do_imul'/3 =
    %% Line 105
    fun (_cor2,_cor1,_cor0) ->
	%% Line 106
	case _cor2 of
	  <{'imul',ImmOpt,Src0,Temp0}> when 'true' ->
	      %% Line 107
	      case apply 'fix_src_operand'/3
		       (Src0, _cor1, _cor0) of
		<{FixSrc,Src,DidSpill1}> when 'true' ->
		    let <FixTempSrc,Temp,FixTempDst,DidSpill2> =
			%% Line 109
			case apply 'is_spilled'/2
				 (Temp0, _cor1) of
			  %% Line 110
			  <'false'> when 'true' ->
			      %% Line 111
			      <[],Temp0,[],'false'>
			  %% Line 112
			  <'true'> when 'true' ->
			      let <Reg> =
				  %% Line 113
				  apply 'spill_temp0'/2
				      ('untagged', _cor0)
			      in  let <_cor9> =
				      %% Line 114
				      case ImmOpt of
					%% Line 115
					<[]> when 'true' ->
					    let <_cor7> =
						call 'hipe_x86':'mk_move'
						    (Temp0, Reg)
					    in  [_cor7|[]]
					%% Line 116
					<_cor23> when 'true' ->
					    []
				      end
				  in  let <_cor6> =
					  %% Line 119
					  call 'hipe_x86':'mk_move'
					      (Reg, Temp0)
				      in  <_cor9,%% Line 118
						 Reg,%% Line 119
						     [_cor6|[]],%% Line 120
								'true'>
			  ( <_cor10> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor10})
			    -| ['compiler_generated'] )
			end
		    in  let <_cor16> =
			    %% Line 122
			    {'imul',ImmOpt,Src,Temp}
			in  let <_cor17> =
				%% Line 122
				[_cor16|FixTempDst]
			    in  let <_cor18> =
				    %% Line 122
				    call 'erlang':'++'
					(FixTempSrc, _cor17)
				in  let <_cor19> =
					%% Line 122
					call 'erlang':'++'
					    (FixSrc, _cor18)
				    in  let <_cor13> =
					    %% Line 123
					    call 'erlang':'or'
						(DidSpill1, DidSpill2)
					in  %% Line 122
					    {_cor19,_cor13}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'do_jmp_switch'/3 =
    %% Line 156
    fun (_cor2,_cor1,_cor0) ->
	%% Line 157
	case _cor2 of
	  <{'jmp_switch',Temp,_cor13,_cor14}> when 'true' ->
	      %% Line 158
	      case apply 'is_spilled'/2
		       (Temp, _cor1) of
		%% Line 159
		<'false'> when 'true' ->
		    %% Line 160
		    {[_cor2|[]],'false'}
		%% Line 161
		<'true'> when 'true' ->
		    let <NewTmp> =
			%% Line 162
			apply 'spill_temp'/2
			    ('untagged', _cor0)
		    in  let <_cor5> =
			    %% Line 163
			    call 'hipe_x86':'mk_move'
				(Temp, NewTmp)
			in  let <_cor8> =
				%% Line 163
				call 'erlang':'setelement'
				    (2, _cor2, NewTmp)
			    in  %% Line 163
				{[_cor5|[_cor8|[]]],%% Line 164
						    'true'}
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'do_lea'/3 =
    %% Line 170
    fun (_cor2,_cor1,_cor0) ->
	%% Line 171
	case _cor2 of
	  <{'lea',_cor13,Temp}> when 'true' ->
	      %% Line 172
	      case apply 'is_spilled'/2
		       (Temp, _cor1) of
		%% Line 173
		<'false'> when 'true' ->
		    %% Line 174
		    {[_cor2|[]],'false'}
		%% Line 175
		<'true'> when 'true' ->
		    let <NewTmp> =
			%% Line 176
			apply 'spill_temp'/2
			    ('untagged', _cor0)
		    in  let <_cor7> =
			    %% Line 177
			    call 'erlang':'setelement'
				(3, _cor2, NewTmp)
			in  let <_cor8> =
				%% Line 177
				call 'hipe_x86':'mk_move'
				    (NewTmp, Temp)
			    in  %% Line 177
				{[_cor7|[_cor8|[]]],%% Line 178
						    'true'}
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'do_move'/3 =
    %% Line 183
    fun (_cor2,_cor1,_cor0) ->
	%% Line 184
	case _cor2 of
	  <{'move',Src0,Dst0}> when 'true' ->
	      %% Line 185
	      case %% Line 186
		   apply 'do_check_byte_move'/4
		       (Src0, Dst0, _cor1, _cor0) of
		<{FixSrc,Src,FixDst,Dst,DidSpill}> when 'true' ->
		    let <_cor7> = {%% Line 187
			 'move',%% Line 187
				Src,%% Line 187
				    Dst}
		    in  let <_cor8> =
			    %% Line 187
			    call 'erlang':'++'
				(FixDst, [_cor7|[]])
			in  let <_cor9> =
				%% Line 187
				call 'erlang':'++'
				    (FixSrc, _cor8)
			    in  %% Line 187
				{_cor9,%% Line 188
				       DidSpill}
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'do_check_byte_move'/4 =
    %% Line 199
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 200
	case _cor2 of
	  %% Line 201
	  <{'x86_mem',_cor9,_cor10,'byte'}> when 'true' ->
	      %% Line 202
	      apply 'do_byte_move'/4
		  (_cor3, _cor2, _cor1, _cor0)
	  %% Line 203
	  <_cor11> when 'true' ->
	      %% Line 204
	      apply 'do_binary'/4
		  (_cor3, _cor2, _cor1, _cor0)
	end
'do_byte_move'/4 =
    %% Line 207
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 208
	case apply 'fix_src_operand'/3
		 (_cor3, _cor1, _cor0) of
	  <{FixSrc,Src,DidSpill1}> when 'true' ->
	      %% Line 209
	      case apply 'fix_dst_operand'/3
		       (_cor2, _cor1, _cor0) of
		<{FixDst,Dst,DidSpill2}> when 'true' ->
		    let <Reg> =
			%% Line 210
			call 'hipe_x86_registers':'eax'
			    ()
		    in  let <FixSrc3,Src3> =
			    %% Line 212
			    case Src of
			      %% Line 213
			      <{'x86_imm',_cor15}> when 'true' ->
				  %% Line 214
				  <FixSrc,Src>
			      %% Line 215
			      <{'x86_temp',_cor16,_cor17,_cor18}>
				  when call 'erlang':'=:='
					(_cor16,
					 Reg) ->
				  %% Line 216
				  <FixSrc,Src>
			      ( <_cor7> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor7})
				-| ['compiler_generated'] )
			    end
			in  let <_cor10> =
				%% Line 219
				call 'erlang':'or'
				    (DidSpill2, DidSpill1)
			    in  %% Line 218
				{FixSrc3,Src3,FixDst,Dst,_cor10}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'do_move64'/3 =
    %% Line 225
    fun (_cor2,_cor1,_cor0) ->
	%% Line 226
	case _cor2 of
	  <{'move64',_cor13,Dst}> when 'true' ->
	      %% Line 227
	      case apply 'is_spilled'/2
		       (Dst, _cor1) of
		%% Line 228
		<'false'> when 'true' ->
		    %% Line 229
		    {[_cor2|[]],'false'}
		%% Line 230
		<'true'> when 'true' ->
		    let <Reg> =
			%% Line 231
			apply 'clone'/2
			    (Dst, _cor0)
		    in  let <_cor7> =
			    %% Line 232
			    call 'erlang':'setelement'
				(3, _cor2, Reg)
			in  let <_cor8> =
				%% Line 232
				call 'hipe_x86':'mk_move'
				    (Reg, Dst)
			    in  %% Line 232
				{[_cor7|[_cor8|[]]],'true'}
		( <_cor9> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor9})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'do_movx'/3 =
    %% Line 237
    fun (_cor2,_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 239
	    case _cor2 of
	      %% Line 240
	      <{'movsx',Src0,Dst0}> when 'true' ->
		  let <_cor4> =
		      %% Line 241
		      apply 'fix_src_operand'/3
			  (Src0, _cor1, _cor0)
		  in  let <_cor3> =
			  %% Line 242
			  apply 'fix_dst_operand'/3
			      (Dst0, _cor1, _cor0)
		      in  %% Line 241
			  {_cor4,_cor3}
	      %% Line 243
	      <{'movzx',Src0,Dst0}> when 'true' ->
		  let <_cor6> =
		      %% Line 244
		      apply 'fix_src_operand'/3
			  (Src0, _cor1, _cor0)
		  in  let <_cor5> =
			  %% Line 245
			  apply 'fix_dst_operand'/3
			      (Dst0, _cor1, _cor0)
		      in  %% Line 244
			  {_cor6,_cor5}
	      ( <_cor7> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor7})
		-| ['compiler_generated'] )
	    end
	in  %% Line 238
	    case _cor8 of
	      <{{FixSrc,Src,DidSpill1},{FixDst,Dst,DidSpill2}}> when 'true' ->
		  let <I3,DidSpill3> =
		      %% Line 248
		      case apply 'is_spilled'/2
			       (Dst, _cor1) of
			%% Line 249
			<'false'> when 'true' ->
			    let <_cor13> =
				%% Line 250
				case _cor2 of
				  %% Line 251
				  <{'movsx',_cor33,_cor34}> when 'true' ->
				      let <_cor10> =
					  %% Line 252
					  call 'hipe_x86':'mk_movsx'
					      (Src, Dst)
				      in  %% Line 252
					  [_cor10|[]]
				  %% Line 253
				  <{'movzx',_cor35,_cor36}> when 'true' ->
				      let <_cor11> =
					  %% Line 254
					  call 'hipe_x86':'mk_movzx'
					      (Src, Dst)
				      in  %% Line 254
					  [_cor11|[]]
				  ( <_cor12> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor12})
				    -| ['compiler_generated'] )
				end
			    in  <_cor13,%% Line 256
					'false'>
			%% Line 257
			<'true'> when 'true' ->
			    let <Dst2> =
				%% Line 258
				apply 'clone'/2
				    (Dst, _cor0)
			    in  let <_cor21> =
				    %% Line 260
				    case _cor2 of
				      %% Line 261
				      <{'movsx',_cor37,_cor38}> when 'true' ->
					  let <_cor16> =
					      %% Line 262
					      call 'hipe_x86':'mk_movsx'
						  (Src, Dst2)
					  in  let <_cor17> =
						  %% Line 262
						  call 'hipe_x86':'mk_move'
						      (Dst2, Dst)
					      in  %% Line 262
						  [_cor16|[_cor17|[]]]
				      %% Line 263
				      <{'movzx',_cor39,_cor40}> when 'true' ->
					  let <_cor18> =
					      %% Line 264
					      call 'hipe_x86':'mk_movzx'
						  (Src, Dst2)
					  in  let <_cor19> =
						  %% Line 264
						  call 'hipe_x86':'mk_move'
						      (Dst2, Dst)
					      in  %% Line 264
						  [_cor18|[_cor19|[]]]
				      ( <_cor20> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_cor20})
					-| ['compiler_generated'] )
				    end
				in  <_cor21,%% Line 266
					    'true'>
			( <_cor23> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_cor23})
			  -| ['compiler_generated'] )
		      end
		  in  let <_cor28> =
			  %% Line 268
			  call 'erlang':'++'
			      (FixDst, I3)
		      in  let <_cor29> =
			      %% Line 268
			      call 'erlang':'++'
				  (FixSrc, _cor28)
			  in  let <_cor26> =
				  %% Line 269
				  call 'erlang':'or'
				      (DidSpill3, DidSpill2)
			      in  let <_cor27> =
				      %% Line 269
				      call 'erlang':'or'
					  (_cor26, DidSpill1)
				  in  %% Line 268
				      {_cor29,_cor27}
	      ( <_cor9> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_cor9})
		-| ['compiler_generated'] )
	    end
'do_fmove'/3 =
    %% Line 273
    fun (_cor2,_cor1,_cor0) ->
	%% Line 274
	case _cor2 of
	  <{'fmove',Src0,Dst0}> when 'true' ->
	      %% Line 275
	      case apply 'fix_src_operand'/3
		       (Src0, _cor1, _cor0) of
		<{FixSrc,Src,DidSpill1}> when 'true' ->
		    %% Line 276
		    case apply 'fix_dst_operand'/3
			     (Dst0, _cor1, _cor0) of
		      <{FixDst,Dst,DidSpill2}> when 'true' ->
			  let <_cor9> = {%% Line 279
			       'fmove',%% Line 279
				       Src,%% Line 279
					   Dst}
			  in  let <_cor10> =
				  %% Line 279
				  call 'erlang':'++'
				      (FixDst, [_cor9|[]])
			      in  let <_cor11> =
				      %% Line 279
				      call 'erlang':'++'
					  (FixSrc, _cor10)
				  in  let <_cor6> =
					  %% Line 280
					  call 'erlang':'or'
					      (DidSpill1, DidSpill2)
				      in  %% Line 279
					  {_cor11,_cor6}
		      ( <_cor5> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor5})
			-| ['compiler_generated'] )
		    end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'do_shift'/3 =
    %% Line 287
    fun (_cor2,_cor1,_cor0) ->
	%% Line 288
	case _cor2 of
	  <{'shift',_cor18,Src0,Dst0}> when 'true' ->
	      %% Line 289
	      case apply 'fix_dst_operand'/3
		       (Dst0, _cor1, _cor0) of
		<{FixDst,Dst,DidSpill}> when 'true' ->
		    let <Reg> =
			%% Line 290
			call 'hipe_x86_registers':'ecx'
			    ()
		    in  %% Line 291
			case Src0 of
			  %% Line 292
			  <{'x86_imm',_cor19}> when 'true' ->
			      let <_cor8> =
				  %% Line 293
				  call 'erlang':'setelement'
				      (4, _cor2, Dst)
			      in  let <_cor9> =
				      %% Line 293
				      call 'erlang':'++'
					  (FixDst, [_cor8|[]])
				  in  %% Line 293
				      {_cor9,DidSpill}
			  %% Line 294
			  <{'x86_temp',_cor24,_cor25,_cor26}>
			      when call 'erlang':'=:='
				    (_cor24,
				     Reg) ->
			      let <_cor12> =
				  %% Line 295
				  call 'erlang':'setelement'
				      (4, _cor2, Dst)
			      in  let <_cor13> =
				      %% Line 295
				      call 'erlang':'++'
					  (FixDst, [_cor12|[]])
				  in  %% Line 295
				      {_cor13,DidSpill}
			  ( <_cor14> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor14})
			    -| ['compiler_generated'] )
			end
		( <_cor4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor4})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor3> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor3})
	    -| ['compiler_generated'] )
	end
'do_binary'/4 =
    %% Line 303
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 304
	case apply 'fix_src_operand'/3
		 (_cor3, _cor1, _cor0) of
	  <{FixSrc,Src,DidSpill1}> when 'true' ->
	      %% Line 305
	      case apply 'fix_dst_operand'/3
		       (_cor2, _cor1, _cor0) of
		<{FixDst,Dst,DidSpill2}> when 'true' ->
		    let <FixSrc3,Src3,DidSpill3> =
			%% Line 307
			case apply 'is_mem_opnd'/2
				 (Src, _cor1) of
			  %% Line 308
			  <'false'> when 'true' ->
			      %% Line 309
			      <FixSrc,Src,'false'>
			  %% Line 310
			  <'true'> when 'true' ->
			      %% Line 311
			      case apply 'is_mem_opnd'/2
				       (Dst, _cor1) of
				%% Line 312
				<'false'> when 'true' ->
				    %% Line 313
				    <FixSrc,Src,'false'>
				%% Line 314
				<'true'> when 'true' ->
				    let <Src2> =
					%% Line 315
					apply 'clone'/2
					    (Src, _cor0)
				    in  let <_cor7> =
					    %% Line 316
					    call 'hipe_x86':'mk_move'
						(Src, Src2)
					in  let <FixSrc2> =
						%% Line 316
						call 'erlang':'++'
						    (FixSrc, [_cor7|[]])
					    in  %% Line 317
						<FixSrc2,Src2,'true'>
				( <_cor9> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_cor9})
				  -| ['compiler_generated'] )
			      end
			  ( <_cor10> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor10})
			    -| ['compiler_generated'] )
			end
		    in  let <_cor13> =
			    %% Line 321
			    call 'erlang':'or'
				(DidSpill3, DidSpill2)
			in  let <_cor14> =
				%% Line 321
				call 'erlang':'or'
				    (_cor13, DidSpill1)
			    in  %% Line 320
				{FixSrc3,Src3,FixDst,Dst,_cor14}
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'fix_src_operand'/3 =
    %% Line 325
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 326
	    apply 'temp1'/1
		(_cor0)
	in  %% Line 326
	    apply 'fix_mem_operand'/3
		(_cor2, _cor1, _cor3)
'temp1'/1 =
    %% Line 328
    fun (_cor0) ->
	case _cor0 of
	  <'normal'> when 'true' ->
	      []
	  %% Line 329
	  <'linearscan'> when 'true' ->
	      call 'hipe_x86_registers':'temp1'
		  ()
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'temp1',1}}] )
	    -| ['compiler_generated'] )
	end
'fix_dst_operand'/3 =
    %% Line 331
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 332
	    apply 'temp0'/1
		(_cor0)
	in  %% Line 332
	    apply 'fix_mem_operand'/3
		(_cor2, _cor1, _cor3)
'temp0'/1 =
    %% Line 334
    fun (_cor0) ->
	case _cor0 of
	  <'normal'> when 'true' ->
	      []
	  %% Line 335
	  <'linearscan'> when 'true' ->
	      call 'hipe_x86_registers':'temp0'
		  ()
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'temp0',1}}] )
	    -| ['compiler_generated'] )
	end
'fix_mem_operand'/3 =
    %% Line 337
    fun (_cor2,_cor1,_cor0) ->
	%% Line 338
	case _cor2 of
	  %% Line 339
	  <{'x86_mem',Base,Off,_cor26}> when 'true' ->
	      %% Line 340
	      case apply 'is_mem_opnd'/2
		       (Base, _cor1) of
		%% Line 341
		<'false'> when 'true' ->
		    %% Line 342
		    case apply 'is_mem_opnd'/2
			     (Off, _cor1) of
		      %% Line 343
		      <'false'> when 'true' ->
			  %% Line 344
			  {[],_cor2,'false'}
		      %% Line 345
		      <'true'> when 'true' ->
			  let <Temp> =
			      %% Line 346
			      apply 'clone2'/2
				  (Off, _cor0)
			  in  let <_cor7> =
				  %% Line 347
				  call 'hipe_x86':'mk_move'
				      (Off, Temp)
			      in  let <_cor6> =
				      %% Line 348
				      call 'erlang':'setelement'
					  (3, _cor2, Temp)
				  in  %% Line 347
				      {[_cor7|[]],_cor6,%% Line 349
							'true'}
		      ( <_cor8> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor8})
			-| ['compiler_generated'] )
		    end
		%% Line 351
		<'true'> when 'true' ->
		    let <Temp> =
			%% Line 352
			apply 'clone2'/2
			    (Base, _cor0)
		    in  %% Line 353
			case apply 'is_mem_opnd'/2
				 (Off, _cor1) of
			  %% Line 354
			  <'false'> when 'true' ->
			      let <_cor13> =
				  %% Line 355
				  call 'hipe_x86':'mk_move'
				      (Base, Temp)
			      in  let <_cor12> =
				      %% Line 356
				      call 'erlang':'setelement'
					  (2, _cor2, Temp)
				  in  %% Line 355
				      {[_cor13|[]],_cor12,%% Line 357
							  'true'}
			  %% Line 358
			  <'true'> when 'true' ->
			      let <_cor18> =
				  %% Line 359
				  call 'hipe_x86':'mk_move'
				      (Base, Temp)
			      in  let <_cor19> =
				      %% Line 360
				      call 'hipe_x86':'mk_alu'
					  ('add', Off, Temp)
				  in  let <_rec26> =
					  %% Line 361
					  call 'hipe_x86':'mk_imm'
					      (0)
				      in  let <_cor17> =
					      %% Line 361
					      {'x86_mem',Temp,_rec26,_cor26}
					  in  %% Line 359
					      {[_cor18|%% Line 360
						       [_cor19|[]]],_cor17,%% Line 362
									   'true'}
			  ( <_cor20> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_cor20})
			    -| ['compiler_generated'] )
			end
		( <_cor21> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor21})
		  -| ['compiler_generated'] )
	      end
	  %% Line 365
	  <_cor36> when 'true' ->
	      %% Line 366
	      {[],_cor2,'false'}
	end
'is_mem_opnd'/2 =
    %% Line 371
    fun (_cor1,_cor0) ->
	%% Line 373
	case _cor1 of
	  %% Line 374
	  <{'x86_mem',_cor14,_cor15,_cor16}> when 'true' ->
	      'true'
	  %% Line 375
	  <{'x86_temp',_cor17,_cor18,_cor19}> when 'true' ->
	      let <Reg> =
		  %% Line 376
		  call 'hipe_x86':'temp_reg'
		      (_cor1)
	      in  %% Line 377
		  case call 'hipe_x86':'temp_is_allocatable'
			   (_cor1) of
		    %% Line 378
		    <'true'> when 'true' ->
			let <_cor3> =
			    %% Line 379
			    call 'erlang':'tuple_size'
				(_cor0)
			in  %% Line 379
			    case call 'erlang':'>'
				     (_cor3, Reg) of
			      %% Line 380
			      <'true'> when 'true' ->
				  %% Line 381
				  case %% Line 382
				       call 'hipe_temp_map':'is_spilled'
					   (Reg, _cor0) of
				    %% Line 383
				    <'true'> when 'true' ->
					do  %% Line 384
					    case call 'erlang':'get'
						     ('counter_mfa_mem_temps') of
					      <'undefined'> when 'true' ->
						  'ok'
					      <_cor20> when 'true' ->
						  let <_cor4> =
						      call 'erlang':'get'
							  ('counter_mfa_mem_temps')
						  in  call 'erlang':'put'
							  ('counter_mfa_mem_temps', [Reg|_cor4])
					    end
					    %% Line 385
					    'true'
				    %% Line 386
				    <'false'> when 'true' ->
					'false'
				    ( <_cor6> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_cor6})
				      -| ['compiler_generated'] )
				  end
			      %% Line 388
			      <_cor21> when 'true' ->
				  %% Line 390
				  call 'erlang':'exit'
				      ({'hipe_x86_ra_postconditions','is_mem_opnd',Reg})
			    end
		    %% Line 393
		    <'false'> when 'true' ->
			'true'
		    ( <_cor8> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor8})
		      -| ['compiler_generated'] )
		  end
	  %% Line 395
	  <_cor22> when 'true' ->
	      'false'
	end
'is_spilled'/2 =
    %% Line 402
    fun (_cor1,_cor0) ->
	%% Line 403
	case call 'hipe_x86':'temp_is_allocatable'
		 (_cor1) of
	  %% Line 404
	  <'true'> when 'true' ->
	      let <Reg> =
		  %% Line 405
		  call 'hipe_x86':'temp_reg'
		      (_cor1)
	      in  let <_cor3> =
		      %% Line 406
		      call 'erlang':'tuple_size'
			  (_cor0)
		  in  %% Line 406
		      case <> of
			%% Line 407
			<>
			    when call 'erlang':'>'
				  (_cor3,
				   Reg) ->
			    %% Line 408
			    case call 'hipe_temp_map':'is_spilled'
				     (Reg, _cor0) of
			      %% Line 409
			      <'true'> when 'true' ->
				  do  %% Line 410
				      case call 'erlang':'get'
					       ('counter_mfa_mem_temps') of
					<'undefined'> when 'true' ->
					    'ok'
					<_cor11> when 'true' ->
					    let <_cor4> =
						call 'erlang':'get'
						    ('counter_mfa_mem_temps')
					    in  call 'erlang':'put'
						    ('counter_mfa_mem_temps', [Reg|_cor4])
				      end
				      %% Line 411
				      'true'
			      %% Line 412
			      <'false'> when 'true' ->
				  %% Line 413
				  'false'
			      ( <_cor6> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_cor6})
				-| ['compiler_generated'] )
			    end
			%% Line 415
			<> when 'true' ->
			    %% Line 416
			    'false'
		      end
	  %% Line 418
	  <'false'> when 'true' ->
	      'true'
	  ( <_cor8> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor8})
	    -| ['compiler_generated'] )
	end
'clone'/2 =
    %% Line 423
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 425
	    case _cor1 of
	      %% Line 426
	      <{'x86_mem',_cor7,_cor8,_cor9}> when 'true' ->
		  call 'hipe_x86':'mem_type'
		      (_cor1)
	      %% Line 427
	      <{'x86_temp',_cor10,_cor11,_cor12}> when 'true' ->
		  call 'hipe_x86':'temp_type'
		      (_cor1)
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
	in  %% Line 429
	    apply 'spill_temp'/2
		(_cor3, _cor0)
'spill_temp0'/2 =
    %% Line 431
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Type,'normal'> when 'true' ->
	      %% Line 432
	      call 'hipe_x86':'mk_new_temp'
		  (Type)
	  %% Line 433
	  <Type,'linearscan'> when 'true' ->
	      let <_cor2> =
		  %% Line 434
		  call 'hipe_x86_registers':'temp0'
		      ()
	      in  %% Line 434
		  call 'hipe_x86':'mk_temp'
		      (_cor2, Type)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'spill_temp0',2}}] )
	    -| ['compiler_generated'] )
	end
'spill_temp'/2 =
    %% Line 436
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <Type,'normal'> when 'true' ->
	      %% Line 437
	      call 'hipe_x86':'mk_new_temp'
		  (Type)
	  %% Line 438
	  <Type,'linearscan'> when 'true' ->
	      let <_cor2> =
		  %% Line 439
		  call 'hipe_x86_registers':'temp1'
		      ()
	      in  %% Line 439
		  call 'hipe_x86':'mk_temp'
		      (_cor2, Type)
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'spill_temp',2}}] )
	    -| ['compiler_generated'] )
	end
'clone2'/2 =
    %% Line 443
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 445
	    case _cor1 of
	      %% Line 446
	      <{'x86_mem',_cor8,_cor9,_cor10}> when 'true' ->
		  call 'hipe_x86':'mem_type'
		      (_cor1)
	      %% Line 447
	      <{'x86_temp',_cor11,_cor12,_cor13}> when 'true' ->
		  call 'hipe_x86':'temp_type'
		      (_cor1)
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_cor2})
		-| ['compiler_generated'] )
	    end
	in  %% Line 449
	    case _cor0 of
	      %% Line 450
	      <[]> when 'true' ->
		  call 'hipe_x86':'mk_new_temp'
		      (_cor3)
	      %% Line 451
	      <Reg> when 'true' ->
		  call 'hipe_x86':'mk_temp'
		      (Reg, _cor3)
	    end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_x86_ra_postconditions')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_x86_ra_postconditions', _cor0)
end