module 'hipe_spillmin' ['mapmerge'/2,
			'module_info'/0,
			'module_info'/1,
			'stackalloc'/6]
    attributes [%% Line 301
		'type' =
		    %% Line 301
		    [{{'record','comp_servers'},[{'typed_record_field',{'record_field',301,{'atom',301,'pp_server'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'range'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'type'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}]]],[]}],
		%% Line 307
		'type' =
		    %% Line 307
		    [{'comp_option',{'type',307,'union',[{'type',307,'atom',[]}|[{'type',307,'tuple',[{'type',307,'atom',[]}|[{'type',307,'atom',[]}]]}]]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{'comp_options',{'type',308,'list',[{'type',308,'comp_option',[]}]},[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'hipe_architecture',{'type',311,'union',[{'atom',311,'amd64'}|[{'atom',311,'arm'}|[{'atom',311,'powerpc'}|[{'atom',311,'ppc64'}|[{'atom',311,'ultrasparc'}|[{'atom',311,'x86'}]]]]]]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{'hipe_map',{'type',313,'list',[{'type',313,'tuple',[{'type',313,'non_neg_integer',[]}|[{'type',314,'union',[{'atom',314,'unknown'}|[{'type',314,'tuple',[{'type',314,'union',[{'atom',314,'reg'}|[{'atom',314,'fp_reg'}|[{'atom',314,'spill'}]]]}|[{'type',315,'non_neg_integer',[]}]]}]]}]]}]},[]}],
		%% Line 316
		'type' =
		    %% Line 316
		    [{'hipe_temp_map',{'type',316,'tuple','any'},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{'hipe_spill_map',{'type',317,'list',[{'type',317,'tuple',[{'type',317,'non_neg_integer',[]}|[{'type',317,'tuple',[{'atom',317,'spill'}|[{'type',317,'non_neg_integer',[]}]]}]]}]},[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{'cfg_lbl',{'type',28,'non_neg_integer',[]},[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','cfg_info'},[{'typed_record_field',{'record_field',34,{'atom',34,'fun'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'type',34,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',35,{'atom',35,'start_label'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'cfg_lbl',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'is_closure'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',37,{'atom',37,'closure_arity'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'type',37,'arity',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'is_leaf'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'boolean',[]}]]}}|[{'record_field',39,{'atom',39,'params'}}|[{'record_field',40,{'atom',40,'info'},{'nil',40}}]]]]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'cfg_data',{'type',45,'tuple',[{'remote_type',45,[{'atom',45,'dict'}|[{'atom',45,'dict'}|[[]]]]}|[{'type',45,'list',[{'type',45,'cfg_lbl',[]}]}|[{'type',45,'non_neg_integer',[]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','cfg'},[{'typed_record_field',{'record_field',50,{'atom',50,'table'},{'call',50,{'remote',50,{'atom',50,'gb_trees'},{'atom',50,'empty'}},[]}},{'remote_type',50,[{'atom',50,'gb_trees'}|[{'atom',50,'tree'}|[[]]]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'info'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'type',51,'record',[{'atom',51,'cfg_info'}]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'data'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'cfg_data',[]}]]}}]]],[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{'cfg',{'type',53,'record',[{'atom',53,'cfg'}]},[]}],
		%% Line 69
		'spec' =
		    %% Line 69
		    [{{'stackalloc',6},[{'type',69,'fun',[{'type',69,'product',[{'type',69,'record',[{'atom',69,'cfg'}]}|[{'type',69,'list',[{'var',69,'_'}]}|[{'type',69,'non_neg_integer',[]}|[{'type',70,'comp_options',[]}|[{'type',70,'module',[]}|[{'type',70,'hipe_temp_map',[]}]]]]]]}|[{'type',71,'tuple',[{'type',71,'hipe_spill_map',[]}|[{'type',71,'non_neg_integer',[]}]]}]]}]}],
		%% Line 99
		'spec' =
		    %% Line 99
		    [{{'mapmerge',2},[{'type',99,'fun',[{'type',99,'product',[{'type',99,'hipe_map',[]}|[{'type',99,'hipe_spill_map',[]}]]}|[{'type',99,'hipe_map',[]}]]}]}]]
'stackalloc'/6 =
    %% Line 73
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 74
	case call 'proplists':'get_bool'
		 ('spillmin_color', _cor2) of
	  %% Line 75
	  <'false'> when 'true' ->
	      do  %% Line 76
		  case call 'proplists':'get_bool'
			   ('time', _cor2) of
		    %% Line 78
		    <'true'> when 'true' ->
			call 'hipe_timing':'start'
			    ([83|[112|[105|[108|[108|[32|[109|[105|[110|[105|[109|[105|[122|[101|[44|[32|[108|[105|[110|[101|[97|[114|[32|[115|[99|[97|[110]]]]]]]]]]]]]]]]]]]]]]]]]]], 'hipe_spillmin')
		    %% Line 78
		    <'false'> when 'true' ->
			'ok'
		    ( <_cor6> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor6})
		      -| ['compiler_generated'] )
		  end
		  let <_cor10> =
		      %% Line 78
		      ( fun (_cor8) ->
			    do  case call 'proplists':'get_bool'
					 ('time', _cor2) of
				  <'true'> when 'true' ->
				      call 'hipe_timing':'stop'
					  ([83|[112|[105|[108|[108|[32|[109|[105|[110|[105|[109|[105|[122|[101|[44|[32|[108|[105|[110|[101|[97|[114|[32|[115|[99|[97|[110]]]]]]]]]]]]]]]]]]]]]]]]]]], 'hipe_spillmin')
				  <'false'> when 'true' ->
				      'ok'
				  ( <_cor7> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor7})
				    -| ['compiler_generated'] )
				end
				_cor8
			-| [{'id',{0,0,'-stackalloc/6-fun-0-'}}] )
		  in  let <_cor11> =
			  %% Line 76
			  call 'hipe_spillmin_scan':'stackalloc'
			      (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
		      in  %% Line 78
			  apply _cor10
			      (_cor11)
	  %% Line 79
	  <'true'> when 'true' ->
	      do  %% Line 80
		  case call 'proplists':'get_bool'
			   ('time', _cor2) of
		    %% Line 82
		    <'true'> when 'true' ->
			call 'hipe_timing':'start'
			    ([83|[112|[105|[108|[108|[32|[109|[105|[110|[105|[109|[105|[122|[101|[44|[32|[103|[114|[97|[112|[104|[32|[99|[111|[108|[111|[114|[105|[110|[103]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], 'hipe_spillmin')
		    %% Line 82
		    <'false'> when 'true' ->
			'ok'
		    ( <_cor12> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_cor12})
		      -| ['compiler_generated'] )
		  end
		  let <_cor16> =
		      %% Line 82
		      ( fun (_cor14) ->
			    do  case call 'proplists':'get_bool'
					 ('time', _cor2) of
				  <'true'> when 'true' ->
				      call 'hipe_timing':'stop'
					  ([83|[112|[105|[108|[108|[32|[109|[105|[110|[105|[109|[105|[122|[101|[44|[32|[103|[114|[97|[112|[104|[32|[99|[111|[108|[111|[114|[105|[110|[103]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], 'hipe_spillmin')
				  <'false'> when 'true' ->
				      'ok'
				  ( <_cor13> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_cor13})
				    -| ['compiler_generated'] )
				end
				_cor14
			-| [{'id',{0,0,'-stackalloc/6-fun-1-'}}] )
		  in  let <_cor17> =
			  %% Line 80
			  call 'hipe_spillmin_color':'stackalloc'
			      (_cor5, _cor4, _cor3, _cor2, _cor1, _cor0)
		      in  %% Line 82
			  apply _cor16
			      (_cor17)
	  ( <_cor18> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor18})
	    -| ['compiler_generated'] )
	end
'mapmerge'/2 =
    %% Line 101
    fun (_cor1,_cor0) ->
	%% Line 102
	apply 'mapmerge'/3
	    (_cor1, _cor0, [])
'mapmerge'/3 =
    %% Line 104
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_cor6,Ack> when 'true' ->
	      %% Line 105
	      call 'lists':'reverse'
		  (Ack)
	  %% Line 106
	  <[{T1,_cor7}|T1s],[{T2,C}|T2s],Ack>
	      when call 'erlang':'=:='
		    (T1,
		     T2) ->
	      %% Line 107
	      apply 'mapmerge'/3
		  (T1s, T2s, [{T1,C}|Ack])
	  %% Line 108
	  <[{_cor8,'unknown'}|T1s],T2s,Ack> when 'true' ->
	      %% Line 109
	      apply 'mapmerge'/3
		  (T1s, T2s, Ack)
	  %% Line 110
	  <[T1|T1s],T2s,Ack> when 'true' ->
	      %% Line 111
	      apply 'mapmerge'/3
		  (T1s, T2s, [T1|Ack])
	  ( <_cor5,_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor5,_cor4,_cor3})
		  -| [{'function_name',{'mapmerge',3}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_spillmin')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_spillmin', _cor0)
end