module 'hipe_x86_ra_finalise' ['finalise'/4,
			       'module_info'/0,
			       'module_info'/1]
    attributes [%% Line 64
		'type' =
		    %% Line 64
		    [{{'record','x86_temp'},[{'record_field',64,{'atom',64,'reg'}}|[{'record_field',64,{'atom',64,'type'}}|[{'record_field',64,{'atom',64,'allocatable'}}]]],[]}],
		%% Line 65
		'type' =
		    %% Line 65
		    [{{'record','x86_imm'},[{'record_field',65,{'atom',65,'value'}}],[]}],
		%% Line 66
		'type' =
		    %% Line 66
		    [{{'record','x86_mem'},[{'record_field',66,{'atom',66,'base'}}|[{'record_field',66,{'atom',66,'off'}}|[{'record_field',66,{'atom',66,'type'}}]]],[]}],
		%% Line 67
		'type' =
		    %% Line 67
		    [{{'record','x86_fpreg'},[{'record_field',67,{'atom',67,'reg'}}|[{'record_field',67,{'atom',67,'pseudo'}}]],[]}],
		%% Line 68
		'type' =
		    %% Line 68
		    [{{'record','x86_mfa'},[{'typed_record_field',{'record_field',68,{'atom',68,'m'}},{'type',68,'union',[{'atom',68,'undefined'}|[{'type',68,'atom',[]}]]}}|[{'typed_record_field',{'record_field',68,{'atom',68,'f'}},{'type',68,'union',[{'atom',68,'undefined'}|[{'type',68,'atom',[]}]]}}|[{'typed_record_field',{'record_field',68,{'atom',68,'a'}},{'type',68,'union',[{'atom',68,'undefined'}|[{'type',68,'arity',[]}]]}}]]],[]}],
		%% Line 69
		'type' =
		    %% Line 69
		    [{{'record','x86_prim'},[{'record_field',69,{'atom',69,'prim'}}],[]}],
		%% Line 70
		'type' =
		    %% Line 70
		    [{{'record','x86_sdesc'},[{'record_field',70,{'atom',70,'exnlab'}}|[{'record_field',70,{'atom',70,'fsize'}}|[{'typed_record_field',{'record_field',70,{'atom',70,'arity'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'arity',[]}]]}}|[{'typed_record_field',{'record_field',70,{'atom',70,'live'}},{'type',70,'union',[{'atom',70,'undefined'}|[{'type',70,'tuple','any'}]]}}]]]],[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{{'record','alu'},[{'record_field',78,{'atom',78,'aluop'}}|[{'record_field',78,{'atom',78,'src'}}|[{'record_field',78,{'atom',78,'dst'}}]]],[]}],
		%% Line 79
		'type' =
		    %% Line 79
		    [{{'record','call'},[{'record_field',79,{'atom',79,'fun'}}|[{'record_field',79,{'atom',79,'sdesc'}}|[{'record_field',79,{'atom',79,'linkage'}}]]],[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{{'record','cmovcc'},[{'record_field',80,{'atom',80,'cc'}}|[{'record_field',80,{'atom',80,'src'}}|[{'record_field',80,{'atom',80,'dst'}}]]],[]}],
		%% Line 81
		'type' =
		    %% Line 81
		    [{{'record','cmp'},[{'record_field',81,{'atom',81,'src'}}|[{'record_field',81,{'atom',81,'dst'}}]],[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{{'record','comment'},[{'record_field',82,{'atom',82,'term'}}],[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{{'record','fmove'},[{'record_field',83,{'atom',83,'src'}}|[{'record_field',83,{'atom',83,'dst'}}]],[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{{'record','fp_binop'},[{'record_field',84,{'atom',84,'op'}}|[{'record_field',84,{'atom',84,'src'}}|[{'record_field',84,{'atom',84,'dst'}}]]],[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','fp_unop'},[{'record_field',85,{'atom',85,'op'}}|[{'record_field',85,{'atom',85,'arg'}}]],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{{'record','imul'},[{'record_field',86,{'atom',86,'imm_opt'}}|[{'record_field',86,{'atom',86,'src'}}|[{'record_field',86,{'atom',86,'temp'}}]]],[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{{'record','jcc'},[{'record_field',87,{'atom',87,'cc'}}|[{'record_field',87,{'atom',87,'label'}}]],[]}],
		%% Line 88
		'type' =
		    %% Line 88
		    [{{'record','jmp_fun'},[{'record_field',88,{'atom',88,'fun'}}|[{'record_field',88,{'atom',88,'linkage'}}]],[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','jmp_label'},[{'record_field',89,{'atom',89,'label'}}],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{{'record','jmp_switch'},[{'record_field',90,{'atom',90,'temp'}}|[{'record_field',90,{'atom',90,'jtab'}}|[{'record_field',90,{'atom',90,'labels'}}]]],[]}],
		%% Line 91
		'type' =
		    %% Line 91
		    [{{'record','label'},[{'record_field',91,{'atom',91,'label'}}],[]}],
		%% Line 92
		'type' =
		    %% Line 92
		    [{{'record','lea'},[{'record_field',92,{'atom',92,'mem'}}|[{'record_field',92,{'atom',92,'temp'}}]],[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','move'},[{'record_field',93,{'atom',93,'src'}}|[{'record_field',93,{'atom',93,'dst'}}]],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{{'record','move64'},[{'record_field',94,{'atom',94,'imm'}}|[{'record_field',94,{'atom',94,'dst'}}]],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','movsx'},[{'record_field',95,{'atom',95,'src'}}|[{'record_field',95,{'atom',95,'dst'}}]],[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{{'record','movzx'},[{'record_field',96,{'atom',96,'src'}}|[{'record_field',96,{'atom',96,'dst'}}]],[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','pseudo_call'},[{'record_field',97,{'atom',97,'fun'}}|[{'record_field',97,{'atom',97,'sdesc'}}|[{'record_field',97,{'atom',97,'contlab'}}|[{'record_field',97,{'atom',97,'linkage'}}]]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','pseudo_jcc'},[{'record_field',98,{'atom',98,'cc'}}|[{'record_field',98,{'atom',98,'true_label'}}|[{'record_field',98,{'atom',98,'false_label'}}|[{'record_field',98,{'atom',98,'pred'}}]]]],[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{{'record','pseudo_spill'},[{'record_field',99,{'atom',99,'args'},{'nil',99}}],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{{'record','pseudo_tailcall'},[{'record_field',100,{'atom',100,'fun'}}|[{'record_field',100,{'atom',100,'arity'}}|[{'record_field',100,{'atom',100,'stkargs'}}|[{'record_field',100,{'atom',100,'linkage'}}]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','pseudo_tailcall_prepare'},[],[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{{'record','push'},[{'record_field',102,{'atom',102,'src'}}],[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','pop'},[{'record_field',103,{'atom',103,'dst'}}],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{{'record','ret'},[{'record_field',104,{'atom',104,'npop'}}],[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{{'record','shift'},[{'record_field',105,{'atom',105,'shiftop'}}|[{'record_field',105,{'atom',105,'src'}}|[{'record_field',105,{'atom',105,'dst'}}]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','test'},[{'record_field',106,{'atom',106,'src'}}|[{'record_field',106,{'atom',106,'dst'}}]],[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 112
		'type' =
		    %% Line 112
		    [{{'record','defun'},[{'typed_record_field',{'record_field',112,{'atom',112,'mfa'}},{'type',112,'union',[{'atom',112,'undefined'}|[{'type',112,'mfa',[]}]]}}|[{'record_field',112,{'atom',112,'formals'}}|[{'record_field',112,{'atom',112,'code'}}|[{'typed_record_field',{'record_field',113,{'atom',113,'data'}},{'type',113,'union',[{'atom',113,'undefined'}|[{'type',113,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',114,{'atom',114,'isclosure'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',115,{'atom',115,'isleaf'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'boolean',[]}]]}}|[{'record_field',116,{'atom',116,'var_range'}}|[{'record_field',116,{'atom',116,'label_range'}}]]]]]]]],[]}]]
'finalise'/4 =
    %% Line 37
    fun (_cor3,_cor2,_cor1,_cor0) ->
	let <Defun1> =
	    %% Line 38
	    apply 'finalise_ra'/4
		(_cor3, _cor2, _cor1, _cor0)
	in  %% Line 39
	    case call 'proplists':'get_bool'
		     ('x87', _cor0) of
	      %% Line 40
	      <'true'> when 'true' ->
		  %% Line 41
		  call 'hipe_x86_x87':'map'
		      (Defun1)
	      %% Line 42
	      <_cor10> when 'true' ->
		  %% Line 43
		  Defun1
	    end
'finalise_ra'/4 =
    %% Line 52
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <Defun,[],[],_X_Options> when 'true' ->
	      %% Line 53
	      Defun
	  %% Line 54
	  <Defun,TempMap,FpMap,Options> when 'true' ->
	      let <Code> =
		  %% Line 55
		  call 'hipe_x86':'defun_code'
		      (Defun)
	      in  %% Line 56
		  case call 'hipe_x86':'defun_var_range'
			   (Defun) of
		    <{_cor15,SpillLimit}> when 'true' ->
			let <Map> =
			    %% Line 57
			    apply 'mk_ra_map'/2
				(TempMap, SpillLimit)
			in  let <FpMap0> =
				%% Line 58
				apply 'mk_ra_map_fp'/3
				    (FpMap, SpillLimit, Options)
			    in  let <NewCode> =
				    %% Line 59
				    apply 'ra_code'/3
					(Code, Map, FpMap0)
				in  %% Line 60
				    case Defun of
				      <{'defun',_cor16,_cor17,_cor18,_cor19,_cor20,_cor21,_cor22,_cor23}> when 'true' ->
					  call 'erlang':'setelement'
					      (4, Defun, NewCode)
				      ( <_cor24> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {'badrecord','defun'}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
		    ( <_cor5> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor5})
		      -| ['compiler_generated'] )
		  end
	end
'ra_code'/3 =
    %% Line 62
    fun (_cor2,_cor1,_cor0) ->
	%% Line 63
	( letrec
	      'lc$^0'/1 =
		  fun (_cor5) ->
		      case _cor5 of
			<[I|_cor4]> when 'true' ->
			    let <_cor6> =
				apply 'ra_insn'/3
				    (I, _cor1, _cor0)
			    in  let <_cor7> =
				    apply 'lc$^0'/1
					(_cor4)
				in  ( [_cor6|_cor7]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor5> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor5})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor2)
	  -| ['list_comprehension'] )
'ra_insn'/3 =
    %% Line 65
    fun (_cor2,_cor1,_cor0) ->
	%% Line 66
	case _cor2 of
	  %% Line 67
	  <{'alu',_cor75,Src0,Dst0}> when 'true' ->
	      let <Src> =
		  %% Line 68
		  apply 'ra_opnd'/2
		      (Src0, _cor1)
	      in  let <Dst> =
		      %% Line 69
		      apply 'ra_opnd'/2
			  (Dst0, _cor1)
		  in  %% Line 70
		      {'alu',_cor75,Src,Dst}
	  %% Line 71
	  <{'call',_cor77,_cor78,_cor79}> when 'true' ->
	      _cor2
	  %% Line 73
	  <{'cmovcc',_cor80,Src0,Dst0}> when 'true' ->
	      let <Src> =
		  %% Line 74
		  apply 'ra_opnd'/2
		      (Src0, _cor1)
	      in  let <Dst> =
		      %% Line 75
		      apply 'ra_opnd'/2
			  (Dst0, _cor1)
		  in  %% Line 76
		      {'cmovcc',_cor80,Src,Dst}
	  %% Line 77
	  <{'cmp',Src0,Dst0}> when 'true' ->
	      let <Src> =
		  %% Line 78
		  apply 'ra_opnd'/2
		      (Src0, _cor1)
	      in  let <Dst> =
		      %% Line 79
		      apply 'ra_opnd'/2
			  (Dst0, _cor1)
		  in  %% Line 80
		      {'cmp',Src,Dst}
	  %% Line 81
	  <{'comment',_cor83}> when 'true' ->
	      _cor2
	  %% Line 83
	  <{'fmove',Src0,Dst0}> when 'true' ->
	      let <Src> =
		  %% Line 84
		  apply 'ra_opnd'/3
		      (Src0, _cor1, _cor0)
	      in  let <Dst> =
		      %% Line 85
		      apply 'ra_opnd'/3
			  (Dst0, _cor1, _cor0)
		  in  %% Line 86
		      {'fmove',Src,Dst}
	  %% Line 87
	  <{'fp_unop',_cor85,Arg0}> when 'true' ->
	      let <Arg> =
		  %% Line 88
		  apply 'ra_opnd'/3
		      (Arg0, _cor1, _cor0)
	      in  %% Line 89
		  call 'erlang':'setelement'
		      (3, _cor2, Arg)
	  %% Line 90
	  <{'fp_binop',_cor89,Src0,Dst0}> when 'true' ->
	      let <Src> =
		  %% Line 91
		  apply 'ra_opnd'/3
		      (Src0, _cor1, _cor0)
	      in  let <Dst> =
		      %% Line 92
		      apply 'ra_opnd'/3
			  (Dst0, _cor1, _cor0)
		  in  %% Line 93
		      {'fp_binop',_cor89,Src,Dst}
	  %% Line 94
	  <{'imul',_cor91,Src0,Temp0}> when 'true' ->
	      let <Src> =
		  %% Line 95
		  apply 'ra_opnd'/2
		      (Src0, _cor1)
	      in  let <Temp> =
		      %% Line 96
		      apply 'ra_temp'/2
			  (Temp0, _cor1)
		  in  %% Line 97
		      {'imul',_cor91,Src,Temp}
	  %% Line 98
	  <{'jcc',_cor93,_cor94}> when 'true' ->
	      _cor2
	  %% Line 100
	  <{'jmp_fun',Fun0,_cor95}> when 'true' ->
	      let <Fun> =
		  %% Line 101
		  apply 'ra_opnd'/2
		      (Fun0, _cor1)
	      in  %% Line 102
		  call 'erlang':'setelement'
		      (2, _cor2, Fun)
	  %% Line 103
	  <{'jmp_label',_cor99}> when 'true' ->
	      _cor2
	  %% Line 105
	  <{'jmp_switch',Temp0,JTab0,_cor100}> when 'true' ->
	      let <Temp> =
		  %% Line 106
		  apply 'ra_opnd'/2
		      (Temp0, _cor1)
	      in  let <JTab> =
		      %% Line 107
		      apply 'ra_opnd'/2
			  (JTab0, _cor1)
		  in  %% Line 108
		      {'jmp_switch',Temp,JTab,_cor100}
	  %% Line 109
	  <{'label',_cor102}> when 'true' ->
	      _cor2
	  %% Line 111
	  <{'lea',Mem0,Temp0}> when 'true' ->
	      let <Mem> =
		  %% Line 112
		  apply 'ra_mem'/2
		      (Mem0, _cor1)
	      in  let <Temp> =
		      %% Line 113
		      apply 'ra_temp'/2
			  (Temp0, _cor1)
		  in  %% Line 114
		      {'lea',Mem,Temp}
	  %% Line 115
	  <{'move',Src0,Dst0}> when 'true' ->
	      let <Src> =
		  %% Line 116
		  apply 'ra_opnd'/2
		      (Src0, _cor1)
	      in  let <Dst> =
		      %% Line 117
		      apply 'ra_opnd'/2
			  (Dst0, _cor1)
		  in  %% Line 118
		      {'move',Src,Dst}
	  %% Line 119
	  <{'move64',_cor105,Dst0}> when 'true' ->
	      let <Dst> =
		  %% Line 120
		  apply 'ra_opnd'/2
		      (Dst0, _cor1)
	      in  %% Line 121
		  call 'erlang':'setelement'
		      (3, _cor2, Dst)
	  %% Line 122
	  <{'movsx',Src0,Dst0}> when 'true' ->
	      let <Src> =
		  %% Line 123
		  apply 'ra_opnd'/2
		      (Src0, _cor1)
	      in  let <Dst> =
		      %% Line 124
		      apply 'ra_opnd'/2
			  (Dst0, _cor1)
		  in  %% Line 125
		      {'movsx',Src,Dst}
	  %% Line 126
	  <{'movzx',Src0,Dst0}> when 'true' ->
	      let <Src> =
		  %% Line 127
		  apply 'ra_opnd'/2
		      (Src0, _cor1)
	      in  let <Dst> =
		      %% Line 128
		      apply 'ra_opnd'/2
			  (Dst0, _cor1)
		  in  %% Line 129
		      {'movzx',Src,Dst}
	  %% Line 130
	  <{'pseudo_call',Fun0,_cor111,_cor112,_cor113}> when 'true' ->
	      let <Fun> =
		  %% Line 131
		  apply 'ra_opnd'/2
		      (Fun0, _cor1)
	      in  %% Line 132
		  call 'erlang':'setelement'
		      (2, _cor2, Fun)
	  %% Line 133
	  <{'pseudo_jcc',_cor119,_cor120,_cor121,_cor122}> when 'true' ->
	      _cor2
	  %% Line 135
	  <{'pseudo_tailcall',Fun0,_cor123,StkArgs0,_cor124}> when 'true' ->
	      let <Fun> =
		  %% Line 136
		  apply 'ra_opnd'/2
		      (Fun0, _cor1)
	      in  let <StkArgs> =
		      %% Line 137
		      apply 'ra_args'/2
			  (StkArgs0, _cor1)
		  in  let <_cor62> =
			  %% Line 138
			  call 'erlang':'setelement'
			      (4, _cor2, StkArgs)
		      in  %% Line 138
			  call 'erlang':'setelement'
			      (2, _cor62, Fun)
	  %% Line 139
	  <{'pseudo_tailcall_prepare'}> when 'true' ->
	      _cor2
	  %% Line 141
	  <{'push',Src0}> when 'true' ->
	      let <Src> =
		  %% Line 142
		  apply 'ra_opnd'/2
		      (Src0, _cor1)
	      in  %% Line 143
		  {'push',Src}
	  %% Line 144
	  <{'ret',_cor131}> when 'true' ->
	      _cor2
	  %% Line 146
	  <{'shift',_cor132,Src0,Dst0}> when 'true' ->
	      let <Src> =
		  %% Line 147
		  apply 'ra_opnd'/2
		      (Src0, _cor1)
	      in  let <Dst> =
		      %% Line 148
		      apply 'ra_opnd'/2
			  (Dst0, _cor1)
		  in  %% Line 149
		      {'shift',_cor132,Src,Dst}
	  %% Line 150
	  <_cor134> when 'true' ->
	      %% Line 151
	      call 'erlang':'exit'
		  ({'hipe_x86_ra_finalise','ra_insn',_cor2})
	end
'ra_args'/2 =
    %% Line 154
    fun (_cor1,_cor0) ->
	%% Line 155
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[Opnd|_cor3]> when 'true' ->
			    let <_cor5> =
				apply 'ra_opnd'/2
				    (Opnd, _cor0)
			    in  let <_cor6> =
				    apply 'lc$^0'/1
					(_cor3)
				in  ( [_cor5|_cor6]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor1)
	  -| ['list_comprehension'] )
'ra_opnd'/2 =
    %% Line 157
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 158
	    call 'gb_trees':'empty'
		()
	in  %% Line 158
	    apply 'ra_opnd'/3
		(_cor1, _cor0, _cor2)
'ra_opnd'/3 =
    %% Line 159
    fun (_cor2,_cor1,_cor0) ->
	%% Line 160
	case _cor2 of
	  %% Line 161
	  <{'x86_temp',_cor7,_cor8,_cor9}> when 'true' ->
	      apply 'ra_temp'/3
		  (_cor2, _cor1, _cor0)
	  %% Line 162
	  <{'x86_mem',_cor10,_cor11,_cor12}> when 'true' ->
	      apply 'ra_mem'/2
		  (_cor2, _cor1)
	  %% Line 163
	  <_cor13> when 'true' ->
	      _cor2
	end
'ra_mem'/2 =
    %% Line 166
    fun (_cor1,_cor0) ->
	%% Line 167
	case _cor1 of
	  <{'x86_mem',Base0,Off0,_cor9}> when 'true' ->
	      let <Base> =
		  %% Line 168
		  apply 'ra_opnd'/2
		      (Base0, _cor0)
	      in  let <Off> =
		      %% Line 169
		      apply 'ra_opnd'/2
			  (Off0, _cor0)
		  in  %% Line 170
		      {'x86_mem',Base,Off,_cor9}
	  ( <_cor2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor2})
	    -| ['compiler_generated'] )
	end
'ra_temp'/2 =
    %% Line 172
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 173
	    call 'gb_trees':'empty'
		()
	in  %% Line 173
	    apply 'ra_temp'/3
		(_cor1, _cor0, _cor2)
'ra_temp'/3 =
    %% Line 175
    fun (_cor2,_cor1,_cor0) ->
	let <Reg> =
	    %% Line 176
	    call 'hipe_x86':'temp_reg'
		(_cor2)
	in  %% Line 177
	    case call 'hipe_x86':'temp_type'
		     (_cor2) of
	      %% Line 178
	      <'double'> when 'true' ->
		  %% Line 179
		  apply 'ra_temp_double'/3
		      (_cor2, Reg, _cor0)
	      %% Line 180
	      <_cor12> when 'true' ->
		  %% Line 181
		  case call 'hipe_x86_registers':'is_precoloured'
			   (Reg) of
		    %% Line 182
		    <'true'> when 'true' ->
			_cor2
		    %% Line 184
		    <_cor13> when 'true' ->
			%% Line 185
			case call 'gb_trees':'lookup'
				 (Reg, _cor1) of
			  %% Line 186
			  <{'value',NewReg}> when 'true' ->
			      case _cor2 of
				<{'x86_temp',_cor14,_cor15,_cor16}> when 'true' ->
				    call 'erlang':'setelement'
					(2, _cor2, NewReg)
				( <_cor17> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','x86_temp'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  %% Line 187
			  <_cor18> when 'true' ->
			      _cor2
			end
		  end
	    end
'ra_temp_double'/3 =
    %% Line 204
    fun (_cor2,_cor1,_cor0) ->
	%% Line 205
	case call 'gb_trees':'lookup'
		 (_cor1, _cor0) of
	  %% Line 206
	  <{'value',NewReg}> when 'true' ->
	      %% Line 207
	      case call 'hipe_x86_registers':'is_precoloured_x87'
		       (NewReg) of
		%% Line 208
		<'true'> when 'true' ->
		    call 'hipe_x86':'mk_fpreg'
			(NewReg)
		%% Line 209
		<'false'> when 'true' ->
		    %% Line 210
		    case _cor2 of
		      <{'x86_temp',_cor10,_cor11,_cor12}> when 'true' ->
			  call 'erlang':'setelement'
			      (2, _cor2, NewReg)
		      ( <_cor13> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','x86_temp'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 212
	  <_cor14> when 'true' ->
	      _cor2
	end
'mk_ra_map'/2 =
    %% Line 217
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 224
	    ( fun (_cor5,_cor4) ->
		  %% Line 225
		  case apply 'conv_ra_maplet'/3
			   (_cor5, _cor0, %% Line 226
					  'is_precoloured') of
		    <{Key,Val}> when 'true' ->
			%% Line 227
			call 'gb_trees':'insert'
			    (Key, Val, _cor4)
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-mk_ra_map/2-fun-0-'}}] )
	in  let <_cor2> =
		%% Line 229
		call 'gb_trees':'empty'
		    ()
	    in  %% Line 224
		call 'lists':'foldl'
		    (_cor8, _cor2, _cor1)
'conv_ra_maplet'/3 =
    %% Line 232
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <MapLet = {From,To},SpillLimit,IsPrecoloured> when 'true' ->
	      do  %% Line 234
		  case <> of
		    <>
			when let <_cor3> =
			      call 'erlang':'is_integer'
				  (From)
			  in  let <_cor4> =
				  call 'erlang':'=<'
				      (From, SpillLimit)
			      in  call 'erlang':'and'
				      (_cor3, _cor4) ->
			%% Line 235
			case call 'hipe_x86_registers':IsPrecoloured
				 (From) of
			  %% Line 236
			  <'false'> when 'true' ->
			      []
			  %% Line 237
			  <_cor17> when 'true' ->
			      %% Line 238
			      case To of
				%% Line 239
				<{'reg',_cor18}>
				    when call 'erlang':'=:='
					  (_cor18,
					   From) ->
				    []
				%% Line 240
				<_cor19> when 'true' ->
				    call 'erlang':'exit'
					({'hipe_x86_ra_finalise','conv_ra_maplet',MapLet})
			      end
			end
		    %% Line 243
		    <> when 'true' ->
			call 'erlang':'exit'
			    ({'hipe_x86_ra_finalise','conv_ra_maplet',MapLet})
		  end
		  %% Line 246
		  case To of
		    %% Line 247
		    <{'reg',NewReg}> when 'true' ->
			do  %% Line 250
			    case <> of
			      <>
				  when call 'erlang':'is_integer'
					(NewReg) ->
				  %% Line 251
				  case call 'hipe_x86_registers':IsPrecoloured
					   (NewReg) of
				    %% Line 252
				    <'true'> when 'true' ->
					[]
				    %% Line 253
				    <_cor20> when 'true' ->
					case <> of
					  <>
					      when call 'erlang':'=:='
						    (From,
						     NewReg) ->
					      []
					  %% Line 254
					  <> when 'true' ->
					      %% Line 255
					      call 'erlang':'exit'
						  ({'hipe_x86_ra_finalise','conv_ra_maplet',MapLet})
					end
				  end
			      %% Line 258
			      <> when 'true' ->
				  call 'erlang':'exit'
				      ({'hipe_x86_ra_finalise','conv_ra_maplet',MapLet})
			    end
			    %% Line 261
			    {From,NewReg}
		    %% Line 262
		    <{'spill',SpillIndex}> when 'true' ->
			do  %% Line 264
			    case <> of
			      <>
				  when let <_cor8> =
					call 'erlang':'is_integer'
					    (SpillIndex)
				    in  let <_cor9> =
					    call 'erlang':'>='
						(SpillIndex, 0)
					in  call 'erlang':'and'
						(_cor8, _cor9) ->
				  []
			      %% Line 265
			      <> when 'true' ->
				  call 'erlang':'exit'
				      ({'hipe_x86_ra_finalise','conv_ra_maplet',MapLet})
			    end
			    let <_cor10> =
				%% Line 268
				call 'erlang':'+'
				    (SpillLimit, SpillIndex)
			    in  let <ToTempNum> =
				    %% Line 268
				    call 'erlang':'+'
					(_cor10, 1)
				in  let <MaxTempNum> =
					%% Line 269
					call 'hipe_gensym':'get_var'
					    ('x86')
				    in  do  %% Line 270
					    case <> of
					      <>
						  when call 'erlang':'>='
							(MaxTempNum,
							 ToTempNum) ->
						  'ok'
					      %% Line 271
					      <> when 'true' ->
						  call 'hipe_gensym':'set_var'
						      ('x86', ToTempNum)
					    end
					    %% Line 273
					    {From,ToTempNum}
		    %% Line 274
		    <_cor21> when 'true' ->
			call 'erlang':'exit'
			    ({'hipe_x86_ra_finalise','conv_ra_maplet',MapLet})
		  end
	  ( <_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor16,_cor15,_cor14})
		  -| [{'function_name',{'conv_ra_maplet',3}}] )
	    -| ['compiler_generated'] )
	end
'mk_ra_map_x87'/2 =
    %% Line 277
    fun (_cor1,_cor0) ->
	let <_cor8> =
	    %% Line 278
	    ( fun (_cor5,_cor4) ->
		  %% Line 279
		  case apply 'conv_ra_maplet'/3
			   (_cor5, _cor0, %% Line 280
					  'is_precoloured_x87') of
		    <{Key,Val}> when 'true' ->
			%% Line 281
			call 'gb_trees':'insert'
			    (Key, Val, _cor4)
		    ( <_cor3> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_cor3})
		      -| ['compiler_generated'] )
		  end
	      -| [{'id',{0,0,'-mk_ra_map_x87/2-fun-0-'}}] )
	in  let <_cor2> =
		%% Line 283
		call 'gb_trees':'empty'
		    ()
	    in  %% Line 278
		call 'lists':'foldl'
		    (_cor8, _cor2, _cor1)
'mk_ra_map_fp'/3 =
    %% Line 302
    fun (_cor2,_cor1,_cor0) ->
	%% Line 303
	apply 'mk_ra_map_x87'/2
	    (_cor2, _cor1)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_x86_ra_finalise')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_x86_ra_finalise', _cor0)
end