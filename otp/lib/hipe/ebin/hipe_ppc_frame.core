module 'hipe_ppc_frame' ['frame'/1,
			 'module_info'/0,
			 'module_info'/1]
    attributes [%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','ppc_mfa'},[{'typed_record_field',{'record_field',39,{'atom',39,'m'}},{'type',39,'union',[{'atom',39,'undefined'}|[{'type',39,'atom',[]}]]}}|[{'typed_record_field',{'record_field',39,{'atom',39,'f'}},{'type',39,'union',[{'atom',39,'undefined'}|[{'type',39,'atom',[]}]]}}|[{'typed_record_field',{'record_field',39,{'atom',39,'a'}},{'type',39,'union',[{'atom',39,'undefined'}|[{'type',39,'arity',[]}]]}}]]],[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{{'record','ppc_prim'},[{'record_field',40,{'atom',40,'prim'}}],[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','ppc_sdesc'},[{'record_field',41,{'atom',41,'exnlab'}}|[{'record_field',41,{'atom',41,'fsize'}}|[{'typed_record_field',{'record_field',41,{'atom',41,'arity'}},{'type',41,'union',[{'atom',41,'undefined'}|[{'type',41,'arity',[]}]]}}|[{'record_field',41,{'atom',41,'live'}}]]]],[]}],
		%% Line 42
		'type' =
		    %% Line 42
		    [{{'record','ppc_simm16'},[{'record_field',42,{'atom',42,'value'}}],[]}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{{'record','ppc_temp'},[{'record_field',43,{'atom',43,'reg'}}|[{'record_field',43,{'atom',43,'type'}}|[{'record_field',43,{'atom',43,'allocatable'}}]]],[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','ppc_uimm16'},[{'record_field',44,{'atom',44,'value'}}],[]}],
		%% Line 76
		'type' =
		    %% Line 76
		    [{{'record','alu'},[{'record_field',76,{'atom',76,'aluop'}}|[{'record_field',76,{'atom',76,'dst'}}|[{'record_field',76,{'atom',76,'src1'}}|[{'record_field',76,{'atom',76,'src2'}}]]]],[]}],
		%% Line 77
		'type' =
		    %% Line 77
		    [{{'record','b_fun'},[{'record_field',77,{'atom',77,'fun'}}|[{'record_field',77,{'atom',77,'linkage'}}]],[]}],
		%% Line 78
		'type' =
		    %% Line 78
		    [{{'record','b_label'},[{'record_field',78,{'atom',78,'label'}}],[]}],
		%% Line 79
		'type' =
		    %% Line 79
		    [{{'record','bc'},[{'record_field',79,{'atom',79,'bcond'}}|[{'record_field',79,{'atom',79,'label'}}|[{'record_field',79,{'atom',79,'pred'}}]]],[]}],
		%% Line 80
		'type' =
		    %% Line 80
		    [{{'record','bctr'},[{'record_field',80,{'atom',80,'labels'}}],[]}],
		%% Line 81
		'type' =
		    %% Line 81
		    [{{'record','bctrl'},[{'record_field',81,{'atom',81,'sdesc'}}],[]}],
		%% Line 82
		'type' =
		    %% Line 82
		    [{{'record','bl'},[{'record_field',82,{'atom',82,'fun'}}|[{'record_field',82,{'atom',82,'sdesc'}}|[{'record_field',82,{'atom',82,'linkage'}}]]],[]}],
		%% Line 83
		'type' =
		    %% Line 83
		    [{{'record','blr'},[],[]}],
		%% Line 84
		'type' =
		    %% Line 84
		    [{{'record','cmp'},[{'record_field',84,{'atom',84,'cmpop'}}|[{'record_field',84,{'atom',84,'src1'}}|[{'record_field',84,{'atom',84,'src2'}}]]],[]}],
		%% Line 85
		'type' =
		    %% Line 85
		    [{{'record','comment'},[{'record_field',85,{'atom',85,'term'}}],[]}],
		%% Line 86
		'type' =
		    %% Line 86
		    [{{'record','label'},[{'record_field',86,{'atom',86,'label'}}],[]}],
		%% Line 87
		'type' =
		    %% Line 87
		    [{{'record','load'},[{'record_field',87,{'atom',87,'ldop'}}|[{'record_field',87,{'atom',87,'dst'}}|[{'record_field',87,{'atom',87,'disp'}}|[{'record_field',87,{'atom',87,'base'}}]]]],[]}],
		%% Line 88
		'type' =
		    %% Line 88
		    [{{'record','loadx'},[{'record_field',88,{'atom',88,'ldxop'}}|[{'record_field',88,{'atom',88,'dst'}}|[{'record_field',88,{'atom',88,'base1'}}|[{'record_field',88,{'atom',88,'base2'}}]]]],[]}],
		%% Line 89
		'type' =
		    %% Line 89
		    [{{'record','mfspr'},[{'record_field',89,{'atom',89,'dst'}}|[{'record_field',89,{'atom',89,'spr'}}]],[]}],
		%% Line 90
		'type' =
		    %% Line 90
		    [{{'record','mtcr'},[{'record_field',90,{'atom',90,'src'}}],[]}],
		%% Line 91
		'type' =
		    %% Line 91
		    [{{'record','mtspr'},[{'record_field',91,{'atom',91,'spr'}}|[{'record_field',91,{'atom',91,'src'}}]],[]}],
		%% Line 92
		'type' =
		    %% Line 92
		    [{{'record','pseudo_bc'},[{'record_field',92,{'atom',92,'bcond'}}|[{'record_field',92,{'atom',92,'true_label'}}|[{'record_field',92,{'atom',92,'false_label'}}|[{'record_field',92,{'atom',92,'pred'}}]]]],[]}],
		%% Line 93
		'type' =
		    %% Line 93
		    [{{'record','pseudo_call'},[{'record_field',93,{'atom',93,'func'}}|[{'record_field',93,{'atom',93,'sdesc'}}|[{'record_field',93,{'atom',93,'contlab'}}|[{'record_field',93,{'atom',93,'linkage'}}]]]],[]}],
		%% Line 94
		'type' =
		    %% Line 94
		    [{{'record','pseudo_call_prepare'},[{'record_field',94,{'atom',94,'nrstkargs'}}],[]}],
		%% Line 95
		'type' =
		    %% Line 95
		    [{{'record','pseudo_li'},[{'record_field',95,{'atom',95,'dst'}}|[{'record_field',95,{'atom',95,'imm'}}]],[]}],
		%% Line 96
		'type' =
		    %% Line 96
		    [{{'record','pseudo_move'},[{'record_field',96,{'atom',96,'dst'}}|[{'record_field',96,{'atom',96,'src'}}]],[]}],
		%% Line 97
		'type' =
		    %% Line 97
		    [{{'record','pseudo_tailcall'},[{'record_field',97,{'atom',97,'func'}}|[{'record_field',97,{'atom',97,'arity'}}|[{'record_field',97,{'atom',97,'stkargs'}}|[{'record_field',97,{'atom',97,'linkage'}}]]]],[]}],
		%% Line 98
		'type' =
		    %% Line 98
		    [{{'record','pseudo_tailcall_prepare'},[],[]}],
		%% Line 99
		'type' =
		    %% Line 99
		    [{{'record','store'},[{'record_field',99,{'atom',99,'stop'}}|[{'record_field',99,{'atom',99,'src'}}|[{'record_field',99,{'atom',99,'disp'}}|[{'record_field',99,{'atom',99,'base'}}]]]],[]}],
		%% Line 100
		'type' =
		    %% Line 100
		    [{{'record','storex'},[{'record_field',100,{'atom',100,'stxop'}}|[{'record_field',100,{'atom',100,'src'}}|[{'record_field',100,{'atom',100,'base1'}}|[{'record_field',100,{'atom',100,'base2'}}]]]],[]}],
		%% Line 101
		'type' =
		    %% Line 101
		    [{{'record','unary'},[{'record_field',101,{'atom',101,'unop'}}|[{'record_field',101,{'atom',101,'dst'}}|[{'record_field',101,{'atom',101,'src'}}]]],[]}],
		%% Line 102
		'type' =
		    %% Line 102
		    [{{'record','lfd'},[{'record_field',102,{'atom',102,'dst'}}|[{'record_field',102,{'atom',102,'disp'}}|[{'record_field',102,{'atom',102,'base'}}]]],[]}],
		%% Line 103
		'type' =
		    %% Line 103
		    [{{'record','lfdx'},[{'record_field',103,{'atom',103,'dst'}}|[{'record_field',103,{'atom',103,'base1'}}|[{'record_field',103,{'atom',103,'base2'}}]]],[]}],
		%% Line 104
		'type' =
		    %% Line 104
		    [{{'record','stfd'},[{'record_field',104,{'atom',104,'src'}}|[{'record_field',104,{'atom',104,'disp'}}|[{'record_field',104,{'atom',104,'base'}}]]],[]}],
		%% Line 105
		'type' =
		    %% Line 105
		    [{{'record','stfdx'},[{'record_field',105,{'atom',105,'src'}}|[{'record_field',105,{'atom',105,'base1'}}|[{'record_field',105,{'atom',105,'base2'}}]]],[]}],
		%% Line 106
		'type' =
		    %% Line 106
		    [{{'record','fp_binary'},[{'record_field',106,{'atom',106,'fp_binop'}}|[{'record_field',106,{'atom',106,'dst'}}|[{'record_field',106,{'atom',106,'src1'}}|[{'record_field',106,{'atom',106,'src2'}}]]]],[]}],
		%% Line 107
		'type' =
		    %% Line 107
		    [{{'record','fp_unary'},[{'record_field',107,{'atom',107,'fp_unop'}}|[{'record_field',107,{'atom',107,'dst'}}|[{'record_field',107,{'atom',107,'src'}}]]],[]}],
		%% Line 108
		'type' =
		    %% Line 108
		    [{{'record','pseudo_fmove'},[{'record_field',108,{'atom',108,'dst'}}|[{'record_field',108,{'atom',108,'src'}}]],[]}],
		%% Line 22
		'type' =
		    %% Line 22
		    [{'ct_alignment',{'type',22,'union',[{'integer',22,4}|[{'integer',22,8}]]},[]}],
		%% Line 24
		'type' =
		    %% Line 24
		    [{'hipe_constlbl',{'type',24,'non_neg_integer',[]},[]}],
		%% Line 25
		'type' =
		    %% Line 25
		    [{'hipe_consttab',{'type',25,'tuple',[{'remote_type',25,[{'atom',25,'dict'}|[{'atom',25,'dict'}|[[]]]]}|[{'type',25,'list',[{'type',25,'hipe_constlbl',[]}]}|[{'type',25,'hipe_constlbl',[]}]]]},[]}],
		%% Line 114
		'type' =
		    %% Line 114
		    [{{'record','defun'},[{'typed_record_field',{'record_field',114,{'atom',114,'mfa'}},{'type',114,'union',[{'atom',114,'undefined'}|[{'type',114,'mfa',[]}]]}}|[{'record_field',114,{'atom',114,'formals'}}|[{'record_field',114,{'atom',114,'code'}}|[{'typed_record_field',{'record_field',115,{'atom',115,'data'}},{'type',115,'union',[{'atom',115,'undefined'}|[{'type',115,'hipe_consttab',[]}]]}}|[{'typed_record_field',{'record_field',116,{'atom',116,'isclosure'}},{'type',116,'union',[{'atom',116,'undefined'}|[{'type',116,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',117,{'atom',117,'isleaf'}},{'type',117,'union',[{'atom',117,'undefined'}|[{'type',117,'boolean',[]}]]}}|[{'record_field',118,{'atom',118,'var_range'}}|[{'record_field',118,{'atom',118,'label_range'}}]]]]]]]],[]}],
		%% Line 355
		'type' =
		    %% Line 355
		    [{{'record','context'},[{'record_field',355,{'atom',355,'liveness'}}|[{'record_field',355,{'atom',355,'framesize'}}|[{'record_field',355,{'atom',355,'arity'}}|[{'record_field',355,{'atom',355,'map'}}|[{'record_field',355,{'atom',355,'clobbers_lr'}}|[{'record_field',355,{'atom',355,'ref_maxstack'}}]]]]]],[]}]]
'frame'/1 =
    %% Line 26
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 27
	    call 'hipe_ppc':'defun_formals'
		(_cor0)
	in  let <Formals> =
		%% Line 27
		apply 'fix_formals'/1
		    (_cor1)
	    in  let <_cor3> =
		    %% Line 28
		    call 'hipe_ppc':'defun_code'
			(_cor0)
		in  let <Temps0> =
			%% Line 28
			apply 'all_temps'/2
			    (_cor3, Formals)
		    in  let <MinFrame> =
			    %% Line 29
			    apply 'defun_minframe'/1
				(_cor0)
			in  let <Temps> =
				%% Line 30
				apply 'ensure_minframe'/2
				    (MinFrame, Temps0)
			    in  let <_cor7> =
				    %% Line 31
				    call 'hipe_ppc':'defun_code'
					(_cor0)
				in  let <ClobbersLR> =
					%% Line 31
					apply 'clobbers_lr'/1
					    (_cor7)
				    in  let <CFG0> =
					    %% Line 32
					    call 'hipe_ppc_cfg':'init'
						(_cor0)
					in  let <Liveness> =
						%% Line 33
						call 'hipe_ppc_liveness_all':'analyse'
						    (CFG0)
					    in  let <CFG1> =
						    %% Line 34
						    apply 'do_body'/5
							(CFG0, Liveness, Formals, Temps, ClobbersLR)
						in  %% Line 35
						    call 'hipe_ppc_cfg':'linearise'
							(CFG1)
'fix_formals'/1 =
    %% Line 37
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 38
	    call 'hipe_ppc_registers':'nr_args'
		()
	in  %% Line 38
	    apply 'fix_formals'/2
		(_cor1, _cor0)
'fix_formals'/2 =
    %% Line 40
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <0,Rest> when 'true' ->
	      Rest
	  %% Line 41
	  <N,[_cor5|Rest]> when 'true' ->
	      let <_cor2> =
		  call 'erlang':'-'
		      (N, 1)
	      in  apply 'fix_formals'/2
		      (_cor2, Rest)
	  %% Line 42
	  <_cor6,[]> when 'true' ->
	      []
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'fix_formals',2}}] )
	    -| ['compiler_generated'] )
	end
'do_body'/5 =
    %% Line 44
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	let <Context> =
	    %% Line 45
	    apply 'mk_context'/4
		(_cor3, _cor2, _cor1, _cor0)
	in  let <CFG1> =
		%% Line 46
		apply 'do_blocks'/2
		    (_cor4, Context)
	    in  %% Line 47
		apply 'do_prologue'/2
		    (CFG1, Context)
'do_blocks'/2 =
    %% Line 49
    fun (_cor1,_cor0) ->
	let <Labels> =
	    %% Line 50
	    call 'hipe_ppc_cfg':'labels'
		(_cor1)
	in  %% Line 51
	    apply 'do_blocks'/3
		(Labels, _cor1, _cor0)
'do_blocks'/3 =
    %% Line 53
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Label|Labels],CFG,Context> when 'true' ->
	      let <Liveness> =
		  %% Line 54
		  apply 'context_liveness'/1
		      (Context)
	      in  let <LiveOut> =
		      %% Line 55
		      call 'hipe_ppc_liveness_all':'liveout'
			  (Liveness, Label)
		  in  let <Block> =
			  %% Line 56
			  call 'hipe_ppc_cfg':'bb'
			      (CFG, Label)
		      in  let <Code> =
			      %% Line 57
			      call 'hipe_bb':'code'
				  (Block)
			  in  let <NewCode> =
				  %% Line 58
				  apply 'do_block'/3
				      (Code, LiveOut, Context)
			      in  let <NewBlock> =
				      %% Line 59
				      call 'hipe_bb':'code_update'
					  (Block, NewCode)
				  in  let <NewCFG> =
					  %% Line 60
					  call 'hipe_ppc_cfg':'bb_add'
					      (CFG, Label, NewBlock)
				      in  %% Line 61
					  apply 'do_blocks'/3
					      (Labels, NewCFG, Context)
	  %% Line 62
	  <[],CFG,_cor13> when 'true' ->
	      %% Line 63
	      CFG
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10})
		  -| [{'function_name',{'do_blocks',3}}] )
	    -| ['compiler_generated'] )
	end
'do_block'/3 =
    %% Line 65
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 66
	    apply 'context_framesize'/1
		(_cor0)
	in  %% Line 66
	    apply 'do_block'/5
		(_cor2, _cor1, _cor0, _cor3, [])
'do_block'/5 =
    %% Line 68
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[I|Insns],LiveOut,Context,FPoff0,RevCode> when 'true' ->
	      %% Line 69
	      case apply 'do_insn'/4
		       (I, LiveOut, Context, FPoff0) of
		<{NewIs,FPoff1}> when 'true' ->
		    let <_cor6> =
			%% Line 70
			call 'lists':'reverse'
			    (NewIs, RevCode)
		    in  %% Line 70
			apply 'do_block'/5
			    (Insns, LiveOut, Context, FPoff1, _cor6)
		( <_cor5> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor5})
		  -| ['compiler_generated'] )
	      end
	  %% Line 71
	  <[],_cor13,Context,FPoff,RevCode> when 'true' ->
	      let <FPoff0> =
		  %% Line 72
		  apply 'context_framesize'/1
		      (Context)
	      in  do  %% Line 73
		      case <> of
			<>
			    when call 'erlang':'=:='
				  (FPoff,
				   FPoff0) ->
			    []
			%% Line 74
			<> when 'true' ->
			    call 'erlang':'exit'
				({'hipe_ppc_frame','do_block',FPoff})
		      end
		      %% Line 76
		      call 'lists':'reverse'
			  (RevCode, [])
	  ( <_cor12,_cor11,_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor12,_cor11,_cor10,_cor9,_cor8})
		  -| [{'function_name',{'do_block',5}}] )
	    -| ['compiler_generated'] )
	end
'do_insn'/4 =
    %% Line 78
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 79
	case _cor3 of
	  %% Line 80
	  <{'blr'}> when 'true' ->
	      let <_cor5> =
		  %% Line 81
		  apply 'do_blr'/3
		      (_cor3, _cor1, _cor0)
	      in  let <_cor4> =
		      %% Line 81
		      apply 'context_framesize'/1
			  (_cor1)
		  in  %% Line 81
		      {_cor5,_cor4}
	  %% Line 82
	  <{'pseudo_call',_cor15,_cor16,_cor17,_cor18}> when 'true' ->
	      %% Line 83
	      apply 'do_pseudo_call'/4
		  (_cor3, _cor2, _cor1, _cor0)
	  %% Line 84
	  <{'pseudo_call_prepare',_cor19}> when 'true' ->
	      %% Line 85
	      apply 'do_pseudo_call_prepare'/2
		  (_cor3, _cor0)
	  %% Line 86
	  <{'pseudo_move',_cor20,_cor21}> when 'true' ->
	      let <_cor6> =
		  %% Line 87
		  apply 'do_pseudo_move'/3
		      (_cor3, _cor1, _cor0)
	      in  %% Line 87
		  {_cor6,_cor0}
	  %% Line 88
	  <{'pseudo_tailcall',_cor22,_cor23,_cor24,_cor25}> when 'true' ->
	      let <_cor8> =
		  %% Line 89
		  apply 'do_pseudo_tailcall'/2
		      (_cor3, _cor1)
	      in  let <_cor7> =
		      %% Line 89
		      apply 'context_framesize'/1
			  (_cor1)
		  in  %% Line 89
		      {_cor8,_cor7}
	  %% Line 90
	  <{'pseudo_fmove',_cor26,_cor27}> when 'true' ->
	      let <_cor9> =
		  %% Line 91
		  apply 'do_pseudo_fmove'/3
		      (_cor3, _cor1, _cor0)
	      in  %% Line 91
		  {_cor9,_cor0}
	  %% Line 92
	  <_cor28> when 'true' ->
	      %% Line 93
	      {[_cor3|[]],_cor0}
	end
'do_pseudo_move'/3 =
    %% Line 100
    fun (_cor2,_cor1,_cor0) ->
	let <Dst> =
	    %% Line 101
	    call 'hipe_ppc':'pseudo_move_dst'
		(_cor2)
	in  let <Src> =
		%% Line 102
		call 'hipe_ppc':'pseudo_move_src'
		    (_cor2)
	    in  %% Line 103
		case apply 'temp_is_pseudo'/1
			 (Dst) of
		  %% Line 104
		  <'true'> when 'true' ->
		      let <Offset> =
			  %% Line 105
			  apply 'pseudo_offset'/3
			      (Dst, _cor0, _cor1)
		      in  let <_cor7> =
			      %% Line 106
			      call 'hipe_ppc':'stop_word'
				  ()
			  in  let <_cor6> =
				  %% Line 106
				  apply 'mk_sp'/0
				      ()
			      in  %% Line 106
				  apply 'mk_store'/5
				      (_cor7, Src, Offset, _cor6, [])
		  %% Line 107
		  <_cor17> when 'true' ->
		      %% Line 108
		      case apply 'temp_is_pseudo'/1
			       (Src) of
			%% Line 109
			<'true'> when 'true' ->
			    let <Offset> =
				%% Line 110
				apply 'pseudo_offset'/3
				    (Src, _cor0, _cor1)
			    in  let <_cor10> =
				    %% Line 111
				    call 'hipe_ppc':'ldop_word'
					()
				in  let <_cor9> =
					%% Line 111
					apply 'mk_sp'/0
					    ()
				    in  %% Line 111
					apply 'mk_load'/5
					    (_cor10, Dst, Offset, _cor9, [])
			%% Line 112
			<_cor18> when 'true' ->
			    let <_cor11> =
				%% Line 113
				call 'hipe_ppc':'mk_alu'
				    ('or', Dst, Src, Src)
			    in  %% Line 113
				[_cor11|[]]
		      end
		end
'do_pseudo_fmove'/3 =
    %% Line 117
    fun (_cor2,_cor1,_cor0) ->
	let <Dst> =
	    %% Line 118
	    call 'hipe_ppc':'pseudo_fmove_dst'
		(_cor2)
	in  let <Src> =
		%% Line 119
		call 'hipe_ppc':'pseudo_fmove_src'
		    (_cor2)
	    in  %% Line 120
		case apply 'temp_is_pseudo'/1
			 (Dst) of
		  %% Line 121
		  <'true'> when 'true' ->
		      let <Offset> =
			  %% Line 122
			  apply 'pseudo_offset'/3
			      (Dst, _cor0, _cor1)
		      in  let <_cor6> =
			      %% Line 123
			      apply 'mk_sp'/0
				  ()
			  in  %% Line 123
			      call 'hipe_ppc':'mk_fstore'
				  (Src, Offset, _cor6, 0)
		  %% Line 124
		  <_cor15> when 'true' ->
		      %% Line 125
		      case apply 'temp_is_pseudo'/1
			       (Src) of
			%% Line 126
			<'true'> when 'true' ->
			    let <Offset> =
				%% Line 127
				apply 'pseudo_offset'/3
				    (Src, _cor0, _cor1)
			    in  let <_cor8> =
				    %% Line 128
				    apply 'mk_sp'/0
					()
				in  %% Line 128
				    call 'hipe_ppc':'mk_fload'
					(Dst, Offset, _cor8, 0)
			%% Line 129
			<_cor16> when 'true' ->
			    let <_cor9> =
				%% Line 130
				call 'hipe_ppc':'mk_fp_unary'
				    ('fmr', Dst, Src)
			    in  %% Line 130
				[_cor9|[]]
		      end
		end
'pseudo_offset'/3 =
    %% Line 134
    fun (_cor2,_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 135
	    apply 'context_offset'/2
		(_cor0, _cor2)
	in  %% Line 135
	    call 'erlang':'+'
		(_cor1, _cor3)
'do_blr'/3 =
    %% Line 141
    fun (_cor2,_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 147
	    apply 'word_size'/0
		()
	in  let <_cor3> =
		%% Line 147
		apply 'context_arity'/1
		    (_cor1)
	    in  let <_cor5> =
		    %% Line 147
		    call 'erlang':'*'
			(_cor4, _cor3)
		in  let <_cor6> =
			%% Line 147
			call 'erlang':'+'
			    (_cor0, _cor5)
		    in  let <_cor7> =
			    %% Line 147
			    apply 'adjust_sp'/2
				(_cor6, %% Line 148
					[_cor2|[]])
			in  %% Line 146
			    apply 'restore_lr'/3
				(_cor0, _cor1, _cor7)
'restore_lr'/3 =
    %% Line 150
    fun (_cor2,_cor1,_cor0) ->
	%% Line 151
	case apply 'context_clobbers_lr'/1
		 (_cor1) of
	  %% Line 152
	  <'false'> when 'true' ->
	      _cor0
	  %% Line 153
	  <'true'> when 'true' ->
	      let <Temp> =
		  %% Line 154
		  apply 'mk_temp1'/0
		      ()
	      in  let <_cor8> =
		      %% Line 155
		      call 'hipe_ppc':'ldop_word'
			  ()
		  in  let <_cor6> =
			  %% Line 155
			  apply 'word_size'/0
			      ()
		      in  let <_cor7> =
			      %% Line 155
			      call 'erlang':'-'
				  (_cor2, _cor6)
			  in  let <_cor5> =
				  %% Line 155
				  apply 'mk_sp'/0
				      ()
			      in  let <_cor4> =
				      %% Line 156
				      call 'hipe_ppc':'mk_mtspr'
					  ('lr', Temp)
				  in  %% Line 155
				      apply 'mk_load'/5
					  (_cor8, Temp, _cor7, _cor5, %% Line 156
								      [_cor4|_cor0])
	  ( <_cor9> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor9})
	    -| ['compiler_generated'] )
	end
'adjust_sp'/2 =
    %% Line 160
    fun (_cor1,_cor0) ->
	%% Line 161
	case <> of
	  <>
	      when call 'erlang':'=:='
		    (_cor1,
		     0) ->
	      _cor0
	  %% Line 163
	  <> when 'true' ->
	      let <SP> =
		  %% Line 164
		  apply 'mk_sp'/0
		      ()
	      in  %% Line 165
		  call 'hipe_ppc':'mk_addi'
		      (SP, SP, _cor1, _cor0)
	end
'do_pseudo_call_prepare'/2 =
    %% Line 172
    fun (_cor1,_cor0) ->
	let <NrStkArgs> =
	    %% Line 174
	    call 'hipe_ppc':'pseudo_call_prepare_nrstkargs'
		(_cor1)
	in  let <_cor3> =
		%% Line 175
		apply 'word_size'/0
		    ()
	    in  let <Offset> =
		    %% Line 175
		    call 'erlang':'*'
			(NrStkArgs, _cor3)
		in  let <_cor6> =
			%% Line 176
			call 'erlang':'-'
			    (Offset)
		    in  let <_cor7> =
			    %% Line 176
			    apply 'adjust_sp'/2
				(_cor6, [])
			in  let <_cor5> =
				%% Line 176
				call 'erlang':'+'
				    (_cor0, Offset)
			    in  %% Line 176
				{_cor7,_cor5}
'do_pseudo_call'/4 =
    %% Line 178
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 179
	case call 'hipe_ppc':'pseudo_call_sdesc'
		 (_cor3) of
	  <{'ppc_sdesc',ExnLab,_cor29,OrigArity,_cor30}> when 'true' ->
	      let <FunC> =
		  %% Line 180
		  call 'hipe_ppc':'pseudo_call_func'
		      (_cor3)
	      in  let <_cor11> =
		      %% Line 181
		      ( letrec
			    'lc$^0'/1 =
				fun (_cor8) ->
				    case _cor8 of
				      <[Temp|_cor7]> when 'true' ->
					  ( case apply 'temp_is_pseudo'/1
						     (Temp) of
					      <'true'> when 'true' ->
						  let <_cor9> =
						      apply 'lc$^0'/1
							  (_cor7)
						  in  ( [Temp|_cor9]
							-| ['compiler_generated'] )
					      ( <'false'> when 'true' ->
						    apply 'lc$^0'/1
							(_cor7)
						-| ['compiler_generated'] )
					      ( <_cor10> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_cor10})
						-| ['compiler_generated'] )
					    end
					    -| ['list_comprehension'] )
				      <[]> when 'true' ->
					  []
				      ( <_cor8> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_cor8})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  apply 'lc$^0'/1
				(_cor2)
			-| ['list_comprehension'] )
		  in  let <SDesc> =
			  %% Line 182
			  apply 'mk_sdesc'/3
			      (ExnLab, _cor1, _cor11)
		      in  let <ContLab> =
			      %% Line 183
			      call 'hipe_ppc':'pseudo_call_contlab'
				  (_cor3)
			  in  let <Linkage> =
				  %% Line 184
				  call 'hipe_ppc':'pseudo_call_linkage'
				      (_cor3)
			      in  let <_cor16> =
				      %% Line 185
				      call 'hipe_ppc':'mk_pseudo_call'
					  (FunC, SDesc, ContLab, Linkage)
				  in  let <CallCode> =
					  %% Line 185
					  [_cor16|[]]
				      in  let <_cor18> =
					      %% Line 186
					      call 'hipe_ppc_registers':'nr_args'
						  ()
					  in  let <_cor19> =
						  %% Line 186
						  call 'erlang':'-'
						      (OrigArity, _cor18)
					      in  let <StkArity> =
						      %% Line 186
						      call 'erlang':'max'
							  (0, _cor19)
						  in  let <_cor21> =
							  %% Line 187
							  apply 'stack_need'/3
							      (_cor0, StkArity, FunC)
						      in  do  %% Line 187
							      apply 'context_need_stack'/2
								  (_cor1, _cor21)
							      let <_cor22> =
								  %% Line 188
								  apply 'word_size'/0
								      ()
							      in  let <ArgsBytes> =
								      %% Line 188
								      call 'erlang':'*'
									  (_cor22, StkArity)
								  in  let <_cor24> =
									  %% Line 189
									  call 'erlang':'-'
									      (_cor0, ArgsBytes)
								      in  %% Line 189
									  {CallCode,_cor24}
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'stack_need'/3 =
    %% Line 191
    fun (_cor2,_cor1,_cor0) ->
	%% Line 192
	case _cor0 of
	  %% Line 193
	  <{'ppc_prim',_cor8}> when 'true' ->
	      _cor2
	  %% Line 194
	  <{'ppc_mfa',M,F,A}> when 'true' ->
	      %% Line 195
	      case call 'erlang':'is_builtin'
		       (M, F, A) of
		%% Line 196
		<'true'> when 'true' ->
		    _cor2
		%% Line 197
		<'false'> when 'true' ->
		    apply 'stack_need_general'/2
			(_cor2, _cor1)
		( <_cor3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_cor3})
		  -| ['compiler_generated'] )
	      end
	  %% Line 199
	  <'ctr'> when 'true' ->
	      apply 'stack_need_general'/2
		  (_cor2, _cor1)
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_cor4})
	    -| ['compiler_generated'] )
	end
'stack_need_general'/2 =
    %% Line 202
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 203
	    call 'erlang':'-'
		(16, _cor0)
	in  let <_cor2> =
		%% Line 203
		apply 'word_size'/0
		    ()
	    in  let <_cor4> =
		    %% Line 203
		    call 'erlang':'*'
			(_cor3, _cor2)
		in  let <_cor5> =
			%% Line 203
			call 'erlang':'+'
			    (_cor1, _cor4)
		    in  %% Line 203
			call 'erlang':'max'
			    (_cor1, _cor5)
'mk_sdesc'/3 =
    %% Line 209
    fun (_cor2,_cor1,_cor0) ->
	let <Temps0> =
	    %% Line 210
	    apply 'only_tagged'/1
		(_cor0)
	in  let <Live> =
		%% Line 211
		apply 'mk_live'/2
		    (_cor1, Temps0)
	    in  let <Arity> =
		    %% Line 212
		    apply 'context_arity'/1
			(_cor1)
		in  let <FSize> =
			%% Line 213
			apply 'context_framesize'/1
			    (_cor1)
		    in  let <_cor8> =
			    %% Line 214
			    apply 'word_size'/0
				()
			in  let <_cor9> =
				%% Line 214
				call 'erlang':'div'
				    (FSize, _cor8)
			    in  let <_cor10> =
				    %% Line 214
				    call 'erlang':'-'
					(_cor9, 1)
				in  let <_cor7> =
					%% Line 215
					call 'erlang':'list_to_tuple'
					    (Live)
				    in  %% Line 214
					call 'hipe_ppc':'mk_sdesc'
					    (_cor2, _cor10, Arity, _cor7)
'only_tagged'/1 =
    %% Line 217
    fun (_cor0) ->
	%% Line 218
	( letrec
	      'lc$^0'/1 =
		  fun (_cor4) ->
		      case _cor4 of
			<[X|_cor2]> when 'true' ->
			    let <_cor3> =
				call 'hipe_ppc':'temp_type'
				    (X)
			    in  ( case <> of
				    <>
					when call 'erlang':'=:='
					      (_cor3,
					       'tagged') ->
					let <_cor5> =
					    apply 'lc$^0'/1
						(_cor2)
					in  ( [X|_cor5]
					      -| ['compiler_generated'] )
				    ( <> when 'true' ->
					  apply 'lc$^0'/1
					      (_cor2)
				      -| ['compiler_generated'] )
				  end
				  -| ['list_comprehension'] )
			<[]> when 'true' ->
			    []
			( <_cor4> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_cor4})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_cor0)
	  -| ['list_comprehension'] )
'mk_live'/2 =
    %% Line 220
    fun (_cor1,_cor0) ->
	let <_cor7> =
	    %% Line 221
	    ( letrec
		  'lc$^0'/1 =
		      fun (_cor4) ->
			  case _cor4 of
			    <[Temp|_cor3]> when 'true' ->
				let <_cor5> =
				    apply 'temp_to_slot'/2
					(_cor1, Temp)
				in  let <_cor6> =
					apply 'lc$^0'/1
					    (_cor3)
				    in  ( [_cor5|_cor6]
					  -| ['compiler_generated'] )
			    <[]> when 'true' ->
				[]
			    ( <_cor4> when 'true' ->
				  ( primop 'match_fail'
					({'function_clause',_cor4})
				    -| [{'function_name',{'lc$^0',1}}] )
			      -| ['compiler_generated'] )
			  end
	      in  apply 'lc$^0'/1
		      (_cor0)
	      -| ['list_comprehension'] )
	in  %% Line 221
	    call 'lists':'sort'
		(_cor7)
'temp_to_slot'/2 =
    %% Line 223
    fun (_cor1,_cor0) ->
	let <_cor4> =
	    %% Line 224
	    apply 'context_framesize'/1
		(_cor1)
	in  let <_cor3> =
		%% Line 224
		apply 'context_offset'/2
		    (_cor1, _cor0)
	    in  let <_cor5> =
		    %% Line 224
		    call 'erlang':'+'
			(_cor4, _cor3)
		in  let <_cor2> =
			%% Line 225
			apply 'word_size'/0
			    ()
		    in  %% Line 225
			call 'erlang':'div'
			    (_cor5, _cor2)
'mk_minimal_sdesc'/1 =
    %% Line 227
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 228
	    apply 'context_arity'/1
		(_cor0)
	in  %% Line 228
	    call 'hipe_ppc':'mk_sdesc'
		([], 0, _cor1, {})
'do_pseudo_tailcall'/2 =
    %% Line 234
    fun (_cor1,_cor0) ->
	let <Arity> =
	    %% Line 235
	    apply 'context_arity'/1
		(_cor0)
	in  let <Args> =
		%% Line 236
		call 'hipe_ppc':'pseudo_tailcall_stkargs'
		    (_cor1)
	    in  let <FunC> =
		    %% Line 237
		    call 'hipe_ppc':'pseudo_tailcall_func'
			(_cor1)
		in  let <Linkage> =
			%% Line 238
			call 'hipe_ppc':'pseudo_tailcall_linkage'
			    (_cor1)
		    in  %% Line 239
			case apply 'do_tailcall_args'/2
				 (Args, _cor0) of
			  <{Insns,FPoff1}> when 'true' ->
			      do  %% Line 240
				  apply 'context_need_stack'/2
				      (_cor0, FPoff1)
				  let <StkArity> =
				      %% Line 241
				      call 'erlang':'length'
					  (Args)
				  in  let <_cor9> =
					  %% Line 242
					  call 'erlang':'-'
					      (Arity, StkArity)
				      in  let <_cor8> =
					      %% Line 242
					      apply 'word_size'/0
						  ()
					  in  let <_cor10> =
						  %% Line 242
						  call 'erlang':'*'
						      (_cor9, _cor8)
					      in  let <FPoff2> =
						      %% Line 242
						      call 'erlang':'+'
							  (FPoff1, _cor10)
						  in  let <_cor12> =
							  %% Line 243
							  apply 'stack_need'/3
							      (FPoff2, StkArity, FunC)
						      in  do  %% Line 243
							      apply 'context_need_stack'/2
								  (_cor0, _cor12)
							      let <_cor14> =
								  %% Line 245
								  case FunC of
								    %% Line 246
								    <'ctr'> when 'true' ->
									%% Line 247
									call 'hipe_ppc':'mk_bctr'
									    ([])
								    %% Line 248
								    <Fun> when 'true' ->
									%% Line 249
									call 'hipe_ppc':'mk_b_fun'
									    (Fun, Linkage)
								  end
							      in  let <_cor18> =
								      %% Line 252
								      apply 'context_framesize'/1
									  (_cor0)
								  in  let <_cor16> =
									  %% Line 253
									  apply 'adjust_sp'/2
									      (FPoff2, [_cor14|[]])
								      in  let <_cor17> =
									      %% Line 253
									      call 'erlang':'++'
										  (Insns, _cor16)
									  in  %% Line 252
									      apply 'restore_lr'/3
										  (_cor18, _cor0, _cor17)
			  ( <_cor6> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor6})
			    -| ['compiler_generated'] )
			end
'do_tailcall_args'/2 =
    %% Line 255
    fun (_cor1,_cor0) ->
	let <FPoff0> =
	    %% Line 256
	    apply 'context_framesize'/1
		(_cor0)
	in  let <Arity> =
		%% Line 257
		apply 'context_arity'/1
		    (_cor0)
	    in  let <_cor4> =
		    %% Line 258
		    apply 'word_size'/0
			()
		in  let <FrameTop> =
			%% Line 258
			call 'erlang':'*'
			    (_cor4, Arity)
		    in  let <_cor7> =
			    %% Line 259
			    apply 'word_size'/0
				()
			in  let <_cor6> =
				%% Line 259
				call 'erlang':'length'
				    (_cor1)
			    in  let <_cor8> =
				    %% Line 259
				    call 'erlang':'*'
					(_cor7, _cor6)
				in  let <DangerOff> =
					%% Line 259
					call 'erlang':'-'
					    (FrameTop, _cor8)
				    in  let <Moves> =
					    %% Line 261
					    apply 'mk_moves'/3
						(_cor1, FrameTop, [])
					in  %% Line 263
					    case %% Line 264
						 apply 'split_moves'/6
						     (Moves, _cor0, DangerOff, [], [], []) of
					      <{Stores,Simple,Conflict}> when 'true' ->
						  do  %% Line 266
						      case <> of
							<>
							    when try
								  let <_cor12> =
								      call 'erlang':'-'
									  (FPoff0)
								  in  call 'erlang':'<'
									  (DangerOff, _cor12)
							      of <Try> ->
								  Try
							      catch <T,R> ->
								  'false' ->
							    let <_cor13> =
								%% Line 267
								call 'erlang':'-'
								    (FPoff0)
							    in  %% Line 267
								call 'erlang':'exit'
								    ({'hipe_ppc_frame','do_tailcall_args',DangerOff,_cor13})
							%% Line 268
							<> when 'true' ->
							    []
						      end
						      %% Line 272
						      case apply 'split_conflict'/4
							       (Conflict, FPoff0, [], []) of
							<{Pushes,Pops,FPoff2}> when 'true' ->
							    let <TempReg> =
								%% Line 274
								call 'hipe_ppc_registers':'temp1'
								    ()
							    in  let <_cor21> =
								    %% Line 276
								    call 'erlang':'-'
									(FPoff2, FPoff0)
								in  let <_cor22> =
									%% Line 276
									call 'erlang':'-'
									    (_cor21)
								    in  let <_cor17> =
									    %% Line 280
									    apply 'simple_moves'/4
										(Pops, FPoff2, TempReg, %% Line 281
													[])
									in  let <_cor18> =
										%% Line 279
										apply 'simple_moves'/4
										    (Simple, FPoff2, TempReg, _cor17)
									    in  let <_cor19> =
										    %% Line 278
										    apply 'store_moves'/4
											(Stores, FPoff2, TempReg, _cor18)
										in  let <_cor20> =
											%% Line 277
											apply 'simple_moves'/4
											    (Pushes, FPoff2, TempReg, _cor19)
										    in  let <_cor23> =
											    %% Line 276
											    apply 'adjust_sp'/2
												(_cor22, _cor20)
											in  %% Line 276
											    {_cor23,%% Line 282
												    FPoff2}
							( <_cor15> when 'true' ->
							      primop 'match_fail'
								  ({'badmatch',_cor15})
							  -| ['compiler_generated'] )
						      end
					      ( <_cor11> when 'true' ->
						    primop 'match_fail'
							({'badmatch',_cor11})
						-| ['compiler_generated'] )
					    end
'mk_moves'/3 =
    %% Line 284
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Arg|Args],Off,Moves> when 'true' ->
	      let <_cor3> =
		  %% Line 285
		  apply 'word_size'/0
		      ()
	      in  let <Off1> =
		      %% Line 285
		      call 'erlang':'-'
			  (Off, _cor3)
		  in  %% Line 286
		      apply 'mk_moves'/3
			  (Args, Off1, [{Arg,Off1}|Moves])
	  %% Line 287
	  <[],_cor8,Moves> when 'true' ->
	      %% Line 288
	      Moves
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6,_cor5})
		  -| [{'function_name',{'mk_moves',3}}] )
	    -| ['compiler_generated'] )
	end
'split_moves'/6 =
    %% Line 290
    fun (_cor5,_cor4,_cor3,_cor2,_cor1,_cor0) ->
	case <_cor5,_cor4,_cor3,_cor2,_cor1,_cor0> of
	  <[Move|Moves],Context,DangerOff,Stores,Simple,Conflict> when 'true' ->
	      %% Line 291
	      case Move of
		<{Src,DstOff}> when 'true' ->
		    %% Line 292
		    case apply 'src_is_pseudo'/1
			     (Src) of
		      %% Line 293
		      <'false'> when 'true' ->
			  %% Line 294
			  apply 'split_moves'/6
			      (Moves, Context, DangerOff, [Move|Stores], %% Line 295
									 Simple, %% Line 295
										 Conflict)
		      %% Line 296
		      <'true'> when 'true' ->
			  let <SrcOff> =
			      %% Line 297
			      apply 'context_offset'/2
				  (Context, Src)
			  in  let <Type> =
				  %% Line 298
				  apply 'typeof_temp'/1
				      (Src)
			      in  %% Line 299
				  case <> of
				    <>
					when call 'erlang':'=:='
					      (SrcOff,
					       DstOff) ->
					%% Line 300
					apply 'split_moves'/6
					    (Moves, Context, DangerOff, Stores, %% Line 301
										Simple, %% Line 301
											Conflict)
				    %% Line 302
				    <>
					when call 'erlang':'>='
					      (SrcOff,
					       DangerOff) ->
					%% Line 303
					apply 'split_moves'/6
					    (Moves, Context, DangerOff, Stores, %% Line 304
										Simple, %% Line 304
											[{SrcOff,DstOff,Type}|Conflict])
				    %% Line 305
				    <> when 'true' ->
					%% Line 306
					apply 'split_moves'/6
					    (Moves, Context, DangerOff, Stores, %% Line 307
										[{SrcOff,DstOff,Type}|Simple], %% Line 307
													       Conflict)
				  end
		      ( <_cor9> when 'true' ->
			    primop 'match_fail'
				({'case_clause',_cor9})
			-| ['compiler_generated'] )
		    end
		( <_cor6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_cor6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 310
	  <[],_cor16,_cor17,Stores,Simple,Conflict> when 'true' ->
	      %% Line 311
	      {Stores,Simple,Conflict}
	  ( <_cor15,_cor14,_cor13,_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12,_cor11,_cor10})
		  -| [{'function_name',{'split_moves',6}}] )
	    -| ['compiler_generated'] )
	end
'split_conflict'/4 =
    %% Line 313
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{SrcOff,DstOff,Type}|Conflict],FPoff,Pushes,Pops> when 'true' ->
	      let <_cor4> =
		  %% Line 314
		  apply 'word_size'/0
		      ()
	      in  let <FPoff1> =
		      %% Line 314
		      call 'erlang':'+'
			  (FPoff, _cor4)
		  in  let <_cor6> =
			  %% Line 315
			  call 'erlang':'-'
			      (FPoff1)
		      in  let <Push> = {%% Line 315
			       SrcOff,_cor6,%% Line 315
					    Type}
			  in  let <_cor8> =
				  %% Line 316
				  call 'erlang':'-'
				      (FPoff1)
			      in  let <Pop> = {_cor8,%% Line 316
					     DstOff,%% Line 316
						    Type}
				  in  %% Line 317
				      apply 'split_conflict'/4
					  (Conflict, FPoff1, [Push|Pushes], [Pop|Pops])
	  %% Line 318
	  <[],FPoff,Pushes,Pops> when 'true' ->
	      let <_cor10> =
		  %% Line 319
		  call 'lists':'reverse'
		      (Pushes)
	      in  %% Line 319
		  {_cor10,Pops,FPoff}
	  ( <_cor14,_cor13,_cor12,_cor11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor14,_cor13,_cor12,_cor11})
		  -| [{'function_name',{'split_conflict',4}}] )
	    -| ['compiler_generated'] )
	end
'simple_moves'/4 =
    %% Line 321
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{SrcOff,DstOff,Type}|Moves],FPoff,TempReg,Rest> when 'true' ->
	      let <Temp> =
		  %% Line 322
		  call 'hipe_ppc':'mk_temp'
		      (TempReg, Type)
	      in  let <SP> =
		      %% Line 323
		      apply 'mk_sp'/0
			  ()
		  in  let <LoadOff> =
			  %% Line 324
			  call 'erlang':'+'
			      (FPoff, SrcOff)
		      in  let <StoreOff> =
			      %% Line 325
			      call 'erlang':'+'
				  (FPoff, DstOff)
			  in  let <_cor10> =
				  %% Line 327
				  call 'hipe_ppc':'ldop_word'
				      ()
			      in  let <_cor8> =
				      %% Line 328
				      call 'hipe_ppc':'stop_word'
					  ()
				  in  let <_cor9> =
					  %% Line 328
					  apply 'mk_store'/5
					      (_cor8, Temp, StoreOff, SP, %% Line 329
									  Rest)
				      in  let <_cor11> =
					      %% Line 327
					      apply 'mk_load'/5
						  (_cor10, Temp, LoadOff, SP, _cor9)
					  in  %% Line 326
					      apply 'simple_moves'/4
						  (Moves, FPoff, TempReg, _cor11)
	  %% Line 330
	  <[],_cor16,_cor17,Rest> when 'true' ->
	      %% Line 331
	      Rest
	  ( <_cor15,_cor14,_cor13,_cor12> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor15,_cor14,_cor13,_cor12})
		  -| [{'function_name',{'simple_moves',4}}] )
	    -| ['compiler_generated'] )
	end
'store_moves'/4 =
    %% Line 333
    fun (_cor3,_cor2,_cor1,_cor0) ->
	case <_cor3,_cor2,_cor1,_cor0> of
	  <[{Src,DstOff}|Moves],FPoff,TempReg,Rest> when 'true' ->
	      let <SP> =
		  %% Line 335
		  apply 'mk_sp'/0
		      ()
	      in  let <StoreOff> =
		      %% Line 336
		      call 'erlang':'+'
			  (FPoff, DstOff)
		  in  let <NewSrc,FixSrc> =
			  %% Line 338
			  case call 'hipe_ppc':'is_temp'
				   (Src) of
			    %% Line 339
			    <'true'> when 'true' ->
				%% Line 340
				<Src,[]>
			    %% Line 341
			    <_cor18> when 'true' ->
				let <Temp> =
				    %% Line 342
				    call 'hipe_ppc':'mk_temp'
					(TempReg, 'untagged')
				in  let <_cor7> =
					%% Line 343
					call 'hipe_ppc':'mk_li'
					    (Temp, Src)
				    in  %% Line 343
					<Temp,_cor7>
			  end
		      in  let <_cor11> =
			      %% Line 346
			      call 'hipe_ppc':'stop_word'
				  ()
			  in  let <_cor12> =
				  %% Line 346
				  apply 'mk_store'/5
				      (_cor11, NewSrc, %% Line 347
						       StoreOff, %% Line 347
								 SP, %% Line 347
								     Rest)
			      in  let <_cor13> =
				      %% Line 346
				      call 'erlang':'++'
					  (FixSrc, _cor12)
				  in  %% Line 345
				      apply 'store_moves'/4
					  (Moves, FPoff, TempReg, _cor13)
	  %% Line 348
	  <[],_cor19,_cor20,Rest> when 'true' ->
	      %% Line 349
	      Rest
	  ( <_cor17,_cor16,_cor15,_cor14> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor17,_cor16,_cor15,_cor14})
		  -| [{'function_name',{'store_moves',4}}] )
	    -| ['compiler_generated'] )
	end
'mk_context'/4 =
    %% Line 357
    fun (_cor3,_cor2,_cor1,_cor0) ->
	%% Line 358
	case apply 'mk_temp_map'/3
		 (_cor2, _cor0, _cor1) of
	  <{Map,MinOff}> when 'true' ->
	      let <FrameSize> =
		  %% Line 359
		  call 'erlang':'-'
		      (MinOff)
	      in  let <RefMaxStack> =
		      %% Line 360
		      call 'hipe_bifs':'ref'
			  (FrameSize)
		  in  let <_cor7> =
			  %% Line 362
			  call 'erlang':'length'
			      (_cor2)
		      in  %% Line 361
			  {'context',_cor3,%% Line 362
					   FrameSize,_cor7,%% Line 363
							   Map,_cor0,%% Line 363
								     RefMaxStack}
	  ( <_cor4> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_cor4})
	    -| ['compiler_generated'] )
	end
'context_need_stack'/2 =
    %% Line 365
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'context',_cor5,_cor6,_cor7,_cor8,_cor9,RM},N> when 'true' ->
	      let <M> =
		  %% Line 366
		  call 'hipe_bifs':'ref_get'
		      (RM)
	      in  %% Line 367
		  case <> of
		    <>
			when call 'erlang':'>'
			      (N,
			       M) ->
			call 'hipe_bifs':'ref_set'
			    (RM, N)
		    %% Line 368
		    <> when 'true' ->
			[]
		  end
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'context_need_stack',2}}] )
	    -| ['compiler_generated'] )
	end
'context_maxstack'/1 =
    %% Line 371
    fun (_cor0) ->
	case _cor0 of
	  <{'context',_cor2,_cor3,_cor4,_cor5,_cor6,RM}> when 'true' ->
	      %% Line 372
	      call 'hipe_bifs':'ref_get'
		  (RM)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'context_maxstack',1}}] )
	    -| ['compiler_generated'] )
	end
'context_arity'/1 =
    %% Line 374
    fun (_cor0) ->
	case _cor0 of
	  <{'context',_cor2,_cor3,Arity,_cor4,_cor5,_cor6}> when 'true' ->
	      %% Line 375
	      Arity
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'context_arity',1}}] )
	    -| ['compiler_generated'] )
	end
'context_framesize'/1 =
    %% Line 377
    fun (_cor0) ->
	case _cor0 of
	  <{'context',_cor2,FrameSize,_cor3,_cor4,_cor5,_cor6}> when 'true' ->
	      %% Line 378
	      FrameSize
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'context_framesize',1}}] )
	    -| ['compiler_generated'] )
	end
'context_liveness'/1 =
    %% Line 380
    fun (_cor0) ->
	case _cor0 of
	  <{'context',Liveness,_cor2,_cor3,_cor4,_cor5,_cor6}> when 'true' ->
	      %% Line 381
	      Liveness
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'context_liveness',1}}] )
	    -| ['compiler_generated'] )
	end
'context_offset'/2 =
    %% Line 383
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <{'context',_cor4,_cor5,_cor6,Map,_cor7,_cor8},Temp> when 'true' ->
	      %% Line 384
	      apply 'tmap_lookup'/2
		  (Map, Temp)
	  ( <_cor3,_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor3,_cor2})
		  -| [{'function_name',{'context_offset',2}}] )
	    -| ['compiler_generated'] )
	end
'context_clobbers_lr'/1 =
    %% Line 386
    fun (_cor0) ->
	case _cor0 of
	  <{'context',_cor2,_cor3,_cor4,_cor5,ClobbersLR,_cor6}> when 'true' ->
	      ClobbersLR
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1})
		  -| [{'function_name',{'context_clobbers_lr',1}}] )
	    -| ['compiler_generated'] )
	end
'mk_temp_map'/3 =
    %% Line 388
    fun (_cor2,_cor1,_cor0) ->
	let <_cor5> =
	    %% Line 389
	    apply 'word_size'/0
		()
	in  let <_cor4> =
		%% Line 389
		call 'erlang':'length'
		    (_cor2)
	    in  let <_cor6> =
		    %% Line 389
		    call 'erlang':'*'
			(_cor5, _cor4)
		in  let <_cor3> =
			%% Line 390
			apply 'tmap_empty'/0
			    ()
		    in  %% Line 389
			case apply 'enter_vars'/3
				 (_cor2, _cor6, _cor3) of
			  <{Map,0}> when 'true' ->
			      let <TempsList> =
				  %% Line 391
				  apply 'tset_to_list'/1
				      (_cor0)
			      in  let <_cor11> =
				      %% Line 393
				      case _cor1 of
					%% Line 394
					<'false'> when 'true' ->
					    TempsList
					%% Line 395
					<'true'> when 'true' ->
					    let <RA> =
						%% Line 396
						call 'hipe_ppc':'mk_new_temp'
						    ('untagged')
					    in  %% Line 397
						[RA|TempsList]
					( <_cor10> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_cor10})
					  -| ['compiler_generated'] )
				      end
				  in  %% Line 399
				      apply 'enter_vars'/3
					  (_cor11, 0, Map)
			  ( <_cor7> when 'true' ->
				primop 'match_fail'
				    ({'badmatch',_cor7})
			    -| ['compiler_generated'] )
			end
'enter_vars'/3 =
    %% Line 401
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[V|Vs],PrevOff,Map> when 'true' ->
	      let <_cor5> =
		  %% Line 403
		  case call 'hipe_ppc':'temp_type'
			   (V) of
		    %% Line 404
		    <'double'> when 'true' ->
			call 'erlang':'-'
			    (PrevOff, 8)
		    %% Line 405
		    <_cor11> when 'true' ->
			let <_cor3> =
			    apply 'word_size'/0
				()
			in  call 'erlang':'-'
				(PrevOff, _cor3)
		  end
	      in  let <_cor7> =
		      %% Line 407
		      apply 'tmap_bind'/3
			  (Map, V, _cor5)
		  in  %% Line 407
		      apply 'enter_vars'/3
			  (Vs, _cor5, _cor7)
	  %% Line 408
	  <[],Off,Map> when 'true' ->
	      %% Line 409
	      {Map,Off}
	  ( <_cor10,_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor10,_cor9,_cor8})
		  -| [{'function_name',{'enter_vars',3}}] )
	    -| ['compiler_generated'] )
	end
'tmap_empty'/0 =
    %% Line 411
    fun () ->
	%% Line 412
	call 'gb_trees':'empty'
	    ()
'tmap_bind'/3 =
    %% Line 414
    fun (_cor2,_cor1,_cor0) ->
	%% Line 415
	call 'gb_trees':'insert'
	    (_cor1, _cor0, _cor2)
'tmap_lookup'/2 =
    %% Line 417
    fun (_cor1,_cor0) ->
	%% Line 418
	call 'gb_trees':'get'
	    (_cor0, _cor1)
'do_prologue'/2 =
    %% Line 442
    fun (_cor1,_cor0) ->
	let <MaxStack> =
	    %% Line 443
	    apply 'context_maxstack'/1
		(_cor0)
	in  %% Line 444
	    case <> of
	      <>
		  when call 'erlang':'>'
			(MaxStack,
			 0) ->
		  let <FrameSize> =
		      %% Line 445
		      apply 'context_framesize'/1
			  (_cor0)
		  in  let <OldStartLab> =
			  %% Line 446
			  call 'hipe_ppc_cfg':'start_label'
			      (_cor1)
		      in  let <NewStartLab> =
			      %% Line 447
			      call 'hipe_gensym':'get_next_label'
				  ('ppc')
			  in  let <_cor6> =
				  %% Line 449
				  call 'hipe_ppc_registers':'proc_pointer'
				      ()
			      in  let <P> =
				      %% Line 449
				      call 'hipe_ppc':'mk_temp'
					  (_cor6, 'untagged')
				  in  let <Temp1> =
					  %% Line 450
					  apply 'mk_temp1'/0
					      ()
				      in  let <SP> =
					      %% Line 451
					      apply 'mk_sp'/0
						  ()
					  in  let <ClobbersLR> =
						  %% Line 453
						  apply 'context_clobbers_lr'/1
						      (_cor0)
					      in  let <_cor11> =
						      %% Line 454
						      call 'hipe_ppc':'mk_b_label'
							  (OldStartLab)
						  in  let <GotoOldStartCode> =
							  %% Line 454
							  [_cor11|[]]
						      in  let <_cor17> =
							      %% Line 456
							      case ClobbersLR of
								%% Line 457
								<'false'> when 'true' ->
								    GotoOldStartCode
								%% Line 458
								<'true'> when 'true' ->
								    let <_cor15> =
									call 'hipe_ppc':'stop_word'
									    ()
								    in  let <_cor13> =
									    %% Line 459
									    apply 'word_size'/0
										()
									in  let <_cor14> =
										%% Line 459
										call 'erlang':'-'
										    (FrameSize, _cor13)
									    in  apply 'mk_store'/5
										    (_cor15, Temp1, _cor14, %% Line 459
													    SP, %% Line 459
														GotoOldStartCode)
								( <_cor16> when 'true' ->
								      primop 'match_fail'
									  ({'case_clause',_cor16})
								  -| ['compiler_generated'] )
							      end
							  in  let <Arity> =
								  %% Line 462
								  apply 'context_arity'/1
								      (_cor0)
							      in  let <_cor21> =
								      %% Line 463
								      call 'erlang':'-'
									  (16, Arity)
								  in  let <_cor20> =
									  %% Line 463
									  apply 'word_size'/0
									      ()
								      in  let <_cor22> =
									      %% Line 463
									      call 'erlang':'*'
										  (_cor21, _cor20)
									  in  let <Guaranteed> =
										  %% Line 463
										  call 'erlang':'max'
										      (0, _cor22)
									      in  let <CFG1,NewStartCode> =
										      %% Line 466
										      case <> of
											<>
											    when call 'erlang':'=<'
												  (MaxStack,
												   Guaranteed) ->
											    let <_cor24> =
												%% Line 468
												call 'erlang':'-'
												    (FrameSize)
											    in  let <AllocFrameCode> =
												    %% Line 468
												    apply 'adjust_sp'/2
													(_cor24, _cor17)
												in  let <_cor28> =
													%% Line 470
													case ClobbersLR of
													  %% Line 471
													  <'false'> when 'true' ->
													      AllocFrameCode
													  %% Line 472
													  <'true'> when 'true' ->
													      let <_cor26> =
														  call 'hipe_ppc':'mk_mfspr'
														      (Temp1, 'lr')
													      in  [_cor26|AllocFrameCode]
													  ( <_cor27> when 'true' ->
														primop 'match_fail'
														    ({'case_clause',_cor27})
													    -| ['compiler_generated'] )
													end
												    in  %% Line 474
													<_cor1,_cor28>
											%% Line 475
											<> when 'true' ->
											    let <AllocFrameLab> =
												%% Line 477
												call 'hipe_gensym':'get_next_label'
												    ('ppc')
											    in  let <IncStackLab> =
												    %% Line 478
												    call 'hipe_gensym':'get_next_label'
													('ppc')
												in  let <Temp2> =
													%% Line 479
													apply 'mk_temp2'/0
													    ()
												    in  let <_cor33> =
													    %% Line 482
													    call 'hipe_ppc':'mk_pseudo_bc'
														('lt', IncStackLab, AllocFrameLab, 1.00000000000000002082e-02)
													in  let <NewStartCodeTail2> =
														%% Line 482
														[_cor33|[]]
													    in  let <_cor37> =
														    %% Line 484
														    case ClobbersLR of
														      %% Line 485
														      <'false'> when 'true' ->
															  NewStartCodeTail2
														      %% Line 486
														      <'true'> when 'true' ->
															  let <_cor35> =
															      call 'hipe_ppc':'mk_mfspr'
																  (Temp1, 'lr')
															  in  [_cor35|NewStartCodeTail2]
														      ( <_cor36> when 'true' ->
															    primop 'match_fail'
																({'case_clause',_cor36})
															-| ['compiler_generated'] )
														    end
														in  let <_cor40> =
															%% Line 489
															call 'hipe_ppc':'ldop_word'
															    ()
														    in  let <_cor39> =
															    %% Line 489
															    call 'hipe_bifs':'get_rts_param'
																(43)
															in  let <_cor41> =
																%% Line 489
																call 'hipe_ppc':'mk_load'
																    (_cor40, Temp1, _cor39, P)
															    in  let <_cor43> =
																    %% Line 490
																    call 'erlang':'-'
																	(MaxStack)
																in  let <_cor42> =
																	%% Line 491
																	call 'hipe_ppc':'mk_cmp'
																	    ('cmpl', Temp2, Temp1)
																    in  let <_cor44> =
																	    %% Line 490
																	    call 'hipe_ppc':'mk_addi'
																		(Temp2, SP, _cor43, %% Line 491
																				    [_cor42|_cor37])
																	in  let <NewStartCode0> =
																		%% Line 489
																		[_cor41|_cor44]
																	    in  let <_cor48> =
																		    %% Line 495
																		    case <> of
																		      <>
																			  when call 'erlang':'=:='
																				(MaxStack,
																				 FrameSize) ->
																			  let <_cor46> =
																			      %% Line 497
																			      call 'hipe_ppc':'mk_alu'
																				  ('or', SP, Temp2, Temp2)
																			  in  %% Line 497
																			      [_cor46|_cor17]
																		      %% Line 499
																		      <> when 'true' ->
																			  let <_cor47> =
																			      %% Line 501
																			      call 'erlang':'-'
																				  (FrameSize)
																			  in  %% Line 501
																			      apply 'adjust_sp'/2
																				  (_cor47, _cor17)
																		    end
																		in  let <_cor51> =
																			%% Line 505
																			call 'hipe_ppc':'mk_prim'
																			    ('inc_stack_0')
																		    in  let <_cor50> =
																			    %% Line 506
																			    apply 'mk_minimal_sdesc'/1
																				(_cor0)
																			in  let <_cor52> =
																				%% Line 505
																				call 'hipe_ppc':'mk_bl'
																				    (_cor51, _cor50, %% Line 506
																						     'not_remote')
																			    in  let <_cor53> =
																				    %% Line 507
																				    call 'hipe_ppc':'mk_mtspr'
																					('lr', Temp1)
																				in  let <_cor54> =
																					%% Line 508
																					call 'hipe_ppc':'mk_b_label'
																					    (NewStartLab)
																				    in  let <IncStackCodeTail> =
																					    %% Line 505
																					    [_cor52|%% Line 507
																						    [_cor53|%% Line 508
																							    [_cor54|[]]]]
																					in  let <_cor58> =
																						%% Line 510
																						case ClobbersLR of
																						  %% Line 511
																						  <'true'> when 'true' ->
																						      IncStackCodeTail
																						  %% Line 512
																						  <'false'> when 'true' ->
																						      let <_cor56> =
																							  call 'hipe_ppc':'mk_mfspr'
																							      (Temp1, 'lr')
																						      in  [_cor56|IncStackCodeTail]
																						  ( <_cor57> when 'true' ->
																							primop 'match_fail'
																							    ({'case_clause',_cor57})
																						    -| ['compiler_generated'] )
																						end
																					    in  let <_cor60> =
																						    %% Line 516
																						    call 'hipe_bb':'mk_bb'
																							(_cor48)
																						in  let <CFG0a> =
																							%% Line 515
																							call 'hipe_ppc_cfg':'bb_add'
																							    (_cor1, AllocFrameLab, _cor60)
																						    in  let <_cor62> =
																							    %% Line 518
																							    call 'hipe_bb':'mk_bb'
																								(_cor58)
																							in  let <CFG0b> =
																								%% Line 517
																								call 'hipe_ppc_cfg':'bb_add'
																								    (CFG0a, IncStackLab, _cor62)
																							    in  %% Line 520
																								<CFG0b,NewStartCode0>
										      end
										  in  let <_cor66> =
											  %% Line 524
											  call 'hipe_bb':'mk_bb'
											      (NewStartCode)
										      in  let <CFG2> =
											      %% Line 523
											      call 'hipe_ppc_cfg':'bb_add'
												  (CFG1, NewStartLab, _cor66)
											  in  %% Line 525
											      call 'hipe_ppc_cfg':'start_label_update'
												  (CFG2, NewStartLab)
	      %% Line 526
	      <> when 'true' ->
		  _cor1
	    end
'mk_load'/5 =
    %% Line 534
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 535
	call 'hipe_ppc':'mk_load'
	    (_cor4, _cor3, _cor2, _cor1, 'error', _cor0)
'mk_store'/5 =
    %% Line 540
    fun (_cor4,_cor3,_cor2,_cor1,_cor0) ->
	%% Line 541
	call 'hipe_ppc':'mk_store'
	    (_cor4, _cor3, _cor2, _cor1, 0, _cor0)
'typeof_temp'/1 =
    %% Line 545
    fun (_cor0) ->
	%% Line 546
	call 'hipe_ppc':'temp_type'
	    (_cor0)
'mk_sp'/0 =
    %% Line 550
    fun () ->
	let <_cor0> =
	    %% Line 551
	    call 'hipe_ppc_registers':'stack_pointer'
		()
	in  %% Line 551
	    call 'hipe_ppc':'mk_temp'
		(_cor0, 'untagged')
'mk_temp1'/0 =
    %% Line 555
    fun () ->
	let <_cor0> =
	    %% Line 556
	    call 'hipe_ppc_registers':'temp1'
		()
	in  %% Line 556
	    call 'hipe_ppc':'mk_temp'
		(_cor0, 'untagged')
'mk_temp2'/0 =
    %% Line 560
    fun () ->
	let <_cor0> =
	    %% Line 561
	    call 'hipe_ppc_registers':'temp2'
		()
	in  %% Line 561
	    call 'hipe_ppc':'mk_temp'
		(_cor0, 'untagged')
'src_is_pseudo'/1 =
    %% Line 565
    fun (_cor0) ->
	%% Line 566
	( case call 'hipe_ppc':'is_temp'
		   (_cor0) of
	    ( <( 'true'
		 -| ['compiler_generated'] )> when 'true' ->
		  apply 'temp_is_pseudo'/1
		      (_cor0)
	      -| ['compiler_generated'] )
	    ( <( 'false'
		 -| ['compiler_generated'] )> when 'true' ->
		  'false'
	      -| ['compiler_generated'] )
	    ( <_cor1> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {( 'badarg'
			      -| ['compiler_generated'] ),_cor1}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'temp_is_pseudo'/1 =
    %% Line 568
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 569
	    call 'hipe_ppc':'temp_is_precoloured'
		(_cor0)
	in  %% Line 569
	    call 'erlang':'not'
		(_cor1)
'clobbers_lr'/1 =
    %% Line 575
    fun (_cor0) ->
	case _cor0 of
	  <[I|Insns]> when 'true' ->
	      %% Line 576
	      case I of
		%% Line 577
		<{'pseudo_call',_cor3,_cor4,_cor5,_cor6}> when 'true' ->
		    'true'
		%% Line 579
		<_cor7> when 'true' ->
		    apply 'clobbers_lr'/1
			(Insns)
	      end
	  %% Line 581
	  <[]> when 'true' ->
	      'false'
	  ( <_cor2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2})
		  -| [{'function_name',{'clobbers_lr',1}}] )
	    -| ['compiler_generated'] )
	end
'all_temps'/2 =
    %% Line 587
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 588
	    apply 'tset_empty'/0
		()
	in  let <S0> =
		%% Line 588
		apply 'find_temps'/2
		    (_cor1, _cor2)
	    in  let <S1> =
		    %% Line 589
		    apply 'tset_del_list'/2
			(S0, _cor0)
		in  let <_cor7> =
			%% Line 590
			( fun (_cor5) ->
			      apply 'temp_is_pseudo'/1
				  (_cor5)
			  -| [{'id',{0,0,'-all_temps/2-fun-0-'}}] )
		    in  %% Line 590
			apply 'tset_filter'/2
			    (S1, _cor7)
'find_temps'/2 =
    %% Line 592
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[I|Insns],S0> when 'true' ->
	      let <_cor2> =
		  %% Line 593
		  call 'hipe_ppc_defuse':'insn_def_all'
		      (I)
	      in  let <S1> =
		      %% Line 593
		      apply 'tset_add_list'/2
			  (S0, _cor2)
		  in  let <_cor4> =
			  %% Line 594
			  call 'hipe_ppc_defuse':'insn_use_all'
			      (I)
		      in  let <S2> =
			      %% Line 594
			      apply 'tset_add_list'/2
				  (S1, _cor4)
			  in  %% Line 595
			      apply 'find_temps'/2
				  (Insns, S2)
	  %% Line 596
	  <[],S> when 'true' ->
	      %% Line 597
	      S
	  ( <_cor7,_cor6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor7,_cor6})
		  -| [{'function_name',{'find_temps',2}}] )
	    -| ['compiler_generated'] )
	end
'tset_empty'/0 =
    %% Line 599
    fun () ->
	%% Line 600
	call 'gb_sets':'new'
	    ()
'tset_size'/1 =
    %% Line 602
    fun (_cor0) ->
	%% Line 603
	call 'gb_sets':'size'
	    (_cor0)
'tset_insert'/2 =
    %% Line 605
    fun (_cor1,_cor0) ->
	%% Line 606
	call 'gb_sets':'add_element'
	    (_cor0, _cor1)
'tset_add_list'/2 =
    %% Line 608
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 609
	    call 'gb_sets':'from_list'
		(_cor0)
	in  %% Line 609
	    call 'gb_sets':'union'
		(_cor1, _cor2)
'tset_del_list'/2 =
    %% Line 611
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 612
	    call 'gb_sets':'from_list'
		(_cor0)
	in  %% Line 612
	    call 'gb_sets':'subtract'
		(_cor1, _cor2)
'tset_filter'/2 =
    %% Line 614
    fun (_cor1,_cor0) ->
	%% Line 615
	call 'gb_sets':'filter'
	    (_cor0, _cor1)
'tset_to_list'/1 =
    %% Line 617
    fun (_cor0) ->
	%% Line 618
	call 'gb_sets':'to_list'
	    (_cor0)
'defun_minframe'/1 =
    %% Line 626
    fun (_cor0) ->
	let <_cor1> =
	    %% Line 627
	    call 'hipe_ppc':'defun_code'
		(_cor0)
	in  let <MaxTailArity> =
		%% Line 627
		apply 'body_mta'/2
		    (_cor1, 0)
	    in  let <_cor3> =
		    %% Line 628
		    call 'hipe_ppc':'defun_formals'
			(_cor0)
		in  let <_cor4> =
			%% Line 628
			apply 'fix_formals'/1
			    (_cor3)
		    in  let <MyArity> =
			    %% Line 628
			    call 'erlang':'length'
				(_cor4)
			in  let <_cor6> =
				%% Line 629
				call 'erlang':'-'
				    (MaxTailArity, MyArity)
			    in  %% Line 629
				call 'erlang':'max'
				    (_cor6, 0)
'body_mta'/2 =
    %% Line 631
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[I|Code],MTA> when 'true' ->
	      let <_cor2> =
		  %% Line 632
		  apply 'insn_mta'/2
		      (I, MTA)
	      in  %% Line 632
		  apply 'body_mta'/2
		      (Code, _cor2)
	  %% Line 633
	  <[],MTA> when 'true' ->
	      %% Line 634
	      MTA
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor4,_cor3})
		  -| [{'function_name',{'body_mta',2}}] )
	    -| ['compiler_generated'] )
	end
'insn_mta'/2 =
    %% Line 636
    fun (_cor1,_cor0) ->
	%% Line 637
	case _cor1 of
	  %% Line 638
	  <{'pseudo_tailcall',_cor7,Arity,_cor8,_cor9}> when 'true' ->
	      let <_cor2> =
		  %% Line 639
		  call 'hipe_ppc_registers':'nr_args'
		      ()
	      in  let <_cor3> =
		      %% Line 639
		      call 'erlang':'-'
			  (Arity, _cor2)
		  in  %% Line 639
		      call 'erlang':'max'
			  (_cor0, _cor3)
	  %% Line 640
	  <_cor10> when 'true' ->
	      _cor0
	end
'ensure_minframe'/2 =
    %% Line 648
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 649
	    apply 'tset_size'/1
		(_cor0)
	in  %% Line 649
	    apply 'ensure_minframe'/3
		(_cor1, _cor2, _cor0)
'ensure_minframe'/3 =
    %% Line 651
    fun (_cor2,_cor1,_cor0) ->
	%% Line 652
	case <> of
	  <>
	      when call 'erlang':'>'
		    (_cor2,
		     _cor1) ->
	      let <Temp> =
		  %% Line 653
		  call 'hipe_ppc':'mk_new_temp'
		      ('untagged')
	      in  let <_cor5> =
		      %% Line 654
		      call 'erlang':'+'
			  (_cor1, 1)
		  in  let <_cor4> =
			  %% Line 654
			  apply 'tset_insert'/2
			      (_cor0, Temp)
		      in  %% Line 654
			  apply 'ensure_minframe'/3
			      (_cor2, _cor5, _cor4)
	  %% Line 655
	  <> when 'true' ->
	      _cor0
	end
'word_size'/0 =
    %% Line 658
    fun () ->
	%% Line 659
	call 'hipe_rtl_arch':'word_size'
	    ()
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_ppc_frame')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_ppc_frame', _cor0)
end