module 'hipe_spillcost' ['inc_costs'/2,
			 'module_info'/0,
			 'module_info'/1,
			 'new'/1,
			 'ref_in_bb'/2,
			 'spill_cost'/2]
    attributes [%% Line 21
		'type' =
		    %% Line 21
		    [{'hipe_array',{'type',21,'integer',[]},[]}],
		%% Line 23
		'type' =
		    %% Line 23
		    [{{'record','spill_cost'},[{'typed_record_field',{'record_field',24,{'atom',24,'uses'}},{'type',24,'union',[{'atom',24,'undefined'}|[{'type',24,'hipe_array',[]}]]}}|[{'typed_record_field',{'record_field',25,{'atom',25,'bb_uses'}},{'type',25,'union',[{'atom',25,'undefined'}|[{'type',25,'hipe_array',[]}]]}}]],[]}],
		%% Line 38
		'spec' =
		    %% Line 38
		    [{{'new',1},[{'type',38,'fun',[{'type',38,'product',[{'type',38,'non_neg_integer',[]}]}|[{'type',38,'record',[{'atom',38,'spill_cost'}]}]]}]}],
		%% Line 50
		'spec' =
		    %% Line 50
		    [{{'inc_costs',2},[{'type',50,'fun',[{'type',50,'product',[{'type',50,'list',[{'type',50,'non_neg_integer',[]}]}|[{'type',50,'record',[{'atom',50,'spill_cost'}]}]]}|[{'type',50,'record',[{'atom',50,'spill_cost'}]}]]}]}],
		%% Line 73
		'spec' =
		    %% Line 73
		    [{{'ref_in_bb',2},[{'type',73,'fun',[{'type',73,'product',[{'type',73,'list',[{'type',73,'non_neg_integer',[]}]}|[{'type',73,'record',[{'atom',73,'spill_cost'}]}]]}|[{'type',73,'record',[{'atom',73,'spill_cost'}]}]]}]}],
		%% Line 98
		'spec' =
		    %% Line 98
		    [{{'spill_cost',2},[{'type',98,'fun',[{'type',98,'product',[{'type',98,'non_neg_integer',[]}|[{'type',98,'record',[{'atom',98,'spill_cost'}]}]]}|[{'type',98,'float',[]}]]}]}]]
'new'/1 =
    %% Line 40
    fun (_cor0) ->
	let <_cor2> =
	    %% Line 41
	    call 'hipe_bifs':'array'
		(_cor0, 0)
	in  let <_cor1> =
		%% Line 42
		call 'hipe_bifs':'array'
		    (_cor0, 0)
	    in  %% Line 41
		{'spill_cost',_cor2,_cor1}
'inc_costs'/2 =
    %% Line 52
    fun (_cor1,_cor0) ->
	%% Line 53
	( case _cor0 of
	    ( <( {'spill_cost',_rec0,_cor10}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor7> =
		      %% Line 54
		      ( fun (_cor5) ->
			    apply 'inc_use'/2
				(_cor5, _rec0)
			-| [{'id',{0,0,'-inc_costs/2-fun-0-'}}] )
		  in  do  %% Line 54
			  call 'lists':'foreach'
			      (_cor7, _cor1)
			  _cor0
	      -| ['compiler_generated'] )
	    ( <_cor11> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','spill_cost'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'inc_use'/2 =
    %% Line 57
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 58
	    apply 'get_uses'/2
		(_cor1, _cor0)
	in  let <_cor3> =
		%% Line 58
		call 'erlang':'+'
		    (_cor2, 1)
	    in  %% Line 58
		call 'hipe_bifs':'array_update'
		    (_cor0, _cor1, _cor3)
'nr_of_use'/2 =
    %% Line 60
    fun (_cor1,_cor0) ->
	%% Line 61
	( case _cor0 of
	    ( <( {'spill_cost',_rec1,_cor6}
		 -| ['compiler_generated'] )> when 'true' ->
		  apply 'get_uses'/2
		      (_cor1, _rec1)
	      -| ['compiler_generated'] )
	    ( <_cor7> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','spill_cost'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'get_uses'/2 =
    %% Line 63
    fun (_cor1,_cor0) ->
	%% Line 64
	call 'hipe_bifs':'array_sub'
	    (_cor0, _cor1)
'ref_in_bb'/2 =
    %% Line 75
    fun (_cor1,_cor0) ->
	%% Line 76
	( case _cor0 of
	    ( <( {'spill_cost',_cor10,_rec2}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_cor7> =
		      %% Line 77
		      ( fun (_cor5) ->
			    apply 'inc_bb_use'/2
				(_cor5, _rec2)
			-| [{'id',{0,0,'-ref_in_bb/2-fun-0-'}}] )
		  in  do  %% Line 77
			  call 'lists':'foreach'
			      (_cor7, _cor1)
			  _cor0
	      -| ['compiler_generated'] )
	    ( <_cor11> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','spill_cost'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'inc_bb_use'/2 =
    %% Line 80
    fun (_cor1,_cor0) ->
	let <_cor2> =
	    %% Line 81
	    apply 'get_bb_uses'/2
		(_cor1, _cor0)
	in  let <_cor3> =
		%% Line 81
		call 'erlang':'+'
		    (_cor2, 1)
	    in  %% Line 81
		call 'hipe_bifs':'array_update'
		    (_cor0, _cor1, _cor3)
'bb_use'/2 =
    %% Line 83
    fun (_cor1,_cor0) ->
	%% Line 84
	( case _cor0 of
	    ( <( {'spill_cost',_cor6,_rec3}
		 -| ['compiler_generated'] )> when 'true' ->
		  apply 'get_bb_uses'/2
		      (_cor1, _rec3)
	      -| ['compiler_generated'] )
	    ( <_cor7> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','spill_cost'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'get_bb_uses'/2 =
    %% Line 86
    fun (_cor1,_cor0) ->
	%% Line 87
	call 'hipe_bifs':'array_sub'
	    (_cor0, _cor1)
'spill_cost'/2 =
    %% Line 100
    fun (_cor1,_cor0) ->
	let <_cor3> =
	    %% Line 101
	    apply 'nr_of_use'/2
		(_cor1, _cor0)
	in  let <_cor2> =
		%% Line 101
		apply 'bb_use'/2
		    (_cor1, _cor0)
	    in  %% Line 101
		call 'erlang':'/'
		    (_cor3, _cor2)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_spillcost')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_spillcost', _cor0)
end