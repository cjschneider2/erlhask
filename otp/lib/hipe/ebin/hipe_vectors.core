module 'hipe_vectors' ['get'/2,
		       'list'/1,
		       'module_info'/0,
		       'module_info'/1,
		       'new'/2,
		       'set'/3,
		       'size'/1,
		       'vector_to_list'/1]
    attributes [%% Line 27
		'type' =
		    %% Line 27
		    [{'hipe_vector',{'remote_type',27,[{'atom',27,'gb_trees'}|[{'atom',27,'tree'}|[[]]]]},[]}],
		%% Line 71
		'spec' =
		    %% Line 71
		    [{{'new',2},[{'type',71,'fun',[{'type',71,'product',[{'type',71,'non_neg_integer',[]}|[{'var',71,'_'}]]}|[{'type',71,'hipe_vector',[]}]]}]}],
		%% Line 83
		'spec' =
		    %% Line 83
		    [{{'size',1},[{'type',83,'fun',[{'type',83,'product',[{'type',83,'hipe_vector',[]}]}|[{'type',83,'non_neg_integer',[]}]]}]}],
		%% Line 86
		'spec' =
		    %% Line 86
		    [{{'list',1},[{'type',86,'fun',[{'type',86,'product',[{'type',86,'hipe_vector',[]}]}|[{'type',86,'list',[{'type',86,'tuple',[{'var',86,'_'}|[{'var',86,'_'}]]}]}]]}]}],
		%% Line 99
		'spec' =
		    %% Line 99
		    [{{'vector_to_list',1},[{'type',99,'fun',[{'type',99,'product',[{'type',99,'hipe_vector',[]}]}|[{'type',99,'list',[{'var',99,'_'}]}]]}]}],
		%% Line 103
		'spec' =
		    %% Line 103
		    [{{'set',3},[{'type',103,'fun',[{'type',103,'product',[{'type',103,'hipe_vector',[]}|[{'type',103,'non_neg_integer',[]}|[{'var',103,'_'}]]]}|[{'type',103,'hipe_vector',[]}]]}]}],
		%% Line 107
		'spec' =
		    %% Line 107
		    [{{'get',2},[{'type',107,'fun',[{'type',107,'product',[{'type',107,'hipe_vector',[]}|[{'type',107,'non_neg_integer',[]}]]}|[{'type',107,'any',[]}]]}]}]]
'new'/2 =
    %% Line 72
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <N,V>
	      when let <_cor2> =
		    call 'erlang':'is_integer'
			(N)
		in  let <_cor3> =
			call 'erlang':'>='
			    (N, 0)
		    in  call 'erlang':'and'
			    (_cor2, _cor3) ->
	      let <_cor4> =
		  %% Line 73
		  apply 'mklist'/2
		      (N, V)
	      in  %% Line 73
		  call 'gb_trees':'from_orddict'
		      (_cor4)
	  ( <_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor6,_cor5})
		  -| [{'function_name',{'new',2}}] )
	    -| ['compiler_generated'] )
	end
'mklist'/2 =
    %% Line 75
    fun (_cor1,_cor0) ->
	%% Line 76
	apply 'mklist'/3
	    (0, _cor1, _cor0)
'mklist'/3 =
    %% Line 78
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <M,N,V>
	      when call 'erlang':'<'
		    (M,
		     N) ->
	      let <_cor3> =
		  %% Line 79
		  call 'erlang':'+'
		      (M, 1)
	      in  let <_cor4> =
		      %% Line 79
		      apply 'mklist'/3
			  (_cor3, N, V)
		  in  %% Line 79
		      [{M,V}|_cor4]
	  %% Line 80
	  <_cor8,_cor9,_cor10> when 'true' ->
	      %% Line 81
	      []
	end
'size'/1 =
    %% Line 84
    fun (_cor0) ->
	call 'gb_trees':'size'
	    (_cor0)
'list'/1 =
    %% Line 87
    fun (_cor0) ->
	%% Line 88
	call 'gb_trees':'to_list'
	    (_cor0)
'vector_to_list'/1 =
    %% Line 100
    fun (_cor0) ->
	%% Line 101
	call 'gb_trees':'values'
	    (_cor0)
'set'/3 =
    %% Line 104
    fun (_cor2,_cor1,_cor0) ->
	%% Line 105
	call 'gb_trees':'update'
	    (_cor1, _cor0, _cor2)
'get'/2 =
    %% Line 108
    fun (_cor1,_cor0) ->
	%% Line 109
	call 'gb_trees':'get'
	    (_cor0, _cor1)
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_vectors')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_vectors', _cor0)
end