module 'hipe_gen_cfg' ['module_info'/0,
		       'module_info'/1,
		       'pred'/2,
		       'start_label'/1,
		       'succ'/2]
    attributes [%% Line 301
		'type' =
		    %% Line 301
		    [{{'record','comp_servers'},[{'typed_record_field',{'record_field',301,{'atom',301,'pp_server'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'range'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}|[{'typed_record_field',{'record_field',301,{'atom',301,'type'}},{'type',301,'union',[{'atom',301,'undefined'}|[{'type',301,'pid',[]}]]}}]]],[]}],
		%% Line 307
		'type' =
		    %% Line 307
		    [{'comp_option',{'type',307,'union',[{'type',307,'atom',[]}|[{'type',307,'tuple',[{'type',307,'atom',[]}|[{'type',307,'atom',[]}]]}]]},[]}],
		%% Line 308
		'type' =
		    %% Line 308
		    [{'comp_options',{'type',308,'list',[{'type',308,'comp_option',[]}]},[]}],
		%% Line 310
		'type' =
		    %% Line 310
		    [{'hipe_architecture',{'type',311,'union',[{'atom',311,'amd64'}|[{'atom',311,'arm'}|[{'atom',311,'powerpc'}|[{'atom',311,'ppc64'}|[{'atom',311,'ultrasparc'}|[{'atom',311,'x86'}]]]]]]},[]}],
		%% Line 313
		'type' =
		    %% Line 313
		    [{'hipe_map',{'type',313,'list',[{'type',313,'tuple',[{'type',313,'non_neg_integer',[]}|[{'type',314,'union',[{'atom',314,'unknown'}|[{'type',314,'tuple',[{'type',314,'union',[{'atom',314,'reg'}|[{'atom',314,'fp_reg'}|[{'atom',314,'spill'}]]]}|[{'type',315,'non_neg_integer',[]}]]}]]}]]}]},[]}],
		%% Line 316
		'type' =
		    %% Line 316
		    [{'hipe_temp_map',{'type',316,'tuple','any'},[]}],
		%% Line 317
		'type' =
		    %% Line 317
		    [{'hipe_spill_map',{'type',317,'list',[{'type',317,'tuple',[{'type',317,'non_neg_integer',[]}|[{'type',317,'tuple',[{'atom',317,'spill'}|[{'type',317,'non_neg_integer',[]}]]}]]}]},[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{'cfg_lbl',{'type',28,'non_neg_integer',[]},[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','cfg_info'},[{'typed_record_field',{'record_field',34,{'atom',34,'fun'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'type',34,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',35,{'atom',35,'start_label'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'cfg_lbl',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'is_closure'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',37,{'atom',37,'closure_arity'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'type',37,'arity',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'is_leaf'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'boolean',[]}]]}}|[{'record_field',39,{'atom',39,'params'}}|[{'record_field',40,{'atom',40,'info'},{'nil',40}}]]]]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'cfg_data',{'type',45,'tuple',[{'remote_type',45,[{'atom',45,'dict'}|[{'atom',45,'dict'}|[[]]]]}|[{'type',45,'list',[{'type',45,'cfg_lbl',[]}]}|[{'type',45,'non_neg_integer',[]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','cfg'},[{'typed_record_field',{'record_field',50,{'atom',50,'table'},{'call',50,{'remote',50,{'atom',50,'gb_trees'},{'atom',50,'empty'}},[]}},{'remote_type',50,[{'atom',50,'gb_trees'}|[{'atom',50,'tree'}|[[]]]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'info'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'type',51,'record',[{'atom',51,'cfg_info'}]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'data'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'cfg_data',[]}]]}}]]],[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{'cfg',{'type',53,'record',[{'atom',53,'cfg'}]},[]}],
		%% Line 33
		'spec' =
		    %% Line 33
		    [{{'succ',2},[{'type',33,'fun',[{'type',33,'product',[{'type',33,'cfg',[]}|[{'type',33,'cfg_lbl',[]}]]}|[{'type',33,'list',[{'type',33,'cfg_lbl',[]}]}]]}]}],
		%% Line 34
		'spec' =
		    %% Line 34
		    [{{'pred',2},[{'type',34,'fun',[{'type',34,'product',[{'type',34,'cfg',[]}|[{'type',34,'cfg_lbl',[]}]]}|[{'type',34,'list',[{'type',34,'cfg_lbl',[]}]}]]}]}],
		%% Line 141
		'spec' =
		    %% Line 141
		    [{{'start_label',1},[{'type',141,'fun',[{'type',141,'product',[{'type',141,'cfg',[]}]}|[{'type',141,'cfg_lbl',[]}]]}]}]]
'start_label'/1 =
    %% Line 142
    fun (_cor0) ->
	( case _cor0 of
	    ( <( {'cfg',_cor5,_rec1,_cor6}
		 -| ['compiler_generated'] )> when 'true' ->
		  ( case _rec1 of
		      ( <( {'cfg_info',_cor8,_rec0,_cor9,_cor10,_cor11,_cor12,_cor13}
			   -| ['compiler_generated'] )> when 'true' ->
			    _rec0
			-| ['compiler_generated'] )
		      ( <_cor14> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','cfg_info'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	    ( <_cor7> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'succ'/2 =
    %% Line 551
    fun (_cor1,_cor0) ->
	%% Line 552
	( case _cor1 of
	    ( <( {'cfg',_rec2,_cor8,_cor9}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_597> =
		      %% Line 553
		      call 'gb_trees':'lookup'
			  (_cor0, _rec2)
		  in  %% Line 553
		      case _597 of
			%% Line 554
			<{'value',{_X_Block,Succ,_X_Pred}}> when 'true' ->
			    Succ
			%% Line 556
			<'none'> when 'true' ->
			    %% Line 557
			    call 'erlang':'error'
				({[115|[117|[99|[99|[101|[115|[115|[111|[114|[32|[110|[111|[116|[32|[102|[111|[117|[110|[100]]]]]]]]]]]]]]]]]]],_cor0,_cor1})
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_597})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_cor10> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'pred'/2 =
    %% Line 561
    fun (_cor1,_cor0) ->
	%% Line 562
	( case _cor1 of
	    ( <( {'cfg',_rec3,_cor8,_cor9}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_724> =
		      %% Line 563
		      call 'gb_trees':'lookup'
			  (_cor0, _rec3)
		  in  %% Line 563
		      case _724 of
			%% Line 564
			<{'value',{_X_Block,_X_Succ,Pred}}> when 'true' ->
			    Pred
			%% Line 566
			<'none'> when 'true' ->
			    %% Line 567
			    call 'erlang':'error'
				({[112|[114|[101|[100|[101|[99|[101|[115|[115|[111|[114|[32|[110|[111|[116|[32|[102|[111|[117|[110|[100]]]]]]]]]]]]]]]]]]]]],_cor0,_cor1})
			( <_cor5> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_724})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_cor10> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','cfg'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_gen_cfg')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_gen_cfg', _cor0)
end