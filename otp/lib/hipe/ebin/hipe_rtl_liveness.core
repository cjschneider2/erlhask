module 'hipe_rtl_liveness' ['analyze'/1,
			    'livein'/2,
			    'liveout'/2,
			    'module_info'/0,
			    'module_info'/1,
			    'pp'/1]
    attributes [%% Line 28
		'type' =
		    %% Line 28
		    [{{'record','alu'},[{'record_field',28,{'atom',28,'dst'}}|[{'record_field',28,{'atom',28,'src1'}}|[{'record_field',28,{'atom',28,'op'}}|[{'record_field',28,{'atom',28,'src2'}}]]]],[]}],
		%% Line 29
		'type' =
		    %% Line 29
		    [{{'record','alub'},[{'record_field',29,{'atom',29,'dst'}}|[{'record_field',29,{'atom',29,'src1'}}|[{'record_field',29,{'atom',29,'op'}}|[{'record_field',29,{'atom',29,'src2'}}|[{'record_field',29,{'atom',29,'cond'}}|[{'record_field',29,{'atom',29,'true_label'}}|[{'record_field',29,{'atom',29,'false_label'}}|[{'record_field',29,{'atom',29,'p'}}]]]]]]]],[]}],
		%% Line 30
		'type' =
		    %% Line 30
		    [{{'record','branch'},[{'record_field',30,{'atom',30,'src1'}}|[{'record_field',30,{'atom',30,'src2'}}|[{'record_field',30,{'atom',30,'cond'}}|[{'record_field',30,{'atom',30,'true_label'}}|[{'record_field',30,{'atom',30,'false_label'}}|[{'record_field',30,{'atom',30,'p'}}]]]]]],[]}],
		%% Line 31
		'type' =
		    %% Line 31
		    [{{'record','call'},[{'record_field',31,{'atom',31,'dstlist'}}|[{'record_field',31,{'atom',31,'fun'}}|[{'record_field',31,{'atom',31,'arglist'}}|[{'record_field',31,{'atom',31,'type'}}|[{'record_field',31,{'atom',31,'continuation'}}|[{'record_field',32,{'atom',32,'failcontinuation'}}|[{'record_field',32,{'atom',32,'normalcontinuation'},{'nil',32}}]]]]]]],[]}],
		%% Line 33
		'type' =
		    %% Line 33
		    [{{'record','comment'},[{'record_field',33,{'atom',33,'text'}}],[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','enter'},[{'record_field',34,{'atom',34,'fun'}}|[{'record_field',34,{'atom',34,'arglist'}}|[{'record_field',34,{'atom',34,'type'}}]]],[]}],
		%% Line 35
		'type' =
		    %% Line 35
		    [{{'record','fconv'},[{'record_field',35,{'atom',35,'dst'}}|[{'record_field',35,{'atom',35,'src'}}]],[]}],
		%% Line 36
		'type' =
		    %% Line 36
		    [{{'record','fixnumop'},[{'record_field',36,{'atom',36,'dst'}}|[{'record_field',36,{'atom',36,'src'}}|[{'record_field',36,{'atom',36,'type'}}]]],[]}],
		%% Line 37
		'type' =
		    %% Line 37
		    [{{'record','fload'},[{'record_field',37,{'atom',37,'dst'}}|[{'record_field',37,{'atom',37,'src'}}|[{'record_field',37,{'atom',37,'offset'}}]]],[]}],
		%% Line 38
		'type' =
		    %% Line 38
		    [{{'record','fmove'},[{'record_field',38,{'atom',38,'dst'}}|[{'record_field',38,{'atom',38,'src'}}]],[]}],
		%% Line 39
		'type' =
		    %% Line 39
		    [{{'record','fp'},[{'record_field',39,{'atom',39,'dst'}}|[{'record_field',39,{'atom',39,'src1'}}|[{'record_field',39,{'atom',39,'op'}}|[{'record_field',39,{'atom',39,'src2'}}]]]],[]}],
		%% Line 40
		'type' =
		    %% Line 40
		    [{{'record','fp_unop'},[{'record_field',40,{'atom',40,'dst'}}|[{'record_field',40,{'atom',40,'src'}}|[{'record_field',40,{'atom',40,'op'}}]]],[]}],
		%% Line 41
		'type' =
		    %% Line 41
		    [{{'record','fstore'},[{'record_field',41,{'atom',41,'base'}}|[{'record_field',41,{'atom',41,'offset'}}|[{'record_field',41,{'atom',41,'src'}}]]],[]}],
		%% Line 42
		'type' =
		    %% Line 42
		    [{{'record','gctest'},[{'record_field',42,{'atom',42,'words'}}],[]}],
		%% Line 43
		'type' =
		    %% Line 43
		    [{{'record','goto'},[{'record_field',43,{'atom',43,'label'}}],[]}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{{'record','goto_index'},[{'record_field',44,{'atom',44,'block'}}|[{'record_field',44,{'atom',44,'index'}}|[{'record_field',44,{'atom',44,'labels'}}]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{{'record','label'},[{'record_field',45,{'atom',45,'name'}}],[]}],
		%% Line 46
		'type' =
		    %% Line 46
		    [{{'record','load'},[{'record_field',46,{'atom',46,'dst'}}|[{'record_field',46,{'atom',46,'src'}}|[{'record_field',46,{'atom',46,'offset'}}|[{'record_field',46,{'atom',46,'size'}}|[{'record_field',46,{'atom',46,'sign'}}]]]]],[]}],
		%% Line 47
		'type' =
		    %% Line 47
		    [{{'record','load_address'},[{'record_field',47,{'atom',47,'dst'}}|[{'record_field',47,{'atom',47,'addr'}}|[{'record_field',47,{'atom',47,'type'}}]]],[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{{'record','load_atom'},[{'record_field',48,{'atom',48,'dst'}}|[{'record_field',48,{'atom',48,'atom'}}]],[]}],
		%% Line 49
		'type' =
		    %% Line 49
		    [{{'record','load_word_index'},[{'record_field',49,{'atom',49,'dst'}}|[{'record_field',49,{'atom',49,'block'}}|[{'record_field',49,{'atom',49,'index'}}]]],[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','move'},[{'record_field',50,{'atom',50,'dst'}}|[{'record_field',50,{'atom',50,'src'}}]],[]}],
		%% Line 51
		'type' =
		    %% Line 51
		    [{{'record','multimove'},[{'record_field',51,{'atom',51,'dstlist'}}|[{'record_field',51,{'atom',51,'srclist'}}]],[]}],
		%% Line 52
		'type' =
		    %% Line 52
		    [{{'record','phi'},[{'record_field',52,{'atom',52,'dst'}}|[{'record_field',52,{'atom',52,'id'}}|[{'record_field',52,{'atom',52,'arglist'}}]]],[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{{'record','return'},[{'record_field',53,{'atom',53,'varlist'}}],[]}],
		%% Line 54
		'type' =
		    %% Line 54
		    [{{'record','store'},[{'record_field',54,{'atom',54,'base'}}|[{'record_field',54,{'atom',54,'offset'}}|[{'record_field',54,{'atom',54,'src'}}|[{'record_field',54,{'atom',54,'size'}}]]]],[]}],
		%% Line 55
		'type' =
		    %% Line 55
		    [{{'record','switch'},[{'record_field',55,{'atom',55,'src'}}|[{'record_field',55,{'atom',55,'labels'}}|[{'record_field',55,{'atom',55,'sorted_by'},{'nil',55}}]]],[]}],
		%% Line 28
		'type' =
		    %% Line 28
		    [{'cfg_lbl',{'type',28,'non_neg_integer',[]},[]}],
		%% Line 34
		'type' =
		    %% Line 34
		    [{{'record','cfg_info'},[{'typed_record_field',{'record_field',34,{'atom',34,'fun'}},{'type',34,'union',[{'atom',34,'undefined'}|[{'type',34,'mfa',[]}]]}}|[{'typed_record_field',{'record_field',35,{'atom',35,'start_label'}},{'type',35,'union',[{'atom',35,'undefined'}|[{'type',35,'cfg_lbl',[]}]]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'is_closure'}},{'type',36,'union',[{'atom',36,'undefined'}|[{'type',36,'boolean',[]}]]}}|[{'typed_record_field',{'record_field',37,{'atom',37,'closure_arity'}},{'type',37,'union',[{'atom',37,'undefined'}|[{'type',37,'arity',[]}]]}}|[{'typed_record_field',{'record_field',38,{'atom',38,'is_leaf'}},{'type',38,'union',[{'atom',38,'undefined'}|[{'type',38,'boolean',[]}]]}}|[{'record_field',39,{'atom',39,'params'}}|[{'record_field',40,{'atom',40,'info'},{'nil',40}}]]]]]]],[]}],
		%% Line 45
		'type' =
		    %% Line 45
		    [{'cfg_data',{'type',45,'tuple',[{'remote_type',45,[{'atom',45,'dict'}|[{'atom',45,'dict'}|[[]]]]}|[{'type',45,'list',[{'type',45,'cfg_lbl',[]}]}|[{'type',45,'non_neg_integer',[]}]]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{{'record','cfg'},[{'typed_record_field',{'record_field',50,{'atom',50,'table'},{'call',50,{'remote',50,{'atom',50,'gb_trees'},{'atom',50,'empty'}},[]}},{'remote_type',50,[{'atom',50,'gb_trees'}|[{'atom',50,'tree'}|[[]]]]}}|[{'typed_record_field',{'record_field',51,{'atom',51,'info'}},{'type',51,'union',[{'atom',51,'undefined'}|[{'type',51,'record',[{'atom',51,'cfg_info'}]}]]}}|[{'typed_record_field',{'record_field',52,{'atom',52,'data'}},{'type',52,'union',[{'atom',52,'undefined'}|[{'type',52,'cfg_data',[]}]]}}]]],[]}],
		%% Line 53
		'type' =
		    %% Line 53
		    [{'cfg',{'type',53,'record',[{'atom',53,'cfg'}]},[]}],
		%% Line 74
		'spec' =
		    %% Line 74
		    [{{'analyze',1},[{'type',74,'fun',[{'type',74,'product',[{'type',74,'cfg',[]}]}|[{'remote_type',74,[{'atom',74,'gb_trees'}|[{'atom',74,'tree'}|[[]]]]}]]}]}],
		%% Line 212
		'spec' =
		    %% Line 212
		    [{{'livein',2},[{'type',212,'fun',[{'type',212,'product',[{'remote_type',212,[{'atom',212,'gb_trees'}|[{'atom',212,'tree'}|[[]]]]}|[{'var',212,'_'}]]}|[{'type',212,'list',[{'var',212,'_'}]}]]}]}],
		%% Line 315
		'spec' =
		    %% Line 315
		    [{{'pp',1},[{'type',315,'fun',[{'type',315,'product',[{'type',315,'cfg',[]}]}|[{'atom',315,'ok'}]]}]}]]
'analyze'/1 =
    %% Line 96
    fun (_cor0) ->
	let <PO> =
	    call 'hipe_rtl_cfg':'postorder'
		(_cor0)
	in  let <_cor2> =
		%% Line 98
		apply 'init'/2
		    (PO, _cor0)
	    in  let <_cor1> =
		    %% Line 295
		    call 'gb_trees':'empty'
			()
		in  let <InitLiveness> =
			%% Line 295
			apply 'liveness_init'/2
			    (_cor2, _cor1)
		    in  %% Line 99
			apply 'merry_go_around'/3
			    (PO, InitLiveness, 0)
'merry_go_around'/3 =
    %% Line 107
    fun (_cor2,_cor1,_cor0) ->
	let <_1812> =
	    %% Line 108
	    apply 'doit_once'/3
		(_cor2, _cor1, 0)
	in  %% Line 108
	    case _1812 of
	      %% Line 109
	      <{NewLiveness,0}> when 'true' ->
		  NewLiveness
	      %% Line 112
	      <{NewLiveness,_X_Changed}> when 'true' ->
		  let <_cor3> =
		      %% Line 113
		      call 'erlang':'+'
			  (_cor0, 1)
		  in  %% Line 113
		      apply 'merry_go_around'/3
			  (_cor2, NewLiveness, _cor3)
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_1812})
		-| ['compiler_generated'] )
	    end
'doit_once'/3 =
    %% Line 137
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],Liveness,Changed> when 'true' ->
	      %% Line 138
	      {_cor1,_cor0}
	  %% Line 139
	  <[L|Ls],Liveness,Changed> when 'true' ->
	      let <LiveOut> =
		  %% Line 140
		  apply 'liveout'/2
		      (_cor1, L)
	      in  let <_2288> =
		      %% Line 303
		      call 'gb_trees':'get'
			  (L, _cor1)
		  in  %% Line 219
		      case _2288 of
			<{{_X_Gen,Kill},_X_LiveIn,_X_Successors}> when 'true' ->
			    let <_fol43> =
				call 'ordsets':'subtract'
				    (LiveOut, Kill)
			    in  let <_1981> =
				    %% Line 303
				    call 'gb_trees':'get'
					(L, _cor1)
				in  %% Line 223
				    case _1981 of
				      <{{Gen,_X_Kill},_X_LiveIn,_X_Successors}> when 'true' ->
					  let <LiveIn> =
					      call 'ordsets':'union'
						  (_fol43, Gen)
					  in  let <_282> =
						  apply 'update_livein'/3
						      (L, LiveIn, _cor1)
					      in  case _282 of
						    <{NewLiveness,ChangedP}> when 'true' ->
							let <_cor9> =
							    call 'erlang':'+'
								(_cor0, ChangedP)
							in  apply 'doit_once'/3
								(Ls, NewLiveness, _cor9)
						    ( <_cor8> when 'true' ->
							  primop 'match_fail'
							      ({'badmatch',_282})
						      -| ['compiler_generated'] )
						  end
				      ( <_2816> when 'true' ->
					    primop 'match_fail'
						({'badmatch',_1981})
					-| ['compiler_generated'] )
				    end
			( <_4207> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_2288})
			  -| ['compiler_generated'] )
		      end
	  ( <_cor12,_cor11,_cor10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'doit_once',3}}] )
	    -| ['compiler_generated'] )
	end
'update_livein'/3 =
    %% Line 177
    fun (_cor2,_cor1,_cor0) ->
	let <_2237> =
	    %% Line 303
	    call 'gb_trees':'get'
		(_cor2, _cor0)
	in  %% Line 178
	    case _2237 of
	      <{GK,LiveIn,Successors}> when 'true' ->
		  let <_838> = {GK,_cor1,Successors}
		  in  let <NewLiveness> =
			  %% Line 305
			  call 'gb_trees':'update'
			      (_cor2, _838, _cor0)
		      in  %% Line 180
			  case <> of
			    <>
				when call 'erlang':'=:='
				      (LiveIn,
				       _cor1) ->
				%% Line 181
				{NewLiveness,0}
			    %% Line 182
			    <> when 'true' ->
				%% Line 183
				{NewLiveness,1}
			  end
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_2237})
		-| ['compiler_generated'] )
	    end
'liveout'/2 =
    %% Line 191
    fun (_cor1,_cor0) ->
	let <_1484> =
	    %% Line 303
	    call 'gb_trees':'get'
		(_cor0, _cor1)
	in  %% Line 209
	    case _1484 of
	      <{_X_GK,_X_LiveIn,Successors}> when 'true' ->
		  case Successors of
		    <[]> when 'true' ->
			call 'hipe_rtl_arch':'live_at_return'
			    ()
		    <_cor6> when 'true' ->
			let <_cor2> =
			    call 'ordsets':'new'
				()
			in  apply 'liveout1'/3
				(Successors, _cor1, _cor2)
		  end
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_1484})
		-| ['compiler_generated'] )
	    end
'liveout1'/3 =
    %% Line 203
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[],_X_Liveness,Live> when 'true' ->
	      _cor0
	  %% Line 205
	  <[L|Ls],Liveness,Live> when 'true' ->
	      let <_179> =
		  %% Line 303
		  call 'gb_trees':'get'
		      (L, _cor1)
	      in  %% Line 215
		  case _179 of
		    <{_X_GK,LiveIn,_X_Successors}> when 'true' ->
			let <_cor4> =
			    call 'ordsets':'union'
				(LiveIn, _cor0)
			in  apply 'liveout1'/3
				(Ls, _cor1, _cor4)
		    ( <_1712> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_179})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'liveout1',3}}] )
	    -| ['compiler_generated'] )
	end
'livein'/2 =
    %% Line 214
    fun (_cor1,_cor0) ->
	let <_179> =
	    %% Line 303
	    call 'gb_trees':'get'
		(_cor0, _cor1)
	in  %% Line 215
	    case _179 of
	      <{_X_GK,LiveIn,_X_Successors}> when 'true' ->
		  LiveIn
	      ( <_cor2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_179})
		-| ['compiler_generated'] )
	    end
'init'/2 =
    %% Line 237
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_cor10> when 'true' ->
	      %% Line 238
	      []
	  %% Line 239
	  <[L|Ls],CFG> when 'true' ->
	      let <BB> =
		  call 'hipe_rtl_cfg':'bb'
		      (_cor0, L)
	      in  let <Code> =
		      %% Line 241
		      call 'hipe_bb':'code'
			  (BB)
		  in  let <Succ> =
			  call 'hipe_rtl_cfg':'succ'
			      (_cor0, L)
		      in  let <Transfer> =
			      %% Line 243
			      apply 'make_bb_transfer'/2
				  (Code, Succ)
			  in  let <_cor6> =
				  %% Line 244
				  call 'ordsets':'new'
				      ()
			      in  let <_cor7> =
				      %% Line 244
				      apply 'init'/2
					  (Ls, _cor0)
				  in  %% Line 244
				      [{L,{Transfer,_cor6,Succ}}|_cor7]
	  ( <_cor9,_cor8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'init',2}}] )
	    -| ['compiler_generated'] )
	end
'make_bb_transfer'/2 =
    %% Line 247
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[],_X_Succ> when 'true' ->
	      let <_cor3> =
		  %% Line 248
		  call 'ordsets':'new'
		      ()
	      in  let <_cor2> =
		      %% Line 248
		      call 'ordsets':'new'
			  ()
		  in  %% Line 248
		      {_cor3,_cor2}
	  %% Line 249
	  <[I|Is],Succ> when 'true' ->
	      let <_3005> =
		  %% Line 250
		  apply 'make_bb_transfer'/2
		      (Is, _cor0)
	      in  %% Line 250
		  case _3005 of
		    <{Gen,Kill}> when 'true' ->
			let <_cor5> =
			    call 'hipe_rtl':'uses'
				(I)
			in  let <InstrGen> =
				%% Line 251
				call 'ordsets':'from_list'
				    (_cor5)
			    in  let <_cor7> =
				    call 'hipe_rtl':'defines'
					(I)
				in  let <InstrKill> =
					%% Line 252
					call 'ordsets':'from_list'
					    (_cor7)
				    in  let <Gen1> =
					    %% Line 253
					    call 'ordsets':'subtract'
						(Gen, InstrKill)
					in  let <Gen2> =
						%% Line 254
						call 'ordsets':'union'
						    (Gen1, InstrGen)
					    in  let <Kill1> =
						    %% Line 255
						    call 'ordsets':'union'
							(Kill, InstrKill)
						in  let <Kill2> =
							%% Line 256
							call 'ordsets':'subtract'
							    (Kill1, InstrGen)
						    in  %% Line 257
							{Gen2,Kill2}
		    ( <_cor4> when 'true' ->
			  primop 'match_fail'
			      ({'badmatch',_3005})
		      -| ['compiler_generated'] )
		  end
	  ( <_cor14,_cor13> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'make_bb_transfer',2}}] )
	    -| ['compiler_generated'] )
	end
'liveness_init'/2 =
    %% Line 297
    fun (_cor1,_cor0) ->
	case <_cor1,_cor0> of
	  <[{Lbl,Data}|Left],Acc> when 'true' ->
	      let <_cor2> =
		  %% Line 298
		  call 'gb_trees':'insert'
		      (Lbl, Data, _cor0)
	      in  %% Line 298
		  apply 'liveness_init'/2
		      (Left, _cor2)
	  %% Line 299
	  <[],Acc> when 'true' ->
	      _cor0
	  ( <_cor4,_cor3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor1,_cor0})
		  -| [{'function_name',{'liveness_init',2}}] )
	    -| ['compiler_generated'] )
	end
'pp'/1 =
    %% Line 316
    fun (_cor0) ->
	let <Liveness> =
	    %% Line 317
	    apply 'analyze'/1
		(_cor0)
	in  let <Labels> =
		call 'hipe_rtl_cfg':'reverse_postorder'
		    (_cor0)
	    in  let <_cor5> =
		    %% Line 319
		    apply 'print_blocks'/3
			(Labels, Liveness, _cor0)
		in  %% Line 319
		    case _cor5 of
		      <'ok'> when 'true' ->
			  _cor5
		      ( <_cor3> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_cor5})
			-| ['compiler_generated'] )
		    end
'print_blocks'/3 =
    %% Line 321
    fun (_cor2,_cor1,_cor0) ->
	case <_cor2,_cor1,_cor0> of
	  <[Lbl|Rest],Liveness,Cfg> when 'true' ->
	      do  %% Line 322
		  call 'io':'format'
		      ([126|[110|[76|[105|[118|[101|[105|[110|[58]]]]]]]]], [])
		  let <_179> =
		      call 'gb_trees':'get'
			  (Lbl, _cor1)
		  in  case _179 of
			<{_X_GK,LiveIn,_X_Successors}> when 'true' ->
			    do  do  apply 'print_live_list'/1
					(LiveIn)
				    do  %% Line 324
					call 'io':'format'
					    ([76|[97|[98|[101|[108|[32|[126|[119|[58|[126|[110]]]]]]]]]]], [Lbl|[]])
					do  let <BB> =
						call 'hipe_rtl_cfg':'bb'
						    (_cor0, Lbl)
					    in  let <Code> =
						    call 'hipe_bb':'code'
							(BB)
						in  call 'hipe_rtl':'pp_block'
							(Code)
					    %% Line 326
					    call 'io':'format'
						([76|[105|[118|[101|[111|[117|[116|[58]]]]]]]], [])
				let <_cor4> =
				    %% Line 327
				    apply 'liveout'/2
					(_cor1, Lbl)
				in  do  apply 'print_live_list'/1
					    (_cor4)
					%% Line 328
					apply 'print_blocks'/3
					    (Rest, _cor1, _cor0)
			( <_1870> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_179})
			  -| ['compiler_generated'] )
		      end
	  %% Line 329
	  <[],_X_Liveness,_X_Cfg> when 'true' ->
	      %% Line 330
	      'ok'
	  ( <_cor7,_cor6,_cor5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor2,_cor1,_cor0})
		  -| [{'function_name',{'print_blocks',3}}] )
	    -| ['compiler_generated'] )
	end
'print_live_list'/1 =
    %% Line 87
    fun (_cor0) ->
	case _cor0 of
	  <[]> when 'true' ->
	      %% Line 88
	      call 'io':'format'
		  ([32|[110|[111|[110|[101|[126|[110]]]]]]], [])
	  %% Line 89
	  <[Last|[]]> when 'true' ->
	      do  do  %% Line 90
		      call 'io':'format'
			  ([32], [])
		      %% Line 91
		      apply 'print_var'/1
			  (Last)
		  %% Line 92
		  call 'io':'format'
		      ([126|[110]], [])
	  %% Line 93
	  <[Var|Rest]> when 'true' ->
	      do  do  %% Line 94
		      call 'io':'format'
			  ([32], [])
		      do  %% Line 95
			  apply 'print_var'/1
			      (Var)
			  %% Line 96
			  call 'io':'format'
			      ([44], [])
		  %% Line 97
		  apply 'print_live_list'/1
		      (Rest)
	  ( <_cor1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_cor0})
		  -| [{'function_name',{'print_live_list',1}}] )
	    -| ['compiler_generated'] )
	end
'print_var'/1 =
    %% Line 99
    fun (_cor0) ->
	let <_3460> =
	    %% Line 100
	    call 'hipe_rtl':'is_var'
		(_cor0)
	in  %% Line 100
	    case _3460 of
	      %% Line 101
	      <'true'> when 'true' ->
		  %% Line 102
		  apply 'pp_var'/1
		      (_cor0)
	      %% Line 103
	      <'false'> when 'true' ->
		  let <_435> =
		      %% Line 104
		      call 'hipe_rtl':'is_reg'
			  (_cor0)
		  in  %% Line 104
		      case _435 of
			%% Line 105
			<'true'> when 'true' ->
			    %% Line 106
			    apply 'pp_reg'/1
				(_cor0)
			%% Line 107
			<'false'> when 'true' ->
			    let <_91> =
				%% Line 108
				call 'hipe_rtl':'is_fpreg'
				    (_cor0)
			    in  %% Line 108
				case _91 of
				  %% Line 109
				  <'true'> when 'true' ->
				      let <_cor1> =
					  %% Line 110
					  call 'hipe_rtl':'fpreg_index'
					      (_cor0)
				      in  %% Line 110
					  call 'io':'format'
					      ([102|[126|[119]]], [_cor1|[]])
				  %% Line 111
				  <'false'> when 'true' ->
				      %% Line 112
				      call 'io':'format'
					  ([117|[110|[107|[110|[111|[119|[110|[58|[126|[119]]]]]]]]]], [_cor0|[]])
				  ( <_cor2> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_91})
				    -| ['compiler_generated'] )
				end
			( <_cor3> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_435})
			  -| ['compiler_generated'] )
		      end
	      ( <_cor4> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_3460})
		-| ['compiler_generated'] )
	    end
'pp_reg'/1 =
    %% Line 120
    fun (_cor0) ->
	let <_41> =
	    %% Line 121
	    call 'hipe_rtl_arch':'is_precoloured'
		(_cor0)
	in  %% Line 121
	    case _41 of
	      %% Line 122
	      <'true'> when 'true' ->
		  let <_cor1> =
		      %% Line 123
		      call 'hipe_rtl':'reg_index'
			  (_cor0)
		  in  let <_379> =
			  call 'hipe_rtl_arch':'reg_name'
			      (_cor1)
		      in  call 'io':'format'
			      ([126|[115]], [_379|[]])
	      %% Line 124
	      <'false'> when 'true' ->
		  let <_cor2> =
		      %% Line 125
		      call 'hipe_rtl':'reg_index'
			  (_cor0)
		  in  %% Line 125
		      call 'io':'format'
			  ([114|[126|[119]]], [_cor2|[]])
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_41})
		-| ['compiler_generated'] )
	    end
'pp_var'/1 =
    %% Line 128
    fun (_cor0) ->
	let <_149> =
	    %% Line 129
	    call 'hipe_rtl_arch':'is_precoloured'
		(_cor0)
	in  %% Line 129
	    case _149 of
	      %% Line 130
	      <'true'> when 'true' ->
		  let <_cor1> =
		      %% Line 131
		      call 'hipe_rtl':'var_index'
			  (_cor0)
		  in  let <_768> =
			  call 'hipe_rtl_arch':'reg_name'
			      (_cor1)
		      in  call 'io':'format'
			      ([126|[115]], [_768|[]])
	      %% Line 132
	      <'false'> when 'true' ->
		  let <_cor2> =
		      %% Line 133
		      call 'hipe_rtl':'var_index'
			  (_cor0)
		  in  %% Line 133
		      call 'io':'format'
			  ([118|[126|[119]]], [_cor2|[]])
	      ( <_cor3> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_149})
		-| ['compiler_generated'] )
	    end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('hipe_rtl_liveness')
'module_info'/1 =
    fun (_cor0) ->
	call 'erlang':'get_module_info'
	    ('hipe_rtl_liveness', _cor0)
end